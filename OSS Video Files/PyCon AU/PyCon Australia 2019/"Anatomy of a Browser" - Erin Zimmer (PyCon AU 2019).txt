Title: "Anatomy of a Browser" - Erin Zimmer (PyCon AU 2019)
Publication date: 2019-08-03
Playlist: PyCon Australia 2019
Description: 
	Erin Zimmer

Web browsers are a bit like digestive systems - we all have one, but we're not really sure how it works, and sometimes it makes funny smells. So let's have a look at what's going on under the hood when your browser turns a bunch of characters into a delightful picture of a cat.

https://2019.pycon-au.org/talks/anatomy-of-a-browser

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 2 - 6 2019.

Video licence: CC BY-NC-SA 4.0 - https://creativecommons.org/licenses/by-nc-sa/4.0/

Python, PyCon, PyConAU

Sat Aug  3 13:30:00 2019 at Cockle Bay
Captions: 
	00:00:00,000 --> 00:00:05,640
today we have three talks and the first

00:00:02,010 --> 00:00:07,140
one is by Erin Zimmer whose developer a

00:00:05,640 --> 00:00:09,870
member of the mammal community of

00:00:07,140 --> 00:00:11,910
developers she's an experienced speaker

00:00:09,870 --> 00:00:13,920
about many languages some of which you

00:00:11,910 --> 00:00:17,789
may know and some of which you may not

00:00:13,920 --> 00:00:27,330
know and not Python so here she is Erin

00:00:17,789 --> 00:00:29,130
with anatomy of a browser hi sir yeah

00:00:27,330 --> 00:00:31,769
today we are going to look at what's

00:00:29,130 --> 00:00:35,160
going on inside a browser when it pauses

00:00:31,769 --> 00:00:36,600
your HTML and oh yeah I really don't

00:00:35,160 --> 00:00:40,290
know anything about Python so that

00:00:36,600 --> 00:00:40,980
should be fun like have you said my name

00:00:40,290 --> 00:00:43,770
is Erin

00:00:40,980 --> 00:00:45,719
I am a Mozilla tech speaker and I'm a

00:00:43,770 --> 00:00:50,430
Google developer expert in the area of

00:00:45,719 --> 00:00:51,629
web so I have seen a browser or two I

00:00:50,430 --> 00:00:53,940
work for a company called shine

00:00:51,629 --> 00:00:56,940
solutions where consultancy here in

00:00:53,940 --> 00:00:59,910
Sydney and down in Melbourne I'm not

00:00:56,940 --> 00:01:02,129
sure that we do any Python actually but

00:00:59,910 --> 00:01:03,750
we're always looking for web developers

00:01:02,129 --> 00:01:05,640
if anyone out there is looking for any

00:01:03,750 --> 00:01:16,590
work most importantly today

00:01:05,640 --> 00:01:19,300
though today is my birthday sir thank

00:01:16,590 --> 00:01:23,760
you yep

00:01:19,300 --> 00:01:23,760
[Laughter]

00:01:28,200 --> 00:01:33,640
so many of you ever developed for

00:01:30,700 --> 00:01:36,070
browsers you're probably aware that

00:01:33,640 --> 00:01:38,049
there's a bunch of them and it can be a

00:01:36,070 --> 00:01:41,259
little bit tricky to get your stuff to

00:01:38,049 --> 00:01:42,430
work the same across all of them the

00:01:41,259 --> 00:01:44,440
good news is though it's actually a lot

00:01:42,430 --> 00:01:46,360
easier now than it used to be so back in

00:01:44,440 --> 00:01:48,899
the bad old days of the browser wars

00:01:46,360 --> 00:01:51,520
when everyone was using Netscape or ie

00:01:48,899 --> 00:01:53,470
you basically had to choose whether your

00:01:51,520 --> 00:01:55,630
your app was going to work in one or the

00:01:53,470 --> 00:01:57,039
other whereas these days it's a lot

00:01:55,630 --> 00:01:59,530
easier to make things work across all

00:01:57,039 --> 00:02:02,799
browsers and there's a couple of reasons

00:01:59,530 --> 00:02:04,060
for that so the first one is that we

00:02:02,799 --> 00:02:06,369
have all of these wonderful standards

00:02:04,060 --> 00:02:08,319
organizations we've got the what WG who

00:02:06,369 --> 00:02:09,509
I think have the best logo it's a little

00:02:08,319 --> 00:02:13,180
question mark

00:02:09,509 --> 00:02:15,900
the World Wide Web Consortium and the

00:02:13,180 --> 00:02:18,130
amazingly named Technical Committee 39

00:02:15,900 --> 00:02:20,590
it's quite obvious what they do right

00:02:18,130 --> 00:02:23,470
yeah they take care of the JavaScript

00:02:20,590 --> 00:02:24,700
spec these organizations have been

00:02:23,470 --> 00:02:28,989
around since the 90s but these days

00:02:24,700 --> 00:02:32,590
browsers actually listen to them sir so

00:02:28,989 --> 00:02:35,140
the good news here is that while all

00:02:32,590 --> 00:02:36,549
browsers don't have all features like

00:02:35,140 --> 00:02:39,430
something might be implemented in one

00:02:36,549 --> 00:02:41,079
browser but not another if you have a

00:02:39,430 --> 00:02:42,700
feature that's been implemented in two

00:02:41,079 --> 00:02:44,500
browsers chances are it's been

00:02:42,700 --> 00:02:46,359
implemented to the same specification

00:02:44,500 --> 00:02:50,859
and it's going to work the same so this

00:02:46,359 --> 00:02:52,329
makes life a lot easier the other thing

00:02:50,859 --> 00:02:54,190
that makes life easier is actually the

00:02:52,329 --> 00:02:57,579
way that browsers are built so we look

00:02:54,190 --> 00:02:59,590
at a standards compliant browser here we

00:02:57,579 --> 00:03:03,609
can think of it as being as having two

00:02:59,590 --> 00:03:06,609
parts so the first part is this bit and

00:03:03,609 --> 00:03:09,190
this is the part of the browser that's

00:03:06,609 --> 00:03:11,109
not responsible for rendering your web

00:03:09,190 --> 00:03:14,799
app right so it's stuff like the the

00:03:11,109 --> 00:03:16,269
menus the tabs the window itself all the

00:03:14,799 --> 00:03:19,359
stuff that is the same no matter which

00:03:16,269 --> 00:03:22,630
page you're looking at this bit of the

00:03:19,359 --> 00:03:25,569
browser is called the browser chrome

00:03:22,630 --> 00:03:28,680
which is not to be confused with the

00:03:25,569 --> 00:03:31,410
browser Chrome

00:03:28,680 --> 00:03:33,269
google named their browser after the

00:03:31,410 --> 00:03:35,959
browser chrome because they probably

00:03:33,269 --> 00:03:37,950
shouldn't aiming things right

00:03:35,959 --> 00:03:39,690
anyway the other bit of the browser

00:03:37,950 --> 00:03:43,849
which is the bit that renders the web

00:03:39,690 --> 00:03:46,470
page is called the browser engine and

00:03:43,849 --> 00:03:50,310
there's a few different engines floating

00:03:46,470 --> 00:03:52,230
around so for instance Firefox which you

00:03:50,310 --> 00:03:54,299
may be familiar with is an open source

00:03:52,230 --> 00:03:56,959
browser which runs on an open source

00:03:54,299 --> 00:03:59,940
engine called gecko

00:03:56,959 --> 00:04:02,069
Safari is a proprietary browser and by

00:03:59,940 --> 00:04:06,360
Apple and it runs on an open source

00:04:02,069 --> 00:04:08,010
engine called WebKit Chrome as

00:04:06,360 --> 00:04:10,829
previously mentioned Google's browser

00:04:08,010 --> 00:04:12,780
you might have heard of it it runs it's

00:04:10,829 --> 00:04:15,239
a proprietary browser and it runs on an

00:04:12,780 --> 00:04:18,329
open source engine called blink which

00:04:15,239 --> 00:04:19,739
has named after HTML tag because again

00:04:18,329 --> 00:04:23,430
Google don't come up with the original

00:04:19,739 --> 00:04:26,370
names either so blink is a fork of

00:04:23,430 --> 00:04:29,400
WebKit and WebKit is actually a fork of

00:04:26,370 --> 00:04:31,050
an earlier engine called KHTML which was

00:04:29,400 --> 00:04:35,970
developed for the conquerer browser if

00:04:31,050 --> 00:04:37,440
anyone here is familiar with KDE and

00:04:35,970 --> 00:04:39,570
then we have things like chromium which

00:04:37,440 --> 00:04:41,370
is an open source browser which is also

00:04:39,570 --> 00:04:47,760
built on the open source blink engine

00:04:41,370 --> 00:04:53,610
and we can't forget edge as much as we

00:04:47,760 --> 00:04:55,530
might like to yes sir edge edge is built

00:04:53,610 --> 00:04:58,229
on an engine called edge HTML because

00:04:55,530 --> 00:05:00,030
Microsoft are good at naming things but

00:04:58,229 --> 00:05:01,590
as you may have heard in the in the news

00:05:00,030 --> 00:05:04,889
recently they've actually switched out

00:05:01,590 --> 00:05:07,050
to using blink so this is what people

00:05:04,889 --> 00:05:08,910
say when mean when they say that blink

00:05:07,050 --> 00:05:10,740
now runs on chromium it's using the edge

00:05:08,910 --> 00:05:14,039
now runs on chromium it's using the

00:05:10,740 --> 00:05:16,889
blink engine outside of these like major

00:05:14,039 --> 00:05:18,750
browsers we also have a bunch of more I

00:05:16,889 --> 00:05:20,250
guess niche browsers so things like

00:05:18,750 --> 00:05:22,669
opera which runs in embedded

00:05:20,250 --> 00:05:25,950
environments and low powered devices

00:05:22,669 --> 00:05:27,360
Samsung browser which you might be

00:05:25,950 --> 00:05:31,620
surprised to learn runs on Samsung

00:05:27,360 --> 00:05:33,630
devices the next one there is UC browser

00:05:31,620 --> 00:05:34,950
which is in no way a niche browser it's

00:05:33,630 --> 00:05:37,140
like one of the biggest browsers in

00:05:34,950 --> 00:05:40,350
China and India and down the bottom is

00:05:37,140 --> 00:05:42,870
brave the privacy focus browser

00:05:40,350 --> 00:05:44,970
and all of these browsers though they

00:05:42,870 --> 00:05:47,280
always run on blink so if your stuff

00:05:44,970 --> 00:05:50,400
works in Chrome it probably works in

00:05:47,280 --> 00:05:54,240
most places on desktops anyway and also

00:05:50,400 --> 00:05:57,210
on Android on iOS the situation is a

00:05:54,240 --> 00:05:59,310
little bit different an iOS everything

00:05:57,210 --> 00:06:01,140
runs on WebKit because Apple has a

00:05:59,310 --> 00:06:03,960
policy that says browsers in the App

00:06:01,140 --> 00:06:06,450
Store have to be like web views on

00:06:03,960 --> 00:06:08,670
Safari basically but if you can get your

00:06:06,450 --> 00:06:10,350
stuff to work in in Chrome and in Safari

00:06:08,670 --> 00:06:12,990
there's a good chance it works

00:06:10,350 --> 00:06:14,220
everywhere now whether you feel that's a

00:06:12,990 --> 00:06:18,180
good thing or not

00:06:14,220 --> 00:06:19,050
I'll leave up to you to decide okay so

00:06:18,180 --> 00:06:20,760
now we know with all the different

00:06:19,050 --> 00:06:23,340
browsers all the different engines are

00:06:20,760 --> 00:06:26,370
what do they actually do and the answer

00:06:23,340 --> 00:06:28,260
is that they take HTML and they turn it

00:06:26,370 --> 00:06:32,130
into bitmaps that you can display on the

00:06:28,260 --> 00:06:34,740
screen and they do that by taking your

00:06:32,130 --> 00:06:37,680
HTML which arrives over the network as a

00:06:34,740 --> 00:06:40,530
stream of characters and breaking it

00:06:37,680 --> 00:06:43,320
into like chunks that the browser can

00:06:40,530 --> 00:06:44,640
deal with which then builds a data

00:06:43,320 --> 00:06:46,740
structure that we can turn into a bitmap

00:06:44,640 --> 00:06:51,990
and no that is not a marquee element I

00:06:46,740 --> 00:06:54,420
did that with CSS so this this process

00:06:51,990 --> 00:06:57,030
has essentially five steps so

00:06:54,420 --> 00:06:58,860
tokenization and pausing happen every

00:06:57,030 --> 00:07:02,430
time a new document arrives over the

00:06:58,860 --> 00:07:04,170
network we do that once layout painting

00:07:02,430 --> 00:07:06,810
and composite are known as the rendering

00:07:04,170 --> 00:07:09,000
pipeline and these happen every time the

00:07:06,810 --> 00:07:10,890
paid the the screen refreshes so you

00:07:09,000 --> 00:07:12,510
know 60 times a second kind of thing if

00:07:10,890 --> 00:07:15,570
anything on the screen is changed then

00:07:12,510 --> 00:07:17,190
the browser repaints at all and it might

00:07:15,570 --> 00:07:18,960
have changed if you like resize the

00:07:17,190 --> 00:07:23,030
window or some JavaScript is run and

00:07:18,960 --> 00:07:25,980
done something all right so let's

00:07:23,030 --> 00:07:27,420
organization the tokenization is the

00:07:25,980 --> 00:07:29,930
process of taking that stream of

00:07:27,420 --> 00:07:33,450
characters and breaking it up into

00:07:29,930 --> 00:07:34,590
pieces that the engine can understand so

00:07:33,450 --> 00:07:37,650
it's kind of like if you're listening to

00:07:34,590 --> 00:07:40,950
someone talk what your ears receive is

00:07:37,650 --> 00:07:43,080
just a stream of sounds but what your

00:07:40,950 --> 00:07:44,670
brain does is break them up into words

00:07:43,080 --> 00:07:50,190
that then you can use to construct

00:07:44,670 --> 00:07:51,960
sentences if you can get them out so

00:07:50,190 --> 00:07:53,000
HTML doesn't have words it has HTML

00:07:51,960 --> 00:07:55,850
tokens

00:07:53,000 --> 00:07:57,230
and if you've ever written any HTML

00:07:55,850 --> 00:07:59,900
you're probably familiar with these and

00:07:57,230 --> 00:08:05,360
you haven't written any HTML welcome

00:07:59,900 --> 00:08:07,460
this is an interesting way to start so

00:08:05,360 --> 00:08:10,760
we have start tags things like an h1

00:08:07,460 --> 00:08:12,560
they can have attributes on them or they

00:08:10,760 --> 00:08:14,000
can be self closing tags which means

00:08:12,560 --> 00:08:16,490
they don't have any content inside them

00:08:14,000 --> 00:08:20,270
you have end tags which is the closing

00:08:16,490 --> 00:08:22,550
tags for those things text which is the

00:08:20,270 --> 00:08:23,720
content inside those things and things

00:08:22,550 --> 00:08:26,120
like comments and there's a few other

00:08:23,720 --> 00:08:29,720
ones but these ones are kind of the the

00:08:26,120 --> 00:08:32,330
main ones alright so how does the

00:08:29,720 --> 00:08:34,370
browser do this token ization it does it

00:08:32,330 --> 00:08:36,110
uses something called a finite state

00:08:34,370 --> 00:08:38,240
machine if you're not familiar with

00:08:36,110 --> 00:08:40,789
finite state machines they have two

00:08:38,240 --> 00:08:43,849
parts so we have the input which is our

00:08:40,789 --> 00:08:46,820
stream of characters and then we have a

00:08:43,849 --> 00:08:48,920
collection of states and each state has

00:08:46,820 --> 00:08:51,680
some rules about what you should do if

00:08:48,920 --> 00:08:54,050
you're in that state and given this

00:08:51,680 --> 00:08:56,060
current input character what action you

00:08:54,050 --> 00:08:58,820
should take and then which state you

00:08:56,060 --> 00:09:01,130
should go to next all right so let's

00:08:58,820 --> 00:09:03,680
have a look at that in action so here we

00:09:01,130 --> 00:09:07,070
have a browser across the top we've got

00:09:03,680 --> 00:09:10,760
our input HTML and then we've got all

00:09:07,070 --> 00:09:13,040
the possible states we start in the data

00:09:10,760 --> 00:09:15,950
state and we look at the data state it's

00:09:13,040 --> 00:09:18,470
got some rules it says if the current

00:09:15,950 --> 00:09:19,810
input character is a less than sign and

00:09:18,470 --> 00:09:23,420
we should go to the tag open state

00:09:19,810 --> 00:09:26,140
otherwise we should just omit the

00:09:23,420 --> 00:09:30,310
character and go back to the same state

00:09:26,140 --> 00:09:33,470
so our current input is a less than sign

00:09:30,310 --> 00:09:34,850
so let's do that so now we're in the

00:09:33,470 --> 00:09:40,220
taggert insane pretty exciting right

00:09:34,850 --> 00:09:42,589
yeah so the tag open state has a couple

00:09:40,220 --> 00:09:44,750
of rules the first one says that if the

00:09:42,589 --> 00:09:47,690
current input character now you might

00:09:44,750 --> 00:09:52,670
call this a forward slash the spec calls

00:09:47,690 --> 00:09:54,440
it a selita's so don't know why so if we

00:09:52,670 --> 00:09:56,330
have one of those you can create an

00:09:54,440 --> 00:09:58,400
intake token and go to the end tag open

00:09:56,330 --> 00:10:00,770
state otherwise if we've got a letter

00:09:58,400 --> 00:10:02,720
then we want to create a start tag token

00:10:00,770 --> 00:10:04,580
we want to give it a name and that name

00:10:02,720 --> 00:10:06,350
is going to be the current input

00:10:04,580 --> 00:10:06,620
character and then we want to go to the

00:10:06,350 --> 00:10:09,500
tag

00:10:06,620 --> 00:10:12,260
name state so we have a letter elder so

00:10:09,500 --> 00:10:14,390
we will do that second thing so now we

00:10:12,260 --> 00:10:17,510
have that token it's a start tag token

00:10:14,390 --> 00:10:21,290
and it has a name of L and now we're in

00:10:17,510 --> 00:10:22,910
the tag name state so this one

00:10:21,290 --> 00:10:23,990
the default option down the bottom is

00:10:22,910 --> 00:10:25,430
the one that we're going to do which is

00:10:23,990 --> 00:10:27,620
update the name to add the current

00:10:25,430 --> 00:10:29,510
character and then go back to that same

00:10:27,620 --> 00:10:32,390
state so we're going to do that as long

00:10:29,510 --> 00:10:35,150
as there's a cosmetic character we're

00:10:32,390 --> 00:10:38,480
just going to add to the name there then

00:10:35,150 --> 00:10:41,720
when we get a space we are going to go

00:10:38,480 --> 00:10:42,860
to the before attribute name and then

00:10:41,720 --> 00:10:44,840
we're going to go through that same kind

00:10:42,860 --> 00:10:47,900
of process again to build up that

00:10:44,840 --> 00:10:52,070
attribute the accurate name and that

00:10:47,900 --> 00:10:53,660
should be a value and then when we get

00:10:52,070 --> 00:10:55,220
to the greater than sign we're going to

00:10:53,660 --> 00:10:56,810
admit the token so now we've got a start

00:10:55,220 --> 00:10:59,240
tag token and we can create the next

00:10:56,810 --> 00:11:01,640
token which is a character token so we

00:10:59,240 --> 00:11:03,530
can go through all of our HTML there and

00:11:01,640 --> 00:11:05,210
create tokens out of all of our

00:11:03,530 --> 00:11:09,080
characters and then we've got our end

00:11:05,210 --> 00:11:11,830
tag token and finally we have another

00:11:09,080 --> 00:11:14,330
start tag which is an input tag and

00:11:11,830 --> 00:11:20,500
input tags are self closing tags so it's

00:11:14,330 --> 00:11:28,550
got no content we give it our ID and

00:11:20,500 --> 00:11:31,460
then we're done so now we have a bunch

00:11:28,550 --> 00:11:34,190
of tokens what are we going to do with

00:11:31,460 --> 00:11:36,320
them next so the next step in the

00:11:34,190 --> 00:11:38,540
process is HTML pausing and this is the

00:11:36,320 --> 00:11:41,360
process of turning our stack of tokens

00:11:38,540 --> 00:11:43,070
into the document object model which is

00:11:41,360 --> 00:11:46,970
a tree structure that the browser uses

00:11:43,070 --> 00:11:48,530
to keep track of your HTML so to the

00:11:46,970 --> 00:11:52,250
beginning of the structure that we use

00:11:48,530 --> 00:11:54,500
to create a bitmap so we're going to

00:11:52,250 --> 00:11:56,720
pause this document it's a pretty

00:11:54,500 --> 00:11:57,950
straightforward HTML document and the

00:11:56,720 --> 00:11:59,990
way that's going to happen is it's going

00:11:57,950 --> 00:12:01,400
to get passed in the tokenizer tokenizer

00:11:59,990 --> 00:12:03,200
is going to break it into tokens and

00:12:01,400 --> 00:12:05,780
then it's going to pass it to the puzzle

00:12:03,200 --> 00:12:07,520
so in the real world as soon as the

00:12:05,780 --> 00:12:09,020
token a token is emitted from the

00:12:07,520 --> 00:12:10,610
tokenizer you go straight to the puzzle

00:12:09,020 --> 00:12:14,390
so the two things happen kind of in

00:12:10,610 --> 00:12:17,710
parallel for performance reasons cool

00:12:14,390 --> 00:12:17,710
sir on

00:12:18,110 --> 00:12:23,480
that side is our input and on the other

00:12:21,620 --> 00:12:27,230
side is the output which is going to be

00:12:23,480 --> 00:12:29,150
our document object model so we start

00:12:27,230 --> 00:12:31,850
with that first token it is a doctype

00:12:29,150 --> 00:12:34,460
token which was previously not mentioned

00:12:31,850 --> 00:12:36,590
so this is a new type of token a doctype

00:12:34,460 --> 00:12:41,110
token is a special token that tells the

00:12:36,590 --> 00:12:43,580
positive because a few years back

00:12:41,110 --> 00:12:47,750
somebody had the bright idea that we

00:12:43,580 --> 00:12:50,360
should make HTML more XML II because we

00:12:47,750 --> 00:12:52,070
like XML I don't know so we wanted to

00:12:50,360 --> 00:12:54,020
make HTML so that it followed the strict

00:12:52,070 --> 00:12:56,000
rules of XML and it was more regular and

00:12:54,020 --> 00:12:58,760
I guess it makes it a bit easier for the

00:12:56,000 --> 00:13:02,540
pawza so we needed to have this doctype

00:12:58,760 --> 00:13:03,830
token to say hey Pazza this is an HTML 4

00:13:02,540 --> 00:13:08,300
document you need to treat it more like

00:13:03,830 --> 00:13:10,760
XML and sometime after that we realized

00:13:08,300 --> 00:13:12,800
that that maybe wasn't a great idea and

00:13:10,760 --> 00:13:15,200
we'd actually just like to write HTML

00:13:12,800 --> 00:13:18,140
the way we always write HTML because the

00:13:15,200 --> 00:13:20,180
nice thing about HTML is that like half

00:13:18,140 --> 00:13:22,070
of the spec is just how to deal with

00:13:20,180 --> 00:13:24,590
things when people don't write valid

00:13:22,070 --> 00:13:26,240
HTML so you can be sure even if you

00:13:24,590 --> 00:13:30,530
don't write valid HTML it will probably

00:13:26,240 --> 00:13:32,510
work and people like that all right so

00:13:30,530 --> 00:13:36,380
let's just take our doctype taken into

00:13:32,510 --> 00:13:40,160
our output tree then next up we have an

00:13:36,380 --> 00:13:42,410
HTML open tag so we can stick that in

00:13:40,160 --> 00:13:44,390
our tree and because we're building a

00:13:42,410 --> 00:13:47,810
tree structure we need to keep track of

00:13:44,390 --> 00:13:49,190
what the current like parent node is so

00:13:47,810 --> 00:13:51,290
because this is an open tag it's going

00:13:49,190 --> 00:13:52,760
to have children so we need to keep

00:13:51,290 --> 00:13:54,590
track of that so we'll put it on a pile

00:13:52,760 --> 00:13:59,060
down the bottom here which is our open

00:13:54,590 --> 00:14:02,120
tag stack all right then our next open

00:13:59,060 --> 00:14:04,850
tag is a head tag so we know that the

00:14:02,120 --> 00:14:06,800
current open tag on the stack is a HTML

00:14:04,850 --> 00:14:10,250
tag so we're going to add the head tag

00:14:06,800 --> 00:14:12,410
as a child of the HTML tag and because

00:14:10,250 --> 00:14:15,950
that's also an open tag it goes on the

00:14:12,410 --> 00:14:17,570
stack and we have a link tag which we

00:14:15,950 --> 00:14:19,370
can add as a child of the head tag and

00:14:17,570 --> 00:14:21,710
that's a self closing tag so it doesn't

00:14:19,370 --> 00:14:24,200
go need to go on the stack then we have

00:14:21,710 --> 00:14:26,120
our first end tag and it's the end tag

00:14:24,200 --> 00:14:28,550
for the head so we don't need to add

00:14:26,120 --> 00:14:31,240
anything to the tree we just remove the

00:14:28,550 --> 00:14:31,240
tag from the stock

00:14:32,140 --> 00:14:36,220
so now we've got a buddy tagging because

00:14:33,910 --> 00:14:39,070
we removed the head tag HTML is now the

00:14:36,220 --> 00:14:41,709
the parent nerd so we add the body as a

00:14:39,070 --> 00:14:44,769
child of the HTML tag and we can just

00:14:41,709 --> 00:14:46,920
keep going along adding tags to the tree

00:14:44,769 --> 00:14:49,570
and also to the open tag stack

00:14:46,920 --> 00:14:51,550
eventually we get to some character

00:14:49,570 --> 00:14:54,640
tokens so they just get out of it they

00:14:51,550 --> 00:14:57,910
don't go on the stack Oh get out of

00:14:54,640 --> 00:15:00,040
there now in the real world you add all

00:14:57,910 --> 00:15:02,440
you your texts tokens together and you

00:15:00,040 --> 00:15:05,980
your character tokens together and they

00:15:02,440 --> 00:15:07,630
make a single text note it turns out I'm

00:15:05,980 --> 00:15:12,490
not good enough at CSS to do that though

00:15:07,630 --> 00:15:14,529
so just imagine it alright and now we've

00:15:12,490 --> 00:15:16,300
got some end tags we've got another open

00:15:14,529 --> 00:15:17,560
tag an image tag which is a self closing

00:15:16,300 --> 00:15:19,690
tag so it doesn't need to go on the

00:15:17,560 --> 00:15:23,010
stack and then we've just got all of our

00:15:19,690 --> 00:15:28,269
end tags so we can clear up our stack

00:15:23,010 --> 00:15:35,019
and there we have our document object

00:15:28,269 --> 00:15:37,630
model we're not quite ready to paint it

00:15:35,019 --> 00:15:39,760
yet though because first of all we have

00:15:37,630 --> 00:15:44,470
to look at everybody's favorite language

00:15:39,760 --> 00:15:46,510
CSS so CSS tokenization and pausing

00:15:44,470 --> 00:15:50,740
happens at a couple of points in an HTML

00:15:46,510 --> 00:15:54,730
document so if the HTML parser runs into

00:15:50,740 --> 00:15:57,940
a link tag a style tag or an element

00:15:54,730 --> 00:16:00,220
with a style attribute on it then it's

00:15:57,940 --> 00:16:02,440
going to pass control to the CSS

00:16:00,220 --> 00:16:04,149
tokenizer and plaza and that process is

00:16:02,440 --> 00:16:07,480
going to run and then we come back to it

00:16:04,149 --> 00:16:10,089
browsing our HTML document CSS

00:16:07,480 --> 00:16:12,160
recognization is also a finite state

00:16:10,089 --> 00:16:14,380
machine it's also specified in the spec

00:16:12,160 --> 00:16:17,350
as a finite state machine I cannot

00:16:14,380 --> 00:16:20,199
understand how that finite state machine

00:16:17,350 --> 00:16:22,600
works but it works essentially along the

00:16:20,199 --> 00:16:24,880
same lines as the HTML one it's just not

00:16:22,600 --> 00:16:28,120
written as clearly I think so we're not

00:16:24,880 --> 00:16:30,010
going to go through that process let me

00:16:28,120 --> 00:16:33,310
also see us as pausing which again works

00:16:30,010 --> 00:16:36,160
a lot like the HTML pause oh but and the

00:16:33,310 --> 00:16:38,949
output again is the CSS object model the

00:16:36,160 --> 00:16:40,690
CSS object model is a little bit more

00:16:38,949 --> 00:16:43,120
complicated than the document object

00:16:40,690 --> 00:16:46,150
model though and the reason for this is

00:16:43,120 --> 00:16:47,850
that when we create our CSS rules

00:16:46,150 --> 00:16:50,350
we need to have a bunch of information

00:16:47,850 --> 00:16:55,420
that lets us work out which elements

00:16:50,350 --> 00:16:57,370
they apply to and also if we have two

00:16:55,420 --> 00:16:59,440
rules which changed the same property on

00:16:57,370 --> 00:17:01,660
the same element we need to work out

00:16:59,440 --> 00:17:04,270
which rule is going to win right so

00:17:01,660 --> 00:17:06,100
we've got two rules that change the

00:17:04,270 --> 00:17:08,530
background color of the same element to

00:17:06,100 --> 00:17:11,380
blue or red we need to work out if that

00:17:08,530 --> 00:17:12,910
element needs to be blue or red so we

00:17:11,380 --> 00:17:14,439
end up with a much more complicated data

00:17:12,910 --> 00:17:17,260
structure which has a bunch of stuff

00:17:14,439 --> 00:17:20,620
going on in it so first of all we need

00:17:17,260 --> 00:17:22,689
to track where this style came from so

00:17:20,620 --> 00:17:25,750
it could have come from the user the

00:17:22,689 --> 00:17:27,819
author or the user agent and the user

00:17:25,750 --> 00:17:29,920
agent confusingly enough is the browser

00:17:27,819 --> 00:17:33,340
so this is just the default browser

00:17:29,920 --> 00:17:35,530
styles the author refers to you as the

00:17:33,340 --> 00:17:38,110
Builder of the webpage and any style

00:17:35,530 --> 00:17:40,330
that you write that conflicts with a

00:17:38,110 --> 00:17:44,740
user agent style your style is going to

00:17:40,330 --> 00:17:46,179
win and finally we have user styles so

00:17:44,740 --> 00:17:47,830
users can actually create their own

00:17:46,179 --> 00:17:50,050
style sheets which they can then apply

00:17:47,830 --> 00:17:51,730
to any page that they look at it's not

00:17:50,050 --> 00:17:54,300
really a thing in browsers these days

00:17:51,730 --> 00:17:56,620
but it used to be it used to be big it's

00:17:54,300 --> 00:18:00,040
in the early days of the web this was

00:17:56,620 --> 00:18:01,929
this was super important um I think

00:18:00,040 --> 00:18:03,429
Firefox still let you do it but anyway

00:18:01,929 --> 00:18:05,020
any user styles are going to overwrite

00:18:03,429 --> 00:18:07,660
any author styles or any user agent

00:18:05,020 --> 00:18:09,160
styles cool

00:18:07,660 --> 00:18:10,929
so then we have this selector which

00:18:09,160 --> 00:18:14,230
tells us which element that this rule

00:18:10,929 --> 00:18:15,880
applies to we have the actual property

00:18:14,230 --> 00:18:18,520
that we're changing and the value that

00:18:15,880 --> 00:18:20,620
we're changing it to and we have these

00:18:18,520 --> 00:18:25,900
last few columns the specificity and

00:18:20,620 --> 00:18:29,830
order so specificity refers to like the

00:18:25,900 --> 00:18:31,990
strength of the rule of others this

00:18:29,830 --> 00:18:34,360
selector so if you've got a selector

00:18:31,990 --> 00:18:37,179
that has an ID in it that's going to be

00:18:34,360 --> 00:18:39,340
a selector that has a class in it and a

00:18:37,179 --> 00:18:42,670
selector that has a class in it is going

00:18:39,340 --> 00:18:45,610
to beat one that has just an element

00:18:42,670 --> 00:18:49,210
name in it if you have a selector that

00:18:45,610 --> 00:18:51,730
has bang important on it it's gonna beat

00:18:49,210 --> 00:18:56,230
everything so that might feel like

00:18:51,730 --> 00:18:58,150
you're winning but you're not and it

00:18:56,230 --> 00:18:59,470
probably means you need to look back at

00:18:58,150 --> 00:19:01,990
how you've built your CSS

00:18:59,470 --> 00:19:04,270
because important can't be overridden

00:19:01,990 --> 00:19:07,710
with something more specific so it sort

00:19:04,270 --> 00:19:11,020
of breaks the Cascade a bit there

00:19:07,710 --> 00:19:13,090
finally we have the order and this

00:19:11,020 --> 00:19:16,150
literally is the order that these things

00:19:13,090 --> 00:19:18,820
appear in the stylesheet so this is like

00:19:16,150 --> 00:19:21,909
the ultimate tiebreaker if we have a

00:19:18,820 --> 00:19:23,890
rule that applies to rules that apply to

00:19:21,909 --> 00:19:26,110
the same property of the same element

00:19:23,890 --> 00:19:28,380
and they have the same specificity the

00:19:26,110 --> 00:19:32,020
one that's in the style sheet lost winds

00:19:28,380 --> 00:19:33,880
so this table I actually stole from an

00:19:32,020 --> 00:19:36,789
article called braces to pixels on a

00:19:33,880 --> 00:19:38,470
list apart the URLs down the bottom

00:19:36,789 --> 00:19:40,570
there it's part of a series that goes

00:19:38,470 --> 00:19:43,559
into like all of the nitty gritty of CSS

00:19:40,570 --> 00:19:45,760
pausing and tokenization and how this

00:19:43,559 --> 00:19:47,380
data structure is built so if you're

00:19:45,760 --> 00:19:50,980
really interested in this stuff I highly

00:19:47,380 --> 00:19:53,890
recommend you check out that article all

00:19:50,980 --> 00:19:57,730
right cool sir now we've got a HTML and

00:19:53,890 --> 00:20:05,020
a CSS and without powers combined we can

00:19:57,730 --> 00:20:06,820
create a bitmap yeah so we're gonna

00:20:05,020 --> 00:20:08,919
start with that HTML a CSS we're gonna

00:20:06,820 --> 00:20:10,750
apply all that Styles work out where

00:20:08,919 --> 00:20:14,950
they go stick them all in a stylesheet

00:20:10,750 --> 00:20:18,730
there and then we are ready to do some

00:20:14,950 --> 00:20:20,500
layout so layout as the name suggests is

00:20:18,730 --> 00:20:22,120
working out where on the page everything

00:20:20,500 --> 00:20:25,299
is going to appear so how much space

00:20:22,120 --> 00:20:27,039
everything takes up so we're gonna go

00:20:25,299 --> 00:20:28,630
through that we've got our input tree

00:20:27,039 --> 00:20:31,419
here and we're going to draw our layout

00:20:28,630 --> 00:20:33,820
on the other side so we start at the top

00:20:31,419 --> 00:20:35,710
with our doctype node this doesn't

00:20:33,820 --> 00:20:38,530
affect layout in any way whatsoever

00:20:35,710 --> 00:20:41,799
so forget about it so it's been a pretty

00:20:38,530 --> 00:20:43,929
easy start and we have our HTML element

00:20:41,799 --> 00:20:46,390
now this doesn't have any styling on it

00:20:43,929 --> 00:20:50,610
so it's gonna go in the in the output

00:20:46,390 --> 00:20:53,260
but it's not gonna take up any space

00:20:50,610 --> 00:20:54,760
next we have our head element which has

00:20:53,260 --> 00:20:58,179
a special property on it called

00:20:54,760 --> 00:21:01,120
display:none display:none means don't

00:20:58,179 --> 00:21:02,500
put me in the layout tree so we want to

00:21:01,120 --> 00:21:03,700
put that in the layout tree we want to

00:21:02,500 --> 00:21:06,010
put any of its children in the layout

00:21:03,700 --> 00:21:07,720
tree but yeah if you're not playing

00:21:06,010 --> 00:21:09,789
around with HTML you can totally set the

00:21:07,720 --> 00:21:10,809
head element to be display block and

00:21:09,789 --> 00:21:14,250
then you can see what's in your head

00:21:10,809 --> 00:21:16,750
element if that ever tickles your fancy

00:21:14,250 --> 00:21:18,370
can be handy for like doing talks where

00:21:16,750 --> 00:21:19,750
you want to show what's not yeah maybe

00:21:18,370 --> 00:21:23,110
that's not a thing that everybody does

00:21:19,750 --> 00:21:25,510
side all right then we have our body

00:21:23,110 --> 00:21:27,670
element it's got a margin of eight

00:21:25,510 --> 00:21:29,950
pixels so if we put that in our layout

00:21:27,670 --> 00:21:32,830
the body element itself doesn't take up

00:21:29,950 --> 00:21:36,000
any space but it forces the HTML element

00:21:32,830 --> 00:21:38,530
to be bigger to account for its margins

00:21:36,000 --> 00:21:40,990
then our article elements it's got some

00:21:38,530 --> 00:21:42,310
padding and a background I don't really

00:21:40,990 --> 00:21:44,290
care about the background at this point

00:21:42,310 --> 00:21:45,940
but we do care about the padding so

00:21:44,290 --> 00:21:47,530
we'll stick that on it's got its padding

00:21:45,940 --> 00:21:49,090
and then it's going to force the body

00:21:47,530 --> 00:21:50,860
element to be bigger which is going to

00:21:49,090 --> 00:21:53,890
cause the HTML element to be bigger as

00:21:50,860 --> 00:21:59,530
well then our heading element again it's

00:21:53,890 --> 00:22:03,070
got some margins and our our single text

00:21:59,530 --> 00:22:05,080
nerd that my CSS couldn't handle so

00:22:03,070 --> 00:22:06,610
we'll add them all and you can see here

00:22:05,080 --> 00:22:08,680
that this text node doesn't fit inside

00:22:06,610 --> 00:22:11,440
the HTML element so once we've got all

00:22:08,680 --> 00:22:14,170
of that content in there we'll 4ch they

00:22:11,440 --> 00:22:15,550
had one element to get bigger and that

00:22:14,170 --> 00:22:17,800
will force all of its parents to get

00:22:15,550 --> 00:22:20,170
bigger as well and finally the image

00:22:17,800 --> 00:22:21,880
which again doesn't fit so everything

00:22:20,170 --> 00:22:24,250
gets forced bigger so this layout

00:22:21,880 --> 00:22:26,290
process is basically put in something

00:22:24,250 --> 00:22:28,120
put in its children if the children

00:22:26,290 --> 00:22:29,680
don't fit then make the parent bigger

00:22:28,120 --> 00:22:31,210
and if that means that the parent

00:22:29,680 --> 00:22:32,980
doesn't fit in its parent make that

00:22:31,210 --> 00:22:33,970
parent bigger and we just go through the

00:22:32,980 --> 00:22:40,600
whole process and so we've got

00:22:33,970 --> 00:22:44,170
everything on the page sir

00:22:40,600 --> 00:22:46,000
there's our layout now we're up to

00:22:44,170 --> 00:22:48,760
painting which is finally finally

00:22:46,000 --> 00:22:50,620
getting to the fun bit right so painting

00:22:48,760 --> 00:22:52,090
happens in a very specific order and

00:22:50,620 --> 00:22:54,040
this is this is where we're creating the

00:22:52,090 --> 00:22:56,530
actual bitmap so we start from the

00:22:54,040 --> 00:22:58,690
bottom layer and go upwards and for each

00:22:56,530 --> 00:23:00,820
element we paint the background of the

00:22:58,690 --> 00:23:02,530
element then we paint the borders of the

00:23:00,820 --> 00:23:05,620
element and then finally we paint its

00:23:02,530 --> 00:23:08,350
content so here's our page with our

00:23:05,620 --> 00:23:09,820
layout ready to be painted so we start

00:23:08,350 --> 00:23:12,130
from the bottom which is the HTML

00:23:09,820 --> 00:23:15,760
element and it doesn't have any styles

00:23:12,130 --> 00:23:19,660
on it so we don't do anything next we go

00:23:15,760 --> 00:23:21,130
to the body element and let's imagine we

00:23:19,660 --> 00:23:22,840
put a class in our body element they

00:23:21,130 --> 00:23:26,620
gave it a beautiful gradient background

00:23:22,840 --> 00:23:27,160
because gradients are cool so we paint

00:23:26,620 --> 00:23:28,690
that

00:23:27,160 --> 00:23:32,170
then our body element doesn't have any

00:23:28,690 --> 00:23:35,470
borders so we can go to the content so

00:23:32,170 --> 00:23:37,630
the first content the first child is the

00:23:35,470 --> 00:23:40,420
article element so the article element

00:23:37,630 --> 00:23:43,510
let's say has a semi-transparent white

00:23:40,420 --> 00:23:44,740
background so we'll paint that and at

00:23:43,510 --> 00:23:46,180
this point you can see why it's

00:23:44,740 --> 00:23:48,070
important that we paint from the bottom

00:23:46,180 --> 00:23:49,960
up because if we've got something

00:23:48,070 --> 00:23:51,370
transparent or if we've got something

00:23:49,960 --> 00:23:53,590
that's moved out of the normal floor

00:23:51,370 --> 00:23:56,890
with like a transform or translate but

00:23:53,590 --> 00:23:58,210
they're the same thing then you need to

00:23:56,890 --> 00:24:02,200
be able to see that lower element

00:23:58,210 --> 00:24:04,810
through it they can add some borders to

00:24:02,200 --> 00:24:06,340
our article and again the reason that we

00:24:04,810 --> 00:24:07,870
need to paint the borders after the

00:24:06,340 --> 00:24:09,520
background is that the borders can be

00:24:07,870 --> 00:24:12,460
transparent so it's possible that you

00:24:09,520 --> 00:24:14,140
can see the background through them all

00:24:12,460 --> 00:24:15,400
right then we had our text element which

00:24:14,140 --> 00:24:17,010
doesn't have any borders or background

00:24:15,400 --> 00:24:19,270
so we don't have to worry about that

00:24:17,010 --> 00:24:22,660
we've got our content which we can just

00:24:19,270 --> 00:24:24,640
paint there finally our image element

00:24:22,660 --> 00:24:26,950
which has no background has a blue

00:24:24,640 --> 00:24:28,840
border so we've got that there and

00:24:26,950 --> 00:24:29,320
finally the bit I'm sure we've all been

00:24:28,840 --> 00:24:36,790
waiting for

00:24:29,320 --> 00:24:39,580
they contact great so at this point we

00:24:36,790 --> 00:24:41,410
have a page right this could be sent to

00:24:39,580 --> 00:24:44,710
the graphics card or however that

00:24:41,410 --> 00:24:47,350
happens and pain is painted on the

00:24:44,710 --> 00:24:50,820
screen but there is still actually step

00:24:47,350 --> 00:24:54,820
in our pipeline and that final step is

00:24:50,820 --> 00:24:57,070
the composite step and if you've ever

00:24:54,820 --> 00:24:58,960
worked with graphics software you might

00:24:57,070 --> 00:25:00,430
have built an image out of different

00:24:58,960 --> 00:25:01,690
layers right so this is what the

00:25:00,430 --> 00:25:03,610
composite step is about when you've got

00:25:01,690 --> 00:25:06,580
different layers combining them together

00:25:03,610 --> 00:25:08,620
so our paint step could potentially have

00:25:06,580 --> 00:25:11,350
produced multiple bitmaps which we then

00:25:08,620 --> 00:25:14,680
need to stick together there's a couple

00:25:11,350 --> 00:25:16,990
of reasons this might happen so any

00:25:14,680 --> 00:25:20,460
knitter's or crochets in the in the

00:25:16,990 --> 00:25:20,460
audience would be familiar with Ravelry

00:25:22,710 --> 00:25:28,720
rubbery apart for me an excellent

00:25:24,910 --> 00:25:30,820
website the search page is made up of

00:25:28,720 --> 00:25:32,260
two layers so the the bit outline in

00:25:30,820 --> 00:25:33,970
purple at the top there the header is a

00:25:32,260 --> 00:25:37,030
layer and the rest of the pages are

00:25:33,970 --> 00:25:38,860
layer and the reason for this you can

00:25:37,030 --> 00:25:40,840
see in the dev tools on the side there

00:25:38,860 --> 00:25:42,370
is the position fixed

00:25:40,840 --> 00:25:43,840
so if you've got something with the

00:25:42,370 --> 00:25:45,669
position of fixed it means that it's

00:25:43,840 --> 00:25:47,769
been taken out of the normal layout

00:25:45,669 --> 00:25:49,870
floor and needs to be positioned

00:25:47,769 --> 00:25:51,999
independently of the rest of the page so

00:25:49,870 --> 00:25:53,879
it needs to be on a different layer is

00:25:51,999 --> 00:25:56,950
it also happen if you've got like

00:25:53,879 --> 00:25:58,480
transitions transforms floats I think

00:25:56,950 --> 00:25:59,950
like anything that takes your element

00:25:58,480 --> 00:26:03,429
out of the normal floor is going to end

00:25:59,950 --> 00:26:04,389
up in a different layer yeah so once

00:26:03,429 --> 00:26:06,249
we've done that we put all the layers

00:26:04,389 --> 00:26:08,230
together we've got our page is ready to

00:26:06,249 --> 00:26:11,830
go that's that's pretty much the whole

00:26:08,230 --> 00:26:13,389
process so things things to remember is

00:26:11,830 --> 00:26:15,879
that browsers are made up of a browser

00:26:13,389 --> 00:26:18,480
Chrome and a browser engine not the

00:26:15,879 --> 00:26:20,799
browser chrome the browser Chrome and

00:26:18,480 --> 00:26:23,889
those two separate things and can be

00:26:20,799 --> 00:26:25,539
interchangeable when your page arrives

00:26:23,889 --> 00:26:27,850
in your browser it's going to go through

00:26:25,539 --> 00:26:29,470
tokenization and pausing and then every

00:26:27,850 --> 00:26:30,970
time the screen refreshes you're going

00:26:29,470 --> 00:26:34,360
to go through the layout paint and

00:26:30,970 --> 00:26:36,159
composite steps and that I mean I didn't

00:26:34,360 --> 00:26:39,879
mention JavaScript but that's a whole

00:26:36,159 --> 00:26:42,029
other topic that's pretty much yet thank

00:26:39,879 --> 00:26:42,029
you

00:26:42,240 --> 00:26:51,159
[Applause]

00:26:47,220 --> 00:26:52,480
thank you very much Aaron um Aaron

00:26:51,159 --> 00:26:53,889
requested at the beginning not to have

00:26:52,480 --> 00:26:57,220
any questions but of course you can

00:26:53,889 --> 00:26:59,860
intercept and chat with her any time one

00:26:57,220 --> 00:27:01,450
in name of in pythons name I want to

00:26:59,860 --> 00:27:05,040
give you this mark thank you thank you

00:27:01,450 --> 00:27:12,819
so much and thanks again

00:27:05,040 --> 00:27:12,819

YouTube URL: https://www.youtube.com/watch?v=U-ijD_Jxp_Q


