Title: "Using Python to make learning Python better" - Ben Taylor (PyCon AU 2019)
Publication date: 2019-08-02
Playlist: PyCon Australia 2019
Description: 
	Ben Taylor

https://2019.pycon-au.org/talks/using-python-to-make-learning-python-better

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 2 - 6 2019.

Video licence: CC BY-NC-SA 4.0 - https://creativecommons.org/licenses/by-nc-sa/4.0/

Python, PyCon, PyConAU

Fri Aug  2 09:15:00 2019 at C3.4 & C3.5
Captions: 
	00:00:00,149 --> 00:00:06,049
Thank You Amanda hi everyone we all

00:00:03,600 --> 00:00:10,280
settled now or a bit further forward

00:00:06,049 --> 00:00:13,080
Jack you didn't get the instructions

00:00:10,280 --> 00:00:18,180
sorry for picking on you Jack works with

00:00:13,080 --> 00:00:20,550
me so this talk is using Python to make

00:00:18,180 --> 00:00:22,529
learning Python better and the idea for

00:00:20,550 --> 00:00:24,529
this talk came from I guess my

00:00:22,529 --> 00:00:28,560
philosophy of Education which is that

00:00:24,529 --> 00:00:31,279
education is this feedback loop that is

00:00:28,560 --> 00:00:34,590
constantly improving over generations as

00:00:31,279 --> 00:00:36,180
we teach more effectively students learn

00:00:34,590 --> 00:00:38,610
more effectively and they're able to

00:00:36,180 --> 00:00:40,020
teach more effectively and this feedback

00:00:38,610 --> 00:00:44,309
loop is something that we can contribute

00:00:40,020 --> 00:00:47,070
to so you all can make learning Python

00:00:44,309 --> 00:00:49,500
better and I'm going to talk about how

00:00:47,070 --> 00:00:51,449
we can use Python to do that so this is

00:00:49,500 --> 00:00:53,730
a talk about practical coding for

00:00:51,449 --> 00:00:57,390
educators and to get a bit of a sense of

00:00:53,730 --> 00:01:01,440
who is an educator in here who here is a

00:00:57,390 --> 00:01:04,159
school teacher hands up awesome thank

00:01:01,440 --> 00:01:06,950
you so much and who is a university

00:01:04,159 --> 00:01:09,689
educator Oh tertiary educator

00:01:06,950 --> 00:01:12,060
we got to it we got a couple of cool ah

00:01:09,689 --> 00:01:16,619
and who is a professional who is

00:01:12,060 --> 00:01:21,570
interested in education cool lots of you

00:01:16,619 --> 00:01:24,990
and who is a student school or

00:01:21,570 --> 00:01:27,860
university cool thank you for coming so

00:01:24,990 --> 00:01:30,299
I have not turned off my screensaver

00:01:27,860 --> 00:01:35,970
I'll just be touching my laptop a lot

00:01:30,299 --> 00:01:38,009
then so today I'm Ben this is how I

00:01:35,970 --> 00:01:40,860
start all my talks by saying g'day I

00:01:38,009 --> 00:01:44,310
work at gerak oh sorry I work at grukk

00:01:40,860 --> 00:01:46,950
learning where we build a platform that

00:01:44,310 --> 00:01:51,170
teaches school kids and university

00:01:46,950 --> 00:01:54,780
students to learn Python and other

00:01:51,170 --> 00:01:57,090
programming languages so what I do is I

00:01:54,780 --> 00:01:59,159
think about teaching and learning with

00:01:57,090 --> 00:02:01,829
computers and part of that is

00:01:59,159 --> 00:02:05,340
professional practice and part of that

00:02:01,829 --> 00:02:09,270
is academic as a student and PhD student

00:02:05,340 --> 00:02:13,760
and this kind of feeds into what this

00:02:09,270 --> 00:02:16,189
talk is about and what I do

00:02:13,760 --> 00:02:19,519
the time is thinking about teaching and

00:02:16,189 --> 00:02:22,459
learning with computers so this talk is

00:02:19,519 --> 00:02:25,159
broken up into three main parts we've

00:02:22,459 --> 00:02:26,750
got a bit on computational thinking so

00:02:25,159 --> 00:02:28,459
I'm going to talk a bit about

00:02:26,750 --> 00:02:31,510
computational thinking and how I see

00:02:28,459 --> 00:02:34,190
computational thinking I'm gonna talk

00:02:31,510 --> 00:02:36,079
practicalities how we can use Python to

00:02:34,190 --> 00:02:38,120
make the learning Python better and I'm

00:02:36,079 --> 00:02:40,220
going to talk about the future and how

00:02:38,120 --> 00:02:42,760
we can build effective technology and

00:02:40,220 --> 00:02:47,000
how we can build communities of practice

00:02:42,760 --> 00:02:48,560
so computational thinking there's a lot

00:02:47,000 --> 00:02:51,230
of definitions of what computational

00:02:48,560 --> 00:02:55,310
thinking or is sorry

00:02:51,230 --> 00:02:57,319
and I I have sort of my own opinion

00:02:55,310 --> 00:02:59,959
about what computational thinking is and

00:02:57,319 --> 00:03:01,879
I like to think of it as a literacy and

00:02:59,959 --> 00:03:05,599
the reason I think of it as a literacy

00:03:01,879 --> 00:03:08,450
is that computational thinking is all

00:03:05,599 --> 00:03:11,269
about using representation systems so

00:03:08,450 --> 00:03:14,329
about using a representation to describe

00:03:11,269 --> 00:03:17,090
something that is computable so what is

00:03:14,329 --> 00:03:18,680
computable well if you had a vast alan

00:03:17,090 --> 00:03:23,150
cheering he would have been thinking

00:03:18,680 --> 00:03:25,430
about mathematics maybe models he would

00:03:23,150 --> 00:03:28,160
have been thinking in that kind of way

00:03:25,430 --> 00:03:30,500
but nowadays we see many more things as

00:03:28,160 --> 00:03:33,590
computable we model all sorts of

00:03:30,500 --> 00:03:36,470
processes including social processes and

00:03:33,590 --> 00:03:38,769
we also see things like games as

00:03:36,470 --> 00:03:40,609
computable not everything that

00:03:38,769 --> 00:03:45,859
traditionally we would think about as

00:03:40,609 --> 00:03:47,840
computable is computable so when we

00:03:45,859 --> 00:03:51,109
think about that computational thinking

00:03:47,840 --> 00:03:55,069
I see it as using a representation to

00:03:51,109 --> 00:03:57,919
communicate a computational idea so some

00:03:55,069 --> 00:04:00,680
representation that would typically be

00:03:57,919 --> 00:04:03,379
code but it could also be written

00:04:00,680 --> 00:04:07,310
language and this to me speaks of a

00:04:03,379 --> 00:04:09,019
literacy and this isn't just the skills

00:04:07,310 --> 00:04:12,379
of writing the code but it's the actual

00:04:09,019 --> 00:04:14,569
representation and if you think about

00:04:12,379 --> 00:04:17,870
the way we write language written

00:04:14,569 --> 00:04:19,909
language is a representation that we use

00:04:17,870 --> 00:04:22,460
to communicate an idea and we can

00:04:19,909 --> 00:04:25,430
communicate computational ideas using

00:04:22,460 --> 00:04:27,440
written language for example who here

00:04:25,430 --> 00:04:29,200
has done the exercise where

00:04:27,440 --> 00:04:30,560
you try to describe making a sandwich

00:04:29,200 --> 00:04:33,620
hands up

00:04:30,560 --> 00:04:36,950
yeah so if you use written language to

00:04:33,620 --> 00:04:39,350
describe making a sandwich it's not

00:04:36,950 --> 00:04:41,690
great it comes out pretty badly but if

00:04:39,350 --> 00:04:44,030
you use pseudocode or a kind of code

00:04:41,690 --> 00:04:47,620
like representation then that's a great

00:04:44,030 --> 00:04:50,480
way to communicate a computational idea

00:04:47,620 --> 00:04:53,630
so I want to read to you from a book

00:04:50,480 --> 00:04:55,550
that I've invented it's called a future

00:04:53,630 --> 00:04:58,580
history of computational thinking and

00:04:55,550 --> 00:05:04,280
this is how I think about computational

00:04:58,580 --> 00:05:06,680
thinking so in the 1900s the concept of

00:05:04,280 --> 00:05:09,560
automated computation moved from an idea

00:05:06,680 --> 00:05:11,150
to reality at first only the most

00:05:09,560 --> 00:05:14,210
accomplished mathematicians engineers

00:05:11,150 --> 00:05:17,270
and academics were able to use these

00:05:14,210 --> 00:05:19,070
machines soon it was discovered that

00:05:17,270 --> 00:05:20,780
making these machines programmable

00:05:19,070 --> 00:05:24,440
allowed people with specialized training

00:05:20,780 --> 00:05:26,690
to design programs these programs could

00:05:24,440 --> 00:05:29,690
help programmers to compute anything of

00:05:26,690 --> 00:05:31,250
their choice over time program has

00:05:29,690 --> 00:05:33,350
developed more complex programming

00:05:31,250 --> 00:05:35,540
languages these programming languages

00:05:33,350 --> 00:05:37,760
were representations that allowed them

00:05:35,540 --> 00:05:40,280
to communicate a computation to a

00:05:37,760 --> 00:05:41,810
computing machine with developments in

00:05:40,280 --> 00:05:44,690
technology and programming languages

00:05:41,810 --> 00:05:46,700
soon every person in the world had

00:05:44,690 --> 00:05:49,550
access to a computer and more and more

00:05:46,700 --> 00:05:52,370
people were programming however they hit

00:05:49,550 --> 00:05:54,980
a stagnation point the programmers could

00:05:52,370 --> 00:05:56,800
develop specialized programs to do many

00:05:54,980 --> 00:05:59,419
computing tasks that people wanted

00:05:56,800 --> 00:06:01,940
sometimes this was frustrating for those

00:05:59,419 --> 00:06:03,800
people sometimes the programs didn't

00:06:01,940 --> 00:06:05,360
quite work the way they wanted but

00:06:03,800 --> 00:06:08,360
people couldn't see the possibility of

00:06:05,360 --> 00:06:10,760
programming from themselves programming

00:06:08,360 --> 00:06:12,710
languages were hard to learn and most

00:06:10,760 --> 00:06:15,560
people didn't have the time to learn

00:06:12,710 --> 00:06:17,540
them so they struggled with software

00:06:15,560 --> 00:06:19,730
that wasn't optimized for them they

00:06:17,540 --> 00:06:21,980
continually repeated tasks their

00:06:19,730 --> 00:06:24,710
programs couldn't do they rejoiced for

00:06:21,980 --> 00:06:27,080
the time computers saved them but hated

00:06:24,710 --> 00:06:29,840
them for the power they took away this

00:06:27,080 --> 00:06:31,820
was the dark ages of computing much like

00:06:29,840 --> 00:06:32,930
scholars and scribes controlled literacy

00:06:31,820 --> 00:06:35,300
in the distant past

00:06:32,930 --> 00:06:37,490
programmers controlled computation

00:06:35,300 --> 00:06:39,770
nobody saw how the world would change

00:06:37,490 --> 00:06:41,150
when everybody had the power to automate

00:06:39,770 --> 00:06:43,940
or compute any problem they

00:06:41,150 --> 00:06:46,490
Faced can you imagine there was a time

00:06:43,940 --> 00:06:48,020
when surgery was done by humans when

00:06:46,490 --> 00:06:51,200
everyday people couldn't model or

00:06:48,020 --> 00:06:55,190
analyze data when communication about

00:06:51,200 --> 00:06:56,960
ideas was entirely by SI there were some

00:06:55,190 --> 00:06:59,420
who saw the truth the power of

00:06:56,960 --> 00:07:00,580
computation these academics banded

00:06:59,420 --> 00:07:03,530
together under the banner of

00:07:00,580 --> 00:07:05,690
computational thinking advocating for

00:07:03,530 --> 00:07:08,540
everyone to learn programming they saw a

00:07:05,690 --> 00:07:10,220
future however obscured where children

00:07:08,540 --> 00:07:12,770
programmed computers and came to

00:07:10,220 --> 00:07:14,990
understand the world fortunately that

00:07:12,770 --> 00:07:18,320
period ended with the rise of computing

00:07:14,990 --> 00:07:20,510
teachers through those great heroes of

00:07:18,320 --> 00:07:22,970
literacy computation was available to

00:07:20,510 --> 00:07:25,070
all a new revolution was underway the

00:07:22,970 --> 00:07:27,080
computational enlightenment and now we

00:07:25,070 --> 00:07:29,630
all tweak hack and model our way through

00:07:27,080 --> 00:07:31,490
life nobody is left behind by automation

00:07:29,630 --> 00:07:35,330
because everyone has the power to

00:07:31,490 --> 00:07:38,050
automate that is a future history of

00:07:35,330 --> 00:07:41,300
computational thinking a story I made up

00:07:38,050 --> 00:07:43,190
and this is how I see computational

00:07:41,300 --> 00:07:45,260
thinking and this is how I think about

00:07:43,190 --> 00:07:48,140
it it's this thing that can totally

00:07:45,260 --> 00:07:50,240
change the way the world is and that's

00:07:48,140 --> 00:07:52,190
what we're doing that's what we're all

00:07:50,240 --> 00:07:54,170
interested in doing is helping more and

00:07:52,190 --> 00:07:55,630
more people code and learn about

00:07:54,170 --> 00:07:58,580
computational thinking

00:07:55,630 --> 00:08:03,470
so computational thinking it's the

00:07:58,580 --> 00:08:06,170
future is what I'm saying so let's get a

00:08:03,470 --> 00:08:09,980
bit practical my talk is a practical

00:08:06,170 --> 00:08:14,390
talk and I will be doing some semi live

00:08:09,980 --> 00:08:18,230
coding so watch our heart I'm gonna

00:08:14,390 --> 00:08:19,910
start with a point if we myself included

00:08:18,230 --> 00:08:21,980
believe this about computational

00:08:19,910 --> 00:08:24,110
thinking about coding about its power to

00:08:21,980 --> 00:08:27,080
transform the world then we should

00:08:24,110 --> 00:08:29,990
practice it if we're teaching and

00:08:27,080 --> 00:08:33,170
learning but we're not using our powers

00:08:29,990 --> 00:08:38,030
of computing to do that then what's the

00:08:33,170 --> 00:08:40,040
point of it all so this is my main point

00:08:38,030 --> 00:08:42,170
of this talk if we believe that

00:08:40,040 --> 00:08:44,480
computational thinking is powerful and

00:08:42,170 --> 00:08:46,340
that it's transformative we should be

00:08:44,480 --> 00:08:50,660
doing computational thinking about every

00:08:46,340 --> 00:08:52,630
problem we come across so that means we

00:08:50,660 --> 00:08:54,610
should be making our own technology

00:08:52,630 --> 00:08:58,899
first off

00:08:54,610 --> 00:09:02,560
expertise makes good technology many of

00:08:58,899 --> 00:09:04,990
you are experts as educators or as

00:09:02,560 --> 00:09:07,899
professionals and if you have an

00:09:04,990 --> 00:09:10,510
expertise and you've practiced education

00:09:07,899 --> 00:09:13,600
then you're going to be really great at

00:09:10,510 --> 00:09:15,910
making good technology technology isn't

00:09:13,600 --> 00:09:17,680
something that you can just hack

00:09:15,910 --> 00:09:20,860
together without an understanding of the

00:09:17,680 --> 00:09:23,589
field many people see technology as just

00:09:20,860 --> 00:09:24,940
taking something that exists and putting

00:09:23,589 --> 00:09:27,459
it on the internet or putting it on

00:09:24,940 --> 00:09:29,079
computers and if we take a textbook and

00:09:27,459 --> 00:09:31,209
put it on a computer it's not

00:09:29,079 --> 00:09:34,060
necessarily a more effective textbook

00:09:31,209 --> 00:09:36,610
but if we take our expertise as teachers

00:09:34,060 --> 00:09:38,920
and learners and put that into code

00:09:36,610 --> 00:09:41,440
that's a much more effective way to make

00:09:38,920 --> 00:09:44,250
good technology my second point is that

00:09:41,440 --> 00:09:47,050
technology doesn't have to be an app

00:09:44,250 --> 00:09:50,260
often we think about programming as

00:09:47,050 --> 00:09:53,140
building apps as building web

00:09:50,260 --> 00:09:56,010
applications as building something

00:09:53,140 --> 00:09:59,140
tangible that has a user interface but

00:09:56,010 --> 00:10:01,660
programs were useful long before user

00:09:59,140 --> 00:10:03,730
interfaces were around and you can make

00:10:01,660 --> 00:10:08,800
a program that is useful for your

00:10:03,730 --> 00:10:10,360
purposes with just text finally you're

00:10:08,800 --> 00:10:13,120
an expert whatever you're an expert in

00:10:10,360 --> 00:10:15,579
you're probably an expert and if you're

00:10:13,120 --> 00:10:17,800
a teacher you're an expert teacher you

00:10:15,579 --> 00:10:19,990
can use Python which is this thing

00:10:17,800 --> 00:10:26,160
you're here to either learn more about

00:10:19,990 --> 00:10:29,920
or share your own knowledge or practice

00:10:26,160 --> 00:10:34,360
you can use Python and your expertise in

00:10:29,920 --> 00:10:38,829
educating or as a learner to improve

00:10:34,360 --> 00:10:42,790
your own practice so I want to talk

00:10:38,829 --> 00:10:44,620
about my first example which is building

00:10:42,790 --> 00:10:48,399
on prior knowledge so the idea of

00:10:44,620 --> 00:10:51,579
building on prior knowledge is that when

00:10:48,399 --> 00:10:54,370
a student comes to a class of course any

00:10:51,579 --> 00:10:57,310
kind of learning they bring with them

00:10:54,370 --> 00:10:59,740
prior knowledge so they have some ideas

00:10:57,310 --> 00:11:03,069
they have some knowledge that they've

00:10:59,740 --> 00:11:05,199
come to the class with and it's very

00:11:03,069 --> 00:11:06,940
effective to take those students and

00:11:05,199 --> 00:11:07,960
their prior knowledge and figure out

00:11:06,940 --> 00:11:11,620
what the next

00:11:07,960 --> 00:11:13,360
appears and this is often referred to as

00:11:11,620 --> 00:11:16,500
keeping students in their zone of

00:11:13,360 --> 00:11:19,150
proximal development we want students to

00:11:16,500 --> 00:11:21,460
start where they're at and then continue

00:11:19,150 --> 00:11:23,230
forwards but unfortunately it's very

00:11:21,460 --> 00:11:26,200
difficult to figure out where each

00:11:23,230 --> 00:11:28,900
student is up to if you were to spend

00:11:26,200 --> 00:11:30,340
say a few minutes with each of your

00:11:28,900 --> 00:11:33,310
students at the beginning of every class

00:11:30,340 --> 00:11:34,900
that would take your whole class that

00:11:33,310 --> 00:11:36,460
would be even more impossible if you're

00:11:34,900 --> 00:11:40,360
a university lecturer and you have a

00:11:36,460 --> 00:11:42,550
thousand students so if we want to build

00:11:40,360 --> 00:11:44,110
on prior knowledge this feels like a

00:11:42,550 --> 00:11:47,950
problem that can be solved with

00:11:44,110 --> 00:11:51,460
computers we can give a program to every

00:11:47,950 --> 00:11:54,010
student to see where they're at and so

00:11:51,460 --> 00:11:56,080
that is what I'll be demonstrating this

00:11:54,010 --> 00:11:58,930
is a program called prior knowledge type

00:11:56,080 --> 00:12:03,610
I and my process with coming up with

00:11:58,930 --> 00:12:06,790
this program was to keep it really

00:12:03,610 --> 00:12:08,890
simple I wanted to use concepts that I

00:12:06,790 --> 00:12:12,490
thought everyone here would be familiar

00:12:08,890 --> 00:12:16,530
with and so mostly I stick to print

00:12:12,490 --> 00:12:19,060
statements input and if statements so

00:12:16,530 --> 00:12:21,970
let's have a go at running this program

00:12:19,060 --> 00:12:26,140
um from the audience how readable is

00:12:21,970 --> 00:12:30,100
this it's it's good great so I'm gonna

00:12:26,140 --> 00:12:34,060
run prior slash prior knowledge dog

00:12:30,100 --> 00:12:35,650
puppy so it starts out by asking have

00:12:34,060 --> 00:12:37,300
you done any programming before this is

00:12:35,650 --> 00:12:39,580
a great question to ask a student who's

00:12:37,300 --> 00:12:42,010
starting a programming course if they've

00:12:39,580 --> 00:12:43,870
never done any programming then we say

00:12:42,010 --> 00:12:46,090
that's totally fine this course doesn't

00:12:43,870 --> 00:12:48,010
expect you to have any experience with

00:12:46,090 --> 00:12:51,670
programming how about you start on this

00:12:48,010 --> 00:12:53,860
activity now I'm going to run out again

00:12:51,670 --> 00:12:56,020
and I'm gonna say yes I have done some

00:12:53,860 --> 00:12:58,930
programming but I have not done any

00:12:56,020 --> 00:13:01,450
Python programming great well you need

00:12:58,930 --> 00:13:03,940
to learn about Python syntax so try

00:13:01,450 --> 00:13:09,340
doing this activity that is at a real

00:13:03,940 --> 00:13:10,630
website then I have done some

00:13:09,340 --> 00:13:13,870
programming have you done Python

00:13:10,630 --> 00:13:15,580
programming yes so now the program is

00:13:13,870 --> 00:13:17,500
going to start testing the student to

00:13:15,580 --> 00:13:19,960
see where they're at so they have a

00:13:17,500 --> 00:13:20,620
program name equals input what is your

00:13:19,960 --> 00:13:23,290
name

00:13:20,620 --> 00:13:25,960
print hello name if I run this program

00:13:23,290 --> 00:13:30,940
and type in Julia what will the program

00:13:25,960 --> 00:13:31,330
prints out throw to the audience yell it

00:13:30,940 --> 00:13:36,090
out

00:13:31,330 --> 00:13:39,820
hello Julia great hello Julia

00:13:36,090 --> 00:13:41,500
so next up we've got another question I

00:13:39,820 --> 00:13:43,600
want to make a function that turns

00:13:41,500 --> 00:13:44,980
minutes into seconds there are 60

00:13:43,600 --> 00:13:47,230
seconds in a minute so we need to

00:13:44,980 --> 00:13:48,790
multiply the minutes by 60 fill in this

00:13:47,230 --> 00:13:51,370
code so we've got a function that we

00:13:48,790 --> 00:13:53,200
need to fill in so I don't really know

00:13:51,370 --> 00:13:54,940
much about functions but I know how to

00:13:53,200 --> 00:13:57,960
print something out so I'm going to

00:13:54,940 --> 00:14:00,940
print out that it is minutes times 60

00:13:57,960 --> 00:14:03,910
but it looks like I got it wrong I was

00:14:00,940 --> 00:14:05,650
meant to return instead of print so it

00:14:03,910 --> 00:14:10,210
looks like I should practice functions

00:14:05,650 --> 00:14:12,790
now this program is very simple it

00:14:10,210 --> 00:14:15,700
starts with some print statements it

00:14:12,790 --> 00:14:17,560
asks for their experience if their

00:14:15,700 --> 00:14:19,720
experience was 3 so if they don't have

00:14:17,560 --> 00:14:23,080
any experience then they're going to do

00:14:19,720 --> 00:14:25,830
the getting started activity if they

00:14:23,080 --> 00:14:29,290
have done Python programming before then

00:14:25,830 --> 00:14:32,950
we're going to continue on if they have

00:14:29,290 --> 00:14:35,740
not so if n is in done Python answer

00:14:32,950 --> 00:14:37,480
then they should start with the lesson

00:14:35,740 --> 00:14:39,490
on learning Python syntax and this

00:14:37,480 --> 00:14:41,950
program goes on like this just checking

00:14:39,490 --> 00:14:44,350
the result of each answer and if they

00:14:41,950 --> 00:14:47,110
pass it then they continue through the

00:14:44,350 --> 00:14:48,760
script and if they don't pass it then we

00:14:47,110 --> 00:14:50,950
say ok well now we've reached the point

00:14:48,760 --> 00:14:53,740
where you're being challenged and so you

00:14:50,950 --> 00:14:56,260
want to learn this concept you want to

00:14:53,740 --> 00:14:59,560
start on this activity and this is a

00:14:56,260 --> 00:15:04,540
really simple idea but it can be really

00:14:59,560 --> 00:15:06,820
powerful so how could you use this idea

00:15:04,540 --> 00:15:09,430
of building on prior knowledge well you

00:15:06,820 --> 00:15:13,410
could use it for differentiation a lot

00:15:09,430 --> 00:15:16,150
of students a lot of educators find that

00:15:13,410 --> 00:15:18,160
their students are in these totally

00:15:16,150 --> 00:15:20,110
different cohorts where some students

00:15:18,160 --> 00:15:21,700
are so far ahead of their peers that

00:15:20,110 --> 00:15:23,980
it's just impossible to find things for

00:15:21,700 --> 00:15:26,830
them to do and the other students then

00:15:23,980 --> 00:15:28,650
kind of fall to the wayside where you

00:15:26,830 --> 00:15:30,820
end up spending a lot of effort on

00:15:28,650 --> 00:15:32,959
finding activities for these students

00:15:30,820 --> 00:15:35,300
who are really

00:15:32,959 --> 00:15:37,910
but there's also many levels of

00:15:35,300 --> 00:15:39,620
differentiation amongst the students who

00:15:37,910 --> 00:15:41,209
are struggling some of them may be

00:15:39,620 --> 00:15:44,450
struggling with variables some of them

00:15:41,209 --> 00:15:47,240
with if statements etc and using this

00:15:44,450 --> 00:15:49,070
idea of question answer we can figure

00:15:47,240 --> 00:15:50,870
out where they're at without having to

00:15:49,070 --> 00:15:53,570
have an actual conversation with every

00:15:50,870 --> 00:15:55,730
single student we could also use it to

00:15:53,570 --> 00:15:57,440
figure out a project that's appropriate

00:15:55,730 --> 00:15:59,560
for a student and this could be based

00:15:57,440 --> 00:16:01,910
off interest or it could be based off

00:15:59,560 --> 00:16:04,459
where they're at where their skill is

00:16:01,910 --> 00:16:06,350
that we could use it for reflection

00:16:04,459 --> 00:16:07,910
asking students to reflect on what

00:16:06,350 --> 00:16:10,970
they've learned we could use it for

00:16:07,910 --> 00:16:14,750
extensions when a student finishes their

00:16:10,970 --> 00:16:17,120
work when they're struggling to find

00:16:14,750 --> 00:16:18,769
something to do you give them the

00:16:17,120 --> 00:16:24,230
extension script and it comes up with

00:16:18,769 --> 00:16:26,990
ideas and this is really simple this is

00:16:24,230 --> 00:16:31,459
a Python program that I'm sure most of

00:16:26,990 --> 00:16:34,850
you understand and could write it's kind

00:16:31,459 --> 00:16:36,620
of the most basic level of writing

00:16:34,850 --> 00:16:38,149
Python is doing some print statements

00:16:36,620 --> 00:16:41,089
reading some input doing some if

00:16:38,149 --> 00:16:43,430
statements and it's really powerful it

00:16:41,089 --> 00:16:45,399
is automated so it automates these

00:16:43,430 --> 00:16:47,209
problems that you have and it's

00:16:45,399 --> 00:16:50,300
shareable this is something that you

00:16:47,209 --> 00:16:52,339
could give to a peer to a colleague to

00:16:50,300 --> 00:16:53,750
someone who's also struggling with the

00:16:52,339 --> 00:16:55,399
same problems that you're having and

00:16:53,750 --> 00:16:58,519
they could try it out in their classroom

00:16:55,399 --> 00:16:59,990
and then they could extend it and that's

00:16:58,519 --> 00:17:02,779
what I think is really cool about this

00:16:59,990 --> 00:17:04,910
is if we can take programs like these

00:17:02,779 --> 00:17:06,500
and share them amongst each other we

00:17:04,910 --> 00:17:09,500
could extend them and make them better

00:17:06,500 --> 00:17:11,929
and this community of practice would

00:17:09,500 --> 00:17:17,990
help us to teach these things more

00:17:11,929 --> 00:17:22,250
effectively so my next slide is about

00:17:17,990 --> 00:17:24,829
giving feedback so an example of giving

00:17:22,250 --> 00:17:27,010
feedback might be to say geez Ben

00:17:24,829 --> 00:17:29,809
doesn't know how to put text in a box

00:17:27,010 --> 00:17:35,600
but it's entirely intentional it's very

00:17:29,809 --> 00:17:38,270
cool a better example of feedback would

00:17:35,600 --> 00:17:39,860
be constructive feedback as a student is

00:17:38,270 --> 00:17:41,540
learning when they're struggling with a

00:17:39,860 --> 00:17:43,669
problem we want to be able to give them

00:17:41,540 --> 00:17:45,470
feedback about how they're going now

00:17:43,669 --> 00:17:46,130
unfortunately that's really difficult

00:17:45,470 --> 00:17:47,750
and

00:17:46,130 --> 00:17:50,090
we get trapped in these really long

00:17:47,750 --> 00:17:52,429
cycles of feedback where a student

00:17:50,090 --> 00:17:54,410
finishes some work and then they hand it

00:17:52,429 --> 00:17:56,630
in and maybe a few days later they get

00:17:54,410 --> 00:17:59,090
feedback or even a few weeks later they

00:17:56,630 --> 00:18:02,450
get feedback and by then the work is

00:17:59,090 --> 00:18:05,150
totally out of their mind so something

00:18:02,450 --> 00:18:07,039
that Drock does if you're if you're

00:18:05,150 --> 00:18:09,410
familiar with it is it has automated

00:18:07,039 --> 00:18:12,590
testing so we will test a student's

00:18:09,410 --> 00:18:15,500
program and give them feedback well I am

00:18:12,590 --> 00:18:18,890
about to give away all our secrets and

00:18:15,500 --> 00:18:21,860
set you up to do this yourselves and you

00:18:18,890 --> 00:18:23,750
won't need work anymore so there's a

00:18:21,860 --> 00:18:26,270
library called Doc tests and it comes

00:18:23,750 --> 00:18:28,429
with Python and it's super handy it

00:18:26,270 --> 00:18:31,880
allows you to write tests in the

00:18:28,429 --> 00:18:34,970
documentation for your Python here's an

00:18:31,880 --> 00:18:36,530
example so this is a minutes 2 seconds

00:18:34,970 --> 00:18:38,480
function much like the one we saw

00:18:36,530 --> 00:18:41,240
earlier and this program converts

00:18:38,480 --> 00:18:44,240
minutes into seconds now within that

00:18:41,240 --> 00:18:47,210
documentation I've written an example of

00:18:44,240 --> 00:18:49,429
how it can be used so if you use minutes

00:18:47,210 --> 00:18:52,280
2 seconds with one then it will return

00:18:49,429 --> 00:18:56,510
60 if you use minutes two seconds with

00:18:52,280 --> 00:18:59,419
five then it will return 300 now at the

00:18:56,510 --> 00:19:02,059
end of this program I can just add a

00:18:59,419 --> 00:19:05,000
little bit of extra code and I'll show

00:19:02,059 --> 00:19:07,700
it in a minute that tests this program

00:19:05,000 --> 00:19:11,090
automatically anytime it's run and if

00:19:07,700 --> 00:19:13,549
this test case the minutes two seconds

00:19:11,090 --> 00:19:16,309
one 60 doesn't pass they're not will

00:19:13,549 --> 00:19:18,140
tell tell you that it's not passing and

00:19:16,309 --> 00:19:20,659
what we'll see a bit more in practice

00:19:18,140 --> 00:19:24,049
how this works so I've come up with this

00:19:20,659 --> 00:19:26,210
small project the idea behind the

00:19:24,049 --> 00:19:28,669
project is that there are many criteria

00:19:26,210 --> 00:19:31,880
that determine whether an animal is

00:19:28,669 --> 00:19:34,070
endangered one of the simplest criterias

00:19:31,880 --> 00:19:37,280
is based on the population of mature

00:19:34,070 --> 00:19:41,000
individuals so that's adults who are out

00:19:37,280 --> 00:19:43,039
there and existing and surviving so this

00:19:41,000 --> 00:19:44,690
criteria is used if the population is

00:19:43,039 --> 00:19:46,159
stable so if the population is

00:19:44,690 --> 00:19:47,720
decreasing then there's a different

00:19:46,159 --> 00:19:52,130
criteria but if the population is stable

00:19:47,720 --> 00:19:54,679
then this is the criteria used so this

00:19:52,130 --> 00:19:57,350
is a very simple mapping from a number

00:19:54,679 --> 00:19:58,870
to a category if the population is 0

00:19:57,350 --> 00:20:00,610
then it is extinct

00:19:58,870 --> 00:20:02,530
if the population is 1 to 50 it is

00:20:00,610 --> 00:20:05,710
critically endangered probably if the

00:20:02,530 --> 00:20:10,510
population is one of may struggle 50 1

00:20:05,710 --> 00:20:14,710
to 250 endangered 250 1 to 1000 for

00:20:10,510 --> 00:20:17,500
neural thousand 1 onwards lower risk so

00:20:14,710 --> 00:20:20,200
I've defined this function categorize

00:20:17,500 --> 00:20:22,660
and the function takes the population of

00:20:20,200 --> 00:20:24,670
an animal it then returns the endangered

00:20:22,660 --> 00:20:26,860
category of that animal based off the

00:20:24,670 --> 00:20:30,820
table above so that's the table you saw

00:20:26,860 --> 00:20:35,520
before so if we take categorize 55 then

00:20:30,820 --> 00:20:38,680
we would expect it to be endangered so

00:20:35,520 --> 00:20:40,480
this little bit on the end that I've

00:20:38,680 --> 00:20:42,220
added here that's the bit that does the

00:20:40,480 --> 00:20:45,460
testing so that's just three lines of

00:20:42,220 --> 00:20:47,350
code and what it's saying is this little

00:20:45,460 --> 00:20:49,450
under under name under under Maine bit

00:20:47,350 --> 00:20:52,450
is a bit confusing but what it means is

00:20:49,450 --> 00:20:54,850
if we're running this script so if it is

00:20:52,450 --> 00:20:57,340
running rather than having been imported

00:20:54,850 --> 00:21:01,210
which are the two ways we can run our

00:20:57,340 --> 00:21:03,340
script then we will import doc test

00:21:01,210 --> 00:21:05,530
which is this testing library and it

00:21:03,340 --> 00:21:09,790
comes with Python and we'll test this

00:21:05,530 --> 00:21:18,130
module so let's go have a look at how

00:21:09,790 --> 00:21:22,150
that works so in step one I have this

00:21:18,130 --> 00:21:26,860
function categorized that categorizes 55

00:21:22,150 --> 00:21:28,750
and expects endangered out now I'm just

00:21:26,860 --> 00:21:31,410
going to change it to the endangered

00:21:28,750 --> 00:21:36,670
directory so if I run this python

00:21:31,410 --> 00:21:38,920
endangered - step 1 dot pi if I run this

00:21:36,670 --> 00:21:41,110
I get no output that means that the test

00:21:38,920 --> 00:21:44,860
is passed so I'm just going to run it

00:21:41,110 --> 00:21:49,300
with - V so it says 1 passed and 0

00:21:44,860 --> 00:21:52,090
failed and A - B means verbose so if I

00:21:49,300 --> 00:21:54,250
were to instead have passed here so that

00:21:52,090 --> 00:21:56,890
was the example that I gave before and

00:21:54,250 --> 00:22:01,420
that's how you would pass this Python

00:21:56,890 --> 00:22:04,240
program over to a student so I run it

00:22:01,420 --> 00:22:07,300
and now I get one failure so one item

00:22:04,240 --> 00:22:09,790
had a failure the example was that we

00:22:07,300 --> 00:22:11,620
wanted to categorize 55 we expected

00:22:09,790 --> 00:22:15,700
endangered and we got nothing and

00:22:11,620 --> 00:22:19,210
because there was a pass here now let's

00:22:15,700 --> 00:22:21,610
try this next step step 2 in this step

00:22:19,210 --> 00:22:24,460
I've added more tests so it's much

00:22:21,610 --> 00:22:26,590
harder to pass this program so there's

00:22:24,460 --> 00:22:28,900
the categorized 55 which gives back

00:22:26,590 --> 00:22:31,840
endangered but there's also categorized

00:22:28,900 --> 00:22:33,900
0 which gives back extinct categorize 8

00:22:31,840 --> 00:22:36,190
which gives back critically endangered

00:22:33,900 --> 00:22:38,920
categorized 105 which gives back

00:22:36,190 --> 00:22:40,930
endangered etc etc so I have one test

00:22:38,920 --> 00:22:43,780
case per each of those categories

00:22:40,930 --> 00:22:45,880
now I've just still got here returned

00:22:43,780 --> 00:22:51,940
endangered so let's see what happens if

00:22:45,880 --> 00:22:54,420
I run Python endangered step 2 pi cool

00:22:51,940 --> 00:22:59,550
so test failed there were four failures

00:22:54,420 --> 00:23:03,780
so why did it fail four times out of six

00:22:59,550 --> 00:23:07,660
well if we go back we can see that

00:23:03,780 --> 00:23:09,700
extinct got endangered critically

00:23:07,660 --> 00:23:12,370
endangered it was expected but we got

00:23:09,700 --> 00:23:14,980
endangered vulnerable was expected we

00:23:12,370 --> 00:23:16,540
got endangered lower risk was expected

00:23:14,980 --> 00:23:19,390
we got endangered so there were four

00:23:16,540 --> 00:23:21,370
failures the two cases that expected

00:23:19,390 --> 00:23:24,610
endangered passed and so this program

00:23:21,370 --> 00:23:26,350
kind of works it's good at saying that

00:23:24,610 --> 00:23:28,990
things are endangered it's not very good

00:23:26,350 --> 00:23:32,710
if they're not endangered and we can fix

00:23:28,990 --> 00:23:35,830
this up so if I fix this up and I have

00:23:32,710 --> 00:23:37,990
the full ellipse for each of these cases

00:23:35,830 --> 00:23:39,910
if the population is greater than zero

00:23:37,990 --> 00:23:44,380
and less than fifty one critically

00:23:39,910 --> 00:23:47,860
endangered etc etc and I run step three

00:23:44,380 --> 00:23:51,309
pi we can see that it passes all the

00:23:47,860 --> 00:23:53,610
tests and if I run it in verbose mode we

00:23:51,309 --> 00:23:57,340
can see six passed and zero failed

00:23:53,610 --> 00:23:58,210
now unfortunately the downside to this

00:23:57,340 --> 00:24:00,280
way of doing things

00:23:58,210 --> 00:24:02,080
is that there's this really big string

00:24:00,280 --> 00:24:03,730
at the top of the function and if you

00:24:02,080 --> 00:24:06,850
handed this over to a student they would

00:24:03,730 --> 00:24:09,100
be like where do I put my code so what

00:24:06,850 --> 00:24:12,070
you can do is you can put this string at

00:24:09,100 --> 00:24:13,750
the top of the file instead and then it

00:24:12,070 --> 00:24:17,710
can test every single function in the

00:24:13,750 --> 00:24:19,120
file so here I've got a file that you

00:24:17,710 --> 00:24:22,740
might hand over to a student that

00:24:19,120 --> 00:24:24,820
includes the description of the task the

00:24:22,740 --> 00:24:28,390
categories

00:24:24,820 --> 00:24:32,650
and then instructions on how to run the

00:24:28,390 --> 00:24:34,690
tests and finally it has a test for each

00:24:32,650 --> 00:24:35,200
of these categories the ones we saw

00:24:34,690 --> 00:24:37,360
before

00:24:35,200 --> 00:24:39,340
along with tests for boundary conditions

00:24:37,360 --> 00:24:42,520
and this is the area where students are

00:24:39,340 --> 00:24:44,830
most often going to get tripped up so at

00:24:42,520 --> 00:24:47,350
the boundary of extinct and critically

00:24:44,830 --> 00:24:52,750
endangered at the boundary of critically

00:24:47,350 --> 00:24:56,640
endangered and endangered and etc etc so

00:24:52,750 --> 00:24:59,320
if we run this one endangered step

00:24:56,640 --> 00:25:02,500
forward a pie I think I've got it all

00:24:59,320 --> 00:25:04,900
implemented yet we still get the same

00:25:02,500 --> 00:25:07,270
zero output and if we run it in verbose

00:25:04,900 --> 00:25:09,880
mode we've got twelve tests and they all

00:25:07,270 --> 00:25:14,559
passed we can do one more tricky thing

00:25:09,880 --> 00:25:17,200
which is we can have a text file which

00:25:14,559 --> 00:25:18,730
has extra tests in it in this text file

00:25:17,200 --> 00:25:20,410
is something that we can keep to

00:25:18,730 --> 00:25:24,669
ourselves and not give to the students

00:25:20,410 --> 00:25:27,070
and this one then has extra tests there

00:25:24,669 --> 00:25:30,460
you might want to have in your back

00:25:27,070 --> 00:25:32,200
pocket for students who have finished

00:25:30,460 --> 00:25:34,480
all the tests but maybe have done some

00:25:32,200 --> 00:25:38,020
tricky things like hard-coded one of the

00:25:34,480 --> 00:25:40,990
answers so this one we can run with

00:25:38,020 --> 00:25:42,520
Python - M which means I'm using a

00:25:40,990 --> 00:25:45,030
module and I'm going to use the doc test

00:25:42,520 --> 00:25:48,460
module and then I can use test -

00:25:45,030 --> 00:25:51,220
endangered txt and that of course did

00:25:48,460 --> 00:25:53,679
nothing because it worked but if I put

00:25:51,220 --> 00:25:57,070
out verbose there were three tests three

00:25:53,679 --> 00:26:00,220
passed and zero failed so this is how

00:25:57,070 --> 00:26:02,020
you can use doctors to give feedback to

00:26:00,220 --> 00:26:05,950
your students as they're working on

00:26:02,020 --> 00:26:08,530
their projects so one of the cool things

00:26:05,950 --> 00:26:10,780
about this I think is that when I think

00:26:08,530 --> 00:26:12,700
about learning what I really want is for

00:26:10,780 --> 00:26:15,850
every single student to get a hundred

00:26:12,700 --> 00:26:17,530
percent now that sounds absurd right

00:26:15,850 --> 00:26:19,059
this is no class where every student

00:26:17,530 --> 00:26:21,340
gets a hundred percent but really that's

00:26:19,059 --> 00:26:22,990
what we want every student should have

00:26:21,340 --> 00:26:25,660
learned all of the material in the

00:26:22,990 --> 00:26:27,910
course and this kind of scaffolded

00:26:25,660 --> 00:26:30,250
project where we give them every single

00:26:27,910 --> 00:26:32,350
test that we want to check should help

00:26:30,250 --> 00:26:34,059
students get closer to that 100% mark

00:26:32,350 --> 00:26:36,190
because they know the criteria that

00:26:34,059 --> 00:26:37,760
you're marking against and they can test

00:26:36,190 --> 00:26:42,800
their own program we

00:26:37,760 --> 00:26:45,620
that criteria my third example is called

00:26:42,800 --> 00:26:50,380
building a learner model and this

00:26:45,620 --> 00:26:52,400
example is about this idea from the

00:26:50,380 --> 00:26:55,670
education literature called a learner

00:26:52,400 --> 00:26:59,180
model and a learner model is a model of

00:26:55,670 --> 00:27:02,690
a learner very straightforward so the

00:26:59,180 --> 00:27:04,670
idea is that when we learn we learn a

00:27:02,690 --> 00:27:07,160
concept and we get better and better at

00:27:04,670 --> 00:27:09,530
it and then concepts build on concepts

00:27:07,160 --> 00:27:11,540
and we can construct a model of how we

00:27:09,530 --> 00:27:15,020
think that these concepts are built up

00:27:11,540 --> 00:27:16,550
so a very simple model would be that we

00:27:15,020 --> 00:27:19,970
have a bunch of totally disconnected

00:27:16,550 --> 00:27:22,460
concepts like we might say algorithms is

00:27:19,970 --> 00:27:24,530
a concept we might say that data

00:27:22,460 --> 00:27:25,820
structures is a concept and that

00:27:24,530 --> 00:27:30,200
students will get better at these

00:27:25,820 --> 00:27:32,360
concepts over time so oh that's a very

00:27:30,200 --> 00:27:34,580
simple way of thinking about it so what

00:27:32,360 --> 00:27:36,350
we can do with this idea of a learner

00:27:34,580 --> 00:27:38,480
model is we want to help students

00:27:36,350 --> 00:27:40,310
understand what they know and this is

00:27:38,480 --> 00:27:42,620
really important because students often

00:27:40,310 --> 00:27:44,990
don't understand what they know there's

00:27:42,620 --> 00:27:47,030
this effect that everyone has which is

00:27:44,990 --> 00:27:49,190
the fluency effect which is if you

00:27:47,030 --> 00:27:51,470
recognize something you think that you

00:27:49,190 --> 00:27:54,200
understand it so if you are testing

00:27:51,470 --> 00:27:56,060
yourself and you say are what's that how

00:27:54,200 --> 00:27:59,360
does a function work what's recursion I

00:27:56,060 --> 00:28:01,760
you think I remember that word and then

00:27:59,360 --> 00:28:03,770
you say I don't need to test that I I

00:28:01,760 --> 00:28:07,010
remember how that works and everyone

00:28:03,770 --> 00:28:08,810
gets tricked by this so what we want to

00:28:07,010 --> 00:28:11,960
do is help students understand what they

00:28:08,810 --> 00:28:14,060
know and what they don't know and on top

00:28:11,960 --> 00:28:17,600
of that we can use this idea to help us

00:28:14,060 --> 00:28:20,360
understand what our students know so a

00:28:17,600 --> 00:28:22,670
very simple way to do this idea of

00:28:20,360 --> 00:28:24,200
learner modeling which i think is a more

00:28:22,670 --> 00:28:27,410
advanced version of what I've been doing

00:28:24,200 --> 00:28:29,030
in this talk is we start by writing a

00:28:27,410 --> 00:28:30,920
list of concepts in the course and this

00:28:29,030 --> 00:28:34,460
could be very fine-grained or it could

00:28:30,920 --> 00:28:37,400
be big picture concepts and then each

00:28:34,460 --> 00:28:41,150
activity that students do we map the

00:28:37,400 --> 00:28:44,390
concepts to the marks of the activity so

00:28:41,150 --> 00:28:47,240
if a student does an assignment then

00:28:44,390 --> 00:28:51,100
they get a mark for each of the concepts

00:28:47,240 --> 00:28:52,840
rather than a mark overall finally we

00:28:51,100 --> 00:28:55,750
analyze this data to understand their

00:28:52,840 --> 00:28:57,520
learning so if we know what marks they

00:28:55,750 --> 00:28:59,710
got on each concept then we can

00:28:57,520 --> 00:29:00,850
understand where they're struggling and

00:28:59,710 --> 00:29:02,559
we can understand this for each

00:29:00,850 --> 00:29:06,190
individual learner but we can also

00:29:02,559 --> 00:29:10,270
understand it for the whole cohort so

00:29:06,190 --> 00:29:12,610
I've got this final example this learner

00:29:10,270 --> 00:29:17,410
model and and this one is a bit trickier

00:29:12,610 --> 00:29:19,059
I do some stuff with CSV files and so if

00:29:17,410 --> 00:29:21,700
you don't understand it that's fine I've

00:29:19,059 --> 00:29:24,669
got all this code on github and you'll

00:29:21,700 --> 00:29:28,419
be able to grab it later but in my

00:29:24,669 --> 00:29:30,429
learner model I've got a read and an

00:29:28,419 --> 00:29:37,450
update so I'm just gonna start by

00:29:30,429 --> 00:29:39,820
running it so python update pi so this

00:29:37,450 --> 00:29:42,669
says which concept to you updating so

00:29:39,820 --> 00:29:46,720
I've learned today I did an exercise on

00:29:42,669 --> 00:29:50,320
algorithms and my school out of 100 on

00:29:46,720 --> 00:29:54,870
algorithms was 55 so now I want to see

00:29:50,320 --> 00:29:57,640
where I'm at I run read PI and it says

00:29:54,870 --> 00:29:59,890
algorithms the more you practice the

00:29:57,640 --> 00:30:01,570
more you learn so you can see the two

00:29:59,890 --> 00:30:03,400
little the three little equal signs on

00:30:01,570 --> 00:30:06,549
the left is you're getting there with

00:30:03,400 --> 00:30:10,720
algorithms so then if I update it again

00:30:06,549 --> 00:30:15,659
and I am updating algorithms the score I

00:30:10,720 --> 00:30:18,460
got was eighty this time and we run it

00:30:15,659 --> 00:30:21,580
I'm doing well I should keep practicing

00:30:18,460 --> 00:30:24,730
algorithms and you can continue this on

00:30:21,580 --> 00:30:27,460
and on and this data I'm storing in a

00:30:24,730 --> 00:30:30,700
CSV file so you can see here for

00:30:27,460 --> 00:30:32,890
algorithms I got 55 and then I got 80

00:30:30,700 --> 00:30:35,919
and so you can go back and you can

00:30:32,890 --> 00:30:37,630
recalculate how you think a student is

00:30:35,919 --> 00:30:39,070
doing you can get your students to give

00:30:37,630 --> 00:30:43,059
you their scores or you could enter them

00:30:39,070 --> 00:30:44,980
yourself so I'm gonna do this again with

00:30:43,059 --> 00:30:49,960
another concept which concept of my

00:30:44,980 --> 00:30:52,240
updating data structures and I got a

00:30:49,960 --> 00:30:55,840
score of 90 I'm great at data structures

00:30:52,240 --> 00:30:58,150
and read it out so now I've got two

00:30:55,840 --> 00:31:00,250
scores algorithms doing well keep

00:30:58,150 --> 00:31:01,840
practicing data structures the more you

00:31:00,250 --> 00:31:04,299
practice the more you learn now I've got

00:31:01,840 --> 00:31:06,249
90 so why is it such a low score

00:31:04,299 --> 00:31:08,799
well once got in a particularly good

00:31:06,249 --> 00:31:10,450
predictor of success a student may do

00:31:08,799 --> 00:31:12,339
really well the first time you test them

00:31:10,450 --> 00:31:14,019
on a concept but then forget it much

00:31:12,339 --> 00:31:20,249
later and so the algorithm I've

00:31:14,019 --> 00:31:24,159
developed here is relatively simple it

00:31:20,249 --> 00:31:26,259
it's in read it takes their scores and

00:31:24,159 --> 00:31:29,349
the first time it just divides it by two

00:31:26,259 --> 00:31:31,049
so they probably if even if they got 100

00:31:29,349 --> 00:31:33,700
they probably don't understand it 100%

00:31:31,049 --> 00:31:35,979
and then I go on and I add their

00:31:33,700 --> 00:31:38,229
existing knowledge with their new score

00:31:35,979 --> 00:31:43,690
and do a kind of running average so

00:31:38,229 --> 00:31:46,239
eventually they'll get to 100% so that's

00:31:43,690 --> 00:31:49,599
the idea of a learner model and a

00:31:46,239 --> 00:31:54,009
learner model could be extended this is

00:31:49,599 --> 00:31:55,659
something that I you could use with your

00:31:54,009 --> 00:31:57,279
students but you could also get it to

00:31:55,659 --> 00:31:59,139
connect to say the Google sheets API

00:31:57,279 --> 00:32:02,859
which it turns out is not that hard to

00:31:59,139 --> 00:32:04,719
access and then your students when they

00:32:02,859 --> 00:32:07,239
enter their scores it gets updated to

00:32:04,719 --> 00:32:09,969
your spreadsheet that you have of all

00:32:07,239 --> 00:32:13,899
your students scores you could extend

00:32:09,969 --> 00:32:16,749
this to do some data science on it you

00:32:13,899 --> 00:32:19,179
could try and understand which students

00:32:16,749 --> 00:32:21,099
are struggling the most which students

00:32:19,179 --> 00:32:23,859
are struggling the least you could try

00:32:21,099 --> 00:32:25,419
and understand what concepts are the

00:32:23,859 --> 00:32:27,399
most difficult for students and this

00:32:25,419 --> 00:32:29,229
will kind of fall out just by collecting

00:32:27,399 --> 00:32:30,879
that data and it's often the case that

00:32:29,229 --> 00:32:33,459
once you start collecting data you're

00:32:30,879 --> 00:32:36,940
able to use it in ways you never really

00:32:33,459 --> 00:32:41,289
thought so what does this look like in

00:32:36,940 --> 00:32:43,329
the distant future well one of the cool

00:32:41,289 --> 00:32:45,820
things I think about programming is that

00:32:43,329 --> 00:32:47,709
we can solve our own problems it's

00:32:45,820 --> 00:32:49,179
really great if there's a piece of

00:32:47,709 --> 00:32:51,519
software that does something that you

00:32:49,179 --> 00:32:53,469
want but it's really frustrating if that

00:32:51,519 --> 00:32:55,119
piece of software doesn't quite do what

00:32:53,469 --> 00:32:57,399
you want if it doesn't quite do that

00:32:55,119 --> 00:32:59,169
little thing that you want to add on and

00:32:57,399 --> 00:33:01,690
that's one of the fantastic things about

00:32:59,169 --> 00:33:03,219
programming is we can go and take our

00:33:01,690 --> 00:33:07,149
own problems and we can solve them

00:33:03,219 --> 00:33:09,729
ourselves and one of the other things I

00:33:07,149 --> 00:33:11,049
think is really cool about doing this

00:33:09,729 --> 00:33:13,359
kind of thing is that we can make

00:33:11,049 --> 00:33:15,489
learning more effective computation is

00:33:13,359 --> 00:33:17,950
the superpower that we as programmers

00:33:15,489 --> 00:33:20,289
all have but

00:33:17,950 --> 00:33:23,470
sometimes it feels like we're we don't

00:33:20,289 --> 00:33:25,419
really use it to its full extent and by

00:33:23,470 --> 00:33:28,419
taking your expertise and applying

00:33:25,419 --> 00:33:32,860
programming to it you can make that

00:33:28,419 --> 00:33:36,490
domain even better and finally I think

00:33:32,860 --> 00:33:38,830
that with ideas like this we can build a

00:33:36,490 --> 00:33:41,260
shared practice programs are really easy

00:33:38,830 --> 00:33:43,570
to share I've got all of this code that

00:33:41,260 --> 00:33:45,669
I've written up on github it's easy for

00:33:43,570 --> 00:33:49,269
you to grab them and download them you

00:33:45,669 --> 00:33:52,000
could make commits and upload push your

00:33:49,269 --> 00:33:53,710
own changes you could fork the

00:33:52,000 --> 00:33:57,010
repository and make a version for your

00:33:53,710 --> 00:33:58,360
classroom you could come up with

00:33:57,010 --> 00:34:00,760
something that you think is even better

00:33:58,360 --> 00:34:01,870
than all of my ideas which is probably

00:34:00,760 --> 00:34:05,139
going to be the case because these were

00:34:01,870 --> 00:34:07,059
just the things I thought of and then

00:34:05,139 --> 00:34:08,649
you can take that and we can share it

00:34:07,059 --> 00:34:10,690
and we can all benefit from it and

00:34:08,649 --> 00:34:12,879
that's the fantastic thing about open

00:34:10,690 --> 00:34:15,129
source software like python is that

00:34:12,879 --> 00:34:17,560
we're all able to benefit from the

00:34:15,129 --> 00:34:19,599
development that other people do and

00:34:17,560 --> 00:34:21,820
that's something that I think is really

00:34:19,599 --> 00:34:28,540
cool that we could all be doing as

00:34:21,820 --> 00:34:30,399
educators so finally hopefully if we all

00:34:28,540 --> 00:34:33,909
engage in more computational thinking

00:34:30,399 --> 00:34:35,560
practices then my fake history of

00:34:33,909 --> 00:34:37,379
computational thinking will become a

00:34:35,560 --> 00:34:41,589
real history of computational thinking

00:34:37,379 --> 00:34:45,819
and it won't be a joke it'll be stuff

00:34:41,589 --> 00:34:49,690
that really happened this is where you

00:34:45,819 --> 00:34:53,639
can get the code from my talk and now I

00:34:49,690 --> 00:34:53,639
guess I'll be taking questions thank you

00:34:56,310 --> 00:35:09,050
I say if you have a question just raise

00:35:05,670 --> 00:35:09,050
your hand and Bruce will come over

00:35:10,700 --> 00:35:18,600
everyone's super keen for morning tea no

00:35:17,100 --> 00:35:23,310
questions cool

00:35:18,600 --> 00:35:24,000
oh yes I'll just give you the mic so we

00:35:23,310 --> 00:35:26,760
can talk

00:35:24,000 --> 00:35:28,830
yep I'm curious how much the crop

00:35:26,760 --> 00:35:30,720
platform uses some of your ideas and

00:35:28,830 --> 00:35:34,230
giving students feedback I haven't done

00:35:30,720 --> 00:35:36,930
much tutoring this year yes so the basis

00:35:34,230 --> 00:35:39,000
of the platform is automated testing and

00:35:36,930 --> 00:35:41,190
this is something that we think is

00:35:39,000 --> 00:35:43,320
really powerful for students is being

00:35:41,190 --> 00:35:46,020
able to see when the code is working and

00:35:43,320 --> 00:35:51,330
not working one of the hard parts about

00:35:46,020 --> 00:35:53,130
giving feedback is that we in gerak tend

00:35:51,330 --> 00:35:54,930
to give feedback at the point when

00:35:53,130 --> 00:35:57,270
students are marking their solution

00:35:54,930 --> 00:35:59,130
right so we say whether they've got it

00:35:57,270 --> 00:36:01,530
right or wrong and what cases they

00:35:59,130 --> 00:36:03,600
failed but often students need a bit of

00:36:01,530 --> 00:36:06,180
feedback earlier than that often

00:36:03,600 --> 00:36:08,280
students are running code and they don't

00:36:06,180 --> 00:36:10,620
understand what an error is or they

00:36:08,280 --> 00:36:14,040
don't know what to write or they're kind

00:36:10,620 --> 00:36:16,920
of stuck in that blank text box I don't

00:36:14,040 --> 00:36:18,450
know what to do and so I think there's

00:36:16,920 --> 00:36:21,450
definitely way more things that we could

00:36:18,450 --> 00:36:23,460
be doing to give you know more structure

00:36:21,450 --> 00:36:26,430
and more feedback during those earlier

00:36:23,460 --> 00:36:28,320
processes and then also something else

00:36:26,430 --> 00:36:31,530
is that automated testing isn't great at

00:36:28,320 --> 00:36:33,810
doing things like code quality a student

00:36:31,530 --> 00:36:36,450
could write something that is absolutely

00:36:33,810 --> 00:36:38,700
atrocious but passes all our tests we

00:36:36,450 --> 00:36:41,370
just about every year we find a student

00:36:38,700 --> 00:36:44,340
who has written a series of nested ifs

00:36:41,370 --> 00:36:47,240
about a hundred if statements long that

00:36:44,340 --> 00:36:50,550
they've used to emulate a for loop and

00:36:47,240 --> 00:36:52,110
this is not a joke this happens and

00:36:50,550 --> 00:36:54,600
that's the kind of thing where an

00:36:52,110 --> 00:36:56,460
automated test we only test so many

00:36:54,600 --> 00:36:58,440
cases and so you can just keep writing

00:36:56,460 --> 00:37:02,930
if statements until you get past all the

00:36:58,440 --> 00:37:02,930
tests any other questions

00:37:02,960 --> 00:37:12,109
cool thank you very much

00:37:06,280 --> 00:37:12,109

YouTube URL: https://www.youtube.com/watch?v=SmGOeDmTf6M


