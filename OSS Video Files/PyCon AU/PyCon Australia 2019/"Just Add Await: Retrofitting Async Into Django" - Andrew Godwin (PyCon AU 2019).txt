Title: "Just Add Await: Retrofitting Async Into Django" - Andrew Godwin (PyCon AU 2019)
Publication date: 2019-08-03
Playlist: PyCon Australia 2019
Description: 
	Andrew Godwin

Writing async code from scratch is hard; trying to add it into a large, existing framework is harder. Learn about the problems we face trying to make Django async while maintaining backwards compatibility, as well as the problems maintaining hybrid sync-and-async Python codebases in general.

https://2019.pycon-au.org/talks/just-add-await-retrofitting-async-into-django

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 2 - 6 2019.

Video licence: CC BY-NC-SA 4.0 - https://creativecommons.org/licenses/by-nc-sa/4.0/

Python, PyCon, PyConAU

Fri Aug  2 14:10:00 2019 at C3.3
Captions: 
	00:00:02,240 --> 00:00:06,870
we didn't do the thing with can you

00:00:05,190 --> 00:00:09,620
screw into the middle of the road yet

00:00:06,870 --> 00:00:12,330
but this seems to work these days now

00:00:09,620 --> 00:00:17,550
all right let's start this whole thing

00:00:12,330 --> 00:00:21,270
off he's not for the work on South the

00:00:17,550 --> 00:00:25,439
jungle migration framework and channels

00:00:21,270 --> 00:00:28,880
and now his next pet project I might

00:00:25,439 --> 00:00:32,910
call it is passing away is incapable

00:00:28,880 --> 00:00:41,010
Django and yeah next up is Andrew

00:00:32,910 --> 00:00:43,500
Goodman thank you thank you market so

00:00:41,010 --> 00:00:45,480
yes as this title sort of gives away

00:00:43,500 --> 00:00:46,950
here this is about a sink into Django

00:00:45,480 --> 00:00:49,829
and if you looked at the schedule you'll

00:00:46,950 --> 00:00:50,910
see this is a 70 minute talk I will try

00:00:49,829 --> 00:00:52,050
and keep your attention the whole time

00:00:50,910 --> 00:00:53,550
but I'm not gonna be offended if you

00:00:52,050 --> 00:00:55,770
leave midway through or someone comes in

00:00:53,550 --> 00:00:58,320
so please don't worry about that but a

00:00:55,770 --> 00:01:01,020
little bit of introduction I am Andrew

00:00:58,320 --> 00:01:04,260
Godwin and my slider thing is not

00:01:01,020 --> 00:01:08,070
working come on there we go there we are

00:01:04,260 --> 00:01:09,210
right I am a long time dying a

00:01:08,070 --> 00:01:12,240
contributor I've been doing it since

00:01:09,210 --> 00:01:14,100
about 2008 which I realized last year

00:01:12,240 --> 00:01:16,740
was a decade and it kind of took me by

00:01:14,100 --> 00:01:19,740
surprise I work at Eventbrite and my day

00:01:16,740 --> 00:01:21,720
job I mostly wrangle the sre and

00:01:19,740 --> 00:01:24,000
software architecture teams and do stuff

00:01:21,720 --> 00:01:25,799
around them and you can mostly find me

00:01:24,000 --> 00:01:28,880
on Twitter either making fun of Cole's

00:01:25,799 --> 00:01:31,500
or talking about Pisan ASIC your choice

00:01:28,880 --> 00:01:33,479
but the key thing here is Django one of

00:01:31,500 --> 00:01:36,180
the things I sort of stopped found when

00:01:33,479 --> 00:01:36,840
I first found Django back in 2006 was

00:01:36,180 --> 00:01:39,000
its simplicity

00:01:36,840 --> 00:01:41,850
Django offers you a very simple contract

00:01:39,000 --> 00:01:44,490
it says hey we can let you write a thing

00:01:41,850 --> 00:01:47,670
good of you it's a callable it takes a

00:01:44,490 --> 00:01:49,950
request it returns response and for a

00:01:47,670 --> 00:01:52,110
long time it's angina very well and the

00:01:49,950 --> 00:01:54,149
key problem is that there's a lot of

00:01:52,110 --> 00:01:55,380
things in the modern world as you saw a

00:01:54,149 --> 00:01:57,960
little bit from Russell's talk just

00:01:55,380 --> 00:01:59,280
prior to this one that have changed in

00:01:57,960 --> 00:02:01,200
those last 10 years and one of those

00:01:59,280 --> 00:02:03,090
things is asynchronous support in Python

00:02:01,200 --> 00:02:04,799
I'm going to go through about a lot

00:02:03,090 --> 00:02:07,469
about what it means in Python how it

00:02:04,799 --> 00:02:09,569
interacts what you use it for the upshot

00:02:07,469 --> 00:02:12,209
of this is my goal and my vision for

00:02:09,569 --> 00:02:13,750
async and Python is simple it's that

00:02:12,209 --> 00:02:15,790
same basic contract

00:02:13,750 --> 00:02:18,700
it's a thing that takes a request that

00:02:15,790 --> 00:02:20,640
returns a response but that you let you

00:02:18,700 --> 00:02:24,490
do it in an async compatible way and

00:02:20,640 --> 00:02:26,050
invitin async functions are not much

00:02:24,490 --> 00:02:27,970
different normal functions on the outset

00:02:26,050 --> 00:02:30,810
use put async in front of the name of

00:02:27,970 --> 00:02:34,030
the function and you can do things like

00:02:30,810 --> 00:02:36,820
HTTP requests API calls database

00:02:34,030 --> 00:02:39,340
requests anything that is IO heavy or

00:02:36,820 --> 00:02:41,260
fast and heavy or basically doesn't sit

00:02:39,340 --> 00:02:43,450
there spinning the CPU forever is a

00:02:41,260 --> 00:02:45,070
perfect example of when you can use a

00:02:43,450 --> 00:02:46,860
Singh to make things faster and I'll

00:02:45,070 --> 00:02:49,000
show you some of those examples later on

00:02:46,860 --> 00:02:51,580
there's presentations kind of in three

00:02:49,000 --> 00:02:53,680
pieces I'll start off with a sort of

00:02:51,580 --> 00:02:56,200
overview of Python async how it works

00:02:53,680 --> 00:02:57,970
how it compares to threading and some of

00:02:56,200 --> 00:03:00,400
those sort of basic problems start

00:02:57,970 --> 00:03:02,080
occurring in it I'll then talk about how

00:03:00,400 --> 00:03:04,180
those problems particularly manifest for

00:03:02,080 --> 00:03:06,730
Django in terms of what it means to be a

00:03:04,180 --> 00:03:08,739
big framework be back compatible how all

00:03:06,730 --> 00:03:10,810
those things manifest and finally we'll

00:03:08,739 --> 00:03:13,209
do a deep dive into Django and the work

00:03:10,810 --> 00:03:15,150
I'm currently doing on turning Django

00:03:13,209 --> 00:03:18,280
into an asynchronous and synchronous

00:03:15,150 --> 00:03:21,310
framework will let you run the code you

00:03:18,280 --> 00:03:23,140
see on this slide so first of all let's

00:03:21,310 --> 00:03:24,580
talk about async and we can't talk about

00:03:23,140 --> 00:03:25,090
async without talking about our old

00:03:24,580 --> 00:03:27,489
friend

00:03:25,090 --> 00:03:30,220
threading Python throating has been

00:03:27,489 --> 00:03:32,170
around forever it is maybe one of the

00:03:30,220 --> 00:03:35,019
most misleading names in Python it does

00:03:32,170 --> 00:03:38,380
not use alert level threads they are not

00:03:35,019 --> 00:03:41,200
parallel threads are basically a very

00:03:38,380 --> 00:03:43,780
simple way of time slicing your code if

00:03:41,200 --> 00:03:46,989
you have three threads in Python those

00:03:43,780 --> 00:03:48,700
threads all share the same CPU and just

00:03:46,989 --> 00:03:51,160
each of them gets a third of the time to

00:03:48,700 --> 00:03:53,620
run Python sits there and the scheduler

00:03:51,160 --> 00:03:54,610
just cuts off each thread in the middle

00:03:53,620 --> 00:03:56,560
of whatever it's doing it could be

00:03:54,610 --> 00:03:58,030
adding it could be saving something it

00:03:56,560 --> 00:04:00,190
could be in a critical point of this

00:03:58,030 --> 00:04:02,680
code it'll just cut it off come in and

00:04:00,190 --> 00:04:04,720
move the next thread that's called

00:04:02,680 --> 00:04:06,820
pre-emptive multitasking it's kind of

00:04:04,720 --> 00:04:09,160
how your OS works and normal programs

00:04:06,820 --> 00:04:10,870
work it's generally fine and is a very

00:04:09,160 --> 00:04:12,700
good basic level of a way of doing stuff

00:04:10,870 --> 00:04:14,290
but there's a different kind of

00:04:12,700 --> 00:04:16,570
multitasking called cooperative

00:04:14,290 --> 00:04:19,299
multitasking this is what Co routines

00:04:16,570 --> 00:04:21,729
are Co routines are the fundamental unit

00:04:19,299 --> 00:04:23,830
of asynchronous Python rather than

00:04:21,729 --> 00:04:26,440
running a thread you run a Co routine

00:04:23,830 --> 00:04:27,310
and the key thing occur routine does is

00:04:26,440 --> 00:04:29,290
it tells

00:04:27,310 --> 00:04:31,900
you and it's ready to stop working it

00:04:29,290 --> 00:04:34,810
has a thing called await when a co teen

00:04:31,900 --> 00:04:36,910
wants to say listen to a fire network

00:04:34,810 --> 00:04:40,300
socket or open a file or talk to a

00:04:36,910 --> 00:04:43,120
database you will have codes as Oh await

00:04:40,300 --> 00:04:44,590
this operation and what that means is

00:04:43,120 --> 00:04:46,990
that tells Python

00:04:44,590 --> 00:04:48,490
oh this is the point where you can let

00:04:46,990 --> 00:04:50,680
go of schedule for me and schedule

00:04:48,490 --> 00:04:52,930
something else that's what this means is

00:04:50,680 --> 00:04:54,910
co-routines get to take up as much time

00:04:52,930 --> 00:04:57,460
as they need and finish when they want

00:04:54,910 --> 00:04:59,560
to this gives you nice things like the

00:04:57,460 --> 00:05:01,120
fact that you know you can only release

00:04:59,560 --> 00:05:02,860
control during an a wait statement if

00:05:01,120 --> 00:05:05,139
you have in a wait then some critical

00:05:02,860 --> 00:05:07,180
code then another await the code in the

00:05:05,139 --> 00:05:09,010
middle can't be interrupted but there

00:05:07,180 --> 00:05:11,169
are also problems like is cooperative if

00:05:09,010 --> 00:05:13,330
you're an uncooperative co-routine you

00:05:11,169 --> 00:05:15,639
can ruin the whole program if you never

00:05:13,330 --> 00:05:18,100
call await which is very easy to do by

00:05:15,639 --> 00:05:20,770
the way you can just sit there and take

00:05:18,100 --> 00:05:22,210
the entire program up and never give

00:05:20,770 --> 00:05:24,760
back control and so we'll talk about

00:05:22,210 --> 00:05:26,020
some other ways we can address that and

00:05:24,760 --> 00:05:28,270
this is kind of one of the big

00:05:26,020 --> 00:05:29,650
challenges you get when you first face

00:05:28,270 --> 00:05:32,169
between the synchronous and asynchronous

00:05:29,650 --> 00:05:34,479
walls of Python spreads have been around

00:05:32,169 --> 00:05:36,490
for a long time we know their faults we

00:05:34,479 --> 00:05:37,810
know their pros and cons we have

00:05:36,490 --> 00:05:38,710
workarounds in the form of things like

00:05:37,810 --> 00:05:41,110
multi-processing

00:05:38,710 --> 00:05:43,419
and co-routines are still quite new the

00:05:41,110 --> 00:05:44,620
model itself Coptic multitasking is not

00:05:43,419 --> 00:05:46,930
new it's been around for many many

00:05:44,620 --> 00:05:49,450
decades many other languages have tried

00:05:46,930 --> 00:05:51,280
this and forged that path for us but in

00:05:49,450 --> 00:05:53,410
terms of Python and waiting interact and

00:05:51,280 --> 00:05:54,820
debugging there's still a few rough

00:05:53,410 --> 00:05:57,310
edges in there that we'll all look at

00:05:54,820 --> 00:05:58,690
and the key thing with co-routines is

00:05:57,310 --> 00:06:01,539
that we need I think with an event loop

00:05:58,690 --> 00:06:03,639
when I say that when you await you

00:06:01,539 --> 00:06:04,889
return control that's what you return

00:06:03,639 --> 00:06:07,690
control to

00:06:04,889 --> 00:06:10,270
asynchronous pison is a little bit of a

00:06:07,690 --> 00:06:11,740
lie it's still basically just a

00:06:10,270 --> 00:06:13,180
synchronous bit of Python called an

00:06:11,740 --> 00:06:15,250
event loop that runs co-routines

00:06:13,180 --> 00:06:17,139
underneath it when you run a sync python

00:06:15,250 --> 00:06:18,970
you just run the event loop and the

00:06:17,139 --> 00:06:20,169
event loop handles things like Network

00:06:18,970 --> 00:06:22,539
communication it handles things like

00:06:20,169 --> 00:06:24,400
file sockets in some cases it handles

00:06:22,539 --> 00:06:26,110
things like sleeping efficiently and the

00:06:24,400 --> 00:06:28,389
whole purpose is the event loop is a

00:06:26,110 --> 00:06:29,979
specialized piece of code that knows how

00:06:28,389 --> 00:06:31,930
to do all those things in parallel

00:06:29,979 --> 00:06:33,310
when you've got a task that can be done

00:06:31,930 --> 00:06:35,229
in parallel you hand it back to the

00:06:33,310 --> 00:06:37,210
event lis within a wait statement and it

00:06:35,229 --> 00:06:39,760
comes back to you when it's polling or

00:06:37,210 --> 00:06:41,639
it's alerting or signaling realizes that

00:06:39,760 --> 00:06:45,310
hi hey this sockets got new data

00:06:41,639 --> 00:06:47,710
but that does mean the event loop being

00:06:45,310 --> 00:06:50,819
normal Python code runs in a single

00:06:47,710 --> 00:06:54,159
thread it is just in some ways

00:06:50,819 --> 00:06:55,300
asynchronous Python function that runs

00:06:54,159 --> 00:06:57,219
for a long time there's a lot of stuff

00:06:55,300 --> 00:06:59,949
underneath it and this gets into the

00:06:57,219 --> 00:07:02,860
very I use the word fun

00:06:59,949 --> 00:07:04,449
lightly here situation where well yes it

00:07:02,860 --> 00:07:06,819
runs in a thread so course you can run

00:07:04,449 --> 00:07:08,740
other threads and in fact you can run

00:07:06,819 --> 00:07:10,120
multiple event loops you can run

00:07:08,740 --> 00:07:12,270
synchronous and asynchronous Reds at

00:07:10,120 --> 00:07:14,919
once and in fact you have to do this

00:07:12,270 --> 00:07:17,680
here is a very basic example so let's

00:07:14,919 --> 00:07:19,689
say the core of my program my main

00:07:17,680 --> 00:07:21,819
thread the one I write my code and when

00:07:19,689 --> 00:07:25,029
program starts is synchronous it's a

00:07:21,819 --> 00:07:26,379
normal boring old Python thread and in

00:07:25,029 --> 00:07:28,150
that thread I want to run some

00:07:26,379 --> 00:07:30,969
asynchronous code and I can do that with

00:07:28,150 --> 00:07:33,099
a thing called loop run until complete

00:07:30,969 --> 00:07:35,050
you'll see a bit about later basically

00:07:33,099 --> 00:07:35,680
you make an event loop you make some

00:07:35,050 --> 00:07:37,270
co-routines

00:07:35,680 --> 00:07:39,219
you give the code into the event loop

00:07:37,270 --> 00:07:40,389
say hey run these until they finish and

00:07:39,219 --> 00:07:41,800
then you kick the whole thing off and go

00:07:40,389 --> 00:07:43,449
run and there's a look there's a

00:07:41,800 --> 00:07:44,979
blocking function you just run that

00:07:43,449 --> 00:07:46,710
function it blocks the entire

00:07:44,979 --> 00:07:50,560
synchronous thread until it completes

00:07:46,710 --> 00:07:53,199
but if you want to then call synchronous

00:07:50,560 --> 00:07:55,810
code from asynchronous threads you can't

00:07:53,199 --> 00:07:57,490
- remember I said if you don't await you

00:07:55,810 --> 00:07:59,830
block the whole thread if you just

00:07:57,490 --> 00:08:01,810
naively call some synchronous code it's

00:07:59,830 --> 00:08:03,729
gonna not await and block the whole

00:08:01,810 --> 00:08:05,379
thread until it finishes what it's doing

00:08:03,729 --> 00:08:07,419
and your programs going to come to a

00:08:05,379 --> 00:08:09,219
screeching halt so we'll see some of

00:08:07,419 --> 00:08:10,960
this unpacked and the big framework and

00:08:09,219 --> 00:08:13,089
the Django problem section but just be

00:08:10,960 --> 00:08:15,550
aware that it's not just a case of your

00:08:13,089 --> 00:08:18,279
program is sink or your program is async

00:08:15,550 --> 00:08:19,300
most Python has to mix the two worlds in

00:08:18,279 --> 00:08:21,520
some way or another

00:08:19,300 --> 00:08:23,139
usually there's always some element of

00:08:21,520 --> 00:08:25,270
synchronous - hiding under there

00:08:23,139 --> 00:08:26,490
somewhere even when most your program is

00:08:25,270 --> 00:08:28,870
natively async

00:08:26,490 --> 00:08:30,250
now one of the things among the reasons

00:08:28,870 --> 00:08:31,750
we have a thing in the first place is a

00:08:30,250 --> 00:08:33,519
thing that's not offer known about

00:08:31,750 --> 00:08:35,260
threads if you haven't used them enough

00:08:33,519 --> 00:08:36,880
is that they're very slow they're

00:08:35,260 --> 00:08:38,709
impressed there is simple time slicing

00:08:36,880 --> 00:08:40,779
thing what that means is the more of

00:08:38,709 --> 00:08:43,810
them you add the worse it gets

00:08:40,779 --> 00:08:46,630
Python is not perfect at switching from

00:08:43,810 --> 00:08:49,329
one thread to another it takes time to

00:08:46,630 --> 00:08:50,500
take the stack save the stack down I'm

00:08:49,329 --> 00:08:52,899
Pat a new stack has which in the new

00:08:50,500 --> 00:08:54,580
thread and the more threads you have the

00:08:52,899 --> 00:08:56,410
more percentage of your time

00:08:54,580 --> 00:08:58,480
spent doing this context switching

00:08:56,410 --> 00:08:59,680
between threads at some point you can

00:08:58,480 --> 00:09:03,100
get to a number of threads that's just

00:08:59,680 --> 00:09:05,290
basically unusable per Python it depends

00:09:03,100 --> 00:09:07,540
on the computer and the processor but

00:09:05,290 --> 00:09:09,280
essentially about a couple of thousand

00:09:07,540 --> 00:09:11,140
threads you're basically spending most

00:09:09,280 --> 00:09:12,820
of your time spinning just context which

00:09:11,140 --> 00:09:15,460
you're not doing anything useful and

00:09:12,820 --> 00:09:17,620
this means that threads while they seem

00:09:15,460 --> 00:09:19,930
useful and in languages like Java they

00:09:17,620 --> 00:09:22,360
are what you use for offloading things

00:09:19,930 --> 00:09:24,490
like long-running web requests they are

00:09:22,360 --> 00:09:26,410
not usual useful for that in Django when

00:09:24,490 --> 00:09:29,260
you run django you run something like g

00:09:26,410 --> 00:09:30,400
unicorn you give it a twerk of threads 8

00:09:29,260 --> 00:09:32,380
is a good number it's a good balance

00:09:30,400 --> 00:09:33,790
between like well there's some context

00:09:32,380 --> 00:09:36,550
switching there's not a lot that's a

00:09:33,790 --> 00:09:38,380
good use of memory versus context switch

00:09:36,550 --> 00:09:40,540
time but if you're writing an

00:09:38,380 --> 00:09:42,910
application that has deliberately long

00:09:40,540 --> 00:09:45,730
requests so for example your classic

00:09:42,910 --> 00:09:47,950
long Paul example where a client sends

00:09:45,730 --> 00:09:51,040
you a request and then you take on

00:09:47,950 --> 00:09:52,900
purpose 30 to 60 seconds to respond to

00:09:51,040 --> 00:09:55,000
the request and respond when an event

00:09:52,900 --> 00:09:57,640
happens to provide that immediate event

00:09:55,000 --> 00:09:59,890
to the user you're tying up a whole

00:09:57,640 --> 00:10:02,770
thread while you're waiting for that

00:09:59,890 --> 00:10:05,140
event happen and close a request if you

00:10:02,770 --> 00:10:06,910
use a normal Python or normal whiskey

00:10:05,140 --> 00:10:10,150
you're gonna use all your threads up

00:10:06,910 --> 00:10:11,650
almost straight away it is honestly

00:10:10,150 --> 00:10:12,880
impressive happen like I don't have a

00:10:11,650 --> 00:10:15,790
mistake it's very impressive and

00:10:12,880 --> 00:10:17,460
terrifying when it happens and so we

00:10:15,790 --> 00:10:19,930
have to not use threads for this reason

00:10:17,460 --> 00:10:22,180
this is where like again async is fast

00:10:19,930 --> 00:10:23,710
if you fill these categories it's a

00:10:22,180 --> 00:10:25,150
trade-off it's a good engineering

00:10:23,710 --> 00:10:27,520
trade-off all engineering is good

00:10:25,150 --> 00:10:30,130
trade-offs right if you have very like

00:10:27,520 --> 00:10:31,810
CPU intensive code async is not for you

00:10:30,130 --> 00:10:34,000
it's not going to help you at all but if

00:10:31,810 --> 00:10:35,980
you have lots of i/o bound code and

00:10:34,000 --> 00:10:38,230
let's face it in Django you're probably

00:10:35,980 --> 00:10:40,480
bound on talking to the database or

00:10:38,230 --> 00:10:43,390
talking to external services or talking

00:10:40,480 --> 00:10:45,940
to maybe api's or internal api's or

00:10:43,390 --> 00:10:46,510
internal services you'll probably piyo

00:10:45,940 --> 00:10:48,310
abound

00:10:46,510 --> 00:10:50,620
most of the programs I write tend to

00:10:48,310 --> 00:10:52,180
spend two-thirds of their time at least

00:10:50,620 --> 00:10:54,550
wasting on a database to go and do their

00:10:52,180 --> 00:10:57,460
thing and if you're spending two-thirds

00:10:54,550 --> 00:10:59,470
of your time waiting on a database and

00:10:57,460 --> 00:11:01,390
you're wasting that CPU use it you could

00:10:59,470 --> 00:11:03,300
use that time reclaim it and have

00:11:01,390 --> 00:11:05,440
something else run in that process and

00:11:03,300 --> 00:11:06,590
there aren't as fast they're

00:11:05,440 --> 00:11:10,960
impressively for

00:11:06,590 --> 00:11:14,120
so there is a benchmark suite there's a

00:11:10,960 --> 00:11:15,770
pure Python basically a sickness web

00:11:14,120 --> 00:11:18,470
primer called starlet which tong

00:11:15,770 --> 00:11:20,120
christie develops and he's done of

00:11:18,470 --> 00:11:21,830
there's a standard benchmark that is

00:11:20,120 --> 00:11:24,110
like how many web requests can you

00:11:21,830 --> 00:11:25,820
render that include a Postgres database

00:11:24,110 --> 00:11:28,820
request it's a good benchmarks it's not

00:11:25,820 --> 00:11:30,890
just like pure CPU its o CPU and also go

00:11:28,820 --> 00:11:33,550
and talk to a database on that benchmark

00:11:30,890 --> 00:11:37,250
starlet and the as he server he has

00:11:33,550 --> 00:11:39,410
beats javascript and gets appreciably

00:11:37,250 --> 00:11:42,830
close to go which I will remind you is a

00:11:39,410 --> 00:11:44,570
compiled language it is it is not going

00:11:42,830 --> 00:11:46,280
to be the number one speed language in

00:11:44,570 --> 00:11:49,730
terms of speed but it is impressively

00:11:46,280 --> 00:11:51,860
good and if you are sitting there using

00:11:49,730 --> 00:11:54,020
up a lot of servers and you're spending

00:11:51,860 --> 00:11:55,700
a lot time idling there's maybe a lot of

00:11:54,020 --> 00:11:57,980
time and resource you could be saving

00:11:55,700 --> 00:11:59,090
using async and it also makes a lot of

00:11:57,980 --> 00:12:01,760
things possible right like you couldn't

00:11:59,090 --> 00:12:03,350
even design WebSocket support let async

00:12:01,760 --> 00:12:05,480
if you're gonna use a thread per socket

00:12:03,350 --> 00:12:06,680
you you're gonna run out of memory

00:12:05,480 --> 00:12:10,280
before you can you can start serving

00:12:06,680 --> 00:12:12,710
enough people to be viable and the thing

00:12:10,280 --> 00:12:15,650
these two different worlds is I want to

00:12:12,710 --> 00:12:17,630
reinforce that while async functions

00:12:15,650 --> 00:12:19,820
look like synchronous functions for the

00:12:17,630 --> 00:12:22,850
most part it's a death and async death

00:12:19,820 --> 00:12:24,440
they are different functions as far as

00:12:22,850 --> 00:12:27,350
you you should think of as programmers

00:12:24,440 --> 00:12:29,660
there are two incompatible types you

00:12:27,350 --> 00:12:31,940
cannot call one from the other if you

00:12:29,660 --> 00:12:35,030
have synchronous code you cannot easily

00:12:31,940 --> 00:12:37,880
call asynchronous code and vice versa so

00:12:35,030 --> 00:12:39,410
if you have synchronous code and you

00:12:37,880 --> 00:12:40,790
want to call synchronous code that's

00:12:39,410 --> 00:12:43,520
easy you just call the function done

00:12:40,790 --> 00:12:45,320
you're doing this since forever if you

00:12:43,520 --> 00:12:47,660
have asynchronous code I want to call

00:12:45,320 --> 00:12:49,490
asynchronous code again that's a

00:12:47,660 --> 00:12:51,800
primitive it's the await function you

00:12:49,490 --> 00:12:54,050
say okay here's a a synchronous function

00:12:51,800 --> 00:12:55,820
the event loop will handle working out

00:12:54,050 --> 00:12:59,300
what that await means it'll suspend you

00:12:55,820 --> 00:13:01,700
and come back in time however if you

00:12:59,300 --> 00:13:04,100
want to call asynchronous code from

00:13:01,700 --> 00:13:06,200
synchronous code it's a little bit more

00:13:04,100 --> 00:13:08,030
tricky in Python 3.7 it's got

00:13:06,200 --> 00:13:10,370
significantly easier they have this

00:13:08,030 --> 00:13:13,010
built in here called a sentai run and

00:13:10,370 --> 00:13:15,260
you can pass an asynchronous function to

00:13:13,010 --> 00:13:17,180
that and it will run it and return you

00:13:15,260 --> 00:13:20,390
the result it's all wrapped up nicely in

00:13:17,180 --> 00:13:22,610
Python 3.6 it's a little bit harder

00:13:20,390 --> 00:13:24,500
you have to make a new event loop set

00:13:22,610 --> 00:13:25,850
the event Libas default and then use

00:13:24,500 --> 00:13:27,709
that and run until complete function I

00:13:25,850 --> 00:13:29,839
mentioned at the start these two pieces

00:13:27,709 --> 00:13:31,730
of code are functionally identical just

00:13:29,839 --> 00:13:34,190
Python 3/7 has a much nicer way of doing

00:13:31,730 --> 00:13:36,709
it and this still doesn't provide a lot

00:13:34,190 --> 00:13:38,180
of things like thread locals or context

00:13:36,709 --> 00:13:40,399
fellows or other things we'll come to

00:13:38,180 --> 00:13:41,630
later in the presentation that while

00:13:40,399 --> 00:13:43,160
this is a good start

00:13:41,630 --> 00:13:45,500
Django and frameworks need a lot more

00:13:43,160 --> 00:13:47,300
from this and finally you get the

00:13:45,500 --> 00:13:50,089
problem of calling synchronous code from

00:13:47,300 --> 00:13:52,430
asynchronous code which is where threads

00:13:50,089 --> 00:13:55,220
come in so as I said before you can't

00:13:52,430 --> 00:13:57,470
run synchronous code in an asynchronous

00:13:55,220 --> 00:13:58,880
co-routine because it's naive it's gonna

00:13:57,470 --> 00:14:01,040
sit there and think it's in synchronous

00:13:58,880 --> 00:14:03,800
land and block the entire thread until

00:14:01,040 --> 00:14:05,839
it finishes so what you do is you take

00:14:03,800 --> 00:14:07,519
take your synchronous code you bundle it

00:14:05,839 --> 00:14:09,800
up and put it into a thread by itself

00:14:07,519 --> 00:14:12,320
you say ok you synchronous code you run

00:14:09,800 --> 00:14:14,750
in a thread and then we will suspend

00:14:12,320 --> 00:14:16,760
ourselves and tell the event loop when

00:14:14,750 --> 00:14:18,230
that thread finishes resume us and give

00:14:16,760 --> 00:14:19,820
us the result of the thread this is a

00:14:18,230 --> 00:14:22,040
thing called red port executor it helps

00:14:19,820 --> 00:14:24,769
us do this it's what you do is you make

00:14:22,040 --> 00:14:26,810
a triple executor you get your loop and

00:14:24,769 --> 00:14:29,240
then you tell the loop hey run this

00:14:26,810 --> 00:14:31,010
synchronous function in the executor and

00:14:29,240 --> 00:14:32,839
wake us up when it's got the result back

00:14:31,010 --> 00:14:35,180
so again there was a primitive here for

00:14:32,839 --> 00:14:36,769
it but there's a lot of rough edges and

00:14:35,180 --> 00:14:39,170
other things that haven't been covered

00:14:36,769 --> 00:14:41,540
I've to come and look at and the key

00:14:39,170 --> 00:14:43,670
thing to understand here is this is very

00:14:41,540 --> 00:14:45,890
dangerous this is the place where you

00:14:43,670 --> 00:14:48,500
can ruin your whole program asynchronous

00:14:45,890 --> 00:14:51,010
code is by its nature more dangerous

00:14:48,500 --> 00:14:53,540
than synchronous code but in particular

00:14:51,010 --> 00:14:57,110
when you are calling synchronous code

00:14:53,540 --> 00:15:00,380
from asynchronous code the surface area

00:14:57,110 --> 00:15:02,810
of problems you can have is vast you can

00:15:00,380 --> 00:15:04,880
accidentally call function and how it

00:15:02,810 --> 00:15:06,110
block things for you know two or three

00:15:04,880 --> 00:15:08,269
seconds which will ruin your entire

00:15:06,110 --> 00:15:09,949
event loop and especially cause like you

00:15:08,269 --> 00:15:13,279
don't know what the functional pooling

00:15:09,949 --> 00:15:15,709
might do and in Django things like

00:15:13,279 --> 00:15:17,779
actual access can block the thread for

00:15:15,709 --> 00:15:19,730
one or two seconds if I have a foreign

00:15:17,779 --> 00:15:22,279
key on an object and I want to just I

00:15:19,730 --> 00:15:25,040
just do instance dot foreign key name

00:15:22,279 --> 00:15:26,449
name that in the background goes and

00:15:25,040 --> 00:15:27,680
runs that they'll is query and blocks

00:15:26,449 --> 00:15:30,050
the thread infectious it and brings it

00:15:27,680 --> 00:15:31,579
back again and who didn't realize that

00:15:30,050 --> 00:15:33,740
you've just blocked a whole event live

00:15:31,579 --> 00:15:36,380
for two seconds and basically screwed

00:15:33,740 --> 00:15:39,620
every other user running on that event

00:15:36,380 --> 00:15:42,260
leap on that server and this is kind of

00:15:39,620 --> 00:15:44,870
what I'm saying about when you have a

00:15:42,260 --> 00:15:47,060
synchronous thing it can look like this

00:15:44,870 --> 00:15:49,130
right so you take your synchronous

00:15:47,060 --> 00:15:51,380
function you run it in the thing no

00:15:49,130 --> 00:15:53,900
other coatings can run its corruptive

00:15:51,380 --> 00:15:54,890
nothing can take it in and instead what

00:15:53,900 --> 00:15:57,290
you want to here is the example on the

00:15:54,890 --> 00:15:59,090
right you want to take that big one you

00:15:57,290 --> 00:16:00,620
want to run that separate thread and

00:15:59,090 --> 00:16:03,740
keep running things on the main

00:16:00,620 --> 00:16:06,140
asynchronous thread you may be getting a

00:16:03,740 --> 00:16:08,360
feeling for this it's complicated I have

00:16:06,140 --> 00:16:10,760
spent a long time trying to understand

00:16:08,360 --> 00:16:12,280
this before I go into the rest

00:16:10,760 --> 00:16:15,110
presentation and I make one thing clear

00:16:12,280 --> 00:16:18,080
you should not write async code unless

00:16:15,110 --> 00:16:20,210
you need to it is great it is really

00:16:18,080 --> 00:16:22,940
powerful it's fantastic if you can use

00:16:20,210 --> 00:16:24,890
advantages but it is not the thing you

00:16:22,940 --> 00:16:26,690
should turn to first if you have a

00:16:24,890 --> 00:16:28,730
problem that's exciting and interesting

00:16:26,690 --> 00:16:31,160
gern writes it synchronously first add

00:16:28,730 --> 00:16:33,020
some tests go hmmm this isn't fast

00:16:31,160 --> 00:16:35,030
enough and then go rewrite to async

00:16:33,020 --> 00:16:36,560
because this is just one of the many

00:16:35,030 --> 00:16:38,990
potholes you can fall into and will see

00:16:36,560 --> 00:16:40,460
a lot more of them but let's see more

00:16:38,990 --> 00:16:42,290
specific let's talk about framework

00:16:40,460 --> 00:16:44,330
problems this all you've seen here is

00:16:42,290 --> 00:16:46,310
like the abstract like well I'm going to

00:16:44,330 --> 00:16:48,200
write a simple example of like I'm gonna

00:16:46,310 --> 00:16:49,640
run an async thing that fetches for web

00:16:48,200 --> 00:16:51,020
pages at once it's exciting it's fun

00:16:49,640 --> 00:16:55,190
it's not very useful in the real world

00:16:51,020 --> 00:16:56,570
and so Django is a big framework and one

00:16:55,190 --> 00:16:58,130
of the things I'm most proud of and a

00:16:56,570 --> 00:17:00,680
lot of Django doesn't most proud of is

00:16:58,130 --> 00:17:03,920
we are very back compatible we have been

00:17:00,680 --> 00:17:07,160
mad backs pedal pretty much forever some

00:17:03,920 --> 00:17:10,250
code from Django 1.0 will still run

00:17:07,160 --> 00:17:13,490
correctly on Django 2 and even Django 3

00:17:10,250 --> 00:17:14,870
a lot has changed but it's mostly say

00:17:13,490 --> 00:17:17,120
the same and if you sit there look at

00:17:14,870 --> 00:17:18,860
the change notes you gently under sounds

00:17:17,120 --> 00:17:20,930
happening nothing's hugely change in

00:17:18,860 --> 00:17:24,350
many years and especially within our

00:17:20,930 --> 00:17:25,640
three year LCS cycle you can rely on the

00:17:24,350 --> 00:17:27,050
fact that that's going to keep doing the

00:17:25,640 --> 00:17:30,440
same thing that's keep going to be there

00:17:27,050 --> 00:17:32,990
so we can't just take Django and throw

00:17:30,440 --> 00:17:34,310
it out and have a new one we also don't

00:17:32,990 --> 00:17:35,870
have enough maintain is to have two

00:17:34,310 --> 00:17:37,460
different versions of Django at once

00:17:35,870 --> 00:17:41,900
that's just not feasible as a huge

00:17:37,460 --> 00:17:43,910
project but as I said before a function

00:17:41,900 --> 00:17:44,780
can't be both sync and async they're

00:17:43,910 --> 00:17:46,820
different types

00:17:44,780 --> 00:17:49,639
if I give you a function that's saying

00:17:46,820 --> 00:17:51,590
Kronus I can't give you a same function

00:17:49,639 --> 00:17:55,429
in the same place that's asynchronous

00:17:51,590 --> 00:17:58,090
for example if I have a cash framework

00:17:55,429 --> 00:18:01,090
where cash don't get is synchronous I

00:17:58,090 --> 00:18:03,799
cannot make the second line here work

00:18:01,090 --> 00:18:06,320
Python does not provide enough low-level

00:18:03,799 --> 00:18:09,250
overrides or double underscore methods

00:18:06,320 --> 00:18:11,809
to let me intercept the fact that it's a

00:18:09,250 --> 00:18:14,090
asynchronous function so I have to

00:18:11,809 --> 00:18:16,519
choose either it's a KO routine or it's

00:18:14,090 --> 00:18:19,370
not so what this means is as a framework

00:18:16,519 --> 00:18:21,740
we're kind of stuck we can't change or

00:18:19,370 --> 00:18:24,049
certain functions compatibility reasons

00:18:21,740 --> 00:18:25,519
but ones offer new ones they have

00:18:24,049 --> 00:18:28,970
different names that we very familiar

00:18:25,519 --> 00:18:30,620
the only different adding to this is the

00:18:28,970 --> 00:18:33,799
fact that this problem persists in all

00:18:30,620 --> 00:18:35,690
of Python the libraries for this stuff

00:18:33,799 --> 00:18:37,730
is different if I want to go and talk to

00:18:35,690 --> 00:18:39,919
post grows from an asynchronous land

00:18:37,730 --> 00:18:41,779
it's a totally different post res

00:18:39,919 --> 00:18:44,210
binding to talking it from a synchronous

00:18:41,779 --> 00:18:46,100
language is psycho PD - it's different

00:18:44,210 --> 00:18:48,169
teams there's different standards

00:18:46,100 --> 00:18:51,049
there's not even a proper standard for

00:18:48,169 --> 00:18:53,090
database bindings in an async LAN like

00:18:51,049 --> 00:18:55,639
we have with db-api - in synchronous

00:18:53,090 --> 00:18:57,049
land even sleep is different like you

00:18:55,639 --> 00:18:59,840
can't even have this be the same have

00:18:57,049 --> 00:19:01,820
any different modules and so it's just

00:18:59,840 --> 00:19:04,519
really hard to operate in this space and

00:19:01,820 --> 00:19:05,029
how to maintain these two whole separate

00:19:04,519 --> 00:19:06,710
stacks

00:19:05,029 --> 00:19:09,860
well you quickly get to is the fact that

00:19:06,710 --> 00:19:12,649
well we want to offer an async and

00:19:09,860 --> 00:19:14,809
synchronous interface but the underlying

00:19:12,649 --> 00:19:16,070
code has to be one thing we don't have

00:19:14,809 --> 00:19:18,019
one set of libraries one sort of

00:19:16,070 --> 00:19:20,419
fundamental ways of working people that

00:19:18,019 --> 00:19:22,639
has to understand one basic Django and

00:19:20,419 --> 00:19:25,039
so our job is gonna have to be we have

00:19:22,639 --> 00:19:26,600
one core Django and present two

00:19:25,039 --> 00:19:27,409
different interfaces on top of it in a

00:19:26,600 --> 00:19:29,179
way that works

00:19:27,409 --> 00:19:33,129
the other problem here as I mentioned

00:19:29,179 --> 00:19:36,289
with DBA - is the lack of standards

00:19:33,129 --> 00:19:39,500
there is a problem here

00:19:36,289 --> 00:19:41,570
database is one of them whisky is maybe

00:19:39,500 --> 00:19:44,539
the biggest problem if you're not

00:19:41,570 --> 00:19:47,750
familiar WSGI whisky often called is the

00:19:44,539 --> 00:19:50,029
way that web applications in Python run

00:19:47,750 --> 00:19:51,889
web web servers it's basically you give

00:19:50,029 --> 00:19:54,860
a callable it takes a request like thing

00:19:51,889 --> 00:19:58,399
returns a response it was invented after

00:19:54,860 --> 00:20:00,540
Django was we'll see later and it's kind

00:19:58,399 --> 00:20:02,910
of hard to do anything a max like its

00:20:00,540 --> 00:20:04,620
asynchronous and you can't easily back

00:20:02,910 --> 00:20:06,420
port asynchronous stuff on to it's not

00:20:04,620 --> 00:20:08,280
possible and so like we have an

00:20:06,420 --> 00:20:09,840
alternative for that which is something

00:20:08,280 --> 00:20:11,760
that I and the channels product of

00:20:09,840 --> 00:20:14,820
Django have been doing it's called a SGI

00:20:11,760 --> 00:20:18,720
I know very inventive right and it is

00:20:14,820 --> 00:20:21,330
basically an asynchronous sibling to

00:20:18,720 --> 00:20:22,800
whisky it looks very similar but have a

00:20:21,330 --> 00:20:24,330
few more things to it rather than having

00:20:22,800 --> 00:20:26,100
the thing where you receive a single

00:20:24,330 --> 00:20:28,080
piece information and send it back you

00:20:26,100 --> 00:20:29,580
get send and receive a weighted balls

00:20:28,080 --> 00:20:31,410
that you can say oh I want to like

00:20:29,580 --> 00:20:33,060
receive a bit of data and send it back

00:20:31,410 --> 00:20:34,710
and receive some more because if you do

00:20:33,060 --> 00:20:37,230
anything like WebSocket it's not request

00:20:34,710 --> 00:20:39,600
response a socket is it opens up you get

00:20:37,230 --> 00:20:41,670
some stuff in some stuff out in out just

00:20:39,600 --> 00:20:42,680
goes all over the place and so you can't

00:20:41,670 --> 00:20:45,810
have that simple in-and-out

00:20:42,680 --> 00:20:47,280
request response model anymore and

00:20:45,810 --> 00:20:49,530
that's one of the many things but it's

00:20:47,280 --> 00:20:51,030
still developing like databases and cash

00:20:49,530 --> 00:20:53,250
back hands is the libraries in general

00:20:51,030 --> 00:20:54,630
still slightly immature and they have

00:20:53,250 --> 00:20:56,340
become to the point where django is now

00:20:54,630 --> 00:20:57,660
in the place to start using them but

00:20:56,340 --> 00:20:59,550
it's still a little bit like it was in

00:20:57,660 --> 00:21:01,140
sort of the early 2000s where things

00:20:59,550 --> 00:21:02,370
haven't quite finished maturing yet

00:21:01,140 --> 00:21:05,940
we're gonna be careful what we do and

00:21:02,370 --> 00:21:07,980
what we pick the other thing is not

00:21:05,940 --> 00:21:11,070
everything in Python is async compatible

00:21:07,980 --> 00:21:13,530
some language features just don't have

00:21:11,070 --> 00:21:15,120
equivalents in async land a lot of this

00:21:13,530 --> 00:21:18,000
things like operator overrides if you

00:21:15,120 --> 00:21:19,230
want to override the and operator has to

00:21:18,000 --> 00:21:21,060
be synchronous you don't have an async

00:21:19,230 --> 00:21:22,710
version of that or my favorite one I

00:21:21,060 --> 00:21:25,290
mentioned earlier if you've got a model

00:21:22,710 --> 00:21:28,050
instance there is no async version of

00:21:25,290 --> 00:21:30,210
actual access if you do foreign key dot

00:21:28,050 --> 00:21:32,280
name on something it's gonna be called

00:21:30,210 --> 00:21:34,080
synchronously there is no way to get

00:21:32,280 --> 00:21:37,350
async context of damage that function

00:21:34,080 --> 00:21:39,030
trust me I've tried and so this means

00:21:37,350 --> 00:21:40,560
that you actually have to change these

00:21:39,030 --> 00:21:42,630
things Django is done for years like

00:21:40,560 --> 00:21:45,840
implicit access and Acuras they just

00:21:42,630 --> 00:21:49,610
don't work anymore and even more

00:21:45,840 --> 00:21:51,660
annoyingly threads turn to really matter

00:21:49,610 --> 00:21:53,490
question for the room how many of you

00:21:51,660 --> 00:21:56,040
here have used sequel light at least

00:21:53,490 --> 00:21:56,970
once in your use of Django I think

00:21:56,040 --> 00:21:59,460
that's one hundred percent of the room

00:21:56,970 --> 00:22:01,050
for their hands up at that point so the

00:21:59,460 --> 00:22:03,540
fun thing that the sequel light is it's

00:22:01,050 --> 00:22:05,910
very thread sensitive it wants to always

00:22:03,540 --> 00:22:07,770
run in the same thread you made as you

00:22:05,910 --> 00:22:09,690
may recall I showed your diagram earlier

00:22:07,770 --> 00:22:11,370
where oh yes we just making new threads

00:22:09,690 --> 00:22:12,480
for everything you can't actually do

00:22:11,370 --> 00:22:14,040
that it doesn't work

00:22:12,480 --> 00:22:15,630
sequel light goes this is not

00:22:14,040 --> 00:22:18,210
I was in just quit sound Jerez straight

00:22:15,630 --> 00:22:20,070
away so you actually have to do is we

00:22:18,210 --> 00:22:22,410
know you have synchronous code you to

00:22:20,070 --> 00:22:25,410
take your synchronous code and Gudrun it

00:22:22,410 --> 00:22:27,630
in one special synchronous thread where

00:22:25,410 --> 00:22:29,280
everything else runs away from your

00:22:27,630 --> 00:22:31,530
asynchronous thread rather than just

00:22:29,280 --> 00:22:32,850
using a nice thread pool executive so

00:22:31,530 --> 00:22:34,290
the thing I showed you before doesn't

00:22:32,850 --> 00:22:37,530
actually work I'm sorry about that but

00:22:34,290 --> 00:22:40,020
the real ones coming you know

00:22:37,530 --> 00:22:42,240
simplicity so the key thing here is

00:22:40,020 --> 00:22:45,180
we've got three main things on Jana to

00:22:42,240 --> 00:22:47,760
do first of all async has to add we're

00:22:45,180 --> 00:22:50,070
not converting Jango to be async we're

00:22:47,760 --> 00:22:51,510
adding support for it as I said you

00:22:50,070 --> 00:22:53,880
probably don't want to write most of

00:22:51,510 --> 00:22:56,160
your site in asynchronous code it's for

00:22:53,880 --> 00:22:57,540
things like specific functions or

00:22:56,160 --> 00:22:59,760
messaging or certain things that we

00:22:57,540 --> 00:23:00,930
really benefit from the way it works but

00:22:59,760 --> 00:23:02,190
it's a lot harder to think about so that

00:23:00,930 --> 00:23:04,410
shouldn't be everything by default and

00:23:02,190 --> 00:23:06,150
so we have to make sure that synchronous

00:23:04,410 --> 00:23:07,830
Django is still there it's still the

00:23:06,150 --> 00:23:10,590
default and it's still as accessible as

00:23:07,830 --> 00:23:12,990
ever I'm talking about accessible things

00:23:10,590 --> 00:23:15,630
have to look familiar if we have a

00:23:12,990 --> 00:23:17,460
different async API it's no good if it

00:23:15,630 --> 00:23:19,710
looks totally different it should still

00:23:17,460 --> 00:23:21,900
feel like Django so how do you make a

00:23:19,710 --> 00:23:24,240
thing look like adheres to async

00:23:21,900 --> 00:23:27,000
principles but still feels like Django

00:23:24,240 --> 00:23:27,510
underneath and finally they have to be

00:23:27,000 --> 00:23:30,270
safe

00:23:27,510 --> 00:23:32,010
Django prides itself on not giving you a

00:23:30,270 --> 00:23:33,870
loaded weapon and pointing it to your

00:23:32,010 --> 00:23:35,700
feet like everything Django gives you is

00:23:33,870 --> 00:23:37,800
safe by default we don't want to start

00:23:35,700 --> 00:23:39,390
handing you acing frameworks where if

00:23:37,800 --> 00:23:41,190
you look the wrong way it deadlocks and

00:23:39,390 --> 00:23:43,260
locks your server up and so how do you

00:23:41,190 --> 00:23:45,390
make all these things into a useful

00:23:43,260 --> 00:23:47,100
product it's like you you can take a

00:23:45,390 --> 00:23:48,900
simple thing you can sit down with

00:23:47,100 --> 00:23:51,840
Django on your first day of development

00:23:48,900 --> 00:23:54,270
async bash out a function it runs well

00:23:51,840 --> 00:23:56,520
and if you screwed up like I always do

00:23:54,270 --> 00:23:58,020
it errors properly cache at the error

00:23:56,520 --> 00:23:59,490
and tells you what's wrong isn't lock it

00:23:58,020 --> 00:24:03,630
up it doesn't deadlock it doesn't live

00:23:59,490 --> 00:24:06,230
lock and that's really the issue here so

00:24:03,630 --> 00:24:08,940
now you had an overview of the sort of

00:24:06,230 --> 00:24:11,250
problem scope that's being presented to

00:24:08,940 --> 00:24:13,680
Django let's get a bit more in depth

00:24:11,250 --> 00:24:15,540
into Django I will warn you there are

00:24:13,680 --> 00:24:18,630
many flowcharts here I love flowcharts

00:24:15,540 --> 00:24:20,220
here is one of them so this is a very

00:24:18,630 --> 00:24:21,840
simplified view of what Django looks

00:24:20,220 --> 00:24:24,030
like internally I'll walk you through it

00:24:21,840 --> 00:24:27,120
slightly so Django essentially lives

00:24:24,030 --> 00:24:27,870
underneath a WSGI server in the old

00:24:27,120 --> 00:24:30,360
world

00:24:27,870 --> 00:24:32,190
that server is given an object which is

00:24:30,360 --> 00:24:34,289
the application in Django that's the

00:24:32,190 --> 00:24:36,210
thing called the handler the handler is

00:24:34,289 --> 00:24:38,010
responsible for turning what the server

00:24:36,210 --> 00:24:40,260
talks which is the sort of whiskey or

00:24:38,010 --> 00:24:42,360
ASCII a low-level protocol in two more

00:24:40,260 --> 00:24:43,980
Django ish things it does things like it

00:24:42,360 --> 00:24:45,600
takes those things it makes them into

00:24:43,980 --> 00:24:47,330
request objects and response objects it

00:24:45,600 --> 00:24:49,320
makes them look nice it does URL routing

00:24:47,330 --> 00:24:51,659
and the handler basing it takes this

00:24:49,320 --> 00:24:54,029
request it runs it through all the

00:24:51,659 --> 00:24:56,010
middleware it then runs it through the

00:24:54,029 --> 00:24:58,470
URL router finds the View for it and

00:24:56,010 --> 00:25:01,020
then it takes that and hands it after

00:24:58,470 --> 00:25:03,299
the view the view which as I'm sure

00:25:01,020 --> 00:25:05,429
you're all familiar then can do whatever

00:25:03,299 --> 00:25:07,590
it likes basically it can cool forms can

00:25:05,429 --> 00:25:09,899
go templates in cool database it returns

00:25:07,590 --> 00:25:12,000
a response that response goes back

00:25:09,899 --> 00:25:14,159
through the handler which returns

00:25:12,000 --> 00:25:17,429
converts it back into the low-level

00:25:14,159 --> 00:25:19,289
Python protocol that is gr whi expects

00:25:17,429 --> 00:25:22,830
and then the server handle sending it on

00:25:19,289 --> 00:25:25,529
to the wire now what's interesting about

00:25:22,830 --> 00:25:27,210
async in favor I described before is we

00:25:25,529 --> 00:25:29,909
don't want to have two versions of

00:25:27,210 --> 00:25:32,850
Django at once we want to have any given

00:25:29,909 --> 00:25:36,059
time only one version of an any given

00:25:32,850 --> 00:25:37,440
part of this tree and so my approach

00:25:36,059 --> 00:25:39,570
here is what's called the outside in

00:25:37,440 --> 00:25:43,200
approach it turns out the easy thing to

00:25:39,570 --> 00:25:45,809
do is to have synchronous code inside

00:25:43,200 --> 00:25:48,029
called from an asynchronous outside so

00:25:45,809 --> 00:25:49,830
in particular we know we are not getting

00:25:48,029 --> 00:25:51,179
rid of synchronous views synchronous

00:25:49,830 --> 00:25:52,260
views are the cornerstone of Django

00:25:51,179 --> 00:25:54,750
everything is written in them they're

00:25:52,260 --> 00:25:57,539
very important given that we know well

00:25:54,750 --> 00:25:59,159
if we have an asynchronous HTTP handling

00:25:57,539 --> 00:26:01,559
layer he has to call that synchronous

00:25:59,159 --> 00:26:04,770
view and so the idea here is to split

00:26:01,559 --> 00:26:07,020
that diagram up into different portions

00:26:04,770 --> 00:26:09,750
we can make async capable from the

00:26:07,020 --> 00:26:11,220
outside in I have been very project

00:26:09,750 --> 00:26:13,289
manager about this called an phases it's

00:26:11,220 --> 00:26:14,399
very exciting I get a JIRA board out

00:26:13,289 --> 00:26:17,010
later and do something as you're

00:26:14,399 --> 00:26:19,770
planning but essentially there's three

00:26:17,010 --> 00:26:23,159
phases the first phase is making Django

00:26:19,770 --> 00:26:26,510
able to talk to a SGI that is async

00:26:23,159 --> 00:26:28,710
capable web servers the second phase is

00:26:26,510 --> 00:26:31,260
having it handle this middle section of

00:26:28,710 --> 00:26:33,210
like middleware and views in HTTP and

00:26:31,260 --> 00:26:36,600
like request objects and the last

00:26:33,210 --> 00:26:39,270
section is the ORM and these are the

00:26:36,600 --> 00:26:40,710
three basic difficult parts of Django

00:26:39,270 --> 00:26:41,330
there are many more things we can do at

00:26:40,710 --> 00:26:43,370
caching

00:26:41,330 --> 00:26:46,040
templates and forms and the admin this

00:26:43,370 --> 00:26:48,650
all could be taken on but in terms of

00:26:46,040 --> 00:26:50,180
the best value for the effort put in

00:26:48,650 --> 00:26:52,340
these are the three places where it

00:26:50,180 --> 00:26:54,650
makes the most sense you have to have a

00:26:52,340 --> 00:26:56,450
SGI support to anything at all you have

00:26:54,650 --> 00:26:58,580
to face infused to call async code from

00:26:56,450 --> 00:27:00,950
and a number one theme people spend time

00:26:58,580 --> 00:27:03,020
in waiting and Django is databases so

00:27:00,950 --> 00:27:04,720
the RO makes sense is the first thing to

00:27:03,020 --> 00:27:06,590
go and attack bunch of your async views

00:27:04,720 --> 00:27:08,540
and we can even think about rough

00:27:06,590 --> 00:27:11,060
timelines for these things because in

00:27:08,540 --> 00:27:13,100
fact the first ones already committed we

00:27:11,060 --> 00:27:15,440
landed the ACE the ASG I support in

00:27:13,100 --> 00:27:17,480
Django a month or so ago it's in there

00:27:15,440 --> 00:27:20,600
it's done it'll be in Django 3 it's very

00:27:17,480 --> 00:27:23,600
exciting of course by itself that's not

00:27:20,600 --> 00:27:25,580
totally useful you can run a certain

00:27:23,600 --> 00:27:28,550
acing server but you can't write async

00:27:25,580 --> 00:27:30,680
views phase 2 which is having a sync

00:27:28,550 --> 00:27:34,070
views is in progress I have a patch

00:27:30,680 --> 00:27:35,840
which totally runs acing views it works

00:27:34,070 --> 00:27:38,090
which astonishes me every time I run it

00:27:35,840 --> 00:27:39,500
and it's very exciting you can go see it

00:27:38,090 --> 00:27:40,870
if you like I'll show you a link at the

00:27:39,500 --> 00:27:46,640
end of the talk I'm like on my Twitter

00:27:40,870 --> 00:27:48,290
it doesn't pass all the tests yeah but

00:27:46,640 --> 00:27:50,870
it does pass over 90% of them which

00:27:48,290 --> 00:27:52,910
argue is very good for a week or twos

00:27:50,870 --> 00:27:55,430
work and that's the current focus is

00:27:52,910 --> 00:27:58,340
like how do we get async views polished

00:27:55,430 --> 00:27:59,770
off and safe and ready to go my soft

00:27:58,340 --> 00:28:02,480
goal for that is Django throughput 1

00:27:59,770 --> 00:28:04,850
there is a chance it could be january

00:28:02,480 --> 00:28:06,830
point 0 if we really push in let's month

00:28:04,850 --> 00:28:08,690
or so the feature freeze is coming up

00:28:06,830 --> 00:28:11,960
but I'm not gonna hold myself to that

00:28:08,690 --> 00:28:13,160
but I that is for me the big point where

00:28:11,960 --> 00:28:16,370
once you have asynchronous views

00:28:13,160 --> 00:28:18,110
everything else unlocks IOM is the

00:28:16,370 --> 00:28:19,760
obvious next step but you can have a

00:28:18,110 --> 00:28:21,800
team working on the cache one on

00:28:19,760 --> 00:28:24,080
templates one of the ORM and there's all

00:28:21,800 --> 00:28:25,640
these separate projects once you can run

00:28:24,080 --> 00:28:27,890
asynchronous code in Django nessa

00:28:25,640 --> 00:28:30,200
synchronous code and it's native and it

00:28:27,890 --> 00:28:31,220
works well you've unlocked a lot of

00:28:30,200 --> 00:28:33,560
different things you can do it once

00:28:31,220 --> 00:28:35,990
maybe even if you stop there you've got

00:28:33,560 --> 00:28:38,390
value right you added a significant

00:28:35,990 --> 00:28:39,920
value to what you have already and

00:28:38,390 --> 00:28:41,480
that's kind of wise in this phasing

00:28:39,920 --> 00:28:43,610
thing one of the things I've learned

00:28:41,480 --> 00:28:45,590
both with open source and in the

00:28:43,610 --> 00:28:46,400
corporate world over the years is the

00:28:45,590 --> 00:28:49,130
project's

00:28:46,400 --> 00:28:51,020
have to have safety nets for some reason

00:28:49,130 --> 00:28:53,240
or another they get cancelled or someone

00:28:51,020 --> 00:28:54,509
burns out or things happen to cause them

00:28:53,240 --> 00:28:56,699
to stop or pause in the middle

00:28:54,509 --> 00:28:58,529
and this project is designed around that

00:28:56,699 --> 00:29:00,299
that I would never at this point design

00:28:58,529 --> 00:29:02,459
a big project that couldn't be resilient

00:29:00,299 --> 00:29:05,159
to fail you in the middle even if we

00:29:02,459 --> 00:29:07,079
stop now today there is usefulness in

00:29:05,159 --> 00:29:08,789
the first phase if we stop athlete

00:29:07,079 --> 00:29:10,619
allowing the async views that is

00:29:08,789 --> 00:29:13,079
honestly incredibly big step even by

00:29:10,619 --> 00:29:15,029
itself if we only get part of the arrow

00:29:13,079 --> 00:29:16,739
and converted that itself is useful as

00:29:15,029 --> 00:29:18,989
well and so it's important to realize

00:29:16,739 --> 00:29:20,849
that each of these things by itself is

00:29:18,989 --> 00:29:22,229
really important so I'm going to dive

00:29:20,849 --> 00:29:23,609
into each of those three areas and show

00:29:22,229 --> 00:29:25,919
you what it looks like inside of them

00:29:23,609 --> 00:29:28,049
and give you a sort of a deep breakdown

00:29:25,919 --> 00:29:30,690
- like how Django works and we had to do

00:29:28,049 --> 00:29:33,269
to make it a sink compatible so the

00:29:30,690 --> 00:29:38,399
first phase is a SGI now as I said

00:29:33,269 --> 00:29:43,440
before Django actually predates WSGI

00:29:38,399 --> 00:29:45,779
when I first started doing Python in I'm

00:29:43,440 --> 00:29:48,569
gonna say 2005 and I'm not totally sure

00:29:45,779 --> 00:29:50,519
about that it was a while ago I actually

00:29:48,569 --> 00:29:52,349
use turbo gears at first which is a very

00:29:50,519 --> 00:29:54,449
old framework because in the days before

00:29:52,349 --> 00:29:57,029
like there wasn't a standard the Python

00:29:54,449 --> 00:29:59,309
web servers turbo gears only worked with

00:29:57,029 --> 00:30:01,079
cherry pie that was its web server it

00:29:59,309 --> 00:30:02,609
worked with Django only worked with a

00:30:01,079 --> 00:30:06,149
couple of servers world had specific

00:30:02,609 --> 00:30:06,869
support for and obviously this was not a

00:30:06,149 --> 00:30:08,519
great situation

00:30:06,869 --> 00:30:10,469
it's nice field to swap servers and

00:30:08,519 --> 00:30:13,949
happy team is working separately and so

00:30:10,469 --> 00:30:16,079
the Python web community invented WSGI a

00:30:13,949 --> 00:30:19,499
standard to communicate between

00:30:16,079 --> 00:30:23,119
different things the team at that point

00:30:19,499 --> 00:30:25,859
had a very lofty set of goals that say

00:30:23,119 --> 00:30:27,719
WSGI was seen as the panacea the

00:30:25,859 --> 00:30:29,729
cure-all for everything would be wrong

00:30:27,719 --> 00:30:32,759
with a Python web ecosystem in

00:30:29,729 --> 00:30:34,979
particular there was WSGI middleware

00:30:32,759 --> 00:30:36,690
which to show how like like everything

00:30:34,979 --> 00:30:39,599
you see in Django today would there was

00:30:36,690 --> 00:30:42,089
also meant to being a native WSGI

00:30:39,599 --> 00:30:44,190
version of this cause quite a few Rory

00:30:42,089 --> 00:30:46,679
this is the time when Django is most

00:30:44,190 --> 00:30:48,719
accused of being separatist and being

00:30:46,679 --> 00:30:50,489
sort of like oh Django is their own

00:30:48,719 --> 00:30:52,589
thing they don't work with the rest of

00:30:50,489 --> 00:30:54,509
Python is there special there's a great

00:30:52,589 --> 00:30:57,779
blog post from James Bennett which is

00:30:54,509 --> 00:31:01,859
from 2006 which has this amazing quote

00:30:57,779 --> 00:31:03,479
which is in sarcasm of course just so

00:31:01,859 --> 00:31:04,769
you know Django is a smug arrogant

00:31:03,479 --> 00:31:06,839
framework that doesn't play nice with

00:31:04,769 --> 00:31:07,919
others but of course that's the

00:31:06,839 --> 00:31:08,400
impression you get from reading the

00:31:07,919 --> 00:31:10,620
rounds

00:31:08,400 --> 00:31:12,390
and it's a wonderful piece of history if

00:31:10,620 --> 00:31:14,280
you ever read the article it's called

00:31:12,390 --> 00:31:17,070
Django and NIH you can find it easily

00:31:14,280 --> 00:31:18,780
through searching it's a great snapshot

00:31:17,070 --> 00:31:21,000
into that period of history where Django

00:31:18,780 --> 00:31:23,250
is still forming where put the Python

00:31:21,000 --> 00:31:25,410
the community so I'm really formed

00:31:23,250 --> 00:31:28,380
entirely by whisky was still a thing and

00:31:25,410 --> 00:31:30,630
in particular it was very controversial

00:31:28,380 --> 00:31:32,250
at jangan had its own middleware because

00:31:30,630 --> 00:31:34,500
the whole vision was that you'd have

00:31:32,250 --> 00:31:36,570
this wonderful thing a concept that I

00:31:34,500 --> 00:31:38,250
call Turtles all the way down which is

00:31:36,570 --> 00:31:40,230
that you have an application which is an

00:31:38,250 --> 00:31:41,550
object and you can wrap middleware

00:31:40,230 --> 00:31:42,990
around it which is a thing that takes an

00:31:41,550 --> 00:31:44,610
application and returns an application

00:31:42,990 --> 00:31:46,680
so if you've got like authentication

00:31:44,610 --> 00:31:48,210
middleware that's the whiskey middleware

00:31:46,680 --> 00:31:49,770
you pass it a whiskey app it returns

00:31:48,210 --> 00:31:51,930
your whiskey app you do the same of

00:31:49,770 --> 00:31:54,630
compression you do the same for encoding

00:31:51,930 --> 00:31:56,460
and so on and this vision that was had

00:31:54,630 --> 00:31:59,070
back then I kind of signed up for all

00:31:56,460 --> 00:32:02,040
the time was this beautiful stack of

00:31:59,070 --> 00:32:04,230
interoperable code everyone loved and it

00:32:02,040 --> 00:32:06,600
didn't quite work out as you see from

00:32:04,230 --> 00:32:09,450
today one of the reasons for this is

00:32:06,600 --> 00:32:11,610
that WSGI never really solved the

00:32:09,450 --> 00:32:13,500
request response objects model you see

00:32:11,610 --> 00:32:15,390
now like django and flask and other

00:32:13,500 --> 00:32:16,790
frameworks they all have requests and

00:32:15,390 --> 00:32:19,890
response objects in one form or another

00:32:16,790 --> 00:32:22,380
because it's way easier WSGI gives you a

00:32:19,890 --> 00:32:23,790
dictionary says have fun and the

00:32:22,380 --> 00:32:26,040
dictionary by the way does not

00:32:23,790 --> 00:32:28,410
distinguish between bytes and strings

00:32:26,040 --> 00:32:30,180
which is fun that went well

00:32:28,410 --> 00:32:32,030
thankfully I got figs eventually but boy

00:32:30,180 --> 00:32:34,620
was that annoyed or awkward for a time

00:32:32,030 --> 00:32:37,050
so Django because of its heritage

00:32:34,620 --> 00:32:38,940
because the place in history has a

00:32:37,050 --> 00:32:41,790
different approach to whiskey even other

00:32:38,940 --> 00:32:43,800
frameworks so for example flask which is

00:32:41,790 --> 00:32:45,660
a great framework it's built heavily

00:32:43,800 --> 00:32:48,360
around a thing called werkes org werkes

00:32:45,660 --> 00:32:50,100
org is a whisky native library it's very

00:32:48,360 --> 00:32:52,200
heavily tied to whisky

00:32:50,100 --> 00:32:54,690
I've talked the flower stems about a

00:32:52,200 --> 00:32:55,920
sink and what they can do and they're

00:32:54,690 --> 00:32:57,810
interested but the problem is they are

00:32:55,920 --> 00:32:59,490
so heavily tied to the whisky

00:32:57,810 --> 00:33:01,290
abstraction they have to unpick that

00:32:59,490 --> 00:33:05,520
first of all they can go any further in

00:33:01,290 --> 00:33:08,040
some ways Django's lateness or illness

00:33:05,520 --> 00:33:10,260
to the party helps out because Django

00:33:08,040 --> 00:33:13,530
predates whisky we have that abstraction

00:33:10,260 --> 00:33:15,180
already I don't know why because before

00:33:13,530 --> 00:33:16,920
I went in here there was only one thing

00:33:15,180 --> 00:33:18,390
in the abstraction it was like well we

00:33:16,920 --> 00:33:20,330
have a wonderful attraction layer

00:33:18,390 --> 00:33:23,240
between the one thing and the one

00:33:20,330 --> 00:33:25,399
thing hmm but it's always been in there

00:33:23,240 --> 00:33:26,600
and so the nice thing is we can take

00:33:25,399 --> 00:33:28,159
that or we can actually say oh we

00:33:26,600 --> 00:33:32,120
actually finally use this for a second

00:33:28,159 --> 00:33:33,679
thing it's very exciting and of course

00:33:32,120 --> 00:33:34,730
middleware as well like we have custom

00:33:33,679 --> 00:33:37,039
middleware that's a whole big thing I

00:33:34,730 --> 00:33:42,679
come on - but here's roughly how the

00:33:37,039 --> 00:33:45,289
request plate works so as you can see as

00:33:42,679 --> 00:33:48,080
a couple of portions the whiskey server

00:33:45,289 --> 00:33:49,789
itself is not part of Django something

00:33:48,080 --> 00:33:52,760
like J unicorn or maybe one of one

00:33:49,789 --> 00:33:55,789
bundled with Python it handles things

00:33:52,760 --> 00:33:58,669
like low-level HTTP socket handling

00:33:55,789 --> 00:34:00,980
transfer encoding all the annoying

00:33:58,669 --> 00:34:02,269
network e stuff that I really enjoy that

00:34:00,980 --> 00:34:03,919
the network people do

00:34:02,269 --> 00:34:06,980
I don't have to do very much it's nice

00:34:03,919 --> 00:34:08,570
to have it that way then the first point

00:34:06,980 --> 00:34:10,399
the first part you hit in Django is

00:34:08,570 --> 00:34:12,320
thing called whiskey handler whiskey

00:34:10,399 --> 00:34:14,149
handler is the whiskey application

00:34:12,320 --> 00:34:16,159
Johnny presents it's basically a thing

00:34:14,149 --> 00:34:17,690
that takes the whisky dictionary there's

00:34:16,159 --> 00:34:19,520
I think we'll Enver on it's full of

00:34:17,690 --> 00:34:21,440
exciting variables with weird names in

00:34:19,520 --> 00:34:21,980
them and it maps that to a request

00:34:21,440 --> 00:34:24,020
object

00:34:21,980 --> 00:34:26,419
it also takes things like the input

00:34:24,020 --> 00:34:28,099
stream and turns it into a files object

00:34:26,419 --> 00:34:29,210
it takes things like the posts and get

00:34:28,099 --> 00:34:31,909
dictionaries and makes many dictionaries

00:34:29,210 --> 00:34:33,290
rather than just big bundles of bytes it

00:34:31,909 --> 00:34:34,669
does all that handling for you is

00:34:33,290 --> 00:34:37,369
actually once you've come through wizzy

00:34:34,669 --> 00:34:38,419
handler you have a request object you

00:34:37,369 --> 00:34:40,700
have a rough idea of what you're doing

00:34:38,419 --> 00:34:43,790
and you are ready to go and start

00:34:40,700 --> 00:34:45,500
finding a view the handler hands off to

00:34:43,790 --> 00:34:47,450
a thing called base handler so this is

00:34:45,500 --> 00:34:48,710
you see what the abstraction is and the

00:34:47,450 --> 00:34:50,960
base handler has a thing called get

00:34:48,710 --> 00:34:52,879
response get response is wonderful

00:34:50,960 --> 00:34:54,830
because kind of encapsulation of that

00:34:52,879 --> 00:34:56,990
turtles all the way down model get

00:34:54,830 --> 00:34:58,940
response takes a request and returns a

00:34:56,990 --> 00:35:00,980
response except that's how the whole

00:34:58,940 --> 00:35:02,720
framework works and so you give get

00:35:00,980 --> 00:35:05,150
response to requests and it then goes

00:35:02,720 --> 00:35:08,690
and runs it through your old router and

00:35:05,150 --> 00:35:09,830
goes okay - the path here's my view it

00:35:08,690 --> 00:35:12,920
then separately has loaded the

00:35:09,830 --> 00:35:14,930
middleware then takes the request and

00:35:12,920 --> 00:35:17,390
runs it through the middleware and

00:35:14,930 --> 00:35:19,760
finally once all that's done it takes

00:35:17,390 --> 00:35:21,920
the request and passes it to the view a

00:35:19,760 --> 00:35:23,900
few dozen whatever it wants to it

00:35:21,920 --> 00:35:25,520
returns a response that flows back

00:35:23,900 --> 00:35:26,869
through the base handler and maybe

00:35:25,520 --> 00:35:28,819
through some exception handling so for

00:35:26,869 --> 00:35:30,619
example if you screw up and raise an

00:35:28,819 --> 00:35:32,060
error in the view the thing that

00:35:30,619 --> 00:35:33,600
captures it and gives you a nice error

00:35:32,060 --> 00:35:35,400
page is in get response

00:35:33,600 --> 00:35:36,990
in bass handler and then flows back to

00:35:35,400 --> 00:35:40,380
your whiskey handler and then back into

00:35:36,990 --> 00:35:42,720
the whiskey server if somehow someone in

00:35:40,380 --> 00:35:44,130
Django High has screwed up the whiskey

00:35:42,720 --> 00:35:45,630
handler or another high level piece of

00:35:44,130 --> 00:35:47,310
code there is a thing in the whiskey

00:35:45,630 --> 00:35:49,620
server which casually catches exceptions

00:35:47,310 --> 00:35:52,710
as a last resort but it's really bad

00:35:49,620 --> 00:35:54,990
like if you see a plaintext traceback in

00:35:52,710 --> 00:35:56,610
Python that's the whiskey server caching

00:35:54,990 --> 00:35:59,160
the trace back it means something's

00:35:56,610 --> 00:36:00,420
really bad and certainly and so like you

00:35:59,160 --> 00:36:03,210
probably monkey patch the wrong thing so

00:36:00,420 --> 00:36:06,180
you see how I do it pretty much always

00:36:03,210 --> 00:36:07,530
and so you can see here like there is an

00:36:06,180 --> 00:36:09,420
abstraction layer in that middle arrow

00:36:07,530 --> 00:36:12,090
and so we can take this we can go well

00:36:09,420 --> 00:36:14,670
let's whack on a second level of stuff

00:36:12,090 --> 00:36:16,620
which is our SGI versions all this right

00:36:14,670 --> 00:36:19,110
so like okay we have an a SGI server

00:36:16,620 --> 00:36:21,360
which again handles networking and

00:36:19,110 --> 00:36:23,280
low-level stuff also does things like

00:36:21,360 --> 00:36:25,320
HTTP - and WebSockets it's a bit more

00:36:23,280 --> 00:36:27,780
advanced it's the future now and the a

00:36:25,320 --> 00:36:30,360
SGI handler again is a thing that

00:36:27,780 --> 00:36:32,910
presents an SGI application object which

00:36:30,360 --> 00:36:35,400
takes input events and sends them back

00:36:32,910 --> 00:36:37,560
again it has a separate request class

00:36:35,400 --> 00:36:39,630
because it turns out a lot of the logic

00:36:37,560 --> 00:36:41,250
that Maps things like headers and stuff

00:36:39,630 --> 00:36:43,350
to what you know and like

00:36:41,250 --> 00:36:45,210
Django's meta that's all done in the

00:36:43,350 --> 00:36:47,430
actual request class there's a separate

00:36:45,210 --> 00:36:49,230
request class for a SGI request they

00:36:47,430 --> 00:36:50,760
have a common base class and once you've

00:36:49,230 --> 00:36:52,770
done that you can then go use the same

00:36:50,760 --> 00:36:54,480
get response that's the point of

00:36:52,770 --> 00:36:57,450
commonality between the two of them and

00:36:54,480 --> 00:36:59,940
so we can have this second path on the

00:36:57,450 --> 00:37:03,030
bottom here and develop that but still

00:36:59,940 --> 00:37:04,590
keep most of jangers logic the same and

00:37:03,030 --> 00:37:06,090
what's nice is but I talked about

00:37:04,590 --> 00:37:08,580
outside-in we can work out well

00:37:06,090 --> 00:37:09,960
which part of this is asynchronous this

00:37:08,580 --> 00:37:12,420
part this is the part that's

00:37:09,960 --> 00:37:14,040
asynchronous the a SGI server obviously

00:37:12,420 --> 00:37:15,780
has to be so a Sikandar server we have

00:37:14,040 --> 00:37:17,850
to have that one by default and we can

00:37:15,780 --> 00:37:19,860
also write a fully ASIC native Handler

00:37:17,850 --> 00:37:21,810
and request object in terms of

00:37:19,860 --> 00:37:24,690
initializing the request not in terms of

00:37:21,810 --> 00:37:27,090
access and then at that point when the

00:37:24,690 --> 00:37:29,580
handler past's up to the base handler in

00:37:27,090 --> 00:37:31,950
phase one it turns from a secure to

00:37:29,580 --> 00:37:34,140
synchronous and django runs normally so

00:37:31,950 --> 00:37:35,670
is a little extra bit added but it's not

00:37:34,140 --> 00:37:38,370
a lot of big change and crucially I

00:37:35,670 --> 00:37:39,720
barely touched any of Django's Assisting

00:37:38,370 --> 00:37:42,330
internals while the patch landed

00:37:39,720 --> 00:37:46,050
relatively easily the other nice thing

00:37:42,330 --> 00:37:47,140
is a SGI is deliberately mostly WR

00:37:46,050 --> 00:37:49,750
compatible

00:37:47,140 --> 00:37:51,100
for large part there are direct mappings

00:37:49,750 --> 00:37:52,540
between teeth between the two of them

00:37:51,100 --> 00:37:54,430
there are some things that are being

00:37:52,540 --> 00:37:57,040
cleaned up it's much better about things

00:37:54,430 --> 00:37:59,110
like bites versus strings and encoding

00:37:57,040 --> 00:38:01,360
but for the large part you can take

00:37:59,110 --> 00:38:03,520
everything in WSGI and map it directly

00:38:01,360 --> 00:38:05,440
to a SGI or vice versa so for example

00:38:03,520 --> 00:38:08,200
all these things in Messer so like this

00:38:05,440 --> 00:38:09,490
is in the a SGI request object we want

00:38:08,200 --> 00:38:11,920
to still provide you things like remote

00:38:09,490 --> 00:38:14,080
and remote host that's what they're

00:38:11,920 --> 00:38:15,940
called in the environs extreme whisky

00:38:14,080 --> 00:38:17,440
they're not there in house key doesn't

00:38:15,940 --> 00:38:19,600
have an N and ron dictionary in the same

00:38:17,440 --> 00:38:21,040
way but if you want the remote address

00:38:19,600 --> 00:38:23,170
and port there's a thing called client

00:38:21,040 --> 00:38:25,540
is a tuple of address and port so we can

00:38:23,170 --> 00:38:27,610
just map in request that client tuple

00:38:25,540 --> 00:38:30,820
Batchelor variables you know and love to

00:38:27,610 --> 00:38:33,310
keep bass compatibility one of the fun

00:38:30,820 --> 00:38:35,950
things that are in a SGI is file uploads

00:38:33,310 --> 00:38:38,710
because of course ass hoes ASIC native

00:38:35,950 --> 00:38:41,410
we want file uploads and big posts to

00:38:38,710 --> 00:38:43,690
happen asynchronously so what geo

00:38:41,410 --> 00:38:45,550
servers do is they send you chunks of

00:38:43,690 --> 00:38:47,590
the file as events as they come in you

00:38:45,550 --> 00:38:50,520
better get a little stream of events the

00:38:47,590 --> 00:38:52,390
problem is we drew that line between

00:38:50,520 --> 00:38:55,210
synchronous and asynchronous and we

00:38:52,390 --> 00:38:56,980
can't service and handle those incoming

00:38:55,210 --> 00:38:59,980
async events if we're down in the

00:38:56,980 --> 00:39:01,840
synchronous part and so what we do you

00:38:59,980 --> 00:39:04,090
get you have to consume the entire file

00:39:01,840 --> 00:39:07,090
upfront at least in this version and

00:39:04,090 --> 00:39:09,760
take that file and put it into memory

00:39:07,090 --> 00:39:12,310
and so this is a very cut-down version

00:39:09,760 --> 00:39:14,140
of that code but it takes all those

00:39:12,310 --> 00:39:16,450
information puts into a sort of spool

00:39:14,140 --> 00:39:19,060
temporary file this is a Python built-in

00:39:16,450 --> 00:39:20,800
that starts in memory when it hits a

00:39:19,060 --> 00:39:23,260
limit it overflows to disk immediately

00:39:20,800 --> 00:39:25,630
it's very useful if you use it more and

00:39:23,260 --> 00:39:27,580
then as it takes the body builds up in

00:39:25,630 --> 00:39:29,170
the assembly file and what it's done it

00:39:27,580 --> 00:39:32,440
then hands off to the synchronous code

00:39:29,170 --> 00:39:34,180
this is also true in Reverse if you ever

00:39:32,440 --> 00:39:36,670
use low-level whiskey you'll know that

00:39:34,180 --> 00:39:37,960
you can yield and like yield chunks back

00:39:36,670 --> 00:39:40,720
to the user have like a streaming

00:39:37,960 --> 00:39:43,060
response that's kind of also true in a

00:39:40,720 --> 00:39:45,670
SGI it's it in this case what you do is

00:39:43,060 --> 00:39:47,230
you send those chances events HJ

00:39:45,670 --> 00:39:48,940
operating in a bi-directional event

00:39:47,230 --> 00:39:51,010
stream rather than a yield it needs to

00:39:48,940 --> 00:39:53,680
directional to directions and so again

00:39:51,010 --> 00:39:55,360
this request and response objects have

00:39:53,680 --> 00:39:57,250
to have the ability to look at okay if

00:39:55,360 --> 00:39:59,110
there's a streaming response we take

00:39:57,250 --> 00:40:00,610
those chunks and rather than yielding

00:39:59,110 --> 00:40:02,830
them we send them back

00:40:00,610 --> 00:40:05,320
as objects over our send method which is

00:40:02,830 --> 00:40:07,540
how a SGI does that but all in all it's

00:40:05,320 --> 00:40:11,560
similar like it's similar to whiskey you

00:40:07,540 --> 00:40:13,240
can understand it and that's kind of a

00:40:11,560 --> 00:40:17,200
nice way of encapsulating this except

00:40:13,240 --> 00:40:19,180
this this arrow is a huge problem if you

00:40:17,200 --> 00:40:21,640
recall this quote from me earlier in

00:40:19,180 --> 00:40:23,680
this presentation I told you that a sink

00:40:21,640 --> 00:40:26,170
a cooling sink which is what that arrow

00:40:23,680 --> 00:40:28,420
does there is very dangerous and it is

00:40:26,170 --> 00:40:29,260
and it loads of problems there's the

00:40:28,420 --> 00:40:31,000
threading problem

00:40:29,260 --> 00:40:33,400
there's keeping the thread locals around

00:40:31,000 --> 00:40:34,900
there's things like making sure that

00:40:33,400 --> 00:40:38,620
you're on plan overflowing catching

00:40:34,900 --> 00:40:41,080
exceptions properly and so I wrote a

00:40:38,620 --> 00:40:43,720
wrapper because that's what I do we have

00:40:41,080 --> 00:40:45,640
a thing called a SGI ref it is a

00:40:43,720 --> 00:40:47,500
generally useful library that powers a

00:40:45,640 --> 00:40:50,260
lot of this stuff in Django and it has a

00:40:47,500 --> 00:40:52,330
very important logical to sink in that's

00:40:50,260 --> 00:40:56,230
module there are two functions sink to a

00:40:52,330 --> 00:40:58,510
sink and a sink to sink they do a

00:40:56,230 --> 00:41:00,100
sailboat in one turn synchronous things

00:40:58,510 --> 00:41:03,460
and asynchronous things the other one

00:41:00,100 --> 00:41:04,990
turns them back this may seem relatively

00:41:03,460 --> 00:41:08,170
easy trust me it's not going me the

00:41:04,990 --> 00:41:09,850
module source it's very long it does a

00:41:08,170 --> 00:41:11,770
couple of key things first of all it

00:41:09,850 --> 00:41:13,150
correctly propagates exceptions if you

00:41:11,770 --> 00:41:15,400
do things in thread pools order them

00:41:13,150 --> 00:41:17,500
wrongly on different threads in either

00:41:15,400 --> 00:41:19,870
direction you can often end up losing

00:41:17,500 --> 00:41:21,940
exceptions and then the program just

00:41:19,870 --> 00:41:24,160
hangs you sit there and sit there just

00:41:21,940 --> 00:41:25,930
doesn't respond like did I get an

00:41:24,160 --> 00:41:27,970
exception and says that you did in

00:41:25,930 --> 00:41:29,710
another thread but you didn't collect it

00:41:27,970 --> 00:41:31,540
so the first thing these functions do is

00:41:29,710 --> 00:41:33,520
they make sure they catch exceptions and

00:41:31,540 --> 00:41:35,080
raise them in the other context so your

00:41:33,520 --> 00:41:36,790
async code raise an exception your

00:41:35,080 --> 00:41:39,730
synchronous code gets an exception and

00:41:36,790 --> 00:41:42,460
vice versa the second thing it does is

00:41:39,730 --> 00:41:44,770
thread locals now Jango has been very

00:41:42,460 --> 00:41:46,990
steadfast about not having a request

00:41:44,770 --> 00:41:48,580
thread local which means that users are

00:41:46,990 --> 00:41:52,000
very steadfast about adding it in later

00:41:48,580 --> 00:41:53,250
a lot of people and this this council

00:41:52,000 --> 00:41:56,290
worked to we have one of these at work

00:41:53,250 --> 00:41:57,670
have a request thread local you could

00:41:56,290 --> 00:41:59,470
just access anywhere like well I need to

00:41:57,670 --> 00:42:00,820
request inside my own focus of course

00:41:59,470 --> 00:42:03,580
have got a request thread local right

00:42:00,820 --> 00:42:05,080
and this is wonderful until you're not

00:42:03,580 --> 00:42:07,180
on the same thread anymore so the other

00:42:05,080 --> 00:42:09,610
thing this does is it has a thread local

00:42:07,180 --> 00:42:11,620
drop-in that correctly Maps things to

00:42:09,610 --> 00:42:13,090
and from async see if you've rights to a

00:42:11,620 --> 00:42:13,859
thread local in a synchronous function

00:42:13,090 --> 00:42:15,479
and then

00:42:13,859 --> 00:42:17,339
through an async function than through

00:42:15,479 --> 00:42:18,959
to sink one then proved an async one it

00:42:17,339 --> 00:42:20,759
tracks that and gives you the right

00:42:18,959 --> 00:42:24,900
value down here and maps it back again

00:42:20,759 --> 00:42:26,759
and the final thing it does is it takes

00:42:24,900 --> 00:42:28,799
all synchronous code that's marked as

00:42:26,759 --> 00:42:30,749
thread sensitive so things like sequel

00:42:28,799 --> 00:42:34,920
light for example and runs it in a

00:42:30,749 --> 00:42:38,069
single thread this is really nasty like

00:42:34,920 --> 00:42:40,049
I didn't want to do this I had to this

00:42:38,069 --> 00:42:42,239
is like half the code in that in that

00:42:40,049 --> 00:42:43,979
file is just doing this one thing and I

00:42:42,239 --> 00:42:45,630
get back to a bit later but like that's

00:42:43,979 --> 00:42:48,119
maybe the most important thing in terms

00:42:45,630 --> 00:42:50,160
of making Django work as it does now if

00:42:48,119 --> 00:42:52,469
we didn't sticky code into one thread we

00:42:50,160 --> 00:42:54,150
have to rewrite Django's entire concept

00:42:52,469 --> 00:42:57,239
of thread safety from the ground up and

00:42:54,150 --> 00:42:58,459
that one man is project infeasible as a

00:42:57,239 --> 00:43:02,130
result of all those things

00:42:58,459 --> 00:43:05,069
Django can speak a SGI he can't be much

00:43:02,130 --> 00:43:07,499
else yet but that first face is done it

00:43:05,069 --> 00:43:10,259
can plug into an SGA server like Daphne

00:43:07,499 --> 00:43:12,390
or you the corn or any of these several

00:43:10,259 --> 00:43:14,789
ones that have popped up and it can run

00:43:12,390 --> 00:43:17,519
and it does run a little bit faster like

00:43:14,789 --> 00:43:19,769
the a CI server can offload all the

00:43:17,519 --> 00:43:21,930
reading and file IO in that initial

00:43:19,769 --> 00:43:23,910
request set up into the async portion if

00:43:21,930 --> 00:43:26,069
you've got a site that relies heavily on

00:43:23,910 --> 00:43:27,569
slow file uploads this will be faster

00:43:26,069 --> 00:43:29,130
already because it's going to correct

00:43:27,569 --> 00:43:31,829
you can have run all those file uploads

00:43:29,130 --> 00:43:33,979
receivers it asynchronously in parallel

00:43:31,829 --> 00:43:36,329
but it's not good for most projects

00:43:33,979 --> 00:43:37,890
which is where the second and the

00:43:36,329 --> 00:43:40,469
current portion of this product comes in

00:43:37,890 --> 00:43:42,779
which is the views phase so we go back

00:43:40,469 --> 00:43:45,119
to our lovely flowchart here and if you

00:43:42,779 --> 00:43:48,329
think about the outside in we want to do

00:43:45,119 --> 00:43:50,969
is we want this views box here to have a

00:43:48,329 --> 00:43:53,190
read at a synchronous version to do that

00:43:50,969 --> 00:43:55,799
we have to go through the handler and so

00:43:53,190 --> 00:43:59,309
we have to take the handler we have to

00:43:55,799 --> 00:44:02,549
make it a sync native and then have it

00:43:59,309 --> 00:44:07,349
able to call either asynchronous view or

00:44:02,549 --> 00:44:09,959
an asynchronous view now this is mostly

00:44:07,349 --> 00:44:11,670
fine it's not really it's quite hard but

00:44:09,959 --> 00:44:14,160
there is one thing I've got to tell you

00:44:11,670 --> 00:44:16,890
which is well there's not just two

00:44:14,160 --> 00:44:20,160
handlers here as a third one everyone

00:44:16,890 --> 00:44:22,680
forgets about them tests the test client

00:44:20,160 --> 00:44:24,690
is also a fir thing that consumes the

00:44:22,680 --> 00:44:26,670
handler it when you use a test client

00:44:24,690 --> 00:44:27,480
it doesn't actually call Jango as or is

00:44:26,670 --> 00:44:30,090
gap vacation

00:44:27,480 --> 00:44:32,790
it jumps straight into the core of

00:44:30,090 --> 00:44:35,370
Django's serving pipeline and just runs

00:44:32,790 --> 00:44:38,160
stuff and so the problem here we have

00:44:35,370 --> 00:44:39,330
now is test line is going to be

00:44:38,160 --> 00:44:40,560
synchronous we're not going to change

00:44:39,330 --> 00:44:43,350
that we're not going to have a

00:44:40,560 --> 00:44:45,140
synchronous all the way outside in which

00:44:43,350 --> 00:44:47,880
means we have this problem where again

00:44:45,140 --> 00:44:49,740
the test client for your running tests

00:44:47,880 --> 00:44:52,560
through PI tests is in the main thread

00:44:49,740 --> 00:44:54,000
lovely that runs acing winner stuff by

00:44:52,560 --> 00:44:54,450
async code at run as I show you at the

00:44:54,000 --> 00:44:56,730
beginning

00:44:54,450 --> 00:44:59,130
what's great makes a new thread runs in

00:44:56,730 --> 00:45:01,950
the bet loop fantastic you then have to

00:44:59,130 --> 00:45:04,260
recall the synchronous view from that

00:45:01,950 --> 00:45:06,630
now asynchronous native base handler

00:45:04,260 --> 00:45:07,860
you're in a sub thread BAM

00:45:06,630 --> 00:45:10,830
you have simpleness code and two

00:45:07,860 --> 00:45:12,030
different threads secret like this not

00:45:10,830 --> 00:45:15,390
gonna work trust me

00:45:12,030 --> 00:45:18,420
I got very excited I made a first patch

00:45:15,390 --> 00:45:21,600
it ran asynchronous code and then I hit

00:45:18,420 --> 00:45:23,850
the test suite I got 4,000 errors all

00:45:21,600 --> 00:45:26,160
across my screen as air every single

00:45:23,850 --> 00:45:27,360
function failed to work in SQLite and so

00:45:26,160 --> 00:45:32,550
this is where the async testing stuff

00:45:27,360 --> 00:45:35,490
comes in this basically takes things

00:45:32,550 --> 00:45:37,800
that are a weighted ball placement

00:45:35,490 --> 00:45:39,900
synchronous and vice versa and as I said

00:45:37,800 --> 00:45:43,410
it runs in the same thread so let's dive

00:45:39,900 --> 00:45:45,270
into a little bit how this works so the

00:45:43,410 --> 00:45:47,850
problem you have here is the thread that

00:45:45,270 --> 00:45:50,250
you want to run in the main thread is

00:45:47,850 --> 00:45:52,740
blocked it's waiting for the base

00:45:50,250 --> 00:45:54,780
handler so how do you run code and a

00:45:52,740 --> 00:45:56,550
thread that's blocked the answer is you

00:45:54,780 --> 00:45:58,560
don't block it so what actually happens

00:45:56,550 --> 00:46:01,050
is when you run a sync to sync it

00:45:58,560 --> 00:46:03,420
doesn't just wait on the event loop it

00:46:01,050 --> 00:46:06,150
starts up a mini thread pool executor

00:46:03,420 --> 00:46:08,700
attached to that thread and hands it

00:46:06,150 --> 00:46:10,530
down the stack and then anything further

00:46:08,700 --> 00:46:12,510
down the stack the ones from signals go

00:46:10,530 --> 00:46:14,280
goes well I have some synchronous code a

00:46:12,510 --> 00:46:15,900
stir on the main thread but I have this

00:46:14,280 --> 00:46:18,330
for an executor handli and take through

00:46:15,900 --> 00:46:19,950
executor and it bubbles back up runs in

00:46:18,330 --> 00:46:21,540
the main thread and then passes back

00:46:19,950 --> 00:46:24,660
down at the ating thread again this is

00:46:21,540 --> 00:46:26,850
terrible to debug it's awful

00:46:24,660 --> 00:46:28,890
and and this works in infinite amount of

00:46:26,850 --> 00:46:30,570
nesting you can get four levels deep in

00:46:28,890 --> 00:46:32,850
and out of async and then try run

00:46:30,570 --> 00:46:34,530
sensitive presence of code it will find

00:46:32,850 --> 00:46:36,000
the main thread it will run it there and

00:46:34,530 --> 00:46:37,470
we tell you the result and it won't

00:46:36,000 --> 00:46:40,470
deadlock and that last bits the hardest

00:46:37,470 --> 00:46:41,190
bit there is a hole I could do another

00:46:40,470 --> 00:46:44,640
70 minutes

00:46:41,190 --> 00:46:46,530
it is frustrating and awful

00:46:44,640 --> 00:46:48,630
I really wish Python had better

00:46:46,530 --> 00:46:49,890
primitives to help deal with this one of

00:46:48,630 --> 00:46:52,890
the things I might try and bring up with

00:46:49,890 --> 00:46:54,270
with Python core directly but it is at

00:46:52,890 --> 00:46:56,849
least functioning now and what it gives

00:46:54,270 --> 00:46:59,369
us is the ability to like step back and

00:46:56,849 --> 00:47:01,500
not care too much about the actual

00:46:59,369 --> 00:47:03,089
inflation of like what does the

00:47:01,500 --> 00:47:05,039
nitty-gritty of Hany off sync to basic

00:47:03,089 --> 00:47:07,020
right these functions wrap it up in a

00:47:05,039 --> 00:47:09,270
way like well it works how you'd expect

00:47:07,020 --> 00:47:11,250
it has good error handling if it falls

00:47:09,270 --> 00:47:14,190
over it falls over obviously which

00:47:11,250 --> 00:47:16,770
brings back async changes in Django to a

00:47:14,190 --> 00:47:18,599
more reasonable level of I just have to

00:47:16,770 --> 00:47:20,640
understand what context I'm in and when

00:47:18,599 --> 00:47:23,069
to switch context it doesn't matter how

00:47:20,640 --> 00:47:24,210
you switch it that's all done for you

00:47:23,069 --> 00:47:26,010
there's no need to fiddle around with

00:47:24,210 --> 00:47:27,270
executives and thread pools but as long

00:47:26,010 --> 00:47:29,789
as you should know like is this code

00:47:27,270 --> 00:47:31,890
sync it is code async if you call sequel

00:47:29,789 --> 00:47:34,020
light it has to be done in a synchronous

00:47:31,890 --> 00:47:35,789
function that bit you have to understand

00:47:34,020 --> 00:47:37,410
you don't need to worry about how you

00:47:35,789 --> 00:47:40,410
call it in the right thread and things

00:47:37,410 --> 00:47:44,339
like that and talking of threads

00:47:40,410 --> 00:47:46,410
middle-way annoyingly this is one of the

00:47:44,339 --> 00:47:49,109
things where Django used to be easier

00:47:46,410 --> 00:47:51,990
and then got better and thus hard of

00:47:49,109 --> 00:47:55,460
this project so if any of you were

00:47:51,990 --> 00:47:58,380
around for Django 1.10 you will remember

00:47:55,460 --> 00:48:01,410
1.10 has new middleware it's very

00:47:58,380 --> 00:48:03,510
exciting very shiny middleware used to

00:48:01,410 --> 00:48:05,279
be a list we used to go through the list

00:48:03,510 --> 00:48:06,539
in cool middleware in order and go okay

00:48:05,279 --> 00:48:08,250
cool the first well and get the response

00:48:06,539 --> 00:48:10,349
done great cool the second one get

00:48:08,250 --> 00:48:13,049
response done great we changed it in

00:48:10,349 --> 00:48:16,109
1.10 to be nested what happens now is

00:48:13,049 --> 00:48:17,880
each middle-way is handed as its inside

00:48:16,109 --> 00:48:19,680
function and the next thing down the

00:48:17,880 --> 00:48:21,240
stack so the last middleware is handed

00:48:19,680 --> 00:48:22,730
the view and the middleware above that

00:48:21,240 --> 00:48:25,529
is handled that middleware and so on

00:48:22,730 --> 00:48:27,390
this is fantastic it's another great

00:48:25,529 --> 00:48:29,579
turtles all the way down kind of

00:48:27,390 --> 00:48:33,000
illustration and to real pain and things

00:48:29,579 --> 00:48:33,990
are the same if it turns out you want

00:48:33,000 --> 00:48:35,520
things to be both synchronous

00:48:33,990 --> 00:48:37,289
asynchronous because again we want to

00:48:35,520 --> 00:48:38,970
support existing secrets middleware

00:48:37,289 --> 00:48:40,980
that's bad compatibility we have to do

00:48:38,970 --> 00:48:43,470
that but get response we've made

00:48:40,980 --> 00:48:46,170
natively async we now have to work out

00:48:43,470 --> 00:48:48,089
what the middleware is wrap it in the

00:48:46,170 --> 00:48:51,089
right conversion functions and make sure

00:48:48,089 --> 00:48:53,760
it works out well right now what happens

00:48:51,089 --> 00:48:55,080
is it basically wraps all middleware to

00:48:53,760 --> 00:48:56,550
make it look a sync

00:48:55,080 --> 00:48:58,710
which means if you have a pile of

00:48:56,550 --> 00:49:01,320
synchro's middleware it goes into

00:48:58,710 --> 00:49:03,119
synchronous out again into it out again

00:49:01,320 --> 00:49:05,160
into it out again and the trace pack is

00:49:03,119 --> 00:49:06,930
ginormous so one of the big

00:49:05,160 --> 00:49:08,670
optimizations here is if you have to

00:49:06,930 --> 00:49:10,410
synch middlewares they can just call

00:49:08,670 --> 00:49:11,970
each other that's fine so working out

00:49:10,410 --> 00:49:14,220
basically like the correct way to nest

00:49:11,970 --> 00:49:16,230
those in the idea eventually used to

00:49:14,220 --> 00:49:18,840
have all of Django's middleware ship

00:49:16,230 --> 00:49:20,910
natively async but again we have to this

00:49:18,840 --> 00:49:22,890
in a feasible fashion so the whole point

00:49:20,910 --> 00:49:26,340
is what's the minimum change we can do

00:49:22,890 --> 00:49:30,030
keep backwards compatible and ship it

00:49:26,340 --> 00:49:32,010
and get it working there's some other

00:49:30,030 --> 00:49:35,660
things as well that are up in in the

00:49:32,010 --> 00:49:38,099
handling code first of all transactions

00:49:35,660 --> 00:49:39,930
now this is again I think John uses used

00:49:38,099 --> 00:49:41,670
to do a lot more it used to be the case

00:49:39,930 --> 00:49:43,619
of Django would basically always wrap

00:49:41,670 --> 00:49:45,030
your views and transaction that's been

00:49:43,619 --> 00:49:46,890
relegated to a setting now it's not on

00:49:45,030 --> 00:49:49,560
by default called atomic requests but it

00:49:46,890 --> 00:49:51,840
is still there if you ask Jo to do it it

00:49:49,560 --> 00:49:54,260
will wrap every single function every

00:49:51,840 --> 00:49:57,930
single view function in an atomic block

00:49:54,260 --> 00:50:00,390
which is not great for reasons you can

00:49:57,930 --> 00:50:02,010
maybe imagine having to do transactions

00:50:00,390 --> 00:50:04,109
across different threads is shall we

00:50:02,010 --> 00:50:06,359
think difficult and so this becomes a

00:50:04,109 --> 00:50:08,010
real issue in terms of like well am I in

00:50:06,359 --> 00:50:09,270
a transaction I can't have a judge to

00:50:08,010 --> 00:50:10,859
actually a different thread and so on

00:50:09,270 --> 00:50:12,119
this is one thing we have to consider

00:50:10,859 --> 00:50:14,790
and this still hasn't been addressed in

00:50:12,119 --> 00:50:16,920
the current patch templates to remember

00:50:14,790 --> 00:50:20,040
I said you can't call synchronous code

00:50:16,920 --> 00:50:23,130
from async code well if we have a sync

00:50:20,040 --> 00:50:24,420
Renee synchronous get response like one

00:50:23,130 --> 00:50:25,920
part of that as I said is like if you

00:50:24,420 --> 00:50:27,359
have an error it renders the error page

00:50:25,920 --> 00:50:29,070
there's a little thing that's old

00:50:27,359 --> 00:50:31,050
capture the exception largest renders a

00:50:29,070 --> 00:50:33,180
template response we have to take that

00:50:31,050 --> 00:50:35,640
section and make that an asynchronous

00:50:33,180 --> 00:50:38,700
separate call because we can't have

00:50:35,640 --> 00:50:40,410
templates being called from somewhere

00:50:38,700 --> 00:50:42,359
asynchronous it just doesn't work and

00:50:40,410 --> 00:50:44,070
finally these trace backs like Jango

00:50:42,359 --> 00:50:46,830
trace backs belong already they got

00:50:44,070 --> 00:50:49,560
longer I am still up in the air as to

00:50:46,830 --> 00:50:51,060
whether we should do the the nasty thing

00:50:49,560 --> 00:50:53,369
and start editing trace backs and

00:50:51,060 --> 00:50:55,200
removing some of that stuff I'm rule it

00:50:53,369 --> 00:50:57,210
excuse me out a little bit but like it

00:50:55,200 --> 00:50:58,320
is becoming a bit unmanageable and so

00:50:57,210 --> 00:51:00,720
one of the things is to try and reduce

00:50:58,320 --> 00:51:03,109
the number of contexts which is to and

00:51:00,720 --> 00:51:07,369
from async to try and make that better

00:51:03,109 --> 00:51:09,049
and the goal here is that January 1 has

00:51:07,369 --> 00:51:11,420
sink diffuse you can sit down with

00:51:09,049 --> 00:51:13,579
Django you can literally open up the

00:51:11,420 --> 00:51:15,319
used up high right a sink deaf something

00:51:13,579 --> 00:51:18,109
put it in the URLs apply and it just

00:51:15,319 --> 00:51:19,730
works I have a branch where this totally

00:51:18,109 --> 00:51:23,059
is the case again doesn't parse all the

00:51:19,730 --> 00:51:25,730
tests I've set of them not bad and like

00:51:23,059 --> 00:51:29,059
I said I have a thing I'm on my computer

00:51:25,730 --> 00:51:31,999
that runs a sync Django in a sense and I

00:51:29,059 --> 00:51:33,170
this is the current thing and at the end

00:51:31,999 --> 00:51:34,910
of talk about more about like if you

00:51:33,170 --> 00:51:36,230
want to come up with Sprint's this is a

00:51:34,910 --> 00:51:38,119
thing you can come and help us work out

00:51:36,230 --> 00:51:40,130
why the rest the tests are failing and

00:51:38,119 --> 00:51:42,200
trace down like every one of those

00:51:40,130 --> 00:51:44,180
failures is basically somewhere that I

00:51:42,200 --> 00:51:46,910
have not found yet they had to

00:51:44,180 --> 00:51:48,529
contraption sink to a sink its most a

00:51:46,910 --> 00:51:50,359
case of like playing detective and

00:51:48,529 --> 00:51:52,099
looking at okay there's a template

00:51:50,359 --> 00:51:53,749
render here there's a test call here

00:51:52,099 --> 00:51:55,400
we're in the middle we're missing a

00:51:53,749 --> 00:51:56,990
conversion and so a lot of it's actually

00:51:55,400 --> 00:51:58,279
very tractable and loved house help some

00:51:56,990 --> 00:51:59,420
you do that stuff so please come and

00:51:58,279 --> 00:52:01,519
talk to me after it's about that stuff

00:51:59,420 --> 00:52:03,710
but this is our goal and this is very

00:52:01,519 --> 00:52:05,450
achievable like is my belief that before

00:52:03,710 --> 00:52:07,400
the end of the year even it's not in

00:52:05,450 --> 00:52:10,190
django 3.0 this will be landed on

00:52:07,400 --> 00:52:13,849
Django's main branch which then brings

00:52:10,190 --> 00:52:15,259
to the big one I'm not gonna say the

00:52:13,849 --> 00:52:17,569
first two things are easy they're not

00:52:15,259 --> 00:52:20,450
they're difficult but comparatively the

00:52:17,569 --> 00:52:22,640
arm is much much harder the RM is

00:52:20,450 --> 00:52:25,730
basically most of django whoever looked

00:52:22,640 --> 00:52:28,489
at django in terms of the amount of code

00:52:25,730 --> 00:52:31,730
and files it has the RM is by far the

00:52:28,489 --> 00:52:33,799
biggest part of that equation and it's

00:52:31,730 --> 00:52:36,170
kind of the defining part of django like

00:52:33,799 --> 00:52:38,900
the RM is what we all use every day it's

00:52:36,170 --> 00:52:40,700
familiar and if we are to make an async

00:52:38,900 --> 00:52:43,700
version of the RM it must be familiar as

00:52:40,700 --> 00:52:45,799
well it must look like the other one we

00:52:43,700 --> 00:52:48,680
have some good parts here so for example

00:52:45,799 --> 00:52:51,859
one of the things that python does right

00:52:48,680 --> 00:52:53,660
with async is it has a couple of things

00:52:51,859 --> 00:52:56,150
that do have a sync versions of them so

00:52:53,660 --> 00:52:58,849
he was on before there is four and there

00:52:56,150 --> 00:53:01,400
is a sink for and crucially you can pass

00:52:58,849 --> 00:53:02,539
the same object to both of these and it

00:53:01,400 --> 00:53:04,609
calls different double underscore

00:53:02,539 --> 00:53:06,769
methods so you can have the same query

00:53:04,609 --> 00:53:09,289
set run in both an asynchronous mode and

00:53:06,769 --> 00:53:10,880
a synchronous mode this is one of the

00:53:09,289 --> 00:53:14,119
only reasons this even is feasible

00:53:10,880 --> 00:53:17,480
project we can actually have a separate

00:53:14,119 --> 00:53:18,890
dublin score a it's a operator on the

00:53:17,480 --> 00:53:20,450
query set and how about running

00:53:18,890 --> 00:53:22,760
asynchronous mode and

00:53:20,450 --> 00:53:25,099
change anything else and just have that

00:53:22,760 --> 00:53:28,280
for now rapping like a thread pool and

00:53:25,099 --> 00:53:31,670
give an async version of that API of

00:53:28,280 --> 00:53:32,270
course the counterbalance is we can't do

00:53:31,670 --> 00:53:36,770
this anymore

00:53:32,270 --> 00:53:38,150
and realistically if you were doing it

00:53:36,770 --> 00:53:40,280
already you probably should be doing

00:53:38,150 --> 00:53:41,690
select related it's arguable it's an

00:53:40,280 --> 00:53:43,130
anti-pattern that we let you do this

00:53:41,690 --> 00:53:45,290
anyway because even in normal

00:53:43,130 --> 00:53:47,450
synchronous Django if you do this in a

00:53:45,290 --> 00:53:49,280
for loop that's a really bad idea like

00:53:47,450 --> 00:53:50,960
number one thing I learned like Django

00:53:49,280 --> 00:53:52,220
year one is don't call this in a for

00:53:50,960 --> 00:53:55,880
loop because it's gonna ruin your number

00:53:52,220 --> 00:53:58,250
of queries and so as a result in async

00:53:55,880 --> 00:53:59,960
mode if you try this it's gonna go now

00:53:58,250 --> 00:54:02,480
because like what you can do the ones

00:53:59,960 --> 00:54:04,160
having grace is anywhere in giant

00:54:02,480 --> 00:54:05,780
anywhere in place then even synchronous

00:54:04,160 --> 00:54:09,250
code you can detect if you are in an

00:54:05,780 --> 00:54:11,329
async thread and so we can put little

00:54:09,250 --> 00:54:14,119
guards around things like this that go

00:54:11,329 --> 00:54:15,859
up this thread somewhere is async an you

00:54:14,119 --> 00:54:18,800
haven't got down here in async mode as

00:54:15,859 --> 00:54:20,390
we just go no you can't do this and so

00:54:18,800 --> 00:54:23,210
in this case we'll have to force you to

00:54:20,390 --> 00:54:24,920
use slip related this is maybe the most

00:54:23,210 --> 00:54:27,380
annoying thing for me personally but

00:54:24,920 --> 00:54:28,609
again at the end of the day it's kind of

00:54:27,380 --> 00:54:30,020
pattern you should be doing anyway so

00:54:28,609 --> 00:54:32,750
it's one of the small things we have to

00:54:30,020 --> 00:54:35,510
change and if you talk about outside in

00:54:32,750 --> 00:54:36,050
general that kind of applies to the ORM

00:54:35,510 --> 00:54:38,030
too

00:54:36,050 --> 00:54:41,150
as I said like I want to take the query

00:54:38,030 --> 00:54:42,440
set and give that asynchronous API but

00:54:41,150 --> 00:54:45,140
that's the first step like we should

00:54:42,440 --> 00:54:46,700
take that give it an async API how it

00:54:45,140 --> 00:54:48,530
back on to a synchronous back end

00:54:46,700 --> 00:54:51,260
because rewriting that back end is gonna

00:54:48,530 --> 00:54:53,060
be a huge project and it's makes sure

00:54:51,260 --> 00:54:55,520
that you can call the database safely

00:54:53,060 --> 00:54:57,740
from async Python did it make sense the

00:54:55,520 --> 00:54:59,690
transactions work the API feels good

00:54:57,740 --> 00:55:02,839
once we've got that established we can

00:54:59,690 --> 00:55:06,200
then go forward and tackle the really

00:55:02,839 --> 00:55:08,960
big problem of if you want to taking the

00:55:06,200 --> 00:55:12,079
rest of Django's query back-end to be

00:55:08,960 --> 00:55:13,790
synchronous as a quick aside this is

00:55:12,079 --> 00:55:15,560
kind of how queries work in Django the

00:55:13,790 --> 00:55:17,930
query set is the thing you usually talk

00:55:15,560 --> 00:55:20,420
to is the high level interface the query

00:55:17,930 --> 00:55:21,770
set builds a basic query object that's

00:55:20,420 --> 00:55:23,150
sort of the lower level version of that

00:55:21,770 --> 00:55:25,609
was still like high level compared to

00:55:23,150 --> 00:55:27,500
sequel the compiler takes that to sequel

00:55:25,609 --> 00:55:29,990
and the connection runs against the

00:55:27,500 --> 00:55:31,310
database and each of these has own logic

00:55:29,990 --> 00:55:33,050
and its own waiting handling

00:55:31,310 --> 00:55:34,109
transactions and fields and so on

00:55:33,050 --> 00:55:38,279
it's really

00:55:34,109 --> 00:55:39,690
complicated this is a thing that I

00:55:38,279 --> 00:55:41,609
definitely pushed off into the future

00:55:39,690 --> 00:55:43,650
bucket like it's where I want to go it's

00:55:41,609 --> 00:55:46,470
a long-term goal but it's not for the

00:55:43,650 --> 00:55:49,049
short term in the short term we have put

00:55:46,470 --> 00:55:52,380
in a sink safety if you try and call

00:55:49,049 --> 00:55:55,980
code in the ORM from an async thrill and

00:55:52,380 --> 00:55:57,989
django 3.0 it will go no in cases this

00:55:55,980 --> 00:56:00,450
this exception here it's trying to start

00:55:57,989 --> 00:56:01,289
saving you from doing things wrong of

00:56:00,450 --> 00:56:02,460
course you shouldn't be doing this

00:56:01,289 --> 00:56:04,170
anyway unless you're being very

00:56:02,460 --> 00:56:05,670
experimental but the idea is we're going

00:56:04,170 --> 00:56:08,220
to build up these safeguards and try and

00:56:05,670 --> 00:56:10,220
make sure that that API looks correct

00:56:08,220 --> 00:56:13,680
first before we keep building behind it

00:56:10,220 --> 00:56:15,509
as you can see this whole thing kind

00:56:13,680 --> 00:56:17,489
needs a lot more research one of the

00:56:15,509 --> 00:56:20,279
things here is like the ORM is a huge

00:56:17,489 --> 00:56:22,529
surface area has so many parts I mean

00:56:20,279 --> 00:56:24,539
talked about like migrations of course

00:56:22,529 --> 00:56:26,099
like well it's probably fine but maybe

00:56:24,539 --> 00:56:28,499
it's not they want to do them runtime

00:56:26,099 --> 00:56:30,779
and so this is a separate thing to sit

00:56:28,499 --> 00:56:31,980
down look at it like um the views and

00:56:30,779 --> 00:56:34,230
the handlers and look at what we're

00:56:31,980 --> 00:56:35,789
doing exactly I believe it's possible I

00:56:34,230 --> 00:56:38,039
post up a few things

00:56:35,789 --> 00:56:41,489
I had it basically running but to have a

00:56:38,039 --> 00:56:44,220
fully safe useable ORM we have a long

00:56:41,489 --> 00:56:45,450
way to go in terms of planning though so

00:56:44,220 --> 00:56:47,819
let's step back I've gone through the

00:56:45,450 --> 00:56:49,140
three main phases you've seen how the

00:56:47,819 --> 00:56:51,779
first two kind of work and I have third

00:56:49,140 --> 00:56:53,670
ones still kind undefined like what is

00:56:51,779 --> 00:56:55,380
the path for Django what is the goal

00:56:53,670 --> 00:56:58,739
here like how are we going to keep going

00:56:55,380 --> 00:57:00,420
along this line well first of all those

00:56:58,739 --> 00:57:03,569
of you observe and will know I haven't

00:57:00,420 --> 00:57:06,839
mentioned much like the cache framework

00:57:03,569 --> 00:57:08,809
or templates or forms or any of the

00:57:06,839 --> 00:57:10,920
other like many parts of Django we have

00:57:08,809 --> 00:57:12,839
Django has lots of small parts that are

00:57:10,920 --> 00:57:14,700
very important but the key thing is some

00:57:12,839 --> 00:57:16,619
of these will benefit from acing like

00:57:14,700 --> 00:57:18,210
the cache framework totally benefits an

00:57:16,619 --> 00:57:19,640
async all it does is network

00:57:18,210 --> 00:57:23,130
communication it's a perfect example

00:57:19,640 --> 00:57:25,170
forms probably not like forms and mostly

00:57:23,130 --> 00:57:26,579
CPU bound there's not a lot of advantage

00:57:25,170 --> 00:57:28,230
in there making them async compatible

00:57:26,579 --> 00:57:29,880
you can just call them slightly in a

00:57:28,230 --> 00:57:32,460
block of thread very much and so the

00:57:29,880 --> 00:57:34,859
case there is we have to make sure what

00:57:32,460 --> 00:57:36,720
you want to be async and it is justified

00:57:34,859 --> 00:57:39,720
what we don't want to be a sink again

00:57:36,720 --> 00:57:41,099
URL routing it's probably fine it's most

00:57:39,720 --> 00:57:43,170
CPU bound it goes through regular

00:57:41,099 --> 00:57:45,869
expressions it doesn't run for very long

00:57:43,170 --> 00:57:47,200
doesn't do network connections there are

00:57:45,869 --> 00:57:49,329
danger points here if some

00:57:47,200 --> 00:57:51,010
goes in and overrides the URL Muthu with

00:57:49,329 --> 00:57:53,410
on one that does like sequel queries

00:57:51,010 --> 00:57:54,970
that's bad but that's what we have the

00:57:53,410 --> 00:57:57,730
things like the protections in there if

00:57:54,970 --> 00:57:59,200
you do that in Django 33.1 it will go

00:57:57,730 --> 00:58:01,119
now you can't do this you've got to do

00:57:59,200 --> 00:58:04,390
the async stuff yourself I think that's

00:58:01,119 --> 00:58:06,190
a reasonable trade-off to make and I

00:58:04,390 --> 00:58:08,230
think the other thing here is that once

00:58:06,190 --> 00:58:10,540
we get to async views that's the real

00:58:08,230 --> 00:58:13,839
cornerstone of this when you can sit

00:58:10,540 --> 00:58:16,900
down write a sink def you and just get

00:58:13,839 --> 00:58:18,430
coding that's one was the Nexus for all

00:58:16,900 --> 00:58:21,190
the other work around Django we can do

00:58:18,430 --> 00:58:22,869
you can see how at that point someone

00:58:21,190 --> 00:58:24,490
can go to a templating someone can go

00:58:22,869 --> 00:58:25,720
like a cache or someone go look at forms

00:58:24,490 --> 00:58:27,160
like all of these become different

00:58:25,720 --> 00:58:29,500
options you can do it once if you want

00:58:27,160 --> 00:58:30,910
to and that really is useful for an open

00:58:29,500 --> 00:58:34,270
source project we don't want to be bound

00:58:30,910 --> 00:58:36,849
on one person or a small team the stuff

00:58:34,270 --> 00:58:39,550
like making async views work is a very

00:58:36,849 --> 00:58:41,079
expert knowledge heavy area that's very

00:58:39,550 --> 00:58:43,930
difficult and even then I still need

00:58:41,079 --> 00:58:45,460
help but once we get further there's a

00:58:43,930 --> 00:58:48,670
whole lot of very fertile ground we can

00:58:45,460 --> 00:58:50,440
open up where the problems are pretty

00:58:48,670 --> 00:58:52,390
well-defined like the requirements are

00:58:50,440 --> 00:58:54,819
pretty clear if you if there are some

00:58:52,390 --> 00:58:57,099
like if I say I want a version of the

00:58:54,819 --> 00:58:59,859
cache framework that has async get an

00:58:57,099 --> 00:59:01,390
async set that's a very decent framework

00:58:59,859 --> 00:59:02,920
to work within like someone can take

00:59:01,390 --> 00:59:06,940
that and run and build that and we can

00:59:02,920 --> 00:59:08,140
test it out of course under like all of

00:59:06,940 --> 00:59:11,230
this I'm sure some of you are thinking

00:59:08,140 --> 00:59:12,760
this too is performance Andrew you asked

00:59:11,230 --> 00:59:14,710
surely you can't do this by making

00:59:12,760 --> 00:59:18,190
things too on the same speed I argue I

00:59:14,710 --> 00:59:20,589
can but we'll see the key thing here is

00:59:18,190 --> 00:59:23,200
I don't want this project to harm

00:59:20,589 --> 00:59:24,940
synchronous Django I expect there'll be

00:59:23,200 --> 00:59:26,980
a couple of percent reduction that's

00:59:24,940 --> 00:59:28,630
fine but if it gets to be anything

00:59:26,980 --> 00:59:30,400
significant we have to reassess it like

00:59:28,630 --> 00:59:32,290
Django still lets you turn off the

00:59:30,400 --> 00:59:34,359
localization framework to save speed

00:59:32,290 --> 00:59:36,880
it's arguable that's worth it or not but

00:59:34,359 --> 00:59:38,589
that's a different question and so you

00:59:36,880 --> 00:59:39,970
see all these sinks to a sinkhole that

00:59:38,589 --> 00:59:42,400
jumps around on adding here like those

00:59:39,970 --> 00:59:45,400
add overhead those add context switches

00:59:42,400 --> 00:59:47,200
of course they also bring games like the

00:59:45,400 --> 00:59:49,569
more of jangly make async the more of it

00:59:47,200 --> 00:59:51,790
runs in parallel even if you run Django

00:59:49,569 --> 00:59:52,869
under whiskey if we run those corbett's

00:59:51,790 --> 00:59:55,690
and they sync they actually may run a

00:59:52,869 --> 00:59:58,150
little bit faster so one of the key

00:59:55,690 --> 01:00:00,040
things here is making sure that as this

00:59:58,150 --> 01:00:01,060
work progresses we're not harming Django

01:00:00,040 --> 01:00:04,480
we are making it know

01:00:01,060 --> 01:00:06,490
worse in the worst case and then in the

01:00:04,480 --> 01:00:09,010
best case which is like long polling

01:00:06,490 --> 01:00:11,020
database back stuff it gets a hundred

01:00:09,010 --> 01:00:13,470
times faster so it's a really careful

01:00:11,020 --> 01:00:17,100
balance to strike here

01:00:13,470 --> 01:00:19,360
of course though here is people

01:00:17,100 --> 01:00:22,720
asynchronous code is very difficult

01:00:19,360 --> 01:00:24,610
there are very very few people who can

01:00:22,720 --> 01:00:27,610
sit down understand this and do it

01:00:24,610 --> 01:00:29,680
properly I got there eventually after a

01:00:27,610 --> 01:00:32,320
lot of research and trying but like it

01:00:29,680 --> 01:00:34,210
takes a lot of work and you know I've at

01:00:32,320 --> 01:00:36,640
this point done a few big projects as a

01:00:34,210 --> 01:00:37,840
part of Django migrations is one of the

01:00:36,640 --> 01:00:40,150
big ones

01:00:37,840 --> 01:00:42,400
Charles itself is like the predecessor

01:00:40,150 --> 01:00:44,110
what are this even it's very easy to

01:00:42,400 --> 01:00:46,900
burn out and one of the key things here

01:00:44,110 --> 01:00:48,550
is this is not only a chance for us to

01:00:46,900 --> 01:00:50,410
avoid burnout for existing jain

01:00:48,550 --> 01:00:52,750
developers there's a lot of ground here

01:00:50,410 --> 01:00:56,140
to bring on new faces if you want to

01:00:52,750 --> 01:00:58,360
help write new django code and you don't

01:00:56,140 --> 01:01:00,820
like fixing six-year-old bugs in the ORM

01:00:58,360 --> 01:01:03,010
this is a great place to start like I

01:01:00,820 --> 01:01:04,360
said there is a nice clean definition

01:01:03,010 --> 01:01:06,670
like there are things to do here it's a

01:01:04,360 --> 01:01:08,200
new ground to go and do stuff and that's

01:01:06,670 --> 01:01:10,600
and to be a really attractive prospect

01:01:08,200 --> 01:01:12,820
and also things that async views open up

01:01:10,600 --> 01:01:14,020
but we can couldn't even do before one

01:01:12,820 --> 01:01:17,740
of the things I'd love to see here is

01:01:14,020 --> 01:01:19,720
like Django as a major player in the

01:01:17,740 --> 01:01:21,550
space of like being the back end to

01:01:19,720 --> 01:01:23,080
things like rich web applications which

01:01:21,550 --> 01:01:24,820
it already is a big player in but like

01:01:23,080 --> 01:01:27,910
there are so many more things we can do

01:01:24,820 --> 01:01:29,770
with long pauling and slow responses and

01:01:27,910 --> 01:01:32,530
streaming being part of jangler's and

01:01:29,770 --> 01:01:35,440
native toolkit rather than the thing you

01:01:32,530 --> 01:01:37,360
attach on the side I will say I don't

01:01:35,440 --> 01:01:39,700
think WebSockets makes sense in Django

01:01:37,360 --> 01:01:41,560
right now channels is probably stay

01:01:39,700 --> 01:01:42,940
separate for a while but the nice thing

01:01:41,560 --> 01:01:44,320
is we can just delete parts of channels

01:01:42,940 --> 01:01:47,800
it's just WebSocket part and that's

01:01:44,320 --> 01:01:49,600
great that helps a lot another thing

01:01:47,800 --> 01:01:51,700
here is like you know I just spent an

01:01:49,600 --> 01:01:53,830
hour telling you about this I'm sure

01:01:51,700 --> 01:01:54,990
you've got some portion of it I would

01:01:53,830 --> 01:01:57,760
have only got a small portion

01:01:54,990 --> 01:02:00,430
documentation is crucial a sink by

01:01:57,760 --> 01:02:02,410
itself is hard there's not a lot of good

01:02:00,430 --> 01:02:05,170
docks and a sink of Python even by

01:02:02,410 --> 01:02:06,700
itself let alone asynchronous Django so

01:02:05,170 --> 01:02:08,290
there's a lot of work here in taking our

01:02:06,700 --> 01:02:10,420
docks and making the async part of the

01:02:08,290 --> 01:02:13,329
story makes sense not only in terms of

01:02:10,420 --> 01:02:14,200
basic concepts like you know we have

01:02:13,329 --> 01:02:16,359
make sure people people know what

01:02:14,200 --> 01:02:18,759
deadlocks are what live locks are how

01:02:16,359 --> 01:02:21,249
that stuff works but also just how to

01:02:18,759 --> 01:02:23,380
get up and running and that's a real

01:02:21,249 --> 01:02:25,420
thing as well and especially if we have

01:02:23,380 --> 01:02:27,910
parallel versions of things like though

01:02:25,420 --> 01:02:30,849
here is the async RM here is a

01:02:27,910 --> 01:02:32,259
synchronous around the hose need clear

01:02:30,849 --> 01:02:34,209
documentation that which one is which

01:02:32,259 --> 01:02:36,039
how you distinguish between them how do

01:02:34,209 --> 01:02:38,019
you make sure that works that's a real

01:02:36,039 --> 01:02:39,759
issue domination in Django in general

01:02:38,019 --> 01:02:41,979
has been a strong point historically

01:02:39,759 --> 01:02:43,150
it's got a bit weaker recently but I

01:02:41,979 --> 01:02:47,289
think there's a thing we had to focus on

01:02:43,150 --> 01:02:51,249
and be really clear on and then of

01:02:47,289 --> 01:02:53,709
course funding I do not believe at this

01:02:51,249 --> 01:02:56,049
point in the fact we should believe

01:02:53,709 --> 01:02:58,539
people should work for free especially

01:02:56,049 --> 01:02:59,650
because acing expertise is so rare and

01:02:58,539 --> 01:03:02,469
that's not even in terms of like we

01:02:59,650 --> 01:03:05,019
should pay experts if someone is willing

01:03:02,469 --> 01:03:06,789
to sit down take the time to learn this

01:03:05,019 --> 01:03:08,950
to build its partner toolset and to give

01:03:06,789 --> 01:03:11,140
us their time back they deserve to be

01:03:08,950 --> 01:03:13,299
compensated for that time and that

01:03:11,140 --> 01:03:15,549
knowledge the only way becomes

01:03:13,299 --> 01:03:18,489
sustainable is by doing this right now

01:03:15,549 --> 01:03:20,709
I have one day a week from my workplace

01:03:18,489 --> 01:03:22,269
to work on Django it is unpaid but I

01:03:20,709 --> 01:03:24,309
take it anyway out of my good as my own

01:03:22,269 --> 01:03:27,670
heart that's not sustainable long term

01:03:24,309 --> 01:03:29,140
and that's just me and the Django

01:03:27,670 --> 01:03:30,459
fellows again the way of doing this but

01:03:29,140 --> 01:03:32,619
we need to have more ways of doing it

01:03:30,459 --> 01:03:34,779
one of the things I am going to be

01:03:32,619 --> 01:03:36,999
pushing for now we have good progress on

01:03:34,779 --> 01:03:39,819
this is how to get better funding around

01:03:36,999 --> 01:03:42,039
such a big project I think async is well

01:03:39,819 --> 01:03:44,680
placed it has clear goals as clear

01:03:42,039 --> 01:03:46,749
advantages it is very good for the big

01:03:44,680 --> 01:03:48,009
enterprise applications like if I walk

01:03:46,749 --> 01:03:51,190
in and say I can save your heart your

01:03:48,009 --> 01:03:52,299
hosting costs you start listening but it

01:03:51,190 --> 01:03:55,019
still takes a story around that and

01:03:52,299 --> 01:03:58,180
that's important and finally

01:03:55,019 --> 01:04:00,430
organization it is may be a power this

01:03:58,180 --> 01:04:02,009
is one of the biggest chains Django at

01:04:00,430 --> 01:04:04,930
least at runtime its recent history

01:04:02,009 --> 01:04:07,150
Django has not had a huge rewrite since

01:04:04,930 --> 01:04:08,859
the aint magical removal he's maybe the

01:04:07,150 --> 01:04:10,839
last big rewrite I can think of that was

01:04:08,859 --> 01:04:12,549
pre one point naught like when I joined

01:04:10,839 --> 01:04:14,920
Django they were whisper things like

01:04:12,549 --> 01:04:17,559
magic was very important and it sort of

01:04:14,920 --> 01:04:20,019
had just happened and gone away and so

01:04:17,559 --> 01:04:22,539
it's hard to take a thing like this and

01:04:20,019 --> 01:04:25,779
attack it like it can't be done by just

01:04:22,539 --> 01:04:26,830
one person things I've changed the scale

01:04:25,779 --> 01:04:29,260
do not happen by

01:04:26,830 --> 01:04:31,030
me locking myself away in a room for a

01:04:29,260 --> 01:04:32,770
year it's not gonna happen I will refuse

01:04:31,030 --> 01:04:35,830
to do that for personal reasons right

01:04:32,770 --> 01:04:37,540
and so like I have a life it's very

01:04:35,830 --> 01:04:39,790
important and so the question he was

01:04:37,540 --> 01:04:41,350
like how do we look at open to the

01:04:39,790 --> 01:04:42,790
organization I mean so this morning from

01:04:41,350 --> 01:04:44,500
the Russ talk right like Russell's got

01:04:42,790 --> 01:04:47,200
good model this may be it like how do we

01:04:44,500 --> 01:04:50,200
take a big hairy product like this make

01:04:47,200 --> 01:04:51,910
organize it well make it work and just

01:04:50,200 --> 01:04:53,470
attack such a big surface area in a way

01:04:51,910 --> 01:04:56,590
Jane hasn't done for a while I think

01:04:53,470 --> 01:04:58,060
that is the open question and one that I

01:04:56,590 --> 01:05:00,430
would love to talk to any and all of you

01:04:58,060 --> 01:05:02,380
about if you can find me afterwards if

01:05:00,430 --> 01:05:04,180
you're interested here are a few links

01:05:02,380 --> 01:05:08,380
are posted up on Twitter afterwards as

01:05:04,180 --> 01:05:11,650
well the first one is my slightly longer

01:05:08,380 --> 01:05:13,480
form guide into a sink versus

01:05:11,650 --> 01:05:15,700
synchronous functions and the background

01:05:13,480 --> 01:05:17,080
behind the whole acing to synchronous a

01:05:15,700 --> 01:05:18,550
problem explains the difference between

01:05:17,080 --> 01:05:20,110
them how you get between the two

01:05:18,550 --> 01:05:22,210
different lands and the problems you

01:05:20,110 --> 01:05:23,560
face it's a good basic read if you're

01:05:22,210 --> 01:05:26,260
unsure how that stuff works or even if

01:05:23,560 --> 01:05:28,360
you're somewhat sure to go into the

01:05:26,260 --> 01:05:31,840
second one is the longest thing here

01:05:28,360 --> 01:05:35,170
it's basically a novella it is it is DP

01:05:31,840 --> 01:05:37,090
9 which is the Django extension proposal

01:05:35,170 --> 01:05:38,290
for async and Django and this has

01:05:37,090 --> 01:05:40,300
recently been accepted so it's now

01:05:38,290 --> 01:05:43,720
officially part of Django stream it but

01:05:40,300 --> 01:05:46,360
it is my basically goal for saying hey

01:05:43,720 --> 01:05:47,680
Django should do this and then having

01:05:46,360 --> 01:05:49,120
everyone discuss of it we had a lot of

01:05:47,680 --> 01:05:51,400
good discussion the mailing list it was

01:05:49,120 --> 01:05:54,010
a revised a few times it was clarified

01:05:51,400 --> 01:05:56,440
very heavy like what we're not doing is

01:05:54,010 --> 01:05:57,400
making Django async only and throwing

01:05:56,440 --> 01:05:58,510
away the synchronous thing that's not

01:05:57,400 --> 01:06:01,720
what we're doing be very clear about

01:05:58,510 --> 01:06:04,240
this and finally the last thing here I'm

01:06:01,720 --> 01:06:06,190
building out a landing page for if you

01:06:04,240 --> 01:06:07,930
want to help with this project what you

01:06:06,190 --> 01:06:09,190
can do it's still in development but

01:06:07,930 --> 01:06:10,870
this is a place like it's going to have

01:06:09,190 --> 01:06:13,950
a list of products we can worked on now

01:06:10,870 --> 01:06:15,940
and later how to talked about them and

01:06:13,950 --> 01:06:18,240
things you can do to help these in

01:06:15,940 --> 01:06:21,160
project along now and in the future and

01:06:18,240 --> 01:06:24,160
I would love to have your questions

01:06:21,160 --> 01:06:25,230
afterwards and thank you very much

01:06:24,160 --> 01:06:38,870
indeed

01:06:25,230 --> 01:06:42,390
[Applause]

01:06:38,870 --> 01:06:44,160
it's not so for those of you that like

01:06:42,390 --> 01:06:47,930
to ask questions just raise your hand

01:06:44,160 --> 01:06:49,620
and also mine so okay I'm in after beer

01:06:47,930 --> 01:06:52,500
five minutes let's do some questions

01:06:49,620 --> 01:06:56,460
I've done it for a while yeah will you

01:06:52,500 --> 01:06:58,500
say goes to the sea a reminder the

01:06:56,460 --> 01:06:59,730
questions are for asking for information

01:06:58,500 --> 01:07:01,620
for Andrey if you would like to share

01:06:59,730 --> 01:07:06,000
your own information please submit to

01:07:01,620 --> 01:07:08,220
the CFP you next year yes I would be

01:07:06,000 --> 01:07:11,330
curious to know how long you considered

01:07:08,220 --> 01:07:17,100
actually just making Jango a sync only

01:07:11,330 --> 01:07:19,050
for about two minutes I I have never

01:07:17,100 --> 01:07:21,360
believed I think Oh Nico is like I do

01:07:19,050 --> 01:07:23,070
not write code only Nasik in Django in

01:07:21,360 --> 01:07:24,990
Python it's not way forward maybe one

01:07:23,070 --> 01:07:30,180
day it will be but not in the next five

01:07:24,990 --> 01:07:32,160
years next question when you have a

01:07:30,180 --> 01:07:33,900
multi-process whiskey server you're

01:07:32,160 --> 01:07:35,760
guaranteed that a process will not

01:07:33,900 --> 01:07:37,920
accept the request when there have no

01:07:35,760 --> 01:07:40,350
Fred's available yes I think layer on

01:07:37,920 --> 01:07:42,150
top of fret sink means that it can

01:07:40,350 --> 01:07:44,010
greedily accept requests into one

01:07:42,150 --> 01:07:45,240
process and have a backlog of requests

01:07:44,010 --> 01:07:46,680
how are you gonna solve that problem

01:07:45,240 --> 01:07:48,480
it's another thing to the server

01:07:46,680 --> 01:07:49,560
consider right so like the things are

01:07:48,480 --> 01:07:52,200
built into Daphne is like you have a

01:07:49,560 --> 01:07:53,970
maximum concurrency limit so it stops

01:07:52,200 --> 01:07:56,070
bringing in requests after he's like 10

01:07:53,970 --> 01:07:58,440
or 20 years tunable so if you have a

01:07:56,070 --> 01:08:00,360
very synchronous synchronous ish

01:07:58,440 --> 01:08:01,950
application you make that small if it's

01:08:00,360 --> 01:08:03,270
a very a single application you make it

01:08:01,950 --> 01:08:04,740
big but you're right it is a problem

01:08:03,270 --> 01:08:06,750
that's one of the things like we have to

01:08:04,740 --> 01:08:07,860
relearn how to deploy applications a

01:08:06,750 --> 01:08:10,590
little bit and have achieved them

01:08:07,860 --> 01:08:11,940
properly in that sense as well but if

01:08:10,590 --> 01:08:15,390
you want a safe default just make it the

01:08:11,940 --> 01:08:16,470
old button is usable memory so that's

01:08:15,390 --> 01:08:25,050
probably time for a couple more if

01:08:16,470 --> 01:08:29,780
anyone has any more rustle ok the person

01:08:25,050 --> 01:08:29,780
that wasn't rustle yeah congratulations

01:08:30,619 --> 01:08:37,650
sorry that you mentioned if you've got

01:08:35,159 --> 01:08:40,829
something that's going to block on IO to

01:08:37,650 --> 01:08:43,139
flip to a thread and then using the

01:08:40,829 --> 01:08:45,270
thread pool executor but if I also

01:08:43,139 --> 01:08:46,980
understood correctly the that's using

01:08:45,270 --> 01:08:50,520
this standard Python threading model

01:08:46,980 --> 01:08:52,980
which means can you elaborate on yeah

01:08:50,520 --> 01:08:54,750
totally and so you're totally right if

01:08:52,980 --> 01:08:56,659
all we did was put things on to threads

01:08:54,750 --> 01:08:59,309
for i/o it'd be a terrible terrible idea

01:08:56,659 --> 01:09:00,809
so the key thing here is the thing

01:08:59,309 --> 01:09:02,279
that's never on a thread is the network

01:09:00,809 --> 01:09:03,809
handling to and from the client so the

01:09:02,279 --> 01:09:05,759
thing which want to enable here is that

01:09:03,809 --> 01:09:08,159
you can sit there sleep for a long time

01:09:05,759 --> 01:09:09,270
and like send a request back half an

01:09:08,159 --> 01:09:10,829
hour later or whatever if you're doing a

01:09:09,270 --> 01:09:12,540
long pole it's like that's the key thing

01:09:10,829 --> 01:09:14,250
we're enabling and the more you can

01:09:12,540 --> 01:09:16,349
shift from thread pools into a native

01:09:14,250 --> 01:09:17,880
async the better so like the ORM the

01:09:16,349 --> 01:09:19,650
short-term is in a thread pool that's

01:09:17,880 --> 01:09:21,809
not as good as a native async but it's

01:09:19,650 --> 01:09:23,279
better than not having it at all this

01:09:21,809 --> 01:09:25,319
case of like specially graduating

01:09:23,279 --> 01:09:28,049
further up so you're right it's not as

01:09:25,319 --> 01:09:29,790
good but the key thing you do get is

01:09:28,049 --> 01:09:31,770
that that key request response handling

01:09:29,790 --> 01:09:35,339
is always async that's never in a thread

01:09:31,770 --> 01:09:36,989
pool and that basically helps a lot all

01:09:35,339 --> 01:09:38,790
right so that's all we have time for

01:09:36,989 --> 01:09:40,109
with regards to questions please thank

01:09:38,790 --> 01:09:44,909
you Andrew once again thank you

01:09:40,109 --> 01:09:44,909

YouTube URL: https://www.youtube.com/watch?v=oMHrDy62kgE


