Title: "Securing your AWS Identity Management pipeline with PyTest" - Sean Johnson (PyCon AU 2019)
Publication date: 2019-08-02
Playlist: PyCon Australia 2019
Description: 
	Sean Johnson

Amazon's Identity and Access Management is a risky needle to thread when it comes to deploying into the cloud, especially when it comes to empowering your developers to make their own changes. In this talk I will be showing how to leverage PyTest to test your policies before they hit production.

https://2019.pycon-au.org/talks/securing-your-aws-identity-management-pipeline-with-pytest

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 2 - 6 2019.

Video licence: CC BY-NC-SA 4.0 - https://creativecommons.org/licenses/by-nc-sa/4.0/

Python, PyCon, PyConAU

Fri Aug  2 11:50:00 2019 at Cockle Bay
Captions: 
	00:00:00,319 --> 00:00:08,040
so please welcome Sean well thank you

00:00:06,480 --> 00:00:10,889
very much

00:00:08,040 --> 00:00:13,230
hi my name is Sean I'm a cloud technical

00:00:10,889 --> 00:00:14,969
lead for a place called Center group

00:00:13,230 --> 00:00:19,050
they're the company in Australia that

00:00:14,969 --> 00:00:20,970
managers and runs the West fields I've

00:00:19,050 --> 00:00:22,350
been doing DevOps for about a little

00:00:20,970 --> 00:00:26,130
over five years now at a couple other

00:00:22,350 --> 00:00:29,160
places places like ige Gumtree tyro and

00:00:26,130 --> 00:00:32,969
the NBN sorry for that bit wasn't my

00:00:29,160 --> 00:00:34,950
fault so I'm here today to talk about

00:00:32,969 --> 00:00:39,540
securing your AWS identity management

00:00:34,950 --> 00:00:41,940
pipeline with PI test so the main driver

00:00:39,540 --> 00:00:43,469
for this was how can I keep my cloud

00:00:41,940 --> 00:00:46,160
safe without driving my fellow

00:00:43,469 --> 00:00:48,629
developers completely mad

00:00:46,160 --> 00:00:51,059
AWS I am is one of those fun things

00:00:48,629 --> 00:00:53,910
where it's easy to get right oh sorry

00:00:51,059 --> 00:00:56,850
I'm easy to get wrong and very difficult

00:00:53,910 --> 00:00:58,859
to get right it's the identity and

00:00:56,850 --> 00:01:01,170
access management system for the Amazon

00:00:58,859 --> 00:01:02,760
Cloud pretty much everything that you're

00:01:01,170 --> 00:01:05,250
doing in Amazon Cloud is going to rely

00:01:02,760 --> 00:01:08,990
on AWS I am permissions at some point

00:01:05,250 --> 00:01:12,150
this is everything from your VMs running

00:01:08,990 --> 00:01:13,070
the workloads on them if you're running

00:01:12,150 --> 00:01:15,299
like lambda

00:01:13,070 --> 00:01:18,450
even some of the newer kubernetes

00:01:15,299 --> 00:01:21,180
constructs all rely on a two Bs I am to

00:01:18,450 --> 00:01:24,360
run this can be particularly difficult

00:01:21,180 --> 00:01:28,740
when it comes to your user management

00:01:24,360 --> 00:01:32,759
all of your users using AWS via either

00:01:28,740 --> 00:01:34,530
service accounts or their physical I am

00:01:32,759 --> 00:01:36,630
users are going to be using these

00:01:34,530 --> 00:01:37,650
policies in order to do everything so

00:01:36,630 --> 00:01:39,390
you always really want to make sure that

00:01:37,650 --> 00:01:44,030
these are really secure but it's not

00:01:39,390 --> 00:01:48,030
easy how do we end up with I am problems

00:01:44,030 --> 00:01:51,060
the granular permissions in aww or in

00:01:48,030 --> 00:01:53,340
AWS are really easy to target very

00:01:51,060 --> 00:01:54,390
specific things these very specific

00:01:53,340 --> 00:01:57,630
things you're trying to target are

00:01:54,390 --> 00:01:59,820
typically resources in AWS for the most

00:01:57,630 --> 00:02:01,469
parts it's particularly easy to target

00:01:59,820 --> 00:02:05,549
in a few things what happens is you end

00:02:01,469 --> 00:02:07,079
up going to production and you've you've

00:02:05,549 --> 00:02:09,810
missed some permit permissions in a

00:02:07,079 --> 00:02:12,739
lower level it can be really difficult

00:02:09,810 --> 00:02:12,739
to make sure that

00:02:13,210 --> 00:02:16,990
sorry it can be really difficult to make

00:02:15,220 --> 00:02:18,730
sure that you're targeting the right

00:02:16,990 --> 00:02:21,100
things and they don't have an over over

00:02:18,730 --> 00:02:23,170
accessible permissions when it comes to

00:02:21,100 --> 00:02:24,430
given these permissions to developers as

00:02:23,170 --> 00:02:26,020
someone in the DevOps role you're

00:02:24,430 --> 00:02:26,560
typically the gatekeeper for these kinds

00:02:26,020 --> 00:02:28,300
of things

00:02:26,560 --> 00:02:30,340
this usually means that you're the one

00:02:28,300 --> 00:02:31,540
we're reviewing PR you're the one trying

00:02:30,340 --> 00:02:33,130
to make sure that everything is going

00:02:31,540 --> 00:02:34,660
through smoothly and that interaction

00:02:33,130 --> 00:02:37,320
with your developers generally means

00:02:34,660 --> 00:02:39,100
that either you are overwhelmed at scale

00:02:37,320 --> 00:02:40,870
approving permissions that shouldn't

00:02:39,100 --> 00:02:42,340
really be there or that your developers

00:02:40,870 --> 00:02:43,750
are having difficulty figuring out the

00:02:42,340 --> 00:02:47,380
right permissions for their further

00:02:43,750 --> 00:02:48,760
objects taking a look at an example of

00:02:47,380 --> 00:02:51,130
the kind of documentation that you get

00:02:48,760 --> 00:02:52,450
for this the documentation when I first

00:02:51,130 --> 00:02:55,630
started this project was completely

00:02:52,450 --> 00:02:57,010
awful and scattershot there were bits

00:02:55,630 --> 00:02:59,440
and pieces about how I am worked

00:02:57,010 --> 00:03:02,050
everywhere there was a nice aggregation

00:02:59,440 --> 00:03:04,450
site called cloud or not I am that cloud

00:03:02,050 --> 00:03:06,550
not the IO was still kicking around it

00:03:04,450 --> 00:03:08,590
had some fairly basic information around

00:03:06,550 --> 00:03:10,690
how these permissions and what they

00:03:08,590 --> 00:03:13,650
could target worked but there was no

00:03:10,690 --> 00:03:15,880
real programmatic access for any of this

00:03:13,650 --> 00:03:17,260
you can see here that now they've kind

00:03:15,880 --> 00:03:18,190
of given you a little bit more

00:03:17,260 --> 00:03:20,860
information at least in the

00:03:18,190 --> 00:03:22,900
documentation as an example if any of

00:03:20,860 --> 00:03:24,430
you've used the s3 service in AWS you

00:03:22,900 --> 00:03:27,820
can do things like create buckets you

00:03:24,430 --> 00:03:30,790
can see here here that the resource

00:03:27,820 --> 00:03:32,320
types required for targeting a bucket is

00:03:30,790 --> 00:03:36,040
a bucket object you can see down below

00:03:32,320 --> 00:03:37,570
this is what a bucket looks like this

00:03:36,040 --> 00:03:40,570
basically gives you the conditions for

00:03:37,570 --> 00:03:42,150
when you're running this action that

00:03:40,570 --> 00:03:44,530
helps you lock down these in the in

00:03:42,150 --> 00:03:48,700
whatever way under the resource types

00:03:44,530 --> 00:03:50,470
and and condition keys there so you've

00:03:48,700 --> 00:03:53,110
got developers and you've got automation

00:03:50,470 --> 00:03:54,550
that really needs to start using this so

00:03:53,110 --> 00:03:57,580
you you generally tend to start putting

00:03:54,550 --> 00:04:02,140
objects together let's automate all of

00:03:57,580 --> 00:04:03,370
it this generally takes place in teams

00:04:02,140 --> 00:04:05,170
starting to build together stuff like

00:04:03,370 --> 00:04:07,690
cloud formation that certainly put

00:04:05,170 --> 00:04:09,130
together terraform projects those who

00:04:07,690 --> 00:04:10,720
are new to the cloud journey end up

00:04:09,130 --> 00:04:14,290
writing you know maybe some custom

00:04:10,720 --> 00:04:15,970
scripting a lot of stuff in in Python it

00:04:14,290 --> 00:04:17,200
ends up scaling quite quickly out of

00:04:15,970 --> 00:04:20,140
your control and can be really difficult

00:04:17,200 --> 00:04:22,050
to manage especially for a terraform for

00:04:20,140 --> 00:04:24,449
terraform there's some options for

00:04:22,050 --> 00:04:26,430
kicking around

00:04:24,449 --> 00:04:28,319
like doing validation like there's a

00:04:26,430 --> 00:04:29,669
project called terraform validate which

00:04:28,319 --> 00:04:31,229
would let you do basic things like

00:04:29,669 --> 00:04:33,300
making sure that certain standards are

00:04:31,229 --> 00:04:35,159
present in terraform making sure that

00:04:33,300 --> 00:04:36,569
certain variables are set but there's

00:04:35,159 --> 00:04:37,860
nothing that really lets you dig into

00:04:36,569 --> 00:04:40,499
the nitty-gritty of how these things

00:04:37,860 --> 00:04:43,590
should be set up and then once you're

00:04:40,499 --> 00:04:47,520
done setting it all up knock knock who's

00:04:43,590 --> 00:04:49,080
there it's security generally security

00:04:47,520 --> 00:04:51,330
comes knocking on your door asking hey

00:04:49,080 --> 00:04:52,949
we want to prevent certain things from

00:04:51,330 --> 00:04:54,719
happening or we want to make sure that

00:04:52,949 --> 00:04:57,810
when people are writing policies that

00:04:54,719 --> 00:05:00,300
they're adhering to the sort of

00:04:57,810 --> 00:05:01,860
standards that they set as a security

00:05:00,300 --> 00:05:03,319
team new to the cloud a lot of the

00:05:01,860 --> 00:05:10,259
troubles that we've had in the past are

00:05:03,319 --> 00:05:11,610
issues we're sorry a lot of the issues

00:05:10,259 --> 00:05:13,469
that numerous security teams have had in

00:05:11,610 --> 00:05:15,539
the cloud are things like they're not

00:05:13,469 --> 00:05:16,889
entirely sure how AWS works they're not

00:05:15,539 --> 00:05:18,930
entirely sure how to create this

00:05:16,889 --> 00:05:21,990
programmatic constructs and they're not

00:05:18,930 --> 00:05:25,139
sure how to add this without going

00:05:21,990 --> 00:05:26,819
completely mad this is a big issue when

00:05:25,139 --> 00:05:29,610
it comes to things like breaches as we

00:05:26,819 --> 00:05:32,219
saw in the ethical constraints talked

00:05:29,610 --> 00:05:33,930
before breaches do happen and when they

00:05:32,219 --> 00:05:35,909
do you really want to limit the amount

00:05:33,930 --> 00:05:37,740
of stuff that can happen so let's take a

00:05:35,909 --> 00:05:40,500
look at what are we looking for in terms

00:05:37,740 --> 00:05:42,779
of requirements we're really looking for

00:05:40,500 --> 00:05:44,550
a flexible testing framework we're

00:05:42,779 --> 00:05:46,199
looking for something where we can push

00:05:44,550 --> 00:05:49,139
the quality left we want to be able to

00:05:46,199 --> 00:05:50,789
run those tests in in pipelines when

00:05:49,139 --> 00:05:52,139
developers are creating code when

00:05:50,789 --> 00:05:54,659
they're fit DevOps team are writing

00:05:52,139 --> 00:05:58,460
their terraform and ideally we want a

00:05:54,659 --> 00:06:00,479
programmatic data for validations now

00:05:58,460 --> 00:06:01,830
how can I build a programmatic

00:06:00,479 --> 00:06:04,349
definition for something that's just a

00:06:01,830 --> 00:06:05,699
bunch HTML tables those of you have been

00:06:04,349 --> 00:06:08,520
using a Python for a while there's a

00:06:05,699 --> 00:06:12,479
hint in the icon hands up

00:06:08,520 --> 00:06:15,629
beautiful soup so we've gone and scraped

00:06:12,479 --> 00:06:16,919
the AWS documentation we've gone and

00:06:15,629 --> 00:06:18,810
scraped out all of those beautiful

00:06:16,919 --> 00:06:21,330
little definitions we saw in tables and

00:06:18,810 --> 00:06:23,669
we've used those to build a skeleton

00:06:21,330 --> 00:06:25,469
framework that says hey when I'm running

00:06:23,669 --> 00:06:27,560
these actions these are the kind of

00:06:25,469 --> 00:06:31,919
conditions you should be looking for

00:06:27,560 --> 00:06:33,209
it's not pretty it's not great but until

00:06:31,919 --> 00:06:35,219
a dbx kind of gets their stuff together

00:06:33,209 --> 00:06:37,649
it's probably the most reasonable thing

00:06:35,219 --> 00:06:38,009
that we can do when we start putting

00:06:37,649 --> 00:06:39,539
these

00:06:38,009 --> 00:06:42,960
altogether this is what the output looks

00:06:39,539 --> 00:06:45,869
like we've got the definition of an AWS

00:06:42,960 --> 00:06:47,729
action we've got some metadata around it

00:06:45,869 --> 00:06:51,029
we've got what a resource condition

00:06:47,729 --> 00:06:55,499
looks like and the resources that it can

00:06:51,029 --> 00:06:57,529
target as we can see here we've got s3

00:06:55,499 --> 00:07:03,089
buckets create buckets can target things

00:06:57,529 --> 00:07:05,279
in a standard AWS a RN this basically

00:07:03,089 --> 00:07:08,759
says that hey you can lock down this

00:07:05,279 --> 00:07:11,399
exact Ock this exact action to this

00:07:08,759 --> 00:07:12,689
exact target so how do we start putting

00:07:11,399 --> 00:07:14,969
that together how do we find a nice

00:07:12,689 --> 00:07:16,020
flexible framework those of you have

00:07:14,969 --> 00:07:19,050
been in Python for a while

00:07:16,020 --> 00:07:21,719
PI tests I was really surprised when I

00:07:19,050 --> 00:07:24,120
found out about this PI test supports

00:07:21,719 --> 00:07:26,819
testing things more than just Python

00:07:24,120 --> 00:07:28,589
files there's some custom collectors you

00:07:26,819 --> 00:07:31,529
can write in PI tests that allow you to

00:07:28,589 --> 00:07:33,779
basically scrape anything for those of

00:07:31,529 --> 00:07:35,969
you who may be the Python person in your

00:07:33,779 --> 00:07:38,580
team this can help drive your teammates

00:07:35,969 --> 00:07:39,990
nuts when you find out that you can run

00:07:38,580 --> 00:07:42,300
Python against anything that they're

00:07:39,990 --> 00:07:44,219
right but it really Nets

00:07:42,300 --> 00:07:47,580
lets you do some nice flexible and

00:07:44,219 --> 00:07:49,830
modular configuration of of tariffs on

00:07:47,580 --> 00:07:51,959
there and it's easy to write the nice

00:07:49,830 --> 00:07:53,339
thing about those PI tests tests is that

00:07:51,959 --> 00:07:55,469
there's stuff that you can share with

00:07:53,339 --> 00:07:57,870
the other non-traditional developers in

00:07:55,469 --> 00:07:58,889
your group stuff like I've had security

00:07:57,870 --> 00:08:01,919
people can understand and write these

00:07:58,889 --> 00:08:03,599
tests someone I've even had some product

00:08:01,919 --> 00:08:05,759
owners and project managers who can go

00:08:03,599 --> 00:08:06,870
and you know reasonably valid a like hey

00:08:05,759 --> 00:08:08,009
these are the kind of tests that we're

00:08:06,870 --> 00:08:11,819
looking for these are the kind of tests

00:08:08,009 --> 00:08:14,819
that we're writing so we let's go and

00:08:11,819 --> 00:08:18,300
write at PI test plugin for this PI test

00:08:14,819 --> 00:08:20,699
plugins are fairly simple they leverage

00:08:18,300 --> 00:08:23,099
a powerful Python construct in setup

00:08:20,699 --> 00:08:24,930
tools called an entry point entry point

00:08:23,099 --> 00:08:28,620
says that hey whenever I'm running this

00:08:24,930 --> 00:08:30,779
script these are the sort of plugin

00:08:28,620 --> 00:08:35,120
interaction points that you can add you

00:08:30,779 --> 00:08:37,979
leverage the Python 1:1 entry point to

00:08:35,120 --> 00:08:40,050
basically add some hooks into the the

00:08:37,979 --> 00:08:42,120
file collection that says hey whenever

00:08:40,050 --> 00:08:44,850
you're looking for tests PI tests you

00:08:42,120 --> 00:08:46,019
can also call me give me a list of files

00:08:44,850 --> 00:08:49,110
and I'll tell you whether or not these

00:08:46,019 --> 00:08:52,110
passed muster or not in this we use it

00:08:49,110 --> 00:08:54,990
the PI test collect file function

00:08:52,110 --> 00:08:56,850
in your plugin you overwrite that you

00:08:54,990 --> 00:08:58,290
basically say hey if the pile if the

00:08:56,850 --> 00:09:01,019
path extension there's a terraform file

00:08:58,290 --> 00:09:01,290
we're going to return a HCL file around

00:09:01,019 --> 00:09:04,550
it

00:09:01,290 --> 00:09:06,810
HDL file is just a wrapper around the

00:09:04,550 --> 00:09:10,050
standard Python class that defines a

00:09:06,810 --> 00:09:14,819
file type sorry a standard PI test class

00:09:10,050 --> 00:09:18,990
that defines a file type as part of this

00:09:14,819 --> 00:09:20,610
HDL file you're required to yield this

00:09:18,990 --> 00:09:23,189
yield basically allows you to do a

00:09:20,610 --> 00:09:24,889
programmatic set of tests you yield for

00:09:23,189 --> 00:09:28,620
each test that you want to run against

00:09:24,889 --> 00:09:32,819
the thing that you're yielding is a PI

00:09:28,620 --> 00:09:36,509
test item PI test items are basically an

00:09:32,819 --> 00:09:38,850
overload of the the built-in PI tests

00:09:36,509 --> 00:09:40,050
item for running tests against this

00:09:38,850 --> 00:09:42,000
basically lets you programmatically

00:09:40,050 --> 00:09:43,889
define this is how I want my tests and

00:09:42,000 --> 00:09:46,019
look and these are these sort of

00:09:43,889 --> 00:09:48,750
conditions around it if your

00:09:46,019 --> 00:09:50,370
sub-classing it's make sure you an it

00:09:48,750 --> 00:09:51,930
and pass in some extra stuff in this

00:09:50,370 --> 00:09:54,449
case we're basically saying hey when I

00:09:51,930 --> 00:09:56,850
pass in some additional spec from the

00:09:54,449 --> 00:09:58,920
parent object and then we define a few

00:09:56,850 --> 00:10:01,319
things that help this plugin just look

00:09:58,920 --> 00:10:04,410
nicer so run test is the fun thing that

00:10:01,319 --> 00:10:06,120
runs the tests and we've got repre repre

00:10:04,410 --> 00:10:08,040
fire is a representation of the fair

00:10:06,120 --> 00:10:09,120
that comes through this basically says

00:10:08,040 --> 00:10:11,370
you know if we're raising an exception

00:10:09,120 --> 00:10:12,689
downstream this is how you make it look

00:10:11,370 --> 00:10:15,600
nice this is how you make it presentable

00:10:12,689 --> 00:10:17,879
in a and a PI test format we've also got

00:10:15,600 --> 00:10:19,740
report info report info is crucial for

00:10:17,879 --> 00:10:22,439
if you're doing any kind of custom PI

00:10:19,740 --> 00:10:25,949
test collection report info says when

00:10:22,439 --> 00:10:28,519
this information comes back be it pass

00:10:25,949 --> 00:10:31,199
or fail what is the metadata around that

00:10:28,519 --> 00:10:32,759
this is crucial for stuff like terraform

00:10:31,199 --> 00:10:35,309
because if I just say hey as three

00:10:32,759 --> 00:10:36,779
violations somewhere no idea this

00:10:35,309 --> 00:10:38,399
basically lets us say like hey in this

00:10:36,779 --> 00:10:39,959
particular standard of our terraform

00:10:38,399 --> 00:10:43,649
this is where we're running into the

00:10:39,959 --> 00:10:45,000
issue around this terraform stuff

00:10:43,649 --> 00:10:47,250
the reason that we're targeting

00:10:45,000 --> 00:10:48,689
terraform first is it was very easy to

00:10:47,250 --> 00:10:50,879
support for it out of the out of the

00:10:48,689 --> 00:10:52,470
base these patterns are very easily

00:10:50,879 --> 00:10:54,149
extendable to your other definition

00:10:52,470 --> 00:10:56,309
stuff like cloud formation is some

00:10:54,149 --> 00:11:00,240
pretty standard yamo but today we'll be

00:10:56,309 --> 00:11:01,949
demoing the pi HCL pi HCL is basically a

00:11:00,240 --> 00:11:04,889
library for parsing the hash of

00:11:01,949 --> 00:11:05,220
configuration language version one when

00:11:04,889 --> 00:11:07,769
I

00:11:05,220 --> 00:11:12,180
started this project terraform Oda at 11

00:11:07,769 --> 00:11:14,250
was in its heyday with Tara from 12 sort

00:11:12,180 --> 00:11:16,139
of looming in the future that would had

00:11:14,250 --> 00:11:17,639
been looming in the future for so long

00:11:16,139 --> 00:11:21,000
that we kind of ignored it and of course

00:11:17,639 --> 00:11:23,699
like two months ago Tara from Oda 12

00:11:21,000 --> 00:11:25,500
that's a new language support for that

00:11:23,699 --> 00:11:28,649
it's coming upstream but something we

00:11:25,500 --> 00:11:30,839
don't deal with yet this basically gives

00:11:28,649 --> 00:11:32,850
us simple parsing of terraform objects

00:11:30,839 --> 00:11:34,589
into a dictionary we can use that

00:11:32,850 --> 00:11:36,660
dictionary when we start scraping these

00:11:34,589 --> 00:11:39,509
objects for testing to give us a

00:11:36,660 --> 00:11:41,790
standard report back so how do we put it

00:11:39,509 --> 00:11:43,170
together it's fairly simple

00:11:41,790 --> 00:11:44,519
you basically publish a module or

00:11:43,170 --> 00:11:46,740
somewhere be it you know if it's an

00:11:44,519 --> 00:11:48,089
internal repo and to get if you want to

00:11:46,740 --> 00:11:51,449
contribute something back to the

00:11:48,089 --> 00:11:53,610
community it's a PI test plug-in pop it

00:11:51,449 --> 00:11:57,089
onto two pi PI anywhere you want to pop

00:11:53,610 --> 00:11:59,670
it in terms of using this locally all

00:11:57,089 --> 00:12:01,910
you really have to do as a consumer is

00:11:59,670 --> 00:12:03,930
install PI test and install a plug-in

00:12:01,910 --> 00:12:05,939
this basically means any time you're

00:12:03,930 --> 00:12:08,250
running put PI tests that collection

00:12:05,939 --> 00:12:09,959
will start getting run super easy for

00:12:08,250 --> 00:12:11,189
your developers one of the big things

00:12:09,959 --> 00:12:13,230
that we really want to focus on was

00:12:11,189 --> 00:12:15,449
making sure that there's a smooth

00:12:13,230 --> 00:12:18,449
developer experience you just want PI

00:12:15,449 --> 00:12:22,110
tests you can see here this is an action

00:12:18,449 --> 00:12:26,970
that we're running it's basically a app

00:12:22,110 --> 00:12:28,319
icon oh sorry I'm a PI test that's

00:12:26,970 --> 00:12:31,829
running against a couple terraform

00:12:28,319 --> 00:12:34,110
things will show back the results we can

00:12:31,829 --> 00:12:36,180
see one pass one failure and we can see

00:12:34,110 --> 00:12:37,350
where that failure happens I'll go be

00:12:36,180 --> 00:12:40,860
I'll be going through the code for that

00:12:37,350 --> 00:12:42,620
in a demo in about a minute so the

00:12:40,860 --> 00:12:45,180
requirements have we hit all of them

00:12:42,620 --> 00:12:47,220
we've got a flexible testing framework

00:12:45,180 --> 00:12:49,259
we've got something that can run in a CI

00:12:47,220 --> 00:12:51,120
pipeline and we've got some programmatic

00:12:49,259 --> 00:12:52,949
data for validations we've built that

00:12:51,120 --> 00:12:55,500
programmatic data but that's okay it

00:12:52,949 --> 00:12:59,699
fits so what have we learned from all of

00:12:55,500 --> 00:13:02,490
this HTML documentation can mean we were

00:12:59,699 --> 00:13:04,620
workable with Python the original in

00:13:02,490 --> 00:13:06,000
intention for this was just to help out

00:13:04,620 --> 00:13:07,920
my team with the terraform that they

00:13:06,000 --> 00:13:09,720
were writing we quickly found that this

00:13:07,920 --> 00:13:12,569
stuff could be used and extended for

00:13:09,720 --> 00:13:14,610
quite a few other kind of files it's

00:13:12,569 --> 00:13:15,720
very very powerful and something that I

00:13:14,610 --> 00:13:18,029
really like to see people start using

00:13:15,720 --> 00:13:18,540
more in the future so let's take a look

00:13:18,029 --> 00:13:21,170
at how

00:13:18,540 --> 00:13:21,170
the stuff is put together

00:13:40,600 --> 00:13:48,290
three so we've got our plugin dot pi

00:13:45,020 --> 00:13:50,450
plugin that pi is where the both of your

00:13:48,290 --> 00:13:52,880
plug-in configuration and code is going

00:13:50,450 --> 00:13:54,770
to be we do a few things in this file

00:13:52,880 --> 00:13:56,930
here too and basically get the entire

00:13:54,770 --> 00:13:58,820
environment set up we define things like

00:13:56,930 --> 00:14:00,140
the PI test collect file where we go and

00:13:58,820 --> 00:14:04,580
validate what files we want to test

00:14:00,140 --> 00:14:07,010
against we define that HCl file as a

00:14:04,580 --> 00:14:08,660
subclass from PI test dot file this

00:14:07,010 --> 00:14:10,760
basically allows us to programmatically

00:14:08,660 --> 00:14:14,120
present files as objects back to PI

00:14:10,760 --> 00:14:16,190
tests on that is a collect action or a

00:14:14,120 --> 00:14:18,860
function this basically is where we

00:14:16,190 --> 00:14:19,730
start looking at our HCl this is ideally

00:14:18,860 --> 00:14:21,649
where you want to start validating

00:14:19,730 --> 00:14:23,690
whether or not those files that you're

00:14:21,649 --> 00:14:24,740
collecting start having information

00:14:23,690 --> 00:14:27,649
inside them that you can validate

00:14:24,740 --> 00:14:30,470
against is perfectly fine as a PI test

00:14:27,649 --> 00:14:31,520
plug-in to scrape and accept a lot more

00:14:30,470 --> 00:14:34,880
files than you can handle

00:14:31,520 --> 00:14:35,779
and then just poke at them see if

00:14:34,880 --> 00:14:37,240
they've got something interesting for

00:14:35,779 --> 00:14:40,940
you to validate against and if they do

00:14:37,240 --> 00:14:42,470
yield a test here we've got our IM

00:14:40,940 --> 00:14:44,209
policy document this is where we're

00:14:42,470 --> 00:14:47,120
yielding that object to give us a Python

00:14:44,209 --> 00:14:50,660
tests and then down here we've got our

00:14:47,120 --> 00:14:52,339
actual subclass PI test item this gives

00:14:50,660 --> 00:14:54,200
us a few things like the the run test

00:14:52,339 --> 00:14:56,240
the repre file yer and the report info

00:14:54,200 --> 00:14:57,529
you can see that our run tests here

00:14:56,240 --> 00:14:59,150
where basically we've built a little

00:14:57,529 --> 00:15:04,100
validator that can go and validate those

00:14:59,150 --> 00:15:05,390
IM statements the sort of standard for

00:15:04,100 --> 00:15:06,680
operating with these is that if

00:15:05,390 --> 00:15:09,470
something goes wrong you're raising the

00:15:06,680 --> 00:15:11,480
exception here we're just waiting run

00:15:09,470 --> 00:15:13,220
the validator and if it accepts then

00:15:11,480 --> 00:15:16,220
cool we're gonna handle that report info

00:15:13,220 --> 00:15:17,630
in the retrofire external exceptions can

00:15:16,220 --> 00:15:21,740
be a little bit trickier to run and

00:15:17,630 --> 00:15:24,610
manage there's a few taste sorry a few

00:15:21,740 --> 00:15:27,650
test cases that I ran into here we're

00:15:24,610 --> 00:15:31,100
testing pi tests with pi tests can run

00:15:27,650 --> 00:15:32,300
into some recursive issues when you do

00:15:31,100 --> 00:15:33,829
get those kind of failures you'll see

00:15:32,300 --> 00:15:36,529
those as big stack traces but that's

00:15:33,829 --> 00:15:42,560
fine then we've got our report failures

00:15:36,529 --> 00:15:45,110
down below we can see here that we've

00:15:42,560 --> 00:15:47,000
got our validation our validation for

00:15:45,110 --> 00:15:49,490
this is fairly simple as it's a sort of

00:15:47,000 --> 00:15:51,440
a sample project here we've got our I am

00:15:49,490 --> 00:15:53,649
validator we've got our little I am

00:15:51,440 --> 00:15:55,839
Jason that we built that spec from

00:15:53,649 --> 00:15:57,819
scraping the HTML and then we just

00:15:55,839 --> 00:15:59,470
basically do some simple validation if

00:15:57,819 --> 00:16:01,269
it's got a resource that we can validate

00:15:59,470 --> 00:16:04,269
we'll dig through it check out some

00:16:01,269 --> 00:16:05,860
logic to say like hey does this action

00:16:04,269 --> 00:16:08,139
have a resource condition that we can

00:16:05,860 --> 00:16:09,430
validate against if it doesn't skip it

00:16:08,139 --> 00:16:11,860
nothing we can really check against if

00:16:09,430 --> 00:16:13,480
it does cool warned them with an

00:16:11,860 --> 00:16:15,550
exception that hey we've run into an

00:16:13,480 --> 00:16:22,809
issue where you could be locking down

00:16:15,550 --> 00:16:25,319
this permission but you're not as part

00:16:22,809 --> 00:16:28,480
of that you can run tests in your Python

00:16:25,319 --> 00:16:29,679
high test plugins with just simple stuff

00:16:28,480 --> 00:16:32,199
like go and validate that your stuff's

00:16:29,679 --> 00:16:40,480
working we can take a look at what this

00:16:32,199 --> 00:16:47,379
looks like on the target level so as a

00:16:40,480 --> 00:16:48,519
developer or a DevOps person maybe I'm

00:16:47,379 --> 00:16:49,119
gonna be writing a whole bunch of

00:16:48,519 --> 00:16:51,249
terraform

00:16:49,119 --> 00:16:55,059
that basically has these policies built

00:16:51,249 --> 00:16:57,129
in this is a very simple one with a

00:16:55,059 --> 00:16:59,470
resource target that says hey allow

00:16:57,129 --> 00:17:02,019
create bucket against this very specific

00:16:59,470 --> 00:17:04,569
AR n this is a perfectly valid one that

00:17:02,019 --> 00:17:09,189
we expect to pass compared to something

00:17:04,569 --> 00:17:11,890
like this where this is a s3 create

00:17:09,189 --> 00:17:13,089
bucket with with star permissions this

00:17:11,890 --> 00:17:15,730
is something that we very explicitly

00:17:13,089 --> 00:17:17,260
don't want to allow there are so back

00:17:15,730 --> 00:17:19,149
and forth when it comes to a device I am

00:17:17,260 --> 00:17:20,799
s3 buckets can have their own policy

00:17:19,149 --> 00:17:22,839
permissions so this stuff tends to be a

00:17:20,799 --> 00:17:26,699
little bit more useful for a little bit

00:17:22,839 --> 00:17:26,699
more open actions like ec2 you actions

00:17:29,010 --> 00:17:34,830
and will just quickly pop in and run a

00:17:31,659 --> 00:17:34,830
quick demo

00:17:41,260 --> 00:17:45,049
so as you can see here we've got our

00:17:43,190 --> 00:17:49,100
little repo with our to terraform files

00:17:45,049 --> 00:17:50,840
to find and we're on high just boom so

00:17:49,100 --> 00:17:52,790
we can see that the in the clothes

00:17:50,840 --> 00:17:55,100
resources terraform we've got one pass

00:17:52,790 --> 00:17:57,530
in the open resources terraform we've

00:17:55,100 --> 00:17:59,540
got one failure down here we can see

00:17:57,530 --> 00:18:01,400
that metadata information that we

00:17:59,540 --> 00:18:04,730
populated previously in that PI test

00:18:01,400 --> 00:18:06,920
plugin so hey under that resource s3

00:18:04,730 --> 00:18:08,690
open bucket policy we can see that that

00:18:06,920 --> 00:18:10,400
failure is happening here and this is

00:18:08,690 --> 00:18:11,660
the failure that we've got s3 create

00:18:10,400 --> 00:18:13,370
bucket we've specified a region or a

00:18:11,660 --> 00:18:15,559
star but it actually supports this air

00:18:13,370 --> 00:18:17,600
and condition and so a developer or a

00:18:15,559 --> 00:18:19,460
DevOps can take a look at this exact

00:18:17,600 --> 00:18:23,090
failure and say cool I've got an issue

00:18:19,460 --> 00:18:27,290
with s3 open bucket policy pop back to

00:18:23,090 --> 00:18:37,540
my code close this useless thing and

00:18:27,290 --> 00:18:37,540
there we go and that's it for the demo

00:18:41,290 --> 00:18:52,220
any questions there a microphone so one

00:18:50,210 --> 00:18:53,960
of the things about detecting this is

00:18:52,220 --> 00:18:55,160
that if you flag a whole bunch of

00:18:53,960 --> 00:18:56,390
security things then you have to give it

00:18:55,160 --> 00:18:59,990
to people they have to go fix it could

00:18:56,390 --> 00:19:02,390
you programmatically just fix it like

00:18:59,990 --> 00:19:04,610
that's not a bucket or not don't know

00:19:02,390 --> 00:19:06,410
because we have a standard policy of how

00:19:04,610 --> 00:19:09,640
you should fix that so just just fix it

00:19:06,410 --> 00:19:12,500
don't don't make me code extra stuff yes

00:19:09,640 --> 00:19:13,790
the only problem is that if you

00:19:12,500 --> 00:19:15,500
programmatically fix it

00:19:13,790 --> 00:19:17,090
sometimes you can be catching it too

00:19:15,500 --> 00:19:19,669
late or too far in the development

00:19:17,090 --> 00:19:20,960
process the idea for this is that it

00:19:19,669 --> 00:19:24,770
should be complementing whatever you're

00:19:20,960 --> 00:19:26,780
running in your production runtime we've

00:19:24,770 --> 00:19:28,220
had issues or sorry we've had set up

00:19:26,780 --> 00:19:30,470
before we've got stuff like a DB O's

00:19:28,220 --> 00:19:32,120
config rules are a really good way to go

00:19:30,470 --> 00:19:34,520
and scan resources and you know

00:19:32,120 --> 00:19:35,330
programmatically lock them down but if

00:19:34,520 --> 00:19:37,460
you're always doing that in the

00:19:35,330 --> 00:19:40,070
production and developers never have to

00:19:37,460 --> 00:19:41,900
learn this is what a proper I in policy

00:19:40,070 --> 00:19:43,220
looks like then you're relying on your

00:19:41,900 --> 00:19:46,010
automation to make things good instead

00:19:43,220 --> 00:19:48,400
of your development practices so yes but

00:19:46,010 --> 00:19:48,400
do both

00:19:49,970 --> 00:19:59,149
any other questions so in relation to

00:19:56,659 --> 00:20:00,259
this you're testing the instructions

00:19:59,149 --> 00:20:01,820
that will eventually build the

00:20:00,259 --> 00:20:03,830
environments do you have you

00:20:01,820 --> 00:20:07,190
investigated any tests to see if

00:20:03,830 --> 00:20:08,750
anybody's bad bad deployment practices

00:20:07,190 --> 00:20:12,559
and actually put those rules into the

00:20:08,750 --> 00:20:15,320
wild to solve some problems sorry can

00:20:12,559 --> 00:20:16,639
you repeat the question are you two

00:20:15,320 --> 00:20:19,850
actually testing against what's

00:20:16,639 --> 00:20:22,490
implemented as well about the code

00:20:19,850 --> 00:20:24,710
that's actually gone out yeah not with

00:20:22,490 --> 00:20:27,889
this this would be just as part of a CI

00:20:24,710 --> 00:20:29,870
pipeline we did introduce it at a bank

00:20:27,889 --> 00:20:34,850
that I worked at previously as part of a

00:20:29,870 --> 00:20:36,559
basic CI system but it doesn't run

00:20:34,850 --> 00:20:44,029
against production Vil but it will stop

00:20:36,559 --> 00:20:46,250
stuff from going to production no more

00:20:44,029 --> 00:20:48,610
questions at all awesome thank you

00:20:46,250 --> 00:20:56,509
you're all brilliant today WF identity

00:20:48,610 --> 00:20:59,220
because I'm not so you want to thank

00:20:56,509 --> 00:21:05,470
Sean enjoy your mug

00:20:59,220 --> 00:21:05,470

YouTube URL: https://www.youtube.com/watch?v=X2RM16AbbFM


