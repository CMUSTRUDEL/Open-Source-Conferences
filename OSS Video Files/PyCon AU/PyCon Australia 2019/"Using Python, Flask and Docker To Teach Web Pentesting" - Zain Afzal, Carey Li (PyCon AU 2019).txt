Title: "Using Python, Flask and Docker To Teach Web Pentesting" - Zain Afzal, Carey Li (PyCon AU 2019)
Publication date: 2019-08-02
Playlist: PyCon Australia 2019
Description: 
	Zain Afzal, Carey Li

Having to teach 70 or so students how to break into websites involves building infrastructure to host a lot of websites which are designed to be hacked, poked, prodded and brute forced. Hear us talk about how we were able to keep up thanks to python + friends!

https://2019.pycon-au.org/talks/using-python-flask-and-docker-to-teach-web-pentesting

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 2 - 6 2019.

Video licence: CC BY-NC-SA 4.0 - https://creativecommons.org/licenses/by-nc-sa/4.0/

Python, PyCon, PyConAU

Fri Aug  2 14:10:00 2019 at C3.4 & C3.5
Captions: 
	00:00:00,000 --> 00:00:04,950
it's way up there we go we've got some

00:00:01,500 --> 00:00:07,830
volume excellent welcome to the next

00:00:04,950 --> 00:00:10,019
talk this afternoon and a talk that I

00:00:07,830 --> 00:00:13,019
think has a foot in a few different

00:00:10,019 --> 00:00:14,730
tracks today so here in the education

00:00:13,019 --> 00:00:16,529
track but I'm sure this is probably of

00:00:14,730 --> 00:00:19,020
interest to people in a security track

00:00:16,529 --> 00:00:21,630
and also potentially at django con so

00:00:19,020 --> 00:00:23,699
it's good to have Jane and Carrie here

00:00:21,630 --> 00:00:27,080
longtime lovers of Python security in

00:00:23,699 --> 00:00:29,510
recent lover of hot cross buns is yeah

00:00:27,080 --> 00:00:31,769
they're going to be talking to us about

00:00:29,510 --> 00:00:33,840
using Python flask and docker to teach

00:00:31,769 --> 00:00:35,790
web pentesting I'm gonna hand over to

00:00:33,840 --> 00:00:38,219
them and I'll be back at the end to they

00:00:35,790 --> 00:00:40,230
do intend to take questions so if you do

00:00:38,219 --> 00:00:41,790
if anything comes up yeah store it in

00:00:40,230 --> 00:00:43,200
your brain and ask that burning question

00:00:41,790 --> 00:00:43,649
at the end of the presentation great

00:00:43,200 --> 00:00:49,140
thanks guys

00:00:43,649 --> 00:00:51,480
thank you so we sort of an introduction

00:00:49,140 --> 00:00:53,190
I guess first I'm Zen I'm the one on

00:00:51,480 --> 00:00:55,770
your left

00:00:53,190 --> 00:00:58,710
I do work sometimes that's true and I'm

00:00:55,770 --> 00:01:01,410
Carrie and I hold dogs as much as you

00:00:58,710 --> 00:01:03,989
need to know about us so you know I'm

00:01:01,410 --> 00:01:06,659
saying that's Carrie we ran a

00:01:03,989 --> 00:01:08,369
cybersecurity course at a Eunice W so

00:01:06,659 --> 00:01:09,659
you know we were picturing at university

00:01:08,369 --> 00:01:11,640
students and sort of trying to teach

00:01:09,659 --> 00:01:13,200
them about how to break various websites

00:01:11,640 --> 00:01:15,630
different vulnerabilities that you can

00:01:13,200 --> 00:01:17,400
have and the course structure of this

00:01:15,630 --> 00:01:19,680
course was we had lectures and labs

00:01:17,400 --> 00:01:21,210
wargames which is more or less just an

00:01:19,680 --> 00:01:23,369
assignment where we release a website

00:01:21,210 --> 00:01:25,470
and we tell the students break it and

00:01:23,369 --> 00:01:28,020
when you break it tell us how you did it

00:01:25,470 --> 00:01:29,850
and you get marks right and then we also

00:01:28,020 --> 00:01:31,200
had some exams which were more or less

00:01:29,850 --> 00:01:34,380
on the same vein it was a very practical

00:01:31,200 --> 00:01:36,000
course and we found that the most

00:01:34,380 --> 00:01:37,590
effective way of teaching security is

00:01:36,000 --> 00:01:40,650
hands-on practice that's something we're

00:01:37,590 --> 00:01:42,240
very firm believers of so we really just

00:01:40,650 --> 00:01:43,290
wanted these students to hack all these

00:01:42,240 --> 00:01:44,909
sites and maybe fix some of the

00:01:43,290 --> 00:01:45,930
vulnerabilities and we thought that

00:01:44,909 --> 00:01:48,110
would be a good way to teach them how

00:01:45,930 --> 00:01:50,790
those sort of web works in the landscape

00:01:48,110 --> 00:01:53,189
the issue with that is that we created

00:01:50,790 --> 00:01:55,110
something along the lines of 65 websites

00:01:53,189 --> 00:01:56,969
over this course each of them

00:01:55,110 --> 00:02:00,899
independent with their own set of

00:01:56,969 --> 00:02:02,549
vulnerabilities and that was hard like

00:02:00,899 --> 00:02:04,500
the team was not massive we didn't have

00:02:02,549 --> 00:02:06,750
you know like Atlassian in our backyard

00:02:04,500 --> 00:02:08,489
so we kind of had this made a small team

00:02:06,750 --> 00:02:10,679
to manage 65 website saying at the more

00:02:08,489 --> 00:02:11,700
live and also maintain them because

00:02:10,679 --> 00:02:15,120
these were present be up

00:02:11,700 --> 00:02:16,800
or like more or less a semester right so

00:02:15,120 --> 00:02:18,150
it was very difficult it would have been

00:02:16,800 --> 00:02:21,060
somewhat impossible without automation

00:02:18,150 --> 00:02:23,280
so we use docker and flask and a lot of

00:02:21,060 --> 00:02:25,470
- to sort of make this all somewhat

00:02:23,280 --> 00:02:27,330
automated and when you're teaching a

00:02:25,470 --> 00:02:28,890
security course websites that I meant to

00:02:27,330 --> 00:02:31,170
break students tend to break them in

00:02:28,890 --> 00:02:32,760
ways you don't expect as well so like

00:02:31,170 --> 00:02:44,580
we're how sites just go offline because

00:02:32,760 --> 00:02:46,080
we it's a delicate balance to give them

00:02:44,580 --> 00:02:47,549
just enough power to break it a little

00:02:46,080 --> 00:02:50,760
bit but not enough to completely take it

00:02:47,549 --> 00:02:53,849
down so yes like within the first couple

00:02:50,760 --> 00:02:55,140
weeks who are overworked and we kind of

00:02:53,849 --> 00:02:56,640
like we're patching along this

00:02:55,140 --> 00:02:58,890
infrastructure as we were going on to

00:02:56,640 --> 00:03:01,370
try and like keep up and this

00:02:58,890 --> 00:03:03,269
presentation is going to be very sort of

00:03:01,370 --> 00:03:04,319
disjoint and what we're gonna do is

00:03:03,269 --> 00:03:06,209
gonna talk about what we did and

00:03:04,319 --> 00:03:07,620
immediately what went wrong and then how

00:03:06,209 --> 00:03:08,700
we solved it so we thought it would be

00:03:07,620 --> 00:03:10,230
more interesting if we just went through

00:03:08,700 --> 00:03:11,610
here's what went wrong here's how we

00:03:10,230 --> 00:03:12,959
fixed it and sort of dealt with it

00:03:11,610 --> 00:03:14,430
I mean sort of the lessons we learnt

00:03:12,959 --> 00:03:16,139
along the way and I thought that might

00:03:14,430 --> 00:03:18,630
be quite interesting so that's sort of

00:03:16,139 --> 00:03:19,950
the structure onion thus we started

00:03:18,630 --> 00:03:22,200
building out and we ended up with a

00:03:19,950 --> 00:03:24,440
somewhat well-oiled machine pumping out

00:03:22,200 --> 00:03:24,440
sites

00:03:48,470 --> 00:03:51,930
yes I maybe this is a bit of a midpoint

00:03:50,579 --> 00:03:53,400
but it's there if you're curious about

00:03:51,930 --> 00:03:54,510
what these sites look like we kind of

00:03:53,400 --> 00:03:57,599
launched to them just so you can take a

00:03:54,510 --> 00:04:00,870
look at them good okay so let's talk

00:03:57,599 --> 00:04:02,280
about code our first problem that we

00:04:00,870 --> 00:04:03,930
encountered very quickly is we had to

00:04:02,280 --> 00:04:05,819
write a lot of code and we did not have

00:04:03,930 --> 00:04:08,069
a lot of time so sort of the first thing

00:04:05,819 --> 00:04:10,950
we did was kind of come over the tech

00:04:08,069 --> 00:04:12,780
stack yeah so if I text that arm Italian

00:04:10,950 --> 00:04:15,060
guess that we use pipe in flask and

00:04:12,780 --> 00:04:18,060
docker so pretty much pipe in flask form

00:04:15,060 --> 00:04:20,549
the web applications if if we needed a

00:04:18,060 --> 00:04:22,260
database we had Postgres and everything

00:04:20,549 --> 00:04:26,430
goes back in da cart and it was all

00:04:22,260 --> 00:04:28,560
orchestrated in docker compose yeah no

00:04:26,430 --> 00:04:30,510
reason why we chose pipe in the flask so

00:04:28,560 --> 00:04:33,810
flask is super super simple

00:04:30,510 --> 00:04:35,700
like um I think up next slide so so

00:04:33,810 --> 00:04:37,320
pretty much like to use these flasks

00:04:35,700 --> 00:04:39,780
like the most basic way that you can

00:04:37,320 --> 00:04:42,390
take is like 10 lines and like it's just

00:04:39,780 --> 00:04:44,610
super simple super simple to get up and

00:04:42,390 --> 00:04:47,460
running and python comes with like a

00:04:44,610 --> 00:04:49,320
bunch of functionality built in actually

00:04:47,460 --> 00:04:53,360
actually do stuffing which makes it

00:04:49,320 --> 00:04:57,780
perfect you see alchemy - interactive

00:04:53,360 --> 00:05:00,870
databases and pretty much like I saw

00:04:57,780 --> 00:05:04,590
three options for web apps are Python

00:05:00,870 --> 00:05:06,210
Ruby and PHP PHP would have been a

00:05:04,590 --> 00:05:11,789
really good language to actually do this

00:05:06,210 --> 00:05:13,200
course in but like um it's well PHP has

00:05:11,789 --> 00:05:14,340
the issue of we used it up in a previous

00:05:13,200 --> 00:05:16,590
running of this course and it's kind of

00:05:14,340 --> 00:05:19,229
too insecure we ran into the issue where

00:05:16,590 --> 00:05:20,460
like we would like try to open up a

00:05:19,229 --> 00:05:22,050
little bit of a vulnerability and then

00:05:20,460 --> 00:05:24,300
immediately give them full pseudo access

00:05:22,050 --> 00:05:25,680
and it happened a lot so we kind of

00:05:24,300 --> 00:05:26,940
shifted to Python so we had a little bit

00:05:25,680 --> 00:05:29,909
more control over what we were doing

00:05:26,940 --> 00:05:31,110
although it's worth noting that PHP is

00:05:29,909 --> 00:05:33,150
kind of the quickest way to get a sign

00:05:31,110 --> 00:05:34,560
up so we kind of had to do a little bit

00:05:33,150 --> 00:05:36,510
of a sacrifice there but we found the

00:05:34,560 --> 00:05:38,610
Python was like a nice balance of quick

00:05:36,510 --> 00:05:40,289
and easy to set up very easy to edit on

00:05:38,610 --> 00:05:43,080
the fly if things break you don't have

00:05:40,289 --> 00:05:44,580
to recompile or anything and also a nice

00:05:43,080 --> 00:05:47,630
balance of giving us some like a little

00:05:44,580 --> 00:05:50,550
bit of control over what users are doing

00:05:47,630 --> 00:05:52,680
cool so one of the first ones we in

00:05:50,550 --> 00:05:54,990
Canada was that like for every site we

00:05:52,680 --> 00:05:57,349
were just copying pasting this same code

00:05:54,990 --> 00:06:00,419
so we just take the last like we built

00:05:57,349 --> 00:06:02,070
copy old site to new site and then just

00:06:00,419 --> 00:06:05,849
change the names title as files or

00:06:02,070 --> 00:06:08,280
whatever like so so so very nice tool

00:06:05,849 --> 00:06:09,719
out there is our cookie cutter in which

00:06:08,280 --> 00:06:11,760
you can basically like it it's a

00:06:09,719 --> 00:06:14,909
glorified copy paste where I'm set

00:06:11,760 --> 00:06:16,860
inside so pretty much you just you

00:06:14,909 --> 00:06:18,810
specify a template and you feeling like

00:06:16,860 --> 00:06:21,000
the variables you want so in this case

00:06:18,810 --> 00:06:23,460
we like what we want to customize was to

00:06:21,000 --> 00:06:25,380
the site name database credentials and

00:06:23,460 --> 00:06:28,140
what port want to publish on and it just

00:06:25,380 --> 00:06:30,959
gives us like a template for a new site

00:06:28,140 --> 00:06:32,130
just super quickly and easily yep so you

00:06:30,959 --> 00:06:34,080
can see like in The Drifter we're like

00:06:32,130 --> 00:06:35,880
yo here's on your site here's what its

00:06:34,080 --> 00:06:36,490
gonna be cold it doesn't have a login

00:06:35,880 --> 00:06:38,380
what's

00:06:36,490 --> 00:06:39,910
theme gonna be you know do we have a

00:06:38,380 --> 00:06:41,770
database all that sort of stuff and you

00:06:39,910 --> 00:06:44,560
just follow the CLI Evan you're done

00:06:41,770 --> 00:06:47,680
this site now is vulnerable right so

00:06:44,560 --> 00:06:50,770
really important and kind of it lets you

00:06:47,680 --> 00:06:53,860
do configuration files flask boilerplate

00:06:50,770 --> 00:06:56,110
basic HTML dr. Campos the entire

00:06:53,860 --> 00:06:57,460
annoying stack and all the files you can

00:06:56,110 --> 00:06:59,620
just copy and paste the entire folder

00:06:57,460 --> 00:07:01,419
and you can use these little template

00:06:59,620 --> 00:07:03,130
strings and be like yo I want this

00:07:01,419 --> 00:07:05,860
folder to be whatever the user inputted

00:07:03,130 --> 00:07:07,720
under project slug right so it lets us

00:07:05,860 --> 00:07:09,520
copy paste and send sort of set up a

00:07:07,720 --> 00:07:11,530
fresh environment to work in really

00:07:09,520 --> 00:07:13,060
quickly which is important because a lot

00:07:11,530 --> 00:07:14,860
of this stuff didn't change between the

00:07:13,060 --> 00:07:17,199
sites but was very annoying to set up

00:07:14,860 --> 00:07:18,550
each time like like it sounds pretty

00:07:17,199 --> 00:07:20,280
trivial but like once you have this

00:07:18,550 --> 00:07:22,479
thought it makes life so much easier

00:07:20,280 --> 00:07:24,190
like now we have a problem like that we

00:07:22,479 --> 00:07:27,039
can copy-paste the sites like pretty

00:07:24,190 --> 00:07:28,810
easily with glorified said but say we

00:07:27,039 --> 00:07:31,569
had a floor in like how are we in a

00:07:28,810 --> 00:07:33,490
template say like we left open some port

00:07:31,569 --> 00:07:37,479
we shouldn't have or we're listening on

00:07:33,490 --> 00:07:40,030
global rather than localhost and then we

00:07:37,479 --> 00:07:42,159
just like ready side sitting it's I like

00:07:40,030 --> 00:07:44,800
to update now it corrected every one of

00:07:42,159 --> 00:07:47,530
his ferry sites and then like mainly

00:07:44,800 --> 00:07:49,389
change that value alright well you said

00:07:47,530 --> 00:07:53,530
but like also like that's not the most

00:07:49,389 --> 00:07:56,139
optimal way yes a pain is the pain in

00:07:53,530 --> 00:07:57,340
the old way yes like you know you need

00:07:56,139 --> 00:07:58,599
add something you don't want to like

00:07:57,340 --> 00:08:00,070
check out every single one of these

00:07:58,599 --> 00:08:02,080
websites and fix them all individually

00:08:00,070 --> 00:08:03,780
and also we were still copying and

00:08:02,080 --> 00:08:05,830
pasting in large bits of code that

00:08:03,780 --> 00:08:07,659
realistically you want to be packaged

00:08:05,830 --> 00:08:08,949
away in its own system right because a

00:08:07,659 --> 00:08:11,259
lot of the endpoints are going to be the

00:08:08,949 --> 00:08:12,310
same across all these sites all these

00:08:11,259 --> 00:08:14,830
that's probably gonna have some login

00:08:12,310 --> 00:08:16,479
end point eccentric cetera yeah so what

00:08:14,830 --> 00:08:19,509
we have is like a common package which

00:08:16,479 --> 00:08:21,909
which exposes a flask like a flask

00:08:19,509 --> 00:08:24,849
application and application we actually

00:08:21,909 --> 00:08:26,710
attach routes on to it so flask was

00:08:24,849 --> 00:08:29,020
something we built and we put it on pip

00:08:26,710 --> 00:08:30,759
just like a pip install the package it

00:08:29,020 --> 00:08:32,529
means that we can push updates to pip

00:08:30,759 --> 00:08:33,459
and all of our sites will receive the

00:08:32,529 --> 00:08:35,380
updates on a relaunch

00:08:33,459 --> 00:08:37,270
which is kind of a really easy way to

00:08:35,380 --> 00:08:38,380
push out updates I'm also very shocked

00:08:37,270 --> 00:08:39,550
that we got flask or I would have

00:08:38,380 --> 00:08:42,940
thought it would be taken by something

00:08:39,550 --> 00:08:44,949
else right but now it's us yes so like

00:08:42,940 --> 00:08:46,900
um so for people who haven't seen flask

00:08:44,949 --> 00:08:49,030
before how you use it basically you

00:08:46,900 --> 00:08:52,030
import flask you credit application

00:08:49,030 --> 00:08:53,680
object and you decorate a function and

00:08:52,030 --> 00:08:56,380
return the value from it that's like the

00:08:53,680 --> 00:08:58,330
simplest map you can make it's six lines

00:08:56,380 --> 00:09:00,340
and like so idea was to take that

00:08:58,330 --> 00:09:02,500
creation of the app object and put it

00:09:00,340 --> 00:09:03,280
into a big package which we can update

00:09:02,500 --> 00:09:06,040
on the fly

00:09:03,280 --> 00:09:08,590
so what are application start like like

00:09:06,040 --> 00:09:10,900
this so from flask or where you import

00:09:08,590 --> 00:09:13,090
our app and recreate an instance of it

00:09:10,900 --> 00:09:15,280
and pretty much all of our code lives in

00:09:13,090 --> 00:09:17,500
blueprints which you can specify like

00:09:15,280 --> 00:09:19,060
from we have dot main employer important

00:09:17,500 --> 00:09:20,920
blueprint Patrick on to the core and

00:09:19,060 --> 00:09:24,250
then all your routes are available on

00:09:20,920 --> 00:09:25,750
that um flask flask instance so yeah

00:09:24,250 --> 00:09:27,910
it's just like a fancy way or to kind of

00:09:25,750 --> 00:09:29,560
encapsulate our logic into like one

00:09:27,910 --> 00:09:31,000
object and call the flowers bloom and

00:09:29,560 --> 00:09:32,710
you can just chuck it on to the core and

00:09:31,000 --> 00:09:35,320
you know the core will update as need be

00:09:32,710 --> 00:09:36,970
and your your actual site-specific stuff

00:09:35,320 --> 00:09:38,740
is separate to that and then it's a nice

00:09:36,970 --> 00:09:40,750
little little capsule so you can kind of

00:09:38,740 --> 00:09:42,160
separate your concerns a bit there and

00:09:40,750 --> 00:09:45,310
also since we were writing this under

00:09:42,160 --> 00:09:47,500
time pressure with a lot of sites coming

00:09:45,310 --> 00:09:49,420
out of us we had to update code quite

00:09:47,500 --> 00:09:50,740
often to fix out various little bugs um

00:09:49,420 --> 00:09:52,240
so it's nice to be able to do that with

00:09:50,740 --> 00:09:55,330
like a couple lines of code instead of a

00:09:52,240 --> 00:09:56,650
million right the next problem was

00:09:55,330 --> 00:09:59,260
students kept improved forth in our

00:09:56,650 --> 00:10:01,360
sites this is a completely valid way to

00:09:59,260 --> 00:10:02,560
attack a website Chuck as much as you

00:10:01,360 --> 00:10:04,270
can edit and see what happens

00:10:02,560 --> 00:10:06,400
there's some automated tools that we'll

00:10:04,270 --> 00:10:08,650
try every possible vulnerability exploit

00:10:06,400 --> 00:10:10,540
until they find one which is great

00:10:08,650 --> 00:10:13,240
not if you're running your site and like

00:10:10,540 --> 00:10:15,130
a AWS nano box and you do not have the

00:10:13,240 --> 00:10:17,470
RAM nor the connection speed to keep up

00:10:15,130 --> 00:10:19,000
yes like if context like so some tools

00:10:17,470 --> 00:10:22,600
can achieve up like a thousand requests

00:10:19,000 --> 00:10:25,420
per second now take that across the

00:10:22,600 --> 00:10:28,350
hundred students onto that's gonna be

00:10:25,420 --> 00:10:32,500
like 1,000 pounds 100 per second on to a

00:10:28,350 --> 00:10:34,780
onto a nano box big and that box falls

00:10:32,500 --> 00:10:38,320
down really quickly quite miraculous Li

00:10:34,780 --> 00:10:39,220
yeah so like we told our students were

00:10:38,320 --> 00:10:40,900
like yo guys

00:10:39,220 --> 00:10:42,370
we love you please don't do this did

00:10:40,900 --> 00:10:45,580
that stop them of course I did all of

00:10:42,370 --> 00:10:47,020
them still did it so we as a quick patch

00:10:45,580 --> 00:10:48,730
we started setting up a middleware

00:10:47,020 --> 00:10:50,740
system so we could intercept requests

00:10:48,730 --> 00:10:52,570
and like observe them and if we thought

00:10:50,740 --> 00:10:53,700
a request was a brute force we could

00:10:52,570 --> 00:10:57,190
quickly block it right

00:10:53,700 --> 00:10:59,650
so how would middleware is yes cool so

00:10:57,190 --> 00:11:01,240
um so pretty much how how Python web

00:10:59,650 --> 00:11:02,430
apps work is that they talk through

00:11:01,240 --> 00:11:05,820
protocol

00:11:02,430 --> 00:11:09,339
WSGI which which lives between like

00:11:05,820 --> 00:11:11,950
apache or nginx and flask so pretty much

00:11:09,339 --> 00:11:14,230
we have a stream in between there which

00:11:11,950 --> 00:11:16,360
we have a handler and we call our

00:11:14,230 --> 00:11:19,930
middleware on request in that stage and

00:11:16,360 --> 00:11:21,910
for a simple simple middleware we just

00:11:19,930 --> 00:11:24,399
check if the user agent has sequel map

00:11:21,910 --> 00:11:26,589
or the Buster in it and if it does we

00:11:24,399 --> 00:11:29,380
just return a fiber fridge and then we

00:11:26,589 --> 00:11:30,760
just like image and hopefully the

00:11:29,380 --> 00:11:33,880
student stops when they realize that

00:11:30,760 --> 00:11:35,620
they can't get anything from it yeah I

00:11:33,880 --> 00:11:37,330
mean it's it's worth noting that we kind

00:11:35,620 --> 00:11:38,980
of had to make our own middleware system

00:11:37,330 --> 00:11:40,839
because we wanted it to be a little bit

00:11:38,980 --> 00:11:42,490
higher level than what generally

00:11:40,839 --> 00:11:44,860
middleware install skin voles which is

00:11:42,490 --> 00:11:46,810
at lower level closer to kind of the

00:11:44,860 --> 00:11:48,850
WSGI stuff so we built our own

00:11:46,810 --> 00:11:51,220
middleware network this is maybe not the

00:11:48,850 --> 00:11:52,750
best way to do it but I think it's fair

00:11:51,220 --> 00:11:54,459
to say that when you're teaching you're

00:11:52,750 --> 00:11:56,500
not going by the best industry practices

00:11:54,459 --> 00:11:57,490
funny enough a lot of the time you're

00:11:56,500 --> 00:12:00,550
just trying to get something out to

00:11:57,490 --> 00:12:01,870
demonstrate a point right so we kind of

00:12:00,550 --> 00:12:04,870
we hacked this up and we think it did

00:12:01,870 --> 00:12:05,680
our job quite well so yeah it works

00:12:04,870 --> 00:12:11,410
problem solved

00:12:05,680 --> 00:12:13,959
yes yeah cool so yeah so quickly people

00:12:11,410 --> 00:12:15,940
realize I changed the user agent you get

00:12:13,959 --> 00:12:18,250
past that check really easily and since

00:12:15,940 --> 00:12:20,230
our Plus and fast calls actually open

00:12:18,250 --> 00:12:21,579
source they went to the source right

00:12:20,230 --> 00:12:23,140
away and saw that with the check into

00:12:21,579 --> 00:12:25,660
user agent and they changed that to like

00:12:23,140 --> 00:12:27,550
Chrome so what what are next that was

00:12:25,660 --> 00:12:29,980
was the force or student to actually off

00:12:27,550 --> 00:12:31,600
off themselves against us so we knew

00:12:29,980 --> 00:12:33,310
like who was sending each request and

00:12:31,600 --> 00:12:34,720
once we did that people got really

00:12:33,310 --> 00:12:37,000
scared we're trying to brief all our

00:12:34,720 --> 00:12:39,250
sites and we asked them not to yeah I

00:12:37,000 --> 00:12:40,899
mean it's worth noting that like the

00:12:39,250 --> 00:12:42,310
sort of authentication layer that we put

00:12:40,899 --> 00:12:44,020
in was maybe the best thing we did

00:12:42,310 --> 00:12:45,760
because not only did it let us do stuff

00:12:44,020 --> 00:12:48,430
like you know if you do something wrong

00:12:45,760 --> 00:12:49,990
we know who you are it also allowed us

00:12:48,430 --> 00:12:53,110
to do stuff like if a student came up

00:12:49,990 --> 00:12:56,380
and said I my report got deleted my dog

00:12:53,110 --> 00:12:58,000
ate my laptop I can't prove to you that

00:12:56,380 --> 00:12:59,589
I was able to break the site we could

00:12:58,000 --> 00:13:01,360
say well we have logs we know that you

00:12:59,589 --> 00:13:03,640
did X Y Z we know that you got this far

00:13:01,360 --> 00:13:05,920
so we can kind of guess whether you got

00:13:03,640 --> 00:13:07,510
there or not right so it gave us a lot

00:13:05,920 --> 00:13:10,240
of power as well and it also is really

00:13:07,510 --> 00:13:11,260
useful for exams right it's a nice to be

00:13:10,240 --> 00:13:14,560
able to tell what students are doing

00:13:11,260 --> 00:13:15,290
what and where and it kind of a gave us

00:13:14,560 --> 00:13:16,339
a lot of

00:13:15,290 --> 00:13:18,980
we'll talk about that in later slides

00:13:16,339 --> 00:13:23,089
yes so we use the piece of software

00:13:18,980 --> 00:13:26,810
called key clock which is made by Apache

00:13:23,089 --> 00:13:30,709
I'm not not too sure but essentially the

00:13:26,810 --> 00:13:32,209
business feel is that all we need to

00:13:30,709 --> 00:13:35,449
know is that you can create users in it

00:13:32,209 --> 00:13:38,329
and you can actually tie it into Apache

00:13:35,449 --> 00:13:40,899
right so pretty much every quest comes

00:13:38,329 --> 00:13:43,670
in it comes in with a key clock token or

00:13:40,899 --> 00:13:47,180
cookie and the package kicks out against

00:13:43,670 --> 00:13:49,990
key click through open ID connect and if

00:13:47,180 --> 00:13:52,670
it was valid Apache actually adds on

00:13:49,990 --> 00:13:54,829
remote user header so we so we know

00:13:52,670 --> 00:13:57,350
who's um we know where the request is

00:13:54,829 --> 00:13:59,509
coming from and and since Apache is

00:13:57,350 --> 00:14:01,220
checking for us that our Python doesn't

00:13:59,509 --> 00:14:03,079
really need it actually off anyone it

00:14:01,220 --> 00:14:05,300
can trust a head off and students can't

00:14:03,079 --> 00:14:07,610
actually set a header because the patch

00:14:05,300 --> 00:14:12,040
here would block it I think hopefully it

00:14:07,610 --> 00:14:15,980
did and yeah and also as a side benefit

00:14:12,040 --> 00:14:17,540
actually I so we had internal services

00:14:15,980 --> 00:14:19,579
running which would connect to our

00:14:17,540 --> 00:14:21,740
service connect to our applications and

00:14:19,579 --> 00:14:24,410
a good spoof as any user they want it by

00:14:21,740 --> 00:14:27,050
just a header which is which will come

00:14:24,410 --> 00:14:28,399
in useful later yeah I think like it

00:14:27,050 --> 00:14:29,930
there's a good argument to made of why

00:14:28,399 --> 00:14:31,579
we didn't do this just in python because

00:14:29,930 --> 00:14:33,290
python has its own north i've networks

00:14:31,579 --> 00:14:36,350
but we really wanted these to be very

00:14:33,290 --> 00:14:38,360
like take take down herbal there's a

00:14:36,350 --> 00:14:38,899
better word for that a femoral sure

00:14:38,360 --> 00:14:41,000
let's go with that

00:14:38,899 --> 00:14:42,889
um i want like some of these sites would

00:14:41,000 --> 00:14:44,120
break spectacularly but they like

00:14:42,889 --> 00:14:45,290
putting them on docker means you can

00:14:44,120 --> 00:14:47,630
shut down the website and bring it back

00:14:45,290 --> 00:14:49,040
up and it should work fine the issue

00:14:47,630 --> 00:14:50,389
with having a consistent or thematic

00:14:49,040 --> 00:14:52,040
meant that we would have to coordinate

00:14:50,389 --> 00:14:53,630
all these different instances although

00:14:52,040 --> 00:14:55,819
our different web sites to use the same

00:14:53,630 --> 00:14:56,899
like OS network you can usually be able

00:14:55,819 --> 00:14:58,490
to login with the same credentials

00:14:56,899 --> 00:15:00,439
across all of them right if you're one

00:14:58,490 --> 00:15:02,300
student um and we also want to be able

00:15:00,439 --> 00:15:04,459
to track you across all those sites so

00:15:02,300 --> 00:15:06,589
by having it on like the layer before

00:15:04,459 --> 00:15:08,149
python it kind of makes pythons job a

00:15:06,589 --> 00:15:10,459
lot easier and it just has to focus on

00:15:08,149 --> 00:15:12,470
making the site so like a lot of us

00:15:10,459 --> 00:15:14,329
using - who teaches courses to use other

00:15:12,470 --> 00:15:15,949
things other than Python but I think

00:15:14,329 --> 00:15:17,480
that's worth mentioning that you know

00:15:15,949 --> 00:15:19,850
Python is very good at what it does and

00:15:17,480 --> 00:15:21,290
trying to like keep it in that realm of

00:15:19,850 --> 00:15:23,329
where it's really powerful it's probably

00:15:21,290 --> 00:15:24,680
the best way to handle it there are

00:15:23,329 --> 00:15:26,360
better tools for all that runs on the

00:15:24,680 --> 00:15:28,250
server they did it better than we could

00:15:26,360 --> 00:15:28,550
have done it and bite them right so it's

00:15:28,250 --> 00:15:29,510
it's

00:15:28,550 --> 00:15:30,560
and I say to you to separate your

00:15:29,510 --> 00:15:32,510
concerns and sort of focus on what

00:15:30,560 --> 00:15:35,089
patent does best which is I want to site

00:15:32,510 --> 00:15:37,700
up in two seconds I can do that yeah we

00:15:35,089 --> 00:15:41,240
can't break off because we're not doing

00:15:37,700 --> 00:15:42,920
off yeah ourselves so yeah after that

00:15:41,240 --> 00:15:46,190
didn't kept on interviewing each other

00:15:42,920 --> 00:15:48,170
so what we mean by this was that so say

00:15:46,190 --> 00:15:49,550
that the site of like we could register

00:15:48,170 --> 00:15:51,829
a new user name/password

00:15:49,550 --> 00:15:54,140
some students would have this smart idea

00:15:51,829 --> 00:15:56,060
of adjusting account code admin deposit

00:15:54,140 --> 00:15:57,950
of admin and then other students would

00:15:56,060 --> 00:16:00,410
go in and try out count and see that it

00:15:57,950 --> 00:16:02,630
worked in four that was us and then do

00:16:00,410 --> 00:16:05,600
is spend like multiple hours trying to

00:16:02,630 --> 00:16:07,279
chase chase down like a bug in that like

00:16:05,600 --> 00:16:09,709
in an account when it was really just

00:16:07,279 --> 00:16:11,329
account some some guy just made yeah and

00:16:09,709 --> 00:16:13,190
I mean having a shared database between

00:16:11,329 --> 00:16:15,589
all the students was already bad some

00:16:13,190 --> 00:16:17,029
people would like maybe if we had a fake

00:16:15,589 --> 00:16:18,470
site which let me make Facebook post

00:16:17,029 --> 00:16:20,779
they would like post the answer and all

00:16:18,470 --> 00:16:24,410
the other students could see it right so

00:16:20,779 --> 00:16:26,149
what we did was we isolated databases so

00:16:24,410 --> 00:16:27,620
this is sort of the code but you don't

00:16:26,149 --> 00:16:29,750
need to understand it what happened is

00:16:27,620 --> 00:16:31,070
every single site and every single

00:16:29,750 --> 00:16:32,540
student within that site had a little

00:16:31,070 --> 00:16:34,370
isolated database that they worked with

00:16:32,540 --> 00:16:36,079
and if they mess it up or they added

00:16:34,370 --> 00:16:38,060
fake accounts or whatever that doesn't

00:16:36,079 --> 00:16:40,310
interfere with any other students and

00:16:38,060 --> 00:16:42,230
immediately like all of the complaints

00:16:40,310 --> 00:16:44,779
we got mine dropped by like half because

00:16:42,230 --> 00:16:46,040
a lot of students were like icon access

00:16:44,779 --> 00:16:47,899
the site anymore someone deleted the

00:16:46,040 --> 00:16:52,640
entire database which happens several

00:16:47,899 --> 00:16:54,709
times um yeah we yeah I was not good

00:16:52,640 --> 00:16:56,180
yeah so by doing this if a student

00:16:54,709 --> 00:16:57,740
deletes the entire database it's only

00:16:56,180 --> 00:16:59,180
their database so all the other students

00:16:57,740 --> 00:17:01,370
can still break the site and sort of

00:16:59,180 --> 00:17:03,440
learn from it right so if you're doing

00:17:01,370 --> 00:17:05,390
anything with databases and students and

00:17:03,440 --> 00:17:08,470
breaking isolate the databases because

00:17:05,390 --> 00:17:10,640
this is a hundred percent gonna happen

00:17:08,470 --> 00:17:13,000
so problem six was students kept

00:17:10,640 --> 00:17:15,350
trolling each other with fake flags

00:17:13,000 --> 00:17:17,089
this came into the idea of like students

00:17:15,350 --> 00:17:19,370
would again on the Facebook post like

00:17:17,089 --> 00:17:20,630
post a flag which is how you can verify

00:17:19,370 --> 00:17:23,240
that you broke the site right is you

00:17:20,630 --> 00:17:24,380
find a flag that says you won so they

00:17:23,240 --> 00:17:25,850
would post something like this and

00:17:24,380 --> 00:17:27,530
student other servants we got confused

00:17:25,850 --> 00:17:28,640
they wouldn't actually they're like stop

00:17:27,530 --> 00:17:30,860
working on the site thinking that

00:17:28,640 --> 00:17:33,110
they've broken it right so what we did

00:17:30,860 --> 00:17:34,970
was we used a very quick hash function

00:17:33,110 --> 00:17:37,700
which took on a secret that we kept

00:17:34,970 --> 00:17:39,590
secret the student ID and like some flag

00:17:37,700 --> 00:17:41,370
ID and generated a random string and

00:17:39,590 --> 00:17:43,260
that was a students flag

00:17:41,370 --> 00:17:44,520
so this is unique to the student every

00:17:43,260 --> 00:17:47,100
sin against a different flag they can't

00:17:44,520 --> 00:17:48,210
share them it's easily verifiable if a

00:17:47,100 --> 00:17:49,650
student tells us what their student

00:17:48,210 --> 00:17:54,020
ideas we can immediately check whether

00:17:49,650 --> 00:17:56,910
their flag is correct and it's also very

00:17:54,020 --> 00:17:59,250
hard to guess it is a random string it's

00:17:56,910 --> 00:18:00,690
like a sha-256 output you can't you're

00:17:59,250 --> 00:18:02,940
not gonna guess that and be like oh yeah

00:18:00,690 --> 00:18:05,400
I broke it see eight three eight eight

00:18:02,940 --> 00:18:07,560
eight four off the top of my head so the

00:18:05,400 --> 00:18:09,030
point is is that you like these are

00:18:07,560 --> 00:18:10,380
impossible to guess you have to find

00:18:09,030 --> 00:18:14,220
them and you can't share them because

00:18:10,380 --> 00:18:16,080
they're student specific and yeah like

00:18:14,220 --> 00:18:18,420
the files can be anywhere the way we

00:18:16,080 --> 00:18:19,710
handle this was in an after hook this is

00:18:18,420 --> 00:18:23,010
something that runs after every single

00:18:19,710 --> 00:18:25,680
request in flask we would look for like

00:18:23,010 --> 00:18:27,420
a flag ID grab it generate a flag for

00:18:25,680 --> 00:18:29,400
the current student who's visiting the

00:18:27,420 --> 00:18:31,170
site and check it in there so kind of

00:18:29,400 --> 00:18:42,540
like took away all of the hassle of

00:18:31,170 --> 00:18:45,540
generating that on the fly since like

00:18:42,540 --> 00:18:51,350
flag ID guess that would actually be

00:18:45,540 --> 00:18:51,350
transformed into an actual flag so yeah

00:18:52,700 --> 00:18:58,890
say you know these students are very

00:18:54,870 --> 00:19:01,110
smart smarter than us sometimes so let's

00:18:58,890 --> 00:19:03,120
quickly go over XSS um so this is a very

00:19:01,110 --> 00:19:04,290
specific example that I think may not

00:19:03,120 --> 00:19:06,330
make sense unless you don't understand

00:19:04,290 --> 00:19:07,710
how cross-site scripting works but long

00:19:06,330 --> 00:19:09,540
story short some of these

00:19:07,710 --> 00:19:11,130
vulnerabilities rely on some admins

00:19:09,540 --> 00:19:13,200
sitting on the computer clicking on the

00:19:11,130 --> 00:19:14,730
link you know from a Nigerian prince and

00:19:13,200 --> 00:19:16,560
being like oh no my ste tails have been

00:19:14,730 --> 00:19:18,210
stolen and that's really hard to

00:19:16,560 --> 00:19:19,350
automate like I don't want to sit there

00:19:18,210 --> 00:19:21,540
clicking out all these links that

00:19:19,350 --> 00:19:23,700
students send me to trigger some like

00:19:21,540 --> 00:19:25,170
payload but you can't automate that you

00:19:23,700 --> 00:19:27,900
really need like someone on a chrome

00:19:25,170 --> 00:19:29,700
instance go in and clicking right so

00:19:27,900 --> 00:19:32,850
there is something you can use called a

00:19:29,700 --> 00:19:34,710
headless chrome which opens up a full

00:19:32,850 --> 00:19:36,720
chrome window it has like it renders it

00:19:34,710 --> 00:19:39,360
and everything and then you can like

00:19:36,720 --> 00:19:40,980
tell it to move Mouse to this link and

00:19:39,360 --> 00:19:43,680
click on it to simulate what a user

00:19:40,980 --> 00:19:46,200
would do it's very heavy it takes up all

00:19:43,680 --> 00:19:47,520
of your RAM as chrome tends to do and if

00:19:46,200 --> 00:19:51,350
you run it on a thread it will block the

00:19:47,520 --> 00:19:53,760
entire thread so a core thing that we do

00:19:51,350 --> 00:19:54,690
across all of our sites is we centralize

00:19:53,760 --> 00:19:56,489
things

00:19:54,690 --> 00:19:58,289
so what we did with this is we had one

00:19:56,489 --> 00:19:59,609
Python service and again this is my

00:19:58,289 --> 00:20:01,349
Python is my favorite thing ever

00:19:59,609 --> 00:20:03,929
I'm like yo I want to spend multiple

00:20:01,349 --> 00:20:05,580
threads here's a pool I here's a queue

00:20:03,929 --> 00:20:08,009
of tasks and that's all I have to do

00:20:05,580 --> 00:20:10,289
Python will allocate the headless chrome

00:20:08,009 --> 00:20:12,330
tasks to different threads handle them

00:20:10,289 --> 00:20:13,859
spin up new threads as it needs to do

00:20:12,330 --> 00:20:15,629
I'm not to touch it it's awesome and

00:20:13,859 --> 00:20:17,129
then I just I also spawn up a quick

00:20:15,629 --> 00:20:19,590
server and literally two lines of code

00:20:17,129 --> 00:20:21,690
and all that does is say if any of these

00:20:19,590 --> 00:20:23,609
websites asks me to visit the site in a

00:20:21,690 --> 00:20:27,539
certain way put it on the thread let it

00:20:23,609 --> 00:20:29,340
happen right so this is how kind of how

00:20:27,539 --> 00:20:31,769
we handled teaching XSS and sort of

00:20:29,340 --> 00:20:33,359
automating that which is something that

00:20:31,769 --> 00:20:47,369
before we came up with this was kind of

00:20:33,359 --> 00:20:50,789
impossible to do for us because chrome

00:20:47,369 --> 00:20:52,229
wasn't yeah so like once you start

00:20:50,789 --> 00:20:53,759
chrome you do not get rid of chrome

00:20:52,229 --> 00:20:55,889
accord like how this is how headless

00:20:53,759 --> 00:20:57,179
chrome worked so it would like it would

00:20:55,889 --> 00:20:59,190
like eat up everything on the computer

00:20:57,179 --> 00:21:03,389
which I think we fixed by just being

00:20:59,190 --> 00:21:05,190
like yo everyday just like we start yeah

00:21:03,389 --> 00:21:09,809
every we start and you know what that

00:21:05,190 --> 00:21:11,220
worked and that's okay so we're running

00:21:09,809 --> 00:21:12,779
we're gonna run into question time I

00:21:11,220 --> 00:21:16,229
think we are run into question time so

00:21:12,779 --> 00:21:17,940
we may skip the boat but Oh beautiful

00:21:16,229 --> 00:21:19,619
nevermind we're gonna go through a

00:21:17,940 --> 00:21:22,590
little bit of how we did deployment now

00:21:19,619 --> 00:21:23,789
so obviously here's a here's a hot tip

00:21:22,590 --> 00:21:26,129
if you're gonna have a lot of websites

00:21:23,789 --> 00:21:28,169
you don't need one server per website

00:21:26,129 --> 00:21:30,299
you like docker really makes it easy to

00:21:28,169 --> 00:21:33,239
run multiple on one machine so we only

00:21:30,299 --> 00:21:34,499
ended up having two AWS boxes I think

00:21:33,239 --> 00:21:38,070
like one medium and one small or

00:21:34,499 --> 00:21:41,009
something and both of these site ran all

00:21:38,070 --> 00:21:42,929
through all 63 plus of our sites what we

00:21:41,009 --> 00:21:45,929
did was we said internally whenever

00:21:42,929 --> 00:21:47,669
someone visits use AV host to look up

00:21:45,929 --> 00:21:48,690
which container they're referencing and

00:21:47,669 --> 00:21:55,470
then forward the request to that

00:21:48,690 --> 00:21:58,289
container yeah so like this diagram I

00:21:55,470 --> 00:22:00,210
like very much because I made it so a

00:21:58,289 --> 00:22:02,129
student will say I want to go to fund or

00:22:00,210 --> 00:22:04,220
NS or agency we actually did buy the

00:22:02,129 --> 00:22:07,590
domain NS our agency which is very cool

00:22:04,220 --> 00:22:10,049
so then we so this goes through the deal

00:22:07,590 --> 00:22:11,580
and all everything that tada Dennison

00:22:10,049 --> 00:22:13,379
agency will go to this one box let's say

00:22:11,580 --> 00:22:16,230
this is more less how we set it up and

00:22:13,379 --> 00:22:17,999
the box then says okay this person typed

00:22:16,230 --> 00:22:19,889
in funded NS or agency they want to go

00:22:17,999 --> 00:22:22,230
to this website this dock container

00:22:19,889 --> 00:22:24,269
running on on me right and appache

00:22:22,230 --> 00:22:25,769
really quickly would be like cool there

00:22:24,269 --> 00:22:28,289
move on with your life

00:22:25,769 --> 00:22:30,720
right so it's quite cool so we had you

00:22:28,289 --> 00:22:32,309
know like 32 sites running and each of

00:22:30,720 --> 00:22:33,929
them had a different domain and we were

00:22:32,309 --> 00:22:34,379
just tell Apache to redirected as it

00:22:33,929 --> 00:22:37,200
comes in

00:22:34,379 --> 00:22:38,879
yeah also quite convenient because if

00:22:37,200 --> 00:22:40,470
something goes wrong you don't need to

00:22:38,879 --> 00:22:43,200
look up which box you need to SSH into

00:22:40,470 --> 00:22:44,789
it's just the same one right so it gives

00:22:43,200 --> 00:22:46,499
you a little bit more control this is

00:22:44,789 --> 00:22:49,409
obviously this does have the issue of

00:22:46,499 --> 00:22:50,970
our redundancy of if one docker

00:22:49,409 --> 00:22:53,730
container messes up and takes down the

00:22:50,970 --> 00:22:55,259
Box all of your sites are down but also

00:22:53,730 --> 00:23:38,820
we'd we did not have the funds to run

00:22:55,259 --> 00:23:50,100
like one like one server we have somehow

00:23:38,820 --> 00:23:52,320
one one student so but you know just

00:23:50,100 --> 00:23:54,240
study bit password it that's fine

00:23:52,320 --> 00:23:56,610
yeah yes centralizing was a really good

00:23:54,240 --> 00:23:58,139
idea and I do want to mention we did try

00:23:56,610 --> 00:24:01,019
to do this in Python with some fancy

00:23:58,139 --> 00:24:02,549
tricks of like writing like a SQL

00:24:01,019 --> 00:24:04,369
statement on the fly with the students

00:24:02,549 --> 00:24:06,509
credentials and appending and stuff and

00:24:04,369 --> 00:24:07,710
kind of really reached the point where

00:24:06,509 --> 00:24:10,320
we were like this is a solved problem

00:24:07,710 --> 00:24:11,940
like per squares has built-in features

00:24:10,320 --> 00:24:14,129
to isolate different databases on one

00:24:11,940 --> 00:24:15,659
instance but we're gonna use that like

00:24:14,129 --> 00:24:17,309
there is such a thing as over

00:24:15,659 --> 00:24:19,409
engineering and especially if you're in

00:24:17,309 --> 00:24:20,490
education like if you just want the site

00:24:19,409 --> 00:24:22,380
to be accessible

00:24:20,490 --> 00:24:24,930
lean on as much of external code as you

00:24:22,380 --> 00:24:26,160
can I know that after all these years of

00:24:24,930 --> 00:24:27,450
computer science I have a tendency to

00:24:26,160 --> 00:24:28,800
want to code everything myself just

00:24:27,450 --> 00:24:30,240
because I can

00:24:28,800 --> 00:24:31,380
so it was kind of I've been carrier to

00:24:30,240 --> 00:24:33,570
convince me to be like saying just use

00:24:31,380 --> 00:24:37,250
SQL stop coding up like a 500 line

00:24:33,570 --> 00:24:40,430
Python program to do this for a year and

00:24:37,250 --> 00:24:43,740
probably one of work let's be honest

00:24:40,430 --> 00:24:46,350
cool and then I think this is the last

00:24:43,740 --> 00:24:48,030
part we're going to talk about yeah is

00:24:46,350 --> 00:24:50,460
we were generating too many logs

00:24:48,030 --> 00:24:52,620
obviously each site was generating a log

00:24:50,460 --> 00:24:55,020
of what every student was doing which is

00:24:52,620 --> 00:24:56,580
awesome consolidating that's quite

00:24:55,020 --> 00:24:58,920
complicated and it's something we did

00:24:56,580 --> 00:25:00,660
want to be able to do and again it's a

00:24:58,920 --> 00:25:03,510
solved problem we had every single

00:25:00,660 --> 00:25:05,460
Python log system go through docker into

00:25:03,510 --> 00:25:07,920
an elastic search instance and we just

00:25:05,460 --> 00:25:09,180
said yo compile it by student and we

00:25:07,920 --> 00:25:13,800
could easily look at what each student

00:25:09,180 --> 00:25:16,170
was doing incredibly useful one because

00:25:13,800 --> 00:25:17,730
it'll RFC kind of across the board what

00:25:16,170 --> 00:25:20,220
was happening if one side was down or

00:25:17,730 --> 00:25:21,360
like making a lot of errors I'm in - it

00:25:20,220 --> 00:25:23,130
was really cool because we could track

00:25:21,360 --> 00:25:25,620
students across multiple sites right and

00:25:23,130 --> 00:25:28,020
if one side had a million people hitting

00:25:25,620 --> 00:25:29,310
it and no one was getting the flag maybe

00:25:28,020 --> 00:25:31,380
his company was wrong with that site

00:25:29,310 --> 00:25:32,910
right I was really useful because like

00:25:31,380 --> 00:25:34,470
me to discover bugs this way is where

00:25:32,910 --> 00:25:36,420
like no one's been able to figure out

00:25:34,470 --> 00:25:39,560
this one specific challenge why not and

00:25:36,420 --> 00:25:39,560
we look into it because it's broken

00:25:48,770 --> 00:25:53,520
yikes

00:25:49,890 --> 00:25:55,530
cool so yeah so like a soon would visit

00:25:53,520 --> 00:25:57,090
a site try a payload get to a page and

00:25:55,530 --> 00:25:59,040
find the flag and we can track them at

00:25:57,090 --> 00:26:01,800
each point and on every single site

00:25:59,040 --> 00:26:03,900
right which was incredibly powerful and

00:26:01,800 --> 00:26:05,340
useful and I'd like to say we didn't we

00:26:03,900 --> 00:26:06,870
didn't like do anything magical here it

00:26:05,340 --> 00:26:08,820
was just log lines that we were passing

00:26:06,870 --> 00:26:11,990
rather than setting in like a full you

00:26:08,820 --> 00:26:16,080
know metric system coop and I guess just

00:26:11,990 --> 00:26:18,990
final sort of reflections if you're

00:26:16,080 --> 00:26:21,420
gonna be you're gonna be writing tests

00:26:18,990 --> 00:26:23,370
have the tests do exactly what a student

00:26:21,420 --> 00:26:25,140
would do what we did was we had our

00:26:23,370 --> 00:26:27,000
tests on the server running behind

00:26:25,140 --> 00:26:27,780
Apache a meant that we didn't have to

00:26:27,000 --> 00:26:30,810
worry about all that we could just

00:26:27,780 --> 00:26:33,080
quickly test the websites fine except if

00:26:30,810 --> 00:26:34,220
the site is unhackable from behind

00:26:33,080 --> 00:26:35,810
in the party there's no way you will

00:26:34,220 --> 00:26:37,730
know because your test was helping you

00:26:35,810 --> 00:26:49,850
yeah that's fine and then but no student

00:26:37,730 --> 00:26:52,220
is able to do it we'll save slash dot

00:26:49,850 --> 00:26:55,610
dot slash it means go go back one

00:26:52,220 --> 00:26:57,890
directory party will take that away and

00:26:55,610 --> 00:27:00,140
I determined to a normal URL while I

00:26:57,890 --> 00:27:02,690
challenged was expecting a slash in the

00:27:00,140 --> 00:27:04,430
URL so that said I looked internally but

00:27:02,690 --> 00:27:06,740
from outside the patch it's normalize

00:27:04,430 --> 00:27:08,000
everything and no one forget it and so

00:27:06,740 --> 00:27:09,680
it seems like we can't get it and I'm

00:27:08,000 --> 00:27:12,440
like yeah trying hard enough my test is

00:27:09,680 --> 00:27:13,940
policy and so this must be you I don't

00:27:12,440 --> 00:27:15,320
actually say that but no yes so this is

00:27:13,940 --> 00:27:17,240
an issue and like looking back

00:27:15,320 --> 00:27:18,680
definitely like if you're going to be

00:27:17,240 --> 00:27:20,300
right in testing for anything that a

00:27:18,680 --> 00:27:22,550
student's going to be accessing make

00:27:20,300 --> 00:27:23,180
exactly what they're going to do no

00:27:22,550 --> 00:27:27,710
shortcuts

00:27:23,180 --> 00:27:29,120
cool so just on teaching all of the

00:27:27,710 --> 00:27:31,820
infrastructure made it difficult to

00:27:29,120 --> 00:27:33,800
release code to students an important

00:27:31,820 --> 00:27:34,850
part of learning how to ride websites

00:27:33,800 --> 00:27:36,770
that are vulnerable is to learn how to

00:27:34,850 --> 00:27:38,960
fix them and how to like prevent against

00:27:36,770 --> 00:27:40,340
common vulnerabilities and it's hard to

00:27:38,960 --> 00:27:42,560
do if you have mountains of

00:27:40,340 --> 00:27:44,360
infrastructure and floss core and post

00:27:42,560 --> 00:27:46,070
hooks and pre hooks and all the sort of

00:27:44,360 --> 00:27:47,360
code it made our lives easier and

00:27:46,070 --> 00:27:49,160
deploying them but it made their lives

00:27:47,360 --> 00:27:52,730
harder on just sort of understanding the

00:27:49,160 --> 00:27:54,110
core of what we wanted to do I also want

00:27:52,730 --> 00:27:56,810
to quickly mention that Python is to

00:27:54,110 --> 00:27:59,150
secure does anyone that would access the

00:27:56,810 --> 00:28:02,000
xxe is that's fine

00:27:59,150 --> 00:28:04,070
so some sometimes when you pass like XML

00:28:02,000 --> 00:28:06,020
so you know kind of like a HTTP ish file

00:28:04,070 --> 00:28:08,180
you can actually break out and start

00:28:06,020 --> 00:28:10,040
accessing files on the server and it's

00:28:08,180 --> 00:28:12,020
something we want to demonstrate no

00:28:10,040 --> 00:28:13,940
bloody in Python lets you do it you have

00:28:12,020 --> 00:28:15,860
to like download a really like dodgy one

00:28:13,940 --> 00:28:17,630
and like turn on a flag to actually make

00:28:15,860 --> 00:28:19,070
it work which make these it makes it

00:28:17,630 --> 00:28:20,810
quite difficult to explain why this will

00:28:19,070 --> 00:28:22,400
happen in actual industry because Python

00:28:20,810 --> 00:28:25,400
by default will block most of these like

00:28:22,400 --> 00:28:30,440
vulnerabilities PHP does not which is

00:28:25,400 --> 00:28:31,640
why it's quite good yeah and sort of

00:28:30,440 --> 00:28:33,740
like there's a bunch of different things

00:28:31,640 --> 00:28:35,600
but I guess the point is that like

00:28:33,740 --> 00:28:37,100
python is used in industry as such it

00:28:35,600 --> 00:28:39,140
comes built in with a lot of like

00:28:37,100 --> 00:28:42,080
security features so you may have

00:28:39,140 --> 00:28:44,690
trouble with it every now and then so

00:28:42,080 --> 00:28:46,820
yeah it's like a consideration and I

00:28:44,690 --> 00:28:48,679
think maybe just finally running

00:28:46,820 --> 00:28:50,029
the infrastructure took so much time

00:28:48,679 --> 00:28:52,370
that we really didn't have a lot of time

00:28:50,029 --> 00:28:54,590
to like sit down talk to students and

00:28:52,370 --> 00:28:55,639
say how are you learning best what do

00:28:54,590 --> 00:28:57,440
you think the cause get to be doing

00:28:55,639 --> 00:28:59,299
better we tried our very best but like

00:28:57,440 --> 00:29:00,559
the team was overwhelmed by building all

00:28:59,299 --> 00:29:02,120
of these sites which we thought would be

00:29:00,559 --> 00:29:03,529
the best way to learn and I think if

00:29:02,120 --> 00:29:04,220
you're going to be running the course

00:29:03,529 --> 00:29:05,570
and you're going to be having

00:29:04,220 --> 00:29:07,610
infrastructure that the course relies on

00:29:05,570 --> 00:29:09,320
you need to delegate it away from teh

00:29:07,610 --> 00:29:11,960
people one or two people whose entire

00:29:09,320 --> 00:29:13,490
job is to just look at the tutorials

00:29:11,960 --> 00:29:15,110
look at the labs and lectures and just

00:29:13,490 --> 00:29:18,200
look at content itself and sort of

00:29:15,110 --> 00:29:19,340
teaching plans it seems obvious but to

00:29:18,200 --> 00:29:20,450
us we thought that a good set of

00:29:19,340 --> 00:29:22,220
practical challenges would kind of fill

00:29:20,450 --> 00:29:23,299
that gap but it really doesn't it's

00:29:22,220 --> 00:29:25,429
important to have someone who's

00:29:23,299 --> 00:29:27,169
non-technical just sitting there trying

00:29:25,429 --> 00:29:31,090
to understand like the human aspect of

00:29:27,169 --> 00:29:45,169
it yep and yeah we have question time

00:29:31,090 --> 00:29:49,990
how long do we have like looks like you

00:29:45,169 --> 00:29:53,150
have your book guys cool Thanks

00:29:49,990 --> 00:29:53,150

YouTube URL: https://www.youtube.com/watch?v=l0Sazyzs1IY


