Title: Comparing Wagtail, Django CMS and Mezzanine
Publication date: 2016-08-16
Playlist: DjangoCon AU 2016 (Miniconf)
Description: 
	Adam Brenecki
https://2016.pycon-au.org/schedule/102/view_talk
Django CMS, Mezzanine and Wagtail are the three most popular Django-based content management systems; all three have kept (or, in Wagtail's case, gained) their popularity because they are so different to each other. In many ways, from their fundamental data models right through to how they approach their content editing UIs, each one has a very different take on how a CMS should work.

This talk will explore the different approaches, strengths and weaknesses of each CMS, and what they mean for you as a developer and for your content editors.
Captions: 
	00:00:01,370 --> 00:00:05,700
all righty thank you very much ladies

00:00:03,389 --> 00:00:07,230
and gentlemen we're back now for someone

00:00:05,700 --> 00:00:09,809
who's going to compare a bird a

00:00:07,230 --> 00:00:22,380
guitarist at a raised platform everyone

00:00:09,809 --> 00:00:25,140
please welcome Adam or Dickie oh good

00:00:22,380 --> 00:00:27,720
hey so a bird a guitarist and a raised

00:00:25,140 --> 00:00:28,859
platform walking to a bar now I've been

00:00:27,720 --> 00:00:30,420
trying to come up with a good punch line

00:00:28,859 --> 00:00:31,679
for that set up since I first came up

00:00:30,420 --> 00:00:33,360
with the title in May without any

00:00:31,679 --> 00:00:36,239
success so I'm just going to talk about

00:00:33,360 --> 00:00:37,500
content management systems instead but

00:00:36,239 --> 00:00:39,180
the next half hour we'll be taking a

00:00:37,500 --> 00:00:40,680
tour through Django CMS mezzanine and

00:00:39,180 --> 00:00:43,290
wagtail which is probably the three most

00:00:40,680 --> 00:00:45,300
popular Django based CMS's we'll focus

00:00:43,290 --> 00:00:46,739
mostly on the developer experience and

00:00:45,300 --> 00:00:49,110
talk a bit about the user experience for

00:00:46,739 --> 00:00:50,520
content editors as well so rather than

00:00:49,110 --> 00:00:51,989
trying to talk about every feature in

00:00:50,520 --> 00:00:53,340
all three we'll go a little deeper into

00:00:51,989 --> 00:00:55,289
the basics that you're using nearly

00:00:53,340 --> 00:00:56,460
every site hopefully at the end of the

00:00:55,289 --> 00:00:57,420
talk we'll have a feel for what it's

00:00:56,460 --> 00:01:00,149
like to work with all three of these

00:00:57,420 --> 00:01:02,550
systems these are our three contenders

00:01:00,149 --> 00:01:04,049
wagtail is the newest reaching 1.0 I

00:01:02,550 --> 00:01:06,750
think sometime around last year's pike

00:01:04,049 --> 00:01:08,280
on au I was built by torch box a UK web

00:01:06,750 --> 00:01:09,890
agency who originally worked with Drupal

00:01:08,280 --> 00:01:12,990
and still do today alongside wagtail

00:01:09,890 --> 00:01:14,250
Django CMS has been around since 2007

00:01:12,990 --> 00:01:17,189
it's backed by the Swiss agency called

00:01:14,250 --> 00:01:18,780
Divi oh and mezzanine hit 1.0 in 2012

00:01:17,189 --> 00:01:20,400
after first being announced in 2010 it's

00:01:18,780 --> 00:01:21,689
created by Steven McDonald an Australian

00:01:20,400 --> 00:01:24,869
developer and he's part of a core team

00:01:21,689 --> 00:01:26,100
of six we maintain it we'll start by

00:01:24,869 --> 00:01:27,450
looking at their data models which I

00:01:26,100 --> 00:01:28,890
underpin their design then pop up to the

00:01:27,450 --> 00:01:30,750
admin user interfaces and see what they

00:01:28,890 --> 00:01:32,850
like to use we'll have a quick look at

00:01:30,750 --> 00:01:33,869
each one's getting started process then

00:01:32,850 --> 00:01:35,100
we'll go through through the three

00:01:33,869 --> 00:01:37,170
common ways of extending your site

00:01:35,100 --> 00:01:38,549
custom page types custom stream fill

00:01:37,170 --> 00:01:40,950
blocks and plugins and adding multiple

00:01:38,549 --> 00:01:43,049
views to pages finally if we get time

00:01:40,950 --> 00:01:44,340
we'll have a quick look at the unique

00:01:43,049 --> 00:01:47,939
deployment options each one offers

00:01:44,340 --> 00:01:49,470
before having up so let's start at the

00:01:47,939 --> 00:01:50,549
data model this might seem like an odd

00:01:49,470 --> 00:01:52,200
place to start but it isn't

00:01:50,549 --> 00:01:53,670
each of the three system structures it's

00:01:52,200 --> 00:01:55,740
data very differently and the way they

00:01:53,670 --> 00:01:57,180
do so not only reveals how each system

00:01:55,740 --> 00:01:58,619
thinks about the structure of a side but

00:01:57,180 --> 00:01:59,759
also informs all of the API and user

00:01:58,619 --> 00:02:02,369
interfaces you'll see throughout this

00:01:59,759 --> 00:02:03,960
talk now the obvious place to start is

00:02:02,369 --> 00:02:05,340
mezzanine it has the simplest most

00:02:03,960 --> 00:02:06,990
straightforward data model of the three

00:02:05,340 --> 00:02:08,489
and if I were building a CMS from

00:02:06,990 --> 00:02:10,649
scratch without having seen any of these

00:02:08,489 --> 00:02:11,520
three it's probably something that I

00:02:10,649 --> 00:02:13,470
probably end up with something that

00:02:11,520 --> 00:02:15,120
looks a lot like misny there's an

00:02:13,470 --> 00:02:17,610
called page with one instance for every

00:02:15,120 --> 00:02:19,100
page on your website and all the content

00:02:17,610 --> 00:02:21,120
and the metadata is stored in that model

00:02:19,100 --> 00:02:22,890
pages are laying out in a tree and you

00:02:21,120 --> 00:02:25,140
can have different kinds of pages with

00:02:22,890 --> 00:02:26,460
different fields on them each of them

00:02:25,140 --> 00:02:28,050
inherits from a concrete base model

00:02:26,460 --> 00:02:29,700
called page mezzanine comes with a few

00:02:28,050 --> 00:02:31,770
of rich text page a link page but does

00:02:29,700 --> 00:02:33,360
redirects and a few others and you can

00:02:31,770 --> 00:02:36,330
add even more by sub classing page in

00:02:33,360 --> 00:02:37,890
your own model when I tell structure is

00:02:36,330 --> 00:02:39,780
very similar it has a tree of pages

00:02:37,890 --> 00:02:42,300
different page types and subclasses of a

00:02:39,780 --> 00:02:44,070
concrete based model called page weight

00:02:42,300 --> 00:02:45,660
I'll also has revision control that not

00:02:44,070 --> 00:02:47,130
only saves past versions of a page but

00:02:45,660 --> 00:02:49,770
also lets you save drafts future

00:02:47,130 --> 00:02:51,450
versions without publishing them in

00:02:49,770 --> 00:02:53,370
contrast mezzanine does have a published

00:02:51,450 --> 00:02:54,810
flag on pages of lecture high drafts

00:02:53,370 --> 00:02:56,420
from the site but once the page is

00:02:54,810 --> 00:02:59,280
published any changes you make because

00:02:56,420 --> 00:03:00,570
immediately the published version is

00:02:59,280 --> 00:03:02,520
stored on the model and the rest of the

00:03:00,570 --> 00:03:03,810
history sought elsewhere is Jason but so

00:03:02,520 --> 00:03:07,080
far I've gone you can usually pretend

00:03:03,810 --> 00:03:08,760
it's not there the big difference with

00:03:07,080 --> 00:03:10,680
wagtail though is there's no default

00:03:08,760 --> 00:03:11,910
page types at all where Excel does

00:03:10,680 --> 00:03:13,590
provide a whole bunch of useful field

00:03:11,910 --> 00:03:15,060
types that don't come with Django Lite

00:03:13,590 --> 00:03:18,390
rich text but it expects you to put them

00:03:15,060 --> 00:03:20,280
into page cite yourself this is a bit of

00:03:18,390 --> 00:03:22,230
a recurring theme with wagtail where ms

00:03:20,280 --> 00:03:24,090
lean and Django CMS both provide a CMS

00:03:22,230 --> 00:03:26,610
that works out of the box why I tell it

00:03:24,090 --> 00:03:27,750
approach is a bit different when I tell

00:03:26,610 --> 00:03:29,250
provides everything you need to put a

00:03:27,750 --> 00:03:30,600
site together but expect you to assemble

00:03:29,250 --> 00:03:33,019
it yourself sort of like buying a Lego

00:03:30,600 --> 00:03:35,340
set rather than an off-the-shelf toy

00:03:33,019 --> 00:03:36,630
wagtails killer feature is Stringfield

00:03:35,340 --> 00:03:38,220
as the name suggests stream field is

00:03:36,630 --> 00:03:39,450
just a regular django model field there

00:03:38,220 --> 00:03:41,760
for you to add to your page types but

00:03:39,450 --> 00:03:42,930
it's quite powerful when you define a

00:03:41,760 --> 00:03:44,670
string field you give it a set of blocks

00:03:42,930 --> 00:03:47,040
for example heading paragraph or video

00:03:44,670 --> 00:03:48,540
embed your editors can insert these

00:03:47,040 --> 00:03:50,040
blocks in any order they like into the

00:03:48,540 --> 00:03:50,760
field and internally it's all serialized

00:03:50,040 --> 00:03:52,709
this Jason

00:03:50,760 --> 00:03:54,299
so you field as a sort of meta Lego

00:03:52,709 --> 00:03:55,110
block it's a Lego block in the sense

00:03:54,299 --> 00:03:56,549
that you have to put all the pieces

00:03:55,110 --> 00:03:58,950
together yourself before you can put it

00:03:56,549 --> 00:04:00,810
in front of your content editors and

00:03:58,950 --> 00:04:02,549
also in a sense then lets you give them

00:04:00,810 --> 00:04:03,989
Lego blocks tiny pre-made bits of page

00:04:02,549 --> 00:04:06,360
they can assemble assemble a bunch of

00:04:03,989 --> 00:04:07,500
different ways and trim fillers are

00:04:06,360 --> 00:04:08,580
specially great for when your designers

00:04:07,500 --> 00:04:10,590
come up with come up with make a

00:04:08,580 --> 00:04:12,420
magazine style pull quotes or sidebars

00:04:10,590 --> 00:04:14,100
or other things like that things your

00:04:12,420 --> 00:04:16,320
content editors will use as part of

00:04:14,100 --> 00:04:18,419
larger blocks of text but you can't

00:04:16,320 --> 00:04:19,560
predict how aware ahead of time so you

00:04:18,419 --> 00:04:20,790
can't just put them into the templates

00:04:19,560 --> 00:04:23,180
and in turning them into something like

00:04:20,790 --> 00:04:25,740
ckeditor is going to be like clean teeth

00:04:23,180 --> 00:04:27,220
don't go CMS is totally different there

00:04:25,740 --> 00:04:29,110
are no page type models here at all

00:04:27,220 --> 00:04:30,400
said each page has placeholders which

00:04:29,110 --> 00:04:31,630
you can fill with plugins which

00:04:30,400 --> 00:04:32,590
placeholders you get and where your

00:04:31,630 --> 00:04:33,850
where they're located on the page

00:04:32,590 --> 00:04:35,950
depends on which of your templates you

00:04:33,850 --> 00:04:38,140
choose so I guess this makes templates a

00:04:35,950 --> 00:04:39,580
sort of page type analog the actual

00:04:38,140 --> 00:04:41,650
database structure is very different too

00:04:39,580 --> 00:04:43,360
there is a page model which sauce basic

00:04:41,650 --> 00:04:45,730
information about the page and each page

00:04:43,360 --> 00:04:47,560
has one or more titles to find its name

00:04:45,730 --> 00:04:48,700
title the title model doesn't just on

00:04:47,560 --> 00:04:50,440
the page style but anything that's

00:04:48,700 --> 00:04:52,150
language specific of that page there's a

00:04:50,440 --> 00:04:53,710
placeholder model when instance for each

00:04:52,150 --> 00:04:55,810
placeholder and a plug-in model when

00:04:53,710 --> 00:04:57,400
instance for every plug-in plugins use

00:04:55,810 --> 00:04:58,900
multi table inheritance so there's also

00:04:57,400 --> 00:05:01,660
a different table for each plug-in type

00:04:58,900 --> 00:05:03,190
you have and your pages instruction at

00:05:01,660 --> 00:05:05,110
the tree plugins can contain other

00:05:03,190 --> 00:05:07,600
nested plugins to their structure in a

00:05:05,110 --> 00:05:08,950
tree - oh and Django CMS stores two

00:05:07,600 --> 00:05:11,590
copies of each page in the same table

00:05:08,950 --> 00:05:13,510
one live one draft so there's two copies

00:05:11,590 --> 00:05:14,830
of this entire structure this can be a

00:05:13,510 --> 00:05:16,120
bit of a gotcha one query in your pages

00:05:14,830 --> 00:05:17,560
you have to remember to filter out the

00:05:16,120 --> 00:05:21,130
draft ones or you get lots of mortal

00:05:17,560 --> 00:05:22,210
objects returned errors now that we've

00:05:21,130 --> 00:05:23,500
looked at the fundamental structure

00:05:22,210 --> 00:05:24,669
beneath each of the free systems were

00:05:23,500 --> 00:05:26,530
going to jump up to the very top layer

00:05:24,669 --> 00:05:28,860
and talk about the admin UI so the

00:05:26,530 --> 00:05:30,940
content editors interact with I

00:05:28,860 --> 00:05:32,860
apologize this is gonna be out of sync

00:05:30,940 --> 00:05:34,000
because I it broke but the first thing

00:05:32,860 --> 00:05:35,650
you notice about where tails admin

00:05:34,000 --> 00:05:37,570
interface is it's not the default Django

00:05:35,650 --> 00:05:39,250
admin has been built from the ground up

00:05:37,570 --> 00:05:40,840
and so we're going to go edit a page

00:05:39,250 --> 00:05:42,910
with this with a stream field now as you

00:05:40,840 --> 00:05:44,020
can see what that looks like you'll

00:05:42,910 --> 00:05:45,820
notice all the quick targets are

00:05:44,020 --> 00:05:47,350
reasonably big which makes it the best

00:05:45,820 --> 00:05:48,640
option for leak by leaps and bounds of

00:05:47,350 --> 00:05:51,970
your content editors are going to be

00:05:48,640 --> 00:05:55,030
editing from say iPads so we're adding

00:05:51,970 --> 00:05:56,410
it in your paragraph block here and it

00:05:55,030 --> 00:05:58,240
is sort of responsive but it doesn't go

00:05:56,410 --> 00:06:02,800
all the way down to font size no tablet

00:05:58,240 --> 00:06:04,690
to the limit so we've just added a text

00:06:02,800 --> 00:06:08,800
block to our stream field and that's

00:06:04,690 --> 00:06:10,479
what the stream filter looks like meza

00:06:08,800 --> 00:06:11,950
means admin tunnel is literally just the

00:06:10,479 --> 00:06:13,510
Django admin it has some slightly

00:06:11,950 --> 00:06:14,950
different CSS and a few things are moved

00:06:13,510 --> 00:06:17,229
around and when you go into edit pages

00:06:14,950 --> 00:06:18,430
you get this preview other than that if

00:06:17,229 --> 00:06:19,930
you use the Django admin you've used

00:06:18,430 --> 00:06:21,520
mezzanines admin and there's nothing

00:06:19,930 --> 00:06:22,960
really revolutionary here not that

00:06:21,520 --> 00:06:25,419
that's a bad thing it does the job and

00:06:22,960 --> 00:06:27,070
it does it well what is revolutionary is

00:06:25,419 --> 00:06:29,620
an optional feature you're about to see

00:06:27,070 --> 00:06:30,729
we called inline editing when you're

00:06:29,620 --> 00:06:32,140
logged in and you're browsing the site

00:06:30,729 --> 00:06:34,479
you can click a button in the corner

00:06:32,140 --> 00:06:38,080
which the video will click in about a

00:06:34,479 --> 00:06:39,729
second and little yellow edit buttons

00:06:38,080 --> 00:06:40,990
appear all over the page like that each

00:06:39,729 --> 00:06:42,340
link to a rectangle around

00:06:40,990 --> 00:06:43,960
10 click on the boys you get a pop-up

00:06:42,340 --> 00:06:46,449
and you can edit the content without

00:06:43,960 --> 00:06:47,979
even leaving the page it means rather

00:06:46,449 --> 00:06:49,960
limited you can't add or delete pages

00:06:47,979 --> 00:06:51,430
for instance I only edit them but it's

00:06:49,960 --> 00:06:54,160
great for the 20% of things you need to

00:06:51,430 --> 00:06:55,569
do 80% of the time on a site now when I

00:06:54,160 --> 00:06:57,819
first started using mezzanine I thought

00:06:55,569 --> 00:06:59,789
that front-end editing or inline editing

00:06:57,819 --> 00:07:01,840
was a gimmick a minor time-saver best

00:06:59,789 --> 00:07:03,849
but of course I already knew my way

00:07:01,840 --> 00:07:05,169
around a CMS for our content editors

00:07:03,849 --> 00:07:06,759
where I was working at the time

00:07:05,169 --> 00:07:08,710
learning a new interface took them time

00:07:06,759 --> 00:07:10,660
and editing web content was only a small

00:07:08,710 --> 00:07:12,639
part of their job so they had other

00:07:10,660 --> 00:07:13,780
things to do with that time as well but

00:07:12,639 --> 00:07:15,639
they already knew how to navigate around

00:07:13,780 --> 00:07:16,960
the front end of a website which meant

00:07:15,639 --> 00:07:19,300
the new interface they needed to learn

00:07:16,960 --> 00:07:21,550
was a grand total of two clicks which

00:07:19,300 --> 00:07:23,680
they picked up instantly and remembered

00:07:21,550 --> 00:07:24,970
immediately and the new pages were

00:07:23,680 --> 00:07:26,410
something they only need needed to do

00:07:24,970 --> 00:07:28,560
rarely so they just emailed me and got

00:07:26,410 --> 00:07:30,910
me to do it

00:07:28,560 --> 00:07:32,650
now Mizanin has front-end editing as an

00:07:30,910 --> 00:07:35,530
option but Django CMS is different it's

00:07:32,650 --> 00:07:37,270
all fronting all the time as you can see

00:07:35,530 --> 00:07:39,759
there's a menu bar at the top of what is

00:07:37,270 --> 00:07:41,440
otherwise just our regular site and a

00:07:39,759 --> 00:07:43,509
couple seconds ago we double clicked on

00:07:41,440 --> 00:07:46,090
something and we got this pop-up which

00:07:43,509 --> 00:07:47,349
we can use to edit it

00:07:46,090 --> 00:07:51,550
you'll notice the process of switching

00:07:47,349 --> 00:07:52,750
between I'd rethink going too fast so I

00:07:51,550 --> 00:07:53,979
don't move plugins you switch to the

00:07:52,750 --> 00:07:56,979
structure view I'm adding a new plug-in

00:07:53,979 --> 00:07:59,020
now hanging in a video and everything

00:07:56,979 --> 00:08:02,080
else like administering pages you can

00:07:59,020 --> 00:08:03,250
launch from the menus at the top which

00:08:02,080 --> 00:08:07,150
will bring out a little flyout from the

00:08:03,250 --> 00:08:08,380
left-hand side and yours the process of

00:08:07,150 --> 00:08:09,820
switching between editing different

00:08:08,380 --> 00:08:11,380
plugins is a bit more involved than

00:08:09,820 --> 00:08:13,360
moving between different stream field

00:08:11,380 --> 00:08:15,550
blocks because of that there seems to be

00:08:13,360 --> 00:08:17,169
a tendency towards Django CMS plugins

00:08:15,550 --> 00:08:18,310
being a bit more coarse-grained whereas

00:08:17,169 --> 00:08:20,849
in stream field you might have a single

00:08:18,310 --> 00:08:22,659
block per paragraph

00:08:20,849 --> 00:08:23,770
now you might not have guessed at at

00:08:22,659 --> 00:08:25,539
first glance but by now you've probably

00:08:23,770 --> 00:08:27,610
noticed Django CMS uses Django as

00:08:25,539 --> 00:08:29,800
built-in happening as well both the fly

00:08:27,610 --> 00:08:31,509
out to the pop-ups are just Django admin

00:08:29,800 --> 00:08:33,039
views and there's a menu option to bring

00:08:31,509 --> 00:08:34,890
up the Django admin home page in a

00:08:33,039 --> 00:08:36,550
flyout

00:08:34,890 --> 00:08:38,829
so now we'll look at the first

00:08:36,550 --> 00:08:40,659
impression that each CMS gives you as a

00:08:38,829 --> 00:08:43,180
developer and when you get started with

00:08:40,659 --> 00:08:44,589
it now the mezzanine installation

00:08:43,180 --> 00:08:46,420
experience is the simplest of them all

00:08:44,589 --> 00:08:48,700
mezzanine project works exactly like

00:08:46,420 --> 00:08:49,990
django Django admin start projects in

00:08:48,700 --> 00:08:51,850
fact it's actually based on start

00:08:49,990 --> 00:08:53,800
project but unlike don't go itself you

00:08:51,850 --> 00:08:54,880
get a fully working site I mentioned

00:08:53,800 --> 00:08:56,740
mezzanine comes with a bunch of bay

00:08:54,880 --> 00:08:58,690
please page type to get you started but

00:08:56,740 --> 00:09:00,400
the default mezzanine project also comes

00:08:58,690 --> 00:09:04,990
with some templates as well built on

00:09:00,400 --> 00:09:07,690
Twitter bootstrap so what you need to do

00:09:04,990 --> 00:09:08,860
is run mezzanine project then the usual

00:09:07,690 --> 00:09:10,720
things you need to do with a new Django

00:09:08,860 --> 00:09:13,360
site and you have something that's 100%

00:09:10,720 --> 00:09:15,670
ready to use if you know that your site

00:09:13,360 --> 00:09:17,260
is going to be mostly built in page

00:09:15,670 --> 00:09:19,150
types you can push this up to a service

00:09:17,260 --> 00:09:20,320
straight away and your content editors

00:09:19,150 --> 00:09:22,060
can get a head start on building the

00:09:20,320 --> 00:09:23,410
content while you work on the templates

00:09:22,060 --> 00:09:26,260
and whatever custom page like you do

00:09:23,410 --> 00:09:28,480
need the way I tell installation

00:09:26,260 --> 00:09:29,590
experience is basically identical the

00:09:28,480 --> 00:09:30,700
only difference is you don't get any

00:09:29,590 --> 00:09:32,800
templates at all by default either

00:09:30,700 --> 00:09:34,600
wagtails lego block approach means you

00:09:32,800 --> 00:09:37,510
have a bit more work ahead of you before

00:09:34,600 --> 00:09:41,050
your site is up and running during your

00:09:37,510 --> 00:09:42,490
CMS is a little different it has an

00:09:41,050 --> 00:09:43,990
installer in a separate distribution

00:09:42,490 --> 00:09:46,750
separate distributions by the way are a

00:09:43,990 --> 00:09:48,070
recurring theme in Django CMS which asks

00:09:46,750 --> 00:09:49,540
you a bunch of questions before selling

00:09:48,070 --> 00:09:51,790
out to pick installing things for you

00:09:49,540 --> 00:09:53,620
and running migrations if it fails for

00:09:51,790 --> 00:09:55,870
whatever reason it helpfully deletes

00:09:53,620 --> 00:09:58,180
everything for you our DNS at work is a

00:09:55,870 --> 00:10:01,300
bit flaky when your analytics host so

00:09:58,180 --> 00:10:02,800
this gets pretty old pretty fast and

00:10:01,300 --> 00:10:05,080
this is the requirements text that

00:10:02,800 --> 00:10:06,130
Django CMS installer creates and you can

00:10:05,080 --> 00:10:08,950
see what I mean about separate

00:10:06,130 --> 00:10:10,780
distributions being a recurring theme if

00:10:08,950 --> 00:10:13,180
you're back you might not be able to see

00:10:10,780 --> 00:10:16,630
but all of those URLs are a single

00:10:13,180 --> 00:10:18,340
plug-in there Packers in traditional

00:10:16,630 --> 00:10:19,810
distributions and new versions are at

00:10:18,340 --> 00:10:20,590
least independently of each other as far

00:10:19,810 --> 00:10:22,600
as I can tell

00:10:20,590 --> 00:10:24,580
which makes upgrading a mess to make

00:10:22,600 --> 00:10:26,410
matters worse everything is pulled down

00:10:24,580 --> 00:10:27,880
from the master branch on github and no

00:10:26,410 --> 00:10:30,070
as far as I can tell those query strings

00:10:27,880 --> 00:10:31,360
don't do anything as a result at work

00:10:30,070 --> 00:10:33,100
we've had a bunch of time to loop to

00:10:31,360 --> 00:10:34,210
point out to production I need to have

00:10:33,100 --> 00:10:36,550
it exploited where development or

00:10:34,210 --> 00:10:38,290
staging was just fine and these packages

00:10:36,550 --> 00:10:42,190
are on pypy I to like I don't know why

00:10:38,290 --> 00:10:44,710
it's like this but all three CMS's also

00:10:42,190 --> 00:10:46,510
have an easy documented process to turn

00:10:44,710 --> 00:10:49,660
a plain Django project into a whitetail

00:10:46,510 --> 00:10:51,400
Django CMS or mezzanine one wagtails is

00:10:49,660 --> 00:10:52,870
the simplest and Jago CMS's of them is

00:10:51,400 --> 00:10:54,940
the most involved but they're all pretty

00:10:52,870 --> 00:10:56,590
straightforward you could use this to

00:10:54,940 --> 00:10:58,720
ball to CMS onto a project that already

00:10:56,590 --> 00:11:00,040
has some other functionality or if you

00:10:58,720 --> 00:11:01,390
have an internal Django project cookie

00:11:00,040 --> 00:11:03,640
cutter that we use like we do at work

00:11:01,390 --> 00:11:05,500
you can add your CMS as an option and

00:11:03,640 --> 00:11:07,150
make your CMS projects and your regular

00:11:05,500 --> 00:11:09,020
Django projects more consistent with

00:11:07,150 --> 00:11:10,950
each other

00:11:09,020 --> 00:11:12,420
now we're going to get into the actual

00:11:10,950 --> 00:11:13,800
nuts and bolts of building sites with

00:11:12,420 --> 00:11:15,870
these three systems and we'll start with

00:11:13,800 --> 00:11:17,190
making some page types as an example

00:11:15,870 --> 00:11:19,440
we'll make a page height for an event

00:11:17,190 --> 00:11:20,880
will start with mezzanine this is a

00:11:19,440 --> 00:11:21,870
pretty straightforward django model the

00:11:20,880 --> 00:11:23,790
only thing that's different from your

00:11:21,870 --> 00:11:26,100
box and a JDI lap is we inherit from

00:11:23,790 --> 00:11:27,120
page and that we're using the rich text

00:11:26,100 --> 00:11:29,640
field mezzanine provides for a

00:11:27,120 --> 00:11:31,110
description field then we need to make

00:11:29,640 --> 00:11:32,850
it editable in the admin because

00:11:31,110 --> 00:11:34,170
mezzanine admin is just regular and then

00:11:32,850 --> 00:11:36,120
we do this the same way with any other

00:11:34,170 --> 00:11:37,950
take a lap but with this custom admin

00:11:36,120 --> 00:11:39,540
class of course we could subclass page

00:11:37,950 --> 00:11:41,310
admin further if we wanted to make

00:11:39,540 --> 00:11:44,190
modifications to the admin UI but we

00:11:41,310 --> 00:11:45,630
weren't for now and the last step is

00:11:44,190 --> 00:11:47,700
adding a template to render our custom

00:11:45,630 --> 00:11:49,350
page times once again ordinary Django

00:11:47,700 --> 00:11:50,670
template we don't even need to write any

00:11:49,350 --> 00:11:51,690
code to wire it up to the model just

00:11:50,670 --> 00:11:53,460
give it the correct name and mezzanine

00:11:51,690 --> 00:11:55,050
will find it now you'll notice

00:11:53,460 --> 00:11:57,240
everything is wrapped in these editable

00:11:55,050 --> 00:11:58,590
template tags those are hooks for

00:11:57,240 --> 00:12:00,120
mezzanine in line editing which we

00:11:58,590 --> 00:12:02,010
sought before adding these template tags

00:12:00,120 --> 00:12:03,450
all you need to do wrap it around a bit

00:12:02,010 --> 00:12:06,900
of content passing the field you want to

00:12:03,450 --> 00:12:08,730
make editable and it just works now when

00:12:06,900 --> 00:12:09,930
we define a custom page type in wagging

00:12:08,730 --> 00:12:11,280
tail we can do something very similar

00:12:09,930 --> 00:12:13,800
the only thing that's changed here from

00:12:11,280 --> 00:12:15,060
mezzanine at the imports that's where

00:12:13,800 --> 00:12:16,320
the similarity ends a very admin

00:12:15,060 --> 00:12:18,180
configuration is done on the model

00:12:16,320 --> 00:12:20,100
itself by assigning a list of panels to

00:12:18,180 --> 00:12:21,150
content panels and we have to list all

00:12:20,100 --> 00:12:22,470
of them manually because it won't

00:12:21,150 --> 00:12:24,930
automatically pick up all the fields

00:12:22,470 --> 00:12:26,250
like mezzanine does wire tails panels

00:12:24,930 --> 00:12:27,660
are similar to widgets but a bit more

00:12:26,250 --> 00:12:29,430
freeform you can see we've got a fuel

00:12:27,660 --> 00:12:31,380
draw panel that has a bunch of filled

00:12:29,430 --> 00:12:32,700
panels inside it for instance we haven't

00:12:31,380 --> 00:12:34,890
used them here but wagtail has a bunch

00:12:32,700 --> 00:12:36,390
of other built in panels with things

00:12:34,890 --> 00:12:39,660
like choosers for linkages other pages

00:12:36,390 --> 00:12:41,160
images or downloadable media now we're

00:12:39,660 --> 00:12:43,020
adding things to content panels because

00:12:41,160 --> 00:12:45,450
we want to set what's on the content out

00:12:43,020 --> 00:12:46,920
of the editor the editor also has a

00:12:45,450 --> 00:12:48,480
promote and settings tab which we can

00:12:46,920 --> 00:12:51,750
change using promote panels or settings

00:12:48,480 --> 00:12:52,950
panels and if we want to change what

00:12:51,750 --> 00:12:56,520
tabs are there completely we just add

00:12:52,950 --> 00:12:58,200
another four lines of code now I

00:12:56,520 --> 00:12:59,850
mentioned that wagtail doesn't give us

00:12:58,200 --> 00:13:01,680
any predefined page types out-of-the-box

00:12:59,850 --> 00:13:03,210
so we're also going to make ourselves a

00:13:01,680 --> 00:13:04,770
basic page type for general content on

00:13:03,210 --> 00:13:06,510
our website and this time we'll use a

00:13:04,770 --> 00:13:07,920
stream field now how powerful they are

00:13:06,510 --> 00:13:09,420
defining a stream fields quite simple

00:13:07,920 --> 00:13:10,910
you just pass a list of all the blocks

00:13:09,420 --> 00:13:12,900
you want to make available and that's it

00:13:10,910 --> 00:13:14,580
nearly everything that's available is a

00:13:12,900 --> 00:13:16,710
model field is also available as a

00:13:14,580 --> 00:13:17,880
stream field block plus some more you

00:13:16,710 --> 00:13:19,290
can see here we've used a char block

00:13:17,880 --> 00:13:20,940
rich text block image choose a block and

00:13:19,290 --> 00:13:22,410
embed block which is for embedding

00:13:20,940 --> 00:13:24,600
things like YouTube video

00:13:22,410 --> 00:13:26,730
but there's also your block date time

00:13:24,600 --> 00:13:29,029
block bullying block equivalent to all

00:13:26,730 --> 00:13:31,200
the other model fields

00:13:29,029 --> 00:13:32,279
screams we'll get to really even more

00:13:31,200 --> 00:13:34,050
powerful though when you start using

00:13:32,279 --> 00:13:35,399
structural blocks here we've replaced

00:13:34,050 --> 00:13:37,380
our simple image to use a block with a

00:13:35,399 --> 00:13:38,790
struct block which means that any time

00:13:37,380 --> 00:13:40,410
one of our content editors goes to add

00:13:38,790 --> 00:13:41,730
an image they'll get both an image

00:13:40,410 --> 00:13:44,399
choose a field in a field to enter a

00:13:41,730 --> 00:13:45,959
caption we've also set a custom template

00:13:44,399 --> 00:13:46,980
to render abstract block which is

00:13:45,959 --> 00:13:48,779
something it's something you can do with

00:13:46,980 --> 00:13:51,810
any block but it's most used useful on

00:13:48,779 --> 00:13:53,459
structural blocks whitetail also has a

00:13:51,810 --> 00:13:54,990
lisp block which is a homogeneous list

00:13:53,459 --> 00:13:56,520
every item in it it's the same kind of

00:13:54,990 --> 00:13:58,170
block which we've used here to let our

00:13:56,520 --> 00:14:00,810
users embed carousels within articles

00:13:58,170 --> 00:14:02,940
and the last kind of block structural

00:14:00,810 --> 00:14:04,589
block is a stream block which lets you

00:14:02,940 --> 00:14:06,690
essentially embed a stream field inside

00:14:04,589 --> 00:14:08,370
a stream field in fact a stream field is

00:14:06,690 --> 00:14:11,279
at the top level a single instance of

00:14:08,370 --> 00:14:12,930
stream block the other thing we're using

00:14:11,279 --> 00:14:14,670
here is an alternate style of specifying

00:14:12,930 --> 00:14:16,020
structural blocks we can subclass them

00:14:14,670 --> 00:14:17,550
instead of calling them and through the

00:14:16,020 --> 00:14:19,350
magic of Medical Arts as it worked in

00:14:17,550 --> 00:14:20,730
the same way this is a really neat

00:14:19,350 --> 00:14:23,100
syntax for making our structures of logs

00:14:20,730 --> 00:14:24,770
reusable it's doubly mate because

00:14:23,100 --> 00:14:27,390
instead of passing a list of block sites

00:14:24,770 --> 00:14:29,040
we can pass stream field a single stream

00:14:27,390 --> 00:14:31,610
block to use which gives us a mechanism

00:14:29,040 --> 00:14:34,200
for reusing our stream field definition

00:14:31,610 --> 00:14:35,610
so going back to our event page suppose

00:14:34,200 --> 00:14:37,500
we want to use a stream field beer as

00:14:35,610 --> 00:14:38,910
well and we want to have one to have all

00:14:37,500 --> 00:14:40,740
of the block types available on all that

00:14:38,910 --> 00:14:43,170
other pages plus the special ones a

00:14:40,740 --> 00:14:44,610
highlight stream speaker profiles to do

00:14:43,170 --> 00:14:46,380
that we can just subclass our content

00:14:44,610 --> 00:14:50,550
block and add our special block to the

00:14:46,380 --> 00:14:51,900
list now when we were looking at where I

00:14:50,550 --> 00:14:53,220
tell I didn't show you any templates at

00:14:51,900 --> 00:14:54,990
all because the Python code was where

00:14:53,220 --> 00:14:55,950
all of the action happened and the

00:14:54,990 --> 00:14:57,900
templates were basically what you would

00:14:55,950 --> 00:14:59,760
expect in Django CMS is the opposite

00:14:57,900 --> 00:15:01,500
everything happens in the templates and

00:14:59,760 --> 00:15:03,779
there's almost no Python code to change

00:15:01,500 --> 00:15:06,060
at all to making your page type all we

00:15:03,779 --> 00:15:07,890
have to do is insert our placeholder

00:15:06,060 --> 00:15:08,160
tags into our template and we're good to

00:15:07,890 --> 00:15:10,110
go

00:15:08,160 --> 00:15:11,850
what this means is while running

00:15:10,110 --> 00:15:14,220
mezzanine can get get you up and running

00:15:11,850 --> 00:15:15,360
with zero configuration gen go to CMS is

00:15:14,220 --> 00:15:16,950
this is probably the simplest to

00:15:15,360 --> 00:15:18,750
actually get a finished site going in

00:15:16,950 --> 00:15:21,089
mezzanine you can sort of do the same

00:15:18,750 --> 00:15:22,680
thing by supplying a custom template for

00:15:21,089 --> 00:15:24,450
just the built in rich text page type

00:15:22,680 --> 00:15:27,620
but only if every single page is going

00:15:24,450 --> 00:15:30,060
to have one single big block of content

00:15:27,620 --> 00:15:31,380
this placeholder and plug-in structure

00:15:30,060 --> 00:15:33,750
allows for a lot more flexibility

00:15:31,380 --> 00:15:35,460
without custom code so general CMS lets

00:15:33,750 --> 00:15:38,399
you go a lot further without writing any

00:15:35,460 --> 00:15:39,930
and this isn't by accident either on de

00:15:38,399 --> 00:15:41,610
Vos blog they talk about competing with

00:15:39,930 --> 00:15:43,350
WordPress which as Donna and Russ

00:15:41,610 --> 00:15:44,850
discussed this morning you can use

00:15:43,350 --> 00:15:46,500
without actually being a developer and

00:15:44,850 --> 00:15:48,480
this sort of thing and aldrin which

00:15:46,500 --> 00:15:51,959
we'll talk about later means that I

00:15:48,480 --> 00:15:53,940
think they're in with the chance so on

00:15:51,959 --> 00:15:55,589
outside we also have a block I will be

00:15:53,940 --> 00:15:57,360
writing articles have targeted at

00:15:55,589 --> 00:16:00,000
developers so I want to have the ability

00:15:57,360 --> 00:16:01,380
to add code blocks because we've used a

00:16:00,000 --> 00:16:03,089
placeholder for our content on Django

00:16:01,380 --> 00:16:04,910
CMS and a stream field on wagtail but

00:16:03,089 --> 00:16:07,589
that shouldn't be too hard

00:16:04,910 --> 00:16:08,910
we already saw a bit about how you can

00:16:07,589 --> 00:16:10,560
create your own block types in stream

00:16:08,910 --> 00:16:11,910
field in the last section using

00:16:10,560 --> 00:16:14,010
structural blocks and that's all we're

00:16:11,910 --> 00:16:15,360
doing here we're creating a struct block

00:16:14,010 --> 00:16:17,399
like we saw in the last section and

00:16:15,360 --> 00:16:20,190
we're using the subclass syntax like we

00:16:17,399 --> 00:16:21,750
did before with stream block in this

00:16:20,190 --> 00:16:23,520
case we do need to use a custom template

00:16:21,750 --> 00:16:25,440
to render abstract block when we use

00:16:23,520 --> 00:16:27,810
strut block last section we gave it a

00:16:25,440 --> 00:16:30,870
quad called template and in this in this

00:16:27,810 --> 00:16:34,020
subclass syntax we use class meta like

00:16:30,870 --> 00:16:35,550
Anna Django model it is also possible to

00:16:34,020 --> 00:16:37,770
create room for a stream field block

00:16:35,550 --> 00:16:39,149
types totally from scratch but the

00:16:37,770 --> 00:16:40,650
official wagtail Docs are light on the

00:16:39,149 --> 00:16:42,120
subject telling the reader to consult

00:16:40,650 --> 00:16:44,220
the source code for the built-in ones

00:16:42,120 --> 00:16:45,959
fortunately struck what serves as needs

00:16:44,220 --> 00:16:47,580
just fine here and because of the wide

00:16:45,959 --> 00:16:49,500
array of blocks you can put inside a

00:16:47,580 --> 00:16:51,000
struts block it seems like it'd be

00:16:49,500 --> 00:16:52,230
rather uncommon to go that far you'd

00:16:51,000 --> 00:16:53,700
probably only need to in the sort of

00:16:52,230 --> 00:16:56,690
situations where you'd need to create a

00:16:53,700 --> 00:16:58,770
custom Django model feel for instance

00:16:56,690 --> 00:16:59,970
here's what the template looks like as

00:16:58,770 --> 00:17:01,589
well as the template filter we used to

00:16:59,970 --> 00:17:03,120
do syntax highlighting and we've only

00:17:01,589 --> 00:17:04,530
written about 15 lines total including

00:17:03,120 --> 00:17:07,439
all the pigment stuff and I haven't left

00:17:04,530 --> 00:17:08,939
anything out in I haven't left anything

00:17:07,439 --> 00:17:11,939
out here in say except for import

00:17:08,939 --> 00:17:13,559
statements and it all works now I

00:17:11,939 --> 00:17:15,240
mentioned before the negros CMS plugins

00:17:13,559 --> 00:17:16,709
have their own model and this is ours

00:17:15,240 --> 00:17:18,300
apart from the fact we're sub classing

00:17:16,709 --> 00:17:21,150
from CMS plugin it's pretty standard

00:17:18,300 --> 00:17:22,679
Django stuff that was the plug-in model

00:17:21,150 --> 00:17:24,540
and this is the plug-in itself we're

00:17:22,679 --> 00:17:26,160
inheriting from CMS plugin base which is

00:17:24,540 --> 00:17:28,950
actually a subclass of Django is model

00:17:26,160 --> 00:17:30,840
admin but generally CMS uses it to fight

00:17:28,950 --> 00:17:32,550
to define both Calla plugin appears in

00:17:30,840 --> 00:17:34,710
the admin and how its rendered on the

00:17:32,550 --> 00:17:37,080
page the source code dot HTML template

00:17:34,710 --> 00:17:38,760
we reference there is the template to

00:17:37,080 --> 00:17:42,000
render the actual content not the admin

00:17:38,760 --> 00:17:43,350
fields now by convention plug-in class

00:17:42,000 --> 00:17:45,419
names end in plugin and the

00:17:43,350 --> 00:17:46,860
corresponding model start it's a bit

00:17:45,419 --> 00:17:48,660
confusing because the base class for

00:17:46,860 --> 00:17:49,230
models our CMS plugin and the base class

00:17:48,660 --> 00:17:51,299
for

00:17:49,230 --> 00:17:54,570
plugins is CMS plug-in base but that's

00:17:51,299 --> 00:17:55,919
how it is personally I find most of my

00:17:54,570 --> 00:17:57,299
plugins are short and simple and

00:17:55,919 --> 00:17:59,790
splitting them up like this means I have

00:17:57,299 --> 00:18:01,410
two files one that has half each of

00:17:59,790 --> 00:18:02,640
eight different plugins and one that has

00:18:01,410 --> 00:18:03,690
all the other halfs and switching

00:18:02,640 --> 00:18:05,790
between the two of them gets annoying

00:18:03,690 --> 00:18:08,130
but it's easy to see how this separation

00:18:05,790 --> 00:18:09,750
could end up helping as the plugins get

00:18:08,130 --> 00:18:11,549
larger and more complex and besides

00:18:09,750 --> 00:18:13,200
we've already seen that Django CMS has a

00:18:11,549 --> 00:18:17,700
preference for more or less one plug-in

00:18:13,200 --> 00:18:19,020
pack anyway now there is one really big

00:18:17,700 --> 00:18:20,610
advantage to the way Django CMS

00:18:19,020 --> 00:18:23,220
structures its plugins and that's

00:18:20,610 --> 00:18:24,690
migrations because each plug-in owns its

00:18:23,220 --> 00:18:26,460
own model you can change the structure

00:18:24,690 --> 00:18:27,570
of your plug-in down the track using the

00:18:26,460 --> 00:18:29,850
full power of dingers built-in

00:18:27,570 --> 00:18:31,500
migrations in wagtail on the other hand

00:18:29,850 --> 00:18:33,390
if the structure of your stream field

00:18:31,500 --> 00:18:36,030
blocks change you're on your own

00:18:33,390 --> 00:18:37,410
and because if your change is strictly

00:18:36,030 --> 00:18:38,130
additive because stream fields are

00:18:37,410 --> 00:18:40,410
stored us Jason

00:18:38,130 --> 00:18:41,660
you'll probably be okay but if you need

00:18:40,410 --> 00:18:43,679
to do something like a data migration

00:18:41,660 --> 00:18:45,960
especially if say your block is

00:18:43,679 --> 00:18:47,340
distributed as a package and pipe UI for

00:18:45,960 --> 00:18:48,780
anyone to include in their own stream

00:18:47,340 --> 00:18:52,980
fields you're going to be in for a hot

00:18:48,780 --> 00:18:54,390
time oh and don't go picks up changes to

00:18:52,980 --> 00:18:56,220
blocks inside a stream field for the

00:18:54,390 --> 00:18:57,390
purposes of migrations so if you've

00:18:56,220 --> 00:18:58,590
changed a stream block that you've

00:18:57,390 --> 00:19:00,210
reused in a bunch of different models

00:18:58,590 --> 00:19:04,320
all of those models will have any

00:19:00,210 --> 00:19:05,700
migrations to run the other advantage is

00:19:04,320 --> 00:19:08,040
that there's a total separation between

00:19:05,700 --> 00:19:10,140
plugins and pages sorry I can install a

00:19:08,040 --> 00:19:12,120
third-party app that provides say a blog

00:19:10,140 --> 00:19:14,429
and I can use custom plugins like the

00:19:12,120 --> 00:19:16,410
one we made here or third-party plugins

00:19:14,429 --> 00:19:18,419
from a totally unrelated app and the two

00:19:16,410 --> 00:19:20,040
of them will work together in wagtail at

00:19:18,419 --> 00:19:21,809
the end of the day you have to pass all

00:19:20,040 --> 00:19:24,210
the blocks you want into your stream

00:19:21,809 --> 00:19:25,350
field on your model that being said

00:19:24,210 --> 00:19:26,880
nearly every time I've used a

00:19:25,350 --> 00:19:28,290
third-party plug-in in Django CMS I've

00:19:26,880 --> 00:19:30,179
regretted it and I often end up writing

00:19:28,290 --> 00:19:31,380
her in and said anyway because didn't

00:19:30,179 --> 00:19:35,040
quite meet our needs and caused us

00:19:31,380 --> 00:19:36,480
problems down the track so the solution

00:19:35,040 --> 00:19:37,919
to this for wagtail is obvious when you

00:19:36,480 --> 00:19:39,660
think about it it comes back to Lego

00:19:37,919 --> 00:19:41,790
blocks if you want to revive a third

00:19:39,660 --> 00:19:43,770
party blog out for wagtail the most

00:19:41,790 --> 00:19:47,010
idiomatic way to do it wouldn't be to

00:19:43,770 --> 00:19:48,960
provide ready-made models instead you'd

00:19:47,010 --> 00:19:50,130
write something maybe some abstract base

00:19:48,960 --> 00:19:51,960
classes that provide all the

00:19:50,130 --> 00:19:55,679
functionality you need in the blog RSS

00:19:51,960 --> 00:19:57,299
archives category filters and so on that

00:19:55,679 --> 00:19:58,710
other developers can snap in through

00:19:57,299 --> 00:20:00,799
their own models with a few lines of

00:19:58,710 --> 00:20:00,799
code

00:20:03,070 --> 00:20:07,700
mezzanine unfortunately gets left out of

00:20:05,539 --> 00:20:08,779
this one because it doesn't have

00:20:07,700 --> 00:20:10,519
anything that lets you intersperse

00:20:08,779 --> 00:20:12,049
different kinds of content in the

00:20:10,519 --> 00:20:15,799
arbitrary order the way that stream

00:20:12,049 --> 00:20:17,779
field and Jenko CMS's plugins do of

00:20:15,799 --> 00:20:19,279
course while Django CMS is de the model

00:20:17,779 --> 00:20:21,350
is a radically different to mezzanines

00:20:19,279 --> 00:20:24,139
it would be entirely possible to build

00:20:21,350 --> 00:20:24,649
something like retail stream field for

00:20:24,139 --> 00:20:26,120
mezzanine

00:20:24,649 --> 00:20:27,889
in fact because mezzanine Zaid minutes

00:20:26,120 --> 00:20:29,149
just Jenga you could write a Django

00:20:27,889 --> 00:20:30,590
admin widget for something like strain

00:20:29,149 --> 00:20:32,559
field and then use it in mezzanine as

00:20:30,590 --> 00:20:34,639
well as any other django app you wanted

00:20:32,559 --> 00:20:37,879
nobody's done that yet as far as I know

00:20:34,639 --> 00:20:41,860
but it's an interesting thought now

00:20:37,879 --> 00:20:44,419
there's a bunch of baby pardon me

00:20:41,860 --> 00:20:45,769
there's a bunch of cases in CMS where

00:20:44,419 --> 00:20:47,090
you want to have one page object be

00:20:45,769 --> 00:20:50,240
responsible for a handful of different

00:20:47,090 --> 00:20:51,559
views for this one we'll keep using the

00:20:50,240 --> 00:20:53,480
blog example the way we've structured

00:20:51,559 --> 00:20:55,399
our blog is we have a blog entry page

00:20:53,480 --> 00:20:57,440
type which has the post content for your

00:20:55,399 --> 00:20:59,419
individual posts all our blog entry

00:20:57,440 --> 00:21:01,940
pages are child pages of our blog page

00:20:59,419 --> 00:21:03,950
time which is plays a list of them like

00:21:01,940 --> 00:21:06,649
I said before blogs need archive views

00:21:03,950 --> 00:21:08,000
category filters of RSS feed the RSS

00:21:06,649 --> 00:21:09,230
feed of what is what we'll focus on but

00:21:08,000 --> 00:21:12,470
the same principles will apply to all

00:21:09,230 --> 00:21:14,509
the others mezzanine has a feature

00:21:12,470 --> 00:21:16,070
called page processes they're a rather

00:21:14,509 --> 00:21:18,559
flexible way of hooking into the request

00:21:16,070 --> 00:21:20,120
response process for a particular page

00:21:18,559 --> 00:21:21,980
time they're called on every request to

00:21:20,120 --> 00:21:23,240
that time and you can either return a

00:21:21,980 --> 00:21:24,769
dictionary which gets added to the

00:21:23,240 --> 00:21:26,870
template context when the page is

00:21:24,769 --> 00:21:28,340
rendered or returned HTTP response

00:21:26,870 --> 00:21:30,950
object and short circuit mezzanine

00:21:28,340 --> 00:21:32,960
entirely what the documentation doesn't

00:21:30,950 --> 00:21:34,399
mention is that if you visit a URL for a

00:21:32,960 --> 00:21:36,049
page that doesn't exist before it

00:21:34,399 --> 00:21:37,730
returns for a four it'll check to see if

00:21:36,049 --> 00:21:39,799
there's a page it does exist above it in

00:21:37,730 --> 00:21:42,950
the URL hierarchy and call its page

00:21:39,799 --> 00:21:44,750
processor so all we have to do here is a

00:21:42,950 --> 00:21:46,340
little bit of poor man's URL routing and

00:21:44,750 --> 00:21:50,120
we can return that RSS feed from the

00:21:46,340 --> 00:21:51,500
right URL way tail saluting is a little

00:21:50,120 --> 00:21:53,960
more in-depth why I tell has its own

00:21:51,500 --> 00:21:55,190
router to resolve URLs to pages wagging

00:21:53,960 --> 00:21:56,870
salable call the route method on the

00:21:55,190 --> 00:21:58,909
route page which will play default

00:21:56,870 --> 00:22:00,980
consumer path component find a child

00:21:58,909 --> 00:22:02,389
that matches and recursively call its

00:22:00,980 --> 00:22:03,740
route method until we get to the pet

00:22:02,389 --> 00:22:05,299
method of the page to be actually want

00:22:03,740 --> 00:22:07,759
to render which will return her out

00:22:05,299 --> 00:22:09,980
result so all we have to do here then is

00:22:07,759 --> 00:22:11,210
override that route method check to see

00:22:09,980 --> 00:22:12,980
if the path is what we're looking for

00:22:11,210 --> 00:22:15,910
and if it is will tell wagtail to render

00:22:12,980 --> 00:22:17,660
our page with a special Quogue

00:22:15,910 --> 00:22:19,400
unfortunately because afferent where he

00:22:17,660 --> 00:22:21,920
tells you are alcohol we can't match our

00:22:19,400 --> 00:22:24,320
SS XML or anything that has a dozen it

00:22:21,920 --> 00:22:28,059
or doesn't end with a slash the code

00:22:24,320 --> 00:22:30,290
here will match / our SS / instead

00:22:28,059 --> 00:22:31,760
before we move on to Django CMS we'll

00:22:30,290 --> 00:22:34,460
just rewind a bit so where I said the

00:22:31,760 --> 00:22:37,100
Colts are out well calls to round walk

00:22:34,460 --> 00:22:38,480
recursively down the page tree that make

00:22:37,100 --> 00:22:40,040
makes it the only one of the three where

00:22:38,480 --> 00:22:42,050
we can control how child pages are

00:22:40,040 --> 00:22:44,030
routed here for example it's a simple

00:22:42,050 --> 00:22:46,610
implementation of that year-month-day

00:22:44,030 --> 00:22:51,200
slug URL pattern but a lot of like

00:22:46,610 --> 00:22:52,460
engines use now if wagtails approach to

00:22:51,200 --> 00:22:54,460
this sort of thing is in-depth for

00:22:52,460 --> 00:22:56,900
Django CMS will need a scuba license

00:22:54,460 --> 00:22:58,400
Django CMS has a books which are not

00:22:56,900 --> 00:23:00,620
only the most powerful solution of the

00:22:58,400 --> 00:23:02,090
three but also the most happy as the

00:23:00,620 --> 00:23:03,920
name suggests app books allow you to

00:23:02,090 --> 00:23:06,290
hook an entire reusable django app onto

00:23:03,920 --> 00:23:07,790
a page unfortunately there's no way to

00:23:06,290 --> 00:23:09,470
automatically attach an app book to a

00:23:07,790 --> 00:23:11,410
particular page type to set up an apple

00:23:09,470 --> 00:23:14,120
you have to manually create one pages

00:23:11,410 --> 00:23:15,610
sorry manually create one app book again

00:23:14,120 --> 00:23:17,990
it's a particular page in the web UI

00:23:15,610 --> 00:23:19,940
once you do that the URL module you

00:23:17,990 --> 00:23:21,470
return from get URLs is mounted in the

00:23:19,940 --> 00:23:23,750
URL hierarchy you just like any other

00:23:21,470 --> 00:23:26,120
django app but dynamically which is the

00:23:23,750 --> 00:23:27,559
hacky bit so long as we use your own

00:23:26,120 --> 00:23:30,309
namespaces properly we can have it

00:23:27,559 --> 00:23:33,020
mounted multiple times on multiple pages

00:23:30,309 --> 00:23:35,270
so our URLs dot pi and I've used up I

00:23:33,020 --> 00:23:36,710
look exactly like any other django app

00:23:35,270 --> 00:23:38,270
which is of course the powerful bit if

00:23:36,710 --> 00:23:39,440
you're a kind of classmates views you'll

00:23:38,270 --> 00:23:41,690
be pleased to know they work exactly as

00:23:39,440 --> 00:23:43,010
you expect here the only thing that's a

00:23:41,690 --> 00:23:45,380
tiny bit tricky here is figuring out

00:23:43,010 --> 00:23:47,120
which page object were attached to since

00:23:45,380 --> 00:23:48,740
Django CMS doesn't automatically passes

00:23:47,120 --> 00:23:52,580
to it pass it to us by default we have

00:23:48,740 --> 00:23:54,920
to go looking for it now we move on to

00:23:52,580 --> 00:23:56,929
the deployment of course sites built in

00:23:54,920 --> 00:23:58,700
all three of these CMS's are just django

00:23:56,929 --> 00:24:00,860
apps so you can deploy them the same way

00:23:58,700 --> 00:24:02,300
you'd deploy any other Django map but

00:24:00,860 --> 00:24:03,650
each of the three CMS's has its own

00:24:02,300 --> 00:24:04,580
unique deployment approach and while we

00:24:03,650 --> 00:24:06,770
don't have time to go into them in

00:24:04,580 --> 00:24:09,559
detail I will tell you about them a

00:24:06,770 --> 00:24:11,720
little bit the development in project

00:24:09,559 --> 00:24:14,210
template provides a surprisingly

00:24:11,720 --> 00:24:16,160
in-depth 600 maybe 5 line fab file for

00:24:14,210 --> 00:24:18,440
deploying the site fabric by the way is

00:24:16,160 --> 00:24:21,710
a tool for doing deployment of ssh sort

00:24:18,440 --> 00:24:23,150
of the lovechild of ssh should make to

00:24:21,710 --> 00:24:24,470
get you may the mezzanine site up and

00:24:23,150 --> 00:24:26,360
running on the public internet all you

00:24:24,470 --> 00:24:28,550
need to do is set up a vm you can SSH

00:24:26,360 --> 00:24:29,570
into run these commands and your sign is

00:24:28,550 --> 00:24:31,700
ready to go

00:24:29,570 --> 00:24:35,720
running on top of nginx G unicorn and

00:24:31,700 --> 00:24:37,610
Postgres wireless deployment option is

00:24:35,720 --> 00:24:39,260
the most unique of the three whitetail

00:24:37,610 --> 00:24:41,270
has built-in support for jr. Medusa

00:24:39,260 --> 00:24:43,460
which is a package that generates static

00:24:41,270 --> 00:24:45,260
sites from Genco projects in theory this

00:24:43,460 --> 00:24:47,240
means you can have a blazing fast always

00:24:45,260 --> 00:24:48,650
up pre-generated site serve to your

00:24:47,240 --> 00:24:50,690
visitors by something like cloud front

00:24:48,650 --> 00:24:53,150
well when it sells edited editing

00:24:50,690 --> 00:24:55,010
interface is safe and sound inside your

00:24:53,150 --> 00:24:57,200
firewall corporate network or running on

00:24:55,010 --> 00:24:58,670
your laptop unfortunately the most

00:24:57,200 --> 00:25:01,190
unique option is also the most

00:24:58,670 --> 00:25:03,740
disappointing Django Medusa is

00:25:01,190 --> 00:25:06,890
unmaintained deprecated and doesn't work

00:25:03,740 --> 00:25:08,480
at all hunting at 1.9 there is

00:25:06,890 --> 00:25:10,310
third-party support for a similar

00:25:08,480 --> 00:25:12,410
package called Django bakery but the

00:25:10,310 --> 00:25:14,840
integration package describes itself in

00:25:12,410 --> 00:25:17,300
all caps as a sample

00:25:14,840 --> 00:25:19,340
so hopefully Django bakery support will

00:25:17,300 --> 00:25:20,390
be part of whitetail eventually because

00:25:19,340 --> 00:25:23,990
I think this is a really cool way to

00:25:20,390 --> 00:25:26,300
deploy science now if mag tails the

00:25:23,990 --> 00:25:28,820
point option is the most unique Django

00:25:26,300 --> 00:25:30,530
CMS's is the most in-depth video of the

00:25:28,820 --> 00:25:31,820
company behind Django CMS have just

00:25:30,530 --> 00:25:34,340
recently saddled up a surface called

00:25:31,820 --> 00:25:36,670
Aldrin cloud Aldrin cloud is a platform

00:25:34,340 --> 00:25:39,290
server as a service for Django apps

00:25:36,670 --> 00:25:41,000
oriented towards Django CMS it also

00:25:39,290 --> 00:25:42,590
picks up wagging tails slack by having a

00:25:41,000 --> 00:25:44,450
community-supported wags home option and

00:25:42,590 --> 00:25:45,530
you can install any other django app on

00:25:44,450 --> 00:25:48,950
it so you can probably get mezzanine

00:25:45,530 --> 00:25:50,810
running on it as well so quickly before

00:25:48,950 --> 00:25:53,780
we go to questions if we even have time

00:25:50,810 --> 00:25:55,280
for them let's recap of the three CMS's

00:25:53,780 --> 00:25:56,720
we have looked at mezzanine is

00:25:55,280 --> 00:25:58,610
deliberately simple and focused with a

00:25:56,720 --> 00:26:00,790
straightforward data model and it's the

00:25:58,610 --> 00:26:03,140
one that's most recognizably just django

00:26:00,790 --> 00:26:05,150
its batteries included but built-in page

00:26:03,140 --> 00:26:07,670
types and templates but those batteries

00:26:05,150 --> 00:26:08,930
are simple - it has a simple inline

00:26:07,670 --> 00:26:10,460
editing interface that is a huge

00:26:08,930 --> 00:26:12,530
usability win for your content editors

00:26:10,460 --> 00:26:15,400
but it lacks the flexibility of my tail

00:26:12,530 --> 00:26:17,660
stream fields and Django CMS plugins

00:26:15,400 --> 00:26:18,260
wagtail is very much not batteries

00:26:17,660 --> 00:26:20,180
included

00:26:18,260 --> 00:26:21,950
instead it has what I've called today a

00:26:20,180 --> 00:26:23,150
Lego block philosophy where it provides

00:26:21,950 --> 00:26:24,560
you with components you can snap

00:26:23,150 --> 00:26:25,940
together with a few lines of glue code

00:26:24,560 --> 00:26:28,340
do you need something that more closely

00:26:25,940 --> 00:26:29,540
suits your needs with only a little more

00:26:28,340 --> 00:26:31,580
effort then something built in would

00:26:29,540 --> 00:26:32,900
involve it does leave you on your own

00:26:31,580 --> 00:26:34,190
with templates thorough showing it's

00:26:32,900 --> 00:26:35,480
very much oriented to what's building

00:26:34,190 --> 00:26:37,070
something proper with the custom design

00:26:35,480 --> 00:26:39,260
in it wagtails not too bothered about

00:26:37,070 --> 00:26:42,500
the just throw it up on the web quickly

00:26:39,260 --> 00:26:43,340
use case it's a to model and really a

00:26:42,500 --> 00:26:44,780
lot of the develop

00:26:43,340 --> 00:26:46,970
experience feels a lot like mezzanine

00:26:44,780 --> 00:26:48,830
extended the headline editions of course

00:26:46,970 --> 00:26:50,660
stream field powerful tools talks a lot

00:26:48,830 --> 00:26:52,130
about today which lets you have some of

00:26:50,660 --> 00:26:54,080
Django CMS flexibility

00:26:52,130 --> 00:26:55,610
unlike mezzanine though it's not afraid

00:26:54,080 --> 00:26:56,870
to replace bits of no go with something

00:26:55,610 --> 00:26:59,350
built from scratch the bit as soon as

00:26:56,870 --> 00:27:01,640
specific needs in particularly admin

00:26:59,350 --> 00:27:03,890
finally all the action happens in

00:27:01,640 --> 00:27:05,360
attributes and methods on your page

00:27:03,890 --> 00:27:07,030
models when you're working on something

00:27:05,360 --> 00:27:09,020
simple this is a breath of fresh air

00:27:07,030 --> 00:27:10,010
compared to Django CMS where you're

00:27:09,020 --> 00:27:12,230
constantly flipping back and forth

00:27:10,010 --> 00:27:13,640
between the files but when things get a

00:27:12,230 --> 00:27:15,050
bit more complex it's on you as the

00:27:13,640 --> 00:27:16,550
developer to make sure you split

00:27:15,050 --> 00:27:19,610
everything up logically so you don't end

00:27:16,550 --> 00:27:20,930
up with a 10,000 line model stop I it

00:27:19,610 --> 00:27:22,780
doesn't however have an inline editor

00:27:20,930 --> 00:27:25,520
and it plans to keep it that way

00:27:22,780 --> 00:27:26,900
don't go CMS as Madonna model it's

00:27:25,520 --> 00:27:28,340
radically different to the other two

00:27:26,900 --> 00:27:30,380
being centered around plugins rather

00:27:28,340 --> 00:27:32,390
than pages plugins mean your data

00:27:30,380 --> 00:27:33,830
structures can that they destructor the

00:27:32,390 --> 00:27:35,150
hold your content are far more loosely

00:27:33,830 --> 00:27:36,950
coupled from the page and the other two

00:27:35,150 --> 00:27:38,900
which makes them more flexible it also

00:27:36,950 --> 00:27:40,400
goes all around an inline editing it's

00:27:38,900 --> 00:27:41,510
the primary way to edit the site and

00:27:40,400 --> 00:27:43,610
there's nothing you can't do through it

00:27:41,510 --> 00:27:44,810
it has templates and set of page types

00:27:43,610 --> 00:27:46,640
which means you can create them without

00:27:44,810 --> 00:27:47,510
knowing Python but it also makes it

00:27:46,640 --> 00:27:51,020
harder to put things right

00:27:47,510 --> 00:27:52,160
apples in that's all there is

00:27:51,020 --> 00:27:53,450
thank you to my wonderful partner

00:27:52,160 --> 00:27:54,710
Michelle who put together this title

00:27:53,450 --> 00:27:56,990
card and the wagging tail Lego block

00:27:54,710 --> 00:27:58,040
illustration thanks also to ducky who

00:27:56,990 --> 00:27:59,330
helped me come up with the concept of

00:27:58,040 --> 00:28:00,770
the talk Tennessee whose proposal

00:27:59,330 --> 00:28:03,410
feedback was so in depth it was longer

00:28:00,770 --> 00:28:05,030
than the proposal was and mattnic and

00:28:03,410 --> 00:28:08,620
ducky again for their feedback on the

00:28:05,030 --> 00:28:08,620
core content itself thank you

00:28:12,780 --> 00:28:16,860
thank you very much and if anyone has

00:28:14,800 --> 00:28:18,910
any questions come up and join the queue

00:28:16,860 --> 00:28:21,490
just to sort of get things start at the

00:28:18,910 --> 00:28:23,080
end you did you did say like this is a

00:28:21,490 --> 00:28:25,390
bullet point this is the strengths and

00:28:23,080 --> 00:28:30,460
weaknesses of each one would you care to

00:28:25,390 --> 00:28:32,530
give a brief summary a brief summary of

00:28:30,460 --> 00:28:38,110
the sorts of sites that each one would

00:28:32,530 --> 00:28:40,690
be well suited towards oh I think both

00:28:38,110 --> 00:28:44,890
wagtail and Django CMS because they have

00:28:40,690 --> 00:28:47,170
that the plugins or the stream field

00:28:44,890 --> 00:28:50,400
it's difficult to imagine a site that

00:28:47,170 --> 00:28:53,320
either of those two couldn't do

00:28:50,400 --> 00:28:55,420
mezzanine I think is a little bit

00:28:53,320 --> 00:28:57,250
simpler and it's it's very much

00:28:55,420 --> 00:28:59,290
deliberately so it sort of always seemed

00:28:57,250 --> 00:29:02,770
to be focused on being the sort of 80%

00:28:59,290 --> 00:29:03,880
use case other than that it's yeah

00:29:02,770 --> 00:29:07,870
difficult to imagine that anything you

00:29:03,880 --> 00:29:10,390
opportunity thanks for their talking for

00:29:07,870 --> 00:29:13,870
the comparison when I come to you today

00:29:10,390 --> 00:29:16,030
and say an ASCII which of these CMS

00:29:13,870 --> 00:29:19,990
should I choose for a block which would

00:29:16,030 --> 00:29:23,400
be your pick or why would you not pick

00:29:19,990 --> 00:29:25,480
one for a blog

00:29:23,400 --> 00:29:26,710
partly because of my experience with all

00:29:25,480 --> 00:29:30,670
the news blog which is sort of the

00:29:26,710 --> 00:29:34,270
de-facto blog app for Django CMS I'd

00:29:30,670 --> 00:29:40,630
probably not choose that one especially

00:29:34,270 --> 00:29:41,800
if you want Python 3 cuz it yeah so

00:29:40,630 --> 00:29:47,170
that's had some difficulty to the Python

00:29:41,800 --> 00:29:48,490
3 wagtail if you have the the time to

00:29:47,170 --> 00:29:51,430
deal with the Lego blocks and put them

00:29:48,490 --> 00:29:53,470
together way tail has stream field

00:29:51,430 --> 00:29:55,450
witches which is great to use especially

00:29:53,470 --> 00:29:57,700
people on Viking add me example code

00:29:55,450 --> 00:30:00,550
blocks but mezzanine is the quickest

00:29:57,700 --> 00:30:01,900
option so it really depends on what

00:30:00,550 --> 00:30:05,740
you're trying to make you really would

00:30:01,900 --> 00:30:08,290
you belong all right that was an epic

00:30:05,740 --> 00:30:12,370
talk thank you thanks I just want to

00:30:08,290 --> 00:30:14,950
clarify you were saying that they Django

00:30:12,370 --> 00:30:17,950
CMS and mezzanine were both okay to

00:30:14,950 --> 00:30:20,200
integrate into an existing Django

00:30:17,950 --> 00:30:22,270
so so yeah all three you can integrate

00:30:20,200 --> 00:30:23,380
into existing Django apps it's just a

00:30:22,270 --> 00:30:25,130
matter of adding some stuff to your

00:30:23,380 --> 00:30:26,720
installed apps and if you

00:30:25,130 --> 00:30:29,090
template context processes and stuff

00:30:26,720 --> 00:30:30,590
like that as all three of them weigh

00:30:29,090 --> 00:30:32,300
tale as well

00:30:30,590 --> 00:30:36,460
wagging tail you do have the separate

00:30:32,300 --> 00:30:39,290
admin the new wagtail admin does support

00:30:36,460 --> 00:30:42,730
editing django models now it didn't used

00:30:39,290 --> 00:30:45,500
to but that's been added in I think 1.5

00:30:42,730 --> 00:30:48,230
but other than that the other two will

00:30:45,500 --> 00:30:53,600
work just fine with an existing during

00:30:48,230 --> 00:30:55,929
your project as well okay thank you very

00:30:53,600 --> 00:30:55,929

YouTube URL: https://www.youtube.com/watch?v=3UC1MNFOjEI


