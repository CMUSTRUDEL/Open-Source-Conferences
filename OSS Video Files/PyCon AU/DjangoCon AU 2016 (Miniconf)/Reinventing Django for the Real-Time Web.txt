Title: Reinventing Django for the Real-Time Web
Publication date: 2016-08-16
Playlist: DjangoCon AU 2016 (Miniconf)
Description: 
	Andrew Godwin
https://2016.pycon-au.org/schedule/28/view_talk
Django's new Channels feature takes Django beyond the world of HTTP's request-response protocol and into the modern Web protocol world of WebSockets and real-time communication - but it also does a lot more. Learn how Django can now respond to WebSockets, emails or instant messages as easily as HTTP, and we re-architected Django to support all these changes while keeping a clean API and backwards compatibility, and the implications it has for the wider Python ecosystem.
Captions: 
	00:00:04,850 --> 00:00:10,200
okay our next speaker almost requires no

00:00:07,799 --> 00:00:11,460
introduction whatsoever no I know is

00:00:10,200 --> 00:00:14,309
that guy whatever so just this guy you

00:00:11,460 --> 00:00:16,619
know Andrew Godwin is a longtime member

00:00:14,309 --> 00:00:18,210
of the core team and purveyor of many

00:00:16,619 --> 00:00:20,520
fine products which we now use on a

00:00:18,210 --> 00:00:21,750
daily basis in the Django core so I'd

00:00:20,520 --> 00:00:29,250
like to welcome to the stage Andrew

00:00:21,750 --> 00:00:33,059
Goodman thank you hello everyone good

00:00:29,250 --> 00:00:34,290
afternoon this this slide show deck is a

00:00:33,059 --> 00:00:36,480
little bit different how it's going to

00:00:34,290 --> 00:00:38,460
be because my laptop is dead so I have

00:00:36,480 --> 00:00:40,110
pulled this one from the internet from a

00:00:38,460 --> 00:00:41,670
previous talk and I'm gonna adjust it a

00:00:40,110 --> 00:00:45,510
little bit but bear with me as we go so

00:00:41,670 --> 00:00:47,670
I am as mentioned Andrew Cohen I am as

00:00:45,510 --> 00:00:49,500
well most well known for doing South and

00:00:47,670 --> 00:00:51,420
Django migrations which was my

00:00:49,500 --> 00:00:53,430
introduction into Django about a decade

00:00:51,420 --> 00:00:55,649
ago now and was about eight years of my

00:00:53,430 --> 00:01:00,300
time in Django and before Marcus rescued

00:00:55,649 --> 00:01:02,100
it from me in my in my real job I am a

00:01:00,300 --> 00:01:04,409
software engineer at Eventbrite over in

00:01:02,100 --> 00:01:06,450
San Francisco and I have a long history

00:01:04,409 --> 00:01:08,250
of doing sort of weird things and

00:01:06,450 --> 00:01:10,700
networking in Python one of my first

00:01:08,250 --> 00:01:12,900
entries into serious Python programming

00:01:10,700 --> 00:01:14,549
on the networking side was writing

00:01:12,900 --> 00:01:17,369
minecraft servers back when minecraft

00:01:14,549 --> 00:01:19,020
was but a small young thing that people

00:01:17,369 --> 00:01:21,840
didn't really know about and like this

00:01:19,020 --> 00:01:23,430
was a weird job application that is a

00:01:21,840 --> 00:01:24,750
tough thing to do when it gets popular

00:01:23,430 --> 00:01:27,780
in the space of a year and suddenly your

00:01:24,750 --> 00:01:29,850
code is being used you know but this

00:01:27,780 --> 00:01:31,409
talk is about not two migrations it's

00:01:29,850 --> 00:01:34,140
not about any of that stuff I used to do

00:01:31,409 --> 00:01:36,659
it's about Django HTTP and whiskey and

00:01:34,140 --> 00:01:38,880
the changing face of the web I'm sure

00:01:36,659 --> 00:01:40,290
you're all aware that Django is very

00:01:38,880 --> 00:01:41,970
good at doing HTTP that's why it was

00:01:40,290 --> 00:01:44,549
designed for decade ago it continued to

00:01:41,970 --> 00:01:46,530
do it very well and it's designed around

00:01:44,549 --> 00:01:48,420
this core concept of taking a request

00:01:46,530 --> 00:01:50,220
and returning your response everything

00:01:48,420 --> 00:01:52,049
in Django the middleware the views the

00:01:50,220 --> 00:01:54,180
URL routing is built around this

00:01:52,049 --> 00:01:55,470
abstraction right like when you run a

00:01:54,180 --> 00:01:56,969
middleware there's a there's a request

00:01:55,470 --> 00:01:59,399
and response handler where you do a view

00:01:56,969 --> 00:02:03,390
it is it's called by the request and it

00:01:59,399 --> 00:02:04,770
returns a response and this is great it

00:02:03,390 --> 00:02:07,020
necessary well you have this wonderful

00:02:04,770 --> 00:02:09,060
diagram here of like well we have the

00:02:07,020 --> 00:02:12,090
browser and it calls web server which

00:02:09,060 --> 00:02:13,650
say to unicorn or mod whiskey which then

00:02:12,090 --> 00:02:15,480
calls Django which then calls the view

00:02:13,650 --> 00:02:17,909
you and it's a lovely night Nestor

00:02:15,480 --> 00:02:20,340
diagram brilliant it's Turtles all the

00:02:17,909 --> 00:02:22,379
way down we love it and this works

00:02:20,340 --> 00:02:24,030
pretty well like HTTP matches this

00:02:22,379 --> 00:02:26,189
diagram right actually you didn't know

00:02:24,030 --> 00:02:27,840
on an open socket you can send a request

00:02:26,189 --> 00:02:30,060
then you have to just wait there the

00:02:27,840 --> 00:02:31,260
browser and get a response and you you

00:02:30,060 --> 00:02:33,180
do this forever

00:02:31,260 --> 00:02:34,590
if you pipeline a clue one socket but

00:02:33,180 --> 00:02:36,780
otherwise you're up in Maine sockets and

00:02:34,590 --> 00:02:40,620
it just sort of sits there by itself if

00:02:36,780 --> 00:02:42,359
you are HTTP to the abstraction still

00:02:40,620 --> 00:02:44,519
holds pretty true now there are other

00:02:42,359 --> 00:02:46,290
features but the core feature of h2

00:02:44,519 --> 00:02:48,900
which is the ability to have multiple

00:02:46,290 --> 00:02:50,159
requests in flight you can still service

00:02:48,900 --> 00:02:52,230
this kind of thing with the same

00:02:50,159 --> 00:02:54,060
abstraction you can just run two

00:02:52,230 --> 00:02:56,940
different functions in in parallel these

00:02:54,060 --> 00:02:59,250
two different requests way it breaks

00:02:56,940 --> 00:03:01,859
down is WebSockets now if you're not

00:02:59,250 --> 00:03:05,129
familiar WebSockets are a relatively new

00:03:01,859 --> 00:03:06,720
spec in the web space they are a way of

00:03:05,129 --> 00:03:10,019
having a bi-directional channel between

00:03:06,720 --> 00:03:11,489
a client a browser and a server and what

00:03:10,019 --> 00:03:13,650
you can do is you can send things either

00:03:11,489 --> 00:03:15,599
direction over them at any time in any

00:03:13,650 --> 00:03:17,250
order without waiting something else

00:03:15,599 --> 00:03:19,079
like you can open you can send when it

00:03:17,250 --> 00:03:20,790
opens straight away and they're good for

00:03:19,079 --> 00:03:22,230
things like chat applications and gaming

00:03:20,790 --> 00:03:24,419
and anything it's like a very chatty

00:03:22,230 --> 00:03:26,220
protocol previously people use things

00:03:24,419 --> 00:03:28,290
like Ajax and long polling to get the

00:03:26,220 --> 00:03:30,629
same kind of effect but WebSockets is

00:03:28,290 --> 00:03:33,269
much much more efficient because each

00:03:30,629 --> 00:03:34,590
frame each send or receive has a very

00:03:33,269 --> 00:03:36,510
small header and that's it and it's

00:03:34,590 --> 00:03:39,209
designed to persist very well and work

00:03:36,510 --> 00:03:41,190
with all the way bowa's work but problem

00:03:39,209 --> 00:03:43,979
is as you can see from this one

00:03:41,190 --> 00:03:45,810
three-card diagram here there is no send

00:03:43,979 --> 00:03:48,180
and receive pattern we can't wrap it in

00:03:45,810 --> 00:03:49,829
the same way and this is kind of

00:03:48,180 --> 00:03:52,019
difficult because whiskey as an

00:03:49,829 --> 00:03:54,840
abstraction is built on that COBOL

00:03:52,019 --> 00:03:57,030
pattern whiskey is defined as there is a

00:03:54,840 --> 00:03:59,099
callable that you call with the request

00:03:57,030 --> 00:04:00,569
and it returns the response it's a bit

00:03:59,099 --> 00:04:02,729
of extra stuff around it but that's the

00:04:00,569 --> 00:04:05,099
core concept of what's going on here so

00:04:02,729 --> 00:04:07,049
how do we tackle that problem with

00:04:05,099 --> 00:04:09,269
django right we can't do WebSockets

00:04:07,049 --> 00:04:10,739
inside whiskey it's it's not a possible

00:04:09,269 --> 00:04:12,419
thing they just don't match this

00:04:10,739 --> 00:04:14,400
callable pattern even if you thought

00:04:12,419 --> 00:04:16,019
well we could have like generators to

00:04:14,400 --> 00:04:17,459
return things as the sends well how do

00:04:16,019 --> 00:04:20,010
you pass in multiple things as the

00:04:17,459 --> 00:04:21,900
inputs when you receive them and so when

00:04:20,010 --> 00:04:23,639
I was looking this problem about I think

00:04:21,900 --> 00:04:25,680
four years ago I started to think about

00:04:23,639 --> 00:04:27,020
this problem a way back when when we

00:04:25,680 --> 00:04:29,449
talk it's were being spat out

00:04:27,020 --> 00:04:30,560
there are some things that I was

00:04:29,449 --> 00:04:31,910
thinking of like what Django should

00:04:30,560 --> 00:04:34,099
probably support these like this is the

00:04:31,910 --> 00:04:37,430
future of a lot of like the interactive

00:04:34,099 --> 00:04:39,680
web and the rich rich app web but how do

00:04:37,430 --> 00:04:41,810
we do this in a Django way and these are

00:04:39,680 --> 00:04:43,340
some of my sort of five main guiding

00:04:41,810 --> 00:04:45,680
lights for what it means to be a big

00:04:43,340 --> 00:04:48,319
feature in Django at least right now so

00:04:45,680 --> 00:04:49,669
first of all easy to use it shouldn't be

00:04:48,319 --> 00:04:51,710
a thing that says oh no this is a

00:04:49,669 --> 00:04:53,060
straight thing in here is a 25 page long

00:04:51,710 --> 00:04:55,099
manual describing how to use it like

00:04:53,060 --> 00:04:57,379
Django is a you loaded up your on a

00:04:55,099 --> 00:04:59,000
short tutorial con can't be super

00:04:57,379 --> 00:05:01,370
amazing start with and then it should be

00:04:59,000 --> 00:05:03,590
relatively obvious and part of that is

00:05:01,370 --> 00:05:04,039
being secured by default Django does its

00:05:03,590 --> 00:05:05,240
best

00:05:04,039 --> 00:05:07,729
 you shooting yourself in the foot

00:05:05,240 --> 00:05:09,470
it's possible but you have to sort of

00:05:07,729 --> 00:05:12,080
unpick certain different bits of Django

00:05:09,470 --> 00:05:13,880
very carefully to do that and so it's

00:05:12,080 --> 00:05:15,409
important to have this thing where you

00:05:13,880 --> 00:05:16,550
can use it and you can intuitive play

00:05:15,409 --> 00:05:18,319
around with it and it's very hard to

00:05:16,550 --> 00:05:20,630
deploy something that will blow up will

00:05:18,319 --> 00:05:23,449
be easy to ddos and so on and part of

00:05:20,630 --> 00:05:25,969
that too when we coming to network

00:05:23,449 --> 00:05:27,949
programming is the extra problems of

00:05:25,969 --> 00:05:29,620
deadlocking if you've ever written a

00:05:27,949 --> 00:05:32,419
synchronous Python code or even

00:05:29,620 --> 00:05:34,280
distributed systems code deadlocking is

00:05:32,419 --> 00:05:35,389
a thing that happens as is live locking

00:05:34,280 --> 00:05:38,000
there's a lots of different wonderful

00:05:35,389 --> 00:05:40,909
breakages that can happen and making a

00:05:38,000 --> 00:05:42,469
system where it's very hard for a novice

00:05:40,909 --> 00:05:45,080
program or even a senior developer

00:05:42,469 --> 00:05:46,430
because we're all terrible to break

00:05:45,080 --> 00:05:49,009
things it's really important like I

00:05:46,430 --> 00:05:50,830
don't want to have a system where I can

00:05:49,009 --> 00:05:52,729
sleep early right code and break it

00:05:50,830 --> 00:05:54,620
deadlocks especially a very hard to

00:05:52,729 --> 00:05:56,110
debug so try and have a system where

00:05:54,620 --> 00:05:59,000
those are discouraged is very important

00:05:56,110 --> 00:06:01,759
Python tunes we compatible of course we

00:05:59,000 --> 00:06:04,250
live is 2016 we can't quite do just

00:06:01,759 --> 00:06:04,819
three yet that's Django two but you know

00:06:04,250 --> 00:06:07,009
getting there

00:06:04,819 --> 00:06:08,659
and finally optional this is one those

00:06:07,009 --> 00:06:10,969
important parts of Django for me is that

00:06:08,659 --> 00:06:13,400
a feature in Django and it arrives is

00:06:10,969 --> 00:06:15,080
optional you're not forced to use it you

00:06:13,400 --> 00:06:17,180
can replace it if you like and it's

00:06:15,080 --> 00:06:18,409
usually clearly defined things like if

00:06:17,180 --> 00:06:20,750
you want change the templating you can

00:06:18,409 --> 00:06:22,130
or you can all these kind of things in

00:06:20,750 --> 00:06:25,580
Django optional and I don't want to have

00:06:22,130 --> 00:06:27,770
a system where I force everyone to use

00:06:25,580 --> 00:06:30,139
this crazy new thing because WebSockets

00:06:27,770 --> 00:06:31,789
cause like let's see Frank a lot of

00:06:30,139 --> 00:06:33,770
people don't need them just yet maybe in

00:06:31,789 --> 00:06:37,639
the future right now we don't there's a

00:06:33,770 --> 00:06:39,889
balance to be had there and so my main

00:06:37,639 --> 00:06:43,039
conclusion from this was well

00:06:39,889 --> 00:06:45,979
- and it's concurrency model is not the

00:06:43,039 --> 00:06:47,240
best we have async IO in Python 3 and

00:06:45,979 --> 00:06:50,000
async and await and all the nice

00:06:47,240 --> 00:06:51,259
function key words but Django itself is

00:06:50,000 --> 00:06:53,689
not designed as an asynchronous

00:06:51,259 --> 00:06:55,159
framework Django is fully synchronous to

00:06:53,689 --> 00:06:57,169
rewrite into the asynchronous would be

00:06:55,159 --> 00:06:58,659
to rewrite every single function we

00:06:57,169 --> 00:07:00,620
publicly expose which would be

00:06:58,659 --> 00:07:03,379
moderately difficult to say the least

00:07:00,620 --> 00:07:06,289
and so looking at this and looking back

00:07:03,379 --> 00:07:07,879
at the history of languages like C SPU

00:07:06,289 --> 00:07:09,979
is one of the very first proof languages

00:07:07,879 --> 00:07:11,659
for systems and things elements and that

00:07:09,979 --> 00:07:13,610
things like Erlang and go

00:07:11,659 --> 00:07:16,069
the idea of message passing the idea of

00:07:13,610 --> 00:07:17,960
different separate synchronous or

00:07:16,069 --> 00:07:19,819
asynchronous actor threads that swap

00:07:17,960 --> 00:07:22,370
messages with each other to achieve this

00:07:19,819 --> 00:07:24,259
sort of distributed system and this is

00:07:22,370 --> 00:07:26,569
kind of what I was going for so this is

00:07:24,259 --> 00:07:28,969
what we think out we have a WSGI with

00:07:26,569 --> 00:07:31,610
the server and app you have some servers

00:07:28,969 --> 00:07:34,009
or some processes they run perfectly by

00:07:31,610 --> 00:07:35,569
themselves standalone HTTP is

00:07:34,009 --> 00:07:37,189
shared-nothing which is one of the I

00:07:35,569 --> 00:07:39,139
think personally the most amazing things

00:07:37,189 --> 00:07:40,879
about it as a part of the web technology

00:07:39,139 --> 00:07:41,900
that you can just launch as many as

00:07:40,879 --> 00:07:44,449
you'd like and they will just work

00:07:41,900 --> 00:07:46,180
independently it's great it's fantastic

00:07:44,449 --> 00:07:49,430
no problem with that

00:07:46,180 --> 00:07:50,990
now I'm talk it's a bit harder so if we

00:07:49,430 --> 00:07:52,099
naively approach the problem and go well

00:07:50,990 --> 00:07:55,039
we'll use the same model

00:07:52,099 --> 00:07:57,830
WebSockets will have a piece of code

00:07:55,039 --> 00:08:00,020
that just sits there and like WSGI does

00:07:57,830 --> 00:08:02,210
or jewnicorn or mob whiskey handles

00:08:00,020 --> 00:08:04,039
talking WebSocket to the browser and

00:08:02,210 --> 00:08:07,069
decodes it into something inside Python

00:08:04,039 --> 00:08:09,919
and then we'll have things talking to

00:08:07,069 --> 00:08:11,689
that that handle the various bits of

00:08:09,919 --> 00:08:13,639
interacting with it and so you know

00:08:11,689 --> 00:08:15,229
because we have the decoding part we

00:08:13,639 --> 00:08:16,550
have some threads with workers in them

00:08:15,229 --> 00:08:18,770
this all looks like a reasonable

00:08:16,550 --> 00:08:20,979
solution there are two issues with this

00:08:18,770 --> 00:08:24,199
however the first is of course threads

00:08:20,979 --> 00:08:26,240
if you use threads in Pais then they are

00:08:24,199 --> 00:08:28,430
not the best you can get both three or

00:08:26,240 --> 00:08:31,189
four before they start getting too bad

00:08:28,430 --> 00:08:33,199
but you don't want to run say a thousand

00:08:31,189 --> 00:08:34,370
of them because if someone opens a

00:08:33,199 --> 00:08:36,050
thousand what type of connections they

00:08:34,370 --> 00:08:38,300
can also sit idle for hours at a time

00:08:36,050 --> 00:08:39,169
that's part of the protocol and so you

00:08:38,300 --> 00:08:40,519
need to build you to be able to

00:08:39,169 --> 00:08:41,959
terminate thousands of things in a

00:08:40,519 --> 00:08:43,940
single process without hang panels of

00:08:41,959 --> 00:08:44,990
threads so green threads could be a

00:08:43,940 --> 00:08:47,600
thing here but it's a different approach

00:08:44,990 --> 00:08:49,910
we take but the other thing here is what

00:08:47,600 --> 00:08:51,260
I call the real hard problem so when

00:08:49,910 --> 00:08:53,780
people think about web sockets like well

00:08:51,260 --> 00:08:55,550
you know we can take a synchronous frame

00:08:53,780 --> 00:08:57,350
we can take libraries like Autobahn we

00:08:55,550 --> 00:08:59,120
can join them together we can get a

00:08:57,350 --> 00:09:01,430
pretty and honestly you can get a pretty

00:08:59,120 --> 00:09:03,080
good solution with the current libraries

00:09:01,430 --> 00:09:05,000
pretty quickly it's actually not very

00:09:03,080 --> 00:09:06,530
difficult at all but when you start

00:09:05,000 --> 00:09:08,570
looking at building a system building a

00:09:06,530 --> 00:09:11,150
site out of these you count the real

00:09:08,570 --> 00:09:12,770
hard problem which is that WebSockets by

00:09:11,150 --> 00:09:15,110
their very nature in system design are

00:09:12,770 --> 00:09:17,660
not shared nothing you want to do things

00:09:15,110 --> 00:09:20,450
like this you want to do well this is a

00:09:17,660 --> 00:09:23,540
chat application and I have six browsers

00:09:20,450 --> 00:09:25,670
connected I want to have one browser

00:09:23,540 --> 00:09:27,620
send a message and have all six of them

00:09:25,670 --> 00:09:30,080
receive it and suddenly you have to be

00:09:27,620 --> 00:09:32,360
able to pass this message from this

00:09:30,080 --> 00:09:33,800
entire server at the top here to the one

00:09:32,360 --> 00:09:35,120
on the bottom and that is the problem

00:09:33,800 --> 00:09:36,650
that it's really difficult to do and

00:09:35,120 --> 00:09:38,690
that is kind of the problem that

00:09:36,650 --> 00:09:40,790
channels aims to solve like it sure it

00:09:38,690 --> 00:09:43,850
has WebSockets in there too but it's in

00:09:40,790 --> 00:09:46,820
its totality is a system for designing

00:09:43,850 --> 00:09:47,990
Jango to run more broadly distributed to

00:09:46,820 --> 00:09:49,220
have this idea of passing messages

00:09:47,990 --> 00:09:51,470
between different things have

00:09:49,220 --> 00:09:53,210
broadcasting groups and let's see a bit

00:09:51,470 --> 00:09:57,020
more of that in it more concrete fashion

00:09:53,210 --> 00:09:59,030
isn't quite as hand wavy so before I do

00:09:57,020 --> 00:10:01,910
that though because if what service

00:09:59,030 --> 00:10:03,080
works how this works in practice so I

00:10:01,910 --> 00:10:05,720
mentioned before threads and green

00:10:03,080 --> 00:10:07,520
threads channels issues both of those

00:10:05,720 --> 00:10:09,800
for running things in separate processes

00:10:07,520 --> 00:10:11,780
so like multiprocessing does but rather

00:10:09,800 --> 00:10:13,280
than having a sort of in memory queue

00:10:11,780 --> 00:10:14,870
like multiprocessing does between its

00:10:13,280 --> 00:10:17,930
different parent and child processes

00:10:14,870 --> 00:10:20,089
what we do here is there is a formalized

00:10:17,930 --> 00:10:22,250
thing called a channel layer and all the

00:10:20,089 --> 00:10:24,110
processes that Jango comprises of so

00:10:22,250 --> 00:10:26,330
like the terminating web server which we

00:10:24,110 --> 00:10:28,820
call Daphne the worker servers that run

00:10:26,330 --> 00:10:30,200
Jango these all just connect into the

00:10:28,820 --> 00:10:32,360
channel layer which can be read as it

00:10:30,200 --> 00:10:33,920
can be IPC calls it could be something

00:10:32,360 --> 00:10:36,620
that it's a pluggable back-end system

00:10:33,920 --> 00:10:38,000
and the idea is that you run these

00:10:36,620 --> 00:10:40,780
different processes in different modes

00:10:38,000 --> 00:10:43,160
so the terminating thing that handles

00:10:40,780 --> 00:10:45,050
like turmeric and WebSockets and doing

00:10:43,160 --> 00:10:47,690
the prep negotiation is asynchronous

00:10:45,050 --> 00:10:48,830
twisted code it can handle thousands of

00:10:47,690 --> 00:10:50,990
thousands collections at once on a

00:10:48,830 --> 00:10:52,460
single core because it hasn't you know

00:10:50,990 --> 00:10:54,620
it has a reactive base pattern it works

00:10:52,460 --> 00:10:56,420
perfectly fine the Jango side of this

00:10:54,620 --> 00:10:58,730
stuff runs in a different process in a

00:10:56,420 --> 00:11:00,890
synchronous loop it basically looked it

00:10:58,730 --> 00:11:02,450
gets a message processes it returns the

00:11:00,890 --> 00:11:03,950
result and then loops and runs it again

00:11:02,450 --> 00:11:05,750
but because they have them in different

00:11:03,950 --> 00:11:07,160
processes we can happily have these two

00:11:05,750 --> 00:11:09,079
different systems you

00:11:07,160 --> 00:11:10,759
sitting side-by-side and watch how's

00:11:09,079 --> 00:11:12,529
that you do is have this kind of pattern

00:11:10,759 --> 00:11:14,600
in general of you can write a

00:11:12,529 --> 00:11:16,069
synchronous code and tie it into your

00:11:14,600 --> 00:11:17,600
synchronous project without too much

00:11:16,069 --> 00:11:19,220
hassle and without giving up what

00:11:17,600 --> 00:11:23,389
synchronicity gives you from safety and

00:11:19,220 --> 00:11:25,040
ease of easiness debugging this can be

00:11:23,389 --> 00:11:27,560
send a little bit this is the more

00:11:25,040 --> 00:11:28,879
advanced version of this where if you

00:11:27,560 --> 00:11:32,899
want to be better about performance you

00:11:28,879 --> 00:11:34,220
go well Andrew in this one it's not hard

00:11:32,899 --> 00:11:35,569
to point out all the traffic goes

00:11:34,220 --> 00:11:36,740
through the big the big purple box in

00:11:35,569 --> 00:11:38,990
the middle this is obviously bad for

00:11:36,740 --> 00:11:40,670
performance but the design is such that

00:11:38,990 --> 00:11:42,199
we can actually have smaller purple

00:11:40,670 --> 00:11:43,970
boxes in the middle of the processes

00:11:42,199 --> 00:11:45,790
that you sort of they know if they need

00:11:43,970 --> 00:11:48,319
to route outside so it's kind of this

00:11:45,790 --> 00:11:49,850
encapsulation but the point is all of

00:11:48,319 --> 00:11:51,500
this is handled for you this is the hard

00:11:49,850 --> 00:11:53,870
problem the idea is you can just talk to

00:11:51,500 --> 00:11:55,759
the channel layer from either side of

00:11:53,870 --> 00:11:57,589
what you're doing and it will work out

00:11:55,759 --> 00:11:59,060
whether it can cache it locally run it

00:11:57,589 --> 00:12:02,540
in process send it across the network

00:11:59,060 --> 00:12:03,889
and all this kind of stuff so what are

00:12:02,540 --> 00:12:05,600
the concepts in channel like that that's

00:12:03,889 --> 00:12:07,430
the theory what does it come down to

00:12:05,600 --> 00:12:10,459
where's two key things and channels

00:12:07,430 --> 00:12:13,459
there are the you know titular channels

00:12:10,459 --> 00:12:16,459
which are named first-in-first-out cues

00:12:13,459 --> 00:12:17,810
so you know it's it's a name thing they

00:12:16,459 --> 00:12:20,540
will have string names like you know

00:12:17,810 --> 00:12:22,279
this is my requests and then you put

00:12:20,540 --> 00:12:24,170
things into them and then they come out

00:12:22,279 --> 00:12:27,410
the other end in a particular they are

00:12:24,170 --> 00:12:29,600
kind of cue where when multiple people

00:12:27,410 --> 00:12:31,279
request an item only one of them gets it

00:12:29,600 --> 00:12:33,589
atomically so the idea is you have like

00:12:31,279 --> 00:12:36,589
seven eight worker processes listening

00:12:33,589 --> 00:12:38,509
when a piece of work comes through one

00:12:36,589 --> 00:12:38,990
of them gets it and then the rest keep

00:12:38,509 --> 00:12:41,149
listening

00:12:38,990 --> 00:12:42,920
this is kind of a bit like how celery

00:12:41,149 --> 00:12:45,079
works in its in its basic structure but

00:12:42,920 --> 00:12:47,630
there's differences there in speed and

00:12:45,079 --> 00:12:49,339
guarantees and the second one is groups

00:12:47,630 --> 00:12:50,870
and groups is this sort of the part of

00:12:49,339 --> 00:12:53,540
here that's a hard problem groups are

00:12:50,870 --> 00:12:55,639
sets of channels of the thing at the top

00:12:53,540 --> 00:12:57,680
here that you can send to as a whole and

00:12:55,639 --> 00:12:59,990
the particular so say I had a chat room

00:12:57,680 --> 00:13:02,389
whenever somebody can next to Django

00:12:59,990 --> 00:13:03,680
with WebSocket support now you get a

00:13:02,389 --> 00:13:05,870
channel for them and the channel is how

00:13:03,680 --> 00:13:07,370
you talk back to their browser all I can

00:13:05,870 --> 00:13:09,649
do is I can take all these reply

00:13:07,370 --> 00:13:11,269
channels and put them all into one group

00:13:09,649 --> 00:13:14,569
that is like my chatroom and I think oh

00:13:11,269 --> 00:13:16,550
okay a message came in send to group the

00:13:14,569 --> 00:13:18,860
response and every single person in that

00:13:16,550 --> 00:13:20,400
group gets distributed message and does

00:13:18,860 --> 00:13:22,710
it you know efficiently

00:13:20,400 --> 00:13:24,720
in the Redis back-end it runs Lua inside

00:13:22,710 --> 00:13:28,290
riders to actually farm out rather than

00:13:24,720 --> 00:13:30,030
sending it to multiple lists and what

00:13:28,290 --> 00:13:33,000
this comes down to after that is a

00:13:30,030 --> 00:13:34,410
pretty simple API now as a Chandler

00:13:33,000 --> 00:13:36,420
developer you'll probably never see this

00:13:34,410 --> 00:13:38,160
but this talk is informative and

00:13:36,420 --> 00:13:40,380
enlightening so here you go

00:13:38,160 --> 00:13:44,160
and so this is the the what we call the

00:13:40,380 --> 00:13:46,260
a SGI bad acronym I know interface this

00:13:44,160 --> 00:13:48,510
is how channels that central channel

00:13:46,260 --> 00:13:50,730
layer works it provides these five

00:13:48,510 --> 00:13:52,680
primitives you can send you can receive

00:13:50,730 --> 00:13:55,320
these are four channels you can receive

00:13:52,680 --> 00:13:56,580
off many channels at once so you've put

00:13:55,320 --> 00:13:57,870
a big list in and the first one that

00:13:56,580 --> 00:14:01,170
gets a response you get that one back

00:13:57,870 --> 00:14:02,940
and then you can add remove and send to

00:14:01,170 --> 00:14:04,530
groups so you get it's a very simple

00:14:02,940 --> 00:14:07,050
primitive list it's very easy to program

00:14:04,530 --> 00:14:08,430
against you can use even any Python code

00:14:07,050 --> 00:14:10,680
not just Jango so you're gonna write

00:14:08,430 --> 00:14:13,800
your own custom stuff you can then

00:14:10,680 --> 00:14:15,960
Django wrap this up into more of a nice

00:14:13,800 --> 00:14:19,050
pretty picture what it does is it takes

00:14:15,960 --> 00:14:21,390
this guarantee where you take a request

00:14:19,050 --> 00:14:23,370
and return a response and it turns it

00:14:21,390 --> 00:14:26,010
into a slightly different guarantee

00:14:23,370 --> 00:14:27,990
where rather than a view that does what

00:14:26,010 --> 00:14:30,150
I just said everything would consumer

00:14:27,990 --> 00:14:32,520
which takes a message on a channel and

00:14:30,150 --> 00:14:35,400
then sends a zero or more messages and

00:14:32,520 --> 00:14:38,550
the nice thing about this firstly is

00:14:35,400 --> 00:14:41,160
that this is clearly a superset of what

00:14:38,550 --> 00:14:43,110
views do a few of you is a consumer and

00:14:41,160 --> 00:14:45,810
in fact what channels can do if you want

00:14:43,110 --> 00:14:47,790
it to is it can map requests to a

00:14:45,810 --> 00:14:51,000
channel you can map responses to another

00:14:47,790 --> 00:14:52,530
channel and you can just do HTTP using

00:14:51,000 --> 00:14:54,120
the same system the WebSockets does and

00:14:52,530 --> 00:14:56,760
in fact internally it actually is doing

00:14:54,120 --> 00:14:59,400
this when you install it but crucially

00:14:56,760 --> 00:15:02,010
also when you do WebSockets you can have

00:14:59,400 --> 00:15:03,450
things tied to events now the way

00:15:02,010 --> 00:15:05,730
channels handles protocols like

00:15:03,450 --> 00:15:07,920
WebSockets is it does eventing so when

00:15:05,730 --> 00:15:09,810
someone connects a message goes into a

00:15:07,920 --> 00:15:11,340
socket onto a channel and so on to send

00:15:09,810 --> 00:15:12,780
you a message a message goes onto a

00:15:11,340 --> 00:15:15,270
channel with someone disconnects it goes

00:15:12,780 --> 00:15:16,920
into Channel and as a Django programmer

00:15:15,270 --> 00:15:18,900
what you do is you write things that

00:15:16,920 --> 00:15:21,360
consume these channels that when these

00:15:18,900 --> 00:15:23,160
events happen you do something so as I

00:15:21,360 --> 00:15:25,380
mentioned before say you were doing a

00:15:23,160 --> 00:15:27,360
chatroom when someone connects your

00:15:25,380 --> 00:15:29,400
consumer you just write it in you route

00:15:27,360 --> 00:15:31,380
it you tie it in like a bit of a URLs

00:15:29,400 --> 00:15:33,570
thing and say put this person in this

00:15:31,380 --> 00:15:34,080
group when you have a receive message

00:15:33,570 --> 00:15:35,820
you say

00:15:34,080 --> 00:15:37,530
okay take this message and send it to

00:15:35,820 --> 00:15:39,960
another WebSocket and you can write this

00:15:37,530 --> 00:15:41,490
code much like you write views with the

00:15:39,960 --> 00:15:43,560
same kind of guarantees and the same

00:15:41,490 --> 00:15:45,210
sort of atomicity and transaction

00:15:43,560 --> 00:15:47,520
closing and all the stuff the requests

00:15:45,210 --> 00:15:51,380
come with and views but for WebSockets

00:15:47,520 --> 00:15:53,340
as well let's get outside so important

00:15:51,380 --> 00:15:55,830
there we go

00:15:53,340 --> 00:15:57,210
so difference here as well like this

00:15:55,830 --> 00:15:59,790
it's this two different kind of channel

00:15:57,210 --> 00:16:01,890
which is important to know incoming

00:15:59,790 --> 00:16:04,590
channels like WebSocket don't receive

00:16:01,890 --> 00:16:06,000
they are global so every single person

00:16:04,590 --> 00:16:07,500
on your site who connects

00:16:06,000 --> 00:16:08,760
when they send you a message comes

00:16:07,500 --> 00:16:12,240
through the one channel called dot

00:16:08,760 --> 00:16:13,410
receive and your worker pool all listen

00:16:12,240 --> 00:16:15,120
on that channel or when they get one

00:16:13,410 --> 00:16:18,030
they take it off and run that Handler

00:16:15,120 --> 00:16:20,370
and so your consumer just handles any

00:16:18,030 --> 00:16:21,750
message from any connected person you

00:16:20,370 --> 00:16:23,820
can add and remove servers as you like

00:16:21,750 --> 00:16:26,250
it's very flexible but then when you

00:16:23,820 --> 00:16:27,990
send something back to a socket you

00:16:26,250 --> 00:16:29,700
can't have any server handling because

00:16:27,990 --> 00:16:32,430
WebSocket is terminated at a particular

00:16:29,700 --> 00:16:33,780
Pro set on particular box when you send

00:16:32,430 --> 00:16:35,880
back to it you has to route to that

00:16:33,780 --> 00:16:37,740
exact box and so we have a bit of diff

00:16:35,880 --> 00:16:39,660
there's a naming convention there that

00:16:37,740 --> 00:16:41,490
channels knows that it's as an

00:16:39,660 --> 00:16:42,870
exclamation mark in the name okay this

00:16:41,490 --> 00:16:45,570
has to go to a particular box and it has

00:16:42,870 --> 00:16:49,980
different sharding algorithms to dish

00:16:45,570 --> 00:16:52,110
with these differently so briefly we

00:16:49,980 --> 00:16:54,950
restate we see events and channels and

00:16:52,110 --> 00:16:58,560
we send the vents to them in groups and

00:16:54,950 --> 00:17:01,890
when you have a connection be WebSocket

00:16:58,560 --> 00:17:03,420
HTTP it comes to you into django with a

00:17:01,890 --> 00:17:06,360
reply channel like that that's how you

00:17:03,420 --> 00:17:08,089
apply to the person HTTP when you write

00:17:06,360 --> 00:17:09,959
the reply channel it writes a response

00:17:08,089 --> 00:17:13,740
WebSocket when you watch the channel it

00:17:09,959 --> 00:17:15,150
sends them WebSocket frames so let's see

00:17:13,740 --> 00:17:17,699
some actual practical examples because

00:17:15,150 --> 00:17:19,890
that's a lot easier to understand first

00:17:17,699 --> 00:17:22,850
of all channels is very easy to use it

00:17:19,890 --> 00:17:26,580
is not in Django yet but you do this

00:17:22,850 --> 00:17:28,110
then it just works which is quite nice

00:17:26,580 --> 00:17:29,880
well you wanna see what it does the

00:17:28,110 --> 00:17:32,330
Django of the hood just be just trust me

00:17:29,880 --> 00:17:35,340
that it's fine

00:17:32,330 --> 00:17:38,510
it's it is it is doing less worse things

00:17:35,340 --> 00:17:40,860
in the South that I can guarantee you

00:17:38,510 --> 00:17:43,260
but doing that doing this will will

00:17:40,860 --> 00:17:45,450
override your run server a few other

00:17:43,260 --> 00:17:47,580
things so that you can just do managed

00:17:45,450 --> 00:17:49,020
by run server and runs ever will come

00:17:47,580 --> 00:17:50,400
with WebSocket support and all the

00:17:49,020 --> 00:17:53,730
things I showed you will I show you here

00:17:50,400 --> 00:17:55,680
will just work so first of all let's do

00:17:53,730 --> 00:17:57,690
a live block it's a very easy classic

00:17:55,680 --> 00:17:58,680
first example of what goes on we want a

00:17:57,690 --> 00:18:02,190
live blog which if you're not familiar

00:17:58,680 --> 00:18:04,890
it's a blog with things dated by date

00:18:02,190 --> 00:18:06,960
and then usually add a live event like

00:18:04,890 --> 00:18:08,490
an apple release some journalist is on

00:18:06,960 --> 00:18:10,200
like it's have a thing going typing the

00:18:08,490 --> 00:18:12,090
way around hitting enter whenever a new

00:18:10,200 --> 00:18:15,090
thing comes to R it goes and appears top

00:18:12,090 --> 00:18:17,430
of the page the truth of the the easy

00:18:15,090 --> 00:18:19,260
way to do this the old way it's just as

00:18:17,430 --> 00:18:21,210
pole for change it's that they're going

00:18:19,260 --> 00:18:23,760
is there anyone is there anyone is that

00:18:21,210 --> 00:18:25,830
yes okay load it but that really hammers

00:18:23,760 --> 00:18:27,510
your server with requests or it makes it

00:18:25,830 --> 00:18:29,850
very slow to shitload the new messages

00:18:27,510 --> 00:18:31,440
in you have a trade off there so what we

00:18:29,850 --> 00:18:32,970
want to do is want to open a socket when

00:18:31,440 --> 00:18:35,310
someone loads the page and go okay

00:18:32,970 --> 00:18:37,680
they've they've open the live blog let's

00:18:35,310 --> 00:18:39,240
open a socket and just say hey tell me

00:18:37,680 --> 00:18:41,040
where new blog post comes through and

00:18:39,240 --> 00:18:42,270
the socket will just have things sent

00:18:41,040 --> 00:18:44,700
down and everyone comes through and

00:18:42,270 --> 00:18:46,230
channels can do this very easily so

00:18:44,700 --> 00:18:48,570
let's decompose a problem into it means

00:18:46,230 --> 00:18:50,220
inside channels so I said in channels

00:18:48,570 --> 00:18:51,840
its event based so what does it mean to

00:18:50,220 --> 00:18:55,170
do these things as part of the WebSocket

00:18:51,840 --> 00:18:57,120
event lifecycle so when someone opens

00:18:55,170 --> 00:18:59,610
the page they open web socket we've got

00:18:57,120 --> 00:19:01,860
on that and so when they connect when we

00:18:59,610 --> 00:19:03,720
connect on to add that socket to a group

00:19:01,860 --> 00:19:06,000
called live blog when they can act and

00:19:03,720 --> 00:19:07,830
then when somebody saves a new model

00:19:06,000 --> 00:19:10,770
instance of blog post we want to find

00:19:07,830 --> 00:19:12,210
the group and send a message to the

00:19:10,770 --> 00:19:14,220
group but then goes to all the

00:19:12,210 --> 00:19:17,490
connective sockets saying there is a new

00:19:14,220 --> 00:19:20,070
blog post so this is this is the

00:19:17,490 --> 00:19:22,380
entirety of the code you define a

00:19:20,070 --> 00:19:24,600
connect Handler like this so this is

00:19:22,380 --> 00:19:26,610
what a handle looks like in channels it

00:19:24,600 --> 00:19:27,930
looks like a view obviously it doesn't

00:19:26,610 --> 00:19:31,020
take a request as a message but it's

00:19:27,930 --> 00:19:32,990
very similar and so I'll connect we have

00:19:31,020 --> 00:19:35,070
a group we add the reply channel to it

00:19:32,990 --> 00:19:41,700
when someone saves

00:19:35,070 --> 00:19:43,530
we just send that group and here oh no

00:19:41,700 --> 00:19:45,060
then the one last thing here is you

00:19:43,530 --> 00:19:45,830
write a routing file which called

00:19:45,060 --> 00:19:47,450
routing dot pi

00:19:45,830 --> 00:19:49,940
well you look like you are ELLs apply

00:19:47,450 --> 00:19:52,129
you go web sake door connect is ws

00:19:49,940 --> 00:19:54,049
connect and it's done and then you

00:19:52,129 --> 00:19:56,989
launch that up and it will just work

00:19:54,049 --> 00:19:59,570
which is super nice and it's it's five

00:19:56,989 --> 00:20:00,679
extra lines of code the chat one I

00:19:59,570 --> 00:20:03,799
mentioned earlier let's get to that a

00:20:00,679 --> 00:20:05,330
little bit quickly as well so again

00:20:03,799 --> 00:20:07,519
let's look at the problem statement

00:20:05,330 --> 00:20:09,259
people can send messages and they get

00:20:07,519 --> 00:20:10,580
sent like it's a chat people send

00:20:09,259 --> 00:20:13,509
messages everyone sees them we all know

00:20:10,580 --> 00:20:16,070
how chats work let's take that as

00:20:13,509 --> 00:20:18,049
decompose events so on some connects

00:20:16,070 --> 00:20:19,820
they join a chat group the group

00:20:18,049 --> 00:20:22,070
representing the room they're in and

00:20:19,820 --> 00:20:23,419
when someone sends a message we take the

00:20:22,070 --> 00:20:25,489
message and relay it back into the group

00:20:23,419 --> 00:20:28,309
again so everyone is connected to seize

00:20:25,489 --> 00:20:30,200
it and receives it and you can already

00:20:28,309 --> 00:20:31,879
imagine how this goes we write to

00:20:30,200 --> 00:20:33,889
consumers one the connect that adds in

00:20:31,879 --> 00:20:35,899
for the group and one for receive that

00:20:33,889 --> 00:20:37,450
takes the message and just puts it and

00:20:35,899 --> 00:20:41,090
sends it back into the group again and

00:20:37,450 --> 00:20:43,190
this is the very simple chat example

00:20:41,090 --> 00:20:44,539
this will again will juice to a chatroom

00:20:43,190 --> 00:20:46,909
that's all you need at the code wide

00:20:44,539 --> 00:20:47,960
pass the routing well here's the routing

00:20:46,909 --> 00:20:49,999
example there we go and you have on

00:20:47,960 --> 00:20:51,919
somewhere so this is you know routing

00:20:49,999 --> 00:20:54,859
looks like URLs you say well the channel

00:20:51,919 --> 00:20:59,600
name is you just put the function in it

00:20:54,859 --> 00:21:00,710
happens it's pretty easy it's important

00:20:59,600 --> 00:21:02,659
notes these are old but I'll go through

00:21:00,710 --> 00:21:04,669
some hard stuff so run server has

00:21:02,659 --> 00:21:07,039
mentioned just works with WebSockets

00:21:04,669 --> 00:21:09,139
like you can do this code and just do

00:21:07,039 --> 00:21:11,450
managed by run server it'll just run

00:21:09,139 --> 00:21:12,799
properly it does a lot of difference

00:21:11,450 --> 00:21:14,570
under the hood but you don't worry about

00:21:12,799 --> 00:21:17,210
that it's not too bad

00:21:14,570 --> 00:21:17,720
Django sessions and off work with

00:21:17,210 --> 00:21:19,940
WebSockets

00:21:17,720 --> 00:21:22,070
there is coding channels that can take

00:21:19,940 --> 00:21:24,230
the cookie you have on your site and

00:21:22,070 --> 00:21:26,269
load it out of the connection header

00:21:24,230 --> 00:21:28,249
WebSockets and have the authentication

00:21:26,269 --> 00:21:30,259
on the socket permanently so you can

00:21:28,249 --> 00:21:31,820
actually do assertions and you peel use

00:21:30,259 --> 00:21:33,799
people's user names and values and

00:21:31,820 --> 00:21:35,809
commissions inside what socket handlers

00:21:33,799 --> 00:21:37,879
for free natively well it's brick works

00:21:35,809 --> 00:21:39,830
pretty well and there are class-based

00:21:37,879 --> 00:21:42,169
consumers so you know these are function

00:21:39,830 --> 00:21:44,419
based consumers there is like four views

00:21:42,169 --> 00:21:46,609
a class based version two and that has

00:21:44,419 --> 00:21:47,929
things like group management come for

00:21:46,609 --> 00:21:50,450
free and that one you can say Oh

00:21:47,929 --> 00:21:51,679
connection groups equals chat or handle

00:21:50,450 --> 00:21:55,519
the connect to disconnect stuff for you

00:21:51,679 --> 00:21:57,649
but most importantly these two things I

00:21:55,519 --> 00:21:59,090
rushed through kind of quickly there are

00:21:57,649 --> 00:21:59,750
fully worked versions of these with lots

00:21:59,090 --> 00:22:02,270
of comments

00:21:59,750 --> 00:22:04,700
lots of more features and fun tasks to

00:22:02,270 --> 00:22:06,770
do and this github repository and your

00:22:04,700 --> 00:22:08,510
Goulburn / channels examples

00:22:06,770 --> 00:22:10,100
there's also another example peg for

00:22:08,510 --> 00:22:13,760
dated binding which I introduced at

00:22:10,100 --> 00:22:16,970
django con us a few weeks ago but that I

00:22:13,760 --> 00:22:18,470
believe in proof by both talks and their

00:22:16,970 --> 00:22:19,669
documentation and examples would

00:22:18,470 --> 00:22:21,309
everyone do you want you can pick the

00:22:19,669 --> 00:22:23,780
right one but you can download these

00:22:21,309 --> 00:22:25,400
just install channels and then just run

00:22:23,780 --> 00:22:27,289
server and you'll have there's a

00:22:25,400 --> 00:22:28,700
multiple there's a multi room chat app

00:22:27,289 --> 00:22:30,590
with authentication in it just to prove

00:22:28,700 --> 00:22:32,120
how that stuff works and there's a live

00:22:30,590 --> 00:22:34,190
blog has a multiple live blogs it's like

00:22:32,120 --> 00:22:35,900
slug based differential I can you have

00:22:34,190 --> 00:22:37,100
oh here's our Apple live vlog is our

00:22:35,900 --> 00:22:39,440
Google ID but we can run at the same

00:22:37,100 --> 00:22:40,610
time so some sort of more in-depth

00:22:39,440 --> 00:22:43,630
versions of those the comments thing

00:22:40,610 --> 00:22:45,530
what I'm doing going on there and so

00:22:43,630 --> 00:22:47,360
hopefully I'll give you a bit of an idea

00:22:45,530 --> 00:22:49,789
of the flavor of what's going on here we

00:22:47,360 --> 00:22:51,380
have channels we have groups and we have

00:22:49,789 --> 00:22:55,220
these messages and the messages are kind

00:22:51,380 --> 00:22:59,299
of part of the magic WSGI defines how

00:22:55,220 --> 00:23:01,549
you map HTTP into in this case in okay

00:22:59,299 --> 00:23:04,070
so sorry a dictionary good Enver on and

00:23:01,549 --> 00:23:05,890
a way to send headers back what SGI does

00:23:04,070 --> 00:23:08,690
it just finds the same thing for

00:23:05,890 --> 00:23:11,600
WebSockets and also HTTP of like here's

00:23:08,690 --> 00:23:13,280
how we encode HTTP and sockets into

00:23:11,600 --> 00:23:15,770
messages which are just dictionaries

00:23:13,280 --> 00:23:16,940
basically and how we can have those

00:23:15,770 --> 00:23:20,240
formats for sending or receiving

00:23:16,940 --> 00:23:22,700
messages over the wire and crucially all

00:23:20,240 --> 00:23:24,620
of this is cross process and cross

00:23:22,700 --> 00:23:26,690
network you can take all of this stuff

00:23:24,620 --> 00:23:28,039
and just go well i'll have this on this

00:23:26,690 --> 00:23:30,860
machine is in this machine instead of

00:23:28,039 --> 00:23:32,900
here and it will just work you can scale

00:23:30,860 --> 00:23:34,100
out the front end separate from the

00:23:32,900 --> 00:23:36,020
workers based on your kind of workload

00:23:34,100 --> 00:23:38,929
and the whole idea is this is designed

00:23:36,020 --> 00:23:40,850
to overcome pythons limitation of being

00:23:38,929 --> 00:23:41,809
a single threaded like it's a very good

00:23:40,850 --> 00:23:42,110
a single threading not really anything

00:23:41,809 --> 00:23:43,880
else

00:23:42,110 --> 00:23:45,200
so take one okay we can work with that

00:23:43,880 --> 00:23:46,669
we can just have single threads and

00:23:45,200 --> 00:23:48,039
there's join them across the network

00:23:46,669 --> 00:23:50,450
because even if you're doing multiple

00:23:48,039 --> 00:23:51,919
multi-threading you have to do a cross

00:23:50,450 --> 00:23:53,530
machine at some point so why not just do

00:23:51,919 --> 00:23:56,870
it from the get-go

00:23:53,530 --> 00:23:58,970
and so as I said there spec that

00:23:56,870 --> 00:24:01,789
underlies all channels is called a SGI

00:23:58,970 --> 00:24:04,610
in a fit of what may be poor naming of

00:24:01,789 --> 00:24:06,320
my part but it's too late now and so

00:24:04,610 --> 00:24:07,790
what this comprises of is that

00:24:06,320 --> 00:24:09,320
specification for how you send and

00:24:07,790 --> 00:24:12,020
receive groups those five functions from

00:24:09,320 --> 00:24:13,520
earlier and these formats for HTTP and

00:24:12,020 --> 00:24:16,220
the idea is given this

00:24:13,520 --> 00:24:17,990
vacation like WS gr you can write any

00:24:16,220 --> 00:24:20,540
you can write a server that just

00:24:17,990 --> 00:24:21,920
publishers WebSocket into the spec like

00:24:20,540 --> 00:24:23,120
as long as you send messages according

00:24:21,920 --> 00:24:24,920
to the spec and receive them in decode

00:24:23,120 --> 00:24:26,900
them properly it will just do the right

00:24:24,920 --> 00:24:28,250
thing and similarly as an application

00:24:26,900 --> 00:24:30,140
you can write them in against the end it

00:24:28,250 --> 00:24:32,150
so django obviously is written against

00:24:30,140 --> 00:24:33,440
this but one could have say flask of

00:24:32,150 --> 00:24:37,580
written against this - if you wanted to

00:24:33,440 --> 00:24:39,380
to do the same kind of consuming and as

00:24:37,580 --> 00:24:41,210
for what that transport is there are

00:24:39,380 --> 00:24:42,620
currently three of them there is the

00:24:41,210 --> 00:24:45,260
reference network layer which is read

00:24:42,620 --> 00:24:46,790
it's based there are many reasons from

00:24:45,260 --> 00:24:48,950
Redis I can go into them at length you

00:24:46,790 --> 00:24:54,860
come and ask me we are looking at trying

00:24:48,950 --> 00:24:56,210
to get a rabbitmq /mq p1 but it is mq p

00:24:54,860 --> 00:24:57,800
is not designed for low latency let's

00:24:56,210 --> 00:25:01,190
say it's not time for high throughput

00:24:57,800 --> 00:25:02,960
either there is a POSIX Phi P c1 which

00:25:01,190 --> 00:25:04,370
is not cross network but works on one

00:25:02,960 --> 00:25:06,620
machine has no extra dependencies it

00:25:04,370 --> 00:25:08,360
like read it's good to run a server IPC

00:25:06,620 --> 00:25:09,980
you just run them on the same machine

00:25:08,360 --> 00:25:11,390
and they just talk they just make a

00:25:09,980 --> 00:25:14,480
shared memory segment and talk to each

00:25:11,390 --> 00:25:16,430
other using dark-dark UNIX magic and

00:25:14,480 --> 00:25:19,910
then in memory system under testing it

00:25:16,430 --> 00:25:21,530
just exists in memory and then what this

00:25:19,910 --> 00:25:24,440
all means is that all of these things

00:25:21,530 --> 00:25:26,750
work together to form a Django project

00:25:24,440 --> 00:25:28,250
like no longer is Django running a

00:25:26,750 --> 00:25:30,590
separate thing you now have these

00:25:28,250 --> 00:25:33,140
separate servers that do decoding of

00:25:30,590 --> 00:25:37,340
HTTP web sockets and separate servers

00:25:33,140 --> 00:25:38,870
that run the actual application code and

00:25:37,340 --> 00:25:40,970
this is kind of broken down into what it

00:25:38,870 --> 00:25:43,490
looks like in terms of packages so

00:25:40,970 --> 00:25:45,680
channels has a few packages there's

00:25:43,490 --> 00:25:48,260
quite a few of them but on the interface

00:25:45,680 --> 00:25:50,840
side Daphne is our reference server that

00:25:48,260 --> 00:25:53,450
does both HTTP and WebSockets it's based

00:25:50,840 --> 00:25:55,160
on twisted and Autobahn but as I said

00:25:53,450 --> 00:25:57,800
before other stuff plug into there and

00:25:55,160 --> 00:26:00,980
there's also an in-progress wci adapter

00:25:57,800 --> 00:26:03,080
that just is a WSGI app that then itself

00:26:00,980 --> 00:26:05,570
makes things into a SGI so it's kind of

00:26:03,080 --> 00:26:07,490
a translation part of that end of the

00:26:05,570 --> 00:26:09,200
spectrum so you just actually run this

00:26:07,490 --> 00:26:12,020
behind unicorn and mod whiskey if you

00:26:09,200 --> 00:26:13,220
want to in the middle you have different

00:26:12,020 --> 00:26:15,860
channel layers you could to choose from

00:26:13,220 --> 00:26:17,510
the ideas will have more than two based

00:26:15,860 --> 00:26:18,950
on people's different sears or less

00:26:17,510 --> 00:26:21,650
requirements or their kind of runtime

00:26:18,950 --> 00:26:23,600
environment and on the work aside again

00:26:21,650 --> 00:26:25,310
django is one consumer there's also

00:26:23,600 --> 00:26:27,290
potential here to write a wi that for

00:26:25,310 --> 00:26:29,900
the other way where something

00:26:27,290 --> 00:26:31,970
Eve's a SGI stuff and then actually runs

00:26:29,900 --> 00:26:34,370
a whiskey application underneath and so

00:26:31,970 --> 00:26:38,390
like it's meant to be incompatible with

00:26:34,370 --> 00:26:40,670
this court of existing apps as well and

00:26:38,390 --> 00:26:43,370
also like as I said optionality is very

00:26:40,670 --> 00:26:44,750
important to me so you can run

00:26:43,370 --> 00:26:46,190
everything through this system or you

00:26:44,750 --> 00:26:48,560
can just do absorb WebSockets to the

00:26:46,190 --> 00:26:49,190
system and use the old stuff HTTP it's

00:26:48,560 --> 00:26:51,650
your choice

00:26:49,190 --> 00:26:54,590
and most people just run let's talk it

00:26:51,650 --> 00:26:56,300
through for now just like you can do

00:26:54,590 --> 00:26:57,950
like long polling stuff really well in

00:26:56,300 --> 00:26:59,720
channels with the new server but it

00:26:57,950 --> 00:27:02,470
doesn't give you much else over WSGI

00:26:59,720 --> 00:27:04,220
right now if you're doing just HTTP

00:27:02,470 --> 00:27:08,450
let's skip that one

00:27:04,220 --> 00:27:10,520
so yes scaling because of this network

00:27:08,450 --> 00:27:11,960
layer you can actually scale the things

00:27:10,520 --> 00:27:14,090
the terminal connections separately from

00:27:11,960 --> 00:27:15,710
the things that run code so if you have

00:27:14,090 --> 00:27:16,970
a very dormant set of people whooping

00:27:15,710 --> 00:27:18,380
lots of connections you can scale that

00:27:16,970 --> 00:27:19,550
very differently if there's very few

00:27:18,380 --> 00:27:20,900
people but they run lots of right

00:27:19,550 --> 00:27:23,900
amounts of stuff you can scale workers

00:27:20,900 --> 00:27:26,600
out and the channel layer itself the

00:27:23,900 --> 00:27:27,890
Redis one has shard bait like because

00:27:26,600 --> 00:27:29,240
this in hash-based sharding if you want

00:27:27,890 --> 00:27:31,340
that kind of stuff in the middle so it's

00:27:29,240 --> 00:27:34,130
it works pretty well there we go

00:27:31,340 --> 00:27:37,610
it's looking ahead channels missed

00:27:34,130 --> 00:27:40,190
Django 1.10 it may you're in 1.11 but I

00:27:37,610 --> 00:27:41,660
did an LTS release so I am not entirely

00:27:40,190 --> 00:27:43,880
sure about that cuz won't have a nice

00:27:41,660 --> 00:27:44,840
stable platform for the future so

00:27:43,880 --> 00:27:46,670
there's there's a good chance it may be

00:27:44,840 --> 00:27:48,350
until a naught or maybe else takes on

00:27:46,670 --> 00:27:50,750
forever like one of the questions now is

00:27:48,350 --> 00:27:52,550
do we take Django and make it more

00:27:50,750 --> 00:27:53,780
separate like the core is wanted to for

00:27:52,550 --> 00:27:56,000
a while keep things a bit more separate

00:27:53,780 --> 00:27:58,790
but one things I am going for is

00:27:56,000 --> 00:28:01,070
becoming a a fish official external app

00:27:58,790 --> 00:28:03,080
so we have a DEP now for official django

00:28:01,070 --> 00:28:05,030
apps that are not actually core django

00:28:03,080 --> 00:28:08,150
and keeping the same security policy and

00:28:05,030 --> 00:28:09,560
stuff in place and so trying I'm going

00:28:08,150 --> 00:28:10,850
to try mary-charles under that process

00:28:09,560 --> 00:28:12,770
and putting it under Django github

00:28:10,850 --> 00:28:17,060
authorization and all that kind of start

00:28:12,770 --> 00:28:19,130
pretty soon maturity obviously I can't

00:28:17,060 --> 00:28:21,800
spend say I'll run my crazy code Andrew

00:28:19,130 --> 00:28:23,450
wrote that's based on stuff people who

00:28:21,800 --> 00:28:25,310
run op systems will not trust me on that

00:28:23,450 --> 00:28:26,960
I believe them very well for doing this

00:28:25,310 --> 00:28:28,850
and the part of this is that is a long

00:28:26,960 --> 00:28:31,790
road like the keep up channels is we

00:28:28,850 --> 00:28:33,380
start we start a year ago it takes three

00:28:31,790 --> 00:28:35,060
or four years to get to full trust the

00:28:33,380 --> 00:28:36,470
building this stuff but right now people

00:28:35,060 --> 00:28:38,330
that are running in production it has

00:28:36,470 --> 00:28:40,530
been fine I've got one bug report we

00:28:38,330 --> 00:28:43,140
fixed within three hours

00:28:40,530 --> 00:28:44,700
that bad and the load test we're doing

00:28:43,140 --> 00:28:46,830
seemed pretty good like load tested why

00:28:44,700 --> 00:28:48,360
is it it runs about the same as sage a

00:28:46,830 --> 00:28:50,700
unicorn would do on a default

00:28:48,360 --> 00:28:53,940
configuration so it's certainly not it's

00:28:50,700 --> 00:28:57,090
not worse which is quite nice community

00:28:53,940 --> 00:28:59,250
the idea channels is it is a base set of

00:28:57,090 --> 00:29:01,680
tools that is to be built upon it's not

00:28:59,250 --> 00:29:03,600
going to be a full Souls problem of how

00:29:01,680 --> 00:29:06,600
to do everything in WebSockets and the

00:29:03,600 --> 00:29:08,280
idea is we'll have a community of

00:29:06,600 --> 00:29:10,500
third-party tools and extensions and

00:29:08,280 --> 00:29:13,650
workaround channels sort of enhance the

00:29:10,500 --> 00:29:15,510
experience as one example some people

00:29:13,650 --> 00:29:17,820
are interested in managing like exact

00:29:15,510 --> 00:29:19,860
how how many people are connected right

00:29:17,820 --> 00:29:22,020
now and like connected and Ally with

00:29:19,860 --> 00:29:23,100
like live pinging that's the sort of

00:29:22,020 --> 00:29:24,360
thing that we could do as a sort of

00:29:23,100 --> 00:29:29,670
third buddy out that plugs into the

00:29:24,360 --> 00:29:31,050
ecosystem really well coexistence not

00:29:29,670 --> 00:29:32,910
all of you need the WebSockets and

00:29:31,050 --> 00:29:34,680
that's fine and the whole point of

00:29:32,910 --> 00:29:36,720
channels is that it's optional easy to

00:29:34,680 --> 00:29:38,160
add easy to remove yet Hatter on

00:29:36,720 --> 00:29:41,450
anything on if you don't want to it's

00:29:38,160 --> 00:29:45,030
just a thing if you want it it's there

00:29:41,450 --> 00:29:46,530
expansion it's not just WebSockets like

00:29:45,030 --> 00:29:47,940
the whole point of this sort of crazy

00:29:46,530 --> 00:29:49,740
thing with all the arrows and diagrams

00:29:47,940 --> 00:29:52,410
is that it expands beyond WebSockets

00:29:49,740 --> 00:29:54,510
views if emails use it for chat other

00:29:52,410 --> 00:29:56,670
message formats it's it's flexible and

00:29:54,510 --> 00:29:58,140
because it's an event based system you

00:29:56,670 --> 00:30:00,450
can extend it to lots more stuff other

00:29:58,140 --> 00:30:02,130
than sockets they're just WebSockets

00:30:00,450 --> 00:30:04,680
other thing that are the most pressing

00:30:02,130 --> 00:30:07,770
sort of concern of the modern web and

00:30:04,680 --> 00:30:10,730
then finally specification a SGI is not

00:30:07,770 --> 00:30:13,650
China Pacific my goal is some kind of

00:30:10,730 --> 00:30:16,170
cross python spec that lets us do

00:30:13,650 --> 00:30:18,030
WebSockets across different things in

00:30:16,170 --> 00:30:20,640
python rather than just in django but

00:30:18,030 --> 00:30:22,170
it's a while before I reach the point I

00:30:20,640 --> 00:30:23,610
can take it to something like web sagen

00:30:22,170 --> 00:30:25,560
and sale and that some discussing

00:30:23,610 --> 00:30:27,780
formally what does it mean for us to

00:30:25,560 --> 00:30:29,940
sort WebSockets in a world of Python 3

00:30:27,780 --> 00:30:31,110
and async and await and the spec is not

00:30:29,940 --> 00:30:34,110
quite there yet for that but getting

00:30:31,110 --> 00:30:35,700
close if you are interested more there

00:30:34,110 --> 00:30:37,260
is a lot of documentation on the

00:30:35,700 --> 00:30:39,930
documentation site there are examples as

00:30:37,260 --> 00:30:42,700
I said before and I really hope that you

00:30:39,930 --> 00:30:44,760
enjoy it thank you very much

00:30:42,700 --> 00:30:44,760

YouTube URL: https://www.youtube.com/watch?v=y2qv5J7PtrA


