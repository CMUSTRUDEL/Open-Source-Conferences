Title: Behind Closed Doors: Managing Passwords in a Dangerous World
Publication date: 2016-08-16
Playlist: DjangoCon AU 2016 (Miniconf)
Description: 
	Noah Kantrowitz
https://2016.pycon-au.org/schedule/61/view_talk
Secrets come in many forms, passwords, keys, tokens. All crucial for the operation of an application, but each dangerous in its own way. In the past, many of us have pasted those secrets in to a text file and moved on, but in a world of config automation and ephemeral microservices these patterns are leaving our data at greater risk than ever before.

New tools, products, and libraries are being released all the time to try to cope with this massive rise in threats, both new and old-but-ignored. This talk will cover the major types of secrets in a normal web application, how to model their security properties, what tools are best for each situation, and how to use them with major web frameworks.
Captions: 
	00:00:00,000 --> 00:00:06,420
all right for real this time let's get

00:00:02,190 --> 00:00:08,160
going welcome back our next speaker our

00:00:06,420 --> 00:00:10,650
first international speaker and not by

00:00:08,160 --> 00:00:12,240
no means the last one is Noah Kantrowitz

00:00:10,650 --> 00:00:14,040
here to talk to us about where we can

00:00:12,240 --> 00:00:23,609
keep our passwords and keep them safe so

00:00:14,040 --> 00:00:25,920
everyone please welcome Noah there we go

00:00:23,609 --> 00:00:27,449
like Russell said hi I'm Noah I'm

00:00:25,920 --> 00:00:29,369
primarily active in the chef community

00:00:27,449 --> 00:00:32,279
these days but i also am still fairly

00:00:29,369 --> 00:00:33,600
around in the python world I'm can't run

00:00:32,279 --> 00:00:36,620
on Twitter and code Ranger basically or

00:00:33,600 --> 00:00:38,879
else i work for Bloomberg on open source

00:00:36,620 --> 00:00:40,260
everything on their primary lays under

00:00:38,879 --> 00:00:42,230
the chef world and also just sort of do

00:00:40,260 --> 00:00:44,910
open source ecosystem management stuff

00:00:42,230 --> 00:00:47,070
and I'm here to talk about secrets I

00:00:44,910 --> 00:00:48,300
will lead off this is talk is to talk

00:00:47,070 --> 00:00:49,530
about secrets as they pertain to

00:00:48,300 --> 00:00:51,360
infrastructure so if you're looking for

00:00:49,530 --> 00:00:53,640
advice about browser extensions or how

00:00:51,360 --> 00:00:56,190
to write your django app not really the

00:00:53,640 --> 00:00:59,219
purpose of this talk personally one

00:00:56,190 --> 00:01:00,239
password or probably pbk bf2 but if you

00:00:59,219 --> 00:01:03,149
want to escape right now no hard

00:01:00,239 --> 00:01:04,199
feelings so what defines a secret we're

00:01:03,149 --> 00:01:06,060
going to be talking about infrastructure

00:01:04,199 --> 00:01:09,119
secrets like I said so you could keep

00:01:06,060 --> 00:01:10,680
all private information as secret so all

00:01:09,119 --> 00:01:12,510
your user data for example that's

00:01:10,680 --> 00:01:14,189
private you don't want it to get out but

00:01:12,510 --> 00:01:15,659
it becomes unwieldy to treat everything

00:01:14,189 --> 00:01:17,610
like that as a secret so we're going to

00:01:15,659 --> 00:01:19,650
use these three principles to keep us

00:01:17,610 --> 00:01:21,630
focused so first they need to be small

00:01:19,650 --> 00:01:23,430
usually a few kilobytes you might use

00:01:21,630 --> 00:01:24,810
techniques like encryption data database

00:01:23,430 --> 00:01:26,729
encryption disk encryption things like

00:01:24,810 --> 00:01:28,439
that to have a small secret control

00:01:26,729 --> 00:01:30,540
access to a much larger piece of data

00:01:28,439 --> 00:01:32,579
but the secret part itself is relatively

00:01:30,540 --> 00:01:35,009
small second it has to be radioactive

00:01:32,579 --> 00:01:36,990
this means that if an attacker knows it

00:01:35,009 --> 00:01:39,000
something bad happens so let's compare a

00:01:36,990 --> 00:01:40,470
username to a password an attacker

00:01:39,000 --> 00:01:41,970
knowing your username not usually a big

00:01:40,470 --> 00:01:43,950
deal an attacker knowing your password a

00:01:41,970 --> 00:01:45,360
very big deal so the radioactivity is

00:01:43,950 --> 00:01:46,920
the part that discriminates between

00:01:45,360 --> 00:01:49,049
those two and finally it has to be

00:01:46,920 --> 00:01:50,520
required when we talk about modern

00:01:49,049 --> 00:01:51,810
infrastructure these days people i talk

00:01:50,520 --> 00:01:53,040
about graceful fall back and

00:01:51,810 --> 00:01:55,799
microservices and that kind of stuff

00:01:53,040 --> 00:01:58,680
secrets generally are not going to be

00:01:55,799 --> 00:02:00,210
allowable to not have whatever your

00:01:58,680 --> 00:02:02,700
graceful fall back that's that's

00:02:00,210 --> 00:02:04,469
fantastic your your apps should support

00:02:02,700 --> 00:02:06,000
degraded operation but secrets are

00:02:04,469 --> 00:02:08,690
usually exempt from that you need them

00:02:06,000 --> 00:02:10,739
or you can't do whatever your app does

00:02:08,690 --> 00:02:12,980
four types of Secrets i'm going to use

00:02:10,739 --> 00:02:15,200
as a primary guiding use case so

00:02:12,980 --> 00:02:16,459
first is passwords again I'm talking

00:02:15,200 --> 00:02:17,629
about infrastructure stuff so when I

00:02:16,459 --> 00:02:19,010
talk about passwords here we're usually

00:02:17,629 --> 00:02:21,650
talking about things that were designed

00:02:19,010 --> 00:02:23,480
for humans but we're now using them for

00:02:21,650 --> 00:02:25,489
machine-to-machine authentication or

00:02:23,480 --> 00:02:27,379
interoperation of some kind so as an

00:02:25,489 --> 00:02:28,940
example database passwords there's a

00:02:27,379 --> 00:02:30,890
username and a password but in general

00:02:28,940 --> 00:02:32,390
we're not talking about humans logging

00:02:30,890 --> 00:02:33,799
into a database manually we're talking

00:02:32,390 --> 00:02:36,799
about a django app logging into a

00:02:33,799 --> 00:02:38,450
database passwords are small about a

00:02:36,799 --> 00:02:41,120
kilobyte they have minimal internal

00:02:38,450 --> 00:02:42,860
formatting they're usually one word for

00:02:41,120 --> 00:02:44,120
whatever definition you want to use some

00:02:42,860 --> 00:02:46,250
other examples of these include things

00:02:44,120 --> 00:02:48,890
like HTTP proxy passwords or Linux login

00:02:46,250 --> 00:02:51,650
passwords in contrast to passwords

00:02:48,890 --> 00:02:52,690
tokens are usually things designed from

00:02:51,650 --> 00:02:55,370
the ground up for machine-to-machine

00:02:52,690 --> 00:02:57,079
authentication in interaction so again

00:02:55,370 --> 00:02:59,720
they're small they're going to be around

00:02:57,079 --> 00:03:01,400
a kilobyte or less and they're one word

00:02:59,720 --> 00:03:05,060
of some kind there's some small string

00:03:01,400 --> 00:03:06,859
of characters the 11 major difference is

00:03:05,060 --> 00:03:08,329
that they usually can't be hashed with

00:03:06,859 --> 00:03:10,129
passwords you can kind of cheat and

00:03:08,329 --> 00:03:11,269
store a hash of the password to use when

00:03:10,129 --> 00:03:13,160
you're interacting with another system

00:03:11,269 --> 00:03:14,989
with tokens that you should be in their

00:03:13,160 --> 00:03:16,400
raw form to be usable so some examples

00:03:14,989 --> 00:03:18,530
include things like pagerduty

00:03:16,400 --> 00:03:21,859
credentials or oooff access credentials

00:03:18,530 --> 00:03:23,720
and then keys to compare to the other

00:03:21,859 --> 00:03:24,769
two are going to be much larger and they

00:03:23,720 --> 00:03:27,859
usually have some kind of internal

00:03:24,769 --> 00:03:31,220
formatting new lines headers those dash

00:03:27,859 --> 00:03:33,650
dash RSA key lines some kind of internal

00:03:31,220 --> 00:03:36,109
structure TLS Keys SSH keys that kind of

00:03:33,650 --> 00:03:38,989
thing and then there's this weird long

00:03:36,109 --> 00:03:40,549
tail of other stuff some of them look

00:03:38,989 --> 00:03:41,720
kind of like one of the other three so

00:03:40,549 --> 00:03:43,519
you can kind of make it work so for

00:03:41,720 --> 00:03:45,290
example Kerberos machine tickets they

00:03:43,519 --> 00:03:47,090
look a lot like keys you can mostly use

00:03:45,290 --> 00:03:49,069
them as keys and only sometimes you have

00:03:47,090 --> 00:03:51,019
to sort of go outside the box but other

00:03:49,069 --> 00:03:52,819
times like say HIPAA records although

00:03:51,019 --> 00:03:56,450
I'm in Australia that's the American

00:03:52,819 --> 00:03:57,739
health care privacy laws you have to

00:03:56,450 --> 00:03:58,970
deal with completely custom-made tools

00:03:57,739 --> 00:04:01,819
and nothing i'm talking about here will

00:03:58,970 --> 00:04:03,530
help you all right so we know what we're

00:04:01,819 --> 00:04:05,480
talking about in terms of secrets let's

00:04:03,530 --> 00:04:06,980
take their temperature hot secrets are

00:04:05,480 --> 00:04:08,269
things use during the normal operations

00:04:06,980 --> 00:04:10,940
the infrastructure so things that a

00:04:08,269 --> 00:04:13,040
server has to have in order to do

00:04:10,940 --> 00:04:14,959
whatever it's trying to accomplish so

00:04:13,040 --> 00:04:16,910
for example we have a standard django

00:04:14,959 --> 00:04:18,169
app you could have a human operator sit

00:04:16,910 --> 00:04:19,519
at the console and type in the database

00:04:18,169 --> 00:04:20,989
password every time a new web request

00:04:19,519 --> 00:04:23,330
comes in but that's probably not going

00:04:20,989 --> 00:04:25,280
to get a lot of work done so instead we

00:04:23,330 --> 00:04:26,780
want the the application to have direct

00:04:25,280 --> 00:04:29,180
access to the database password

00:04:26,780 --> 00:04:30,889
ever it wants to contrast this is

00:04:29,180 --> 00:04:32,840
there's a cold secret these are things

00:04:30,889 --> 00:04:34,760
that we need to keep safe we need to

00:04:32,840 --> 00:04:36,830
keep them stored long-term but we don't

00:04:34,760 --> 00:04:39,590
need them on a regular basis we can put

00:04:36,830 --> 00:04:41,960
them behind a bunch more walls so

00:04:39,590 --> 00:04:44,870
examples include AWS Master passwords or

00:04:41,960 --> 00:04:46,460
revocation certificates the hot versus

00:04:44,870 --> 00:04:49,040
cold dichotomy Israeli hum percent clear

00:04:46,460 --> 00:04:50,480
and practice so most tools secrets and

00:04:49,040 --> 00:04:51,830
applications are going to fall somewhere

00:04:50,480 --> 00:04:54,350
in the middle for example a small

00:04:51,830 --> 00:04:56,330
application cluster booting a new server

00:04:54,350 --> 00:04:58,070
a new Django web server into your

00:04:56,330 --> 00:05:00,290
cluster is going to be a human initiator

00:04:58,070 --> 00:05:01,730
coldish operation but once it's running

00:05:00,290 --> 00:05:03,669
it needs autonomous access so that's

00:05:01,730 --> 00:05:06,200
more on the hot side of the equation and

00:05:03,669 --> 00:05:07,760
then within hot or online secrets

00:05:06,200 --> 00:05:09,860
there's another sub spectrum around how

00:05:07,760 --> 00:05:11,240
often the secret changes most

00:05:09,860 --> 00:05:12,890
traditional online secrets management

00:05:11,240 --> 00:05:15,500
platforms are built around slow secrets

00:05:12,890 --> 00:05:17,630
once a secret is set it fairly rarely

00:05:15,500 --> 00:05:19,520
changes sometimes it will because of an

00:05:17,630 --> 00:05:21,140
emergency like there's a compromise or

00:05:19,520 --> 00:05:22,880
there's industry standards like PCI DSS

00:05:21,140 --> 00:05:25,190
that remand date that you change stuff

00:05:22,880 --> 00:05:26,630
once or twice a year but rotating a slow

00:05:25,190 --> 00:05:27,979
secret is usually a human initiated

00:05:26,630 --> 00:05:30,020
action and it's usually not trivial

00:05:27,979 --> 00:05:32,300
enough you want to do it often so for

00:05:30,020 --> 00:05:34,160
example TLS keys we all know they change

00:05:32,300 --> 00:05:35,720
every year or two you have to refresh

00:05:34,160 --> 00:05:38,000
your certificate but day to day we

00:05:35,720 --> 00:05:41,450
usually think of TLS stuff as relatively

00:05:38,000 --> 00:05:43,580
static to contrast this again hot

00:05:41,450 --> 00:05:44,750
secrets these are relatively new in some

00:05:43,580 --> 00:05:45,770
of the dedicated secrets management

00:05:44,750 --> 00:05:49,280
platforms that we'll talk about in a

00:05:45,770 --> 00:05:51,080
minute so the idea is to have update and

00:05:49,280 --> 00:05:53,060
distribution of new secret material in

00:05:51,080 --> 00:05:55,370
minutes hours or days instead of weeks

00:05:53,060 --> 00:05:58,220
months years etc some examples include

00:05:55,370 --> 00:05:59,830
OCSP stapling or the Amazon ec2 role

00:05:58,220 --> 00:06:02,090
credentials which role every six hours

00:05:59,830 --> 00:06:04,310
within reason the more often a secret is

00:06:02,090 --> 00:06:05,900
rotated the safer you are if you have a

00:06:04,310 --> 00:06:07,160
brute force risk or if there is a leak

00:06:05,900 --> 00:06:08,539
that you didn't know about every time

00:06:07,160 --> 00:06:11,479
you rotate the secrets you're safe again

00:06:08,539 --> 00:06:12,620
this does however mean that the consumer

00:06:11,479 --> 00:06:14,000
of the secret needs to be a little bit

00:06:12,620 --> 00:06:15,440
more integrated into the secrets manager

00:06:14,000 --> 00:06:16,910
platform because it needs to understand

00:06:15,440 --> 00:06:20,030
expiration times and whatever the

00:06:16,910 --> 00:06:21,500
refresh mechanism is all right so that's

00:06:20,030 --> 00:06:22,669
properties of Secrets themselves they'll

00:06:21,500 --> 00:06:24,979
talk about properties of Secrets

00:06:22,669 --> 00:06:26,510
management systems the principle of

00:06:24,979 --> 00:06:27,710
least access at least as it pertains to

00:06:26,510 --> 00:06:30,800
computer science is generally attributed

00:06:27,710 --> 00:06:32,270
to Jerry Saltzer in 1974 ACM paper it's

00:06:30,800 --> 00:06:33,560
mostly common sense but it is so often

00:06:32,270 --> 00:06:35,570
ignored that it bears strenuous

00:06:33,560 --> 00:06:37,039
repetition in short a service or tool

00:06:35,570 --> 00:06:40,430
should have access only to the secrets

00:06:37,039 --> 00:06:40,969
it requires and nothing else quality of

00:06:40,430 --> 00:06:42,289
every secret

00:06:40,969 --> 00:06:43,669
management platform should be judged on

00:06:42,289 --> 00:06:45,199
these two main properties principle of

00:06:43,669 --> 00:06:47,629
least access or at least privilege and

00:06:45,199 --> 00:06:49,129
the audit trail and audit trail means

00:06:47,629 --> 00:06:50,659
that when something goes wrong and it

00:06:49,129 --> 00:06:52,579
will you will have information about

00:06:50,659 --> 00:06:54,379
what happened and where and how and why

00:06:52,579 --> 00:06:56,479
that will let you track down what the

00:06:54,379 --> 00:06:57,739
bug was and hopefully fix it other

00:06:56,479 --> 00:06:59,449
features are important and we'll make a

00:06:57,739 --> 00:07:00,889
break your use case for specific tools

00:06:59,449 --> 00:07:02,209
and techniques but you should always

00:07:00,889 --> 00:07:04,610
start with a careful analysis of these

00:07:02,209 --> 00:07:06,799
two properties alright let's do it let's

00:07:04,610 --> 00:07:12,110
manage some secrets cool done we can all

00:07:06,799 --> 00:07:14,029
go home right all right we've all done

00:07:12,110 --> 00:07:16,099
this I've definitely done this quite a

00:07:14,029 --> 00:07:17,509
few times more than I care to admit we

00:07:16,099 --> 00:07:19,789
all knew it was a bad idea but maybe not

00:07:17,509 --> 00:07:21,379
why it was a bad idea so this breaks

00:07:19,789 --> 00:07:22,969
both of our guiding properties the

00:07:21,379 --> 00:07:24,110
secret is hanging out in plain text and

00:07:22,969 --> 00:07:25,939
every machine that clones are get

00:07:24,110 --> 00:07:28,069
repository so we really don't have a

00:07:25,939 --> 00:07:30,319
principal least access on this we've

00:07:28,069 --> 00:07:32,809
linked the the permission of is able to

00:07:30,319 --> 00:07:33,949
clone the repository with able to access

00:07:32,809 --> 00:07:35,089
the secret and they're probably a lot

00:07:33,949 --> 00:07:36,619
more things that can clone this

00:07:35,089 --> 00:07:38,479
repository then should have access to

00:07:36,619 --> 00:07:40,939
this password we also have no audit logs

00:07:38,479 --> 00:07:43,189
at best maybe we have a log of who

00:07:40,939 --> 00:07:44,689
cloned the repository but beyond that we

00:07:43,189 --> 00:07:47,539
have no idea who accesses the secret and

00:07:44,689 --> 00:07:50,479
when and who was responsible all right

00:07:47,539 --> 00:07:51,679
so we want to make this better let's

00:07:50,479 --> 00:07:53,149
figure out how we're going to do that

00:07:51,679 --> 00:07:54,639
first we need to figure out what kind of

00:07:53,149 --> 00:07:56,869
threats were going to protect against

00:07:54,639 --> 00:07:58,550
not every secret is going to be equally

00:07:56,869 --> 00:08:00,169
valuable but whatever systems you use

00:07:58,550 --> 00:08:02,329
need to be at least strong enough to

00:08:00,169 --> 00:08:04,489
protect against basic attacks that you

00:08:02,329 --> 00:08:06,019
consider to be likely threat modeling is

00:08:04,489 --> 00:08:07,610
the examination of where attackers are

00:08:06,019 --> 00:08:08,809
likely to strike and what each threat

00:08:07,610 --> 00:08:12,110
brings the table in terms of the

00:08:08,809 --> 00:08:13,279
successful attack against that point for

00:08:12,110 --> 00:08:14,839
most of you there's eight major levels

00:08:13,279 --> 00:08:16,639
of attacks to worry about each attack

00:08:14,839 --> 00:08:17,659
service especially vulnerable point in

00:08:16,639 --> 00:08:19,549
our armor that we'll need to figure out

00:08:17,659 --> 00:08:21,259
how to protect again I'm talking about

00:08:19,549 --> 00:08:23,059
infrastructure security here so this is

00:08:21,259 --> 00:08:25,129
not specifically how to secure a django

00:08:23,059 --> 00:08:28,099
app this is how to secure any web

00:08:25,129 --> 00:08:30,199
application in any format if you have a

00:08:28,099 --> 00:08:31,339
questions on django security come talk

00:08:30,199 --> 00:08:33,279
to me later or I'm sure there's people

00:08:31,339 --> 00:08:35,860
here that are much better at it than me

00:08:33,279 --> 00:08:38,389
so at its heart a brute force attack is

00:08:35,860 --> 00:08:39,919
just trying to get access to a secret by

00:08:38,389 --> 00:08:41,809
making it up from scratch and asking you

00:08:39,919 --> 00:08:43,099
to verify that it was correct every

00:08:41,809 --> 00:08:44,480
server on the internet sees a non-stop

00:08:43,099 --> 00:08:45,949
parade of brute force attacks with no

00:08:44,480 --> 00:08:48,559
signs of slowing and has been doing so

00:08:45,949 --> 00:08:49,730
for decades fortunately because it's

00:08:48,559 --> 00:08:51,470
been happening for decades we have a lot

00:08:49,730 --> 00:08:54,019
of techniques to get around these i use

00:08:51,470 --> 00:08:54,410
the 3 R's rate limit attacks rate limit

00:08:54,019 --> 00:08:56,149
attempts

00:08:54,410 --> 00:08:58,490
to use a secret so things like logins or

00:08:56,149 --> 00:09:01,370
API access especially if it's an invalid

00:08:58,490 --> 00:09:03,949
access lock those down as far as how

00:09:01,370 --> 00:09:06,740
often they can happen rotate stuff

00:09:03,949 --> 00:09:08,779
frequently and finally restrict access

00:09:06,740 --> 00:09:10,639
entirely for example if you've got a

00:09:08,779 --> 00:09:12,050
back-end Postgres database for your

00:09:10,639 --> 00:09:13,939
django app don't put that on the

00:09:12,050 --> 00:09:15,829
internet use internal subnets use

00:09:13,939 --> 00:09:17,060
firewalls whatever you need to but just

00:09:15,829 --> 00:09:20,000
don't expose things to the internet

00:09:17,060 --> 00:09:21,649
unless you need to another option is to

00:09:20,000 --> 00:09:24,980
use techniques that are currently beyond

00:09:21,649 --> 00:09:25,939
brute forcing like RSA 4096 bit keys but

00:09:24,980 --> 00:09:27,410
remember that's always going to be a

00:09:25,939 --> 00:09:31,310
moving target and things may be able to

00:09:27,410 --> 00:09:33,019
be broken in the future the next and

00:09:31,310 --> 00:09:34,850
weakest threat is the source code for an

00:09:33,019 --> 00:09:35,930
application leaking taking aside the

00:09:34,850 --> 00:09:38,629
effects to the business which may be

00:09:35,930 --> 00:09:40,009
considerable but are not my problem this

00:09:38,629 --> 00:09:41,449
is not going to be a problem for most

00:09:40,009 --> 00:09:43,160
people we've all learned that we

00:09:41,449 --> 00:09:44,870
shouldn't hard code passwords into our

00:09:43,160 --> 00:09:46,459
source code files so hopefully most

00:09:44,870 --> 00:09:48,589
people if you source code for your web

00:09:46,459 --> 00:09:52,699
app leaked today you wouldn't have a

00:09:48,589 --> 00:09:55,279
security problem hopefully the next is a

00:09:52,699 --> 00:09:56,569
superset of this usually leaking a

00:09:55,279 --> 00:09:58,610
backup file if you remember the

00:09:56,569 --> 00:10:00,139
Instagram hack from about eight months

00:09:58,610 --> 00:10:01,910
ago that was one of these they put a

00:10:00,139 --> 00:10:03,259
backup file up on s3 and promptly forgot

00:10:01,910 --> 00:10:05,329
about it and never notice that it

00:10:03,259 --> 00:10:06,949
contained active credentials so this

00:10:05,329 --> 00:10:09,230
will usually include all the source code

00:10:06,949 --> 00:10:11,500
but other things database backups

00:10:09,230 --> 00:10:14,420
possibly config files things like that

00:10:11,500 --> 00:10:15,740
here your best approach is carefully

00:10:14,420 --> 00:10:16,880
audit your backups all the time make

00:10:15,740 --> 00:10:18,860
sure that you blacklists what you need

00:10:16,880 --> 00:10:20,480
to don't back things up unless they

00:10:18,860 --> 00:10:23,000
actually have value and make sure that

00:10:20,480 --> 00:10:24,860
you are rotating things often another

00:10:23,000 --> 00:10:27,470
option is to store things only in Rams

00:10:24,860 --> 00:10:28,850
that they are not subject to backups but

00:10:27,470 --> 00:10:32,180
we'll get more into that on the next

00:10:28,850 --> 00:10:34,220
slide so traversal attacks in this

00:10:32,180 --> 00:10:36,470
general classification are places where

00:10:34,220 --> 00:10:38,870
the application has legitimate access to

00:10:36,470 --> 00:10:41,029
a secret but the user doesn't so for

00:10:38,870 --> 00:10:42,769
example all Django apps probably have

00:10:41,029 --> 00:10:44,240
access to a database password the user

00:10:42,769 --> 00:10:47,000
does not have access to that database

00:10:44,240 --> 00:10:48,610
password hopefully a traversal attack is

00:10:47,000 --> 00:10:50,750
attempting to find a way to get access

00:10:48,610 --> 00:10:52,189
for the user for something they are not

00:10:50,750 --> 00:10:53,809
supposed to have permission to so this

00:10:52,189 --> 00:10:56,000
might be things like sequel injection or

00:10:53,809 --> 00:10:58,250
directory traversal or anything in that

00:10:56,000 --> 00:11:00,050
general category and here other than

00:10:58,250 --> 00:11:01,279
good application security which will

00:11:00,050 --> 00:11:02,809
hopefully protect against the majority

00:11:01,279 --> 00:11:04,519
of these again we have principle of

00:11:02,809 --> 00:11:06,559
least access any secret that the

00:11:04,519 --> 00:11:07,939
application doesn't have access to the

00:11:06,559 --> 00:11:10,099
user also doesn't have access

00:11:07,939 --> 00:11:11,989
too so if you don't need access to say

00:11:10,099 --> 00:11:13,429
your TLS Keys your django app probably

00:11:11,989 --> 00:11:15,919
shouldn't have read access to your TLS

00:11:13,429 --> 00:11:17,839
genes no amount of traversal can let the

00:11:15,919 --> 00:11:19,009
user go outside the bounds of whatever

00:11:17,839 --> 00:11:21,949
the application is supposed to have

00:11:19,009 --> 00:11:24,259
access to a frequent traversal style

00:11:21,949 --> 00:11:25,729
attack is take taking advantage of the

00:11:24,259 --> 00:11:27,799
common pattern of storing things in

00:11:25,729 --> 00:11:30,679
environment variables usually API tokens

00:11:27,799 --> 00:11:34,309
or database access your eyes things like

00:11:30,679 --> 00:11:35,779
that this is by the 12 factor manifesto

00:11:34,309 --> 00:11:37,729
even considered best practice I'm here

00:11:35,779 --> 00:11:39,349
to say I disagree biggest problem with

00:11:37,729 --> 00:11:41,479
these is a lot of things like exception

00:11:39,349 --> 00:11:43,789
loggers will record all of your

00:11:41,479 --> 00:11:45,169
environment variables ship them off and

00:11:43,789 --> 00:11:48,349
store them in plain text somewhere in a

00:11:45,169 --> 00:11:49,639
log server you can block whatever you

00:11:48,349 --> 00:11:51,619
want to usually with these they have a

00:11:49,639 --> 00:11:53,359
config file some of them will will block

00:11:51,619 --> 00:11:55,039
the popular Django environment variables

00:11:53,359 --> 00:11:57,289
things like data base URI from karoku

00:11:55,039 --> 00:11:59,329
and stuff like that but always be wary

00:11:57,289 --> 00:12:00,919
if you miss something it's going to

00:11:59,329 --> 00:12:02,209
basically be an end run around your

00:12:00,919 --> 00:12:03,769
entire security model unless you are

00:12:02,209 --> 00:12:05,149
also very careful watching what your

00:12:03,769 --> 00:12:08,539
exception loggers and debugging tools

00:12:05,149 --> 00:12:10,429
are providing so here be dragons all

00:12:08,539 --> 00:12:11,869
right back to the threat modeling code

00:12:10,429 --> 00:12:13,579
execution so we've moved beyond the

00:12:11,869 --> 00:12:16,069
bounds of what we can reasonably protect

00:12:13,579 --> 00:12:18,109
against using our fancy secure Django

00:12:16,069 --> 00:12:19,249
code once the user can execute code we

00:12:18,109 --> 00:12:21,619
are backed only to structural

00:12:19,249 --> 00:12:23,689
protections so no amount of like using

00:12:21,619 --> 00:12:24,769
the RM and being careful about director

00:12:23,689 --> 00:12:26,929
of traversals will matter at this point

00:12:24,769 --> 00:12:29,809
they can execute their own code so

00:12:26,929 --> 00:12:31,220
really really only only give the the

00:12:29,809 --> 00:12:34,369
application access to the secrets that

00:12:31,220 --> 00:12:35,389
it is supposed to when Dante pass

00:12:34,369 --> 00:12:36,919
through the gates of Hell he notes the

00:12:35,389 --> 00:12:39,739
inscription abandon all hope ye who

00:12:36,919 --> 00:12:42,589
enter here so this means that they can

00:12:39,739 --> 00:12:44,689
now execute code as root we've we've

00:12:42,589 --> 00:12:46,069
lost even the most basics of stuff so

00:12:44,689 --> 00:12:48,109
before we could maybe use things like

00:12:46,069 --> 00:12:50,839
file permissions containers docker

00:12:48,109 --> 00:12:53,119
whatever to restrict access once they

00:12:50,839 --> 00:12:54,289
get root no longer matters here is where

00:12:53,119 --> 00:12:55,609
the audit trails really start to matter

00:12:54,289 --> 00:12:57,019
though because you can see what secrets

00:12:55,609 --> 00:12:58,579
are accessed and when and so know

00:12:57,019 --> 00:12:59,779
exactly what to rotate and hopefully

00:12:58,579 --> 00:13:02,059
have procedures in place to do that

00:12:59,779 --> 00:13:04,399
quickly most people ignore this as

00:13:02,059 --> 00:13:06,409
unlikely Django certainly has a much

00:13:04,399 --> 00:13:08,119
better track record at not having root

00:13:06,409 --> 00:13:09,319
code execution vulnerabilities to some

00:13:08,119 --> 00:13:11,509
other web frameworks that will remain

00:13:09,319 --> 00:13:13,579
nameless but still can happen and

00:13:11,509 --> 00:13:15,979
another commonly ignored attack surface

00:13:13,579 --> 00:13:17,269
is laptop theft usually at any small

00:13:15,979 --> 00:13:20,810
company getting access for developer

00:13:17,269 --> 00:13:22,760
workstation is reacts s on every server

00:13:20,810 --> 00:13:24,230
hopefully you have things like disk

00:13:22,760 --> 00:13:25,610
encryption on all of your developer

00:13:24,230 --> 00:13:28,670
laptops if you don't please turn that on

00:13:25,610 --> 00:13:30,080
so you can hopefully avoid this to some

00:13:28,670 --> 00:13:32,360
degree but it's a thing to keep in mind

00:13:30,080 --> 00:13:34,400
and then finally the higher power attack

00:13:32,360 --> 00:13:35,750
surface this is where a lot of people

00:13:34,400 --> 00:13:37,279
draw the line on planning either

00:13:35,750 --> 00:13:38,540
voluntarily or because they have

00:13:37,279 --> 00:13:40,330
industry regulations that don't allow

00:13:38,540 --> 00:13:42,680
telling the government to smack off so

00:13:40,330 --> 00:13:44,300
at least for me in America we have

00:13:42,680 --> 00:13:46,220
things like FISA Court warrants which

00:13:44,300 --> 00:13:47,450
are secret court orders to do things

00:13:46,220 --> 00:13:49,520
that you cannot tell anyone else about

00:13:47,450 --> 00:13:51,500
or state-sponsored hacker groups AP

00:13:49,520 --> 00:13:53,180
cheese etc the list gets increasingly

00:13:51,500 --> 00:13:54,830
more difficult to handle you should

00:13:53,180 --> 00:13:56,420
think about these but maybe tell

00:13:54,830 --> 00:13:58,520
yourself you know if I get attacked by

00:13:56,420 --> 00:14:03,440
Russia my game plan is I'm going to get

00:13:58,520 --> 00:14:04,640
a new job and go home all right we've

00:14:03,440 --> 00:14:05,660
talked a lot about theory let's talk

00:14:04,640 --> 00:14:07,460
about some actual tools for managing

00:14:05,660 --> 00:14:10,310
secrets starting again from the top

00:14:07,460 --> 00:14:12,140
manually moving around text files so in

00:14:10,310 --> 00:14:13,730
some cases this is checking a text file

00:14:12,140 --> 00:14:15,800
directly into the application code repo

00:14:13,730 --> 00:14:17,510
sometimes you'll end up with a git repo

00:14:15,800 --> 00:14:20,180
called secrets sometimes you'll just

00:14:17,510 --> 00:14:22,460
have people stpn code files around this

00:14:20,180 --> 00:14:25,280
tail s keys often get synced that way

00:14:22,460 --> 00:14:28,730
you just get some files from a CA and

00:14:25,280 --> 00:14:29,870
you paste them via SSH in any case we've

00:14:28,730 --> 00:14:32,839
already talked about why this is bad so

00:14:29,870 --> 00:14:34,820
let's just move on next up a lot of

00:14:32,839 --> 00:14:36,740
people want the word encrypted encrypted

00:14:34,820 --> 00:14:38,180
makes us feel nice and warm and fuzzy so

00:14:36,740 --> 00:14:40,100
they'll look for things that work with

00:14:38,180 --> 00:14:41,000
get and are encrypted get crypt is

00:14:40,100 --> 00:14:42,350
probably the best of the implementation

00:14:41,000 --> 00:14:43,880
since I've seen but there's a lot of

00:14:42,350 --> 00:14:45,920
them they all share the same major

00:14:43,880 --> 00:14:47,540
downsides though there's again no way to

00:14:45,920 --> 00:14:49,970
really implement least privilege because

00:14:47,540 --> 00:14:52,100
we're tying access to the git repository

00:14:49,970 --> 00:14:53,720
to access the secrets and definitely

00:14:52,100 --> 00:14:56,320
there's no audit logging because access

00:14:53,720 --> 00:14:59,630
happens on every machine individually

00:14:56,320 --> 00:15:01,970
also most of these tools are white list

00:14:59,630 --> 00:15:03,770
only so if you forget to mark something

00:15:01,970 --> 00:15:06,620
as this should be encrypted you will

00:15:03,770 --> 00:15:08,209
silently check secrets in plain text

00:15:06,620 --> 00:15:10,040
into your git repository and then you

00:15:08,209 --> 00:15:12,250
have the really fun thing of how do i

00:15:10,040 --> 00:15:14,420
expunged data from a git repository

00:15:12,250 --> 00:15:16,070
everyone seen that one stack overflow

00:15:14,420 --> 00:15:20,779
question that's that's how everyone does

00:15:16,070 --> 00:15:23,180
it all right quick aside about symmetric

00:15:20,779 --> 00:15:25,900
versus asymmetric stuff for people that

00:15:23,180 --> 00:15:28,190
haven't worked with cryptography before

00:15:25,900 --> 00:15:29,600
the general approach of symmetric

00:15:28,190 --> 00:15:30,950
cryptography we have something that we

00:15:29,600 --> 00:15:34,010
want to keep secret would generate a

00:15:30,950 --> 00:15:35,480
random key we encrypt the secret

00:15:34,010 --> 00:15:38,330
we send the key over to the Machine

00:15:35,480 --> 00:15:40,010
somehow out-of-band we send the

00:15:38,330 --> 00:15:41,840
encrypted blob over usually this is like

00:15:40,010 --> 00:15:43,310
putting it up on s3 or in some other

00:15:41,840 --> 00:15:45,290
distribution mechanism letting the

00:15:43,310 --> 00:15:46,580
server download it and then the server

00:15:45,290 --> 00:15:48,980
can use the key to decrypt the encrypted

00:15:46,580 --> 00:15:50,840
blob and get back the secret so this is

00:15:48,980 --> 00:15:52,430
called symmetric because the key has to

00:15:50,840 --> 00:15:54,530
be copied over and be exactly the same

00:15:52,430 --> 00:15:57,170
data on both machines so syncing the key

00:15:54,530 --> 00:15:58,880
is the root of the trust model you will

00:15:57,170 --> 00:16:01,970
note that this creates a problem that

00:15:58,880 --> 00:16:03,950
key is itself a secret so symmetric

00:16:01,970 --> 00:16:05,150
systems do not actually solve key

00:16:03,950 --> 00:16:07,250
management so much as move it down a

00:16:05,150 --> 00:16:08,780
level of recursion that's said it can

00:16:07,250 --> 00:16:11,330
still be useful because you only have to

00:16:08,780 --> 00:16:13,550
do it once so maybe doing the initial

00:16:11,330 --> 00:16:15,020
key management by hand is enough for you

00:16:13,550 --> 00:16:17,690
if you don't boot up new servers very

00:16:15,020 --> 00:16:20,600
often and you can use that to leverage

00:16:17,690 --> 00:16:23,120
into nicer tools to contrast this

00:16:20,600 --> 00:16:25,400
asymmetric systems we have a secret we

00:16:23,120 --> 00:16:27,830
generate a random key pair on the target

00:16:25,400 --> 00:16:29,600
machine we retrieve the public key from

00:16:27,830 --> 00:16:31,220
that key pair we use that to generate an

00:16:29,600 --> 00:16:32,690
encrypted blob we again make the

00:16:31,220 --> 00:16:34,490
encrypted blob available to the server

00:16:32,690 --> 00:16:35,840
either we send it directly or we put it

00:16:34,490 --> 00:16:37,820
up on some kind of download mechanism

00:16:35,840 --> 00:16:39,710
that the server can access and then it

00:16:37,820 --> 00:16:43,520
uses the private key to decrypt the

00:16:39,710 --> 00:16:45,200
secret so again we still have a key here

00:16:43,520 --> 00:16:46,940
but the difference is that public keys

00:16:45,200 --> 00:16:48,410
are not technically secrets because

00:16:46,940 --> 00:16:49,730
they're not radioactive they still have

00:16:48,410 --> 00:16:51,320
to be dealt with carefully and I'll talk

00:16:49,730 --> 00:16:53,420
a little bit more about that later but

00:16:51,320 --> 00:16:54,560
there's no radioactive element in this

00:16:53,420 --> 00:16:56,690
in the same way as there were with

00:16:54,560 --> 00:16:58,430
symmetric systems so it's it's got a

00:16:56,690 --> 00:17:00,800
little bit less limitation and that that

00:16:58,430 --> 00:17:03,110
respect all right back to talking about

00:17:00,800 --> 00:17:04,370
tools so we don't want to store stuff

00:17:03,110 --> 00:17:06,650
and get the next thing a lot of people

00:17:04,370 --> 00:17:08,690
reach for is whatever our cluster key

00:17:06,650 --> 00:17:11,030
value store is you keep ur console and

00:17:08,690 --> 00:17:13,339
Etsy d of these console is probably the

00:17:11,030 --> 00:17:14,870
nicest but zookeeper is the the old

00:17:13,339 --> 00:17:16,339
lumbering beast that does actually work

00:17:14,870 --> 00:17:18,560
pretty much no matter how you try and

00:17:16,339 --> 00:17:20,600
break it so but all of them have the

00:17:18,560 --> 00:17:23,930
same problem they they are a little

00:17:20,600 --> 00:17:25,820
better but they're still limited to yep

00:17:23,930 --> 00:17:29,120
they're still limited to generally

00:17:25,820 --> 00:17:30,320
fairly bespoke ACL systems I have seen a

00:17:29,120 --> 00:17:32,120
lot of people try to implement a

00:17:30,320 --> 00:17:35,210
zookeeper acl's I don't think anyone on

00:17:32,120 --> 00:17:36,770
earth has ever done it safely so be

00:17:35,210 --> 00:17:38,150
careful it's better than nothing there's

00:17:36,770 --> 00:17:39,620
also some tools that will do encryption

00:17:38,150 --> 00:17:41,330
the same way they get crypt layers

00:17:39,620 --> 00:17:42,800
encryption on top of get you can layer

00:17:41,330 --> 00:17:44,360
encryption on top of zookeeper if you

00:17:42,800 --> 00:17:46,640
really want to but it's not a great

00:17:44,360 --> 00:17:47,380
solution like I said I'm very active in

00:17:46,640 --> 00:17:48,400
the chef community

00:17:47,380 --> 00:17:49,960
so the next thing I see a lot of he'll

00:17:48,400 --> 00:17:51,490
reach for is chef encrypted data bags

00:17:49,960 --> 00:17:53,950
again it says encrypted on it it makes

00:17:51,490 --> 00:17:55,420
us feel warm and fuzzy but again they

00:17:53,950 --> 00:17:57,220
are asymmetric system so they have the

00:17:55,420 --> 00:17:58,630
same problem I mentioned before it's

00:17:57,220 --> 00:18:00,850
Turtles all the way down you can't just

00:17:58,630 --> 00:18:02,500
solve key management by saying do this

00:18:00,850 --> 00:18:06,430
via your existing key management

00:18:02,500 --> 00:18:07,690
solution ansible vault is a similar tool

00:18:06,430 --> 00:18:09,340
to encrypt data bags but it takes

00:18:07,690 --> 00:18:10,750
advantage of ansibles push-based nature

00:18:09,340 --> 00:18:12,610
so the key instead of having to be on

00:18:10,750 --> 00:18:13,810
every target machine you only need the

00:18:12,610 --> 00:18:15,700
decryption key on the developer

00:18:13,810 --> 00:18:17,380
workstation running the push which is

00:18:15,700 --> 00:18:18,760
better but it's still the same problem

00:18:17,380 --> 00:18:20,410
how does that key get to the developer

00:18:18,760 --> 00:18:21,940
workstation I don't know they copy that

00:18:20,410 --> 00:18:25,390
of a wiki somewhere that's probably not

00:18:21,940 --> 00:18:27,340
a great solution yes that a lot of

00:18:25,390 --> 00:18:30,130
people are joking but that is that is a

00:18:27,340 --> 00:18:31,630
thing that happens EML is the closest

00:18:30,130 --> 00:18:33,250
analogue to encrypted data bags ansible

00:18:31,630 --> 00:18:34,780
vault for the puppet world a key

00:18:33,250 --> 00:18:35,950
difference though is that puppet does

00:18:34,780 --> 00:18:38,050
all of the encryption and decryption

00:18:35,950 --> 00:18:40,540
management on the puppet master server

00:18:38,050 --> 00:18:42,040
itself so whereas before we were doing

00:18:40,540 --> 00:18:44,320
what I showed in that little diagram of

00:18:42,040 --> 00:18:46,000
the the encrypted blobs are just getting

00:18:44,320 --> 00:18:48,370
synced out and it depends on where we

00:18:46,000 --> 00:18:50,380
send the keys to control access with

00:18:48,370 --> 00:18:52,240
here ie a mole and with trusted

00:18:50,380 --> 00:18:53,770
third-party systems in general we are

00:18:52,240 --> 00:18:55,300
giving it all of the secrets so the

00:18:53,770 --> 00:18:56,710
puppet master can get every secret in

00:18:55,300 --> 00:18:58,750
our entire infrastructure and we are

00:18:56,710 --> 00:19:00,490
trusting its internal access controls to

00:18:58,750 --> 00:19:03,670
only hand that secret out to the places

00:19:00,490 --> 00:19:05,050
that we designate so anytime you are

00:19:03,670 --> 00:19:06,370
using this kind of trusted third party

00:19:05,050 --> 00:19:07,420
system and most secrets management

00:19:06,370 --> 00:19:09,340
platforms we're talking about from this

00:19:07,420 --> 00:19:10,570
point forward are one of these always

00:19:09,340 --> 00:19:14,350
gut check your faith in its internal

00:19:10,570 --> 00:19:16,180
access controls another chef specific

00:19:14,350 --> 00:19:17,890
tool is called chef vault no relation

00:19:16,180 --> 00:19:19,720
ansible vault this one takes advantage

00:19:17,890 --> 00:19:21,430
of the fact that Chef already uses RSA

00:19:19,720 --> 00:19:22,720
key pairs for API authentication and

00:19:21,430 --> 00:19:26,110
uses those to build a key management

00:19:22,720 --> 00:19:28,360
system again the the underlying problem

00:19:26,110 --> 00:19:29,920
is that Chef keys chef API keys are

00:19:28,360 --> 00:19:31,120
still a secret and there is no real

00:19:29,920 --> 00:19:33,280
management structure in place for those

00:19:31,120 --> 00:19:34,930
anyone here he is chef have you ever

00:19:33,280 --> 00:19:38,770
rotated your client keys or do you even

00:19:34,930 --> 00:19:40,330
know how to do that all right so let's

00:19:38,770 --> 00:19:42,550
let's talk a little bit more about pre

00:19:40,330 --> 00:19:44,740
encryption versus non pre encryption

00:19:42,550 --> 00:19:46,030
systems so in a pre encryption framework

00:19:44,740 --> 00:19:48,370
which is most of the ones that we've

00:19:46,030 --> 00:19:50,740
seen so far we are going to generate

00:19:48,370 --> 00:19:52,270
some kind of encrypted blob we are going

00:19:50,740 --> 00:19:55,330
to copy the key only to the servers that

00:19:52,270 --> 00:19:56,560
should have access we are going to make

00:19:55,330 --> 00:19:57,820
the encrypted blob available so we

00:19:56,560 --> 00:19:59,350
assume that basically everyone can

00:19:57,820 --> 00:20:00,670
access the encrypted blob maybe not

00:19:59,350 --> 00:20:01,120
everyone in the universe but we put it

00:20:00,670 --> 00:20:03,490
in a private

00:20:01,120 --> 00:20:04,900
git repository a private s3 bucket we

00:20:03,490 --> 00:20:06,850
generally don't have strong access

00:20:04,900 --> 00:20:08,680
controls over the encrypted blob because

00:20:06,850 --> 00:20:11,740
only the people that have the key can

00:20:08,680 --> 00:20:14,290
decrypt it makes sense yes as opposed to

00:20:11,740 --> 00:20:17,380
a trusted third party where we have a

00:20:14,290 --> 00:20:19,330
secret we assign some kind of policy to

00:20:17,380 --> 00:20:20,770
it in this case we're saying only B and

00:20:19,330 --> 00:20:22,420
C should have access to it we might

00:20:20,770 --> 00:20:24,700
encrypt it in flight to the trusted

00:20:22,420 --> 00:20:27,490
third party using gpg or HTTPS or

00:20:24,700 --> 00:20:29,290
something like that but at its heart the

00:20:27,490 --> 00:20:32,290
trusted third party system has access to

00:20:29,290 --> 00:20:34,750
the secrets in plain text and we trust

00:20:32,290 --> 00:20:37,150
that it will only do what we tell it so

00:20:34,750 --> 00:20:39,070
that it will give access to B and C but

00:20:37,150 --> 00:20:40,600
not too d so that's a trusted third

00:20:39,070 --> 00:20:42,130
party system versus a pre encryption

00:20:40,600 --> 00:20:43,720
system most of the system's we've seen

00:20:42,130 --> 00:20:45,340
so far are pre encryption based except

00:20:43,720 --> 00:20:46,630
for here a EML now we're going to look

00:20:45,340 --> 00:20:48,520
at more trust at their party systems

00:20:46,630 --> 00:20:50,679
which is more of the standard for

00:20:48,520 --> 00:20:52,360
secrets management platforms so hash

00:20:50,679 --> 00:20:54,160
skort vault is a relative new kid on the

00:20:52,360 --> 00:20:56,170
block but it's making a lot of waves in

00:20:54,160 --> 00:20:58,059
secrets management world no relation to

00:20:56,170 --> 00:20:59,559
ansible vault or chef vault it's just

00:20:58,059 --> 00:21:01,059
they all use the same name it's a

00:20:59,559 --> 00:21:01,990
dedicated secrets management platform so

00:21:01,059 --> 00:21:04,450
it has all the features you'd expect

00:21:01,990 --> 00:21:06,550
from a secrets management tool granular

00:21:04,450 --> 00:21:08,170
ACLs high quality audit logs modular

00:21:06,550 --> 00:21:09,520
backends all that kind of stuff well as

00:21:08,170 --> 00:21:11,380
the best of breed auto rotation system

00:21:09,520 --> 00:21:13,270
for fast secrets if you take nothing

00:21:11,380 --> 00:21:14,410
else away from this talk this is the one

00:21:13,270 --> 00:21:17,980
I would recommend that you look into

00:21:14,410 --> 00:21:19,809
probably key Wiz is similar it's a

00:21:17,980 --> 00:21:22,120
little bit older has a more limited data

00:21:19,809 --> 00:21:23,620
model but because of that it's a lot

00:21:22,120 --> 00:21:26,350
more battle-tested there's a lot fewer

00:21:23,620 --> 00:21:28,030
runtime configurations it excels at

00:21:26,350 --> 00:21:29,920
managing key-based secrets as the name

00:21:28,030 --> 00:21:31,090
might imply you can use it for passwords

00:21:29,920 --> 00:21:33,250
and tokens but that's not really the

00:21:31,090 --> 00:21:34,360
point it also has an integration tool

00:21:33,250 --> 00:21:37,690
called q as if s that I'll talk about

00:21:34,360 --> 00:21:39,970
moment my personal recommendation for a

00:21:37,690 --> 00:21:42,100
lot of people that are on pure AWS is to

00:21:39,970 --> 00:21:44,950
just store stuff in a private s3 buckets

00:21:42,100 --> 00:21:48,160
this uses the Amazon I am role system to

00:21:44,950 --> 00:21:50,110
control access I am is a little bit hard

00:21:48,160 --> 00:21:52,450
to get used to and this requires that

00:21:50,110 --> 00:21:54,910
you are entirely AWS based and will

00:21:52,450 --> 00:21:57,300
never not be in AWS based but it's

00:21:54,910 --> 00:21:59,679
probably the easiest way to get started

00:21:57,300 --> 00:22:00,820
amazon KMS is not actually a secrets

00:21:59,679 --> 00:22:02,170
management tool but it's going to be

00:22:00,820 --> 00:22:04,720
used by the next couple that i talked

00:22:02,170 --> 00:22:06,700
about it's a best be described as a key

00:22:04,720 --> 00:22:09,100
escrow system you don't really store

00:22:06,700 --> 00:22:11,140
secrets in amazon kms instead you store

00:22:09,100 --> 00:22:13,600
those keys that we we kept showing those

00:22:11,140 --> 00:22:14,950
blue boxes and all the diagrams the key

00:22:13,600 --> 00:22:16,750
lives inside kms

00:22:14,950 --> 00:22:18,790
and you can get permission to use it to

00:22:16,750 --> 00:22:22,330
encrypt and decrypt data but it doesn't

00:22:18,790 --> 00:22:24,490
actually store data again KMS is linked

00:22:22,330 --> 00:22:26,530
into the Amazon ecosystem if you use KMS

00:22:24,490 --> 00:22:29,530
for any tool that uses KMS you have to

00:22:26,530 --> 00:22:31,870
be on amazon forever for always so

00:22:29,530 --> 00:22:34,630
sneaker is a tool again it's built on

00:22:31,870 --> 00:22:37,390
KMS but it uses s3 for the backend

00:22:34,630 --> 00:22:39,220
storage it's a command-line tool it

00:22:37,390 --> 00:22:41,050
builds a more complete secrets

00:22:39,220 --> 00:22:42,400
management experience but being a

00:22:41,050 --> 00:22:46,390
command-line tool it's a little bit hard

00:22:42,400 --> 00:22:48,130
to do automated access as compared to

00:22:46,390 --> 00:22:50,620
confidant which is a more complete

00:22:48,130 --> 00:22:52,570
solution i would say that uses DynamoDB

00:22:50,620 --> 00:22:54,880
as the storage back end but it provides

00:22:52,570 --> 00:22:56,290
an API it's also got a nice versioning

00:22:54,880 --> 00:22:58,210
and history systems that you can see

00:22:56,290 --> 00:23:01,120
what when secrets change their values

00:22:58,210 --> 00:23:03,820
and stuff like that and then tour so

00:23:01,120 --> 00:23:05,260
we're back to command line tools but

00:23:03,820 --> 00:23:08,020
this one's a little bit nicer in that it

00:23:05,260 --> 00:23:11,710
allows gpg instead of KMS so you can use

00:23:08,020 --> 00:23:14,140
this on non amazon systems or sop's from

00:23:11,710 --> 00:23:16,270
mozilla which uses either KMS or gpg

00:23:14,140 --> 00:23:18,880
with both of these gpg based tools you

00:23:16,270 --> 00:23:20,860
should keep in mind gpg is by neckbeards

00:23:18,880 --> 00:23:23,920
for neckbeards i say as the the bearer

00:23:20,860 --> 00:23:25,360
of a neckbeard it's not impossible to do

00:23:23,920 --> 00:23:26,890
large-scale automated secrets

00:23:25,360 --> 00:23:29,080
distribution key distribution and

00:23:26,890 --> 00:23:31,450
management with gpg but it's also not

00:23:29,080 --> 00:23:33,180
easy so expect a little bit of pain and

00:23:31,450 --> 00:23:35,590
dealing with that if you go that route

00:23:33,180 --> 00:23:38,140
Red October from cloudflare is a little

00:23:35,590 --> 00:23:39,970
bit different it is an online secrets

00:23:38,140 --> 00:23:41,890
management platform but it's built

00:23:39,970 --> 00:23:42,670
specifically for cold storage so we

00:23:41,890 --> 00:23:44,680
talked about this a little bit before

00:23:42,670 --> 00:23:46,750
these are secrets that are long-term

00:23:44,680 --> 00:23:48,250
storage but you don't need them on a

00:23:46,750 --> 00:23:50,110
regular basis so for instance you hate

00:23:48,250 --> 00:23:52,180
to be asked master password Red October

00:23:50,110 --> 00:23:54,310
does this nice thing called key split

00:23:52,180 --> 00:23:56,020
you can it's it's like in the old movies

00:23:54,310 --> 00:23:57,940
where you turn two keys at the same time

00:23:56,020 --> 00:23:59,860
to launch the nuclear missile except

00:23:57,940 --> 00:24:02,260
instead of being two of two you can say

00:23:59,860 --> 00:24:05,290
that a secret is 3 of 5 or 4 of 5 or

00:24:02,260 --> 00:24:08,020
whatever the the threshold until so if

00:24:05,290 --> 00:24:10,270
anyone laptop is compromised or one

00:24:08,020 --> 00:24:11,320
person goes rogue you don't need to

00:24:10,270 --> 00:24:14,920
worry about them being able to get

00:24:11,320 --> 00:24:16,420
access to everything presented for

00:24:14,920 --> 00:24:18,460
completeness barbican was supposed to be

00:24:16,420 --> 00:24:21,000
the OpenStack equivalent amazon KMS but

00:24:18,460 --> 00:24:23,380
it's pining for the fjords forever sorry

00:24:21,000 --> 00:24:24,820
i mentioned Kandra specifically because

00:24:23,380 --> 00:24:27,280
i see the whole bunch but there's a lot

00:24:24,820 --> 00:24:28,490
of similar tools in general you should

00:24:27,280 --> 00:24:30,230
be very critical of

00:24:28,490 --> 00:24:32,390
closed source or proprietary secrets

00:24:30,230 --> 00:24:34,490
management systems in security if you

00:24:32,390 --> 00:24:36,170
cannot verify somebody's claims consider

00:24:34,490 --> 00:24:37,700
them to be false that doesn't

00:24:36,170 --> 00:24:39,380
necessarily mean that they're bad but

00:24:37,700 --> 00:24:40,700
you should be plenty of paranoid around

00:24:39,380 --> 00:24:45,380
anyone selling you closed source

00:24:40,700 --> 00:24:46,940
solutions and then the biggest gun so h

00:24:45,380 --> 00:24:49,280
SMS are dedicated pieces of hardware

00:24:46,940 --> 00:24:50,990
they store a key in hardware in a way

00:24:49,280 --> 00:24:52,340
that cannot be extracted short of

00:24:50,990 --> 00:24:55,550
getting out an electron microscope in a

00:24:52,340 --> 00:24:57,350
big vat of acid HS m's themselves are

00:24:55,550 --> 00:24:58,970
very expensive except for t pm's which

00:24:57,350 --> 00:25:00,440
are their baby brothers that are built

00:24:58,970 --> 00:25:01,760
into most server motherboards these days

00:25:00,440 --> 00:25:03,440
but that does still mean that you need

00:25:01,760 --> 00:25:05,540
be running real hardware and not in the

00:25:03,440 --> 00:25:07,940
cloud amazon will happily lease you

00:25:05,540 --> 00:25:11,750
cloud h SMS for only sixteen thousand

00:25:07,940 --> 00:25:13,820
dollars a month as that indicates h SMS

00:25:11,750 --> 00:25:15,770
are very expensive but if used correctly

00:25:13,820 --> 00:25:17,630
they're also basically unbreakable

00:25:15,770 --> 00:25:20,480
except that bugs are not unheard of in

00:25:17,630 --> 00:25:21,679
their firmware so there's a lot of them

00:25:20,480 --> 00:25:23,390
available and i don't have time to go

00:25:21,679 --> 00:25:24,830
into all the details so if you go this

00:25:23,390 --> 00:25:28,160
route expects to spend a lot of money on

00:25:24,830 --> 00:25:29,540
consultants all right through all of

00:25:28,160 --> 00:25:32,000
this we keep dancing around the really

00:25:29,540 --> 00:25:33,800
hard problem of Secrets management deep

00:25:32,000 --> 00:25:35,360
down any secrets management system needs

00:25:33,800 --> 00:25:37,040
to establish an identity relationship

00:25:35,360 --> 00:25:39,290
between the thing requesting secrets and

00:25:37,040 --> 00:25:41,290
the thing managing secrets this is in

00:25:39,290 --> 00:25:43,910
the parlance called secure introduction

00:25:41,290 --> 00:25:45,410
so this is the idea that i need to

00:25:43,910 --> 00:25:46,610
authenticate to the secrets management

00:25:45,410 --> 00:25:47,900
platform so that i can get my

00:25:46,610 --> 00:25:50,240
information to authenticate to everyone

00:25:47,900 --> 00:25:51,740
else that's cool except again we have

00:25:50,240 --> 00:25:53,929
this turtle problem of how do we do

00:25:51,740 --> 00:25:55,970
secure introduction when we don't have

00:25:53,929 --> 00:25:57,590
an existing key management solution in a

00:25:55,970 --> 00:26:00,500
lot of cases this boils down to i'm

00:25:57,590 --> 00:26:02,510
going to SCP a token file to whoever

00:26:00,500 --> 00:26:03,920
answers at a given IP address and i'm

00:26:02,510 --> 00:26:06,230
going to assume that the correct person

00:26:03,920 --> 00:26:08,630
picked up that IP connection that ssh

00:26:06,230 --> 00:26:10,370
connection some clouds do have better

00:26:08,630 --> 00:26:11,990
security reduction frameworks baked into

00:26:10,370 --> 00:26:13,490
them so amazon for example has the

00:26:11,990 --> 00:26:16,550
instance identity document which is a

00:26:13,490 --> 00:26:18,350
signed blob that the amazon metadata

00:26:16,550 --> 00:26:19,820
service can provide you that you can use

00:26:18,350 --> 00:26:23,059
to authenticate to things like hash core

00:26:19,820 --> 00:26:25,760
vault google cloud has a key signature

00:26:23,059 --> 00:26:27,380
system Emma Asher has the azure key

00:26:25,760 --> 00:26:30,860
management system OpenStack currently

00:26:27,380 --> 00:26:33,950
has nothing if you have to go down this

00:26:30,860 --> 00:26:35,360
route check what is available and and

00:26:33,950 --> 00:26:38,330
see if you can use better things than

00:26:35,360 --> 00:26:40,429
just sa Qing token files around and as a

00:26:38,330 --> 00:26:42,390
corollary if you take it as a given that

00:26:40,429 --> 00:26:45,060
you need to do secure introduction you

00:26:42,390 --> 00:26:47,910
sometimes sorry skip the actual secrets

00:26:45,060 --> 00:26:49,740
portion of the of the event some tools

00:26:47,910 --> 00:26:51,930
like my sequel and postgres allow you to

00:26:49,740 --> 00:26:53,790
use as a TLS client certificates fourth

00:26:51,930 --> 00:26:55,890
occation directly as talked about before

00:26:53,790 --> 00:26:59,280
when you've got a public/private key

00:26:55,890 --> 00:27:00,960
pair sorry public keys are not actually

00:26:59,280 --> 00:27:02,880
secrets they need to be dealt with very

00:27:00,960 --> 00:27:05,660
carefully but you don't necessarily need

00:27:02,880 --> 00:27:08,160
to keep them radioactive in the same way

00:27:05,660 --> 00:27:11,850
alright let's look at in the last couple

00:27:08,160 --> 00:27:21,090
minutes one integrations into some other

00:27:11,850 --> 00:27:22,050
tools so Oh much better with a whole

00:27:21,090 --> 00:27:24,210
bunch of these things that I mentioned

00:27:22,050 --> 00:27:27,060
they have api's so therefore they have

00:27:24,210 --> 00:27:30,900
API clients hash court vault and KMS are

00:27:27,060 --> 00:27:33,780
the two easiest to deal with hash core

00:27:30,900 --> 00:27:35,700
vault has the HVAC library and AMS has

00:27:33,780 --> 00:27:37,710
the boto core library you can do things

00:27:35,700 --> 00:27:42,080
like use these directly from your django

00:27:37,710 --> 00:27:44,340
config file another option sorry is to

00:27:42,080 --> 00:27:46,050
deal with this in the config management

00:27:44,340 --> 00:27:48,420
layer so something like salt ansible or

00:27:46,050 --> 00:27:50,520
chef you can have that deal with the API

00:27:48,420 --> 00:27:53,790
calls or run the commands to bake out a

00:27:50,520 --> 00:27:55,560
Django config file relatively unique

00:27:53,790 --> 00:27:57,510
feature of kiwis is that it ships with a

00:27:55,560 --> 00:27:59,760
fuse file system driver to allow you to

00:27:57,510 --> 00:28:01,200
access secrets directly as files this is

00:27:59,760 --> 00:28:03,000
less useful for Django where we have a

00:28:01,200 --> 00:28:05,790
lot of control but for example with

00:28:03,000 --> 00:28:08,190
engine X you want it to read its TLS key

00:28:05,790 --> 00:28:10,350
out of the file system you can instead

00:28:08,190 --> 00:28:12,420
pointed at a Q is FS path and it will

00:28:10,350 --> 00:28:14,190
lead it secret out of key Wiz directly

00:28:12,420 --> 00:28:16,320
without ever going into the disk it'll

00:28:14,190 --> 00:28:17,910
buffer it purely in RAM so it allows you

00:28:16,320 --> 00:28:19,320
to do direct integrations with a lot of

00:28:17,910 --> 00:28:22,710
external tools where you don't want to

00:28:19,320 --> 00:28:24,450
modify the tool console templates is

00:28:22,710 --> 00:28:26,490
similar to the idea of doing this in

00:28:24,450 --> 00:28:29,070
config management except it's built

00:28:26,490 --> 00:28:31,680
directly into the the console and vault

00:28:29,070 --> 00:28:33,240
ecosystem from hash Corp even if you're

00:28:31,680 --> 00:28:34,920
using something like salt ansible or

00:28:33,240 --> 00:28:38,070
chef this can still be very useful to

00:28:34,920 --> 00:28:39,450
run your secrets rotation at a faster

00:28:38,070 --> 00:28:41,820
rate than you want to deal with say

00:28:39,450 --> 00:28:43,740
ansible push so you're running ansible

00:28:41,820 --> 00:28:45,360
deploys every day but you want your

00:28:43,740 --> 00:28:48,180
secrets managed to rotate every 15

00:28:45,360 --> 00:28:49,770
minutes so this can still be useful like

00:28:48,180 --> 00:28:51,780
council templates and console allows

00:28:49,770 --> 00:28:52,980
ejecting vault data directly into

00:28:51,780 --> 00:28:54,930
environment variables instead of

00:28:52,980 --> 00:28:56,100
template files I said before I don't

00:28:54,930 --> 00:28:58,890
like this approach but you

00:28:56,100 --> 00:29:01,559
no it's available and summon is similar

00:28:58,890 --> 00:29:03,390
to end console but it works with s3

00:29:01,559 --> 00:29:07,230
conjure and for some reason local key

00:29:03,390 --> 00:29:09,780
winnings so in summary ah check your

00:29:07,230 --> 00:29:11,520
privilege sorry check your privilege in

00:29:09,780 --> 00:29:13,169
your audit trail pick your types and

00:29:11,520 --> 00:29:15,000
temperatures of Secrets think about your

00:29:13,169 --> 00:29:16,590
attack surface and have a disaster plan

00:29:15,000 --> 00:29:27,120
for when things go wrong thanks very

00:29:16,590 --> 00:29:28,320
much we've got room for like one or two

00:29:27,120 --> 00:29:29,880
questions yeah we only in the time for

00:29:28,320 --> 00:29:37,020
about one or two questions so please

00:29:29,880 --> 00:29:37,799
form an orderly rebel yeah um I'll you

00:29:37,020 --> 00:29:41,010
were gone through all the different

00:29:37,799 --> 00:29:42,630
different tools of use it's everyone

00:29:41,010 --> 00:29:44,909
that you would say this is the one you

00:29:42,630 --> 00:29:46,409
should use and I'm a sauna

00:29:44,909 --> 00:29:48,179
infrastructure it can be assumed there

00:29:46,409 --> 00:29:50,340
yeah so if you were on Amazon the

00:29:48,179 --> 00:29:52,650
private s3 bucket approach is the one I

00:29:50,340 --> 00:29:54,659
recommend if you're using chef I've got

00:29:52,650 --> 00:29:56,520
a tool called citadel which isn't really

00:29:54,659 --> 00:29:58,289
a tool it's just a read be on how to

00:29:56,520 --> 00:30:01,289
configure all this and a little tiny bit

00:29:58,289 --> 00:30:03,360
of Ruby code to glue it all together if

00:30:01,289 --> 00:30:05,809
you're not all on Amazon probably half

00:30:03,360 --> 00:30:05,809

YouTube URL: https://www.youtube.com/watch?v=Ko1N-T9UkhQ


