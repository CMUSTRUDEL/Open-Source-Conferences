Title: Stop and smell the Djangos by Richard Shea
Publication date: 2015-08-14
Playlist: PyCon Australia 2015 Django Miniconf
Description: 
	A great strength of Django is how much functionality there is baked in without the developer doing anything to obtain it.

A corollary of this is that there’s a great deal of functionality in Django which the average developer is hardly aware exists. The happy dev is pleased to ignore the problems that have been solved for them as their requests rush in and their responses rush out.

There's Middleware, Signals, Authentication, Caching, Internationalization, Serialization and ... a lot more and that's just the core framework.

In this talk we’re going to stop and admire the view .

We’ll demonstrate the effects that these core aspects of Django have on a request - response cycle by reviewing how they work and feeling the pain of what life would be like without them.

My talk is aimed at the average Django dev who has been happy to ignore what goes on under the hood. By better understanding the machinery that Django relies on it gives us all the opportunity to exploit it in our work and, of course, to impress our colleagues !


PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:09,800 --> 00:00:12,980
thank you

00:00:18,080 --> 00:00:25,110
good I'm not quite sure this works does

00:00:21,270 --> 00:00:30,210
it you know you can hear me good ok so

00:00:25,110 --> 00:00:34,680
um my name is Richard J and I live in

00:00:30,210 --> 00:00:35,910
wellington in new zealand and i'm most

00:00:34,680 --> 00:00:39,989
of the week i'm a freelance software

00:00:35,910 --> 00:00:41,699
developer and i work with companies in

00:00:39,989 --> 00:00:44,640
new zealand and australia and further

00:00:41,699 --> 00:00:48,239
afield and some of it on Django's some

00:00:44,640 --> 00:00:55,070
on other stuff and a reasonable bit of

00:00:48,239 --> 00:00:58,129
it on python i'm pleased to say and the

00:00:55,070 --> 00:01:00,600
motivation for my talk today is that

00:00:58,129 --> 00:01:02,670
when i first worked on django which is

00:01:00,600 --> 00:01:04,470
probably about three years ago now i was

00:01:02,670 --> 00:01:06,090
working with the team of people they

00:01:04,470 --> 00:01:11,640
were all very experienced it was quite a

00:01:06,090 --> 00:01:13,440
complex project and i sort of jumped in

00:01:11,640 --> 00:01:15,930
and there was a lot of stuff that i

00:01:13,440 --> 00:01:19,170
could ignore because there was lots of

00:01:15,930 --> 00:01:22,380
stuff to do and I was quite happy to

00:01:19,170 --> 00:01:27,060
black box some of it and just sort of

00:01:22,380 --> 00:01:29,609
creatures there be dragons and and I

00:01:27,060 --> 00:01:31,350
obviously as time went by I moved on to

00:01:29,609 --> 00:01:33,689
other projects and became more aware of

00:01:31,350 --> 00:01:38,460
the stuff that I had previously been

00:01:33,689 --> 00:01:41,159
able to ignore but it it just sort of

00:01:38,460 --> 00:01:44,399
made think that there's stuff in Django

00:01:41,159 --> 00:01:45,899
which when you do a start project you

00:01:44,399 --> 00:01:48,210
don't actually need to think about at

00:01:45,899 --> 00:01:50,280
all you can get stuff up on the screen

00:01:48,210 --> 00:01:54,109
and you know various bits will work for

00:01:50,280 --> 00:01:58,679
you and and I thought it's worth a

00:01:54,109 --> 00:02:00,990
marking celebrating pointing out just

00:01:58,679 --> 00:02:02,759
certain aspects of Django that you don't

00:02:00,990 --> 00:02:07,109
really need to think about necessarily

00:02:02,759 --> 00:02:09,539
but you you know it's there beneficial

00:02:07,109 --> 00:02:11,850
and worthy of a claim of both to some

00:02:09,539 --> 00:02:13,290
degree it's wonderful held an AVO

00:02:11,850 --> 00:02:18,750
reminds me about things at the worst

00:02:13,290 --> 00:02:21,319
possible moment right so and towards

00:02:18,750 --> 00:02:21,319
that end and

00:02:22,470 --> 00:02:28,320
no not that one I won't thank you tools

00:02:24,930 --> 00:02:31,890
that end I've picked out a few a few

00:02:28,320 --> 00:02:34,020
things from Django that you perhaps can

00:02:31,890 --> 00:02:36,360
don't necessarily need to think about a

00:02:34,020 --> 00:02:38,760
great deal particularly if you're doing

00:02:36,360 --> 00:02:41,040
straightforward projects and I just

00:02:38,760 --> 00:02:42,960
thought we might look at them and see

00:02:41,040 --> 00:02:45,660
how they work and see why they work and

00:02:42,960 --> 00:02:48,540
that type of thing now these are the

00:02:45,660 --> 00:02:50,700
five and although it wasn't actually

00:02:48,540 --> 00:02:54,660
planned this way it works out quite

00:02:50,700 --> 00:02:56,640
nicely because the first three when you

00:02:54,660 --> 00:02:58,380
get onto the last two you begin to see

00:02:56,640 --> 00:03:00,830
the first three getting used in quite a

00:02:58,380 --> 00:03:03,959
sort of constructive sort of manner so

00:03:00,830 --> 00:03:07,830
we'll just step through those and take a

00:03:03,959 --> 00:03:13,380
look at each one of them I phone I've

00:03:07,830 --> 00:03:16,260
good little rose inspired project here

00:03:13,380 --> 00:03:20,730
and we'll take a look at it in the

00:03:16,260 --> 00:03:25,410
context of that it's built in 1.8 Django

00:03:20,730 --> 00:03:28,350
1.8 it's built with Python 3.4 and most

00:03:25,410 --> 00:03:29,790
of the stuff is pretty generic there's

00:03:28,350 --> 00:03:35,880
one or two things that are specific to

00:03:29,790 --> 00:03:39,000
1.8 and just probably what might be

00:03:35,880 --> 00:03:41,550
worth saying that I it was this year

00:03:39,000 --> 00:03:44,459
that I wrote my first Django project in

00:03:41,550 --> 00:03:47,220
Python 3 and I hadn't actually done a

00:03:44,459 --> 00:03:48,690
lot of Python 3 up till then and I was

00:03:47,220 --> 00:03:50,850
quite surprised how painless the whole

00:03:48,690 --> 00:03:52,200
thing was so if you've been holding back

00:03:50,850 --> 00:03:54,209
and you haven't actually got a good

00:03:52,200 --> 00:03:57,299
reason to hold back then perhaps be

00:03:54,209 --> 00:03:58,650
worth trying so a middleware this is how

00:03:57,299 --> 00:04:00,150
most of us the middle where the first

00:03:58,650 --> 00:04:02,519
time we ever used Django it's some sort

00:04:00,150 --> 00:04:06,750
of strange construct in the settings

00:04:02,519 --> 00:04:11,519
file that you you know it's there and

00:04:06,750 --> 00:04:13,049
you think okay just ignore it and as

00:04:11,519 --> 00:04:14,160
long as it works you're quite happy

00:04:13,049 --> 00:04:16,400
there's probably enough stuff other

00:04:14,160 --> 00:04:20,370
stuff you have to think about and

00:04:16,400 --> 00:04:23,610
middleware provides a series of hooks

00:04:20,370 --> 00:04:26,370
where the developer can intervene in the

00:04:23,610 --> 00:04:29,250
request response cycle and plug their

00:04:26,370 --> 00:04:31,830
own code in and do quite radical things

00:04:29,250 --> 00:04:36,810
to the the process of

00:04:31,830 --> 00:04:40,230
the project and I've stolen this little

00:04:36,810 --> 00:04:43,590
diagram here from the from the doc oh so

00:04:40,230 --> 00:04:45,630
you may recognize it but you've got two

00:04:43,590 --> 00:04:49,800
hooks on the way in and three hooks on

00:04:45,630 --> 00:04:51,690
the way out you've got a process request

00:04:49,800 --> 00:04:53,070
for when the request first hits the

00:04:51,690 --> 00:04:56,730
server before anything happens you've

00:04:53,070 --> 00:04:58,500
got process view for when the just

00:04:56,730 --> 00:05:00,840
before the relevant view is about to be

00:04:58,500 --> 00:05:03,270
executed and then on the way out you've

00:05:00,840 --> 00:05:05,190
got a view you've got a process template

00:05:03,270 --> 00:05:08,370
response which fires after the view is

00:05:05,190 --> 00:05:09,810
being completed and presses response

00:05:08,370 --> 00:05:11,820
which fires almost that's the very last

00:05:09,810 --> 00:05:13,980
thing before anything before the content

00:05:11,820 --> 00:05:17,220
was gone and finally you've got one

00:05:13,980 --> 00:05:19,170
which deals with them exceptions in the

00:05:17,220 --> 00:05:20,640
view if you want to get involved at that

00:05:19,170 --> 00:05:22,590
stage you can do something completely

00:05:20,640 --> 00:05:25,800
different in response to an exception

00:05:22,590 --> 00:05:29,660
and also in that diagram we're looking

00:05:25,800 --> 00:05:32,730
at the sum of the provided middleware

00:05:29,660 --> 00:05:36,000
which again you know they Jets generally

00:05:32,730 --> 00:05:38,640
gets left in place some of it will allow

00:05:36,000 --> 00:05:42,870
you to dis a disallow certain user

00:05:38,640 --> 00:05:46,490
agents to support etags for caching will

00:05:42,870 --> 00:05:48,690
allow you to provide session facilities

00:05:46,490 --> 00:05:50,430
the famous cross-site request forgery

00:05:48,690 --> 00:05:55,140
token and all that sort of stuff comes

00:05:50,430 --> 00:05:57,180
out of there and so we'll just have a

00:05:55,140 --> 00:06:00,390
look at how we might actually build our

00:05:57,180 --> 00:06:01,830
own middleware because for all the fact

00:06:00,390 --> 00:06:03,750
that it looks rather arcane when you

00:06:01,830 --> 00:06:08,610
first encounter it it's actually quite

00:06:03,750 --> 00:06:10,650
straightforward and priscilla t to stop

00:06:08,610 --> 00:06:13,320
people getting into it at certain points

00:06:10,650 --> 00:06:15,870
so perhaps we've for some reason or the

00:06:13,320 --> 00:06:17,310
other we might not want to anyone to be

00:06:15,870 --> 00:06:18,660
the good access to it so what we're

00:06:17,310 --> 00:06:25,980
going to do is we're going to redirect

00:06:18,660 --> 00:06:27,960
people and to do that is just a question

00:06:25,980 --> 00:06:30,180
really of creating a python module

00:06:27,960 --> 00:06:34,050
somewhere that within the within your

00:06:30,180 --> 00:06:38,040
project mines them excitingly called

00:06:34,050 --> 00:06:40,620
middleware da pie and and then we have

00:06:38,040 --> 00:06:45,110
to add to that list of middleware there

00:06:40,620 --> 00:06:47,819
and just provide an import path to

00:06:45,110 --> 00:06:50,159
the class that you have within that

00:06:47,819 --> 00:06:53,429
module that's going to provide them the

00:06:50,159 --> 00:06:57,869
relevant member functions our class is

00:06:53,429 --> 00:07:01,019
going to be called going down and within

00:06:57,869 --> 00:07:04,139
going down now wonderful people can read

00:07:01,019 --> 00:07:05,429
this at the back within going down we've

00:07:04,139 --> 00:07:07,349
got we've got a member function called

00:07:05,429 --> 00:07:10,879
process requests so it matches the name

00:07:07,349 --> 00:07:13,529
of the hook that's available to us and

00:07:10,879 --> 00:07:15,329
what this does is it so it's a pretty

00:07:13,529 --> 00:07:16,769
stupid way of providing this facility

00:07:15,329 --> 00:07:17,939
because if the values are hard-coded in

00:07:16,769 --> 00:07:20,129
the settings but don't worry about that

00:07:17,939 --> 00:07:21,929
for a minute and it basically determines

00:07:20,129 --> 00:07:24,299
if the current time is within the tues

00:07:21,929 --> 00:07:27,509
times that the downtime isn't going to

00:07:24,299 --> 00:07:30,479
be in place for and if it is it returns

00:07:27,509 --> 00:07:32,489
an HTTP response redirect so forces the

00:07:30,479 --> 00:07:36,689
users off to that attractive looking

00:07:32,489 --> 00:07:38,489
page we were just looking at now you

00:07:36,689 --> 00:07:40,649
might want to might want to warn the

00:07:38,489 --> 00:07:42,719
users that they are there's going to be

00:07:40,649 --> 00:07:45,449
able to down time so there's another

00:07:42,719 --> 00:07:49,019
place that we can place a hook and to do

00:07:45,449 --> 00:07:53,539
that on one of those three outbound

00:07:49,019 --> 00:07:58,649
hooks we're going to tell the user when

00:07:53,539 --> 00:08:00,869
that downtime is going to occur and to

00:07:58,649 --> 00:08:04,349
do that we've got a process template

00:08:00,869 --> 00:08:08,009
request and it's the hook that fires

00:08:04,349 --> 00:08:10,800
just before the view we work out what

00:08:08,009 --> 00:08:12,179
the time is and if the time is yet to be

00:08:10,800 --> 00:08:17,339
then we start boarding them and it's

00:08:12,179 --> 00:08:20,879
this many seconds to go okay now context

00:08:17,339 --> 00:08:24,659
processes moving on and context

00:08:20,879 --> 00:08:26,099
processors again you first encounter

00:08:24,659 --> 00:08:28,229
them there's a list of them in the

00:08:26,099 --> 00:08:32,789
default project that you make with make

00:08:28,229 --> 00:08:35,579
project and there's a certain amount of

00:08:32,789 --> 00:08:38,189
crossover between context processes and

00:08:35,579 --> 00:08:42,240
the Middle where we just saw for the for

00:08:38,189 --> 00:08:45,870
the template risk response but they're

00:08:42,240 --> 00:08:50,100
quite handy and they this particular one

00:08:45,870 --> 00:08:51,300
we're going to do here oh sorry no let

00:08:50,100 --> 00:08:54,929
me back up a little bit sorry so you

00:08:51,300 --> 00:08:58,320
define the location of a context

00:08:54,929 --> 00:09:03,710
processor within the templates settings

00:08:58,320 --> 00:09:07,580
this is the new 1.8 template setting and

00:09:03,710 --> 00:09:11,910
you specify the path to your module and

00:09:07,580 --> 00:09:14,820
the I've just put stomping on there the

00:09:11,910 --> 00:09:16,980
the pro context processor is going to

00:09:14,820 --> 00:09:18,750
take the that cut the context that

00:09:16,980 --> 00:09:20,910
you've otherwise supplied and it's going

00:09:18,750 --> 00:09:23,900
to add an element to it or multiple

00:09:20,910 --> 00:09:26,250
elements however many you want the

00:09:23,900 --> 00:09:27,570
process of doing that is executed in the

00:09:26,250 --> 00:09:30,810
order that you've defined in that

00:09:27,570 --> 00:09:33,060
settings file so there is a danger that

00:09:30,810 --> 00:09:34,830
if you have multiple contexts process as

00:09:33,060 --> 00:09:37,740
one is going to st. use the same key as

00:09:34,830 --> 00:09:40,470
another so that's what I'm referring to

00:09:37,740 --> 00:09:44,820
there the standard context processes

00:09:40,470 --> 00:09:51,140
tend to do reasonably small tidy little

00:09:44,820 --> 00:09:56,550
things the iat the i18n one will put in

00:09:51,140 --> 00:10:00,590
the the current language the the debug

00:09:56,550 --> 00:10:00,590
provides certain debug information etc

00:10:01,640 --> 00:10:07,920
so yes we want to provide them with a

00:10:04,200 --> 00:10:11,360
suitably flowery message congratulations

00:10:07,920 --> 00:10:14,880
you've been a user for so many years and

00:10:11,360 --> 00:10:17,610
we can do that on the other and another

00:10:14,880 --> 00:10:21,000
method within that same sorry we can do

00:10:17,610 --> 00:10:25,170
that using a function as we defined a

00:10:21,000 --> 00:10:27,540
moment ago and by specifying a

00:10:25,170 --> 00:10:30,150
dictionary which returns whatever value

00:10:27,540 --> 00:10:34,170
we want with the with the key of welcome

00:10:30,150 --> 00:10:36,210
message when we get to a render the

00:10:34,170 --> 00:10:40,410
template that type that tag will be

00:10:36,210 --> 00:10:44,300
available to us and we can spit it out

00:10:40,410 --> 00:10:44,300
wherever it wherever we want to use it

00:10:46,130 --> 00:10:51,150
signals I've got mixed feelings about

00:10:48,810 --> 00:10:53,730
signals actually I put signals in the

00:10:51,150 --> 00:10:55,530
proposal because then I I'd always

00:10:53,730 --> 00:10:57,720
looked at them and thought yeah they're

00:10:55,530 --> 00:11:00,840
kind of interesting the more I looked at

00:10:57,720 --> 00:11:03,720
the boy I thought actually maybe not but

00:11:00,840 --> 00:11:06,690
we'll just have a little look at them

00:11:03,720 --> 00:11:11,500
actually rather than example just

00:11:06,690 --> 00:11:14,170
overview and so signals are good for

00:11:11,500 --> 00:11:16,450
I have the ability that one application

00:11:14,170 --> 00:11:18,700
can shout out to all the other

00:11:16,450 --> 00:11:20,800
applications within a project if you

00:11:18,700 --> 00:11:23,380
want to listen to that signal you can

00:11:20,800 --> 00:11:28,150
turn on a listener and if you don't you

00:11:23,380 --> 00:11:31,350
can just ignore it so if you look upon

00:11:28,150 --> 00:11:34,300
Django as being a infrastructure of

00:11:31,350 --> 00:11:36,640
loosely coupled applications then that's

00:11:34,300 --> 00:11:38,680
a good thing but you've also got

00:11:36,640 --> 00:11:40,060
something that's not very good from a

00:11:38,680 --> 00:11:43,270
computer science point of view so

00:11:40,060 --> 00:11:45,040
there's a bit of whichever way you want

00:11:43,270 --> 00:11:46,810
to go with that I think the general

00:11:45,040 --> 00:11:49,510
feeling is that it's something to be

00:11:46,810 --> 00:11:54,070
avoided in general they are used quite a

00:11:49,510 --> 00:11:57,430
lot internally there's a whole bunch

00:11:54,070 --> 00:12:00,100
that essentially tell you about database

00:11:57,430 --> 00:12:01,450
changes and then there's a pair that

00:12:00,100 --> 00:12:04,090
tell you about when a requests have

00:12:01,450 --> 00:12:06,220
started and finished and then there's a

00:12:04,090 --> 00:12:07,960
set if you're using authorization

00:12:06,220 --> 00:12:10,620
there's a set that get fired when people

00:12:07,960 --> 00:12:10,620
login and logout

00:12:15,970 --> 00:12:20,680
I didn't actually do a demo of this but

00:12:18,009 --> 00:12:26,230
I came across a piece of code that

00:12:20,680 --> 00:12:28,240
provides paypal authorization and so

00:12:26,230 --> 00:12:30,399
it's intended to be installed in your

00:12:28,240 --> 00:12:34,990
project alongside the other applications

00:12:30,399 --> 00:12:36,250
in the project and obviously it's an

00:12:34,990 --> 00:12:37,329
attractive feature of such an

00:12:36,250 --> 00:12:39,550
application that you don't have to

00:12:37,329 --> 00:12:44,230
change your applications too much to may

00:12:39,550 --> 00:12:46,180
use of it so the interactions that one

00:12:44,230 --> 00:12:49,839
has to have with paypal in order to make

00:12:46,180 --> 00:12:51,850
transaction are pretty arcane and these

00:12:49,839 --> 00:12:53,829
guys have wrapped it up inside this

00:12:51,850 --> 00:12:58,810
application you can install it in your

00:12:53,829 --> 00:13:01,000
project and you can then import a form

00:12:58,810 --> 00:13:04,569
into your own project which comes from

00:13:01,000 --> 00:13:07,389
Django paypal they then deal with all

00:13:04,569 --> 00:13:11,170
the unpleasant strangeness that goes on

00:13:07,389 --> 00:13:16,089
dealing with paypal and when they get

00:13:11,170 --> 00:13:18,670
here back prompter can listen to it so

00:13:16,089 --> 00:13:21,040
that's a reasonable use I would have

00:13:18,670 --> 00:13:23,170
thought of such a such a facility I

00:13:21,040 --> 00:13:26,699
think the danger probably lies where

00:13:23,170 --> 00:13:26,699
people start using them for everything

00:13:28,620 --> 00:13:31,620
authentication

00:13:31,850 --> 00:13:36,149
so not all sites want to be available to

00:13:34,889 --> 00:13:37,290
everyone in fact i'd say probably most

00:13:36,149 --> 00:13:40,110
sites didn't want to be available to

00:13:37,290 --> 00:13:41,759
everyone and if that if that's true then

00:13:40,110 --> 00:13:42,990
you've got to work out a subset of the

00:13:41,759 --> 00:13:44,819
population of the world who's going to

00:13:42,990 --> 00:13:48,420
be allowed in and made sure that no one

00:13:44,819 --> 00:13:49,920
else gets in and in addition to that

00:13:48,420 --> 00:13:51,180
once they're in you might want them to

00:13:49,920 --> 00:13:53,610
do certain things and not going to do

00:13:51,180 --> 00:13:55,439
certain other things so there is the

00:13:53,610 --> 00:14:03,600
question of what permissions such a user

00:13:55,439 --> 00:14:05,250
might have the default authorization

00:14:03,600 --> 00:14:07,399
system in Django is pretty

00:14:05,250 --> 00:14:11,189
straightforward there's a pretty rich

00:14:07,399 --> 00:14:12,870
variety of applications that have been

00:14:11,189 --> 00:14:16,740
built by other people to support other

00:14:12,870 --> 00:14:19,019
approaches you can do two-factor

00:14:16,740 --> 00:14:23,129
authentication you can do you who do it

00:14:19,019 --> 00:14:25,199
or whatever in addition I I saw this

00:14:23,129 --> 00:14:28,920
moment which I caught my eye a while

00:14:25,199 --> 00:14:31,589
back it allows you to basically get

00:14:28,920 --> 00:14:33,839
emailed a one-time password and that

00:14:31,589 --> 00:14:39,420
plugs into the authorization system and

00:14:33,839 --> 00:14:44,120
yeah so a usual authorization we go back

00:14:39,420 --> 00:14:49,390
to go back to Al absolutely

00:14:44,120 --> 00:14:49,390
and include certain modules

00:14:53,830 --> 00:15:03,970
and sorry icon yeah and the contra

00:15:01,660 --> 00:15:06,760
provides a decorator which is logon

00:15:03,970 --> 00:15:08,890
required and so if you go try to make

00:15:06,760 --> 00:15:11,410
use of that URL you'll find that you're

00:15:08,890 --> 00:15:14,380
either looking at this screen or this

00:15:11,410 --> 00:15:16,930
screen and the and that's really all you

00:15:14,380 --> 00:15:18,730
need to do to enforce that now you can

00:15:16,930 --> 00:15:20,500
achieve the same thing by putting code

00:15:18,730 --> 00:15:23,080
into the function but this is a very

00:15:20,500 --> 00:15:24,910
neat way of providing that facility and

00:15:23,080 --> 00:15:26,620
also quite a visible way as well when

00:15:24,910 --> 00:15:27,970
you're paging through code you don't

00:15:26,620 --> 00:15:30,010
have to start digging into the code you

00:15:27,970 --> 00:15:33,160
can just look is the decorator there or

00:15:30,010 --> 00:15:36,130
not I didn't mention that there's a

00:15:33,160 --> 00:15:37,720
place in settings which specifies where

00:15:36,130 --> 00:15:40,210
you should go if you're not logged on

00:15:37,720 --> 00:15:42,760
and so in this case we've set it up

00:15:40,210 --> 00:15:46,570
together this particular view but you

00:15:42,760 --> 00:15:48,280
can go anywhere you like and you can do

00:15:46,570 --> 00:15:50,590
something similar with class-based views

00:15:48,280 --> 00:15:53,110
it's not exactly the same because of the

00:15:50,590 --> 00:15:54,700
mechanics of class-based views but you

00:15:53,110 --> 00:15:55,990
can tell it that you don't want people

00:15:54,700 --> 00:16:00,070
to get in there and less so but they're

00:15:55,990 --> 00:16:01,420
logged on so having decided that people

00:16:00,070 --> 00:16:02,590
are logged on are not logged on you then

00:16:01,420 --> 00:16:06,550
have to decide whether or not you want

00:16:02,590 --> 00:16:09,400
them to do anything and when the

00:16:06,550 --> 00:16:12,310
authorization system in Django provides

00:16:09,400 --> 00:16:16,000
three default permissions for every

00:16:12,310 --> 00:16:18,490
model in the system to allowing you to

00:16:16,000 --> 00:16:19,960
add delete or update and unless you're a

00:16:18,490 --> 00:16:21,220
super user you have to go and get those

00:16:19,960 --> 00:16:26,490
permission have to be given those

00:16:21,220 --> 00:16:30,250
permissions having once been given them

00:16:26,490 --> 00:16:33,520
you can then decorate and the dispatch

00:16:30,250 --> 00:16:36,940
method of a class-based view with the

00:16:33,520 --> 00:16:38,200
relevant permission and if the users got

00:16:36,940 --> 00:16:44,130
it then that's fine and if they don't

00:16:38,200 --> 00:16:44,130
then they're back to the login yeah

00:16:52,230 --> 00:16:56,340
right so as I mentioned there are three

00:16:54,960 --> 00:16:57,750
default permissions but actually you

00:16:56,340 --> 00:17:01,770
might want permissions for all sorts of

00:16:57,750 --> 00:17:04,290
reasons so you can use the an attribute

00:17:01,770 --> 00:17:06,240
of the metaclass to specify your own

00:17:04,290 --> 00:17:09,300
permissions and once you've done a my

00:17:06,240 --> 00:17:11,250
great and you've actually gone in and

00:17:09,300 --> 00:17:15,000
physically actually allowed the use of

00:17:11,250 --> 00:17:16,650
that permission then once again that can

00:17:15,000 --> 00:17:18,930
be used as a way of determining whether

00:17:16,650 --> 00:17:21,230
someone should be allowed to use a view

00:17:18,930 --> 00:17:21,230
or not

00:17:23,850 --> 00:17:27,600
just like that so that was that was the

00:17:26,100 --> 00:17:32,429
display view and now they're allowed to

00:17:27,600 --> 00:17:33,840
see it oh I mentioned groups for well

00:17:32,429 --> 00:17:35,280
groups are pretty straightforward groups

00:17:33,840 --> 00:17:36,780
are a tidy way of putting together a

00:17:35,280 --> 00:17:38,610
whole bunch of emissions into one place

00:17:36,780 --> 00:17:41,610
which generally is what you exactly what

00:17:38,610 --> 00:17:43,830
you would want to do so here we've got a

00:17:41,610 --> 00:17:47,539
rose up data and we've given them a

00:17:43,830 --> 00:17:47,539
whole bunch of permissions around roses

00:17:52,310 --> 00:18:00,240
this is not part of django but it

00:17:56,220 --> 00:18:01,950
interests me it's one thing to say that

00:18:00,240 --> 00:18:03,720
someone might or might not be to add a

00:18:01,950 --> 00:18:07,350
particular type of model or they might

00:18:03,720 --> 00:18:09,930
be delete or update it but at a row base

00:18:07,350 --> 00:18:13,230
at will in database terms that are obeys

00:18:09,930 --> 00:18:15,770
permissions is not something that's in

00:18:13,230 --> 00:18:22,050
the system has it currently stands

00:18:15,770 --> 00:18:26,100
there's a package Django guardian which

00:18:22,050 --> 00:18:28,440
does provide that functionality it

00:18:26,100 --> 00:18:31,500
determines that you have a permission

00:18:28,440 --> 00:18:33,600
and it also determines what objects are

00:18:31,500 --> 00:18:36,840
you can actually make use of that

00:18:33,600 --> 00:18:38,940
permission with so I thought I thought

00:18:36,840 --> 00:18:40,860
that was an interesting extension I'm

00:18:38,940 --> 00:18:43,260
not sure I've never used it so I don't

00:18:40,860 --> 00:18:48,630
know quite how what the ins and out of

00:18:43,260 --> 00:18:54,060
it might be now internationalization I

00:18:48,630 --> 00:18:56,400
like this one I Jews localization before

00:18:54,060 --> 00:19:00,870
but I've never actually dubbed it a real

00:18:56,400 --> 00:19:03,660
foreign language translation stuff I had

00:19:00,870 --> 00:19:07,010
a go for this presentation and it's

00:19:03,660 --> 00:19:09,600
actually really is kind of kind of cute

00:19:07,010 --> 00:19:13,080
so the effect we're really looking for

00:19:09,600 --> 00:19:15,570
is you from you've got English lap well

00:19:13,080 --> 00:19:17,510
sorry you got any language text but

00:19:15,570 --> 00:19:22,410
you've got your own language text and

00:19:17,510 --> 00:19:26,190
you might then want to display the same

00:19:22,410 --> 00:19:28,110
text in a different language based upon

00:19:26,190 --> 00:19:32,430
some criteria are associated with the

00:19:28,110 --> 00:19:37,040
user so here the roses are in French and

00:19:32,430 --> 00:19:39,240
here the roses are in German and this is

00:19:37,040 --> 00:19:41,510
you know one of the things I found

00:19:39,240 --> 00:19:46,400
intriguing about it is this is

00:19:41,510 --> 00:19:48,990
surprisingly easy to do on a basic level

00:19:46,400 --> 00:19:51,210
I've no doubt that the but when you get

00:19:48,990 --> 00:19:54,480
down into the deep the deep and dirty of

00:19:51,210 --> 00:19:56,640
it there are issues but and I did and I

00:19:54,480 --> 00:19:59,970
did find myself thinking just what is

00:19:56,640 --> 00:20:02,880
meant for tastic as well but yeah it's

00:19:59,970 --> 00:20:06,480
it's quite a cute thing to look at

00:20:02,880 --> 00:20:08,220
it's based around the canoe get text

00:20:06,480 --> 00:20:13,050
technology so if you're familiar with

00:20:08,220 --> 00:20:16,980
that it seems kind of fairly will seem

00:20:13,050 --> 00:20:18,750
quite familiar to you one of the nice

00:20:16,980 --> 00:20:21,090
ways about the way it's been implemented

00:20:18,750 --> 00:20:25,800
is and this does come back to the canoe

00:20:21,090 --> 00:20:31,260
get text is them there's a very clear

00:20:25,800 --> 00:20:32,780
separation between the work of the

00:20:31,260 --> 00:20:35,670
developer and the work of the translator

00:20:32,780 --> 00:20:38,040
you end up with a file that the

00:20:35,670 --> 00:20:40,530
translator has to deal with and the rest

00:20:38,040 --> 00:20:49,320
of it is reasonably non-invasive for the

00:20:40,530 --> 00:20:50,880
developer so how do we do that we do the

00:20:49,320 --> 00:20:52,710
translate we decide for each user what

00:20:50,880 --> 00:20:53,910
language they should see that that in

00:20:52,710 --> 00:20:59,060
turn depends upon one of those

00:20:53,910 --> 00:21:02,250
middleware modules locale middleware and

00:20:59,060 --> 00:21:03,690
it in turns hunts through a series of

00:21:02,250 --> 00:21:07,140
options looking for a language prep

00:21:03,690 --> 00:21:09,000
preference so if the URL has got a

00:21:07,140 --> 00:21:11,310
language code embedded in it like that

00:21:09,000 --> 00:21:13,350
one does then bang it decides it wants

00:21:11,310 --> 00:21:15,450
German if there's a session variable

00:21:13,350 --> 00:21:17,160
that's great it uses session variable if

00:21:15,450 --> 00:21:18,810
it's got a cookie it's like it will use

00:21:17,160 --> 00:21:21,240
the cookie that's got a header that's

00:21:18,810 --> 00:21:25,530
good too and finally in in settings

00:21:21,240 --> 00:21:26,610
there is there's a language code sorry

00:21:25,530 --> 00:21:27,660
can't quite remember exactly what it's

00:21:26,610 --> 00:21:31,070
call but anyway there is a default

00:21:27,660 --> 00:21:31,070
language code and it will use that

00:21:35,650 --> 00:21:39,100
I'm just going to speed up a little bit

00:21:37,300 --> 00:21:43,000
because I've got more slaves than I knew

00:21:39,100 --> 00:21:44,770
our heads and in this example we'll show

00:21:43,000 --> 00:21:46,900
how to set the language explicitly now

00:21:44,770 --> 00:21:48,220
in the normal world I reckon you just

00:21:46,900 --> 00:21:50,770
have it you'd have an extension to a

00:21:48,220 --> 00:21:54,880
user generally to do this but this is

00:21:50,770 --> 00:21:57,640
how you might go about doing it you've

00:21:54,880 --> 00:22:03,580
you put up a form which provides a list

00:21:57,640 --> 00:22:07,020
of languages and that there's a Django

00:22:03,580 --> 00:22:09,880
provided view which allows you to set it

00:22:07,020 --> 00:22:11,890
now having done that you you've defined

00:22:09,880 --> 00:22:13,180
strings sorry you need to define the

00:22:11,890 --> 00:22:14,860
spring if you want to translate you want

00:22:13,180 --> 00:22:17,290
to define the translation relations and

00:22:14,860 --> 00:22:20,440
then you need to do a little bit of

00:22:17,290 --> 00:22:22,270
magic and boom it works so within

00:22:20,440 --> 00:22:24,490
templates you've got some special tags

00:22:22,270 --> 00:22:25,900
this one here is trans there's another

00:22:24,490 --> 00:22:27,580
one called block trends and that's

00:22:25,900 --> 00:22:32,220
essentially identifying a string that's

00:22:27,580 --> 00:22:34,600
going to be translatable within

00:22:32,220 --> 00:22:35,920
processing you've got where you have a

00:22:34,600 --> 00:22:39,850
string that you want to have translated

00:22:35,920 --> 00:22:41,890
you wrap it in a function call to you

00:22:39,850 --> 00:22:45,160
get text or you get too close eee

00:22:41,890 --> 00:22:47,790
they're here they're alias that's under

00:22:45,160 --> 00:22:50,320
bar and once again that will allow the

00:22:47,790 --> 00:22:53,560
translation system to pick those up as

00:22:50,320 --> 00:22:55,600
then as candidates for translation you

00:22:53,560 --> 00:22:58,630
define what languages you want to have

00:22:55,600 --> 00:23:01,150
translated and you do a Django admin

00:22:58,630 --> 00:23:02,850
make messages and that provides you with

00:23:01,150 --> 00:23:05,410
this file here which I've actually

00:23:02,850 --> 00:23:06,640
populated but when you first see it you

00:23:05,410 --> 00:23:09,160
don't actually see the foreign language

00:23:06,640 --> 00:23:10,810
there the base language is there and you

00:23:09,160 --> 00:23:14,980
come along and you define whatever your

00:23:10,810 --> 00:23:16,870
translations are having done the make

00:23:14,980 --> 00:23:19,150
sorry having updated that message you

00:23:16,870 --> 00:23:22,120
then do compile messages and that makes

00:23:19,150 --> 00:23:24,750
a corresponding pair of files and bingo

00:23:22,120 --> 00:23:24,750
that's it

00:23:30,550 --> 00:23:36,790
oh yes right okay I think we might have

00:23:32,710 --> 00:23:40,690
to skip over this yeah okay so excuse me

00:23:36,790 --> 00:23:42,670
while I skip what we might what we might

00:23:40,690 --> 00:23:45,130
talk about just brisk briefly is the

00:23:42,670 --> 00:23:46,870
prep the idea of localization as opposed

00:23:45,130 --> 00:23:50,280
to translation so that's to do with time

00:23:46,870 --> 00:23:56,170
format sorry number formats currencies

00:23:50,280 --> 00:23:58,330
time zones and you can hear I've

00:23:56,170 --> 00:24:00,460
Illustrated how you can have a time

00:23:58,330 --> 00:24:03,250
displayed on your screen when you go

00:24:00,460 --> 00:24:05,560
along and change your time zone to

00:24:03,250 --> 00:24:08,260
another one then Django automatically

00:24:05,560 --> 00:24:15,370
provides the right time without you

00:24:08,260 --> 00:24:25,990
having to do any further work and

00:24:15,370 --> 00:24:27,490
actually we'll stop there thanks sorry I

00:24:25,990 --> 00:24:31,450
had to rush i thought i was going to be

00:24:27,490 --> 00:24:34,660
way way under and yeah thank you very

00:24:31,450 --> 00:24:36,880
much again christians thanks it so

00:24:34,660 --> 00:24:38,500
pritchard really enjoyed it quick

00:24:36,880 --> 00:24:40,810
question about internationalization this

00:24:38,500 --> 00:24:43,210
is something that our business is sort

00:24:40,810 --> 00:24:45,880
of just ramping up towards so we we

00:24:43,210 --> 00:24:47,890
support several Southeast Asian

00:24:45,880 --> 00:24:50,760
countries and we're looking at

00:24:47,890 --> 00:24:54,040
internationalizing our web applications

00:24:50,760 --> 00:24:58,350
not known in Django but in pyramid but

00:24:54,040 --> 00:25:02,680
um we possibly Django we might migrate

00:24:58,350 --> 00:25:04,360
yeah I like that don't you yes so say

00:25:02,680 --> 00:25:06,670
your example of internationalization it

00:25:04,360 --> 00:25:08,050
that's quite good in a template level

00:25:06,670 --> 00:25:09,670
like you and also where you've got

00:25:08,050 --> 00:25:12,340
labels that need to be internationalized

00:25:09,670 --> 00:25:14,710
yes the extension to that is have you

00:25:12,340 --> 00:25:16,720
actually store internationalized data in

00:25:14,710 --> 00:25:19,870
the database and then pull back the

00:25:16,720 --> 00:25:22,390
right language into Europe into your

00:25:19,870 --> 00:25:24,160
application so going a level deeper how

00:25:22,390 --> 00:25:25,870
do you go that yeah okay that's a good

00:25:24,160 --> 00:25:29,230
question and I'm afraid I haven't looked

00:25:25,870 --> 00:25:31,300
to that i previously I've dealt with the

00:25:29,230 --> 00:25:33,010
localization side of Django and I

00:25:31,300 --> 00:25:34,510
haven't previously dealt with the

00:25:33,010 --> 00:25:36,610
translation side of it which was why I

00:25:34,510 --> 00:25:38,710
was rather sort of wide-eyed about it

00:25:36,610 --> 00:25:40,450
and but that's a very good point and

00:25:38,710 --> 00:25:43,860
it's not and it's not one actually I was

00:25:40,450 --> 00:25:46,049
so intrigued by the possibilities I

00:25:43,860 --> 00:25:50,250
not actually one that I considered but

00:25:46,049 --> 00:25:52,799
I'm guessing that if you know what rows

00:25:50,250 --> 00:25:55,559
in the table what are what objects have

00:25:52,799 --> 00:25:57,480
been created under what language then

00:25:55,559 --> 00:26:01,230
you could store the locale code within

00:25:57,480 --> 00:26:05,250
that within that object and you're then

00:26:01,230 --> 00:26:06,870
free to provider oh yeah this munoz in

00:26:05,250 --> 00:26:10,620
this limited circumstance I will allow a

00:26:06,870 --> 00:26:14,460
comment from the floor ha that's right

00:26:10,620 --> 00:26:16,559
rather and this discussion has come up

00:26:14,460 --> 00:26:20,640
and Drago con Europe more or less the

00:26:16,559 --> 00:26:23,490
same way so there's a app from Angie

00:26:20,640 --> 00:26:26,190
another drink or developer who it's

00:26:23,490 --> 00:26:29,370
called Jango reverse unique or something

00:26:26,190 --> 00:26:32,040
like that which provides based on the

00:26:29,370 --> 00:26:34,470
recent changes to drm provides you a way

00:26:32,040 --> 00:26:37,380
to revert to define a unique on the

00:26:34,470 --> 00:26:40,049
foreign key in some way I don't really

00:26:37,380 --> 00:26:43,740
understand the code but it does work

00:26:40,049 --> 00:26:47,340
really well I use it and what I bought

00:26:43,740 --> 00:26:50,190
everybody to advise not to do is doing

00:26:47,340 --> 00:26:52,260
some schema changes for audio for your

00:26:50,190 --> 00:26:55,320
different languages so have a column on

00:26:52,260 --> 00:26:59,460
English and term in French this does not

00:26:55,320 --> 00:27:01,260
play well right and I actually your lang

00:26:59,460 --> 00:27:03,240
your accent reminds me of something my

00:27:01,260 --> 00:27:05,070
presentation was sponsored by google

00:27:03,240 --> 00:27:09,240
translate so god knows what those things

00:27:05,070 --> 00:27:11,309
were saying okay I just hope they were

00:27:09,240 --> 00:27:13,169
you know oh it didn't say your

00:27:11,309 --> 00:27:18,270
hovercraft is full of eels so we're fine

00:27:13,169 --> 00:27:21,059
right thank you very much do we have any

00:27:18,270 --> 00:27:23,690
other questions oh sorry yeah okay well

00:27:21,059 --> 00:27:23,690
thank you very much Richard

00:27:31,830 --> 00:27:33,890

YouTube URL: https://www.youtube.com/watch?v=tl0wkY78jk4


