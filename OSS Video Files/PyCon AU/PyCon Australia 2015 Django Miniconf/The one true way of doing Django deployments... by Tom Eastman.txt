Title: The one true way of doing Django deployments... by Tom Eastman
Publication date: 2015-08-13
Playlist: PyCon Australia 2015 Django Miniconf
Description: 
	...doesn't exist. (Sorry)

The power and flexibility of Django comes with drawbacks. One of the toughest for project management is working out how to deploy your Django application. If you ask five different authorities on how you should do it, you'll get six different answers.

And if someone says "Just use fabric!": they're not helping.

Release management, dependency wrangling, virtualenv care and feeding; to .whl or .deb? To containerize or Heroku-ize? Do you really have to allow your servers unconstrained Internet access just to build your virtualenv?

As a Django user, you might end up writing more deployment solutions than Django projects. I know I have.

There's no one true way of doing Django deployments, but some work better than others. Maybe I can show you.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:10,389 --> 00:00:16,039
Hey good to see everybody yeah I'm Tom

00:00:13,639 --> 00:00:18,110
I'm a Python developer and a Django user

00:00:16,039 --> 00:00:20,990
and I am a security consultant for a

00:00:18,110 --> 00:00:22,189
safe stack I oh and today I'm wearing my

00:00:20,990 --> 00:00:24,890
developer hat I am gonna be talking

00:00:22,189 --> 00:00:26,390
about Django which is the thing that I

00:00:24,890 --> 00:00:28,189
have been using for very close to 10

00:00:26,390 --> 00:00:29,960
years now I realized that actually I

00:00:28,189 --> 00:00:33,640
must have got on the bandwagon not long

00:00:29,960 --> 00:00:37,430
after it started I got on early 2006 and

00:00:33,640 --> 00:00:39,890
I'm here today sorry I'm here today to

00:00:37,430 --> 00:00:42,380
finally tell you about how the one true

00:00:39,890 --> 00:00:45,140
way of doing Django deployments doesn't

00:00:42,380 --> 00:00:46,940
actually exist if you didn't see the

00:00:45,140 --> 00:00:48,680
description for my talk I don't actually

00:00:46,940 --> 00:00:50,030
mind a few if you leave now because

00:00:48,680 --> 00:00:51,700
you're disappointed that there's not

00:00:50,030 --> 00:00:53,810
actually a one true way of doing it so

00:00:51,700 --> 00:00:56,840
false advertising and all that sort of

00:00:53,810 --> 00:00:59,210
thing this has always come as a bit of a

00:00:56,840 --> 00:01:02,200
shock because in so many other ways

00:00:59,210 --> 00:01:05,149
Django treats me really really well

00:01:02,200 --> 00:01:07,220
Django is an absolute joy for

00:01:05,149 --> 00:01:08,479
development let's look at some of the

00:01:07,220 --> 00:01:09,649
great things Django does for you when

00:01:08,479 --> 00:01:10,970
you first get started in web development

00:01:09,649 --> 00:01:15,079
and when you're first trying to get

00:01:10,970 --> 00:01:16,939
something built first up obviously the

00:01:15,079 --> 00:01:19,219
Django documentation is the single best

00:01:16,939 --> 00:01:21,259
piece of technical documentation of any

00:01:19,219 --> 00:01:25,700
open-source project on the planet does

00:01:21,259 --> 00:01:27,979
anyone disagree with that Russ is

00:01:25,700 --> 00:01:30,889
looking around nope I love the Django

00:01:27,979 --> 00:01:33,200
documentation the instantly available

00:01:30,889 --> 00:01:38,209
built-in web server that Django gives

00:01:33,200 --> 00:01:41,299
you which auto reloads on code changes

00:01:38,209 --> 00:01:42,529
it serves static files seamlessly and

00:01:41,299 --> 00:01:44,329
with one or two extra lines of code

00:01:42,529 --> 00:01:47,659
it'll automatically serve all of the

00:01:44,329 --> 00:01:48,979
uploaded media files as well you

00:01:47,659 --> 00:01:52,789
basically get to kickstart your

00:01:48,979 --> 00:01:54,170
development with almost no overhead you

00:01:52,789 --> 00:01:55,609
don't need a web server because they've

00:01:54,170 --> 00:01:57,229
got a built-in web server you don't need

00:01:55,609 --> 00:02:00,709
a database because it comes with SQLite

00:01:57,229 --> 00:02:02,479
3 built in hell it's even got a built-in

00:02:00,709 --> 00:02:03,799
caching framework right though the local

00:02:02,479 --> 00:02:04,999
mem framework you don't need to get

00:02:03,799 --> 00:02:08,479
memcached you don't need any of that

00:02:04,999 --> 00:02:10,849
stuff the debug mode is just amazing

00:02:08,479 --> 00:02:13,760
right you've got model verification

00:02:10,849 --> 00:02:16,250
you've got the fantastic debug messages

00:02:13,760 --> 00:02:18,890
on 404 errors which give you all of the

00:02:16,250 --> 00:02:20,180
URL stuff and you've got the 500 errors

00:02:18,890 --> 00:02:21,210
with a full trace pack so you can go all

00:02:20,180 --> 00:02:22,980
the way down and even

00:02:21,210 --> 00:02:24,570
get the local variables that were in the

00:02:22,980 --> 00:02:28,290
function that threw the exception that

00:02:24,570 --> 00:02:30,510
threw the thing it's just awesome it's

00:02:28,290 --> 00:02:33,120
great and then it's time you've finished

00:02:30,510 --> 00:02:36,590
your project and the training wheels

00:02:33,120 --> 00:02:36,590
kind of fall off a little bit you

00:02:37,160 --> 00:02:43,350
suddenly find that in the real world

00:02:41,010 --> 00:02:44,970
getting a django website out in the open

00:02:43,350 --> 00:02:48,060
into public is actually a lot more

00:02:44,970 --> 00:02:51,600
complicated you'd better not be using

00:02:48,060 --> 00:02:52,980
sqlite3 anymore you know actually I say

00:02:51,600 --> 00:02:54,570
that but there's there's valid reasons

00:02:52,980 --> 00:02:57,210
for doing that sometimes but you

00:02:54,570 --> 00:02:58,530
probably weren't expecting to you better

00:02:57,210 --> 00:02:59,670
have already sorted out all your logging

00:02:58,530 --> 00:03:01,050
infrastructure you better be using the

00:02:59,670 --> 00:03:03,000
Python logging library and have done

00:03:01,050 --> 00:03:06,150
that weird dictionary configuration

00:03:03,000 --> 00:03:06,930
thing in the settings file which now

00:03:06,150 --> 00:03:08,690
that I mention it

00:03:06,930 --> 00:03:14,040
while we're just drawing the contrast

00:03:08,690 --> 00:03:15,840
the logging documentation in Python is

00:03:14,040 --> 00:03:18,330
not the single best piece of technical

00:03:15,840 --> 00:03:23,760
documentation on the planet hands up who

00:03:18,330 --> 00:03:25,380
disagrees with me um you have to have

00:03:23,760 --> 00:03:26,820
written your own 404 or 500 error

00:03:25,380 --> 00:03:29,460
messages if you've forgotten that then

00:03:26,820 --> 00:03:30,750
you'll have a bad time oh you better

00:03:29,460 --> 00:03:32,400
have configured your allowed hosts

00:03:30,750 --> 00:03:34,290
variable otherwise you're gonna have a

00:03:32,400 --> 00:03:37,200
bad time who's been hit by the surprise

00:03:34,290 --> 00:03:38,850
400 that look at that yep it gets

00:03:37,200 --> 00:03:41,250
everybody

00:03:38,850 --> 00:03:42,360
you better have gotten the WSGI server

00:03:41,250 --> 00:03:45,720
to run your django code because you

00:03:42,360 --> 00:03:46,860
can't use the dev server anymore oh and

00:03:45,720 --> 00:03:47,820
you actually still need a regular web

00:03:46,860 --> 00:03:49,170
server to put in front of it in the

00:03:47,820 --> 00:03:50,670
first place and of course hopefully

00:03:49,170 --> 00:03:53,370
you've got your database cache server

00:03:50,670 --> 00:03:54,720
and AMQP server all good and all of your

00:03:53,370 --> 00:03:57,270
infrastructure all set up all nicely

00:03:54,720 --> 00:03:59,100
because all of that's trivial right and

00:03:57,270 --> 00:04:00,450
then you've actually got a deployed

00:03:59,100 --> 00:04:02,070
you've actually got to get it to where

00:04:00,450 --> 00:04:05,940
it's going all of that was just what

00:04:02,070 --> 00:04:07,110
happens when debug turns off so what

00:04:05,940 --> 00:04:09,270
what do I mean when I'm talking about

00:04:07,110 --> 00:04:12,120
deployment today basically what I mean

00:04:09,270 --> 00:04:14,100
is taking a repository of your code in a

00:04:12,120 --> 00:04:15,720
certain state and performing whatever

00:04:14,100 --> 00:04:17,820
steps you need to get it running on the

00:04:15,720 --> 00:04:19,410
server somewhere it's the thing that you

00:04:17,820 --> 00:04:21,030
do when you've finished updating your

00:04:19,410 --> 00:04:22,980
repository and before seeing it live on

00:04:21,030 --> 00:04:25,500
the web server where did you put your

00:04:22,980 --> 00:04:27,450
code how did you put it there where are

00:04:25,500 --> 00:04:29,430
all of its dependencies and how did they

00:04:27,450 --> 00:04:31,830
get there and how is the code actually

00:04:29,430 --> 00:04:34,330
being run like what is actually running

00:04:31,830 --> 00:04:38,759
the Python stuff that you wrote that you

00:04:34,330 --> 00:04:38,759
want to turn into a website of some kind

00:04:39,240 --> 00:04:44,139
this is from the Xena Python I assume

00:04:42,220 --> 00:04:45,490
everyone here is familiar with that if

00:04:44,139 --> 00:04:47,229
you bring up the Python interpreter you

00:04:45,490 --> 00:04:49,180
go import this and you get like a set of

00:04:47,229 --> 00:04:50,500
principles that are basically my

00:04:49,180 --> 00:04:54,430
favorite thing about Python like the

00:04:50,500 --> 00:04:56,289
philosophy behind that stuff is one of

00:04:54,430 --> 00:04:59,289
the things that makes me choose Python

00:04:56,289 --> 00:05:00,699
for all of my projects and this is why

00:04:59,289 --> 00:05:02,860
I'm driven to talk about this today

00:05:00,699 --> 00:05:04,389
because Django itself gives you the one

00:05:02,860 --> 00:05:06,580
obvious way to do it in so many

00:05:04,389 --> 00:05:08,620
different areas except when it comes to

00:05:06,580 --> 00:05:09,759
deployment you're spoiled for choice to

00:05:08,620 --> 00:05:13,020
the degree that you're bound to get

00:05:09,759 --> 00:05:13,020
destroyed by decision fatigue

00:05:13,419 --> 00:05:18,610
I guess it's actually fair to say that

00:05:16,110 --> 00:05:20,860
it couldn't have been any other way very

00:05:18,610 --> 00:05:22,840
easily the world is complicated and the

00:05:20,860 --> 00:05:24,569
freedom to choose needed to be in the

00:05:22,840 --> 00:05:27,940
hands of the people doing the deployment

00:05:24,569 --> 00:05:29,529
in in the developer environment there's

00:05:27,940 --> 00:05:31,000
a lot of choices that could be made for

00:05:29,529 --> 00:05:33,430
you but in deployment your circumstances

00:05:31,000 --> 00:05:34,750
are always so different on the other

00:05:33,430 --> 00:05:36,219
hand they were successful in dropping

00:05:34,750 --> 00:05:38,500
the barrier to development to next to

00:05:36,219 --> 00:05:40,210
zero I wonder if in the future we can

00:05:38,500 --> 00:05:45,539
get to the same place with Jango

00:05:40,210 --> 00:05:47,830
deployments so before we dig in

00:05:45,539 --> 00:05:51,129
what are actually the desirable

00:05:47,830 --> 00:05:52,479
properties of a Jango deployment of any

00:05:51,129 --> 00:05:56,199
deployment in general but obviously

00:05:52,479 --> 00:05:58,120
we're talking about Jango today in a

00:05:56,199 --> 00:06:00,639
perfect world there would be just some

00:05:58,120 --> 00:06:02,830
kind of push-button deployment that

00:06:00,639 --> 00:06:04,930
would do all the work so you want it to

00:06:02,830 --> 00:06:10,300
be as automatic as feasible you want it

00:06:04,930 --> 00:06:11,710
to be push your button and it runs some

00:06:10,300 --> 00:06:13,479
scripts that does some stuff it deploys

00:06:11,710 --> 00:06:17,469
some packages and you have a deployment

00:06:13,479 --> 00:06:20,620
a deployments got to be predictable and

00:06:17,469 --> 00:06:22,659
repeatable if you do the same deployment

00:06:20,620 --> 00:06:26,409
twice or you haven't changed the

00:06:22,659 --> 00:06:29,259
repository in the meantime you need to

00:06:26,409 --> 00:06:31,270
get exactly the same result and I want

00:06:29,259 --> 00:06:34,440
to really emphasize this your deployment

00:06:31,270 --> 00:06:36,339
should never ever be surprising you

00:06:34,440 --> 00:06:38,379
showed you don't want to have to run it

00:06:36,339 --> 00:06:41,050
twice and go oh I wonder why there's a

00:06:38,379 --> 00:06:44,229
different library installed by pip this

00:06:41,050 --> 00:06:47,169
time than last time you don't want that

00:06:44,229 --> 00:06:48,009
to happen that's why there's like a

00:06:47,169 --> 00:06:50,169
cliche

00:06:48,009 --> 00:06:52,029
surprising development and not a cliche

00:06:50,169 --> 00:06:53,139
surprising deployment and I apologize

00:06:52,029 --> 00:06:57,309
that was a terrible joke initial to

00:06:53,139 --> 00:06:58,360
tried it it would be nice if you could

00:06:57,309 --> 00:07:02,139
roll back your deployment if you screwed

00:06:58,360 --> 00:07:04,539
it up something went wrong it didn't

00:07:02,139 --> 00:07:05,979
deploy correctly a bug that your your

00:07:04,539 --> 00:07:08,020
integration tests didn't pick up or

00:07:05,979 --> 00:07:10,479
something it would be really nice to not

00:07:08,020 --> 00:07:14,680
be a challenge to quickly get the old

00:07:10,479 --> 00:07:19,569
code back if you need to this one's a

00:07:14,680 --> 00:07:22,360
little bit a little bit of my own

00:07:19,569 --> 00:07:24,249
opinion you really want to minimize

00:07:22,360 --> 00:07:25,689
third-party infrastructure development

00:07:24,249 --> 00:07:27,370
let's say you're in a hurry to update

00:07:25,689 --> 00:07:28,689
because of some kind of bug or issue or

00:07:27,370 --> 00:07:30,249
a compromise or something where it's

00:07:28,689 --> 00:07:32,110
like oh I need to get this update out

00:07:30,249 --> 00:07:33,669
there really quickly but you can't

00:07:32,110 --> 00:07:35,499
because the Python package index is down

00:07:33,669 --> 00:07:38,680
for maintenance or github is down for

00:07:35,499 --> 00:07:40,360
maintenance or some other piece of

00:07:38,680 --> 00:07:42,610
third-party infrastructure that you rely

00:07:40,360 --> 00:07:44,529
on is down for maintenance or just down

00:07:42,610 --> 00:07:46,599
maybe the reason that's down is why you

00:07:44,529 --> 00:07:51,219
need to do a deployment that would be

00:07:46,599 --> 00:07:53,469
unfortunate a deployment shouldn't

00:07:51,219 --> 00:07:56,409
clobber your settings like your database

00:07:53,469 --> 00:07:58,629
key or your secret key or any of those

00:07:56,409 --> 00:07:59,919
environment specific settings that might

00:07:58,629 --> 00:08:01,599
change from your staging to your

00:07:59,919 --> 00:08:03,339
production environment doing a

00:08:01,599 --> 00:08:05,979
deployment shouldn't clobber those

00:08:03,339 --> 00:08:08,800
because you want to be able to set those

00:08:05,979 --> 00:08:10,029
smoothly and conveniently between

00:08:08,800 --> 00:08:11,709
deployments you might need to change a

00:08:10,029 --> 00:08:12,729
setting and you don't want to

00:08:11,709 --> 00:08:14,680
necessarily go through a whole

00:08:12,729 --> 00:08:17,949
deployment process depending on how

00:08:14,680 --> 00:08:20,680
convoluted it is and finally it would be

00:08:17,949 --> 00:08:21,909
really nice if you could do continuous

00:08:20,680 --> 00:08:24,189
deployment or continuous integration

00:08:21,909 --> 00:08:25,599
that leads to deployment that's out of

00:08:24,189 --> 00:08:28,199
scope for this talk I'm not really going

00:08:25,599 --> 00:08:30,639
into that but if your deployment is

00:08:28,199 --> 00:08:31,839
these other things if it's autumn if

00:08:30,639 --> 00:08:34,269
it's reasonably automatic if it's

00:08:31,839 --> 00:08:36,130
predictable if you've gotten through

00:08:34,269 --> 00:08:37,750
most of the rest of this stuff then it's

00:08:36,130 --> 00:08:41,880
really usually just a short jump to get

00:08:37,750 --> 00:08:44,470
to a continuous deployment as well so

00:08:41,880 --> 00:08:46,839
what I'm gonna try I don't have the

00:08:44,470 --> 00:08:48,040
answers for you here today but I want to

00:08:46,839 --> 00:08:49,680
give you some tips and trying to get

00:08:48,040 --> 00:08:53,139
there I want to give you some advice

00:08:49,680 --> 00:08:56,889
from my 9 and 1/2 years of experience

00:08:53,139 --> 00:08:58,600
where I have come up with at least half

00:08:56,889 --> 00:09:00,790
again as many ways of deploying Jango

00:08:58,600 --> 00:09:04,450
projects as actually written Janko

00:09:00,790 --> 00:09:06,190
projects and so I need to actually just

00:09:04,450 --> 00:09:14,890
warn you ahead of time that some of this

00:09:06,190 --> 00:09:20,140
content may include opinion scuse me for

00:09:14,890 --> 00:09:21,850
saying it might surprise you that some

00:09:20,140 --> 00:09:23,590
important architectural decisions that

00:09:21,850 --> 00:09:25,390
you might make when you're designing

00:09:23,590 --> 00:09:27,670
your system or doing a Django deployment

00:09:25,390 --> 00:09:28,780
or designing you to point it sorry don't

00:09:27,670 --> 00:09:31,660
actually make a lot of difference to

00:09:28,780 --> 00:09:33,970
your deployment mechanism so some

00:09:31,660 --> 00:09:36,460
choices that don't matter what database

00:09:33,970 --> 00:09:37,450
back-end you're actually using you know

00:09:36,460 --> 00:09:38,650
that's one of those decisions which

00:09:37,450 --> 00:09:39,910
might be a big decision it might have a

00:09:38,650 --> 00:09:41,530
lot of opinion and you might spend a lot

00:09:39,910 --> 00:09:48,220
of time agonizing between Postgres and

00:09:41,530 --> 00:09:50,920
MySQL use Postgres sorry that was

00:09:48,220 --> 00:09:51,730
Freudian slip or something but it

00:09:50,920 --> 00:09:52,900
doesn't make a difference to your

00:09:51,730 --> 00:09:53,860
deployment it's one of those big

00:09:52,900 --> 00:09:55,690
decisions that actually isn't

00:09:53,860 --> 00:09:58,390
interesting if you're just if you're

00:09:55,690 --> 00:10:00,790
using a whiskey application server did I

00:09:58,390 --> 00:10:03,420
say that correctly whiskey is that how

00:10:00,790 --> 00:10:06,190
we're gonna pronounce it today cool okay

00:10:03,420 --> 00:10:08,410
the decision between using green unicorn

00:10:06,190 --> 00:10:11,860
or you whiskey is that how we're gonna

00:10:08,410 --> 00:10:13,000
pronounce that today cool that doesn't

00:10:11,860 --> 00:10:14,500
really make a lot of difference you know

00:10:13,000 --> 00:10:17,470
they're both they're both they have

00:10:14,500 --> 00:10:19,330
different they have different designs a

00:10:17,470 --> 00:10:20,920
little bit but they do the same job and

00:10:19,330 --> 00:10:23,680
so making that choice actually isn't

00:10:20,920 --> 00:10:25,120
really that big of a deal your web

00:10:23,680 --> 00:10:26,860
server like Apache versus and nginx

00:10:25,120 --> 00:10:28,480
doesn't make a difference which one you

00:10:26,860 --> 00:10:30,430
use they're both very good mature web

00:10:28,480 --> 00:10:31,420
servers the only part of that decision

00:10:30,430 --> 00:10:33,490
that doesn't make a difference is if

00:10:31,420 --> 00:10:35,410
you're gonna use mod WSGI where that

00:10:33,490 --> 00:10:38,200
informs some of the other decisions that

00:10:35,410 --> 00:10:39,370
you'll end up making the choices that do

00:10:38,200 --> 00:10:41,650
matter when you're doing a django

00:10:39,370 --> 00:10:43,240
deployment whether you're gonna run it

00:10:41,650 --> 00:10:45,010
on platform as a service or you're gonna

00:10:43,240 --> 00:10:46,810
into it on your own infrastructure like

00:10:45,010 --> 00:10:49,630
that's a major first off decision are

00:10:46,810 --> 00:10:51,840
you just gonna deploy it to to Heroku or

00:10:49,630 --> 00:10:54,790
something like that

00:10:51,840 --> 00:10:57,190
whether you have decided to use as your

00:10:54,790 --> 00:11:01,420
application sir as your application code

00:10:57,190 --> 00:11:03,790
platform mob WSGI mod whiskey I'll

00:11:01,420 --> 00:11:05,170
practice that mod whiskey or using a

00:11:03,790 --> 00:11:08,740
dedicated whiskey application server

00:11:05,170 --> 00:11:10,090
like green unicorn or you whiskey this

00:11:08,740 --> 00:11:13,380
is the problem I read these terms I

00:11:10,090 --> 00:11:13,380
don't say them out loud much

00:11:13,640 --> 00:11:17,400
how you're actually gonna get your files

00:11:15,630 --> 00:11:19,230
there obviously makes a big difference

00:11:17,400 --> 00:11:21,030
are you using libraries from the Python

00:11:19,230 --> 00:11:22,380
package index or are you going peer with

00:11:21,030 --> 00:11:23,640
distribution libraries or something like

00:11:22,380 --> 00:11:25,530
that that makes a big difference to your

00:11:23,640 --> 00:11:26,850
deployment are you gonna put them all in

00:11:25,530 --> 00:11:31,140
a virtual end or are you just gonna Pip

00:11:26,850 --> 00:11:32,490
and stall them system-wide how will you

00:11:31,140 --> 00:11:36,080
configure your environment local

00:11:32,490 --> 00:11:38,790
settings so these are the decisions that

00:11:36,080 --> 00:11:40,170
make a bigger difference to how you're

00:11:38,790 --> 00:11:44,670
actually going to do your building and

00:11:40,170 --> 00:11:47,970
for most of these for most of these

00:11:44,670 --> 00:11:49,530
decisions there's actually there aren't

00:11:47,970 --> 00:11:51,240
any clear Universal winners there are

00:11:49,530 --> 00:11:54,030
trade-offs and there's pros and cons and

00:11:51,240 --> 00:11:55,500
there's consequences to each so I can't

00:11:54,030 --> 00:11:57,750
make these decisions for you but what

00:11:55,500 --> 00:11:59,340
I'm hoping I can do is give you some

00:11:57,750 --> 00:12:01,170
context and tools to help you make the

00:11:59,340 --> 00:12:02,700
right decision for your project and your

00:12:01,170 --> 00:12:06,360
environment and it really is different

00:12:02,700 --> 00:12:08,580
for each person one of the things I did

00:12:06,360 --> 00:12:09,900
in the lead up to this talk is I sent

00:12:08,580 --> 00:12:12,330
out an email to a couple mailing lists

00:12:09,900 --> 00:12:13,830
saying hey tell me how you're doing your

00:12:12,330 --> 00:12:18,120
deployments how are you handling each of

00:12:13,830 --> 00:12:20,040
these decisions and every response I got

00:12:18,120 --> 00:12:21,690
and I got maybe ten from different

00:12:20,040 --> 00:12:22,860
organizations every single one had a

00:12:21,690 --> 00:12:26,100
completely different answer for each

00:12:22,860 --> 00:12:27,450
thing so that doesn't mean any of them

00:12:26,100 --> 00:12:28,290
are necessarily doing it wrong but it

00:12:27,450 --> 00:12:30,630
means that this is a valuable

00:12:28,290 --> 00:12:33,860
conversation because everyone's had

00:12:30,630 --> 00:12:33,860
everyone's kind of finding their own way

00:12:33,920 --> 00:12:38,550
before we dig into some of these

00:12:36,240 --> 00:12:41,970
specific choices who is familiar with

00:12:38,550 --> 00:12:44,190
the 12 factor at manifesto cool a pretty

00:12:41,970 --> 00:12:46,590
decent number of you that's neat the 12

00:12:44,190 --> 00:12:48,390
factor at manifesto can someone just

00:12:46,590 --> 00:12:51,930
shout out what the actual website is but

00:12:48,390 --> 00:12:54,590
if you just cool and just googling 12

00:12:51,930 --> 00:13:01,320
factor it will immediately come up oh

00:12:54,590 --> 00:13:02,640
yes 12 factor dot net yeah the 12 factor

00:13:01,320 --> 00:13:05,340
at manifesto is a set of guidelines

00:13:02,640 --> 00:13:08,310
published by I think a bunch of people

00:13:05,340 --> 00:13:10,110
from Heroku and maybe some others as

00:13:08,310 --> 00:13:11,910
well on what they think the best

00:13:10,110 --> 00:13:14,430
practices are for modern web development

00:13:11,910 --> 00:13:15,450
it's pretty compulsory reading everyone

00:13:14,430 --> 00:13:17,040
who didn't put their hands up I do

00:13:15,450 --> 00:13:18,840
recommend that you google it and you go

00:13:17,040 --> 00:13:21,450
through all 12 it's it's pretty useful

00:13:18,840 --> 00:13:23,720
stuff my opinion on the 12 factor at

00:13:21,450 --> 00:13:25,790
manifesto is that

00:13:23,720 --> 00:13:27,620
every single factor is a very good idea

00:13:25,790 --> 00:13:29,329
and if you let it guide your

00:13:27,620 --> 00:13:30,649
architectural decisions you're gonna be

00:13:29,329 --> 00:13:32,329
in pretty good shape you're gonna be in

00:13:30,649 --> 00:13:34,550
reasonably good shape for the future and

00:13:32,329 --> 00:13:36,949
it solves some useful things but don't

00:13:34,550 --> 00:13:38,839
feel bad if some of the factors are

00:13:36,949 --> 00:13:41,509
harder for you to attain than others if

00:13:38,839 --> 00:13:43,370
because of your infrastructure like

00:13:41,509 --> 00:13:46,310
environment variables aren't the right

00:13:43,370 --> 00:13:49,040
place to put your local settings I think

00:13:46,310 --> 00:13:51,139
it's best if your app trends towards 12

00:13:49,040 --> 00:13:53,540
factor and if you can make some of those

00:13:51,139 --> 00:13:56,180
calls easily then you're not making the

00:13:53,540 --> 00:13:57,350
wrong call but don't treat it like a set

00:13:56,180 --> 00:14:03,500
of Commandments that you end up

00:13:57,350 --> 00:14:05,540
following so even the simplest version

00:14:03,500 --> 00:14:08,240
of deploying a django project to a

00:14:05,540 --> 00:14:11,240
server requires a lot of steps a lot of

00:14:08,240 --> 00:14:12,680
dependencies a lot of work can we just

00:14:11,240 --> 00:14:13,550
cut through all of that and make the

00:14:12,680 --> 00:14:16,339
problem go away

00:14:13,550 --> 00:14:20,389
what is the most direct route to having

00:14:16,339 --> 00:14:22,430
a working django application live on the

00:14:20,389 --> 00:14:23,899
internet for you to use and it's

00:14:22,430 --> 00:14:25,639
probably a third party service as a

00:14:23,899 --> 00:14:26,569
platform as a service like Heroku or

00:14:25,639 --> 00:14:28,430
OpenShift

00:14:26,569 --> 00:14:30,110
or heroic is the only one that I'm

00:14:28,430 --> 00:14:33,259
vaguely familiar with I haven't had the

00:14:30,110 --> 00:14:34,639
opportunity to use these very much but

00:14:33,259 --> 00:14:35,899
the trade-off for using them is actually

00:14:34,639 --> 00:14:40,040
one of the easiest things that you can

00:14:35,899 --> 00:14:41,629
assess they provide a particularly

00:14:40,040 --> 00:14:44,360
special peace of mind they generally

00:14:41,629 --> 00:14:45,769
provide you with that one and only one

00:14:44,360 --> 00:14:48,410
obvious way to do it

00:14:45,769 --> 00:14:50,180
Heroku for example provides detailed

00:14:48,410 --> 00:14:52,279
instructions on deploying your app and

00:14:50,180 --> 00:14:53,480
they dictated the answers to most of the

00:14:52,279 --> 00:14:57,559
deployment decisions you might otherwise

00:14:53,480 --> 00:15:00,319
have been faced with if you are using

00:14:57,559 --> 00:15:01,670
Heroku then you will use a virtual lab

00:15:00,319 --> 00:15:03,139
during your development that's just one

00:15:01,670 --> 00:15:05,569
of the things that they say you will do

00:15:03,139 --> 00:15:07,100
and Heroku will install your pip

00:15:05,569 --> 00:15:12,019
dependencies during your deployment step

00:15:07,100 --> 00:15:14,540
using the Heroku tool chain I think you

00:15:12,019 --> 00:15:17,149
will use a whiskey application server

00:15:14,540 --> 00:15:19,490
like green unicorn or you whiskey that's

00:15:17,149 --> 00:15:22,730
just the way Heroku expects your app to

00:15:19,490 --> 00:15:24,199
be executed you are encouraged to use

00:15:22,730 --> 00:15:26,029
environment variables for all your

00:15:24,199 --> 00:15:27,350
tunable configuration settings and I

00:15:26,029 --> 00:15:28,490
think you're required to for the ones

00:15:27,350 --> 00:15:30,350
that Heroku needs to be able to

00:15:28,490 --> 00:15:34,579
configure like the database URL and

00:15:30,350 --> 00:15:36,230
stuff like that and you'll serve static

00:15:34,579 --> 00:15:37,580
files using some piece of whiskey

00:15:36,230 --> 00:15:39,410
middleware like white

00:15:37,580 --> 00:15:42,910
instead of using your own web server or

00:15:39,410 --> 00:15:46,760
your own nginx or your own Apache so

00:15:42,910 --> 00:15:48,110
Heroku I'm using Heroku as an example

00:15:46,760 --> 00:15:50,180
just because it's probably the most well

00:15:48,110 --> 00:15:53,870
known but most of them have similar

00:15:50,180 --> 00:15:55,340
rules most of them end up giving you you

00:15:53,870 --> 00:15:57,710
will do it this way if you want your

00:15:55,340 --> 00:16:00,200
Python running on our servers so if

00:15:57,710 --> 00:16:01,670
you're gonna make this decision your

00:16:00,200 --> 00:16:03,050
deployment becomes a lot simpler

00:16:01,670 --> 00:16:06,290
you basically just follow the

00:16:03,050 --> 00:16:07,550
instructions it costs money it might be

00:16:06,290 --> 00:16:10,880
quite a lot of money depending on your

00:16:07,550 --> 00:16:12,830
website Heroku scales pretty well but

00:16:10,880 --> 00:16:14,300
it's it gets it gets expensive once you

00:16:12,830 --> 00:16:17,210
start having a lot of a lot of

00:16:14,300 --> 00:16:19,490
infrastructure up there and it's

00:16:17,210 --> 00:16:22,250
somebody else's computer as in the cloud

00:16:19,490 --> 00:16:24,020
the term is remember cloud just means

00:16:22,250 --> 00:16:25,460
somebody else's computer and it may be

00:16:24,020 --> 00:16:26,600
that ceding the control of your site or

00:16:25,460 --> 00:16:29,360
infrastructure is not something you're

00:16:26,600 --> 00:16:31,220
prepared to do in your organization or

00:16:29,360 --> 00:16:32,690
you may have data sovereignty or privacy

00:16:31,220 --> 00:16:35,150
considerations that basically just mean

00:16:32,690 --> 00:16:36,890
a platform as a service isn't even an

00:16:35,150 --> 00:16:39,770
option so usually this is one of the

00:16:36,890 --> 00:16:42,500
ones that you can go oh actually this is

00:16:39,770 --> 00:16:44,900
a good fit we'll just do it this way but

00:16:42,500 --> 00:16:46,220
often it's just as quick as I'd love to

00:16:44,900 --> 00:16:53,150
use Heroku but actually it's just not an

00:16:46,220 --> 00:16:54,530
option for what I'm doing okay so you're

00:16:53,150 --> 00:16:56,120
gonna have your own infrastructure then

00:16:54,530 --> 00:16:56,990
you're not using platform as a service

00:16:56,120 --> 00:16:58,370
you've given it you're gonna run your

00:16:56,990 --> 00:17:01,370
own servers maybe there have been two or

00:16:58,370 --> 00:17:03,520
Debian or redhead or whatever what is

00:17:01,370 --> 00:17:06,260
the simplest thing that you can do there

00:17:03,520 --> 00:17:08,990
can you use distribution packages for

00:17:06,260 --> 00:17:11,089
everything can you just go apt-get

00:17:08,990 --> 00:17:17,829
install Django sorry apt-get install

00:17:11,089 --> 00:17:17,829
Python Django in Debian you better not

00:17:19,900 --> 00:17:27,380
no current to take a bun - as an example

00:17:23,060 --> 00:17:28,670
no current long-term support version of

00:17:27,380 --> 00:17:32,600
Ubuntu so the ones that are current

00:17:28,670 --> 00:17:38,540
right now are 1204 and 1404 10.4 is dead

00:17:32,600 --> 00:17:40,610
right yeah it might as well be but those

00:17:38,540 --> 00:17:42,230
two versions they they come packaged

00:17:40,610 --> 00:17:44,270
with or in their in their package

00:17:42,230 --> 00:17:46,820
repositories they come with Django 1.6

00:17:44,270 --> 00:17:47,780
and they come with Django 1.3 both of

00:17:46,820 --> 00:17:50,780
which have fallen out of upstream

00:17:47,780 --> 00:17:52,460
support so they are

00:17:50,780 --> 00:17:54,590
no longer being supported by the Django

00:17:52,460 --> 00:17:56,090
team which means that the Debian or

00:17:54,590 --> 00:17:58,760
Ubuntu teams have to support them

00:17:56,090 --> 00:18:01,460
themselves and frankly they probably

00:17:58,760 --> 00:18:03,530
aren't in a bun - Django lives in the

00:18:01,460 --> 00:18:05,540
universe set of packages which has a

00:18:03,530 --> 00:18:08,780
looser security update policy than main

00:18:05,540 --> 00:18:10,850
it relies on community updates and if

00:18:08,780 --> 00:18:14,060
the community has moved on as the Django

00:18:10,850 --> 00:18:15,830
main development team has it's just not

00:18:14,060 --> 00:18:17,570
actually a safe option other

00:18:15,830 --> 00:18:20,240
distributions might vary like the latest

00:18:17,570 --> 00:18:23,390
Debian is it called Jessie do I have

00:18:20,240 --> 00:18:25,700
that right okay the latest debian comes

00:18:23,390 --> 00:18:27,950
with django 1.7 and django 1.7 is

00:18:25,700 --> 00:18:31,910
currently supported by the django team

00:18:27,950 --> 00:18:35,090
but it's not a long-term support release

00:18:31,910 --> 00:18:36,680
so django 1.7 will no longer be

00:18:35,090 --> 00:18:38,630
supported while jesse still is being

00:18:36,680 --> 00:18:40,430
supported and you can you can rely on

00:18:38,630 --> 00:18:44,230
getting security updates and stuff like

00:18:40,430 --> 00:18:46,220
that from the Debian team for that but I

00:18:44,230 --> 00:18:47,150
don't think it's a good idea I think

00:18:46,220 --> 00:18:48,710
you're gonna need to handle your own

00:18:47,150 --> 00:18:52,510
dependencies from PIP you're going to

00:18:48,710 --> 00:18:52,510
end up needing the Python package index

00:18:52,540 --> 00:18:56,270
so what about the application server

00:18:54,620 --> 00:18:59,330
platform that you're gonna that you're

00:18:56,270 --> 00:19:01,520
going to go with this is a decision

00:18:59,330 --> 00:19:04,250
between using Apache with mod whiskey or

00:19:01,520 --> 00:19:06,770
using a web server like Apache or nginx

00:19:04,250 --> 00:19:09,530
reverse proxying requests to a dedicated

00:19:06,770 --> 00:19:11,870
whiskey application server such as green

00:19:09,530 --> 00:19:12,860
unicorn or you whiskey I'm getting

00:19:11,870 --> 00:19:18,080
better at that I'm getting better at

00:19:12,860 --> 00:19:23,120
pronouncing it so on using Apache 2 or

00:19:18,080 --> 00:19:25,250
mod whiskey if you're using Apache

00:19:23,120 --> 00:19:27,830
anyway because it's your platform of

00:19:25,250 --> 00:19:29,390
choice then there's really no reason not

00:19:27,830 --> 00:19:31,670
to use mod whiskey it's it's pretty

00:19:29,390 --> 00:19:37,760
reasonable it's fine enough it's

00:19:31,670 --> 00:19:40,130
certainly stable OOP sorry using mod

00:19:37,760 --> 00:19:42,680
whiskey couples your application code

00:19:40,130 --> 00:19:44,240
directly to your web server the default

00:19:42,680 --> 00:19:45,830
configuration even runs the app in the

00:19:44,240 --> 00:19:47,180
same process as the web server and is

00:19:45,830 --> 00:19:51,320
the same user Graham I think I've still

00:19:47,180 --> 00:19:53,150
got that right right yeah so in my

00:19:51,320 --> 00:19:56,690
experience I no longer think this is a

00:19:53,150 --> 00:19:58,370
good idea at all for more details on

00:19:56,690 --> 00:20:01,280
that come to my talk on security

00:19:58,370 --> 00:20:03,850
architecture on Sunday but the my

00:20:01,280 --> 00:20:06,799
suggestions are

00:20:03,850 --> 00:20:09,230
these days my suggestions are don't use

00:20:06,799 --> 00:20:11,720
mod whiskey and that's mainly because

00:20:09,230 --> 00:20:15,440
I'm a very firm believer in keeping the

00:20:11,720 --> 00:20:18,710
web server absolutely separate from the

00:20:15,440 --> 00:20:22,790
application server they in a perfect

00:20:18,710 --> 00:20:26,600
world would be on different machines so

00:20:22,790 --> 00:20:30,740
if you use a mod whiskey server sorry if

00:20:26,600 --> 00:20:33,260
you if you use a wsgi application server

00:20:30,740 --> 00:20:35,059
like green unicorn or you whiskey then

00:20:33,260 --> 00:20:36,380
then you can use whichever web server

00:20:35,059 --> 00:20:38,540
you like better because it's no longer

00:20:36,380 --> 00:20:40,130
coupled to the web server at all it's

00:20:38,540 --> 00:20:43,850
basically just the web server is a proxy

00:20:40,130 --> 00:20:45,500
and serving the static files if you do

00:20:43,850 --> 00:20:46,880
use mod whiskey and it is a perfectly

00:20:45,500 --> 00:20:49,460
reasonable choice to make if for other

00:20:46,880 --> 00:20:51,350
reasons you want to make it then one

00:20:49,460 --> 00:20:53,720
thing that you absolutely should do is

00:20:51,350 --> 00:20:57,500
put in the extra default Connect stro

00:20:53,720 --> 00:21:00,140
configuration to run the WSGI server as

00:20:57,500 --> 00:21:03,770
a different user from the web server

00:21:00,140 --> 00:21:05,840
itself what is the what is the command

00:21:03,770 --> 00:21:08,929
code its daemon process something around

00:21:05,840 --> 00:21:10,669
there daemon mode yep so you run it in

00:21:08,929 --> 00:21:13,840
daemon mode where you get to choose a

00:21:10,669 --> 00:21:17,330
different user to run your WSGI your

00:21:13,840 --> 00:21:19,400
your whisky app and then you make sure

00:21:17,330 --> 00:21:22,130
that that user doesn't own any files on

00:21:19,400 --> 00:21:26,679
the system and you have some you you get

00:21:22,130 --> 00:21:26,679
as good security separation as you can

00:21:28,150 --> 00:21:33,440
no privileges at all that's always a

00:21:30,620 --> 00:21:35,410
better thing okay let's talk about

00:21:33,440 --> 00:21:37,490
getting your files into the right place

00:21:35,410 --> 00:21:41,030
whose answer to this is usually just

00:21:37,490 --> 00:21:42,080
used fabric nothing wrong with that but

00:21:41,030 --> 00:21:43,790
the problem is that fabric is actually

00:21:42,080 --> 00:21:47,210
just a shell script right like fabric is

00:21:43,790 --> 00:21:48,500
that's like saying use bash it's it's

00:21:47,210 --> 00:21:50,030
basically just a language in its own

00:21:48,500 --> 00:21:51,470
right it doesn't solve the problem for

00:21:50,030 --> 00:21:54,950
you it's just a useful tool for running

00:21:51,470 --> 00:21:56,330
those commands there's a million ways to

00:21:54,950 --> 00:21:57,830
do this you could use our sink you could

00:21:56,330 --> 00:22:01,309
use fabric you could just straight up

00:21:57,830 --> 00:22:02,809
SCP you can tar ball it you can build a

00:22:01,309 --> 00:22:05,540
debian package I'll talk about that

00:22:02,809 --> 00:22:06,980
briefly near the end the exact mechanism

00:22:05,540 --> 00:22:08,299
doesn't actually matter but I want to

00:22:06,980 --> 00:22:10,490
give you one really important guideline

00:22:08,299 --> 00:22:13,880
that you really have to keep at the

00:22:10,490 --> 00:22:16,270
forefront so what matters is knowing

00:22:13,880 --> 00:22:17,830
exactly which files you've sent

00:22:16,270 --> 00:22:19,990
the one thing that you don't ever want

00:22:17,830 --> 00:22:21,910
is you can't you can't do a deployment

00:22:19,990 --> 00:22:23,620
from your working copy from your from

00:22:21,910 --> 00:22:24,850
your repo and discover that some extra

00:22:23,620 --> 00:22:27,400
file that happened to be in your

00:22:24,850 --> 00:22:29,590
repository or some changed Python file

00:22:27,400 --> 00:22:32,340
that you hadn't committed ended up in

00:22:29,590 --> 00:22:36,640
your deployment who's had that happen

00:22:32,340 --> 00:22:38,170
yeah it totally does that's the thing

00:22:36,640 --> 00:22:39,130
that you really never ever want because

00:22:38,170 --> 00:22:40,600
it completely blows away the

00:22:39,130 --> 00:22:43,390
repeatability and predictability that I

00:22:40,600 --> 00:22:46,090
was talking about earlier so whatever

00:22:43,390 --> 00:22:48,160
tool you use your starting point has

00:22:46,090 --> 00:22:50,410
always got to be a clean repo it's

00:22:48,160 --> 00:22:53,770
always got to be a clean check out from

00:22:50,410 --> 00:22:55,750
a known tag or a release thing or

00:22:53,770 --> 00:22:57,430
something identified by a commit hash so

00:22:55,750 --> 00:22:59,920
that you really do have as close as

00:22:57,430 --> 00:23:03,100
possible a way of pinning down exactly

00:22:59,920 --> 00:23:05,050
what you're deploying get archive is the

00:23:03,100 --> 00:23:06,970
tool of choice for this starting point

00:23:05,050 --> 00:23:10,090
you do you use get archive and it'll

00:23:06,970 --> 00:23:12,160
just make a zip file of your repository

00:23:10,090 --> 00:23:14,800
at a certain commit and then from there

00:23:12,160 --> 00:23:17,290
your scripts or tools that you use ought

00:23:14,800 --> 00:23:20,110
to be working on that and that way you

00:23:17,290 --> 00:23:30,610
always know oh I deployed commit hash a

00:23:20,110 --> 00:23:31,420
eb c d e f g whatever um that's pretty

00:23:30,610 --> 00:23:32,950
much all i have to say about that

00:23:31,420 --> 00:23:35,770
there's a lot there's a lot of scope

00:23:32,950 --> 00:23:39,040
there but the key point is just make

00:23:35,770 --> 00:23:43,300
sure you know exactly where your code

00:23:39,040 --> 00:23:44,350
was at when you did the deployment so

00:23:43,300 --> 00:23:47,080
what about your getting your

00:23:44,350 --> 00:23:48,400
configuration in place when we talk

00:23:47,080 --> 00:23:50,050
about configuration we're talking about

00:23:48,400 --> 00:23:52,180
the environment specific settings we're

00:23:50,050 --> 00:23:53,800
talking about the secret key should

00:23:52,180 --> 00:23:55,870
always be different between environments

00:23:53,800 --> 00:23:57,370
it shouldn't be the same on your dev

00:23:55,870 --> 00:23:58,780
environment or your staging environment

00:23:57,370 --> 00:24:00,100
or your pre prod or your production and

00:23:58,780 --> 00:24:02,200
your secret key needs to be something

00:24:00,100 --> 00:24:04,690
else your database passwords if you if

00:24:02,200 --> 00:24:06,820
you're using our hopefully different

00:24:04,690 --> 00:24:07,990
passwords for each environment maybe

00:24:06,820 --> 00:24:09,040
some of them have debug mode turned on

00:24:07,990 --> 00:24:13,420
maybe some of them have debug mode

00:24:09,040 --> 00:24:15,130
turned off you might you usually don't

00:24:13,420 --> 00:24:17,760
want these settings in your repository

00:24:15,130 --> 00:24:20,170
like if you're doing the traditional

00:24:17,760 --> 00:24:22,120
Django development tricks you'll

00:24:20,170 --> 00:24:23,710
probably have a local settings dot PI

00:24:22,120 --> 00:24:25,000
and then you'll probably have an extra

00:24:23,710 --> 00:24:25,930
step or something in your git ignore to

00:24:25,000 --> 00:24:28,160
make sure that that doesn't get

00:24:25,930 --> 00:24:30,710
committed to your repo

00:24:28,160 --> 00:24:32,000
and then like I was saying before one

00:24:30,710 --> 00:24:34,880
reason you want to keep this stuff

00:24:32,000 --> 00:24:36,320
separate is you want to be able to

00:24:34,880 --> 00:24:40,690
change these settings without having to

00:24:36,320 --> 00:24:42,950
do a full deployment every time so

00:24:40,690 --> 00:24:45,710
there's a two options here that have

00:24:42,950 --> 00:24:47,630
become reasonably mainstream the first

00:24:45,710 --> 00:24:49,610
one is the one that's basically

00:24:47,630 --> 00:24:51,140
recommended in the Django tutorials and

00:24:49,610 --> 00:24:54,110
in the Django documentation where you

00:24:51,140 --> 00:24:58,280
use a local setting stop pie and that

00:24:54,110 --> 00:24:59,690
has maybe from settings import star or

00:24:58,280 --> 00:25:01,310
something where you gap grab all your

00:24:59,690 --> 00:25:03,710
regular settings and then you override

00:25:01,310 --> 00:25:04,790
things like turn debug on or off and set

00:25:03,710 --> 00:25:08,690
your database settings and stuff like

00:25:04,790 --> 00:25:10,490
that another option having all

00:25:08,690 --> 00:25:11,900
configuration all configurable settings

00:25:10,490 --> 00:25:13,910
as environment variables and then in

00:25:11,900 --> 00:25:18,890
your settings file the database password

00:25:13,910 --> 00:25:21,280
might be OS stock Virant get DB password

00:25:18,890 --> 00:25:23,630
or something so that's the 12 factor app

00:25:21,280 --> 00:25:25,340
recommendation that that's sort of

00:25:23,630 --> 00:25:28,760
setting come through in environment

00:25:25,340 --> 00:25:32,270
variables and then you can do something

00:25:28,760 --> 00:25:33,650
weird you can just add some add a little

00:25:32,270 --> 00:25:36,130
bit of extra code to your settings file

00:25:33,650 --> 00:25:39,950
that reads an additional file for

00:25:36,130 --> 00:25:42,950
configuration this is really easy

00:25:39,950 --> 00:25:44,450
because you've got pythons config parser

00:25:42,950 --> 00:25:46,340
module which is really nice for just

00:25:44,450 --> 00:25:49,010
grabbing a set of configuration files

00:25:46,340 --> 00:25:51,530
you can have a default one and then

00:25:49,010 --> 00:25:56,990
maybe an Etsy one and one an Etsy which

00:25:51,530 --> 00:25:58,820
is for your overall settings so I've

00:25:56,990 --> 00:26:01,160
never been happy with using local

00:25:58,820 --> 00:26:02,540
settings I've never been happy with

00:26:01,160 --> 00:26:05,450
local settings being configured in a

00:26:02,540 --> 00:26:07,910
Python file the Python really ought to

00:26:05,450 --> 00:26:09,590
be static unchanging program code if

00:26:07,910 --> 00:26:11,360
it's configuration stuff you don't

00:26:09,590 --> 00:26:14,360
actually want it to be Python code that

00:26:11,360 --> 00:26:17,270
can be that can monkey patch a function

00:26:14,360 --> 00:26:19,730
somewhere in a view I hope none of your

00:26:17,270 --> 00:26:23,420
developers will do that to you but that

00:26:19,730 --> 00:26:25,340
shouldn't be an option and environment

00:26:23,420 --> 00:26:26,540
variables are perfectly workable one but

00:26:25,340 --> 00:26:29,420
you might end up with a whole bunch of

00:26:26,540 --> 00:26:30,890
environment variables this thought

00:26:29,420 --> 00:26:32,810
anything is something that I've actually

00:26:30,890 --> 00:26:35,120
done in all my major projects and it

00:26:32,810 --> 00:26:36,860
works really well in the situations that

00:26:35,120 --> 00:26:39,929
my projects have been deployed and where

00:26:36,860 --> 00:26:43,960
they usually consist of

00:26:39,929 --> 00:26:46,840
developer teams handing over the the

00:26:43,960 --> 00:26:49,929
packages to an Operations team and this

00:26:46,840 --> 00:26:51,610
way the operations team gets given a

00:26:49,929 --> 00:26:53,200
thing that they then install and then

00:26:51,610 --> 00:26:54,700
they have a configuration file which can

00:26:53,200 --> 00:26:55,750
have comments and documentation about

00:26:54,700 --> 00:26:57,039
here's where you put the database

00:26:55,750 --> 00:26:59,049
settings here where you here's where you

00:26:57,039 --> 00:27:01,059
put whatever else and maybe that

00:26:59,049 --> 00:27:02,740
configuration file is being handled by

00:27:01,059 --> 00:27:05,890
some sort of orchestration system like

00:27:02,740 --> 00:27:07,330
puppet so it's been a little bit of

00:27:05,890 --> 00:27:09,160
extra overhead but this is actually a

00:27:07,330 --> 00:27:10,780
really feasible solution depending on

00:27:09,160 --> 00:27:13,360
your project and if you're in a much

00:27:10,780 --> 00:27:15,760
more DevOps situation where you are the

00:27:13,360 --> 00:27:19,720
developer and the deployer maybe it's

00:27:15,760 --> 00:27:26,860
overkill but it's actually worked really

00:27:19,720 --> 00:27:28,870
well for me cool okay so I'm going to

00:27:26,860 --> 00:27:30,490
talk about some of the weirder things

00:27:28,870 --> 00:27:36,100
that I've done in my adventures in

00:27:30,490 --> 00:27:38,740
Django deployment can you turn your

00:27:36,100 --> 00:27:41,580
Django project straight up into a Python

00:27:38,740 --> 00:27:45,730
package that you then install using pip

00:27:41,580 --> 00:27:47,860
has anyone done this see this is the

00:27:45,730 --> 00:27:51,669
thing like I've ended up doing some

00:27:47,860 --> 00:27:54,789
weird stuff and I don't really know how

00:27:51,669 --> 00:27:56,919
weird I'm being and it's a relief to me

00:27:54,789 --> 00:27:59,169
that only about five or six hands went

00:27:56,919 --> 00:28:03,580
up which means that I am satisfactorily

00:27:59,169 --> 00:28:08,919
weird we are we are we are the outliers

00:28:03,580 --> 00:28:12,909
in weird solution management I'll get to

00:28:08,919 --> 00:28:15,370
that I'll get to that so the answer is

00:28:12,909 --> 00:28:18,210
yes but it's a little bit tricky so why

00:28:15,370 --> 00:28:26,110
would you want to do this first of all

00:28:18,210 --> 00:28:29,740
because then sorry because if you turn

00:28:26,110 --> 00:28:32,500
your Django project into a WHL or a

00:28:29,740 --> 00:28:34,500
Python package then your virtual

00:28:32,500 --> 00:28:35,650
environment becomes your whole

00:28:34,500 --> 00:28:38,950
deployment

00:28:35,650 --> 00:28:41,289
once you've done virtual and my project

00:28:38,950 --> 00:28:43,090
pip install my dependencies pip and

00:28:41,289 --> 00:28:46,690
stole my project and then you run

00:28:43,090 --> 00:28:48,610
collect static you're finished so it

00:28:46,690 --> 00:28:50,260
reduces quite a lot the files you have

00:28:48,610 --> 00:28:51,230
floating around because otherwise you

00:28:50,260 --> 00:28:53,720
might have

00:28:51,230 --> 00:28:54,860
your your project sitting in one place

00:28:53,720 --> 00:28:56,000
you have to have to add that to the

00:28:54,860 --> 00:28:56,990
Python path but then you also have to

00:28:56,000 --> 00:29:01,280
make sure that you're running a virtual

00:28:56,990 --> 00:29:04,190
environment from some other directory so

00:29:01,280 --> 00:29:06,110
as long as you use application level

00:29:04,190 --> 00:29:08,090
static files and application level

00:29:06,110 --> 00:29:10,640
templates directories then this becomes

00:29:08,090 --> 00:29:12,730
pretty easy to write a Python setup pie

00:29:10,640 --> 00:29:16,700
that will install your Django project

00:29:12,730 --> 00:29:19,400
inside a VM and then you can either turn

00:29:16,700 --> 00:29:20,870
manage dot pi into an entry point script

00:29:19,400 --> 00:29:22,549
which I'll show you a brief example of

00:29:20,870 --> 00:29:26,120
or just eliminate it and use Django

00:29:22,549 --> 00:29:28,640
admin dot PI for all of your command

00:29:26,120 --> 00:29:30,320
line needs as long as you have that

00:29:28,640 --> 00:29:33,230
environment the the Gengo Settings model

00:29:30,320 --> 00:29:34,910
environment variables set so the setup

00:29:33,230 --> 00:29:36,880
dot PI ends up looking really

00:29:34,910 --> 00:29:39,140
straightforward because this is just

00:29:36,880 --> 00:29:40,669
find the packages in your sub directory

00:29:39,140 --> 00:29:44,179
and install them and then the only weird

00:29:40,669 --> 00:29:49,330
thing is you've set up a console entry

00:29:44,179 --> 00:29:53,570
point for your for your manage PI

00:29:49,330 --> 00:29:54,860
surrogate and that would end up looking

00:29:53,570 --> 00:29:56,150
just like something like this where

00:29:54,860 --> 00:29:58,929
you've just taken the content of manage

00:29:56,150 --> 00:30:04,190
drop I turned it into a function and

00:29:58,929 --> 00:30:05,900
then just going back to that one this

00:30:04,190 --> 00:30:07,669
means that you end up having when you do

00:30:05,900 --> 00:30:10,100
the install this ends up meaning that

00:30:07,669 --> 00:30:11,840
you have a binary like a script called

00:30:10,100 --> 00:30:14,330
my project and when you run my project

00:30:11,840 --> 00:30:15,980
it just does the same thing as Django

00:30:14,330 --> 00:30:18,020
admin and so again this has been a

00:30:15,980 --> 00:30:19,880
really powerful tool for me where I need

00:30:18,020 --> 00:30:22,640
to basically document the use of my

00:30:19,880 --> 00:30:25,730
project to people who aren't me who were

00:30:22,640 --> 00:30:27,620
the ones with pagers so making their

00:30:25,730 --> 00:30:28,910
lives simple is absolutely my top

00:30:27,620 --> 00:30:33,740
priority because I don't want to get

00:30:28,910 --> 00:30:35,600
paged you have to remember a couple

00:30:33,740 --> 00:30:37,730
little things when you decide to go down

00:30:35,600 --> 00:30:39,410
this road though because when you're

00:30:37,730 --> 00:30:41,330
building your wheel file when you're

00:30:39,410 --> 00:30:43,610
building your package it doesn't by

00:30:41,330 --> 00:30:45,200
default include all of the data files

00:30:43,610 --> 00:30:50,780
and stuff that you might have otherwise

00:30:45,200 --> 00:30:52,549
needed and what's frustrating is if you

00:30:50,780 --> 00:30:55,280
do it in developer mode it just kind of

00:30:52,549 --> 00:30:56,690
adds a link to the working copy so it

00:30:55,280 --> 00:30:58,250
looks like it's working until you build

00:30:56,690 --> 00:30:59,360
your package and deploy it and then it's

00:30:58,250 --> 00:31:02,150
missing all of its templates and all of

00:30:59,360 --> 00:31:04,809
its static files so you end up doing a

00:31:02,150 --> 00:31:04,809
little bit of fiddling

00:31:06,190 --> 00:31:13,580
so can you go all out and just Debian

00:31:10,789 --> 00:31:15,590
eyes or use an operating system package

00:31:13,580 --> 00:31:18,289
for your entire project

00:31:15,590 --> 00:31:21,760
can you put its virtual end and its

00:31:18,289 --> 00:31:24,350
static files and its dependencies all in

00:31:21,760 --> 00:31:25,429
one single I'm just gonna use Debian as

00:31:24,350 --> 00:31:26,890
an example because this is where I did

00:31:25,429 --> 00:31:29,419
have to go down this road

00:31:26,890 --> 00:31:30,770
one for seamless instant development to

00:31:29,419 --> 00:31:34,220
the server without having to use pip

00:31:30,770 --> 00:31:38,240
during deployment you can but also it's

00:31:34,220 --> 00:31:40,669
a little bit fiddly so the reason this

00:31:38,240 --> 00:31:44,539
was a nightmare when I decided to try

00:31:40,669 --> 00:31:45,649
and wrangle this is virtual ends you

00:31:44,539 --> 00:31:46,940
need to build them where they're gonna

00:31:45,649 --> 00:31:48,320
go you need to build them in the

00:31:46,940 --> 00:31:50,419
directory that they're gonna live in and

00:31:48,320 --> 00:31:52,580
you can't move them anyone who's tried

00:31:50,419 --> 00:31:55,880
to use the relocatable option in virtual

00:31:52,580 --> 00:31:57,380
end it doesn't work and it's not even

00:31:55,880 --> 00:31:58,640
included in the Python 3 built-in

00:31:57,380 --> 00:32:02,600
virtual ends because it's just not

00:31:58,640 --> 00:32:04,309
really feasible so I wanted to be able

00:32:02,600 --> 00:32:06,529
to build a Debian package that had the

00:32:04,309 --> 00:32:08,120
virtual end in it my goal was to make

00:32:06,529 --> 00:32:10,399
sure that you never need to download

00:32:08,120 --> 00:32:11,960
your dependencies from your the survey

00:32:10,399 --> 00:32:13,370
that you're deploying it to I wanted to

00:32:11,960 --> 00:32:17,299
leave the Python package index out of

00:32:13,370 --> 00:32:19,070
the whole deployment mechanism so to do

00:32:17,299 --> 00:32:20,779
that building the package means

00:32:19,070 --> 00:32:22,250
installing all the dependencies during

00:32:20,779 --> 00:32:23,659
the build process zipping it all up into

00:32:22,250 --> 00:32:26,809
a debian package and deploying it I

00:32:23,659 --> 00:32:29,120
ended up using an old tool called P

00:32:26,809 --> 00:32:33,649
builder for this and I'm not gonna go

00:32:29,120 --> 00:32:35,390
through this in detail today but I

00:32:33,649 --> 00:32:37,789
really ought to turn it into a talk or

00:32:35,390 --> 00:32:39,500
turn it into an automated script because

00:32:37,789 --> 00:32:41,090
this would be quite a useful thing to

00:32:39,500 --> 00:32:43,820
just have a way of building a virtual

00:32:41,090 --> 00:32:45,350
environment putting in a package P

00:32:43,820 --> 00:32:47,210
builder is an old-school Debian tool for

00:32:45,350 --> 00:32:49,820
package building it builds Debian

00:32:47,210 --> 00:32:51,500
packages in a CH rooted environment with

00:32:49,820 --> 00:32:53,510
a fresh Debbie and install for every

00:32:51,500 --> 00:32:57,049
time you build the package so the

00:32:53,510 --> 00:32:58,399
advantage of that is that you know that

00:32:57,049 --> 00:32:59,809
you've got your build dependencies right

00:32:58,399 --> 00:33:02,029
because the packaged append the build

00:32:59,809 --> 00:33:05,149
dependency the build will fail if you're

00:33:02,029 --> 00:33:06,500
missing Python dev or missing you know

00:33:05,149 --> 00:33:10,070
any of the dependencies that you might

00:33:06,500 --> 00:33:14,309
need but the other advantage of it is it

00:33:10,070 --> 00:33:16,619
just throws away that working copy of

00:33:14,309 --> 00:33:18,059
the CH rooted environment when you're

00:33:16,619 --> 00:33:20,700
done so it doesn't matter if your build

00:33:18,059 --> 00:33:23,070
process spams files into weird places

00:33:20,700 --> 00:33:26,879
during your install so I can install my

00:33:23,070 --> 00:33:29,099
virtual em into opt my project or

00:33:26,879 --> 00:33:31,019
wherever I want to put it and then as

00:33:29,099 --> 00:33:32,489
part of the build process move that into

00:33:31,019 --> 00:33:36,059
the target directory that gets zipped up

00:33:32,489 --> 00:33:37,830
by Debian this is actually an

00:33:36,059 --> 00:33:39,659
extraordinarily powerful tool for Debian

00:33:37,830 --> 00:33:41,279
based server infrastructure because it

00:33:39,659 --> 00:33:43,080
basically means that the deployment of

00:33:41,279 --> 00:33:45,179
your project is more or less instant

00:33:43,080 --> 00:33:48,869
even for all the dependencies and all of

00:33:45,179 --> 00:33:51,989
the virtual and building and you also

00:33:48,869 --> 00:33:54,089
have all of those files under the

00:33:51,989 --> 00:33:55,529
operating systems package management so

00:33:54,089 --> 00:33:58,489
rolling it back is as simple as

00:33:55,529 --> 00:34:01,200
installing the previous version

00:33:58,489 --> 00:34:07,019
uninstalling it as just apt-get remove

00:34:01,200 --> 00:34:09,899
the package it's it was a bit of a

00:34:07,019 --> 00:34:15,089
fiddly mess to go through but it was

00:34:09,899 --> 00:34:17,059
definitely worth it for me so I'm gonna

00:34:15,089 --> 00:34:19,879
close up and I'm gonna open up for

00:34:17,059 --> 00:34:24,139
questions in a bit of discussion shortly

00:34:19,879 --> 00:34:25,970
but I had one final thought which is

00:34:24,139 --> 00:34:28,079
does docker solve all these problems

00:34:25,970 --> 00:34:31,159
does doctor solve every problem does

00:34:28,079 --> 00:34:33,450
docker magic hands up if docker is magic

00:34:31,159 --> 00:34:35,419
who thinks that docker is the absolute

00:34:33,450 --> 00:34:41,220
solution to all of this

00:34:35,419 --> 00:34:42,720
not many people it actually you know I

00:34:41,220 --> 00:34:44,399
hate to say it but it kind of solves a

00:34:42,720 --> 00:34:45,899
lot of the problems a lot of the stuff

00:34:44,399 --> 00:34:49,409
that I was talking about docker really

00:34:45,899 --> 00:34:51,089
does it it forces you into a very 12

00:34:49,409 --> 00:34:52,649
factor model of doing things which is

00:34:51,089 --> 00:34:54,990
really not which is actually still quite

00:34:52,649 --> 00:34:56,909
useful and it gives you that separate

00:34:54,990 --> 00:34:58,950
build stage and deploy stage that is

00:34:56,909 --> 00:35:01,099
what all of my wrangling with with

00:34:58,950 --> 00:35:03,210
Debian packages is all about where

00:35:01,099 --> 00:35:04,440
during the build stage of your docker

00:35:03,210 --> 00:35:05,849
image you'll build your virtual

00:35:04,440 --> 00:35:07,890
environment you'll install all your

00:35:05,849 --> 00:35:09,270
dependencies you'll get everything set

00:35:07,890 --> 00:35:12,240
up and then that'll get zipped up and

00:35:09,270 --> 00:35:14,160
turned into a docker image and then the

00:35:12,240 --> 00:35:18,589
deployment is just the launch of the

00:35:14,160 --> 00:35:18,589
docker container with that image and

00:35:18,619 --> 00:35:27,539
that's a very good goal to have but it

00:35:24,270 --> 00:35:28,050
by but it buys you into a whole set of

00:35:27,539 --> 00:35:34,260
new

00:35:28,050 --> 00:35:37,020
because now you have docker and I think

00:35:34,260 --> 00:35:38,370
docker is I grudgingly think docker is

00:35:37,020 --> 00:35:39,900
really really cool because now that I

00:35:38,370 --> 00:35:41,280
finally had a chance to play with it I

00:35:39,900 --> 00:35:43,260
started working with it a month ago and

00:35:41,280 --> 00:35:45,090
then I was ranting to my colleagues

00:35:43,260 --> 00:35:51,120
going dammit this is actually really

00:35:45,090 --> 00:35:51,540
cool but I don't think it's the present

00:35:51,120 --> 00:35:52,800
yet

00:35:51,540 --> 00:35:55,590
I think docker is still a little bit

00:35:52,800 --> 00:35:58,680
young i I I'm happy to stand here and

00:35:55,590 --> 00:36:03,900
tell you that this is the future but I'm

00:35:58,680 --> 00:36:05,910
not sure if it's the present yet so this

00:36:03,900 --> 00:36:09,000
is a quote that I first got from Russell

00:36:05,910 --> 00:36:11,300
sitting down there and it's actually one

00:36:09,000 --> 00:36:14,700
that's really stuck with me especially

00:36:11,300 --> 00:36:16,680
so it was not coined by Russell it was

00:36:14,700 --> 00:36:23,490
coined by this is one that I'm not sure

00:36:16,680 --> 00:36:26,760
about pronunciation messag but it's a

00:36:23,490 --> 00:36:30,390
really good rule to have production

00:36:26,760 --> 00:36:32,100
needs to be boring production needs to

00:36:30,390 --> 00:36:37,080
be predictable production needs to be

00:36:32,100 --> 00:36:38,850
safe and if you're excited to use the

00:36:37,080 --> 00:36:41,310
technology you probably don't want to

00:36:38,850 --> 00:36:42,690
use it in production using Django

00:36:41,310 --> 00:36:44,940
actually does still excite me I really

00:36:42,690 --> 00:36:48,420
like Django so I make an exception in

00:36:44,940 --> 00:36:50,510
its case thank you very much for

00:36:48,420 --> 00:36:50,510
listening

00:36:55,670 --> 00:37:01,050
so I actually would like to contradict

00:36:58,890 --> 00:37:04,550
what Russell said at the end of the last

00:37:01,050 --> 00:37:06,810
talk about people coming up and saying

00:37:04,550 --> 00:37:08,430
this is my opinion rather than a

00:37:06,810 --> 00:37:09,780
question I am very much interested in

00:37:08,430 --> 00:37:11,400
hearing people's opinions and hearing

00:37:09,780 --> 00:37:12,900
about where they've done things

00:37:11,400 --> 00:37:16,050
differently and where they think I'm

00:37:12,900 --> 00:37:18,690
wrong but keep them to the twenty second

00:37:16,050 --> 00:37:21,960
level or something so that so that we

00:37:18,690 --> 00:37:23,910
can get some more opinions out okay so

00:37:21,960 --> 00:37:27,150
just this once you get you get a free

00:37:23,910 --> 00:37:31,200
pass just to get started with an actual

00:37:27,150 --> 00:37:32,609
question now sure so amber made the

00:37:31,200 --> 00:37:33,900
point earlier today that you know Django

00:37:32,609 --> 00:37:35,520
was opinionated and the reason it's

00:37:33,900 --> 00:37:36,990
opinionated it's okay to be opinionated

00:37:35,520 --> 00:37:37,980
because 80% of people just want to get

00:37:36,990 --> 00:37:39,930
their blog up and though their

00:37:37,980 --> 00:37:41,900
requirements are really boring really

00:37:39,930 --> 00:37:44,970
easy and Django suits those requirements

00:37:41,900 --> 00:37:47,190
is there an 80% solution for deployment

00:37:44,970 --> 00:37:48,900
I mean the most people who come to

00:37:47,190 --> 00:37:50,099
Django aren't DevOps people don't want

00:37:48,900 --> 00:37:51,930
to be there most people they just want

00:37:50,099 --> 00:37:53,670
to get their blog up or maybe a slightly

00:37:51,930 --> 00:37:55,440
more advanced site where they want to

00:37:53,670 --> 00:37:56,640
have yes database replication they want

00:37:55,440 --> 00:37:58,650
to have a bit of load balancing and some

00:37:56,640 --> 00:38:01,650
redundancy but they don't really want to

00:37:58,650 --> 00:38:03,480
dig into all this and most of them have

00:38:01,650 --> 00:38:06,300
relatively simple and common

00:38:03,480 --> 00:38:08,369
requirements is this even an achievable

00:38:06,300 --> 00:38:10,800
goal to have a no take these these

00:38:08,369 --> 00:38:13,050
config files just use those and put your

00:38:10,800 --> 00:38:14,460
source code there and it will run and be

00:38:13,050 --> 00:38:17,700
fine and then you can tweak it but that

00:38:14,460 --> 00:38:20,250
works is that an achievable goal I think

00:38:17,700 --> 00:38:23,190
the two scoops template project gets you

00:38:20,250 --> 00:38:25,109
kind of close to that I don't actually

00:38:23,190 --> 00:38:26,940
have a copy of the of the latest edition

00:38:25,109 --> 00:38:29,579
so I haven't read through that but I

00:38:26,940 --> 00:38:31,290
when I read the two scoops book I was

00:38:29,579 --> 00:38:33,089
very pleased to see that most of it

00:38:31,290 --> 00:38:35,250
didn't disagree with what I had found

00:38:33,089 --> 00:38:37,560
out after years of trying I think that

00:38:35,250 --> 00:38:41,579
the quick and dirty 80% solution that

00:38:37,560 --> 00:38:42,990
would be really nice would be use a

00:38:41,579 --> 00:38:45,329
simple WSGI

00:38:42,990 --> 00:38:47,160
thing like green unicorn use white noise

00:38:45,329 --> 00:38:48,569
for serving the static files so that

00:38:47,160 --> 00:38:50,760
it's just a part of that same thing

00:38:48,569 --> 00:38:53,250
throw that online somewhere

00:38:50,760 --> 00:38:55,950
reasonably safe like I almost want there

00:38:53,250 --> 00:39:00,210
to be a Heroku type model for doing your

00:38:55,950 --> 00:39:01,950
own deployments and the reason that's

00:39:00,210 --> 00:39:04,290
tricky is just because Heroku have done

00:39:01,950 --> 00:39:05,849
a lot of work on their side to do the

00:39:04,290 --> 00:39:08,430
process management and all of the that

00:39:05,849 --> 00:39:09,510
other stuff so if there was some easy

00:39:08,430 --> 00:39:10,950
alternative to

00:39:09,510 --> 00:39:12,270
set it up the same way you would for a

00:39:10,950 --> 00:39:13,680
Heroku project and then run it on your

00:39:12,270 --> 00:39:16,230
own server with this little thing and

00:39:13,680 --> 00:39:17,490
there's a piece of soft I think I think

00:39:16,230 --> 00:39:18,810
there are projects that are trying to do

00:39:17,490 --> 00:39:24,359
that but I don't know anything about

00:39:18,810 --> 00:39:26,280
them so I'm not sure if there is an 80%

00:39:24,359 --> 00:39:29,460
solution that you can just point people

00:39:26,280 --> 00:39:35,280
at maybe the two scoops template project

00:39:29,460 --> 00:39:38,430
is a good place to start um question

00:39:35,280 --> 00:39:41,430
amount debut Debian based deployments

00:39:38,430 --> 00:39:43,410
from how if you're a Debian package is

00:39:41,430 --> 00:39:46,109
the entire virtual end and all those

00:39:43,410 --> 00:39:48,450
dependencies so that obviously means

00:39:46,109 --> 00:39:50,160
that you can't have a generic Debian

00:39:48,450 --> 00:39:53,730
package that just sort of works if you

00:39:50,160 --> 00:39:55,380
have C extensions that's right so in in

00:39:53,730 --> 00:39:57,390
Debian terminology you're talking about

00:39:55,380 --> 00:39:58,650
a binary package you're talking you're

00:39:57,390 --> 00:39:59,940
not talking about a source package that

00:39:58,650 --> 00:40:02,220
would then be compiled able in every

00:39:59,940 --> 00:40:04,800
place so you build a binary package and

00:40:02,220 --> 00:40:07,740
it has dependencies for that operating

00:40:04,800 --> 00:40:11,130
system it has this requires Python 3 and

00:40:07,740 --> 00:40:13,079
Python 3 dev this requires a few

00:40:11,130 --> 00:40:15,630
whatever other dependencies you need so

00:40:13,079 --> 00:40:17,880
you use you use Debian to distribute a

00:40:15,630 --> 00:40:20,940
binary virtual package containing a

00:40:17,880 --> 00:40:22,109
virtual end and that because because yet

00:40:20,940 --> 00:40:23,970
most of the time you do end up with some

00:40:22,109 --> 00:40:27,740
C extensions like psycho PG 2 comes with

00:40:23,970 --> 00:40:29,760
C extensions and when you have a project

00:40:27,740 --> 00:40:33,000
so you have a project and you have

00:40:29,760 --> 00:40:37,500
expansions to it so say you have some

00:40:33,000 --> 00:40:41,000
custom plugins for that if it's in a

00:40:37,500 --> 00:40:44,190
virtual environment how do you extend

00:40:41,000 --> 00:40:46,740
the virtual environment in that Debian

00:40:44,190 --> 00:40:48,690
package is that something that is wise

00:40:46,740 --> 00:40:50,430
to do or is that where you just throw it

00:40:48,690 --> 00:40:53,970
away and you don't go down that line of

00:40:50,430 --> 00:40:57,540
line of deployment optional plug-ins for

00:40:53,970 --> 00:40:59,280
your so for example um as an example

00:40:57,540 --> 00:41:02,520
like you know how a virtual box has

00:40:59,280 --> 00:41:04,260
their OSE extensions something like that

00:41:02,520 --> 00:41:05,880
for a Python where you have an open

00:41:04,260 --> 00:41:08,280
say an open source project that has

00:41:05,880 --> 00:41:11,160
proprietary add-ons that sort of add on

00:41:08,280 --> 00:41:12,510
top of it rather than come bundled is it

00:41:11,160 --> 00:41:13,920
is that you just bundle it with the

00:41:12,510 --> 00:41:15,990
whole thing so yeah but you'd probably

00:41:13,920 --> 00:41:18,300
bundle it because that's very much a

00:41:15,990 --> 00:41:21,180
solution for the the Debian packaging

00:41:18,300 --> 00:41:22,589
one is a solution for it's actually

00:41:21,180 --> 00:41:23,160
controlled environment you're launching

00:41:22,589 --> 00:41:25,530
your own

00:41:23,160 --> 00:41:28,620
site to your own website infrastructure

00:41:25,530 --> 00:41:30,180
it's not a general-purpose solution like

00:41:28,620 --> 00:41:33,390
it's not an open this is now an

00:41:30,180 --> 00:41:34,800
open-source web site that it is if

00:41:33,390 --> 00:41:36,360
you're going down that road it's because

00:41:34,800 --> 00:41:37,740
you already know what platform you are

00:41:36,360 --> 00:41:39,900
launching to you wouldn't go down that

00:41:37,740 --> 00:41:41,400
road and then open source it for someone

00:41:39,900 --> 00:41:43,080
else to launch it on Heroku right you

00:41:41,400 --> 00:41:44,580
would actually it's because you've set

00:41:43,080 --> 00:41:48,150
the rules of your deployment environment

00:41:44,580 --> 00:41:49,770
so that would mean that optional plugins

00:41:48,150 --> 00:41:55,830
are things that you've already chosen

00:41:49,770 --> 00:42:00,810
and we would be bundled in thanks docker

00:41:55,830 --> 00:42:03,600
whoo-hoo yes I'm taking the 20 seconds

00:42:00,810 --> 00:42:05,640
to say how we're doing it because I have

00:42:03,600 --> 00:42:07,230
fair like whoo I've been doing the

00:42:05,640 --> 00:42:10,650
docker think the last few months as well

00:42:07,230 --> 00:42:13,800
and built a whole system up to you know

00:42:10,650 --> 00:42:15,030
dev can spend up basically identical to

00:42:13,800 --> 00:42:17,730
production you know which we found

00:42:15,030 --> 00:42:20,250
really useful but what we're doing is to

00:42:17,730 --> 00:42:21,840
build face we've gone and not you don't

00:42:20,250 --> 00:42:25,860
install the whole django app for

00:42:21,840 --> 00:42:27,900
instance in your image but the image

00:42:25,860 --> 00:42:29,580
puts all a lot of stuff in there but

00:42:27,900 --> 00:42:31,560
it's got a kind of a bootstrapping

00:42:29,580 --> 00:42:34,020
scripting process that it goes through

00:42:31,560 --> 00:42:35,880
so you split it up quickly and the first

00:42:34,020 --> 00:42:38,280
time it goes and gets all the PIP things

00:42:35,880 --> 00:42:39,870
it gets to your repo and stuff via get

00:42:38,280 --> 00:42:42,420
archive and then installs at the right

00:42:39,870 --> 00:42:44,250
place and you can mount that on a volume

00:42:42,420 --> 00:42:45,720
only container so that the second time

00:42:44,250 --> 00:42:48,150
you do it it's really quick if you're in

00:42:45,720 --> 00:42:50,730
development but I just thought I'd share

00:42:48,150 --> 00:42:52,140
a bit of that because that's it I would

00:42:50,730 --> 00:42:55,170
like to talk to you in more detail after

00:42:52,140 --> 00:42:57,000
because my latest project we are using

00:42:55,170 --> 00:42:58,500
docker yeah and it's still very much in

00:42:57,000 --> 00:42:59,940
development stages which is why I can

00:42:58,500 --> 00:43:01,530
say things like I'm not sure how I would

00:42:59,940 --> 00:43:03,750
solve the darker problem for production

00:43:01,530 --> 00:43:06,060
yet yeah but maybe you can help me learn

00:43:03,750 --> 00:43:09,480
so let's let's catch up yeah perfect

00:43:06,060 --> 00:43:11,160
cool grab more opinion from me yes

00:43:09,480 --> 00:43:12,420
please possibly part bin for you but

00:43:11,160 --> 00:43:14,940
also the other people since we were

00:43:12,420 --> 00:43:16,590
discussing it earlier yeah so on the mod

00:43:14,940 --> 00:43:19,260
whiskey front I do have a new project

00:43:16,590 --> 00:43:22,080
called mod whiskey Express it means you

00:43:19,260 --> 00:43:24,000
can pip install mod whiskey you can even

00:43:22,080 --> 00:43:26,310
pip install Apache if you don't have a

00:43:24,000 --> 00:43:28,830
working Apache on your box I have a

00:43:26,310 --> 00:43:30,990
project in play which has a whole

00:43:28,830 --> 00:43:33,240
structured build and deploy hook

00:43:30,990 --> 00:43:36,150
mechanism so you can have your app set

00:43:33,240 --> 00:43:40,559
up once and you can deploy to

00:43:36,150 --> 00:43:41,490
docker OpenShift and Heroku using mod

00:43:40,559 --> 00:43:44,190
whiskey and Apache

00:43:41,490 --> 00:43:46,740
although Heroku is Python free only or

00:43:44,190 --> 00:43:48,059
on your inbox yes so what your what

00:43:46,740 --> 00:43:51,839
you're describing is essentially a

00:43:48,059 --> 00:43:53,730
mechanism for turning mod whiskey into

00:43:51,839 --> 00:43:56,220
an execution model like green unicorn

00:43:53,730 --> 00:43:57,990
and your whiskey and so that soul was my

00:43:56,220 --> 00:44:00,000
only concern that I have with using mod

00:43:57,990 --> 00:44:02,220
whiskey these days which is I want my

00:44:00,000 --> 00:44:03,210
app server on a different box so that's

00:44:02,220 --> 00:44:04,740
something that's definitely worth

00:44:03,210 --> 00:44:06,210
investigating and for those people who

00:44:04,740 --> 00:44:08,520
are scared of Apache the whole point of

00:44:06,210 --> 00:44:12,380
my whiskey Xpress is it generates the

00:44:08,520 --> 00:44:12,380
Apache config for you you don't have

00:44:21,230 --> 00:44:32,520
okay I don't mean generally speaking I

00:44:24,000 --> 00:44:34,740
mean I think we're out of time the

00:44:32,520 --> 00:44:36,510
answer to your question is that's one

00:44:34,740 --> 00:44:38,309
road that I have not had to go down so I

00:44:36,510 --> 00:44:40,470
simply can't I can't really give you

00:44:38,309 --> 00:44:42,059
advice on that except um for a major

00:44:40,470 --> 00:44:45,660
project that I was working on they were

00:44:42,059 --> 00:44:47,099
saying oh we might want this to be

00:44:45,660 --> 00:44:48,690
deployed on Windows even though it was

00:44:47,099 --> 00:44:51,690
designed to be in a bunch of deployment

00:44:48,690 --> 00:44:53,279
and we basically decided that if they

00:44:51,690 --> 00:44:55,230
really forced that decision we would

00:44:53,279 --> 00:44:58,410
just hand them virtual image appliances

00:44:55,230 --> 00:44:59,880
to run on Windows on VMware so so that

00:44:58,410 --> 00:45:01,710
doesn't help I'm sorry I'll tell you

00:44:59,880 --> 00:45:03,089
just our use case because it's quite

00:45:01,710 --> 00:45:19,079
common actually we have to take

00:45:03,089 --> 00:45:20,309
screenshots on Windows ok Mac so we have

00:45:19,079 --> 00:45:24,059
to run Windows and we have to deploy

00:45:20,309 --> 00:45:25,980
code onto it yeah but that doesn't

00:45:24,059 --> 00:45:35,250
necessarily mean that you have to run

00:45:25,980 --> 00:45:37,079
your web application on during generally

00:45:35,250 --> 00:45:40,849
speaking a few I'd love to learn more

00:45:37,079 --> 00:45:40,849
but that's not where my expertise is now

00:45:41,710 --> 00:45:47,920
my question is about Jango settings file

00:45:45,369 --> 00:45:51,670
so I'm relatively new three to four

00:45:47,920 --> 00:45:56,769
years working in Vidya Jango so first we

00:45:51,670 --> 00:45:59,829
were using local file and one setting

00:45:56,769 --> 00:46:01,390
file local wild file was overwriting in

00:45:59,829 --> 00:46:04,690
the development environment then we

00:46:01,390 --> 00:46:06,339
moved on to two scoops model one file

00:46:04,690 --> 00:46:09,880
for local one for testing one for

00:46:06,339 --> 00:46:13,089
production but that has its own pitfalls

00:46:09,880 --> 00:46:16,230
so now we're using a mix of two scoops

00:46:13,089 --> 00:46:19,450
and variables environment variables

00:46:16,230 --> 00:46:21,819
right so but we're still facing some

00:46:19,450 --> 00:46:24,069
problems so if we have to run a general

00:46:21,819 --> 00:46:27,099
management command in the production

00:46:24,069 --> 00:46:29,470
environment we we have to do some things

00:46:27,099 --> 00:46:31,390
we have to actually run it from our

00:46:29,470 --> 00:46:35,109
local environment overriding the setting

00:46:31,390 --> 00:46:37,000
files with the actual values in the

00:46:35,109 --> 00:46:39,160
production environment otherwise so

00:46:37,000 --> 00:46:43,210
what's your take on this what's the best

00:46:39,160 --> 00:46:45,190
way to do that I'm not sure that I like

00:46:43,210 --> 00:46:46,779
the idea of having to do both I would

00:46:45,190 --> 00:46:48,670
definitely settle for one or the other

00:46:46,779 --> 00:46:49,690
in terms of if you're gonna use

00:46:48,670 --> 00:46:51,339
environment variables for your

00:46:49,690 --> 00:46:52,599
configuration you should probably use

00:46:51,339 --> 00:46:56,079
environment variables for all your

00:46:52,599 --> 00:46:58,809
configuration but maybe that's as simple

00:46:56,079 --> 00:47:00,700
as an environment variable that says

00:46:58,809 --> 00:47:02,559
this is a dev environment equals true

00:47:00,700 --> 00:47:05,470
and then that could configure a bunch of

00:47:02,559 --> 00:47:06,730
settings for you that could in in in the

00:47:05,470 --> 00:47:07,869
settings file you can you know because

00:47:06,730 --> 00:47:08,950
it is Python code you could have an if

00:47:07,869 --> 00:47:10,390
statement in there saying if this

00:47:08,950 --> 00:47:13,599
environment variable then set this and

00:47:10,390 --> 00:47:16,420
this and this and this no I'd have to

00:47:13,599 --> 00:47:19,829
talk to you a bit more afterwards to get

00:47:16,420 --> 00:47:23,079
a handle on your situation oh thank you

00:47:19,829 --> 00:47:25,029
so my twenty second comment yeah there's

00:47:23,079 --> 00:47:27,700
a there's a package called pics that

00:47:25,029 --> 00:47:29,769
I've come across which is apparently

00:47:27,700 --> 00:47:31,630
what it does in packages your package

00:47:29,769 --> 00:47:34,210
and all of its dependencies into a zip

00:47:31,630 --> 00:47:37,839
file then it prepends onto that zip file

00:47:34,210 --> 00:47:40,299
a shebang that points to Python and then

00:47:37,839 --> 00:47:41,519
a Python bootstrap script and apparently

00:47:40,299 --> 00:47:44,349
this works

00:47:41,519 --> 00:47:46,029
so yeah I've saw that I thought it might

00:47:44,349 --> 00:47:47,740
be a good way of getting this sort of

00:47:46,029 --> 00:47:50,470
here's a thing that you can deploy

00:47:47,740 --> 00:47:52,990
there's one one file like dotto but

00:47:50,470 --> 00:47:54,670
without docker a former a former

00:47:52,990 --> 00:47:56,680
colleague of mine also built

00:47:54,670 --> 00:48:01,360
which I think he called wheelbarrow and

00:47:56,680 --> 00:48:04,030
it does something like you configure a

00:48:01,360 --> 00:48:05,710
JSON file you run it it'll pull down all

00:48:04,030 --> 00:48:08,380
the dependencies and throw them into as

00:48:05,710 --> 00:48:13,810
wheels into a zip file and then you can

00:48:08,380 --> 00:48:16,060
use that to build the virtual them out

00:48:13,810 --> 00:48:17,560
of that zip file and that's a solution

00:48:16,060 --> 00:48:19,180
that I did something similar for with a

00:48:17,560 --> 00:48:20,800
previous project where I had a debian

00:48:19,180 --> 00:48:24,040
package that didn't have the fully built

00:48:20,800 --> 00:48:26,260
virtual end but it did install into a

00:48:24,040 --> 00:48:28,090
directory all of the wheels and a script

00:48:26,260 --> 00:48:30,220
to install the virtual end and that was

00:48:28,090 --> 00:48:33,280
a pretty good solution except it took a

00:48:30,220 --> 00:48:34,330
while to run the install because it

00:48:33,280 --> 00:48:36,970
still has to build the virtual

00:48:34,330 --> 00:48:37,870
environment once you're there and I had

00:48:36,970 --> 00:48:42,130
to deal with a whole lot of annoying

00:48:37,870 --> 00:48:44,260
problems with a bun to precise --es pip

00:48:42,130 --> 00:48:46,690
was using like the old version of setup

00:48:44,260 --> 00:48:49,540
tools and I couldn't use the virtual em

00:48:46,690 --> 00:48:52,300
to install pip so I had to use the get

00:48:49,540 --> 00:48:54,640
pip script to install pip and then use

00:48:52,300 --> 00:48:57,880
the pip to install the new pip and then

00:48:54,640 --> 00:49:00,640
get the zip file with all the wheels to

00:48:57,880 --> 00:49:02,290
be installed by that pip and that's why

00:49:00,640 --> 00:49:03,250
I was much happier when I discovered a

00:49:02,290 --> 00:49:10,270
way of building the virtual environment

00:49:03,250 --> 00:49:12,760
and then packaging it just one coin on

00:49:10,270 --> 00:49:15,340
the waiting that's something for example

00:49:12,760 --> 00:49:18,130
essentially does with when you install

00:49:15,340 --> 00:49:23,230
luckily they have a project where you

00:49:18,130 --> 00:49:26,130
can it's all the public sites and I

00:49:23,230 --> 00:49:29,440
think they have a settings file

00:49:26,130 --> 00:49:33,280
configure it mmm so it's not too crazy

00:49:29,440 --> 00:49:36,690
at all cool okay it's time thank you

00:49:33,280 --> 00:49:36,690
very much tom thank you

00:49:46,160 --> 00:49:48,220

YouTube URL: https://www.youtube.com/watch?v=1ABPQyANid0


