Title: Integrating Django with Identity Management Systems by Fraser Tweedale
Publication date: 2015-08-06
Playlist: PyCon Australia 2015 Django Miniconf
Description: 
	Most Django developers are familiar with authentication and
authorisation on the open web, but the requirements and technologies
used inside companies and large organisations are different:

- Identities and groups are probably stored in an external identity
  management system's directory rather than in an application's
  database tables.

- Authorisation decisions will be based on group membership and
  policies that are defined outside the application.

- Users may be expected or required to use a *single sign-on*
  technology such as Kerberos or SAML to authenticate to applications.

This talk will familiarise the audience with these technologies
and demonstrate how Django applications can be integrated
with an identity management system to meet business
requirements while providing a positive user experience.  Particular
technologies covered will include:

- FreeIPA: an open-source identity management solution, for defining
  users, groups and authorisation policies

- mod_auth_gssapi / mod_auth_kerb: Apache modules for Kerberos
  authentication

- mod_lookup_identity: Apache module to retrieve user information
  from a directory

The talk will conclude with discussion about upcoming Kerberos
features, techniques for dealing with multiple authentication
methods, and progress in making identity management integration
easier for Django developers.

People developing or deploying Django applications in business
environments or for large open source projects with centralised
identity management will get the most out of this talk.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:13,809 --> 00:00:20,329
so hello I'm Fraser and yes as was

00:00:18,439 --> 00:00:22,759
mentioned I work in Red Hat I'm an

00:00:20,329 --> 00:00:25,910
identity management engineer there and i

00:00:22,759 --> 00:00:28,160
work on free IPA which is an identity

00:00:25,910 --> 00:00:30,469
identity management solution and that

00:00:28,160 --> 00:00:33,590
i'll actually be demoing some of the

00:00:30,469 --> 00:00:36,579
features of today and i also work on the

00:00:33,590 --> 00:00:40,160
dog tag public key infrastructure for

00:00:36,579 --> 00:00:43,370
signing certificates and and smart card

00:00:40,160 --> 00:00:45,290
tokens and all that goodness I've never

00:00:43,370 --> 00:00:47,960
actually done anything with Django the

00:00:45,290 --> 00:00:50,120
first time I ever made a django app was

00:00:47,960 --> 00:00:53,000
last week when i had to get my slides

00:00:50,120 --> 00:00:56,720
ready so I don't know Django in depth so

00:00:53,000 --> 00:01:00,020
please don't ask me any deep Django

00:00:56,720 --> 00:01:02,680
questions and yeah so but I am a Python

00:01:00,020 --> 00:01:05,479
developer my work is mainly Python and

00:01:02,680 --> 00:01:10,630
Java for dog tag Python this free IPA

00:01:05,479 --> 00:01:14,990
and also write a lot of Haskell at home

00:01:10,630 --> 00:01:20,240
so the 30,000 foot view don't build your

00:01:14,990 --> 00:01:22,569
apps as identity silos its creator if

00:01:20,240 --> 00:01:27,529
you avoid doing this and you can use

00:01:22,569 --> 00:01:31,609
identity stores elsewhere you create a

00:01:27,529 --> 00:01:33,700
better experience for users and almost

00:01:31,609 --> 00:01:37,340
invariably a better experience for

00:01:33,700 --> 00:01:40,459
administrators as well Python social off

00:01:37,340 --> 00:01:44,329
and all off are solving this for the

00:01:40,459 --> 00:01:47,090
open web so if you want to use Google+

00:01:44,329 --> 00:01:50,060
or authenticate with github or whatever

00:01:47,090 --> 00:01:53,840
these provide nice solutions for doing

00:01:50,060 --> 00:01:56,659
that if your application is kind of

00:01:53,840 --> 00:02:00,259
meant for public consumption on the open

00:01:56,659 --> 00:02:04,159
web but of course not all applications

00:02:00,259 --> 00:02:06,950
are made for the open web and of course

00:02:04,159 --> 00:02:08,959
there are many applications that you

00:02:06,950 --> 00:02:11,450
know organizations might want to deploy

00:02:08,959 --> 00:02:14,930
or individuals might want to deploy for

00:02:11,450 --> 00:02:17,569
public consumption on the web or inside

00:02:14,930 --> 00:02:20,120
of organizations so whether you are

00:02:17,569 --> 00:02:22,160
building kind of custom or bespoke

00:02:20,120 --> 00:02:24,440
applications for organizations to

00:02:22,160 --> 00:02:27,320
run inside their firewalls for their

00:02:24,440 --> 00:02:29,180
employees and affiliates or whether

00:02:27,320 --> 00:02:32,720
you're just building Django application

00:02:29,180 --> 00:02:34,070
for anyone out there to use this is a

00:02:32,720 --> 00:02:37,670
concern that you should be thinking

00:02:34,070 --> 00:02:40,340
about so what is identity management

00:02:37,670 --> 00:02:45,500
while identity management stores all of

00:02:40,340 --> 00:02:48,470
the user group host policy access policy

00:02:45,500 --> 00:02:50,900
information for an organization or a

00:02:48,470 --> 00:02:52,940
collection of organizations so it's

00:02:50,900 --> 00:02:55,460
widely used in corporations basically if

00:02:52,940 --> 00:02:57,380
you if you work for a business there's

00:02:55,460 --> 00:02:59,450
probably an identity management system

00:02:57,380 --> 00:03:01,940
might be very surprised if there wasn't

00:02:59,450 --> 00:03:04,430
and these are solutions like free IPA

00:03:01,940 --> 00:03:08,710
Active Directory or even just a plain

00:03:04,430 --> 00:03:11,960
old ldap server openldap or 389

00:03:08,710 --> 00:03:15,700
directory server also large open source

00:03:11,960 --> 00:03:18,680
projects have in some cases large

00:03:15,700 --> 00:03:20,480
identity management systems deployed for

00:03:18,680 --> 00:03:23,600
use within their project and

00:03:20,480 --> 00:03:26,780
infrastructure and there are also some

00:03:23,600 --> 00:03:29,900
large open source projects with many

00:03:26,780 --> 00:03:32,150
identity silos and they could definitely

00:03:29,900 --> 00:03:35,030
benefit from moving to a centralized

00:03:32,150 --> 00:03:36,350
identity management system identity

00:03:35,030 --> 00:03:38,630
management systems also give you

00:03:36,350 --> 00:03:41,450
authentic a shin and authorization

00:03:38,630 --> 00:03:44,750
services so they act as an identity

00:03:41,450 --> 00:03:48,860
provider and often they implement one or

00:03:44,750 --> 00:03:52,310
more single sign-on solutions so what

00:03:48,860 --> 00:03:55,220
single sign-on better solutions like

00:03:52,310 --> 00:03:59,780
Kerberos or sam'l those are the main

00:03:55,220 --> 00:04:02,630
enterprise-e ones basically user can log

00:03:59,780 --> 00:04:05,420
in on their workstation and obtain a

00:04:02,630 --> 00:04:08,090
ticket on it or an assertion that they

00:04:05,420 --> 00:04:09,770
can then deliver to services those

00:04:08,090 --> 00:04:12,350
service providers can verify those

00:04:09,770 --> 00:04:15,350
tickets and rely on the information in

00:04:12,350 --> 00:04:17,600
them or the assertions in them so this

00:04:15,350 --> 00:04:20,299
gives you security no more password

00:04:17,600 --> 00:04:23,360
fatigue you don't want users having to

00:04:20,299 --> 00:04:27,040
remember you know n different passwords

00:04:23,360 --> 00:04:28,910
for n different services because

00:04:27,040 --> 00:04:31,550
invariably they're going to choose bad

00:04:28,910 --> 00:04:32,990
ones with single sign-on they really

00:04:31,550 --> 00:04:34,940
only have to remember one password

00:04:32,990 --> 00:04:35,419
hopefully they can remember one good

00:04:34,940 --> 00:04:38,520
past

00:04:35,419 --> 00:04:41,610
and you can also use a second factor

00:04:38,520 --> 00:04:43,410
authentication systems so it's also

00:04:41,610 --> 00:04:47,639
convenient for users it makes it a

00:04:43,410 --> 00:04:51,600
better user experience excuse me so once

00:04:47,639 --> 00:04:55,110
they're logged in and possess a Kerberos

00:04:51,600 --> 00:04:56,820
ticket for example any of the systems

00:04:55,110 --> 00:04:59,880
they need to use they don't have to

00:04:56,820 --> 00:05:05,550
login separately they're already logged

00:04:59,880 --> 00:05:08,520
in it's also good for onboarding so once

00:05:05,550 --> 00:05:10,919
a new employee or a new member of your

00:05:08,520 --> 00:05:14,880
organization is added to the central

00:05:10,919 --> 00:05:17,760
identity store you don't have to have an

00:05:14,880 --> 00:05:21,000
admin add them to you know all these

00:05:17,760 --> 00:05:24,030
different applications that are identity

00:05:21,000 --> 00:05:26,970
silos once they're in they can get their

00:05:24,030 --> 00:05:30,030
ticket and begin doing their work you

00:05:26,970 --> 00:05:31,910
also avoid duplication of data in a

00:05:30,030 --> 00:05:36,720
number of different silos and

00:05:31,910 --> 00:05:38,750
duplication of administration effort so

00:05:36,720 --> 00:05:42,120
as I mentioned some of the SSO protocols

00:05:38,750 --> 00:05:45,080
used in the enterprise kerberos which is

00:05:42,120 --> 00:05:47,120
a ticket based authentication protocol

00:05:45,080 --> 00:05:50,849
implementations include Active Directory

00:05:47,120 --> 00:05:53,820
MIT kerberos and Heimdall and it's also

00:05:50,849 --> 00:05:58,200
supported in browsers via the HTTP

00:05:53,820 --> 00:06:00,360
negotiate extension sam'l is an XML

00:05:58,200 --> 00:06:03,510
thing it's quite widely used in

00:06:00,360 --> 00:06:05,729
enterprises as well and in this case the

00:06:03,510 --> 00:06:09,360
service provider receives an XML object

00:06:05,729 --> 00:06:13,620
that contains attributes and that XML

00:06:09,360 --> 00:06:15,750
object is called an assertion so I'll

00:06:13,620 --> 00:06:17,930
talk a bit about free IPA which is the

00:06:15,750 --> 00:06:20,220
software i work on it's a centralized

00:06:17,930 --> 00:06:22,289
identity management system so you can

00:06:20,220 --> 00:06:25,979
define your users groups services and so

00:06:22,289 --> 00:06:28,560
on provides a Kerberos KDC and also lets

00:06:25,979 --> 00:06:31,950
you define host base access control

00:06:28,560 --> 00:06:34,050
policies so these can be used to say

00:06:31,950 --> 00:06:38,039
okay members of these groups can access

00:06:34,050 --> 00:06:41,340
these hosts or these services a related

00:06:38,039 --> 00:06:43,460
project is sssd which is the system

00:06:41,340 --> 00:06:46,460
security services demon

00:06:43,460 --> 00:06:48,650
this provides a Pam responder and also

00:06:46,460 --> 00:06:52,639
user information look up facilities and

00:06:48,650 --> 00:06:55,430
it can enforce access policies defined

00:06:52,639 --> 00:06:59,120
in free IPA those free IPAs h-back

00:06:55,430 --> 00:07:01,610
policies or Active Directory and it has

00:06:59,120 --> 00:07:05,030
a d bus interface so anything that can

00:07:01,610 --> 00:07:08,690
use d bus can talk to SSD and use it

00:07:05,030 --> 00:07:11,349
services so that's enough talking for

00:07:08,690 --> 00:07:13,430
now I'm going to switch over to a demo

00:07:11,349 --> 00:07:17,630
and I'm going to show you a Django

00:07:13,430 --> 00:07:21,560
application a very simple one but we're

00:07:17,630 --> 00:07:26,080
going to witness this Django application

00:07:21,560 --> 00:07:28,660
relying on free IPA and sssd to

00:07:26,080 --> 00:07:31,669
authenticate and authorize users and

00:07:28,660 --> 00:07:33,440
after that demo we'll just have a quick

00:07:31,669 --> 00:07:40,039
look at the configuration and how we've

00:07:33,440 --> 00:07:43,659
actually achieved this so first of all I

00:07:40,039 --> 00:07:43,659
login to free IPA

00:07:48,630 --> 00:08:01,640
and we'll add a new user so we're going

00:07:52,020 --> 00:08:04,980
to on board what's a nice name okay um

00:08:01,640 --> 00:08:06,660
you can see that from when I was doing

00:08:04,980 --> 00:08:08,840
my trial runs to make sure the demo

00:08:06,660 --> 00:08:08,840
worked

00:08:14,630 --> 00:08:17,830
so just done

00:08:18,649 --> 00:08:27,059
no the password is for me to test so now

00:08:22,800 --> 00:08:30,539
you all know my passwords right and now

00:08:27,059 --> 00:08:36,569
I'll switch over to an IPA enrolled

00:08:30,539 --> 00:08:38,729
workstation and here I will k in it to

00:08:36,569 --> 00:08:46,319
acquire a Kerberos ticket granting

00:08:38,729 --> 00:08:52,069
ticket as Carol and the first time you

00:08:46,319 --> 00:08:55,170
log in you have to enter a new password

00:08:52,069 --> 00:08:58,920
and now if I do a que triste you can see

00:08:55,170 --> 00:09:02,040
that we've acquired ticket granting

00:08:58,920 --> 00:09:06,110
ticket so this can then be used to

00:09:02,040 --> 00:09:06,110
acquire tickets for individual services

00:09:06,139 --> 00:09:11,699
this is the Django application that I'm

00:09:09,240 --> 00:09:15,750
going to demonstrate now you can see

00:09:11,699 --> 00:09:19,680
that the user is not logged in or no

00:09:15,750 --> 00:09:23,100
user is logged in and if we flip over to

00:09:19,680 --> 00:09:25,319
this applications admin interface we can

00:09:23,100 --> 00:09:27,620
see that there's no user Carol defined

00:09:25,319 --> 00:09:27,620
at all

00:09:29,990 --> 00:09:43,790
so now if i go to login okay that didn't

00:09:37,339 --> 00:09:46,060
work and I know why I just need to back

00:09:43,790 --> 00:09:46,060
to

00:09:46,880 --> 00:09:52,280
when I there we go okay that didn't work

00:09:50,690 --> 00:09:56,000
because the host based access control

00:09:52,280 --> 00:09:58,280
policy is kicked in so there's an access

00:09:56,000 --> 00:10:02,630
policy that says that only members of a

00:09:58,280 --> 00:10:05,620
particular group are allowed to are

00:10:02,630 --> 00:10:10,430
authorized to access the Django service

00:10:05,620 --> 00:10:11,750
so if i go to carol's groups there's a

00:10:10,430 --> 00:10:13,250
command line that you can do all of this

00:10:11,750 --> 00:10:17,480
through as well which i actually prefer

00:10:13,250 --> 00:10:19,490
i don't know my way around their web UI

00:10:17,480 --> 00:10:22,040
that well okay user group so we want to

00:10:19,490 --> 00:10:27,560
add some groups we're going to add Carol

00:10:22,040 --> 00:10:29,180
to the Django group and she's in the

00:10:27,560 --> 00:10:33,170
helpdesk department so we'll add her to

00:10:29,180 --> 00:10:38,560
that group as well good we'll add those

00:10:33,170 --> 00:10:38,560
groups okay whoops

00:10:40,480 --> 00:10:44,100
so let's try that again

00:10:46,230 --> 00:10:54,330
ok now we're logged in as cattle and we

00:10:49,830 --> 00:10:55,880
can see just on this table of who the

00:10:54,330 --> 00:10:58,980
users are when they will last logged in

00:10:55,880 --> 00:11:04,740
we've just logged in that's out by 10

00:10:58,980 --> 00:11:09,330
hours because you TC plus 10 right and

00:11:04,740 --> 00:11:11,370
if we flip back over to the admin

00:11:09,330 --> 00:11:14,160
interface we can see the carol has been

00:11:11,370 --> 00:11:16,560
added but not only has the application

00:11:14,160 --> 00:11:19,050
become aware of the user name but it's

00:11:16,560 --> 00:11:21,720
also found out about carol's email

00:11:19,050 --> 00:11:24,860
address and her first name and first

00:11:21,720 --> 00:11:29,490
name and last name that we put in and

00:11:24,860 --> 00:11:32,070
further if we have a look at her groups

00:11:29,490 --> 00:11:35,250
you can see that the Django application

00:11:32,070 --> 00:11:43,560
is aware that Carol is in the helpdesk

00:11:35,250 --> 00:11:45,720
group this group was actually defined in

00:11:43,560 --> 00:11:47,730
the application already so that's one of

00:11:45,720 --> 00:11:52,850
the few things that I had explicitly

00:11:47,730 --> 00:11:54,720
configured in the application ok so

00:11:52,850 --> 00:11:59,550
that's all good and well what have we

00:11:54,720 --> 00:12:01,050
seen we've seen that without adding any

00:11:59,550 --> 00:12:03,930
information to the application the

00:12:01,050 --> 00:12:06,240
application has become aware of a new

00:12:03,930 --> 00:12:08,370
user the first time they logged in that

00:12:06,240 --> 00:12:11,970
user was able to login using a Kerberos

00:12:08,370 --> 00:12:14,010
ticket so the single sign-on system

00:12:11,970 --> 00:12:16,170
they've just acquired their Cobras

00:12:14,010 --> 00:12:20,580
ticket visit the application hit login

00:12:16,170 --> 00:12:24,290
and boom they're logged in so let's talk

00:12:20,580 --> 00:12:24,290
about how we achieved all of this

00:12:25,200 --> 00:12:32,560
there's a number of Apache modules that

00:12:29,110 --> 00:12:34,450
are in play here the first and probably

00:12:32,560 --> 00:12:37,120
the most important of these is modeled

00:12:34,450 --> 00:12:39,520
curb which provides the kerberos

00:12:37,120 --> 00:12:45,670
negotiate support so what's actually

00:12:39,520 --> 00:12:53,710
happened is that the web server when we

00:12:45,670 --> 00:12:58,510
visited the login page in fact i'll i'll

00:12:53,710 --> 00:13:04,270
just show you on the on the network

00:12:58,510 --> 00:13:07,210
console here so when carol first went to

00:13:04,270 --> 00:13:12,540
the login page there was a 401

00:13:07,210 --> 00:13:16,900
unauthorized and in the response header

00:13:12,540 --> 00:13:18,610
www authenticate and negotiate so the

00:13:16,900 --> 00:13:21,130
first time the user hits the page it

00:13:18,610 --> 00:13:26,380
says no sorry go away but I'm willing to

00:13:21,130 --> 00:13:28,090
do a Kerberos negotiate with you so then

00:13:26,380 --> 00:13:30,340
on the subsequent request just re

00:13:28,090 --> 00:13:37,620
requesting the same resource but

00:13:30,340 --> 00:13:44,270
including hey it should be

00:13:37,620 --> 00:13:44,270
I need to enable the system logs

00:13:47,880 --> 00:13:55,540
302 here it is right so on the on the

00:13:53,230 --> 00:13:59,110
second request re requesting the same

00:13:55,540 --> 00:14:01,240
resource but with the curb or a service

00:13:59,110 --> 00:14:05,010
ticket conveyed in the authorization

00:14:01,240 --> 00:14:08,800
header this time the authorization was

00:14:05,010 --> 00:14:10,380
passed by Apache and some information

00:14:08,800 --> 00:14:13,060
about what was in that service ticket

00:14:10,380 --> 00:14:15,610
was then conveyed to the application

00:14:13,060 --> 00:14:17,830
through risky environment variables the

00:14:15,610 --> 00:14:20,279
application has recognized them logged

00:14:17,830 --> 00:14:23,140
in the user and then 302 redirected to

00:14:20,279 --> 00:14:29,440
the landing page which was just the

00:14:23,140 --> 00:14:32,080
front page here if we do a Kahless now

00:14:29,440 --> 00:14:34,960
we can see in fact as well as the ticket

00:14:32,080 --> 00:14:37,720
granting ticket we have a ticket for

00:14:34,960 --> 00:14:39,490
HDTV f-22 for IP a dot local so that's

00:14:37,720 --> 00:14:45,550
the service ticket and for that

00:14:39,490 --> 00:14:47,320
particular web server so that's model

00:14:45,550 --> 00:14:50,529
curb and gives you that capability

00:14:47,320 --> 00:14:53,350
there's also mod auth gssapi which is a

00:14:50,529 --> 00:14:56,410
more modern version of this module mod

00:14:53,350 --> 00:15:00,550
or then said Pam was what performed the

00:14:56,410 --> 00:15:03,700
HVAC rule enforcement so in this case

00:15:00,550 --> 00:15:08,260
there is a Pam stack configured for the

00:15:03,700 --> 00:15:11,190
service and I'll just show you some of

00:15:08,260 --> 00:15:11,190
the config files now

00:15:11,509 --> 00:15:14,509
sorry

00:15:17,329 --> 00:15:20,290
etsy

00:15:29,660 --> 00:15:36,440
this is what the model curb

00:15:33,390 --> 00:15:36,440
configuration looks like

00:15:38,470 --> 00:15:48,820
so we can see negotiate on there's the

00:15:44,450 --> 00:15:52,220
keytab there which the host will use to

00:15:48,820 --> 00:15:54,410
authenticate the service ticket that

00:15:52,220 --> 00:15:57,110
their client sends and this line here

00:15:54,410 --> 00:16:02,050
require Pam account Django is what's

00:15:57,110 --> 00:16:04,970
going to cause the cause Apache here to

00:16:02,050 --> 00:16:09,490
perform an account verification against

00:16:04,970 --> 00:16:09,490
a Pam stack Pam service called Jango

00:16:13,649 --> 00:16:23,720
and if we have a look at cat etsy panda

00:16:18,839 --> 00:16:26,879
d Django yes we can see this line here

00:16:23,720 --> 00:16:31,290
account required Pam SSS so what's

00:16:26,879 --> 00:16:32,929
happening here is that Apache is calling

00:16:31,290 --> 00:16:36,720
you to the Pam stack to say hey is this

00:16:32,929 --> 00:16:42,230
is this user Carol who is at this point

00:16:36,720 --> 00:16:46,019
authenticated via modeled curb is she

00:16:42,230 --> 00:16:48,809
permitted to access or two or to use the

00:16:46,019 --> 00:16:55,769
Django service and the service name is

00:16:48,809 --> 00:16:58,559
just the name of the file here the pan

00:16:55,769 --> 00:17:03,149
then goes to the Pam SSS responder which

00:16:58,559 --> 00:17:05,970
talks to sssd and asks it where the

00:17:03,149 --> 00:17:11,010
carol is authorized to access Django and

00:17:05,970 --> 00:17:23,209
then that goes and looks up the h-back

00:17:11,010 --> 00:17:23,209
rules in free IPA so we go IPA H find

00:17:23,270 --> 00:17:29,970
will see the h-back rules here so there

00:17:27,149 --> 00:17:32,880
is an allow all rule but it's currently

00:17:29,970 --> 00:17:36,240
disabled and there's a rule demo here

00:17:32,880 --> 00:17:38,760
which says that users who are members of

00:17:36,240 --> 00:17:42,049
the group Django may access the service

00:17:38,760 --> 00:17:44,340
Django so that's how the authorization

00:17:42,049 --> 00:17:50,390
host based access control is being

00:17:44,340 --> 00:17:53,070
enforced with an auth instead sorry mod

00:17:50,390 --> 00:17:56,009
name of the module

00:17:53,070 --> 00:18:01,539
whatever it is yeah model and Zed pen

00:17:56,009 --> 00:18:03,669
okay mod look up identity is how the

00:18:01,539 --> 00:18:06,909
application is learning about things

00:18:03,669 --> 00:18:09,070
like the email address the users first

00:18:06,909 --> 00:18:13,019
name and last name and their group

00:18:09,070 --> 00:18:16,019
information so if we flip back to the

00:18:13,019 --> 00:18:16,019
configuration

00:18:21,950 --> 00:18:30,880
we can see the look up identity module

00:18:27,200 --> 00:18:33,740
configuration here so it's activating on

00:18:30,880 --> 00:18:38,389
particular locations including / logon

00:18:33,740 --> 00:18:43,179
and this here basically says for a

00:18:38,389 --> 00:18:47,299
particular user object that it can

00:18:43,179 --> 00:18:51,139
retrieve via sssd and then sssd looks it

00:18:47,299 --> 00:18:54,409
up in the free IPA ldap tree so we say

00:18:51,139 --> 00:18:56,269
please map the email attribute to this

00:18:54,409 --> 00:19:01,010
variable in the request environment

00:18:56,269 --> 00:19:03,049
remote user email map the first name to

00:19:01,010 --> 00:19:05,389
remote user first name so on for group

00:19:03,049 --> 00:19:08,929
it's an iterator so it says for each

00:19:05,389 --> 00:19:12,679
group this is going to create remote

00:19:08,929 --> 00:19:16,789
user group underscore one IP a user's

00:19:12,679 --> 00:19:20,330
remote user group under school to django

00:19:16,789 --> 00:19:23,450
and there's also remote user group

00:19:20,330 --> 00:19:26,510
underscore n which contains the number

00:19:23,450 --> 00:19:28,159
of groups that have been populated into

00:19:26,510 --> 00:19:34,850
the environment so you can then just do

00:19:28,159 --> 00:19:38,120
a you know for range actually they start

00:19:34,850 --> 00:19:42,529
from one so be four range 1 to n plus 1

00:19:38,120 --> 00:19:44,630
and then look up all of the groups so

00:19:42,529 --> 00:19:51,289
that's how the application is learning

00:19:44,630 --> 00:19:53,779
about that information where are we

00:19:51,289 --> 00:19:59,269
right and finally I haven't demonstrated

00:19:53,779 --> 00:20:03,769
this but mod intercept form submit is

00:19:59,269 --> 00:20:05,809
used in the event that the user can't

00:20:03,769 --> 00:20:09,139
use SSO for whatever reason they can't

00:20:05,809 --> 00:20:10,490
obtain Kerberos ticket maybe there's a

00:20:09,139 --> 00:20:13,580
communication problem between their

00:20:10,490 --> 00:20:16,669
workstation and the Kerberos key

00:20:13,580 --> 00:20:21,320
distribution center then you can defer

00:20:16,669 --> 00:20:24,260
to using a normal login form and if

00:20:21,320 --> 00:20:26,200
there's I'll show you the config for

00:20:24,260 --> 00:20:29,889
this as well because that'll probably

00:20:26,200 --> 00:20:29,889
help make it clearer

00:20:31,529 --> 00:20:38,649
right so it uses the code provided in

00:20:35,860 --> 00:20:42,149
model with NZD pan to actually do its

00:20:38,649 --> 00:20:45,279
work but if there's a post it looks for

00:20:42,149 --> 00:20:46,600
these named fields that you tell her

00:20:45,279 --> 00:20:48,940
here so in this case username and

00:20:46,600 --> 00:20:54,340
password it looks for those fields in a

00:20:48,940 --> 00:20:58,110
post request if it finds them then mod

00:20:54,340 --> 00:21:00,549
in deserve forms submit will go and

00:20:58,110 --> 00:21:02,639
attempt to perform the use of the

00:21:00,549 --> 00:21:07,570
authentication on the user's behalf

00:21:02,639 --> 00:21:11,169
against the authentication server so

00:21:07,570 --> 00:21:13,059
this is just a way where you can even

00:21:11,169 --> 00:21:16,690
with your regular login form just use

00:21:13,059 --> 00:21:20,230
modern intercept form submit and begin

00:21:16,690 --> 00:21:23,230
using a central identity store and the

00:21:20,230 --> 00:21:25,649
authorization service it provides rather

00:21:23,230 --> 00:21:29,580
than storing the username and password

00:21:25,649 --> 00:21:29,580
in your own database

00:21:33,180 --> 00:21:38,100
okay so to configure this in Django

00:21:35,430 --> 00:21:40,680
there's a few things you have to do so

00:21:38,100 --> 00:21:42,720
this is finally the Django specific part

00:21:40,680 --> 00:21:45,120
of this talk up until now everything has

00:21:42,720 --> 00:21:48,840
been pretty much equally applicable to

00:21:45,120 --> 00:21:51,420
any sort of web framework in any

00:21:48,840 --> 00:21:56,040
language but now I'm going to talk about

00:21:51,420 --> 00:21:57,660
the Django specific things so for your

00:21:56,040 --> 00:22:00,690
middleware classes you want to use

00:21:57,660 --> 00:22:03,030
remote user middleware or in our case we

00:22:00,690 --> 00:22:06,440
use persistent remote user middleware

00:22:03,030 --> 00:22:09,690
which will be arriving in Django 19

00:22:06,440 --> 00:22:12,330
which is what allows us to authenticate

00:22:09,690 --> 00:22:16,320
only on the / login or / wherever you

00:22:12,330 --> 00:22:18,300
want your login resource and upon a

00:22:16,320 --> 00:22:21,030
successful authentication add to that

00:22:18,300 --> 00:22:24,840
resource it will then create a session

00:22:21,030 --> 00:22:26,790
so the remote user middleware normally

00:22:24,840 --> 00:22:29,370
looks for the remote user in the request

00:22:26,790 --> 00:22:31,820
environment on every request and if it

00:22:29,370 --> 00:22:34,020
isn't there it'll log the user out

00:22:31,820 --> 00:22:35,550
assistant remote user middleware you can

00:22:34,020 --> 00:22:38,370
use to authenticate the user at a

00:22:35,550 --> 00:22:42,450
particular resource and from that point

00:22:38,370 --> 00:22:47,760
on they have cookie-based session the

00:22:42,450 --> 00:22:51,210
remote user atra middleware is not going

00:22:47,760 --> 00:22:53,850
to be included in Django proper it was

00:22:51,210 --> 00:22:55,350
proposed but rejected this is what's

00:22:53,850 --> 00:22:57,510
pulling in the information from the

00:22:55,350 --> 00:22:58,920
request environment from those

00:22:57,510 --> 00:23:01,730
environment variables that were

00:22:58,920 --> 00:23:05,030
populated by mod lookup identity so the

00:23:01,730 --> 00:23:08,970
remote user email remote user first name

00:23:05,030 --> 00:23:11,300
remote user groups for the

00:23:08,970 --> 00:23:14,910
authentication backends you need to use

00:23:11,300 --> 00:23:16,920
remote user back end and then model back

00:23:14,910 --> 00:23:21,450
end at the end remote user back end will

00:23:16,920 --> 00:23:25,520
and as you saw create the user object in

00:23:21,450 --> 00:23:25,520
the database tables for Django

00:23:28,250 --> 00:23:33,360
yes but you can suppress that by sub

00:23:30,720 --> 00:23:35,759
classing it and using the subclass and

00:23:33,360 --> 00:23:39,330
create unknown user false so you can

00:23:35,759 --> 00:23:41,549
have purely transient user objects in

00:23:39,330 --> 00:23:45,779
your application that have been created

00:23:41,549 --> 00:23:49,320
from and populated with information from

00:23:45,779 --> 00:23:51,389
the request environment you need to work

00:23:49,320 --> 00:23:54,919
around for the login form so you can see

00:23:51,389 --> 00:23:57,360
we actually use the regular login view

00:23:54,919 --> 00:24:00,509
for logging in and in the event that

00:23:57,360 --> 00:24:03,649
there was no authentication request on

00:24:00,509 --> 00:24:07,169
that first time when I had not added

00:24:03,649 --> 00:24:12,480
Carol to the group Django in order to

00:24:07,169 --> 00:24:14,850
permit access to the application so the

00:24:12,480 --> 00:24:18,210
login does not observe remote user by

00:24:14,850 --> 00:24:21,840
default so the user will appear to be

00:24:18,210 --> 00:24:24,929
logged in but you'll still see password

00:24:21,840 --> 00:24:26,700
and username field there was a ticket

00:24:24,929 --> 00:24:29,789
open for that but they closed it won't

00:24:26,700 --> 00:24:32,220
fix unfortunately so the workaround is

00:24:29,789 --> 00:24:35,820
basically to wrap the Django contrary

00:24:32,220 --> 00:24:38,970
bought login view and then explicitly

00:24:35,820 --> 00:24:40,590
check request user dot is authenticated

00:24:38,970 --> 00:24:43,049
and if so then you're going to redirect

00:24:40,590 --> 00:24:47,220
to your landing page and then update URL

00:24:43,049 --> 00:24:49,919
stop by to use the wrapped view user

00:24:47,220 --> 00:24:52,370
creation I covered remote user

00:24:49,919 --> 00:24:54,720
attributes the motto identity lookup

00:24:52,370 --> 00:24:59,909
variables and updates the user object

00:24:54,720 --> 00:25:02,009
and it does in fact update it so if if

00:24:59,909 --> 00:25:04,860
the last name changes of the email

00:25:02,009 --> 00:25:09,240
address changes so this was also

00:25:04,860 --> 00:25:13,019
proposed but I mentioned that so and

00:25:09,240 --> 00:25:15,990
that's about all resources there's a

00:25:13,019 --> 00:25:18,110
remote user auth how to the free IP a

00:25:15,990 --> 00:25:21,149
web app authentication wiki page and

00:25:18,110 --> 00:25:23,070
free IPA users and free IPA on freenode

00:25:21,149 --> 00:25:28,759
if you're interested in the free AP a

00:25:23,070 --> 00:25:28,759
project and that's all thanks

00:25:35,820 --> 00:25:39,760
thank you very probably got time for one

00:25:37,990 --> 00:25:48,880
or two quick questions if firm wants to

00:25:39,760 --> 00:25:52,270
run up just you were talking to cobras

00:25:48,880 --> 00:25:55,120
is there similar stuff as sam'l is it

00:25:52,270 --> 00:25:57,730
yeah other easier will have advantages

00:25:55,120 --> 00:26:02,140
yep it's about the same the module you

00:25:57,730 --> 00:26:04,900
would use is mod auth melon and yeah

00:26:02,140 --> 00:26:06,250
similarly it will it will pull

00:26:04,900 --> 00:26:08,650
information out of those sam'l

00:26:06,250 --> 00:26:10,060
assertions and populate the environment

00:26:08,650 --> 00:26:11,140
and is quite configurable you know

00:26:10,060 --> 00:26:13,540
you're going to tell it what you want

00:26:11,140 --> 00:26:14,830
the environment variables to be where

00:26:13,540 --> 00:26:17,230
you want them to pull the information

00:26:14,830 --> 00:26:21,790
from in the assertion and so on so it's

00:26:17,230 --> 00:26:24,280
quite similar you can also use client

00:26:21,790 --> 00:26:27,040
TLS certificates and populate remote

00:26:24,280 --> 00:26:29,170
user and then use mod lookup identity to

00:26:27,040 --> 00:26:31,120
pull in information about a user that

00:26:29,170 --> 00:26:37,630
has been authenticated via a TLS

00:26:31,120 --> 00:26:41,170
certificate and so on hi sort of be a

00:26:37,630 --> 00:26:43,180
pain so why I go with the Apache module

00:26:41,170 --> 00:26:44,920
for this rather than using say Django or

00:26:43,180 --> 00:26:47,110
LDAP which is quite capable of looking

00:26:44,920 --> 00:26:49,510
up users and pairing them together and

00:26:47,110 --> 00:26:53,200
giving you those persistent user classes

00:26:49,510 --> 00:26:54,730
in a much more flexible manner that

00:26:53,200 --> 00:26:56,650
isn't as intrusive with the apache

00:26:54,730 --> 00:26:58,720
config and a little bit simpler plus it

00:26:56,650 --> 00:27:00,910
also gives you that inherent fallback if

00:26:58,720 --> 00:27:03,850
negotiate or fails direct to your old

00:27:00,910 --> 00:27:05,470
episodes anyway so why use the the

00:27:03,850 --> 00:27:08,460
method you used over something like jang

00:27:05,470 --> 00:27:12,640
with ldap in combination with model curb

00:27:08,460 --> 00:27:14,410
yep now that's a good question the

00:27:12,640 --> 00:27:16,120
benefit of doing it this way is if you

00:27:14,410 --> 00:27:18,670
have other applications written in other

00:27:16,120 --> 00:27:21,400
languages or frameworks then you need to

00:27:18,670 --> 00:27:22,750
make you know the small changes like you

00:27:21,400 --> 00:27:25,060
saw you know there were only a handful

00:27:22,750 --> 00:27:26,920
of changes that we needed to make in

00:27:25,060 --> 00:27:28,840
Django or the Middle West and most of

00:27:26,920 --> 00:27:31,450
them will work arounds so you're going

00:27:28,840 --> 00:27:34,920
to be presumably having a similarly

00:27:31,450 --> 00:27:36,430
small amount of work to adapt

00:27:34,920 --> 00:27:38,110
applications written for other

00:27:36,430 --> 00:27:40,600
frameworks or other or written in other

00:27:38,110 --> 00:27:42,850
languages to use the authenticate

00:27:40,600 --> 00:27:44,650
in front ends provided in Apache on the

00:27:42,850 --> 00:27:48,850
other hand if you're purely concerned

00:27:44,650 --> 00:27:51,910
with writing Django applications and for

00:27:48,850 --> 00:27:53,710
for you in that context it's better to

00:27:51,910 --> 00:27:56,080
be able to say hey you can just put this

00:27:53,710 --> 00:27:58,360
on engine X on apache on anything and it

00:27:56,080 --> 00:28:01,780
will do all the work for you then using

00:27:58,360 --> 00:28:04,960
middleware or module you know written in

00:28:01,780 --> 00:28:06,250
Python for Django makes more sense so

00:28:04,960 --> 00:28:08,460
those are the two different approaches

00:28:06,250 --> 00:28:11,350
like everything there's trade-offs but

00:28:08,460 --> 00:28:13,150
for us on the identity team we

00:28:11,350 --> 00:28:18,700
definitely want to promote doing it this

00:28:13,150 --> 00:28:21,730
way Thanks can I use engineers instead

00:28:18,700 --> 00:28:25,960
of Apache and have a similar setup there

00:28:21,730 --> 00:28:28,300
was an intern working on similar modules

00:28:25,960 --> 00:28:30,790
as what you saw here for engine X i

00:28:28,300 --> 00:28:34,330
believe the project was successful but i

00:28:30,790 --> 00:28:36,040
am not acutely aware of exactly what's

00:28:34,330 --> 00:28:38,140
been done and how far along it is and

00:28:36,040 --> 00:28:40,110
how easy it is to use but i might

00:28:38,140 --> 00:28:42,970
encourage you if you're interested to

00:28:40,110 --> 00:28:46,030
follow up with me or with the free IPA

00:28:42,970 --> 00:28:48,100
team and hopefully we can get a good

00:28:46,030 --> 00:28:50,050
answer to your question that way ok is

00:28:48,100 --> 00:28:52,270
there a REST API to administer it to

00:28:50,050 --> 00:28:53,890
create users and stuff like that so that

00:28:52,270 --> 00:28:58,330
I can let my users register themselves

00:28:53,890 --> 00:29:02,410
as part of a web app with free IPA there

00:28:58,330 --> 00:29:04,870
is an xml RPC api and one of the

00:29:02,410 --> 00:29:07,330
developers has recently been working on

00:29:04,870 --> 00:29:09,970
a community portal project which is not

00:29:07,330 --> 00:29:11,440
going to be part of free IPA which but

00:29:09,970 --> 00:29:15,490
which is designed to be easily

00:29:11,440 --> 00:29:17,650
integrated which will allow people

00:29:15,490 --> 00:29:21,610
coming in from the public to sign up and

00:29:17,650 --> 00:29:24,309
being entered into a free IPA database

00:29:21,610 --> 00:29:28,190
ok thanks

00:29:24,309 --> 00:29:31,460
thank you for the talk with public

00:29:28,190 --> 00:29:34,760
terminals like a browser at a internet

00:29:31,460 --> 00:29:37,309
kiosk sort of thing one would assume

00:29:34,760 --> 00:29:39,100
that you would probably want to use you

00:29:37,309 --> 00:29:41,809
know one-time passwords or some other

00:29:39,100 --> 00:29:43,549
authentication factor the other thing is

00:29:41,809 --> 00:29:48,350
that you'd probably also want to log out

00:29:43,549 --> 00:29:50,900
and my understanding of the Apache login

00:29:48,350 --> 00:29:52,820
at the HTTP level is it was actually

00:29:50,900 --> 00:29:58,070
quite difficult to enforce a log out how

00:29:52,820 --> 00:29:59,929
does that work if you acquire a ticket

00:29:58,070 --> 00:30:03,200
for Cobras for example you can destroy

00:29:59,929 --> 00:30:08,030
that ticket on your workstation if you

00:30:03,200 --> 00:30:13,040
use a persistent assistant remote user

00:30:08,030 --> 00:30:15,169
middleware and you also have a cookie

00:30:13,040 --> 00:30:16,340
based session created as a result of the

00:30:15,169 --> 00:30:18,740
logging that you've done with your

00:30:16,340 --> 00:30:20,210
single sign-on credential then you'll

00:30:18,740 --> 00:30:22,250
need to destroy that session as well

00:30:20,210 --> 00:30:23,960
through the standard log out procedure

00:30:22,250 --> 00:30:25,820
for that particular application and

00:30:23,960 --> 00:30:29,080
likewise for every application that

00:30:25,820 --> 00:30:31,910
you've logged into sam'l supports a

00:30:29,080 --> 00:30:33,590
single sign out feature I don't really

00:30:31,910 --> 00:30:36,110
know how it works my understanding is

00:30:33,590 --> 00:30:37,370
it's a hard problem but typically you

00:30:36,110 --> 00:30:41,679
couldn't do this sort of stuff on a

00:30:37,370 --> 00:30:41,679
public workstation at a net cafe anyway

00:30:42,010 --> 00:30:45,850
okay thank you very much Fraser

00:30:55,530 --> 00:30:57,590

YouTube URL: https://www.youtube.com/watch?v=HhcotmeioT8


