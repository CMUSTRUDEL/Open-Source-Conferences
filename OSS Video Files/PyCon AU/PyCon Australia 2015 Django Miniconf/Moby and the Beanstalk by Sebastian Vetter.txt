Title: Moby and the Beanstalk by Sebastian Vetter
Publication date: 2015-08-06
Playlist: PyCon Australia 2015 Django Miniconf
Description: 
	The popularity of Docker these days is incredible and a lot of people are already using it for their production systems. Although it makes a lot of things much simpler, it's not a silver bullet and comes with some caveats of it's own. This talk will describe the journey of my team at Mobify from a self-hosted VM to a AWS-backed web app deployed using Docker.


PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:15,710 --> 00:00:23,279
well from Germany for me your bill alone

00:00:20,430 --> 00:00:24,990
in especially pleased so yeah he is here

00:00:23,279 --> 00:00:33,180
to talk about movie enemies door please

00:00:24,990 --> 00:00:36,000
welcome as you hi everyone I actually

00:00:33,180 --> 00:00:38,280
got a very good introduction by Tom into

00:00:36,000 --> 00:00:42,030
the topic that I'll be talking about

00:00:38,280 --> 00:00:44,160
which is darker I'm basically one of

00:00:42,030 --> 00:00:46,860
those people that don't listen to that

00:00:44,160 --> 00:00:48,690
quote and we actually run docker in

00:00:46,860 --> 00:00:50,400
production because it's exciting

00:00:48,690 --> 00:00:54,330
technology and I like to work with

00:00:50,400 --> 00:00:56,820
exciting technology actually I don't

00:00:54,330 --> 00:01:00,629
really need to get into that Russell

00:00:56,820 --> 00:01:03,299
already introduced me if you want to

00:01:00,629 --> 00:01:07,080
find me get in touch with me I'm Alba

00:01:03,299 --> 00:01:10,229
 most places on the interwebs and as

00:01:07,080 --> 00:01:12,530
he said I'm from mobafire from Vancouver

00:01:10,229 --> 00:01:16,560
in Canada just coming down here to

00:01:12,530 --> 00:01:19,850
spread love about docker so what I'll be

00:01:16,560 --> 00:01:23,130
talking about is we have a legacy app

00:01:19,850 --> 00:01:25,800
that we ported to docker and we're

00:01:23,130 --> 00:01:28,200
running that on Amazon Beanstalk this is

00:01:25,800 --> 00:01:33,420
going to be because of the time this is

00:01:28,200 --> 00:01:37,140
going to be a very short overview a very

00:01:33,420 --> 00:01:40,920
high level but I'll do my best to give

00:01:37,140 --> 00:01:44,010
you a little bit of an insight just real

00:01:40,920 --> 00:01:47,480
quick what is darker docker is very

00:01:44,010 --> 00:01:49,920
exciting new technology it's a way of

00:01:47,480 --> 00:01:54,410
packaging and distributing your

00:01:49,920 --> 00:01:56,640
application and this is one of the

00:01:54,410 --> 00:01:58,620
comparisons that they make between

00:01:56,640 --> 00:02:00,570
running something as a virtual machine

00:01:58,620 --> 00:02:05,280
and running something on Darkar it

00:02:00,570 --> 00:02:08,179
basically gives you a filesystem

00:02:05,280 --> 00:02:10,619
isolation but it runs on the same OS and

00:02:08,179 --> 00:02:11,879
the same kernel so it's a lot more

00:02:10,619 --> 00:02:17,010
lightweight than actually having

00:02:11,879 --> 00:02:19,860
multiple VMs running and that's as far

00:02:17,010 --> 00:02:22,889
as I go into that and the other piece of

00:02:19,860 --> 00:02:26,480
technology that we've been using and the

00:02:22,889 --> 00:02:26,480
slides are cut off in many places

00:02:27,170 --> 00:02:36,480
so we're using Beanstalk as our path and

00:02:33,510 --> 00:02:39,420
bean stock basically is a pass offering

00:02:36,480 --> 00:02:42,000
that was developed by amazon they

00:02:39,420 --> 00:02:45,570
started originally off trying to

00:02:42,000 --> 00:02:50,570
replicate a similar scenario as Heroku

00:02:45,570 --> 00:02:53,340
or Heroku style past offerings but they

00:02:50,570 --> 00:02:55,740
recognize docker were excited about it

00:02:53,340 --> 00:02:59,520
and started supporting native docker

00:02:55,740 --> 00:03:02,460
deploys and they are one of the only

00:02:59,520 --> 00:03:04,200
ones that are considered production

00:03:02,460 --> 00:03:07,700
ready and the only ones that actually

00:03:04,200 --> 00:03:10,140
allow to distribute images most other

00:03:07,700 --> 00:03:12,720
darker past basically uses similar

00:03:10,140 --> 00:03:17,390
Heroku style built into a docker

00:03:12,720 --> 00:03:21,150
container so back to the app that I'm

00:03:17,390 --> 00:03:24,450
actually talking about what we had

00:03:21,150 --> 00:03:27,660
before is basically we had two virtual

00:03:24,450 --> 00:03:30,840
machines they had engine X as the web

00:03:27,660 --> 00:03:33,240
server setup we had our Django

00:03:30,840 --> 00:03:37,470
application behind that and then we had

00:03:33,240 --> 00:03:39,900
my sequel and rabbitmq set up manually

00:03:37,470 --> 00:03:42,030
on both machines as well and then there

00:03:39,900 --> 00:03:45,180
was replication between the database and

00:03:42,030 --> 00:03:48,240
the two RabbitMQ servers and that

00:03:45,180 --> 00:03:53,130
probably all sounds very fragile because

00:03:48,240 --> 00:03:56,420
it was very fragile and that's been one

00:03:53,130 --> 00:03:58,620
of the problems that we were having

00:03:56,420 --> 00:04:01,080
interesting for me that was the time

00:03:58,620 --> 00:04:03,540
that I was introduced into the company

00:04:01,080 --> 00:04:08,360
when they basically said like this is

00:04:03,540 --> 00:04:12,330
all the stuff that we don't like so I'm

00:04:08,360 --> 00:04:15,090
basically quoting here there must be a

00:04:12,330 --> 00:04:18,600
better way and we investigated what is

00:04:15,090 --> 00:04:20,400
this better way and we came up with

00:04:18,600 --> 00:04:25,100
docker as a solution running it on

00:04:20,400 --> 00:04:28,530
Beanstalk and what it looks like now is

00:04:25,100 --> 00:04:33,120
basically this with a very important

00:04:28,530 --> 00:04:36,030
part cut off on the right hand side so

00:04:33,120 --> 00:04:37,229
we basically have the Beanstalk

00:04:36,030 --> 00:04:40,660
application

00:04:37,229 --> 00:04:44,169
which is what Beanstalk allows you to

00:04:40,660 --> 00:04:45,880
sort of package things up into an

00:04:44,169 --> 00:04:49,030
application that can have different

00:04:45,880 --> 00:04:51,610
environments and it all boils down to

00:04:49,030 --> 00:04:54,880
ec2 instances that run docker containers

00:04:51,610 --> 00:04:58,419
and we basically have two different

00:04:54,880 --> 00:05:01,300
types one is the actual web application

00:04:58,419 --> 00:05:03,610
and the other one is the worker and what

00:05:01,300 --> 00:05:05,380
you can't see on the right-hand side one

00:05:03,610 --> 00:05:08,680
of the biggest benefits for us was to

00:05:05,380 --> 00:05:13,419
actually extract all the external

00:05:08,680 --> 00:05:16,030
services like database like rabbitmq and

00:05:13,419 --> 00:05:18,130
also some level of monitoring into

00:05:16,030 --> 00:05:21,430
hosted services that we don't have to

00:05:18,130 --> 00:05:25,120
care about anymore so let's take a

00:05:21,430 --> 00:05:28,270
closer look at sort of the way we do

00:05:25,120 --> 00:05:30,940
things one of the biggest benefits for

00:05:28,270 --> 00:05:34,990
us was that it has changed our

00:05:30,940 --> 00:05:37,410
deployment substantially one of the

00:05:34,990 --> 00:05:40,750
things so Tom previously mentioned

00:05:37,410 --> 00:05:43,930
continues as in deployment and we've

00:05:40,750 --> 00:05:47,830
actually gotten fairly close to that we

00:05:43,930 --> 00:05:51,370
have our local development set up we

00:05:47,830 --> 00:05:55,810
push a branch or our master up to github

00:05:51,370 --> 00:05:58,960
that triggers a hook and then that piece

00:05:55,810 --> 00:06:02,409
of code at that get hash actually ends

00:05:58,960 --> 00:06:05,349
up on Circle C I which is our CI service

00:06:02,409 --> 00:06:08,500
that we use not much different from

00:06:05,349 --> 00:06:11,530
before up until that point what we do

00:06:08,500 --> 00:06:13,870
now is on Circle C I first thing we do

00:06:11,530 --> 00:06:16,930
is we package everything up into a

00:06:13,870 --> 00:06:20,729
docker image then we run our tests

00:06:16,930 --> 00:06:23,789
inside the docker container and we also

00:06:20,729 --> 00:06:26,229
run a container and test against it

00:06:23,789 --> 00:06:28,030
which means we're fairly certain that

00:06:26,229 --> 00:06:31,210
what we're testing is actually what

00:06:28,030 --> 00:06:33,639
we're running in production assuming

00:06:31,210 --> 00:06:36,310
that all goes through successfully we

00:06:33,639 --> 00:06:40,409
take that image push it up to key i/o

00:06:36,310 --> 00:06:44,380
which is our private registry as a

00:06:40,409 --> 00:06:47,740
service that we use which you also can

00:06:44,380 --> 00:06:48,870
see on the right-hand side and after

00:06:47,740 --> 00:06:51,450
we've successfully

00:06:48,870 --> 00:06:54,210
that image we basically trigger a new

00:06:51,450 --> 00:06:57,600
deploy and Beanstalk will pull down that

00:06:54,210 --> 00:06:59,400
image start a new container switch from

00:06:57,600 --> 00:07:01,550
the old version to the new version and

00:06:59,400 --> 00:07:08,910
there is some deployment magic happening

00:07:01,550 --> 00:07:11,760
and that works extremely well so looking

00:07:08,910 --> 00:07:14,100
at what did we have to change from a

00:07:11,760 --> 00:07:18,690
jangle perspective to actually make

00:07:14,100 --> 00:07:21,270
Django play nice with darker are

00:07:18,690 --> 00:07:24,630
basically two points that Tom went into

00:07:21,270 --> 00:07:27,570
as well i'm going to give you an example

00:07:24,630 --> 00:07:29,430
of this is also the twelve factor app so

00:07:27,570 --> 00:07:32,840
i'm not going to mention anything around

00:07:29,430 --> 00:07:35,250
that we basically use the same principle

00:07:32,840 --> 00:07:37,410
because that's the way beanstalk makes

00:07:35,250 --> 00:07:40,050
it easy it's the same way as it is on

00:07:37,410 --> 00:07:42,240
Heroku you define your variables you

00:07:40,050 --> 00:07:44,760
define your values for that and they get

00:07:42,240 --> 00:07:47,910
passed into in our case the doctor

00:07:44,760 --> 00:07:51,930
container and then you do something like

00:07:47,910 --> 00:07:56,880
that where you have your settings file

00:07:51,930 --> 00:08:00,420
and you pull the configuration out of

00:07:56,880 --> 00:08:04,710
your environment but again there's

00:08:00,420 --> 00:08:07,710
actually a better way in my opinion and

00:08:04,710 --> 00:08:13,770
that's called Jango configurations which

00:08:07,710 --> 00:08:15,630
is the title of this line this slide

00:08:13,770 --> 00:08:18,810
what these slides will be available

00:08:15,630 --> 00:08:21,570
online so you'll have a chance to go

00:08:18,810 --> 00:08:24,090
through them again afterwards one of the

00:08:21,570 --> 00:08:27,540
things I like Django configurations for

00:08:24,090 --> 00:08:30,540
is the class based approach to settings

00:08:27,540 --> 00:08:32,910
so it makes it easy to like split things

00:08:30,540 --> 00:08:35,160
up a little bit more but that's not the

00:08:32,910 --> 00:08:38,520
point it actually comes with a really

00:08:35,160 --> 00:08:41,720
good module that provides environment

00:08:38,520 --> 00:08:44,940
variables variable handling and

00:08:41,720 --> 00:08:48,290
validation and it also gives you

00:08:44,940 --> 00:08:50,820
additional name spacing so you don't

00:08:48,290 --> 00:08:53,340
accidentally overwrite a variable that

00:08:50,820 --> 00:08:56,320
you didn't want to or use a value that

00:08:53,340 --> 00:08:59,080
you didn't expect

00:08:56,320 --> 00:09:01,690
so what this looks like in your settings

00:08:59,080 --> 00:09:04,750
file then is basically you have that

00:09:01,690 --> 00:09:07,930
class based approach but you also have

00:09:04,750 --> 00:09:13,180
your environment variables and you just

00:09:07,930 --> 00:09:16,150
define specific objects that pull out

00:09:13,180 --> 00:09:18,610
the data validated and if you for

00:09:16,150 --> 00:09:21,670
example have an integer pull it out or

00:09:18,610 --> 00:09:24,100
in this case the database URL value you

00:09:21,670 --> 00:09:29,020
basically generate the databases

00:09:24,100 --> 00:09:31,750
dictionary out of the jungle database

00:09:29,020 --> 00:09:36,700
URL that's shown at the very bottom here

00:09:31,750 --> 00:09:40,060
and is cut off so this is an easy way to

00:09:36,700 --> 00:09:41,950
do the configuration turnout we didn't

00:09:40,060 --> 00:09:43,810
have to change too much and it's

00:09:41,950 --> 00:09:49,060
something that we would have benefited

00:09:43,810 --> 00:09:54,310
from anyway the second part is serving

00:09:49,060 --> 00:09:57,700
files and once again because we are

00:09:54,310 --> 00:10:00,520
dealing with ephemeral systems in two

00:09:57,700 --> 00:10:02,590
places here actually so ec2 instances

00:10:00,520 --> 00:10:06,280
are basically ephemeral I can go away

00:10:02,590 --> 00:10:08,530
any at any point in time but also the

00:10:06,280 --> 00:10:10,600
docker containers as soon as you stop

00:10:08,530 --> 00:10:15,550
them anything that you did inside of

00:10:10,600 --> 00:10:18,100
them is basically gone so there are like

00:10:15,550 --> 00:10:23,200
cloud storage solutions that are the

00:10:18,100 --> 00:10:27,310
first go-to thing that is used for that

00:10:23,200 --> 00:10:30,300
and Django applications make that fairly

00:10:27,310 --> 00:10:33,310
simple to set up what we are using is

00:10:30,300 --> 00:10:35,340
for our file uploads we're using jangle

00:10:33,310 --> 00:10:39,100
stores which provides a couple of

00:10:35,340 --> 00:10:42,520
default file storage backends one of

00:10:39,100 --> 00:10:46,390
them being for s3 and because we're

00:10:42,520 --> 00:10:48,760
using s3 as our storage back end that's

00:10:46,390 --> 00:10:51,100
what we're using it uses photo under the

00:10:48,760 --> 00:10:53,950
hood and the way you're setting that up

00:10:51,100 --> 00:10:56,050
is also fairly straightforward you just

00:10:53,950 --> 00:10:59,350
go in you have your installed apps at

00:10:56,050 --> 00:11:02,410
storages to that and then you just say

00:10:59,350 --> 00:11:06,370
my default file storage is s3 bottle

00:11:02,410 --> 00:11:07,490
storage and you configure your AWS

00:11:06,370 --> 00:11:09,529
credentials

00:11:07,490 --> 00:11:12,320
define which pocket you want to use for

00:11:09,529 --> 00:11:14,839
that and you're good to go now all your

00:11:12,320 --> 00:11:17,990
files are either going to s3 or coming

00:11:14,839 --> 00:11:21,290
from s3 and you can basically do the

00:11:17,990 --> 00:11:23,240
same thing for static files all you have

00:11:21,290 --> 00:11:25,040
to do is add this one extra line that

00:11:23,240 --> 00:11:29,649
says for your static files back end

00:11:25,040 --> 00:11:33,230
you're using the s3 bottle storage again

00:11:29,649 --> 00:11:37,250
but in my opinion there again is a

00:11:33,230 --> 00:11:40,300
better way and what we are basically

00:11:37,250 --> 00:11:43,760
doing is we bank the static files into

00:11:40,300 --> 00:11:47,680
our images into the docker images when

00:11:43,760 --> 00:11:50,450
we build that on our CI server and

00:11:47,680 --> 00:11:53,089
during deployment what we do is we mount

00:11:50,450 --> 00:11:55,940
from the easy to a host we mount a

00:11:53,089 --> 00:11:59,120
directory into the container and then

00:11:55,940 --> 00:12:03,230
let engine X serve the files from there

00:11:59,120 --> 00:12:06,649
which has in my opinion the benefit that

00:12:03,230 --> 00:12:09,200
you have your code and the specific set

00:12:06,649 --> 00:12:11,589
of static files that belong with that

00:12:09,200 --> 00:12:14,959
part or that version of the application

00:12:11,589 --> 00:12:16,910
in the right in the same place so you

00:12:14,959 --> 00:12:19,160
can distribute that and don't have to

00:12:16,910 --> 00:12:20,779
worry about putting one thing here and

00:12:19,160 --> 00:12:25,190
the other thing there and make sure that

00:12:20,779 --> 00:12:27,140
it's the same version and that was

00:12:25,190 --> 00:12:31,130
basically it that's all we had to do for

00:12:27,140 --> 00:12:35,480
our Django application other than legacy

00:12:31,130 --> 00:12:37,399
code cleanup that comes with that to

00:12:35,480 --> 00:12:40,610
actually make it work in a docker

00:12:37,399 --> 00:12:44,209
environment but there have been a couple

00:12:40,610 --> 00:12:46,130
of additional challenges that are not

00:12:44,209 --> 00:12:51,560
specifically to darker not specifically

00:12:46,130 --> 00:12:56,050
to django they are probably mostly

00:12:51,560 --> 00:13:02,300
induced by Beanstalk one of them is

00:12:56,050 --> 00:13:05,360
logging logging is pretty basic what you

00:13:02,300 --> 00:13:07,430
get from Beanstalk beans are basically

00:13:05,360 --> 00:13:09,560
is integrated into the AWS management

00:13:07,430 --> 00:13:12,230
console there is a specific dashboard

00:13:09,560 --> 00:13:18,890
for that and then you can see like easy

00:13:12,230 --> 00:13:21,190
two instances have the files sorry so on

00:13:18,890 --> 00:13:23,680
the ec2 instances where I'm running the

00:13:21,190 --> 00:13:25,480
container Bienstock basically just

00:13:23,680 --> 00:13:27,940
creates a couple of files that have the

00:13:25,480 --> 00:13:30,250
docker logs and all that in there and in

00:13:27,940 --> 00:13:32,890
the management console you can pull for

00:13:30,250 --> 00:13:35,920
a easy to instance you can pull all

00:13:32,890 --> 00:13:37,690
those logs aggregate them but it's not

00:13:35,920 --> 00:13:40,300
really helpful because that's not the

00:13:37,690 --> 00:13:41,830
way you're looking at the files when

00:13:40,300 --> 00:13:45,790
you're trying to debug a problem or

00:13:41,830 --> 00:13:49,780
something like that also the way a mis

00:13:45,790 --> 00:13:51,910
are set up on Amazon the version of

00:13:49,780 --> 00:13:54,100
syslog doesn't play nice with globbing

00:13:51,910 --> 00:13:56,760
files and things like that so there

00:13:54,100 --> 00:14:00,100
isn't really a good way of doing that

00:13:56,760 --> 00:14:03,940
except for this one that we just came

00:14:00,100 --> 00:14:07,000
across a few weeks back there is a

00:14:03,940 --> 00:14:11,440
darker image that is called locked out

00:14:07,000 --> 00:14:15,760
and is provided by a glider labs it's

00:14:11,440 --> 00:14:19,060
basically a packaged up syslog and what

00:14:15,760 --> 00:14:21,910
it does is we run it on all of our ec2

00:14:19,060 --> 00:14:24,610
instances configure it to have access to

00:14:21,910 --> 00:14:27,220
the host stalker engine and it then

00:14:24,610 --> 00:14:30,220
pulls the log files from all running

00:14:27,220 --> 00:14:32,050
lock docker containers and then forwards

00:14:30,220 --> 00:14:34,330
them to the configured centralized

00:14:32,050 --> 00:14:36,130
logging server that we use which

00:14:34,330 --> 00:14:38,260
basically means all we have to do have

00:14:36,130 --> 00:14:41,350
the right configuration on the docker

00:14:38,260 --> 00:14:43,570
container run that container and we get

00:14:41,350 --> 00:14:48,940
all the log files aggregated and don't

00:14:43,570 --> 00:14:51,340
have to worry about anything else the

00:14:48,940 --> 00:14:55,660
second problem that we had on Beanstalk

00:14:51,340 --> 00:14:58,690
was monitoring also very basic

00:14:55,660 --> 00:15:00,990
monitoring comes with Beanstalk but you

00:14:58,690 --> 00:15:07,120
get a couple of metrics like CPU usage

00:15:00,990 --> 00:15:08,830
specifically for an environment but that

00:15:07,120 --> 00:15:12,400
doesn't give you a way of customizing

00:15:08,830 --> 00:15:14,740
things or anything like that so we've

00:15:12,400 --> 00:15:17,290
been using data dog as our main

00:15:14,740 --> 00:15:22,750
monitoring service so we wanted to get

00:15:17,290 --> 00:15:24,610
the data from Amazon into there and data

00:15:22,750 --> 00:15:29,110
dog integrates with Amazon in the way

00:15:24,610 --> 00:15:30,850
that you can forward metrics around ec2

00:15:29,110 --> 00:15:33,710
instances databases and stuff like that

00:15:30,850 --> 00:15:38,000
but we also wanted the darker relate

00:15:33,710 --> 00:15:39,770
stuff to go through data and they

00:15:38,000 --> 00:15:42,080
actually have a very similar concept

00:15:39,770 --> 00:15:47,030
they provide a docker container that

00:15:42,080 --> 00:15:50,360
runs the DD agent we again run that on

00:15:47,030 --> 00:15:54,110
each ec2 instance give it access to the

00:15:50,360 --> 00:15:56,960
whole stalker and the darker then

00:15:54,110 --> 00:15:58,520
basically gives information about all

00:15:56,960 --> 00:16:01,010
the containers that are running and

00:15:58,520 --> 00:16:04,970
configuration and stuff like that to the

00:16:01,010 --> 00:16:08,000
data doc engine sorry data dog agent and

00:16:04,970 --> 00:16:09,800
they get forwarded to our data dog

00:16:08,000 --> 00:16:15,020
account all we need to provide is the

00:16:09,800 --> 00:16:20,480
correct API key so these made our lives

00:16:15,020 --> 00:16:22,820
so much easier so much nicer in terms of

00:16:20,480 --> 00:16:26,210
debugging or like being aware of what's

00:16:22,820 --> 00:16:28,580
happening where and when and the last

00:16:26,210 --> 00:16:32,900
challenge that we had goes back a little

00:16:28,580 --> 00:16:38,030
bit more into the jungle world and is

00:16:32,900 --> 00:16:40,310
related to database schema changes which

00:16:38,030 --> 00:16:43,040
for us is still a bit of a unsolved

00:16:40,310 --> 00:16:48,770
problems in term unsolved problem in

00:16:43,040 --> 00:16:51,110
terms of running them automatically so

00:16:48,770 --> 00:16:53,570
at this point in time because we have a

00:16:51,110 --> 00:16:56,960
very small user base and very

00:16:53,570 --> 00:16:59,510
predictable usage patterns we can

00:16:56,960 --> 00:17:02,450
basically deploy and run the migrations

00:16:59,510 --> 00:17:04,070
afterwards if there is there is probably

00:17:02,450 --> 00:17:08,830
just a handful of people that will be

00:17:04,070 --> 00:17:11,120
using our software in that little window

00:17:08,830 --> 00:17:14,300
but I would like to get to a point where

00:17:11,120 --> 00:17:17,089
this is also just very automated and

00:17:14,300 --> 00:17:20,030
part of the continuous deployment that

00:17:17,089 --> 00:17:23,150
we run there is actually a really good

00:17:20,030 --> 00:17:27,170
talk about that the path to smoother

00:17:23,150 --> 00:17:30,770
migrations that outlines a strategy how

00:17:27,170 --> 00:17:33,590
you can change your database schema over

00:17:30,770 --> 00:17:37,250
time without introducing breaking

00:17:33,590 --> 00:17:38,540
changes in the code from one migration

00:17:37,250 --> 00:17:41,150
to the next so you're basically

00:17:38,540 --> 00:17:43,850
stretching it out a little bit and with

00:17:41,150 --> 00:17:47,050
that you can basically run migrations as

00:17:43,850 --> 00:17:50,390
part of your regular deployment

00:17:47,050 --> 00:17:54,190
and that's basically the main challenges

00:17:50,390 --> 00:17:57,650
that we came across on the upside though

00:17:54,190 --> 00:17:59,870
there were quite a bit of quite a few

00:17:57,650 --> 00:18:03,170
benefits one that was previously

00:17:59,870 --> 00:18:08,780
mentioned is the parity between death

00:18:03,170 --> 00:18:11,360
and production is so much higher like we

00:18:08,780 --> 00:18:13,340
have the environment that we are running

00:18:11,360 --> 00:18:16,790
in development and the one that we are

00:18:13,340 --> 00:18:19,370
running in production is so similar that

00:18:16,790 --> 00:18:21,620
we have discovered a lot of problems

00:18:19,370 --> 00:18:25,850
before we even ended up pushing things

00:18:21,620 --> 00:18:28,820
into the CI server and and that made our

00:18:25,850 --> 00:18:33,200
life much easier made it easier to debug

00:18:28,820 --> 00:18:37,010
problems and push out features much

00:18:33,200 --> 00:18:39,470
quicker than before also one of the

00:18:37,010 --> 00:18:42,590
problems that we have before we used

00:18:39,470 --> 00:18:45,440
fabric skirts and stuff like that easier

00:18:42,590 --> 00:18:47,690
robeks so we have versions within

00:18:45,440 --> 00:18:49,970
beanstalk and if something goes wrong

00:18:47,690 --> 00:18:52,370
with the latest version I just select

00:18:49,970 --> 00:18:56,240
the previous one and it rolls out within

00:18:52,370 --> 00:19:00,110
one or two minutes depending on how the

00:18:56,240 --> 00:19:02,090
network latency is to our registry or

00:19:00,110 --> 00:19:07,010
whether I'm rolling back one version or

00:19:02,090 --> 00:19:10,700
maybe two or three and this had an

00:19:07,010 --> 00:19:13,430
impact on the overall deployment times

00:19:10,700 --> 00:19:16,900
so we basically have much faster

00:19:13,430 --> 00:19:19,430
deployment now we have much better

00:19:16,900 --> 00:19:21,380
indications of whether our application

00:19:19,430 --> 00:19:26,470
is is working or not through the

00:19:21,380 --> 00:19:26,470
continuous deployment cycle that we have

00:19:26,680 --> 00:19:33,710
so I'm going to close up with just a

00:19:29,210 --> 00:19:37,970
couple of final thoughts and for us this

00:19:33,710 --> 00:19:43,040
whole endeavor was definitely a great

00:19:37,970 --> 00:19:45,350
improvement it might not all be because

00:19:43,040 --> 00:19:47,420
of docker like we probably could have

00:19:45,350 --> 00:19:49,910
chosen something else and the fact that

00:19:47,420 --> 00:19:52,730
we migrated over would have had a very

00:19:49,910 --> 00:19:56,330
positive impact on our workflows and

00:19:52,730 --> 00:19:59,000
rethinking those but I think docker

00:19:56,330 --> 00:19:59,630
played a very integral role and I would

00:19:59,000 --> 00:20:02,030
talk

00:19:59,630 --> 00:20:05,360
agree with Tom statement that docker is

00:20:02,030 --> 00:20:12,430
the future although I think you can have

00:20:05,360 --> 00:20:16,130
the future now and it'll only get better

00:20:12,430 --> 00:20:19,730
so with that I'm going to open up for

00:20:16,130 --> 00:20:21,830
questions and I'm totally excited and

00:20:19,730 --> 00:20:23,390
happy to talk about docker and what the

00:20:21,830 --> 00:20:32,600
good things and the bad things are with

00:20:23,390 --> 00:20:34,010
anybody okay again if you've got

00:20:32,600 --> 00:20:36,380
questions please form a line thank you

00:20:34,010 --> 00:20:38,840
very much Sebastian quick question

00:20:36,380 --> 00:20:41,000
everything started so a lot of the

00:20:38,840 --> 00:20:42,140
reasons to not use docker at the moment

00:20:41,000 --> 00:20:44,330
is because it's exciting and that

00:20:42,140 --> 00:20:46,310
because things are still changing how

00:20:44,330 --> 00:20:49,760
long have you been doing this like

00:20:46,310 --> 00:20:51,590
actually live production depending on it

00:20:49,760 --> 00:20:53,720
and act like it has your experience been

00:20:51,590 --> 00:20:55,520
that it is stable enough that it's not

00:20:53,720 --> 00:20:56,750
changing that oh crap they've done a

00:20:55,520 --> 00:20:59,090
micro version and everything's different

00:20:56,750 --> 00:21:00,890
is that is it is enough stuff there is

00:20:59,090 --> 00:21:02,630
it stable when it's there is it reliable

00:21:00,890 --> 00:21:04,970
when it's there in like actual

00:21:02,630 --> 00:21:08,500
production reality so we've been running

00:21:04,970 --> 00:21:12,560
it for I think four or five months now

00:21:08,500 --> 00:21:14,750
life in production and I've been running

00:21:12,560 --> 00:21:18,620
that set up with my company basically

00:21:14,750 --> 00:21:20,750
it's some time around january and have

00:21:18,620 --> 00:21:23,450
in my previous company had a similar

00:21:20,750 --> 00:21:26,840
setup for about six months before that

00:21:23,450 --> 00:21:30,230
and yes there were a lot of things

00:21:26,840 --> 00:21:32,930
changing over like but the course of one

00:21:30,230 --> 00:21:37,160
or two months in the last year over the

00:21:32,930 --> 00:21:39,740
last five six months I haven't seen a

00:21:37,160 --> 00:21:43,970
single sort of be careful breaking

00:21:39,740 --> 00:21:47,120
change so in that sense it feels very

00:21:43,970 --> 00:21:49,310
stable and production ready as they say

00:21:47,120 --> 00:21:51,440
it and I think because they announce it

00:21:49,310 --> 00:21:53,390
as production ready it's also one of the

00:21:51,440 --> 00:21:55,910
things where they have to be more

00:21:53,390 --> 00:21:57,860
careful to not scare off people that

00:21:55,910 --> 00:22:00,670
think its production ready but then it

00:21:57,860 --> 00:22:00,670
turns out it's not

00:22:01,950 --> 00:22:06,760
okay thanks Sebastian for a very

00:22:04,030 --> 00:22:08,620
interesting talk obviously I'm a big

00:22:06,760 --> 00:22:11,140
advocate of docker itself and we'll be

00:22:08,620 --> 00:22:13,210
presenting tomorrow one of the things I

00:22:11,140 --> 00:22:15,910
just wanted to ask about was the choice

00:22:13,210 --> 00:22:18,130
of CI and your usage of see I did you

00:22:15,910 --> 00:22:20,980
evaluate other tools and did you find

00:22:18,130 --> 00:22:26,410
that circle was the best for integration

00:22:20,980 --> 00:22:30,430
with docker it's a bit of a 2-point

00:22:26,410 --> 00:22:32,920
answer the first one is Circle C I was

00:22:30,430 --> 00:22:37,150
used in the company so that sort of

00:22:32,920 --> 00:22:39,280
skewed it towards that I've basically

00:22:37,150 --> 00:22:42,550
been looking around a little bit before

00:22:39,280 --> 00:22:44,620
that and found that circle is actually

00:22:42,550 --> 00:22:46,960
one of the few places where you can

00:22:44,620 --> 00:22:49,570
build your own docker container you get

00:22:46,960 --> 00:22:51,910
access to the darker engine whereas

00:22:49,570 --> 00:22:54,190
other places that say they run docker

00:22:51,910 --> 00:22:56,650
they basically use docker as their

00:22:54,190 --> 00:22:58,170
isolation layer for running the test but

00:22:56,650 --> 00:23:01,450
you don't get access to the docker

00:22:58,170 --> 00:23:03,640
engine itself so you can't build images

00:23:01,450 --> 00:23:05,770
you can't push them up to your registry

00:23:03,640 --> 00:23:08,980
and stuff like that and we wanted to

00:23:05,770 --> 00:23:15,280
make that part of our CI build and test

00:23:08,980 --> 00:23:18,610
flow okay thank you thanks for the talk

00:23:15,280 --> 00:23:21,100
um i would actually i'd love to see

00:23:18,610 --> 00:23:24,460
those the graphs that were missing or

00:23:21,100 --> 00:23:26,350
were cut off in that um I might actually

00:23:24,460 --> 00:23:28,720
have some more follow-up questions if I

00:23:26,350 --> 00:23:32,650
could see them quickly is any chance you

00:23:28,720 --> 00:23:37,090
will tweet or something to make them you

00:23:32,650 --> 00:23:38,260
mean the the the one with the road or

00:23:37,090 --> 00:23:39,940
two graphs that were cut off and you

00:23:38,260 --> 00:23:41,610
said one there's some very important

00:23:39,940 --> 00:23:43,990
part on the right side that's missing oh

00:23:41,610 --> 00:23:46,420
that's basically that was basically the

00:23:43,990 --> 00:23:50,200
external services so it basically just

00:23:46,420 --> 00:23:54,160
is the that we are using RDS for our my

00:23:50,200 --> 00:23:58,930
sequel database that we're using cloud

00:23:54,160 --> 00:24:02,170
ace something hosted RabbitMQ but that's

00:23:58,930 --> 00:24:05,410
like important in the sense that it was

00:24:02,170 --> 00:24:07,270
our way of removing us maintaining that

00:24:05,410 --> 00:24:10,030
yep and there was the other one where

00:24:07,270 --> 00:24:13,660
you went from deploy and then you got

00:24:10,030 --> 00:24:15,940
into CI and that's where okay there it

00:24:13,660 --> 00:24:17,740
was basically just one is pushing into

00:24:15,940 --> 00:24:21,250
the private registry whereas the other

00:24:17,740 --> 00:24:23,680
one is deploying on to Beanstalk if you

00:24:21,250 --> 00:24:25,690
if you want i'm happy to show you a

00:24:23,680 --> 00:24:29,050
little bit more and i can even show you

00:24:25,690 --> 00:24:34,420
the actual flow that i use in terms of

00:24:29,050 --> 00:24:36,610
deployment thanks as a complete docker

00:24:34,420 --> 00:24:39,250
newbie I've got a very general question

00:24:36,610 --> 00:24:40,600
about docker when you've got a change to

00:24:39,250 --> 00:24:42,790
your application it's quite clear you

00:24:40,600 --> 00:24:45,670
build your container and you deploy it

00:24:42,790 --> 00:24:47,710
what happens when you become aware or

00:24:45,670 --> 00:24:50,920
maybe you're not even aware that some

00:24:47,710 --> 00:24:53,470
library that you depend on perhaps open

00:24:50,920 --> 00:24:55,750
SSL or some other library has a security

00:24:53,470 --> 00:24:57,990
issue how does how do you become aware

00:24:55,750 --> 00:25:00,880
that you need to rebuild your container

00:24:57,990 --> 00:25:04,290
to include that update and how does your

00:25:00,880 --> 00:25:10,660
rebuild actually pulling that update

00:25:04,290 --> 00:25:13,120
good question thank you doctor is not a

00:25:10,660 --> 00:25:17,200
silver bullet there are still problems

00:25:13,120 --> 00:25:20,590
that will probably never be solved

00:25:17,200 --> 00:25:23,620
because they are like somebody has to

00:25:20,590 --> 00:25:26,110
fix this somewhere so one of the ways

00:25:23,620 --> 00:25:28,660
darker works is you have a base image

00:25:26,110 --> 00:25:31,390
which could be you bunch of distribution

00:25:28,660 --> 00:25:33,820
or debian or something like that and you

00:25:31,390 --> 00:25:37,600
built on top of that so if something

00:25:33,820 --> 00:25:40,179
becomes like a security vulnerability is

00:25:37,600 --> 00:25:42,370
announced in the underlying image if you

00:25:40,179 --> 00:25:44,470
want to update that you basically have

00:25:42,370 --> 00:25:46,270
to have someone update the base image

00:25:44,470 --> 00:25:49,420
and then you have to rebuild your

00:25:46,270 --> 00:25:54,100
application on top of that there are

00:25:49,420 --> 00:25:58,810
some ways trying to solve that problem

00:25:54,100 --> 00:26:01,600
by using a very restricted base image

00:25:58,810 --> 00:26:04,390
where you only have for example a

00:26:01,600 --> 00:26:06,940
running Python without anything around

00:26:04,390 --> 00:26:09,300
it and you maintain all the different

00:26:06,940 --> 00:26:12,070
additional requirements that you have

00:26:09,300 --> 00:26:14,080
but that's one of the things where the

00:26:12,070 --> 00:26:16,270
sort of docker is really young part

00:26:14,080 --> 00:26:18,160
comes in again that it's like something

00:26:16,270 --> 00:26:20,290
that's one of those kinks that they are

00:26:18,160 --> 00:26:22,230
still working out and we're probably

00:26:20,290 --> 00:26:27,150
some best practices still

00:26:22,230 --> 00:26:29,900
oh thank you all right thank you very

00:26:27,150 --> 00:26:29,900
much Sebastian

00:26:36,460 --> 00:26:38,520

YouTube URL: https://www.youtube.com/watch?v=LPfMlOBB5VQ


