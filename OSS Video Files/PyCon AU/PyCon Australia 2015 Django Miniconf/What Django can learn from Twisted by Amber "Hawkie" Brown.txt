Title: What Django can learn from Twisted by Amber "Hawkie" Brown
Publication date: 2015-08-06
Playlist: PyCon Australia 2015 Django Miniconf
Description: 
	Web frameworks like Django are designed around the traditional request-response cycle — a request comes in, a response is generated, and that is delivered to the client. In the day of “single page” applications, where only sections of the page are updated through requests, doing real-time can be clunky. Twisted, and things that build off it, like Django Channels, might be worth thinking about, and this is what this talk will be about.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:09,540 --> 00:00:15,889
ladies and gentlemen welcome to django

00:00:12,420 --> 00:00:15,889
con australia 2015

00:00:19,689 --> 00:00:23,390
for those of you who don't know me my

00:00:21,590 --> 00:00:24,500
name is Russell Keith McGee I am the

00:00:23,390 --> 00:00:26,750
president of the Django software

00:00:24,500 --> 00:00:29,960
foundation and a 10-year veteran of the

00:00:26,750 --> 00:00:31,460
Django core team and I've been running

00:00:29,960 --> 00:00:33,400
helping to organize the Django con

00:00:31,460 --> 00:00:35,420
Australia for the last three years

00:00:33,400 --> 00:00:37,879
before we get going a few thank yous

00:00:35,420 --> 00:00:39,470
this this event wouldn't happen at all

00:00:37,879 --> 00:00:41,750
except for if it wasn't for the

00:00:39,470 --> 00:00:43,430
organizers of Pike on a you especially

00:00:41,750 --> 00:00:44,989
the this year's principal Clinton Roy

00:00:43,430 --> 00:00:47,660
and his team of hard-working little

00:00:44,989 --> 00:00:48,980
elves it also wouldn't happen it

00:00:47,660 --> 00:00:50,510
wouldn't happen at all if it wasn't for

00:00:48,980 --> 00:00:51,559
Chris nog about who's currently standing

00:00:50,510 --> 00:00:56,059
at the back of the room there so

00:00:51,559 --> 00:00:57,949
everyone throw fruit and Chris was the

00:00:56,059 --> 00:00:59,690
person who came up with well you came up

00:00:57,949 --> 00:01:02,689
the idea of doing a Minicon structure

00:00:59,690 --> 00:01:05,630
inside PyCon itself which is it means

00:01:02,689 --> 00:01:07,250
that the as organizers of Jango khan and

00:01:05,630 --> 00:01:09,320
the other mini cops as well we've been

00:01:07,250 --> 00:01:10,520
able to piggyback all the hard parts

00:01:09,320 --> 00:01:12,979
about organizing a conference like

00:01:10,520 --> 00:01:13,970
getting a venue that that's going to fit

00:01:12,979 --> 00:01:16,189
enough people and all that sort of thing

00:01:13,970 --> 00:01:17,299
we can defer that after someone else and

00:01:16,189 --> 00:01:18,890
they can worry about it and we just

00:01:17,299 --> 00:01:21,710
worry about the fun part about who's

00:01:18,890 --> 00:01:23,780
going to talk so the success of the

00:01:21,710 --> 00:01:25,940
event today is as much due to the park

00:01:23,780 --> 00:01:26,990
on team and the innovations of people

00:01:25,940 --> 00:01:28,520
like Chris as it is to anyone else so

00:01:26,990 --> 00:01:31,570
thank you very much to park on the bike

00:01:28,520 --> 00:01:31,570
on team and everyone else involved

00:01:34,420 --> 00:01:39,350
the principal sponsor of today's event

00:01:37,340 --> 00:01:40,490
is the Django software foundation Django

00:01:39,350 --> 00:01:42,140
Software Foundation is the

00:01:40,490 --> 00:01:44,570
not-for-profit organization registered

00:01:42,140 --> 00:01:45,830
in the US that maintains the copyright

00:01:44,570 --> 00:01:48,170
and does the legal and fundraising

00:01:45,830 --> 00:01:50,150
around the Django project we raise funds

00:01:48,170 --> 00:01:51,680
specifically to do things like fun

00:01:50,150 --> 00:01:53,750
Django girls events of which there have

00:01:51,680 --> 00:01:57,580
been many many over the last 12 months

00:01:53,750 --> 00:01:59,990
and also the Django fellowship so Tim

00:01:57,580 --> 00:02:01,790
Tim Graham who has been doing some

00:01:59,990 --> 00:02:04,280
magnificent work over the last eight to

00:02:01,790 --> 00:02:05,720
nine months making sure that the patches

00:02:04,280 --> 00:02:09,020
on the on the on the Django ticket

00:02:05,720 --> 00:02:11,090
tracker are being applied in a timely

00:02:09,020 --> 00:02:12,680
fashion so if you would like to that

00:02:11,090 --> 00:02:13,820
work to continue and I very much hope

00:02:12,680 --> 00:02:15,230
that everyone here would like that where

00:02:13,820 --> 00:02:16,430
to continue please come and speak to me

00:02:15,230 --> 00:02:17,840
because we are in a constant need of

00:02:16,430 --> 00:02:19,100
more money and I'm led to believe that

00:02:17,840 --> 00:02:22,130
some of you may have some and I'm

00:02:19,100 --> 00:02:24,290
willing to shake you down for it so yes

00:02:22,130 --> 00:02:26,030
if you do if you if your company uses

00:02:24,290 --> 00:02:27,500
Django please consider supporting the

00:02:26,030 --> 00:02:30,200
DSF financially because we very much

00:02:27,500 --> 00:02:31,459
need your help in keeping of the spirit

00:02:30,200 --> 00:02:33,170
of reconciliation I'd also like to

00:02:31,459 --> 00:02:35,330
acknowledge the turbo you'll get a cubby

00:02:33,170 --> 00:02:36,709
cubby and Ginny borrow people's as

00:02:35,330 --> 00:02:38,480
traditional owners of the lands where we

00:02:36,709 --> 00:02:39,650
now stand and recognize that these have

00:02:38,480 --> 00:02:44,239
always been places of teaching and

00:02:39,650 --> 00:02:45,440
learning that's not them okay unlike all

00:02:44,239 --> 00:02:47,360
events that have been sponsored by the

00:02:45,440 --> 00:02:49,430
Django software foundation and park on

00:02:47,360 --> 00:02:50,900
this event has a code of conduct the

00:02:49,430 --> 00:02:51,950
specific text is on the pike on

00:02:50,900 --> 00:02:54,200
Australia website if you're interested

00:02:51,950 --> 00:02:55,730
under the register tab if you've got any

00:02:54,200 --> 00:02:57,470
questions about the code of conduct or

00:02:55,730 --> 00:02:59,750
heaven forbid you need to report a

00:02:57,470 --> 00:03:01,970
problem please find myself or one of the

00:02:59,750 --> 00:03:03,440
plaque on organizers will take whatever

00:03:01,970 --> 00:03:05,420
action is necessary we do take these

00:03:03,440 --> 00:03:06,769
these code of conduct very seriously we

00:03:05,420 --> 00:03:09,350
want this to be an inclusive and

00:03:06,769 --> 00:03:11,150
friendly event for all participants and

00:03:09,350 --> 00:03:13,700
we will not tolerate inappropriate

00:03:11,150 --> 00:03:15,140
behavior so please if you do have a

00:03:13,700 --> 00:03:16,970
problem don't hesitate to come and find

00:03:15,140 --> 00:03:20,810
us out because we will we will act on

00:03:16,970 --> 00:03:23,360
those complaints housekeeping toilets

00:03:20,810 --> 00:03:24,709
are out and to the right morning and

00:03:23,360 --> 00:03:26,150
afternoon tea is apparently gonna be

00:03:24,709 --> 00:03:27,860
provided I don't believe lunch is

00:03:26,150 --> 00:03:28,970
provided we can over have initially

00:03:27,860 --> 00:03:30,440
confirm that one so should check going

00:03:28,970 --> 00:03:32,360
out there are not unfortunately any

00:03:30,440 --> 00:03:33,739
lightning talks today unless one of the

00:03:32,360 --> 00:03:34,820
speakers hasn't turned up in which case

00:03:33,739 --> 00:03:37,220
we might have to fill a slot with some

00:03:34,820 --> 00:03:38,930
lightning talks so but there will be

00:03:37,220 --> 00:03:40,880
lightning talks during the main Python

00:03:38,930 --> 00:03:42,290
conference on saturday and sunday so if

00:03:40,880 --> 00:03:44,359
you do have a little something something

00:03:42,290 --> 00:03:45,500
you want to talk about there may be five

00:03:44,359 --> 00:03:46,280
minute slots available for you to do

00:03:45,500 --> 00:03:50,220
that

00:03:46,280 --> 00:03:51,960
but okay so who has on the show who has

00:03:50,220 --> 00:03:54,810
been to all three Django con the wall

00:03:51,960 --> 00:03:56,520
three Australian Django cons here we go

00:03:54,810 --> 00:03:58,230
we got some hardcore hardcore drivers

00:03:56,520 --> 00:04:01,290
here okay all right who is the first

00:03:58,230 --> 00:04:02,880
timers as their first django con hey all

00:04:01,290 --> 00:04:04,800
right so for those you who are

00:04:02,880 --> 00:04:06,900
first-timers you may not be aware that

00:04:04,800 --> 00:04:08,430
we have a little bit of a tradition with

00:04:06,900 --> 00:04:11,280
Django con the tradition goes back to

00:04:08,430 --> 00:04:14,310
the very very first Django con us back

00:04:11,280 --> 00:04:16,290
in 2008 a man named Kell Henderson was

00:04:14,310 --> 00:04:18,000
one of the founders of flickr was their

00:04:16,290 --> 00:04:20,459
first keynote speaker at that event and

00:04:18,000 --> 00:04:23,669
he gave a talk entitled why I hate

00:04:20,459 --> 00:04:25,200
Django the talk the view of that talk is

00:04:23,669 --> 00:04:26,520
a key still up on YouTube and it is well

00:04:25,200 --> 00:04:27,750
worth watching it's eight years later

00:04:26,520 --> 00:04:29,250
but it's well worth watching it's a

00:04:27,750 --> 00:04:30,630
fantastically presented talk highly

00:04:29,250 --> 00:04:32,460
amusing and actually it shows you the

00:04:30,630 --> 00:04:36,030
origin of the Django pony comes from

00:04:32,460 --> 00:04:38,280
that talk essentially but since then

00:04:36,030 --> 00:04:39,660
we've made a habit of regularly inviting

00:04:38,280 --> 00:04:42,060
members of other language communities

00:04:39,660 --> 00:04:43,860
other web frameworks to come to django

00:04:42,060 --> 00:04:45,510
calm and tell us what we're doing wrong

00:04:43,860 --> 00:04:48,150
or what we don't know that we should

00:04:45,510 --> 00:04:52,140
know or why some people don't can't or

00:04:48,150 --> 00:04:53,330
won't use django in that spirit it is my

00:04:52,140 --> 00:04:57,540
great pleasure to invite to the stage

00:04:53,330 --> 00:04:59,130
amber brown she is a organizer in the

00:04:57,540 --> 00:05:00,419
django community she is organizer of

00:04:59,130 --> 00:05:02,360
django girls in perth she's also

00:05:00,419 --> 00:05:06,500
organizing the django event on monday

00:05:02,360 --> 00:05:08,430
Monday yes and but so in when she's not

00:05:06,500 --> 00:05:10,950
collaborating with us Django people

00:05:08,430 --> 00:05:13,440
she's also the release manager for

00:05:10,950 --> 00:05:15,800
twisted and in that van given that

00:05:13,440 --> 00:05:19,919
twisted has some opinions about things

00:05:15,800 --> 00:05:22,710
she is here to tell us what what Django

00:05:19,919 --> 00:05:24,270
is doing wrong when it comes to real

00:05:22,710 --> 00:05:25,140
time in particular everything is

00:05:24,270 --> 00:05:27,950
everyone please welcome to the stage

00:05:25,140 --> 00:05:27,950
amber brown

00:05:32,509 --> 00:05:43,740
hello everyone hang on hello yeah there

00:05:39,330 --> 00:05:45,479
we go you're never unhear me right I am

00:05:43,740 --> 00:05:56,909
going to type my password wrong several

00:05:45,479 --> 00:06:00,080
times and plug this in so yes what what

00:05:56,909 --> 00:06:00,080
do you have to be on telling you

00:06:09,750 --> 00:06:12,380
yay

00:06:15,419 --> 00:06:21,180
okay sorry for the baby

00:06:24,460 --> 00:06:33,430
so um this is what Django can learn from

00:06:28,270 --> 00:06:35,530
twisted hello I am amber brown better

00:06:33,430 --> 00:06:37,800
news for Cal or hockey al on twitter if

00:06:35,530 --> 00:06:41,410
you want to follow my inane ramblings I

00:06:37,800 --> 00:06:44,110
hail from Perth where r us lives as well

00:06:41,410 --> 00:06:47,620
we are like the only to django people

00:06:44,110 --> 00:06:56,550
there it's well not quite the only ones

00:06:47,620 --> 00:07:00,160
that came to the meetup anyway so yeah I

00:06:56,550 --> 00:07:03,280
also organized janky girls events which

00:07:00,160 --> 00:07:06,490
is pretty fun and I serve on the Django

00:07:03,280 --> 00:07:08,320
occurred to conduct me so otherwise I

00:07:06,490 --> 00:07:12,190
don't really have much to of Django I

00:07:08,320 --> 00:07:13,960
don't use it like using it it's well

00:07:12,190 --> 00:07:16,419
some bits pretty good which I'll get

00:07:13,960 --> 00:07:19,870
into later but yeah I don't I don't use

00:07:16,419 --> 00:07:21,490
it any major part of the time i am a

00:07:19,870 --> 00:07:24,460
twisted core developer though and

00:07:21,490 --> 00:07:26,500
release manager 15.3 is in pretty

00:07:24,460 --> 00:07:29,139
release and 15.4 is coming out in like

00:07:26,500 --> 00:07:32,470
two months it boasts more python3

00:07:29,139 --> 00:07:35,289
support more removing all stuff that's

00:07:32,470 --> 00:07:38,229
no one likes and other things like that

00:07:35,289 --> 00:07:40,840
so shedding some historical stuff and

00:07:38,229 --> 00:07:45,370
you know twisted is is pretty cool like

00:07:40,840 --> 00:07:51,099
I i think but everyone remembers last

00:07:45,370 --> 00:07:53,560
year's Django con keynotes and since I

00:07:51,099 --> 00:07:56,320
kept in a me rambling about twisted and

00:07:53,560 --> 00:07:58,419
why it's great and Django why it sucks

00:07:56,320 --> 00:08:01,000
and everything Russell was like well get

00:07:58,419 --> 00:08:03,039
up on the stage and tell me about it so

00:08:01,000 --> 00:08:05,830
sort of making you put my money where my

00:08:03,039 --> 00:08:07,659
mouth is so but i think that talks are

00:08:05,830 --> 00:08:11,229
only rarely wear file if they educate or

00:08:07,659 --> 00:08:13,120
entertain so I don't want to do like

00:08:11,229 --> 00:08:18,039
last year so i'm going to say up front

00:08:13,120 --> 00:08:20,710
no ambiguity Jengo does not suck it is

00:08:18,039 --> 00:08:22,750
pretty great we might say some people

00:08:20,710 --> 00:08:25,120
might say that but it's mainly a jest

00:08:22,750 --> 00:08:27,460
Django is great there's friend friendly

00:08:25,120 --> 00:08:30,250
rivalry if it even if it doesn't seem

00:08:27,460 --> 00:08:32,680
like it comes off like that the talks

00:08:30,250 --> 00:08:35,409
conclusion is not that using twisted or

00:08:32,680 --> 00:08:36,190
ha scale or closure or Ruby or anything

00:08:35,409 --> 00:08:38,140
makes you a better

00:08:36,190 --> 00:08:46,480
grandpa it doesn't it's just a choice of

00:08:38,140 --> 00:08:48,640
what you use unless the PHP and I think

00:08:46,480 --> 00:08:50,380
that the the conclusion that we're going

00:08:48,640 --> 00:08:51,970
to come to is that the future of Python

00:08:50,380 --> 00:08:53,380
web frameworks Israeli us working

00:08:51,970 --> 00:08:54,940
together there's things that Jen goes

00:08:53,380 --> 00:08:57,190
does really well in the things that

00:08:54,940 --> 00:08:59,620
twisted does really well if you're all

00:08:57,190 --> 00:09:01,060
in one one camp and you refuse to take

00:08:59,620 --> 00:09:04,120
anything from the other well you're not

00:09:01,060 --> 00:09:05,830
going to get very far so yeah Django is

00:09:04,120 --> 00:09:09,970
good twist is good just go and say that

00:09:05,830 --> 00:09:12,580
from everything i say is about town Jago

00:09:09,970 --> 00:09:15,760
sucks is because i want i want Django to

00:09:12,580 --> 00:09:18,010
improve i want Django to be as good as

00:09:15,760 --> 00:09:19,750
twisted in the things that twisted does

00:09:18,010 --> 00:09:22,330
and I want twisted to be as good as

00:09:19,750 --> 00:09:27,970
Django in what Django does easiest way

00:09:22,330 --> 00:09:29,410
is to just smash them together so first

00:09:27,970 --> 00:09:31,210
I'll give an intro to twisted for those

00:09:29,410 --> 00:09:33,010
that haven't done it so you sort of know

00:09:31,210 --> 00:09:36,490
we're coming from how many people have

00:09:33,010 --> 00:09:40,480
heard of twisted okay how many of you

00:09:36,490 --> 00:09:46,290
are used twisted hey how many of you

00:09:40,480 --> 00:09:49,510
hate twisted thanks Russell that's great

00:09:46,290 --> 00:09:51,520
so twisted is a asynchronous networking

00:09:49,510 --> 00:09:54,190
framework it's very stable it's very

00:09:51,520 --> 00:09:56,890
mature it's like a decade old i was

00:09:54,190 --> 00:10:00,760
still in like year too when it first

00:09:56,890 --> 00:10:02,860
started so which is hilarious it has a

00:10:00,760 --> 00:10:07,980
lot of primitives for different things

00:10:02,860 --> 00:10:11,200
you want to do with IO like hpe SSH smtp

00:10:07,980 --> 00:10:15,400
there's like some GPS stuff in there as

00:10:11,200 --> 00:10:17,920
IRC msn if you want to use the services

00:10:15,400 --> 00:10:20,500
close down here works on Python 2.7

00:10:17,920 --> 00:10:22,990
we're putting stuff to python 3.3 plus

00:10:20,500 --> 00:10:25,150
we're at about forty percent you can do

00:10:22,990 --> 00:10:27,450
a lot of things you can't also can't do

00:10:25,150 --> 00:10:31,720
a lot of things but we're getting there

00:10:27,450 --> 00:10:33,460
so here's an example of flask so

00:10:31,720 --> 00:10:37,930
something that many of you have probably

00:10:33,460 --> 00:10:42,730
used it's very short and to the point so

00:10:37,930 --> 00:10:45,460
that's synchronous code this is the same

00:10:42,730 --> 00:10:47,960
example in twisted so as you can see

00:10:45,460 --> 00:10:51,080
apart from some minor differences

00:10:47,960 --> 00:10:52,670
some my major differences they more or

00:10:51,080 --> 00:10:54,490
less work the same there you don't have

00:10:52,670 --> 00:10:56,960
to deal with call back he'll there's

00:10:54,490 --> 00:10:58,610
things called inline callbacks now which

00:10:56,960 --> 00:11:00,650
makes it work sort of a bit more like G

00:10:58,610 --> 00:11:03,080
event where you yield from things it's

00:11:00,650 --> 00:11:06,140
just a more or less a preference to what

00:11:03,080 --> 00:11:11,630
you want to use but lets you know go

00:11:06,140 --> 00:11:14,390
through it a bit so Trek is a version of

00:11:11,630 --> 00:11:17,320
Lloyd's requests clone because request

00:11:14,390 --> 00:11:21,800
is great but uses twisted and twisted

00:11:17,320 --> 00:11:23,870
agents web agents are underneath so when

00:11:21,800 --> 00:11:27,710
you do track get it returns the deferred

00:11:23,870 --> 00:11:30,590
which will fire at some later time we

00:11:27,710 --> 00:11:34,390
then add a call back and then we won't

00:11:30,590 --> 00:11:38,090
say we want to run track content after

00:11:34,390 --> 00:11:40,610
the it's actually got the page and then

00:11:38,090 --> 00:11:41,990
we return it and then it goes back into

00:11:40,610 --> 00:11:46,630
the web framework and web framework

00:11:41,990 --> 00:11:49,340
waits for it to for it to fire our

00:11:46,630 --> 00:11:51,410
client is also I should mention a clone

00:11:49,340 --> 00:11:54,550
of flask where cloning everything it's

00:11:51,410 --> 00:11:57,230
great stealing all all the great stuff

00:11:54,550 --> 00:11:59,510
so the core of it really is deferred

00:11:57,230 --> 00:12:02,180
this is what may this is sort of twisted

00:11:59,510 --> 00:12:05,210
semi unique thing and you know a lot of

00:12:02,180 --> 00:12:07,460
people have trouble with all they are is

00:12:05,210 --> 00:12:11,510
just an object which holds a result at

00:12:07,460 --> 00:12:14,690
some point in time callbacks are you say

00:12:11,510 --> 00:12:17,900
when this has that results do this so

00:12:14,690 --> 00:12:19,700
you sort of you taken together so ahead

00:12:17,900 --> 00:12:22,220
of time so you change together and say

00:12:19,700 --> 00:12:26,720
okay get the page do this to the page

00:12:22,220 --> 00:12:28,700
and when it's fired do this so the

00:12:26,720 --> 00:12:30,470
example of the callback chain for

00:12:28,700 --> 00:12:32,750
something like Twitter clone would be

00:12:30,470 --> 00:12:35,900
you know getting the request getting

00:12:32,750 --> 00:12:37,970
user accounts check the permissions get

00:12:35,900 --> 00:12:39,860
the profile render the page and return

00:12:37,970 --> 00:12:41,300
to the client so you would have one to

00:12:39,860 --> 00:12:43,820
third and then you would put all of

00:12:41,300 --> 00:12:47,990
those as callbacks the functions that do

00:12:43,820 --> 00:12:50,810
those different things so all they are

00:12:47,990 --> 00:12:54,080
is just makes makes it easier to riot

00:12:50,810 --> 00:12:57,050
ace io asynchronous i/o using

00:12:54,080 --> 00:12:59,570
applications but whatever it really is

00:12:57,050 --> 00:13:01,130
asynchronous i/o I mean not everyone has

00:12:59,570 --> 00:13:05,990
you know delved into this

00:13:01,130 --> 00:13:08,600
I'll explain so synchronous i/o like

00:13:05,990 --> 00:13:11,000
Django flask a lot of all those things

00:13:08,600 --> 00:13:13,220
is when functions that do I owe return

00:13:11,000 --> 00:13:15,740
with the results so they wait all the

00:13:13,220 --> 00:13:18,680
results has been got and then they you

00:13:15,740 --> 00:13:21,800
do a normal return so if you do requests

00:13:18,680 --> 00:13:25,060
up give when request don't get returns

00:13:21,800 --> 00:13:27,440
you have the full page essentially

00:13:25,060 --> 00:13:29,420
asynchronous i/o is when instead it

00:13:27,440 --> 00:13:31,960
returns immediately and it gives a

00:13:29,420 --> 00:13:35,810
promise or a deferred or some sort of

00:13:31,960 --> 00:13:39,710
construct that lets you attach callbacks

00:13:35,810 --> 00:13:42,500
for when it happens your twisted used

00:13:39,710 --> 00:13:45,410
two thirds but there's also jquery

00:13:42,500 --> 00:13:47,480
deferred and promises in javascript if

00:13:45,410 --> 00:13:49,850
you've ever used those similar sort of

00:13:47,480 --> 00:13:54,230
thing sort of trying to put a nicer

00:13:49,850 --> 00:13:56,900
interface on callbacks there's a couple

00:13:54,230 --> 00:13:58,550
of benefits to this if you don't need

00:13:56,900 --> 00:14:00,200
the result you don't really have to wait

00:13:58,550 --> 00:14:02,890
for it so you don't have to put a

00:14:00,200 --> 00:14:06,080
blocking operation in the middle so

00:14:02,890 --> 00:14:07,610
incrementing a page count counter you

00:14:06,080 --> 00:14:09,470
don't really care about the result so

00:14:07,610 --> 00:14:12,340
you can tell us go off and do stuff and

00:14:09,470 --> 00:14:15,440
you don't have to wait for it to finish

00:14:12,340 --> 00:14:17,390
because of the design of many

00:14:15,440 --> 00:14:19,430
asynchronous frameworks handling many

00:14:17,390 --> 00:14:21,980
concurrent quite connections like web

00:14:19,430 --> 00:14:23,480
sockets it's basically an OP you don't

00:14:21,980 --> 00:14:26,900
have to really do anything other than

00:14:23,480 --> 00:14:29,180
hold the socket open and it's because

00:14:26,900 --> 00:14:32,350
you are forced to break it up over the

00:14:29,180 --> 00:14:35,540
IO barriers to make your callback chain

00:14:32,350 --> 00:14:38,390
you end up with more pure functions that

00:14:35,540 --> 00:14:40,160
just take results and take an input and

00:14:38,390 --> 00:14:41,900
return a result so it ends up being

00:14:40,160 --> 00:14:45,920
easier to test because it's already all

00:14:41,900 --> 00:14:48,650
broken up for you twisted uses the

00:14:45,920 --> 00:14:52,100
reactor model which is basically a

00:14:48,650 --> 00:14:55,670
single loop and then everything works

00:14:52,100 --> 00:14:57,500
cooperatively so the reactor goes hey

00:14:55,670 --> 00:14:59,630
I've got some work for you to do calls

00:14:57,500 --> 00:15:01,220
callback doesn't staff when it's

00:14:59,630 --> 00:15:04,250
finished two hands back control and it

00:15:01,220 --> 00:15:07,460
keeps looping it's very efficient for

00:15:04,250 --> 00:15:09,620
low CPU and high oh I use cases like web

00:15:07,460 --> 00:15:11,690
frameworks generally because a lot of

00:15:09,620 --> 00:15:13,640
time you're waiting for the database

00:15:11,690 --> 00:15:16,160
you're waiting for my sequel to

00:15:13,640 --> 00:15:17,720
not flow you ain't from to destroy

00:15:16,160 --> 00:15:21,320
your data you know all those sorts of

00:15:17,720 --> 00:15:23,690
things and things like Dennis and that

00:15:21,320 --> 00:15:25,850
we're basically you just opening a

00:15:23,690 --> 00:15:30,380
connection and returning the results you

00:15:25,850 --> 00:15:32,720
don't really do a lot of CPU but sort of

00:15:30,380 --> 00:15:34,190
do an analogy let's talk about cooking

00:15:32,720 --> 00:15:37,730
because that's something I'm totally

00:15:34,190 --> 00:15:39,380
qualified to talk about so the Y chef

00:15:37,730 --> 00:15:42,830
know she can only do one thing at once

00:15:39,380 --> 00:15:44,840
you you can't do you know the eggs and

00:15:42,830 --> 00:15:47,150
do something on the upper side upper

00:15:44,840 --> 00:15:51,260
side room but some of these things take

00:15:47,150 --> 00:15:53,570
time so she put some water on puts it to

00:15:51,260 --> 00:15:55,250
boil sets a timer the mall is boiling

00:15:53,570 --> 00:15:58,490
doesn't the gantz like collect some more

00:15:55,250 --> 00:16:00,820
ingredients she puts eggs in once waters

00:15:58,490 --> 00:16:04,070
boils sets the timer to wait for that

00:16:00,820 --> 00:16:08,240
while the eggs are cooking she does oven

00:16:04,070 --> 00:16:11,360
stuff and chops of vegetables and once

00:16:08,240 --> 00:16:13,940
the egg is ready she she stops dropping

00:16:11,360 --> 00:16:15,500
the vegetables text off the boil the

00:16:13,940 --> 00:16:19,100
oven timer goes back so she put some

00:16:15,500 --> 00:16:23,210
vegetables in the oven some reason and

00:16:19,100 --> 00:16:27,650
she serves the eggs well while the I'm

00:16:23,210 --> 00:16:28,910
very bad at cooking I basically she

00:16:27,650 --> 00:16:30,800
serves the eggs of all the vegetables

00:16:28,910 --> 00:16:32,810
are cooking and when the timer off she

00:16:30,800 --> 00:16:34,690
goes and serves the vegetables that were

00:16:32,810 --> 00:16:36,980
just shoved with me at one so delicious

00:16:34,690 --> 00:16:40,400
but what rarely did that have to do with

00:16:36,980 --> 00:16:43,400
Tristan well really the chef is only one

00:16:40,400 --> 00:16:47,450
woman so but she did several things at

00:16:43,400 --> 00:16:49,280
once the chef is more or less twisted

00:16:47,450 --> 00:16:51,920
only capable of doing one thing at a

00:16:49,280 --> 00:16:56,210
time rarely but not everything needs our

00:16:51,920 --> 00:16:59,990
attention instead of having egg timers

00:16:56,210 --> 00:17:02,390
you just have the reactor say something

00:16:59,990 --> 00:17:04,520
can be done and then it notify Swiss

00:17:02,390 --> 00:17:06,320
turd and then it does the thing so

00:17:04,520 --> 00:17:08,120
essentially you have a queue of things

00:17:06,320 --> 00:17:09,470
to happen and it just takes something

00:17:08,120 --> 00:17:15,079
off your queue does it and then it keeps

00:17:09,470 --> 00:17:18,070
looping now people sort of might want to

00:17:15,079 --> 00:17:20,270
get some of these benefits in Django

00:17:18,070 --> 00:17:22,699
unfortunately Jengo is quite synchronous

00:17:20,270 --> 00:17:25,459
a task or you can't really bolt it on

00:17:22,699 --> 00:17:27,049
it's very hard to do so after the fact

00:17:25,459 --> 00:17:29,149
generally

00:17:27,049 --> 00:17:32,029
people handle it by running it in a

00:17:29,149 --> 00:17:34,850
thread but when you're handling with the

00:17:32,029 --> 00:17:38,059
Python Jia you can't run more than one

00:17:34,850 --> 00:17:39,830
Python section of Python code in a

00:17:38,059 --> 00:17:41,659
Python interpreter at once so you end up

00:17:39,830 --> 00:17:45,080
having to have many processes so to

00:17:41,659 --> 00:17:46,730
actually run multiple Django things that

00:17:45,080 --> 00:17:48,320
might all be waiting for database you

00:17:46,730 --> 00:17:51,649
have to have many threads on many

00:17:48,320 --> 00:17:53,929
processes the common sense is that a

00:17:51,649 --> 00:17:58,570
synchronous is hard that's probably the

00:17:53,929 --> 00:18:01,999
reputation Scott for another reason it's

00:17:58,570 --> 00:18:03,889
you know more or less there but people

00:18:01,999 --> 00:18:05,929
think that synchronous code is easy just

00:18:03,889 --> 00:18:09,109
because it's your turn it you get the

00:18:05,929 --> 00:18:12,950
result in reality everything has

00:18:09,109 --> 00:18:15,769
trade-offs synchronous is easier to

00:18:12,950 --> 00:18:17,330
understand you have easier code flow you

00:18:15,769 --> 00:18:18,830
only have one thread of execution other

00:18:17,330 --> 00:18:21,559
things can't happen while you're doing

00:18:18,830 --> 00:18:23,090
something and there's a lot of software

00:18:21,559 --> 00:18:25,070
that uses it so you can go and use

00:18:23,090 --> 00:18:28,580
requests you can go new flask everything

00:18:25,070 --> 00:18:31,549
works but that only doing one thing at

00:18:28,580 --> 00:18:35,960
once even even if it's waiting for a

00:18:31,549 --> 00:18:37,639
database does hurt a bit it's very

00:18:35,960 --> 00:18:39,889
suited to the response requests a

00:18:37,639 --> 00:18:42,320
request response cycle it's not the

00:18:39,889 --> 00:18:45,649
other way around so it's a natural fit

00:18:42,320 --> 00:18:47,690
for Jengo works really well but

00:18:45,649 --> 00:18:49,249
unfortunately persistent connections

00:18:47,690 --> 00:18:52,940
like web sockets are quite hard to

00:18:49,249 --> 00:18:54,279
implement asynchronous code however lets

00:18:52,940 --> 00:18:57,049
you have multiple threads of execution

00:18:54,279 --> 00:19:00,350
now they're not running all at the same

00:18:57,049 --> 00:19:02,269
time because of the Python Jill but they

00:19:00,350 --> 00:19:03,799
are queued so you so while you're

00:19:02,269 --> 00:19:07,850
waiting for a database of things can

00:19:03,799 --> 00:19:10,340
happen handling evented connections is

00:19:07,850 --> 00:19:14,239
really easy it's sort of almost there

00:19:10,340 --> 00:19:16,249
because twistys event-driven and the

00:19:14,239 --> 00:19:18,230
reactor model asynchronous that twist

00:19:16,249 --> 00:19:20,389
users is threadless so you have one

00:19:18,230 --> 00:19:22,159
python process with one thread generally

00:19:20,389 --> 00:19:25,820
unless you're using thread balls for

00:19:22,159 --> 00:19:27,440
things that are not synchronous however

00:19:25,820 --> 00:19:29,989
you have to be careful you have to be a

00:19:27,440 --> 00:19:34,129
good citizen if you do asynchronous call

00:19:29,989 --> 00:19:36,649
for example if you say hi or

00:19:34,129 --> 00:19:38,419
something that isn't made to be

00:19:36,649 --> 00:19:40,190
asynchronous you will end up blocking

00:19:38,419 --> 00:19:42,690
the reactor and not

00:19:40,190 --> 00:19:45,840
well it'll happen but you'll just be a

00:19:42,690 --> 00:19:47,369
massive performance bottleneck and you

00:19:45,840 --> 00:19:50,219
have to be a bit more explicit about

00:19:47,369 --> 00:19:52,139
your i/o which can be good for for some

00:19:50,219 --> 00:19:53,429
people but it also is a bit harder you

00:19:52,139 --> 00:19:55,139
have to think about it a bit more you

00:19:53,429 --> 00:19:59,429
can't just go out to the database as

00:19:55,139 --> 00:20:00,599
easily and in Python you know you have

00:19:59,429 --> 00:20:03,599
to have things they're specially written

00:20:00,599 --> 00:20:05,969
for it you can't rarely get the upsides

00:20:03,599 --> 00:20:09,059
of both without all in Python anywhere

00:20:05,969 --> 00:20:12,659
you can't get the upsides in both but

00:20:09,059 --> 00:20:15,330
you can try there's a thing called

00:20:12,659 --> 00:20:17,929
Hendrix which is a twisted Django so

00:20:15,330 --> 00:20:21,539
that's a reference to jimi hendrix and

00:20:17,929 --> 00:20:24,899
django reinhardt so I don't know either

00:20:21,539 --> 00:20:29,099
of them so that's pretty cool I'm 21 so

00:20:24,899 --> 00:20:31,559
it's it's a whiskey server it's built on

00:20:29,099 --> 00:20:34,619
top of twisted and it has native web

00:20:31,559 --> 00:20:36,809
sockets so it runs twisted you it runs

00:20:34,619 --> 00:20:39,330
twisted puts Django on top runs in a

00:20:36,809 --> 00:20:42,149
thread pool and allows Django to talk to

00:20:39,330 --> 00:20:44,249
Hendricks to do web sockets so there's

00:20:42,149 --> 00:20:45,809
there's the link then all these slides

00:20:44,249 --> 00:20:49,229
will be up on the web later so you can

00:20:45,809 --> 00:20:51,809
actually flicker there's also crochet

00:20:49,229 --> 00:20:53,580
which lets you run twisted code

00:20:51,809 --> 00:20:56,460
side-by-side with regular synchronous

00:20:53,580 --> 00:20:58,229
code it makes any thread twisted runs in

00:20:56,460 --> 00:21:00,059
the thread and then you call in to that

00:20:58,229 --> 00:21:02,879
thread to do things in twisting so it's

00:21:00,059 --> 00:21:04,679
sort of bolts twist on it works all

00:21:02,879 --> 00:21:09,269
right but it does have some downsides

00:21:04,679 --> 00:21:12,089
but there is a new project called Jango

00:21:09,269 --> 00:21:15,239
channels it is the brainchild of Andrew

00:21:12,089 --> 00:21:19,109
goblin who wrote 1.7 migrations which

00:21:15,239 --> 00:21:21,659
everyone loves I think I haven't used

00:21:19,109 --> 00:21:24,419
them they look pretty cool though I

00:21:21,659 --> 00:21:27,389
might steal them later so Django

00:21:24,419 --> 00:21:29,999
channels Manx Django event-driven you

00:21:27,389 --> 00:21:31,259
have a a synchronous server so twisted

00:21:29,999 --> 00:21:35,279
is one of the things that can run on and

00:21:31,259 --> 00:21:37,589
synchronous workers so essentially

00:21:35,279 --> 00:21:39,299
twisted is just the chef head chef

00:21:37,589 --> 00:21:41,969
putting orders on the board and then you

00:21:39,299 --> 00:21:45,349
have lots of other chefs small chefs or

00:21:41,969 --> 00:21:48,179
doing it like a blimp or something

00:21:45,349 --> 00:21:50,519
requests regular requests and WebSocket

00:21:48,179 --> 00:21:52,580
events are now events sent through

00:21:50,519 --> 00:21:55,230
channels sort of messaging channels

00:21:52,580 --> 00:21:57,779
your handlers for these events are all

00:21:55,230 --> 00:21:59,249
all synchronous so you can use your

00:21:57,779 --> 00:22:01,350
regular Jengo code you can use your

00:21:59,249 --> 00:22:05,190
regular requests you can do whatever you

00:22:01,350 --> 00:22:07,289
like channel events go on a queue as

00:22:05,190 --> 00:22:08,970
they come in and a picked up by the

00:22:07,289 --> 00:22:12,629
workers the synchronous workers which

00:22:08,970 --> 00:22:14,610
are all running chango workers can also

00:22:12,629 --> 00:22:16,590
put things on the queue but they can't

00:22:14,610 --> 00:22:19,440
get a result because it's a because the

00:22:16,590 --> 00:22:22,529
queue is asynchronous he can't wait for

00:22:19,440 --> 00:22:25,980
it so it does allow you use web sockets

00:22:22,529 --> 00:22:27,899
which is pretty cool if you don't care

00:22:25,980 --> 00:22:30,539
about the response for example the page

00:22:27,899 --> 00:22:32,429
count counter thing you can just you can

00:22:30,539 --> 00:22:36,119
just make a new channel which is

00:22:32,429 --> 00:22:38,970
increment page counter on the request

00:22:36,119 --> 00:22:40,440
you can send a new event to a channel

00:22:38,970 --> 00:22:42,749
and then that can handle it and it

00:22:40,440 --> 00:22:43,860
doesn't block your current one so that

00:22:42,749 --> 00:22:45,119
means that if you're doing a lot of

00:22:43,860 --> 00:22:47,820
things that you don't care about the

00:22:45,119 --> 00:22:51,059
response like for example some metrics

00:22:47,820 --> 00:22:53,549
or yep tracking like that then it'll

00:22:51,059 --> 00:22:55,470
make your page loads much faster because

00:22:53,549 --> 00:22:56,730
it doesn't have to wait to do that in

00:22:55,470 --> 00:22:59,999
the database before it can actually

00:22:56,730 --> 00:23:02,519
return the useful result the workers

00:22:59,999 --> 00:23:04,679
also can run over the network i'm pretty

00:23:02,519 --> 00:23:09,629
sure because one of the backends is read

00:23:04,679 --> 00:23:11,190
SQ or a postgresql memory cube so they

00:23:09,629 --> 00:23:13,350
don't have to be on the same machine so

00:23:11,190 --> 00:23:16,110
you have a multi machine story right

00:23:13,350 --> 00:23:18,119
there so you can have one one machine

00:23:16,110 --> 00:23:19,679
which handles all the connections and

00:23:18,119 --> 00:23:22,799
you have lots of work of machines that

00:23:19,679 --> 00:23:24,960
don't that aren't aren't connect

00:23:22,799 --> 00:23:26,580
actually connected to the net all they

00:23:24,960 --> 00:23:28,499
could be but they're not the ones

00:23:26,580 --> 00:23:29,940
handling the requests they just take

00:23:28,499 --> 00:23:31,590
things off the event queue and work on

00:23:29,940 --> 00:23:33,389
it that's my words WebSockets doesn't

00:23:31,590 --> 00:23:36,230
matter whether it's a request it just

00:23:33,389 --> 00:23:38,970
takes it off the queue it doesn't care

00:23:36,230 --> 00:23:41,070
however you might want to run multiple

00:23:38,970 --> 00:23:44,070
things at once for example if you're

00:23:41,070 --> 00:23:45,960
doing some concurrent concurrent things

00:23:44,070 --> 00:23:47,809
that you want to speed up you can't do

00:23:45,960 --> 00:23:50,549
that this doesn't solve that problem

00:23:47,809 --> 00:23:52,169
your sink your synchronous workers are

00:23:50,549 --> 00:23:53,820
still synchronous you can only do the

00:23:52,169 --> 00:23:56,009
one thing your time just like you do in

00:23:53,820 --> 00:23:58,559
Django right now and your code there's a

00:23:56,009 --> 00:24:00,330
few steps up from the actual WebSocket

00:23:58,559 --> 00:24:02,399
connection so it'll be a bit slower you

00:24:00,330 --> 00:24:04,710
won't be able to shove a lot of stuff

00:24:02,399 --> 00:24:05,940
down however it won't let you do it and

00:24:04,710 --> 00:24:08,009
it will work for most

00:24:05,940 --> 00:24:11,070
purposes if you if you end up wanting

00:24:08,009 --> 00:24:13,529
say high-performance websockets then

00:24:11,070 --> 00:24:15,629
this probably isn't the best bet writing

00:24:13,529 --> 00:24:17,009
something in twisted or other similar

00:24:15,629 --> 00:24:19,019
frameworks is probably your best bet for

00:24:17,009 --> 00:24:22,590
there but if you really need to shove

00:24:19,019 --> 00:24:25,080
that much performance then you've you

00:24:22,590 --> 00:24:27,980
probably can invest the time to you know

00:24:25,080 --> 00:24:30,600
get all that that all working smoothly

00:24:27,980 --> 00:24:32,700
so what does it look like for you the

00:24:30,600 --> 00:24:35,279
coder because if you want to use this

00:24:32,700 --> 00:24:37,919
this is sort of what looks like this is

00:24:35,279 --> 00:24:40,590
one of the examples in the documentation

00:24:37,919 --> 00:24:45,299
which is a check line that works over

00:24:40,590 --> 00:24:48,419
web sockets plus a example request so

00:24:45,299 --> 00:24:52,740
when the request comes in websocket RHCP

00:24:48,419 --> 00:24:55,230
it sends the message to channel you then

00:24:52,740 --> 00:25:00,809
implement consumers so you say that this

00:24:55,230 --> 00:25:02,820
function takes things of this Q you are

00:25:00,809 --> 00:25:05,100
given a channel to send a result of

00:25:02,820 --> 00:25:07,950
consumer when it's called so in this one

00:25:05,100 --> 00:25:10,740
you'll see it you were passed a response

00:25:07,950 --> 00:25:15,000
channel you can read that which is where

00:25:10,740 --> 00:25:16,889
you right back the result this also

00:25:15,000 --> 00:25:18,960
means that you can write back the result

00:25:16,889 --> 00:25:21,419
and then keep doing things so you can

00:25:18,960 --> 00:25:23,820
return the page and then you can do

00:25:21,419 --> 00:25:25,500
other synchronous things afterwards so

00:25:23,820 --> 00:25:29,129
it sort of decouples it from the request

00:25:25,500 --> 00:25:30,629
response cycle but in the case of a just

00:25:29,129 --> 00:25:32,519
a normal web request you send back a

00:25:30,629 --> 00:25:34,139
channel encoded response object which

00:25:32,519 --> 00:25:37,500
sort of makes into JSON so it will fit

00:25:34,139 --> 00:25:38,909
in Redis and so so we'll work a bit

00:25:37,500 --> 00:25:41,100
better there's there's nothing really

00:25:38,909 --> 00:25:44,370
special as far as the messaging hugo's

00:25:41,100 --> 00:25:47,549
it's just a regular red ask you or

00:25:44,370 --> 00:25:49,590
postgres or in it sorry it uses the arm

00:25:47,549 --> 00:25:51,840
you can have normal based backed 14

00:25:49,590 --> 00:25:54,809
testing which would be pretty slow but

00:25:51,840 --> 00:25:56,399
you know it'll work for your for your

00:25:54,809 --> 00:26:00,990
testing purposes and you can move to a

00:25:56,399 --> 00:26:04,049
real queuing system afterwards in case

00:26:00,990 --> 00:26:06,720
WebSockets you send back the content so

00:26:04,049 --> 00:26:13,440
that that there is sorry I'll just can

00:26:06,720 --> 00:26:23,460
actually go back yes okay so as you can

00:26:13,440 --> 00:26:28,230
see there the consumer is ok i'm keen oh

00:26:23,460 --> 00:26:30,240
come on ok so you can see there you can

00:26:28,230 --> 00:26:34,559
see there that the consumer you're

00:26:30,240 --> 00:26:37,830
consuming from Jengo whiskey request so

00:26:34,559 --> 00:26:40,559
that is essentially the lowest level you

00:26:37,830 --> 00:26:43,860
can go that is before things like fuse

00:26:40,559 --> 00:26:46,259
happen that is just the most basic you

00:26:43,860 --> 00:26:48,269
can work on one's up a bit more so I

00:26:46,259 --> 00:26:49,710
believe you can do like function-based

00:26:48,269 --> 00:26:52,139
views and class-based views and things

00:26:49,710 --> 00:26:54,419
like that with this but this is just

00:26:52,139 --> 00:26:57,809
just an example in documentation so

00:26:54,419 --> 00:26:59,369
that's no you can do your own in here

00:26:57,809 --> 00:27:01,889
just like in regular Django you can

00:26:59,369 --> 00:27:05,070
write your own routing code if you were

00:27:01,889 --> 00:27:14,850
that masochistic so Jackie's Junkers

00:27:05,070 --> 00:27:16,919
it's don't form your own and then it

00:27:14,850 --> 00:27:18,360
goes back to the clients so the worker

00:27:16,919 --> 00:27:21,210
machine doesn't actually have a

00:27:18,360 --> 00:27:23,519
connection to the real client the one

00:27:21,210 --> 00:27:30,240
that puts everything on the queue is the

00:27:23,519 --> 00:27:33,059
one that actually does that oh okay um

00:27:30,240 --> 00:27:34,529
so that means that you can do some

00:27:33,059 --> 00:27:36,960
interesting things as far as networking

00:27:34,529 --> 00:27:38,909
goes because you no longer have to have

00:27:36,960 --> 00:27:42,330
all these machines open to the internet

00:27:38,909 --> 00:27:43,860
and and put your H a proxy or whatever

00:27:42,330 --> 00:27:46,200
in front of it you just have these

00:27:43,860 --> 00:27:47,610
router machines and then the worker

00:27:46,200 --> 00:27:50,669
machines and they can scale

00:27:47,610 --> 00:27:52,230
independently so if you aren't putting

00:27:50,669 --> 00:27:53,970
things on you fast enough you add more

00:27:52,230 --> 00:27:56,490
routing machines if you aren't having

00:27:53,970 --> 00:27:58,500
the requests fast enough you add more

00:27:56,490 --> 00:28:01,830
work machines so sort of makes it a bit

00:27:58,500 --> 00:28:04,019
easier for scaling Django as well which

00:28:01,830 --> 00:28:06,600
which can be very very handy because i

00:28:04,019 --> 00:28:08,549
believe i haven't actually deployed

00:28:06,600 --> 00:28:11,399
django much larger scale but i believe

00:28:08,549 --> 00:28:14,519
the thing to do is just add more servers

00:28:11,399 --> 00:28:16,619
that have a full web server on them so

00:28:14,519 --> 00:28:18,360
with this each each of those workers is

00:28:16,619 --> 00:28:20,770
much lighter weight

00:28:18,360 --> 00:28:23,200
the web soccer clients can be put into

00:28:20,770 --> 00:28:26,700
groups so that means that you can

00:28:23,200 --> 00:28:30,400
broadcast messages out of them so in the

00:28:26,700 --> 00:28:32,710
the chat group thing you can you can do

00:28:30,400 --> 00:28:34,780
that so that when a message comes in it

00:28:32,710 --> 00:28:36,970
sends that message to all of those in a

00:28:34,780 --> 00:28:39,520
group so that means that you can put

00:28:36,970 --> 00:28:41,320
people in a group that I say if you've

00:28:39,520 --> 00:28:42,910
got a website with a WebSocket

00:28:41,320 --> 00:28:45,910
connection that they're looking at a

00:28:42,910 --> 00:28:47,920
particular page then when you can do a

00:28:45,910 --> 00:28:51,910
norm trigger I think that's what they

00:28:47,920 --> 00:28:55,240
call on triggers on save triggers yeah

00:28:51,910 --> 00:28:57,790
on save triggers that when the thing

00:28:55,240 --> 00:29:00,610
that they're looking at changes everyone

00:28:57,790 --> 00:29:02,230
that looks at that page can be put in a

00:29:00,610 --> 00:29:04,960
group and then message to say that's

00:29:02,230 --> 00:29:07,240
updated so it does allow you to make to

00:29:04,960 --> 00:29:09,610
handle things a bit that as far as push

00:29:07,240 --> 00:29:12,790
things got thing goes rather than doing

00:29:09,610 --> 00:29:15,490
Ajax requests and pulling so what makes

00:29:12,790 --> 00:29:18,490
it different to those other solutions

00:29:15,490 --> 00:29:21,180
like Hendrix and crochet well it doesn't

00:29:18,490 --> 00:29:24,730
make your any of your code asynchronous

00:29:21,180 --> 00:29:27,760
it just run runs a sink runners for your

00:29:24,730 --> 00:29:30,070
sink synchronous code it doesn't really

00:29:27,760 --> 00:29:33,280
tackle the hard problem map of actually

00:29:30,070 --> 00:29:34,840
running Django itself asynchronously the

00:29:33,280 --> 00:29:38,410
almost still synchronous all of that

00:29:34,840 --> 00:29:42,820
that's that doesn't change so it doesn't

00:29:38,410 --> 00:29:44,950
get all of the benefits oh there it

00:29:42,820 --> 00:29:48,940
doesn't get all of the benefits as if it

00:29:44,950 --> 00:29:51,100
did but that might be enough I mean you

00:29:48,940 --> 00:29:52,510
don't have to go you don't have to go

00:29:51,100 --> 00:29:55,060
fully in one direction this might be

00:29:52,510 --> 00:29:56,620
good enough for your purposes I mean

00:29:55,060 --> 00:29:58,660
that's I believe that's the whole point

00:29:56,620 --> 00:30:00,460
of Jengo you could write everything from

00:29:58,660 --> 00:30:03,220
scratch and there will be exactly to

00:30:00,460 --> 00:30:04,840
your purposes but Django is there and it

00:30:03,220 --> 00:30:07,240
does all these things for you mostly

00:30:04,840 --> 00:30:09,220
correctly so this will be one more thing

00:30:07,240 --> 00:30:12,880
which will do things mostly correctly

00:30:09,220 --> 00:30:15,160
for you I think it's a very positive

00:30:12,880 --> 00:30:17,320
development for Jengo and I do hope that

00:30:15,160 --> 00:30:20,950
it gets into the main line pretty soon

00:30:17,320 --> 00:30:24,460
well when it's ready it supports Python

00:30:20,950 --> 00:30:26,260
2.7 and 3.3 we do whether newer twisted

00:30:24,460 --> 00:30:29,350
because of the WebSocket sport uses the

00:30:26,260 --> 00:30:32,110
autobarn library which is more or less

00:30:29,350 --> 00:30:35,140
the standard twisted web socket library

00:30:32,110 --> 00:30:39,160
and this URL is where you can check it

00:30:35,140 --> 00:30:42,220
out the documentation it's it's I think

00:30:39,160 --> 00:30:44,920
it's channels read the docs org I think

00:30:42,220 --> 00:30:46,150
as well there's also Django dash

00:30:44,920 --> 00:30:49,179
channels which is an entirely different

00:30:46,150 --> 00:30:52,450
project the other thing I want to talk

00:30:49,179 --> 00:30:54,640
about composition Russell knows Russell

00:30:52,450 --> 00:30:56,950
is laughing because I drone on about

00:30:54,640 --> 00:30:59,799
this I'm doing a full talk on this

00:30:56,950 --> 00:31:01,600
tomorrow at 1030am called slow down

00:30:59,799 --> 00:31:06,220
compose yourself how composition can

00:31:01,600 --> 00:31:08,559
help you write modular testable code so

00:31:06,220 --> 00:31:10,270
i won't go into it too much here but

00:31:08,559 --> 00:31:12,400
i'll give you some things that you know

00:31:10,270 --> 00:31:15,010
if you're interested in you can go go

00:31:12,400 --> 00:31:16,750
forward and you know investigate it so

00:31:15,010 --> 00:31:18,640
django relies on inheritance to

00:31:16,750 --> 00:31:21,780
customize behavior you take a view and

00:31:18,640 --> 00:31:24,760
you subclass it and you override stuff

00:31:21,780 --> 00:31:27,730
there's a lot of Django code where ends

00:31:24,760 --> 00:31:31,559
up has a maze of mix-ins and super calls

00:31:27,730 --> 00:31:33,700
now this can get very confusing

00:31:31,559 --> 00:31:35,770
composition is when larger blocks

00:31:33,700 --> 00:31:38,169
illogic are made up by smaller ones so

00:31:35,770 --> 00:31:40,240
rather than subclassing you just have

00:31:38,169 --> 00:31:42,549
something that meets some interface and

00:31:40,240 --> 00:31:45,820
then you pass it in and tell it instead

00:31:42,549 --> 00:31:48,700
of doing that on the subclass do it on

00:31:45,820 --> 00:31:51,669
this object instead so you can have a

00:31:48,700 --> 00:31:54,669
database object I think one a good

00:31:51,669 --> 00:31:57,790
example of this is a DB API I think I

00:31:54,669 --> 00:32:00,220
know sorry DB API which is the standard

00:31:57,790 --> 00:32:01,870
one that is sort of composition based

00:32:00,220 --> 00:32:04,419
design all of these different databases

00:32:01,870 --> 00:32:06,580
have standard standard ways of calling

00:32:04,419 --> 00:32:09,910
them so it doesn't matter what sort of

00:32:06,580 --> 00:32:11,950
dance but it in the most basic terms it

00:32:09,910 --> 00:32:13,390
doesn't matter what one it is because

00:32:11,950 --> 00:32:17,169
they all meet that interface and they

00:32:13,390 --> 00:32:18,910
all work very similarly so a database

00:32:17,169 --> 00:32:22,660
driver for example you can move the arm

00:32:18,910 --> 00:32:24,220
one layer deeper so that means that when

00:32:22,660 --> 00:32:27,490
you're testing you don't actually do

00:32:24,220 --> 00:32:29,770
orme calls because you refactor it so

00:32:27,490 --> 00:32:32,799
that what would usually do a norm call

00:32:29,770 --> 00:32:35,740
in line it does the arm call and calls a

00:32:32,799 --> 00:32:37,600
function with the result of that so then

00:32:35,740 --> 00:32:39,160
when you go to test all you need to test

00:32:37,600 --> 00:32:41,140
is that function you don't need to set

00:32:39,160 --> 00:32:43,030
up a new database you don't need to fill

00:32:41,140 --> 00:32:44,010
it full of fake data because you can

00:32:43,030 --> 00:32:46,200
just call a funk

00:32:44,010 --> 00:32:49,350
as a regular thing in a unit test it can

00:32:46,200 --> 00:32:53,190
make it so much faster and when you

00:32:49,350 --> 00:32:55,470
combine it with integration tests which

00:32:53,190 --> 00:33:00,600
actually talk to the arm you can get

00:32:55,470 --> 00:33:02,040
very very reliable software a new

00:33:00,600 --> 00:33:04,500
generic view system on top of Django

00:33:02,040 --> 00:33:05,970
channels it isn't there I think that

00:33:04,500 --> 00:33:08,730
this could be a really great opportunity

00:33:05,970 --> 00:33:11,130
to bring something new into Django that

00:33:08,730 --> 00:33:14,850
sort of fits in with all of this I do

00:33:11,130 --> 00:33:18,600
hope to sort of I've been meaning to do

00:33:14,850 --> 00:33:20,940
a generic composition based views but I

00:33:18,600 --> 00:33:24,330
just haven't had the time to many yaks

00:33:20,940 --> 00:33:26,700
to shave unit testing now this was a

00:33:24,330 --> 00:33:29,820
slide which was standing but this sort

00:33:26,700 --> 00:33:31,530
of sums it up I don't like the orme and

00:33:29,820 --> 00:33:36,060
how it makes nearly all Django code

00:33:31,530 --> 00:33:38,070
untestable database dumps get outdated

00:33:36,060 --> 00:33:39,750
in the development stages of your

00:33:38,070 --> 00:33:42,630
application you don't know exactly what

00:33:39,750 --> 00:33:46,170
scheming you need then it becomes a very

00:33:42,630 --> 00:33:48,870
common where your test data is not what

00:33:46,170 --> 00:33:51,870
your database actually takes so if your

00:33:48,870 --> 00:33:53,580
test data is say very relational then

00:33:51,870 --> 00:33:55,170
you end up having to write scripts or

00:33:53,580 --> 00:33:58,230
something to actually replicate it and

00:33:55,170 --> 00:33:59,910
then turn it into sequel or you know put

00:33:58,230 --> 00:34:03,570
it in the database and then dump it out

00:33:59,910 --> 00:34:05,580
and it's you know if you compose the on

00:34:03,570 --> 00:34:07,620
touching sections like I mentioned then

00:34:05,580 --> 00:34:09,179
it can be way easier to test because all

00:34:07,620 --> 00:34:10,679
you do is call functions you have your

00:34:09,179 --> 00:34:13,530
integration test which has the test

00:34:10,679 --> 00:34:16,620
database but you don't need it to know

00:34:13,530 --> 00:34:18,480
that the basic logic works so you don't

00:34:16,620 --> 00:34:20,760
need to pull up whole database just to

00:34:18,480 --> 00:34:23,750
test that say this number is bigger than

00:34:20,760 --> 00:34:26,040
this number and this logic is correct

00:34:23,750 --> 00:34:28,560
please don't write to the database in

00:34:26,040 --> 00:34:30,480
your unit tests integration tests

00:34:28,560 --> 00:34:31,800
there's sort of like unit tests are

00:34:30,480 --> 00:34:33,360
testing the logic of your code

00:34:31,800 --> 00:34:37,770
integration tests make sure that the

00:34:33,360 --> 00:34:39,389
whole code works you rarely need unit

00:34:37,770 --> 00:34:41,280
tests unit tests are great they make it

00:34:39,389 --> 00:34:43,800
really easy to testings which might

00:34:41,280 --> 00:34:46,230
otherwise be hard for example if you

00:34:43,800 --> 00:34:48,179
have something that potentially violates

00:34:46,230 --> 00:34:51,210
consistency of the database and you

00:34:48,179 --> 00:34:53,520
really really need to make sure that

00:34:51,210 --> 00:34:55,080
that doesn't happen then it makes it

00:34:53,520 --> 00:34:56,940
easier because you don't have to wrangle

00:34:55,080 --> 00:34:57,480
post grades into accepting something

00:34:56,940 --> 00:34:59,640
which is

00:34:57,480 --> 00:35:03,150
gets a schema you can just give it the

00:34:59,640 --> 00:35:04,850
value don't have any external databases

00:35:03,150 --> 00:35:09,090
in your test if you have something like

00:35:04,850 --> 00:35:12,060
react or or any of those databases

00:35:09,090 --> 00:35:14,040
which you might have side by side don't

00:35:12,060 --> 00:35:16,590
spin them up in your test it makes it

00:35:14,040 --> 00:35:18,600
really hard to run and it also makes it

00:35:16,590 --> 00:35:20,340
slower because you don't have all of the

00:35:18,600 --> 00:35:23,369
nice things that Django does to set up

00:35:20,340 --> 00:35:25,950
your database because Django does that

00:35:23,369 --> 00:35:27,450
very well it wipes out and loads in your

00:35:25,950 --> 00:35:29,910
scheme and does all that very well

00:35:27,450 --> 00:35:32,100
unless you have special code that does

00:35:29,910 --> 00:35:35,700
this readily reliably this will end up

00:35:32,100 --> 00:35:37,619
being nothing but headaches and you

00:35:35,700 --> 00:35:39,690
should instead make standings you don't

00:35:37,619 --> 00:35:43,500
need to actually write to MongoDB you

00:35:39,690 --> 00:35:47,790
when putting it in an in-memory say list

00:35:43,500 --> 00:35:49,830
or dictionary can work just as well then

00:35:47,790 --> 00:35:51,980
make assertions on what it actually

00:35:49,830 --> 00:35:54,180
called what query arguments are gave

00:35:51,980 --> 00:35:57,410
then you can make sure that your code is

00:35:54,180 --> 00:36:00,390
actually passing in what seems saying

00:35:57,410 --> 00:36:03,720
you should use those real databases for

00:36:00,390 --> 00:36:05,010
integration acceptance tests though but

00:36:03,720 --> 00:36:06,720
those should rarely be driven by

00:36:05,010 --> 00:36:10,109
something like selenium under unit test

00:36:06,720 --> 00:36:14,460
or something like that um the things

00:36:10,109 --> 00:36:16,560
that you actually run when you go set up

00:36:14,460 --> 00:36:19,050
to PI test or whatever you have or nose

00:36:16,560 --> 00:36:20,670
or whatever those should be unit tests

00:36:19,050 --> 00:36:24,180
integration tests should be the whole

00:36:20,670 --> 00:36:27,540
kit and kaboodle could do boot I don't

00:36:24,180 --> 00:36:29,940
know if you have both you have very

00:36:27,540 --> 00:36:31,650
dependable codes you have very reliable

00:36:29,940 --> 00:36:33,750
code you know that it works at every

00:36:31,650 --> 00:36:36,030
single layer you know that not only is

00:36:33,750 --> 00:36:42,480
the logic solid but you know that it all

00:36:36,030 --> 00:36:46,460
fits together well now Django is a big

00:36:42,480 --> 00:36:52,490
ball of mutable mutable global state

00:36:46,460 --> 00:36:55,320
many parts oh that was yeah Django is a

00:36:52,490 --> 00:36:57,660
big ball of mutual global state there's

00:36:55,320 --> 00:37:00,780
things that would be really good to use

00:36:57,660 --> 00:37:02,490
outside of Django but the configuration

00:37:00,780 --> 00:37:04,320
all that makes it really hard you can't

00:37:02,490 --> 00:37:06,060
have a forum in one section that has a

00:37:04,320 --> 00:37:07,920
different configuration than another

00:37:06,060 --> 00:37:11,070
without some really horrible monkey

00:37:07,920 --> 00:37:13,980
patching or other disasters

00:37:11,070 --> 00:37:15,420
I like can go forms Django forms is my

00:37:13,980 --> 00:37:18,270
favorite part of Django it makes

00:37:15,420 --> 00:37:21,660
everything so easy and is a pleasure to

00:37:18,270 --> 00:37:23,610
use it it is really one of the things

00:37:21,660 --> 00:37:26,100
that even though i don't use django

00:37:23,610 --> 00:37:27,720
anymore i come back and use that I don't

00:37:26,100 --> 00:37:31,700
care if I have to monkey patch it it is

00:37:27,720 --> 00:37:34,380
worth it so I would like gin go to an to

00:37:31,700 --> 00:37:35,850
unravel all that global state and make

00:37:34,380 --> 00:37:38,070
it so that you can use it in other

00:37:35,850 --> 00:37:40,620
things you can use it in flask because

00:37:38,070 --> 00:37:42,870
Django bits of Django have much more use

00:37:40,620 --> 00:37:45,780
than just inside Django because it's

00:37:42,870 --> 00:37:49,710
really good it's great i love you all

00:37:45,780 --> 00:37:52,830
for having it so rarely why not just use

00:37:49,710 --> 00:37:57,030
twisted well twist it has its place

00:37:52,830 --> 00:37:59,970
Django has its place Django is very

00:37:57,030 --> 00:38:02,970
opinionated well in some ways in the

00:37:59,970 --> 00:38:04,680
ways that twisted isn't it saves you a

00:38:02,970 --> 00:38:07,290
lot of time it has a lot of things in it

00:38:04,680 --> 00:38:09,690
that save you time that get you a blog

00:38:07,290 --> 00:38:12,360
get you a website get you all this stuff

00:38:09,690 --> 00:38:16,410
without having to do a lot of work in an

00:38:12,360 --> 00:38:18,690
example i did i did a testing of of a

00:38:16,410 --> 00:38:20,880
small for example of django girls

00:38:18,690 --> 00:38:22,470
tutorial it's not a lot of code which is

00:38:20,880 --> 00:38:24,450
really good because when you've got

00:38:22,470 --> 00:38:27,990
people that don't have any idea about

00:38:24,450 --> 00:38:29,970
code to start with you don't pile heaps

00:38:27,990 --> 00:38:33,600
of code on them it's like you want a

00:38:29,970 --> 00:38:37,740
list of items inherit list view you get

00:38:33,600 --> 00:38:41,370
it it all works twisted is more like a

00:38:37,740 --> 00:38:43,290
pile of bricks you can build things with

00:38:41,370 --> 00:38:48,030
it it takes some time but it will be

00:38:43,290 --> 00:38:50,730
solid and Django has good opinions about

00:38:48,030 --> 00:38:52,350
a lot of things so we should keep those

00:38:50,730 --> 00:38:55,290
opinions there should be a framework

00:38:52,350 --> 00:38:57,420
which isn't scared to say this is how

00:38:55,290 --> 00:38:59,070
you do things this is the recommended

00:38:57,420 --> 00:39:02,390
way to do things this is how you do

00:38:59,070 --> 00:39:05,100
migrations this is how you do say forms

00:39:02,390 --> 00:39:07,440
it's really good to have something that

00:39:05,100 --> 00:39:10,140
just does it for you and it's something

00:39:07,440 --> 00:39:13,260
that I wish twisted did more but rarely

00:39:10,140 --> 00:39:14,880
they have their place and I think that

00:39:13,260 --> 00:39:16,740
the future is projects like Hendrix

00:39:14,880 --> 00:39:19,050
which is a run or tompa twisted and

00:39:16,740 --> 00:39:20,940
django channels because then it it

00:39:19,050 --> 00:39:23,250
railing lets you get the best of both

00:39:20,940 --> 00:39:24,040
worlds Hendricks will let you do twisted

00:39:23,250 --> 00:39:26,410
things if you

00:39:24,040 --> 00:39:28,090
more protocols you want to use but if

00:39:26,410 --> 00:39:29,680
you want Django your django to just be a

00:39:28,090 --> 00:39:32,110
bit faster just be able to use web

00:39:29,680 --> 00:39:34,120
sockets Django channels is excellent it

00:39:32,110 --> 00:39:38,350
will do exactly what you want and it

00:39:34,120 --> 00:39:40,750
will do it well everything is that twist

00:39:38,350 --> 00:39:42,220
isn't really hard it just brings you a

00:39:40,750 --> 00:39:45,330
couple layers down makes you deal with

00:39:42,220 --> 00:39:48,520
hard concepts like asynchronous i/o in

00:39:45,330 --> 00:39:50,080
no language is it easy there's things

00:39:48,520 --> 00:39:55,330
that make it nicer in other languages

00:39:50,080 --> 00:39:58,750
visit no means absolutely easy you need

00:39:55,330 --> 00:40:00,670
to assess the trade-offs Django does

00:39:58,750 --> 00:40:03,430
things good twisted does things good

00:40:00,670 --> 00:40:05,830
it's no point going Django is great I

00:40:03,430 --> 00:40:07,480
hate twisted bah bah bah well if you're

00:40:05,830 --> 00:40:09,340
doing something like a DNS server that

00:40:07,480 --> 00:40:12,700
you needed for example if you have a

00:40:09,340 --> 00:40:14,920
website where you have dynamic URLs you

00:40:12,700 --> 00:40:17,080
can write a twisted dns server in like

00:40:14,920 --> 00:40:18,130
10 minutes that will do exactly that it

00:40:17,080 --> 00:40:20,140
will load it from a database for

00:40:18,130 --> 00:40:21,850
eternity it's all there it's the toolkit

00:40:20,140 --> 00:40:24,040
for you to do it so there's no point

00:40:21,850 --> 00:40:25,840
just avoiding it because you don't like

00:40:24,040 --> 00:40:28,990
how its web framework works there are

00:40:25,840 --> 00:40:32,200
many portions of them Django is really

00:40:28,990 --> 00:40:33,910
good at getting a CMS getting you a site

00:40:32,200 --> 00:40:35,470
that's like a blog getting you a

00:40:33,910 --> 00:40:37,330
newspaper which is what it was

00:40:35,470 --> 00:40:41,380
originally designed for its really good

00:40:37,330 --> 00:40:42,760
at that you need to pick and choose you

00:40:41,380 --> 00:40:45,490
need to decide what parts of your

00:40:42,760 --> 00:40:47,740
project a more jungle oriented or flask

00:40:45,490 --> 00:40:51,250
oriented or things like that and choose

00:40:47,740 --> 00:40:52,990
the best tool for the job if I ever want

00:40:51,250 --> 00:40:55,120
to write a blog i will write it in

00:40:52,990 --> 00:40:57,250
Django I don't care if it's not a

00:40:55,120 --> 00:41:00,400
synchronous I don't care if I complain

00:40:57,250 --> 00:41:03,430
about how the arm is very confusing for

00:41:00,400 --> 00:41:05,440
me it does a well and it lets me do it

00:41:03,430 --> 00:41:07,870
in like five minutes and I can worry

00:41:05,440 --> 00:41:09,730
about the real things like having the

00:41:07,870 --> 00:41:15,850
perfect shade of black on white monotype

00:41:09,730 --> 00:41:18,640
text it's very important the future is

00:41:15,850 --> 00:41:20,380
working together I think that there's

00:41:18,640 --> 00:41:22,930
there's been some friendly rivalry I'll

00:41:20,380 --> 00:41:25,540
say friendly in it sometimes friendly

00:41:22,930 --> 00:41:26,980
sometimes not I think that there does

00:41:25,540 --> 00:41:28,210
need to be a bit more communication

00:41:26,980 --> 00:41:30,870
there doesn't need to be some people

00:41:28,210 --> 00:41:33,790
that know both and work with both and

00:41:30,870 --> 00:41:35,470
know when things should go from one to

00:41:33,790 --> 00:41:37,750
the other and there needs to be more

00:41:35,470 --> 00:41:40,150
people that think

00:41:37,750 --> 00:41:41,530
hey Jen go might be really good for this

00:41:40,150 --> 00:41:43,660
or how you twist it might be real and

00:41:41,530 --> 00:41:45,430
good for this you can give it a shot I

00:41:43,660 --> 00:41:47,500
mean you know the best thing about

00:41:45,430 --> 00:41:49,630
software is it's very squishy it doesn't

00:41:47,500 --> 00:41:52,930
matter if your first thing doesn't work

00:41:49,630 --> 00:41:55,270
you can always try something else so in

00:41:52,930 --> 00:41:58,360
short next time you need web sockets

00:41:55,270 --> 00:42:00,130
experimenting with Django channels next

00:41:58,360 --> 00:42:01,630
time you're on your view try and write

00:42:00,130 --> 00:42:04,840
your logic to take down rather than

00:42:01,630 --> 00:42:07,120
calling the order ectly investigate

00:42:04,840 --> 00:42:09,100
composition i'll be doing a talk on it

00:42:07,120 --> 00:42:11,170
tomorrow if you're not going to

00:42:09,100 --> 00:42:12,850
russell's talk then you should come to

00:42:11,170 --> 00:42:15,720
mind or the other talk I don't know

00:42:12,850 --> 00:42:18,370
choose what you want be a free person

00:42:15,720 --> 00:42:20,470
and most of all don't be scared of

00:42:18,370 --> 00:42:24,820
twisted it's not that scary it's just

00:42:20,470 --> 00:42:26,560
coded one last thing Django girls

00:42:24,820 --> 00:42:29,020
Australia is happening on monday the

00:42:26,560 --> 00:42:31,210
third of August there are still places

00:42:29,020 --> 00:42:34,240
for people that want to be mentors or

00:42:31,210 --> 00:42:36,850
people that want to be students so come

00:42:34,240 --> 00:42:39,550
along I'll be dragging several people

00:42:36,850 --> 00:42:40,750
into it like Russ have you signed up to

00:42:39,550 --> 00:42:45,850
be a mentor if not I'm dragging you

00:42:40,750 --> 00:42:48,310
along ah ok so we'll need someone like

00:42:45,850 --> 00:42:50,860
Russ who isn't Russ because he's doing

00:42:48,310 --> 00:42:53,230
other things we'll need Russ two point

00:42:50,860 --> 00:42:54,880
oh so there's still still time to apply

00:42:53,230 --> 00:42:56,530
still time to let people know that are

00:42:54,880 --> 00:42:58,870
in Brisbane that it's the thing it's

00:42:56,530 --> 00:43:01,570
going to be fun there will be cupcakes

00:42:58,870 --> 00:43:05,650
I'm sure I'll get some cupcakes that's

00:43:01,570 --> 00:43:07,240
what makes you happy questions please

00:43:05,650 --> 00:43:10,030
ask questions don't tell me how I'm

00:43:07,240 --> 00:43:13,620
wrong do that after I'm you can tell me

00:43:10,030 --> 00:43:13,620
how I'm wrong afterwards

00:43:20,339 --> 00:43:24,309
odo Russell's got the first question of

00:43:23,319 --> 00:43:26,019
course through its course look at the

00:43:24,309 --> 00:43:27,700
first meeting so yeah thank you very

00:43:26,019 --> 00:43:29,170
much an before that if anybody does have

00:43:27,700 --> 00:43:30,880
any questions please form an orderly

00:43:29,170 --> 00:43:33,069
rabble behind me and just as a general

00:43:30,880 --> 00:43:34,599
reminder about questions when they come

00:43:33,069 --> 00:43:35,829
to conferences the word when you have a

00:43:34,599 --> 00:43:38,229
question it does not start with the word

00:43:35,829 --> 00:43:41,229
I have a comment questions begin with

00:43:38,229 --> 00:43:43,749
words like can you tell me about or do

00:43:41,229 --> 00:43:44,829
you have an opinion on so please keep

00:43:43,749 --> 00:43:46,660
the comments if you want to have a

00:43:44,829 --> 00:43:48,279
comment submit a talk and you can talk a

00:43:46,660 --> 00:43:49,989
conferences and I'll be here like the

00:43:48,279 --> 00:43:52,299
whole weekend so you can yell up here

00:43:49,989 --> 00:43:55,239
I'm wrong um so yeah just to get the

00:43:52,299 --> 00:43:57,069
ball rolling you've talked about

00:43:55,239 --> 00:43:58,359
asynchronous and synchronous and and

00:43:57,069 --> 00:43:59,799
what the stacks look like in terms of

00:43:58,359 --> 00:44:01,630
software the bit you said haven't spoken

00:43:59,799 --> 00:44:04,569
about is what it looks like in

00:44:01,630 --> 00:44:06,190
production the synchronous web story

00:44:04,569 --> 00:44:07,299
younger people are familiar with used to

00:44:06,190 --> 00:44:08,499
get behind one whiskey you put that

00:44:07,299 --> 00:44:09,819
behind engine X some sort of load

00:44:08,499 --> 00:44:12,099
balancer where you use gonna corn and no

00:44:09,819 --> 00:44:13,900
data load balancer what does the

00:44:12,099 --> 00:44:17,440
production story look like we've twisted

00:44:13,900 --> 00:44:19,599
in that mix okay so twisted has from

00:44:17,440 --> 00:44:21,150
projects like Hendrix that uses twisted

00:44:19,599 --> 00:44:23,859
swissgear honor because twist has a

00:44:21,150 --> 00:44:25,809
production-ready web server it mostly

00:44:23,859 --> 00:44:28,690
works for pipeline works very well on C

00:44:25,809 --> 00:44:30,910
Python and so generally when you're

00:44:28,690 --> 00:44:34,450
deploying a twisted using application

00:44:30,910 --> 00:44:36,430
you use the twist d of the twisted Damon

00:44:34,450 --> 00:44:39,339
application and make a plug-in and then

00:44:36,430 --> 00:44:43,390
just basically go twisty your project

00:44:39,339 --> 00:44:45,339
and then it starts it up so people there

00:44:43,390 --> 00:44:48,130
are integrations for example system d

00:44:45,339 --> 00:44:50,109
for those that use it it can work with

00:44:48,130 --> 00:44:52,239
socket activation or all that sort of

00:44:50,109 --> 00:44:53,950
thing so you can restart it without

00:44:52,239 --> 00:44:57,279
losing in connections but essentially

00:44:53,950 --> 00:44:59,890
you don't put engine X in front of it

00:44:57,279 --> 00:45:01,809
you can put something like H a proxy or

00:44:59,890 --> 00:45:04,359
something like that something similar

00:45:01,809 --> 00:45:07,059
load balancer to sort of makes it a bit

00:45:04,359 --> 00:45:09,819
easier but really it's just running

00:45:07,059 --> 00:45:12,880
twisted it's got its own web server it's

00:45:09,819 --> 00:45:14,200
pretty good it's a bit rough around the

00:45:12,880 --> 00:45:18,000
edges when you're writing software but

00:45:14,200 --> 00:45:20,190
it's still pretty good ok thank you

00:45:18,000 --> 00:45:22,830
hey thank you for the talk I was

00:45:20,190 --> 00:45:24,930
wondering if you have any opinion or if

00:45:22,830 --> 00:45:27,000
you looked at the other s and chronic

00:45:24,930 --> 00:45:29,070
solutions for Python like event led or

00:45:27,000 --> 00:45:32,370
orgy event and how do they compare to

00:45:29,070 --> 00:45:33,810
twisted and rat ok so G events and a

00:45:32,370 --> 00:45:35,910
ventolin I think all of those use

00:45:33,810 --> 00:45:38,580
Greenland's which are essentially mini

00:45:35,910 --> 00:45:41,550
threads now there's a really good blog

00:45:38,580 --> 00:45:43,860
I'm I haven't really used those in depth

00:45:41,550 --> 00:45:45,300
just because I sort of drank the twisted

00:45:43,860 --> 00:45:48,450
kool-aid like it was going out of style

00:45:45,300 --> 00:45:51,330
but if you go on glyphs blog so glyph

00:45:48,450 --> 00:45:53,010
dot I think blog boycott I am life is

00:45:51,330 --> 00:45:55,440
the founder of twisted project he's

00:45:53,010 --> 00:45:57,980
really cool I believe he did a similar

00:45:55,440 --> 00:46:00,900
talk at gencon us a couple years ago

00:45:57,980 --> 00:46:03,180
yeah yeah he was doing something else

00:46:00,900 --> 00:46:04,800
but he's he's got bits of twisting

00:46:03,180 --> 00:46:06,240
everything he does he actually did a

00:46:04,800 --> 00:46:09,530
blog post about this so I'd recommend

00:46:06,240 --> 00:46:12,450
doing that um I believe it comes down to

00:46:09,530 --> 00:46:15,080
it doesn't work as well as the

00:46:12,450 --> 00:46:17,730
cooperative multitasking does as far as

00:46:15,080 --> 00:46:19,260
reasoning about your code but it does

00:46:17,730 --> 00:46:23,940
the essentially the same thing at the

00:46:19,260 --> 00:46:26,340
end of the day so it's I think gee event

00:46:23,940 --> 00:46:27,840
also works on Python 3 now so there's no

00:46:26,340 --> 00:46:30,600
longer the twist is the only one that

00:46:27,840 --> 00:46:34,650
works on Python 3 a Cinco does not exist

00:46:30,600 --> 00:46:37,130
I'm ignoring it so I think o is pretty

00:46:34,650 --> 00:46:39,660
good as well it's it's essentially a

00:46:37,130 --> 00:46:43,050
twist instant library it takes a lot of

00:46:39,660 --> 00:46:45,750
a lot of the ideas of twisted and belief

00:46:43,050 --> 00:46:51,150
was actually a part of the pep process I

00:46:45,750 --> 00:46:53,360
believe this thank you for thank if your

00:46:51,150 --> 00:46:56,820
talk I have a follow-on question from

00:46:53,360 --> 00:47:00,390
from Russell's about production

00:46:56,820 --> 00:47:02,070
deployment the situation for doing web

00:47:00,390 --> 00:47:03,990
application performance monitoring for

00:47:02,070 --> 00:47:06,030
synchronous apps on whiskey's sort of

00:47:03,990 --> 00:47:09,140
getting fairly well developed along but

00:47:06,030 --> 00:47:12,780
in the async world it's much much harder

00:47:09,140 --> 00:47:13,980
in the ace in the synchronous world you

00:47:12,780 --> 00:47:17,040
can rely on the fact you've got a Fred

00:47:13,980 --> 00:47:18,750
local and you can use that to collect

00:47:17,040 --> 00:47:22,140
information across the lifetime of the

00:47:18,750 --> 00:47:23,790
request in an async world it's not quite

00:47:22,140 --> 00:47:26,070
the same because at each point you might

00:47:23,790 --> 00:47:27,510
want to put monitoring in is no easy

00:47:26,070 --> 00:47:29,010
spot to put things because everything's

00:47:27,510 --> 00:47:30,930
happening in the same freak are there

00:47:29,010 --> 00:47:32,120
any solutions in the twisted world for

00:47:30,930 --> 00:47:34,250
web application

00:47:32,120 --> 00:47:36,710
it's monitoring or can you see anyways

00:47:34,250 --> 00:47:39,260
twist it could be changed to put hooks

00:47:36,710 --> 00:47:40,910
in or something like that to assist so

00:47:39,260 --> 00:47:43,460
essentially rather than using a

00:47:40,910 --> 00:47:45,650
threadlocal the solution for that for

00:47:43,460 --> 00:47:47,570
example the Elliott logger which has the

00:47:45,650 --> 00:47:49,700
sort of which you would do a threadlocal

00:47:47,570 --> 00:47:51,200
logger to keep the context what you do

00:47:49,700 --> 00:47:52,640
is you just pass it on the callback

00:47:51,200 --> 00:47:54,380
chain so you just have an object which

00:47:52,640 --> 00:47:56,090
is your monitoring object users pass it

00:47:54,380 --> 00:47:58,280
down the cobweb chain that snows

00:47:56,090 --> 00:48:01,220
friendly arm you can walk up the stack

00:47:58,280 --> 00:48:02,570
and do some magic there are a couple

00:48:01,220 --> 00:48:04,250
things I wrote something called Eagle

00:48:02,570 --> 00:48:06,860
Eye which sort of acts as a wrapper

00:48:04,250 --> 00:48:08,240
around deferred so that does that sort

00:48:06,860 --> 00:48:10,190
of monitoring but the problem is that

00:48:08,240 --> 00:48:12,680
when you're monitoring asynchronous code

00:48:10,190 --> 00:48:15,020
it's no longer this took this long to do

00:48:12,680 --> 00:48:17,000
because it might be broken up in several

00:48:15,020 --> 00:48:20,330
several portions so there is that

00:48:17,000 --> 00:48:22,280
problem um I'm not sure there's any real

00:48:20,330 --> 00:48:23,900
easy ways to do it like profiling to

00:48:22,280 --> 00:48:25,970
some work but there are new projects

00:48:23,900 --> 00:48:27,890
called there's a new project called vm

00:48:25,970 --> 00:48:30,590
prot which works at pi pi which is a

00:48:27,890 --> 00:48:32,060
much better much better profiler and the

00:48:30,590 --> 00:48:34,700
twisted in pi PI communities are pretty

00:48:32,060 --> 00:48:36,590
meshed so we're going to be looking into

00:48:34,700 --> 00:48:39,170
making that really easy to use but

00:48:36,590 --> 00:48:42,380
that's a bit after the fact as far as

00:48:39,170 --> 00:48:45,710
monitoring no there's no real easy way

00:48:42,380 --> 00:48:48,320
apart from you know passing it in rather

00:48:45,710 --> 00:48:50,900
than using a threadlocal and then what

00:48:48,320 --> 00:48:53,360
there might doing all of that because

00:48:50,900 --> 00:48:55,730
there's two things you want to know how

00:48:53,360 --> 00:48:57,950
long did this code take to run and how

00:48:55,730 --> 00:48:59,750
long did this request take to get back

00:48:57,950 --> 00:49:02,060
to the user and it really cares about

00:48:59,750 --> 00:49:04,040
what you care about because in Django

00:49:02,060 --> 00:49:06,350
they're one in the same but in twisted

00:49:04,040 --> 00:49:09,530
they're not because something that's

00:49:06,350 --> 00:49:11,450
waiting for a database for five seconds

00:49:09,530 --> 00:49:14,060
and then has to wait for another thing

00:49:11,450 --> 00:49:16,730
that's doing a lot of CPU will be longer

00:49:14,060 --> 00:49:17,960
so essentially you need to figure out

00:49:16,730 --> 00:49:19,850
what you want to monitor and that will

00:49:17,960 --> 00:49:21,410
change how you monitor it because if

00:49:19,850 --> 00:49:24,950
you're simply doing how long does the

00:49:21,410 --> 00:49:27,350
request take you just before the for the

00:49:24,950 --> 00:49:29,930
deferred you just go get the current

00:49:27,350 --> 00:49:33,560
time do the deferred or add a call back

00:49:29,930 --> 00:49:34,850
to the end and add a time of their and

00:49:33,560 --> 00:49:38,690
interest subtractor and you can get that

00:49:34,850 --> 00:49:41,120
and now tell you the wall clock time but

00:49:38,690 --> 00:49:43,610
as far as internal as far as running

00:49:41,120 --> 00:49:45,390
code I think the future will be vm prof

00:49:43,610 --> 00:49:46,890
we are you

00:49:45,390 --> 00:49:49,200
for our vendo and working on the

00:49:46,890 --> 00:49:51,630
crossbar ayo asynchronous WebSocket

00:49:49,200 --> 00:49:53,790
router and we're experimenting with that

00:49:51,630 --> 00:49:54,930
as well because we use twisted quite

00:49:53,790 --> 00:49:57,750
heavily on we're trying to figure out

00:49:54,930 --> 00:50:00,690
where on our CPU bottlenecks are so yeah

00:49:57,750 --> 00:50:04,140
we have to sort of keep on with that and

00:50:00,690 --> 00:50:06,360
solve that of a problem so in short no

00:50:04,140 --> 00:50:07,890
real solution yet that you can do you

00:50:06,360 --> 00:50:12,690
can fix it but there's nothing that you

00:50:07,890 --> 00:50:16,500
just sort of chuck on ok thank you I own

00:50:12,690 --> 00:50:19,790
else up a question ok then in that case

00:50:16,500 --> 00:50:19,790
thank you very much jam before that

00:50:25,290 --> 00:50:27,350

YouTube URL: https://www.youtube.com/watch?v=_HZR7_ZBkYY


