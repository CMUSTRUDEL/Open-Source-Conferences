Title: Pyramid: Lighter, faster, better web apps - Mr. Dylan Jay
Publication date: 2011-08-22
Playlist: PyCon Australia 2011
Description: 
	Introduction to the Pyramid, the new web framework taking the python world by storm. This tutorial will cover the basics of a hello world app and cover some of the advanced features of pyramid that give it it's power such as traversal.
Pyramid is part of the pylons project and is a successor to pylons and a continuation of the BFG framework. It's very simple to learn, runs fast yet has powerful concepts which help keep large web app creation a sane process..
Captions: 
	00:00:05,630 --> 00:00:12,050
about pyramid now pyramid was made by

00:00:08,960 --> 00:00:13,790
this guy this is unbelievably the first

00:00:12,050 --> 00:00:17,090
image that comes up which is when you go

00:00:13,790 --> 00:00:19,880
Crispin Connor we've got a pretty game

00:00:17,090 --> 00:00:22,039
scary it actually comes from a Flickr

00:00:19,880 --> 00:00:24,949
stream which is the beards of the

00:00:22,039 --> 00:00:26,720
bearded people of Python 2009 so looking

00:00:24,949 --> 00:00:29,390
around the audience I think we could we

00:00:26,720 --> 00:00:32,960
could do a fair Flickr stream of the

00:00:29,390 --> 00:00:34,370
same concept but what are really

00:00:32,960 --> 00:00:35,330
interesting things about pyramid you may

00:00:34,370 --> 00:00:38,000
not have heard of it how many people

00:00:35,330 --> 00:00:40,070
have heard about pyramid cool that's

00:00:38,000 --> 00:00:43,070
quite a few how many people you Django

00:00:40,070 --> 00:00:43,550
users here yeah roughly the same sort of

00:00:43,070 --> 00:00:46,730
people

00:00:43,550 --> 00:00:49,780
okay so pyramid is quite new but it's

00:00:46,730 --> 00:00:52,640
also not and it's not just from Chris

00:00:49,780 --> 00:00:55,760
mokona mcdonough it's coming from a

00:00:52,640 --> 00:00:58,430
lineage of different frameworks so I'm

00:00:55,760 --> 00:01:00,500
just going to go a little rough tour

00:00:58,430 --> 00:01:02,780
through web frameworks a little bit so

00:01:00,500 --> 00:01:04,670
in the Python world you've got the zouk

00:01:02,780 --> 00:01:09,650
which some unbelievably goes back to

00:01:04,670 --> 00:01:12,049
1996 famously invented on one particular

00:01:09,650 --> 00:01:15,439
plane trip by a guy called Jim Fulton

00:01:12,049 --> 00:01:16,820
anyway they attendant is up to then they

00:01:15,439 --> 00:01:18,590
reinvented the whole thing they went

00:01:16,820 --> 00:01:20,090
back to the drawing board they called it

00:01:18,590 --> 00:01:21,409
as oak tree which was a mistake and

00:01:20,090 --> 00:01:27,140
they've corrected that by calling it

00:01:21,409 --> 00:01:30,259
blue bream didn't it's still not used a

00:01:27,140 --> 00:01:31,400
lot but the what they did do is they

00:01:30,259 --> 00:01:33,950
invented a thing called there's a

00:01:31,400 --> 00:01:36,290
toolkit which takes some of the very

00:01:33,950 --> 00:01:37,700
basic concepts of the the component

00:01:36,290 --> 00:01:39,320
architecture and how things work and

00:01:37,700 --> 00:01:44,930
then a lot of other frameworks are using

00:01:39,320 --> 00:01:48,320
that like grog and pyramid so we also

00:01:44,930 --> 00:01:50,210
had this kind of Ruby on Rails coming in

00:01:48,320 --> 00:01:53,060
around 2004 similar timeframe and we

00:01:50,210 --> 00:01:54,950
have this kind of Cambrian explosion I

00:01:53,060 --> 00:01:57,200
guess where we've got all these

00:01:54,950 --> 00:01:59,630
different Python frameworks coming out

00:01:57,200 --> 00:02:02,119
like Django and pylons and turbo gears

00:01:59,630 --> 00:02:03,890
which possibly were influenced by Ruby

00:02:02,119 --> 00:02:05,659
on Rails or just influenced to go public

00:02:03,890 --> 00:02:07,310
and go up and source because of the

00:02:05,659 --> 00:02:09,649
popularity of Ruby on Rails so we have a

00:02:07,310 --> 00:02:14,360
lot of MVC lighter-weight frameworks

00:02:09,649 --> 00:02:16,170
coming out at the time so this is it GK

00:02:14,360 --> 00:02:17,970
was kind of split out

00:02:16,170 --> 00:02:22,760
then we have this thing called repose

00:02:17,970 --> 00:02:25,950
BFG so really post vsg they looked at

00:02:22,760 --> 00:02:27,599
you know Django pylons they looked at

00:02:25,950 --> 00:02:28,950
what was out there they looked at the

00:02:27,599 --> 00:02:31,020
zope stuff and they tried to get the

00:02:28,950 --> 00:02:32,819
best of everything and put it in there

00:02:31,020 --> 00:02:35,130
so it's actually building on a lot of

00:02:32,819 --> 00:02:38,130
different learnings of what a

00:02:35,130 --> 00:02:40,709
lightweight framework should be and BFG

00:02:38,130 --> 00:02:41,790
is it actually pyramid there's not a lot

00:02:40,709 --> 00:02:43,950
of difference between it it was a

00:02:41,790 --> 00:02:45,720
renaming so this is a really uncommon

00:02:43,950 --> 00:02:47,580
thing what they did is they got together

00:02:45,720 --> 00:02:50,730
with the pylons guide the pylons guys

00:02:47,580 --> 00:02:51,900
had kind of reached a brick wall and in

00:02:50,730 --> 00:02:55,170
their web framework and they said

00:02:51,900 --> 00:02:58,350
actually let's get together let's start

00:02:55,170 --> 00:03:00,150
using BFG let's call it pyramid and now

00:02:58,350 --> 00:03:01,650
pylons you have the thing called the

00:03:00,150 --> 00:03:04,080
pylons project where they're

00:03:01,650 --> 00:03:06,630
collaborating you've got pyramid turbo

00:03:04,080 --> 00:03:08,940
gears which was built on top of pylons

00:03:06,630 --> 00:03:12,569
well now in the future start to use

00:03:08,940 --> 00:03:14,130
pyramid so we're getting consolidation

00:03:12,569 --> 00:03:18,330
it's not as bad as it seems with all

00:03:14,130 --> 00:03:18,870
these new frameworks coming out so who

00:03:18,330 --> 00:03:21,450
uses it

00:03:18,870 --> 00:03:23,130
pyramid still new there's a thing called

00:03:21,450 --> 00:03:26,070
the Carl project they use BFG and

00:03:23,130 --> 00:03:27,630
pyramid which has quite a number of

00:03:26,070 --> 00:03:29,579
users this is a really interesting

00:03:27,630 --> 00:03:31,440
presentation actually that's worth

00:03:29,579 --> 00:03:33,450
having a look at and I thought there was

00:03:31,440 --> 00:03:37,739
it was quite interesting that one of the

00:03:33,450 --> 00:03:39,780
reasons they used pyramid was because it

00:03:37,739 --> 00:03:41,400
doesn't have the ORM it's a it's what

00:03:39,780 --> 00:03:44,609
they call a non opinionated framework

00:03:41,400 --> 00:03:46,620
and they wanted to have content

00:03:44,609 --> 00:03:48,450
management coming out of plone they they

00:03:46,620 --> 00:03:51,209
use the lightweight stuff using pyramid

00:03:48,450 --> 00:03:53,190
and the real advantage there is that

00:03:51,209 --> 00:03:55,350
they could use SQL alchemy for both have

00:03:53,190 --> 00:03:56,760
the same models and both nothing kind of

00:03:55,350 --> 00:04:00,560
got in the way the technology

00:03:56,760 --> 00:04:05,540
integration was for his pretty seamless

00:04:00,560 --> 00:04:09,030
I built the site once last year in MB FG

00:04:05,540 --> 00:04:11,340
there's an example of running pyramid or

00:04:09,030 --> 00:04:13,850
BFG on a App Engine this will actually

00:04:11,340 --> 00:04:16,229
let you send beer to anyone in the world

00:04:13,850 --> 00:04:18,239
didn't take off but if you want to send

00:04:16,229 --> 00:04:22,079
me a beer just go there you can sign up

00:04:18,239 --> 00:04:26,039
and you can send me a beer right now as

00:04:22,079 --> 00:04:27,000
you speak so we're building some things

00:04:26,039 --> 00:04:29,240
we're building something called plum

00:04:27,000 --> 00:04:35,670
factory which is a web installer

00:04:29,240 --> 00:04:36,660
at Preda web for plan so one of the

00:04:35,670 --> 00:04:41,190
things you probably know that i'm

00:04:36,660 --> 00:04:42,930
wondering is where does pyramid fit in

00:04:41,190 --> 00:04:44,850
the grand scheme of things so this is my

00:04:42,930 --> 00:04:48,630
interpretation of how you fit it all

00:04:44,850 --> 00:04:50,690
together you've got this kind of scale

00:04:48,630 --> 00:04:53,010
here which goes backwards and forwards

00:04:50,690 --> 00:04:57,060
between something that's very

00:04:53,010 --> 00:05:00,000
opinionated like plone or any even

00:04:57,060 --> 00:05:01,050
pretty much replace any CMS there you

00:05:00,000 --> 00:05:02,670
know you can put drupal or whatever

00:05:01,050 --> 00:05:04,740
you've got a lot of structure you've got

00:05:02,670 --> 00:05:06,540
how you do you know bits and pieces of

00:05:04,740 --> 00:05:08,520
page how authentication happens

00:05:06,540 --> 00:05:09,990
everything's done for you everything's

00:05:08,520 --> 00:05:11,670
out of the box you have a plug-in

00:05:09,990 --> 00:05:13,680
architecture you can plug in features

00:05:11,670 --> 00:05:16,020
straight away then down the other end

00:05:13,680 --> 00:05:17,370
you've got something like pyramid herman

00:05:16,020 --> 00:05:19,730
has there's nothing about the database

00:05:17,370 --> 00:05:22,830
lever it leaves it completely up to you

00:05:19,730 --> 00:05:24,660
it tries to not get in the way of any of

00:05:22,830 --> 00:05:26,190
you decisions pyramid has things like

00:05:24,660 --> 00:05:27,930
authentication but it doesn't in a

00:05:26,190 --> 00:05:30,240
really open way with an API that lets

00:05:27,930 --> 00:05:31,440
you plug everything in and then you've

00:05:30,240 --> 00:05:33,450
got something like Django in between

00:05:31,440 --> 00:05:38,220
which you know particularly things like

00:05:33,450 --> 00:05:41,130
pine ax gives you sort of a semi CMS

00:05:38,220 --> 00:05:42,480
makes some a lot of decisions easy for

00:05:41,130 --> 00:05:44,340
you because it's opinion that it says do

00:05:42,480 --> 00:05:45,930
it this way do it this way but then at

00:05:44,340 --> 00:05:47,160
the same time if you don't want to do it

00:05:45,930 --> 00:05:48,300
that way or there are reasons why you

00:05:47,160 --> 00:05:50,310
don't want to do it that way

00:05:48,300 --> 00:05:52,380
then someone has to do that integration

00:05:50,310 --> 00:05:54,570
or you've got to fight the framework a

00:05:52,380 --> 00:05:58,850
little bit so there's different users

00:05:54,570 --> 00:06:00,720
for all aspects of that spectrum really

00:05:58,850 --> 00:06:03,680
there's been a few things done on

00:06:00,720 --> 00:06:06,900
performance this particular one was

00:06:03,680 --> 00:06:10,770
where they're comparing a very simple

00:06:06,900 --> 00:06:13,790
app I think it's it uses a database call

00:06:10,770 --> 00:06:17,550
the same database call for each of them

00:06:13,790 --> 00:06:22,050
so nicely pyramid comes out at the most

00:06:17,550 --> 00:06:24,660
number of requests per second yet so

00:06:22,050 --> 00:06:26,070
interestingly how how bad rails 3 is and

00:06:24,660 --> 00:06:31,680
how much work they put into making it

00:06:26,070 --> 00:06:33,960
better here's another one this is a

00:06:31,680 --> 00:06:36,150
really interesting description of why

00:06:33,960 --> 00:06:38,310
pyramid is so fast so what they've done

00:06:36,150 --> 00:06:40,289
here is they actually is looking at the

00:06:38,310 --> 00:06:41,819
profiling output and seeing how many

00:06:40,289 --> 00:06:45,509
actually go through to do a typical

00:06:41,819 --> 00:06:48,360
request and you can see pyramid is about

00:06:45,509 --> 00:06:50,430
20 then you've got things like to have

00:06:48,360 --> 00:06:52,889
burgers too

00:06:50,430 --> 00:06:55,499
and so to which everyone complains about

00:06:52,889 --> 00:06:57,930
being a bit big and over willed Li and

00:06:55,499 --> 00:07:02,960
you can see that it is in fact big and

00:06:57,930 --> 00:07:05,610
over worldly so installion

00:07:02,960 --> 00:07:08,129
it's a it's a package you can use easy

00:07:05,610 --> 00:07:12,360
install you can use build out you can

00:07:08,129 --> 00:07:14,610
use it installs the package it's

00:07:12,360 --> 00:07:17,240
everyone should know how to do that so

00:07:14,610 --> 00:07:24,449
how is the most basic basic application

00:07:17,240 --> 00:07:28,139
gonna look so anyone who's django would

00:07:24,449 --> 00:07:30,809
be familiar with the idea of a view

00:07:28,139 --> 00:07:34,439
callable or a view function that returns

00:07:30,809 --> 00:07:36,499
a response so that's pretty much what we

00:07:34,439 --> 00:07:38,459
have there we're taking the requests in

00:07:36,499 --> 00:07:39,749
fact we don't need the context there

00:07:38,459 --> 00:07:45,360
I'll explain that later but you just

00:07:39,749 --> 00:07:46,919
need a request return hello world and we

00:07:45,360 --> 00:07:53,729
need a little bit of configuration to

00:07:46,919 --> 00:07:55,409
kind of wire that up so we we create we

00:07:53,729 --> 00:07:57,029
can put this in the same module if we

00:07:55,409 --> 00:07:59,279
want we can just say you know if you run

00:07:57,029 --> 00:08:01,559
it and you've got a main create this

00:07:59,279 --> 00:08:03,240
configurator then we add view

00:08:01,559 --> 00:08:06,839
definitions now there's actually three

00:08:03,240 --> 00:08:09,209
ways to do view and configuration stuff

00:08:06,839 --> 00:08:11,099
in impairment I'm just going to talk

00:08:09,209 --> 00:08:14,249
about one of them which is the the

00:08:11,099 --> 00:08:16,559
imperative declaration just to make

00:08:14,249 --> 00:08:17,459
things a little bit easier but rest

00:08:16,559 --> 00:08:20,279
assured we do have things like

00:08:17,459 --> 00:08:23,879
decorators in pyramid that are quite

00:08:20,279 --> 00:08:27,539
nice to look at so we add a view which

00:08:23,879 --> 00:08:29,149
is our hello world and just with no

00:08:27,539 --> 00:08:36,509
parameters it's just going to compute as

00:08:29,149 --> 00:08:39,000
slash hello world and pyramid is whiskey

00:08:36,509 --> 00:08:41,430
so that's nice you've got lots of

00:08:39,000 --> 00:08:43,289
different options for hosting deployment

00:08:41,430 --> 00:08:45,870
servers you can put on G unicorn you can

00:08:43,289 --> 00:08:49,110
just write with paster however you want

00:08:45,870 --> 00:08:51,150
to do it there's an app

00:08:49,110 --> 00:08:52,800
and in this case we're importing the

00:08:51,150 --> 00:08:54,690
server itself so we're just serving it

00:08:52,800 --> 00:08:57,180
straight from there so that is the

00:08:54,690 --> 00:09:02,280
simplest amount of code that to get a

00:08:57,180 --> 00:09:03,960
full web server running okay so most

00:09:02,280 --> 00:09:09,680
people were familiar with the idea of

00:09:03,960 --> 00:09:12,060
routing they call it a URL dispatch and

00:09:09,680 --> 00:09:13,940
it's a pretty familiar concept for

00:09:12,060 --> 00:09:17,240
anyone who's looked at rails or Django

00:09:13,940 --> 00:09:20,550
so here is the syntax for how you do it

00:09:17,240 --> 00:09:22,950
you've got this kind of 1/2 thing which

00:09:20,550 --> 00:09:24,480
become variables in a dictionary that's

00:09:22,950 --> 00:09:26,100
passed in to the requests that you can

00:09:24,480 --> 00:09:29,820
get it later

00:09:26,100 --> 00:09:31,710
it matches them so it's a two-step

00:09:29,820 --> 00:09:33,990
process you add the routes give it a

00:09:31,710 --> 00:09:37,710
name and the second part is you add the

00:09:33,990 --> 00:09:41,670
view and tell it which route to use to

00:09:37,710 --> 00:09:43,860
match that particular view we've got

00:09:41,670 --> 00:09:45,870
this idea of a kind of a wild card at

00:09:43,860 --> 00:09:49,410
the end which is all the rest of the

00:09:45,870 --> 00:09:51,630
path and then we've got this idea that

00:09:49,410 --> 00:09:53,430
well if we want to do a little bit more

00:09:51,630 --> 00:09:56,220
than just the default regular expression

00:09:53,430 --> 00:09:58,680
that colon syntax there at the end of

00:09:56,220 --> 00:10:01,470
the fizzell we can redefine what that is

00:09:58,680 --> 00:10:04,350
so any particular one of these variables

00:10:01,470 --> 00:10:07,730
in the route can have a regular

00:10:04,350 --> 00:10:10,530
expression so you can further define it

00:10:07,730 --> 00:10:14,390
it's got a lot of plugins for doing

00:10:10,530 --> 00:10:17,280
custom predicate so you can pretty much

00:10:14,390 --> 00:10:23,120
define how you want the matching to work

00:10:17,280 --> 00:10:26,010
using your own code so view kua levels

00:10:23,120 --> 00:10:32,900
the very simplest is a function that

00:10:26,010 --> 00:10:32,900
takes a request pretty easy we do have

00:10:34,780 --> 00:10:40,060
we do have class-based Horrible's as

00:10:37,420 --> 00:10:42,250
well so class-based squabbles if this

00:10:40,060 --> 00:10:45,070
happens to be how your code is better

00:10:42,250 --> 00:10:49,720
structured maybe you're doing your doing

00:10:45,070 --> 00:10:51,790
overriding subclasses and so on you can

00:10:49,720 --> 00:10:56,290
even do things like it doesn't have to

00:10:51,790 --> 00:10:58,600
be the call so the very simplest is you

00:10:56,290 --> 00:11:00,910
have an underscore call thing that's the

00:10:58,600 --> 00:11:02,620
one that so that the initialization will

00:11:00,910 --> 00:11:05,950
be set up with the request and then the

00:11:02,620 --> 00:11:07,690
second part will be called with the with

00:11:05,950 --> 00:11:09,940
the call method and that's the bit that

00:11:07,690 --> 00:11:12,760
should return a response in this case

00:11:09,940 --> 00:11:17,320
we're returning a response that does a

00:11:12,760 --> 00:11:19,000
redirection you can use other attributes

00:11:17,320 --> 00:11:23,280
you can you know have a single class

00:11:19,000 --> 00:11:28,780
that functions as many different views

00:11:23,280 --> 00:11:29,590
okay so the request requests are pretty

00:11:28,780 --> 00:11:31,450
boring

00:11:29,590 --> 00:11:34,710
mostly requests objects have the same

00:11:31,450 --> 00:11:37,930
kind of stuff so you've got as params

00:11:34,710 --> 00:11:39,040
thing that is what's called a multi

00:11:37,930 --> 00:11:43,570
dictionaries that will handle things

00:11:39,040 --> 00:11:45,280
like having the same parameter specified

00:11:43,570 --> 00:11:47,470
twice of the URL so you can get all of

00:11:45,280 --> 00:11:49,360
them or it just acts as a dictionary so

00:11:47,470 --> 00:11:52,050
most of the time you can just use it as

00:11:49,360 --> 00:11:53,830
a dictionary to grab things out

00:11:52,050 --> 00:11:55,300
obviously it's got a whole bunch of

00:11:53,830 --> 00:11:56,740
other stuff in there you know to grab

00:11:55,300 --> 00:11:59,830
various information about the headers

00:11:56,740 --> 00:12:01,540
and so on not that interesting

00:11:59,830 --> 00:12:04,480
render is renderers are quite

00:12:01,540 --> 00:12:06,089
interesting so you can see here that

00:12:04,480 --> 00:12:08,830
I've actually used the decorator syntax

00:12:06,089 --> 00:12:10,510
you can specify all of the view stuff in

00:12:08,830 --> 00:12:14,350
the decorator syntax it doesn't have to

00:12:10,510 --> 00:12:15,820
be using that config dot syntax but what

00:12:14,350 --> 00:12:19,600
we've done here is we've specified what

00:12:15,820 --> 00:12:21,880
the renderer is now with render is it's

00:12:19,600 --> 00:12:24,010
a it's a plug-in system that allows you

00:12:21,880 --> 00:12:27,310
to specify how you want your response to

00:12:24,010 --> 00:12:29,830
be created for you automatically so if

00:12:27,310 --> 00:12:31,330
we return by default if you return say a

00:12:29,830 --> 00:12:34,240
dictionary that dictionary will get

00:12:31,330 --> 00:12:36,310
passed into the render or a factory and

00:12:34,240 --> 00:12:39,700
at the end of the result of that a

00:12:36,310 --> 00:12:41,950
response will be returned so we've got a

00:12:39,700 --> 00:12:45,730
whole bunch of and pre-configured

00:12:41,950 --> 00:12:47,350
renders so Jason is one of them so if we

00:12:45,730 --> 00:12:50,530
just say render equals Jason

00:12:47,350 --> 00:12:56,080
then our dictionary will get turned into

00:12:50,530 --> 00:12:58,810
a JSON formatted response we've got a

00:12:56,080 --> 00:13:04,030
string so that we'll just do a standard

00:12:58,810 --> 00:13:05,980
Python stir return strings and then we

00:13:04,030 --> 00:13:11,260
can do renderers based on just

00:13:05,980 --> 00:13:15,300
specifying a name of the template so you

00:13:11,260 --> 00:13:18,400
can do ginger - there's Mac Oh

00:13:15,300 --> 00:13:20,530
Amaka and then there's the default

00:13:18,400 --> 00:13:22,510
built-in chameleon CBT which I'll talk

00:13:20,530 --> 00:13:26,680
about in a sec so you specify the name

00:13:22,510 --> 00:13:28,300
of the the template you pass a set of

00:13:26,680 --> 00:13:30,550
dictionary that dictionary becomes

00:13:28,300 --> 00:13:34,150
available in the scope of rendering the

00:13:30,550 --> 00:13:36,490
template and it's quite nice to work

00:13:34,150 --> 00:13:42,460
with you get a rented result with the

00:13:36,490 --> 00:13:43,960
template at the end so one of

00:13:42,460 --> 00:13:46,060
interesting things is that the the whole

00:13:43,960 --> 00:13:47,950
rendering system is again designed to be

00:13:46,060 --> 00:13:50,140
a pluggable so you can plug in your own

00:13:47,950 --> 00:13:54,160
renderers you can create different

00:13:50,140 --> 00:13:57,960
renderers for different purposes and the

00:13:54,160 --> 00:14:02,860
ginger - is actually an example of that

00:13:57,960 --> 00:14:04,570
so templates you can render the

00:14:02,860 --> 00:14:07,720
templates just manually you don't have

00:14:04,570 --> 00:14:09,370
to use the the the render order

00:14:07,720 --> 00:14:11,650
automatic configuration you can just

00:14:09,370 --> 00:14:18,130
call the render - response which does

00:14:11,650 --> 00:14:19,960
the same thing and you can BYO

00:14:18,130 --> 00:14:21,580
templating you don't need to even do the

00:14:19,960 --> 00:14:24,790
render - response using the rendering

00:14:21,580 --> 00:14:28,660
system you can just call template of

00:14:24,790 --> 00:14:30,310
whatever template system you've got as

00:14:28,660 --> 00:14:36,880
long as it returns a valid whiskey

00:14:30,310 --> 00:14:38,790
response we're good to go so by default

00:14:36,880 --> 00:14:43,420
it comes with something called chameleon

00:14:38,790 --> 00:14:44,620
which is zouk page templates a little

00:14:43,420 --> 00:14:47,280
bit different than some of the

00:14:44,620 --> 00:14:50,890
templating languages people are used to

00:14:47,280 --> 00:14:52,930
it is a attribute based templating

00:14:50,890 --> 00:14:56,050
language that means that in general most

00:14:52,930 --> 00:14:59,680
things happen inside attributes inside

00:14:56,050 --> 00:15:00,480
the HTML tags themselves so you can see

00:14:59,680 --> 00:15:04,199
that a little

00:15:00,480 --> 00:15:07,050
here down the bottom so we've got this

00:15:04,199 --> 00:15:08,550
tell repeat and what that's doing is

00:15:07,050 --> 00:15:11,610
saying you know make available a

00:15:08,550 --> 00:15:15,779
parameter which is Rho which is just

00:15:11,610 --> 00:15:17,070
iterating over the rows and then we've

00:15:15,779 --> 00:15:19,500
got this a little bit of syntax in here

00:15:17,070 --> 00:15:21,449
to actually do that so this is very

00:15:19,500 --> 00:15:24,510
simple you can't do complicated Python

00:15:21,449 --> 00:15:26,639
within the the dollar sign brackets most

00:15:24,510 --> 00:15:28,320
of the more complicated Python should be

00:15:26,639 --> 00:15:30,420
in your view of course it shouldn't be

00:15:28,320 --> 00:15:31,980
in the template but if you need it you

00:15:30,420 --> 00:15:34,230
can also do it within the tell

00:15:31,980 --> 00:15:35,820
statements so you can do things like

00:15:34,230 --> 00:15:38,010
defines and macros and stuff like that

00:15:35,820 --> 00:15:42,029
the nice thing about this is it is it

00:15:38,010 --> 00:15:45,810
it's valid XHTML you don't have to pull

00:15:42,029 --> 00:15:48,230
apart your template you can use I don't

00:15:45,810 --> 00:15:50,670
know whatever HTML editor if you want

00:15:48,230 --> 00:15:53,449
you can put things like dummy variables

00:15:50,670 --> 00:15:56,430
in and then replace them and say tell

00:15:53,449 --> 00:15:59,250
content should be this variable in an

00:15:56,430 --> 00:16:03,720
attribute now the cool thing about

00:15:59,250 --> 00:16:06,449
chameleon is it's incredibly fast they

00:16:03,720 --> 00:16:08,100
took the original templates they built

00:16:06,449 --> 00:16:11,579
something that actually compiles the

00:16:08,100 --> 00:16:13,589
templates down to Python so it will pre

00:16:11,579 --> 00:16:21,380
compile your templates and run them as

00:16:13,589 --> 00:16:23,940
pure Python runs really really fast on

00:16:21,380 --> 00:16:25,860
the project we work with the CMS they're

00:16:23,940 --> 00:16:28,889
looking and switching to chameleon it

00:16:25,860 --> 00:16:30,540
will double or at least improve

00:16:28,889 --> 00:16:38,790
performance of the whole system by about

00:16:30,540 --> 00:16:40,500
30% so instead I guess it's so if you

00:16:38,790 --> 00:16:42,630
want you know whole directory available

00:16:40,500 --> 00:16:46,110
under a certain subtree you can just

00:16:42,630 --> 00:16:47,430
specify it one of the things that's

00:16:46,110 --> 00:16:51,959
interesting is that they use this

00:16:47,430 --> 00:16:54,209
package syntax which is down here so you

00:16:51,959 --> 00:16:56,910
can have your static resources in

00:16:54,209 --> 00:17:01,649
packages under search spaces and it's

00:16:56,910 --> 00:17:02,940
using the setup tools package resources

00:17:01,649 --> 00:17:05,790
I suppose that's one thing I didn't talk

00:17:02,940 --> 00:17:08,549
about so much is that pyramid projects

00:17:05,790 --> 00:17:11,070
tend to be packaged they're not just

00:17:08,549 --> 00:17:14,040
sort of sub trees of Python files

00:17:11,070 --> 00:17:15,990
like I think you can have packages with

00:17:14,040 --> 00:17:19,160
Django but I'm not sure but generally

00:17:15,990 --> 00:17:22,980
Django itself has not run like that

00:17:19,160 --> 00:17:25,290
pretty much all of pyramid works with

00:17:22,980 --> 00:17:29,700
packages you do have to create a package

00:17:25,290 --> 00:17:31,140
to start with so you'll set up stuff

00:17:29,700 --> 00:17:33,120
like your CSS and everything will be

00:17:31,140 --> 00:17:35,640
under some package and you can just

00:17:33,120 --> 00:17:37,500
refer to that using that : syntax to

00:17:35,640 --> 00:17:44,730
refer to the package where the static

00:17:37,500 --> 00:17:46,260
resources are traversal this is where

00:17:44,730 --> 00:17:48,330
pyramid comes into its own a little bit

00:17:46,260 --> 00:17:51,770
traversal is a pattern a different kind

00:17:48,330 --> 00:17:53,670
of pattern of mapping URLs to views and

00:17:51,770 --> 00:17:55,380
it's good for certain sort of

00:17:53,670 --> 00:17:57,330
applications and it's less good for

00:17:55,380 --> 00:17:59,220
others it depends on what fits your mind

00:17:57,330 --> 00:18:03,600
in a lot of ways

00:17:59,220 --> 00:18:07,560
so to understand traversal traversal is

00:18:03,600 --> 00:18:10,320
like going back in a way to where you

00:18:07,560 --> 00:18:12,360
had folders on the file system and the

00:18:10,320 --> 00:18:13,980
URL kind of maps to those different

00:18:12,360 --> 00:18:16,080
folders and it would go through each of

00:18:13,980 --> 00:18:17,520
them look up the name find the different

00:18:16,080 --> 00:18:19,890
folder find the script to run and

00:18:17,520 --> 00:18:22,320
eventually run it so traversals and kind

00:18:19,890 --> 00:18:23,580
of a reimagining of that comes out of

00:18:22,320 --> 00:18:26,460
the zouk world where they do it using

00:18:23,580 --> 00:18:28,110
object databases pyramid takes different

00:18:26,460 --> 00:18:29,520
tack and says well we don't need an

00:18:28,110 --> 00:18:30,870
object database all we need is this

00:18:29,520 --> 00:18:35,790
concept that you have things within

00:18:30,870 --> 00:18:40,680
things and you can do that using the get

00:18:35,790 --> 00:18:41,940
attribute syntax so to understand a

00:18:40,680 --> 00:18:45,380
little bit more what you do is you

00:18:41,940 --> 00:18:49,470
define a view and you define the view as

00:18:45,380 --> 00:18:52,890
being linked or matched to certain

00:18:49,470 --> 00:18:55,770
parameters the traversal algorithm will

00:18:52,890 --> 00:18:57,900
look up in some kind of database or some

00:18:55,770 --> 00:19:00,300
kind of store where all these folders

00:18:57,900 --> 00:19:02,700
are kept eventually it gets to the

00:19:00,300 --> 00:19:05,640
second to last one here which is an

00:19:02,700 --> 00:19:07,440
object it will look up the class of that

00:19:05,640 --> 00:19:09,960
object or the interface of that object

00:19:07,440 --> 00:19:12,150
and it will try and look for different

00:19:09,960 --> 00:19:13,830
views that match that context we will

00:19:12,150 --> 00:19:16,500
also use the last bit as the name

00:19:13,830 --> 00:19:18,240
parameter and use that as a lookup so

00:19:16,500 --> 00:19:22,800
it's looking up on these two different

00:19:18,240 --> 00:19:25,330
axes the context and the name

00:19:22,800 --> 00:19:29,080
so it uses those two things to try and

00:19:25,330 --> 00:19:31,000
locate what is the view that we want and

00:19:29,080 --> 00:19:33,940
then it renders a template creates a

00:19:31,000 --> 00:19:35,650
response and actually it also look at

00:19:33,940 --> 00:19:37,360
the request itself which gives another

00:19:35,650 --> 00:19:41,200
another access so it's really three

00:19:37,360 --> 00:19:45,820
accesses it's looking at so why is this

00:19:41,200 --> 00:19:49,060
a good thing one of the things you

00:19:45,820 --> 00:19:50,440
notice is that it's transitive you can

00:19:49,060 --> 00:19:52,150
put as many different things there as

00:19:50,440 --> 00:19:53,770
you want you don't have to sort of have

00:19:52,150 --> 00:19:56,200
this sort of locked out you don't have

00:19:53,770 --> 00:19:59,170
to parse all the different slashes and

00:19:56,200 --> 00:20:01,840
do that lookup yourself it means that

00:19:59,170 --> 00:20:04,450
your structure of your code can be a lot

00:20:01,840 --> 00:20:06,010
cleaner because what you're doing is

00:20:04,450 --> 00:20:08,790
you're saying okay well we've got these

00:20:06,010 --> 00:20:12,880
Karl just we've got this I don't know

00:20:08,790 --> 00:20:14,740
what I say a talk a seminar object over

00:20:12,880 --> 00:20:16,420
here and seminar objects know how to

00:20:14,740 --> 00:20:18,460
show themselves they know how to edit

00:20:16,420 --> 00:20:20,710
themselves so I can create a specialized

00:20:18,460 --> 00:20:22,540
editor for seminar objects or I can

00:20:20,710 --> 00:20:24,450
create a specialized viewer for seminar

00:20:22,540 --> 00:20:31,000
objects and so on

00:20:24,450 --> 00:20:33,640
really good for CMS type applications so

00:20:31,000 --> 00:20:36,220
what is actually happening you have this

00:20:33,640 --> 00:20:37,870
concept of a root which is the base it

00:20:36,220 --> 00:20:41,770
starts looking up each one of these

00:20:37,870 --> 00:20:43,270
based on the URL it does ask it view

00:20:41,770 --> 00:20:44,710
which is kind of want to talk about

00:20:43,270 --> 00:20:49,090
where it takes the context and the name

00:20:44,710 --> 00:20:50,560
and finds a view callable it creates a

00:20:49,090 --> 00:20:52,360
request and then it calls the view

00:20:50,560 --> 00:20:54,640
callable with the request

00:20:52,360 --> 00:20:55,930
that's the pseudocode of what's going on

00:20:54,640 --> 00:20:59,530
there's a little bit more complicated a

00:20:55,930 --> 00:21:03,250
little bit under the under the hood uses

00:20:59,530 --> 00:21:04,900
some pretty cool stuff in the zouk

00:21:03,250 --> 00:21:07,440
component architecture written in C so

00:21:04,900 --> 00:21:09,910
it's really fast

00:21:07,440 --> 00:21:13,120
but that's that's the brief idea of

00:21:09,910 --> 00:21:14,860
what's going on so when I said it's

00:21:13,120 --> 00:21:16,480
three accesses it's actually a lot more

00:21:14,860 --> 00:21:19,630
in pyramid there's a lot of different

00:21:16,480 --> 00:21:21,730
ways you can slice and dice matching of

00:21:19,630 --> 00:21:24,070
these views to particular objects or to

00:21:21,730 --> 00:21:25,840
particular things that are going on so

00:21:24,070 --> 00:21:30,280
we can create these predicates when we

00:21:25,840 --> 00:21:32,890
define the views to say things like well

00:21:30,280 --> 00:21:35,140
what kind of request method is at a post

00:21:32,890 --> 00:21:37,870
is it a delete you know

00:21:35,140 --> 00:21:40,030
so really good for restful api s we can

00:21:37,870 --> 00:21:42,430
match things to containment so we can

00:21:40,030 --> 00:21:45,820
say well at some point in that path that

00:21:42,430 --> 00:21:49,270
we traversed is it inside is it you know

00:21:45,820 --> 00:21:51,670
a seminar object that's inside a PyCon

00:21:49,270 --> 00:21:55,180
container or is it a seminar that's

00:21:51,670 --> 00:21:59,470
inside a client container and have a

00:21:55,180 --> 00:22:03,430
different view specified at that time so

00:21:59,470 --> 00:22:06,760
we've got a nice decoupling there we can

00:22:03,430 --> 00:22:11,770
pretty much define predicates on almost

00:22:06,760 --> 00:22:16,900
anything you want okay so pyramid

00:22:11,770 --> 00:22:18,730
defines its own security system it's

00:22:16,900 --> 00:22:20,590
quite nice and clean and separates our

00:22:18,730 --> 00:22:23,230
authentication from authorization there

00:22:20,590 --> 00:22:26,680
you can have two pluggable policies that

00:22:23,230 --> 00:22:28,720
you install at the beginning one is how

00:22:26,680 --> 00:22:30,220
you extract authentication out of

00:22:28,720 --> 00:22:33,480
various requests and things like that

00:22:30,220 --> 00:22:36,610
and come up with the name of the person

00:22:33,480 --> 00:22:39,610
and then the second thing is how you use

00:22:36,610 --> 00:22:40,780
context and databases and so on to work

00:22:39,610 --> 00:22:43,060
out whether anyone is actually

00:22:40,780 --> 00:22:47,710
authorized to do the current thing that

00:22:43,060 --> 00:22:51,010
they're asking to do so let's say we

00:22:47,710 --> 00:22:52,900
have a view my view you've got this

00:22:51,010 --> 00:22:54,460
concept of just putting an extra

00:22:52,900 --> 00:22:56,080
parameter they're saying permission

00:22:54,460 --> 00:22:57,400
here's the permission that this that

00:22:56,080 --> 00:22:59,950
someone's going to need in order to

00:22:57,400 --> 00:23:01,690
access this what's cool about this is

00:22:59,950 --> 00:23:05,160
you can have a default permission so you

00:23:01,690 --> 00:23:08,020
can set you know everyone must have

00:23:05,160 --> 00:23:12,280
super high user management permission to

00:23:08,020 --> 00:23:14,380
see any URL in the entire system so it's

00:23:12,280 --> 00:23:16,090
a nice way of sort of securing your

00:23:14,380 --> 00:23:22,510
whole system in one go without having to

00:23:16,090 --> 00:23:25,060
write a whole bunch of security code so

00:23:22,510 --> 00:23:28,270
we have let's say we have this is a real

00:23:25,060 --> 00:23:31,150
bogus kind of example this is a you know

00:23:28,270 --> 00:23:34,180
it will use as a request and says if if

00:23:31,150 --> 00:23:36,940
our user ID who cares about the password

00:23:34,180 --> 00:23:38,920
if a user ID is Bob then they are a user

00:23:36,940 --> 00:23:40,360
of called Bob and they're in the group

00:23:38,920 --> 00:23:44,460
code editors else

00:23:40,360 --> 00:23:44,460
it's none no one else gets in

00:23:44,680 --> 00:23:50,380
so we what we do is we and this is you

00:23:49,000 --> 00:23:52,690
know from the beginning when we create a

00:23:50,380 --> 00:23:55,690
configuration object which you might

00:23:52,690 --> 00:23:57,880
remember from before so pyramid comes

00:23:55,690 --> 00:24:01,900
with its to default policies but again

00:23:57,880 --> 00:24:05,680
you can go implement your own ones we

00:24:01,900 --> 00:24:08,500
have an authorization one that uses

00:24:05,680 --> 00:24:10,240
cookies and pulls stuff out of a cookie

00:24:08,500 --> 00:24:13,500
so you could create a page that all it

00:24:10,240 --> 00:24:18,250
does is you know what's in the the user

00:24:13,500 --> 00:24:20,020
information to a cooking and it uses

00:24:18,250 --> 00:24:22,150
that callback there that we saw before

00:24:20,020 --> 00:24:26,260
in order to work out whether it's the

00:24:22,150 --> 00:24:28,540
right person so then we have our

00:24:26,260 --> 00:24:31,290
authorization policy and the default one

00:24:28,540 --> 00:24:34,990
that comes with pyramid is an ACL users

00:24:31,290 --> 00:24:37,000
policy that uses the context object to

00:24:34,990 --> 00:24:40,630
determine whether someone's allowed to

00:24:37,000 --> 00:24:42,160
see the current view so we gone add

00:24:40,630 --> 00:24:46,060
those two things into the configuration

00:24:42,160 --> 00:24:50,790
and the only the last thing to do is to

00:24:46,060 --> 00:24:52,870
hook up the ACLs so here's how it works

00:24:50,790 --> 00:24:54,220
let's say you have an object it could be

00:24:52,870 --> 00:24:56,770
coming from anywhere it could come out

00:24:54,220 --> 00:24:58,600
of you know SQL alchemy it could be in

00:24:56,770 --> 00:25:00,640
couch it could be something as long as

00:24:58,600 --> 00:25:02,680
you all meant that object at certain

00:25:00,640 --> 00:25:05,080
points to have the ACL so you're looking

00:25:02,680 --> 00:25:08,500
for an underscore underscore ACL object

00:25:05,080 --> 00:25:11,730
and then and that can be dynamic if you

00:25:08,500 --> 00:25:14,770
want essentially it's saying here are

00:25:11,730 --> 00:25:21,130
who's allowed to access this particular

00:25:14,770 --> 00:25:23,830
object if they have that particular what

00:25:21,130 --> 00:25:25,900
I call them principle if there are that

00:25:23,830 --> 00:25:33,910
particular principle they need this kind

00:25:25,900 --> 00:25:35,230
of permission and your ACL users policy

00:25:33,910 --> 00:25:36,540
will basically take care of everything

00:25:35,230 --> 00:25:38,830
from there

00:25:36,540 --> 00:25:41,260
the really nice thing is that all do it

00:25:38,830 --> 00:25:43,120
in a kind of a transitive way so let's

00:25:41,260 --> 00:25:44,320
say you know we're using that traversal

00:25:43,120 --> 00:25:46,390
mechanism when we talked about before

00:25:44,320 --> 00:25:48,550
and at some point higher in the

00:25:46,390 --> 00:25:51,670
hierarchy you have a folder that defines

00:25:48,550 --> 00:25:53,799
the ACLs when the authentication happens

00:25:51,670 --> 00:25:55,600
we've got this low-level

00:25:53,799 --> 00:25:57,789
you know method which is the edit method

00:25:55,600 --> 00:25:59,350
of of something if it doesn't find any

00:25:57,789 --> 00:26:00,580
in sales for the context at that

00:25:59,350 --> 00:26:02,860
particular point it's going to go back

00:26:00,580 --> 00:26:04,840
up the hierarchy and find the folder at

00:26:02,860 --> 00:26:07,929
which it does have some kind of ACLs and

00:26:04,840 --> 00:26:09,940
it's going to check against that so you

00:26:07,929 --> 00:26:14,080
can get this really nice hierarchical

00:26:09,940 --> 00:26:18,129
authentication system for free again

00:26:14,080 --> 00:26:19,899
very good for CMS type applications

00:26:18,129 --> 00:26:21,820
it's got scaffolding and stuff that

00:26:19,899 --> 00:26:23,700
comes with it and that you can you know

00:26:21,820 --> 00:26:29,109
develop whole projects that work with

00:26:23,700 --> 00:26:30,340
things like sqi alchemy and so on so it

00:26:29,109 --> 00:26:34,149
creates a project structure that looks

00:26:30,340 --> 00:26:37,659
like this so that's the kind of

00:26:34,149 --> 00:26:39,190
recommended project structure so it's

00:26:37,659 --> 00:26:42,070
using in any file which you can use with

00:26:39,190 --> 00:26:44,700
pasta to get going

00:26:42,070 --> 00:26:46,960
comes with testing stuff out of the box

00:26:44,700 --> 00:26:50,429
one things I didn't talk about is that

00:26:46,960 --> 00:26:52,809
Pyramid has a is 100% code coverage

00:26:50,429 --> 00:26:56,619
they're very proud of that

00:26:52,809 --> 00:27:01,809
I believe that's still true so they have

00:26:56,619 --> 00:27:03,580
a rule test driven culture so we've got

00:27:01,809 --> 00:27:06,309
a static directory which is defined for

00:27:03,580 --> 00:27:09,460
you with some basic stuff we have a

00:27:06,309 --> 00:27:13,029
template directory in there we have a

00:27:09,460 --> 00:27:14,889
views file now BFG used to have what was

00:27:13,029 --> 00:27:16,230
called a models file but it didn't

00:27:14,889 --> 00:27:18,609
really make a lot of sense because

00:27:16,230 --> 00:27:21,399
essentially there is no opinion about

00:27:18,609 --> 00:27:23,730
what models are so they're now calling

00:27:21,399 --> 00:27:25,989
them resources which is interesting

00:27:23,730 --> 00:27:28,179
anyway that sort of stuff goes in the

00:27:25,989 --> 00:27:29,649
resources file it could be just old

00:27:28,179 --> 00:27:32,049
menteng the objects that you're getting

00:27:29,649 --> 00:27:34,859
out of somewhere else like a sqlalchemy

00:27:32,049 --> 00:27:34,859
or something

00:27:38,900 --> 00:27:46,260
so yep so you can there are some

00:27:43,430 --> 00:27:49,800
predefined packages that will set you up

00:27:46,260 --> 00:27:52,080
everything with using routes and Eska

00:27:49,800 --> 00:27:55,230
alchemy using the zero DB which is an

00:27:52,080 --> 00:27:58,560
object database using traversal with

00:27:55,230 --> 00:28:03,870
Eska alchemy so you got a lot out of the

00:27:58,560 --> 00:28:05,460
box that you can start with customizing

00:28:03,870 --> 00:28:09,990
is one of those those really important

00:28:05,460 --> 00:28:12,480
things that makes pyramid quite powerful

00:28:09,990 --> 00:28:14,210
because all that view configuration is

00:28:12,480 --> 00:28:19,110
something that can be overridden later

00:28:14,210 --> 00:28:21,150
if we define say our views up here this

00:28:19,110 --> 00:28:23,820
is our original app up the top we've

00:28:21,150 --> 00:28:25,320
taken our config we've defined the

00:28:23,820 --> 00:28:27,060
various different views using all those

00:28:25,320 --> 00:28:29,910
different predicates and so on that we

00:28:27,060 --> 00:28:33,930
talked about for routes we can do things

00:28:29,910 --> 00:28:36,480
like override that particular view and

00:28:33,930 --> 00:28:38,970
change the the matching algorithm so

00:28:36,480 --> 00:28:41,730
that we can reuse other people's code

00:28:38,970 --> 00:28:45,300
and get in a deep level and basically

00:28:41,730 --> 00:28:47,340
change how which views are used or

00:28:45,300 --> 00:28:51,960
redefine them or put security on top of

00:28:47,340 --> 00:28:54,300
them it's very nice thing that you can

00:28:51,960 --> 00:28:56,910
you know you don't have to go and screw

00:28:54,300 --> 00:28:59,610
around with other people's code in order

00:28:56,910 --> 00:29:02,880
to use their app but be able to

00:28:59,610 --> 00:29:04,560
configure different parts of it the

00:29:02,880 --> 00:29:07,350
documentation goes into a little bit of

00:29:04,560 --> 00:29:09,330
how this contrasts with Django

00:29:07,350 --> 00:29:10,560
so Django has more a plug-in sort of

00:29:09,330 --> 00:29:14,610
thing where because you know about the

00:29:10,560 --> 00:29:16,380
model and you've got you know both apps

00:29:14,610 --> 00:29:20,340
can know about the data then you can do

00:29:16,380 --> 00:29:22,140
more reusing and stuff that doesn't

00:29:20,340 --> 00:29:25,020
happen so much but this configuration

00:29:22,140 --> 00:29:27,540
mechanism is very flexible with regard

00:29:25,020 --> 00:29:32,160
to overriding what other people have

00:29:27,540 --> 00:29:33,960
done this is a cool thing I'll be

00:29:32,160 --> 00:29:35,430
playing around this is a this is a pipe

00:29:33,960 --> 00:29:37,830
II package it's not part of the standard

00:29:35,430 --> 00:29:40,170
distribution but this is kind of showing

00:29:37,830 --> 00:29:44,460
you how flexible it is anyone know about

00:29:40,170 --> 00:29:46,640
socket IO here web sockets so it's it's

00:29:44,460 --> 00:29:50,750
a real time

00:29:46,640 --> 00:29:53,810
web so what it allows you to do is to be

00:29:50,750 --> 00:29:55,970
able to have live updates like a live

00:29:53,810 --> 00:29:58,430
chat application or you know live

00:29:55,970 --> 00:30:00,080
graphing things that are bi-directional

00:29:58,430 --> 00:30:02,420
sockets going backwards and forwards

00:30:00,080 --> 00:30:04,280
socket IO is an implementation that has

00:30:02,420 --> 00:30:06,740
several back off so it'll it'll use

00:30:04,280 --> 00:30:09,320
various HTTP methods and hides that off

00:30:06,740 --> 00:30:12,350
for you and that's pretty much all you

00:30:09,320 --> 00:30:15,770
need to do with pyramid socket IO in

00:30:12,350 --> 00:30:17,450
order to implement a small handler it

00:30:15,770 --> 00:30:20,780
uses something called G event which is a

00:30:17,450 --> 00:30:24,860
great asynchronous i/o library and

00:30:20,780 --> 00:30:31,100
incredibly fast so all we do is we

00:30:24,860 --> 00:30:33,110
define our handler here so when a

00:30:31,100 --> 00:30:35,660
connected message comes in we're going

00:30:33,110 --> 00:30:37,640
to send another message back that's

00:30:35,660 --> 00:30:39,260
pretty much that we've got a view

00:30:37,640 --> 00:30:44,150
callable here which takes the request

00:30:39,260 --> 00:30:50,840
and sets up this management for the

00:30:44,150 --> 00:30:53,570
ongoing communication and this seems to

00:30:50,840 --> 00:30:55,610
be alone oh I moved at the top so here's

00:30:53,570 --> 00:30:57,170
what we do is to hook up a route which

00:30:55,610 --> 00:30:59,090
says you know when something comes in

00:30:57,170 --> 00:31:00,470
under the stop at i/o we're going to

00:30:59,090 --> 00:31:01,870
take the remaining and that's going to

00:31:00,470 --> 00:31:08,090
hook up to this view down the bottom

00:31:01,870 --> 00:31:09,080
that's pretty much all you need to do so

00:31:08,090 --> 00:31:11,810
there's a whole bunch of stuff I didn't

00:31:09,080 --> 00:31:15,290
include in the talk so you know

00:31:11,810 --> 00:31:16,670
internationalisation sessions all the

00:31:15,290 --> 00:31:19,570
different hook points for changing the

00:31:16,670 --> 00:31:23,030
behavior at different points includes

00:31:19,570 --> 00:31:24,740
has a hole in event system within there

00:31:23,030 --> 00:31:26,750
so that you can subscribe to certain

00:31:24,740 --> 00:31:29,060
events or have your code talking to each

00:31:26,750 --> 00:31:31,670
other and in various sort of decoupled

00:31:29,060 --> 00:31:33,350
ways there's a lot in there but as you

00:31:31,670 --> 00:31:36,140
can see it's quite approachable quite

00:31:33,350 --> 00:31:36,710
easy to get started with and that's

00:31:36,140 --> 00:31:40,070
pretty much it

00:31:36,710 --> 00:31:42,250
so here's various links that if you want

00:31:40,070 --> 00:31:45,640
to find out more about pyramid

00:31:42,250 --> 00:31:45,640
any questions

00:31:46,630 --> 00:32:03,670
oh by the way we were hiring so I'm just

00:32:02,320 --> 00:32:06,640
wondering if you have any tips or

00:32:03,670 --> 00:32:08,350
comments for projects that are in pylons

00:32:06,640 --> 00:32:10,840
that would be looking to convert to

00:32:08,350 --> 00:32:13,450
pyramid so is there things to look out

00:32:10,840 --> 00:32:16,510
for or is it really straight forward are

00:32:13,450 --> 00:32:18,010
they good guides for how to do that

00:32:16,510 --> 00:32:20,110
that's it's not something I have that

00:32:18,010 --> 00:32:22,900
much experience with I have never really

00:32:20,110 --> 00:32:24,880
played with pylons at all I know that

00:32:22,900 --> 00:32:26,380
there are some some good documentation

00:32:24,880 --> 00:32:29,020
talking about that because it's

00:32:26,380 --> 00:32:31,450
obviously a you know something that

00:32:29,020 --> 00:32:34,300
people are pretty sensitive to about

00:32:31,450 --> 00:32:35,680
where it's going and everything I mean

00:32:34,300 --> 00:32:37,030
part of the reason for them joining

00:32:35,680 --> 00:32:39,640
together is that they had a lot in

00:32:37,030 --> 00:32:42,010
common and pyramid has changed from BFG

00:32:39,640 --> 00:32:44,410
to be more similar to pylons way of

00:32:42,010 --> 00:32:46,270
doing things what I do know is that

00:32:44,410 --> 00:32:49,180
there's this whole kind of controller

00:32:46,270 --> 00:32:51,580
concept in in pylons that isn't really

00:32:49,180 --> 00:32:53,950
impairment so you do have to change your

00:32:51,580 --> 00:32:55,810
way thinking a little bit about that but

00:32:53,950 --> 00:32:58,990
other than that the the documentation on

00:32:55,810 --> 00:33:00,400
pyramid is fantastic that's another

00:32:58,990 --> 00:33:02,470
thing they pride themselves on is having

00:33:00,400 --> 00:33:03,970
really really good documentation so

00:33:02,470 --> 00:33:05,920
going through and reading the tutorials

00:33:03,970 --> 00:33:08,320
and and getting an understanding of

00:33:05,920 --> 00:33:10,800
these concepts that I talked about you

00:33:08,320 --> 00:33:12,670
can just go to the the standard pyramid

00:33:10,800 --> 00:33:14,200
documentation have a read through that

00:33:12,670 --> 00:33:16,030
and I'm pretty sure there's a is an

00:33:14,200 --> 00:33:20,520
upgrade guide on what you do if you

00:33:16,030 --> 00:33:20,520
wanted to move from pylons to pyramid

00:33:22,890 --> 00:33:29,960
any other questions okay I've got one

00:33:27,630 --> 00:33:31,500
for you just feeling a bit of space here

00:33:29,960 --> 00:33:34,230
interesting that you actually mentioned

00:33:31,500 --> 00:33:36,150
the Cambrian explosion as sort of a

00:33:34,230 --> 00:33:37,860
metaphor you there was that Cambrian

00:33:36,150 --> 00:33:40,679
explosion of Python web frameworks in

00:33:37,860 --> 00:33:44,309
the 2004-2005 timeframe of which some

00:33:40,679 --> 00:33:45,480
survived some happened from a biological

00:33:44,309 --> 00:33:47,040
perspective the thing that's interesting

00:33:45,480 --> 00:33:48,660
about the Cambrian explosion is that

00:33:47,040 --> 00:33:51,270
most of the things that lived in the

00:33:48,660 --> 00:33:53,190
Babri an explosion died or merged into

00:33:51,270 --> 00:33:56,190
the single you know 12 body forms that

00:33:53,190 --> 00:33:58,470
we now see in the world around us is

00:33:56,190 --> 00:33:59,490
there a potential for that to happen in

00:33:58,470 --> 00:34:01,980
the Python world I mean there is there

00:33:59,490 --> 00:34:05,610
is a limit to which how many

00:34:01,980 --> 00:34:07,770
implementations of a HTTP request object

00:34:05,610 --> 00:34:10,590
does the Python world need in order to

00:34:07,770 --> 00:34:12,960
satisfy the world's web serving requests

00:34:10,590 --> 00:34:15,570
is there is there an integration point

00:34:12,960 --> 00:34:17,340
here between what's left of the of the

00:34:15,570 --> 00:34:18,869
Python web community at the moment the

00:34:17,340 --> 00:34:20,669
Django's and the pyramids and the pylons

00:34:18,869 --> 00:34:22,649
and the cypress and whatever to come

00:34:20,669 --> 00:34:23,730
together and actually agree well yeah

00:34:22,649 --> 00:34:25,320
okay this is how we're going to

00:34:23,730 --> 00:34:27,179
represent an object we've got whisky but

00:34:25,320 --> 00:34:29,040
there's there's three levels down the

00:34:27,179 --> 00:34:30,450
API chain where we could we could we

00:34:29,040 --> 00:34:34,139
could integrate and share share

00:34:30,450 --> 00:34:36,619
resources the specific stuff about in on

00:34:34,139 --> 00:34:39,119
sharing request objects and stuff is is

00:34:36,619 --> 00:34:41,280
as an interesting one I mean one of the

00:34:39,119 --> 00:34:43,440
things that fundamental difference

00:34:41,280 --> 00:34:45,840
between Said's Oak 2 and the blue bremen

00:34:43,440 --> 00:34:47,490
zope 3 as they went along and said we

00:34:45,840 --> 00:34:50,490
want to be able to share code with other

00:34:47,490 --> 00:34:52,080
projects we want to componentize the

00:34:50,490 --> 00:34:53,340
whole thing and then you've got things

00:34:52,080 --> 00:34:54,690
like there's a toolkit where you know

00:34:53,340 --> 00:34:56,820
all those stuff gets reused by other

00:34:54,690 --> 00:35:01,950
frameworks and this this has been a

00:34:56,820 --> 00:35:03,300
really good thing for was open for the

00:35:01,950 --> 00:35:05,720
community as a whole

00:35:03,300 --> 00:35:07,410
decompose decoupling things into

00:35:05,720 --> 00:35:08,760
different things I think that's

00:35:07,410 --> 00:35:10,320
something that Django is kind of looking

00:35:08,760 --> 00:35:12,030
at you know whether they should go down

00:35:10,320 --> 00:35:13,740
that route because it's a big kind of

00:35:12,030 --> 00:35:15,810
source tree at the moment and you can't

00:35:13,740 --> 00:35:18,290
take the round out of Django I believe

00:35:15,810 --> 00:35:21,030
and use it somewhere else

00:35:18,290 --> 00:35:22,440
so I think that there's a really good

00:35:21,030 --> 00:35:24,240
blog post about this about you know

00:35:22,440 --> 00:35:25,609
lessons Django could learn farms open

00:35:24,240 --> 00:35:29,010
and componentization

00:35:25,609 --> 00:35:32,010
that's that's worth it agreed I think

00:35:29,010 --> 00:35:34,230
that in terms of consolidating you're

00:35:32,010 --> 00:35:35,030
seeing that with pyramid you know

00:35:34,230 --> 00:35:36,980
working

00:35:35,030 --> 00:35:40,250
with a I mean it's pretty nice to see

00:35:36,980 --> 00:35:41,810
you know that open-source is full of a

00:35:40,250 --> 00:35:43,760
lot of egos traditionally so you have

00:35:41,810 --> 00:35:45,350
people going well just a minute your

00:35:43,760 --> 00:35:46,820
technology is better than mine let's

00:35:45,350 --> 00:35:49,450
start using yours and you're seeing that

00:35:46,820 --> 00:35:52,910
with pyramid which is kind of cool I

00:35:49,450 --> 00:35:54,680
think it's fantastic that Django is so

00:35:52,910 --> 00:35:58,510
popular that it's a good default choice

00:35:54,680 --> 00:36:00,770
for Python because that gets so much

00:35:58,510 --> 00:36:02,420
weight behind getting things done you

00:36:00,770 --> 00:36:04,670
know you've got IDE supporting you've

00:36:02,420 --> 00:36:05,990
got hosting provider supporting so

00:36:04,670 --> 00:36:09,140
you've got something in the Python world

00:36:05,990 --> 00:36:12,200
that is as as well supported as say

00:36:09,140 --> 00:36:13,790
rails but there's still innovation going

00:36:12,200 --> 00:36:15,410
on we've got bottle and flask and all

00:36:13,790 --> 00:36:18,680
these kind of lightweight frameworks

00:36:15,410 --> 00:36:21,740
coming out I would hope that pyramid is

00:36:18,680 --> 00:36:23,690
going to do well within that that kind

00:36:21,740 --> 00:36:26,150
of ecosystem of micro frameworks I think

00:36:23,690 --> 00:36:29,000
there's definitely a place for the micro

00:36:26,150 --> 00:36:31,040
framework kind of stuff versus the more

00:36:29,000 --> 00:36:33,830
opinionated frameworks like turbo gears

00:36:31,040 --> 00:36:35,210
and Django versus the CMS's I kind of

00:36:33,830 --> 00:36:36,770
hope to sort of show what the

00:36:35,210 --> 00:36:38,750
differences are and when you'd use one

00:36:36,770 --> 00:36:40,520
versus the other it's still not clear

00:36:38,750 --> 00:36:44,720
but I think that'll become clearer later

00:36:40,520 --> 00:36:46,160
as well so the micro framework we're

00:36:44,720 --> 00:36:47,600
kind of going through as a new country

00:36:46,160 --> 00:36:49,940
and explosion at the moment you know

00:36:47,600 --> 00:36:52,250
there's web p/y there's there's heaps of

00:36:49,940 --> 00:36:57,560
little micro frameworks everywhere

00:36:52,250 --> 00:37:02,330
so we'll see where that goes any more

00:36:57,560 --> 00:37:03,200
questions okay then Dylan thank you very

00:37:02,330 --> 00:37:06,520
much for your talk and I'd like to

00:37:03,200 --> 00:37:06,520
present you with this ceremonial

00:37:10,850 --> 00:37:14,270

YouTube URL: https://www.youtube.com/watch?v=DBV0MsRu72M


