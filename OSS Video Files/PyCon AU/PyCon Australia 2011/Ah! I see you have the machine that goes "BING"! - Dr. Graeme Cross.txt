Title: Ah! I see you have the machine that goes "BING"! - Dr. Graeme Cross
Publication date: 2011-08-22
Playlist: PyCon Australia 2011
Description: 
	Whirrr, buzz, squelch, click, smash, bing!

Python is so much more than a language for Web 2.0 and system administration: Python can also be used for interfacing into the real world.

Learn how to connect Python up to stepper motors, micro-fluidic pumps,  A/D sensors, switches, solenoids, vacuum/pressure valves and XYZ robots, with simple off-the-shelf control hardware.
Captions: 
	00:00:00,000 --> 00:00:07,140
Oh Ram tells me he's got lots of things

00:00:03,510 --> 00:00:09,210
to get through so we'll just let them

00:00:07,140 --> 00:00:13,160
get on with it and find about machines

00:00:09,210 --> 00:00:13,160
that go Bing it's giving a good welcome

00:00:32,989 --> 00:00:41,519
technology it's beyond me this talk i

00:00:39,239 --> 00:00:43,649
will upload later today it's some packed

00:00:41,519 --> 00:00:45,539
full of pictures which I've not bothered

00:00:43,649 --> 00:00:48,390
to scale down so it's about 18 19

00:00:45,539 --> 00:00:51,210
megabytes at the moment and I promised

00:00:48,390 --> 00:00:53,399
that I would not upload or download vast

00:00:51,210 --> 00:00:54,930
amounts of stuff from here so I will

00:00:53,399 --> 00:00:57,360
when I get back to the hotel i'll put it

00:00:54,930 --> 00:01:00,539
up on my bitbucket account there's about

00:00:57,360 --> 00:01:03,539
65-70 slides so we are going to go

00:01:00,539 --> 00:01:05,670
pretty quickly in the next 40 minutes I

00:01:03,539 --> 00:01:08,100
want to cover just a general overview of

00:01:05,670 --> 00:01:09,960
what real world control is and then

00:01:08,100 --> 00:01:11,970
let's talk about how Python can fit into

00:01:09,960 --> 00:01:14,940
that because most people don't associate

00:01:11,970 --> 00:01:16,289
Python with real world control talk

00:01:14,940 --> 00:01:17,789
about some of the gotchas that will

00:01:16,289 --> 00:01:19,670
happen along the way especially with

00:01:17,789 --> 00:01:21,539
everyone's favorite of concurrency and

00:01:19,670 --> 00:01:25,110
performance they're usually the two

00:01:21,539 --> 00:01:27,750
things that trip people up a wrap up

00:01:25,110 --> 00:01:30,000
with just a few bits of advice and tips

00:01:27,750 --> 00:01:32,190
and tricks and traps that have caught me

00:01:30,000 --> 00:01:35,340
over the years and then talk about where

00:01:32,190 --> 00:01:38,219
this could go in the future so buckle up

00:01:35,340 --> 00:01:39,450
and let's go for the ride what is real

00:01:38,219 --> 00:01:42,090
world control if you're not familiar

00:01:39,450 --> 00:01:44,880
with terms like embedded system and real

00:01:42,090 --> 00:01:47,009
real time programming in that basically

00:01:44,880 --> 00:01:49,859
an embedded system is a single purpose

00:01:47,009 --> 00:01:52,320
computer it could be a mobile phone it

00:01:49,859 --> 00:01:55,109
could be the smart little microprocessor

00:01:52,320 --> 00:01:56,759
in the back of your microwave oven it

00:01:55,109 --> 00:01:59,509
could be the peacemaker that you've got

00:01:56,759 --> 00:02:02,280
chicken away in your heart at the moment

00:01:59,509 --> 00:02:03,750
it usually has real time constraints

00:02:02,280 --> 00:02:05,310
especially if it's a place maybe you

00:02:03,750 --> 00:02:07,829
want that thing to just work really

00:02:05,310 --> 00:02:10,799
reliably and that's where real time

00:02:07,829 --> 00:02:13,140
systems tie in because the events have

00:02:10,799 --> 00:02:15,600
to occur within specific time

00:02:13,140 --> 00:02:19,590
constraints it may have to happen

00:02:15,600 --> 00:02:21,959
precisely every n number of microseconds

00:02:19,590 --> 00:02:23,370
it may have a window within as long as

00:02:21,959 --> 00:02:25,829
it happens within that window you're

00:02:23,370 --> 00:02:28,049
okay but it can't exceed that window or

00:02:25,829 --> 00:02:29,790
can't go under that window and I'm

00:02:28,049 --> 00:02:32,430
failure to do so can be catastrophic

00:02:29,790 --> 00:02:34,350
your place maker for example the

00:02:32,430 --> 00:02:37,980
shutdown sequence for a nuclear power

00:02:34,350 --> 00:02:41,070
plant and it's actually incredibly

00:02:37,980 --> 00:02:43,290
difficult to program complex real time

00:02:41,070 --> 00:02:45,680
systems correctly and guarantee that

00:02:43,290 --> 00:02:48,360
they will work

00:02:45,680 --> 00:02:51,030
you know if you're designing a nuclear

00:02:48,360 --> 00:02:53,250
missile for example or a rocket so take

00:02:51,030 --> 00:02:55,440
people into space you don't have a lot

00:02:53,250 --> 00:02:59,340
of chances to get it right before it

00:02:55,440 --> 00:03:01,500
actually takes off and there's a whole

00:02:59,340 --> 00:03:02,910
range of different tricks that can catch

00:03:01,500 --> 00:03:06,600
you here and we'll cover some of those

00:03:02,910 --> 00:03:08,310
along the way so examples if you've been

00:03:06,600 --> 00:03:11,340
in an aeroplane recently it's all

00:03:08,310 --> 00:03:12,900
fly-by-wire the days of old hydraulic

00:03:11,340 --> 00:03:16,380
systems are gone it's all controlled

00:03:12,900 --> 00:03:19,830
with digital signals factories car

00:03:16,380 --> 00:03:22,860
engines the DSPs digital signal

00:03:19,830 --> 00:03:26,280
processing is all real time I mentioned

00:03:22,860 --> 00:03:27,959
pacemakers a whole range of robotics bio

00:03:26,280 --> 00:03:31,800
medical instruments which is the area I

00:03:27,959 --> 00:03:33,720
specialize in the machines that when you

00:03:31,800 --> 00:03:35,400
give a blood sample you take it away

00:03:33,720 --> 00:03:37,200
disappear somewhere it goes into a

00:03:35,400 --> 00:03:39,810
machine that process is hundreds of

00:03:37,200 --> 00:03:42,750
those samples every hour do you have HIV

00:03:39,810 --> 00:03:45,300
hepatitis are you pregnant are you

00:03:42,750 --> 00:03:48,630
showing markers of hyperthyroidism all

00:03:45,300 --> 00:03:50,070
those sorts of sickness markers or

00:03:48,630 --> 00:03:52,380
disease markers that you want to know

00:03:50,070 --> 00:03:55,470
that and then simple things like

00:03:52,380 --> 00:03:57,540
networking products have a look at the

00:03:55,470 --> 00:04:00,000
technology that goes into your standard

00:03:57,540 --> 00:04:01,920
cisco router these days and the

00:04:00,000 --> 00:04:04,260
performance requirements for that it's

00:04:01,920 --> 00:04:07,260
pretty impressive and home automation

00:04:04,260 --> 00:04:09,209
which you can buy systems or you can

00:04:07,260 --> 00:04:12,810
roll your own will touch on that along

00:04:09,209 --> 00:04:14,610
the way so we're going to cover how

00:04:12,810 --> 00:04:17,160
Python overlaps with real programming

00:04:14,610 --> 00:04:20,640
help Python overlaps with hardware and

00:04:17,160 --> 00:04:22,790
talk about the sweet spot in between the

00:04:20,640 --> 00:04:24,960
basics of measurement in control

00:04:22,790 --> 00:04:27,180
measurement can be digital on/off

00:04:24,960 --> 00:04:29,510
boolean or analog where it's actually

00:04:27,180 --> 00:04:32,100
real world values voltages and that

00:04:29,510 --> 00:04:33,630
control is similar are you switching

00:04:32,100 --> 00:04:35,880
something on or off are you actually

00:04:33,630 --> 00:04:39,000
putting out a frequency or a voltage

00:04:35,880 --> 00:04:40,710
that that's the basics of it so most of

00:04:39,000 --> 00:04:42,930
these things would be familiar to you

00:04:40,710 --> 00:04:45,750
sensors that can measure frequency can

00:04:42,930 --> 00:04:47,880
measure a gas concentration like how

00:04:45,750 --> 00:04:50,160
much alcohol is in the air that you're

00:04:47,880 --> 00:04:54,810
breathing out for the officer our light

00:04:50,160 --> 00:04:57,120
temperature humidity and the like this

00:04:54,810 --> 00:04:57,780
things like come there that GPS chip the

00:04:57,120 --> 00:04:59,910
infinium

00:04:57,780 --> 00:05:03,240
GPS chip which is just tiny is a couple

00:04:59,910 --> 00:05:05,760
of millimeters high and wide barcode

00:05:03,240 --> 00:05:09,270
readers RFID tags that are used to track

00:05:05,760 --> 00:05:11,550
where you're going and lots of outputs

00:05:09,270 --> 00:05:13,080
which should be familiar with LCDs like

00:05:11,550 --> 00:05:15,660
most of you are sitting in front of at

00:05:13,080 --> 00:05:17,690
the moment is your tap away LEDs oksha

00:05:15,660 --> 00:05:21,060
Sonic's which are both input and output

00:05:17,690 --> 00:05:22,440
buzzers and the like and then it starts

00:05:21,060 --> 00:05:24,570
to get a bit more fun with things like

00:05:22,440 --> 00:05:27,120
relays and solenoids and the various

00:05:24,570 --> 00:05:28,919
types of notice that you can assemble up

00:05:27,120 --> 00:05:32,790
into building blocks to actually move

00:05:28,919 --> 00:05:35,190
things around and this is just a step

00:05:32,790 --> 00:05:37,770
off one of the robots at work it's got a

00:05:35,190 --> 00:05:39,780
belt a drive belt that it's hooked to

00:05:37,770 --> 00:05:42,090
and what that means is you can keep the

00:05:39,780 --> 00:05:44,040
stepper motor in one position and have

00:05:42,090 --> 00:05:46,020
that belt driving and axis somewhere

00:05:44,040 --> 00:05:48,330
else that allows it to whizz up and down

00:05:46,020 --> 00:05:49,950
in a particular axis you put enough of

00:05:48,330 --> 00:05:52,830
those together and you start to get X

00:05:49,950 --> 00:05:55,200
movement y axis movement z axis movement

00:05:52,830 --> 00:06:01,290
and you can start to do some very nifty

00:05:55,200 --> 00:06:03,270
things in 3d space and so on that's just

00:06:01,290 --> 00:06:06,630
a typical skaara robot there pick in

00:06:03,270 --> 00:06:08,910
place so they're used for things like in

00:06:06,630 --> 00:06:11,100
factories Bolton arc welder on the end

00:06:08,910 --> 00:06:13,110
as you do and then you can automate the

00:06:11,100 --> 00:06:16,500
arc welding of cars and other large bits

00:06:13,110 --> 00:06:18,330
of metal as a bank of pumps a bank of

00:06:16,500 --> 00:06:20,370
syringe pumps each of those has a

00:06:18,330 --> 00:06:22,500
stepper motor or some other similar sort

00:06:20,370 --> 00:06:25,800
of motor behind it that allows you to

00:06:22,500 --> 00:06:31,620
drive out very precise microfluidic

00:06:25,800 --> 00:06:34,800
volumes of fluid and an XYZ robot the

00:06:31,620 --> 00:06:36,780
two probes allow you to put connections

00:06:34,800 --> 00:06:39,660
into pumps and so you can whizz around

00:06:36,780 --> 00:06:42,720
and suck and squirt very very small

00:06:39,660 --> 00:06:45,240
amounts of fluid and the ability to do

00:06:42,720 --> 00:06:47,460
that very quickly is the backbone of

00:06:45,240 --> 00:06:49,950
combinatorial chemistry a lot of

00:06:47,460 --> 00:06:53,370
genomics these days being able to just

00:06:49,950 --> 00:06:54,990
program vast numbers of small wells to

00:06:53,370 --> 00:06:59,760
be mixed around in all sorts of

00:06:54,990 --> 00:07:02,100
combinations and we're talking for say a

00:06:59,760 --> 00:07:04,320
meter axis you can travel lash in a

00:07:02,100 --> 00:07:09,780
second very precisely so it's quite

00:07:04,320 --> 00:07:11,650
impressive in terms of comms name and

00:07:09,780 --> 00:07:13,660
acronym it's bound to be there

00:07:11,650 --> 00:07:16,180
to all the typical usual suspects like

00:07:13,660 --> 00:07:18,340
cereal and USB but there's also a lot of

00:07:16,180 --> 00:07:21,639
other dedicated ones that are really

00:07:18,340 --> 00:07:24,039
designed for real world control things

00:07:21,639 --> 00:07:26,889
like can if you drive a high-end

00:07:24,039 --> 00:07:29,949
European car it's probably wired with

00:07:26,889 --> 00:07:32,009
just a couple of canvas wires that run

00:07:29,949 --> 00:07:35,910
around it as a distributed network and

00:07:32,009 --> 00:07:45,610
then wireless protocols like well 802 11

00:07:35,910 --> 00:07:46,930
ABG in zigbee bluetooth etc ha right so

00:07:45,610 --> 00:07:49,000
I've just covered a few years of

00:07:46,930 --> 00:07:51,130
electronics for you now let's talk about

00:07:49,000 --> 00:07:55,690
how Python interacts with real world

00:07:51,130 --> 00:07:59,380
control in the old days back when I was

00:07:55,690 --> 00:08:01,539
a young boy computers were a expensive

00:07:59,380 --> 00:08:04,120
fast computers were incredibly expensive

00:08:01,539 --> 00:08:06,580
and if you wanted a fast computer it

00:08:04,120 --> 00:08:08,470
wasn't going to be small Ram was

00:08:06,580 --> 00:08:11,650
incredibly expensive I remember saving

00:08:08,470 --> 00:08:15,550
up for something like a 16 k expansion

00:08:11,650 --> 00:08:19,210
module for my first computer and it cost

00:08:15,550 --> 00:08:21,160
me an arm and a leg what that meant for

00:08:19,210 --> 00:08:23,650
anything that was embedded was that you

00:08:21,160 --> 00:08:26,530
were if you wanted to commercialize a

00:08:23,650 --> 00:08:28,810
product have its small and that you were

00:08:26,530 --> 00:08:30,520
talking highly optimized clothing and as

00:08:28,810 --> 00:08:33,159
close to the metal as you could possibly

00:08:30,520 --> 00:08:35,229
get so that you could get every single

00:08:33,159 --> 00:08:38,349
bit of performance out of that

00:08:35,229 --> 00:08:40,240
microprocessor you never ever found

00:08:38,349 --> 00:08:42,760
scripting languages involved certainly

00:08:40,240 --> 00:08:46,209
not for a very real time programming

00:08:42,760 --> 00:08:49,360
work and then our friend more came along

00:08:46,209 --> 00:08:50,440
and he saved the day well perhaps he

00:08:49,360 --> 00:08:52,120
didn't say the day perhaps he just

00:08:50,440 --> 00:08:55,540
observed that the day was being saved

00:08:52,120 --> 00:08:57,790
but if you look back at 1971 transistors

00:08:55,540 --> 00:09:00,940
were around the two thousand mark in an

00:08:57,790 --> 00:09:02,790
IC integrated circuit if we run up to

00:09:00,940 --> 00:09:08,920
today and you look at things like your

00:09:02,790 --> 00:09:12,100
quad cores yeah eight core ten core cpus

00:09:08,920 --> 00:09:15,760
we're talking 27 hundred million

00:09:12,100 --> 00:09:18,220
transistors and that sort of curve that

00:09:15,760 --> 00:09:20,440
exponential growth has allowed us to

00:09:18,220 --> 00:09:22,720
start moving away from the middle and

00:09:20,440 --> 00:09:24,270
not having to be so incredibly optimized

00:09:22,720 --> 00:09:29,370
to get good performance

00:09:24,270 --> 00:09:31,050
embedded work so the benefits of pipe

00:09:29,370 --> 00:09:33,990
and a lot of this I don't need to rehash

00:09:31,050 --> 00:09:36,510
but from an embedded perspective it's

00:09:33,990 --> 00:09:38,070
really nice for rapid prototyping while

00:09:36,510 --> 00:09:40,380
electronics engineers Mechanical

00:09:38,070 --> 00:09:43,890
Engineers are developing the hardware

00:09:40,380 --> 00:09:45,720
you can bring in Python on top of it and

00:09:43,890 --> 00:09:47,670
be very rapidly prototyping and

00:09:45,720 --> 00:09:49,770
experimenting without having to go

00:09:47,670 --> 00:09:53,670
through the usual compiled download

00:09:49,770 --> 00:09:56,040
debug compile download debug cycles lots

00:09:53,670 --> 00:09:57,510
of libraries really easy to teach to

00:09:56,040 --> 00:09:59,610
scientists and engineers and Ed's

00:09:57,510 --> 00:10:03,300
touched on that in another session today

00:09:59,610 --> 00:10:07,410
I'm not going to labor the point the

00:10:03,300 --> 00:10:09,330
drawbacks yes there are drawbacks it's

00:10:07,410 --> 00:10:13,500
slower than assembler it's typically

00:10:09,330 --> 00:10:15,210
slower than C and C++ slower to possibly

00:10:13,500 --> 00:10:19,170
perform but not slower to write and

00:10:15,210 --> 00:10:21,150
actually get to a working prototype it's

00:10:19,170 --> 00:10:23,120
often not suited to hard real-time

00:10:21,150 --> 00:10:25,680
certainly not when you're down into the

00:10:23,120 --> 00:10:27,840
microseconds the nanoseconds the femto

00:10:25,680 --> 00:10:30,000
seconds are there's lots of layers

00:10:27,840 --> 00:10:33,630
between the actual electronics and the

00:10:30,000 --> 00:10:35,670
Python interpreter the limit of static

00:10:33,630 --> 00:10:37,230
analysis tools means that you sometimes

00:10:35,670 --> 00:10:39,350
don't get the level of checking that you

00:10:37,230 --> 00:10:42,060
want before you ship your pacemaker out

00:10:39,350 --> 00:10:43,500
and the garbage collection can get in

00:10:42,060 --> 00:10:45,660
the way as it does with any garbage

00:10:43,500 --> 00:10:47,340
collected system you you can't guarantee

00:10:45,660 --> 00:10:50,520
that the system is going to perform

00:10:47,340 --> 00:10:53,130
really uniformly on a discrete time

00:10:50,520 --> 00:10:56,340
basis there are ways around that but

00:10:53,130 --> 00:10:58,380
won't touch on that now typically it's

00:10:56,340 --> 00:10:59,970
not optimized for embedded targets but

00:10:58,380 --> 00:11:02,130
people have done some work there's

00:10:59,970 --> 00:11:05,760
what's called primates or Python on a

00:11:02,130 --> 00:11:08,340
chip which is targeted at things like

00:11:05,760 --> 00:11:10,830
embed boards and Arduino boards this

00:11:08,340 --> 00:11:13,890
sort of size so running in kilobytes of

00:11:10,830 --> 00:11:15,600
RAM it's pretty impressive and the other

00:11:13,890 --> 00:11:17,520
drawback if python is if you want to

00:11:15,600 --> 00:11:20,160
write code for doing work in

00:11:17,520 --> 00:11:21,390
laboratories and that at the moment you

00:11:20,160 --> 00:11:22,950
having to roll it yourself there's

00:11:21,390 --> 00:11:26,340
nothing like LabVIEW out there for

00:11:22,950 --> 00:11:27,870
Python but it's not all bad news that's

00:11:26,340 --> 00:11:29,310
what these sessions about it's actually

00:11:27,870 --> 00:11:32,070
talking about what we can do to

00:11:29,310 --> 00:11:33,510
understand the problem what we can do to

00:11:32,070 --> 00:11:35,160
understand how to work around some of

00:11:33,510 --> 00:11:35,930
the constraints work with the hardware

00:11:35,160 --> 00:11:38,089
rather than

00:11:35,930 --> 00:11:42,560
against it and I'm some of the

00:11:38,089 --> 00:11:46,130
opportunities the two main ways of using

00:11:42,560 --> 00:11:48,350
Python in the real world is I'm one just

00:11:46,130 --> 00:11:51,020
run it on your stock standard PC as you

00:11:48,350 --> 00:11:53,300
would normally but push all of the

00:11:51,020 --> 00:11:55,339
real-time control down into dedicated

00:11:53,300 --> 00:11:57,770
hardware that sits in some form of

00:11:55,339 --> 00:12:00,380
interface board there's a really wide

00:11:57,770 --> 00:12:01,790
range of small cheap powerful boards out

00:12:00,380 --> 00:12:06,410
there and I'm about to show you some of

00:12:01,790 --> 00:12:08,060
them and that gives you a lot of

00:12:06,410 --> 00:12:10,490
flexibility because PI think until all

00:12:08,060 --> 00:12:12,320
of the nice soft to work while it knows

00:12:10,490 --> 00:12:14,390
that the small boards with micro

00:12:12,320 --> 00:12:17,240
processors that are really well designed

00:12:14,390 --> 00:12:18,890
for real-time work can be off doing that

00:12:17,240 --> 00:12:22,730
part of it separation of

00:12:18,890 --> 00:12:24,410
responsibilities good design if you do

00:12:22,730 --> 00:12:27,170
want to run Python on the control board

00:12:24,410 --> 00:12:30,920
as I said things are better faster

00:12:27,170 --> 00:12:32,270
cheaper and there are boards like arm

00:12:30,920 --> 00:12:34,370
boards and that which are really nice

00:12:32,270 --> 00:12:38,959
and small and that gives you a lot of

00:12:34,370 --> 00:12:40,880
flexibility as well so I think I've

00:12:38,959 --> 00:12:42,680
already rehashed this slide I'm push it

00:12:40,880 --> 00:12:46,730
down to Hardware where you can if you

00:12:42,680 --> 00:12:49,400
have to c c++ modules and use the python

00:12:46,730 --> 00:12:51,920
for defining everything up top typically

00:12:49,400 --> 00:12:53,600
the things like how your systems going

00:12:51,920 --> 00:12:55,940
to behave that is going to be changing

00:12:53,600 --> 00:12:58,190
as the scientists or engineers work with

00:12:55,940 --> 00:13:00,170
it not the really low level how do i

00:12:58,190 --> 00:13:02,570
turn a valve on or off that's usually

00:13:00,170 --> 00:13:03,650
pretty straightforward and then all the

00:13:02,570 --> 00:13:05,420
other things that you don't to be

00:13:03,650 --> 00:13:11,000
writing an assembler or see data

00:13:05,420 --> 00:13:15,620
management networking user interfaces so

00:13:11,000 --> 00:13:17,240
I'm a few examples and let's see there's

00:13:15,620 --> 00:13:20,600
going to be some live demos and there is

00:13:17,240 --> 00:13:23,050
going to be tragedy I'm sure Bruce Lee

00:13:20,600 --> 00:13:23,050
Haeri go

00:13:27,190 --> 00:13:33,360
so I'm first off this is a lab jack it's

00:13:30,790 --> 00:13:37,060
a block of plastic with screw terminals

00:13:33,360 --> 00:13:39,910
and hopefully you get a feel for this or

00:13:37,060 --> 00:13:43,060
the size and that you can see well

00:13:39,910 --> 00:13:46,660
that's reversed you get the idea these

00:13:43,060 --> 00:13:50,290
are sensational for just hooking up real

00:13:46,660 --> 00:13:52,780
world electronics where you just want a

00:13:50,290 --> 00:13:54,460
simple robust interface there are Python

00:13:52,780 --> 00:13:56,890
libraries for it there are libraries for

00:13:54,460 --> 00:14:00,010
a range of other languages and the thing

00:13:56,890 --> 00:14:02,980
just works I've used this for a car

00:14:00,010 --> 00:14:06,340
engine management system where it was

00:14:02,980 --> 00:14:08,920
out in the the filth the dirt the rain

00:14:06,340 --> 00:14:12,670
everything and the thing just works it's

00:14:08,920 --> 00:14:14,680
very nice there are also boards like

00:14:12,670 --> 00:14:16,210
your Arduino boards if you're a hobbyist

00:14:14,680 --> 00:14:20,590
at all you've probably heard of these

00:14:16,210 --> 00:14:22,900
I'll talk about there we go that again

00:14:20,590 --> 00:14:28,330
in a few minutes but there's a range of

00:14:22,900 --> 00:14:30,550
boards like that out there for motor

00:14:28,330 --> 00:14:32,200
control which is one of the really

00:14:30,550 --> 00:14:33,970
difficult things to try and do in real

00:14:32,200 --> 00:14:35,290
time in Python there's a number of

00:14:33,970 --> 00:14:37,000
really nice boards you can just push

00:14:35,290 --> 00:14:40,510
that down and say your responsibilities

00:14:37,000 --> 00:14:43,030
just go do it and if you go browsing any

00:14:40,510 --> 00:14:45,160
of the typical vendors sparkfun for

00:14:43,030 --> 00:14:46,540
example in the States digi-key which is

00:14:45,160 --> 00:14:48,790
a massive electronics vendor in the

00:14:46,540 --> 00:14:51,160
States little bird who's here in Sydney

00:14:48,790 --> 00:14:53,320
they have lots and lots of boards lots

00:14:51,160 --> 00:14:56,580
of cool gadgets and I'm not responsible

00:14:53,320 --> 00:14:56,580
for what happens to your credit card

00:15:00,600 --> 00:15:06,550
that's right once you've actually got

00:15:04,060 --> 00:15:09,250
aboard how do you talk to it one of the

00:15:06,550 --> 00:15:12,400
best ways is if it has a USB interface

00:15:09,250 --> 00:15:15,190
USB to serial converter and then just

00:15:12,400 --> 00:15:18,160
use PI serial the advantages of it is it

00:15:15,190 --> 00:15:20,320
just works it works on a mac it works on

00:15:18,160 --> 00:15:23,800
linux that works on your us your unix

00:15:20,320 --> 00:15:26,260
boxes works on Windows if you've got a

00:15:23,800 --> 00:15:28,830
POSIX compliant operating system it will

00:15:26,260 --> 00:15:31,390
work and it will work on windows as well

00:15:28,830 --> 00:15:34,240
both two and three are supported and

00:15:31,390 --> 00:15:35,380
it's not just a tool for C Python so if

00:15:34,240 --> 00:15:37,540
you're actually delivering something

00:15:35,380 --> 00:15:38,579
like a dotnet solution it'll work there

00:15:37,540 --> 00:15:41,129
as well

00:15:38,579 --> 00:15:43,619
really well documented very widely used

00:15:41,129 --> 00:15:45,569
so it's well supported and it's also

00:15:43,619 --> 00:15:49,589
easy to extend so if you want to do

00:15:45,569 --> 00:15:51,689
something odd like a a an odd rs-485

00:15:49,589 --> 00:15:56,699
protocols sitting on the top it's very

00:15:51,689 --> 00:15:58,920
easy to extend it you know your comport

00:15:56,699 --> 00:16:00,809
has some sort of a name like that you

00:15:58,920 --> 00:16:02,459
just whack that into the constructor as

00:16:00,809 --> 00:16:04,139
you build it and you'll start talking

00:16:02,459 --> 00:16:05,670
but then there's a whole range of other

00:16:04,139 --> 00:16:09,689
options if you do have an odd

00:16:05,670 --> 00:16:11,309
configuration the one catch that I was

00:16:09,689 --> 00:16:13,350
going to mention was as you start

00:16:11,309 --> 00:16:15,869
plugging more and more USB devices in

00:16:13,350 --> 00:16:18,839
some operating systems hello windows

00:16:15,869 --> 00:16:20,999
chokes really badly so you may find you

00:16:18,839 --> 00:16:24,029
plug a couple of USB devices in and they

00:16:20,999 --> 00:16:25,619
come up as come one and come to and plug

00:16:24,029 --> 00:16:27,989
them plug them back in and they come up

00:16:25,619 --> 00:16:31,350
as they come three and come five yes

00:16:27,989 --> 00:16:33,059
love that Linux is really good because

00:16:31,350 --> 00:16:35,429
you can code your way around that with

00:16:33,059 --> 00:16:38,999
you dev rules that's just a trap for

00:16:35,429 --> 00:16:43,290
young players there's lots of boxes to

00:16:38,999 --> 00:16:45,029
interface into the the real world first

00:16:43,290 --> 00:16:47,249
demo let's see how badly I can screw

00:16:45,029 --> 00:16:50,339
this up this is a weatherboard from

00:16:47,249 --> 00:16:52,709
sparkfun so we're talking what two

00:16:50,339 --> 00:16:54,869
inches by two inches and on that you get

00:16:52,709 --> 00:16:58,309
barometric pressure calibrated already

00:16:54,869 --> 00:17:01,290
relative humidity calibrated you get

00:16:58,309 --> 00:17:04,019
temperature and you can select whether

00:17:01,290 --> 00:17:07,230
it outputs in Celsius or Fahrenheit you

00:17:04,019 --> 00:17:09,089
get ambient lives you get some nice

00:17:07,230 --> 00:17:11,189
little I 0 points so that you can add

00:17:09,089 --> 00:17:14,789
additional I 01 if you want you know

00:17:11,189 --> 00:17:15,839
there's no cloud sensor or um fog sensor

00:17:14,789 --> 00:17:20,929
which is what you need in Melbourne at

00:17:15,839 --> 00:17:20,929
the moment now let's see how we go

00:17:26,120 --> 00:17:33,780
so I'm on a Mac as you may have gathered

00:17:29,400 --> 00:17:39,440
and this is the name of the serial port

00:17:33,780 --> 00:17:41,460
that it's given me no calm one here I

00:17:39,440 --> 00:17:43,110
just want to make sure it's come up

00:17:41,460 --> 00:17:47,340
correctly so I'm just going to bring up

00:17:43,110 --> 00:17:48,870
a serial program for this cool terms are

00:17:47,340 --> 00:17:50,130
really nice little map program if you

00:17:48,870 --> 00:17:52,350
are playing around with things like that

00:17:50,130 --> 00:17:56,310
and it looks like it's found the right

00:17:52,350 --> 00:17:59,190
port for me if we now connect all it

00:17:56,310 --> 00:18:02,400
does is every second it just pumps out a

00:17:59,190 --> 00:18:04,950
line of ascii and if you run along its

00:18:02,400 --> 00:18:08,160
it's actually values like the ambient

00:18:04,950 --> 00:18:10,980
light the temperature which looks like

00:18:08,160 --> 00:18:12,750
it's in Fahrenheit possibly let's not

00:18:10,980 --> 00:18:15,270
bother but you get the idea that's

00:18:12,750 --> 00:18:18,960
really easy to parse out it's some

00:18:15,270 --> 00:18:20,880
nicely terminated and you can actually

00:18:18,960 --> 00:18:23,340
configure the board so that it will

00:18:20,880 --> 00:18:25,710
output in human readable format so it's

00:18:23,340 --> 00:18:28,890
all nicely tabulated with text or

00:18:25,710 --> 00:18:32,040
machine readable which is that output so

00:18:28,890 --> 00:18:34,140
high serial reading the line pars out

00:18:32,040 --> 00:18:37,380
the fields and and you're done it's that

00:18:34,140 --> 00:18:39,450
simple I'll show you another board with

00:18:37,380 --> 00:18:41,760
some real pie serial code in a second

00:18:39,450 --> 00:18:43,800
but hopefully that gives you a feel for

00:18:41,760 --> 00:18:45,810
just how easy it is to pull out the vast

00:18:43,800 --> 00:18:47,550
amount of data if you're going to write

00:18:45,810 --> 00:18:49,560
your own weather station for home for

00:18:47,550 --> 00:18:52,830
example you could just get one of these

00:18:49,560 --> 00:18:55,590
boards drop it in something like a just

00:18:52,830 --> 00:18:57,150
a small plastic box that is optically

00:18:55,590 --> 00:18:59,930
clear so you still get your ambient

00:18:57,150 --> 00:19:03,090
light stick it outside USB cable inside

00:18:59,930 --> 00:19:04,440
maybe 10 lines of Python if that and

00:19:03,090 --> 00:19:07,730
you've got a fully working weather

00:19:04,440 --> 00:19:07,730
station that's not bad

00:19:12,549 --> 00:19:19,700
the bit whacker so I'm the bit whacker

00:19:16,490 --> 00:19:23,019
is this tiny little bored here and I'll

00:19:19,700 --> 00:19:29,570
then jump back to photo booth for this

00:19:23,019 --> 00:19:34,009
it is um tiny can you see that so we're

00:19:29,570 --> 00:19:36,139
talking about just three um maybe three

00:19:34,009 --> 00:19:39,230
centimeters long two centimeters high it

00:19:36,139 --> 00:19:42,350
is really tiny it has those 16 lines of

00:19:39,230 --> 00:19:45,529
digital i/o you can drive motors with it

00:19:42,350 --> 00:19:48,619
you can pump out frequencies you can

00:19:45,529 --> 00:19:50,960
read voltages if you want to get started

00:19:48,619 --> 00:19:53,869
with playing with Python in the real

00:19:50,960 --> 00:19:56,029
world this is probably the way to go the

00:19:53,869 --> 00:19:57,860
built-in firmware would do anything that

00:19:56,029 --> 00:19:59,509
the novice would want to do if you're

00:19:57,860 --> 00:20:02,119
just getting started it will keep you

00:19:59,509 --> 00:20:05,360
happy but it's easily reprogrammed with

00:20:02,119 --> 00:20:06,950
standard pick programming tools and the

00:20:05,360 --> 00:20:10,629
nice thing is is you can buy these for

00:20:06,950 --> 00:20:13,909
25 bucks in volumes of one from sparkfun

00:20:10,629 --> 00:20:15,559
but you can easily build up your own if

00:20:13,909 --> 00:20:22,129
you've got a soldering iron and a pic

00:20:15,559 --> 00:20:23,029
programmer then you can just make up

00:20:22,129 --> 00:20:25,970
your own and there's plenty of examples

00:20:23,029 --> 00:20:28,840
on the web of how to do that now will

00:20:25,970 --> 00:20:28,840
this stay

00:20:37,220 --> 00:20:43,080
let's see how we go this is going to be

00:20:40,620 --> 00:20:46,080
messy so I've just wired a little servo

00:20:43,080 --> 00:20:49,260
motor to the front and I've got a red

00:20:46,080 --> 00:20:53,210
LED there never maybe I need a volunteer

00:20:49,260 --> 00:20:53,210
mark do you want to hold that from it

00:20:55,970 --> 00:21:02,760
okay I'm very conscious of some of the

00:21:00,929 --> 00:21:07,919
live demos I've seen this weekend and

00:21:02,760 --> 00:21:13,760
how tragically awry they can go let's

00:21:07,919 --> 00:21:18,720
see how he go so I've written a little

00:21:13,760 --> 00:21:20,580
script over the top of pie cereal it's

00:21:18,720 --> 00:21:27,320
just called pie wacker that just lets me

00:21:20,580 --> 00:21:27,320
play with artists we've got to do

00:21:31,910 --> 00:21:40,580
okay so different different USB modem

00:21:36,140 --> 00:21:43,520
port this time and all I'm going to do

00:21:40,580 --> 00:21:45,650
is just give it that and I should have a

00:21:43,520 --> 00:21:48,020
port and I should be able to do things

00:21:45,650 --> 00:21:52,430
like query its version to just see what

00:21:48,020 --> 00:21:57,070
firmware it's got and then let's just

00:21:52,430 --> 00:21:57,070
set up some default port mappings and

00:21:59,110 --> 00:22:07,640
what I'm going to do is just drive the

00:22:02,600 --> 00:22:11,740
LED at a frequency the LED is on the i/o

00:22:07,640 --> 00:22:14,860
channel a zero and let's say that

00:22:11,740 --> 00:22:21,160
blinking hopefully people can see that

00:22:14,860 --> 00:22:21,160
and then there's that servo which is on

00:22:21,310 --> 00:22:27,770
if you are lucky you heard that move and

00:22:24,910 --> 00:22:30,290
so I add here I'm just driving it

00:22:27,770 --> 00:22:39,880
between home and end but I can also do

00:22:30,290 --> 00:22:43,640
things like actually say pick a value

00:22:39,880 --> 00:22:46,220
tell her I want to go to value 2000 it's

00:22:43,640 --> 00:22:48,320
that simple to drive a motor so you've

00:22:46,220 --> 00:22:49,370
got multiple servo channels so if you

00:22:48,320 --> 00:22:51,050
wanted to build your own little

00:22:49,370 --> 00:22:52,520
helicopter that was Python driven it

00:22:51,050 --> 00:22:54,410
might be tethered I know you could use a

00:22:52,520 --> 00:22:56,210
zigbee interface you could do all that

00:22:54,410 --> 00:23:01,040
straight out of the box it's that that's

00:22:56,210 --> 00:23:04,700
simple Thank You Mac the really neat

00:23:01,040 --> 00:23:06,380
part about that is um Python is just so

00:23:04,700 --> 00:23:09,500
easy to network so think of what you can

00:23:06,380 --> 00:23:12,740
do with that hook it into a Twitter

00:23:09,500 --> 00:23:15,560
account and get it to monitor your imap

00:23:12,740 --> 00:23:17,630
or your pop account wire in three LEDs

00:23:15,560 --> 00:23:19,790
so that every time someone tweets you

00:23:17,630 --> 00:23:22,310
the green LED blinks every time someone

00:23:19,790 --> 00:23:24,260
emails you the yellow LED blinks every

00:23:22,310 --> 00:23:28,340
time you boss emails you the red LED

00:23:24,260 --> 00:23:30,950
really blinks a.m. and have the servo

00:23:28,340 --> 00:23:33,650
hooked up to just a little dial so that

00:23:30,950 --> 00:23:36,290
it goes between 0 and 180 degrees and it

00:23:33,650 --> 00:23:38,450
can be monitoring your server load or

00:23:36,290 --> 00:23:40,370
run the amount of RAM you've got left or

00:23:38,450 --> 00:23:42,350
your latency for playing World of

00:23:40,370 --> 00:23:45,370
Warcraft or some other really vital

00:23:42,350 --> 00:23:49,690
statistic it's that easy it's

00:23:45,370 --> 00:23:51,670
really nice and that's the board if you

00:23:49,690 --> 00:23:53,320
couldn't see it from down far below it's

00:23:51,670 --> 00:23:56,559
got a couple of LEDs on a couple of

00:23:53,320 --> 00:23:58,150
buttons on it and you can solder away to

00:23:56,559 --> 00:24:01,200
your heart's content or just wire it

00:23:58,150 --> 00:24:03,930
into a breadboard and I'm the little

00:24:01,200 --> 00:24:07,960
trivial interface that I put over it is

00:24:03,930 --> 00:24:12,400
available there at bitbucket but I'm if

00:24:07,960 --> 00:24:18,030
we go to text editor and it's not quite

00:24:12,400 --> 00:24:20,650
maximized anymore is it all I've done

00:24:18,030 --> 00:24:23,950
like it's not rocket science i just want

00:24:20,650 --> 00:24:25,990
to show you how easy it is so the

00:24:23,950 --> 00:24:29,200
constructor at the top it just creates

00:24:25,990 --> 00:24:33,309
the IO map saves the address saves the

00:24:29,200 --> 00:24:35,590
port object and stores the version and

00:24:33,309 --> 00:24:37,420
to send you this writing a packet out

00:24:35,590 --> 00:24:39,760
the port and if you have a look down the

00:24:37,420 --> 00:24:42,700
bottom at that send receive function its

00:24:39,760 --> 00:24:44,730
ends and then it reads and it strips off

00:24:42,700 --> 00:24:46,809
the last character for the response

00:24:44,730 --> 00:24:50,230
further down I do a little bit more

00:24:46,809 --> 00:24:53,410
manipulation but that's it it is very

00:24:50,230 --> 00:24:55,960
very straightforward programming and

00:24:53,410 --> 00:24:57,700
this is just a convenience I'm sort of

00:24:55,960 --> 00:25:01,210
you know an object-oriented lay on top

00:24:57,700 --> 00:25:04,240
of it if you want to move up a level the

00:25:01,210 --> 00:25:05,920
Arduino s have stacks more I oh and they

00:25:04,240 --> 00:25:08,290
have lots of nice little interface

00:25:05,920 --> 00:25:10,750
boards like this that sit on top so this

00:25:08,290 --> 00:25:14,350
one's for relays if you wanted to do

00:25:10,750 --> 00:25:16,210
things like turn on the pump pool or the

00:25:14,350 --> 00:25:18,280
pool pump for example or you want to

00:25:16,210 --> 00:25:20,230
switch lights on and off you could have

00:25:18,280 --> 00:25:22,600
an Arduino coupled into one of these

00:25:20,230 --> 00:25:25,210
boards that just plugs in on top and do

00:25:22,600 --> 00:25:29,760
the appropriate safe responsible mains

00:25:25,210 --> 00:25:32,470
wiring and you'd be away there are

00:25:29,760 --> 00:25:34,390
dozens of different shields which are

00:25:32,470 --> 00:25:37,240
the shields of the expansion boards that

00:25:34,390 --> 00:25:40,510
sit on top so you can have LCDs wireless

00:25:37,240 --> 00:25:42,760
interfaces all sorts of i/o gps's and

00:25:40,510 --> 00:25:47,140
there's a massive community of people

00:25:42,760 --> 00:25:49,120
working in this 30 35 bucks for a board

00:25:47,140 --> 00:25:51,490
like that that gives you more io than

00:25:49,120 --> 00:25:56,920
the average person would know what to do

00:25:51,490 --> 00:25:59,290
with they come in a range of sizes so

00:25:56,920 --> 00:26:03,040
you get an idea with the Arduino many

00:25:59,290 --> 00:26:04,720
and the arduino uni you know and there

00:26:03,040 --> 00:26:06,580
are a range of others including ones

00:26:04,720 --> 00:26:08,080
that are designed for wearable computing

00:26:06,580 --> 00:26:10,360
so you can actually stitch them into

00:26:08,080 --> 00:26:14,380
your clothing and then use conductive

00:26:10,360 --> 00:26:16,210
cotton to weave wires out to various

00:26:14,380 --> 00:26:20,560
sensors and that's where it gets to be a

00:26:16,210 --> 00:26:23,470
lot of fun and the IDE is a really

00:26:20,560 --> 00:26:26,140
simple variant of see and you can writer

00:26:23,470 --> 00:26:27,940
not just a nice little cereal coms

00:26:26,140 --> 00:26:31,210
handler to talk back to your Python

00:26:27,940 --> 00:26:35,680
interface and do all of the Arduino

00:26:31,210 --> 00:26:37,750
magic so instead of having Python on the

00:26:35,680 --> 00:26:40,300
computer talking to boards there's a

00:26:37,750 --> 00:26:41,770
couple of other options I mentioned pi

00:26:40,300 --> 00:26:43,270
might and i'm just going to flick over

00:26:41,770 --> 00:26:47,610
it really quickly this is a work in

00:26:43,270 --> 00:26:50,980
progress that is amazing 8-bit

00:26:47,610 --> 00:26:54,040
microprocessor is with 64 K of flesh and

00:26:50,980 --> 00:26:56,920
at least 4 K of RAM can run a subset of

00:26:54,040 --> 00:26:59,290
Python you don't get the standard

00:26:56,920 --> 00:27:02,200
libraries so it's kind of really

00:26:59,290 --> 00:27:05,170
batteries are not included but it does

00:27:02,200 --> 00:27:08,490
allow you to use Python in a very

00:27:05,170 --> 00:27:10,930
embedded environment where I think

00:27:08,490 --> 00:27:13,630
Python probably shines though boards

00:27:10,930 --> 00:27:18,870
like this this is a a beagle board so

00:27:13,630 --> 00:27:21,040
it's just a standard arm cortex a8 CPU

00:27:18,870 --> 00:27:24,130
there are a range of operating systems

00:27:21,040 --> 00:27:26,350
that work on arms with Python so for

00:27:24,130 --> 00:27:28,810
example debian and ubuntu linux will

00:27:26,350 --> 00:27:30,790
happily run on a board like this just

00:27:28,810 --> 00:27:34,600
load up debian or you bump to onto an SD

00:27:30,790 --> 00:27:38,740
card plug it in there power it up it's

00:27:34,600 --> 00:27:42,430
got hdmi interfaces it's got USB jtag I

00:27:38,740 --> 00:27:44,820
to see the works a little bored like

00:27:42,430 --> 00:27:46,690
that embedded away in a product is

00:27:44,820 --> 00:27:49,000
exceptionally powerful it's more

00:27:46,690 --> 00:27:51,160
powerful than the computers that most of

00:27:49,000 --> 00:27:54,550
us were using say five years ago some

00:27:51,160 --> 00:27:56,980
it's very impressive and a lot of small

00:27:54,550 --> 00:28:01,420
netbooks and computers like that are

00:27:56,980 --> 00:28:02,530
based on these sorts of boards that's

00:28:01,420 --> 00:28:04,440
the picture for those of you who

00:28:02,530 --> 00:28:07,120
couldn't see it from the the back and

00:28:04,440 --> 00:28:09,610
it's a stack of others so I I showed you

00:28:07,120 --> 00:28:12,000
this one this is a gum stick this is a

00:28:09,610 --> 00:28:16,240
fully operational Linux arm

00:28:12,000 --> 00:28:22,210
it's got really small little headers for

00:28:16,240 --> 00:28:23,770
those down the back you can't sue so

00:28:22,210 --> 00:28:25,660
that's the size it with this tiny little

00:28:23,770 --> 00:28:28,600
header that breaks out to bluetooth

00:28:25,660 --> 00:28:31,690
boards and LCD boards and analog i/o

00:28:28,600 --> 00:28:35,250
boards that's how small they get and

00:28:31,690 --> 00:28:35,250
this will happily run Python again

00:28:35,400 --> 00:28:40,410
hopefully by now your mind sticking over

00:28:37,660 --> 00:28:43,000
gun oh I can conquer the world with this

00:28:40,410 --> 00:28:45,070
and raspberry pi is perhaps the most

00:28:43,000 --> 00:28:47,200
exciting thing on this screen for those

00:28:45,070 --> 00:28:51,220
of you who don't follow slashdot reddit

00:28:47,200 --> 00:28:54,480
etc a guy in the UK when I can build a

00:28:51,220 --> 00:28:57,790
computer for education for 25 bucks and

00:28:54,480 --> 00:28:59,860
he's now I think at the alpha stage he's

00:28:57,790 --> 00:29:02,800
got funding and the aim is to get back

00:28:59,860 --> 00:29:04,960
to the old days of like the BBC micro

00:29:02,800 --> 00:29:06,760
and that when kids in schools could

00:29:04,960 --> 00:29:08,920
actually play with a real computer and

00:29:06,760 --> 00:29:12,070
program it and understand how it all

00:29:08,920 --> 00:29:13,960
went together 25 bucks for an arm-based

00:29:12,070 --> 00:29:18,450
computer that will happily run your bum

00:29:13,960 --> 00:29:18,450
soo or debian is pretty impressive I

00:29:19,260 --> 00:29:26,340
think it is yes I think that's the guy

00:29:21,460 --> 00:29:29,530
yeah I've quickly flipped over PI cereal

00:29:26,340 --> 00:29:32,580
there are others hi parallel pi visa

00:29:29,530 --> 00:29:35,920
visas are standard used in a lot of

00:29:32,580 --> 00:29:37,630
engineering boards and I'm comedy has

00:29:35,920 --> 00:29:41,020
kind of died off a bit but it still

00:29:37,630 --> 00:29:44,860
works for more high-end commercial data

00:29:41,020 --> 00:29:46,660
acquisition boards you may want to know

00:29:44,860 --> 00:29:48,550
more it's possible that you have not

00:29:46,660 --> 00:29:50,590
become an electronics or embedded

00:29:48,550 --> 00:29:54,400
programming expert just from these

00:29:50,590 --> 00:29:56,200
slides I accept that it's okay three

00:29:54,400 --> 00:29:58,120
books possibly all from O'Reilly but

00:29:56,200 --> 00:29:59,920
let's move on I'm not a Salesman they

00:29:58,120 --> 00:30:01,870
don't get a commission the Arduino

00:29:59,920 --> 00:30:03,700
cookbook is brilliant and the other one

00:30:01,870 --> 00:30:05,290
is I'm John oxa who's a Melbourne guy

00:30:03,700 --> 00:30:08,800
has written a book called practical

00:30:05,290 --> 00:30:11,070
Arduino which is also brilliant make

00:30:08,800 --> 00:30:14,050
electronics is perhaps one of the better

00:30:11,070 --> 00:30:16,150
entry-level textbooks on on electronics

00:30:14,050 --> 00:30:18,610
really practical great hands-on and

00:30:16,150 --> 00:30:20,140
real-world instrumentation with Python

00:30:18,610 --> 00:30:22,950
isn't bad either that's the book that

00:30:20,140 --> 00:30:22,950
came out earlier this year

00:30:23,840 --> 00:30:28,549
you want to help inspiration go find

00:30:26,750 --> 00:30:30,110
your local hackerspace most of the

00:30:28,549 --> 00:30:32,960
capital cities around the world have

00:30:30,110 --> 00:30:34,940
them now and if your city or town

00:30:32,960 --> 00:30:38,799
doesn't have one then perhaps you're the

00:30:34,940 --> 00:30:42,320
person to start it and I salute you

00:30:38,799 --> 00:30:43,520
let's move on threads I want to talk

00:30:42,320 --> 00:30:47,870
about a couple of problems with

00:30:43,520 --> 00:30:50,960
programming python concurrent control of

00:30:47,870 --> 00:30:52,520
embedded hardware you have great power

00:30:50,960 --> 00:30:54,470
you also have great responsibility

00:30:52,520 --> 00:30:58,070
because it is very easy to screw things

00:30:54,470 --> 00:31:00,860
up first thing is where do you start you

00:30:58,070 --> 00:31:03,080
have so many options threads in Python

00:31:00,860 --> 00:31:04,730
or down in the sea level multiple

00:31:03,080 --> 00:31:06,110
processes if you go that way you're

00:31:04,730 --> 00:31:08,360
going to use something like the multi

00:31:06,110 --> 00:31:11,450
processing module are you going to spawn

00:31:08,360 --> 00:31:13,730
things out yourself you're going to work

00:31:11,450 --> 00:31:14,990
off a single core multiple cause how are

00:31:13,730 --> 00:31:16,490
you going to manage that you're actually

00:31:14,990 --> 00:31:18,649
going to have multiple CPUs and

00:31:16,490 --> 00:31:20,840
communicate between them you're going to

00:31:18,649 --> 00:31:24,559
go fancy with co routines ringlets

00:31:20,840 --> 00:31:27,140
redlips the many many choices and the

00:31:24,559 --> 00:31:30,110
the unfortunate thing of having many

00:31:27,140 --> 00:31:32,000
many choices is there is no one right

00:31:30,110 --> 00:31:33,470
answer I can put you out you do actually

00:31:32,000 --> 00:31:35,990
have to go and have a look at your

00:31:33,470 --> 00:31:38,179
design if you're in a team working with

00:31:35,990 --> 00:31:39,980
electronics engineers look at the

00:31:38,179 --> 00:31:44,360
hardware understand the trade-offs and

00:31:39,980 --> 00:31:46,130
then make the appropriate call threads

00:31:44,360 --> 00:31:49,190
always seems like the easy solution and

00:31:46,130 --> 00:31:51,200
to quote jwz on regular expressions if

00:31:49,190 --> 00:31:53,149
you think it's the solution to your

00:31:51,200 --> 00:31:56,270
problem you probably now have two

00:31:53,149 --> 00:31:58,130
problems because unless you're very

00:31:56,270 --> 00:31:59,870
careful with your design and understand

00:31:58,130 --> 00:32:02,390
how your operating system works with

00:31:59,870 --> 00:32:07,399
threads you can get yourself into a real

00:32:02,390 --> 00:32:10,100
mess and yeah it just expect sleepless

00:32:07,399 --> 00:32:12,200
nights if you've got a very highly

00:32:10,100 --> 00:32:14,240
threaded model and you are controlling a

00:32:12,200 --> 00:32:15,740
large number of devices with a large

00:32:14,240 --> 00:32:18,409
number of threads that you're spawning

00:32:15,740 --> 00:32:21,110
off it possibly non-deterministic

00:32:18,409 --> 00:32:25,850
intervals and if you do not design it

00:32:21,110 --> 00:32:29,390
upfront well you are in for pain this is

00:32:25,850 --> 00:32:31,970
the Gila monster and it's a lizard it's

00:32:29,390 --> 00:32:34,309
one of two lizards that is venomous in

00:32:31,970 --> 00:32:36,150
the southwest of North America so if

00:32:34,309 --> 00:32:38,820
you're in places like

00:32:36,150 --> 00:32:41,880
north of Mexico or Arizona you may come

00:32:38,820 --> 00:32:45,300
across this beast it eats rotten fruit

00:32:41,880 --> 00:32:47,430
and eats long cats it's not to be

00:32:45,300 --> 00:32:50,760
confused with the Gil which is also a

00:32:47,430 --> 00:32:53,940
monster the Gil is the global

00:32:50,760 --> 00:32:58,200
interpreter lock and specifically in the

00:32:53,940 --> 00:33:00,000
C Python implementation if you are not

00:32:58,200 --> 00:33:01,500
careful and you try and push your

00:33:00,000 --> 00:33:04,080
threading too far you can get yourself

00:33:01,500 --> 00:33:05,910
into real trouble I've got a colleague

00:33:04,080 --> 00:33:07,380
in the audience and he can attest to

00:33:05,910 --> 00:33:10,290
some of the problems we've had recently

00:33:07,380 --> 00:33:11,880
trying to debug a system where the

00:33:10,290 --> 00:33:15,540
threads have just caused us a large

00:33:11,880 --> 00:33:17,970
amount of heartache it perhaps the most

00:33:15,540 --> 00:33:20,910
important thing to remember is throwing

00:33:17,970 --> 00:33:23,010
more cause at the problem will not solve

00:33:20,910 --> 00:33:25,980
it because python is just working on one

00:33:23,010 --> 00:33:29,790
core and is just creating its threads on

00:33:25,980 --> 00:33:34,760
that one core again design up front

00:33:29,790 --> 00:33:38,070
think about it lower-level threads yeah

00:33:34,760 --> 00:33:39,810
may the force be with you it's often a

00:33:38,070 --> 00:33:41,520
really elegant solution but if you're

00:33:39,810 --> 00:33:43,290
going to try and mix having some threads

00:33:41,520 --> 00:33:49,230
up in your Python level and some threads

00:33:43,290 --> 00:33:52,650
down yeah panadol it works well on board

00:33:49,230 --> 00:33:53,790
processes I'm going to flick over if

00:33:52,650 --> 00:33:55,740
you're going to do that just think

00:33:53,790 --> 00:33:57,720
really carefully about how you manage

00:33:55,740 --> 00:33:59,910
the communication and sharing between

00:33:57,720 --> 00:34:01,590
your different processes the multi

00:33:59,910 --> 00:34:03,570
processing module from what I've used so

00:34:01,590 --> 00:34:07,170
far seems to be a really elegant way of

00:34:03,570 --> 00:34:08,790
working with it and as I said go off

00:34:07,170 --> 00:34:10,649
board for example just have a single

00:34:08,790 --> 00:34:12,690
thread in your Python application that

00:34:10,649 --> 00:34:14,940
dispatches events out down to hardware

00:34:12,690 --> 00:34:19,260
it's the simplest way to go if you've

00:34:14,940 --> 00:34:20,790
got control over your hardware second

00:34:19,260 --> 00:34:24,450
problem what do you do in pythons not

00:34:20,790 --> 00:34:27,540
fast enough probably the approach that I

00:34:24,450 --> 00:34:29,159
prefer is just to squeeze every ounce I

00:34:27,540 --> 00:34:31,320
can over the Python when I know I can't

00:34:29,159 --> 00:34:34,110
go any further drop down into C or C++

00:34:31,320 --> 00:34:35,820
and you sweep there's a range of other

00:34:34,110 --> 00:34:37,980
tools you may choose another tool for a

00:34:35,820 --> 00:34:39,419
particular reason the thing I like about

00:34:37,980 --> 00:34:41,730
Swagger's it's been around a long time

00:34:39,419 --> 00:34:44,159
people understand it this good support

00:34:41,730 --> 00:34:47,040
works across a range of compilers and

00:34:44,159 --> 00:34:49,129
operating systems and it also targets

00:34:47,040 --> 00:34:52,720
other languages so for example you can

00:34:49,129 --> 00:34:58,970
your C++ library do the swig wrapper and

00:34:52,720 --> 00:35:01,940
targets dotnet Java Ruby TCL Python all

00:34:58,970 --> 00:35:03,170
from the same interface that's quite

00:35:01,940 --> 00:35:07,430
handy if you're working in the large

00:35:03,170 --> 00:35:09,049
group that's multi-language basically

00:35:07,430 --> 00:35:11,660
you write your module right the swig

00:35:09,049 --> 00:35:13,279
interface compile it and then you can

00:35:11,660 --> 00:35:14,720
import it I'm not going to go into too

00:35:13,279 --> 00:35:18,230
much more detail this isn't a swig

00:35:14,720 --> 00:35:20,779
tutorial but I'm that little bit of code

00:35:18,230 --> 00:35:23,559
there is the probably the most complex

00:35:20,779 --> 00:35:25,940
interface I've ever had to write in swig

00:35:23,559 --> 00:35:28,819
just doing things like mapping some

00:35:25,940 --> 00:35:32,960
exceptions and how things like vectors

00:35:28,819 --> 00:35:34,279
of bytes map up into Python usually

00:35:32,960 --> 00:35:38,089
sweet we'll be able to figure it all out

00:35:34,279 --> 00:35:41,089
for you if it's a simple module another

00:35:38,089 --> 00:35:43,400
approach is um is Python QT where what

00:35:41,089 --> 00:35:46,430
we've done is we've had a QT application

00:35:43,400 --> 00:35:48,589
and we've actually embedded Python

00:35:46,430 --> 00:35:50,900
inside that QT application so it's

00:35:48,589 --> 00:35:52,759
working the other way around and the

00:35:50,900 --> 00:35:56,299
nice thing is is that python has access

00:35:52,759 --> 00:35:58,700
to every object that is derived from Q

00:35:56,299 --> 00:36:01,099
object inside the Qt framework so you

00:35:58,700 --> 00:36:04,220
can start extending C++ classes with

00:36:01,099 --> 00:36:06,819
Python you can then push that back down

00:36:04,220 --> 00:36:11,390
into the C++ layer and have lots of fun

00:36:06,819 --> 00:36:13,759
interoperability between the two so we

00:36:11,390 --> 00:36:16,309
used it for an in-house application for

00:36:13,759 --> 00:36:20,089
rapidly developing test beds prototyping

00:36:16,309 --> 00:36:22,519
especially for biomedical work and the

00:36:20,089 --> 00:36:24,589
C++ did all of the low-level hardware

00:36:22,519 --> 00:36:27,440
control and also the UI just because it

00:36:24,589 --> 00:36:29,809
was easy to do in QT and it worked

00:36:27,440 --> 00:36:33,859
across platforms both Windows and Linux

00:36:29,809 --> 00:36:35,089
and across different hardware and Python

00:36:33,859 --> 00:36:37,369
was the scripting interface and

00:36:35,089 --> 00:36:39,109
basically was the glue on top of the

00:36:37,369 --> 00:36:41,630
hardware so you could talk to the UI you

00:36:39,109 --> 00:36:44,599
could talk to the hardware and create

00:36:41,630 --> 00:36:47,509
really complex workflows to communicate

00:36:44,599 --> 00:36:49,730
with the user that gives you a little

00:36:47,509 --> 00:36:51,829
nutshell so there's kind of a brains

00:36:49,730 --> 00:36:53,660
which is the controller and the Python

00:36:51,829 --> 00:36:57,349
interface can talk across all of those

00:36:53,660 --> 00:36:59,420
layers and I'm it's just a really simple

00:36:57,349 --> 00:37:01,370
user interface there's a Python scripts

00:36:59,420 --> 00:37:03,230
and control buttons output at the

00:37:01,370 --> 00:37:04,880
awesome you can hide the script so if

00:37:03,230 --> 00:37:06,740
the scientist is just running a script

00:37:04,880 --> 00:37:10,010
all the time hide its they to see the

00:37:06,740 --> 00:37:11,480
output in buttons that the the really

00:37:10,010 --> 00:37:13,580
cool thing about it was all of the

00:37:11,480 --> 00:37:16,430
devices in scriptable the API is

00:37:13,580 --> 00:37:17,840
automatically generated out of QT you

00:37:16,430 --> 00:37:19,640
hand it over to a mechanical or

00:37:17,840 --> 00:37:21,890
electronics engineer with learning

00:37:19,640 --> 00:37:24,050
python the book and say call me if you

00:37:21,890 --> 00:37:27,130
have any problems and it was almost that

00:37:24,050 --> 00:37:29,270
simple it was a really nice way of going

00:37:27,130 --> 00:37:30,740
there are other options people have

00:37:29,270 --> 00:37:32,540
touched on this in other talks things

00:37:30,740 --> 00:37:35,680
like siphon and pipe i er ways of

00:37:32,540 --> 00:37:37,940
squeezing more out of you your Python

00:37:35,680 --> 00:37:40,040
I'm running out of time I'm going to go

00:37:37,940 --> 00:37:41,810
really quickly the one here I really

00:37:40,040 --> 00:37:43,940
wanted to emphasize was high resolution

00:37:41,810 --> 00:37:45,920
timing don't just assume it will just

00:37:43,940 --> 00:37:48,920
work out of the box understand how your

00:37:45,920 --> 00:37:51,290
operating system uses timers timed

00:37:48,920 --> 00:37:53,750
uptime is probably the best way to get a

00:37:51,290 --> 00:37:56,450
time value quickly on a Mac or on a

00:37:53,750 --> 00:37:58,940
Linux box whereas time clock seems to

00:37:56,450 --> 00:38:00,380
work more reliably on Windows and it's

00:37:58,940 --> 00:38:01,910
good to just abstract that so you

00:38:00,380 --> 00:38:04,430
remember when you shift your code

00:38:01,910 --> 00:38:09,770
between platforms yeah and now the

00:38:04,430 --> 00:38:11,480
shocker embedding debugger if you start

00:38:09,770 --> 00:38:13,040
mixing your C and your Python or you've

00:38:11,480 --> 00:38:14,750
got Python talking off two different

00:38:13,040 --> 00:38:17,930
boards and is a problem somewhere I

00:38:14,750 --> 00:38:20,720
don't have a single easy answer for how

00:38:17,930 --> 00:38:23,000
you do this lots of LEDs on your

00:38:20,720 --> 00:38:24,410
electronics LEDs are cheap having LEDs

00:38:23,000 --> 00:38:27,140
that can blink when they're in a fault

00:38:24,410 --> 00:38:29,180
state really nice plan for it and just

00:38:27,140 --> 00:38:31,730
build your debug hooks in everywhere you

00:38:29,180 --> 00:38:35,750
can as long as you don't compromise your

00:38:31,730 --> 00:38:38,030
performance and beware the Heisenberg so

00:38:35,750 --> 00:38:40,220
the the Heisenberg is basically where

00:38:38,030 --> 00:38:42,320
the bug is there until you try to

00:38:40,220 --> 00:38:44,960
observe it and then it disappears you

00:38:42,320 --> 00:38:47,570
stop observing it it comes back it's the

00:38:44,960 --> 00:38:49,460
best usually what happens is you've got

00:38:47,570 --> 00:38:51,410
some sort of timing issue or a thread

00:38:49,460 --> 00:38:52,670
contention you go I'll just put in a bit

00:38:51,410 --> 00:38:55,100
of logging what do you mean it's gone

00:38:52,670 --> 00:39:03,200
the Cardiff take the logging out it

00:38:55,100 --> 00:39:05,270
comes back it's worth understanding when

00:39:03,200 --> 00:39:07,550
people actually report problems like

00:39:05,270 --> 00:39:09,140
this and you go and debug it and can't

00:39:07,550 --> 00:39:10,700
find the problem just be aware that

00:39:09,140 --> 00:39:12,650
that's usually an indication that it's

00:39:10,700 --> 00:39:14,910
thread contention or time contention of

00:39:12,650 --> 00:39:17,530
some form

00:39:14,910 --> 00:39:20,130
I've mentioned this and pythons pretty

00:39:17,530 --> 00:39:22,480
good at abstracting across platforms

00:39:20,130 --> 00:39:25,660
viet your operating system or the

00:39:22,480 --> 00:39:27,940
underlying cpu but it doesn't always

00:39:25,660 --> 00:39:31,810
hide you from everything and it's really

00:39:27,940 --> 00:39:33,730
useful to know everything that is going

00:39:31,810 --> 00:39:36,370
to come back to impact your design so i

00:39:33,730 --> 00:39:38,260
mentioned times for example but things

00:39:36,370 --> 00:39:42,700
like how threads and processes are

00:39:38,260 --> 00:39:45,280
scheduled on windows versus linux how

00:39:42,700 --> 00:39:47,020
your cones latency differs if you're

00:39:45,280 --> 00:39:52,540
running USB out of windows mac linux

00:39:47,020 --> 00:39:53,830
freebsd it's worth knowing that so i got

00:39:52,540 --> 00:39:58,330
a few minutes left i want to talk about

00:39:53,830 --> 00:40:00,130
the future if you're starting from

00:39:58,330 --> 00:40:01,780
scratch and you're wanting to do

00:40:00,130 --> 00:40:03,460
something like you know hook into an

00:40:01,780 --> 00:40:08,200
arduino board or you've bought a

00:40:03,460 --> 00:40:09,370
commercial pci bus a 2d card what do you

00:40:08,200 --> 00:40:11,920
do to actually get that into an

00:40:09,370 --> 00:40:14,650
application at the moment your choices

00:40:11,920 --> 00:40:17,470
are if you're a programmer Python

00:40:14,650 --> 00:40:19,540
programmer you roll it yourself if

00:40:17,470 --> 00:40:23,110
you're a C++ programmer you may get out

00:40:19,540 --> 00:40:25,450
visual studio and you know start writing

00:40:23,110 --> 00:40:26,800
something or you can buy LabVIEW off the

00:40:25,450 --> 00:40:28,930
shelf from National Instruments and

00:40:26,800 --> 00:40:31,450
there's not a lot of other choices out

00:40:28,930 --> 00:40:32,800
there some have come and gone over the

00:40:31,450 --> 00:40:35,290
years but there's never really been a

00:40:32,800 --> 00:40:37,540
good rapid application development tool

00:40:35,290 --> 00:40:39,610
for scientists and engineers and other

00:40:37,540 --> 00:40:43,210
people who want to work with these sorts

00:40:39,610 --> 00:40:46,570
of products levy is really nice in many

00:40:43,210 --> 00:40:48,880
ways if you have got the money if you're

00:40:46,570 --> 00:40:50,710
prepared to accept that it won't work on

00:40:48,880 --> 00:40:52,720
a lot of the platforms that you need

00:40:50,710 --> 00:40:54,550
that it works best with national

00:40:52,720 --> 00:40:58,060
instruments hardware surprisingly and

00:40:54,550 --> 00:41:00,040
that it is very graphical so trying to

00:40:58,060 --> 00:41:01,810
do a diff between two versions of

00:41:00,040 --> 00:41:04,060
something that you've drawn can be a

00:41:01,810 --> 00:41:08,440
challenge and it doesn't scale well up

00:41:04,060 --> 00:41:12,010
to complex applications a little

00:41:08,440 --> 00:41:14,650
snapshot 11 so you've got some dials and

00:41:12,010 --> 00:41:16,630
buttons and graphs on the front and then

00:41:14,650 --> 00:41:21,580
behind other widgets that actually tie

00:41:16,630 --> 00:41:23,260
that together what I think would be

00:41:21,580 --> 00:41:25,660
really nice as if there was a pison

00:41:23,260 --> 00:41:26,880
rapid application development tool that

00:41:25,660 --> 00:41:29,430
was like that that

00:41:26,880 --> 00:41:32,670
learnt from tools like labview visual

00:41:29,430 --> 00:41:34,440
basic HyperCard python card that was

00:41:32,670 --> 00:41:36,690
easy to use for scientists and engineers

00:41:34,440 --> 00:41:38,309
people that aren't programmers to

00:41:36,690 --> 00:41:40,589
actually be able to pick up building

00:41:38,309 --> 00:41:43,950
blocks of boards like this assemble them

00:41:40,589 --> 00:41:46,170
together hook them into numpy or side pi

00:41:43,950 --> 00:41:48,630
have graphing libraries on top of it

00:41:46,170 --> 00:41:50,490
script into the back if they need

00:41:48,630 --> 00:41:54,000
additional functionality suck in

00:41:50,490 --> 00:41:56,000
packages from PI pi and have it work

00:41:54,000 --> 00:41:59,309
across platforms and be open source

00:41:56,000 --> 00:42:01,440
that's the Holy Grail I think so watch

00:41:59,309 --> 00:42:04,319
this space and I may be doing a demo

00:42:01,440 --> 00:42:07,140
this time next year and I would really

00:42:04,319 --> 00:42:13,190
if people are interested my details were

00:42:07,140 --> 00:42:13,190
at the start watch this space thank

00:42:17,780 --> 00:42:22,120
we've got time for a couple of questions

00:42:22,630 --> 00:42:26,660
if you just wanted to start out and

00:42:25,370 --> 00:42:28,790
doing some tinkering what are the

00:42:26,660 --> 00:42:31,790
coolest sensors and effect is that

00:42:28,790 --> 00:42:33,620
people should pick up good question um

00:42:31,790 --> 00:42:35,150
they're going here the question what are

00:42:33,620 --> 00:42:37,490
the coolest sensors and effectors to

00:42:35,150 --> 00:42:39,170
work with I think servo motors are

00:42:37,490 --> 00:42:41,660
really good because they're not complex

00:42:39,170 --> 00:42:44,180
like stepper motors but you can use them

00:42:41,660 --> 00:42:46,010
to drive lots of things and I think that

00:42:44,180 --> 00:42:48,440
there's this so cheap you can walk into

00:42:46,010 --> 00:42:51,590
a J car and buy a servomotor you know

00:42:48,440 --> 00:42:54,110
something like this was it's three leads

00:42:51,590 --> 00:42:56,240
ten twelve dollars including the gear

00:42:54,110 --> 00:42:57,890
bits so you could why that up to a

00:42:56,240 --> 00:43:00,650
propeller you could wire it up to a

00:42:57,890 --> 00:43:02,390
gauge you could wire it up to a little

00:43:00,650 --> 00:43:05,810
man that waves at you whenever you get a

00:43:02,390 --> 00:43:07,880
tweet whatever I think that those

00:43:05,810 --> 00:43:10,900
combined with LEDs are probably the best

00:43:07,880 --> 00:43:13,460
outputs for starting in terms of inputs

00:43:10,900 --> 00:43:15,230
having some switches is always good just

00:43:13,460 --> 00:43:17,390
for debugging and testing if nothing

00:43:15,230 --> 00:43:18,680
else but i'm i'm a big fan of weather I

00:43:17,390 --> 00:43:21,460
think weather's really good its

00:43:18,680 --> 00:43:23,570
practical people understand it and

00:43:21,460 --> 00:43:25,340
actually I just realized you being from

00:43:23,570 --> 00:43:29,720
the Bureau of Meteorology can probably

00:43:25,340 --> 00:43:31,190
ever probably appreciate that more than

00:43:29,720 --> 00:43:34,160
others but i do think weather is one of

00:43:31,190 --> 00:43:35,930
those things where it's actually it's

00:43:34,160 --> 00:43:37,520
all oval teach it's safe and it's

00:43:35,930 --> 00:43:39,350
something that you can just tinker with

00:43:37,520 --> 00:43:40,730
and you can compare it against what the

00:43:39,350 --> 00:43:42,800
news was reporting every night or hop

00:43:40,730 --> 00:43:44,780
onto the bomb site and say I'm seeing

00:43:42,800 --> 00:43:46,370
that's 26 degrees at the moment out here

00:43:44,780 --> 00:43:48,910
they're reporting 26 degrees hey that's

00:43:46,370 --> 00:43:51,230
pretty cool start doing things like

00:43:48,910 --> 00:43:53,090
wiring in temperature sensors and

00:43:51,230 --> 00:43:55,340
humidity temperature sorry humidity

00:43:53,090 --> 00:43:57,950
sensors into your keg as you do your

00:43:55,340 --> 00:43:59,840
homebrew and just monitor the

00:43:57,950 --> 00:44:02,060
temperature of your homebrew and then

00:43:59,840 --> 00:44:03,860
start wiring outputs so you can actually

00:44:02,060 --> 00:44:05,810
switch on a bit of cooling if it gets

00:44:03,860 --> 00:44:07,610
too hot and then before you know it

00:44:05,810 --> 00:44:09,960
you've got a second kitchen with a fully

00:44:07,610 --> 00:44:11,910
automated brewery and

00:44:09,960 --> 00:44:22,940
you get a lot more friends when that

00:44:11,910 --> 00:44:22,940
happens everybody else done differently

00:44:25,910 --> 00:44:30,920
so just a question about the boards but

00:44:29,270 --> 00:44:32,599
actually run Python on the board have

00:44:30,920 --> 00:44:34,549
compared to Arduino which puts you for a

00:44:32,599 --> 00:44:35,869
very low level programming or relatively

00:44:34,549 --> 00:44:37,880
low-level programming interface but has

00:44:35,869 --> 00:44:39,500
extremely low power consumption how much

00:44:37,880 --> 00:44:41,299
more of a price will you pay for

00:44:39,500 --> 00:44:42,829
actually running Python on top of Debian

00:44:41,299 --> 00:44:45,289
on top of one of these small computer

00:44:42,829 --> 00:44:47,119
board yeah good question well with pie

00:44:45,289 --> 00:44:51,020
might it will actually run on the top

00:44:47,119 --> 00:44:52,940
end Arduino the Arduino mega 2560 I

00:44:51,020 --> 00:44:54,440
think it is and they consume they're

00:44:52,940 --> 00:44:55,940
battery-powered you know you can happily

00:44:54,440 --> 00:44:58,640
run those on a 9-volt that true for a

00:44:55,940 --> 00:45:00,410
long time I can't remember off the top

00:44:58,640 --> 00:45:02,150
of my head the power consumption of this

00:45:00,410 --> 00:45:07,730
but it's five volts and I think it is

00:45:02,150 --> 00:45:10,700
under a watch so sorry so what's is it

00:45:07,730 --> 00:45:12,170
okay thank you so you know run 30 of

00:45:10,700 --> 00:45:14,690
these you've got your average light bulb

00:45:12,170 --> 00:45:17,119
for example they are that's probably the

00:45:14,690 --> 00:45:18,950
best thing about them is that they are

00:45:17,119 --> 00:45:22,609
very low power which is why people use

00:45:18,950 --> 00:45:26,270
them for portable applications yeah very

00:45:22,609 --> 00:45:29,510
very low cal okay i'm sure you can catch

00:45:26,270 --> 00:45:33,039
our ground during the break let's show

00:45:29,510 --> 00:45:33,039

YouTube URL: https://www.youtube.com/watch?v=nzCvomTixzU


