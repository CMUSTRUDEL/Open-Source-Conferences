Title: Networking Libraries in Python. - Mr. Senthil Kumaran
Publication date: 2011-08-22
Playlist: PyCon Australia 2011
Description: 
	This talk will explore the core networking libraries available in Python.
1. Python Standard Library. http and urllib package (Python3 and Python2).
2. Capabilities of other 3rd party networking libraries - pycurl and httplib2. When to use them and why they exist.
3. Asychronous Network IO using Twisted Matrix Framework.
4. Tornado framework capablities - Generic overview..
Captions: 
	00:00:00,000 --> 00:00:07,799
thanks for the introduction Andy so

00:00:04,049 --> 00:00:10,380
welcome to the stock it's it's going to

00:00:07,799 --> 00:00:11,940
be a fairly high-level overview of

00:00:10,380 --> 00:00:18,630
various different networking libraries

00:00:11,940 --> 00:00:20,520
available in Python so about me I'm

00:00:18,630 --> 00:00:22,350
fighting core developer I'm a maintainer

00:00:20,520 --> 00:00:24,180
of the early been related modules where

00:00:22,350 --> 00:00:25,800
and if you raise bugs or request

00:00:24,180 --> 00:00:29,250
features and you are a lab you are a lip

00:00:25,800 --> 00:00:31,920
to actually pay the CGI and things which

00:00:29,250 --> 00:00:34,350
interest me in terms of mostly

00:00:31,920 --> 00:00:36,300
networking and URL ciliated I would

00:00:34,350 --> 00:00:37,950
probably fix them and then you can

00:00:36,300 --> 00:00:43,050
contribute to the Python have a good

00:00:37,950 --> 00:00:45,930
time so why is this talk it improves up

00:00:43,050 --> 00:00:48,570
so with the stock like what I make what

00:00:45,930 --> 00:00:50,370
I mean aiming for I act up the stands to

00:00:48,570 --> 00:00:52,410
look at the other related libraries

00:00:50,370 --> 00:00:54,000
available in the networking world

00:00:52,410 --> 00:00:56,910
because I've been hearing a lot about

00:00:54,000 --> 00:00:59,370
the request library at the History P Lib

00:00:56,910 --> 00:01:00,809
two and a couple of libraries and there

00:00:59,370 --> 00:01:02,520
have been a lot of feature requests in

00:01:00,809 --> 00:01:04,320
Python standard library modules to to

00:01:02,520 --> 00:01:06,330
support the various different facilities

00:01:04,320 --> 00:01:07,950
to that so it's a good opportunity for

00:01:06,330 --> 00:01:10,110
me to learn the other stuff in the

00:01:07,950 --> 00:01:11,490
family over you and present to you in

00:01:10,110 --> 00:01:14,189
terms of what capabilities are available

00:01:11,490 --> 00:01:16,740
in the standard library what's available

00:01:14,189 --> 00:01:19,500
outside of the standard library and how

00:01:16,740 --> 00:01:22,320
everything together can fit your network

00:01:19,500 --> 00:01:24,030
library requirements and needs that's

00:01:22,320 --> 00:01:25,830
fairly comprehensive in terms of the

00:01:24,030 --> 00:01:27,960
ecosystem of networking libraries in

00:01:25,830 --> 00:01:29,670
Python is pretty stable a lot of good

00:01:27,960 --> 00:01:31,560
libraries are available and the even the

00:01:29,670 --> 00:01:33,540
standard library modules are pretty good

00:01:31,560 --> 00:01:35,729
in terms of it will help you do most of

00:01:33,540 --> 00:01:38,579
your tasks unless you have some obscure

00:01:35,729 --> 00:01:39,990
tasks which is like fairly less amount

00:01:38,579 --> 00:01:43,500
of people who need it but still it's

00:01:39,990 --> 00:01:46,079
available by some other library so it's

00:01:43,500 --> 00:01:48,149
always good to be aware of the echo the

00:01:46,079 --> 00:01:49,979
tool the tools ecosystem of what's

00:01:48,149 --> 00:01:51,960
available to us in terms of developing

00:01:49,979 --> 00:01:54,090
applications and when would you need a

00:01:51,960 --> 00:01:56,430
networking library supposes to your task

00:01:54,090 --> 00:01:58,530
is to develop a server okay you are

00:01:56,430 --> 00:02:00,180
you're working for a company which helps

00:01:58,530 --> 00:02:02,219
which which asks you not to use the

00:02:00,180 --> 00:02:04,219
Apache server but you write yes server

00:02:02,219 --> 00:02:06,270
on your own which can do a custom

00:02:04,219 --> 00:02:07,890
implementation of request handling and

00:02:06,270 --> 00:02:09,989
then give a particular response with a

00:02:07,890 --> 00:02:12,300
different set of protocols you might go

00:02:09,989 --> 00:02:13,090
about writing a networking library but

00:02:12,300 --> 00:02:14,650
you better

00:02:13,090 --> 00:02:16,349
right a networking library you use a

00:02:14,650 --> 00:02:18,970
networking library and build your server

00:02:16,349 --> 00:02:20,950
when you writing clients to talk to a

00:02:18,970 --> 00:02:22,660
database server or some other server

00:02:20,950 --> 00:02:24,849
then you might need a network library

00:02:22,660 --> 00:02:26,500
you might try to do a distributed

00:02:24,849 --> 00:02:28,060
computing application where you try to

00:02:26,500 --> 00:02:29,440
do load balancing between different

00:02:28,060 --> 00:02:31,150
applications and you might need a

00:02:29,440 --> 00:02:33,040
networking library which can talk to

00:02:31,150 --> 00:02:35,049
each other over the sockets so those are

00:02:33,040 --> 00:02:37,629
the those are the particular families in

00:02:35,049 --> 00:02:39,310
scenarios where you get a networking

00:02:37,629 --> 00:02:43,290
library and most of us who are web

00:02:39,310 --> 00:02:43,290
developers I'm sorry for that

00:02:54,980 --> 00:03:00,110
sorry I don't know which one was that

00:03:00,980 --> 00:03:08,850
okay I think that should do so there's a

00:03:07,470 --> 00:03:14,010
lot of networking libraries available

00:03:08,850 --> 00:03:15,180
for us to use and most of the mod so

00:03:14,010 --> 00:03:17,100
what are the different networking

00:03:15,180 --> 00:03:19,440
libraries most of the modules are built

00:03:17,100 --> 00:03:20,880
on top of the socket module the socket

00:03:19,440 --> 00:03:23,040
is the most underlying layer in the

00:03:20,880 --> 00:03:24,660
network library and if you see all the

00:03:23,040 --> 00:03:26,190
libraries which are available which are

00:03:24,660 --> 00:03:28,830
built on the standard library module

00:03:26,190 --> 00:03:30,930
could socket and whatever facilities the

00:03:28,830 --> 00:03:32,340
socket provides be like plain socket

00:03:30,930 --> 00:03:34,560
communication or the SSL based

00:03:32,340 --> 00:03:37,170
communication it's it's built on top of

00:03:34,560 --> 00:03:39,000
it and these high-level modules are

00:03:37,170 --> 00:03:40,620
implemented by following the

00:03:39,000 --> 00:03:42,959
specifications which are written down in

00:03:40,620 --> 00:03:44,910
RFC's so if something claims to be a

00:03:42,959 --> 00:03:46,709
history P 1.1 compliant networking

00:03:44,910 --> 00:03:48,330
library it has to be compliant with the

00:03:46,709 --> 00:03:51,540
RFC to six one six I believe it just

00:03:48,330 --> 00:03:53,160
like HTTP 1.1 specification and all the

00:03:51,540 --> 00:03:54,870
features which are supported by the RFC

00:03:53,160 --> 00:03:56,459
are provided and certain libraries

00:03:54,870 --> 00:04:00,000
choose to provide helper functions

00:03:56,459 --> 00:04:02,750
because we got used to writing doing

00:04:00,000 --> 00:04:04,830
certain requested understanding certain

00:04:02,750 --> 00:04:06,600
certain language in terms of when

00:04:04,830 --> 00:04:07,920
handling requests and responses and the

00:04:06,600 --> 00:04:10,230
libraries provide the high level

00:04:07,920 --> 00:04:12,480
functions to to deal with those

00:04:10,230 --> 00:04:14,820
libraries which is easier to read rather

00:04:12,480 --> 00:04:16,950
than following the RFC specification so

00:04:14,820 --> 00:04:19,140
those are some people get used to those

00:04:16,950 --> 00:04:20,489
libraries and then they all they

00:04:19,140 --> 00:04:22,650
commonly provide the helper functions

00:04:20,489 --> 00:04:24,570
because like it's not just a library

00:04:22,650 --> 00:04:26,160
function to take the other of C and

00:04:24,570 --> 00:04:28,229
convert into code it should provide

00:04:26,160 --> 00:04:30,360
helper functions like you don't want to

00:04:28,229 --> 00:04:31,890
get all the different parts of RFC's and

00:04:30,360 --> 00:04:33,960
stick together to form an application

00:04:31,890 --> 00:04:35,790
you want a helper function which can do

00:04:33,960 --> 00:04:37,890
a get for you which can do a post for

00:04:35,790 --> 00:04:39,479
you which can do and basically a tion

00:04:37,890 --> 00:04:42,810
and all those things that's what the

00:04:39,479 --> 00:04:44,340
libraries provide and different

00:04:42,810 --> 00:04:46,010
applications which are using those

00:04:44,340 --> 00:04:48,600
libraries like mercurial which is a

00:04:46,010 --> 00:04:51,750
distributed version control system and

00:04:48,600 --> 00:04:54,630
it uses the standard library modules a

00:04:51,750 --> 00:04:56,070
lot and Google or Google - CL the

00:04:54,630 --> 00:04:58,950
command line API is for dealing with all

00:04:56,070 --> 00:05:00,510
the Google code things I've looked into

00:04:58,950 --> 00:05:02,400
it and then it's extensively built using

00:05:00,510 --> 00:05:04,169
extra beliebe and you're only been

00:05:02,400 --> 00:05:05,640
everything YouTube here's a download

00:05:04,169 --> 00:05:07,200
like you till atif it just just using

00:05:05,640 --> 00:05:09,930
URL pass and URL Lib dude

00:05:07,200 --> 00:05:11,820
all that asks Victorian uses these

00:05:09,930 --> 00:05:14,610
networking libraries a lot and mailmen

00:05:11,820 --> 00:05:16,410
the the mailing list manager uses a

00:05:14,610 --> 00:05:17,880
plenty of things out there but these are

00:05:16,410 --> 00:05:19,800
some things which you can recognize for

00:05:17,880 --> 00:05:21,540
it because it's present in the standard

00:05:19,800 --> 00:05:23,640
library of which the Python ships with

00:05:21,540 --> 00:05:25,260
developers most often try to use what's

00:05:23,640 --> 00:05:30,570
available and they find their needs

00:05:25,260 --> 00:05:31,980
fairly satisfied so before I jumped to

00:05:30,570 --> 00:05:33,810
it quickly into the standard library

00:05:31,980 --> 00:05:35,040
modules I would give up overview of what

00:05:33,810 --> 00:05:37,290
are the different networking library

00:05:35,040 --> 00:05:39,690
related things available and one thing I

00:05:37,290 --> 00:05:41,730
would like to before mention up friends

00:05:39,690 --> 00:05:44,220
is like I've given a lot of things in

00:05:41,730 --> 00:05:45,960
the TOC proposal and tornado was one of

00:05:44,220 --> 00:05:47,880
the things which I mentioned but I just

00:05:45,960 --> 00:05:49,560
give a brief comparison because a lot of

00:05:47,880 --> 00:05:52,470
things to cover up friend in terms of

00:05:49,560 --> 00:05:54,480
the libraries available ok modules which

00:05:52,470 --> 00:05:56,940
are a web browser CGI web services

00:05:54,480 --> 00:05:59,040
gateway interface refined UUID which is

00:05:56,940 --> 00:06:00,660
like unique identifier provider all

00:05:59,040 --> 00:06:03,060
these are available as such in both

00:06:00,660 --> 00:06:04,680
Python 2 and 5 and 3 the reason I am

00:06:03,060 --> 00:06:05,970
highlighting them is like when we are

00:06:04,680 --> 00:06:08,340
working with Python we should write for

00:06:05,970 --> 00:06:11,130
both Python 2 and Python 3 and Python 3

00:06:08,340 --> 00:06:12,900
is like moving fast and the code

00:06:11,130 --> 00:06:15,270
developers are working in Python 3.3

00:06:12,900 --> 00:06:16,680
right now and all the modules which are

00:06:15,270 --> 00:06:18,360
available in Python 2 are available in

00:06:16,680 --> 00:06:20,310
Python 3 also but there are some changes

00:06:18,360 --> 00:06:22,020
which has gone Python 2 and Python 3

00:06:20,310 --> 00:06:24,720
so some lab libraries will have the name

00:06:22,020 --> 00:06:26,310
different web browser is like to do be

00:06:24,720 --> 00:06:27,870
the browser but if you are into browser

00:06:26,310 --> 00:06:29,850
based testing there is mechanize

00:06:27,870 --> 00:06:31,800
available which can give you like cookie

00:06:29,850 --> 00:06:33,600
support and then driving the browser

00:06:31,800 --> 00:06:35,160
using the mechanized library but the web

00:06:33,600 --> 00:06:36,960
browser is just for implementing like

00:06:35,160 --> 00:06:39,600
browser open and browse the tab open and

00:06:36,960 --> 00:06:41,760
everything there is CGI CGI module which

00:06:39,600 --> 00:06:43,770
is used for like dealing with the CGI

00:06:41,760 --> 00:06:45,540
task and web services gateway interface

00:06:43,770 --> 00:06:46,710
raft is the reference implementation of

00:06:45,540 --> 00:06:49,650
PAP 3 3 3

00:06:46,710 --> 00:06:52,800
where just it just gives the idea of

00:06:49,650 --> 00:06:55,230
what what's the if you want to build a

00:06:52,800 --> 00:06:57,240
fairly stable small Web Services gateway

00:06:55,230 --> 00:06:59,070
interface application for that you can

00:06:57,240 --> 00:07:02,400
use that in UUID for providing the

00:06:59,070 --> 00:07:04,470
unique identifier in both Python 2 and

00:07:02,400 --> 00:07:07,350
python 3 the libraries for handling the

00:07:04,470 --> 00:07:10,260
FTP protocol is available FTP lib pop

00:07:07,350 --> 00:07:12,270
and IMAP lib and SMTP live internet live

00:07:10,260 --> 00:07:14,100
fairly lesser used but these are

00:07:12,270 --> 00:07:15,840
available like and we don't see

00:07:14,100 --> 00:07:18,330
applications which are using telnet live

00:07:15,840 --> 00:07:20,670
often - as in like the remote right now

00:07:18,330 --> 00:07:22,290
but in terms of the you are

00:07:20,670 --> 00:07:24,240
handling library from two to three the

00:07:22,290 --> 00:07:26,910
changes have been like your lip and your

00:07:24,240 --> 00:07:28,680
lip to have been beep separated into

00:07:26,910 --> 00:07:31,920
three paths one for handling the request

00:07:28,680 --> 00:07:34,620
which just goes to request and then for

00:07:31,920 --> 00:07:37,020
giving the response code which is in URL

00:07:34,620 --> 00:07:39,030
if not response and for passing the URL

00:07:37,020 --> 00:07:41,250
which is the URL Lib dot pass and most

00:07:39,030 --> 00:07:43,800
often you will use URL Lib dot the

00:07:41,250 --> 00:07:45,210
question you are live dot pass and two

00:07:43,800 --> 00:07:47,370
to three tools which comes with the

00:07:45,210 --> 00:07:50,280
Python for converting python to to

00:07:47,370 --> 00:07:52,440
Python 3 takes care of converting your

00:07:50,280 --> 00:07:54,960
code to two at two to three witches

00:07:52,440 --> 00:07:56,490
which will replace the URL Lib and URL

00:07:54,960 --> 00:07:57,540
to appropriately where it needs that a

00:07:56,490 --> 00:08:00,240
question where it needs the past

00:07:57,540 --> 00:08:02,370
responses used within the URL a package

00:08:00,240 --> 00:08:05,400
so it's not fairly that we may need it

00:08:02,370 --> 00:08:07,020
but let's available and the passing

00:08:05,400 --> 00:08:09,390
capabilities are available in the URL

00:08:07,020 --> 00:08:12,090
Lib not pass the HTTP live which was

00:08:09,390 --> 00:08:13,680
present in python to is moved into HTTP

00:08:12,090 --> 00:08:16,470
package which is available in the form

00:08:13,680 --> 00:08:18,150
of HTTP client the cookie lib fossa well

00:08:16,470 --> 00:08:20,340
it's not cookie kibbutz cookie lib

00:08:18,150 --> 00:08:22,230
available in cookie jar and cookies

00:08:20,340 --> 00:08:25,110
available in terms of HTTP dot cookies

00:08:22,230 --> 00:08:27,510
the different reference implementations

00:08:25,110 --> 00:08:29,100
service okay i'm careful in choosing

00:08:27,510 --> 00:08:30,360
that it's the difference reference

00:08:29,100 --> 00:08:32,190
implementation service these are not

00:08:30,360 --> 00:08:35,010
production for it but there are base

00:08:32,190 --> 00:08:36,840
based HTTP server simple HTTP server CGI

00:08:35,010 --> 00:08:38,910
HTTP server and socket server these are

00:08:36,840 --> 00:08:40,260
available just for your one-off service

00:08:38,910 --> 00:08:42,690
it's like if you want to test something

00:08:40,260 --> 00:08:44,340
are available inside the HTTP server and

00:08:42,690 --> 00:08:45,780
the socket server modules ok these are

00:08:44,340 --> 00:08:47,670
not production ready because they are

00:08:45,780 --> 00:08:48,720
not asynchronous they are they handle

00:08:47,670 --> 00:08:50,790
the requests unconsciously

00:08:48,720 --> 00:08:52,620
but it's a very good educational tool

00:08:50,790 --> 00:08:55,050
for you to look at how the servers are

00:08:52,620 --> 00:08:57,800
implemented and get started with your

00:08:55,050 --> 00:09:00,600
server implementation in networking

00:08:57,800 --> 00:09:02,970
XML libraries XML RPC packages are

00:09:00,600 --> 00:09:04,650
available which handles both the XML RPC

00:09:02,970 --> 00:09:06,090
server and the client for doing an

00:09:04,650 --> 00:09:07,470
external artistic communication it's

00:09:06,090 --> 00:09:12,000
available in the package called XML RPC

00:09:07,470 --> 00:09:13,410
in Python 3 so these are the overview of

00:09:12,000 --> 00:09:15,540
different networking libraries which are

00:09:13,410 --> 00:09:17,460
available within the standard library ok

00:09:15,540 --> 00:09:19,290
if you need any of those like it's

00:09:17,460 --> 00:09:22,200
available in the standard library now

00:09:19,290 --> 00:09:23,970
let's go family higher overview into the

00:09:22,200 --> 00:09:27,090
one of the things which I know well

00:09:23,970 --> 00:09:28,380
which is like a URL lip it's a high

00:09:27,090 --> 00:09:31,070
level interface of fetching data from

00:09:28,380 --> 00:09:33,630
the web it's like your client of your

00:09:31,070 --> 00:09:34,560
client of your system it it fetches data

00:09:33,630 --> 00:09:37,710
from the web

00:09:34,560 --> 00:09:39,029
it does the get post and that's the

00:09:37,710 --> 00:09:41,670
different kind of authentications which

00:09:39,029 --> 00:09:43,440
are available and it's it's it all

00:09:41,670 --> 00:09:46,980
starts with the helper function by name

00:09:43,440 --> 00:09:48,360
URL Lib dot URL open and but down the

00:09:46,980 --> 00:09:50,130
line I will show you what kind of the

00:09:48,360 --> 00:09:52,890
design pattern which follows in terms of

00:09:50,130 --> 00:09:57,360
how it knows what it should do based on

00:09:52,890 --> 00:09:58,980
the URL URL Lib 2 is also the same thing

00:09:57,360 --> 00:10:01,050
with the additional support for like

00:09:58,980 --> 00:10:03,810
having different handlers depending on

00:10:01,050 --> 00:10:05,490
protocols for example the the idea is

00:10:03,810 --> 00:10:07,290
it's a builder pattern wherein you have

00:10:05,490 --> 00:10:09,089
different handlers for handling

00:10:07,290 --> 00:10:10,800
different kinds of requests if you want

00:10:09,089 --> 00:10:12,990
the basic authentication or a digest

00:10:10,800 --> 00:10:14,670
certification you create an instance of

00:10:12,990 --> 00:10:16,760
the handler and attach it to the opener

00:10:14,670 --> 00:10:18,750
and the opener can take care of

00:10:16,760 --> 00:10:22,050
associating itself with the correct URL

00:10:18,750 --> 00:10:24,029
to get the response so the whole idea of

00:10:22,050 --> 00:10:26,339
that builder pattern is its extensible

00:10:24,029 --> 00:10:29,420
if you want a new kind of an handler to

00:10:26,339 --> 00:10:31,710
to support your different web

00:10:29,420 --> 00:10:33,870
application needs it's available you've

00:10:31,710 --> 00:10:35,370
got to extend the available handler or

00:10:33,870 --> 00:10:37,890
write your new handler to do the work

00:10:35,370 --> 00:10:40,050
and of the recent discussions I see in

00:10:37,890 --> 00:10:41,850
the Stack Overflow and others like

00:10:40,050 --> 00:10:43,350
people have found it difficult to write

00:10:41,850 --> 00:10:45,810
a new handler and that's where the new

00:10:43,350 --> 00:10:47,430
libraries have been coming up like when

00:10:45,810 --> 00:10:49,740
it started I think it was good

00:10:47,430 --> 00:10:51,120
because people were people welcome the

00:10:49,740 --> 00:10:53,190
new idea of writing your own handlers

00:10:51,120 --> 00:10:54,930
but now writing handlers have become so

00:10:53,190 --> 00:10:57,030
common that they need something much

00:10:54,930 --> 00:10:58,500
more higher they need some library

00:10:57,030 --> 00:11:02,040
available with lot of supports already

00:10:58,500 --> 00:11:03,180
they need a girl like thing so it's

00:11:02,040 --> 00:11:04,890
still a good one

00:11:03,180 --> 00:11:07,650
like if you want something implemented

00:11:04,890 --> 00:11:09,270
on top of it still available and there

00:11:07,650 --> 00:11:10,800
are also libraries like requests which

00:11:09,270 --> 00:11:13,980
are available providing the much higher

00:11:10,800 --> 00:11:15,690
level functionality to what are the new

00:11:13,980 --> 00:11:19,589
updates which have gone in the URL Lib

00:11:15,690 --> 00:11:21,990
to support for SSL Certificates for saw

00:11:19,589 --> 00:11:23,940
HTTPS sites like you can point in to a

00:11:21,990 --> 00:11:26,339
certificate path and a hashed location

00:11:23,940 --> 00:11:28,950
of certificates in the URL function it's

00:11:26,339 --> 00:11:32,160
available from python 3.2 onwards it's

00:11:28,950 --> 00:11:34,200
been fairly sort of feature in the

00:11:32,160 --> 00:11:36,240
potion iterable which is available in

00:11:34,200 --> 00:11:38,820
Python 3 so when you are posting a data

00:11:36,240 --> 00:11:40,800
you're doing uploading a data and if

00:11:38,820 --> 00:11:42,750
it's a huge data the data could be a

00:11:40,800 --> 00:11:45,959
iterables where you don't have to load

00:11:42,750 --> 00:11:47,110
the entire data in memory and your your

00:11:45,959 --> 00:11:49,660
URL open

00:11:47,110 --> 00:11:53,050
takes a parameter which is data equal to

00:11:49,660 --> 00:11:54,820
the data and it can be an iterable now

00:11:53,050 --> 00:11:57,520
so it will take care of reading the data

00:11:54,820 --> 00:11:59,830
in a durable way and post it which is

00:11:57,520 --> 00:12:02,140
like which helps and bringing the

00:11:59,830 --> 00:12:03,850
performance of your post pretty good in

00:12:02,140 --> 00:12:06,250
terms like it will not treat the whole

00:12:03,850 --> 00:12:08,500
lot of data in memory transfer and gzip

00:12:06,250 --> 00:12:10,540
support where and if a site provides the

00:12:08,500 --> 00:12:12,910
gzip compression then it will do it

00:12:10,540 --> 00:12:14,830
automatically on in the background it's

00:12:12,910 --> 00:12:16,480
transparent it you won't know that the

00:12:14,830 --> 00:12:18,490
the feature is happening in the

00:12:16,480 --> 00:12:21,130
transparency and how these features come

00:12:18,490 --> 00:12:23,440
about is how browsers do it okay it's a

00:12:21,130 --> 00:12:25,120
fairly difficult question to answer that

00:12:23,440 --> 00:12:26,980
should the library follow the browser's

00:12:25,120 --> 00:12:29,110
behavior or not because browsers are

00:12:26,980 --> 00:12:31,480
basically clients they are targeted

00:12:29,110 --> 00:12:32,920
towards end users who do end users are

00:12:31,480 --> 00:12:34,480
not developers they don't care about

00:12:32,920 --> 00:12:36,550
different implementations they are okay

00:12:34,480 --> 00:12:38,380
with transparency saebom condition but

00:12:36,550 --> 00:12:40,510
but sometimes when a developer is using

00:12:38,380 --> 00:12:42,340
a library he wants it to be fairly close

00:12:40,510 --> 00:12:44,800
to the RFC specification not how the

00:12:42,340 --> 00:12:47,200
browser's are implemented so these kind

00:12:44,800 --> 00:12:49,300
of tension is there and good choice is

00:12:47,200 --> 00:12:51,670
made in terms of if you really need it

00:12:49,300 --> 00:12:53,680
or not and then it goes into the library

00:12:51,670 --> 00:12:55,570
module there have been numerous bug

00:12:53,680 --> 00:12:58,180
fixes in terms of how handling the

00:12:55,570 --> 00:13:00,220
relative URLs and then passing the URL

00:12:58,180 --> 00:13:01,810
so anything and this is where I said in

00:13:00,220 --> 00:13:03,580
terms of the Builder pattern which is

00:13:01,810 --> 00:13:05,680
build a design pattern we just used by

00:13:03,580 --> 00:13:07,210
the URL if to where and there is an

00:13:05,680 --> 00:13:08,950
open-air director which directs

00:13:07,210 --> 00:13:11,170
different handlers of what different

00:13:08,950 --> 00:13:13,450
tasks to do so you have a HTTP handler

00:13:11,170 --> 00:13:17,140
you have a HTTP handler you have an FTP

00:13:13,450 --> 00:13:18,790
handler you have FTP you have a

00:13:17,140 --> 00:13:20,380
different kind of handlers like basic

00:13:18,790 --> 00:13:23,770
authentication digest identification and

00:13:20,380 --> 00:13:24,010
all the handlers and the director Senshi

00:13:23,770 --> 00:13:26,110
Eights

00:13:24,010 --> 00:13:28,990
all those handlers and creates an opener

00:13:26,110 --> 00:13:32,770
and that opener when it gets a URL it

00:13:28,990 --> 00:13:34,690
kind of delegates the kind of it kind of

00:13:32,770 --> 00:13:36,940
delegates the task which it needs to do

00:13:34,690 --> 00:13:38,560
to the particular Handler suppose if you

00:13:36,940 --> 00:13:42,280
want to write a new kind of an

00:13:38,560 --> 00:13:44,200
authentication Handler by name ee SSG an

00:13:42,280 --> 00:13:45,280
authentication handler all you have to

00:13:44,200 --> 00:13:47,410
do is like

00:13:45,280 --> 00:13:49,770
subclass the base Handler and then write

00:13:47,410 --> 00:13:52,810
your authentication Handler and

00:13:49,770 --> 00:13:54,850
instantiate it and then put that into an

00:13:52,810 --> 00:13:56,470
opener director and then when you get it

00:13:54,850 --> 00:13:57,820
you give a particular code there is way

00:13:56,470 --> 00:14:00,130
to work with the Builder pattern and

00:13:57,820 --> 00:14:00,670
when when your application is ready you

00:14:00,130 --> 00:14:02,350
have your

00:14:00,670 --> 00:14:04,030
you are a Lib - which can support this

00:14:02,350 --> 00:14:08,500
new kind of an handler so that's fairly

00:14:04,030 --> 00:14:10,510
extensible pattern which it uses simple

00:14:08,500 --> 00:14:12,550
examples in terms of by default it does

00:14:10,510 --> 00:14:15,550
a get and you have to do when you are

00:14:12,550 --> 00:14:18,370
elephant and by doing a poor when doing

00:14:15,550 --> 00:14:20,320
a post you have a URL encoded data which

00:14:18,370 --> 00:14:22,540
is good actually why I am specifically

00:14:20,320 --> 00:14:23,680
saying this URL encoded data is the next

00:14:22,540 --> 00:14:26,020
library which we are going to see a

00:14:23,680 --> 00:14:27,310
request which says that doing this URL

00:14:26,020 --> 00:14:29,320
encode is also and not a good idea

00:14:27,310 --> 00:14:31,360
people are not used to it they want to

00:14:29,320 --> 00:14:34,090
poster it out immediately which handles

00:14:31,360 --> 00:14:35,980
that in the backend so it's like if you

00:14:34,090 --> 00:14:38,530
see that the how that networking library

00:14:35,980 --> 00:14:40,930
have gone through its about these

00:14:38,530 --> 00:14:42,220
follows the RSS specification closely

00:14:40,930 --> 00:14:45,490
where and you need a URL encoded data

00:14:42,220 --> 00:14:47,350
even forms to that so just giving data

00:14:45,490 --> 00:14:48,610
is equal to post data that's I post and

00:14:47,350 --> 00:14:53,560
the get is a fairly straightforward

00:14:48,610 --> 00:14:55,480
request so this is how the digest

00:14:53,560 --> 00:14:57,850
authentication handler works in terms of

00:14:55,480 --> 00:15:00,270
you have a URL Lib - HTTP digest

00:14:57,850 --> 00:15:02,590
authentication handler which can get you

00:15:00,270 --> 00:15:05,440
there is a negation handle requests

00:15:02,590 --> 00:15:06,640
username and a password and the

00:15:05,440 --> 00:15:09,100
authentication handler you get the

00:15:06,640 --> 00:15:10,960
password with that resin and the URL and

00:15:09,100 --> 00:15:12,790
the username and the password and you

00:15:10,960 --> 00:15:14,260
install the opener here with the build

00:15:12,790 --> 00:15:16,600
opener with the authentication Handler

00:15:14,260 --> 00:15:18,400
and once you request to it if you trace

00:15:16,600 --> 00:15:20,380
to the code you will see that this

00:15:18,400 --> 00:15:21,880
particular URL Lib request is going

00:15:20,380 --> 00:15:24,870
through the digestive and occation

00:15:21,880 --> 00:15:27,280
handler which you instantiate it here so

00:15:24,870 --> 00:15:30,960
this is the fairly basic things of it

00:15:27,280 --> 00:15:34,420
and this is an example of how you would

00:15:30,960 --> 00:15:36,310
customize your library to do something

00:15:34,420 --> 00:15:39,480
more for example all the libraries right

00:15:36,310 --> 00:15:41,710
now networking libraries do transparent

00:15:39,480 --> 00:15:43,420
redirection wherein you don't know if

00:15:41,710 --> 00:15:44,950
the site has been redirected for example

00:15:43,420 --> 00:15:46,750
even the browsers if you do a google

00:15:44,950 --> 00:15:48,310
comm it will change it to Google code

00:15:46,750 --> 00:15:50,080
Ottawa google.com to you

00:15:48,310 --> 00:15:53,530
that's a transparent redirection and it

00:15:50,080 --> 00:15:56,220
gives the redirection codes for it your

00:15:53,530 --> 00:15:58,630
lip - needless to say that's the same -

00:15:56,220 --> 00:16:00,580
but if you want to be more in terms of

00:15:58,630 --> 00:16:01,870
having a control when to do a allow the

00:16:00,580 --> 00:16:04,210
authenticate when to allow the

00:16:01,870 --> 00:16:07,990
redirection or not you can subclass the

00:16:04,210 --> 00:16:10,060
3:02 method like this wherein you have a

00:16:07,990 --> 00:16:11,590
redirect handler but have it like a

00:16:10,060 --> 00:16:15,370
smart redirect handler

00:16:11,590 --> 00:16:18,640
and then supplies the over HTTP error

00:16:15,370 --> 00:16:19,870
3:02 method like this where and you say

00:16:18,640 --> 00:16:21,820
whatever you want to do when the

00:16:19,870 --> 00:16:23,350
redirection happens and then use this

00:16:21,820 --> 00:16:25,390
handler instead of the default handler

00:16:23,350 --> 00:16:27,730
and there you have a more control in

00:16:25,390 --> 00:16:31,000
terms of your redirection as what to do

00:16:27,730 --> 00:16:32,800
when the redirection happens these are

00:16:31,000 --> 00:16:34,750
the different ways so we saw a family

00:16:32,800 --> 00:16:38,440
basic overview of different ways to

00:16:34,750 --> 00:16:39,910
extend the library there is like when

00:16:38,440 --> 00:16:41,830
you are dealing with URLs you are to do

00:16:39,910 --> 00:16:43,720
use with the parsers also to parse the

00:16:41,830 --> 00:16:45,850
library and it now right now suppose the

00:16:43,720 --> 00:16:49,000
ipv6 URLs to but not the library which

00:16:45,850 --> 00:16:51,040
fetches the data so HTTP Lib is the one

00:16:49,000 --> 00:16:52,600
the URL Lib to is built on HTTP live

00:16:51,040 --> 00:16:55,630
which provides the basic functionalities

00:16:52,600 --> 00:16:57,730
of HTTP 1.1 spec it does a lot of things

00:16:55,630 --> 00:16:59,980
like implements the states on top of

00:16:57,730 --> 00:17:02,110
socket and then it's so if you want the

00:16:59,980 --> 00:17:05,380
do requests which are like head put

00:17:02,110 --> 00:17:07,210
request you go to HD be lip to do that

00:17:05,380 --> 00:17:09,070
not early but your lip can support too

00:17:07,210 --> 00:17:13,780
but people have been using HT play

00:17:09,070 --> 00:17:16,060
button you may get the methods parameter

00:17:13,780 --> 00:17:17,680
to do particularly but it's fine to do

00:17:16,060 --> 00:17:19,780
it with head input because it's directly

00:17:17,680 --> 00:17:24,750
dealing with the darling dealing with a

00:17:19,780 --> 00:17:27,640
HTTP protocol FTP Lib provides the

00:17:24,750 --> 00:17:30,040
classes for methods for dealing with FTP

00:17:27,640 --> 00:17:33,100
it's good to have them separate because

00:17:30,040 --> 00:17:35,650
the the way they IFD be out of C is

00:17:33,100 --> 00:17:37,300
defined as different from HTTP and when

00:17:35,650 --> 00:17:38,860
you do I get you want to do a directory

00:17:37,300 --> 00:17:41,650
listing instead of getting the response

00:17:38,860 --> 00:17:45,610
of the HTTP server it takes care of all

00:17:41,650 --> 00:17:49,290
those things it it is a support for TLS

00:17:45,610 --> 00:17:51,580
the support and from 2.7 onwards

00:17:49,290 --> 00:17:54,460
internally used by you early modules for

00:17:51,580 --> 00:17:57,280
handling HTTP URLs so even if you use

00:17:54,460 --> 00:18:00,910
the URL Lib as a fairly basic opener for

00:17:57,280 --> 00:18:04,050
given you pass the FTP URL this will get

00:18:00,910 --> 00:18:07,390
transferred to FTP lib to do the process

00:18:04,050 --> 00:18:08,740
now comes the other part wherein I am

00:18:07,390 --> 00:18:10,210
not sure if you heard of this but

00:18:08,740 --> 00:18:12,490
there's a recent news in terms of the

00:18:10,210 --> 00:18:14,860
request library which that's a that's

00:18:12,490 --> 00:18:18,430
hand make it much easier to do the

00:18:14,860 --> 00:18:21,010
networking Tybee request what I found

00:18:18,430 --> 00:18:23,950
was it is an easy interface for many

00:18:21,010 --> 00:18:25,400
common tasks ok focuses on ease of use

00:18:23,950 --> 00:18:27,950
the developer wanted

00:18:25,400 --> 00:18:30,410
readability and he wanted things to be

00:18:27,950 --> 00:18:33,740
much more approachable correct

00:18:30,410 --> 00:18:35,480
so the basic authentication request

00:18:33,740 --> 00:18:37,130
which we solve in terms of digest

00:18:35,480 --> 00:18:39,440
authentication handler boils down to

00:18:37,130 --> 00:18:40,970
these three codes wherein you have an

00:18:39,440 --> 00:18:42,320
authentication in terms of user in the

00:18:40,970 --> 00:18:44,540
password and the request library can

00:18:42,320 --> 00:18:45,980
figure out in terms of what kind of an

00:18:44,540 --> 00:18:47,600
authentication required and then that's

00:18:45,980 --> 00:18:50,300
the proper authentication and gives the

00:18:47,600 --> 00:18:54,800
response and response has fairly good

00:18:50,300 --> 00:18:57,080
though good methods and attributes like

00:18:54,800 --> 00:18:59,570
status code or if it had followed the

00:18:57,080 --> 00:19:01,429
redirection if we'd had followed the

00:18:59,570 --> 00:19:03,080
redirection it gets the list of all the

00:19:01,429 --> 00:19:07,990
redirections which has been true you can

00:19:03,080 --> 00:19:10,610
look up to pretty good and it has the

00:19:07,990 --> 00:19:12,320
it's like the whole idea about the

00:19:10,610 --> 00:19:13,970
request library is ease of use we have

00:19:12,320 --> 00:19:15,710
seen many different libraries and the

00:19:13,970 --> 00:19:17,900
web frameworks libraries come up with

00:19:15,710 --> 00:19:19,880
certain things which help us reuse the

00:19:17,900 --> 00:19:21,890
concept and because libraries pretty

00:19:19,880 --> 00:19:23,840
good at it so a person who's starting

00:19:21,890 --> 00:19:25,400
with it may look at it but you have to

00:19:23,840 --> 00:19:27,740
remember the request libraries in turn

00:19:25,400 --> 00:19:29,420
implemented on top of URL live so

00:19:27,740 --> 00:19:31,940
someone who wanted the higher-level

00:19:29,420 --> 00:19:33,679
interfaces for most common tasks have

00:19:31,940 --> 00:19:36,830
has written of wrapper libraries which

00:19:33,679 --> 00:19:38,900
can do get post put head everything and

00:19:36,830 --> 00:19:41,270
provided a uniform interfaces and

00:19:38,900 --> 00:19:43,160
looking at those libraries will give us

00:19:41,270 --> 00:19:44,840
an idea in terms of sandal library also

00:19:43,160 --> 00:19:48,220
again move forward in this direction so

00:19:44,840 --> 00:19:48,220
this this was a good one

00:20:02,570 --> 00:20:08,540
that's another library called hey sleepy

00:20:04,880 --> 00:20:11,150
Lib - okay I don't know the history of

00:20:08,540 --> 00:20:13,250
the project but people have felt the

00:20:11,150 --> 00:20:16,160
need for more advanced and feature-rich

00:20:13,250 --> 00:20:18,410
libraries in Python and HDPE Lib to is

00:20:16,160 --> 00:20:20,059
result of it pretty good in terms of its

00:20:18,410 --> 00:20:23,210
very feature-rich okay I looked at the

00:20:20,059 --> 00:20:24,740
features and it was like good the Python

00:20:23,210 --> 00:20:27,380
standard library can learn a lot early

00:20:24,740 --> 00:20:30,110
take a lot of things from it it

00:20:27,380 --> 00:20:32,179
implements the cache where in the

00:20:30,110 --> 00:20:34,010
browsers do that all the time they have

00:20:32,179 --> 00:20:35,450
a cache control protocol support wherein

00:20:34,010 --> 00:20:38,240
depending on the cache control header

00:20:35,450 --> 00:20:40,280
and respecting the cashman it's not

00:20:38,240 --> 00:20:42,400
really easy to do that because you have

00:20:40,280 --> 00:20:45,050
to keep track in mind in terms of what

00:20:42,400 --> 00:20:48,500
is the cache how long it should be and

00:20:45,050 --> 00:20:50,900
when it should be like like removed and

00:20:48,500 --> 00:20:54,350
when when we decide to become stale and

00:20:50,900 --> 00:20:55,880
all those definitions are given the has

00:20:54,350 --> 00:20:58,100
developed to have support for the cache

00:20:55,880 --> 00:20:59,540
control header and it's fairly basic -

00:20:58,100 --> 00:21:02,510
but the interface is pretty similar to

00:20:59,540 --> 00:21:04,250
the Python standard library so people

00:21:02,510 --> 00:21:06,530
have felt the need for cache control

00:21:04,250 --> 00:21:08,210
another support have Gordon it has

00:21:06,530 --> 00:21:11,390
support for keepalive where and it's

00:21:08,210 --> 00:21:14,030
it's it's like the key pipes are for

00:21:11,390 --> 00:21:16,220
disposition connections and then has the

00:21:14,030 --> 00:21:17,660
digestion basic and WC authentication

00:21:16,220 --> 00:21:18,830
caching that understands cache

00:21:17,660 --> 00:21:21,170
controller does it's pretty good

00:21:18,830 --> 00:21:24,290
actually so I think the like the

00:21:21,170 --> 00:21:25,790
standard library can target this to win

00:21:24,290 --> 00:21:30,679
terms of understanding the cache control

00:21:25,790 --> 00:21:32,179
header sand library does support certain

00:21:30,679 --> 00:21:35,390
kind of caches in terms of it has come

00:21:32,179 --> 00:21:38,960
up often in terms of not not the things

00:21:35,390 --> 00:21:40,610
but it supports some kind of validation

00:21:38,960 --> 00:21:43,910
and then dealing with the headers in a

00:21:40,610 --> 00:21:46,760
particular way so a lot of things can be

00:21:43,910 --> 00:21:48,920
borrowed from the HDB Lib - and there is

00:21:46,760 --> 00:21:50,480
another tool called Pikul so anyone

00:21:48,920 --> 00:21:52,820
dealing with the networking library has

00:21:50,480 --> 00:21:55,100
probably used curl and curl has a lot of

00:21:52,820 --> 00:21:56,420
different options and it's like it's a

00:21:55,100 --> 00:21:57,830
mammoth library for doing all the

00:21:56,420 --> 00:21:59,929
networking needs and the pi curl is a

00:21:57,830 --> 00:22:01,910
python wrapper implementation over the

00:21:59,929 --> 00:22:02,330
code but that's not pythonic that's what

00:22:01,910 --> 00:22:04,250
I felt

00:22:02,330 --> 00:22:06,830
it's you won't feel good writing about

00:22:04,250 --> 00:22:08,780
Pikul code with this and but it provides

00:22:06,830 --> 00:22:11,559
all the esoteric needs of networking

00:22:08,780 --> 00:22:13,940
which you would ever need so and

00:22:11,559 --> 00:22:15,390
standard library perhaps can learn more

00:22:13,940 --> 00:22:17,940
from the request and HTTP

00:22:15,390 --> 00:22:21,120
- and of course those are built on top

00:22:17,940 --> 00:22:23,010
of this now as ivory as well so it can

00:22:21,120 --> 00:22:24,510
give it yeah it can be a fairly good

00:22:23,010 --> 00:22:26,900
system to adopt some of the features

00:22:24,510 --> 00:22:29,520
from them - into the library modules

00:22:26,900 --> 00:22:31,410
these are the individual libraries and

00:22:29,520 --> 00:22:34,140
which you can use to build client as

00:22:31,410 --> 00:22:35,910
well as your small one-off projects but

00:22:34,140 --> 00:22:39,090
if you want to write servers which are

00:22:35,910 --> 00:22:40,950
also part of the networking that comes

00:22:39,090 --> 00:22:42,510
to major candidates one is twisted and

00:22:40,950 --> 00:22:44,250
another store narrow down a door has

00:22:42,510 --> 00:22:45,900
been in use primarily recently but

00:22:44,250 --> 00:22:49,200
twisted is a pretty stable and it's a

00:22:45,900 --> 00:22:51,660
very well known framework according to

00:22:49,200 --> 00:22:53,429
definition twisted provides a facility

00:22:51,660 --> 00:22:54,990
to build a synchronous event driven

00:22:53,429 --> 00:22:57,750
application for distributed network

00:22:54,990 --> 00:22:58,799
environment I wrote this like you will

00:22:57,750 --> 00:23:00,690
understand all these terminologies

00:22:58,799 --> 00:23:01,440
better if you find a reason to go ahead

00:23:00,690 --> 00:23:04,290
and build one

00:23:01,440 --> 00:23:07,200
it's just simple I asked you to build a

00:23:04,290 --> 00:23:08,669
server which can handle my request I

00:23:07,200 --> 00:23:10,530
give you the definition of the quest

00:23:08,669 --> 00:23:12,720
these are not get these are not post but

00:23:10,530 --> 00:23:15,090
I give you that the protocol will be get

00:23:12,720 --> 00:23:16,710
me I will give you the path and you have

00:23:15,090 --> 00:23:19,200
to append the path to something else and

00:23:16,710 --> 00:23:21,780
every time you fetch one you should do

00:23:19,200 --> 00:23:23,100
these many bytes and skip those it's

00:23:21,780 --> 00:23:24,419
like a puzzle I agree with you if you

00:23:23,100 --> 00:23:26,010
want to build a server which can handle

00:23:24,419 --> 00:23:27,660
like thousands of connections per second

00:23:26,010 --> 00:23:29,910
without anyone waiting for it

00:23:27,660 --> 00:23:32,309
you jump to twister and build one and

00:23:29,910 --> 00:23:36,270
push it provides just that and how it

00:23:32,309 --> 00:23:39,059
does is it it works by the concept of

00:23:36,270 --> 00:23:41,400
the firts and it's the reactor pattern

00:23:39,059 --> 00:23:43,410
so you have to look at it how the UI

00:23:41,400 --> 00:23:45,450
works wherein there's an event loop

00:23:43,410 --> 00:23:47,280
which is all always running for you to

00:23:45,450 --> 00:23:49,260
act upon the event like a GUI like a

00:23:47,280 --> 00:23:52,290
browser is always running and when I

00:23:49,260 --> 00:23:54,030
click a mouse on something it happens so

00:23:52,290 --> 00:23:55,799
reactor is simply is something like that

00:23:54,030 --> 00:23:57,780
it's a reactor pattern where the reactor

00:23:55,799 --> 00:23:59,820
is constantly running and when a network

00:23:57,780 --> 00:24:01,440
event happens that's where the

00:23:59,820 --> 00:24:02,520
connection made connection lost and all

00:24:01,440 --> 00:24:05,130
those events which the library

00:24:02,520 --> 00:24:07,200
recognizes looks at it and once the

00:24:05,130 --> 00:24:10,770
event occurs it has defined the protocol

00:24:07,200 --> 00:24:13,770
for the the protocol to take action so

00:24:10,770 --> 00:24:16,230
it has differentiated itself in terms of

00:24:13,770 --> 00:24:18,330
how the event is and what the protocol

00:24:16,230 --> 00:24:20,970
it follows and then gives us a fairly

00:24:18,330 --> 00:24:23,669
high-level overview of things to do in

00:24:20,970 --> 00:24:26,190
the twister world and we build servers

00:24:23,669 --> 00:24:28,690
with it so that's the that's the idea

00:24:26,190 --> 00:24:31,090
about twister and it works on the Select

00:24:28,690 --> 00:24:33,310
the event loop reactor which is default

00:24:31,090 --> 00:24:35,890
but you can also have the e-poll based

00:24:33,310 --> 00:24:38,950
reactor which can be fairly faster when

00:24:35,890 --> 00:24:42,760
compared to other other react other

00:24:38,950 --> 00:24:45,670
asynchronous libraries so implementing

00:24:42,760 --> 00:24:53,890
servers would go to twisted and these

00:24:45,670 --> 00:24:55,900
fairly cover them the that the that the

00:24:53,890 --> 00:24:58,650
networking world so this is a graphic

00:24:55,900 --> 00:25:01,240
example of what a twisted library was

00:24:58,650 --> 00:25:04,420
omitted a lot of code but it can give

00:25:01,240 --> 00:25:05,800
you a good idea you have a twisted

00:25:04,420 --> 00:25:07,780
internet protocol which imports a

00:25:05,800 --> 00:25:09,370
factory for creating a factory function

00:25:07,780 --> 00:25:11,020
and then protocol which gives the

00:25:09,370 --> 00:25:13,030
protocol connections in terms of what is

00:25:11,020 --> 00:25:15,580
going to happen and protocol they have a

00:25:13,030 --> 00:25:19,030
fairly standard names like connection

00:25:15,580 --> 00:25:21,310
made connection lost quit everything and

00:25:19,030 --> 00:25:24,490
then the factory function will provide

00:25:21,310 --> 00:25:27,760
the objects which can create what kind

00:25:24,490 --> 00:25:29,230
of factory function can create the

00:25:27,760 --> 00:25:31,330
objects which are required for your

00:25:29,230 --> 00:25:33,340
handling and then this is the one which

00:25:31,330 --> 00:25:35,590
is providing the twisted asynchronous

00:25:33,340 --> 00:25:37,960
event loop where in the reactors all

00:25:35,590 --> 00:25:40,300
this learning and right now if you if

00:25:37,960 --> 00:25:43,360
you attach a listen TCP port to the

00:25:40,300 --> 00:25:45,550
factory factory function it will listen

00:25:43,360 --> 00:25:48,220
to a particular port at eight zero zero

00:25:45,550 --> 00:25:49,990
seven and then it will give a factory

00:25:48,220 --> 00:25:52,330
function to that an instance of the

00:25:49,990 --> 00:25:54,280
factory function and then it will attach

00:25:52,330 --> 00:25:56,230
itself to the event which is connection

00:25:54,280 --> 00:25:59,920
made and then protocol which it should

00:25:56,230 --> 00:26:02,170
follow not the straightforward way of

00:25:59,920 --> 00:26:04,240
writing code but once you understand the

00:26:02,170 --> 00:26:06,730
reactor model and then once you start

00:26:04,240 --> 00:26:09,940
writing the twisted code it becomes

00:26:06,730 --> 00:26:11,980
fairly easy as in it's always kind of a

00:26:09,940 --> 00:26:14,500
templated as in light you write a good

00:26:11,980 --> 00:26:17,380
template of code once and then you use

00:26:14,500 --> 00:26:19,030
the code again and again to redefine it

00:26:17,380 --> 00:26:20,980
and then reuse it and then write a

00:26:19,030 --> 00:26:23,470
twister library and once it's written

00:26:20,980 --> 00:26:25,240
it's very good and like your

00:26:23,470 --> 00:26:27,460
asynchronous needs are taken care of

00:26:25,240 --> 00:26:30,160
you are your node no longer have to deal

00:26:27,460 --> 00:26:32,830
with things it also supports a web

00:26:30,160 --> 00:26:35,170
server but web server is not the thing

00:26:32,830 --> 00:26:37,510
and we should also suppose not just the

00:26:35,170 --> 00:26:41,080
event the network related world but any

00:26:37,510 --> 00:26:41,929
family isn't crucible so that's the

00:26:41,080 --> 00:26:44,389
strong

00:26:41,929 --> 00:26:46,340
kind of twisted and tornado has been in

00:26:44,389 --> 00:26:48,110
recent wear and it was used by

00:26:46,340 --> 00:26:50,179
FriendFeed and it was released as an

00:26:48,110 --> 00:26:52,429
open source project but its main focus

00:26:50,179 --> 00:26:54,590
was on the web server part okay it's

00:26:52,429 --> 00:26:58,070
like Apache they say that it's it's it

00:26:54,590 --> 00:26:59,840
was written for the sea 10k problem it's

00:26:58,070 --> 00:27:01,159
used a e-poll based reactor and there

00:26:59,840 --> 00:27:03,919
are various different performance

00:27:01,159 --> 00:27:07,399
benefits of this but my experience has

00:27:03,919 --> 00:27:08,869
been with using twisted and it's been

00:27:07,399 --> 00:27:11,690
good as in like there hasn't been a

00:27:08,869 --> 00:27:12,980
chance to write a tornado based solution

00:27:11,690 --> 00:27:15,110
to see that if it really works so

00:27:12,980 --> 00:27:16,850
because both are implemented in a

00:27:15,110 --> 00:27:18,980
similar patterns both the reactor based

00:27:16,850 --> 00:27:21,529
models one uses a different reactor

00:27:18,980 --> 00:27:23,720
which you can use in twisted two and it

00:27:21,529 --> 00:27:28,519
helps in dealing with the concurrency

00:27:23,720 --> 00:27:30,499
needs so that one that's what I want to

00:27:28,519 --> 00:27:32,330
say hacen like this was a fair overview

00:27:30,499 --> 00:27:34,970
of the whole of the networking libraries

00:27:32,330 --> 00:27:37,340
available and it helps you choose the

00:27:34,970 --> 00:27:40,100
best library for your needs and you have

00:27:37,340 --> 00:27:44,529
a synchronous libraries also which will

00:27:40,100 --> 00:27:44,529
help you implement service thank you

00:27:51,460 --> 00:27:57,159
we've got a couple of minutes for

00:27:53,210 --> 00:27:57,159
questions if anybody wants to ask yeah

00:28:04,120 --> 00:28:08,920
are there any plans for a server name

00:28:06,070 --> 00:28:11,110
indication support in HTTP lib - which

00:28:08,920 --> 00:28:14,470
one i SN I support server name

00:28:11,110 --> 00:28:17,410
indication it's a nice yeah HDPE loop -

00:28:14,470 --> 00:28:23,260
yeah I am Not sure of the extra bleep

00:28:17,410 --> 00:28:25,930
those things but I know I don't know it

00:28:23,260 --> 00:28:28,510
may come in so if you have a s ni

00:28:25,930 --> 00:28:32,020
support in terms of requests in HDB lab

00:28:28,510 --> 00:28:33,580
you can raise a bargain then follow when

00:28:32,020 --> 00:28:43,660
H liebelei by me which is in the part of

00:28:33,580 --> 00:28:44,220
the standard library nothing else that's

00:28:43,660 --> 00:28:46,240
it

00:28:44,220 --> 00:28:49,620
would you say yeah thank you very much

00:28:46,240 --> 00:28:49,620

YouTube URL: https://www.youtube.com/watch?v=xnoW4twC4xo


