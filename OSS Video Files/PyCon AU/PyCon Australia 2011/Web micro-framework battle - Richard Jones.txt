Title: Web micro-framework battle - Richard Jones
Publication date: 2011-08-22
Playlist: PyCon Australia 2011
Description: 
	In this talk I'll be running through the current choices of web micro frameworks and comparing them
by implementing a simple application.
Captions: 
	00:00:00,000 --> 00:00:04,350
okay welcome everyone I'm introducing

00:00:03,060 --> 00:00:07,080
myself because I would a lot to talk

00:00:04,350 --> 00:00:12,420
about and only 45 minutes to talk about

00:00:07,080 --> 00:00:16,199
it in so we'll see how we go this is my

00:00:12,420 --> 00:00:19,680
little talk the web micro framework

00:00:16,199 --> 00:00:23,369
battle that's as exciting as the slides

00:00:19,680 --> 00:00:26,310
get by the way aka I survey the

00:00:23,369 --> 00:00:29,279
landscape so you probably might not have

00:00:26,310 --> 00:00:32,579
to we'll see how we go by way of

00:00:29,279 --> 00:00:34,829
interaction I primarily I work for a

00:00:32,579 --> 00:00:38,190
telco I primarily develop systems for

00:00:34,829 --> 00:00:40,100
routing phone calls and SMS and texts

00:00:38,190 --> 00:00:42,390
the Americans might know them as and

00:00:40,100 --> 00:00:44,670
provisioning phone numbers and things

00:00:42,390 --> 00:00:47,370
like that very exciting stuff I also

00:00:44,670 --> 00:00:48,180
maintain websites but I'm not talking

00:00:47,370 --> 00:00:50,070
about them today

00:00:48,180 --> 00:00:52,620
I'm talking about the lots of little

00:00:50,070 --> 00:00:54,300
discreet systems that I develop for my

00:00:52,620 --> 00:00:56,430
telco work okay

00:00:54,300 --> 00:00:57,930
so I have all these little systems and

00:00:56,430 --> 00:00:59,879
they're all connected through HTTP I

00:00:57,930 --> 00:01:02,190
love connecting things up with HTTP

00:00:59,879 --> 00:01:04,140
because it's nice and simple and it also

00:01:02,190 --> 00:01:06,360
offers the ability for since we've

00:01:04,140 --> 00:01:08,400
already got HTTP there we can make a

00:01:06,360 --> 00:01:10,799
very very very simple user interface on

00:01:08,400 --> 00:01:14,220
top of my little systems to Poquette

00:01:10,799 --> 00:01:17,070
them see how they're going okay so HTTP

00:01:14,220 --> 00:01:19,320
is my kind of RPC layer for having

00:01:17,070 --> 00:01:21,119
systems talk to each other so I end up

00:01:19,320 --> 00:01:24,210
writing all these little HTTP systems

00:01:21,119 --> 00:01:26,580
all the time and over the period of the

00:01:24,210 --> 00:01:29,549
last kind of 12 years or so that I've

00:01:26,580 --> 00:01:31,590
been doing PI through 12 15 years I've

00:01:29,549 --> 00:01:35,460
written at least half a dozen little

00:01:31,590 --> 00:01:36,780
micro frameworks so it occurred to me

00:01:35,460 --> 00:01:39,390
that I probably should stop doing that

00:01:36,780 --> 00:01:41,159
and start using somebody else's because

00:01:39,390 --> 00:01:43,470
they'll be more robust and maybe a

00:01:41,159 --> 00:01:45,899
little bit more feature full so I

00:01:43,470 --> 00:01:48,030
started looking at the landscape and I

00:01:45,899 --> 00:01:49,740
started looking at specific elements of

00:01:48,030 --> 00:01:51,450
these frameworks to figure out which one

00:01:49,740 --> 00:01:53,280
would probably be best for me

00:01:51,450 --> 00:01:54,720
and I'm talking about what's best for me

00:01:53,280 --> 00:01:58,290
here everybody will have different

00:01:54,720 --> 00:02:02,490
criteria and that will become apparent I

00:01:58,290 --> 00:02:05,280
hope so what's the standard library as

00:02:02,490 --> 00:02:07,220
you will for the micro frameworks that

00:02:05,280 --> 00:02:10,020
I'm looking at

00:02:07,220 --> 00:02:11,850
kind of the really most important thing

00:02:10,020 --> 00:02:14,040
is I don't have to spend time figuring

00:02:11,850 --> 00:02:15,810
out how the thing works okay it's got to

00:02:14,040 --> 00:02:18,920
be really obvious really good

00:02:15,810 --> 00:02:22,110
well-documented a minimum of magic

00:02:18,920 --> 00:02:23,880
there's got to be no surprises in how it

00:02:22,110 --> 00:02:26,459
does things and it's gotta be terse I

00:02:23,880 --> 00:02:28,500
don't have to type a lot just to make my

00:02:26,459 --> 00:02:30,440
application work as a web service it's

00:02:28,500 --> 00:02:33,000
just got to be really quick and easy

00:02:30,440 --> 00:02:36,900
it's got a handle all the HTTP stuff

00:02:33,000 --> 00:02:39,480
obviously handle form requests it's got

00:02:36,900 --> 00:02:41,130
to do the URL routing so requests are

00:02:39,480 --> 00:02:43,500
sent off to the right bit of code and

00:02:41,130 --> 00:02:45,300
again with a minimum of fuss I like

00:02:43,500 --> 00:02:46,170
restful approach of things so it's got

00:02:45,300 --> 00:02:48,840
to be able to distinguish between

00:02:46,170 --> 00:02:54,000
different types of HTTP or methods in

00:02:48,840 --> 00:02:56,160
the requests and whiskey is nice because

00:02:54,000 --> 00:02:57,540
it allows me to plug in a few law bits

00:02:56,160 --> 00:02:59,220
of middleware that we've developed for

00:02:57,540 --> 00:03:01,560
handling database connections and things

00:02:59,220 --> 00:03:03,959
and it's nice to be able to then plug it

00:03:01,560 --> 00:03:06,380
into other web servers down the track so

00:03:03,959 --> 00:03:06,380
that's nice

00:03:06,739 --> 00:03:11,340
support for pipe a is really good

00:03:09,780 --> 00:03:12,840
we've got a bunch of our servers that do

00:03:11,340 --> 00:03:14,730
a hole at a number crunching or word

00:03:12,840 --> 00:03:16,260
crunching as well and we're starting to

00:03:14,730 --> 00:03:17,670
migrate those over to using pi PI

00:03:16,260 --> 00:03:19,739
because it's really really really fast

00:03:17,670 --> 00:03:22,440
so supporting pi pi is really good

00:03:19,739 --> 00:03:23,459
supporting Python 3 is something I

00:03:22,440 --> 00:03:25,440
chucked in there because it's not

00:03:23,459 --> 00:03:26,970
actually a requirement for me but I

00:03:25,440 --> 00:03:31,950
thought I'd see how they all go anyway

00:03:26,970 --> 00:03:34,079
just to see where they're all at one

00:03:31,950 --> 00:03:35,640
thing about the docs downloadable

00:03:34,079 --> 00:03:37,880
documentation is really good I do a lot

00:03:35,640 --> 00:03:39,720
of offline development so if they have

00:03:37,880 --> 00:03:42,720
downloadable documentation that's a

00:03:39,720 --> 00:03:47,549
bonus as well okay the things that are

00:03:42,720 --> 00:03:49,500
out I don't care about other m's the

00:03:47,549 --> 00:03:53,220
stuff that I do typically we're writing

00:03:49,500 --> 00:03:55,320
code that's very fairly simple and we

00:03:53,220 --> 00:03:57,900
like having explicit SQL in our code we

00:03:55,320 --> 00:04:00,720
don't want to have the magic of an ORM

00:03:57,900 --> 00:04:04,459
layer abstracting away what the SQL is

00:04:00,720 --> 00:04:08,130
actually doing so we like having direct

00:04:04,459 --> 00:04:11,430
direct SQL so any sort of database wrap

00:04:08,130 --> 00:04:13,560
a really DB API directly there's an

00:04:11,430 --> 00:04:16,979
extension module for DB API called

00:04:13,560 --> 00:04:17,580
db-api ext which is actually quite nice

00:04:16,979 --> 00:04:19,560
as well

00:04:17,580 --> 00:04:20,519
it extends kind of the functionality of

00:04:19,560 --> 00:04:22,139
DB API

00:04:20,519 --> 00:04:25,800
we use that a little bit but it doesn't

00:04:22,139 --> 00:04:28,199
obscure the SQL in any way it's girl

00:04:25,800 --> 00:04:30,060
alchemy also works so if we do end up

00:04:28,199 --> 00:04:31,949
extending things to using that then

00:04:30,060 --> 00:04:35,000
that's fine too but I don't need a

00:04:31,949 --> 00:04:36,949
framework to supply the database layer I

00:04:35,000 --> 00:04:39,660
don't care about templating either

00:04:36,949 --> 00:04:42,060
because generally I don't have a complex

00:04:39,660 --> 00:04:43,889
user interface and if I do end up

00:04:42,060 --> 00:04:45,389
needing templating then there's tons of

00:04:43,889 --> 00:04:46,860
template engines out there I don't need

00:04:45,389 --> 00:04:50,400
the framework to give me a template

00:04:46,860 --> 00:04:51,960
engine so the things that are out all

00:04:50,400 --> 00:04:55,050
the mega frameworks I don't care about

00:04:51,960 --> 00:04:57,000
those there's too much baggage you can't

00:04:55,050 --> 00:04:59,099
get a trivial little application that

00:04:57,000 --> 00:05:03,449
I've written wrapped and presentable as

00:04:59,099 --> 00:05:05,130
HTTP using any of these things cubic web

00:05:03,449 --> 00:05:08,610
popped up recently I'd never heard of it

00:05:05,130 --> 00:05:11,490
Miller is a new one it's too young

00:05:08,610 --> 00:05:14,900
there's bits missing pump came in too

00:05:11,490 --> 00:05:17,820
late to be included and I did actually

00:05:14,900 --> 00:05:20,159
evaluate combining routes and we're bob

00:05:17,820 --> 00:05:23,880
but the result was too complicated so

00:05:20,159 --> 00:05:26,490
I'm not presenting that today okay so

00:05:23,880 --> 00:05:28,729
what I did to evaluate them all was I

00:05:26,490 --> 00:05:33,659
developed a trivial little application a

00:05:28,729 --> 00:05:36,060
wiki so I developed a core of the

00:05:33,659 --> 00:05:39,000
application that handles the storage and

00:05:36,060 --> 00:05:40,530
the generation of HTML to present to the

00:05:39,000 --> 00:05:42,240
user that's kind of like the core of

00:05:40,530 --> 00:05:45,330
what the application does so then the

00:05:42,240 --> 00:05:48,719
frameworks then just have to handle the

00:05:45,330 --> 00:05:51,539
HTTP part and sending information to and

00:05:48,719 --> 00:05:54,030
from the user okay so the wiki has a

00:05:51,539 --> 00:05:55,259
very simple structure we have get a page

00:05:54,030 --> 00:05:58,440
and display it to the user

00:05:55,259 --> 00:05:59,849
we have editing a page and you know

00:05:58,440 --> 00:06:00,330
presenting the form and handling the

00:05:59,849 --> 00:06:03,360
form

00:06:00,330 --> 00:06:06,270
I also added in I also implemented a

00:06:03,360 --> 00:06:08,190
history view and reversion view to kind

00:06:06,270 --> 00:06:10,860
of reinforce the frameworks approach but

00:06:08,190 --> 00:06:12,680
it's not included in the slides today

00:06:10,860 --> 00:06:14,969
because it's just extraneous and it was

00:06:12,680 --> 00:06:18,300
it's not interesting to present that

00:06:14,969 --> 00:06:20,729
today it's got to handle redirects and

00:06:18,300 --> 00:06:23,250
not founds so if the framework doesn't

00:06:20,729 --> 00:06:27,599
handle getting the fav icon sanely then

00:06:23,250 --> 00:06:28,830
that's not good okay so these are the

00:06:27,599 --> 00:06:30,779
contenders these are the ones that are

00:06:28,830 --> 00:06:33,169
actually evaluated I did actually

00:06:30,779 --> 00:06:37,009
evaluate web 2 pi and

00:06:33,169 --> 00:06:40,550
and route somewhere Bob but I gave up on

00:06:37,009 --> 00:06:41,840
the first two very quickly and as I say

00:06:40,550 --> 00:06:43,819
I did route somewhere Bob but it was

00:06:41,840 --> 00:06:47,060
just too verbose so it's out so there's

00:06:43,819 --> 00:06:50,180
10 left CJ and whiskey ref refers to the

00:06:47,060 --> 00:06:51,710
standard Python library so there's 10

00:06:50,180 --> 00:06:53,719
and all and the top one is my kind of

00:06:51,710 --> 00:06:57,409
baseline if something's harder than that

00:06:53,719 --> 00:06:58,279
then it's not worth looking at and again

00:06:57,409 --> 00:06:59,840
the criteria

00:06:58,279 --> 00:07:02,659
it's got to be documented easy to use

00:06:59,840 --> 00:07:04,189
minimum magic restful whisky Python

00:07:02,659 --> 00:07:06,800
Terriers now as PI players awesome

00:07:04,189 --> 00:07:09,110
minimum amount of typing and also the

00:07:06,800 --> 00:07:10,610
size of the framework itself lines of

00:07:09,110 --> 00:07:12,740
code in the framework that I have to

00:07:10,610 --> 00:07:14,689
poke into when the framework Docs let me

00:07:12,740 --> 00:07:20,479
down that's an important consideration

00:07:14,689 --> 00:07:23,509
as well okay so straight in CGI and Wiz

00:07:20,479 --> 00:07:25,400
Gear F awesome documentation it's in the

00:07:23,509 --> 00:07:26,900
standard library it's got really good

00:07:25,400 --> 00:07:30,979
documentation and it's pretty easy to

00:07:26,900 --> 00:07:32,330
use there's a lot of typing but it's

00:07:30,979 --> 00:07:34,639
actually not that hard there's a reason

00:07:32,330 --> 00:07:36,979
why I kept writing my own web frameworks

00:07:34,639 --> 00:07:40,580
because it's so easy but there's no

00:07:36,979 --> 00:07:42,849
extras there's also no magic it's not

00:07:40,580 --> 00:07:45,680
restful because there's no application

00:07:42,849 --> 00:07:47,240
but it does do whiskey when you write

00:07:45,680 --> 00:07:50,270
your own application that is so that's

00:07:47,240 --> 00:07:52,370
nice so you do have to write your own

00:07:50,270 --> 00:07:54,409
web application and again this is why I

00:07:52,370 --> 00:07:57,080
keep writing my own because this is it

00:07:54,409 --> 00:08:00,979
this is a web application this is a

00:07:57,080 --> 00:08:05,569
micro framework basically it handles the

00:08:00,979 --> 00:08:07,129
whiskey part so generating a response

00:08:05,569 --> 00:08:09,740
and accepting the arguments and

00:08:07,129 --> 00:08:12,620
generating a response and it can farm

00:08:09,740 --> 00:08:15,439
off requests to a URL to handlers based

00:08:12,620 --> 00:08:18,020
on the incoming URL and request method

00:08:15,439 --> 00:08:20,120
we'll see the pattern or switch see the

00:08:18,020 --> 00:08:23,870
content of URLs later it's basically

00:08:20,120 --> 00:08:27,199
just a URL pattern a request method and

00:08:23,870 --> 00:08:28,279
something to call if it's a match so

00:08:27,199 --> 00:08:30,860
it's really easy and then we've got some

00:08:28,279 --> 00:08:33,199
handling of exceptions so if there's no

00:08:30,860 --> 00:08:34,969
match not found handled a not found

00:08:33,199 --> 00:08:38,930
exception and redirect exception and why

00:08:34,969 --> 00:08:44,149
we go the actual application itself is

00:08:38,930 --> 00:08:46,720
pretty simple hitting no URL we redirect

00:08:44,149 --> 00:08:46,720
to front page

00:08:46,980 --> 00:08:51,699
rendering a page is straightforward if

00:08:49,629 --> 00:08:53,470
it's not a wiki name then we raise not

00:08:51,699 --> 00:08:56,050
found otherwise we return the page

00:08:53,470 --> 00:08:58,540
rendered the or the Edit form rendered

00:08:56,050 --> 00:09:01,360
or handle the edit now you can see

00:08:58,540 --> 00:09:03,459
obviously when we handle the Edit we

00:09:01,360 --> 00:09:06,069
have to manually invoke the CGI module

00:09:03,459 --> 00:09:08,410
to actually pull apart the request

00:09:06,069 --> 00:09:10,060
that's coming in but that's again it's

00:09:08,410 --> 00:09:14,139
pretty straightforward that's mentioned

00:09:10,060 --> 00:09:15,459
in the documentation and it's not a lot

00:09:14,139 --> 00:09:16,899
of work and I could probably actually

00:09:15,459 --> 00:09:18,699
farm this off to the top level

00:09:16,899 --> 00:09:22,300
application and handle this in all cases

00:09:18,699 --> 00:09:24,550
and pass the form data in so again this

00:09:22,300 --> 00:09:28,120
is why I keep writing my own framework

00:09:24,550 --> 00:09:29,920
but it is pretty bare-bones these call

00:09:28,120 --> 00:09:33,759
levels are then listed in the URLs

00:09:29,920 --> 00:09:37,420
listing again URL map pattern the

00:09:33,759 --> 00:09:39,339
request method and the call level and

00:09:37,420 --> 00:09:43,509
then we serve that with simple server

00:09:39,339 --> 00:09:46,779
and that's it pretty simple and

00:09:43,509 --> 00:09:51,059
straightforward so let's see what the

00:09:46,779 --> 00:09:54,040
actual frameworks give us on top of that

00:09:51,059 --> 00:09:55,809
the first one I looked at was Bobo and I

00:09:54,040 --> 00:09:58,329
looked at Bobo first because I've got a

00:09:55,809 --> 00:10:00,399
bit of a history with Bobo Bobo started

00:09:58,329 --> 00:10:03,399
out life as this awesome object

00:10:00,399 --> 00:10:05,079
publishing system back in the 90s it was

00:10:03,399 --> 00:10:07,990
one of the first it was great it was

00:10:05,079 --> 00:10:10,300
basically taken an object tree of Python

00:10:07,990 --> 00:10:13,059
objects and publish it to the web Parrs

00:10:10,300 --> 00:10:15,970
a URL looking for attributes and items

00:10:13,059 --> 00:10:19,559
on these objects and display the result

00:10:15,970 --> 00:10:23,019
to the user it was great it became zouk

00:10:19,559 --> 00:10:25,600
then zouk grew and Bobo kind of got

00:10:23,019 --> 00:10:29,350
tainted along the way so Bobo now isn't

00:10:25,600 --> 00:10:30,970
Sam's Bobo then unfortunately the

00:10:29,350 --> 00:10:32,680
documentation for Bobo is kind of

00:10:30,970 --> 00:10:34,199
limited and it's very much focused on

00:10:32,680 --> 00:10:36,550
the Bobo way of doing things

00:10:34,199 --> 00:10:38,050
it wasn't straightforward it took me

00:10:36,550 --> 00:10:41,500
quite a long time to figure out how it

00:10:38,050 --> 00:10:45,519
worked and I couldn't just create an app

00:10:41,500 --> 00:10:47,709
and publish it and we'll get to that so

00:10:45,519 --> 00:10:50,139
this is kind of what the index the

00:10:47,709 --> 00:10:53,439
top-level index function looks like in

00:10:50,139 --> 00:10:55,600
Bobo and this is basically saying if we

00:10:53,439 --> 00:10:57,580
match a URL that's just a slash then

00:10:55,600 --> 00:11:01,000
call this thing and then

00:10:57,580 --> 00:11:02,710
return the Bobo redirect Bobo here is

00:11:01,000 --> 00:11:07,240
the module by the way I've imported Bobo

00:11:02,710 --> 00:11:09,100
and this is the module this gave me some

00:11:07,240 --> 00:11:10,840
weird transient errors like I would end

00:11:09,100 --> 00:11:13,720
up being redirected to slash front page

00:11:10,840 --> 00:11:16,120
slash but then I'd restart it and didn't

00:11:13,720 --> 00:11:19,360
anymore and I have no idea why so that

00:11:16,120 --> 00:11:21,280
was weird and there's no redirect

00:11:19,360 --> 00:11:22,420
exception I like raising redirects as

00:11:21,280 --> 00:11:24,160
exceptions because you can do it way

00:11:22,420 --> 00:11:25,210
down deep in your code you say redirect

00:11:24,160 --> 00:11:28,210
and you don't have to worry about

00:11:25,210 --> 00:11:31,120
returning it all the way back up so that

00:11:28,210 --> 00:11:33,520
was that was a shame on the other hand

00:11:31,120 --> 00:11:39,880
you can raise not found so it's kind of

00:11:33,520 --> 00:11:42,310
weird this is where it got confusing so

00:11:39,880 --> 00:11:45,550
the first first example is simply Bobo

00:11:42,310 --> 00:11:48,730
query and here's the pattern to handle

00:11:45,550 --> 00:11:51,580
the /name part of the URL I've got to do

00:11:48,730 --> 00:11:56,770
a sub route so what is basically saying

00:11:51,580 --> 00:11:58,600
is if the URL matches /name then

00:11:56,770 --> 00:12:01,000
instantiate one of these objects and

00:11:58,600 --> 00:12:02,350
pass the name in as an argument to what

00:12:01,000 --> 00:12:04,000
you're creating it could also be a

00:12:02,350 --> 00:12:05,200
function I believe but in this case I'm

00:12:04,000 --> 00:12:08,290
creating an object which is then

00:12:05,200 --> 00:12:11,050
published and then it uses the rest of

00:12:08,290 --> 00:12:12,670
the URL it passes the rest of the URL to

00:12:11,050 --> 00:12:14,620
look for things on that object to

00:12:12,670 --> 00:12:17,320
publish so if the rest of the URL is

00:12:14,620 --> 00:12:20,440
blank we return the page itself so

00:12:17,320 --> 00:12:24,760
that's a slash page name but otherwise

00:12:20,440 --> 00:12:27,430
we've stored name off on the object the

00:12:24,760 --> 00:12:33,220
says scan thing there if I don't specify

00:12:27,430 --> 00:12:36,100
scan I got this bizarro error that was

00:12:33,220 --> 00:12:38,290
just opaque as all hell so I had to put

00:12:36,100 --> 00:12:45,010
scan in and we'll get back to the why

00:12:38,290 --> 00:12:47,140
exactly why in a moment really yeah and

00:12:45,010 --> 00:12:49,030
the docs weren't clear the docs seemed

00:12:47,140 --> 00:12:51,850
to imply that if I didn't if I just had

00:12:49,030 --> 00:12:54,340
Bobo dot query it would publish a thing

00:12:51,850 --> 00:12:55,870
called index but that didn't happen at

00:12:54,340 --> 00:12:58,060
all I had to actually specify an

00:12:55,870 --> 00:12:59,800
explicit name every time for Bobo got

00:12:58,060 --> 00:13:02,360
query

00:12:59,800 --> 00:13:06,020
here these are two more methods on that

00:13:02,360 --> 00:13:08,060
object so edit and post do edit so these

00:13:06,020 --> 00:13:10,760
are then handling slash page name slash

00:13:08,060 --> 00:13:13,130
edit and then and and doing you know

00:13:10,760 --> 00:13:15,140
that sort of stuff so there's actually a

00:13:13,130 --> 00:13:17,690
bug in this slide that should be render

00:13:15,140 --> 00:13:22,310
edit form self name that's my fault

00:13:17,690 --> 00:13:24,890
in editing the slide and then later on

00:13:22,310 --> 00:13:27,740
of course handling the post nice thing

00:13:24,890 --> 00:13:29,930
about Bobo is that the form variables

00:13:27,740 --> 00:13:32,060
are pulled out of the request based on

00:13:29,930 --> 00:13:33,590
the function signature so that's really

00:13:32,060 --> 00:13:35,750
nice I don't have to manually look at

00:13:33,590 --> 00:13:38,270
some sort of form object to find the

00:13:35,750 --> 00:13:40,970
things I'm looking for and that's really

00:13:38,270 --> 00:13:43,280
nice and that was a feature in the very

00:13:40,970 --> 00:13:45,460
very first Bobo as well so it was it's

00:13:43,280 --> 00:13:47,660
what was way ahead of its time

00:13:45,460 --> 00:13:49,520
another really odd thing is notice I

00:13:47,660 --> 00:13:50,510
have to specify get in post even so even

00:13:49,520 --> 00:13:53,540
though I'm saying

00:13:50,510 --> 00:13:56,120
Bobo dot post and Bobo dot query if I

00:13:53,540 --> 00:14:00,250
don't specify the request method

00:13:56,120 --> 00:14:00,250
Bobo drop host handles both get in post

00:14:01,360 --> 00:14:07,970
yes so that's weird it gets weirder to

00:14:04,790 --> 00:14:10,040
actually make this serve HTTP I do this

00:14:07,970 --> 00:14:13,010
I import Bobo server and I say Bobo

00:14:10,040 --> 00:14:21,050
server dot serve in the list - F file

00:14:13,010 --> 00:14:22,760
name your what now yeah so we're

00:14:21,050 --> 00:14:24,550
publishing the module file we're not

00:14:22,760 --> 00:14:28,730
publishing the object I've just created

00:14:24,550 --> 00:14:29,990
it I mean is pretty wacky there doesn't

00:14:28,730 --> 00:14:33,740
appear to be any way of getting a

00:14:29,990 --> 00:14:36,770
whiskey app out of Bobo you can use

00:14:33,740 --> 00:14:39,170
paste deploy to kind of construct a

00:14:36,770 --> 00:14:40,370
whiskey app but paste is port deploy is

00:14:39,170 --> 00:14:42,020
quite opaque and it's a whole other

00:14:40,370 --> 00:14:43,520
level of configuration and installation

00:14:42,020 --> 00:14:48,200
and stuff I didn't have to deal with

00:14:43,520 --> 00:14:49,490
just for was a simple web app so I poked

00:14:48,200 --> 00:14:51,440
around the source for ages trying to

00:14:49,490 --> 00:14:56,630
figure out how to make this work and I

00:14:51,440 --> 00:14:59,600
just couldn't so weird okay the next one

00:14:56,630 --> 00:15:01,790
I looked at was cherry pie and it

00:14:59,600 --> 00:15:06,020
actually is quite similar to Bobo in

00:15:01,790 --> 00:15:08,420
some respects but only after you tweak

00:15:06,020 --> 00:15:09,530
it a little bit by default cherry pie is

00:15:08,420 --> 00:15:12,050
not restitch

00:15:09,530 --> 00:15:12,920
it doesn't do any distinction in its URL

00:15:12,050 --> 00:15:14,689
hand

00:15:12,920 --> 00:15:17,209
sorry it's request handling to

00:15:14,689 --> 00:15:19,910
distinguish between get and post you can

00:15:17,209 --> 00:15:25,279
get that by changing the Dastak default

00:15:19,910 --> 00:15:26,899
dispatcher to be method dispatcher the

00:15:25,279 --> 00:15:29,089
downside is that your only documentation

00:15:26,899 --> 00:15:30,739
about this method dispatcher is quite

00:15:29,089 --> 00:15:32,540
light on and I actually had to start

00:15:30,739 --> 00:15:37,089
guessing at some things fortunately I

00:15:32,540 --> 00:15:39,350
guess right but it was a bit disturbing

00:15:37,089 --> 00:15:41,569
on the other hand the docs used Sphinx

00:15:39,350 --> 00:15:43,189
which is nice it's no all of anything

00:15:41,569 --> 00:15:47,119
that uses Sphinx for documentation gets

00:15:43,189 --> 00:15:48,889
a plus one really so this is what cherry

00:15:47,119 --> 00:15:50,989
pie looks the cherry pie application

00:15:48,889 --> 00:15:52,639
looks like and like in Bobo where we did

00:15:50,989 --> 00:15:54,859
that supper out thing we're doing a

00:15:52,639 --> 00:15:57,589
cherry pie pop ugh which is basically

00:15:54,859 --> 00:16:00,559
saying the first bit of the URL pop that

00:15:57,589 --> 00:16:02,600
off is name the weird thing is if the

00:16:00,559 --> 00:16:06,470
first bit of the URL isn't there then

00:16:02,600 --> 00:16:11,720
you just get no name passed into the get

00:16:06,470 --> 00:16:13,850
method so it's basically each segment of

00:16:11,720 --> 00:16:16,549
the URL is handled by an object which

00:16:13,850 --> 00:16:20,899
has get and post and whatever other HTTP

00:16:16,549 --> 00:16:23,600
methods on it and then sub components of

00:16:20,899 --> 00:16:26,689
the URL are handled by other attributes

00:16:23,600 --> 00:16:31,489
on the class so slash name slash is

00:16:26,689 --> 00:16:33,350
handled by the wiki Edit object exposed

00:16:31,489 --> 00:16:34,790
is a funny thing it can be done in a

00:16:33,350 --> 00:16:36,589
bunch of different ways using a

00:16:34,790 --> 00:16:39,619
decorator using a manual function

00:16:36,589 --> 00:16:41,839
attribute assignment and it's not it all

00:16:39,619 --> 00:16:43,279
client clearly explained in one place it

00:16:41,839 --> 00:16:48,049
took me a while to figure out the

00:16:43,279 --> 00:16:51,110
different ways you can do exposed so

00:16:48,049 --> 00:16:53,269
this is the Edit and again it's when

00:16:51,110 --> 00:16:54,980
cherry pie is URL pausing hits this

00:16:53,269 --> 00:16:56,899
object it's just looking for a get or a

00:16:54,980 --> 00:17:03,709
post method to handle the get and post

00:16:56,899 --> 00:17:05,389
of the of the request and like Bobo it

00:17:03,709 --> 00:17:06,769
automatically says look the function has

00:17:05,389 --> 00:17:08,689
these arguments try and pull those out

00:17:06,769 --> 00:17:09,740
of the form submission and so that's

00:17:08,689 --> 00:17:11,839
really nice as well

00:17:09,740 --> 00:17:14,360
all it does kind of mix then the URL

00:17:11,839 --> 00:17:16,789
component and the form components which

00:17:14,360 --> 00:17:20,059
is a bit strange but I think it's okay

00:17:16,789 --> 00:17:22,039
actually it's that's okay the funky bit

00:17:20,059 --> 00:17:25,159
is how we get the method dispatcher

00:17:22,039 --> 00:17:26,460
going so I basically had to copy and

00:17:25,159 --> 00:17:28,020
paste this straight out of the

00:17:26,460 --> 00:17:30,770
commentation because I don't think I

00:17:28,020 --> 00:17:33,120
could have figured it out by myself I

00:17:30,770 --> 00:17:35,100
honestly don't know what else can go in

00:17:33,120 --> 00:17:37,530
this configuration thing because I don't

00:17:35,100 --> 00:17:40,460
want to have to know just to make this

00:17:37,530 --> 00:17:42,990
application work this is bordering on

00:17:40,460 --> 00:17:46,020
too much work to make my little

00:17:42,990 --> 00:17:48,030
application work but it does do what I

00:17:46,020 --> 00:17:50,280
need it to do which is to change the the

00:17:48,030 --> 00:17:52,020
dispatcher to what I need it to do and

00:17:50,280 --> 00:17:53,820
then to fire off the server I just call

00:17:52,020 --> 00:17:56,130
Quick Start and I can get a whiskey

00:17:53,820 --> 00:18:00,540
application out of that by accessing a

00:17:56,130 --> 00:18:01,380
sub attribute and that's all good

00:18:00,540 --> 00:18:03,360
one of the things that's nice about

00:18:01,380 --> 00:18:05,250
cherry pie is for development it does

00:18:03,360 --> 00:18:07,830
automatic code reloading when you change

00:18:05,250 --> 00:18:09,930
code on disk so that's really nice and

00:18:07,830 --> 00:18:12,750
it all up cherry pie is not to complex

00:18:09,930 --> 00:18:15,840
but this config thing you know kind of

00:18:12,750 --> 00:18:18,390
sullied a little bit there's a bit of

00:18:15,840 --> 00:18:20,430
magic the request object if you have to

00:18:18,390 --> 00:18:23,070
access it is a global variable in the

00:18:20,430 --> 00:18:26,000
cherry pie module that's fairly common

00:18:23,070 --> 00:18:29,070
actually which is just kind of weird

00:18:26,000 --> 00:18:31,500
there's obviously some incredibly fun

00:18:29,070 --> 00:18:35,700
thread-local stuff going on to make that

00:18:31,500 --> 00:18:39,390
work so yeah all right so that's cherry

00:18:35,700 --> 00:18:41,070
pie it's pretty good web pie web drop I

00:18:39,390 --> 00:18:43,530
had a really good website and it was

00:18:41,070 --> 00:18:45,090
really easy to get going it has a

00:18:43,530 --> 00:18:47,010
slightly different approach it's like

00:18:45,090 --> 00:18:51,150
cherry pie in that you've got the HTTP

00:18:47,010 --> 00:18:55,230
method on objects but it splits out to a

00:18:51,150 --> 00:18:57,390
sling another level again the the

00:18:55,230 --> 00:18:59,100
mapping of the URLs to the actual

00:18:57,390 --> 00:19:00,990
classes that are being published so the

00:18:59,100 --> 00:19:03,210
bare URL is handled by one class and

00:19:00,990 --> 00:19:06,960
then slash page name handled by another

00:19:03,210 --> 00:19:09,030
class and then edit is handled by yet

00:19:06,960 --> 00:19:14,270
another class which is pretty much like

00:19:09,030 --> 00:19:17,580
cherry pie so this is the the Edit one

00:19:14,270 --> 00:19:20,070
web pie has this forms thing built into

00:19:17,580 --> 00:19:23,580
it which is seems neat until you start

00:19:20,070 --> 00:19:26,160
using it it doesn't submit for it

00:19:23,580 --> 00:19:27,510
doesn't handle submit buttons like if

00:19:26,160 --> 00:19:29,280
you have a submit button in your form

00:19:27,510 --> 00:19:32,130
you can't configure it into the forms

00:19:29,280 --> 00:19:34,920
thing to actually handle input it's kind

00:19:32,130 --> 00:19:36,390
of weird and so for the case that I'm

00:19:34,920 --> 00:19:38,520
doing here I actually just ended up

00:19:36,390 --> 00:19:42,420
accessing the form data directly

00:19:38,520 --> 00:19:45,480
directly in webtop is not directly it's

00:19:42,420 --> 00:19:47,130
through this bizarro web input call here

00:19:45,480 --> 00:19:48,570
which is saying there's always a Content

00:19:47,130 --> 00:19:52,650
variable and sometimes a submitting

00:19:48,570 --> 00:19:55,620
cancel and then you get this bizarro

00:19:52,650 --> 00:19:58,380
object back I'd delve into the source to

00:19:55,620 --> 00:20:03,750
figure out how that even worked so yeah

00:19:58,380 --> 00:20:06,900
bit let down there and then so I've got

00:20:03,750 --> 00:20:10,020
my three classes to serve those I do a

00:20:06,900 --> 00:20:12,390
mapping between the URL and wait a

00:20:10,020 --> 00:20:15,750
second that's a URL and a string the

00:20:12,390 --> 00:20:17,700
name of the class and then I look up the

00:20:15,750 --> 00:20:22,020
actual class by looking in a mapping

00:20:17,700 --> 00:20:24,690
which is Global's I didn't like this at

00:20:22,020 --> 00:20:26,700
all and the the mapping is this flat

00:20:24,690 --> 00:20:29,970
tupple it's like we'll just take the

00:20:26,700 --> 00:20:33,270
pairs in a tuple as we go it's just the

00:20:29,970 --> 00:20:38,640
most bizarre structure is it can't blew

00:20:33,270 --> 00:20:41,760
me away when I first saw it so yeah oh

00:20:38,640 --> 00:20:44,670
and an input function by the way that's

00:20:41,760 --> 00:20:46,860
another module global so I don't know

00:20:44,670 --> 00:20:50,450
how that works it's like the module

00:20:46,860 --> 00:20:52,800
global you know requests it's just magic

00:20:50,450 --> 00:20:54,870
you can get a whiskey function out of

00:20:52,800 --> 00:20:57,660
this it's kind of hidden away but

00:20:54,870 --> 00:20:59,670
basically app dot whiskey func will give

00:20:57,660 --> 00:21:01,650
you a whiskey thing that can be

00:20:59,670 --> 00:21:03,840
published the nice thing about web hires

00:21:01,650 --> 00:21:06,000
is a bunch of extras so sessions and

00:21:03,840 --> 00:21:07,410
open ID and utilities and there's some

00:21:06,000 --> 00:21:09,030
templating in there that I don't care

00:21:07,410 --> 00:21:10,890
about and form handling which I couldn't

00:21:09,030 --> 00:21:13,380
get working and there's a DB abstraction

00:21:10,890 --> 00:21:16,050
which I just didn't look into it all but

00:21:13,380 --> 00:21:17,970
there is a bunch of stuff there the next

00:21:16,050 --> 00:21:20,580
one I looked at was bottle now this is

00:21:17,970 --> 00:21:24,090
kind of the the first of a few that look

00:21:20,580 --> 00:21:27,360
very similar bottle is pretty

00:21:24,090 --> 00:21:29,130
straightforward I've imported a bunch of

00:21:27,360 --> 00:21:31,560
stuff from the bottle module so get

00:21:29,130 --> 00:21:33,000
redirect abort they're all straight from

00:21:31,560 --> 00:21:36,090
the bottle module so you basically say

00:21:33,000 --> 00:21:36,930
from bottle import get for post redirect

00:21:36,090 --> 00:21:39,330
not found

00:21:36,930 --> 00:21:41,340
sorry abort and a few other things

00:21:39,330 --> 00:21:45,960
redirect raises a redirect exception

00:21:41,340 --> 00:21:49,470
abort raises are not found get slash

00:21:45,960 --> 00:21:51,600
says match a get request for slash match

00:21:49,470 --> 00:21:54,690
a get request for slash name

00:21:51,600 --> 00:21:56,580
I mean this is this is really really

00:21:54,690 --> 00:21:59,790
simple the docs are really good

00:21:56,580 --> 00:22:02,480
straightforward downloadable the

00:21:59,790 --> 00:22:05,970
implementation is a single Python file

00:22:02,480 --> 00:22:10,380
it's really easy to use there is some

00:22:05,970 --> 00:22:13,020
global magic for request and response it

00:22:10,380 --> 00:22:15,360
does have these first-class you know get

00:22:13,020 --> 00:22:17,430
and post decorators which I think are is

00:22:15,360 --> 00:22:21,720
or are awesome and that's configuring an

00:22:17,430 --> 00:22:23,340
application as it goes its configuring a

00:22:21,720 --> 00:22:25,620
default application but you can create

00:22:23,340 --> 00:22:28,320
your own application and configure that

00:22:25,620 --> 00:22:30,960
separately so you can configure multiple

00:22:28,320 --> 00:22:33,330
applications if you like it's just

00:22:30,960 --> 00:22:38,250
making the kind of the default usage so

00:22:33,330 --> 00:22:40,260
much simpler request dot post has the

00:22:38,250 --> 00:22:42,780
posted form variables there's also a

00:22:40,260 --> 00:22:44,910
request dot params which combines get

00:22:42,780 --> 00:22:46,890
and post very variables into one and

00:22:44,910 --> 00:22:49,200
there's a few other access methods as

00:22:46,890 --> 00:22:55,490
well so that's really nice and this is

00:22:49,200 --> 00:22:59,190
just really straightforward I think and

00:22:55,490 --> 00:23:02,280
to serve it run again imported from

00:22:59,190 --> 00:23:03,840
bottle and I had to look into the source

00:23:02,280 --> 00:23:07,050
but there is a whiskey app that you can

00:23:03,840 --> 00:23:11,190
access to that's just the default app

00:23:07,050 --> 00:23:12,690
whiskey it also has this concept of an

00:23:11,190 --> 00:23:13,620
app stack but I didn't look into that

00:23:12,690 --> 00:23:16,710
and I'm not really sure what the point

00:23:13,620 --> 00:23:19,500
is it does have some extras there's

00:23:16,710 --> 00:23:21,150
serving of static files some adapters to

00:23:19,500 --> 00:23:22,410
other projects there's a simple

00:23:21,150 --> 00:23:24,930
templating engine which I've actually

00:23:22,410 --> 00:23:26,340
used and a bunch of convenience

00:23:24,930 --> 00:23:28,140
functions but it also has wrappers to

00:23:26,340 --> 00:23:31,620
other templating engines as well and

00:23:28,140 --> 00:23:33,750
this is the entirety of my application

00:23:31,620 --> 00:23:36,630
not counting of course the core wiki

00:23:33,750 --> 00:23:39,960
implementation I mean that's not much

00:23:36,630 --> 00:23:41,420
typing and that's what I'm after that's

00:23:39,960 --> 00:23:45,450
pretty cool

00:23:41,420 --> 00:23:49,800
ét he's really similar to bottle I mean

00:23:45,450 --> 00:23:52,560
look at this get slash get pattern raise

00:23:49,800 --> 00:23:54,720
redirect raise not found that's okay

00:23:52,560 --> 00:23:56,400
we're explicitly raising that's okay

00:23:54,720 --> 00:24:00,210
it's actually more explicit than bottle

00:23:56,400 --> 00:24:02,010
and I think that's nice and again we're

00:24:00,210 --> 00:24:05,300
importing all these strictly directly

00:24:02,010 --> 00:24:05,300
from the ET module

00:24:05,910 --> 00:24:10,900
but unfortunately the docks pretty much

00:24:09,190 --> 00:24:14,320
smaller but as it turns out if he is a

00:24:10,900 --> 00:24:15,490
much smaller framework as well there's

00:24:14,320 --> 00:24:17,860
got really good examples in the

00:24:15,490 --> 00:24:19,600
documentation and it's really simple and

00:24:17,860 --> 00:24:22,120
straightforward and again we're looking

00:24:19,600 --> 00:24:24,490
at pretty much the same code as bottle

00:24:22,120 --> 00:24:26,020
that's just the get the patterns in URLs

00:24:24,490 --> 00:24:30,820
are different I mean even users request

00:24:26,020 --> 00:24:32,350
up post it's basically the same really

00:24:30,820 --> 00:24:34,690
weirdly though when you raise a redirect

00:24:32,350 --> 00:24:39,280
you get a trace back in the log file so

00:24:34,690 --> 00:24:41,440
that's kind of odd and Ronnie T runs the

00:24:39,280 --> 00:24:41,620
server you can't make it simpler than

00:24:41,440 --> 00:24:44,770
that

00:24:41,620 --> 00:24:47,530
an ETA dot handle request gives you the

00:24:44,770 --> 00:24:49,840
whiskey application to publish so easy

00:24:47,530 --> 00:24:51,070
that's really nice I won't show you the

00:24:49,840 --> 00:24:54,970
source code because it's basically the

00:24:51,070 --> 00:24:58,420
same as a bottle flask this is one that

00:24:54,970 --> 00:25:00,040
people talk about a lot flask is a

00:24:58,420 --> 00:25:02,650
little bit bigger it depends on two

00:25:00,040 --> 00:25:06,360
external libraries ginger - and work

00:25:02,650 --> 00:25:08,559
zoom which is a separate whisky toolkit

00:25:06,360 --> 00:25:10,179
it does however have really good

00:25:08,559 --> 00:25:12,100
documentation and it's down the

00:25:10,179 --> 00:25:15,220
downloadable documentation again sphinx'

00:25:12,100 --> 00:25:17,050
fied although the works sometimes have

00:25:15,220 --> 00:25:20,940
to refer to the work sig documentation

00:25:17,050 --> 00:25:26,020
which is a bit of a pain in particular

00:25:20,940 --> 00:25:28,030
to get not found after we import that

00:25:26,020 --> 00:25:30,010
from work sig not from flask but

00:25:28,030 --> 00:25:33,850
redirect is imported from flask so

00:25:30,010 --> 00:25:35,980
that's a bit not right jumping back up

00:25:33,850 --> 00:25:37,660
to the top though explicit app creation

00:25:35,980 --> 00:25:39,730
there's no default app like in bottle

00:25:37,660 --> 00:25:41,800
and et so you I mean this isn't a bad

00:25:39,730 --> 00:25:43,929
thing explicit is not is good we

00:25:41,800 --> 00:25:45,760
explicitly create the application and

00:25:43,929 --> 00:25:48,010
then we route based on that application

00:25:45,760 --> 00:25:50,140
so that's nice but again any tea and

00:25:48,010 --> 00:25:51,670
bottle you can create hang on sorry in

00:25:50,140 --> 00:25:53,770
bottle you can create your own

00:25:51,670 --> 00:25:58,960
application and do this pattern if you

00:25:53,770 --> 00:26:00,760
wish - there's no way to return or not

00:25:58,960 --> 00:26:03,340
found and there's no way to raise or

00:26:00,760 --> 00:26:09,190
redirect its again it's one way or the

00:26:03,340 --> 00:26:10,589
other it's kind of weird yeah I said

00:26:09,190 --> 00:26:13,629
that already

00:26:10,589 --> 00:26:15,099
in the documentation it wasn't

00:26:13,629 --> 00:26:17,289
immediately clear where requests came

00:26:15,099 --> 00:26:19,450
from they just used it as it turns out

00:26:17,289 --> 00:26:22,570
it's a module globulin flask but it

00:26:19,450 --> 00:26:25,269
wasn't at all clear so that was kind of

00:26:22,570 --> 00:26:27,429
odd and again we're looking at code that

00:26:25,269 --> 00:26:28,989
looks basically the same as flask and

00:26:27,429 --> 00:26:30,849
you see it's just you know a slightly

00:26:28,989 --> 00:26:33,129
different invocation to do the routing

00:26:30,849 --> 00:26:37,359
and we're using requests top form

00:26:33,129 --> 00:26:40,539
instead of request get post and yeah the

00:26:37,359 --> 00:26:42,969
the you know the rest assure quest

00:26:40,539 --> 00:26:46,299
method stuff is handled as an optional

00:26:42,969 --> 00:26:50,919
argument to the route so that's not too

00:26:46,299 --> 00:26:54,190
bad and to run the application we app

00:26:50,919 --> 00:26:57,549
got run if we set the debug equals true

00:26:54,190 --> 00:26:59,559
we get this awesome debugger and as

00:26:57,549 --> 00:27:01,479
basically if the application crashes you

00:26:59,559 --> 00:27:05,049
get in your browser an interactive

00:27:01,479 --> 00:27:10,239
session to debug your program it's

00:27:05,049 --> 00:27:12,159
awesome yes so the app there that's a

00:27:10,239 --> 00:27:16,869
flight that's a whiskey application and

00:27:12,159 --> 00:27:18,249
so we can publish that and flask has a

00:27:16,869 --> 00:27:19,989
bunch of extras so it's got work zoo

00:27:18,249 --> 00:27:22,389
which has got a whole bunch of utilities

00:27:19,989 --> 00:27:24,489
it has testing support built in that's

00:27:22,389 --> 00:27:26,950
got the debugger which is you know super

00:27:24,489 --> 00:27:28,899
cool there's a security keys thing

00:27:26,950 --> 00:27:30,399
there's ginger - which is bundled but

00:27:28,899 --> 00:27:33,309
you can put that in anything so that's

00:27:30,399 --> 00:27:35,440
not really a flask extra there's a shell

00:27:33,309 --> 00:27:38,679
as well which I didn't look into which

00:27:35,440 --> 00:27:41,919
is pretty neat but anyway that's for

00:27:38,679 --> 00:27:43,329
another time okay so the next one looked

00:27:41,919 --> 00:27:44,589
at was pesto we're at number eight of

00:27:43,329 --> 00:27:49,659
ten so we're getting there

00:27:44,589 --> 00:27:51,429
okay so pesto is kind of like flasks but

00:27:49,659 --> 00:27:52,599
a little bit more explicit so it's

00:27:51,429 --> 00:27:54,669
basically you're creating your

00:27:52,599 --> 00:27:57,009
application and you've got your routing

00:27:54,669 --> 00:27:59,379
specifying the pattern and the request

00:27:57,009 --> 00:28:01,809
method and in the pattern you have to

00:27:59,379 --> 00:28:04,389
specify the type of the thing that's

00:28:01,809 --> 00:28:05,619
being pulled out of the URL as well if

00:28:04,389 --> 00:28:10,269
you don't specify a type there's no

00:28:05,619 --> 00:28:11,950
default response is being sorry dispatch

00:28:10,269 --> 00:28:15,190
wrap and response they're all imported

00:28:11,950 --> 00:28:17,919
from pesto so we explicitly wrap our

00:28:15,190 --> 00:28:19,779
response where are we down the bottom

00:28:17,919 --> 00:28:21,480
here when we're returning our page we

00:28:19,779 --> 00:28:25,380
can't just return the string we have to

00:28:21,480 --> 00:28:27,210
turn a response object but the we have

00:28:25,380 --> 00:28:28,830
to end there's no raising a redirect I'm

00:28:27,210 --> 00:28:31,290
not found we have to return those but

00:28:28,830 --> 00:28:33,390
that's you know it's okay I'd prefer I

00:28:31,290 --> 00:28:36,660
prefer to raise these things sometimes

00:28:33,390 --> 00:28:38,940
and it's nice to have that option there

00:28:36,660 --> 00:28:41,250
is absolutely no magic going on here

00:28:38,940 --> 00:28:46,790
request it's not a global module

00:28:41,250 --> 00:28:46,790
variable it's passed in there's no magic

00:28:49,220 --> 00:28:53,730
yes I think that's so it's really really

00:28:52,169 --> 00:28:56,330
simple to use I've written a couple of

00:28:53,730 --> 00:28:57,840
applications using pesto already

00:28:56,330 --> 00:29:00,870
unfortunately it's just a little bit

00:28:57,840 --> 00:29:05,100
more verbose than you know bottle or

00:29:00,870 --> 00:29:07,590
even flask with the need to explicitly

00:29:05,100 --> 00:29:12,540
do the risk response and and request

00:29:07,590 --> 00:29:14,070
argument that's so be it and as I say

00:29:12,540 --> 00:29:16,770
the type is not optional if you leave

00:29:14,070 --> 00:29:18,120
the type out you get an error it doesn't

00:29:16,770 --> 00:29:20,040
actually have a server built-in you just

00:29:18,120 --> 00:29:22,590
use the standard whiskey ref simple

00:29:20,040 --> 00:29:24,179
server but that's not so bad I mean it

00:29:22,590 --> 00:29:26,580
means the app you've created is a whisky

00:29:24,179 --> 00:29:28,890
app so that's nice it actually has some

00:29:26,580 --> 00:29:30,780
extras like utilities for testing alike

00:29:28,890 --> 00:29:31,860
frameworks that supply utilities for

00:29:30,780 --> 00:29:33,590
testing I should have actually added

00:29:31,860 --> 00:29:38,100
that to my requirements but I didn't

00:29:33,590 --> 00:29:39,690
because I just I realized that far too

00:29:38,100 --> 00:29:41,490
late

00:29:39,690 --> 00:29:43,740
it has support for sessions and caching

00:29:41,490 --> 00:29:47,700
and obviously it does whiskey which is

00:29:43,740 --> 00:29:49,500
nice second last is work Zook I actually

00:29:47,700 --> 00:29:51,360
decided when I was doing flasks that I

00:29:49,500 --> 00:29:52,890
kind of delve deeper and actually try

00:29:51,360 --> 00:29:55,380
implementing something directly and work

00:29:52,890 --> 00:29:57,240
so because it seemed pretty capable and

00:29:55,380 --> 00:29:59,490
in fact it has really nice documentation

00:29:57,240 --> 00:30:01,470
and again downloadable the docs are kind

00:29:59,490 --> 00:30:03,750
of strangely laid out and a simple

00:30:01,470 --> 00:30:06,510
sample program that they have they

00:30:03,750 --> 00:30:08,940
provide is actually more complex it does

00:30:06,510 --> 00:30:11,549
more than the simple introductory

00:30:08,940 --> 00:30:14,640
program for flask it's kind of weird it

00:30:11,549 --> 00:30:15,990
influenced all this RM stuff and

00:30:14,640 --> 00:30:18,690
templating and all this other stuff

00:30:15,990 --> 00:30:23,490
whereas the flask one is just like hello

00:30:18,690 --> 00:30:25,020
world which was kind of odd having said

00:30:23,490 --> 00:30:26,850
that it did explain a whole lot of stuff

00:30:25,020 --> 00:30:28,910
is just way more than I really cared

00:30:26,850 --> 00:30:28,910
about

00:30:29,730 --> 00:30:38,580
there's no magic going on here it occurs

00:30:36,179 --> 00:30:40,559
to me now how did I look at it that I

00:30:38,580 --> 00:30:42,210
could have raised a redirect I probably

00:30:40,559 --> 00:30:44,549
could have raised a redirect I didn't

00:30:42,210 --> 00:30:47,040
try this from my flask application by

00:30:44,549 --> 00:30:50,880
importing the redirect exception from

00:30:47,040 --> 00:30:53,880
work sig but there you go it may work

00:30:50,880 --> 00:30:57,090
may not who knows but there's no magic

00:30:53,880 --> 00:30:58,650
going on here the URL mapping is done

00:30:57,090 --> 00:31:00,840
later that's why there's no URL

00:30:58,650 --> 00:31:02,360
decorators here but the basic the core

00:31:00,840 --> 00:31:06,120
of this stuff is pretty straightforward

00:31:02,360 --> 00:31:07,799
and again if there's a name component in

00:31:06,120 --> 00:31:09,720
the URL it'll be passed in the request

00:31:07,799 --> 00:31:13,049
is passed in explicitly there's no

00:31:09,720 --> 00:31:15,600
module global variable works who's got

00:31:13,049 --> 00:31:19,530
this URL mapping thing that we can use

00:31:15,600 --> 00:31:22,160
to define the URL the and the endpoint

00:31:19,530 --> 00:31:25,110
and the methods that's all very explicit

00:31:22,160 --> 00:31:29,640
but it's not too bad not not too

00:31:25,110 --> 00:31:32,070
burdensome downside with works is

00:31:29,640 --> 00:31:35,160
there's no top-level application I had

00:31:32,070 --> 00:31:38,549
to write my own top-level thing to look

00:31:35,160 --> 00:31:41,520
at those URLs and that URL mapping that

00:31:38,549 --> 00:31:42,990
I'd created with works weak and call

00:31:41,520 --> 00:31:45,809
something to call the thing that's

00:31:42,990 --> 00:31:47,400
nominated in there it seems like the

00:31:45,809 --> 00:31:49,080
sort of thing that would be simple to

00:31:47,400 --> 00:31:51,990
just add to work but for some reason

00:31:49,080 --> 00:31:54,210
it's missing so I do and I basically

00:31:51,990 --> 00:31:57,419
copy and pasted most of this from the

00:31:54,210 --> 00:31:59,040
work sig documentation so it's a little

00:31:57,419 --> 00:32:02,910
bit perplexing and it took me a little

00:31:59,040 --> 00:32:06,470
while to get exactly right so yeah other

00:32:02,910 --> 00:32:10,669
than that is pretty easy to use there's

00:32:06,470 --> 00:32:13,110
some extras in work zhuge like sessions

00:32:10,669 --> 00:32:15,809
generation of atom which is a little bit

00:32:13,110 --> 00:32:17,490
of a left field one there's the secure

00:32:15,809 --> 00:32:19,799
key stuff is actually implemented in

00:32:17,490 --> 00:32:22,710
work signet in flask so if life just

00:32:19,799 --> 00:32:26,520
kind of inherited it and caching of

00:32:22,710 --> 00:32:28,140
requests and again I had to write my own

00:32:26,520 --> 00:32:33,600
whiskey application so it doesn't really

00:32:28,140 --> 00:32:36,320
get the whiskey tick okay so the last

00:32:33,600 --> 00:32:40,220
one I'm going to look at is Aspen I oh

00:32:36,320 --> 00:32:42,440
this one is truly the odd one out

00:32:40,220 --> 00:32:45,350
it's a completely different approach to

00:32:42,440 --> 00:32:47,150
everything else and it actually goes

00:32:45,350 --> 00:32:48,110
completely against my no templates rule

00:32:47,150 --> 00:32:50,600
because you can't do anything without

00:32:48,110 --> 00:32:55,130
using templates but it just looks so

00:32:50,600 --> 00:32:59,090
neat I had to try it out this is an

00:32:55,130 --> 00:33:01,340
aspen template it's got three sections

00:32:59,090 --> 00:33:03,230
delimited by page breaks or in fact if

00:33:01,340 --> 00:33:06,440
you type an explicit care a and L

00:33:03,230 --> 00:33:08,210
that'll count as well you've got a

00:33:06,440 --> 00:33:10,130
global sorry you've got an

00:33:08,210 --> 00:33:11,900
initialization section which is Python

00:33:10,130 --> 00:33:12,980
code you've got a per request Python

00:33:11,900 --> 00:33:14,720
code section and then you've got a

00:33:12,980 --> 00:33:15,650
template section which is blank for this

00:33:14,720 --> 00:33:17,690
one because there's nothing being

00:33:15,650 --> 00:33:22,820
templated nothing being returned to the

00:33:17,690 --> 00:33:24,200
user so yeah it's got this structure and

00:33:22,820 --> 00:33:26,620
you'll see that more in some of the

00:33:24,200 --> 00:33:26,620
other slides

00:33:30,100 --> 00:33:35,210
yeah there's no convene there's a lot of

00:33:33,590 --> 00:33:37,490
conveniences that are in all the other

00:33:35,210 --> 00:33:39,770
frameworks that are missing here like

00:33:37,490 --> 00:33:41,570
there's no redirect exception or even

00:33:39,770 --> 00:33:46,220
response you have to construct the theme

00:33:41,570 --> 00:33:47,870
yourself if this file didn't have Python

00:33:46,220 --> 00:33:49,100
code in it or if it didn't have the page

00:33:47,870 --> 00:33:52,280
breaks in it it would be served as

00:33:49,100 --> 00:33:55,460
static file which is quite nice so you

00:33:52,280 --> 00:33:56,990
can just in your Aspen application you

00:33:55,460 --> 00:33:58,370
can just whack in static files and

00:33:56,990 --> 00:34:01,310
they'll be served up which is kind of

00:33:58,370 --> 00:34:03,020
neat but this is all just a little bit

00:34:01,310 --> 00:34:05,990
magic in a little bit PHP but we'll

00:34:03,020 --> 00:34:07,460
we'll see okay so the structure of the

00:34:05,990 --> 00:34:10,730
application is kind of like this we have

00:34:07,460 --> 00:34:12,800
the index dot HTML file you saw there we

00:34:10,730 --> 00:34:15,050
have a dot Aspen directory where we can

00:34:12,800 --> 00:34:17,659
store things like a configuration file

00:34:15,050 --> 00:34:21,440
and python modules we want to import in

00:34:17,659 --> 00:34:23,780
our application and in % name or % you

00:34:21,440 --> 00:34:26,149
know any name really but % name Aspen

00:34:23,780 --> 00:34:28,370
sees that directory name and pulls that

00:34:26,149 --> 00:34:33,010
out of the URL and sets it as a variable

00:34:28,370 --> 00:34:36,770
in the request for us it's kind of fun

00:34:33,010 --> 00:34:39,290
so then in our sent name slash index dot

00:34:36,770 --> 00:34:40,760
HTML file the request that the per

00:34:39,290 --> 00:34:43,340
request code is in that middle section

00:34:40,760 --> 00:34:46,159
but remember we can pull the name that's

00:34:43,340 --> 00:34:48,350
been pulled out of the URL and use that

00:34:46,159 --> 00:34:50,389
in rendering our page based on the name

00:34:48,350 --> 00:34:52,570
so that's kind of nice but you can see

00:34:50,389 --> 00:34:56,230
at the top every single page has

00:34:52,570 --> 00:34:58,630
have this boilerplate which is very arc

00:34:56,230 --> 00:35:01,480
and then I'm rendering the page so my

00:34:58,630 --> 00:35:03,160
templating is just templating the page

00:35:01,480 --> 00:35:05,290
contents actually had to go after the

00:35:03,160 --> 00:35:08,800
tornado documentation to figure out

00:35:05,290 --> 00:35:11,140
whether or not that's escaped and I gave

00:35:08,800 --> 00:35:13,900
up in the end and I just ran it and it

00:35:11,140 --> 00:35:15,550
turns out it's not escaped so there you

00:35:13,900 --> 00:35:19,230
go the HTML isn't escaped by default

00:35:15,550 --> 00:35:22,480
which is a bit not so happy about that

00:35:19,230 --> 00:35:26,980
and I don't know how to temper to escape

00:35:22,480 --> 00:35:28,720
it either so the URLs and mapping to

00:35:26,980 --> 00:35:30,190
these file system path which is kind of

00:35:28,720 --> 00:35:31,570
nice

00:35:30,190 --> 00:35:34,320
unfortunately there's no way of

00:35:31,570 --> 00:35:37,090
including the request method in that so

00:35:34,320 --> 00:35:42,250
the handling of the request method is

00:35:37,090 --> 00:35:44,320
done explicitly in the page code another

00:35:42,250 --> 00:35:46,750
downside of Aspen is the documentation

00:35:44,320 --> 00:35:48,340
is seriously thin for developing this

00:35:46,750 --> 00:35:51,460
sort of application so I had to go to

00:35:48,340 --> 00:35:54,610
the source to figure out what that

00:35:51,460 --> 00:35:56,950
request dot body thing was and how what

00:35:54,610 --> 00:35:59,830
its API was and how to actually access

00:35:56,950 --> 00:36:01,150
information I had to read the source to

00:35:59,830 --> 00:36:04,660
figure out how to get a redirect back to

00:36:01,150 --> 00:36:06,850
the client I had to read the source to

00:36:04,660 --> 00:36:10,060
figure out how to set the HTML content

00:36:06,850 --> 00:36:16,870
type because it's not edit dot HTML it

00:36:10,060 --> 00:36:18,430
served as plain text so yeah I'm

00:36:16,870 --> 00:36:20,050
definitely not developing a sort of

00:36:18,430 --> 00:36:23,680
application that Aspen was devised

00:36:20,050 --> 00:36:25,960
designed for here to serve Aspen you can

00:36:23,680 --> 00:36:27,970
either just run the Aspen command in the

00:36:25,960 --> 00:36:30,400
directory and it'll serve Aspen serve

00:36:27,970 --> 00:36:33,700
your application or you can set up a

00:36:30,400 --> 00:36:35,200
Python program that does this there's no

00:36:33,700 --> 00:36:37,810
way to get a whiskey application out of

00:36:35,200 --> 00:36:39,130
it though I mean I've given it maybe a

00:36:37,810 --> 00:36:41,470
little bit of a rough time here but

00:36:39,130 --> 00:36:43,480
again I don't think this is I'm certain

00:36:41,470 --> 00:36:47,020
that what I'm doing is not what Aspen is

00:36:43,480 --> 00:36:48,640
designed for and it actually looks like

00:36:47,020 --> 00:36:50,710
it'd be kind of neat to develop a simple

00:36:48,640 --> 00:36:56,020
application a simple website with a bit

00:36:50,710 --> 00:36:58,690
of dynamic stuff in it so all right I've

00:36:56,020 --> 00:37:01,930
got less than 10 minutes let's see how

00:36:58,690 --> 00:37:03,610
they all stack up what I've done now is

00:37:01,930 --> 00:37:05,530
I'm going to score them with a simple

00:37:03,610 --> 00:37:06,180
plus one or minus one based on my cry

00:37:05,530 --> 00:37:07,830
tea

00:37:06,180 --> 00:37:09,270
you can see the running totals down the

00:37:07,830 --> 00:37:11,160
bottom there don't pay the much

00:37:09,270 --> 00:37:13,170
attention if you don't want to we'll

00:37:11,160 --> 00:37:16,290
come back to the scores at the end so

00:37:13,170 --> 00:37:17,730
starting with documentation I really

00:37:16,290 --> 00:37:19,620
likes the documentation some of them

00:37:17,730 --> 00:37:21,660
some of them the documentation really

00:37:19,620 --> 00:37:23,910
didn't help at all and there were some

00:37:21,660 --> 00:37:25,590
young middle ings I much preferred

00:37:23,910 --> 00:37:28,110
obviously the documentation that I can

00:37:25,590 --> 00:37:29,220
download but pesto still got a plus one

00:37:28,110 --> 00:37:33,320
because it was a pretty good

00:37:29,220 --> 00:37:36,390
documentation in terms of ease of use

00:37:33,320 --> 00:37:42,150
some of them were clearly easier to use

00:37:36,390 --> 00:37:44,100
than well the CGI and whisky ref and I

00:37:42,150 --> 00:37:45,900
also took a point off of Aspen and Bobo

00:37:44,100 --> 00:37:49,740
again I'm not really being fair to Aspen

00:37:45,900 --> 00:37:51,450
but for sakes of you know giving an

00:37:49,740 --> 00:37:52,430
accurate idea of what's going on inside

00:37:51,450 --> 00:37:55,380
my head

00:37:52,430 --> 00:37:56,940
I took a point off of it and Bobo

00:37:55,380 --> 00:37:59,480
because Bobo was not clear at all what

00:37:56,940 --> 00:38:02,670
was going on and it wasn't easy to use

00:37:59,480 --> 00:38:05,700
in terms of avoiding magic

00:38:02,670 --> 00:38:08,610
I basically request module level request

00:38:05,700 --> 00:38:13,950
variables are considered magic and I'm

00:38:08,610 --> 00:38:15,870
taking a point off for that Ichi was

00:38:13,950 --> 00:38:18,350
that I can't remember what that point

00:38:15,870 --> 00:38:23,370
was about oh yes it wasn't easy to find

00:38:18,350 --> 00:38:26,520
in et the Whiskey environment is present

00:38:23,370 --> 00:38:28,050
as requests underscore environ and it's

00:38:26,520 --> 00:38:29,880
not i actually had a conversation with

00:38:28,050 --> 00:38:32,340
the author ovt about that he's like year

00:38:29,880 --> 00:38:33,600
what I'm like but you want to access it

00:38:32,340 --> 00:38:35,310
why's it got an underscore why are you

00:38:33,600 --> 00:38:40,290
pretending to hide it and he's like near

00:38:35,310 --> 00:38:42,780
whatever so and of course there's

00:38:40,290 --> 00:38:45,810
absolutely no magic in CJ whiskey

00:38:42,780 --> 00:38:49,800
refworks Igor pesto which can make them

00:38:45,810 --> 00:38:51,570
a bit more effort in terms of rest for

00:38:49,800 --> 00:38:53,280
most of them handled it some of them it

00:38:51,570 --> 00:38:56,400
wasn't obvious how it handled it and

00:38:53,280 --> 00:39:00,900
Aspen and CJ I was here obviously not so

00:38:56,400 --> 00:39:02,370
much and basically ignoring Aspen they

00:39:00,900 --> 00:39:03,720
were basically the two approaches there

00:39:02,370 --> 00:39:06,230
was you know you're decorating things

00:39:03,720 --> 00:39:09,060
you're decorating call levels and

00:39:06,230 --> 00:39:11,610
otherwise you're creating some listing

00:39:09,060 --> 00:39:14,220
of mappings to call levels and that's

00:39:11,610 --> 00:39:16,680
basically how things kind of settle down

00:39:14,220 --> 00:39:20,359
in terms of the URL

00:39:16,680 --> 00:39:26,970
rapping just you know kind of interest

00:39:20,359 --> 00:39:28,500
on the whiskey side yeah pretty much all

00:39:26,970 --> 00:39:30,240
of them supported whisky some of them it

00:39:28,500 --> 00:39:32,579
wasn't as obvious as others some of them

00:39:30,240 --> 00:39:35,460
I had to write the whiskey I don't know

00:39:32,579 --> 00:39:37,170
what CGI whiskey returns kind of no I

00:39:35,460 --> 00:39:39,059
mean I had to write the application so I

00:39:37,170 --> 00:39:40,920
don't think CGI whiz gear she really

00:39:39,059 --> 00:39:43,559
should get the point here thinking about

00:39:40,920 --> 00:39:47,180
it so we'll just keep that in mind

00:39:43,559 --> 00:39:50,190
Python three three of these solutions

00:39:47,180 --> 00:39:51,930
supported Python three out of the box

00:39:50,190 --> 00:39:54,660
ignoring the standard library bottle and

00:39:51,930 --> 00:39:58,710
cherry pie points to you everybody else

00:39:54,660 --> 00:40:01,680
basically no so that would be nice to

00:39:58,710 --> 00:40:03,599
get you know improved one of the things

00:40:01,680 --> 00:40:05,880
holding things back is of course a lot

00:40:03,599 --> 00:40:08,640
of these use where Bob under the hood

00:40:05,880 --> 00:40:11,819
and where Bob is currently being made

00:40:08,640 --> 00:40:14,780
Python 3 happy that's an ongoing project

00:40:11,819 --> 00:40:17,690
so we hope that kind of comes out soon

00:40:14,780 --> 00:40:21,299
pi PI ha

00:40:17,690 --> 00:40:24,030
they all run under pi PI and that's

00:40:21,299 --> 00:40:26,670
really props to the pi PI team as much

00:40:24,030 --> 00:40:29,220
as anything else and that was a real

00:40:26,670 --> 00:40:31,440
surprise that's just awesome that was

00:40:29,220 --> 00:40:34,559
with the last release that's 1.5 that's

00:40:31,440 --> 00:40:37,319
not even 1.6 which was just released so

00:40:34,559 --> 00:40:40,109
that was that was really nice

00:40:37,319 --> 00:40:41,730
in terms of effort that I had to expend

00:40:40,109 --> 00:40:43,740
to write these things

00:40:41,730 --> 00:40:46,559
badal indeed he tied four lines of code

00:40:43,740 --> 00:40:51,210
but bottle was just a few characters

00:40:46,559 --> 00:40:53,690
less and of course the most typing down

00:40:51,210 --> 00:40:56,490
the bottom here with CJ and was Gareth

00:40:53,690 --> 00:40:58,440
and I kind of arbitrarily cut the line

00:40:56,490 --> 00:41:00,869
there above cherry pie because cherry

00:40:58,440 --> 00:41:06,329
pie just felt like too much typing with

00:41:00,869 --> 00:41:11,280
that whole comp thing yeah in terms of

00:41:06,329 --> 00:41:14,700
the frameworks though 8590 three lines

00:41:11,280 --> 00:41:16,680
of code how awesome and then there's

00:41:14,700 --> 00:41:19,260
hardly anything to see Jane was EF so

00:41:16,680 --> 00:41:22,079
obviously it's in there but it bottle

00:41:19,260 --> 00:41:24,690
again such a short it's a single file

00:41:22,079 --> 00:41:26,670
and then a very little amount of code to

00:41:24,690 --> 00:41:27,869
get done to do what it does and as I say

00:41:26,670 --> 00:41:30,900
it's got a bunch of adapters

00:41:27,869 --> 00:41:32,609
stuff in there as well and then I kind

00:41:30,900 --> 00:41:35,609
of arbitrarily cut the line there and

00:41:32,609 --> 00:41:37,289
and I just thought Cherry Pie and fast

00:41:35,609 --> 00:41:39,480
which I had to delve into the code for a

00:41:37,289 --> 00:41:41,490
few times there's just too much there

00:41:39,480 --> 00:41:43,109
just simply go in and find out how

00:41:41,490 --> 00:41:48,150
things are working so they get a point

00:41:43,109 --> 00:41:51,990
off so the official scores according to

00:41:48,150 --> 00:41:54,809
me bottle quite clearly the winner out

00:41:51,990 --> 00:41:58,440
of all of this although you know pesto

00:41:54,809 --> 00:42:01,140
which is you know less it's more verbose

00:41:58,440 --> 00:42:04,740
because it's more explicit still comes

00:42:01,140 --> 00:42:07,890
in a pretty close second and et affair

00:42:04,740 --> 00:42:09,390
showing there and again I'm really not

00:42:07,890 --> 00:42:12,089
being fair to Aspen I shouldn't have

00:42:09,390 --> 00:42:14,130
included in the totals but Bobo and

00:42:12,089 --> 00:42:16,680
cherry pie I mean cherry pies got some

00:42:14,130 --> 00:42:20,369
neat features but there's a fair bit

00:42:16,680 --> 00:42:23,009
going against it in my criteria so I've

00:42:20,369 --> 00:42:25,249
actually since I did this since I

00:42:23,009 --> 00:42:27,720
finished this round up I've actually

00:42:25,249 --> 00:42:29,579
started using bottle for actual

00:42:27,720 --> 00:42:32,970
application development and I'm finding

00:42:29,579 --> 00:42:36,450
it really nice to use so I think I might

00:42:32,970 --> 00:42:40,410
actually be onto a winner just as a

00:42:36,450 --> 00:42:43,499
final note ok so yes bottles simple to

00:42:40,410 --> 00:42:46,499
use great Doc's restful whisky Python 3

00:42:43,499 --> 00:42:48,809
a single file implementation compact

00:42:46,499 --> 00:42:51,029
application code I mean it can't get

00:42:48,809 --> 00:42:53,069
better than that I don't think and

00:42:51,029 --> 00:42:54,829
there's just a little note here some of

00:42:53,069 --> 00:42:56,730
the extras that you get with the

00:42:54,829 --> 00:42:58,680
different frameworks I actually

00:42:56,730 --> 00:43:00,539
mentioned them in passing but this is

00:42:58,680 --> 00:43:03,829
just a little temp table to leave up

00:43:00,539 --> 00:43:06,630
there I have three minutes left I think

00:43:03,829 --> 00:43:08,190
in two minutes left if there's time

00:43:06,630 --> 00:43:10,140
there's probably time for one question

00:43:08,190 --> 00:43:11,759
so make it good if you've got a question

00:43:10,140 --> 00:43:15,539
I may or may not answer it

00:43:11,759 --> 00:43:19,799
oh we'll just wait for the microphone

00:43:15,539 --> 00:43:22,579
I could always repeat given we don't

00:43:19,799 --> 00:43:22,579
have much time

00:43:22,610 --> 00:43:29,100
can I describe the utilities for testing

00:43:25,170 --> 00:43:30,810
in pesto sadly I cannot I'm afraid from

00:43:29,100 --> 00:43:33,120
from memory and this is straight from

00:43:30,810 --> 00:43:36,780
memory I believe it just simply allows

00:43:33,120 --> 00:43:39,150
you to construct a pretend whiskey

00:43:36,780 --> 00:43:41,750
application and feed it information and

00:43:39,150 --> 00:43:43,950
handle responses and things like that

00:43:41,750 --> 00:43:46,470
in fact I'm pretty sure that's how most

00:43:43,950 --> 00:43:48,120
of them that support testing do things

00:43:46,470 --> 00:43:49,800
they provide the ability for you to

00:43:48,120 --> 00:43:52,430
construct a request to feed into your

00:43:49,800 --> 00:43:55,380
application and handle the response

00:43:52,430 --> 00:44:05,760
um or more question I'm always got

00:43:55,380 --> 00:44:08,460
anything way over here Aaron I

00:44:05,760 --> 00:44:10,560
pronounced just considering the bottle

00:44:08,460 --> 00:44:12,270
doesn't come with a few extras that

00:44:10,560 --> 00:44:14,670
floss does would you still consider

00:44:12,270 --> 00:44:17,040
using bottle over flask if you needed

00:44:14,670 --> 00:44:18,900
lots of things like sessions or oh no

00:44:17,040 --> 00:44:21,300
absolutely if I was developing a real

00:44:18,900 --> 00:44:23,640
website I would not use bottle I would

00:44:21,300 --> 00:44:25,350
probably use flask or Django if I was

00:44:23,640 --> 00:44:27,540
developing a real website that had a

00:44:25,350 --> 00:44:30,330
real user interface and had real users

00:44:27,540 --> 00:44:36,120
but what I'm developing is not that not

00:44:30,330 --> 00:44:38,010
in this case yes in fact the the last

00:44:36,120 --> 00:44:42,540
application I developed that had actual

00:44:38,010 --> 00:44:45,690
users the user authentication was in a

00:44:42,540 --> 00:44:47,040
single form into your the details of the

00:44:45,690 --> 00:44:49,080
request you want to make and type your

00:44:47,040 --> 00:44:50,790
user name in the bottom field and hit go

00:44:49,080 --> 00:44:52,590
and that was it

00:44:50,790 --> 00:44:56,040
so that I mean that's the sort of thing

00:44:52,590 --> 00:44:57,750
I deal with sometimes I think we're out

00:44:56,040 --> 00:44:59,900
of time now so thank you very much

00:44:57,750 --> 00:44:59,900

YouTube URL: https://www.youtube.com/watch?v=AYjPIMe0BhA


