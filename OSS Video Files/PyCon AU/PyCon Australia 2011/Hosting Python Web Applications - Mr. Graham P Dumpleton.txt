Title: Hosting Python Web Applications - Mr. Graham P Dumpleton
Publication date: 2011-08-22
Playlist: PyCon Australia 2011
Description: 
	Web applications which are able to dynamically deliver up content haveÂ become a crucial part of the Internet landscape, with Python becoming an increasingly popular choice for the implementation of all manner of web applications. In order though for users to be able to access your web application you need to host it. The choices available are however many and varied with accurate information on which may be a good choice not always easy to find.
Captions: 
	00:00:00,780 --> 00:00:07,020
next up we have Graham Dumbleton Maude

00:00:03,600 --> 00:00:08,700
whiskey maintainer extraordinaire here

00:00:07,020 --> 00:00:15,000
to tell us all about hosting Python web

00:00:08,700 --> 00:00:17,510
application it really worries me the

00:00:15,000 --> 00:00:21,449
sort of reputation I have out there cuz

00:00:17,510 --> 00:00:23,550
yeah why but the Denny's talk yes there

00:00:21,449 --> 00:00:25,080
is interesting because it's the same

00:00:23,550 --> 00:00:26,519
thing as why do people look up to people

00:00:25,080 --> 00:00:29,039
in the community it's just yeah it's

00:00:26,519 --> 00:00:31,040
interesting to see the attitudes anyway

00:00:29,039 --> 00:00:36,270
my talk hosting Python web applications

00:00:31,040 --> 00:00:39,059
is interesting in having a mofo dinner

00:00:36,270 --> 00:00:41,670
views his name nail talked earlier was

00:00:39,059 --> 00:00:44,370
mentioning that WSGI and how WSGI sort

00:00:41,670 --> 00:00:46,800
of unified the web hosting world because

00:00:44,370 --> 00:00:48,390
it's given one solution so when I talk

00:00:46,800 --> 00:00:50,579
about hosting Python web applications

00:00:48,390 --> 00:00:52,980
here I'm particularly talking about WSGI

00:00:50,579 --> 00:00:56,219
I'm not talking about the other things

00:00:52,980 --> 00:01:01,140
that are available I will I will briefly

00:00:56,219 --> 00:01:03,059
mention them so in web applications in

00:01:01,140 --> 00:01:05,430
the Python world I actually play a very

00:01:03,059 --> 00:01:08,880
interesting that there isn't actually

00:01:05,430 --> 00:01:11,310
many standalone web apps that have come

00:01:08,880 --> 00:01:12,890
out of the Python community the main

00:01:11,310 --> 00:01:16,350
once you hear about a plan track and

00:01:12,890 --> 00:01:18,450
Moin Moin you look to some of the other

00:01:16,350 --> 00:01:20,880
web communities PHP and so on there's a

00:01:18,450 --> 00:01:23,460
lot of end-user applications Drupal

00:01:20,880 --> 00:01:24,570
obviously relies on the PHP but you

00:01:23,460 --> 00:01:27,090
don't get a lot in the Python web

00:01:24,570 --> 00:01:28,740
community but what you do get in Python

00:01:27,090 --> 00:01:31,500
web community is a lot of web frameworks

00:01:28,740 --> 00:01:33,360
and so although you don't see a lot of

00:01:31,500 --> 00:01:34,680
end-user applications you've got a lot

00:01:33,360 --> 00:01:35,729
of frameworks out there for building

00:01:34,680 --> 00:01:41,060
your own and that's what's more

00:01:35,729 --> 00:01:43,020
important to us with those frameworks

00:01:41,060 --> 00:01:45,000
most of those frameworks generally

00:01:43,020 --> 00:01:47,460
bundle their own web server to make your

00:01:45,000 --> 00:01:48,360
development easier some of them have the

00:01:47,460 --> 00:01:51,240
ability reformed

00:01:48,360 --> 00:01:53,240
code code detection and will

00:01:51,240 --> 00:01:56,579
automatically restart themselves when

00:01:53,240 --> 00:01:58,380
you make code change for those servers

00:01:56,579 --> 00:02:02,250
they generally fall into two categories

00:01:58,380 --> 00:02:05,549
based on how capable they are so we have

00:02:02,250 --> 00:02:08,360
those which I regard as development only

00:02:05,549 --> 00:02:10,770
so these ones are generally based on

00:02:08,360 --> 00:02:13,150
modules which available in spent stive

00:02:10,770 --> 00:02:15,129
Python standard library

00:02:13,150 --> 00:02:16,780
definitely only suitable for development

00:02:15,129 --> 00:02:19,180
and definitely not adequate for

00:02:16,780 --> 00:02:22,239
production use the the sort of

00:02:19,180 --> 00:02:25,060
shortcomings that they have some of the

00:02:22,239 --> 00:02:27,909
main ones they're decent concurrency

00:02:25,060 --> 00:02:29,980
support essentially they're just not up

00:02:27,909 --> 00:02:32,920
to handling the rigors of a high load

00:02:29,980 --> 00:02:36,129
production website did not be security

00:02:32,920 --> 00:02:37,780
audited very well or at all and if you

00:02:36,129 --> 00:02:40,420
put them on your website they all could

00:02:37,780 --> 00:02:42,489
well just blow up so definitely for

00:02:40,420 --> 00:02:47,530
those ones ok great for development but

00:02:42,489 --> 00:02:49,930
steer clear even for production for some

00:02:47,530 --> 00:02:52,060
of the other website web servers then

00:02:49,930 --> 00:02:54,900
you have the older options of paste

00:02:52,060 --> 00:02:57,700
rocket and cherry pies WSGI service

00:02:54,900 --> 00:03:02,799
these are claimed to be suitable for

00:02:57,700 --> 00:03:04,150
production use and a lot of people you

00:03:02,799 --> 00:03:05,560
know take that and say yeah great we'll

00:03:04,150 --> 00:03:06,909
use it so they are reasonably safe

00:03:05,560 --> 00:03:08,920
option but your mileage may vary

00:03:06,909 --> 00:03:11,470
depending on the sort of site you're

00:03:08,920 --> 00:03:13,180
you're running you're often see

00:03:11,470 --> 00:03:15,340
benchmarks comparing these different

00:03:13,180 --> 00:03:18,010
types of web servers and people get

00:03:15,340 --> 00:03:19,840
mixed results with them partly that's

00:03:18,010 --> 00:03:23,109
because people have Arden realistic

00:03:19,840 --> 00:03:27,879
ideas of running benchmarks and they

00:03:23,109 --> 00:03:31,449
will you know expect things to work on

00:03:27,879 --> 00:03:33,010
under 10000 concurrent connections on

00:03:31,449 --> 00:03:35,319
their hello world program and they

00:03:33,010 --> 00:03:39,239
wonder why some particular web service

00:03:35,319 --> 00:03:39,239
sort of trails off performance after all

00:03:40,230 --> 00:03:45,459
but they are certainly a better solution

00:03:43,449 --> 00:03:47,979
than the ones which are just a

00:03:45,459 --> 00:03:50,530
development server learn they're not a

00:03:47,979 --> 00:03:51,849
complete solution generally you still

00:03:50,530 --> 00:03:54,159
need to have a separate process

00:03:51,849 --> 00:03:56,769
management system in place to ensure

00:03:54,159 --> 00:03:58,900
that they stay running and they're

00:03:56,769 --> 00:04:03,129
definitely not a good solution for for

00:03:58,900 --> 00:04:05,639
steady file serving basically to do

00:04:03,129 --> 00:04:08,620
static file serving in any WSGI server

00:04:05,639 --> 00:04:10,470
which is a pure WSGI server then you

00:04:08,620 --> 00:04:12,519
have to actually have a wsgi application

00:04:10,470 --> 00:04:13,989
component which can do that study file

00:04:12,519 --> 00:04:16,000
serving and that's where you start get

00:04:13,989 --> 00:04:17,829
processing things through python code

00:04:16,000 --> 00:04:19,449
and you study file so it's going to be

00:04:17,829 --> 00:04:23,620
nowhere as good as a dedicated web

00:04:19,449 --> 00:04:26,010
server for most of their for all of

00:04:23,620 --> 00:04:27,720
those ones because they because

00:04:26,010 --> 00:04:29,400
data file handing for other reasons to

00:04:27,720 --> 00:04:33,110
Chileans recommend you stick them behind

00:04:29,400 --> 00:04:33,110
a more traditional web server

00:04:35,540 --> 00:04:42,030
independent web servers these are ones

00:04:38,550 --> 00:04:44,700
which available separate other framework

00:04:42,030 --> 00:04:46,200
and there are lots of them

00:04:44,700 --> 00:04:48,410
and I've even stopped ants down the

00:04:46,200 --> 00:04:50,700
bottom there after the talk yesterday

00:04:48,410 --> 00:04:54,210
it's sort of interesting the used to be

00:04:50,700 --> 00:04:56,910
that the joke was that in the WSGI world

00:04:54,210 --> 00:04:59,850
that WSGI frameworks is so easy to write

00:04:56,910 --> 00:05:01,500
everyone wrote one these days it's more

00:04:59,850 --> 00:05:04,560
a case of everyone's writing their own

00:05:01,500 --> 00:05:07,920
WSGI server not the framework so there's

00:05:04,560 --> 00:05:13,650
a proliferation of them and these are

00:05:07,920 --> 00:05:15,180
the main ones you'll hear about overall

00:05:13,650 --> 00:05:16,650
they're a bit of a mixed bag again it's

00:05:15,180 --> 00:05:19,980
really interesting to see the benchmarks

00:05:16,650 --> 00:05:22,530
when people try and compare these all

00:05:19,980 --> 00:05:24,570
these the Unicorn is probably definitely

00:05:22,530 --> 00:05:27,060
it's the best of the standalone ones

00:05:24,570 --> 00:05:28,410
that are available certainly the flavor

00:05:27,060 --> 00:05:32,570
of the month from the one that's

00:05:28,410 --> 00:05:32,570
regarded as the cool web server to use

00:05:32,840 --> 00:05:38,460
but like with paste rocket and the

00:05:35,970 --> 00:05:41,040
cherry pie web WSGI server it's still

00:05:38,460 --> 00:05:43,380
recommended that you put them behind an

00:05:41,040 --> 00:05:46,260
existing traditional web server as with

00:05:43,380 --> 00:05:48,960
web servers use the proxy and that is

00:05:46,260 --> 00:05:51,150
because of the phantom web server being

00:05:48,960 --> 00:05:53,340
able to use the use for static file

00:05:51,150 --> 00:05:54,720
handling but there's also some other

00:05:53,340 --> 00:05:56,160
attributes which come from putting

00:05:54,720 --> 00:05:59,100
behind a front-end web server which I'll

00:05:56,160 --> 00:06:02,730
explain soon so I keep talking about

00:05:59,100 --> 00:06:05,400
phantom web proxy so what actually are

00:06:02,730 --> 00:06:06,690
we talking about there so what we're

00:06:05,400 --> 00:06:08,010
talking about here is we have a fan in

00:06:06,690 --> 00:06:09,990
web server which is the thing that's

00:06:08,010 --> 00:06:14,450
accepting all your HTTP requests from

00:06:09,990 --> 00:06:16,680
the web web browser clients it then will

00:06:14,450 --> 00:06:18,600
for if it's receives a static file

00:06:16,680 --> 00:06:20,100
request will we'll deal with that steady

00:06:18,600 --> 00:06:23,040
file request to surf and send the

00:06:20,100 --> 00:06:24,420
response back for the request is coming

00:06:23,040 --> 00:06:26,870
through which is destined to your

00:06:24,420 --> 00:06:29,550
dynamic web application UWSP Application

00:06:26,870 --> 00:06:33,060
then it will actually proxy that request

00:06:29,550 --> 00:06:36,210
through to your back-end web server or

00:06:33,060 --> 00:06:38,680
WSGI server and it will use the HTTP

00:06:36,210 --> 00:06:42,940
protocol again so it's introducing a

00:06:38,680 --> 00:06:44,820
a extra step then that's what this'll

00:06:42,940 --> 00:06:46,990
slow the architecture I'm talking about

00:06:44,820 --> 00:06:48,940
so all requests for the giant

00:06:46,990 --> 00:06:52,270
dynamically generated contact proxy back

00:06:48,940 --> 00:06:54,430
through and I guess overall what you're

00:06:52,270 --> 00:06:56,680
doing here is that you're saying that no

00:06:54,430 --> 00:06:58,660
one web server is actually the complete

00:06:56,680 --> 00:07:01,270
and ideal solution for everything you'll

00:06:58,660 --> 00:07:02,860
never get that situation so this is

00:07:01,270 --> 00:07:04,360
where you need to start thinking that

00:07:02,860 --> 00:07:05,860
you know and this is where the problem

00:07:04,360 --> 00:07:07,090
with people cry and benchmark all the

00:07:05,860 --> 00:07:08,710
different servers and try and say which

00:07:07,090 --> 00:07:11,590
is the best is that you can't do that

00:07:08,710 --> 00:07:14,080
because you're benchmarking for one

00:07:11,590 --> 00:07:15,430
particular use case usually a hello

00:07:14,080 --> 00:07:17,590
world program which is a totally

00:07:15,430 --> 00:07:19,030
unrealistic use case and saying great

00:07:17,590 --> 00:07:21,250
I'm getting the best performance for

00:07:19,030 --> 00:07:24,130
that that is my perfect solution it's

00:07:21,250 --> 00:07:27,400
never going to be the case you so here

00:07:24,130 --> 00:07:30,520
for a dynamic dynamic web application

00:07:27,400 --> 00:07:32,289
you're going to pick one particular web

00:07:30,520 --> 00:07:34,120
WSGI so which suits your particular

00:07:32,289 --> 00:07:35,080
requirements for your application static

00:07:34,120 --> 00:07:36,550
file serving we're going to use a

00:07:35,080 --> 00:07:38,349
different web server so you start doing

00:07:36,550 --> 00:07:39,759
a model where you mix the different bits

00:07:38,349 --> 00:07:42,870
because it just makes more sense than

00:07:39,759 --> 00:07:45,039
trying to do it all in one one solution

00:07:42,870 --> 00:07:46,740
so you do this you get static file

00:07:45,039 --> 00:07:48,909
handing speed which is far superior

00:07:46,740 --> 00:07:51,190
other benefits that's using the

00:07:48,909 --> 00:07:54,430
front-end web server is that you can

00:07:51,190 --> 00:07:56,919
start implement caching in the actual

00:07:54,430 --> 00:07:59,560
front-end web server and and this is

00:07:56,919 --> 00:08:03,789
important because you know you've WSGI

00:07:59,560 --> 00:08:05,979
is a world called blocking is blocking

00:08:03,789 --> 00:08:08,699
api effectively what that means is that

00:08:05,979 --> 00:08:12,659
it's generally going to be using a fred

00:08:08,699 --> 00:08:14,770
fred paul to handle requests and you

00:08:12,659 --> 00:08:16,630
only gonna have a limited number of

00:08:14,770 --> 00:08:19,900
threads available to handle those

00:08:16,630 --> 00:08:22,300
requests so if you can actually avoid a

00:08:19,900 --> 00:08:24,159
web request getting to your web

00:08:22,300 --> 00:08:26,349
application in the first place that is a

00:08:24,159 --> 00:08:27,699
boon because it means it's one less

00:08:26,349 --> 00:08:29,860
thing that your web application has to

00:08:27,699 --> 00:08:31,840
do and it can be doing other stuff at

00:08:29,860 --> 00:08:33,400
the same time so having a front-end web

00:08:31,840 --> 00:08:36,219
server allows you to start implementing

00:08:33,400 --> 00:08:38,860
caching in the front-end web server yeah

00:08:36,219 --> 00:08:41,279
especially with a some of the web

00:08:38,860 --> 00:08:44,320
servers and we shall mention a moment is

00:08:41,279 --> 00:08:48,220
that it's not just occasionally you can

00:08:44,320 --> 00:08:49,870
actually start to isolate your web

00:08:48,220 --> 00:08:50,540
application which is doing the real work

00:08:49,870 --> 00:08:54,920
from

00:08:50,540 --> 00:08:56,959
slow browser now most people here like

00:08:54,920 --> 00:08:58,279
where Australia we don't have slow we

00:08:56,959 --> 00:09:02,079
don't have fast internet so it's

00:08:58,279 --> 00:09:04,550
everyone here at home you're not on a

00:09:02,079 --> 00:09:07,699
multi-gigabyte land connection on to the

00:09:04,550 --> 00:09:09,920
internet you're on slow a to yourself if

00:09:07,699 --> 00:09:13,519
you're lucky you might get 10 megabits

00:09:09,920 --> 00:09:17,690
per second your ass'll know you might

00:09:13,519 --> 00:09:22,670
get one or two hasn't discovered the

00:09:17,690 --> 00:09:24,259
internet yet and the reason why that's

00:09:22,670 --> 00:09:26,120
an issue is that if you if you go too

00:09:24,259 --> 00:09:28,819
slow web browser which is talking to

00:09:26,120 --> 00:09:30,769
your application directly and it's like

00:09:28,819 --> 00:09:32,569
trickling data for your request headers

00:09:30,769 --> 00:09:35,269
and your request content when posting

00:09:32,569 --> 00:09:39,889
that's tying up again that Fred which is

00:09:35,269 --> 00:09:41,839
in your web application and if you put a

00:09:39,889 --> 00:09:43,910
web server in front especially something

00:09:41,839 --> 00:09:45,529
like engine X then it will actually

00:09:43,910 --> 00:09:47,060
buffer up the request headers and

00:09:45,529 --> 00:09:49,250
actually will buffer up to one megabyte

00:09:47,060 --> 00:09:50,630
of your request content before it even

00:09:49,250 --> 00:09:52,430
bothers to proxy at through to your web

00:09:50,630 --> 00:09:54,800
application so this is where you get

00:09:52,430 --> 00:09:57,050
sort of isolation from your your slow

00:09:54,800 --> 00:10:01,399
clients and that's one of the great

00:09:57,050 --> 00:10:04,430
things for having a front-end and also

00:10:01,399 --> 00:10:05,779
part of that is you can have the web

00:10:04,430 --> 00:10:07,490
application in the front will also

00:10:05,779 --> 00:10:08,990
handle keep alive to the clip browser

00:10:07,490 --> 00:10:13,100
client as well and that's a feature of

00:10:08,990 --> 00:10:15,440
HTTP 1-1 whereby when browser makes a

00:10:13,100 --> 00:10:17,930
request it will actually hold that

00:10:15,440 --> 00:10:19,579
connection open in case it wants to do

00:10:17,930 --> 00:10:24,019
it another request to the same server

00:10:19,579 --> 00:10:25,399
and you know how long a particular web

00:10:24,019 --> 00:10:30,889
server will hold that connection open

00:10:25,399 --> 00:10:33,199
can vary and but again it's just if you

00:10:30,889 --> 00:10:34,699
if your actual web application was doing

00:10:33,199 --> 00:10:36,709
the dynamic stuff is holding that open

00:10:34,699 --> 00:10:38,660
again you're limiting resources and so

00:10:36,709 --> 00:10:39,860
you you bumping off this to the

00:10:38,660 --> 00:10:42,769
front-end web server than the back and

00:10:39,860 --> 00:10:43,880
service doesn't has to handle it so good

00:10:42,769 --> 00:10:45,709
options for front of them server

00:10:43,880 --> 00:10:48,470
anything that is using asynchronous

00:10:45,709 --> 00:10:51,350
aventurine system type in two minutes so

00:10:48,470 --> 00:10:54,019
nginx Cherokee and Leidy Apache it's not

00:10:51,350 --> 00:10:55,579
necessary really a good choice because

00:10:54,019 --> 00:10:57,649
the fact it's using a freedom model and

00:10:55,579 --> 00:10:59,329
you're going to have the same problem as

00:10:57,649 --> 00:11:01,750
if you actually had your web application

00:10:59,329 --> 00:11:01,750
handle it directly

00:11:02,670 --> 00:11:08,320
alternatives to Apache that previous

00:11:05,830 --> 00:11:10,480
example we had using HTTP protocol to

00:11:08,320 --> 00:11:16,330
proxy to food or back-end we can replace

00:11:10,480 --> 00:11:18,720
HTTP with fast CGI it's a protocol that

00:11:16,330 --> 00:11:21,880
came up many years ago it's sort of

00:11:18,720 --> 00:11:23,350
that's a more binary protocol your

00:11:21,880 --> 00:11:24,940
back-end is not then strictly a web

00:11:23,350 --> 00:11:28,090
server as such it's more an application

00:11:24,940 --> 00:11:30,910
server and what happens now is that

00:11:28,090 --> 00:11:33,790
sitting on top of the fast cgi layer or

00:11:30,910 --> 00:11:35,890
it's a wire protocols of sitting on top

00:11:33,790 --> 00:11:39,400
of the socket for in the application

00:11:35,890 --> 00:11:41,680
server is a farce EGR wsgi adapter and

00:11:39,400 --> 00:11:46,390
that way we get you Billy to run wsg on

00:11:41,680 --> 00:11:47,830
top the good points for a faster CGI it

00:11:46,390 --> 00:11:50,050
is language agnostic because it's

00:11:47,830 --> 00:11:52,210
actually is what socket wire protocol

00:11:50,050 --> 00:11:55,900
whereas WSGI is an API within the

00:11:52,210 --> 00:11:58,660
programming language itself and web

00:11:55,900 --> 00:11:59,980
servers some especially with Apache are

00:11:58,660 --> 00:12:01,780
able to actually handle process

00:11:59,980 --> 00:12:05,260
management so you have to worry about it

00:12:01,780 --> 00:12:07,630
so you don't need a supervisor supervise

00:12:05,260 --> 00:12:13,150
or monitor to run up and look after the

00:12:07,630 --> 00:12:14,950
processes and you also have got the

00:12:13,150 --> 00:12:18,610
ability to run your web application as a

00:12:14,950 --> 00:12:21,010
separate user and they also request

00:12:18,610 --> 00:12:26,740
finance another features they have bad

00:12:21,010 --> 00:12:28,810
points the CEO Joe is a method you'll

00:12:26,740 --> 00:12:31,540
often find in web hosting associated web

00:12:28,810 --> 00:12:34,990
hosting environments the problem is that

00:12:31,540 --> 00:12:36,970
it's very popular for hosting PHP and as

00:12:34,990 --> 00:12:38,590
a result for Python generally the

00:12:36,970 --> 00:12:41,170
configuration that the web hosting

00:12:38,590 --> 00:12:43,420
companies used is biased towards Python

00:12:41,170 --> 00:12:46,240
and towards PHP and basically sucks the

00:12:43,420 --> 00:12:47,980
Python and I'll send up so that faces

00:12:46,240 --> 00:12:50,470
are CGI processors will be spawned up

00:12:47,980 --> 00:12:52,390
single-threaded might allow a lot of

00:12:50,470 --> 00:12:55,060
them but it will actually kill them off

00:12:52,390 --> 00:12:57,460
quite quickly because difference between

00:12:55,060 --> 00:12:59,500
PHP and pythons PHP effectively

00:12:57,460 --> 00:13:01,210
loads in the whole app structure of each

00:12:59,500 --> 00:13:02,200
request narrows a little way so it

00:13:01,210 --> 00:13:05,400
doesn't matter if it kills off the

00:13:02,200 --> 00:13:07,390
process of reefs off Python has a

00:13:05,400 --> 00:13:09,700
preference for having a persistent

00:13:07,390 --> 00:13:11,530
process so that's one of the really bad

00:13:09,700 --> 00:13:13,480
points in terms of a stage i especially

00:13:11,530 --> 00:13:14,680
if you use its default configuration or

00:13:13,480 --> 00:13:15,400
on a web hosting environment whether

00:13:14,680 --> 00:13:20,260
it's generally

00:13:15,400 --> 00:13:22,960
set up for PHP my other complaint about

00:13:20,260 --> 00:13:25,870
fast CGI is that - tends to be really

00:13:22,960 --> 00:13:27,280
bit more complicated you talk about PHP

00:13:25,870 --> 00:13:29,560
you just have to drop a PHP file and

00:13:27,280 --> 00:13:30,550
directory and all the work you have to

00:13:29,560 --> 00:13:32,470
worry about it because the actual

00:13:30,550 --> 00:13:34,360
configuration of the hosting environment

00:13:32,470 --> 00:13:37,660
has been set up to do everything it

00:13:34,360 --> 00:13:40,930
needs to do for WSGI you generally have

00:13:37,660 --> 00:13:43,720
to create a main you have to import flop

00:13:40,930 --> 00:13:46,420
you have to actually initialize it until

00:13:43,720 --> 00:13:47,920
it then to execute your application it

00:13:46,420 --> 00:13:50,380
would be very very simple to actually

00:13:47,920 --> 00:13:53,470
set up a mapping in your first CGI

00:13:50,380 --> 00:13:58,450
configuration mod first mod fast TGIM

00:13:53,470 --> 00:14:00,280
what FCI gd2 allow you to just drop a

00:13:58,450 --> 00:14:01,960
WSGI file in there was an application

00:14:00,280 --> 00:14:03,910
entry point and not to worry about all

00:14:01,960 --> 00:14:05,830
that startup code but no one's done it

00:14:03,910 --> 00:14:07,240
and no one seems to care and i don't

00:14:05,830 --> 00:14:11,230
want to do all the web hosting companies

00:14:07,240 --> 00:14:14,320
- bother divert recent alternatives -

00:14:11,230 --> 00:14:17,050
far cgi we have you WSGI fusion

00:14:14,320 --> 00:14:18,640
passenger and mongrel you WSGI starred

00:14:17,050 --> 00:14:21,250
in Python is now branching into other

00:14:18,640 --> 00:14:23,620
languages fusion passenger and mongrel

00:14:21,250 --> 00:14:27,580
started in Ruby and now now started to

00:14:23,620 --> 00:14:30,370
add in support for Python WSGI although

00:14:27,580 --> 00:14:33,850
they both sort of regard as experimental

00:14:30,370 --> 00:14:37,600
I think at this point you WSGI is a

00:14:33,850 --> 00:14:39,340
similar architecture too far CGI it used

00:14:37,600 --> 00:14:42,640
a slight variation on another protocol

00:14:39,340 --> 00:14:44,820
called s CGI which was intended to be a

00:14:42,640 --> 00:14:48,850
simplified version of first of our CGI

00:14:44,820 --> 00:14:50,350
in all of these cases I think actually I

00:14:48,850 --> 00:14:51,970
could be wrong there the process

00:14:50,350 --> 00:14:54,550
management still is distinct from the

00:14:51,970 --> 00:14:56,080
web server so you have to look at other

00:14:54,550 --> 00:14:58,300
that the system's has to provide the

00:14:56,080 --> 00:15:04,660
process management itself or you still

00:14:58,300 --> 00:15:06,220
have to use something separate now the

00:15:04,660 --> 00:15:11,440
reality is I was mentioning before is

00:15:06,220 --> 00:15:14,620
that PHP sort of dominates the language

00:15:11,440 --> 00:15:17,230
web hosting so it's web hosting systems

00:15:14,620 --> 00:15:19,180
tend to be set up for that so what we're

00:15:17,230 --> 00:15:20,890
going to end up with is that web hosting

00:15:19,180 --> 00:15:23,350
companies are going to continue to be

00:15:20,890 --> 00:15:26,620
bothered with PHP because it's it's a

00:15:23,350 --> 00:15:29,320
huge market share compared to Python

00:15:26,620 --> 00:15:31,240
we're never going to avait a situation

00:15:29,320 --> 00:15:34,570
where we get good Python web hosting

00:15:31,240 --> 00:15:36,730
with fast egi some of them are sort of

00:15:34,570 --> 00:15:38,440
DreamHost in particular they sort of K

00:15:36,730 --> 00:15:40,480
try to say I will cater for Ruby and

00:15:38,440 --> 00:15:43,660
they drop the infusion passage which

00:15:40,480 --> 00:15:45,910
does allow you to to have WSGI as well

00:15:43,660 --> 00:15:47,200
but that ultimately we're never going to

00:15:45,910 --> 00:15:49,390
get a good experience I think out of

00:15:47,200 --> 00:15:52,810
cheap web hosting so what we need to

00:15:49,390 --> 00:15:54,040
look for is the these new type of web

00:15:52,810 --> 00:15:56,290
hosting companies that are coming along

00:15:54,040 --> 00:16:00,640
we have dot cloud which is doing

00:15:56,290 --> 00:16:02,650
multi-language with UW SGI and we also

00:16:00,640 --> 00:16:04,150
have things like gondor io api and dan

00:16:02,650 --> 00:16:09,940
goes in and he's given me five minutes

00:16:04,150 --> 00:16:11,470
which means I'm nowhere near finished so

00:16:09,940 --> 00:16:14,589
what we have still is elephant in the

00:16:11,470 --> 00:16:16,540
room is Apache Apache still takes 60% of

00:16:14,589 --> 00:16:19,450
websites and contrast to engineering

00:16:16,540 --> 00:16:21,910
which is not 10% a lot of experience

00:16:19,450 --> 00:16:24,550
with Apache it does have its detractors

00:16:21,910 --> 00:16:27,990
people accuse it of being bloated and

00:16:24,550 --> 00:16:30,130
hard configure but partly that is is

00:16:27,990 --> 00:16:32,980
pythons got a broad deal here because

00:16:30,130 --> 00:16:34,870
people setup Apache for PHP and then

00:16:32,980 --> 00:16:36,670
they try and run on top and they find it

00:16:34,870 --> 00:16:38,170
runs like a dog Ria's lots of memory in

00:16:36,670 --> 00:16:44,290
that's part of their own Fox it didn't

00:16:38,170 --> 00:16:48,100
set up properly for Apache we have mod -

00:16:44,290 --> 00:16:50,680
was an existing way of doing things it's

00:16:48,100 --> 00:16:54,760
dead shouldn't be used any longer but it

00:16:50,680 --> 00:16:56,350
does hold the prime name of mod - and if

00:16:54,760 --> 00:16:59,350
you go and look at Google Trends you'll

00:16:56,350 --> 00:17:01,089
still find that mod - mod WSGI currently

00:16:59,350 --> 00:17:03,640
fighting for who gets the most traffic

00:17:01,089 --> 00:17:06,939
on searches it's still very popular on

00:17:03,640 --> 00:17:10,179
searches but yeah this is D clear that

00:17:06,939 --> 00:17:13,030
one so obviously they said mod WSGI was

00:17:10,179 --> 00:17:17,020
tend to replace mode - learn from mod

00:17:13,030 --> 00:17:20,230
pythons mistakes it tries to focus on

00:17:17,020 --> 00:17:21,880
just being a bridge for WSGI and it has

00:17:20,230 --> 00:17:22,959
notable multiple modes of operation

00:17:21,880 --> 00:17:24,550
which I'll quickly try and go through

00:17:22,959 --> 00:17:25,900
here

00:17:24,550 --> 00:17:27,939
we still have embedded mode which is

00:17:25,900 --> 00:17:29,679
basically how mod Python work this is

00:17:27,939 --> 00:17:34,320
where the interpreters run inside of the

00:17:29,679 --> 00:17:36,520
Apache child processors and if you're

00:17:34,320 --> 00:17:38,500
most people their sites don't actually

00:17:36,520 --> 00:17:41,350
have a great deal of

00:17:38,500 --> 00:17:43,870
low requirement and you could do this

00:17:41,350 --> 00:17:46,210
it's you definitely don't want to do it

00:17:43,870 --> 00:17:48,120
though if you using pre fork MPM in

00:17:46,210 --> 00:17:50,560
Apache because it's actually mobile

00:17:48,120 --> 00:17:53,410
modes again in patch you can set up as

00:17:50,560 --> 00:17:54,880
pre for call worker pre-focus single

00:17:53,410 --> 00:17:56,980
threaded processes workers is

00:17:54,880 --> 00:18:00,310
multi-threaded you definitely want to

00:17:56,980 --> 00:18:03,220
avoid if you can using in pre for camp

00:18:00,310 --> 00:18:04,990
you don't know so use a user's work or

00:18:03,220 --> 00:18:06,490
MPN and if use work or MPN you can get

00:18:04,990 --> 00:18:09,510
away with using Apache same patch of

00:18:06,490 --> 00:18:11,920
static file serving as well

00:18:09,510 --> 00:18:15,160
demon modes the other mode this is

00:18:11,920 --> 00:18:17,620
effectively similar to fast cgi and you

00:18:15,160 --> 00:18:20,320
wsgi where the actual bit of proxying

00:18:17,620 --> 00:18:24,490
going on here to a back-end press demon

00:18:20,320 --> 00:18:26,380
process using apache though you don't

00:18:24,490 --> 00:18:28,300
get a lot of the benefits of sticking an

00:18:26,380 --> 00:18:30,610
async server in front because apache is

00:18:28,300 --> 00:18:34,480
still threaded and you've got resource

00:18:30,610 --> 00:18:37,540
limitations against mostly okay for most

00:18:34,480 --> 00:18:39,400
people start what you can do to make it

00:18:37,540 --> 00:18:45,690
better though is take Apache with

00:18:39,400 --> 00:18:45,690
Medeiros joy oh no

00:18:50,390 --> 00:18:59,800
well keynote just totally vanished I had

00:18:53,510 --> 00:18:59,800
a pop up stupid firewall stuff went off

00:19:00,430 --> 00:19:11,810
okay yeah you can put in genetics in

00:19:02,600 --> 00:19:13,220
front of Apache as well okay this starts

00:19:11,810 --> 00:19:14,750
to bring some of those benefits talking

00:19:13,220 --> 00:19:17,860
for about half a user Nick's in front

00:19:14,750 --> 00:19:20,450
with isolation of slow browser clients

00:19:17,860 --> 00:19:24,860
you can offload static files serving to

00:19:20,450 --> 00:19:26,390
engineers as well and this sort of model

00:19:24,860 --> 00:19:27,980
okay a patch people might say oh well

00:19:26,390 --> 00:19:30,290
Apache is quite heavy weight while would

00:19:27,980 --> 00:19:32,360
I use that instead of guna corn in that

00:19:30,290 --> 00:19:33,830
sort of situation well if you've you've

00:19:32,360 --> 00:19:35,030
got a lot of investment in Apache and

00:19:33,830 --> 00:19:37,190
using other stuff you might still using

00:19:35,030 --> 00:19:38,870
PHP you might have a reliance on Apache

00:19:37,190 --> 00:19:42,710
authentication access controls and

00:19:38,870 --> 00:19:44,030
things like that so it still and also

00:19:42,710 --> 00:19:45,980
the fact that people understand pet

00:19:44,030 --> 00:19:56,360
Cheadle and much more popular so it's

00:19:45,980 --> 00:19:56,750
still good solution ok this Quebec this

00:19:56,360 --> 00:20:00,200
one

00:19:56,750 --> 00:20:02,800
if I can yeah in this particular case

00:20:00,200 --> 00:20:05,630
here we still actually have engineers

00:20:02,800 --> 00:20:08,870
Apache process is doing proxying into

00:20:05,630 --> 00:20:11,210
modules joined demon mode what you can

00:20:08,870 --> 00:20:13,490
also do is is because mod SS jar has

00:20:11,210 --> 00:20:15,620
both embedded mode and daemon mode you

00:20:13,490 --> 00:20:17,900
you could if you want actually just get

00:20:15,620 --> 00:20:21,440
rid of daemon mode and I'm using bedded

00:20:17,900 --> 00:20:24,200
mode of Apache behind in nginx front end

00:20:21,440 --> 00:20:25,610
and you'd only do this so if the Apache

00:20:24,200 --> 00:20:29,180
is basically dedicated to your

00:20:25,610 --> 00:20:30,980
particular web application if you you

00:20:29,180 --> 00:20:33,170
wouldn't do at the end running PHP or

00:20:30,980 --> 00:20:35,000
doing any more complicated stuff and and

00:20:33,170 --> 00:20:37,280
you do know how you do really need to

00:20:35,000 --> 00:20:40,610
know how to you have to really know how

00:20:37,280 --> 00:20:43,550
to configure Patrick properly but yeah

00:20:40,610 --> 00:20:45,020
worker NPM still going to be safe in the

00:20:43,550 --> 00:20:47,210
situation be if you really know how to

00:20:45,020 --> 00:20:50,990
configure Apache then you can actually

00:20:47,210 --> 00:20:51,890
use them using pre for PMPM and that has

00:20:50,990 --> 00:20:56,150
some benefits because you're avoiding

00:20:51,890 --> 00:20:58,240
the multi-threading Gil Gil issues so

00:20:56,150 --> 00:21:00,470
overall is a lot of lots of options

00:20:58,240 --> 00:21:03,770
which I sort of tried to quickly cover

00:21:00,470 --> 00:21:06,620
there too many options

00:21:03,770 --> 00:21:08,630
what should you use well the hosting

00:21:06,620 --> 00:21:11,390
mechanism is not usually where the

00:21:08,630 --> 00:21:12,680
bottleneck is so it's actually really

00:21:11,390 --> 00:21:14,150
important to just use what you feel

00:21:12,680 --> 00:21:16,970
comfortable with what you're able to

00:21:14,150 --> 00:21:19,400
administer identify that different

00:21:16,970 --> 00:21:21,080
servers have different strengths so you

00:21:19,400 --> 00:21:23,390
want to test things with your particular

00:21:21,080 --> 00:21:25,190
application make sure thing you choose

00:21:23,390 --> 00:21:29,690
actually works not not use hello world

00:21:25,190 --> 00:21:31,790
benchmarks and you also may other author

00:21:29,690 --> 00:21:33,560
here talked about WSGI and essentially

00:21:31,790 --> 00:21:36,050
it's a blocking think if you're doing a

00:21:33,560 --> 00:21:38,870
lot of long polling with your

00:21:36,050 --> 00:21:41,450
application away or comment style things

00:21:38,870 --> 00:21:44,750
you may consider instead using those but

00:21:41,450 --> 00:21:46,790
you also may consider using a mix and in

00:21:44,750 --> 00:21:48,560
separate applications send some URL to

00:21:46,790 --> 00:21:51,400
WS join some off to the common

00:21:48,560 --> 00:21:56,510
application most popular obviously

00:21:51,400 --> 00:21:59,930
patchy goony calling you wci and the

00:21:56,510 --> 00:22:01,850
last slide up but overall my my

00:21:59,930 --> 00:22:03,380
suggestion is don't waste of time

00:22:01,850 --> 00:22:05,420
worrying too much about the the web

00:22:03,380 --> 00:22:07,010
service especially initially concentrate

00:22:05,420 --> 00:22:09,650
on removing the bottlenecks in your

00:22:07,010 --> 00:22:12,560
actual application itself and look at

00:22:09,650 --> 00:22:15,410
improving your database performance page

00:22:12,560 --> 00:22:16,970
rendering times caching and so on -

00:22:15,410 --> 00:22:18,350
don't prematurely I try and optimize

00:22:16,970 --> 00:22:19,550
things by try and identify which is the

00:22:18,350 --> 00:22:24,110
quickest server out there because just

00:22:19,550 --> 00:22:26,810
wasting your time and also consider

00:22:24,110 --> 00:22:29,270
looking at monitoring tools for

00:22:26,810 --> 00:22:30,500
production and where I'm working at New

00:22:29,270 --> 00:22:32,300
Relic we're working on something which

00:22:30,500 --> 00:22:33,650
will be really great for that and you

00:22:32,300 --> 00:22:34,520
can come listen to my lightning talk

00:22:33,650 --> 00:22:38,390
about that later

00:22:34,520 --> 00:22:40,880
and also mooning which is more hosts or

00:22:38,390 --> 00:22:42,320
external testing whereas New Relic we're

00:22:40,880 --> 00:22:44,810
looking at performance flowing from

00:22:42,320 --> 00:22:47,300
within your application itself so the

00:22:44,810 --> 00:22:48,620
hosting may contain a small part don't

00:22:47,300 --> 00:22:50,600
get too obsessed with it and don't

00:22:48,620 --> 00:22:52,010
prematurely optimize there's a lot of

00:22:50,600 --> 00:22:53,750
things you can do elsewhere which is

00:22:52,010 --> 00:22:56,680
going to do a lot more to improve the

00:22:53,750 --> 00:22:56,680
performance of application

00:22:58,020 --> 00:23:01,250
and from totally other time

00:23:05,180 --> 00:23:07,240

YouTube URL: https://www.youtube.com/watch?v=PWIvm-uloMg


