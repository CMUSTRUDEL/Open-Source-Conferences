Title: How to maintain big app stacks without losing your mind - Mr. Dylan Jay
Publication date: 2011-08-22
Playlist: PyCon Australia 2011
Description: 
	zc.buildout is a powerful build/configure/deployment tool for creating applications from multiple parts, some not python. It's perfect for sharing a development environment or deploy applications to many hosts.

This tutorial will cover basic concepts, similarity to other tools such as virtual-env, puppet etc as well as practical examples.
zc.buildout has successful been used with web applications such as Plone, django and pyramid.
Captions: 
	00:00:05,310 --> 00:00:11,099
thank you so is anyone here a city

00:00:09,389 --> 00:00:12,269
person and not subscribed to the Syfy

00:00:11,099 --> 00:00:14,250
doll mailing list

00:00:12,269 --> 00:00:19,109
what doesn't turn up to events subscribe

00:00:14,250 --> 00:00:20,730
now that's alright your as long as you

00:00:19,109 --> 00:00:23,699
know about the events because we run

00:00:20,730 --> 00:00:25,949
events every single month so and if

00:00:23,699 --> 00:00:28,550
anyone has ideas about what they want

00:00:25,949 --> 00:00:31,230
presented or wants to present something

00:00:28,550 --> 00:00:33,620
please talk to me we'll just post

00:00:31,230 --> 00:00:36,719
something on the list

00:00:33,620 --> 00:00:40,320
so build out who knows about build out

00:00:36,719 --> 00:00:45,059
here a few people who cool

00:00:40,320 --> 00:00:46,920
I presented a kind of a smaller talk on

00:00:45,059 --> 00:00:48,840
build out and host out last year and I

00:00:46,920 --> 00:00:50,340
realized that you know it still didn't

00:00:48,840 --> 00:00:52,289
really kind of get into the depth and

00:00:50,340 --> 00:00:55,050
describe how it work and how can solve

00:00:52,289 --> 00:00:58,289
problems I wanted to do a much more

00:00:55,050 --> 00:01:00,780
in-depth to talk about it so a little

00:00:58,289 --> 00:01:04,670
bit about the history was it was made by

00:01:00,780 --> 00:01:06,750
a guy called Jim Fulton who's a scarily

00:01:04,670 --> 00:01:11,250
looks like an average guy but and dense

00:01:06,750 --> 00:01:12,600
a lot of stuff so what problem does it

00:01:11,250 --> 00:01:14,159
solve this is the biggest problem I had

00:01:12,600 --> 00:01:15,990
with coming up with this tall our

00:01:14,159 --> 00:01:18,049
company uses build-out for everything

00:01:15,990 --> 00:01:20,400
you know it has changed the way we do

00:01:18,049 --> 00:01:22,170
deployments manage our development

00:01:20,400 --> 00:01:24,240
environments we can't really live

00:01:22,170 --> 00:01:26,369
without it we'd have to change a lot of

00:01:24,240 --> 00:01:28,229
our processes but at the same time

00:01:26,369 --> 00:01:30,420
coming up with a you know single sound

00:01:28,229 --> 00:01:32,340
bite off of what it actually does and

00:01:30,420 --> 00:01:34,350
how it fits into things was really hard

00:01:32,340 --> 00:01:39,360
so I thought about all the things that

00:01:34,350 --> 00:01:41,460
it does do it's it's good for isolating

00:01:39,360 --> 00:01:44,369
Python libraries or isolated Python

00:01:41,460 --> 00:01:46,619
environments so that's a little like

00:01:44,369 --> 00:01:52,229
virtual in which a lot of people will

00:01:46,619 --> 00:01:54,299
know it helps managing dependencies in

00:01:52,229 --> 00:01:56,159
versions so you get a you know a set of

00:01:54,299 --> 00:01:59,250
the exact versions you want or you can

00:01:56,159 --> 00:02:00,930
give a list of exactly the the different

00:01:59,250 --> 00:02:03,060
Python libraries that you want in the

00:02:00,930 --> 00:02:08,700
particular environment that's a little

00:02:03,060 --> 00:02:11,550
bit like pit requires it also does

00:02:08,700 --> 00:02:13,180
things like compiles things compiled see

00:02:11,550 --> 00:02:15,849
see

00:02:13,180 --> 00:02:18,040
Jools or it compiles you know things

00:02:15,849 --> 00:02:22,239
like in genex or installs things like in

00:02:18,040 --> 00:02:23,739
genex so it's a little bit like make or

00:02:22,239 --> 00:02:28,480
an antenna if you're familiar with the

00:02:23,739 --> 00:02:30,519
java well it creates configuration for

00:02:28,480 --> 00:02:32,969
you it helps you reproduce environments

00:02:30,519 --> 00:02:35,560
so it's good for we're doing deployment

00:02:32,969 --> 00:02:38,500
a little bit like chef and puppet works

00:02:35,560 --> 00:02:42,129
a bit differently but it can be used to

00:02:38,500 --> 00:02:45,129
solve those same sort of problems it's

00:02:42,129 --> 00:02:47,859
good for simplifying templates so that

00:02:45,129 --> 00:02:50,200
you don't have to fill out a big lot of

00:02:47,859 --> 00:02:53,489
boilerplate code for certain things you

00:02:50,200 --> 00:02:56,290
can get build out to do that for you you

00:02:53,489 --> 00:03:01,840
can use pastÃ©is script to do similar

00:02:56,290 --> 00:03:03,700
sorts of things so what it does though

00:03:01,840 --> 00:03:06,459
is it puts does all of that in one

00:03:03,700 --> 00:03:07,870
configuration file and that's that's the

00:03:06,459 --> 00:03:10,959
kind of key to it is that we're doing it

00:03:07,870 --> 00:03:12,969
all in one spot with one configuration

00:03:10,959 --> 00:03:14,439
file that you can check out and build

00:03:12,969 --> 00:03:17,199
your whole environment with all those

00:03:14,439 --> 00:03:18,370
different things so I was actually

00:03:17,199 --> 00:03:20,889
thinking about this this morning I was

00:03:18,370 --> 00:03:24,010
like what's the analogy here and this

00:03:20,889 --> 00:03:28,000
morning I realized what we got is gaffer

00:03:24,010 --> 00:03:30,129
tape that is what build-out is it's it's

00:03:28,000 --> 00:03:32,379
the thing that glues everything together

00:03:30,129 --> 00:03:35,349
now that might sound a little bit

00:03:32,379 --> 00:03:37,150
temporary and a little bit sort of shaky

00:03:35,349 --> 00:03:38,709
but this stuff is used in production

00:03:37,150 --> 00:03:40,989
environments we use it for you know

00:03:38,709 --> 00:03:42,599
doing everything from you know city

00:03:40,989 --> 00:03:45,400
buses side and things like that

00:03:42,599 --> 00:03:47,949
so as a way of an example a friend of

00:03:45,400 --> 00:03:49,359
mine was a roadie and they used to go to

00:03:47,949 --> 00:03:51,129
this one particular pub and they had

00:03:49,359 --> 00:03:54,310
this ongoing joke with the public in

00:03:51,129 --> 00:03:56,199
their Andes they had a bit the public in

00:03:54,310 --> 00:03:58,769
bed that they couldn't gaffer tape down

00:03:56,199 --> 00:04:00,609
their forklift so that it wouldn't move

00:03:58,769 --> 00:04:03,069
the roadie won the bet

00:04:00,609 --> 00:04:06,209
so gaffer tape strong stuff don't

00:04:03,069 --> 00:04:06,209
underestimate gaffer tape

00:04:06,220 --> 00:04:10,750
there's also the old joke you know

00:04:08,259 --> 00:04:15,699
gaffer tape it's like the force has a

00:04:10,750 --> 00:04:18,060
light side dark side and holds holds the

00:04:15,699 --> 00:04:22,599
universe together I think there was a

00:04:18,060 --> 00:04:24,340
mr. word so build out a little bit like

00:04:22,599 --> 00:04:25,330
that it does have a dark side some

00:04:24,340 --> 00:04:26,380
people get a little bit frustrated and

00:04:25,330 --> 00:04:30,010
I'll talk about

00:04:26,380 --> 00:04:31,630
some of those issues a bit later so this

00:04:30,010 --> 00:04:34,840
talk is really about application stats

00:04:31,630 --> 00:04:37,960
this is these first three things that

00:04:34,840 --> 00:04:39,220
we've done you know so that's probably

00:04:37,960 --> 00:04:40,510
my favorite stack right at the top there

00:04:39,220 --> 00:04:42,490
where we're using Ingenix

00:04:40,510 --> 00:04:46,540
varnish how many people use hard proxy

00:04:42,490 --> 00:04:51,730
here if anyone does load-balancing hi

00:04:46,540 --> 00:04:54,250
proxy is friggin awesome so these are

00:04:51,730 --> 00:04:57,880
you know things that we configure deploy

00:04:54,250 --> 00:05:00,310
manage always build up and we do all our

00:04:57,880 --> 00:05:02,110
moon and staff using build out we can we

00:05:00,310 --> 00:05:04,210
can take it from one machine we can

00:05:02,110 --> 00:05:06,370
deploy it to another machine with

00:05:04,210 --> 00:05:08,140
exactly the same environment it's pretty

00:05:06,370 --> 00:05:09,160
much anything you want in there so what

00:05:08,140 --> 00:05:13,600
we're talking about is this problem

00:05:09,160 --> 00:05:14,800
space of joining things together putting

00:05:13,600 --> 00:05:16,540
them all in the right versions

00:05:14,800 --> 00:05:19,930
configuring them all having something

00:05:16,540 --> 00:05:21,270
running from running one command so how

00:05:19,930 --> 00:05:25,690
does it work

00:05:21,270 --> 00:05:27,610
build-out has an any file type syntax so

00:05:25,690 --> 00:05:29,980
you'll generally have something that

00:05:27,610 --> 00:05:33,850
ends in dot C of gene the default is a

00:05:29,980 --> 00:05:35,260
build up CFG and we've got you always

00:05:33,850 --> 00:05:36,670
have to have a build out section at the

00:05:35,260 --> 00:05:39,130
top and you have to have our parts

00:05:36,670 --> 00:05:41,050
equals everything after that is optional

00:05:39,130 --> 00:05:42,610
so but you know obviously not going to

00:05:41,050 --> 00:05:43,260
get a lot if you don't have any parts to

00:05:42,610 --> 00:05:45,370
it

00:05:43,260 --> 00:05:48,160
so then you've got a whole bunch of

00:05:45,370 --> 00:05:51,070
these parts so you can name it whatever

00:05:48,160 --> 00:05:53,440
you want in the parts section if it's

00:05:51,070 --> 00:05:56,670
referenced in parts equals then it's

00:05:53,440 --> 00:05:59,980
going to execute that particular part

00:05:56,670 --> 00:06:01,770
all parts have they don't have to have a

00:05:59,980 --> 00:06:07,770
recipe but if they have a recipe equals

00:06:01,770 --> 00:06:10,270
then that is a easy installable package

00:06:07,770 --> 00:06:12,970
probably on pipeline so the recipe is

00:06:10,270 --> 00:06:15,370
what it is is a package that says I know

00:06:12,970 --> 00:06:17,620
how to do something in build up well

00:06:15,370 --> 00:06:23,820
then you have a whole bunch of arguments

00:06:17,620 --> 00:06:26,050
to it and what happens when you run that

00:06:23,820 --> 00:06:28,360
depends on what the recipes do so bill

00:06:26,050 --> 00:06:29,980
down and itself that's very little it's

00:06:28,360 --> 00:06:35,169
just using these different recipe

00:06:29,980 --> 00:06:37,900
plugins to do stuff so if we here's one

00:06:35,169 --> 00:06:39,400
way you can start using build up you can

00:06:37,900 --> 00:06:41,410
easy install

00:06:39,400 --> 00:06:44,110
let's either build out and then go build

00:06:41,410 --> 00:06:46,060
out in it and it will create your bin

00:06:44,110 --> 00:06:49,630
directory in the bin directory there

00:06:46,060 --> 00:06:51,699
will be a bin slash build out there's a

00:06:49,630 --> 00:06:53,680
part section where each of the different

00:06:51,699 --> 00:06:55,840
parts will install different bits and

00:06:53,680 --> 00:06:56,860
pieces that will change every time you

00:06:55,840 --> 00:06:59,710
run the build out and we'll

00:06:56,860 --> 00:07:03,070
resynchronize things develop X is a

00:06:59,710 --> 00:07:05,610
special thing for managing eggs that are

00:07:03,070 --> 00:07:05,610
under development

00:07:14,220 --> 00:07:17,180
which one don't push

00:07:20,979 --> 00:07:23,979
yeah

00:07:25,220 --> 00:07:32,750
still Kansai and there is okay so the

00:07:30,140 --> 00:07:34,340
idea is that once you get started you've

00:07:32,750 --> 00:07:37,880
initialized your bill down and you've

00:07:34,340 --> 00:07:39,380
got an isolated environment so what goes

00:07:37,880 --> 00:07:41,270
on and build out stays and build out

00:07:39,380 --> 00:07:44,150
generally the recipes should be designed

00:07:41,270 --> 00:07:45,680
in a way that they install stuff into

00:07:44,150 --> 00:07:47,930
your local build out directory so that

00:07:45,680 --> 00:07:50,180
you can take a build a directory move it

00:07:47,930 --> 00:07:51,890
somewhere else you can have multiple

00:07:50,180 --> 00:07:53,720
different build out directories on your

00:07:51,890 --> 00:07:55,880
computer each of which don't interfere

00:07:53,720 --> 00:07:57,920
with the other of course the recipes

00:07:55,880 --> 00:07:59,330
cannot do almost anything and sometimes

00:07:57,920 --> 00:08:00,860
they do have side effects you can get

00:07:59,330 --> 00:08:02,720
them to install stuff in your package

00:08:00,860 --> 00:08:04,250
manager if you really want but generally

00:08:02,720 --> 00:08:07,160
the idea of build-out is that all

00:08:04,250 --> 00:08:09,610
recipes have an isolated environment

00:08:07,160 --> 00:08:14,990
there's a there's a general convention

00:08:09,610 --> 00:08:18,470
that not only do you have not only do

00:08:14,990 --> 00:08:20,210
you have like a so you're changing part

00:08:18,470 --> 00:08:21,680
of your configuration goes in part so

00:08:20,210 --> 00:08:24,050
you're sort of you know things that

00:08:21,680 --> 00:08:26,660
you'll want to install that's under the

00:08:24,050 --> 00:08:28,370
control of the recipe that you might

00:08:26,660 --> 00:08:29,930
have a slash bar where you put database

00:08:28,370 --> 00:08:32,390
stuff which doesn't change every time

00:08:29,930 --> 00:08:34,000
the build up runs and the bin directory

00:08:32,390 --> 00:08:35,960
is where all the scripts get installed

00:08:34,000 --> 00:08:37,760
so instead of having things in your

00:08:35,960 --> 00:08:41,479
system path suddenly you're doing bin

00:08:37,760 --> 00:08:45,290
slash build out bin slash Python things

00:08:41,479 --> 00:08:46,730
like that okay so here's the simplest

00:08:45,290 --> 00:08:49,580
HelloWorld I could think of and it does

00:08:46,730 --> 00:08:53,230
involve any Python actually so we're

00:08:49,580 --> 00:08:53,230
using two recipes in this build out

00:08:53,560 --> 00:08:59,840
we're using this one here which is

00:08:58,010 --> 00:09:00,940
called collective recipe template all

00:08:59,840 --> 00:09:03,290
that does is

00:09:00,940 --> 00:09:05,660
defines where you want the output to go

00:09:03,290 --> 00:09:08,210
and what the input is the input could be

00:09:05,660 --> 00:09:11,180
a file in this case I'm just using an

00:09:08,210 --> 00:09:13,880
inline input so we're basically just

00:09:11,180 --> 00:09:18,770
putting echo hello world into a file in

00:09:13,880 --> 00:09:23,330
the bin directory and then we want to

00:09:18,770 --> 00:09:29,360
make it executable so we've referenced

00:09:23,330 --> 00:09:31,990
the output there made it executable so

00:09:29,360 --> 00:09:31,990
if I run that

00:09:33,560 --> 00:09:37,130
if I run that

00:09:38,820 --> 00:09:47,570
let's not run that if you run that you

00:09:43,890 --> 00:09:47,570
go bin /hello it says hello world

00:09:54,850 --> 00:09:59,829
so one of the interesting things is this

00:09:57,729 --> 00:10:02,649
idea of substitution so you'll notice

00:09:59,829 --> 00:10:03,729
this syntax here so what we're doing is

00:10:02,649 --> 00:10:07,449
we were referencing the build out

00:10:03,729 --> 00:10:09,279
section and there is a hidden variable

00:10:07,449 --> 00:10:11,949
something that's generated by build-out

00:10:09,279 --> 00:10:14,769
itself that you can expect a file which

00:10:11,949 --> 00:10:17,199
has been directory in this case we're

00:10:14,769 --> 00:10:22,049
referencing something that we can sit on

00:10:17,199 --> 00:10:22,049
screen so we're going hello world output

00:10:22,319 --> 00:10:27,009
so you can make as many of these as you

00:10:24,850 --> 00:10:28,749
want there's a syntax where you can just

00:10:27,009 --> 00:10:29,829
remove that and have the colon and it

00:10:28,749 --> 00:10:34,029
will just reference something in the

00:10:29,829 --> 00:10:35,819
same section the same part now one thing

00:10:34,029 --> 00:10:38,559
you'll notice that's difference between

00:10:35,819 --> 00:10:42,639
this one and this one can anyone see

00:10:38,559 --> 00:10:46,139
what the differences anyway it's a bit

00:10:42,639 --> 00:10:48,329
up the top there so because this

00:10:46,139 --> 00:10:50,739
reference is something in hello world

00:10:48,329 --> 00:10:54,100
what this will mean is that build-out

00:10:50,739 --> 00:10:56,439
will go and try and execute this

00:10:54,100 --> 00:10:59,319
particular part and it'll say oh

00:10:56,439 --> 00:11:01,329
actually in order to execute this I'm

00:10:59,319 --> 00:11:03,639
going to need this so then it will this

00:11:01,329 --> 00:11:05,229
will actually be executed first and this

00:11:03,639 --> 00:11:07,029
will be executed second and there's no

00:11:05,229 --> 00:11:10,299
need to specifically say that we're

00:11:07,029 --> 00:11:14,289
using that so it's a little bit like

00:11:10,299 --> 00:11:17,949
make in that regard so installing

00:11:14,289 --> 00:11:20,319
scripts this is a little bit more

00:11:17,949 --> 00:11:22,809
complicated than it needs to be but this

00:11:20,319 --> 00:11:26,109
is Etsy the recipe leg is the equivalent

00:11:22,809 --> 00:11:31,779
of easy install and all it really takes

00:11:26,109 --> 00:11:34,479
is the eggs here so here we're using

00:11:31,779 --> 00:11:38,409
something called fabulous which displays

00:11:34,479 --> 00:11:43,629
kind of ASCII art in bright shining

00:11:38,409 --> 00:11:47,229
colors and stuff so in order to get it

00:11:43,629 --> 00:11:50,319
to do something I've cheated a little

00:11:47,229 --> 00:11:52,509
bit and use this initialization and set

00:11:50,319 --> 00:11:56,409
up an entry point and so on so that when

00:11:52,509 --> 00:11:59,589
you run this it will actually run this

00:11:56,409 --> 00:12:01,559
piece of Python here normally you don't

00:11:59,589 --> 00:12:05,139
need to do that you can just go you know

00:12:01,559 --> 00:12:07,320
these will define their own entry points

00:12:05,139 --> 00:12:09,210
and create scripts so if you have

00:12:07,320 --> 00:12:11,610
install something by easy install and

00:12:09,210 --> 00:12:13,650
then it creates a script in your path

00:12:11,610 --> 00:12:15,960
this is going to do the same thing if

00:12:13,650 --> 00:12:17,610
you have an entry point in one of these

00:12:15,960 --> 00:12:19,470
eggs it will create a script in bin and

00:12:17,610 --> 00:12:19,890
then you can suddenly use it so if you

00:12:19,470 --> 00:12:22,830
go

00:12:19,890 --> 00:12:24,930
zette see recipe eggs equals a star it

00:12:22,830 --> 00:12:27,720
will create all the paster scripts in

00:12:24,930 --> 00:12:29,880
your local build up directory and then

00:12:27,720 --> 00:12:38,390
you can do bin slash space stuff you

00:12:29,880 --> 00:12:38,390
know server or whatever you want so

00:12:47,040 --> 00:12:53,670
so I think it's quite useful like this

00:12:52,290 --> 00:12:55,290
is not something you'd normally want to

00:12:53,670 --> 00:12:56,490
do but like it's really useful to see

00:12:55,290 --> 00:13:02,700
what is actually happening under the

00:12:56,490 --> 00:13:04,890
covers houses working so in the 1.5 it's

00:13:02,700 --> 00:13:07,730
it's change litter 1.5 but this is

00:13:04,890 --> 00:13:10,290
roughly what happens inside one of these

00:13:07,730 --> 00:13:12,510
scripts that get generated all it's

00:13:10,290 --> 00:13:15,570
doing is manipulating the system path

00:13:12,510 --> 00:13:18,110
and calling the actual piece of Python

00:13:15,570 --> 00:13:20,960
code which represents the entry point so

00:13:18,110 --> 00:13:23,400
it's not it's not really rocket science

00:13:20,960 --> 00:13:28,680
it's reasonably simple to understand

00:13:23,400 --> 00:13:30,810
under the hood so recipes again you

00:13:28,680 --> 00:13:32,730
probably aren't going to be writing a

00:13:30,810 --> 00:13:35,160
recipe but I think understanding how

00:13:32,730 --> 00:13:37,110
recipes work helps you understand what's

00:13:35,160 --> 00:13:38,730
going on with build out instead of

00:13:37,110 --> 00:13:40,740
reading these build up to toriel's and

00:13:38,730 --> 00:13:42,330
say you know oh it installs this and it

00:13:40,740 --> 00:13:46,970
does this if you understand how they

00:13:42,330 --> 00:13:50,760
work a little bit I think it helps so

00:13:46,970 --> 00:13:55,590
here's an example recipe all the recipes

00:13:50,760 --> 00:13:57,090
as to do is have a class doesn't have to

00:13:55,590 --> 00:13:58,650
inherit from anything it just has to

00:13:57,090 --> 00:14:02,580
have three methods that has to have an

00:13:58,650 --> 00:14:05,400
init and install and an update so the

00:14:02,580 --> 00:14:07,200
init is called when the recipe part

00:14:05,400 --> 00:14:10,110
first gets created and gets passed

00:14:07,200 --> 00:14:11,670
options which is a dictionary so it's

00:14:10,110 --> 00:14:13,920
getting past all the arguments that that

00:14:11,670 --> 00:14:16,350
went in it's getting past its name and

00:14:13,920 --> 00:14:20,760
it gets past the build out object which

00:14:16,350 --> 00:14:23,160
is like a global state then we can set

00:14:20,760 --> 00:14:24,780
various different things that we want

00:14:23,160 --> 00:14:28,020
out of the options say or to store the

00:14:24,780 --> 00:14:30,570
options itself so here we're getting

00:14:28,020 --> 00:14:34,580
we're getting we're expecting an

00:14:30,570 --> 00:14:37,590
argument called input we're setting an

00:14:34,580 --> 00:14:39,960
output all ready to go for when we do

00:14:37,590 --> 00:14:42,510
something and we're setting a location

00:14:39,960 --> 00:14:44,940
which in this case we're using the

00:14:42,510 --> 00:14:48,240
global built out state to say we want

00:14:44,940 --> 00:14:51,480
the bin directory one hello object to be

00:14:48,240 --> 00:14:53,100
created so then what it does is it says

00:14:51,480 --> 00:14:54,630
initialized all of them it's worked out

00:14:53,100 --> 00:14:58,380
the ordering based on those dependencies

00:14:54,630 --> 00:14:59,730
we saw before and it's going and running

00:14:58,380 --> 00:15:02,879
the install

00:14:59,730 --> 00:15:04,319
so it runs the install does a whole

00:15:02,879 --> 00:15:05,779
bunch of stuff it could download things

00:15:04,319 --> 00:15:09,600
off the internet it can create

00:15:05,779 --> 00:15:12,869
configuration files the key part here is

00:15:09,600 --> 00:15:15,929
that what install returns is a list of

00:15:12,869 --> 00:15:17,999
files that should be monitored so it's a

00:15:15,929 --> 00:15:19,739
list of files that were created as by

00:15:17,999 --> 00:15:23,100
the build up now what that means is that

00:15:19,739 --> 00:15:25,649
if any of those files get deleted for

00:15:23,100 --> 00:15:27,720
whatever reason if they if any of these

00:15:25,649 --> 00:15:29,519
inputs change then this will get

00:15:27,720 --> 00:15:34,230
reinstalled and build that will take

00:15:29,519 --> 00:15:35,519
care of that for you update itself it's

00:15:34,230 --> 00:15:39,089
just something that'll get run every

00:15:35,519 --> 00:15:40,829
single time so if the options don't

00:15:39,089 --> 00:15:43,919
change if any of the inputs into this

00:15:40,829 --> 00:15:46,049
recipe don't change if any of the files

00:15:43,919 --> 00:15:47,429
aren't accidentally deleted or anything

00:15:46,049 --> 00:15:49,049
then it's the update that would be

00:15:47,429 --> 00:15:55,230
called instead so that just gets called

00:15:49,049 --> 00:15:57,720
every time here's something that that we

00:15:55,230 --> 00:15:59,790
use a lot it's a it's what's called an

00:15:57,720 --> 00:16:02,279
extension so it's slightly different in

00:15:59,790 --> 00:16:06,749
the recipe and mr. developer's this cool

00:16:02,279 --> 00:16:10,919
thing that lets you check things out so

00:16:06,749 --> 00:16:12,359
you define a sources section and you can

00:16:10,919 --> 00:16:16,379
have all these different definitions of

00:16:12,359 --> 00:16:20,249
all these projects it can be SVN it

00:16:16,379 --> 00:16:23,519
compute mercurial and what mr. developer

00:16:20,249 --> 00:16:26,249
will do again I don't know why it's not

00:16:23,519 --> 00:16:29,069
switching but anyway

00:16:26,249 --> 00:16:33,179
is it'll create a develop command so you

00:16:29,069 --> 00:16:37,199
then go bin develop check out hallo

00:16:33,179 --> 00:16:39,449
world or bin develop you know update

00:16:37,199 --> 00:16:41,279
everything it gives you a whole bunch of

00:16:39,449 --> 00:16:43,769
handy things to manage lots and lots of

00:16:41,279 --> 00:16:45,209
different source code projects and it

00:16:43,769 --> 00:16:46,529
does this you've got this auto check out

00:16:45,209 --> 00:16:48,089
here which means that as soon as the

00:16:46,529 --> 00:16:52,049
buildups created we'll go check those

00:16:48,089 --> 00:16:55,169
out and it does a little thing behind

00:16:52,049 --> 00:16:57,839
the scenes where it will put those eggs

00:16:55,169 --> 00:17:00,449
into the develop space we then build out

00:16:57,839 --> 00:17:05,029
so they become available to any

00:17:00,449 --> 00:17:07,230
particular recipe in there so and when

00:17:05,029 --> 00:17:08,819
and said see that recipe don't egg goes

00:17:07,230 --> 00:17:10,169
out to try and get the things it will

00:17:08,819 --> 00:17:11,970
notice and say ah we're going to develop

00:17:10,169 --> 00:17:13,500
version that overwrites in

00:17:11,970 --> 00:17:16,319
other you know specification we're

00:17:13,500 --> 00:17:17,640
looking for there's a another way of

00:17:16,319 --> 00:17:19,500
doing it which I didn't show here we can

00:17:17,640 --> 00:17:22,049
go develop equals and just point it to

00:17:19,500 --> 00:17:23,520
the package directory and that will do

00:17:22,049 --> 00:17:32,789
the same thing if you don't want to

00:17:23,520 --> 00:17:35,970
worry about mr. developer said CMMI this

00:17:32,789 --> 00:17:40,559
is one that also gets used a lot so what

00:17:35,970 --> 00:17:44,610
we're doing here so what were we doing

00:17:40,559 --> 00:17:47,100
here is we are creating a slightly

00:17:44,610 --> 00:17:49,650
industrial version of plumb so we've got

00:17:47,100 --> 00:17:51,600
our two recipe which does a whole lot of

00:17:49,650 --> 00:17:56,250
things like configure zouk which is a

00:17:51,600 --> 00:17:58,440
web server web application server we've

00:17:56,250 --> 00:18:00,539
told it that in we want to use our own

00:17:58,440 --> 00:18:02,190
custom package called hello world pone

00:18:00,539 --> 00:18:04,679
this won't run by the way it'd be nice

00:18:02,190 --> 00:18:07,860
if I wrote that but it doesn't exist we

00:18:04,679 --> 00:18:09,539
want to use plone in fact if in the

00:18:07,860 --> 00:18:12,179
setup that py if I had a you know

00:18:09,539 --> 00:18:13,409
install requires you know clone in here

00:18:12,179 --> 00:18:16,350
then you wouldn't even need to put that

00:18:13,409 --> 00:18:18,539
that would all get pulled in for you we

00:18:16,350 --> 00:18:21,419
said what address it runs on we're doing

00:18:18,539 --> 00:18:23,039
the CMMI for varnish so we've told it go

00:18:21,419 --> 00:18:26,159
get the latest version so you don't have

00:18:23,039 --> 00:18:27,809
to rely on whatever operating system

00:18:26,159 --> 00:18:30,390
whether they have the latest version of

00:18:27,809 --> 00:18:33,980
varnish varnish has a security patch we

00:18:30,390 --> 00:18:36,120
can say go and get the latest version a

00:18:33,980 --> 00:18:39,000
little bit time-consuming in that it's

00:18:36,120 --> 00:18:41,280
going to actually build it but again

00:18:39,000 --> 00:18:44,460
it's the whole thing of we test and

00:18:41,280 --> 00:18:46,440
develop a version and we know it works

00:18:44,460 --> 00:18:48,450
in development and then we roll it out

00:18:46,440 --> 00:18:50,250
into production using the same bill down

00:18:48,450 --> 00:18:52,440
and we get exactly the same environment

00:18:50,250 --> 00:18:55,740
so we can guarantee what we're working

00:18:52,440 --> 00:18:57,450
with and then we've got a someone's

00:18:55,740 --> 00:19:00,150
going to write this varnish recipe that

00:18:57,450 --> 00:19:04,470
does all the configuration for us for a

00:19:00,150 --> 00:19:06,600
standard casing environment for plone so

00:19:04,470 --> 00:19:08,490
we've just said what the backend so

00:19:06,600 --> 00:19:11,640
that's just going to be act like a

00:19:08,490 --> 00:19:16,559
reverse proxy going through to our plain

00:19:11,640 --> 00:19:18,659
instance and that's that reference is

00:19:16,559 --> 00:19:21,030
the build location so we're done we've

00:19:18,659 --> 00:19:23,510
got a case inversion table clone running

00:19:21,030 --> 00:19:23,510
on the system

00:19:25,270 --> 00:19:28,670
although I have nice notice they're both

00:19:27,350 --> 00:19:30,820
running on the same port so that won't

00:19:28,670 --> 00:19:30,820
work

00:19:31,480 --> 00:19:37,550
so versions of software you can use the

00:19:35,840 --> 00:19:42,100
syntax like this and you can say I want

00:19:37,550 --> 00:19:44,750
clone version anything above 4.1

00:19:42,100 --> 00:19:45,820
generally you don't do it that way you

00:19:44,750 --> 00:19:50,810
do it more like this

00:19:45,820 --> 00:19:52,130
so you have a version section and you

00:19:50,810 --> 00:19:53,240
can specify the name of the version

00:19:52,130 --> 00:19:55,250
section but generally you call it

00:19:53,240 --> 00:19:56,810
versions and then you can list a whole

00:19:55,250 --> 00:20:00,920
bunch of different versions of what you

00:19:56,810 --> 00:20:02,960
want so quite an important if you run

00:20:00,920 --> 00:20:04,940
build out just by itself with no extra

00:20:02,960 --> 00:20:07,880
arguments it will try and get the latest

00:20:04,940 --> 00:20:09,890
version of every egg and that's normally

00:20:07,880 --> 00:20:13,940
a bad thing it will go and upgrade

00:20:09,890 --> 00:20:18,230
things there are some certain things you

00:20:13,940 --> 00:20:19,610
can do like Pro first stable for I think

00:20:18,230 --> 00:20:21,230
it's prefer stable or something we say

00:20:19,610 --> 00:20:23,720
don't get me development versions of

00:20:21,230 --> 00:20:26,990
eggs you can do things like turn newest

00:20:23,720 --> 00:20:28,490
mode off which says just give me exactly

00:20:26,990 --> 00:20:31,510
what you got last time don't go out and

00:20:28,490 --> 00:20:33,950
try and find a new version of anything

00:20:31,510 --> 00:20:35,840
but the safest safest way of doing

00:20:33,950 --> 00:20:37,790
things is to pin your versions and say I

00:20:35,840 --> 00:20:43,430
want exactly this version of this

00:20:37,790 --> 00:20:44,660
package so one of the ways that the

00:20:43,430 --> 00:20:47,630
plain community for instance to solve

00:20:44,660 --> 00:20:50,810
this issue is that you can use this

00:20:47,630 --> 00:20:52,910
extends element here where you can have

00:20:50,810 --> 00:20:55,850
one build our file extend from another

00:20:52,910 --> 00:20:58,250
build up file and they've created a

00:20:55,850 --> 00:21:00,770
versions or what they call a known good

00:20:58,250 --> 00:21:02,120
set which is just another config file

00:21:00,770 --> 00:21:04,520
with all the different versions and so

00:21:02,120 --> 00:21:08,120
that if you are creating a plain

00:21:04,520 --> 00:21:09,620
instance and you want the 4.1 version

00:21:08,120 --> 00:21:11,090
upload all you got to do is extend your

00:21:09,620 --> 00:21:16,490
build up from here and it will give you

00:21:11,090 --> 00:21:18,080
all the right bits and pieces now

00:21:16,490 --> 00:21:19,940
version conflicts this is this is the

00:21:18,080 --> 00:21:21,950
thing that kind of makes people cry a

00:21:19,940 --> 00:21:23,420
little build up build up and I think to

00:21:21,950 --> 00:21:26,990
be fair it's not necessarily a

00:21:23,420 --> 00:21:31,000
build-outs problem it's a it's a fault

00:21:26,990 --> 00:21:35,710
of Pi P and and how we specify versions

00:21:31,000 --> 00:21:38,289
of packages such as a packaging problem

00:21:35,710 --> 00:21:40,000
what build-out does is it runs through

00:21:38,289 --> 00:21:41,710
each of the recipes in order and it says

00:21:40,000 --> 00:21:43,090
okay I need this package I don't have

00:21:41,710 --> 00:21:45,549
this package I'm going to go out and

00:21:43,090 --> 00:21:46,750
grab fine look up the index server the

00:21:45,549 --> 00:21:49,840
Popey I'm going to find the package

00:21:46,750 --> 00:21:52,390
version I'm going to download it and it

00:21:49,840 --> 00:21:54,789
will try and pick the latest version now

00:21:52,390 --> 00:21:57,100
the problem is is that you may download

00:21:54,789 --> 00:21:59,380
a later version of the particular

00:21:57,100 --> 00:22:02,320
package and then later on it gets some

00:21:59,380 --> 00:22:03,909
other thing has a once that same package

00:22:02,320 --> 00:22:05,649
but it's saying are you know in the

00:22:03,909 --> 00:22:07,210
setup that people are saying are we want

00:22:05,649 --> 00:22:09,250
less than this version we can't we're

00:22:07,210 --> 00:22:11,620
not allowed to operate with anything

00:22:09,250 --> 00:22:13,510
greater than that and because of the

00:22:11,620 --> 00:22:19,240
waybill that runs it can't go backwards

00:22:13,510 --> 00:22:20,830
so it's picked a version earlier on so

00:22:19,240 --> 00:22:22,659
it said we've already picked you know is

00:22:20,830 --> 00:22:23,440
I've got component 3.0 but we've got

00:22:22,659 --> 00:22:26,380
something else

00:22:23,440 --> 00:22:31,570
that requires it less than that so it's

00:22:26,380 --> 00:22:34,870
kind of stuck things like aptitude and

00:22:31,570 --> 00:22:36,700
getting stolen they solve this problem a

00:22:34,870 --> 00:22:38,440
little bit differently they have like a

00:22:36,700 --> 00:22:40,149
universal view of what all the different

00:22:38,440 --> 00:22:42,279
dependencies are all all different

00:22:40,149 --> 00:22:45,760
packages so they can look at that whole

00:22:42,279 --> 00:22:48,820
Universal view and say okay we know

00:22:45,760 --> 00:22:50,830
exactly which versions to pick at before

00:22:48,820 --> 00:22:52,480
we start installing anything but because

00:22:50,830 --> 00:22:55,179
of the distributed nature of versions

00:22:52,480 --> 00:22:56,919
with pipey you don't know until you

00:22:55,179 --> 00:22:58,390
actually get the package and install the

00:22:56,919 --> 00:23:01,059
package you don't know what else it

00:22:58,390 --> 00:23:04,840
requires so it's a much harder problem

00:23:01,059 --> 00:23:06,940
to solve in the Python world so anyway

00:23:04,840 --> 00:23:10,260
there's some ways around this so this

00:23:06,940 --> 00:23:12,880
minus n is the is the non newest mode

00:23:10,260 --> 00:23:15,960
good to always run like that which means

00:23:12,880 --> 00:23:18,940
that don't go out and get new packages

00:23:15,960 --> 00:23:22,299
you can do this minus V that gives you a

00:23:18,940 --> 00:23:25,049
verbose option so that helps you go

00:23:22,299 --> 00:23:27,220
through and see what things possibly

00:23:25,049 --> 00:23:28,870
it's a little bit hard to debug this

00:23:27,220 --> 00:23:30,399
sometimes because you can't because you

00:23:28,870 --> 00:23:33,760
don't know what what ask for that

00:23:30,399 --> 00:23:35,320
component say originally and try and

00:23:33,760 --> 00:23:38,320
work out well what's the set of versions

00:23:35,320 --> 00:23:41,169
that might work and just pinning

00:23:38,320 --> 00:23:43,750
versions or using people's set of

00:23:41,169 --> 00:23:44,919
versions that work during installing a

00:23:43,750 --> 00:23:48,220
few different things if you're not using

00:23:44,919 --> 00:23:50,789
complicated applications this probably

00:23:48,220 --> 00:23:50,789
shouldn't be an issue

00:23:51,850 --> 00:23:57,610
another tool that can help is um I think

00:23:54,250 --> 00:23:59,500
called dump picked versions so what

00:23:57,610 --> 00:24:01,720
that'll do is if you run it in this mode

00:23:59,500 --> 00:24:04,080
it will at the end of the build-out just

00:24:01,720 --> 00:24:06,490
say here's all the things that build out

00:24:04,080 --> 00:24:10,059
guess that here's out the non pinned

00:24:06,490 --> 00:24:11,470
versions so it's nice to kind of see and

00:24:10,059 --> 00:24:12,760
say okay well just a minute

00:24:11,470 --> 00:24:15,309
maybe I should pin some of these

00:24:12,760 --> 00:24:19,990
versions make sure that you know I'm not

00:24:15,309 --> 00:24:22,419
that's not going to change later you can

00:24:19,990 --> 00:24:23,860
say dump pick versions file and it will

00:24:22,419 --> 00:24:27,490
instead of printing it out to screen

00:24:23,860 --> 00:24:30,490
save it on into a CFG file that you can

00:24:27,490 --> 00:24:32,080
then extend from or do things with the

00:24:30,490 --> 00:24:33,700
way we tend to use this is we will check

00:24:32,080 --> 00:24:36,610
this into the repository with the build

00:24:33,700 --> 00:24:38,650
up file and then you can do like I get

00:24:36,610 --> 00:24:40,290
diff for something and see well you know

00:24:38,650 --> 00:24:43,870
these are the versions that have changed

00:24:40,290 --> 00:24:45,490
between one version and another and then

00:24:43,870 --> 00:24:48,130
you can have sort of one person who's

00:24:45,490 --> 00:24:49,540
the build master who might upgrade the

00:24:48,130 --> 00:24:51,220
versions and everyone else has a

00:24:49,540 --> 00:24:53,049
slightly modified version of the build

00:24:51,220 --> 00:24:55,030
up whereby they're extending from this

00:24:53,049 --> 00:24:56,770
picked versions which means that they're

00:24:55,030 --> 00:25:06,940
using exactly the same versions that you

00:24:56,770 --> 00:25:10,240
ran it with macros okay so the idea of

00:25:06,940 --> 00:25:11,860
macros is we're just saving a little bit

00:25:10,240 --> 00:25:13,750
of time we don't have to repeat code so

00:25:11,860 --> 00:25:16,660
much we're just saying base instance two

00:25:13,750 --> 00:25:22,120
is the same as instance one except we're

00:25:16,660 --> 00:25:25,390
overriding the address so if you look at

00:25:22,120 --> 00:25:28,380
this what we have here is we have a load

00:25:25,390 --> 00:25:32,020
balancing version all plone using

00:25:28,380 --> 00:25:34,900
reverse acacia proxy in about that many

00:25:32,020 --> 00:25:37,510
lines so we've got this nice again this

00:25:34,900 --> 00:25:39,010
nice recipe which does sets up varnish

00:25:37,510 --> 00:25:40,270
to do the load balancing for us all we

00:25:39,010 --> 00:25:42,280
need to do is say what the different

00:25:40,270 --> 00:25:44,380
addresses are so there are the different

00:25:42,280 --> 00:25:46,900
addresses these are three incidents

00:25:44,380 --> 00:25:50,559
there's a trading so when this runs it

00:25:46,900 --> 00:25:54,190
will run three different processes which

00:25:50,559 --> 00:25:56,549
will get round-robin balance between

00:25:54,190 --> 00:25:56,549
them

00:26:00,259 --> 00:26:05,399
mrs. scrip these are one that we created

00:26:03,779 --> 00:26:07,769
actually and we wanted to kind of do a

00:26:05,399 --> 00:26:11,029
little bit more automation so what it

00:26:07,769 --> 00:26:13,979
does is a kind of lets us write Python

00:26:11,029 --> 00:26:15,869
in it lets us write a kind of a small

00:26:13,979 --> 00:26:18,149
anonymous recipe right in the

00:26:15,869 --> 00:26:19,919
configuration file it's a little bit

00:26:18,149 --> 00:26:21,570
ugly in that you've got to use this dot

00:26:19,919 --> 00:26:25,769
here the part the problem with that is

00:26:21,570 --> 00:26:27,450
that standard config any-any parsers you

00:26:25,769 --> 00:26:29,579
know with Python they strip out all the

00:26:27,450 --> 00:26:33,149
white space in front so you can't use

00:26:29,579 --> 00:26:36,739
white space so when this actually gets

00:26:33,149 --> 00:26:38,940
generated all that will get be indented

00:26:36,739 --> 00:26:41,609
but anyway what we're doing here is

00:26:38,940 --> 00:26:47,269
we're essentially just using the support

00:26:41,609 --> 00:26:47,269
space and we're adding this offset to it

00:26:47,659 --> 00:26:54,239
so the nice thing about that is that

00:26:50,509 --> 00:26:57,629
then we can say each of these is going

00:26:54,239 --> 00:27:00,239
to access ports so this will make our

00:26:57,629 --> 00:27:02,789
set options key so it's going to go

00:27:00,239 --> 00:27:07,099
through each of these and yeah at the

00:27:02,789 --> 00:27:09,239
thousand to it and that will then work

00:27:07,099 --> 00:27:11,999
so it'll be thousand eighty thousand

00:27:09,239 --> 00:27:13,829
eighty one etc and then what we can do

00:27:11,999 --> 00:27:16,829
is we can do things within that

00:27:13,829 --> 00:27:19,349
extending syntax we saw before so let's

00:27:16,829 --> 00:27:21,149
say we have a staging CFG now suddenly

00:27:19,349 --> 00:27:22,799
this extends from that base build out

00:27:21,149 --> 00:27:25,259
we've gone and we've just overridden

00:27:22,799 --> 00:27:27,570
this offset and suddenly we've got our

00:27:25,259 --> 00:27:30,570
whole app stack running on a whole set

00:27:27,570 --> 00:27:32,279
of different ports so it's a nice easy

00:27:30,570 --> 00:27:33,570
way to have you know a staging

00:27:32,279 --> 00:27:34,919
environment and production environment

00:27:33,570 --> 00:27:35,789
all running on the same machine and you

00:27:34,919 --> 00:27:42,089
know they're not running on different

00:27:35,789 --> 00:27:44,279
port on the same ports annotation mode

00:27:42,089 --> 00:27:46,469
is something that people overlook a

00:27:44,279 --> 00:27:48,659
little bit it's if you're doing like we

00:27:46,469 --> 00:27:50,190
tend to run build outs with you know up

00:27:48,659 --> 00:27:51,839
to ten different files we would you know

00:27:50,190 --> 00:27:54,450
we're building things like LDAP and

00:27:51,839 --> 00:27:55,829
we're building you know database servers

00:27:54,450 --> 00:27:58,159
and various different bits and pieces

00:27:55,829 --> 00:28:01,169
and we have different environments we

00:27:58,159 --> 00:28:03,450
kind of mix in different route files so

00:28:01,169 --> 00:28:04,769
sometimes it's useful to see where all

00:28:03,450 --> 00:28:09,179
the different values are coming from to

00:28:04,769 --> 00:28:10,320
debug and if you run the annotation mode

00:28:09,179 --> 00:28:12,720
it gives you this kind of extra

00:28:10,320 --> 00:28:14,580
line which says exactly where it came

00:28:12,720 --> 00:28:20,100
from and whether a value is the default

00:28:14,580 --> 00:28:22,590
value versus a specified building so if

00:28:20,100 --> 00:28:25,169
you've got a high P there is a crapload

00:28:22,590 --> 00:28:27,860
of recipes out there this is just the

00:28:25,169 --> 00:28:30,720
front page of when you search for recipe

00:28:27,860 --> 00:28:32,519
it's kind of interesting this you go and

00:28:30,720 --> 00:28:34,740
do this on a weekly basis and you get

00:28:32,519 --> 00:28:37,470
different results that's it's amazing to

00:28:34,740 --> 00:28:39,590
see what's out there so patching eggs

00:28:37,470 --> 00:28:43,289
it's kind of interesting

00:28:39,590 --> 00:28:44,429
what else have we got this is one that I

00:28:43,289 --> 00:28:46,350
probably should have talked about we use

00:28:44,429 --> 00:28:50,700
supervisor D for almost all that stuff

00:28:46,350 --> 00:28:54,240
and this allows us if if we say we have

00:28:50,700 --> 00:28:57,090
kind of a production build-out like like

00:28:54,240 --> 00:28:59,039
this one we would specify in there what

00:28:57,090 --> 00:29:01,379
the run commands are and supervisor D

00:28:59,039 --> 00:29:03,110
would allow us give us a process to

00:29:01,379 --> 00:29:06,929
start things up and shut things down

00:29:03,110 --> 00:29:09,509
supervisor D is very cool and that

00:29:06,929 --> 00:29:12,509
recipe that we saw there just configures

00:29:09,509 --> 00:29:15,929
it for us so it's all again in the same

00:29:12,509 --> 00:29:17,730
configuration file there you go you

00:29:15,929 --> 00:29:22,440
could you can create a whole transcoding

00:29:17,730 --> 00:29:23,909
daemon there's a bunch of ones for

00:29:22,440 --> 00:29:26,129
Google App Engine that'll create a dual

00:29:23,909 --> 00:29:27,629
App Engine environment for you so that

00:29:26,129 --> 00:29:28,919
you know you don't need to install too

00:29:27,629 --> 00:29:32,039
much stuff there's a whole one's whole

00:29:28,919 --> 00:29:37,740
bunch of ones for Django that help you

00:29:32,039 --> 00:29:40,049
manage Django projects almost everything

00:29:37,740 --> 00:29:44,029
you think of so here we can you know do

00:29:40,049 --> 00:29:47,460
templates using again G if you want

00:29:44,029 --> 00:29:49,679
loads of them host out is something I

00:29:47,460 --> 00:29:52,799
wrote which I won't go into but roughly

00:29:49,679 --> 00:29:54,720
what it does is it you add it to your

00:29:52,799 --> 00:29:57,110
existing build-out and then it gives you

00:29:54,720 --> 00:29:59,549
a command that says you know host out

00:29:57,110 --> 00:30:02,220
this definition of the server go and

00:29:59,549 --> 00:30:04,230
build that server it'll hook into thing

00:30:02,220 --> 00:30:06,179
the Amazon API and the Rackspace API on

00:30:04,230 --> 00:30:09,090
things like that and will create the

00:30:06,179 --> 00:30:11,480
server if you want it uses fabric under

00:30:09,090 --> 00:30:13,769
the hood to go and do things like

00:30:11,480 --> 00:30:15,269
install Python installed build our

00:30:13,769 --> 00:30:17,789
environment and certain place create

00:30:15,269 --> 00:30:19,860
users get everything going the whole

00:30:17,789 --> 00:30:21,629
idea is that it takes whatever builder

00:30:19,860 --> 00:30:22,800
using here or modified version of the

00:30:21,629 --> 00:30:25,920
Builder using here and

00:30:22,800 --> 00:30:27,690
sit over on some other server we use

00:30:25,920 --> 00:30:29,850
that for all our deployment it saves a

00:30:27,690 --> 00:30:33,590
lot of time if we make changes we just

00:30:29,850 --> 00:30:36,650
click go and it goes and builds read

00:30:33,590 --> 00:30:41,480
reconfigures our servers for us

00:30:36,650 --> 00:30:41,480
and that's pretty much it any questions

00:30:44,690 --> 00:30:52,220
does that solve a problem that anyone

00:30:47,190 --> 00:30:52,220
has or could possibly solve a problem

00:30:56,320 --> 00:31:00,780
yeah we use that I was wondering how you

00:30:58,870 --> 00:31:04,600
would compare and contrast this to

00:31:00,780 --> 00:31:07,960
system level bill is like chef puppet

00:31:04,600 --> 00:31:09,610
this kind of thing it's quite

00:31:07,960 --> 00:31:10,780
interesting I remember I'm going to one

00:31:09,610 --> 00:31:12,100
of the DevOps meetups and then we're

00:31:10,780 --> 00:31:13,990
talking about chef and puppet

00:31:12,100 --> 00:31:18,190
I think they solve slightly different

00:31:13,990 --> 00:31:20,320
problems chef and puppet for start you

00:31:18,190 --> 00:31:21,730
have to go and install the demons around

00:31:20,320 --> 00:31:23,530
and get them all configured so it's

00:31:21,730 --> 00:31:26,520
really good for having the same kind of

00:31:23,530 --> 00:31:30,669
environment replicated around the place

00:31:26,520 --> 00:31:32,890
that I'm not kind of a push model this

00:31:30,669 --> 00:31:34,390
on a pull model like you just kind of

00:31:32,890 --> 00:31:35,350
set the configuration that goes off and

00:31:34,390 --> 00:31:38,440
does it in the background

00:31:35,350 --> 00:31:41,110
this is kind of more where you say

00:31:38,440 --> 00:31:42,490
you're building an application and you

00:31:41,110 --> 00:31:43,690
want your custom versions of this and

00:31:42,490 --> 00:31:47,559
this and this and you want to push it

00:31:43,690 --> 00:31:49,690
out that doesn't really describe the

00:31:47,559 --> 00:31:52,120
difference that well so the other thing

00:31:49,690 --> 00:31:55,330
is the system level that chef and so on

00:31:52,120 --> 00:31:57,039
they generally will operate on package

00:31:55,330 --> 00:31:59,620
management and things like that but

00:31:57,039 --> 00:32:02,950
again they can do anything like build

00:31:59,620 --> 00:32:05,919
art can but generally chef and puppet

00:32:02,950 --> 00:32:08,020
are really good where you are a hosting

00:32:05,919 --> 00:32:10,990
provider or you are running a large

00:32:08,020 --> 00:32:12,700
number of servers the way we use

00:32:10,990 --> 00:32:14,650
build-out we need to manage other

00:32:12,700 --> 00:32:15,669
people's machines which are all over the

00:32:14,650 --> 00:32:16,990
place so they're all in different

00:32:15,669 --> 00:32:20,200
environments they're all in different

00:32:16,990 --> 00:32:23,289
data centers we push out those changes

00:32:20,200 --> 00:32:26,350
we can replicate those changes locally I

00:32:23,289 --> 00:32:28,900
can give the production the development

00:32:26,350 --> 00:32:31,750
environment to another developer and say

00:32:28,900 --> 00:32:34,150
build this out you can't kind of do that

00:32:31,750 --> 00:32:35,679
with chef you can't say are you know by

00:32:34,150 --> 00:32:37,390
the way and just install this idiot and

00:32:35,679 --> 00:32:41,440
demon and install everything on your

00:32:37,390 --> 00:32:45,270
local machine it's kind of it fits a

00:32:41,440 --> 00:32:45,270
different past class the problem I think

00:32:46,860 --> 00:32:55,559

YouTube URL: https://www.youtube.com/watch?v=XCzk8n9eQ2Q


