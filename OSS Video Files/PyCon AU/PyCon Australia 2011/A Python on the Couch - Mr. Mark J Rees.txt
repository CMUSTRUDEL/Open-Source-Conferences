Title: A Python on the Couch - Mr. Mark J Rees
Publication date: 2011-08-22
Playlist: PyCon Australia 2011
Description: 
	CouchDB  (http://couchdb.apache.org/) is an open source, document-oriented NoSQL Database Management Server.It supports queries via views using MapReduce, and replication. The talk will give an overview of CouchDB followed by how to access and manipulate using Python. There are a number of python libraries for accessing couchdb and these will be quickly discussed followed by  how to use one of these libs with a Python web framework.
Captions: 
	00:00:03,080 --> 00:00:07,890
good morning everybody

00:00:04,980 --> 00:00:10,860
as any said yeah I'm a I'm a CTO which

00:00:07,890 --> 00:00:14,910
means I'm not allowed to program but I

00:00:10,860 --> 00:00:17,160
do get the devil and I do get to look at

00:00:14,910 --> 00:00:20,460
introducing cool technologies into the

00:00:17,160 --> 00:00:22,740
company I work for we're not using couch

00:00:20,460 --> 00:00:27,480
at the moment in any of our production

00:00:22,740 --> 00:00:31,019
apps but it's likely in the next year we

00:00:27,480 --> 00:00:36,899
will so this talks more as an

00:00:31,019 --> 00:00:40,469
introduction to couch and then what you

00:00:36,899 --> 00:00:43,890
can do with Python with it I've edited

00:00:40,469 --> 00:00:45,600
this presentation many times because

00:00:43,890 --> 00:00:47,340
there's a lot of things in couch that

00:00:45,600 --> 00:00:48,629
are really cool and you want to talk

00:00:47,340 --> 00:00:52,020
about but the same time this is a Python

00:00:48,629 --> 00:00:56,940
conference so hopefully I've got it the

00:00:52,020 --> 00:01:01,500
right length we'll see how we go okay

00:00:56,940 --> 00:01:03,449
couchdb it's a no sequel databases all

00:01:01,500 --> 00:01:04,619
right I didn't actually realize until

00:01:03,449 --> 00:01:08,610
about two weeks ago I mean not only

00:01:04,619 --> 00:01:10,590
sequel but anyway there are lots of no

00:01:08,610 --> 00:01:14,460
sequel databases and they do their

00:01:10,590 --> 00:01:16,380
different things key value stores column

00:01:14,460 --> 00:01:20,009
lists you know things like that

00:01:16,380 --> 00:01:25,110
couch is a document orientated database

00:01:20,009 --> 00:01:27,600
okay and documents had different things

00:01:25,110 --> 00:01:31,610
in it so it's schema lists to cope with

00:01:27,600 --> 00:01:36,540
that probably the nice thing about it

00:01:31,610 --> 00:01:38,130
it's API is HTTP nice and restful so

00:01:36,540 --> 00:01:40,740
pretty well means any programming

00:01:38,130 --> 00:01:45,840
language can talk to it so course makes

00:01:40,740 --> 00:01:49,799
it easier for Python it the replication

00:01:45,840 --> 00:01:52,619
is so easy ideal relational databases as

00:01:49,799 --> 00:01:56,850
I work with Oracle and form X sequel

00:01:52,619 --> 00:01:59,540
server replication sucks it's hard worth

00:01:56,850 --> 00:02:02,899
couch it's easy and we're talking about

00:01:59,540 --> 00:02:06,719
replication molted bi-directional

00:02:02,899 --> 00:02:08,099
distributed different platforms don't

00:02:06,719 --> 00:02:10,200
worry about things like that that are

00:02:08,099 --> 00:02:13,830
very hard for relational databases to do

00:02:10,200 --> 00:02:17,990
cheaply it's very scalable

00:02:13,830 --> 00:02:23,120
and it's designed to be distributed and

00:02:17,990 --> 00:02:25,350
the history of couch is the guy that

00:02:23,120 --> 00:02:27,900
self-funded himself to work on this used

00:02:25,350 --> 00:02:31,070
to work on Lotus Notes and you can

00:02:27,900 --> 00:02:34,650
either love or hate Lotus Notes but a

00:02:31,070 --> 00:02:39,870
lot of what Lotus Notes did good is what

00:02:34,650 --> 00:02:41,430
couch does even better so one of the

00:02:39,870 --> 00:02:43,800
important things to know about when

00:02:41,430 --> 00:02:47,760
you're dealing with distributed

00:02:43,800 --> 00:02:49,800
databases is the cap theorem and the big

00:02:47,760 --> 00:02:51,780
problem with the distributed database is

00:02:49,800 --> 00:02:54,020
you really can only make two things

00:02:51,780 --> 00:02:58,530
possible out of the three that you need

00:02:54,020 --> 00:03:00,150
and you know when you're dealing with

00:02:58,530 --> 00:03:01,410
databases you want thing you want your

00:03:00,150 --> 00:03:04,760
data be consistent you want to be able

00:03:01,410 --> 00:03:07,020
to read it and exactly the same thing

00:03:04,760 --> 00:03:09,930
wherever you're reading from in your

00:03:07,020 --> 00:03:11,820
distributed cluster really importantly

00:03:09,930 --> 00:03:13,530
because I deal with big government

00:03:11,820 --> 00:03:15,000
clients do you want things to be

00:03:13,530 --> 00:03:16,950
available all the time because I get

00:03:15,000 --> 00:03:21,330
really upset when you don't meet the SLA

00:03:16,950 --> 00:03:24,600
and then partition tolerance so you can

00:03:21,330 --> 00:03:26,850
split it across many servers get your

00:03:24,600 --> 00:03:30,800
scaling and things like that and as I

00:03:26,850 --> 00:03:35,850
said we can only only guarantee - so

00:03:30,800 --> 00:03:37,830
couch goes for tolerant partition

00:03:35,850 --> 00:03:39,830
tolerance and availability and hence

00:03:37,830 --> 00:03:43,020
this thing called eventual consistency

00:03:39,830 --> 00:03:45,720
which basically means in the end there

00:03:43,020 --> 00:03:49,500
will be consistent which is not as

00:03:45,720 --> 00:03:51,060
horrible as it sounds which is one of

00:03:49,500 --> 00:03:54,680
the reasons they can be performed quite

00:03:51,060 --> 00:03:59,640
well on a distributed system

00:03:54,680 --> 00:04:01,260
paxos is actually a theorem very hard to

00:03:59,640 --> 00:04:04,739
implement there's a nice Google paper on

00:04:01,260 --> 00:04:05,910
how hard it was to implement truthfully

00:04:04,739 --> 00:04:07,440
don't know if there's anything really

00:04:05,910 --> 00:04:08,820
out there and then you've got what the

00:04:07,440 --> 00:04:10,650
relational database is to do which is

00:04:08,820 --> 00:04:13,620
all about being consistent data and

00:04:10,650 --> 00:04:15,330
available but as I said couch eventually

00:04:13,620 --> 00:04:19,500
you will get the data that you want on

00:04:15,330 --> 00:04:21,600
one of the nodes you're accessing okay

00:04:19,500 --> 00:04:25,350
under the covers I didn't do the drawing

00:04:21,600 --> 00:04:27,690
it's a standard one on the site written

00:04:25,350 --> 00:04:29,640
a kneeling so

00:04:27,690 --> 00:04:31,170
designed the crashing keep going so you

00:04:29,640 --> 00:04:33,330
don't have to worry about those type of

00:04:31,170 --> 00:04:37,950
things and because it Lang's a nice

00:04:33,330 --> 00:04:39,180
distributed framework you know a lot of

00:04:37,950 --> 00:04:41,820
the nice things we're done behind

00:04:39,180 --> 00:04:46,820
originally couch was actually written in

00:04:41,820 --> 00:04:49,110
C++ so feelings where it sit then at

00:04:46,820 --> 00:04:52,410
JavaScript does how they do most of the

00:04:49,110 --> 00:04:55,920
stuff when you're accessing things and

00:04:52,410 --> 00:04:57,060
then to do hard stuff I ticks searches

00:04:55,920 --> 00:04:58,590
and things like that you can run

00:04:57,060 --> 00:05:01,260
external processes and talk to him so

00:04:58,590 --> 00:05:04,320
that's where the sooners the important

00:05:01,260 --> 00:05:06,210
thing about CouchDB is it has no locks

00:05:04,320 --> 00:05:11,370
so it uses multi-version concurrency

00:05:06,210 --> 00:05:13,020
control and it has a thing called

00:05:11,370 --> 00:05:14,550
versioning and sadly most people when

00:05:13,020 --> 00:05:16,020
they talk about versioning it's like

00:05:14,550 --> 00:05:19,080
it's automatically got versioning built

00:05:16,020 --> 00:05:20,760
in so you be able to go back and the

00:05:19,080 --> 00:05:24,030
versioning is really there for conflict

00:05:20,760 --> 00:05:26,370
resolution and they recommend if you

00:05:24,030 --> 00:05:29,240
want a versioning system you write your

00:05:26,370 --> 00:05:30,630
own in it and the big thing it's

00:05:29,240 --> 00:05:32,669
append-only

00:05:30,630 --> 00:05:36,030
all right so a lot of object databases

00:05:32,669 --> 00:05:37,860
work this way you don't update you

00:05:36,030 --> 00:05:39,419
append and that allows them to basically

00:05:37,860 --> 00:05:47,100
add a record on the end which makes it

00:05:39,419 --> 00:05:51,800
quite fast the data restored is JSON so

00:05:47,100 --> 00:05:59,910
that the nice thing about it being

00:05:51,800 --> 00:06:01,680
schema listen with the JSON so one of

00:05:59,910 --> 00:06:03,150
the things you can see there is you know

00:06:01,680 --> 00:06:05,520
in a relational database you'd have to

00:06:03,150 --> 00:06:08,100
have a column per thing that you want so

00:06:05,520 --> 00:06:11,220
this is a little context one and I can

00:06:08,100 --> 00:06:13,560
basically have a list of phone numbers

00:06:11,220 --> 00:06:14,880
or a list of email addresses so you

00:06:13,560 --> 00:06:16,470
don't get the constraint where that

00:06:14,880 --> 00:06:17,790
would immediately mean another table in

00:06:16,470 --> 00:06:20,280
a relational database if you want to

00:06:17,790 --> 00:06:25,020
want to handle that the other thing it

00:06:20,280 --> 00:06:26,310
does is it can store attachments so it

00:06:25,020 --> 00:06:27,630
makes it nice and easy you don't have to

00:06:26,310 --> 00:06:29,550
think of another storage mechanism

00:06:27,630 --> 00:06:33,780
relational databases store attachments

00:06:29,550 --> 00:06:35,340
they just don't do it nicely and then

00:06:33,780 --> 00:06:37,229
the other important thing up there is

00:06:35,340 --> 00:06:39,210
the ID which must be unique and the

00:06:37,229 --> 00:06:42,440
revision number so this is how it does

00:06:39,210 --> 00:06:42,440
its conflict resolution

00:06:42,500 --> 00:06:49,730
this is the API okay so most of the

00:06:46,500 --> 00:06:52,140
examples you'll see they'll be using

00:06:49,730 --> 00:06:53,550
kill to access it I thought well we're

00:06:52,140 --> 00:06:56,730
in Python so we'll use the request

00:06:53,550 --> 00:06:58,580
module in Python if you haven't come

00:06:56,730 --> 00:07:02,460
across this the request module makes

00:06:58,580 --> 00:07:07,130
dealing with HTTP our pleasure

00:07:02,460 --> 00:07:09,510
if anybody's used HTTP Lib or URL Lib

00:07:07,130 --> 00:07:11,100
you keep going back to the docks to try

00:07:09,510 --> 00:07:14,610
and work out this is exactly what you

00:07:11,100 --> 00:07:16,080
want to do so the first thing is if we

00:07:14,610 --> 00:07:18,540
wanted to create a database it's just a

00:07:16,080 --> 00:07:20,160
simple put okay and by default couch

00:07:18,540 --> 00:07:21,810
runs on that port and I'm going to

00:07:20,160 --> 00:07:24,900
create a database called my context

00:07:21,810 --> 00:07:29,490
it'll return okay true or an error

00:07:24,900 --> 00:07:32,640
message as I said that the ID needs to

00:07:29,490 --> 00:07:36,120
be unique you can supply your own but

00:07:32,640 --> 00:07:40,170
there is basically by making a call to

00:07:36,120 --> 00:07:42,510
this you can get a unique ID universal

00:07:40,170 --> 00:07:46,620
one that you can use and so then we can

00:07:42,510 --> 00:07:49,650
add a document and what we're doing is

00:07:46,620 --> 00:07:51,870
we're appending the ID on the end of the

00:07:49,650 --> 00:07:54,110
URL to our database and we're just

00:07:51,870 --> 00:07:57,810
passing down some JSON and so we get

00:07:54,110 --> 00:08:03,080
first record and set it into the thing

00:07:57,810 --> 00:08:05,490
and we get a nice 201 that it went well

00:08:03,080 --> 00:08:07,230
now as I see it is it's an append only

00:08:05,490 --> 00:08:09,330
thing so there's no such thing as update

00:08:07,230 --> 00:08:11,850
so when it's restful interface there

00:08:09,330 --> 00:08:14,910
isn't a post and because we we are

00:08:11,850 --> 00:08:16,410
basically putting in a revision and it

00:08:14,910 --> 00:08:18,480
took me a little while I'm looking for a

00:08:16,410 --> 00:08:21,660
post and I'm wondering why there's a

00:08:18,480 --> 00:08:24,320
rest but it's a revision so you've got

00:08:21,660 --> 00:08:26,670
to basically have the record completely

00:08:24,320 --> 00:08:27,930
we can add something else on it like

00:08:26,670 --> 00:08:31,350
we're done here with the email and then

00:08:27,930 --> 00:08:33,120
you put in the new record and you'll

00:08:31,350 --> 00:08:36,180
note what comes back is a new revision

00:08:33,120 --> 00:08:37,590
number okay this is the important thing

00:08:36,180 --> 00:08:41,060
you must always have this revision

00:08:37,590 --> 00:08:42,840
number when you're doing any operation

00:08:41,060 --> 00:08:46,410
because that's how it handles the

00:08:42,840 --> 00:08:49,220
conflict resolution get it wrong you get

00:08:46,410 --> 00:08:49,220
a nice little error message

00:08:49,690 --> 00:08:55,460
you can write your own conflict

00:08:52,130 --> 00:08:59,990
resolution routines or you can just let

00:08:55,460 --> 00:09:02,270
couch do it it'll put the conflicts in

00:08:59,990 --> 00:09:07,280
you can actually query for them and then

00:09:02,270 --> 00:09:10,460
sort it out afterwards it comes with a

00:09:07,280 --> 00:09:13,820
nice browser-based admin interface

00:09:10,460 --> 00:09:16,700
called futon as is the case with all

00:09:13,820 --> 00:09:23,150
open-source projects its futon this

00:09:16,700 --> 00:09:25,720
cushion is lounge there's so but futon

00:09:23,150 --> 00:09:28,160
allows you to navigate through the

00:09:25,720 --> 00:09:30,170
databases and stuff and if I end up

00:09:28,160 --> 00:09:32,440
getting my talk wrong and it's really

00:09:30,170 --> 00:09:36,050
short we can have a run through it

00:09:32,440 --> 00:09:37,220
you'll note down the side here some

00:09:36,050 --> 00:09:40,610
things there this thing I've got

00:09:37,220 --> 00:09:42,830
highlighted here we're in admin party

00:09:40,610 --> 00:09:45,860
mode which basically means by default

00:09:42,830 --> 00:09:47,990
when you install couch anybody can do

00:09:45,860 --> 00:09:52,520
anything great when you're developing

00:09:47,990 --> 00:09:55,640
really bad thing when you deploy so you

00:09:52,520 --> 00:09:57,380
can set users up and there you can also

00:09:55,640 --> 00:09:58,820
a syndicate or flaw to different

00:09:57,380 --> 00:10:02,140
authentication sources it's got a lot

00:09:58,820 --> 00:10:02,140
better than the last couple of releases

00:10:02,410 --> 00:10:06,740
the other thing you can do from here is

00:10:04,970 --> 00:10:10,700
you can configure another thing to watch

00:10:06,740 --> 00:10:12,980
out when you install couch by default

00:10:10,700 --> 00:10:14,240
it's in super fast mode which means it

00:10:12,980 --> 00:10:15,770
doesn't guarantee it's going to write to

00:10:14,240 --> 00:10:18,050
the disk

00:10:15,770 --> 00:10:22,310
you should set that right there that is

00:10:18,050 --> 00:10:23,840
true as soon as you install and this is

00:10:22,310 --> 00:10:26,060
where you do the setup the replication

00:10:23,840 --> 00:10:27,440
the one limitation of couch at the

00:10:26,060 --> 00:10:31,010
moment is it doesn't remember

00:10:27,440 --> 00:10:34,010
replication so if you restart you have

00:10:31,010 --> 00:10:34,940
to send the command to do it or do it

00:10:34,010 --> 00:10:36,230
through futon

00:10:34,940 --> 00:10:40,250
but there's nice ways you can do it

00:10:36,230 --> 00:10:41,630
automatically on start and you can view

00:10:40,250 --> 00:10:44,690
the status and the other thing because

00:10:41,630 --> 00:10:47,030
there's an append database you can run

00:10:44,690 --> 00:10:53,390
compaction from here you can also do it

00:10:47,030 --> 00:10:55,250
using the API where it gets tougher for

00:10:53,390 --> 00:10:59,630
people that have been dealing in the

00:10:55,250 --> 00:11:01,100
sequel world is querying the data it

00:10:59,630 --> 00:11:03,110
uses views

00:11:01,100 --> 00:11:07,010
okay and these views are implemented

00:11:03,110 --> 00:11:10,460
using a b-tree it sounds horrible when

00:11:07,010 --> 00:11:11,900
the view is created it actually if

00:11:10,460 --> 00:11:13,490
you've got a big database it's very slow

00:11:11,900 --> 00:11:16,610
because it goes way involves the b-tree

00:11:13,490 --> 00:11:18,770
but as you add or update and only adjust

00:11:16,610 --> 00:11:21,410
those things on the on the index so the

00:11:18,770 --> 00:11:23,540
creation of the view is heavy but the

00:11:21,410 --> 00:11:25,250
actual using the view and adding to that

00:11:23,540 --> 00:11:27,260
view while you're running is actually

00:11:25,250 --> 00:11:30,320
quite light so you get some quite good

00:11:27,260 --> 00:11:32,840
performance and views are done using

00:11:30,320 --> 00:11:35,210
MapReduce and so by default you write

00:11:32,840 --> 00:11:36,920
these in JavaScript you can have

00:11:35,210 --> 00:11:39,170
permanent views which are the faster

00:11:36,920 --> 00:11:40,280
ones or temporary views so temporary

00:11:39,170 --> 00:11:43,220
view your going to be continually

00:11:40,280 --> 00:11:47,000
updating this b-tree you can do them in

00:11:43,220 --> 00:11:49,610
futon when you're playing around but

00:11:47,000 --> 00:11:55,840
then in the end you would put them up at

00:11:49,610 --> 00:11:58,460
couch conf which was end of last month

00:11:55,840 --> 00:12:01,730
they announced in conjunction with the

00:11:58,460 --> 00:12:05,150
guy that wrote SQLite that they're

00:12:01,730 --> 00:12:08,300
releasing a query language which is an

00:12:05,150 --> 00:12:12,620
ql this is actually based on a Microsoft

00:12:08,300 --> 00:12:15,890
paper and the idea is to have this query

00:12:12,620 --> 00:12:17,270
language for no sequel databases and so

00:12:15,890 --> 00:12:20,510
cows will probably be the first one to

00:12:17,270 --> 00:12:23,690
actually have it it's a good and a bad

00:12:20,510 --> 00:12:26,180
thing once you get over the thing that

00:12:23,690 --> 00:12:29,060
it's not sequel the MapReduce stuff is

00:12:26,180 --> 00:12:34,070
really powerful but again it allows you

00:12:29,060 --> 00:12:36,640
to change database okay the first one of

00:12:34,070 --> 00:12:41,530
the quite cool things about couch is

00:12:36,640 --> 00:12:43,670
because you can store anything in it and

00:12:41,530 --> 00:12:46,580
because it happens to come with

00:12:43,670 --> 00:12:48,620
JavaScript and because there's a whole

00:12:46,580 --> 00:12:52,130
lot of nice JavaScript libraries like

00:12:48,620 --> 00:12:53,840
jQuery and eventi and mustache and

00:12:52,130 --> 00:12:57,380
things like that you can actually make

00:12:53,840 --> 00:12:58,940
self-contained apps and then when you

00:12:57,380 --> 00:13:01,070
have the self-contained app and because

00:12:58,940 --> 00:13:02,420
you can distribute couch and you can

00:13:01,070 --> 00:13:03,920
replicate it over things you all of a

00:13:02,420 --> 00:13:09,590
sudden end up with us really massively

00:13:03,920 --> 00:13:12,620
scalable app so you can actually do this

00:13:09,590 --> 00:13:14,330
with Python alright so not as nice as

00:13:12,620 --> 00:13:14,810
what Audrey talked about writing

00:13:14,330 --> 00:13:17,720
everything

00:13:14,810 --> 00:13:19,820
Python but there are a number of tools

00:13:17,720 --> 00:13:21,200
for generating these couch apps the

00:13:19,820 --> 00:13:24,350
Python one was the first one that came

00:13:21,200 --> 00:13:29,450
out so if you look at what we can do

00:13:24,350 --> 00:13:30,740
here is we can generate our apps which

00:13:29,450 --> 00:13:32,839
basically goes and creates a directory

00:13:30,740 --> 00:13:34,940
structure and that sort of gives us that

00:13:32,839 --> 00:13:36,200
structure and inny and this is sort of

00:13:34,940 --> 00:13:42,170
what it's going to look like inside

00:13:36,200 --> 00:13:45,589
couch I can go and edit some things then

00:13:42,170 --> 00:13:47,920
I create a view right so it's basically

00:13:45,589 --> 00:13:50,750
case of subdirectory I think go and

00:13:47,920 --> 00:13:53,210
change my view now the interesting thing

00:13:50,750 --> 00:13:55,670
I first stumbled on it creates an empty

00:13:53,210 --> 00:13:57,740
reduce if you don't get rid of it it

00:13:55,670 --> 00:14:00,440
basically breaks your view you need

00:13:57,740 --> 00:14:02,060
something in your reduce and then what

00:14:00,440 --> 00:14:05,029
the really nice thing is then we just

00:14:02,060 --> 00:14:07,880
push it up to where your couchdb

00:14:05,029 --> 00:14:12,200
instances and at that point it's up and

00:14:07,880 --> 00:14:14,420
running so nothing fancy but you know

00:14:12,200 --> 00:14:16,370
this is what this one is here at the

00:14:14,420 --> 00:14:18,230
bottom there's a IBM tutorial that

00:14:16,370 --> 00:14:20,390
basically creates this which is quite a

00:14:18,230 --> 00:14:23,900
nice way of talking about it so that's

00:14:20,390 --> 00:14:27,890
one way you can use Python but use the

00:14:23,900 --> 00:14:30,140
JavaScript stuff to make it look ok the

00:14:27,890 --> 00:14:32,200
couch DB guys pushed this really hard

00:14:30,140 --> 00:14:34,730
because it's quite a killer feature and

00:14:32,200 --> 00:14:36,260
think about Lotus Notes was very similar

00:14:34,730 --> 00:14:38,300
this with the idea of the apps inside

00:14:36,260 --> 00:14:41,420
Lotus Notes but we apply them

00:14:38,300 --> 00:14:45,710
programmers so we want to talk to it

00:14:41,420 --> 00:14:48,680
using Python these are three I have

00:14:45,710 --> 00:14:52,339
played with there are lots of varying

00:14:48,680 --> 00:14:55,880
quality many of them are I wrote this

00:14:52,339 --> 00:15:01,070
while I was experimenting with couch it

00:14:55,880 --> 00:15:02,780
shows so the the top one is that's the

00:15:01,070 --> 00:15:05,000
first one that came out it tends to keep

00:15:02,780 --> 00:15:07,910
up to date pretty good with what's

00:15:05,000 --> 00:15:12,050
happening in couch that's one on I'll

00:15:07,910 --> 00:15:14,839
show some examples and CouchDB kit is

00:15:12,050 --> 00:15:19,550
very nice the probably the big

00:15:14,839 --> 00:15:22,339
differentiator this is using the URL Lib

00:15:19,550 --> 00:15:24,370
and so there are some perceived

00:15:22,339 --> 00:15:27,770
performance problems with it

00:15:24,370 --> 00:15:28,579
couchdb ket uses a restful library

00:15:27,770 --> 00:15:32,420
they're the same

00:15:28,579 --> 00:15:36,350
guy that wrote couchdb cut users and

00:15:32,420 --> 00:15:38,619
this is a fork of this one that uses a

00:15:36,350 --> 00:15:42,529
different library for doing it

00:15:38,619 --> 00:15:44,329
this is GPL this is BSD so that's sort

00:15:42,529 --> 00:15:46,069
of we end up with going the thing and I

00:15:44,329 --> 00:15:50,929
work for a company so I have to be

00:15:46,069 --> 00:15:52,759
careful but go and pipe I search CouchDB

00:15:50,929 --> 00:15:56,269
there's a whole list of things there's

00:15:52,759 --> 00:15:59,149
lots there's ones for making it look

00:15:56,269 --> 00:16:00,999
like git and things so it's interesting

00:15:59,149 --> 00:16:06,529
there's an imaging library one that does

00:16:00,999 --> 00:16:11,360
image resizing okay so this is using the

00:16:06,529 --> 00:16:15,589
client so if you think about what the

00:16:11,360 --> 00:16:17,269
API is it's relatively close so those

00:16:15,589 --> 00:16:21,529
ones up here is sort of just pretty row

00:16:17,269 --> 00:16:23,269
replicating it I when you connect to the

00:16:21,529 --> 00:16:24,559
server it's actually a dictionary so if

00:16:23,269 --> 00:16:26,389
you've got model basically all the

00:16:24,559 --> 00:16:28,129
databases on that server available to

00:16:26,389 --> 00:16:29,179
you in that server for instance the

00:16:28,129 --> 00:16:32,239
other thing you've got to get your head

00:16:29,179 --> 00:16:34,509
round is we're using HTTP so this is

00:16:32,239 --> 00:16:38,239
stateless and not holding a connection

00:16:34,509 --> 00:16:40,189
which makes it really easy you don't

00:16:38,239 --> 00:16:43,429
have to think about connection pools and

00:16:40,189 --> 00:16:44,839
stuff like that probably one of the more

00:16:43,429 --> 00:16:46,100
interesting things is to get real

00:16:44,839 --> 00:16:49,279
performance you want to do bulk and

00:16:46,100 --> 00:16:52,699
suits and so this is basically how you

00:16:49,279 --> 00:16:55,279
can do a bulkinsert pass a list and then

00:16:52,699 --> 00:16:58,399
it will pass it back this is an example

00:16:55,279 --> 00:17:01,970
of a query so we've got basically a map

00:16:58,399 --> 00:17:05,959
function there and what we do is we do

00:17:01,970 --> 00:17:08,779
our query but it it's basically has not

00:17:05,959 --> 00:17:10,610
been run it will not actually do the

00:17:08,779 --> 00:17:14,449
connection and bring the data back until

00:17:10,610 --> 00:17:16,339
you actually use it so at the point

00:17:14,449 --> 00:17:18,439
where I hit the results in the first

00:17:16,339 --> 00:17:23,209
time that's when the query actually goes

00:17:18,439 --> 00:17:27,909
and the CouchDB library sort of heads

00:17:23,209 --> 00:17:27,909
the server part and a document part and

00:17:29,019 --> 00:17:32,690
one of the ways you see a document is

00:17:31,039 --> 00:17:36,559
it's a row okay and you can manipulate

00:17:32,690 --> 00:17:39,649
this it's basically relatively easy but

00:17:36,559 --> 00:17:41,470
it's still sort of your JSON style that

00:17:39,649 --> 00:17:45,650
you're dealing with

00:17:41,470 --> 00:17:47,060
so they also have this additional thing

00:17:45,650 --> 00:17:50,270
called mapping where they where they map

00:17:47,060 --> 00:17:54,080
directly into a Python object okay so it

00:17:50,270 --> 00:17:55,280
means you can do things like that and as

00:17:54,080 --> 00:17:56,780
you'll see from the code here you don't

00:17:55,280 --> 00:17:57,980
have to have all the fields I mean

00:17:56,780 --> 00:18:00,620
that's the nice thing about the schema

00:17:57,980 --> 00:18:03,290
list database fields not there it's not

00:18:00,620 --> 00:18:06,380
there you don't get none you don't get

00:18:03,290 --> 00:18:10,760
you you you you can reference it that

00:18:06,380 --> 00:18:12,290
this contains nothing and so the

00:18:10,760 --> 00:18:13,640
difference is is when you're dealing

00:18:12,290 --> 00:18:14,990
with this document which is sort of

00:18:13,640 --> 00:18:17,570
different from the document from the

00:18:14,990 --> 00:18:21,470
previous one is it has the ability to

00:18:17,570 --> 00:18:22,670
store and load and because of that you

00:18:21,470 --> 00:18:25,790
don't really need to think too much

00:18:22,670 --> 00:18:33,860
about the about the versioning because

00:18:25,790 --> 00:18:35,900
it's actually doing it for you okay if I

00:18:33,860 --> 00:18:37,550
said your views by default or in

00:18:35,900 --> 00:18:41,900
JavaScript and they're not too hard to

00:18:37,550 --> 00:18:44,360
grasp but you can write views in Python

00:18:41,900 --> 00:18:46,190
and so what couch does is have the

00:18:44,360 --> 00:18:50,000
ability to run these external processes

00:18:46,190 --> 00:18:54,410
though it'll manage them for you so with

00:18:50,000 --> 00:18:57,080
the CouchDB Python module by putting

00:18:54,410 --> 00:18:59,570
this line and the couchdb local any file

00:18:57,080 --> 00:19:00,740
we basically when we start up coughs we

00:18:59,570 --> 00:19:03,020
end up with this little Python View

00:19:00,740 --> 00:19:05,720
server running and then when the Python

00:19:03,020 --> 00:19:09,380
View server is running if I go into

00:19:05,720 --> 00:19:11,180
futon I get a little weird normally only

00:19:09,380 --> 00:19:15,080
sees Java Script and now sees JavaScript

00:19:11,180 --> 00:19:16,910
and Python and so I can write my map

00:19:15,080 --> 00:19:19,850
function and my reduced function if I

00:19:16,910 --> 00:19:25,610
wanted to and but write it in Python so

00:19:19,850 --> 00:19:27,710
we use yield to bring it out and then

00:19:25,610 --> 00:19:28,300
basically you get the records that are

00:19:27,710 --> 00:19:31,250
returned

00:19:28,300 --> 00:19:32,660
now the structure is really simple for

00:19:31,250 --> 00:19:34,580
this document but you'll see lots of

00:19:32,660 --> 00:19:36,470
other stuff in there so there's things

00:19:34,580 --> 00:19:38,480
about has compaction running when this

00:19:36,470 --> 00:19:44,480
record got created was replication on

00:19:38,480 --> 00:19:49,160
things like that web framework supports

00:19:44,480 --> 00:19:51,650
pretty good the Django one uses couchdb

00:19:49,160 --> 00:19:54,440
cat hairs django support built-in you

00:19:51,650 --> 00:19:56,000
create models which are your documents

00:19:54,440 --> 00:19:59,180
and your settings file you define your

00:19:56,000 --> 00:20:00,770
CouchDB there's only sort of one end

00:19:59,180 --> 00:20:03,890
unnatural act that you have to do is you

00:20:00,770 --> 00:20:08,440
have to say that you're connecting but

00:20:03,890 --> 00:20:10,760
it does work flask has a beautiful one

00:20:08,440 --> 00:20:12,080
it has all the paging and everything

00:20:10,760 --> 00:20:14,330
built-in because think about how you

00:20:12,080 --> 00:20:15,380
would actually page this document

00:20:14,330 --> 00:20:16,880
database where you've got all these

00:20:15,380 --> 00:20:19,940
distributed nodes and things it's not

00:20:16,880 --> 00:20:25,310
quite the same as doing the limit

00:20:19,940 --> 00:20:26,620
function on a sequel adapter so you can

00:20:25,310 --> 00:20:29,390
splice this paging and things like that

00:20:26,620 --> 00:20:33,170
whip to PI has an experimental support

00:20:29,390 --> 00:20:35,570
for CouchDB I've used the first two I

00:20:33,170 --> 00:20:37,520
haven't used the we have two pi one the

00:20:35,570 --> 00:20:40,070
other one is form alchemy actually

00:20:37,520 --> 00:20:42,170
supports couch so if you use form

00:20:40,070 --> 00:20:44,330
alchemy for rendering your forms and

00:20:42,170 --> 00:20:46,670
your Python web framework you can

00:20:44,330 --> 00:20:52,910
actually get it to match off against the

00:20:46,670 --> 00:20:55,780
documents I didn't mention pyramid

00:20:52,910 --> 00:20:59,930
because it isn't one I'm working on one

00:20:55,780 --> 00:21:02,390
it's a definite work in progress there's

00:20:59,930 --> 00:21:04,310
no code up there yet there will be but

00:21:02,390 --> 00:21:08,000
it's really based on how the flask one

00:21:04,310 --> 00:21:09,590
works because it sort of fits in nicely

00:21:08,000 --> 00:21:12,230
I just want to add and support for

00:21:09,590 --> 00:21:14,600
multiple databases the way you connect

00:21:12,230 --> 00:21:16,420
to the database and pyramid is totally

00:21:14,600 --> 00:21:18,680
different from flask so we do it by

00:21:16,420 --> 00:21:22,160
passing the database around and the

00:21:18,680 --> 00:21:23,540
request some other stuff there which you

00:21:22,160 --> 00:21:27,860
can sort of see is that's putting an

00:21:23,540 --> 00:21:29,600
attachment up so that you get the

00:21:27,860 --> 00:21:31,070
concept of almost like a transaction you

00:21:29,600 --> 00:21:33,560
pass the document that you're modified

00:21:31,070 --> 00:21:38,480
with the put attachment otherwise it's a

00:21:33,560 --> 00:21:40,780
separate operation and or we just did a

00:21:38,480 --> 00:21:40,780
store

00:21:42,440 --> 00:21:47,510
so a couple of resources I mean Google's

00:21:45,950 --> 00:21:52,100
just the best thing for doing it there

00:21:47,510 --> 00:21:55,600
are lots of blog posts and net on using

00:21:52,100 --> 00:22:01,720
couch lots of the modern using Python

00:21:55,600 --> 00:22:03,830
it's when I started looking at all the

00:22:01,720 --> 00:22:09,020
databases like that I was going down the

00:22:03,830 --> 00:22:11,300
MongoDB path and then try couch on the

00:22:09,020 --> 00:22:14,480
side and for me it's a nice fit

00:22:11,300 --> 00:22:15,890
but like all these no sequel databases

00:22:14,480 --> 00:22:17,270
you've really got to look at for what

00:22:15,890 --> 00:22:20,750
you're trying to achieve each one of

00:22:17,270 --> 00:22:23,950
them has some particular thing that

00:22:20,750 --> 00:22:27,920
makes it really good for a specific task

00:22:23,950 --> 00:22:30,050
so I'm not advocating that if you do

00:22:27,920 --> 00:22:32,300
everything in CouchDB but I what I'm

00:22:30,050 --> 00:22:35,300
advocating and certainly look at no

00:22:32,300 --> 00:22:36,380
sequel databases as filling a certain

00:22:35,300 --> 00:22:38,960
niche

00:22:36,380 --> 00:22:41,000
I'm not saying ditch sequel

00:22:38,960 --> 00:22:42,680
databases because they do some things a

00:22:41,000 --> 00:22:45,380
lot better than what a no sequel

00:22:42,680 --> 00:22:46,970
database does I don't I use multiple

00:22:45,380 --> 00:22:51,470
programming languages I'm happy to use

00:22:46,970 --> 00:22:54,380
multiple databases so that's my

00:22:51,470 --> 00:22:56,860
introduction to couch with Python are

00:22:54,380 --> 00:22:56,860
there any questions

00:23:01,870 --> 00:23:08,290
oh yeah a lot of people use for

00:23:06,640 --> 00:23:10,240
logging because it is really

00:23:08,290 --> 00:23:14,980
high-performance that high performance

00:23:10,240 --> 00:23:18,910
comes at making some decisions about

00:23:14,980 --> 00:23:21,970
what you're willing to lose they they're

00:23:18,910 --> 00:23:24,180
trying to fix that up the other thing

00:23:21,970 --> 00:23:26,140
too that I found with and it's not

00:23:24,180 --> 00:23:30,490
it's just again I've got to think about

00:23:26,140 --> 00:23:32,470
deployment getting it compiled on a

00:23:30,490 --> 00:23:34,900
platform you haven't come across a most

00:23:32,470 --> 00:23:37,120
platforms you can get Erlang get it on

00:23:34,900 --> 00:23:38,530
and run it up but certainly if you've

00:23:37,120 --> 00:23:39,840
got something were you doing massive

00:23:38,530 --> 00:23:43,660
opinions and things like that

00:23:39,840 --> 00:23:48,220
Mongo's the way to go I was trying to

00:23:43,660 --> 00:23:49,780
find the reference to a a website that I

00:23:48,220 --> 00:23:52,090
stumbled on and I'm annoyed that I

00:23:49,780 --> 00:23:53,530
didn't say the URL these are the guys

00:23:52,090 --> 00:23:55,200
done a really good comparison of the no

00:23:53,530 --> 00:23:57,340
sequels and even come up with and said

00:23:55,200 --> 00:24:01,270
you know this is a good one for this

00:23:57,340 --> 00:24:03,760
this is a good one for that oh if I find

00:24:01,270 --> 00:24:09,059
it I'll put it up on my Twitter account

00:24:03,760 --> 00:24:09,059
so I'm Hicks done 42 so easy to find yep

00:24:23,399 --> 00:24:27,719
I'm I think the thing is you don't

00:24:25,580 --> 00:24:32,099
probably the toughest one is trying to

00:24:27,719 --> 00:24:33,779
think like it's SQL one of the things I

00:24:32,099 --> 00:24:37,080
should have put up there is there's a

00:24:33,779 --> 00:24:39,239
the couchdb definite guidebook right

00:24:37,080 --> 00:24:42,029
which is an O'Reilly book is free online

00:24:39,239 --> 00:24:46,859
as well and it actually has a cookbook

00:24:42,029 --> 00:24:47,789
for SQL jockeys and but when you read

00:24:46,859 --> 00:24:49,469
what they're trying to do they're trying

00:24:47,789 --> 00:24:52,019
to get your head around not thinking

00:24:49,469 --> 00:24:54,509
like an SQL thing so one of the things

00:24:52,019 --> 00:24:55,979
that's nice about the views you've got

00:24:54,509 --> 00:24:57,839
it you think more you'd think less about

00:24:55,979 --> 00:24:59,789
what's contents a new document and more

00:24:57,839 --> 00:25:02,009
about how you want to see their content

00:24:59,789 --> 00:25:04,499
and so the two parts of what's coming

00:25:02,009 --> 00:25:05,999
out of a view is your key and then the

00:25:04,499 --> 00:25:08,429
data that you want matched against that

00:25:05,999 --> 00:25:10,619
key and so that's what that was couched

00:25:08,429 --> 00:25:13,139
because it everyone's different how they

00:25:10,619 --> 00:25:15,929
and like that's why the no QL stuff

00:25:13,139 --> 00:25:18,629
coming but with couch

00:25:15,929 --> 00:25:21,629
you basically have that key and then you

00:25:18,629 --> 00:25:23,279
can on the API didn't show it there you

00:25:21,629 --> 00:25:25,139
can put your start and end filters and

00:25:23,279 --> 00:25:28,639
things like that so you can almost put

00:25:25,139 --> 00:25:31,349
your equivalent view where clause you

00:25:28,639 --> 00:25:34,739
can and your views use regular

00:25:31,349 --> 00:25:36,690
expressions to limit things so if you

00:25:34,739 --> 00:25:39,809
think about it your your view is almost

00:25:36,690 --> 00:25:41,009
like your your extraction mechanism so

00:25:39,809 --> 00:25:42,690
the fact that your data is sitting in

00:25:41,009 --> 00:25:47,909
one format you can make it come out on

00:25:42,690 --> 00:25:49,859
another the tough bit is which I found

00:25:47,909 --> 00:25:51,089
is you keep thinking do I now go and

00:25:49,859 --> 00:25:52,739
create another because I can hold

00:25:51,089 --> 00:25:54,299
multiple documents in one couchdb

00:25:52,739 --> 00:25:56,369
instance you know different types of

00:25:54,299 --> 00:25:57,479
documents you know should I have my

00:25:56,369 --> 00:26:00,690
attachments off in another document

00:25:57,479 --> 00:26:02,190
that's the tough one in the end I my

00:26:00,690 --> 00:26:03,960
feeling is that if you can get it all

00:26:02,190 --> 00:26:07,349
existing in one document you're better

00:26:03,960 --> 00:26:09,929
off because if you delete things all the

00:26:07,349 --> 00:26:13,739
cascading happens for you and that and

00:26:09,929 --> 00:26:15,359
and then you can use the map to limit

00:26:13,739 --> 00:26:17,309
what you actually see and you could have

00:26:15,359 --> 00:26:19,289
like a tight document type to limit as

00:26:17,309 --> 00:26:21,059
well that's the examples that I tend to

00:26:19,289 --> 00:26:24,330
be seeing the other thing I failed to

00:26:21,059 --> 00:26:29,960
mention is it also runs on Android and

00:26:24,330 --> 00:26:32,820
on Apple ISO our iOS so you can actually

00:26:29,960 --> 00:26:34,529
it's still fairly beta but you can

00:26:32,820 --> 00:26:37,110
basically deploy them on that you can

00:26:34,529 --> 00:26:39,620
talk to them using native apps or

00:26:37,110 --> 00:26:43,830
or it's a good use for the couch yep

00:26:39,620 --> 00:26:52,260
stuff so that's one of the reasons I'm

00:26:43,830 --> 00:26:56,010
looking at it yep that the opinion is

00:26:52,260 --> 00:26:58,560
that the views are a little bit slower

00:26:56,010 --> 00:27:01,260
and you have to be a little bit careful

00:26:58,560 --> 00:27:03,180
if you're importing and libraries

00:27:01,260 --> 00:27:05,670
because of the way the views execute

00:27:03,180 --> 00:27:07,170
there's little tricks and if you look up

00:27:05,670 --> 00:27:09,270
you know making mind Python views run

00:27:07,170 --> 00:27:11,580
fast the thing on Google

00:27:09,270 --> 00:27:13,140
it's basically what happens the imports

00:27:11,580 --> 00:27:16,050
happen every single time you access to

00:27:13,140 --> 00:27:18,180
view and so you do little tricks like

00:27:16,050 --> 00:27:21,470
passing it down as a parameter into the

00:27:18,180 --> 00:27:23,700
view and then it's already loaded so

00:27:21,470 --> 00:27:25,440
there there are ways to speed it up the

00:27:23,700 --> 00:27:28,490
other thing which I haven't tried yet

00:27:25,440 --> 00:27:30,360
but in the the latest version of couch

00:27:28,490 --> 00:27:34,350
external processors were originally

00:27:30,360 --> 00:27:36,780
standard i/o there is now the ability to

00:27:34,350 --> 00:27:38,340
talk through a web proxy which means

00:27:36,780 --> 00:27:41,370
these external processes can be on

00:27:38,340 --> 00:27:42,570
separate machines which means you can

00:27:41,370 --> 00:27:44,010
probably develop it in a web framework

00:27:42,570 --> 00:27:47,070
and not have to jump through the hoops

00:27:44,010 --> 00:27:48,660
or be limited to using Python couch DB

00:27:47,070 --> 00:27:52,050
for doing the view server

00:27:48,660 --> 00:27:54,440
I think that's time up so thank you very

00:27:52,050 --> 00:27:54,440

YouTube URL: https://www.youtube.com/watch?v=RNXjflpOs88


