Title: Behaviour Driven Development - Mr. Malcolm Tredinnick
Publication date: 2011-08-22
Playlist: PyCon Australia 2011
Description: 
	Writing software in an organisation or for ourselves, many people feel that they "should" somehow be doing Test Driven Development (TDD) because "everybody else" is and it's cool, somewhere between necessary and useful and they heard testing was good. When informed that must of TDD isn't about testing (despite the name!), confusion reigns.

Behaviour Driven Development is a different way of approaching the "how to validate your code" problem.
Captions: 
	00:00:04,910 --> 00:00:10,559
okay thank you um so this may be I think

00:00:09,360 --> 00:00:11,880
it said behavior driven development on

00:00:10,559 --> 00:00:14,099
the program this is probably going to be

00:00:11,880 --> 00:00:15,540
a little bit misleading in that the last

00:00:14,099 --> 00:00:17,430
five minutes will include some behavior

00:00:15,540 --> 00:00:19,050
driven development but what I want to

00:00:17,430 --> 00:00:21,510
talk about is a little bit of putting

00:00:19,050 --> 00:00:25,890
some sort of thinking framework around

00:00:21,510 --> 00:00:28,289
testing putting putting a little bit of

00:00:25,890 --> 00:00:30,840
sort of a a way of thinking about

00:00:28,289 --> 00:00:32,460
testing mostly stuff that you probably

00:00:30,840 --> 00:00:35,219
already know but if maybe not thought

00:00:32,460 --> 00:00:37,739
about it this way before and then

00:00:35,219 --> 00:00:40,230
leading into some other ways of thinking

00:00:37,739 --> 00:00:42,180
about this because if you challenge your

00:00:40,230 --> 00:00:44,579
assumptions a little bit and then write

00:00:42,180 --> 00:00:45,539
the end of a bit of code on to actually

00:00:44,579 --> 00:00:48,000
show what I'm talking about with

00:00:45,539 --> 00:00:50,309
behavior driven development whoo okay

00:00:48,000 --> 00:00:51,719
quick audience survey who has some idea

00:00:50,309 --> 00:00:54,020
what I'm talking about with behavior

00:00:51,719 --> 00:00:57,570
driven development or behavioral testing

00:00:54,020 --> 00:01:01,680
mokey who would claim to have actually

00:00:57,570 --> 00:01:03,809
worked in this way on any project four

00:01:01,680 --> 00:01:05,489
and a half people right good the

00:01:03,809 --> 00:01:09,270
audience is an audience of experts I can

00:01:05,489 --> 00:01:10,439
get by I can fake this and kind of mind

00:01:09,270 --> 00:01:13,770
giving this is this is an area that

00:01:10,439 --> 00:01:15,299
people have not necessarily hit upon a

00:01:13,770 --> 00:01:17,009
lot you sort of hear it in the streets

00:01:15,299 --> 00:01:18,299
and stuff like that but maybe you have

00:01:17,009 --> 00:01:20,340
you haven't tried it and people aren't

00:01:18,299 --> 00:01:21,450
sure what it is and I guess what I'll

00:01:20,340 --> 00:01:22,770
say up front the one thing to take away

00:01:21,450 --> 00:01:23,850
from this talk is there's nothing scary

00:01:22,770 --> 00:01:28,860
it's just a different way of thinking

00:01:23,850 --> 00:01:29,970
about things okay so when we're writing

00:01:28,860 --> 00:01:33,479
test we've got a lot of different things

00:01:29,970 --> 00:01:34,860
I mean there's a lot of sort of

00:01:33,479 --> 00:01:35,939
variations and if you haven't thought in

00:01:34,860 --> 00:01:38,610
your head about you know how complicated

00:01:35,939 --> 00:01:39,990
is it to really write tests what choices

00:01:38,610 --> 00:01:41,579
you have to make and I ain't care if

00:01:39,990 --> 00:01:43,560
you're writing tests up front before you

00:01:41,579 --> 00:01:45,149
write the code or if you've written code

00:01:43,560 --> 00:01:46,619
and you're putting tests on it or if

00:01:45,149 --> 00:01:48,270
someone else wrote the code and your

00:01:46,619 --> 00:01:49,979
self defensively writing tests because

00:01:48,270 --> 00:01:52,890
you just like to have a clue what's

00:01:49,979 --> 00:01:55,560
going on or for whatever reason I mean

00:01:52,890 --> 00:01:56,939
the first decision is what level do you

00:01:55,560 --> 00:01:58,649
actually test out imagine you've got the

00:01:56,939 --> 00:01:59,549
big bunch of software with no test and

00:01:58,649 --> 00:02:01,380
you're trying to some big application

00:01:59,549 --> 00:02:03,810
you're trying to test it do you go all

00:02:01,380 --> 00:02:07,110
the way down this end of isolated tests

00:02:03,810 --> 00:02:09,360
in particular you know somehow I write

00:02:07,110 --> 00:02:11,250
tests that all stick together or all

00:02:09,360 --> 00:02:12,390
just operate self-contained or do you go

00:02:11,250 --> 00:02:13,510
all the way up the other end of you

00:02:12,390 --> 00:02:16,390
you're trying to test the whole

00:02:13,510 --> 00:02:18,640
big thing and I mean I guess we'd all

00:02:16,390 --> 00:02:20,189
know in practice at various points

00:02:18,640 --> 00:02:22,510
you're doing things all along this line

00:02:20,189 --> 00:02:23,980
and there's trade-offs at every

00:02:22,510 --> 00:02:25,959
different point along this line too

00:02:23,980 --> 00:02:27,280
because for example if you do if you

00:02:25,959 --> 00:02:29,560
feather down this end on the isolated

00:02:27,280 --> 00:02:32,769
side what what are you actually testing

00:02:29,560 --> 00:02:34,480
what is a unit in a unit test someone

00:02:32,769 --> 00:02:35,920
sort of explained to me a long time ago

00:02:34,480 --> 00:02:38,049
in our unit testing becomes a lot easier

00:02:35,920 --> 00:02:42,220
when you redefine customer to mean unit

00:02:38,049 --> 00:02:44,170
and I know maybe that's a little

00:02:42,220 --> 00:02:46,840
inconsiderate but in the web two point

00:02:44,170 --> 00:02:49,209
oh area that's it's maybe not a you know

00:02:46,840 --> 00:02:50,560
it happens to be done but at the same

00:02:49,209 --> 00:02:52,480
times you go down to the single function

00:02:50,560 --> 00:02:54,370
level well I can get a bit crazy if

00:02:52,480 --> 00:02:56,349
we're trying to have no dependencies on

00:02:54,370 --> 00:02:57,909
external stuff okay we need to mock some

00:02:56,349 --> 00:02:59,440
things up or put some stubs in for

00:02:57,909 --> 00:03:01,540
various external services and I'll talk

00:02:59,440 --> 00:03:02,769
about that in a minute if we're going

00:03:01,540 --> 00:03:05,319
all the way down the other end that

00:03:02,769 --> 00:03:06,340
everything integrated then you need to

00:03:05,319 --> 00:03:07,599
make sure that the you're

00:03:06,340 --> 00:03:10,480
integrating with are actually available

00:03:07,599 --> 00:03:12,069
and unless your system is very very

00:03:10,480 --> 00:03:13,810
self-contained you're going to have some

00:03:12,069 --> 00:03:15,909
external dependencies that you don't

00:03:13,810 --> 00:03:17,889
have necessarily have control over most

00:03:15,909 --> 00:03:20,680
software if you think about is

00:03:17,889 --> 00:03:22,510
connecting thing aid a thing be whatever

00:03:20,680 --> 00:03:24,190
thing anything they might be like okay

00:03:22,510 --> 00:03:25,780
maybe games or something or

00:03:24,190 --> 00:03:27,810
self-contained but a lot of it is

00:03:25,780 --> 00:03:30,760
connecting two different services and

00:03:27,810 --> 00:03:32,980
running time is along the whole thing

00:03:30,760 --> 00:03:35,410
there what do you know I've seen I've

00:03:32,980 --> 00:03:36,699
seen unit very isolated unit tests that

00:03:35,410 --> 00:03:38,199
run a lot slower than the youth greater

00:03:36,699 --> 00:03:40,120
test because there's so much setting up

00:03:38,199 --> 00:03:42,639
and tearing down of things that the

00:03:40,120 --> 00:03:43,720
overhead outweighs them I'm not going to

00:03:42,639 --> 00:03:45,040
say the benefits of the test with the

00:03:43,720 --> 00:03:47,560
overhead outlays the actual running of

00:03:45,040 --> 00:03:49,329
the test so you know that's pretty hot

00:03:47,560 --> 00:03:50,680
and again most people know this if

00:03:49,329 --> 00:03:52,030
you've done testing you know there's

00:03:50,680 --> 00:03:54,790
those trade off somewhere along the line

00:03:52,030 --> 00:03:56,109
and you try very hard you've heard you

00:03:54,790 --> 00:03:57,879
should be down this handle should all be

00:03:56,109 --> 00:03:59,409
isolated and at some point I'll hang it

00:03:57,879 --> 00:04:02,829
we're just going to get by and we'll

00:03:59,409 --> 00:04:06,220
clean up later on and you never do quick

00:04:02,829 --> 00:04:07,659
thing on mocks here and I don't want to

00:04:06,220 --> 00:04:09,010
go into mocks different from stubs and

00:04:07,659 --> 00:04:11,019
things like this but just some things to

00:04:09,010 --> 00:04:12,970
think about if you haven't a lot of

00:04:11,019 --> 00:04:14,949
people don't mock out all their external

00:04:12,970 --> 00:04:18,130
services by which I mean imagine you've

00:04:14,949 --> 00:04:20,109
got something that is a web service that

00:04:18,130 --> 00:04:22,060
talks to that sends email is part of the

00:04:20,109 --> 00:04:23,620
reaction to sign up or something so you

00:04:22,060 --> 00:04:25,060
really need to replace that you don't

00:04:23,620 --> 00:04:26,120
want to actually send email every time

00:04:25,060 --> 00:04:28,010
you run the tests

00:04:26,120 --> 00:04:29,419
and so you probably need to replace the

00:04:28,010 --> 00:04:30,860
email server somehow maybe you've got a

00:04:29,419 --> 00:04:32,720
flag in there that just says if I'm

00:04:30,860 --> 00:04:34,220
running the test don't do email maybe

00:04:32,720 --> 00:04:36,740
put in a little class that actually

00:04:34,220 --> 00:04:38,000
substitutes for your email service maybe

00:04:36,740 --> 00:04:39,530
you actually have a dummy network

00:04:38,000 --> 00:04:41,780
servers running that you tell it's your

00:04:39,530 --> 00:04:44,240
email provider mocks are essentially

00:04:41,780 --> 00:04:48,770
classes that act as the dummy service

00:04:44,240 --> 00:04:51,169
and and fake it a couple of different

00:04:48,770 --> 00:04:54,949
ways to do it and the monkey patching

00:04:51,169 --> 00:04:56,630
and dependency injections and again just

00:04:54,949 --> 00:04:58,580
most people hopefully know this but just

00:04:56,630 --> 00:05:02,690
in case you don't the monkey patching

00:04:58,580 --> 00:05:04,729
idea is because everything in python is

00:05:02,690 --> 00:05:07,310
a beautiful ass object you can replace

00:05:04,729 --> 00:05:09,050
everything so you can happily substitute

00:05:07,310 --> 00:05:10,910
for the socket object in the socket

00:05:09,050 --> 00:05:11,960
module with your own dummy socket thing

00:05:10,910 --> 00:05:14,539
that never ever connects to the network

00:05:11,960 --> 00:05:15,919
it always just goes yep here's a here's

00:05:14,539 --> 00:05:17,389
something back and if you call right on

00:05:15,919 --> 00:05:19,580
it I'll accept it if you call read on it

00:05:17,389 --> 00:05:21,139
I'll give you back what you expect I

00:05:19,580 --> 00:05:22,910
mean the difference between mocks and

00:05:21,139 --> 00:05:24,020
stubs is mocks a semi-intelligent when

00:05:22,910 --> 00:05:26,270
you call them they give you back what

00:05:24,020 --> 00:05:29,930
you expect rather than just swallowing

00:05:26,270 --> 00:05:31,250
everything it was called monkey patching

00:05:29,930 --> 00:05:32,870
I mean there's a whole history about

00:05:31,250 --> 00:05:34,700
originally way back in the day it was

00:05:32,870 --> 00:05:36,440
called gorilla patching not as in

00:05:34,700 --> 00:05:38,180
gorillas the monkeys but it is as in

00:05:36,440 --> 00:05:39,500
gorillas the jungle fighters which

00:05:38,180 --> 00:05:41,210
sounded like guerrilla which became

00:05:39,500 --> 00:05:43,280
monkey and it's all downhill from there

00:05:41,210 --> 00:05:44,750
and the idea was meant to discourage

00:05:43,280 --> 00:05:46,460
people from doing this and then

00:05:44,750 --> 00:05:48,860
particularly in the rails well they

00:05:46,460 --> 00:05:50,840
started adopting it as the way to go and

00:05:48,860 --> 00:05:52,580
became a badge of honor and so now you

00:05:50,840 --> 00:05:53,900
know we're bit torn about whether monkey

00:05:52,580 --> 00:05:55,669
patching is good or bad it can be

00:05:53,900 --> 00:05:57,320
fragile talking about under the covers

00:05:55,669 --> 00:05:59,780
and things maybe not a good way to go

00:05:57,320 --> 00:06:02,449
but in testing land something like this

00:05:59,780 --> 00:06:04,610
is a lifesaver the other way of doing

00:06:02,449 --> 00:06:07,370
things are and sorry if you're doing yes

00:06:04,610 --> 00:06:10,130
if you've got mocks the problem is your

00:06:07,370 --> 00:06:11,960
your your stubbing out you're

00:06:10,130 --> 00:06:14,389
substituting for some real world service

00:06:11,960 --> 00:06:16,270
here like a male a male delivering

00:06:14,389 --> 00:06:19,130
service or maybe a database or maybe a

00:06:16,270 --> 00:06:20,900
logging system or an alert system it's

00:06:19,130 --> 00:06:23,300
actually kind of important that your

00:06:20,900 --> 00:06:25,340
mock imitates reality which it probably

00:06:23,300 --> 00:06:26,660
does the first day you write it and it

00:06:25,340 --> 00:06:28,400
probably doesn't six months later

00:06:26,660 --> 00:06:31,370
because the thing you're stabbing out

00:06:28,400 --> 00:06:32,840
actually changed in some way so you

00:06:31,370 --> 00:06:34,099
actually need a second layer of test

00:06:32,840 --> 00:06:35,960
that tends to check that your mocs

00:06:34,099 --> 00:06:37,219
actually match reality and a lot of

00:06:35,960 --> 00:06:38,599
people leave that out and everyone's

00:06:37,219 --> 00:06:39,480
going yes it worked fine why doesn't it

00:06:38,599 --> 00:06:41,430
work when we release it

00:06:39,480 --> 00:06:43,140
to production because the nail client

00:06:41,430 --> 00:06:46,470
changed their API or Google Maps change

00:06:43,140 --> 00:06:48,630
their API or whatever right so mocks

00:06:46,470 --> 00:06:51,810
come with a added maintenance burden

00:06:48,630 --> 00:06:54,150
here of you need to you need to actually

00:06:51,810 --> 00:06:56,220
check that you're mocking reality your

00:06:54,150 --> 00:06:59,760
test should work when you when you

00:06:56,220 --> 00:07:01,440
deploy which brings us the other point

00:06:59,760 --> 00:07:03,570
there's a sort of another axis here of

00:07:01,440 --> 00:07:05,130
how much infrastructure are you going to

00:07:03,570 --> 00:07:06,630
want to maintain as you're doing your

00:07:05,130 --> 00:07:11,430
test how much infrastructure do you want

00:07:06,630 --> 00:07:12,810
to build if it's very hard to set up

00:07:11,430 --> 00:07:14,580
your test because you need to have all

00:07:12,810 --> 00:07:16,410
this extra stuff pulled in just to avoid

00:07:14,580 --> 00:07:18,540
external dependencies maybe you want to

00:07:16,410 --> 00:07:20,100
have less infrastructure and go a bit

00:07:18,540 --> 00:07:22,230
more integrated or maybe you want to

00:07:20,100 --> 00:07:23,610
have if even even if the integrated end

00:07:22,230 --> 00:07:24,900
of this access can involve a lot of

00:07:23,610 --> 00:07:26,340
infrastructure because now you have to

00:07:24,900 --> 00:07:27,960
go and clean up after yourself like

00:07:26,340 --> 00:07:30,090
remove dummy entries from a real

00:07:27,960 --> 00:07:32,040
database or clean up a real mem cache

00:07:30,090 --> 00:07:33,570
server or something I used to work for a

00:07:32,040 --> 00:07:35,190
company where we had some tests that

00:07:33,570 --> 00:07:36,660
could not that could really only be done

00:07:35,190 --> 00:07:38,190
against the production system because

00:07:36,660 --> 00:07:39,540
the production system involved 100

00:07:38,190 --> 00:07:42,120
million users and it was a little hard

00:07:39,540 --> 00:07:43,800
to simulate that and we did have to go

00:07:42,120 --> 00:07:46,080
in and clean some stuff up up the test

00:07:43,800 --> 00:07:48,300
and so if the tests failed they raised

00:07:46,080 --> 00:07:49,620
an operational in one case because the

00:07:48,300 --> 00:07:52,740
operators have to go in and really

00:07:49,620 --> 00:07:53,850
really clean this up we didn't run those

00:07:52,740 --> 00:07:56,250
tests very often there were sort of

00:07:53,850 --> 00:07:58,020
pre-release things but it happens which

00:07:56,250 --> 00:07:59,130
also brings out there's the extra sort

00:07:58,020 --> 00:08:02,160
of thing of how hard is it to maintain

00:07:59,130 --> 00:08:03,600
these tests as you're going along we've

00:08:02,160 --> 00:08:05,100
all worked on projects particularly

00:08:03,600 --> 00:08:06,870
those who are working on large open

00:08:05,100 --> 00:08:08,730
source projects where the amount of

00:08:06,870 --> 00:08:13,190
effort you have to put in just to keep

00:08:08,730 --> 00:08:15,030
the Dan tests running can be depressing

00:08:13,190 --> 00:08:16,980
different words might be used at

00:08:15,030 --> 00:08:18,600
different times but it can you know it

00:08:16,980 --> 00:08:19,770
can take a lot of effort I'm not going

00:08:18,600 --> 00:08:21,690
to work on that boat because although

00:08:19,770 --> 00:08:24,180
it's easy to fix it's going to take me

00:08:21,690 --> 00:08:25,320
three hours to fix the darn test suite

00:08:24,180 --> 00:08:27,480
or it's going to require a huge

00:08:25,320 --> 00:08:28,740
refactoring of everything I mean I know

00:08:27,480 --> 00:08:31,620
I've been put off doing certain things

00:08:28,740 --> 00:08:34,620
because the overhead of changing the

00:08:31,620 --> 00:08:36,060
test suite is too annoying and this is

00:08:34,620 --> 00:08:37,380
particularly a bit of a problem I think

00:08:36,060 --> 00:08:39,090
more in the Python world than in for

00:08:37,380 --> 00:08:41,220
example something like the Java world or

00:08:39,090 --> 00:08:44,220
even the C++ world particularly a Java

00:08:41,220 --> 00:08:48,120
or a lot of this algorithmic processes

00:08:44,220 --> 00:08:51,120
for testing came from some of this stuff

00:08:48,120 --> 00:08:53,160
was easier because automated refactoring

00:08:51,120 --> 00:08:55,410
is a little bit easier in strongly typed

00:08:53,160 --> 00:08:57,120
pre declared languages like Java and C++

00:08:55,410 --> 00:08:59,040
and things like that it is possible in

00:08:57,120 --> 00:09:00,870
Python but you can there's more edge

00:08:59,040 --> 00:09:02,190
pieces floating around that your

00:09:00,870 --> 00:09:04,680
automatic refactoring tools can

00:09:02,190 --> 00:09:06,240
sometimes sabotage you and they do it in

00:09:04,680 --> 00:09:07,769
frequently enough that you think my tool

00:09:06,240 --> 00:09:09,209
is great it's all helping me do this

00:09:07,769 --> 00:09:10,980
refactoring and change all these things

00:09:09,209 --> 00:09:12,480
right up until it doesn't and you're

00:09:10,980 --> 00:09:15,120
caught by surprise and now you have an

00:09:12,480 --> 00:09:18,779
unexpected amount of overhead to have to

00:09:15,120 --> 00:09:22,500
fix here well nearly was exciting note

00:09:18,779 --> 00:09:24,120
to self don't step back okay I'm not

00:09:22,500 --> 00:09:25,290
going to cover every single testing

00:09:24,120 --> 00:09:26,639
strategy in the world here but I just

00:09:25,290 --> 00:09:29,339
want to put what I'm about to lead into

00:09:26,639 --> 00:09:31,230
into some kind of context and you know

00:09:29,339 --> 00:09:33,120
for fun and fun and laughter try and

00:09:31,230 --> 00:09:37,699
work out other testing strategies and

00:09:33,120 --> 00:09:41,639
I'm not mentioning here perhaps hello

00:09:37,699 --> 00:09:43,290
this is hardly anyone does this formal

00:09:41,639 --> 00:09:44,819
verification is there are there are

00:09:43,290 --> 00:09:47,189
actual languages for writing out your

00:09:44,819 --> 00:09:49,649
program that you can run for verify and

00:09:47,189 --> 00:09:51,180
it proves that it's correct and this is

00:09:49,649 --> 00:09:53,009
you know very hard on many levels for

00:09:51,180 --> 00:09:54,600
example to see the sea level like using

00:09:53,009 --> 00:09:56,430
the C language you need a compiler

00:09:54,600 --> 00:09:57,839
that's also being formally verified to

00:09:56,430 --> 00:10:00,089
actually compile your program correctly

00:09:57,839 --> 00:10:01,620
you'd need at the Python level you need

00:10:00,089 --> 00:10:03,089
something to actually formally verify

00:10:01,620 --> 00:10:05,220
that the Python version you're using

00:10:03,089 --> 00:10:07,709
does the correct thing and so on it it's

00:10:05,220 --> 00:10:09,569
almost not worth it unless for example

00:10:07,709 --> 00:10:11,430
you're sending you know something to

00:10:09,569 --> 00:10:12,810
Mars or a man to the moon or something

00:10:11,430 --> 00:10:13,829
like that at which point you might want

00:10:12,810 --> 00:10:16,290
to put a little bit more effort in

00:10:13,829 --> 00:10:19,430
release early release often doesn't work

00:10:16,290 --> 00:10:21,540
with manned space missions for example

00:10:19,430 --> 00:10:23,490
so there may be more effort goes into

00:10:21,540 --> 00:10:26,069
some level than what we need to deal

00:10:23,490 --> 00:10:27,720
with on a day-to-day basis the next

00:10:26,069 --> 00:10:29,339
level down that we all will start to

00:10:27,720 --> 00:10:30,660
encounter at some point is basically

00:10:29,339 --> 00:10:32,189
test everything you can think of and

00:10:30,660 --> 00:10:34,620
this would certainly go back to the 70s

00:10:32,189 --> 00:10:36,899
and 80s this was the testing strategy

00:10:34,620 --> 00:10:38,550
for those who did it you know sit down

00:10:36,899 --> 00:10:40,470
just write out the full list and that

00:10:38,550 --> 00:10:41,880
feels a lot like formal verification and

00:10:40,470 --> 00:10:43,680
then you realize formal verification is

00:10:41,880 --> 00:10:46,559
even worse than that in terms of how

00:10:43,680 --> 00:10:48,329
hard it is so just every in think of is

00:10:46,559 --> 00:10:49,980
why someone plunks down a sort of Yellow

00:10:48,329 --> 00:10:54,569
Pages size document on your desk if

00:10:49,980 --> 00:10:56,279
these are all the test cases the next

00:10:54,569 --> 00:10:58,079
one we started somewhere between tests

00:10:56,279 --> 00:11:00,689
everything and this one is probably

00:10:58,079 --> 00:11:02,579
where most projects aim to be the kind

00:11:00,689 --> 00:11:05,910
of anti regression test suite we don't

00:11:02,579 --> 00:11:08,070
want to have regressions so

00:11:05,910 --> 00:11:09,930
for we particularly go along with don't

00:11:08,070 --> 00:11:12,720
know bug fixed yet submitted without a

00:11:09,930 --> 00:11:14,460
test if someone notices a problem or if

00:11:12,720 --> 00:11:15,690
someone maybe even notice is that or we

00:11:14,460 --> 00:11:17,100
could end up screwing this up in the

00:11:15,690 --> 00:11:18,960
future they try to test just to make

00:11:17,100 --> 00:11:20,360
sure it keeps working you know so it's

00:11:18,960 --> 00:11:23,730
kind of reactive rather than proactive

00:11:20,360 --> 00:11:25,020
but it certainly means that you keep

00:11:23,730 --> 00:11:27,060
moving forwards or at least you keep

00:11:25,020 --> 00:11:28,770
moving sideways you don't retrace the

00:11:27,060 --> 00:11:30,720
the ground you've you've been along

00:11:28,770 --> 00:11:32,040
don't see a lot of programs a lot of

00:11:30,720 --> 00:11:33,900
project call this or regression test

00:11:32,040 --> 00:11:35,280
suite and I don't think you want to test

00:11:33,900 --> 00:11:36,780
for regressions happening you want

00:11:35,280 --> 00:11:39,210
actually test for regressions not

00:11:36,780 --> 00:11:43,700
happening that kind of bugs me a little

00:11:39,210 --> 00:11:46,290
bit test driven development is again not

00:11:43,700 --> 00:11:47,730
I mean it's bleeding into all software

00:11:46,290 --> 00:11:50,640
development but it particularly came out

00:11:47,730 --> 00:11:51,960
of the Java circles they reach they

00:11:50,640 --> 00:11:53,400
invent a lot of tools to sort of help

00:11:51,960 --> 00:11:58,800
them out from the unfortunate choice of

00:11:53,400 --> 00:12:01,140
using Java and this isn't I mean

00:11:58,800 --> 00:12:02,220
test-driven development is thrown around

00:12:01,140 --> 00:12:03,690
a lot I'm not sure it's completely

00:12:02,220 --> 00:12:08,360
understood by a lot of people it's

00:12:03,690 --> 00:12:10,980
certainly very hard to do the idea is

00:12:08,360 --> 00:12:12,150
before you write any code or before you

00:12:10,980 --> 00:12:15,300
write the next piece of code you you're

00:12:12,150 --> 00:12:16,650
at stage x-rite you write a test that

00:12:15,300 --> 00:12:18,720
he's going to test the next thing you

00:12:16,650 --> 00:12:21,810
write and it might be a method on a

00:12:18,720 --> 00:12:23,790
class or it might be a particular output

00:12:21,810 --> 00:12:25,410
verify nails on there the idea is

00:12:23,790 --> 00:12:27,000
because you're you have to add this new

00:12:25,410 --> 00:12:28,530
feature this test should be failing if

00:12:27,000 --> 00:12:30,270
you can write the test in the next

00:12:28,530 --> 00:12:31,530
feature and it passes what you don't

00:12:30,270 --> 00:12:33,900
write the next feature for a start

00:12:31,530 --> 00:12:35,580
you've already done but in theory you

00:12:33,900 --> 00:12:37,500
know the future doesn't exist so you

00:12:35,580 --> 00:12:39,480
write a test and it fails then you write

00:12:37,500 --> 00:12:43,530
the smallest amount of code possible and

00:12:39,480 --> 00:12:45,810
that's the hard step to make it pass so

00:12:43,530 --> 00:12:47,730
and this if you do it really really

00:12:45,810 --> 00:12:49,350
fiddly it's kind of a silly process

00:12:47,730 --> 00:12:51,360
because your very first line of code is

00:12:49,350 --> 00:12:52,620
something like okay I should be able to

00:12:51,360 --> 00:12:54,090
create imagine we got a program to

00:12:52,620 --> 00:12:55,950
create mazes for a dungeon or something

00:12:54,090 --> 00:12:57,990
yeah I should be able to create a maze

00:12:55,950 --> 00:12:59,880
object so the minimal amount of code

00:12:57,990 --> 00:13:01,920
that does that is it just returns a maze

00:12:59,880 --> 00:13:04,740
instance class that has nothing in it no

00:13:01,920 --> 00:13:06,000
methods no nothing the next test you

00:13:04,740 --> 00:13:07,800
rate which is I should be able to find

00:13:06,000 --> 00:13:09,120
the size or something like that well

00:13:07,800 --> 00:13:12,390
that you know now you have to add more

00:13:09,120 --> 00:13:14,370
code again this works very well in in I

00:13:12,390 --> 00:13:16,200
mean advantage the Java people have and

00:13:14,370 --> 00:13:19,050
the C++ and the strongly typed the

00:13:16,200 --> 00:13:19,740
strongly specified compile time typing

00:13:19,050 --> 00:13:21,720
crowd has

00:13:19,740 --> 00:13:23,790
is there automate refactoring tools are

00:13:21,720 --> 00:13:25,350
certainly a bit better and that can

00:13:23,790 --> 00:13:26,550
become faster but if you sit down and

00:13:25,350 --> 00:13:28,920
try and do strict test-driven

00:13:26,550 --> 00:13:30,600
development it's a little bit painful

00:13:28,920 --> 00:13:32,970
it's kind of interesting it's a

00:13:30,600 --> 00:13:36,480
something I'd recommend trying but it's

00:13:32,970 --> 00:13:37,620
not necessarily Nirvana and you just

00:13:36,480 --> 00:13:39,150
keep doing this over and over again the

00:13:37,620 --> 00:13:40,980
nice thing is you do build up an awesome

00:13:39,150 --> 00:13:42,480
test suite by the end and you you've got

00:13:40,980 --> 00:13:45,360
your regression to your anti regression

00:13:42,480 --> 00:13:48,660
test suite right there even I do it it

00:13:45,360 --> 00:13:50,430
is however not a I mean test-driven

00:13:48,660 --> 00:13:53,550
development is not about testing as it

00:13:50,430 --> 00:13:55,200
turns out which sounds what you're

00:13:53,550 --> 00:13:57,900
actually specifying what should be going

00:13:55,200 --> 00:14:00,690
on rather than verifying what should be

00:13:57,900 --> 00:14:02,370
your verifying that all the code works

00:14:00,690 --> 00:14:03,750
properly you're writing the test up

00:14:02,370 --> 00:14:07,020
front you're saying this should happen

00:14:03,750 --> 00:14:09,270
and then you're writing code to make

00:14:07,020 --> 00:14:11,430
sure it does happen you're not

00:14:09,270 --> 00:14:12,900
necessarily verifying that and then the

00:14:11,430 --> 00:14:14,160
test verifies that that keeps happening

00:14:12,900 --> 00:14:16,410
as time goes forward but you're not

00:14:14,160 --> 00:14:18,270
verifying that what your boss or your

00:14:16,410 --> 00:14:20,280
manager or the mailing list or whatever

00:14:18,270 --> 00:14:24,030
asked you to do is actually happening in

00:14:20,280 --> 00:14:25,530
total you're just you're you're sort of

00:14:24,030 --> 00:14:27,390
specifying what the code should do so

00:14:25,530 --> 00:14:28,800
there is a little bit of a backwards

00:14:27,390 --> 00:14:30,810
thing I mean it's test-driven

00:14:28,800 --> 00:14:34,470
development not testing based

00:14:30,810 --> 00:14:37,020
development if you like document driven

00:14:34,470 --> 00:14:38,730
development arm is more of a Python

00:14:37,020 --> 00:14:40,950
specific type of way of doing things it

00:14:38,730 --> 00:14:43,530
is not a completely insane way of

00:14:40,950 --> 00:14:44,820
thinking about things you know what do I

00:14:43,530 --> 00:14:47,250
want it how do I want to do here while

00:14:44,820 --> 00:14:48,990
pythons very amenable to just trying

00:14:47,250 --> 00:14:50,370
things out right the second see approach

00:14:48,990 --> 00:14:51,990
to development which is it's definitely

00:14:50,370 --> 00:14:54,210
not called because that doesn't sound at

00:14:51,990 --> 00:14:55,830
all professional bad you opening up a

00:14:54,210 --> 00:14:57,840
prompt and just trying something out is

00:14:55,830 --> 00:14:59,880
a very logical way of doing Python and

00:14:57,840 --> 00:15:01,290
whether use doc tests or whether you

00:14:59,880 --> 00:15:03,300
just you know literally write many

00:15:01,290 --> 00:15:04,830
programs to do something essentially

00:15:03,300 --> 00:15:06,420
writing the documentation of how will

00:15:04,830 --> 00:15:08,730
summer how do I envision someone using

00:15:06,420 --> 00:15:11,220
this going forward is not a crazy way to

00:15:08,730 --> 00:15:12,960
develop software if the documentation is

00:15:11,220 --> 00:15:16,320
in some way executable which is where

00:15:12,960 --> 00:15:20,040
doctors come in and even other styles of

00:15:16,320 --> 00:15:21,750
testing they'll get to later on it's all

00:15:20,040 --> 00:15:24,540
the better now you've got your sort of

00:15:21,750 --> 00:15:27,810
regression regression proof code build

00:15:24,540 --> 00:15:29,700
into that that doesn't seem to come up

00:15:27,810 --> 00:15:32,010
in many other languages it comes up in

00:15:29,700 --> 00:15:33,570
Haskell circles for example the tends to

00:15:32,010 --> 00:15:37,020
be another crazy way of doing that

00:15:33,570 --> 00:15:39,870
doesn't come up in things like C++ Java

00:15:37,020 --> 00:15:43,530
Walt behavior driven development is what

00:15:39,870 --> 00:15:47,430
we're about to get to so within that

00:15:43,530 --> 00:15:48,870
framework of we're trying to we're

00:15:47,430 --> 00:15:51,720
trying to test that what we've built

00:15:48,870 --> 00:15:55,140
stays working actually does what we're

00:15:51,720 --> 00:15:56,550
hoping it does and we want somebody to

00:15:55,140 --> 00:15:59,310
focus our mind of how to do it because

00:15:56,550 --> 00:16:00,960
everyone knows you sit down I've been

00:15:59,310 --> 00:16:02,450
asked to build this and I have an empty

00:16:00,960 --> 00:16:04,530
file oh my gosh where do I go from here

00:16:02,450 --> 00:16:06,570
admit it everyone SAT there for sort of

00:16:04,530 --> 00:16:08,580
ten minutes going only I could type the

00:16:06,570 --> 00:16:12,810
first thing I'll take a comment that'll

00:16:08,580 --> 00:16:14,310
that'll do that'll get me started so how

00:16:12,810 --> 00:16:16,470
do we actually you know we tend to

00:16:14,310 --> 00:16:18,810
create software in fairly sensible ways

00:16:16,470 --> 00:16:20,490
right we have something we want to build

00:16:18,810 --> 00:16:22,470
and I say specification but I don't mean

00:16:20,490 --> 00:16:24,450
a formal document that someone maybe

00:16:22,470 --> 00:16:26,070
lays down at you on your desk or though

00:16:24,450 --> 00:16:28,020
you've carefully thought-out I mean at

00:16:26,070 --> 00:16:30,180
some point you have an idea of I want to

00:16:28,020 --> 00:16:31,860
build this and then you go round around

00:16:30,180 --> 00:16:33,150
in circles a lot G you should have made

00:16:31,860 --> 00:16:34,560
those lines a bit thicker but okay

00:16:33,150 --> 00:16:36,800
there's arrows there where there's

00:16:34,560 --> 00:16:39,180
arrowheads imagine there's lines between

00:16:36,800 --> 00:16:42,000
to the go round and round in circles a

00:16:39,180 --> 00:16:45,000
lot on go okay build something try it

00:16:42,000 --> 00:16:46,770
out see if it works rinse wash repeat go

00:16:45,000 --> 00:16:47,910
back realize the specification wasn't

00:16:46,770 --> 00:16:49,800
necessarily accurate or need to be added

00:16:47,910 --> 00:16:51,330
to or whatever like this is every

00:16:49,800 --> 00:16:53,460
project you've ever built really works

00:16:51,330 --> 00:16:55,020
this way I'm just trying to make it make

00:16:53,460 --> 00:16:56,720
it nice and clear here and the

00:16:55,020 --> 00:16:58,650
specification may exist like I said

00:16:56,720 --> 00:17:00,720
might be a quick search there might be

00:16:58,650 --> 00:17:01,950
something your head who knows what right

00:17:00,720 --> 00:17:03,900
there's lots of lots of different places

00:17:01,950 --> 00:17:06,150
but at some point you don't sit down and

00:17:03,900 --> 00:17:08,670
magically code spews forth from your

00:17:06,150 --> 00:17:13,050
fingers it you have some idea of what

00:17:08,670 --> 00:17:14,990
you're trying to build and I encourage

00:17:13,050 --> 00:17:17,430
that you know there's some value in

00:17:14,990 --> 00:17:18,870
capturing this information if it's just

00:17:17,430 --> 00:17:20,760
in your head it's all very easy for the

00:17:18,870 --> 00:17:23,040
first week or month or so to happily

00:17:20,760 --> 00:17:24,540
code what you're thinking of now put

00:17:23,040 --> 00:17:26,459
that aside for three months because your

00:17:24,540 --> 00:17:29,700
life got in the way of your fun and come

00:17:26,459 --> 00:17:32,640
back and there's a lot of you know what

00:17:29,700 --> 00:17:34,470
was I thinking when going on even in

00:17:32,640 --> 00:17:35,880
professional projects particularly if is

00:17:34,470 --> 00:17:36,840
like a big open source project or

00:17:35,880 --> 00:17:39,170
something where you're not the only

00:17:36,840 --> 00:17:41,010
person committing to the code repository

00:17:39,170 --> 00:17:42,480
there's some value in capturing

00:17:41,010 --> 00:17:43,740
specification but we all hate doing

00:17:42,480 --> 00:17:46,110
things twice and we all hate writing

00:17:43,740 --> 00:17:47,220
documents and it can be very hard

00:17:46,110 --> 00:17:48,690
reading somebody else

00:17:47,220 --> 00:17:51,900
fractured English even when they claim

00:17:48,690 --> 00:17:53,250
to be a native English speaker so again

00:17:51,900 --> 00:17:56,520
what can we do to make that a little bit

00:17:53,250 --> 00:17:58,620
easier well if you think about a lot of

00:17:56,520 --> 00:18:01,049
a lot of specifications come down to you

00:17:58,620 --> 00:18:02,309
know I want to do something I'm I have

00:18:01,049 --> 00:18:05,159
some role to play I want to do something

00:18:02,309 --> 00:18:06,809
and something should happen so we can

00:18:05,159 --> 00:18:08,490
kind of capture that pretty easily I

00:18:06,809 --> 00:18:09,900
mean that's what use cases really are if

00:18:08,490 --> 00:18:12,059
you think about it not for a dressed-up

00:18:09,900 --> 00:18:13,650
there's often diagrams as on but the at

00:18:12,059 --> 00:18:15,330
the the smallest level that's what they

00:18:13,650 --> 00:18:17,880
turn out to be and we'll get back to

00:18:15,330 --> 00:18:19,710
that so roll very briefly for example

00:18:17,880 --> 00:18:22,740
you know I'm creating a maze I want to

00:18:19,710 --> 00:18:24,960
be able to see how big it is so that I

00:18:22,740 --> 00:18:26,880
can create a maze of that size that's

00:18:24,960 --> 00:18:30,690
you know that's the type of level we're

00:18:26,880 --> 00:18:33,210
at and so behavior driven development is

00:18:30,690 --> 00:18:35,039
focusing on that type of idea of instead

00:18:33,210 --> 00:18:36,179
of thinking what is the next method I

00:18:35,039 --> 00:18:37,710
want to test or some like that instead

00:18:36,179 --> 00:18:39,630
going from the code back to the test

00:18:37,710 --> 00:18:41,130
writing the test and then write in the

00:18:39,630 --> 00:18:42,360
code which feels like you're bouncing

00:18:41,130 --> 00:18:43,799
your half raiding the code in your head

00:18:42,360 --> 00:18:46,640
before you go to the next thing think

00:18:43,799 --> 00:18:48,900
about what is the next most important

00:18:46,640 --> 00:18:51,960
behavior or feature this software should

00:18:48,900 --> 00:18:53,400
have and what is and next most important

00:18:51,960 --> 00:18:54,960
often means the smaller so you know I

00:18:53,400 --> 00:18:56,610
want to allow users to sign up and

00:18:54,960 --> 00:19:00,270
receive email and tag their friends is

00:18:56,610 --> 00:19:01,470
not a feature that's 17 features but I

00:19:00,270 --> 00:19:03,000
want users to be able to sign up for

00:19:01,470 --> 00:19:04,200
example might be the next most important

00:19:03,000 --> 00:19:05,640
thing because they can't have friends or

00:19:04,200 --> 00:19:07,950
send email and so on before they've

00:19:05,640 --> 00:19:09,870
signed up so you need to write something

00:19:07,950 --> 00:19:11,190
yeah that's that's the idea behind

00:19:09,870 --> 00:19:12,510
instead of going what is the next

00:19:11,190 --> 00:19:15,360
function I want to imply what is the

00:19:12,510 --> 00:19:17,880
next feature or most important thing I

00:19:15,360 --> 00:19:20,370
want to do work out a way you can test

00:19:17,880 --> 00:19:21,780
that and here again behavior involvement

00:19:20,370 --> 00:19:23,520
allows you to sort of split across not

00:19:21,780 --> 00:19:25,590
just a method or a class but whatever

00:19:23,520 --> 00:19:29,159
you need to test it and then implement

00:19:25,590 --> 00:19:31,409
it so they switch around the use case

00:19:29,159 --> 00:19:34,409
thing to be a little bit more concretely

00:19:31,409 --> 00:19:36,059
testable given that something that we

00:19:34,409 --> 00:19:40,559
can set up like this is set up your

00:19:36,059 --> 00:19:42,090
world view of things trigger some event

00:19:40,559 --> 00:19:43,650
like again think your test is going to

00:19:42,090 --> 00:19:44,820
not just say if this happens then this

00:19:43,650 --> 00:19:47,640
should happen you want your test to be

00:19:44,820 --> 00:19:49,289
reasonably deterministic so force it to

00:19:47,640 --> 00:19:51,059
happen and check that the outcome habits

00:19:49,289 --> 00:19:53,070
which if we put it side-by-side with

00:19:51,059 --> 00:19:55,320
these cases makes yeah it's exactly the

00:19:53,070 --> 00:19:57,570
same thing except the the item on the

00:19:55,320 --> 00:19:59,250
right is a lot more testable concretely

00:19:57,570 --> 00:20:00,269
testable than the sort of fuzzy was he

00:19:59,250 --> 00:20:02,369
on the left

00:20:00,269 --> 00:20:04,379
at that without being a vastly different

00:20:02,369 --> 00:20:06,029
language so that anyone can still read

00:20:04,379 --> 00:20:08,039
this you know anyone who's not a

00:20:06,029 --> 00:20:10,109
programmer like you know project manager

00:20:08,039 --> 00:20:13,529
or CEO anyone could read the thing on

00:20:10,109 --> 00:20:15,589
the right and understand it so what does

00:20:13,529 --> 00:20:17,700
this look like in passing practice and

00:20:15,589 --> 00:20:19,979
let me just pause here for a minute and

00:20:17,700 --> 00:20:25,289
say and by ports here I mean move

00:20:19,979 --> 00:20:26,549
forwards and say to next like a lot of

00:20:25,289 --> 00:20:28,409
what I'm talking about here it's not the

00:20:26,549 --> 00:20:30,950
silver bullet so annoying man keeps

00:20:28,409 --> 00:20:33,539
holding up sciencing running out of time

00:20:30,950 --> 00:20:35,190
it's not as silver belitz not a sort of

00:20:33,539 --> 00:20:37,769
magical concept that you've never heard

00:20:35,190 --> 00:20:39,359
of before or that is you know maybe it

00:20:37,769 --> 00:20:41,009
changes your life but it maybe it's not

00:20:39,359 --> 00:20:42,419
you know this isn't something amazingly

00:20:41,009 --> 00:20:43,589
difficult what I'm talking about here is

00:20:42,419 --> 00:20:46,349
a different way of thinking about things

00:20:43,589 --> 00:20:48,959
that to some extent we have rum wraps

00:20:46,349 --> 00:20:50,399
and anklets around but it's also what i

00:20:48,959 --> 00:20:52,019
want to put into your head today is you

00:20:50,399 --> 00:20:52,979
go out of here is you know there's a

00:20:52,019 --> 00:20:55,229
different way of thinking about things

00:20:52,979 --> 00:20:56,789
as think about them as individual

00:20:55,229 --> 00:20:58,829
features or specifications rather than

00:20:56,789 --> 00:21:01,799
perhaps methods on classes or classes or

00:20:58,829 --> 00:21:02,940
so on and so to this extent we sort of

00:21:01,799 --> 00:21:04,349
twist the language a little bit because

00:21:02,940 --> 00:21:06,599
if we're all stuck using the same

00:21:04,349 --> 00:21:07,889
language all the time you don't you get

00:21:06,599 --> 00:21:10,399
stuck in that right of this is what the

00:21:07,889 --> 00:21:13,379
language can do this actually has a name

00:21:10,399 --> 00:21:15,779
sapir-whorf hypothesis that basically

00:21:13,379 --> 00:21:17,909
says the language we use sort of threat

00:21:15,779 --> 00:21:20,399
shapes the way we we actually think

00:21:17,909 --> 00:21:21,959
about things and I don't mean if you

00:21:20,399 --> 00:21:23,940
speak Italian versus you speak English

00:21:21,959 --> 00:21:26,879
you think differently and maybe you do

00:21:23,940 --> 00:21:28,799
but you know if you're if you're talking

00:21:26,879 --> 00:21:30,359
about science in one language versus

00:21:28,799 --> 00:21:32,669
another perhaps you get new one

00:21:30,359 --> 00:21:33,839
particular vocabulary versus another you

00:21:32,669 --> 00:21:36,859
get things in a different way so we're

00:21:33,839 --> 00:21:39,509
going to see a little bit of that here

00:21:36,859 --> 00:21:41,549
pythons unit test module everyone kind

00:21:39,509 --> 00:21:43,589
of knows how this works right you create

00:21:41,549 --> 00:21:46,619
test case subclasses you're right

00:21:43,589 --> 00:21:48,209
methods called test something that do

00:21:46,619 --> 00:21:50,279
testing a certain things or so things

00:21:48,209 --> 00:21:52,200
are equal to other things and then you

00:21:50,279 --> 00:21:54,119
run the unit test Python minus M unit

00:21:52,200 --> 00:21:55,769
test and away you go by the way I'm sort

00:21:54,119 --> 00:21:58,709
of implicitly talking about unit tests

00:21:55,769 --> 00:22:00,899
in Python 2.7 and 3.2 here it's called

00:21:58,709 --> 00:22:03,690
unit test two if you're in versions

00:22:00,899 --> 00:22:05,129
before Python 2.7 so you know it's very

00:22:03,690 --> 00:22:06,779
well worth if you're using unit tests

00:22:05,129 --> 00:22:09,210
and you're stuck on earlier pythons use

00:22:06,779 --> 00:22:10,919
unit test 2 which is on pi pi which is a

00:22:09,210 --> 00:22:13,259
backwards porting of the unit test that

00:22:10,919 --> 00:22:14,010
is in 2.7 it's not at all confusing

00:22:13,259 --> 00:22:18,660
really

00:22:14,010 --> 00:22:20,310
I think so this is what yo a standard

00:22:18,660 --> 00:22:22,860
unit test looks like this is from your

00:22:20,310 --> 00:22:25,260
actual code I didn't write these names

00:22:22,860 --> 00:22:27,270
but if you just look at the names what

00:22:25,260 --> 00:22:29,040
on earth is test doing test field name

00:22:27,270 --> 00:22:30,270
does something I guess testing a field

00:22:29,040 --> 00:22:31,920
name but I don't know well it's testing

00:22:30,270 --> 00:22:34,320
if that fails I wouldn't be able to

00:22:31,920 --> 00:22:37,110
necessarily tell you what it was meant

00:22:34,320 --> 00:22:38,730
to do I certainly don't know what show

00:22:37,110 --> 00:22:42,030
hidden initial is meant to be telling me

00:22:38,730 --> 00:22:45,690
isn't meant to be hidden or showing it's

00:22:42,030 --> 00:22:47,940
not really at all clear I could rename

00:22:45,690 --> 00:22:49,290
these and split them up into classes so

00:22:47,940 --> 00:22:52,320
that it becomes a lot clearer from the

00:22:49,290 --> 00:22:55,560
titles s'okay field should allow their

00:22:52,320 --> 00:22:57,090
need to be overridden and choice field

00:22:55,560 --> 00:22:58,950
should permit initial values in him that

00:22:57,090 --> 00:23:01,650
that second one is actually what the

00:22:58,950 --> 00:23:03,360
show hidden fields is testing and it's

00:23:01,650 --> 00:23:05,400
clear from the context of the class as

00:23:03,360 --> 00:23:06,900
well as from the test name what should

00:23:05,400 --> 00:23:08,910
be going on so if that fails and you see

00:23:06,900 --> 00:23:10,560
that test failed choice fields dots

00:23:08,910 --> 00:23:13,020
should permit initial values in in

00:23:10,560 --> 00:23:14,430
widgets to fail now you know what's

00:23:13,020 --> 00:23:16,290
wrong and what should be happening and

00:23:14,430 --> 00:23:17,970
there's some value there and behavioral

00:23:16,290 --> 00:23:19,920
tests you tend to try and write in

00:23:17,970 --> 00:23:23,850
things like that that work in sentences

00:23:19,920 --> 00:23:25,680
so that you know it is immediately

00:23:23,850 --> 00:23:27,060
cleared also i get forces your mind to

00:23:25,680 --> 00:23:31,560
think a bit about how do i do this as

00:23:27,060 --> 00:23:33,330
sentences you do need to if you're doing

00:23:31,560 --> 00:23:34,920
this type of thing because they don't

00:23:33,330 --> 00:23:36,570
start with the word test you do need to

00:23:34,920 --> 00:23:38,580
sort of override the load test methods

00:23:36,570 --> 00:23:41,340
and unit tests a bit to say you know to

00:23:38,580 --> 00:23:43,320
tell it to load things that start with

00:23:41,340 --> 00:23:44,910
the word shortens of the word test this

00:23:43,320 --> 00:23:46,740
is not hard it's a bit more code that

00:23:44,910 --> 00:23:49,950
fits on the slide to do it generically

00:23:46,740 --> 00:23:51,750
so left as an exercise to the reader but

00:23:49,950 --> 00:23:53,100
it really isn't that hard yeah that's

00:23:51,750 --> 00:23:54,960
that's that should be enough information

00:23:53,100 --> 00:23:57,720
to get you there convince yourself

00:23:54,960 --> 00:23:59,100
Malcolm said it's not that hard you do

00:23:57,720 --> 00:24:00,540
end up creating a few more classes than

00:23:59,100 --> 00:24:01,860
you mate with typical unit test stuff

00:24:00,540 --> 00:24:04,020
because you want it to read like

00:24:01,860 --> 00:24:06,270
sentences so you tend to have a class /

00:24:04,020 --> 00:24:08,160
little concept that's not a problem you

00:24:06,270 --> 00:24:10,680
know classes are reasonably free the

00:24:08,160 --> 00:24:11,640
indentation in in Python makes it clear

00:24:10,680 --> 00:24:13,740
where a class starts and where it

00:24:11,640 --> 00:24:15,420
doesn't and files are even pretty free

00:24:13,740 --> 00:24:17,760
in a test directory people are pack a

00:24:15,420 --> 00:24:19,350
lot into unit test classes and annoys me

00:24:17,760 --> 00:24:21,300
these are setting up the context like

00:24:19,350 --> 00:24:22,890
you know given that some world context

00:24:21,300 --> 00:24:24,500
that's the setup method in unit tests

00:24:22,890 --> 00:24:26,520
it's not that it's not that hard

00:24:24,500 --> 00:24:27,510
everything else unit tests pretty much

00:24:26,520 --> 00:24:30,270
just works

00:24:27,510 --> 00:24:32,040
that relabeling the titles gives you a

00:24:30,270 --> 00:24:36,960
nice behavioral filter things and makes

00:24:32,040 --> 00:24:38,280
it fairly clear doctors this is a way I

00:24:36,960 --> 00:24:41,460
mean doctors have a good and a bad

00:24:38,280 --> 00:24:43,260
reputation and I'm very much on the it's

00:24:41,460 --> 00:24:45,240
easier to use them badly than is to use

00:24:43,260 --> 00:24:46,920
them well but there are cases where it

00:24:45,240 --> 00:24:48,990
works well if you can write your tests

00:24:46,920 --> 00:24:50,960
as a nice little narrative and okay I

00:24:48,990 --> 00:24:54,030
stole things from the Dick and Jane

00:24:50,960 --> 00:24:55,410
books here if they had forced on me when

00:24:54,030 --> 00:24:58,590
I was young but you can write your

00:24:55,410 --> 00:25:01,110
reasonably clear narrative style testing

00:24:58,590 --> 00:25:04,230
of what's going on where these things

00:25:01,110 --> 00:25:06,420
tend to fall down is if the setup is not

00:25:04,230 --> 00:25:07,950
if there's a lot of a lot of setup

00:25:06,420 --> 00:25:09,570
required to make something work you know

00:25:07,950 --> 00:25:12,000
if the context the world context needs

00:25:09,570 --> 00:25:13,650
to be stubbed out a lot doctors probably

00:25:12,000 --> 00:25:15,960
aren't the way to go there also if

00:25:13,650 --> 00:25:18,030
things change a lot they're very hard to

00:25:15,960 --> 00:25:19,740
edit in place because when you can only

00:25:18,030 --> 00:25:24,210
run all of the doc tests you can't run

00:25:19,740 --> 00:25:25,350
just part of it and this makes it hard

00:25:24,210 --> 00:25:26,730
to say okay just run it from halfway

00:25:25,350 --> 00:25:28,410
through so you can spend a lot of time

00:25:26,730 --> 00:25:30,180
going run the doctors fell off a out

00:25:28,410 --> 00:25:31,830
fixed line three run it again or fail

00:25:30,180 --> 00:25:33,870
fixed-line 5-under they get it failed

00:25:31,830 --> 00:25:36,900
697 you'd really just like to you know

00:25:33,870 --> 00:25:38,370
fix particular bits so if you got large

00:25:36,900 --> 00:25:39,810
amounts to set up it's worth if you can

00:25:38,370 --> 00:25:41,130
but if you can write it a reasonable

00:25:39,810 --> 00:25:42,690
narrative this can become a nice

00:25:41,130 --> 00:25:46,740
captured specification that is

00:25:42,690 --> 00:25:49,170
executable that being said in bicking

00:25:46,740 --> 00:25:51,150
who's a big chicago-based python

00:25:49,170 --> 00:25:54,900
developer very good software developer

00:25:51,150 --> 00:25:58,020
he wrote a blog post last year i think

00:25:54,900 --> 00:25:59,460
or maybe 2009 on how he thought

00:25:58,020 --> 00:26:01,620
behavioral driven development was just

00:25:59,460 --> 00:26:03,390
doc test in python and i would say i

00:26:01,620 --> 00:26:06,000
fairly strongly disagree with these

00:26:03,390 --> 00:26:07,530
claims there because as you get the

00:26:06,000 --> 00:26:08,970
particular examples he used work well

00:26:07,530 --> 00:26:10,740
but as you get deeper into trying to

00:26:08,970 --> 00:26:13,260
test more complicated pieces of software

00:26:10,740 --> 00:26:14,460
the whole doc test overhead goes right

00:26:13,260 --> 00:26:16,760
off the rails and I think it would

00:26:14,460 --> 00:26:19,110
become far more effort than it was worth

00:26:16,760 --> 00:26:20,820
so if you know you hand out his blog

00:26:19,110 --> 00:26:22,500
post and read it think it works up to a

00:26:20,820 --> 00:26:23,880
point at the point you're saying to

00:26:22,500 --> 00:26:25,590
fight with the doc test it's definitely

00:26:23,880 --> 00:26:27,690
worth moving on to you know unit test or

00:26:25,590 --> 00:26:31,770
this next one that I'll just talk about

00:26:27,690 --> 00:26:35,220
which are sorry domain-specific language

00:26:31,770 --> 00:26:36,840
sort of modules that bring a little bit

00:26:35,220 --> 00:26:38,670
more language bring a little bit more

00:26:36,840 --> 00:26:40,570
flavor to this I'm not a huge fan of

00:26:38,670 --> 00:26:42,730
domain-specific languages because

00:26:40,570 --> 00:26:44,049
it feels like I'm already programming in

00:26:42,730 --> 00:26:45,549
Python why should I have to learn yet

00:26:44,049 --> 00:26:47,320
another language for something but if

00:26:45,549 --> 00:26:50,529
I'm doing this a lot then knowing the

00:26:47,320 --> 00:26:51,880
language it would make sense there are a

00:26:50,529 --> 00:26:53,980
couple of different reasonable ones here

00:26:51,880 --> 00:26:56,610
let us and freshen both of which are

00:26:53,980 --> 00:26:59,559
rewrites of a ruby tool called cucumber

00:26:56,610 --> 00:27:01,929
a similar thing exists in JavaScript

00:26:59,559 --> 00:27:03,639
well called jasmine so we seem to be

00:27:01,929 --> 00:27:04,840
naming things biologically in this in

00:27:03,639 --> 00:27:06,639
this particular field i'm not sure where

00:27:04,840 --> 00:27:09,909
freshing how they got from cucumber to

00:27:06,639 --> 00:27:11,110
freshen but that's the way it goes both

00:27:09,909 --> 00:27:12,519
of these are reasonable both of them are

00:27:11,110 --> 00:27:13,809
roughly equivalent I'll just give you a

00:27:12,519 --> 00:27:16,389
sort of quick example a lot of freshmen

00:27:13,809 --> 00:27:18,639
looks like a test literally looks like

00:27:16,389 --> 00:27:20,200
this like I mean this is executable test

00:27:18,639 --> 00:27:22,779
Cody and freshen you write it in and

00:27:20,200 --> 00:27:24,129
test file the indentation doesn't

00:27:22,779 --> 00:27:26,620
particularly matter but they do tend to

00:27:24,129 --> 00:27:29,259
use it so that's easy to scan scenario

00:27:26,620 --> 00:27:32,230
is a scenario is a reasonably key word

00:27:29,259 --> 00:27:33,759
here telling it you know this is a test

00:27:32,230 --> 00:27:37,269
case this is a particular thing we're

00:27:33,759 --> 00:27:39,480
testing given and when and then all of

00:27:37,269 --> 00:27:43,419
the first all the first words here all

00:27:39,480 --> 00:27:46,389
special to the the module saying you

00:27:43,419 --> 00:27:47,889
know given me and we'll see you okay so

00:27:46,389 --> 00:27:50,200
what does this look like in actual code

00:27:47,889 --> 00:27:52,240
is we write particular code a sec a

00:27:50,200 --> 00:27:55,450
before is something you set up before

00:27:52,240 --> 00:27:59,559
all the test is run here are some here

00:27:55,450 --> 00:28:01,299
is the line a given line will match this

00:27:59,559 --> 00:28:03,039
and it's using regular expressions I can

00:28:01,299 --> 00:28:05,620
into any number i like into the test

00:28:03,039 --> 00:28:08,980
into the calculator and that is what we

00:28:05,620 --> 00:28:10,210
execute to do this SCC here is a global

00:28:08,980 --> 00:28:15,039
that freshman has floating around that

00:28:10,210 --> 00:28:18,789
is the context similarly we can do winds

00:28:15,039 --> 00:28:21,039
and then and they match things and we

00:28:18,789 --> 00:28:22,389
can read things out of this sec global

00:28:21,039 --> 00:28:25,000
context of floating around 30 set up new

00:28:22,389 --> 00:28:26,830
for every test so effectively you're

00:28:25,000 --> 00:28:29,230
you're writing if i go back to this

00:28:26,830 --> 00:28:31,480
original thing you're writing a bunch of

00:28:29,230 --> 00:28:34,509
functions that when the test runner

00:28:31,480 --> 00:28:35,830
passes is like a given a string that

00:28:34,509 --> 00:28:37,509
should match against the method name

00:28:35,830 --> 00:28:39,549
absol the regular expression in it and

00:28:37,509 --> 00:28:41,590
which it says ik match against another

00:28:39,549 --> 00:28:43,299
given thing that perhaps of the regular

00:28:41,590 --> 00:28:45,519
expression and then there's things that

00:28:43,299 --> 00:28:48,250
are given the when decorator that should

00:28:45,519 --> 00:28:50,049
also be tested and so on my slight

00:28:48,250 --> 00:28:51,580
complaint with this is it's it reads

00:28:50,049 --> 00:28:52,750
very well but if you're running lots of

00:28:51,580 --> 00:28:53,389
different tests you end up writing about

00:28:52,750 --> 00:28:54,950
a billion

00:28:53,389 --> 00:28:56,269
these methods to match each of the

00:28:54,950 --> 00:28:57,979
different ways you want to phrase this

00:28:56,269 --> 00:29:01,489
so if you're doing lots of repetitive

00:28:57,979 --> 00:29:03,139
tests it's nice if you're not it can get

00:29:01,489 --> 00:29:06,049
really painful again i sat down and done

00:29:03,139 --> 00:29:07,399
a couple of not completely toy projects

00:29:06,049 --> 00:29:09,799
in this way just to see what it's like

00:29:07,399 --> 00:29:11,509
and you have to take sharp objects away

00:29:09,799 --> 00:29:13,489
from me on one of them by the end it was

00:29:11,509 --> 00:29:16,639
getting very frustrating writing all

00:29:13,489 --> 00:29:17,809
these test methods the nice thing is

00:29:16,639 --> 00:29:19,369
though it does allow this sort of

00:29:17,809 --> 00:29:20,629
templated approach to things because

00:29:19,369 --> 00:29:21,889
you've got a lot of tests that basically

00:29:20,629 --> 00:29:24,289
do the same thing again this is

00:29:21,889 --> 00:29:25,549
executable code in freshen and this is

00:29:24,289 --> 00:29:27,529
where freshmen doesn't I don't think

00:29:25,549 --> 00:29:29,029
lettuce does quite this way yet anything

00:29:27,529 --> 00:29:31,190
in angle brackets is automatically

00:29:29,029 --> 00:29:33,320
interpreted to be a label in the

00:29:31,190 --> 00:29:35,989
examples table down the bottom so

00:29:33,320 --> 00:29:38,509
without that previous new pager code

00:29:35,989 --> 00:29:40,369
which was two slides actually just runs

00:29:38,509 --> 00:29:41,599
all these tests all at once and you

00:29:40,369 --> 00:29:43,190
could very easily see having a

00:29:41,599 --> 00:29:44,659
spreadsheet of cases like this to maybe

00:29:43,190 --> 00:29:48,950
product managers manage or something

00:29:44,659 --> 00:29:49,999
then turned into code and executed so I

00:29:48,950 --> 00:29:51,619
mean I just want to put that in your

00:29:49,999 --> 00:29:52,999
head it again i would encourage people

00:29:51,619 --> 00:29:54,709
to try this out and see if it works for

00:29:52,999 --> 00:29:56,509
you or if doesn't i can see this working

00:29:54,709 --> 00:29:58,279
for me on certain types of projects I'm

00:29:56,509 --> 00:29:59,659
not a hundred percent confident I would

00:29:58,279 --> 00:30:01,309
be able to predict ahead of time it

00:29:59,659 --> 00:30:02,929
worked for me or not but I definitely

00:30:01,309 --> 00:30:04,639
like for example the unit test way of

00:30:02,929 --> 00:30:06,709
labeling things with shirred rather than

00:30:04,639 --> 00:30:10,669
test because it forces you to actually

00:30:06,709 --> 00:30:12,349
question X should do blah blah blah well

00:30:10,669 --> 00:30:14,419
question yourself should it really is

00:30:12,349 --> 00:30:15,950
that correct think about those who work

00:30:14,419 --> 00:30:17,719
on open source projects think about for

00:30:15,950 --> 00:30:20,749
example how often have you seen a patch

00:30:17,719 --> 00:30:22,729
that deletes a test people are very very

00:30:20,749 --> 00:30:24,289
afraid to delete test by questioning if

00:30:22,729 --> 00:30:26,419
it actually has a right to keep testing

00:30:24,289 --> 00:30:27,589
that thing like you know there's a lot

00:30:26,419 --> 00:30:29,479
of bugs to come around where at some

00:30:27,589 --> 00:30:30,649
point someone goes you oops maybe we're

00:30:29,479 --> 00:30:32,599
actually enforcing the wrong behavior

00:30:30,649 --> 00:30:34,309
that I've written certainly tested

00:30:32,599 --> 00:30:36,019
enforce the right the wrong behavior and

00:30:34,309 --> 00:30:37,820
people have worked around them for ages

00:30:36,019 --> 00:30:41,959
before someone stepped in and said you

00:30:37,820 --> 00:30:45,409
know actually the test is wrong try it

00:30:41,959 --> 00:30:49,159
out think about you know is this is this

00:30:45,409 --> 00:30:50,839
really you is a I love this is you get

00:30:49,159 --> 00:30:52,309
your brain out of that the current habit

00:30:50,839 --> 00:30:55,159
just try something you expand your mind

00:30:52,309 --> 00:30:57,200
a little bit particularly the last one

00:30:55,159 --> 00:30:58,909
is a big benefit I found is here can you

00:30:57,200 --> 00:31:00,559
come back in six months time and when

00:30:58,909 --> 00:31:02,419
your tests fail understand what was the

00:31:00,559 --> 00:31:03,619
test meant to do in the first place it's

00:31:02,419 --> 00:31:05,389
not enough to know what failed it's

00:31:03,619 --> 00:31:06,860
enough to know you know what do I have

00:31:05,389 --> 00:31:09,410
to fix without having to reverse

00:31:06,860 --> 00:31:10,940
janu the tests I can they give one big

00:31:09,410 --> 00:31:12,320
project i'm involved with with russell

00:31:10,940 --> 00:31:13,580
where I spend a lot of time reverse

00:31:12,320 --> 00:31:17,420
engineering the test to find out what

00:31:13,580 --> 00:31:18,679
the behavior was meant to be these

00:31:17,420 --> 00:31:20,330
slides which I know there are a lot of

00:31:18,679 --> 00:31:22,460
them are actually up on github if people

00:31:20,330 --> 00:31:24,679
want to pull them down or talk to me or

00:31:22,460 --> 00:31:27,380
mail whatever I've gone fractionally

00:31:24,679 --> 00:31:29,450
over and have a maid shot so quickly

00:31:27,380 --> 00:31:30,740
questions anybody have a look now Chris

00:31:29,450 --> 00:31:34,940
because we're pushing up against the

00:31:30,740 --> 00:31:37,370
keener to the character yes so am I here

00:31:34,940 --> 00:31:40,970
in another conference that cucumber was

00:31:37,370 --> 00:31:42,440
like the best be the framework do you

00:31:40,970 --> 00:31:46,370
what what do you think I mean you

00:31:42,440 --> 00:31:50,059
presume freshman and appealing cucumber

00:31:46,370 --> 00:31:51,799
is the is the ravine on versions and and

00:31:50,059 --> 00:31:53,720
both freshmen and lettuce have pretty

00:31:51,799 --> 00:31:56,090
much direct copies of cucumber moved

00:31:53,720 --> 00:31:57,830
over the Python world jasmine is a

00:31:56,090 --> 00:32:00,049
similar copy of cucumber movie over the

00:31:57,830 --> 00:32:04,190
JavaScript boat I think they're okay

00:32:00,049 --> 00:32:05,299
like you know it like I said I have a

00:32:04,190 --> 00:32:06,980
slight complaint with the domain

00:32:05,299 --> 00:32:09,380
specific language approach it gets a

00:32:06,980 --> 00:32:13,790
little bit crazy but so so freshness may

00:32:09,380 --> 00:32:15,440
be their first attempt to to try BDD for

00:32:13,790 --> 00:32:16,580
Python developers first and lettuce I

00:32:15,440 --> 00:32:17,299
think lettuce is slightly older but

00:32:16,580 --> 00:32:22,400
freshman is a little bit better

00:32:17,299 --> 00:32:26,059
maintained okay one more oh we got more

00:32:22,400 --> 00:32:27,530
really quick questions nope everyone was

00:32:26,059 --> 00:32:29,720
really detailed question can catch

00:32:27,530 --> 00:32:33,830
Malcolm later I'll be around very well

00:32:29,720 --> 00:32:36,429
thank you very much no and someone's

00:32:33,830 --> 00:32:36,429

YouTube URL: https://www.youtube.com/watch?v=XXHknWKuG2U


