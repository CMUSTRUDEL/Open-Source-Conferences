Title: Say What You Mean: Meta-Programming a Declarative API - Dr. Ryan F Kelly
Publication date: 2011-08-22
Playlist: PyCon Australia 2011
Description: 
	This talk will explore the use of python's meta-programming facilities to create a simple declarative API so that you can *say what you mean* - write code that focuses on the what and the why without being cluttered by the how.  If you've ever wondered how the Django ORM or SQLObject work their magic, this is the talk for you.
Captions: 
	00:00:02,419 --> 00:00:07,319
thanks for coming out sorry got a bit of

00:00:05,160 --> 00:00:09,840
a cough we'll see how we go that's yeah

00:00:07,319 --> 00:00:13,320
this is basically me having a bit of a

00:00:09,840 --> 00:00:16,080
chat about building a declarative API in

00:00:13,320 --> 00:00:18,570
Python now depending on your background

00:00:16,080 --> 00:00:20,460
in computer science or in programming if

00:00:18,570 --> 00:00:23,039
I say the word declarative to you it

00:00:20,460 --> 00:00:27,599
could mean a number of rather different

00:00:23,039 --> 00:00:32,070
things what I really want to get out and

00:00:27,599 --> 00:00:35,309
today is a concept that I think about in

00:00:32,070 --> 00:00:37,340
terms of red code and green code and you

00:00:35,309 --> 00:00:39,890
might have heard it in terms of

00:00:37,340 --> 00:00:42,809
accidental versus inherent complexity

00:00:39,890 --> 00:00:47,300
and if you haven't heard of it the best

00:00:42,809 --> 00:00:50,309
example is is the humble for loop right

00:00:47,300 --> 00:00:52,860
what I'm trying to do here is iterate

00:00:50,309 --> 00:00:55,559
over a sequence of items and call some

00:00:52,860 --> 00:00:57,809
function and if I were in C or a c-like

00:00:55,559 --> 00:01:00,539
language this is approximately how much

00:00:57,809 --> 00:01:03,660
code I'd have to write there's two kinds

00:01:00,539 --> 00:01:04,979
of code here the code in green is the

00:01:03,660 --> 00:01:07,049
stuff that I actually want to do right I

00:01:04,979 --> 00:01:10,979
want to iterate over this sequence and

00:01:07,049 --> 00:01:12,630
do something and the code in red is not

00:01:10,979 --> 00:01:14,970
related to what I want to do it's extra

00:01:12,630 --> 00:01:17,159
fluff that I have to write in order to

00:01:14,970 --> 00:01:19,229
translate my intention into something

00:01:17,159 --> 00:01:21,060
that the computer can understand and one

00:01:19,229 --> 00:01:24,930
of the things that we love about hyphen

00:01:21,060 --> 00:01:26,880
is that for example iteration there's a

00:01:24,930 --> 00:01:29,490
lot cleaner there's a lot more green and

00:01:26,880 --> 00:01:32,159
a lot less red you know I don't really

00:01:29,490 --> 00:01:33,150
care what would I name the variable that

00:01:32,159 --> 00:01:35,369
I'm using is would write over this

00:01:33,150 --> 00:01:38,280
sequence but there's a lot less noise in

00:01:35,369 --> 00:01:40,320
this code it's a lot more about what it

00:01:38,280 --> 00:01:41,610
is that I want to do and less about the

00:01:40,320 --> 00:01:44,340
fluff I have to do to convince the

00:01:41,610 --> 00:01:48,329
computer to do it more green less read

00:01:44,340 --> 00:01:51,119
more what less how okay and and if

00:01:48,329 --> 00:01:53,759
you're designing a computer system or an

00:01:51,119 --> 00:01:55,530
API for developers which is sort of

00:01:53,759 --> 00:01:57,750
where I'm coming from here that's really

00:01:55,530 --> 00:01:59,520
what you need to aim for and of course

00:01:57,750 --> 00:02:01,460
the red code has to go somewhere

00:01:59,520 --> 00:02:04,799
eventually this has got to turn into

00:02:01,460 --> 00:02:07,740
assembly instructions right but the

00:02:04,799 --> 00:02:09,450
point is that you know you shouldn't be

00:02:07,740 --> 00:02:11,069
spreading it out over your code you

00:02:09,450 --> 00:02:11,650
should get it right then you should hide

00:02:11,069 --> 00:02:13,629
it and Ryu

00:02:11,650 --> 00:02:15,670
it over and over again so the reason we

00:02:13,629 --> 00:02:18,010
have such a nice for loop in python is

00:02:15,670 --> 00:02:19,480
because the Python core developers get

00:02:18,010 --> 00:02:21,040
their hands dirty with all of the

00:02:19,480 --> 00:02:22,920
nitty-gritty in the bits and pieces and

00:02:21,040 --> 00:02:26,170
the red code that makes iteration happen

00:02:22,920 --> 00:02:28,659
so your challenge if you're designing an

00:02:26,170 --> 00:02:31,359
API to be used by other developers

00:02:28,659 --> 00:02:36,069
please try not to leak red code all over

00:02:31,359 --> 00:02:37,950
your users and this is this is a gun

00:02:36,069 --> 00:02:40,299
yeah so this talks a little bit about

00:02:37,950 --> 00:02:42,939
some things to think about it and some

00:02:40,299 --> 00:02:45,310
common patterns when you come to

00:02:42,939 --> 00:02:47,799
building up building up some api's it's

00:02:45,310 --> 00:02:50,680
a little bit about how to use Python and

00:02:47,799 --> 00:02:53,319
some of the more quite advanced features

00:02:50,680 --> 00:02:55,989
of Python or quote magic features of

00:02:53,319 --> 00:02:58,500
Python to make it happen but really it's

00:02:55,989 --> 00:03:01,329
all example and I want to basically

00:02:58,500 --> 00:03:04,480
rebuild a little library of mine or a

00:03:01,329 --> 00:03:07,599
smaller version of it as a way of

00:03:04,480 --> 00:03:09,370
discussing this this topic so most of

00:03:07,599 --> 00:03:11,319
all of my slides are code with a little

00:03:09,370 --> 00:03:13,359
bit of commentary and a little bit of

00:03:11,319 --> 00:03:16,750
highlighting so hopefully I say enough

00:03:13,359 --> 00:03:18,579
words to make it all make sense here's

00:03:16,750 --> 00:03:20,470
what I want to do it this is a trim down

00:03:18,579 --> 00:03:22,269
version of a library I have called D XML

00:03:20,470 --> 00:03:26,319
which is if you take something like

00:03:22,269 --> 00:03:30,519
Django's ORM and rip out SQL and put XML

00:03:26,319 --> 00:03:33,250
in its place yeah thrilling and this is

00:03:30,519 --> 00:03:35,409
the idea so we have say a class in

00:03:33,250 --> 00:03:37,419
Python it it's a person right I would

00:03:35,409 --> 00:03:39,760
like to be able to create an instance of

00:03:37,419 --> 00:03:43,449
this class and render it into some

00:03:39,760 --> 00:03:44,949
sensible XML structure right conversely

00:03:43,449 --> 00:03:48,250
i want to be able to take that xml and

00:03:44,949 --> 00:03:50,260
pass it back into a person object from

00:03:48,250 --> 00:03:52,629
whom I can you know access various

00:03:50,260 --> 00:03:55,359
fields they have the appropriate types

00:03:52,629 --> 00:03:58,359
for these fields and the API prevents me

00:03:55,359 --> 00:04:00,840
from doing something silly right so it's

00:03:58,359 --> 00:04:03,609
about trying to take an XML schema and

00:04:00,840 --> 00:04:05,229
capture it as a set of Python classes

00:04:03,609 --> 00:04:08,169
that help me work with that document

00:04:05,229 --> 00:04:10,030
structure more effectively you know you

00:04:08,169 --> 00:04:11,590
could you could take a similar sort of

00:04:10,030 --> 00:04:13,599
approach to a lot of different problem

00:04:11,590 --> 00:04:17,680
domains but this is a small enough

00:04:13,599 --> 00:04:18,820
example that we can get going so there's

00:04:17,680 --> 00:04:21,039
a little bit of an obvious starting

00:04:18,820 --> 00:04:23,440
point here right we would have some base

00:04:21,039 --> 00:04:25,420
model class and

00:04:23,440 --> 00:04:28,360
and you as a user of this library would

00:04:25,420 --> 00:04:31,420
inherit from model means I'm declaring a

00:04:28,360 --> 00:04:33,610
person object all right what do I put

00:04:31,420 --> 00:04:34,990
inside my class definition and basically

00:04:33,610 --> 00:04:38,830
this whole talk is about cleaning up

00:04:34,990 --> 00:04:41,440
what goes here so if you think about it

00:04:38,830 --> 00:04:43,180
in order to implement this library the

00:04:41,440 --> 00:04:46,510
model class is going to need to know

00:04:43,180 --> 00:04:49,150
what XML Taggarts expecting right it's

00:04:46,510 --> 00:04:51,570
going to need to know what fields to

00:04:49,150 --> 00:04:53,620
look for in contained within that tag

00:04:51,570 --> 00:04:54,700
and at this point of the game that

00:04:53,620 --> 00:04:56,230
basically means what the fields are

00:04:54,700 --> 00:04:58,150
called and what types they're supposed

00:04:56,230 --> 00:05:01,930
to be so that's not a lot of information

00:04:58,150 --> 00:05:03,550
now and if we didn't care about making a

00:05:01,930 --> 00:05:04,720
friendly API we can just say well you're

00:05:03,550 --> 00:05:06,100
declaring a model you need to tell me

00:05:04,720 --> 00:05:08,440
what the tag name is you need to tell me

00:05:06,100 --> 00:05:10,210
a list of the fields and you need to

00:05:08,440 --> 00:05:12,130
tell me the name you want to have in

00:05:10,210 --> 00:05:13,840
Python the type you want it to have and

00:05:12,130 --> 00:05:17,980
the name of the tag you want it to turn

00:05:13,840 --> 00:05:20,590
into an XML I could take that you know

00:05:17,980 --> 00:05:25,150
if I have that class I could implement

00:05:20,590 --> 00:05:27,730
render and pars right put the tag name

00:05:25,150 --> 00:05:31,360
out as XML go over all the fields and

00:05:27,730 --> 00:05:32,950
you know turn them into sub tags and put

00:05:31,360 --> 00:05:34,270
the closing tag on it and return it it's

00:05:32,950 --> 00:05:36,250
easy you've got all the information you

00:05:34,270 --> 00:05:38,140
need I don't want to get into this code

00:05:36,250 --> 00:05:41,950
this is just to show you the starting

00:05:38,140 --> 00:05:44,530
point and similarly it's very easy for

00:05:41,950 --> 00:05:47,290
me to you know given that information I

00:05:44,530 --> 00:05:49,270
can pass a structure out of XML alright

00:05:47,290 --> 00:05:52,450
i can i can get the root tag i can check

00:05:49,270 --> 00:05:55,870
that it's got the expected tag name i

00:05:52,450 --> 00:05:57,430
can iterate over the child nodes of that

00:05:55,870 --> 00:06:00,030
tag and match them up with the fields

00:05:57,430 --> 00:06:02,710
that you've told me to expect and and

00:06:00,030 --> 00:06:05,640
just you know set them as attributes on

00:06:02,710 --> 00:06:07,630
the object and we're done so the

00:06:05,640 --> 00:06:09,730
implementation of that idea is quite

00:06:07,630 --> 00:06:11,650
straightforward what I'm interested in

00:06:09,730 --> 00:06:17,860
is how we can make it easier to use and

00:06:11,650 --> 00:06:20,140
harder to use incorrectly so how is

00:06:17,860 --> 00:06:22,270
there much red code in this sort of

00:06:20,140 --> 00:06:25,570
initial API and there's nods all around

00:06:22,270 --> 00:06:27,790
yes there is to begin with this is

00:06:25,570 --> 00:06:31,780
incredibly redundant and it would you

00:06:27,790 --> 00:06:33,070
know you may want to map from a tag name

00:06:31,780 --> 00:06:35,560
to a different class man that's fair

00:06:33,070 --> 00:06:37,150
enough but if you're going to go with

00:06:35,560 --> 00:06:38,560
what would be a sensible default you

00:06:37,150 --> 00:06:42,070
shouldn't have to repeat yourself

00:06:38,560 --> 00:06:44,470
explicitly and and again a sensible

00:06:42,070 --> 00:06:46,210
default would be to have the names of

00:06:44,470 --> 00:06:49,510
your field subtags matching the names of

00:06:46,210 --> 00:06:52,770
your fields in Python more importantly

00:06:49,510 --> 00:06:55,389
this is awful a tuple of tuples of

00:06:52,770 --> 00:06:56,620
various properties right it's very very

00:06:55,389 --> 00:06:58,240
easy to get that wrong you could put

00:06:56,620 --> 00:07:00,160
them in the wrong order and get weird

00:06:58,240 --> 00:07:02,169
type errors at runtime you could

00:07:00,160 --> 00:07:05,740
duplicate fields with different

00:07:02,169 --> 00:07:07,210
definitions and so forth so the first

00:07:05,740 --> 00:07:10,240
thing we can start from is saying look

00:07:07,210 --> 00:07:11,979
let's let's let you align some of those

00:07:10,240 --> 00:07:14,380
details and we'll fill them in and fix

00:07:11,979 --> 00:07:16,860
them up with some sensible defaults and

00:07:14,380 --> 00:07:19,000
quite a common pattern that you'll see

00:07:16,860 --> 00:07:21,460
if I'm going to the patent slow there we

00:07:19,000 --> 00:07:23,229
go and quite clever Padma you'll see is

00:07:21,460 --> 00:07:24,400
that you'll have some class and then

00:07:23,229 --> 00:07:27,220
you'll need to do some post processing

00:07:24,400 --> 00:07:28,720
on it to fill in some defaults or make

00:07:27,220 --> 00:07:32,110
sure that it's got sensible things

00:07:28,720 --> 00:07:34,840
defined on it this might be registering

00:07:32,110 --> 00:07:36,310
a plug-in for example now you know it's

00:07:34,840 --> 00:07:37,720
quite a common pattern to take a class

00:07:36,310 --> 00:07:40,240
and then and then do something with it

00:07:37,720 --> 00:07:42,220
after it's been declared and I think

00:07:40,240 --> 00:07:44,050
often people at six has class decorators

00:07:42,220 --> 00:07:46,120
that let you do this but that's still

00:07:44,050 --> 00:07:48,100
noise but i'm saying i'm building a

00:07:46,120 --> 00:07:50,800
model and then i am building a model

00:07:48,100 --> 00:07:52,660
again so if you find yourself in a

00:07:50,800 --> 00:07:55,479
solution like this a situation like this

00:07:52,660 --> 00:07:57,100
i propose using meta classes as a

00:07:55,479 --> 00:07:58,690
solution and there's probably people in

00:07:57,100 --> 00:08:00,550
the audience who will cringe at seeing

00:07:58,690 --> 00:08:04,240
the word metaclass in the word solution

00:08:00,550 --> 00:08:06,490
in the same line and they're rightly

00:08:04,240 --> 00:08:08,650
considered deeper magic than you'll

00:08:06,490 --> 00:08:10,360
almost never need but I don't think

00:08:08,650 --> 00:08:12,490
people should be terribly afraid to

00:08:10,360 --> 00:08:15,070
deploy them in situations where it can

00:08:12,490 --> 00:08:17,080
improve your code the problem with meta

00:08:15,070 --> 00:08:18,820
classes is that people have this very

00:08:17,080 --> 00:08:21,160
strong distinction between values and

00:08:18,820 --> 00:08:23,020
types which just doesn't exist in Python

00:08:21,160 --> 00:08:25,030
all right so python has this thing

00:08:23,020 --> 00:08:27,460
called list and if you call it it

00:08:25,030 --> 00:08:29,350
creates a new list but that has this

00:08:27,460 --> 00:08:31,450
thing called dipped and if you call it

00:08:29,350 --> 00:08:33,159
it creates a new dipped and part that

00:08:31,450 --> 00:08:34,479
has this thing called type and if you

00:08:33,159 --> 00:08:38,250
call it what do you think it's going to

00:08:34,479 --> 00:08:40,959
create that's going to give you an error

00:08:38,250 --> 00:08:42,490
because types have information rather if

00:08:40,959 --> 00:08:44,020
you give it enough information you say

00:08:42,490 --> 00:08:45,310
well my type is named of this it has

00:08:44,020 --> 00:08:47,140
these base classes it has these

00:08:45,310 --> 00:08:48,580
attributes that will go ahead and give

00:08:47,140 --> 00:08:50,350
you a new type

00:08:48,580 --> 00:08:51,940
and actually every time you write a

00:08:50,350 --> 00:08:54,280
class statement this is what Python does

00:08:51,940 --> 00:08:58,240
behind the scenes it turns it into a

00:08:54,280 --> 00:09:00,460
call to to the type bilking similarly

00:08:58,240 --> 00:09:02,590
you can sub class from something like

00:09:00,460 --> 00:09:03,910
list and customize the way that lists

00:09:02,590 --> 00:09:05,890
are created so this is a list that

00:09:03,910 --> 00:09:08,070
doesn't like the number seven all right

00:09:05,890 --> 00:09:10,870
and and if you use this customized

00:09:08,070 --> 00:09:12,520
subclass of list you know you can

00:09:10,870 --> 00:09:15,100
customize the behavior in exactly the

00:09:12,520 --> 00:09:17,200
same way you can sub class from type and

00:09:15,100 --> 00:09:19,210
customize the way that types are created

00:09:17,200 --> 00:09:20,710
and that's what I'm going to do but this

00:09:19,210 --> 00:09:22,420
is quite possibly the simplest

00:09:20,710 --> 00:09:24,070
application of a metaclass that you

00:09:22,420 --> 00:09:27,430
could do that does something useful I'm

00:09:24,070 --> 00:09:32,440
going to create a new type of type if

00:09:27,430 --> 00:09:34,210
you like so a extended type it's called

00:09:32,440 --> 00:09:36,280
model metaclass and basically you're

00:09:34,210 --> 00:09:37,660
going to do everything that type

00:09:36,280 --> 00:09:39,460
normally does so i'm going to go ahead

00:09:37,660 --> 00:09:40,810
and create a class basically and then

00:09:39,460 --> 00:09:43,360
i'm going to do a bunch of extra stuff

00:09:40,810 --> 00:09:45,580
afterwards now so i'm going to you know

00:09:43,360 --> 00:09:46,990
check if if you haven't given me a tag

00:09:45,580 --> 00:09:48,640
name in your list of attributes i'm

00:09:46,990 --> 00:09:50,980
going to default to the name that you

00:09:48,640 --> 00:09:52,990
declared on the class if you haven't

00:09:50,980 --> 00:09:54,550
given me a list of fields i might set up

00:09:52,990 --> 00:09:57,460
to an empty tuple i might give you an

00:09:54,550 --> 00:09:58,990
error something like that if you haven't

00:09:57,460 --> 00:10:00,280
given me a tag name on some of your

00:09:58,990 --> 00:10:03,850
fields i'm going to go along and fix

00:10:00,280 --> 00:10:05,860
that up and basically this is a way to

00:10:03,850 --> 00:10:07,780
hook some extra post processing logic

00:10:05,860 --> 00:10:10,000
into your classes you give this magic

00:10:07,780 --> 00:10:11,680
little definition you say Python instead

00:10:10,000 --> 00:10:13,630
of calling out to the built-in type

00:10:11,680 --> 00:10:16,120
constructor pull out to this customized

00:10:13,630 --> 00:10:19,120
version right and then everybody that

00:10:16,120 --> 00:10:20,530
declares a subclass of our model we're

00:10:19,120 --> 00:10:21,670
going to get control of that declaration

00:10:20,530 --> 00:10:23,170
when they're finished and we're going to

00:10:21,670 --> 00:10:28,050
be able to fix it up and do interesting

00:10:23,170 --> 00:10:30,370
things okay so we can get down to this

00:10:28,050 --> 00:10:32,230
with a little bit of magic and that's

00:10:30,370 --> 00:10:34,300
looking better already there's a lot

00:10:32,230 --> 00:10:38,230
less noise a lot less redundancy going

00:10:34,300 --> 00:10:39,490
on what happens if I want to do

00:10:38,230 --> 00:10:40,780
something slightly more complex like

00:10:39,490 --> 00:10:42,910
this right I want to say well actually

00:10:40,780 --> 00:10:45,130
age is an attribute of the person tag is

00:10:42,910 --> 00:10:47,170
not a sub tag then I need to have

00:10:45,130 --> 00:10:48,760
additional information about my fields

00:10:47,170 --> 00:10:50,500
alright so and so we'll add another

00:10:48,760 --> 00:10:52,450
another item to that table to say if

00:10:50,500 --> 00:10:54,100
it's a tag or an attribute and then

00:10:52,450 --> 00:10:56,350
maybe I've got tags that are optional or

00:10:54,100 --> 00:10:59,080
required and very very quickly this

00:10:56,350 --> 00:11:00,760
becomes a huge nightmare right you will

00:10:59,080 --> 00:11:01,590
get this wrong everyone will get this

00:11:00,760 --> 00:11:05,730
wrong

00:11:01,590 --> 00:11:07,620
um what you need to do is factor all of

00:11:05,730 --> 00:11:09,150
this out into something that's a little

00:11:07,620 --> 00:11:10,410
bit cleaner something that fills in the

00:11:09,150 --> 00:11:14,910
defaults for you something that can help

00:11:10,410 --> 00:11:16,110
you out so help a class declared

00:11:14,910 --> 00:11:17,820
something like this right instead of

00:11:16,110 --> 00:11:19,260
saying here's my tuple of various

00:11:17,820 --> 00:11:21,450
options that don't have names I'm

00:11:19,260 --> 00:11:23,790
declaring a field it's of type string

00:11:21,450 --> 00:11:27,630
I'm declaring a field it's an attribute

00:11:23,790 --> 00:11:29,880
that it's optional and obviously that

00:11:27,630 --> 00:11:32,460
can be just a normal class it's got a

00:11:29,880 --> 00:11:34,430
bunch of optional keyword arguments and

00:11:32,460 --> 00:11:37,590
it fills in sensible defaults for you

00:11:34,430 --> 00:11:40,350
what's nice about doing that is you can

00:11:37,590 --> 00:11:42,060
actually defer a lot of the logic for

00:11:40,350 --> 00:11:43,710
fields into this helper class now

00:11:42,060 --> 00:11:48,320
because you're not just dealing with

00:11:43,710 --> 00:11:48,320
dixon and tuples of tuples and so forth

00:11:49,430 --> 00:11:54,990
for example you can have the metaclass

00:11:52,140 --> 00:11:57,690
tell the field about its own name so we

00:11:54,990 --> 00:11:59,130
go from from this declaration all of a

00:11:57,690 --> 00:12:01,380
sudden I've got an object or so right i

00:11:59,130 --> 00:12:03,960
am a field of this type i have this name

00:12:01,380 --> 00:12:06,390
i've got all these various properties so

00:12:03,960 --> 00:12:07,890
that field can contain all of the logic

00:12:06,390 --> 00:12:12,270
for dealing with those those different

00:12:07,890 --> 00:12:16,470
cases nope I haven't got that slide so

00:12:12,270 --> 00:12:17,700
um this is a stylistic pointing so I've

00:12:16,470 --> 00:12:19,650
written a couple of libraries in this

00:12:17,700 --> 00:12:21,990
you know using some of these techniques

00:12:19,650 --> 00:12:24,090
you can either have this generic field

00:12:21,990 --> 00:12:26,790
type and give it a type that it's

00:12:24,090 --> 00:12:28,560
supposed to supposed to use or you can

00:12:26,790 --> 00:12:29,820
do what for example Django does which is

00:12:28,560 --> 00:12:31,650
so well I have all these different types

00:12:29,820 --> 00:12:35,100
of field I have a string field and an

00:12:31,650 --> 00:12:37,170
integer field I prefer this approach

00:12:35,100 --> 00:12:40,020
having tried them both because it means

00:12:37,170 --> 00:12:42,030
that you can create and customize field

00:12:40,020 --> 00:12:44,880
classes and hand off a bunch of work so

00:12:42,030 --> 00:12:47,040
this is our render method and originally

00:12:44,880 --> 00:12:48,990
it was doing all of the work like it got

00:12:47,040 --> 00:12:51,090
the raw information about our fields and

00:12:48,990 --> 00:12:53,340
it figured out this is optional this has

00:12:51,090 --> 00:12:54,870
got this name this is whatever by

00:12:53,340 --> 00:12:57,510
factoring the aliens will help a class

00:12:54,870 --> 00:12:59,220
you can just hand off all of that work

00:12:57,510 --> 00:13:01,080
and then people can customize it and

00:12:59,220 --> 00:13:02,670
override various bits and pieces so it

00:13:01,080 --> 00:13:06,330
helps to clean up your implementation as

00:13:02,670 --> 00:13:08,640
well are we going okay so that's that's

00:13:06,330 --> 00:13:11,550
not looking too bad how we're going for

00:13:08,640 --> 00:13:14,499
for noise for rid code here well this is

00:13:11,550 --> 00:13:16,629
this is ness and

00:13:14,499 --> 00:13:18,189
I should point out that this if I take

00:13:16,629 --> 00:13:20,049
the red coat o is basically the API that

00:13:18,189 --> 00:13:21,459
you get out of something like ctypes for

00:13:20,049 --> 00:13:23,739
declaring structure and so forth it's

00:13:21,459 --> 00:13:25,719
not bad you know there's not too much

00:13:23,739 --> 00:13:27,009
noise there but that you don't need to

00:13:25,719 --> 00:13:29,019
know about that it's pretty obviously

00:13:27,009 --> 00:13:30,399
we're declaring fields why do i need to

00:13:29,019 --> 00:13:32,859
put all of this extra structure around

00:13:30,399 --> 00:13:34,869
it be much nicer if we just said this

00:13:32,859 --> 00:13:35,979
all right which if you've seen if you

00:13:34,869 --> 00:13:37,509
play with an hour m this is pretty

00:13:35,979 --> 00:13:38,949
obvious right I have a person there's a

00:13:37,509 --> 00:13:41,849
name it's a strength of there's a just

00:13:38,949 --> 00:13:45,129
an inch of your field in a problem right

00:13:41,849 --> 00:13:46,869
oops we've lost some very important

00:13:45,129 --> 00:13:51,639
information here because the class

00:13:46,869 --> 00:13:56,079
statement will turn that nope that into

00:13:51,639 --> 00:13:58,359
a dict of you know name is this age is

00:13:56,079 --> 00:14:01,029
this what we've lost is the information

00:13:58,359 --> 00:14:02,979
that will name is the first subtag age

00:14:01,029 --> 00:14:05,109
is a second sub tag though ordering

00:14:02,979 --> 00:14:07,599
information in something like an XML or

00:14:05,109 --> 00:14:10,479
SQL for fields in your databases are

00:14:07,599 --> 00:14:12,129
very important and although the ordering

00:14:10,479 --> 00:14:14,919
information is still there in your

00:14:12,129 --> 00:14:17,319
source code plus and throws it away when

00:14:14,919 --> 00:14:19,269
it goes to to execute that class so we

00:14:17,319 --> 00:14:22,169
want to restore it and you have to

00:14:19,269 --> 00:14:24,369
resort to a little bit of trickery and

00:14:22,169 --> 00:14:27,220
you don't have to do this trickery in

00:14:24,369 --> 00:14:30,069
Python 3 because this is such will

00:14:27,220 --> 00:14:31,629
notice a common but it's such a perhaps

00:14:30,069 --> 00:14:33,579
of common use in the context of meta

00:14:31,629 --> 00:14:36,339
classes that you want to be able to

00:14:33,579 --> 00:14:38,919
preserve the ordering information from

00:14:36,339 --> 00:14:40,149
your declaration python3 actually did a

00:14:38,919 --> 00:14:42,279
bit of an overhaul of the metaclass

00:14:40,149 --> 00:14:43,569
system and added some hooks that let you

00:14:42,279 --> 00:14:46,149
do this in a much cleaner way but this

00:14:43,569 --> 00:14:48,339
is the Python 2 version so trickery

00:14:46,149 --> 00:14:51,899
here's what we're going to do we're

00:14:48,339 --> 00:14:54,579
going to keep a hidden global counter I

00:14:51,899 --> 00:15:00,189
love the grimaces I love grimacing in my

00:14:54,579 --> 00:15:03,459
talks every time you instantiate a new

00:15:00,189 --> 00:15:07,449
field object it's going to grab the

00:15:03,459 --> 00:15:08,589
current value of that counter our flight

00:15:07,449 --> 00:15:10,449
of the most important line it's going to

00:15:08,589 --> 00:15:14,109
increment that counter to say well I've

00:15:10,449 --> 00:15:15,309
now created another field and then these

00:15:14,109 --> 00:15:17,079
field objects are just going to order

00:15:15,309 --> 00:15:20,229
themselves by the order in which they

00:15:17,079 --> 00:15:22,120
were created ok so when Python gets

00:15:20,229 --> 00:15:24,130
around to executing this

00:15:22,120 --> 00:15:25,450
Stringfield get sort of zero interview

00:15:24,130 --> 00:15:31,120
field gets order one and we've got

00:15:25,450 --> 00:15:35,800
enough information to restore that I'd

00:15:31,120 --> 00:15:37,900
love to chat with you about this so you

00:15:35,800 --> 00:15:40,480
know when when we're back in the process

00:15:37,900 --> 00:15:41,920
of post-processing our our class we can

00:15:40,480 --> 00:15:42,850
get our list of fields and we can sort

00:15:41,920 --> 00:15:44,589
them back into the order they were

00:15:42,850 --> 00:15:50,710
supposed to be in and we've recovered

00:15:44,589 --> 00:15:52,600
that information the final point as I've

00:15:50,710 --> 00:15:54,010
kind of skipped over something here my

00:15:52,600 --> 00:15:56,080
initial slides I said we want to be able

00:15:54,010 --> 00:15:57,850
to do stuff like this I want to be able

00:15:56,080 --> 00:15:59,170
to say I've declared age as an integer

00:15:57,850 --> 00:16:00,400
so if you give me something that's not

00:15:59,170 --> 00:16:02,050
an integer I want to give you an arrow

00:16:00,400 --> 00:16:05,980
straight away that's a very helpful

00:16:02,050 --> 00:16:08,160
piece of API design and this is a very

00:16:05,980 --> 00:16:11,250
common pattern and there's a very common

00:16:08,160 --> 00:16:13,990
solution to it which is to construct

00:16:11,250 --> 00:16:16,990
descriptive classes which are again this

00:16:13,990 --> 00:16:19,870
sort of thing that you're often hear

00:16:16,990 --> 00:16:21,310
about but grudgingly or secretively as

00:16:19,870 --> 00:16:22,540
something you should avoid and that's

00:16:21,310 --> 00:16:24,339
probably true if you don't need them but

00:16:22,540 --> 00:16:26,800
they're very very useful the basic idea

00:16:24,339 --> 00:16:28,630
is the following when pie thing goes to

00:16:26,800 --> 00:16:30,040
set and attribute on your object it

00:16:28,630 --> 00:16:33,089
doesn't just bung it straight into your

00:16:30,040 --> 00:16:35,680
 right the first thing it does

00:16:33,089 --> 00:16:38,260
simplified of course is to check whether

00:16:35,680 --> 00:16:40,060
your class define something with that

00:16:38,260 --> 00:16:41,050
name so I'm setting setting attribute

00:16:40,060 --> 00:16:43,180
checks if your class to find something

00:16:41,050 --> 00:16:46,270
with that name that has a set method

00:16:43,180 --> 00:16:48,279
underscoring school set method if it has

00:16:46,270 --> 00:16:50,740
such a method that method gets control

00:16:48,279 --> 00:16:52,900
of the attribute setting process and it

00:16:50,740 --> 00:16:54,880
gives up if you don't have their method

00:16:52,900 --> 00:16:57,520
we fall back to the default so what I'm

00:16:54,880 --> 00:17:00,880
going to do are basically on my field

00:16:57,520 --> 00:17:03,190
class I'm going to create this let's

00:17:00,880 --> 00:17:07,990
descript the method called set so when

00:17:03,190 --> 00:17:09,790
you go to set a value on me on the

00:17:07,990 --> 00:17:12,550
object that corresponds to this field

00:17:09,790 --> 00:17:14,470
this method gets control by by the way

00:17:12,550 --> 00:17:16,360
that Python some attribute logic works

00:17:14,470 --> 00:17:18,280
and I'm basically no sale will validate

00:17:16,360 --> 00:17:20,949
that value I might convert it into the

00:17:18,280 --> 00:17:22,390
appropriate night perfect type and then

00:17:20,949 --> 00:17:23,650
go ahead and store it on the instance

00:17:22,390 --> 00:17:27,640
where it would have wound up eventually

00:17:23,650 --> 00:17:30,550
and similarly you can customize the get

00:17:27,640 --> 00:17:32,200
method to do something seem to learn rip

00:17:30,550 --> 00:17:34,060
it out and then push press it as it's

00:17:32,200 --> 00:17:39,600
coming being read back out of the

00:17:34,060 --> 00:17:42,160
jet and so basically that will give us

00:17:39,600 --> 00:17:44,320
everything that we'd like out of out of

00:17:42,160 --> 00:17:47,590
a library like this in what I think is a

00:17:44,320 --> 00:17:49,000
very red code free API and once you've

00:17:47,590 --> 00:17:50,650
started down this road you can start to

00:17:49,000 --> 00:17:52,540
be more interesting things like nesting

00:17:50,650 --> 00:17:55,450
your classes so you can have a group

00:17:52,540 --> 00:17:57,250
with a list of people which corresponds

00:17:55,450 --> 00:17:59,290
to us you know a collection of persons

00:17:57,250 --> 00:18:01,560
subtags and this sort of thing you know

00:17:59,290 --> 00:18:04,420
the Django RM has all of these great

00:18:01,560 --> 00:18:08,440
different sub field types to nest and

00:18:04,420 --> 00:18:10,750
relate models in various ways but once

00:18:08,440 --> 00:18:14,560
you've kind of taken these little bits

00:18:10,750 --> 00:18:17,050
of metoprolol and compose them together

00:18:14,560 --> 00:18:18,730
in an appropriate way you can build

00:18:17,050 --> 00:18:21,160
structures like this very declaratively

00:18:18,730 --> 00:18:22,420
and you know eliminate a lot of

00:18:21,160 --> 00:18:24,430
opportunities to be able to get thing

00:18:22,420 --> 00:18:25,960
wrong eliminate a lot of opportunities

00:18:24,430 --> 00:18:30,880
for people to be confused about what

00:18:25,960 --> 00:18:33,520
their code is doing I like to conclude

00:18:30,880 --> 00:18:36,640
all of my talks with an admonishment to

00:18:33,520 --> 00:18:37,900
sensibility it's very easy to get really

00:18:36,640 --> 00:18:39,550
excited about all these awesome

00:18:37,900 --> 00:18:42,060
metaprogramming facilities apartment has

00:18:39,550 --> 00:18:44,470
and go completely overboard with them

00:18:42,060 --> 00:18:45,610
I'm going to return to the for loop for

00:18:44,470 --> 00:18:48,850
an example like that there's a little

00:18:45,610 --> 00:18:50,380
bit of red code in there and certain

00:18:48,850 --> 00:18:53,020
other language purists will tell you

00:18:50,380 --> 00:18:55,750
that the most you know the the highest

00:18:53,020 --> 00:18:58,150
signal-to-noise ratio form of this

00:18:55,750 --> 00:18:59,950
iteration is map right I want to iterate

00:18:58,150 --> 00:19:01,840
I want to do something on this sequence

00:18:59,950 --> 00:19:04,630
and there's absolutely no red code there

00:19:01,840 --> 00:19:08,140
whatsoever which is fine and it works in

00:19:04,630 --> 00:19:10,390
languages that are geared that way I I

00:19:08,140 --> 00:19:11,890
put it to you and I think sort of with

00:19:10,390 --> 00:19:13,600
barf and three this was a generally

00:19:11,890 --> 00:19:15,520
accepted consensus of the community that

00:19:13,600 --> 00:19:20,290
most often that's harder to read than

00:19:15,520 --> 00:19:22,840
that in Python for a Python API so this

00:19:20,290 --> 00:19:24,310
talks all about sort of interesting

00:19:22,840 --> 00:19:25,270
things that you can do because I find

00:19:24,310 --> 00:19:27,430
them interesting and their funder

00:19:25,270 --> 00:19:29,470
Hackworth and so forth but at the end of

00:19:27,430 --> 00:19:31,210
the day if you're designing an API it's

00:19:29,470 --> 00:19:33,010
all about balance and it's all about

00:19:31,210 --> 00:19:35,830
trade-offs and if you can hide a lot of

00:19:33,010 --> 00:19:39,670
red code by doing a little bit of magic

00:19:35,830 --> 00:19:41,260
behind the scenes awesome but it's very

00:19:39,670 --> 00:19:43,240
much a balancing act and every time you

00:19:41,260 --> 00:19:45,250
pull out a metaclass so you pull out a

00:19:43,240 --> 00:19:47,650
descriptor

00:19:45,250 --> 00:19:48,670
you're making your implementation a

00:19:47,650 --> 00:19:50,530
little bit more difficult than you're

00:19:48,670 --> 00:19:51,640
making the maintenance and extension of

00:19:50,530 --> 00:19:53,230
that implementation a little more

00:19:51,640 --> 00:19:56,560
difficult so it has to be a very

00:19:53,230 --> 00:19:58,840
carefully balanced and act and I think

00:19:56,560 --> 00:20:01,420
I'm actually running under time which is

00:19:58,840 --> 00:20:03,790
unusual for me so this is D XML this is

00:20:01,420 --> 00:20:06,160
the project that that's based on and it

00:20:03,790 --> 00:20:08,590
came out of a real-life need I was

00:20:06,160 --> 00:20:10,720
implementing a web dev server and webdav

00:20:08,590 --> 00:20:12,580
is all about XML that's all they're

00:20:10,720 --> 00:20:14,470
making sure the XML is extremely well

00:20:12,580 --> 00:20:16,480
formed has things in the correct order

00:20:14,470 --> 00:20:19,000
and so forth so if you want to play

00:20:16,480 --> 00:20:21,370
around with with a proper you know

00:20:19,000 --> 00:20:23,920
full-on version of that stuff that's

00:20:21,370 --> 00:20:27,330
there and thanks very much for coming up

00:20:23,920 --> 00:20:27,330
and I've got lots of time for questions

00:20:31,740 --> 00:20:35,680
like like rides here we have plenty of

00:20:33,820 --> 00:20:37,740
time for questions are there any

00:20:35,680 --> 00:20:37,740
questions

00:20:43,130 --> 00:20:49,290
um I just wanted to get your thoughts on

00:20:46,950 --> 00:20:53,100
working with other programmers with

00:20:49,290 --> 00:20:56,190
these sort of systems by holding hiding

00:20:53,100 --> 00:20:58,170
the red code somewhere else in a way so

00:20:56,190 --> 00:21:00,030
if I didn't do that I could just go in

00:20:58,170 --> 00:21:02,520
you know override this method and just

00:21:00,030 --> 00:21:04,790
be some general tips or discussions

00:21:02,520 --> 00:21:08,850
about that one of one of the criticisms

00:21:04,790 --> 00:21:12,510
that's often leveled at meta classes in

00:21:08,850 --> 00:21:13,980
Python macros in Lisp and sort of these

00:21:12,510 --> 00:21:16,140
these meta programming techniques is

00:21:13,980 --> 00:21:18,450
that well I understand them but my

00:21:16,140 --> 00:21:19,650
colleagues might not understand them and

00:21:18,450 --> 00:21:20,940
that's true to an extent I think

00:21:19,650 --> 00:21:24,150
sometimes that's used there's a little

00:21:20,940 --> 00:21:26,820
bit of an excuse to not bother and you

00:21:24,150 --> 00:21:32,550
certainly have to be very careful in

00:21:26,820 --> 00:21:34,380
your application of it and there's

00:21:32,550 --> 00:21:36,540
nothing in the implementation of a

00:21:34,380 --> 00:21:38,310
metaclass for example that will stop you

00:21:36,540 --> 00:21:40,920
from further customizing that it's just

00:21:38,310 --> 00:21:42,930
that you need to be aware that there are

00:21:40,920 --> 00:21:45,180
meta classes involved you need to be

00:21:42,930 --> 00:21:47,400
aware of where they are and how they are

00:21:45,180 --> 00:21:48,870
structured it's very easy to write a

00:21:47,400 --> 00:21:51,600
one-off metaclass that does a bunch of

00:21:48,870 --> 00:21:54,240
crazy stuff and isn't open for extension

00:21:51,600 --> 00:21:56,250
or modification but it's no it's not

00:21:54,240 --> 00:21:59,490
that much more of a design challenge to

00:21:56,250 --> 00:22:01,200
write good extensible code at the meta

00:21:59,490 --> 00:22:03,650
level than it is to write it up the

00:22:01,200 --> 00:22:05,850
object level if you're comfortable there

00:22:03,650 --> 00:22:11,160
yeah it's definitely a trade-off you

00:22:05,850 --> 00:22:12,720
know you potentially good approach for

00:22:11,160 --> 00:22:15,330
complicated projects is to factor out

00:22:12,720 --> 00:22:16,440
you know certain really hard aspects of

00:22:15,330 --> 00:22:19,110
it and give it to your best developers

00:22:16,440 --> 00:22:21,060
like that's that's um certainly a valid

00:22:19,110 --> 00:22:22,770
approach and this is sort of thing that

00:22:21,060 --> 00:22:24,770
can help you achieve that as well to

00:22:22,770 --> 00:22:27,330
sort of if you've got a very nice

00:22:24,770 --> 00:22:29,760
barrier that's quite simple between

00:22:27,330 --> 00:22:31,230
really horrible code and the rest of

00:22:29,760 --> 00:22:34,790
your code that's not a bad thing in

00:22:31,230 --> 00:22:37,080
general yeah definitely a lot of

00:22:34,790 --> 00:22:42,330
potential social issues involved in

00:22:37,080 --> 00:22:45,350
doing this sort of thing you're going to

00:22:42,330 --> 00:22:45,350
make me come upstairs answer

00:22:46,809 --> 00:22:57,190
we need the mic at you mentioned that in

00:22:55,039 --> 00:22:59,749
Python 3 they have a solution for the

00:22:57,190 --> 00:23:02,659
ordered field issue are you able to just

00:22:59,749 --> 00:23:05,840
summarize yeah basically when when

00:23:02,659 --> 00:23:07,759
Python execute your class this theft if

00:23:05,840 --> 00:23:09,889
whatever it basically creates a new name

00:23:07,759 --> 00:23:12,169
space and then execute the body of your

00:23:09,889 --> 00:23:14,029
class in that namespace right in Python

00:23:12,169 --> 00:23:15,340
2 that's always a dictionary which is

00:23:14,029 --> 00:23:18,499
why you lose ordering information

00:23:15,340 --> 00:23:20,119
python3 meta classes have a special

00:23:18,499 --> 00:23:22,539
method I think it's called underscoring

00:23:20,119 --> 00:23:24,740
school prepare or something basically

00:23:22,539 --> 00:23:26,929
the first thing Python does is called

00:23:24,740 --> 00:23:29,419
our method whatever it gives back is

00:23:26,929 --> 00:23:31,970
used as the context for executing the

00:23:29,419 --> 00:23:33,470
body of the class so if it gives back a

00:23:31,970 --> 00:23:36,470
regular dictionary you get regular

00:23:33,470 --> 00:23:38,570
behavior if you're metaclass says will

00:23:36,470 --> 00:23:41,029
execute the class body in an ordered

00:23:38,570 --> 00:23:43,249
dictionary for example then that

00:23:41,029 --> 00:23:44,869
maintains the the order in which things

00:23:43,249 --> 00:23:46,669
are declared in the medical you can do

00:23:44,869 --> 00:23:49,100
all sorts of wacky things return

00:23:46,669 --> 00:23:50,779
whatever you like I think when they did

00:23:49,100 --> 00:23:53,330
the pep for that I don't recall there

00:23:50,779 --> 00:23:54,799
being a single other example other than

00:23:53,330 --> 00:23:56,840
ordered dictionaries of what you could

00:23:54,799 --> 00:23:58,639
sensibly return from this method but

00:23:56,840 --> 00:24:02,840
some I'm sure someone could come up with

00:23:58,639 --> 00:24:05,980
something fun there any other questions

00:24:02,840 --> 00:24:05,980
upstairs while I'm up

00:24:16,190 --> 00:24:19,730
or downstairs

00:24:23,330 --> 00:24:31,200
okay then thank you very much right yup

00:24:27,200 --> 00:24:33,840
sorry there was another question oh then

00:24:31,200 --> 00:24:36,570
I'm could you potentially override but

00:24:33,840 --> 00:24:38,879
monkey patch object and change the

00:24:36,570 --> 00:24:40,950
metaclass for object i actually had

00:24:38,879 --> 00:24:43,019
exactly that thought a bear 930 this

00:24:40,950 --> 00:24:45,509
morning I mean I I don't think it can

00:24:43,019 --> 00:24:47,940
actually change the base class of object

00:24:45,509 --> 00:24:49,320
but what you could do is define a new

00:24:47,940 --> 00:24:52,019
thing called object and shove it in the

00:24:49,320 --> 00:24:54,269
built-ins dictionary and then everybody

00:24:52,019 --> 00:24:55,529
else that you know thinks they're safely

00:24:54,269 --> 00:24:57,869
inheriting from objects actually

00:24:55,529 --> 00:25:02,879
inheriting from your evil version but

00:24:57,869 --> 00:25:06,230
don't do that almost all of my talk 10

00:25:02,879 --> 00:25:06,230
with the big father says don't do that

00:25:07,580 --> 00:25:15,019
okay anymore last call this time all

00:25:11,970 --> 00:25:15,019

YouTube URL: https://www.youtube.com/watch?v=nRDC6GtfB4g


