Title: The NCSS Challenge: teaching programming via automated testing - Mr. Tim Dawborn
Publication date: 2011-08-22
Playlist: PyCon Australia 2011
Description: 
	The NCSS Challenge (http://challenge.ncss.edu.au/) is an online programming competition for Australian high school students. There are four different courses being run during 2011: Introductory Python, Intermediate Python, Advanced Python, and Embedded Systems (using the Arduino). In 2010 we had over 1700 students participate in the Challenge.

There are a number of interesting technical challenges which had to be overcome in order to facilitate such a system.
Captions: 
	00:00:01,220 --> 00:00:08,820
yes yes now hey my name is Tim I'm PhD

00:00:05,910 --> 00:00:10,410
University Sydney and I'm kind of lead

00:00:08,820 --> 00:00:13,139
developer for all the investors

00:00:10,410 --> 00:00:14,849
challenge road stuff and this talk is

00:00:13,139 --> 00:00:17,000
gonna be kind of split into three

00:00:14,849 --> 00:00:22,020
discrete sections if I have enough time

00:00:17,000 --> 00:00:23,789
the first first section will be on the

00:00:22,020 --> 00:00:26,070
technical side of the challenge

00:00:23,789 --> 00:00:27,660
and what kind of stuff when you consider

00:00:26,070 --> 00:00:30,090
when doing any kind of online

00:00:27,660 --> 00:00:33,300
programming stuff the second section

00:00:30,090 --> 00:00:34,590
will be on what our application stack is

00:00:33,300 --> 00:00:37,590
those are interested in the third

00:00:34,590 --> 00:00:40,320
section if I get time will be on both

00:00:37,590 --> 00:00:42,980
try Python and Gumby app which Regina

00:00:40,320 --> 00:00:45,210
and Katie mentioned in the previous talk

00:00:42,980 --> 00:00:46,860
so what is the answer this challenge

00:00:45,210 --> 00:00:48,660
since this challenge is a pro-am

00:00:46,860 --> 00:00:50,969
competition for high school students in

00:00:48,660 --> 00:00:54,300
which we aim to teach programming via

00:00:50,969 --> 00:00:56,579
problem-based learning we have students

00:00:54,300 --> 00:00:58,649
from use 5 through year 12 in Australia

00:00:56,579 --> 00:01:00,359
I want to test you all couple students

00:00:58,649 --> 00:01:02,850
from New Zealand I in the mix as well

00:01:00,359 --> 00:01:05,369
it runs for 5 weeks and the last couple

00:01:02,850 --> 00:01:09,000
of years we've grown I greatly numbers

00:01:05,369 --> 00:01:14,850
so this here we had 2000 71 students up

00:01:09,000 --> 00:01:16,470
from 1391 last year and enrollments are

00:01:14,850 --> 00:01:18,060
greater than students because students

00:01:16,470 --> 00:01:20,220
can enroll in multiple courses per year

00:01:18,060 --> 00:01:21,689
so enrollments you can see have jumped

00:01:20,220 --> 00:01:25,799
up quite a bit from just three years ago

00:01:21,689 --> 00:01:29,189
from 489 up to 2400 this year so still

00:01:25,799 --> 00:01:31,890
growing by quite a large number and each

00:01:29,189 --> 00:01:36,329
week they get a set of problems they can

00:01:31,890 --> 00:01:38,939
attempt quick like demos is always going

00:01:36,329 --> 00:01:43,759
to be dangerous this is the challenge

00:01:38,939 --> 00:01:46,680
site it's got a nice pretty ajaxy so

00:01:43,759 --> 00:01:47,700
each week this is the beginners platform

00:01:46,680 --> 00:01:50,610
course that we run that's currently

00:01:47,700 --> 00:01:51,899
running this year each week students get

00:01:50,610 --> 00:01:54,149
a set of problems in beginners you get

00:01:51,899 --> 00:01:56,159
ten problems per week this is the hello

00:01:54,149 --> 00:01:57,479
world problem that Katie and Georgina

00:01:56,159 --> 00:01:59,640
mentioned the previous talk you have a

00:01:57,479 --> 00:02:05,240
problem description at the top and yes

00:01:59,640 --> 00:02:09,070
some code so print print hello world

00:02:05,240 --> 00:02:12,740
this will die so we say check answer

00:02:09,070 --> 00:02:16,940
down the bottom the solution failed

00:02:12,740 --> 00:02:19,280
automatic testing this is your code um

00:02:16,940 --> 00:02:23,450
blah blah you're missing punctuation yo

00:02:19,280 --> 00:02:31,460
yo yo fix up the tests and you'll

00:02:23,450 --> 00:02:34,310
eventually pass yeah you possible test

00:02:31,460 --> 00:02:37,610
cases green arrows and this problem damn

00:02:34,310 --> 00:02:40,490
is marked as green and you good to go

00:02:37,610 --> 00:02:42,740
and so each week students get a set of

00:02:40,490 --> 00:02:44,210
problems and each of the problems have a

00:02:42,740 --> 00:02:46,460
set of test cases associated with them

00:02:44,210 --> 00:02:49,190
and pass the problem need to pass all

00:02:46,460 --> 00:02:52,280
the test cases understand a problem

00:02:49,190 --> 00:02:53,840
based learning approach so it's the

00:02:52,280 --> 00:02:57,050
challenge itself in a very brief

00:02:53,840 --> 00:02:58,460
nutshell and so what we actually require

00:02:57,050 --> 00:03:00,200
then we'll do actually require from the

00:02:58,460 --> 00:03:02,810
challenge site be able to support such

00:03:00,200 --> 00:03:05,450
an infrastructure so we need to allow

00:03:02,810 --> 00:03:09,430
students to submit arbitrary code to be

00:03:05,450 --> 00:03:11,690
then run on our servers warning bells

00:03:09,430 --> 00:03:15,800
Danger Danger Will Robinson this is not

00:03:11,690 --> 00:03:17,630
good from the university's point of view

00:03:15,800 --> 00:03:18,890
so the challenge site itself with

00:03:17,630 --> 00:03:20,300
challenging infrastructures use within

00:03:18,890 --> 00:03:22,250
the university to teach a number of

00:03:20,300 --> 00:03:23,930
courses it's not just used for the NGSS

00:03:22,250 --> 00:03:26,360
challenge so the university had some

00:03:23,930 --> 00:03:28,940
additional requirements that we needed

00:03:26,360 --> 00:03:31,100
to put on this infrastructure so not

00:03:28,940 --> 00:03:34,220
only didn't either support Python it

00:03:31,100 --> 00:03:35,690
needs to support any language quote

00:03:34,220 --> 00:03:38,270
unquote which makes the problem

00:03:35,690 --> 00:03:39,890
infinitely more difficult we support a

00:03:38,270 --> 00:03:43,610
lunch large number of concurrent users

00:03:39,890 --> 00:03:46,520
and allow for the standard administer

00:03:43,610 --> 00:03:49,489
for university course would require and

00:03:46,520 --> 00:03:50,660
so you system usage this year within the

00:03:49,489 --> 00:03:54,050
university has been used for three

00:03:50,660 --> 00:03:57,080
courses in semester one Indian financial

00:03:54,050 --> 00:04:00,739
3 we talked - bash - MySQL via challenge

00:03:57,080 --> 00:04:03,380
site which all MJ - no one - 800 700

00:04:00,739 --> 00:04:06,170
students using MATLAB or octave in fact

00:04:03,380 --> 00:04:07,459
the specific clause in the MATLAB terms

00:04:06,170 --> 00:04:10,519
of agreements it says you cannot use

00:04:07,459 --> 00:04:14,690
MATLAB for an online system so we can't

00:04:10,519 --> 00:04:16,190
use MATLAB in fact we 124 Postgres which

00:04:14,690 --> 00:04:17,870
the thrown students earned the challenge

00:04:16,190 --> 00:04:19,549
which is currently running where we have

00:04:17,870 --> 00:04:20,690
four courses we have three versions of

00:04:19,549 --> 00:04:21,169
Python beginners intermediate and

00:04:20,690 --> 00:04:23,270
advanced

00:04:21,169 --> 00:04:28,610
and then Arduino programming which isn't

00:04:23,270 --> 00:04:33,439
even better to see so executing our tree

00:04:28,610 --> 00:04:36,020
code but the testing framework needs to

00:04:33,439 --> 00:04:39,550
allow arbitrary code execution so what

00:04:36,020 --> 00:04:43,370
do we need to restrict I asked servers

00:04:39,550 --> 00:04:47,029
do we bother restricting who would want

00:04:43,370 --> 00:04:48,169
to do anything evil on our servers hack

00:04:47,029 --> 00:04:49,340
we do this we could do some kind of

00:04:48,169 --> 00:04:51,979
virtual machine magic

00:04:49,340 --> 00:04:53,180
maybe virtual machines are kind of a

00:04:51,979 --> 00:04:56,210
large solution though when you're

00:04:53,180 --> 00:04:59,659
running say 40 40 test cases a second a

00:04:56,210 --> 00:05:03,710
peak for it firing out 40 the m's is not

00:04:59,659 --> 00:05:05,120
particularly nice solution sorry I went

00:05:03,710 --> 00:05:06,169
looked through the challenge site this

00:05:05,120 --> 00:05:08,479
morning and grabbed some submissions

00:05:06,169 --> 00:05:09,409
from the last week of what's been

00:05:08,479 --> 00:05:13,219
through what's gone through the

00:05:09,409 --> 00:05:15,620
challenge sites there's three here the

00:05:13,219 --> 00:05:17,300
the file name on the file system that

00:05:15,620 --> 00:05:19,939
your car gets put in is called

00:05:17,300 --> 00:05:22,509
submission dot pi so this first one is

00:05:19,939 --> 00:05:24,830
doing an infinite fork bomb on yourself

00:05:22,509 --> 00:05:25,909
the second one let's try and delete

00:05:24,830 --> 00:05:28,400
delete' stuff

00:05:25,909 --> 00:05:29,930
the third one is trying to span the New

00:05:28,400 --> 00:05:35,449
South Wales Department of Education by

00:05:29,930 --> 00:05:38,229
email the top one there we're trying to

00:05:35,449 --> 00:05:40,879
flat out ram name another fault bomb

00:05:38,229 --> 00:05:44,089
then then we're trying to walk up the

00:05:40,879 --> 00:05:49,430
code stack using the inspect framework

00:05:44,089 --> 00:05:51,250
and freight quote frames in python we

00:05:49,430 --> 00:05:53,300
know this other quite quite neat one

00:05:51,250 --> 00:05:56,770
which has nothing to do with decoding

00:05:53,300 --> 00:05:56,770
utf-8 as the function would suggest

00:05:56,830 --> 00:06:01,039
which is trying to extract extract the

00:05:58,939 --> 00:06:04,039
source code from upper wrappers that we

00:06:01,039 --> 00:06:08,240
have so no one would ever do anything

00:06:04,039 --> 00:06:10,520
evil so obviously we do need to protect

00:06:08,240 --> 00:06:14,029
some stuff so how and what do we need to

00:06:10,520 --> 00:06:15,830
protect so presumably we need to do some

00:06:14,029 --> 00:06:17,479
kind of try annotation but then the

00:06:15,830 --> 00:06:19,399
question comes what do we defines time

00:06:17,479 --> 00:06:23,810
to define it as wall space time users

00:06:19,399 --> 00:06:25,490
based on kennel space time both you need

00:06:23,810 --> 00:06:27,169
to limit somehow the amount of memory

00:06:25,490 --> 00:06:30,490
and again what we mean by memory to mean

00:06:27,169 --> 00:06:30,490
physical virtual shared

00:06:31,040 --> 00:06:35,910
presumably want some kind of process

00:06:33,180 --> 00:06:38,100
limitation and in question fun question

00:06:35,910 --> 00:06:42,600
the audience how many processes does the

00:06:38,100 --> 00:06:44,220
Sun JVM fork upon invocation way too

00:06:42,600 --> 00:06:48,900
many is the answer

00:06:44,220 --> 00:06:50,790
it's like 32 i'm fossa some writing

00:06:48,900 --> 00:06:52,170
presumably some questions you actually

00:06:50,790 --> 00:06:53,760
may want to test people's ability to

00:06:52,170 --> 00:06:55,890
read and write from files so how do you

00:06:53,760 --> 00:06:59,400
how do you our sandbox at in some nice

00:06:55,890 --> 00:07:02,670
manner network access presumably you

00:06:59,400 --> 00:07:05,850
don't want any network access maybe you

00:07:02,670 --> 00:07:07,200
do but firmly you don't and it's a very

00:07:05,850 --> 00:07:08,910
small subset of the things you need to

00:07:07,200 --> 00:07:10,500
consider when restricting people's code

00:07:08,910 --> 00:07:14,330
if that's I would recode running on your

00:07:10,500 --> 00:07:16,980
own servers sorry links to the rescue

00:07:14,330 --> 00:07:19,200
related supports the ability to limits

00:07:16,980 --> 00:07:21,930
all of these aspects out of box Eve you

00:07:19,200 --> 00:07:25,020
know how so what tools do we have in our

00:07:21,930 --> 00:07:28,200
inventory we have the useful are limits

00:07:25,020 --> 00:07:29,880
call which may have heard of which does

00:07:28,200 --> 00:07:31,650
use a spacesuit view limitation you also

00:07:29,880 --> 00:07:33,090
then have data segment limitation in RAM

00:07:31,650 --> 00:07:36,120
and we can put limitation on the number

00:07:33,090 --> 00:07:36,960
of processes we have signals then after

00:07:36,120 --> 00:07:39,060
doing time-based

00:07:36,960 --> 00:07:42,360
killing we have IP tables for network

00:07:39,060 --> 00:07:43,620
and most importantly our chroot and if

00:07:42,360 --> 00:07:44,240
you're the head of chroot is probably a

00:07:43,620 --> 00:07:48,300
good thing

00:07:44,240 --> 00:07:50,970
allows you to do magic so what is chroot

00:07:48,300 --> 00:07:52,230
um if you had done any kind of linux

00:07:50,970 --> 00:07:53,580
while working links before you should be

00:07:52,230 --> 00:07:55,770
used the idea that you should be able to

00:07:53,580 --> 00:07:57,090
do anything you're a sensible person

00:07:55,770 --> 00:07:59,490
you're running Linux you can do whatever

00:07:57,090 --> 00:08:02,000
the hell you want so the question then

00:07:59,490 --> 00:08:04,410
is what makes slash the root filesystem

00:08:02,000 --> 00:08:07,110
slice you some point into some location

00:08:04,410 --> 00:08:09,150
on disk so the question then comes can i

00:08:07,110 --> 00:08:11,310
change where this magical slash points

00:08:09,150 --> 00:08:14,040
to on disk and just arbitrarily bind

00:08:11,310 --> 00:08:15,480
where slash gets pointed to and the

00:08:14,040 --> 00:08:18,720
answer is yes this is what sure

00:08:15,480 --> 00:08:22,230
essentially lets you do so we can create

00:08:18,720 --> 00:08:24,420
inside our overall Linux box we can say

00:08:22,230 --> 00:08:26,690
create a new Linux image inside there

00:08:24,420 --> 00:08:30,980
somewhere on disk like def SDA one such

00:08:26,690 --> 00:08:33,980
fubar and reach the root means about

00:08:30,980 --> 00:08:33,980
sorry

00:08:34,089 --> 00:08:38,390
example LS slush we have a whole bunch

00:08:37,820 --> 00:08:41,360
of stuff

00:08:38,390 --> 00:08:44,120
our slash workers slash jail we have

00:08:41,360 --> 00:08:46,160
another full Linux instance set up in

00:08:44,120 --> 00:08:47,660
this particular directory we can then

00:08:46,160 --> 00:08:51,260
share route into there and any programs

00:08:47,660 --> 00:08:55,070
that are run in there their slash points

00:08:51,260 --> 00:08:58,430
to the outer level of workers jail scope

00:08:55,070 --> 00:09:03,050
American for some reason instead of

00:08:58,430 --> 00:09:04,520
Australian whoops I'm to bootstrap if

00:09:03,050 --> 00:09:06,440
anyone's ever heard of this is a funky

00:09:04,520 --> 00:09:08,089
little UNIX tool which lets you

00:09:06,440 --> 00:09:08,600
bootstrap Devin destroyed by package

00:09:08,089 --> 00:09:10,250
management

00:09:08,600 --> 00:09:11,690
she's specified list of packages you

00:09:10,250 --> 00:09:13,100
won't install in on particular location

00:09:11,690 --> 00:09:17,870
that will stall in there for you it's

00:09:13,100 --> 00:09:19,490
quite neat and because it's packaged its

00:09:17,870 --> 00:09:23,089
package managed we can easily maintain

00:09:19,490 --> 00:09:24,860
this in a distro just run aptitude over

00:09:23,089 --> 00:09:28,580
the people directory and we can keep

00:09:24,860 --> 00:09:32,480
back just up to date nice and easily so

00:09:28,580 --> 00:09:34,250
how does this work so you have such

00:09:32,480 --> 00:09:35,420
workers we got these worker diamonds

00:09:34,250 --> 00:09:36,910
worker diamonds going to listen to

00:09:35,420 --> 00:09:39,140
submissions from a challenge website and

00:09:36,910 --> 00:09:40,190
when the submission comes in the X

00:09:39,140 --> 00:09:41,959
Taemin that's free will grab the

00:09:40,190 --> 00:09:47,000
submission and execute it and send back

00:09:41,959 --> 00:09:49,459
the result so worker slash jail is where

00:09:47,000 --> 00:09:51,589
we had this bootstrap jail that exists

00:09:49,459 --> 00:09:56,870
especially since this Lynch stick distro

00:09:51,589 --> 00:10:00,410
inside the outermost Linux distro we

00:09:56,870 --> 00:10:03,709
then fork and to root into the jail so

00:10:00,410 --> 00:10:08,450
the red slash there is the file system

00:10:03,709 --> 00:10:10,459
that the user's code then sees and then

00:10:08,450 --> 00:10:12,079
we have the resource limit all that goes

00:10:10,459 --> 00:10:13,700
on there so it puts on the time

00:10:12,079 --> 00:10:15,560
restrictions and memory restrictions of

00:10:13,700 --> 00:10:18,670
proces limitations their network

00:10:15,560 --> 00:10:22,010
restrictions all those kinds of things

00:10:18,670 --> 00:10:24,589
we then create each diamond has a unique

00:10:22,010 --> 00:10:26,060
you wouldn't good with no read and write

00:10:24,589 --> 00:10:28,640
permissions to anywhere apart from such

00:10:26,060 --> 00:10:31,220
temps that's random Oh dole around them

00:10:28,640 --> 00:10:32,209
I should say and then the users code is

00:10:31,220 --> 00:10:34,370
then exact

00:10:32,209 --> 00:10:39,829
into such temp such random or that

00:10:34,370 --> 00:10:44,180
particular random directory so this

00:10:39,829 --> 00:10:46,850
setup works well for everything apart

00:10:44,180 --> 00:10:49,100
from file system restrictions

00:10:46,850 --> 00:10:50,689
so forces restrictions ossify we've

00:10:49,100 --> 00:10:52,220
given the user read and full read and

00:10:50,689 --> 00:10:53,449
write permission to their current

00:10:52,220 --> 00:10:56,029
directory there which is slash temp

00:10:53,449 --> 00:10:57,889
slash some random failure so the

00:10:56,029 --> 00:11:00,109
question then comes how do we sign Lee

00:10:57,889 --> 00:11:03,939
prevent people from stages flooding

00:11:00,109 --> 00:11:09,949
outages with random data or trying to

00:11:03,939 --> 00:11:10,939
triple a high load on our disks a limit

00:11:09,949 --> 00:11:14,449
doesn't provide a good way to do this

00:11:10,939 --> 00:11:16,489
and a lot of the questions that we do we

00:11:14,449 --> 00:11:17,809
often want to catch people's iron

00:11:16,489 --> 00:11:20,209
mistakes and give them back some kind of

00:11:17,809 --> 00:11:22,399
meaningful feedback for example if

00:11:20,209 --> 00:11:23,869
they're they've actually do a raid call

00:11:22,399 --> 00:11:26,059
and the problem is all about reading

00:11:23,869 --> 00:11:27,529
from files it'd be much more meaningful

00:11:26,059 --> 00:11:29,389
error message to give back and say you

00:11:27,529 --> 00:11:32,749
never actually read from the disk then

00:11:29,389 --> 00:11:35,359
to say your program failed yes so the

00:11:32,749 --> 00:11:37,609
question was how do we sign Lee to put

00:11:35,359 --> 00:11:39,289
on file system restrictions and give

00:11:37,609 --> 00:11:43,879
meaningful feedback to the users at the

00:11:39,289 --> 00:11:44,629
same time and this is where fuze comes

00:11:43,879 --> 00:11:46,189
to the rescue

00:11:44,629 --> 00:11:48,049
so you've never heard of fuse before

00:11:46,189 --> 00:11:50,499
fuse as a tool that lets you write your

00:11:48,049 --> 00:11:53,209
own file systems give you so desire

00:11:50,499 --> 00:11:54,709
sensor file system user space and so

00:11:53,209 --> 00:11:58,699
what we did I wrote my own file system

00:11:54,709 --> 00:12:01,039
and the users code then this temps less

00:11:58,699 --> 00:12:03,470
random value is actually my own file

00:12:01,039 --> 00:12:05,839
system so I get every i/o call that the

00:12:03,470 --> 00:12:06,649
user makes and from that I can determine

00:12:05,839 --> 00:12:08,539
whether or not the user is doing

00:12:06,649 --> 00:12:11,329
something stupid and we can go from

00:12:08,539 --> 00:12:12,589
there so this picture that was from

00:12:11,329 --> 00:12:16,909
before now gets slightly more

00:12:12,589 --> 00:12:19,369
complicated for every test case it's run

00:12:16,909 --> 00:12:19,970
this Challenger first is special file

00:12:19,369 --> 00:12:22,579
system

00:12:19,970 --> 00:12:25,249
it's invoked in such terms such random

00:12:22,579 --> 00:12:26,779
and the users probably gets invoked in

00:12:25,249 --> 00:12:31,699
there and then way you get to monitor

00:12:26,779 --> 00:12:33,829
every single IO call the user makes then

00:12:31,699 --> 00:12:36,889
we have multiple workers per physical

00:12:33,829 --> 00:12:39,079
machine then we have multiple physical

00:12:36,889 --> 00:12:44,389
machines his purchase then holes are all

00:12:39,079 --> 00:12:46,429
scales out and that's in a nutshell how

00:12:44,389 --> 00:12:48,159
we restrict code I'm sure there'll be

00:12:46,429 --> 00:12:50,869
some questions about that afterwards

00:12:48,159 --> 00:12:52,459
next next point so the application stack

00:12:50,869 --> 00:12:56,409
then so this challenge site is pretty

00:12:52,459 --> 00:12:56,409
ajaxy thing oopsie

00:12:57,950 --> 00:13:03,930
at peak time hashes support about a user

00:13:01,350 --> 00:13:06,270
load of about 2,000 or 3,000 people

00:13:03,930 --> 00:13:07,860
currently so how do we do this so we

00:13:06,270 --> 00:13:10,980
have a number of Python technologies in

00:13:07,860 --> 00:13:12,360
our application stack we run django we

00:13:10,980 --> 00:13:15,120
have South on top of that for doing

00:13:12,360 --> 00:13:17,850
migrations we do fabric for deploying to

00:13:15,120 --> 00:13:19,860
servers virtual end for easy package

00:13:17,850 --> 00:13:24,210
management and we use pigments with

00:13:19,860 --> 00:13:28,050
syntax highlighting the overall system

00:13:24,210 --> 00:13:30,600
then that's nice like we have lots of

00:13:28,050 --> 00:13:34,110
Ajax and JavaScript and one thing that's

00:13:30,600 --> 00:13:35,430
kind of neat I guess about the site is

00:13:34,110 --> 00:13:37,940
that the entire site is built

00:13:35,430 --> 00:13:40,080
client-side so no HTML has ever

00:13:37,940 --> 00:13:42,390
generated on the server side the entire

00:13:40,080 --> 00:13:44,760
slice built in JavaScript and that's to

00:13:42,390 --> 00:13:47,580
move all the workloads from the server

00:13:44,760 --> 00:13:49,440
to the client side on the only real

00:13:47,580 --> 00:13:50,910
downside about doing this is that it

00:13:49,440 --> 00:13:53,900
makes it a lot more annoying to debug

00:13:50,910 --> 00:13:56,730
because you have browsers like IE

00:13:53,900 --> 00:14:00,350
which don't give you any kind of decent

00:13:56,730 --> 00:14:02,700
JavaScript feedback for debugging and

00:14:00,350 --> 00:14:05,670
the other thing that we found when doing

00:14:02,700 --> 00:14:07,320
a lot of quite heavy AJC staff with

00:14:05,670 --> 00:14:09,360
quite large data segments was that

00:14:07,320 --> 00:14:12,720
browsers are not particularly good at

00:14:09,360 --> 00:14:14,640
handling large chunks of JSON if you

00:14:12,720 --> 00:14:17,820
send back a to make JSON object your

00:14:14,640 --> 00:14:19,440
browser will die very badly it will sit

00:14:17,820 --> 00:14:26,880
there churning for about 12 seconds run

00:14:19,440 --> 00:14:28,050
a pauses thing now we have fresh grass

00:14:26,880 --> 00:14:30,660
running the background process

00:14:28,050 --> 00:14:35,220
replication and we use I whiskey over

00:14:30,660 --> 00:14:38,660
Django and M cache so we don't have an

00:14:35,220 --> 00:14:38,660
application cycle of summer like this

00:14:39,350 --> 00:14:46,620
yeah then no so then we have a complete

00:14:44,070 --> 00:14:48,030
segregation of the web front change the

00:14:46,620 --> 00:14:49,470
actual workers so we have this set of

00:14:48,030 --> 00:14:51,090
web servers that will serve the web

00:14:49,470 --> 00:14:52,950
requests and the set of servers that

00:14:51,090 --> 00:14:55,140
will ask you to the execution of the

00:14:52,950 --> 00:14:56,910
code that people submit and so we need

00:14:55,140 --> 00:15:01,110
some way to get the messages or get the

00:14:56,910 --> 00:15:04,710
code from the UI that uses submits in

00:15:01,110 --> 00:15:08,740
Django to the workers in the background

00:15:04,710 --> 00:15:12,430
and to do that we use a mqp which sounds

00:15:08,740 --> 00:15:14,260
advanced Message Queuing protocol

00:15:12,430 --> 00:15:17,230
something like that

00:15:14,260 --> 00:15:18,850
it's a standard protocol and the AMQP

00:15:17,230 --> 00:15:20,680
server we use is called rabbit in queue

00:15:18,850 --> 00:15:24,640
which is a messaging queue that's

00:15:20,680 --> 00:15:27,370
written in Erlang and it works very well

00:15:24,640 --> 00:15:30,240
you don't do any kind of generic message

00:15:27,370 --> 00:15:36,670
passing of datas off key value pairs on

00:15:30,240 --> 00:15:39,040
NP P works quite well and so then we

00:15:36,670 --> 00:15:43,030
have picture extends bit like this so

00:15:39,040 --> 00:15:45,010
now we have that the users code goes

00:15:43,030 --> 00:15:47,350
from Django to the MQ peace cloud the

00:15:45,010 --> 00:15:48,640
workers and pick it up they process that

00:15:47,350 --> 00:15:50,860
particular submission so I'm back the

00:15:48,640 --> 00:15:51,970
results then the results daemon talks

00:15:50,860 --> 00:15:54,780
the database and so we have a nice

00:15:51,970 --> 00:15:56,740
complete segregation between actual

00:15:54,780 --> 00:15:58,150
place where the user's code gets

00:15:56,740 --> 00:16:04,290
executed and any kind of meaningful

00:15:58,150 --> 00:16:06,520
information such as the database yep

00:16:04,290 --> 00:16:08,140
then briefly the third segment of this

00:16:06,520 --> 00:16:09,820
talk is talking about technical issues

00:16:08,140 --> 00:16:13,480
with high schools that we have to deal

00:16:09,820 --> 00:16:15,450
with within the challenge so typically

00:16:13,480 --> 00:16:18,670
high schools are quite restrictive on

00:16:15,450 --> 00:16:20,140
what they can install on their machines

00:16:18,670 --> 00:16:21,760
and what machines they have even and

00:16:20,140 --> 00:16:25,510
that's brighter political and technical

00:16:21,760 --> 00:16:27,820
reasons as it was mentioned the previous

00:16:25,510 --> 00:16:29,830
talk high school teachers ISIL computing

00:16:27,820 --> 00:16:32,440
teachers I should say are often not

00:16:29,830 --> 00:16:34,540
programmers and so then trying to

00:16:32,440 --> 00:16:36,040
interact with teachers well while we're

00:16:34,540 --> 00:16:37,960
trying to teach them and their kids the

00:16:36,040 --> 00:16:39,550
program it's not necessarily easy

00:16:37,960 --> 00:16:41,230
because you also sometimes trying to

00:16:39,550 --> 00:16:43,980
teach the teachers who are then trying

00:16:41,230 --> 00:16:46,810
to teach to the students

00:16:43,980 --> 00:16:48,160
the biggest issue we've had recently as

00:16:46,810 --> 00:16:50,050
the game was mentioned the previous talk

00:16:48,160 --> 00:16:53,170
was the New South Wales Department of

00:16:50,050 --> 00:16:54,820
Education laptops which are very very

00:16:53,170 --> 00:16:56,470
restrictive and what they can do so they

00:16:54,820 --> 00:16:58,360
cut down there or restricted version of

00:16:56,470 --> 00:17:02,080
Windows where you cannot run any XE

00:16:58,360 --> 00:17:04,750
that's not in C windows there's no say

00:17:02,080 --> 00:17:06,610
they drive and that this includes

00:17:04,750 --> 00:17:08,140
removable media you can't put on pumping

00:17:06,610 --> 00:17:10,510
in a USB key and when a next year that's

00:17:08,140 --> 00:17:13,540
on that and so things like portable

00:17:10,510 --> 00:17:15,370
Python won't work I think something

00:17:13,540 --> 00:17:20,830
stalled anything that is installed

00:17:15,370 --> 00:17:22,040
really is Photoshop word ie8 and

00:17:20,830 --> 00:17:23,720
Silverlight

00:17:22,040 --> 00:17:24,920
this is a pretty small subset of things

00:17:23,720 --> 00:17:28,640
to try and work with to try and get

00:17:24,920 --> 00:17:30,530
paper Ashley use Python so we had then

00:17:28,640 --> 00:17:34,640
two attempts to try and actually get

00:17:30,530 --> 00:17:37,370
Python onto these laptops the first

00:17:34,640 --> 00:17:38,900
attempt was this try Pythian being so if

00:17:37,370 --> 00:17:42,770
you have a laptop and can try and go to

00:17:38,900 --> 00:17:44,840
it i'm triply thin is myself and James

00:17:42,770 --> 00:17:48,740
Curran modified the existing version

00:17:44,840 --> 00:17:51,290
which is on try python.org to work

00:17:48,740 --> 00:18:02,090
better for the actual challenge so I

00:17:51,290 --> 00:18:09,400
wish I can do it now maybe yes um try

00:18:02,090 --> 00:18:09,400
python is written in Silverlight maybe

00:18:10,330 --> 00:18:15,160
No

00:18:11,630 --> 00:18:19,340
let's ignore that written Silverlight

00:18:15,160 --> 00:18:21,620
runs on I apply thin and because it is

00:18:19,340 --> 00:18:23,480
because the DT laptops I already have so

00:18:21,620 --> 00:18:25,160
white installed this will work and we

00:18:23,480 --> 00:18:26,240
found is that he reasonably popular even

00:18:25,160 --> 00:18:28,400
for people who have Python installed

00:18:26,240 --> 00:18:30,020
already quicker quicker nice and easy

00:18:28,400 --> 00:18:31,700
use pop now the browser tab you have a

00:18:30,020 --> 00:18:34,040
fully working Python interpreter and a

00:18:31,700 --> 00:18:36,050
text editor in another tab and it needs

00:18:34,040 --> 00:18:37,220
to sometimes open other app you should

00:18:36,050 --> 00:18:40,700
have a look at that at some point if

00:18:37,220 --> 00:18:42,560
you're interested in that the second

00:18:40,700 --> 00:18:45,590
attempt that we had was what's called

00:18:42,560 --> 00:18:48,590
what we called Gumby this is a very cool

00:18:45,590 --> 00:18:50,180
project that a person from Mozilla

00:18:48,590 --> 00:18:51,710
brought out I forget his name but the

00:18:50,180 --> 00:18:54,400
project itself is called M scriptum

00:18:51,710 --> 00:18:55,970
they've actually heard of this awesome

00:18:54,400 --> 00:19:01,040
compartment of people have actually

00:18:55,970 --> 00:19:04,210
shown in scriptum is a funky little tool

00:19:01,040 --> 00:19:07,910
that will let you take any C program and

00:19:04,210 --> 00:19:10,100
compile it to LLVM sorry let me rephrase

00:19:07,910 --> 00:19:13,400
that it takes LOV m byte code and

00:19:10,100 --> 00:19:14,840
compile it to JavaScript the contents of

00:19:13,400 --> 00:19:16,760
this is any program you can convert to

00:19:14,840 --> 00:19:19,550
LOM bytecode you can then convert to

00:19:16,760 --> 00:19:21,590
JavaScript so what we did and Taylor and

00:19:19,550 --> 00:19:24,380
myself did for Gumby app was we took the

00:19:21,590 --> 00:19:26,480
cpython interpreter compiler to lov my

00:19:24,380 --> 00:19:28,370
code and compile dart to JavaScript and

00:19:26,480 --> 00:19:30,590
so the consequence of this is you have a

00:19:28,370 --> 00:19:32,960
fully working C Python interpreter in

00:19:30,590 --> 00:19:35,530
the browser I'll see how this one will

00:19:32,960 --> 00:19:35,530
work any bill

00:19:35,960 --> 00:19:40,169
apart from not being centered that

00:19:38,070 --> 00:19:45,110
actually works haha sweet

00:19:40,169 --> 00:19:47,669
this is Gambia it works horribly in IE

00:19:45,110 --> 00:19:52,230
because it's because it's a 2.8 mega

00:19:47,669 --> 00:19:53,929
javascript file and surprisingly I work

00:19:52,230 --> 00:19:57,090
so writing program in Firefox and Safari

00:19:53,929 --> 00:19:58,769
so for example we can run this and down

00:19:57,090 --> 00:20:00,240
it up down the bottom you can see here

00:19:58,769 --> 00:20:03,419
as the output and this is actually

00:20:00,240 --> 00:20:05,009
running in your browser on the C Python

00:20:03,419 --> 00:20:05,850
interpreter this is not firing off some

00:20:05,009 --> 00:20:09,210
web requests

00:20:05,850 --> 00:20:10,950
nor is it actually doing some hackery or

00:20:09,210 --> 00:20:12,269
some really small subset of life and

00:20:10,950 --> 00:20:13,710
reemployment in JavaScript this is the

00:20:12,269 --> 00:20:15,929
actual C Python interpreter with a

00:20:13,710 --> 00:20:19,289
couple of rappers in there which is

00:20:15,929 --> 00:20:21,720
quite funky I thought anyway haven't

00:20:19,289 --> 00:20:24,120
play with it it's for cable and github I

00:20:21,720 --> 00:20:28,350
haven't had time to work on it in quite

00:20:24,120 --> 00:20:29,700
a while so feel free to have a go yes

00:20:28,350 --> 00:20:34,799
and it uses in scriptum and the closure

00:20:29,700 --> 00:20:38,360
compiler from google and yes that's me

00:20:34,799 --> 00:20:38,360

YouTube URL: https://www.youtube.com/watch?v=y-WPPdhTKBU


