Title: How Python Evolves (and How You Can Help Make It Happen) - Mr. Nick Coghlan
Publication date: 2011-08-22
Playlist: PyCon Australia 2011
Description: 
	The CPython reference interpreter lies at the heart of a much wider Python ecosystem. The decisions that shape the future development of CPython ripple out and have a broad impact on the entire Python community.

This talk covers the special place CPython occupies in the broader Python community, how the decisions that affect CPython's development are made, and how new developers can become involved in that process..
Captions: 
	00:00:03,020 --> 00:00:07,259
okay so for those of you that were here

00:00:05,400 --> 00:00:09,349
for the last talked since I went through

00:00:07,259 --> 00:00:11,849
a bit about the current state of Python

00:00:09,349 --> 00:00:15,240
what I want to talk about is a bit about

00:00:11,849 --> 00:00:18,359
how it got that way and how it will

00:00:15,240 --> 00:00:20,820
continue to evolve into the future as a

00:00:18,359 --> 00:00:23,070
Rowan side court Python dev and person

00:00:20,820 --> 00:00:26,279
suffering foundation member will get a

00:00:23,070 --> 00:00:28,050
bit more into what those mean later so a

00:00:26,279 --> 00:00:31,230
person to do make language more ways

00:00:28,050 --> 00:00:33,920
than one dynamically typed easy to write

00:00:31,230 --> 00:00:36,719
but it also changes a lot over time

00:00:33,920 --> 00:00:38,280
apart from most of us right today is not

00:00:36,719 --> 00:00:42,530
the same as what we're writing even five

00:00:38,280 --> 00:00:46,469
years ago and so the tools we use change

00:00:42,530 --> 00:00:48,120
simple one if you go back a bit that was

00:00:46,469 --> 00:00:49,559
the only way you could run a script if

00:00:48,120 --> 00:00:51,510
you wanted to time a snippet of Python

00:00:49,559 --> 00:00:54,300
you had to find it in the standard

00:00:51,510 --> 00:00:56,430
library invoke it and then give it the

00:00:54,300 --> 00:00:58,109
command you wanted to run these days

00:00:56,430 --> 00:01:00,300
almost everyone will just use module

00:00:58,109 --> 00:01:04,070
invocation and say run this module is a

00:01:00,300 --> 00:01:06,689
script and give it the commands you want

00:01:04,070 --> 00:01:08,490
the libraries change the standard

00:01:06,689 --> 00:01:12,060
library gets bigger over time there's a

00:01:08,490 --> 00:01:14,070
time when all of those well those first

00:01:12,060 --> 00:01:17,400
three all started life as external

00:01:14,070 --> 00:01:18,630
modules decimal was written specifically

00:01:17,400 --> 00:01:21,540
for inclusion in the standard library

00:01:18,630 --> 00:01:24,780
according to the decimal standard and

00:01:21,540 --> 00:01:27,030
then these two down the bottom just

00:01:24,780 --> 00:01:28,950
collections and punks tools just more

00:01:27,030 --> 00:01:30,720
built in utilities over time that people

00:01:28,950 --> 00:01:33,450
can use without having to grab

00:01:30,720 --> 00:01:36,930
third-party modules and then syntax

00:01:33,450 --> 00:01:38,790
itself changes once upon a time on the

00:01:36,930 --> 00:01:40,740
left there was the only way was the

00:01:38,790 --> 00:01:42,770
correct way to open and use a file and

00:01:40,740 --> 00:01:45,270
make sure I've got released promptly

00:01:42,770 --> 00:01:48,149
these days you can use a context manager

00:01:45,270 --> 00:01:49,530
to do the same thing and with statement

00:01:48,149 --> 00:01:54,720
takes care of cleaning things up at the

00:01:49,530 --> 00:01:57,719
end for decorators so used to be you

00:01:54,720 --> 00:01:59,759
define a define a function and then

00:01:57,719 --> 00:02:01,890
afterwards you'd post decorate it to say

00:01:59,759 --> 00:02:04,500
oh well this was actually a class method

00:02:01,890 --> 00:02:07,680
or this was actually a property or this

00:02:04,500 --> 00:02:09,509
was whatever these days you can put

00:02:07,680 --> 00:02:11,310
decorator up front people can see in the

00:02:09,509 --> 00:02:13,230
function header that pay what we end up

00:02:11,310 --> 00:02:16,650
with is actually a class method not

00:02:13,230 --> 00:02:18,750
Murray method that kind of thing and

00:02:16,650 --> 00:02:20,700
then one of the biggest changes go from

00:02:18,750 --> 00:02:23,640
Python 22 paths and three the idea that

00:02:20,700 --> 00:02:25,470
all strings a Unicode and so you can

00:02:23,640 --> 00:02:27,360
actually get access to that in person

00:02:25,470 --> 00:02:31,680
too by doing a from future import

00:02:27,360 --> 00:02:33,750
Unicode literals so that's how do those

00:02:31,680 --> 00:02:37,560
kind of things changes happen why do

00:02:33,750 --> 00:02:40,530
they happen in the first place and so to

00:02:37,560 --> 00:02:43,530
look at bit of the way I'm going to take

00:02:40,530 --> 00:02:48,390
a step back a bit and look at what do we

00:02:43,530 --> 00:02:53,340
mean by Python and license actually a

00:02:48,390 --> 00:02:54,870
really big ecosystem so as call

00:02:53,340 --> 00:02:57,480
developers we're kind of at the middle

00:02:54,870 --> 00:03:00,900
of it but it's a heck of a lot bigger

00:02:57,480 --> 00:03:03,660
than us and so the Atomos community and

00:03:00,900 --> 00:03:07,500
the ones who a lot of them are only just

00:03:03,660 --> 00:03:10,590
now making the transition from 2.4 so

00:03:07,500 --> 00:03:12,780
centos 5.5 had five and 2.4 in it

00:03:10,590 --> 00:03:19,410
they've only just released sent OS 6

00:03:12,780 --> 00:03:20,849
which i think is python 2.6 and so a lot

00:03:19,410 --> 00:03:23,010
of people use pythons one-off

00:03:20,849 --> 00:03:25,019
development at the administrators

00:03:23,010 --> 00:03:27,030
lawyers connivance animators scientists

00:03:25,019 --> 00:03:29,430
engineers one of the things I've learned

00:03:27,030 --> 00:03:32,790
from going to Pike on here and park on

00:03:29,430 --> 00:03:36,209
in the US is just the sheer variety of

00:03:32,790 --> 00:03:38,599
people that are using Python to automate

00:03:36,209 --> 00:03:42,389
tasks that they need to do their jobs

00:03:38,599 --> 00:03:45,450
and that is a massive aspect of the

00:03:42,389 --> 00:03:47,669
community one of the things we can get

00:03:45,450 --> 00:03:51,750
sometimes lose sight of as professional

00:03:47,669 --> 00:03:53,790
person lives is that not everybody is

00:03:51,750 --> 00:03:56,129
building a production app for delivery

00:03:53,790 --> 00:03:58,260
to other people that we need to keep in

00:03:56,129 --> 00:03:59,879
mind that there are a lot of people just

00:03:58,260 --> 00:04:01,739
doing their own scripting for their own

00:03:59,879 --> 00:04:03,090
purposes they're not trying to

00:04:01,739 --> 00:04:07,349
distribute things they just want to get

00:04:03,090 --> 00:04:08,459
their job done that said there's still a

00:04:07,349 --> 00:04:10,169
lot of people who are actual product

00:04:08,459 --> 00:04:12,449
with others that they're building stuff

00:04:10,169 --> 00:04:14,639
that they want to create products they

00:04:12,449 --> 00:04:20,810
happen to use Python but the end user

00:04:14,639 --> 00:04:23,210
doesn't care Google Apple bit ly so

00:04:20,810 --> 00:04:26,219
multitude of web companies like bit ly

00:04:23,210 --> 00:04:27,090
all the Linux distros game developers

00:04:26,219 --> 00:04:29,940
like CC

00:04:27,090 --> 00:04:33,260
p the fact that their product is written

00:04:29,940 --> 00:04:35,970
in person their end users don't care and

00:04:33,260 --> 00:04:38,040
so for them it's a matter of just being

00:04:35,970 --> 00:04:43,410
able to build quality applications for

00:04:38,040 --> 00:04:44,940
whatever platform they're writing for at

00:04:43,410 --> 00:04:47,250
but then you get the tool developers and

00:04:44,940 --> 00:04:50,490
their people writing tools targeting

00:04:47,250 --> 00:04:51,750
software depths so for them again you

00:04:50,490 --> 00:04:53,669
don't particularly care what tool

00:04:51,750 --> 00:04:55,470
they're written in what language they're

00:04:53,669 --> 00:04:57,180
written in you just want to be able to

00:04:55,470 --> 00:05:01,229
build a good product that people want to

00:04:57,180 --> 00:05:03,330
use so mercurials the world build but a

00:05:01,229 --> 00:05:06,120
lot of those the tools that are used in

00:05:03,330 --> 00:05:07,710
core Python development so they're the

00:05:06,120 --> 00:05:11,610
ones that came to mind but I'm sure

00:05:07,710 --> 00:05:14,190
there are plenty of others and so and

00:05:11,610 --> 00:05:16,080
those so that's kind of the outermost

00:05:14,190 --> 00:05:18,240
layer of the Python ecosystem of people

00:05:16,080 --> 00:05:24,389
that are using it to do stuff that's not

00:05:18,240 --> 00:05:26,460
necessarily by and related and then we

00:05:24,389 --> 00:05:28,860
go to people who put a lot of time and

00:05:26,460 --> 00:05:30,090
effort into enhancing Python for the

00:05:28,860 --> 00:05:32,910
benefit of the people in that outer

00:05:30,090 --> 00:05:34,470
circle and often people cross the

00:05:32,910 --> 00:05:37,400
boundary in their writing these tools

00:05:34,470 --> 00:05:40,740
for their own benefits in their day jobs

00:05:37,400 --> 00:05:43,410
one that comes up a lot in particularly

00:05:40,740 --> 00:05:46,880
in the scientific environment is people

00:05:43,410 --> 00:05:50,099
who are taking and bundling Python

00:05:46,880 --> 00:05:53,099
combining the corpus and environment

00:05:50,099 --> 00:05:57,780
with IDs with additional libraries like

00:05:53,099 --> 00:05:59,940
so like numpy and so you get tools like

00:05:57,780 --> 00:06:02,160
sci-fi and sage that are basically

00:05:59,940 --> 00:06:04,470
designed so instead of people I can go

00:06:02,160 --> 00:06:05,820
find all these tools on their own they

00:06:04,470 --> 00:06:11,789
can get given them in a prepackaged

00:06:05,820 --> 00:06:12,930
bundle and then of course there's all

00:06:11,789 --> 00:06:15,419
the frameworks and libraries that we

00:06:12,930 --> 00:06:17,130
know and use every day while some of

00:06:15,419 --> 00:06:21,270
some of us get fired just on using the

00:06:17,130 --> 00:06:24,720
standard library on its own vast

00:06:21,270 --> 00:06:26,760
majority of us will grab Python plus

00:06:24,720 --> 00:06:30,330
other things and then use that

00:06:26,760 --> 00:06:33,050
combination to do our jobs and it lets

00:06:30,330 --> 00:06:37,380
us avoid reinventing the wheel long time

00:06:33,050 --> 00:06:38,760
and in support of that there's an awful

00:06:37,380 --> 00:06:40,440
lot of parts and specific tools out

00:06:38,760 --> 00:06:42,210
there so

00:06:40,440 --> 00:06:44,880
enhanced interactive interpreters tools

00:06:42,210 --> 00:06:49,470
like cyclin to help you accelerate

00:06:44,880 --> 00:06:51,660
specific components testing tools the

00:06:49,470 --> 00:06:54,840
parts and packaging index all the

00:06:51,660 --> 00:06:57,960
commercial ates basically designed and

00:06:54,840 --> 00:07:02,970
targeting Python developers and making

00:06:57,960 --> 00:07:06,170
fat and developers lives easier and then

00:07:02,970 --> 00:07:09,360
again similarly supporting Python devs

00:07:06,170 --> 00:07:13,050
peeps of documentation and support out

00:07:09,360 --> 00:07:15,210
there things like Python cookbook many

00:07:13,050 --> 00:07:18,330
printed books online guides training

00:07:15,210 --> 00:07:21,000
courses basically all of the resources

00:07:18,330 --> 00:07:26,760
that people can go to to get help with

00:07:21,000 --> 00:07:28,530
doing there python development and then

00:07:26,760 --> 00:07:31,770
the advocacy Ning site groups those that

00:07:28,530 --> 00:07:34,920
are out there promoting Python things

00:07:31,770 --> 00:07:36,240
like Paco know you and basically

00:07:34,920 --> 00:07:39,300
creating connections between faith and

00:07:36,240 --> 00:07:41,490
developers to make it easier for people

00:07:39,300 --> 00:07:44,370
learn make it easier for people to find

00:07:41,490 --> 00:07:47,130
out what they're doing and so all of

00:07:44,370 --> 00:07:51,540
this is all stuff that its presence

00:07:47,130 --> 00:07:53,640
affects the way the language evolved and

00:07:51,540 --> 00:07:56,520
then finally we get into this innermost

00:07:53,640 --> 00:07:59,540
section which is specifically about

00:07:56,520 --> 00:08:02,520
creating the core Python language and

00:07:59,540 --> 00:08:07,620
the implementations that people actually

00:08:02,520 --> 00:08:09,210
run their code on now since if people

00:08:07,620 --> 00:08:10,470
have the previous talk since central

00:08:09,210 --> 00:08:12,300
spent quite a lot of time talking about

00:08:10,470 --> 00:08:15,480
the alternative implementations that are

00:08:12,300 --> 00:08:17,490
out there these these are actually

00:08:15,480 --> 00:08:20,190
interesting it's actually an evolution

00:08:17,490 --> 00:08:21,810
in the last few years that these

00:08:20,190 --> 00:08:23,730
alternate implementations have become

00:08:21,810 --> 00:08:27,810
far more central to the way the language

00:08:23,730 --> 00:08:30,750
of all's used to be that C Python just

00:08:27,810 --> 00:08:33,390
set the direction and these would come

00:08:30,750 --> 00:08:34,979
along and catch up maybe whereas these

00:08:33,390 --> 00:08:39,140
days far more likely that will actually

00:08:34,979 --> 00:08:41,849
go talk to these guys or these teams as

00:08:39,140 --> 00:08:43,620
changes are being made and say hey can

00:08:41,849 --> 00:08:46,830
you implement this will it be difficult

00:08:43,620 --> 00:08:48,450
for you guys and if any one of these

00:08:46,830 --> 00:08:50,400
implementations came back and said no

00:08:48,450 --> 00:08:53,450
that's a major problem for us we can't

00:08:50,400 --> 00:08:56,130
do it chances are a turd killer feature

00:08:53,450 --> 00:08:57,900
that said they're generally working with

00:08:56,130 --> 00:09:01,010
better technology than we are so it's

00:08:57,900 --> 00:09:03,540
pretty rare that they're the bottlenecks

00:09:01,010 --> 00:09:05,460
but yeah so basically the beauty of

00:09:03,540 --> 00:09:07,140
those alternate implementations is there

00:09:05,460 --> 00:09:11,010
some places that C Python just won't go

00:09:07,140 --> 00:09:12,390
it's not built for it and so there's

00:09:11,010 --> 00:09:14,480
been a few attempts at putting a jit

00:09:12,390 --> 00:09:16,620
compiler directly in C pathan they've

00:09:14,480 --> 00:09:19,020
originally with psycho more recently

00:09:16,620 --> 00:09:23,910
with unladen swallow both eventually ran

00:09:19,020 --> 00:09:25,620
out of steam but the piper guys the one

00:09:23,910 --> 00:09:27,390
of the original office of psycho said

00:09:25,620 --> 00:09:30,330
this isn't going to work took a step

00:09:27,390 --> 00:09:32,460
back did some foundational research and

00:09:30,330 --> 00:09:35,339
as a result we've got pie pie today

00:09:32,460 --> 00:09:40,770
which gives us a much better platform

00:09:35,339 --> 00:09:42,660
for optimized agent Python Software

00:09:40,770 --> 00:09:45,270
Foundation has a role to play it's

00:09:42,660 --> 00:09:48,540
mostly a infrastructure support thing

00:09:45,270 --> 00:09:50,670
that it basically provides the

00:09:48,540 --> 00:09:52,140
foundation to let everything else happen

00:09:50,670 --> 00:09:54,990
it's the intellectual property

00:09:52,140 --> 00:09:59,850
background the financial background runs

00:09:54,990 --> 00:10:02,339
python.org that kind of thing but what

00:09:59,850 --> 00:10:04,610
you're all here to hear about the sea

00:10:02,339 --> 00:10:08,010
python reference interpreter and

00:10:04,610 --> 00:10:11,910
basically what it does is it provides

00:10:08,010 --> 00:10:14,790
the pivot point for that entire

00:10:11,910 --> 00:10:18,839
ecosystem to move forward the idea is

00:10:14,790 --> 00:10:20,400
that the alternate implementations are

00:10:18,839 --> 00:10:22,350
basically clearly just implementing

00:10:20,400 --> 00:10:30,120
whatever features have already been

00:10:22,350 --> 00:10:33,450
added here and yet they basically the

00:10:30,120 --> 00:10:35,220
thing is that changes that going to

00:10:33,450 --> 00:10:37,410
happen to Python and eventually ripple

00:10:35,220 --> 00:10:46,380
out through this whole ecosystem start

00:10:37,410 --> 00:10:50,220
here and really the basic basic process

00:10:46,380 --> 00:10:53,180
by which things change is the obvious

00:10:50,220 --> 00:10:55,950
one someone makes the suggestion a

00:10:53,180 --> 00:10:57,660
suggestion gets discussed that firs

00:10:55,950 --> 00:10:58,860
people get persuaded is whether it's a

00:10:57,660 --> 00:11:00,150
good idea or not people try at

00:10:58,860 --> 00:11:02,670
implementing it see if it's actually

00:11:00,150 --> 00:11:05,250
going to work if it survives that

00:11:02,670 --> 00:11:06,600
gauntlet someone commits it and then

00:11:05,250 --> 00:11:07,130
eventually it gets bundled into a

00:11:06,600 --> 00:11:10,110
release

00:11:07,130 --> 00:11:11,550
published on python.org and starts

00:11:10,110 --> 00:11:15,269
making its way up to the rest of the

00:11:11,550 --> 00:11:18,300
community and so we're suggestions come

00:11:15,269 --> 00:11:20,610
from obviously we come up with our own

00:11:18,300 --> 00:11:23,660
ideas a lot of peps are written by core

00:11:20,610 --> 00:11:26,250
developers but certainly not all of them

00:11:23,660 --> 00:11:29,640
and of course we have the ability to

00:11:26,250 --> 00:11:30,870
just commit stuff directly lots of

00:11:29,640 --> 00:11:33,779
feature requests come in on the bug

00:11:30,870 --> 00:11:36,810
tracker the Python ideas mailing list

00:11:33,779 --> 00:11:38,850
cooks a lot of suggestions and then also

00:11:36,810 --> 00:11:41,519
we just look at what third-party

00:11:38,850 --> 00:11:42,930
libraries are out there and occasionally

00:11:41,519 --> 00:11:45,089
that sometimes they'll reach the point

00:11:42,930 --> 00:11:47,550
of maturity that we'll go look these are

00:11:45,089 --> 00:11:50,579
really the best way to do things let's

00:11:47,550 --> 00:11:52,740
either integrates and features or else

00:11:50,579 --> 00:12:04,260
we'll import libraries wholesale was

00:11:52,740 --> 00:12:06,450
shown at the beginning and so that yeah

00:12:04,260 --> 00:12:15,110
so sujit suggestions can come from all

00:12:06,450 --> 00:12:18,060
sorts of sources and and that's kind of

00:12:15,110 --> 00:12:27,810
things so once the suggestions have been

00:12:18,060 --> 00:12:30,089
made then the question of whether or not

00:12:27,810 --> 00:12:32,190
it's a good idea whether or not should

00:12:30,089 --> 00:12:36,450
be incorporated cooperated exactly what

00:12:32,190 --> 00:12:40,500
kind of form it should take then becomes

00:12:36,450 --> 00:12:43,770
the focus and so that can actually be

00:12:40,500 --> 00:12:46,829
quite contentious because there's quite

00:12:43,770 --> 00:12:49,050
a few competing factors to be balanced

00:12:46,829 --> 00:12:50,310
out in changing the language and that's

00:12:49,050 --> 00:12:53,750
kind of why I went through that whole

00:12:50,310 --> 00:12:56,760
ecosystem to start off with because

00:12:53,750 --> 00:12:59,610
anytime we change something it has a

00:12:56,760 --> 00:13:03,209
cost people have to relearn people have

00:12:59,610 --> 00:13:05,790
to update documentation people have to

00:13:03,209 --> 00:13:07,709
update training materials other

00:13:05,790 --> 00:13:10,529
libraries may be impacted the other

00:13:07,709 --> 00:13:13,760
implementations are affected so even

00:13:10,529 --> 00:13:19,230
changes that are genuinely positive ones

00:13:13,760 --> 00:13:20,810
can be have a nonzero cost it just in

00:13:19,230 --> 00:13:23,810
terms of what people do

00:13:20,810 --> 00:13:28,610
and so really the first principle is

00:13:23,810 --> 00:13:31,760
don't screw it up pythons pretty good as

00:13:28,610 --> 00:13:34,790
it is we think there are ways we can

00:13:31,760 --> 00:13:37,400
make it better but we want the evidence

00:13:34,790 --> 00:13:40,670
or the arguments in favor of changes to

00:13:37,400 --> 00:13:45,740
be clear and compelling yes this is

00:13:40,670 --> 00:13:51,200
worth it and this is people who are new

00:13:45,740 --> 00:13:52,640
to the game of proposing change this is

00:13:51,200 --> 00:13:54,250
often one of the hardest concepts for

00:13:52,640 --> 00:13:57,110
them to come to grips with the fact that

00:13:54,250 --> 00:14:03,260
being a little bit better is not enough

00:13:57,110 --> 00:14:07,250
because of the cost of pushing change

00:14:03,260 --> 00:14:09,500
out through that entire just the size of

00:14:07,250 --> 00:14:11,210
the ecosystem is such that there needs

00:14:09,500 --> 00:14:16,430
to be a clear benefit to including

00:14:11,210 --> 00:14:17,990
things and so when the arguments in

00:14:16,430 --> 00:14:20,720
favor of a change and not particularly

00:14:17,990 --> 00:14:24,589
compelling then by default whatever's

00:14:20,720 --> 00:14:29,839
there already tensed or mean it's we set

00:14:24,589 --> 00:14:34,400
we do say no a lot but it's an

00:14:29,839 --> 00:14:36,520
interesting an interesting tension you

00:14:34,400 --> 00:14:41,180
compare it to something like C++ where

00:14:36,520 --> 00:14:42,980
they just recently announced C++ 11 13

00:14:41,180 --> 00:14:47,930
years after the last version back in

00:14:42,980 --> 00:14:49,580
1998 and so at that point pythons 18 to

00:14:47,930 --> 00:14:54,860
24 months release cycle doesn't look

00:14:49,580 --> 00:14:57,200
quite so slight but and then the ideal

00:14:54,860 --> 00:14:59,030
that were kind of aiming for when we do

00:14:57,200 --> 00:15:00,589
add new features is that we want the

00:14:59,030 --> 00:15:02,570
obvious way to do things in the correct

00:15:00,589 --> 00:15:05,060
way to do things to be the same to the

00:15:02,570 --> 00:15:06,650
maximum extent we can manage it that was

00:15:05,060 --> 00:15:09,260
one of the big motivators behind the

00:15:06,650 --> 00:15:11,570
width statement that there was a lot of

00:15:09,260 --> 00:15:13,459
code a lot of tri finally code the

00:15:11,570 --> 00:15:16,700
correct way to write it was not always

00:15:13,459 --> 00:15:18,140
obvious synchronization locks was a

00:15:16,700 --> 00:15:20,990
classic case where lots of people got

00:15:18,140 --> 00:15:23,800
that wrong they put the acquire inside

00:15:20,990 --> 00:15:26,420
the try block when it should be outside

00:15:23,800 --> 00:15:30,610
whereas these days with context manager

00:15:26,420 --> 00:15:34,070
you say with lock and you're done and

00:15:30,610 --> 00:15:36,830
basically yeah it boils down to the

00:15:34,070 --> 00:15:38,980
the open-source ethos of rough consensus

00:15:36,830 --> 00:15:44,620
and running code if nobody writes it

00:15:38,980 --> 00:15:51,040
it's not going to get implemented but if

00:15:44,620 --> 00:15:53,810
ya so move on to the five minute warning

00:15:51,040 --> 00:15:55,880
Richard Jones is giving a talk this

00:15:53,810 --> 00:15:57,770
afternoon on the xeno Python which is

00:15:55,880 --> 00:16:00,530
basically a bunch of design principles

00:15:57,770 --> 00:16:04,130
that really do guide the way we consider

00:16:00,530 --> 00:16:09,560
changes to the language so I'll skip

00:16:04,130 --> 00:16:10,880
over that and recommend it but yeah that

00:16:09,560 --> 00:16:13,370
ecosystem that I went through earlier

00:16:10,880 --> 00:16:14,690
that's really the big thing we keep in

00:16:13,370 --> 00:16:20,060
mind and that's what a lot of people

00:16:14,690 --> 00:16:21,890
coming in with suggestions this is the

00:16:20,060 --> 00:16:27,070
impact that our decisions have on that

00:16:21,890 --> 00:16:29,420
whole community so the role of core devs

00:16:27,070 --> 00:16:31,520
the big thing is we get to decide when

00:16:29,420 --> 00:16:32,840
and where to commit changes we get to

00:16:31,520 --> 00:16:36,170
decide how much of a discussion is

00:16:32,840 --> 00:16:37,730
needed we can commit stuff directly we

00:16:36,170 --> 00:16:39,740
can say oh well we need to put this on

00:16:37,730 --> 00:16:41,630
the tracker and discuss it needs to go

00:16:39,740 --> 00:16:46,010
to Python dev or it needs a full Python

00:16:41,630 --> 00:16:48,920
enhancement proposal and one of the big

00:16:46,010 --> 00:16:51,910
things that applies endeavor we can do

00:16:48,920 --> 00:16:54,110
as devs is any commit we can say look

00:16:51,910 --> 00:16:55,550
don't think that's a good idea please

00:16:54,110 --> 00:16:59,060
revert it and we'll take it to buy from

00:16:55,550 --> 00:17:01,160
Devin discuss it and the guido van

00:16:59,060 --> 00:17:02,920
rossum and evident benevolent dictator

00:17:01,160 --> 00:17:04,910
for life is the language inventor

00:17:02,920 --> 00:17:06,140
occasionally he'll resolve arguments by

00:17:04,910 --> 00:17:08,689
for you but he's actually really

00:17:06,140 --> 00:17:13,510
reluctant to do that and that's a good

00:17:08,689 --> 00:17:15,530
thing basically he has that power if if

00:17:13,510 --> 00:17:16,939
there's some features that wouldn't be

00:17:15,530 --> 00:17:19,189
in the language if he didn't just make a

00:17:16,939 --> 00:17:21,040
decision so things like conditional

00:17:19,189 --> 00:17:24,709
expressions and the decorator syntax

00:17:21,040 --> 00:17:26,839
ultimately boiled down to Guido Guido

00:17:24,709 --> 00:17:32,750
trusting his gut on the syntax being

00:17:26,839 --> 00:17:38,480
good enough and yeah and so that's

00:17:32,750 --> 00:17:40,940
basically a useful thing to have as a to

00:17:38,480 --> 00:17:44,120
finish off an argument but ultimately

00:17:40,940 --> 00:17:46,010
it's not needed all that often and so

00:17:44,120 --> 00:17:46,850
ultimately what that let's see pass and

00:17:46,010 --> 00:17:49,789
do

00:17:46,850 --> 00:17:51,919
is it's a tool that we hack on it

00:17:49,789 --> 00:17:53,299
because we want to use it even though

00:17:51,919 --> 00:17:54,860
the version that we're using in

00:17:53,299 --> 00:17:57,679
production may be several versions

00:17:54,860 --> 00:18:01,730
behind eventually we'll get to use the

00:17:57,679 --> 00:18:02,809
ones we're releasing today it sets the

00:18:01,730 --> 00:18:05,480
baseline for all the pipes and

00:18:02,809 --> 00:18:07,549
implementations to target those the

00:18:05,480 --> 00:18:10,250
arguments about new features can really

00:18:07,549 --> 00:18:11,690
be quite acrimonious because the

00:18:10,250 --> 00:18:16,059
benefits and trade-offs are not always

00:18:11,690 --> 00:18:19,039
clear and it can be quite hard to argue

00:18:16,059 --> 00:18:23,990
argue the idea without temper is getting

00:18:19,039 --> 00:18:26,750
heated and then but then the other thing

00:18:23,990 --> 00:18:29,510
is ideally we want to support anything

00:18:26,750 --> 00:18:31,880
with the c compiler pipe is great if

00:18:29,510 --> 00:18:35,090
you're on x86 if you want to run on arm

00:18:31,880 --> 00:18:39,140
you're out of luck C Python on the other

00:18:35,090 --> 00:18:41,360
hand will probably run fine and the

00:18:39,140 --> 00:18:43,340
other thing is that the pet process

00:18:41,360 --> 00:18:46,100
provides a vehicle for setting standards

00:18:43,340 --> 00:18:49,390
that affect the whole ecosystem we don't

00:18:46,100 --> 00:18:52,309
always get it right but things like wsgi

00:18:49,390 --> 00:18:55,580
while anybody nobody should really be

00:18:52,309 --> 00:18:57,409
using SS girf directly but it is what

00:18:55,580 --> 00:19:01,940
lets all the web frameworks talk to most

00:18:57,409 --> 00:19:10,280
of the web service but a little bit of

00:19:01,940 --> 00:19:15,409
time left so it's so how people can help

00:19:10,280 --> 00:19:17,480
make it happen the it's actually very

00:19:15,409 --> 00:19:20,870
very interesting to be involved in core

00:19:17,480 --> 00:19:22,580
Python dev there's heaps of things that

00:19:20,870 --> 00:19:25,250
I wouldn't know anywhere near as much

00:19:22,580 --> 00:19:26,990
about them as I do so things like

00:19:25,250 --> 00:19:29,120
Unicode flowing point network protocols

00:19:26,990 --> 00:19:31,900
the standard library covers so much and

00:19:29,120 --> 00:19:34,039
just following Python dev can be

00:19:31,900 --> 00:19:39,039
extremely educational from that point of

00:19:34,039 --> 00:19:41,559
view so and then just the traditional

00:19:39,039 --> 00:19:44,780
the good parts of software development

00:19:41,559 --> 00:19:46,880
certainly got plenty of that to do but

00:19:44,780 --> 00:19:49,549
the sheer size of that ecosystem that I

00:19:46,880 --> 00:19:52,390
was talking about is being at the pivot

00:19:49,549 --> 00:19:54,799
point for that is kind of terrifying

00:19:52,390 --> 00:19:55,760
because if we screw up then lots of

00:19:54,799 --> 00:19:59,690
other people have to live with the

00:19:55,760 --> 00:20:04,220
consequences but it's also really cool

00:19:59,690 --> 00:20:05,809
and there'll be a seat pythons prints on

00:20:04,220 --> 00:20:11,240
monday and tuesday i believe this print

00:20:05,809 --> 00:20:12,799
intros are Sunday evening I think check

00:20:11,240 --> 00:20:19,659
the schedule I think the spring toes on

00:20:12,799 --> 00:20:23,570
that Sunday evening and yeah that

00:20:19,659 --> 00:20:25,669
screwed up a bit but yes so there's just

00:20:23,570 --> 00:20:28,759
some stuff there and the the slides are

00:20:25,669 --> 00:20:30,580
online and that's some resources for

00:20:28,759 --> 00:20:33,549
getting started in core development I

00:20:30,580 --> 00:20:47,929
meant to add a dev guide link to that

00:20:33,549 --> 00:20:49,519
but yep thanks Nick I can certainly

00:20:47,929 --> 00:20:52,309
vouch for the value of just hanging out

00:20:49,519 --> 00:20:53,450
on path and dev and one of the great

00:20:52,309 --> 00:20:54,769
things about being there is you get to

00:20:53,450 --> 00:20:56,720
read all of nicks well-thought-out

00:20:54,769 --> 00:20:59,629
replies to various people's proposal so

00:20:56,720 --> 00:21:07,870
I can yeah plus one for that idea any

00:20:59,629 --> 00:21:10,100
questions I guess just for anyone who's

00:21:07,870 --> 00:21:11,899
hanging out at the sprints on Monday and

00:21:10,100 --> 00:21:13,759
Tuesday how accessible is that to

00:21:11,899 --> 00:21:19,100
someone who's really completely

00:21:13,759 --> 00:21:24,200
beginning in what if we've got a is it

00:21:19,100 --> 00:21:26,659
going to be scary into hard no so the if

00:21:24,200 --> 00:21:28,850
you check out the dev guide on Python

00:21:26,659 --> 00:21:32,120
dog which I don't remember the exact URL

00:21:28,850 --> 00:21:36,230
or somewhere head some docs / dev guide

00:21:32,120 --> 00:21:37,909
I think what we suggest to people that

00:21:36,230 --> 00:21:39,799
are just wanting to get involved as

00:21:37,909 --> 00:21:45,110
we've got this thing called Devon a box

00:21:39,799 --> 00:21:47,480
which is a prebuilt sorry not pre built

00:21:45,110 --> 00:21:51,620
a complete check out of material of the

00:21:47,480 --> 00:21:54,620
mercurial repo with with the coverage

00:21:51,620 --> 00:21:56,990
data for the standard library and

00:21:54,620 --> 00:21:59,179
basically we suggest to people grab a

00:21:56,990 --> 00:22:00,559
module that's not well covered look at

00:21:59,179 --> 00:22:04,250
improving the test suite for that module

00:22:00,559 --> 00:22:07,779
or else grab one of the existing

00:22:04,250 --> 00:22:10,460
coverage patches that's on the tracker

00:22:07,779 --> 00:22:11,960
check that yep it runs check that it's

00:22:10,460 --> 00:22:15,710
all good

00:22:11,960 --> 00:22:17,540
and then my basic my basic job for the

00:22:15,710 --> 00:22:18,800
sprints is I'm not planning to work on

00:22:17,540 --> 00:22:30,290
anything of my own I'm just there to

00:22:18,800 --> 00:22:32,240
help people get started yep yeah

00:22:30,290 --> 00:22:39,290
reviewing patches on the tracker can

00:22:32,240 --> 00:22:43,040
also be very helpful anybody else I want

00:22:39,290 --> 00:22:45,200
to do you have a particular pet feature

00:22:43,040 --> 00:22:47,180
that you're thinking about trying to

00:22:45,200 --> 00:22:49,880
push through at the moment so yes

00:22:47,180 --> 00:22:51,800
actually I just mentored a google Summer

00:22:49,880 --> 00:22:55,340
of Code project for a thing called

00:22:51,800 --> 00:22:58,130
import engine which is basically taking

00:22:55,340 --> 00:23:00,590
the global state related to the input

00:22:58,130 --> 00:23:09,710
system and actually putting it on an

00:23:00,590 --> 00:23:11,420
object where it belongs okay so the

00:23:09,710 --> 00:23:13,730
question that I've got is one that the

00:23:11,420 --> 00:23:16,250
Django project gets a slightly different

00:23:13,730 --> 00:23:18,470
version of but in the same sylvain the

00:23:16,250 --> 00:23:20,090
Python core library has sort of two

00:23:18,470 --> 00:23:21,380
extremes when it comes to integrating

00:23:20,090 --> 00:23:22,880
third-party libraries on the one hand

00:23:21,380 --> 00:23:25,510
we've got how many different argument

00:23:22,880 --> 00:23:25,510

YouTube URL: https://www.youtube.com/watch?v=UZIq_9KgFEY


