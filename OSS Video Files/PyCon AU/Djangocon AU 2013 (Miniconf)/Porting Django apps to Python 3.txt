Title: Porting Django apps to Python 3
Publication date: 2013-07-12
Playlist: Djangocon AU 2013 (Miniconf)
Description: 
	Jacob Kaplan-Moss
http://2013.pycon-au.org/schedule/30080/view_talk
Django 1.5 now supports Python 3, so now's the time to start thinking about porting your apps and sites. Come see how! I'll talk about the porting techniques that work, and present two case studies: porting a site, and porting a reusable app.
PyCon Australia is the national conference for users of the Python Programming Language. In July 2013, we're returning to Hobart, bringing together students, enthusiasts, and professionals
Captions: 
	00:00:00,000 --> 00:00:05,730
our next talk is uh from Jacob Kaplan

00:00:03,090 --> 00:00:07,460
moss there's too many hyphenated

00:00:05,730 --> 00:00:10,230
surnames and I nearly stuff that up

00:00:07,460 --> 00:00:12,750
Jacob is the Kobe DFL of Django and a

00:00:10,230 --> 00:00:14,549
partner at revolution systems where he

00:00:12,750 --> 00:00:19,320
provides support services around Django

00:00:14,549 --> 00:00:21,890
and related open source technologies he

00:00:19,320 --> 00:00:24,990
also worked where Django was born at

00:00:21,890 --> 00:00:27,630
world online so today is going to talk

00:00:24,990 --> 00:00:30,060
to us about Django 1.5 and porting

00:00:27,630 --> 00:00:39,840
applications to Python 3 please make him

00:00:30,060 --> 00:00:42,920
welcome hey y'all so I am Jacob carp and

00:00:39,840 --> 00:00:45,030
moss on top of the other things that

00:00:42,920 --> 00:00:46,680
graciously listen my bio I thought I

00:00:45,030 --> 00:00:49,559
should briefly mention that I've

00:00:46,680 --> 00:00:51,600
recently switched jobs i'm now the also

00:00:49,559 --> 00:00:53,610
the director of security at Heroku so

00:00:51,600 --> 00:00:56,010
among the many other hats that I'm

00:00:53,610 --> 00:00:58,260
wearing i'm now at a Heroku had on top

00:00:56,010 --> 00:01:02,039
of that so if anyone wants to talk about

00:00:58,260 --> 00:01:03,329
Heroku you can come find me um although

00:01:02,039 --> 00:01:04,769
i'll probably just tell you to go talk

00:01:03,329 --> 00:01:07,320
to Kenneth because he's our Python guy

00:01:04,769 --> 00:01:09,659
and he knows all that stuff all right

00:01:07,320 --> 00:01:11,760
and that's all I'm gonna say about about

00:01:09,659 --> 00:01:15,990
my employer that's the obligatory you

00:01:11,760 --> 00:01:19,380
know plug let's get into it okay so

00:01:15,990 --> 00:01:22,860
Jenga 15 shipped roughly six months ago

00:01:19,380 --> 00:01:26,970
and it was a big deal we had Python 3

00:01:22,860 --> 00:01:28,920
support we announced that Django 15

00:01:26,970 --> 00:01:31,409
supports Python 3 and we said okay

00:01:28,920 --> 00:01:35,880
everything's ready it's in place you can

00:01:31,409 --> 00:01:38,159
start porting your apps jingle 1.6 is on

00:01:35,880 --> 00:01:40,710
track to ship in August and 1.6 is

00:01:38,159 --> 00:01:42,570
really like our official like we really

00:01:40,710 --> 00:01:45,090
think we're ready we kind of hedged our

00:01:42,570 --> 00:01:48,390
bets a bit with 15 we called our support

00:01:45,090 --> 00:01:49,680
for Python 3 experimental the idea being

00:01:48,390 --> 00:01:51,689
we wanted to give ourselves some leeway

00:01:49,680 --> 00:01:54,270
if we needed to make any last minute

00:01:51,689 --> 00:01:55,680
changes if we discovered issues with our

00:01:54,270 --> 00:01:57,689
approach we wanted to give ourselves

00:01:55,680 --> 00:02:00,299
some freedom to break things if we

00:01:57,689 --> 00:02:02,219
needed to break things turns out we

00:02:00,299 --> 00:02:07,049
actually got it right on the first try

00:02:02,219 --> 00:02:08,640
just kind of surprising and so as of 16

00:02:07,049 --> 00:02:10,170
we're basically declaring Python 3

00:02:08,640 --> 00:02:11,459
support stable we're saying it's ready

00:02:10,170 --> 00:02:12,700
for production you can use it in

00:02:11,459 --> 00:02:15,489
production

00:02:12,700 --> 00:02:18,760
you know go to town so this talk is

00:02:15,489 --> 00:02:20,530
about is about that is about our support

00:02:18,760 --> 00:02:21,819
for Python 3 about what that means for

00:02:20,530 --> 00:02:25,330
you and about how you can go about

00:02:21,819 --> 00:02:26,590
taking advantage of Python 3 so before

00:02:25,330 --> 00:02:27,910
we start talking about the how there's

00:02:26,590 --> 00:02:29,650
some sort of natural questions that are

00:02:27,910 --> 00:02:31,000
going to come up and I think the first

00:02:29,650 --> 00:02:34,360
one from most people have been using

00:02:31,000 --> 00:02:36,760
Python for any period of time is ok but

00:02:34,360 --> 00:02:39,069
do I actually want to use Python 3 is

00:02:36,760 --> 00:02:40,840
this actually is this Python 3 thing

00:02:39,069 --> 00:02:42,700
actually a thing do I want to use it or

00:02:40,840 --> 00:02:44,860
is it just like Perl 6 this kind of joke

00:02:42,700 --> 00:02:47,920
that's out there that never is going to

00:02:44,860 --> 00:02:50,380
actually come to fruition and actually

00:02:47,920 --> 00:02:54,790
yeah you really if you like Python

00:02:50,380 --> 00:02:56,470
you'll love Python 3 really you know all

00:02:54,790 --> 00:02:59,769
those little things that annoy you about

00:02:56,470 --> 00:03:02,890
Python the fact that print is a

00:02:59,769 --> 00:03:05,110
statement so you can't rebind print to

00:03:02,890 --> 00:03:07,209
log and if you've put print statements

00:03:05,110 --> 00:03:08,799
in code they go to the console and you

00:03:07,209 --> 00:03:11,739
can't like somehow magically make that

00:03:08,799 --> 00:03:16,440
go out to a log file let's fix in Python

00:03:11,739 --> 00:03:19,989
3 the syntax for super that obnoxious

00:03:16,440 --> 00:03:24,630
super class comma self and I get that

00:03:19,989 --> 00:03:28,090
right whatever it is fixed in Python 3 I

00:03:24,630 --> 00:03:29,950
could go on there python 3 is basically

00:03:28,090 --> 00:03:34,739
Python 2 with all the annoying parts

00:03:29,950 --> 00:03:37,810
gone it it's hard to explain just how

00:03:34,739 --> 00:03:40,750
just how nice it is to write code in

00:03:37,810 --> 00:03:43,959
Python 3 it's it's it's surprisingly

00:03:40,750 --> 00:03:45,340
pleasant you you sort of have if you've

00:03:43,959 --> 00:03:48,280
been doing Python for a long time you've

00:03:45,340 --> 00:03:50,109
internalized all of these annoyances all

00:03:48,280 --> 00:03:51,970
of these warts all of these issues and

00:03:50,109 --> 00:03:55,750
then when suddenly they're not there

00:03:51,970 --> 00:03:58,900
anymore it's so nice python 3 is way

00:03:55,750 --> 00:04:00,790
more pleasant than Python 2 i'm the

00:03:58,900 --> 00:04:02,709
biggest thing though the thing that

00:04:00,790 --> 00:04:05,290
really tips it over the balance for us

00:04:02,709 --> 00:04:07,480
for web developers is that in python 3

00:04:05,290 --> 00:04:10,720
unicode is actually a thing it actually

00:04:07,480 --> 00:04:14,549
works right and this is really amazing

00:04:10,720 --> 00:04:17,320
right we we don't live in a world where

00:04:14,549 --> 00:04:19,000
English is the only language that our

00:04:17,320 --> 00:04:22,210
applications need to support we don't

00:04:19,000 --> 00:04:24,640
live in a world where 8-bit ASCII is

00:04:22,210 --> 00:04:26,380
sufficient to represent every single

00:04:24,640 --> 00:04:30,880
name of every single one of our

00:04:26,380 --> 00:04:32,620
users and in Python to actually dealing

00:04:30,880 --> 00:04:34,570
with real world data dealing with

00:04:32,620 --> 00:04:37,330
character sets other than a ski starts

00:04:34,570 --> 00:04:39,850
to just make your head explode Django

00:04:37,330 --> 00:04:41,950
papers over some of those issues for you

00:04:39,850 --> 00:04:44,260
and makes it a little bit easier to deal

00:04:41,950 --> 00:04:45,510
with but sooner or later you're going to

00:04:44,260 --> 00:04:48,310
be woken up in the middle of the night

00:04:45,510 --> 00:04:51,040
with an error message from sentry at a

00:04:48,310 --> 00:04:53,140
Unicode decode error and you're going to

00:04:51,040 --> 00:04:54,580
spend a ton of time trying to trace it

00:04:53,140 --> 00:04:59,740
down icy heads nodding you know what I'm

00:04:54,580 --> 00:05:02,560
talking about in Python 3 is basically

00:04:59,740 --> 00:05:05,140
doesn't happen python3 really really

00:05:02,560 --> 00:05:07,900
tightens up the rules around how Unicode

00:05:05,140 --> 00:05:13,090
is is used and represented and as a

00:05:07,900 --> 00:05:16,900
result if your tests pass your code will

00:05:13,090 --> 00:05:19,710
work with any character set it basically

00:05:16,900 --> 00:05:22,390
pushes the burden of dealing with

00:05:19,710 --> 00:05:24,580
Unicode issues to a sort of programmer

00:05:22,390 --> 00:05:26,410
time constraint something the something

00:05:24,580 --> 00:05:30,010
that you comes up early on in

00:05:26,410 --> 00:05:31,450
development rather than later it's a

00:05:30,010 --> 00:05:33,220
basic tenet of programming right you

00:05:31,450 --> 00:05:34,540
want to fail early you don't want

00:05:33,220 --> 00:05:36,130
something that fails once it's in

00:05:34,540 --> 00:05:37,900
production once it's been running for a

00:05:36,130 --> 00:05:41,200
while and that forces you to debug

00:05:37,900 --> 00:05:42,730
through some weird data and Python 3

00:05:41,200 --> 00:05:44,320
finally gets that right it's it's

00:05:42,730 --> 00:05:47,230
totally fantastic and it it

00:05:44,320 --> 00:05:48,580
revolutionizes the way that your

00:05:47,230 --> 00:05:53,260
application deals with sort of

00:05:48,580 --> 00:05:56,380
international data okay so that's the do

00:05:53,260 --> 00:05:58,240
you want to use Python 3 the more

00:05:56,380 --> 00:06:01,390
difficult question is can you use Python

00:05:58,240 --> 00:06:04,060
3 there's good news and there's bad news

00:06:01,390 --> 00:06:06,580
in this in the sphere the good news is

00:06:04,060 --> 00:06:09,040
that the Python community is moving a

00:06:06,580 --> 00:06:13,150
lot quicker now towards a world where

00:06:09,040 --> 00:06:14,440
pom Python 3 is supported everywhere and

00:06:13,150 --> 00:06:16,240
that's because of some of the techniques

00:06:14,440 --> 00:06:17,770
that I'll talk about in a little bit but

00:06:16,240 --> 00:06:22,030
there's also some bad news which is that

00:06:17,770 --> 00:06:24,700
not not everything's there yet the real

00:06:22,030 --> 00:06:26,350
question about can you use Python 3 or a

00:06:24,700 --> 00:06:28,900
practical question basically comes down

00:06:26,350 --> 00:06:31,150
to a question of dependencies if your

00:06:28,900 --> 00:06:33,700
applications dependencies have been

00:06:31,150 --> 00:06:36,100
ported then you can use Python 3 and you

00:06:33,700 --> 00:06:37,900
should but if they haven't then you have

00:06:36,100 --> 00:06:38,840
to do a sort of complicated calculus of

00:06:37,900 --> 00:06:40,699
okay well can I

00:06:38,840 --> 00:06:43,310
can I switch dependencies and use

00:06:40,699 --> 00:06:45,260
something else instead can I take the

00:06:43,310 --> 00:06:47,990
time as part of my development effort to

00:06:45,260 --> 00:06:49,280
port something else to python 3 or do I

00:06:47,990 --> 00:06:51,860
just have to kind of throw up my hands

00:06:49,280 --> 00:06:53,930
and use Python 2 so let me go through

00:06:51,860 --> 00:06:56,930
some of the like big dependencies and

00:06:53,930 --> 00:06:58,400
talk about the current state where we

00:06:56,930 --> 00:07:02,360
are right now in terms of Python 3

00:06:58,400 --> 00:07:03,710
support so the first big problem that

00:07:02,360 --> 00:07:06,260
you're going to face when you run into

00:07:03,710 --> 00:07:07,790
Python 3 is your choice of databases and

00:07:06,260 --> 00:07:12,250
whether or not your database is

00:07:07,790 --> 00:07:16,400
supported by by Python 3 or by Django

00:07:12,250 --> 00:07:19,160
together so if you use postgres you're

00:07:16,400 --> 00:07:26,150
fine and we all use postgres so I'm just

00:07:19,160 --> 00:07:27,440
going to move on right seriously uh it's

00:07:26,150 --> 00:07:31,370
just switch to postgres you'll be so

00:07:27,440 --> 00:07:34,750
much happier sequel lightworks my sequel

00:07:31,370 --> 00:07:38,090
is kind of in a weird state there is a

00:07:34,750 --> 00:07:42,590
Python 3 compatible my sequel connector

00:07:38,090 --> 00:07:44,510
buying a binary that Oracle puts out but

00:07:42,590 --> 00:07:46,460
there are there are licensing concerns

00:07:44,510 --> 00:07:49,220
I'm not going to shave that yak here on

00:07:46,460 --> 00:07:50,810
stage come talk to me later if you're

00:07:49,220 --> 00:07:55,010
interested about the state state of the

00:07:50,810 --> 00:07:57,260
art here but basically as it stands we

00:07:55,010 --> 00:07:59,660
the Django sort of cork committers

00:07:57,260 --> 00:08:01,370
cannot recommend that you use Oracle's

00:07:59,660 --> 00:08:04,970
my sequel connector in your application

00:08:01,370 --> 00:08:06,950
it may work and you may want to try it

00:08:04,970 --> 00:08:08,479
if my sequel is a hard requirement but

00:08:06,950 --> 00:08:10,130
we can't recommend that you do that

00:08:08,479 --> 00:08:12,680
because of some licensing concerns on

00:08:10,130 --> 00:08:14,720
our end and if you're a nerd and want to

00:08:12,680 --> 00:08:17,419
talk more about that you can find me

00:08:14,720 --> 00:08:19,370
afterwards and I don't actually know the

00:08:17,419 --> 00:08:22,910
state of Oracle support I do know that

00:08:19,370 --> 00:08:25,729
CX Oracle the the Python binder has been

00:08:22,910 --> 00:08:30,260
ported to python 3 our CI server doesn't

00:08:25,729 --> 00:08:32,690
yet run Django's tests against oracle

00:08:30,260 --> 00:08:35,060
and python 3 so I don't actually I can't

00:08:32,690 --> 00:08:37,279
give you hard data on that I I believe

00:08:35,060 --> 00:08:40,339
that it works at least as well as Python

00:08:37,279 --> 00:08:41,479
to support does but I'm not a hundred

00:08:40,339 --> 00:08:44,420
percent sure they're so I've put the

00:08:41,479 --> 00:08:45,650
little question mark there so depending

00:08:44,420 --> 00:08:46,940
on what database you're using and

00:08:45,650 --> 00:08:48,920
depending on your flexibility and

00:08:46,940 --> 00:08:52,089
switching databases you may or may not

00:08:48,920 --> 00:08:54,610
be able to use Python 3

00:08:52,089 --> 00:08:56,779
once you've answered that question

00:08:54,610 --> 00:08:59,029
you'll probably want to be talking about

00:08:56,779 --> 00:09:00,440
deployment the good news is that you

00:08:59,029 --> 00:09:03,980
have a lot of good options when it comes

00:09:00,440 --> 00:09:06,380
to deployment the bad news is that the

00:09:03,980 --> 00:09:08,540
most popular option which is gonna corn

00:09:06,380 --> 00:09:09,980
and G event at least that's that's what

00:09:08,540 --> 00:09:12,620
seems to me from sort of surveying what

00:09:09,980 --> 00:09:14,720
people are doing out there i doesn't

00:09:12,620 --> 00:09:18,680
really work that well there's a Python 3

00:09:14,720 --> 00:09:21,639
branch of G event but it it's been

00:09:18,680 --> 00:09:24,230
unstable in my testing however mod wsgi

00:09:21,639 --> 00:09:27,410
has supported Python 3 for a long time

00:09:24,230 --> 00:09:30,230
since before we did and uwsgi also works

00:09:27,410 --> 00:09:31,940
on Python 3 and 4 low-traffic the

00:09:30,230 --> 00:09:33,980
various gun the gonna corn sync workers

00:09:31,940 --> 00:09:37,759
which are actually surprisingly fast

00:09:33,980 --> 00:09:39,649
work pretty well so you've got for two

00:09:37,759 --> 00:09:43,430
and a half really good choices for

00:09:39,649 --> 00:09:47,420
deployment under Python 3 you may have

00:09:43,430 --> 00:09:49,490
to when I the first site that i ported i

00:09:47,420 --> 00:09:54,440
had to switch from using gonna corn to

00:09:49,490 --> 00:09:56,510
mod wsgi slightly more work in terms of

00:09:54,440 --> 00:09:58,069
setup now you gotta run apache but in

00:09:56,510 --> 00:10:01,220
terms of performance it seems to run

00:09:58,069 --> 00:10:02,990
about the same so you won't have

00:10:01,220 --> 00:10:05,180
anything performance wise holding you

00:10:02,990 --> 00:10:07,670
back you may have to switch to a

00:10:05,180 --> 00:10:10,550
different tool if your preferred tool is

00:10:07,670 --> 00:10:12,670
not yet supported and the situation with

00:10:10,550 --> 00:10:15,800
gonna corn is sort of changing rapidly

00:10:12,670 --> 00:10:17,720
it may be the case that you know even by

00:10:15,800 --> 00:10:23,480
the time this conference is over it now

00:10:17,720 --> 00:10:26,720
works so you know watch that space so

00:10:23,480 --> 00:10:28,579
next i took a look at some popular some

00:10:26,720 --> 00:10:31,160
popular Django third party packages

00:10:28,579 --> 00:10:34,670
these are roughly these are roughly the

00:10:31,160 --> 00:10:37,370
top 10 most popular third-party packages

00:10:34,670 --> 00:10:42,199
according to downloads from PI pi which

00:10:37,370 --> 00:10:44,350
is kind of a kind of a not the best

00:10:42,199 --> 00:10:46,339
metric but an okay one and I and I

00:10:44,350 --> 00:10:48,199
monkeyed with it a little bit just to

00:10:46,339 --> 00:10:49,430
make them support make this list be

00:10:48,199 --> 00:10:52,339
roughly what I think people are actually

00:10:49,430 --> 00:10:53,959
using so if you if you've written an

00:10:52,339 --> 00:10:57,889
existing Django site you probably see

00:10:53,959 --> 00:10:59,720
stuff that you're using on this list so

00:10:57,889 --> 00:11:03,560
some good news and some bad news again a

00:10:59,720 --> 00:11:04,910
lot of the big stuff South done celery

00:11:03,560 --> 00:11:07,820
done

00:11:04,910 --> 00:11:09,260
Raven which is the client part that

00:11:07,820 --> 00:11:13,760
hooks up to the Sentry error reporter

00:11:09,260 --> 00:11:15,590
done but some bad news compress Jengo

00:11:13,760 --> 00:11:18,440
compressor is not ported Django social

00:11:15,590 --> 00:11:19,850
auth is imported some older stuff I mean

00:11:18,440 --> 00:11:22,220
Django tagging hasn't had an update

00:11:19,850 --> 00:11:25,250
since 2009 so that's probably not going

00:11:22,220 --> 00:11:27,050
to get ported so there's an it's a mixed

00:11:25,250 --> 00:11:28,840
bag when you go to evaluate your your

00:11:27,050 --> 00:11:30,950
applications third party dependencies

00:11:28,840 --> 00:11:32,630
but again there's also some good news

00:11:30,950 --> 00:11:34,910
here which is that in a lot of cases

00:11:32,630 --> 00:11:36,980
there are suitable alternatives so

00:11:34,910 --> 00:11:38,960
there's no Django compressor but there

00:11:36,980 --> 00:11:40,310
is Django pipeline and in fact Django

00:11:38,960 --> 00:11:42,890
pipeline is better than Django

00:11:40,310 --> 00:11:44,420
compressor in a lot of ways so even if

00:11:42,890 --> 00:11:46,850
you're using Python to you may want to

00:11:44,420 --> 00:11:49,850
be upgrading to pipeline and there's no

00:11:46,850 --> 00:11:51,830
social off but Django all off has been

00:11:49,850 --> 00:11:54,620
supported and for the most part they are

00:11:51,830 --> 00:11:56,750
functionally equivalent and there's no

00:11:54,620 --> 00:11:58,700
Django tagging but Django tag it has

00:11:56,750 --> 00:12:01,340
been ported and for the most part they

00:11:58,700 --> 00:12:02,960
are functionally equivalent so this is

00:12:01,340 --> 00:12:05,300
sort of a microcosm of your entire

00:12:02,960 --> 00:12:06,590
applications dependencies when you sit

00:12:05,300 --> 00:12:08,660
down to start thinking about developing

00:12:06,590 --> 00:12:10,430
a new site or if you're porting an

00:12:08,660 --> 00:12:15,530
existing one or if you're thinking about

00:12:10,430 --> 00:12:17,000
the steps of moving to Python 3 you'll

00:12:15,530 --> 00:12:19,730
sort of have to play a game like this

00:12:17,000 --> 00:12:22,940
right where you go okay I usually use

00:12:19,730 --> 00:12:25,880
Django registration for for use in my

00:12:22,940 --> 00:12:30,650
sight so okay so Django registration

00:12:25,880 --> 00:12:33,070
doesn't exist on Python 3 yet does that

00:12:30,650 --> 00:12:35,780
mean I'm I'm totally boned do I have to

00:12:33,070 --> 00:12:37,790
switch back to python to maybe maybe

00:12:35,780 --> 00:12:39,800
that's a deal breaker is there a

00:12:37,790 --> 00:12:41,750
suitable alternative right can I switch

00:12:39,800 --> 00:12:43,460
from compressor to pipeline is that

00:12:41,750 --> 00:12:46,010
going to do I have a lot of code

00:12:43,460 --> 00:12:47,390
invested in that dependency or is that

00:12:46,010 --> 00:12:48,830
just something i'm using i can just

00:12:47,390 --> 00:12:52,400
learn some new commands change my

00:12:48,830 --> 00:12:54,620
deployment scripts done or maybe you

00:12:52,400 --> 00:12:57,050
know django registration looks pretty

00:12:54,620 --> 00:12:58,250
small looks pretty lightweight maybe you

00:12:57,050 --> 00:12:59,930
could just pour it maybe you could do a

00:12:58,250 --> 00:13:01,190
service to the entire community take a

00:12:59,930 --> 00:13:04,880
little extra time as part of your

00:13:01,190 --> 00:13:07,220
project and get that ported so every

00:13:04,880 --> 00:13:08,600
time I've done work with Python 3 i've

00:13:07,220 --> 00:13:10,850
sort of had to play this little game of

00:13:08,600 --> 00:13:12,530
dependencies look through my list decide

00:13:10,850 --> 00:13:14,450
you know is this something I is this

00:13:12,530 --> 00:13:16,190
something I absolutely need and so just

00:13:14,450 --> 00:13:17,970
it derails the whole project is this

00:13:16,190 --> 00:13:20,399
something I can port is this something I

00:13:17,970 --> 00:13:22,980
replace is it something I can roll my

00:13:20,399 --> 00:13:25,170
own kind of this sort of complicated

00:13:22,980 --> 00:13:27,660
calculus so we're not quite there at the

00:13:25,170 --> 00:13:30,779
point where i can just definitively say

00:13:27,660 --> 00:13:33,810
oh yeah python3 it works but i think as

00:13:30,779 --> 00:13:36,750
you can see most of the things that you

00:13:33,810 --> 00:13:40,019
want to do most of the things that you

00:13:36,750 --> 00:13:42,480
need are there for you waiting on Python

00:13:40,019 --> 00:13:44,879
3 you know of this list I think that

00:13:42,480 --> 00:13:47,639
dumb Django debug tool bar is probably

00:13:44,879 --> 00:13:50,250
the tool that I missed the most that

00:13:47,639 --> 00:13:51,779
doesn't run on Python 3 yet there hasn't

00:13:50,250 --> 00:13:54,120
been a lot of things that I've run into

00:13:51,779 --> 00:13:56,579
lately that I've really gone up man I

00:13:54,120 --> 00:13:58,829
really wish that I had this on on Python

00:13:56,579 --> 00:14:01,470
3 in almost every case there's either

00:13:58,829 --> 00:14:03,029
either the tool is ported or there's a

00:14:01,470 --> 00:14:08,459
suitable alternative something I can use

00:14:03,029 --> 00:14:11,100
instead and in many cases in many cases

00:14:08,459 --> 00:14:13,769
the situation is as it is for target or

00:14:11,100 --> 00:14:15,540
pipeline where the tool that you used to

00:14:13,769 --> 00:14:17,430
be using kind of isn't maintained that

00:14:15,540 --> 00:14:20,779
much anymore and that's why it hasn't

00:14:17,430 --> 00:14:22,529
been ported to Python 3 right compressor

00:14:20,779 --> 00:14:24,509
essentially the reason there's no

00:14:22,529 --> 00:14:26,550
version of compressor for Python 3 is

00:14:24,509 --> 00:14:28,170
because yiannis the creator of Django

00:14:26,550 --> 00:14:30,180
compressor thinks that Django pipeline

00:14:28,170 --> 00:14:31,709
is better and would rather that you use

00:14:30,180 --> 00:14:35,850
Django pipeline so there's not a lot of

00:14:31,709 --> 00:14:37,379
motivation in porting a tool that kind

00:14:35,850 --> 00:14:38,819
of has a better alternative out there so

00:14:37,379 --> 00:14:40,800
in a lot of cases that's the situation

00:14:38,819 --> 00:14:42,720
where the thing that's on Python 3 is

00:14:40,800 --> 00:14:52,110
the more modern is the more up-to-date

00:14:42,720 --> 00:14:55,579
is the more sort of the better tool ok

00:14:52,110 --> 00:15:00,480
so we've answered the why we've answered

00:14:55,579 --> 00:15:02,519
the can you so the real is really a

00:15:00,480 --> 00:15:04,790
question though of should you use Python

00:15:02,519 --> 00:15:07,709
3 you know given all this information

00:15:04,790 --> 00:15:11,430
how do you make the decision whether or

00:15:07,709 --> 00:15:14,279
not you should use Python 3 and this is

00:15:11,430 --> 00:15:15,689
obviously a sort of complicated decision

00:15:14,279 --> 00:15:19,079
there's there's some there's some

00:15:15,689 --> 00:15:20,939
business issues here as we'll see in a

00:15:19,079 --> 00:15:23,399
little bit there's probably an

00:15:20,939 --> 00:15:25,199
additional cost to using Python 3 in

00:15:23,399 --> 00:15:27,660
either in terms of development time or

00:15:25,199 --> 00:15:31,290
in terms of just strictly in terms of

00:15:27,660 --> 00:15:33,509
money as it translates to to effort

00:15:31,290 --> 00:15:35,970
so can you can you stomach that extra

00:15:33,509 --> 00:15:37,529
that extra cost there's a there's a

00:15:35,970 --> 00:15:40,709
Productivity cost right you have to

00:15:37,529 --> 00:15:42,720
learn what's new in Python 3 there's

00:15:40,709 --> 00:15:44,339
also a productivity benefit as you don't

00:15:42,720 --> 00:15:47,130
have to spend time tearing your hair out

00:15:44,339 --> 00:15:48,750
over Unicode issues so there's this sort

00:15:47,130 --> 00:15:51,300
of a cost-benefit analysis to trade off

00:15:48,750 --> 00:15:53,040
here I can't give you a single piece of

00:15:51,300 --> 00:15:55,170
advice answer to this question because

00:15:53,040 --> 00:15:58,380
it's going to depend on your situation

00:15:55,170 --> 00:16:00,509
on your application on your company on

00:15:58,380 --> 00:16:03,000
your particular needs the best advice

00:16:00,509 --> 00:16:05,639
that I can give you here is to use

00:16:03,000 --> 00:16:08,279
Python 3 if you can and use Python 2 if

00:16:05,639 --> 00:16:09,779
you must Python 2 is still a very good

00:16:08,279 --> 00:16:12,360
language and it's going to be supported

00:16:09,779 --> 00:16:15,690
for a very long time but it is a dead

00:16:12,360 --> 00:16:19,620
end it is not going to get better it's

00:16:15,690 --> 00:16:23,790
going to stay the way it is for 20 more

00:16:19,620 --> 00:16:25,350
years as it slowly dies off python 3 on

00:16:23,790 --> 00:16:27,480
the other hand will get better it will

00:16:25,350 --> 00:16:31,500
get faster it will gain new features it

00:16:27,480 --> 00:16:34,649
will get new external modules sooner or

00:16:31,500 --> 00:16:35,880
later really awesome third-party

00:16:34,649 --> 00:16:38,990
community stuff is going to start

00:16:35,880 --> 00:16:40,649
showing up that only works on Python 3

00:16:38,990 --> 00:16:43,740
eventually at some point in the future

00:16:40,649 --> 00:16:47,339
jangle will only work on Python 3 there

00:16:43,740 --> 00:16:49,649
is there's really no future to python to

00:16:47,339 --> 00:16:52,440
it is what as Alex said a little while

00:16:49,649 --> 00:16:54,810
ago a Python 2 is the next cobol it's

00:16:52,440 --> 00:16:58,260
it's going the way of a dinosaur slowly

00:16:54,810 --> 00:17:00,690
and it might take 20 years may even be

00:16:58,260 --> 00:17:02,730
optimistically fast it's going to be a

00:17:00,690 --> 00:17:04,650
very very slow ramp down and there's

00:17:02,730 --> 00:17:06,540
going to be a very long support window I

00:17:04,650 --> 00:17:09,360
mean red hat is committed to supporting

00:17:06,540 --> 00:17:12,270
Python 2 into until something like 20-30

00:17:09,360 --> 00:17:15,209
I mean it's it's a long ramp down and no

00:17:12,270 --> 00:17:16,679
one should be feeling scared about even

00:17:15,209 --> 00:17:19,380
starting new businesses based around

00:17:16,679 --> 00:17:21,689
Python to right now but you should be

00:17:19,380 --> 00:17:28,830
cognizant of the fact that it's it is

00:17:21,689 --> 00:17:31,770
not a language with the future so you've

00:17:28,830 --> 00:17:33,929
made the decision to use Python 3 so now

00:17:31,770 --> 00:17:37,260
let's talk about the details for how you

00:17:33,929 --> 00:17:39,960
actually go about that there's basically

00:17:37,260 --> 00:17:42,150
three choices you have in terms of how

00:17:39,960 --> 00:17:43,970
in terms of how you go about writing a

00:17:42,150 --> 00:17:46,100
site using Python 3

00:17:43,970 --> 00:17:48,710
you can write a site that supports

00:17:46,100 --> 00:17:50,299
Python 3 only so this is the case if

00:17:48,710 --> 00:17:52,390
you're doing greenfields development

00:17:50,299 --> 00:17:54,830
right you're doing a new brand new site

00:17:52,390 --> 00:17:56,210
you have no dependent you have no you

00:17:54,830 --> 00:17:57,500
know real dependencies to speak of your

00:17:56,210 --> 00:17:59,390
not porting existing code you just

00:17:57,500 --> 00:18:00,980
starting from scratch you don't need to

00:17:59,390 --> 00:18:06,770
support Python 2 because it's a brand

00:18:00,980 --> 00:18:09,020
new site if you do have code that needs

00:18:06,770 --> 00:18:11,960
to support both Python 2 and Python 3

00:18:09,020 --> 00:18:14,059
that's actually possible and there's two

00:18:11,960 --> 00:18:16,400
different ways of doing that one of them

00:18:14,059 --> 00:18:19,100
is called 223 and the other is a

00:18:16,400 --> 00:18:20,750
technique sometimes called shared source

00:18:19,100 --> 00:18:23,120
or single code base or I don't know that

00:18:20,750 --> 00:18:25,669
we have a good single name for that for

00:18:23,120 --> 00:18:30,440
the technique yet so let's talk about

00:18:25,669 --> 00:18:32,120
these options a little bit if you can do

00:18:30,440 --> 00:18:34,190
python3 only if you're doing a brand new

00:18:32,120 --> 00:18:36,320
site there's no reason to support both

00:18:34,190 --> 00:18:38,750
Python 2 and Python 3 if you're

00:18:36,320 --> 00:18:41,600
developing some awesome new third party

00:18:38,750 --> 00:18:44,690
app and you don't particularly care

00:18:41,600 --> 00:18:46,580
about making it available to python to

00:18:44,690 --> 00:18:48,890
users go right ahead and just support

00:18:46,580 --> 00:18:49,940
python3 there's there's at this point

00:18:48,890 --> 00:18:51,919
there's nothing wrong with just

00:18:49,940 --> 00:18:56,600
supporting Python 3 you don't really

00:18:51,919 --> 00:18:58,190
need to hedge your bets there if you're

00:18:56,600 --> 00:19:01,480
embarking on a you know if you are

00:18:58,190 --> 00:19:03,620
embarking on a new site and you get

00:19:01,480 --> 00:19:06,230
months in and realize that you have to

00:19:03,620 --> 00:19:07,909
fall back to python to as we'll see when

00:19:06,230 --> 00:19:09,890
we talk about the shared source

00:19:07,909 --> 00:19:13,580
technique it's actually not that hard to

00:19:09,890 --> 00:19:16,280
make to write code that runs on both so

00:19:13,580 --> 00:19:19,039
if you if you guess and go python3 only

00:19:16,280 --> 00:19:20,600
and you're wrong the cost of sort of

00:19:19,039 --> 00:19:22,100
taking that code and making it also work

00:19:20,600 --> 00:19:24,350
on Python 2 is going to be reasonably

00:19:22,100 --> 00:19:27,350
low so it's a if you're doing a new site

00:19:24,350 --> 00:19:29,000
and you want to use Python 3 don't even

00:19:27,350 --> 00:19:31,159
bother with trying to support both

00:19:29,000 --> 00:19:33,169
versions just start with Python 3 and go

00:19:31,159 --> 00:19:36,710
as long as you can with Python 3 support

00:19:33,169 --> 00:19:38,780
and you'll probably get to production if

00:19:36,710 --> 00:19:42,650
you do need to support both code bases

00:19:38,780 --> 00:19:45,070
and this is mostly the case in in apps

00:19:42,650 --> 00:19:47,690
in in pluggable apps that you're writing

00:19:45,070 --> 00:19:49,130
that you need to support sites both

00:19:47,690 --> 00:19:51,559
written in Python 2 and written in

00:19:49,130 --> 00:19:54,679
Python 3 then you need a tool or a

00:19:51,559 --> 00:19:57,080
technique to help you with that so the

00:19:54,679 --> 00:19:57,530
old tool the initial thing that shipped

00:19:57,080 --> 00:20:00,890
with

00:19:57,530 --> 00:20:03,680
3 the first version of Python 3 was a

00:20:00,890 --> 00:20:05,540
tool called 2 to 3 and 2 to 3 is

00:20:03,680 --> 00:20:09,890
actually like incredibly cool from a

00:20:05,540 --> 00:20:12,500
technology standpoint it basically it

00:20:09,890 --> 00:20:14,210
breaks your Python to code down using it

00:20:12,500 --> 00:20:15,770
into a syntax tree and then does this

00:20:14,210 --> 00:20:18,500
pattern matching stuff and then applies

00:20:15,770 --> 00:20:21,170
transforms to it and you end up with a

00:20:18,500 --> 00:20:25,190
patch that converts your Python to code

00:20:21,170 --> 00:20:26,830
to python 3 and it's like the technology

00:20:25,190 --> 00:20:29,960
is really nifty it's really super cool

00:20:26,830 --> 00:20:32,420
but unfortunately what you end up with

00:20:29,960 --> 00:20:34,310
is to separate code bases you end up

00:20:32,420 --> 00:20:36,350
with a python to code base that you run

00:20:34,310 --> 00:20:37,610
through a translator to get a python 3

00:20:36,350 --> 00:20:39,920
code base and this has some pretty

00:20:37,610 --> 00:20:43,400
serious problems the biggest one being

00:20:39,920 --> 00:20:45,260
around around patch process and bugs if

00:20:43,400 --> 00:20:47,960
you find a bug in pipe in the Python 3

00:20:45,260 --> 00:20:49,820
version you can't that and the patch you

00:20:47,960 --> 00:20:51,410
come up to fix it you can't just apply

00:20:49,820 --> 00:20:53,840
that patch because the original source

00:20:51,410 --> 00:20:55,070
code is actually in Python 2 so you have

00:20:53,840 --> 00:20:57,530
to do this weird thing where you find a

00:20:55,070 --> 00:20:59,480
bug in Python 3 you fix it in Python to

00:20:57,530 --> 00:21:00,800
you translate the source code and verify

00:20:59,480 --> 00:21:01,730
that the bug is fixed and if it's not

00:21:00,800 --> 00:21:05,540
you have to kind of like do this

00:21:01,730 --> 00:21:06,860
circular loop again it's it's a

00:21:05,540 --> 00:21:09,890
specially death to community

00:21:06,860 --> 00:21:11,330
contribution because if Django used this

00:21:09,890 --> 00:21:13,430
technique and someone came to us with a

00:21:11,330 --> 00:21:15,110
patch that was written against Python 3

00:21:13,430 --> 00:21:17,150
we'd have to say no no go away and write

00:21:15,110 --> 00:21:19,220
it against Python 2 and it basically

00:21:17,150 --> 00:21:21,250
guarantees that you'll be that you will

00:21:19,220 --> 00:21:23,510
be the last person writing Python 2

00:21:21,250 --> 00:21:25,820
because as long as you have one user

00:21:23,510 --> 00:21:27,860
who's still using Python to you need to

00:21:25,820 --> 00:21:29,960
keep using writing Python to code and

00:21:27,860 --> 00:21:31,940
using two to three to translate it so

00:21:29,960 --> 00:21:34,850
when we when the Django team evaluated

00:21:31,940 --> 00:21:36,860
two to three on any number of times we

00:21:34,850 --> 00:21:38,750
basically kept saying no we want to

00:21:36,860 --> 00:21:40,490
write Python 3 we don't want to be the

00:21:38,750 --> 00:21:41,900
last people on earth writing Python to

00:21:40,490 --> 00:21:46,040
just because we still have some Python

00:21:41,900 --> 00:21:49,640
to supporters Python to users luckily a

00:21:46,040 --> 00:21:51,920
new technique emerged in the last few

00:21:49,640 --> 00:21:53,990
years and this is what sometimes is

00:21:51,920 --> 00:21:56,120
called a single source approach on what

00:21:53,990 --> 00:22:00,490
you do with when this approach is you

00:21:56,120 --> 00:22:04,370
have one code base you write code that

00:22:00,490 --> 00:22:06,590
is basically Python 3 code with a couple

00:22:04,370 --> 00:22:09,380
of little shims to ensure that it also

00:22:06,590 --> 00:22:10,909
works on Python 2 and this was made

00:22:09,380 --> 00:22:13,669
possible through some

00:22:10,909 --> 00:22:16,489
improvements in Python to itself and

00:22:13,669 --> 00:22:17,840
also in some third-party libraries and

00:22:16,489 --> 00:22:20,269
also just sort of a general recognition

00:22:17,840 --> 00:22:22,849
that it's actually possible to write

00:22:20,269 --> 00:22:26,330
code that runs on both Python 2 and on

00:22:22,849 --> 00:22:29,690
Python 3 and this approach really wins

00:22:26,330 --> 00:22:32,899
you're writing Python 3 code you as the

00:22:29,690 --> 00:22:34,970
primary author get to start writing

00:22:32,899 --> 00:22:37,970
Python 3 even if some of your users are

00:22:34,970 --> 00:22:41,029
still using Python to write when we say

00:22:37,970 --> 00:22:42,799
that Django 1.5 supports Python 3 what

00:22:41,029 --> 00:22:45,590
we mean is we're actually writing Python

00:22:42,799 --> 00:22:50,119
3 right Django source code has been in

00:22:45,590 --> 00:22:52,309
Python 3 for a year roughly we've all

00:22:50,119 --> 00:22:57,019
already been writing Python 3 for a year

00:22:52,309 --> 00:22:59,690
if you're using Django 1.5 on Python 2

00:22:57,019 --> 00:23:01,460
you're actually running Python 3 code

00:22:59,690 --> 00:23:03,649
just with a couple of these little

00:23:01,460 --> 00:23:05,299
tricks and shims and bits to make it

00:23:03,649 --> 00:23:08,029
work back on Python 2 so we've actually

00:23:05,299 --> 00:23:11,389
been sneaking Python 3 onto your

00:23:08,029 --> 00:23:13,549
computers for a year now so how does

00:23:11,389 --> 00:23:15,379
this technique actually work this is the

00:23:13,549 --> 00:23:17,059
tool you should use let me walk through

00:23:15,379 --> 00:23:20,239
how it works so I'll give you a couple

00:23:17,059 --> 00:23:24,019
of different examples of how of how i

00:23:20,239 --> 00:23:25,609
ported a couple of sites to python 3 so

00:23:24,019 --> 00:23:27,200
briefly the outline is you'll want to

00:23:25,609 --> 00:23:29,149
choose an approach are you going to go

00:23:27,200 --> 00:23:31,309
Python 3 only or are you going to do the

00:23:29,149 --> 00:23:33,019
shared source technique you'll need to

00:23:31,309 --> 00:23:35,659
evaluate your dependencies and we've

00:23:33,019 --> 00:23:38,299
talked about this a bit at this point

00:23:35,659 --> 00:23:40,460
you've got code that you're ready you're

00:23:38,299 --> 00:23:43,129
ready to start writing so the next step

00:23:40,460 --> 00:23:45,710
is to get your tests working I hate to

00:23:43,129 --> 00:23:47,239
say it but if you don't have tests this

00:23:45,710 --> 00:23:48,769
whole this whole thing goes right out

00:23:47,239 --> 00:23:51,049
the window because the only way to

00:23:48,769 --> 00:23:52,879
really be sure that your code is going

00:23:51,049 --> 00:23:57,889
to work on both browsers to be on both

00:23:52,879 --> 00:24:02,570
browsers on both VMs is to be able to

00:23:57,889 --> 00:24:04,009
test it continuously and without a test

00:24:02,570 --> 00:24:07,629
suite it's almost impossible to sort of

00:24:04,009 --> 00:24:11,090
work on this task iteratively so a

00:24:07,629 --> 00:24:15,220
prerequisite to running code to porting

00:24:11,090 --> 00:24:17,149
code to python 3 is a good test suite

00:24:15,220 --> 00:24:18,710
usually as soon as you get the test

00:24:17,149 --> 00:24:20,629
suite running it will reveal that you

00:24:18,710 --> 00:24:22,429
have unicode issues if you've been

00:24:20,629 --> 00:24:23,850
writing Python 2 for any period of time

00:24:22,429 --> 00:24:26,549
you've internal

00:24:23,850 --> 00:24:28,590
lized Python too stupid crappy rules

00:24:26,549 --> 00:24:31,590
around unicode handling and you're doing

00:24:28,590 --> 00:24:33,150
things you shouldn't be doing your code

00:24:31,590 --> 00:24:34,860
is probably unclean and it's not your

00:24:33,150 --> 00:24:37,140
fault it's it's pythons fault for having

00:24:34,860 --> 00:24:38,340
a fundamentally broken model but what's

00:24:37,140 --> 00:24:39,419
going to happen when you get your test

00:24:38,340 --> 00:24:41,910
suite running is you're going to see all

00:24:39,419 --> 00:24:44,130
of these Unicode decode errors suddenly

00:24:41,910 --> 00:24:46,049
flooding out when you run your test

00:24:44,130 --> 00:24:48,690
suite and each of these is representing

00:24:46,049 --> 00:24:53,039
a potential production bug that you

00:24:48,690 --> 00:24:54,690
haven't hit yet so at this point you can

00:24:53,039 --> 00:24:57,630
just kind of iterate on these test

00:24:54,690 --> 00:25:00,090
failures fix them one at a time until

00:24:57,630 --> 00:25:01,530
you finally have all your tests passing

00:25:00,090 --> 00:25:03,440
and as we all know when your tests pass

00:25:01,530 --> 00:25:07,590
that means that your code works right

00:25:03,440 --> 00:25:09,480
yes I've left out the part where you

00:25:07,590 --> 00:25:13,320
like you know deploy it and do QA and

00:25:09,480 --> 00:25:16,799
all of that stuff okay so a couple of

00:25:13,320 --> 00:25:20,520
case studies the first study was a brand

00:25:16,799 --> 00:25:22,200
new website rev sis my consulting

00:25:20,520 --> 00:25:25,770
company was hired by the psf to build

00:25:22,200 --> 00:25:29,520
the new python org so this was a natural

00:25:25,770 --> 00:25:31,740
candidate to be built in Python 3 and we

00:25:29,520 --> 00:25:32,970
sort of did a brief evaluation to figure

00:25:31,740 --> 00:25:35,070
out whether we could write it in Python

00:25:32,970 --> 00:25:37,620
3 decided we could and kind of went

00:25:35,070 --> 00:25:39,270
forward writing it in Python 3 since

00:25:37,620 --> 00:25:41,400
then we've done a written a couple other

00:25:39,270 --> 00:25:45,809
sites in Python 3 but this is a good

00:25:41,400 --> 00:25:48,299
example for a couple of reasons so we

00:25:45,809 --> 00:25:51,390
only needed to be Python 3 compatible we

00:25:48,299 --> 00:25:52,980
didn't need to support Python 2 like I

00:25:51,390 --> 00:25:56,460
said earlier we weren't a hundred

00:25:52,980 --> 00:25:58,320
percent sure that we could do Python 3

00:25:56,460 --> 00:25:59,610
only we weren't sure we weren't going to

00:25:58,320 --> 00:26:01,520
run into some dependencies that we

00:25:59,610 --> 00:26:04,080
really needed to get the job done

00:26:01,520 --> 00:26:06,090
obviously the psf is willing to let us

00:26:04,080 --> 00:26:08,730
spend a little extra time because python

00:26:06,090 --> 00:26:12,210
3 is a big win for them but if Python 3

00:26:08,730 --> 00:26:15,210
represented double the the development

00:26:12,210 --> 00:26:17,340
time that probably wouldn't be worth it

00:26:15,210 --> 00:26:18,840
even for them right so there's a you

00:26:17,340 --> 00:26:20,850
know trade-off there and we needed to be

00:26:18,840 --> 00:26:22,530
reasonably confident that we could be

00:26:20,850 --> 00:26:24,150
able to get a Python 3 side out and in

00:26:22,530 --> 00:26:27,840
roughly the amount of time it would take

00:26:24,150 --> 00:26:29,730
us to do a Python to site but we didn't

00:26:27,840 --> 00:26:31,980
really sacrifice that by choosing Python

00:26:29,730 --> 00:26:33,780
3 only if we had been wrong at some

00:26:31,980 --> 00:26:35,520
point down the line it would have been

00:26:33,780 --> 00:26:36,820
you know just a couple days of work at

00:26:35,520 --> 00:26:39,850
most two

00:26:36,820 --> 00:26:42,120
back to Python 2 so we chose Python 3

00:26:39,850 --> 00:26:45,370
and specifically we chose Python 3 dot 3

00:26:42,120 --> 00:26:47,169
if you're going to be using Python 3 you

00:26:45,370 --> 00:26:48,970
want to use Python 3 3 there's really

00:26:47,169 --> 00:26:52,120
not a good reason to use an earlier

00:26:48,970 --> 00:26:54,610
version of Python 3 there's not there's

00:26:52,120 --> 00:26:56,019
not any backwards compatibility stuff

00:26:54,610 --> 00:26:57,820
there's not code that doesn't yet

00:26:56,019 --> 00:26:59,710
support Python 3 this is enough of a

00:26:57,820 --> 00:27:03,309
bleeding edge that you might as well be

00:26:59,710 --> 00:27:04,809
on the latest thing so then we sat down

00:27:03,309 --> 00:27:09,129
and thought about what our dependencies

00:27:04,809 --> 00:27:11,080
were for this site it's a lot of static

00:27:09,129 --> 00:27:13,539
ish content so we had some CMS

00:27:11,080 --> 00:27:15,519
capabilities it would have been nice to

00:27:13,539 --> 00:27:19,330
be able to use something like Django CMS

00:27:15,519 --> 00:27:21,129
or find CMS or one of the other sort of

00:27:19,330 --> 00:27:23,649
CMS packages out there just from a you

00:27:21,129 --> 00:27:26,440
know leveraging reuse category but none

00:27:23,649 --> 00:27:28,899
of those worked on Python 3 yet after

00:27:26,440 --> 00:27:31,179
sort of looking at it a little bit we

00:27:28,899 --> 00:27:33,190
decided you know our definition of CMS

00:27:31,179 --> 00:27:35,279
is pretty light we don't need a lot of

00:27:33,190 --> 00:27:37,659
the more advanced features that these

00:27:35,279 --> 00:27:40,210
that these tools and frameworks provide

00:27:37,659 --> 00:27:42,669
so we're we're okay rolling our own this

00:27:40,210 --> 00:27:45,220
will cost a little bit more but it's not

00:27:42,669 --> 00:27:46,690
going to it's not going to be that big

00:27:45,220 --> 00:27:51,490
in the life in the lifespan of the prov

00:27:46,690 --> 00:27:54,460
the project we had a moderately complex

00:27:51,490 --> 00:27:56,740
sort of user permissions authentication

00:27:54,460 --> 00:27:59,200
system and this actually ends up being a

00:27:56,740 --> 00:28:00,820
point in favor of Python 3 because it

00:27:59,200 --> 00:28:04,299
meant we couldn't use any of the

00:28:00,820 --> 00:28:07,840
out-of-the-box more advanced permission

00:28:04,299 --> 00:28:10,990
systems for for Django we had sort of

00:28:07,840 --> 00:28:13,470
very domain specific issues around the

00:28:10,990 --> 00:28:15,850
way we need to manage things like the

00:28:13,470 --> 00:28:17,919
things like the Python job board has a

00:28:15,850 --> 00:28:20,049
very specific workflow and permissions

00:28:17,919 --> 00:28:21,820
requirements around it and no existing

00:28:20,049 --> 00:28:23,230
system would have would have provided us

00:28:21,820 --> 00:28:27,279
with that so we were going to have to

00:28:23,230 --> 00:28:29,590
write something from scratch anyway we

00:28:27,279 --> 00:28:31,240
did want in the spec we had some pretty

00:28:29,590 --> 00:28:33,009
heavy integration with with social

00:28:31,240 --> 00:28:35,019
network sites one of the features of the

00:28:33,009 --> 00:28:37,029
site is that we want to kind of pull in

00:28:35,019 --> 00:28:38,379
all of all of the Python communities

00:28:37,029 --> 00:28:41,429
social activity whether that's from

00:28:38,379 --> 00:28:44,049
twitter facebook instagram pinterest

00:28:41,429 --> 00:28:46,240
whatever bring it all in you know

00:28:44,049 --> 00:28:48,490
ingested and let make the site be sort

00:28:46,240 --> 00:28:48,960
of a clearinghouse for what the Jane or

00:28:48,490 --> 00:28:51,990
the Python

00:28:48,960 --> 00:28:54,179
community is doing this was the this was

00:28:51,990 --> 00:28:57,330
sort of the biggest point of friction

00:28:54,179 --> 00:28:58,890
between whether we could use Python 3 or

00:28:57,330 --> 00:29:02,399
whether we would have to use Python 2

00:28:58,890 --> 00:29:05,820
because at the time we started none of

00:29:02,399 --> 00:29:09,090
the sort of social login tools had been

00:29:05,820 --> 00:29:10,470
ported to Python 3 yet the tool we were

00:29:09,090 --> 00:29:12,779
most familiar with at the time was

00:29:10,470 --> 00:29:15,539
Django social off but that wasn't ported

00:29:12,779 --> 00:29:18,450
and none of the other tools we evaluated

00:29:15,539 --> 00:29:21,000
were so we kind of crossed our fingers

00:29:18,450 --> 00:29:24,720
and started work on other features and

00:29:21,000 --> 00:29:27,470
started bugging people to help us port

00:29:24,720 --> 00:29:30,750
the other tools and hey it worked the

00:29:27,470 --> 00:29:33,240
maintainer of jangle auth saw me give a

00:29:30,750 --> 00:29:35,429
similar talk to this at PyCon us and

00:29:33,240 --> 00:29:38,130
went and poured a Django all off during

00:29:35,429 --> 00:29:39,840
the spring so this gives you a rough

00:29:38,130 --> 00:29:41,250
idea of how much efforts involved in

00:29:39,840 --> 00:29:43,649
porting that by the way he did in four

00:29:41,250 --> 00:29:45,570
days right it's actually not that much

00:29:43,649 --> 00:29:50,159
work so now we've now we had this taken

00:29:45,570 --> 00:29:51,480
care of and finally we knew that we

00:29:50,159 --> 00:29:54,570
didn't have really severe traffic

00:29:51,480 --> 00:29:56,669
requirements python.org is going to kind

00:29:54,570 --> 00:30:00,029
of get traffic spikes when like new

00:29:56,669 --> 00:30:02,640
releases come out when you know maybe

00:30:00,029 --> 00:30:03,809
there's a piece of news I don't know you

00:30:02,640 --> 00:30:05,279
get sort of linked up on hacker news

00:30:03,809 --> 00:30:07,320
from time to time but for the most part

00:30:05,279 --> 00:30:09,659
the traffic's is sort of a pretty dull

00:30:07,320 --> 00:30:12,179
roar this was important for us to

00:30:09,659 --> 00:30:14,059
determine because we needed to know that

00:30:12,179 --> 00:30:16,140
we could sort of deploy this thing right

00:30:14,059 --> 00:30:19,470
so we actually did a couple of

00:30:16,140 --> 00:30:20,850
experiments with with gonna corn which

00:30:19,470 --> 00:30:22,649
is how we determined the G event wasn't

00:30:20,850 --> 00:30:24,350
fully baked yet that was a shame that's

00:30:22,649 --> 00:30:27,090
the tool we know the most about scaling

00:30:24,350 --> 00:30:29,669
but we also know a lot about mod wsgi

00:30:27,090 --> 00:30:33,330
and that worked well and so we were good

00:30:29,669 --> 00:30:36,120
to go there so if you're setting out to

00:30:33,330 --> 00:30:37,230
develop a site from scratch this is this

00:30:36,120 --> 00:30:38,640
is the type of thing that you'll

00:30:37,230 --> 00:30:40,140
probably want to sit down and do to

00:30:38,640 --> 00:30:41,700
determine if you want to use Python 3

00:30:40,140 --> 00:30:43,169
you'll want to go through your rough

00:30:41,700 --> 00:30:44,399
requirements determine where your

00:30:43,169 --> 00:30:46,679
friction points are going to be and

00:30:44,399 --> 00:30:48,510
maybe spend a little bit of time all

00:30:46,679 --> 00:30:50,880
told I think we spent about a couple of

00:30:48,510 --> 00:30:53,190
days sort of experimenting and playing

00:30:50,880 --> 00:30:55,740
around in determining whether Python 3

00:30:53,190 --> 00:30:57,330
was a was an option for us so in terms

00:30:55,740 --> 00:30:59,460
of time budget you can see we've sort of

00:30:57,330 --> 00:31:01,810
already added a little extra time on top

00:30:59,460 --> 00:31:03,850
of our process just in terms of deter

00:31:01,810 --> 00:31:10,410
whether this was something we wanted to

00:31:03,850 --> 00:31:13,750
do okay next step start writing tests

00:31:10,410 --> 00:31:16,210
luckily Django discover runner works on

00:31:13,750 --> 00:31:19,330
Python 3 actually this is soon to be

00:31:16,210 --> 00:31:23,010
moot because the the test runner in

00:31:19,330 --> 00:31:25,570
Django 16 is Django discover runner are

00:31:23,010 --> 00:31:27,280
functionally the same so we didn't have

00:31:25,570 --> 00:31:31,900
to we didn't have to learn how to write

00:31:27,280 --> 00:31:34,960
tests using a different way I believe I

00:31:31,900 --> 00:31:36,460
know that both nose and PI test run on

00:31:34,960 --> 00:31:38,650
Python 3 i'm right about pi test right

00:31:36,460 --> 00:31:40,560
Alex yeah I don't know about the Django

00:31:38,650 --> 00:31:43,210
bits but I think that they do so

00:31:40,560 --> 00:31:45,610
probably whatever you normally use to

00:31:43,210 --> 00:31:48,790
write tests has already been ported if

00:31:45,610 --> 00:31:50,020
it's not the new thing in Django 16 is

00:31:48,790 --> 00:31:55,990
pretty nice you might want to give it a

00:31:50,020 --> 00:31:59,340
shot the hardest part about writing this

00:31:55,990 --> 00:32:01,900
this new site was retraining our unicode

00:31:59,340 --> 00:32:04,300
our unicode muscles and learning how to

00:32:01,900 --> 00:32:06,790
do do things sort of the Python 3 Way

00:32:04,300 --> 00:32:08,860
learning to think think like a Python 3

00:32:06,790 --> 00:32:10,390
programmer when it comes to unicode and

00:32:08,860 --> 00:32:11,970
i'll talk more about this in the second

00:32:10,390 --> 00:32:17,530
part when i talk specifically about

00:32:11,970 --> 00:32:24,100
fixing some of the bugs though i will

00:32:17,530 --> 00:32:26,050
mention one thing so the biggest thing

00:32:24,100 --> 00:32:28,780
you can do to start thinking about

00:32:26,050 --> 00:32:31,870
unicode correctly is to is to eliminate

00:32:28,780 --> 00:32:34,600
the word string from your lexicon and I

00:32:31,870 --> 00:32:37,020
know that this is really hard but if you

00:32:34,600 --> 00:32:40,390
start thinking about Unicode as having

00:32:37,020 --> 00:32:42,610
you're thinking about about string

00:32:40,390 --> 00:32:47,950
things in Python as having two different

00:32:42,610 --> 00:32:50,380
types bytes and text bites are like raw

00:32:47,950 --> 00:32:52,990
data coming over a network it might be

00:32:50,380 --> 00:32:55,870
human readable it might be gzipped it

00:32:52,990 --> 00:32:58,690
might be static you don't know it just

00:32:55,870 --> 00:33:01,150
bites they're just streams of bytes you

00:32:58,690 --> 00:33:03,970
can't really reason about you can't talk

00:33:01,150 --> 00:33:05,650
about like a name in bytes because it's

00:33:03,970 --> 00:33:08,080
just bites there's no there's no

00:33:05,650 --> 00:33:09,820
structure to it it's just bites on the

00:33:08,080 --> 00:33:12,100
other hand you also have text and text

00:33:09,820 --> 00:33:13,960
is human readable in order to be human

00:33:12,100 --> 00:33:15,130
readable it has to be readable by some

00:33:13,960 --> 00:33:18,550
human so text could

00:33:15,130 --> 00:33:21,790
in in Roman text it could be Japanese

00:33:18,550 --> 00:33:25,120
text it could be unicode snowman it

00:33:21,790 --> 00:33:28,030
could be any sort of you know human

00:33:25,120 --> 00:33:29,560
readable text that we can talk about and

00:33:28,030 --> 00:33:31,740
if you take a look at django utils

00:33:29,560 --> 00:33:34,150
encoding which is sort of the Django

00:33:31,740 --> 00:33:36,070
toolbox for dealing with encoding inside

00:33:34,150 --> 00:33:38,110
Django apps you'll notice that we don't

00:33:36,070 --> 00:33:40,870
really use the word string in there very

00:33:38,110 --> 00:33:42,910
much we tend to use bites and text quite

00:33:40,870 --> 00:33:45,430
a bit and if you start putting that in

00:33:42,910 --> 00:33:47,410
your mind now start adopting that and

00:33:45,430 --> 00:33:49,750
thinking about all your data as either

00:33:47,410 --> 00:33:52,750
bytes or as text you will be in a very

00:33:49,750 --> 00:33:54,310
good shape for working on Python 3 that

00:33:52,750 --> 00:33:56,320
was the big thing that we had to do as

00:33:54,310 --> 00:33:58,860
we started reasoning about writing this

00:33:56,320 --> 00:34:01,840
site in in Python 3 is to sort of

00:33:58,860 --> 00:34:04,720
retrain our brains to think about text

00:34:01,840 --> 00:34:08,139
in a new in the sort of new more correct

00:34:04,720 --> 00:34:10,629
python3 way so the good news is that it

00:34:08,139 --> 00:34:12,700
worked we have a site out you can see

00:34:10,629 --> 00:34:15,460
the sort of preview version at preview

00:34:12,700 --> 00:34:19,120
python org and this is going to be

00:34:15,460 --> 00:34:25,330
launching as the new python org i think

00:34:19,120 --> 00:34:28,750
in about a month we'll see however there

00:34:25,330 --> 00:34:30,730
was an additional cost here i should

00:34:28,750 --> 00:34:32,379
stress not to the not to the psf we did

00:34:30,730 --> 00:34:34,629
this on a fixed bid basis we did not

00:34:32,379 --> 00:34:38,169
take your money and and use it to work

00:34:34,629 --> 00:34:41,200
on Python 3 but for us there was an

00:34:38,169 --> 00:34:43,210
additional cost we estimate this project

00:34:41,200 --> 00:34:45,879
probably cost about cost us about twenty

00:34:43,210 --> 00:34:47,200
percent more in terms of time and

00:34:45,879 --> 00:34:49,770
actually in terms of a little bit of

00:34:47,200 --> 00:34:52,480
money we did pay a couple of people to

00:34:49,770 --> 00:34:53,980
get a cup sort of find the time to port

00:34:52,480 --> 00:34:55,300
things to python 3 so we show that a

00:34:53,980 --> 00:34:59,380
little bit of money but mostly in terms

00:34:55,300 --> 00:35:00,880
of time i'll bet if we did if we started

00:34:59,380 --> 00:35:02,800
now that twenty percent number would be

00:35:00,880 --> 00:35:06,700
even lower maybe ten percent fifteen

00:35:02,800 --> 00:35:08,140
percent so if you're a you know if

00:35:06,700 --> 00:35:10,510
you're a consultancy that has to really

00:35:08,140 --> 00:35:13,750
watch the bottom line or if you're a

00:35:10,510 --> 00:35:15,520
business unit with limited resources you

00:35:13,750 --> 00:35:17,080
know this twenty percent could be a

00:35:15,520 --> 00:35:18,460
deal-breaker for you and I think it's

00:35:17,080 --> 00:35:20,440
really important to acknowledge that

00:35:18,460 --> 00:35:22,870
there still is an additional cost to

00:35:20,440 --> 00:35:25,780
python 3 I think it's good that that

00:35:22,870 --> 00:35:28,090
cost isn't bigger if it had been fifty

00:35:25,780 --> 00:35:28,900
percent eighty percent a hundred percent

00:35:28,090 --> 00:35:30,700
we

00:35:28,900 --> 00:35:32,740
probably would have scrapped it but at

00:35:30,700 --> 00:35:37,180
the ten to twenty percent range I think

00:35:32,740 --> 00:35:41,799
it's worth it in terms of the payback in

00:35:37,180 --> 00:35:43,839
in instability and in sort of ease of

00:35:41,799 --> 00:35:46,089
maintenance and sort of unpleasantness

00:35:43,839 --> 00:35:49,450
you know that twenty percent up front

00:35:46,089 --> 00:35:51,160
costs represents a savings on the back

00:35:49,450 --> 00:35:52,809
end of all those Unicode issues that

00:35:51,160 --> 00:35:56,049
show up in production once your site is

00:35:52,809 --> 00:35:57,670
lives so there's probably a cost savings

00:35:56,049 --> 00:36:01,869
over the life span of the project that's

00:35:57,670 --> 00:36:04,150
that's not quantifiable yet so I think

00:36:01,869 --> 00:36:06,069
it's probably there's probably a

00:36:04,150 --> 00:36:08,920
legitimate business case to be made that

00:36:06,069 --> 00:36:11,710
starting with Python 3 is a pretty good

00:36:08,920 --> 00:36:13,390
thing to do or at least a wash but it's

00:36:11,710 --> 00:36:16,510
worth acknowledging that there is going

00:36:13,390 --> 00:36:18,579
to be an additional upfront expenditure

00:36:16,510 --> 00:36:25,539
in terms of time or resources to get a

00:36:18,579 --> 00:36:27,130
site written in Python 3 okay so the

00:36:25,539 --> 00:36:30,220
second case that I want to look at is

00:36:27,130 --> 00:36:32,319
porting a single app we did a lot of

00:36:30,220 --> 00:36:33,849
these and a lot of people in the

00:36:32,319 --> 00:36:37,180
community have been doing this over the

00:36:33,849 --> 00:36:40,950
last six months or so and this is where

00:36:37,180 --> 00:36:43,960
the real effort is for porting your

00:36:40,950 --> 00:36:46,809
porting your code reporting sort of the

00:36:43,960 --> 00:36:47,740
community code so the particular example

00:36:46,809 --> 00:36:50,109
I'm going to look at is an app called

00:36:47,740 --> 00:36:51,730
Jango site tree that we used for this

00:36:50,109 --> 00:36:53,859
site actually the work wasn't done by me

00:36:51,730 --> 00:36:56,279
was done by one of my colleagues Jeff

00:36:53,859 --> 00:36:59,349
Triplette and you can see the actual

00:36:56,279 --> 00:37:02,170
commit that ported the app to python 3

00:36:59,349 --> 00:37:04,599
at that link and yes I said commit there

00:37:02,170 --> 00:37:05,890
was one so that's going to give you a

00:37:04,599 --> 00:37:09,789
hint right off the bat that it's a

00:37:05,890 --> 00:37:12,549
reasonably small amount of work this app

00:37:09,789 --> 00:37:14,770
by the way it's like a basically not for

00:37:12,549 --> 00:37:17,680
managing a navigation tree on a website

00:37:14,770 --> 00:37:19,539
it's it's sort of hierarchical

00:37:17,680 --> 00:37:21,700
navigation you have a navbar and you

00:37:19,539 --> 00:37:23,170
have each bar has menus and submenus and

00:37:21,700 --> 00:37:24,670
stuff and it's just a way of exposing

00:37:23,170 --> 00:37:27,579
that sort of thing through the admin so

00:37:24,670 --> 00:37:30,309
not particularly complex sort of a small

00:37:27,579 --> 00:37:32,230
a small component but there's some

00:37:30,309 --> 00:37:36,369
complexity to it and it was a little you

00:37:32,230 --> 00:37:39,369
know it was a little interesting so step

00:37:36,369 --> 00:37:41,730
one was to choose an approach we knew we

00:37:39,369 --> 00:37:44,070
wanted to use shared source

00:37:41,730 --> 00:37:46,380
and based on what site tree already

00:37:44,070 --> 00:37:48,780
supported we wanted to add python3

00:37:46,380 --> 00:37:50,940
support but not take away support for

00:37:48,780 --> 00:37:53,160
existing code so what that meant what

00:37:50,940 --> 00:37:56,790
meant was we wanted to support Python 26

00:37:53,160 --> 00:37:59,490
or greater so 26 and 27 and also Python

00:37:56,790 --> 00:38:03,420
33 we decided we didn't need to support

00:37:59,490 --> 00:38:05,580
31 30 31 or 32 because kind of nobody is

00:38:03,420 --> 00:38:08,700
using those yet if you're using Python 3

00:38:05,580 --> 00:38:11,880
you're probably using 33 and we decided

00:38:08,700 --> 00:38:13,590
we wanted to support Django 1.4 this is

00:38:11,880 --> 00:38:15,510
kind of interesting jangle 1.4 doesn't

00:38:13,590 --> 00:38:19,890
support Python 3 so we have a matrix

00:38:15,510 --> 00:38:23,609
where we support Python 26 and 27 on

00:38:19,890 --> 00:38:25,320
django 14 and 15 and then python3 only

00:38:23,609 --> 00:38:28,220
with Django 15 so there's a sort of

00:38:25,320 --> 00:38:30,720
complicated build matrix right there

00:38:28,220 --> 00:38:33,630
this is a reasonable minimum if you're

00:38:30,720 --> 00:38:35,850
looking for what your what your support

00:38:33,630 --> 00:38:38,070
matrix should look like this is this is

00:38:35,850 --> 00:38:40,440
probably the lowest you should go if you

00:38:38,070 --> 00:38:42,510
try to support Python one or Django 13

00:38:40,440 --> 00:38:44,160
it probably won't work because the

00:38:42,510 --> 00:38:46,830
utilities that I'm going to talk about

00:38:44,160 --> 00:38:49,140
aren't there yet if you try to support

00:38:46,830 --> 00:38:54,750
Python 25 it probably won't work because

00:38:49,140 --> 00:38:56,430
of some syntax issues depending on where

00:38:54,750 --> 00:38:58,350
you are in terms of your community and

00:38:56,430 --> 00:39:01,950
how many people are using this app you

00:38:58,350 --> 00:39:04,740
might want to consider just 27 and 33

00:39:01,950 --> 00:39:06,780
and just Django 15 and or just Django 15

00:39:04,740 --> 00:39:09,480
if you if you do that this will be very

00:39:06,780 --> 00:39:12,090
easy adding in 26 adds a little bit of

00:39:09,480 --> 00:39:14,220
extra work adding in 14 adds a little

00:39:12,090 --> 00:39:18,270
bit of extra work so if you're looking

00:39:14,220 --> 00:39:20,640
for the easiest approach 27 33 15 is

00:39:18,270 --> 00:39:22,920
your kind of easy baseline but you can

00:39:20,640 --> 00:39:26,760
go back to 26 and 14 with not that much

00:39:22,920 --> 00:39:28,770
additional effort we didn't have any

00:39:26,760 --> 00:39:30,410
dependencies if your app does have

00:39:28,770 --> 00:39:34,140
dependencies you kind of gotta like

00:39:30,410 --> 00:39:35,609
unwind that dependency chain this

00:39:34,140 --> 00:39:37,200
happened to me with one app i sat down

00:39:35,609 --> 00:39:39,900
to try to port it discovered it had

00:39:37,200 --> 00:39:41,580
unported dependencies i ported those

00:39:39,900 --> 00:39:44,250
dependencies and then I kind of never

00:39:41,580 --> 00:39:45,750
popped my stack and and that fell apart

00:39:44,250 --> 00:39:49,190
I think I'm just going to go through and

00:39:45,750 --> 00:39:49,190
take questions after

00:39:51,500 --> 00:40:00,210
running tests you should check out tox

00:39:56,810 --> 00:40:03,330
tox basically lets you run tests under

00:40:00,210 --> 00:40:04,680
multiple environments so it's a really

00:40:03,330 --> 00:40:09,270
perfect way to make sure that you're

00:40:04,680 --> 00:40:11,940
running tests against both Python 26

00:40:09,270 --> 00:40:13,380
Python 27 Django 15 Django 14 and

00:40:11,940 --> 00:40:15,180
basically you write a little file that

00:40:13,380 --> 00:40:16,620
looks like this you specify your

00:40:15,180 --> 00:40:18,420
different environments and talks

00:40:16,620 --> 00:40:20,340
automates running tests against those

00:40:18,420 --> 00:40:23,240
different environments so this is the

00:40:20,340 --> 00:40:28,650
best way to make sure that your tests

00:40:23,240 --> 00:40:30,120
pass under multiple different things so

00:40:28,650 --> 00:40:32,040
then you have to iterate on syntax

00:40:30,120 --> 00:40:33,270
changes the first set of failures you'll

00:40:32,040 --> 00:40:39,170
see from your test suite are going to be

00:40:33,270 --> 00:40:41,340
about syntax and there's a couple of

00:40:39,170 --> 00:40:42,930
there's a couple of differences the

00:40:41,340 --> 00:40:44,760
biggest one that you'll probably get

00:40:42,930 --> 00:40:46,800
bitten by as the damn print syntax

00:40:44,760 --> 00:40:48,630
changing I still get this wrong print

00:40:46,800 --> 00:40:51,060
becomes a function this is a good thing

00:40:48,630 --> 00:40:53,040
but your muscle memory is print space

00:40:51,060 --> 00:40:54,840
and you need to retrain it to print

00:40:53,040 --> 00:40:57,110
parentheses and that will be that will

00:40:54,840 --> 00:40:59,190
be difficult or at least it was for me

00:40:57,110 --> 00:41:01,200
there are some other changes in the way

00:40:59,190 --> 00:41:03,510
you specify meta classes the way

00:41:01,200 --> 00:41:05,430
exceptions are raised the way exceptions

00:41:03,510 --> 00:41:07,560
are caught they're all summed up in the

00:41:05,430 --> 00:41:09,990
what's new and python 3 docs these are

00:41:07,560 --> 00:41:11,610
reasonably easy these can be done almost

00:41:09,990 --> 00:41:13,350
be done by a trained monkey they're just

00:41:11,610 --> 00:41:15,390
sort of syntactical changes they're not

00:41:13,350 --> 00:41:16,830
particularly hard they'll what you need

00:41:15,390 --> 00:41:19,200
you'll need to get them done even just

00:41:16,830 --> 00:41:21,780
to get your test suite running at this

00:41:19,200 --> 00:41:23,960
point your test suite will run and now

00:41:21,780 --> 00:41:27,690
you'll be seeing lots of Unicode errors

00:41:23,960 --> 00:41:30,450
so once again Django utils encoding you

00:41:27,690 --> 00:41:34,560
may have used this already in Python 2

00:41:30,450 --> 00:41:36,360
to deal with unicode issues it does some

00:41:34,560 --> 00:41:37,800
kind of cool magic stuff to make sure

00:41:36,360 --> 00:41:39,660
that it does the right thing both on

00:41:37,800 --> 00:41:42,210
Python 2 and Python 3 and so this is

00:41:39,660 --> 00:41:44,670
where you'll find tools to encode to the

00:41:42,210 --> 00:41:47,750
default encoding decode from the default

00:41:44,670 --> 00:41:49,920
encoding etc things along those lines

00:41:47,750 --> 00:41:53,760
there's a little caveat about dealing

00:41:49,920 --> 00:41:55,500
with models and Unicode in Python 3 the

00:41:53,760 --> 00:41:58,350
double underscore Unicode method goes

00:41:55,500 --> 00:42:02,370
away and it gets renamed to STR which

00:41:58,350 --> 00:42:05,040
really should be text but and so you

00:42:02,370 --> 00:42:07,890
can't there's no way to write a model

00:42:05,040 --> 00:42:11,430
in plain vanilla syntax it supports both

00:42:07,890 --> 00:42:13,500
Python 2 and Python 3 so Django adds

00:42:11,430 --> 00:42:16,530
this decorator this ugly class decorator

00:42:13,500 --> 00:42:18,810
python to unicode compat you write an

00:42:16,530 --> 00:42:20,400
SDR method and if it's on Python to it

00:42:18,810 --> 00:42:23,250
magically changes it to be a Unicode

00:42:20,400 --> 00:42:25,770
method so if you want to write code that

00:42:23,250 --> 00:42:30,320
works on both Python 2 and Python 3 you

00:42:25,770 --> 00:42:33,270
need this Unicode compat trick so now

00:42:30,320 --> 00:42:35,550
we've got our Unicode stuff working we

00:42:33,270 --> 00:42:38,460
we've got our tests running we've still

00:42:35,550 --> 00:42:39,870
got some failures and at this point I

00:42:38,460 --> 00:42:42,150
think we had maybe a half dozen or so

00:42:39,870 --> 00:42:43,770
failures left on this app and all of

00:42:42,150 --> 00:42:45,750
those failures come down to differences

00:42:43,770 --> 00:42:47,820
between the way Python 2 and Python 3

00:42:45,750 --> 00:42:49,980
does things and for that there's an app

00:42:47,820 --> 00:42:52,050
there's a package called 6 which also

00:42:49,980 --> 00:42:54,600
exists as Django utils 60 that it's

00:42:52,050 --> 00:42:56,640
available whether or not you have

00:42:54,600 --> 00:43:01,140
working dependencies weapon up Python as

00:42:56,640 --> 00:43:02,790
working dependencies so six papers over

00:43:01,140 --> 00:43:05,100
stuff like there are different ways in

00:43:02,790 --> 00:43:07,320
Python 2 and in Python 3 of specifying

00:43:05,100 --> 00:43:09,510
meta classes and Python to you say

00:43:07,320 --> 00:43:12,180
metaclass equals M when the double

00:43:09,510 --> 00:43:14,850
underscore syntax in Python 3 us a

00:43:12,180 --> 00:43:17,340
metaclass equals so there's no way to

00:43:14,850 --> 00:43:19,860
write code in both of these syntaxes

00:43:17,340 --> 00:43:21,720
this doesn't work on Python to that

00:43:19,860 --> 00:43:26,370
doesn't work on Python 3 there's no way

00:43:21,720 --> 00:43:29,520
to reconcile it 6 provides this six dot

00:43:26,370 --> 00:43:30,870
with metaclass which does the stuff that

00:43:29,520 --> 00:43:34,770
you want to do don't look at how this

00:43:30,870 --> 00:43:36,630
works it's really scary but it basically

00:43:34,770 --> 00:43:39,330
may it lets you write code that works on

00:43:36,630 --> 00:43:43,770
both Python 2 in Python 3 at the cost of

00:43:39,330 --> 00:43:46,380
being a little bit confusing you guys

00:43:43,770 --> 00:43:51,330
need to sync your clocks I'm going with

00:43:46,380 --> 00:43:54,230
rust and see gives me more time 6 gives

00:43:51,330 --> 00:43:57,330
you utils to paper over the fact that

00:43:54,230 --> 00:43:59,550
pythons tues str becomes called bytes

00:43:57,330 --> 00:44:02,550
and then Unicode becomes called str and

00:43:59,550 --> 00:44:04,650
then your head explodes so 6 gives you

00:44:02,550 --> 00:44:06,990
binary type and text type to let you

00:44:04,650 --> 00:44:08,520
reason about types of things and finally

00:44:06,990 --> 00:44:11,400
there's like a little escape hatch if

00:44:08,520 --> 00:44:13,170
six dot Python 3 if you really can't

00:44:11,400 --> 00:44:15,630
write code that works on both Python 2

00:44:13,170 --> 00:44:17,640
and Python 3 there's this escape hatch

00:44:15,630 --> 00:44:18,540
if i'm running a python 3 do x if i'm

00:44:17,640 --> 00:44:21,330
running a Python 2

00:44:18,540 --> 00:44:24,660
do why there's a variety of other things

00:44:21,330 --> 00:44:26,580
in this sixth module that I'm not really

00:44:24,660 --> 00:44:28,500
going to go into depth on this is just

00:44:26,580 --> 00:44:33,000
meant as a survey but if you want more

00:44:28,500 --> 00:44:35,370
info you can find it here at our porting

00:44:33,000 --> 00:44:37,110
to Python 3 documentation we've got a

00:44:35,370 --> 00:44:39,960
guide about how to port your stuff to

00:44:37,110 --> 00:44:42,030
Python 3 written as we ported to Python

00:44:39,960 --> 00:44:43,710
3 and updated as we started porting apps

00:44:42,030 --> 00:44:46,500
and it's sort of your best place to

00:44:43,710 --> 00:44:50,970
start for more detailed documentation

00:44:46,500 --> 00:44:53,850
about how to move your stuff so at PyCon

00:44:50,970 --> 00:44:58,200
a few years ago somebody asked gido the

00:44:53,850 --> 00:45:01,410
creator of Python basically for a status

00:44:58,200 --> 00:45:04,380
report on on Python 3 and what gido said

00:45:01,410 --> 00:45:07,560
was so you know we put out Python 3 and

00:45:04,380 --> 00:45:09,180
then what happened was different

00:45:07,560 --> 00:45:10,740
different people kind of had to port

00:45:09,180 --> 00:45:13,200
their stuff and so we've we've entered

00:45:10,740 --> 00:45:15,960
this world where everyone kind of points

00:45:13,200 --> 00:45:18,180
at who the person the people who are

00:45:15,960 --> 00:45:20,040
holding up moving to Python 3 right we

00:45:18,180 --> 00:45:22,110
all point so for a while in the web

00:45:20,040 --> 00:45:25,080
world we were all pointing at wsgi we

00:45:22,110 --> 00:45:27,060
didn't have working wsgi for Python 3 so

00:45:25,080 --> 00:45:28,320
we couldn't do web stuff and then that

00:45:27,060 --> 00:45:30,090
got fixed and then we didn't have

00:45:28,320 --> 00:45:32,040
database drivers we all pointed to the

00:45:30,090 --> 00:45:34,200
database driver people and then that got

00:45:32,040 --> 00:45:37,500
fixed and then everyone started pointing

00:45:34,200 --> 00:45:40,590
at frameworks right so we did it we did

00:45:37,500 --> 00:45:43,140
our job we ported to Python 3 and now

00:45:40,590 --> 00:45:45,900
I'm pointing at you now it's your turn

00:45:43,140 --> 00:45:47,790
now in order to move to Python 3 we need

00:45:45,900 --> 00:45:49,440
to be able to we need the third party

00:45:47,790 --> 00:45:51,360
community to come along with us we need

00:45:49,440 --> 00:45:54,600
haystack working we need tasty pie

00:45:51,360 --> 00:45:56,610
working we need the Django H store

00:45:54,600 --> 00:45:59,720
extensions working we need all of these

00:45:56,610 --> 00:46:02,610
really awesome third party packages that

00:45:59,720 --> 00:46:07,260
we rely on to get our job done we need

00:46:02,610 --> 00:46:10,620
fine CMS we need goes on and on and on

00:46:07,260 --> 00:46:12,030
the list is long it's not that hard most

00:46:10,620 --> 00:46:14,160
of the time these things take less than

00:46:12,030 --> 00:46:15,330
a week even if you're not the maintainer

00:46:14,160 --> 00:46:18,480
of one of these packages you can

00:46:15,330 --> 00:46:21,180
probably have a pull request done by the

00:46:18,480 --> 00:46:22,590
end of by the end of Pike on a you we've

00:46:21,180 --> 00:46:25,320
got some sprints here there are people

00:46:22,590 --> 00:46:26,850
here who know how to do that this is not

00:46:25,320 --> 00:46:30,300
an intractable problem this is a

00:46:26,850 --> 00:46:32,069
supremely paralyzed herbal problem if we

00:46:30,300 --> 00:46:35,400
all focus on this problem

00:46:32,069 --> 00:46:37,259
for the next three to six months most of

00:46:35,400 --> 00:46:40,109
the things we use are going to be ready

00:46:37,259 --> 00:46:42,119
for us on Python 3 we're there it's now

00:46:40,109 --> 00:46:45,829
your turn so please help me make this

00:46:42,119 --> 00:46:45,829
happen thanks a lot

00:46:51,500 --> 00:46:55,310

YouTube URL: https://www.youtube.com/watch?v=xNZ4OVO2Z_E


