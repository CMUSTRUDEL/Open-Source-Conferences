Title: A state of REST.
Publication date: 2013-07-12
Playlist: Djangocon AU 2013 (Miniconf)
Description: 
	Curtis Maloney
http://2013.pycon-au.org/schedule/30094/view_talk
In the Django world there are currently two major REST API libraries, with a new one starting to take hold.

But how do you choose?

In this talk I plan to give details on how these three apps (TastyPie, Django REST Framework, and django-nap) differ, as well as overlap.
PyCon Australia is the national conference for users of the Python Programming Language. In July 2013, we're returning to Hobart, bringing together students, en
Captions: 
	00:00:00,640 --> 00:00:06,160
uh so the

00:00:03,120 --> 00:00:09,599
last talk for this session is by curtis

00:00:06,160 --> 00:00:12,880
maloney he fell in love with pyson

00:00:09,599 --> 00:00:17,279
back at version 1.5

00:00:12,880 --> 00:00:22,000
and apparently never looked back and

00:00:17,279 --> 00:00:22,640
he's on a free note in the django

00:00:22,000 --> 00:00:25,199
channel

00:00:22,640 --> 00:00:27,359
apparently not just as a single person

00:00:25,199 --> 00:00:30,640
but

00:00:27,359 --> 00:00:32,160
rumors say a bunch of people spread

00:00:30,640 --> 00:00:35,760
across the whole world

00:00:32,160 --> 00:00:37,920
so he's doing good there and he will

00:00:35,760 --> 00:00:39,280
tell us about the current state of the

00:00:37,920 --> 00:00:42,559
django

00:00:39,280 --> 00:00:46,079
rest framework ecosystem

00:00:42,559 --> 00:00:46,079
give him a warm welcome please

00:00:50,239 --> 00:00:54,079
i'm going to start by apologizing for

00:00:52,640 --> 00:00:56,960
the very rough format of this

00:00:54,079 --> 00:00:58,000
i was kind of pouring in as a gap filler

00:00:56,960 --> 00:01:01,280
but i did have more

00:00:58,000 --> 00:01:02,879
notice than some people it seems

00:01:01,280 --> 00:01:04,720
can i have a quick show of hands of

00:01:02,879 --> 00:01:06,400
anyone here who actually does hang out

00:01:04,720 --> 00:01:10,400
on the django channel

00:01:06,400 --> 00:01:12,720
on freenode you're all missing out

00:01:10,400 --> 00:01:14,240
you really are no lots of the core

00:01:12,720 --> 00:01:15,759
developers hang out there lots of really

00:01:14,240 --> 00:01:16,799
experienced people and it's a great part

00:01:15,759 --> 00:01:21,119
of the community that just

00:01:16,799 --> 00:01:22,799
loves to help out um all right

00:01:21,119 --> 00:01:25,119
first truth about rest frameworks we

00:01:22,799 --> 00:01:27,680
don't really have any

00:01:25,119 --> 00:01:28,799
um everybody knows about tasty pie i'm

00:01:27,680 --> 00:01:29,520
sure you've heard of django rest

00:01:28,799 --> 00:01:32,640
framework but

00:01:29,520 --> 00:01:35,040
uh when it comes down to pure rest

00:01:32,640 --> 00:01:36,479
they're not but they are really useful

00:01:35,040 --> 00:01:37,439
and they do really save you a lot of

00:01:36,479 --> 00:01:41,360
time

00:01:37,439 --> 00:01:43,119
so oops this is me

00:01:41,360 --> 00:01:46,159
i started using django pretty much about

00:01:43,119 --> 00:01:46,159
the time it came out

00:01:47,520 --> 00:01:51,040
it completely blew away a project i was

00:01:49,439 --> 00:01:52,799
working on at the time which is kind of

00:01:51,040 --> 00:01:55,680
developing an integrated orm

00:01:52,799 --> 00:01:57,439
and web app construction framework and

00:01:55,680 --> 00:02:00,079
we saw django and just went

00:01:57,439 --> 00:02:02,320
we've been wasting our time so we

00:02:00,079 --> 00:02:04,240
switched over and started using it

00:02:02,320 --> 00:02:05,759
more recently i've given back to the

00:02:04,240 --> 00:02:07,520
community in a couple of tools one is

00:02:05,759 --> 00:02:11,360
django nap which is my own

00:02:07,520 --> 00:02:13,040
api tool so full exposure here

00:02:11,360 --> 00:02:14,560
that's mine i'm putting it in here

00:02:13,040 --> 00:02:17,040
because i think it's worthwhile for the

00:02:14,560 --> 00:02:19,200
comparison more than anything else

00:02:17,040 --> 00:02:20,480
i've also recently released django rated

00:02:19,200 --> 00:02:22,160
which is a rate limiting tool

00:02:20,480 --> 00:02:24,000
could be very handy and that's actually

00:02:22,160 --> 00:02:26,319
part of the talk as well

00:02:24,000 --> 00:02:27,440
probably the most important thing i do

00:02:26,319 --> 00:02:29,680
most of my time

00:02:27,440 --> 00:02:30,560
i've spent most of my work through

00:02:29,680 --> 00:02:33,360
common code

00:02:30,560 --> 00:02:36,080
working on the kogan website has anyone

00:02:33,360 --> 00:02:37,760
been to the kogan website

00:02:36,080 --> 00:02:41,040
that's our fault did anybody hear about

00:02:37,760 --> 00:02:41,040
the ie7 tax

00:02:41,280 --> 00:02:47,200
we we enjoyed writing that a lot more

00:02:43,920 --> 00:02:49,280
than you enjoyed reading about it

00:02:47,200 --> 00:02:51,200
we got to do that they came in they said

00:02:49,280 --> 00:02:52,319
please do this and we went you bet we'll

00:02:51,200 --> 00:02:53,760
stay

00:02:52,319 --> 00:02:55,840
late night doesn't matter we'll do it

00:02:53,760 --> 00:02:57,599
come on let's go

00:02:55,840 --> 00:03:00,879
um and there was a bug in that that

00:02:57,599 --> 00:03:00,879
microsoft found ironically

00:03:00,959 --> 00:03:05,200
so we fixed it did another release and

00:03:02,640 --> 00:03:06,640
started taxing people

00:03:05,200 --> 00:03:10,080
that's the bit i always found strangers

00:03:06,640 --> 00:03:10,080
people actually paid the tax

00:03:10,800 --> 00:03:14,959
i'm going to be comparing three of the

00:03:12,640 --> 00:03:15,599
major api frameworks not rest frameworks

00:03:14,959 --> 00:03:18,239
although they'll

00:03:15,599 --> 00:03:19,360
all call themselves that they're api

00:03:18,239 --> 00:03:21,599
frameworks because really they're

00:03:19,360 --> 00:03:23,760
building rpc frameworks

00:03:21,599 --> 00:03:26,640
um there's tasty pi which is version

00:03:23,760 --> 00:03:28,159
nine 0.9.16 now and that's been around

00:03:26,640 --> 00:03:28,720
for quite a while it's the oldest one

00:03:28,159 --> 00:03:32,080
that's still

00:03:28,720 --> 00:03:34,560
being developed and there's about 2 100

00:03:32,080 --> 00:03:35,519
people following it on github so it's

00:03:34,560 --> 00:03:40,000
pretty popular

00:03:35,519 --> 00:03:41,680
and how many people here use tasty pie

00:03:40,000 --> 00:03:43,760
there's quite a few of you not

00:03:41,680 --> 00:03:45,440
surprising why because it works you drop

00:03:43,760 --> 00:03:47,200
it in bang you've got an api

00:03:45,440 --> 00:03:49,440
it doesn't take much and it has

00:03:47,200 --> 00:03:50,080
everything all the features you think

00:03:49,440 --> 00:03:51,760
about and

00:03:50,080 --> 00:03:53,439
all the features that that your manager

00:03:51,760 --> 00:03:55,680
is going to ask you to tick the boxes on

00:03:53,439 --> 00:03:56,480
it's got it's got some lurking horrors

00:03:55,680 --> 00:03:59,200
as well

00:03:56,480 --> 00:04:00,799
django rest framework not well not long

00:03:59,200 --> 00:04:02,159
ago went and overhauled themselves with

00:04:00,799 --> 00:04:03,840
version 2.0

00:04:02,159 --> 00:04:06,159
and that was a big change now they've

00:04:03,840 --> 00:04:09,439
got 2.3

00:04:06,159 --> 00:04:10,000
um and they're based on the idea of a

00:04:09,439 --> 00:04:12,400
big

00:04:10,000 --> 00:04:14,319
more of a here is a serializer class for

00:04:12,400 --> 00:04:15,599
turning my data to and from a flattened

00:04:14,319 --> 00:04:17,840
format that i can actually

00:04:15,599 --> 00:04:19,519
hand off over the wire and here's a

00:04:17,840 --> 00:04:20,400
bunch of class-based views that you can

00:04:19,519 --> 00:04:24,639
build your

00:04:20,400 --> 00:04:26,080
api from very different to tasty pi

00:04:24,639 --> 00:04:28,320
and then there's my own little nap which

00:04:26,080 --> 00:04:30,639
was basically built on the idea of tasty

00:04:28,320 --> 00:04:31,440
pie was too big and slow and clumsy for

00:04:30,639 --> 00:04:33,600
what we were doing

00:04:31,440 --> 00:04:36,400
it really was slow as the last person

00:04:33,600 --> 00:04:39,360
said the serializer takes a lot of time

00:04:36,400 --> 00:04:39,680
we found it took too much time and i had

00:04:39,360 --> 00:04:41,680
this

00:04:39,680 --> 00:04:43,520
sort of half-assed lightweight mini

00:04:41,680 --> 00:04:46,560
serializer for cases where we needed to

00:04:43,520 --> 00:04:49,600
serialize but not do a whole api

00:04:46,560 --> 00:04:51,040
and sort of i built that up plugged in

00:04:49,600 --> 00:04:53,199
the publisher model that i had sitting

00:04:51,040 --> 00:04:56,400
around from a project few years ago and

00:04:53,199 --> 00:04:58,960
now we've completely removed tasty pie

00:04:56,400 --> 00:04:59,919
and supplanted it with nap and we're not

00:04:58,960 --> 00:05:01,360
looking back

00:04:59,919 --> 00:05:03,520
as you can see from the little numbers

00:05:01,360 --> 00:05:05,840
on the end it doesn't quite rate as much

00:05:03,520 --> 00:05:08,240
interest as the other two projects but

00:05:05,840 --> 00:05:09,280
it's young times these are the main

00:05:08,240 --> 00:05:10,479
features

00:05:09,280 --> 00:05:11,919
most people are really going to be

00:05:10,479 --> 00:05:14,800
interested in when looking at one of

00:05:11,919 --> 00:05:16,560
these api frameworks

00:05:14,800 --> 00:05:18,560
i think it's all pretty obvious what

00:05:16,560 --> 00:05:20,800
they are except for maybe shapes

00:05:18,560 --> 00:05:22,400
shapes is basically sending your data

00:05:20,800 --> 00:05:24,000
different formats different

00:05:22,400 --> 00:05:25,440
number of fields different shapes of

00:05:24,000 --> 00:05:28,800
data depending on

00:05:25,440 --> 00:05:30,720
which part of the api you're calling

00:05:28,800 --> 00:05:33,039
um rate limiting obviously you all know

00:05:30,720 --> 00:05:35,520
we need that filtering api versioning

00:05:33,039 --> 00:05:36,880
and use in views at the bottom there is

00:05:35,520 --> 00:05:38,639
when you want to try and use the

00:05:36,880 --> 00:05:40,080
serialization formats and all the rest

00:05:38,639 --> 00:05:40,560
of the wonderful things that the api has

00:05:40,080 --> 00:05:42,960
given you

00:05:40,560 --> 00:05:44,160
in your own views not in the api views

00:05:42,960 --> 00:05:46,639
so i'm going to try and address all of

00:05:44,160 --> 00:05:49,600
these for each of these functions

00:05:46,639 --> 00:05:50,720
authentication is basically who are you

00:05:49,600 --> 00:05:52,240
surprisingly

00:05:50,720 --> 00:05:54,000
large number of people get this confused

00:05:52,240 --> 00:05:56,800
with authorization

00:05:54,000 --> 00:05:57,759
that comes later tasty pie has a nice

00:05:56,800 --> 00:06:00,000
big selection

00:05:57,759 --> 00:06:01,840
you can get http basic and digest

00:06:00,000 --> 00:06:04,560
support with all the little caveats for

00:06:01,840 --> 00:06:06,479
if you're using mod wsgi

00:06:04,560 --> 00:06:08,240
api key they've got their own api key

00:06:06,479 --> 00:06:10,080
implementation so you can go and ask the

00:06:08,240 --> 00:06:13,120
key and pass it along

00:06:10,080 --> 00:06:14,639
normal django authorization oauth 1.0 a

00:06:13,120 --> 00:06:17,520
which is the one we all know is good

00:06:14,639 --> 00:06:19,919
enough and not completely broken

00:06:17,520 --> 00:06:20,960
and then good hooks for plugging in your

00:06:19,919 --> 00:06:25,280
own authorization

00:06:20,960 --> 00:06:27,199
or authentication it's not hard at all

00:06:25,280 --> 00:06:29,520
django rest framework pretty much the

00:06:27,199 --> 00:06:33,199
same selection but it does have oauth 2

00:06:29,520 --> 00:06:34,720
but well i don't know how many people

00:06:33,199 --> 00:06:38,639
have seen the oauth 2

00:06:34,720 --> 00:06:40,479
video yeah very educational

00:06:38,639 --> 00:06:43,520
and it's why i try to stay away from

00:06:40,479 --> 00:06:48,240
oauth 2. they can do http digest but you

00:06:43,520 --> 00:06:50,880
need an extra parties tool to do that um

00:06:48,240 --> 00:06:51,520
nap has none of that because it's not

00:06:50,880 --> 00:06:53,680
not

00:06:51,520 --> 00:06:55,680
not an app's place to do that it's there

00:06:53,680 --> 00:06:57,440
to take most of the drudge work out of

00:06:55,680 --> 00:06:59,840
getting an api over the line

00:06:57,440 --> 00:07:01,440
you've got authentication stuff you

00:06:59,840 --> 00:07:03,840
already have all those tools you do it

00:07:01,440 --> 00:07:03,840
your way

00:07:04,800 --> 00:07:09,599
authorization may i do this am i allowed

00:07:07,919 --> 00:07:12,639
to go and ask for this data or change

00:07:09,599 --> 00:07:12,639
that data or whatever

00:07:12,720 --> 00:07:16,080
in tasty pi this is fixed authorization

00:07:15,520 --> 00:07:19,120
provider

00:07:16,080 --> 00:07:22,400
interface it basically gives you crud

00:07:19,120 --> 00:07:24,800
and list and detail that's your hooks

00:07:22,400 --> 00:07:28,080
that's all you can do

00:07:24,800 --> 00:07:32,000
which in theory in a pure rest sense

00:07:28,080 --> 00:07:33,280
is all you need django rest framework on

00:07:32,000 --> 00:07:35,919
the other hand you have

00:07:33,280 --> 00:07:37,199
a global default or you can share some

00:07:35,919 --> 00:07:39,520
or you can change it per

00:07:37,199 --> 00:07:41,599
view as to how you apply your

00:07:39,520 --> 00:07:43,520
authorization

00:07:41,599 --> 00:07:45,120
and it basically has two calls has

00:07:43,520 --> 00:07:46,319
commission and has object permission

00:07:45,120 --> 00:07:48,800
where you get past

00:07:46,319 --> 00:07:50,960
the request the view and potentially the

00:07:48,800 --> 00:07:52,960
object so you can apply

00:07:50,960 --> 00:07:55,280
whatever style of authentication under

00:07:52,960 --> 00:07:58,160
whatever conditions you think is needed

00:07:55,280 --> 00:07:59,680
an authorization you can choose do i

00:07:58,160 --> 00:08:01,360
care that they're calling the get link

00:07:59,680 --> 00:08:03,039
no anyone can do that but if

00:08:01,360 --> 00:08:05,360
this person is calling that viewer want

00:08:03,039 --> 00:08:07,599
to do something different

00:08:05,360 --> 00:08:10,479
map has a very simple permit decorator

00:08:07,599 --> 00:08:12,080
where you pass it a test function

00:08:10,479 --> 00:08:13,199
the test function gets past everything

00:08:12,080 --> 00:08:15,680
that's going to get passed on to the

00:08:13,199 --> 00:08:15,680
handler

00:08:16,000 --> 00:08:22,240
so that you can just say okay

00:08:19,919 --> 00:08:23,680
is the user logged in are they in this

00:08:22,240 --> 00:08:25,599
group there's some sample ones that come

00:08:23,680 --> 00:08:28,160
along that make it easy to do those ones

00:08:25,599 --> 00:08:29,680
but again knapp's job isn't to try and

00:08:28,160 --> 00:08:31,919
re-implement

00:08:29,680 --> 00:08:34,560
somebody else's authentication machinery

00:08:31,919 --> 00:08:36,399
you've got that

00:08:34,560 --> 00:08:38,399
data formats how can we talk over the

00:08:36,399 --> 00:08:40,080
wire and i absolutely agree that you

00:08:38,399 --> 00:08:42,880
should use as few as possible

00:08:40,080 --> 00:08:44,800
in your particular application we can

00:08:42,880 --> 00:08:45,920
see that tasty pie has certainly the

00:08:44,800 --> 00:08:47,920
largest set

00:08:45,920 --> 00:08:51,839
django rest framework comes with all the

00:08:47,920 --> 00:08:51,839
ones we actually care about and yaml

00:08:52,839 --> 00:08:57,760
and um

00:08:54,720 --> 00:08:59,040
nap currently supports it'll always

00:08:57,760 --> 00:09:00,640
support html

00:08:59,040 --> 00:09:02,560
out of the box only as a sort of a

00:09:00,640 --> 00:09:04,800
fallback of if you didn't say the actual

00:09:02,560 --> 00:09:07,839
format you're using

00:09:04,800 --> 00:09:08,480
um it has json and message pack because

00:09:07,839 --> 00:09:09,839
i thought

00:09:08,480 --> 00:09:11,920
message pack actually looks like it

00:09:09,839 --> 00:09:13,440
could be really handy

00:09:11,920 --> 00:09:15,120
and you can plug in more later on the

00:09:13,440 --> 00:09:16,800
biggest difference is tasty pie and

00:09:15,120 --> 00:09:18,560
django rest framework can support

00:09:16,800 --> 00:09:20,959
lots of different formats at the one

00:09:18,560 --> 00:09:23,839
time nap will only support

00:09:20,959 --> 00:09:23,839
one at a time

00:09:24,160 --> 00:09:26,959
and html

00:09:27,440 --> 00:09:32,320
serializer how to turn your object into

00:09:30,480 --> 00:09:35,440
data you can pass across the wire

00:09:32,320 --> 00:09:37,200
and back again or as my dad used to say

00:09:35,440 --> 00:09:38,720
you've turned your avocado into

00:09:37,200 --> 00:09:42,000
guacamole can you now turn your

00:09:38,720 --> 00:09:45,279
guacamole back into the avocado

00:09:42,000 --> 00:09:46,880
the main differences are that tasty pie

00:09:45,279 --> 00:09:49,200
is monolithic when you've got your

00:09:46,880 --> 00:09:50,320
your resource that is your serializer

00:09:49,200 --> 00:09:52,800
and your views

00:09:50,320 --> 00:09:55,040
all in one piece there's no separating

00:09:52,800 --> 00:09:56,240
them very little control over over how

00:09:55,040 --> 00:09:58,640
that goes

00:09:56,240 --> 00:09:58,640
whereas

00:10:00,800 --> 00:10:04,959
both django rest framework and nap you

00:10:02,880 --> 00:10:06,560
get a stand-alone serializer class that

00:10:04,959 --> 00:10:07,760
you define and you can use wherever you

00:10:06,560 --> 00:10:09,440
need it

00:10:07,760 --> 00:10:10,959
and then a separate way to actually

00:10:09,440 --> 00:10:14,240
publish and accept data

00:10:10,959 --> 00:10:16,560
using that when it comes to

00:10:14,240 --> 00:10:18,720
statefulness in django rest framework

00:10:16,560 --> 00:10:20,320
the serializer you create one per record

00:10:18,720 --> 00:10:21,920
you force the data in there and then say

00:10:20,320 --> 00:10:23,680
give me the object out or you put the

00:10:21,920 --> 00:10:25,920
object in and ask for the data out but

00:10:23,680 --> 00:10:28,959
you have to create one per record

00:10:25,920 --> 00:10:31,200
with tasty pi and nap you just create

00:10:28,959 --> 00:10:34,240
one and use it for all of them

00:10:31,200 --> 00:10:37,200
which can be there's

00:10:34,240 --> 00:10:38,240
pros and cons on both of course but

00:10:37,200 --> 00:10:41,760
being stateless

00:10:38,240 --> 00:10:43,519
immediately makes you much easier to be

00:10:41,760 --> 00:10:45,120
thread safe

00:10:43,519 --> 00:10:47,040
but i don't think that's really much of

00:10:45,120 --> 00:10:48,560
an issue in most of the way that these

00:10:47,040 --> 00:10:51,760
end up getting used

00:10:48,560 --> 00:10:55,519
the last bit is the pattern for

00:10:51,760 --> 00:10:56,959
getting your object back tasty pie

00:10:55,519 --> 00:10:59,040
i wound up having a lot of trouble when

00:10:56,959 --> 00:11:01,120
we used it first basically you have to

00:10:59,040 --> 00:11:04,800
be able to instantiate your object

00:11:01,120 --> 00:11:06,640
and then set all the properties on it

00:11:04,800 --> 00:11:08,320
and i found this very limiting in

00:11:06,640 --> 00:11:10,320
particular areas of our code

00:11:08,320 --> 00:11:12,079
whereas django rest framework and nap

00:11:10,320 --> 00:11:13,440
because i stole the idea from django

00:11:12,079 --> 00:11:15,200
rest framework

00:11:13,440 --> 00:11:17,120
you have to write a restore object

00:11:15,200 --> 00:11:18,720
method that gets past the re-inflated

00:11:17,120 --> 00:11:20,560
data

00:11:18,720 --> 00:11:23,760
and then it's up to it to do whatever it

00:11:20,560 --> 00:11:25,760
wants and most of the time you just

00:11:23,760 --> 00:11:27,519
pass it onto your object and go spots

00:11:25,760 --> 00:11:28,720
plot this data

00:11:27,519 --> 00:11:32,320
but maybe you want to do something

00:11:28,720 --> 00:11:32,320
different the choice is yours it's there

00:11:32,880 --> 00:11:36,640
shapes tasty pie accepted a patch from

00:11:36,320 --> 00:11:40,000
me

00:11:36,640 --> 00:11:41,360
a year ago on being able to specify in

00:11:40,000 --> 00:11:43,360
each field

00:11:41,360 --> 00:11:45,519
in your data format do i want this to

00:11:43,360 --> 00:11:48,160
appear only in list format

00:11:45,519 --> 00:11:49,760
only in detail format or in both and

00:11:48,160 --> 00:11:51,839
that's as much as they've got

00:11:49,760 --> 00:11:54,160
so far from what i've seen of being able

00:11:51,839 --> 00:11:55,680
to control which fields aware

00:11:54,160 --> 00:11:57,279
we had a case where some of the fields

00:11:55,680 --> 00:11:58,639
were really expensive to generate we

00:11:57,279 --> 00:12:00,240
needed to leave them out of the list

00:11:58,639 --> 00:12:00,639
view but we needed them in the detail

00:12:00,240 --> 00:12:02,880
view

00:12:00,639 --> 00:12:04,320
and their other alternatives weren't

00:12:02,880 --> 00:12:06,399
very good

00:12:04,320 --> 00:12:08,240
django rest framework and nap allow each

00:12:06,399 --> 00:12:09,760
view to choose which serializer it's

00:12:08,240 --> 00:12:11,440
going to use so you have absolute

00:12:09,760 --> 00:12:14,320
control over the shape of your data for

00:12:11,440 --> 00:12:14,320
every single view

00:12:16,079 --> 00:12:24,240
pagination tasty pages is its own custom

00:12:19,440 --> 00:12:26,160
pagination function um

00:12:24,240 --> 00:12:28,240
they've got a custom class and they've

00:12:26,160 --> 00:12:29,839
got an extension api so you can go and

00:12:28,240 --> 00:12:32,560
write your own i'm not

00:12:29,839 --> 00:12:33,920
really clear on why they went that path

00:12:32,560 --> 00:12:35,839
although they do so

00:12:33,920 --> 00:12:37,519
show in the comments in the code that it

00:12:35,839 --> 00:12:39,040
does have some advantages for the way

00:12:37,519 --> 00:12:40,160
they want to use it it does get more

00:12:39,040 --> 00:12:42,079
flexible

00:12:40,160 --> 00:12:43,600
django rest framework and that both use

00:12:42,079 --> 00:12:46,480
the pagination that's already built into

00:12:43,600 --> 00:12:50,399
django why wouldn't you well

00:12:46,480 --> 00:12:52,240
one reason is you can't actually say

00:12:50,399 --> 00:12:54,160
i want to look at if you have a page

00:12:52,240 --> 00:12:57,200
size of 10 objects

00:12:54,160 --> 00:12:58,880
but you want to start five objects in

00:12:57,200 --> 00:13:00,720
django pagination doesn't really like

00:12:58,880 --> 00:13:05,200
that very much it wants to go

00:13:00,720 --> 00:13:06,959
in pages in in total and so

00:13:05,200 --> 00:13:08,800
you really have to go page granular so

00:13:06,959 --> 00:13:10,800
whilst in

00:13:08,800 --> 00:13:13,200
django rest framework you can just go

00:13:10,800 --> 00:13:14,320
okay i want a page size of 15 and i want

00:13:13,200 --> 00:13:17,279
page 7

00:13:14,320 --> 00:13:19,760
and that's what you get in that you can

00:13:17,279 --> 00:13:21,200
also say i want to start at offset 17

00:13:19,760 --> 00:13:24,399
and it'll actually round that to the

00:13:21,200 --> 00:13:24,399
nearest page for you

00:13:24,880 --> 00:13:28,639
there's also options to say the maximum

00:13:26,800 --> 00:13:30,160
page size you can you can ask for

00:13:28,639 --> 00:13:30,639
because in all cases you can actually

00:13:30,160 --> 00:13:32,480
say

00:13:30,639 --> 00:13:34,880
i want you to change your default page

00:13:32,480 --> 00:13:37,440
size to this

00:13:34,880 --> 00:13:39,680
but if somebody comes along and says i

00:13:37,440 --> 00:13:41,120
want page size to be a million

00:13:39,680 --> 00:13:44,320
suddenly you've got a denial of service

00:13:41,120 --> 00:13:46,000
problem so there are limits

00:13:44,320 --> 00:13:47,519
uh i know that nap has it because i

00:13:46,000 --> 00:13:49,199
wrote it i know

00:13:47,519 --> 00:13:52,800
know that anybody else is actually gone

00:13:49,199 --> 00:13:52,800
we should really cap that

00:13:53,600 --> 00:13:59,199
rate limiting both daisy pi and drf have

00:13:55,680 --> 00:14:00,959
their own rate limiting tools built in

00:13:59,199 --> 00:14:02,480
and they're hooked in quite neatly into

00:14:00,959 --> 00:14:04,720
the infrastructure in that

00:14:02,480 --> 00:14:06,240
i thought why why are we doing this we

00:14:04,720 --> 00:14:07,760
need rate limiting on more than just our

00:14:06,240 --> 00:14:09,600
apis

00:14:07,760 --> 00:14:11,519
so i split that task off into something

00:14:09,600 --> 00:14:12,800
else and that's where django rated came

00:14:11,519 --> 00:14:14,240
from

00:14:12,800 --> 00:14:15,760
it's somebody else's job and you

00:14:14,240 --> 00:14:17,680
probably notice this is a common pattern

00:14:15,760 --> 00:14:19,440
in what i'm saying about nap

00:14:17,680 --> 00:14:21,040
somebody else's job let somebody else

00:14:19,440 --> 00:14:23,279
solve that problem

00:14:21,040 --> 00:14:26,560
make it possible to hook it in use all

00:14:23,279 --> 00:14:30,240
the existing framework but

00:14:26,560 --> 00:14:33,440
don't step on other people's toes

00:14:30,240 --> 00:14:36,399
rest frameworks documentation alone

00:14:33,440 --> 00:14:36,959
on their rate limiting surpasses all the

00:14:36,399 --> 00:14:39,040
rest

00:14:36,959 --> 00:14:40,399
it was very easy for me to go along and

00:14:39,040 --> 00:14:43,600
see

00:14:40,399 --> 00:14:44,560
that their their rate limiting was very

00:14:43,600 --> 00:14:47,040
flexible

00:14:44,560 --> 00:14:48,320
very easy to come along and say i want

00:14:47,040 --> 00:14:52,320
by default

00:14:48,320 --> 00:14:54,160
this specification i want for this api

00:14:52,320 --> 00:14:55,600
i want it to be this particular and you

00:14:54,160 --> 00:14:57,440
can have different settings depending on

00:14:55,600 --> 00:15:00,639
whether it's a particular user

00:14:57,440 --> 00:15:02,639
or anonymous so you can have

00:15:00,639 --> 00:15:04,959
authenticated users have a much higher

00:15:02,639 --> 00:15:04,959
limit

00:15:06,160 --> 00:15:09,360
filtering is the interesting part where

00:15:07,920 --> 00:15:10,800
i mean obviously you don't always want

00:15:09,360 --> 00:15:12,320
to see all of your objects and you need

00:15:10,800 --> 00:15:14,639
to suddenly think hang on

00:15:12,320 --> 00:15:15,440
do i need some special way to explain to

00:15:14,639 --> 00:15:17,839
my api

00:15:15,440 --> 00:15:18,880
tool how to filter the objects or should

00:15:17,839 --> 00:15:22,720
i just use

00:15:18,880 --> 00:15:24,800
django's expressions well both tasty pi

00:15:22,720 --> 00:15:26,880
and django rest framework come along and

00:15:24,800 --> 00:15:30,560
allow you to declare

00:15:26,880 --> 00:15:32,320
what is permissible to filter on

00:15:30,560 --> 00:15:33,759
and then there are hooks inside them of

00:15:32,320 --> 00:15:35,279
course that you can go and apply your

00:15:33,759 --> 00:15:38,480
own filters any way you like

00:15:35,279 --> 00:15:40,720
doesn't matter but they supply some

00:15:38,480 --> 00:15:42,160
plugable options for

00:15:40,720 --> 00:15:44,240
choosing how the filtering is going to

00:15:42,160 --> 00:15:45,360
work of course everybody supports the rm

00:15:44,240 --> 00:15:48,000
because this is django you've got to

00:15:45,360 --> 00:15:51,759
filter the rm

00:15:48,000 --> 00:15:54,079
but they give you the option

00:15:51,759 --> 00:15:55,519
of saying look i'm just going to follow

00:15:54,079 --> 00:15:57,519
the common pattern of how we're going to

00:15:55,519 --> 00:15:59,040
apply filters on various fields

00:15:57,519 --> 00:16:00,240
but i only want people to be able to

00:15:59,040 --> 00:16:01,519
filter on these fields because they're

00:16:00,240 --> 00:16:02,880
the ones that make sense i don't want

00:16:01,519 --> 00:16:04,800
people to start plumbing around

00:16:02,880 --> 00:16:06,560
and diving through my relations and

00:16:04,800 --> 00:16:07,680
guessing it what other objects are and

00:16:06,560 --> 00:16:09,360
starting to

00:16:07,680 --> 00:16:11,839
really pull out data that i don't want

00:16:09,360 --> 00:16:11,839
them to know

00:16:13,360 --> 00:16:16,880
nap once again doesn't actually do it

00:16:15,440 --> 00:16:18,639
for you but does give you the hook of

00:16:16,880 --> 00:16:20,000
where you would obviously go in and say

00:16:18,639 --> 00:16:21,199
okay now i'm going to implement my

00:16:20,000 --> 00:16:24,800
filters i'm

00:16:21,199 --> 00:16:26,399
planning on extending that api somewhat

00:16:24,800 --> 00:16:28,480
but i haven't had a need for it yet

00:16:26,399 --> 00:16:29,839
we've got in the case of cogan there is

00:16:28,480 --> 00:16:32,399
one

00:16:29,839 --> 00:16:33,440
api that does a lot of heavy filtering

00:16:32,399 --> 00:16:35,040
and i built up

00:16:33,440 --> 00:16:37,199
a couple of simple wrappers to let it do

00:16:35,040 --> 00:16:38,800
it

00:16:37,199 --> 00:16:40,320
api versioning is something that

00:16:38,800 --> 00:16:43,120
actually django rest

00:16:40,320 --> 00:16:44,800
framework kind of sidestepped they took

00:16:43,120 --> 00:16:46,560
an interesting approach to it map and

00:16:44,800 --> 00:16:48,399
tasty pie let you take a bunch of

00:16:46,560 --> 00:16:50,000
resource definitions or publishers as

00:16:48,399 --> 00:16:51,519
they are in nap

00:16:50,000 --> 00:16:53,680
and collect them together into a

00:16:51,519 --> 00:16:54,800
container that will just say i'm version

00:16:53,680 --> 00:16:57,120
one

00:16:54,800 --> 00:16:58,320
and when your interfaces change you

00:16:57,120 --> 00:17:00,399
write new resources

00:16:58,320 --> 00:17:02,480
and tie them together into a new api and

00:17:00,399 --> 00:17:04,480
publish that as version two

00:17:02,480 --> 00:17:06,240
really all it is is a way of collecting

00:17:04,480 --> 00:17:08,000
them together and putting a prefix on

00:17:06,240 --> 00:17:10,880
the url

00:17:08,000 --> 00:17:12,640
but again because we've got url patterns

00:17:10,880 --> 00:17:14,400
and url names and so on

00:17:12,640 --> 00:17:16,799
you can use that to reverse them and go

00:17:14,400 --> 00:17:19,439
okay i want that version of the api

00:17:16,799 --> 00:17:20,880
i want that method on it get me the url

00:17:19,439 --> 00:17:23,199
for that

00:17:20,880 --> 00:17:24,480
in django rest framework they have

00:17:23,199 --> 00:17:27,039
things called a view set

00:17:24,480 --> 00:17:28,400
which is basically a way of saying

00:17:27,039 --> 00:17:31,520
here's how you

00:17:28,400 --> 00:17:34,000
list create update delete do all the

00:17:31,520 --> 00:17:36,480
things you want to do and any other

00:17:34,000 --> 00:17:37,919
actions on your objects that you want

00:17:36,480 --> 00:17:40,240
and then you have a router

00:17:37,919 --> 00:17:42,240
into which you plug that which says when

00:17:40,240 --> 00:17:43,440
someone wants this resource and they do

00:17:42,240 --> 00:17:45,600
a get

00:17:43,440 --> 00:17:46,799
you actually call that method on the

00:17:45,600 --> 00:17:49,360
view set

00:17:46,799 --> 00:17:51,600
so in effect the router allows you to do

00:17:49,360 --> 00:17:54,400
api systems by remapping

00:17:51,600 --> 00:17:54,400
any particular

00:17:55,280 --> 00:17:59,200
request onto a specific action on the

00:17:58,400 --> 00:18:01,200
view set

00:17:59,200 --> 00:18:02,400
but you don't explicitly they don't they

00:18:01,200 --> 00:18:05,039
don't have a concept

00:18:02,400 --> 00:18:07,520
like the other two do of the api

00:18:05,039 --> 00:18:07,520
versioning

00:18:08,880 --> 00:18:13,200
generic views tasty pie has none because

00:18:11,600 --> 00:18:14,559
it's built around the idea of you have

00:18:13,200 --> 00:18:16,640
the resource and the resources

00:18:14,559 --> 00:18:19,600
everything

00:18:16,640 --> 00:18:21,280
which you can extend your resource and

00:18:19,600 --> 00:18:23,039
start calling some of the hooks inside

00:18:21,280 --> 00:18:24,720
it but you don't get any sort of generic

00:18:23,039 --> 00:18:25,360
views to allow you to continue doing any

00:18:24,720 --> 00:18:27,600
work

00:18:25,360 --> 00:18:29,200
nap i plan to extend it to but i'm sort

00:18:27,600 --> 00:18:33,360
of wondering about that after

00:18:29,200 --> 00:18:35,679
the research on this because

00:18:33,360 --> 00:18:37,600
django rest framework has lots of them

00:18:35,679 --> 00:18:41,039
and it has mix-ins they went

00:18:37,600 --> 00:18:43,440
ballistic as far as supporting

00:18:41,039 --> 00:18:45,120
generic class-based views a bunch of

00:18:43,440 --> 00:18:47,360
mix-ins bunch of concrete classes and

00:18:45,120 --> 00:18:49,520
you can extend the basic view yourself

00:18:47,360 --> 00:18:51,679
and go anywhere you want we all know how

00:18:49,520 --> 00:18:53,840
much power and danger is involved in

00:18:51,679 --> 00:18:57,840
generic class-based views

00:18:53,840 --> 00:18:57,840
and they've realized the same thing

00:18:58,880 --> 00:19:04,400
where this comes out to be interesting

00:19:00,799 --> 00:19:07,919
is when it comes to trying to use

00:19:04,400 --> 00:19:10,480
those other resources in your own views

00:19:07,919 --> 00:19:10,960
with tasty pie it can be kind of clumsy

00:19:10,480 --> 00:19:12,960
this is

00:19:10,960 --> 00:19:14,799
this is a view that i've adapted from

00:19:12,960 --> 00:19:18,400
something we used to do

00:19:14,799 --> 00:19:20,480
of trying to show a list of objects

00:19:18,400 --> 00:19:22,480
or at least serialize a list of objects

00:19:20,480 --> 00:19:24,799
and pass it on to a template to render

00:19:22,480 --> 00:19:25,520
because we found this was actually a lot

00:19:24,799 --> 00:19:27,360
of times

00:19:25,520 --> 00:19:28,799
just easier than replicating the code

00:19:27,360 --> 00:19:29,760
that was already in the api for the

00:19:28,799 --> 00:19:33,440
filtering

00:19:29,760 --> 00:19:36,080
and the testing but

00:19:33,440 --> 00:19:37,440
it's actually about 90 percent of one of

00:19:36,080 --> 00:19:39,520
the methods that is already on the

00:19:37,440 --> 00:19:41,600
resource but you can't use that directly

00:19:39,520 --> 00:19:44,480
because it will automatically create

00:19:41,600 --> 00:19:45,039
a formatted either json or xml and so on

00:19:44,480 --> 00:19:48,080
to review

00:19:45,039 --> 00:19:50,080
a response so you have to copy this

00:19:48,080 --> 00:19:51,600
and chuck it into your own view and

00:19:50,080 --> 00:19:52,640
that's quite a lot of code there and

00:19:51,600 --> 00:19:54,960
that's actually been

00:19:52,640 --> 00:19:56,480
slightly optimized compared to what they

00:19:54,960 --> 00:19:59,120
have in their code which is more

00:19:56,480 --> 00:19:59,120
readable but

00:19:59,600 --> 00:20:03,600
jrs framework it's built in it's how you

00:20:03,120 --> 00:20:05,520
use it

00:20:03,600 --> 00:20:07,360
i mean the start of their tutorial is

00:20:05,520 --> 00:20:08,559
how to use their serializers in your

00:20:07,360 --> 00:20:10,559
views

00:20:08,559 --> 00:20:12,559
and as you saw before they have lots of

00:20:10,559 --> 00:20:15,840
generic views for you to use

00:20:12,559 --> 00:20:20,799
so it's not hard to go it's

00:20:15,840 --> 00:20:23,200
just natural for the course in nap

00:20:20,799 --> 00:20:26,799
it's kind of easy it's um certainly a

00:20:23,200 --> 00:20:26,799
lot fewer lines than it was in um

00:20:28,240 --> 00:20:32,559
in tasty pie but it is still a little

00:20:30,080 --> 00:20:32,559
bit um

00:20:32,880 --> 00:20:37,120
a little bit onerous one of the

00:20:35,679 --> 00:20:41,440
interesting things in here

00:20:37,120 --> 00:20:43,360
is and i i got this

00:20:41,440 --> 00:20:45,440
bit of code actually donated to me from

00:20:43,360 --> 00:20:48,159
another django

00:20:45,440 --> 00:20:49,679
aficionado shingle who does a few very

00:20:48,159 --> 00:20:52,559
common tools

00:20:49,679 --> 00:20:54,240
he's created a set of http response

00:20:52,559 --> 00:20:58,559
classes that also extend

00:20:54,240 --> 00:21:02,480
exception so at any point in your code

00:20:58,559 --> 00:21:03,840
you can raise an http response

00:21:02,480 --> 00:21:05,760
and suddenly say all right i want to

00:21:03,840 --> 00:21:07,280
bail out of here i'm all done

00:21:05,760 --> 00:21:09,679
i've got a response we've got to get

00:21:07,280 --> 00:21:11,280
this out of here

00:21:09,679 --> 00:21:12,720
and so that's how you can just tunnel up

00:21:11,280 --> 00:21:14,240
through however many layers you're in

00:21:12,720 --> 00:21:16,080
and throw any sort of response that you

00:21:14,240 --> 00:21:18,240
want and there's a nice big collection

00:21:16,080 --> 00:21:19,600
of all the different standard http

00:21:18,240 --> 00:21:21,840
responses

00:21:19,600 --> 00:21:23,760
as exceptions now i've talked with some

00:21:21,840 --> 00:21:25,280
of the core developers about

00:21:23,760 --> 00:21:28,080
their views on this and basically they

00:21:25,280 --> 00:21:30,159
don't like binding

00:21:28,080 --> 00:21:32,080
the exception to the response because

00:21:30,159 --> 00:21:35,760
then you're binding

00:21:32,080 --> 00:21:37,919
the intent to the

00:21:35,760 --> 00:21:39,840
actual reaction it would be much better

00:21:37,919 --> 00:21:45,840
to have for instance the separation of

00:21:39,840 --> 00:21:47,200
not found and a 404 response

00:21:45,840 --> 00:21:49,280
i've gone through this a lot quicker

00:21:47,200 --> 00:21:51,520
than i expected but i will actually

00:21:49,280 --> 00:21:53,919
cover a couple of interesting features

00:21:51,520 --> 00:21:53,919
on

00:21:54,559 --> 00:21:58,240
a few of these things and some feedback

00:21:56,320 --> 00:21:59,360
i've got from various people about using

00:21:58,240 --> 00:22:02,240
it tasty pie

00:21:59,360 --> 00:22:03,039
for one gives you a very very quick way

00:22:02,240 --> 00:22:06,000
to say

00:22:03,039 --> 00:22:08,159
take my object my model make it

00:22:06,000 --> 00:22:10,640
available to the world

00:22:08,159 --> 00:22:12,240
but once you want to go past that you

00:22:10,640 --> 00:22:13,840
start getting bogged down you have to

00:22:12,240 --> 00:22:15,600
learn a lot of its internals

00:22:13,840 --> 00:22:17,919
they're not necessarily as clearly

00:22:15,600 --> 00:22:20,400
documented as you want

00:22:17,919 --> 00:22:21,919
and whilst there are a lot of hooks in

00:22:20,400 --> 00:22:24,880
there for getting in and modifying

00:22:21,919 --> 00:22:26,799
things at various stages of the behavior

00:22:24,880 --> 00:22:30,080
it still can be very very cumbersome to

00:22:26,799 --> 00:22:30,080
go in there and do your own thing

00:22:30,960 --> 00:22:34,799
django nap has a publisher model that i

00:22:33,280 --> 00:22:36,880
mentioned earlier and basically it's

00:22:34,799 --> 00:22:39,440
very similar to the views and routing

00:22:36,880 --> 00:22:40,400
in drf there are a bunch of basic

00:22:39,440 --> 00:22:42,559
standard

00:22:40,400 --> 00:22:43,679
url patterns that it defines and then it

00:22:42,559 --> 00:22:46,240
will try and find

00:22:43,679 --> 00:22:47,039
the method on the class to handle the

00:22:46,240 --> 00:22:49,760
request

00:22:47,039 --> 00:22:51,360
so the methods basically go lister

00:22:49,760 --> 00:22:54,400
object

00:22:51,360 --> 00:22:57,679
http verb so get post delete whatever

00:22:54,400 --> 00:22:59,120
and then the action that was in the url

00:22:57,679 --> 00:23:01,600
or if there wasn't an action

00:22:59,120 --> 00:23:02,799
default so just asking for the root of

00:23:01,600 --> 00:23:05,919
that api

00:23:02,799 --> 00:23:08,880
would end up calling list get default

00:23:05,919 --> 00:23:10,400
function and that would be responsible

00:23:08,880 --> 00:23:12,720
for generating the response it makes it

00:23:10,400 --> 00:23:16,799
very easy for you to decide okay

00:23:12,720 --> 00:23:18,880
this api needs a

00:23:16,799 --> 00:23:20,799
jiggle call on the object so you write

00:23:18,880 --> 00:23:22,640
object get jiggle

00:23:20,799 --> 00:23:24,480
as your method and it gets past the

00:23:22,640 --> 00:23:25,919
response and all the request objects and

00:23:24,480 --> 00:23:28,320
so on

00:23:25,919 --> 00:23:29,440
and it has the sole job of handing back

00:23:28,320 --> 00:23:31,919
all the responses

00:23:29,440 --> 00:23:33,039
we actually found when transferring from

00:23:31,919 --> 00:23:36,720
tasty pie to

00:23:33,039 --> 00:23:38,720
nap that there were code sections that

00:23:36,720 --> 00:23:40,960
translated very neatly onto the

00:23:38,720 --> 00:23:43,760
publisher model without actually being

00:23:40,960 --> 00:23:44,880
api functions there was no serializer

00:23:43,760 --> 00:23:48,080
involved

00:23:44,880 --> 00:23:51,039
there was no actual

00:23:48,080 --> 00:23:52,880
json or xml or api calls as such but

00:23:51,039 --> 00:23:55,679
there are a bunch of related views

00:23:52,880 --> 00:23:57,360
that all needed common infrastructure

00:23:55,679 --> 00:24:00,080
and just different ways to hook and

00:23:57,360 --> 00:24:01,279
to get them so we found that it's really

00:24:00,080 --> 00:24:04,240
a pattern very much like

00:24:01,279 --> 00:24:05,360
class-based views for sharing a code

00:24:04,240 --> 00:24:07,120
without actually

00:24:05,360 --> 00:24:09,120
being individual class based used in

00:24:07,120 --> 00:24:11,279
here inheriting from

00:24:09,120 --> 00:24:12,400
the same base class instead you put them

00:24:11,279 --> 00:24:13,919
all into one class

00:24:12,400 --> 00:24:15,679
and then route the request to where it

00:24:13,919 --> 00:24:18,159
goes

00:24:15,679 --> 00:24:19,679
django rest frameworks routers and such

00:24:18,159 --> 00:24:21,760
have a very similar idea

00:24:19,679 --> 00:24:23,520
and you allow people to say this is a

00:24:21,760 --> 00:24:26,080
method i want to expose

00:24:23,520 --> 00:24:27,279
the router in the in the api set and

00:24:26,080 --> 00:24:30,080
then

00:24:27,279 --> 00:24:31,520
the router gets told you call that one

00:24:30,080 --> 00:24:34,720
when somebody calls

00:24:31,520 --> 00:24:37,200
get on this action or post on this

00:24:34,720 --> 00:24:40,240
object and so on

00:24:37,200 --> 00:24:41,760
um right

00:24:40,240 --> 00:24:44,000
i'm not sure how far i've gone through

00:24:41,760 --> 00:24:44,000
but

00:24:46,640 --> 00:24:49,760
right any questions

00:24:50,559 --> 00:24:52,960
all right

00:24:54,480 --> 00:24:59,039
um tasty pie has a hypertext as the

00:24:56,640 --> 00:25:00,480
engine of application state concept

00:24:59,039 --> 00:25:02,240
i was wondering what your thoughts were

00:25:00,480 --> 00:25:03,840
on that and even positive

00:25:02,240 --> 00:25:07,120
whether they exist in the other two

00:25:03,840 --> 00:25:08,880
frameworks um

00:25:07,120 --> 00:25:10,159
we always found we had to turn off the

00:25:08,880 --> 00:25:12,159
include iri

00:25:10,159 --> 00:25:13,600
object iri just to get any decent

00:25:12,159 --> 00:25:15,840
performance otherwise there's too many

00:25:13,600 --> 00:25:19,120
calls to reverse

00:25:15,840 --> 00:25:21,200
it is there and the idea is nice but

00:25:19,120 --> 00:25:23,679
and from a pragmatic point of view

00:25:21,200 --> 00:25:25,279
nobody really uses it i mean theory

00:25:23,679 --> 00:25:28,240
you should be able to look at an object

00:25:25,279 --> 00:25:30,640
and know where to find it by its iri

00:25:28,240 --> 00:25:32,640
and not be able to guess it from a url

00:25:30,640 --> 00:25:33,919
pattern but we're all using fixed url

00:25:32,640 --> 00:25:36,080
structures

00:25:33,919 --> 00:25:37,279
so it kind of breaks down there and i

00:25:36,080 --> 00:25:40,080
was talking with some other people this

00:25:37,279 --> 00:25:41,679
weekend about this

00:25:40,080 --> 00:25:44,240
and they were saying that they've got

00:25:41,679 --> 00:25:46,880
cases where although it's technically

00:25:44,240 --> 00:25:50,240
correct to store the url or the iri

00:25:46,880 --> 00:25:52,000
of that object in order to reference it

00:25:50,240 --> 00:25:54,080
you're better off just storing the the

00:25:52,000 --> 00:25:56,240
id so

00:25:54,080 --> 00:25:57,840
that is actually one of the features in

00:25:56,240 --> 00:25:59,440
django rest framework that i skipped

00:25:57,840 --> 00:26:03,279
over they actually provide you

00:25:59,440 --> 00:26:06,320
with a nice neat way to look at your api

00:26:03,279 --> 00:26:07,919
from a web page so if you hit the api it

00:26:06,320 --> 00:26:09,520
will come up and say oh

00:26:07,919 --> 00:26:11,120
here's the list it's got these fields

00:26:09,520 --> 00:26:12,559
i'm going to tell you about it if you're

00:26:11,120 --> 00:26:15,840
using just a web browser so you can

00:26:12,559 --> 00:26:17,840
navigate and interact with your api

00:26:15,840 --> 00:26:20,960
from a web browser and without having to

00:26:17,840 --> 00:26:24,159
have a javascript to do it

00:26:20,960 --> 00:26:25,279
nap provides an introspection endpoint

00:26:24,159 --> 00:26:28,080
on the api

00:26:25,279 --> 00:26:29,360
only if you've got an api wrapping and a

00:26:28,080 --> 00:26:31,520
versioning api

00:26:29,360 --> 00:26:33,200
wrapping all your resources and it will

00:26:31,520 --> 00:26:34,400
run through and show you what methods

00:26:33,200 --> 00:26:36,799
you can call

00:26:34,400 --> 00:26:37,679
and what actions you can take but the

00:26:36,799 --> 00:26:40,159
hatios is

00:26:37,679 --> 00:26:42,240
a nice theoretical concept but i think

00:26:40,159 --> 00:26:45,039
most people realize that in practice

00:26:42,240 --> 00:26:45,039
we're not there yet

00:26:46,159 --> 00:26:55,840
anyone else any more

00:26:52,720 --> 00:26:58,080
uh so uh i think you said uh for nap

00:26:55,840 --> 00:27:00,480
there is the uh the ability to uh

00:26:58,080 --> 00:27:02,000
uh like prune the number of fields that

00:27:00,480 --> 00:27:03,679
are returned in list view or

00:27:02,000 --> 00:27:05,039
or in the in the like the detailed

00:27:03,679 --> 00:27:08,640
object uh

00:27:05,039 --> 00:27:10,400
view can the clients

00:27:08,640 --> 00:27:11,679
sorry i think that was tasty pie you

00:27:10,400 --> 00:27:12,159
don't have a lot of control over the

00:27:11,679 --> 00:27:14,400
food right

00:27:12,159 --> 00:27:15,840
well in the case of nap then um in app

00:27:14,400 --> 00:27:16,240
you choose the serializer just like

00:27:15,840 --> 00:27:19,200
right

00:27:16,240 --> 00:27:20,000
yes but so can the client tell the

00:27:19,200 --> 00:27:21,440
server i want

00:27:20,000 --> 00:27:23,600
these fields and i don't want these

00:27:21,440 --> 00:27:26,640
fields and i want basically this

00:27:23,600 --> 00:27:28,480
representation of the resource um

00:27:26,640 --> 00:27:29,919
so can a client include stuff that you

00:27:28,480 --> 00:27:30,720
by default you know leave out for

00:27:29,919 --> 00:27:32,320
instance

00:27:30,720 --> 00:27:34,559
there's not direct support for that at

00:27:32,320 --> 00:27:38,000
the moment there is a

00:27:34,559 --> 00:27:39,120
a model serializer factory which is used

00:27:38,000 --> 00:27:42,159
for

00:27:39,120 --> 00:27:43,520
creating related object lists where if

00:27:42,159 --> 00:27:46,840
you just say look i want to

00:27:43,520 --> 00:27:48,880
include a list of these objects of this

00:27:46,840 --> 00:27:50,559
model and it'll go well you didn't tell

00:27:48,880 --> 00:27:52,320
me how to serialize it so i'll go and

00:27:50,559 --> 00:27:53,840
create one myself and the same idea

00:27:52,320 --> 00:27:55,520
could be applied

00:27:53,840 --> 00:27:57,600
at the lower level and create just a

00:27:55,520 --> 00:27:58,000
normal serializer like that but there

00:27:57,600 --> 00:28:01,279
isn't

00:27:58,000 --> 00:28:02,320
uh i haven't seen that support in any of

00:28:01,279 --> 00:28:05,120
them yet

00:28:02,320 --> 00:28:06,799
it's a nice idea but uh i know like

00:28:05,120 --> 00:28:08,640
google does it and and a lot of other

00:28:06,799 --> 00:28:11,279
sort of you know public apis

00:28:08,640 --> 00:28:13,440
uh give clients the ability to like

00:28:11,279 --> 00:28:14,960
tailor the uh the size of response by

00:28:13,440 --> 00:28:15,360
you know give me the the full name of

00:28:14,960 --> 00:28:17,039
the

00:28:15,360 --> 00:28:18,320
this user object that otherwise i

00:28:17,039 --> 00:28:18,799
wouldn't be getting back you know stuff

00:28:18,320 --> 00:28:20,880
like that

00:28:18,799 --> 00:28:21,840
and maybe even traverse it right so you

00:28:20,880 --> 00:28:24,880
you're you're

00:28:21,840 --> 00:28:26,720
getting resource type a which has uh

00:28:24,880 --> 00:28:28,640
foreign keys obviously other stuff

00:28:26,720 --> 00:28:30,159
by default you wouldn't be serializing

00:28:28,640 --> 00:28:31,760
all those foreign keys i hope

00:28:30,159 --> 00:28:33,600
uh but maybe you know you allow your

00:28:31,760 --> 00:28:35,600
client to say this foreign key

00:28:33,600 --> 00:28:37,840
also include like the the name of the

00:28:35,600 --> 00:28:39,440
user that is the publisher of this blog

00:28:37,840 --> 00:28:43,440
post something like that right

00:28:39,440 --> 00:28:46,159
but um as i said i haven't seen any any

00:28:43,440 --> 00:28:47,760
actual explicit support for doing that i

00:28:46,159 --> 00:28:48,399
definitely see the utility in it and

00:28:47,760 --> 00:28:50,960
maybe i'll

00:28:48,399 --> 00:28:51,440
go back now and write it for nap but um

00:28:50,960 --> 00:28:54,720
no

00:28:51,440 --> 00:28:57,760
i haven't seen that yet um

00:28:54,720 --> 00:28:59,600
honestly yeah on a side note in having

00:28:57,760 --> 00:29:01,520
compiled everything that i did for this

00:28:59,600 --> 00:29:03,679
talk i'm wondering if i should ever

00:29:01,520 --> 00:29:06,080
continue on with map at all because

00:29:03,679 --> 00:29:07,360
django rest framework does seem to be

00:29:06,080 --> 00:29:08,000
everything that i was kind of planning

00:29:07,360 --> 00:29:11,760
on anyway

00:29:08,000 --> 00:29:14,399
almost almost any other questions or are

00:29:11,760 --> 00:29:14,399
we out of time

00:29:16,799 --> 00:29:27,840
no more questions anyone

00:29:21,520 --> 00:29:27,840
all right thanks again curtis

00:29:30,080 --> 00:29:32,159

YouTube URL: https://www.youtube.com/watch?v=kqIb2dnEF8c


