Title: Django Unstrained
Publication date: 2013-07-12
Playlist: Djangocon AU 2013 (Miniconf)
Description: 
	Simon Meers
http://2013.pycon-au.org/schedule/30029/view_talk
A compilation of outstanding tips, tricks and tools for meeting perfectionist's deadlines with even greater elegance and efficiency. Topics include project structure tips, time-saving template tags, handy model mixin classes, admin ninja skills, testing tools, robust handling of dynamic hyperlinks within rich text content, replacing raw ID widgets with client-friendly ones, convenient view and model method decorators, novel ways of ke
Captions: 
	00:00:00,000 --> 00:00:06,710
Simon mirrors he's a member of the

00:00:03,120 --> 00:00:10,200
Django core team who has the pleasure of

00:00:06,710 --> 00:00:13,830
python and django daily as a freelance

00:00:10,200 --> 00:00:17,300
developer based in Wollongong and he

00:00:13,830 --> 00:00:21,240
will be talking about Django unstrained

00:00:17,300 --> 00:00:31,769
making Django even more enjoyable than

00:00:21,240 --> 00:00:35,730
it is already getting q can you hear me

00:00:31,769 --> 00:00:38,910
yes okay so it just seemed like a

00:00:35,730 --> 00:00:43,020
moderately clever pun at the time but

00:00:38,910 --> 00:00:44,730
has turned into a helpful umbrella term

00:00:43,020 --> 00:00:47,280
for helping me to think of ways in which

00:00:44,730 --> 00:00:50,010
we can make Django development less of a

00:00:47,280 --> 00:00:51,809
strain and more pleasant unfortunately

00:00:50,010 --> 00:00:54,180
it might be Django I strained has the

00:00:51,809 --> 00:00:55,739
back can you see I can't make the font

00:00:54,180 --> 00:00:57,960
bigger i'm going to have wrapping issues

00:00:55,739 --> 00:01:01,350
so hopefully you'll be able to get

00:00:57,960 --> 00:01:03,660
through it okay so Who am I my name is

00:01:01,350 --> 00:01:08,610
Simon you may have seen me online as dr.

00:01:03,660 --> 00:01:11,820
Mears i discovered django in 2008 with

00:01:08,610 --> 00:01:14,100
much joy I was a university lecturer in

00:01:11,820 --> 00:01:15,689
computer science at the time doing PhD

00:01:14,100 --> 00:01:18,000
research and all sorts of other things I

00:01:15,689 --> 00:01:21,869
was tinkering with web development for a

00:01:18,000 --> 00:01:23,460
decade or so before that and as Alex

00:01:21,869 --> 00:01:26,070
said this morning discovering Django

00:01:23,460 --> 00:01:29,400
made me realize that web development

00:01:26,070 --> 00:01:31,560
could actually be fun and very quickly

00:01:29,400 --> 00:01:34,470
my career turned around and now I am a

00:01:31,560 --> 00:01:35,909
full-time developer in fact Pikkon 2010

00:01:34,470 --> 00:01:39,180
sort of started the snowball of

00:01:35,909 --> 00:01:42,090
networking required to give me enough

00:01:39,180 --> 00:01:45,299
work to do that full time I've been a

00:01:42,090 --> 00:01:47,369
core developer since 2010 however have

00:01:45,299 --> 00:01:49,799
to use a term very loosely my

00:01:47,369 --> 00:01:51,600
contributions to django skoura drop in

00:01:49,799 --> 00:01:54,329
the ocean compared to any of the other

00:01:51,600 --> 00:01:59,130
core developers here but the title is

00:01:54,329 --> 00:02:00,899
nice and part of the reason of that is I

00:01:59,130 --> 00:02:02,969
just have far too many deadlines you

00:02:00,899 --> 00:02:04,979
know raising three kids with my wife

00:02:02,969 --> 00:02:06,210
finishing my PhD all that stuff there's

00:02:04,979 --> 00:02:07,890
always going to be reasons and lots and

00:02:06,210 --> 00:02:11,069
lots of clients at the moment lots of

00:02:07,890 --> 00:02:13,640
client work is what I'm pardon me doing

00:02:11,069 --> 00:02:13,640
that the moment

00:02:15,110 --> 00:02:19,380
so always jumping from one project to

00:02:17,910 --> 00:02:21,510
the next and never stopping for long

00:02:19,380 --> 00:02:23,160
enough to actually work on the open

00:02:21,510 --> 00:02:28,590
source stuff which is something I hope

00:02:23,160 --> 00:02:31,739
to remedy in the near future so

00:02:28,590 --> 00:02:35,910
framework is Django is a fantastic

00:02:31,739 --> 00:02:38,760
general-purpose framework it's not the

00:02:35,910 --> 00:02:40,350
ultimate framework in some situations

00:02:38,760 --> 00:02:43,380
there may be better options available

00:02:40,350 --> 00:02:46,069
but I find it's there many many problems

00:02:43,380 --> 00:02:50,040
that it can solve and it is a excellent

00:02:46,069 --> 00:02:52,860
skill to have being able to use it the

00:02:50,040 --> 00:02:55,319
it is rolling along nicely the 1.6 beta

00:02:52,860 --> 00:02:57,900
was released just recently so will you

00:02:55,319 --> 00:03:02,190
start features for the 1.7 release

00:02:57,900 --> 00:03:04,110
coming out soon and it is a very

00:03:02,190 --> 00:03:08,100
community driven thing being an open

00:03:04,110 --> 00:03:10,080
source framework I assume that the

00:03:08,100 --> 00:03:13,049
community is you guys but it is an

00:03:10,080 --> 00:03:15,780
assumption how many of you have used

00:03:13,049 --> 00:03:17,489
Django before cuz I know there are a

00:03:15,780 --> 00:03:19,769
couple people here haven't okay so

00:03:17,489 --> 00:03:22,019
that's the majority how many of you have

00:03:19,769 --> 00:03:23,700
created a ticket or commented on a

00:03:22,019 --> 00:03:27,870
ticket or something or other for Jagger

00:03:23,700 --> 00:03:31,739
okay but thirty percent how many of you

00:03:27,870 --> 00:03:35,160
have submitted a patch to django ten

00:03:31,739 --> 00:03:38,030
percent how many of those patches

00:03:35,160 --> 00:03:38,030
actually got committed

00:03:38,580 --> 00:03:45,420
and have any of you set up django

00:03:43,090 --> 00:03:48,280
applications to share with the world

00:03:45,420 --> 00:03:52,750
third party stuff well that's more so

00:03:48,280 --> 00:03:55,300
that's cool okay so it is our framework

00:03:52,750 --> 00:03:59,920
and we are the ones responsible for

00:03:55,300 --> 00:04:03,120
making it better so before we know it

00:03:59,920 --> 00:04:05,739
Jengo two will suddenly be upon us and

00:04:03,120 --> 00:04:07,060
we get to determine what that's going to

00:04:05,739 --> 00:04:08,470
look like so if you were to write the

00:04:07,060 --> 00:04:10,510
release notes for two point not what

00:04:08,470 --> 00:04:12,880
would you like to see in it because to a

00:04:10,510 --> 00:04:15,340
large degree you can actually determine

00:04:12,880 --> 00:04:19,419
that theoretically the sky is the limit

00:04:15,340 --> 00:04:22,330
in practice the limit is actually more

00:04:19,419 --> 00:04:24,010
of a combination of the combined

00:04:22,330 --> 00:04:26,230
imagination of the community like in

00:04:24,010 --> 00:04:27,970
this room the amount of time we are

00:04:26,230 --> 00:04:30,760
willing to put in which guilty as

00:04:27,970 --> 00:04:33,690
charged and the amount of cooperation in

00:04:30,760 --> 00:04:37,210
the way in which we can make that happen

00:04:33,690 --> 00:04:39,700
so I would encourage you as you're

00:04:37,210 --> 00:04:41,320
developing don't just get frustrated

00:04:39,700 --> 00:04:43,090
with the framework and go this is saying

00:04:41,320 --> 00:04:44,770
that Django doesn't do very well and

00:04:43,090 --> 00:04:47,800
move on think about how can we solve

00:04:44,770 --> 00:04:50,680
that moving forward to make Django even

00:04:47,800 --> 00:04:52,870
more awesome so make a list of the

00:04:50,680 --> 00:04:55,990
things that you would like to see fixed

00:04:52,870 --> 00:04:57,280
in Django and make a plan to figure out

00:04:55,990 --> 00:04:58,840
how to do it if you have no idea how to

00:04:57,280 --> 00:05:00,880
solve it you know the problems there at

00:04:58,840 --> 00:05:02,680
least make sure that people know about

00:05:00,880 --> 00:05:06,970
the problem and let's figure out ways to

00:05:02,680 --> 00:05:09,550
move forward we probably want to avoid

00:05:06,970 --> 00:05:13,870
adding too many more features into

00:05:09,550 --> 00:05:16,450
Django's cool we really don't want this

00:05:13,870 --> 00:05:19,000
massive unmaintained ball lump of code I

00:05:16,450 --> 00:05:21,490
think if anything Django in future

00:05:19,000 --> 00:05:24,190
releases should probably lose weight and

00:05:21,490 --> 00:05:25,780
have just better hooks for more elegant

00:05:24,190 --> 00:05:27,760
third party applications talking any

00:05:25,780 --> 00:05:29,500
want to make the core very very flexible

00:05:27,760 --> 00:05:31,479
so that you can do amazing things with

00:05:29,500 --> 00:05:36,070
it going forward and have an excellent

00:05:31,479 --> 00:05:38,860
community of third-party apps so if you

00:05:36,070 --> 00:05:40,660
have a brilliant idea for Django don't

00:05:38,860 --> 00:05:45,190
just suddenly write a massive patch and

00:05:40,660 --> 00:05:48,340
then go on submit it first of all make

00:05:45,190 --> 00:05:50,760
sure that you check whether it has

00:05:48,340 --> 00:05:54,040
already been on the ticket tracker

00:05:50,760 --> 00:05:55,420
check the developer mailing lists they

00:05:54,040 --> 00:05:59,140
may have already been discussions on the

00:05:55,420 --> 00:06:00,910
topic and also think does this idea

00:05:59,140 --> 00:06:02,590
actually belong in a separate separate

00:06:00,910 --> 00:06:04,210
application should it be in the core or

00:06:02,590 --> 00:06:05,620
we just adding to the bloat we need to

00:06:04,210 --> 00:06:07,300
is there something in the core we need

00:06:05,620 --> 00:06:10,720
to adjust to make to accommodate that

00:06:07,300 --> 00:06:13,300
framework so as I said there's a very

00:06:10,720 --> 00:06:15,190
rich ecosystem of Jango apps out there

00:06:13,300 --> 00:06:16,630
if you search github which will

00:06:15,190 --> 00:06:20,170
obviously only give you the apps on

00:06:16,630 --> 00:06:22,330
github for Jengo you get something like

00:06:20,170 --> 00:06:25,240
this and this is up-to-date apparently

00:06:22,330 --> 00:06:27,400
Jengo is updated two hours ago I've

00:06:25,240 --> 00:06:29,020
sorted these by the number of people

00:06:27,400 --> 00:06:30,820
watching the repository against not

00:06:29,020 --> 00:06:33,640
necessarily an accurate snapshot but

00:06:30,820 --> 00:06:37,600
it's a snapshot of some of the more

00:06:33,640 --> 00:06:39,070
popular Django applications and I've got

00:06:37,600 --> 00:06:40,330
the top hundred here I'm not going to

00:06:39,070 --> 00:06:41,830
spend time going into each of them

00:06:40,330 --> 00:06:43,360
particularly not the top ones that you

00:06:41,830 --> 00:06:44,650
guys are probably seen before it's kind

00:06:43,360 --> 00:06:47,710
of the middle ones that are more

00:06:44,650 --> 00:06:50,080
interesting in doing this myself I found

00:06:47,710 --> 00:06:51,430
a number of things that I hadn't come

00:06:50,080 --> 00:06:52,870
across before that should have I think

00:06:51,430 --> 00:06:55,330
it's we should all be keeping an eye on

00:06:52,870 --> 00:06:57,940
the apps that are out there and which

00:06:55,330 --> 00:06:59,560
ones are moving forward and contributing

00:06:57,940 --> 00:07:01,510
to those it was a few things from my

00:06:59,560 --> 00:07:03,160
little toolbox that I was going to share

00:07:01,510 --> 00:07:04,240
after all there's an app there that

00:07:03,160 --> 00:07:05,650
actually does a lot better than I was

00:07:04,240 --> 00:07:09,640
doing it so I should be using that

00:07:05,650 --> 00:07:12,340
instead so there's a number of social

00:07:09,640 --> 00:07:15,820
authentications django extensions we've

00:07:12,340 --> 00:07:19,270
talked about already today a few CMS

00:07:15,820 --> 00:07:20,410
applications haystack Krispy forms as

00:07:19,270 --> 00:07:22,720
one of those ones I have not actually

00:07:20,410 --> 00:07:25,240
used but it looks fairly neat and I

00:07:22,720 --> 00:07:28,060
think the forms framework could do with

00:07:25,240 --> 00:07:30,040
some of probably some of that could be

00:07:28,060 --> 00:07:32,730
contributing to the core Django

00:07:30,040 --> 00:07:37,810
compressor pipeline has replaced that

00:07:32,730 --> 00:07:39,910
grappelli for the admin reversion target

00:07:37,810 --> 00:07:41,920
you can see some of these are getting

00:07:39,910 --> 00:07:44,080
rid old basic apps for example is seven

00:07:41,920 --> 00:07:46,540
months since the last commit to that

00:07:44,080 --> 00:07:49,210
user management if you see anything

00:07:46,540 --> 00:07:50,980
there this boy worth you can just do

00:07:49,210 --> 00:07:52,120
this search yourself on github later on

00:07:50,980 --> 00:07:54,010
they don't need to write it down

00:07:52,120 --> 00:07:55,420
necessarily but take a note of the apps

00:07:54,010 --> 00:07:57,940
that you should look into and have a

00:07:55,420 --> 00:07:59,890
quick look at what they do and use them

00:07:57,940 --> 00:08:01,060
in your application Django all off has

00:07:59,890 --> 00:08:04,890
been already covered today we know that

00:08:01,060 --> 00:08:04,890
covers handles Python 3

00:08:04,960 --> 00:08:12,009
more social applications more admin

00:08:07,940 --> 00:08:13,970
stuff so all sorts of useful apps

00:08:12,009 --> 00:08:15,139
hopefully we should be using these

00:08:13,970 --> 00:08:18,319
instead of reinventing the wheel

00:08:15,139 --> 00:08:19,789
ourselves every time we come up against

00:08:18,319 --> 00:08:22,759
a problem Django floppy forms another

00:08:19,789 --> 00:08:28,069
interesting form one Django braces has a

00:08:22,759 --> 00:08:30,400
bunch of view mix-ins as caches etc I'm

00:08:28,069 --> 00:08:34,190
not going to go through all of them so

00:08:30,400 --> 00:08:36,440
snippets can I see a show of hands how

00:08:34,190 --> 00:08:38,659
many people have bookmarks in their

00:08:36,440 --> 00:08:40,550
browser for Django snippets or stack

00:08:38,659 --> 00:08:42,409
overflow oh I know how i fix that before

00:08:40,550 --> 00:08:45,860
i'm going to go to the browser and grab

00:08:42,409 --> 00:08:48,140
that anyone regularly do that when

00:08:45,860 --> 00:08:50,570
they're solving a problem i'm wondering

00:08:48,140 --> 00:08:53,560
how many of those things should really

00:08:50,570 --> 00:08:55,730
be packaged up into applications

00:08:53,560 --> 00:08:57,140
sometimes you may even have something

00:08:55,730 --> 00:08:58,550
that's almost a one-liner but by the

00:08:57,140 --> 00:09:01,220
time you go and add some documentation

00:08:58,550 --> 00:09:03,140
to explain how to use it and some tests

00:09:01,220 --> 00:09:05,959
and whatever else may an app might not

00:09:03,140 --> 00:09:08,180
be a bad thing for it or we could have a

00:09:05,959 --> 00:09:09,800
big kitchen sink application with all

00:09:08,180 --> 00:09:11,540
these sorts of things in it or you might

00:09:09,800 --> 00:09:15,290
maintain your own personal little

00:09:11,540 --> 00:09:17,870
library of shortcuts I was just going to

00:09:15,290 --> 00:09:19,339
give you a peek into my little such

00:09:17,870 --> 00:09:22,100
application at the moment which is a

00:09:19,339 --> 00:09:23,630
thing I called Jango generic which is

00:09:22,100 --> 00:09:28,190
not intended for public consumption

00:09:23,630 --> 00:09:29,839
really it's it's highly experimental but

00:09:28,190 --> 00:09:31,970
when I've been developing applications

00:09:29,839 --> 00:09:33,800
recently if whenever I'm finding a

00:09:31,970 --> 00:09:35,779
pattern that I'm is repeating between

00:09:33,800 --> 00:09:38,089
two different projects I go right okay I

00:09:35,779 --> 00:09:40,640
force myself to take that out make it

00:09:38,089 --> 00:09:44,779
generic and reuse it between these

00:09:40,640 --> 00:09:47,329
different projects so it is a bit

00:09:44,779 --> 00:09:49,310
experimental and messy I'll throw

00:09:47,329 --> 00:09:51,980
features in there are facing a deadline

00:09:49,310 --> 00:09:53,779
on just put it in there very quickly try

00:09:51,980 --> 00:09:55,220
it out it may end up being not such a

00:09:53,779 --> 00:09:56,480
good idea or I just wasn't thinking

00:09:55,220 --> 00:09:57,770
straight in the first place should be

00:09:56,480 --> 00:09:58,910
deleted there's a bunch of stuff in

00:09:57,770 --> 00:10:02,300
there at the moment that should be

00:09:58,910 --> 00:10:03,320
deleted maybe it already exists like

00:10:02,300 --> 00:10:04,370
I've discovered in preparing this

00:10:03,320 --> 00:10:05,690
there's a bunch of stuff there that

00:10:04,370 --> 00:10:09,920
could be removed because other apps

00:10:05,690 --> 00:10:11,240
already do it better or there's a few

00:10:09,920 --> 00:10:12,890
things in there that may actually be

00:10:11,240 --> 00:10:16,150
good ideas for creating new apps and we

00:10:12,890 --> 00:10:19,340
can all use and share and contribute to

00:10:16,150 --> 00:10:21,620
so a lot of the stuff in there is based

00:10:19,340 --> 00:10:24,610
on admin which is where a lot of my

00:10:21,620 --> 00:10:26,210
clients have weird and wonderful

00:10:24,610 --> 00:10:28,970
requirements for the things that they

00:10:26,210 --> 00:10:31,900
would likely admin to do so I'll take a

00:10:28,970 --> 00:10:36,110
few of through a few examples there

00:10:31,900 --> 00:10:38,270
here's a batch update mix in which you

00:10:36,110 --> 00:10:41,150
can use to select a bunch of feels that

00:10:38,270 --> 00:10:43,820
you would like to be updateable you use

00:10:41,150 --> 00:10:46,580
an admin action to go and say you tick

00:10:43,820 --> 00:10:48,500
the ones you want batch update and you

00:10:46,580 --> 00:10:50,090
get a form based on the fields that you

00:10:48,500 --> 00:10:53,990
select that should be batch updatable

00:10:50,090 --> 00:10:56,270
put it in there press update useful

00:10:53,990 --> 00:10:58,580
feature should it be in contributed to

00:10:56,270 --> 00:11:00,790
admin probably not might make a useful

00:10:58,580 --> 00:11:03,500
third-party app it's only the really am

00:11:00,790 --> 00:11:04,850
most generic ones are most useful and

00:11:03,500 --> 00:11:08,210
universally applicable ones that would

00:11:04,850 --> 00:11:12,050
be useful in the core cooked IDs is kind

00:11:08,210 --> 00:11:14,840
of interesting term roar ID feels you've

00:11:12,050 --> 00:11:16,820
probably all used there's those

00:11:14,840 --> 00:11:19,130
drop-down foreign key lists become very

00:11:16,820 --> 00:11:21,050
unwieldy very quickly as the numbers

00:11:19,130 --> 00:11:22,790
increase as you want to search and

00:11:21,050 --> 00:11:24,380
filter and what you're looking up you

00:11:22,790 --> 00:11:25,940
have a page it suddenly takes three

00:11:24,380 --> 00:11:27,800
minutes to load because it's got 100

00:11:25,940 --> 00:11:30,620
dropdowns with a thousand items in each

00:11:27,800 --> 00:11:33,470
so we resort to raw IDs in the client

00:11:30,620 --> 00:11:36,620
goes there's a numbers with commas in a

00:11:33,470 --> 00:11:38,540
field or what's this and it's a problem

00:11:36,620 --> 00:11:40,850
that's not very difficult to solve in

00:11:38,540 --> 00:11:43,210
this little mix in I just replaced row

00:11:40,850 --> 00:11:45,410
ID fields we've cooked dodi fields and

00:11:43,210 --> 00:11:47,180
you get something like this where you

00:11:45,410 --> 00:11:48,560
can delete and add new ones and where

00:11:47,180 --> 00:11:50,300
else and you actually see a textual

00:11:48,560 --> 00:11:51,950
representation of what it is that you've

00:11:50,300 --> 00:11:54,260
got works with many too many and foreign

00:11:51,950 --> 00:11:56,000
keys and those sorts of things so this

00:11:54,260 --> 00:11:59,030
is a problem we should be solving in the

00:11:56,000 --> 00:12:00,830
admin and that's a problem that has been

00:11:59,030 --> 00:12:02,630
discussed in tickets and discussed

00:12:00,830 --> 00:12:04,460
recently on mailing list as well and

00:12:02,630 --> 00:12:06,620
again haven't had time to actually look

00:12:04,460 --> 00:12:08,390
into it properly and it involved there

00:12:06,620 --> 00:12:13,100
may be something we could do in the

00:12:08,390 --> 00:12:14,570
sprints CSV exporting every client seems

00:12:13,100 --> 00:12:16,580
to want to be able to get the data out

00:12:14,570 --> 00:12:21,400
of the admin this is a mixing that I

00:12:16,580 --> 00:12:21,400
used to do that however I found

00:12:23,870 --> 00:12:29,819
and I've called Jango import/export

00:12:27,029 --> 00:12:33,509
which haven't used but looks like it may

00:12:29,819 --> 00:12:36,690
well do it more nicely than that email

00:12:33,509 --> 00:12:38,490
based uses since Django 1.5 we now don't

00:12:36,690 --> 00:12:40,199
have to have user name fields anymore

00:12:38,490 --> 00:12:42,810
and I'm finding that a very good thing

00:12:40,199 --> 00:12:47,459
and in most of my applications i now

00:12:42,810 --> 00:12:48,990
have users with emails as their primary

00:12:47,459 --> 00:12:53,759
called a primary key with a unique

00:12:48,990 --> 00:12:55,139
identifier instead of i mean and for a

00:12:53,759 --> 00:12:57,990
while there I was copying and pasting

00:12:55,139 --> 00:13:00,149
code out of Jango's docks to give me the

00:12:57,990 --> 00:13:01,769
user model and the methods that it

00:13:00,149 --> 00:13:05,100
needed to provide as a minimum and the

00:13:01,769 --> 00:13:06,209
managers and the admin and the forms and

00:13:05,100 --> 00:13:10,440
those sorts of things so this is

00:13:06,209 --> 00:13:11,819
something that I use that helps to make

00:13:10,440 --> 00:13:14,670
that nicer and you can just add whatever

00:13:11,819 --> 00:13:18,779
fields you need to in your particular

00:13:14,670 --> 00:13:21,480
model nested in lines has been something

00:13:18,779 --> 00:13:23,850
as discussed often what the admin has

00:13:21,480 --> 00:13:25,560
trouble accommodating when you have some

00:13:23,850 --> 00:13:27,480
sort of model which has a bunch of child

00:13:25,560 --> 00:13:29,790
models and each of those have children

00:13:27,480 --> 00:13:32,430
and it goes can go quite deeply in some

00:13:29,790 --> 00:13:33,810
applications nested in lines are not

00:13:32,430 --> 00:13:35,490
sure if they're such a good idea

00:13:33,810 --> 00:13:37,319
necessarily isn't is an implementation

00:13:35,490 --> 00:13:42,000
on that ticket I think I haven't looked

00:13:37,319 --> 00:13:43,800
into it again time work around it i've

00:13:42,000 --> 00:13:48,569
been using is the thing called a change

00:13:43,800 --> 00:13:50,910
link in line where you get to edit the

00:13:48,569 --> 00:13:52,709
top level stuff and you can reorder

00:13:50,910 --> 00:13:54,689
things and change the titles and delete

00:13:52,709 --> 00:13:56,490
and whatever else and you have not yet

00:13:54,689 --> 00:13:57,870
saved if you haven't saved it yet you

00:13:56,490 --> 00:13:59,279
save and continue and then you can go

00:13:57,870 --> 00:14:03,000
and actually edit each of those in more

00:13:59,279 --> 00:14:05,490
detail and of course that's able to be

00:14:03,000 --> 00:14:08,009
used nested further and further down and

00:14:05,490 --> 00:14:10,199
sort of infinite nesting a little bit of

00:14:08,009 --> 00:14:12,240
a user experience overhead with them

00:14:10,199 --> 00:14:13,829
having to save and continue in each one

00:14:12,240 --> 00:14:16,949
but that's working for a number of

00:14:13,829 --> 00:14:20,339
clients quite nicely and i've also got

00:14:16,949 --> 00:14:23,399
in that case a change form only admin

00:14:20,339 --> 00:14:24,750
which is where the model admin only

00:14:23,399 --> 00:14:26,310
works as a change form you don't have a

00:14:24,750 --> 00:14:29,459
change list because it's only relevant

00:14:26,310 --> 00:14:31,350
to within the context of its parent so

00:14:29,459 --> 00:14:33,950
the parent provides the in lines the in

00:14:31,350 --> 00:14:36,320
lines are a change list for that

00:14:33,950 --> 00:14:38,060
killa model and so it removes the change

00:14:36,320 --> 00:14:41,980
view so you don't get this list of

00:14:38,060 --> 00:14:41,980
intermediate models out of context

00:14:42,280 --> 00:14:47,000
thumbnails everyone says want thumbnails

00:14:44,720 --> 00:14:48,800
on their admin I've just written it

00:14:47,000 --> 00:14:50,300
again for a while I was copying and

00:14:48,800 --> 00:14:53,350
pasting the same five lines of code to

00:14:50,300 --> 00:14:55,700
generate a thumbnail in the list view

00:14:53,350 --> 00:15:01,040
but I've got a mixing that makes it much

00:14:55,700 --> 00:15:04,850
more easy and also works in in lines as

00:15:01,040 --> 00:15:07,130
well and you can change configurations

00:15:04,850 --> 00:15:08,270
change the source change your options of

00:15:07,130 --> 00:15:10,220
your thumbnail all those sorts of things

00:15:08,270 --> 00:15:12,440
so now I just have a one-line import

00:15:10,220 --> 00:15:14,930
which makes it much easier and now in

00:15:12,440 --> 00:15:16,700
between my apps I can share that

00:15:14,930 --> 00:15:18,530
functionality and improve it with each

00:15:16,700 --> 00:15:21,700
project instead of it going stagnant in

00:15:18,530 --> 00:15:24,200
one of the old ones that i have used

00:15:21,700 --> 00:15:26,840
polymorphism i don't know if you've come

00:15:24,200 --> 00:15:29,720
across scales django model utils but i

00:15:26,840 --> 00:15:31,450
use it in almost every project the

00:15:29,720 --> 00:15:33,890
inheritance manager is an interesting

00:15:31,450 --> 00:15:36,620
component of that which allows you to

00:15:33,890 --> 00:15:39,410
have multi table inheritance going on

00:15:36,620 --> 00:15:44,090
where you apply the inheritance manager

00:15:39,410 --> 00:15:45,740
to the parent model and when you ask it

00:15:44,090 --> 00:15:48,950
for a query set it gives you back a

00:15:45,740 --> 00:15:52,130
polymorphic query set with each of the

00:15:48,950 --> 00:15:53,570
objects as it's sort of leaf node class

00:15:52,130 --> 00:15:56,330
which is very handy and it does it

00:15:53,570 --> 00:15:59,660
efficiently using select related I've

00:15:56,330 --> 00:16:01,430
developed a polymorphic admin which

00:15:59,660 --> 00:16:05,780
works with that so give you apply that

00:16:01,430 --> 00:16:07,940
admin to the top level model and you can

00:16:05,780 --> 00:16:11,090
in the change list you see all of them

00:16:07,940 --> 00:16:12,560
there if you go to add one for example

00:16:11,090 --> 00:16:14,600
it has an intermediate form when you say

00:16:12,560 --> 00:16:18,620
okay which type of element am I going to

00:16:14,600 --> 00:16:19,640
add and then that all works nicely there

00:16:18,620 --> 00:16:21,410
as well so there's a few of those little

00:16:19,640 --> 00:16:24,100
things that are helpful you might want

00:16:21,410 --> 00:16:26,800
to dig in or ask me more about it later

00:16:24,100 --> 00:16:29,510
admin links is something that I've been

00:16:26,800 --> 00:16:33,890
finding very helpful this little snippet

00:16:29,510 --> 00:16:37,240
will just add a link to the given for

00:16:33,890 --> 00:16:42,200
creating a new instance of fubar being

00:16:37,240 --> 00:16:44,660
app model and of course it also checks

00:16:42,200 --> 00:16:46,550
whether the user in the context has the

00:16:44,660 --> 00:16:47,300
permissions to add that if not it

00:16:46,550 --> 00:16:48,920
doesn't show the

00:16:47,300 --> 00:16:50,029
link and so on so all of that logic is

00:16:48,920 --> 00:16:51,320
hidden away because that was something i

00:16:50,029 --> 00:16:54,230
was doing again and again if it right

00:16:51,320 --> 00:16:55,850
package it up you can add query string

00:16:54,230 --> 00:16:58,339
parameters if you want to pre feel field

00:16:55,850 --> 00:17:00,399
and things like that change links as

00:16:58,339 --> 00:17:02,779
well for a particular object instance

00:17:00,399 --> 00:17:05,030
will give you change links you can make

00:17:02,779 --> 00:17:06,949
it load it into a URL so that you can

00:17:05,030 --> 00:17:10,490
wrap it in case you have to enclose it

00:17:06,949 --> 00:17:13,250
in some HTML you can change parameters

00:17:10,490 --> 00:17:14,839
such that so I think there is a place

00:17:13,250 --> 00:17:18,470
for something like that probably in its

00:17:14,839 --> 00:17:19,880
own little app and a return URL admin

00:17:18,470 --> 00:17:21,140
mix into so when you click on one of

00:17:19,880 --> 00:17:22,720
these links that actually takes you to

00:17:21,140 --> 00:17:25,160
be admin will have to use make your

00:17:22,720 --> 00:17:26,900
changes you save it and it takes you

00:17:25,160 --> 00:17:28,220
back out to the front end page where you

00:17:26,900 --> 00:17:30,559
click the link from in the first place

00:17:28,220 --> 00:17:32,690
again little things like that that just

00:17:30,559 --> 00:17:36,530
take some of the strain out and remove

00:17:32,690 --> 00:17:38,090
the tedium from my everyday work this is

00:17:36,530 --> 00:17:40,790
an interesting one recently I had a

00:17:38,090 --> 00:17:46,490
client who wanted to drop like a hundred

00:17:40,790 --> 00:17:48,260
10 megabyte or more photos into the

00:17:46,490 --> 00:17:49,700
admin and upload them and wondered why

00:17:48,260 --> 00:17:53,809
the server was taking a little while to

00:17:49,700 --> 00:17:56,720
respond so i created this neat little

00:17:53,809 --> 00:18:00,380
widget where you drop a bunch of images

00:17:56,720 --> 00:18:03,530
and actually using html5 it resizes

00:18:00,380 --> 00:18:05,600
those images in the browser much more

00:18:03,530 --> 00:18:08,390
quickly than the upload would take and

00:18:05,600 --> 00:18:10,520
then sends the size that we need to the

00:18:08,390 --> 00:18:12,679
browser which is how so to the server

00:18:10,520 --> 00:18:14,570
which is quite handy that's a mozilla

00:18:12,679 --> 00:18:16,610
link there for how that actually work

00:18:14,570 --> 00:18:19,460
lots of things that we can do lots of

00:18:16,610 --> 00:18:22,160
ideas for different apps i talked about

00:18:19,460 --> 00:18:24,710
testing you might talk at pycon last

00:18:22,160 --> 00:18:26,809
year i've got a bunch of test utils for

00:18:24,710 --> 00:18:29,059
making tests as quick and easy as

00:18:26,809 --> 00:18:31,400
possible for checking things in the temp

00:18:29,059 --> 00:18:34,580
template checking in context with caller

00:18:31,400 --> 00:18:36,830
balls checking for whether things are

00:18:34,580 --> 00:18:39,200
contained in the response based on a

00:18:36,830 --> 00:18:40,700
case sensitivity or not contained just

00:18:39,200 --> 00:18:42,740
short cuts for any of those things that

00:18:40,700 --> 00:18:44,780
i find myself doing again and again i'm

00:18:42,740 --> 00:18:46,640
trying to cut it down to the minimum of

00:18:44,780 --> 00:18:49,880
code to be able to do it very very

00:18:46,640 --> 00:18:52,040
quickly email a fallback email message

00:18:49,880 --> 00:18:53,660
that sends to admins or somebody else if

00:18:52,040 --> 00:18:56,540
none of the receivers actually know

00:18:53,660 --> 00:18:59,120
recipients that turn up for it template

00:18:56,540 --> 00:19:01,040
email the idea of being able to have a

00:18:59,120 --> 00:19:02,510
single template which has blocks

00:19:01,040 --> 00:19:04,850
the subject and body and possibly the

00:19:02,510 --> 00:19:06,470
HTML if you can go multi-part with

00:19:04,850 --> 00:19:08,090
template inheritance so you can have

00:19:06,470 --> 00:19:11,470
your signatures and your greetings and

00:19:08,090 --> 00:19:14,300
so on in the inheritance stack their

00:19:11,470 --> 00:19:16,700
URLs these are literally two one-liners

00:19:14,300 --> 00:19:21,350
that i use for nesting patterns and

00:19:16,700 --> 00:19:22,940
namespaces a similar fashion to that to

00:19:21,350 --> 00:19:24,530
sort of dry out some of our URL

00:19:22,940 --> 00:19:26,060
configurations because i finally often

00:19:24,530 --> 00:19:31,010
work on a nested thing there might be a

00:19:26,060 --> 00:19:33,230
URL refactor we can do there more

00:19:31,010 --> 00:19:34,970
there's decorators for caching results

00:19:33,230 --> 00:19:36,950
in instances and models there's

00:19:34,970 --> 00:19:38,150
management commands for creating proxy

00:19:36,950 --> 00:19:39,740
permissions again there's a number of

00:19:38,150 --> 00:19:41,090
these things that I have worked around

00:19:39,740 --> 00:19:42,230
for a ticket because I just needed to

00:19:41,090 --> 00:19:43,580
solve it very quickly instead of

00:19:42,230 --> 00:19:47,660
actually going and fixing the ticket

00:19:43,580 --> 00:19:50,600
which is not ideal middleware for all

00:19:47,660 --> 00:19:52,400
things if you are putting aside on

00:19:50,600 --> 00:19:55,640
Heroku for staging site uh something you

00:19:52,400 --> 00:19:56,870
want to wrap it in some more generic

00:19:55,640 --> 00:19:58,160
templates a lot of these things just

00:19:56,870 --> 00:20:01,400
allow me to get a site up and running

00:19:58,160 --> 00:20:04,580
very quickly with front-end branded

00:20:01,400 --> 00:20:06,980
registration pages default login pages

00:20:04,580 --> 00:20:08,630
pagination templates any of those things

00:20:06,980 --> 00:20:11,660
that you find yourself doing again and

00:20:08,630 --> 00:20:16,040
again I think we can find ways of making

00:20:11,660 --> 00:20:18,830
them much quicker and easier and more

00:20:16,040 --> 00:20:21,710
there's linka fires a handy little tag

00:20:18,830 --> 00:20:23,900
that is used sometimes unescape as a

00:20:21,710 --> 00:20:26,290
filter that i'm not sure why it doesn't

00:20:23,900 --> 00:20:28,910
exist but I've needed it several times

00:20:26,290 --> 00:20:30,380
file size filter likes to blow up if you

00:20:28,910 --> 00:20:33,280
give it a file it doesn't exist so I've

00:20:30,380 --> 00:20:36,230
got a file exists filter to prevent that

00:20:33,280 --> 00:20:38,660
I've got a little experimental

00:20:36,230 --> 00:20:41,090
functionality for reversing static based

00:20:38,660 --> 00:20:42,920
on the storage back end but being able

00:20:41,090 --> 00:20:44,660
to still use that within your javascript

00:20:42,920 --> 00:20:48,860
which is a problem I've come across a

00:20:44,660 --> 00:20:50,060
few times and lots more as tokens I

00:20:48,860 --> 00:20:51,980
think I'm running out of time to go

00:20:50,060 --> 00:20:54,550
through them all but I'll put these up

00:20:51,980 --> 00:20:57,110
online so you can have a look later on

00:20:54,550 --> 00:21:00,080
generating tokens is a common thing and

00:20:57,110 --> 00:21:02,120
also hashed URL views where you actually

00:21:00,080 --> 00:21:03,740
include a hash at the end of the URL so

00:21:02,120 --> 00:21:06,020
that you can't modify the URL the

00:21:03,740 --> 00:21:08,270
parameters in it adds a bit of a layer

00:21:06,020 --> 00:21:11,840
of security there that's a mixing that

00:21:08,270 --> 00:21:14,720
wraps that up all nicely for you

00:21:11,840 --> 00:21:17,659
and views i was going to share a bunch

00:21:14,720 --> 00:21:20,390
of my views but i found that things like

00:21:17,659 --> 00:21:22,460
braces I think already cover a lot of

00:21:20,390 --> 00:21:23,990
things that I had and more but I've got

00:21:22,460 --> 00:21:25,490
a few view mixing that is in there as

00:21:23,990 --> 00:21:29,000
well I won't go through all of those but

00:21:25,490 --> 00:21:30,320
just good for us to be aware the sorts

00:21:29,000 --> 00:21:31,490
of things that other people out there

00:21:30,320 --> 00:21:35,630
have already built and we could utilize

00:21:31,490 --> 00:21:36,919
and contribute to forms again I've got a

00:21:35,630 --> 00:21:39,230
bunch of form stuff that I thought well

00:21:36,919 --> 00:21:41,150
actually having not used but recently

00:21:39,230 --> 00:21:42,500
seen floppy forms and crispy forms I

00:21:41,150 --> 00:21:44,720
think they probably cover more than any

00:21:42,500 --> 00:21:47,960
of my stuff was going to cover so have a

00:21:44,720 --> 00:21:50,870
look at those models like I said Django

00:21:47,960 --> 00:21:53,090
model details is excellent I use choices

00:21:50,870 --> 00:21:55,250
and pass through manager in almost every

00:21:53,090 --> 00:21:56,809
project I work on if you haven't used

00:21:55,250 --> 00:21:58,880
passed through manager before it's

00:21:56,809 --> 00:22:01,820
basically means you define your query

00:21:58,880 --> 00:22:03,260
set and you define a manager and you say

00:22:01,820 --> 00:22:05,330
this manager as a path through managers

00:22:03,260 --> 00:22:08,360
that anything my query set can do my

00:22:05,330 --> 00:22:10,909
manager can also do so it allows you to

00:22:08,360 --> 00:22:18,860
chain those methods on your query sets

00:22:10,909 --> 00:22:21,620
and managers so that's a snippet of my

00:22:18,860 --> 00:22:23,149
snippets the idea is that I have taking

00:22:21,620 --> 00:22:24,500
some of the TD amount of development any

00:22:23,149 --> 00:22:27,799
of the things we're doing repeatedly

00:22:24,500 --> 00:22:31,309
trying to make Django development easier

00:22:27,799 --> 00:22:35,330
and more pleasant however my ID is only

00:22:31,309 --> 00:22:39,620
a very very small pool of ideas compared

00:22:35,330 --> 00:22:42,710
to all of our imaginations combined so

00:22:39,620 --> 00:22:44,510
let's work together and take all of your

00:22:42,710 --> 00:22:47,240
ideas and turn them into something

00:22:44,510 --> 00:22:49,610
awesome in Django going forward so

00:22:47,240 --> 00:22:51,860
Django itself as we're going forward

00:22:49,610 --> 00:22:53,750
into new releases and also in the apps

00:22:51,860 --> 00:23:01,630
around it that support it that we all

00:22:53,750 --> 00:23:01,630
use and enjoy every day end of show so

00:23:08,499 --> 00:23:13,389
thank you very much do we have questions

00:23:15,370 --> 00:23:18,919
thanks Ivan do you know ahead of time

00:23:17,690 --> 00:23:22,820
where you're going to be publishing

00:23:18,919 --> 00:23:29,289
these notes mmm I'll probably put it on

00:23:22,820 --> 00:23:36,080
github / dr. Mears those things any more

00:23:29,289 --> 00:23:38,659
questions hey um one of my thoughts

00:23:36,080 --> 00:23:40,999
about this about like lots of little

00:23:38,659 --> 00:23:43,850
generic utilities and one of things you

00:23:40,999 --> 00:23:46,399
notice if you look at different people's

00:23:43,850 --> 00:23:48,049
code or different projects and you find

00:23:46,399 --> 00:23:50,119
that a lot of developers have their own

00:23:48,049 --> 00:23:52,639
ways of doing things and there are

00:23:50,119 --> 00:23:56,269
already things out there that do what

00:23:52,639 --> 00:23:58,909
they want but someone has decided to do

00:23:56,269 --> 00:24:00,619
something else just because and it comes

00:23:58,909 --> 00:24:02,960
down to personal preferences really and

00:24:00,619 --> 00:24:04,940
so my thought is that it might actually

00:24:02,960 --> 00:24:06,860
be useful for some of these things to be

00:24:04,940 --> 00:24:08,480
in core just so that there is an

00:24:06,860 --> 00:24:13,909
established pattern for for doing

00:24:08,480 --> 00:24:15,590
something because yeah I just find the

00:24:13,909 --> 00:24:17,179
lots of different utilities out there a

00:24:15,590 --> 00:24:19,450
little bit confusing so yeah what are

00:24:17,179 --> 00:24:22,129
your thoughts about that I think if it's

00:24:19,450 --> 00:24:25,159
definitely an established best practice

00:24:22,129 --> 00:24:28,070
then yeah we can get that stuff into

00:24:25,159 --> 00:24:29,450
core I think in general we should be

00:24:28,070 --> 00:24:31,070
just making call more flexible and

00:24:29,450 --> 00:24:32,269
having pluggable things but yeah there's

00:24:31,070 --> 00:24:35,629
certainly a place for if there is

00:24:32,269 --> 00:24:37,190
something that is definitely the best

00:24:35,629 --> 00:24:39,049
way forward we talked about factory boy

00:24:37,190 --> 00:24:41,090
earlier today may be things like that if

00:24:39,049 --> 00:24:43,519
we decide yes that is the de facto

00:24:41,090 --> 00:24:44,690
standard for Django and then yeah

00:24:43,519 --> 00:24:51,249
absolutely we could be adding those

00:24:44,690 --> 00:24:51,249
things in any more questions

00:24:54,289 --> 00:24:58,980
did you say that that code is that

00:24:56,789 --> 00:25:02,570
actually available anywhere your code

00:24:58,980 --> 00:25:05,280
library yeah the Django generic yeah

00:25:02,570 --> 00:25:08,010
your library right yeah the docking is

00:25:05,280 --> 00:25:09,809
generic yes the generic package is on my

00:25:08,010 --> 00:25:11,730
bitbucket account so we're going to show

00:25:09,809 --> 00:25:13,320
it up on github so bitbucket again dr.

00:25:11,730 --> 00:25:15,660
Mears and you'll be able to find it

00:25:13,320 --> 00:25:19,950
there I'll actually put the slide this

00:25:15,660 --> 00:25:28,100
is actually Python code as well I'll put

00:25:19,950 --> 00:25:32,450
that up to all right any more questions

00:25:28,100 --> 00:25:32,450

YouTube URL: https://www.youtube.com/watch?v=drsuU7OdmOM


