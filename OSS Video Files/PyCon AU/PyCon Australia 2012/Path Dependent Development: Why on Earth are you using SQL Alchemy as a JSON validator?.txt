Title: Path Dependent Development: Why on Earth are you using SQL Alchemy as a JSON validator?
Publication date: 2012-08-23
Playlist: PyCon Australia 2012
Description: 
	Nick Coghlan
The PulpDist project uses SQL Alchemy as part of a custom JSON validator. This could be seen as an unusual choice, so it's worth exploring the way this approach came to be adopted.

Practicing iterative development means coping with th
Captions: 
	00:00:00,380 --> 00:00:07,379
hi good afternoon our next presenter

00:00:04,350 --> 00:00:09,690
Nick colon is that correct come come

00:00:07,379 --> 00:00:11,580
well except red hat on the pulp disk

00:00:09,690 --> 00:00:14,070
project in his spare time he's a seep

00:00:11,580 --> 00:00:15,870
reifen pro core developer author of

00:00:14,070 --> 00:00:17,250
numerous Python enhancement proposals

00:00:15,870 --> 00:00:19,529
and a regular presenter at park on

00:00:17,250 --> 00:00:23,460
Australia today who report talking about

00:00:19,529 --> 00:00:26,430
path-dependent development thank you yes

00:00:23,460 --> 00:00:30,449
Red Hat tool Smith C Python core dev

00:00:26,430 --> 00:00:32,340
this is basically based on a bunch of

00:00:30,449 --> 00:00:34,559
observations from about 10 years in the

00:00:32,340 --> 00:00:38,930
defense industry working at Red Hat and

00:00:34,559 --> 00:00:41,910
working on a bunch of open source stuff

00:00:38,930 --> 00:00:44,219
many years ago a statistician made a

00:00:41,910 --> 00:00:46,850
very useful observation all models are

00:00:44,219 --> 00:00:48,870
wrong some of them are useful and

00:00:46,850 --> 00:00:50,399
earlier in the same book that quote

00:00:48,870 --> 00:00:53,760
comes from he actually said how long do

00:00:50,399 --> 00:00:56,360
they have to be to not be useful and

00:00:53,760 --> 00:00:58,199
this applies to software as well

00:00:56,360 --> 00:01:01,109
software development there's a classic

00:00:58,199 --> 00:01:02,340
trade-off it's basically says you can

00:01:01,109 --> 00:01:04,710
have it fast you can have a good you can

00:01:02,340 --> 00:01:06,869
have a cheap choose any two that's

00:01:04,710 --> 00:01:10,580
actually not true you can have all three

00:01:06,869 --> 00:01:17,520
you just have to not be doing much and

00:01:10,580 --> 00:01:19,170
so to fit within that basically we have

00:01:17,520 --> 00:01:21,540
to make all these decisions on what are

00:01:19,170 --> 00:01:24,420
we not going to do in order to ship

00:01:21,540 --> 00:01:26,909
something and so good enough to be

00:01:24,420 --> 00:01:28,920
useful yep ship it out the door because

00:01:26,909 --> 00:01:30,990
if it's just sitting on our servers and

00:01:28,920 --> 00:01:34,590
end users can't get at it then it's

00:01:30,990 --> 00:01:37,320
definitely not useful to anybody however

00:01:34,590 --> 00:01:38,820
the decisions we make particularly in

00:01:37,320 --> 00:01:41,970
early phases to actually get stuff out

00:01:38,820 --> 00:01:43,409
the door they're going to leave their

00:01:41,970 --> 00:01:46,530
fingerprints over the software long

00:01:43,409 --> 00:01:48,210
after long after those all the original

00:01:46,530 --> 00:01:50,700
decisions have been erased and new

00:01:48,210 --> 00:01:53,659
features have been added and so on but

00:01:50,700 --> 00:01:57,780
you can't get rid of though that history

00:01:53,659 --> 00:02:00,180
and so what it means is something to be

00:01:57,780 --> 00:02:01,740
good enough it depends on huge numbers

00:02:00,180 --> 00:02:03,149
of different things it depends on what

00:02:01,740 --> 00:02:05,280
what your priorities are what your

00:02:03,149 --> 00:02:07,079
resources are what are you building why

00:02:05,280 --> 00:02:10,619
are you building it who are you building

00:02:07,079 --> 00:02:12,170
it for who's doing the building what

00:02:10,619 --> 00:02:15,440
tools do you have available to

00:02:12,170 --> 00:02:20,349
stuff and then one of the things is how

00:02:15,440 --> 00:02:23,000
big a gamble you prepare to take so and

00:02:20,349 --> 00:02:25,010
different industries different tasks it

00:02:23,000 --> 00:02:26,390
makes a huge difference if you're

00:02:25,010 --> 00:02:28,130
building stuff for a corporate internet

00:02:26,390 --> 00:02:29,420
you can pretty much trust the network

00:02:28,130 --> 00:02:31,580
there's not going to be too much I'll

00:02:29,420 --> 00:02:33,140
style traffic on it and you don't have

00:02:31,580 --> 00:02:36,010
to go searching for users because people

00:02:33,140 --> 00:02:38,290
going to get told you shall use this and

00:02:36,010 --> 00:02:41,660
but if you're building a web startup

00:02:38,290 --> 00:02:44,660
internet internet is a hostile place you

00:02:41,660 --> 00:02:46,190
can expect to be attacked and your users

00:02:44,660 --> 00:02:47,420
are everything because if users hate

00:02:46,190 --> 00:02:49,790
your stuff they'll just go elsewhere

00:02:47,420 --> 00:02:51,080
they've got peeps of choices heaps of

00:02:49,790 --> 00:02:54,860
ways to spend their time you want them

00:02:51,080 --> 00:02:56,209
to be using your stuff and then you can

00:02:54,860 --> 00:02:57,739
go completely different get away from

00:02:56,209 --> 00:03:00,200
the web entirely and if you're selling

00:02:57,739 --> 00:03:02,000
Hardware you may be writing software to

00:03:00,200 --> 00:03:04,069
configure it you may writing software to

00:03:02,000 --> 00:03:05,269
manage it and in that case what you're

00:03:04,069 --> 00:03:06,799
really selling is the hardware the

00:03:05,269 --> 00:03:10,280
software is just kind of a necessary

00:03:06,799 --> 00:03:14,330
evil to make to make your hardware

00:03:10,280 --> 00:03:15,830
useful and so trade-offs are needed we

00:03:14,330 --> 00:03:20,060
have to decide what are we not going to

00:03:15,830 --> 00:03:22,370
do to get stuff out the door and the

00:03:20,060 --> 00:03:26,630
obvious one and this is kind of the core

00:03:22,370 --> 00:03:29,420
of iterative iterative development is

00:03:26,630 --> 00:03:31,519
you just do less you you make your

00:03:29,420 --> 00:03:33,799
initial version you decide we're going

00:03:31,519 --> 00:03:36,109
to do one or a few things really well

00:03:33,799 --> 00:03:41,090
and everything else we're going to leave

00:03:36,109 --> 00:03:43,640
until later and if you have a if you

00:03:41,090 --> 00:03:45,230
have a full set of requirements and you

00:03:43,640 --> 00:03:47,209
do eighty percent of a hundred percent

00:03:45,230 --> 00:03:49,010
of those requirements well your

00:03:47,209 --> 00:03:51,290
software's useful cook useless because

00:03:49,010 --> 00:03:52,220
it doesn't do anything whereas if you

00:03:51,290 --> 00:03:53,420
pick twenty percent of those

00:03:52,220 --> 00:03:54,859
requirements and saying well we're going

00:03:53,420 --> 00:03:57,079
to do those completely and make them

00:03:54,859 --> 00:03:59,060
work your software can do something and

00:03:57,079 --> 00:04:01,880
can't do everything but it will be

00:03:59,060 --> 00:04:03,200
useful to a subset of your users and one

00:04:01,880 --> 00:04:07,430
of the other big things is if you add a

00:04:03,200 --> 00:04:09,230
piece of functionality badly people who

00:04:07,430 --> 00:04:11,299
really want that feature will make it

00:04:09,230 --> 00:04:13,100
work for them which means you can't take

00:04:11,299 --> 00:04:17,440
it away later no matter how broken it is

00:04:13,100 --> 00:04:19,370
because they won't remember that you

00:04:17,440 --> 00:04:20,810
took something away and gave them

00:04:19,370 --> 00:04:23,360
something better don't remember that you

00:04:20,810 --> 00:04:24,060
took something away from them and so

00:04:23,360 --> 00:04:26,400
yeah

00:04:24,060 --> 00:04:32,550
doing less leaves more room to grow into

00:04:26,400 --> 00:04:34,470
the future flexibility it's very very

00:04:32,550 --> 00:04:36,750
tempting to avoid making decisions and

00:04:34,470 --> 00:04:39,690
say oh we'll just make it configurable

00:04:36,750 --> 00:04:41,940
then we don't have to decide not usually

00:04:39,690 --> 00:04:43,950
a good idea everything you make

00:04:41,940 --> 00:04:47,419
configurable makes your testing harder

00:04:43,950 --> 00:04:49,650
it makes your maintenance harder now

00:04:47,419 --> 00:04:51,510
something people will sometimes say oh

00:04:49,650 --> 00:04:53,580
well you don't need to make it

00:04:51,510 --> 00:04:57,000
configurable so it's okay to hard code

00:04:53,580 --> 00:04:58,860
it everywhere no you do want to separate

00:04:57,000 --> 00:05:01,979
your concerns you do want to say well

00:04:58,860 --> 00:05:04,440
yes say I'm only going to support SQL

00:05:01,979 --> 00:05:07,020
light in the initial version but I'll

00:05:04,440 --> 00:05:10,680
still configure it in one place to say

00:05:07,020 --> 00:05:12,780
my database is SQL light everywhere else

00:05:10,680 --> 00:05:14,419
will get it from there so later on when

00:05:12,780 --> 00:05:17,130
you do decide to make it configurable

00:05:14,419 --> 00:05:19,440
you only have to add the configurations

00:05:17,130 --> 00:05:22,470
for in one place every very else will

00:05:19,440 --> 00:05:24,600
inherit it and then the other thing too

00:05:22,470 --> 00:05:25,950
is that there's a lot of flexible

00:05:24,600 --> 00:05:28,440
support tools out there that it can look

00:05:25,950 --> 00:05:31,640
like oh well we don't need that

00:05:28,440 --> 00:05:34,560
flexibility we can do it ourselves

00:05:31,640 --> 00:05:37,080
there's some tools some problems that

00:05:34,560 --> 00:05:39,990
are so well solved that building it from

00:05:37,080 --> 00:05:41,490
scratch just isn't a good idea what you

00:05:39,990 --> 00:05:44,820
can do is you can use those flexible

00:05:41,490 --> 00:05:46,890
support tools like SQL alchemy and you

00:05:44,820 --> 00:05:48,690
just configure them the way you can

00:05:46,890 --> 00:05:50,490
figure them one particular way initially

00:05:48,690 --> 00:05:52,979
but you know that you've got that

00:05:50,490 --> 00:05:55,470
infrastructure there later on when you

00:05:52,979 --> 00:05:58,410
do decide to make it flexible you know

00:05:55,470 --> 00:06:00,270
your tools will support it other cases

00:05:58,410 --> 00:06:04,080
there's bigger frame works particularly

00:06:00,270 --> 00:06:05,729
mega frameworks like Django they lock in

00:06:04,080 --> 00:06:08,639
a bunch of decisions and make it hard to

00:06:05,729 --> 00:06:11,100
change them but on the plus side they

00:06:08,639 --> 00:06:13,530
lock in a bunch of decisions so you make

00:06:11,100 --> 00:06:14,729
one decision i'm using Jengo and a whole

00:06:13,530 --> 00:06:15,930
bunch of other decisions are made for

00:06:14,729 --> 00:06:20,160
you and you don't need to worry about

00:06:15,930 --> 00:06:23,280
them and because of those that Common

00:06:20,160 --> 00:06:27,740
Core you can get a very rich ecosystem

00:06:23,280 --> 00:06:31,950
around that that you can work into

00:06:27,740 --> 00:06:34,370
another fun area of trade-off and this

00:06:31,950 --> 00:06:36,630
is the cause of much evil in the world

00:06:34,370 --> 00:06:37,560
there's an awful lot of software we take

00:06:36,630 --> 00:06:45,630
shortcuts on the secure

00:06:37,560 --> 00:06:47,160
different it's really bad but you can

00:06:45,630 --> 00:06:49,139
also understand why people do it because

00:06:47,160 --> 00:06:50,910
it's like hey it's a trusted system it's

00:06:49,139 --> 00:06:53,100
only going to run inside this this thing

00:06:50,910 --> 00:06:54,510
here and then somebody in marketing goes

00:06:53,100 --> 00:06:58,730
hey that's a really cool product we

00:06:54,510 --> 00:06:58,730
should sell that to people and you go

00:06:59,210 --> 00:07:05,669
but yes so the idea behind defense in

00:07:04,350 --> 00:07:09,150
depth is that even if you've got an

00:07:05,669 --> 00:07:10,740
insecure core you can put certain amount

00:07:09,150 --> 00:07:14,940
of perimeter defenses around it and make

00:07:10,740 --> 00:07:16,620
it semi tolerable but security is one of

00:07:14,940 --> 00:07:19,169
those very very risky ones that if it's

00:07:16,620 --> 00:07:20,910
ever going to be if a system is ever

00:07:19,169 --> 00:07:23,190
going to be ended out to the general

00:07:20,910 --> 00:07:26,370
public or run on the public internet

00:07:23,190 --> 00:07:30,320
it's very hard to reverse it to engineer

00:07:26,370 --> 00:07:33,139
security back in if you've gone on

00:07:30,320 --> 00:07:37,350
unsecured choices from the beginning so

00:07:33,139 --> 00:07:39,840
it can be that's a very tricky

00:07:37,350 --> 00:07:41,640
transition to make microsoft have

00:07:39,840 --> 00:07:43,610
actually over the course of decades

00:07:41,640 --> 00:07:48,750
mostly managed to do it with windows

00:07:43,610 --> 00:07:50,880
which is kind of impressive so but yeah

00:07:48,750 --> 00:07:53,030
the basic idea is to try and make the

00:07:50,880 --> 00:07:55,320
easy option in this your option the same

00:07:53,030 --> 00:07:56,580
that can be a very challenging thing

00:07:55,320 --> 00:07:59,270
because you're trading off convenience

00:07:56,580 --> 00:08:02,820
against security a lot of the time

00:07:59,270 --> 00:08:04,590
another controversial one reinventing

00:08:02,820 --> 00:08:07,620
wheels can actually be a good idea

00:08:04,590 --> 00:08:09,630
symptoms and the reason it can be a good

00:08:07,620 --> 00:08:12,090
idea is that dependency management isn't

00:08:09,630 --> 00:08:14,250
always that easy particularly if you're

00:08:12,090 --> 00:08:18,600
in an environment where you may need to

00:08:14,250 --> 00:08:20,340
manage legal risk and so if you're only

00:08:18,600 --> 00:08:24,360
dealing with a very small subset of a

00:08:20,340 --> 00:08:26,039
problem it can be very tempting to just

00:08:24,360 --> 00:08:29,789
say look we'll just do something simple

00:08:26,039 --> 00:08:31,740
and if you do it in a in a sensible way

00:08:29,789 --> 00:08:34,650
and you have a very limited modular API

00:08:31,740 --> 00:08:36,419
to that chunk of functionality the basic

00:08:34,650 --> 00:08:38,550
idea is that you do the simple thing

00:08:36,419 --> 00:08:40,680
first it does what you need as your

00:08:38,550 --> 00:08:42,900
needs grow you don't make your custom

00:08:40,680 --> 00:08:45,630
solution more complicated you get rid of

00:08:42,900 --> 00:08:47,700
it and you put a real solution in and

00:08:45,630 --> 00:08:50,750
that's the number one thing to watch out

00:08:47,700 --> 00:08:54,860
for is that if say you

00:08:50,750 --> 00:08:58,430
oh well I will do my own RM and well

00:08:54,860 --> 00:09:00,620
don't but if you've got if you're doing

00:08:58,430 --> 00:09:04,130
a very simple subset of a problem then

00:09:00,620 --> 00:09:05,840
okay reinvent that wheel as keep a

00:09:04,130 --> 00:09:10,310
really close eye on the complexity

00:09:05,840 --> 00:09:12,070
because you you as the problem starts

00:09:10,310 --> 00:09:14,320
getting more complicated as you start

00:09:12,070 --> 00:09:17,630
getting deeper into that problem space

00:09:14,320 --> 00:09:19,910
there are usually going to be good well

00:09:17,630 --> 00:09:23,780
tested solutions out there that solve

00:09:19,910 --> 00:09:26,090
that problem thoroughly and so you can

00:09:23,780 --> 00:09:28,640
you don't get attached to your

00:09:26,090 --> 00:09:29,960
reinvented wheels because you will end

00:09:28,640 --> 00:09:31,820
up maintaining them for a very long time

00:09:29,960 --> 00:09:33,770
you want to kill them at the first

00:09:31,820 --> 00:09:37,010
opportunity and replace them with

00:09:33,770 --> 00:09:40,610
something proper documentation is

00:09:37,010 --> 00:09:43,400
another lovely one open source density

00:09:40,610 --> 00:09:44,750
at hamad for documentation fortunately

00:09:43,400 --> 00:09:46,250
the Python community tends to be better

00:09:44,750 --> 00:09:49,940
than most about encouraging good

00:09:46,250 --> 00:09:52,100
documentation but it boils down to is

00:09:49,940 --> 00:09:54,530
how sophisticated a user's expected to

00:09:52,100 --> 00:09:55,910
be if you're building something that's

00:09:54,530 --> 00:09:57,230
intended for software developers that

00:09:55,910 --> 00:09:59,510
not only for the developers actually

00:09:57,230 --> 00:10:00,320
working on that product then you can get

00:09:59,510 --> 00:10:02,300
away with some pretty piss-poor

00:10:00,320 --> 00:10:06,020
documentation because you can say out

00:10:02,300 --> 00:10:08,530
read the source but if you want to build

00:10:06,020 --> 00:10:12,500
your product can be deployed or used by

00:10:08,530 --> 00:10:14,150
non-technical end users then either your

00:10:12,500 --> 00:10:17,150
UI has to be so good that people don't

00:10:14,150 --> 00:10:18,920
need documentation or it needs to be

00:10:17,150 --> 00:10:21,530
thoroughly documented to explain in

00:10:18,920 --> 00:10:24,860
everything that's needed this can be

00:10:21,530 --> 00:10:27,470
particularly obvious in domain specific

00:10:24,860 --> 00:10:29,120
software which is designed to solve

00:10:27,470 --> 00:10:35,180
problems in a very specific technical

00:10:29,120 --> 00:10:38,180
domain and one of the challenges in that

00:10:35,180 --> 00:10:40,010
space can be how much you trying to

00:10:38,180 --> 00:10:41,620
teach users about the domain and how

00:10:40,010 --> 00:10:43,550
much do you assume they already know

00:10:41,620 --> 00:10:46,520
because if you're writing biology

00:10:43,550 --> 00:10:47,960
software and it's designed to be used by

00:10:46,520 --> 00:10:49,460
experienced biologists then you can

00:10:47,960 --> 00:10:51,950
assume a heck of a lot and just use

00:10:49,460 --> 00:10:54,200
terms and expect people to know what

00:10:51,950 --> 00:10:55,580
they mean and not worry about the fact

00:10:54,200 --> 00:10:58,760
that the non biologist is going to have

00:10:55,580 --> 00:11:00,740
no idea what it means one of the other

00:10:58,760 --> 00:11:02,329
things is that if piece of software is

00:11:00,740 --> 00:11:07,360
in a high state of flux

00:11:02,329 --> 00:11:10,309
then documenting it may end up being a

00:11:07,360 --> 00:11:12,619
net loss because you've just created

00:11:10,309 --> 00:11:14,149
you've just increased the amount of work

00:11:12,619 --> 00:11:16,129
you have to do as you interact through

00:11:14,149 --> 00:11:18,019
changes so if something's highly

00:11:16,129 --> 00:11:20,059
unstable then it may be better off

00:11:18,019 --> 00:11:23,480
waiting until it stabilizes a bit before

00:11:20,059 --> 00:11:25,100
you doc the documentation down the risk

00:11:23,480 --> 00:11:27,290
you have to trade off here is that

00:11:25,100 --> 00:11:29,089
sometimes documentation is a wonderful

00:11:27,290 --> 00:11:31,339
way to highlight when you have a design

00:11:29,089 --> 00:11:34,189
problem or a particular API design

00:11:31,339 --> 00:11:35,720
problem one that happened recently in

00:11:34,189 --> 00:11:39,889
the standard library is we brought in

00:11:35,720 --> 00:11:43,399
the IP addr project as IP address in the

00:11:39,889 --> 00:11:45,499
standard library IP addr was written for

00:11:43,399 --> 00:11:46,970
networking expert it assumed that people

00:11:45,499 --> 00:11:49,699
already knew all the network in

00:11:46,970 --> 00:11:51,319
terminology it that they already knew

00:11:49,699 --> 00:11:54,949
how networking and IP addressing worked

00:11:51,319 --> 00:11:57,499
and it didn't follow the standard

00:11:54,949 --> 00:11:59,389
terminology it kind of cut a bunch of

00:11:57,499 --> 00:12:01,040
corners that if you already knew how

00:11:59,389 --> 00:12:03,110
networking works you'd be able to use

00:12:01,040 --> 00:12:05,600
that API if you're trying to use that

00:12:03,110 --> 00:12:09,860
API to learn our networking worked you

00:12:05,600 --> 00:12:11,419
had no chance and so most of the

00:12:09,860 --> 00:12:13,129
differences between the standard library

00:12:11,419 --> 00:12:16,279
version and the upstream version are all

00:12:13,129 --> 00:12:17,929
around that beginner audience of using

00:12:16,279 --> 00:12:23,299
the module to teach people how the

00:12:17,929 --> 00:12:24,949
domain works and so it's again a tricky

00:12:23,299 --> 00:12:27,769
trade off where you have to decide who's

00:12:24,949 --> 00:12:30,110
your audience how much documentation do

00:12:27,769 --> 00:12:36,019
they need and right what's needed for

00:12:30,110 --> 00:12:39,079
the audience that you have oops another

00:12:36,019 --> 00:12:40,929
interesting space is and there's entire

00:12:39,079 --> 00:12:44,119
conferences devoted to a bunch of these

00:12:40,929 --> 00:12:45,889
tests quality is one where a lot of

00:12:44,119 --> 00:12:47,749
people say oh only one answer per test

00:12:45,889 --> 00:12:50,869
never do more than one a certain single

00:12:47,749 --> 00:12:52,669
test and that's actually really good

00:12:50,869 --> 00:12:55,429
advice because fine-grain test means

00:12:52,669 --> 00:12:56,899
that if something breaks that it will

00:12:55,429 --> 00:13:00,919
point you directly to what you need to

00:12:56,899 --> 00:13:02,360
fix the problem with that is fine

00:13:00,919 --> 00:13:03,649
grained tests can be a pain to write

00:13:02,360 --> 00:13:06,049
particularly if you're doing integration

00:13:03,649 --> 00:13:08,179
tests where you need to bring up a bunch

00:13:06,049 --> 00:13:10,699
of infrastructure and then tear it down

00:13:08,179 --> 00:13:12,679
again when you're done they can be slow

00:13:10,699 --> 00:13:15,049
they can be hard to write can be

00:13:12,679 --> 00:13:15,680
problematic so coarse grain tests are

00:13:15,049 --> 00:13:18,200
wonderful

00:13:15,680 --> 00:13:19,940
because you set it up you do a bunch of

00:13:18,200 --> 00:13:23,240
things you make sure that everything you

00:13:19,940 --> 00:13:25,399
expect to happen happens and the thing

00:13:23,240 --> 00:13:26,720
is if it never breaks of course grain

00:13:25,399 --> 00:13:29,930
tests can be just as good as a fine

00:13:26,720 --> 00:13:31,250
grain test and so one useful trick to do

00:13:29,930 --> 00:13:35,870
is you actually write your coarse grain

00:13:31,250 --> 00:13:38,060
tests first and if they continue to pass

00:13:35,870 --> 00:13:39,440
then cool you've made sure that it keeps

00:13:38,060 --> 00:13:42,320
working at least as well as it did at

00:13:39,440 --> 00:13:43,880
the start if it ever fails then you can

00:13:42,320 --> 00:13:46,040
add your fine grain tests to actually

00:13:43,880 --> 00:13:47,600
narrow down the failure and if that

00:13:46,040 --> 00:13:49,940
failure ever happens again then it'll

00:13:47,600 --> 00:13:51,170
get picked up straight away and so it's

00:13:49,940 --> 00:13:54,080
kind of like you ain't going to need it

00:13:51,170 --> 00:13:55,910
applied to your test suite because the

00:13:54,080 --> 00:13:57,440
fine grain tests if they don't fail that

00:13:55,910 --> 00:14:01,550
debugging aids not go actually going to

00:13:57,440 --> 00:14:03,290
help you much sometimes you'll hear the

00:14:01,550 --> 00:14:05,209
claim made that slow tests are useless

00:14:03,290 --> 00:14:07,870
if you test it too slow you may as well

00:14:05,209 --> 00:14:10,339
not have them that's rubbish they're

00:14:07,870 --> 00:14:12,110
slow tests are way better than no test

00:14:10,339 --> 00:14:14,060
because at least even if slow tests

00:14:12,110 --> 00:14:15,800
aren't run even if they're too slow for

00:14:14,060 --> 00:14:17,870
you developers run them before every

00:14:15,800 --> 00:14:20,000
commit you can at least run them

00:14:17,870 --> 00:14:21,860
selectively to cover what you're working

00:14:20,000 --> 00:14:23,839
on and you can hug them into a

00:14:21,860 --> 00:14:25,339
continuous any integration system so at

00:14:23,839 --> 00:14:28,390
least get some kind of alert when your

00:14:25,339 --> 00:14:30,980
stuff it when you've broken something

00:14:28,390 --> 00:14:33,290
the other one is that you'll often get

00:14:30,980 --> 00:14:34,640
hear people say look your test shouldn't

00:14:33,290 --> 00:14:37,700
need any manual setup you should be able

00:14:34,640 --> 00:14:40,040
to just run them and again excellent

00:14:37,700 --> 00:14:43,790
advice you're not going to get there on

00:14:40,040 --> 00:14:45,440
day one and so tests that require you

00:14:43,790 --> 00:14:48,020
may have to say set up a database

00:14:45,440 --> 00:14:51,380
manually or set up a web service and say

00:14:48,020 --> 00:14:52,940
write tests against bath and again a

00:14:51,380 --> 00:14:54,770
heck of a lot better than not having the

00:14:52,940 --> 00:14:56,270
tests at all a little bit of manual

00:14:54,770 --> 00:15:00,170
setup you can put up with that for quite

00:14:56,270 --> 00:15:01,880
a while and then one of the other common

00:15:00,170 --> 00:15:03,380
pieces of ice and test quality is that

00:15:01,880 --> 00:15:07,970
if you're doing particular you're doing

00:15:03,380 --> 00:15:09,589
test-driven development don't not to

00:15:07,970 --> 00:15:10,940
commit a fix if you do if you haven't

00:15:09,589 --> 00:15:15,589
figured out how to test it to make sure

00:15:10,940 --> 00:15:17,600
that net problem never comes back that's

00:15:15,589 --> 00:15:19,310
wonderful doesn't really work if you've

00:15:17,600 --> 00:15:21,670
got bugs that are hard to reproduce and

00:15:19,310 --> 00:15:23,870
development if you can't reproduce it

00:15:21,670 --> 00:15:25,279
effectively you can you may be able to

00:15:23,870 --> 00:15:28,010
figure out what the problem is through

00:15:25,279 --> 00:15:28,339
analysis and looking through logs and

00:15:28,010 --> 00:15:31,490
that kind

00:15:28,339 --> 00:15:36,529
stuff and figure out how to fix it and

00:15:31,490 --> 00:15:37,910
in that case just fix it and often can

00:15:36,529 --> 00:15:39,170
be useful to put a comment in saying hey

00:15:37,910 --> 00:15:40,430
this is here to fix this particular

00:15:39,170 --> 00:15:43,579
problem we couldn't figure out how to

00:15:40,430 --> 00:15:52,399
test it one of the many good uses for

00:15:43,579 --> 00:15:55,579
comments another one which is again

00:15:52,399 --> 00:15:58,309
something that is a development process

00:15:55,579 --> 00:16:00,980
that can trade can be a useful trade off

00:15:58,309 --> 00:16:03,170
is the code is written to tell computers

00:16:00,980 --> 00:16:04,459
what to do and is written to tell people

00:16:03,170 --> 00:16:07,730
in the future trying to maintain your

00:16:04,459 --> 00:16:09,740
stuff what it's meant to do tests will

00:16:07,730 --> 00:16:11,089
tell it will cover the fact of are you

00:16:09,740 --> 00:16:13,040
telling the computer the right thing

00:16:11,089 --> 00:16:14,300
what code reviews will tell you is are

00:16:13,040 --> 00:16:17,329
you telling future maintained as the

00:16:14,300 --> 00:16:18,680
right thing and the interesting thing is

00:16:17,329 --> 00:16:19,910
if you've got a very small development

00:16:18,680 --> 00:16:22,879
team and they're spending lots of time

00:16:19,910 --> 00:16:26,480
together and a roll across the whole

00:16:22,879 --> 00:16:28,550
code base then reviews may not help you

00:16:26,480 --> 00:16:30,050
much you'll get a pic you'll get a fair

00:16:28,550 --> 00:16:33,439
bit of coverage just from working on

00:16:30,050 --> 00:16:35,769
shared code where it where they really

00:16:33,439 --> 00:16:39,410
come into their own is as the team grows

00:16:35,769 --> 00:16:41,829
they're an amazing tool for senior

00:16:39,410 --> 00:16:45,319
developers to mentor junior ones

00:16:41,829 --> 00:16:46,850
maintaining code consistency maintaining

00:16:45,319 --> 00:16:48,410
some level of awareness and ownership

00:16:46,850 --> 00:16:49,819
across the whole code base rather than

00:16:48,410 --> 00:16:53,569
people getting siloed into particular

00:16:49,819 --> 00:16:57,139
bits if you don't have the right tools

00:16:53,569 --> 00:17:00,679
the overheads going to be awful so you

00:16:57,139 --> 00:17:02,929
really do need the tools to support this

00:17:00,679 --> 00:17:04,880
kind of review process and there's lots

00:17:02,929 --> 00:17:07,250
out there like right field and Garrett

00:17:04,880 --> 00:17:09,199
and review board and so there's heaps of

00:17:07,250 --> 00:17:10,669
ways you can do the code reviews but as

00:17:09,199 --> 00:17:15,140
a team grows they definitely start

00:17:10,669 --> 00:17:17,390
becoming necessary this is really only

00:17:15,140 --> 00:17:20,600
just scratching the surface of all the

00:17:17,390 --> 00:17:22,909
possible trade-offs performance and

00:17:20,600 --> 00:17:25,370
scalability if you're building your

00:17:22,909 --> 00:17:27,169
system to handle thousands of users and

00:17:25,370 --> 00:17:28,850
it's going to get deployed on to a court

00:17:27,169 --> 00:17:31,610
for an intern internet for a company of

00:17:28,850 --> 00:17:35,330
100 probably over engineering something

00:17:31,610 --> 00:17:37,760
somewhere reliability not everything's

00:17:35,330 --> 00:17:39,169
mission-critical usability not

00:17:37,760 --> 00:17:41,059
everything lives or dies by the

00:17:39,169 --> 00:17:41,900
happiness of its users and this is why

00:17:41,059 --> 00:17:45,290
enterprise soft

00:17:41,900 --> 00:17:46,700
is almost universally awful because the

00:17:45,290 --> 00:17:50,480
people buying it and other people using

00:17:46,700 --> 00:17:53,750
it maintainability if you're doing a

00:17:50,480 --> 00:17:58,130
throwaway script hope that it really is

00:17:53,750 --> 00:17:59,840
throw away but business risk different

00:17:58,130 --> 00:18:04,220
different organizations and different

00:17:59,840 --> 00:18:06,500
context it'll it'll change how much you

00:18:04,220 --> 00:18:08,050
how much worried about legal

00:18:06,500 --> 00:18:10,520
implications and that kind of thing

00:18:08,050 --> 00:18:13,310
process automation if process is still

00:18:10,520 --> 00:18:16,130
heavily in flux so like if you're doing

00:18:13,310 --> 00:18:18,380
a process and every time every time you

00:18:16,130 --> 00:18:21,200
go to do it you're tweaking your scripts

00:18:18,380 --> 00:18:22,760
that automate that process it's a sign

00:18:21,200 --> 00:18:27,110
that that process isn't stable enough to

00:18:22,760 --> 00:18:30,770
be automated yet and yeah there's more

00:18:27,110 --> 00:18:32,540
it's it's one of the most interesting

00:18:30,770 --> 00:18:34,330
aspects of software development is how

00:18:32,540 --> 00:18:38,510
do you how do you make these trade-offs

00:18:34,330 --> 00:18:40,580
and so the these decisions are

00:18:38,510 --> 00:18:43,430
inevitable and we kind of want to do

00:18:40,580 --> 00:18:47,510
them in a way that doesn't come back to

00:18:43,430 --> 00:18:49,130
haunt is too badly later on and so one

00:18:47,510 --> 00:18:52,670
of the main things is to have an exit

00:18:49,130 --> 00:18:54,170
strategy by trying to become aware of

00:18:52,670 --> 00:18:55,640
all these different trade-offs that we

00:18:54,170 --> 00:18:58,280
all make every day is we're developing

00:18:55,640 --> 00:19:00,410
software if we have some idea of what

00:18:58,280 --> 00:19:02,630
we're not doing and we're making a

00:19:00,410 --> 00:19:06,920
conscious choice to not do it at least

00:19:02,630 --> 00:19:09,320
not do it now then it makes it easier to

00:19:06,920 --> 00:19:14,530
have in mind some way of how we're going

00:19:09,320 --> 00:19:16,760
to get out of it later and this is where

00:19:14,530 --> 00:19:18,710
this is where you ain't going to need it

00:19:16,760 --> 00:19:20,480
it's kind of more like well you're

00:19:18,710 --> 00:19:23,660
probably not going to need it but if you

00:19:20,480 --> 00:19:26,510
do need it here's how to get yourself

00:19:23,660 --> 00:19:28,310
out from where you are and then the idea

00:19:26,510 --> 00:19:29,720
of iterative development then is you

00:19:28,310 --> 00:19:31,610
kind of have this huge cloud of these

00:19:29,720 --> 00:19:34,100
are the things we might do and these are

00:19:31,610 --> 00:19:35,630
the options we're keeping open and then

00:19:34,100 --> 00:19:37,400
the actual features that you do will

00:19:35,630 --> 00:19:39,860
depend on the demands that come from the

00:19:37,400 --> 00:19:43,100
business and from your users and what

00:19:39,860 --> 00:19:46,250
you actually decide to do later on and

00:19:43,100 --> 00:19:48,470
one of the other things too is that some

00:19:46,250 --> 00:19:50,690
of these decisions that you make really

00:19:48,470 --> 00:19:52,850
will lock out certain possibilities in

00:19:50,690 --> 00:19:54,440
the future and if you know that you've

00:19:52,850 --> 00:19:55,820
said look we're just never going to

00:19:54,440 --> 00:19:57,890
support that use case properly

00:19:55,820 --> 00:20:00,200
and someone comes along later and says

00:19:57,890 --> 00:20:03,590
hey look I want to do this and you can

00:20:00,200 --> 00:20:06,250
just go well no it's flat-out a bad

00:20:03,590 --> 00:20:08,840
choice for that because of these reasons

00:20:06,250 --> 00:20:12,590
and so yes sometimes the only Road

00:20:08,840 --> 00:20:14,210
answer's no patterns and processes a lot

00:20:12,590 --> 00:20:15,590
of the stuff that you can see about

00:20:14,210 --> 00:20:17,360
software architecture and design

00:20:15,590 --> 00:20:18,860
patterns and software processes and

00:20:17,360 --> 00:20:21,890
method i will use it's all about

00:20:18,860 --> 00:20:24,200
managing this it's about keeping your

00:20:21,890 --> 00:20:25,550
options open without making your current

00:20:24,200 --> 00:20:29,660
software more complicated than it needs

00:20:25,550 --> 00:20:31,010
to be if a system doesn't have a test

00:20:29,660 --> 00:20:33,110
suite that's kind of where you have to

00:20:31,010 --> 00:20:35,510
start because being able to run tests is

00:20:33,110 --> 00:20:37,700
what lets you change stuff without

00:20:35,510 --> 00:20:41,570
breaking anything that your users are

00:20:37,700 --> 00:20:44,510
relying on one of the other two things

00:20:41,570 --> 00:20:46,190
is that people often don't realize just

00:20:44,510 --> 00:20:48,740
how different prototyping is from

00:20:46,190 --> 00:20:50,150
implementation and the big difference

00:20:48,740 --> 00:20:51,710
between the two is that when you're

00:20:50,150 --> 00:20:54,230
prototyping the trade-offs you make are

00:20:51,710 --> 00:20:56,960
very very different because fast and

00:20:54,230 --> 00:20:58,370
cheap or the order of the day whereas

00:20:56,960 --> 00:21:00,440
once you get into implementation you

00:20:58,370 --> 00:21:02,210
need that good it needs to be good

00:21:00,440 --> 00:21:05,330
you're willing to pay more you're

00:21:02,210 --> 00:21:07,730
willing to take a bit more time or you

00:21:05,330 --> 00:21:09,980
go into the fully incremental

00:21:07,730 --> 00:21:11,600
development mode and you just do small

00:21:09,980 --> 00:21:15,350
increments which are all fast and good

00:21:11,600 --> 00:21:16,790
energy but yet the big thing is that

00:21:15,350 --> 00:21:17,870
when you're prototyping you're exploring

00:21:16,790 --> 00:21:19,580
you're trying to figure out what you can

00:21:17,870 --> 00:21:21,650
do when it's it when you're implementing

00:21:19,580 --> 00:21:23,840
you know what you want you just have to

00:21:21,650 --> 00:21:25,520
make it happen and there are social

00:21:23,840 --> 00:21:28,940
implications for these two which is that

00:21:25,520 --> 00:21:31,430
design decisions now are that design

00:21:28,940 --> 00:21:33,110
decisions that were made years ago may

00:21:31,430 --> 00:21:35,300
look really bad now but back then they

00:21:33,110 --> 00:21:37,910
may have made perfect sense and one of

00:21:35,300 --> 00:21:40,970
my favorite examples of this is the URL

00:21:37,910 --> 00:21:44,240
lib to ABI came from an era when HTTP

00:21:40,970 --> 00:21:45,770
hadn't won yet so HTTP now is

00:21:44,240 --> 00:21:47,990
practically a transport layer in its own

00:21:45,770 --> 00:21:50,410
right and that's what the request module

00:21:47,990 --> 00:21:53,030
does it just says it's HTTP all the time

00:21:50,410 --> 00:21:54,920
whereas URL leap HTTP was just one

00:21:53,030 --> 00:21:57,380
protocol among many which is why it's a

00:21:54,920 --> 00:21:59,000
pain to use for HTTP because you have to

00:21:57,380 --> 00:22:04,010
tweak it and tailor it and say I'm using

00:21:59,000 --> 00:22:05,150
HTTP so I think we I think as software

00:22:04,010 --> 00:22:08,840
developers we actually are getting

00:22:05,150 --> 00:22:09,740
better at building software but our

00:22:08,840 --> 00:22:11,240
ambitions for

00:22:09,740 --> 00:22:14,480
try and do with software more than

00:22:11,240 --> 00:22:17,330
keeping pace with their abilities so

00:22:14,480 --> 00:22:20,000
anyway so people have seen the promised

00:22:17,330 --> 00:22:22,370
in the thing of in the subtitle of the

00:22:20,000 --> 00:22:24,710
fact that i'm currently using SQL

00:22:22,370 --> 00:22:27,559
alchemy as part of a json validator and

00:22:24,710 --> 00:22:30,590
so yeah this is the story of how that

00:22:27,559 --> 00:22:33,650
came to happen innocent enough start

00:22:30,590 --> 00:22:35,330
just it's a mirroring network that that

00:22:33,650 --> 00:22:37,910
basically manages a bunch of arcing jobs

00:22:35,330 --> 00:22:40,340
and the original job definition is

00:22:37,910 --> 00:22:41,929
really simple guts of it where here's

00:22:40,340 --> 00:22:45,620
the server here's the here's the

00:22:41,929 --> 00:22:47,090
directory sync it down to here and I

00:22:45,620 --> 00:22:50,750
wrote a simple I custom validated for

00:22:47,090 --> 00:22:52,160
that because was really II turned out

00:22:50,750 --> 00:22:54,650
that simple format was too simple

00:22:52,160 --> 00:22:56,090
because you'd have multiple jobs coming

00:22:54,650 --> 00:22:57,650
from one server and you'd want to put

00:22:56,090 --> 00:22:59,630
them in the same place and local drive

00:22:57,650 --> 00:23:01,490
and there was an awful lot of

00:22:59,630 --> 00:23:02,690
duplication between the configuration

00:23:01,490 --> 00:23:06,110
files so there are lots of path

00:23:02,690 --> 00:23:09,650
fragments were in common and so what I

00:23:06,110 --> 00:23:12,710
did was redesigned the redesign the user

00:23:09,650 --> 00:23:15,470
format by the file format to basically

00:23:12,710 --> 00:23:18,230
reference out so that you'd say right

00:23:15,470 --> 00:23:20,000
I'm making this tree it's part of this

00:23:18,230 --> 00:23:22,580
local site which will define a bunch of

00:23:20,000 --> 00:23:24,380
stuff about the local directories and

00:23:22,580 --> 00:23:26,890
I'm copying it from this remote site

00:23:24,380 --> 00:23:29,360
which will define all the remote details

00:23:26,890 --> 00:23:30,920
and this kind of meant that the simple

00:23:29,360 --> 00:23:32,390
validator just couldn't handle the job

00:23:30,920 --> 00:23:35,630
anymore there was too much extra stuff

00:23:32,390 --> 00:23:37,280
it needed to do so i could have upgraded

00:23:35,630 --> 00:23:38,540
the validator but this is the thing I

00:23:37,280 --> 00:23:40,370
was talking about that you've got to

00:23:38,540 --> 00:23:43,520
keep an eye on your complexity and this

00:23:40,370 --> 00:23:45,850
tripped mine I just said no this is this

00:23:43,520 --> 00:23:47,870
is too far sep too far need to change it

00:23:45,850 --> 00:23:50,120
could have gone for an external Jason

00:23:47,870 --> 00:23:52,610
validation library problem was I had no

00:23:50,120 --> 00:23:53,840
idea what's a good validation library I

00:23:52,610 --> 00:23:56,120
would have had to be starting research

00:23:53,840 --> 00:23:58,130
from scratch or it could go a relational

00:23:56,120 --> 00:23:59,840
database because the constraints i

00:23:58,130 --> 00:24:02,840
needed to enforce were pretty similar to

00:23:59,840 --> 00:24:05,030
what a database does now there was

00:24:02,840 --> 00:24:06,500
another factor that i had another

00:24:05,030 --> 00:24:10,370
problem that i needed to solve at this

00:24:06,500 --> 00:24:12,710
point which was for the UI i needed to

00:24:10,370 --> 00:24:14,150
be able to filter by the ids and i

00:24:12,710 --> 00:24:15,920
needed sort by a bunch of different

00:24:14,150 --> 00:24:19,510
fields in the config file so this was

00:24:15,920 --> 00:24:23,059
sounding very familiar and sure enough

00:24:19,510 --> 00:24:23,299
relational databases like the problem I

00:24:23,059 --> 00:24:25,519
had

00:24:23,299 --> 00:24:27,919
was the problem relational databases try

00:24:25,519 --> 00:24:31,460
to solve writing SQL by hand is still

00:24:27,919 --> 00:24:33,470
painful and SQL alchemy was already had

00:24:31,460 --> 00:24:36,019
already in the environment I was

00:24:33,470 --> 00:24:38,269
deploying to so that was basically my

00:24:36,019 --> 00:24:40,129
solution was I'd read the concrete fall

00:24:38,269 --> 00:24:42,320
in run it through the basic validator

00:24:40,129 --> 00:24:46,309
and then throw the throw it at the

00:24:42,320 --> 00:24:48,799
database if it's stuck cool still some

00:24:46,309 --> 00:24:50,210
very rough edges sqlite gives you awful

00:24:48,799 --> 00:24:53,570
error messages if you violate a key

00:24:50,210 --> 00:24:55,220
constraint it's just ugly and the other

00:24:53,570 --> 00:24:56,840
problem is that currently changing the

00:24:55,220 --> 00:24:59,450
schema is very clumsy and difficult

00:24:56,840 --> 00:25:02,419
there's about three places or more that

00:24:59,450 --> 00:25:05,659
you have to change to add a new field so

00:25:02,419 --> 00:25:07,309
where it will go in the future the

00:25:05,659 --> 00:25:09,980
database may become the master at which

00:25:07,309 --> 00:25:11,929
point this is just be an export format I

00:25:09,980 --> 00:25:14,269
may just try and fix the error messages

00:25:11,929 --> 00:25:15,950
at the current system or I may throw it

00:25:14,269 --> 00:25:18,429
all out and put a real schema validator

00:25:15,950 --> 00:25:27,289
in there and exactly which will happen

00:25:18,429 --> 00:25:36,429
at depends so thank you very much thanks

00:25:27,289 --> 00:25:36,429
very much any questions any questions

00:25:36,460 --> 00:25:42,799
hey no no I think we might be right you

00:25:40,369 --> 00:25:44,570
obviously had all the information was

00:25:42,799 --> 00:25:47,779
there no questions you answered all of

00:25:44,570 --> 00:25:51,639
them cool ah so thanks very much we've

00:25:47,779 --> 00:25:54,490
got some mug and some coffee for you

00:25:51,639 --> 00:25:58,100
sorry

00:25:54,490 --> 00:26:00,880
thank you cheers and yeah we'll back it

00:25:58,100 --> 00:26:00,880

YouTube URL: https://www.youtube.com/watch?v=PYw2K0_ZZ0w


