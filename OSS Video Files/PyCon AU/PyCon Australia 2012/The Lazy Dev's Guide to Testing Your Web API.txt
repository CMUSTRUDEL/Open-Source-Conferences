Title: The Lazy Dev's Guide to Testing Your Web API
Publication date: 2012-08-23
Playlist: PyCon Australia 2012
Description: 
	Ryan Kelly
Do you enjoy writing test cases for your web application?  If so then this may not be the talk for you.  I'm going to show you how to make a single test suite perform triple testing duty, so you can get on with writing the fun stuff.

Fi
Captions: 
	00:00:02,330 --> 00:00:08,309
hello everyone before we start the next

00:00:05,850 --> 00:00:10,769
session I just have a public service

00:00:08,309 --> 00:00:13,860
announcement we've had the request pass

00:00:10,769 --> 00:00:15,599
around if you are not actually using

00:00:13,860 --> 00:00:18,150
your wireless connection can you please

00:00:15,599 --> 00:00:21,750
actually shut it off and just far at

00:00:18,150 --> 00:00:24,269
park fire it up when you want to connect

00:00:21,750 --> 00:00:25,470
the internet the network is struggling a

00:00:24,269 --> 00:00:27,029
little bit and we just want to keep it

00:00:25,470 --> 00:00:32,460
as snappy as possible for those who need

00:00:27,029 --> 00:00:34,469
to use it but otherwise enjoy this next

00:00:32,460 --> 00:00:35,820
one we have Ryan Kelly who's a software

00:00:34,469 --> 00:00:37,980
developer for Mozilla and has been

00:00:35,820 --> 00:00:40,649
working in Python for the past nine

00:00:37,980 --> 00:00:42,780
years I've been assured that he's done

00:00:40,649 --> 00:00:45,270
some very scary things with Python but

00:00:42,780 --> 00:00:47,940
today he's going to use his pals for

00:00:45,270 --> 00:00:50,850
good today he's going to teach all of us

00:00:47,940 --> 00:00:53,399
web developers how to be lazy whilst

00:00:50,850 --> 00:00:55,739
actually testing our AP is so please

00:00:53,399 --> 00:01:04,140
give Ryan a warm welcome and enjoy the

00:00:55,739 --> 00:01:05,549
talk thank you so yes I'm Ryan I'm going

00:01:04,140 --> 00:01:07,229
to assume that the applause are the

00:01:05,549 --> 00:01:09,810
means you're all big fans of testing or

00:01:07,229 --> 00:01:12,210
you're all big fans of laziness and so

00:01:09,810 --> 00:01:13,920
which of you are the former who hears

00:01:12,210 --> 00:01:17,040
here because they love writing tests for

00:01:13,920 --> 00:01:18,840
their application a couple awesome you

00:01:17,040 --> 00:01:23,159
guys probably like work out and eat well

00:01:18,840 --> 00:01:24,600
and stuff so ultimately who's here

00:01:23,159 --> 00:01:27,390
because they can barely bring themselves

00:01:24,600 --> 00:01:32,880
to type the words def tests into a path

00:01:27,390 --> 00:01:34,829
and file ever again I'm actually both of

00:01:32,880 --> 00:01:36,890
these things and I suspect many of us

00:01:34,829 --> 00:01:39,390
are as well depending on the time of day

00:01:36,890 --> 00:01:41,490
the history of the project that we're

00:01:39,390 --> 00:01:44,520
working on at the time and so forth and

00:01:41,490 --> 00:01:46,920
the underlying cause of this kind of

00:01:44,520 --> 00:01:51,780
duality and is best summarized in graph

00:01:46,920 --> 00:01:53,970
form this is a very generic graph of the

00:01:51,780 --> 00:01:56,729
effort that you expend on quality

00:01:53,970 --> 00:01:58,469
assurance activities versus the

00:01:56,729 --> 00:01:59,820
resulting quality of your product so if

00:01:58,469 --> 00:02:02,909
you're a corporate bean counter this

00:01:59,820 --> 00:02:05,250
might be dollars spent on QA resources

00:02:02,909 --> 00:02:07,590
versus number of user complaints for

00:02:05,250 --> 00:02:10,200
example for a developer this might be

00:02:07,590 --> 00:02:12,060
number of tests written versus bugs per

00:02:10,200 --> 00:02:13,210
line of code whatever your graph is

00:02:12,060 --> 00:02:16,570
going to look something like

00:02:13,210 --> 00:02:18,690
and when you first start out down here

00:02:16,570 --> 00:02:21,370
if you expend a modest amount of effort

00:02:18,690 --> 00:02:23,020
you can receive quite a pleasing and

00:02:21,370 --> 00:02:24,610
substantial increase in the quality of

00:02:23,020 --> 00:02:27,070
your application especially if you're

00:02:24,610 --> 00:02:29,220
like me and you write bugs with quite

00:02:27,070 --> 00:02:32,350
some regularity the first time around

00:02:29,220 --> 00:02:34,810
the problem is that as you go on and you

00:02:32,350 --> 00:02:36,490
pick off the low-hanging fruit and you

00:02:34,810 --> 00:02:38,260
know you start trying to test the deeper

00:02:36,490 --> 00:02:40,390
corners of whatever it is you're testing

00:02:38,260 --> 00:02:42,400
and investing the same amount of effort

00:02:40,390 --> 00:02:44,650
again produces smaller and smaller

00:02:42,400 --> 00:02:46,780
increments in the total quality until

00:02:44,650 --> 00:02:49,960
you get to a point where you know the

00:02:46,780 --> 00:02:52,150
effort that you would have to invest to

00:02:49,960 --> 00:02:54,400
extract any further improvement in your

00:02:52,150 --> 00:02:56,470
product is not worth the miniscule

00:02:54,400 --> 00:02:59,140
amount of extra quality that you're

00:02:56,470 --> 00:03:02,590
going to achieve and so eventually we

00:02:59,140 --> 00:03:03,970
reach a natural stopping point you know

00:03:02,590 --> 00:03:07,900
this is classic law of diminishing

00:03:03,970 --> 00:03:09,490
returns stuff and we have two options we

00:03:07,900 --> 00:03:11,950
could just say well you know this is

00:03:09,490 --> 00:03:13,540
about as much as i can bring myself to

00:03:11,950 --> 00:03:14,980
do or this is about as much as we can

00:03:13,540 --> 00:03:18,190
afford to do and we'll accept that that

00:03:14,980 --> 00:03:20,320
is the resulting level of quality

00:03:18,190 --> 00:03:23,200
assurance or we can put our engineers

00:03:20,320 --> 00:03:27,570
hats on and hack this graph grab a hold

00:03:23,200 --> 00:03:27,570
of the line and just up there

00:03:29,319 --> 00:03:35,359
so that the expenditure of effort is

00:03:33,500 --> 00:03:38,689
rewarded by a correspondingly greater

00:03:35,359 --> 00:03:40,670
increase in in quality assurance now

00:03:38,689 --> 00:03:42,409
this this is you know process

00:03:40,670 --> 00:03:45,379
improvement it might be using tools that

00:03:42,409 --> 00:03:46,640
let you write more tests quicker or it

00:03:45,379 --> 00:03:48,409
might be using tools that let you

00:03:46,640 --> 00:03:51,680
extract more value from tests that

00:03:48,409 --> 00:03:53,120
you've already written but the the moral

00:03:51,680 --> 00:03:55,549
of this talk is really that we should be

00:03:53,120 --> 00:03:56,900
trying to do more with less in this kind

00:03:55,549 --> 00:03:59,540
of activity where you're facing these

00:03:56,900 --> 00:04:01,010
kinds of diminishing returns of course

00:03:59,540 --> 00:04:03,530
there's no free lunch I mean the

00:04:01,010 --> 00:04:05,870
activity of process improvement is in

00:04:03,530 --> 00:04:06,980
itself an expenditure of effort but I

00:04:05,870 --> 00:04:08,930
don't like to think of it that way I

00:04:06,980 --> 00:04:12,230
like to think of it as an investment in

00:04:08,930 --> 00:04:15,230
laziness and my view on this is inspired

00:04:12,230 --> 00:04:17,269
by one of the great classics of modern

00:04:15,230 --> 00:04:20,239
literature it's terry pratchett's

00:04:17,269 --> 00:04:22,400
discworld novel moving pictures in which

00:04:20,239 --> 00:04:24,169
the male protagonist of the book has

00:04:22,400 --> 00:04:26,270
described as the laziest person in the

00:04:24,169 --> 00:04:30,430
history of the world and is so dedicated

00:04:26,270 --> 00:04:33,199
to the minimization of effort required

00:04:30,430 --> 00:04:35,000
versus benefit gained and that it would

00:04:33,199 --> 00:04:38,419
do things like go to the gym regularly

00:04:35,000 --> 00:04:41,330
and keep himself in you know a state of

00:04:38,419 --> 00:04:43,520
optimum fitness because it calculated a

00:04:41,330 --> 00:04:46,970
point at which the effort expended in

00:04:43,520 --> 00:04:49,729
maintaining his fitness would be um you

00:04:46,970 --> 00:04:51,229
know recouped in the effort savings in

00:04:49,729 --> 00:04:52,849
the rest of his life where he doesn't

00:04:51,229 --> 00:04:54,080
have to carry around extra kilos he

00:04:52,849 --> 00:04:56,870
doesn't have to puff walking up a flight

00:04:54,080 --> 00:04:59,539
of stairs but this actually speaks to me

00:04:56,870 --> 00:05:02,900
about testing and software development

00:04:59,539 --> 00:05:04,669
in general so you know trying to extract

00:05:02,900 --> 00:05:07,099
more value from your process is not

00:05:04,669 --> 00:05:09,370
necessarily work I like to think of it

00:05:07,099 --> 00:05:12,590
as an investment in your future laziness

00:05:09,370 --> 00:05:14,150
so that's the the philosophy of what i

00:05:12,590 --> 00:05:16,970
want to show in this talk the nitty

00:05:14,150 --> 00:05:19,820
gritty is as you said I I currently work

00:05:16,970 --> 00:05:23,090
for Mozilla in the services team and we

00:05:19,820 --> 00:05:26,630
basically build web api's to make your

00:05:23,090 --> 00:05:28,099
Firefox experience better specifically

00:05:26,630 --> 00:05:29,840
our kind of flagship product at the

00:05:28,099 --> 00:05:32,780
moment is the server side half of

00:05:29,840 --> 00:05:34,220
Firefox Sync i'm going to show you the

00:05:32,780 --> 00:05:36,950
tools and techniques that we use for

00:05:34,220 --> 00:05:39,169
testing this thing and basically show

00:05:36,950 --> 00:05:40,360
you how i try to get them to fit

00:05:39,169 --> 00:05:43,040
together really

00:05:40,360 --> 00:05:44,480
so that I can achieve maximum laziness

00:05:43,040 --> 00:05:46,820
in this testing regime to extract

00:05:44,480 --> 00:05:49,940
maximum value for the effort that I

00:05:46,820 --> 00:05:52,940
managed to put in I'm certainly not an

00:05:49,940 --> 00:05:55,280
expert in this field but I will claim to

00:05:52,940 --> 00:05:57,830
possess two qualities that relate to

00:05:55,280 --> 00:06:00,890
this talk I'm passionate about producing

00:05:57,830 --> 00:06:03,260
quality stuff but I have a very low

00:06:00,890 --> 00:06:05,990
tolerance for low value high FF

00:06:03,260 --> 00:06:07,910
activities so that's where we're headed

00:06:05,990 --> 00:06:11,630
the first all I want to talk about is

00:06:07,910 --> 00:06:14,480
web test and if I can stir let me just

00:06:11,630 --> 00:06:16,640
see let's start from a wsgi application

00:06:14,480 --> 00:06:18,950
which I assume if you're doing web stuff

00:06:16,640 --> 00:06:22,100
in Python at some point you've got a dub

00:06:18,950 --> 00:06:24,680
usgi up here's a really silly little

00:06:22,100 --> 00:06:27,650
example that just is like hello world

00:06:24,680 --> 00:06:30,470
there we go now this is just a Python

00:06:27,650 --> 00:06:32,690
callable so I can drive this by hand to

00:06:30,470 --> 00:06:35,570
implement various testing regimes but

00:06:32,690 --> 00:06:38,600
doing it like this like actually

00:06:35,570 --> 00:06:41,210
creating a wsgi environment creating

00:06:38,600 --> 00:06:43,250
this that response Korbell is that's

00:06:41,210 --> 00:06:45,080
pretty awful right WI is a very good

00:06:43,250 --> 00:06:46,460
interface for machines but perfect but

00:06:45,080 --> 00:06:48,440
it's quite good it's a terrible

00:06:46,460 --> 00:06:50,360
interface for humans so if I can

00:06:48,440 --> 00:06:52,310
preemptively borrow a phrase from

00:06:50,360 --> 00:06:55,640
tomorrow's keynote I like to think of

00:06:52,310 --> 00:06:58,010
web testers wsgi for humans and you get

00:06:55,640 --> 00:07:01,520
this test app object you can wrap it

00:06:58,010 --> 00:07:02,960
around your existing WI callable and

00:07:01,520 --> 00:07:04,160
then you can interact with it in a much

00:07:02,960 --> 00:07:06,710
more pleasant way you can say I will

00:07:04,160 --> 00:07:08,960
look you know get this URL and i'll give

00:07:06,710 --> 00:07:12,530
you back a response and stuff like that

00:07:08,960 --> 00:07:15,140
so basically this is how we structure

00:07:12,530 --> 00:07:17,000
that's not what I want to do this is how

00:07:15,140 --> 00:07:19,970
we structure our test cases for the

00:07:17,000 --> 00:07:22,460
firefox sync server what i've got here

00:07:19,970 --> 00:07:25,370
is a basically an example that I don't

00:07:22,460 --> 00:07:27,770
want to go through this is a stripped

00:07:25,370 --> 00:07:30,650
down minimalistic version of the Firefox

00:07:27,770 --> 00:07:33,680
600 we've got some users they store

00:07:30,650 --> 00:07:36,320
items in various collections and we've

00:07:33,680 --> 00:07:38,510
got a method that they can post items

00:07:36,320 --> 00:07:40,670
into to store them we've got another

00:07:38,510 --> 00:07:45,890
method down here where they can get

00:07:40,670 --> 00:07:47,330
these items back again and we've got a

00:07:45,890 --> 00:07:50,150
method down here where they can delete

00:07:47,330 --> 00:07:52,830
stuff so this is just some test code

00:07:50,150 --> 00:07:55,110
that I'm going to use for this talk

00:07:52,830 --> 00:07:56,850
and what I want to basically do is

00:07:55,110 --> 00:07:59,280
rather than trying to go through that is

00:07:56,850 --> 00:08:01,500
explain to you how this API works by

00:07:59,280 --> 00:08:03,360
writing test for with the hope of

00:08:01,500 --> 00:08:05,310
showing that it's quite a useful

00:08:03,360 --> 00:08:08,190
activity and quite easy to do so I've

00:08:05,310 --> 00:08:11,130
got some preliminaries here and i'm

00:08:08,190 --> 00:08:14,190
going to type the words a unit test into

00:08:11,130 --> 00:08:16,200
this like so be assured that i'm not

00:08:14,190 --> 00:08:17,490
writing unit tests all right definitely

00:08:16,200 --> 00:08:19,170
not these are like you could call them

00:08:17,490 --> 00:08:20,970
functional tests you could call them

00:08:19,170 --> 00:08:22,350
integration tests you could probably

00:08:20,970 --> 00:08:25,380
argue for days about what to call them

00:08:22,350 --> 00:08:28,560
but whatever i'm going to create a

00:08:25,380 --> 00:08:32,520
random user ID and their associated URL

00:08:28,560 --> 00:08:35,280
in the application and then i'm going to

00:08:32,520 --> 00:08:38,820
wrap my wsgi application callable in

00:08:35,280 --> 00:08:40,410
this test app instance and i'm just

00:08:38,820 --> 00:08:43,560
going to clear the decks write my my

00:08:40,410 --> 00:08:45,030
example application it has it's got it

00:08:43,560 --> 00:08:46,350
on disk database so i'm just going to

00:08:45,030 --> 00:08:48,120
make sure there's no junk in there to

00:08:46,350 --> 00:08:51,750
interview with my chest now the way they

00:08:48,120 --> 00:08:55,200
say up api operates is as follows I can

00:08:51,750 --> 00:08:57,330
get a JSON structure of items with some

00:08:55,200 --> 00:09:01,500
payloads in them like this system test

00:08:57,330 --> 00:09:04,440
data and and I could post them into my

00:09:01,500 --> 00:09:07,500
API at the given URL I can tell it that

00:09:04,440 --> 00:09:09,480
it is some JSON data and now we'll go

00:09:07,500 --> 00:09:12,420
ahead and make that request to my wsj

00:09:09,480 --> 00:09:14,730
application I can then make a get

00:09:12,420 --> 00:09:16,980
request on that URL and I can

00:09:14,730 --> 00:09:20,280
investigate the JSON structure that it

00:09:16,980 --> 00:09:22,950
returns and make sure that it does in

00:09:20,280 --> 00:09:24,890
fact contain the right things so I think

00:09:22,950 --> 00:09:27,150
this is a really nice balance between

00:09:24,890 --> 00:09:28,770
expressivity and flexibility like you're

00:09:27,150 --> 00:09:30,930
still in Python so you can do things

00:09:28,770 --> 00:09:33,180
like call out to Jason and and you know

00:09:30,930 --> 00:09:34,770
do detailed test assertions but you're

00:09:33,180 --> 00:09:36,300
talking to your web application like

00:09:34,770 --> 00:09:40,130
it's of web applications they post this

00:09:36,300 --> 00:09:44,670
get that number so if i run that I

00:09:40,130 --> 00:09:49,410
should get a passing test which is good

00:09:44,670 --> 00:09:50,940
and there are a lot of helpers in the

00:09:49,410 --> 00:09:53,010
web test ap i'm going to show you them

00:09:50,940 --> 00:09:55,200
all but here's an example it also has

00:09:53,010 --> 00:09:56,700
this convenient post jason method which

00:09:55,200 --> 00:10:00,390
is really good if you're building jason

00:09:56,700 --> 00:10:01,860
based web api's so here's a slightly

00:10:00,390 --> 00:10:05,070
more complicated test i'm going to post

00:10:01,860 --> 00:10:06,360
two things in different requests

00:10:05,070 --> 00:10:08,850
obviously

00:10:06,360 --> 00:10:10,800
I'm going to set that those things have

00:10:08,850 --> 00:10:12,060
different modification times because

00:10:10,800 --> 00:10:14,310
they were closely at different times and

00:10:12,060 --> 00:10:16,740
I'm then going to test whether I can

00:10:14,310 --> 00:10:19,440
query for things that were modified

00:10:16,740 --> 00:10:22,470
after a particular time alright so I

00:10:19,440 --> 00:10:25,170
hope it's fairly obvious what urls I'm

00:10:22,470 --> 00:10:27,890
hitting here what operations I'm

00:10:25,170 --> 00:10:31,230
performing on my web api and so forth

00:10:27,890 --> 00:10:32,459
flush this out that little red bar down

00:10:31,230 --> 00:10:36,839
the bottom of the screen telling me I'm

00:10:32,459 --> 00:10:39,990
going to slowly anyway the point I'm

00:10:36,839 --> 00:10:41,160
trying to make is well this is a great

00:10:39,990 --> 00:10:42,660
language for describing the

00:10:41,160 --> 00:10:44,279
functionality of your application for

00:10:42,660 --> 00:10:46,649
writing specifications about the

00:10:44,279 --> 00:10:49,829
functionality of their application to

00:10:46,649 --> 00:10:51,390
passing tests and and I can do lots of

00:10:49,829 --> 00:10:55,050
other interesting things like if I had

00:10:51,390 --> 00:10:57,690
authentication in it I could put in an

00:10:55,050 --> 00:10:59,490
authorization header and I can tell the

00:10:57,690 --> 00:11:01,680
test that to use that on all the

00:10:59,490 --> 00:11:03,810
requests and if i want to make

00:11:01,680 --> 00:11:06,570
assertions about the return you know the

00:11:03,810 --> 00:11:08,310
response codes of my requests i can say

00:11:06,570 --> 00:11:10,470
well this request should give you a 404

00:11:08,310 --> 00:11:15,449
it's got a cookie handling for handling

00:11:10,470 --> 00:11:16,890
all with sorts of fun stuff good so

00:11:15,449 --> 00:11:18,390
that's kind of my starting point we have

00:11:16,890 --> 00:11:21,750
a bunch of functional tests written in

00:11:18,390 --> 00:11:23,670
web test it's nice and flexible and easy

00:11:21,750 --> 00:11:25,019
to get going with and it's very lower

00:11:23,670 --> 00:11:26,430
the head like you don't have to spin up

00:11:25,019 --> 00:11:27,990
a server and test against the large

00:11:26,430 --> 00:11:31,079
server just testing against an in-memory

00:11:27,990 --> 00:11:33,060
python application and but because it's

00:11:31,079 --> 00:11:35,810
all talking wsgi opens up some

00:11:33,060 --> 00:11:40,620
interesting possibilities for example

00:11:35,810 --> 00:11:43,079
wsj proxy it's kind of like wi server in

00:11:40,620 --> 00:11:45,600
Reverse right instead of taking a HTTP

00:11:43,079 --> 00:11:47,399
request and turning it into a call to a

00:11:45,600 --> 00:11:49,500
Python object it takes a call to a

00:11:47,399 --> 00:11:53,100
Python object and turns it into HTTP

00:11:49,500 --> 00:11:55,560
request so if I get into my part in

00:11:53,100 --> 00:11:59,220
shell again and just grab this proxy

00:11:55,560 --> 00:12:00,750
object I can point at it's a google and

00:11:59,220 --> 00:12:03,269
then i can drive it in the same way i

00:12:00,750 --> 00:12:05,250
would drive an in-memory wsgi

00:12:03,269 --> 00:12:06,779
application which is not like this

00:12:05,250 --> 00:12:09,060
because that's too much work and too

00:12:06,779 --> 00:12:13,769
easy to get wrong I would wrap it in a

00:12:09,060 --> 00:12:15,209
test app object and then I can it

00:12:13,769 --> 00:12:17,410
requires me to specify this remote

00:12:15,209 --> 00:12:19,540
address and is considered at a bug

00:12:17,410 --> 00:12:21,310
then i can just interact like so let's

00:12:19,540 --> 00:12:23,500
search google for then and see what's

00:12:21,310 --> 00:12:25,600
going on and it'll come back and tell me

00:12:23,500 --> 00:12:27,699
I've queered the wrong URL but Sam you

00:12:25,600 --> 00:12:31,389
get the idea that this very quickly lets

00:12:27,699 --> 00:12:33,370
you drive a live web application so the

00:12:31,389 --> 00:12:37,089
implications are obvious right I can

00:12:33,370 --> 00:12:40,629
take whatever test suite I've just

00:12:37,089 --> 00:12:44,110
written in web test and I can turn that

00:12:40,629 --> 00:12:46,060
into a set of live tests to run against

00:12:44,110 --> 00:12:47,980
my live application so if I go down to

00:12:46,060 --> 00:12:51,370
the bottom of my file full of test cases

00:12:47,980 --> 00:12:55,569
here and I'm going to refactor this

00:12:51,370 --> 00:12:59,740
thing first yeah I'm really typing this

00:12:55,569 --> 00:13:02,819
live no I'm going to pull this test that

00:12:59,740 --> 00:13:06,220
creation out into a separate method no

00:13:02,819 --> 00:13:07,689
so that's just a bit of refactoring

00:13:06,220 --> 00:13:09,970
there I'm going to go down to the bottom

00:13:07,689 --> 00:13:16,720
here I'm going to add a little if name

00:13:09,970 --> 00:13:20,740
equals main clause yeah in which I

00:13:16,720 --> 00:13:23,860
basically use nose and it's test runner

00:13:20,740 --> 00:13:26,290
and wsgi proxy and its ability to talk

00:13:23,860 --> 00:13:28,420
to live web services to hijack that

00:13:26,290 --> 00:13:31,240
gigantic suite of functional tests i

00:13:28,420 --> 00:13:33,339
just wrote and point them all at my live

00:13:31,240 --> 00:13:38,050
web server all right just take the take

00:13:33,339 --> 00:13:44,439
a URL from the command line and point

00:13:38,050 --> 00:13:51,370
wsgi proxy at it go hijacking knows to

00:13:44,439 --> 00:13:54,329
run these tests for me like so and if I

00:13:51,370 --> 00:13:54,329
run that what we think will happen

00:13:54,990 --> 00:14:00,399
nothing because I don't have a server

00:13:56,800 --> 00:14:03,040
running nearly yo so if i run that

00:14:00,399 --> 00:14:05,709
little test server i can point my test

00:14:03,040 --> 00:14:06,910
script at it and I get to passing tests

00:14:05,709 --> 00:14:12,399
and you can see it's actually hitting

00:14:06,910 --> 00:14:14,410
the server that I'm running so wsgi prop

00:14:12,399 --> 00:14:16,269
c is really nice it does one thing that

00:14:14,410 --> 00:14:17,829
does it really really well and the thing

00:14:16,269 --> 00:14:19,600
that it does is really useful because

00:14:17,829 --> 00:14:21,910
what I've just created in those handful

00:14:19,600 --> 00:14:24,220
of lines of code and is a deployment

00:14:21,910 --> 00:14:25,990
testing script for example I can point

00:14:24,220 --> 00:14:27,930
this at my server after every deployment

00:14:25,990 --> 00:14:30,160
and verify that nothing has gone wrong

00:14:27,930 --> 00:14:32,680
and I basically got this

00:14:30,160 --> 00:14:34,360
for free and to give you an example of

00:14:32,680 --> 00:14:36,279
why this is useful a couple of months

00:14:34,360 --> 00:14:38,980
ago we had a security issue in one of

00:14:36,279 --> 00:14:41,529
our products and we rushed through a fix

00:14:38,980 --> 00:14:43,209
and we rushed to a deployment and we've

00:14:41,529 --> 00:14:45,399
got to the end then for whatever reason

00:14:43,209 --> 00:14:47,860
after the deployment had been done the

00:14:45,399 --> 00:14:49,300
server wasn't restarted properly so the

00:14:47,860 --> 00:14:50,649
code sitting on the machine had been

00:14:49,300 --> 00:14:52,060
fixed but the server that was running

00:14:50,649 --> 00:14:53,889
actually still had the security

00:14:52,060 --> 00:14:55,449
vulnerability all right so if you have

00:14:53,889 --> 00:14:57,399
something like this you can say well you

00:14:55,449 --> 00:14:59,470
know i'll just run my suite of tests of

00:14:57,399 --> 00:15:00,790
course it's a security error so you know

00:14:59,470 --> 00:15:03,040
you've written a test to make sure it

00:15:00,790 --> 00:15:04,509
doesn't happen again and that will help

00:15:03,040 --> 00:15:05,560
us to the test that will actually

00:15:04,509 --> 00:15:08,920
something has gone wrong in this

00:15:05,560 --> 00:15:10,329
department you can also use this as a

00:15:08,920 --> 00:15:12,220
really rough and ready load testing

00:15:10,329 --> 00:15:15,160
framework all right spin up a couple of

00:15:12,220 --> 00:15:17,079
ec2 instances or something and run a

00:15:15,160 --> 00:15:18,399
bunch of instances of this script in a

00:15:17,079 --> 00:15:20,050
tight loop and you're hammering your

00:15:18,399 --> 00:15:23,410
server with a bunch of traffic fantastic

00:15:20,050 --> 00:15:24,459
and you know if if you don't want to

00:15:23,410 --> 00:15:25,930
invest any more effort you could

00:15:24,459 --> 00:15:27,519
probably stop there you can see i'll

00:15:25,930 --> 00:15:30,279
actually I can you know I can run X many

00:15:27,519 --> 00:15:33,220
copies of this at a time my service

00:15:30,279 --> 00:15:34,930
stands up to it awesome ma'am but if

00:15:33,220 --> 00:15:38,199
we're willing to invest just a little

00:15:34,930 --> 00:15:42,339
bit more in our tools then we can

00:15:38,199 --> 00:15:43,870
achieve potentially a lot more quality

00:15:42,339 --> 00:15:46,120
out of our web app by doing some proper

00:15:43,870 --> 00:15:49,000
load testing the tool we use for that is

00:15:46,120 --> 00:15:51,100
called funk load and and phone close one

00:15:49,000 --> 00:15:54,040
of those tools that that likes to be

00:15:51,100 --> 00:15:56,380
everything and like it's a full stack

00:15:54,040 --> 00:15:58,630
you install this tool you write your

00:15:56,380 --> 00:15:59,920
tests in this tool and you run this tool

00:15:58,630 --> 00:16:02,079
against your web app and it tells you

00:15:59,920 --> 00:16:04,360
about and how it's going to stand up on

00:16:02,079 --> 00:16:06,550
the load which is fine but I'm not

00:16:04,360 --> 00:16:07,779
really interested in another complete

00:16:06,550 --> 00:16:09,490
tools that so I'm going to show you how

00:16:07,779 --> 00:16:12,000
it works but as you can imagine i'm not

00:16:09,490 --> 00:16:14,319
going to tolerate this for very long I

00:16:12,000 --> 00:16:18,029
have a special thing called a funk load

00:16:14,319 --> 00:16:20,139
test case and that i'm going to subclass

00:16:18,029 --> 00:16:22,630
and i'm now going to proceed to

00:16:20,139 --> 00:16:25,180
duplicate that first test that i wrote

00:16:22,630 --> 00:16:26,829
in web tests yeah i'm doing this partly

00:16:25,180 --> 00:16:28,689
because i want to show you the front

00:16:26,829 --> 00:16:33,970
load API mostly i'm doing it to annoy

00:16:28,689 --> 00:16:35,230
you because it annoys me yeah if I funk

00:16:33,970 --> 00:16:36,759
load is a really good tool for load

00:16:35,230 --> 00:16:37,930
testing yeah it's got lots of good

00:16:36,759 --> 00:16:39,610
features i'm going to show you in a

00:16:37,930 --> 00:16:41,800
moment but in order to use it I'm

00:16:39,610 --> 00:16:42,920
supposed to invest completely in it as a

00:16:41,800 --> 00:16:44,600
separate tool

00:16:42,920 --> 00:16:47,240
I've already written pretty much exactly

00:16:44,600 --> 00:16:48,920
this code but I now have to duplicate it

00:16:47,240 --> 00:16:50,690
in a slightly different API I have to

00:16:48,920 --> 00:16:52,850
get my target URL from a different place

00:16:50,690 --> 00:16:54,500
I have to encode my request body in a

00:16:52,850 --> 00:16:56,899
slightly different way I have to call

00:16:54,500 --> 00:17:00,230
slightly different methods to you know

00:16:56,899 --> 00:17:01,550
make a successful request but the shape

00:17:00,230 --> 00:17:04,339
of what i'm doing here is exactly the

00:17:01,550 --> 00:17:06,199
same as what i wrote before and I'm even

00:17:04,339 --> 00:17:08,569
making the same set of typos as I did

00:17:06,199 --> 00:17:12,730
before in putting together this little

00:17:08,569 --> 00:17:14,900
demo ok so I hope to show you that a

00:17:12,730 --> 00:17:17,360
this investment of effort may be worth

00:17:14,900 --> 00:17:20,360
it and be this investment of effort may

00:17:17,360 --> 00:17:25,490
not be necessary so let's have a look at

00:17:20,360 --> 00:17:26,900
what it can do thank you I'll give it a

00:17:25,490 --> 00:17:28,820
little configuration file here I say

00:17:26,900 --> 00:17:30,470
here's the URL of the server here are

00:17:28,820 --> 00:17:32,120
some details about how you're going to

00:17:30,470 --> 00:17:38,030
run the test sleeping for various times

00:17:32,120 --> 00:17:39,980
and whatnot and here we go I'll run my

00:17:38,030 --> 00:17:41,780
little server which I'm doing on the

00:17:39,980 --> 00:17:43,610
same machine and if your benchmarking

00:17:41,780 --> 00:17:45,200
something by running a server on machine

00:17:43,610 --> 00:17:46,850
and running a client on the same machine

00:17:45,200 --> 00:17:49,880
you're doing it wrong but never mind

00:17:46,850 --> 00:17:52,130
this is only a demonstration I can say

00:17:49,880 --> 00:17:54,080
run the tests that are found in this in

00:17:52,130 --> 00:17:55,340
this file and it will do pretty much the

00:17:54,080 --> 00:17:58,460
same thing that I just showed you with

00:17:55,340 --> 00:18:01,700
wsgi proxy except that it printed out in

00:17:58,460 --> 00:18:04,250
green I am so so far I haven't gained

00:18:01,700 --> 00:18:06,799
anything what the real benefit comes

00:18:04,250 --> 00:18:09,860
from is where I can figure this benching

00:18:06,799 --> 00:18:12,320
section down here well I'm going to tell

00:18:09,860 --> 00:18:14,660
it to do I'm going to run four sets of

00:18:12,320 --> 00:18:17,240
tests I'm going to run a test with 10

00:18:14,660 --> 00:18:19,100
concurrent users 15 concurrent users 20

00:18:17,240 --> 00:18:21,230
and 30 I'm going to run each test for

00:18:19,100 --> 00:18:22,640
five seconds because we don't want to

00:18:21,230 --> 00:18:25,130
sit here all day watching it print

00:18:22,640 --> 00:18:30,770
little green dots and it looks something

00:18:25,130 --> 00:18:32,840
like this funk load runs around the

00:18:30,770 --> 00:18:36,169
benchmarking sweet and here's the test

00:18:32,840 --> 00:18:39,440
that I want to run and it'll chug away

00:18:36,169 --> 00:18:41,440
and do its thing so as you can see and

00:18:39,440 --> 00:18:44,299
it is hammering this poor little

00:18:41,440 --> 00:18:47,540
single-threaded wsgi ref server with an

00:18:44,299 --> 00:18:49,790
SQLite database hum with 10 concurrent

00:18:47,540 --> 00:18:51,080
users and to be fair it is succeeding if

00:18:49,790 --> 00:18:54,200
it was failing it would be printing

00:18:51,080 --> 00:18:55,429
little red ifs and now I'll let that run

00:18:54,200 --> 00:18:56,110
so you get a bit of an idea what it's

00:18:55,429 --> 00:18:57,250
doing

00:18:56,110 --> 00:19:01,510
same time we'll talk about what it's

00:18:57,250 --> 00:19:03,549
doing funk load the idea of using a

00:19:01,510 --> 00:19:05,230
dedicated tool for benchmarking is

00:19:03,549 --> 00:19:06,670
pretty important because it solves a lot

00:19:05,230 --> 00:19:08,950
of problems that you may not have

00:19:06,670 --> 00:19:11,620
thought of yet for example I've asked

00:19:08,950 --> 00:19:13,570
this thing to run tests with say 25

00:19:11,620 --> 00:19:15,670
concurrent users it means you've got a

00:19:13,570 --> 00:19:18,730
spin up 25 concurrent threads of

00:19:15,670 --> 00:19:21,040
activity and you can imagine that

00:19:18,730 --> 00:19:22,690
there's a period of ramping up where

00:19:21,040 --> 00:19:24,250
it's running tests with less than the

00:19:22,690 --> 00:19:26,049
amount of users you've requested and

00:19:24,250 --> 00:19:27,160
there's a period of ramping down where

00:19:26,049 --> 00:19:28,780
the tests are finishing that's running

00:19:27,160 --> 00:19:30,370
tests with less than the number of users

00:19:28,780 --> 00:19:32,559
you've requested funk load is very

00:19:30,370 --> 00:19:34,809
careful that it's only measuring things

00:19:32,559 --> 00:19:36,790
in the period where you've actually got

00:19:34,809 --> 00:19:39,940
all of the the load that you requested

00:19:36,790 --> 00:19:41,470
and so you know your measurements aren't

00:19:39,940 --> 00:19:42,970
going to be skewed by these ramped up

00:19:41,470 --> 00:19:48,059
and ramp down phases and things like

00:19:42,970 --> 00:19:50,350
that yeah let me see here we go here

00:19:48,059 --> 00:19:53,530
yeah i'm not sure why that is stop there

00:19:50,350 --> 00:19:55,150
there we go so what it's doing is

00:19:53,530 --> 00:19:56,440
basically running all of these

00:19:55,150 --> 00:19:57,669
calculations collecting all the

00:19:56,440 --> 00:19:59,799
measurements and I'm about to show you

00:19:57,669 --> 00:20:03,460
how to formulate it all together into a

00:19:59,799 --> 00:20:08,710
pretty report and it's actually I might

00:20:03,460 --> 00:20:13,570
skip ahead and show you already when I

00:20:08,710 --> 00:20:14,860
cut through that there it is and so it's

00:20:13,570 --> 00:20:16,780
got a little command in there that you

00:20:14,860 --> 00:20:18,790
can say look take take this output

00:20:16,780 --> 00:20:20,110
generate a nice-looking report and this

00:20:18,790 --> 00:20:21,790
is the sort of thing you get so you can

00:20:20,110 --> 00:20:23,260
see that actually our little single

00:20:21,790 --> 00:20:25,240
threaded web server didn't do too bad

00:20:23,260 --> 00:20:28,240
like it's not falling over this is a

00:20:25,240 --> 00:20:30,100
number of successful requests per second

00:20:28,240 --> 00:20:33,760
is going up as I have more concurrent

00:20:30,100 --> 00:20:35,410
users as you can see the metrics on

00:20:33,760 --> 00:20:36,910
response time are getting worse and

00:20:35,410 --> 00:20:38,230
worse because I'm running more

00:20:36,910 --> 00:20:40,570
concurrent users against a single

00:20:38,230 --> 00:20:42,280
threaded server you can get lots of

00:20:40,570 --> 00:20:45,850
pretty graphs and all these sorts of

00:20:42,280 --> 00:20:48,700
things so depending on your setup and

00:20:45,850 --> 00:20:51,429
what you're trying to achieve it may or

00:20:48,700 --> 00:20:54,070
may not be worth your time to learn how

00:20:51,429 --> 00:20:56,620
to use this tool to figure out how to

00:20:54,070 --> 00:20:58,900
generate and interpret these graphs but

00:20:56,620 --> 00:21:01,120
what if you could get almost all of that

00:20:58,900 --> 00:21:04,780
for free from what you'd already written

00:21:01,120 --> 00:21:06,700
in your web tests stuff I don't know

00:21:04,780 --> 00:21:09,110
what's going on there like what I want

00:21:06,700 --> 00:21:12,150
to do now is instead of

00:21:09,110 --> 00:21:14,280
duplicating those tests I'm going to

00:21:12,150 --> 00:21:15,870
make funk load consume the test I've

00:21:14,280 --> 00:21:18,210
already written this is a helper class

00:21:15,870 --> 00:21:21,900
that claims to contain anything and I'll

00:21:18,210 --> 00:21:24,120
show you why I need that in a minute I'm

00:21:21,900 --> 00:21:26,670
going to grab the test that I've already

00:21:24,120 --> 00:21:30,450
written I'm going to point them out this

00:21:26,670 --> 00:21:32,250
little utility function here and and

00:21:30,450 --> 00:21:33,420
instead of going to all the trouble of

00:21:32,250 --> 00:21:35,790
duplicating the tests I've already

00:21:33,420 --> 00:21:39,110
written I'm going to write a little bit

00:21:35,790 --> 00:21:42,780
of a conversion script that points the

00:21:39,110 --> 00:21:45,360
wsgi test API or basically wi into funk

00:21:42,780 --> 00:21:47,190
load so I'm making a WI out that when

00:21:45,360 --> 00:21:49,740
it's called it figures out where it's

00:21:47,190 --> 00:21:50,910
supposed to be talking to it populates

00:21:49,740 --> 00:21:53,550
the environment with all of these

00:21:50,910 --> 00:21:55,530
various things it sets the appropriate

00:21:53,550 --> 00:21:59,040
headers it calls out to funk loads

00:21:55,530 --> 00:22:01,020
testing methods it tells it that

00:21:59,040 --> 00:22:02,640
everything is ok it doesn't have the

00:22:01,020 --> 00:22:06,050
telephone code not to report failures

00:22:02,640 --> 00:22:06,050
because i'm going to do that myself and

00:22:06,680 --> 00:22:14,850
basically shuffles that through grabs

00:22:12,270 --> 00:22:17,910
the next grabs the response and sends it

00:22:14,850 --> 00:22:20,130
back up so that was slightly more work

00:22:17,910 --> 00:22:21,810
than just writing their test itself but

00:22:20,130 --> 00:22:22,770
i only have to do that once and you

00:22:21,810 --> 00:22:25,740
don't have to do that at all because

00:22:22,770 --> 00:22:30,180
i've already done it so not only do i

00:22:25,740 --> 00:22:32,190
now have the ability to run that test i

00:22:30,180 --> 00:22:33,690
wrote before without duplicating it but

00:22:32,190 --> 00:22:34,830
i also have the ability to run all the

00:22:33,690 --> 00:22:37,080
other tests that I've written like this

00:22:34,830 --> 00:22:39,270
one and I can incorporate those in a

00:22:37,080 --> 00:22:42,750
benchmarking sweet I can see how they

00:22:39,270 --> 00:22:45,060
all behave and so forth and I'm going to

00:22:42,750 --> 00:22:47,700
skip a little bit this one and go

00:22:45,060 --> 00:22:49,530
straight to the result luckily I had

00:22:47,700 --> 00:22:51,540
some cool stuff one of the nice things

00:22:49,530 --> 00:22:53,280
that it can do is generate a diff report

00:22:51,540 --> 00:22:54,960
so you can say you make a change in your

00:22:53,280 --> 00:22:56,820
application you want to say has this

00:22:54,960 --> 00:22:58,290
improved my performance yes or no and

00:22:56,820 --> 00:23:00,540
you'll get a report that looks something

00:22:58,290 --> 00:23:02,760
like this in this case I haven't

00:23:00,540 --> 00:23:05,310
improved my performance but some you can

00:23:02,760 --> 00:23:06,870
see you go you've got the top line is is

00:23:05,310 --> 00:23:08,640
your old test the bottom line is your

00:23:06,870 --> 00:23:10,230
new test and the green bits aware it was

00:23:08,640 --> 00:23:13,500
better the red bits are where I wasn't

00:23:10,230 --> 00:23:14,820
better yeah so by doing a little bit of

00:23:13,500 --> 00:23:17,070
hackery and fiddling around with your

00:23:14,820 --> 00:23:19,440
API you can suddenly get all of this

00:23:17,070 --> 00:23:21,590
cool stuff from funk load for free we

00:23:19,440 --> 00:23:24,020
don't do this in Mozilla yet

00:23:21,590 --> 00:23:25,460
but I want to try it out because i think

00:23:24,020 --> 00:23:28,880
you know there's got a lot of potential

00:23:25,460 --> 00:23:31,520
there the other thing Frank Lloyd has

00:23:28,880 --> 00:23:32,929
its really cool is the ability to run a

00:23:31,520 --> 00:23:35,870
distributed set of tests really easily

00:23:32,929 --> 00:23:37,610
so if I go down into my config file and

00:23:35,870 --> 00:23:40,220
I can figure it as I look easier

00:23:37,610 --> 00:23:44,240
dependencies this is where you get you

00:23:40,220 --> 00:23:45,710
know funk load from and so forth you can

00:23:44,240 --> 00:23:49,510
basically say look run the bench in

00:23:45,710 --> 00:23:51,500
distributive mode on following two hosts

00:23:49,510 --> 00:23:54,110
and then do the same thing you did

00:23:51,500 --> 00:23:56,029
before right that will shell out to

00:23:54,110 --> 00:23:58,070
those hosts it will set up a virtual and

00:23:56,029 --> 00:23:59,750
with funk load in it and it will install

00:23:58,070 --> 00:24:01,429
the necessary packages it will collect

00:23:59,750 --> 00:24:03,169
the results it will bring them back onto

00:24:01,429 --> 00:24:05,690
your local machine and then you can

00:24:03,169 --> 00:24:07,039
build those reports out of the resulting

00:24:05,690 --> 00:24:10,279
files I'm not going to make you sit

00:24:07,039 --> 00:24:11,809
through that but that's pretty cool and

00:24:10,279 --> 00:24:13,279
yeah it's really important for for

00:24:11,809 --> 00:24:15,799
benchmarking that you can that you can

00:24:13,279 --> 00:24:18,919
talk from different machines so summing

00:24:15,799 --> 00:24:20,840
up these are the tools that we're using

00:24:18,919 --> 00:24:23,360
it at Mozilla but I don't want to

00:24:20,840 --> 00:24:25,700
suggest this is like the optimal set of

00:24:23,360 --> 00:24:29,510
tools you could be using you know we

00:24:25,700 --> 00:24:32,450
started out with some web tests based

00:24:29,510 --> 00:24:34,610
functional tests we decided to look you

00:24:32,450 --> 00:24:36,409
know how can we make use of these father

00:24:34,610 --> 00:24:38,299
types of testing you could start

00:24:36,409 --> 00:24:40,429
ultimately from sales through the front

00:24:38,299 --> 00:24:42,799
load tests or web unit tests or

00:24:40,429 --> 00:24:44,510
something like that and and do basically

00:24:42,799 --> 00:24:48,080
the reverse of what i just did instead

00:24:44,510 --> 00:24:50,120
of trying to go from a wsgi call through

00:24:48,080 --> 00:24:52,700
to a real call you can monkey patch the

00:24:50,120 --> 00:24:55,039
standard library so that your attempts

00:24:52,700 --> 00:24:58,850
to really call a live web server are

00:24:55,039 --> 00:25:00,590
redirected to an in-process w strap and

00:24:58,850 --> 00:25:02,539
i've seen people do this and they you

00:25:00,590 --> 00:25:05,480
know they report some quite some success

00:25:02,539 --> 00:25:07,039
so the real point that I'm trying to

00:25:05,480 --> 00:25:09,320
make here is you know there are good

00:25:07,039 --> 00:25:13,279
tools out there a lot of tools look like

00:25:09,320 --> 00:25:15,230
they do one thing but you know can you

00:25:13,279 --> 00:25:17,240
find opportunities for reuse amongst

00:25:15,230 --> 00:25:19,820
these tools and can you get something

00:25:17,240 --> 00:25:20,929
for free from your tools can you use

00:25:19,820 --> 00:25:25,640
them to leverage the things that you've

00:25:20,929 --> 00:25:26,960
already done and a side of thanks I mean

00:25:25,640 --> 00:25:28,970
all of this stuff's not not my own

00:25:26,960 --> 00:25:30,230
brilliant idea and we've got drugs out

00:25:28,970 --> 00:25:32,750
on our team and he's been hacking on

00:25:30,230 --> 00:25:34,269
this for ages I think he's currently

00:25:32,750 --> 00:25:37,299
building like a

00:25:34,269 --> 00:25:39,339
a continuous integration server but for

00:25:37,299 --> 00:25:41,169
funk load so imagine like Jenkins or

00:25:39,339 --> 00:25:43,629
Travis or something like that but when

00:25:41,169 --> 00:25:45,789
you make a commit it actually gives up a

00:25:43,629 --> 00:25:47,619
load test of your application and gives

00:25:45,789 --> 00:25:48,999
you a report and a graph of how the

00:25:47,619 --> 00:25:50,859
performance of your application has

00:25:48,999 --> 00:25:52,599
changed over time that would be awesome

00:25:50,859 --> 00:25:56,229
to get and it would be even more awesome

00:25:52,599 --> 00:25:58,959
to get that for free and James is a head

00:25:56,229 --> 00:26:00,999
q a guy for firefox sync server and he

00:25:58,959 --> 00:26:04,509
basically breaks all my stuff so thank

00:26:00,999 --> 00:26:06,219
you to him I've got the the contents of

00:26:04,509 --> 00:26:08,679
this talk rough online I've got some

00:26:06,219 --> 00:26:21,009
links and basically I've got time for

00:26:08,679 --> 00:26:25,389
questions just a couple of general LA

00:26:21,009 --> 00:26:27,429
funk load questions can you give it

00:26:25,389 --> 00:26:28,749
multiple tests and say I want to run

00:26:27,429 --> 00:26:32,229
this test seventy-five percent of the

00:26:28,749 --> 00:26:35,229
time this one as a bench you can't tell

00:26:32,229 --> 00:26:37,209
her that directly so the idea is that

00:26:35,229 --> 00:26:38,859
you're supposed to only do a single

00:26:37,209 --> 00:26:40,209
thing and do it lots of times because

00:26:38,859 --> 00:26:43,359
otherwise a lot of the metrics don't

00:26:40,209 --> 00:26:45,519
make sense like the number of successful

00:26:43,359 --> 00:26:46,749
tests per second for example doesn't

00:26:45,519 --> 00:26:49,570
make sense if you're running tests of

00:26:46,749 --> 00:26:53,019
different durations but what you can do

00:26:49,570 --> 00:26:55,419
is write like a an umbrella test that

00:26:53,019 --> 00:26:56,919
then in Python just as are you know

00:26:55,419 --> 00:26:59,049
it'll generate some random numbers and

00:26:56,919 --> 00:27:01,539
randomly pick other methods to call and

00:26:59,049 --> 00:27:04,629
that's actually exactly what we do for

00:27:01,539 --> 00:27:05,979
the sync server it is basically sixty

00:27:04,629 --> 00:27:07,329
percent of the time do this seventy

00:27:05,979 --> 00:27:09,219
percent of the time do that you know

00:27:07,329 --> 00:27:10,899
various combinations of things so yes

00:27:09,219 --> 00:27:13,989
definitely but if you're going to do

00:27:10,899 --> 00:27:15,099
that the funk load graphs are probably

00:27:13,989 --> 00:27:16,779
not going to help you you'll need to

00:27:15,099 --> 00:27:19,419
depend on like server side monitoring to

00:27:16,779 --> 00:27:21,429
see what's breaking or not breaking and

00:27:19,419 --> 00:27:23,769
the other question is sort of related to

00:27:21,429 --> 00:27:26,769
that providing an external data source

00:27:23,769 --> 00:27:28,209
to your tests to actually draw like you

00:27:26,769 --> 00:27:30,429
like you mentioned randomized data but

00:27:28,209 --> 00:27:31,599
I've got a test suite a set of test data

00:27:30,429 --> 00:27:33,909
that you want to push into your web

00:27:31,599 --> 00:27:36,519
server at load does it facilitate that

00:27:33,909 --> 00:27:38,169
I'm not sure to be quite honest cool it

00:27:36,519 --> 00:27:39,839
has it has certain facilities for doing

00:27:38,169 --> 00:27:42,369
things like getting credentials from a

00:27:39,839 --> 00:27:44,229
test credential server and things like

00:27:42,369 --> 00:27:48,269
that but I imagine it would be pretty

00:27:44,229 --> 00:27:48,269
easy to add thank you

00:27:49,460 --> 00:27:59,420
anybody else I actually had a question

00:27:53,670 --> 00:28:03,690
um so for the web APR that I use at work

00:27:59,420 --> 00:28:05,550
we actually inside we do HTTP requests

00:28:03,690 --> 00:28:07,470
to other parts the API via various

00:28:05,550 --> 00:28:09,780
reasons and the way I've done it up

00:28:07,470 --> 00:28:12,410
until now is basically started a second

00:28:09,780 --> 00:28:15,360
web server in a different process ah

00:28:12,410 --> 00:28:18,560
have you got any tips to do that better

00:28:15,360 --> 00:28:21,240
do you do something similar like that it

00:28:18,560 --> 00:28:23,820
not in not in the sync server product

00:28:21,240 --> 00:28:26,130
but we do have another product that

00:28:23,820 --> 00:28:27,420
makes HTTP requests internally I think

00:28:26,130 --> 00:28:30,780
we basically configure it to mock that

00:28:27,420 --> 00:28:33,750
out yeah that's that's not revolutionary

00:28:30,780 --> 00:28:35,220
yeah it would be interesting to try and

00:28:33,750 --> 00:28:39,480
put a little redirector in there that

00:28:35,220 --> 00:28:41,790
goes via wsgi proxy or wsj intercepts

00:28:39,480 --> 00:28:44,190
what I showed you before basically acts

00:28:41,790 --> 00:28:46,140
HTTP lib to redirect to another in

00:28:44,190 --> 00:28:48,300
process application I think that would

00:28:46,140 --> 00:28:50,100
be very cool to try yeah well I I'm

00:28:48,300 --> 00:28:51,450
going to provide that because when it's

00:28:50,100 --> 00:28:53,600
in another process I can't tell you what

00:28:51,450 --> 00:29:00,990
it's doing so it's really annoying

00:28:53,600 --> 00:29:08,820
anybody else no no last call's Kate's

00:29:00,990 --> 00:29:13,640
not in the room no Russell sorry yeah

00:29:08,820 --> 00:29:13,640

YouTube URL: https://www.youtube.com/watch?v=8fB2qY8s2i4


