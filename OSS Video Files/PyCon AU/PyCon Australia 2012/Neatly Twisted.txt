Title: Neatly Twisted
Publication date: 2012-08-23
Playlist: PyCon Australia 2012
Description: 
	Josh Bartlett
In many Python circles, Twisted is the recommended framework for all networking and multitasking applications. Twisted provides a powerful, extensible event-driven framework with built-in support for many network protocols. But without
Captions: 
	00:00:02,899 --> 00:00:08,309
all right so welcome to neatly twisted

00:00:06,390 --> 00:00:12,300
where I'll be showing you how to write

00:00:08,309 --> 00:00:14,730
twisted code that's maintainable so

00:00:12,300 --> 00:00:18,029
first of all a bit about Who I am and

00:00:14,730 --> 00:00:19,800
why you should listen to me who I am my

00:00:18,029 --> 00:00:23,100
name is josh bartlett i work for a

00:00:19,800 --> 00:00:26,279
company called net box blue and 99% of

00:00:23,100 --> 00:00:28,619
my job is writing and maintaining python

00:00:26,279 --> 00:00:30,630
code now to give you an idea

00:00:28,619 --> 00:00:35,790
oh sure that deserves a round of

00:00:30,630 --> 00:00:37,590
applause to give you an idea of net box

00:00:35,790 --> 00:00:41,910
blues involvement with python

00:00:37,590 --> 00:00:43,920
there are around 400,000 lines of Python

00:00:41,910 --> 00:00:47,360
code in our code base and some of this

00:00:43,920 --> 00:00:50,340
code was written in 99 for Python 1.5.2

00:00:47,360 --> 00:00:51,870
so net box Blue has been doing pattern

00:00:50,340 --> 00:00:53,670
for a long time I haven't been

00:00:51,870 --> 00:00:56,309
personally programming in Python quite

00:00:53,670 --> 00:00:58,350
as long as net box Blue has been but

00:00:56,309 --> 00:00:59,969
Python is my language of choice and as

00:00:58,350 --> 00:01:01,829
well as using it for my paid employment

00:00:59,969 --> 00:01:06,119
I use it for a number of hobby projects

00:01:01,829 --> 00:01:07,799
one of those is as mentioned the network

00:01:06,119 --> 00:01:10,170
game open source network game called

00:01:07,799 --> 00:01:11,280
chose not so little particular girls

00:01:10,170 --> 00:01:13,530
running around shooting each other

00:01:11,280 --> 00:01:15,810
capturing territory this is written

00:01:13,530 --> 00:01:18,240
using Python uses PI game for the

00:01:15,810 --> 00:01:22,170
graphics users twisted for all of its

00:01:18,240 --> 00:01:24,750
networking asynchronous stuff do we have

00:01:22,170 --> 00:01:28,020
any cause see Python developers here in

00:01:24,750 --> 00:01:29,850
this room okay so I'm not a Corsi Python

00:01:28,020 --> 00:01:32,100
developer the closest I've come to it

00:01:29,850 --> 00:01:34,680
was as mentioned identifying a bug in

00:01:32,100 --> 00:01:36,479
the C Python interpreter I don't know

00:01:34,680 --> 00:01:38,430
about you when you find something that

00:01:36,479 --> 00:01:39,900
you don't quite understand but it's not

00:01:38,430 --> 00:01:42,450
working the way that you expect you

00:01:39,900 --> 00:01:44,220
don't think it's a bug in Python you you

00:01:42,450 --> 00:01:45,600
think that you don't understand it right

00:01:44,220 --> 00:01:47,280
but it turns out of what it was a bug in

00:01:45,600 --> 00:01:49,619
Python so I posted a bug to the bug

00:01:47,280 --> 00:01:54,329
tracker within 24 hours of me posting

00:01:49,619 --> 00:01:56,420
the bug there was a commit that fix fix

00:01:54,329 --> 00:01:58,500
the problem or so the committer thought

00:01:56,420 --> 00:02:00,030
within another 24 hours

00:01:58,500 --> 00:02:01,710
there was this message here after this

00:02:00,030 --> 00:02:04,130
commit the build bots are dying randomly

00:02:01,710 --> 00:02:06,409
with seg faults

00:02:04,130 --> 00:02:08,899
this is my favorite favorite message of

00:02:06,409 --> 00:02:10,280
the of the whole affair but that has

00:02:08,899 --> 00:02:12,470
been fixed since and that will be in the

00:02:10,280 --> 00:02:14,870
next version of Python 2.7 and that's in

00:02:12,470 --> 00:02:19,489
pattern 3.3 I'm something yes I

00:02:14,870 --> 00:02:21,110
identified a bug that's been fixed away

00:02:19,489 --> 00:02:24,680
from my mouth is that better

00:02:21,110 --> 00:02:26,209
all right so but enough about me about

00:02:24,680 --> 00:02:29,599
you here are your options

00:02:26,209 --> 00:02:31,760
a are you a twisted contributor B have

00:02:29,599 --> 00:02:34,340
you used twisted extensively see if you

00:02:31,760 --> 00:02:35,660
use twisted a little bit D have you

00:02:34,340 --> 00:02:38,269
heard of twisted before but never

00:02:35,660 --> 00:02:39,709
actually used it um II you didn't go to

00:02:38,269 --> 00:02:42,200
the other top because it said noobs in

00:02:39,709 --> 00:02:45,410
the title or ID you thought that Richard

00:02:42,200 --> 00:02:47,530
Jones were speaking in this room hands

00:02:45,410 --> 00:02:49,549
up for a any twisted contributors here I

00:02:47,530 --> 00:02:51,890
just learned I'm off the hook on that

00:02:49,549 --> 00:02:54,140
one hands up anyone who's used twisted

00:02:51,890 --> 00:02:55,849
extensively ok so we've got a few people

00:02:54,140 --> 00:02:56,870
so if I say anything wrong feel free to

00:02:55,849 --> 00:03:00,110
pick me up on that

00:02:56,870 --> 00:03:01,700
I used twisted a bit alright heard of

00:03:00,110 --> 00:03:04,030
twisted that never really used it most

00:03:01,700 --> 00:03:08,269
of the room anyone for EE

00:03:04,030 --> 00:03:09,859
yep ok anyone for F oh wow 2 people um

00:03:08,269 --> 00:03:11,569
so Richard Jones is actually speaking

00:03:09,859 --> 00:03:13,579
the port light bus so we're gonna stare

00:03:11,569 --> 00:03:21,100
at you as you stand up and head over

00:03:13,579 --> 00:03:21,100
there that's very condescending of you

00:03:22,000 --> 00:03:27,530
so um so this is my plan I'm going to

00:03:25,220 --> 00:03:30,049
talk about what twisted is and hopefully

00:03:27,530 --> 00:03:32,630
in the process you will see why twisted

00:03:30,049 --> 00:03:35,180
is so awesome then I'll give you some

00:03:32,630 --> 00:03:39,350
stories about when twisted can be a bit

00:03:35,180 --> 00:03:41,690
scary and then I'll give you three tips

00:03:39,350 --> 00:03:42,950
to keep your twisted code awesome I help

00:03:41,690 --> 00:03:44,600
you with debugging there and in the

00:03:42,950 --> 00:03:46,970
process I'll do a bit of a comparison

00:03:44,600 --> 00:03:48,650
between coding for twister and coding if

00:03:46,970 --> 00:03:49,970
you're doing threading I'm just to give

00:03:48,650 --> 00:03:53,569
you an idea of what the differences are

00:03:49,970 --> 00:03:55,819
there that's a lot to try and fit in so

00:03:53,569 --> 00:03:58,250
hopefully I'll cover enough to give you

00:03:55,819 --> 00:04:02,569
the general idea but I will have some

00:03:58,250 --> 00:04:03,980
time for questions at the end so will ya

00:04:02,569 --> 00:04:06,620
see which bits I didn't get right so

00:04:03,980 --> 00:04:08,090
straight from the twisted website what

00:04:06,620 --> 00:04:10,700
is twisted twist is an event-driven

00:04:08,090 --> 00:04:12,620
networking engine written in Python now

00:04:10,700 --> 00:04:16,040
I'm assuming that you're all down with

00:04:12,620 --> 00:04:17,060
the Python bit by this stage so is Bend

00:04:16,040 --> 00:04:21,109
it away from my face

00:04:17,060 --> 00:04:23,360
all right so I'll talk about twister as

00:04:21,109 --> 00:04:25,790
an event-driven engine and the

00:04:23,360 --> 00:04:29,060
networking side of twisted so first of

00:04:25,790 --> 00:04:32,270
all twisted is a networking networking

00:04:29,060 --> 00:04:33,860
engine so straight out of the box

00:04:32,270 --> 00:04:36,320
twisted comes with a billion and one

00:04:33,860 --> 00:04:39,500
protocols network protocols that just

00:04:36,320 --> 00:04:41,480
work um so as well as that they it comes

00:04:39,500 --> 00:04:44,300
with building blocks to build your own

00:04:41,480 --> 00:04:45,560
line based or length prefixed or data

00:04:44,300 --> 00:04:47,630
ground-based or whatever whatever

00:04:45,560 --> 00:04:49,510
protocols you want to you want to write

00:04:47,630 --> 00:04:51,260
so listed some of the protocols that

00:04:49,510 --> 00:04:52,520
twisted supports up on them but I

00:04:51,260 --> 00:04:57,250
couldn't fit them all on the slide

00:04:52,520 --> 00:04:59,840
there's a some of them for instance

00:04:57,250 --> 00:05:01,669
earlier this year I had to work on a

00:04:59,840 --> 00:05:04,190
daemon now how many of you have come

00:05:01,669 --> 00:05:06,950
across the postfix open source mail

00:05:04,190 --> 00:05:08,419
server fair few of you right so what

00:05:06,950 --> 00:05:10,790
this daemon had to do is it had to talk

00:05:08,419 --> 00:05:12,500
to postfix on a postfix specific

00:05:10,790 --> 00:05:14,300
protocol address resolver protocol so

00:05:12,500 --> 00:05:15,680
Pacific's would say here's an email

00:05:14,300 --> 00:05:18,470
address which service should I send it

00:05:15,680 --> 00:05:20,330
to and the daemon would say oh that

00:05:18,470 --> 00:05:21,890
email address you need to connect to

00:05:20,330 --> 00:05:25,160
Google server to send that email address

00:05:21,890 --> 00:05:26,960
on and now this daemon actually had to

00:05:25,160 --> 00:05:28,250
listen on two different ports doing

00:05:26,960 --> 00:05:29,570
talking in this protocol for slightly

00:05:28,250 --> 00:05:32,810
different purposes had to listen to a

00:05:29,570 --> 00:05:35,780
third port acting as a rudimentary SMTP

00:05:32,810 --> 00:05:38,060
server and also had to do recipient

00:05:35,780 --> 00:05:40,970
address verification checks which means

00:05:38,060 --> 00:05:43,280
acting as an SMTP client what you can

00:05:40,970 --> 00:05:45,590
see from the slide is that Oh from the

00:05:43,280 --> 00:05:48,500
slide is that twisted supports SMTP

00:05:45,590 --> 00:05:49,639
right out of the box what you can't see

00:05:48,500 --> 00:05:52,550
from the slide but is true nonetheless

00:05:49,639 --> 00:05:54,620
is that twisted also supports that

00:05:52,550 --> 00:05:56,180
postfix specific address resolver

00:05:54,620 --> 00:05:59,180
protocol right out of the box

00:05:56,180 --> 00:06:03,080
turns out routing that daemon was quite

00:05:59,180 --> 00:06:04,789
straightforward so one of the huge

00:06:03,080 --> 00:06:08,660
advantages of twisted is this you get

00:06:04,789 --> 00:06:10,550
lots of network protocols for free to

00:06:08,660 --> 00:06:12,800
give you an idea a bit of a taste for

00:06:10,550 --> 00:06:14,419
the flavor of using twisted to do

00:06:12,800 --> 00:06:18,380
networking code this is an example of

00:06:14,419 --> 00:06:20,300
the twisted website homepage so if you

00:06:18,380 --> 00:06:21,500
wanted to write an echo server server

00:06:20,300 --> 00:06:23,690
it's going to sit there listen for

00:06:21,500 --> 00:06:25,030
connections accept them whatever data it

00:06:23,690 --> 00:06:27,710
receives it will send it straight back

00:06:25,030 --> 00:06:29,810
first of all you have to in your main

00:06:27,710 --> 00:06:30,950
create an echo Factory and tell it to

00:06:29,810 --> 00:06:33,420
list

00:06:30,950 --> 00:06:35,370
to create the echo factory you find the

00:06:33,420 --> 00:06:37,860
twisted building block you want subclass

00:06:35,370 --> 00:06:39,600
it and you say every time I receive a

00:06:37,860 --> 00:06:42,840
connection this build protocol will be

00:06:39,600 --> 00:06:45,870
called I want you to build a an echo

00:06:42,840 --> 00:06:48,150
object there for each new connection

00:06:45,870 --> 00:06:50,100
that you receive so if you get five

00:06:48,150 --> 00:06:52,290
connections to your server you'll have

00:06:50,100 --> 00:06:54,630
five echo objects each of those can then

00:06:52,290 --> 00:06:56,580
store state for that connection except

00:06:54,630 --> 00:06:58,560
that this is an echo server so you don't

00:06:56,580 --> 00:07:00,960
actually care about state so all your

00:06:58,560 --> 00:07:03,750
echo class has to do is say when I

00:07:00,960 --> 00:07:05,070
receive data I write it back out so

00:07:03,750 --> 00:07:07,020
fairly straightforward the general

00:07:05,070 --> 00:07:08,880
principle is find the twisted building

00:07:07,020 --> 00:07:10,800
block that you want subclass that

00:07:08,880 --> 00:07:12,540
override the bits that you want this is

00:07:10,800 --> 00:07:14,730
generally how most of your networking

00:07:12,540 --> 00:07:17,510
side of twisted will work another

00:07:14,730 --> 00:07:20,010
example again from the twisted homepage

00:07:17,510 --> 00:07:21,900
web resource you find the twisted

00:07:20,010 --> 00:07:24,540
building block you want here resource

00:07:21,900 --> 00:07:27,240
dot resource from twisted web you

00:07:24,540 --> 00:07:29,220
override it you say this is how you'd

00:07:27,240 --> 00:07:31,350
render a guess in this case we're doing

00:07:29,220 --> 00:07:32,940
a counter setting the content type

00:07:31,350 --> 00:07:35,820
writing something out containing the

00:07:32,940 --> 00:07:38,160
counter your main function then just has

00:07:35,820 --> 00:07:40,770
to create the resource create a site

00:07:38,160 --> 00:07:43,530
with that resource at the root and run

00:07:40,770 --> 00:07:45,930
the reactor so again the same concept

00:07:43,530 --> 00:07:48,690
find the twisted building block you want

00:07:45,930 --> 00:07:52,530
subclass it and override the things that

00:07:48,690 --> 00:07:56,490
you want to change all right so that's

00:07:52,530 --> 00:07:58,080
twisted networking but a huge part of

00:07:56,490 --> 00:08:00,480
twisted is the event-driven side of

00:07:58,080 --> 00:08:03,750
things and so twisted is an asynchronous

00:08:00,480 --> 00:08:05,730
event framework which means that you're

00:08:03,750 --> 00:08:09,450
not relying on multi-threading to do

00:08:05,730 --> 00:08:11,670
your multiple threads of X Y or multiple

00:08:09,450 --> 00:08:13,020
tasks of execution I won't call them

00:08:11,670 --> 00:08:14,280
threads since they're not threads you

00:08:13,020 --> 00:08:16,980
can still use threads in twister I'll

00:08:14,280 --> 00:08:18,900
touch on that in a little bit but it's

00:08:16,980 --> 00:08:21,630
important to understand the async side

00:08:18,900 --> 00:08:24,990
of what twister does so at the core of

00:08:21,630 --> 00:08:27,120
twisted asynchronous model is this thing

00:08:24,990 --> 00:08:28,710
called a deferred a deferred just

00:08:27,120 --> 00:08:32,010
represents something that hasn't

00:08:28,710 --> 00:08:35,100
necessarily yet finished so in this

00:08:32,010 --> 00:08:37,650
example here this get page get page

00:08:35,100 --> 00:08:40,650
function here is used to connect to a

00:08:37,650 --> 00:08:43,889
website and read the contents of a web

00:08:40,650 --> 00:08:45,809
page so if you call get page

00:08:43,889 --> 00:08:47,910
with a website you will get a deferred

00:08:45,809 --> 00:08:49,499
object back something that hasn't

00:08:47,910 --> 00:08:50,879
necessarily finished and that when you

00:08:49,499 --> 00:08:53,069
call get page you'll get that back

00:08:50,879 --> 00:08:54,509
pretty much instantly it hasn't yet

00:08:53,069 --> 00:08:56,220
connected to the server it hasn't yet

00:08:54,509 --> 00:08:58,920
read the page you've got the deferred

00:08:56,220 --> 00:09:01,049
object and you can say okay when you do

00:08:58,920 --> 00:09:04,499
get this page at this callback this is

00:09:01,049 --> 00:09:07,350
gonna happen or you can say add this

00:09:04,499 --> 00:09:11,040
back which is the twisted word for if an

00:09:07,350 --> 00:09:12,899
error occurs run this function I'm so

00:09:11,040 --> 00:09:15,509
fundamentally behind the scenes twisted

00:09:12,899 --> 00:09:17,519
stuff is basically a bunch of these

00:09:15,509 --> 00:09:21,720
short snippets of code linked together

00:09:17,519 --> 00:09:23,609
by these callbacks which is all well and

00:09:21,720 --> 00:09:25,319
good except then when you have a bunch

00:09:23,609 --> 00:09:27,540
of short snippets of code linked

00:09:25,319 --> 00:09:29,699
together by callbacks things can get

00:09:27,540 --> 00:09:35,939
very messy very quickly

00:09:29,699 --> 00:09:37,980
for instance earlier this year I had to

00:09:35,939 --> 00:09:41,759
debug a particular issue now netbox Bleu

00:09:37,980 --> 00:09:44,399
has a product that acts as a gateway

00:09:41,759 --> 00:09:47,879
device and can have multiple links

00:09:44,399 --> 00:09:51,629
multiple upstream internet links so for

00:09:47,879 --> 00:09:54,209
instance it could have an Ethernet DHCP

00:09:51,629 --> 00:09:55,949
over Ethernet upstream link a PPP over

00:09:54,209 --> 00:09:57,989
ethernet upstream link it might be load

00:09:55,949 --> 00:09:59,519
balancing 80 percent across 120 percent

00:09:57,989 --> 00:10:02,269
across the other but if both come down

00:09:59,519 --> 00:10:04,410
it needs to fail over to a 3G connection

00:10:02,269 --> 00:10:06,989
so there's a daemon running on this

00:10:04,410 --> 00:10:09,559
device written in twisted in Python

00:10:06,989 --> 00:10:12,029
using twisted that's responsible for

00:10:09,559 --> 00:10:15,329
monitoring all these links if one of

00:10:12,029 --> 00:10:16,669
them comes down it needs to repeatedly

00:10:15,329 --> 00:10:20,399
try to bring it back up

00:10:16,669 --> 00:10:22,230
over periods of time so that when it can

00:10:20,399 --> 00:10:25,889
come up it will come back up the system

00:10:22,230 --> 00:10:27,539
doesn't fail now what had happened was

00:10:25,889 --> 00:10:30,209
that for one of these links on one

00:10:27,539 --> 00:10:32,730
particular customers side the link had

00:10:30,209 --> 00:10:37,589
come down the daemon was not trying to

00:10:32,730 --> 00:10:41,129
bring it back up so had a situation life

00:10:37,589 --> 00:10:43,109
side my job was first gather as much

00:10:41,129 --> 00:10:45,419
diagnostic information as I could as

00:10:43,109 --> 00:10:47,669
quickly as I could about the problem

00:10:45,419 --> 00:10:49,879
because I had to restart that service so

00:10:47,669 --> 00:10:52,350
that it would start working again

00:10:49,879 --> 00:10:54,299
then my task was to sit down with the

00:10:52,350 --> 00:10:56,600
code here and the logs here

00:10:54,299 --> 00:10:58,910
try and figure out what code path

00:10:56,600 --> 00:11:00,440
on earth this code followed to get in

00:10:58,910 --> 00:11:05,029
this state but it was never supposed to

00:11:00,440 --> 00:11:07,069
get into so after a while I got out my

00:11:05,029 --> 00:11:09,199
pen and my paper a few different colored

00:11:07,069 --> 00:11:11,420
pens and started drawing diagrams this

00:11:09,199 --> 00:11:13,160
is actually a scan of my notepad I'm

00:11:11,420 --> 00:11:14,480
drawing diagrams to try and follow all

00:11:13,160 --> 00:11:17,149
the callbacks that could have happened

00:11:14,480 --> 00:11:19,279
all the possible exception paths and the

00:11:17,149 --> 00:11:21,440
possible are deferred failure paths

00:11:19,279 --> 00:11:23,269
trying to figure out what it had it had

00:11:21,440 --> 00:11:26,000
done to get in this state eventually I

00:11:23,269 --> 00:11:27,589
finally came out with something found a

00:11:26,000 --> 00:11:30,259
bug that I thought explained the

00:11:27,589 --> 00:11:32,389
situation so fix that about a week later

00:11:30,259 --> 00:11:34,310
I actually decided that bug didn't quite

00:11:32,389 --> 00:11:36,019
explain all of the logs and went back

00:11:34,310 --> 00:11:39,440
and drew some more diagrams and I found

00:11:36,019 --> 00:11:41,660
another bug so hopefully I've convinced

00:11:39,440 --> 00:11:43,790
you that it's important when you're

00:11:41,660 --> 00:11:46,040
writing twisted code to do things right

00:11:43,790 --> 00:11:47,600
so that you don't end up with messy code

00:11:46,040 --> 00:11:48,110
if you have messy code that's not

00:11:47,600 --> 00:11:50,120
readable

00:11:48,110 --> 00:11:52,220
that's not maintainable if someone has

00:11:50,120 --> 00:11:54,370
to spend two hours sitting down drawing

00:11:52,220 --> 00:11:57,759
diagrams to figure out what went wrong

00:11:54,370 --> 00:11:59,810
then you've got an issue on your hands

00:11:57,759 --> 00:12:01,730
ideally someone should be able to look

00:11:59,810 --> 00:12:05,089
at the code and see all the possible

00:12:01,730 --> 00:12:08,720
code paths they're readable code is

00:12:05,089 --> 00:12:12,410
maintainable code so three tips tip

00:12:08,720 --> 00:12:13,699
number one so before I before I give you

00:12:12,410 --> 00:12:15,649
tip number one I'm going to give you a

00:12:13,699 --> 00:12:18,380
contrived example I'll be using this

00:12:15,649 --> 00:12:20,540
example code this so this is not using

00:12:18,380 --> 00:12:22,430
twisted not using threads just doing a

00:12:20,540 --> 00:12:23,930
task the reason I'm showing you this

00:12:22,430 --> 00:12:25,279
example is because I'll be in a minute

00:12:23,930 --> 00:12:26,990
showing you how to do it with twisted

00:12:25,279 --> 00:12:28,699
and then a bit later showing you what it

00:12:26,990 --> 00:12:31,160
would look like dealing with that with

00:12:28,699 --> 00:12:33,550
threading so I'll just step through this

00:12:31,160 --> 00:12:37,910
basically you've got a bunch of URLs

00:12:33,550 --> 00:12:40,430
popping them out and here you're doing a

00:12:37,910 --> 00:12:42,170
URL open of that URL with some argument

00:12:40,430 --> 00:12:44,480
you're doing this sequentially so you've

00:12:42,170 --> 00:12:46,069
got a loop over these you're doing some

00:12:44,480 --> 00:12:48,069
exception handling where you're logging

00:12:46,069 --> 00:12:50,509
errors and continuing on your merry way

00:12:48,069 --> 00:12:53,060
now let me just explain why I've given

00:12:50,509 --> 00:12:56,300
you this example first of all I want to

00:12:53,060 --> 00:12:58,819
demonstrate loops secondly I want to

00:12:56,300 --> 00:13:01,189
demonstrate exception handling thirdly

00:12:58,819 --> 00:13:03,500
I've got this parameter in here this

00:13:01,189 --> 00:13:05,899
total equals blah passed to the web page

00:13:03,500 --> 00:13:07,430
that's just so I have some reason why

00:13:05,899 --> 00:13:09,160
you have to do this web request one

00:13:07,430 --> 00:13:11,770
after the other

00:13:09,160 --> 00:13:13,540
if you were able to fire off this web

00:13:11,770 --> 00:13:15,040
request all at once it would be a very

00:13:13,540 --> 00:13:17,230
different example not what I wanted to

00:13:15,040 --> 00:13:19,060
demonstrate today in reality there are

00:13:17,230 --> 00:13:21,040
lots of situations where you want to do

00:13:19,060 --> 00:13:24,010
tasks that might block an IO or whatever

00:13:21,040 --> 00:13:28,210
one after the other um and so that's

00:13:24,010 --> 00:13:30,970
what I wanted to demonstrate here so tip

00:13:28,210 --> 00:13:33,550
number one is use this inline callbacks

00:13:30,970 --> 00:13:35,230
decorator entwisted whenever you can

00:13:33,550 --> 00:13:39,280
that is whenever you have a sequential

00:13:35,230 --> 00:13:41,080
step of things so basically this code is

00:13:39,280 --> 00:13:43,810
the twisted version so you want to be

00:13:41,080 --> 00:13:45,910
able to do that those web gets while

00:13:43,810 --> 00:13:47,440
you're running in the twisted reactor so

00:13:45,910 --> 00:13:48,820
the twisted reactor can be doing other

00:13:47,440 --> 00:13:51,700
stuff in the background it can be

00:13:48,820 --> 00:13:53,050
emailing your mother it can be rendering

00:13:51,700 --> 00:13:55,780
the Mandelbrot set whatever it's doing

00:13:53,050 --> 00:14:00,940
you don't want to block it with that URL

00:13:55,780 --> 00:14:02,620
Lib open so the difference here you have

00:14:00,940 --> 00:14:05,860
this get page function which gets the

00:14:02,620 --> 00:14:07,900
page what you need to know when you're

00:14:05,860 --> 00:14:09,730
writing or reading twisted functions

00:14:07,900 --> 00:14:14,170
that use the inline callbacks decorator

00:14:09,730 --> 00:14:16,150
is any way you see the yield this is

00:14:14,170 --> 00:14:17,890
interrupting the function returning

00:14:16,150 --> 00:14:20,170
control to the twisted reactor and

00:14:17,890 --> 00:14:22,870
saying wait until this deferred finishes

00:14:20,170 --> 00:14:25,330
so get page returns the deferred the

00:14:22,870 --> 00:14:26,740
yield says to the twisted reactor once

00:14:25,330 --> 00:14:29,380
this page load is finished

00:14:26,740 --> 00:14:32,260
wake me up until then the requested we

00:14:29,380 --> 00:14:33,700
actually can do whatever it wants when

00:14:32,260 --> 00:14:35,950
it's finished you get the page all the

00:14:33,700 --> 00:14:38,290
rest of the code is the same except this

00:14:35,950 --> 00:14:41,290
final line where we were returning the

00:14:38,290 --> 00:14:43,090
total this is the only reason that this

00:14:41,290 --> 00:14:46,090
is different is because in Python syntax

00:14:43,090 --> 00:14:48,880
you can't have a return of a value in a

00:14:46,090 --> 00:14:51,940
function that has a yield until Python

00:14:48,880 --> 00:14:53,680
3.3 when python 3.3 comes along you can

00:14:51,940 --> 00:14:54,970
do that but in the meantime we have to

00:14:53,680 --> 00:14:59,020
resort to using deferred

00:14:54,970 --> 00:15:02,140
return value instead of return yes okay

00:14:59,020 --> 00:15:04,060
so this is this is the previous slide so

00:15:02,140 --> 00:15:05,770
the differences are here you are a Lib

00:15:04,060 --> 00:15:07,990
open we've replaced with get page and a

00:15:05,770 --> 00:15:11,500
yield down here we were returning a

00:15:07,990 --> 00:15:12,790
total I'll just flick forward now sorry

00:15:11,500 --> 00:15:14,490
about this sizes being different I

00:15:12,790 --> 00:15:17,170
didn't realize that when I was making it

00:15:14,490 --> 00:15:17,950
here you've got yield get page here

00:15:17,170 --> 00:15:19,000
you've got deferred

00:15:17,950 --> 00:15:21,459
return value

00:15:19,000 --> 00:15:24,430
all right fairly straightforward fairly

00:15:21,459 --> 00:15:25,990
readable now I think it's not beyond the

00:15:24,430 --> 00:15:27,790
realm of comprehension that some of you

00:15:25,990 --> 00:15:30,910
are looking at this code thinking hold

00:15:27,790 --> 00:15:33,459
on a second page equals yield is that

00:15:30,910 --> 00:15:35,579
even possible is that even valid syntax

00:15:33,459 --> 00:15:42,720
is there anyone since thinking that a

00:15:35,579 --> 00:15:45,970
few two or three I can right now

00:15:42,720 --> 00:15:47,529
demonstrate that syntax but if everyone

00:15:45,970 --> 00:15:49,660
here almost everyone here knows that

00:15:47,529 --> 00:15:50,350
syntax already and it may be a waste of

00:15:49,660 --> 00:15:52,600
my time

00:15:50,350 --> 00:15:54,670
so hands up if you would like me to go

00:15:52,600 --> 00:15:56,470
through demonstrating that syntax we

00:15:54,670 --> 00:15:58,300
have a few people I think that we have

00:15:56,470 --> 00:16:00,160
okay we have more people than said that

00:15:58,300 --> 00:16:05,290
put out their hands before so we'll

00:16:00,160 --> 00:16:08,740
demonstrate that all right so that one

00:16:05,290 --> 00:16:11,759
terminal so you'll probably familiar

00:16:08,740 --> 00:16:15,790
with being able to define a generator

00:16:11,759 --> 00:16:19,569
yield X yield X plus one yield two times

00:16:15,790 --> 00:16:24,370
X and then you can say for I in food

00:16:19,569 --> 00:16:28,540
seven print I so where you see the

00:16:24,370 --> 00:16:30,629
yields this is now being returned out

00:16:28,540 --> 00:16:33,160
following the iterative protocol

00:16:30,629 --> 00:16:36,329
probably familiar with that and I can

00:16:33,160 --> 00:16:38,920
actually get the generator object and

00:16:36,329 --> 00:16:40,300
iterate through it that's generator

00:16:38,920 --> 00:16:43,509
object iterate through it using the

00:16:40,300 --> 00:16:44,889
iterative protocol manually get the same

00:16:43,509 --> 00:16:46,990
results when I hit the end it raises

00:16:44,889 --> 00:16:53,879
stop iteration so you've probably seen

00:16:46,990 --> 00:16:53,879
that what you probably haven't seen is

00:16:54,839 --> 00:16:59,889
something like this we're having

00:16:57,879 --> 00:17:02,050
something equals yield something so he

00:16:59,889 --> 00:17:03,790
will yield there y plus one he will

00:17:02,050 --> 00:17:08,860
yield two times zero and throw away the

00:17:03,790 --> 00:17:11,740
result again you can create a bar object

00:17:08,860 --> 00:17:13,390
that's a generator just like before when

00:17:11,740 --> 00:17:15,189
we look at the generator though as well

00:17:13,390 --> 00:17:18,669
as this next function that I was calling

00:17:15,189 --> 00:17:20,829
we also have this thing called send they

00:17:18,669 --> 00:17:23,350
have similar to next so the first thing

00:17:20,829 --> 00:17:25,510
I'll do is I'll send in a none this gets

00:17:23,350 --> 00:17:28,059
the ball rolling runs the generator

00:17:25,510 --> 00:17:30,490
until it hits the first yield so I

00:17:28,059 --> 00:17:31,610
passed in seven as X it's yielding out

00:17:30,490 --> 00:17:35,809
the seven that's what I

00:17:31,610 --> 00:17:38,720
get down here and now it's interrupted

00:17:35,809 --> 00:17:40,429
on that yield statement now what I can

00:17:38,720 --> 00:17:42,650
do is I can send in something else so

00:17:40,429 --> 00:17:44,840
I'm going to send in a two so what it's

00:17:42,650 --> 00:17:47,150
done is it's sending that - as the

00:17:44,840 --> 00:17:49,910
result of the yield stored that in Y and

00:17:47,150 --> 00:17:52,090
then yielded y plus 1 which is 3 here

00:17:49,910 --> 00:17:54,980
and it's now interrupted on this yield

00:17:52,090 --> 00:18:00,500
all right again I can send something

00:17:54,980 --> 00:18:03,679
else in send 21 so that's stored in Z

00:18:00,500 --> 00:18:04,760
yielded 2 times Z got 42 out it's

00:18:03,679 --> 00:18:06,650
interrupted on this one

00:18:04,760 --> 00:18:08,240
I can send anything I like in now

00:18:06,650 --> 00:18:10,700
because I'm discarding the result here

00:18:08,240 --> 00:18:12,440
I'm not assigning it to anything and

00:18:10,700 --> 00:18:14,210
it'll fall out the bottom of the

00:18:12,440 --> 00:18:18,679
function Ray's stop iteration as next

00:18:14,210 --> 00:18:22,429
does you also probably saw this throw

00:18:18,679 --> 00:18:28,790
function method here let me demonstrate

00:18:22,429 --> 00:18:32,570
that as try yield ready except exception

00:18:28,790 --> 00:18:37,370
and we will print something out and we

00:18:32,570 --> 00:18:39,020
will create a bears all right so what

00:18:37,370 --> 00:18:40,940
I'll do is as before I'll send in none

00:18:39,020 --> 00:18:42,980
to get the ball rolling so it's now

00:18:40,940 --> 00:18:45,500
yielded ready it's interrupted on this

00:18:42,980 --> 00:18:50,780
statement what I can do now is I can do

00:18:45,500 --> 00:18:52,520
G 3 I can throw in a value error for

00:18:50,780 --> 00:18:54,400
example and that's the error I'm going

00:18:52,520 --> 00:18:56,750
to throw in you can actually throw in a

00:18:54,400 --> 00:18:57,950
you can actually throw in a trace back

00:18:56,750 --> 00:18:59,690
with that but I'm not doing that right

00:18:57,950 --> 00:19:01,610
now because creating the trace back

00:18:59,690 --> 00:19:04,940
object is just a bit messy alright so

00:19:01,610 --> 00:19:06,770
what we've got here we've got yikes it's

00:19:04,940 --> 00:19:08,570
printed it's printed the string of the

00:19:06,770 --> 00:19:10,040
exception which is your house is on fire

00:19:08,570 --> 00:19:14,330
it's fallen at the end of the function

00:19:10,040 --> 00:19:16,820
and it's raised stop iteration um so as

00:19:14,330 --> 00:19:19,549
this is a syntax feature of Python as of

00:19:16,820 --> 00:19:21,500
button 2.5 adds a python 2.5 you can

00:19:19,549 --> 00:19:24,770
have these generators that talk in both

00:19:21,500 --> 00:19:28,580
directions and that's the syntax feature

00:19:24,770 --> 00:19:31,730
that twisted is taking advantage is

00:19:28,580 --> 00:19:33,110
taking advantage of here and what that

00:19:31,730 --> 00:19:34,880
means is that if there is an error

00:19:33,110 --> 00:19:36,860
during the get page whether that's an

00:19:34,880 --> 00:19:42,230
exception or a deferred a failed

00:19:36,860 --> 00:19:44,360
deferred this yield will it will look to

00:19:42,230 --> 00:19:47,990
the function to the calling function

00:19:44,360 --> 00:19:49,130
as if this yield raised an exception and

00:19:47,990 --> 00:19:51,170
so you can catch it using a normal

00:19:49,130 --> 00:19:53,200
accept whether it's a deferred failed

00:19:51,170 --> 00:19:57,890
deferred or an exception objection

00:19:53,200 --> 00:20:00,110
so I've just shown you how that works

00:19:57,890 --> 00:20:02,480
but I haven't yet explained to you why

00:20:00,110 --> 00:20:05,210
you should use inline callbacks

00:20:02,480 --> 00:20:07,400
so why you should use inline callbacks

00:20:05,210 --> 00:20:10,820
because if you do not I will hunt you

00:20:07,400 --> 00:20:12,620
down and kill you or probably more

00:20:10,820 --> 00:20:13,929
accurately whoever has to maintain your

00:20:12,620 --> 00:20:19,100
code will hunt you down and kill you

00:20:13,929 --> 00:20:20,840
that may even be a future you so for

00:20:19,100 --> 00:20:23,360
example if I was writing this code using

00:20:20,840 --> 00:20:25,280
straight deferreds without inline

00:20:23,360 --> 00:20:26,480
callbacks it would look like this so

00:20:25,280 --> 00:20:28,190
here we have the base case we're

00:20:26,480 --> 00:20:30,140
returning the total if the URLs is empty

00:20:28,190 --> 00:20:31,610
we're popping a URL out we're using may

00:20:30,140 --> 00:20:33,080
be deferred to catch whether it's an

00:20:31,610 --> 00:20:36,110
exception or a failure so that both of

00:20:33,080 --> 00:20:38,210
them do the same thing we're doing

00:20:36,110 --> 00:20:40,190
adding the callbacks here with the

00:20:38,210 --> 00:20:42,049
correct args we're defining the

00:20:40,190 --> 00:20:43,490
callbacks down the bottom here and then

00:20:42,049 --> 00:20:45,200
we have to add the callback of begin

00:20:43,490 --> 00:20:47,690
again to do the loops that it's doing it

00:20:45,200 --> 00:20:50,090
iteratively so that we can do that

00:20:47,690 --> 00:20:52,450
function so this is why you use inline

00:20:50,090 --> 00:20:54,799
callbacks for anything that's sequential

00:20:52,450 --> 00:20:58,280
sequential code makes it much more

00:20:54,799 --> 00:21:00,380
readable much more maintainable all

00:20:58,280 --> 00:21:02,210
right so this is a good point in time

00:21:00,380 --> 00:21:05,059
for me to do a brief comparison between

00:21:02,210 --> 00:21:07,220
twisted and threading twisted is doing

00:21:05,059 --> 00:21:08,360
here what you see with the yields it's

00:21:07,220 --> 00:21:10,730
doing what's called cooperative

00:21:08,360 --> 00:21:12,559
multitasking what this means is that the

00:21:10,730 --> 00:21:14,200
twisted reactor is never going to turn

00:21:12,559 --> 00:21:17,750
around and say to the running task

00:21:14,200 --> 00:21:20,450
you've had enough time stop there it's

00:21:17,750 --> 00:21:22,990
your turn to run that's what how that's

00:21:20,450 --> 00:21:25,340
what the scheduler will do with with

00:21:22,990 --> 00:21:26,919
threading it will say to that thread

00:21:25,340 --> 00:21:30,650
you've had enough it's your turn

00:21:26,919 --> 00:21:32,900
the twisted reactor will always allow

00:21:30,650 --> 00:21:36,669
the current task to run until the task

00:21:32,900 --> 00:21:41,299
either says ok I'm finished or it says

00:21:36,669 --> 00:21:43,850
wake me up when this happens and what

00:21:41,299 --> 00:21:46,100
that means is that entwisted if your

00:21:43,850 --> 00:21:48,200
task is malicious it can hold up the

00:21:46,100 --> 00:21:50,660
whole rest of your main process if your

00:21:48,200 --> 00:21:52,250
task never says wake me up if your task

00:21:50,660 --> 00:21:55,010
calls you are a liberal open if your

00:21:52,250 --> 00:21:55,929
cart asks cause sleep 100 the reactor is

00:21:55,010 --> 00:21:59,320
never getting control

00:21:55,929 --> 00:22:00,580
back it can never do sigil anything else

00:21:59,320 --> 00:22:02,139
to happen it will never email your

00:22:00,580 --> 00:22:03,700
mother or in the back Mandelbrot set or

00:22:02,139 --> 00:22:06,159
calculate the digit of pi or whatever

00:22:03,700 --> 00:22:10,740
you're doing in the background however

00:22:06,159 --> 00:22:14,590
the advantage is that that with

00:22:10,740 --> 00:22:16,240
threading your code may be interrupted

00:22:14,590 --> 00:22:17,019
at any time even inside one of your

00:22:16,240 --> 00:22:20,350
function calls

00:22:17,019 --> 00:22:22,029
whereas with twisted you know exactly

00:22:20,350 --> 00:22:24,190
where that code can be interrupted it's

00:22:22,029 --> 00:22:26,619
those yield functions where that yield

00:22:24,190 --> 00:22:28,269
is is where you can be interrupted so

00:22:26,619 --> 00:22:30,610
this is the original code I showed you

00:22:28,269 --> 00:22:32,529
before if you were doing this with

00:22:30,610 --> 00:22:35,049
twister with threading you'd have to

00:22:32,529 --> 00:22:36,970
look through this and say oh okay this

00:22:35,049 --> 00:22:39,340
is not thread safe something could

00:22:36,970 --> 00:22:41,470
interrupt me between checking soft URLs

00:22:39,340 --> 00:22:42,519
and popping from it we'll have to do

00:22:41,470 --> 00:22:45,369
something about that

00:22:42,519 --> 00:22:46,629
we'll do it all true do a try exception

00:22:45,369 --> 00:22:49,299
as long as we know that the pop is

00:22:46,629 --> 00:22:51,100
atomic that's good enough or if we don't

00:22:49,299 --> 00:22:53,169
know that URLs is something with an

00:22:51,100 --> 00:22:56,200
atomic pop we'll have to make sure we

00:22:53,169 --> 00:22:57,820
find a thread safe library we might also

00:22:56,200 --> 00:22:59,139
need to do at the bottom here I've got

00:22:57,820 --> 00:23:01,389
some sort of lock we're calling an

00:22:59,139 --> 00:23:03,009
external function you probably know what

00:23:01,389 --> 00:23:05,230
the function does you probably know

00:23:03,009 --> 00:23:06,580
whether it needs a lock or not so that's

00:23:05,230 --> 00:23:08,080
the sort of concern that you have when

00:23:06,580 --> 00:23:10,509
you're doing threading when am I going

00:23:08,080 --> 00:23:13,299
to be interrupted with twisted you've

00:23:10,509 --> 00:23:18,879
got the opposite concern and what that

00:23:13,299 --> 00:23:20,950
concern is is basically yeah don't is am

00:23:18,879 --> 00:23:22,749
I going to block the reactor and so

00:23:20,950 --> 00:23:26,289
that's my second tip don't block the

00:23:22,749 --> 00:23:29,110
reactor and here's how first of all if

00:23:26,289 --> 00:23:30,369
you're doing anything with IO calls if

00:23:29,110 --> 00:23:32,200
you're doing anything with timing

00:23:30,369 --> 00:23:34,899
basically if you're doing anything which

00:23:32,200 --> 00:23:36,519
would normally be long running you need

00:23:34,899 --> 00:23:39,879
to find the twister alternative to the

00:23:36,519 --> 00:23:44,559
standard library so use get page instead

00:23:39,879 --> 00:23:47,639
of URL Lib open I use call reactor call

00:23:44,559 --> 00:23:50,019
later instead of using time dot sleep

00:23:47,639 --> 00:23:52,330
the other thing is that if you do have a

00:23:50,019 --> 00:23:55,360
computation a CPU intensive task like a

00:23:52,330 --> 00:23:57,159
JSON decode this is actually something

00:23:55,360 --> 00:23:59,200
that you can farm off to a thread in

00:23:57,159 --> 00:24:01,179
twisted so twisted has a deferred a

00:23:59,200 --> 00:24:03,460
thread or defer to thread pool function

00:24:01,179 --> 00:24:05,109
and what that will do is you say run

00:24:03,460 --> 00:24:06,850
this function in a thread pool with

00:24:05,109 --> 00:24:08,259
these args make sure it's something

00:24:06,850 --> 00:24:09,639
that's not using a shared resources

00:24:08,259 --> 00:24:12,639
something like a

00:24:09,639 --> 00:24:14,379
people JSON load s particularly in that

00:24:12,639 --> 00:24:16,899
case because the C library it doesn't

00:24:14,379 --> 00:24:19,179
hold up the Gil and you get a deferred

00:24:16,899 --> 00:24:22,779
object as far as you're concerned you've

00:24:19,179 --> 00:24:24,749
got a deferred and once that finishes it

00:24:22,779 --> 00:24:26,889
will fire the same as any other deferred

00:24:24,749 --> 00:24:31,839
so if you've got computation intensive

00:24:26,889 --> 00:24:34,539
code you do that tip 3 manholes so what

00:24:31,839 --> 00:24:36,549
I've got up here is some magic code in

00:24:34,539 --> 00:24:38,499
twisted a manhole is basically a Python

00:24:36,549 --> 00:24:40,269
prompt running inside your interpreter

00:24:38,499 --> 00:24:42,849
so inside you're running twisted

00:24:40,269 --> 00:24:45,999
application so you can connect in debug

00:24:42,849 --> 00:24:47,499
your application alive now I'm just

00:24:45,999 --> 00:24:50,019
about out of time so what I can either

00:24:47,499 --> 00:24:52,119
do is I can either have questions or I

00:24:50,019 --> 00:24:55,059
can demonstrate this manhole using Tross

00:24:52,119 --> 00:24:55,959
not maybe if i demo it I can still have

00:24:55,059 --> 00:24:58,179
time for one question I'm not sure

00:24:55,959 --> 00:25:00,309
what's the time constraints here I've

00:24:58,179 --> 00:25:01,989
got five minutes with which to I'll do a

00:25:00,309 --> 00:25:08,259
quick demo and then any minutes left we

00:25:01,989 --> 00:25:12,359
have we will do that for questions so so

00:25:08,259 --> 00:25:16,209
what I have over here hopefully is

00:25:12,359 --> 00:25:21,700
hopefully somewhere that's the wrong one

00:25:16,209 --> 00:25:25,570
huh this will take that's on the wrong

00:25:21,700 --> 00:25:27,309
desktop okay so I have a trusted server

00:25:25,570 --> 00:25:30,039
here you'll have to trust me on this and

00:25:27,309 --> 00:25:32,139
I've got a manhole into it here so and

00:25:30,039 --> 00:25:34,839
what I'll do is I will just open a new

00:25:32,139 --> 00:25:37,239
terminal here oh there it is

00:25:34,839 --> 00:25:40,509
run trusteth for you in the foreground

00:25:37,239 --> 00:25:44,099
so this is frozen off I'm going to play

00:25:40,509 --> 00:25:48,700
on localhost come on localhost username

00:25:44,099 --> 00:25:50,109
and is that that's not localhost that's

00:25:48,700 --> 00:25:55,719
actually connecting to a web server

00:25:50,109 --> 00:25:57,419
let's play on localhost okay using a

00:25:55,719 --> 00:26:00,489
test account

00:25:57,419 --> 00:26:02,499
okay so here's me I'm a stick-figure I'm

00:26:00,489 --> 00:26:07,299
running around that's all good in my man

00:26:02,499 --> 00:26:12,940
hole over here I'm going to get the game

00:26:07,299 --> 00:26:15,279
object I'm going to get a player object

00:26:12,940 --> 00:26:18,459
with the username of test okay I got a

00:26:15,279 --> 00:26:20,440
player object here and now okay I'm not

00:26:18,459 --> 00:26:21,789
having much fun here where's my enemies

00:26:20,440 --> 00:26:25,840
there are a few bots

00:26:21,789 --> 00:26:29,049
in here okay there's an enemy not very

00:26:25,840 --> 00:26:30,970
good um I win all right so what I'm

00:26:29,049 --> 00:26:34,690
gonna do is I'm going to give myself an

00:26:30,970 --> 00:26:37,059
upgrade I think I need a shield oh look

00:26:34,690 --> 00:26:42,179
I've got a shield now I know you shot my

00:26:37,059 --> 00:26:46,299
shield oh look he killed me oh well look

00:26:42,179 --> 00:26:48,850
respawn oh look at that

00:26:46,299 --> 00:26:50,440
okay and just for one more you can eat I

00:26:48,850 --> 00:26:52,450
can even give myself an upgrade that

00:26:50,440 --> 00:26:54,309
doesn't isn't even possible to get in

00:26:52,450 --> 00:26:57,070
the game let's give myself this upgrade

00:26:54,309 --> 00:27:00,039
look now I'm a ninja with ricochet

00:26:57,070 --> 00:27:03,039
machine gun and a shield look at that

00:27:00,039 --> 00:27:05,559
so typically I'm suggesting you use man

00:27:03,039 --> 00:27:08,019
hold to debug applications that are

00:27:05,559 --> 00:27:09,820
broken by connecting in and accessing

00:27:08,019 --> 00:27:14,909
them but I'm just using it for a bit of

00:27:09,820 --> 00:27:14,909
fun here okay so that's me any questions

00:27:28,780 --> 00:27:34,550
just a quick one about testing how do

00:27:31,400 --> 00:27:36,740
you test these stuff all right there's a

00:27:34,550 --> 00:27:39,290
few different options here so first of

00:27:36,740 --> 00:27:43,010
all twisted actually comes with a an

00:27:39,290 --> 00:27:45,830
asynchronous test test running system

00:27:43,010 --> 00:27:49,550
called trial um and that's how twisted

00:27:45,830 --> 00:27:51,830
writes their own tests and that is how a

00:27:49,550 --> 00:27:53,510
lot of people that use twisted will test

00:27:51,830 --> 00:27:54,860
their stuff it's designed to test

00:27:53,510 --> 00:27:56,690
asynchronous stuff it basically

00:27:54,860 --> 00:27:59,690
automatically mocks out all the timing

00:27:56,690 --> 00:28:01,520
stuff for you so that you can write code

00:27:59,690 --> 00:28:02,840
that even though it's testing that it

00:28:01,520 --> 00:28:03,830
should be waiting for 10 seconds and

00:28:02,840 --> 00:28:05,330
doing something that still runs

00:28:03,830 --> 00:28:07,760
instantly because you've mucked out the

00:28:05,330 --> 00:28:11,120
timer so trial is a really good option

00:28:07,760 --> 00:28:14,480
there but it's also possible by looking

00:28:11,120 --> 00:28:16,700
at the trial source code to find ways of

00:28:14,480 --> 00:28:18,650
using the similar sorts of things in

00:28:16,700 --> 00:28:21,680
other test frameworks for example at

00:28:18,650 --> 00:28:23,570
netbooks blue we right I don't know if

00:28:21,680 --> 00:28:26,540
any of you went to the PI test fun cards

00:28:23,570 --> 00:28:29,600
talk we have a fun cog that we use in PI

00:28:26,540 --> 00:28:33,200
test that is basically a twisted thing

00:28:29,600 --> 00:28:35,030
you call you have the twisted phone cog

00:28:33,200 --> 00:28:36,470
you called twisted doc wait deferred and

00:28:35,030 --> 00:28:38,150
that will wait till the deferred

00:28:36,470 --> 00:28:39,380
finishes and assert that the reactor is

00:28:38,150 --> 00:28:40,360
clean at the end that there's no other

00:28:39,380 --> 00:28:45,050
waiting deferreds

00:28:40,360 --> 00:28:46,850
so and the code for that is about 10-15

00:28:45,050 --> 00:28:49,220
lines of code to get that as a phone

00:28:46,850 --> 00:28:51,860
card in PI test so by by looking at the

00:28:49,220 --> 00:29:00,380
way that trial does it you can you can

00:28:51,860 --> 00:29:01,820
test things like that so in I'm used to

00:29:00,380 --> 00:29:04,250
in JavaScript with asynchronous

00:29:01,820 --> 00:29:06,440
programming having missing bits of trace

00:29:04,250 --> 00:29:09,440
back because it doesn't so does the

00:29:06,440 --> 00:29:13,640
yield syntax fix that issue the yield

00:29:09,440 --> 00:29:15,920
syntax can fix that issue but is not

00:29:13,640 --> 00:29:18,830
fair that is not fixed in the in the

00:29:15,920 --> 00:29:21,710
latest released version so that's that's

00:29:18,830 --> 00:29:23,480
the biggest complaint about the yield

00:29:21,710 --> 00:29:27,290
syntax in inline callbacks is that your

00:29:23,480 --> 00:29:30,230
trace backs only basically show you two

00:29:27,290 --> 00:29:32,270
levels of of yielded stack and don't

00:29:30,230 --> 00:29:32,659
show you the rest of it I submitted a

00:29:32,270 --> 00:29:35,090
patch

00:29:32,659 --> 00:29:36,889
week ago that fixed that I've never

00:29:35,090 --> 00:29:39,950
submitted to the twisted codebase before

00:29:36,889 --> 00:29:42,289
but I was frustrated right and glyph

00:29:39,950 --> 00:29:45,889
who's the creator of twisted his

00:29:42,289 --> 00:29:48,019
reaction was his first reaction was well

00:29:45,889 --> 00:29:49,700
and I wasn't quite sure how to read that

00:29:48,019 --> 00:29:53,379
so said I do you think that's a bit evil

00:29:49,700 --> 00:29:55,700
and he said hell yes it's evil but

00:29:53,379 --> 00:29:58,009
that's I think his words were that's

00:29:55,700 --> 00:29:59,809
freaking cool I want it so I've

00:29:58,009 --> 00:30:02,289
submitted that to twisted now and I'll

00:29:59,809 --> 00:30:02,289

YouTube URL: https://www.youtube.com/watch?v=7Au2PDYD6Bk


