Title: Django Testing Tips
Publication date: 2012-08-23
Playlist: PyCon Australia 2012
Description: 
	Simon Meers
Django's test framework is excellent for ensuring that your site/app is robust, but is often neglected because of the time it can take to build and maintain a comprehensive test suite. Here we will discuss a number of tips and tricks to r
Captions: 
	00:00:04,160 --> 00:00:09,139
thank you Greg I'm not sure I've been

00:00:07,200 --> 00:00:12,120
over ambitious in preparing this talk

00:00:09,139 --> 00:00:13,980
instead of doing slides I've actually

00:00:12,120 --> 00:00:16,170
decided to try to build something live

00:00:13,980 --> 00:00:19,289
and actually deploy it for you guys to

00:00:16,170 --> 00:00:22,410
play with we'll see whether or not there

00:00:19,289 --> 00:00:24,900
was a good idea shortly so I'm going to

00:00:22,410 --> 00:00:26,849
be try to be quick when I tested this

00:00:24,900 --> 00:00:29,820
this morning took me 45 minutes and I've

00:00:26,849 --> 00:00:33,090
only got 30 so I'm going to try to cut

00:00:29,820 --> 00:00:35,160
corners wherever I can we all know in

00:00:33,090 --> 00:00:39,090
theory testing is good and yes i am

00:00:35,160 --> 00:00:42,690
using emacs for my slides in Django's

00:00:39,090 --> 00:00:45,539
cool as of yesterday we had 116 thousand

00:00:42,690 --> 00:00:49,020
lines of code and 91 thousand lines of

00:00:45,539 --> 00:00:51,120
tests so we've got some good test

00:00:49,020 --> 00:00:52,920
coverage I daresay pretty much all of

00:00:51,120 --> 00:00:54,930
our Django projects don't have anywhere

00:00:52,920 --> 00:00:57,300
near that much coverage in practice

00:00:54,930 --> 00:00:59,609
makes Django very robust but our apps

00:00:57,300 --> 00:01:04,260
don't tend to be quite so good because

00:00:59,609 --> 00:01:06,390
testing can be tedious we often build it

00:01:04,260 --> 00:01:08,580
it seems to work we leave it if it

00:01:06,390 --> 00:01:10,409
breaks we go and fix it but we often

00:01:08,580 --> 00:01:13,950
don't have as many tests as we could or

00:01:10,409 --> 00:01:15,450
should but when you build stuff you

00:01:13,950 --> 00:01:17,310
should be testing it in the browser

00:01:15,450 --> 00:01:19,110
anyway so you build it test in the

00:01:17,310 --> 00:01:21,119
browser did it work did not work go and

00:01:19,110 --> 00:01:23,970
fix it if you can get into some good

00:01:21,119 --> 00:01:26,130
habits of doing more testing in a shell

00:01:23,970 --> 00:01:27,600
or in a test suite instead of just

00:01:26,130 --> 00:01:28,920
keeping on reverting back to the browser

00:01:27,600 --> 00:01:31,110
then you can go and replay those

00:01:28,920 --> 00:01:32,549
infinitely and it'll automatically tell

00:01:31,110 --> 00:01:36,270
you when you break things in the future

00:01:32,549 --> 00:01:39,060
so we cheat as much as we can by finding

00:01:36,270 --> 00:01:41,610
shortcuts and tips and tricks to make

00:01:39,060 --> 00:01:44,939
testing more pleasant quicker and that's

00:01:41,610 --> 00:01:46,740
what this talk is going to be about so

00:01:44,939 --> 00:01:48,119
given that slides can be tedious as well

00:01:46,740 --> 00:01:51,060
I'm going to actually just build

00:01:48,119 --> 00:01:52,500
something what I'm building is not

00:01:51,060 --> 00:01:53,880
necessarily how you're going to do

00:01:52,500 --> 00:01:56,310
things normally I just tried to sort of

00:01:53,880 --> 00:01:58,170
cram as many tips in as possible so some

00:01:56,310 --> 00:02:00,570
things won't be best practice and so on

00:01:58,170 --> 00:02:03,149
pick and choose the bits and pieces that

00:02:00,570 --> 00:02:05,070
work best for you so what I thought I

00:02:03,149 --> 00:02:07,259
would build a thought of try to make it

00:02:05,070 --> 00:02:10,429
topical and something that we can maybe

00:02:07,259 --> 00:02:12,379
use as I'm going to build an app

00:02:10,429 --> 00:02:15,170
to let you guys all tell me what you

00:02:12,379 --> 00:02:17,739
think the best things for me to go and

00:02:15,170 --> 00:02:23,049
spend my day on Tuesday seeing in Hobart

00:02:17,739 --> 00:02:25,489
so make a list of your must-see

00:02:23,049 --> 00:02:28,400
attractions in Hobart and you can all

00:02:25,489 --> 00:02:30,469
rank them and whoever's it'll aggregate

00:02:28,400 --> 00:02:32,000
based on the ranks and tell me ok I've

00:02:30,469 --> 00:02:34,299
got one hour left on tuesday i'm going

00:02:32,000 --> 00:02:42,139
to see this based on audience response

00:02:34,299 --> 00:02:46,489
so what I've prepared so far is a few

00:02:42,139 --> 00:02:48,889
requirements an empty directory and I've

00:02:46,489 --> 00:02:50,510
already initialized my virtual length so

00:02:48,889 --> 00:02:54,200
that you don't have to wait for that to

00:02:50,510 --> 00:03:02,650
download but I should have access to

00:02:54,200 --> 00:03:09,049
this I'll create a project and let's

00:03:02,650 --> 00:03:14,090
make managed up by runnable my project

00:03:09,049 --> 00:03:17,329
is valid good if I try to test it will

00:03:14,090 --> 00:03:24,889
not work because i need a database

00:03:17,329 --> 00:03:27,919
engine so let's open up our settings now

00:03:24,889 --> 00:03:31,720
the beautiful thing about this is are

00:03:27,919 --> 00:03:34,310
not actually going to use sequel light

00:03:31,720 --> 00:03:36,530
but if i tell it i'm going to use sequel

00:03:34,310 --> 00:03:38,269
light oh it's not going to save to a

00:03:36,530 --> 00:03:39,709
file its going to do it all in RAM for

00:03:38,269 --> 00:03:41,780
my testing so that that will at least

00:03:39,709 --> 00:03:46,669
let my test run and it will let them run

00:03:41,780 --> 00:03:47,959
very quickly ok now see all the

00:03:46,669 --> 00:03:50,629
wonderful tests I've written already

00:03:47,959 --> 00:03:53,930
running which are actually all the

00:03:50,629 --> 00:03:58,250
contributes which I don't actually want

00:03:53,930 --> 00:04:00,739
to run but they do when they do so

00:03:58,250 --> 00:04:03,019
fairly quickly what I'm going to

00:04:00,739 --> 00:04:06,739
actually want to do is test my app which

00:04:03,019 --> 00:04:12,199
I haven't created yet so let's say start

00:04:06,739 --> 00:04:13,639
up and let's call that must see and I

00:04:12,199 --> 00:04:16,540
could try to test that but I better

00:04:13,639 --> 00:04:16,540
install it first

00:04:19,190 --> 00:04:24,889
now I've also in my requirements you

00:04:22,139 --> 00:04:29,610
might have noted i have this thing

00:04:24,889 --> 00:04:32,280
testing demo i'll install that as well

00:04:29,610 --> 00:04:35,099
that's just got some basis snippets and

00:04:32,280 --> 00:04:38,099
so on in there and also a base template

00:04:35,099 --> 00:04:44,460
for me to run things those are installed

00:04:38,099 --> 00:04:50,849
so can i test my app i can one test who

00:04:44,460 --> 00:04:53,069
knows what the one test is the very very

00:04:50,849 --> 00:04:55,409
useful test which is confirming that one

00:04:53,069 --> 00:04:58,710
plus one equals two so all is right in

00:04:55,409 --> 00:05:02,639
the world i think i'll actually get rid

00:04:58,710 --> 00:05:04,620
of that one so straight into it first

00:05:02,639 --> 00:05:08,400
thing we'll do is get some models

00:05:04,620 --> 00:05:11,970
happening we've already got that that's

00:05:08,400 --> 00:05:19,979
very helpful so in hobart we have

00:05:11,970 --> 00:05:22,169
attractions each attraction i was very

00:05:19,979 --> 00:05:24,990
tempted by ryan's presentation yesterday

00:05:22,169 --> 00:05:27,240
to use his play it again sam i actually

00:05:24,990 --> 00:05:30,570
am typing here you will see lots of

00:05:27,240 --> 00:05:32,539
mistakes please bear with me feel free

00:05:30,570 --> 00:05:40,639
to shout out if something is obviously

00:05:32,539 --> 00:05:44,940
stupidly wrong but that could be true

00:05:40,639 --> 00:05:46,770
okay let's make it ordered

00:05:44,940 --> 00:05:51,509
alphabetically to make it sort of

00:05:46,770 --> 00:05:58,020
objective to start with and let's make

00:05:51,509 --> 00:06:00,870
them print nicely any mistakes yet apart

00:05:58,020 --> 00:06:04,469
from all the ones of backspace we also

00:06:00,870 --> 00:06:08,280
want to be able to rank stuff so let's

00:06:04,469 --> 00:06:10,699
create this each attraction will be

00:06:08,280 --> 00:06:10,699
ranked

00:06:12,970 --> 00:06:20,300
and let's make a related name because

00:06:15,650 --> 00:06:23,599
those are cool let's deal with wrapping

00:06:20,300 --> 00:06:25,610
okay I won't get you guys to log in and

00:06:23,599 --> 00:06:29,720
email authentication all that sort of

00:06:25,610 --> 00:06:41,479
stuff so instead will opt for let's go

00:06:29,720 --> 00:06:44,240
with a session uuid and let's say each

00:06:41,479 --> 00:06:53,719
thing has a rank knows I installed a

00:06:44,240 --> 00:06:58,819
thing called Jango positions and we have

00:06:53,719 --> 00:07:01,250
a position filled yeah you say no equals

00:06:58,819 --> 00:07:03,560
true so each person for each traction

00:07:01,250 --> 00:07:07,490
each each session for each attraction

00:07:03,560 --> 00:07:11,659
can have again ranked their things

00:07:07,490 --> 00:07:22,909
preferably only once so let's say unique

00:07:11,659 --> 00:07:25,610
together attraction and session okay now

00:07:22,909 --> 00:07:28,099
the good habit I like to get into these

00:07:25,610 --> 00:07:29,630
days is actually before I even go and

00:07:28,099 --> 00:07:31,759
put these in a database I'll go and run

00:07:29,630 --> 00:07:34,009
some tests to make sure it works that

00:07:31,759 --> 00:07:35,779
way I'm not creating it doing an initial

00:07:34,009 --> 00:07:37,490
migration migrating again migrating

00:07:35,779 --> 00:07:38,979
again migrating again and then rewinding

00:07:37,490 --> 00:07:43,430
them all and compressing and so on so

00:07:38,979 --> 00:07:46,219
I'll actually go to my tests now and see

00:07:43,430 --> 00:07:53,020
if this worked so let's say we want to

00:07:46,219 --> 00:07:53,020
test this position thing I just created

00:07:53,139 --> 00:08:00,139
first of all we're going to want some

00:07:54,919 --> 00:08:02,150
models as we could use fixtures and not

00:08:00,139 --> 00:08:04,840
going to there's some talk some more

00:08:02,150 --> 00:08:04,840
about that at the end

00:08:06,270 --> 00:08:11,310
what I'm going to also do is make

00:08:08,580 --> 00:08:13,530
something so I can do this really

00:08:11,310 --> 00:08:18,420
quickly so and if you've checked out the

00:08:13,530 --> 00:08:25,400
central business district yet I haven't

00:08:18,420 --> 00:08:25,400
much if I make a function here which

00:08:25,790 --> 00:08:31,950
takes a name of the attraction and the

00:08:28,980 --> 00:08:34,730
URL which can default to blank and we

00:08:31,950 --> 00:08:34,730
can just say

00:08:39,510 --> 00:08:51,850
rich and attraction okay so that's nice

00:08:47,170 --> 00:08:55,800
and quick how many people been to Mona

00:08:51,850 --> 00:08:58,720
so far a few I went last time I was here

00:08:55,800 --> 00:09:06,310
what else can we have I'm a big fan

00:08:58,720 --> 00:09:08,260
myself of single malt whisky well okay

00:09:06,310 --> 00:09:10,480
so I'll save references to those so i

00:09:08,260 --> 00:09:14,890
can use them later on so let's also make

00:09:10,480 --> 00:09:19,360
a helpful method up function up here for

00:09:14,890 --> 00:09:23,770
ranking stuff this attraction with this

00:09:19,360 --> 00:09:26,190
session ID and a rank that will default

00:09:23,770 --> 00:09:26,190
to know

00:09:30,410 --> 00:09:42,540
making less mistakes and I thought I

00:09:32,580 --> 00:09:50,250
would that's telling me my line is too

00:09:42,540 --> 00:09:55,410
long that'll do okay so first test if I

00:09:50,250 --> 00:10:01,650
go and say rank well like I said I like

00:09:55,410 --> 00:10:05,390
whiskey rang Clark and let's make a fake

00:10:01,650 --> 00:10:11,220
session idea of a for now and

00:10:05,390 --> 00:10:14,760
theoretically move that up for you let's

00:10:11,220 --> 00:10:18,390
save a reference to that later rank

00:10:14,760 --> 00:10:21,560
should be zero is that how the position

00:10:18,390 --> 00:10:26,010
thing works let's try running my test

00:10:21,560 --> 00:10:30,210
okay passing test excellent if I then go

00:10:26,010 --> 00:10:33,060
and say hey thank you oh then go and

00:10:30,210 --> 00:10:38,100
look same session let's go and say okay

00:10:33,060 --> 00:10:40,140
yet the CBD was pretty cool let's rank

00:10:38,100 --> 00:10:42,630
that as well without actually specifying

00:10:40,140 --> 00:10:47,840
a rank it should come in as by default

00:10:42,630 --> 00:10:52,410
as number one underneath yes yes and

00:10:47,840 --> 00:11:00,950
let's do it once more let's say that

00:10:52,410 --> 00:11:00,950
somebody else who also likes that

00:11:05,180 --> 00:11:12,420
now what should that be if it's somebody

00:11:08,339 --> 00:11:15,060
else ranking it it should be 0 for them

00:11:12,420 --> 00:11:18,269
so for person a that a they've got

00:11:15,060 --> 00:11:21,149
Larkin in cvd in person B has CBD now I

00:11:18,269 --> 00:11:24,300
think that's going to fail currently

00:11:21,149 --> 00:11:28,769
yeah comes up as to because my

00:11:24,300 --> 00:11:30,420
collection doesn't know that this should

00:11:28,769 --> 00:11:32,160
be unique per session thankfully this

00:11:30,420 --> 00:11:35,610
has a thing built into it or I can I say

00:11:32,160 --> 00:11:38,660
collection equals session view ID which

00:11:35,610 --> 00:11:42,360
will make it the numbers based on a

00:11:38,660 --> 00:11:46,560
unique for each session are doing good

00:11:42,360 --> 00:11:47,759
that works ok so we've got some models

00:11:46,560 --> 00:11:55,199
are there's the other thing I would do

00:11:47,759 --> 00:11:59,310
as well roots let's test this if I go

00:11:55,199 --> 00:12:01,139
and see as much as possible i'm going to

00:11:59,310 --> 00:12:06,240
try to put each assertion into a

00:12:01,139 --> 00:12:12,839
separate test so if i try to make that

00:12:06,240 --> 00:12:15,480
happen it should fail yes it does

00:12:12,839 --> 00:12:18,089
because their unique constraint we said

00:12:15,480 --> 00:12:21,000
in here that attraction session ID had

00:12:18,089 --> 00:12:23,160
to be unique together so what we can do

00:12:21,000 --> 00:12:28,730
here i actually want that one to fail

00:12:23,160 --> 00:12:36,170
and i want it to fail because self dot

00:12:28,730 --> 00:12:39,350
we now have our doing assert raises

00:12:36,170 --> 00:12:39,350
integrity error

00:12:39,440 --> 00:12:45,590
which is now available in a nice context

00:12:42,200 --> 00:12:52,670
manager where am I getting it from drink

00:12:45,590 --> 00:12:55,460
it up DB import integrity error okay

00:12:52,670 --> 00:12:57,470
cool so that's a nice test tips we've

00:12:55,460 --> 00:12:59,360
confirmed that that works we can then

00:12:57,470 --> 00:13:01,910
move on to views now this is where I've

00:12:59,360 --> 00:13:06,850
decided I'm going to try to cheat a bit

00:13:01,910 --> 00:13:06,850
because it takes too long to type them

00:13:08,710 --> 00:13:19,300
so in my lovely snippets file here we go

00:13:14,500 --> 00:13:32,000
cheat cheat cheat cheat yeah why not

00:13:19,300 --> 00:13:34,580
copy in fact let's cut it okay so what

00:13:32,000 --> 00:13:36,020
I've just quickly saved my time one

00:13:34,580 --> 00:13:40,460
hopefully it will help me to finish in

00:13:36,020 --> 00:13:44,570
time we have a get uuid which creates a

00:13:40,460 --> 00:13:47,600
random ID for each request and stores it

00:13:44,570 --> 00:13:49,220
in the session for the attractions list

00:13:47,600 --> 00:13:51,470
we are going to grab all of the

00:13:49,220 --> 00:13:53,600
attractions and we are going to go

00:13:51,470 --> 00:13:56,330
through and annotate them by throwing in

00:13:53,600 --> 00:13:57,890
the rank for this particular user and

00:13:56,330 --> 00:14:00,920
we're also going to figure out the score

00:13:57,890 --> 00:14:01,880
based on how many people have voted for

00:14:00,920 --> 00:14:04,040
that so we're going to go through the

00:14:01,880 --> 00:14:06,770
ranks for each attraction and we're

00:14:04,040 --> 00:14:10,130
injecting a user rank and also an

00:14:06,770 --> 00:14:11,690
overall rank based on the sorted schools

00:14:10,130 --> 00:14:13,100
and so on the source is going to be up

00:14:11,690 --> 00:14:15,230
on github so you can go and have a play

00:14:13,100 --> 00:14:18,830
and see what it is if I've skipped over

00:14:15,230 --> 00:14:22,430
that too quickly it's going to render to

00:14:18,830 --> 00:14:27,080
list with a list of attractions and we

00:14:22,430 --> 00:14:28,940
also have a promote view where we go and

00:14:27,080 --> 00:14:32,630
get that particular attraction and we

00:14:28,940 --> 00:14:36,110
create or get or created rank for it if

00:14:32,630 --> 00:14:38,450
you voted for before that before then it

00:14:36,110 --> 00:14:41,000
will increase the rank by one otherwise

00:14:38,450 --> 00:14:47,980
it will default to the bottom of the

00:14:41,000 --> 00:14:50,810
list so I think I also saved some URLs

00:14:47,980 --> 00:14:53,770
yep let's grab that as well because you

00:14:50,810 --> 00:14:53,770
don't watch me type them

00:14:55,589 --> 00:15:06,250
okay so pretty standard boilerplate e

00:15:00,040 --> 00:15:12,089
stuff project URLs let's go and pretend

00:15:06,250 --> 00:15:16,300
this is our project so let's include

00:15:12,089 --> 00:15:20,860
must see URLs in here and again back to

00:15:16,300 --> 00:15:25,570
the point of the talk test attraction

00:15:20,860 --> 00:15:26,950
list so when we're testing views some

00:15:25,570 --> 00:15:28,360
people argue you shouldn't test them at

00:15:26,950 --> 00:15:32,800
all i'm just going to show you some tips

00:15:28,360 --> 00:15:35,620
here um how we can so the test client no

00:15:32,800 --> 00:15:38,170
test case has a client built-in where I

00:15:35,620 --> 00:15:41,790
can reverse I think I called it lists I

00:15:38,170 --> 00:15:41,790
better get reverse

00:15:47,279 --> 00:15:54,240
okay and get a response so the naive way

00:15:52,319 --> 00:15:58,290
of testing this will be just simply say

00:15:54,240 --> 00:16:03,980
self dot set equals Eagle response

00:15:58,290 --> 00:16:08,550
typesetters code 200 did it work now I

00:16:03,980 --> 00:16:10,769
had a feeling there we go okay again I

00:16:08,550 --> 00:16:15,240
think I'll save myself some time here by

00:16:10,769 --> 00:16:25,410
copying that one it's my template there

00:16:15,240 --> 00:16:30,269
it is I didn't put all of them so must

00:16:25,410 --> 00:16:32,480
see it's going to create a templates

00:16:30,269 --> 00:16:32,480
directory

00:16:39,810 --> 00:16:50,970
ok so I've got an empty table there at

00:16:43,290 --> 00:16:52,620
the moment ok that passes like I said

00:16:50,970 --> 00:16:55,260
that's a fairly naive way of testing you

00:16:52,620 --> 00:16:56,670
never know just because it's returned

00:16:55,260 --> 00:16:58,320
200 doesn't mean it's actually done

00:16:56,670 --> 00:16:59,760
anything like what you wanted it to do

00:16:58,320 --> 00:17:01,440
maybe it's redirected you to a login

00:16:59,760 --> 00:17:04,290
page or something or other you still get

00:17:01,440 --> 00:17:07,770
a 200 response so a better way to test

00:17:04,290 --> 00:17:11,910
it will be just say a cert template used

00:17:07,770 --> 00:17:19,050
and it's meant for you must see list let

00:17:11,910 --> 00:17:23,730
you know is that true yep or better

00:17:19,050 --> 00:17:29,490
again I'll also useful i guess the cert

00:17:23,730 --> 00:17:35,430
contains i think that was the heading i

00:17:29,490 --> 00:17:38,280
put yeah there's a few things you can do

00:17:35,430 --> 00:17:39,990
to test your views like that we also

00:17:38,280 --> 00:17:44,000
might want to have a look at what was

00:17:39,990 --> 00:17:44,000
actually in the context so we could say

00:17:44,810 --> 00:17:54,360
response context attractions and what

00:17:51,570 --> 00:17:57,150
should they be they're sorted in

00:17:54,360 --> 00:18:00,150
alphabetical order to start with and I

00:17:57,150 --> 00:18:06,929
had CBD Mona and lark if I can remember

00:18:00,150 --> 00:18:13,440
my alphabet CBD L comes before M doesn't

00:18:06,929 --> 00:18:21,140
it okay now that's going to fail at the

00:18:13,440 --> 00:18:23,840
moment anyone see why no it's not I

00:18:21,140 --> 00:18:28,620
thought I had to cast that to a list

00:18:23,840 --> 00:18:34,110
maybe I don't oh I'm happy with that the

00:18:28,620 --> 00:18:36,330
other thing that is helpful is this

00:18:34,110 --> 00:18:39,780
little method called a suit queries are

00:18:36,330 --> 00:18:41,670
equal which is designed for taking a

00:18:39,780 --> 00:18:46,170
query set and also a transformation

00:18:41,670 --> 00:18:50,460
function like for example let's return

00:18:46,170 --> 00:18:52,840
the attractions use a rank so to start

00:18:50,460 --> 00:18:56,490
with the three of those should be none

00:18:52,840 --> 00:19:04,809
none none because nobody has ranked them

00:18:56,490 --> 00:19:07,840
yeah who can run that again on the

00:19:04,809 --> 00:19:10,720
overall rank and they'll all be equal

00:19:07,840 --> 00:19:17,400
first to start with because we haven't

00:19:10,720 --> 00:19:20,470
changed anything yeah that works as well

00:19:17,400 --> 00:19:23,590
so we can then test the promotion of

00:19:20,470 --> 00:19:25,480
things to actually say again ideally you

00:19:23,590 --> 00:19:27,870
wouldn't be doing all of this in one big

00:19:25,480 --> 00:19:34,620
test but this is just to demonstrate

00:19:27,870 --> 00:19:40,929
self-taught client get reverse promote

00:19:34,620 --> 00:19:45,480
fogs equals again let's put lock at the

00:19:40,929 --> 00:19:45,480
top why not BK

00:19:51,690 --> 00:20:01,529
now a couple of things we can do here ok

00:19:55,309 --> 00:20:05,509
response ok we want to make sure that

00:20:01,529 --> 00:20:07,860
works so we can say self dot assert

00:20:05,509 --> 00:20:11,850
redirect is another useful one you can

00:20:07,860 --> 00:20:18,539
use response we want that to redirect to

00:20:11,850 --> 00:20:20,190
the list does it yes it does and we

00:20:18,539 --> 00:20:22,470
could also then make sure it actually

00:20:20,190 --> 00:20:32,700
works so quick way would be to go and

00:20:22,470 --> 00:20:34,830
grab all of that again and now I put

00:20:32,700 --> 00:20:37,309
lark to the top so lunch at all this

00:20:34,830 --> 00:20:39,929
first of all I like to make tests fail

00:20:37,309 --> 00:20:42,059
yeah that's cool just reassures you have

00:20:39,929 --> 00:20:46,100
everything passes it's too good to be

00:20:42,059 --> 00:20:48,590
true the other thing you can do here is

00:20:46,100 --> 00:20:51,389
I've just gone and gotten a response

00:20:48,590 --> 00:20:56,059
which has redirected so I've actually

00:20:51,389 --> 00:20:59,039
got no context in it so I need to use

00:20:56,059 --> 00:21:01,259
little handy argument here follow equals

00:20:59,039 --> 00:21:05,090
true so that it will follow the redirect

00:21:01,259 --> 00:21:09,029
and actually grab the context from that

00:21:05,090 --> 00:21:10,710
ok and we can see yes because I have an

00:21:09,029 --> 00:21:13,500
update of the order here so large would

00:21:10,710 --> 00:21:18,059
move itself to the top CBD should move

00:21:13,500 --> 00:21:21,059
itself down this should actually now be

00:21:18,059 --> 00:21:23,159
zero not none and this should actually

00:21:21,059 --> 00:21:26,370
be zero and those two will be equal

00:21:23,159 --> 00:21:31,769
second if I'm thinking through that

00:21:26,370 --> 00:21:34,830
correctly yeah cool ok so that works a

00:21:31,769 --> 00:21:40,889
few other tips as well so that's that's

00:21:34,830 --> 00:21:43,110
fine to get this ready to actually

00:21:40,889 --> 00:21:49,860
deploy which I'm running out of time to

00:21:43,110 --> 00:21:51,480
do we need to install south I'm fairly

00:21:49,860 --> 00:21:52,889
happy with the models now again I've

00:21:51,480 --> 00:21:54,269
been able to test them all out muck

00:21:52,889 --> 00:21:57,389
around with them before I've actually

00:21:54,269 --> 00:22:02,970
gone and created a migration but I can

00:21:57,389 --> 00:22:04,409
scheme a migration must see initial now

00:22:02,970 --> 00:22:05,530
like I said I'm not actually going to

00:22:04,409 --> 00:22:10,180
bother migrating that low

00:22:05,530 --> 00:22:17,140
Lee I'm going to do it on Heroku let's

00:22:10,180 --> 00:22:18,660
go to my snippets again so use a couple

00:22:17,140 --> 00:22:26,320
of useful things I'm going to put in my

00:22:18,660 --> 00:22:28,870
settings which I'll talk you through so

00:22:26,320 --> 00:22:33,940
first thing I did there was set up some

00:22:28,870 --> 00:22:35,980
extra logging in this extra class here

00:22:33,940 --> 00:22:39,010
which I haven't actually used I've got

00:22:35,980 --> 00:22:41,410
the test set up with a logger so that

00:22:39,010 --> 00:22:44,020
the test logging is handled separately

00:22:41,410 --> 00:22:48,120
there's also some handy stuff here oh

00:22:44,020 --> 00:22:48,120
that's one of the tests i forgot as well

00:22:48,390 --> 00:22:53,230
i'll go back if i get time let's get it

00:22:50,830 --> 00:22:54,490
deployed but there's more more tip so

00:22:53,230 --> 00:22:55,780
they'll be heaps more stuff on github

00:22:54,490 --> 00:22:57,970
you can have a look at later there's too

00:22:55,780 --> 00:23:00,940
much to fit into the time there's also a

00:22:57,970 --> 00:23:03,310
demo client here and a demo test case

00:23:00,940 --> 00:23:05,320
with extra stuff so that assert contains

00:23:03,310 --> 00:23:08,200
for example if it fails will actually

00:23:05,320 --> 00:23:10,690
print out what it contained instead this

00:23:08,200 --> 00:23:12,940
stick shortcuts for creating users and

00:23:10,690 --> 00:23:14,860
logging in and testing URLs and testing

00:23:12,940 --> 00:23:16,180
admin so all of it every little tool you

00:23:14,860 --> 00:23:19,510
can get in your tool belt to make this

00:23:16,180 --> 00:23:25,270
stuff quicker and easier is well worth

00:23:19,510 --> 00:23:27,280
while okay so we've got Kenneth's DJ

00:23:25,270 --> 00:23:29,320
database URL thing here which is

00:23:27,280 --> 00:23:31,920
ordering my requirements it can be

00:23:29,320 --> 00:23:34,090
helpful to have a little tests to

00:23:31,920 --> 00:23:36,910
testing setting to Detective your own

00:23:34,090 --> 00:23:38,500
testing mode to do things conditionally

00:23:36,910 --> 00:23:43,750
in your settings I'll talk more about

00:23:38,500 --> 00:23:45,760
settings later we must be getting close

00:23:43,750 --> 00:23:46,990
to being able to deploy here what else

00:23:45,760 --> 00:23:50,530
have I got in my snippets that I've

00:23:46,990 --> 00:23:53,680
forgotten to handle the template in

00:23:50,530 --> 00:23:54,940
there admin yeah okay so in order for

00:23:53,680 --> 00:23:56,830
you to actually use it I'm going to need

00:23:54,940 --> 00:24:05,190
to put some attractions in so we'll need

00:23:56,830 --> 00:24:05,190
admin with that admin class go

00:24:06,889 --> 00:24:16,590
cut must see Edmund up I throw that in

00:24:15,360 --> 00:24:22,039
there now the admin is not going to work

00:24:16,590 --> 00:24:22,039
that's again failing tests are awesome

00:24:22,549 --> 00:24:29,220
I've got a little method called self

00:24:25,529 --> 00:24:32,190
test admin where I can throw in a list

00:24:29,220 --> 00:24:33,809
of models so quickly and dirty glee test

00:24:32,190 --> 00:24:36,149
whether or not these things are going to

00:24:33,809 --> 00:24:41,960
fail that's going to fail first of all

00:24:36,149 --> 00:24:41,960
because whoops I didn't mean to do that

00:24:45,619 --> 00:24:57,179
running out of time rapidly just

00:24:54,299 --> 00:25:01,919
forgotten what I'm doing running the

00:24:57,179 --> 00:25:08,970
test now get so test fails because I'm

00:25:01,919 --> 00:25:13,320
not using my special class demo test

00:25:08,970 --> 00:25:15,570
case so I can inherit the cool stuff

00:25:13,320 --> 00:25:18,659
from there I pretty much every project I

00:25:15,570 --> 00:25:20,609
have I have some sort of customized test

00:25:18,659 --> 00:25:29,639
case add me as no registered name space

00:25:20,609 --> 00:25:34,649
because admin is not installed apps it's

00:25:29,639 --> 00:25:37,369
also not in the URLs it also needs to

00:25:34,649 --> 00:25:37,369
autodiscover

00:25:39,630 --> 00:25:43,590
okay it doesn't work because it wants

00:25:41,640 --> 00:25:48,110
you to login again this is why you test

00:25:43,590 --> 00:25:50,970
the template and not the return code

00:25:48,110 --> 00:25:53,400
again my shortcut classes here will make

00:25:50,970 --> 00:25:56,160
this nice and easy for me to just go and

00:25:53,400 --> 00:25:57,780
say self dot create user with username

00:25:56,160 --> 00:26:01,080
super and let's actually make them a

00:25:57,780 --> 00:26:05,850
super user this is a shortcut login with

00:26:01,080 --> 00:26:08,160
that user and that works i know the

00:26:05,850 --> 00:26:11,730
admin is working now as well there's

00:26:08,160 --> 00:26:12,840
also some neat stuff here which i

00:26:11,730 --> 00:26:16,110
probably won't actually bother putting

00:26:12,840 --> 00:26:18,830
in right now but some for testing URLs

00:26:16,110 --> 00:26:21,180
very quickly i can see that if i reverse

00:26:18,830 --> 00:26:22,800
go to these ones they get certain status

00:26:21,180 --> 00:26:26,850
codes or whatever you can check that in

00:26:22,800 --> 00:26:32,640
ad in the source later on okay I think

00:26:26,850 --> 00:26:42,780
we're pretty close let's try adding

00:26:32,640 --> 00:26:48,690
everything commit it all let's try a

00:26:42,780 --> 00:26:54,350
roku create I wonder how much I've

00:26:48,690 --> 00:26:57,350
forgotten let's try get push heroku

00:26:54,350 --> 00:26:57,350
master

00:27:02,559 --> 00:27:08,919
okay that's should working it should

00:27:04,779 --> 00:27:14,559
take a little while to deploy okay cool

00:27:08,919 --> 00:27:17,259
so I'll do that summing up again this is

00:27:14,559 --> 00:27:18,610
all on github you can check it out first

00:27:17,259 --> 00:27:20,860
thing I would recommend is actually

00:27:18,610 --> 00:27:22,419
reading the Django testing manual the

00:27:20,860 --> 00:27:23,769
documentation is excellent there's all

00:27:22,419 --> 00:27:26,110
sorts of stuff there that you probably

00:27:23,769 --> 00:27:28,149
haven't used I found some neat stuff

00:27:26,110 --> 00:27:30,639
here tues a very good talks from Pike on

00:27:28,149 --> 00:27:33,220
us you can check out unit tests to

00:27:30,639 --> 00:27:36,999
discovery how we doing over here still

00:27:33,220 --> 00:27:39,820
going again read the links I don't have

00:27:36,999 --> 00:27:41,710
time to take go through all of them live

00:27:39,820 --> 00:27:43,629
serve a test case is very cool for doing

00:27:41,710 --> 00:27:46,990
selenium JavaScript testing and so on

00:27:43,629 --> 00:27:49,149
actually checking out Django's sauce is

00:27:46,990 --> 00:27:51,279
also a good idea actually explore the

00:27:49,149 --> 00:27:53,649
client and test case customize them in

00:27:51,279 --> 00:27:55,110
your projects make build shortcuts in so

00:27:53,649 --> 00:27:57,070
that you can do things much more quickly

00:27:55,110 --> 00:27:59,080
keep up to date with all the new things

00:27:57,070 --> 00:28:00,909
that are coming out in jan get one point

00:27:59,080 --> 00:28:05,110
for we've got some very handy methods

00:28:00,909 --> 00:28:07,330
which do cool stuff the stuff that's

00:28:05,110 --> 00:28:09,759
inherited from unit test is very helpful

00:28:07,330 --> 00:28:11,860
the stuff you can use for overriding

00:28:09,759 --> 00:28:13,600
settings within your tests is very

00:28:11,860 --> 00:28:15,309
helpful again no time to go through all

00:28:13,600 --> 00:28:17,320
this but it's all up there for you to

00:28:15,309 --> 00:28:20,379
check out coverage is cool if I get a

00:28:17,320 --> 00:28:23,350
second I'll do coverage as well we're

00:28:20,379 --> 00:28:30,940
going almost see how long we got 60

00:28:23,350 --> 00:28:36,340
second okay cool let's say Heroku run

00:28:30,940 --> 00:28:42,159
bash so far so good to be a miracle if

00:28:36,340 --> 00:28:50,909
this works okay let's say Python managed

00:28:42,159 --> 00:28:50,909
up pi sync DB yes please

00:28:52,880 --> 00:29:12,110
let's make up a fake password and

00:28:58,970 --> 00:29:16,710
migrate and open okay we are online

00:29:12,110 --> 00:29:21,360
admin if I can remember the password I

00:29:16,710 --> 00:29:23,940
just made up come on good let's go an

00:29:21,360 --> 00:29:25,409
added attraction so this all i knew the

00:29:23,940 --> 00:29:28,820
admin worked because my tests had

00:29:25,409 --> 00:29:28,820
already proven that the admin worked

00:29:29,690 --> 00:29:33,980
let's make a bunch of attractions

00:29:43,110 --> 00:29:55,080
oh yes I prepared that earlier ok I'll

00:29:52,890 --> 00:30:01,160
add some more there later and let's just

00:29:55,080 --> 00:30:01,160
see if anyone's beat me to a porno oh

00:30:01,760 --> 00:30:12,900
you know what I didn't do I did not fill

00:30:07,740 --> 00:30:14,790
out my template here so theoretically

00:30:12,900 --> 00:30:16,740
you would have the attraction with its

00:30:14,790 --> 00:30:17,940
URL in there I'll do this in a second

00:30:16,740 --> 00:30:20,190
anyway I think I'm probably at a time

00:30:17,940 --> 00:30:22,559
but you get the idea when you put those

00:30:20,190 --> 00:30:24,030
in I'll do that I won't waste your time

00:30:22,559 --> 00:30:25,200
with a now but it'll be ready in five

00:30:24,030 --> 00:30:29,100
minutes and you can have a play and you

00:30:25,200 --> 00:30:31,070
can all muck around with it is that me

00:30:29,100 --> 00:30:34,070
out of time yeah I won't from your shop

00:30:31,070 --> 00:30:34,070
thanks

00:30:37,990 --> 00:30:44,470
I was hair-raising stuff they were

00:30:40,990 --> 00:30:46,840
against the clock and got time for a

00:30:44,470 --> 00:30:49,630
couple of questions make her way to the

00:30:46,840 --> 00:30:51,850
center aisle and I shall run to you but

00:30:49,630 --> 00:31:00,790
I think you pretty much covered

00:30:51,850 --> 00:31:03,070
everything here we go so you mentioned

00:31:00,790 --> 00:31:05,110
that testing views some people say you

00:31:03,070 --> 00:31:06,280
shouldn't do it yeah why should you and

00:31:05,110 --> 00:31:09,130
why shouldn't you what are the arguments

00:31:06,280 --> 00:31:10,780
for and against that well ideally you've

00:31:09,130 --> 00:31:12,429
got everything tested mean you shouldn't

00:31:10,780 --> 00:31:14,800
have to be doing too much stuff in your

00:31:12,429 --> 00:31:16,690
views anyway so you should be unit

00:31:14,800 --> 00:31:19,090
testing your models and so on and

00:31:16,690 --> 00:31:20,620
functionality elsewhere sometimes you

00:31:19,090 --> 00:31:22,600
can put too much stuff in the views but

00:31:20,620 --> 00:31:24,610
yet certainly with them functional

00:31:22,600 --> 00:31:26,920
testing and with selenium and stuff is a

00:31:24,610 --> 00:31:28,059
good case for going running through your

00:31:26,920 --> 00:31:30,340
views and making sure everything

00:31:28,059 --> 00:31:32,770
actually works from the users

00:31:30,340 --> 00:31:35,590
perspective but yeah I think it's good

00:31:32,770 --> 00:31:37,840
also with the covering your URLs at

00:31:35,590 --> 00:31:39,520
least hit hit of the views at least make

00:31:37,840 --> 00:31:41,980
sure that they're not getting 500 errors

00:31:39,520 --> 00:31:50,910
it's a very easy way to save yourself

00:31:41,980 --> 00:31:56,140
some embarrassment very impressive topic

00:31:50,910 --> 00:31:58,000
brave man um one issue is performance

00:31:56,140 --> 00:31:59,790
regression testing does Django have

00:31:58,000 --> 00:32:04,690
anything built in to support that

00:31:59,790 --> 00:32:07,240
regression testing verbalizing ah that's

00:32:04,690 --> 00:32:09,460
what I didn't do that either you know or

00:32:07,240 --> 00:32:12,040
not necessarily built at the jungle

00:32:09,460 --> 00:32:14,860
better you have any suggestions for and

00:32:12,040 --> 00:32:16,390
we're testing performance stuff what I

00:32:14,860 --> 00:32:19,510
meant to put in as well was testing

00:32:16,390 --> 00:32:21,970
those in a certain um queries where I

00:32:19,510 --> 00:32:24,010
can in fact I was going to put in a

00:32:21,970 --> 00:32:25,000
prefetch as well again I'll do that in

00:32:24,010 --> 00:32:26,260
committee and you'll be able to see the

00:32:25,000 --> 00:32:29,140
differences that are put in but yeah

00:32:26,260 --> 00:32:30,970
there's a bunch of stuff testing queries

00:32:29,140 --> 00:32:33,490
and so on as well I don't think there's

00:32:30,970 --> 00:32:38,020
anything in terms of actually run taught

00:32:33,490 --> 00:32:39,400
execution time and things like that I go

00:32:38,020 --> 00:32:43,929
but you say you can count the number of

00:32:39,400 --> 00:32:46,030
queries or wat yeppers yeah in fact what

00:32:43,929 --> 00:32:49,900
I was going to do in here he takes two

00:32:46,030 --> 00:32:51,340
seconds is where we have that list I was

00:32:49,900 --> 00:32:55,150
going to say we've

00:32:51,340 --> 00:33:00,220
after a certain um queries quick

00:32:55,150 --> 00:33:02,140
question for the audience is how many

00:33:00,220 --> 00:33:03,910
queries should that take we have one

00:33:02,140 --> 00:33:07,150
query to get the attractions and then

00:33:03,910 --> 00:33:11,730
one query / rank / attraction to get all

00:33:07,150 --> 00:33:11,730
the ranks out so that's going to be for

00:33:15,210 --> 00:33:22,890
correct but what can be better is if I

00:33:18,520 --> 00:33:26,800
then go and actually say prefetch

00:33:22,890 --> 00:33:28,630
related which is new in 1.4 which will

00:33:26,800 --> 00:33:30,960
get one query via attractions one query

00:33:28,630 --> 00:33:33,850
for the ranks and that should now fail

00:33:30,960 --> 00:33:35,650
because it took only two instead of four

00:33:33,850 --> 00:33:37,300
so that's some of the sort of

00:33:35,650 --> 00:33:39,010
performance testing stuff you can do

00:33:37,300 --> 00:33:42,400
which is pretty neat sure whether that's

00:33:39,010 --> 00:33:47,440
a proxy for the users performance yeah

00:33:42,400 --> 00:33:52,360
okay not very nice okay thank and give

00:33:47,440 --> 00:33:54,190
any other questions yep I so it used the

00:33:52,360 --> 00:33:55,830
testing client there what are your

00:33:54,190 --> 00:33:59,110
thoughts on the testing client the whole

00:33:55,830 --> 00:34:01,060
starting up the whole stack as opposed

00:33:59,110 --> 00:34:03,370
to using the request factory thing which

00:34:01,060 --> 00:34:05,830
just allows you to test the view as

00:34:03,370 --> 00:34:07,870
that's right yeah i mean like i said

00:34:05,830 --> 00:34:09,220
this was just for demonstration purposes

00:34:07,870 --> 00:34:10,720
there's a lot of stuff i did that was

00:34:09,220 --> 00:34:12,160
not right and that you wouldn't do in

00:34:10,720 --> 00:34:15,400
practice you'd want to try to isolate

00:34:12,160 --> 00:34:17,170
stuff a lot more when make it more unit

00:34:15,400 --> 00:34:19,060
tested you know separate as much as you

00:34:17,170 --> 00:34:21,250
can and also the speed there's not

00:34:19,060 --> 00:34:22,930
practical to run a test like this it's

00:34:21,250 --> 00:34:24,190
going to have a huge amount of data base

00:34:22,930 --> 00:34:25,810
overhead especially when you're running

00:34:24,190 --> 00:34:26,860
in as okay in sequel live if you

00:34:25,810 --> 00:34:29,590
actually going to test against your

00:34:26,860 --> 00:34:31,420
database which you should this would run

00:34:29,590 --> 00:34:36,430
appallingly badly and which is where I

00:34:31,420 --> 00:34:39,520
would recommend you check out those two

00:34:36,430 --> 00:34:41,620
Pike on us talks are actually very good

00:34:39,520 --> 00:34:44,200
and covering that sort of stuff have a

00:34:41,620 --> 00:34:46,050
look there for more alright that's all

00:34:44,200 --> 00:34:49,360
the time we've got for questions but

00:34:46,050 --> 00:34:52,090
thanks very much Simon and let's all

00:34:49,360 --> 00:34:54,150
give a round of applause

00:34:52,090 --> 00:34:54,150

YouTube URL: https://www.youtube.com/watch?v=ScjhonARTvU


