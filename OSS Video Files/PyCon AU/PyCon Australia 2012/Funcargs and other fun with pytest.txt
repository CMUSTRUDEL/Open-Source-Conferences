Title: Funcargs and other fun with pytest
Publication date: 2012-08-23
Playlist: PyCon Australia 2012
Description: 
	Brianna Laugher
Pytest is a mature and comprehensive testing suite for Python projects, but it can be a little intimidating for newcomers. Where do these mysterious funcargs come from, how do parametrised tests work, and where are my xUnit-style setU
Captions: 
	00:00:00,979 --> 00:00:06,839
thank you everyone I realize I'm up

00:00:03,780 --> 00:00:09,660
against two very competitive choices in

00:00:06,839 --> 00:00:12,120
Graham dumpling and Graham cross so I

00:00:09,660 --> 00:00:15,179
appreciate your choice to be here today

00:00:12,120 --> 00:00:16,440
and I hope I don't disappoint so just to

00:00:15,179 --> 00:00:19,350
get a show of hands who has some

00:00:16,440 --> 00:00:21,390
experience writing tests running tests

00:00:19,350 --> 00:00:23,730
working with test Suites not part us

00:00:21,390 --> 00:00:25,590
just any kind of test suite most people

00:00:23,730 --> 00:00:30,660
great and who has experienced with pie

00:00:25,590 --> 00:00:32,340
tests specifically excellent so most of

00:00:30,660 --> 00:00:36,059
you haven't used pie test so that's

00:00:32,340 --> 00:00:37,500
perfect and so my aim with this talk is

00:00:36,059 --> 00:00:39,920
to give you a bit of a whirlwind

00:00:37,500 --> 00:00:43,050
overview with lots of examples of

00:00:39,920 --> 00:00:48,239
high-test in use at my workplace and

00:00:43,050 --> 00:00:50,280
also in open source projects and to not

00:00:48,239 --> 00:00:51,690
really have everybody understand every

00:00:50,280 --> 00:00:53,699
single line of code that I show because

00:00:51,690 --> 00:00:55,559
i'm going to show a lot of code it's up

00:00:53,699 --> 00:00:57,510
on github and i'll have the link at the

00:00:55,559 --> 00:01:00,270
end so don't try and scribble down

00:00:57,510 --> 00:01:02,129
anything you see right now but the aim

00:01:00,270 --> 00:01:03,719
is to make you aware of what's possible

00:01:02,129 --> 00:01:05,460
and give you a little bit of an idea of

00:01:03,719 --> 00:01:06,780
how to go about it so that you can think

00:01:05,460 --> 00:01:08,939
about how is that applicable to your

00:01:06,780 --> 00:01:11,210
projects and then you can go and look at

00:01:08,939 --> 00:01:13,530
the source code in more detail later and

00:01:11,210 --> 00:01:19,259
figure out how to do it for yourself and

00:01:13,530 --> 00:01:21,960
so pi test describes itself as no

00:01:19,259 --> 00:01:23,369
boilerplate testing and that's the thing

00:01:21,960 --> 00:01:26,250
that I really like about it your test

00:01:23,369 --> 00:01:27,509
can be really succinct you just write

00:01:26,250 --> 00:01:30,119
the things in your test that you care

00:01:27,509 --> 00:01:32,189
about you're not doing a lot of all your

00:01:30,119 --> 00:01:34,860
setup and teardown is kind of neatly

00:01:32,189 --> 00:01:36,360
hidden away and you don't have to write

00:01:34,860 --> 00:01:38,850
classes if you don't wanna write classes

00:01:36,360 --> 00:01:41,909
you can just write a functions to have

00:01:38,850 --> 00:01:44,189
your tests so you can if you have an

00:01:41,909 --> 00:01:46,350
existing library that has a test suite

00:01:44,189 --> 00:01:49,799
that has doc tests or unit tests you can

00:01:46,350 --> 00:01:51,600
run those under pi test and you can also

00:01:49,799 --> 00:01:53,880
write them in what's called the nose

00:01:51,600 --> 00:01:56,610
style nose actually was a fork of pi

00:01:53,880 --> 00:01:57,990
test at version point 8 so I think

00:01:56,610 --> 00:02:02,399
everything you can do knows you can do

00:01:57,990 --> 00:02:04,020
in PI test and because you can do you

00:02:02,399 --> 00:02:06,299
can do what's called kind of natural

00:02:04,020 --> 00:02:08,729
asserts so you can just do assert X's

00:02:06,299 --> 00:02:12,150
whatever rather than a certain equal X

00:02:08,729 --> 00:02:13,050
other thing so that's quite nice and so

00:02:12,150 --> 00:02:13,920
if there was a whole lot of things

00:02:13,050 --> 00:02:15,620
listed there that

00:02:13,920 --> 00:02:18,000
didn't really make any sense to you

00:02:15,620 --> 00:02:19,680
that's kind of good because then you

00:02:18,000 --> 00:02:22,830
won't be bored with what's actually in

00:02:19,680 --> 00:02:24,870
this talk so we've been using pi test

00:02:22,830 --> 00:02:27,090
for about 18 months at work and I've

00:02:24,870 --> 00:02:29,790
really enjoyed it I found it really

00:02:27,090 --> 00:02:31,620
natural to work with and it makes me

00:02:29,790 --> 00:02:33,360
feel like I'm an awesome developer

00:02:31,620 --> 00:02:35,060
because it's just really easy and

00:02:33,360 --> 00:02:37,560
encouraging to write tests in that style

00:02:35,060 --> 00:02:39,569
so the project I work on is called the

00:02:37,560 --> 00:02:41,780
graphical forecast editor it's a

00:02:39,569 --> 00:02:43,769
client-server application that's used by

00:02:41,780 --> 00:02:46,920
forecasters on their desktop to produce

00:02:43,769 --> 00:02:49,260
the forecasts this is the old GUI which

00:02:46,920 --> 00:02:54,450
was in TK so it looks especially early

00:02:49,260 --> 00:02:57,090
90s but there's heaps of this is just

00:02:54,450 --> 00:03:00,900
like greeted data basically greeted

00:02:57,090 --> 00:03:02,310
statistics and people that forecasters

00:03:00,900 --> 00:03:04,230
can use that to automate it

00:03:02,310 --> 00:03:06,959
automatically generate the text that

00:03:04,230 --> 00:03:09,080
produces forecasts like this that get

00:03:06,959 --> 00:03:13,290
assembled on the web and look nice and

00:03:09,080 --> 00:03:14,940
so it started out in the US so we

00:03:13,290 --> 00:03:18,000
inherited a bunch of code from the US

00:03:14,940 --> 00:03:20,430
there was a pilot project to try it out

00:03:18,000 --> 00:03:24,269
in the Victorian office and then there

00:03:20,430 --> 00:03:25,829
was funding to it at to all the states

00:03:24,269 --> 00:03:28,200
around Australia and so that's where I

00:03:25,829 --> 00:03:30,690
and the people that I work with came on

00:03:28,200 --> 00:03:32,579
board so they needed to really ramp up

00:03:30,690 --> 00:03:35,010
the project they hired a bunch of us to

00:03:32,579 --> 00:03:36,420
write new features and while we were

00:03:35,010 --> 00:03:39,150
doing that we discovered that we needed

00:03:36,420 --> 00:03:40,709
to rewrite a lot of the old features so

00:03:39,150 --> 00:03:42,810
that they were nicer to work with a

00:03:40,709 --> 00:03:45,180
nicer to test and so that's what we've

00:03:42,810 --> 00:03:48,180
been doing and so it did actually come

00:03:45,180 --> 00:03:50,310
with some tests and I'll talk about that

00:03:48,180 --> 00:03:53,459
at the end about how we've evolved them

00:03:50,310 --> 00:03:54,780
into more sensible tests and I also

00:03:53,459 --> 00:03:58,019
wanted to say if you want to ask

00:03:54,780 --> 00:04:00,420
questions as we go through please do

00:03:58,019 --> 00:04:02,100
although as I said I don't expect

00:04:00,420 --> 00:04:03,420
everyone to understand every line but if

00:04:02,100 --> 00:04:04,890
I seem to have left out something very

00:04:03,420 --> 00:04:07,700
obvious just put up your hand and I'll

00:04:04,890 --> 00:04:11,760
try and address that as we go through

00:04:07,700 --> 00:04:15,000
now on to my test so one of the things

00:04:11,760 --> 00:04:17,970
that we mentioned was informative error

00:04:15,000 --> 00:04:20,789
reporting so can the people at the back

00:04:17,970 --> 00:04:22,530
read this ok or is this too small if

00:04:20,789 --> 00:04:24,060
this is true small you will probably

00:04:22,530 --> 00:04:26,430
want to come and sit at the front now

00:04:24,060 --> 00:04:27,480
because I have a lot of text that is not

00:04:26,430 --> 00:04:30,330
a lot bigger than this

00:04:27,480 --> 00:04:33,540
everyone's choosing no that's good come

00:04:30,330 --> 00:04:36,000
forward be happy be able to read so the

00:04:33,540 --> 00:04:38,520
native style of trace back you can get

00:04:36,000 --> 00:04:41,790
that if you want but it will rewrite

00:04:38,520 --> 00:04:44,880
your failing assertions to be a little

00:04:41,790 --> 00:04:46,800
bit nicer there's a kind of trace trace

00:04:44,880 --> 00:04:49,320
back sort option which I find very

00:04:46,800 --> 00:04:50,910
succinct and very nice and there is a

00:04:49,320 --> 00:04:53,460
longer option which gives you more

00:04:50,910 --> 00:04:55,080
context of the test so that when they

00:04:53,460 --> 00:04:56,340
fail you don't need to rerun them to

00:04:55,080 --> 00:04:57,780
figure out exactly what was wrong you

00:04:56,340 --> 00:05:01,110
have a lot of information right there to

00:04:57,780 --> 00:05:02,880
figure out what happened so it's very

00:05:01,110 --> 00:05:05,850
extensible that comes with a lot of

00:05:02,880 --> 00:05:08,790
plugins plugins and it also is easy to

00:05:05,850 --> 00:05:11,700
add plugins and so this is an example

00:05:08,790 --> 00:05:16,500
that was actually cribbed from knows I

00:05:11,700 --> 00:05:19,860
think and we're in unit test style tests

00:05:16,500 --> 00:05:21,600
you have things like a cert equal X Y

00:05:19,860 --> 00:05:23,220
but there's also things like a cert

00:05:21,600 --> 00:05:25,440
almost equal which is actually quite

00:05:23,220 --> 00:05:28,650
useful if you're testing things relating

00:05:25,440 --> 00:05:30,960
to floats and so this is something you

00:05:28,650 --> 00:05:34,800
can do to add like a cert almost equal

00:05:30,960 --> 00:05:36,570
back into the tightest namespace so at

00:05:34,800 --> 00:05:38,970
the bottom the last two lines are an

00:05:36,570 --> 00:05:41,610
actual test where we're doing part s

00:05:38,970 --> 00:05:44,160
start the third almost equal and we can

00:05:41,610 --> 00:05:48,000
specify how exactly how equal they

00:05:44,160 --> 00:05:49,440
should be so it's extensible in the

00:05:48,000 --> 00:05:51,420
sense that you can make things are

00:05:49,440 --> 00:05:54,240
available in your tests and then you can

00:05:51,420 --> 00:05:56,250
also add options so that when you run pi

00:05:54,240 --> 00:05:59,730
test from the command line it can behave

00:05:56,250 --> 00:06:02,550
in particular ways so this is something

00:05:59,730 --> 00:06:06,930
else we did to add a dash dash win PDB

00:06:02,550 --> 00:06:10,470
option so typically you run tightest and

00:06:06,930 --> 00:06:13,050
you can use minus K to select with a

00:06:10,470 --> 00:06:14,190
keyword to select a subset of tests so

00:06:13,050 --> 00:06:16,890
you can put just the name of one

00:06:14,190 --> 00:06:18,660
specific test if you just want to run

00:06:16,890 --> 00:06:21,990
that test and then you can add like dash

00:06:18,660 --> 00:06:25,170
dash wimpy DB to launch the debugger

00:06:21,990 --> 00:06:26,550
which is super super useful if you

00:06:25,170 --> 00:06:30,780
really can't figure out why your test is

00:06:26,550 --> 00:06:35,670
failing or what's going on it has very

00:06:30,780 --> 00:06:38,700
flexible options for marking your tests

00:06:35,670 --> 00:06:40,890
in different ways and the first two that

00:06:38,700 --> 00:06:41,160
are built in that are very obvious that

00:06:40,890 --> 00:06:43,680
you're going

00:06:41,160 --> 00:06:46,470
need a skipper next fail so you can say

00:06:43,680 --> 00:06:49,170
if some conditions are present you know

00:06:46,470 --> 00:06:52,110
this test is not relevant so just skip

00:06:49,170 --> 00:06:54,210
it don't run it and you use typically

00:06:52,110 --> 00:06:57,420
use decorators to do that but you can

00:06:54,210 --> 00:06:59,250
also in the last example we've got this

00:06:57,420 --> 00:07:02,130
pie top test skips kind of programmatic

00:06:59,250 --> 00:07:03,540
skip so if you need to have started some

00:07:02,130 --> 00:07:05,130
of your tests up to figure out that

00:07:03,540 --> 00:07:07,110
actually you can't run you can do that

00:07:05,130 --> 00:07:11,370
as well gives you a bit more power than

00:07:07,110 --> 00:07:14,550
just using the decorator you can set

00:07:11,370 --> 00:07:16,920
test to be expected to fail which is

00:07:14,550 --> 00:07:18,290
what X file means and this is super

00:07:16,920 --> 00:07:20,910
useful for when you're writing

00:07:18,290 --> 00:07:23,100
regression tests or demonstration tests

00:07:20,910 --> 00:07:24,240
for bugs so before you've written the

00:07:23,100 --> 00:07:27,420
fix if you're going to do test-driven

00:07:24,240 --> 00:07:30,870
development first you write the test

00:07:27,420 --> 00:07:32,190
that demonstrates the bug so you know

00:07:30,870 --> 00:07:33,990
you fill out a form and you should get

00:07:32,190 --> 00:07:37,350
an OK response but actually you get a

00:07:33,990 --> 00:07:39,420
404 or something and so you write the

00:07:37,350 --> 00:07:40,950
tests that show that and in the test you

00:07:39,420 --> 00:07:43,470
right i should get an ok response

00:07:40,950 --> 00:07:46,560
product and you set it to x fail because

00:07:43,470 --> 00:07:48,480
it's getting 404 instead of writing the

00:07:46,560 --> 00:07:50,750
test that you expect to get 40 for which

00:07:48,480 --> 00:07:55,440
you generally don't expect to get and

00:07:50,750 --> 00:07:57,750
when you run your tests if they fail if

00:07:55,440 --> 00:07:59,460
ax if they fail and you put them as X

00:07:57,750 --> 00:08:02,040
fail they're marked as X fail and that's

00:07:59,460 --> 00:08:04,350
an okay status if you mark them as X

00:08:02,040 --> 00:08:07,140
file and they pass that's called X pass

00:08:04,350 --> 00:08:08,640
which is unexpected pass and so in the

00:08:07,140 --> 00:08:11,460
context of that it's actually like a

00:08:08,640 --> 00:08:15,510
test failure which is a little bit

00:08:11,460 --> 00:08:17,790
confusing there's also an option to run

00:08:15,510 --> 00:08:20,160
part s with dash dash run X fail and

00:08:17,790 --> 00:08:22,440
what that means is run x fail tests as

00:08:20,160 --> 00:08:23,760
if they were not marked X fail because

00:08:22,440 --> 00:08:25,380
your ex fails tests are running all the

00:08:23,760 --> 00:08:27,750
time like they have to run to check that

00:08:25,380 --> 00:08:29,780
they did actually fail and so if you do

00:08:27,750 --> 00:08:31,890
that then you just get your trace backs

00:08:29,780 --> 00:08:34,460
obviously you don't get those if it

00:08:31,890 --> 00:08:37,740
actually expects your test to fail and

00:08:34,460 --> 00:08:40,380
you can use these markers basically just

00:08:37,740 --> 00:08:43,050
to add metadata to your test and we use

00:08:40,380 --> 00:08:45,690
these a lot just to group related tests

00:08:43,050 --> 00:08:48,330
over multiple files if if we are working

00:08:45,690 --> 00:08:51,360
on something and we you know we want to

00:08:48,330 --> 00:08:52,560
organize our testing multiple files and

00:08:51,360 --> 00:08:54,390
but we still want to say that these

00:08:52,560 --> 00:08:54,870
things are related and so you can use

00:08:54,390 --> 00:08:57,210
these MA

00:08:54,870 --> 00:08:59,339
to when you're running a selection of

00:08:57,210 --> 00:09:02,700
tests just run the tests that have a

00:08:59,339 --> 00:09:06,630
particular mark by using minus M and we

00:09:02,700 --> 00:09:09,330
also use these marks to relate our tests

00:09:06,630 --> 00:09:11,820
to our issues in our bug tracker so we

00:09:09,330 --> 00:09:14,370
use the Mantis bug tracker and we just

00:09:11,820 --> 00:09:16,890
use like mantis 1543 to refer to a

00:09:14,370 --> 00:09:18,870
particular bug and that's very useful

00:09:16,890 --> 00:09:20,580
for our testers so that they can see

00:09:18,870 --> 00:09:21,960
what tests have we written for a

00:09:20,580 --> 00:09:24,770
particular thing what is the coverage

00:09:21,960 --> 00:09:27,930
like and you can you know you can run

00:09:24,770 --> 00:09:30,210
code coverage with pie test as well just

00:09:27,930 --> 00:09:32,040
with those tests to see have you

00:09:30,210 --> 00:09:34,170
actually covered all the cases for the

00:09:32,040 --> 00:09:38,220
pieces of code that you touched when you

00:09:34,170 --> 00:09:39,900
are writing the fix and because you can

00:09:38,220 --> 00:09:41,610
you can choose to have these as like

00:09:39,900 --> 00:09:44,190
registered or not so that you have a

00:09:41,610 --> 00:09:45,480
limited set and then if you make a typo

00:09:44,190 --> 00:09:48,150
pie test will tell you it doesn't know

00:09:45,480 --> 00:09:50,040
about some mark but we just use them

00:09:48,150 --> 00:09:51,950
free form and you can kind of make them

00:09:50,040 --> 00:09:55,620
whatever you want so that's quite

00:09:51,950 --> 00:09:59,459
flexible now something that we do quite

00:09:55,620 --> 00:10:00,959
a lot is parametrized tests so we have a

00:09:59,459 --> 00:10:04,260
test where we want to test a function

00:10:00,959 --> 00:10:05,880
maybe it's converting a rounding for

00:10:04,260 --> 00:10:08,610
example where we have some wacky

00:10:05,880 --> 00:10:10,350
rounding system and we just want to feed

00:10:08,610 --> 00:10:11,730
a bunch of different data points into it

00:10:10,350 --> 00:10:13,529
and say this is the input this is what

00:10:11,730 --> 00:10:14,790
we expect you as the output and we want

00:10:13,529 --> 00:10:16,920
to have it in a way that is really

00:10:14,790 --> 00:10:20,160
succinct so as little Boyle plate as

00:10:16,920 --> 00:10:23,160
possible there is a pie test my

00:10:20,160 --> 00:10:26,370
parameterised in 2.2 which is the latest

00:10:23,160 --> 00:10:28,050
version of pie test and so for for some

00:10:26,370 --> 00:10:30,120
really simple data that you can just

00:10:28,050 --> 00:10:34,800
explicate like that you can put it in

00:10:30,120 --> 00:10:37,380
the decorator and do that although I

00:10:34,800 --> 00:10:39,450
find that that's I don't know i find

00:10:37,380 --> 00:10:41,550
that like that's a lot of data to put in

00:10:39,450 --> 00:10:43,740
a decorator and if you need to do

00:10:41,550 --> 00:10:45,180
something a bit more complicated than

00:10:43,740 --> 00:10:46,970
that then you're going to need something

00:10:45,180 --> 00:10:53,010
a bit more powerful than a decorator and

00:10:46,970 --> 00:10:55,529
so pi just has a if you put a function

00:10:53,010 --> 00:11:01,290
called pie test generate tests in your

00:10:55,529 --> 00:11:03,870
test file it will use that to create all

00:11:01,290 --> 00:11:06,870
the different instances of tests that

00:11:03,870 --> 00:11:08,089
you tell it to create so if here for

00:11:06,870 --> 00:11:10,430
example in our

00:11:08,089 --> 00:11:12,110
we've got a is square function and then

00:11:10,430 --> 00:11:14,749
in our test file we've got this pie test

00:11:12,110 --> 00:11:19,209
generate tests and we've got a def test

00:11:14,749 --> 00:11:22,999
is square so this test is got two

00:11:19,209 --> 00:11:24,079
arguments in unexpected and so it's kind

00:11:22,999 --> 00:11:26,680
of like well where is that information

00:11:24,079 --> 00:11:29,269
coming from and so PI test is going to

00:11:26,680 --> 00:11:31,220
take that information from your generate

00:11:29,269 --> 00:11:34,189
test function and feed it into your test

00:11:31,220 --> 00:11:38,809
and so if you do collect if you run pi

00:11:34,189 --> 00:11:41,389
tests collect only which just lists the

00:11:38,809 --> 00:11:43,790
name of all the tests there will be you

00:11:41,389 --> 00:11:45,680
know 50 tests 50 versions of this test

00:11:43,790 --> 00:11:48,319
and so you can control what information

00:11:45,680 --> 00:11:52,490
you feed it what you want the name of

00:11:48,319 --> 00:11:54,769
the test to be like and you can also

00:11:52,490 --> 00:11:57,199
using this approach you can feed this

00:11:54,769 --> 00:12:00,649
data into multiple test functions in

00:11:57,199 --> 00:12:02,779
your file if you were doing that I find

00:12:00,649 --> 00:12:04,850
that that's a little bit of a strange

00:12:02,779 --> 00:12:08,300
approach so obviously you can only have

00:12:04,850 --> 00:12:10,209
one PI test generate tests / file /

00:12:08,300 --> 00:12:12,470
module but you might want to have

00:12:10,209 --> 00:12:14,389
different parameterizations for

00:12:12,470 --> 00:12:19,459
different tests even in the same file

00:12:14,389 --> 00:12:21,529
and so we actually have something that

00:12:19,459 --> 00:12:23,089
was added to our project by one of my

00:12:21,529 --> 00:12:25,970
workmates the Darius who I think is

00:12:23,089 --> 00:12:29,389
hiding up the back and so this lets us

00:12:25,970 --> 00:12:32,389
have a generate function / test function

00:12:29,389 --> 00:12:34,550
so instead of having the generate tests

00:12:32,389 --> 00:12:35,870
which has a bit of boilerplate it's like

00:12:34,550 --> 00:12:38,749
you know if the test function is called

00:12:35,870 --> 00:12:40,399
this feed at this data we have a

00:12:38,749 --> 00:12:42,829
convention that we're going to have a

00:12:40,399 --> 00:12:44,749
function that's called generate foo and

00:12:42,829 --> 00:12:46,819
that's going to correspond to test foo

00:12:44,749 --> 00:12:48,740
so the generate function is going to

00:12:46,819 --> 00:12:51,860
feed it's just going to be the one

00:12:48,740 --> 00:12:54,529
function that feeds information into the

00:12:51,860 --> 00:12:56,899
one test function and so then we don't

00:12:54,529 --> 00:12:59,689
need to do the magic about have we got

00:12:56,899 --> 00:13:01,670
the function name right or whatever and

00:12:59,689 --> 00:13:03,740
we don't need to do a bit of other meta

00:13:01,670 --> 00:13:06,079
funk stuff and so this is really like a

00:13:03,740 --> 00:13:11,449
nice very succinct way of specifying

00:13:06,079 --> 00:13:13,189
generated tests something else that you

00:13:11,449 --> 00:13:17,209
can do with pi test is monkey patching

00:13:13,189 --> 00:13:19,910
and monkey patching is generally is like

00:13:17,209 --> 00:13:23,060
a general term that refers to

00:13:19,910 --> 00:13:24,770
the awesome ability in Python to change

00:13:23,060 --> 00:13:27,380
whatever you like on the fly because

00:13:24,770 --> 00:13:30,320
everything is an object so if you have

00:13:27,380 --> 00:13:31,820
some code that sends emails probably in

00:13:30,320 --> 00:13:33,440
your test library you don't want to send

00:13:31,820 --> 00:13:35,450
100 emails just because you have a test

00:13:33,440 --> 00:13:37,970
that covers that functionality so you

00:13:35,450 --> 00:13:39,560
want to patch out or replace the bit

00:13:37,970 --> 00:13:41,240
that says it's sending an email with

00:13:39,560 --> 00:13:42,770
something that just sends something

00:13:41,240 --> 00:13:44,750
usually either or just attaches

00:13:42,770 --> 00:13:46,670
something append something to a list or

00:13:44,750 --> 00:13:48,290
something like that so this is quite

00:13:46,670 --> 00:13:51,350
common whenever you're doing stuff that

00:13:48,290 --> 00:13:54,320
needs to touch the OS or touch external

00:13:51,350 --> 00:13:55,880
server ease servers or libraries or you

00:13:54,320 --> 00:13:59,090
don't hit some database every time you

00:13:55,880 --> 00:14:01,130
run a test or that kind of thing and so

00:13:59,090 --> 00:14:04,100
monkey patch that's kind of the general

00:14:01,130 --> 00:14:06,680
process of monkey patching and you can

00:14:04,100 --> 00:14:09,770
DIY where you just like literally just

00:14:06,680 --> 00:14:11,810
replace some attribute or some

00:14:09,770 --> 00:14:14,210
dictionary item but you always kind of

00:14:11,810 --> 00:14:18,560
need to remember to undo what you've

00:14:14,210 --> 00:14:20,540
done and that can be annoying and tricky

00:14:18,560 --> 00:14:24,080
and so pie test comes with this monkey

00:14:20,540 --> 00:14:26,090
patch plugin that will undo that stuff

00:14:24,080 --> 00:14:28,580
for you so we're using this some monkey

00:14:26,090 --> 00:14:31,070
patch set a true so we're replacing the

00:14:28,580 --> 00:14:33,020
expand user function on the OS path

00:14:31,070 --> 00:14:34,910
library and that's going to undo that

00:14:33,020 --> 00:14:36,290
when that test is complete for us so we

00:14:34,910 --> 00:14:39,230
don't have to worry about side effects

00:14:36,290 --> 00:14:41,090
with our other tests as well as set out

00:14:39,230 --> 00:14:44,810
sure there's like set item for

00:14:41,090 --> 00:14:47,390
dictionary items and set em for

00:14:44,810 --> 00:14:50,570
environment variables and this is our

00:14:47,390 --> 00:14:53,480
first site of the infamous funk hugs

00:14:50,570 --> 00:14:56,840
which the title is all about so in this

00:14:53,480 --> 00:15:00,080
test we've got def test get ssh monkey

00:14:56,840 --> 00:15:01,520
patch and so where is this monkey patch

00:15:00,080 --> 00:15:04,250
you know where is it coming from it's

00:15:01,520 --> 00:15:08,180
not exactly being fed to the test from a

00:15:04,250 --> 00:15:10,370
generator like the previous example it's

00:15:08,180 --> 00:15:11,660
basically well okay so that's the phone

00:15:10,370 --> 00:15:13,640
cut that's what one looks like when you

00:15:11,660 --> 00:15:15,170
write your test it's just it's a

00:15:13,640 --> 00:15:17,300
variable that you put into your test and

00:15:15,170 --> 00:15:19,010
it gets fed into your test even though

00:15:17,300 --> 00:15:23,150
in your test file it's not necessarily

00:15:19,010 --> 00:15:24,980
obvious where it came from now so the

00:15:23,150 --> 00:15:27,110
thing about monkey patching is that it

00:15:24,980 --> 00:15:30,560
can have side effects that you don't

00:15:27,110 --> 00:15:33,290
necessarily want and can end badly and

00:15:30,560 --> 00:15:37,009
so in between

00:15:33,290 --> 00:15:38,690
I said in a 2008 blog post that monkey

00:15:37,009 --> 00:15:43,720
patch threatens everything you value

00:15:38,690 --> 00:15:49,610
about modularity so use with caution and

00:15:43,720 --> 00:15:52,579
so with the with fun cogs let's look at

00:15:49,610 --> 00:15:56,810
an example of writing our own so with

00:15:52,579 --> 00:15:57,949
unit test test features fixtures people

00:15:56,810 --> 00:16:00,560
are probably familiar with these terms

00:15:57,949 --> 00:16:03,949
where you need to provide some setup

00:16:00,560 --> 00:16:05,959
data to your test and so you might put

00:16:03,949 --> 00:16:07,279
some data in your database and then at

00:16:05,959 --> 00:16:09,259
the end of the test you need to take it

00:16:07,279 --> 00:16:11,709
out again or remove it restore your

00:16:09,259 --> 00:16:14,509
database to the state that it was in and

00:16:11,709 --> 00:16:15,980
so in this test right at the bottom

00:16:14,509 --> 00:16:19,339
we've got test DB and they're taking

00:16:15,980 --> 00:16:21,620
this DB object and so this information

00:16:19,339 --> 00:16:23,990
above is what's defining what is that DB

00:16:21,620 --> 00:16:25,550
object and so we've got pie test

00:16:23,990 --> 00:16:28,339
underscore phone card double underscore

00:16:25,550 --> 00:16:30,259
DB that takes a request and so that is

00:16:28,339 --> 00:16:32,449
the definition for pie test of what is a

00:16:30,259 --> 00:16:34,339
funk argh and so the information that

00:16:32,449 --> 00:16:36,410
you need to give it to define a phone

00:16:34,339 --> 00:16:38,029
card is what does the setup what is the

00:16:36,410 --> 00:16:41,029
teardown and what's the scope of it and

00:16:38,029 --> 00:16:45,380
so your scope can be function module

00:16:41,029 --> 00:16:47,180
session and like the set up into towns

00:16:45,380 --> 00:16:49,480
can be very similar to what you are

00:16:47,180 --> 00:16:54,139
already doing with unit test style tests

00:16:49,480 --> 00:16:57,440
and so you can you can use this to this

00:16:54,139 --> 00:16:59,600
funk argh idea you can use to express a

00:16:57,440 --> 00:17:02,149
lot of different things that you might

00:16:59,600 --> 00:17:06,530
need for your tests so there's a few

00:17:02,149 --> 00:17:08,900
libraries that um ty pi test more

00:17:06,530 --> 00:17:11,720
usefully into other frameworks so one is

00:17:08,900 --> 00:17:14,600
Django it's called PI test Django so in

00:17:11,720 --> 00:17:16,669
these tests we've got the funk hugs RF

00:17:14,600 --> 00:17:18,260
which is a request factory and we've got

00:17:16,669 --> 00:17:20,689
another one called admin underscore

00:17:18,260 --> 00:17:23,689
client I'm sure you can guess what that

00:17:20,689 --> 00:17:26,449
is and so they are quite similar to

00:17:23,689 --> 00:17:28,850
things that are available in the Django

00:17:26,449 --> 00:17:32,150
unit tests style of doing things I

00:17:28,850 --> 00:17:36,290
believe and so this just gives you those

00:17:32,150 --> 00:17:39,100
things as photogs with the Google App

00:17:36,290 --> 00:17:42,320
Engine it likes us some trivial examples

00:17:39,100 --> 00:17:44,690
you can have anonymous a per user

00:17:42,320 --> 00:17:45,790
registered app or an administrator app

00:17:44,690 --> 00:17:48,100
and

00:17:45,790 --> 00:17:50,440
with these you can see how simple it is

00:17:48,100 --> 00:17:52,030
to actually write these like all you're

00:17:50,440 --> 00:17:55,180
specifying is like four pieces of

00:17:52,030 --> 00:17:56,620
information but you can have you know

00:17:55,180 --> 00:17:58,600
you could have a test that takes all

00:17:56,620 --> 00:18:02,230
three of these things as different

00:17:58,600 --> 00:18:04,210
things like so you can mix and match

00:18:02,230 --> 00:18:06,820
them much more powerfully I think

00:18:04,210 --> 00:18:08,140
because you can have you don't need to

00:18:06,820 --> 00:18:10,420
have all your tests that use the

00:18:08,140 --> 00:18:12,670
anonymous app in one file they can be

00:18:10,420 --> 00:18:16,210
spread across all your files and you can

00:18:12,670 --> 00:18:17,920
arrange your test however you want to so

00:18:16,210 --> 00:18:20,050
to talk a little bit a bit bit more

00:18:17,920 --> 00:18:26,920
about like why would you do things in

00:18:20,050 --> 00:18:30,100
this style it encourages a style which

00:18:26,920 --> 00:18:31,630
is like the the words dependency

00:18:30,100 --> 00:18:34,240
injection or thrown around a lot at our

00:18:31,630 --> 00:18:36,670
work and Martin Fowler talks about this

00:18:34,240 --> 00:18:41,230
in 2004 and basically the idea is

00:18:36,670 --> 00:18:43,180
instead of having a class instantiate

00:18:41,230 --> 00:18:45,400
the things that it needs its

00:18:43,180 --> 00:18:47,530
dependencies you pass its dependencies

00:18:45,400 --> 00:18:48,970
to it and that doesn't sound like an

00:18:47,530 --> 00:18:53,470
awful lot and it's something that is

00:18:48,970 --> 00:18:56,760
often quite natural in in Python anyway

00:18:53,470 --> 00:18:59,320
but it becomes quite powerful because it

00:18:56,760 --> 00:19:02,410
makes it a lot easier to test things

00:18:59,320 --> 00:19:04,060
with mock infrastructure so if you have

00:19:02,410 --> 00:19:05,710
a function that is doing something with

00:19:04,060 --> 00:19:07,240
the database instead of passing it the

00:19:05,710 --> 00:19:09,340
string that is the database name and

00:19:07,240 --> 00:19:11,460
having it connect to the database you

00:19:09,340 --> 00:19:14,380
pass it a database that has already been

00:19:11,460 --> 00:19:16,060
instantiated and then when you come to

00:19:14,380 --> 00:19:18,520
test that function it's super easy to

00:19:16,060 --> 00:19:20,950
pass it a mock database or a SQLite

00:19:18,520 --> 00:19:22,450
database or whatever else is appropriate

00:19:20,950 --> 00:19:24,730
for your testing and you don't need to

00:19:22,450 --> 00:19:28,140
actually monkey patch your function to

00:19:24,730 --> 00:19:32,050
not connect to the real database and

00:19:28,140 --> 00:19:33,580
it's works really well with test-driven

00:19:32,050 --> 00:19:36,250
development so you write your tests

00:19:33,580 --> 00:19:38,620
first and in a way writing the test

00:19:36,250 --> 00:19:39,970
helps you you're designing for testing

00:19:38,620 --> 00:19:42,610
because if you're writing the test first

00:19:39,970 --> 00:19:44,290
then it is in it is in a way so that you

00:19:42,610 --> 00:19:47,890
can test that function and then it's

00:19:44,290 --> 00:19:49,000
much easier to go to your code and write

00:19:47,890 --> 00:19:51,420
the code that actually does the thing

00:19:49,000 --> 00:19:54,700
with the real database or the real

00:19:51,420 --> 00:19:57,100
spatial data or whatever so let's look

00:19:54,700 --> 00:19:58,919
at a few more examples so this is a real

00:19:57,100 --> 00:20:01,950
database example

00:19:58,919 --> 00:20:03,480
from our code and it's almost certainly

00:20:01,950 --> 00:20:06,690
not the best way to do database things

00:20:03,480 --> 00:20:09,299
but we have a small my single database

00:20:06,690 --> 00:20:11,759
that's connected to our stuff and you

00:20:09,299 --> 00:20:14,730
know this is just a setup function so in

00:20:11,759 --> 00:20:16,679
our fun cogs in our contest pie which is

00:20:14,730 --> 00:20:18,690
where we define our farm cogs we have a

00:20:16,679 --> 00:20:20,759
test database and so that's doing the

00:20:18,690 --> 00:20:22,889
setup and the scope for that is session

00:20:20,759 --> 00:20:25,070
which is important because we don't want

00:20:22,889 --> 00:20:28,679
to destroy the database on every test

00:20:25,070 --> 00:20:31,559
then we have the empty DB funk ugh and

00:20:28,679 --> 00:20:33,299
so that's just deleting all the data out

00:20:31,559 --> 00:20:35,039
of the database so that each time it is

00:20:33,299 --> 00:20:39,179
fresh and so the scope on that one is

00:20:35,039 --> 00:20:40,769
function and so if we are writing a test

00:20:39,179 --> 00:20:43,529
that needs a database we're going to use

00:20:40,769 --> 00:20:46,139
the empty DB funk ugh rather than the

00:20:43,529 --> 00:20:48,210
test DB funk argh but the MTD be

00:20:46,139 --> 00:20:51,179
obviously requires the test DB to set up

00:20:48,210 --> 00:20:52,649
and so basically we need to say well

00:20:51,179 --> 00:20:54,299
this one cog has a dependency on this

00:20:52,649 --> 00:20:56,549
other phone cog and the way that you do

00:20:54,299 --> 00:20:59,820
that is with this request get fun cog

00:20:56,549 --> 00:21:01,590
value and so that helps you specify your

00:20:59,820 --> 00:21:05,700
dependencies in a really straightforward

00:21:01,590 --> 00:21:08,309
way and if we needed to this is also how

00:21:05,700 --> 00:21:10,289
if we were doing monkey patch and we

00:21:08,309 --> 00:21:12,450
needed to get access to the monkey patch

00:21:10,289 --> 00:21:14,190
funk argh that's what we do instead of

00:21:12,450 --> 00:21:15,899
underscore we'd call it monkey patch and

00:21:14,190 --> 00:21:20,539
then we just use it as if we were in the

00:21:15,899 --> 00:21:24,119
test you can also use it to express

00:21:20,539 --> 00:21:26,279
prerequisites in a way so this is a fun

00:21:24,119 --> 00:21:29,389
card called lib you des so we try and

00:21:26,279 --> 00:21:31,440
import it and load some crazy library

00:21:29,389 --> 00:21:33,480
and if we can't do that then we're just

00:21:31,440 --> 00:21:35,460
going to skip that test and so this is a

00:21:33,480 --> 00:21:37,080
really neat way of expressing you know

00:21:35,460 --> 00:21:39,269
this test needs this thing and if it

00:21:37,080 --> 00:21:43,109
can't have it then you can just ignore

00:21:39,269 --> 00:21:45,259
this test and so like that's just a

00:21:43,109 --> 00:21:48,029
little bit too complicated for a

00:21:45,259 --> 00:21:52,350
decorator but it's kind of perfect for a

00:21:48,029 --> 00:21:56,489
funk ugh now to go out to monkey

00:21:52,350 --> 00:21:59,789
patching so if you need to monkey patch

00:21:56,489 --> 00:22:01,019
a couple of things at once or your

00:21:59,789 --> 00:22:02,789
monkey patching is a little bit more

00:22:01,019 --> 00:22:04,799
involved then a fun card is a good way

00:22:02,789 --> 00:22:06,659
of bundling up what you're doing and

00:22:04,799 --> 00:22:10,649
expressing that as a requirement on your

00:22:06,659 --> 00:22:12,299
test so this is one that I wrote which

00:22:10,649 --> 00:22:12,570
is called no previous warnings so we

00:22:12,299 --> 00:22:14,340
don't

00:22:12,570 --> 00:22:15,389
get some database and get some real data

00:22:14,340 --> 00:22:19,350
because that's going to screw everything

00:22:15,389 --> 00:22:21,179
up and so we've got this a monkey patch

00:22:19,350 --> 00:22:23,009
equals request get phone karke value

00:22:21,179 --> 00:22:25,139
monkey patch and then I'm just doing my

00:22:23,009 --> 00:22:26,519
regular monkey patching i'm not doing in

00:22:25,139 --> 00:22:27,990
each hair down in this because I'm

00:22:26,519 --> 00:22:30,630
relying on monkey patch to do its

00:22:27,990 --> 00:22:33,779
teardown and the scope for that is

00:22:30,630 --> 00:22:36,690
function and so with this like we're not

00:22:33,779 --> 00:22:39,600
actually returning anything from this

00:22:36,690 --> 00:22:41,370
function and so we're not providing an

00:22:39,600 --> 00:22:43,710
object that you can actually use but we

00:22:41,370 --> 00:22:48,090
are doing the test set up in a way that

00:22:43,710 --> 00:22:50,009
is quite concise but if you're doing

00:22:48,090 --> 00:22:53,659
that a lot you know it's probably a code

00:22:50,009 --> 00:22:56,909
smell and maybe it's not a good idea in

00:22:53,659 --> 00:23:00,360
pie tests the author of pie test works

00:22:56,909 --> 00:23:02,340
on pie pie and so he has some stuff so

00:23:00,360 --> 00:23:04,110
that the pie pie maybe not the pie pie

00:23:02,340 --> 00:23:07,019
but other tests that he's written will

00:23:04,110 --> 00:23:09,450
run over all versions of Python and so

00:23:07,019 --> 00:23:13,320
using a combination of a fun card called

00:23:09,450 --> 00:23:15,299
any Python and generate tests basically

00:23:13,320 --> 00:23:17,129
he's when he's written his test he just

00:23:15,299 --> 00:23:18,990
puts any Python in as a funk hug and

00:23:17,129 --> 00:23:20,700
then it's automatically going to run

00:23:18,990 --> 00:23:23,399
that test over whatever versions of

00:23:20,700 --> 00:23:24,720
Python are installed on the system so

00:23:23,399 --> 00:23:26,730
you can imagine that that's going to be

00:23:24,720 --> 00:23:28,259
super useful if you have kind of your

00:23:26,730 --> 00:23:29,610
continuous integration setup and you

00:23:28,259 --> 00:23:33,179
want your tests to pass on everything

00:23:29,610 --> 00:23:36,480
all the time and yeah so if that was

00:23:33,179 --> 00:23:38,389
that like looked super confusing just

00:23:36,480 --> 00:23:41,309
think about the benefit from that way

00:23:38,389 --> 00:23:43,379
from having your test coverage over like

00:23:41,309 --> 00:23:44,879
eight different things and in your chest

00:23:43,379 --> 00:23:47,370
all you've done is add this one Frank

00:23:44,879 --> 00:23:51,809
argh so it's like a very concise way of

00:23:47,370 --> 00:23:52,769
expanding your test coverage Python 2.3

00:23:51,809 --> 00:23:55,889
is going to have a slightly different

00:23:52,769 --> 00:23:57,539
API so instead of doing the tightest

00:23:55,889 --> 00:24:00,029
underscore phone card double underscore

00:23:57,539 --> 00:24:02,159
whatever you're just going to find

00:24:00,029 --> 00:24:05,100
define a function called whatever or

00:24:02,159 --> 00:24:06,419
smtp in this example instead of taking a

00:24:05,100 --> 00:24:08,580
request it's going to take a text

00:24:06,419 --> 00:24:12,539
context but they kind of similar things

00:24:08,580 --> 00:24:13,799
as far as i can tell and instead of so

00:24:12,539 --> 00:24:15,360
instead of having the magic function

00:24:13,799 --> 00:24:17,039
name that makes it a fun cog you

00:24:15,360 --> 00:24:18,860
decorate it with a pie test factory and

00:24:17,039 --> 00:24:21,779
that's what marks it as a fun cog and

00:24:18,860 --> 00:24:24,600
you put the scope up in the decorator

00:24:21,779 --> 00:24:25,539
and you've got this ad finalizer instead

00:24:24,600 --> 00:24:26,919
of a teardown

00:24:25,539 --> 00:24:28,359
but basically you've still got the same

00:24:26,919 --> 00:24:30,249
elements we've got to set up your tear

00:24:28,359 --> 00:24:32,859
down and your scope and so you have all

00:24:30,249 --> 00:24:34,479
these things here now in addition these

00:24:32,859 --> 00:24:36,309
are even more powerful because it has

00:24:34,479 --> 00:24:39,129
these params and basically this is

00:24:36,309 --> 00:24:42,309
parameterizing your phone card so in the

00:24:39,129 --> 00:24:43,659
previous example where we had any Python

00:24:42,309 --> 00:24:45,340
and we were combining that with generate

00:24:43,659 --> 00:24:48,399
test to do all the different versions of

00:24:45,340 --> 00:24:50,859
Python in this we are just specifying it

00:24:48,399 --> 00:24:52,269
directly into the phone card that like

00:24:50,859 --> 00:24:53,859
there's two versions of this phone karke

00:24:52,269 --> 00:24:56,830
and so any tests that you use the phone

00:24:53,859 --> 00:25:00,340
calc smtp are going to have to generated

00:24:56,830 --> 00:25:01,960
versions for each of those parameters so

00:25:00,340 --> 00:25:04,960
I actually have no minutes to go so I

00:25:01,960 --> 00:25:06,639
won't talk about that but you can look

00:25:04,960 --> 00:25:09,639
at those slides on SlideShare if you

00:25:06,639 --> 00:25:12,549
really want to so now you should have a

00:25:09,639 --> 00:25:13,899
good idea or a bit of an idea of most of

00:25:12,549 --> 00:25:20,229
the things that I've mentioned here and

00:25:13,899 --> 00:25:22,539
so I think one of the the real benefits

00:25:20,229 --> 00:25:24,369
to paya test is it has very good just

00:25:22,539 --> 00:25:26,409
support for running distributed tests

00:25:24,369 --> 00:25:28,059
and if you have a lot of tests or they

00:25:26,409 --> 00:25:33,340
take a lot of time to run that's super

00:25:28,059 --> 00:25:36,099
useful and using fun cogs really helps

00:25:33,340 --> 00:25:39,009
you isolate your test interdependencies

00:25:36,099 --> 00:25:40,749
and and get rid of them and like you you

00:25:39,009 --> 00:25:42,460
really need to come to grips with that

00:25:40,749 --> 00:25:43,629
when you are running distributed tests

00:25:42,460 --> 00:25:45,460
because they're not running in the same

00:25:43,629 --> 00:25:47,259
order as they would just on your box and

00:25:45,460 --> 00:25:48,609
that's when you really start to find all

00:25:47,259 --> 00:25:50,109
this has this interdependence II I had

00:25:48,609 --> 00:25:53,499
no idea about because suddenly they're

00:25:50,109 --> 00:25:55,299
running in a different order and so

00:25:53,499 --> 00:25:58,840
they're fun cogs I just think her a

00:25:55,299 --> 00:26:01,299
really nice way of being able to isolate

00:25:58,840 --> 00:26:05,139
those interdependencies and and tie them

00:26:01,299 --> 00:26:06,759
down and keep them all together and I

00:26:05,139 --> 00:26:09,669
think it will make you feel like a

00:26:06,759 --> 00:26:12,039
smarter developer wants to do it so if

00:26:09,669 --> 00:26:13,330
you have questions the pint of mailing

00:26:12,039 --> 00:26:15,269
list is quite good there's also a

00:26:13,330 --> 00:26:17,229
testing in Python mailing list and

00:26:15,269 --> 00:26:20,529
there's some questions on stack overflow

00:26:17,229 --> 00:26:22,419
the lead developer Holger crackle was is

00:26:20,529 --> 00:26:24,429
really awesome he will answer lots of

00:26:22,419 --> 00:26:26,529
questions and he wants to develop Stack

00:26:24,429 --> 00:26:28,059
Overflow was kind of the frequently

00:26:26,529 --> 00:26:32,649
asked questions so it's a good idea to

00:26:28,059 --> 00:26:35,139
ask your questions there and thanks to

00:26:32,649 --> 00:26:36,940
the Bureau of Meteorology so most of the

00:26:35,139 --> 00:26:37,690
examples that didn't have comments from

00:26:36,940 --> 00:26:41,409
our code

00:26:37,690 --> 00:26:43,149
and dyers pal introduce our project 2 pi

00:26:41,409 --> 00:26:45,220
test which is awesome and has really

00:26:43,149 --> 00:26:48,220
helped us all figure out how to use it

00:26:45,220 --> 00:26:49,389
and if you want to look at the examples

00:26:48,220 --> 00:26:52,000
in more detail you can look at that

00:26:49,389 --> 00:27:04,809
thing on github which has them all there

00:26:52,000 --> 00:27:06,399
and that's all I have thank you because

00:27:04,809 --> 00:27:08,019
it started I mean it like really wrangle

00:27:06,399 --> 00:27:13,330
half a question if someone has a quick

00:27:08,019 --> 00:27:15,700
one you have a good question yeah do you

00:27:13,330 --> 00:27:19,240
know when numpy test two countries Julia

00:27:15,700 --> 00:27:22,149
hi Dennis 2.3 yeah yes so should be

00:27:19,240 --> 00:27:24,039
mid-september and so with the with the

00:27:22,149 --> 00:27:25,240
new style they still all your old ones

00:27:24,039 --> 00:27:26,799
will still work so you don't have to

00:27:25,240 --> 00:27:29,980
convert them they're still supporting

00:27:26,799 --> 00:27:31,419
the old API but if you want a you know

00:27:29,980 --> 00:27:32,889
and in some instances it will be a lot

00:27:31,419 --> 00:27:35,740
nicer to convert them to the new style

00:27:32,889 --> 00:27:38,710
and I think there's some other benefits

00:27:35,740 --> 00:27:40,389
relating to the case setup thing which I

00:27:38,710 --> 00:27:42,129
didn't really understand but I'm sure

00:27:40,389 --> 00:27:44,889
that the new way is better it always is

00:27:42,129 --> 00:27:46,539
right it is a bit nicer just to use the

00:27:44,889 --> 00:27:48,490
PI tears stop factory and you don't have

00:27:46,539 --> 00:27:53,470
the magic name and I think it's a little

00:27:48,490 --> 00:27:54,730
bit nicer okay cool well here is some

00:27:53,470 --> 00:27:56,500
gifts for you have a mug and some

00:27:54,730 --> 00:28:00,090
african swallow a coffee thank you um

00:27:56,500 --> 00:28:00,090
Jimmy get in thanking Brenna

00:28:03,539 --> 00:28:05,600

YouTube URL: https://www.youtube.com/watch?v=DTNejE9EraI


