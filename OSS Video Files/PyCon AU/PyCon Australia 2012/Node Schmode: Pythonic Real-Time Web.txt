Title: Node Schmode: Pythonic Real-Time Web
Publication date: 2012-08-23
Playlist: PyCon Australia 2012
Description: 
	Dylan Jay
Using gevent, pyramid and socket-io for a micro framework approach to creating real-time web apps without the braces. Why is gevent so cool and how it can let you write fast scalable apps with asynchronous IO without twisting your mind.
Captions: 
	00:00:02,750 --> 00:00:09,360
all right good afternoon everybody

00:00:05,430 --> 00:00:12,599
um good sibling this is a Dylan J the

00:00:09,360 --> 00:00:14,910
CEO of praetor Webb a CMS cloud provider

00:00:12,599 --> 00:00:16,980
instrumental in the adoption of plone as

00:00:14,910 --> 00:00:18,750
a government shared web platform he's an

00:00:16,980 --> 00:00:20,670
open source developer releasing poem

00:00:18,750 --> 00:00:22,529
projects such as funnel web and host out

00:00:20,670 --> 00:00:24,600
is also the current convener of the

00:00:22,529 --> 00:00:33,620
Sydney Python users group please make

00:00:24,600 --> 00:00:35,550
him welcome thank you so I hope you'll

00:00:33,620 --> 00:00:37,110
share the pain I've spent the last

00:00:35,550 --> 00:00:42,719
couple of days doing too much JavaScript

00:00:37,110 --> 00:00:48,210
because this is mostly JavaScript so let

00:00:42,719 --> 00:00:51,870
me go back to the presentation okay so

00:00:48,210 --> 00:00:55,530
this is about pythonic real time web and

00:00:51,870 --> 00:00:57,420
a little bit of nodejs special so my

00:00:55,530 --> 00:00:59,940
company we mostly do governmen we do

00:00:57,420 --> 00:01:02,960
CMS's bubble love

00:00:59,940 --> 00:01:06,780
there's the demo you saw it before now a

00:01:02,960 --> 00:01:08,340
couple of tips with the demo it uses

00:01:06,780 --> 00:01:10,470
your orientation sensors if you've got a

00:01:08,340 --> 00:01:13,770
macbook try moving it left right forward

00:01:10,470 --> 00:01:16,830
back don't use it on mozilla firefox it

00:01:13,770 --> 00:01:18,479
doesn't seem to work I'm not 100% sure

00:01:16,830 --> 00:01:25,740
while I was too busy playing around with

00:01:18,479 --> 00:01:27,270
the orientation stuff so real-time web

00:01:25,740 --> 00:01:28,860
is more or less about that kind of thing

00:01:27,270 --> 00:01:31,200
that's about getting instant updates and

00:01:28,860 --> 00:01:33,299
that's why I kind of yesterday

00:01:31,200 --> 00:01:34,740
reimplemented it I had this GPS kind of

00:01:33,299 --> 00:01:36,540
thing and you could see it runs location

00:01:34,740 --> 00:01:37,710
I realize that everyone's gonna be here

00:01:36,540 --> 00:01:39,450
and their location it's not going to

00:01:37,710 --> 00:01:41,100
move and it's going to be really really

00:01:39,450 --> 00:01:45,390
dull that's why I put a little

00:01:41,100 --> 00:01:46,500
orientation thing in there and I didn't

00:01:45,390 --> 00:01:51,540
want to do a chat out because everyone

00:01:46,500 --> 00:01:55,590
does a chat out so no no Jess who's

00:01:51,540 --> 00:01:57,600
heard of node.js right and see the pipe

00:01:55,590 --> 00:02:00,689
is kind of working well so it's a

00:01:57,600 --> 00:02:01,920
JavaScript suicide kind of networking a

00:02:00,689 --> 00:02:02,909
little bit of a framework II kind of

00:02:01,920 --> 00:02:04,979
thing

00:02:02,909 --> 00:02:07,290
and it's it is kind of up on that that

00:02:04,979 --> 00:02:09,090
hype cycle you know where say Rails is

00:02:07,290 --> 00:02:11,520
maybe kind of plateauing going down and

00:02:09,090 --> 00:02:13,080
python is this kind of it's a sleeper

00:02:11,520 --> 00:02:15,680
that's just kinda gradually going to

00:02:13,080 --> 00:02:15,680
take over the world

00:02:15,900 --> 00:02:21,390
so nodes goal they kind of want to make

00:02:18,990 --> 00:02:23,040
doing this networking stuff really easy

00:02:21,390 --> 00:02:25,440
and they've kind of say there's a lot of

00:02:23,040 --> 00:02:27,450
stuff about how super efficient and fast

00:02:25,440 --> 00:02:30,750
it is as if it's a brand-new kind of

00:02:27,450 --> 00:02:33,510
thing this is a really good article to

00:02:30,750 --> 00:02:35,190
read about some of those claims it's I'm

00:02:33,510 --> 00:02:36,810
not going to go too much into it but I

00:02:35,190 --> 00:02:39,060
mean basically what he's saying is that

00:02:36,810 --> 00:02:40,350
okay yeah you know because it's using

00:02:39,060 --> 00:02:43,230
asynchronous i/o and various different

00:02:40,350 --> 00:02:44,760
things yes it'll kind of run fast but

00:02:43,230 --> 00:02:46,980
then if you want to build scalable apps

00:02:44,760 --> 00:02:49,260
it's a lot more about just having one

00:02:46,980 --> 00:02:50,370
little part of the thing work well you

00:02:49,260 --> 00:02:52,830
know you've got to understand exactly

00:02:50,370 --> 00:02:54,090
what's going on and and this charting

00:02:52,830 --> 00:02:55,320
all sorts of other things that come into

00:02:54,090 --> 00:02:58,200
play when you really want to make

00:02:55,320 --> 00:03:00,120
something scalable so it doesn't solve

00:02:58,200 --> 00:03:04,350
those problems it's not a magic kind of

00:03:00,120 --> 00:03:06,150
thing and getting the idea that you'll

00:03:04,350 --> 00:03:07,500
get a whole bunch of really good

00:03:06,150 --> 00:03:09,570
programmers because everyone knows

00:03:07,500 --> 00:03:15,300
JavaScript isn't necessarily going to

00:03:09,570 --> 00:03:18,239
work either so the Python way is just as

00:03:15,300 --> 00:03:20,040
simple in my opinion the the pros of

00:03:18,239 --> 00:03:23,580
doing this kind of thing in Python is

00:03:20,040 --> 00:03:26,340
there's lots of options but the cons are

00:03:23,580 --> 00:03:27,920
there's there's a lots of options so

00:03:26,340 --> 00:03:29,760
what I want to do is kind of run through

00:03:27,920 --> 00:03:31,890
you know when I start playing around

00:03:29,760 --> 00:03:33,510
with this this there's so many terms and

00:03:31,890 --> 00:03:35,310
it's kind of confusing

00:03:33,510 --> 00:03:36,660
so what I'll really want to do is

00:03:35,310 --> 00:03:38,670
instead of I could just show you the

00:03:36,660 --> 00:03:40,290
code and say do it this way I wanted to

00:03:38,670 --> 00:03:44,130
kind of talk about what some of the

00:03:40,290 --> 00:03:45,480
terms mean try and get you to sort of

00:03:44,130 --> 00:03:46,680
get your head around it so it's easy to

00:03:45,480 --> 00:03:50,459
understand when you see a lot of these

00:03:46,680 --> 00:03:52,440
terms so real time word is basically the

00:03:50,459 --> 00:03:55,019
idea of having like a socket some

00:03:52,440 --> 00:03:56,630
bi-directional connection between your

00:03:55,019 --> 00:04:00,600
web browser and something on the backend

00:03:56,630 --> 00:04:03,570
so you're not doing polling well that's

00:04:00,600 --> 00:04:05,790
alive but so how you do that there's

00:04:03,570 --> 00:04:09,269
this new protocol kind of a little bit

00:04:05,790 --> 00:04:11,070
like HTTP but it's it's called WebSocket

00:04:09,269 --> 00:04:12,330
so it kind of has header information but

00:04:11,070 --> 00:04:13,620
you end up with this bi-directional

00:04:12,330 --> 00:04:14,640
socket that all your proxies and

00:04:13,620 --> 00:04:15,630
everything in between are going to

00:04:14,640 --> 00:04:17,609
understand it's going to stay

00:04:15,630 --> 00:04:20,640
permanently connected between your

00:04:17,609 --> 00:04:24,000
browser and the server end but it's it's

00:04:20,640 --> 00:04:25,950
largely unsupported and there's a couple

00:04:24,000 --> 00:04:27,240
of different implementations of it to

00:04:25,950 --> 00:04:29,300
kind of make it harder but things like

00:04:27,240 --> 00:04:35,340
Chrome and Firefox will support it I

00:04:29,300 --> 00:04:37,199
think ie9 I'm not sure so um at this

00:04:35,340 --> 00:04:38,759
point you're going well that's great you

00:04:37,199 --> 00:04:40,710
know I've got this brand new thing that

00:04:38,759 --> 00:04:42,210
it would be awesome to have all this you

00:04:40,710 --> 00:04:45,599
know real-time updates into my browser

00:04:42,210 --> 00:04:47,729
but I can't use it because it's not

00:04:45,599 --> 00:04:49,740
supported well there's a couple of cool

00:04:47,729 --> 00:04:50,220
libraries that can help you get around

00:04:49,740 --> 00:04:53,190
that

00:04:50,220 --> 00:04:55,139
so socket IO is the older one I'll talk

00:04:53,190 --> 00:04:57,539
about in a minute so I only found out

00:04:55,139 --> 00:04:59,190
about soft jeaious this week and so I

00:04:57,539 --> 00:05:00,509
really implemented it because I found a

00:04:59,190 --> 00:05:02,849
few problems with socket IO and that's

00:05:00,509 --> 00:05:05,330
now in sauk jeaious I like it a bit

00:05:02,849 --> 00:05:08,460
better but the basic idea here is that

00:05:05,330 --> 00:05:09,659
it uses this kind of back off it all for

00:05:08,460 --> 00:05:12,780
all the different browsers pick

00:05:09,659 --> 00:05:15,270
something that gets you as real-time as

00:05:12,780 --> 00:05:17,669
possible so you'll notice that Pauling's

00:05:15,270 --> 00:05:20,009
at the end so at the very least it'll do

00:05:17,669 --> 00:05:22,349
something that'll send a request get

00:05:20,009 --> 00:05:23,819
something back and kind of to all them

00:05:22,349 --> 00:05:25,380
pets of purposes at the client server

00:05:23,819 --> 00:05:27,599
and act as if it's a single

00:05:25,380 --> 00:05:28,710
bi-directional kind of socket but then

00:05:27,599 --> 00:05:30,960
there's some clever stuff in between

00:05:28,710 --> 00:05:33,030
where it all like do a long pole it'll

00:05:30,960 --> 00:05:35,009
send a request and keep sending stuff in

00:05:33,030 --> 00:05:36,990
in the header and then it'll have a

00:05:35,009 --> 00:05:40,020
second one and keep sending stuff back

00:05:36,990 --> 00:05:42,330
you know create sort of two requests and

00:05:40,020 --> 00:05:43,770
try doing things that way the basic idea

00:05:42,330 --> 00:05:45,210
is you don't really need to worry about

00:05:43,770 --> 00:05:48,810
that it's handling at all on the

00:05:45,210 --> 00:05:57,560
background so it looks a little bit like

00:05:48,810 --> 00:06:03,750
that I might show that in here instead

00:05:57,560 --> 00:06:09,300
so you can see here that you've created

00:06:03,750 --> 00:06:11,639
a connection with we've got this little

00:06:09,300 --> 00:06:13,319
soft jeaious thing so one nice things

00:06:11,639 --> 00:06:15,210
about sabji is as opposed to stuff that

00:06:13,319 --> 00:06:18,479
IO is softy is pretty much follows

00:06:15,210 --> 00:06:21,539
WebSockets API so you can use it like

00:06:18,479 --> 00:06:22,979
it's a WebSocket software said we can

00:06:21,539 --> 00:06:24,960
improve on this and they added all this

00:06:22,979 --> 00:06:27,690
extra kind of in my opinion crap on top

00:06:24,960 --> 00:06:30,060
which does has problems like it will

00:06:27,690 --> 00:06:31,919
automatically do Jason serialization at

00:06:30,060 --> 00:06:33,840
each end which is great unless you

00:06:31,919 --> 00:06:35,460
really really really want to make things

00:06:33,840 --> 00:06:39,089
very efficient and don't want to Jason

00:06:35,460 --> 00:06:40,380
serialize your data they've improved

00:06:39,089 --> 00:06:40,920
that they've changed a little bit

00:06:40,380 --> 00:06:44,160
so then

00:06:40,920 --> 00:06:48,270
have you define a couple functions

00:06:44,160 --> 00:06:51,510
you're on open your on message and your

00:06:48,270 --> 00:06:52,380
unclose so for this app what we're doing

00:06:51,510 --> 00:06:55,980
is on open

00:06:52,380 --> 00:06:57,960
we send our current location every time

00:06:55,980 --> 00:07:00,600
we get a message we show that pin or

00:06:57,960 --> 00:07:03,330
update that pin and then we'll clear the

00:07:00,600 --> 00:07:04,530
pins when we close that's in case we

00:07:03,330 --> 00:07:10,050
reconnect and then we'll try

00:07:04,530 --> 00:07:12,650
reconnecting that's all there is to it

00:07:10,050 --> 00:07:12,650
from client side

00:07:18,169 --> 00:07:26,779
so yeah soccer is bit older yeah pretty

00:07:24,499 --> 00:07:28,460
much everything I talk does does a whole

00:07:26,779 --> 00:07:30,999
bunch of extra stuff has some protocols

00:07:28,460 --> 00:07:33,650
which are a little bit troublesome

00:07:30,999 --> 00:07:35,120
so this otherwise is comment which is

00:07:33,650 --> 00:07:36,800
basically doing stuff in the background

00:07:35,120 --> 00:07:39,110
that these other things make transparent

00:07:36,800 --> 00:07:40,639
don't recommend it sockets is don't

00:07:39,110 --> 00:07:42,759
discount sockets if you're not actually

00:07:40,639 --> 00:07:44,810
running in a browser just use a socket

00:07:42,759 --> 00:07:45,979
like for instance if you're doing sort

00:07:44,810 --> 00:07:50,180
of Android development or something like

00:07:45,979 --> 00:07:54,469
that so service stuff that's a current

00:07:50,180 --> 00:07:56,930
implementation of the sock jeaious so

00:07:54,469 --> 00:08:01,060
the one I'm gonna be using as a pyramid

00:07:56,930 --> 00:08:01,060
sub KS but you've got lots options there

00:08:01,629 --> 00:08:07,789
so suicide so what I want to talk about

00:08:05,870 --> 00:08:09,500
asynchronous IO and and what it means

00:08:07,789 --> 00:08:11,689
and to understand asynchronous IO you

00:08:09,500 --> 00:08:14,080
don't understand threads or threads is a

00:08:11,689 --> 00:08:16,610
way of doing multiple things at once

00:08:14,080 --> 00:08:18,409
they're kind of simple to understand you

00:08:16,610 --> 00:08:19,999
start a thread then you keep going as

00:08:18,409 --> 00:08:22,639
you did before you loop around

00:08:19,999 --> 00:08:24,319
eventually your thread ends the only

00:08:22,639 --> 00:08:26,509
thing you need to understand about is is

00:08:24,319 --> 00:08:29,300
locking and making sure you don't write

00:08:26,509 --> 00:08:32,539
to the same thing at the right time so

00:08:29,300 --> 00:08:36,260
what's wrong with threads or here's an

00:08:32,539 --> 00:08:43,329
example of a threaded server so yeah we

00:08:36,260 --> 00:08:43,329
this uh this is the simple one

00:08:48,960 --> 00:08:54,190
so the thread server so here's an

00:08:52,570 --> 00:08:57,600
example of a throat server what it does

00:08:54,190 --> 00:09:00,100
is it takes it accepts a TCP connection

00:08:57,600 --> 00:09:01,810
what have you type that turns does a

00:09:00,100 --> 00:09:03,310
connection in the background turns it

00:09:01,810 --> 00:09:12,250
into pirate speak and sends it back to

00:09:03,310 --> 00:09:14,200
you so this is where they kind of talk

00:09:12,250 --> 00:09:16,450
about efficiency and scalability and

00:09:14,200 --> 00:09:18,910
blah blah blah blah blah what they're

00:09:16,450 --> 00:09:20,380
really saying is that okay if you really

00:09:18,910 --> 00:09:22,150
wanted to accept lots and lots and lots

00:09:20,380 --> 00:09:24,279
of connections you do have a slight

00:09:22,150 --> 00:09:26,140
problem with threads no matter not just

00:09:24,279 --> 00:09:28,570
in Python but every time because the

00:09:26,140 --> 00:09:30,010
language or the is actually doing the

00:09:28,570 --> 00:09:31,390
context switching between the different

00:09:30,010 --> 00:09:33,100
threads and in order to do that that

00:09:31,390 --> 00:09:34,900
needs to kind of save the stack and put

00:09:33,100 --> 00:09:38,110
the stack back and stuff so you get this

00:09:34,900 --> 00:09:39,940
overhead of switching and essentially

00:09:38,110 --> 00:09:43,180
asynchronous i/o is a reaction to that

00:09:39,940 --> 00:09:45,100
which says well whip we know better we

00:09:43,180 --> 00:09:48,010
can do that in our application itself

00:09:45,100 --> 00:09:50,589
and don't have this cost of swapping

00:09:48,010 --> 00:09:52,690
midstream and this is a graph that kind

00:09:50,589 --> 00:09:55,930
of shows that so you start increasing

00:09:52,690 --> 00:09:58,690
the concurrent workers with something

00:09:55,930 --> 00:10:00,720
like gee event or or twisted and you get

00:09:58,690 --> 00:10:03,610
less overhead you can you can basically

00:10:00,720 --> 00:10:05,800
handle this is a measure of overhead so

00:10:03,610 --> 00:10:10,120
is you can read that and how they worked

00:10:05,800 --> 00:10:11,860
it out and there's a very famous kind of

00:10:10,120 --> 00:10:13,450
paper blog post all about the 10k

00:10:11,860 --> 00:10:15,580
problem which is how on earth do you

00:10:13,450 --> 00:10:18,490
handle 10,000 connections on a single

00:10:15,580 --> 00:10:26,500
machine and you can't with threads you

00:10:18,490 --> 00:10:28,709
need something like this so asynchronous

00:10:26,500 --> 00:10:31,990
i/o you're running in a single thread

00:10:28,709 --> 00:10:35,730
the language your your your application

00:10:31,990 --> 00:10:35,730
is deciding what to go next

00:10:36,060 --> 00:10:43,089
so it's it's not Pro in pre-emptive you

00:10:41,140 --> 00:10:46,570
don't have this switching context

00:10:43,089 --> 00:10:49,120
midstream but there's a there's a big

00:10:46,570 --> 00:10:50,860
heavy here you can't block so if you do

00:10:49,120 --> 00:10:52,810
something that writes to disk or you

00:10:50,860 --> 00:10:54,459
know just a timer then a little sleep or

00:10:52,810 --> 00:10:56,200
something like that everything else is

00:10:54,459 --> 00:10:56,790
gonna get starved you need some way of

00:10:56,200 --> 00:10:58,620
do

00:10:56,790 --> 00:11:00,900
cooperation between the different parts

00:10:58,620 --> 00:11:03,420
of your code and so anything that does I

00:11:00,900 --> 00:11:04,800
like you receive stuff you want to write

00:11:03,420 --> 00:11:06,540
stuff you want to do a database call

00:11:04,800 --> 00:11:08,700
anything like that that's the point

00:11:06,540 --> 00:11:15,030
where you need to hand stuff back over

00:11:08,700 --> 00:11:18,120
to the that the the the library G of n

00:11:15,030 --> 00:11:20,700
all twisted whatever to let it let

00:11:18,120 --> 00:11:22,740
something else have a go this means that

00:11:20,700 --> 00:11:25,500
you need new i/o libraries you need a

00:11:22,740 --> 00:11:28,320
special database adapter or a special

00:11:25,500 --> 00:11:30,240
you know file system call and this is

00:11:28,320 --> 00:11:31,800
where it all gets a little bit messy no

00:11:30,240 --> 00:11:33,870
J's doesn't kind of have this problem

00:11:31,800 --> 00:11:37,200
because they don't have threats so and

00:11:33,870 --> 00:11:38,340
they never did really so they can and

00:11:37,200 --> 00:11:40,140
they're built everything from scratch

00:11:38,340 --> 00:11:43,080
because it wasn't really much suicide

00:11:40,140 --> 00:11:45,150
JavaScript so they don't have a whole

00:11:43,080 --> 00:11:50,850
standard library worth of stuff like we

00:11:45,150 --> 00:11:52,590
do in Python so yep JavaScript you've

00:11:50,850 --> 00:11:54,000
got no GS there may be others but I

00:11:52,590 --> 00:11:55,680
don't know what they are so we've got

00:11:54,000 --> 00:11:57,900
lots and lots of choices I've bolded the

00:11:55,680 --> 00:11:58,290
ones that you're probably going to deal

00:11:57,900 --> 00:12:04,800
with

00:11:58,290 --> 00:12:06,930
I'll have heard about so one of the

00:12:04,800 --> 00:12:11,540
interesting things is how callbacks work

00:12:06,930 --> 00:12:11,540
it's kind of a style thing so if we

00:12:15,120 --> 00:12:22,529
if we have a look at say that saying the

00:12:21,389 --> 00:12:26,490
same one that I was talking about before

00:12:22,529 --> 00:12:29,910
so this is roughly what no would do

00:12:26,490 --> 00:12:33,209
right so it's a it's doing the same

00:12:29,910 --> 00:12:34,949
pirate thing and the really important

00:12:33,209 --> 00:12:37,439
bit here is you can see where it says

00:12:34,949 --> 00:12:39,870
get it's doing a get and then it's

00:12:37,439 --> 00:12:43,980
passing in a function which is what you

00:12:39,870 --> 00:12:45,899
do at the point after you've got it so

00:12:43,980 --> 00:12:48,329
it's using callbacks what they call

00:12:45,899 --> 00:12:49,800
boomerang code and this is how a lot of

00:12:48,329 --> 00:12:51,870
these things have to work you have to

00:12:49,800 --> 00:12:53,670
say I'm gonna hand it back but I'm gonna

00:12:51,870 --> 00:12:55,259
give you something to do when you

00:12:53,670 --> 00:12:56,730
actually get the data and then you're

00:12:55,259 --> 00:12:58,079
also on top of that I have to tell what

00:12:56,730 --> 00:12:59,879
to do if you can error because you can't

00:12:58,079 --> 00:13:02,040
just use try and accept anymore it's not

00:12:59,879 --> 00:13:03,809
the flow it's kind of going out of your

00:13:02,040 --> 00:13:08,279
application you're doing things in a

00:13:03,809 --> 00:13:09,899
different way a little not if you're

00:13:08,279 --> 00:13:10,949
used to JavaScript you kind of know that

00:13:09,899 --> 00:13:13,100
you have to do this stuff in the browser

00:13:10,949 --> 00:13:15,240
anyway because it's also single threaded

00:13:13,100 --> 00:13:18,420
but it's it's a very different way of

00:13:15,240 --> 00:13:23,689
working for Python people so if we have

00:13:18,420 --> 00:13:23,689
a look at the same thing in say twisted

00:13:25,429 --> 00:13:30,269
okay so here's a twisted way of doing it

00:13:28,499 --> 00:13:33,240
you can see what we've got here is we've

00:13:30,269 --> 00:13:38,670
got the callback and then we add the

00:13:33,240 --> 00:13:40,800
callback to this get page and that how I

00:13:38,670 --> 00:13:43,079
think that's right it kind of magically

00:13:40,800 --> 00:13:44,309
puts it together the problem with this

00:13:43,079 --> 00:13:45,779
is it's kind of a little bit

00:13:44,309 --> 00:13:49,050
counterintuitive you like you're writing

00:13:45,779 --> 00:13:50,939
your code before what you want to do and

00:13:49,050 --> 00:13:55,559
then you add it and then you execute it

00:13:50,939 --> 00:13:57,179
and part of that is because we don't

00:13:55,559 --> 00:13:59,160
have proper closures and Python we can't

00:13:57,179 --> 00:14:00,929
just sort of magically put the code

00:13:59,160 --> 00:14:06,179
afterwards by embedding the function in

00:14:00,929 --> 00:14:07,649
the call itself so you know if you did

00:14:06,179 --> 00:14:12,389
that you'd at least have it afterwards

00:14:07,649 --> 00:14:14,129
so you could read it going down there is

00:14:12,389 --> 00:14:15,990
a kind of inline way of doing it we're

00:14:14,129 --> 00:14:17,699
twisted it's not really recommended and

00:14:15,990 --> 00:14:21,509
it kind of does your head and more they

00:14:17,699 --> 00:14:24,379
use kind of weird yield statements so

00:14:21,509 --> 00:14:24,379
that does the same thing

00:14:25,200 --> 00:14:30,810
so Entergy event this is part of the

00:14:27,210 --> 00:14:36,090
reason I like G event is that you don't

00:14:30,810 --> 00:14:40,440
have any of these problems oh crap okay

00:14:36,090 --> 00:14:42,390
so G VIN this is where it really gets a

00:14:40,440 --> 00:14:43,620
minefield in terms of terms right so you

00:14:42,390 --> 00:14:46,080
got these things called Cobra teens

00:14:43,620 --> 00:14:48,300
co-routines is the idea that you're

00:14:46,080 --> 00:14:51,090
you're implementing multitasking as if

00:14:48,300 --> 00:14:55,200
it was threaded for instance but without

00:14:51,090 --> 00:14:56,790
actually having threads so you're you

00:14:55,200 --> 00:14:59,430
are allowing the application to switch

00:14:56,790 --> 00:15:00,570
switch between different contexts so you

00:14:59,430 --> 00:15:03,030
have these things called green lights or

00:15:00,570 --> 00:15:05,850
event lense which act like threads they

00:15:03,030 --> 00:15:07,530
have a thread API using my threads but

00:15:05,850 --> 00:15:09,540
they're not actually threads it's it's

00:15:07,530 --> 00:15:11,430
doing something tricky in the background

00:15:09,540 --> 00:15:13,440
you have an event loop and talked about

00:15:11,430 --> 00:15:15,450
before you have some of these things

00:15:13,440 --> 00:15:18,570
called a live event or these are things

00:15:15,450 --> 00:15:20,610
that the framework has to use to

00:15:18,570 --> 00:15:23,420
cooperate with the operating system to

00:15:20,610 --> 00:15:26,220
get the events of when IO is coming in

00:15:23,420 --> 00:15:29,460
then you may also come out something

00:15:26,220 --> 00:15:31,410
like gee unicorn and that actually lets

00:15:29,460 --> 00:15:34,140
you do synchronous threaded stuff and it

00:15:31,410 --> 00:15:36,810
lets you do asynchronous stuff and it's

00:15:34,140 --> 00:15:39,210
a nice kind of it handles multiple

00:15:36,810 --> 00:15:41,040
processes and stuff it's it's kind of

00:15:39,210 --> 00:15:44,730
container whiskey container for doing a

00:15:41,040 --> 00:15:46,050
lot of this stuff monkey patching is

00:15:44,730 --> 00:15:49,290
something that comes into G event so

00:15:46,050 --> 00:15:57,230
let's just have a quick look at how this

00:15:49,290 --> 00:16:01,770
monkey patching does works so here is

00:15:57,230 --> 00:16:03,180
the G event one it looks a lot like the

00:16:01,770 --> 00:16:05,580
threaded example this is the nice thing

00:16:03,180 --> 00:16:08,040
is that you just do it and you do it a

00:16:05,580 --> 00:16:09,330
URL fetch and then you do the next thing

00:16:08,040 --> 00:16:10,740
and then you do the next thing one line

00:16:09,330 --> 00:16:12,030
after another you don't have to change

00:16:10,740 --> 00:16:14,790
your way of thinking that much front

00:16:12,030 --> 00:16:17,370
threads but G events very low-level

00:16:14,790 --> 00:16:19,650
thing it doesn't go and give you all

00:16:17,370 --> 00:16:21,600
these new nice functions to use so you

00:16:19,650 --> 00:16:24,270
actually see in this example I've had to

00:16:21,600 --> 00:16:28,740
go an override and do a special G event

00:16:24,270 --> 00:16:30,750
URL fetch thing which to make that magic

00:16:28,740 --> 00:16:33,030
happen but event has this really really

00:16:30,750 --> 00:16:36,280
cool feature

00:16:33,030 --> 00:16:37,540
where they'll just because they've got

00:16:36,280 --> 00:16:39,280
all these api's that are pretty much

00:16:37,540 --> 00:16:42,870
like thread sockets

00:16:39,280 --> 00:16:45,700
you know URL Lib etc they do use this

00:16:42,870 --> 00:16:48,520
gon monkey patch and it will monkey

00:16:45,700 --> 00:16:50,050
patch most you standard library doing

00:16:48,520 --> 00:16:51,820
everything any citrus backgrounds all

00:16:50,050 --> 00:16:53,590
your sockets are now become G event

00:16:51,820 --> 00:16:56,290
sockets all your threads become G event

00:16:53,590 --> 00:16:59,290
threads so then I can write this exactly

00:16:56,290 --> 00:17:05,500
as I would have done as a threaded thing

00:16:59,290 --> 00:17:07,720
and it will work asynchronously it

00:17:05,500 --> 00:17:09,640
doesn't completely stop you not having

00:17:07,720 --> 00:17:11,230
to understand what's going like you

00:17:09,640 --> 00:17:13,990
still don't block in the middle of a

00:17:11,230 --> 00:17:15,550
thread because what depending how you

00:17:13,990 --> 00:17:17,740
bought you still have to be a little bit

00:17:15,550 --> 00:17:18,910
careful for instance I was playing

00:17:17,740 --> 00:17:21,490
around with funk load I wanted some

00:17:18,910 --> 00:17:22,959
better performance out of it and so I

00:17:21,490 --> 00:17:24,910
did the monkey patch all on it and it

00:17:22,959 --> 00:17:26,620
worked but it gave me different fun

00:17:24,910 --> 00:17:30,060
clothes load testing results which was

00:17:26,620 --> 00:17:30,060
kind of interesting I'd like to know why

00:17:33,450 --> 00:17:45,010
okay so tornado I did try it it's kind

00:17:40,690 --> 00:17:50,170
of this own little world it's it kind of

00:17:45,010 --> 00:17:51,670
a framework and a server m1 so whiskey's

00:17:50,170 --> 00:17:53,980
kind of a second-class citizen there

00:17:51,670 --> 00:17:55,750
it's sort of off to the side it doesn't

00:17:53,980 --> 00:17:57,100
kind of it does support it you can put

00:17:55,750 --> 00:18:00,700
your whisky up and you're paranoid or

00:17:57,100 --> 00:18:02,590
whatever it is in there the one of the

00:18:00,700 --> 00:18:03,640
things I just didn't work for me and

00:18:02,590 --> 00:18:05,980
they may have fixed it is that I

00:18:03,640 --> 00:18:08,110
couldn't run my my socket IO or my

00:18:05,980 --> 00:18:13,240
WebSockets on the same port as I serving

00:18:08,110 --> 00:18:15,790
the HTML from so I couldn't which kind

00:18:13,240 --> 00:18:20,890
of ruined the niceness of the

00:18:15,790 --> 00:18:23,230
application for me okay

00:18:20,890 --> 00:18:26,680
so how do I build this particular I was

00:18:23,230 --> 00:18:27,940
using pyramid kawaii pyramid it's a it's

00:18:26,680 --> 00:18:31,000
kind of like a micro framework and that

00:18:27,940 --> 00:18:32,890
you can build it on one page but it's

00:18:31,000 --> 00:18:34,450
got a bunch of stuff this kind of makes

00:18:32,890 --> 00:18:36,820
things explicit that's kind of built to

00:18:34,450 --> 00:18:38,680
help you really grow your application so

00:18:36,820 --> 00:18:40,210
you can override things later it's it's

00:18:38,680 --> 00:18:41,440
not going to kind of be a dead end where

00:18:40,210 --> 00:18:42,980
you really want to build something

00:18:41,440 --> 00:18:46,160
that's reusable

00:18:42,980 --> 00:18:50,330
it will help you along the way I use

00:18:46,160 --> 00:18:53,000
parameter KS and I used Google Maps and

00:18:50,330 --> 00:18:59,270
a whole bunch of other stuff in the

00:18:53,000 --> 00:19:01,480
JavaScript thing so let's have a look at

00:18:59,270 --> 00:19:01,480
that

00:19:03,250 --> 00:19:13,320
so so right the bottom we can do a

00:19:10,570 --> 00:19:16,000
little in-place server status over

00:19:13,320 --> 00:19:19,539
straightaway we've got a little whiskey

00:19:16,000 --> 00:19:23,260
thing here which creates this the

00:19:19,539 --> 00:19:25,450
whiskey app here we've got a pyramid has

00:19:23,260 --> 00:19:27,730
this configuration stuff so I define

00:19:25,450 --> 00:19:29,620
where my my JavaScript is going to come

00:19:27,730 --> 00:19:32,280
from and and you've got the special

00:19:29,620 --> 00:19:36,190
thing that comes out of this include

00:19:32,280 --> 00:19:42,820
pyramids obvious and it adds a subjects

00:19:36,190 --> 00:19:44,620
route and I'm at the session to a class

00:19:42,820 --> 00:19:49,230
so this is going to build me a class

00:19:44,620 --> 00:19:54,100
every time a such a connection is made

00:19:49,230 --> 00:19:55,929
so if we come up here oh yeah

00:19:54,100 --> 00:19:59,440
it was really simple before and then I

00:19:55,929 --> 00:20:00,940
started adding bits and pieces and so

00:19:59,440 --> 00:20:05,850
here's my model here's my data model

00:20:00,940 --> 00:20:08,230
I've got people and it's a set that's it

00:20:05,850 --> 00:20:10,450
anyone looking at this will realize

00:20:08,230 --> 00:20:12,100
there's a is a big problem here I don't

00:20:10,450 --> 00:20:13,900
actually have any sort of distributed

00:20:12,100 --> 00:20:15,460
model that sits in memory I can only run

00:20:13,900 --> 00:20:16,870
this on one thread otherwise I will have

00:20:15,460 --> 00:20:20,440
different sets of people depending on

00:20:16,870 --> 00:20:22,240
which process you connect to pretty easy

00:20:20,440 --> 00:20:25,030
to sense sold with something like reduce

00:20:22,240 --> 00:20:28,150
or something like that so my map session

00:20:25,030 --> 00:20:32,860
gets created thence I get an on open

00:20:28,150 --> 00:20:36,190
event so I said a little UID so that

00:20:32,860 --> 00:20:38,830
when I send it moves out we know who's

00:20:36,190 --> 00:20:43,179
who I add it to my my data model there

00:20:38,830 --> 00:20:45,970
and then I send all the locations of

00:20:43,179 --> 00:20:49,240
everyone I currently know about send all

00:20:45,970 --> 00:20:52,210
goes through all the people sends out

00:20:49,240 --> 00:20:54,840
and does this so this is all Jason dumb

00:20:52,210 --> 00:21:00,909
thing you don't have to do a socket IO

00:20:54,840 --> 00:21:03,490
but for web sockets and soft jsut do and

00:21:00,909 --> 00:21:05,980
we've got this on message here so I

00:21:03,490 --> 00:21:09,909
extract out the latitude longitude and

00:21:05,980 --> 00:21:13,809
the direction out of out of the request

00:21:09,909 --> 00:21:16,050
coming through I put that as the last

00:21:13,809 --> 00:21:18,720
location so I can do that send all

00:21:16,050 --> 00:21:25,860
and then I broadcast it to everybody and

00:21:18,720 --> 00:21:27,990
that's it that's pretty simple sir

00:21:25,860 --> 00:21:30,260
that's for anything I had I also have to

00:21:27,990 --> 00:21:30,260
talk about

00:21:33,950 --> 00:21:36,640
that's it

00:21:37,040 --> 00:21:40,120
any questions

00:21:43,310 --> 00:21:53,110
thanks very much can we have a random

00:21:46,940 --> 00:21:53,110
pulse it's getting late in the day

00:21:53,150 --> 00:21:56,840
was there any questions that people had

00:21:55,340 --> 00:22:06,410
want to ask

00:21:56,840 --> 00:22:08,300
I want a general comment a question

00:22:06,410 --> 00:22:09,800
about asynchronous programming one

00:22:08,300 --> 00:22:12,890
criticism is that because it's single

00:22:09,800 --> 00:22:18,410
threaded it cannot typically by default

00:22:12,890 --> 00:22:22,280
to make use of multi-core CPUs can use

00:22:18,410 --> 00:22:25,310
speak to our grounds for that problem

00:22:22,280 --> 00:22:28,460
well essentially you've got to design

00:22:25,310 --> 00:22:30,620
your application to have some kind of

00:22:28,460 --> 00:22:31,880
like that I didn't I probably should

00:22:30,620 --> 00:22:33,200
have increased that one and made it work

00:22:31,880 --> 00:22:34,970
on multiple cores so you could use

00:22:33,200 --> 00:22:36,320
something like reduce or memcache D or

00:22:34,970 --> 00:22:39,590
some kind of central store in the

00:22:36,320 --> 00:22:42,560
background that then sends connections

00:22:39,590 --> 00:22:44,510
between your different worker threads so

00:22:42,560 --> 00:22:47,780
readers has this nice pub/sub kind of

00:22:44,510 --> 00:22:49,880
thing where you can you know essentially

00:22:47,780 --> 00:22:52,100
set up a same sort of listener and thing

00:22:49,880 --> 00:22:53,510
and so I could send a message that and

00:22:52,100 --> 00:22:55,070
then would broadcast at all my other

00:22:53,510 --> 00:22:56,930
workers then they would send it out to

00:22:55,070 --> 00:23:00,170
all the different WebSocket connections

00:22:56,930 --> 00:23:03,410
so that's essentially how you'd solve it

00:23:00,170 --> 00:23:06,800
okay I mean I have years pythons built

00:23:03,410 --> 00:23:08,780
in queue my job as well yes in process

00:23:06,800 --> 00:23:09,980
so anything that you know would queue it

00:23:08,780 --> 00:23:12,680
and let it go to all the different

00:23:09,980 --> 00:23:14,180
processes on the same machine or

00:23:12,680 --> 00:23:17,060
multiple machines is kind of what you

00:23:14,180 --> 00:23:18,440
want you want to publish and have a

00:23:17,060 --> 00:23:20,360
whole bunch of subscribers they all get

00:23:18,440 --> 00:23:25,190
it and then they send it back out at the

00:23:20,360 --> 00:23:28,150
other end to all the clients anybody

00:23:25,190 --> 00:23:28,150
else okay

00:23:34,990 --> 00:23:40,190
so as a bit confused about because why

00:23:38,120 --> 00:23:41,900
because JavaScript makes you do

00:23:40,190 --> 00:23:43,460
asynchronous programming on the client

00:23:41,900 --> 00:23:47,660
why that force you to do anything

00:23:43,460 --> 00:23:49,990
earnest programming on the server it it

00:23:47,660 --> 00:23:52,790
doesn't force you to do it

00:23:49,990 --> 00:23:55,190
nothing forces you to do it I there's

00:23:52,790 --> 00:23:58,300
probably threads in JavaScript on the

00:23:55,190 --> 00:24:02,990
server now I'm not sure but I think

00:23:58,300 --> 00:24:04,790
sorry in Python on the server also why

00:24:02,990 --> 00:24:06,230
do it in synchronous uh well you don't

00:24:04,790 --> 00:24:07,640
that's the thing I mean if you if you go

00:24:06,230 --> 00:24:08,930
back and look at that graph right one of

00:24:07,640 --> 00:24:10,490
the really interesting things is for

00:24:08,930 --> 00:24:12,160
small amounts of connections threads is

00:24:10,490 --> 00:24:14,870
actually more efficient than say G event

00:24:12,160 --> 00:24:16,820
and this is one of the kind of fallacies

00:24:14,870 --> 00:24:18,440
is right you don't have to use a

00:24:16,820 --> 00:24:22,700
synchronous on the server you can use

00:24:18,440 --> 00:24:24,020
threads it is just about you know in its

00:24:22,700 --> 00:24:26,840
own.you problem you have when you want

00:24:24,020 --> 00:24:30,380
10,000 connections so there's no reason

00:24:26,840 --> 00:24:35,600
to do any synchronous on the server but

00:24:30,380 --> 00:24:36,050
you know you might as well because it's

00:24:35,600 --> 00:24:38,770
fun

00:24:36,050 --> 00:24:38,770
cuz it's bunk

00:24:41,590 --> 00:24:45,980
um have you had the experience mixing

00:24:44,390 --> 00:24:47,779
the two together like asynchronous and

00:24:45,980 --> 00:24:50,419
synchronous like if you've got a web app

00:24:47,779 --> 00:24:52,490
that's mostly you know just you know you

00:24:50,419 --> 00:24:53,360
want to do a friended yeah but then

00:24:52,490 --> 00:24:54,950
you're going to have some kind of

00:24:53,360 --> 00:24:56,510
listening thing or something that does

00:24:54,950 --> 00:24:59,179
the asynchronous you know so you can get

00:24:56,510 --> 00:25:01,250
notifications and stuff is the disease

00:24:59,179 --> 00:25:03,080
fingers talk like nicely to each other I

00:25:01,250 --> 00:25:05,120
can just import a Django will warm and

00:25:03,080 --> 00:25:08,510
then well assess your data and stuff

00:25:05,120 --> 00:25:10,340
yeah I mean one thing I forgot to tell

00:25:08,510 --> 00:25:12,350
you is the GU lock one stuff so this

00:25:10,340 --> 00:25:15,409
this bit here is actually I paste the

00:25:12,350 --> 00:25:16,549
thing this is how I'd run this when I

00:25:15,409 --> 00:25:19,270
deployed it to the server I actually

00:25:16,549 --> 00:25:22,730
used G unicorn instead of that thing and

00:25:19,270 --> 00:25:26,750
so I've got a little worker there which

00:25:22,730 --> 00:25:27,980
is the unicorn mane and one of the

00:25:26,750 --> 00:25:29,510
things really nice things about G

00:25:27,980 --> 00:25:31,100
unicorn is you can have sets of

00:25:29,510 --> 00:25:33,260
different kinds of workers so you can

00:25:31,100 --> 00:25:34,340
have synchronous workers and they you

00:25:33,260 --> 00:25:35,840
know and then you don't have to change

00:25:34,340 --> 00:25:37,100
your application worried the i/o but in

00:25:35,840 --> 00:25:38,870
the background they don't want the

00:25:37,100 --> 00:25:40,490
synchronous stuff and then you have

00:25:38,870 --> 00:25:42,890
asynchronous workers so you can kind of

00:25:40,490 --> 00:25:46,429
mix and match which is which is quite

00:25:42,890 --> 00:25:49,370
nice the other option is that you know

00:25:46,429 --> 00:25:51,620
this app was serving all the HTML and

00:25:49,370 --> 00:25:55,190
JavaScript and everything using an old

00:25:51,620 --> 00:25:56,779
whiskey pyramid without you know because

00:25:55,190 --> 00:25:58,279
I wasn't doing any database connections

00:25:56,779 --> 00:26:00,799
I didn't really have to worry about that

00:25:58,279 --> 00:26:03,409
and it was all doing it by OD event and

00:26:00,799 --> 00:26:05,720
nothing needed to change so you can just

00:26:03,409 --> 00:26:07,429
you know serve as long as you're careful

00:26:05,720 --> 00:26:09,020
about how your application is built you

00:26:07,429 --> 00:26:11,059
can actually get some efficiencies and

00:26:09,020 --> 00:26:18,940
run things in G event or twisted without

00:26:11,059 --> 00:26:18,940
changing it too much any other questions

00:26:20,620 --> 00:26:24,679
do you know if g event does is nucleus

00:26:22,880 --> 00:26:28,669
file system operations as well or is

00:26:24,679 --> 00:26:31,130
there any network yeah I believe the

00:26:28,669 --> 00:26:33,200
latest version I think has what are

00:26:31,130 --> 00:26:35,330
there that there's there's various

00:26:33,200 --> 00:26:37,850
plugins for G event rather than just the

00:26:35,330 --> 00:26:39,500
core as well and one of the things I

00:26:37,850 --> 00:26:41,750
added in the last version was sub

00:26:39,500 --> 00:26:47,000
process support and I think there was

00:26:41,750 --> 00:26:49,250
talk of like file rights and stuff so I

00:26:47,000 --> 00:26:50,630
guess it's not a problem it depends

00:26:49,250 --> 00:26:51,590
you've got to do a really big file right

00:26:50,630 --> 00:26:54,080
I suppose

00:26:51,590 --> 00:26:55,640
if you want to take advantage of that so

00:26:54,080 --> 00:26:59,809
I think this it's kind of under way I

00:26:55,640 --> 00:27:16,720
don't think it's in the current 1.0

00:26:59,809 --> 00:27:16,720

YouTube URL: https://www.youtube.com/watch?v=Y6ky9fgUCiE


