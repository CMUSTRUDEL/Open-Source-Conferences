Title: Building a Cloud Service with Python
Publication date: 2012-08-23
Playlist: PyCon Australia 2012
Description: 
	John Barham
Presentation will go in-depth on the architecture of a web application service built on Amazon Web Services (AWS) cloud infrastructure, including:

 - developing a responsive, high-performance web application in Django
 - implementing
Captions: 
	00:00:00,060 --> 00:00:16,199
yeah thank you very much thank you all

00:00:08,460 --> 00:00:18,810
for coming I'm still getting Ella but I

00:00:16,199 --> 00:00:19,800
called as a Canadian I'm Canadian I'm

00:00:18,810 --> 00:00:25,920
still getting used to the harsh

00:00:19,800 --> 00:00:27,240
Melbourne winters that's a joke but they

00:00:25,920 --> 00:00:29,480
really aren't that bad although we do

00:00:27,240 --> 00:00:32,189
have better central heating in Canada

00:00:29,480 --> 00:00:32,880
yeah so developing cloud service in the

00:00:32,189 --> 00:00:34,800
cloud

00:00:32,880 --> 00:00:38,010
a lot of buzzword bingo there but you

00:00:34,800 --> 00:00:39,450
know this is the age we live in at the

00:00:38,010 --> 00:00:44,610
finer Vasuki unless it's a small

00:00:39,450 --> 00:00:46,829
start-up basically DNS hosting you know

00:00:44,610 --> 00:00:50,640
check it out there's a house - mate -

00:00:46,829 --> 00:00:53,340
domains for free and a 30-day free trial

00:00:50,640 --> 00:00:55,530
so check it out tell your friends so if

00:00:53,340 --> 00:00:57,530
this is a two part talk the first part

00:00:55,530 --> 00:01:00,420
par 1 the cloud computing revolution I

00:00:57,530 --> 00:01:03,930
really think that is so Nova used word

00:01:00,420 --> 00:01:05,189
but I think it's appropriate or if you

00:01:03,930 --> 00:01:08,520
went to this morning's talk my didn't

00:01:05,189 --> 00:01:10,500
call it a paradigm shift part 2 tips and

00:01:08,520 --> 00:01:12,030
tricks for developing a cloud service in

00:01:10,500 --> 00:01:15,030
Python in particular with Amazon Web

00:01:12,030 --> 00:01:17,340
Services it's the first to be somewhat

00:01:15,030 --> 00:01:20,250
abstract more from the business economic

00:01:17,340 --> 00:01:21,810
point of view the second will be again a

00:01:20,250 --> 00:01:25,409
bit of a grab bag

00:01:21,810 --> 00:01:27,060
better code mostly just tricks I've

00:01:25,409 --> 00:01:28,619
learned developing silliness in

00:01:27,060 --> 00:01:33,780
particular but other web applications as

00:01:28,619 --> 00:01:35,549
well going back far away so there's a

00:01:33,780 --> 00:01:37,320
lot of internal Italian cover fairly

00:01:35,549 --> 00:01:39,329
quickly but there'll be terribly

00:01:37,320 --> 00:01:41,340
questions at the end otherwise on the

00:01:39,329 --> 00:01:44,070
round you know today and tomorrow so

00:01:41,340 --> 00:01:49,020
feel free to come up and say hello and

00:01:44,070 --> 00:01:51,869
and ask me anything anything you want

00:01:49,020 --> 00:01:53,310
okay let's get going shall we oh yeah

00:01:51,869 --> 00:01:56,070
some pythons be my language of choice

00:01:53,310 --> 00:01:58,340
for the last 10 years I developed quite

00:01:56,070 --> 00:02:00,990
a few things in it web applications

00:01:58,340 --> 00:02:02,369
starting the soap where I go in its

00:02:00,990 --> 00:02:04,560
dating me

00:02:02,369 --> 00:02:07,079
developers distributed file system for

00:02:04,560 --> 00:02:08,910
movie restorations in California for a

00:02:07,079 --> 00:02:12,150
company called Lowrey digital that

00:02:08,910 --> 00:02:16,390
developed or restored

00:02:12,150 --> 00:02:17,890
probably I think now even hundreds at

00:02:16,390 --> 00:02:20,170
the time dozens of classic Vivien's a

00:02:17,890 --> 00:02:25,150
clearly most of Disney's back catalogue

00:02:20,170 --> 00:02:28,480
so Jungle Book lady in the think

00:02:25,150 --> 00:02:31,180
of our code names or was that snake lady

00:02:28,480 --> 00:02:32,950
anyway then I worked for a company that

00:02:31,180 --> 00:02:35,130
called exia that doesn't network testing

00:02:32,950 --> 00:02:37,620
simulation I think they have some

00:02:35,130 --> 00:02:39,640
basically four big switches you know so

00:02:37,620 --> 00:02:42,220
company like Cisco Mesa claim that

00:02:39,640 --> 00:02:44,140
they're switch can handle so many

00:02:42,220 --> 00:02:45,730
hundred thousand simultaneous users and

00:02:44,140 --> 00:02:50,140
how do they test that they come to

00:02:45,730 --> 00:02:51,519
companies like X here and then most

00:02:50,140 --> 00:02:54,130
recently it stays up into the end of

00:02:51,519 --> 00:02:56,680
2010 I worked with pemko which is an

00:02:54,130 --> 00:02:58,780
investment management firm developing a

00:02:56,680 --> 00:03:02,350
grid compute some for their managed for

00:02:58,780 --> 00:03:03,580
their investment management modeling so

00:03:02,350 --> 00:03:07,900
that's why is that the previous talk

00:03:03,580 --> 00:03:11,200
about numpy because a lot of coins like

00:03:07,900 --> 00:03:12,280
using the UM PI although I have

00:03:11,200 --> 00:03:13,959
different opinions and perhaps the

00:03:12,280 --> 00:03:16,810
village day of their immortals but

00:03:13,959 --> 00:03:19,920
that's a separate issue so way back when

00:03:16,810 --> 00:03:23,530
I started off in COBOL that paid my

00:03:19,920 --> 00:03:26,470
student loans off and then I left

00:03:23,530 --> 00:03:29,739
COBOL off my resume I've also done some

00:03:26,470 --> 00:03:30,940
C++ C sharp particular JavaScript the

00:03:29,739 --> 00:03:32,140
most recently I've also started playing

00:03:30,940 --> 00:03:34,980
it go which is a very interesting

00:03:32,140 --> 00:03:38,470
language I'm also happy to talk about

00:03:34,980 --> 00:03:42,700
constantly at Ixia I worked with Python

00:03:38,470 --> 00:03:46,690
and tickle C++ C sharp in the same

00:03:42,700 --> 00:03:48,070
process it's fun to debug and someone

00:03:46,690 --> 00:03:51,820
there that was also an in process

00:03:48,070 --> 00:03:53,590
corporate server that was a very

00:03:51,820 --> 00:03:57,730
interesting program to work on ok cloud

00:03:53,590 --> 00:03:59,170
computing as a revolution so to give you

00:03:57,730 --> 00:04:02,019
some context tom is exactly ten years

00:03:59,170 --> 00:04:03,400
ago in Vancouver Canada I set up as up

00:04:02,019 --> 00:04:07,739
hosting business called Lane Street labs

00:04:03,400 --> 00:04:10,480
it's now running under the name topia

00:04:07,739 --> 00:04:12,760
there's what I costs I start the

00:04:10,480 --> 00:04:14,829
invoices so I looked them up at one

00:04:12,760 --> 00:04:18,940
point one three gigahertz Pentium 3

00:04:14,829 --> 00:04:21,070
256 major Ram three high drives for a

00:04:18,940 --> 00:04:23,260
raid six configure configuration costs

00:04:21,070 --> 00:04:23,840
me almost 20 and hundred dollars up

00:04:23,260 --> 00:04:27,200
front

00:04:23,840 --> 00:04:30,200
the collocation hosting with tier 1 tier

00:04:27,200 --> 00:04:32,120
3 $250 a month for 10 gigabytes of

00:04:30,200 --> 00:04:33,250
bandwidth security I am NOT a very good

00:04:32,120 --> 00:04:38,200
negotiator

00:04:33,250 --> 00:04:42,230
if I was paying even then $25 per gig

00:04:38,200 --> 00:04:44,120
bandwidth okay so that's just 10 years

00:04:42,230 --> 00:04:45,860
ago I mean granted hardware is a lot

00:04:44,120 --> 00:04:48,139
cheaper but all the same those are store

00:04:45,860 --> 00:04:51,410
friendly hefty numbers

00:04:48,139 --> 00:04:53,510
today's costs servers basically started

00:04:51,410 --> 00:04:55,760
around $15 a month from mainstream cloud

00:04:53,510 --> 00:04:58,400
computing providers which is to say

00:04:55,760 --> 00:05:01,400
Hanna's on Rackspace Linode a nine-fold

00:04:58,400 --> 00:05:04,820
here in Australia I check their websites

00:05:01,400 --> 00:05:06,710
run $15 the contacts to me that's one

00:05:04,820 --> 00:05:08,030
hour at Australian minimum wage right so

00:05:06,710 --> 00:05:09,980
for one hour at minimum wage in

00:05:08,030 --> 00:05:11,630
Australia you can write your own

00:05:09,980 --> 00:05:12,970
personal server in the cloud for an

00:05:11,630 --> 00:05:15,080
entire month

00:05:12,970 --> 00:05:16,930
right it's only going to get cheaper

00:05:15,080 --> 00:05:20,150
which is pretty phenomenal

00:05:16,930 --> 00:05:23,330
bandwidth Amazon incoming bandwidth is

00:05:20,150 --> 00:05:27,410
free outgoing bandwidth is around 12

00:05:23,330 --> 00:05:30,080
cents a gigabyte a Leonard with a $20 a

00:05:27,410 --> 00:05:33,800
month server they throw in 200 gigabytes

00:05:30,080 --> 00:05:36,710
phrase you know I serve a lot of DNS

00:05:33,800 --> 00:05:39,260
queries but I don't even worry about my

00:05:36,710 --> 00:05:42,500
cap you know it's for me it's it's free

00:05:39,260 --> 00:05:49,610
so again that's 200 to 250 times cheaper

00:05:42,500 --> 00:05:52,760
than my costs were in 2002 so that's I

00:05:49,610 --> 00:05:54,380
guess define cloud computing have been

00:05:52,760 --> 00:05:56,660
nebulous but I suppose we have different

00:05:54,380 --> 00:05:58,070
layers so start there physical layer

00:05:56,660 --> 00:06:00,350
that's essentially arranging virtual

00:05:58,070 --> 00:06:03,229
servers or the acronym some ugly is

00:06:00,350 --> 00:06:05,900
infrastructure as a service so the big

00:06:03,229 --> 00:06:08,750
cares we Amazon ec2 which stands for

00:06:05,900 --> 00:06:10,460
electric compute cloud Linode see

00:06:08,750 --> 00:06:13,210
Rackspace nine-fold here in Australia

00:06:10,460 --> 00:06:16,780
like Google compute engine it's in beta

00:06:13,210 --> 00:06:20,030
anyone get an invitation I tried but I

00:06:16,780 --> 00:06:21,530
didn't get in in a way so giggle compute

00:06:20,030 --> 00:06:24,500
engines is essentially comparable to I

00:06:21,530 --> 00:06:27,820
was on ec2 I also managed development

00:06:24,500 --> 00:06:30,919
platforms without platform as a service

00:06:27,820 --> 00:06:33,070
Heroku I think they're presenting here

00:06:30,919 --> 00:06:37,600
they're certainly sponsor

00:06:33,070 --> 00:06:40,750
a condor dot io that's a thing

00:06:37,600 --> 00:06:41,350
jangle specific platform hosting

00:06:40,750 --> 00:06:44,910
platform

00:06:41,350 --> 00:06:46,780
there's also Google App Engine which

00:06:44,910 --> 00:06:51,910
obviously developed by Google that's

00:06:46,780 --> 00:06:54,250
basically the original language that a

00:06:51,910 --> 00:06:56,110
PEZ was released for was Python and

00:06:54,250 --> 00:07:00,070
since then they've added Java and worsen

00:06:56,110 --> 00:07:02,860
in the added go so basically is I like

00:07:00,070 --> 00:07:04,270
to think of developing platforms is

00:07:02,860 --> 00:07:06,580
basically you cannot be the system

00:07:04,270 --> 00:07:09,010
administrator right in other words all

00:07:06,580 --> 00:07:12,010
you do is upload your code and they they

00:07:09,010 --> 00:07:13,930
manage the running of the application

00:07:12,010 --> 00:07:15,910
and they completely are they are

00:07:13,930 --> 00:07:18,670
responsible for the uptime of the

00:07:15,910 --> 00:07:21,280
service you cannot associate into into

00:07:18,670 --> 00:07:26,380
their service but if you can of

00:07:21,280 --> 00:07:28,960
something is wrong okay so basically

00:07:26,380 --> 00:07:32,290
with you know platform like Heroku app

00:07:28,960 --> 00:07:33,880
engine they are the system

00:07:32,290 --> 00:07:35,950
administrators whereas with the platform

00:07:33,880 --> 00:07:39,070
like Amazon ec2 or Leno at a Rackspace

00:07:35,950 --> 00:07:41,560
someone else to install the software in

00:07:39,070 --> 00:07:42,730
my case it's me in the bigger operation

00:07:41,560 --> 00:07:44,440
he might have dedicated system

00:07:42,730 --> 00:07:45,760
administrators but point is the

00:07:44,440 --> 00:07:48,490
responsibility for maintaining the

00:07:45,760 --> 00:07:50,410
uptime of that services is placed on you

00:07:48,490 --> 00:07:53,890
whereas with a platform like go indoors

00:07:50,410 --> 00:07:56,050
or Heroku it sits on them which becomes

00:07:53,890 --> 00:07:59,860
abundant whatever Amazon ec2 goes down

00:07:56,050 --> 00:08:03,310
it takes down Heroku or other comparable

00:07:59,860 --> 00:08:07,140
providers so that's the risk I'd only

00:08:03,310 --> 00:08:10,390
had pure software as a service for SaaS

00:08:07,140 --> 00:08:12,100
Salesforce calm probably not aimed

00:08:10,390 --> 00:08:16,180
towards the developers so much as say

00:08:12,100 --> 00:08:19,870
I'm not sales folks would be the

00:08:16,180 --> 00:08:22,750
original big ticket pure software

00:08:19,870 --> 00:08:24,700
service play it's also google apps I

00:08:22,750 --> 00:08:28,570
mean this presentation itself is a

00:08:24,700 --> 00:08:29,980
google apps presentation then you have

00:08:28,570 --> 00:08:32,469
Houston providers at bitbucket

00:08:29,980 --> 00:08:38,080
which I personally use in like and

00:08:32,469 --> 00:08:42,760
github 237 things base cap I'd say it's

00:08:38,080 --> 00:08:44,770
project management pack web service so

00:08:42,760 --> 00:08:46,270
that you can use to coordinate work so I

00:08:44,770 --> 00:08:47,650
used a quite extensively for

00:08:46,270 --> 00:08:50,170
with my graphic designer for a strict

00:08:47,650 --> 00:08:51,340
DNS so he would upload screenshots and

00:08:50,170 --> 00:08:53,560
I'd say you know I like this for that

00:08:51,340 --> 00:08:54,670
and can you play please change this so

00:08:53,560 --> 00:08:58,660
it works very well and then of course

00:08:54,670 --> 00:09:01,600
strict DNS itself it's providing DNS as

00:08:58,660 --> 00:09:03,540
a service so you do not have to worry

00:09:01,600 --> 00:09:07,570
about installing DNS servers and

00:09:03,540 --> 00:09:10,270
maintaining them and so on it's a quick

00:09:07,570 --> 00:09:13,660
and dirty definition predictions are

00:09:10,270 --> 00:09:16,120
hard so 2002 let's suppose someone that

00:09:13,660 --> 00:09:17,290
posed this question in ten years who

00:09:16,120 --> 00:09:19,330
will be the world's single biggest

00:09:17,290 --> 00:09:20,980
computing infrastructure provider right

00:09:19,330 --> 00:09:27,490
so the obvious answers at the time would

00:09:20,980 --> 00:09:29,620
have been IBM HP his son del EDS the

00:09:27,490 --> 00:09:33,280
answer of course is Amazon right

00:09:29,620 --> 00:09:34,810
I never joiners Amazon but they're just

00:09:33,280 --> 00:09:36,460
a retailer all they do is sell books

00:09:34,810 --> 00:09:39,310
DVDs spongebob underpants

00:09:36,460 --> 00:09:41,230
they really do attitude that they don't

00:09:39,310 --> 00:09:45,010
even make computers that's not fair

00:09:41,230 --> 00:09:46,750
right my Nana's on does not make mall I

00:09:45,010 --> 00:09:49,150
don't need to turn it and it might they

00:09:46,750 --> 00:09:50,500
might now make computers but think about

00:09:49,150 --> 00:09:52,060
that right they're all single biggest

00:09:50,500 --> 00:09:54,250
computing infrastructure provider does

00:09:52,060 --> 00:09:59,440
not make their own computers branded

00:09:54,250 --> 00:10:01,870
computers it was an NDB last month we've

00:09:59,440 --> 00:10:04,960
seen it with Jonathan Schwartz the last

00:10:01,870 --> 00:10:08,590
CEO of Sun before it was subsumed into

00:10:04,960 --> 00:10:09,970
Oracle very interesting quote so you

00:10:08,590 --> 00:10:11,560
have IBM and HP and a whole bunch of

00:10:09,970 --> 00:10:12,940
other companies saying oh wow let's hang

00:10:11,560 --> 00:10:15,250
out with Morgan Stanley that's the US

00:10:12,940 --> 00:10:17,470
investment bank and sell them a

00:10:15,250 --> 00:10:18,790
computing cloud wrong answer now we have

00:10:17,470 --> 00:10:20,820
nine months of a procurement process

00:10:18,790 --> 00:10:23,050
three months for the security department

00:10:20,820 --> 00:10:24,670
four months with the IT group that's in

00:10:23,050 --> 00:10:26,910
charge of making the decision and Amazon

00:10:24,670 --> 00:10:30,670
just got another 200,000 customers

00:10:26,910 --> 00:10:34,060
that's a very I wouldn't say that's an

00:10:30,670 --> 00:10:35,320
exaggeration you know that is actually

00:10:34,060 --> 00:10:38,130
what has happened because some of these

00:10:35,320 --> 00:10:41,080
other companies in reaction to Amazon's

00:10:38,130 --> 00:10:43,960
dominance of the industry have tried to

00:10:41,080 --> 00:10:45,340
come up with their own platforms and I

00:10:43,960 --> 00:10:47,050
remember one I want in the name because

00:10:45,340 --> 00:10:48,880
I can't remember and it embarrass them

00:10:47,050 --> 00:10:52,510
anyway but so I went to their cloud

00:10:48,880 --> 00:10:54,430
computing web page and I wanted to know

00:10:52,510 --> 00:10:57,010
how much this cost where do I sign up so

00:10:54,430 --> 00:10:58,510
you click on the link and you know it

00:10:57,010 --> 00:10:59,290
said call us so I clicked the call us

00:10:58,510 --> 00:11:03,579
link it wasn't

00:10:59,290 --> 00:11:05,320
well for you know just oh that's it's

00:11:03,579 --> 00:11:08,050
our official launch page you know so

00:11:05,320 --> 00:11:11,800
it's like no I know they were struggling

00:11:08,050 --> 00:11:14,410
to keep up that all right so obviously

00:11:11,800 --> 00:11:16,750
Jonathan Schwartz realizes that son to

00:11:14,410 --> 00:11:22,509
made the same mistake which probably

00:11:16,750 --> 00:11:24,730
explains why son is no longer around so

00:11:22,509 --> 00:11:26,230
again the reason for why company like

00:11:24,730 --> 00:11:28,720
Amazon could dominate the space because

00:11:26,230 --> 00:11:31,779
data for data center infrastructure is

00:11:28,720 --> 00:11:35,319
commodity all the chips through amd64

00:11:31,779 --> 00:11:39,190
you know 64-bit Intel operating system

00:11:35,319 --> 00:11:41,860
Lennox even the virtualized operating

00:11:39,190 --> 00:11:46,899
system typically is open source nowhere

00:11:41,860 --> 00:11:49,449
that's then I think that's what Amazon

00:11:46,899 --> 00:11:51,250
uses under the hood even the networking

00:11:49,449 --> 00:11:53,980
gear is increasingly white label you

00:11:51,250 --> 00:11:55,839
know so they want certainly Google and I

00:11:53,980 --> 00:11:59,079
was a good one certainly Amazon probably

00:11:55,839 --> 00:12:01,180
do not buy name brand of switches that

00:11:59,079 --> 00:12:04,000
Google certainly designs of in-house and

00:12:01,180 --> 00:12:05,889
has a manufactured by the same companies

00:12:04,000 --> 00:12:09,279
in Taiwan and China to make the gear for

00:12:05,889 --> 00:12:12,250
all the big boys and it's very very

00:12:09,279 --> 00:12:15,940
cheap again compared to my 2002 is to

00:12:12,250 --> 00:12:18,190
every costs and if I think think it's

00:12:15,940 --> 00:12:23,589
cheap now wait till our ships 64-bit in

00:12:18,190 --> 00:12:24,819
volume right I mean an Intel chip retail

00:12:23,589 --> 00:12:28,930
goes for what one to two hundred bucks

00:12:24,819 --> 00:12:30,430
whereas the chips and all the I have had

00:12:28,930 --> 00:12:37,110
such a holy hour probably retailed at

00:12:30,430 --> 00:12:37,110
under five so this is a huge price

00:12:37,560 --> 00:12:41,860
margin that companies are Intel in

00:12:40,060 --> 00:12:45,010
particular are picking up now that will

00:12:41,860 --> 00:12:49,449
likely go away when arm start shipping

00:12:45,010 --> 00:12:50,680
64 a bit so the point is I mean it's

00:12:49,449 --> 00:12:54,310
it's a really tough business to be in

00:12:50,680 --> 00:12:56,019
because you have to to be a cloud player

00:12:54,310 --> 00:13:00,310
you have high fixed costs in terms of

00:12:56,019 --> 00:13:02,829
you know very specialized personnel you

00:13:00,310 --> 00:13:05,040
know you have having to build a physical

00:13:02,829 --> 00:13:07,380
data structures by all the machines

00:13:05,040 --> 00:13:08,430
so really it's only profitable and it's

00:13:07,380 --> 00:13:11,510
low-margin so really it's only

00:13:08,430 --> 00:13:13,680
profitable and very very large-scale

00:13:11,510 --> 00:13:15,540
okay it's let's imagine an imaginary

00:13:13,680 --> 00:13:19,620
conversation with my bank before I

00:13:15,540 --> 00:13:20,430
wanted to start stickiness so I go in to

00:13:19,620 --> 00:13:22,350
say how can I help you

00:13:20,430 --> 00:13:24,870
I'd like to start a business but first I

00:13:22,350 --> 00:13:27,210
need to be alt a global network of

00:13:24,870 --> 00:13:29,340
regionally redundant data centers hire a

00:13:27,210 --> 00:13:30,660
team of expert system administrators and

00:13:29,340 --> 00:13:33,090
network operators to work around the

00:13:30,660 --> 00:13:35,900
clock and develop a suite of massively

00:13:33,090 --> 00:13:40,170
scalable redundant reliable web services

00:13:35,900 --> 00:13:43,100
can I borrow 100 million dollars they

00:13:40,170 --> 00:13:46,700
would probably answer no plays

00:13:43,100 --> 00:13:49,440
Security's right

00:13:46,700 --> 00:13:53,400
okay let's okay we keep that in mind

00:13:49,440 --> 00:13:55,260
that's absurd right okay that's you go

00:13:53,400 --> 00:13:55,740
to the cloud provider hi how can I help

00:13:55,260 --> 00:13:58,640
you

00:13:55,740 --> 00:14:00,360
you say I hear you have and so on a

00:13:58,640 --> 00:14:02,190
global and that's recovery isn't

00:14:00,360 --> 00:14:03,420
redundant data centers a team of expert

00:14:02,190 --> 00:14:06,330
system administrators and network

00:14:03,420 --> 00:14:08,220
operators working on the clock suite of

00:14:06,330 --> 00:14:12,420
massively scalable redundant reliable

00:14:08,220 --> 00:14:13,260
web services mind if I use your cloud do

00:14:12,420 --> 00:14:17,340
you have a credit card

00:14:13,260 --> 00:14:21,780
yes let's do business right

00:14:17,340 --> 00:14:23,640
same thing different answer why are you

00:14:21,780 --> 00:14:25,760
going back to Jonathan Schwartz let's

00:14:23,640 --> 00:14:28,670
comment about Amazon Amazon was used

00:14:25,760 --> 00:14:30,870
because that retailer right all you need

00:14:28,670 --> 00:14:33,060
all they want from you is your credit

00:14:30,870 --> 00:14:36,650
card number to take your money right

00:14:33,060 --> 00:14:39,750
where's the old way in the way of HP IBM

00:14:36,650 --> 00:14:43,860
Dell and now X Sun was to send in their

00:14:39,750 --> 00:14:48,390
Salesforce right to the dog and talking

00:14:43,860 --> 00:14:50,580
funny Joe all process right trying to

00:14:48,390 --> 00:14:51,930
milk him I mean you know like I was

00:14:50,580 --> 00:14:56,070
obviously screwed is my bandwidth

00:14:51,930 --> 00:14:57,360
contract paying 20 $50 a month for you

00:14:56,070 --> 00:14:59,130
know space that bag and tanki's a

00:14:57,360 --> 00:15:00,510
bandwidth right but that's because

00:14:59,130 --> 00:15:02,010
that's what the model was but if you

00:15:00,510 --> 00:15:02,700
show your prices to up front there is no

00:15:02,010 --> 00:15:04,710
negotiation

00:15:02,700 --> 00:15:06,810
there is no sales force right this is

00:15:04,710 --> 00:15:09,630
this is the price list here's your

00:15:06,810 --> 00:15:11,940
credit card domestic business which is

00:15:09,630 --> 00:15:13,740
something which essentially what I did

00:15:11,940 --> 00:15:15,810
you know so for like my price let's go

00:15:13,740 --> 00:15:21,210
I'll take a credit card if you don't do

00:15:15,810 --> 00:15:23,910
that anyway so again a brief interlude

00:15:21,210 --> 00:15:26,750
into accounting for the nerd and most of

00:15:23,910 --> 00:15:29,370
us are I don't use it as a pejorative

00:15:26,750 --> 00:15:31,590
what a star computing it's my very own

00:15:29,370 --> 00:15:34,440
server on the Internet's running a

00:15:31,590 --> 00:15:38,700
custom gender Colonel Jenny got Rick

00:15:34,440 --> 00:15:43,760
tower the nginx nodejs that's what all

00:15:38,700 --> 00:15:46,170
the cool kids are doing and so on okay

00:15:43,760 --> 00:15:49,290
that is lotsa fun right I exaggerate but

00:15:46,170 --> 00:15:52,470
not much okay for the accountant what is

00:15:49,290 --> 00:15:57,990
cloud computing zero upfront capital

00:15:52,470 --> 00:15:59,730
cost right low operating costs painless

00:15:57,990 --> 00:16:00,690
scaling our resources with demand which

00:15:59,730 --> 00:16:02,880
means you don't have to worry about

00:16:00,690 --> 00:16:04,370
forecasting right that's what budgets

00:16:02,880 --> 00:16:06,830
are all about is forecasting demand

00:16:04,370 --> 00:16:09,870
right but if you can basically

00:16:06,830 --> 00:16:11,730
automatically scale demand every

00:16:09,870 --> 00:16:13,860
application would use a novice

00:16:11,730 --> 00:16:16,170
presumably use corresponds to with the

00:16:13,860 --> 00:16:21,350
revenue then what's the problem

00:16:16,170 --> 00:16:21,350
right you don't have to worry about risk

00:16:21,530 --> 00:16:24,030
more often than not accountants are in

00:16:23,670 --> 00:16:27,330
charge

00:16:24,030 --> 00:16:30,060
especially the money so learn to think

00:16:27,330 --> 00:16:33,030
like an accountant less like it no

00:16:30,060 --> 00:16:37,230
ledges or a peer technologist again

00:16:33,030 --> 00:16:43,920
who's winning is a IBM or HP or Dell or

00:16:37,230 --> 00:16:45,450
Sun or Oracle or an Amazon thank god

00:16:43,920 --> 00:16:47,070
computing in a single world for in the

00:16:45,450 --> 00:16:50,550
sink of a word from my perspective is

00:16:47,070 --> 00:16:52,140
leverage a leverage

00:16:50,550 --> 00:16:56,880
granted since the global financial

00:16:52,140 --> 00:17:00,570
crisis has been sullied for example by

00:16:56,880 --> 00:17:04,079
these guys subprime RBS traders and even

00:17:00,570 --> 00:17:06,510
brothers crazy Americans couldn't happen

00:17:04,079 --> 00:17:08,810
in Australia right unless your

00:17:06,510 --> 00:17:12,180
negativity Australian property investor

00:17:08,810 --> 00:17:14,100
use the word loosely

00:17:12,180 --> 00:17:15,990
that's bad leverage good leverage

00:17:14,100 --> 00:17:17,460
renting on-demand services

00:17:15,990 --> 00:17:21,120
multimillion-dollar data centers with

00:17:17,460 --> 00:17:24,120
your personal credit card I not having

00:17:21,120 --> 00:17:25,980
to sign the contract I don't know what

00:17:24,120 --> 00:17:27,180
the maximum upside is your the credit

00:17:25,980 --> 00:17:35,550
card limit

00:17:27,180 --> 00:17:37,680
worst case and on top of that the cloud

00:17:35,550 --> 00:17:39,240
enables new classes of applications is

00:17:37,680 --> 00:17:40,710
something I thought about somewhat but

00:17:39,240 --> 00:17:45,480
I'm sure this can be explored further

00:17:40,710 --> 00:17:46,740
for example Google Apps as the same in

00:17:45,480 --> 00:17:48,870
this presentation is an example of

00:17:46,740 --> 00:17:50,970
something I was able to start him over

00:17:48,870 --> 00:17:52,710
and in fear I could have switched to

00:17:50,970 --> 00:17:56,810
anyone's computer with my gmail logon

00:17:52,710 --> 00:17:59,400
and continued and if you've ever

00:17:56,810 --> 00:18:00,930
collaboratively edited the same document

00:17:59,400 --> 00:18:02,790
in Google Apps it's almost magic the way

00:18:00,930 --> 00:18:06,510
it works and I've done it so I was

00:18:02,790 --> 00:18:08,160
writing along a technical document and I

00:18:06,510 --> 00:18:09,450
did mostly content and someone else

00:18:08,160 --> 00:18:11,730
jumped in towards the end and started

00:18:09,450 --> 00:18:14,490
fiddling with the styling you know so

00:18:11,730 --> 00:18:16,890
they changed the global background

00:18:14,490 --> 00:18:18,390
they'd add a footer and there I was that

00:18:16,890 --> 00:18:20,880
anyway and suddenly boom that part of

00:18:18,390 --> 00:18:21,810
the page had changed but it worked you

00:18:20,880 --> 00:18:23,100
know I mean there's some pretty

00:18:21,810 --> 00:18:25,560
heavy-duty math in terms of the

00:18:23,100 --> 00:18:27,720
synchronization algorithms that make

00:18:25,560 --> 00:18:29,990
that work but it is only possible in a

00:18:27,720 --> 00:18:31,980
cloud environment whereby you're

00:18:29,990 --> 00:18:34,140
transparently accessing a remote

00:18:31,980 --> 00:18:37,470
computing resource I mean all the

00:18:34,140 --> 00:18:38,910
complexities hidden from you right it

00:18:37,470 --> 00:18:41,340
certainly that's not something one that

00:18:38,910 --> 00:18:42,930
would it's not really feasible even if I

00:18:41,340 --> 00:18:44,580
two computers are connected over the

00:18:42,930 --> 00:18:48,630
same local network because it still

00:18:44,580 --> 00:18:50,310
needed a central coordinating logic and

00:18:48,630 --> 00:18:54,300
Tinkercad how many have any of you heard

00:18:50,310 --> 00:18:57,540
of Tinkercad yeah okay ci maker in the

00:18:54,300 --> 00:19:00,420
crowd look at all it's a cool

00:18:57,540 --> 00:19:03,600
application basically it's a solid

00:19:00,420 --> 00:19:08,220
modeling CAD for you know 3d printing

00:19:03,600 --> 00:19:08,700
devices so the the GUI runs in the

00:19:08,220 --> 00:19:12,750
browser

00:19:08,700 --> 00:19:17,190
it's WebGL and the geometry calculations

00:19:12,750 --> 00:19:18,720
is done literally on a cluster obviously

00:19:17,190 --> 00:19:20,010
out there in the cloud so the geometry

00:19:18,720 --> 00:19:21,630
calculations are actually extremely

00:19:20,010 --> 00:19:23,090
computationally expensive so this is not

00:19:21,630 --> 00:19:25,400
something that you could feasibly

00:19:23,090 --> 00:19:27,140
run on your desktop machine

00:19:25,400 --> 00:19:28,460
or if he if he did it would be much

00:19:27,140 --> 00:19:31,310
slower than it actually is

00:19:28,460 --> 00:19:32,750
it's actually one good example of an

00:19:31,310 --> 00:19:33,980
application that's actually faster in

00:19:32,750 --> 00:19:35,180
the cloud because you have the

00:19:33,980 --> 00:19:37,880
relatively thin interface for the

00:19:35,180 --> 00:19:39,890
browser but then you're gonna harness as

00:19:37,880 --> 00:19:42,280
much CPU horsepower as you need in the

00:19:39,890 --> 00:19:46,070
in the backend

00:19:42,280 --> 00:19:52,490
it's a need on vacation yes that's a

00:19:46,070 --> 00:19:54,340
quick and dirty survey of cloud again

00:19:52,490 --> 00:19:59,560
just think of the shift thanks for my

00:19:54,340 --> 00:19:59,560
high upfront capital costs ten years ago

00:19:59,740 --> 00:20:07,160
you know to the again from Africa around

00:20:04,850 --> 00:20:10,250
three thousand dollars fixed for capital

00:20:07,160 --> 00:20:12,290
cost operating cost of $250 I got the

00:20:10,250 --> 00:20:15,590
same thing nowadays with no upfront

00:20:12,290 --> 00:20:18,170
capital costs for 15 you know 15 dollars

00:20:15,590 --> 00:20:19,840
a month just quite an extraordinary

00:20:18,170 --> 00:20:22,160
shift

00:20:19,840 --> 00:20:27,680
okay so tips and tricks for developing

00:20:22,160 --> 00:20:29,030
cloud service in Python okay just

00:20:27,680 --> 00:20:32,630
summary it's tricky in this again I'm

00:20:29,030 --> 00:20:35,740
not this is fairly generic it's it's

00:20:32,630 --> 00:20:37,640
part of my point is that the Python

00:20:35,740 --> 00:20:39,530
infrastructure is mature enough now that

00:20:37,640 --> 00:20:42,830
you know there's not too much guesswork

00:20:39,530 --> 00:20:46,520
about what I could stack is the primary

00:20:42,830 --> 00:20:48,530
server runs Amazon ec2 in Virginia which

00:20:46,520 --> 00:20:51,800
is East cost us primarily because that

00:20:48,530 --> 00:20:53,210
gives me good latency with North America

00:20:51,800 --> 00:20:56,690
and Europe where most of my customers

00:20:53,210 --> 00:20:59,150
are the database is my sequel hosted in

00:20:56,690 --> 00:21:01,160
relational RDS relational database

00:20:59,150 --> 00:21:04,400
service this is basically the service

00:21:01,160 --> 00:21:08,830
that Amazon provides whereby they run a

00:21:04,400 --> 00:21:10,760
redundant slave my sequel database I

00:21:08,830 --> 00:21:13,060
suppose I could have set that up myself

00:21:10,760 --> 00:21:15,500
but I couldn't be bothered frankly and I

00:21:13,060 --> 00:21:17,300
I'm scared that I wondered properly so

00:21:15,500 --> 00:21:19,940
that when one machine went down and then

00:21:17,300 --> 00:21:22,160
my database would also go down I said

00:21:19,940 --> 00:21:24,110
this basically is you know it's a

00:21:22,160 --> 00:21:26,500
continuum whereby I mean I obviously I'm

00:21:24,110 --> 00:21:29,090
capable of setting up my sequel myself

00:21:26,500 --> 00:21:31,520
maybe in a non cluster context but then

00:21:29,090 --> 00:21:34,030
the cost of contacts and less confident

00:21:31,520 --> 00:21:36,200
of my ability so I can outsource that

00:21:34,030 --> 00:21:38,470
system administration expertise if you

00:21:36,200 --> 00:21:42,040
like to Amazon

00:21:38,470 --> 00:21:45,080
the software's janggo proxy kind index

00:21:42,040 --> 00:21:49,220
run salary the task queue in memcache

00:21:45,080 --> 00:21:53,840
for packing server cache the name

00:21:49,220 --> 00:21:56,060
servers hosted with Linode they're

00:21:53,840 --> 00:21:58,580
physically New Jersey USA California USA

00:21:56,060 --> 00:21:59,560
East Coast West Coast London UK and

00:21:58,580 --> 00:22:02,030
Tokyo Japan

00:21:59,560 --> 00:22:05,900
fact right now if the Wi-Fi is working

00:22:02,030 --> 00:22:07,940
you can in under 20 minutes

00:22:05,900 --> 00:22:10,100
sign up yourself to get four servers in

00:22:07,940 --> 00:22:11,810
New Jersey California in London Tokyo 15

00:22:10,100 --> 00:22:14,390
minutes

00:22:11,810 --> 00:22:16,100
that's what Linode with Amazon you could

00:22:14,390 --> 00:22:18,860
sign up and get probably the next 10-15

00:22:16,100 --> 00:22:23,510
minutes server is running in Singapore

00:22:18,860 --> 00:22:26,300
Tokyo California Oregon Virginia Ireland

00:22:23,510 --> 00:22:29,360
and South Harlow is that I think it's

00:22:26,300 --> 00:22:31,790
where the Amazon data centers are around

00:22:29,360 --> 00:22:38,020
the world a lot of missed a couple but

00:22:31,790 --> 00:22:40,160
the point is you can trivially start up

00:22:38,020 --> 00:22:41,630
servers that are physically close to

00:22:40,160 --> 00:22:45,110
your customers for a good latency and

00:22:41,630 --> 00:22:46,190
good performance obviously you can cause

00:22:45,110 --> 00:22:47,470
difficulty you can do that with

00:22:46,190 --> 00:22:50,300
colocation but I think it would be

00:22:47,470 --> 00:22:51,530
prohibitively expensive and a very

00:22:50,300 --> 00:22:55,280
time-consuming to fly to all those

00:22:51,530 --> 00:22:56,840
locations somewhere cuz I'll be flying

00:22:55,280 --> 00:23:00,590
to LA in two days and I'm dreading that

00:22:56,840 --> 00:23:03,080
14-hour flight so third party services I

00:23:00,590 --> 00:23:04,760
use postmark that's email delivery I

00:23:03,080 --> 00:23:06,890
guess you can run your own email server

00:23:04,760 --> 00:23:10,340
but generally speaking delivery ability

00:23:06,890 --> 00:23:13,280
is poor and there's the age of spam this

00:23:10,340 --> 00:23:15,860
is better to outsource that to a email

00:23:13,280 --> 00:23:19,700
service provider that you know reaches

00:23:15,860 --> 00:23:22,700
out to the ISPs to guarantee better

00:23:19,700 --> 00:23:23,960
deliver validity stat and AWS cloud

00:23:22,700 --> 00:23:27,290
watch I'll talk about in more detail

00:23:23,960 --> 00:23:31,880
that's basically is for logging here's a

00:23:27,290 --> 00:23:34,300
rough not a designer obviously a diagram

00:23:31,880 --> 00:23:36,050
so essentially

00:23:34,300 --> 00:23:38,120
customers can figure out their DNS

00:23:36,050 --> 00:23:41,000
information with the web service Latinas

00:23:38,120 --> 00:23:43,390
comm that is pushed out to the foreign

00:23:41,000 --> 00:23:49,100
name servers which are then queried by

00:23:43,390 --> 00:23:51,230
the internet so Django a quick

00:23:49,100 --> 00:23:55,940
overview of Django how many have used I

00:23:51,230 --> 00:23:59,450
nor are aware of it good okay poster how

00:23:55,940 --> 00:24:01,250
many of you used either Python web

00:23:59,450 --> 00:24:06,730
development platforms like flask or

00:24:01,250 --> 00:24:11,510
bottle result it's up guys w so I know

00:24:06,730 --> 00:24:13,690
that daily I was right anyway yeah so a

00:24:11,510 --> 00:24:16,160
quick review of Django models views

00:24:13,690 --> 00:24:18,320
templates the R and then my opinion is

00:24:16,160 --> 00:24:22,130
Django is killer feature all right the

00:24:18,320 --> 00:24:24,140
rest templates and them views I think

00:24:22,130 --> 00:24:26,600
other packages handle fairly well but

00:24:24,140 --> 00:24:29,240
the RM basically is a sequel generator

00:24:26,600 --> 00:24:32,000
and it's pretty darn efficient it's been

00:24:29,240 --> 00:24:33,409
so nice if nice improvements with Django

00:24:32,000 --> 00:24:35,510
1.4 in particular whereby you can

00:24:33,409 --> 00:24:37,250
basically pull in related objects

00:24:35,510 --> 00:24:39,919
automatically in a single query you're

00:24:37,250 --> 00:24:42,710
not having to do related queries in the

00:24:39,919 --> 00:24:45,799
background it's also sequel database

00:24:42,710 --> 00:24:47,690
agnostic you know so you can start by

00:24:45,799 --> 00:24:49,970
developing sequel Lite than too poor to

00:24:47,690 --> 00:24:52,070
my sequin Postgres one slight

00:24:49,970 --> 00:24:53,780
disadvantage of the that approach maybe

00:24:52,070 --> 00:24:56,210
is that I'm personally a fan of Postgres

00:24:53,780 --> 00:24:57,650
but I'm you're notice I'm deploying with

00:24:56,210 --> 00:25:00,559
my sequel because that's basically what

00:24:57,650 --> 00:25:02,929
Amazon provides but with Django

00:25:00,559 --> 00:25:04,520
basically since I'm not writing the

00:25:02,929 --> 00:25:08,450
sequel I don't care what the database is

00:25:04,520 --> 00:25:10,669
just provided it works so you know

00:25:08,450 --> 00:25:11,960
that's a good thing right and I would

00:25:10,669 --> 00:25:14,570
say that post Chris has objectively a

00:25:11,960 --> 00:25:17,419
better database but with generally I

00:25:14,570 --> 00:25:20,270
don't care because it does all this the

00:25:17,419 --> 00:25:23,090
dirty work for me a generally speaking

00:25:20,270 --> 00:25:27,860
with sequel with the Django or am i

00:25:23,090 --> 00:25:30,260
found very occasionally I have to branch

00:25:27,860 --> 00:25:32,539
out to raw sequel but typically

00:25:30,260 --> 00:25:35,059
especially by using django django d

00:25:32,539 --> 00:25:36,679
about toolbar if you are not using that

00:25:35,059 --> 00:25:38,270
and you're developing django start using

00:25:36,679 --> 00:25:40,940
that immediately it's an excellent tool

00:25:38,270 --> 00:25:42,020
gives you accent visibility into where

00:25:40,940 --> 00:25:44,210
your time is being spent

00:25:42,020 --> 00:25:45,500
especially the sequel there you know it

00:25:44,210 --> 00:25:48,409
literally gives you a nice little graph

00:25:45,500 --> 00:25:50,929
of how long each queries taken you draw

00:25:48,409 --> 00:25:53,450
down to the longest query speed it up

00:25:50,929 --> 00:25:57,440
and and hopefully that's your

00:25:53,450 --> 00:25:59,150
application somewhat optimized our

00:25:57,440 --> 00:26:00,940
security and django out of the box is

00:25:59,150 --> 00:26:03,880
excellent

00:26:00,940 --> 00:26:08,860
you know if you do any reading about

00:26:03,880 --> 00:26:10,480
recent attacks of or attacks and

00:26:08,860 --> 00:26:12,460
password databases you'll realize the

00:26:10,480 --> 00:26:15,550
importance of password hashing insulting

00:26:12,460 --> 00:26:18,940
which is provided by jangle out of the

00:26:15,550 --> 00:26:21,310
box by default and they they use good

00:26:18,940 --> 00:26:23,110
hashes again cryptography is something

00:26:21,310 --> 00:26:24,730
that's very difficult for felon

00:26:23,110 --> 00:26:26,950
specialists to get right so that can be

00:26:24,730 --> 00:26:27,670
provided for you out of the box that's a

00:26:26,950 --> 00:26:35,080
very good thing

00:26:27,670 --> 00:26:36,550
you can ask Sony about that I've had

00:26:35,080 --> 00:26:38,440
security holes that Django protects

00:26:36,550 --> 00:26:41,530
against sequel injection again that's

00:26:38,440 --> 00:26:42,610
basically the ORM I don't know I mean I

00:26:41,530 --> 00:26:45,970
haven't heard of sequel injection

00:26:42,610 --> 00:26:48,670
attacks recently in Django or ever or to

00:26:45,970 --> 00:26:52,240
be extremely difficult to do so and they

00:26:48,670 --> 00:26:55,680
cross-site request forgery again it's

00:26:52,240 --> 00:26:58,390
built into default with form submissions

00:26:55,680 --> 00:27:02,920
the admin it's pretty it's okay for

00:26:58,390 --> 00:27:04,900
bootstrapping and for back-end admin but

00:27:02,920 --> 00:27:07,540
I wouldn't necessarily present the admin

00:27:04,900 --> 00:27:09,670
interface to the end user in terms of

00:27:07,540 --> 00:27:11,470
style I had as a built-in caching

00:27:09,670 --> 00:27:14,620
framework it works very well to memcache

00:27:11,470 --> 00:27:17,770
as I'll describe in depth later they

00:27:14,620 --> 00:27:21,600
can't be complex but some was a real

00:27:17,770 --> 00:27:24,220
world I mean I found it typically

00:27:21,600 --> 00:27:25,660
features in Django you know they're not

00:27:24,220 --> 00:27:27,250
provided opportunity there they're

00:27:25,660 --> 00:27:28,390
provided to solve a real problem that

00:27:27,250 --> 00:27:30,940
someone has encountered in the real

00:27:28,390 --> 00:27:33,190
world and so I'm skeptical of claims to

00:27:30,940 --> 00:27:35,350
say well here's a nice little framework

00:27:33,190 --> 00:27:37,870
and does everything you need until you

00:27:35,350 --> 00:27:38,500
actually start to develop something with

00:27:37,870 --> 00:27:39,730
the real world

00:27:38,500 --> 00:27:44,530
not saying Django is perfect I'm saying

00:27:39,730 --> 00:27:46,900
it's good you know and we're lucky to

00:27:44,530 --> 00:27:48,820
have it okay so Django deployment again

00:27:46,900 --> 00:27:51,910
this is grab bag of tips but you know I

00:27:48,820 --> 00:27:54,190
find them to be useful so first is use

00:27:51,910 --> 00:27:56,500
Virtual env so even if you just have a

00:27:54,190 --> 00:27:58,180
single application which I do use it

00:27:56,500 --> 00:28:01,360
because it provides an isolated Python

00:27:58,180 --> 00:28:04,150
environment and if you use them in

00:28:01,360 --> 00:28:05,950
conjunction with tip Python installer

00:28:04,150 --> 00:28:08,440
package they forget what the I can

00:28:05,950 --> 00:28:09,790
instance work basically it enables you

00:28:08,440 --> 00:28:12,310
to easily track your third-party

00:28:09,790 --> 00:28:13,990
dependencies for your application

00:28:12,310 --> 00:28:16,180
you know so every time you had a package

00:28:13,990 --> 00:28:18,190
you just do pip freeze dump it to your

00:28:16,180 --> 00:28:23,650
requirement Stites file and save that to

00:28:18,190 --> 00:28:24,910
your version control system of course

00:28:23,650 --> 00:28:29,170
it's a given that you are using version

00:28:24,910 --> 00:28:31,570
control I hope in this day and age is

00:28:29,170 --> 00:28:33,490
why I haven't explicitly said so all

00:28:31,570 --> 00:28:37,900
right G unicorn I got a production in

00:28:33,490 --> 00:28:40,300
whiskey WSGI server which I proxy behind

00:28:37,900 --> 00:28:43,480
Internet's or Apache to serve these

00:28:40,300 --> 00:28:46,180
static files again this is all

00:28:43,480 --> 00:28:48,550
convention but you know it works for

00:28:46,180 --> 00:28:51,520
good reason daemon tools start 100

00:28:48,550 --> 00:28:53,860
services for example if my server goes

00:28:51,520 --> 00:28:56,110
down I want celery and Django to come

00:28:53,860 --> 00:28:57,340
back automatically I'll wait a minute

00:28:56,110 --> 00:28:59,050
tolls I can do that in sort of a

00:28:57,340 --> 00:29:03,070
one-line script

00:28:59,050 --> 00:29:04,780
equivalent receiver visors D I think

00:29:03,070 --> 00:29:07,180
it's written in Python although I find

00:29:04,780 --> 00:29:10,690
the configuration file more complex and

00:29:07,180 --> 00:29:12,670
I need so I'm quite happy with daemon

00:29:10,690 --> 00:29:15,490
tools are there any other equivalents

00:29:12,670 --> 00:29:18,010
I'm missing just hmm

00:29:15,490 --> 00:29:19,240
upstart okay that's I think started in

00:29:18,010 --> 00:29:27,280
there blew into right but it runs on

00:29:19,240 --> 00:29:30,640
pretty much everything now okay although

00:29:27,280 --> 00:29:33,010
I was okay I think that's more powerful

00:29:30,640 --> 00:29:34,780
I was confused what all the run levels

00:29:33,010 --> 00:29:39,700
were so I stayed with the daemon tools

00:29:34,780 --> 00:29:44,230
for denoise whatever you whatever works

00:29:39,700 --> 00:29:46,000
yeah you know I'm not yes as long as it

00:29:44,230 --> 00:29:48,250
starts your service and if it stops

00:29:46,000 --> 00:29:52,390
restarts it that's basically all you

00:29:48,250 --> 00:29:54,790
need fabric this is invaluable for me to

00:29:52,390 --> 00:29:56,230
automate remote deployment essentially

00:29:54,790 --> 00:29:57,660
fabric means you never have to leave the

00:29:56,230 --> 00:30:00,180
comfort of your local host terminal

00:29:57,660 --> 00:30:02,650
especially if you're connected to a

00:30:00,180 --> 00:30:05,020
server as I am on literally the other

00:30:02,650 --> 00:30:08,470
side of the world where ping times can

00:30:05,020 --> 00:30:11,110
be someone annoying if you're typing so

00:30:08,470 --> 00:30:12,430
I find what I do is fabric is that I for

00:30:11,110 --> 00:30:14,130
example remember I have foreign answer

00:30:12,430 --> 00:30:16,570
over so typically I want to install I

00:30:14,130 --> 00:30:17,710
want them all essentially to be felons

00:30:16,570 --> 00:30:19,210
of each other so typically if I'm

00:30:17,710 --> 00:30:21,520
installing something new on installer

00:30:19,210 --> 00:30:22,930
manually and one name server then when

00:30:21,520 --> 00:30:24,140
I've verified our works I'll wrap that

00:30:22,930 --> 00:30:25,690
hunt into a

00:30:24,140 --> 00:30:29,000
a function which I'll put into the

00:30:25,690 --> 00:30:30,740
fabric fab file I then run that in

00:30:29,000 --> 00:30:34,640
parallel on the on all the name servers

00:30:30,740 --> 00:30:35,900
so you know it's a very useful tool so

00:30:34,640 --> 00:30:38,030
if you're not again easy fabric and

00:30:35,900 --> 00:30:38,930
you're deploying to even to a single

00:30:38,030 --> 00:30:40,820
server but especially if you're

00:30:38,930 --> 00:30:43,760
deploying to multiple servers you know

00:30:40,820 --> 00:30:48,220
look it up it can be fairly involved but

00:30:43,760 --> 00:30:48,220
you know the it is certainly worth it

00:30:49,510 --> 00:30:55,340
celery seems to be standard in the

00:30:54,530 --> 00:30:56,630
Python world

00:30:55,340 --> 00:30:59,420
it's basically an asynchronous task

00:30:56,630 --> 00:31:02,660
queue based on distributed message

00:30:59,420 --> 00:31:05,750
passing it can use the Django database

00:31:02,660 --> 00:31:08,630
but the recommended configuration the

00:31:05,750 --> 00:31:09,710
one I use is to use RabbitMQ which is a

00:31:08,630 --> 00:31:13,040
message server written and

00:31:09,710 --> 00:31:19,100
coincidentally Anor lying I think Emily

00:31:13,040 --> 00:31:20,840
it basically a master key basically push

00:31:19,100 --> 00:31:23,830
a job on to the key which then returns

00:31:20,840 --> 00:31:26,140
immediately then that job is processed

00:31:23,830 --> 00:31:28,220
or pulled off the queue and when it's

00:31:26,140 --> 00:31:32,000
completely self is pulled off the queue

00:31:28,220 --> 00:31:34,540
so the point is it handles it guarantees

00:31:32,000 --> 00:31:36,380
the messages or jobs are executed

00:31:34,540 --> 00:31:38,930
they're only deleted when they're

00:31:36,380 --> 00:31:41,750
actually executed and completed some

00:31:38,930 --> 00:31:44,990
uses some things I use Saturday for or

00:31:41,750 --> 00:31:47,140
responsive for handling so for example I

00:31:44,990 --> 00:31:49,790
have a support forum or the cns website

00:31:47,140 --> 00:31:52,400
that basically sends an email but when

00:31:49,790 --> 00:31:53,870
they hit submit I respond immediately

00:31:52,400 --> 00:31:55,220
and I say thank you for submitting a

00:31:53,870 --> 00:31:56,990
support request would be getting back to

00:31:55,220 --> 00:31:59,450
you soon as possible or words to that

00:31:56,990 --> 00:32:02,540
effect but in the background I've posted

00:31:59,450 --> 00:32:04,880
the content of the forum submission to

00:32:02,540 --> 00:32:08,390
celery and then that is sent in the

00:32:04,880 --> 00:32:10,100
background as an email right so that you

00:32:08,390 --> 00:32:11,300
have a better user experience you know

00:32:10,100 --> 00:32:12,980
even if you know I'll taste only a

00:32:11,300 --> 00:32:15,380
second or two the user still notices

00:32:12,980 --> 00:32:17,600
that versus returning the form

00:32:15,380 --> 00:32:19,130
submission say a tenth of a second right

00:32:17,600 --> 00:32:21,890
so that's one good thing for another

00:32:19,130 --> 00:32:23,780
thing is logging for example when I

00:32:21,890 --> 00:32:27,080
update the nervous name service I'm

00:32:23,780 --> 00:32:28,760
interested in how long the start to end

00:32:27,080 --> 00:32:31,820
update is of all the name servers of all

00:32:28,760 --> 00:32:35,360
for is so I want to log that time so

00:32:31,820 --> 00:32:37,460
basically so updates it's basically a

00:32:35,360 --> 00:32:37,789
pain so the the web server pains the

00:32:37,460 --> 00:32:39,289
names

00:32:37,789 --> 00:32:41,960
whistling hey there's a new version of

00:32:39,289 --> 00:32:44,059
the DNS database come and get it the

00:32:41,960 --> 00:32:48,820
name servers turnaround call my URL over

00:32:44,059 --> 00:32:50,869
HTTP so secure and when all four have

00:32:48,820 --> 00:32:53,690
retrieved the latest version of the DNS

00:32:50,869 --> 00:32:56,149
database then I log in event measuring

00:32:53,690 --> 00:32:57,379
the complete elapsed time so that is

00:32:56,149 --> 00:33:00,169
good for metrics because you can say

00:32:57,379 --> 00:33:02,779
well I want you want a target to say a

00:33:00,169 --> 00:33:04,729
certain update times a five seconds if

00:33:02,779 --> 00:33:06,470
it goes consistently above ten fifteen

00:33:04,729 --> 00:33:07,549
or whatever then you know that

00:33:06,470 --> 00:33:12,109
something's wrong and you can look into

00:33:07,549 --> 00:33:14,929
it and you can also run a task on every

00:33:12,109 --> 00:33:21,309
page load in fact I do this I just see

00:33:14,929 --> 00:33:24,049
if I can switch back whenever you later

00:33:21,309 --> 00:33:26,479
if you go to the sick DNS homepage you

00:33:24,049 --> 00:33:29,059
see on the bottom left a counter of all

00:33:26,479 --> 00:33:33,889
the DNS queries it is served it's

00:33:29,059 --> 00:33:36,590
turning around 77 million so when every

00:33:33,889 --> 00:33:39,769
page load basically I kick off a little

00:33:36,590 --> 00:33:42,259
satury task then that pulls all the name

00:33:39,769 --> 00:33:46,549
servers adds up the number of queries

00:33:42,259 --> 00:33:48,379
served and shoves it into memcache so

00:33:46,549 --> 00:33:49,960
the next time that page is loaded I can

00:33:48,379 --> 00:33:52,970
pull that value directly out of memcache

00:33:49,960 --> 00:33:55,849
right so the value is accurate but then

00:33:52,970 --> 00:33:58,129
there's no lag for the user right so

00:33:55,849 --> 00:33:59,960
that really is the goal tomorrow might

00:33:58,129 --> 00:34:02,869
be probably the best use of using a

00:33:59,960 --> 00:34:05,239
back-end queue handling system so you

00:34:02,869 --> 00:34:09,679
provide good performance but you know

00:34:05,239 --> 00:34:11,869
you can also run necessary tasks server

00:34:09,679 --> 00:34:14,049
cache in my gosh you know a one-line

00:34:11,869 --> 00:34:16,569
install naturally own I went to a

00:34:14,049 --> 00:34:19,730
no-brainer

00:34:16,569 --> 00:34:22,429
again jangada provides good caching

00:34:19,730 --> 00:34:25,970
support by default one little trick I

00:34:22,429 --> 00:34:29,059
like to do is basically cache all pages

00:34:25,970 --> 00:34:32,990
in the site for anonymous users it's a

00:34:29,059 --> 00:34:36,669
very easy win who's your most important

00:34:32,990 --> 00:34:38,929
anonymous user search engine right and

00:34:36,669 --> 00:34:42,619
search engines typically are rank your

00:34:38,929 --> 00:34:44,690
site higher if response is good right so

00:34:42,619 --> 00:34:46,520
you want to cache pages as much as

00:34:44,690 --> 00:34:49,069
possible so I had these lines and

00:34:46,520 --> 00:34:50,540
basically all pages for anonymous users

00:34:49,069 --> 00:34:53,150
which is to say non logged in you

00:34:50,540 --> 00:34:57,490
are cached for five minutes again easy

00:34:53,150 --> 00:35:01,130
win this is another nice little trick on

00:34:57,490 --> 00:35:02,330
browser caching remember this caching

00:35:01,130 --> 00:35:05,110
can be either on the server which is

00:35:02,330 --> 00:35:08,330
memcache or it can be on the browser

00:35:05,110 --> 00:35:10,760
again if you look at the source to any

00:35:08,330 --> 00:35:14,350
stickiness webpage you'll see that the

00:35:10,760 --> 00:35:16,850
media URLs are prepended by a timestamp

00:35:14,350 --> 00:35:20,660
so basically I calculate that timestamp

00:35:16,850 --> 00:35:23,170
every time the server is restarted so

00:35:20,660 --> 00:35:25,430
the timestamp is the timestamp of the

00:35:23,170 --> 00:35:28,640
static media file that was most recently

00:35:25,430 --> 00:35:32,270
touched so that then becomes the prefix

00:35:28,640 --> 00:35:34,820
for all static media URLs across the

00:35:32,270 --> 00:35:36,560
site and I'll publish this it's a

00:35:34,820 --> 00:35:40,720
trivial bit of code but nearest I'm

00:35:36,560 --> 00:35:45,530
timed opy it's just there and github and

00:35:40,720 --> 00:35:46,400
I'll publish these slides soon nginx

00:35:45,530 --> 00:35:50,560
from the other end

00:35:46,400 --> 00:35:53,330
basically it's it says well if any

00:35:50,560 --> 00:35:56,600
static media file starts with a

00:35:53,330 --> 00:36:00,950
timestamp URL then set the expiry time

00:35:56,600 --> 00:36:03,830
to maximum which is century I don't know

00:36:00,950 --> 00:36:08,360
about its long time which basically says

00:36:03,830 --> 00:36:09,920
never invalidate is value nice piece of

00:36:08,360 --> 00:36:12,470
wisdom from Peter beyond hi canoes and

00:36:09,920 --> 00:36:15,950
validation is for suckers a fresh new

00:36:12,470 --> 00:36:17,330
URL is much safer right because

00:36:15,950 --> 00:36:18,920
otherwise you're guessing well you know

00:36:17,330 --> 00:36:21,020
this if this particular image didn't

00:36:18,920 --> 00:36:22,150
update what's the safe Valley to put

00:36:21,020 --> 00:36:24,530
half an hour

00:36:22,150 --> 00:36:26,900
who knows what if usage what if it's a

00:36:24,530 --> 00:36:28,220
site logo and somehow screwed up right

00:36:26,900 --> 00:36:30,580
then suddenly you're you're loading a

00:36:28,220 --> 00:36:32,930
bad site logo for the next half hour so

00:36:30,580 --> 00:36:35,750
you know so if you can change your urls

00:36:32,930 --> 00:36:37,610
anytime any static media file changes

00:36:35,750 --> 00:36:39,410
then you know to my mind that's a very

00:36:37,610 --> 00:36:43,340
effective approach remember on the

00:36:39,410 --> 00:36:45,080
bondic on the client-side the cache I

00:36:43,340 --> 00:36:46,940
think it's the least reason he used so

00:36:45,080 --> 00:36:48,830
basically as the cache feels up stuff

00:36:46,940 --> 00:36:51,590
that hasn't been touched in a while is

00:36:48,830 --> 00:36:53,540
basically is thrown out so if you just

00:36:51,590 --> 00:36:56,860
changed you are all you're always

00:36:53,540 --> 00:37:00,140
getting the most up-to-date files

00:36:56,860 --> 00:37:01,280
impersonate your users this is actually

00:37:00,140 --> 00:37:02,540
for their benefit because it means you

00:37:01,280 --> 00:37:03,340
can see exactly what they are seeing in

00:37:02,540 --> 00:37:05,890
the browser

00:37:03,340 --> 00:37:09,340
so I do this is 15s basically the idea

00:37:05,890 --> 00:37:13,030
is that you know our staff users to

00:37:09,340 --> 00:37:15,940
select a paying customer from a

00:37:13,030 --> 00:37:18,580
drop-down list when he do that their

00:37:15,940 --> 00:37:21,040
user name is injected into the staff

00:37:18,580 --> 00:37:23,530
users session then every time you load a

00:37:21,040 --> 00:37:25,900
page check to see for the existence of

00:37:23,530 --> 00:37:29,830
that customers user name in the session

00:37:25,900 --> 00:37:32,200
if it's there then you retrieve their

00:37:29,830 --> 00:37:34,720
accounts data right so for example for

00:37:32,200 --> 00:37:37,690
my customers when I'm their personating

00:37:34,720 --> 00:37:40,210
them I'm retrieving their domains or

00:37:37,690 --> 00:37:41,860
their servers or their settings ok so

00:37:40,210 --> 00:37:43,090
when they call up for help I can see

00:37:41,860 --> 00:37:45,880
exactly what they're seeing in their own

00:37:43,090 --> 00:37:48,310
browser so it's a little trick and I

00:37:45,880 --> 00:37:49,810
think it's quite useful but the tablet

00:37:48,310 --> 00:37:51,070
logics are the same right the tablet

00:37:49,810 --> 00:37:54,070
budget doesn't care where the objects

00:37:51,070 --> 00:37:56,710
come from it just renders them the same

00:37:54,070 --> 00:37:59,020
well they do be sure to put in a nice

00:37:56,710 --> 00:38:00,460
red warning as I do at the top you are

00:37:59,020 --> 00:38:03,630
impersonating someone so please be

00:38:00,460 --> 00:38:03,630
careful with what changes you make

00:38:04,170 --> 00:38:12,070
adding an API you could go with soap but

00:38:09,790 --> 00:38:16,140
by doing so you have a life to the way

00:38:12,070 --> 00:38:24,820
of pain on the right there we have the

00:38:16,140 --> 00:38:27,310
Saruman and Gandalf in a way I also very

00:38:24,820 --> 00:38:32,200
good sa the S stands for simple if any

00:38:27,310 --> 00:38:34,030
of you read that yes I see some good

00:38:32,200 --> 00:38:35,560
luck all right but but unfortunately

00:38:34,030 --> 00:38:38,410
sometimes your customers might ask for

00:38:35,560 --> 00:38:41,980
soap so you have my sympathy but I'm

00:38:38,410 --> 00:38:43,570
afraid I can't give you any tips the

00:38:41,980 --> 00:38:46,950
better way to add an API is to use

00:38:43,570 --> 00:38:50,590
dressed representational state transfer

00:38:46,950 --> 00:38:52,600
basically rests I know it was the

00:38:50,590 --> 00:38:54,580
subject of a PhD thesis work out into

00:38:52,600 --> 00:38:56,590
that but essentially it at least my

00:38:54,580 --> 00:39:00,040
layman's mind it attempts to reuse as

00:38:56,590 --> 00:39:02,830
much as possible of conventional HTTP

00:39:00,040 --> 00:39:07,630
including commercial HTTP verbs and the

00:39:02,830 --> 00:39:09,490
notion of resources as URLs but the

00:39:07,630 --> 00:39:11,380
disadvantage is the ABI is ID hawk which

00:39:09,490 --> 00:39:12,580
means it's incumbent on you to document

00:39:11,380 --> 00:39:14,960
it properly

00:39:12,580 --> 00:39:16,760
but if you're a better approach is

00:39:14,960 --> 00:39:19,520
actually to provide libraries for your

00:39:16,760 --> 00:39:21,050
users right so don't let me document the

00:39:19,520 --> 00:39:22,550
API but also provide our lines Python

00:39:21,050 --> 00:39:25,010
binding provide a nice Ruby binding

00:39:22,550 --> 00:39:29,840
provide a nice PHP binding and so on as

00:39:25,010 --> 00:39:32,720
companies for example a stripe - I chase

00:39:29,840 --> 00:39:34,070
all in JavaScript object notation Maps

00:39:32,720 --> 00:39:38,300
very nice - the Python lists and

00:39:34,070 --> 00:39:39,800
dictionaries I say JSON versus XML it

00:39:38,300 --> 00:39:42,320
has built-in Python support and has

00:39:39,800 --> 00:39:46,220
since 2.6 that's almost four years old

00:39:42,320 --> 00:39:48,920
now and a very nice feature obviously

00:39:46,220 --> 00:39:51,890
JSON is if that is your API then it

00:39:48,920 --> 00:39:58,220
means it is easy to integrate into the

00:39:51,890 --> 00:40:02,890
client using Java Script and

00:39:58,220 --> 00:40:06,280
authentication with REST API is it's not

00:40:02,890 --> 00:40:09,740
it's not formalized like it is indium

00:40:06,280 --> 00:40:12,350
with soap but a nice technique is to use

00:40:09,740 --> 00:40:14,330
long randomly generated tokens make sure

00:40:12,350 --> 00:40:17,840
you generate at least two so that you

00:40:14,330 --> 00:40:20,330
can rotate them and then just use basic

00:40:17,840 --> 00:40:23,210
HTTP authentication over HTTP which is

00:40:20,330 --> 00:40:28,210
secure right if as HTTP the script

00:40:23,210 --> 00:40:30,830
encrypted you know and Bob's your uncle

00:40:28,210 --> 00:40:32,540
logging very quickly I was on web

00:40:30,830 --> 00:40:36,200
servers of star watch it's a sort of a

00:40:32,540 --> 00:40:37,670
ec2 self-service it's small its useful

00:40:36,200 --> 00:40:39,530
if you're using ec2 itself because it

00:40:37,670 --> 00:40:42,619
provides default metrics for example

00:40:39,530 --> 00:40:44,180
CPEs disk and i/o so if your machine

00:40:42,619 --> 00:40:49,660
goes down and you can set up an alarm to

00:40:44,180 --> 00:40:52,640
email your whatever I use this logging

00:40:49,660 --> 00:40:53,810
console metrics using the boto library

00:40:52,640 --> 00:40:56,480
which is essentially an Amazon Web

00:40:53,810 --> 00:40:58,310
Services library for Python but a

00:40:56,480 --> 00:41:01,340
decimal edge is the API is fairly heavy

00:40:58,310 --> 00:41:05,090
weight a service I've been using most

00:41:01,340 --> 00:41:07,160
recently is called stat it's used to

00:41:05,090 --> 00:41:09,590
track statistics and events very very

00:41:07,160 --> 00:41:12,800
lightweight API you can log events from

00:41:09,590 --> 00:41:16,900
curl or W yet it's very nice and it

00:41:12,800 --> 00:41:18,720
provides alarms graphs and reports

00:41:16,900 --> 00:41:20,430
attendez

00:41:18,720 --> 00:41:23,670
you know the big boys like a New Relic

00:41:20,430 --> 00:41:26,369
and so on as well or log Li I think you

00:41:23,670 --> 00:41:29,220
can also use for logging but me for my

00:41:26,369 --> 00:41:30,000
purposes these two services are working

00:41:29,220 --> 00:41:44,300
very nicely

00:41:30,000 --> 00:41:52,950
I don't think I'm done thank you John

00:41:44,300 --> 00:41:54,660
questions thanks John I'm wondering if

00:41:52,950 --> 00:41:56,670
you've considered using anything like

00:41:54,660 --> 00:41:58,290
puppet or chef too because you got all

00:41:56,670 --> 00:42:00,060
these dependencies and stuff to build

00:41:58,290 --> 00:42:01,710
the push for you looking at any kind of

00:42:00,060 --> 00:42:02,520
configuration management software or

00:42:01,710 --> 00:42:06,960
anything like that

00:42:02,520 --> 00:42:09,150
why not a fairly simple basically the

00:42:06,960 --> 00:42:12,000
only software running note on my name

00:42:09,150 --> 00:42:13,079
services tiny DNS I set that up once I'm

00:42:12,000 --> 00:42:15,270
done I mean I have to update the

00:42:13,079 --> 00:42:17,520
database but that's not a self object

00:42:15,270 --> 00:42:19,109
per se and that the other things they

00:42:17,520 --> 00:42:24,119
tend to be fairly ad hoc like my query

00:42:19,109 --> 00:42:26,280
counter it's it's a small go program I

00:42:24,119 --> 00:42:31,050
have a couple of Python loggers right so

00:42:26,280 --> 00:42:32,510
I'm not really it's it doesn't tend to

00:42:31,050 --> 00:42:36,869
be the type of software I need to update

00:42:32,510 --> 00:42:39,569
whereas my um - whoa stickiness calm web

00:42:36,869 --> 00:42:44,400
server I update essentially by doing hg

00:42:39,569 --> 00:42:46,500
poll from very positively so so I'm not

00:42:44,400 --> 00:42:47,760
saying they're not that they are good

00:42:46,500 --> 00:42:49,730
things to use I'm sure but I don't need

00:42:47,760 --> 00:42:52,470
them I haven't seen any of them myself

00:42:49,730 --> 00:42:55,500
apartment a through a plain old fabric

00:42:52,470 --> 00:42:58,349
works fine basically so yeah so I just

00:42:55,500 --> 00:43:00,230
don't know that's you know ask someone

00:42:58,349 --> 00:43:06,810
else about profit or chef I don't have a

00:43:00,230 --> 00:43:08,880
intelligent opinion I was just gonna say

00:43:06,810 --> 00:43:11,310
we started using something called salt

00:43:08,880 --> 00:43:13,530
which is like there's other tools but

00:43:11,310 --> 00:43:17,220
it's a Python one that's new and free

00:43:13,530 --> 00:43:18,960
have we developed so I asked these guys

00:43:17,220 --> 00:43:22,160
sorry I can't I can't answer that

00:43:18,960 --> 00:43:22,160
question other questions

00:43:29,349 --> 00:43:39,169
could you please expand on the evils of

00:43:32,419 --> 00:43:46,189
soap and why restau is preferred it's a

00:43:39,169 --> 00:43:49,249
Hall I guess if you're well you should

00:43:46,189 --> 00:43:51,949
really read the the essays a polemic s

00:43:49,249 --> 00:43:53,809
stands for simple I I suppose the

00:43:51,949 --> 00:43:56,390
promise of soap was that it should

00:43:53,809 --> 00:44:00,529
provide an interoperable auto

00:43:56,390 --> 00:44:05,689
discoverable API but a practice that

00:44:00,529 --> 00:44:07,819
very often is not the case it's just

00:44:05,689 --> 00:44:10,099
that I found I have little self api's

00:44:07,819 --> 00:44:12,380
there just found the tooling when it

00:44:10,099 --> 00:44:15,140
works works very well or can work very

00:44:12,380 --> 00:44:16,969
well when it doesn't work it's extremely

00:44:15,140 --> 00:44:19,069
painful I remember I was trying to debug

00:44:16,969 --> 00:44:20,929
one API with I was using sides which is

00:44:19,069 --> 00:44:22,579
a Python mobile a nice odds

00:44:20,929 --> 00:44:28,669
it's a python library basically for

00:44:22,579 --> 00:44:31,059
introspecting a wisdom and their mind

00:44:28,669 --> 00:44:33,049
wisdom if you don't know what that means

00:44:31,059 --> 00:44:36,349
you know and it's only expected always

00:44:33,049 --> 00:44:38,630
document generated the the library and

00:44:36,349 --> 00:44:40,939
tried to run a metal broke and then I

00:44:38,630 --> 00:44:42,259
turned on the debugging flag and I sort

00:44:40,939 --> 00:44:44,539
of stopped counting after 1 million

00:44:42,259 --> 00:44:46,699
lines well it's obviously wasn't gonna

00:44:44,539 --> 00:44:48,139
get me very far so I'm saying so in the

00:44:46,699 --> 00:44:49,009
right environment like I think

00:44:48,139 --> 00:44:51,229
especially if you're in this are called

00:44:49,009 --> 00:44:57,079
Enterprise world with say Visual Studio

00:44:51,229 --> 00:44:58,959
or or the Java world if you have tools

00:44:57,079 --> 00:45:01,519
that can introspect the wisdom and

00:44:58,959 --> 00:45:03,979
generate the API for you and it works

00:45:01,519 --> 00:45:09,739
you're golden but if it doesn't work

00:45:03,979 --> 00:45:13,599
then I just find that the api's are very

00:45:09,739 --> 00:45:17,179
difficult to manually inspect and to

00:45:13,599 --> 00:45:19,729
make work yourself right where's the

00:45:17,179 --> 00:45:21,699
rest API again the onus is on the

00:45:19,729 --> 00:45:24,229
provider to document it properly right

00:45:21,699 --> 00:45:25,759
so that is the trade-off but I find that

00:45:24,229 --> 00:45:30,499
with the REST API it's very easy to

00:45:25,759 --> 00:45:31,909
build a wrapper manually if it's

00:45:30,499 --> 00:45:34,429
properly documented because you're

00:45:31,909 --> 00:45:37,140
starting from much simpler tools namely

00:45:34,429 --> 00:45:39,990
standard HTTP

00:45:37,140 --> 00:45:42,690
verbs and penile URLs and then a simple

00:45:39,990 --> 00:45:43,859
payload like well back in the day I

00:45:42,690 --> 00:45:47,760
would have been next to middle nowadays

00:45:43,859 --> 00:45:49,170
more so JSON so it's really your market

00:45:47,760 --> 00:45:51,660
if you're after the enterprise basically

00:45:49,170 --> 00:45:53,010
the soap is mandated but if I'm not

00:45:51,660 --> 00:45:55,700
going out to the enterprise market right

00:45:53,010 --> 00:45:58,380
so in that case I'm going to provide a

00:45:55,700 --> 00:46:00,960
REST API and I'll provide libraries for

00:45:58,380 --> 00:46:17,670
my clients if they want soap our safes

00:46:00,960 --> 00:46:21,930
nice to know Thanks go here I do it by

00:46:17,670 --> 00:46:23,309
hand I think I have heard of I can't

00:46:21,930 --> 00:46:24,750
think of it off the top my hair but

00:46:23,309 --> 00:46:26,910
there is a tool out there that one

00:46:24,750 --> 00:46:30,210
apparently interests about Django models

00:46:26,910 --> 00:46:31,470
and generated an API for you I can't

00:46:30,210 --> 00:46:38,369
think of it off the top of my head if

00:46:31,470 --> 00:46:40,019
you google but to my mind it doesn't

00:46:38,369 --> 00:46:42,750
know it doesn't necessarily make for a

00:46:40,019 --> 00:46:44,369
very clean API I if you look at the

00:46:42,750 --> 00:46:46,650
stripe API which for example it's not

00:46:44,369 --> 00:46:48,390
useable necessary from Australia for

00:46:46,650 --> 00:46:49,829
legal reasons but if you just look at

00:46:48,390 --> 00:46:52,589
the documentation for the Striped API is

00:46:49,829 --> 00:46:55,079
very very nice and I can't imagine the

00:46:52,589 --> 00:46:56,460
auto-generated that so that really is

00:46:55,079 --> 00:47:01,230
the trade-off rust if you guys tend to

00:46:56,460 --> 00:47:02,970
be ad hoc but they're not hard it's just

00:47:01,230 --> 00:47:05,730
plain old views right if method dot

00:47:02,970 --> 00:47:08,309
equals get or put or delete then do this

00:47:05,730 --> 00:47:13,259
done and the other thing so it's not

00:47:08,309 --> 00:47:15,480
hard in Django unfortunately we are

00:47:13,259 --> 00:47:18,470
basically out of time could everyone

00:47:15,480 --> 00:47:18,470

YouTube URL: https://www.youtube.com/watch?v=R4feORh5MrU


