Title: Visualising architecture
Publication date: 2012-08-23
Playlist: PyCon Australia 2012
Description: 
	Tennessee Leeuwenburg
Architecture. It's an oxymoron all by itself, and using Python is no silver bullet to the perennial problem of code rot and design complexity. How does complexity bite us in practise? What tools exist to simplify and explain arc
Captions: 
	00:00:00,140 --> 00:00:04,799
okay so today I'll be talking about

00:00:02,389 --> 00:00:06,990
visualizing architecture by which I mean

00:00:04,799 --> 00:00:09,330
new ways to look at what you've already

00:00:06,990 --> 00:00:11,400
got a suit so a little bit about myself

00:00:09,330 --> 00:00:13,230
the Center for Australian weather and

00:00:11,400 --> 00:00:14,880
climate research is a partnership

00:00:13,230 --> 00:00:18,869
between the bureau of meteorology and

00:00:14,880 --> 00:00:21,150
the CSIRO and I've been working working

00:00:18,869 --> 00:00:23,420
there since 2002 and I've been using

00:00:21,150 --> 00:00:26,820
Python pretty much exclusively since

00:00:23,420 --> 00:00:28,560
2006 I had to write a little bit of CCAP

00:00:26,820 --> 00:00:31,289
code about a year and a half ago but

00:00:28,560 --> 00:00:33,870
that didn't go so well so you know now I

00:00:31,289 --> 00:00:35,579
stay away no I wouldn't fight just

00:00:33,870 --> 00:00:37,649
kidding so I have a background in

00:00:35,579 --> 00:00:40,410
artificial intelligence and natural

00:00:37,649 --> 00:00:41,879
language generation basically by virtue

00:00:40,410 --> 00:00:44,550
of my current job which I've now been

00:00:41,879 --> 00:00:48,180
doing for some time and I have a

00:00:44,550 --> 00:00:50,850
philosophy diploma and an MBA as well so

00:00:48,180 --> 00:00:53,489
the MBA was was a bit interesting

00:00:50,850 --> 00:00:55,289
and as a result of all of that I've

00:00:53,489 --> 00:00:58,620
ended up with some of my own ideas about

00:00:55,289 --> 00:01:02,300
what makes good architecture so I may

00:00:58,620 --> 00:01:04,860
not be following exactly what

00:01:02,300 --> 00:01:06,210
everybody's familiar with in terms of

00:01:04,860 --> 00:01:07,439
how to design things or how to build

00:01:06,210 --> 00:01:09,240
things but the point of this

00:01:07,439 --> 00:01:11,250
presentation isn't to tell you how to do

00:01:09,240 --> 00:01:12,060
things it's to tell you how to look at

00:01:11,250 --> 00:01:15,509
what you've already done

00:01:12,060 --> 00:01:17,159
and then think about it for yourself so

00:01:15,509 --> 00:01:18,810
what does visualizing architecture mean

00:01:17,159 --> 00:01:21,930
anyway so let's start connecting with

00:01:18,810 --> 00:01:23,670
the word visualizing so certainly for me

00:01:21,930 --> 00:01:25,259
this is true and I think it's generally

00:01:23,670 --> 00:01:27,270
true that people will connect visually

00:01:25,259 --> 00:01:30,329
more than in any other way if you can

00:01:27,270 --> 00:01:32,310
show somebody really clearly in a way

00:01:30,329 --> 00:01:34,470
that they can just look at and go I see

00:01:32,310 --> 00:01:35,909
it that's a real gift in terms of

00:01:34,470 --> 00:01:37,619
interpretation of what you're putting in

00:01:35,909 --> 00:01:39,630
front of them so it's critical to how we

00:01:37,619 --> 00:01:42,030
design calculate and relate to the world

00:01:39,630 --> 00:01:44,369
so let's just start with just just

00:01:42,030 --> 00:01:46,770
looking so some of you may be familiar

00:01:44,369 --> 00:01:48,780
with this know let's work out how I can

00:01:46,770 --> 00:01:51,119
push play on this video this is

00:01:48,780 --> 00:01:53,369
something called gorse and this will

00:01:51,119 --> 00:01:54,899
make a video watching you do check-ins

00:01:53,369 --> 00:01:57,689
into your repository so this is

00:01:54,899 --> 00:02:00,299
matplotlib and I've never really thought

00:01:57,689 --> 00:02:02,759
about watching check-ins quite like this

00:02:00,299 --> 00:02:05,670
before I think it's quite pretty

00:02:02,759 --> 00:02:08,580
actually what it means is perhaps a

00:02:05,670 --> 00:02:10,200
little less obvious so every time I skip

00:02:08,580 --> 00:02:12,620
forward in time you'll notice it's

00:02:10,200 --> 00:02:13,710
redrawing its graph from the start and

00:02:12,620 --> 00:02:14,790
let's

00:02:13,710 --> 00:02:16,590
take a look at going here what we're

00:02:14,790 --> 00:02:19,050
looking at is how people are choosing to

00:02:16,590 --> 00:02:21,240
interact with a code space or a code

00:02:19,050 --> 00:02:23,010
base it's not necessarily telling us

00:02:21,240 --> 00:02:26,100
about what they're doing or what the

00:02:23,010 --> 00:02:27,660
content of their work is it's telling us

00:02:26,100 --> 00:02:30,090
how they relate to the lines of code

00:02:27,660 --> 00:02:33,450
that they've got got in their repository

00:02:30,090 --> 00:02:34,980
and so you can see that that the the big

00:02:33,450 --> 00:02:36,660
flash has come every time you skip

00:02:34,980 --> 00:02:38,370
forward because it's generating the new

00:02:36,660 --> 00:02:40,860
graph from scratch but you can see a few

00:02:38,370 --> 00:02:43,260
things one is is that people don't tend

00:02:40,860 --> 00:02:45,030
to isolate just in one area you don't

00:02:43,260 --> 00:02:47,160
have people working in just one file you

00:02:45,030 --> 00:02:48,900
tend to have people moving all around

00:02:47,160 --> 00:02:50,570
the repository touching lots of things

00:02:48,900 --> 00:02:52,830
the one thing that really came across

00:02:50,570 --> 00:02:55,530
here is that it's a pretty organic

00:02:52,830 --> 00:02:56,970
process and you can get in here and if

00:02:55,530 --> 00:02:59,280
you get a bit advanced you can get

00:02:56,970 --> 00:03:01,290
gravitas and images of who's doing what

00:02:59,280 --> 00:03:03,990
going in there and if you just kind of

00:03:01,290 --> 00:03:06,210
watch it for a bit no one of these is

00:03:03,990 --> 00:03:08,670
just working in one space we don't have

00:03:06,210 --> 00:03:10,380
a clean hierarchy in our orgonite in the

00:03:08,670 --> 00:03:12,840
organizational model here I don't do

00:03:10,380 --> 00:03:16,650
matplotlib when I say we I mean nobody

00:03:12,840 --> 00:03:18,510
the greater we don't we don't work by

00:03:16,650 --> 00:03:19,860
just putting ourselves in buckets and

00:03:18,510 --> 00:03:22,410
just going I'm just gonna work on this

00:03:19,860 --> 00:03:24,000
bucket forever the the changes might

00:03:22,410 --> 00:03:25,230
come in because of some business reason

00:03:24,000 --> 00:03:26,970
something that was important isn't

00:03:25,230 --> 00:03:29,160
important anymore so we move where we're

00:03:26,970 --> 00:03:31,680
working or maybe what we're doing is

00:03:29,160 --> 00:03:34,680
distributed across so many files that we

00:03:31,680 --> 00:03:36,750
just can't work that way we try to

00:03:34,680 --> 00:03:38,220
organize our code that way if you think

00:03:36,750 --> 00:03:39,840
about what design principles for good

00:03:38,220 --> 00:03:43,740
code is it's all about you know

00:03:39,840 --> 00:03:45,720
encapsulation and and good api's and you

00:03:43,740 --> 00:03:47,220
know you know don't repeat yourself kind

00:03:45,720 --> 00:03:50,310
of methodology and things that you can

00:03:47,220 --> 00:03:52,860
reuse but it's not actually how we sit

00:03:50,310 --> 00:03:55,620
down and write code so that's what I

00:03:52,860 --> 00:03:56,940
took away from that I don't know whether

00:03:55,620 --> 00:03:58,380
that's what you took away from it but

00:03:56,940 --> 00:04:00,240
you can take this and run this on your

00:03:58,380 --> 00:04:02,550
own code back at work so if nothing else

00:04:00,240 --> 00:04:03,960
you can just check this out and run it

00:04:02,550 --> 00:04:06,810
and that's one cool thing you can take

00:04:03,960 --> 00:04:09,770
away from the conference so here's Matt

00:04:06,810 --> 00:04:13,290
watt libs file structure so this was a

00:04:09,770 --> 00:04:15,480
way that I'd an application I found

00:04:13,290 --> 00:04:17,460
obviously generated this image and it's

00:04:15,480 --> 00:04:19,140
a way just to take a look at the top the

00:04:17,460 --> 00:04:21,299
trunk of matplotlib and just go well

00:04:19,140 --> 00:04:22,770
what's in it again I'm still looking at

00:04:21,299 --> 00:04:24,570
the file system I haven't opened any

00:04:22,770 --> 00:04:26,520
codes I haven't read a document I

00:04:24,570 --> 00:04:27,389
haven't trusted anything that isn't

00:04:26,520 --> 00:04:29,189
complete

00:04:27,389 --> 00:04:31,800
true this is directly from the file

00:04:29,189 --> 00:04:35,909
system it doesn't lie so one might

00:04:31,800 --> 00:04:37,919
conclude that providing an HTML set of

00:04:35,909 --> 00:04:39,779
documentation is important that this

00:04:37,919 --> 00:04:42,629
particular project conducts itself with

00:04:39,779 --> 00:04:43,919
a strong emphasis on users for judging

00:04:42,629 --> 00:04:47,120
by the users guide and course

00:04:43,919 --> 00:04:50,400
directories and in fact the source code

00:04:47,120 --> 00:04:53,240
is tucked away down in one of these leaf

00:04:50,400 --> 00:04:55,560
node or relatively leaf node matplotlib

00:04:53,240 --> 00:04:57,270
so there's a subdirectory there

00:04:55,560 --> 00:05:00,120
matplotlib with where the code actually

00:04:57,270 --> 00:05:02,460
is so one might can you know choose to

00:05:00,120 --> 00:05:04,139
imagine that you know this is true about

00:05:02,460 --> 00:05:05,789
the project that the code structure

00:05:04,139 --> 00:05:08,550
matches what's important to them about

00:05:05,789 --> 00:05:10,529
their project but let's take a look at a

00:05:08,550 --> 00:05:12,830
few other applications is this how most

00:05:10,529 --> 00:05:15,719
applications look or is it not

00:05:12,830 --> 00:05:18,589
so here's twisted and straight away to

00:05:15,719 --> 00:05:21,360
me this is you know far different

00:05:18,589 --> 00:05:23,639
twisted generally being a different kind

00:05:21,360 --> 00:05:25,349
of an application so what we can see

00:05:23,639 --> 00:05:28,409
here is that straight away it's broken

00:05:25,349 --> 00:05:29,999
up into more and smaller parcels that

00:05:28,409 --> 00:05:31,529
may be good that may be bad it's really

00:05:29,999 --> 00:05:33,479
going to depend on their needs this

00:05:31,529 --> 00:05:35,789
could be either one of these may be a

00:05:33,479 --> 00:05:37,529
valid or an invalid choice I'm just

00:05:35,789 --> 00:05:38,759
trying to show that you know we have

00:05:37,529 --> 00:05:42,199
different ways of building these

00:05:38,759 --> 00:05:45,449
applications in practice and here's bash

00:05:42,199 --> 00:05:47,729
so it's in credit it's so flat that

00:05:45,449 --> 00:05:50,009
almost all of its files are just in the

00:05:47,729 --> 00:05:51,810
top-level directory so every single one

00:05:50,009 --> 00:05:53,969
of those final leaf nodes there that's

00:05:51,810 --> 00:05:55,319
just a file and then it's they've shoved

00:05:53,969 --> 00:05:58,229
all of the tests in a single directory

00:05:55,319 --> 00:06:00,569
and there you go so one could either say

00:05:58,229 --> 00:06:03,599
that's kind of perfectly disorganized or

00:06:00,569 --> 00:06:06,509
otherwise maybe everything's just at a

00:06:03,599 --> 00:06:08,279
grasp and here here's some software that

00:06:06,509 --> 00:06:10,229
I wrote which is different again called

00:06:08,279 --> 00:06:12,330
benchmark apply now I'm not holding this

00:06:10,229 --> 00:06:13,979
up as good software I'm just holding

00:06:12,330 --> 00:06:15,779
this up as something I can talk about it

00:06:13,979 --> 00:06:19,560
because I wrote it and I don't criticize

00:06:15,779 --> 00:06:22,409
anybody else by criticizing it so as it

00:06:19,560 --> 00:06:24,990
happens I love its file system structure

00:06:22,409 --> 00:06:27,240
but as we'll find out later on I hate

00:06:24,990 --> 00:06:29,490
its code structure and one of the things

00:06:27,240 --> 00:06:31,110
that I've done badly is to relate the

00:06:29,490 --> 00:06:33,270
file system structure to the code

00:06:31,110 --> 00:06:34,979
structure so I've broken one of the

00:06:33,270 --> 00:06:36,599
fundamental ways that people can come in

00:06:34,979 --> 00:06:38,279
and look at this code is that they'll

00:06:36,599 --> 00:06:40,310
come in they'll look at this file system

00:06:38,279 --> 00:06:41,690
structure but they won't be a

00:06:40,310 --> 00:06:44,270
to relate that back to their code

00:06:41,690 --> 00:06:45,200
content so that's bad and so that's

00:06:44,270 --> 00:06:47,110
where I think that some of these

00:06:45,200 --> 00:06:49,520
visualization technologies can go I

00:06:47,110 --> 00:06:51,260
should have built that better so what

00:06:49,520 --> 00:06:52,910
we've got here is we've got the codes

00:06:51,260 --> 00:06:55,370
sitting in bench that's all the stuff

00:06:52,910 --> 00:06:56,900
that does something test nicely

00:06:55,370 --> 00:06:58,760
separated and then there's this

00:06:56,900 --> 00:07:01,010
demonstration branch down there that

00:06:58,760 --> 00:07:03,170
relates to some stuff I've got on the

00:07:01,010 --> 00:07:06,110
wikis I've got like tutorials but I've

00:07:03,170 --> 00:07:08,180
integrated them into automated tests so

00:07:06,110 --> 00:07:10,040
that when you actually run the tests you

00:07:08,180 --> 00:07:12,080
can also run all of the things that are

00:07:10,040 --> 00:07:13,820
actually on the wiki so you know they're

00:07:12,080 --> 00:07:15,140
guaranteed to be good every time you do

00:07:13,820 --> 00:07:17,750
a software push you know that your

00:07:15,140 --> 00:07:19,610
website's still functioning so I really

00:07:17,750 --> 00:07:20,300
like that that I find that quite easy to

00:07:19,610 --> 00:07:22,250
relate to

00:07:20,300 --> 00:07:24,740
one of the things about all of these

00:07:22,250 --> 00:07:27,380
pictures that I've shown is that they're

00:07:24,740 --> 00:07:29,300
just one at a time you're not going to

00:07:27,380 --> 00:07:30,680
be able to necessarily know whether it's

00:07:29,300 --> 00:07:32,990
important to just look from the top

00:07:30,680 --> 00:07:34,880
level if we go back here maybe what you

00:07:32,990 --> 00:07:36,980
care about is the details of one of

00:07:34,880 --> 00:07:39,080
these other things here so really you

00:07:36,980 --> 00:07:43,250
want your tools you know they really

00:07:39,080 --> 00:07:45,560
should there's this play button be

00:07:43,250 --> 00:07:47,540
interactive so you should be able to

00:07:45,560 --> 00:07:49,970
grab one of these things and then just

00:07:47,540 --> 00:07:52,040
focus in on it so you can see here that

00:07:49,970 --> 00:07:53,630
under its branches straight away you've

00:07:52,040 --> 00:07:55,160
got you know you've got your release

00:07:53,630 --> 00:07:57,230
structure just visible in the file

00:07:55,160 --> 00:07:58,760
system you can scroll around and you can

00:07:57,230 --> 00:08:00,800
imagine if you're a new developer on

00:07:58,760 --> 00:08:02,900
this particular particular application

00:08:00,800 --> 00:08:05,060
being able to go in and inspect the

00:08:02,900 --> 00:08:07,700
system in this ways I don't know I think

00:08:05,060 --> 00:08:10,370
it's pretty powerful and if you're also

00:08:07,700 --> 00:08:11,720
perhaps like me not as active in coding

00:08:10,370 --> 00:08:13,730
as once you learn you're a bit out of

00:08:11,720 --> 00:08:15,140
touch with your own system you can go in

00:08:13,730 --> 00:08:16,460
there and you can remind yourself of

00:08:15,140 --> 00:08:19,310
what the structures are and what the

00:08:16,460 --> 00:08:20,720
files file systems are as they change so

00:08:19,310 --> 00:08:23,060
here we go I'm just diving into the

00:08:20,720 --> 00:08:24,290
matplotlib actual source code because

00:08:23,060 --> 00:08:25,730
I've you know decided I would be

00:08:24,290 --> 00:08:27,950
interested to see how it actually gets

00:08:25,730 --> 00:08:29,870
build this source directory looks kind

00:08:27,950 --> 00:08:31,940
of interesting and I can go through and

00:08:29,870 --> 00:08:33,410
just do some more investigation now you

00:08:31,940 --> 00:08:35,900
don't learn anything earth-shattering

00:08:33,410 --> 00:08:40,730
out of this but it's another tool that

00:08:35,900 --> 00:08:42,410
you can bring to bear so now this is a

00:08:40,730 --> 00:08:45,380
little bit about my ideas about how we

00:08:42,410 --> 00:08:47,090
think about architecture now I was going

00:08:45,380 --> 00:08:48,590
to do a bit of you know back and forth

00:08:47,090 --> 00:08:50,810
at this stage but I've been told

00:08:48,590 --> 00:08:53,580
laughter keep all conversation till the

00:08:50,810 --> 00:08:56,790
end for the video editing purposes

00:08:53,580 --> 00:09:01,290
but I'm just going to not do that and

00:08:56,790 --> 00:09:04,140
ignore and I want to ask the audience a

00:09:01,290 --> 00:09:05,820
little bit somebody first of all I want

00:09:04,140 --> 00:09:07,140
people to feel free to just interrupt me

00:09:05,820 --> 00:09:08,750
at any stage can someone please

00:09:07,140 --> 00:09:11,190
interrupt me right now

00:09:08,750 --> 00:09:13,410
excellent great so that that's how this

00:09:11,190 --> 00:09:15,390
is supposed to go right how do we think

00:09:13,410 --> 00:09:16,680
about architecture someone stick up

00:09:15,390 --> 00:09:18,630
their hands and say something they think

00:09:16,680 --> 00:09:21,500
has to do with their architecture at

00:09:18,630 --> 00:09:23,760
work on the software that they build

00:09:21,500 --> 00:09:27,950
these the questions that relate to you

00:09:23,760 --> 00:09:27,950
just yell don't wait for the microphone

00:09:28,400 --> 00:09:32,670
nobody has anything to say about their

00:09:31,110 --> 00:09:35,430
architecture at work well that's like

00:09:32,670 --> 00:09:38,640
where I work - I totally understand ok

00:09:35,430 --> 00:09:41,220
so you know architectures like design

00:09:38,640 --> 00:09:42,870
patterns and client-server and web and

00:09:41,220 --> 00:09:45,960
Django and templates and all of this

00:09:42,870 --> 00:09:48,240
stuff but as it just a person trying to

00:09:45,960 --> 00:09:50,610
relate to some software I find all of

00:09:48,240 --> 00:09:52,620
that just too hard I'm sorry it's just

00:09:50,610 --> 00:09:54,000
too hard I want to know what it does I

00:09:52,620 --> 00:09:56,790
don't know how I use it I want to know

00:09:54,000 --> 00:09:58,290
it's part I want a hack on it if if I

00:09:56,790 --> 00:09:59,640
get really serious I don't know how it

00:09:58,290 --> 00:10:01,170
performs and I want to know where it

00:09:59,640 --> 00:10:03,240
start and where it's good at

00:10:01,170 --> 00:10:06,060
I want those human questions answered

00:10:03,240 --> 00:10:07,770
not not not technical design analysis

00:10:06,060 --> 00:10:09,480
that's that's the job of when you're in

00:10:07,770 --> 00:10:10,830
analyzing when you're improving when

00:10:09,480 --> 00:10:13,800
you're working it's past this

00:10:10,830 --> 00:10:15,210
straightaway I want to go first clients

00:10:13,800 --> 00:10:16,800
what do I need to know about this thing

00:10:15,210 --> 00:10:19,170
so by looking at the directories first

00:10:16,800 --> 00:10:20,790
that's what most of us do right you you

00:10:19,170 --> 00:10:22,560
know you look at the docs and you read

00:10:20,790 --> 00:10:24,150
something about you know are you import

00:10:22,560 --> 00:10:25,920
this and there's this code snippet you

00:10:24,150 --> 00:10:27,090
don't know what's going on there you go

00:10:25,920 --> 00:10:29,010
huh really

00:10:27,090 --> 00:10:30,780
is this it look I better just look at

00:10:29,010 --> 00:10:33,420
the source code the first thing you see

00:10:30,780 --> 00:10:35,070
is the directories and I think this is

00:10:33,420 --> 00:10:38,910
actually good because it encourages

00:10:35,070 --> 00:10:41,010
top-down thinking so a lot of people

00:10:38,910 --> 00:10:43,530
think that when you're designing bottom

00:10:41,010 --> 00:10:46,260
ups what you should do because top-down

00:10:43,530 --> 00:10:47,910
concepts don't tend to hold true they

00:10:46,260 --> 00:10:49,950
tend to have cruft in them where you

00:10:47,910 --> 00:10:51,750
know you you import it and you just have

00:10:49,950 --> 00:10:53,370
to initialize this thing and you just

00:10:51,750 --> 00:10:54,750
have to know about it so people sort of

00:10:53,370 --> 00:10:56,130
get more comfortable with bottom-up

00:10:54,750 --> 00:10:57,480
alright let's get out our data

00:10:56,130 --> 00:10:59,070
structures right well let's get our

00:10:57,480 --> 00:11:01,230
bottom level function sorted and then

00:10:59,070 --> 00:11:02,220
the structure will kind of emerge and

00:11:01,230 --> 00:11:04,470
that's fine when you're building

00:11:02,220 --> 00:11:05,310
something or when you really know what

00:11:04,470 --> 00:11:07,410
you're doing but when you're being

00:11:05,310 --> 00:11:09,240
introduced that's not how you see

00:11:07,410 --> 00:11:11,519
something you see a top-down you go what

00:11:09,240 --> 00:11:13,230
if you if you download a new API you

00:11:11,519 --> 00:11:15,810
just want to use it you want to know

00:11:13,230 --> 00:11:17,339
okay where's my first tutorial so I can

00:11:15,810 --> 00:11:19,769
see an example of how this thing gets

00:11:17,339 --> 00:11:21,720
used well what are what do I have to do

00:11:19,769 --> 00:11:23,459
at the top level and I think that as

00:11:21,720 --> 00:11:25,410
designers we should actually be thinking

00:11:23,459 --> 00:11:26,970
from the top down and this is roughly

00:11:25,410 --> 00:11:29,069
where I think I'll lose a lot of people

00:11:26,970 --> 00:11:30,689
because I think that's not really quite

00:11:29,069 --> 00:11:32,939
normal but that's how I like to think

00:11:30,689 --> 00:11:34,319
about architecture and not trying to

00:11:32,939 --> 00:11:38,040
tell you to do it that way but you know

00:11:34,319 --> 00:11:39,389
do it that way but you know hey even if

00:11:38,040 --> 00:11:40,980
you're not going to maybe these tools

00:11:39,389 --> 00:11:45,029
will let you do whatever you want to do

00:11:40,980 --> 00:11:46,620
your way as best possible so top-down is

00:11:45,029 --> 00:11:48,990
how we how we introduce people to

00:11:46,620 --> 00:11:51,240
systems top-down thinking is the essence

00:11:48,990 --> 00:11:53,040
of abstraction and simplification if you

00:11:51,240 --> 00:11:55,019
never did any top-down thinking and you

00:11:53,040 --> 00:11:56,490
only ever did pop them up thinking you

00:11:55,019 --> 00:11:58,709
would never be able to get away from

00:11:56,490 --> 00:12:00,480
having to understand everything at the

00:11:58,709 --> 00:12:03,000
bottom level the only way you get away

00:12:00,480 --> 00:12:05,910
from having to understand everything is

00:12:03,000 --> 00:12:07,620
by going up a level and accepting the

00:12:05,910 --> 00:12:09,149
abstraction trusting whatever it is

00:12:07,620 --> 00:12:12,360
that's built at that middle higher level

00:12:09,149 --> 00:12:14,370
so I really would argue that your

00:12:12,360 --> 00:12:16,470
directory structure is actually part of

00:12:14,370 --> 00:12:19,110
your code design and you need to relate

00:12:16,470 --> 00:12:21,990
it to the code content first so it's not

00:12:19,110 --> 00:12:24,269
big design up first it's not what's

00:12:21,990 --> 00:12:25,500
written in some diagram like and in this

00:12:24,269 --> 00:12:28,199
case I'd in mind like you know like an

00:12:25,500 --> 00:12:30,540
XML diagram or a use case diagram or

00:12:28,199 --> 00:12:32,009
something wrote something someone's you

00:12:30,540 --> 00:12:34,170
know right up for marketing with a

00:12:32,009 --> 00:12:36,120
picture of a server and a you know with

00:12:34,170 --> 00:12:38,939
a particular shape over there and it you

00:12:36,120 --> 00:12:42,899
know like a square and a cloud because

00:12:38,939 --> 00:12:45,480
they lie those diagrams lie so you can't

00:12:42,899 --> 00:12:47,730
just trust them you can trust tools that

00:12:45,480 --> 00:12:49,740
you're using to inspect your actual code

00:12:47,730 --> 00:12:51,750
which is where I'm coming from take a

00:12:49,740 --> 00:12:52,740
look at your actual code so that when

00:12:51,750 --> 00:12:54,660
you're just sitting there interacting

00:12:52,740 --> 00:12:56,430
with it none of this is hard you just

00:12:54,660 --> 00:13:02,579
pull it up and take a look and have a

00:12:56,430 --> 00:13:03,959
mess around so it's structure it's all

00:13:02,579 --> 00:13:05,970
of these things okay

00:13:03,959 --> 00:13:08,399
it's your choice of operating system

00:13:05,970 --> 00:13:10,740
will inform your architecture maybe it's

00:13:08,399 --> 00:13:12,000
part of it maybe it's not but after a

00:13:10,740 --> 00:13:14,730
while you realize that's just kind of

00:13:12,000 --> 00:13:17,009
everything's architecture could be maybe

00:13:14,730 --> 00:13:18,689
depends on your problem so one of the

00:13:17,009 --> 00:13:20,430
things is that architecture really

00:13:18,689 --> 00:13:20,880
relates to the problem you might have at

00:13:20,430 --> 00:13:25,620
hand

00:13:20,880 --> 00:13:28,920
so at work the stuff that I do turns out

00:13:25,620 --> 00:13:30,779
not to be very performance bound that's

00:13:28,920 --> 00:13:32,940
not really the problem the problem we

00:13:30,779 --> 00:13:34,440
face is coming up with like a you know

00:13:32,940 --> 00:13:36,899
an interesting solution to an

00:13:34,440 --> 00:13:39,750
interesting question so we'd be quite

00:13:36,899 --> 00:13:41,699
happy to compromise some aspect of our

00:13:39,750 --> 00:13:43,889
architecture if it let us express our

00:13:41,699 --> 00:13:45,899
business rules like ridiculously clearly

00:13:43,889 --> 00:13:47,880
I wouldn't really matter if that was

00:13:45,899 --> 00:13:48,810
slow or if some software engineer had to

00:13:47,880 --> 00:13:50,819
do some more work

00:13:48,810 --> 00:13:52,620
the most difficult thing we have is

00:13:50,819 --> 00:13:54,300
talking to our users about our

00:13:52,620 --> 00:13:56,670
requirements and expressing them cleanly

00:13:54,300 --> 00:13:59,250
and if we can do that that's solving our

00:13:56,670 --> 00:14:01,019
problem because our problem is relating

00:13:59,250 --> 00:14:03,149
to our users so your architecture might

00:14:01,019 --> 00:14:05,339
but you might go I really need to make

00:14:03,149 --> 00:14:06,600
this a low-level concept and it's really

00:14:05,339 --> 00:14:08,399
important to me that there's some

00:14:06,600 --> 00:14:09,750
client-server interaction going on here

00:14:08,399 --> 00:14:11,880
and I really need to get my network

00:14:09,750 --> 00:14:13,290
channel organized and that's great if

00:14:11,880 --> 00:14:14,670
you're trying to scale something or

00:14:13,290 --> 00:14:16,680
build for the cloud and your primary

00:14:14,670 --> 00:14:18,269
problems are technical great then that's

00:14:16,680 --> 00:14:21,209
your architecture that's what should be

00:14:18,269 --> 00:14:23,100
up front for us what should be up front

00:14:21,209 --> 00:14:25,529
is our business rules how things are

00:14:23,100 --> 00:14:27,149
rules that say well you know if it's in

00:14:25,529 --> 00:14:28,889
four days time and we think there's a

00:14:27,149 --> 00:14:30,300
20% chance of rain then we'll say

00:14:28,889 --> 00:14:32,639
scattered showers or should we say

00:14:30,300 --> 00:14:34,350
something else entirely and the details

00:14:32,639 --> 00:14:36,810
of how we do the processing are less

00:14:34,350 --> 00:14:38,459
important they're not irrelevant by any

00:14:36,810 --> 00:14:40,350
stretch of the imagination but they're

00:14:38,459 --> 00:14:42,569
not necessarily what you need to expose

00:14:40,350 --> 00:14:44,240
first to someone coming to try and

00:14:42,569 --> 00:14:47,399
understand the system from a top level

00:14:44,240 --> 00:14:49,199
so really it's the analogies that you

00:14:47,399 --> 00:14:53,600
capture in your system that are your

00:14:49,199 --> 00:14:57,000
architecture so good code structure

00:14:53,600 --> 00:14:58,769
corresponds to your content structure so

00:14:57,000 --> 00:15:00,930
your file system you've got this

00:14:58,769 --> 00:15:02,670
particular mapping when you go to the

00:15:00,930 --> 00:15:03,959
main objects and the main parts of the

00:15:02,670 --> 00:15:06,269
system that you're going to work with to

00:15:03,959 --> 00:15:09,269
extend it that corresponds well to your

00:15:06,269 --> 00:15:10,829
file system layout and that corresponds

00:15:09,269 --> 00:15:13,050
well to the problems that you're trying

00:15:10,829 --> 00:15:15,180
to solve for your users so a good

00:15:13,050 --> 00:15:16,829
architecture is context sensitive makes

00:15:15,180 --> 00:15:20,579
important things available while hiding

00:15:16,829 --> 00:15:23,339
unimportant things you get the idea so

00:15:20,579 --> 00:15:24,750
let's say let's make let's take this a

00:15:23,339 --> 00:15:27,209
bit be a bit more practical like I've

00:15:24,750 --> 00:15:29,339
got an actual problem to solve so this

00:15:27,209 --> 00:15:31,559
is where I rip into my own software like

00:15:29,339 --> 00:15:34,139
nobody's business so where is it slow

00:15:31,559 --> 00:15:34,700
where is it fast here my software is

00:15:34,139 --> 00:15:37,190
working

00:15:34,700 --> 00:15:39,890
well so this diagram here is now based

00:15:37,190 --> 00:15:42,050
off a dynamic analysis of my code so

00:15:39,890 --> 00:15:44,120
I've produced an XML document which says

00:15:42,050 --> 00:15:45,770
how long when running all of the tests

00:15:44,120 --> 00:15:49,700
everything took you know I just ran

00:15:45,770 --> 00:15:52,010
profile put that into a tree structure

00:15:49,700 --> 00:15:53,810
based on my file system and then made

00:15:52,010 --> 00:15:56,240
things colors and then fed it to this

00:15:53,810 --> 00:15:57,740
tool well I made things numbers and the

00:15:56,240 --> 00:15:59,960
tool made colors out of the numbers and

00:15:57,740 --> 00:16:01,640
straight away that you can't look at

00:15:59,960 --> 00:16:03,980
anything else on this whole picture

00:16:01,640 --> 00:16:05,600
except bubble sort nothing else is of

00:16:03,980 --> 00:16:07,790
any interest whatsoever the only thing

00:16:05,600 --> 00:16:09,470
on here that you can even see is the

00:16:07,790 --> 00:16:11,810
thing that's bad so I don't need to

00:16:09,470 --> 00:16:13,430
think at all I just like really I should

00:16:11,810 --> 00:16:14,330
just stop bubble sorting lists it's a

00:16:13,430 --> 00:16:18,380
terrible idea

00:16:14,330 --> 00:16:20,420
so that might be you know pretty obvious

00:16:18,380 --> 00:16:21,830
you wouldn't do that anyway but this is

00:16:20,420 --> 00:16:23,660
the kind of thing where if you wanted to

00:16:21,830 --> 00:16:25,280
say convince your manager that you

00:16:23,660 --> 00:16:27,740
really needed to optimize your bubble

00:16:25,280 --> 00:16:29,780
sorting or perhaps not do it you know

00:16:27,740 --> 00:16:32,390
you could pick this up and go this is a

00:16:29,780 --> 00:16:34,580
diagram of our whole codebase this is

00:16:32,390 --> 00:16:36,110
everything we do and the only thing

00:16:34,580 --> 00:16:37,460
that's red is this method here it's the

00:16:36,110 --> 00:16:39,170
hold up I know you don't understand

00:16:37,460 --> 00:16:40,640
technical problems but like you

00:16:39,170 --> 00:16:46,190
understand when something's red and this

00:16:40,640 --> 00:16:48,260
one's red so you know and my the the

00:16:46,190 --> 00:16:50,540
fundamental principle I have here is if

00:16:48,260 --> 00:16:52,940
you actually show someone something in a

00:16:50,540 --> 00:16:55,670
way that they can relate to you won't

00:16:52,940 --> 00:16:58,130
have to convince them of why something's

00:16:55,670 --> 00:17:00,380
a problem you go I have to work with

00:16:58,130 --> 00:17:02,300
this rubbish every day and you know I

00:17:00,380 --> 00:17:03,830
know you don't care whether it's red you

00:17:02,300 --> 00:17:05,209
care about whether your rket whether

00:17:03,830 --> 00:17:07,130
your prop business problems are being

00:17:05,209 --> 00:17:08,449
solved but this is causing me a problem

00:17:07,130 --> 00:17:10,640
to get that done

00:17:08,449 --> 00:17:12,620
okay so straightaway they can go okay so

00:17:10,640 --> 00:17:15,530
you've analyzed it you've got a thought

00:17:12,620 --> 00:17:17,240
process you've got a justification it

00:17:15,530 --> 00:17:20,660
relates to the work that you need to do

00:17:17,240 --> 00:17:22,250
and it's red so you know so straightaway

00:17:20,660 --> 00:17:26,030
you know this is I just think this is a

00:17:22,250 --> 00:17:28,339
great way to relate to people this this

00:17:26,030 --> 00:17:29,990
is my content structure so this is the

00:17:28,339 --> 00:17:32,240
classes these are the code dependencies

00:17:29,990 --> 00:17:35,690
of the things in what I just showed you

00:17:32,240 --> 00:17:37,700
so this this is fine Oh a neat little

00:17:35,690 --> 00:17:40,040
trick so this is just a in this video

00:17:37,700 --> 00:17:41,450
all along this lets you like dive in so

00:17:40,040 --> 00:17:42,860
I'm clicking on the left and opening

00:17:41,450 --> 00:17:44,330
sub-directories on the right and now I

00:17:42,860 --> 00:17:46,730
can really really see that it's bubble

00:17:44,330 --> 00:17:48,620
sort that's bright red so once again if

00:17:46,730 --> 00:17:50,950
you have a big project or something this

00:17:48,620 --> 00:17:54,260
particular tool it's called tree vis

00:17:50,950 --> 00:17:56,150
I'll share my actual slides all of the

00:17:54,260 --> 00:17:58,370
links to all of the stuff are in my

00:17:56,150 --> 00:18:00,410
slide notes so if you want stuff it's in

00:17:58,370 --> 00:18:01,910
there so there we go

00:18:00,410 --> 00:18:06,050
you should make it dynamic now where was

00:18:01,910 --> 00:18:08,059
I yes bad structure so this has nothing

00:18:06,050 --> 00:18:09,740
to do with that file system diagram I

00:18:08,059 --> 00:18:12,620
showed you can any of you see any links

00:18:09,740 --> 00:18:15,050
I sure can't so you know straight away

00:18:12,620 --> 00:18:17,030
I've broken one of the relationships

00:18:15,050 --> 00:18:18,740
that's in my system maybe this is

00:18:17,030 --> 00:18:21,890
actually not a bad code structure what

00:18:18,740 --> 00:18:24,050
maybe I mean you know it looks fairly

00:18:21,890 --> 00:18:26,840
bad most of that I think is because I'm

00:18:24,050 --> 00:18:28,309
doing things like running tests which

00:18:26,840 --> 00:18:30,620
interact with lots of parts of the

00:18:28,309 --> 00:18:33,410
system at once because this is based on

00:18:30,620 --> 00:18:35,630
a dynamic analysis so I tried this other

00:18:33,410 --> 00:18:37,400
way of structuring the diagram based on

00:18:35,630 --> 00:18:41,179
a force model that the software also

00:18:37,400 --> 00:18:43,610
does and it didn't look any better so

00:18:41,179 --> 00:18:45,559
you know probably I need to go do some

00:18:43,610 --> 00:18:47,510
work also these things fail for large

00:18:45,559 --> 00:18:51,200
diagrams this is that same picture for

00:18:47,510 --> 00:18:53,840
all of matplotlib so so each so that

00:18:51,200 --> 00:18:55,550
fuzz the others you can see the fuzz

00:18:53,840 --> 00:18:57,679
fairly well on this projector most of

00:18:55,550 --> 00:18:59,540
that fuzz is little tiny lines between

00:18:57,679 --> 00:19:00,920
connectors so when you get up to large

00:18:59,540 --> 00:19:02,900
pictures you need to be able to dive

00:19:00,920 --> 00:19:07,100
into this stuff so a large diagram fail

00:19:02,900 --> 00:19:08,480
unfortunately and and that's most of

00:19:07,100 --> 00:19:09,980
where I've got with these pictures so

00:19:08,480 --> 00:19:14,120
mostly what I want to go from here is

00:19:09,980 --> 00:19:16,010
okay so think what what's important

00:19:14,120 --> 00:19:18,020
about your applications that you need to

00:19:16,010 --> 00:19:19,130
look at so I want someone who who's

00:19:18,020 --> 00:19:20,900
working on some code that doesn't

00:19:19,130 --> 00:19:23,960
understand something to stick up their

00:19:20,900 --> 00:19:25,550
hand and say what is it can anyone think

00:19:23,960 --> 00:19:26,090
of anything they could apply to these

00:19:25,550 --> 00:19:38,150
tools too

00:19:26,090 --> 00:19:40,460
yeah right so I'll repeat I'll just

00:19:38,150 --> 00:19:43,070
repeat the question like okay so the

00:19:40,460 --> 00:19:45,140
question was he's got a you know web

00:19:43,070 --> 00:19:47,030
application and he's got a data model

00:19:45,140 --> 00:19:48,620
and he doesn't understand exactly what's

00:19:47,030 --> 00:19:50,390
making what calls so it's a kind of

00:19:48,620 --> 00:19:52,700
complicated piece of debugging that he's

00:19:50,390 --> 00:19:54,770
got to do and you could like you know

00:19:52,700 --> 00:19:56,480
put a breakpoint in or something but you

00:19:54,770 --> 00:19:58,850
know that doesn't show you the structure

00:19:56,480 --> 00:20:00,530
that may be an analysis tool but if you

00:19:58,850 --> 00:20:01,880
want to try and learn so I have similar

00:20:00,530 --> 00:20:04,130
problems at work it's

00:20:01,880 --> 00:20:05,660
a database thing but I need to work out

00:20:04,130 --> 00:20:07,100
we're in some kind of complex

00:20:05,660 --> 00:20:09,320
relationship something's actually

00:20:07,100 --> 00:20:11,540
getting called in the first place I can

00:20:09,320 --> 00:20:13,580
sit down I can load up when peb and I

00:20:11,540 --> 00:20:15,980
can go I put a brake foot here when it's

00:20:13,580 --> 00:20:17,420
been called from this module if it's

00:20:15,980 --> 00:20:19,550
after this condition you know I can

00:20:17,420 --> 00:20:22,070
build up based on my own analysis some

00:20:19,550 --> 00:20:24,230
complex way to get at the problem or I

00:20:22,070 --> 00:20:26,600
could just as easily record this stuff

00:20:24,230 --> 00:20:28,070
in this kind of tree structure which

00:20:26,600 --> 00:20:30,800
I've designed before so I could do

00:20:28,070 --> 00:20:32,690
things like say alright rather than that

00:20:30,800 --> 00:20:34,820
I'll wrap it decorate around my function

00:20:32,690 --> 00:20:36,920
and I'll work out who's calling me and

00:20:34,820 --> 00:20:38,870
I'll put plus one on a counter that

00:20:36,920 --> 00:20:40,610
makes that relevant and then I'll just

00:20:38,870 --> 00:20:42,620
build a whole tree diagram and say okay

00:20:40,610 --> 00:20:44,420
so what parts of the code are calling

00:20:42,620 --> 00:20:46,910
this thing and possibly at watch stage

00:20:44,420 --> 00:20:49,250
and the city in the execution flow so

00:20:46,910 --> 00:20:51,200
this is where we could you know it's now

00:20:49,250 --> 00:20:52,310
very open-ended I'm not trying to tell

00:20:51,200 --> 00:20:54,020
you which one of these things is

00:20:52,310 --> 00:20:56,150
important someone else might be there

00:20:54,020 --> 00:20:57,890
CPU time that's really important or

00:20:56,150 --> 00:21:00,020
they're Network overheads

00:20:57,890 --> 00:21:02,060
or they might need to do a percentage

00:21:00,020 --> 00:21:04,670
graph of of why does it slow down

00:21:02,060 --> 00:21:07,040
sometimes or what time of day relating

00:21:04,670 --> 00:21:08,420
these numbers together so that that's

00:21:07,040 --> 00:21:11,840
where I'm sort of headed with those is

00:21:08,420 --> 00:21:13,430
that I really want people to if nothing

00:21:11,840 --> 00:21:14,690
else just check out these two tools

00:21:13,430 --> 00:21:16,310
Treves and gorse

00:21:14,690 --> 00:21:17,510
and just watch them don't even think

00:21:16,310 --> 00:21:18,140
about it just go hey that's really

00:21:17,510 --> 00:21:19,820
interesting

00:21:18,140 --> 00:21:21,410
now I've got some Python code I'm more

00:21:19,820 --> 00:21:23,690
than happy to share for building up the

00:21:21,410 --> 00:21:25,850
tree structures that let you take a new

00:21:23,690 --> 00:21:28,270
metric like line count or coverage or

00:21:25,850 --> 00:21:30,800
CPU time and get it into that structure

00:21:28,270 --> 00:21:32,870
so you know just approach me so crazy

00:21:30,800 --> 00:21:34,340
ideas okay you've looked at one of these

00:21:32,870 --> 00:21:36,740
pictures why not simplify your

00:21:34,340 --> 00:21:38,750
architecture based on these dependencies

00:21:36,740 --> 00:21:40,850
or based on CPU time and go you know

00:21:38,750 --> 00:21:42,800
look I know it seemed important to

00:21:40,850 --> 00:21:45,350
fixing this problem but it's detrimental

00:21:42,800 --> 00:21:47,240
to people understanding this code why

00:21:45,350 --> 00:21:49,370
don't why don't I use these diagrams to

00:21:47,240 --> 00:21:52,370
go that connection there should have got

00:21:49,370 --> 00:21:55,070
severed so if I go back to my my picture

00:21:52,370 --> 00:21:56,870
here I might well understand that you

00:21:55,070 --> 00:22:01,310
know there is some some structure that I

00:21:56,870 --> 00:22:04,130
can see I've got to watch the thing this

00:22:01,310 --> 00:22:06,170
structure down here that's fine this

00:22:04,130 --> 00:22:07,580
structure here that's not too bad these

00:22:06,170 --> 00:22:10,760
things are just pointing out to the tail

00:22:07,580 --> 00:22:12,650
nodes that's good but you know whatever

00:22:10,760 --> 00:22:15,240
is going on here is clearly a problem

00:22:12,650 --> 00:22:19,820
this there's large reach up here

00:22:15,240 --> 00:22:22,830
what's that about so I would argue that

00:22:19,820 --> 00:22:24,450
actively using these tools to going and

00:22:22,830 --> 00:22:31,050
analyze your architecture is something

00:22:24,450 --> 00:22:33,450
you can do so tools of the future these

00:22:31,050 --> 00:22:35,100
kinds of things should be really easy I

00:22:33,450 --> 00:22:36,330
had to search for quite some time I was

00:22:35,100 --> 00:22:38,670
very careful to make sure that I only

00:22:36,330 --> 00:22:40,440
use tools that already existed that were

00:22:38,670 --> 00:22:43,740
really really easy on account of I'm

00:22:40,440 --> 00:22:45,450
really really slow and that that anyone

00:22:43,740 --> 00:22:46,830
in the audience could go hey I remember

00:22:45,450 --> 00:22:48,660
that thing that guy said I'm just gonna

00:22:46,830 --> 00:22:51,720
check it out and take a look so all of

00:22:48,660 --> 00:22:52,830
these tools do work now I think that

00:22:51,720 --> 00:22:55,110
some of this stuff should be in your

00:22:52,830 --> 00:22:56,880
editor we shouldn't end this with a tool

00:22:55,110 --> 00:22:58,440
that you have to go and explicitly run

00:22:56,880 --> 00:23:00,270
and use even though that's useful there

00:22:58,440 --> 00:23:03,000
should be things on should be part of

00:23:00,270 --> 00:23:04,410
your github metrics or on there was that

00:23:03,000 --> 00:23:06,270
fellow I don't know if the guy from

00:23:04,410 --> 00:23:08,040
SourceForge was in the room who gave the

00:23:06,270 --> 00:23:09,270
previous keynote but he you know that's

00:23:08,040 --> 00:23:10,620
something that he could implement these

00:23:09,270 --> 00:23:12,660
diagrams you know that could be a

00:23:10,620 --> 00:23:14,309
selling point for how to look at your

00:23:12,660 --> 00:23:15,960
project hosting if you have stant if you

00:23:14,309 --> 00:23:17,880
have lots of projects at work and you

00:23:15,960 --> 00:23:19,650
have some infrastructure for standard

00:23:17,880 --> 00:23:21,270
ways to set them up you know make some

00:23:19,650 --> 00:23:22,410
of these diagrams automatically get

00:23:21,270 --> 00:23:24,059
integrate them into your automated

00:23:22,410 --> 00:23:25,920
documentation make them something that

00:23:24,059 --> 00:23:28,230
goes out to new developers to give them

00:23:25,920 --> 00:23:29,880
a hand pull them into your editor make

00:23:28,230 --> 00:23:31,710
these it you know make these things

00:23:29,880 --> 00:23:33,450
color your line counts so that you can

00:23:31,710 --> 00:23:35,550
see lines of code or functions which are

00:23:33,450 --> 00:23:37,020
heavily used to be a flag to any

00:23:35,550 --> 00:23:39,030
developer that comes across them that

00:23:37,020 --> 00:23:40,320
they're important take a look at what

00:23:39,030 --> 00:23:42,270
some other people are saying about the

00:23:40,320 --> 00:23:44,760
visualization of ideas when it comes to

00:23:42,270 --> 00:23:46,140
code take a look at light table for

00:23:44,760 --> 00:23:50,790
example see the ideas that they're

00:23:46,140 --> 00:23:52,260
putting forward so that's oh that's the

00:23:50,790 --> 00:23:56,940
refresh rate apparently PowerPoint just

00:23:52,260 --> 00:23:58,890
quits when you get to the last slide so

00:23:56,940 --> 00:24:01,350
for better or for worse that's my

00:23:58,890 --> 00:24:03,750
presentation does anyone have any

00:24:01,350 --> 00:24:06,570
questions or comments down the front

00:24:03,750 --> 00:24:08,460
here if you can wait for the mic yeah

00:24:06,570 --> 00:24:13,640
basically we have about five minutes for

00:24:08,460 --> 00:24:16,110
questions so okay thanks for that um

00:24:13,640 --> 00:24:18,270
I've been playing with the hyperbolic

00:24:16,110 --> 00:24:19,590
treatise for some time and one of the

00:24:18,270 --> 00:24:22,110
things that bugs me I don't know if it's

00:24:19,590 --> 00:24:23,580
because Xerox has a patent on one of the

00:24:22,110 --> 00:24:26,250
algorithms but there doesn't seem to be

00:24:23,580 --> 00:24:27,780
an open standard for being able to

00:24:26,250 --> 00:24:28,220
switch between viewers so you kind of

00:24:27,780 --> 00:24:30,289
spend

00:24:28,220 --> 00:24:31,880
I'm converting your data for a

00:24:30,289 --> 00:24:33,650
particular viewer which then goes out of

00:24:31,880 --> 00:24:35,090
fashion and it's not built-in have you

00:24:33,650 --> 00:24:37,850
got any thoughts about what parts of

00:24:35,090 --> 00:24:40,190
this space would be best suited to focus

00:24:37,850 --> 00:24:42,440
the open source community on well the

00:24:40,190 --> 00:24:44,240
the Treves application that I use to

00:24:42,440 --> 00:24:46,429
build these diagrams happens to do a

00:24:44,240 --> 00:24:49,130
good number of diagrams it has a very

00:24:46,429 --> 00:24:50,630
amenable XML format underlying it so

00:24:49,130 --> 00:24:53,360
yeah you're totally right no two

00:24:50,630 --> 00:24:55,309
applications will use the same thing the

00:24:53,360 --> 00:24:57,530
it's not terribly visible which

00:24:55,309 --> 00:24:59,630
applications are good or not it you know

00:24:57,530 --> 00:25:02,059
it wasn't just like a Google tree

00:24:59,630 --> 00:25:04,190
visualization hit number one go there

00:25:02,059 --> 00:25:05,809
was a fair bit of that didn't work

00:25:04,190 --> 00:25:07,789
I don't can't get the libraries for that

00:25:05,809 --> 00:25:08,690
that's out of date it ran it didn't fund

00:25:07,789 --> 00:25:11,150
you know there was a lot of just

00:25:08,690 --> 00:25:12,710
stuffing around so I guess my main

00:25:11,150 --> 00:25:14,900
recommendation would be use this one

00:25:12,710 --> 00:25:17,390
because it's it's like it actually does

00:25:14,900 --> 00:25:19,039
the business and also the XML things you

00:25:17,390 --> 00:25:20,360
can reuse them yourself you know that's

00:25:19,039 --> 00:25:23,809
actually a really sensible file

00:25:20,360 --> 00:25:27,520
structure so tree vis was the is the

00:25:23,809 --> 00:25:29,750
Google search I think's for the talk um

00:25:27,520 --> 00:25:31,580
with the keynote this morning and you

00:25:29,750 --> 00:25:33,919
know kind of this call to arms for

00:25:31,580 --> 00:25:35,000
having more developers be managers and

00:25:33,919 --> 00:25:35,630
it sounds like you're kind of in that

00:25:35,000 --> 00:25:37,549
category

00:25:35,630 --> 00:25:39,409
I'm just wondering do you feel that

00:25:37,549 --> 00:25:41,960
these techniques are helping you you

00:25:39,409 --> 00:25:44,240
know tell the bosses here's the red

00:25:41,960 --> 00:25:45,980
light you know and and actually do you

00:25:44,240 --> 00:25:48,289
feel it's it's really being effective in

00:25:45,980 --> 00:25:50,120
the way that you can help manage the

00:25:48,289 --> 00:25:51,860
team and work with them or even you know

00:25:50,120 --> 00:25:53,000
maybe better express these things to

00:25:51,860 --> 00:25:54,950
senior management so they actually

00:25:53,000 --> 00:25:56,780
understand what's going on can you talk

00:25:54,950 --> 00:25:59,240
a little bit about the value of these in

00:25:56,780 --> 00:26:01,820
yeah you and your job yeah absolutely so

00:25:59,240 --> 00:26:05,179
this is a little bit of attention but so

00:26:01,820 --> 00:26:08,539
my role is now I manage between one and

00:26:05,179 --> 00:26:10,340
four developers at any given time that

00:26:08,539 --> 00:26:12,260
sounds like it should be a lead

00:26:10,340 --> 00:26:14,330
developer role not a manager role but it

00:26:12,260 --> 00:26:16,429
isn't it's a manager role where I work

00:26:14,330 --> 00:26:18,850
and so yeah I very much exist in that

00:26:16,429 --> 00:26:21,380
space between like arguing for timelines

00:26:18,850 --> 00:26:23,659
talking about why we need to go maintain

00:26:21,380 --> 00:26:26,000
something etc etc and these things are

00:26:23,659 --> 00:26:28,460
for incredible value in persuading your

00:26:26,000 --> 00:26:30,409
manager that you've got an actual proper

00:26:28,460 --> 00:26:32,960
good reason because everyone knows that

00:26:30,409 --> 00:26:36,950
developers are smart but it's often in a

00:26:32,960 --> 00:26:38,330
kind of dangerous way and so you really

00:26:36,950 --> 00:26:41,270
need to convince your manager that

00:26:38,330 --> 00:26:42,200
you're smart in a safe trustable way so

00:26:41,270 --> 00:26:43,640
I would say that it's

00:26:42,200 --> 00:26:45,500
about taking to your manager and having

00:26:43,640 --> 00:26:47,540
your manager do a problem analysis

00:26:45,500 --> 00:26:49,130
that's and come up with an agreement to

00:26:47,540 --> 00:26:51,350
your position it's not going to happen

00:26:49,130 --> 00:26:52,850
they don't have the time but what will

00:26:51,350 --> 00:26:54,860
happen is that you can expose your

00:26:52,850 --> 00:26:56,300
thought process put a sensible

00:26:54,860 --> 00:26:58,070
justification for it and it will make

00:26:56,300 --> 00:27:00,290
your job a lot easier if you can use

00:26:58,070 --> 00:27:02,060
diagrams illustrations and a simple case

00:27:00,290 --> 00:27:03,830
for why it is that you need to do

00:27:02,060 --> 00:27:07,910
something so super valuable from that

00:27:03,830 --> 00:27:09,140
perspective we don't have any more time

00:27:07,910 --> 00:27:10,580
for questions so I'm going to have to

00:27:09,140 --> 00:27:12,380
wrap it up here

00:27:10,580 --> 00:27:14,180
yeah but I'd like to thank Tennessee for

00:27:12,380 --> 00:27:19,910
giving the talk today we've got him

00:27:14,180 --> 00:27:23,300
running of course and he gets a nice

00:27:19,910 --> 00:27:25,370
coffee mug and some some African swallow

00:27:23,300 --> 00:27:26,420
coffee which you've been trying already

00:27:25,370 --> 00:27:29,410
so it's actually pretty good

00:27:26,420 --> 00:27:29,410

YouTube URL: https://www.youtube.com/watch?v=vOyF_LDeXTc


