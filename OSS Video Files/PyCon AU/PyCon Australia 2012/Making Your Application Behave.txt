Title: Making Your Application Behave
Publication date: 2012-08-23
Playlist: PyCon Australia 2012
Description: 
	Benno Rice
Behave is a tool for behaviour-driven development inspired by the Cucumber tool for Ruby. It allows developers and stakeholders to agree on how a particular piece of software should behave using an English-like Given-When-Then syntax and f
Captions: 
	00:00:00,030 --> 00:00:03,720
when a rice is a software architect from

00:00:01,890 --> 00:00:06,839
Melbourne with vari it says here he's a

00:00:03,720 --> 00:00:08,670
very diverse experiment with he's

00:00:06,839 --> 00:00:10,290
written everything from proxy servers to

00:00:08,670 --> 00:00:12,420
web applications for helping conference

00:00:10,290 --> 00:00:14,519
delegates meet each other so today he'll

00:00:12,420 --> 00:00:18,049
be introducing us to behavior driven

00:00:14,519 --> 00:00:18,049
development please make him welcome

00:00:21,439 --> 00:00:28,769
alrighty so this is a well it's another

00:00:24,990 --> 00:00:31,800
talk about this kind of thing and but

00:00:28,769 --> 00:00:34,920
it's also talk about you know why do we

00:00:31,800 --> 00:00:38,399
test like what is the end goal of this

00:00:34,920 --> 00:00:40,020
testing process and so you know we have

00:00:38,399 --> 00:00:43,530
unit tests we have integration tests we

00:00:40,020 --> 00:00:45,840
have functional tests but we derive

00:00:43,530 --> 00:00:47,100
these tests from the same thing that

00:00:45,840 --> 00:00:48,539
we're deriving our application from

00:00:47,100 --> 00:00:52,110
which is the requirements of the

00:00:48,539 --> 00:00:54,149
application and so you sort of start

00:00:52,110 --> 00:00:57,120
with a set of requirements and then you

00:00:54,149 --> 00:00:58,260
create a set of tests and a set in an

00:00:57,120 --> 00:00:59,730
application or the other way around

00:00:58,260 --> 00:01:03,239
depending on which way you like to do

00:00:59,730 --> 00:01:05,070
these things but wouldn't it be good if

00:01:03,239 --> 00:01:09,689
you could actually just write out a set

00:01:05,070 --> 00:01:12,000
of requirements and then test them so

00:01:09,689 --> 00:01:14,369
that's where we get to this kind of

00:01:12,000 --> 00:01:16,590
thing and it's interesting I run across

00:01:14,369 --> 00:01:19,409
a bunch of people who go behavior what

00:01:16,590 --> 00:01:22,500
now and I run across a bunch of people

00:01:19,409 --> 00:01:27,119
who go have certain Anthony's who shall

00:01:22,500 --> 00:01:29,369
remain Baxter who go what a job and so

00:01:27,119 --> 00:01:31,259
on and so forth the main reason they

00:01:29,369 --> 00:01:32,490
sort of it hits the agile button and

00:01:31,259 --> 00:01:33,810
people start getting weird about it is

00:01:32,490 --> 00:01:37,530
it came out of a company called thought

00:01:33,810 --> 00:01:39,240
works you may have heard of them there

00:01:37,530 --> 00:01:42,150
was a guy called Dan North who worked

00:01:39,240 --> 00:01:43,920
there and he wrote a really interesting

00:01:42,150 --> 00:01:45,540
blog post about it in which he described

00:01:43,920 --> 00:01:50,250
he defined behavior driven driven

00:01:45,540 --> 00:01:51,659
development as that which makes absolute

00:01:50,250 --> 00:01:56,100
sense I don't understand why people

00:01:51,659 --> 00:01:58,049
don't like it I prefer this I'm not

00:01:56,100 --> 00:02:02,219
really an ex driven development kind of

00:01:58,049 --> 00:02:04,530
guy I try to think about more this kind

00:02:02,219 --> 00:02:06,420
of thing behavior testing allows you to

00:02:04,530 --> 00:02:08,429
test your application as a whole so

00:02:06,420 --> 00:02:09,869
we're talking holistic we're not talking

00:02:08,429 --> 00:02:12,150
unit level we're talking whole of

00:02:09,869 --> 00:02:13,550
application in such a way that all

00:02:12,150 --> 00:02:15,410
stakeholders and I mean

00:02:13,550 --> 00:02:17,210
everyone not the people writing it but

00:02:15,410 --> 00:02:19,310
also the people who are defining it are

00:02:17,210 --> 00:02:22,040
the people who are owning it and so and

00:02:19,310 --> 00:02:25,070
so forth can define and understand

00:02:22,040 --> 00:02:26,630
what's being tested it's that last and

00:02:25,070 --> 00:02:29,390
that last bit is very important if you

00:02:26,630 --> 00:02:30,650
can get it to the point where you're not

00:02:29,390 --> 00:02:33,440
right you're not the one writing the

00:02:30,650 --> 00:02:35,060
actual tests you're writing the tests in

00:02:33,440 --> 00:02:37,730
concert with the people you're writing

00:02:35,060 --> 00:02:39,050
them for suddenly you've got a much

00:02:37,730 --> 00:02:40,730
bigger avenue open to you to get

00:02:39,050 --> 00:02:44,720
agreement on what your applications

00:02:40,730 --> 00:02:47,570
meant to be doing so break it down

00:02:44,720 --> 00:02:50,330
further it allows everybody involved to

00:02:47,570 --> 00:02:52,940
write tests not just the coders I do

00:02:50,330 --> 00:02:56,050
this at work I sit down and argue with

00:02:52,940 --> 00:02:58,160
my boss repeatedly over what things mean

00:02:56,050 --> 00:03:00,050
and encourages thinking about the

00:02:58,160 --> 00:03:01,580
application in a natural and consistent

00:03:00,050 --> 00:03:05,840
language and I'll show you how that

00:03:01,580 --> 00:03:07,550
works in a bit so a bit of history as I

00:03:05,840 --> 00:03:09,230
mentioned Dan los del North worked at

00:03:07,550 --> 00:03:11,540
ThoughtWorks thought works at the time

00:03:09,230 --> 00:03:14,360
was a big Java shop so he used to deal

00:03:11,540 --> 00:03:16,340
with a lot of that that would be a

00:03:14,360 --> 00:03:21,470
j-unit test case with all the boring

00:03:16,340 --> 00:03:25,910
bits taken out yes let's look at the

00:03:21,470 --> 00:03:27,230
word public No so one day he came across

00:03:25,910 --> 00:03:29,810
a tool that a colleague had written

00:03:27,230 --> 00:03:34,220
called agile Docs and what agile Doc's

00:03:29,810 --> 00:03:38,660
did is it took these sort of test names

00:03:34,220 --> 00:03:41,510
here and turned it into that so he was

00:03:38,660 --> 00:03:43,700
taking the tests for a particular

00:03:41,510 --> 00:03:46,610
component and turning it into the

00:03:43,700 --> 00:03:48,440
definition of the component and so Dan

00:03:46,610 --> 00:03:49,580
looked at that and went why can't we do

00:03:48,440 --> 00:03:54,470
that the other way around

00:03:49,580 --> 00:03:56,810
and so instead of defining your tests

00:03:54,470 --> 00:03:58,540
from your requirements and then defining

00:03:56,810 --> 00:04:00,770
your application from the requirements

00:03:58,540 --> 00:04:03,709
you just define your application from

00:04:00,770 --> 00:04:08,180
the tests because the tests are the

00:04:03,709 --> 00:04:11,420
requirements so we he needed to come up

00:04:08,180 --> 00:04:13,400
with a language for that and so he

00:04:11,420 --> 00:04:15,050
turned to a another colleague who was

00:04:13,400 --> 00:04:16,820
more on their business analysis side and

00:04:15,050 --> 00:04:19,430
they used a template that they used for

00:04:16,820 --> 00:04:21,380
a lot of things and they broke through

00:04:19,430 --> 00:04:23,360
an application down into features and

00:04:21,380 --> 00:04:27,720
features are defined by the following

00:04:23,360 --> 00:04:29,670
statements as an actor an actor

00:04:27,720 --> 00:04:31,020
doesn't have to be a user directly it

00:04:29,670 --> 00:04:32,910
doesn't even have to be a person it

00:04:31,020 --> 00:04:39,000
could be an API consumer it could be a

00:04:32,910 --> 00:04:42,480
Mars rover so as an actor in order to

00:04:39,000 --> 00:04:45,710
gain some benefit so in order to land on

00:04:42,480 --> 00:04:52,010
the surface of Mars without crashing I

00:04:45,710 --> 00:04:55,680
want a feature I want to parachute or

00:04:52,010 --> 00:05:00,120
skycrane I want to sky crane I really

00:04:55,680 --> 00:05:01,590
want to sky crane so you define a

00:05:00,120 --> 00:05:03,270
feature in those terms and what that's

00:05:01,590 --> 00:05:05,370
gaining from you is it's saying who's

00:05:03,270 --> 00:05:07,130
doing it why they're doing it and what

00:05:05,370 --> 00:05:09,540
they're hoping to achieve from it and

00:05:07,130 --> 00:05:13,860
then a feature is defined by a set of

00:05:09,540 --> 00:05:15,810
scenarios given a precondition given the

00:05:13,860 --> 00:05:18,290
I am currently however many thousand

00:05:15,810 --> 00:05:22,470
kilometres above the surface of Mars

00:05:18,290 --> 00:05:24,090
when an action when I cross the certain

00:05:22,470 --> 00:05:27,900
point where I need to start slowing down

00:05:24,090 --> 00:05:30,660
a lot then an expected outcome happens

00:05:27,900 --> 00:05:36,720
my parachute my sky crane yes my sky

00:05:30,660 --> 00:05:38,720
crane deploys yes my sky crane this is a

00:05:36,720 --> 00:05:43,050
lot funny isn't when I was rehearsing it

00:05:38,720 --> 00:05:47,520
so the next trick is to turn that into

00:05:43,050 --> 00:05:48,870
an actual language so given that I have

00:05:47,520 --> 00:05:51,270
a predilection for helping people meet

00:05:48,870 --> 00:05:52,740
up on flights that's what a feature

00:05:51,270 --> 00:05:55,590
block looks like that comes at the start

00:05:52,740 --> 00:05:57,270
of a file you're naming your feature and

00:05:55,590 --> 00:06:00,300
there's the three statement that I

00:05:57,270 --> 00:06:03,240
mentioned and that's what a scenario

00:06:00,300 --> 00:06:06,000
looks like and so you'll notice that we

00:06:03,240 --> 00:06:07,020
can use the word and here to follow on

00:06:06,000 --> 00:06:09,979
and make sure the whole thing actually

00:06:07,020 --> 00:06:12,120
makes some vague sort of English sense

00:06:09,979 --> 00:06:13,380
we actually have localization too you

00:06:12,120 --> 00:06:15,570
can use different languages it's kind of

00:06:13,380 --> 00:06:17,520
cool but given I'm at the meetup page

00:06:15,570 --> 00:06:19,050
when I fill in a bunch of data and click

00:06:17,520 --> 00:06:20,280
the button then my flight should appear

00:06:19,050 --> 00:06:22,020
in the list and my name should appear

00:06:20,280 --> 00:06:23,820
next to my flight that's the kind of

00:06:22,020 --> 00:06:25,979
thing that like I was saying before I

00:06:23,820 --> 00:06:27,870
can understand it you can understand it

00:06:25,979 --> 00:06:30,450
my boss could understand it even though

00:06:27,870 --> 00:06:32,070
he doesn't write any code so we can

00:06:30,450 --> 00:06:33,300
argue about that if this is the

00:06:32,070 --> 00:06:35,460
application I'm building until we

00:06:33,300 --> 00:06:37,020
actually have that description right the

00:06:35,460 --> 00:06:39,610
trick then is to bind it to something

00:06:37,020 --> 00:06:42,639
that can actually test it so

00:06:39,610 --> 00:06:44,530
there's a the tool that everyone knows

00:06:42,639 --> 00:06:48,430
about for this is called cucumber which

00:06:44,530 --> 00:06:50,110
is a ruby tool you can test Java code

00:06:48,430 --> 00:06:52,120
because of JRuby it can theoretically

00:06:50,110 --> 00:06:53,469
test Python code because a Ruby Python

00:06:52,120 --> 00:06:56,590
but if you ever want to use Ruby Python

00:06:53,469 --> 00:06:58,750
don't it embeds a Python interpreter

00:06:56,590 --> 00:07:00,039
inside a Ruby interpreter and what could

00:06:58,750 --> 00:07:02,949
go wrong

00:07:00,039 --> 00:07:05,319
so there are a bunch of tools that got

00:07:02,949 --> 00:07:07,620
developed previously the two that still

00:07:05,319 --> 00:07:12,129
exist are called lettuce and freshen

00:07:07,620 --> 00:07:15,400
obviously they had a bunch of issues

00:07:12,129 --> 00:07:19,629
that made them annoying for me to use

00:07:15,400 --> 00:07:23,289
mainly they not go into that later but

00:07:19,629 --> 00:07:25,210
in the end I wrote my own and well I

00:07:23,289 --> 00:07:26,949
started writing my own and then Richard

00:07:25,210 --> 00:07:31,210
drones got interested in me and he also

00:07:26,949 --> 00:07:34,949
wrote it with me so let's show you a bit

00:07:31,210 --> 00:07:37,569
of what this looks like so let me just

00:07:34,949 --> 00:07:41,800
switch applications on this so that I

00:07:37,569 --> 00:07:45,370
know what I'm doing okay so this is the

00:07:41,800 --> 00:07:47,560
meetup page for those of you who do

00:07:45,370 --> 00:07:49,960
didn't see it when it was didn't use it

00:07:47,560 --> 00:07:52,779
it's fairly straightforward you've got

00:07:49,960 --> 00:07:55,270
the arrival times the airline so and so

00:07:52,779 --> 00:08:00,729
forth a list of people and a form down

00:07:55,270 --> 00:08:03,550
the bottom to add yourself and here's

00:08:00,729 --> 00:08:05,919
the code that did it it's it's a django

00:08:03,550 --> 00:08:08,169
app it's nothing particularly

00:08:05,919 --> 00:08:09,580
fascinating I think I'm gonna have to

00:08:08,169 --> 00:08:11,860
reduce my font size a bit on this one

00:08:09,580 --> 00:08:14,289
just to fit things on but we'll see how

00:08:11,860 --> 00:08:15,789
we go so models everything so I'm gonna

00:08:14,289 --> 00:08:19,599
try and wrap a few tests around this

00:08:15,789 --> 00:08:22,300
thing so the first the way we do this in

00:08:19,599 --> 00:08:28,060
behave is we we don't create a new file

00:08:22,300 --> 00:08:29,729
we create a new folder we hold

00:08:28,060 --> 00:08:33,659
everything in a features directory and

00:08:29,729 --> 00:08:36,459
inside that we have a steps directory

00:08:33,659 --> 00:08:38,919
the steps are the implementations of the

00:08:36,459 --> 00:08:42,570
steps the way that we're doing so first

00:08:38,919 --> 00:08:42,570
things first let's have some steps

00:08:44,420 --> 00:08:50,450
there's a feature as app icon attendee

00:08:47,300 --> 00:08:52,120
in order to and so forth I want to see a

00:08:50,450 --> 00:08:58,400
list of flights that I can add myself to

00:08:52,120 --> 00:09:00,530
so first thing we really care about is

00:08:58,400 --> 00:09:01,910
the meetup forms there so when I fetch

00:09:00,530 --> 00:09:08,260
the meetup page then I should see the

00:09:01,910 --> 00:09:11,300
meetup form so we'll save that as that

00:09:08,260 --> 00:09:15,080
at which point we can go over here and

00:09:11,300 --> 00:09:17,390
run behave and it will happily tell us

00:09:15,080 --> 00:09:19,970
that it can't find the step definition

00:09:17,390 --> 00:09:21,200
for that so this is what the output of

00:09:19,970 --> 00:09:22,730
behavior looks like you can see we're

00:09:21,200 --> 00:09:26,450
actually just echoing out the feature

00:09:22,730 --> 00:09:28,310
text you can actually copy and paste

00:09:26,450 --> 00:09:31,070
that bit back into a feature file and

00:09:28,310 --> 00:09:34,490
it'll run but what we do is we colorize

00:09:31,070 --> 00:09:36,320
based on what happened the cyan one got

00:09:34,490 --> 00:09:38,420
skipped because the yellow one was

00:09:36,320 --> 00:09:42,830
missing and we actually tell you at the

00:09:38,420 --> 00:09:48,730
bottom how you can implement that so we

00:09:42,830 --> 00:09:56,470
can copy this and go back over to our

00:09:48,730 --> 00:10:02,540
project we can paste that in save it and

00:09:56,470 --> 00:10:06,200
go back at which point it doesn't work

00:10:02,540 --> 00:10:08,300
because we're asserting false but so

00:10:06,200 --> 00:10:11,570
where the red text obviously means a

00:10:08,300 --> 00:10:12,860
failure now watches who are watching

00:10:11,570 --> 00:10:15,530
would notice that I didn't actually

00:10:12,860 --> 00:10:17,600
import anything in that that's because

00:10:15,530 --> 00:10:19,070
we cheat we evaluate that we don't

00:10:17,600 --> 00:10:20,540
actually import it mainly so we don't

00:10:19,070 --> 00:10:23,090
pollute the module name space and all

00:10:20,540 --> 00:10:28,540
sorts of other stuff but we can do that

00:10:23,090 --> 00:10:32,590
and that's fine so we should now

00:10:28,540 --> 00:10:32,590
implement this step properly

00:10:35,550 --> 00:10:40,839
so we're just using requests because as

00:10:39,190 --> 00:10:44,200
we all found out this morning request is

00:10:40,839 --> 00:10:45,670
awesome we have our server URL which I

00:10:44,200 --> 00:10:47,649
am running off to the side pay no

00:10:45,670 --> 00:10:48,640
attention to that and so when I fetch

00:10:47,649 --> 00:10:50,529
the meetup page that I'm going to

00:10:48,640 --> 00:10:52,930
request that and store the content

00:10:50,529 --> 00:10:56,860
somewhere I can use it later so now when

00:10:52,930 --> 00:10:59,080
I run this we'll notice that's gone

00:10:56,860 --> 00:11:00,370
green and our next step is being is

00:10:59,080 --> 00:11:06,970
complaining about being unemployment

00:11:00,370 --> 00:11:09,399
'add so we'll go and implement that so

00:11:06,970 --> 00:11:11,589
we're just using beautifulsoup

00:11:09,399 --> 00:11:12,730
oair powers again we're finding a form

00:11:11,589 --> 00:11:16,860
element making sure it's the right one

00:11:12,730 --> 00:11:23,920
asserting everything's there so now

00:11:16,860 --> 00:11:28,830
everything is happy so the next so

00:11:23,920 --> 00:11:31,209
moving along we can implement more steps

00:11:28,830 --> 00:11:36,820
so we want to see that there's a table

00:11:31,209 --> 00:11:38,680
of flights there now if I run that this

00:11:36,820 --> 00:11:40,089
is part of the fun part notice that

00:11:38,680 --> 00:11:42,760
we've already got a passing step because

00:11:40,089 --> 00:11:45,070
we use the same text behave match that

00:11:42,760 --> 00:11:47,890
to the same step definition and ran it

00:11:45,070 --> 00:11:50,260
just as the other one did the only one

00:11:47,890 --> 00:11:52,300
we're missing is the other sort of the

00:11:50,260 --> 00:11:57,760
then step that we've got and we can just

00:11:52,300 --> 00:12:01,959
implement that one what about two three

00:11:57,760 --> 00:12:04,480
yes and we're just making sure there's a

00:12:01,959 --> 00:12:06,670
table there and it's got some rows and

00:12:04,480 --> 00:12:08,620
so this comes back to the canonical

00:12:06,670 --> 00:12:11,440
issue of testing which is that you're

00:12:08,620 --> 00:12:14,250
defining how these tests pass so if you

00:12:11,440 --> 00:12:16,240
cheat you're only two lying to yourself

00:12:14,250 --> 00:12:18,190
so there we go

00:12:16,240 --> 00:12:20,380
we're now testing that we can fetch the

00:12:18,190 --> 00:12:22,600
page we can see the form and we can see

00:12:20,380 --> 00:12:28,560
the flight table now the problem with

00:12:22,600 --> 00:12:30,850
this is that if I go back over here yeah

00:12:28,560 --> 00:12:33,990
there's my Django server running there

00:12:30,850 --> 00:12:33,990
if I kill that

00:12:35,589 --> 00:12:48,170
nothing is good so behave provides an a

00:12:42,459 --> 00:12:55,430
way for you to set up the environment in

00:12:48,170 --> 00:12:59,870
which you're testing in so if I just

00:12:55,430 --> 00:13:02,240
save that and I'll go through it so

00:12:59,870 --> 00:13:03,740
there's a lot of stuff here but the

00:13:02,240 --> 00:13:05,899
important part is we're pulling in

00:13:03,740 --> 00:13:07,910
whisky intercept so that we don't have

00:13:05,899 --> 00:13:09,829
to run a real server you can start up

00:13:07,910 --> 00:13:11,000
your own real server and a subprocess if

00:13:09,829 --> 00:13:11,839
you like that that can be finicky you

00:13:11,000 --> 00:13:13,610
need to make sure it's actually

00:13:11,839 --> 00:13:18,560
listening for requests before you start

00:13:13,610 --> 00:13:21,410
sending requests to it we're installing

00:13:18,560 --> 00:13:26,050
the we're doing a bunch of stuff here

00:13:21,410 --> 00:13:28,819
that's purely to fake out requests and

00:13:26,050 --> 00:13:32,660
we're also starting to use this context

00:13:28,819 --> 00:13:34,190
object here behave passes this context

00:13:32,660 --> 00:13:36,949
things into all these functions this is

00:13:34,190 --> 00:13:39,819
a hook hooks allow you to get in and set

00:13:36,949 --> 00:13:45,709
state up there's before all before

00:13:39,819 --> 00:13:47,510
feature and before scenario and so they

00:13:45,709 --> 00:13:51,889
allow you just setup and teardown stuff

00:13:47,510 --> 00:13:53,870
although we've teardown the context

00:13:51,889 --> 00:13:55,850
object will jettison stuff that you've

00:13:53,870 --> 00:13:59,209
set at a scenario on feature levels it

00:13:55,850 --> 00:14:00,529
exits those scenarios and features so in

00:13:59,209 --> 00:14:01,610
before all we're just setting up our

00:14:00,529 --> 00:14:04,370
whiskey intercept and we're also

00:14:01,610 --> 00:14:07,370
providing a useful function to set that

00:14:04,370 --> 00:14:13,550
to get a browser URL which we'll use up

00:14:07,370 --> 00:14:17,120
here instead of this so we're now using

00:14:13,550 --> 00:14:22,189
the browser URL function to get that so

00:14:17,120 --> 00:14:23,480
now if I rerun my tests you know they

00:14:22,189 --> 00:14:26,000
all work again because we're going

00:14:23,480 --> 00:14:29,630
through the whiskey bypass rather than

00:14:26,000 --> 00:14:31,959
running a server so I am just going to

00:14:29,630 --> 00:14:31,959
do

00:14:39,220 --> 00:14:44,160
so this I'm just setting up some stuff

00:14:41,860 --> 00:14:44,160
for later

00:14:45,540 --> 00:14:51,910
what I've set up here is because I'm

00:14:50,590 --> 00:14:54,460
about to start doing some tests where I

00:14:51,910 --> 00:14:57,460
actually add things I also need to set

00:14:54,460 --> 00:15:02,320
up a database environment for Django to

00:14:57,460 --> 00:15:04,330
work in so I'm just taking a Django test

00:15:02,320 --> 00:15:09,720
run I host the test suite run a hostage

00:15:04,330 --> 00:15:09,720
and using it to set up a test database

00:15:15,210 --> 00:15:22,840
okay so yes that's right so let's create

00:15:18,400 --> 00:15:24,100
a new there we go so now we're going to

00:15:22,840 --> 00:15:25,690
try adding an entry to a page this

00:15:24,100 --> 00:15:28,690
should look familiar this is exactly the

00:15:25,690 --> 00:15:33,370
one I had up in the slides so if I have

00:15:28,690 --> 00:15:36,640
that as new attendee dot feature if I

00:15:33,370 --> 00:15:40,120
run that I'll get the usual sort of step

00:15:36,640 --> 00:15:49,030
missing error but we can implement some

00:15:40,120 --> 00:15:55,150
steps for that so again we're just using

00:15:49,030 --> 00:15:56,710
the the context functions we're using a

00:15:55,150 --> 00:16:01,510
mechanized browser that we're setting up

00:15:56,710 --> 00:16:03,100
inside the environment I'm just going to

00:16:01,510 --> 00:16:04,840
try and blow through a few bits because

00:16:03,100 --> 00:16:06,670
I want to get to some interesting stuff

00:16:04,840 --> 00:16:08,800
so you'll see here that we're actually

00:16:06,670 --> 00:16:13,240
creating and destroying the database as

00:16:08,800 --> 00:16:15,220
we go through and so now we're failing

00:16:13,240 --> 00:16:16,300
on this when I select DJ 1320 is my

00:16:15,220 --> 00:16:18,880
flight now this is where I'm going to

00:16:16,300 --> 00:16:30,970
show you one of the neat tricks we can

00:16:18,880 --> 00:16:34,270
do yes okay so what we've got here we

00:16:30,970 --> 00:16:35,830
can parameterize the steps the step

00:16:34,270 --> 00:16:37,360
match IRA just tells it that we're going

00:16:35,830 --> 00:16:42,400
to use regular expressions as our step

00:16:37,360 --> 00:16:46,720
matcher this is not the default and I'll

00:16:42,400 --> 00:16:48,310
show you why in a bit so while we're

00:16:46,720 --> 00:16:50,200
doing there is in the instead of just

00:16:48,310 --> 00:16:52,460
using straight text in the in the

00:16:50,200 --> 00:16:53,690
decorator we're using

00:16:52,460 --> 00:16:56,420
regular expression which then gets

00:16:53,690 --> 00:17:04,100
passed through as a parameter into the

00:16:56,420 --> 00:17:05,959
step so if I run this you'll see that

00:17:04,100 --> 00:17:08,060
the steps passing and we've bolded out

00:17:05,959 --> 00:17:10,190
the flight number so you can see that

00:17:08,060 --> 00:17:12,560
we've pulled it in as a parameter so

00:17:10,190 --> 00:17:16,720
that means that I can go into this and I

00:17:12,560 --> 00:17:25,190
could change the flight number in here

00:17:16,720 --> 00:17:30,370
and the step would still pass as you can

00:17:25,190 --> 00:17:30,370
see we just bolded out the same thing so

00:17:30,730 --> 00:17:35,720
the issue with regular expressions

00:17:33,500 --> 00:17:39,950
arises if I want to cry I wanted this to

00:17:35,720 --> 00:17:42,050
have a default like that it would come

00:17:39,950 --> 00:17:43,460
in as a named argument and this would

00:17:42,050 --> 00:17:45,770
fail because it's being passed as a

00:17:43,460 --> 00:17:53,530
positional argument I get around that by

00:17:45,770 --> 00:17:56,210
doing this but that's ugly as hell so

00:17:53,530 --> 00:17:57,200
Richard I don't know if you've come

00:17:56,210 --> 00:17:58,460
across this one but you should've cause

00:17:57,200 --> 00:18:02,000
it's awesome came up with this library

00:17:58,460 --> 00:18:05,420
called pars which is the default first

00:18:02,000 --> 00:18:08,270
step definitions and it looks like that

00:18:05,420 --> 00:18:10,850
if that looks like the format syntax

00:18:08,270 --> 00:18:12,770
that's because it is it runs the format

00:18:10,850 --> 00:18:13,940
syntax in Reverse which gets you a whole

00:18:12,770 --> 00:18:16,850
bunch of things they'll come in as

00:18:13,940 --> 00:18:18,320
positional or name based depending what

00:18:16,850 --> 00:18:20,930
you need and you can also do things like

00:18:18,320 --> 00:18:24,050
that if it was an integer and it would

00:18:20,930 --> 00:18:27,640
get passed in as an integer so now if I

00:18:24,050 --> 00:18:27,640
run that it should run exactly the same

00:18:29,260 --> 00:18:37,630
so there's that and I'll just implement

00:18:34,220 --> 00:18:37,630
the rest of these really quickly

00:18:40,000 --> 00:18:52,630
I can run that and there we go so two

00:18:49,030 --> 00:18:54,040
last things quickly first one is just a

00:18:52,630 --> 00:18:55,030
couple of features of the Gherkin

00:18:54,040 --> 00:19:05,110
language itself

00:18:55,030 --> 00:19:06,490
one is tables our DNA looks awful sorry

00:19:05,110 --> 00:19:11,760
I didn't test this with the resolution

00:19:06,490 --> 00:19:14,860
turned up this high okay I'm just gonna

00:19:11,760 --> 00:19:17,920
I'm just gonna barrel on through so this

00:19:14,860 --> 00:19:20,520
here is a table if the display was wide

00:19:17,920 --> 00:19:23,710
enough you would be able to see that it

00:19:20,520 --> 00:19:29,380
it just uses bars of the pipe symbols as

00:19:23,710 --> 00:19:30,640
columns and it hands that in as a it

00:19:29,380 --> 00:19:32,770
doesn't hand it in as a dict you can

00:19:30,640 --> 00:19:35,230
have multiple rows if you want each row

00:19:32,770 --> 00:19:39,970
can be addressable as a dict or as as a

00:19:35,230 --> 00:19:43,720
list and so we can then use that instead

00:19:39,970 --> 00:19:46,480
of having instead of having this when I

00:19:43,720 --> 00:19:48,730
select and I select and I enter I can

00:19:46,480 --> 00:19:51,910
just use this but the problem is I've

00:19:48,730 --> 00:19:53,800
already implemented when I select and I

00:19:51,910 --> 00:19:57,940
select and I enter and all that and I

00:19:53,800 --> 00:19:58,780
don't really want to have to do it all

00:19:57,940 --> 00:20:04,810
over again

00:19:58,780 --> 00:20:06,300
so I can do this which implements set

00:20:04,810 --> 00:20:11,040
entering the name and the email address

00:20:06,300 --> 00:20:11,040
and then I can implement

00:20:22,500 --> 00:20:26,169
what I'm doing here is I'm getting all

00:20:24,909 --> 00:20:28,840
the information out of the table that's

00:20:26,169 --> 00:20:30,220
been handed in and then I'm generating a

00:20:28,840 --> 00:20:32,470
bunch of new steps that I could then

00:20:30,220 --> 00:20:35,830
execute this allows me to reuse steps

00:20:32,470 --> 00:20:39,610
that I've written even inside the

00:20:35,830 --> 00:20:41,200
definitions of other steps so now that I

00:20:39,610 --> 00:20:47,740
have that whole lot implemented I can

00:20:41,200 --> 00:20:50,440
run that and get all of that you can see

00:20:47,740 --> 00:20:55,110
here to the table step passes and we're

00:20:50,440 --> 00:20:55,110
all good so I will just

00:21:02,770 --> 00:21:10,960
so now I can actually test the other

00:21:05,880 --> 00:21:14,140
check steps as well and the last one

00:21:10,960 --> 00:21:22,410
that I wanted to do is a really quick

00:21:14,140 --> 00:21:22,410
one so one of the tests that I have is

00:21:23,580 --> 00:21:31,690
yep that's our on is that I try and be

00:21:28,330 --> 00:21:34,120
careful about what how I handle Twitter

00:21:31,690 --> 00:21:35,610
IDs that come in and I've got a bunch of

00:21:34,120 --> 00:21:40,570
different formats that I accept them in

00:21:35,610 --> 00:21:42,700
so I can use a scenario outline scenario

00:21:40,570 --> 00:21:45,220
outlines loop over the elements in this

00:21:42,700 --> 00:21:48,700
example substituting things that match

00:21:45,220 --> 00:21:50,970
this header ID up in the actual step

00:21:48,700 --> 00:21:53,020
definition and the best part is that

00:21:50,970 --> 00:22:01,390
because I've already implemented all the

00:21:53,020 --> 00:22:13,450
steps I can just save that and I can all

00:22:01,390 --> 00:22:15,040
gets tested so to sum up comeback tests

00:22:13,450 --> 00:22:19,150
can define your application we already

00:22:15,040 --> 00:22:21,809
knew this but your definition of your

00:22:19,150 --> 00:22:27,540
application can specify your tests and

00:22:21,809 --> 00:22:27,540
this is a good thing and thank you

00:22:34,020 --> 00:22:45,790
thanks for any questions just one fairly

00:22:43,660 --> 00:22:47,350
quick one in the the bit where you had

00:22:45,790 --> 00:22:48,640
the the Python code you were defining

00:22:47,350 --> 00:22:50,680
the implementations it looked like

00:22:48,640 --> 00:22:52,780
you're repeatedly with different

00:22:50,680 --> 00:22:54,400
decorators of course to planning import

00:22:52,780 --> 00:22:58,420
all the same thing again again how did

00:22:54,400 --> 00:23:01,360
that actually work sorry deaf in Perl

00:22:58,420 --> 00:23:02,890
yes okay so we don't care what you call

00:23:01,360 --> 00:23:04,570
your function we just care that it

00:23:02,890 --> 00:23:06,670
exists

00:23:04,570 --> 00:23:09,940
this decorator here and final that isn't

00:23:06,670 --> 00:23:14,050
going off the side of screen okay so at

00:23:09,940 --> 00:23:18,400
when will match any when statement that

00:23:14,050 --> 00:23:19,870
matches the step text there and so the

00:23:18,400 --> 00:23:21,520
way decorators work is this function

00:23:19,870 --> 00:23:23,320
will get passed in as a parameter to a

00:23:21,520 --> 00:23:24,270
function that that returns and we just

00:23:23,320 --> 00:23:27,700
scroll that away

00:23:24,270 --> 00:23:32,920
so we don't mind that you call it I mean

00:23:27,700 --> 00:23:40,540
I could call this and it would still

00:23:32,920 --> 00:23:43,000
work the same way we actually had an

00:23:40,540 --> 00:23:46,420
amusing bugs that I fixed yesterday that

00:23:43,000 --> 00:23:49,390
was we used a step as the normal step

00:23:46,420 --> 00:23:50,890
function and one of the one of the

00:23:49,390 --> 00:23:52,990
things you can use instead of at when

00:23:50,890 --> 00:23:55,930
you've obviously given when and then we

00:23:52,990 --> 00:23:57,820
can also do that if you wanted to match

00:23:55,930 --> 00:24:01,240
any kind of step but of course if you

00:23:57,820 --> 00:24:03,580
did that step def step then you don't

00:24:01,240 --> 00:24:11,820
have step anymore

00:24:03,580 --> 00:24:11,820
yes thanks sorry

00:24:15,620 --> 00:24:22,290
okay so I've got a question that sort of

00:24:19,260 --> 00:24:24,570
a I'd like your feedback or comment on a

00:24:22,290 --> 00:24:26,550
criticism that I've had about behavior

00:24:24,570 --> 00:24:27,720
driven development as a conceptual level

00:24:26,550 --> 00:24:30,060
that I don't know if it's just my

00:24:27,720 --> 00:24:31,440
understanding or just it's just you know

00:24:30,060 --> 00:24:34,890
it's different and it's a different

00:24:31,440 --> 00:24:36,240
thing I have a real problem with

00:24:34,890 --> 00:24:38,070
programming languages that try to say

00:24:36,240 --> 00:24:40,020
hey they're human readable because they

00:24:38,070 --> 00:24:42,270
never are you look like human length

00:24:40,020 --> 00:24:43,800
it's kind of like human language but the

00:24:42,270 --> 00:24:45,420
idea that your manager is going to be

00:24:43,800 --> 00:24:46,950
able to write this isn't the case

00:24:45,420 --> 00:24:49,410
because your manager is not going to use

00:24:46,950 --> 00:24:52,080
that phrasing every single time yes

00:24:49,410 --> 00:24:55,410
that's why it well okay here here is

00:24:52,080 --> 00:24:57,930
where that's actually a good thing it

00:24:55,410 --> 00:24:59,310
makes you do it all together so one of

00:24:57,930 --> 00:25:02,580
the points I tried to make before is it

00:24:59,310 --> 00:25:03,870
in encourages a common natural

00:25:02,580 --> 00:25:06,960
consistent language around your

00:25:03,870 --> 00:25:08,460
application so if you're always writing

00:25:06,960 --> 00:25:09,990
these things together you're going to

00:25:08,460 --> 00:25:11,580
have those arguments about whether this

00:25:09,990 --> 00:25:13,470
thing is called this or that or the

00:25:11,580 --> 00:25:17,850
other and thus what it means for that

00:25:13,470 --> 00:25:19,740
thing to exist in a common place and so

00:25:17,850 --> 00:25:21,720
it makes people like makes everybody

00:25:19,740 --> 00:25:23,190
think more about what the application

00:25:21,720 --> 00:25:26,400
actually is and what it's supposed to be

00:25:23,190 --> 00:25:28,320
doing okay so to contrast this approach

00:25:26,400 --> 00:25:29,730
which is effectively have one language

00:25:28,320 --> 00:25:31,020
with which you define it here is one

00:25:29,730 --> 00:25:33,120
document where it's defined and then a

00:25:31,020 --> 00:25:34,470
bunch of support to say this is how am I

00:25:33,120 --> 00:25:36,390
going to process this yeah functional

00:25:34,470 --> 00:25:38,190
level another approach would be

00:25:36,390 --> 00:25:39,960
essentially and I think you alluded to

00:25:38,190 --> 00:25:41,610
it when said this is where one of them

00:25:39,960 --> 00:25:41,910
originally came from effectively Donald

00:25:41,610 --> 00:25:43,740
Knuth's

00:25:41,910 --> 00:25:46,560
of literate programming thing where you

00:25:43,740 --> 00:25:48,750
write one piece of one document but it's

00:25:46,560 --> 00:25:50,430
output can be compiled as a PDF or it

00:25:48,750 --> 00:25:52,320
could be compiled as running code or it

00:25:50,430 --> 00:25:55,770
can be compiled as series of different

00:25:52,320 --> 00:25:57,570
artifacts the the documentation value of

00:25:55,770 --> 00:26:00,120
what is here could equally just be you

00:25:57,570 --> 00:26:03,630
know well marked up comments in a normal

00:26:00,120 --> 00:26:05,220
unit test yes it could be okay is there

00:26:03,630 --> 00:26:06,930
a particular virtue to having it in a

00:26:05,220 --> 00:26:08,490
separate file with a whole framework

00:26:06,930 --> 00:26:09,570
around it as opposed to just defining

00:26:08,490 --> 00:26:12,450
them as unit tests and having a

00:26:09,570 --> 00:26:15,330
mechanism for extracting them as Docs I

00:26:12,450 --> 00:26:18,540
would say that's a matter of how you and

00:26:15,330 --> 00:26:21,810
your team work best if this works for

00:26:18,540 --> 00:26:23,430
you because your boss if you stick code

00:26:21,810 --> 00:26:25,650
in front of them they break out in hives

00:26:23,430 --> 00:26:26,640
or if they stay or or even worse if you

00:26:25,650 --> 00:26:30,000
stick code in front of them they

00:26:26,640 --> 00:26:32,280
Ryan edited then then this would be a

00:26:30,000 --> 00:26:35,309
better one for you to use but if your

00:26:32,280 --> 00:26:41,760
team is so shall we say less inclined to

00:26:35,309 --> 00:26:45,030
break stuff then I mean to take a random

00:26:41,760 --> 00:26:46,170
example requests I think would work a

00:26:45,030 --> 00:26:47,580
lot better in the way you describe

00:26:46,170 --> 00:26:49,770
because a lot of the people who are

00:26:47,580 --> 00:26:52,410
using it and its intended audience are

00:26:49,770 --> 00:26:55,380
all fairly up with how it all works and

00:26:52,410 --> 00:26:56,640
for them and for me even going through

00:26:55,380 --> 00:26:58,230
that stuff and having the code right

00:26:56,640 --> 00:27:02,250
there and seeing it like the what's that

00:26:58,230 --> 00:27:07,679
tool that Jeremy Ashkenaz wrote no no

00:27:02,250 --> 00:27:10,020
the other one he he wrote one where that

00:27:07,679 --> 00:27:12,120
you have the the the comments down one

00:27:10,020 --> 00:27:14,460
side and the actual code down the other

00:27:12,120 --> 00:27:15,929
and so if you actually go to I think

00:27:14,460 --> 00:27:16,919
it's the the CoffeeScript and a lot of

00:27:15,929 --> 00:27:19,380
the other ones you actually get this

00:27:16,919 --> 00:27:21,450
this dual dual pane view of everything

00:27:19,380 --> 00:27:23,130
and it's actually really good and for

00:27:21,450 --> 00:27:24,690
things that are targeted at people like

00:27:23,130 --> 00:27:27,059
you me and most of the people in this

00:27:24,690 --> 00:27:28,429
room that's awesome because you get to

00:27:27,059 --> 00:27:31,260
see the code you get to see how it works

00:27:28,429 --> 00:27:32,880
my boss and I'm guessing some other

00:27:31,260 --> 00:27:35,130
people's bosses when you try and show

00:27:32,880 --> 00:27:37,350
them code they go here whatever but if I

00:27:35,130 --> 00:27:39,240
show them this and say do you agree with

00:27:37,350 --> 00:27:41,429
this set of statements or even better if

00:27:39,240 --> 00:27:42,450
I bring up this one here do you agree

00:27:41,429 --> 00:27:44,910
with that this set of statements

00:27:42,450 --> 00:27:47,490
describes a scenario this scenario of

00:27:44,910 --> 00:27:48,990
this feature and he says yes especially

00:27:47,490 --> 00:27:50,400
if I get that an email when he then

00:27:48,990 --> 00:27:52,410
comes back next week and says no no it's

00:27:50,400 --> 00:27:54,809
right so I wasn't like right shall we

00:27:52,410 --> 00:27:59,040
change this document now and then I can

00:27:54,809 --> 00:28:02,450
go back and make it work again that's

00:27:59,040 --> 00:28:02,450

YouTube URL: https://www.youtube.com/watch?v=u8BOKuNkmhg


