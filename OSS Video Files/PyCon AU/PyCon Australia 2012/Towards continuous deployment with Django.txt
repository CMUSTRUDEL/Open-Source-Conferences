Title: Towards continuous deployment with Django
Publication date: 2012-08-23
Playlist: PyCon Australia 2012
Description: 
	Roger Barnes
It's no secret that python is fantastic when it comes to rapid prototyping and development. When it comes to deploying a web application, the road to glory isn't as well paved and navigating the array of techniques and tools can be daunt
Captions: 
	00:00:02,600 --> 00:00:07,259
okay everybody if you could have your

00:00:04,650 --> 00:00:08,610
seats before we start the next talk and

00:00:07,259 --> 00:00:10,500
some of you may have heard this is who

00:00:08,610 --> 00:00:14,460
came in just another public service

00:00:10,500 --> 00:00:17,550
announcement unfortunately at 11:40 Indo

00:00:14,460 --> 00:00:19,760
and three we did have down that John

00:00:17,550 --> 00:00:21,859
Christianson would be doing a talk on

00:00:19,760 --> 00:00:24,109
roundup more than a bug tracker

00:00:21,859 --> 00:00:27,599
unfortunately he is no longer available

00:00:24,109 --> 00:00:30,449
and his talk has been replaced

00:00:27,599 --> 00:00:33,660
Russell Keith McGee will be presenting a

00:00:30,449 --> 00:00:37,860
no bad pony on the django web frameworks

00:00:33,660 --> 00:00:39,510
that's 1140 in doe and three the online

00:00:37,860 --> 00:00:42,750
schedule has been updated to reflect

00:00:39,510 --> 00:00:44,820
this back on two topics

00:00:42,750 --> 00:00:46,739
so Roger Burns is a programmer with more

00:00:44,820 --> 00:00:48,539
than 12 years experience and he has

00:00:46,739 --> 00:00:52,920
joined the Python community in the last

00:00:48,539 --> 00:00:55,969
three and he's currently with tech

00:00:52,920 --> 00:00:58,770
startup Arriba as co-founder and CTO

00:00:55,969 --> 00:01:00,690
before that he was a technical lead

00:00:58,770 --> 00:01:02,399
developing java enterprise applications

00:01:00,690 --> 00:01:05,070
but today is going to talk about

00:01:02,399 --> 00:01:11,850
continuous deployment with django so

00:01:05,070 --> 00:01:14,760
please give a warm welcome to roger hey

00:01:11,850 --> 00:01:16,470
hi everyone yes we're going to talk

00:01:14,760 --> 00:01:18,600
today about continuous deployment with

00:01:16,470 --> 00:01:20,009
django and i think it's one of people's

00:01:18,600 --> 00:01:22,470
favorite bugbears when they're doing any

00:01:20,009 --> 00:01:25,530
web development so I'm gonna do sort of

00:01:22,470 --> 00:01:28,680
a 50,000 foot view of this third thing

00:01:25,530 --> 00:01:30,500
and do a couple of Python dive bombs

00:01:28,680 --> 00:01:32,759
into some specific things along the way

00:01:30,500 --> 00:01:34,470
I know there's a lot of different ways

00:01:32,759 --> 00:01:36,750
you can do this this is my story

00:01:34,470 --> 00:01:39,990
you're welcome to disagree you can

00:01:36,750 --> 00:01:41,310
disagree at me if you want well we can

00:01:39,990 --> 00:01:42,570
have a talk after this I'll be around

00:01:41,310 --> 00:01:45,299
tomorrow for a bit as well if you want

00:01:42,570 --> 00:01:47,790
to discuss this in further detail so a

00:01:45,299 --> 00:01:49,759
little bit about me as as mentioned I am

00:01:47,790 --> 00:01:52,560
now that co-founder and CTO at Arriba

00:01:49,759 --> 00:01:54,270
we're failing you start up and this

00:01:52,560 --> 00:01:56,810
particular talk is a case study of

00:01:54,270 --> 00:01:59,310
applying continuous deployment to that

00:01:56,810 --> 00:02:01,530
but in the past I have worked in a much

00:01:59,310 --> 00:02:03,210
more established environment where the

00:02:01,530 --> 00:02:05,969
aspects of this continuous deployment

00:02:03,210 --> 00:02:08,390
has sort of evolved and I've sort of cut

00:02:05,969 --> 00:02:10,979
my teeth on that over the last 12 years

00:02:08,390 --> 00:02:11,950
so ya bout three years of Python 12

00:02:10,979 --> 00:02:13,450
years web development

00:02:11,950 --> 00:02:15,220
I also have other interests so if you

00:02:13,450 --> 00:02:17,200
like frisbee photography beer or

00:02:15,220 --> 00:02:20,260
adventure you'll get along just fine

00:02:17,200 --> 00:02:22,060
with me two in particular I've got some

00:02:20,260 --> 00:02:25,030
tazzy photos throughout these slides if

00:02:22,060 --> 00:02:26,890
in case the tech gets too heavy

00:02:25,030 --> 00:02:28,989
so there's a lot of other talks and I'm

00:02:26,890 --> 00:02:31,120
loving every talk that's come to this

00:02:28,989 --> 00:02:32,470
point for me I'm just trying to glue

00:02:31,120 --> 00:02:33,849
together a lot of the details that

00:02:32,470 --> 00:02:35,709
everyone else has already covered about

00:02:33,849 --> 00:02:36,370
testing and cloud deployments and all

00:02:35,709 --> 00:02:40,840
that sort of stuff

00:02:36,370 --> 00:02:42,519
so that makes it really good so let's

00:02:40,840 --> 00:02:43,810
just get some definitions out of the way

00:02:42,519 --> 00:02:45,610
we talked about continuous delivery

00:02:43,810 --> 00:02:47,920
continuous deployment there is a

00:02:45,610 --> 00:02:49,720
semantic argument there for these

00:02:47,920 --> 00:02:52,360
purposes I'm going to say that the same

00:02:49,720 --> 00:02:53,640
thing getting the rapid incremental

00:02:52,360 --> 00:02:56,349
low-risk delivery of high-quality

00:02:53,640 --> 00:02:58,690
valuable new functionality to users

00:02:56,349 --> 00:03:01,720
through automation of the build testing

00:02:58,690 --> 00:03:04,750
and deployment process we all just one

00:03:01,720 --> 00:03:06,160
buzzword bingo so it's basically

00:03:04,750 --> 00:03:08,829
deploying every good version of your

00:03:06,160 --> 00:03:11,769
software or being able to when and if

00:03:08,829 --> 00:03:13,870
you want to an Etsy who do that this

00:03:11,769 --> 00:03:16,150
stuff really well although with PHP or

00:03:13,870 --> 00:03:20,980
talk about it as the meantime - bad idea

00:03:16,150 --> 00:03:22,269
detection or reducing that rather and

00:03:20,980 --> 00:03:24,100
it's more than being about technology

00:03:22,269 --> 00:03:25,840
but certainly tools for automation but

00:03:24,100 --> 00:03:27,489
it does take a certain mindset and

00:03:25,840 --> 00:03:29,410
discipline people who are

00:03:27,489 --> 00:03:30,850
cross-functional and small sort of

00:03:29,410 --> 00:03:32,650
startup teams tend to be better at this

00:03:30,850 --> 00:03:33,910
sort of thing not everything is

00:03:32,650 --> 00:03:35,950
something you want to continuously

00:03:33,910 --> 00:03:37,510
deploy there's also some amount of

00:03:35,950 --> 00:03:39,519
process and convention that you usually

00:03:37,510 --> 00:03:41,470
want to have in place and this stuff is

00:03:39,519 --> 00:03:42,720
flexible and you can rewire it a lot of

00:03:41,470 --> 00:03:45,459
different ways

00:03:42,720 --> 00:03:46,650
why do continuous deployment I hope that

00:03:45,459 --> 00:03:49,810
question isn't too

00:03:46,650 --> 00:03:51,370
unanswered for people it's the it goes

00:03:49,810 --> 00:03:53,680
back to my chrome sort of keynote about

00:03:51,370 --> 00:03:56,829
failing fast winning fast or not failing

00:03:53,680 --> 00:03:59,410
at all ideally finding out quickly rapid

00:03:56,829 --> 00:04:01,900
feedback from real users of real use of

00:03:59,410 --> 00:04:05,200
your software things like real-time

00:04:01,900 --> 00:04:07,060
control not writing software that people

00:04:05,200 --> 00:04:08,380
turn out not to want six months down the

00:04:07,060 --> 00:04:11,560
track all those sorts of things are

00:04:08,380 --> 00:04:13,630
really good so in practice what this

00:04:11,560 --> 00:04:16,419
means is having a single path to

00:04:13,630 --> 00:04:18,400
production optimizing for resilience

00:04:16,419 --> 00:04:19,989
there's a catch phrase in the continuous

00:04:18,400 --> 00:04:22,630
delivery continuous deployment world

00:04:19,989 --> 00:04:23,970
about if it hurts do it more often so if

00:04:22,630 --> 00:04:25,770
your deployment

00:04:23,970 --> 00:04:28,230
is every two months and it takes you two

00:04:25,770 --> 00:04:31,140
weeks make that smaller faster more

00:04:28,230 --> 00:04:32,610
often until it doesn't hurt anymore and

00:04:31,140 --> 00:04:33,810
doing this it does become natural over

00:04:32,610 --> 00:04:35,820
time and the return on investment

00:04:33,810 --> 00:04:38,130
actually delivers even in a single

00:04:35,820 --> 00:04:40,680
person startup or single tech startup

00:04:38,130 --> 00:04:43,050
and as I said there's lots of ways to do

00:04:40,680 --> 00:04:46,800
this but here's what I've done so quick

00:04:43,050 --> 00:04:48,510
adventure I like visual stuff hopefully

00:04:46,800 --> 00:04:50,100
I can fill in some of the gaps along the

00:04:48,510 --> 00:04:53,490
way so we're in a development

00:04:50,100 --> 00:04:57,120
environment and we are writing code as

00:04:53,490 --> 00:04:59,670
normal and instead of running a local

00:04:57,120 --> 00:05:06,000
tech stack development sort of stack we

00:04:59,670 --> 00:05:09,900
actually wear my slides work oh excuse

00:05:06,000 --> 00:05:11,070
me we go to our virtualized environment

00:05:09,900 --> 00:05:15,000
which is running as close to a

00:05:11,070 --> 00:05:16,290
production system as possible from there

00:05:15,000 --> 00:05:18,570
once we've got our code written and

00:05:16,290 --> 00:05:19,830
tested we'll talk more about testing we

00:05:18,570 --> 00:05:23,640
will commit it to a source control

00:05:19,830 --> 00:05:26,580
repository standard best practice that

00:05:23,640 --> 00:05:28,620
commits onto main line by any developer

00:05:26,580 --> 00:05:30,750
will trigger a build process of some

00:05:28,620 --> 00:05:32,550
sort and this is where you can get into

00:05:30,750 --> 00:05:34,800
all kinds of different ways of doing it

00:05:32,550 --> 00:05:36,240
I'll show you what I've got which is

00:05:34,800 --> 00:05:38,280
somewhat early stage you can get a lot

00:05:36,240 --> 00:05:40,110
more complicated and maybe you want to

00:05:38,280 --> 00:05:41,160
maybe you don't but first what we're

00:05:40,110 --> 00:05:43,140
going to do is we're going to run all of

00:05:41,160 --> 00:05:44,850
our unit tests do some static analysis

00:05:43,140 --> 00:05:46,380
and coverage tests that run really

00:05:44,850 --> 00:05:49,290
quickly get back to you in a few seconds

00:05:46,380 --> 00:05:50,790
and ideally they should always pass

00:05:49,290 --> 00:05:52,290
because your developers already run the

00:05:50,790 --> 00:05:55,169
same tests in their development

00:05:52,290 --> 00:05:57,630
environments if and only if that passes

00:05:55,169 --> 00:05:59,820
we go into the functional testing stage

00:05:57,630 --> 00:06:01,740
we can run another suite of tests

00:05:59,820 --> 00:06:03,870
they're a bit more complicated and again

00:06:01,740 --> 00:06:07,110
you have to pass these before you get to

00:06:03,870 --> 00:06:09,150
the next stage we're now going to deploy

00:06:07,110 --> 00:06:11,430
that code into a staging environment

00:06:09,150 --> 00:06:13,169
we're going to test our data migration

00:06:11,430 --> 00:06:15,419
against the production copy of the code

00:06:13,169 --> 00:06:17,850
we might do some basic smoke tests UI

00:06:15,419 --> 00:06:19,220
tests and effectively you have a QA

00:06:17,850 --> 00:06:21,240
environment that can be used for

00:06:19,220 --> 00:06:22,680
validation before you actually go to

00:06:21,240 --> 00:06:25,260
production and again this is a

00:06:22,680 --> 00:06:27,300
virtualized environment it might not be

00:06:25,260 --> 00:06:27,780
local it could be in the cloud whatever

00:06:27,300 --> 00:06:31,500
that is

00:06:27,780 --> 00:06:33,690
some time finally if and only if that

00:06:31,500 --> 00:06:37,020
passes you can push the deploy button

00:06:33,690 --> 00:06:38,460
and so in this case I'm using fabric and

00:06:37,020 --> 00:06:41,430
the covers which we'll dig into and

00:06:38,460 --> 00:06:44,639
simply run fabric deploy which does lots

00:06:41,430 --> 00:06:46,319
of things which we'll look at that goes

00:06:44,639 --> 00:06:49,080
to your production environment which is

00:06:46,319 --> 00:06:50,460
also configured in the same way and you

00:06:49,080 --> 00:06:54,659
have happy users on your website

00:06:50,460 --> 00:06:57,539
hopefully those users produce data and

00:06:54,659 --> 00:07:00,449
as does your system so at this point you

00:06:57,539 --> 00:07:01,349
need to measure analyze monitor all

00:07:00,449 --> 00:07:02,580
those sorts of things

00:07:01,349 --> 00:07:04,110
I'll go through some of the tools

00:07:02,580 --> 00:07:06,330
Graham's already mentioned quite a few

00:07:04,110 --> 00:07:08,400
of these which is good if you want more

00:07:06,330 --> 00:07:10,620
details you can look up a lot of them I

00:07:08,400 --> 00:07:11,310
recommend all of them I'm actually using

00:07:10,620 --> 00:07:12,870
all of them

00:07:11,310 --> 00:07:14,940
I would like to consolidate but I

00:07:12,870 --> 00:07:17,039
haven't done that yet and then finally

00:07:14,940 --> 00:07:20,400
you can learn from that information and

00:07:17,039 --> 00:07:22,289
feedback into the or loop so that's

00:07:20,400 --> 00:07:24,030
basically the big picture that we're

00:07:22,289 --> 00:07:25,979
looking at and I've mentioned things

00:07:24,030 --> 00:07:27,870
like vagrant and fabric and Django and

00:07:25,979 --> 00:07:30,300
I'm gonna try and sort of put those

00:07:27,870 --> 00:07:34,289
pieces together and you may have

00:07:30,300 --> 00:07:36,030
recognized Jenkins in there as well so

00:07:34,289 --> 00:07:37,770
I've already have done this quite a bit

00:07:36,030 --> 00:07:40,530
make your environments all look the same

00:07:37,770 --> 00:07:42,719
if you can this avoid surprises when you

00:07:40,530 --> 00:07:44,729
go to production that means don't use

00:07:42,719 --> 00:07:46,409
run server in your development stack if

00:07:44,729 --> 00:07:47,580
you're using nginx in production and

00:07:46,409 --> 00:07:51,900
certainly don't use run server in

00:07:47,580 --> 00:07:54,630
production to do that I'm using

00:07:51,900 --> 00:07:57,419
something called vagrant and hopefully I

00:07:54,630 --> 00:07:58,949
won't get lynched for using Ruby based

00:07:57,419 --> 00:08:02,400
solution here

00:07:58,949 --> 00:08:04,319
basically it provisions what's at

00:08:02,400 --> 00:08:05,969
Oracles VirtualBox virtualized

00:08:04,319 --> 00:08:07,710
environments and it will let you

00:08:05,969 --> 00:08:09,120
provision them and and spin them up from

00:08:07,710 --> 00:08:10,440
scratch and then if you want you can

00:08:09,120 --> 00:08:12,690
throw it away and spin up another one

00:08:10,440 --> 00:08:15,960
and it does nice things like sharing

00:08:12,690 --> 00:08:17,969
folders and like with your development

00:08:15,960 --> 00:08:19,620
environment and opening ports and things

00:08:17,969 --> 00:08:21,539
like that for you so it's really nice

00:08:19,620 --> 00:08:23,580
and simple to use and once you have it

00:08:21,539 --> 00:08:24,870
you have a self-service development

00:08:23,580 --> 00:08:28,710
environment that other people can just

00:08:24,870 --> 00:08:30,180
pick up and use as well this is just

00:08:28,710 --> 00:08:31,440
what a vagrant file looks like it

00:08:30,180 --> 00:08:34,020
defines your base image your

00:08:31,440 --> 00:08:35,849
provisioning in my case I'm using puppet

00:08:34,020 --> 00:08:38,339
and I'm using the same puppet config

00:08:35,849 --> 00:08:41,779
throughout which we'll see pull it

00:08:38,339 --> 00:08:41,779
forwarding folder sharing and so on

00:08:43,260 --> 00:08:47,050
so the key takeaway here is having a

00:08:45,270 --> 00:08:48,910
repeatable version

00:08:47,050 --> 00:08:50,710
you might not want to use puppet or chef

00:08:48,910 --> 00:08:52,750
you can use things like build-out

00:08:50,710 --> 00:08:54,630
there's if you want you can write this

00:08:52,750 --> 00:08:56,680
in fabric or in shell scripts it's

00:08:54,630 --> 00:09:00,430
depending on how complicated you want to

00:08:56,680 --> 00:09:03,339
get and there's its concept of snowflake

00:09:00,430 --> 00:09:05,320
servers and Phoenix servers a snowflake

00:09:03,339 --> 00:09:06,400
server is this fragile thing and every

00:09:05,320 --> 00:09:08,320
one of them is unique because you've

00:09:06,400 --> 00:09:10,990
gone in you've handled it and you've

00:09:08,320 --> 00:09:12,700
customized that and you can't make

00:09:10,990 --> 00:09:15,339
another one without by the writing out

00:09:12,700 --> 00:09:17,830
wiki page about how to do that or being

00:09:15,339 --> 00:09:19,330
lucky so a Phoenix server is one where

00:09:17,830 --> 00:09:21,640
you can start from a base operating

00:09:19,330 --> 00:09:22,690
system image and get to a working state

00:09:21,640 --> 00:09:24,370
repeatably

00:09:22,690 --> 00:09:27,279
and that's what we're trying to do here

00:09:24,370 --> 00:09:29,290
it's not always an easy goal to get to

00:09:27,279 --> 00:09:32,650
but it's it's worth getting at least as

00:09:29,290 --> 00:09:35,020
close as you can so again I use puppet

00:09:32,650 --> 00:09:36,580
to do that in this case and that's

00:09:35,020 --> 00:09:39,490
provisioning the OS level and the

00:09:36,580 --> 00:09:41,380
services layer for the actual scripted

00:09:39,490 --> 00:09:43,630
tasks that I use in development or in

00:09:41,380 --> 00:09:46,630
staging or in production there's lots of

00:09:43,630 --> 00:09:49,089
little fragments in in a fabric file is

00:09:46,630 --> 00:09:51,100
everyone familiar with fabric good

00:09:49,089 --> 00:09:52,720
I discovered it a couple of years back

00:09:51,100 --> 00:09:54,580
and it's really good

00:09:52,720 --> 00:09:55,780
so the anti-pattern here is if you can't

00:09:54,580 --> 00:09:57,310
spin up your environment with one

00:09:55,780 --> 00:10:01,770
command and you have to do some hand

00:09:57,310 --> 00:10:03,820
tooling then you're not quite there yet

00:10:01,770 --> 00:10:05,710
it's just an example what my puppet

00:10:03,820 --> 00:10:08,620
config looks like it includes a whole

00:10:05,710 --> 00:10:10,690
bunch of things and the production

00:10:08,620 --> 00:10:12,490
environment has almost exactly the same

00:10:10,690 --> 00:10:18,070
sort of includes as a couple of extra

00:10:12,490 --> 00:10:20,620
bits and pieces there so we've got

00:10:18,070 --> 00:10:22,150
fabric and we've got a bunch of commands

00:10:20,620 --> 00:10:24,610
in there that are repeatable look we

00:10:22,150 --> 00:10:26,110
want to run we then need to think about

00:10:24,610 --> 00:10:27,970
well how do I run them against vagrant

00:10:26,110 --> 00:10:30,670
and against my staging production

00:10:27,970 --> 00:10:33,040
environments and so on basically you can

00:10:30,670 --> 00:10:35,589
rewire the environment for your fabric I

00:10:33,040 --> 00:10:38,260
will put the slides online so feel free

00:10:35,589 --> 00:10:39,880
to just glaze over here it will read out

00:10:38,260 --> 00:10:41,830
of your vagrant configuration the SSH

00:10:39,880 --> 00:10:43,450
details so that you can connect to your

00:10:41,830 --> 00:10:48,550
vagrant instance and run fabric files

00:10:43,450 --> 00:10:50,320
commands against it rather dependencies

00:10:48,550 --> 00:10:52,470
I won't harp on on this I think we all

00:10:50,320 --> 00:10:55,180
know this is well virtually inven people

00:10:52,470 --> 00:10:56,589
using requirements files all that sort

00:10:55,180 --> 00:10:57,890
of thing that you make all your

00:10:56,589 --> 00:10:59,930
configuration as code

00:10:57,890 --> 00:11:03,140
there's some couple of gotchas in there

00:10:59,930 --> 00:11:07,430
things like using explicit versions you

00:11:03,140 --> 00:11:10,970
I have a disagree okay we'll talk if you

00:11:07,430 --> 00:11:13,300
are using github repositories or even if

00:11:10,970 --> 00:11:15,880
you're not make sure you try at least

00:11:13,300 --> 00:11:17,839
choose a version and don't just

00:11:15,880 --> 00:11:19,670
accidentally deploy someone's new

00:11:17,839 --> 00:11:21,079
version of your the library you want to

00:11:19,670 --> 00:11:26,390
use into production and find that the

00:11:21,079 --> 00:11:29,930
set up PI files broken so how we do that

00:11:26,390 --> 00:11:31,970
with fabric is I've got a V run command

00:11:29,930 --> 00:11:34,550
which wraps the regular fabric run

00:11:31,970 --> 00:11:36,350
command to make whatever command you

00:11:34,550 --> 00:11:38,660
want to run happen within the confines

00:11:36,350 --> 00:11:40,880
of that virtual environment so now when

00:11:38,660 --> 00:11:44,860
we run pip install we use the round pip

00:11:40,880 --> 00:11:44,860
install and we get our requirements

00:11:45,070 --> 00:11:52,130
database migration has everyone heard of

00:11:47,450 --> 00:11:53,899
South yes mostly has anyone not well

00:11:52,130 --> 00:11:56,990
worth looking up it's really good for

00:11:53,899 --> 00:12:00,019
database migration I haven't come across

00:11:56,990 --> 00:12:02,899
an alternative that seems to be pushing

00:12:00,019 --> 00:12:04,959
it the competitive level that I would

00:12:02,899 --> 00:12:07,550
expect so this is what I'm working with

00:12:04,959 --> 00:12:09,230
it's good for schema migrations and and

00:12:07,550 --> 00:12:10,850
for data migrations so you might be

00:12:09,230 --> 00:12:12,769
adding columns but also pushing data

00:12:10,850 --> 00:12:14,329
around within your tables it's worth

00:12:12,769 --> 00:12:17,600
figuring out how to do that so that when

00:12:14,329 --> 00:12:20,390
you need to you can the important point

00:12:17,600 --> 00:12:22,459
here with deployment is don't put your

00:12:20,390 --> 00:12:23,899
expansion operations and contraction

00:12:22,459 --> 00:12:27,230
operations as in adding and removing

00:12:23,899 --> 00:12:28,579
columns together if you do that you have

00:12:27,230 --> 00:12:31,100
a lot of trouble should you happen to

00:12:28,579 --> 00:12:33,740
need to rollback so ideally if you want

00:12:31,100 --> 00:12:37,490
to add columns do that get it out there

00:12:33,740 --> 00:12:39,589
migrate your data and then when or if

00:12:37,490 --> 00:12:40,880
you decide the old column is ready to be

00:12:39,589 --> 00:12:42,470
removed because you're happy that it's

00:12:40,880 --> 00:12:45,050
safe then do that as a separate

00:12:42,470 --> 00:12:46,820
deployment there's a certain amount of

00:12:45,050 --> 00:12:49,070
engineering input here that's important

00:12:46,820 --> 00:12:51,910
to that

00:12:49,070 --> 00:12:53,930
so using South fabric very simple

00:12:51,910 --> 00:12:55,579
standard manage command you can either

00:12:53,930 --> 00:13:00,170
run the migrate commands directly or you

00:12:55,579 --> 00:13:01,760
can put - - migrate into sync TV so

00:13:00,170 --> 00:13:02,870
tying all that together if you do want

00:13:01,760 --> 00:13:05,120
to run these commands against your

00:13:02,870 --> 00:13:08,199
vagrant environment verb vagrant and

00:13:05,120 --> 00:13:08,199
then your other commands

00:13:08,930 --> 00:13:12,380
no talks complete without mentioning

00:13:10,670 --> 00:13:14,990
source control I won't harp on too much

00:13:12,380 --> 00:13:17,360
there's a couple of things that I do I

00:13:14,990 --> 00:13:19,430
put tags into my builds that come from

00:13:17,360 --> 00:13:21,290
the continuous integration pipeline so I

00:13:19,430 --> 00:13:23,660
know what has successfully built what

00:13:21,290 --> 00:13:26,120
has successfully deployed and I put all

00:13:23,660 --> 00:13:28,730
of this information into one repository

00:13:26,120 --> 00:13:30,680
so I have my application layout

00:13:28,730 --> 00:13:33,529
there's always various ways you can do

00:13:30,680 --> 00:13:35,630
this but I have my fabrics file in there

00:13:33,529 --> 00:13:38,510
I have my people requirements in there I

00:13:35,630 --> 00:13:40,610
have my shell scripts for the build jobs

00:13:38,510 --> 00:13:41,990
and I also have all the vagrant and

00:13:40,610 --> 00:13:44,180
puppet configuration in the same

00:13:41,990 --> 00:13:48,140
environment now that's a couple of

00:13:44,180 --> 00:13:51,610
caveats to whether that's a good idea so

00:13:48,140 --> 00:13:51,610
far that's working for me pretty well

00:13:52,990 --> 00:13:59,690
next we get to automated testing I'm

00:13:55,550 --> 00:14:01,550
using Django's test framework and so far

00:13:59,690 --> 00:14:03,620
that's working well for me it it's

00:14:01,550 --> 00:14:07,010
pretty well established and that's what

00:14:03,620 --> 00:14:09,310
I need and to get that continuously

00:14:07,010 --> 00:14:14,240
integrated or continuously tested I use

00:14:09,310 --> 00:14:16,700
Jenkins to do that now there's a Jenkins

00:14:14,240 --> 00:14:19,279
Jango Jenkins plugin or module rather

00:14:16,700 --> 00:14:20,870
that will run your tests and produce

00:14:19,279 --> 00:14:22,610
Jenkins friendly output and you get

00:14:20,870 --> 00:14:24,680
organized pretty graphs about your test

00:14:22,610 --> 00:14:27,500
trends and so on it also does things

00:14:24,680 --> 00:14:28,690
like pilant static analysis coverage

00:14:27,500 --> 00:14:31,370
that sort of thing as well

00:14:28,690 --> 00:14:33,709
a little throwaway extra line there I

00:14:31,370 --> 00:14:36,440
discovered factory boy last week instead

00:14:33,709 --> 00:14:38,900
of writing test fixtures in horrible

00:14:36,440 --> 00:14:41,870
markup languages you can use factory way

00:14:38,900 --> 00:14:43,160
to generate objects that's a good one

00:14:41,870 --> 00:14:45,320
just to take away and have a look at I

00:14:43,160 --> 00:14:50,750
found it to be really good especially

00:14:45,320 --> 00:14:52,970
for unit testing so test separation at

00:14:50,750 --> 00:14:55,579
this point you can just run all of your

00:14:52,970 --> 00:14:57,890
tests as a single suite in Jenkins and

00:14:55,579 --> 00:14:59,510
then deploy once it all passes now if

00:14:57,890 --> 00:15:01,040
you want to get fancy or you have a much

00:14:59,510 --> 00:15:05,149
more complicated environment you can

00:15:01,040 --> 00:15:06,820
split those tests up by type that it

00:15:05,149 --> 00:15:09,350
allows you to do certain things like

00:15:06,820 --> 00:15:12,920
parallelizing certain jobs you can keep

00:15:09,350 --> 00:15:15,589
your runtimes low you can do unit tests

00:15:12,920 --> 00:15:17,089
first you can trigger some of your tests

00:15:15,589 --> 00:15:18,380
on a different schedule altogether so

00:15:17,089 --> 00:15:19,760
you might have a suite of tests that do

00:15:18,380 --> 00:15:20,620
more the performance side of things that

00:15:19,760 --> 00:15:21,970
you run

00:15:20,620 --> 00:15:26,740
every night instead of on every

00:15:21,970 --> 00:15:27,790
commitment so different types of tests

00:15:26,740 --> 00:15:29,380
you might have we've talked a bit about

00:15:27,790 --> 00:15:31,660
unit and functional tests you've got

00:15:29,380 --> 00:15:33,010
staging tests you can do smoke tests

00:15:31,660 --> 00:15:34,870
against your staging environment to

00:15:33,010 --> 00:15:36,430
prove that it's generally up and running

00:15:34,870 --> 00:15:38,200
and that the login page shows up that

00:15:36,430 --> 00:15:40,030
sort of thing and then if you've got

00:15:38,200 --> 00:15:42,370
certain tests that become flaky or slow

00:15:40,030 --> 00:15:44,980
we want to be able to sort of mark those

00:15:42,370 --> 00:15:46,420
and not have to do a heavyweight you

00:15:44,980 --> 00:15:47,860
know we don't have to delete the code or

00:15:46,420 --> 00:15:50,190
comment it out if we can just annotate

00:15:47,860 --> 00:15:52,090
it and be able to run them in isolation

00:15:50,190 --> 00:15:55,300
that's something that we want to do with

00:15:52,090 --> 00:15:58,930
with test separation the question is how

00:15:55,300 --> 00:16:01,180
to do this with Jango there's you could

00:15:58,930 --> 00:16:03,280
write a custom suite a lot of these too

00:16:01,180 --> 00:16:04,540
may seem quite manual and so I'm this is

00:16:03,280 --> 00:16:07,030
an area I've still have an unanswered

00:16:04,540 --> 00:16:09,160
question the you could write a custom

00:16:07,030 --> 00:16:11,710
test Runner you can use things like nose

00:16:09,160 --> 00:16:13,570
I believe have a an annotation plug-in

00:16:11,710 --> 00:16:15,400
where you can give tests attributes and

00:16:13,570 --> 00:16:17,410
run only those tests with certain

00:16:15,400 --> 00:16:19,270
attributes I've got something similar

00:16:17,410 --> 00:16:21,850
where I've written a pipeline tag

00:16:19,270 --> 00:16:24,940
decorator which is kind of like the skip

00:16:21,850 --> 00:16:27,160
if decorator in in unit tests that says

00:16:24,940 --> 00:16:29,200
if you've said to run tests the unit

00:16:27,160 --> 00:16:31,780
tests then only run the ones that have

00:16:29,200 --> 00:16:33,970
them tagged as such and there's a bit of

00:16:31,780 --> 00:16:36,700
a brain dump there of what that looks

00:16:33,970 --> 00:16:38,680
like basically it's it's a bit of a hack

00:16:36,700 --> 00:16:40,270
to be honest and this is why I don't

00:16:38,680 --> 00:16:43,660
like it yet that I'm showing you it

00:16:40,270 --> 00:16:45,420
anyway it looks for the the arguments to

00:16:43,660 --> 00:16:47,890
the command that you've run and

00:16:45,420 --> 00:16:49,510
basically make sure that the test either

00:16:47,890 --> 00:16:54,310
does get included in the suite or gets

00:16:49,510 --> 00:16:55,330
thrown out if it if it doesn't match so

00:16:54,310 --> 00:16:57,490
we've already had a quick look at the

00:16:55,330 --> 00:17:00,910
bike the build pipeline it is about

00:16:57,490 --> 00:17:02,440
having one one way to do it and having

00:17:00,910 --> 00:17:06,040
all developers feed into that one

00:17:02,440 --> 00:17:08,230
via the master branch of your source

00:17:06,040 --> 00:17:11,110
control system there are some debates

00:17:08,230 --> 00:17:12,430
around on how to best do that I don't

00:17:11,110 --> 00:17:15,640
think it's worth going into those right

00:17:12,430 --> 00:17:18,670
now and basically about improving the

00:17:15,640 --> 00:17:19,960
policy of don't employ broken code we a

00:17:18,670 --> 00:17:21,280
system where it's harder to do that

00:17:19,960 --> 00:17:24,910
because you've run through all your

00:17:21,280 --> 00:17:26,470
tests it doesn't make your developers

00:17:24,910 --> 00:17:28,559
disciplined about writing them but at

00:17:26,470 --> 00:17:30,940
least we'll run the ones that are there

00:17:28,559 --> 00:17:32,769
to that end there's a build pipeline

00:17:30,940 --> 00:17:35,230
plug-in in Jenkins which is how we get

00:17:32,769 --> 00:17:36,700
those different jobs running in sequence

00:17:35,230 --> 00:17:38,620
you basically configure them and you say

00:17:36,700 --> 00:17:41,019
when this one passes run these

00:17:38,620 --> 00:17:43,029
downstream builds you get along the way

00:17:41,019 --> 00:17:44,559
and you can put in manual stops which is

00:17:43,029 --> 00:17:46,690
what I've done with my deployment to say

00:17:44,559 --> 00:17:51,700
I want to push the button when I'm happy

00:17:46,690 --> 00:17:53,620
to deploy at the end so currently I have

00:17:51,700 --> 00:17:55,269
a simple linear flow even for my

00:17:53,620 --> 00:17:57,039
situation this may be overkill I could

00:17:55,269 --> 00:18:00,309
probably combine those first two test

00:17:57,039 --> 00:18:02,320
jobs and run them all together but it's

00:18:00,309 --> 00:18:05,830
sort of I want to sort of prove that

00:18:02,320 --> 00:18:07,210
this would work you can see the third

00:18:05,830 --> 00:18:09,279
one there I was having a bad day and

00:18:07,210 --> 00:18:13,090
staging broke and so I didn't get a

00:18:09,279 --> 00:18:14,320
deploy button the second one is it did

00:18:13,090 --> 00:18:16,029
work and I could have press the deploy

00:18:14,320 --> 00:18:22,240
button but I didn't and then the first

00:18:16,029 --> 00:18:24,419
one at the top there I did okay so

00:18:22,240 --> 00:18:27,519
there's a Jenkins job which basically

00:18:24,419 --> 00:18:30,039
runs the Jenkins pipeline command I've

00:18:27,519 --> 00:18:31,210
just wrapped the regular Jango Jenkins

00:18:30,039 --> 00:18:33,100
plug-in with a little thing that

00:18:31,210 --> 00:18:34,899
manipulates the command line arguments

00:18:33,100 --> 00:18:36,820
if anyone is interested in that I'm

00:18:34,899 --> 00:18:38,830
happy to share it but as I said I

00:18:36,820 --> 00:18:40,779
haven't quite figured out if that's the

00:18:38,830 --> 00:18:42,840
best way to do things here it works for

00:18:40,779 --> 00:18:42,840
now

00:18:43,200 --> 00:18:47,649
okay so we've passed our unit tests and

00:18:45,970 --> 00:18:49,860
we're now getting to the staging in QA

00:18:47,649 --> 00:18:52,480
aspect of our deployment pipeline

00:18:49,860 --> 00:18:53,919
basically we now have a fabric command

00:18:52,480 --> 00:18:55,690
that runs a series of other favorite

00:18:53,919 --> 00:18:58,240
commands very similar to the production

00:18:55,690 --> 00:19:00,820
deployment except that it takes the code

00:18:58,240 --> 00:19:02,409
from the source repository it pulls the

00:19:00,820 --> 00:19:05,620
database from production and runs the

00:19:02,409 --> 00:19:07,210
schema migrations applies the puppet

00:19:05,620 --> 00:19:09,480
config so if that has changed then it

00:19:07,210 --> 00:19:11,889
will update that vagrant environment

00:19:09,480 --> 00:19:14,799
installs any new requirements and so on

00:19:11,889 --> 00:19:16,929
so at this point the staging server

00:19:14,799 --> 00:19:18,669
should have a deployed copy of your

00:19:16,929 --> 00:19:21,220
latest code it should be working and

00:19:18,669 --> 00:19:23,919
running you can point your QA team if at

00:19:21,220 --> 00:19:25,779
it if you have one or if they want they

00:19:23,919 --> 00:19:27,309
can spin up their own one and apply some

00:19:25,779 --> 00:19:30,880
commands themselves if they want to do

00:19:27,309 --> 00:19:32,769
something a bit more fancy as a final

00:19:30,880 --> 00:19:35,409
check where there are some unit tests

00:19:32,769 --> 00:19:37,480
based smoke tests here that use selenium

00:19:35,409 --> 00:19:40,260
and Django's unit test suite again to

00:19:37,480 --> 00:19:42,700
make sure that the

00:19:40,260 --> 00:19:44,260
the site's up and running you can check

00:19:42,700 --> 00:19:45,820
that the services are running that you

00:19:44,260 --> 00:19:47,080
know the homepage returns the login

00:19:45,820 --> 00:19:49,150
works all those sorts of things

00:19:47,080 --> 00:19:50,920
and if that's all worked then we tagged

00:19:49,150 --> 00:19:56,500
that build as deployable in the source

00:19:50,920 --> 00:19:58,360
control repository so now we're looking

00:19:56,500 --> 00:20:00,640
at deployment I don't want to get into

00:19:58,360 --> 00:20:03,690
too much with this I think this is more

00:20:00,640 --> 00:20:05,860
of a cloud architectural discussion and

00:20:03,690 --> 00:20:07,660
there's nothing about how you do this

00:20:05,860 --> 00:20:08,650
that sort of really dictates how you

00:20:07,660 --> 00:20:11,140
will do your continuous deployment

00:20:08,650 --> 00:20:13,420
itself except you need to come up with

00:20:11,140 --> 00:20:15,580
some solution for deploying which may

00:20:13,420 --> 00:20:18,550
involve a wholesale push out to your

00:20:15,580 --> 00:20:20,560
your server or servers you might have

00:20:18,550 --> 00:20:22,630
parallel environments where you have one

00:20:20,560 --> 00:20:24,190
live and one dark which gets the new

00:20:22,630 --> 00:20:25,930
version and you switch it over which is

00:20:24,190 --> 00:20:28,420
your kind of blue-green deployments you

00:20:25,930 --> 00:20:30,670
might have a canary deployment where you

00:20:28,420 --> 00:20:33,880
have a cluster of servers you take one

00:20:30,670 --> 00:20:35,650
out of the pool update it put it back in

00:20:33,880 --> 00:20:37,530
and watch it for a little while before

00:20:35,650 --> 00:20:40,000
deciding to deploy all the other ones

00:20:37,530 --> 00:20:41,470
and in extreme cases I've heard of

00:20:40,000 --> 00:20:44,590
people actually building entire

00:20:41,470 --> 00:20:46,780
instances from scratch which is really

00:20:44,590 --> 00:20:48,880
taking this sort of provisioning DevOps

00:20:46,780 --> 00:20:51,790
thing to the extreme and deploying an

00:20:48,880 --> 00:20:53,290
entire new virtual machine switching

00:20:51,790 --> 00:20:54,580
over your load balances and keeping the

00:20:53,290 --> 00:20:57,070
other one on standby until you're sure

00:20:54,580 --> 00:20:58,450
that you don't need it anymore it's an

00:20:57,070 --> 00:21:02,800
interesting idea I think it's pretty

00:20:58,450 --> 00:21:04,150
heavyweight but it's an option so

00:21:02,800 --> 00:21:06,310
deploying with jenkins and fabric i've

00:21:04,150 --> 00:21:08,890
talked about those tags basically when

00:21:06,310 --> 00:21:11,710
the the staging job runs successfully it

00:21:08,890 --> 00:21:14,620
applies a tag and then my fabric script

00:21:11,710 --> 00:21:16,510
looks for the latest version or the

00:21:14,620 --> 00:21:19,540
latest tag that's marked as successful

00:21:16,510 --> 00:21:23,290
and that's what gets run in production

00:21:19,540 --> 00:21:24,700
using git reset i need to parameterize

00:21:23,290 --> 00:21:26,710
this at some point so you can pay

00:21:24,700 --> 00:21:28,420
actually i want a different version but

00:21:26,710 --> 00:21:33,250
this is the standard default at the

00:21:28,420 --> 00:21:36,910
moment am I going too fast this is no

00:21:33,250 --> 00:21:38,020
okay good so here's just a picture of

00:21:36,910 --> 00:21:39,700
that you can see that there's different

00:21:38,020 --> 00:21:43,530
tags and you can see that the last

00:21:39,700 --> 00:21:46,590
deployed version was the second last one

00:21:43,530 --> 00:21:49,150
okay five minutes I think we're good

00:21:46,590 --> 00:21:50,890
deployments basically that's the last

00:21:49,150 --> 00:21:51,850
line that we want here is fab deploy the

00:21:50,890 --> 00:21:54,429
rest set

00:21:51,850 --> 00:21:57,070
a virtual environment from within the

00:21:54,429 --> 00:22:02,140
Jenkins staging area and runs fab deploy

00:21:57,070 --> 00:22:04,240
and that does a lot of things now

00:22:02,140 --> 00:22:07,510
this is where my particular situation is

00:22:04,240 --> 00:22:08,650
quite simple if you've got clusters and

00:22:07,510 --> 00:22:10,900
other things this is where it can get

00:22:08,650 --> 00:22:12,280
more complicated and I don't have a

00:22:10,900 --> 00:22:14,320
direct answer for that because it's

00:22:12,280 --> 00:22:16,030
going to depend on your situation but I

00:22:14,320 --> 00:22:17,440
do things like making it taking a

00:22:16,030 --> 00:22:19,990
snapshot of the database there's a

00:22:17,440 --> 00:22:21,150
module called Django DB backup which

00:22:19,990 --> 00:22:25,679
does a good job of that at the moment

00:22:21,150 --> 00:22:25,679
basically it runs a MySQL or PostgreSQL

00:22:27,900 --> 00:22:32,650
somewhere else I'm just experimenting

00:22:30,909 --> 00:22:35,289
with that at the moment but seems to be

00:22:32,650 --> 00:22:37,150
good we then run that pool which also

00:22:35,289 --> 00:22:41,020
grabs a list of the changes that went

00:22:37,150 --> 00:22:43,450
into get we apply the puppet changes we

00:22:41,020 --> 00:22:45,370
update the requirements from pip we

00:22:43,450 --> 00:22:47,890
there's a Django extensions command that

00:22:45,370 --> 00:22:50,260
just wipes out any old pyc compiled

00:22:47,890 --> 00:22:54,250
Python files that potentially can trip

00:22:50,260 --> 00:22:56,380
you over we don't do the data migration

00:22:54,250 --> 00:22:58,059
we collect our static resources which

00:22:56,380 --> 00:22:59,919
may go to all sorts of places that

00:22:58,059 --> 00:23:02,110
you've configured behind all of these is

00:22:59,919 --> 00:23:03,309
usually a one-liner but occasionally

00:23:02,110 --> 00:23:06,280
there's a couple of bits and pieces that

00:23:03,309 --> 00:23:08,350
happen we reload our app server bounced

00:23:06,280 --> 00:23:11,380
the task server because I've got one and

00:23:08,350 --> 00:23:13,690
I then tag the builders deployed at this

00:23:11,380 --> 00:23:19,240
point and email myself for a list of the

00:23:13,690 --> 00:23:22,090
changes just a quick note about

00:23:19,240 --> 00:23:25,240
decoupling deployment and release a lot

00:23:22,090 --> 00:23:27,340
of the the concepts here may sound like

00:23:25,240 --> 00:23:28,960
you're gonna limit yourself where you

00:23:27,340 --> 00:23:33,130
have to hold changes out of your your

00:23:28,960 --> 00:23:34,870
master branch and there's quite a bit of

00:23:33,130 --> 00:23:36,220
discussion about it but a lot of the

00:23:34,870 --> 00:23:38,230
solutions suggest that you can have the

00:23:36,220 --> 00:23:40,270
idea of feature flags so you will wrap

00:23:38,230 --> 00:23:42,130
new functionality that isn't necessarily

00:23:40,270 --> 00:23:45,340
ready or you don't want everyone to have

00:23:42,130 --> 00:23:46,870
yet with a feature check in Django in

00:23:45,340 --> 00:23:48,850
particular there's a system called

00:23:46,870 --> 00:23:51,400
gargoyle which I think the discus guys

00:23:48,850 --> 00:23:55,900
produced basically you can wrap code

00:23:51,400 --> 00:23:57,460
with if the switches on then do this in

00:23:55,900 --> 00:23:59,559
your code and then you have an admin

00:23:57,460 --> 00:24:01,360
interface we're having deployed the code

00:23:59,559 --> 00:24:03,580
already you can control when and if you

00:24:01,360 --> 00:24:04,880
switch it on and even for who so you can

00:24:03,580 --> 00:24:07,910
say it's only for staff

00:24:04,880 --> 00:24:09,890
or 10% of users or some other

00:24:07,910 --> 00:24:12,010
combination so this is a good way to do

00:24:09,890 --> 00:24:15,380
a dark release of a new feature and

00:24:12,010 --> 00:24:18,380
decide when to actually enable it or how

00:24:15,380 --> 00:24:20,570
much to enable it and it does feed into

00:24:18,380 --> 00:24:22,340
that whole fast feedback thing you can

00:24:20,570 --> 00:24:24,820
try 50 percent of your users and you've

00:24:22,340 --> 00:24:26,840
got an a/b test

00:24:24,820 --> 00:24:28,100
there's also Django waffle which I

00:24:26,840 --> 00:24:32,300
haven't used that apparently is quite

00:24:28,100 --> 00:24:34,280
similar so the measurement is important

00:24:32,300 --> 00:24:36,770
here we've tested everything but we

00:24:34,280 --> 00:24:38,120
don't know how well it's behaving this

00:24:36,770 --> 00:24:39,710
is where you have all these

00:24:38,120 --> 00:24:41,570
post-deployment checks that you can do

00:24:39,710 --> 00:24:42,860
you can check error logs you can check

00:24:41,570 --> 00:24:45,440
performance

00:24:42,860 --> 00:24:47,480
there's behavior heuristics some people

00:24:45,440 --> 00:24:49,730
automate this quite heavily with things

00:24:47,480 --> 00:24:51,800
like check the number of 500 errors and

00:24:49,730 --> 00:24:54,790
make sure that you know they're not

00:24:51,800 --> 00:24:54,790
happening when they weren't before

00:24:55,180 --> 00:24:59,810
there's several good examples were

00:24:57,800 --> 00:25:01,040
several good options available here I'm

00:24:59,810 --> 00:25:03,430
actually using all of these for

00:25:01,040 --> 00:25:05,240
different reasons for tracking errors

00:25:03,430 --> 00:25:07,250
century is really good

00:25:05,240 --> 00:25:10,100
instead of getting emails when an error

00:25:07,250 --> 00:25:12,340
occurs it goes into century and Century

00:25:10,100 --> 00:25:14,630
will send you one email and if you have

00:25:12,340 --> 00:25:18,260
999 other errors that are the same you

00:25:14,630 --> 00:25:20,000
won't get 999 more emails you can also

00:25:18,260 --> 00:25:21,560
mark when it's fixed and you can tell

00:25:20,000 --> 00:25:23,300
you if you lied and it was still broken

00:25:21,560 --> 00:25:24,740
and it happened again lots of good stuff

00:25:23,300 --> 00:25:26,690
like that you get stacked races

00:25:24,740 --> 00:25:28,430
frequencies all of this is coming out of

00:25:26,690 --> 00:25:30,200
your production environment century

00:25:28,430 --> 00:25:32,510
itself is a Django project you just sort

00:25:30,200 --> 00:25:36,230
of run it along the side and it'll send

00:25:32,510 --> 00:25:37,640
error messages into it mewn and there's

00:25:36,230 --> 00:25:39,290
similar tools like it but this is good

00:25:37,640 --> 00:25:43,040
for your operating system level metrics

00:25:39,290 --> 00:25:44,960
it can you can install it from a package

00:25:43,040 --> 00:25:46,670
on most systems and have it plotting

00:25:44,960 --> 00:25:49,460
things like your medication memory usage

00:25:46,670 --> 00:25:50,570
or nginx requests per second lots of

00:25:49,460 --> 00:25:52,580
these things you have to know what

00:25:50,570 --> 00:25:54,350
you're looking for so if you're looking

00:25:52,580 --> 00:25:59,390
for failed logins for example you want

00:25:54,350 --> 00:26:01,040
to have a lot of that somehow New Relic

00:25:59,390 --> 00:26:04,970
it's certainly worth the mention grams

00:26:01,040 --> 00:26:07,010
you know certainly singing as praises

00:26:04,970 --> 00:26:09,500
and I can agree it does show you lots of

00:26:07,010 --> 00:26:11,810
good stuff it certainly goes beyond what

00:26:09,500 --> 00:26:13,670
your standard metrics will especially

00:26:11,810 --> 00:26:15,710
into the browser user performance thing

00:26:13,670 --> 00:26:17,299
you might discover that your eye

00:26:15,710 --> 00:26:21,190
six users I'm getting the performance

00:26:17,299 --> 00:26:21,190
they want and say you just don't care

00:26:21,970 --> 00:26:27,200
yeah but no seriously it's really good

00:26:25,250 --> 00:26:28,760
for looking at things and the free plan

00:26:27,200 --> 00:26:33,470
even if you don't have lots of money for

00:26:28,760 --> 00:26:35,149
service is worth it finally there's a

00:26:33,470 --> 00:26:39,940
thing called stats D which was produced

00:26:35,149 --> 00:26:42,110
by Etsy as well and they they have a

00:26:39,940 --> 00:26:43,730
basically this feeds into graphite which

00:26:42,110 --> 00:26:45,710
is another Django based measurement and

00:26:43,730 --> 00:26:46,970
collection tool you can feed it counters

00:26:45,710 --> 00:26:49,100
and timers and all sorts of cool stuff

00:26:46,970 --> 00:26:51,590
this stuff gets really fine-grained and

00:26:49,100 --> 00:26:55,789
you can count and profile all sorts of

00:26:51,590 --> 00:26:57,470
stuff roll back options I'm going to

00:26:55,789 --> 00:26:59,090
skip for a little bit basically if

00:26:57,470 --> 00:27:01,010
you're engineering for this fast

00:26:59,090 --> 00:27:03,649
deployment you hopefully will avoid any

00:27:01,010 --> 00:27:05,090
catastrophic ly difficult robots so you

00:27:03,649 --> 00:27:06,620
can engineer around it or you can

00:27:05,090 --> 00:27:09,020
engineer for it by making sure that you

00:27:06,620 --> 00:27:10,669
have some roll maps available my

00:27:09,020 --> 00:27:13,039
deployment rollback strategy is like you

00:27:10,669 --> 00:27:14,899
have a car with no reverse gear you can

00:27:13,039 --> 00:27:16,669
go backwards but you have to get out and

00:27:14,899 --> 00:27:20,080
push so you might want to be a more

00:27:16,669 --> 00:27:22,279
careful driver to avoid that possibility

00:27:20,080 --> 00:27:23,659
where to from here there's some tips

00:27:22,279 --> 00:27:26,419
here if you want to describe the slides

00:27:23,659 --> 00:27:28,539
off SlideShare later these are some just

00:27:26,419 --> 00:27:31,309
a summary of the tools available

00:27:28,539 --> 00:27:32,720
I certainly am NOT finished on this

00:27:31,309 --> 00:27:34,789
journey there's a lot that I can sort

00:27:32,720 --> 00:27:36,049
out and certainly as a startup grows

00:27:34,789 --> 00:27:38,840
it's going to have different needs as

00:27:36,049 --> 00:27:40,580
well my favorite one though is I need to

00:27:38,840 --> 00:27:43,429
make the big red deploy button big and

00:27:40,580 --> 00:27:44,779
red there's some resources there as well

00:27:43,429 --> 00:27:47,679
and we're through to Q&A

00:27:44,779 --> 00:27:47,679
thank you

00:27:49,960 --> 00:27:55,400
thanks Allah I have a feeling there's

00:27:52,970 --> 00:27:57,860
gonna be lots of questions yeah I have a

00:27:55,400 --> 00:27:59,570
bunch as well but I might leave them for

00:27:57,860 --> 00:28:01,670
after how much time do we have

00:27:59,570 --> 00:28:03,800
yeah we've got about five or six minutes

00:28:01,670 --> 00:28:06,650
so if you make you questions quick in

00:28:03,800 --> 00:28:08,600
your answers quick thanks Roger

00:28:06,650 --> 00:28:10,309
I'm really interested in getting the

00:28:08,600 --> 00:28:12,350
balance right strategy-wise when you're

00:28:10,309 --> 00:28:13,910
doing small teams and trying to put

00:28:12,350 --> 00:28:16,910
deployment processes in that aren't

00:28:13,910 --> 00:28:20,990
overkill at the start and you mentioned

00:28:16,910 --> 00:28:23,179
with with the vagrant config you can do

00:28:20,990 --> 00:28:25,130
things in fabric or move to puppet where

00:28:23,179 --> 00:28:27,020
do you see the line between just doing

00:28:25,130 --> 00:28:31,090
everything in fabric and making the jump

00:28:27,020 --> 00:28:35,000
into puppet that's a very good question

00:28:31,090 --> 00:28:36,620
puppet is good for very declarative type

00:28:35,000 --> 00:28:39,860
of things whereas fabric is good for

00:28:36,620 --> 00:28:42,140
saying do this and so in fabric if you

00:28:39,860 --> 00:28:44,090
want to do the declarative stuff you you

00:28:42,140 --> 00:28:45,590
might have to engineer more for install

00:28:44,090 --> 00:28:47,750
this if it's not there already and that

00:28:45,590 --> 00:28:50,000
sort of thing I think you can fully

00:28:47,750 --> 00:28:51,380
provision using just fabric I didn't

00:28:50,000 --> 00:28:53,720
because I already knew a bit of puppet

00:28:51,380 --> 00:28:55,610
from my previous job and that kind of

00:28:53,720 --> 00:28:58,220
worked for me but I'm conscious that you

00:28:55,610 --> 00:28:59,809
could move that line like my virtual end

00:28:58,220 --> 00:29:01,610
is built from puppet at the moment but

00:28:59,809 --> 00:29:04,970
really it's probably more of a fabric

00:29:01,610 --> 00:29:07,130
job now that I think about it so in

00:29:04,970 --> 00:29:08,300
terms of priorities I think they puppets

00:29:07,130 --> 00:29:10,429
little low down and you

00:29:08,300 --> 00:29:12,050
it's that how you want a provision to

00:29:10,429 --> 00:29:18,220
it's a lot of this is very opinionated

00:29:12,050 --> 00:29:18,220
so other questions

00:29:25,080 --> 00:29:28,499
just a fairly short one I noticed don't

00:29:26,759 --> 00:29:30,690
want to feel very early slides you had a

00:29:28,499 --> 00:29:33,179
point saying avoid long-lived branches

00:29:30,690 --> 00:29:35,159
would you be able to justify that or

00:29:33,179 --> 00:29:36,779
what you meant right so if you do have

00:29:35,159 --> 00:29:38,940
long live branches you have to test and

00:29:36,779 --> 00:29:41,609
integrate them more often which if

00:29:38,940 --> 00:29:43,679
you're happy to take that on you can the

00:29:41,609 --> 00:29:46,559
philosophy behind continuous delivery

00:29:43,679 --> 00:29:48,629
tends to suggest you can wrap things in

00:29:46,559 --> 00:29:50,729
feature flags I did gloss over that a

00:29:48,629 --> 00:29:53,970
bit quickly it there is a debate about

00:29:50,729 --> 00:29:55,859
it and I'm a little bit on the fence it

00:29:53,970 --> 00:29:58,169
doesn't depend as well on the complexity

00:29:55,859 --> 00:30:00,599
of your environment if you have a long

00:29:58,169 --> 00:30:02,249
live branch for a particular feature

00:30:00,599 --> 00:30:04,739
it just means you might want to have to

00:30:02,249 --> 00:30:07,499
run to build pipelines one that doesn't

00:30:04,739 --> 00:30:08,700
deploy just so that you can be sure that

00:30:07,499 --> 00:30:15,950
you're not going to have an integration

00:30:08,700 --> 00:30:15,950
headache later anybody else

00:30:17,869 --> 00:30:25,590
thanks very much the talk I wanted to

00:30:20,309 --> 00:30:29,549
apologize for the facial expression the

00:30:25,590 --> 00:30:31,889
the reaction was to the the sentiment of

00:30:29,549 --> 00:30:34,700
you were giving to make configuration

00:30:31,889 --> 00:30:36,929
executable I couldn't disagree more

00:30:34,700 --> 00:30:38,580
configuration should be declarative and

00:30:36,929 --> 00:30:41,279
not executable you shouldn't have to run

00:30:38,580 --> 00:30:43,499
any particular interpreter language

00:30:41,279 --> 00:30:45,809
interpreter to get your configuration it

00:30:43,499 --> 00:30:48,210
should be language agnostic and you

00:30:45,809 --> 00:30:50,249
should be able to just read it as it as

00:30:48,210 --> 00:30:52,409
a data file rather than running a

00:30:50,249 --> 00:30:54,029
through Python or whatever because

00:30:52,409 --> 00:30:56,450
otherwise you're stuck with having to

00:30:54,029 --> 00:31:00,059
run Python even if what you're

00:30:56,450 --> 00:31:01,739
configuring is not Python etc are you

00:31:00,059 --> 00:31:04,559
saying that maybe puppets better there

00:31:01,739 --> 00:31:06,029
or no because you said that that puppets

00:31:04,559 --> 00:31:08,220
configuration is declarative so that's

00:31:06,029 --> 00:31:10,559
fine you don't have to run a run with

00:31:08,220 --> 00:31:12,029
the configuration as a program right

00:31:10,559 --> 00:31:14,129
absolute and that's where I think the

00:31:12,029 --> 00:31:16,979
puppet and fabric barrier lies and where

00:31:14,129 --> 00:31:21,399
as for instance Django's settings is an

00:31:16,979 --> 00:31:25,179
executable configuration and I hate that

00:31:21,399 --> 00:31:25,179
right no fair point

00:31:25,239 --> 00:31:33,019
anybody else probably last question Oh

00:31:29,889 --> 00:31:34,460
Russell you're getting later in line of

00:31:33,019 --> 00:31:37,179
man I thought I answered your question

00:31:34,460 --> 00:31:38,690
let everyone else there we go I

00:31:37,179 --> 00:31:40,009
completely see where you're coming from

00:31:38,690 --> 00:31:43,729
and I completely agree with you like the

00:31:40,009 --> 00:31:45,529
ideal of development environment should

00:31:43,729 --> 00:31:47,119
reflect your build at your production

00:31:45,529 --> 00:31:49,339
environment as much as humanly possible

00:31:47,119 --> 00:31:51,349
and you sort of said no don't use dev

00:31:49,339 --> 00:31:53,450
server as you as your development server

00:31:51,349 --> 00:31:55,219
effectively mm-hmm and the way you're

00:31:53,450 --> 00:31:57,379
solving that is by launching up vagrant

00:31:55,219 --> 00:31:59,570
and having a you know effectively

00:31:57,379 --> 00:32:02,149
developing in as close as possible to an

00:31:59,570 --> 00:32:04,159
actual development box there's a cost to

00:32:02,149 --> 00:32:05,809
that in terms of acts like the resources

00:32:04,159 --> 00:32:07,129
you need both in terms of the time it

00:32:05,809 --> 00:32:09,200
takes to spool up and the memory you

00:32:07,129 --> 00:32:10,460
need to have a second virtual machine on

00:32:09,200 --> 00:32:13,399
your laptop and all that sort of thing

00:32:10,460 --> 00:32:14,989
can you give any sort of way of going

00:32:13,399 --> 00:32:16,309
I personally I'm quite happy working I

00:32:14,989 --> 00:32:17,839
know there's a disparity but I'm willing

00:32:16,309 --> 00:32:19,249
to live with that because I've only got

00:32:17,839 --> 00:32:20,809
 around on my laptop and I

00:32:19,249 --> 00:32:22,909
haven't got space to launch up a virtual

00:32:20,809 --> 00:32:24,710
machine yep can you give any guidelines

00:32:22,909 --> 00:32:26,179
to stay what you see is like how much

00:32:24,710 --> 00:32:28,039
how much memory and how much time does

00:32:26,179 --> 00:32:30,320
it actually cost to get the environment

00:32:28,039 --> 00:32:32,419
you're talking about why I'm running a

00:32:30,320 --> 00:32:34,460
fairly small application at this stage

00:32:32,419 --> 00:32:36,320
because it hasn't really grown and so

00:32:34,460 --> 00:32:37,789
I'm on this laptop 4 gig running a

00:32:36,320 --> 00:32:39,799
vagrant box with half a gig of memory

00:32:37,789 --> 00:32:41,769
and I'm giving everything less threads

00:32:39,799 --> 00:32:44,269
and processes and it's doing just fine

00:32:41,769 --> 00:32:46,039
that said if your data base is big then

00:32:44,269 --> 00:32:47,779
you might have some fun there I also

00:32:46,039 --> 00:32:49,969
tend to have a long-running development

00:32:47,779 --> 00:32:52,519
environment I don't tend to destroy and

00:32:49,969 --> 00:32:56,210
fire up that thing every time it's kind

00:32:52,519 --> 00:32:58,429
of living there and it I guess to

00:32:56,210 --> 00:33:01,099
shortcut the answer you could get away

00:32:58,429 --> 00:33:04,249
with your approach and just do in

00:33:01,099 --> 00:33:05,869
staging that more isolated environment

00:33:04,249 --> 00:33:08,259
just to prove the error you're not gonna

00:33:05,869 --> 00:33:10,309
have any surprises I've found that

00:33:08,259 --> 00:33:12,080
there's sometimes the mental benefits

00:33:10,309 --> 00:33:14,149
just like how you virtualize your your

00:33:12,080 --> 00:33:16,039
Python environment virtualizing some of

00:33:14,149 --> 00:33:17,539
the operating system aspects out as well

00:33:16,039 --> 00:33:19,489
means that you don't have to upgrade

00:33:17,539 --> 00:33:21,849
your laptop on your service schedule and

00:33:19,489 --> 00:33:23,479
or vice versa

00:33:21,849 --> 00:33:25,849
cool

00:33:23,479 --> 00:33:27,290
just this isn't actually a question for

00:33:25,849 --> 00:33:30,350
you because

00:33:27,290 --> 00:33:32,690
I does anybody else have a solution for

00:33:30,350 --> 00:33:35,570
data based migrations when you're not

00:33:32,690 --> 00:33:38,210
using Django and so therefore can't use

00:33:35,570 --> 00:33:41,870
South come and find me afterwards

00:33:38,210 --> 00:33:45,890
because I would love to talk to you yeah

00:33:41,870 --> 00:33:55,460
and with that thank you very much John

00:33:45,890 --> 00:33:57,910
he's a coffee and thank you kindly thank

00:33:55,460 --> 00:33:57,910

YouTube URL: https://www.youtube.com/watch?v=_lgWVkYYtf4


