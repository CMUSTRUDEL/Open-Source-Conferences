Title: What's New in Python for Science and Engineering
Publication date: 2012-08-23
Playlist: PyCon Australia 2012
Description: 
	Edward Schofield
This is a tutorial about using Python for scientific and engineering purposes, focusing on the latest and best tools available in 2012. It will walk you through exploring a variety of interesting domains and problems using the latest
Captions: 
	00:00:02,879 --> 00:00:10,450
hi so thanks for that introduction um

00:00:07,050 --> 00:00:12,490
it's it's um yes it's good to be here

00:00:10,450 --> 00:00:14,470
and I'm glad to see you here so I'd like

00:00:12,490 --> 00:00:17,199
to act as a kind of messenger for some

00:00:14,470 --> 00:00:20,050
of the the great developments that have

00:00:17,199 --> 00:00:21,489
been happening in Python for science and

00:00:20,050 --> 00:00:23,320
engineering applications and there have

00:00:21,489 --> 00:00:25,419
been a lot of very exciting things

00:00:23,320 --> 00:00:27,069
happening um particularly in the last 12

00:00:25,419 --> 00:00:31,390
months so I thought I'd like to make

00:00:27,069 --> 00:00:33,449
this an update of a what's new so could

00:00:31,390 --> 00:00:37,899
I ask for a show of hands of people who

00:00:33,449 --> 00:00:42,519
have used numpy before okay and who's

00:00:37,899 --> 00:00:46,480
used ipython before okay great and who

00:00:42,519 --> 00:00:50,199
is used pandas before okay good all

00:00:46,480 --> 00:00:52,600
right so I'm alright with that so here's

00:00:50,199 --> 00:00:54,999
the structure I'd like to have for this

00:00:52,600 --> 00:00:58,089
so a brief introduction and then a

00:00:54,999 --> 00:00:59,760
little overview of the ecosystem for

00:00:58,089 --> 00:01:02,289
those who aren't familiar with it and

00:00:59,760 --> 00:01:04,540
then I'd like to show some demos of

00:01:02,289 --> 00:01:07,170
ipython and the ipython notebook

00:01:04,540 --> 00:01:09,910
interface and give some summaries from

00:01:07,170 --> 00:01:11,500
well of those sort of latest development

00:01:09,910 --> 00:01:14,980
and of a side PI conference that

00:01:11,500 --> 00:01:16,300
happened last last month and and then

00:01:14,980 --> 00:01:17,560
I'd like to introduce pandas for those

00:01:16,300 --> 00:01:19,300
who don't know about it and this is a

00:01:17,560 --> 00:01:22,330
great tool that has just come from

00:01:19,300 --> 00:01:24,660
nowhere in the last 12 months and now

00:01:22,330 --> 00:01:27,010
it's it's giving our a run for its money

00:01:24,660 --> 00:01:29,110
with data analysis and modeling and

00:01:27,010 --> 00:01:30,910
that's that's really great and then I'd

00:01:29,110 --> 00:01:33,310
like to sort of touch on the topic of

00:01:30,910 --> 00:01:35,830
Python 3 compatibility and show you what

00:01:33,310 --> 00:01:39,850
is possible today with python 3 with

00:01:35,830 --> 00:01:43,450
scientific and engineering tools okay so

00:01:39,850 --> 00:01:45,820
a brief intro how I found Python ISM so

00:01:43,450 --> 00:01:48,250
I was doing a computer science research

00:01:45,820 --> 00:01:51,340
in a pattern recognition in speech and

00:01:48,250 --> 00:01:53,200
image recognition technology and I found

00:01:51,340 --> 00:01:54,760
I needed good tools for that work and

00:01:53,200 --> 00:01:57,460
that had to be somewhat

00:01:54,760 --> 00:02:00,810
cross-disciplinary so so any of these

00:01:57,460 --> 00:02:05,080
tools that I tried to use a c-plus plus

00:02:00,810 --> 00:02:07,450
MATLAB Java and and so on they they were

00:02:05,080 --> 00:02:10,330
all too clunky or were too specialized

00:02:07,450 --> 00:02:15,080
and not general enough so I discovered

00:02:10,330 --> 00:02:17,090
Python and I haven't used any other

00:02:15,080 --> 00:02:20,720
programming languages since then it's a

00:02:17,090 --> 00:02:23,540
it's as I I did my research work using

00:02:20,720 --> 00:02:27,410
it and I started contributing to numpy

00:02:23,540 --> 00:02:29,420
and Syfy because back then it was a lot

00:02:27,410 --> 00:02:32,090
more primitive than it is now so now

00:02:29,420 --> 00:02:34,670
there's an amazing community back then

00:02:32,090 --> 00:02:36,350
it was kind of very very much smaller

00:02:34,670 --> 00:02:39,890
than it is now and back then there was

00:02:36,350 --> 00:02:42,320
actually a split between numeric and num

00:02:39,890 --> 00:02:44,900
array and so the numpy package that we

00:02:42,320 --> 00:02:46,010
have today didn't exist and that was

00:02:44,900 --> 00:02:48,530
really slowing down the adoption of

00:02:46,010 --> 00:02:50,360
Python in scientific circles for that

00:02:48,530 --> 00:02:52,340
reason but Travis Oliphant was the one

00:02:50,360 --> 00:02:53,690
who kind of took that I took the lead

00:02:52,340 --> 00:02:58,330
with that and he did a great job so

00:02:53,690 --> 00:02:58,330
anyway I'm I got involved with that and

00:02:58,390 --> 00:03:04,730
so a little bit about Python charmers

00:03:01,040 --> 00:03:07,730
who we are so we offer specialists for

00:03:04,730 --> 00:03:10,970
python training courses in in the age

00:03:07,730 --> 00:03:13,640
age of Pacific region and we we offer

00:03:10,970 --> 00:03:15,290
courses for programmers and but

00:03:13,640 --> 00:03:16,670
particularly for different kinds of

00:03:15,290 --> 00:03:19,090
scientists and engineers so there are

00:03:16,670 --> 00:03:22,010
some for geosciences and some for

00:03:19,090 --> 00:03:24,410
bioinformatics and financial engineering

00:03:22,010 --> 00:03:26,360
and so on and what we tend to do is to

00:03:24,410 --> 00:03:29,690
bring in specialists in each of these

00:03:26,360 --> 00:03:32,900
topics for for the training so if you're

00:03:29,690 --> 00:03:34,790
interested in in anything like that then

00:03:32,900 --> 00:03:36,800
let me know either from the side of

00:03:34,790 --> 00:03:39,200
taking a course or from the side of

00:03:36,800 --> 00:03:42,800
potentially giving a course in one of

00:03:39,200 --> 00:03:46,070
these specialized disciplines as well so

00:03:42,800 --> 00:03:48,980
I'd like to say thanks briefly to to d-h

00:03:46,070 --> 00:03:51,140
take action and cost your bill its key

00:03:48,980 --> 00:03:54,700
and Nathan Fujian they contributed some

00:03:51,140 --> 00:03:57,260
of the examples that I'll be presenting

00:03:54,700 --> 00:04:01,790
so now a brief overview of the

00:03:57,260 --> 00:04:04,640
scientific Python ecosystem I suppose a

00:04:01,790 --> 00:04:06,350
good place to start is with the

00:04:04,640 --> 00:04:07,760
conferences so there are two major

00:04:06,350 --> 00:04:10,400
conferences each year ones in America

00:04:07,760 --> 00:04:13,670
the SyFy one that's you know in Austin

00:04:10,400 --> 00:04:16,820
Texas currently and there's one in well

00:04:13,670 --> 00:04:18,830
if it's chops around between different

00:04:16,820 --> 00:04:22,729
European countries but it's it's sort of

00:04:18,830 --> 00:04:24,830
a yeah the euro sci-fi conference is

00:04:22,729 --> 00:04:27,440
happening again it's in about um I think

00:04:24,830 --> 00:04:28,010
it's next week and the Sci Fi conference

00:04:27,440 --> 00:04:30,440
was just

00:04:28,010 --> 00:04:33,290
last month so there's a lot of um

00:04:30,440 --> 00:04:36,920
interesting work being published and and

00:04:33,290 --> 00:04:38,300
discussed right now so here's a photo

00:04:36,920 --> 00:04:41,300
it's a little bit old if it's of the

00:04:38,300 --> 00:04:47,090
site by conference you know so I think

00:04:41,300 --> 00:04:48,530
it was last last year the yeah the

00:04:47,090 --> 00:04:52,340
complete community is very large

00:04:48,530 --> 00:04:55,910
nowadays and it's it's very interesting

00:04:52,340 --> 00:04:59,060
the over there are over 1 million unique

00:04:55,910 --> 00:05:02,660
visitors to to site this iPod oral

00:04:59,060 --> 00:05:05,030
website now each year and that's that's

00:05:02,660 --> 00:05:08,810
very impressive also the the new pandas

00:05:05,030 --> 00:05:12,800
package is um it's now had a hundred

00:05:08,810 --> 00:05:15,050
thousand downloads from pie-pie in just

00:05:12,800 --> 00:05:18,470
the last 12 months so here are some of

00:05:15,050 --> 00:05:21,530
the packages in use and numpy acts as

00:05:18,470 --> 00:05:22,940
the kind of foundation providing a basic

00:05:21,530 --> 00:05:26,030
array infrastructure and then there are

00:05:22,940 --> 00:05:28,100
various others that make use of that

00:05:26,030 --> 00:05:33,890
so numpy itself is quite a low-level

00:05:28,100 --> 00:05:37,640
tool nowadays a few years ago it was

00:05:33,890 --> 00:05:39,920
quite a high level tool in some ways but

00:05:37,640 --> 00:05:42,020
but now there are many others that build

00:05:39,920 --> 00:05:45,950
on top of it and I'll be presenting a

00:05:42,020 --> 00:05:48,020
couple of those today this slide just

00:05:45,950 --> 00:05:50,660
gives one perspective on a history

00:05:48,020 --> 00:05:53,810
history of scientific computing from a

00:05:50,660 --> 00:05:57,410
focus on raw computational efficiency a

00:05:53,810 --> 00:06:00,790
few decades ago to a focus on programmer

00:05:57,410 --> 00:06:03,770
efficiency and ease and now that's

00:06:00,790 --> 00:06:05,750
that's sort of increasing and now

00:06:03,770 --> 00:06:09,140
there's more on the way of interactivity

00:06:05,750 --> 00:06:14,770
and visualization and the future perhaps

00:06:09,140 --> 00:06:14,770
is with open source high-level languages

00:06:15,850 --> 00:06:20,470
so at the other sci-fi conference it

00:06:17,980 --> 00:06:23,200
seems there was quite a focus on Python

00:06:20,470 --> 00:06:26,410
as the superglue for a variety of

00:06:23,200 --> 00:06:29,550
interesting tools here are some of the

00:06:26,410 --> 00:06:31,840
sort of themes at the moment in in

00:06:29,550 --> 00:06:34,300
scientific and engineering uses of

00:06:31,840 --> 00:06:37,800
Python so high-performance computing is

00:06:34,300 --> 00:06:41,290
a big deal to do with our CPUs growing

00:06:37,800 --> 00:06:44,050
yeah I sort of parallelism and in CPUs

00:06:41,290 --> 00:06:47,640
nowadays and and there's the question of

00:06:44,050 --> 00:06:49,510
what what tools can make use of that and

00:06:47,640 --> 00:06:51,310
number I'll just mention is something

00:06:49,510 --> 00:06:53,170
that travels all the fan presented at

00:06:51,310 --> 00:06:57,100
Syfy it's a it's still at the research

00:06:53,170 --> 00:06:58,390
project stage perhaps but the the goal

00:06:57,100 --> 00:07:03,070
of it is to take the high level

00:06:58,390 --> 00:07:06,730
information in in numpy code and to act

00:07:03,070 --> 00:07:09,750
as a a translator to to this low level

00:07:06,730 --> 00:07:12,430
virtual machine bytecode so that can be

00:07:09,750 --> 00:07:14,170
compiled on the fly so using using type

00:07:12,430 --> 00:07:15,850
inference and type inference is

00:07:14,170 --> 00:07:18,070
sometimes hard and sometimes easy

00:07:15,850 --> 00:07:21,520
the goal for number I think is just a

00:07:18,070 --> 00:07:24,310
tackle the easier problems first so it

00:07:21,520 --> 00:07:27,910
should act as a so yeah as a way of

00:07:24,310 --> 00:07:31,240
really are speeding up code without

00:07:27,910 --> 00:07:34,240
trying there are various other tools as

00:07:31,240 --> 00:07:35,860
well the ipython notebook is is very

00:07:34,240 --> 00:07:38,200
cool so for those who haven't seen that

00:07:35,860 --> 00:07:41,880
I'll be demonstrating that today and and

00:07:38,200 --> 00:07:45,250
pandas is a very useful tool as well so

00:07:41,880 --> 00:07:46,510
so I'll just mention these as well so if

00:07:45,250 --> 00:07:49,210
you're interested in up-to-date

00:07:46,510 --> 00:07:51,760
information there are videos of the SyFy

00:07:49,210 --> 00:07:56,560
conference last month are there online

00:07:51,760 --> 00:07:58,330
now as of a about a week ago and the

00:07:56,560 --> 00:08:06,580
euro side by conference will be in about

00:07:58,330 --> 00:08:10,900
well that that's or next week so so now

00:08:06,580 --> 00:08:12,490
I'd like to introduce a Python for those

00:08:10,900 --> 00:08:17,230
who aren't aware of it and for those who

00:08:12,490 --> 00:08:19,170
are also show show you what's new with

00:08:17,230 --> 00:08:21,430
it and what you can do with it now

00:08:19,170 --> 00:08:22,960
first of all the goals are very

00:08:21,430 --> 00:08:25,030
ambitious actually the goals for the

00:08:22,960 --> 00:08:27,760
ipython project are to streamline the

00:08:25,030 --> 00:08:29,000
entire scientific workflow and and

00:08:27,760 --> 00:08:31,730
there's this

00:08:29,000 --> 00:08:34,150
of executable publications which should

00:08:31,730 --> 00:08:37,120
lead to more reproducible science

00:08:34,150 --> 00:08:41,080
scientific results particularly if

00:08:37,120 --> 00:08:44,560
notebooks can be shared on the cloud and

00:08:41,080 --> 00:08:47,360
people can collaborate on those as well

00:08:44,560 --> 00:08:49,850
so the idea of executable publications

00:08:47,360 --> 00:08:52,670
so to make that possible the ipython

00:08:49,850 --> 00:08:54,590
notebook handles very rich display of

00:08:52,670 --> 00:08:58,190
objects and I'll give some examples of

00:08:54,590 --> 00:09:03,380
that and and one of the latest features

00:08:58,190 --> 00:09:05,420
which hasn't yet really hit the I don't

00:09:03,380 --> 00:09:11,150
think it's in the git repo yet either

00:09:05,420 --> 00:09:14,270
but but Fernando Perez the the kind of

00:09:11,150 --> 00:09:16,490
an lead for the ipython protein he was

00:09:14,270 --> 00:09:18,380
hacking on it around the time of the

00:09:16,490 --> 00:09:24,470
sci-fi conference and he showed a little

00:09:18,380 --> 00:09:26,510
demo at that conference so yeah so one

00:09:24,470 --> 00:09:29,480
of the features it has this integrated

00:09:26,510 --> 00:09:32,690
mathjax so who's heard of mathjax it's a

00:09:29,480 --> 00:09:36,530
brilliant JavaScript library that can

00:09:32,690 --> 00:09:38,900
render latex code in the browser and it

00:09:36,530 --> 00:09:42,890
does so very very well and the goal for

00:09:38,900 --> 00:09:45,080
it is to to work across all browsers so

00:09:42,890 --> 00:09:48,140
there's a little example some are some

00:09:45,080 --> 00:09:50,540
text source and that will would render

00:09:48,140 --> 00:09:53,480
to that so on I'll give you some

00:09:50,540 --> 00:09:55,910
examples of that too so this is this

00:09:53,480 --> 00:09:59,660
idea of a PDF output from ipython

00:09:55,910 --> 00:10:01,790
notebooks and the idea is that that

00:09:59,660 --> 00:10:04,940
it'll be possible to just produce a PDF

00:10:01,790 --> 00:10:08,240
version of a paper directly from the the

00:10:04,940 --> 00:10:10,820
notebook without editing any anything so

00:10:08,240 --> 00:10:14,150
completely automatic translation from

00:10:10,820 --> 00:10:16,070
that notebook to that static publication

00:10:14,150 --> 00:10:17,540
so that's a that's very interesting

00:10:16,070 --> 00:10:20,180
including all of the equations and

00:10:17,540 --> 00:10:22,670
graphics and everything so to make this

00:10:20,180 --> 00:10:26,630
possible the ipython project has

00:10:22,670 --> 00:10:30,050
undergone quite a serious restructuring

00:10:26,630 --> 00:10:32,900
in the last few years and now there's a

00:10:30,050 --> 00:10:34,730
kernel which runs sort of this

00:10:32,900 --> 00:10:37,070
client-server to a sort of relationship

00:10:34,730 --> 00:10:40,380
and you can have multiple clients each

00:10:37,070 --> 00:10:46,140
connecting to this I - kernel

00:10:40,380 --> 00:10:48,210
and I'll give some demos of the

00:10:46,140 --> 00:10:53,010
interface with simp I using that mathjax

00:10:48,210 --> 00:10:54,990
interface and interface with our and in

00:10:53,010 --> 00:10:58,800
am in line with the pirate-themed from

00:10:54,990 --> 00:11:03,690
this morning um I've got this flag here

00:10:58,800 --> 00:11:05,280
and and there's this um this quote I

00:11:03,690 --> 00:11:09,420
thought I'd share with you which is to

00:11:05,280 --> 00:11:11,040
err is human and to R is pirate I

00:11:09,420 --> 00:11:21,540
thought that was good so I'll

00:11:11,040 --> 00:11:23,940
demonstrate that yeah okay all right so

00:11:21,540 --> 00:11:26,420
here's the ipython notebook running in

00:11:23,940 --> 00:11:30,210
this I will bunt a virtual machine here

00:11:26,420 --> 00:11:35,580
so I've got a few here that I'll show

00:11:30,210 --> 00:11:38,750
you so the idea is it's in a web browser

00:11:35,580 --> 00:11:41,070
for those who haven't seen it so this is

00:11:38,750 --> 00:11:45,270
you can invoke this from the terminal by

00:11:41,070 --> 00:11:48,150
typing ipython notebook and and you can

00:11:45,270 --> 00:11:52,230
run and while the Edit code there's also

00:11:48,150 --> 00:11:56,630
documentation so this is markdown you

00:11:52,230 --> 00:11:58,890
can format it as well and you run this

00:11:56,630 --> 00:12:02,580
pylab in line now that invokes

00:11:58,890 --> 00:12:06,570
matplotlib and that now allows you to

00:12:02,580 --> 00:12:08,520
plot figures inside the browser and so

00:12:06,570 --> 00:12:11,490
I'm going to run that and run that

00:12:08,520 --> 00:12:15,120
little for loop and there I've got my my

00:12:11,490 --> 00:12:18,750
plot from matplotlib and one of the new

00:12:15,120 --> 00:12:20,370
features of in just in the last few few

00:12:18,750 --> 00:12:27,780
months you can actually resize these as

00:12:20,370 --> 00:12:30,390
well yeah yeah this is a really

00:12:27,780 --> 00:12:34,470
brilliant project and yeah they've been

00:12:30,390 --> 00:12:39,720
doing amazing work with this so you can

00:12:34,470 --> 00:12:41,280
export these to download the Python

00:12:39,720 --> 00:12:43,860
script or you can just print it from the

00:12:41,280 --> 00:12:46,770
browser into a PDF or whatever so it's

00:12:43,860 --> 00:12:48,240
it's really really great so um so now

00:12:46,770 --> 00:12:49,680
here's a little example with our Monte

00:12:48,240 --> 00:12:51,960
Carlo simulation so something that might

00:12:49,680 --> 00:12:53,460
be useful so in this case it's just

00:12:51,960 --> 00:12:57,660
estimating pi

00:12:53,460 --> 00:12:59,160
it's using a generator okay so there's

00:12:57,660 --> 00:13:02,250
this little generator and I'm gonna run

00:12:59,160 --> 00:13:03,810
it now 50 times and there's the plot so

00:13:02,250 --> 00:13:06,150
I can see I can kind of analyze

00:13:03,810 --> 00:13:07,680
convergence behavior and I should see it

00:13:06,150 --> 00:13:12,300
starting to converge on three point

00:13:07,680 --> 00:13:17,460
three point one four before long so if I

00:13:12,300 --> 00:13:19,290
run it ten thousand iterations now okay

00:13:17,460 --> 00:13:20,730
you know I'm gonna actually time that

00:13:19,290 --> 00:13:22,170
and see how long that takes so this

00:13:20,730 --> 00:13:24,060
percent time at command for those who

00:13:22,170 --> 00:13:27,360
don't know this is a I python command

00:13:24,060 --> 00:13:28,620
this will run that piece of code as many

00:13:27,360 --> 00:13:30,420
times as it needs to to get an accurate

00:13:28,620 --> 00:13:32,580
estimate of how long that took it's in

00:13:30,420 --> 00:13:35,100
this case 600 or so microseconds per

00:13:32,580 --> 00:13:37,320
loop so it's very fast so I'm gonna just

00:13:35,100 --> 00:13:40,470
go back and edit that now so this is

00:13:37,320 --> 00:13:43,530
it's nice that you can actually you can

00:13:40,470 --> 00:13:45,000
just change code so it's it unlike sort

00:13:43,530 --> 00:13:46,410
of a standard terminal

00:13:45,000 --> 00:13:48,990
it doesn't just keep scrolling up you

00:13:46,410 --> 00:13:51,870
can go back and edit and then just rerun

00:13:48,990 --> 00:13:56,640
it which is a great for exploratory data

00:13:51,870 --> 00:13:58,620
analysis okay a couple of little own

00:13:56,640 --> 00:14:01,830
image smoothing examples I gave some of

00:13:58,620 --> 00:14:05,130
these last year but the ipython notebook

00:14:01,830 --> 00:14:08,250
wasn't hadn't really been announced yet

00:14:05,130 --> 00:14:11,040
and had it it wasn't yet officially

00:14:08,250 --> 00:14:13,260
released at this time this conference

00:14:11,040 --> 00:14:15,990
last year so I gave these examples

00:14:13,260 --> 00:14:17,910
without it but I'll just show you that

00:14:15,990 --> 00:14:23,730
so this is an example if I'm just sort

00:14:17,910 --> 00:14:25,590
of denoising using convolution and you

00:14:23,730 --> 00:14:27,380
can you can see the results of this this

00:14:25,590 --> 00:14:29,550
filtering and the browser like that and

00:14:27,380 --> 00:14:30,690
that's quite nice I've got a couple of

00:14:29,550 --> 00:14:35,280
other little image reconstruction

00:14:30,690 --> 00:14:37,350
examples too so so here's one the

00:14:35,280 --> 00:14:41,370
original image and I corrupt it with

00:14:37,350 --> 00:14:44,930
random noise white noise and now if I

00:14:41,370 --> 00:14:48,810
want to use the signal processing

00:14:44,930 --> 00:14:50,700
package inside PI and this this vina

00:14:48,810 --> 00:14:53,010
function there I can reconstruct that so

00:14:50,700 --> 00:14:56,130
that's um that's better than the the

00:14:53,010 --> 00:14:59,520
noisy version so so yeah it's it's nice

00:14:56,130 --> 00:15:00,780
I guess this is a demo of a couple of

00:14:59,520 --> 00:15:04,050
things but it's just sort of what's

00:15:00,780 --> 00:15:06,080
possible with this so if we have time

00:15:04,050 --> 00:15:10,220
later I'll come back and show you

00:15:06,080 --> 00:15:12,170
some of these others there's this yeah

00:15:10,220 --> 00:15:22,510
that's fine

00:15:12,170 --> 00:15:22,510
all right okay

00:15:23,920 --> 00:15:28,299
so the next thing I'll show you is

00:15:26,259 --> 00:15:31,119
animation so it supports primitive

00:15:28,299 --> 00:15:33,399
animation it's not as good as something

00:15:31,119 --> 00:15:35,799
like Chaco dedicated I sort of plotting

00:15:33,399 --> 00:15:38,739
animated plotting package but it's it's

00:15:35,799 --> 00:15:41,829
okay for for some purposes so here's a

00:15:38,739 --> 00:15:43,239
little example of how you do this in a

00:15:41,829 --> 00:15:45,850
browser to see that numbers changing

00:15:43,239 --> 00:15:48,100
from 0 up to 9 there so you can have

00:15:45,850 --> 00:15:49,919
sort of simple simple indications of

00:15:48,100 --> 00:15:53,649
progress in the browser like that and

00:15:49,919 --> 00:15:57,029
and here's a plotting example so I'm

00:15:53,649 --> 00:16:00,009
going to run that there we go so adding

00:15:57,029 --> 00:16:03,730
adding more more Bessel functions there

00:16:00,009 --> 00:16:06,279
to that plot so so yeah you can do

00:16:03,730 --> 00:16:08,799
things like this I thought I'd show you

00:16:06,279 --> 00:16:10,809
this as well you can embed YouTube

00:16:08,799 --> 00:16:15,160
videos I found this skateboarding dog

00:16:10,809 --> 00:16:18,609
which I thought was really amazing so so

00:16:15,160 --> 00:16:19,839
I'll see if that works there we go

00:16:18,609 --> 00:16:24,100
I thought I'd show you this

00:16:19,839 --> 00:16:27,309
skateboarding dog it's just cool so you

00:16:24,100 --> 00:16:29,879
can just um you embed our mpeg-4 videos

00:16:27,309 --> 00:16:34,209
as well directly in your scientific

00:16:29,879 --> 00:16:38,730
publication very scientific indeed isn't

00:16:34,209 --> 00:16:40,839
it yeah alright okay there we go so I

00:16:38,730 --> 00:16:47,699
better stop that or it'll make my

00:16:40,839 --> 00:16:53,110
computer were with a fan okay alright so

00:16:47,699 --> 00:16:54,819
now assume pi um so sin pi is the sort

00:16:53,110 --> 00:16:58,799
of open source symbolic math toolkit so

00:16:54,819 --> 00:17:00,850
otherwise known as homework solving I

00:16:58,799 --> 00:17:03,519
don't know what the teenagers of today

00:17:00,850 --> 00:17:07,360
do with their with their math homework

00:17:03,519 --> 00:17:09,159
for them but they would probably get

00:17:07,360 --> 00:17:11,589
pretty far with something like this I

00:17:09,159 --> 00:17:14,500
just don't show you this this see the

00:17:11,589 --> 00:17:16,929
double % this R that's what this sort of

00:17:14,500 --> 00:17:19,389
sell magic command that I Python offers

00:17:16,929 --> 00:17:22,179
from embedded latex so you just had some

00:17:19,389 --> 00:17:26,079
related code and oh okay so that didn't

00:17:22,179 --> 00:17:29,559
work I need to run that and it's got

00:17:26,079 --> 00:17:32,360
this load extension simp I printing and

00:17:29,559 --> 00:17:33,679
I'll try that again okay

00:17:32,360 --> 00:17:35,990
that's not working for me right now

00:17:33,679 --> 00:17:38,090
sorry about that

00:17:35,990 --> 00:17:39,650
maybe it was my skateboarding dog that's

00:17:38,090 --> 00:17:43,179
kind of destabilize the kernel or

00:17:39,650 --> 00:17:46,010
something like that I try to restart it

00:17:43,179 --> 00:17:47,420
yeah this is nice so if you've got a

00:17:46,010 --> 00:17:49,910
process that crashes like if you've got

00:17:47,420 --> 00:17:53,630
siphoned code which is doing something

00:17:49,910 --> 00:17:55,580
nasty and causing a seg fault and then

00:17:53,630 --> 00:17:58,490
you can you can restart your kernel from

00:17:55,580 --> 00:18:02,480
the browser like this and try that once

00:17:58,490 --> 00:18:03,170
more good and that no okay that's not

00:18:02,480 --> 00:18:05,960
coming out right now

00:18:03,170 --> 00:18:09,260
oh well so this is this gonna work yeah

00:18:05,960 --> 00:18:10,490
that's good so this is um yeah you can

00:18:09,260 --> 00:18:13,580
find these things and now I'll just

00:18:10,490 --> 00:18:15,410
expand that both so that's simple and

00:18:13,580 --> 00:18:18,410
this is showing the integration between

00:18:15,410 --> 00:18:20,840
sin PI and the ipython notebook here so

00:18:18,410 --> 00:18:23,510
see what this is this is an image just

00:18:20,840 --> 00:18:25,790
like wow I guess it's simpler than that

00:18:23,510 --> 00:18:27,860
YouTube video but it's an image so

00:18:25,790 --> 00:18:30,940
there's this generalization of a concept

00:18:27,860 --> 00:18:34,370
of the representation of a Python object

00:18:30,940 --> 00:18:37,520
to two images two web pages you can

00:18:34,370 --> 00:18:40,130
embed it embed inside and so on and

00:18:37,520 --> 00:18:47,000
other things like this and I'll simplify

00:18:40,130 --> 00:18:50,690
that yeah so it's yes right and I solve

00:18:47,000 --> 00:18:53,390
it I get my my routes so so this is a

00:18:50,690 --> 00:18:57,200
another amazing tool and the integration

00:18:53,390 --> 00:18:59,870
is so slick between between i-5 and its

00:18:57,200 --> 00:19:03,020
empire now I'm Australia's from other

00:18:59,870 --> 00:19:08,260
things here so limits and Taylor series

00:19:03,020 --> 00:19:15,919
expansions symbolic differentiation here

00:19:08,260 --> 00:19:18,590
and symbolic integration and now yeah so

00:19:15,919 --> 00:19:20,630
there's a this Taylor series example so

00:19:18,590 --> 00:19:22,940
some of these are sort of based on

00:19:20,630 --> 00:19:25,250
examples our example ipython notebooks

00:19:22,940 --> 00:19:28,370
that come with ipython now this Taylor

00:19:25,250 --> 00:19:30,559
series is like that so it's it's a

00:19:28,370 --> 00:19:32,299
rather long function but I'll just I'll

00:19:30,559 --> 00:19:34,730
run it and I'll show you the sorts of

00:19:32,299 --> 00:19:36,919
things you can do so yeah for kind of

00:19:34,730 --> 00:19:38,960
comparing different Taylor series

00:19:36,919 --> 00:19:41,660
expansions that sort of thing so it

00:19:38,960 --> 00:19:44,960
makes our analysis

00:19:41,660 --> 00:19:51,950
quite easy nowadays yeah

00:19:44,960 --> 00:19:53,270
so I'm alright one more just to yeah you

00:19:51,950 --> 00:19:57,130
can sort of analyze the behavior there

00:19:53,270 --> 00:19:57,130
so really it's really pretty easy

00:19:57,460 --> 00:20:05,660
okay so the next thing I'd like to show

00:20:02,240 --> 00:20:08,230
you is the integration with our Laszlo's

00:20:05,660 --> 00:20:13,610
our magic

00:20:08,230 --> 00:20:18,650
so it's this load X our magic now this

00:20:13,610 --> 00:20:22,220
is so with any luck in the future we

00:20:18,650 --> 00:20:23,870
won't be needing to use our because

00:20:22,220 --> 00:20:26,930
tools like pandas will just keep getting

00:20:23,870 --> 00:20:30,320
better and better but there is a great

00:20:26,930 --> 00:20:32,060
wealth of statistical functions that are

00:20:30,320 --> 00:20:36,260
being written in in our so that we can

00:20:32,060 --> 00:20:38,090
make use of with this tool our PI and so

00:20:36,260 --> 00:20:40,850
this sort of shows the interface by the

00:20:38,090 --> 00:20:42,530
way this is our PI last I checked it's

00:20:40,850 --> 00:20:46,310
completely impossible to install on

00:20:42,530 --> 00:20:50,240
Windows so I wouldn't even try but it

00:20:46,310 --> 00:20:55,790
works with a couple of versions late

00:20:50,240 --> 00:21:04,340
yeah yeah yeah major versions often do

00:20:55,790 --> 00:21:06,710
right yeah all right yeah yeah stay

00:21:04,340 --> 00:21:12,140
tuned for the talk on our PI I made it

00:21:06,710 --> 00:21:20,810
yeah okay so um some it solves at the

00:21:12,140 --> 00:21:27,320
integration there so this result yeah so

00:21:20,810 --> 00:21:27,800
it's come from this is so yeah just

00:21:27,320 --> 00:21:30,170
checking

00:21:27,800 --> 00:21:31,250
so yeah running this our code and

00:21:30,170 --> 00:21:32,870
checking that it's the same as the

00:21:31,250 --> 00:21:34,250
python code here and I've wanted to show

00:21:32,870 --> 00:21:39,430
you this other thing here's where

00:21:34,250 --> 00:21:41,810
precision one you can set the precision

00:21:39,430 --> 00:21:44,000
like that Aniyah python which is quite

00:21:41,810 --> 00:21:46,430
nice so if you're if you're used to if

00:21:44,000 --> 00:21:49,040
you don't want to have this anymore you

00:21:46,430 --> 00:21:49,940
know some and use this magic precision

00:21:49,040 --> 00:21:53,389
command

00:21:49,940 --> 00:21:57,320
and it'll it'll give you a different

00:21:53,389 --> 00:22:01,159
number of decimal places okay so yeah

00:21:57,320 --> 00:22:04,570
you can capture plots from R as well so

00:22:01,159 --> 00:22:07,519
there's an R plot just in the browser to

00:22:04,570 --> 00:22:10,820
cell level magic this is so this is

00:22:07,519 --> 00:22:14,269
saying um so that yeah the rest of these

00:22:10,820 --> 00:22:17,450
are our commands it's going to issue it

00:22:14,269 --> 00:22:21,409
runs those and there's the our plots so

00:22:17,450 --> 00:22:23,389
I'm yeah now the rest of it is I won't

00:22:21,409 --> 00:22:25,909
go into that essentially the way to get

00:22:23,389 --> 00:22:27,500
our data frames into Python now is

00:22:25,909 --> 00:22:29,299
through numpy structure to raise and

00:22:27,500 --> 00:22:31,039
that's it's okay it's a little bit

00:22:29,299 --> 00:22:34,580
clunky and in the future pandas is going

00:22:31,039 --> 00:22:36,559
to make well this easier so things the

00:22:34,580 --> 00:22:37,759
structured array so our data frames are

00:22:36,559 --> 00:22:39,830
going to come straight in as pandas

00:22:37,759 --> 00:22:43,970
dataframes so I'll show you what I mean

00:22:39,830 --> 00:22:45,500
by that when I come to pandas next one

00:22:43,970 --> 00:22:49,840
other thing go first am who's used

00:22:45,500 --> 00:22:55,340
syphon okay not not as many people so

00:22:49,840 --> 00:22:58,940
syphon is it's a it's a hybrid between C

00:22:55,340 --> 00:23:00,830
or C++ and Python and it allows you to

00:22:58,940 --> 00:23:03,259
statically declare well that declare the

00:23:00,830 --> 00:23:05,029
types of some variables in order to get

00:23:03,259 --> 00:23:10,009
little speed ups and it sort of calls

00:23:05,029 --> 00:23:13,129
your C compiler in line so now I Python

00:23:10,009 --> 00:23:19,909
notebook can actually do this for for us

00:23:13,129 --> 00:23:22,539
so I'm so I can run this sort of thing

00:23:19,909 --> 00:23:24,919
in siphon now here's an example of where

00:23:22,539 --> 00:23:27,139
some of these are that the types are

00:23:24,919 --> 00:23:28,909
declared okay double see this it's a

00:23:27,139 --> 00:23:31,039
function looks like Python but it's what

00:23:28,909 --> 00:23:34,429
these variables are declared as doubles

00:23:31,039 --> 00:23:35,929
here so so in any case this will run a

00:23:34,429 --> 00:23:38,570
lot faster than the equivalent Python

00:23:35,929 --> 00:23:40,429
version would in that loop and if I run

00:23:38,570 --> 00:23:41,960
that there and there's this time it

00:23:40,429 --> 00:23:43,480
function again and just see how long

00:23:41,960 --> 00:23:49,370
that takes

00:23:43,480 --> 00:23:51,379
there we go it's yeah so this is a nice

00:23:49,370 --> 00:23:53,450
for those who use siphon it's becoming

00:23:51,379 --> 00:23:54,769
easier and easier so what this is

00:23:53,450 --> 00:23:57,919
actually doing it's actually compiling

00:23:54,769 --> 00:24:01,309
this code try translating the Python

00:23:57,919 --> 00:24:04,909
code to to see compiling the C code

00:24:01,309 --> 00:24:07,789
and and and pulling it in and in calling

00:24:04,909 --> 00:24:08,870
it so so that's some that's all going on

00:24:07,789 --> 00:24:18,860
under the hood just when I press shift

00:24:08,870 --> 00:24:22,039
enter there okay so the next topic here

00:24:18,860 --> 00:24:26,029
is a pandas how am i doing for time it's

00:24:22,039 --> 00:24:26,419
1 in 36 25 okay you got about 15 minutes

00:24:26,029 --> 00:24:30,769
left

00:24:26,419 --> 00:24:34,700
all right so uh yeah this is a great

00:24:30,769 --> 00:24:37,039
tool now and it's really um come from

00:24:34,700 --> 00:24:39,769
nowhere it's um so they're in five major

00:24:37,039 --> 00:24:41,830
releases in the last 12 months really

00:24:39,769 --> 00:24:44,539
rapid development and now they're are

00:24:41,830 --> 00:24:46,759
well they're beans 65 committers in that

00:24:44,539 --> 00:24:50,139
time twelve months ago there was only

00:24:46,759 --> 00:24:53,210
just really where's McKinney I think and

00:24:50,139 --> 00:24:54,559
yeah so they're just in the last few

00:24:53,210 --> 00:24:56,240
months the main focus has been on

00:24:54,559 --> 00:24:58,700
overhauling time series because I'm

00:24:56,240 --> 00:25:02,720
didn't anyone use the sidekick time

00:24:58,700 --> 00:25:04,700
series package okay only one person I

00:25:02,720 --> 00:25:07,820
think yeah that's now been declared um

00:25:04,700 --> 00:25:10,629
defunct and and the functionality is

00:25:07,820 --> 00:25:14,869
being merged into pandas for those who

00:25:10,629 --> 00:25:17,600
who want to manipulate time series data

00:25:14,869 --> 00:25:22,460
so um that makes use of this this date

00:25:17,600 --> 00:25:25,669
time 64 object which is in numpy 1.7 now

00:25:22,460 --> 00:25:28,820
Ubuntu 12.04 you of this um the

00:25:25,669 --> 00:25:30,139
long-term support release that's this

00:25:28,820 --> 00:25:31,549
has come out recently that doesn't have

00:25:30,139 --> 00:25:36,139
an on PI 1.7 so it's gonna be

00:25:31,549 --> 00:25:37,730
interesting to see how how Ubuntu users

00:25:36,139 --> 00:25:40,399
can can install the latest version of

00:25:37,730 --> 00:25:42,379
pandas but it does am include one point

00:25:40,399 --> 00:25:45,799
six point one I think so

00:25:42,379 --> 00:25:47,779
so with any luck that'll be okay but

00:25:45,799 --> 00:25:50,899
it's probably a better idea of

00:25:47,779 --> 00:25:53,960
time-series users to install they the

00:25:50,899 --> 00:25:57,320
latest numpy by hand so I'll show you

00:25:53,960 --> 00:26:00,159
you some demos about pandas now so just

00:25:57,320 --> 00:26:04,879
some some simple ones to start off with

00:26:00,159 --> 00:26:07,970
the Olympic medal table this is a fun so

00:26:04,879 --> 00:26:10,549
this um I found a spreadsheet on on New

00:26:07,970 --> 00:26:13,159
Zealand government website which which

00:26:10,549 --> 00:26:13,820
showed um olympic the Olympic medal

00:26:13,159 --> 00:26:20,350
tally

00:26:13,820 --> 00:26:23,720
and population and and compare them and

00:26:20,350 --> 00:26:25,700
so and so I'm gonna so I kind of

00:26:23,720 --> 00:26:28,940
doctored this and I've got the CSV file

00:26:25,700 --> 00:26:30,860
now which is just just the essentials so

00:26:28,940 --> 00:26:32,990
I'll read that in so notice you can read

00:26:30,860 --> 00:26:36,890
that CSV with just one line and it comes

00:26:32,990 --> 00:26:42,800
in like this so now this is a data frame

00:26:36,890 --> 00:26:48,640
in pandas so it shows us that we've got

00:26:42,800 --> 00:26:54,050
one two three four five columns and 204

00:26:48,640 --> 00:26:58,430
countries and and I'm going to print

00:26:54,050 --> 00:27:01,250
that now as a string so so there we go

00:26:58,430 --> 00:27:03,620
that's the population in millions and

00:27:01,250 --> 00:27:05,840
the first number is a number of gold

00:27:03,620 --> 00:27:10,520
medals they are gold silver bronze and

00:27:05,840 --> 00:27:13,970
total okay so I'm so now what I thought

00:27:10,520 --> 00:27:16,970
I'd do is I plot the UM yeah which

00:27:13,970 --> 00:27:19,940
countries were the most successful by

00:27:16,970 --> 00:27:21,410
ahead of population and so if we look at

00:27:19,940 --> 00:27:24,080
gold medals we can do this kind of thing

00:27:21,410 --> 00:27:27,160
in Paris so metals gold now that is

00:27:24,080 --> 00:27:31,850
going to pluck out the the gold column

00:27:27,160 --> 00:27:33,860
okay so it's it's um it's like the numpy

00:27:31,850 --> 00:27:37,010
record array interface or sort of

00:27:33,860 --> 00:27:40,670
structured array interface but um it's

00:27:37,010 --> 00:27:42,500
it's nice it's sort of um it's at a

00:27:40,670 --> 00:27:45,500
higher level so in any case I'm gonna

00:27:42,500 --> 00:27:49,160
run that and then just filter it to make

00:27:45,500 --> 00:27:53,200
it plottable and now that's the that's a

00:27:49,160 --> 00:27:56,780
bar plot there so Jamaica's got the most

00:27:53,200 --> 00:27:58,610
nodes at Grenada Grenada yeah and

00:27:56,780 --> 00:28:01,690
Jamaica is down there

00:27:58,610 --> 00:28:04,970
so what's that Bahamas in second place

00:28:01,690 --> 00:28:06,680
yeah so and so that's interesting and so

00:28:04,970 --> 00:28:10,550
where's New Zealand on that list it's um

00:28:06,680 --> 00:28:12,380
number four i thinkin and we don't know

00:28:10,550 --> 00:28:19,670
anyway

00:28:12,380 --> 00:28:25,000
yes so I'm if we if we change that now

00:28:19,670 --> 00:28:29,210
from Gaul to total so we do a bit better

00:28:25,000 --> 00:28:39,950
plot that so Jamaica is now way on Oh

00:28:29,210 --> 00:28:46,160
Grenada again right hmm that's true yeah

00:28:39,950 --> 00:28:48,470
there we go okay that's pretty good

00:28:46,160 --> 00:28:51,050
so I'm another feature of our this

00:28:48,470 --> 00:28:54,740
ipython notebook I'm it apparently it's

00:28:51,050 --> 00:28:56,450
in the git repo now I thought I pull the

00:28:54,740 --> 00:28:58,670
version that is supposed to work it

00:28:56,450 --> 00:29:02,090
crashes from me currently but the

00:28:58,670 --> 00:29:03,530
feature is that you can in theory you

00:29:02,090 --> 00:29:06,350
can now switch between different

00:29:03,530 --> 00:29:09,740
matplotlib backends so so I just had

00:29:06,350 --> 00:29:13,610
that popping up as a WX window I could

00:29:09,740 --> 00:29:17,870
equally well now do pylab in line if if

00:29:13,610 --> 00:29:21,350
it were working and it will be soon so

00:29:17,870 --> 00:29:23,090
and then I could we we plot that as an

00:29:21,350 --> 00:29:25,460
in line plot okay but it's not working

00:29:23,090 --> 00:29:27,920
the moment but yeah but that would be

00:29:25,460 --> 00:29:32,570
possible soon to switch between those

00:29:27,920 --> 00:29:35,240
backends okay so a bit more about pandas

00:29:32,570 --> 00:29:38,330
now this is just giving a few other

00:29:35,240 --> 00:29:41,540
examples of them what it's all about

00:29:38,330 --> 00:29:48,350
okay so I'm there's this sort of this

00:29:41,540 --> 00:29:49,610
concept columns and indices just show

00:29:48,350 --> 00:29:52,310
you a couple of things you can do with

00:29:49,610 --> 00:29:57,410
it so pivot tables work pretty well

00:29:52,310 --> 00:29:59,090
hierarchical indexing yeah there's this

00:29:57,410 --> 00:30:03,560
good group by functionalities being

00:29:59,090 --> 00:30:07,790
rewritten and it's now now very very

00:30:03,560 --> 00:30:09,350
strong I believe the yeah and you can

00:30:07,790 --> 00:30:11,060
have these nice sort of box plots very

00:30:09,350 --> 00:30:14,630
generated very easily from from your

00:30:11,060 --> 00:30:19,490
data frames so that's is um definitely a

00:30:14,630 --> 00:30:27,920
good good tool to watch okay

00:30:19,490 --> 00:30:28,970
sir okay now I'm just a few words on

00:30:27,920 --> 00:30:32,780
okay thanks

00:30:28,970 --> 00:30:39,020
few words on Python three adoption who

00:30:32,780 --> 00:30:46,480
who uses Python 3 okay one person or and

00:30:39,020 --> 00:30:49,250
and a couple of yeah okay okay um so

00:30:46,480 --> 00:30:53,120
Python 3.3 is gonna be released pretty

00:30:49,250 --> 00:30:54,350
soon and it's probably going to be it's

00:30:53,120 --> 00:30:56,330
going to speed up adoption because it's

00:30:54,350 --> 00:30:57,680
got some nice features so I thought I'd

00:30:56,330 --> 00:31:08,240
just give you a couple of comments on on

00:30:57,680 --> 00:31:10,310
migration in general so so numpy has

00:31:08,240 --> 00:31:13,930
great Python 3 support and it has had

00:31:10,310 --> 00:31:18,260
for 2 years now so that's really good

00:31:13,930 --> 00:31:21,710
and I'll show you these running so Syfy

00:31:18,260 --> 00:31:24,680
also supports Python 3 as a version 1.9

00:31:21,710 --> 00:31:26,090
I think and matplotlib does as well so

00:31:24,680 --> 00:31:27,800
originally it was a separate branch on

00:31:26,090 --> 00:31:31,760
github and it's been merged back into

00:31:27,800 --> 00:31:33,650
the main branch now so so um I was able

00:31:31,760 --> 00:31:35,960
to get matplotlib working in Python 3

00:31:33,650 --> 00:31:38,990
just by recompiling from source and

00:31:35,960 --> 00:31:41,750
there were no other tricks it was it was

00:31:38,990 --> 00:31:45,740
a pretty straightforward process so so

00:31:41,750 --> 00:31:48,920
I'm gonna straight with with Ubuntu so a

00:31:45,740 --> 00:31:52,420
boon to actually comes with that is the

00:31:48,920 --> 00:31:56,360
latest latest version comes with

00:31:52,420 --> 00:32:02,300
packages for so Python 3 versions of

00:31:56,360 --> 00:32:03,260
ipython and a numpy and scifi so i'll

00:32:02,300 --> 00:32:08,480
show you this running

00:32:03,260 --> 00:32:13,070
I'm gonna run ipython 3 QT console and

00:32:08,480 --> 00:32:14,450
just show you this so I've got it now if

00:32:13,070 --> 00:32:20,240
you haven't seen this by the way this is

00:32:14,450 --> 00:32:21,950
a sort of better better ipython that in

00:32:20,240 --> 00:32:27,530
some way so it's got like syntax

00:32:21,950 --> 00:32:28,850
highlighting and these little pop-up

00:32:27,530 --> 00:32:30,380
help windows and things like that and

00:32:28,850 --> 00:32:32,840
proper multi-line editing which is good

00:32:30,380 --> 00:32:35,240
so I'll just show you

00:32:32,840 --> 00:32:37,639
this is a Python 3 that is going to give

00:32:35,240 --> 00:32:44,870
me a syntax error so this really is the

00:32:37,639 --> 00:32:51,830
latest and greatest yeah um what I

00:32:44,870 --> 00:32:52,210
wanted to show you was pylab in line

00:32:51,830 --> 00:32:55,580
again

00:32:52,210 --> 00:32:59,840
and see what we can do here I'm going to

00:32:55,580 --> 00:33:04,190
plot round 100 there we go okay so

00:32:59,840 --> 00:33:06,860
that's ipython and matplotlib running on

00:33:04,190 --> 00:33:11,990
Python 3 there so um so that's pretty

00:33:06,860 --> 00:33:15,740
good inside pie works too I'll show you

00:33:11,990 --> 00:33:19,369
the version no version is there the the

00:33:15,740 --> 00:33:20,980
file is there so it's it's been

00:33:19,369 --> 00:33:24,080
installed there into that Python 3

00:33:20,980 --> 00:33:25,279
directory so then yep these basic

00:33:24,080 --> 00:33:30,320
packages are in a bunch of which is

00:33:25,279 --> 00:33:38,419
great a good start it's going to give

00:33:30,320 --> 00:33:42,320
you some other demos of that yeah that's

00:33:38,419 --> 00:33:44,740
ok so I'm there were some other things

00:33:42,320 --> 00:33:47,899
like okay five minutes things right

00:33:44,740 --> 00:33:49,369
the I thought um since we've got a

00:33:47,899 --> 00:33:53,720
couple of minutes left I might show you

00:33:49,369 --> 00:33:56,539
Chaco who's used Chaco okay hardly

00:33:53,720 --> 00:33:59,360
anyone so Chaco is a pop package for

00:33:56,539 --> 00:34:01,730
interactive plotting it's not nearly as

00:33:59,360 --> 00:34:04,669
widely used as matplotlib but it's it's

00:34:01,730 --> 00:34:06,070
um it's got some nice features so I

00:34:04,669 --> 00:34:09,940
thought I'd just demonstrate a couple of

00:34:06,070 --> 00:34:09,940
little examples with it

00:34:21,860 --> 00:34:37,560
alright ok so here's an example of an

00:34:33,570 --> 00:34:40,100
interactive plot and you can um yeah

00:34:37,560 --> 00:34:42,480
here we go so you can use sort of

00:34:40,100 --> 00:34:43,980
interactivity here so you can use the

00:34:42,480 --> 00:34:45,690
mouse to select a bunch of points and

00:34:43,980 --> 00:34:48,090
you can see underneath the console as

00:34:45,690 --> 00:34:51,720
has changed to reflect that so so using

00:34:48,090 --> 00:34:56,790
this sort of interactivity you can build

00:34:51,720 --> 00:34:58,530
quite nice interfaces for for scientific

00:34:56,790 --> 00:35:10,350
applications I'll show you a couple of

00:34:58,530 --> 00:35:13,950
other examples um this shows the traits

00:35:10,350 --> 00:35:20,580
editor so traits is a package from n 4

00:35:13,950 --> 00:35:22,620
which is um which is yeah in fact they

00:35:20,580 --> 00:35:25,140
they're basing their whole tool chain on

00:35:22,620 --> 00:35:27,090
on trades it's interesting so this shows

00:35:25,140 --> 00:35:29,190
what you can do for example um this is

00:35:27,090 --> 00:35:33,480
read interactively so I could have that

00:35:29,190 --> 00:35:36,120
as sine X oops times X we run it and

00:35:33,480 --> 00:35:39,420
this changes on the fly so this is a

00:35:36,120 --> 00:35:43,380
nice little example as well of what you

00:35:39,420 --> 00:35:46,220
can do and these little UI widgets so if

00:35:43,380 --> 00:35:51,090
you ever need to produce some kind of

00:35:46,220 --> 00:35:53,640
tool for interactive exploration of data

00:35:51,090 --> 00:36:02,250
like this then you can use these these

00:35:53,640 --> 00:36:07,380
tools to do that so yeah I guess I'll

00:36:02,250 --> 00:36:09,210
wrap up there and do I have anything

00:36:07,380 --> 00:36:10,410
else to say no I don't that's it so I'd

00:36:09,210 --> 00:36:15,320
be very happy to take questions and

00:36:10,410 --> 00:36:15,320
thanks very much for for yeah being here

00:36:19,720 --> 00:36:33,800
so you won't have any questions thanks

00:36:29,540 --> 00:36:36,650
it um just about pandas hmm is it kind

00:36:33,800 --> 00:36:38,960
of becoming a deeply integrated into the

00:36:36,650 --> 00:36:40,280
psyche it's stuff as well and is like

00:36:38,960 --> 00:36:47,300
you know this I kids don't learn package

00:36:40,280 --> 00:36:49,400
not that I've seen yet it may it may be

00:36:47,300 --> 00:36:50,930
but I'm not aware of it from the

00:36:49,400 --> 00:36:52,370
impression that you got from the sci-fi

00:36:50,930 --> 00:36:56,000
conference it's becoming rapidly

00:36:52,370 --> 00:36:58,160
becoming a first class size um alright

00:36:56,000 --> 00:36:59,990
so from from what I've seen I wasn't

00:36:58,160 --> 00:37:04,010
actually at the the conference I've just

00:36:59,990 --> 00:37:07,000
been watching all the videos I can but

00:37:04,010 --> 00:37:09,980
yeah I didn't see anything with them

00:37:07,000 --> 00:37:12,200
with with that so I can't really comment

00:37:09,980 --> 00:37:18,770
there yeah it's probably just a matter

00:37:12,200 --> 00:37:20,300
of time yeah so thank you for the

00:37:18,770 --> 00:37:21,860
ipython demo I thought I was really cool

00:37:20,300 --> 00:37:24,830
to see path around the browser and see

00:37:21,860 --> 00:37:27,380
the results mathematical notation as

00:37:24,830 --> 00:37:28,790
opposed to you know mah no space now

00:37:27,380 --> 00:37:31,460
that was really cool but I presume that

00:37:28,790 --> 00:37:33,170
was running in a server side how does is

00:37:31,460 --> 00:37:37,700
this secure I think they're just having

00:37:33,170 --> 00:37:40,460
anything yeah yes by default but by

00:37:37,700 --> 00:37:42,920
default it's not exposed on a to outside

00:37:40,460 --> 00:37:46,730
their local loopback interface but but

00:37:42,920 --> 00:37:48,740
yeah there are some security kind of

00:37:46,730 --> 00:37:52,820
features that I PI that has it's

00:37:48,740 --> 00:37:53,960
designed to be run on clusters it's it's

00:37:52,820 --> 00:37:56,210
a really good tool for parallel

00:37:53,960 --> 00:38:00,710
processing processing actually and so

00:37:56,210 --> 00:38:02,810
there are some features that can help I

00:38:00,710 --> 00:38:05,910
wouldn't advise running one on the

00:38:02,810 --> 00:38:08,040
public internet at this stage

00:38:05,910 --> 00:38:12,090
but having said that there are some nice

00:38:08,040 --> 00:38:14,610
innovations like um Amazon ami images

00:38:12,090 --> 00:38:16,740
with a complete Python stack and and an

00:38:14,610 --> 00:38:21,390
eye Python notebook which are accessible

00:38:16,740 --> 00:38:23,640
in the cloud and so that kind of thing

00:38:21,390 --> 00:38:25,410
is happening now and so I think

00:38:23,640 --> 00:38:27,810
someone's talking about PI cloud later

00:38:25,410 --> 00:38:31,200
as well that's something like that a

00:38:27,810 --> 00:38:33,150
little bit older but the same for the

00:38:31,200 --> 00:38:34,950
principle of having a complete stack of

00:38:33,150 --> 00:38:39,510
Python tools and accessible in the cloud

00:38:34,950 --> 00:38:41,450
but yeah I actually yeah when you were

00:38:39,510 --> 00:38:44,040
using siphon to optimize that

00:38:41,450 --> 00:38:46,080
demonstration you had mmm use the time

00:38:44,040 --> 00:38:47,610
it function was that poisoned by the

00:38:46,080 --> 00:38:49,800
fact that I have to compile it was a

00:38:47,610 --> 00:38:51,780
timing to compile in there as well hmm

00:38:49,800 --> 00:38:53,070
that's a good question I don't think it

00:38:51,780 --> 00:38:55,500
was because otherwise it wouldn't have

00:38:53,070 --> 00:38:58,590
wouldn't have been as fast as it report

00:38:55,500 --> 00:39:04,230
it's a reported like 500 nanoseconds per

00:38:58,590 --> 00:39:06,200
loop so so I think if it um it that it's

00:39:04,230 --> 00:39:11,970
just a guess but I'm thinking it's um

00:39:06,200 --> 00:39:13,760
that's been factored out yeah any more

00:39:11,970 --> 00:39:15,840
questions for it

00:39:13,760 --> 00:39:17,760
yeah I'd be very happy to talk to you

00:39:15,840 --> 00:39:20,090
afterwards afterwards as well so yeah

00:39:17,760 --> 00:39:20,090

YouTube URL: https://www.youtube.com/watch?v=jCpLiT0QRRA


