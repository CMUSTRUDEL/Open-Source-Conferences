Title: Triage: real-world error logging for web applications
Publication date: 2012-08-23
Playlist: PyCon Australia 2012
Description: 
	Lars Yencken,Luke Cawood
(with Luke Cawood)

Modern web applications can quickly develop many moving parts. As they grow in traffic, infrastructure, services and features, keeping track of errors and communicating about them becomes more challengin
Captions: 
	00:00:01,460 --> 00:00:06,569
beautiful so our next session is titled

00:00:04,049 --> 00:00:09,630
triage a real-world error logging for

00:00:06,569 --> 00:00:13,080
web applications our presenters this

00:00:09,630 --> 00:00:14,790
morning developers for 99 designs that's

00:00:13,080 --> 00:00:16,880
a melbourne-based startup where they're

00:00:14,790 --> 00:00:18,750
working on infrastructure and data needs

00:00:16,880 --> 00:00:21,720
today they're going to be talking about

00:00:18,750 --> 00:00:23,369
triage which is a real world tool for

00:00:21,720 --> 00:00:26,039
error logging for web applications so

00:00:23,369 --> 00:00:32,520
please give a welcome to Luke Cawood and

00:00:26,039 --> 00:00:36,420
Lars Lincoln thank you all right is this

00:00:32,520 --> 00:00:40,170
not yet perfect um so I'm Lars this is

00:00:36,420 --> 00:00:43,170
Luke I love us both of us work for 99

00:00:40,170 --> 00:00:44,850
designs and yeah today we're going to be

00:00:43,170 --> 00:00:46,110
talking about this we're really going to

00:00:44,850 --> 00:00:49,110
be talking about errors and how we've

00:00:46,110 --> 00:00:51,000
historically kind of been dealing with

00:00:49,110 --> 00:00:52,860
errors that we get in production and how

00:00:51,000 --> 00:00:55,739
we're trying to deal with them in a much

00:00:52,860 --> 00:00:58,129
better way with some work that look and

00:00:55,739 --> 00:01:01,800
some of the guys have done on triage and

00:00:58,129 --> 00:01:05,040
I'll be sort of introducing things I've

00:01:01,800 --> 00:01:07,260
known own designs I'm in dev ops and so

00:01:05,040 --> 00:01:08,729
and looks a singer dev it means we kind

00:01:07,260 --> 00:01:11,430
of get a different perspective on errors

00:01:08,729 --> 00:01:13,470
looks going to like look be checking

00:01:11,430 --> 00:01:14,850
them as he pushes our code and deploys

00:01:13,470 --> 00:01:18,750
things to make sure things are going all

00:01:14,850 --> 00:01:20,100
right and when I get an alert in the

00:01:18,750 --> 00:01:22,710
middle of the night I'll be sort of

00:01:20,100 --> 00:01:27,420
bleary-eyed checking out the logs trying

00:01:22,710 --> 00:01:31,979
to work out what's happening so in terms

00:01:27,420 --> 00:01:33,689
of non non designs I'm probably probably

00:01:31,979 --> 00:01:35,280
not going to tell you too much about a

00:01:33,689 --> 00:01:37,560
company I mean it's enough really for

00:01:35,280 --> 00:01:41,729
you don't know that we're web company

00:01:37,560 --> 00:01:44,520
and we get a fair amount of traffic our

00:01:41,729 --> 00:01:46,320
audience is pretty global so and in any

00:01:44,520 --> 00:01:50,899
x line when we go down when we have

00:01:46,320 --> 00:01:53,250
issues we really do lose money and um

00:01:50,899 --> 00:01:56,000
yeah we it's really important for us to

00:01:53,250 --> 00:01:58,320
have a good user experience at all times

00:01:56,000 --> 00:02:00,540
I'm going to pretend that there's not a

00:01:58,320 --> 00:02:03,450
little squiggly sign a question right

00:02:00,540 --> 00:02:05,219
there so this really again was just a

00:02:03,450 --> 00:02:08,129
screenshot of our site just to say you

00:02:05,219 --> 00:02:09,979
know where we're a website this is what

00:02:08,129 --> 00:02:13,200
we do

00:02:09,979 --> 00:02:15,420
so we have quite a lot of requests

00:02:13,200 --> 00:02:17,970
coming in all the time and we've given

00:02:15,420 --> 00:02:19,410
talks before on our infrastructure in

00:02:17,970 --> 00:02:22,709
fact we've got a blog post on our tech

00:02:19,410 --> 00:02:24,390
blog you can check it out all I really

00:02:22,709 --> 00:02:28,290
want for you to from you to get from

00:02:24,390 --> 00:02:30,540
this slide is that you know we have a

00:02:28,290 --> 00:02:32,100
fairly typical web stack this is a

00:02:30,540 --> 00:02:33,930
simplified version it's got lots of

00:02:32,100 --> 00:02:35,880
parts though any of the parts can fail

00:02:33,930 --> 00:02:39,810
any of the interactions between the

00:02:35,880 --> 00:02:42,800
paths can file and anything really from

00:02:39,810 --> 00:02:45,360
this sort of application layer below

00:02:42,800 --> 00:02:48,930
those are the things that feed into our

00:02:45,360 --> 00:02:52,500
logging system so we're mainly a mainly

00:02:48,930 --> 00:02:54,540
a PHP shop and our main code base runs

00:02:52,500 --> 00:02:56,850
on it runs on these application servers

00:02:54,540 --> 00:03:01,110
we've got to say maybe I've been more

00:02:56,850 --> 00:03:03,150
than 20 running now and the same code

00:03:01,110 --> 00:03:06,420
base runs on the workers as well so you

00:03:03,150 --> 00:03:07,950
know when you go to our website the part

00:03:06,420 --> 00:03:09,540
that you're waiting for is the web

00:03:07,950 --> 00:03:14,010
requests that the application servers

00:03:09,540 --> 00:03:15,390
are serving and the puppy or any extra

00:03:14,010 --> 00:03:17,160
work stuff you're not waiting for that's

00:03:15,390 --> 00:03:20,220
going to a queue and the workers are

00:03:17,160 --> 00:03:23,010
turning away at that I went whenever

00:03:20,220 --> 00:03:25,470
there's an error in either of those two

00:03:23,010 --> 00:03:27,930
parts the first thing we do is throw it

00:03:25,470 --> 00:03:35,070
straight into a database we've put it

00:03:27,930 --> 00:03:39,180
into and the really nice thing the

00:03:35,070 --> 00:03:40,950
bit that that solves already is that the

00:03:39,180 --> 00:03:44,610
week across the machines i guess the

00:03:40,950 --> 00:03:45,989
aggregation that's right so 0 instead of

00:03:44,610 --> 00:03:47,880
having to like crawl across all those

00:03:45,989 --> 00:03:51,570
machines we've got a single arrow feed

00:03:47,880 --> 00:03:52,709
and that helps us a lot you guys are

00:03:51,570 --> 00:03:54,510
going to have to put up with a couple of

00:03:52,709 --> 00:03:58,709
grey boxes of death for some unknown

00:03:54,510 --> 00:04:01,829
reason but essentially for farrer's we

00:03:58,709 --> 00:04:03,989
use like we expose that to our devs as a

00:04:01,829 --> 00:04:06,299
standard RSS feed we use like desktop

00:04:03,989 --> 00:04:09,030
RSS client it's really easier to get

00:04:06,299 --> 00:04:11,549
this sort of list of errors there's a

00:04:09,030 --> 00:04:13,769
couple of problems with the types of

00:04:11,549 --> 00:04:17,729
there's a couple problems that we've had

00:04:13,769 --> 00:04:21,410
using this RSS model for errors so for

00:04:17,729 --> 00:04:23,720
example when we get an error in

00:04:21,410 --> 00:04:27,170
well one thing there's a this constant

00:04:23,720 --> 00:04:28,520
stream of like constant stream of air is

00:04:27,170 --> 00:04:31,010
coming in because we have enough traffic

00:04:28,520 --> 00:04:33,320
volume that even rare errors are coming

00:04:31,010 --> 00:04:35,570
in but when we see an error we don't

00:04:33,320 --> 00:04:38,540
know is that just from the last deploy

00:04:35,570 --> 00:04:39,890
has that been there for a while only by

00:04:38,540 --> 00:04:41,810
looking at the logs regularly and

00:04:39,890 --> 00:04:44,060
remembering sort of it's a lot of manual

00:04:41,810 --> 00:04:47,150
work yeah well I guess I get a great

00:04:44,060 --> 00:04:48,920
feeling of the historical data because

00:04:47,150 --> 00:04:51,590
they RSS feed on the guys back I think

00:04:48,920 --> 00:04:53,090
two weeks or something so you don't know

00:04:51,590 --> 00:04:56,210
if an error has been around forever

00:04:53,090 --> 00:04:57,590
exactly yeah sorry so doesn't UN if

00:04:56,210 --> 00:05:00,350
there's new error in the logs you're

00:04:57,590 --> 00:05:02,720
like all right so that's probably this

00:05:00,350 --> 00:05:04,220
devs work is you're working on it you

00:05:02,720 --> 00:05:06,350
have to actually go and ask someone you

00:05:04,220 --> 00:05:07,970
know to work out whether or not an air

00:05:06,350 --> 00:05:11,450
is actually being handled by someone

00:05:07,970 --> 00:05:15,950
right now there's also this issue that

00:05:11,450 --> 00:05:17,690
if we have often we get an issue and a

00:05:15,950 --> 00:05:19,550
particular type of error floods the logs

00:05:17,690 --> 00:05:23,210
and when that happens you can't see

00:05:19,550 --> 00:05:25,700
anything else sometimes that's kind of

00:05:23,210 --> 00:05:27,590
important so if it's like we get an

00:05:25,700 --> 00:05:29,240
error that's floating logs saying column

00:05:27,590 --> 00:05:30,920
not found in our database well you know

00:05:29,240 --> 00:05:32,480
that's good we kind of like to know

00:05:30,920 --> 00:05:35,530
about that then that it's kind of

00:05:32,480 --> 00:05:40,490
important argument to be on this page

00:05:35,530 --> 00:05:42,290
but if we get on the other hand we can

00:05:40,490 --> 00:05:43,940
get a really low grade error that for

00:05:42,290 --> 00:05:45,680
some reason is high volume floods logs

00:05:43,940 --> 00:05:47,390
and we can't see anything important with

00:05:45,680 --> 00:05:50,990
so much of this low grade are coming

00:05:47,390 --> 00:05:53,660
through so with this RSS situation it's

00:05:50,990 --> 00:05:57,080
like the volume of the error is the same

00:05:53,660 --> 00:05:59,620
as the priority of the error sorry lies

00:05:57,080 --> 00:06:05,130
we were playing the wrong slideshow I

00:05:59,620 --> 00:06:08,050
forgive you pictures

00:06:05,130 --> 00:06:12,910
technology all right sorry from our site

00:06:08,050 --> 00:06:15,270
yeah let's skip through high a standard

00:06:12,910 --> 00:06:20,860
mac RSS client to get our air feed

00:06:15,270 --> 00:06:24,550
stacktrace context stuff like that then

00:06:20,860 --> 00:06:26,110
an error like flooding blog yeah but

00:06:24,550 --> 00:06:28,750
really so that's the background on this

00:06:26,110 --> 00:06:30,669
kind of on how we've historically dealt

00:06:28,750 --> 00:06:32,830
with there is and I think from there I

00:06:30,669 --> 00:06:37,120
let Luke tell you about how we've tried

00:06:32,830 --> 00:06:40,570
to improve that with a new error logging

00:06:37,120 --> 00:06:42,820
up triage ya think sighs so I suppose

00:06:40,570 --> 00:06:46,180
yeah yeah as I said I mean this is not

00:06:42,820 --> 00:06:49,600
ideal and so we r there are obviously

00:06:46,180 --> 00:06:51,940
sort of like products in this space but

00:06:49,600 --> 00:06:53,169
we thought we'd um play with some new

00:06:51,940 --> 00:06:55,750
tools get a chance to play with some new

00:06:53,169 --> 00:06:56,919
tech and build something on our own also

00:06:55,750 --> 00:06:59,110
I guess we do have a really really

00:06:56,919 --> 00:07:01,690
higher rate and that we were kind of

00:06:59,110 --> 00:07:05,710
concerned if anything off the shelf

00:07:01,690 --> 00:07:07,960
would be able to handle that so yeah we

00:07:05,710 --> 00:07:10,030
it's we decided to build an error

00:07:07,960 --> 00:07:11,140
logging platform sort of similar to a

00:07:10,030 --> 00:07:12,729
break or something if you've used that

00:07:11,140 --> 00:07:14,530
it's designed to be language agnostic

00:07:12,729 --> 00:07:17,350
God we need to build obviously all the

00:07:14,530 --> 00:07:21,340
clients client for all the languages but

00:07:17,350 --> 00:07:22,750
dumb yeah so essentially our first our

00:07:21,340 --> 00:07:26,890
first shot was to sort of try and

00:07:22,750 --> 00:07:28,330
deliver it in a day during we have R&D

00:07:26,890 --> 00:07:29,979
time at not only designed some thought

00:07:28,330 --> 00:07:34,150
we try and build build something in a

00:07:29,979 --> 00:07:36,300
day deliver some some prototype so we

00:07:34,150 --> 00:07:38,020
figured we'd use the existing DB

00:07:36,300 --> 00:07:40,090
infrastructure that's in place for the

00:07:38,020 --> 00:07:42,340
RSS feed and just build like a web app

00:07:40,090 --> 00:07:44,139
on top of that to present that we opted

00:07:42,340 --> 00:07:45,550
to use pyramid because it's really fast

00:07:44,139 --> 00:07:46,780
it's an opinionated it wasn't going to

00:07:45,550 --> 00:07:50,410
lock us into a norm or anything like

00:07:46,780 --> 00:07:52,389
that and I just like the design so we

00:07:50,410 --> 00:07:54,130
deployed that alongside the RSS solution

00:07:52,389 --> 00:07:55,930
so we could get a measure of our success

00:07:54,130 --> 00:08:01,090
and whether or not was doing the right

00:07:55,930 --> 00:08:02,560
sort of thing so yeah we we continued

00:08:01,090 --> 00:08:04,060
login to but then we sort of had

00:08:02,560 --> 00:08:05,320
this issue of like well how we're going

00:08:04,060 --> 00:08:07,840
to aggregate because we wanted to sort

00:08:05,320 --> 00:08:09,760
of aggregates like errors to collapse

00:08:07,840 --> 00:08:12,370
that sort of massive feed of garbage

00:08:09,760 --> 00:08:14,010
into a single data point and so we

00:08:12,370 --> 00:08:17,320
attempted to

00:08:14,010 --> 00:08:18,820
22 to use Mongoose MapReduce in request

00:08:17,320 --> 00:08:21,160
since we're logging directly to the DB

00:08:18,820 --> 00:08:23,740
we had no other point that we could we

00:08:21,160 --> 00:08:26,350
could attempt to MapReduce so we did it

00:08:23,740 --> 00:08:28,720
in a day and so it means what it looks

00:08:26,350 --> 00:08:31,630
like this was the result of a day thanks

00:08:28,720 --> 00:08:33,490
to some Twitter bootstrap love because

00:08:31,630 --> 00:08:35,740
it's just a quick and easy to get going

00:08:33,490 --> 00:08:37,419
and you can see there that it's it's

00:08:35,740 --> 00:08:39,130
aggregating on the left hand side and

00:08:37,419 --> 00:08:42,960
it's got some measure of tagging and

00:08:39,130 --> 00:08:45,970
claiming and stuff and that was in fed

00:08:42,960 --> 00:08:47,770
but unfortunately as soon as we tried to

00:08:45,970 --> 00:08:50,470
hit that with that production load just

00:08:47,770 --> 00:08:53,650
collapse straightaway turns out you

00:08:50,470 --> 00:08:56,920
cannot do MapReduce in requests who

00:08:53,650 --> 00:08:58,510
would have thought it was taking it

00:08:56,920 --> 00:09:00,520
taking half an hour for requests to come

00:08:58,510 --> 00:09:02,830
back and when I was aggregated view time

00:09:00,520 --> 00:09:03,910
as opposed to at right time so they're

00:09:02,830 --> 00:09:07,780
half an hour's probably little bit too

00:09:03,910 --> 00:09:11,860
long to wait for a web page yeah so

00:09:07,780 --> 00:09:12,940
rates obviously pretty extreme so we

00:09:11,860 --> 00:09:15,910
fill it all right so we're going to have

00:09:12,940 --> 00:09:17,260
to aggregate at at right time so we

00:09:15,910 --> 00:09:18,670
can't write directly to we're

00:09:17,260 --> 00:09:21,340
going to need to put something up front

00:09:18,670 --> 00:09:24,820
and so we once again as a chance to play

00:09:21,340 --> 00:09:26,920
with some new tools we use zeromq if you

00:09:24,820 --> 00:09:28,420
haven't heard of that it's like a queue

00:09:26,920 --> 00:09:30,850
system that sort of masquerades as a

00:09:28,420 --> 00:09:33,460
socket system or we are one however way

00:09:30,850 --> 00:09:35,740
around that makes sense it it presents a

00:09:33,460 --> 00:09:38,160
socket API or a socket like API but

00:09:35,740 --> 00:09:41,800
actually it's like you layer underneath

00:09:38,160 --> 00:09:44,800
so and we use message pack which is a

00:09:41,800 --> 00:09:46,690
sweet little binary format for for the

00:09:44,800 --> 00:09:48,100
on the wire format sort of thing so sort

00:09:46,690 --> 00:09:49,660
of like similar to JSON in terms of

00:09:48,100 --> 00:09:52,180
feature set but it's binary and really

00:09:49,660 --> 00:09:55,300
really quick as you can see here you can

00:09:52,180 --> 00:09:57,940
see here you can see here sort of like a

00:09:55,300 --> 00:10:01,360
really cut down lightweight version of

00:09:57,940 --> 00:10:03,300
connecting 0 and Q as a host but

00:10:01,360 --> 00:10:07,360
actually as a subscriber to a pub sub

00:10:03,300 --> 00:10:08,800
socket and connecting that to message

00:10:07,360 --> 00:10:10,240
back and them in the service like four

00:10:08,800 --> 00:10:13,240
lines long it's just so trivial to get

00:10:10,240 --> 00:10:15,160
going which is pretty cool so I would

00:10:13,240 --> 00:10:17,680
definitely recommend playing with zeromq

00:10:15,160 --> 00:10:19,779
if you get a chance

00:10:17,680 --> 00:10:22,990
aggregation is happening in Python space

00:10:19,779 --> 00:10:26,920
now so it's not get some get heaps

00:10:22,990 --> 00:10:30,820
louder that did aggregations now having

00:10:26,920 --> 00:10:32,710
a pipe in space which are which at right

00:10:30,820 --> 00:10:34,930
time which is pretty cool like we can

00:10:32,710 --> 00:10:36,850
generate a hash and then it's a bit of a

00:10:34,930 --> 00:10:39,040
naive approach so we query for the

00:10:36,850 --> 00:10:41,160
existence of a row if the road is there

00:10:39,040 --> 00:10:44,320
we update it if it's not we insert one

00:10:41,160 --> 00:10:46,600
and we go be in a face and love as well

00:10:44,320 --> 00:10:51,700
but during these this time we

00:10:46,600 --> 00:10:53,080
fast-forwarded it's still fab okay yeah

00:10:51,700 --> 00:10:55,630
so it's a bit of a thicker client now

00:10:53,080 --> 00:10:58,300
sort of really J is heavy we opted for a

00:10:55,630 --> 00:10:59,860
bit of a you can see like a arm the

00:10:58,300 --> 00:11:02,290
errors come in and his bottom pane sort

00:10:59,860 --> 00:11:05,920
of thing so it's like single up single

00:11:02,290 --> 00:11:07,750
page app model yeah I guess similar to

00:11:05,920 --> 00:11:09,190
some ideas sort of thing trying to make

00:11:07,750 --> 00:11:11,589
a better fit dad's to you so it's got

00:11:09,190 --> 00:11:15,370
like vm key bindings and stuff and a bit

00:11:11,589 --> 00:11:17,410
a bit more sex appeal and it was great

00:11:15,370 --> 00:11:21,070
that was working for ages until I got

00:11:17,410 --> 00:11:23,200
this email from highs at call it a six

00:11:21,070 --> 00:11:26,110
in the morning because last doesn't like

00:11:23,200 --> 00:11:33,430
sleeping yeah I'm sure that was by

00:11:26,110 --> 00:11:35,200
choice DevOps so yeah we have that kind

00:11:33,430 --> 00:11:37,870
of sparked a bit with lot in two days we

00:11:35,200 --> 00:11:40,630
log 3.5 terabits of era data which was

00:11:37,870 --> 00:11:43,959
like yeah it kind of insane so it turns

00:11:40,630 --> 00:11:48,010
out we made a change to our worker stack

00:11:43,959 --> 00:11:49,540
and it when tasks fail in the cuse they

00:11:48,010 --> 00:11:51,490
should they should eventually get buried

00:11:49,540 --> 00:11:53,200
but they weren't getting buried so we

00:11:51,490 --> 00:11:54,670
were just getting thrashed like

00:11:53,200 --> 00:11:56,320
thousands and thousands of messages

00:11:54,670 --> 00:12:00,130
every sort of like five minutes sort of

00:11:56,320 --> 00:12:03,220
things so yeah obviously we fix the cues

00:12:00,130 --> 00:12:06,850
but also did shine some light bonds of

00:12:03,220 --> 00:12:08,050
triage as it couldn't process errors in

00:12:06,850 --> 00:12:09,760
real time at that point there was just

00:12:08,050 --> 00:12:12,520
so many had started to look like drop

00:12:09,760 --> 00:12:14,320
behind reality and down because of the

00:12:12,520 --> 00:12:16,750
queue nature i guess is 0 and Q it's

00:12:14,320 --> 00:12:18,250
it's backing up backing up sort of thing

00:12:16,750 --> 00:12:19,100
until eventually it's just dropping data

00:12:18,250 --> 00:12:22,040
so

00:12:19,100 --> 00:12:23,630
I guess yeah weakened the confidence

00:12:22,040 --> 00:12:24,740
that the team had in using triage as

00:12:23,630 --> 00:12:27,140
well because it's all of a sudden that's

00:12:24,740 --> 00:12:30,050
not accurate and so like that we had to

00:12:27,140 --> 00:12:31,970
had to optimize it so turnout is taking

00:12:30,050 --> 00:12:33,560
three seconds to login error and the the

00:12:31,970 --> 00:12:36,590
logging server was capped at a hundred

00:12:33,560 --> 00:12:40,820
percent CPU which was obviously not

00:12:36,590 --> 00:12:42,020
ideal we kind of Lars and I split into a

00:12:40,820 --> 00:12:43,940
sort of like Lancers looking at some

00:12:42,020 --> 00:12:46,610
multi-threaded trying to get some more

00:12:43,940 --> 00:12:48,800
some more throughput via just walking

00:12:46,610 --> 00:12:51,680
everything and just going nuts and I

00:12:48,800 --> 00:12:54,590
looked at optimizing weird so it

00:12:51,680 --> 00:12:55,940
made some gains I guess in both like I

00:12:54,590 --> 00:12:57,470
suppose here with there's no

00:12:55,940 --> 00:12:59,000
schemer but it actually turns out that

00:12:57,470 --> 00:13:01,550
obviously the document structure has a

00:12:59,000 --> 00:13:03,560
massive performance impact so they kind

00:13:01,550 --> 00:13:05,510
of yeah do anything you like we can get

00:13:03,560 --> 00:13:07,660
yourself in a lot of trouble which is

00:13:05,510 --> 00:13:10,520
great but the biggest win came from

00:13:07,660 --> 00:13:12,890
moving the update or insert sort of

00:13:10,520 --> 00:13:16,430
select update insert code directly into

00:13:12,890 --> 00:13:18,200
 via upsets so if you don't

00:13:16,430 --> 00:13:21,410
know what monger upsets are essentially

00:13:18,200 --> 00:13:22,640
it's like it's like an update so the

00:13:21,410 --> 00:13:24,110
updates in you have a criteria

00:13:22,640 --> 00:13:25,520
document which is what you're going to

00:13:24,110 --> 00:13:27,230
try and the record you're gonna try and

00:13:25,520 --> 00:13:28,370
find to update you've got your update

00:13:27,230 --> 00:13:31,160
document which is what you're going to

00:13:28,370 --> 00:13:33,500
add change or remove and then you've got

00:13:31,160 --> 00:13:36,050
the ability to specify that it's an

00:13:33,500 --> 00:13:37,940
upset so and absurd if it doesn't match

00:13:36,050 --> 00:13:40,220
a row will actually insert that row for

00:13:37,940 --> 00:13:41,450
you so it'll take the criteria document

00:13:40,220 --> 00:13:45,410
and the update document and sort of like

00:13:41,450 --> 00:13:47,930
make a target document out of that and

00:13:45,410 --> 00:13:51,410
insert that so it's a bit of a worked

00:13:47,930 --> 00:13:52,820
example so anyone read that now so we're

00:13:51,410 --> 00:13:54,290
tracking click so we want to track click

00:13:52,820 --> 00:13:56,090
so you want to want a URL that you're

00:13:54,290 --> 00:13:58,370
going to even a track you're going to

00:13:56,090 --> 00:14:00,950
have like measure of how many times it's

00:13:58,370 --> 00:14:02,750
been clicked say and some sort of items

00:14:00,950 --> 00:14:05,870
some piece of data on on edge clicks I

00:14:02,750 --> 00:14:08,060
say just the timestamp here you can see

00:14:05,870 --> 00:14:09,920
that the update credit criteria document

00:14:08,060 --> 00:14:12,620
is the URL someone's clicking on google

00:14:09,920 --> 00:14:16,130
com all right that probably happens all

00:14:12,620 --> 00:14:19,100
the time and this is sort of weird

00:14:16,130 --> 00:14:21,890
format on the second row of the the

00:14:19,100 --> 00:14:23,630
update function these these like bowler

00:14:21,890 --> 00:14:25,089
said things or what they call update

00:14:23,630 --> 00:14:27,790
modifiers so they can

00:14:25,089 --> 00:14:29,319
on an existing row you've got increment

00:14:27,790 --> 00:14:31,660
is the ability to push into internal

00:14:29,319 --> 00:14:33,759
arrays and all that sort of stuff so it

00:14:31,660 --> 00:14:36,160
really powerful and then obviously the

00:14:33,759 --> 00:14:37,870
fact that we're we're upsetting so run

00:14:36,160 --> 00:14:39,579
that and you're going to insert a row

00:14:37,870 --> 00:14:41,050
there's not going to be you see we've

00:14:39,579 --> 00:14:42,699
query the data set there's nothing there

00:14:41,050 --> 00:14:46,300
so we're inserting essentially that's

00:14:42,699 --> 00:14:48,490
going to be an insert account so sanely

00:14:46,300 --> 00:14:50,559
defaults to one so there if you

00:14:48,490 --> 00:14:53,829
increment from nothing to one is one

00:14:50,559 --> 00:14:56,230
which is sane and good and we've pushed

00:14:53,829 --> 00:14:58,689
to click and so so we run the exact same

00:14:56,230 --> 00:15:00,490
code again no change we actually update

00:14:58,689 --> 00:15:01,870
that that row because the criteria

00:15:00,490 --> 00:15:05,199
document matches the document that was

00:15:01,870 --> 00:15:07,300
inserted and update so yeah that's

00:15:05,199 --> 00:15:09,579
really cool and and doing that actually

00:15:07,300 --> 00:15:12,100
got our CPU utilization down to three

00:15:09,579 --> 00:15:14,769
percent from 100 and processing errors

00:15:12,100 --> 00:15:21,699
in real time so like one go is web scale

00:15:14,769 --> 00:15:23,350
if you use like hum and then so so it we

00:15:21,699 --> 00:15:25,089
still had a bit of traction issues in

00:15:23,350 --> 00:15:28,269
the office getting people to use triage

00:15:25,089 --> 00:15:29,920
and it turns out that because we were

00:15:28,269 --> 00:15:32,079
placing an RSS solution people have

00:15:29,920 --> 00:15:33,730
client-side the client-side app so

00:15:32,079 --> 00:15:36,279
they've got desktop notifications and

00:15:33,730 --> 00:15:38,889
dock icons of bounce and all that sort

00:15:36,279 --> 00:15:40,589
of stuff delivering that the web apps

00:15:38,889 --> 00:15:42,910
quite hard but luckily we found

00:15:40,589 --> 00:15:45,399
something called fluid app which is a

00:15:42,910 --> 00:15:46,749
Mac application that can take a web app

00:15:45,399 --> 00:15:49,329
and sort of turned it into a an

00:15:46,749 --> 00:15:50,259
application with its own dock icon it's

00:15:49,329 --> 00:15:52,779
actually got this really awesome

00:15:50,259 --> 00:15:56,620
JavaScript API so this is how charged is

00:15:52,779 --> 00:15:58,600
looking now such that sort of

00:15:56,620 --> 00:16:00,309
notification that says there's been

00:15:58,600 --> 00:16:01,839
three errors we can actually push that

00:16:00,309 --> 00:16:05,230
as a growl notification on the desktop

00:16:01,839 --> 00:16:06,999
if perhaps running inside fluid really

00:16:05,230 --> 00:16:10,569
easy to detect the existence of the

00:16:06,999 --> 00:16:12,850
fluid API and and sort of progressively

00:16:10,569 --> 00:16:16,170
enhance the experience so yeah that's

00:16:12,850 --> 00:16:19,209
what I'd recommend playing with that too

00:16:16,170 --> 00:16:20,920
so so we're using it down it's like it's

00:16:19,209 --> 00:16:22,390
doing its job that's all good but I

00:16:20,920 --> 00:16:25,150
suppose

00:16:22,390 --> 00:16:27,460
yeah we've actually sort of its

00:16:25,150 --> 00:16:30,670
aggregating and I guess we're learning

00:16:27,460 --> 00:16:31,960
things now that we're using it one thing

00:16:30,670 --> 00:16:33,100
is getting the right level of grouping

00:16:31,960 --> 00:16:37,090
for errors is really really really

00:16:33,100 --> 00:16:38,530
tricky it's um it's sort of either you

00:16:37,090 --> 00:16:40,290
could hide too much stuff and people

00:16:38,530 --> 00:16:43,840
don't have the information they need to

00:16:40,290 --> 00:16:45,130
actually solve the error or you end up

00:16:43,840 --> 00:16:46,960
resenting too much stuff and getting

00:16:45,130 --> 00:16:48,460
that balance is really really hard we've

00:16:46,960 --> 00:16:50,530
got I suppose because we had no

00:16:48,460 --> 00:16:52,420
historical data now we have all the

00:16:50,530 --> 00:16:53,980
historical data in the world some of the

00:16:52,420 --> 00:16:55,570
error counts are in like the 20-30

00:16:53,980 --> 00:16:57,550
thousands and it's just kind of lost all

00:16:55,570 --> 00:17:00,550
meaning because the denominator just so

00:16:57,550 --> 00:17:04,329
big and I don't know one switching the

00:17:00,550 --> 00:17:07,150
bugs so currently that starts a bit of

00:17:04,329 --> 00:17:09,370
an open problem we met when I next get a

00:17:07,150 --> 00:17:11,770
chance I want to look at tweaking the

00:17:09,370 --> 00:17:13,690
aggregation and I'd love some assistance

00:17:11,770 --> 00:17:17,530
with that if anyone's you know once the

00:17:13,690 --> 00:17:19,540
pitch in for the future I would love to

00:17:17,530 --> 00:17:21,430
get it in pi PI as well at the moment

00:17:19,540 --> 00:17:23,199
getting it set up for dev visit liver

00:17:21,430 --> 00:17:24,910
pain in the arse and it's kind of

00:17:23,199 --> 00:17:27,120
multiple dependencies all over the place

00:17:24,910 --> 00:17:30,190
it would be sweet to package it up and

00:17:27,120 --> 00:17:32,140
because we're a PHP shop embarrassingly

00:17:30,190 --> 00:17:34,240
the only client that exists at the

00:17:32,140 --> 00:17:36,940
moment is a PHP client so it's written

00:17:34,240 --> 00:17:40,420
in place and can only log errors from

00:17:36,940 --> 00:17:43,480
PHP so it probably needs a pH by pison

00:17:40,420 --> 00:17:46,480
blogger at the very least and someone

00:17:43,480 --> 00:17:48,430
had the idea of his drop air brake is

00:17:46,480 --> 00:17:50,590
probably the biggest commercial product

00:17:48,430 --> 00:17:52,030
in this space so someone had the idea of

00:17:50,590 --> 00:17:53,560
writing a client that's a drop-in

00:17:52,030 --> 00:17:55,840
replacement so we can essentially just

00:17:53,560 --> 00:17:56,920
you can just go from login to air brake

00:17:55,840 --> 00:17:58,900
and just switch straight over to login

00:17:56,920 --> 00:18:00,130
to us which would be awesome not that

00:17:58,900 --> 00:18:02,470
not me not going to run it as a service

00:18:00,130 --> 00:18:04,300
but people can install it and just make

00:18:02,470 --> 00:18:05,680
the transition really easy and then

00:18:04,300 --> 00:18:08,230
client-side logging would be handy and

00:18:05,680 --> 00:18:10,630
then ultimately down the track I'd love

00:18:08,230 --> 00:18:12,670
to do sort of like Gmail rule filtering

00:18:10,630 --> 00:18:15,610
style so you can just arbitrarily create

00:18:12,670 --> 00:18:17,440
errors that create some rules and apply

00:18:15,610 --> 00:18:19,540
actions to those rules on on an incoming

00:18:17,440 --> 00:18:25,710
air feed which would be like killer

00:18:19,540 --> 00:18:25,710
killer feature sweet thank you very much

00:18:28,230 --> 00:18:36,669
largely thanks very much guys have we

00:18:31,690 --> 00:18:41,919
got any questions see Russell's next

00:18:36,669 --> 00:18:45,460
door are you God so with the aggregation

00:18:41,919 --> 00:18:47,230
at the moment it's is it it seems like

00:18:45,460 --> 00:18:51,009
it's fairly basic pretty much on

00:18:47,230 --> 00:18:53,679
straight counts for error occurrence you

00:18:51,009 --> 00:18:56,019
know do you have plans to expand that

00:18:53,679 --> 00:18:57,639
out so you can start to see errors over

00:18:56,019 --> 00:18:58,779
time and so forth and to take the

00:18:57,639 --> 00:19:01,059
aggregation to that level yeah

00:18:58,779 --> 00:19:04,179
absolutely so we do still have a lot of

00:19:01,059 --> 00:19:05,679
the instance information and Lars has

00:19:04,179 --> 00:19:08,950
actually been looking at graphing that

00:19:05,679 --> 00:19:11,230
so it's part of that sort of error Arab

00:19:08,950 --> 00:19:13,059
like sort of detailed view there'll be

00:19:11,230 --> 00:19:14,830
some graphs like frequency graphs over

00:19:13,059 --> 00:19:16,419
time and all that sort of stuff we have

00:19:14,830 --> 00:19:18,519
some basic github integration at the

00:19:16,419 --> 00:19:21,159
moment such that when we when we push

00:19:18,519 --> 00:19:24,850
deployments our app is aware of the

00:19:21,159 --> 00:19:28,539
current version of the code base in

00:19:24,850 --> 00:19:30,519
terms of git commit so we push that into

00:19:28,539 --> 00:19:32,289
triage and we actually know first and

00:19:30,519 --> 00:19:34,570
last commit range for an error so we

00:19:32,289 --> 00:19:36,009
know the first time in terms of commits

00:19:34,570 --> 00:19:37,629
that we have a sovereign error and the

00:19:36,009 --> 00:19:39,279
most recent time that we've ever seen it

00:19:37,629 --> 00:19:40,749
so you can sort of see all right well

00:19:39,279 --> 00:19:42,340
that can be fixed it actually or that

00:19:40,749 --> 00:19:45,009
commit introduced it and then you can

00:19:42,340 --> 00:19:46,869
differ in that and the last the last bar

00:19:45,009 --> 00:19:48,460
head and essentially and say well that

00:19:46,869 --> 00:19:50,049
commits like this commit Ranger

00:19:48,460 --> 00:19:53,789
introduced it and this commit range

00:19:50,049 --> 00:19:53,789
fixed it sort of makes it pretty cool

00:19:58,389 --> 00:20:05,809
anybody else I have a question actually

00:20:01,190 --> 00:20:07,969
um so you're talking about the different

00:20:05,809 --> 00:20:11,419
clients like like having an you've only

00:20:07,969 --> 00:20:13,909
got a PHP client yeah I know that like

00:20:11,419 --> 00:20:16,099
stats d for example which is slightly

00:20:13,909 --> 00:20:18,249
different but it basically I think just

00:20:16,099 --> 00:20:21,830
does like a you DB connection UDP

00:20:18,249 --> 00:20:23,659
connection like so you just just shove

00:20:21,830 --> 00:20:25,549
it out and and it just takes care of it

00:20:23,659 --> 00:20:29,659
have you thought about doing something

00:20:25,549 --> 00:20:31,969
like that because sometimes you know you

00:20:29,659 --> 00:20:33,649
know like if you're logging goes down

00:20:31,969 --> 00:20:35,239
and then you're using a client that

00:20:33,649 --> 00:20:38,839
tries to push to and it can't get to it

00:20:35,239 --> 00:20:41,059
then you guys yeah so will the pub sub

00:20:38,839 --> 00:20:42,950
nature of 0 and Q if the service out

00:20:41,059 --> 00:20:46,039
there it's actually fine it'll just

00:20:42,950 --> 00:20:48,679
finally fail so yeah log to nothing yeah

00:20:46,039 --> 00:20:50,839
cool and and so they thought about

00:20:48,679 --> 00:20:53,299
having it like a already kind of

00:20:50,839 --> 00:20:56,269
standard thing so any client could just

00:20:53,299 --> 00:20:59,599
push out the right uni p2 serum cool

00:20:56,269 --> 00:21:03,109
whatever yes I suppose yeah as part of

00:20:59,599 --> 00:21:05,019
the airbrake API sort of implementation

00:21:03,109 --> 00:21:06,950
I'm sure we'll have a fairly generic

00:21:05,019 --> 00:21:10,519
implementation that should be fairly

00:21:06,950 --> 00:21:12,589
easy to drop in I suppose yeah the

00:21:10,519 --> 00:21:14,570
advantage well the reason the rationale

00:21:12,589 --> 00:21:17,479
behind 0 and Q was that it's just so

00:21:14,570 --> 00:21:19,969
quick and asynchronous and I'm pretty

00:21:17,479 --> 00:21:21,829
sure air brakes actually just rest style

00:21:19,969 --> 00:21:23,539
interface so we'll probably have to spin

00:21:21,829 --> 00:21:25,159
up something like twisted or tornado to

00:21:23,539 --> 00:21:26,989
sort of deal with that level of

00:21:25,159 --> 00:21:28,759
concurrency of Vera's least or ask is

00:21:26,989 --> 00:21:31,849
like like a thousand there as a second

00:21:28,759 --> 00:21:33,829
sometimes which is daughter and service

00:21:31,849 --> 00:21:39,409
straightaway I think you've probably

00:21:33,829 --> 00:21:40,820
made us all feel really good I thanks

00:21:39,409 --> 00:21:43,489
for that I just slightly missed the

00:21:40,820 --> 00:21:46,039
feature that you moved to MongoDB that

00:21:43,489 --> 00:21:49,759
dramatically reduced your CPU use right

00:21:46,039 --> 00:21:52,429
so we were doing sort of the the Select

00:21:49,759 --> 00:21:55,279
like the update or in select select and

00:21:52,429 --> 00:21:58,909
update or insert a sort of pattern in

00:21:55,279 --> 00:22:00,679
inner in Python so we're doing a

00:21:58,909 --> 00:22:02,629
select and long ago is really really

00:22:00,679 --> 00:22:04,399
really quick to write too but it's a

00:22:02,629 --> 00:22:04,679
less quick to read from sort of things

00:22:04,399 --> 00:22:06,389
so

00:22:04,679 --> 00:22:08,340
it's like it's got great right time

00:22:06,389 --> 00:22:09,899
performance so if you can write to

00:22:08,340 --> 00:22:17,059
without querying at first you'll be

00:22:09,899 --> 00:22:17,059
you'll make a massive massive gain one

00:22:19,940 --> 00:22:26,490
could you pour the client side of zeromq

00:22:23,610 --> 00:22:29,850
to other languages absolutely so 0

00:22:26,490 --> 00:22:31,590
there's 0 mq bindings for almost all

00:22:29,850 --> 00:22:33,179
languages and it's actually really

00:22:31,590 --> 00:22:34,740
trivial to implement the era lager it's

00:22:33,179 --> 00:22:37,169
just you just need to serialize the

00:22:34,740 --> 00:22:39,149
exception and chuck it on zeromq it's

00:22:37,169 --> 00:22:41,999
quite quite easy yeah I've actually got

00:22:39,149 --> 00:22:43,259
a rough pipe in one that I started

00:22:41,999 --> 00:22:46,610
hacking on last night because I felt

00:22:43,259 --> 00:22:49,080
guilty about not having a plan go ahead

00:22:46,610 --> 00:22:52,710
it's that yeah so it probably weighs in

00:22:49,080 --> 00:23:02,580
it like under 30 or 40 lines so quite

00:22:52,710 --> 00:23:06,029
trivial Oh anybody else at just in terms

00:23:02,580 --> 00:23:09,179
of the feature set yep do you have plans

00:23:06,029 --> 00:23:11,820
in the pipeline for an API so that you

00:23:09,179 --> 00:23:13,789
can push that information out to things

00:23:11,820 --> 00:23:15,749
like your ad lessee and bug tracking

00:23:13,789 --> 00:23:18,659
absolutely developer sweet yeah

00:23:15,749 --> 00:23:20,730
absolutely the I guess especially when

00:23:18,659 --> 00:23:22,440
we get to the sort of the gmail rule

00:23:20,730 --> 00:23:24,600
builder I think it would be great to be

00:23:22,440 --> 00:23:26,190
able to sort of define like rules and

00:23:24,600 --> 00:23:28,740
actions that sort of end up as tickets

00:23:26,190 --> 00:23:32,129
like if this error occurs 15 times in a

00:23:28,740 --> 00:23:33,509
time range or if it's got some tag or if

00:23:32,129 --> 00:23:35,549
it's got some if it's some some

00:23:33,509 --> 00:23:37,559
particular class of error that I'm going

00:23:35,549 --> 00:23:39,509
to be looking for creating github issue

00:23:37,559 --> 00:23:41,100
or atlassian issue something like that

00:23:39,509 --> 00:23:44,070
yeah they'll be really really awesome or

00:23:41,100 --> 00:23:47,460
yet New Relic integration mr. tapes you

00:23:44,070 --> 00:23:50,999
could do with it sort of thing yeah just

00:23:47,460 --> 00:23:52,679
just to add quickly I'm sorry as well as

00:23:50,999 --> 00:23:54,960
the code errors you also get like

00:23:52,679 --> 00:23:57,570
transient infrastructural issues that

00:23:54,960 --> 00:24:00,659
will cause like a flurry of errors and

00:23:57,570 --> 00:24:02,700
they do we fix it so in some ways yeah

00:24:00,659 --> 00:24:05,159
this sort of rules would be really

00:24:02,700 --> 00:24:06,899
useful to work out almost which keyword

00:24:05,159 --> 00:24:08,820
guides and like oh this is it this is

00:24:06,899 --> 00:24:10,950
clearly DevOps issued like designation

00:24:08,820 --> 00:24:12,029
this type of issue work in the devil's

00:24:10,950 --> 00:24:14,519
pipeline or

00:24:12,029 --> 00:24:17,399
Pop's this kind of issue thats related

00:24:14,519 --> 00:24:22,229
to this commit as we're saying flag that

00:24:17,399 --> 00:24:24,200
developer yeah yeah yeah the other on

00:24:22,229 --> 00:24:26,279
that the in that sense are the other

00:24:24,200 --> 00:24:28,109
sort of thing that we want to do is so

00:24:26,279 --> 00:24:30,359
so we have this github well that with

00:24:28,109 --> 00:24:31,830
this art get awareness sort of thing and

00:24:30,359 --> 00:24:33,479
we can was actually no api so that you

00:24:31,830 --> 00:24:35,609
can push deployment information to

00:24:33,479 --> 00:24:37,979
triage and off that i'd like to hang

00:24:35,609 --> 00:24:40,019
some sort of like order resolve type

00:24:37,979 --> 00:24:42,299
feature so they'd say when you when you

00:24:40,019 --> 00:24:44,729
release when you when you release code

00:24:42,299 --> 00:24:47,279
say maybe all the active bug sort of get

00:24:44,729 --> 00:24:48,659
put to the side and if they occur again

00:24:47,279 --> 00:24:49,950
they get brought into the main sort of

00:24:48,659 --> 00:24:51,450
error feed so it sort of could be

00:24:49,950 --> 00:24:59,129
self-regulating a bit rather and have

00:24:51,450 --> 00:25:05,339
this massive list all right unless we

00:24:59,129 --> 00:25:09,450
have any more questions and you seemed

00:25:05,339 --> 00:25:13,289
oh really good cool thank you very much

00:25:09,450 --> 00:25:15,149
guys maybe the smug grin for a second

00:25:13,289 --> 00:25:18,029
one i'm not sure with a second mug yeah

00:25:15,149 --> 00:25:25,409
chrome has too many anyway thanks a lot

00:25:18,029 --> 00:25:28,039
guys and i think that's it and we're at

00:25:25,409 --> 00:25:28,039

YouTube URL: https://www.youtube.com/watch?v=LVeecddAd8g


