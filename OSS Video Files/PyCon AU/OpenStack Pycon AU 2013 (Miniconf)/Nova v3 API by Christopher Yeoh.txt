Title: Nova v3 API by Christopher Yeoh
Publication date: 2013-07-12
Playlist: OpenStack Pycon AU 2013 (Miniconf)
Description: 
	PyCon Australia is the national conference for users of the Python Programming Language. In July 2013, we're returning to Hobart, bringing together students, enthusiasts, and professionals with a love of Python from around Australia, and from all over the World. 

July 5--7 2013, Hobart, Tasmania
Captions: 
	00:00:03,230 --> 00:00:08,790
okay hi my name is Christopher yo I work

00:00:06,540 --> 00:00:10,969
for IBM for the Linux Technology Center

00:00:08,790 --> 00:00:17,550
I'm going to be talking today about the

00:00:10,969 --> 00:00:22,410
Nova v3 API who here is has kind of used

00:00:17,550 --> 00:00:24,529
the Nova rest api directly okay so few

00:00:22,410 --> 00:00:27,900
people kind of familiar with it so

00:00:24,529 --> 00:00:30,869
currently we've got the v2 API in

00:00:27,900 --> 00:00:33,660
grizzly during the Grizzly really of the

00:00:30,869 --> 00:00:37,530
development cycle did some work looking

00:00:33,660 --> 00:00:40,290
at the rest api to see what kind of

00:00:37,530 --> 00:00:43,170
state it was in to fix a few problems

00:00:40,290 --> 00:00:45,180
with it we ran into quite a few issues

00:00:43,170 --> 00:00:47,940
where although we knew something was

00:00:45,180 --> 00:00:51,719
wrong we couldn't change it because of

00:00:47,940 --> 00:00:54,690
backwards compatibility issues so it was

00:00:51,719 --> 00:00:57,899
decided during the Havana development

00:00:54,690 --> 00:01:01,199
summit that would actually do a v3

00:00:57,899 --> 00:01:02,969
release of the API with the plan of

00:01:01,199 --> 00:01:05,189
eventually throwing away v2 kind of

00:01:02,969 --> 00:01:10,080
starting afresh and putting things how

00:01:05,189 --> 00:01:14,040
we think they should be so the current

00:01:10,080 --> 00:01:18,119
v2 API it's a rest interface we support

00:01:14,040 --> 00:01:21,659
both XML and Jason Jason is probably by

00:01:18,119 --> 00:01:24,330
far the most well tested and I think the

00:01:21,659 --> 00:01:25,680
most used interface out there in fact

00:01:24,330 --> 00:01:27,030
they're worse there's been some

00:01:25,680 --> 00:01:28,680
discussions on the mailing lists

00:01:27,030 --> 00:01:32,009
recently about whether or not we can

00:01:28,680 --> 00:01:34,439
drop the xml interface the reason being

00:01:32,009 --> 00:01:36,600
that supporting to interface at the time

00:01:34,439 --> 00:01:38,250
is actually quite a bit of overhead it

00:01:36,600 --> 00:01:41,400
basically doubles the amount of testing

00:01:38,250 --> 00:01:43,320
we have to do and it also introduces a

00:01:41,400 --> 00:01:46,409
few points where we can get

00:01:43,320 --> 00:01:48,540
inconsistencies between the two we

00:01:46,409 --> 00:01:50,549
haven't we only get any consensus on

00:01:48,540 --> 00:01:54,030
that unfortunately so it looks like for

00:01:50,549 --> 00:01:58,110
v3 we will release with both XML and

00:01:54,030 --> 00:02:00,810
JSON but there may be some kind of

00:01:58,110 --> 00:02:03,000
ongoing issues about that just to get a

00:02:00,810 --> 00:02:07,140
kind of feeling here who here would

00:02:03,000 --> 00:02:09,300
actually need an XML REST API in

00:02:07,140 --> 00:02:12,110
addition to Jason is there anybody who's

00:02:09,300 --> 00:02:12,110
in that kind of situation

00:02:12,470 --> 00:02:19,200
no yeah I've there people say enterprise

00:02:15,630 --> 00:02:20,610
but I'd like to see some kind of some

00:02:19,200 --> 00:02:24,030
people real people out there who just

00:02:20,610 --> 00:02:25,380
really do need it so a bit an example

00:02:24,030 --> 00:02:29,060
kind of here of how you access the

00:02:25,380 --> 00:02:31,410
interface this is for the v2 interface

00:02:29,060 --> 00:02:33,390
if you want to get a list of extensions

00:02:31,410 --> 00:02:36,450
out of Nova that are currently installed

00:02:33,390 --> 00:02:40,230
you get an authentication token from

00:02:36,450 --> 00:02:43,020
Keystone you pass it through to Nova the

00:02:40,230 --> 00:02:46,590
bit after the v2 over here is basically

00:02:43,020 --> 00:02:48,560
a tenant ID identifies which tenant you

00:02:46,590 --> 00:02:50,790
want to have a get the information for

00:02:48,560 --> 00:02:53,790
extensions and it basically reduce

00:02:50,790 --> 00:02:55,620
returns a big JSON formatted thing of

00:02:53,790 --> 00:02:59,640
all the extensions which are currently

00:02:55,620 --> 00:03:04,440
installed in Nova now the core of the

00:02:59,640 --> 00:03:08,400
Nova v2 API is only really about six or

00:03:04,440 --> 00:03:11,040
seven files and the rest is implemented

00:03:08,400 --> 00:03:15,090
through API extensions and there's

00:03:11,040 --> 00:03:20,730
around 60 of those so they've kind of

00:03:15,090 --> 00:03:22,380
been added slowly over time it's kind of

00:03:20,730 --> 00:03:24,540
growing but the core itself is actually

00:03:22,380 --> 00:03:26,490
quite small that I assume most

00:03:24,540 --> 00:03:29,640
deployments use quite a few of the

00:03:26,490 --> 00:03:33,390
extensions so what are the kind of

00:03:29,640 --> 00:03:36,720
issues we've had with the v2 API people

00:03:33,390 --> 00:03:44,220
using incorrect return codes for

00:03:36,720 --> 00:03:48,150
requests they've been inconsistencies

00:03:44,220 --> 00:03:50,040
between the XML and JSON in terms of the

00:03:48,150 --> 00:03:52,410
way that the data is formatted when it's

00:03:50,040 --> 00:03:54,060
returned even the parameter names for

00:03:52,410 --> 00:03:57,600
some reason when someone was writing the

00:03:54,060 --> 00:04:01,709
the extension the XML 12 different from

00:03:57,600 --> 00:04:04,080
the Jason ones rest following rest

00:04:01,709 --> 00:04:05,790
principles properly things such as puts

00:04:04,080 --> 00:04:09,270
must be idempotent that wasn't always

00:04:05,790 --> 00:04:11,910
done that kind of thing lack of

00:04:09,270 --> 00:04:15,090
flexibility in managing extensions the

00:04:11,910 --> 00:04:18,870
v2 extension framework was basically a

00:04:15,090 --> 00:04:21,540
custom job of loading modules and so

00:04:18,870 --> 00:04:24,810
where the modules extension plugins had

00:04:21,540 --> 00:04:26,010
to live was fairly restrictive and the

00:04:24,810 --> 00:04:27,690
naming was also fair

00:04:26,010 --> 00:04:30,510
restrictive so we couldn't couldn't

00:04:27,690 --> 00:04:32,760
comply to our coding standards because

00:04:30,510 --> 00:04:36,060
the class named had to match the file

00:04:32,760 --> 00:04:38,670
names for example for the loader to work

00:04:36,060 --> 00:04:43,290
and then there was consistency between

00:04:38,670 --> 00:04:45,210
extensions for examples this was the

00:04:43,290 --> 00:04:47,910
name of the extension sometimes they

00:04:45,210 --> 00:04:51,030
call things like OS stash with all

00:04:47,910 --> 00:04:53,370
capitals and removing valves and then

00:04:51,030 --> 00:04:54,840
other times people would kind of spell

00:04:53,370 --> 00:04:56,880
it out properly so we've kind of got rid

00:04:54,840 --> 00:04:59,760
of all the all caps and saving on

00:04:56,880 --> 00:05:02,370
letters and gone for instead that's been

00:04:59,760 --> 00:05:04,200
for the v3 API it's our scheduling hints

00:05:02,370 --> 00:05:09,540
so people actually understand what the

00:05:04,200 --> 00:05:12,530
extension does from the name v2

00:05:09,540 --> 00:05:15,090
extensions they've got no version number

00:05:12,530 --> 00:05:18,210
there was kind of a date at latest

00:05:15,090 --> 00:05:21,180
updated date field in the extension but

00:05:18,210 --> 00:05:24,000
no one was really sure what and how we

00:05:21,180 --> 00:05:26,250
could use that the problem with that is

00:05:24,000 --> 00:05:28,650
that it made it very difficult to make

00:05:26,250 --> 00:05:31,050
even backwards compatible changes to

00:05:28,650 --> 00:05:33,630
extensions because a client wouldn't

00:05:31,050 --> 00:05:37,020
know whether the extension which was

00:05:33,630 --> 00:05:40,590
loaded for their deployment had that

00:05:37,020 --> 00:05:42,240
feature or not so what would happen is

00:05:40,590 --> 00:05:43,910
that someone would then if they wanted

00:05:42,240 --> 00:05:46,860
to make a backwards compatible change

00:05:43,910 --> 00:05:48,780
would create a new extension and often

00:05:46,860 --> 00:05:51,390
that new extension did nothing except

00:05:48,780 --> 00:05:53,670
was present so a client could look for

00:05:51,390 --> 00:05:55,740
that extension and if it was then the

00:05:53,670 --> 00:05:57,990
other extension would have the feature

00:05:55,740 --> 00:05:59,100
that they were looking for so unique

00:05:57,990 --> 00:06:00,780
kind of look through the files you go

00:05:59,100 --> 00:06:02,100
this extension does nothing and then you

00:06:00,780 --> 00:06:06,510
have to search through other extension

00:06:02,100 --> 00:06:09,660
to see who was looking for it as I was

00:06:06,510 --> 00:06:13,740
getting very grace extensions they

00:06:09,660 --> 00:06:17,190
modify core code so they weren't really

00:06:13,740 --> 00:06:18,980
independent extensions when I had first

00:06:17,190 --> 00:06:21,840
hair looks with service dot P I which is

00:06:18,980 --> 00:06:25,230
part of the core part of the Nova API

00:06:21,840 --> 00:06:27,990
you kind of find this this kind of

00:06:25,230 --> 00:06:30,750
instance is quite a few of these where

00:06:27,990 --> 00:06:32,460
it's looking for OS config drive to to

00:06:30,750 --> 00:06:34,350
manage creation of a server so it's

00:06:32,460 --> 00:06:38,470
looking for an extension to exist

00:06:34,350 --> 00:06:41,320
actually doing extension of Pacific work

00:06:38,470 --> 00:06:43,640
that should have been put into a

00:06:41,320 --> 00:06:45,380
different which we should have been in

00:06:43,640 --> 00:06:47,510
the extension itself rather than in the

00:06:45,380 --> 00:06:49,460
core code which meant that the core

00:06:47,510 --> 00:06:51,410
itself was less stable because

00:06:49,460 --> 00:06:57,530
extensions had to modify it to do

00:06:51,410 --> 00:07:01,910
certain operations so we wanted to clean

00:06:57,530 --> 00:07:04,100
this all up for the v3 API framework and

00:07:01,910 --> 00:07:06,530
we started looking at entry points and

00:07:04,100 --> 00:07:08,480
kind through the lake grizzly stage we

00:07:06,530 --> 00:07:10,760
hadn't looked at a few options to see

00:07:08,480 --> 00:07:15,560
what was out there to to clean this all

00:07:10,760 --> 00:07:17,360
up entry points looked really good Doug

00:07:15,560 --> 00:07:21,440
Helmand did some of this work for

00:07:17,360 --> 00:07:24,020
salamat er which is currently incubated

00:07:21,440 --> 00:07:28,280
should be a full project in the Havana

00:07:24,020 --> 00:07:29,990
release and he developed a python

00:07:28,280 --> 00:07:34,760
package called stevedore which really

00:07:29,990 --> 00:07:36,410
simplifies what how you can simplifies

00:07:34,760 --> 00:07:38,780
the use of entry points to make it much

00:07:36,410 --> 00:07:41,030
easier for the common case of how we

00:07:38,780 --> 00:07:42,620
want to use plugins I've got another

00:07:41,030 --> 00:07:47,450
slide on stevedore which I'll talk about

00:07:42,620 --> 00:07:49,700
in a second in the v3 framework

00:07:47,450 --> 00:07:53,510
everything is an extension even the core

00:07:49,700 --> 00:07:55,460
code this makes things a lot simpler for

00:07:53,510 --> 00:07:58,460
people writing extensions and for

00:07:55,460 --> 00:08:00,380
providing infrastructure for extensions

00:07:58,460 --> 00:08:04,090
in that there's no special casing now

00:08:00,380 --> 00:08:06,320
for core API code versus extension code

00:08:04,090 --> 00:08:08,870
so you don't get stuck in the problem

00:08:06,320 --> 00:08:11,120
with I have to have this as a core part

00:08:08,870 --> 00:08:13,970
of the Nova API because I need this

00:08:11,120 --> 00:08:18,100
feature basically an extension can do

00:08:13,970 --> 00:08:20,810
anything a core part of the API can do

00:08:18,100 --> 00:08:23,510
using stevedore you can have extension

00:08:20,810 --> 00:08:25,520
points in extensions so you can have it

00:08:23,510 --> 00:08:28,340
you can build extensions on extensions

00:08:25,520 --> 00:08:30,980
which you may need to in some cases and

00:08:28,340 --> 00:08:33,620
there's examples of where now for

00:08:30,980 --> 00:08:35,150
example servers creating servers is an

00:08:33,620 --> 00:08:38,660
extension and that allows other

00:08:35,150 --> 00:08:40,640
extensions to build up upon that in

00:08:38,660 --> 00:08:42,350
terms of extort installing extensions

00:08:40,640 --> 00:08:44,480
they can live anywhere in Python path

00:08:42,350 --> 00:08:47,450
now because they're implemented through

00:08:44,480 --> 00:08:49,490
entry points so you can have packages

00:08:47,450 --> 00:08:50,930
which contain just an extension you can

00:08:49,490 --> 00:08:54,710
stall it that way

00:08:50,930 --> 00:08:57,230
you can blacklist and white list API

00:08:54,710 --> 00:08:59,750
extensions which means you can say I

00:08:57,230 --> 00:09:02,690
don't want this list of certain

00:08:59,750 --> 00:09:05,360
extensions ever to get loaded and here's

00:09:02,690 --> 00:09:07,220
a whitelist do say only if it's in this

00:09:05,360 --> 00:09:09,290
white list will you load them and in

00:09:07,220 --> 00:09:12,620
this case a blacklist overrides the

00:09:09,290 --> 00:09:15,230
whitelist that just helps deployers have

00:09:12,620 --> 00:09:17,360
a bit of stability with their deployment

00:09:15,230 --> 00:09:19,339
so even if someone happens to install

00:09:17,360 --> 00:09:21,320
another extension they're going to have

00:09:19,339 --> 00:09:22,940
to modify config file before it kind of

00:09:21,320 --> 00:09:26,180
magically starts changing the behavior

00:09:22,940 --> 00:09:30,070
and we've added versioning now to to try

00:09:26,180 --> 00:09:30,070
and avoid some of the previous problems

00:09:30,190 --> 00:09:36,260
this is a bit of an example of just

00:09:32,480 --> 00:09:39,010
using stevedore and how much easier it's

00:09:36,260 --> 00:09:44,120
made things you can see the top part is

00:09:39,010 --> 00:09:46,670
loading basically an extension it's just

00:09:44,120 --> 00:09:48,529
a matter of saying quote group name for

00:09:46,670 --> 00:09:51,050
the entry point you're using you can

00:09:48,529 --> 00:09:52,790
supply a function which does some

00:09:51,050 --> 00:09:54,380
checking on the extension to see whether

00:09:52,790 --> 00:09:57,200
you want to load it or not so that may

00:09:54,380 --> 00:09:58,820
be a blacklist check whitelist check to

00:09:57,200 --> 00:10:01,940
make sure that the object you're loading

00:09:58,820 --> 00:10:05,330
looks like an extension you can pass

00:10:01,940 --> 00:10:08,000
parameters to it and then to operate on

00:10:05,330 --> 00:10:10,339
the extension to for example to look for

00:10:08,000 --> 00:10:14,000
what resources and what controllers to

00:10:10,339 --> 00:10:15,770
load as simple as doing this extension

00:10:14,000 --> 00:10:17,990
manager top map and it just basically

00:10:15,770 --> 00:10:20,540
operates on all the extensions which are

00:10:17,990 --> 00:10:23,900
loaded it's really clean to the code up

00:10:20,540 --> 00:10:26,860
for us and then in terms of the

00:10:23,900 --> 00:10:29,930
extension itself it's just a matter of

00:10:26,860 --> 00:10:31,730
defining a few bit of basic information

00:10:29,930 --> 00:10:34,910
such as the name of the extension and

00:10:31,730 --> 00:10:37,490
alias for some namespace version and

00:10:34,910 --> 00:10:40,459
then a couple functions which define

00:10:37,490 --> 00:10:47,990
basically how to extend the wsgi which

00:10:40,459 --> 00:10:51,800
we use for Nova so in terms of porting

00:10:47,990 --> 00:10:54,589
from the v2 API to v3 API I'm not sure

00:10:51,800 --> 00:10:58,070
how much of that is actually readable

00:10:54,589 --> 00:11:00,350
from back there but for a very simple

00:10:58,070 --> 00:11:02,420
train from v2 to v3 when we're not

00:11:00,350 --> 00:11:04,339
fixing up anything there's actually very

00:11:02,420 --> 00:11:08,499
few changes at all

00:11:04,339 --> 00:11:12,680
we've done things like regular lized

00:11:08,499 --> 00:11:13,850
names in terms of aliases there's multi

00:11:12,680 --> 00:11:16,220
Nick over there we've kind of

00:11:13,850 --> 00:11:19,129
standardized on OS for extensions dash

00:11:16,220 --> 00:11:21,949
multi Nick got rid of as I mentioned

00:11:19,129 --> 00:11:24,589
before about scheduling hints regulating

00:11:21,949 --> 00:11:27,259
names and putting a version number for

00:11:24,589 --> 00:11:29,059
our policy files policy files basically

00:11:27,259 --> 00:11:32,660
regulate who can access various

00:11:29,059 --> 00:11:35,149
interfaces so between v2 and v3 you'll

00:11:32,660 --> 00:11:38,720
be able to have different security

00:11:35,149 --> 00:11:41,059
policies between the two we also now

00:11:38,720 --> 00:11:43,819
have a proper based class for all

00:11:41,059 --> 00:11:46,339
extensions before you kind of you could

00:11:43,819 --> 00:11:48,529
use the proper base class if you wanted

00:11:46,339 --> 00:11:51,139
to but it wasn't enforced we decided to

00:11:48,529 --> 00:11:55,009
enforce this for v3 just to try to make

00:11:51,139 --> 00:11:58,490
all extensions look the same one of the

00:11:55,009 --> 00:12:00,319
issues we had with v2 is that I think a

00:11:58,490 --> 00:12:02,149
lot of people came in writing extension

00:12:00,319 --> 00:12:04,879
not knowing a lot about how to write

00:12:02,149 --> 00:12:07,279
extensions and they cut and paste other

00:12:04,879 --> 00:12:09,350
people's extensions so you kind of got

00:12:07,279 --> 00:12:11,420
this growth where they slowly diverged

00:12:09,350 --> 00:12:13,879
and what an extension looked liked

00:12:11,420 --> 00:12:17,569
depended on which one you kind of base

00:12:13,879 --> 00:12:19,129
your extension on and they all ended up

00:12:17,569 --> 00:12:20,870
looking quite different with different

00:12:19,129 --> 00:12:24,290
ones having different errors or

00:12:20,870 --> 00:12:25,550
redundancies in them you can see which

00:12:24,290 --> 00:12:29,120
basically just need to change the

00:12:25,550 --> 00:12:31,879
namespace version number and we

00:12:29,120 --> 00:12:33,379
implement the base class using an

00:12:31,879 --> 00:12:43,249
abstract base class which forces people

00:12:33,379 --> 00:12:46,309
to to use it all the time yep okay so to

00:12:43,249 --> 00:12:50,089
go to two to three it's a huge copy and

00:12:46,309 --> 00:12:53,269
paste job we didn't want to go through

00:12:50,089 --> 00:12:55,790
the pain of trying to have an extension

00:12:53,269 --> 00:12:58,429
support both the main reason is that we

00:12:55,790 --> 00:13:00,230
want to change a lot of the the actual

00:12:58,429 --> 00:13:02,420
format of the output which have returned

00:13:00,230 --> 00:13:06,370
between the two and trying to maintain

00:13:02,420 --> 00:13:09,699
that in one file would get very messy

00:13:06,370 --> 00:13:09,699
yes sir

00:13:10,699 --> 00:13:17,579
production like HP Cloud since we do not

00:13:14,009 --> 00:13:21,540
be too right so the idea is that Havana

00:13:17,579 --> 00:13:24,179
will release with us basically a

00:13:21,540 --> 00:13:25,799
superset of what is in grizzly with the

00:13:24,179 --> 00:13:28,110
exception where we're deliberately not

00:13:25,799 --> 00:13:30,779
porting to v3 and I'll go through that

00:13:28,110 --> 00:13:33,989
in a bit of future I'm hoping that in

00:13:30,779 --> 00:13:36,480
ice house so we can remove v2 from the

00:13:33,989 --> 00:13:37,860
codebase that may be a bit premature but

00:13:36,480 --> 00:13:43,110
we'll have to keep it for at least a

00:13:37,860 --> 00:13:46,470
violent yes so that's why I want to give

00:13:43,110 --> 00:13:49,290
them at least one cycle to port clients

00:13:46,470 --> 00:13:50,939
to v3 yeah that that was the the

00:13:49,290 --> 00:13:52,709
principal reason we couldn't just fix

00:13:50,939 --> 00:13:55,379
these in v2 was all the clients out

00:13:52,709 --> 00:14:04,769
there using the broken interfaces we

00:13:55,379 --> 00:14:08,100
needed to start a fresh ok so this is

00:14:04,769 --> 00:14:10,049
gained just an example the small minimal

00:14:08,100 --> 00:14:12,629
number of files we had to do for v2 to

00:14:10,049 --> 00:14:15,389
v3 port basically you need to change the

00:14:12,629 --> 00:14:17,790
policy files you cut and paste the

00:14:15,389 --> 00:14:22,639
extension from v2 to v3 make those

00:14:17,790 --> 00:14:25,410
modifications update some test files and

00:14:22,639 --> 00:14:27,839
just in set up that config this is just

00:14:25,410 --> 00:14:30,629
for the entry point and in to describe

00:14:27,839 --> 00:14:35,399
the extension which needs to be to be

00:14:30,629 --> 00:14:37,769
loaded so the kind of things we're

00:14:35,399 --> 00:14:40,110
fixing in the v3 API I went through

00:14:37,769 --> 00:14:43,699
these ones before I guess just down

00:14:40,110 --> 00:14:46,499
below bottom with there's no more core

00:14:43,699 --> 00:14:48,959
modifications by extensions so if you

00:14:46,499 --> 00:14:50,879
write an extension there's no need to do

00:14:48,959 --> 00:14:56,489
anything but add a new far rather than

00:14:50,879 --> 00:14:58,529
modify existing OpenStack API code other

00:14:56,489 --> 00:15:01,220
things we're looking at is better

00:14:58,529 --> 00:15:06,269
handling of methods which don't exist

00:15:01,220 --> 00:15:08,009
returning 405's explicitly and I think

00:15:06,269 --> 00:15:09,989
there's like a loud headers which goes

00:15:08,009 --> 00:15:13,199
back which actually describes what

00:15:09,989 --> 00:15:15,360
methods you can use theirs were a few

00:15:13,199 --> 00:15:16,919
cases where actions were use instead of

00:15:15,360 --> 00:15:20,720
methods just speakers I think people

00:15:16,919 --> 00:15:21,800
were bitten experience with rest ap is

00:15:20,720 --> 00:15:24,170
consistent

00:15:21,800 --> 00:15:26,450
naming sometimes would use kind of camel

00:15:24,170 --> 00:15:27,890
case sometimes network sometimes

00:15:26,450 --> 00:15:31,550
underscores and we've made those

00:15:27,890 --> 00:15:35,600
consistent between extensions you can

00:15:31,550 --> 00:15:37,610
now through policy describe whether or

00:15:35,600 --> 00:15:41,660
not certain extensions are visible to

00:15:37,610 --> 00:15:44,930
users or not that doesn't actually make

00:15:41,660 --> 00:15:46,610
the api's disappear themselves but at

00:15:44,930 --> 00:15:51,890
least the discover from the discovery

00:15:46,610 --> 00:15:54,380
point of does and in the v2 URLs we

00:15:51,890 --> 00:15:57,680
always had the project or tenant ID in

00:15:54,380 --> 00:16:00,410
the URL that's kind of implied any way

00:15:57,680 --> 00:16:02,810
through the authentication token which

00:16:00,410 --> 00:16:06,320
you get from Keystone and so to simplify

00:16:02,810 --> 00:16:13,220
things that's been removed and in v3 you

00:16:06,320 --> 00:16:16,100
no longer need to supply that one of the

00:16:13,220 --> 00:16:20,269
other issues we had with the v2 API is

00:16:16,100 --> 00:16:23,240
the handling of exceptions a lot of the

00:16:20,269 --> 00:16:25,310
exception handling was implicit kind of

00:16:23,240 --> 00:16:29,060
exceptions bubbled up through from the

00:16:25,310 --> 00:16:30,980
Nova code and then in WSS gif they

00:16:29,060 --> 00:16:33,470
weren't caught it tried to do a best

00:16:30,980 --> 00:16:35,839
case Hamming if the exception convert it

00:16:33,470 --> 00:16:39,260
to what it thought was the right HTTP

00:16:35,839 --> 00:16:41,570
status code and convert it it actually

00:16:39,260 --> 00:16:46,010
logged us back trace as well which is

00:16:41,570 --> 00:16:49,670
pretty bad and then return the code so

00:16:46,010 --> 00:16:52,220
in v3 were actually requiring extensions

00:16:49,670 --> 00:16:54,399
to explicitly specify what status codes

00:16:52,220 --> 00:16:57,260
they expect to come out of their methods

00:16:54,399 --> 00:16:59,930
and it converts it to internal server

00:16:57,260 --> 00:17:01,730
errors if they don't so hopefully that

00:16:59,930 --> 00:17:04,699
will help us better pick up earlier in

00:17:01,730 --> 00:17:06,740
the stage where programmers have not

00:17:04,699 --> 00:17:09,140
thought about properly what errors may

00:17:06,740 --> 00:17:16,160
propagate up and we can address these

00:17:09,140 --> 00:17:18,380
sooner yep we don't yet there is

00:17:16,160 --> 00:17:21,709
actually a tempest blueprint to remove

00:17:18,380 --> 00:17:23,449
those issues every few months I go

00:17:21,709 --> 00:17:27,350
through and grep through tempest logs to

00:17:23,449 --> 00:17:29,809
see for back traces and submit patches

00:17:27,350 --> 00:17:30,830
for those but that is something that we

00:17:29,809 --> 00:17:33,460
would like to get into the gate

00:17:30,830 --> 00:17:33,460
eventually

00:17:33,470 --> 00:17:38,220
so you just you just specify the status

00:17:36,120 --> 00:17:42,770
code in there and the decorator looks

00:17:38,220 --> 00:17:42,770
after checking and handling of that

00:17:44,360 --> 00:17:49,590
other things we're fixing in the v3 API

00:17:47,010 --> 00:17:52,890
there are things which are in core which

00:17:49,590 --> 00:17:57,870
on reflection there's consensus that we

00:17:52,890 --> 00:17:59,790
don't need in core and then there's

00:17:57,870 --> 00:18:02,340
other things which over time which

00:17:59,790 --> 00:18:04,559
didn't make it into core but we couldn't

00:18:02,340 --> 00:18:06,330
really change core in the v2 API because

00:18:04,559 --> 00:18:08,730
going clients are dependent on it which

00:18:06,330 --> 00:18:10,980
problem which we're promoting to it so

00:18:08,730 --> 00:18:12,690
if you're a user of these REST API s and

00:18:10,980 --> 00:18:15,480
these are something which you disagree

00:18:12,690 --> 00:18:17,640
with you really need to tell us kind of

00:18:15,480 --> 00:18:19,440
in the next two to three weeks so we can

00:18:17,640 --> 00:18:25,049
fix this before the Havana release

00:18:19,440 --> 00:18:26,820
otherwise it'll change and then there's

00:18:25,049 --> 00:18:30,600
a quite a number of things which we're

00:18:26,820 --> 00:18:33,090
not porting to the v3 API this is a list

00:18:30,600 --> 00:18:34,620
of extensions which are not porting they

00:18:33,090 --> 00:18:36,720
come under a few different

00:18:34,620 --> 00:18:40,190
classifications the bare metal nodes as

00:18:36,720 --> 00:18:42,470
because I ronix moving out anyway

00:18:40,190 --> 00:18:45,780
there's things like the cloud pipe

00:18:42,470 --> 00:18:47,400
update that's an example of where you

00:18:45,780 --> 00:18:50,640
can get the same functionality or should

00:18:47,400 --> 00:18:54,179
be able to pretty soon out of what to

00:18:50,640 --> 00:18:57,860
call now formula project formerly known

00:18:54,179 --> 00:19:00,419
as quantum Neutron sorry yeah neutron

00:18:57,860 --> 00:19:02,780
volume stop py something which can go

00:19:00,419 --> 00:19:05,940
you can access all that functionality

00:19:02,780 --> 00:19:07,799
except for a small part through cinder

00:19:05,940 --> 00:19:09,390
anyway and part of this is because they

00:19:07,799 --> 00:19:12,720
used to be part of Nova they've been

00:19:09,390 --> 00:19:15,720
broken out now you no longer need to and

00:19:12,720 --> 00:19:17,130
all Nova does now is proxy it just you

00:19:15,720 --> 00:19:20,840
know you make a request in over and it

00:19:17,130 --> 00:19:23,220
goes to cinder or two neutron anyway so

00:19:20,840 --> 00:19:25,919
there's no need for Nova to be in the

00:19:23,220 --> 00:19:27,570
middle in these cases there's a lot of

00:19:25,919 --> 00:19:29,669
networking stuff in there which is being

00:19:27,570 --> 00:19:32,520
removed as a result of that so that'll

00:19:29,669 --> 00:19:35,309
clean quite a lot of stuff up there's

00:19:32,520 --> 00:19:37,410
even a few extensions in there which do

00:19:35,309 --> 00:19:40,710
nothing at all they're just in there for

00:19:37,410 --> 00:19:42,270
historical reasons and had to actually

00:19:40,710 --> 00:19:44,020
hunt through the get logs to work out

00:19:42,270 --> 00:19:48,730
why we have that at all

00:19:44,020 --> 00:19:50,800
is just redundant so in terms of current

00:19:48,730 --> 00:19:53,440
progress how we're working for the

00:19:50,800 --> 00:19:55,630
Havana one day thirty thermae we got

00:19:53,440 --> 00:19:57,550
most of the infrastructure and core

00:19:55,630 --> 00:20:00,160
merged and it turned out that although

00:19:57,550 --> 00:20:02,290
the changes themselves weren't very

00:20:00,160 --> 00:20:03,490
large the reviews took a very long time

00:20:02,290 --> 00:20:05,950
to get through and they're quite

00:20:03,490 --> 00:20:08,800
difficult the reason for that is because

00:20:05,950 --> 00:20:11,710
of the cut and paste the change sets

00:20:08,800 --> 00:20:14,010
looked really big service doc Pyo for

00:20:11,710 --> 00:20:16,450
examples like 1500 lines of code and

00:20:14,010 --> 00:20:19,030
getting that getting someone to review

00:20:16,450 --> 00:20:21,550
that can be quite difficult and also

00:20:19,030 --> 00:20:23,170
although problems existed in the V two

00:20:21,550 --> 00:20:25,390
versions when people looked at the code

00:20:23,170 --> 00:20:27,340
again a whole lot of other issues were

00:20:25,390 --> 00:20:29,350
popping up and would had to do lots and

00:20:27,340 --> 00:20:31,480
lots of revisions over code which was

00:20:29,350 --> 00:20:32,560
basically code we didn't want to change

00:20:31,480 --> 00:20:37,120
too much because we're just doing

00:20:32,560 --> 00:20:38,680
porting work so for the rest of the

00:20:37,120 --> 00:20:40,480
extensions that only covered about six

00:20:38,680 --> 00:20:43,090
extensions we realized that there was

00:20:40,480 --> 00:20:45,190
going to be a review issue so for the

00:20:43,090 --> 00:20:47,230
rest of the extensions we go into a

00:20:45,190 --> 00:20:49,780
different technique of submitting change

00:20:47,230 --> 00:20:53,080
sets and that is to provide to change

00:20:49,780 --> 00:20:54,940
sets very extension that we put the

00:20:53,080 --> 00:20:57,130
first one is just to cut and paste the

00:20:54,940 --> 00:21:01,330
code from the v2 directory to the v3

00:20:57,130 --> 00:21:03,160
directory and basically get reviewers to

00:21:01,330 --> 00:21:06,960
rubber-stamp that it makes no change at

00:21:03,160 --> 00:21:11,340
all the code doesn't get imported by

00:21:06,960 --> 00:21:14,260
either the v2 or v3 extension framework

00:21:11,340 --> 00:21:17,380
and the tests run against the v2 code

00:21:14,260 --> 00:21:21,160
anyway we then submit a second change

00:21:17,380 --> 00:21:22,960
set which modifies that v3 version and

00:21:21,160 --> 00:21:25,720
that means when it goes through the get

00:21:22,960 --> 00:21:29,200
review process all you do as I see it is

00:21:25,720 --> 00:21:34,240
you see a diff from v2 to v3 which is

00:21:29,200 --> 00:21:36,730
very small and easy to easy to review so

00:21:34,240 --> 00:21:43,120
we've got about somewhere around 60 to

00:21:36,730 --> 00:21:44,770
70 extensions to port we've got a couple

00:21:43,120 --> 00:21:48,370
of weeks two and a half weeks left

00:21:44,770 --> 00:21:50,900
before Havana to closes all of them have

00:21:48,370 --> 00:21:53,300
been ported in there in the review q

00:21:50,900 --> 00:21:56,420
about half of them 30 have been merged

00:21:53,300 --> 00:21:59,920
and got 40 or so left to work through

00:21:56,420 --> 00:22:03,740
various fixes and reviews and that that

00:21:59,920 --> 00:22:06,170
method of doing a copy and commit and

00:22:03,740 --> 00:22:08,750
then modify has worked a whole lot

00:22:06,170 --> 00:22:11,560
better this cycle it's unfortunate that

00:22:08,750 --> 00:22:14,240
get doesn't have kind of a get copy

00:22:11,560 --> 00:22:18,160
command which allows you to keep change

00:22:14,240 --> 00:22:21,530
history between that kind of mechanism

00:22:18,160 --> 00:22:23,480
for Havana three will basically be

00:22:21,530 --> 00:22:25,220
polishing off the rest of the extensions

00:22:23,480 --> 00:22:28,070
which we haven't done there's various

00:22:25,220 --> 00:22:30,410
fixes we need to do but focus will be on

00:22:28,070 --> 00:22:33,350
integration testing and Tempest there's

00:22:30,410 --> 00:22:35,690
a lot of extensions in the v2 API which

00:22:33,350 --> 00:22:38,750
although they have unit tests have no

00:22:35,690 --> 00:22:40,910
integration tests and we need to add

00:22:38,750 --> 00:22:43,730
integration tests to get a higher I

00:22:40,910 --> 00:22:46,460
guess reliability on those api's and so

00:22:43,730 --> 00:22:48,350
we know when they change as well and of

00:22:46,460 --> 00:22:50,500
course documentation so we're going to

00:22:48,350 --> 00:22:52,760
produce a lot of documentation for that

00:22:50,500 --> 00:22:54,740
we're still to kind of work out how

00:22:52,760 --> 00:22:56,330
that's going to work whether we'll be

00:22:54,740 --> 00:22:59,480
doing it the same way as we produce

00:22:56,330 --> 00:23:06,650
document documentation for the v2 API or

00:22:59,480 --> 00:23:08,750
if there's a better way of doing that so

00:23:06,650 --> 00:23:11,240
how can you help if you want to help if

00:23:08,750 --> 00:23:13,220
you've used the v2 rest api and there's

00:23:11,240 --> 00:23:15,980
things that you don't like in it please

00:23:13,220 --> 00:23:18,410
let us know submit a bug report send an

00:23:15,980 --> 00:23:20,720
email to the mailing list or send direct

00:23:18,410 --> 00:23:23,360
to me if you really want to just let us

00:23:20,720 --> 00:23:26,420
know somehow because the window and

00:23:23,360 --> 00:23:28,820
being out of fix things up which are not

00:23:26,420 --> 00:23:31,310
backwards compatible is kind of closing

00:23:28,820 --> 00:23:34,100
once we release ivana we can't fix it up

00:23:31,310 --> 00:23:36,110
until we do a v4 api so definitely

00:23:34,100 --> 00:23:39,650
there's things you don't like please let

00:23:36,110 --> 00:23:42,710
us know writing tempest tests there's a

00:23:39,650 --> 00:23:44,000
huge amount of test coverage which test

00:23:42,710 --> 00:23:46,960
gap coverage which we've got at the

00:23:44,000 --> 00:23:49,700
moment so if you're like writing tests

00:23:46,960 --> 00:23:51,830
then you know plz donate test and that

00:23:49,700 --> 00:23:53,660
would be really really helpful and the

00:23:51,830 --> 00:23:57,530
last is just to use it if you use

00:23:53,660 --> 00:24:01,430
devstack at all the v3 API is enabled by

00:23:57,530 --> 00:24:03,590
default and currently with the Nova if

00:24:01,430 --> 00:24:06,409
you just do a normal check out

00:24:03,590 --> 00:24:09,950
Master it's disabled but there's an OS

00:24:06,409 --> 00:24:13,059
API v3 flag which you just set it to

00:24:09,950 --> 00:24:16,220
true and it will enable the interface

00:24:13,059 --> 00:24:26,390
and that's about all I've got there any

00:24:16,220 --> 00:24:27,799
questions nope okay we've got lots of

00:24:26,390 --> 00:24:33,559
spare time anyone want to give another

00:24:27,799 --> 00:24:42,049
talk really no questions for Tim not

00:24:33,559 --> 00:24:43,220
even you Russell's yes forgotten yep so

00:24:42,049 --> 00:24:45,230
I might have missed this or just

00:24:43,220 --> 00:24:48,289
misunderstood it but how are you

00:24:45,230 --> 00:24:50,779
maintaining compatibility of version 2

00:24:48,289 --> 00:24:53,360
once you've copied it into the version 3

00:24:50,779 --> 00:24:55,760
and write those changes so the v2 code

00:24:53,360 --> 00:25:00,230
base is staying the same and completely

00:24:55,760 --> 00:25:04,159
separate and we just create a new v3 API

00:25:00,230 --> 00:25:05,990
which you can run in parallel you can

00:25:04,159 --> 00:25:07,520
disable and I think you can actually

00:25:05,990 --> 00:25:11,360
disable v2 yet but we're going to have

00:25:07,520 --> 00:25:13,520
to add a flag our bug fixes it's a real

00:25:11,360 --> 00:25:17,029
pain at the moment you need to apply to

00:25:13,520 --> 00:25:19,070
both and for the next release we're

00:25:17,029 --> 00:25:22,279
going to have to just make sure that

00:25:19,070 --> 00:25:24,320
when anyone fixes of e to bug we fix the

00:25:22,279 --> 00:25:26,120
v3 that's actually been an issue

00:25:24,320 --> 00:25:29,450
throughout the development cycle as

00:25:26,120 --> 00:25:31,580
we've put these these ports in we've had

00:25:29,450 --> 00:25:33,770
bug fixes come into the v2 while we've

00:25:31,580 --> 00:25:35,360
been trying to get the v3 version

00:25:33,770 --> 00:25:38,990
committed and we've had to do it

00:25:35,360 --> 00:25:41,090
manually I think once everything's

00:25:38,990 --> 00:25:43,250
landed in terms of extensions will just

00:25:41,090 --> 00:25:45,679
tell all the reviewers that if you see

00:25:43,250 --> 00:25:48,529
anything modified for V to make sure

00:25:45,679 --> 00:25:52,360
they make a change to v3 as well and

00:25:48,529 --> 00:25:52,360
we'll catch her there yeah

00:25:52,370 --> 00:25:59,550
so that experience that nightmare behind

00:25:55,320 --> 00:26:02,160
you would do it the same way again or

00:25:59,550 --> 00:26:05,190
would you you know do the work to have a

00:26:02,160 --> 00:26:07,380
single source and migrate and blood my

00:26:05,190 --> 00:26:10,710
feeling is still that a single source

00:26:07,380 --> 00:26:14,520
would be much much more painful because

00:26:10,710 --> 00:26:17,010
you'd have to that the changes i would

00:26:14,520 --> 00:26:19,410
have to make in terms of you know

00:26:17,010 --> 00:26:22,050
extension names changing the format of

00:26:19,410 --> 00:26:24,660
how we return data we'd have a whole lot

00:26:22,050 --> 00:26:26,760
of you know if else statements scattered

00:26:24,660 --> 00:26:29,670
throughout the code and then we when we

00:26:26,760 --> 00:26:32,010
want to throw away the v2 API that's

00:26:29,670 --> 00:26:34,110
going to be another huge job whereas

00:26:32,010 --> 00:26:35,880
currently when we throw away v2 will

00:26:34,110 --> 00:26:37,530
just remove a directory and everything

00:26:35,880 --> 00:26:41,070
will be gone and that will be much

00:26:37,530 --> 00:26:44,190
cleaner the one regret I do have is for

00:26:41,070 --> 00:26:46,050
the setup config because each extension

00:26:44,190 --> 00:26:48,330
needs to add just a single line to that

00:26:46,050 --> 00:26:50,130
file we've got a huge number of merge

00:26:48,330 --> 00:26:52,830
conflicts you know we've submitted you

00:26:50,130 --> 00:26:54,630
know 60 extensions at one time a few of

00:26:52,830 --> 00:26:57,660
them pop in and everything starts merged

00:26:54,630 --> 00:26:59,520
conflicting just on that one file in

00:26:57,660 --> 00:27:00,840
retrospect I should have said don't add

00:26:59,520 --> 00:27:03,750
that entry we'll worry about that later

00:27:00,840 --> 00:27:07,800
and just added at once and everything

00:27:03,750 --> 00:27:09,690
would have flowed in much easier yeah I

00:27:07,800 --> 00:27:11,120
didn't start out sorted we put it on the

00:27:09,690 --> 00:27:14,490
end and I thought this is really stupid

00:27:11,120 --> 00:27:16,260
I will do alphabetically and that and

00:27:14,490 --> 00:27:18,090
then it's got a bit easier but we still

00:27:16,260 --> 00:27:24,240
get lots of as it gets bigger it gets

00:27:18,090 --> 00:27:26,910
easier kind of thing yeah with the with

00:27:24,240 --> 00:27:30,390
the XML support have you considered just

00:27:26,910 --> 00:27:34,530
doing an XML shim that exists at a

00:27:30,390 --> 00:27:37,260
different entry point um rather than

00:27:34,530 --> 00:27:39,380
using content yeah that's kind of been

00:27:37,260 --> 00:27:42,660
looked at there is kind of default

00:27:39,380 --> 00:27:44,430
xmlserializer deserializer that's often

00:27:42,660 --> 00:27:46,200
used and then there's some cases where

00:27:44,430 --> 00:27:49,860
that doesn't quite work and see you need

00:27:46,200 --> 00:27:54,630
a special case it there's talk of moving

00:27:49,860 --> 00:27:56,580
to peak and w SME instead of wsgi and

00:27:54,630 --> 00:27:58,290
I've been told that does all

00:27:56,580 --> 00:28:02,160
automatically for us so we won't need to

00:27:58,290 --> 00:28:04,559
worry about it but we try to squeeze

00:28:02,160 --> 00:28:07,679
that move from wsgi and to

00:28:04,559 --> 00:28:10,200
pecan in this kind of Havana development

00:28:07,679 --> 00:28:11,759
cycle but it just wouldn't fit and this

00:28:10,200 --> 00:28:14,519
is the kind of thing that we need to do

00:28:11,759 --> 00:28:18,570
or within one release otherwise it's a

00:28:14,519 --> 00:28:23,070
bit worthless so eventually there'll be

00:28:18,570 --> 00:28:25,080
a v4 release and we'll move to PK and WS

00:28:23,070 --> 00:28:32,820
MA and that should clean up some of the

00:28:25,080 --> 00:28:34,980
issues for us i guess i can ask a

00:28:32,820 --> 00:28:37,649
question with the double maintenance

00:28:34,980 --> 00:28:38,759
problem with v2 and v3 API new updated

00:28:37,649 --> 00:28:40,169
have you thought about making any

00:28:38,759 --> 00:28:45,960
changes to the continuous integration

00:28:40,169 --> 00:28:48,860
infrastructure to make that easier to

00:28:45,960 --> 00:28:53,009
pick up issues or two so for example

00:28:48,860 --> 00:28:55,679
make a tag a car impact for commit

00:28:53,009 --> 00:28:59,190
messages so if that if you see someone

00:28:55,679 --> 00:29:02,490
changing a slash of e to file and there

00:28:59,190 --> 00:29:06,809
isn't a slash v3 file changed then yeah

00:29:02,490 --> 00:29:09,570
that's interesting we could we could

00:29:06,809 --> 00:29:11,700
perhaps have something in the gate which

00:29:09,570 --> 00:29:13,139
looks for a change to certain files

00:29:11,700 --> 00:29:14,639
because we can just look in a directory

00:29:13,139 --> 00:29:17,369
if anyone changes anything in there

00:29:14,639 --> 00:29:18,690
there must be a change in v3 I have

00:29:17,369 --> 00:29:20,460
never talked to the infrastructure guys

00:29:18,690 --> 00:29:22,409
to see whether we can do that because

00:29:20,460 --> 00:29:24,179
it's a bit hard to keep up with all the

00:29:22,409 --> 00:29:26,519
reviews flying through I try to keep an

00:29:24,179 --> 00:29:33,899
eye out for them but an automated system

00:29:26,519 --> 00:29:35,999
would be much better um so you mentioned

00:29:33,899 --> 00:29:37,470
at the start that some of the issues

00:29:35,999 --> 00:29:39,929
that you were trying to fix were things

00:29:37,470 --> 00:29:42,149
like puts not being item potent or thing

00:29:39,929 --> 00:29:43,799
Lynette so while you may have gone

00:29:42,149 --> 00:29:45,330
through and fixed all the bugs yourself

00:29:43,799 --> 00:29:49,679
in v3 is there anything that you've done

00:29:45,330 --> 00:29:51,119
to stop this from occurring not really

00:29:49,679 --> 00:29:54,029
we're going to have to rely on much

00:29:51,119 --> 00:29:55,559
better reviews going through one thing

00:29:54,029 --> 00:29:57,809
that's part of the documentation which

00:29:55,559 --> 00:29:59,639
we want to do is to write some really

00:29:57,809 --> 00:30:02,850
good documentation on how to write an

00:29:59,639 --> 00:30:05,519
extension for Nova most of the people I

00:30:02,850 --> 00:30:07,980
spoken to her who have written extension

00:30:05,519 --> 00:30:10,409
have said and like me just went in there

00:30:07,980 --> 00:30:12,570
I'll just get an existing extension and

00:30:10,409 --> 00:30:14,970
look at what they do and cut and paste

00:30:12,570 --> 00:30:16,889
it and the problem with that has all

00:30:14,970 --> 00:30:17,700
that has done is propagate bad habits or

00:30:16,889 --> 00:30:20,370
misunderstand

00:30:17,700 --> 00:30:23,549
Thanks beginning better reviews in the

00:30:20,370 --> 00:30:26,429
process would definitely help yep it

00:30:23,549 --> 00:30:28,620
begs the question for me about change

00:30:26,429 --> 00:30:30,570
management in OpenStack in general and

00:30:28,620 --> 00:30:32,789
have there been discussions at a higher

00:30:30,570 --> 00:30:35,370
little higher order of abstraction about

00:30:32,789 --> 00:30:39,149
this kind of issue in the wider context

00:30:35,370 --> 00:30:40,590
of OpenStack in in general are you

00:30:39,149 --> 00:30:43,830
familiar with how the change management

00:30:40,590 --> 00:30:46,649
works in OpenStack only only vaguely I

00:30:43,830 --> 00:30:49,019
think wouldn't wouldn't hurt to wraps go

00:30:46,649 --> 00:30:53,549
through that I really like the garret

00:30:49,019 --> 00:30:55,529
system basically the the changes you

00:30:53,549 --> 00:30:57,570
make the changes in get you do a git

00:30:55,529 --> 00:30:59,929
review it pushes up you can see it on

00:30:57,570 --> 00:31:03,480
our website I don't know whether I can

00:30:59,929 --> 00:31:07,309
might be able to show it to you all you

00:31:03,480 --> 00:31:07,309
have a session about this after it's ok

00:31:08,690 --> 00:31:13,710
ok I'll leave it to I'll leave that to

00:31:11,340 --> 00:31:18,240
then but it's a really nice process no

00:31:13,710 --> 00:31:19,679
no so for those who didn't hear Roberts

00:31:18,240 --> 00:31:21,419
comments there's actually going to be a

00:31:19,679 --> 00:31:23,789
walkthrough of the change management in

00:31:21,419 --> 00:31:26,720
OpenStack in the introduction to

00:31:23,789 --> 00:31:31,500
OpenStack development later today yeah

00:31:26,720 --> 00:31:34,169
and basically anyone current of you can

00:31:31,500 --> 00:31:37,950
review changes on the website but only

00:31:34,169 --> 00:31:41,399
the core developers can approve any need

00:31:37,950 --> 00:31:44,580
two cores to approve it I think as we

00:31:41,399 --> 00:31:47,039
get more experience in rising rest ap is

00:31:44,580 --> 00:31:50,010
and API extensions will all get better

00:31:47,039 --> 00:31:53,039
reviews out of it I think a lot of the

00:31:50,010 --> 00:31:55,320
problems although it's called v2 it v1

00:31:53,039 --> 00:31:58,049
from what I can tell was really really

00:31:55,320 --> 00:32:00,480
small so v2 was really v1 and there was

00:31:58,049 --> 00:32:02,309
a lot of inexperience there in how to

00:32:00,480 --> 00:32:05,700
write ap is and what they should look

00:32:02,309 --> 00:32:07,529
like these days I'm seeing of the stuff

00:32:05,700 --> 00:32:10,289
even we're putting in we're getting

00:32:07,529 --> 00:32:12,120
really good reviews on kind of no that's

00:32:10,289 --> 00:32:14,850
not the right way to do an arrest format

00:32:12,120 --> 00:32:16,769
you should be doing it like this so I

00:32:14,850 --> 00:32:19,700
think with more experience it'll end up

00:32:16,769 --> 00:32:19,700
being better this time around

00:32:22,460 --> 00:32:27,360
maybe this is something else that you'll

00:32:25,500 --> 00:32:31,860
discuss in the session later but how do

00:32:27,360 --> 00:32:33,810
you enforce API compatibility oh they're

00:32:31,860 --> 00:32:36,050
just lots of tests or do you have a spec

00:32:33,810 --> 00:32:39,470
that you validate something so we have

00:32:36,050 --> 00:32:42,690
when you submit a change to OpenStack

00:32:39,470 --> 00:32:44,670
really any change not just API ones you

00:32:42,690 --> 00:32:47,160
expected to submit a unit test as well

00:32:44,670 --> 00:32:50,340
for the behavior which you've added so

00:32:47,160 --> 00:32:53,460
that's the first check the second one is

00:32:50,340 --> 00:32:55,440
the integration test through Tempest and

00:32:53,460 --> 00:32:58,170
that actually you know starts up a

00:32:55,440 --> 00:33:02,010
proper cloud and starts running tests

00:32:58,170 --> 00:33:03,540
against the cloud itself and that's why

00:33:02,010 --> 00:33:05,520
I want better coverage through tempest

00:33:03,540 --> 00:33:08,400
and that enforces that has picked up

00:33:05,520 --> 00:33:09,900
issues where people have got that return

00:33:08,400 --> 00:33:11,370
codes wrong I think we should just fix

00:33:09,900 --> 00:33:13,710
it and they try and put a change through

00:33:11,370 --> 00:33:16,200
and then it fails the tempest test so we

00:33:13,710 --> 00:33:18,000
go no you can't change that because the

00:33:16,200 --> 00:33:26,820
AP art you can't change the API like

00:33:18,000 --> 00:33:29,400
that there's no automated generation of

00:33:26,820 --> 00:33:33,960
tests at all it relies on people writing

00:33:29,400 --> 00:33:36,260
tests for it so I think potentially

00:33:33,960 --> 00:33:39,230
related to the one of earlier questions

00:33:36,260 --> 00:33:41,640
not so much the code level review

00:33:39,230 --> 00:33:45,840
processes but you know the higher-level

00:33:41,640 --> 00:33:47,190
governance things of like saying okay we

00:33:45,840 --> 00:33:50,730
need to do a new backwards incompatible

00:33:47,190 --> 00:33:53,370
version of this API deciding when is it

00:33:50,730 --> 00:33:56,130
okay to drop the old version of the API

00:33:53,370 --> 00:34:00,650
yeah because as open stack grows there's

00:33:56,130 --> 00:34:04,130
just going to be a heck of a lot of

00:34:00,650 --> 00:34:06,720
stuff depending on these api yes the

00:34:04,130 --> 00:34:09,240
Linux has its API stability guarantee

00:34:06,720 --> 00:34:12,690
yes ABI stability guarantee here just

00:34:09,240 --> 00:34:14,730
how does that high level work my

00:34:12,690 --> 00:34:16,320
understanding is that for these api's we

00:34:14,730 --> 00:34:18,300
need to keep them for at least one

00:34:16,320 --> 00:34:20,520
release cycle I wouldn't be surprised if

00:34:18,300 --> 00:34:23,280
it goes for longer than that so that's

00:34:20,520 --> 00:34:27,179
why i'm saying you know havana will have

00:34:23,280 --> 00:34:29,310
v2 and v3 so at the very earliest still

00:34:27,179 --> 00:34:31,169
be ice house before we can deprecated

00:34:29,310 --> 00:34:33,419
but that'll be a decision which will

00:34:31,169 --> 00:34:34,470
have to be made at a higher technical

00:34:33,419 --> 00:34:36,389
level you

00:34:34,470 --> 00:34:38,700
discussions on the mailing list I assume

00:34:36,389 --> 00:34:40,139
that the technical board will or have a

00:34:38,700 --> 00:34:42,119
look at that as well did you want to

00:34:40,139 --> 00:34:44,399
yeah so just adding it is kind of a

00:34:42,119 --> 00:34:46,050
maturity thing so at the moment if you

00:34:44,399 --> 00:34:48,840
look at the bunt Oh a bunch of does

00:34:46,050 --> 00:34:50,280
release every six months and you can go

00:34:48,840 --> 00:34:52,440
from release to release if you look at

00:34:50,280 --> 00:34:55,830
fedora I think it's six months as well

00:34:52,440 --> 00:34:57,660
and long term support releases that run

00:34:55,830 --> 00:35:00,150
for years so there's a problem with

00:34:57,660 --> 00:35:01,349
OpenStack OpenStack also does six months

00:35:00,150 --> 00:35:04,500
compared to bloody from relates to

00:35:01,349 --> 00:35:07,380
release you can't skip a release of

00:35:04,500 --> 00:35:09,510
OpenStack when you upgrade so if you

00:35:07,380 --> 00:35:11,849
were running if and you want to get to H

00:35:09,510 --> 00:35:13,920
you have to install G and run all of the

00:35:11,849 --> 00:35:17,760
migration scripts whatever they look

00:35:13,920 --> 00:35:19,020
like 4G before you can install H this

00:35:17,760 --> 00:35:20,460
makes it tricky for people who are

00:35:19,020 --> 00:35:22,170
looking at you know a five-year support

00:35:20,460 --> 00:35:24,030
cycle because they have to guarantee

00:35:22,170 --> 00:35:25,650
that no customer ever stays on the same

00:35:24,030 --> 00:35:28,410
version for a year because that would

00:35:25,650 --> 00:35:30,990
mean they were trying to skip so there's

00:35:28,410 --> 00:35:32,670
a disconnect between one of the

00:35:30,990 --> 00:35:35,640
distribution communities that surrounds

00:35:32,670 --> 00:35:39,500
OpenStack the Linux vendors specifically

00:35:35,640 --> 00:35:43,140
and open Stax own model about how you

00:35:39,500 --> 00:35:44,790
evolve and grow these api's and I think

00:35:43,140 --> 00:35:47,640
that's coming to a head I think it's

00:35:44,790 --> 00:35:51,900
going to hit some fairly of show so

00:35:47,640 --> 00:35:53,250
vibrant discussions in in Hong Kong and

00:35:51,900 --> 00:35:55,530
I don't know exactly what's going to

00:35:53,250 --> 00:35:58,440
look back I mean my perspective I used

00:35:55,530 --> 00:36:00,630
to be at a Linux vendor and now not and

00:35:58,440 --> 00:36:02,460
I'm like let's stop doing releases let's

00:36:00,630 --> 00:36:04,859
just push everything run shrunk make

00:36:02,460 --> 00:36:07,619
trunk stable make everyone happy with it

00:36:04,859 --> 00:36:10,619
and and gracefully get clean up the code

00:36:07,619 --> 00:36:13,200
as we go but that's actually quite a

00:36:10,619 --> 00:36:15,270
hard sell so it's going to be

00:36:13,200 --> 00:36:21,720
interesting I think Tim wanted add some

00:36:15,270 --> 00:36:23,730
stuff there yes speaking as somebody who

00:36:21,720 --> 00:36:27,230
produces an enterprise linux distro

00:36:23,730 --> 00:36:30,050
which has multi years of support and

00:36:27,230 --> 00:36:33,960
service packs that happen occasionally

00:36:30,050 --> 00:36:37,770
lining up a six-month upstream release

00:36:33,960 --> 00:36:40,530
cycle with like a year-long development

00:36:37,770 --> 00:36:42,260
cycle and 18 months of support and then

00:36:40,530 --> 00:36:45,800
more support for

00:36:42,260 --> 00:36:50,220
customers with more money and it's

00:36:45,800 --> 00:36:53,100
interesting so tip out how are you going

00:36:50,220 --> 00:36:55,080
to be handling that with you know Havana

00:36:53,100 --> 00:36:57,420
coming out currently at your based on

00:36:55,080 --> 00:37:02,280
grizzly and then that's a really good

00:36:57,420 --> 00:37:04,140
question and we've actually we've got an

00:37:02,280 --> 00:37:05,880
Essex release out the Souza cloud one

00:37:04,140 --> 00:37:10,490
product at the moment which is the one

00:37:05,880 --> 00:37:13,920
that we support on sleds Is Essex and

00:37:10,490 --> 00:37:15,840
the next one that's coming out not sure

00:37:13,920 --> 00:37:22,470
if it got officially announced which

00:37:15,840 --> 00:37:26,760
OpenStack we're using better a good one

00:37:22,470 --> 00:37:28,500
good one it and I believe from that good

00:37:26,760 --> 00:37:31,320
one there will be a nice ability to

00:37:28,500 --> 00:37:33,180
upgrade to an even better one later I'm

00:37:31,320 --> 00:37:35,100
just a little bit uncertain exactly what

00:37:33,180 --> 00:37:43,320
the step is between the current one and

00:37:35,100 --> 00:37:45,540
the next good one that's happening so do

00:37:43,320 --> 00:37:51,950
we have to be back for migrations um I

00:37:45,540 --> 00:37:51,950
don't know actually yeah sorry

00:37:55,970 --> 00:38:09,050
your best bottle is really good they're

00:37:59,359 --> 00:38:12,730
about 10 years behind that yeah all

00:38:09,050 --> 00:38:12,730
the more reason to come to Hong Kong yes

00:38:14,349 --> 00:38:23,090
any further questions no further

00:38:18,950 --> 00:38:25,849
questions specifically for Chris but we

00:38:23,090 --> 00:38:29,599
do have about 15 minutes before lunch so

00:38:25,849 --> 00:38:31,070
we can if the audience permits it open

00:38:29,599 --> 00:38:32,960
up to more broader questions about

00:38:31,070 --> 00:38:35,210
OpenStack and just kind of do a bit more

00:38:32,960 --> 00:38:39,560
impromptu Q&A does that sound

00:38:35,210 --> 00:38:41,060
interesting yes cool are our technical

00:38:39,560 --> 00:38:42,680
experts ready to get hammered with

00:38:41,060 --> 00:38:49,040
random questions about everything

00:38:42,680 --> 00:38:51,280
through with OpenStack blank looks who's

00:38:49,040 --> 00:38:51,280
first

00:38:54,660 --> 00:38:59,710
so mine's not as much a generic question

00:38:57,880 --> 00:39:02,859
as a question about the previous talk

00:38:59,710 --> 00:39:06,010
you were talking about when you do mic

00:39:02,859 --> 00:39:07,270
testing the migration step between the

00:39:06,010 --> 00:39:08,500
previous versions of the next version is

00:39:07,270 --> 00:39:11,680
that the previous version of trunk with

00:39:08,500 --> 00:39:24,250
the previous you know six-month release

00:39:11,680 --> 00:39:26,200
Oh both so the the current focus of

00:39:24,250 --> 00:39:29,319
triple o is deploying trunk and only

00:39:26,200 --> 00:39:30,520
trunk and that's because of this you

00:39:29,319 --> 00:39:32,140
know when you get into release as you

00:39:30,520 --> 00:39:34,359
start looking at how do you move between

00:39:32,140 --> 00:39:35,890
releases and that she gets it's not just

00:39:34,359 --> 00:39:38,170
a little bit more complex it's quite a

00:39:35,890 --> 00:39:40,780
bit more complex but I think our scope

00:39:38,170 --> 00:39:42,579
is going to grow because there's enough

00:39:40,780 --> 00:39:44,859
people interested in how we're deploying

00:39:42,579 --> 00:39:46,540
but who don't want to deploy trunk that

00:39:44,859 --> 00:39:49,270
we either need to cut them off and say

00:39:46,540 --> 00:39:51,880
go do it somewhere else or yes come play

00:39:49,270 --> 00:39:55,990
in our centered and work with them so

00:39:51,880 --> 00:39:57,339
what I meant was you have some version

00:39:55,990 --> 00:39:59,349
of code out there and you have a new

00:39:57,339 --> 00:40:01,240
version of code out there and the may or

00:39:59,349 --> 00:40:04,240
may not be database migrations they may

00:40:01,240 --> 00:40:06,640
or may not be data file or schema

00:40:04,240 --> 00:40:10,420
migrations or just configuration

00:40:06,640 --> 00:40:12,970
migrations to turn on like imagine

00:40:10,420 --> 00:40:15,430
you've got a versioned API on your Revit

00:40:12,970 --> 00:40:18,210
bus and you're sending messages with

00:40:15,430 --> 00:40:20,500
version I'd know 150 or something and

00:40:18,210 --> 00:40:23,760
now the new code base is going to send

00:40:20,500 --> 00:40:26,819
them with 152 is that going to play well

00:40:23,760 --> 00:40:28,750
is the upgrade going to is the

00:40:26,819 --> 00:40:30,940
orchestration of the upgrade going to

00:40:28,750 --> 00:40:33,460
upgrade nodes and the right order such

00:40:30,940 --> 00:40:36,670
that the messages are only received by

00:40:33,460 --> 00:40:38,559
things that can handle them and or if

00:40:36,670 --> 00:40:40,150
you're expecting messages to be received

00:40:38,559 --> 00:40:41,890
it can't be handled will they the code

00:40:40,150 --> 00:40:44,980
downgrade properly and gracefully and

00:40:41,890 --> 00:40:47,230
that kind of thing so it's not about six

00:40:44,980 --> 00:40:49,869
month gaps it's about one commits gaps

00:40:47,230 --> 00:40:52,270
so the I guess there's the thing I

00:40:49,869 --> 00:40:55,630
skipped it which is that there's if a

00:40:52,270 --> 00:40:59,380
risk assessment right what is the risk

00:40:55,630 --> 00:41:03,280
of applying a five-line code change to a

00:40:59,380 --> 00:41:06,809
project okay is it half the risk of

00:41:03,280 --> 00:41:06,809
applying a 10 line coach

00:41:14,160 --> 00:41:18,160
okay Tim just said the two character

00:41:16,510 --> 00:41:20,350
change brokers whole file system once

00:41:18,160 --> 00:41:22,119
and that the risk is higher when it's

00:41:20,350 --> 00:41:23,710
small because you can cavalier and I

00:41:22,119 --> 00:41:25,990
think you know there's some merit there

00:41:23,710 --> 00:41:27,790
but i think the other end it's probably

00:41:25,990 --> 00:41:30,730
a you curve right there's a sweet spot

00:41:27,790 --> 00:41:34,030
somewhere where the risk / change is the

00:41:30,730 --> 00:41:35,920
lowest per lines of code changed but

00:41:34,030 --> 00:41:37,150
it's not linear it's not twice the risk

00:41:35,920 --> 00:41:38,560
when you get double the number of lines

00:41:37,150 --> 00:41:41,500
of code it's more than twice the risk

00:41:38,560 --> 00:41:43,510
because you have the risk of the two

00:41:41,500 --> 00:41:44,650
separate changes interacting and you

00:41:43,510 --> 00:41:45,610
don't know that either of them is

00:41:44,650 --> 00:41:47,950
correct you because you're not actually

00:41:45,610 --> 00:41:50,050
raining them in production so the reason

00:41:47,950 --> 00:41:52,570
we want to run track isn't to run trunk

00:41:50,050 --> 00:41:55,690
and then bring in thousands of lines of

00:41:52,570 --> 00:41:58,270
code in each deploy we want to run trunk

00:41:55,690 --> 00:42:00,670
and minimize the Delta try and find that

00:41:58,270 --> 00:42:02,980
sweet spot keep on top of it and then

00:42:00,670 --> 00:42:05,830
you know kind of surf along and have a

00:42:02,980 --> 00:42:08,320
low risk of change and quick roll backs

00:42:05,830 --> 00:42:10,570
and that's kind of incompatible with

00:42:08,320 --> 00:42:14,190
again it's another reason not to do six

00:42:10,570 --> 00:42:16,090
monthly or or yearly code drops and

00:42:14,190 --> 00:42:19,230
that's why I think we need to offer

00:42:16,090 --> 00:42:19,230
discussions about that

00:42:21,410 --> 00:42:25,980
so the reason the web development world

00:42:23,910 --> 00:42:27,150
has moved a lot of the biggest web

00:42:25,980 --> 00:42:29,520
properties are doing continuous

00:42:27,150 --> 00:42:31,040
deployment is because they have the test

00:42:29,520 --> 00:42:35,099
infrastructure in place to support it

00:42:31,040 --> 00:42:36,630
and it means that yes occasionally you

00:42:35,099 --> 00:42:38,309
will push a mistake live but you can

00:42:36,630 --> 00:42:41,160
also really trivially push the fixed

00:42:38,309 --> 00:42:45,390
life and so you mean time to fix is

00:42:41,160 --> 00:42:47,400
really really fast as well yeah time to

00:42:45,390 --> 00:42:49,440
time to detect time to detect

00:42:47,400 --> 00:42:52,530
something's gone wrong and time to to

00:42:49,440 --> 00:42:56,640
fix it are wonderful but to actually do

00:42:52,530 --> 00:42:58,680
that you need amazing metrics excellent

00:42:56,640 --> 00:43:00,960
automated testing and excellent

00:42:58,680 --> 00:43:04,170
deployment we've done that at the

00:43:00,960 --> 00:43:05,849
software as a service layer that's it's

00:43:04,170 --> 00:43:08,460
not a solved problem but there are

00:43:05,849 --> 00:43:11,069
solutions out there and they work pretty

00:43:08,460 --> 00:43:13,859
well and the a lot of the big web

00:43:11,069 --> 00:43:16,349
properties use them doing that at the

00:43:13,859 --> 00:43:18,839
infrastructure layer would be an amazing

00:43:16,349 --> 00:43:21,210
achievement and that's what this is

00:43:18,839 --> 00:43:22,230
aimed at and it does completely change

00:43:21,210 --> 00:43:25,500
the way you approach your infrastructure

00:43:22,230 --> 00:43:28,040
but it'll be a nice place to get to but

00:43:25,500 --> 00:43:28,040
we're not there yet

00:43:32,390 --> 00:43:38,190
three I like mystery okay I can start

00:43:36,450 --> 00:43:40,260
seeing some people getting a little bit

00:43:38,190 --> 00:43:41,730
restless now do we want to keep going

00:43:40,260 --> 00:43:45,140
for some more questions or do we want to

00:43:41,730 --> 00:43:45,140
break 10 minutes early for lunch okay

00:43:45,440 --> 00:43:51,240
I'm that that's you know like dead

00:43:48,960 --> 00:43:52,920
neutral probably a vote for lunch so we

00:43:51,240 --> 00:43:55,410
can continue this in the afternoon and

00:43:52,920 --> 00:43:57,660
feel free to grab everyone at lunch

00:43:55,410 --> 00:44:00,950
including our sponsor of terror thanks

00:43:57,660 --> 00:44:00,950

YouTube URL: https://www.youtube.com/watch?v=cXQ6abwqjg0


