Title: OpenBMC: Boot your server with Python
Publication date: 2016-08-16
Playlist: IoT 2016 (Miniconf)
Description: 
	Joel Stanley
https://2016.pycon-au.org/schedule/87/view_talk
OpenBMC is an open source software project that replaces the Baseboard Management Controller firmware that is responsible for turning off and on, and managing the health of your server. The core of the software that performs these functions is implemented in Python, allowing easy to read, modify and debug firmware that is traditionally not accessible to a user. 

This talk will cover the architecture of the OpenBMC and demonstrate how easy it is to support a new server platform by writing a few lines of Python.
Captions: 
	00:00:00,030 --> 00:00:04,799
thanks very much sir my name is Joel I'm

00:00:03,000 --> 00:00:08,670
a bit of an impostor here I spend my day

00:00:04,799 --> 00:00:09,780
writing see and and firmware and whatnot

00:00:08,670 --> 00:00:11,219
but I'm here to talk to you about a

00:00:09,780 --> 00:00:14,549
project I've been working a little while

00:00:11,219 --> 00:00:16,410
but first a little bit about myself so I

00:00:14,549 --> 00:00:17,970
serve you lecture engineering at the low

00:00:16,410 --> 00:00:20,910
level I love taught myself how to

00:00:17,970 --> 00:00:24,750
program and these days I do that's a job

00:00:20,910 --> 00:00:26,630
which is pretty fun I think I'm a free

00:00:24,750 --> 00:00:28,830
software person so I spend lots of time

00:00:26,630 --> 00:00:30,990
hacking on various open source and free

00:00:28,830 --> 00:00:33,570
software projects the the project that's

00:00:30,990 --> 00:00:35,040
recording our conference today is it's a

00:00:33,570 --> 00:00:36,860
project that was that of my friend Tim

00:00:35,040 --> 00:00:39,960
and I've written a bit of code for that

00:00:36,860 --> 00:00:42,870
and so I enjoy playing at all levels of

00:00:39,960 --> 00:00:44,520
the stack so like I said these days I

00:00:42,870 --> 00:00:48,480
work on producing open source firmware

00:00:44,520 --> 00:00:49,739
for big big machines but also really

00:00:48,480 --> 00:00:51,449
little ones which is I'm going to talk

00:00:49,739 --> 00:00:54,449
to you about today so I can work out my

00:00:51,449 --> 00:00:58,620
slides right so I like playing with

00:00:54,449 --> 00:01:00,000
hardware a little smattering of the

00:00:58,620 --> 00:01:01,680
various projects oh I've got some some

00:01:00,000 --> 00:01:04,920
Odense views up there we've heard a lot

00:01:01,680 --> 00:01:07,560
about the esp8266 today I enjoy playing

00:01:04,920 --> 00:01:12,390
with those FPGA is sending little

00:01:07,560 --> 00:01:14,549
balloon payloads up into new space that

00:01:12,390 --> 00:01:17,280
was running chromium on the BeagleBoard

00:01:14,549 --> 00:01:19,920
back in 2009 for the very first chrome

00:01:17,280 --> 00:01:21,420
port arm and a little bit old PC work

00:01:19,920 --> 00:01:23,610
which is where I started writing Python

00:01:21,420 --> 00:01:27,750
at One Laptop Per child in Boston back

00:01:23,610 --> 00:01:31,320
in 2007 so that was a little laptop the

00:01:27,750 --> 00:01:33,900
children that ran an entire Python stack

00:01:31,320 --> 00:01:37,740
for the UI and everything so a little

00:01:33,900 --> 00:01:39,840
bit of Python heritage there these days

00:01:37,740 --> 00:01:41,850
I play with slightly bigger machines so

00:01:39,840 --> 00:01:44,700
to the left there that's a single socket

00:01:41,850 --> 00:01:48,540
power rate it's a service CPU made with

00:01:44,700 --> 00:01:51,329
IBM and so today here with we're here to

00:01:48,540 --> 00:01:53,790
talk a little bit about the the BMC but

00:01:51,329 --> 00:01:56,430
the BMC's job is essentially to enable

00:01:53,790 --> 00:01:58,909
the big processor so the big process of

00:01:56,430 --> 00:02:02,490
sitting there with a terabyte of RAM and

00:01:58,909 --> 00:02:03,869
116 cores and I got a little arm sitting

00:02:02,490 --> 00:02:05,939
next to it with this half a gig of ram

00:02:03,869 --> 00:02:09,119
and a single core but uh each has its

00:02:05,939 --> 00:02:12,390
own job and they're just as important to

00:02:09,119 --> 00:02:13,819
make sure the system functions so what's

00:02:12,390 --> 00:02:19,189
a BMC you may find yourself

00:02:13,819 --> 00:02:20,659
asking so you have a computer and these

00:02:19,189 --> 00:02:22,639
days to make your computer run you need

00:02:20,659 --> 00:02:24,230
another computer and often that computer

00:02:22,639 --> 00:02:27,290
itself has no computer inside of it and

00:02:24,230 --> 00:02:29,510
it's Turtles all the way down so a BMC

00:02:27,290 --> 00:02:31,909
is a little embedded Linux computer that

00:02:29,510 --> 00:02:35,120
sits on the motherboard of your greater

00:02:31,909 --> 00:02:36,739
server or might be desktop and provides

00:02:35,120 --> 00:02:39,170
management and control functionality for

00:02:36,739 --> 00:02:41,000
that system

00:02:39,170 --> 00:02:44,510
so BMC stands for base board management

00:02:41,000 --> 00:02:45,739
controller service has them so that when

00:02:44,510 --> 00:02:47,269
they're sitting in a rack off in a data

00:02:45,739 --> 00:02:49,639
center whether that data centers off the

00:02:47,269 --> 00:02:52,040
middle of Utah or if it's next year

00:02:49,639 --> 00:02:54,650
office you can still sit there and power

00:02:52,040 --> 00:02:57,319
cycle it you can type stuff into it you

00:02:54,650 --> 00:02:58,219
can hide reboot it when it crashes if

00:02:57,319 --> 00:03:00,019
you're installing an operating system

00:02:58,219 --> 00:03:02,569
that needs a CD Drive you can emulate a

00:03:00,019 --> 00:03:07,219
CD drive all these kinds of things and

00:03:02,569 --> 00:03:11,209
they generally come with a firmware blob

00:03:07,219 --> 00:03:13,069
that's made by a bios manufacturer very

00:03:11,209 --> 00:03:15,260
similar to maybe like your little router

00:03:13,069 --> 00:03:17,000
at home that provides you Wi-Fi it's

00:03:15,260 --> 00:03:19,370
it's going to be like an ancient version

00:03:17,000 --> 00:03:21,290
of Linux with some buggy here's a space

00:03:19,370 --> 00:03:27,439
that's full of security holes an

00:03:21,290 --> 00:03:29,269
updatable and then pretty opaque so to

00:03:27,439 --> 00:03:32,030
interact with this thing there's there's

00:03:29,269 --> 00:03:34,430
a two major ways really there'll be the

00:03:32,030 --> 00:03:36,829
the web interface that look like it was

00:03:34,430 --> 00:03:39,019
designed in the 80s and there'll be IPMI

00:03:36,829 --> 00:03:44,780
an interface that was designed in the

00:03:39,019 --> 00:03:46,280
80s right and so it's good to slide so

00:03:44,780 --> 00:03:48,620
so these two ways of interacting with it

00:03:46,280 --> 00:03:52,099
they're not the best we can do better

00:03:48,620 --> 00:03:54,169
these days and that was one of the

00:03:52,099 --> 00:03:56,150
motivations for me and my colleagues who

00:03:54,169 --> 00:03:59,750
work on on firmware and making service

00:03:56,150 --> 00:04:01,069
happen to look at the alternatives it

00:03:59,750 --> 00:04:02,239
happened to be that another group of

00:04:01,069 --> 00:04:03,590
people doing the same thing over at

00:04:02,239 --> 00:04:05,689
Facebook and they create this thing

00:04:03,590 --> 00:04:06,620
called open BMC and and that's what

00:04:05,689 --> 00:04:09,889
we're going to talk to you about leh

00:04:06,620 --> 00:04:11,629
heard the idea of a free software BMC so

00:04:09,889 --> 00:04:16,969
it runs embedded Linux we've been over

00:04:11,629 --> 00:04:18,259
that few times s ISM decide the service

00:04:16,969 --> 00:04:19,789
offer our work on a day to day basis

00:04:18,259 --> 00:04:21,530
it's all open source so from that very

00:04:19,789 --> 00:04:23,240
first instruction that starts executing

00:04:21,530 --> 00:04:27,229
on your processor it's a long queue up

00:04:23,240 --> 00:04:27,680
the big kind of black eye tour that was

00:04:27,229 --> 00:04:29,060
this man

00:04:27,680 --> 00:04:30,740
processes in next to it which was

00:04:29,060 --> 00:04:35,300
running a binary blob created by some

00:04:30,740 --> 00:04:36,800
BIOS vendor so the idea of bring up the

00:04:35,300 --> 00:04:44,770
rest of the stack was was pretty

00:04:36,800 --> 00:04:46,820
attractive to to us so on the stack

00:04:44,770 --> 00:04:50,620
we've got the Linux kernel at the bottom

00:04:46,820 --> 00:04:53,780
and sitting on top of that is system D

00:04:50,620 --> 00:04:55,539
so this was a design decision made by by

00:04:53,780 --> 00:04:58,220
the people to write in the user space

00:04:55,539 --> 00:04:59,690
they think that these days a good way to

00:04:58,220 --> 00:05:04,370
write it in a better Linux system is the

00:04:59,690 --> 00:05:05,870
system D jury's out but but that's what

00:05:04,370 --> 00:05:10,009
they chose and I mean does provide it a

00:05:05,870 --> 00:05:11,780
bunch of positive features the the

00:05:10,009 --> 00:05:13,280
system itself is comprised of a bunch of

00:05:11,780 --> 00:05:14,990
little demons that they're running and

00:05:13,280 --> 00:05:16,460
so they might manage different parts of

00:05:14,990 --> 00:05:18,500
system some examples I put up there

00:05:16,460 --> 00:05:20,630
there's that the flash so the thing that

00:05:18,500 --> 00:05:23,240
stores the bias that the main server is

00:05:20,630 --> 00:05:25,580
going to be from the LEDs you know LEDs

00:05:23,240 --> 00:05:27,680
indicate status most of these machines

00:05:25,580 --> 00:05:29,930
have what this got an indicator LED so

00:05:27,680 --> 00:05:31,190
you can type some software over here and

00:05:29,930 --> 00:05:32,630
it will make the light turn on on the

00:05:31,190 --> 00:05:35,389
server so you know which one in the rack

00:05:32,630 --> 00:05:38,120
you're talking to sensors so fans

00:05:35,389 --> 00:05:40,280
temperature humidity things like this

00:05:38,120 --> 00:05:41,750
and host control that's the thing that

00:05:40,280 --> 00:05:43,520
is equivalent to pressing the on button

00:05:41,750 --> 00:05:47,270
on the front of your your desktop

00:05:43,520 --> 00:05:48,680
machine so that group of user space is

00:05:47,270 --> 00:05:50,900
something that in our project we call

00:05:48,680 --> 00:05:52,789
phosphor I was just a name that that's

00:05:50,900 --> 00:05:55,190
given to kind of encompass those bits of

00:05:52,789 --> 00:05:56,599
the code next to that we've got some

00:05:55,190 --> 00:06:00,199
more off-the-shelf common user space

00:05:56,599 --> 00:06:05,150
components ssh for doing serial Everland

00:06:00,199 --> 00:06:06,979
so doing remote console and the phosphor

00:06:05,150 --> 00:06:11,169
rest api that we use for interacting

00:06:06,979 --> 00:06:11,169
with over the network is a python rocket

00:06:11,199 --> 00:06:15,020
framework bit of software there so

00:06:14,000 --> 00:06:17,150
that's a bit of an overview of the

00:06:15,020 --> 00:06:22,849
software that's running in user space on

00:06:17,150 --> 00:06:24,770
the BMC i spoke in my talk outs tracked

00:06:22,849 --> 00:06:26,330
a little bit about be honored to bring

00:06:24,770 --> 00:06:27,470
up a machine just by writing some Python

00:06:26,330 --> 00:06:30,110
so this is a little bit of what it looks

00:06:27,470 --> 00:06:31,099
like it's probably not the best Python

00:06:30,110 --> 00:06:33,500
you've ever seen it's written by

00:06:31,099 --> 00:06:35,419
firmware guys but R so forgive them but

00:06:33,500 --> 00:06:36,500
um this is Salina describing the

00:06:35,419 --> 00:06:39,650
different states the machine is going to

00:06:36,500 --> 00:06:41,419
have as it powers on theirs it also

00:06:39,650 --> 00:06:41,900
describes where all the different GPAs

00:06:41,419 --> 00:06:42,949
are

00:06:41,900 --> 00:06:44,690
so you know where you find your power

00:06:42,949 --> 00:06:47,120
switch where you find the lead where you

00:06:44,690 --> 00:06:50,240
find the you know critical power down

00:06:47,120 --> 00:06:51,500
toggle things like this and it's a

00:06:50,240 --> 00:06:55,490
surprisingly small amount of code

00:06:51,500 --> 00:06:57,470
considering how bloated your vendor BMC

00:06:55,490 --> 00:07:00,850
might be this is a real small amount of

00:06:57,470 --> 00:07:02,870
code to describe how the system works

00:07:00,850 --> 00:07:05,479
the other thing I didn't mention on the

00:07:02,870 --> 00:07:07,639
previous slide was that all these user

00:07:05,479 --> 00:07:10,970
spacing components interact using d-bus

00:07:07,639 --> 00:07:12,979
so they sit there on the system bus and

00:07:10,970 --> 00:07:15,979
provide api is that the other little

00:07:12,979 --> 00:07:17,180
programs talk to you and a rest api at

00:07:15,979 --> 00:07:19,820
the thing we used to interact with other

00:07:17,180 --> 00:07:22,430
network is just that exposing all those

00:07:19,820 --> 00:07:23,710
device objects at rest api so over the

00:07:22,430 --> 00:07:26,630
network that way

00:07:23,710 --> 00:07:29,120
so so in theory you can can write some

00:07:26,630 --> 00:07:31,550
some user space code a little demon that

00:07:29,120 --> 00:07:32,630
exposes some d-bus interfaces and then

00:07:31,550 --> 00:07:34,370
interact with that over the network

00:07:32,630 --> 00:07:37,460
whether that might be you know providing

00:07:34,370 --> 00:07:38,660
a anyway to do updates or a wader to

00:07:37,460 --> 00:07:42,699
scrape some certain information at the

00:07:38,660 --> 00:07:45,430
system it's relatively easy to do

00:07:42,699 --> 00:07:48,320
alright so I spoke a little bit about

00:07:45,430 --> 00:07:49,910
the web interfaces this is a quote that

00:07:48,320 --> 00:07:51,650
one of my colleagues came up with when

00:07:49,910 --> 00:07:53,000
we were doing design workshop on on what

00:07:51,650 --> 00:07:56,000
we wanted the user interface to look

00:07:53,000 --> 00:07:59,260
like so that that's what you get if you

00:07:56,000 --> 00:08:01,970
search for BMC web UI on the Internet

00:07:59,260 --> 00:08:08,449
not not the pinnacle of web design in

00:08:01,970 --> 00:08:10,070
2016 so instead of having a web

00:08:08,449 --> 00:08:12,260
interface for the the first prototype of

00:08:10,070 --> 00:08:15,620
open BMC that we worked on we used a

00:08:12,260 --> 00:08:17,870
REST API so there was no no no web page

00:08:15,620 --> 00:08:20,690
you could visit we had to be able to

00:08:17,870 --> 00:08:23,060
bring up and testing using curl curls

00:08:20,690 --> 00:08:24,650
pretty cumbersome after you've there and

00:08:23,060 --> 00:08:25,880
you know use your bash history to find

00:08:24,650 --> 00:08:27,770
that logging in command for the cell

00:08:25,880 --> 00:08:31,190
balance time so you might run the write

00:08:27,770 --> 00:08:32,930
some Python so even even a C program

00:08:31,190 --> 00:08:36,200
like me can use requests to write some

00:08:32,930 --> 00:08:37,580
Python to control this server and so

00:08:36,200 --> 00:08:40,130
instead of having to go through the

00:08:37,580 --> 00:08:43,630
hoops of fire in your browser finding

00:08:40,130 --> 00:08:45,860
out what the IP is logging into the web

00:08:43,630 --> 00:08:47,680
working climbing Google with default

00:08:45,860 --> 00:08:49,580
password is you know how to log into it

00:08:47,680 --> 00:08:51,650
instead you can use write some Python

00:08:49,580 --> 00:08:53,540
and and use a nice little user space

00:08:51,650 --> 00:08:55,820
program sorry come online program check

00:08:53,540 --> 00:08:57,710
interact with it that's good if you're

00:08:55,820 --> 00:08:58,700
as a developer with one machine in the

00:08:57,710 --> 00:09:00,650
rack that you're sitting there and

00:08:58,700 --> 00:09:02,720
testing and it's also good if you've got

00:09:00,650 --> 00:09:04,300
an entire rack or entire data center of

00:09:02,720 --> 00:09:07,310
them it's a lot easier to use than

00:09:04,300 --> 00:09:09,410
clicking on web UIs and potentially

00:09:07,310 --> 00:09:15,620
easier to use even than scripting IPMI

00:09:09,410 --> 00:09:17,210
for instance so so that's an overview of

00:09:15,620 --> 00:09:19,010
kind of what we've done we want to run a

00:09:17,210 --> 00:09:21,290
modern kernel we want up-to-date user

00:09:19,010 --> 00:09:22,760
space so we can do security fixes we're

00:09:21,290 --> 00:09:24,830
gonna make it look good or at least look

00:09:22,760 --> 00:09:26,240
good the developers down the track you

00:09:24,830 --> 00:09:27,800
know there might be web your eyes but

00:09:26,240 --> 00:09:30,800
for now it's it's it looks good for

00:09:27,800 --> 00:09:32,660
developers and and make it work well so

00:09:30,800 --> 00:09:34,820
instead of tools like IBM iron which

00:09:32,660 --> 00:09:37,730
unless you've been in the scenario never

00:09:34,820 --> 00:09:39,950
heard of we use SSH for interacting with

00:09:37,730 --> 00:09:42,260
the console so this is h2 the normal is

00:09:39,950 --> 00:09:44,180
h4 and you're logged into your BMC SSH

00:09:42,260 --> 00:09:48,260
to a random high fort that happens to be

00:09:44,180 --> 00:09:50,780
2,200 and you get the host console so a

00:09:48,260 --> 00:09:51,800
lot more familiarity for sis admins who

00:09:50,780 --> 00:09:54,380
who may not come from the dollar store

00:09:51,800 --> 00:09:58,730
environment and arguably a lot better

00:09:54,380 --> 00:10:00,290
tooling a little bit a little side on

00:09:58,730 --> 00:10:01,580
the modern kernel so the reason I'm a

00:10:00,290 --> 00:10:03,470
little bit sketchy on some other Python

00:10:01,580 --> 00:10:05,900
is uh I spend most of my time doing

00:10:03,470 --> 00:10:09,020
Linux these days and one of the things

00:10:05,900 --> 00:10:11,420
about these BMC's the the system-on-chip

00:10:09,020 --> 00:10:14,030
that's used is very very common but it's

00:10:11,420 --> 00:10:17,030
an auditory set of code that some vendor

00:10:14,030 --> 00:10:19,100
in taiwan has created and so it's not

00:10:17,030 --> 00:10:20,810
the latest kernel versions it hasn't got

00:10:19,100 --> 00:10:23,660
security updates doesn't follow best

00:10:20,810 --> 00:10:25,220
practices the user space api's it

00:10:23,660 --> 00:10:29,600
exposes for controlling things are

00:10:25,220 --> 00:10:33,260
custom to that specific vendors tree and

00:10:29,600 --> 00:10:35,180
don't need generic you linux isms so so

00:10:33,260 --> 00:10:37,010
i've gone about and done a complete from

00:10:35,180 --> 00:10:39,560
scratch upstream port of this

00:10:37,010 --> 00:10:41,060
system-on-chip to linux and so the last

00:10:39,560 --> 00:10:42,830
version of linux got released has about

00:10:41,060 --> 00:10:44,330
fifty percent support by the end of the

00:10:42,830 --> 00:10:46,640
year will have it completely supported

00:10:44,330 --> 00:10:48,620
and that's useful not just for our open

00:10:46,640 --> 00:10:49,880
BMC project although kinds of other

00:10:48,620 --> 00:10:51,320
people can come along and do it there's

00:10:49,880 --> 00:10:52,370
some guy from Russia who popped up when

00:10:51,320 --> 00:10:54,980
I'm mailing lists the other day saying

00:10:52,370 --> 00:10:59,780
hey I've created open BMC using open w

00:10:54,980 --> 00:11:02,450
ID and and you know with using it to run

00:10:59,780 --> 00:11:03,470
this data center here and so yeah cool

00:11:02,450 --> 00:11:06,050
thanks

00:11:03,470 --> 00:11:07,970
not only just do i benefit but also he

00:11:06,050 --> 00:11:11,380
benefits because now everyone's running

00:11:07,970 --> 00:11:11,380
some secure to date code

00:11:11,930 --> 00:11:19,070
so a few minutes on the future of where

00:11:14,540 --> 00:11:19,970
we're going with this one so the project

00:11:19,070 --> 00:11:22,730
I've been working on it's been a

00:11:19,970 --> 00:11:25,100
prototype open BMC implementation for a

00:11:22,730 --> 00:11:28,550
machine called barrel a barrel a is a

00:11:25,100 --> 00:11:32,420
open compute SPECT machine made by

00:11:28,550 --> 00:11:34,340
Foxconn and Rackspace and so that's a

00:11:32,420 --> 00:11:37,730
rack of them this thing's got to power

00:11:34,340 --> 00:11:41,560
eight cause it's got a su 2400 open BMC

00:11:37,730 --> 00:11:46,100
image on it and yeah it's designed for

00:11:41,560 --> 00:11:47,420
Rackspace's cloud but uh it runs a

00:11:46,100 --> 00:11:50,000
completely open-source software stack

00:11:47,420 --> 00:11:51,320
from the you know the BMC all the way

00:11:50,000 --> 00:11:54,740
through to the bios all the way through

00:11:51,320 --> 00:11:58,030
to your Linux install you put on top of

00:11:54,740 --> 00:11:58,030
it which is which is pretty cool

00:11:59,360 --> 00:12:03,200
so something I want to do personally is

00:12:01,520 --> 00:12:04,850
support the machine that I have under my

00:12:03,200 --> 00:12:06,050
desk at home a bunch of friends have

00:12:04,850 --> 00:12:08,120
pointed out to me that they've got these

00:12:06,050 --> 00:12:10,460
a speed chips inside there there are

00:12:08,120 --> 00:12:11,660
little home service and whatnot we don't

00:12:10,460 --> 00:12:13,400
currently have an image that you could

00:12:11,660 --> 00:12:16,250
use there but but that's something that

00:12:13,400 --> 00:12:17,690
could potentially be supported we're

00:12:16,250 --> 00:12:20,810
gonna do a web interface of some

00:12:17,690 --> 00:12:22,790
description there's a bunch of work from

00:12:20,810 --> 00:12:28,040
different parties involved in in making

00:12:22,790 --> 00:12:30,560
the the boot process more secure so

00:12:28,040 --> 00:12:33,260
doing trusted boot testing that the boot

00:12:30,560 --> 00:12:34,970
as its as its as it presents secure boot

00:12:33,260 --> 00:12:37,760
which is you know cryptographic

00:12:34,970 --> 00:12:39,770
verification of the the next thing

00:12:37,760 --> 00:12:42,260
you're gonna load before you load it and

00:12:39,770 --> 00:12:44,690
other security features locking down the

00:12:42,260 --> 00:12:45,890
user space all these demons can't you

00:12:44,690 --> 00:12:49,610
know they're not all running as root and

00:12:45,890 --> 00:12:51,410
and can't kind of easily prove least

00:12:49,610 --> 00:12:53,360
easy privilege escalation inside the

00:12:51,410 --> 00:12:54,440
system they're up streaming all the

00:12:53,360 --> 00:12:57,350
things this is something I'm passionate

00:12:54,440 --> 00:13:00,770
about I spend most of my day job sending

00:12:57,350 --> 00:13:02,680
code out for initially the kernel next

00:13:00,770 --> 00:13:05,420
will be you boo

00:13:02,680 --> 00:13:07,520
IP my tool various various other parts

00:13:05,420 --> 00:13:11,210
weapons the open source ecosystem that

00:13:07,520 --> 00:13:12,290
that we use and and in the future

00:13:11,210 --> 00:13:15,440
there'll be lots more hardware shipping

00:13:12,290 --> 00:13:18,290
11 BMC there's been products denounced

00:13:15,440 --> 00:13:20,420
by various people you can google for it

00:13:18,290 --> 00:13:22,010
that that describe the machines are

00:13:20,420 --> 00:13:22,500
going to build and these will have open

00:13:22,010 --> 00:13:27,600
be emceeing

00:13:22,500 --> 00:13:30,270
so that's pretty cool so that's all I

00:13:27,600 --> 00:13:31,920
had in far as distracted talk goes I

00:13:30,270 --> 00:13:33,870
wasn't sure my audience is gonna be like

00:13:31,920 --> 00:13:35,430
if we're gonna be all see fragrant's

00:13:33,870 --> 00:13:38,490
like myself probably not me apply the

00:13:35,430 --> 00:13:40,380
conference so I open up to the floor for

00:13:38,490 --> 00:13:41,540
any questions and we can we can talk

00:13:40,380 --> 00:13:43,770
about whatever you want to talk about

00:13:41,540 --> 00:13:46,080
can we just please if anybody has a

00:13:43,770 --> 00:13:53,160
question I'll run the microphone I'll

00:13:46,080 --> 00:13:54,360
put in a microphone so any questions say

00:13:53,160 --> 00:13:55,980
it like you're talking about putting up

00:13:54,360 --> 00:13:57,150
the server and so me they're saying

00:13:55,980 --> 00:13:59,130
could you maybe talk a little bit about

00:13:57,150 --> 00:14:01,350
some how this might relate just sort of

00:13:59,130 --> 00:14:04,160
embedded applications and sort of

00:14:01,350 --> 00:14:09,000
servers on a lesser scale than servers

00:14:04,160 --> 00:14:10,200
yes oh well I mean one of the one of the

00:14:09,000 --> 00:14:11,790
things I want to do with open BMC is

00:14:10,200 --> 00:14:13,560
just to test my open BMC

00:14:11,790 --> 00:14:14,850
because when I'm not working from the

00:14:13,560 --> 00:14:17,970
office so I've got to remotely control

00:14:14,850 --> 00:14:20,190
my open BMC with open BMC so I can test

00:14:17,970 --> 00:14:23,760
fields and if I crash the target

00:14:20,190 --> 00:14:25,350
I can still reboot it BMC so I'm yeah I

00:14:23,760 --> 00:14:26,970
mean there's no reason that this has got

00:14:25,350 --> 00:14:28,230
all the ingredients of being a kind of

00:14:26,970 --> 00:14:31,710
remote control remote monitoring

00:14:28,230 --> 00:14:33,720
application and that's something that's

00:14:31,710 --> 00:14:36,510
kind of once you've got a normal Linux

00:14:33,720 --> 00:14:38,070
stack on there that you can put your own

00:14:36,510 --> 00:14:39,390
software on it it can be whatever you

00:14:38,070 --> 00:14:41,280
want it to be you know you can use it

00:14:39,390 --> 00:14:42,930
volume automation or battery control or

00:14:41,280 --> 00:14:46,260
or whatever your ever it may be

00:14:42,930 --> 00:14:47,520
yeah definitely and so maybe just as a

00:14:46,260 --> 00:14:49,650
follow-up so would you say you would see

00:14:47,520 --> 00:14:51,480
this as being you'd like maybe on an

00:14:49,650 --> 00:14:52,860
embedded device you'd have open BMC and

00:14:51,480 --> 00:14:54,210
then you'd have the full Linux stack on

00:14:52,860 --> 00:14:55,470
top of that as well and to the open

00:14:54,210 --> 00:14:57,810
beams it would give you a low like a

00:14:55,470 --> 00:15:00,560
very low layer access to some of the

00:14:57,810 --> 00:15:03,000
capabilities on the board is that so so

00:15:00,560 --> 00:15:04,200
like I mean how would you say it if it

00:15:03,000 --> 00:15:05,640
if it's deployed in the server

00:15:04,200 --> 00:15:07,350
environment scenes but how would you see

00:15:05,640 --> 00:15:09,390
the architecture working on for a home

00:15:07,350 --> 00:15:11,130
automation thing or for a distributed

00:15:09,390 --> 00:15:12,570
device or something like wow I guess at

00:15:11,130 --> 00:15:14,370
its core it's just another little Linux

00:15:12,570 --> 00:15:17,660
computer and the software on top of it

00:15:14,370 --> 00:15:20,220
it's designed around collecting logs and

00:15:17,660 --> 00:15:22,320
monitoring of census because that's what

00:15:20,220 --> 00:15:24,330
a BMC does you know it collects crash

00:15:22,320 --> 00:15:25,680
logs when there's a hardware fault you

00:15:24,330 --> 00:15:27,240
make sure the sensors and the hard

00:15:25,680 --> 00:15:29,130
drives and the PCI cards are all working

00:15:27,240 --> 00:15:30,660
so if you're going to use it for some

00:15:29,130 --> 00:15:33,300
kind of remote monitoring application

00:15:30,660 --> 00:15:35,260
you could leverage all those kind of

00:15:33,300 --> 00:15:37,180
little little parts of the system

00:15:35,260 --> 00:15:38,740
to be honest at least currently it's not

00:15:37,180 --> 00:15:40,900
much more than just another embedded

00:15:38,740 --> 00:15:42,400
Linux system that happens to have some

00:15:40,900 --> 00:15:54,930
convenient ways of interacting with it

00:15:42,400 --> 00:15:57,280
and collecting data yeah thanks

00:15:54,930 --> 00:15:59,020
it's more of accuracy I'll never work

00:15:57,280 --> 00:16:03,880
with BMC boots what happens when it

00:15:59,020 --> 00:16:04,830
crashes the BMC itself crashes good

00:16:03,880 --> 00:16:07,960
question

00:16:04,830 --> 00:16:09,880
so I mean it's it's virtually felt

00:16:07,960 --> 00:16:12,760
tolerant in that you know you have

00:16:09,880 --> 00:16:14,980
watchdogs in there so so a lot lots of

00:16:12,760 --> 00:16:17,230
embedded hardware these days so I wasn't

00:16:14,980 --> 00:16:19,600
very full stop has some kind of hardware

00:16:17,230 --> 00:16:21,670
watchdog and so sits there and it counts

00:16:19,600 --> 00:16:23,470
down from whatever number and when it

00:16:21,670 --> 00:16:25,420
gets to zero it will hard reboot the

00:16:23,470 --> 00:16:27,640
machine and so if the software's active

00:16:25,420 --> 00:16:31,750
it'll sit there and kick the watchdog or

00:16:27,640 --> 00:16:33,340
Pat the watchdog and reset it so the

00:16:31,750 --> 00:16:35,380
idea is you know you might continue to

00:16:33,340 --> 00:16:37,300
reset it once it gets to some low water

00:16:35,380 --> 00:16:38,500
point and so if your software's locked

00:16:37,300 --> 00:16:39,970
up it's not going to do that reset

00:16:38,500 --> 00:16:41,710
operation it's gonna sit there and kick

00:16:39,970 --> 00:16:44,530
the hardware and restart so you want you

00:16:41,710 --> 00:16:46,120
BMC to be resilient to that happening

00:16:44,530 --> 00:16:48,250
all you seeis entire systems happen you

00:16:46,120 --> 00:16:49,960
know when the BMC reboots you don't want

00:16:48,250 --> 00:16:52,390
it to take down the hosts that would be

00:16:49,960 --> 00:16:54,820
bad you want it to be able to recover

00:16:52,390 --> 00:16:55,030
whatever state it had and things like

00:16:54,820 --> 00:16:58,540
that

00:16:55,030 --> 00:17:01,240
it's it's I think it's something that's

00:16:58,540 --> 00:17:02,770
baked into the the current the current

00:17:01,240 --> 00:17:04,380
implementation of it but it's definitely

00:17:02,770 --> 00:17:07,060
something to consider

00:17:04,380 --> 00:17:08,440
yeah as we kind of evolved the product

00:17:07,060 --> 00:17:09,820
and it gets more features I mean the

00:17:08,440 --> 00:17:12,220
initial implementation the version one

00:17:09,820 --> 00:17:14,290
tag do you see in the repository that

00:17:12,220 --> 00:17:16,060
was purely for the barrel out projects

00:17:14,290 --> 00:17:18,430
requirements so you know it doesn't have

00:17:16,060 --> 00:17:19,900
a web UI it doesn't have lots of the

00:17:18,430 --> 00:17:23,050
features that you might expect in a

00:17:19,900 --> 00:17:25,630
full-blown you know BMC that you get in

00:17:23,050 --> 00:17:27,940
your machine you buy from from the

00:17:25,630 --> 00:17:29,320
computer shop conniving it was very

00:17:27,940 --> 00:17:32,320
specific to the requirements of that

00:17:29,320 --> 00:17:34,840
project but yeah definitely you want it

00:17:32,320 --> 00:17:36,250
to be recover from from itself crashing

00:17:34,840 --> 00:17:38,230
and that's the problem with having a

00:17:36,250 --> 00:17:39,970
full Linux computer monitoring your

00:17:38,230 --> 00:17:42,970
Linux computer is what's what who's

00:17:39,970 --> 00:17:44,080
watching the watches and how many time

00:17:42,970 --> 00:17:45,940
have any more computers do you have to

00:17:44,080 --> 00:17:48,960
have a four-year you have confident that

00:17:45,940 --> 00:17:48,960
the system's gonna stay up

00:17:54,940 --> 00:18:00,920
any thought been done about harvesting

00:17:58,309 --> 00:18:04,250
analytics out of old BMC s of all the

00:18:00,920 --> 00:18:06,950
servers do are so many so many waste

00:18:04,250 --> 00:18:11,690
creativity out of it yeah it's something

00:18:06,950 --> 00:18:14,390
that I think has lots of potential you

00:18:11,690 --> 00:18:16,670
know using some kind of message passing

00:18:14,390 --> 00:18:18,380
to sit there and spirit stats to some

00:18:16,670 --> 00:18:19,550
kind of collection point now if you're

00:18:18,380 --> 00:18:20,540
earning a data center for these things

00:18:19,550 --> 00:18:23,690
that's something you definitely want to

00:18:20,540 --> 00:18:25,250
be doing and the advantage of creating a

00:18:23,690 --> 00:18:27,520
free software project around that is

00:18:25,250 --> 00:18:29,660
that you could add something like that

00:18:27,520 --> 00:18:31,730
where it's sitting there and harvesting

00:18:29,660 --> 00:18:34,130
data that your application cares about

00:18:31,730 --> 00:18:36,110
and you know whether it's doing a page

00:18:34,130 --> 00:18:39,230
to be get to send it off to a server or

00:18:36,110 --> 00:18:44,960
if it's doing a young you know some kind

00:18:39,230 --> 00:18:45,860
of mess other message passing kind of

00:18:44,960 --> 00:18:46,760
infrastructure that you might have in

00:18:45,860 --> 00:18:53,330
your data center already

00:18:46,760 --> 00:18:54,290
we got your application yeah come talk

00:18:53,330 --> 00:19:03,650
to me afterwards there's more concern

00:18:54,290 --> 00:19:05,330
the outlets are with all your hardware

00:19:03,650 --> 00:19:06,890
and everything's do you have bad sensors

00:19:05,330 --> 00:19:09,020
that you have to hit and sometimes they

00:19:06,890 --> 00:19:10,610
just don't return data and if you do how

00:19:09,020 --> 00:19:13,460
are you how are you handling all those

00:19:10,610 --> 00:19:15,890
because I know I do with my open BMC

00:19:13,460 --> 00:19:18,920
implementation into nightmare yeah I

00:19:15,890 --> 00:19:21,020
mean side problem itself hardware sucks

00:19:18,920 --> 00:19:22,910
I've not been involved I've been lower

00:19:21,020 --> 00:19:24,980
than the development side less into the

00:19:22,910 --> 00:19:26,900
operations side so I don't see how well

00:19:24,980 --> 00:19:29,620
our system performs I can imagine just

00:19:26,900 --> 00:19:33,710
like any other system it would suck and

00:19:29,620 --> 00:19:35,120
so again it's where I see an open-source

00:19:33,710 --> 00:19:36,320
project being a big advantage people

00:19:35,120 --> 00:19:38,090
thought for the mailing list to say hey

00:19:36,320 --> 00:19:41,450
this is a hard problem how can we solve

00:19:38,090 --> 00:19:43,040
it yeah there's nothing in there at the

00:19:41,450 --> 00:19:46,370
moment that does anything particularly

00:19:43,040 --> 00:19:49,340
tricky or intelligent about fixing it's

00:19:46,370 --> 00:19:51,320
hard to do with sensors but um so we

00:19:49,340 --> 00:19:52,880
have ice we have i2c lock up all the

00:19:51,320 --> 00:19:55,640
time and we have to write software and

00:19:52,880 --> 00:19:57,290
then reset the USB hub or reset this or

00:19:55,640 --> 00:20:00,349
send some power things through that like

00:19:57,290 --> 00:20:02,580
have you read any cool autumn

00:20:00,349 --> 00:20:04,229
working around Hardware faults for any

00:20:02,580 --> 00:20:06,419
of you don't have to name the IBM

00:20:04,229 --> 00:20:08,279
product the any of the quality hardware

00:20:06,419 --> 00:20:09,839
that you have in your products I can

00:20:08,279 --> 00:20:11,369
tell you the wedge system on Facebook

00:20:09,839 --> 00:20:13,229
plenty of little hardware lock ups

00:20:11,369 --> 00:20:14,940
workarounds we have also we haven't

00:20:13,229 --> 00:20:17,309
shipped open BMC and everything IBM yet

00:20:14,940 --> 00:20:19,589
the the open compute one that was a

00:20:17,309 --> 00:20:22,859
hexagon / Rackspace project that we

00:20:19,589 --> 00:20:25,320
helped out on if you look in the

00:20:22,859 --> 00:20:27,359
repositories you'll see what going on

00:20:25,320 --> 00:20:30,599
yeah what you would assume would be in

00:20:27,359 --> 00:20:32,909
IBM products but yeah I mean that's

00:20:30,599 --> 00:20:34,759
still a long way to go the barrel a you

00:20:32,909 --> 00:20:37,049
know implementation was really just a

00:20:34,759 --> 00:20:39,149
small type project for the pretty quick

00:20:37,049 --> 00:20:42,509
day lying on we bit like the wage was I

00:20:39,149 --> 00:20:44,099
assume we heard about it I'd love to

00:20:42,509 --> 00:20:45,899
talk to more about this yeah we will we

00:20:44,099 --> 00:20:53,459
will to know yeah most other people's

00:20:45,899 --> 00:20:55,799
time I know so is there any player like

00:20:53,459 --> 00:20:58,139
safe you've got old dull blade servers

00:20:55,799 --> 00:21:00,959
or old servers like would you be able to

00:20:58,139 --> 00:21:04,559
then put the open BNC on those servers

00:21:00,959 --> 00:21:08,399
if it's if Linux supports the chip then

00:21:04,559 --> 00:21:10,379
yes so the most common chip in servers

00:21:08,399 --> 00:21:16,499
that are currently in production is that

00:21:10,379 --> 00:21:19,379
a SD 2500 the SP 2400 my friends he's

00:21:16,499 --> 00:21:21,839
got a 2300 in his box the datasheet

00:21:19,379 --> 00:21:24,209
unfortunately is he's under NDA we can't

00:21:21,839 --> 00:21:26,759
give out the datasheet of everyone but I

00:21:24,209 --> 00:21:28,619
can port Linux to it so if you send one

00:21:26,759 --> 00:21:30,059
to me I'll make it work

00:21:28,619 --> 00:21:32,070
and now generally the socks are very

00:21:30,059 --> 00:21:33,779
similar like so the the next-generation

00:21:32,070 --> 00:21:35,459
boards did a bunch of you know the

00:21:33,779 --> 00:21:38,039
Facebook guys looking at and other guys

00:21:35,459 --> 00:21:39,929
and that the 2500 and all of them is

00:21:38,039 --> 00:21:42,959
taking out the arm 9 core and putting it

00:21:39,929 --> 00:21:44,669
on 11 core and so literally it was one

00:21:42,959 --> 00:21:46,169
line and device 3 to say this has got a

00:21:44,669 --> 00:21:47,539
different version of the arm core and

00:21:46,169 --> 00:21:50,039
all the peripherals just worked so

00:21:47,539 --> 00:21:51,719
chances are going back down it'll be the

00:21:50,039 --> 00:21:55,200
same deal you could um you could split

00:21:51,719 --> 00:21:56,429
r1 and um yeah jump on jump on I should

00:21:55,200 --> 00:21:59,369
have had a link to the mailing list by

00:21:56,429 --> 00:22:01,829
don't get hub comp also to open BMC

00:21:59,369 --> 00:22:03,389
there's a bunch of a bunch of our links

00:22:01,829 --> 00:22:05,159
to the mailing list in the IC channel

00:22:03,389 --> 00:22:07,379
and I hang out in there quite regularly

00:22:05,159 --> 00:22:09,829
at all hours of the night so so jump on

00:22:07,379 --> 00:22:09,829
and have a chat

00:22:11,060 --> 00:22:14,840
have you got any more questions

00:22:17,510 --> 00:22:22,910
all right thing thank you Joe can I have

00:22:20,550 --> 00:22:22,910

YouTube URL: https://www.youtube.com/watch?v=XrFaLnjOxQA


