Title: ESP8266 and MicroPython
Publication date: 2016-08-16
Playlist: IoT 2016 (Miniconf)
Description: 
	Nick Moore
https://2016.pycon-au.org/schedule/167/view_talk
The ESP8266 is an exciting new WiFi enabled SoC which is not only small and fast but also very very cheap.  And now it can run Python!  This talk discusses the ins and outs of ESP8266 chips and modules, how to install MicroPython, and what you can do with it once you've installed it.
Captions: 
	00:00:00,000 --> 00:00:03,929
consultant I work in systems integration

00:00:01,860 --> 00:00:07,140
and software development stuff here in

00:00:03,929 --> 00:00:09,240
Melbourne when I'm very very lucky I get

00:00:07,140 --> 00:00:11,450
to do that in Python when I'm less lucky

00:00:09,240 --> 00:00:15,719
I get to do it in other languages but

00:00:11,450 --> 00:00:21,630
for fun I've been playing around with a

00:00:15,719 --> 00:00:23,640
lot of esp8266 stuff and trying to get a

00:00:21,630 --> 00:00:26,119
feel for this this side of things it's

00:00:23,640 --> 00:00:30,449
it's a nice change from dealing with

00:00:26,119 --> 00:00:32,160
enterprise systems and si P and Java and

00:00:30,449 --> 00:00:34,200
other things that no one really wants to

00:00:32,160 --> 00:00:36,300
do it's a lot of fun to actually go and

00:00:34,200 --> 00:00:38,280
play with a chip the size of your

00:00:36,300 --> 00:00:41,270
thumbnail for a little bit so this talk

00:00:38,280 --> 00:00:45,090
is about two things it's about esp8266

00:00:41,270 --> 00:00:48,960
and it's about micro Python and about

00:00:45,090 --> 00:00:51,000
running one on the other all right whoo

00:00:48,960 --> 00:00:53,840
he was heard of these ESP things before

00:00:51,000 --> 00:00:57,320
this morning heaps of people Wow

00:00:53,840 --> 00:01:00,870
there was a very similar question at a

00:00:57,320 --> 00:01:02,640
session at OSD C last year or something

00:01:00,870 --> 00:01:05,820
and about three people put their hands

00:01:02,640 --> 00:01:07,500
up and I wasn't one of them

00:01:05,820 --> 00:01:11,780
I heard about these chips and went wow

00:01:07,500 --> 00:01:14,729
that is amazing what are they they're a

00:01:11,780 --> 00:01:18,210
system on a chip as Damian mentioned

00:01:14,729 --> 00:01:20,850
they're out of Shanghai by a company

00:01:18,210 --> 00:01:23,490
called expressive and on the inside

00:01:20,850 --> 00:01:26,729
there are ten silica core and a bunch of

00:01:23,490 --> 00:01:27,210
Wi-Fi stuff a bunch of I think they're

00:01:26,729 --> 00:01:29,869
Russians

00:01:27,210 --> 00:01:32,549
called zip tie bars D capped one and

00:01:29,869 --> 00:01:35,070
dissolved its packaging in acid and then

00:01:32,549 --> 00:01:38,310
took a photo with a very good microscope

00:01:35,070 --> 00:01:39,960
and that's what the dye looks like the

00:01:38,310 --> 00:01:42,689
giant parking lot on the bottom right

00:01:39,960 --> 00:01:43,920
hand there is the onboard RAM all the

00:01:42,689 --> 00:01:46,680
funny little stuff that looks like a

00:01:43,920 --> 00:01:48,750
petrol refinery or something is the CPU

00:01:46,680 --> 00:01:50,250
pretty much and those giant things that

00:01:48,750 --> 00:01:52,350
look like an enormous coils up in the

00:01:50,250 --> 00:01:55,290
top-left really are enormous coils the

00:01:52,350 --> 00:01:58,649
Wi-Fi is right there on the chip on the

00:01:55,290 --> 00:02:01,079
die it's actually kind of crazily

00:01:58,649 --> 00:02:02,490
beautiful if you look at it closely the

00:02:01,079 --> 00:02:06,390
way that they've constructed these

00:02:02,490 --> 00:02:10,760
antennas and and parts right there in

00:02:06,390 --> 00:02:13,080
the silicon it makes it a really nice

00:02:10,760 --> 00:02:14,000
platform to work with because it is so

00:02:13,080 --> 00:02:17,120
integrated it's

00:02:14,000 --> 00:02:22,820
in one place they first came to

00:02:17,120 --> 00:02:24,950
prominence as a Wi-Fi controller so a

00:02:22,820 --> 00:02:26,540
extra component you might add to

00:02:24,950 --> 00:02:28,520
something that ran on an AVR or

00:02:26,540 --> 00:02:30,440
something like that neat little unit

00:02:28,520 --> 00:02:32,060
eight little tiny pins you plug it in

00:02:30,440 --> 00:02:34,400
you can talk like a does everyone

00:02:32,060 --> 00:02:36,680
remember Hays 80 command sets for modems

00:02:34,400 --> 00:02:39,530
you talk them to it and send packets

00:02:36,680 --> 00:02:40,820
back and forth and so on eventually

00:02:39,530 --> 00:02:42,500
someone took a closer look at it and

00:02:40,820 --> 00:02:45,790
realize that it's several times as

00:02:42,500 --> 00:02:48,590
powerful as the AVR that it was helping

00:02:45,790 --> 00:02:52,340
if you have a look at the spec sheet it

00:02:48,590 --> 00:02:54,170
runs a lot faster and that this was a

00:02:52,340 --> 00:02:55,459
little ludicrous and so people started

00:02:54,170 --> 00:03:00,500
looking into this as a development

00:02:55,459 --> 00:03:02,060
platform in its own right and it has

00:03:00,500 --> 00:03:03,290
proven to be a very good platform a lot

00:03:02,060 --> 00:03:06,080
of people put a lot of work into that

00:03:03,290 --> 00:03:09,050
and I think the open source world and

00:03:06,080 --> 00:03:11,989
espresso both deserve a lot of credit

00:03:09,050 --> 00:03:14,510
for working well playing nicely with

00:03:11,989 --> 00:03:17,540
each other it's a bit of a new frontier

00:03:14,510 --> 00:03:19,070
for espresso I think and it's a bit of a

00:03:17,540 --> 00:03:20,989
new frontier for hope and sauce to be

00:03:19,070 --> 00:03:23,510
dealing so directly with Chinese

00:03:20,989 --> 00:03:28,420
manufacturers and the results have been

00:03:23,510 --> 00:03:31,700
fantastic um so in short it's the 32-bit

00:03:28,420 --> 00:03:33,350
core there's only one of them it can run

00:03:31,700 --> 00:03:35,299
at 80 megahertz or if you like wasting

00:03:33,350 --> 00:03:37,640
batteries it can run at 160 megahertz

00:03:35,299 --> 00:03:39,560
and wait for it some Ram the whole time

00:03:37,640 --> 00:03:42,739
instead or wait for its flash the whole

00:03:39,560 --> 00:03:45,350
time instead there's only about a

00:03:42,739 --> 00:03:47,299
hundred and sixty K of RAM on board of

00:03:45,350 --> 00:03:49,459
various types it was a very very

00:03:47,299 --> 00:03:54,079
limiting and normally it's coupled with

00:03:49,459 --> 00:03:55,519
a better for megabyte flash which is

00:03:54,079 --> 00:03:57,880
where all the actual kind of software

00:03:55,519 --> 00:04:01,940
happens espresso

00:03:57,880 --> 00:04:04,280
system manages to control that quite

00:04:01,940 --> 00:04:06,350
well stuff pages in and out without too

00:04:04,280 --> 00:04:10,040
much intervention from from the

00:04:06,350 --> 00:04:12,290
programmer you normally wouldn't buy the

00:04:10,040 --> 00:04:13,700
actual chip for start you keep losing

00:04:12,290 --> 00:04:16,100
the things they're very small

00:04:13,700 --> 00:04:20,660
instead you probably buy a little module

00:04:16,100 --> 00:04:22,520
like this this is an ESP 12 module there

00:04:20,660 --> 00:04:24,740
are a whole range of them imaginatively

00:04:22,520 --> 00:04:29,110
numbered from ESP oh one through to ESP

00:04:24,740 --> 00:04:29,110
12 and there might be a 13 out by now

00:04:30,760 --> 00:04:34,910
they vary in basically the number of

00:04:33,139 --> 00:04:36,440
pins they have the size of the memory

00:04:34,910 --> 00:04:40,160
that's typically put on them things like

00:04:36,440 --> 00:04:45,410
that but they're all basically the same

00:04:40,160 --> 00:04:47,510
components an esp8266 processor some

00:04:45,410 --> 00:04:50,900
flash of varying size and try not to get

00:04:47,510 --> 00:04:52,250
burnt by that one on eBay and often

00:04:50,900 --> 00:04:54,530
they'll come with a little can over the

00:04:52,250 --> 00:04:56,419
top and generally a little built-in

00:04:54,530 --> 00:05:00,070
antenna which is the gold squiggly thing

00:04:56,419 --> 00:05:05,360
on the left it's a very small package

00:05:00,070 --> 00:05:06,800
that's only just under an inch long very

00:05:05,360 --> 00:05:09,290
easy to use there are even smaller

00:05:06,800 --> 00:05:10,790
packages out there if you happen to have

00:05:09,290 --> 00:05:14,180
better eyesight than me you could even

00:05:10,790 --> 00:05:17,360
use one all that's not all that new it's

00:05:14,180 --> 00:05:18,800
a processor system on a chip etc etc

00:05:17,360 --> 00:05:22,760
lots of people have been doing that for

00:05:18,800 --> 00:05:25,190
a few years now none of that's all

00:05:22,760 --> 00:05:26,510
letting you what's really new is that

00:05:25,190 --> 00:05:28,690
they can suddenly you can buy them

00:05:26,510 --> 00:05:33,860
quantity one for five bucks on eBay

00:05:28,690 --> 00:05:37,360
that's only a minor detail really but it

00:05:33,860 --> 00:05:40,010
changes the game a lot for hobbyists for

00:05:37,360 --> 00:05:42,800
beginners for people who might not want

00:05:40,010 --> 00:05:44,450
to blow a hundred bucks on a prototyping

00:05:42,800 --> 00:05:45,979
board if you're a big company it's it's

00:05:44,450 --> 00:05:47,660
really nothing you buy a dev kit it

00:05:45,979 --> 00:05:50,810
costs you a thousand dollars it's not

00:05:47,660 --> 00:05:52,070
really a big deal for a hobbyist that

00:05:50,810 --> 00:05:54,080
pretty much writes you out getting

00:05:52,070 --> 00:05:55,580
started and you've got to make a pretty

00:05:54,080 --> 00:05:58,130
big decision if that's something you

00:05:55,580 --> 00:05:59,360
really want to get into being able to

00:05:58,130 --> 00:06:03,770
buy one of these things for five bucks

00:05:59,360 --> 00:06:04,940
on eBay changes that game completely it

00:06:03,770 --> 00:06:06,680
means that you can use them in any

00:06:04,940 --> 00:06:11,180
crappy project that you happen to have a

00:06:06,680 --> 00:06:13,010
sudden whim to do and if that is a robot

00:06:11,180 --> 00:06:14,840
that picks up tennis balls you can do

00:06:13,010 --> 00:06:16,190
that and if it's made out of parts you

00:06:14,840 --> 00:06:19,190
found in the junk box and a piece of

00:06:16,190 --> 00:06:20,780
plank that's fine and if you then fry

00:06:19,190 --> 00:06:22,610
the microcontroller because there's

00:06:20,780 --> 00:06:25,520
basically well I don't think those

00:06:22,610 --> 00:06:28,130
bypass caps worked on that motor if you

00:06:25,520 --> 00:06:31,400
then fry the microcontroller it's five

00:06:28,130 --> 00:06:32,539
bucks and no one has to get upset and

00:06:31,400 --> 00:06:36,260
that's really good

00:06:32,539 --> 00:06:38,720
and so you can make lots of fun projects

00:06:36,260 --> 00:06:41,850
and and play a lot more it makes up for

00:06:38,720 --> 00:06:44,070
a lot more playful or platformer

00:06:41,850 --> 00:06:45,990
all right how do you actually program

00:06:44,070 --> 00:06:48,330
these things the the worst part about

00:06:45,990 --> 00:06:51,450
any of these these little systems as

00:06:48,330 --> 00:06:54,210
always you your your exciting package

00:06:51,450 --> 00:06:57,360
arrives in the mail for zero dollars

00:06:54,210 --> 00:06:58,770
postage from Shenzhen nor ever and you

00:06:57,360 --> 00:07:02,610
open it up and you look at this thing

00:06:58,770 --> 00:07:07,110
and you go right so I need about 10

00:07:02,610 --> 00:07:09,330
times as much in components to wire this

00:07:07,110 --> 00:07:13,920
thing up as I spent on the actual CPU

00:07:09,330 --> 00:07:15,570
that's slightly perverse in this case

00:07:13,920 --> 00:07:19,680
it's a lot easier these things talk a

00:07:15,570 --> 00:07:21,300
really nice serial interface they have

00:07:19,680 --> 00:07:26,190
basically a couple of dedicated surreal

00:07:21,300 --> 00:07:28,050
lines that talk rs-232 TTL equivalent if

00:07:26,190 --> 00:07:30,930
you have a decent sized junk box worth

00:07:28,050 --> 00:07:32,430
of previous generations of CPU stuff you

00:07:30,930 --> 00:07:35,730
probably have several of these things

00:07:32,430 --> 00:07:37,410
they do need 3.3 volts by which they

00:07:35,730 --> 00:07:39,870
don't mean three point six volts and

00:07:37,410 --> 00:07:41,400
they certainly don't mean 3.7 volts and

00:07:39,870 --> 00:07:45,990
if you try three point eight volts it

00:07:41,400 --> 00:07:49,980
gets a nasty quick and they needed a

00:07:45,990 --> 00:07:53,970
probably a 200 250 milliamps or you'll

00:07:49,980 --> 00:07:57,570
get unpredictable results the old

00:07:53,970 --> 00:07:59,940
unspecified behavior tends to happen if

00:07:57,570 --> 00:08:02,790
you if the power lines dip as you

00:07:59,940 --> 00:08:04,140
program the things that's easy to get

00:08:02,790 --> 00:08:05,970
caught out on because a lot of the five

00:08:04,140 --> 00:08:08,370
volt to 3.3 volt converters you might

00:08:05,970 --> 00:08:10,800
have in the junk box tend to crap out at

00:08:08,370 --> 00:08:13,200
100 milliamps the things draw a lot less

00:08:10,800 --> 00:08:14,580
than that in the long term but in the

00:08:13,200 --> 00:08:16,920
short term they draw lots of little

00:08:14,580 --> 00:08:18,390
spikes of power as the Wi-Fi chips turn

00:08:16,920 --> 00:08:21,870
on and off and things like that

00:08:18,390 --> 00:08:24,810
so that's just something to watch it's

00:08:21,870 --> 00:08:26,520
it's an extremely depressing way to get

00:08:24,810 --> 00:08:29,640
started on microcontroller when whenever

00:08:26,520 --> 00:08:33,630
you go to flash anything it fails and it

00:08:29,640 --> 00:08:35,040
sometimes may be the easy way if you

00:08:33,630 --> 00:08:37,080
really don't want to deal with that

00:08:35,040 --> 00:08:38,219
stuff at all and don't mean had one of

00:08:37,080 --> 00:08:43,349
these hanging off the side of his laptop

00:08:38,219 --> 00:08:45,660
is to buy node MCU that's really just an

00:08:43,349 --> 00:08:47,250
ESP 12 module you can see the DSP 12

00:08:45,660 --> 00:08:51,660
module on the end of it

00:08:47,250 --> 00:08:53,570
soldered onto a little backing board

00:08:51,660 --> 00:08:55,700
there with

00:08:53,570 --> 00:08:57,470
tenth inch headers which are like what's

00:08:55,700 --> 00:09:00,260
used in standard bread boards that you

00:08:57,470 --> 00:09:04,880
might have lying around and on board is

00:09:00,260 --> 00:09:08,510
a 3.3 volt converter which is handy and

00:09:04,880 --> 00:09:10,070
a USB to UART converter so that's really

00:09:08,510 --> 00:09:11,840
handy too that's all wired up for you

00:09:10,070 --> 00:09:13,370
there's also a couple of tricky little

00:09:11,840 --> 00:09:15,440
transistors that mean the thing can

00:09:13,370 --> 00:09:19,730
automatically reset itself put itself

00:09:15,440 --> 00:09:21,680
into flash mode all that stuff you can

00:09:19,730 --> 00:09:23,300
get them for about 10 bucks which you

00:09:21,680 --> 00:09:25,820
know maybe have one less coffee and by

00:09:23,300 --> 00:09:27,320
the tender-back thing and then if you if

00:09:25,820 --> 00:09:29,570
you feel like you have mastered that

00:09:27,320 --> 00:09:33,170
then move on to buying the ones you can

00:09:29,570 --> 00:09:34,550
get for less than five bucks the it's a

00:09:33,170 --> 00:09:36,560
very handy little piece of hardware

00:09:34,550 --> 00:09:39,350
originally it was kind of marketed as a

00:09:36,560 --> 00:09:41,120
way to run Lua again as Damian mentioned

00:09:39,350 --> 00:09:43,010
but there's nothing actually locking

00:09:41,120 --> 00:09:45,950
that particular chip or that particular

00:09:43,010 --> 00:09:49,220
module on to that particular language or

00:09:45,950 --> 00:09:50,930
anything it's really just an esp8266 the

00:09:49,220 --> 00:09:52,400
one time that module gets annoying is if

00:09:50,930 --> 00:09:55,280
you actually want to use the UART for

00:09:52,400 --> 00:09:59,510
yourself because it's kind of tied up

00:09:55,280 --> 00:10:04,130
directly to the USB port so they're very

00:09:59,510 --> 00:10:06,860
very handy little units you'll caught of

00:10:04,130 --> 00:10:10,520
course also need some software you need

00:10:06,860 --> 00:10:12,350
to somehow push code on to the chip you

00:10:10,520 --> 00:10:14,390
need to tell it go reset yourself put

00:10:12,350 --> 00:10:16,220
yourself into flash mode etc there's a

00:10:14,390 --> 00:10:19,700
handy little lump I think all DSP tool

00:10:16,220 --> 00:10:24,440
that does that and really all you need

00:10:19,700 --> 00:10:26,960
to do is grab it from github and run it

00:10:24,440 --> 00:10:29,630
and it will put binary straight onto the

00:10:26,960 --> 00:10:31,520
device for you micro Python is now

00:10:29,630 --> 00:10:34,460
available as a binary that you can just

00:10:31,520 --> 00:10:36,890
download so you can skip the following

00:10:34,460 --> 00:10:39,830
steps if your interest is purely into

00:10:36,890 --> 00:10:42,050
into micro Python and not say I mean to

00:10:39,830 --> 00:10:45,380
using micro Python as opposed to working

00:10:42,050 --> 00:10:46,820
on it or changing it or writing new

00:10:45,380 --> 00:10:48,760
parts of it and stuff like that you can

00:10:46,820 --> 00:10:51,710
just grab the micro path and binary

00:10:48,760 --> 00:10:53,930
download it onto the chip but if you are

00:10:51,710 --> 00:10:56,240
interested in taking the the covers off

00:10:53,930 --> 00:11:00,640
micro path in a bit you'll need to get a

00:10:56,240 --> 00:11:03,290
few more things there's a ASP open SDK

00:11:00,640 --> 00:11:06,649
that's a bunch of C libraries and

00:11:03,290 --> 00:11:08,779
utilities and so on and so forth that

00:11:06,649 --> 00:11:11,569
provide a software development kit for

00:11:08,779 --> 00:11:17,720
the ESP espresso of themselves put out

00:11:11,569 --> 00:11:20,499
their own SDK but it has more closed

00:11:17,720 --> 00:11:25,639
source parts this particular version

00:11:20,499 --> 00:11:27,980
which is again on github has as much as

00:11:25,639 --> 00:11:30,709
possible open source components with

00:11:27,980 --> 00:11:32,660
only a few little lumps of of binary

00:11:30,709 --> 00:11:37,790
blob from espresso that are still

00:11:32,660 --> 00:11:40,069
required so it's probably not going to

00:11:37,790 --> 00:11:42,920
be Richard Stallman approved but it's

00:11:40,069 --> 00:11:49,550
certainly heading towards open source in

00:11:42,920 --> 00:11:51,860
its in its intent that's fun to build

00:11:49,550 --> 00:11:55,040
it's an entire GCC toolchain so you

00:11:51,860 --> 00:11:58,100
download an awful lot of Debian packages

00:11:55,040 --> 00:11:59,899
and then you run make and then you go

00:11:58,100 --> 00:12:01,670
make a nice cup of tea because on my

00:11:59,899 --> 00:12:04,100
laptop it took at least half an hour to

00:12:01,670 --> 00:12:06,079
actually build the thing when you get

00:12:04,100 --> 00:12:09,709
back though you've got a cross-platform

00:12:06,079 --> 00:12:17,360
compiler which can compile code into the

00:12:09,709 --> 00:12:18,980
ten silica machine code and it's just

00:12:17,360 --> 00:12:20,750
like GC so you can use all the things

00:12:18,980 --> 00:12:24,230
you know about GCC if you know things

00:12:20,750 --> 00:12:28,759
about yes you see it's just a regular

00:12:24,230 --> 00:12:30,559
replacement for GCC the SDK also

00:12:28,759 --> 00:12:33,550
includes support for that cool Wi-Fi

00:12:30,559 --> 00:12:36,500
chipset stuff and a surprisingly good

00:12:33,550 --> 00:12:43,819
library of things that do things like

00:12:36,500 --> 00:12:45,230
you know perform WPS and there's it's

00:12:43,819 --> 00:12:48,939
very simple to put the thing into a mode

00:12:45,230 --> 00:12:51,679
where it is both an access point and a

00:12:48,939 --> 00:12:53,089
client both at once which is kind of

00:12:51,679 --> 00:12:54,319
nifty and I didn't realize you were

00:12:53,089 --> 00:12:56,029
actually allowed to do that for

00:12:54,319 --> 00:13:00,230
according to protocol but apparently you

00:12:56,029 --> 00:13:02,029
are so that's good so you can sit there

00:13:00,230 --> 00:13:03,649
and be an access point and a client both

00:13:02,029 --> 00:13:05,839
at once and just see how people want to

00:13:03,649 --> 00:13:07,009
connect to it there is no operating

00:13:05,839 --> 00:13:09,079
system though and this can be a little

00:13:07,009 --> 00:13:11,600
bit weird for those of us who've worked

00:13:09,079 --> 00:13:13,520
in larger systems or used to the web

00:13:11,600 --> 00:13:17,120
world and all that there is no

00:13:13,520 --> 00:13:19,880
operating system underneath so there's

00:13:17,120 --> 00:13:21,980
no engine x2 dispatch to your processes

00:13:19,880 --> 00:13:24,920
there's no but there is a file system

00:13:21,980 --> 00:13:26,510
but it's very small there's no other

00:13:24,920 --> 00:13:29,810
processes running there there's

00:13:26,510 --> 00:13:33,680
certainly not a database and that can be

00:13:29,810 --> 00:13:36,920
a little weird there is a library called

00:13:33,680 --> 00:13:41,029
Libby SP httpd surprise surprise it's on

00:13:36,920 --> 00:13:43,250
github which provides a pretty good set

00:13:41,029 --> 00:13:44,870
of primitives for dealing with HTTP and

00:13:43,250 --> 00:13:47,779
dealing with WebSockets and things like

00:13:44,870 --> 00:13:49,370
that and it's quite easy to write a bit

00:13:47,779 --> 00:13:51,770
of see that actually picks up on an a

00:13:49,370 --> 00:13:53,720
hardware interrupt so just as a little

00:13:51,770 --> 00:13:55,820
example of what C code can look like I

00:13:53,720 --> 00:13:58,310
don't know probably can't read that all

00:13:55,820 --> 00:14:02,510
that well down the back but that's

00:13:58,310 --> 00:14:04,520
basically a little HTTP handler the code

00:14:02,510 --> 00:14:08,029
you require to open a socket listen for

00:14:04,520 --> 00:14:09,980
HTTP incoming connections allow people

00:14:08,029 --> 00:14:11,959
to switch up to WebSockets and so on and

00:14:09,980 --> 00:14:15,230
you just have to write your own details

00:14:11,959 --> 00:14:19,130
in there to actually make it do

00:14:15,230 --> 00:14:20,450
something useful however writing C is

00:14:19,130 --> 00:14:22,459
not everyone's cup of tea especially

00:14:20,450 --> 00:14:24,709
when you're trying to debug it on a

00:14:22,459 --> 00:14:29,149
platform that doesn't really have good

00:14:24,709 --> 00:14:34,270
debugging support at this point I ended

00:14:29,149 --> 00:14:35,899
up writing a bunch of code on in C and

00:14:34,270 --> 00:14:37,700
it'll went quite well

00:14:35,899 --> 00:14:40,100
until the end of that first little rush

00:14:37,700 --> 00:14:41,630
through the code where you you're

00:14:40,100 --> 00:14:42,890
feeling really good about everything and

00:14:41,630 --> 00:14:44,450
everything's flowing well and then you

00:14:42,890 --> 00:14:48,620
go away and you come back three weeks

00:14:44,450 --> 00:14:51,380
later and you go what on earth is this I

00:14:48,620 --> 00:14:52,399
don't even know who wrote this it's got

00:14:51,380 --> 00:14:57,350
my name all over it

00:14:52,399 --> 00:15:00,140
get blamed says it was me but I don't

00:14:57,350 --> 00:15:02,240
remember anything so it's actually I

00:15:00,140 --> 00:15:07,370
found it very difficult to come back to

00:15:02,240 --> 00:15:08,660
and then change stuff and so I had a

00:15:07,370 --> 00:15:13,820
look around at the other languages that

00:15:08,660 --> 00:15:18,079
are available for the platform no lure

00:15:13,820 --> 00:15:22,160
is the obvious one it came very early on

00:15:18,079 --> 00:15:25,370
to the platform and it's quite cool Lua

00:15:22,160 --> 00:15:26,990
is just slightly terrifyingly close to

00:15:25,370 --> 00:15:29,450
JavaScript and Python and

00:15:26,990 --> 00:15:31,180
therefore I find extraordinarily

00:15:29,450 --> 00:15:34,040
difficult to get my head around

00:15:31,180 --> 00:15:36,050
precisely where it isn't JavaScript and

00:15:34,040 --> 00:15:37,940
it isn't Python but it's it's not a bad

00:15:36,050 --> 00:15:40,370
little language with some technical

00:15:37,940 --> 00:15:43,070
drawbacks there are some Java scripts

00:15:40,370 --> 00:15:45,320
available but I've written far too much

00:15:43,070 --> 00:15:48,080
JavaScript in my life

00:15:45,320 --> 00:15:50,930
there's fourth that's cool there's Lisp

00:15:48,080 --> 00:15:54,080
that's very cool and there's basic so if

00:15:50,930 --> 00:15:57,230
you really feel like going back to the

00:15:54,080 --> 00:16:00,380
the great tin print hello 20 go to 10

00:15:57,230 --> 00:16:04,190
days of programming you can you know

00:16:00,380 --> 00:16:05,510
which i think is fantastic I mean we're

00:16:04,190 --> 00:16:07,940
talking about a chip here that is this

00:16:05,510 --> 00:16:09,770
big and is many times as powerful as the

00:16:07,940 --> 00:16:13,040
Apple 2 that you may have learned basic

00:16:09,770 --> 00:16:15,589
on so I think that's cool thanks to this

00:16:13,040 --> 00:16:20,270
Kickstarter campaign into Damian we now

00:16:15,589 --> 00:16:22,610
have micro Python and yay whoo for those

00:16:20,270 --> 00:16:25,640
of us who are Python fans this is a

00:16:22,610 --> 00:16:27,350
great thing if you like to think in

00:16:25,640 --> 00:16:28,670
Python and you like to write Python and

00:16:27,350 --> 00:16:30,110
you like to have code that you can come

00:16:28,670 --> 00:16:33,470
back to three weeks later and actually

00:16:30,110 --> 00:16:35,110
remember our worked this is a great

00:16:33,470 --> 00:16:37,310
thing

00:16:35,110 --> 00:16:39,290
micro Python is pretty easy to build

00:16:37,310 --> 00:16:41,270
like I say you can just download it as a

00:16:39,290 --> 00:16:44,510
binary now but if you need to build it

00:16:41,270 --> 00:16:46,640
it's right there in github again you can

00:16:44,510 --> 00:16:49,100
build it and make it relatively simply

00:16:46,640 --> 00:16:52,490
oh by the way all these slides will be

00:16:49,100 --> 00:16:53,510
available they're all online so if you

00:16:52,490 --> 00:16:55,579
want to read the instructions again

00:16:53,510 --> 00:17:01,329
later I'll make sure the URL to that at

00:16:55,579 --> 00:17:03,680
the end you can just build micro Python

00:17:01,329 --> 00:17:05,360
as soon as you write that onto the chip

00:17:03,680 --> 00:17:07,339
with the ESP tool as Damian showed you

00:17:05,360 --> 00:17:09,949
you can just connect straight to that

00:17:07,339 --> 00:17:12,280
device and see a ripple and I still am

00:17:09,949 --> 00:17:14,480
blown away by how magical that seems

00:17:12,280 --> 00:17:16,550
being able to connect to this thing the

00:17:14,480 --> 00:17:19,309
size of your thumbnail and actually say

00:17:16,550 --> 00:17:24,290
oh wow it's Python I can type dirt I can

00:17:19,309 --> 00:17:27,439
type help I can compile Python in Python

00:17:24,290 --> 00:17:31,190
it's very very complete I kept looking

00:17:27,439 --> 00:17:32,870
at the the implementation going but

00:17:31,190 --> 00:17:34,850
surely at some point I'll find something

00:17:32,870 --> 00:17:36,830
I can't do and okay oh this isn't really

00:17:34,850 --> 00:17:39,799
Python this is a fast

00:17:36,830 --> 00:17:45,740
but every time I went to do something it

00:17:39,799 --> 00:17:48,080
just worked I owe as domine mentioned is

00:17:45,740 --> 00:17:49,730
very very simple you can just type the

00:17:48,080 --> 00:17:51,289
stuff at the repple if you want and this

00:17:49,730 --> 00:17:56,059
has got to be the quickest platform I've

00:17:51,289 --> 00:17:58,070
ever seen to get blinking LEDs upon not

00:17:56,059 --> 00:18:02,750
admittedly terribly useful in of itself

00:17:58,070 --> 00:18:07,059
but there are 1600 lines I think 15 of

00:18:02,750 --> 00:18:09,500
them can do PWM there's one analog input

00:18:07,059 --> 00:18:11,240
none of this stuff is greatly luxurious

00:18:09,500 --> 00:18:12,590
if you used to like an AVR platform or

00:18:11,240 --> 00:18:15,200
something like this it's relatively

00:18:12,590 --> 00:18:16,639
small number of i/o lines but it's a

00:18:15,200 --> 00:18:19,070
good start you can make a really good

00:18:16,639 --> 00:18:21,860
start on a servo driven robot or

00:18:19,070 --> 00:18:23,990
something like that just by soldering

00:18:21,860 --> 00:18:26,750
things directly to the pins because the

00:18:23,990 --> 00:18:34,039
PWM is good enough to drive say servo

00:18:26,750 --> 00:18:35,840
motors so that's pretty simple the Wi-Fi

00:18:34,039 --> 00:18:37,210
again as dome invention is very very

00:18:35,840 --> 00:18:40,549
simple to set up there's a bunch of

00:18:37,210 --> 00:18:42,289
libraries wrapping it in Python so you

00:18:40,549 --> 00:18:44,149
can very easily connect up to Wi-Fi and

00:18:42,289 --> 00:18:46,970
there's the equivalent to be an AP so

00:18:44,149 --> 00:18:49,399
people can connect to you

00:18:46,970 --> 00:18:53,659
sockets again about as simple as you can

00:18:49,399 --> 00:18:56,120
get and there is actually I haven't got

00:18:53,659 --> 00:19:00,350
a slide for it there is actually a web

00:18:56,120 --> 00:19:02,840
server project someone's setup which is

00:19:00,350 --> 00:19:04,610
like a micro web server you're not going

00:19:02,840 --> 00:19:06,019
to be running Jango on this thing if you

00:19:04,610 --> 00:19:07,610
wanted to run Jango on this thing that's

00:19:06,019 --> 00:19:10,010
two rooms over maybe get a bigger

00:19:07,610 --> 00:19:12,110
computer though you're not going to be

00:19:10,010 --> 00:19:13,639
running Jango on this thing but you you

00:19:12,110 --> 00:19:17,840
probably do want to look at it as a

00:19:13,639 --> 00:19:18,919
webserver it's actually really handy to

00:19:17,840 --> 00:19:20,510
be able to just serve up your

00:19:18,919 --> 00:19:22,519
application as a web application

00:19:20,510 --> 00:19:24,649
straight from the device because many

00:19:22,519 --> 00:19:25,880
people have phones things like that you

00:19:24,649 --> 00:19:28,760
can just point the phone straight at the

00:19:25,880 --> 00:19:31,279
thing loaded as a web page and then it

00:19:28,760 --> 00:19:33,559
can do a WebSockets or HTTP POST or

00:19:31,279 --> 00:19:37,010
whatever to control what the hardware is

00:19:33,559 --> 00:19:38,540
doing I find that a really nice approach

00:19:37,010 --> 00:19:40,880
how do you actually get software on

00:19:38,540 --> 00:19:42,590
there I mean it's not an apple - so we

00:19:40,880 --> 00:19:45,590
don't have to type in the listing every

00:19:42,590 --> 00:19:48,350
time the ripple is cool but it's a

00:19:45,590 --> 00:19:50,480
little limiting after a while there are

00:19:48,350 --> 00:19:53,810
a few ways one of them is to plunk stuff

00:19:50,480 --> 00:19:56,060
into this build directory modules build

00:19:53,810 --> 00:19:59,720
directory in which case it gets bytecode

00:19:56,060 --> 00:20:02,690
compiled and then frozen into the the

00:19:59,720 --> 00:20:03,860
firmware you upload to the device well

00:20:02,690 --> 00:20:05,960
you can put it in this scripts directory

00:20:03,860 --> 00:20:08,560
where it gets frozen into the firmware

00:20:05,960 --> 00:20:10,610
as source code and uploaded to device

00:20:08,560 --> 00:20:12,650
but both of those things are a little

00:20:10,610 --> 00:20:15,490
annoying especially if you don't want to

00:20:12,650 --> 00:20:17,450
wear out your flash memory too quickly

00:20:15,490 --> 00:20:18,980
so the alternative is that you use

00:20:17,450 --> 00:20:24,500
either there's a thing called web ripple

00:20:18,980 --> 00:20:27,260
which is a TCP or a WebSocket sorry

00:20:24,500 --> 00:20:29,000
speaking version of the rebel so that

00:20:27,260 --> 00:20:31,420
you can talk to the ripple over over

00:20:29,000 --> 00:20:33,470
Wi-Fi or I've got a little utilities

00:20:31,420 --> 00:20:35,480
programs collection there that I'm

00:20:33,470 --> 00:20:39,620
starting on which is basically just a

00:20:35,480 --> 00:20:42,710
bunch of ways you can talk to the thing

00:20:39,620 --> 00:20:44,420
over that serial line so okay this is

00:20:42,710 --> 00:20:47,360
actually inspired by Lua tool which

00:20:44,420 --> 00:20:51,080
comes with no Lua it connect up and

00:20:47,360 --> 00:20:53,780
types for you into the repple open this

00:20:51,080 --> 00:20:56,270
file right to this file write this text

00:20:53,780 --> 00:20:58,100
and thankfully due to pythons wrapper

00:20:56,270 --> 00:21:01,550
function that's really really simple to

00:20:58,100 --> 00:21:04,010
implement so it lets you upload files

00:21:01,550 --> 00:21:05,480
and soon to come download files think of

00:21:04,010 --> 00:21:06,830
arles all that sort of stuff so that's a

00:21:05,480 --> 00:21:08,810
handy way to get stuff on there

00:21:06,830 --> 00:21:10,430
what's files are on there once you reset

00:21:08,810 --> 00:21:14,150
the device it'll look for a file called

00:21:10,430 --> 00:21:18,290
boot pi and run that so that's very

00:21:14,150 --> 00:21:21,410
simple to get into thankfully there is

00:21:18,290 --> 00:21:23,210
also pip so micro pip provides most of

00:21:21,410 --> 00:21:24,740
the things you were thinking of from pip

00:21:23,210 --> 00:21:27,440
so that you can do package management

00:21:24,740 --> 00:21:28,880
properly and things like that we really

00:21:27,440 --> 00:21:31,280
don't want to go back to the good old

00:21:28,880 --> 00:21:32,750
days of copying package files around and

00:21:31,280 --> 00:21:35,990
having your own version of everything

00:21:32,750 --> 00:21:38,330
and all that or even go to get sub

00:21:35,990 --> 00:21:40,310
modules I mean it's an approach but it's

00:21:38,330 --> 00:21:44,000
it's an annoying approach to have to

00:21:40,310 --> 00:21:46,130
take so micro PIP is there and it seems

00:21:44,000 --> 00:21:49,070
to work fairly well as Damien mentioned

00:21:46,130 --> 00:21:50,630
as well the not all packages will work

00:21:49,070 --> 00:21:52,850
with micro Python

00:21:50,630 --> 00:21:54,710
the biggest constraint I think is

00:21:52,850 --> 00:21:58,520
probably this amount of RAM you have

00:21:54,710 --> 00:22:00,830
available not much a lot of code is

00:21:58,520 --> 00:22:02,870
optimized very heavily these days to use

00:22:00,830 --> 00:22:05,600
as much RAM as possible as often as

00:22:02,870 --> 00:22:07,100
possible if you're sitting down to write

00:22:05,600 --> 00:22:09,770
something than you want it to go fast

00:22:07,100 --> 00:22:13,070
mostly what you do in a big CPU is you

00:22:09,770 --> 00:22:15,200
pull everything into ramp first right

00:22:13,070 --> 00:22:17,540
cache everything if you've got a file oh

00:22:15,200 --> 00:22:18,620
yeah and it's a Giga file upload it into

00:22:17,540 --> 00:22:20,000
RAM why not

00:22:18,620 --> 00:22:21,710
I might have to serve it up several

00:22:20,000 --> 00:22:24,170
times that'll be quicker in the long run

00:22:21,710 --> 00:22:24,950
right this thing's got 32 gig of ram on

00:22:24,170 --> 00:22:28,190
it it's fine

00:22:24,950 --> 00:22:29,600
this thing doesn't so you probably don't

00:22:28,190 --> 00:22:31,100
want to do that and a lot of libraries

00:22:29,600 --> 00:22:33,140
make this assumption I should cache

00:22:31,100 --> 00:22:34,610
things I should do that without ever

00:22:33,140 --> 00:22:36,110
kind of checking how much ram is

00:22:34,610 --> 00:22:39,110
actually available so that's a bit of a

00:22:36,110 --> 00:22:42,650
challenge but the the micro Python

00:22:39,110 --> 00:22:44,330
packages should hopefully make up for

00:22:42,650 --> 00:22:49,910
that by basically having the same code

00:22:44,330 --> 00:22:51,710
with a more memory conserving bin

00:22:49,910 --> 00:22:55,400
accepting that it'll go a little slower

00:22:51,710 --> 00:22:58,850
it's an 80 megahertz microcontroller but

00:22:55,400 --> 00:23:00,410
it will work the other way I didn't

00:22:58,850 --> 00:23:04,490
mention in that previous list was

00:23:00,410 --> 00:23:06,770
actually to to write your own modules

00:23:04,490 --> 00:23:08,150
and I was actually very pleased to say

00:23:06,770 --> 00:23:09,950
looking around in the micro Python

00:23:08,150 --> 00:23:11,690
source code there's a whole bunch of C

00:23:09,950 --> 00:23:15,290
files looking suspicious and called

00:23:11,690 --> 00:23:17,180
things like you know mod cease and mod

00:23:15,290 --> 00:23:18,860
machine and things like that that

00:23:17,180 --> 00:23:20,540
correspond to the things you can import

00:23:18,860 --> 00:23:22,820
and I was very pleased to say that

00:23:20,540 --> 00:23:25,610
they're actually fairly understandable C

00:23:22,820 --> 00:23:28,520
code and so that's worth considering if

00:23:25,610 --> 00:23:31,520
you've got a need on this if you've got

00:23:28,520 --> 00:23:33,290
a desire to run Python on this chip but

00:23:31,520 --> 00:23:35,150
a need to do stuff that has to run quick

00:23:33,290 --> 00:23:36,950
it's worth thinking about whether you

00:23:35,150 --> 00:23:40,130
can make the bit that has to run quick

00:23:36,950 --> 00:23:41,960
as a C library as a mod something in

00:23:40,130 --> 00:23:43,070
micro Python and of course it's worth

00:23:41,960 --> 00:23:46,670
considering whether you should be

00:23:43,070 --> 00:23:50,030
releasing that on micro pythons package

00:23:46,670 --> 00:23:51,680
management what doesn't it come with it

00:23:50,030 --> 00:23:53,000
doesn't come with an operating system as

00:23:51,680 --> 00:23:55,310
I mentioned before that means there's a

00:23:53,000 --> 00:23:57,440
lot of things you just don't have it

00:23:55,310 --> 00:23:58,850
doesn't have multi processing so if

00:23:57,440 --> 00:24:02,720
you're used to the idea that your code

00:23:58,850 --> 00:24:03,610
has to run in a very linear way and that

00:24:02,720 --> 00:24:05,950
you'll fork

00:24:03,610 --> 00:24:08,890
a thread or a process or whatever to

00:24:05,950 --> 00:24:12,490
handle your web requests you've got a

00:24:08,890 --> 00:24:15,150
bit of a nasty surprise in store but

00:24:12,490 --> 00:24:19,299
that being said it does do co-routines

00:24:15,150 --> 00:24:20,620
there is a you async so as long as

00:24:19,299 --> 00:24:21,700
you're willing to deal with the fact

00:24:20,620 --> 00:24:25,049
that your code will run asynchronously

00:24:21,700 --> 00:24:27,100
and in multiple threads that's okay

00:24:25,049 --> 00:24:28,990
there's not much memory to play with as

00:24:27,100 --> 00:24:30,220
I mentioned what I think the biggest

00:24:28,990 --> 00:24:32,890
thing it's missing at the moment is a

00:24:30,220 --> 00:24:35,850
way to remotely connect up PDB or

00:24:32,890 --> 00:24:41,230
equivalent as for remote debugger you

00:24:35,850 --> 00:24:43,210
can debug on it doing lots of print

00:24:41,230 --> 00:24:47,919
statements sorry print functions as a

00:24:43,210 --> 00:24:49,690
Python 3 print functions and lots of

00:24:47,919 --> 00:24:52,570
stack traces and so on and so forth and

00:24:49,690 --> 00:24:55,929
that's fine but it's not somewhere I

00:24:52,570 --> 00:24:58,090
enjoy going so I'd love to see and we'll

00:24:55,929 --> 00:25:02,100
hopefully get to contribute to a python

00:24:58,090 --> 00:25:04,929
debugger attachment port basically

00:25:02,100 --> 00:25:05,890
alright I've got a couple of minutes so

00:25:04,929 --> 00:25:07,510
I just wanted to mention a little

00:25:05,890 --> 00:25:10,690
hobbyhorse project this is what got me

00:25:07,510 --> 00:25:13,600
excited about esp8266 in the first place

00:25:10,690 --> 00:25:15,370
there's a educational programming

00:25:13,600 --> 00:25:17,290
purposes for them they're very very

00:25:15,370 --> 00:25:21,760
cheap they're very very simple they're a

00:25:17,290 --> 00:25:23,950
great platform for teaching programming

00:25:21,760 --> 00:25:25,890
on so it was playing around with this

00:25:23,950 --> 00:25:28,059
idea of how do you teach a programming

00:25:25,890 --> 00:25:31,030
and one of the things I thought about

00:25:28,059 --> 00:25:32,980
was getting rid of variables entirely

00:25:31,030 --> 00:25:33,880
because I found my kids had a lot of

00:25:32,980 --> 00:25:37,270
trouble getting their heads around

00:25:33,880 --> 00:25:39,309
variables and I started looking at data

00:25:37,270 --> 00:25:41,380
flow architectures which don't really

00:25:39,309 --> 00:25:42,040
have variables who just data flows from

00:25:41,380 --> 00:25:44,020
place to place

00:25:42,040 --> 00:25:45,760
I started looking at having a graphical

00:25:44,020 --> 00:25:47,980
programming language for that and so on

00:25:45,760 --> 00:25:50,650
I've ended up implementing this on the

00:25:47,980 --> 00:25:54,400
esp8266 and I implemented it the first

00:25:50,650 --> 00:25:56,169
time around in C and then I discovered

00:25:54,400 --> 00:25:57,490
that was far too much like hard work and

00:25:56,169 --> 00:25:59,890
I wasn't really doing this for hard work

00:25:57,490 --> 00:26:02,950
so I reimplemented in micro Python in a

00:25:59,890 --> 00:26:05,950
couple of days and what it does is it

00:26:02,950 --> 00:26:07,510
offers you're up first a web page with

00:26:05,950 --> 00:26:09,549
has a whole bunch of JavaScript in it

00:26:07,510 --> 00:26:12,760
and lets you manipulate these things on

00:26:09,549 --> 00:26:15,669
the screen and then what it does is it

00:26:12,760 --> 00:26:17,159
compiles that down to Python and one of

00:26:15,669 --> 00:26:20,639
the things that micro Python

00:26:17,159 --> 00:26:23,460
include is the compile function from

00:26:20,639 --> 00:26:25,169
Python so rather than run a virtual

00:26:23,460 --> 00:26:27,539
machine or anything like that which is

00:26:25,169 --> 00:26:29,609
what I had to do and see it just takes

00:26:27,539 --> 00:26:31,429
this program that you've written by

00:26:29,609 --> 00:26:34,289
connecting the bot boxes with lines

00:26:31,429 --> 00:26:37,649
turns it into Python compiles that

00:26:34,289 --> 00:26:39,299
Python and runs it in Python on a

00:26:37,649 --> 00:26:40,889
microcontroller and I just think that's

00:26:39,299 --> 00:26:42,749
fantastic that you can actually get away

00:26:40,889 --> 00:26:44,519
with doing that on such a tiny tiny

00:26:42,749 --> 00:26:47,099
platform you can get away with having

00:26:44,519 --> 00:26:50,029
that kind of meta programming approach

00:26:47,099 --> 00:26:52,859
and it just works

00:26:50,029 --> 00:26:54,899
the end result is that the code base is

00:26:52,859 --> 00:26:57,149
incredibly simple and my favorite thing

00:26:54,899 --> 00:26:59,399
about it is it means that if you kind of

00:26:57,149 --> 00:27:01,109
grow out of playing around with the toy

00:26:59,399 --> 00:27:03,179
graphical programming language there's a

00:27:01,109 --> 00:27:05,909
very very direct route to go from there

00:27:03,179 --> 00:27:07,109
to actually programming real Python you

00:27:05,909 --> 00:27:09,299
can take the thing you drew in this

00:27:07,109 --> 00:27:11,669
little sketch hey it's a Python program

00:27:09,299 --> 00:27:14,039
I can just run it directly instead so

00:27:11,669 --> 00:27:15,749
that's just an example of I guess what

00:27:14,039 --> 00:27:17,940
I've been working with on this platform

00:27:15,749 --> 00:27:19,859
all right in summary if you're

00:27:17,940 --> 00:27:21,509
interested in microcontrollers Internet

00:27:19,859 --> 00:27:22,440
of Things robotics anything in those

00:27:21,509 --> 00:27:25,590
general directions

00:27:22,440 --> 00:27:27,330
well esp8266 is are currently about the

00:27:25,590 --> 00:27:29,309
cheapest way you can possibly get into

00:27:27,330 --> 00:27:31,080
that and if you're interested in that

00:27:29,309 --> 00:27:32,639
stuff micro Python has got to be about

00:27:31,080 --> 00:27:34,619
the easiest way you can get into that

00:27:32,639 --> 00:27:38,119
stuff so I think that'd go fantastically

00:27:34,619 --> 00:27:38,119

YouTube URL: https://www.youtube.com/watch?v=C19fFU-TVWU


