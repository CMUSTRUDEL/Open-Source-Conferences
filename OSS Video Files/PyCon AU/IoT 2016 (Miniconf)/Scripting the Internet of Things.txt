Title: Scripting the Internet of Things
Publication date: 2016-08-16
Playlist: IoT 2016 (Miniconf)
Description: 
	Damien George
https://2016.pycon-au.org/schedule/202/view_talk
A big part of the Internet of Things are the end nodes, such as sensors, that    
are controlled by microcontrollers or other small computing devices. These    
devices are getting more and more sophisticated and it can be beneficial to    
program them with a scripting language instead of a low-level language like C.    
Such scripting languages need to be implemented specifically to fit and run on    
a microcontroller and in this talk I will discuss a few of them: Python, Lua,    
JavaScript and Ruby. I will talk in detail about MicroPython, a lean and    
efficient reimplementation of Python 3 with a reduced standard library, that    
runs on microcontrollers and can be used to build Internet-of-Things devices.    
There will be plenty of time in the talk for questions and open discussion.
Captions: 
	00:00:00,060 --> 00:00:04,980
welcome to the internet-of-things track

00:00:01,860 --> 00:00:08,599
thanks for coming to my talk my name is

00:00:04,980 --> 00:00:11,400
Damian George I'll give a brief history

00:00:08,599 --> 00:00:13,530
of me so that you can understand where

00:00:11,400 --> 00:00:16,800
I'm coming from before I go into the

00:00:13,530 --> 00:00:20,130
talk so I was actually born in Melbourne

00:00:16,800 --> 00:00:23,279
and did my PhD at Melbourne University

00:00:20,130 --> 00:00:26,609
in theoretical physics and also a

00:00:23,279 --> 00:00:29,660
computer engineering and then after

00:00:26,609 --> 00:00:32,070
finishing my PhD I moved to Amsterdam

00:00:29,660 --> 00:00:35,040
and worked there in theoretical physics

00:00:32,070 --> 00:00:38,010
in the Dutch research institute for for

00:00:35,040 --> 00:00:39,540
atomic physics doing things like extra

00:00:38,010 --> 00:00:43,260
dimensions and supersymmetry and

00:00:39,540 --> 00:00:46,350
cosmology and Higgs physics and then

00:00:43,260 --> 00:00:47,879
moved to Cambridge in the UK worked at

00:00:46,350 --> 00:00:52,440
the University of Cambridge on similar

00:00:47,879 --> 00:00:55,289
things you know what supersymmetry and

00:00:52,440 --> 00:00:58,829
the Higgs wasn't announced the discovery

00:00:55,289 --> 00:01:01,140
that Higgs particle at the LHC in Geneva

00:00:58,829 --> 00:01:03,350
and it was really great to be a

00:01:01,140 --> 00:01:06,840
physicist at that time to understand how

00:01:03,350 --> 00:01:10,670
the significance of such a discovery but

00:01:06,840 --> 00:01:13,229
during my time at Cambridge University I

00:01:10,670 --> 00:01:18,060
decided to do a Kickstarter just to see

00:01:13,229 --> 00:01:20,790
what it was like and implemented Python

00:01:18,060 --> 00:01:22,560
so it could run on very small embedded

00:01:20,790 --> 00:01:25,920
systems I'll talk all about this in the

00:01:22,560 --> 00:01:28,080
talk and that that sort of took over my

00:01:25,920 --> 00:01:31,710
life and I transitioned slowly from

00:01:28,080 --> 00:01:34,380
being a physicist to being a I guess a

00:01:31,710 --> 00:01:35,759
Python Easter or a computer scientist

00:01:34,380 --> 00:01:38,579
that I did not really know what I am

00:01:35,759 --> 00:01:41,009
anymore I'm just a mix of of scientist

00:01:38,579 --> 00:01:43,020
and researcher and programmer but it's

00:01:41,009 --> 00:01:44,250
all a lot of fun and in this talk I'll

00:01:43,020 --> 00:01:47,040
tell you a bit about the Internet of

00:01:44,250 --> 00:01:49,350
Things and how Python through micro

00:01:47,040 --> 00:01:52,439
Python can become a big part of the

00:01:49,350 --> 00:01:54,689
Internet of Things hopefully please do

00:01:52,439 --> 00:01:57,180
ask questions during the talk just and

00:01:54,689 --> 00:01:59,189
and and we can have a discussion there's

00:01:57,180 --> 00:02:01,770
lots of time for talking about things if

00:01:59,189 --> 00:02:03,119
you want to ask lots of questions I'm

00:02:01,770 --> 00:02:05,130
sure you all have different backgrounds

00:02:03,119 --> 00:02:07,770
and I'm not used to all the different

00:02:05,130 --> 00:02:09,479
backgrounds so if I'm skipping over

00:02:07,770 --> 00:02:12,470
something just just let me know and I'll

00:02:09,479 --> 00:02:12,470
explain it in more depth

00:02:13,200 --> 00:02:18,959
okay so as Lachlan said the Internet of

00:02:17,010 --> 00:02:20,760
Things is this buzzword that maybe not

00:02:18,959 --> 00:02:22,260
many people will understand even the

00:02:20,760 --> 00:02:24,239
people who invented the word I don't

00:02:22,260 --> 00:02:27,360
know who invented it but I don't really

00:02:24,239 --> 00:02:29,900
know what the Internet of Things is but

00:02:27,360 --> 00:02:32,660
I understand it by saying that it's

00:02:29,900 --> 00:02:36,120
microcontrollers or little computers

00:02:32,660 --> 00:02:38,220
combined with wireless communications or

00:02:36,120 --> 00:02:41,069
wireless connectivity so you put these

00:02:38,220 --> 00:02:46,620
two things together and I think that's

00:02:41,069 --> 00:02:48,239
that's really sort of the ground of the

00:02:46,620 --> 00:02:51,810
Internet of Things the basic hardware

00:02:48,239 --> 00:02:53,730
that underlies it and there are quite a

00:02:51,810 --> 00:02:55,290
few examples nowadays of the

00:02:53,730 --> 00:02:57,140
applications of using the Internet of

00:02:55,290 --> 00:03:00,000
Things if you want to call it that just

00:02:57,140 --> 00:03:02,130
little computers controlling things all

00:03:00,000 --> 00:03:03,690
over the place so I mean even even your

00:03:02,130 --> 00:03:05,459
toaster might have a little computer in

00:03:03,690 --> 00:03:06,989
it or or maybe it's not that smart but

00:03:05,459 --> 00:03:09,540
at least your washing machine and your

00:03:06,989 --> 00:03:11,099
fridge has a computer in it and these

00:03:09,540 --> 00:03:12,750
days more and more things have little

00:03:11,099 --> 00:03:14,700
computers in them or microcontrollers

00:03:12,750 --> 00:03:17,130
and if we connect them all together they

00:03:14,700 --> 00:03:19,769
can all communicate and you know this is

00:03:17,130 --> 00:03:22,170
sort of the the internet of things so

00:03:19,769 --> 00:03:23,910
for example lighting in homes so I think

00:03:22,170 --> 00:03:25,709
this is this is probably the first and

00:03:23,910 --> 00:03:27,840
really good example of a good

00:03:25,709 --> 00:03:30,359
application is you know you have your

00:03:27,840 --> 00:03:32,250
lights and you want to dim them or

00:03:30,359 --> 00:03:34,650
change their color for the mood and you

00:03:32,250 --> 00:03:37,590
can do that remotely with an app say or

00:03:34,650 --> 00:03:38,670
even with a dial on the wall but you're

00:03:37,590 --> 00:03:40,739
going to have to have a little

00:03:38,670 --> 00:03:42,930
microcontroller in the light which knows

00:03:40,739 --> 00:03:47,040
what the to adjust the intensity in the

00:03:42,930 --> 00:03:49,440
color and also another great use of that

00:03:47,040 --> 00:03:50,910
is as an alarm so to say wake you up in

00:03:49,440 --> 00:03:54,120
the morning all your lights can turn on

00:03:50,910 --> 00:03:56,010
or to alarm you or notification of an

00:03:54,120 --> 00:03:59,609
email the lights can flash red in your

00:03:56,010 --> 00:04:03,209
house so things like this things we

00:03:59,609 --> 00:04:04,880
haven't thought of before which the

00:04:03,209 --> 00:04:07,500
Internet of Things I think encompasses

00:04:04,880 --> 00:04:09,840
heating and cooling of home so you know

00:04:07,500 --> 00:04:11,510
adjusting a temperature of our an app or

00:04:09,840 --> 00:04:16,380
before you come home

00:04:11,510 --> 00:04:18,060
traffic monitoring so these days with

00:04:16,380 --> 00:04:20,549
more and more cars on the road you can't

00:04:18,060 --> 00:04:22,710
really build bigger roads at least in

00:04:20,549 --> 00:04:24,630
Europe where it's very congested already

00:04:22,710 --> 00:04:26,580
so the best thing you can do is to

00:04:24,630 --> 00:04:27,990
optimize traffic flow

00:04:26,580 --> 00:04:29,909
the best way to do that is to first

00:04:27,990 --> 00:04:31,349
understand what the traffic flow is and

00:04:29,909 --> 00:04:32,940
then you can say alright can we change

00:04:31,349 --> 00:04:35,819
the lights here and here to let them go

00:04:32,940 --> 00:04:37,409
through or can we optimize this lane so

00:04:35,819 --> 00:04:43,220
that it's only four cars going turning

00:04:37,409 --> 00:04:43,220
left for example don't need the slides

00:04:47,030 --> 00:04:57,379
it's it's that's better okay and okay

00:04:57,620 --> 00:05:00,659
what else

00:04:58,979 --> 00:05:02,419
farming so I think especially in

00:05:00,659 --> 00:05:05,460
Australia where the farms are massive

00:05:02,419 --> 00:05:06,719
you need a helicopter to go from you

00:05:05,460 --> 00:05:09,240
know the ranch to have to see where the

00:05:06,719 --> 00:05:10,919
cows are would be better if each cow had

00:05:09,240 --> 00:05:12,240
a little tracking device on them and you

00:05:10,919 --> 00:05:13,889
know you're sitting at home in your

00:05:12,240 --> 00:05:16,979
ranch and you're like well here is all

00:05:13,889 --> 00:05:18,930
my cows and you know if once maybe dead

00:05:16,979 --> 00:05:21,870
because it stopped moving for a day for

00:05:18,930 --> 00:05:23,849
example so if each each cow had a little

00:05:21,870 --> 00:05:26,490
micro controller GPS tracker and

00:05:23,849 --> 00:05:29,400
connecting to you know using some long

00:05:26,490 --> 00:05:31,949
range say Laura wife wireless technology

00:05:29,400 --> 00:05:35,310
to your base station it's very very

00:05:31,949 --> 00:05:38,150
feasible monitoring water levels and so

00:05:35,310 --> 00:05:42,120
on these are all really practical useful

00:05:38,150 --> 00:05:43,949
applications which help to you know

00:05:42,120 --> 00:05:46,440
improve efficiency say in farms or in

00:05:43,949 --> 00:05:47,969
traffic so they're not just well let's

00:05:46,440 --> 00:05:52,050
make our fridge connect to the internet

00:05:47,969 --> 00:05:54,029
for some random reason logistics as well

00:05:52,050 --> 00:05:55,830
so real-time tracking of containers if

00:05:54,029 --> 00:05:57,629
you're trapped if you've your logistics

00:05:55,830 --> 00:06:00,389
company and you want to track all of

00:05:57,629 --> 00:06:03,360
your goods movement of goods from all a

00:06:00,389 --> 00:06:05,610
to be around the world and you put a

00:06:03,360 --> 00:06:07,289
tracker in each powerup say you can

00:06:05,610 --> 00:06:09,150
monitor the temperature and the

00:06:07,289 --> 00:06:11,219
vibration and how long it's been sitting

00:06:09,150 --> 00:06:12,479
here and so on and and you can have

00:06:11,219 --> 00:06:13,800
really good information about where

00:06:12,479 --> 00:06:17,879
things are so again it improves

00:06:13,800 --> 00:06:19,199
efficiency in the systems so you can

00:06:17,879 --> 00:06:20,039
keep these things in mind when you're

00:06:19,199 --> 00:06:21,539
thinking about the Internet of Things

00:06:20,039 --> 00:06:24,979
there's many many other examples but

00:06:21,539 --> 00:06:29,520
it's just a few that I could think of

00:06:24,979 --> 00:06:32,699
okay so in these examples that I just

00:06:29,520 --> 00:06:35,460
gave what what is the but it's one of

00:06:32,699 --> 00:06:37,889
the things that's ubiquitous is that the

00:06:35,460 --> 00:06:40,350
N nodes so the sort of the fingertips of

00:06:37,889 --> 00:06:42,810
the Internet of Things so on left is

00:06:40,350 --> 00:06:45,330
just the temperature sensor which is

00:06:42,810 --> 00:06:48,090
connecting wirelessly to some other base

00:06:45,330 --> 00:06:51,030
station say and in the diagram here the

00:06:48,090 --> 00:06:53,130
circles are depicting the end nodes

00:06:51,030 --> 00:06:54,450
which is sort of the more the most

00:06:53,130 --> 00:06:55,740
important part because the other thing

00:06:54,450 --> 00:06:58,620
that collects the data like the

00:06:55,740 --> 00:07:01,050
temperature or the GPS location of

00:06:58,620 --> 00:07:04,710
something or the number of cars passing

00:07:01,050 --> 00:07:06,450
through your freeway or also they can be

00:07:04,710 --> 00:07:07,890
the actuators so they turn the lights on

00:07:06,450 --> 00:07:09,980
in your house or change the heating

00:07:07,890 --> 00:07:12,630
control so you've got sensors and

00:07:09,980 --> 00:07:14,370
actuators which can you know you can

00:07:12,630 --> 00:07:17,460
have both on the one node or just one or

00:07:14,370 --> 00:07:19,770
just the other and they all connect via

00:07:17,460 --> 00:07:22,800
maybe some hubs which are these hexagon

00:07:19,770 --> 00:07:27,960
shapes back to the real internet which

00:07:22,800 --> 00:07:31,440
is depicted by that red thing so these n

00:07:27,960 --> 00:07:33,360
nodes as you can see you have the most

00:07:31,440 --> 00:07:34,680
of them and the hubs are sort of just

00:07:33,360 --> 00:07:36,840
you know the the thing that gets things

00:07:34,680 --> 00:07:38,790
working but the connects things together

00:07:36,840 --> 00:07:41,700
but the the N nodes are the important

00:07:38,790 --> 00:07:44,310
things without them it doesn't work and

00:07:41,700 --> 00:07:49,920
so these are the things that we need to

00:07:44,310 --> 00:07:52,680
build and program and the problem with

00:07:49,920 --> 00:07:55,080
well one of the problems and also one of

00:07:52,680 --> 00:07:57,000
the benefits is that these n nodes are

00:07:55,080 --> 00:07:58,860
getting more and more complicated so

00:07:57,000 --> 00:08:00,780
this diagram here you don't expect you

00:07:58,860 --> 00:08:04,080
to read any of the text or anything but

00:08:00,780 --> 00:08:06,780
it's a it's a it's an overview of how

00:08:04,080 --> 00:08:08,370
the microcontroller works in one of in

00:08:06,780 --> 00:08:10,380
the pi board one thing which market

00:08:08,370 --> 00:08:13,050
paths and runs on which we'll talk about

00:08:10,380 --> 00:08:15,120
later but this is just the center so the

00:08:13,050 --> 00:08:17,310
CPU is a tiny little box up in the top

00:08:15,120 --> 00:08:19,980
left corner and the other things are

00:08:17,310 --> 00:08:23,010
like timers and GPIO ports and you arts

00:08:19,980 --> 00:08:24,900
and a DC converters and DAC converters

00:08:23,010 --> 00:08:28,530
so to convert voltages to digital and

00:08:24,900 --> 00:08:30,750
back and forth and this thing you know

00:08:28,530 --> 00:08:32,280
ten years ago this diagram would have

00:08:30,750 --> 00:08:34,229
been a quarter of or an eighth of the

00:08:32,280 --> 00:08:36,810
size and you could understand it and you

00:08:34,229 --> 00:08:39,060
would program it in assembler and it

00:08:36,810 --> 00:08:41,250
would be relatively easy to do and you

00:08:39,060 --> 00:08:42,900
would you know you return a light on and

00:08:41,250 --> 00:08:44,070
you would turn it off it was going on

00:08:42,900 --> 00:08:46,350
and off and there'd be no wireless

00:08:44,070 --> 00:08:49,410
connectivity but it was really simple

00:08:46,350 --> 00:08:50,550
but these days the microcontrollers are

00:08:49,410 --> 00:08:53,850
very very complicated

00:08:50,550 --> 00:08:55,980
they have DMA and IR cues and you

00:08:53,850 --> 00:08:58,800
you know how how do you understand how

00:08:55,980 --> 00:09:00,630
to use all of these things not only are

00:08:58,800 --> 00:09:03,089
the microcontrollers themselves so like

00:09:00,630 --> 00:09:04,920
the computer bits complicated but the

00:09:03,089 --> 00:09:06,209
attachments the sensors and the

00:09:04,920 --> 00:09:09,269
actuators are getting more and more

00:09:06,209 --> 00:09:11,069
complicated as well so you know you all

00:09:09,269 --> 00:09:12,630
probably have a smartphone with an

00:09:11,069 --> 00:09:15,420
accelerometer in its that detects the

00:09:12,630 --> 00:09:16,949
angle these accelerometers are also very

00:09:15,420 --> 00:09:19,730
complicated you know micro

00:09:16,949 --> 00:09:22,949
electromechanical sensors very

00:09:19,730 --> 00:09:24,360
sophisticated and you can do lots of

00:09:22,949 --> 00:09:26,040
stuff with them you can adjust the

00:09:24,360 --> 00:09:27,860
sensitivity you can make them interrupt

00:09:26,040 --> 00:09:30,899
you when they feel like they're falling

00:09:27,860 --> 00:09:33,360
and you can you can do many things with

00:09:30,899 --> 00:09:36,089
these things with these sensors and

00:09:33,360 --> 00:09:38,279
they're communicating via an i2c bus or

00:09:36,089 --> 00:09:40,440
an SPI bus which requires specific

00:09:38,279 --> 00:09:42,569
timing levels and sending the right

00:09:40,440 --> 00:09:44,490
commands so things get more and more

00:09:42,569 --> 00:09:45,720
complicated but also more advanced you

00:09:44,490 --> 00:09:49,319
have all these great features you have

00:09:45,720 --> 00:09:52,680
GPS and you have these accelerometers

00:09:49,319 --> 00:09:58,019
and you know fancy RGB lights which can

00:09:52,680 --> 00:10:00,019
go to 16 million different colors and so

00:09:58,019 --> 00:10:02,399
to use all of these things successfully

00:10:00,019 --> 00:10:05,490
and to be able to program them to make

00:10:02,399 --> 00:10:06,810
them do the things we want to do it

00:10:05,490 --> 00:10:09,630
takes a lot longer now if you're

00:10:06,810 --> 00:10:12,959
developing an application now we know

00:10:09,630 --> 00:10:15,899
from the PC side of things so just your

00:10:12,959 --> 00:10:17,160
laptop or your desktop that you know

00:10:15,899 --> 00:10:19,980
many many years ago we wrote in an

00:10:17,160 --> 00:10:22,410
assembler or C low-level C and the

00:10:19,980 --> 00:10:24,720
applications were simple and you do

00:10:22,410 --> 00:10:27,089
things that way but nowadays with the

00:10:24,720 --> 00:10:29,790
web and with really fast computers and

00:10:27,089 --> 00:10:32,550
with lots of sophisticated things you

00:10:29,790 --> 00:10:36,569
can do I mean what language do you use

00:10:32,550 --> 00:10:39,120
to program computers these days you use

00:10:36,569 --> 00:10:41,810
you'll use Python yes exactly all you

00:10:39,120 --> 00:10:44,430
use you know other things like Java or

00:10:41,810 --> 00:10:46,199
orgo or you know all these new languages

00:10:44,430 --> 00:10:49,259
that are coming out but you use a much

00:10:46,199 --> 00:10:50,730
more higher level language because it

00:10:49,259 --> 00:10:53,279
allows you to have better productivity

00:10:50,730 --> 00:10:55,139
and get more out of the hardware so yes

00:10:53,279 --> 00:10:57,750
the higher-level language sometimes uses

00:10:55,139 --> 00:11:00,089
more resources but you're trading off

00:10:57,750 --> 00:11:02,670
your computer program a time here so

00:11:00,089 --> 00:11:04,620
time to actually produce something if

00:11:02,670 --> 00:11:07,529
you want to make it I mean in the olden

00:11:04,620 --> 00:11:09,389
days you know many many 40 years ago

00:11:07,529 --> 00:11:11,129
you could because your computing

00:11:09,389 --> 00:11:14,040
resources so expensive you could spend

00:11:11,129 --> 00:11:15,749
many many man months developing and

00:11:14,040 --> 00:11:17,610
optimizing the assembler code so that it

00:11:15,749 --> 00:11:20,100
would run efficiently but these days

00:11:17,610 --> 00:11:21,930
it's the other way around you spend the

00:11:20,100 --> 00:11:24,059
money on the hardware and the programmer

00:11:21,930 --> 00:11:25,529
is expensive so you only want them to

00:11:24,059 --> 00:11:27,779
program for say an hour to make

00:11:25,529 --> 00:11:29,550
something work and so using a high-level

00:11:27,779 --> 00:11:34,889
language even if it's not as efficient

00:11:29,550 --> 00:11:37,589
in execution is the way to go so that's

00:11:34,889 --> 00:11:39,300
the argument for high-level languages

00:11:37,589 --> 00:11:41,579
and we're applying that now to these

00:11:39,300 --> 00:11:43,110
micro controllers so their complexity is

00:11:41,579 --> 00:11:44,879
increasing

00:11:43,110 --> 00:11:48,209
to fully understand one of these

00:11:44,879 --> 00:11:49,949
diagrams and and really make the most of

00:11:48,209 --> 00:11:51,779
all the hardware in assembler is really

00:11:49,949 --> 00:11:53,519
really tough no one knew even programs

00:11:51,779 --> 00:11:56,699
these in assembler anymore really you

00:11:53,519 --> 00:11:58,259
use C or C++ at the very minimum maybe

00:11:56,699 --> 00:12:02,600
with the sprinkle of assembler here and

00:11:58,259 --> 00:12:05,999
there but even to understand it in C

00:12:02,600 --> 00:12:08,009
there's lots and lots of tricks that you

00:12:05,999 --> 00:12:09,660
have to learn and you know you might

00:12:08,009 --> 00:12:12,990
have your program running okay but then

00:12:09,660 --> 00:12:14,699
for some reason the DMA is slow and

00:12:12,990 --> 00:12:16,769
you've got to understand why and you've

00:12:14,699 --> 00:12:21,209
got to synchronize that everything the

00:12:16,769 --> 00:12:24,059
timers so let's try and use a high-level

00:12:21,209 --> 00:12:25,559
language like Python instead to provide

00:12:24,059 --> 00:12:28,740
a better programming experience for

00:12:25,559 --> 00:12:31,500
these devices so it's easier to for you

00:12:28,740 --> 00:12:33,720
to read code then if you see you know it

00:12:31,500 --> 00:12:34,829
says GPIO dot on you understand what's

00:12:33,720 --> 00:12:38,610
going on there and you know how to

00:12:34,829 --> 00:12:40,019
change it to say GPIO off the

00:12:38,610 --> 00:12:42,569
abstraction of hardware is better

00:12:40,019 --> 00:12:45,149
because you're encapsulating a

00:12:42,569 --> 00:12:47,339
complicated thing like an analog to

00:12:45,149 --> 00:12:51,120
digital converter in an object which you

00:12:47,339 --> 00:12:52,829
can just read the value from and you can

00:12:51,120 --> 00:12:54,929
then hopefully make your scripts

00:12:52,829 --> 00:12:57,600
portable to another microcontroller that

00:12:54,929 --> 00:13:00,240
has a totally different architecture but

00:12:57,600 --> 00:13:02,670
it has the same Python bindings the same

00:13:00,240 --> 00:13:05,579
Python IDE API for all of the

00:13:02,670 --> 00:13:07,649
peripherals you know roughly the same so

00:13:05,579 --> 00:13:10,740
your knowledge is much more transferable

00:13:07,649 --> 00:13:12,629
to other microcontrollers unlike bean

00:13:10,740 --> 00:13:16,199
seeds it's much harder to go from one

00:13:12,629 --> 00:13:20,610
say from one vendor to another vendor

00:13:16,199 --> 00:13:21,360
like from Nordic to st they have

00:13:20,610 --> 00:13:23,310
completely different

00:13:21,360 --> 00:13:25,230
protectors in their chips but if you

00:13:23,310 --> 00:13:27,420
have our high-level language which

00:13:25,230 --> 00:13:29,160
exposes the same API on the two chips

00:13:27,420 --> 00:13:32,459
then you know how to program lots of

00:13:29,160 --> 00:13:34,380
different things rapid prototyping it's

00:13:32,459 --> 00:13:36,959
much easier to you know get something

00:13:34,380 --> 00:13:40,589
working straightaway using Python than

00:13:36,959 --> 00:13:42,779
it is using C because there's no there's

00:13:40,589 --> 00:13:44,130
no compilation you have a prompt and you

00:13:42,779 --> 00:13:44,820
can just turn lights on and off at the

00:13:44,130 --> 00:13:48,899
prompt

00:13:44,820 --> 00:13:51,360
I mean I'll show demos of this later on

00:13:48,899 --> 00:13:54,149
oh yeah and we can reuse libraries so

00:13:51,360 --> 00:13:56,130
python is known to have well is famous I

00:13:54,149 --> 00:13:58,440
guess for having everything probably

00:13:56,130 --> 00:14:01,800
also the kitchen sink included in all of

00:13:58,440 --> 00:14:04,050
its libraries and those are pretty much

00:14:01,800 --> 00:14:06,329
then portable to your microcontroller so

00:14:04,050 --> 00:14:08,100
if you need to you know serialize using

00:14:06,329 --> 00:14:09,630
JSON you can do it you know how to do it

00:14:08,100 --> 00:14:14,010
you know you don't have to learn another

00:14:09,630 --> 00:14:15,600
way of serializing in JSON okay so this

00:14:14,010 --> 00:14:19,950
is the argument for scripting languages

00:14:15,600 --> 00:14:26,910
are there any questions or comments so

00:14:19,950 --> 00:14:28,860
far okay so I'm going to go through I

00:14:26,910 --> 00:14:29,699
know this is a Python conference but I'm

00:14:28,860 --> 00:14:31,649
going to go through a few other

00:14:29,699 --> 00:14:34,980
scripting languages just because we're

00:14:31,649 --> 00:14:36,899
open-minded people and explain you know

00:14:34,980 --> 00:14:38,459
what the state of it the state of the

00:14:36,899 --> 00:14:42,779
art is for these other languages as well

00:14:38,459 --> 00:14:45,449
so Lua is probably the more not well

00:14:42,779 --> 00:14:50,750
known language for embedding so it's

00:14:45,449 --> 00:14:53,910
used a lot in games to script games and

00:14:50,750 --> 00:14:55,500
Ulua is a version of Lua which is made

00:14:53,910 --> 00:14:58,230
for embedded systems hence the e

00:14:55,500 --> 00:15:00,089
embedded Lua and it's sort of an

00:14:58,230 --> 00:15:02,910
optimized version of Lua so that it's a

00:15:00,089 --> 00:15:04,890
bit uses less RAM and it also includes

00:15:02,910 --> 00:15:06,510
the ability to run on my hook

00:15:04,890 --> 00:15:08,699
controllers directly and control the

00:15:06,510 --> 00:15:12,300
hardware like turn lights on and off or

00:15:08,699 --> 00:15:13,740
turn GPIO on and off for example there's

00:15:12,300 --> 00:15:17,029
a snippet here just in case you haven't

00:15:13,740 --> 00:15:20,750
seen a little before factorial function

00:15:17,029 --> 00:15:25,050
and down the bottom there's how to say I

00:15:20,750 --> 00:15:28,920
turn a pin on and off using using the

00:15:25,050 --> 00:15:30,959
functions so it's it's a rather so it's

00:15:28,920 --> 00:15:33,540
a simple language which I guess is a pro

00:15:30,959 --> 00:15:35,100
because it's not hard to learn and it's

00:15:33,540 --> 00:15:36,900
also a pro because it

00:15:35,100 --> 00:15:38,280
it's it's it will fit easily on a

00:15:36,900 --> 00:15:41,160
microcontroller it doesn't use too much

00:15:38,280 --> 00:15:43,650
memory and it's quite lightweight and

00:15:41,160 --> 00:15:46,470
fast and efficient when it's running so

00:15:43,650 --> 00:15:49,740
a lure is a very is a very very small

00:15:46,470 --> 00:15:52,050
language with a nice implementation and

00:15:49,740 --> 00:15:54,660
that's I guess also a con in that the

00:15:52,050 --> 00:15:57,660
being a simple language you sort of get

00:15:54,660 --> 00:15:59,490
to the boundaries very quickly and you

00:15:57,660 --> 00:16:01,590
know there's there's not much room to

00:15:59,490 --> 00:16:03,720
move and to do more advanced things I

00:16:01,590 --> 00:16:05,790
mean it it has it has closures and it

00:16:03,720 --> 00:16:09,210
has objects you've got to sort of

00:16:05,790 --> 00:16:11,070
implement them yourself a little bit but

00:16:09,210 --> 00:16:12,630
it's definitely not as big and as

00:16:11,070 --> 00:16:16,650
powerful thing which is Python for

00:16:12,630 --> 00:16:18,110
example it doesn't really have integers

00:16:16,650 --> 00:16:20,400
either everything is a floating-point

00:16:18,110 --> 00:16:24,210
although this was recently fixed in a

00:16:20,400 --> 00:16:26,550
very new version of Lua and there's no

00:16:24,210 --> 00:16:28,080
native bitwise operations so for example

00:16:26,550 --> 00:16:30,900
on a microcontroller you'd often want to

00:16:28,080 --> 00:16:33,360
do you want from want to do and or or or

00:16:30,900 --> 00:16:35,460
XOR operations because you're working

00:16:33,360 --> 00:16:38,070
with bits a lot of the time and they're

00:16:35,460 --> 00:16:40,050
very natural operations to use and in

00:16:38,070 --> 00:16:41,460
lower well they've actually only just

00:16:40,050 --> 00:16:44,010
recently introduced these bitwise

00:16:41,460 --> 00:16:45,450
operations whereas in Python for example

00:16:44,010 --> 00:16:49,980
they've been there since I think the

00:16:45,450 --> 00:16:51,870
beginning and Ulua is currently being

00:16:49,980 --> 00:16:55,530
used I think it became most popular in

00:16:51,870 --> 00:16:57,420
IOT within this esp8266 chip which

00:16:55,530 --> 00:16:59,250
you'll hear a lot about in the next

00:16:57,420 --> 00:17:04,110
couple of hours from me and the next

00:16:59,250 --> 00:17:07,890
speaker and yeah this node MCU was sort

00:17:04,110 --> 00:17:10,430
of the brand and they used Aloha to

00:17:07,890 --> 00:17:13,550
provide really simple Wi-Fi our

00:17:10,430 --> 00:17:18,390
programming on this ESP chip

00:17:13,550 --> 00:17:20,089
so that's Lua the next language is you

00:17:18,390 --> 00:17:22,770
could probably have guessed JavaScript

00:17:20,089 --> 00:17:25,189
so I mean I guess JavaScript is probably

00:17:22,770 --> 00:17:27,420
the most popular language and that's by

00:17:25,189 --> 00:17:31,110
default I guess because you've got to

00:17:27,420 --> 00:17:33,690
use it to program the Internet but

00:17:31,110 --> 00:17:37,350
javascript has also seen a lot of work

00:17:33,690 --> 00:17:39,540
in making it run in smaller by small

00:17:37,350 --> 00:17:43,110
places with low memory and on micro

00:17:39,540 --> 00:17:47,310
controls as well for me probably the

00:17:43,110 --> 00:17:48,510
most well the most important one is s

00:17:47,310 --> 00:17:51,630
Perino

00:17:48,510 --> 00:17:54,560
which is so the Creator Gordon Williams

00:17:51,630 --> 00:17:58,680
is a friend a friend of mine I guess and

00:17:54,560 --> 00:18:01,050
because he was in the UK and he he wrote

00:17:58,680 --> 00:18:02,640
s Perino which is a version of

00:18:01,050 --> 00:18:04,920
JavaScript that runs on microcontrollers

00:18:02,640 --> 00:18:08,250
and he did a Kickstarter to sort of get

00:18:04,920 --> 00:18:10,530
it out there and and produce this board

00:18:08,250 --> 00:18:13,740
that you can see on the left and did

00:18:10,530 --> 00:18:17,550
very well and it was sort of he beat he

00:18:13,740 --> 00:18:20,220
beat micro Python maybe by it was maybe

00:18:17,550 --> 00:18:21,870
three or four months in the Kickstarter

00:18:20,220 --> 00:18:23,520
so I was very nervous when I saw his I'm

00:18:21,870 --> 00:18:26,190
like wow he's done what I was about to

00:18:23,520 --> 00:18:28,110
do and he's done it with JavaScript and

00:18:26,190 --> 00:18:29,580
now I have to compete with Python but no

00:18:28,110 --> 00:18:32,070
I think it's great having two different

00:18:29,580 --> 00:18:34,620
languages evolving together so people

00:18:32,070 --> 00:18:36,720
have an option people also see that hey

00:18:34,620 --> 00:18:39,240
scripting languages on microcontrollers

00:18:36,720 --> 00:18:41,430
is not this just one small thing

00:18:39,240 --> 00:18:44,010
actually lots of languages trying to do

00:18:41,430 --> 00:18:44,850
it now and we can all also learn from

00:18:44,010 --> 00:18:47,760
each other

00:18:44,850 --> 00:18:49,020
you know the JavaScript has things we

00:18:47,760 --> 00:18:50,820
can learn from and python has things

00:18:49,020 --> 00:18:54,030
they can learn from us so there's been a

00:18:50,820 --> 00:18:56,690
lot of good cross-fertilization I guess

00:18:54,030 --> 00:18:58,830
you could say between the languages

00:18:56,690 --> 00:19:00,300
there's other things Jerry script which

00:18:58,830 --> 00:19:02,610
is sponsored by Samsung which is a

00:19:00,300 --> 00:19:05,430
rewrite of JavaScript to be efficient

00:19:02,610 --> 00:19:07,020
but I think s Perino runs in smaller

00:19:05,430 --> 00:19:08,670
places than Jerry's script although

00:19:07,020 --> 00:19:10,710
javascript has a lot of active

00:19:08,670 --> 00:19:12,810
development at the moment tehsil is

00:19:10,710 --> 00:19:14,610
another one duck tape is an embeddable

00:19:12,810 --> 00:19:16,800
javascript and I think there's even more

00:19:14,610 --> 00:19:21,690
you can look those websites up if you're

00:19:16,800 --> 00:19:24,840
interested and here in blue is a little

00:19:21,690 --> 00:19:30,180
example from s Purina of how to make an

00:19:24,840 --> 00:19:31,710
LED flash randomly you can you can look

00:19:30,180 --> 00:19:34,440
at that and understand it yourselves

00:19:31,710 --> 00:19:36,210
I guess the pros about JavaScript is

00:19:34,440 --> 00:19:38,730
it's a very popular language as you know

00:19:36,210 --> 00:19:40,770
and it has a large community lots of

00:19:38,730 --> 00:19:43,080
online presence for learning people

00:19:40,770 --> 00:19:44,460
already know it I guess and it's a

00:19:43,080 --> 00:19:45,870
simple language but it's still there

00:19:44,460 --> 00:19:47,820
it's I think it's more powerful than

00:19:45,870 --> 00:19:51,870
lower butt but it's still very simple in

00:19:47,820 --> 00:19:53,790
its description the cons well there have

00:19:51,870 --> 00:19:56,240
some very crazy semantics in JavaScript

00:19:53,790 --> 00:19:58,370
about coercion of objects and

00:19:56,240 --> 00:20:02,340
understanding the scope of things

00:19:58,370 --> 00:20:04,140
enclosures it's all callback based you

00:20:02,340 --> 00:20:06,299
I'd say that's a pro it could be a pro

00:20:04,140 --> 00:20:08,250
but it means that your code ends up

00:20:06,299 --> 00:20:10,470
really messy if you have a lot of big

00:20:08,250 --> 00:20:12,390
program because you have to say well

00:20:10,470 --> 00:20:13,919
when someone connects this socket do

00:20:12,390 --> 00:20:15,809
this callback but if there's an arrow do

00:20:13,919 --> 00:20:17,309
this callback and then the state will

00:20:15,809 --> 00:20:20,580
change and then I want to change the

00:20:17,309 --> 00:20:22,230
callback and it unlike Python for

00:20:20,580 --> 00:20:25,350
example which is more procedural and

00:20:22,230 --> 00:20:26,909
it's flow the other thing with

00:20:25,350 --> 00:20:28,529
JavaScript is that all numbers are

00:20:26,909 --> 00:20:31,140
floats so I mentioned this with lower

00:20:28,529 --> 00:20:34,049
but so that the problem with all numbers

00:20:31,140 --> 00:20:36,539
being floats so that in in JavaScript if

00:20:34,049 --> 00:20:37,260
you should do one it's one that's that's

00:20:36,539 --> 00:20:39,000
that's good

00:20:37,260 --> 00:20:41,279
but it's actually stored as a double

00:20:39,000 --> 00:20:43,440
internally a double precision floating

00:20:41,279 --> 00:20:45,659
point number and if I do one plus one

00:20:43,440 --> 00:20:47,630
I'll get two if I do two plus one I'll

00:20:45,659 --> 00:20:50,429
get three but if I keep adding

00:20:47,630 --> 00:20:51,840
eventually it won't work anymore so if I

00:20:50,429 --> 00:20:54,480
have you know ten to the nine plus one

00:20:51,840 --> 00:20:57,149
it just stays 10 to the nine or I think

00:20:54,480 --> 00:20:59,159
it's a bit less more than that but you

00:20:57,149 --> 00:21:01,350
eventually can't add one anymore because

00:20:59,159 --> 00:21:04,590
it's storing it as a double precision

00:21:01,350 --> 00:21:06,330
number and this is not really good I

00:21:04,590 --> 00:21:08,669
don't think for microcontrollers because

00:21:06,330 --> 00:21:10,380
you want things to be precise and you

00:21:08,669 --> 00:21:12,899
want to be able to sort count you know

00:21:10,380 --> 00:21:14,130
events number of cars passing by and you

00:21:12,899 --> 00:21:15,750
don't want to roll over at a billion

00:21:14,130 --> 00:21:20,490
cars or you know not be able to add

00:21:15,750 --> 00:21:21,840
anymore for example in Python there is a

00:21:20,490 --> 00:21:23,340
good distinction between floats and

00:21:21,840 --> 00:21:24,960
integers and the integers are arbitrary

00:21:23,340 --> 00:21:27,419
precision so I can keep adding one

00:21:24,960 --> 00:21:32,010
forever I use more and more memory but I

00:21:27,419 --> 00:21:35,250
can keep adding one and so uses in the

00:21:32,010 --> 00:21:37,580
IOT at the moment so as I said the S

00:21:35,250 --> 00:21:41,850
Perino is being used it had there's a

00:21:37,580 --> 00:21:44,610
this puck j/s which is a recently third

00:21:41,850 --> 00:21:46,590
Kickstarter of Gordon's there's a little

00:21:44,610 --> 00:21:48,809
Bluetooth thing which allows you to you

00:21:46,590 --> 00:21:51,840
know press a button and remotely control

00:21:48,809 --> 00:21:55,169
something there's also this ESP board

00:21:51,840 --> 00:21:57,419
which runs s Bruno and other JavaScript

00:21:55,169 --> 00:21:59,460
implementations the Tesla boards have

00:21:57,419 --> 00:22:00,929
built-in Wi-Fi so there's been a lot of

00:21:59,460 --> 00:22:03,720
work with javascript in the internet of

00:22:00,929 --> 00:22:06,210
things and this is just on the sort of

00:22:03,720 --> 00:22:08,220
the end nodes I mean there's also a lot

00:22:06,210 --> 00:22:10,230
more with nodejs on the backend and

00:22:08,220 --> 00:22:16,220
stuff but some we're just talking about

00:22:10,230 --> 00:22:16,220
the nodes here any questions

00:22:19,020 --> 00:22:27,130
okay the last language here on this list

00:22:23,130 --> 00:22:28,890
is Ruby which has also seen a lot of use

00:22:27,130 --> 00:22:32,380
in the internet with Ruby on Rails

00:22:28,890 --> 00:22:34,840
development and there's this it's it's

00:22:32,380 --> 00:22:37,330
kind of small in the font but M Ruby is

00:22:34,840 --> 00:22:40,660
a lightweight implementation of the Ruby

00:22:37,330 --> 00:22:43,960
language which can be embedded in other

00:22:40,660 --> 00:22:45,490
applications and also the idea is so

00:22:43,960 --> 00:22:47,560
that it can run on microcontrollers but

00:22:45,490 --> 00:22:49,960
there's no support yet for it although

00:22:47,560 --> 00:22:51,220
this is quite a popular M Ruby is quite

00:22:49,960 --> 00:22:53,650
popular because it was sponsored by the

00:22:51,220 --> 00:22:55,180
Japanese government for development

00:22:53,650 --> 00:22:58,540
it hasn't really seen use on

00:22:55,180 --> 00:23:01,390
microcontrollers yet but I mean Ruby is

00:22:58,540 --> 00:23:04,590
a nice is a nice language so maybe it

00:23:01,390 --> 00:23:11,140
will see more use in the future okay

00:23:04,590 --> 00:23:13,780
just all right so now of course we're at

00:23:11,140 --> 00:23:15,310
a Python conference so we have to talk

00:23:13,780 --> 00:23:18,460
about Python but that's that's the main

00:23:15,310 --> 00:23:21,340
reason I'm here so what about Python and

00:23:18,460 --> 00:23:22,890
microcontrollers well so that was my

00:23:21,340 --> 00:23:27,550
question

00:23:22,890 --> 00:23:29,050
almost yeah three years ago I guess is

00:23:27,550 --> 00:23:31,870
it possible to make Python run on the

00:23:29,050 --> 00:23:34,720
microcontroller now why why is that a

00:23:31,870 --> 00:23:36,730
hard thing to do it's because python

00:23:34,720 --> 00:23:38,830
uses a lot of memory and it's it's quite

00:23:36,730 --> 00:23:41,320
a large program it's a large language it

00:23:38,830 --> 00:23:42,970
has lots of features lots of libraries

00:23:41,320 --> 00:23:45,520
lots of built-in stuff you can do with

00:23:42,970 --> 00:23:48,130
it as you know I mean I'm sure all of

00:23:45,520 --> 00:23:50,230
you have used Python before or maybe not

00:23:48,130 --> 00:23:52,690
but if it's some it does have a lot of

00:23:50,230 --> 00:23:54,250
features so that makes it hard to make

00:23:52,690 --> 00:23:55,840
it run in a small constrained

00:23:54,250 --> 00:24:00,340
environment so just to give you an

00:23:55,840 --> 00:24:02,470
example then the amount of code space

00:24:00,340 --> 00:24:06,880
we're talking about is about 256

00:24:02,470 --> 00:24:11,140
kilobytes so 256 K is your entire sort

00:24:06,880 --> 00:24:14,500
of hard drive space as it were and the

00:24:11,140 --> 00:24:16,270
amount of RAM say 64 kilobytes of RAM so

00:24:14,500 --> 00:24:18,430
that's how much RAM you have to play

00:24:16,270 --> 00:24:21,640
with for everything for your stack and

00:24:18,430 --> 00:24:22,900
for your heap so those are the sorts of

00:24:21,640 --> 00:24:26,190
numbers talking about when we want to

00:24:22,900 --> 00:24:28,669
run these languages on on these chips

00:24:26,190 --> 00:24:30,019
and

00:24:28,669 --> 00:24:32,299
I don't know if I have to motivate

00:24:30,019 --> 00:24:34,519
Python for this for this audience but

00:24:32,299 --> 00:24:37,549
here is a list of things that that I can

00:24:34,519 --> 00:24:39,980
use to motivate people say who like

00:24:37,549 --> 00:24:41,600
JavaScript I can say that no Python is a

00:24:39,980 --> 00:24:44,090
very high level languages lots of really

00:24:41,600 --> 00:24:46,999
awesome features like closures list

00:24:44,090 --> 00:24:49,669
comprehension and generators and really

00:24:46,999 --> 00:24:51,259
advanced exception handling has massive

00:24:49,669 --> 00:24:53,059
library which is really great

00:24:51,259 --> 00:24:54,379
so once you've learned the library you

00:24:53,059 --> 00:24:57,859
know how to do lots of stuff very

00:24:54,379 --> 00:25:00,230
quickly the community is really amazing

00:24:57,859 --> 00:25:03,169
it's very big conferences all around the

00:25:00,230 --> 00:25:04,759
world like this like this one a very

00:25:03,169 --> 00:25:06,679
friendly community and lots of online

00:25:04,759 --> 00:25:09,139
presence lots of learning tools for

00:25:06,679 --> 00:25:10,369
students for all you know a whole range

00:25:09,139 --> 00:25:13,070
of people

00:25:10,369 --> 00:25:16,509
I think Python is very easy to learn in

00:25:13,070 --> 00:25:19,159
fact it was so Python was actually

00:25:16,509 --> 00:25:21,649
invented by a Dutch person Guido who you

00:25:19,159 --> 00:25:23,539
know who actually actually next door

00:25:21,649 --> 00:25:25,940
where I worked in Amsterdam there was

00:25:23,539 --> 00:25:29,720
the information center next door to the

00:25:25,940 --> 00:25:34,519
physics Center but that was long before

00:25:29,720 --> 00:25:36,499
I was there and Guido when he designed

00:25:34,519 --> 00:25:37,970
Python he wanted to make it easy for

00:25:36,499 --> 00:25:39,919
teaching people he wanted it to be a

00:25:37,970 --> 00:25:42,499
teaching language so he made it very

00:25:39,919 --> 00:25:44,179
soon you know simple to understand but

00:25:42,499 --> 00:25:46,399
as time has gone on it's also become a

00:25:44,179 --> 00:25:48,320
very very powerful language and I think

00:25:46,399 --> 00:25:50,299
I think Python what I would say has a

00:25:48,320 --> 00:25:52,879
very very shallow but a very long

00:25:50,299 --> 00:25:55,190
learning curve so you can jump on and

00:25:52,879 --> 00:25:57,259
start very easily but as you go you

00:25:55,190 --> 00:25:58,879
learn more and more and even ten years

00:25:57,259 --> 00:26:00,379
later you're still learning and going up

00:25:58,879 --> 00:26:02,230
this curve and understanding you know

00:26:00,379 --> 00:26:05,809
the advanced meta classes and all these

00:26:02,230 --> 00:26:08,480
libraries that you know are hidden in

00:26:05,809 --> 00:26:09,799
the back so I think it's a great

00:26:08,480 --> 00:26:11,659
language for beginners and advanced

00:26:09,799 --> 00:26:13,070
users I mean even today I still list all

00:26:11,659 --> 00:26:16,359
things I learn about Python even though

00:26:13,070 --> 00:26:18,619
I've implemented a version of it so I

00:26:16,359 --> 00:26:21,529
think it's a it's a good language for

00:26:18,619 --> 00:26:22,999
those reasons and yeah it's also it's

00:26:21,529 --> 00:26:25,460
also pretty good for microcontrollers

00:26:22,999 --> 00:26:27,049
because native bit was operations good

00:26:25,460 --> 00:26:30,080
separation between fighting point and

00:26:27,049 --> 00:26:31,519
integers which is important really

00:26:30,080 --> 00:26:33,139
robust exception handling which is

00:26:31,519 --> 00:26:34,759
important in these environments because

00:26:33,139 --> 00:26:36,350
you know you want your light to always

00:26:34,759 --> 00:26:37,879
turn on when you turn off when you when

00:26:36,350 --> 00:26:41,269
you press the on button you don't want

00:26:37,879 --> 00:26:42,260
it to crash and so it's important to be

00:26:41,269 --> 00:26:47,300
able to handle it

00:26:42,260 --> 00:26:48,830
options well okay so the I guess the

00:26:47,300 --> 00:26:50,360
question is why can't we just take

00:26:48,830 --> 00:26:53,870
normal Python and run it on a

00:26:50,360 --> 00:26:56,480
microcontroller or the other version of

00:26:53,870 --> 00:26:58,760
norm of patterns like pi PI

00:26:56,480 --> 00:27:02,300
so see python is the normal Python most

00:26:58,760 --> 00:27:05,870
people use on your PC when you run

00:27:02,300 --> 00:27:07,430
Python now the problem the problem with

00:27:05,870 --> 00:27:09,080
c python running on a microcontroller is

00:27:07,430 --> 00:27:12,500
that it just uses a lot of memory that's

00:27:09,080 --> 00:27:16,580
really the main thing it for example

00:27:12,500 --> 00:27:19,940
every integer like the number 1 takes 16

00:27:16,580 --> 00:27:21,500
bytes of memory of heap memory because

00:27:19,940 --> 00:27:24,140
it's got to have a pointer to its type

00:27:21,500 --> 00:27:28,910
being an integer a reference count and

00:27:24,140 --> 00:27:31,550
then the actual value and when python

00:27:28,910 --> 00:27:37,100
starts up it actually creates all the

00:27:31,550 --> 00:27:38,120
integers from minus 5 to plus 256 so

00:27:37,100 --> 00:27:39,440
that they're efficient they're already

00:27:38,120 --> 00:27:42,230
there because you know those numbers are

00:27:39,440 --> 00:27:44,720
most commonly used normally I do in a 1

00:27:42,230 --> 00:27:46,160
plus 1 and I get 2 and those numbers are

00:27:44,720 --> 00:27:49,250
already there they're already created

00:27:46,160 --> 00:27:51,290
for me so it's not slow to create them

00:27:49,250 --> 00:27:53,780
but it means that you use about 4

00:27:51,290 --> 00:27:56,720
kilobytes of memory just to start up to

00:27:53,780 --> 00:27:58,130
create the numbers and there's a lot

00:27:56,720 --> 00:28:01,850
more memory that's used to import

00:27:58,130 --> 00:28:04,010
modules and build the the initial

00:28:01,850 --> 00:28:05,810
dictionaries for lots of different

00:28:04,010 --> 00:28:07,490
things so when python starts up it uses

00:28:05,810 --> 00:28:08,930
a lot of memory i'm not quite sure what

00:28:07,490 --> 00:28:11,300
the number is but i know at least that

00:28:08,930 --> 00:28:13,100
it uses 4 cave just for the integers and

00:28:11,300 --> 00:28:16,730
on a microcontroller that's not really

00:28:13,100 --> 00:28:20,900
acceptable when you do a method call if

00:28:16,730 --> 00:28:22,970
you do LED dot on it actually it takes

00:28:20,900 --> 00:28:25,310
the LED object extracts the arm method

00:28:22,970 --> 00:28:27,440
and then creates a bound method object

00:28:25,310 --> 00:28:29,180
which you then call so there's this

00:28:27,440 --> 00:28:33,020
intermediary object which is allocated

00:28:29,180 --> 00:28:35,780
in memory which which takes about 20

00:28:33,020 --> 00:28:38,360
bytes as I've written here so to do LED

00:28:35,780 --> 00:28:40,100
dot intensity 1000 I have to allocate

00:28:38,360 --> 00:28:42,260
the number 1000 and I have to allocate

00:28:40,100 --> 00:28:45,320
an object for the LED dot intensity

00:28:42,260 --> 00:28:48,830
method and so I'm using 36 bytes of RAM

00:28:45,320 --> 00:28:50,690
just to do this little operation so 36

00:28:48,830 --> 00:28:51,800
bytes Rams not too much but if you're

00:28:50,690 --> 00:28:53,300
running this thousands of times per

00:28:51,800 --> 00:28:55,970
second or even millions of times per

00:28:53,300 --> 00:28:57,769
second if you want to try and

00:28:55,970 --> 00:28:59,179
run it at full speed you're going to

00:28:57,769 --> 00:29:01,070
churn through round very quickly and

00:28:59,179 --> 00:29:05,419
have to run the garbage collector again

00:29:01,070 --> 00:29:08,629
and again and again it's not good so the

00:29:05,419 --> 00:29:10,250
idea is to get rid of these well is to

00:29:08,629 --> 00:29:11,539
change the way path of work so it

00:29:10,250 --> 00:29:15,500
doesn't have to do all of this

00:29:11,539 --> 00:29:17,090
I mean python has been optimized well I

00:29:15,500 --> 00:29:18,259
wrote this slides probably a couple of

00:29:17,090 --> 00:29:20,750
years ago and they're still true

00:29:18,259 --> 00:29:22,639
although the LED dot intensity example I

00:29:20,750 --> 00:29:25,820
think they're introducing a new opcode

00:29:22,639 --> 00:29:31,100
so that that's optimized but that's very

00:29:25,820 --> 00:29:33,470
very recent okay so I so the aim was

00:29:31,100 --> 00:29:35,600
macro Python was to make Python run on a

00:29:33,470 --> 00:29:37,100
microcontroller and in the end it ended

00:29:35,600 --> 00:29:40,669
up being also useful for many other

00:29:37,100 --> 00:29:43,250
things like embedded systems constrained

00:29:40,669 --> 00:29:46,309
environments like in space and Internet

00:29:43,250 --> 00:29:47,990
of Things I didn't really know about the

00:29:46,309 --> 00:29:49,970
Internet of Things a couple years ago

00:29:47,990 --> 00:29:51,259
when I started my cup I think so I mean

00:29:49,970 --> 00:29:54,110
I was a physicist I didn't know about

00:29:51,259 --> 00:29:58,970
any of these things but I gradually

00:29:54,110 --> 00:30:00,470
learned so the way that I approached

00:29:58,970 --> 00:30:01,879
micro Python was as a Kickstarter

00:30:00,470 --> 00:30:03,950
because I thought that would be fun and

00:30:01,879 --> 00:30:05,179
I thought it would be a way to see if

00:30:03,950 --> 00:30:10,879
people were interested in what I was

00:30:05,179 --> 00:30:14,210
doing and so on the 30th of April 2013

00:30:10,879 --> 00:30:16,399
so yeah that's about over three years

00:30:14,210 --> 00:30:20,539
ago I said I wrote the first line of

00:30:16,399 --> 00:30:23,450
code and then in September of that year

00:30:20,539 --> 00:30:26,539
I had a flashing LED when you and also

00:30:23,450 --> 00:30:29,360
button presses running on a board and

00:30:26,539 --> 00:30:31,220
then a month later I had a prompt on the

00:30:29,360 --> 00:30:33,289
board and a file system and you could

00:30:31,220 --> 00:30:35,629
plug it into USB and it was all sort of

00:30:33,289 --> 00:30:39,230
Minimum Viable Product sort of working

00:30:35,629 --> 00:30:42,740
proof of concept at that point and then

00:30:39,230 --> 00:30:44,990
we made a video for the Kickstarter

00:30:42,740 --> 00:30:46,909
which you need to do and you know you

00:30:44,990 --> 00:30:48,620
need to convince the world that your

00:30:46,909 --> 00:30:52,039
idea is very cool and that they should

00:30:48,620 --> 00:30:53,840
give you money to to develop it and then

00:30:52,039 --> 00:30:56,840
the kickstart around for 30 days at the

00:30:53,840 --> 00:30:58,730
end of 2013 and we got a very very very

00:30:56,840 --> 00:31:02,990
good response much more than I expected

00:30:58,730 --> 00:31:08,090
and doing Kickstarter was a lot of

00:31:02,990 --> 00:31:09,259
energy responding to people and it was a

00:31:08,090 --> 00:31:09,710
lot more than I expected

00:31:09,259 --> 00:31:11,390
and

00:31:09,710 --> 00:31:12,919
talk tomorrow a lot more about that so

00:31:11,390 --> 00:31:15,620
I'll skip that over here

00:31:12,919 --> 00:31:17,720
but we raised about over 180 thousand

00:31:15,620 --> 00:31:19,880
dollars when converted to Australian

00:31:17,720 --> 00:31:22,399
dollars and then about two years later

00:31:19,880 --> 00:31:23,720
in April 2015 I said it was officially

00:31:22,399 --> 00:31:26,659
finished that I had done all the things

00:31:23,720 --> 00:31:29,620
that I said I was going to do but since

00:31:26,659 --> 00:31:32,929
then we've done a lot more stuff as well

00:31:29,620 --> 00:31:36,080
so when we manufactured boards these PI

00:31:32,929 --> 00:31:37,970
boards in a factory in the UK and it was

00:31:36,080 --> 00:31:41,230
really great to go to a factory and see

00:31:37,970 --> 00:31:47,770
things being made that was really fun

00:31:41,230 --> 00:31:52,520
okay so let me just see what the time is

00:31:47,770 --> 00:31:54,289
okay so I won't spend too long

00:31:52,520 --> 00:31:56,090
explaining about all the details of how

00:31:54,289 --> 00:31:57,980
I made it micro paths are more efficient

00:31:56,090 --> 00:32:00,260
but I didn't take Python and change

00:31:57,980 --> 00:32:02,960
things I've rewrote micro Python from

00:32:00,260 --> 00:32:05,659
scratch so every line of code was you

00:32:02,960 --> 00:32:08,539
know written by me from from the ground

00:32:05,659 --> 00:32:09,860
up and the architecture was designed so

00:32:08,539 --> 00:32:12,679
that it wouldn't need memory to store

00:32:09,860 --> 00:32:15,169
integers it integers are stored in the

00:32:12,679 --> 00:32:17,480
point of themselves using pointer

00:32:15,169 --> 00:32:20,720
tagging or point of stuffing if you know

00:32:17,480 --> 00:32:22,279
what that is from Lisp and there's

00:32:20,720 --> 00:32:25,760
optimised method calls so you don't need

00:32:22,279 --> 00:32:29,500
to use memory for loops don't you need

00:32:25,760 --> 00:32:32,480
memory if it's just a simple 4x in range

00:32:29,500 --> 00:32:34,730
most things like built-in modules they

00:32:32,480 --> 00:32:37,100
live in read-only memory so you don't

00:32:34,730 --> 00:32:39,230
need any RAM when you do import this for

00:32:37,100 --> 00:32:42,409
example because it's just it just stays

00:32:39,230 --> 00:32:44,480
in in ROM and it executes from ROM so

00:32:42,409 --> 00:32:47,120
all of the design decisions for micro

00:32:44,480 --> 00:32:53,120
Python was to reduce or eliminate memory

00:32:47,120 --> 00:32:55,760
usage where possible and I think I think

00:32:53,120 --> 00:32:58,130
we succeeded so there's one of these one

00:32:55,760 --> 00:33:01,250
device it runs on the micro bit which is

00:32:58,130 --> 00:33:04,549
this BBC project we were involved in has

00:33:01,250 --> 00:33:08,149
256 cave of read-only memory and only 16

00:33:04,549 --> 00:33:09,559
kilobytes of RAM and the heap is

00:33:08,149 --> 00:33:11,330
actually only about nine and a half

00:33:09,559 --> 00:33:13,130
kilobytes so in nine and a half

00:33:11,330 --> 00:33:15,440
kilobytes of RAM you've got to do

00:33:13,130 --> 00:33:17,779
everything your scripts you know your

00:33:15,440 --> 00:33:19,730
prompt so it's I think it runs and it

00:33:17,779 --> 00:33:23,200
runs runs pretty well you can do sort of

00:33:19,730 --> 00:33:23,200
you can do some stuff with that

00:33:23,960 --> 00:33:30,050
so it's on we it's developed on github

00:33:26,510 --> 00:33:31,670
and it's an open-source project it's an

00:33:30,050 --> 00:33:33,700
MIT license - anyone can go and download

00:33:31,670 --> 00:33:36,050
it and use it for whatever they like and

00:33:33,700 --> 00:33:38,000
I think using github has been really

00:33:36,050 --> 00:33:39,470
great we have lots of contributors we

00:33:38,000 --> 00:33:42,320
get lots of people coming we're

00:33:39,470 --> 00:33:44,570
submitting bug reports and I think it's

00:33:42,320 --> 00:33:46,670
such a great thing to have an open sort

00:33:44,570 --> 00:33:47,960
of discussion about the code and how its

00:33:46,670 --> 00:33:50,480
evolving

00:33:47,960 --> 00:33:53,030
I think github has been done a great

00:33:50,480 --> 00:33:55,070
service to the open-source community and

00:33:53,030 --> 00:33:57,710
I hope it sticks around and continues to

00:33:55,070 --> 00:33:59,960
do that but you know there's all what I

00:33:57,710 --> 00:34:03,170
mean git is always independent of github

00:33:59,960 --> 00:34:04,760
so you can always be transferred because

00:34:03,170 --> 00:34:07,520
it's a distributed version control

00:34:04,760 --> 00:34:09,850
system so micro paithan has it's quite a

00:34:07,520 --> 00:34:12,890
lot of stars it's quite popular and

00:34:09,850 --> 00:34:17,270
that's yeah it's it's nice to see people

00:34:12,890 --> 00:34:19,400
really jumping on and helping and the

00:34:17,270 --> 00:34:20,750
more people we have that use it the more

00:34:19,400 --> 00:34:23,210
robust the code gets because people

00:34:20,750 --> 00:34:25,580
submit bug reports for say this ancient

00:34:23,210 --> 00:34:27,950
system with this old compiler has this

00:34:25,580 --> 00:34:33,220
error and we can maybe fix it and then

00:34:27,950 --> 00:34:35,750
get it working on more more systems okay

00:34:33,220 --> 00:34:37,460
so we actually then did a six-second

00:34:35,750 --> 00:34:40,280
kickstarter after the first one because

00:34:37,460 --> 00:34:43,210
you know one kickstart is not enough and

00:34:40,280 --> 00:34:48,679
this was based around this ESP chip so

00:34:43,210 --> 00:34:50,450
esp8266 is just the name of a chip made

00:34:48,679 --> 00:34:54,590
by expressive which is this chinese

00:34:50,450 --> 00:34:56,660
company and so i'll give you a little

00:34:54,590 --> 00:34:58,940
background on this chip because this is

00:34:56,660 --> 00:35:04,130
what this tracks about IOT and i think

00:34:58,940 --> 00:35:06,020
this is a good example maybe of how of

00:35:04,130 --> 00:35:09,770
the the ecosystem around

00:35:06,020 --> 00:35:10,220
microcontrollers so normally in so in

00:35:09,770 --> 00:35:13,400
China

00:35:10,220 --> 00:35:16,940
well they copy a lot of things from say

00:35:13,400 --> 00:35:20,000
the West Western technology and and they

00:35:16,940 --> 00:35:23,210
do it to make things cheaply and and

00:35:20,000 --> 00:35:25,160
efficiently but um you don't usually

00:35:23,210 --> 00:35:27,290
hear about the things that they make so

00:35:25,160 --> 00:35:30,770
you know a chip company might say

00:35:27,290 --> 00:35:32,810
alright I'm going to make a chip and to

00:35:30,770 --> 00:35:34,820
be able to turn on and off a light

00:35:32,810 --> 00:35:36,570
remotely via Wi-Fi so I think that's

00:35:34,820 --> 00:35:38,520
actually what this ESP was for

00:35:36,570 --> 00:35:40,770
like we need to make it as quickly and

00:35:38,520 --> 00:35:42,660
cheaply as possible so we'll use this

00:35:40,770 --> 00:35:44,850
open-source component here you know

00:35:42,660 --> 00:35:47,640
we'll take this design here for the wife

00:35:44,850 --> 00:35:49,230
I will use this architecture for the

00:35:47,640 --> 00:35:50,760
chip so it's an extensor architecture

00:35:49,230 --> 00:35:51,960
and they bring all these components

00:35:50,760 --> 00:35:53,850
together they don't worry about

00:35:51,960 --> 00:35:56,490
licensing or copyright because there's

00:35:53,850 --> 00:35:58,260
no laws you know I mean that but this is

00:35:56,490 --> 00:35:59,850
not I'm not saying this in a bad way I'm

00:35:58,260 --> 00:36:01,590
saying just this is a different

00:35:59,850 --> 00:36:04,170
situation there you know in a country

00:36:01,590 --> 00:36:06,660
like Australia or or in the UK or

00:36:04,170 --> 00:36:08,970
America we have copyright laws so that

00:36:06,660 --> 00:36:11,880
people can design something and then

00:36:08,970 --> 00:36:13,980
hopefully get paid for what they did

00:36:11,880 --> 00:36:16,110
but in China doesn't work that way

00:36:13,980 --> 00:36:18,870
people make stuff and get paid for

00:36:16,110 --> 00:36:20,580
making stuff the design is sort of free

00:36:18,870 --> 00:36:23,040
in a sense so it's just a different way

00:36:20,580 --> 00:36:24,210
of thinking about it and so that you

00:36:23,040 --> 00:36:26,010
know these chip companies they pull in

00:36:24,210 --> 00:36:28,170
all these ideas and then make a chip and

00:36:26,010 --> 00:36:30,740
the idea is that it works for its single

00:36:28,170 --> 00:36:32,880
purpose and then it's sold for a dollar

00:36:30,740 --> 00:36:35,070
and then they go on making the next one

00:36:32,880 --> 00:36:37,470
and they sell it probably to one

00:36:35,070 --> 00:36:39,360
consumer who's making lights out of it

00:36:37,470 --> 00:36:41,580
the connect via Wi-Fi and they don't

00:36:39,360 --> 00:36:43,710
care as long as it works and and the

00:36:41,580 --> 00:36:47,850
light turns on and off they don't want

00:36:43,710 --> 00:36:49,500
to make this chip user-friendly and but

00:36:47,850 --> 00:36:52,740
what happened with the ESP chip was that

00:36:49,500 --> 00:36:55,770
it was so cheap and it had Wi-Fi that

00:36:52,740 --> 00:36:58,950
people from I say the West it just to

00:36:55,770 --> 00:37:00,210
encompass the other audience they they

00:36:58,950 --> 00:37:01,800
took the chip and said wow this is

00:37:00,210 --> 00:37:04,950
really cool that's reverse engineer to

00:37:01,800 --> 00:37:06,480
see what it can really do and there was

00:37:04,950 --> 00:37:08,100
a really big effort I mean this started

00:37:06,480 --> 00:37:10,890
it was about two years ago when it was

00:37:08,100 --> 00:37:12,270
when it was first launched and it was

00:37:10,890 --> 00:37:14,490
very very quick for the community in a

00:37:12,270 --> 00:37:17,730
few months to get a compiler running and

00:37:14,490 --> 00:37:20,700
to understand the memory layout be able

00:37:17,730 --> 00:37:23,580
to download new code and run the Wi-Fi

00:37:20,700 --> 00:37:26,490
and so it was really picked up by the

00:37:23,580 --> 00:37:28,110
hackers of the world to you know really

00:37:26,490 --> 00:37:30,320
take it forward and actually use it as a

00:37:28,110 --> 00:37:32,490
very very cheap microcontroller and

00:37:30,320 --> 00:37:34,710
expressive the Chinese company there so

00:37:32,490 --> 00:37:37,440
like well you know we don't really care

00:37:34,710 --> 00:37:38,940
or we don't want to support you or we're

00:37:37,440 --> 00:37:40,800
not going to give your documentation and

00:37:38,940 --> 00:37:42,030
but at the same time you can do whatever

00:37:40,800 --> 00:37:44,850
you like with it because if they don't

00:37:42,030 --> 00:37:47,430
they don't have copyright laws to worry

00:37:44,850 --> 00:37:48,600
about but over time especially realized

00:37:47,430 --> 00:37:50,099
that they were onto something because it

00:37:48,600 --> 00:37:51,450
grew bigger and bigger so

00:37:50,099 --> 00:37:54,059
started providing support and

00:37:51,450 --> 00:37:56,519
documentation and improved firmware like

00:37:54,059 --> 00:37:58,499
the code to do the Wi-Fi and really

00:37:56,519 --> 00:38:02,249
built up a good relationship with the

00:37:58,499 --> 00:38:03,839
West to have this chip you know into

00:38:02,249 --> 00:38:07,410
more hands of more people and they

00:38:03,839 --> 00:38:09,440
started selling a lot more and yeah I

00:38:07,410 --> 00:38:12,479
mean it grew from there

00:38:09,440 --> 00:38:13,859
so coupled with that which is sort of

00:38:12,479 --> 00:38:16,589
the hardware getting into the hands of

00:38:13,859 --> 00:38:18,509
people there's also the software side of

00:38:16,589 --> 00:38:21,359
things so I said before that it used

00:38:18,509 --> 00:38:22,529
lure to run it initially and that really

00:38:21,359 --> 00:38:24,390
got it into the hands of people who

00:38:22,529 --> 00:38:26,309
didn't know how to use microcontrollers

00:38:24,390 --> 00:38:28,440
they're like oh I can just type Wi-Fi

00:38:26,309 --> 00:38:31,950
connect and I connect to my Wi-Fi and

00:38:28,440 --> 00:38:33,569
then I can type GPIO IO dot right and I

00:38:31,950 --> 00:38:34,680
can turn a light on so you know with a

00:38:33,569 --> 00:38:36,960
few lines of code

00:38:34,680 --> 00:38:40,289
anyone could easily connect the Internet

00:38:36,960 --> 00:38:43,229
in a tiny little chip so I think it was

00:38:40,289 --> 00:38:46,049
this combination of this this really

00:38:43,229 --> 00:38:48,660
cheap chip the being reverse engineer by

00:38:46,049 --> 00:38:50,249
lots of hackers and then a scripting

00:38:48,660 --> 00:38:56,400
language like lure on top of it that

00:38:50,249 --> 00:38:57,869
made it really popular and then well we

00:38:56,400 --> 00:38:59,910
thought macro pathing can also run on it

00:38:57,869 --> 00:39:02,630
it's sort of it's just enough power just

00:38:59,910 --> 00:39:05,160
enough memory to run Python as well so

00:39:02,630 --> 00:39:06,749
macro Bethan was eventually ported to it

00:39:05,160 --> 00:39:08,190
and we did the second Kickstarter

00:39:06,749 --> 00:39:10,979
campaign which was a pure software

00:39:08,190 --> 00:39:13,829
campaign so the first one we saw well we

00:39:10,979 --> 00:39:15,839
gave boards as part of the rewards but

00:39:13,829 --> 00:39:17,670
with the second campaign it was just you

00:39:15,839 --> 00:39:19,859
know we want to develop micro Python to

00:39:17,670 --> 00:39:21,869
run really well on this chip this ESP

00:39:19,859 --> 00:39:23,789
chip you know if you want to give ten

00:39:21,869 --> 00:39:25,380
pounds please do and we'll try and make

00:39:23,789 --> 00:39:29,450
it even better and we've got a really

00:39:25,380 --> 00:39:31,739
amazing response of almost $50,000 and

00:39:29,450 --> 00:39:33,809
yeah software campaigns don't usually go

00:39:31,739 --> 00:39:35,160
so well but we were overwhelmed and it

00:39:33,809 --> 00:39:37,650
was great to see the community just

00:39:35,160 --> 00:39:40,619
saying you know yes I support your your

00:39:37,650 --> 00:39:43,380
ongoing efforts and a lot of the work

00:39:40,619 --> 00:39:45,119
we've done to make it run on the ESP is

00:39:43,380 --> 00:39:46,890
also filtered back into just general

00:39:45,119 --> 00:39:53,219
micro Python for other microcontrollers

00:39:46,890 --> 00:39:55,859
as well ok so ok I've got about 15

00:39:53,219 --> 00:39:58,769
minutes left so I'm going to try and do

00:39:55,859 --> 00:40:01,589
some demos now just to give you a real

00:39:58,769 --> 00:40:03,000
feeling for what what I've just been

00:40:01,589 --> 00:40:05,130
talking about

00:40:03,000 --> 00:40:08,070
but also please yeah think of questions

00:40:05,130 --> 00:40:10,020
to ask and we can talk about we can talk

00:40:08,070 --> 00:40:12,570
about lots of different things so now

00:40:10,020 --> 00:40:15,660
this is a live demo with Wi-Fi at a

00:40:12,570 --> 00:40:18,420
conference so just you know it may not

00:40:15,660 --> 00:40:21,020
work but I'll have at least have

00:40:18,420 --> 00:40:21,020
something to show you

00:40:21,290 --> 00:40:30,120
I'll just plug it in right make sure

00:40:25,350 --> 00:40:32,340
things I think the next speaker is going

00:40:30,120 --> 00:40:33,990
to talk a bit more about the hardware

00:40:32,340 --> 00:40:37,920
and plugging it in and stuff but I'll

00:40:33,990 --> 00:40:41,400
just for now so this this is what the

00:40:37,920 --> 00:40:43,650
chip is this silver thing and it's board

00:40:41,400 --> 00:40:46,560
just to provide you with more features

00:40:43,650 --> 00:40:48,570
like battery charger and stuff but it's

00:40:46,560 --> 00:40:50,130
connected by a USB and all the things

00:40:48,570 --> 00:40:54,480
I'm going to do here I'll just see if I

00:40:50,130 --> 00:41:00,660
can connect okay good can everyone see

00:40:54,480 --> 00:41:03,150
the prompt in the corner yet okay so I

00:41:00,660 --> 00:41:05,340
just have to explain that this the chip

00:41:03,150 --> 00:41:08,160
runs Python and compiles and does

00:41:05,340 --> 00:41:10,560
everything on the chip my PC my laptop's

00:41:08,160 --> 00:41:12,360
not doing anything except sending and

00:41:10,560 --> 00:41:13,560
receiving characters like a dumb

00:41:12,360 --> 00:41:16,860
terminal if you need to fill me with

00:41:13,560 --> 00:41:20,760
that term so it just sends a if I press

00:41:16,860 --> 00:41:22,740
a sends a down this serial and then this

00:41:20,760 --> 00:41:24,990
this the the micro pythons like well

00:41:22,740 --> 00:41:26,490
what do I do with the a well there's

00:41:24,990 --> 00:41:28,260
typing at the prompt so I'll have to

00:41:26,490 --> 00:41:30,720
respond and make the prompt look like

00:41:28,260 --> 00:41:32,160
you typed an a but everything is done on

00:41:30,720 --> 00:41:33,600
the chip the computer is not doing

00:41:32,160 --> 00:41:36,630
anything at all except just being a

00:41:33,600 --> 00:41:43,140
keyboard and screen alright so let's

00:41:36,630 --> 00:41:43,500
just try some I think you can all see

00:41:43,140 --> 00:41:46,710
there

00:41:43,500 --> 00:41:50,130
so I mean 1 plus 2 or 3 so this is just

00:41:46,710 --> 00:41:53,460
a Python prompt I know it's silly but so

00:41:50,130 --> 00:41:56,520
how about 2 to the power of 100 or how

00:41:53,460 --> 00:41:59,610
about 4 to the power of 100 or even a

00:41:56,520 --> 00:42:03,090
thousand so I mean it's full so you have

00:41:59,610 --> 00:42:10,560
full Python with with big integers and

00:42:03,090 --> 00:42:14,340
floating point for example so math sign

00:42:10,560 --> 00:42:15,570
of 0.4 is 0.3 so what I've just done

00:42:14,340 --> 00:42:17,700
here all of this is running and

00:42:15,570 --> 00:42:23,480
compiling on this little check

00:42:17,700 --> 00:42:25,890
which has about 32 kilobytes of RAM and

00:42:23,480 --> 00:42:27,960
it has four megabytes of flash but

00:42:25,890 --> 00:42:29,760
that's because well we put a lot of

00:42:27,960 --> 00:42:32,820
flash law you can have a file system so

00:42:29,760 --> 00:42:36,570
for example import Oh err oops

00:42:32,820 --> 00:42:40,730
import OS OS dot Lister so there's some

00:42:36,570 --> 00:42:46,890
files there so I can do F equals open

00:42:40,730 --> 00:42:51,210
license F dot read so that's the MIT

00:42:46,890 --> 00:42:54,060
license on a file in the file system so

00:42:51,210 --> 00:42:55,770
this little chip we've used part of the

00:42:54,060 --> 00:42:57,780
flash memory actually to implement a

00:42:55,770 --> 00:43:00,210
file system as well and you can store

00:42:57,780 --> 00:43:04,710
your scripts their libraries you can

00:43:00,210 --> 00:43:06,570
import stuff from there as well so it's

00:43:04,710 --> 00:43:10,230
it's there's a lot of Python here

00:43:06,570 --> 00:43:13,650
what else can I mean I can show you so

00:43:10,230 --> 00:43:18,000
it has a garbage collector oh well I can

00:43:13,650 --> 00:43:20,310
collect garbage uh-huh they're micro

00:43:18,000 --> 00:43:22,860
paths and there's a micro Python module

00:43:20,310 --> 00:43:26,520
which can show you the memory layout so

00:43:22,860 --> 00:43:29,790
just for those interested okay the total

00:43:26,520 --> 00:43:32,430
of 28 kilobytes of heap we've used seven

00:43:29,790 --> 00:43:33,420
kilobytes and this is just a pictorial

00:43:32,430 --> 00:43:35,730
representation

00:43:33,420 --> 00:43:38,790
so those equals means it's all been used

00:43:35,730 --> 00:43:40,560
at the moment but if I most of that is

00:43:38,790 --> 00:43:43,020
actually for the file system for a cache

00:43:40,560 --> 00:43:46,710
for the file system but anyway so you

00:43:43,020 --> 00:43:52,410
can see all these things there's a

00:43:46,710 --> 00:43:54,300
machine module which I used to control

00:43:52,410 --> 00:43:57,140
the machine so I can see what the

00:43:54,300 --> 00:43:59,760
frequency we're running at 80 megahertz

00:43:57,140 --> 00:44:05,460
and I can change it on the fly to say

00:43:59,760 --> 00:44:06,900
160 megahertz so now running at 160

00:44:05,460 --> 00:44:09,600
megahertz

00:44:06,900 --> 00:44:11,940
on this little chip so I'll just change

00:44:09,600 --> 00:44:14,880
it back to 80 okay

00:44:11,940 --> 00:44:20,190
so there's lots of built-in features to

00:44:14,880 --> 00:44:21,810
use the hardware like this so what was

00:44:20,190 --> 00:44:23,730
well there's lot there's this there's

00:44:21,810 --> 00:44:25,830
many things I can do but because we're

00:44:23,730 --> 00:44:29,940
in IOT we should do some internet things

00:44:25,830 --> 00:44:31,090
hopefully we have an IP address there's

00:44:29,940 --> 00:44:37,330
a network

00:44:31,090 --> 00:44:39,100
so I okay there's a tab completion and

00:44:37,330 --> 00:44:41,770
everything and history here so that's

00:44:39,100 --> 00:44:44,770
why I can type quite fast so I F naught

00:44:41,770 --> 00:44:48,100
so these are the methods so what's my

00:44:44,770 --> 00:44:51,190
ifconfig so this is my IP address I'm

00:44:48,100 --> 00:44:57,060
connected to the local network IP

00:44:51,190 --> 00:44:59,440
address on the left so what's the most

00:44:57,060 --> 00:45:04,030
simplest way to use the Internet in

00:44:59,440 --> 00:45:06,430
Python the internet what module would

00:45:04,030 --> 00:45:13,330
you use socket okay

00:45:06,430 --> 00:45:16,540
so import socket oops oops okay let's

00:45:13,330 --> 00:45:22,750
get the IP address of what's your

00:45:16,540 --> 00:45:25,840
favorite website Python org let port 80

00:45:22,750 --> 00:45:28,710
okay so that's its IP address there so

00:45:25,840 --> 00:45:32,740
wait okay Wi-Fi is working which is good

00:45:28,710 --> 00:45:54,400
all right so let me show you a demo

00:45:32,740 --> 00:45:57,070
let me just bear with me nope you don't

00:45:54,400 --> 00:46:03,310
have to read this but these are just all

00:45:57,070 --> 00:46:04,690
my demo things okay all right okay I'm

00:46:03,310 --> 00:46:06,430
just going to cut and paste this simple

00:46:04,690 --> 00:46:08,530
demo so the other thing we have is a

00:46:06,430 --> 00:46:10,720
paste mode so if you'd press ctrl e

00:46:08,530 --> 00:46:17,290
there's paste mode so I can just paste

00:46:10,720 --> 00:46:20,380
in some code okay there so this code

00:46:17,290 --> 00:46:23,740
here so input socket get the IP address

00:46:20,380 --> 00:46:25,690
of this website here port 23 is the

00:46:23,740 --> 00:46:27,720
telnet port so telnet is a very simple

00:46:25,690 --> 00:46:32,170
protocol you just send and receive

00:46:27,720 --> 00:46:34,810
basically data bytes and then I creating

00:46:32,170 --> 00:46:37,180
a socket connecting to my this server

00:46:34,810 --> 00:46:39,310
here and then I'm in a loop I'm just

00:46:37,180 --> 00:46:41,170
going to download 500 bytes so there

00:46:39,310 --> 00:46:43,960
abouts and then print it out to the

00:46:41,170 --> 00:46:44,719
screen so this is telling it telnet it's

00:46:43,960 --> 00:46:46,849
so simple you

00:46:44,719 --> 00:46:49,699
you just download bytes from it does do

00:46:46,849 --> 00:46:52,099
people know what this does blinking

00:46:49,699 --> 00:46:55,489
lights yeah okay so the press control-d

00:46:52,099 --> 00:46:56,660
it finished pasting so here we're

00:46:55,489 --> 00:47:00,979
watching we're going to watch Star Wars

00:46:56,660 --> 00:47:02,900
in sq motion so what happens here is I'm

00:47:00,979 --> 00:47:05,089
just downloading text and printing it to

00:47:02,900 --> 00:47:06,829
the screen it just so happens that they

00:47:05,089 --> 00:47:08,959
put pauses between the download so you

00:47:06,829 --> 00:47:12,019
can watch a frame and they have new

00:47:08,959 --> 00:47:14,029
lines and clear screen so that it gives

00:47:12,019 --> 00:47:17,509
you an animation so I'm just downloading

00:47:14,029 --> 00:47:19,429
and displaying text here depending on

00:47:17,509 --> 00:47:23,979
how good the Wi-Fi is it depends how far

00:47:19,429 --> 00:47:26,329
we get before it gives up but um so

00:47:23,979 --> 00:47:29,869
would be nice if we got to some Star

00:47:26,329 --> 00:47:31,209
Wars bit but we'll see I've got a few

00:47:29,869 --> 00:47:33,859
more 10 minutes

00:47:31,209 --> 00:47:35,900
so but you saw that this was just this

00:47:33,859 --> 00:47:37,939
this is once you've connected to the

00:47:35,900 --> 00:47:41,569
telnet server this is just three lines

00:47:37,939 --> 00:47:43,849
it's wild true socket receive and then

00:47:41,569 --> 00:47:45,349
print data I mean I could probably

00:47:43,849 --> 00:47:55,909
replace that with one line if I read it

00:47:45,349 --> 00:47:58,989
all online but we just have to see a 2d

00:47:55,909 --> 00:47:58,989
sue and then we can stop it

00:48:01,829 --> 00:48:09,190
the ipv6 version and I think we support

00:48:06,039 --> 00:48:10,599
I do now we don't have a ballistics on

00:48:09,190 --> 00:48:11,019
this thing but if you'd on your laptop

00:48:10,599 --> 00:48:13,509
you can

00:48:11,019 --> 00:48:15,279
the thing with micro Python is that the

00:48:13,509 --> 00:48:17,109
whole idea is to have the same code

00:48:15,279 --> 00:48:18,970
running normal Python is in micro path

00:48:17,109 --> 00:48:20,680
and so you know it's not like we

00:48:18,970 --> 00:48:23,079
invented the socket 2 or something we

00:48:20,680 --> 00:48:26,259
use try and use the same socket exactly

00:48:23,079 --> 00:48:28,509
the same API so the code that I wrote

00:48:26,259 --> 00:48:30,670
here you can run on your laptop and it

00:48:28,509 --> 00:48:33,130
will work exactly the same so you can

00:48:30,670 --> 00:48:37,960
test all of your code or flight well

00:48:33,130 --> 00:48:40,269
sort of on your laptop or PC and then if

00:48:37,960 --> 00:48:42,910
it works you know you put it on your ESP

00:48:40,269 --> 00:48:45,069
chip and it should work the same ok yeah

00:48:42,910 --> 00:48:45,579
we saw ok they're shut down the main

00:48:45,069 --> 00:48:48,970
reactor

00:48:45,579 --> 00:48:54,160
alright so control C ok and we just

00:48:48,970 --> 00:48:57,220
stopped out forever loop so I mean ok

00:48:54,160 --> 00:48:58,480
this is this is towards the end of the

00:48:57,220 --> 00:49:00,009
talk I mean I can keep going with many

00:48:58,480 --> 00:49:01,589
more demos and I can answer lots

00:49:00,009 --> 00:49:05,289
questions

00:49:01,589 --> 00:49:14,470
met ok so that means that we need to

00:49:05,289 --> 00:49:17,529
press reset ok yes yes yes yes inputs

00:49:14,470 --> 00:49:20,230
and outputs and so I can show you let me

00:49:17,529 --> 00:49:23,890
just okay I have demos to download URLs

00:49:20,230 --> 00:49:28,150
demos to do yeah okay let me just so

00:49:23,890 --> 00:49:33,480
import machine and then say pin pin 0

00:49:28,150 --> 00:49:39,009
equals machine pin 0 and make it in

00:49:33,480 --> 00:49:43,180
output mode ok so the LED is connected

00:49:39,009 --> 00:49:51,480
in an inverted way so when I do pin 0

00:49:43,180 --> 00:49:55,529
dot value when I do 0 it turns it off no

00:49:51,480 --> 00:49:58,720
turn 1 turns it off and 0 turns it on

00:49:55,529 --> 00:50:02,799
but you get you get the picture right so

00:49:58,720 --> 00:50:06,339
that that's how you do I owe and then if

00:50:02,799 --> 00:50:11,310
I want to make an input I can say do you

00:50:06,339 --> 00:50:17,610
know pin 4 equals machine dot pin 4

00:50:11,310 --> 00:50:20,430
and in input mode so pin for value so

00:50:17,610 --> 00:50:22,530
it's currently high but if I would have

00:50:20,430 --> 00:50:24,480
made if I connected something to it I

00:50:22,530 --> 00:50:27,330
can read different values so that's how

00:50:24,480 --> 00:50:32,040
you do IR and there's lots of other

00:50:27,330 --> 00:50:36,510
there's well there yeah this there's an

00:50:32,040 --> 00:50:39,390
ADC for getting reading analog values

00:50:36,510 --> 00:50:44,550
PWM for pulse width modulation there's

00:50:39,390 --> 00:50:46,350
an i2c class I need to give it some pins

00:50:44,550 --> 00:50:48,360
to run the i2c on but I can can we

00:50:46,350 --> 00:50:51,240
create a I to see bus and I can say I

00:50:48,360 --> 00:50:54,570
just see don't read or write or scan for

00:50:51,240 --> 00:50:56,910
devices so it has full support for well

00:50:54,570 --> 00:50:58,980
it has lots of support for all of these

00:50:56,910 --> 00:51:02,750
fancy microcontroller features that I

00:50:58,980 --> 00:51:02,750
showed you in that diagram a while ago

00:51:02,870 --> 00:51:09,720
so yeah yeah I'm okay I'm happy to

00:51:06,600 --> 00:51:20,010
finish now and yeah take questions so

00:51:09,720 --> 00:51:21,330
thanks for thanks for yeah just to make

00:51:20,010 --> 00:51:23,190
things easy I might just put this

00:51:21,330 --> 00:51:24,270
microphone in the microphone stand so if

00:51:23,190 --> 00:51:25,670
you want to ask questions if you can

00:51:24,270 --> 00:51:27,510
just line up behind the microphone

00:51:25,670 --> 00:51:33,930
that'll make sure we capture the

00:51:27,510 --> 00:51:36,510
questions any questions if you want to

00:51:33,930 --> 00:51:39,620
ask a question if you just come here you

00:51:36,510 --> 00:51:39,620
can talk directly into the microphone

00:51:43,820 --> 00:51:48,900
thanks the talk how do you go using just

00:51:47,010 --> 00:51:51,030
common libraries off the net on macro

00:51:48,900 --> 00:51:52,740
Python are there are there many patterns

00:51:51,030 --> 00:51:55,440
that people use that often blow up in

00:51:52,740 --> 00:51:57,410
market by thermal lamp okay so that's a

00:51:55,440 --> 00:52:00,330
good question

00:51:57,410 --> 00:52:04,560
so I should emphasize micro Python is

00:52:00,330 --> 00:52:07,710
it's Python 3 not Python 2 and it's

00:52:04,560 --> 00:52:11,430
about a it's bit it's about it's Python

00:52:07,710 --> 00:52:16,200
3.4 and 1/2 it's gradually adding 3.5

00:52:11,430 --> 00:52:18,930
features but it's it's it implements

00:52:16,200 --> 00:52:21,060
100% of the syntax and a lot of the

00:52:18,930 --> 00:52:23,220
built-in types you know while all the

00:52:21,060 --> 00:52:25,050
built-in types most of their methods but

00:52:23,220 --> 00:52:27,270
the libraries it only has a very

00:52:25,050 --> 00:52:28,950
small subset of those so and it really

00:52:27,270 --> 00:52:31,380
depends on what boards are running on as

00:52:28,950 --> 00:52:34,740
to how much you have available there's

00:52:31,380 --> 00:52:37,140
usually always CS and os instruct and GC

00:52:34,740 --> 00:52:39,270
and a few of the really cool things but

00:52:37,140 --> 00:52:42,630
if you want something like request the

00:52:39,270 --> 00:52:44,160
well you know like HTTP or you know some

00:52:42,630 --> 00:52:45,800
it's a fancy module it's probably not

00:52:44,160 --> 00:52:48,090
going to be there we're slowly

00:52:45,800 --> 00:52:51,120
re-implementing all Python modules in

00:52:48,090 --> 00:52:54,660
micro Python to be more macro ish so to

00:52:51,120 --> 00:52:58,140
run efficiently but if you just went to

00:52:54,660 --> 00:53:01,170
the net and you pulled some library if

00:52:58,140 --> 00:53:03,030
it was written in pure Python and it

00:53:01,170 --> 00:53:05,160
used libraries that already existed in

00:53:03,030 --> 00:53:07,320
micro Python it should work you know

00:53:05,160 --> 00:53:09,570
that that's that's our aim if it doesn't

00:53:07,320 --> 00:53:12,210
it's a bug and you know report it but a

00:53:09,570 --> 00:53:14,220
pure Python library should just work in

00:53:12,210 --> 00:53:15,600
micro Python whether or not you have

00:53:14,220 --> 00:53:18,330
enough memory to run it is another

00:53:15,600 --> 00:53:19,890
question there is the the UNIX version

00:53:18,330 --> 00:53:21,690
of micro Python which you can use to

00:53:19,890 --> 00:53:23,820
test things in which you can give mega

00:53:21,690 --> 00:53:25,890
or gigabytes of memory to so you know

00:53:23,820 --> 00:53:26,730
you can do a lot of stuff on your PC

00:53:25,890 --> 00:53:28,830
with it as well

00:53:26,730 --> 00:53:38,400
but yeah that that's the answer if it's

00:53:28,830 --> 00:53:39,420
pure Python it should work hi can you

00:53:38,400 --> 00:53:41,160
touch a little bit up on the

00:53:39,420 --> 00:53:43,860
bootstrapping process if you wanted to

00:53:41,160 --> 00:53:45,150
deploy a product running on this how

00:53:43,860 --> 00:53:46,620
would you get your code onto it you get

00:53:45,150 --> 00:53:48,570
the libraries onto it get it all started

00:53:46,620 --> 00:53:50,430
make it so that when you apply power it

00:53:48,570 --> 00:53:52,770
all turns on the runs I think that's in

00:53:50,430 --> 00:53:55,700
the next talk is this right yeah okay so

00:53:52,770 --> 00:53:58,080
yes that will be in the next talk but um

00:53:55,700 --> 00:54:00,300
so yeah I will leave it to the neck to

00:53:58,080 --> 00:54:02,220
Nick the next speaker but that's a good

00:54:00,300 --> 00:54:04,890
question because it's yeah definitely

00:54:02,220 --> 00:54:07,490
you want to get started with this other

00:54:04,890 --> 00:54:07,490
questions

00:54:10,510 --> 00:54:17,480
how do you go interfacing with see and

00:54:13,070 --> 00:54:20,360
can you use c-types or CF if I yes yes

00:54:17,480 --> 00:54:22,160
so there is you see type there is all

00:54:20,360 --> 00:54:23,690
micro Python library start with a you to

00:54:22,160 --> 00:54:26,660
indicate that they are a micro is

00:54:23,690 --> 00:54:28,880
version so there's you see types which

00:54:26,660 --> 00:54:30,710
allows you to do that kind of interface

00:54:28,880 --> 00:54:35,300
with see data structures there's also

00:54:30,710 --> 00:54:36,650
the FFI module which is using the FFI

00:54:35,300 --> 00:54:39,680
library for foreign function interface

00:54:36,650 --> 00:54:43,310
so you can actually up well not on the

00:54:39,680 --> 00:54:46,190
ESP but on linux you can load any

00:54:43,310 --> 00:54:47,900
dynamic library and and attach bindings

00:54:46,190 --> 00:54:49,550
so I actually used it in one of my

00:54:47,900 --> 00:54:51,290
physics projects market Python was used

00:54:49,550 --> 00:54:54,950
as sort of the front end to script a

00:54:51,290 --> 00:54:56,750
very sophisticated quantum field theory

00:54:54,950 --> 00:54:59,530
simulator so it could call C and C++

00:54:56,750 --> 00:55:02,360
functions so you can use dynamic

00:54:59,530 --> 00:55:05,060
libraries if you want to make your own

00:55:02,360 --> 00:55:07,130
sort of module like a machine module to

00:55:05,060 --> 00:55:09,350
do I oh yeah if you just write it in C

00:55:07,130 --> 00:55:11,840
and then there's a few little thin macro

00:55:09,350 --> 00:55:14,960
wrappers that we have which turns C code

00:55:11,840 --> 00:55:17,090
into a PI micro Python module so it's

00:55:14,960 --> 00:55:19,310
it's it's it's made to be very easy to

00:55:17,090 --> 00:55:24,190
do that and also to call Python from

00:55:19,310 --> 00:55:24,190

YouTube URL: https://www.youtube.com/watch?v=SNo7kRHyubg


