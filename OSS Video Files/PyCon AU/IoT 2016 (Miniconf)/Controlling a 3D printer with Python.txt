Title: Controlling a 3D printer with Python
Publication date: 2016-08-16
Playlist: IoT 2016 (Miniconf)
Description: 
	James Stewart
https://2016.pycon-au.org/schedule/178/view_talk
Additive manufacturing ("3D printing") has already proven to be a revolutionary technology in industries as diverse as medicine, architecture, industrial design and aerospace.
                                                                                                                                                
At the same time affordable consumer-grade printers have put 3d printing increasingly within reach of the general public.                       
                                                                                                                                                
However the user interfaces of most 3D printers still leave something to be desired. Interaction is generally performed via a monochrome LCD and jog dial. Network connectivity is often an afterthought with file transfers primarily performed via SD Card.   
                                                                                                                                                
OpenGB is an Open Source 3D printer control interface. It was developed in conjunction with re:3D as part of the Open Gigabot project but was designed to work on a variety of Open Source 3D printers.
                                                                                                                                                
In this talk James Stewart will describe the OpenGB backend which is written in Python and acts as an intermediary between the network and the printer. Various technologies are employed including:
                                                                                                                                                
* Tornado                                                                                                                                       
* Websockets                                                                                                                                    
* JSONRPC                                                                                                                                       
* Multiprocessing
* pySerial
                                                                                                                                                
As well as 3D printing enthusiasts, this talk will be of interest to anybody using Python to control a lower-level controller such as Arduino.
Captions: 
	00:00:00,110 --> 00:00:03,899
alright hello everybody welcome to the

00:00:02,730 --> 00:00:06,870
second talk

00:00:03,899 --> 00:00:09,240
I've got James Stewart here who is going

00:00:06,870 --> 00:00:12,780
to be talking about 3d printer control

00:00:09,240 --> 00:00:14,880
so handover this year to introduce

00:00:12,780 --> 00:00:21,810
himself and what stuff gonna have an

00:00:14,880 --> 00:00:24,090
alpha last place hi everyone welcome

00:00:21,810 --> 00:00:25,529
welcome to Pike on a you the

00:00:24,090 --> 00:00:27,119
internet-of-things track it's been

00:00:25,529 --> 00:00:29,580
really good so far

00:00:27,119 --> 00:00:30,689
thanks to the previous speakers before

00:00:29,580 --> 00:00:32,219
we start little plug

00:00:30,689 --> 00:00:34,320
I'm from the central coast of New South

00:00:32,219 --> 00:00:35,340
Wales I'm involved in a makerspace Nick

00:00:34,320 --> 00:00:38,190
would spike CeCe

00:00:35,340 --> 00:00:40,620
we really like the esp8266 and micro

00:00:38,190 --> 00:00:42,329
piping we're like all cones are making

00:00:40,620 --> 00:00:43,550
so if you like making stuff you're from

00:00:42,329 --> 00:00:47,670
the coast or you know someone who is

00:00:43,550 --> 00:00:49,020
check this out it's about CC dawg so a

00:00:47,670 --> 00:00:51,510
quick overview of what I'll be talking

00:00:49,020 --> 00:00:54,239
about today first up I'm going to give a

00:00:51,510 --> 00:00:57,210
little intro to 3d printing basically

00:00:54,239 --> 00:00:59,609
talk about the process of 3d printing

00:00:57,210 --> 00:01:01,890
how we control that process generally

00:00:59,609 --> 00:01:04,379
and some of the limitations of how we

00:01:01,890 --> 00:01:07,590
control that process then I'll be

00:01:04,379 --> 00:01:09,000
talking about open G be open G be is an

00:01:07,590 --> 00:01:11,490
attempt to address some of these

00:01:09,000 --> 00:01:14,580
limitations I'll talk about the goals of

00:01:11,490 --> 00:01:18,000
the project the architecture and I'll

00:01:14,580 --> 00:01:19,770
show you some Python code and finally

00:01:18,000 --> 00:01:21,869
I'll just touch on the future

00:01:19,770 --> 00:01:24,030
development of open G B and also how you

00:01:21,869 --> 00:01:25,710
can use some of the patterns of open G

00:01:24,030 --> 00:01:27,979
be in your own Internet of Things

00:01:25,710 --> 00:01:27,979
applications

00:01:28,100 --> 00:01:34,619
so first up who here has ever 3d printed

00:01:31,920 --> 00:01:37,619
something hands up okay

00:01:34,619 --> 00:01:38,490
it's probably about 20% good so some of

00:01:37,619 --> 00:01:40,320
this might be able to help for you

00:01:38,490 --> 00:01:42,930
people but bear with me because it's

00:01:40,320 --> 00:01:44,460
good background I'm basically going to

00:01:42,930 --> 00:01:46,530
be talking about extruded plastic

00:01:44,460 --> 00:01:48,869
printing there are a few different 3d

00:01:46,530 --> 00:01:50,970
printing techniques seemingly more every

00:01:48,869 --> 00:01:54,600
day but extruded plastics how all of the

00:01:50,970 --> 00:01:58,079
common consumer printers work and they

00:01:54,600 --> 00:02:00,270
work like this we start off with solid

00:01:58,079 --> 00:02:02,460
plastic in the form of filament and

00:02:00,270 --> 00:02:05,219
we're going to heat that plastic up so

00:02:02,460 --> 00:02:08,160
it becomes a liquid and we're going to

00:02:05,219 --> 00:02:10,830
move around and deposit it in patterns

00:02:08,160 --> 00:02:13,830
and as we deposit it it becomes solid

00:02:10,830 --> 00:02:18,120
again and we do this layer upon

00:02:13,830 --> 00:02:20,880
upon layer until we end up with a new

00:02:18,120 --> 00:02:23,100
object so I'll pass these around so

00:02:20,880 --> 00:02:30,420
people can have a look blue on that side

00:02:23,100 --> 00:02:37,320
maybe on that side and this is what that

00:02:30,420 --> 00:02:40,710
looks like in real life there we go

00:02:37,320 --> 00:02:42,660
this is in my shed the lens Felix makes

00:02:40,710 --> 00:02:46,950
it look like my shed is located on a

00:02:42,660 --> 00:02:50,430
cloud in heaven it's not and you can see

00:02:46,950 --> 00:02:52,200
out the back there the solid plastic the

00:02:50,430 --> 00:02:54,390
filament that's being fed into the

00:02:52,200 --> 00:02:56,250
printhead by that white tube the

00:02:54,390 --> 00:02:59,190
printhead is very very hot it gets about

00:02:56,250 --> 00:03:00,870
200 degrees C plus and the printhead is

00:02:59,190 --> 00:03:03,360
moving around depositing the plastic the

00:03:00,870 --> 00:03:05,280
plastic solidifies in a shape then we

00:03:03,360 --> 00:03:05,940
move up and we repeat the whole process

00:03:05,280 --> 00:03:09,120
again

00:03:05,940 --> 00:03:10,830
hours and hours announce the printheads

00:03:09,120 --> 00:03:13,320
being moved around by stepper motors

00:03:10,830 --> 00:03:18,690
which you can see right up in the back

00:03:13,320 --> 00:03:20,190
there yeah you could see right up in the

00:03:18,690 --> 00:03:22,709
back day I will come back it's a really

00:03:20,190 --> 00:03:24,570
lovely day there's also one moving the

00:03:22,709 --> 00:03:26,489
printbed around the beds this bit that

00:03:24,570 --> 00:03:31,530
we're printing on one here and here that

00:03:26,489 --> 00:03:34,530
are moving up the z-axis and ultimately

00:03:31,530 --> 00:03:41,840
we're going to end up with a nice new

00:03:34,530 --> 00:03:41,840
object like the one on the end of this

00:03:50,890 --> 00:03:56,990
this is the Python stuff of

00:03:53,720 --> 00:04:00,200
enlightenment and it's a great example

00:03:56,990 --> 00:04:02,740
of what you can do with 3d printing it

00:04:00,200 --> 00:04:05,330
is linked at the end

00:04:02,740 --> 00:04:10,670
yeah that's I've got a spare we're

00:04:05,330 --> 00:04:13,850
working what we do with that I'll think

00:04:10,670 --> 00:04:14,959
about it get back to you a lot so this

00:04:13,850 --> 00:04:16,489
is a great example what you can do with

00:04:14,959 --> 00:04:17,870
3d printing you start out with an idea

00:04:16,489 --> 00:04:20,390
in your imagination

00:04:17,870 --> 00:04:22,970
my friend Ben from you recommend designs

00:04:20,390 --> 00:04:25,280
very talented CAD guy turned it into a

00:04:22,970 --> 00:04:26,750
digital reality and then my printer

00:04:25,280 --> 00:04:27,860
turned it into a physical reality so

00:04:26,750 --> 00:04:30,890
these are the sort of things we can do

00:04:27,860 --> 00:04:32,480
with 3d printing so anyway how does that

00:04:30,890 --> 00:04:34,450
work what you're watching just then well

00:04:32,480 --> 00:04:37,760
we've got heaters heaters for the nozzle

00:04:34,450 --> 00:04:39,919
to get it up to 200 degrees C etc and

00:04:37,760 --> 00:04:42,230
also the print bed which helps with

00:04:39,919 --> 00:04:43,610
adhesion a few other things and to

00:04:42,230 --> 00:04:45,260
control the heaters we have temperature

00:04:43,610 --> 00:04:47,600
sensors it's a standard thermostat

00:04:45,260 --> 00:04:49,220
arrangement now we have the stepper

00:04:47,600 --> 00:04:50,720
motors moving the head around but we

00:04:49,220 --> 00:04:52,880
don't actually know where the head is in

00:04:50,720 --> 00:04:56,180
3d space the stepper motor is just

00:04:52,880 --> 00:04:58,040
turned left alright so we need limit

00:04:56,180 --> 00:05:00,979
switches the way they work is the

00:04:58,040 --> 00:05:02,570
printhead moves along an axis until it

00:05:00,979 --> 00:05:04,729
hits a limit switch and then we know its

00:05:02,570 --> 00:05:06,890
position on that axis we do that in each

00:05:04,729 --> 00:05:08,960
axis sense that's called homing and

00:05:06,890 --> 00:05:09,820
basically then we can move relatively

00:05:08,960 --> 00:05:12,050
from there

00:05:09,820 --> 00:05:14,780
and all of these things are plugged into

00:05:12,050 --> 00:05:16,630
an Arduino or a similar microcontroller

00:05:14,780 --> 00:05:18,860
there's quite a few of them now and

00:05:16,630 --> 00:05:20,390
basically that's running an Arduino C

00:05:18,860 --> 00:05:23,030
application that's looping around around

00:05:20,390 --> 00:05:26,030
and around taking inputs controlling all

00:05:23,030 --> 00:05:29,270
these things and printing out our

00:05:26,030 --> 00:05:31,340
objects now how does the user interact

00:05:29,270 --> 00:05:34,370
with this well for output we have a dot

00:05:31,340 --> 00:05:36,530
matrix LCD we have a jog dial which we

00:05:34,370 --> 00:05:38,720
turn left and right and press to select

00:05:36,530 --> 00:05:42,020
things and to get files on we have an SD

00:05:38,720 --> 00:05:44,110
card this is what that looks like who

00:05:42,020 --> 00:05:46,640
had an mp3 player in the late 90s

00:05:44,110 --> 00:05:49,190
feeling nostalgic yeah it's kind of like

00:05:46,640 --> 00:05:51,229
this it's functional it's obviously got

00:05:49,190 --> 00:05:54,080
a lot of limitations when you try to set

00:05:51,229 --> 00:05:56,570
70 degrees and you go to 69 71 6 917 you

00:05:54,080 --> 00:05:58,910
can't click it on for example it works

00:05:56,570 --> 00:06:02,800
but that's about it

00:05:58,910 --> 00:06:05,330
the SD card contains g-code files now

00:06:02,800 --> 00:06:07,370
g-code is the file format that tells the

00:06:05,330 --> 00:06:09,200
printhead how to move did anyone use

00:06:07,370 --> 00:06:11,420
logo maybe in the younger days moving

00:06:09,200 --> 00:06:15,530
the turtle around it's not dissimilar to

00:06:11,420 --> 00:06:16,760
that basically ah didn't know this gave

00:06:15,530 --> 00:06:18,830
me this hi

00:06:16,760 --> 00:06:20,990
that line is saying set the acceleration

00:06:18,830 --> 00:06:22,880
of the head move it to these coordinates

00:06:20,990 --> 00:06:25,160
and while you do extrude a little bit of

00:06:22,880 --> 00:06:26,480
molten plastic we do that thousands of

00:06:25,160 --> 00:06:28,160
times tens of thousands of times

00:06:26,480 --> 00:06:31,610
hundreds of thousands of times at many

00:06:28,160 --> 00:06:33,410
hours to get our printed object so

00:06:31,610 --> 00:06:35,540
limitations are the inputs a bit

00:06:33,410 --> 00:06:38,060
cumbersome the output is quite limited

00:06:35,540 --> 00:06:40,280
we've just got that little LCD we have

00:06:38,060 --> 00:06:41,840
to move from our computer to the printer

00:06:40,280 --> 00:06:44,570
back again every time we want to

00:06:41,840 --> 00:06:46,100
transfer a file by our SD card and you

00:06:44,570 --> 00:06:47,450
can only control the printer by standing

00:06:46,100 --> 00:06:50,300
next to it and fiddling around with a

00:06:47,450 --> 00:06:53,930
job done it works but we can do better

00:06:50,300 --> 00:06:55,730
and that's what open GB tries to do the

00:06:53,930 --> 00:06:57,200
first goal of Open GB is to create a

00:06:55,730 --> 00:06:58,850
better interface one that's approachable

00:06:57,200 --> 00:07:01,730
so anyone can come along and start using

00:06:58,850 --> 00:07:03,500
your 3d printer and one that's feature

00:07:01,730 --> 00:07:05,060
each we want to want to be able to do

00:07:03,500 --> 00:07:06,770
lots and lots of things with our 3d

00:07:05,060 --> 00:07:09,380
printer cause it's a cool piece of

00:07:06,770 --> 00:07:12,560
machinery we'd like it to look maybe

00:07:09,380 --> 00:07:15,050
something like this maybe just off the

00:07:12,560 --> 00:07:16,640
top of my head we want to get our

00:07:15,050 --> 00:07:19,220
printer on the network is the second big

00:07:16,640 --> 00:07:20,720
goal g-code uploads from our computer

00:07:19,220 --> 00:07:22,970
rather than having good taken SD card

00:07:20,720 --> 00:07:26,390
back and forth we want to be able to

00:07:22,970 --> 00:07:30,230
control their printer remotely so we can

00:07:26,390 --> 00:07:32,300
initiate prints or other things and we

00:07:30,230 --> 00:07:33,500
also similarly want to monitor the

00:07:32,300 --> 00:07:35,480
printer remotely this one is very

00:07:33,500 --> 00:07:37,400
important when you're sitting on the

00:07:35,480 --> 00:07:39,290
sofa drinking beer and watching TV and

00:07:37,400 --> 00:07:41,660
you want to check out your prints doing

00:07:39,290 --> 00:07:44,960
so um obviously a very important goal

00:07:41,660 --> 00:07:48,590
there and finally the code base itself

00:07:44,960 --> 00:07:50,560
fully open source obviously we wanted to

00:07:48,590 --> 00:07:54,050
be API driven so we want to be saying

00:07:50,560 --> 00:07:56,360
here's an API to a printer and then

00:07:54,050 --> 00:07:58,580
building on that that's our sort of

00:07:56,360 --> 00:07:59,930
first goal that API has to be really

00:07:58,580 --> 00:08:01,580
well documented because we want lots of

00:07:59,930 --> 00:08:05,420
people to be able to use your printer in

00:08:01,580 --> 00:08:07,160
interesting ways and finally opened UB

00:08:05,420 --> 00:08:09,020
itself we want to be very easy to deploy

00:08:07,160 --> 00:08:10,880
not everyone who's got a 3d printer is

00:08:09,020 --> 00:08:12,000
the Linux you said Ben or a Python

00:08:10,880 --> 00:08:14,400
Easter or what

00:08:12,000 --> 00:08:17,100
they want to fairly easily be able to

00:08:14,400 --> 00:08:19,080
get up and running here's an example of

00:08:17,100 --> 00:08:24,210
the documentation we kind of want to go

00:08:19,080 --> 00:08:25,290
for for our API for example so how do we

00:08:24,210 --> 00:08:27,630
achieve this we're getting back to our

00:08:25,290 --> 00:08:30,360
printer control slide we had the dot

00:08:27,630 --> 00:08:32,580
matrix the jog dial the SD card we also

00:08:30,360 --> 00:08:35,280
have a serial interface on most

00:08:32,580 --> 00:08:37,080
microcontrollers and we can basically

00:08:35,280 --> 00:08:38,190
send those gqo commands that I showed

00:08:37,080 --> 00:08:41,219
you straight down the serial interface

00:08:38,190 --> 00:08:44,390
so we don't need any of this anymore we

00:08:41,219 --> 00:08:47,760
replace it with a single board computer

00:08:44,390 --> 00:08:49,740
ostensibly a Raspberry Pi it could be

00:08:47,760 --> 00:08:52,710
any computer running Linux of Python but

00:08:49,740 --> 00:08:57,840
the Raspberry Pi is ubiquitous it's

00:08:52,710 --> 00:09:01,980
cheap its low-power its what did I miss

00:08:57,840 --> 00:09:03,900
small it's very powerful now with four

00:09:01,980 --> 00:09:05,850
cores and it's even got wife on board so

00:09:03,900 --> 00:09:09,990
kind of does everything we need it to do

00:09:05,850 --> 00:09:12,360
and once we have a computer we can run a

00:09:09,990 --> 00:09:13,560
Python application so this isn't the

00:09:12,360 --> 00:09:14,790
best diagram in the world but there's

00:09:13,560 --> 00:09:16,380
our printer hardware there's our

00:09:14,790 --> 00:09:18,510
microcontroller and the big thing in the

00:09:16,380 --> 00:09:20,700
middle is the Raspberry Pi and up here

00:09:18,510 --> 00:09:23,339
is our Python application which I'll

00:09:20,700 --> 00:09:25,230
just refer to as open GB is the project

00:09:23,339 --> 00:09:28,500
and then that application we just call

00:09:25,230 --> 00:09:30,839
it all open GB and within that we have

00:09:28,500 --> 00:09:32,480
two processes running this rig is a bit

00:09:30,839 --> 00:09:34,770
more technical we got the server process

00:09:32,480 --> 00:09:37,470
and the printer process and the job of

00:09:34,770 --> 00:09:41,520
all of this is to expose the printer to

00:09:37,470 --> 00:09:45,390
the network so starting with the printer

00:09:41,520 --> 00:09:47,400
process printing in 3e especially with

00:09:45,390 --> 00:09:50,850
the extruded plastic is a very critical

00:09:47,400 --> 00:09:52,230
process if you get something wrong you

00:09:50,850 --> 00:09:55,500
screw up a whole print if you miss a

00:09:52,230 --> 00:09:57,570
step or it's laggy and if you've been

00:09:55,500 --> 00:10:00,120
printing for 19 hours and then this

00:09:57,570 --> 00:10:04,800
happens it's a very very sad state of

00:10:00,120 --> 00:10:06,450
affairs much swearing etc so therefore

00:10:04,800 --> 00:10:09,360
we keep the printing in its own separate

00:10:06,450 --> 00:10:10,980
process so it's uninterrupted it's

00:10:09,360 --> 00:10:12,450
obviously going to be managing the

00:10:10,980 --> 00:10:14,550
serial connection to the microcontroller

00:10:12,450 --> 00:10:16,890
and what we're going to do is we're

00:10:14,550 --> 00:10:19,830
going to expose the printer is an

00:10:16,890 --> 00:10:22,020
interface so all of that G code and the

00:10:19,830 --> 00:10:23,700
implementation detail goes away we just

00:10:22,020 --> 00:10:25,510
have an interface to our printer so it's

00:10:23,700 --> 00:10:27,730
the G code of destruction and

00:10:25,510 --> 00:10:28,870
we do that we can then obviously support

00:10:27,730 --> 00:10:31,770
lots of printers with all their

00:10:28,870 --> 00:10:36,880
idiosyncrasies in a standard way

00:10:31,770 --> 00:10:39,130
so some code yeah hopefully you could

00:10:36,880 --> 00:10:41,890
read that okay it's a little great the

00:10:39,130 --> 00:10:45,220
way the print is implemented is as an

00:10:41,890 --> 00:10:48,310
abstract base class that subclasses

00:10:45,220 --> 00:10:51,580
multi-processing dot process who's done

00:10:48,310 --> 00:10:54,340
some multi processing coding before few

00:10:51,580 --> 00:10:58,780
people okay and use the abstract base

00:10:54,340 --> 00:11:00,970
classes and so okay so the concept of an

00:10:58,780 --> 00:11:02,860
abstract base class is basically that it

00:11:00,970 --> 00:11:07,510
it's a type of thing but it's not a

00:11:02,860 --> 00:11:09,220
thing itself so this is saying if you

00:11:07,510 --> 00:11:12,220
but with that decorator there the

00:11:09,220 --> 00:11:15,190
abstract method if you are going to

00:11:12,220 --> 00:11:16,900
create a printer it has to support set

00:11:15,190 --> 00:11:18,580
temp set temp to set the temperature

00:11:16,900 --> 00:11:22,510
temperature of the bed or the nozzles

00:11:18,580 --> 00:11:26,350
and that's basically the definition of

00:11:22,510 --> 00:11:29,680
that method and then what we do is we

00:11:26,350 --> 00:11:31,480
take that and implement it here for

00:11:29,680 --> 00:11:33,910
Marlin Marlin is one of the more common

00:11:31,480 --> 00:11:36,670
of the 3d printer firmware that we run

00:11:33,910 --> 00:11:39,880
and we say ok for a Marlin printer when

00:11:36,670 --> 00:11:42,520
you say set temp if it's the bed

00:11:39,880 --> 00:11:44,920
temperature I know to send an m14 t JK

00:11:42,520 --> 00:11:46,300
command if I'm setting the nozzle

00:11:44,920 --> 00:11:49,180
temperature I know I have to choose the

00:11:46,300 --> 00:11:52,540
nozzle with the T 0 T 1 and then set the

00:11:49,180 --> 00:11:54,640
temperature with M 104 so these are

00:11:52,540 --> 00:11:56,260
implementation details that most of you

00:11:54,640 --> 00:11:58,510
probably wouldn't care about if you were

00:11:56,260 --> 00:12:00,430
trying to get your printer to do things

00:11:58,510 --> 00:12:02,910
so you can use this interface and say

00:12:00,430 --> 00:12:05,140
yeah I don't care set the temperature

00:12:02,910 --> 00:12:07,450
another really nice feature of this is

00:12:05,140 --> 00:12:09,250
you can create dummy hardware to stub

00:12:07,450 --> 00:12:11,440
out your hardware this is really good if

00:12:09,250 --> 00:12:12,970
you want to hack on your project on the

00:12:11,440 --> 00:12:16,750
train and not take your 3d printer with

00:12:12,970 --> 00:12:18,070
you there's no power plugs so you can do

00:12:16,750 --> 00:12:19,810
something like this where you say okay

00:12:18,070 --> 00:12:21,370
if you call set temp I'm just going to

00:12:19,810 --> 00:12:23,650
spit out a log message saying that I set

00:12:21,370 --> 00:12:25,000
the temperature front-end developers

00:12:23,650 --> 00:12:26,350
like this too because they can start

00:12:25,000 --> 00:12:29,890
hacking into your API with the other

00:12:26,350 --> 00:12:33,070
hardware now to get messages into the

00:12:29,890 --> 00:12:35,650
printer process fairly standard we use a

00:12:33,070 --> 00:12:37,390
multi processing queue and that's just a

00:12:35,650 --> 00:12:38,720
cure messages that come in they look

00:12:37,390 --> 00:12:40,129
like this

00:12:38,720 --> 00:12:42,019
they look like that for reasons that

00:12:40,129 --> 00:12:43,879
will become apparent soon but basically

00:12:42,019 --> 00:12:45,170
we say I want to call the set temp

00:12:43,879 --> 00:12:49,040
method and I want to give it these

00:12:45,170 --> 00:12:50,750
parameters yeah pretty self-evident and

00:12:49,040 --> 00:12:52,339
then we say yep try and call the method

00:12:50,750 --> 00:12:54,889
with those parameters and if not raising

00:12:52,339 --> 00:12:57,920
the exception now we don't actually

00:12:54,889 --> 00:12:59,660
respond to I guess that effectively

00:12:57,920 --> 00:13:01,819
remote procedure calls we don't send

00:12:59,660 --> 00:13:04,790
responses everything that comes out of

00:13:01,819 --> 00:13:07,850
the printer we treat as events so for

00:13:04,790 --> 00:13:10,100
example well the way that looks is with

00:13:07,850 --> 00:13:12,920
printer callbacks the printer callbacks

00:13:10,100 --> 00:13:14,540
class which is to find up here and it's

00:13:12,920 --> 00:13:17,149
just a class a standard vanilla class

00:13:14,540 --> 00:13:18,259
and each method defines an event that

00:13:17,149 --> 00:13:20,810
might come out of the printer for

00:13:18,259 --> 00:13:22,339
example a temperature update which shows

00:13:20,810 --> 00:13:23,839
us the current and the target

00:13:22,339 --> 00:13:28,189
temperature for the bed and the nozzles

00:13:23,839 --> 00:13:30,920
and then what we do in open GB is we

00:13:28,189 --> 00:13:33,050
define what are called cube printer

00:13:30,920 --> 00:13:34,430
callbacks actually borrowed this idea

00:13:33,050 --> 00:13:36,889
from kira which is a really good

00:13:34,430 --> 00:13:38,720
open-source slicing piece of slicing

00:13:36,889 --> 00:13:41,779
software so thanks for that Kuro

00:13:38,720 --> 00:13:43,550
developers and basically it's got a

00:13:41,779 --> 00:13:45,470
multi processing queue same as the one

00:13:43,550 --> 00:13:47,269
that's coming in and it's just going to

00:13:45,470 --> 00:13:50,660
say right every time I get called to do

00:13:47,269 --> 00:13:52,730
a temperature update publish a message

00:13:50,660 --> 00:13:56,000
on the queue that looks very similar to

00:13:52,730 --> 00:13:59,839
the months that we're coming in when we

00:13:56,000 --> 00:14:02,259
create this we that's us

00:13:59,839 --> 00:14:05,329
creating a multi processing queue object

00:14:02,259 --> 00:14:08,569
then we wrap that in queue printer

00:14:05,329 --> 00:14:11,319
callbacks and here when we create our

00:14:08,569 --> 00:14:14,779
printer printer type comes out of our

00:14:11,319 --> 00:14:16,399
config we pass at the printer callbacks

00:14:14,779 --> 00:14:18,500
the printer will now I'll when I want to

00:14:16,399 --> 00:14:21,079
do a temperature update I throw it at

00:14:18,500 --> 00:14:23,509
that and go into the queue see how

00:14:21,079 --> 00:14:26,540
that's processed in a moment so that's

00:14:23,509 --> 00:14:29,120
abstracting the printer into this

00:14:26,540 --> 00:14:30,620
printer process now we need to connect

00:14:29,120 --> 00:14:32,540
to that with a server process so we can

00:14:30,620 --> 00:14:35,600
expose the printer to the network with

00:14:32,540 --> 00:14:37,370
an API so that's going to be a web

00:14:35,600 --> 00:14:40,579
socket API which I'll talk about in a

00:14:37,370 --> 00:14:41,809
sec it's is sort of more the usual kind

00:14:40,579 --> 00:14:44,769
of development a lot of you probably

00:14:41,809 --> 00:14:47,120
done sort of a web web-based application

00:14:44,769 --> 00:14:48,589
and we use the data we've got a database

00:14:47,120 --> 00:14:50,059
in the file system so we can store a

00:14:48,589 --> 00:14:52,100
data and metadata we can do all these

00:14:50,059 --> 00:14:54,470
nice things because we've

00:14:52,100 --> 00:14:58,009
a computer running Python to do this we

00:14:54,470 --> 00:14:59,930
use tornado you choose tornado MA not as

00:14:58,009 --> 00:15:01,880
many as I'd of thought okay tornadoes

00:14:59,930 --> 00:15:02,990
great turnout is really good for this

00:15:01,880 --> 00:15:05,240
sort of thing because it's

00:15:02,990 --> 00:15:07,790
self-contained it's a web framework like

00:15:05,240 --> 00:15:10,579
Django or flask or any of the others but

00:15:07,790 --> 00:15:13,160
it's also self-contained

00:15:10,579 --> 00:15:15,139
it's also a web server but a production

00:15:13,160 --> 00:15:17,089
ready web server I know with these

00:15:15,139 --> 00:15:18,560
others you can invoke a dev web server

00:15:17,089 --> 00:15:20,420
but really you shouldn't use that for

00:15:18,560 --> 00:15:22,970
anything production it's more just to

00:15:20,420 --> 00:15:25,009
hack against tornado can do this because

00:15:22,970 --> 00:15:27,079
it is asynchronous so it's all bundled

00:15:25,009 --> 00:15:31,509
together and it all just works really

00:15:27,079 --> 00:15:36,050
nicely it has an event loop built-in and

00:15:31,509 --> 00:15:38,029
so we use that to process our events

00:15:36,050 --> 00:15:40,250
coming out of our printer with what are

00:15:38,029 --> 00:15:42,050
called periodic callbacks this is built

00:15:40,250 --> 00:15:44,480
into tornado and they're like little

00:15:42,050 --> 00:15:48,459
cron jobs just built into the web server

00:15:44,480 --> 00:15:52,130
web framework itself so here we say I

00:15:48,459 --> 00:15:55,069
want to create a periodic callback and

00:15:52,130 --> 00:15:56,839
what I wanted to do is call process

00:15:55,069 --> 00:15:57,800
printer events using that from printer

00:15:56,839 --> 00:15:59,810
queue that the events are being

00:15:57,800 --> 00:16:03,649
published to and I want to do that every

00:15:59,810 --> 00:16:04,819
10 milliseconds I think and then we kick

00:16:03,649 --> 00:16:08,209
that off and it's just going to sit

00:16:04,819 --> 00:16:09,769
there as part of the loop and do that

00:16:08,209 --> 00:16:12,920
every 10 seconds get those immense out

00:16:09,769 --> 00:16:15,589
of the printer web sockets any

00:16:12,920 --> 00:16:17,480
experience with web sockets yeah a few

00:16:15,589 --> 00:16:18,350
more ok web sockets are perfect for

00:16:17,480 --> 00:16:20,689
these sort of Internet of Things

00:16:18,350 --> 00:16:23,410
applications we don't have it have any

00:16:20,689 --> 00:16:27,439
of the standard HTTP gets put et cetera

00:16:23,410 --> 00:16:31,279
a client just connects to this web

00:16:27,439 --> 00:16:34,279
socket endpoint and and basically this

00:16:31,279 --> 00:16:36,230
is all built into tornado so tornado has

00:16:34,279 --> 00:16:38,810
a web socket Handler and again really

00:16:36,230 --> 00:16:40,880
really simple we just say when we get a

00:16:38,810 --> 00:16:42,589
new connection we have an open method do

00:16:40,880 --> 00:16:45,110
something in this case we just in the

00:16:42,589 --> 00:16:46,579
client to a list of clients when a

00:16:45,110 --> 00:16:48,589
client closes the connection we do the

00:16:46,579 --> 00:16:50,480
reverse and when we get a message from

00:16:48,589 --> 00:16:51,290
the client we deal with it and that's

00:16:50,480 --> 00:16:53,449
pretty much it

00:16:51,290 --> 00:16:55,399
no more polling stuffing around you just

00:16:53,449 --> 00:16:58,370
have a connection and you send messages

00:16:55,399 --> 00:16:59,959
back and forth just answer my own

00:16:58,370 --> 00:17:02,569
question I miss a bit what format did

00:16:59,959 --> 00:17:04,370
the messages take anyone guess I almost

00:17:02,569 --> 00:17:05,580
robbed my own I knew that wasn't the

00:17:04,370 --> 00:17:08,480
right thing to do and I didn't want

00:17:05,580 --> 00:17:12,960
xml-rpc after a bit of hunting around

00:17:08,480 --> 00:17:15,270
json-rpc 2.0 it's about a page of spec

00:17:12,960 --> 00:17:17,100
there's not much to it but it's a spec

00:17:15,270 --> 00:17:20,490
as opposed to doing your own thing which

00:17:17,100 --> 00:17:23,490
always feels I'm pythonic there's

00:17:20,490 --> 00:17:25,800
usually a better way alright this is

00:17:23,490 --> 00:17:28,770
what a request looks like basically you

00:17:25,800 --> 00:17:31,470
get some JSON and it has the version

00:17:28,770 --> 00:17:33,600
usually 2.0 the idea of the message so

00:17:31,470 --> 00:17:35,070
we can track the results the method

00:17:33,600 --> 00:17:36,900
we're going to call and the prime

00:17:35,070 --> 00:17:38,550
ministry calling it with and now you can

00:17:36,900 --> 00:17:39,960
see where the method and the promess

00:17:38,550 --> 00:17:41,760
that are using interprocess

00:17:39,960 --> 00:17:43,590
communication comes from so it's very

00:17:41,760 --> 00:17:47,220
easy to map one to the other by doing it

00:17:43,590 --> 00:17:49,740
this way a response again very simple

00:17:47,220 --> 00:17:51,930
we're using JSON RPC to we're responding

00:17:49,740 --> 00:17:53,930
the message one and here's my result in

00:17:51,930 --> 00:17:56,940
this case yeah true it worked

00:17:53,930 --> 00:17:59,310
now JSON RPC also defines one other

00:17:56,940 --> 00:18:03,200
useful thing that is good for this

00:17:59,310 --> 00:18:05,460
situation and that is that a request

00:18:03,200 --> 00:18:08,400
doesn't necessarily have to have an ID

00:18:05,460 --> 00:18:10,620
if we don't give it an ID then we don't

00:18:08,400 --> 00:18:13,020
expect a response back and this is

00:18:10,620 --> 00:18:14,130
perfect for events so the temp update

00:18:13,020 --> 00:18:16,620
events that are coming out of our

00:18:14,130 --> 00:18:19,140
printing printer process

00:18:16,620 --> 00:18:20,820
it's just blasting those out saying

00:18:19,140 --> 00:18:22,740
here's temp update event I don't care I

00:18:20,820 --> 00:18:24,660
don't wanna hear back from me and so

00:18:22,740 --> 00:18:29,220
that's what we use that part of JSON RPC

00:18:24,660 --> 00:18:31,530
for it's very easy to get JSON RPC

00:18:29,220 --> 00:18:34,350
working with tornado there are a few

00:18:31,530 --> 00:18:36,240
JSON RPC libraries for Python that one

00:18:34,350 --> 00:18:38,610
over there just an RPC seem to be the

00:18:36,240 --> 00:18:41,730
best one because it supports Python 3

00:18:38,610 --> 00:18:44,190
and open jeebies Python 3 only because

00:18:41,730 --> 00:18:45,450
we can and it means I can use enums and

00:18:44,190 --> 00:18:48,870
a few other nice things without having

00:18:45,450 --> 00:18:50,990
dip stuff around back porting so the way

00:18:48,870 --> 00:18:52,860
that looks

00:18:50,990 --> 00:18:55,950
building on everything we've done before

00:18:52,860 --> 00:18:57,960
is we we create a message handle a class

00:18:55,950 --> 00:19:00,630
which again is just a vanilla Python

00:18:57,960 --> 00:19:04,950
class and it defines a bunch of methods

00:19:00,630 --> 00:19:07,950
that are going to make up our our API

00:19:04,950 --> 00:19:10,410
our interface to be called by a JSON RPC

00:19:07,950 --> 00:19:12,810
calls so you can see here back to our

00:19:10,410 --> 00:19:14,520
set temp method and it's pretty clear

00:19:12,810 --> 00:19:16,770
what it's going to do it's going to get

00:19:14,520 --> 00:19:18,919
these parameters bed nozzle nozzle

00:19:16,770 --> 00:19:20,720
nozzle 1 & 2

00:19:18,919 --> 00:19:22,039
and it's going to just pop those

00:19:20,720 --> 00:19:24,919
straight on that cue to the printer

00:19:22,039 --> 00:19:27,470
pretty much how they look I did actually

00:19:24,919 --> 00:19:29,390
a little aside I did actually have this

00:19:27,470 --> 00:19:31,490
set up originally to do json-rpc

00:19:29,390 --> 00:19:32,630
with the inter-process communication

00:19:31,490 --> 00:19:34,370
then it dawned on me that I was

00:19:32,630 --> 00:19:36,409
serializing and deserializing the

00:19:34,370 --> 00:19:38,960
strings and it just seems silly to be

00:19:36,409 --> 00:19:40,580
using that inside so yeah that's why

00:19:38,960 --> 00:19:43,640
otherwise we could just pass there just

00:19:40,580 --> 00:19:46,520
nobody sitting on and the way where you

00:19:43,640 --> 00:19:48,169
set that up back to the the WebSocket

00:19:46,520 --> 00:19:49,820
handler that I mentioned before remember

00:19:48,169 --> 00:19:51,440
I said there's this on teach method

00:19:49,820 --> 00:19:54,380
that's called whenever we get a message

00:19:51,440 --> 00:19:57,110
from the client we wrap that message

00:19:54,380 --> 00:19:59,539
handler with all of our methods in a

00:19:57,110 --> 00:20:01,970
dispatcher and then when a message comes

00:19:59,539 --> 00:20:04,220
in from the client we handle it using

00:20:01,970 --> 00:20:07,490
that dispatcher and this is where the

00:20:04,220 --> 00:20:09,200
magic comes in basically that message is

00:20:07,490 --> 00:20:11,809
going to come in as just a string of

00:20:09,200 --> 00:20:14,120
text from a WebSocket connection the

00:20:11,809 --> 00:20:17,899
JSON RPC response may just going to take

00:20:14,120 --> 00:20:21,260
care of turning that into Jason if it's

00:20:17,899 --> 00:20:22,909
not so deserializing and I guess if it's

00:20:21,260 --> 00:20:24,710
not valid Jason it's going to bung back

00:20:22,909 --> 00:20:27,110
a standard JSON RPC error they're a

00:20:24,710 --> 00:20:29,690
bunch of standard errors define all

00:20:27,110 --> 00:20:32,029
nicely formatted in a in a way that

00:20:29,690 --> 00:20:33,799
standard clients can handle then it's

00:20:32,029 --> 00:20:35,539
going to try and call a method out of

00:20:33,799 --> 00:20:37,549
our message handler if the methods not

00:20:35,539 --> 00:20:38,210
there if the parameters we've given are

00:20:37,549 --> 00:20:39,980
incorrect

00:20:38,210 --> 00:20:41,210
it'll just generate in here we don't

00:20:39,980 --> 00:20:43,520
have to worry about dealing with any of

00:20:41,210 --> 00:20:46,940
that if it does get as far as calling

00:20:43,520 --> 00:20:49,549
our method out of a message handler it's

00:20:46,940 --> 00:20:52,789
and the message handle raises an

00:20:49,549 --> 00:20:55,190
exception then it'll generate an error

00:20:52,789 --> 00:20:57,380
send it back by Jason obviously if it's

00:20:55,190 --> 00:20:59,510
done it properly and the message handle

00:20:57,380 --> 00:21:01,190
is called and generates a response it

00:20:59,510 --> 00:21:02,929
will wrap that response up make it look

00:21:01,190 --> 00:21:04,520
like a JSON RPC response and send it

00:21:02,929 --> 00:21:06,289
back so all these things you don't have

00:21:04,520 --> 00:21:09,770
to deal with you can get on with

00:21:06,289 --> 00:21:12,350
building what you want to build the last

00:21:09,770 --> 00:21:15,460
nice thing about this who use the Sphynx

00:21:12,350 --> 00:21:18,950
compatible doc strings Thank You boys

00:21:15,460 --> 00:21:21,110
and these things that opt over yeah

00:21:18,950 --> 00:21:22,789
they're really great you should probably

00:21:21,110 --> 00:21:24,350
do them if you're really on the cutting

00:21:22,789 --> 00:21:27,140
edge you can use pip for it for type

00:21:24,350 --> 00:21:31,640
intz same thing basically a nice way to

00:21:27,140 --> 00:21:35,330
show the the

00:21:31,640 --> 00:21:38,750
definition of your method automatically

00:21:35,330 --> 00:21:40,130
we get our API Docs and I showed you at

00:21:38,750 --> 00:21:42,350
the start that was kind of a goal of the

00:21:40,130 --> 00:21:44,630
project so when if you add a new method

00:21:42,350 --> 00:21:48,220
you document it properly or use your

00:21:44,630 --> 00:21:50,480
tokens you've got a nice Sphinx

00:21:48,220 --> 00:21:51,890
documentation output that you can point

00:21:50,480 --> 00:21:56,210
your front-end developer or an app

00:21:51,890 --> 00:22:05,570
developer at and say yeah I'll touch

00:21:56,210 --> 00:22:07,520
briefly on the ORM SQL Lite their goal

00:22:05,570 --> 00:22:09,410
to keep everything encapsulated not have

00:22:07,520 --> 00:22:10,820
to run extra services or whatever we're

00:22:09,410 --> 00:22:12,680
not doing anything heavy-duty here so

00:22:10,820 --> 00:22:15,230
SQL Lite is perfect for the job that's

00:22:12,680 --> 00:22:17,900
also built into Python now of course and

00:22:15,230 --> 00:22:19,340
peewee if you haven't used it I won't go

00:22:17,900 --> 00:22:21,230
into the code examples too much but it's

00:22:19,340 --> 00:22:24,530
just a really light way an intuitive ORM

00:22:21,230 --> 00:22:26,270
layer to wrap this cool idea so yeah and

00:22:24,530 --> 00:22:29,570
it plays really nice with a tornado as

00:22:26,270 --> 00:22:32,750
well so yeah SQL Lite and peewit for

00:22:29,570 --> 00:22:35,510
your RM is a good choice so that's open

00:22:32,750 --> 00:22:38,210
GB that's the Python application a brief

00:22:35,510 --> 00:22:40,460
overview anyway the way we consume that

00:22:38,210 --> 00:22:42,620
is we've a front-end application called

00:22:40,460 --> 00:22:44,270
open GB web and now this is a Python

00:22:42,620 --> 00:22:45,890
conference and I don't much time left so

00:22:44,270 --> 00:22:48,230
it won't go too much into that suffice

00:22:45,890 --> 00:22:50,690
to say it's written in JavaScript in a

00:22:48,230 --> 00:22:52,930
framework called view jeaious UJS is a

00:22:50,690 --> 00:22:55,280
really lightweight quite intuitive

00:22:52,930 --> 00:22:59,090
javascript framework I tried a couple

00:22:55,280 --> 00:23:01,580
and yep from a Python guy to go to some

00:22:59,090 --> 00:23:02,750
of these things a bit difficult but UJS

00:23:01,580 --> 00:23:05,570
is a good one if you're thinking of

00:23:02,750 --> 00:23:06,980
doing the good thing about this is it's

00:23:05,570 --> 00:23:08,180
completely optional you don't have to

00:23:06,980 --> 00:23:09,950
serve up the front-end you can run

00:23:08,180 --> 00:23:12,020
completely headless just as a web socket

00:23:09,950 --> 00:23:14,030
API and it's a completely distinct

00:23:12,020 --> 00:23:17,120
codebase there's a separate repo with

00:23:14,030 --> 00:23:19,250
this JavaScript front-end we take a

00:23:17,120 --> 00:23:22,070
build of it and we pull that into the

00:23:19,250 --> 00:23:23,930
open GB codebase so someone can hit it

00:23:22,070 --> 00:23:26,410
and get a web front-end but it's

00:23:23,930 --> 00:23:29,840
completely divorced completely separate

00:23:26,410 --> 00:23:32,600
yeah which is a really nice distinction

00:23:29,840 --> 00:23:33,560
Thanks and also the last thing I don't

00:23:32,600 --> 00:23:35,750
know if you know but the Raspberry Pi

00:23:33,560 --> 00:23:38,720
has a really nice touch screen that you

00:23:35,750 --> 00:23:40,730
can plug in to it so if you do that like

00:23:38,720 --> 00:23:42,950
here that's what sort of got a browser

00:23:40,730 --> 00:23:45,320
plugged in to the Raspberry Pi then you

00:23:42,950 --> 00:23:47,240
can boot straight into a full screen

00:23:45,320 --> 00:23:49,639
web browser and you can have exactly the

00:23:47,240 --> 00:23:51,230
same interface on your Raspberry Pi next

00:23:49,639 --> 00:23:55,340
you print as you do on your computer on

00:23:51,230 --> 00:23:57,019
your phone or whatever so I was going to

00:23:55,340 --> 00:23:58,490
try to serve a live demo and show your

00:23:57,019 --> 00:24:02,000
logs going in and out but I don't really

00:23:58,490 --> 00:24:03,639
have the time so I'm just going to show

00:24:02,000 --> 00:24:06,950
you what this looks like in practice

00:24:03,639 --> 00:24:09,289
back to the shed although not on such a

00:24:06,950 --> 00:24:10,850
sunny day so this is the interface that

00:24:09,289 --> 00:24:13,220
we end up with running on the raspberry

00:24:10,850 --> 00:24:15,289
PI's touch screen you can see here I'm

00:24:13,220 --> 00:24:16,940
using the buttons on the fancy cube

00:24:15,289 --> 00:24:20,240
there to move the printhead around and

00:24:16,940 --> 00:24:22,279
the bed up there I just choose how far

00:24:20,240 --> 00:24:24,019
we want to move on each step that's the

00:24:22,279 --> 00:24:26,269
homing I talked about so basically you

00:24:24,019 --> 00:24:30,110
click home each of the axes homes home

00:24:26,269 --> 00:24:32,389
all owns them all at once so now the

00:24:30,110 --> 00:24:38,029
printer knows that at zero zero zero and

00:24:32,389 --> 00:24:39,830
it can start printing things click and

00:24:38,029 --> 00:24:41,690
so you can imagine this is generating

00:24:39,830 --> 00:24:43,639
those WebSocket calls which are then

00:24:41,690 --> 00:24:44,690
being translated into messages on the

00:24:43,639 --> 00:24:47,059
queue which are hitting the printer

00:24:44,690 --> 00:24:49,279
coming back and telling us where the

00:24:47,059 --> 00:24:51,830
position is turning the motors on and

00:24:49,279 --> 00:24:53,870
off for maintenance for example I know

00:24:51,830 --> 00:24:55,309
this is temperature control pop up the

00:24:53,870 --> 00:24:56,659
target temperatures and you'll see I do

00:24:55,309 --> 00:24:58,700
it too quickly but you can see the

00:24:56,659 --> 00:25:01,279
actual temperature jumps up a bit as I

00:24:58,700 --> 00:25:02,419
increase it and drops again here we're

00:25:01,279 --> 00:25:07,340
going to extrude a little bit of

00:25:02,419 --> 00:25:10,039
filament you can see just there we go

00:25:07,340 --> 00:25:11,629
that's the Mountain filament that's what

00:25:10,039 --> 00:25:14,240
happens if you don't level your bed

00:25:11,629 --> 00:25:15,350
properly and you come back after a few

00:25:14,240 --> 00:25:18,320
hours and you've got a big pile of

00:25:15,350 --> 00:25:20,559
spaghetti you haven't printed anyone

00:25:18,320 --> 00:25:22,909
who's done any 3d printing is done that

00:25:20,559 --> 00:25:25,159
and so this is where we sort of control

00:25:22,909 --> 00:25:26,990
the printing itself you can also access

00:25:25,159 --> 00:25:29,899
a few of the heating functions from

00:25:26,990 --> 00:25:31,519
there but a JavaScript magic and then

00:25:29,899 --> 00:25:32,990
all that G code files were uploaded this

00:25:31,519 --> 00:25:34,460
really nice interface we can click

00:25:32,990 --> 00:25:36,500
through find the one we want

00:25:34,460 --> 00:25:37,759
I don't demo it here but the button up

00:25:36,500 --> 00:25:39,919
at the top there is just a standard

00:25:37,759 --> 00:25:42,799
upload click and it'll let you upload a

00:25:39,919 --> 00:25:47,059
file and that stuff body Knology code is

00:25:42,799 --> 00:25:48,440
one of these we press print oops and now

00:25:47,059 --> 00:25:51,169
we're going to dump all that G code over

00:25:48,440 --> 00:25:54,500
to the print process well get rid of

00:25:51,169 --> 00:25:56,510
that don't you film it homes the printer

00:25:54,500 --> 00:25:57,889
so it knows where it is and it's going

00:25:56,510 --> 00:25:59,650
to wait a sec to make sure everything's

00:25:57,889 --> 00:26:07,550
at the right temper

00:25:59,650 --> 00:26:19,940
and then start printing that's open to

00:26:07,550 --> 00:26:22,370
you so I'll just briefly touch on the

00:26:19,940 --> 00:26:23,780
development of open GB it's a fairly

00:26:22,370 --> 00:26:25,760
young project you'd like to add a lot

00:26:23,780 --> 00:26:28,220
more features support for some of the

00:26:25,760 --> 00:26:29,570
printers that aren't supported and also

00:26:28,220 --> 00:26:31,370
make it extensible I'd love to have a

00:26:29,570 --> 00:26:32,990
plug-in system of some sorts of people

00:26:31,370 --> 00:26:35,960
could add bits without having to

00:26:32,990 --> 00:26:37,400
contribute to the core codebase just for

00:26:35,960 --> 00:26:39,050
things to be a bit more modular so if

00:26:37,400 --> 00:26:41,210
you like 3d printing you like Python

00:26:39,050 --> 00:26:42,170
have a go at Open GB and I'd love to

00:26:41,210 --> 00:26:43,460
hear from you if you want to contribute

00:26:42,170 --> 00:26:46,700
stuff will be great there more people

00:26:43,460 --> 00:26:49,160
working on it and other applications the

00:26:46,700 --> 00:26:51,050
Internet of Things track after all you

00:26:49,160 --> 00:26:55,340
probably realize this tornado WebSocket

00:26:51,050 --> 00:26:57,080
just an RPC pattern paradigm is almost I

00:26:55,340 --> 00:26:58,460
wouldn't bother going with anything else

00:26:57,080 --> 00:27:00,470
for this sort of application it just

00:26:58,460 --> 00:27:02,360
works so nicely it gets out of your way

00:27:00,470 --> 00:27:03,500
it takes care of so much stuff they'd

00:27:02,360 --> 00:27:05,690
let you get on with building what you

00:27:03,500 --> 00:27:07,910
want to build and it's sort of self

00:27:05,690 --> 00:27:10,040
documenting as well so yeah that's

00:27:07,910 --> 00:27:12,500
certainly one thing you might want to

00:27:10,040 --> 00:27:14,810
consider the other thing I'd say to take

00:27:12,500 --> 00:27:16,550
from this is the concept of creating an

00:27:14,810 --> 00:27:18,560
interface around your hardware if you're

00:27:16,550 --> 00:27:20,810
dealing with a hardware class rather

00:27:18,560 --> 00:27:23,480
than a specific piece of hardware like

00:27:20,810 --> 00:27:25,190
I'm with printers try building an ear

00:27:23,480 --> 00:27:26,600
face try to make it extensible down the

00:27:25,190 --> 00:27:27,650
track if you want to add support for

00:27:26,600 --> 00:27:30,320
different hardware with different

00:27:27,650 --> 00:27:38,870
idiosyncrasies that's a quite nice way

00:27:30,320 --> 00:27:43,450
to build got a few minutes for a couple

00:27:38,870 --> 00:27:43,450
of questions buddy wants the microphone

00:27:43,660 --> 00:27:53,840
if you want to if you want to just tell

00:27:46,550 --> 00:27:55,640
me I'll repeat the questions go to my

00:27:53,840 --> 00:27:58,240
blog pythonic staff and there's a bit

00:27:55,640 --> 00:27:58,240
about economics

00:27:59,190 --> 00:28:04,380
if PLA because abs is a bastard to work

00:28:02,910 --> 00:28:05,760
with yeah especially if you've got a

00:28:04,380 --> 00:28:08,250
printer like mine it doesn't have an

00:28:05,760 --> 00:28:11,790
enclosure this for the benefit of

00:28:08,250 --> 00:28:14,040
everyone else PLA is PLA and abs are two

00:28:11,790 --> 00:28:16,110
types of plastic you can print with PLA

00:28:14,040 --> 00:28:17,970
is based on corn I think or something

00:28:16,110 --> 00:28:21,960
it's an organic line abs is what Lego

00:28:17,970 --> 00:28:25,350
bricks are made off PLA is easier to

00:28:21,960 --> 00:28:27,540
work with it has lower melting points it

00:28:25,350 --> 00:28:30,120
doesn't shrink and warp as a change temp

00:28:27,540 --> 00:28:32,340
changes temperature the way abs does so

00:28:30,120 --> 00:28:34,110
there's usually no reason not to use it

00:28:32,340 --> 00:28:36,300
the only reason I think people use abs

00:28:34,110 --> 00:28:38,520
is if you're sticking something made of

00:28:36,300 --> 00:28:42,750
ABS outside in the really hot Sun well

00:28:38,520 --> 00:28:43,950
sorry PLA it can melt a bit maybe you

00:28:42,750 --> 00:28:45,510
know when yep like the old toy train

00:28:43,950 --> 00:28:47,670
left in the car and the kid cries I

00:28:45,510 --> 00:28:50,640
think that happens with PLA plastic so

00:28:47,670 --> 00:28:52,530
um yeah abs and you get nicer finishes

00:28:50,640 --> 00:28:56,000
in a BST you can do things like hit it

00:28:52,530 --> 00:28:58,230
with what's the stuff in nail polish

00:28:56,000 --> 00:29:00,030
acetate thank you you can do like a

00:28:58,230 --> 00:29:02,100
acetone vapor bath and get a really

00:29:00,030 --> 00:29:04,050
smooth surface and that say it's horses

00:29:02,100 --> 00:29:13,160
for courses but short answer I prefer

00:29:04,050 --> 00:29:13,160
PLA because life's too short order them

00:29:18,770 --> 00:29:23,820
I'll quickly have to pack together a a

00:29:21,870 --> 00:29:26,810
webstore and post the link to the

00:29:23,820 --> 00:29:30,060
Twitter paper now you can print your own

00:29:26,810 --> 00:29:32,190
yeah find someone who's go 3d printer go

00:29:30,060 --> 00:29:34,050
talk to you makerspace it's a fairly

00:29:32,190 --> 00:29:37,080
simple print though it doesn't look it

00:29:34,050 --> 00:29:38,850
but yeah check out basically check out

00:29:37,080 --> 00:29:41,760
that link Jim - net pythonic stuff for

00:29:38,850 --> 00:29:43,290
more info again a shout to Ben from your

00:29:41,760 --> 00:29:45,240
recommenders oh and I just thought this

00:29:43,290 --> 00:29:47,220
up and drew a sketch and he made that

00:29:45,240 --> 00:29:49,910
happen and I just pressed print so this

00:29:47,220 --> 00:29:53,060
is all him beautiful job

00:29:49,910 --> 00:29:53,060
anyone else

00:29:58,100 --> 00:30:02,130
yeah

00:29:59,730 --> 00:30:04,740
at the moment you have to manually

00:30:02,130 --> 00:30:06,570
adjust and the way that works is you

00:30:04,740 --> 00:30:09,300
were just in the front end and it'll

00:30:06,570 --> 00:30:11,070
store that locally using the JavaScript

00:30:09,300 --> 00:30:13,470
key magic it's kind of weird

00:30:11,070 --> 00:30:15,270
open gb because you have all these weird

00:30:13,470 --> 00:30:16,500
places where state lives some it lives

00:30:15,270 --> 00:30:18,690
in the printer some it lives in the

00:30:16,500 --> 00:30:20,610
service and that lives on the client so

00:30:18,690 --> 00:30:21,930
at the moment the best way we found is

00:30:20,610 --> 00:30:23,910
to store that in a client so you can say

00:30:21,930 --> 00:30:27,120
I want to hit my PLA preset and I know

00:30:23,910 --> 00:30:28,650
that's 180 degrees potentially down the

00:30:27,120 --> 00:30:30,000
truck it would be nice to have a whole

00:30:28,650 --> 00:30:34,490
bunch of presets angle this is this

00:30:30,000 --> 00:30:34,490
brand of PLA that Brenda PLA for example

00:30:35,240 --> 00:30:39,570
got any more requests to your firm if

00:30:38,130 --> 00:30:41,670
anyone wants to talk more about it I'm

00:30:39,570 --> 00:30:43,740
obviously around here the next few days

00:30:41,670 --> 00:30:46,440
and and yeah love to talk 3d printing

00:30:43,740 --> 00:30:49,730
other contributors etc thank you the

00:30:46,440 --> 00:30:49,730

YouTube URL: https://www.youtube.com/watch?v=qgvnPB_77z8


