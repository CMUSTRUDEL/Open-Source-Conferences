Title: Of Django, PostgreSQL schemas, and your multi-million dollar idea
Publication date: 2020-09-08
Playlist: PyConline AU 2020
Description: 
	Lorenzo PeÃ±a

https://2020.pycon.org.au/program/CRSJXF

Although rough for the world, 2020 is proving a good year (and decade start) for Django. Boring batteries-included frameworks and established monolith makers are shining again, in a world where the hype-enchantment of JavaScript and micro-everything is starting to wear off and fall into a more mature position of tradeoffs. After 15 years of life, Django continues to prove solid, battle tested, and very capable of major undertakings in the web arena.

Over the last decade, the competence of the framework has extended to the SaaS world, through a number of packages that have emerged as viable options for making Django multi-tenant. PostgreSQL concept of _schemas_ has opened a new exploration space for multi-tenancy, by combining the power of RDBMS native isolation with the reduced costs of managing a single database.

However, nothing comes for free. The ease of using PostgreSQL schemas for multi-tenancy in Django comes at the expense of some challenges that must be overcome in the short, medium, and long term, if the project seeks to survive while gracefully escaling to success.

In this talk we will cover the major challenges of doing multi-tenancy in Django through PostgreSQL schemas. You will learn the pros and cons of the approach as you move from tutorial-grade projects to massive multi-tenant behemoths. By the end, you will be able to answer whether or not this is going to be a feasible approach for your next multi-million dollar idea.

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

Python, PyCon, PyConAU, PyConline

Fri Sep  4 17:45:00 2020 at Python 2
Captions: 
	00:00:04,480 --> 00:00:07,440
hello

00:00:05,279 --> 00:00:09,599
thank you for joining me today i'm quite

00:00:07,440 --> 00:00:11,920
thrilled of being part of this online

00:00:09,599 --> 00:00:13,519
very online extremely online edition of

00:00:11,920 --> 00:00:16,240
pycon au

00:00:13,519 --> 00:00:19,359
2020 and i hope you're just having a

00:00:16,240 --> 00:00:20,880
great conference so far

00:00:19,359 --> 00:00:22,560
what's wrong with my multi-tenancy

00:00:20,880 --> 00:00:23,760
approach this is the title of this

00:00:22,560 --> 00:00:26,240
reddit post

00:00:23,760 --> 00:00:27,920
i found not so long ago of a person who

00:00:26,240 --> 00:00:28,320
is trying to create a multi-million

00:00:27,920 --> 00:00:30,560
dollar

00:00:28,320 --> 00:00:32,559
app in django by means of adding

00:00:30,560 --> 00:00:34,079
multi-tenancy to a previously existing

00:00:32,559 --> 00:00:36,559
single tenant

00:00:34,079 --> 00:00:37,360
project i felt quite identified with

00:00:36,559 --> 00:00:40,480
this post

00:00:37,360 --> 00:00:41,840
as i myself was in the same position a

00:00:40,480 --> 00:00:44,160
couple of years before

00:00:41,840 --> 00:00:45,280
and it is truth that is not just this

00:00:44,160 --> 00:00:48,079
predator and me

00:00:45,280 --> 00:00:49,680
sometimes those in the ocean trying to

00:00:48,079 --> 00:00:51,039
understand what is wrong with the

00:00:49,680 --> 00:00:53,600
approach they have taken

00:00:51,039 --> 00:00:54,559
or are about to take when it comes to

00:00:53,600 --> 00:00:57,039
multi-tenancy

00:00:54,559 --> 00:00:58,000
in python as for me well i drowned for a

00:00:57,039 --> 00:01:00,480
little bit and

00:00:58,000 --> 00:01:01,199
eventually learned how to swim in this

00:01:00,480 --> 00:01:03,359
new ocean

00:01:01,199 --> 00:01:05,280
but the fact is that now i have some

00:01:03,359 --> 00:01:07,119
answers to my own questions

00:01:05,280 --> 00:01:08,799
and i am in a much better position to

00:01:07,119 --> 00:01:12,080
answer myself what is wrong

00:01:08,799 --> 00:01:14,159
with my multi-tenancy approach just in

00:01:12,080 --> 00:01:15,680
case you are in the same boat of this

00:01:14,159 --> 00:01:17,280
gentleman and myself

00:01:15,680 --> 00:01:19,040
and you know the feeling of waking up

00:01:17,280 --> 00:01:20,080
one day with a multi-million dollar idea

00:01:19,040 --> 00:01:22,159
in your head for a

00:01:20,080 --> 00:01:24,799
tennessee project in django and you are

00:01:22,159 --> 00:01:28,000
either considering whether to

00:01:24,799 --> 00:01:30,000
use postgres or not or already

00:01:28,000 --> 00:01:31,840
decided that to use positive schemas

00:01:30,000 --> 00:01:34,960
then this talk is definitely

00:01:31,840 --> 00:01:36,320
for you my name is lorenzo pena i live

00:01:34,960 --> 00:01:39,119
in the other side of the world

00:01:36,320 --> 00:01:40,479
in cuba i have been a django developer

00:01:39,119 --> 00:01:43,840
for over a decade

00:01:40,479 --> 00:01:45,840
and as of late i disacquired taste of

00:01:43,840 --> 00:01:47,680
being chaser of multi-tenancy beasts

00:01:45,840 --> 00:01:49,520
as you can see in my picture to the

00:01:47,680 --> 00:01:51,439
right the fact that you are attending

00:01:49,520 --> 00:01:53,439
this talk makes perfectly clear

00:01:51,439 --> 00:01:54,720
do as well as i believe that django is

00:01:53,439 --> 00:01:56,719
more than capable

00:01:54,720 --> 00:01:58,320
of lifting all the challenges that the

00:01:56,719 --> 00:02:00,960
upcoming decade can bring

00:01:58,320 --> 00:02:01,520
especially uh any golden ideas for the

00:02:00,960 --> 00:02:04,159
future

00:02:01,520 --> 00:02:05,759
so without any further ado let's take a

00:02:04,159 --> 00:02:08,080
quick trip from multi-tenancy to

00:02:05,759 --> 00:02:10,319
postgres schemas and django

00:02:08,080 --> 00:02:12,239
okay what is multi-tenancy let's do it

00:02:10,319 --> 00:02:14,400
through an example suppose customer red

00:02:12,239 --> 00:02:16,319
has a problem and you develop a solution

00:02:14,400 --> 00:02:18,319
and the solution is working great but

00:02:16,319 --> 00:02:20,000
now customers blue green and yellow have

00:02:18,319 --> 00:02:22,080
exactly the same problem

00:02:20,000 --> 00:02:23,599
what to do well given the fact that you

00:02:22,080 --> 00:02:24,560
have a problem already solved for

00:02:23,599 --> 00:02:26,160
customer read

00:02:24,560 --> 00:02:28,160
you could either copy and paste that

00:02:26,160 --> 00:02:28,959
solution into multiple single tenant

00:02:28,160 --> 00:02:30,800
solutions

00:02:28,959 --> 00:02:32,879
or you could make the jump into

00:02:30,800 --> 00:02:33,760
multi-tenancy and actually adjust your

00:02:32,879 --> 00:02:35,680
code so that

00:02:33,760 --> 00:02:38,160
it is capable single instance of the

00:02:35,680 --> 00:02:39,680
code to serve the needs of all your

00:02:38,160 --> 00:02:41,040
customers that is exactly what

00:02:39,680 --> 00:02:44,640
multi-tenancy is

00:02:41,040 --> 00:02:46,959
and i'm sure you probably familiar with

00:02:44,640 --> 00:02:48,720
this very popular businesses that

00:02:46,959 --> 00:02:51,760
implement the multi-tenancy model

00:02:48,720 --> 00:02:53,920
along with what would be a tenant in

00:02:51,760 --> 00:02:56,879
their own world view let me just mention

00:02:53,920 --> 00:02:58,480
slack workspaces and discord servers

00:02:56,879 --> 00:03:00,720
because i'll be using those

00:02:58,480 --> 00:03:02,080
later on now when implementing

00:03:00,720 --> 00:03:03,760
multi-tenancy one of the major

00:03:02,080 --> 00:03:05,920
architectural challenges you have to

00:03:03,760 --> 00:03:07,760
make is how to structure your data layer

00:03:05,920 --> 00:03:09,040
that is what database architecture to

00:03:07,760 --> 00:03:10,640
use

00:03:09,040 --> 00:03:13,200
there are typically three approaches the

00:03:10,640 --> 00:03:14,640
isolated shared and semi-isolated let me

00:03:13,200 --> 00:03:17,200
just mention the last two

00:03:14,640 --> 00:03:18,959
shared is kind of the default one is

00:03:17,200 --> 00:03:20,959
that in which you have a single database

00:03:18,959 --> 00:03:22,560
and your tables are scoped by tenant at

00:03:20,959 --> 00:03:24,799
the wrong level and then the semi

00:03:22,560 --> 00:03:26,080
isolated which is the core of this talk

00:03:24,799 --> 00:03:28,400
in which you still have a single

00:03:26,080 --> 00:03:31,440
database but you use postgres schemas

00:03:28,400 --> 00:03:32,480
to store your tenant data schemas have a

00:03:31,440 --> 00:03:34,879
specific

00:03:32,480 --> 00:03:36,720
concept within the postgres worldview

00:03:34,879 --> 00:03:37,440
they are layer between databases and

00:03:36,720 --> 00:03:40,000
tables

00:03:37,440 --> 00:03:42,080
they are equivalent to name spaces and

00:03:40,000 --> 00:03:44,400
in the face of ambiguity presence

00:03:42,080 --> 00:03:46,720
is set through the search path this

00:03:44,400 --> 00:03:48,720
means that if the search path is set to

00:03:46,720 --> 00:03:50,400
schema a schema b and public

00:03:48,720 --> 00:03:52,239
which happens to be the default schema

00:03:50,400 --> 00:03:54,319
every database comes with

00:03:52,239 --> 00:03:55,360
if there is an um there is a you're

00:03:54,319 --> 00:03:56,799
looking for a table

00:03:55,360 --> 00:03:59,599
it's going to be found in the first

00:03:56,799 --> 00:04:01,439
schema that actually has it

00:03:59,599 --> 00:04:03,840
now in the typical schema to 10 and

00:04:01,439 --> 00:04:05,120
configuration every tenant usually gets

00:04:03,840 --> 00:04:08,239
its own schema but

00:04:05,120 --> 00:04:10,319
also it's typical to use a shared schema

00:04:08,239 --> 00:04:11,439
to store data that is relevant to all

00:04:10,319 --> 00:04:13,599
models

00:04:11,439 --> 00:04:15,040
now in django you don't have to do all

00:04:13,599 --> 00:04:16,239
this from scratch because there is a

00:04:15,040 --> 00:04:19,199
number of established

00:04:16,239 --> 00:04:20,639
packages that help you scaffold your

00:04:19,199 --> 00:04:22,320
project and you can use django 10

00:04:20,639 --> 00:04:23,120
schemas which is actually the pioneer

00:04:22,320 --> 00:04:24,960
package

00:04:23,120 --> 00:04:26,479
and there is also django tenants with a

00:04:24,960 --> 00:04:28,320
number of improvements over

00:04:26,479 --> 00:04:29,600
the previous one i also have my own

00:04:28,320 --> 00:04:31,040
experimental package which i've been

00:04:29,600 --> 00:04:32,479
calling django which schemas and i'm

00:04:31,040 --> 00:04:35,040
doing some experiments

00:04:32,479 --> 00:04:36,960
there now the three cornerstones of

00:04:35,040 --> 00:04:38,800
these packages is number one

00:04:36,960 --> 00:04:41,199
they'll define a custom database backend

00:04:38,800 --> 00:04:42,560
in order to set the search path so that

00:04:41,199 --> 00:04:44,880
all subsequent queries

00:04:42,560 --> 00:04:46,639
can be done in the right schema they

00:04:44,880 --> 00:04:48,320
also have a custom migrate command in

00:04:46,639 --> 00:04:49,680
order to operate with schemas because

00:04:48,320 --> 00:04:50,720
django by default doesn't know what

00:04:49,680 --> 00:04:52,320
schemas are

00:04:50,720 --> 00:04:54,320
and third they have a custom database

00:04:52,320 --> 00:04:56,240
router with the yellow migrate hook

00:04:54,320 --> 00:04:57,520
so that by working in tandem with the

00:04:56,240 --> 00:04:59,600
migrate command

00:04:57,520 --> 00:05:01,280
the right models are getting placed in

00:04:59,600 --> 00:05:02,880
the right schemas

00:05:01,280 --> 00:05:04,639
now that we've made this super quick

00:05:02,880 --> 00:05:06,160
theoretical introduction let me ask you

00:05:04,639 --> 00:05:08,479
something very important why

00:05:06,160 --> 00:05:10,240
would you pick schemas for your

00:05:08,479 --> 00:05:12,240
multi-tenancy project and there is a

00:05:10,240 --> 00:05:14,800
number of valid reasons each one

00:05:12,240 --> 00:05:16,320
varying in their degree of validity it

00:05:14,800 --> 00:05:18,160
could be a case that you didn't know

00:05:16,320 --> 00:05:18,639
there were other options now you know

00:05:18,160 --> 00:05:21,840
that there

00:05:18,639 --> 00:05:23,520
are probably the sense of security that

00:05:21,840 --> 00:05:25,120
brings the fact that your data is going

00:05:23,520 --> 00:05:26,240
to be isolated at the database

00:05:25,120 --> 00:05:28,479
management system level

00:05:26,240 --> 00:05:30,160
is kind of compiling for you or perhaps

00:05:28,479 --> 00:05:32,400
you were running away from the burden

00:05:30,160 --> 00:05:34,720
that scoping all your queries would

00:05:32,400 --> 00:05:36,160
imply in a shared database approach

00:05:34,720 --> 00:05:38,080
or maybe you wanted to do some

00:05:36,160 --> 00:05:40,000
customization at the schema level

00:05:38,080 --> 00:05:41,280
or have an easier backup restore flow of

00:05:40,000 --> 00:05:43,360
tenants or

00:05:41,280 --> 00:05:44,960
let's be honest perhaps schemas were the

00:05:43,360 --> 00:05:45,600
hype technology by the time you were

00:05:44,960 --> 00:05:48,639
embarking

00:05:45,600 --> 00:05:49,919
in this journey truth is that this rose

00:05:48,639 --> 00:05:52,080
has some thorns

00:05:49,919 --> 00:05:54,560
and unless you are quite aware of the

00:05:52,080 --> 00:05:55,440
thorns as well as all the benefits that

00:05:54,560 --> 00:05:57,440
it may have

00:05:55,440 --> 00:05:58,800
you are not making a fully informed

00:05:57,440 --> 00:06:01,440
decision so

00:05:58,800 --> 00:06:03,360
in this talk i'm going to cover a little

00:06:01,440 --> 00:06:04,720
bit some of the most important thoughts

00:06:03,360 --> 00:06:06,880
i wish i had known

00:06:04,720 --> 00:06:08,319
before embarking with multi-tenancy

00:06:06,880 --> 00:06:09,680
through postgres schemas

00:06:08,319 --> 00:06:11,280
that is what is wrong with the

00:06:09,680 --> 00:06:11,600
multi-tenancy approach and let's going

00:06:11,280 --> 00:06:15,120
to

00:06:11,600 --> 00:06:17,520
answer this by covering the short middle

00:06:15,120 --> 00:06:20,479
and long-term challenges of the approach

00:06:17,520 --> 00:06:21,759
itself so let's begin by untangling the

00:06:20,479 --> 00:06:23,919
schemas and

00:06:21,759 --> 00:06:25,360
the relationship between tenants schemas

00:06:23,919 --> 00:06:27,199
and modules

00:06:25,360 --> 00:06:28,960
this is a question very interesting to

00:06:27,199 --> 00:06:30,000
ask what is the python representation of

00:06:28,960 --> 00:06:32,080
a tenant well

00:06:30,000 --> 00:06:34,240
as an abstract concept you can think of

00:06:32,080 --> 00:06:37,360
a tenant as a plain old python object

00:06:34,240 --> 00:06:38,720
with with a schema name there is a

00:06:37,360 --> 00:06:39,440
schema that is going to be associated

00:06:38,720 --> 00:06:41,840
with the tenant

00:06:39,440 --> 00:06:43,360
as soon as you make the jump into models

00:06:41,840 --> 00:06:45,360
it's practically the same

00:06:43,360 --> 00:06:46,960
except that you have to ensure

00:06:45,360 --> 00:06:50,000
uniqueness

00:06:46,960 --> 00:06:52,560
of the schema name across all tenants

00:06:50,000 --> 00:06:54,319
now this means that all tenants are

00:06:52,560 --> 00:06:56,400
going to have an associated schema but

00:06:54,319 --> 00:06:58,560
the opposite is not going to hold true

00:06:56,400 --> 00:07:00,400
why because we're going to have one

00:06:58,560 --> 00:07:01,440
private schema per tenant but we are

00:07:00,400 --> 00:07:04,080
also

00:07:01,440 --> 00:07:05,680
typically having a shared schema to

00:07:04,080 --> 00:07:08,000
store data that is relevant to

00:07:05,680 --> 00:07:09,680
all tenants at once so in this case the

00:07:08,000 --> 00:07:11,680
shared schema is not going to have any

00:07:09,680 --> 00:07:12,560
specific tenant associated and this

00:07:11,680 --> 00:07:16,080
distinction

00:07:12,560 --> 00:07:19,440
is quite important to understand

00:07:16,080 --> 00:07:21,360
in your regular django project you must

00:07:19,440 --> 00:07:23,520
place all your applications inside the

00:07:21,360 --> 00:07:25,199
installed apps list in your settings

00:07:23,520 --> 00:07:27,759
now as soon as you start using one of

00:07:25,199 --> 00:07:30,560
these previous packages you are forced

00:07:27,759 --> 00:07:31,280
to split your apps between shared apps

00:07:30,560 --> 00:07:33,360
and tenant

00:07:31,280 --> 00:07:35,039
apps whatever you put in your shared

00:07:33,360 --> 00:07:37,680
apps is going to get migrated

00:07:35,039 --> 00:07:38,080
in the shared schema whereas whatever

00:07:37,680 --> 00:07:39,759
you

00:07:38,080 --> 00:07:41,520
put in your tenant apps is going to get

00:07:39,759 --> 00:07:43,199
migrated in each one of your private

00:07:41,520 --> 00:07:44,240
schemas corresponding to each one of

00:07:43,199 --> 00:07:46,479
your tenants

00:07:44,240 --> 00:07:47,919
now why do we operate here at the

00:07:46,479 --> 00:07:50,000
application level and not

00:07:47,919 --> 00:07:51,440
at the model level in order to gain a

00:07:50,000 --> 00:07:54,879
higher granularity

00:07:51,440 --> 00:07:56,560
well the migrate command itself operates

00:07:54,879 --> 00:07:59,680
at the application level so it only

00:07:56,560 --> 00:08:01,360
makes sense to speak the same language

00:07:59,680 --> 00:08:03,840
now let me give you some examples of

00:08:01,360 --> 00:08:05,840
things that could end up being placed

00:08:03,840 --> 00:08:08,080
in each one of the different types of

00:08:05,840 --> 00:08:10,639
schemas in your private schema

00:08:08,080 --> 00:08:11,360
there you're going to be placing most of

00:08:10,639 --> 00:08:13,360
your models

00:08:11,360 --> 00:08:14,639
most of your core applications all your

00:08:13,360 --> 00:08:17,919
10 specific models

00:08:14,639 --> 00:08:19,599
and you can also place some customizable

00:08:17,919 --> 00:08:20,960
catalogs that you can't afford to place

00:08:19,599 --> 00:08:22,160
in the shared schema because tenants

00:08:20,960 --> 00:08:25,039
needs to

00:08:22,160 --> 00:08:25,520
customize them now in the shirt schema

00:08:25,039 --> 00:08:28,000
you

00:08:25,520 --> 00:08:29,840
usually place the tenant catalog itself

00:08:28,000 --> 00:08:31,680
as well as other read-only

00:08:29,840 --> 00:08:33,039
catalogs for all the tenants or

00:08:31,680 --> 00:08:35,919
system-wide data

00:08:33,039 --> 00:08:38,240
or maybe some cache aggregations of data

00:08:35,919 --> 00:08:41,279
you recollect from all your tenants or

00:08:38,240 --> 00:08:42,479
high-volume rights that is information

00:08:41,279 --> 00:08:44,800
or data that is

00:08:42,479 --> 00:08:45,839
prone to be eventually extracted from

00:08:44,800 --> 00:08:48,560
the data layer

00:08:45,839 --> 00:08:51,200
itself it is also possible to have

00:08:48,560 --> 00:08:52,959
models duplicated and therefore hidden

00:08:51,200 --> 00:08:54,399
uh between private schemas and shared

00:08:52,959 --> 00:08:56,640
schemas and this is the case of the

00:08:54,399 --> 00:08:58,560
django migration table itself

00:08:56,640 --> 00:09:00,560
or content types with some known side

00:08:58,560 --> 00:09:01,440
effects or other metamodes this is no

00:09:00,560 --> 00:09:03,440
problem at all

00:09:01,440 --> 00:09:04,720
because the search path makes it makes

00:09:03,440 --> 00:09:07,519
it so

00:09:04,720 --> 00:09:08,000
so that each one of the tables can be

00:09:07,519 --> 00:09:09,519
completely

00:09:08,000 --> 00:09:11,040
found depending on the scope you are

00:09:09,519 --> 00:09:13,200
operating

00:09:11,040 --> 00:09:14,880
now one interesting particular use case

00:09:13,200 --> 00:09:16,959
of placing applications into different

00:09:14,880 --> 00:09:18,880
schema levels is where to put users

00:09:16,959 --> 00:09:20,880
and here comes another very important

00:09:18,880 --> 00:09:23,440
architectural decision you have to make

00:09:20,880 --> 00:09:24,320
because on one hand you could have users

00:09:23,440 --> 00:09:26,240
that are bound

00:09:24,320 --> 00:09:27,360
and constrained within the context of a

00:09:26,240 --> 00:09:29,120
tenant and

00:09:27,360 --> 00:09:31,360
on the other hand you could have free

00:09:29,120 --> 00:09:33,519
users that could be associated to

00:09:31,360 --> 00:09:36,240
multiple tenants at the same time so the

00:09:33,519 --> 00:09:38,399
former is the typical case of slack

00:09:36,240 --> 00:09:40,560
where you cannot even log in before

00:09:38,399 --> 00:09:42,480
specifying a workspace first

00:09:40,560 --> 00:09:44,000
and the latter is the case of this

00:09:42,480 --> 00:09:45,760
course where it's perfectly okay to

00:09:44,000 --> 00:09:48,160
exist as a user even if you're not

00:09:45,760 --> 00:09:50,160
associated with any specific server or

00:09:48,160 --> 00:09:52,720
even if you have multiple servers that

00:09:50,160 --> 00:09:55,600
you are associated with

00:09:52,720 --> 00:09:56,800
if you're going to have users spam users

00:09:55,600 --> 00:09:58,080
the slack style

00:09:56,800 --> 00:10:00,320
well you have to place them in your

00:09:58,080 --> 00:10:02,560
private schema and you have to know that

00:10:00,320 --> 00:10:04,079
you will require an active tenant to be

00:10:02,560 --> 00:10:06,399
previously set before before

00:10:04,079 --> 00:10:08,880
even being able to query your users and

00:10:06,399 --> 00:10:11,120
of course don't forget to use face masks

00:10:08,880 --> 00:10:12,320
and if you're going to have free users

00:10:11,120 --> 00:10:14,480
that discord style

00:10:12,320 --> 00:10:16,160
well you place them in the shared schema

00:10:14,480 --> 00:10:16,640
and remember that in this case you will

00:10:16,160 --> 00:10:19,600
require

00:10:16,640 --> 00:10:22,880
database binding in order to know which

00:10:19,600 --> 00:10:24,720
tenants these users are associated with

00:10:22,880 --> 00:10:26,800
now there is an interesting side effect

00:10:24,720 --> 00:10:29,279
on these database sessions

00:10:26,800 --> 00:10:31,040
if you misplace your database backed

00:10:29,279 --> 00:10:32,480
sessions in relationship to your users

00:10:31,040 --> 00:10:33,440
this would be a source of leaking

00:10:32,480 --> 00:10:37,040
authentication

00:10:33,440 --> 00:10:39,120
so the advice is to uh that sessions

00:10:37,040 --> 00:10:41,200
must be equally strict or even stricter

00:10:39,120 --> 00:10:42,959
than users themselves

00:10:41,200 --> 00:10:44,880
and the general advice is to actually

00:10:42,959 --> 00:10:45,200
keep them together with users to not

00:10:44,880 --> 00:10:48,240
have

00:10:45,200 --> 00:10:50,560
any worry at all

00:10:48,240 --> 00:10:51,279
when you are playing with schemas and

00:10:50,560 --> 00:10:53,120
applications

00:10:51,279 --> 00:10:54,800
in the early stages of your project it's

00:10:53,120 --> 00:10:56,160
perfectly okay to make a mistake and

00:10:54,800 --> 00:10:57,680
misplayed something so

00:10:56,160 --> 00:10:59,360
what to do if this is the case but let

00:10:57,680 --> 00:11:00,560
me tell you that since we we're using

00:10:59,360 --> 00:11:03,440
the yellow migrate

00:11:00,560 --> 00:11:05,440
hook of database router all your

00:11:03,440 --> 00:11:07,440
migrations are still being recorded as

00:11:05,440 --> 00:11:08,800
being applied on every single schema if

00:11:07,440 --> 00:11:10,880
you think if you take a look

00:11:08,800 --> 00:11:12,480
at the django migrations table of all

00:11:10,880 --> 00:11:14,320
your schemas you will you will see that

00:11:12,480 --> 00:11:15,760
all migrations are there even if the

00:11:14,320 --> 00:11:17,680
models are not

00:11:15,760 --> 00:11:18,959
so the only way to fix this is to

00:11:17,680 --> 00:11:20,880
actually unapply

00:11:18,959 --> 00:11:22,079
and therefore reapply migrations

00:11:20,880 --> 00:11:24,000
differently

00:11:22,079 --> 00:11:25,680
the general strategy is to unapply

00:11:24,000 --> 00:11:27,279
migrations of the app first

00:11:25,680 --> 00:11:28,800
then you change the app to schema

00:11:27,279 --> 00:11:30,399
configuration that you did run in the

00:11:28,800 --> 00:11:31,519
first place and then you can reapply

00:11:30,399 --> 00:11:34,800
migrations

00:11:31,519 --> 00:11:37,360
again now try to avoid

00:11:34,800 --> 00:11:38,399
having sensible data before you actually

00:11:37,360 --> 00:11:40,880
stabilize

00:11:38,399 --> 00:11:42,800
your database and your app to schema

00:11:40,880 --> 00:11:44,320
layout because when you have data that

00:11:42,800 --> 00:11:47,360
you cannot afford to lose

00:11:44,320 --> 00:11:48,800
this becomes a little trickier as soon

00:11:47,360 --> 00:11:51,040
as you have learned

00:11:48,800 --> 00:11:52,880
how to untangle the schemas in your head

00:11:51,040 --> 00:11:55,279
and in your project settings then

00:11:52,880 --> 00:11:57,279
your own project is ready to take off

00:11:55,279 --> 00:11:59,440
even if not so gratefully and

00:11:57,279 --> 00:12:01,360
now the plot thickens and you are

00:11:59,440 --> 00:12:02,320
welcome to the middle term challenges

00:12:01,360 --> 00:12:05,040
which get uh

00:12:02,320 --> 00:12:05,519
quite interesting the first or one of

00:12:05,040 --> 00:12:06,880
the

00:12:05,519 --> 00:12:09,200
first things you're going to notice

00:12:06,880 --> 00:12:11,040
notice is that as you incorporate new

00:12:09,200 --> 00:12:13,600
tenants yeah you will see that your

00:12:11,040 --> 00:12:15,440
tenant creation process is rather slow

00:12:13,600 --> 00:12:17,200
and why is that well because schema

00:12:15,440 --> 00:12:17,920
creation implies running all migrations

00:12:17,200 --> 00:12:19,760
from zero

00:12:17,920 --> 00:12:21,680
in your newly created schemas and you

00:12:19,760 --> 00:12:23,920
know that your migration story of your

00:12:21,680 --> 00:12:25,279
project is not necessarily optimal every

00:12:23,920 --> 00:12:26,079
single time so this is going to take

00:12:25,279 --> 00:12:27,680
some time

00:12:26,079 --> 00:12:29,600
not just that if you have additional

00:12:27,680 --> 00:12:30,240
data that you need to initialize in your

00:12:29,600 --> 00:12:32,959
schema

00:12:30,240 --> 00:12:33,839
this could also incorporate time to the

00:12:32,959 --> 00:12:37,200
mixed

00:12:33,839 --> 00:12:39,440
so the packages uh offer you this

00:12:37,200 --> 00:12:40,880
other way of creating new tenants which

00:12:39,440 --> 00:12:41,600
is actually provisioning a special

00:12:40,880 --> 00:12:43,680
schema

00:12:41,600 --> 00:12:45,920
that you can clone instead of creating a

00:12:43,680 --> 00:12:47,680
new schema and running all migrations

00:12:45,920 --> 00:12:49,360
this is not the default option on the on

00:12:47,680 --> 00:12:50,959
the packages so just need to learn how

00:12:49,360 --> 00:12:51,519
to operate with this and keep the

00:12:50,959 --> 00:12:53,920
special

00:12:51,519 --> 00:12:55,839
schema up to date in structure and the

00:12:53,920 --> 00:12:57,839
initial data

00:12:55,839 --> 00:12:59,519
but you know what else is going to be

00:12:57,839 --> 00:13:02,000
slow

00:12:59,519 --> 00:13:02,720
migrations made yes and this is

00:13:02,000 --> 00:13:05,120
something

00:13:02,720 --> 00:13:06,959
that you don't get warned about when you

00:13:05,120 --> 00:13:09,040
use one of the packages and probably

00:13:06,959 --> 00:13:11,040
you don't even understand until it it

00:13:09,040 --> 00:13:12,880
bites you but the truth is that yes

00:13:11,040 --> 00:13:15,120
migrations are a slow process

00:13:12,880 --> 00:13:16,160
and the more tenants you have the slower

00:13:15,120 --> 00:13:17,760
they will become

00:13:16,160 --> 00:13:19,279
and the reason is that remember we are

00:13:17,760 --> 00:13:22,160
now using schemas so

00:13:19,279 --> 00:13:24,240
it's like having tiny databases inside a

00:13:22,160 --> 00:13:26,480
single database imagine when you reach

00:13:24,240 --> 00:13:28,160
hundreds of schemas or thousands of

00:13:26,480 --> 00:13:29,360
schemas this is going to be a time

00:13:28,160 --> 00:13:30,880
consuming process

00:13:29,360 --> 00:13:33,440
and of course there are some strategies

00:13:30,880 --> 00:13:35,279
to reduce the time

00:13:33,440 --> 00:13:37,120
but the fact is that no matter what

00:13:35,279 --> 00:13:38,880
strategy you use migrations are still

00:13:37,120 --> 00:13:42,000
going to be slower than if it were

00:13:38,880 --> 00:13:45,040
a single schema in a single database

00:13:42,000 --> 00:13:47,279
so in order to reach the send status of

00:13:45,040 --> 00:13:48,639
zero downtime deployments

00:13:47,279 --> 00:13:50,560
you're going to have to solve the

00:13:48,639 --> 00:13:52,000
problem by code imagine that at some

00:13:50,560 --> 00:13:54,720
point you're going to have a code

00:13:52,000 --> 00:13:56,399
updated and some of your schemas are

00:13:54,720 --> 00:13:57,839
going to be already migrated while

00:13:56,399 --> 00:14:00,079
others are going to be still pending

00:13:57,839 --> 00:14:02,000
migration so the only possible strategy

00:14:00,079 --> 00:14:04,160
is to make your code resilient for

00:14:02,000 --> 00:14:05,279
this case that is going to happen and

00:14:04,160 --> 00:14:06,880
the culture to have

00:14:05,279 --> 00:14:08,720
in your development team is to actually

00:14:06,880 --> 00:14:11,680
embrace multi-phase deployments

00:14:08,720 --> 00:14:13,440
always always make migrations reversible

00:14:11,680 --> 00:14:14,000
and to be prepared to reverse migrations

00:14:13,440 --> 00:14:16,160
because

00:14:14,000 --> 00:14:17,120
you are going to have uh to reverse

00:14:16,160 --> 00:14:18,959
migrations

00:14:17,120 --> 00:14:21,360
more times that you probably imagine

00:14:18,959 --> 00:14:22,480
right now so the general strategy for

00:14:21,360 --> 00:14:24,720
these multiphase uh

00:14:22,480 --> 00:14:26,800
deployments is to first change the code

00:14:24,720 --> 00:14:28,720
to handle both old and new database

00:14:26,800 --> 00:14:30,959
structures so that it doesn't explode

00:14:28,720 --> 00:14:32,639
then you can mutate your database and

00:14:30,959 --> 00:14:35,199
make sure all migrations run on

00:14:32,639 --> 00:14:36,959
all your schemas and only after that

00:14:35,199 --> 00:14:38,399
step has completed

00:14:36,959 --> 00:14:40,800
then you are free to remove all the

00:14:38,399 --> 00:14:42,880
safeguards and keep the code for the new

00:14:40,800 --> 00:14:45,120
database structure alone but

00:14:42,880 --> 00:14:47,199
this muscle takes working out so you

00:14:45,120 --> 00:14:47,920
better work out multi-phase deployment

00:14:47,199 --> 00:14:50,079
muzzle

00:14:47,920 --> 00:14:52,079
as much as you gotta be working out the

00:14:50,079 --> 00:14:55,199
friday deployment muscle

00:14:52,079 --> 00:14:57,199
yeah there are other middle middle

00:14:55,199 --> 00:14:59,199
term challenges that we don't have

00:14:57,199 --> 00:15:01,760
enough time to cover in depth

00:14:59,199 --> 00:15:04,160
but these are data for collection across

00:15:01,760 --> 00:15:05,440
tenants to fit your enterprise dashboard

00:15:04,160 --> 00:15:07,760
for instance or

00:15:05,440 --> 00:15:08,720
running a backup restore flow when your

00:15:07,760 --> 00:15:11,839
users are

00:15:08,720 --> 00:15:14,160
placed in a shared schema or maybe

00:15:11,839 --> 00:15:15,920
after some time you want to play with

00:15:14,160 --> 00:15:18,240
unique general purpose tenants like

00:15:15,920 --> 00:15:20,399
master sci a blog or the help center

00:15:18,240 --> 00:15:22,320
but if you are worrying about these

00:15:20,399 --> 00:15:22,959
problems then congratulations this means

00:15:22,320 --> 00:15:26,240
that your

00:15:22,959 --> 00:15:28,480
actual project has lift off

00:15:26,240 --> 00:15:29,360
and is actually very nominal in his

00:15:28,480 --> 00:15:31,519
assent

00:15:29,360 --> 00:15:32,959
now you are ready to start worrying

00:15:31,519 --> 00:15:36,720
about the long-term uh

00:15:32,959 --> 00:15:39,040
things and let me ask you what if

00:15:36,720 --> 00:15:41,040
what if what if you're not having more

00:15:39,040 --> 00:15:42,160
tenants than you initially imagine you

00:15:41,040 --> 00:15:44,160
could have

00:15:42,160 --> 00:15:46,399
what if what you in italy initially

00:15:44,160 --> 00:15:48,720
thought would be a multi-million dollar

00:15:46,399 --> 00:15:50,560
idea is actually becoming a billion or a

00:15:48,720 --> 00:15:51,680
trillion dollar idea and you actually

00:15:50,560 --> 00:15:54,720
creating the next

00:15:51,680 --> 00:15:55,360
unicorn well these are good problems to

00:15:54,720 --> 00:15:57,360
have

00:15:55,360 --> 00:16:00,880
so let me speak a little bit about the

00:15:57,360 --> 00:16:02,959
size of the behemoth you are creating

00:16:00,880 --> 00:16:04,720
in case i haven't made this pretty

00:16:02,959 --> 00:16:06,880
obvious by now let me just tell you that

00:16:04,720 --> 00:16:08,560
for every new tenant you bring on board

00:16:06,880 --> 00:16:10,480
you're actually increasing the number of

00:16:08,560 --> 00:16:12,800
tables you have in your database

00:16:10,480 --> 00:16:14,320
so if this pattern goes on and on how

00:16:12,800 --> 00:16:16,240
far you think you can get

00:16:14,320 --> 00:16:17,680
well let me tell you if you dig in the

00:16:16,240 --> 00:16:18,399
posterous mailing list you will

00:16:17,680 --> 00:16:20,000
eventually

00:16:18,399 --> 00:16:21,759
find this notion that there is no

00:16:20,000 --> 00:16:23,680
practical limit on the number of tables

00:16:21,759 --> 00:16:24,240
a postgres database can have and that's

00:16:23,680 --> 00:16:26,320
true

00:16:24,240 --> 00:16:27,519
but one is the practicality for posters

00:16:26,320 --> 00:16:29,279
developer and the other is the

00:16:27,519 --> 00:16:31,040
practicality for your terms

00:16:29,279 --> 00:16:33,120
so yes there is going to be a practical

00:16:31,040 --> 00:16:35,199
limit and it's going to come in the way

00:16:33,120 --> 00:16:36,079
of an increasingly degraded performance

00:16:35,199 --> 00:16:38,800
of your database

00:16:36,079 --> 00:16:39,279
operations now there is no telling in

00:16:38,800 --> 00:16:41,759
when

00:16:39,279 --> 00:16:42,399
this is going to start happening but

00:16:41,759 --> 00:16:44,320
based

00:16:42,399 --> 00:16:46,160
in the empirical notion that a million

00:16:44,320 --> 00:16:47,040
is a scary number of tables to have in a

00:16:46,160 --> 00:16:49,120
single database

00:16:47,040 --> 00:16:50,639
let me give you this formula called the

00:16:49,120 --> 00:16:53,040
scary number of tenants

00:16:50,639 --> 00:16:55,279
which is 1 million divided by the tables

00:16:53,040 --> 00:16:57,519
you have per tenant

00:16:55,279 --> 00:16:58,800
warning i am not saying that a million

00:16:57,519 --> 00:17:01,199
is going to be the straw that

00:16:58,800 --> 00:17:03,040
will break the camel's back but this

00:17:01,199 --> 00:17:05,360
could be very useful in order to

00:17:03,040 --> 00:17:07,199
calculating how many tenants

00:17:05,360 --> 00:17:09,039
you need to have in order to start

00:17:07,199 --> 00:17:12,720
worrying about these kind of things

00:17:09,039 --> 00:17:14,720
and please look here that you don't need

00:17:12,720 --> 00:17:15,120
a lot of tables pertaining in order to

00:17:14,720 --> 00:17:18,640
reach

00:17:15,120 --> 00:17:20,720
a fairly fairly fast

00:17:18,640 --> 00:17:22,880
the scary number of tenants so see that

00:17:20,720 --> 00:17:25,760
in the typical django project around

00:17:22,880 --> 00:17:26,079
100 tables your scary number is going to

00:17:25,760 --> 00:17:29,200
be

00:17:26,079 --> 00:17:29,679
10 000 tenants and if your project is

00:17:29,200 --> 00:17:32,799
between

00:17:29,679 --> 00:17:33,200
100 and 150 it could get as low as six

00:17:32,799 --> 00:17:36,080
point

00:17:33,200 --> 00:17:38,320
five thousand is this going to be enough

00:17:36,080 --> 00:17:38,960
to make your multi-million dollar idea

00:17:38,320 --> 00:17:40,080
thrive

00:17:38,960 --> 00:17:42,640
well this is something you have to

00:17:40,080 --> 00:17:44,240
calculate yourself and decide

00:17:42,640 --> 00:17:45,679
truth is that this is not a django

00:17:44,240 --> 00:17:47,520
specific problem this is more in the

00:17:45,679 --> 00:17:49,679
posterior side and this is a problem

00:17:47,520 --> 00:17:51,039
we found ourselves by using schemas in

00:17:49,679 --> 00:17:53,280
the first place

00:17:51,039 --> 00:17:54,080
so this problem could probably be

00:17:53,280 --> 00:17:56,720
mitigated

00:17:54,080 --> 00:17:58,720
on your runway extended by doing some

00:17:56,720 --> 00:18:01,919
specific postures tweaks

00:17:58,720 --> 00:18:04,240
but the bottom line here is that in

00:18:01,919 --> 00:18:05,280
reality schema related behemoths are not

00:18:04,240 --> 00:18:06,640
that massive

00:18:05,280 --> 00:18:08,559
and this is not a good thing this

00:18:06,640 --> 00:18:09,520
actually means that maybe the sky is not

00:18:08,559 --> 00:18:11,120
going to be your limit

00:18:09,520 --> 00:18:12,720
and you probably have a ceiling above

00:18:11,120 --> 00:18:13,440
your head and that ceiling is probably

00:18:12,720 --> 00:18:16,640
lower

00:18:13,440 --> 00:18:18,559
than you uh probably imagine

00:18:16,640 --> 00:18:20,400
now the moment i told you that you might

00:18:18,559 --> 00:18:22,000
be incurring in performance issues with

00:18:20,400 --> 00:18:22,799
a single database you probably thought

00:18:22,000 --> 00:18:25,280
hey

00:18:22,799 --> 00:18:26,960
why don't we start and this is okay this

00:18:25,280 --> 00:18:28,320
is kind of the next step when you're

00:18:26,960 --> 00:18:30,960
getting really big

00:18:28,320 --> 00:18:31,600
but let me warn you starting with

00:18:30,960 --> 00:18:34,559
schemas

00:18:31,600 --> 00:18:34,799
this is something you don't find a lot

00:18:34,559 --> 00:18:36,640
of

00:18:34,799 --> 00:18:38,799
information out there in the internet so

00:18:36,640 --> 00:18:41,520
it's either that people are not doing it

00:18:38,799 --> 00:18:42,960
or that nobody has returned in order to

00:18:41,520 --> 00:18:46,320
tell us how to do it

00:18:42,960 --> 00:18:47,760
so uh we are entering here uncharted

00:18:46,320 --> 00:18:48,559
territories and this is kind of the

00:18:47,760 --> 00:18:51,280
silence

00:18:48,559 --> 00:18:51,760
song so please this section could be

00:18:51,280 --> 00:18:54,880
more

00:18:51,760 --> 00:18:58,720
uh scientific speculation than

00:18:54,880 --> 00:19:01,039
experience facts come from experience

00:18:58,720 --> 00:19:02,799
so anyways we want to share right so

00:19:01,039 --> 00:19:03,919
let's try to do it in the django side

00:19:02,799 --> 00:19:06,000
and the strategy

00:19:03,919 --> 00:19:07,919
is that well we're going to have to use

00:19:06,000 --> 00:19:08,400
schemas as the minimum decomposable unit

00:19:07,919 --> 00:19:10,400
because

00:19:08,400 --> 00:19:11,919
we are already using schemas for storing

00:19:10,400 --> 00:19:13,840
the the tenant data

00:19:11,919 --> 00:19:15,919
and then we're going to be routing

00:19:13,840 --> 00:19:17,120
physical charts in the same way that we

00:19:15,919 --> 00:19:18,960
are routing schemas

00:19:17,120 --> 00:19:21,440
so if you remember the abstract concept

00:19:18,960 --> 00:19:23,360
of a tenant now you only need to add the

00:19:21,440 --> 00:19:25,520
logical chart it belongs

00:19:23,360 --> 00:19:27,120
to and then we translate the logical

00:19:25,520 --> 00:19:28,240
chart into a physical chart which is

00:19:27,120 --> 00:19:30,559
actually the database

00:19:28,240 --> 00:19:31,919
in this case we are supposed to be using

00:19:30,559 --> 00:19:33,520
the database router

00:19:31,919 --> 00:19:35,360
and we're just going to provide the

00:19:33,520 --> 00:19:36,960
physical chart as a default value for

00:19:35,360 --> 00:19:38,960
the database for rate and database for

00:19:36,960 --> 00:19:41,200
right hook this is something i am

00:19:38,960 --> 00:19:43,120
experimenting with in this pull request

00:19:41,200 --> 00:19:45,280
in my package so feel free to chime

00:19:43,120 --> 00:19:46,240
in and see if we can figure out how to

00:19:45,280 --> 00:19:49,039
solve this problem

00:19:46,240 --> 00:19:50,720
now there are some interesting uh

00:19:49,039 --> 00:19:51,600
theoretical challenges here on practical

00:19:50,720 --> 00:19:54,080
challenges

00:19:51,600 --> 00:19:56,160
is one of it is that we are now having

00:19:54,080 --> 00:19:58,320
multiple shared schemas which initially

00:19:56,160 --> 00:19:59,679
we thought would be unique across all

00:19:58,320 --> 00:20:01,280
private schemas

00:19:59,679 --> 00:20:03,039
so what we're going to do are we going

00:20:01,280 --> 00:20:04,960
to keep them in sync across multiple

00:20:03,039 --> 00:20:06,080
databases are going to extract that data

00:20:04,960 --> 00:20:08,559
into a separate database

00:20:06,080 --> 00:20:10,000
and let referential integrity go and

00:20:08,559 --> 00:20:12,320
this gets a little bit trickier

00:20:10,000 --> 00:20:14,559
when the users are placed in this shared

00:20:12,320 --> 00:20:16,880
schema so this could be no so easy

00:20:14,559 --> 00:20:18,000
as you may have initially thought at the

00:20:16,880 --> 00:20:19,919
end probably

00:20:18,000 --> 00:20:21,840
sharding at the schema level is not a

00:20:19,919 --> 00:20:24,159
completely future proof solution

00:20:21,840 --> 00:20:25,919
or an insurance policy for the project

00:20:24,159 --> 00:20:28,559
to continue at infinitum

00:20:25,919 --> 00:20:29,120
so don't be too enthusiastic about it

00:20:28,559 --> 00:20:31,440
now

00:20:29,120 --> 00:20:32,640
it's time to ask ourselves the most

00:20:31,440 --> 00:20:35,760
rated questions of

00:20:32,640 --> 00:20:37,840
all what if after all schemas are not

00:20:35,760 --> 00:20:40,559
enough

00:20:37,840 --> 00:20:41,760
this is what i call the moment of chaos

00:20:40,559 --> 00:20:42,640
some people are going to tell you hey

00:20:41,760 --> 00:20:44,480
don't worry

00:20:42,640 --> 00:20:46,159
when you find out schemas are not enough

00:20:44,480 --> 00:20:48,400
you should have enough money to afford a

00:20:46,159 --> 00:20:49,679
complete reward rewrite of your project

00:20:48,400 --> 00:20:51,840
and this is okay this is a very

00:20:49,679 --> 00:20:53,840
practical approach but let me balance

00:20:51,840 --> 00:20:55,600
that a little bit with this proverb

00:20:53,840 --> 00:20:56,880
sensible people will see trouble coming

00:20:55,600 --> 00:20:58,799
and avoid it but an

00:20:56,880 --> 00:21:00,400
unthinking person will walk right into

00:20:58,799 --> 00:21:02,640
it and regret it later

00:21:00,400 --> 00:21:03,919
so you can be practical but this is not

00:21:02,640 --> 00:21:06,640
a decision to be made

00:21:03,919 --> 00:21:08,080
lightly so just in case i have put you

00:21:06,640 --> 00:21:10,159
in this position right now

00:21:08,080 --> 00:21:12,159
and you're having a hard time deciding

00:21:10,159 --> 00:21:13,840
whether to schema or not to schema

00:21:12,159 --> 00:21:16,000
especially since you still have this

00:21:13,840 --> 00:21:18,559
multi-million dollar idea in your head

00:21:16,000 --> 00:21:20,400
let's try to solve this dilemma in our

00:21:18,559 --> 00:21:21,280
conclusions by answering three very

00:21:20,400 --> 00:21:24,480
specific

00:21:21,280 --> 00:21:26,720
questions number one is multi-tenancy

00:21:24,480 --> 00:21:29,520
through schemas de facto run as a choice

00:21:26,720 --> 00:21:30,000
well the answer is absolutely not there

00:21:29,520 --> 00:21:32,080
is a number

00:21:30,000 --> 00:21:33,600
of perfectly valid use cases for using

00:21:32,080 --> 00:21:34,240
schemas where you don't even have to

00:21:33,600 --> 00:21:36,320
worry

00:21:34,240 --> 00:21:37,679
about the practical limits um as a

00:21:36,320 --> 00:21:39,520
matter of fact there is a number of

00:21:37,679 --> 00:21:40,400
there are a number of businesses already

00:21:39,520 --> 00:21:43,440
thriving

00:21:40,400 --> 00:21:45,440
by using schemas by means of using

00:21:43,440 --> 00:21:47,679
multi-tenancy so the next question

00:21:45,440 --> 00:21:50,000
should you use schemas in your next

00:21:47,679 --> 00:21:52,960
software as a server project

00:21:50,000 --> 00:21:54,559
well it depends first you need to ask

00:21:52,960 --> 00:21:56,400
yourself and answer yourself why would

00:21:54,559 --> 00:21:58,000
you pick schema's other other archit

00:21:56,400 --> 00:21:59,679
over other architectures

00:21:58,000 --> 00:22:02,080
if you can convince yourself and you

00:21:59,679 --> 00:22:04,720
make your uh cost benefit uh

00:22:02,080 --> 00:22:06,320
balance and schemas are winning then by

00:22:04,720 --> 00:22:07,760
all means go ahead but please

00:22:06,320 --> 00:22:09,280
run the numbers so that you know if

00:22:07,760 --> 00:22:10,000
you're going to have enough fuel to

00:22:09,280 --> 00:22:12,480
thrive

00:22:10,000 --> 00:22:13,200
with this approach and the last question

00:22:12,480 --> 00:22:14,559
is

00:22:13,200 --> 00:22:16,080
should you change your database

00:22:14,559 --> 00:22:17,520
architecture to something other than

00:22:16,080 --> 00:22:20,320
schemas if you are already

00:22:17,520 --> 00:22:22,080
invested in this well we need to kind of

00:22:20,320 --> 00:22:23,360
fall back to the previous question

00:22:22,080 --> 00:22:25,039
would you have used a different

00:22:23,360 --> 00:22:26,640
architecture should your project have

00:22:25,039 --> 00:22:30,080
started today

00:22:26,640 --> 00:22:32,159
if no then okay but if yes my advice is

00:22:30,080 --> 00:22:33,679
don't panic you don't have to tear down

00:22:32,159 --> 00:22:35,679
the whole building and then rebuild it

00:22:33,679 --> 00:22:37,360
from the ashes with a new architecture

00:22:35,679 --> 00:22:39,679
there are still ways to smartly

00:22:37,360 --> 00:22:40,640
transition and even in the worst case

00:22:39,679 --> 00:22:42,720
scenario

00:22:40,640 --> 00:22:44,720
you can go for at least a couple of my

00:22:42,720 --> 00:22:47,280
miles with schemas until you figure out

00:22:44,720 --> 00:22:49,360
a better solution and a transition plan

00:22:47,280 --> 00:22:51,760
so the final word of advice is to

00:22:49,360 --> 00:22:53,440
actually make your informed decision

00:22:51,760 --> 00:22:55,039
with anything you may have learned today

00:22:53,440 --> 00:22:57,360
in this talk or anything

00:22:55,039 --> 00:22:58,960
you learn from your own research but do

00:22:57,360 --> 00:23:01,520
it with a cold head

00:22:58,960 --> 00:23:03,600
not right after reading a blog post not

00:23:01,520 --> 00:23:07,039
right after listening to this talk

00:23:03,600 --> 00:23:09,440
because every project has different

00:23:07,039 --> 00:23:10,799
scope and different implications so what

00:23:09,440 --> 00:23:12,720
applies to some don't doesn't

00:23:10,799 --> 00:23:14,880
necessarily have to apply to you

00:23:12,720 --> 00:23:17,039
so let all the dust settle in your head

00:23:14,880 --> 00:23:20,880
and make your informed decision in

00:23:17,039 --> 00:23:22,080
calm just in case uh you finally have to

00:23:20,880 --> 00:23:24,000
decide to

00:23:22,080 --> 00:23:25,840
move away from schemas here are some

00:23:24,000 --> 00:23:27,200
alternative packages you can use for the

00:23:25,840 --> 00:23:29,039
shared database approach which is

00:23:27,200 --> 00:23:31,039
currently the only alternative you have

00:23:29,039 --> 00:23:33,679
if schemas are not going to work for you

00:23:31,039 --> 00:23:36,400
django multi-tenant and django scopes

00:23:33,679 --> 00:23:37,919
and that's it i sincerely hope that this

00:23:36,400 --> 00:23:40,640
talk has answered more

00:23:37,919 --> 00:23:42,480
questions than it has post but just in

00:23:40,640 --> 00:23:44,159
case it hasn't and just in case you want

00:23:42,480 --> 00:23:45,039
to continue the debate feel free to

00:23:44,159 --> 00:23:47,200
reach out

00:23:45,039 --> 00:23:48,799
i'll be more than happy to continue to

00:23:47,200 --> 00:23:50,960
debate somewhere else

00:23:48,799 --> 00:23:51,919
and that's it i hope you enjoyed the

00:23:50,960 --> 00:23:55,679
rest of your

00:23:51,919 --> 00:23:55,679
of your conference and for the time

00:24:01,720 --> 00:24:04,720

YouTube URL: https://www.youtube.com/watch?v=OfPE7yj1trw


