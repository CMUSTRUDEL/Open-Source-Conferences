Title: "Streamlit - Build interactive data dashboards quickly" - Jaimin Khanderia (PyConline AU 2020)
Publication date: 2020-09-08
Playlist: PyConline AU 2020
Description: 
	Jaimin Khanderia

https://2020.pycon.org.au/program/RL8S3N

Streamlit is a framework that allows you to build interactive analytical apps very rapidly. It is gaining popularity among data scientists and analysts around the world as it helps them make a data dashboard that is elegant and aesthetically pleasing. In my presentation, I’ll briefly state what is Streamlit and how it is super useful for data scientists and analysts. I’ll then go over the basic Streamlit components and examples that demonstrate how easy it is to make an interactive data dashboard in Python. (Yes you heard it right, no JavaScript required :D) By the end of this talk, you’ll know the basics of Streamlit and would be able to build an interactive web application for data visualization and analysis with just a few lines of code in Python.

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

Python, PyCon, PyConAU, PyConline

Fri Sep  4 11:00:00 2020 at Curlyboi
Captions: 
	00:00:00,000 --> 00:00:04,319
everyone and welcome back to the science

00:00:02,000 --> 00:00:06,080
data and analytics track

00:00:04,319 --> 00:00:08,160
next up we have jamin speaking to us

00:00:06,080 --> 00:00:10,880
about building interactive soft

00:00:08,160 --> 00:00:12,559
interactive dashboards using streamlit

00:00:10,880 --> 00:00:14,000
jamin is a data scientist and software

00:00:12,559 --> 00:00:15,280
engineer working in the field of data

00:00:14,000 --> 00:00:17,279
science and machine learning for the

00:00:15,280 --> 00:00:19,359
last three plus years

00:00:17,279 --> 00:00:22,240
i'm really looking forward to this talk

00:00:19,359 --> 00:00:25,599
take it away jaymen

00:00:22,240 --> 00:00:27,279
thank you good morning everyone welcome

00:00:25,599 --> 00:00:29,359
to the talk streamlit

00:00:27,279 --> 00:00:30,960
today we will be covering the basics of

00:00:29,359 --> 00:00:33,280
the streamlit module and then

00:00:30,960 --> 00:00:34,800
we'll have a follow-up by building a

00:00:33,280 --> 00:00:37,200
live demo on how to build

00:00:34,800 --> 00:00:39,360
a app using streamlight so let's get

00:00:37,200 --> 00:00:41,120
started

00:00:39,360 --> 00:00:43,200
before we begin let me give a brief

00:00:41,120 --> 00:00:45,360
introduction about myself

00:00:43,200 --> 00:00:47,039
i graduated from diasd with a btec

00:00:45,360 --> 00:00:49,120
honors degree in information and

00:00:47,039 --> 00:00:50,719
communication technology

00:00:49,120 --> 00:00:52,559
since then i have been working as a

00:00:50,719 --> 00:00:54,559
software engineer and a data scientist

00:00:52,559 --> 00:00:55,920
at a company called infocus innovations

00:00:54,559 --> 00:00:57,840
private limited

00:00:55,920 --> 00:00:59,199
infocus is a consulting company

00:00:57,840 --> 00:01:02,160
providing ml solutions

00:00:59,199 --> 00:01:02,160
in various disciplines

00:01:02,879 --> 00:01:06,560
over the past three years at my knee at

00:01:05,760 --> 00:01:08,320
infocus

00:01:06,560 --> 00:01:10,080
i have worked on various projects with

00:01:08,320 --> 00:01:12,640
different international clients

00:01:10,080 --> 00:01:15,360
ranging from software engineering data

00:01:12,640 --> 00:01:17,360
science and cutting edge ml algorithms

00:01:15,360 --> 00:01:20,960
please feel free to contact me using the

00:01:17,360 --> 00:01:20,960
details mentioned in the slide

00:01:22,720 --> 00:01:26,240
so today we will be first covering an

00:01:24,799 --> 00:01:28,240
introduction to streamlight

00:01:26,240 --> 00:01:30,079
followed by covering the main concepts

00:01:28,240 --> 00:01:32,159
and components that it provides

00:01:30,079 --> 00:01:35,520
and then we'll have live demo on how to

00:01:32,159 --> 00:01:35,520
build an app using streamlink

00:01:37,520 --> 00:01:43,040
so let's get started now as a developer

00:01:41,119 --> 00:01:45,360
you all must have a question why was

00:01:43,040 --> 00:01:47,520
there a need for streamlid

00:01:45,360 --> 00:01:50,079
the question seems appropriate and i

00:01:47,520 --> 00:01:51,920
have an answer for that

00:01:50,079 --> 00:01:53,759
the inventor of the streamlate model

00:01:51,920 --> 00:01:54,640
felt that there was no easy to use

00:01:53,759 --> 00:01:56,479
python module

00:01:54,640 --> 00:01:58,479
which can be used to create web apps to

00:01:56,479 --> 00:02:01,840
present ml results or

00:01:58,479 --> 00:02:01,840
business or data insights

00:02:02,000 --> 00:02:06,000
to make it more clear for you let's take

00:02:04,240 --> 00:02:07,680
a look at some of the comparisons and

00:02:06,000 --> 00:02:10,479
alternatives

00:02:07,680 --> 00:02:12,800
the first one is a jupiter notebook as a

00:02:10,479 --> 00:02:15,040
data scientist or ml research engineer

00:02:12,800 --> 00:02:16,080
you must all have heard and used jupyter

00:02:15,040 --> 00:02:18,319
notebook

00:02:16,080 --> 00:02:19,840
but it is not a good way to deploy it in

00:02:18,319 --> 00:02:23,120
the production

00:02:19,840 --> 00:02:24,959
the second option is dash by plotli

00:02:23,120 --> 00:02:27,200
so this is a very good option if you

00:02:24,959 --> 00:02:29,360
want to build aesthetic looking web apps

00:02:27,200 --> 00:02:30,959
but the only downside is that the

00:02:29,360 --> 00:02:34,160
developer needs to have a prerequisite

00:02:30,959 --> 00:02:36,480
knowledge about html and css

00:02:34,160 --> 00:02:38,560
the third and the last and the most

00:02:36,480 --> 00:02:40,319
preferred option that i have seen

00:02:38,560 --> 00:02:42,080
deployed in production is the use of

00:02:40,319 --> 00:02:44,239
flask framework

00:02:42,080 --> 00:02:46,160
now there are many levels of abstraction

00:02:44,239 --> 00:02:48,319
in the flask framework which makes it

00:02:46,160 --> 00:02:50,239
difficult for the developer to use it if

00:02:48,319 --> 00:02:52,879
it does if he or she doesn't have the

00:02:50,239 --> 00:02:52,879
knowledge for that

00:02:54,879 --> 00:02:59,040
so now let's take a look at how stream

00:02:56,879 --> 00:03:02,159
can be used for different purposes

00:02:59,040 --> 00:03:04,800
in this video we'll go through an app

00:03:02,159 --> 00:03:07,040
which analyzes the data for the uber

00:03:04,800 --> 00:03:09,120
pickups in new york city

00:03:07,040 --> 00:03:11,040
so by clicking the check box we'll first

00:03:09,120 --> 00:03:12,319
look at the raw data that is available

00:03:11,040 --> 00:03:14,400
to us

00:03:12,319 --> 00:03:16,000
and using the slider the end user can

00:03:14,400 --> 00:03:18,959
switch between the hours

00:03:16,000 --> 00:03:21,200
24 hour range and check the heat map of

00:03:18,959 --> 00:03:24,319
the various regions in new york city

00:03:21,200 --> 00:03:26,720
for the uber pickups

00:03:24,319 --> 00:03:28,799
and in the histogram down we can see the

00:03:26,720 --> 00:03:31,360
number of pickups per minute in that are

00:03:28,799 --> 00:03:31,360
selected

00:03:31,519 --> 00:03:36,480
next we will see how stimulate is used

00:03:34,319 --> 00:03:38,480
for model inference

00:03:36,480 --> 00:03:40,080
here we are covering the object

00:03:38,480 --> 00:03:43,519
detection inference using

00:03:40,080 --> 00:03:46,720
yolo v3 now as you can see that i am

00:03:43,519 --> 00:03:49,680
asking the model to detect car from the

00:03:46,720 --> 00:03:49,680
frames in the videos

00:03:50,080 --> 00:03:53,680
next you can choose the frame number for

00:03:52,879 --> 00:03:56,080
the video

00:03:53,680 --> 00:03:59,200
using the slider provided in the sidebar

00:03:56,080 --> 00:03:59,200
and we can see the output

00:03:59,439 --> 00:04:03,120
moreover you can play around with

00:04:01,200 --> 00:04:03,760
various hyper parameters just like how i

00:04:03,120 --> 00:04:06,319
clicked on

00:04:03,760 --> 00:04:09,200
the slider to see how the model performs

00:04:06,319 --> 00:04:09,200
when we change that

00:04:12,799 --> 00:04:16,320
so now let's talk about the main

00:04:14,239 --> 00:04:18,400
concepts of streamlight

00:04:16,320 --> 00:04:19,600
the first point is it embraces python

00:04:18,400 --> 00:04:22,000
scripting

00:04:19,600 --> 00:04:23,840
so the developer need not know any other

00:04:22,000 --> 00:04:27,120
language or any other

00:04:23,840 --> 00:04:28,080
uh knowledge about the same he can build

00:04:27,120 --> 00:04:30,800
that total app

00:04:28,080 --> 00:04:32,240
using python the second point is

00:04:30,800 --> 00:04:33,040
immediate and interactive live

00:04:32,240 --> 00:04:34,960
environment

00:04:33,040 --> 00:04:37,199
streamlet provides very rich interactive

00:04:34,960 --> 00:04:39,919
widgets through which the end user can

00:04:37,199 --> 00:04:41,199
interact with the web app and moreover

00:04:39,919 --> 00:04:42,880
for the immediate output

00:04:41,199 --> 00:04:44,720
whenever you save the code you can see

00:04:42,880 --> 00:04:46,639
the live output when you save the code

00:04:44,720 --> 00:04:48,639
in the web browser

00:04:46,639 --> 00:04:50,479
the last point is that the stimulate

00:04:48,639 --> 00:04:51,600
re-executes the script from top to

00:04:50,479 --> 00:04:54,160
bottom whenever

00:04:51,600 --> 00:04:54,800
something changes in the code so let's

00:04:54,160 --> 00:04:57,199
say

00:04:54,800 --> 00:04:58,000
the developer saves the code by changing

00:04:57,199 --> 00:05:00,720
something

00:04:58,000 --> 00:05:01,680
or whenever the end user interacts with

00:05:00,720 --> 00:05:04,160
the web app

00:05:01,680 --> 00:05:05,759
and changes a value or something it

00:05:04,160 --> 00:05:06,639
executes the whole script again in the

00:05:05,759 --> 00:05:10,000
top to better

00:05:06,639 --> 00:05:12,080
manner so now there would be a natural

00:05:10,000 --> 00:05:14,800
question that comes to your mind

00:05:12,080 --> 00:05:17,360
wouldn't that slow down the app

00:05:14,800 --> 00:05:17,919
so i would say that is a valid question

00:05:17,360 --> 00:05:21,520
but

00:05:17,919 --> 00:05:23,440
streamlight has covered it it has

00:05:21,520 --> 00:05:25,039
a mechanism through which it makes the

00:05:23,440 --> 00:05:26,479
rendering of the web faster when there

00:05:25,039 --> 00:05:30,320
is such a

00:05:26,479 --> 00:05:32,240
scenario so it is a simple term

00:05:30,320 --> 00:05:34,400
that every computer scientist must have

00:05:32,240 --> 00:05:37,759
heard during his or her knowledge

00:05:34,400 --> 00:05:41,520
in the computer science field yes

00:05:37,759 --> 00:05:42,160
the answer is caching streamlit provides

00:05:41,520 --> 00:05:44,320
the

00:05:42,160 --> 00:05:46,000
functionality of caching so that the

00:05:44,320 --> 00:05:47,919
developer can skip the

00:05:46,000 --> 00:05:49,919
data fetching and loading as well as the

00:05:47,919 --> 00:05:51,440
heavy computation part

00:05:49,919 --> 00:05:53,280
moreover it also provides this

00:05:51,440 --> 00:05:54,720
functionality in the pythonic way of

00:05:53,280 --> 00:05:57,120
using a decorator

00:05:54,720 --> 00:05:58,160
so basically you can just write at

00:05:57,120 --> 00:05:59,520
st.cash

00:05:58,160 --> 00:06:02,560
on top of your function that you would

00:05:59,520 --> 00:06:02,560
like to get it cached

00:06:03,039 --> 00:06:06,479
however to get your function cache

00:06:05,039 --> 00:06:10,080
extremely checks for some

00:06:06,479 --> 00:06:12,319
the conditions let's take a look at them

00:06:10,080 --> 00:06:13,520
so the first condition is the input

00:06:12,319 --> 00:06:17,120
parameters past

00:06:13,520 --> 00:06:17,520
the function so now let's take the help

00:06:17,120 --> 00:06:21,199
of

00:06:17,520 --> 00:06:23,120
an example code snippet and check that

00:06:21,199 --> 00:06:25,440
as you can see in the snippet we have a

00:06:23,120 --> 00:06:28,319
function called compute exponent

00:06:25,440 --> 00:06:28,960
that we are trying to cache now if you

00:06:28,319 --> 00:06:30,960
take

00:06:28,960 --> 00:06:32,080
the look at the last second line we are

00:06:30,960 --> 00:06:33,440
calling that function with the

00:06:32,080 --> 00:06:36,240
parameters a and b

00:06:33,440 --> 00:06:37,520
so those are the input parameters so if

00:06:36,240 --> 00:06:39,360
you change the value for those

00:06:37,520 --> 00:06:42,160
parameters the function won't be cached

00:06:39,360 --> 00:06:44,000
in the subsequent run

00:06:42,160 --> 00:06:46,720
the second condition is the value of

00:06:44,000 --> 00:06:48,560
external variable used in the function

00:06:46,720 --> 00:06:50,400
so now if you take a look at the code

00:06:48,560 --> 00:06:52,479
snippet you see that there is an

00:06:50,400 --> 00:06:54,560
external variable called exponent

00:06:52,479 --> 00:06:55,520
used in the body of the function compute

00:06:54,560 --> 00:06:57,840
exponent

00:06:55,520 --> 00:07:00,880
so if the value of that variable changes

00:06:57,840 --> 00:07:02,560
the function won't be cache

00:07:00,880 --> 00:07:04,160
the next condition is the body of the

00:07:02,560 --> 00:07:06,400
function so

00:07:04,160 --> 00:07:07,919
whenever the developer changes anything

00:07:06,400 --> 00:07:08,800
in the body of the function compute

00:07:07,919 --> 00:07:10,160
exponent

00:07:08,800 --> 00:07:12,319
the function won't be cached in the

00:07:10,160 --> 00:07:14,400
subsequent run

00:07:12,319 --> 00:07:16,400
the last condition that it checks is the

00:07:14,400 --> 00:07:18,560
body of any function used within the

00:07:16,400 --> 00:07:20,880
cache function

00:07:18,560 --> 00:07:22,560
so for our example we can see that we

00:07:20,880 --> 00:07:23,360
have another function called multiply

00:07:22,560 --> 00:07:27,280
that is used

00:07:23,360 --> 00:07:29,039
inside the function compute exponent

00:07:27,280 --> 00:07:31,199
so if we change the body of that

00:07:29,039 --> 00:07:32,960
function then the function

00:07:31,199 --> 00:07:35,759
compute exponent won't be cached in the

00:07:32,960 --> 00:07:35,759
subsequent runs

00:07:36,880 --> 00:07:40,560
so now let's take a look at some of the

00:07:38,960 --> 00:07:43,280
components that the stimulate provides

00:07:40,560 --> 00:07:45,440
to build the web app

00:07:43,280 --> 00:07:47,599
today first i would like to talk about a

00:07:45,440 --> 00:07:49,759
single function st dot write which can

00:07:47,599 --> 00:07:51,840
be used for multiple purpose

00:07:49,759 --> 00:07:52,879
so as a developer you would like to

00:07:51,840 --> 00:07:55,840
flush out

00:07:52,879 --> 00:07:57,759
various kind of data to your web app so

00:07:55,840 --> 00:08:00,960
now you can use this function st dot

00:07:57,759 --> 00:08:04,479
write and flush out any form of data

00:08:00,960 --> 00:08:06,800
if it is text data frame tabular data

00:08:04,479 --> 00:08:08,319
plots graphs anything you can just use

00:08:06,800 --> 00:08:11,039
this single function

00:08:08,319 --> 00:08:12,000
and you can achieve the functionality of

00:08:11,039 --> 00:08:14,479
fleshing out your data

00:08:12,000 --> 00:08:16,240
using that moreover if you have used

00:08:14,479 --> 00:08:18,319
jupyter notebook you would have

00:08:16,240 --> 00:08:20,160
worked with the markdown and you can use

00:08:18,319 --> 00:08:21,759
that here as well estimate provides the

00:08:20,160 --> 00:08:22,319
functionality for that by calling the

00:08:21,759 --> 00:08:26,000
function

00:08:22,319 --> 00:08:27,759
sg.magda moreover if the researcher

00:08:26,000 --> 00:08:28,479
would like to present some mathematical

00:08:27,759 --> 00:08:30,560
equation

00:08:28,479 --> 00:08:32,159
or anything else in the latex form

00:08:30,560 --> 00:08:33,440
string will provide some functionality

00:08:32,159 --> 00:08:36,080
for that as well

00:08:33,440 --> 00:08:36,959
you can call the function sc.latex to

00:08:36,080 --> 00:08:41,839
achieve

00:08:36,959 --> 00:08:41,839
the functionality to write latex

00:08:42,880 --> 00:08:46,640
next we look at some of the widgets that

00:08:44,880 --> 00:08:49,440
the stimulate provides for

00:08:46,640 --> 00:08:50,320
the users to interact with the web app

00:08:49,440 --> 00:08:51,760
so

00:08:50,320 --> 00:08:53,440
we will look at some of the interactive

00:08:51,760 --> 00:08:56,959
widgets that make it

00:08:53,440 --> 00:08:59,519
a user friendly for the end user

00:08:56,959 --> 00:09:01,519
text input so here the end user can type

00:08:59,519 --> 00:09:03,839
in anything and the web app will use

00:09:01,519 --> 00:09:06,240
that for its purpose

00:09:03,839 --> 00:09:07,279
next is the slider as we have seen in

00:09:06,240 --> 00:09:10,240
the previous videos

00:09:07,279 --> 00:09:11,360
slider allows the user to select values

00:09:10,240 --> 00:09:13,519
in between

00:09:11,360 --> 00:09:14,720
some of the numbers that is already been

00:09:13,519 --> 00:09:16,640
specified so

00:09:14,720 --> 00:09:18,320
there is a min value and max value and

00:09:16,640 --> 00:09:21,360
the user can choose in any number

00:09:18,320 --> 00:09:24,000
in that range check box

00:09:21,360 --> 00:09:26,959
checkbox is like an on off switch which

00:09:24,000 --> 00:09:29,920
you can use whenever you want to

00:09:26,959 --> 00:09:30,959
write it out something using a condition

00:09:29,920 --> 00:09:32,880
select box

00:09:30,959 --> 00:09:36,160
select box is essentially a drop down

00:09:32,880 --> 00:09:37,920
menu however you can use it in two ways

00:09:36,160 --> 00:09:39,600
first one is a single value drop down

00:09:37,920 --> 00:09:41,839
book and the second one is a

00:09:39,600 --> 00:09:44,399
multi-valued drop down

00:09:41,839 --> 00:09:45,360
so it would be really good if you can

00:09:44,399 --> 00:09:46,959
use this so that

00:09:45,360 --> 00:09:50,320
it makes it more user friendly for the

00:09:46,959 --> 00:09:51,920
end user

00:09:50,320 --> 00:09:54,560
the last component that we will be

00:09:51,920 --> 00:09:56,480
looking today is the side by utility

00:09:54,560 --> 00:09:58,480
so the streamlight provides the sidebar

00:09:56,480 --> 00:10:00,959
utility as we have already seen in

00:09:58,480 --> 00:10:01,760
the previous video where it allows the

00:10:00,959 --> 00:10:03,440
end user

00:10:01,760 --> 00:10:06,000
to interact with the web app using the

00:10:03,440 --> 00:10:09,680
widgets that are there in the web app

00:10:06,000 --> 00:10:12,000
so the developer can put all his widgets

00:10:09,680 --> 00:10:14,399
in the left hand side panel so that the

00:10:12,000 --> 00:10:15,120
end user gets a more cleaner and focused

00:10:14,399 --> 00:10:18,640
look

00:10:15,120 --> 00:10:18,880
for the web app now that we have looked

00:10:18,640 --> 00:10:20,959
at

00:10:18,880 --> 00:10:22,800
the main concepts and components of the

00:10:20,959 --> 00:10:25,600
stimulate app

00:10:22,800 --> 00:10:26,560
let's get to the live demo that we would

00:10:25,600 --> 00:10:30,399
want to have

00:10:26,560 --> 00:10:32,480
build an app so before we get to the

00:10:30,399 --> 00:10:33,600
demo let's first install the streamlet

00:10:32,480 --> 00:10:35,519
module

00:10:33,600 --> 00:10:38,160
you can install the stimulate module by

00:10:35,519 --> 00:10:40,880
just writing a single statement

00:10:38,160 --> 00:10:41,519
pip install streamlit the only

00:10:40,880 --> 00:10:46,320
requirement

00:10:41,519 --> 00:10:49,600
is that it requires python 3.6 or higher

00:10:46,320 --> 00:10:50,320
after you have installed the app you can

00:10:49,600 --> 00:10:52,399
run

00:10:50,320 --> 00:10:54,720
the command streamlet hello to check if

00:10:52,399 --> 00:10:56,560
everything is working fine

00:10:54,720 --> 00:10:58,560
it will open up a web browser where you

00:10:56,560 --> 00:11:01,839
can play around and see various

00:10:58,560 --> 00:11:01,839
demos that it provides

00:11:02,480 --> 00:11:06,079
so now let's get to the demo where i

00:11:04,959 --> 00:11:09,920
will be live coding an

00:11:06,079 --> 00:11:12,560
app to build a fully functional app

00:11:09,920 --> 00:11:14,000
so if you check out this report

00:11:12,560 --> 00:11:16,480
repository that i have mentioned

00:11:14,000 --> 00:11:19,680
in the slide all the resources have been

00:11:16,480 --> 00:11:19,680
committed and pushed there

00:11:24,560 --> 00:11:28,959
so before we get to the coding part

00:11:27,279 --> 00:11:31,440
let's first take

00:11:28,959 --> 00:11:33,120
two of the demos that i have built to

00:11:31,440 --> 00:11:34,959
show you guys

00:11:33,120 --> 00:11:36,720
the first one is where i plot the

00:11:34,959 --> 00:11:38,800
closing price of tickers in the new york

00:11:36,720 --> 00:11:40,720
stock exchange

00:11:38,800 --> 00:11:42,000
now as you can see i have a check box

00:11:40,720 --> 00:11:44,240
which says

00:11:42,000 --> 00:11:46,480
show the data frame now if i click on

00:11:44,240 --> 00:11:46,480
that

00:11:47,600 --> 00:11:51,440
i'll get a tabular output which has the

00:11:50,240 --> 00:11:53,600
raw data

00:11:51,440 --> 00:11:54,720
in the tabular form for various stickers

00:11:53,600 --> 00:11:56,079
and the

00:11:54,720 --> 00:11:59,120
there are some of the fields that

00:11:56,079 --> 00:11:59,120
denotes the prices

00:11:59,600 --> 00:12:03,200
as we can see we have a drop down or

00:12:01,839 --> 00:12:05,760
select box here

00:12:03,200 --> 00:12:06,959
where we have chosen the spy as the

00:12:05,760 --> 00:12:09,519
default ticker

00:12:06,959 --> 00:12:11,440
and i have plotted the closing price for

00:12:09,519 --> 00:12:13,600
that ticker

00:12:11,440 --> 00:12:15,839
now we can play around with the drop

00:12:13,600 --> 00:12:16,880
down menu and select other tickers and

00:12:15,839 --> 00:12:24,320
see the output

00:12:16,880 --> 00:12:26,720
in the plot below so

00:12:24,320 --> 00:12:28,320
the next step that i would like to show

00:12:26,720 --> 00:12:31,760
is the model inference app

00:12:28,320 --> 00:12:34,560
that we would be live coding today

00:12:31,760 --> 00:12:35,440
so here we are trying to predict the

00:12:34,560 --> 00:12:37,839
flower type

00:12:35,440 --> 00:12:39,600
of the iris that is a known data set in

00:12:37,839 --> 00:12:42,000
the ml field

00:12:39,600 --> 00:12:43,600
so there are four features for the data

00:12:42,000 --> 00:12:46,000
set that are mentioned

00:12:43,600 --> 00:12:47,360
on the left hand side panel here in the

00:12:46,000 --> 00:12:49,519
sidebar

00:12:47,360 --> 00:12:50,399
now the user can play around with those

00:12:49,519 --> 00:12:53,600
four sliders

00:12:50,399 --> 00:12:55,600
and see the output of the model so what

00:12:53,600 --> 00:12:59,760
the model predicts the class to be

00:12:55,600 --> 00:12:59,760
so if i change the output of this value

00:13:01,120 --> 00:13:04,800
we can see the model predicted the class

00:13:02,959 --> 00:13:07,680
version come

00:13:04,800 --> 00:13:08,959
moreover we can change and see the

00:13:07,680 --> 00:13:12,800
output of the model

00:13:08,959 --> 00:13:12,800
varying with the varying inputs

00:13:13,440 --> 00:13:17,760
so today we'll be making a clone of this

00:13:16,480 --> 00:13:21,279
app

00:13:17,760 --> 00:13:35,839
on this talk so let's get started with

00:13:21,279 --> 00:13:35,839
the demo

00:13:37,200 --> 00:13:41,440
so this is the first boilerplate data we

00:13:40,079 --> 00:13:42,000
will be using for any of the python

00:13:41,440 --> 00:13:49,839
script

00:13:42,000 --> 00:13:49,839
nothing new here

00:13:50,959 --> 00:13:55,040
so first we need to load the data of the

00:13:53,839 --> 00:13:58,480
iris that

00:13:55,040 --> 00:14:01,199
ah we are going to use for that

00:13:58,480 --> 00:14:17,839
i'll be importing sklen so that we can

00:14:01,199 --> 00:14:17,839
load the data set easily

00:14:54,320 --> 00:15:00,079
so now we have loaded the data using uh

00:14:57,440 --> 00:15:00,800
the inbuilt module that we have loaded

00:15:00,079 --> 00:15:03,680
but now

00:15:00,800 --> 00:15:05,920
as we have seen in earlier site so we

00:15:03,680 --> 00:15:08,880
can use the functionality of caching

00:15:05,920 --> 00:15:09,600
as we using the same data throughout our

00:15:08,880 --> 00:15:14,160
web app

00:15:09,600 --> 00:15:14,160
so we can place the decorator st.cashier

00:15:22,399 --> 00:15:26,000
and first let's put a markdown value so

00:15:24,959 --> 00:15:29,199
that we can see

00:15:26,000 --> 00:15:29,199
what the web app looks like

00:15:35,519 --> 00:15:40,720
iris flower prediction

00:15:47,680 --> 00:15:51,519
so whenever whenever you change

00:15:49,920 --> 00:15:51,839
something in the code and it's the first

00:15:51,519 --> 00:15:53,600
time

00:15:51,839 --> 00:15:55,040
just click on always rerun so that you

00:15:53,600 --> 00:15:58,079
get the output

00:15:55,040 --> 00:15:59,680
whenever you save the code so

00:15:58,079 --> 00:16:01,120
i just typed in this and we have the

00:15:59,680 --> 00:16:03,759
output here

00:16:01,120 --> 00:16:03,759
immediately

00:16:05,040 --> 00:16:08,639
let's write a brief description about

00:16:07,920 --> 00:16:12,880
the same

00:16:08,639 --> 00:16:12,880
so this app predicts

00:16:13,920 --> 00:16:16,639
iris

00:16:17,040 --> 00:16:20,320
based on the

00:16:20,880 --> 00:16:24,720
given inside inputs

00:16:27,680 --> 00:16:33,040
now we can have the model inference but

00:16:31,040 --> 00:16:35,519
currently we will train the data set

00:16:33,040 --> 00:16:39,120
here as well but you can load the

00:16:35,519 --> 00:16:51,839
received uh model that you have built

00:16:39,120 --> 00:16:51,839
directly here

00:17:28,160 --> 00:17:32,160
for training the data set we'll be using

00:17:30,080 --> 00:17:33,919
the decision tree classifier

00:17:32,160 --> 00:17:35,520
so the decision tree classifier in

00:17:33,919 --> 00:17:38,320
itself requires a

00:17:35,520 --> 00:17:39,919
talk on itself we won't be going into

00:17:38,320 --> 00:17:41,520
details of that we will be just using

00:17:39,919 --> 00:17:47,840
the decision tree classifier

00:17:41,520 --> 00:17:47,840
right now

00:18:00,960 --> 00:18:04,080
calling the fit function we are

00:18:02,559 --> 00:18:07,520
basically

00:18:04,080 --> 00:18:10,000
training the classifier and

00:18:07,520 --> 00:18:11,840
then we can use this strain classifier

00:18:10,000 --> 00:18:15,840
so let me return that

00:18:11,840 --> 00:18:15,840
between classifier here

00:18:15,919 --> 00:18:19,840
bro we just need to train it for one

00:18:18,960 --> 00:18:22,080
time so

00:18:19,840 --> 00:18:29,679
we can use the functionality of caching

00:18:22,080 --> 00:18:43,840
here as well

00:18:29,679 --> 00:18:43,840
so now let's build a sidebar

00:18:45,679 --> 00:18:49,440
so now when i say this we can check the

00:18:48,480 --> 00:18:52,240
output

00:18:49,440 --> 00:18:53,600
here so it says user defined inputs in

00:18:52,240 --> 00:18:56,240
the sidebar

00:18:53,600 --> 00:19:11,840
so now let's add the sliders that we saw

00:18:56,240 --> 00:19:11,840
earlier in the demo

00:19:32,880 --> 00:19:36,320
basically we will be just looping

00:19:34,480 --> 00:19:37,440
through all the features and names and

00:19:36,320 --> 00:19:39,440
we will be assigning

00:19:37,440 --> 00:19:53,840
the name to the sidebar value and the

00:19:39,440 --> 00:19:53,840
minimum and maximum value for the slider

00:19:58,320 --> 00:20:02,320
now the slider function has four

00:20:00,320 --> 00:20:04,000
arguments the first one is the name that

00:20:02,320 --> 00:20:06,159
you would like to assign it

00:20:04,000 --> 00:20:07,520
to the slider the second is the minimum

00:20:06,159 --> 00:20:09,520
value the third

00:20:07,520 --> 00:20:11,200
is the maximum value and the last is the

00:20:09,520 --> 00:20:21,840
default value of the slider that you

00:20:11,200 --> 00:20:21,840
would like to keep

00:20:52,720 --> 00:20:56,320
so by default we are keeping uh the

00:20:55,039 --> 00:20:59,440
median of the feature

00:20:56,320 --> 00:21:01,200
as the default value and now the value

00:20:59,440 --> 00:21:02,480
variable will have the value that is

00:21:01,200 --> 00:21:05,919
selected by the user

00:21:02,480 --> 00:21:08,159
for the slider so we will be adding it

00:21:05,919 --> 00:21:09,039
to the global variable feature so that

00:21:08,159 --> 00:21:11,679
we can combine

00:21:09,039 --> 00:21:13,039
all the values from the all sliders and

00:21:11,679 --> 00:21:15,039
then pass it

00:21:13,039 --> 00:21:16,320
to the train classifier so that we can

00:21:15,039 --> 00:21:31,840
predict the

00:21:16,320 --> 00:21:31,840
class of the app

00:21:35,679 --> 00:21:45,840
so now that we have the feature let's

00:21:37,919 --> 00:21:45,840
output it

00:21:52,640 --> 00:21:56,400
let's convert it into a numpy error so

00:21:55,200 --> 00:21:59,840
that

00:21:56,400 --> 00:21:59,840
it will be helpful for us

00:22:13,280 --> 00:22:17,280
and as you can see i'm using the same

00:22:15,520 --> 00:22:19,440
function st dot write

00:22:17,280 --> 00:22:21,760
for outputting text as well as the numpy

00:22:19,440 --> 00:22:21,760
array

00:22:22,480 --> 00:22:29,440
so let's now just predict

00:22:27,360 --> 00:22:31,000
using that feature we can call the

00:22:29,440 --> 00:22:33,360
function

00:22:31,000 --> 00:22:34,400
classifier.predict and we pass in the

00:22:33,360 --> 00:22:36,080
feature

00:22:34,400 --> 00:22:37,760
it will return a one cross one numpy

00:22:36,080 --> 00:22:39,039
array so we i'm just taking the first

00:22:37,760 --> 00:22:40,799
index for that

00:22:39,039 --> 00:22:42,080
now this will be index and not the

00:22:40,799 --> 00:22:44,080
actual class name

00:22:42,080 --> 00:22:45,440
so in order to get the actual class name

00:22:44,080 --> 00:22:55,840
let's write the

00:22:45,440 --> 00:22:55,840
logic for that

00:23:24,559 --> 00:23:31,840
so now we can play around with the uh

00:23:28,000 --> 00:23:31,840
slider and see the output for itself

00:23:32,799 --> 00:23:36,960
i would just like to add one last thing

00:23:35,919 --> 00:23:42,000
before we end

00:23:36,960 --> 00:23:42,000
the demo is to add another functionality

00:23:42,159 --> 00:23:48,840
so yeah we recorded coded the live app

00:23:45,440 --> 00:23:51,840
using streamlight so we are all done the

00:23:48,840 --> 00:23:51,840
demo

00:23:55,039 --> 00:23:58,559
i hope you would have liked the demo and

00:23:57,840 --> 00:24:00,559
you can use

00:23:58,559 --> 00:24:02,080
the stimulate for your own purpose you

00:24:00,559 --> 00:24:05,760
can check out all the resources

00:24:02,080 --> 00:24:07,039
in my repository that i mentioned here

00:24:05,760 --> 00:24:09,039
moreover these are some of the

00:24:07,039 --> 00:24:10,720
references that you can use and play

00:24:09,039 --> 00:24:13,360
around with the streamlet by using this

00:24:10,720 --> 00:24:13,360
resources

00:24:14,480 --> 00:24:20,960
thank you

00:24:18,880 --> 00:24:22,640
thanks jamin that was a great talk there

00:24:20,960 --> 00:24:25,120
was quite a lot of discussion and people

00:24:22,640 --> 00:24:27,840
seemed really impressed with streamlit

00:24:25,120 --> 00:24:29,520
i think we only have one time for one

00:24:27,840 --> 00:24:30,000
question and i just saw a question that

00:24:29,520 --> 00:24:33,279
came

00:24:30,000 --> 00:24:33,760
in about how do you refetch uh data

00:24:33,279 --> 00:24:36,480
source

00:24:33,760 --> 00:24:36,480
in streamlit

00:24:37,679 --> 00:24:41,520
so how do we can you repeat it how do we

00:24:40,000 --> 00:24:43,200
fetch data

00:24:41,520 --> 00:24:45,440
yeah refresh your data source so if you

00:24:43,200 --> 00:24:49,440
have a data source and it updates

00:24:45,440 --> 00:24:52,080
how do you refresh the data oh yes

00:24:49,440 --> 00:24:53,200
so if the data is refreshing we might

00:24:52,080 --> 00:24:55,919
not be able to use

00:24:53,200 --> 00:24:57,039
cache for it but so let's say you are

00:24:55,919 --> 00:25:00,159
using some kind of

00:24:57,039 --> 00:25:00,799
database or you have hosted it somewhere

00:25:00,159 --> 00:25:04,159
you can

00:25:00,799 --> 00:25:06,480
simply connect to it and use it uh by

00:25:04,159 --> 00:25:09,279
using the correct libraries or modules

00:25:06,480 --> 00:25:09,279
for say the same

00:25:10,480 --> 00:25:15,039
great um thank you thank you once again

00:25:13,039 --> 00:25:16,480
jamin i think that's all we have time

00:25:15,039 --> 00:25:18,159
for today but

00:25:16,480 --> 00:25:20,159
head over to the chat and i'm sure

00:25:18,159 --> 00:25:22,960
there's more questions there for you

00:25:20,159 --> 00:25:24,320
and thank you again um for everyone we

00:25:22,960 --> 00:25:27,279
have a long break now

00:25:24,320 --> 00:25:28,000
um before our next sessions just a bit

00:25:27,279 --> 00:25:30,240
under an hour

00:25:28,000 --> 00:25:31,600
i think we're 50 minutes actually so

00:25:30,240 --> 00:25:37,200
we're back at

00:25:31,600 --> 00:25:37,200
12 45 at a delay time so see you again

00:25:40,679 --> 00:25:43,679

YouTube URL: https://www.youtube.com/watch?v=UdovrY0bLuw


