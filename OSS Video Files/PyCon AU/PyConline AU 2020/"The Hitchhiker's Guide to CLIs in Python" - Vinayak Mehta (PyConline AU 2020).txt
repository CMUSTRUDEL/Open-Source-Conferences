Title: "The Hitchhiker's Guide to CLIs in Python" - Vinayak Mehta (PyConline AU 2020)
Publication date: 2020-09-08
Playlist: PyConline AU 2020
Description: 
	Vinayak Mehta

https://2020.pycon.org.au/program/UFBPBV

Command-line applications and interfaces are used by both newcomers and experienced Python developers everyday. But do you know how they came to be? Hop on to this ship as we go through the CLI galaxy and look at its history, explore the CLI anatomy and discover some Python packages that can help us create them.

We’ll then emulate one of the most popular CLIs of our time by writing our own CLI using Click, and see how we can package it and publish it on PyPI. Are you ready to travel faster-than-light using this ship’s Infinite Improbability Drive? Carry your towel!

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

Python, PyCon, PyConAU, PyConline

Sat Sep  5 16:35:00 2020 at Python 2
Captions: 
	00:00:04,799 --> 00:00:07,600
hello everyone

00:00:05,759 --> 00:00:09,599
welcome to the highest guide to cli is

00:00:07,600 --> 00:00:11,840
in python i'm vinayak a software

00:00:09,599 --> 00:00:13,759
engineer currently living in new delhi

00:00:11,840 --> 00:00:15,440
i maintain camelot and excalibur two

00:00:13,759 --> 00:00:17,520
tools that can help you extract tabular

00:00:15,440 --> 00:00:18,960
data from pdf files

00:00:17,520 --> 00:00:20,320
right now i'm in the fall one batch at

00:00:18,960 --> 00:00:22,160
the request center which is a

00:00:20,320 --> 00:00:23,840
self-directed educational retreat for

00:00:22,160 --> 00:00:25,199
programmers in new york city

00:00:23,840 --> 00:00:27,119
if you're looking for a software slash

00:00:25,199 --> 00:00:27,680
data engineer to join your team do reach

00:00:27,119 --> 00:00:30,160
out

00:00:27,680 --> 00:00:32,000
let's get back to the talk in the

00:00:30,160 --> 00:00:33,680
beginning was the command line

00:00:32,000 --> 00:00:35,920
well not quite the command line we know

00:00:33,680 --> 00:00:37,440
today they were typewriters

00:00:35,920 --> 00:00:39,760
and we were communicating using morse

00:00:37,440 --> 00:00:41,440
code so one fine day someone had an idea

00:00:39,760 --> 00:00:43,200
to connect a typewriter to an existing

00:00:41,440 --> 00:00:45,280
set of communication wires

00:00:43,200 --> 00:00:46,640
and the teletypewriter was born

00:00:45,280 --> 00:00:47,920
teletypes removed the need for an

00:00:46,640 --> 00:00:49,440
operator to know morse code

00:00:47,920 --> 00:00:51,520
and reduce message typing speed and

00:00:49,440 --> 00:00:52,960
delivery time which made it possible for

00:00:51,520 --> 00:00:55,600
messages to be flashed across the

00:00:52,960 --> 00:00:57,199
country with little manual intervention

00:00:55,600 --> 00:00:58,719
meanwhile computers were becoming

00:00:57,199 --> 00:01:00,399
powerful enough to multitask and

00:00:58,719 --> 00:01:01,760
interact with users in real time

00:01:00,399 --> 00:01:03,840
in contrast to the earlier batch

00:01:01,760 --> 00:01:05,600
processing model so another fine day

00:01:03,840 --> 00:01:07,280
someone had another idea to connect a

00:01:05,600 --> 00:01:09,760
teletype to a model which would let them

00:01:07,280 --> 00:01:11,760
interact with computers remotely

00:01:09,760 --> 00:01:14,479
among these teletypes was the in flexor

00:01:11,760 --> 00:01:15,920
writer in the teletype model 33

00:01:14,479 --> 00:01:17,360
teletypes like these were adapted to

00:01:15,920 --> 00:01:18,080
provide a user interface to early

00:01:17,360 --> 00:01:19,520
computers

00:01:18,080 --> 00:01:22,080
and this was the origin of the command

00:01:19,520 --> 00:01:23,680
line interface users typed commands

00:01:22,080 --> 00:01:25,759
after a prompt character was printed on

00:01:23,680 --> 00:01:26,560
paper after they were satisfied with the

00:01:25,759 --> 00:01:28,080
input they would press

00:01:26,560 --> 00:01:30,079
enter which would then send the command

00:01:28,080 --> 00:01:31,439
to the computer and finally the output

00:01:30,079 --> 00:01:32,799
from the computer would be printed on

00:01:31,439 --> 00:01:34,479
paper again

00:01:32,799 --> 00:01:36,320
teletypes were continued to be used as

00:01:34,479 --> 00:01:38,079
terminals to computers until

00:01:36,320 --> 00:01:41,759
video displays became widely available

00:01:38,079 --> 00:01:43,920
in the late 1970s video terminus became

00:01:41,759 --> 00:01:45,360
extremely popular io devices and on many

00:01:43,920 --> 00:01:47,119
different types of computers once

00:01:45,360 --> 00:01:48,159
manufacturers moved to a set of common

00:01:47,119 --> 00:01:51,439
standards like

00:01:48,159 --> 00:01:53,200
ascii and 2480 columns of text

00:01:51,439 --> 00:01:54,560
today we live in a time where physical

00:01:53,200 --> 00:01:55,439
teletypes and video terminals are

00:01:54,560 --> 00:01:57,280
obsolete

00:01:55,439 --> 00:01:59,119
we instead have terminal emulators which

00:01:57,280 --> 00:01:59,840
are a software simulation of the real

00:01:59,119 --> 00:02:02,159
thing

00:01:59,840 --> 00:02:04,000
but have modern terminal emulators

00:02:02,159 --> 00:02:06,640
borrowed any legacy from these old metal

00:02:04,000 --> 00:02:08,160
beasts let's find out

00:02:06,640 --> 00:02:10,720
the one thing that is clearly visible is

00:02:08,160 --> 00:02:12,480
the name if you take out d and dy from

00:02:10,720 --> 00:02:13,920
teletype it becomes tty

00:02:12,480 --> 00:02:15,520
which is a prefix in the names of

00:02:13,920 --> 00:02:17,120
virtual terminals on unix-based

00:02:15,520 --> 00:02:18,800
operating systems

00:02:17,120 --> 00:02:20,800
the fundamental type of application that

00:02:18,800 --> 00:02:22,400
runs on a virtual terminal is a shell

00:02:20,800 --> 00:02:23,840
the shell prompts for commands from the

00:02:22,400 --> 00:02:25,520
user and sends it

00:02:23,840 --> 00:02:27,120
sends it for execution after they press

00:02:25,520 --> 00:02:28,480
enter which is similar to the teletype

00:02:27,120 --> 00:02:30,319
workflow

00:02:28,480 --> 00:02:32,560
so based on intuition the holding handle

00:02:30,319 --> 00:02:34,160
looks like this keyboard passes input to

00:02:32,560 --> 00:02:34,720
the terminal which passes it to the

00:02:34,160 --> 00:02:36,239
process

00:02:34,720 --> 00:02:38,000
the process does some work and gives

00:02:36,239 --> 00:02:39,280
output back to the terminal which prints

00:02:38,000 --> 00:02:41,280
it on the display

00:02:39,280 --> 00:02:43,200
but an illusion sits in between the

00:02:41,280 --> 00:02:45,360
terminal and the process

00:02:43,200 --> 00:02:47,040
terminos it's kind of like an interface

00:02:45,360 --> 00:02:48,319
through some default settings for socket

00:02:47,040 --> 00:02:49,120
communication parameters and line

00:02:48,319 --> 00:02:50,959
discipline

00:02:49,120 --> 00:02:52,319
which affect how text is entered and

00:02:50,959 --> 00:02:54,400
printed

00:02:52,319 --> 00:02:56,000
the manual page for term ios lists all

00:02:54,400 --> 00:02:57,760
these available settings

00:02:56,000 --> 00:03:00,159
there is also the stdy utility which can

00:02:57,760 --> 00:03:01,920
be used to turn these settings on or off

00:03:00,159 --> 00:03:03,680
an stdiva hyphen a shows all these

00:03:01,920 --> 00:03:04,959
settings with their correct values

00:03:03,680 --> 00:03:06,480
for example the speed of serial

00:03:04,959 --> 00:03:07,440
communication and the number of rows and

00:03:06,480 --> 00:03:09,280
columns

00:03:07,440 --> 00:03:10,879
let's see what some of these settings do

00:03:09,280 --> 00:03:12,720
i'll show the same examples brandon

00:03:10,879 --> 00:03:14,560
roots shared in his 2017 north bay

00:03:12,720 --> 00:03:15,840
python keynote

00:03:14,560 --> 00:03:17,599
the first setting we'll look at is

00:03:15,840 --> 00:03:19,280
called i cannon it reverse to the

00:03:17,599 --> 00:03:21,040
canonical text editor used

00:03:19,280 --> 00:03:22,560
for some rudimentary editing of commands

00:03:21,040 --> 00:03:23,680
before they are sent to the process upon

00:03:22,560 --> 00:03:25,280
pressing enter

00:03:23,680 --> 00:03:27,680
for example moving the cursor back and

00:03:25,280 --> 00:03:28,799
forth or removing characters using

00:03:27,680 --> 00:03:30,640
backspace

00:03:28,799 --> 00:03:32,560
most interactive applications like text

00:03:30,640 --> 00:03:34,879
editors turn off i cannon and handle all

00:03:32,560 --> 00:03:36,720
the line editing themselves

00:03:34,879 --> 00:03:38,400
the canonical text data is on by default

00:03:36,720 --> 00:03:39,200
and we can turn it off using http like

00:03:38,400 --> 00:03:42,159
this

00:03:39,200 --> 00:03:42,640
let's see what that does we'll open cat

00:03:42,159 --> 00:03:44,720
and since

00:03:42,640 --> 00:03:45,760
icann is on the input is buffer till we

00:03:44,720 --> 00:03:48,480
press enter

00:03:45,760 --> 00:03:49,519
let's turn off icon and use card again

00:03:48,480 --> 00:03:51,680
as you can see the

00:03:49,519 --> 00:03:53,200
text is not being buffered now cat is

00:03:51,680 --> 00:03:54,799
receiving a character as soon as we

00:03:53,200 --> 00:03:56,799
enter it and printing it right away

00:03:54,799 --> 00:03:58,799
rather than one line at a time

00:03:56,799 --> 00:04:01,439
we can turn icon in back on by removing

00:03:58,799 --> 00:04:03,599
the hyphen from the earlier command

00:04:01,439 --> 00:04:05,200
another setting is onl cr where nl

00:04:03,599 --> 00:04:06,000
stands for newline and cr for carriage

00:04:05,200 --> 00:04:07,840
return

00:04:06,000 --> 00:04:09,280
this setting finds new lines in text and

00:04:07,840 --> 00:04:10,000
adds a carriage return to each one of

00:04:09,280 --> 00:04:11,920
them

00:04:10,000 --> 00:04:13,439
a category makes sure that the cursor

00:04:11,920 --> 00:04:14,000
moves back to the first column after a

00:04:13,439 --> 00:04:15,840
new line

00:04:14,000 --> 00:04:17,519
similar to the tele-type days when the

00:04:15,840 --> 00:04:18,400
paper carriage would return to the first

00:04:17,519 --> 00:04:21,199
column of

00:04:18,400 --> 00:04:22,639
with a new line a category return

00:04:21,199 --> 00:04:24,080
without the new line character is used

00:04:22,639 --> 00:04:24,960
to make progress bars on modern day

00:04:24,080 --> 00:04:27,199
terminals

00:04:24,960 --> 00:04:29,199
the program updates the progress moves

00:04:27,199 --> 00:04:30,560
the cursor back to the first column and

00:04:29,199 --> 00:04:32,560
then overwrites the earlier progress

00:04:30,560 --> 00:04:34,560
with the new one

00:04:32,560 --> 00:04:37,040
one lcr is also on by default and we can

00:04:34,560 --> 00:04:39,280
turn it off using sd data like this

00:04:37,040 --> 00:04:40,479
we look at ps this time the output looks

00:04:39,280 --> 00:04:43,199
very structured

00:04:40,479 --> 00:04:45,199
but what happens when we turn off oncr

00:04:43,199 --> 00:04:47,040
the illusion of structure is gone

00:04:45,199 --> 00:04:48,560
each line is being printed on a new line

00:04:47,040 --> 00:04:49,759
but the cursor does not return to the

00:04:48,560 --> 00:04:51,360
first column

00:04:49,759 --> 00:04:52,800
a lot of applications are written with

00:04:51,360 --> 00:04:54,479
this assumption that the terminal will

00:04:52,800 --> 00:04:55,759
automatically move the cursor back to

00:04:54,479 --> 00:04:56,560
the first column when they print a new

00:04:55,759 --> 00:04:59,840
line

00:04:56,560 --> 00:05:01,039
and we can turn oncr back on by removing

00:04:59,840 --> 00:05:02,800
the hyphen from the earlier command

00:05:01,039 --> 00:05:05,199
again

00:05:02,800 --> 00:05:06,639
there's also echo which is on by default

00:05:05,199 --> 00:05:08,320
echo directx is a terminal to print

00:05:06,639 --> 00:05:09,280
every character that we input back on

00:05:08,320 --> 00:05:11,919
the display

00:05:09,280 --> 00:05:13,039
what happens if we turn it off we look

00:05:11,919 --> 00:05:15,199
at cat again

00:05:13,039 --> 00:05:17,520
we can see what we are typing hello

00:05:15,199 --> 00:05:18,160
world what what happens when we turn our

00:05:17,520 --> 00:05:20,479
return off

00:05:18,160 --> 00:05:21,840
echo we didn't see cat being typed in

00:05:20,479 --> 00:05:23,680
the input strings too until

00:05:21,840 --> 00:05:25,280
cat which was running in the background

00:05:23,680 --> 00:05:26,800
printed them for us

00:05:25,280 --> 00:05:29,199
programs turn off echo when they ask

00:05:26,800 --> 00:05:30,720
users for passwords

00:05:29,199 --> 00:05:32,400
if you are experimenting with terminal

00:05:30,720 --> 00:05:34,320
settings you can reset

00:05:32,400 --> 00:05:35,520
uh you can use the reset command to

00:05:34,320 --> 00:05:37,039
return all of these settings to their

00:05:35,520 --> 00:05:38,400
current values

00:05:37,039 --> 00:05:40,160
you can also check out the term ios

00:05:38,400 --> 00:05:41,680
module in the python standard library to

00:05:40,160 --> 00:05:43,759
turn these settings on or off from your

00:05:41,680 --> 00:05:45,199
python code

00:05:43,759 --> 00:05:46,880
another way to change your terminal stay

00:05:45,199 --> 00:05:48,400
is state is through in-band and

00:05:46,880 --> 00:05:49,840
out-of-band signals

00:05:48,400 --> 00:05:51,600
in-band signaling means that you throw

00:05:49,840 --> 00:05:52,080
in some special characters in in your

00:05:51,600 --> 00:05:53,600
input

00:05:52,080 --> 00:05:55,039
the terminal interprets these special

00:05:53,600 --> 00:05:55,840
characters as commands and does not

00:05:55,039 --> 00:05:58,000
print them

00:05:55,840 --> 00:05:59,600
but it stay it instead causes the

00:05:58,000 --> 00:06:01,360
intended effect

00:05:59,600 --> 00:06:02,960
one way to do inbound signaling is using

00:06:01,360 --> 00:06:05,039
control characters

00:06:02,960 --> 00:06:06,319
for example ctrl h will do a backspace

00:06:05,039 --> 00:06:08,880
and control c will

00:06:06,319 --> 00:06:10,000
interrupt the running process and

00:06:08,880 --> 00:06:11,680
another way is to use

00:06:10,000 --> 00:06:13,520
escape sequences which can control

00:06:11,680 --> 00:06:14,479
things like cursor location and text

00:06:13,520 --> 00:06:16,479
color

00:06:14,479 --> 00:06:18,080
for example printing the first escape

00:06:16,479 --> 00:06:19,840
sequencer will clear the screen

00:06:18,080 --> 00:06:21,280
in printing the second one before

00:06:19,840 --> 00:06:23,440
another string will make the second

00:06:21,280 --> 00:06:25,039
string bold

00:06:23,440 --> 00:06:26,720
terminals are also pre-configured with

00:06:25,039 --> 00:06:28,080
input and output streams where the input

00:06:26,720 --> 00:06:29,759
stream is mapped to the keyboard and

00:06:28,080 --> 00:06:31,919
output to the display

00:06:29,759 --> 00:06:34,080
here estidding is the input stream where

00:06:31,919 --> 00:06:36,880
the program reads its input data

00:06:34,080 --> 00:06:38,720
in std out in a stdr are output streams

00:06:36,880 --> 00:06:40,560
where the program writes its output data

00:06:38,720 --> 00:06:42,560
and error messages

00:06:40,560 --> 00:06:44,479
unless of course data is redirected

00:06:42,560 --> 00:06:46,160
using some operators

00:06:44,479 --> 00:06:47,759
the greater than and double greater than

00:06:46,160 --> 00:06:50,240
are the redirection operators which

00:06:47,759 --> 00:06:51,599
redirect the program's output to a file

00:06:50,240 --> 00:06:52,960
the only difference between the two is

00:06:51,599 --> 00:06:54,560
that the first one will overwrite the

00:06:52,960 --> 00:06:55,919
file while the second one will append to

00:06:54,560 --> 00:06:57,759
the file

00:06:55,919 --> 00:06:59,199
another redirection operator is the pipe

00:06:57,759 --> 00:07:01,520
which makes the output of one program

00:06:59,199 --> 00:07:02,960
the input to another

00:07:01,520 --> 00:07:04,880
now that we have an understanding of how

00:07:02,960 --> 00:07:06,560
the terminal evolved and how it works

00:07:04,880 --> 00:07:08,000
let's look at programs that run inside a

00:07:06,560 --> 00:07:10,080
terminal

00:07:08,000 --> 00:07:12,000
command line interfaces the words

00:07:10,080 --> 00:07:13,840
interfaces applications programs and

00:07:12,000 --> 00:07:15,280
tools are used interchangeably but they

00:07:13,840 --> 00:07:16,080
all refer to the same thing most of the

00:07:15,280 --> 00:07:17,440
time

00:07:16,080 --> 00:07:19,440
clients make it easy to automate

00:07:17,440 --> 00:07:22,400
repetitive tasks via shell scripting

00:07:19,440 --> 00:07:24,479
and are kind of fun to use the general

00:07:22,400 --> 00:07:26,160
usage pattern over cli looks like this

00:07:24,479 --> 00:07:28,319
the shell displays the prompt as a sign

00:07:26,160 --> 00:07:30,319
that it's ready to take in commands

00:07:28,319 --> 00:07:32,560
the user then types in the command that

00:07:30,319 --> 00:07:34,319
they want to run along with some options

00:07:32,560 --> 00:07:36,240
and some arguments and finally ending

00:07:34,319 --> 00:07:38,000
the input by pressing the enter key

00:07:36,240 --> 00:07:39,280
this completes the command line of text

00:07:38,000 --> 00:07:41,840
going in hence the term

00:07:39,280 --> 00:07:43,440
command line interface the command is

00:07:41,840 --> 00:07:44,479
then executed and the output is printed

00:07:43,440 --> 00:07:47,120
on the terminal

00:07:44,479 --> 00:07:48,560
but what are these arguments and options

00:07:47,120 --> 00:07:50,000
arguments are required items of

00:07:48,560 --> 00:07:51,520
information for a program

00:07:50,000 --> 00:07:53,280
required in the sense that the program

00:07:51,520 --> 00:07:54,160
won't work without them they're often

00:07:53,280 --> 00:07:55,919
positional

00:07:54,160 --> 00:07:57,280
which means that an argument's position

00:07:55,919 --> 00:07:59,440
in the line will help the program

00:07:57,280 --> 00:08:01,039
identify the argument's type

00:07:59,440 --> 00:08:02,720
for example here's a copy command which

00:08:01,039 --> 00:08:03,680
can't function without both the required

00:08:02,720 --> 00:08:05,120
arguments

00:08:03,680 --> 00:08:06,960
the argument in the first position will

00:08:05,120 --> 00:08:08,400
always be identified as a source and the

00:08:06,960 --> 00:08:09,840
argument in the second position will

00:08:08,400 --> 00:08:12,160
always be the destination where the

00:08:09,840 --> 00:08:13,840
source needs to be copied

00:08:12,160 --> 00:08:15,440
an option or a flag is used to modify

00:08:13,840 --> 00:08:17,039
the operation of a command and as the

00:08:15,440 --> 00:08:18,639
name suggests they are optional and we

00:08:17,039 --> 00:08:19,919
have some default values

00:08:18,639 --> 00:08:21,440
the general convention is to have

00:08:19,919 --> 00:08:23,440
hyphens in front of a character or a

00:08:21,440 --> 00:08:25,520
word to identify the option

00:08:23,440 --> 00:08:27,199
for example in the copy command hyphen r

00:08:25,520 --> 00:08:28,800
changes its operation by asking it to

00:08:27,199 --> 00:08:31,680
recursively look for files in the source

00:08:28,800 --> 00:08:34,080
and then copy them to the destination

00:08:31,680 --> 00:08:35,120
but not all clis are as easy to use as

00:08:34,080 --> 00:08:37,279
the copy command

00:08:35,120 --> 00:08:38,479
in fact one of the criticisms of a cli

00:08:37,279 --> 00:08:40,880
is the lack of cues

00:08:38,479 --> 00:08:42,640
to the user about the available actions

00:08:40,880 --> 00:08:44,399
in contrast to graphical user interfaces

00:08:42,640 --> 00:08:46,320
which usually inform the user of

00:08:44,399 --> 00:08:48,080
these actions with many use icons and

00:08:46,320 --> 00:08:50,720
other visual cues

00:08:48,080 --> 00:08:52,480
to overcome this limitation many clies

00:08:50,720 --> 00:08:53,920
many clies display some brief docs

00:08:52,480 --> 00:08:54,959
around the arguments and options that

00:08:53,920 --> 00:08:56,320
they support

00:08:54,959 --> 00:08:59,279
this documentation can be viewed by

00:08:56,320 --> 00:09:01,040
invoking the client with the help option

00:08:59,279 --> 00:09:02,480
some of them also have man pages which

00:09:01,040 --> 00:09:04,240
is short for manual page

00:09:02,480 --> 00:09:06,000
and it can be viewed by using the man

00:09:04,240 --> 00:09:07,279
command

00:09:06,000 --> 00:09:08,959
well you must be wondering that there's

00:09:07,279 --> 00:09:09,760
a lot of moving parts here each

00:09:08,959 --> 00:09:11,600
programmer could

00:09:09,760 --> 00:09:12,800
write their cli differently for example

00:09:11,600 --> 00:09:15,120
they could use hyphen x

00:09:12,800 --> 00:09:16,800
instead of hyphen h to display help text

00:09:15,120 --> 00:09:18,399
are there any standards to make sure

00:09:16,800 --> 00:09:19,440
every ucla follows some basic

00:09:18,399 --> 00:09:23,519
conventions

00:09:19,440 --> 00:09:25,519
yes and it's called 6 46 makes aps

00:09:23,519 --> 00:09:27,600
provided by unix-based operating systems

00:09:25,519 --> 00:09:28,560
uniform apis such as command-line

00:09:27,600 --> 00:09:30,240
interfaces

00:09:28,560 --> 00:09:32,480
to follow the posix standard is to be

00:09:30,240 --> 00:09:34,640
posix compliant

00:09:32,480 --> 00:09:36,959
there's also the xdg-based directories

00:09:34,640 --> 00:09:38,320
pick which dictates how cli should store

00:09:36,959 --> 00:09:39,360
different types of files that they need

00:09:38,320 --> 00:09:41,200
for their function

00:09:39,360 --> 00:09:42,800
so that everyone doesn't save files all

00:09:41,200 --> 00:09:44,480
over the place

00:09:42,800 --> 00:09:46,240
these files could be configuration files

00:09:44,480 --> 00:09:47,600
data files or the program cache

00:09:46,240 --> 00:09:50,080
which should go into these directories

00:09:47,600 --> 00:09:51,519
on our user's file system

00:09:50,080 --> 00:09:53,519
now let's see how we can implement a

00:09:51,519 --> 00:09:55,200
command line interface using python

00:09:53,519 --> 00:09:57,040
there are several options to do this

00:09:55,200 --> 00:09:58,880
both in the standard library and on pi

00:09:57,040 --> 00:10:00,640
pi

00:09:58,880 --> 00:10:02,320
we'll use a small example cli called

00:10:00,640 --> 00:10:04,560
smallpip and see how we can implement it

00:10:02,320 --> 00:10:06,079
using these different options

00:10:04,560 --> 00:10:07,839
smart app just has one sub command

00:10:06,079 --> 00:10:09,519
called install using which you can

00:10:07,839 --> 00:10:11,040
install a package from pi bi

00:10:09,519 --> 00:10:12,720
it also has the upgrade option which

00:10:11,040 --> 00:10:13,519
will upgrade the package if it's already

00:10:12,720 --> 00:10:15,279
installed

00:10:13,519 --> 00:10:17,519
in the package name required argument to

00:10:15,279 --> 00:10:19,760
identify the package itself

00:10:17,519 --> 00:10:21,440
let's look at the standard library first

00:10:19,760 --> 00:10:24,240
it has a sys module

00:10:21,440 --> 00:10:25,519
which comes with the rgb variable size.

00:10:24,240 --> 00:10:27,120
is a list where the first element

00:10:25,519 --> 00:10:28,480
contains the name of the cli that was

00:10:27,120 --> 00:10:30,800
invoked and the rest of them are the

00:10:28,480 --> 00:10:32,640
command line options passed to the cli

00:10:30,800 --> 00:10:34,240
internally says.rt uses the get opt

00:10:32,640 --> 00:10:35,680
module to pass and create this list of

00:10:34,240 --> 00:10:38,320
command line options

00:10:35,680 --> 00:10:40,560
let's take some look uh take a look at

00:10:38,320 --> 00:10:42,240
some css.rb code

00:10:40,560 --> 00:10:44,720
so when the cli is invoked we get the

00:10:42,240 --> 00:10:46,240
list of arguments using sys.rugby

00:10:44,720 --> 00:10:48,079
and since the first element is the name

00:10:46,240 --> 00:10:49,360
of the cli we check what the elemented

00:10:48,079 --> 00:10:51,440
index 1 is

00:10:49,360 --> 00:10:52,800
with this hyphen h or hyphen hyphen help

00:10:51,440 --> 00:10:55,440
we print the help

00:10:52,800 --> 00:10:56,720
and do the same for the motion finally

00:10:55,440 --> 00:10:58,079
we check the sub command that was

00:10:56,720 --> 00:11:00,399
invoked and dispatch control to the

00:10:58,079 --> 00:11:02,880
relevant code

00:11:00,399 --> 00:11:03,680
up until python 3.2 the standard library

00:11:02,880 --> 00:11:05,519
also had the

00:11:03,680 --> 00:11:07,680
op pass module which has since been

00:11:05,519 --> 00:11:08,079
deprecated operas could only pass

00:11:07,680 --> 00:11:10,160
options

00:11:08,079 --> 00:11:11,600
and not positional arguments which is

00:11:10,160 --> 00:11:12,079
something that stephen bethard the

00:11:11,600 --> 00:11:15,120
author of

00:11:12,079 --> 00:11:17,519
art parts talks about it in pep 389

00:11:15,120 --> 00:11:18,240
this pep proposed deprecation of oppars

00:11:17,519 --> 00:11:20,959
in the favor

00:11:18,240 --> 00:11:23,120
of the new and improved arc parts module

00:11:20,959 --> 00:11:25,680
it was approved by guido 10 years ago on

00:11:23,120 --> 00:11:27,519
february 21 2010

00:11:25,680 --> 00:11:29,279
artpass was written because both get out

00:11:27,519 --> 00:11:30,240
and opera support only options and not

00:11:29,279 --> 00:11:32,320
arguments

00:11:30,240 --> 00:11:33,760
earthbound handles both and as a result

00:11:32,320 --> 00:11:34,959
it is able to auto generate better

00:11:33,760 --> 00:11:36,720
health messages

00:11:34,959 --> 00:11:38,160
artworks also allows customization of

00:11:36,720 --> 00:11:38,800
characters that are used to identify

00:11:38,160 --> 00:11:40,399
options

00:11:38,800 --> 00:11:43,360
for example using a plus instead of a

00:11:40,399 --> 00:11:45,040
minus or even forward slashes

00:11:43,360 --> 00:11:47,279
artpass also added support for sub

00:11:45,040 --> 00:11:48,079
commands this is a common pattern in cli

00:11:47,279 --> 00:11:50,240
for example

00:11:48,079 --> 00:11:51,839
pip install pip freeze and pip search

00:11:50,240 --> 00:11:54,000
let's see how small pip code looks like

00:11:51,839 --> 00:11:55,839
using our purse

00:11:54,000 --> 00:11:58,240
so we import our first initializer

00:11:55,839 --> 00:12:00,800
subparser initialize our parser object

00:11:58,240 --> 00:12:03,680
and pass in the description of our cli

00:12:00,800 --> 00:12:05,360
we have set a version option to it

00:12:03,680 --> 00:12:06,959
we then initialize the sub parsers

00:12:05,360 --> 00:12:08,480
object and add the sub parser for the

00:12:06,959 --> 00:12:10,320
install command

00:12:08,480 --> 00:12:11,839
to which we add an upgrade option in a

00:12:10,320 --> 00:12:13,440
package name argument

00:12:11,839 --> 00:12:14,880
the action is equal to stored true make

00:12:13,440 --> 00:12:17,040
sure that the upgrade option is treated

00:12:14,880 --> 00:12:18,720
like a boolean flag

00:12:17,040 --> 00:12:20,720
and when the serial is invoked we call

00:12:18,720 --> 00:12:22,240
the parser.pass args function which

00:12:20,720 --> 00:12:24,160
gives us a namespace object

00:12:22,240 --> 00:12:25,680
with all the command line options as its

00:12:24,160 --> 00:12:27,200
attributes

00:12:25,680 --> 00:12:29,040
finally we checked the subcommand that

00:12:27,200 --> 00:12:30,720
was invoked in dispatch control to the

00:12:29,040 --> 00:12:32,720
relevant code

00:12:30,720 --> 00:12:36,000
like mentioned before with our parts we

00:12:32,720 --> 00:12:37,600
get an auto generated help for our cli

00:12:36,000 --> 00:12:39,360
now let's look at some packages that are

00:12:37,600 --> 00:12:40,800
available on pi bi

00:12:39,360 --> 00:12:42,639
this doc op which was written by

00:12:40,800 --> 00:12:44,000
vladimir kellyship and it's kind of cool

00:12:42,639 --> 00:12:45,760
in the way it works

00:12:44,000 --> 00:12:47,200
doc op takes a documentation first

00:12:45,760 --> 00:12:48,880
approach to writing crs

00:12:47,200 --> 00:12:50,959
it just requires a posix compliant help

00:12:48,880 --> 00:12:52,560
string as an input from which it'll

00:12:50,959 --> 00:12:54,560
invert sub commands options and

00:12:52,560 --> 00:12:56,079
arguments on its own

00:12:54,560 --> 00:12:57,680
so this time around we first create a

00:12:56,079 --> 00:12:59,600
help string which shows our cli

00:12:57,680 --> 00:13:01,440
description and usage

00:12:59,600 --> 00:13:02,880
and when the sale is invoked we call doc

00:13:01,440 --> 00:13:03,600
opt pass in the help string and the

00:13:02,880 --> 00:13:05,760
version

00:13:03,600 --> 00:13:08,480
in return it returns a dictionary of the

00:13:05,760 --> 00:13:09,920
past command line options

00:13:08,480 --> 00:13:11,279
we again check the sub command that was

00:13:09,920 --> 00:13:13,200
invoked and dispatch control to the

00:13:11,279 --> 00:13:15,360
relevant code

00:13:13,200 --> 00:13:17,200
in all the examples till now we saw that

00:13:15,360 --> 00:13:18,800
in addition to parsing results we also

00:13:17,200 --> 00:13:20,399
had to write some boilerplate

00:13:18,800 --> 00:13:22,000
to dispatch control to the relevant

00:13:20,399 --> 00:13:23,519
install and upgrade code

00:13:22,000 --> 00:13:25,120
if we had to validate the past command

00:13:23,519 --> 00:13:26,480
line options we would need to add some

00:13:25,120 --> 00:13:28,240
more boilerplate

00:13:26,480 --> 00:13:30,160
this boilerplate can grow real big for

00:13:28,240 --> 00:13:31,760
large applications there might also be

00:13:30,160 --> 00:13:33,920
some common features that we

00:13:31,760 --> 00:13:35,680
might want to add like progress bars and

00:13:33,920 --> 00:13:38,560
colors for which we would usually need

00:13:35,680 --> 00:13:39,920
to install more packages

00:13:38,560 --> 00:13:41,600
now let's look at click which was

00:13:39,920 --> 00:13:43,040
written by army nonahard to support the

00:13:41,600 --> 00:13:44,800
flask project

00:13:43,040 --> 00:13:46,000
click automatically dispatches control

00:13:44,800 --> 00:13:47,600
to the relevant code based on the

00:13:46,000 --> 00:13:49,279
subcommand that is invoked

00:13:47,600 --> 00:13:51,040
it supports callbacks which can be used

00:13:49,279 --> 00:13:53,360
to validate pass command line options

00:13:51,040 --> 00:13:56,000
and it's posix compliant let's see what

00:13:53,360 --> 00:13:58,079
smallpip looks like using click

00:13:56,000 --> 00:14:00,160
so we import click add a function called

00:13:58,079 --> 00:14:02,000
cli with the dock string

00:14:00,160 --> 00:14:04,120
and since click follows a decorator

00:14:02,000 --> 00:14:06,560
based approach to writing clis we add a

00:14:04,120 --> 00:14:08,639
click.groupdecorator to the function

00:14:06,560 --> 00:14:11,440
it makes the function of command group

00:14:08,639 --> 00:14:13,040
to which more sub commands can be added

00:14:11,440 --> 00:14:16,000
we also had a version option using the

00:14:13,040 --> 00:14:17,519
click decorator of the same name and

00:14:16,000 --> 00:14:18,880
then we define a function called install

00:14:17,519 --> 00:14:20,160
with the docstring again

00:14:18,880 --> 00:14:23,040
this function will contain the code

00:14:20,160 --> 00:14:24,639
required to install or upgrade a package

00:14:23,040 --> 00:14:26,079
we then convert this function into a sub

00:14:24,639 --> 00:14:27,040
command using the cli dot command

00:14:26,079 --> 00:14:28,959
decorator

00:14:27,040 --> 00:14:31,279
the client cli dot command is a command

00:14:28,959 --> 00:14:32,959
group that we defined earlier

00:14:31,279 --> 00:14:34,240
we then add an option called upgrade

00:14:32,959 --> 00:14:36,000
along with the help string using the

00:14:34,240 --> 00:14:38,399
click.option decorator

00:14:36,000 --> 00:14:39,440
this flag is equal to makes upgrade a

00:14:38,399 --> 00:14:41,040
boolean flag

00:14:39,440 --> 00:14:44,079
similar to the action is equal to store

00:14:41,040 --> 00:14:45,839
true that we saw in our pass earlier

00:14:44,079 --> 00:14:48,480
finally we add a package name argument

00:14:45,839 --> 00:14:49,920
using the click.argument decorator

00:14:48,480 --> 00:14:51,600
and when the signal is invoked click

00:14:49,920 --> 00:14:53,279
will automatically dispatch control to

00:14:51,600 --> 00:14:55,279
the relevant code which in this case is

00:14:53,279 --> 00:14:57,040
the install function

00:14:55,279 --> 00:14:58,399
we will get the arguments and options as

00:14:57,040 --> 00:14:58,880
keyword arguments to the install

00:14:58,399 --> 00:15:00,320
function

00:14:58,880 --> 00:15:02,240
which we can then use to install or

00:15:00,320 --> 00:15:04,000
upgrade a package

00:15:02,240 --> 00:15:05,680
click also auto generates a help for a

00:15:04,000 --> 00:15:08,720
cli based on the function dock strings

00:15:05,680 --> 00:15:10,480
in the option help strings that we added

00:15:08,720 --> 00:15:11,839
click promises that when multiple apps

00:15:10,480 --> 00:15:13,199
written using click are strung together

00:15:11,839 --> 00:15:14,639
they will work seamlessly

00:15:13,199 --> 00:15:16,800
which means that multiple people can

00:15:14,639 --> 00:15:18,399
work on different parts of a large cli

00:15:16,800 --> 00:15:20,880
and stitch all of them together at the

00:15:18,399 --> 00:15:22,320
end like we are building a cli way we

00:15:20,880 --> 00:15:22,800
don't have to define parsers from the

00:15:22,320 --> 00:15:24,880
start

00:15:22,800 --> 00:15:26,000
or focus on our helps to help text from

00:15:24,880 --> 00:15:28,160
the start is also

00:15:26,000 --> 00:15:29,839
great for quick iterations now let's

00:15:28,160 --> 00:15:33,199
look at some common use cases and see

00:15:29,839 --> 00:15:35,040
how we can use click to implement them

00:15:33,199 --> 00:15:36,399
we'll use another small example cli

00:15:35,040 --> 00:15:38,240
called small get

00:15:36,399 --> 00:15:40,000
small get as the name suggests is a

00:15:38,240 --> 00:15:40,720
small get clone with six git sub

00:15:40,000 --> 00:15:44,240
commands

00:15:40,720 --> 00:15:45,680
clone config log status commit and push

00:15:44,240 --> 00:15:47,920
so we define a cli function with the

00:15:45,680 --> 00:15:50,959
click.group decorator in

00:15:47,920 --> 00:15:52,720
let's jump into the use cases now

00:15:50,959 --> 00:15:54,160
a common cli use case is to display

00:15:52,720 --> 00:15:56,079
progress bars to the user

00:15:54,160 --> 00:15:57,600
for example we should let the user know

00:15:56,079 --> 00:15:59,040
about the progress of how many files

00:15:57,600 --> 00:16:00,240
have been cloned when they invoke the

00:15:59,040 --> 00:16:02,079
clone sub command

00:16:00,240 --> 00:16:03,759
click has a progress by utility that can

00:16:02,079 --> 00:16:05,360
help us do this

00:16:03,759 --> 00:16:06,560
so we first define the clone sub command

00:16:05,360 --> 00:16:07,440
with the source and destination

00:16:06,560 --> 00:16:08,560
arguments

00:16:07,440 --> 00:16:10,320
and then let's say we have a list of

00:16:08,560 --> 00:16:11,759
files that we want to clone we can pass

00:16:10,320 --> 00:16:13,440
that list to the click.progress bar

00:16:11,759 --> 00:16:14,320
context manager which returns an

00:16:13,440 --> 00:16:15,920
iterator

00:16:14,320 --> 00:16:17,440
and as we iterate on it and download

00:16:15,920 --> 00:16:20,160
each file click will show the user a

00:16:17,440 --> 00:16:21,839
progress bar which looks like this

00:16:20,160 --> 00:16:23,759
so i invoke the clone sub command with

00:16:21,839 --> 00:16:26,320
the repo that i want to clone

00:16:23,759 --> 00:16:28,720
and i get to see a progress bar as each

00:16:26,320 --> 00:16:30,399
file is being downloaded

00:16:28,720 --> 00:16:32,320
another use case is to persist user

00:16:30,399 --> 00:16:33,839
specific configuration to a file

00:16:32,320 --> 00:16:35,360
for example we should persist things

00:16:33,839 --> 00:16:37,040
like username and email in our

00:16:35,360 --> 00:16:39,360
application folder when the user sets

00:16:37,040 --> 00:16:40,959
them using the config sub command

00:16:39,360 --> 00:16:43,680
click provides a function which can help

00:16:40,959 --> 00:16:45,279
us do this so we start by defining

00:16:43,680 --> 00:16:46,800
a config sub command with the key and

00:16:45,279 --> 00:16:48,639
value arguments

00:16:46,800 --> 00:16:50,000
we then get the application folder path

00:16:48,639 --> 00:16:52,079
for small gate using the get

00:16:50,000 --> 00:16:53,759
update function we create the path if it

00:16:52,079 --> 00:16:55,600
does not exist and finally store

00:16:53,759 --> 00:16:57,040
user specific config settings in a file

00:16:55,600 --> 00:16:58,800
called config

00:16:57,040 --> 00:17:01,759
using the get update function make sure

00:16:58,800 --> 00:17:03,759
that our cli follows the xdg spec

00:17:01,759 --> 00:17:05,520
in since the function is cross platform

00:17:03,759 --> 00:17:08,319
it will return the most appropriate path

00:17:05,520 --> 00:17:10,400
on windows mac os or linux

00:17:08,319 --> 00:17:12,720
and look it looks like this i do a small

00:17:10,400 --> 00:17:15,839
git config set my user dot name

00:17:12,720 --> 00:17:17,439
to vinayak and if i do a cat on the

00:17:15,839 --> 00:17:20,880
config file in the application

00:17:17,439 --> 00:17:23,120
folder for small git i can see that my

00:17:20,880 --> 00:17:25,439
username is set

00:17:23,120 --> 00:17:26,959
we should also page large cli outputs so

00:17:25,439 --> 00:17:28,960
that the user can scroll through it

00:17:26,959 --> 00:17:30,400
instead of printing it all at once

00:17:28,960 --> 00:17:32,559
we should do this for the large commit

00:17:30,400 --> 00:17:34,720
lock that the lock subcommand prints

00:17:32,559 --> 00:17:37,760
click supports paged output by calling a

00:17:34,720 --> 00:17:40,080
terminal pager program like more or less

00:17:37,760 --> 00:17:41,760
so we define at log sub command where we

00:17:40,080 --> 00:17:44,160
can use the click dot echo via pager

00:17:41,760 --> 00:17:46,080
function to display the large log string

00:17:44,160 --> 00:17:47,760
and it looks like this i do a small get

00:17:46,080 --> 00:17:49,679
log and i can

00:17:47,760 --> 00:17:51,440
see and scroll through all the comments

00:17:49,679 --> 00:17:53,039
in the log

00:17:51,440 --> 00:17:55,039
we should also highlight the file names

00:17:53,039 --> 00:17:56,559
that are added or modified using colors

00:17:55,039 --> 00:17:57,600
when they are printed using the status

00:17:56,559 --> 00:18:00,240
sub command

00:17:57,600 --> 00:18:01,360
click in hard click and help us add

00:18:00,240 --> 00:18:03,200
color to text

00:18:01,360 --> 00:18:05,919
it uses a colorama package underneath to

00:18:03,200 --> 00:18:08,160
do that in colorama in turns adds

00:18:05,919 --> 00:18:09,919
escape sequences takes to color it as we

00:18:08,160 --> 00:18:11,760
saw earlier

00:18:09,919 --> 00:18:13,360
and to do this we define a status up

00:18:11,760 --> 00:18:14,960
command let's say we have a list of

00:18:13,360 --> 00:18:17,039
files and their status

00:18:14,960 --> 00:18:18,559
we can use the click.style function to

00:18:17,039 --> 00:18:19,760
add a foreground color and even make the

00:18:18,559 --> 00:18:21,039
string bold

00:18:19,760 --> 00:18:23,360
finally we output it using the

00:18:21,039 --> 00:18:24,880
click.echo function the nice thing here

00:18:23,360 --> 00:18:26,960
is that keg will auto strip escape

00:18:24,880 --> 00:18:29,120
sequences if the output is redirected to

00:18:26,960 --> 00:18:30,799
a file because when we do that we would

00:18:29,120 --> 00:18:32,960
not want to look at incomprehensible

00:18:30,799 --> 00:18:34,799
escape sequences

00:18:32,960 --> 00:18:37,200
and it looks like this i do a small gate

00:18:34,799 --> 00:18:38,960
status and i can see that a new file

00:18:37,200 --> 00:18:41,039
called a.txt has been added

00:18:38,960 --> 00:18:42,720
since it's highlighted using the green

00:18:41,039 --> 00:18:45,280
color

00:18:42,720 --> 00:18:46,960
sometimes you might also want to get

00:18:45,280 --> 00:18:48,559
multi-line input from the user

00:18:46,960 --> 00:18:49,840
for example asking the user for a

00:18:48,559 --> 00:18:51,200
comment message when they invoke the

00:18:49,840 --> 00:18:52,799
commit sub command

00:18:51,200 --> 00:18:55,039
click supports launching editors for

00:18:52,799 --> 00:18:56,880
this use case it will automatically open

00:18:55,039 --> 00:18:58,880
the user's default editor or fall back

00:18:56,880 --> 00:19:00,559
to a sensible default

00:18:58,880 --> 00:19:02,559
so we define a commit subcommand with a

00:19:00,559 --> 00:19:03,760
message option and if the user doesn't

00:19:02,559 --> 00:19:05,360
use the message option when this

00:19:03,760 --> 00:19:07,919
subcommand is invoked we launch

00:19:05,360 --> 00:19:08,799
an editor to get the comment message and

00:19:07,919 --> 00:19:11,679
it looks like this

00:19:08,799 --> 00:19:14,000
i do a small git commit and in this case

00:19:11,679 --> 00:19:16,080
it opens bim which is my default editor

00:19:14,000 --> 00:19:18,880
i put in the commit message save it and

00:19:16,080 --> 00:19:21,200
it gets committed to the log

00:19:18,880 --> 00:19:23,840
we can also also ask users for one line

00:19:21,200 --> 00:19:25,280
input using the click.prompt function

00:19:23,840 --> 00:19:27,120
this can be useful for the push sub

00:19:25,280 --> 00:19:29,520
command to ask users for credentials to

00:19:27,120 --> 00:19:31,360
push files to a remote repo

00:19:29,520 --> 00:19:32,799
so we define a push sub command with two

00:19:31,360 --> 00:19:34,320
arguments the report

00:19:32,799 --> 00:19:36,240
remote repo we want to push to and the

00:19:34,320 --> 00:19:37,679
local branch that we want to push

00:19:36,240 --> 00:19:39,520
and then we use the click.prompt

00:19:37,679 --> 00:19:41,120
function to ask the user for their

00:19:39,520 --> 00:19:42,960
username and password

00:19:41,120 --> 00:19:45,200
here the return values will be stored in

00:19:42,960 --> 00:19:47,039
the username and password variables

00:19:45,200 --> 00:19:49,120
and notice that for the password prompt

00:19:47,039 --> 00:19:50,960
we've set height input is equal to true

00:19:49,120 --> 00:19:53,360
which won't print what the user types on

00:19:50,960 --> 00:19:53,919
the terminal internally click uses a get

00:19:53,360 --> 00:19:55,360
path

00:19:53,919 --> 00:19:57,679
get pass module from the standard

00:19:55,360 --> 00:19:59,440
library to do this in get pass turns the

00:19:57,679 --> 00:20:00,880
echo setting off using the term ios

00:19:59,440 --> 00:20:02,559
module while the password is being

00:20:00,880 --> 00:20:04,559
entered

00:20:02,559 --> 00:20:05,679
and it looks like this i do a small gate

00:20:04,559 --> 00:20:07,760
push origin master

00:20:05,679 --> 00:20:08,960
enter my username my password but you

00:20:07,760 --> 00:20:10,640
can't see it

00:20:08,960 --> 00:20:12,720
and all the files get pushed to the

00:20:10,640 --> 00:20:14,880
remote repo

00:20:12,720 --> 00:20:16,960
and we are done we have a small git cli

00:20:14,880 --> 00:20:18,720
with the help auto generated

00:20:16,960 --> 00:20:21,120
click also lets us test the serialize

00:20:18,720 --> 00:20:22,640
that we write we can use the cli runner

00:20:21,120 --> 00:20:24,400
class to invoke each sub command in our

00:20:22,640 --> 00:20:25,919
cli and check the result against your

00:20:24,400 --> 00:20:27,520
expected output

00:20:25,919 --> 00:20:28,960
and these are only a subset of features

00:20:27,520 --> 00:20:30,559
which click has to offer you should

00:20:28,960 --> 00:20:32,000
totally check out the click docs to look

00:20:30,559 --> 00:20:33,760
at more awesome things that you can do

00:20:32,000 --> 00:20:36,240
with click

00:20:33,760 --> 00:20:38,320
finally let's package small git to do

00:20:36,240 --> 00:20:39,840
this we just create a setup.pi outside

00:20:38,320 --> 00:20:41,760
the small gate module

00:20:39,840 --> 00:20:43,679
and add a console scripts entry point to

00:20:41,760 --> 00:20:45,200
it console scripts allow python

00:20:43,679 --> 00:20:46,240
functions to be registered as command

00:20:45,200 --> 00:20:47,200
line programs

00:20:46,240 --> 00:20:48,640
you can check out the code codeword

00:20:47,200 --> 00:20:50,880
small gate on the github link in the

00:20:48,640 --> 00:20:52,799
resources

00:20:50,880 --> 00:20:54,720
and once we package our cli we can also

00:20:52,799 --> 00:20:55,520
push it to pi pi so that other people

00:20:54,720 --> 00:20:58,000
can uh can

00:20:55,520 --> 00:20:59,679
install and use it and to do this we

00:20:58,000 --> 00:21:00,799
create a source distribution in a wheel

00:20:59,679 --> 00:21:04,159
using the setup.pi

00:21:00,799 --> 00:21:05,679
and upload them to pi pi using twine

00:21:04,159 --> 00:21:07,679
now that we know how to write clies in

00:21:05,679 --> 00:21:08,960
python let's briefly talk about the cli

00:21:07,679 --> 00:21:10,720
user experience

00:21:08,960 --> 00:21:12,080
as mentioned earlier we are operating in

00:21:10,720 --> 00:21:14,400
a constraint design space

00:21:12,080 --> 00:21:16,080
in contrast to graphical user interfaces

00:21:14,400 --> 00:21:17,760
which offer a lot of visual cues and

00:21:16,080 --> 00:21:19,200
guidance to the user

00:21:17,760 --> 00:21:21,280
there are some principles that can help

00:21:19,200 --> 00:21:22,000
us create a nice ux for the cli that we

00:21:21,280 --> 00:21:23,840
write

00:21:22,000 --> 00:21:26,480
the first one is to keep keep things

00:21:23,840 --> 00:21:28,880
simple and follow the unix philosophy

00:21:26,480 --> 00:21:30,400
of doing one thing and doing it well

00:21:28,880 --> 00:21:32,320
writing programs so that they can work

00:21:30,400 --> 00:21:34,400
together using the redirection operators

00:21:32,320 --> 00:21:35,840
in handling text streams

00:21:34,400 --> 00:21:37,600
following the unix velocity make sure

00:21:35,840 --> 00:21:39,760
that there are no surprises when users

00:21:37,600 --> 00:21:41,520
interact with the cls

00:21:39,760 --> 00:21:43,360
and the second is to make features

00:21:41,520 --> 00:21:44,080
discoverable by being forthcoming about

00:21:43,360 --> 00:21:45,520
them

00:21:44,080 --> 00:21:47,280
kind of similar to the queues that the

00:21:45,520 --> 00:21:49,120
graphical interfaces offer

00:21:47,280 --> 00:21:51,039
something sitkin laters do do that are

00:21:49,120 --> 00:21:52,159
storing a user's command history as a

00:21:51,039 --> 00:21:54,000
user cli

00:21:52,159 --> 00:21:55,840
in letting them search through it by

00:21:54,000 --> 00:21:58,080
maybe giving them a search interface or

00:21:55,840 --> 00:22:00,320
auto completions based on that history

00:21:58,080 --> 00:22:02,400
amd ramanujan talks about this in detail

00:22:00,320 --> 00:22:04,640
in his pycon 2017 talk which you can

00:22:02,400 --> 00:22:06,320
find in the resources

00:22:04,640 --> 00:22:07,840
he also talks about prompt toolkit which

00:22:06,320 --> 00:22:08,880
is a package written by jonathan

00:22:07,840 --> 00:22:10,320
slenders

00:22:08,880 --> 00:22:12,000
and it can help you implement some of

00:22:10,320 --> 00:22:13,120
the history and auto completion features

00:22:12,000 --> 00:22:15,600
we just talked about

00:22:13,120 --> 00:22:19,600
and also do a lot of other things it's

00:22:15,600 --> 00:22:21,200
used by ipython in all the dbcli tools

00:22:19,600 --> 00:22:23,039
finally we are at the end of our cli

00:22:21,200 --> 00:22:24,559
journey i hope you got a lot of touch

00:22:23,039 --> 00:22:26,159
points through the cli ecosystem that

00:22:24,559 --> 00:22:27,679
you can now explore further

00:22:26,159 --> 00:22:29,280
i hope you also get an understanding of

00:22:27,679 --> 00:22:31,840
how terminals and clies work

00:22:29,280 --> 00:22:33,360
and how to write skills using python

00:22:31,840 --> 00:22:35,200
this slide contains links to some

00:22:33,360 --> 00:22:37,360
resources mentioned throughout the talk

00:22:35,200 --> 00:22:39,039
in the slides are themselves available

00:22:37,360 --> 00:22:40,559
at the first link

00:22:39,039 --> 00:22:42,799
if you have any questions you can reach

00:22:40,559 --> 00:22:44,559
out to me on twitter vodx underscore ape

00:22:42,799 --> 00:22:46,720
or using the contact information on my

00:22:44,559 --> 00:22:48,559
website

00:22:46,720 --> 00:22:50,400
i also want to give a huge thank you to

00:22:48,559 --> 00:22:51,760
the pike online eu team for everything

00:22:50,400 --> 00:22:52,559
they've done to bring this conference

00:22:51,760 --> 00:22:54,559
online

00:22:52,559 --> 00:22:56,480
they absolutely deserve your thanks as

00:22:54,559 --> 00:22:57,760
will so be sure to let them know that

00:22:56,480 --> 00:22:58,480
you appreciate all the hard work they

00:22:57,760 --> 00:23:08,720
are doing

00:22:58,480 --> 00:23:10,799
see you all next year

00:23:08,720 --> 00:23:10,799

YouTube URL: https://www.youtube.com/watch?v=EAgF9wqD2wo


