Title: "What happens when you run manage.py test ?" - Adam Johnson (PyConline AU 2020)
Publication date: 2020-09-08
Playlist: PyConline AU 2020
Description: 
	Adam Johnson

https://2020.pycon.org.au/program/DQM9JQ

Testing frameworks do a lot of work for us, so much that they can even appear like magic. But if we go under the hood, we can find better ways of working with them. This talk looks at Django's testing framework and pytest together, so it can show the common features as well as the differences. The general test lifecycle will be examined, from start to finish. We'll then use this knowledge to write a couple of customizations.

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

Python, PyCon, PyConAU, PyConline

Sat Sep  5 16:35:00 2020 at Obvious
Captions: 
	00:00:03,600 --> 00:00:06,879
hello djangocon

00:00:04,799 --> 00:00:08,160
australia it's a pleasure to join you

00:00:06,879 --> 00:00:10,880
from the other side of the world

00:00:08,160 --> 00:00:13,759
in london england but due to the time

00:00:10,880 --> 00:00:15,839
zone shift i have pre-recorded this talk

00:00:13,759 --> 00:00:16,800
i'm adam johnson i'm a member of the

00:00:15,839 --> 00:00:19,600
django

00:00:16,800 --> 00:00:21,199
technical board um and i'm here today to

00:00:19,600 --> 00:00:22,800
talk about what happens when we run

00:00:21,199 --> 00:00:24,720
manage pi tests

00:00:22,800 --> 00:00:26,080
this is a topic i'm very interested in

00:00:24,720 --> 00:00:28,880
because i love testing

00:00:26,080 --> 00:00:30,320
i've written a book about it and if we

00:00:28,880 --> 00:00:33,439
dissect the test process

00:00:30,320 --> 00:00:33,439
we can customize it

00:00:33,600 --> 00:00:37,440
so you might be treating the test runner

00:00:35,680 --> 00:00:39,120
as a bit of a black box

00:00:37,440 --> 00:00:41,280
you write your tests you write these

00:00:39,120 --> 00:00:43,360
classes and these functions inside them

00:00:41,280 --> 00:00:45,600
and you know what's going on inside your

00:00:43,360 --> 00:00:47,039
tests and perhaps you understand a

00:00:45,600 --> 00:00:48,960
little bit about the help that's

00:00:47,039 --> 00:00:51,440
provided to you inside a test case

00:00:48,960 --> 00:00:52,160
but the test runner itself is a command

00:00:51,440 --> 00:00:55,280
you invoke

00:00:52,160 --> 00:00:57,600
and it outputs the results on the screen

00:00:55,280 --> 00:00:59,120
and does a bit of help for you but if

00:00:57,600 --> 00:00:59,760
you've never looked inside the code you

00:00:59,120 --> 00:01:01,280
might

00:00:59,760 --> 00:01:03,120
not even know anything about how it's

00:01:01,280 --> 00:01:06,240
working so

00:01:03,120 --> 00:01:09,200
this talk is going to open that up and

00:01:06,240 --> 00:01:09,200
take a look inside

00:01:09,280 --> 00:01:12,640
and why would you be interested in

00:01:11,520 --> 00:01:15,439
learning this

00:01:12,640 --> 00:01:16,400
well i i can draw an analogy with

00:01:15,439 --> 00:01:19,040
middleware

00:01:16,400 --> 00:01:20,159
so in before you knew middleware then

00:01:19,040 --> 00:01:22,880
you wouldn't have known

00:01:20,159 --> 00:01:24,799
how to change cookies set headers log

00:01:22,880 --> 00:01:28,000
every request going through your system

00:01:24,799 --> 00:01:29,920
or do any number of any fun things and

00:01:28,000 --> 00:01:31,840
so once you know the concept of midway

00:01:29,920 --> 00:01:33,680
you can unlock these use cases

00:01:31,840 --> 00:01:34,880
similarly when you know how the test

00:01:33,680 --> 00:01:37,119
runner is working

00:01:34,880 --> 00:01:38,159
you can unlock many different use cases

00:01:37,119 --> 00:01:39,600
perhaps some

00:01:38,159 --> 00:01:41,759
that you've sort of but never been able

00:01:39,600 --> 00:01:44,240
to implement like changing the way

00:01:41,759 --> 00:01:45,680
tests are loaded in your system uh

00:01:44,240 --> 00:01:47,119
restricting them or pulling them from

00:01:45,680 --> 00:01:49,520
different directories

00:01:47,119 --> 00:01:51,119
and changing your test settings without

00:01:49,520 --> 00:01:54,240
needing a separate

00:01:51,119 --> 00:01:54,960
settings file or putting in a blanket

00:01:54,240 --> 00:01:57,200
block or not

00:01:54,960 --> 00:01:58,719
all outgoing http requests so your test

00:01:57,200 --> 00:02:00,560
suite doesn't accidentally

00:01:58,719 --> 00:02:02,560
make unlocked calls to third-party

00:02:00,560 --> 00:02:04,240
services

00:02:02,560 --> 00:02:06,479
in this talk we're going to cover a

00:02:04,240 --> 00:02:08,640
particularly vital

00:02:06,479 --> 00:02:10,959
customization to the test runner and

00:02:08,640 --> 00:02:11,680
that is changing those boring dots ease

00:02:10,959 --> 00:02:15,040
and f's

00:02:11,680 --> 00:02:16,720
into fantastic color filled emojis

00:02:15,040 --> 00:02:18,640
so by the end of this talk we're going

00:02:16,720 --> 00:02:21,280
to have the test runner

00:02:18,640 --> 00:02:22,080
outputting all these explosive

00:02:21,280 --> 00:02:24,400
explosions

00:02:22,080 --> 00:02:26,319
crosses green check marks and other

00:02:24,400 --> 00:02:30,080
symbols

00:02:26,319 --> 00:02:32,400
let's get started we're going to first

00:02:30,080 --> 00:02:33,760
dissect a test run from the outside and

00:02:32,400 --> 00:02:35,599
look at its logs

00:02:33,760 --> 00:02:36,720
and for the purposes of keeping all

00:02:35,599 --> 00:02:37,200
about what's happening in the test

00:02:36,720 --> 00:02:38,560
runner

00:02:37,200 --> 00:02:41,280
rather than what's happening in the

00:02:38,560 --> 00:02:44,319
tests i've set up a simple project

00:02:41,280 --> 00:02:46,160
that contains only this one test case

00:02:44,319 --> 00:02:47,680
with this one test inside that does

00:02:46,160 --> 00:02:50,000
nothing

00:02:47,680 --> 00:02:52,800
if we run this we get some familiar

00:02:50,000 --> 00:02:54,800
looking log output

00:02:52,800 --> 00:02:56,080
and on the first line i run the command

00:02:54,800 --> 00:02:58,319
managed pi test

00:02:56,080 --> 00:02:59,840
and then we have lines at the start and

00:02:58,319 --> 00:03:00,640
end creating and destroying the test

00:02:59,840 --> 00:03:03,360
database

00:03:00,640 --> 00:03:04,000
and a dot for the symbol and a dot to

00:03:03,360 --> 00:03:07,440
represent

00:03:04,000 --> 00:03:09,040
the tests running we can investigate a

00:03:07,440 --> 00:03:09,920
little bit further than what we're

00:03:09,040 --> 00:03:12,319
seeing here

00:03:09,920 --> 00:03:14,879
by using verbose mode which we do by

00:03:12,319 --> 00:03:16,640
pausing dash v3 on the command line

00:03:14,879 --> 00:03:18,879
so when we do that we get a little bit

00:03:16,640 --> 00:03:20,720
more output and we can investigate it in

00:03:18,879 --> 00:03:22,640
more detail

00:03:20,720 --> 00:03:24,720
and so we've got that first line

00:03:22,640 --> 00:03:27,920
creating test database

00:03:24,720 --> 00:03:29,840
and your eye might be drawn

00:03:27,920 --> 00:03:31,760
to the opposite of it destroying the

00:03:29,840 --> 00:03:33,599
test database at the end

00:03:31,760 --> 00:03:35,440
with the verbose mode on we're now

00:03:33,599 --> 00:03:37,680
seeing that uh

00:03:35,440 --> 00:03:38,480
there's a path to the database file

00:03:37,680 --> 00:03:40,319
memory db

00:03:38,480 --> 00:03:42,239
and then a bit more that i've cropped

00:03:40,319 --> 00:03:45,680
off to the right

00:03:42,239 --> 00:03:47,440
and this project is using sql lite

00:03:45,680 --> 00:03:49,040
not something that everyone uses in

00:03:47,440 --> 00:03:50,319
deployment and therefore probably shown

00:03:49,040 --> 00:03:53,439
using tests

00:03:50,319 --> 00:03:55,360
and but if you do use sqlite then django

00:03:53,439 --> 00:03:57,439
will automatically swap to a memory

00:03:55,360 --> 00:03:59,920
based database for test running

00:03:57,439 --> 00:04:00,879
so that's about 10 times faster if

00:03:59,920 --> 00:04:05,040
you're using

00:04:00,879 --> 00:04:08,239
a traditional this server based

00:04:05,040 --> 00:04:10,959
database like mysql or postgres

00:04:08,239 --> 00:04:12,480
then it won't support a memory mode out

00:04:10,959 --> 00:04:14,239
of the box but you can

00:04:12,480 --> 00:04:17,280
put it on a memory based file store to

00:04:14,239 --> 00:04:20,400
gain the same speed difference

00:04:17,280 --> 00:04:22,960
and once django creates this test

00:04:20,400 --> 00:04:26,639
database for us

00:04:22,960 --> 00:04:29,040
it then migrates it and so we have the

00:04:26,639 --> 00:04:29,680
next series of output from operations to

00:04:29,040 --> 00:04:32,240
perform

00:04:29,680 --> 00:04:32,960
all the way down to no migrations to

00:04:32,240 --> 00:04:35,280
apply

00:04:32,960 --> 00:04:37,040
this is all the output coming from the

00:04:35,280 --> 00:04:39,440
migrate management command

00:04:37,040 --> 00:04:40,960
it's the same as we'd see as if we ran

00:04:39,440 --> 00:04:44,560
it on an empty database

00:04:40,960 --> 00:04:47,600
normally this app that i'm testing with

00:04:44,560 --> 00:04:48,720
it has no models no migrations and it's

00:04:47,600 --> 00:04:51,199
the only app

00:04:48,720 --> 00:04:52,160
so there's not much going on here in the

00:04:51,199 --> 00:04:54,560
output

00:04:52,160 --> 00:04:55,280
if we had many migrations we'd see one

00:04:54,560 --> 00:04:58,160
line

00:04:55,280 --> 00:04:58,800
of output per migration django will

00:04:58,160 --> 00:05:00,639
migrate

00:04:58,800 --> 00:05:02,400
all your test databases in projects

00:05:00,639 --> 00:05:03,759
using more than one database

00:05:02,400 --> 00:05:05,280
each of them will be created at the

00:05:03,759 --> 00:05:07,360
start destroyed at the end and then

00:05:05,280 --> 00:05:09,600
migrate will apply to all of them

00:05:07,360 --> 00:05:11,759
so again this is maybe a simpler project

00:05:09,600 --> 00:05:14,240
using only a single database

00:05:11,759 --> 00:05:17,039
following that output we have the system

00:05:14,240 --> 00:05:19,440
check identified no issues line

00:05:17,039 --> 00:05:21,280
this is django's system check framework

00:05:19,440 --> 00:05:23,199
which you may not have explicitly worked

00:05:21,280 --> 00:05:24,720
with but it's always there

00:05:23,199 --> 00:05:26,240
providing a bit of protection against

00:05:24,720 --> 00:05:28,880
misconfiguration

00:05:26,240 --> 00:05:29,680
it it performs a number of pre-flight

00:05:28,880 --> 00:05:32,160
checks

00:05:29,680 --> 00:05:33,440
in order to investigate how you've

00:05:32,160 --> 00:05:35,120
configured django

00:05:33,440 --> 00:05:37,919
and things that couldn't be done by a

00:05:35,120 --> 00:05:39,440
linter and need to be done at runtime

00:05:37,919 --> 00:05:41,919
and

00:05:39,440 --> 00:05:43,120
if you are writing tests that do this

00:05:41,919 --> 00:05:44,960
kind of thing it might be worth

00:05:43,120 --> 00:05:46,560
investigating writing your own system

00:05:44,960 --> 00:05:48,880
checks to do the same thing

00:05:46,560 --> 00:05:49,919
because they run first before tests ever

00:05:48,880 --> 00:05:52,000
get invoked

00:05:49,919 --> 00:05:53,840
so they can perfor and provide an extra

00:05:52,000 --> 00:05:55,919
level of protection before you go into

00:05:53,840 --> 00:05:57,759
expensive tests

00:05:55,919 --> 00:05:59,520
the next section in the output is the

00:05:57,759 --> 00:06:02,479
actual running of the tests

00:05:59,520 --> 00:06:03,520
in verbose mode we get one line per test

00:06:02,479 --> 00:06:06,720
with the whole

00:06:03,520 --> 00:06:07,680
test path spelled out and then its

00:06:06,720 --> 00:06:09,759
status

00:06:07,680 --> 00:06:11,360
which is here okay meaning the test

00:06:09,759 --> 00:06:12,240
passed otherwise it could be error or

00:06:11,360 --> 00:06:15,520
failure

00:06:12,240 --> 00:06:17,840
or one of the other modes following this

00:06:15,520 --> 00:06:18,639
we have the summary of the test run with

00:06:17,840 --> 00:06:20,319
a ruler

00:06:18,639 --> 00:06:21,759
and then the number of tests that run in

00:06:20,319 --> 00:06:23,520
the time period

00:06:21,759 --> 00:06:25,600
and if we had any errors or failures

00:06:23,520 --> 00:06:28,720
they'd be reported here in brackets

00:06:25,600 --> 00:06:32,000
there's a final status report saying

00:06:28,720 --> 00:06:33,600
okay or in or fail

00:06:32,000 --> 00:06:36,240
and then we have that line about

00:06:33,600 --> 00:06:38,319
destroying the test database

00:06:36,240 --> 00:06:39,440
so having read this log output we

00:06:38,319 --> 00:06:41,360
already have some idea

00:06:39,440 --> 00:06:44,080
of the steps the test runner must take

00:06:41,360 --> 00:06:46,840
so we can write these down in a list

00:06:44,080 --> 00:06:48,240
so step one would be to create the test

00:06:46,840 --> 00:06:50,800
databases

00:06:48,240 --> 00:06:52,560
step two would be to migrate them step

00:06:50,800 --> 00:06:55,199
three run the checks

00:06:52,560 --> 00:06:56,720
then run the tests themselves report on

00:06:55,199 --> 00:06:57,280
the test count and the successful

00:06:56,720 --> 00:07:00,639
failure

00:06:57,280 --> 00:07:01,039
and destroy the test databases so we now

00:07:00,639 --> 00:07:02,560
have

00:07:01,039 --> 00:07:04,560
a rough idea of what we're going to be

00:07:02,560 --> 00:07:08,319
looking for in the code so we can go

00:07:04,560 --> 00:07:10,319
and investigate it in more detail

00:07:08,319 --> 00:07:11,360
before we dive into the code it's worth

00:07:10,319 --> 00:07:13,840
noting the

00:07:11,360 --> 00:07:14,960
relationship between django and unit

00:07:13,840 --> 00:07:17,120
test

00:07:14,960 --> 00:07:18,240
django's test framework is not a thing

00:07:17,120 --> 00:07:20,880
in itself

00:07:18,240 --> 00:07:23,599
it's based upon unit test which is built

00:07:20,880 --> 00:07:26,400
into the python standard library

00:07:23,599 --> 00:07:26,800
unit test itself was based upon ideas

00:07:26,400 --> 00:07:29,520
from

00:07:26,800 --> 00:07:31,120
a library called junit a java unit

00:07:29,520 --> 00:07:33,360
testing library

00:07:31,120 --> 00:07:35,039
and that's why it has all this

00:07:33,360 --> 00:07:37,199
class-based arrangement

00:07:35,039 --> 00:07:39,840
these functions called assert equals in

00:07:37,199 --> 00:07:43,120
a non-pythonic camel case format

00:07:39,840 --> 00:07:44,800
and some other quirks and

00:07:43,120 --> 00:07:46,720
part of its design that we're going to

00:07:44,800 --> 00:07:50,160
be looking into was copied from

00:07:46,720 --> 00:07:52,800
jet unit the first place to start

00:07:50,160 --> 00:07:53,199
is the test management command whenever

00:07:52,800 --> 00:07:55,759
you run

00:07:53,199 --> 00:07:56,400
any management command in django it will

00:07:55,759 --> 00:07:58,720
look up

00:07:56,400 --> 00:08:01,520
a corresponding module in a management

00:07:58,720 --> 00:08:03,039
commands directory and run that

00:08:01,520 --> 00:08:05,039
for built-in management commands they

00:08:03,039 --> 00:08:07,280
live in django's

00:08:05,039 --> 00:08:09,480
core management commands directory and

00:08:07,280 --> 00:08:10,639
that's where we find test

00:08:09,480 --> 00:08:13,919
[Music]

00:08:10,639 --> 00:08:15,759
looking inside that management command

00:08:13,919 --> 00:08:18,319
it's not particularly interesting it's

00:08:15,759 --> 00:08:20,080
rather short it's less than 100 lines

00:08:18,319 --> 00:08:22,080
and i've simplified it and put up just

00:08:20,080 --> 00:08:25,280
the key lines here

00:08:22,080 --> 00:08:28,800
in the handle method and inside of that

00:08:25,280 --> 00:08:32,640
and there's references to get this

00:08:28,800 --> 00:08:36,080
testrunner class on the first line

00:08:32,640 --> 00:08:38,479
and then instantiate it and then

00:08:36,080 --> 00:08:40,240
call its run tests method with the set

00:08:38,479 --> 00:08:42,479
of test labels that have been passed in

00:08:40,240 --> 00:08:44,240
on the command line

00:08:42,479 --> 00:08:46,080
this returns a number of failures that

00:08:44,240 --> 00:08:48,240
are used to determine

00:08:46,080 --> 00:08:49,680
only the output code here the status

00:08:48,240 --> 00:08:53,279
command on the terminal

00:08:49,680 --> 00:08:54,000
if any of the tests fail given how short

00:08:53,279 --> 00:08:55,519
this is

00:08:54,000 --> 00:08:57,040
it seems worth it to track down this

00:08:55,519 --> 00:08:58,160
test runner class and find out what

00:08:57,040 --> 00:09:00,160
that's doing

00:08:58,160 --> 00:09:02,160
and this leads us to a class called

00:09:00,160 --> 00:09:04,320
discover runner

00:09:02,160 --> 00:09:05,279
discover runner is the name of this test

00:09:04,320 --> 00:09:08,399
runner class

00:09:05,279 --> 00:09:10,480
that's built into django it's

00:09:08,399 --> 00:09:12,240
not called test runner for some reason i

00:09:10,480 --> 00:09:13,120
think it was due to a change in test

00:09:12,240 --> 00:09:16,720
discovery

00:09:13,120 --> 00:09:20,080
in django 1.6 or something like that

00:09:16,720 --> 00:09:22,640
and here's how the class starts and

00:09:20,080 --> 00:09:24,480
with a number of class level attributes

00:09:22,640 --> 00:09:26,240
that point to other classes

00:09:24,480 --> 00:09:28,480
and we can see three of these are part

00:09:26,240 --> 00:09:30,320
of unit test and there's this parallel

00:09:28,480 --> 00:09:32,000
test suite class

00:09:30,320 --> 00:09:34,160
this lives inside django's test

00:09:32,000 --> 00:09:36,000
framework and it's kind of an extension

00:09:34,160 --> 00:09:37,839
to that test suite class that is

00:09:36,000 --> 00:09:40,000
referenced above

00:09:37,839 --> 00:09:41,680
so we've got one class that references

00:09:40,000 --> 00:09:43,600
several other classes

00:09:41,680 --> 00:09:45,440
why don't we dive into the run tests

00:09:43,600 --> 00:09:48,160
method that we saw to see how

00:09:45,440 --> 00:09:48,160
they get used

00:09:48,720 --> 00:09:52,399
so i've simplified this method again

00:09:51,600 --> 00:09:55,760
just to show

00:09:52,399 --> 00:10:01,760
the main details of it and it

00:09:55,760 --> 00:10:04,320
just cause to simplify the main details

00:10:01,760 --> 00:10:05,600
it calls all these steps in order and

00:10:04,320 --> 00:10:07,600
some of these we can already see

00:10:05,600 --> 00:10:10,399
correspond to their steps

00:10:07,600 --> 00:10:11,600
in our checklist that we wrote earlier

00:10:10,399 --> 00:10:14,000
so we've got this

00:10:11,600 --> 00:10:14,959
get databases set databases pair of

00:10:14,000 --> 00:10:17,839
lines

00:10:14,959 --> 00:10:19,760
and the get databases line is something

00:10:17,839 --> 00:10:20,480
that we maybe didn't consider but django

00:10:19,760 --> 00:10:23,279
will only

00:10:20,480 --> 00:10:23,760
set up test databases if tests require

00:10:23,279 --> 00:10:25,680
them

00:10:23,760 --> 00:10:27,040
and only set up those databases that are

00:10:25,680 --> 00:10:29,760
required so

00:10:27,040 --> 00:10:32,240
this checks which databases are needed

00:10:29,760 --> 00:10:33,680
and then only sets those up the setup

00:10:32,240 --> 00:10:35,440
databases the

00:10:33,680 --> 00:10:39,279
function is actually creating the

00:10:35,440 --> 00:10:41,040
database and calling migrate

00:10:39,279 --> 00:10:42,800
the system checks are run through this

00:10:41,040 --> 00:10:44,800
run checks method

00:10:42,800 --> 00:10:47,279
the tests themselves are run through run

00:10:44,800 --> 00:10:49,360
sweeps which we'll look into a bit later

00:10:47,279 --> 00:10:50,800
and there's also the teardown databases

00:10:49,360 --> 00:10:53,440
corresponding to the log line that we

00:10:50,800 --> 00:10:53,440
saw earlier

00:10:53,680 --> 00:10:59,040
the final return value from this

00:10:56,720 --> 00:11:00,000
method is coming through sweet result

00:10:59,040 --> 00:11:03,279
and that's the number

00:11:00,000 --> 00:11:05,040
of failures variable that is used up in

00:11:03,279 --> 00:11:07,600
the test management command to determine

00:11:05,040 --> 00:11:09,519
the exit

00:11:07,600 --> 00:11:11,360
two other methods that perhaps we hadn't

00:11:09,519 --> 00:11:13,600
considered from the logs were

00:11:11,360 --> 00:11:15,040
set up test environment and down test

00:11:13,600 --> 00:11:17,200
environment

00:11:15,040 --> 00:11:18,320
these aren't very big they're changing a

00:11:17,200 --> 00:11:21,120
few settings

00:11:18,320 --> 00:11:22,959
to be appropriate for tests and

00:11:21,120 --> 00:11:24,880
controlling a few features such as the

00:11:22,959 --> 00:11:27,120
testing mail outbox

00:11:24,880 --> 00:11:28,560
which you may have used to detect

00:11:27,120 --> 00:11:31,360
whether a function

00:11:28,560 --> 00:11:32,000
sends an email there's two methods here

00:11:31,360 --> 00:11:34,160
which i'd

00:11:32,000 --> 00:11:35,839
like to dive into that's the build suite

00:11:34,160 --> 00:11:38,640
and run suite methods

00:11:35,839 --> 00:11:43,279
these are where django hands off work to

00:11:38,640 --> 00:11:45,600
unit test so first looking at build

00:11:43,279 --> 00:11:45,600
suite

00:11:47,120 --> 00:11:50,320
again this is simplify for readability

00:11:49,600 --> 00:11:54,480
but the

00:11:50,320 --> 00:11:57,360
core skeleton is there the first line

00:11:54,480 --> 00:11:58,480
is calling the test suite attribute this

00:11:57,360 --> 00:12:01,040
is one of those attributes

00:11:58,480 --> 00:12:01,600
pointing off to a class inside unit test

00:12:01,040 --> 00:12:03,920
so

00:12:01,600 --> 00:12:05,279
this line basically instantiates that

00:12:03,920 --> 00:12:08,079
class

00:12:05,279 --> 00:12:09,680
and once we have a set of test labels

00:12:08,079 --> 00:12:10,320
which if they weren't passed in by the

00:12:09,680 --> 00:12:12,320
user

00:12:10,320 --> 00:12:13,920
django defaults to finding all tests in

00:12:12,320 --> 00:12:16,639
the current directory

00:12:13,920 --> 00:12:18,160
and these are looped over and then the

00:12:16,639 --> 00:12:21,440
test loader class

00:12:18,160 --> 00:12:23,040
that we also saw is used this thing

00:12:21,440 --> 00:12:25,440
doesn't get instantiated

00:12:23,040 --> 00:12:26,959
that its class level method load tests

00:12:25,440 --> 00:12:30,959
from name is called

00:12:26,959 --> 00:12:33,839
um and that method returns a

00:12:30,959 --> 00:12:35,680
list of tests and then the sweeps object

00:12:33,839 --> 00:12:37,120
acts as a container for all the tests

00:12:35,680 --> 00:12:40,160
that have been found

00:12:37,120 --> 00:12:40,720
and the ad test methods is called over

00:12:40,160 --> 00:12:42,880
and over

00:12:40,720 --> 00:12:44,160
to add more tests into the suite until

00:12:42,880 --> 00:12:47,839
we've collected everything

00:12:44,160 --> 00:12:50,000
that was referred to by label

00:12:47,839 --> 00:12:50,880
that parallel test suite class we saw

00:12:50,000 --> 00:12:53,920
earlier

00:12:50,880 --> 00:12:55,680
is used here and

00:12:53,920 --> 00:12:56,959
acts as a wrapper to the unit test test

00:12:55,680 --> 00:12:59,680
suite class

00:12:56,959 --> 00:13:01,120
it has similar behavior but it's

00:12:59,680 --> 00:13:02,079
concerned with handling multiple

00:13:01,120 --> 00:13:04,839
processes

00:13:02,079 --> 00:13:07,839
to run the tests rather than a single

00:13:04,839 --> 00:13:07,839
process

00:13:08,000 --> 00:13:11,040
so that's build suite let's look at the

00:13:10,000 --> 00:13:13,839
other method

00:13:11,040 --> 00:13:15,279
run suite and this is kind of where the

00:13:13,839 --> 00:13:17,440
magic happens

00:13:15,279 --> 00:13:19,680
and django has set everything up in the

00:13:17,440 --> 00:13:21,200
test environment found all the tests

00:13:19,680 --> 00:13:23,200
and it hands off to unit tests to

00:13:21,200 --> 00:13:25,440
actually run those tests

00:13:23,200 --> 00:13:26,240
there are a couple of sub methods it's

00:13:25,440 --> 00:13:29,120
calling

00:13:26,240 --> 00:13:29,760
the first is get test runner quarks and

00:13:29,120 --> 00:13:31,760
that

00:13:29,760 --> 00:13:33,600
is basically building up a dictionary of

00:13:31,760 --> 00:13:35,920
keyword arguments to pass through to the

00:13:33,600 --> 00:13:37,519
testrunner class

00:13:35,920 --> 00:13:39,360
this is needed because it customizes

00:13:37,519 --> 00:13:40,560
some stuff about that unit as test

00:13:39,360 --> 00:13:43,360
runner

00:13:40,560 --> 00:13:45,839
and here's where we construct the test

00:13:43,360 --> 00:13:49,120
runner from the class level attribute

00:13:45,839 --> 00:13:50,800
using those keyword arguments it's worth

00:13:49,120 --> 00:13:53,040
pointing out here there are really two

00:13:50,800 --> 00:13:55,360
distinct concepts of a test runner

00:13:53,040 --> 00:13:57,760
inside of django's test framework

00:13:55,360 --> 00:13:59,279
there's its own test runner that's this

00:13:57,760 --> 00:14:00,240
discover runner class we're looking

00:13:59,279 --> 00:14:02,000
through at the moment

00:14:00,240 --> 00:14:04,639
and then there's the unit test test

00:14:02,000 --> 00:14:05,920
runner class perhaps django's class

00:14:04,639 --> 00:14:09,120
would have been better named

00:14:05,920 --> 00:14:11,279
test coordinator or something similar to

00:14:09,120 --> 00:14:13,279
indicate its greater responsibilities

00:14:11,279 --> 00:14:14,720
than the unit test test runner

00:14:13,279 --> 00:14:17,040
but we're probably not going to change

00:14:14,720 --> 00:14:19,279
that now

00:14:17,040 --> 00:14:21,600
so we've now seen how discover runner

00:14:19,279 --> 00:14:24,320
uses all those classes it refers to

00:14:21,600 --> 00:14:26,560
to hand off work to unit test it's worth

00:14:24,320 --> 00:14:29,600
diving into this test runner class

00:14:26,560 --> 00:14:31,199
to see what that's doing so in unit test

00:14:29,600 --> 00:14:34,800
this is actually called

00:14:31,199 --> 00:14:35,519
text test running and the class starts

00:14:34,800 --> 00:14:39,360
like this

00:14:35,519 --> 00:14:42,079
again a bit simplified and it itself

00:14:39,360 --> 00:14:42,880
has a class level attribute result class

00:14:42,079 --> 00:14:44,880
referring to

00:14:42,880 --> 00:14:47,040
another class so we've got the same

00:14:44,880 --> 00:14:49,760
pattern we saw in discover runner with

00:14:47,040 --> 00:14:51,760
classes referring to other classes

00:14:49,760 --> 00:14:53,680
and it's slightly different to the way

00:14:51,760 --> 00:14:54,480
discover runner works because you can

00:14:53,680 --> 00:14:56,240
pass in

00:14:54,480 --> 00:14:58,480
an alternative result class to its

00:14:56,240 --> 00:15:02,399
constructor this is actually something

00:14:58,480 --> 00:15:02,399
django does as we'll see in a bit

00:15:02,480 --> 00:15:06,560
if we were to map out everything we've

00:15:04,320 --> 00:15:08,560
explored it would look a bit like this

00:15:06,560 --> 00:15:10,000
we have the test command which hands off

00:15:08,560 --> 00:15:12,079
to discover runner

00:15:10,000 --> 00:15:13,839
discover runner refers to three

00:15:12,079 --> 00:15:16,079
different classes within unit test

00:15:13,839 --> 00:15:17,199
that's the test suite test loader text

00:15:16,079 --> 00:15:19,600
test runner

00:15:17,199 --> 00:15:21,360
and the text test runner itself has a

00:15:19,600 --> 00:15:25,279
reference to another unit tests

00:15:21,360 --> 00:15:28,480
class the default is text test result

00:15:25,279 --> 00:15:30,000
for our emoji customization

00:15:28,480 --> 00:15:31,680
you might have already guessed we'd want

00:15:30,000 --> 00:15:32,399
to change something to do with the test

00:15:31,680 --> 00:15:34,480
runner or the

00:15:32,399 --> 00:15:36,959
test result as this is when the output

00:15:34,480 --> 00:15:38,399
is made and indeed it's inside the text

00:15:36,959 --> 00:15:41,839
test result class

00:15:38,399 --> 00:15:41,839
that the actual output is made

00:15:42,240 --> 00:15:46,000
these classes use the name text to

00:15:44,320 --> 00:15:48,240
represent that they output

00:15:46,000 --> 00:15:49,519
human readable text to the screen there

00:15:48,240 --> 00:15:52,639
are alternatives

00:15:49,519 --> 00:15:53,680
like using an xml file output that your

00:15:52,639 --> 00:15:56,000
ci

00:15:53,680 --> 00:15:58,079
software can use to display the list of

00:15:56,000 --> 00:15:59,920
run tests

00:15:58,079 --> 00:16:01,360
so how are we going to customize the

00:15:59,920 --> 00:16:02,800
test process

00:16:01,360 --> 00:16:04,720
well we can only really affect the

00:16:02,800 --> 00:16:07,360
things on django's side because there

00:16:04,720 --> 00:16:10,240
aren't settings that affect unit test

00:16:07,360 --> 00:16:12,240
and that gives us two options the first

00:16:10,240 --> 00:16:13,440
is to override that test management

00:16:12,240 --> 00:16:15,440
command

00:16:13,440 --> 00:16:16,639
as we saw though it's quite short and

00:16:15,440 --> 00:16:18,480
it's not worth

00:16:16,639 --> 00:16:19,839
swapping out because most of the work is

00:16:18,480 --> 00:16:22,320
in the test running

00:16:19,839 --> 00:16:23,600
and so for this django provides the test

00:16:22,320 --> 00:16:25,680
runner setting

00:16:23,600 --> 00:16:27,440
which point which you can use to point

00:16:25,680 --> 00:16:30,000
to an alternative

00:16:27,440 --> 00:16:31,680
test runner class and it's a django test

00:16:30,000 --> 00:16:34,880
runner or test coordinator

00:16:31,680 --> 00:16:36,240
as i perhaps like to call it so let's

00:16:34,880 --> 00:16:38,079
try that

00:16:36,240 --> 00:16:40,320
let's make the simplest possible

00:16:38,079 --> 00:16:41,279
customization and create a very fast

00:16:40,320 --> 00:16:43,440
test runner

00:16:41,279 --> 00:16:44,399
that skips all of that work that we've

00:16:43,440 --> 00:16:47,920
been looking at

00:16:44,399 --> 00:16:49,519
and simply outputs an a plus result

00:16:47,920 --> 00:16:51,440
this will make our tests execute

00:16:49,519 --> 00:16:54,880
instantly and might impress

00:16:51,440 --> 00:16:56,000
some people our first step would be to

00:16:54,880 --> 00:16:59,279
subclass

00:16:56,000 --> 00:16:59,680
discover runner in a module here i've

00:16:59,279 --> 00:17:02,720
used

00:16:59,680 --> 00:17:05,280
example slash test dot pi

00:17:02,720 --> 00:17:06,559
and within that class we're going to

00:17:05,280 --> 00:17:08,559
make one

00:17:06,559 --> 00:17:10,000
straightforward replacement of the run

00:17:08,559 --> 00:17:13,919
tests method

00:17:10,000 --> 00:17:16,799
we'll replace it with this four line

00:17:13,919 --> 00:17:18,000
very fast function it takes any number

00:17:16,799 --> 00:17:21,039
of arguments and keyword

00:17:18,000 --> 00:17:23,039
arguments they're not used it prints out

00:17:21,039 --> 00:17:24,880
a message that all the tests have passed

00:17:23,039 --> 00:17:26,880
and you score an a plus

00:17:24,880 --> 00:17:28,880
and then it returns zero failures so

00:17:26,880 --> 00:17:32,960
that the test management command

00:17:28,880 --> 00:17:35,520
exits with a success code

00:17:32,960 --> 00:17:37,440
once we've set that up we can swap it in

00:17:35,520 --> 00:17:39,360
using that test runner setting

00:17:37,440 --> 00:17:42,080
pointing to the class using the dotted

00:17:39,360 --> 00:17:45,039
string format

00:17:42,080 --> 00:17:47,200
then when we run the tests we get this a

00:17:45,039 --> 00:17:48,240
plus message everything looks great and

00:17:47,200 --> 00:17:51,679
the tests are now

00:17:48,240 --> 00:17:53,840
as fast as they possibly could be

00:17:51,679 --> 00:17:55,919
so that's a trivial example let's move

00:17:53,840 --> 00:17:56,480
on to the moment you've all been waiting

00:17:55,919 --> 00:18:00,880
for

00:17:56,480 --> 00:18:02,559
how to get emoji on your screen

00:18:00,880 --> 00:18:04,960
we're going to follow the same plan

00:18:02,559 --> 00:18:06,960
again to override discover runner

00:18:04,960 --> 00:18:08,960
but then we also have to override that

00:18:06,960 --> 00:18:10,240
result class we saw on the unit test

00:18:08,960 --> 00:18:13,360
side of the diagram

00:18:10,240 --> 00:18:15,919
with our own subclass

00:18:13,360 --> 00:18:16,799
so one method we didn't peek inside

00:18:15,919 --> 00:18:18,799
before

00:18:16,799 --> 00:18:20,480
on the discover runner class is this get

00:18:18,799 --> 00:18:23,200
test runner quarks

00:18:20,480 --> 00:18:24,160
method and this is the full

00:18:23,200 --> 00:18:26,240
implementation

00:18:24,160 --> 00:18:27,440
it's passing through a few options from

00:18:26,240 --> 00:18:30,799
the command line

00:18:27,440 --> 00:18:33,679
but also it's passing this result class

00:18:30,799 --> 00:18:35,760
here as a keyword argument constructing

00:18:33,679 --> 00:18:37,280
the text test runner from inside unit

00:18:35,760 --> 00:18:39,200
test

00:18:37,280 --> 00:18:40,799
so it looks like django is already

00:18:39,200 --> 00:18:43,120
replacing this

00:18:40,799 --> 00:18:46,160
and if we dive into the get result class

00:18:43,120 --> 00:18:46,160
method we'll see how

00:18:46,480 --> 00:18:49,600
this is the full method again

00:18:48,720 --> 00:18:51,679
essentially

00:18:49,600 --> 00:18:53,679
there are two options to django's test

00:18:51,679 --> 00:18:54,480
runner that change the way it performs

00:18:53,679 --> 00:18:56,720
output

00:18:54,480 --> 00:18:57,919
you've got the debug sql option that

00:18:56,720 --> 00:19:00,720
will output

00:18:57,919 --> 00:19:01,919
every sql query that gets run and you've

00:19:00,720 --> 00:19:04,799
got the pdb option

00:19:01,919 --> 00:19:05,600
that will launch the python debugger or

00:19:04,799 --> 00:19:08,720
pdb

00:19:05,600 --> 00:19:10,320
whenever a test fails this method

00:19:08,720 --> 00:19:11,679
implicitly returns none

00:19:10,320 --> 00:19:13,440
at the end because it doesn't have a

00:19:11,679 --> 00:19:15,120
final return statement

00:19:13,440 --> 00:19:17,039
and that none is replaced with the

00:19:15,120 --> 00:19:20,080
default in the test

00:19:17,039 --> 00:19:23,760
runner class from unit test so

00:19:20,080 --> 00:19:26,480
our idea to customize the output always

00:19:23,760 --> 00:19:29,600
is to detect that num and then replace

00:19:26,480 --> 00:19:29,600
it with our own subclass

00:19:30,640 --> 00:19:34,799
so here's what our custom testrunner

00:19:32,720 --> 00:19:38,320
class could look like

00:19:34,799 --> 00:19:41,039
we call the super get result class

00:19:38,320 --> 00:19:41,840
in our own get result class method and

00:19:41,039 --> 00:19:44,320
if that

00:19:41,840 --> 00:19:44,960
happens to return none we actually

00:19:44,320 --> 00:19:48,400
return

00:19:44,960 --> 00:19:50,720
our emoji test result class

00:19:48,400 --> 00:19:52,160
so what should go inside our emoji test

00:19:50,720 --> 00:19:53,679
result class

00:19:52,160 --> 00:19:55,679
well for this we would need to do a bit

00:19:53,679 --> 00:19:56,480
more digging to find out what's inside

00:19:55,679 --> 00:19:59,679
the default

00:19:56,480 --> 00:20:03,360
text test result columns but i can

00:19:59,679 --> 00:20:05,120
show you the start so we'd want to

00:20:03,360 --> 00:20:05,600
inherit from that just as we inherit

00:20:05,120 --> 00:20:07,919
from

00:20:05,600 --> 00:20:10,720
discover runner and then swap out just

00:20:07,919 --> 00:20:13,600
part of the implementation

00:20:10,720 --> 00:20:15,360
this class implements both the default

00:20:13,600 --> 00:20:17,679
and verbose output

00:20:15,360 --> 00:20:20,240
that is the single dot or the whole line

00:20:17,679 --> 00:20:22,720
of output per test

00:20:20,240 --> 00:20:24,640
inside it's init it sets a variable

00:20:22,720 --> 00:20:26,159
called dots to true if it's meant to use

00:20:24,640 --> 00:20:29,520
the dot style

00:20:26,159 --> 00:20:31,679
and here we can take that variable and

00:20:29,520 --> 00:20:33,280
assign it to a different instance

00:20:31,679 --> 00:20:34,880
variable called emojis

00:20:33,280 --> 00:20:36,960
so that we know if we're meant to

00:20:34,880 --> 00:20:39,360
display emojis

00:20:36,960 --> 00:20:40,480
and then in a hook method like this add

00:20:39,360 --> 00:20:44,559
success

00:20:40,480 --> 00:20:46,240
we can output the success emoji

00:20:44,559 --> 00:20:48,240
there's one hook method for every

00:20:46,240 --> 00:20:50,880
possible test result

00:20:48,240 --> 00:20:51,679
so you've got success failure unexpected

00:20:50,880 --> 00:20:54,159
success

00:20:51,679 --> 00:20:55,760
unexpected failure etc and that's why

00:20:54,159 --> 00:20:59,120
i've not shown them on this slide

00:20:55,760 --> 00:21:00,240
but they're all in the example inside

00:20:59,120 --> 00:21:03,280
the repo for this

00:21:00,240 --> 00:21:05,200
talk they'll post the link for later so

00:21:03,280 --> 00:21:07,520
having set the testrunner setting

00:21:05,200 --> 00:21:08,400
to point to our custom discover runner

00:21:07,520 --> 00:21:10,559
subclass

00:21:08,400 --> 00:21:11,220
we can run the tests and get the emoji

00:21:10,559 --> 00:21:13,280
output

00:21:11,220 --> 00:21:17,280
[Music]

00:21:13,280 --> 00:21:19,600
that's a lot more colorful

00:21:17,280 --> 00:21:20,480
so having taken a tour of the test

00:21:19,600 --> 00:21:23,440
runner

00:21:20,480 --> 00:21:26,159
architecture we can now think about some

00:21:23,440 --> 00:21:28,000
of the problems with customizing it

00:21:26,159 --> 00:21:29,520
this method of classes referring to

00:21:28,000 --> 00:21:31,840
other classes is simple

00:21:29,520 --> 00:21:33,679
and not too hard to debug but it becomes

00:21:31,840 --> 00:21:36,640
rather limited

00:21:33,679 --> 00:21:38,880
very quickly imagine if we tried to

00:21:36,640 --> 00:21:42,159
implement emoji output on top of

00:21:38,880 --> 00:21:44,880
the debug sql and pdb output options

00:21:42,159 --> 00:21:46,799
provided by django

00:21:44,880 --> 00:21:49,039
those are provided in separate classes

00:21:46,799 --> 00:21:51,679
to our emoji test result class

00:21:49,039 --> 00:21:53,600
so we need to build other subclasses

00:21:51,679 --> 00:21:56,080
that use multiple inheritance to put

00:21:53,600 --> 00:21:58,400
them all together

00:21:56,080 --> 00:22:00,799
and this is like a general problem and

00:21:58,400 --> 00:22:03,440
any of those pieces from unit tests

00:22:00,799 --> 00:22:04,640
or django's discover rhinoclass itself

00:22:03,440 --> 00:22:06,480
that we swapped out

00:22:04,640 --> 00:22:08,480
if we wanted to build pull in two

00:22:06,480 --> 00:22:09,600
different sets of customizations

00:22:08,480 --> 00:22:12,080
that would need to be done through

00:22:09,600 --> 00:22:14,159
multiple inheritance so this is a

00:22:12,080 --> 00:22:17,360
starter program based on inheritance

00:22:14,159 --> 00:22:20,400
rather than composition

00:22:17,360 --> 00:22:22,080
because this design is not composable

00:22:20,400 --> 00:22:23,679
there aren't really any plugins out

00:22:22,080 --> 00:22:25,440
there installing

00:22:23,679 --> 00:22:27,280
other people's plugins means a lot of

00:22:25,440 --> 00:22:30,000
facts with these classes and there's no

00:22:27,280 --> 00:22:33,280
guarantee that they're compatible

00:22:30,000 --> 00:22:35,919
i know of only two extensions that are

00:22:33,280 --> 00:22:38,400
used with django's test framework

00:22:35,919 --> 00:22:40,000
one is called unit test xml reporting

00:22:38,400 --> 00:22:43,360
and this is used on django's own

00:22:40,000 --> 00:22:47,440
ci system this changes the output

00:22:43,360 --> 00:22:49,280
uh to record an xml file alongside the

00:22:47,440 --> 00:22:52,640
normal text based output

00:22:49,280 --> 00:22:55,600
so the ci system jenkins can

00:22:52,640 --> 00:22:56,880
make a report upon the status of the

00:22:55,600 --> 00:22:59,039
tests

00:22:56,880 --> 00:23:01,520
another one is django slow tests and

00:22:59,039 --> 00:23:05,039
this adds a piece of output at the end

00:23:01,520 --> 00:23:07,760
to record which tests were the slowest

00:23:05,039 --> 00:23:09,039
so you know where to start optimizing

00:23:07,760 --> 00:23:11,360
but i'm not aware

00:23:09,039 --> 00:23:13,760
of any ability to combine them together

00:23:11,360 --> 00:23:16,000
without performing a lot of

00:23:13,760 --> 00:23:18,159
class surgery and replacing different

00:23:16,000 --> 00:23:20,080
attributes inside of the discover runner

00:23:18,159 --> 00:23:21,919
doing multiple inheritance perhaps on

00:23:20,080 --> 00:23:23,120
several of these different pieces and

00:23:21,919 --> 00:23:25,760
then there's no guarantee that they'd

00:23:23,120 --> 00:23:25,760
work together

00:23:26,799 --> 00:23:32,320
so what is the alternative and the

00:23:29,840 --> 00:23:34,880
alternative would be a system based upon

00:23:32,320 --> 00:23:36,080
hooks like functions that fire at

00:23:34,880 --> 00:23:39,360
different points

00:23:36,080 --> 00:23:40,400
somewhat somewhat similar to django's

00:23:39,360 --> 00:23:43,520
signals

00:23:40,400 --> 00:23:47,120
and indeed this is how pi test operates

00:23:43,520 --> 00:23:49,360
and it has 20 or more different hooks

00:23:47,120 --> 00:23:51,520
that will fire all relevant functions at

00:23:49,360 --> 00:23:53,840
each point in the testing process

00:23:51,520 --> 00:23:55,760
and because of its hooks infrastructure

00:23:53,840 --> 00:23:57,760
and the ability to compose things there

00:23:55,760 --> 00:24:00,720
is a flourishing ecosystem

00:23:57,760 --> 00:24:02,159
over 700 plug-ins are reported right now

00:24:00,720 --> 00:24:05,360
i'm the author of a few of those

00:24:02,159 --> 00:24:06,559
and it's quite fun to work with so if

00:24:05,360 --> 00:24:08,240
you are looking to

00:24:06,559 --> 00:24:09,600
improve your test runner and don't want

00:24:08,240 --> 00:24:13,520
to do some of this work

00:24:09,600 --> 00:24:13,520
then do look into pi test

00:24:14,159 --> 00:24:18,799
and nothing remains but for me to say

00:24:16,080 --> 00:24:21,919
thank you for listening to me and

00:24:18,799 --> 00:24:23,760
here are my details adam johnson at adam

00:24:21,919 --> 00:24:26,640
chains on github or twitter

00:24:23,760 --> 00:24:28,080
that's me adamj.eu that's also my site

00:24:26,640 --> 00:24:30,320
and where you can find out about

00:24:28,080 --> 00:24:31,520
uh other blog posts there'll be a blog

00:24:30,320 --> 00:24:33,279
post of this talk

00:24:31,520 --> 00:24:34,640
and also my book on speeding up your

00:24:33,279 --> 00:24:36,559
django tests

00:24:34,640 --> 00:24:38,640
and this github link which i'll paste in

00:24:36,559 --> 00:24:39,840
the chat is where i'm hosting the slides

00:24:38,640 --> 00:24:41,760
and the full example

00:24:39,840 --> 00:24:42,960
for emoji output that you can copy into

00:24:41,760 --> 00:24:47,840
your project

00:24:42,960 --> 00:24:47,840

YouTube URL: https://www.youtube.com/watch?v=FP1Wxdwh3YE


