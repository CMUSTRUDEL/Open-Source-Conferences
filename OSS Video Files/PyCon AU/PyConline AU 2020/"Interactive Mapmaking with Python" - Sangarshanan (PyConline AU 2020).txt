Title: "Interactive Mapmaking with Python" - Sangarshanan (PyConline AU 2020)
Publication date: 2020-09-08
Playlist: PyConline AU 2020
Description: 
	Sangarshanan

https://2020.pycon.org.au/program/DVV7W8

1. Introduction (2 mins)
     * Who am I?
     * Setting the expectations
1. Working with Geodataframes (5 mins) 
     * Reading Spatial data as a GeoDataframe
     * The awesomeness of GeoDataframes (An overview of some of the amazing things you can do with a single line of code eg: Spatial joins, Manipulations and transformations)
     * Now that we has established our love for geopandas lets map geodataframes 
1. Let the Mapmaking begin (10 mins)
     * Basic Non-Interactive maps with Geopandas and Matplotlib 
     * Creating basic interactive maps with Folium, Plotly & Kepler (GeoJSONPlots, Clustermaps, Heatmaps, H3gridmaps)
          - Conforming geodataframes to a format accepted by these libraries (usually JSON or a list of lists)
          - Setting the right parameters for different plots 
          - Jazzing up the maps with additional layers, custom styles, tooltips, popups, colors etc 
          - Spatiotemporal Maps with Kepler.gl + Jupyter for handling huge datasets with ease
          - Can we make it any easier ?
     * Why can't making interactive maps be as easy as gdf.folium.plot()? 
1. Enter Geopatra (8 mins)
     * The need for Geopatra (Could it be any Easier and Faster)
     * Wrapping up popular mapmaking libraries for GeoDataframes
     * Create interactive maps with just a single line 
     * Future work and Discussion :)

More Info:

Normally mapping a geodataframe with folium

```
import folium
import geopandas
world = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))
m = folium.Map(location = [4,10], zoom_start = 3)
folium.GeoJson(world.__geo_interface__).add_to(m)
```

With Geopatra all the parameters you set with folium become optional so you don't have to care about folium

```
import geopatra
m = world.folium.plot()
```

Github: https://github.com/Sangarshanan/geopatra

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

Python, PyCon, PyConAU, PyConline

Fri Sep  4 17:10:00 2020 at Curlyboi
Captions: 
	00:00:00,080 --> 00:00:03,919
thank you welcome back to data science

00:00:02,320 --> 00:00:06,480
analytics track where everything is

00:00:03,919 --> 00:00:09,040
going perfectly fine thank you very much

00:00:06,480 --> 00:00:09,840
and we have uh sanger shannon speaking

00:00:09,040 --> 00:00:12,320
next

00:00:09,840 --> 00:00:14,160
about interactive map making with python

00:00:12,320 --> 00:00:15,599
uh sandra shannon describes himself as a

00:00:14,160 --> 00:00:17,279
professional mean connoisseur and

00:00:15,599 --> 00:00:18,960
part-time developer

00:00:17,279 --> 00:00:21,279
or a professional developer and

00:00:18,960 --> 00:00:24,480
part-time influencer you decide

00:00:21,279 --> 00:00:27,680
over to you please

00:00:24,480 --> 00:00:31,359
hey thank you for that lovely

00:00:27,680 --> 00:00:33,600
introduction welcome everyone uh

00:00:31,359 --> 00:00:35,600
you know we are doing fine now uh

00:00:33,600 --> 00:00:37,920
welcome to my talk it's interactive map

00:00:35,600 --> 00:00:41,440
making with python welcome everyone to

00:00:37,920 --> 00:00:42,559
pycon australia yes that was a joke

00:00:41,440 --> 00:00:44,879
thank you very much

00:00:42,559 --> 00:00:45,600
uh so today we're going to talk about uh

00:00:44,879 --> 00:00:50,399
making

00:00:45,600 --> 00:00:50,399
interactive maps uh with python uh

00:00:50,640 --> 00:00:55,440
and my name is sangashnin and uh i'm

00:00:53,360 --> 00:00:58,160
gonna talk to you about it

00:00:55,440 --> 00:00:59,359
so i'm gonna begin by proclaiming my

00:00:58,160 --> 00:01:01,760
love for pandas

00:00:59,359 --> 00:01:03,120
and data frames so whenever i want to

00:01:01,760 --> 00:01:05,920
like work with data i

00:01:03,120 --> 00:01:06,400
immediately go to pandas uh and a lot of

00:01:05,920 --> 00:01:08,159
us do

00:01:06,400 --> 00:01:10,159
and it's for a reason you know pandas is

00:01:08,159 --> 00:01:13,200
amazing uh it gives you

00:01:10,159 --> 00:01:16,240
an amazing

00:01:13,200 --> 00:01:18,720
interface for working with data

00:01:16,240 --> 00:01:19,600
and you can do a lot of cool and amazing

00:01:18,720 --> 00:01:23,119
things with it

00:01:19,600 --> 00:01:25,840
uh you know like uh merges uh plotting

00:01:23,119 --> 00:01:27,200
uh and all that kind of stuff but

00:01:25,840 --> 00:01:29,600
something weird happened

00:01:27,200 --> 00:01:30,560
uh i encountered something for the first

00:01:29,600 --> 00:01:33,520
time you know

00:01:30,560 --> 00:01:34,560
location in my data which means they had

00:01:33,520 --> 00:01:37,920
latitudes

00:01:34,560 --> 00:01:38,640
and longitudes so here's what the data

00:01:37,920 --> 00:01:42,000
looks like

00:01:38,640 --> 00:01:42,479
right i'm reading a csv file easy as

00:01:42,000 --> 00:01:44,479
that

00:01:42,479 --> 00:01:46,159
and it has latitudes and longitudes

00:01:44,479 --> 00:01:48,479
which means this is

00:01:46,159 --> 00:01:51,520
a whole new realm for us a data with

00:01:48,479 --> 00:01:51,520
location component

00:01:53,280 --> 00:01:57,600
so a data with location component a

00:01:55,759 --> 00:02:00,640
location can be represented

00:01:57,600 --> 00:02:02,640
as geometries uh right and

00:02:00,640 --> 00:02:03,840
what is a geometry a geometry can be

00:02:02,640 --> 00:02:06,320
either a point

00:02:03,840 --> 00:02:08,160
which is latitude and longitude or a

00:02:06,320 --> 00:02:10,560
polygon which is a list of points

00:02:08,160 --> 00:02:12,239
so here grossly oversimplifying the

00:02:10,560 --> 00:02:13,680
concept of geometries and

00:02:12,239 --> 00:02:15,680
euclid would be really angry with me

00:02:13,680 --> 00:02:17,280
right now uh but yeah

00:02:15,680 --> 00:02:19,120
for the sake of this talk let's assume

00:02:17,280 --> 00:02:20,480
that we have points and polygons

00:02:19,120 --> 00:02:22,480
and different types of polygons

00:02:20,480 --> 00:02:25,840
essentially we also have

00:02:22,480 --> 00:02:27,040
lime strings which are pop-up polygons

00:02:25,840 --> 00:02:28,080
that don't complete we have

00:02:27,040 --> 00:02:30,319
multi-polygons

00:02:28,080 --> 00:02:33,440
just a fancy plural word for polygons

00:02:30,319 --> 00:02:37,120
and we also have circles

00:02:33,440 --> 00:02:38,640
so now uh enter jio pandas jio pandas

00:02:37,120 --> 00:02:41,680
will enable you to work

00:02:38,640 --> 00:02:45,040
in the realm of data frames uh without

00:02:41,680 --> 00:02:47,519
leaving uh like oh sorry it'll

00:02:45,040 --> 00:02:48,879
enable you to work with location data

00:02:47,519 --> 00:02:51,599
without leaving the rav

00:02:48,879 --> 00:02:53,599
of data frames so here are some of the

00:02:51,599 --> 00:02:55,360
cool things that jio pandas has to offer

00:02:53,599 --> 00:02:56,800
you know one is the one which i

00:02:55,360 --> 00:02:57,519
discussed right now it provides an

00:02:56,800 --> 00:02:59,040
interface

00:02:57,519 --> 00:03:01,360
with data frames to work with geographic

00:02:59,040 --> 00:03:01,760
data the next one is it allows you to

00:03:01,360 --> 00:03:03,920
read

00:03:01,760 --> 00:03:05,680
and write gis formats really popular

00:03:03,920 --> 00:03:08,959
formats like shapefiles

00:03:05,680 --> 00:03:11,760
geojson files camel files using

00:03:08,959 --> 00:03:13,519
another library called fiona it also

00:03:11,760 --> 00:03:15,599
helps you perform spatial operations

00:03:13,519 --> 00:03:16,080
like you perform on pandas or normal

00:03:15,599 --> 00:03:17,920
data

00:03:16,080 --> 00:03:20,159
you can perform spatial operations on

00:03:17,920 --> 00:03:22,400
geographic data like you can perform

00:03:20,159 --> 00:03:24,159
a geospatial merges between uh two

00:03:22,400 --> 00:03:25,920
polygons you can perform joints

00:03:24,159 --> 00:03:27,680
and you can perform overlays and all

00:03:25,920 --> 00:03:28,480
this is possible using another open

00:03:27,680 --> 00:03:30,720
source package

00:03:28,480 --> 00:03:33,040
called shapely so it's all this

00:03:30,720 --> 00:03:34,720
intricately woven open source ecosystem

00:03:33,040 --> 00:03:37,360
time together

00:03:34,720 --> 00:03:38,480
and also the cracks of a talk we can

00:03:37,360 --> 00:03:41,040
plot them on a map

00:03:38,480 --> 00:03:41,680
and jio pandas uses matplotlib and

00:03:41,040 --> 00:03:44,560
decart

00:03:41,680 --> 00:03:46,239
to help you do that and also there's a

00:03:44,560 --> 00:03:48,080
whole lot of other things you can do

00:03:46,239 --> 00:03:49,760
with your pandas not just this

00:03:48,080 --> 00:03:51,599
and if you want to know more you have to

00:03:49,760 --> 00:03:54,400
definitely check out this tutorial by

00:03:51,599 --> 00:03:57,760
the maintainer of jio pandas

00:03:54,400 --> 00:03:59,760
so now uh going back to our

00:03:57,760 --> 00:04:02,640
original data frame we're going to

00:03:59,760 --> 00:04:05,840
convert it into a geodata frame

00:04:02,640 --> 00:04:08,400
so to do that we're going to be uh

00:04:05,840 --> 00:04:10,000
importing jio pandas of course and then

00:04:08,400 --> 00:04:11,879
we're going to take the data frame

00:04:10,000 --> 00:04:13,200
and we're going to pass it to jio

00:04:11,879 --> 00:04:14,720
pandas.geodataprint

00:04:13,200 --> 00:04:17,040
and then we're going to pass an argument

00:04:14,720 --> 00:04:19,600
for geometry so geometry specifies

00:04:17,040 --> 00:04:20,320
which columns to consider to create that

00:04:19,600 --> 00:04:22,720
geometry

00:04:20,320 --> 00:04:24,479
so here our geometry is a point because

00:04:22,720 --> 00:04:27,120
it's latitude and longitude

00:04:24,479 --> 00:04:29,199
so we create that point from those two

00:04:27,120 --> 00:04:32,560
columns by using your pandas dot

00:04:29,199 --> 00:04:34,800
points from x y uh which takes in uh

00:04:32,560 --> 00:04:35,919
the lat long columns and creates a

00:04:34,800 --> 00:04:38,000
geodata frame for you

00:04:35,919 --> 00:04:39,759
and after that we have something weird

00:04:38,000 --> 00:04:42,880
setting the projection

00:04:39,759 --> 00:04:44,320
dot crs you know what is that so crs

00:04:42,880 --> 00:04:46,320
refers to the coordinate

00:04:44,320 --> 00:04:48,320
reference system so these are the

00:04:46,320 --> 00:04:50,479
different ways we can project the world

00:04:48,320 --> 00:04:52,080
which is a geoid onto a plane that we

00:04:50,479 --> 00:04:56,000
can understand and

00:04:52,080 --> 00:04:58,400
interpret so here we use espg4326

00:04:56,000 --> 00:05:00,880
which is a standard projection which is

00:04:58,400 --> 00:05:01,759
used in satellite navigation systems or

00:05:00,880 --> 00:05:04,000
gps

00:05:01,759 --> 00:05:05,520
so coordinate reference systems actually

00:05:04,000 --> 00:05:08,080
give spatial meaning

00:05:05,520 --> 00:05:08,960
to latitudes and longitudes without them

00:05:08,080 --> 00:05:10,800
they are just

00:05:08,960 --> 00:05:13,039
arbitrary x and y coordinates they do

00:05:10,800 --> 00:05:13,520
not represent any specific location on

00:05:13,039 --> 00:05:15,840
earth

00:05:13,520 --> 00:05:19,039
a coordinate 11 system essentially gives

00:05:15,840 --> 00:05:19,039
them spatial meaning

00:05:19,360 --> 00:05:22,479
and also i want to point out a little

00:05:21,360 --> 00:05:25,280
fun fact about

00:05:22,479 --> 00:05:25,919
projections uh so projections are the

00:05:25,280 --> 00:05:28,880
reason

00:05:25,919 --> 00:05:30,320
greenland looks really big while africa

00:05:28,880 --> 00:05:32,880
looks really small

00:05:30,320 --> 00:05:34,560
and essentially the other rivers like uh

00:05:32,880 --> 00:05:37,759
to put things into

00:05:34,560 --> 00:05:40,080
perspective this is how big africa is so

00:05:37,759 --> 00:05:42,639
it can contain the whole country of the

00:05:40,080 --> 00:05:45,759
us it can have china it can have india

00:05:42,639 --> 00:05:48,240
eastern europe italy france spain like

00:05:45,759 --> 00:05:49,919
all these countries can just fit like a

00:05:48,240 --> 00:05:51,440
puzzle inside africa and

00:05:49,919 --> 00:05:53,680
there is still space left you know

00:05:51,440 --> 00:05:55,840
that's how big africa really is

00:05:53,680 --> 00:05:57,840
uh but it doesn't seem like that on a

00:05:55,840 --> 00:06:00,880
map and it's because of

00:05:57,840 --> 00:06:01,759
how we project africa onto the map and

00:06:00,880 --> 00:06:04,800
it's in the

00:06:01,759 --> 00:06:05,199
it's near the uh it's near the center or

00:06:04,800 --> 00:06:08,319
the

00:06:05,199 --> 00:06:09,840
equator so it's really small and as you

00:06:08,319 --> 00:06:12,639
move to the top like for example

00:06:09,840 --> 00:06:13,280
greenland as i mentioned and also russia

00:06:12,639 --> 00:06:17,039
they seem

00:06:13,280 --> 00:06:17,039
a little larger than they actually are

00:06:17,600 --> 00:06:24,880
so uh to the crux of the talk

00:06:21,039 --> 00:06:26,160
uh the map how do i actually plot the

00:06:24,880 --> 00:06:28,639
data that i have

00:06:26,160 --> 00:06:31,199
so with geopandas plotting your data is

00:06:28,639 --> 00:06:33,759
as simple as a dot plot

00:06:31,199 --> 00:06:35,440
so what so we created eduardo frame

00:06:33,759 --> 00:06:37,680
previously so we just take it in

00:06:35,440 --> 00:06:38,800
and just do a dot plot right and we get

00:06:37,680 --> 00:06:40,960
this map uh

00:06:38,800 --> 00:06:42,319
but this map is it's really weird right

00:06:40,960 --> 00:06:44,960
like it it's like

00:06:42,319 --> 00:06:46,479
it's it it it it it looks like my

00:06:44,960 --> 00:06:49,599
college cafeteria you know it's

00:06:46,479 --> 00:06:51,520
bland it's tasteless uh and i i i want

00:06:49,599 --> 00:06:54,560
to add some jazz to it and

00:06:51,520 --> 00:06:57,599
uh by jazz i mean

00:06:54,560 --> 00:07:00,800
interactivity so to do that i'm gonna

00:06:57,599 --> 00:07:02,639
uh you know employ the most powerful

00:07:00,800 --> 00:07:05,199
tool a programmer has

00:07:02,639 --> 00:07:06,720
which is googling so i did a little

00:07:05,199 --> 00:07:10,240
google search because

00:07:06,720 --> 00:07:12,720
i i was facing the same issue when i was

00:07:10,240 --> 00:07:14,800
trying to work with geographic data so

00:07:12,720 --> 00:07:16,800
as a simple google search gave me a list

00:07:14,800 --> 00:07:17,840
of packages and open source libraries

00:07:16,800 --> 00:07:19,680
that i can use

00:07:17,840 --> 00:07:21,599
to create you know really cool looking

00:07:19,680 --> 00:07:22,960
interactive maps

00:07:21,599 --> 00:07:25,120
so the first package i'm going to

00:07:22,960 --> 00:07:27,520
discuss about is folio

00:07:25,120 --> 00:07:28,560
so with volume you can create a

00:07:27,520 --> 00:07:31,520
beautiful

00:07:28,560 --> 00:07:32,000
interactive maps and what folio does is

00:07:31,520 --> 00:07:35,680
it's

00:07:32,000 --> 00:07:38,639
uh is it internally uses leaflet

00:07:35,680 --> 00:07:39,039
uh leaflet is a javascript library uh

00:07:38,639 --> 00:07:42,000
that

00:07:39,039 --> 00:07:42,639
is used to create these maps and it uses

00:07:42,000 --> 00:07:46,240
it

00:07:42,639 --> 00:07:48,800
uh essentially uh exposes the

00:07:46,240 --> 00:07:50,720
leaflet api which is in javascript in

00:07:48,800 --> 00:07:53,100
python so that you can use it

00:07:50,720 --> 00:07:54,960
to create interactive maps in python

00:07:53,100 --> 00:07:57,680
[Music]

00:07:54,960 --> 00:07:58,080
so let's look at that so here we are

00:07:57,680 --> 00:08:01,440
just

00:07:58,080 --> 00:08:04,000
importing folium and we are creating

00:08:01,440 --> 00:08:05,199
a dot map so we are passing like a bunch

00:08:04,000 --> 00:08:08,240
of arguments like

00:08:05,199 --> 00:08:08,879
location so which means the which refers

00:08:08,240 --> 00:08:11,039
to the

00:08:08,879 --> 00:08:13,520
center of the map and we also pass in

00:08:11,039 --> 00:08:14,879
the zoom uh to see how much the zoom

00:08:13,520 --> 00:08:18,400
level should be

00:08:14,879 --> 00:08:21,840
uh and also uh we pass in the tiles

00:08:18,400 --> 00:08:23,919
uh which is uh oh which is which for

00:08:21,840 --> 00:08:25,360
which we are going to use openstreetmaps

00:08:23,919 --> 00:08:28,479
because it's open

00:08:25,360 --> 00:08:29,360
uh and this creates like an empty canvas

00:08:28,479 --> 00:08:32,640
that you can

00:08:29,360 --> 00:08:34,159
you know draw upon so it's like uh

00:08:32,640 --> 00:08:36,640
yeah it's essentially an empty canvas

00:08:34,159 --> 00:08:38,839
for for doing art and here art is the

00:08:36,640 --> 00:08:41,680
map

00:08:38,839 --> 00:08:44,240
so what i do now is uh

00:08:41,680 --> 00:08:45,519
i create a full um feature uh with

00:08:44,240 --> 00:08:48,399
geojson

00:08:45,519 --> 00:08:50,399
so uh for for this i'm going to pass my

00:08:48,399 --> 00:08:52,800
junior frame which i already created

00:08:50,399 --> 00:08:54,240
so i'm creating a feature with my

00:08:52,800 --> 00:08:56,399
geodata frame and i also

00:08:54,240 --> 00:08:57,920
uh mentioned the tooltip so tooltip

00:08:56,399 --> 00:08:59,680
essentially means that when i

00:08:57,920 --> 00:09:01,519
kind of hover over this map i can

00:08:59,680 --> 00:09:03,519
actually see uh the

00:09:01,519 --> 00:09:04,800
the name essentially here because i've

00:09:03,519 --> 00:09:07,519
passed the field as name

00:09:04,800 --> 00:09:08,080
and i can pass uh other columns and they

00:09:07,519 --> 00:09:10,560
would be

00:09:08,080 --> 00:09:12,880
coming up as a tooltip here so after

00:09:10,560 --> 00:09:15,279
creating this feature i'm

00:09:12,880 --> 00:09:16,000
adding this as a child to our existing

00:09:15,279 --> 00:09:18,959
canvas

00:09:16,000 --> 00:09:19,600
which we created right here and after

00:09:18,959 --> 00:09:22,080
adding it

00:09:19,600 --> 00:09:23,440
we just show it and it's overlaid on top

00:09:22,080 --> 00:09:26,080
of each other

00:09:23,440 --> 00:09:26,800
right now we just discussed how to do

00:09:26,080 --> 00:09:29,920
points

00:09:26,800 --> 00:09:31,839
but now we are moving on to polygons so

00:09:29,920 --> 00:09:33,360
how do we plot polygons with the

00:09:31,839 --> 00:09:36,800
geopandas

00:09:33,360 --> 00:09:39,760
it's again as easy as a dot plot

00:09:36,800 --> 00:09:41,360
uh but in this case uh since we want to

00:09:39,760 --> 00:09:44,080
do something different

00:09:41,360 --> 00:09:45,040
we pass a column attribute so in this

00:09:44,080 --> 00:09:48,560
column we actually

00:09:45,040 --> 00:09:51,839
pass gdp so that every

00:09:48,560 --> 00:09:54,399
country is actually colored by gdp here

00:09:51,839 --> 00:09:55,360
and we also pass the c map which refers

00:09:54,399 --> 00:09:58,399
to the palette

00:09:55,360 --> 00:10:01,040
i want to use so i have shared a link

00:09:58,399 --> 00:10:02,160
above for all the available matplotlib

00:10:01,040 --> 00:10:05,360
palettes

00:10:02,160 --> 00:10:07,680
that you can use and also i set legend

00:10:05,360 --> 00:10:10,880
equals to so that i see the legend of

00:10:07,680 --> 00:10:12,959
of this map so now

00:10:10,880 --> 00:10:13,920
uh let's move on to how we do the same

00:10:12,959 --> 00:10:17,440
operation

00:10:13,920 --> 00:10:20,560
but interactively with folio

00:10:17,440 --> 00:10:21,760
so with volume uh what we do first is we

00:10:20,560 --> 00:10:25,360
create a pallet

00:10:21,760 --> 00:10:28,000
uh which was uh this which was

00:10:25,360 --> 00:10:28,560
this palette that we saw so to do that

00:10:28,000 --> 00:10:30,079
we use

00:10:28,560 --> 00:10:32,640
another open source package called

00:10:30,079 --> 00:10:35,279
branca we import the color map

00:10:32,640 --> 00:10:36,000
and we pass in the data and we pass in

00:10:35,279 --> 00:10:39,200
the steps

00:10:36,000 --> 00:10:42,320
so i say that i want to color this uh

00:10:39,200 --> 00:10:42,720
with respect to the gdp uh and i i want

00:10:42,320 --> 00:10:45,600
to go

00:10:42,720 --> 00:10:46,000
nine steps and it's linear and this is

00:10:45,600 --> 00:10:49,120
the c

00:10:46,000 --> 00:10:50,320
map i i want to go with and after that

00:10:49,120 --> 00:10:52,880
we define our

00:10:50,320 --> 00:10:54,480
empty canvas which is a folium.map and

00:10:52,880 --> 00:10:57,040
also we define our style

00:10:54,480 --> 00:10:58,320
so uh it's which represents how we want

00:10:57,040 --> 00:11:00,880
to style our map

00:10:58,320 --> 00:11:01,839
so it's it's just a function here a

00:11:00,880 --> 00:11:04,800
lambda function

00:11:01,839 --> 00:11:06,560
uh so we pass in some arguments like for

00:11:04,800 --> 00:11:09,120
example i pass the fill color

00:11:06,560 --> 00:11:10,560
to uh denote how exactly i want to fill

00:11:09,120 --> 00:11:12,560
the color of the polygons

00:11:10,560 --> 00:11:14,399
so here at fill color i'm passing the

00:11:12,560 --> 00:11:16,240
color map here

00:11:14,399 --> 00:11:18,240
and also i pass the color i want the

00:11:16,240 --> 00:11:19,760
polygon to be which is black

00:11:18,240 --> 00:11:22,240
and i want the weight which is the

00:11:19,760 --> 00:11:23,600
border and also i want the opacity to be

00:11:22,240 --> 00:11:25,360
mentioned

00:11:23,600 --> 00:11:27,600
so now we have the style we have the

00:11:25,360 --> 00:11:30,959
empty canvas we just plot it

00:11:27,600 --> 00:11:31,519
voila so we again create a geojson

00:11:30,959 --> 00:11:33,920
feature

00:11:31,519 --> 00:11:35,680
we pass in the geodata frame we pass in

00:11:33,920 --> 00:11:38,240
the tooltip so its name

00:11:35,680 --> 00:11:40,399
and gdp this time so when i hover over

00:11:38,240 --> 00:11:42,160
it you see both name and gdp

00:11:40,399 --> 00:11:44,079
and also we passed the style function

00:11:42,160 --> 00:11:47,200
that we

00:11:44,079 --> 00:11:49,760
defined above in the previous slide and

00:11:47,200 --> 00:11:50,320
we now add it to the empty canvas we

00:11:49,760 --> 00:11:54,240
created

00:11:50,320 --> 00:11:55,680
which is m and now we also add the color

00:11:54,240 --> 00:11:58,000
map so that we get

00:11:55,680 --> 00:11:59,760
this really weird looking legend because

00:11:58,000 --> 00:12:00,399
our steps are nice maybe if it was less

00:11:59,760 --> 00:12:04,320
it would have

00:12:00,399 --> 00:12:07,600
looked better so

00:12:04,320 --> 00:12:09,120
now it's not just points and polygons

00:12:07,600 --> 00:12:12,240
and like we're done right

00:12:09,120 --> 00:12:14,320
so we we also have uh some really unique

00:12:12,240 --> 00:12:15,920
plugins that folium exposes

00:12:14,320 --> 00:12:17,519
which are used to create really custom

00:12:15,920 --> 00:12:20,000
looking maps and

00:12:17,519 --> 00:12:22,320
one of those maps is marker clusters so

00:12:20,000 --> 00:12:25,519
what it does is it takes your points

00:12:22,320 --> 00:12:28,240
and clusters them into a cluster so

00:12:25,519 --> 00:12:29,360
here's an example of the map so here i'm

00:12:28,240 --> 00:12:32,399
uh

00:12:29,360 --> 00:12:34,800
importing macbuster from folium plugins

00:12:32,399 --> 00:12:35,839
and then what i do is i create a

00:12:34,800 --> 00:12:38,720
location array

00:12:35,839 --> 00:12:39,360
which has a list of lag long pairs which

00:12:38,720 --> 00:12:42,160
i

00:12:39,360 --> 00:12:42,720
extract from the julia frame and now i

00:12:42,160 --> 00:12:46,399
create an

00:12:42,720 --> 00:12:48,639
empty canvas i add a child and i pass

00:12:46,399 --> 00:12:49,440
marker cluster with these the list of

00:12:48,639 --> 00:12:52,000
flat logs

00:12:49,440 --> 00:12:52,639
so what it does is it's very similar to

00:12:52,000 --> 00:12:55,680
the

00:12:52,639 --> 00:12:59,120
slide which we saw a while back which

00:12:55,680 --> 00:13:01,920
is which has just the lat lungs but

00:12:59,120 --> 00:13:03,120
essentially it clusters these into

00:13:01,920 --> 00:13:05,279
clusters

00:13:03,120 --> 00:13:07,120
so what we see right here is actually a

00:13:05,279 --> 00:13:07,600
clustered version of the map which we

00:13:07,120 --> 00:13:10,560
saw

00:13:07,600 --> 00:13:12,720
previously so this is really useful when

00:13:10,560 --> 00:13:15,600
you have like a huge number of points

00:13:12,720 --> 00:13:17,040
and it doesn't really fit on the map so

00:13:15,600 --> 00:13:19,040
at that time you just cluster them

00:13:17,040 --> 00:13:21,279
and also when you want to create such

00:13:19,040 --> 00:13:23,920
clusters

00:13:21,279 --> 00:13:25,200
and also we come to heat map heat map is

00:13:23,920 --> 00:13:27,519
a really

00:13:25,200 --> 00:13:28,800
it's a really popular form of maps that

00:13:27,519 --> 00:13:31,839
you know is really

00:13:28,800 --> 00:13:32,560
uh it's really like a you really see it

00:13:31,839 --> 00:13:34,720
on

00:13:32,560 --> 00:13:36,480
televisions when they want to you know

00:13:34,720 --> 00:13:37,360
represent something it's widely used in

00:13:36,480 --> 00:13:40,320
media

00:13:37,360 --> 00:13:42,000
uh and with folium heat maps again

00:13:40,320 --> 00:13:43,920
become as easy as

00:13:42,000 --> 00:13:45,360
a heat map you pass the list of lat

00:13:43,920 --> 00:13:46,959
longs and you give the radius of the

00:13:45,360 --> 00:13:48,240
heat map and a bunch of arguments that

00:13:46,959 --> 00:13:51,440
you can tune and

00:13:48,240 --> 00:13:55,360
it's as easy as this to plot

00:13:51,440 --> 00:13:58,800
so but but

00:13:55,360 --> 00:13:59,519
but with folium when you have a lot of

00:13:58,800 --> 00:14:01,519
data

00:13:59,519 --> 00:14:02,560
uh it's really hard for folium to

00:14:01,519 --> 00:14:05,440
actually uh

00:14:02,560 --> 00:14:06,240
have control over it or handle it uh you

00:14:05,440 --> 00:14:08,320
know uh

00:14:06,240 --> 00:14:10,160
even when you're doing clustering even

00:14:08,320 --> 00:14:11,120
when you you know convert your points to

00:14:10,160 --> 00:14:13,279
clusters

00:14:11,120 --> 00:14:14,320
uh folium reaches its threshold really

00:14:13,279 --> 00:14:16,639
quick and

00:14:14,320 --> 00:14:18,639
your your dom cannot you know literally

00:14:16,639 --> 00:14:21,199
handle a million data points

00:14:18,639 --> 00:14:22,880
and you know if you try it out on

00:14:21,199 --> 00:14:23,839
jupiter you like your whole browser

00:14:22,880 --> 00:14:25,839
crashes

00:14:23,839 --> 00:14:27,040
and uh you know it gets really tricky

00:14:25,839 --> 00:14:29,199
now

00:14:27,040 --> 00:14:30,320
it now here's the problem if you want to

00:14:29,199 --> 00:14:33,279
scale up right

00:14:30,320 --> 00:14:33,839
we cannot do it with folium so how do we

00:14:33,279 --> 00:14:36,320
do it

00:14:33,839 --> 00:14:38,560
so i'm going to introduce you to the new

00:14:36,320 --> 00:14:42,000
kid in town to do exactly this

00:14:38,560 --> 00:14:44,000
which is capital gl so this is the

00:14:42,000 --> 00:14:46,240
textbook definition of kepler gl it's a

00:14:44,000 --> 00:14:48,160
data agnostic high performance web-based

00:14:46,240 --> 00:14:50,240
application

00:14:48,160 --> 00:14:52,320
but kepler is like a really cool project

00:14:50,240 --> 00:14:56,079
which is coming from uber

00:14:52,320 --> 00:15:00,000
and they have actually harnessed deck gl

00:14:56,079 --> 00:15:02,079
and gpu rendering to uh you know

00:15:00,000 --> 00:15:04,240
uh you know essentially render millions

00:15:02,079 --> 00:15:07,920
of points on the fly on your

00:15:04,240 --> 00:15:09,199
browser and perform spatial aggregations

00:15:07,920 --> 00:15:12,240
on the fly too

00:15:09,199 --> 00:15:14,880
and all in your browser and also uh

00:15:12,240 --> 00:15:15,760
keplercl is built with react uh so you

00:15:14,880 --> 00:15:18,079
don't have to

00:15:15,760 --> 00:15:20,399
uh so if if you know react you don't

00:15:18,079 --> 00:15:22,959
have to like re-render it every time

00:15:20,399 --> 00:15:25,199
it just renders what's necessary not

00:15:22,959 --> 00:15:28,000
everything

00:15:25,199 --> 00:15:29,680
so to and also installing capture gl is

00:15:28,000 --> 00:15:31,839
really simple with python uh

00:15:29,680 --> 00:15:33,759
you just do a pep install if you're in a

00:15:31,839 --> 00:15:35,519
jupiter notebook environment and if you

00:15:33,759 --> 00:15:37,040
are on a jupyter lab environment you

00:15:35,519 --> 00:15:39,440
have to install the extension

00:15:37,040 --> 00:15:40,480
and also enable the extension in your

00:15:39,440 --> 00:15:42,639
jupyter environment

00:15:40,480 --> 00:15:44,480
and after you do that uh you can just

00:15:42,639 --> 00:15:47,920
you know import kepler gl and

00:15:44,480 --> 00:15:50,560
create a map now uh

00:15:47,920 --> 00:15:51,519
one thing that is really cool about

00:15:50,560 --> 00:15:54,800
kepler is

00:15:51,519 --> 00:15:58,000
that it uses configs uh

00:15:54,800 --> 00:15:59,680
to tune its map uh and uh when you

00:15:58,000 --> 00:16:01,360
when you're using a config that means

00:15:59,680 --> 00:16:05,120
you can customize it

00:16:01,360 --> 00:16:09,279
so it's really really super flexible

00:16:05,120 --> 00:16:12,320
so this is config that is used in kepler

00:16:09,279 --> 00:16:14,959
and example one so it has a several

00:16:12,320 --> 00:16:16,480
uh attributes that you can tune so for

00:16:14,959 --> 00:16:17,040
example you can you have the version

00:16:16,480 --> 00:16:19,600
which is

00:16:17,040 --> 00:16:20,160
conflict specific and also we have this

00:16:19,600 --> 00:16:22,320
states

00:16:20,160 --> 00:16:24,240
where we pass the filters uh we have

00:16:22,320 --> 00:16:26,240
different layers that we are passing

00:16:24,240 --> 00:16:28,240
they are they each have their own id uh

00:16:26,240 --> 00:16:30,079
the type of the data which is a point

00:16:28,240 --> 00:16:31,279
and also we have the label we have the

00:16:30,079 --> 00:16:33,519
color which is

00:16:31,279 --> 00:16:34,480
which here is rbg so it doesn't make

00:16:33,519 --> 00:16:36,880
sense uh

00:16:34,480 --> 00:16:38,320
but yeah it corresponds to a color and

00:16:36,880 --> 00:16:41,120
also we pass the columns which is

00:16:38,320 --> 00:16:43,759
latitude longitude we also have altitude

00:16:41,120 --> 00:16:45,279
uh so this really seems weird right so

00:16:43,759 --> 00:16:45,759
i'm going to break the conflict down to

00:16:45,279 --> 00:16:47,920
you

00:16:45,759 --> 00:16:51,040
uh in in the next one in the next slide

00:16:47,920 --> 00:16:53,600
so in kepler the ux flow is composed of

00:16:51,040 --> 00:16:55,680
five different layers so these are the

00:16:53,600 --> 00:16:58,880
ones so

00:16:55,680 --> 00:17:00,560
uh so first you have a base map right

00:16:58,880 --> 00:17:02,240
a base map which is a canvas you can

00:17:00,560 --> 00:17:04,480
build on top of and

00:17:02,240 --> 00:17:06,319
on this base map you can actually plot

00:17:04,480 --> 00:17:09,120
your data so you have your data

00:17:06,319 --> 00:17:10,240
on top of the base map after which you

00:17:09,120 --> 00:17:12,319
can do filters

00:17:10,240 --> 00:17:14,240
so filters can be used to essentially

00:17:12,319 --> 00:17:15,360
filter your data based on a field that

00:17:14,240 --> 00:17:17,280
you have in your data

00:17:15,360 --> 00:17:18,480
or you can do spatial filters based on

00:17:17,280 --> 00:17:20,079
spatial attributes

00:17:18,480 --> 00:17:21,919
like for example you want to filter with

00:17:20,079 --> 00:17:24,400
respect to a specific city a specific

00:17:21,919 --> 00:17:28,640
district uh you know a specific county

00:17:24,400 --> 00:17:30,559
and also on the filter data

00:17:28,640 --> 00:17:32,640
you have different interactions you can

00:17:30,559 --> 00:17:34,160
perform for example the tooltip that i

00:17:32,640 --> 00:17:34,559
had you know showed you previously where

00:17:34,160 --> 00:17:35,919
you

00:17:34,559 --> 00:17:37,679
hover over the data and you see the

00:17:35,919 --> 00:17:38,799
attributes that's an interaction that

00:17:37,679 --> 00:17:40,320
you perform on the data

00:17:38,799 --> 00:17:42,080
and also there are different types of

00:17:40,320 --> 00:17:46,160
data layers that kepler offers

00:17:42,080 --> 00:17:49,200
so here i have shown hexagonal layers

00:17:46,160 --> 00:17:52,320
which are used to you know aggregate

00:17:49,200 --> 00:17:54,960
data as as hexagonal grids so

00:17:52,320 --> 00:17:56,400
these are just clusters of hexagons you

00:17:54,960 --> 00:17:58,480
can cluster your data on

00:17:56,400 --> 00:17:59,760
and also you have arcs that are used to

00:17:58,480 --> 00:18:01,200
represent trips

00:17:59,760 --> 00:18:03,200
like for example if you want to plot

00:18:01,200 --> 00:18:06,000
data of flight movement

00:18:03,200 --> 00:18:06,720
uh or drones uh you can use arc to you

00:18:06,000 --> 00:18:08,720
know show

00:18:06,720 --> 00:18:10,240
to and from points and just draw an arc

00:18:08,720 --> 00:18:12,080
it looks really cool on the map

00:18:10,240 --> 00:18:13,600
and also you have point layers so which

00:18:12,080 --> 00:18:16,160
is just points

00:18:13,600 --> 00:18:16,640
and also you have you know grid uh you

00:18:16,160 --> 00:18:18,320
have

00:18:16,640 --> 00:18:19,840
path which is again used to represent a

00:18:18,320 --> 00:18:22,480
trip um

00:18:19,840 --> 00:18:23,120
and you know actually this is less you

00:18:22,480 --> 00:18:26,640
also have

00:18:23,120 --> 00:18:28,480
s2 which is a space which is like a

00:18:26,640 --> 00:18:30,880
indexing format that you can use you

00:18:28,480 --> 00:18:31,600
also have h3 grids which is uber

00:18:30,880 --> 00:18:36,480
specific

00:18:31,600 --> 00:18:38,960
uh hexagonal indexing you also have uh

00:18:36,480 --> 00:18:41,039
icons of because like for example you

00:18:38,960 --> 00:18:41,440
can add specific icons to your points

00:18:41,039 --> 00:18:44,559
and

00:18:41,440 --> 00:18:48,000
make them look colorful

00:18:44,559 --> 00:18:49,360
so with kepler you also get a toolbar on

00:18:48,000 --> 00:18:52,160
the side

00:18:49,360 --> 00:18:53,120
like this which gives you the power to

00:18:52,160 --> 00:18:55,520
do

00:18:53,120 --> 00:18:56,400
really really amazing customizations to

00:18:55,520 --> 00:18:59,600
your map

00:18:56,400 --> 00:19:03,039
you have filters so here i'm doing an

00:18:59,600 --> 00:19:06,080
aggregation on fly uh with which with

00:19:03,039 --> 00:19:09,280
h3 grids and also i'm

00:19:06,080 --> 00:19:10,880
doing color with respect to a label and

00:19:09,280 --> 00:19:12,799
you also have timelines which look

00:19:10,880 --> 00:19:13,760
really really cool so here is the

00:19:12,799 --> 00:19:16,400
timeline of

00:19:13,760 --> 00:19:17,039
all the trips uh that are happening so

00:19:16,400 --> 00:19:19,200
the uh

00:19:17,039 --> 00:19:20,640
like uh you know the number of day data

00:19:19,200 --> 00:19:22,000
points that are being plotted here are

00:19:20,640 --> 00:19:24,160
really really huge

00:19:22,000 --> 00:19:25,360
uh and kepler can handle it really

00:19:24,160 --> 00:19:28,480
gracefully and

00:19:25,360 --> 00:19:28,480
it is pretty awesome

00:19:28,559 --> 00:19:33,120
so uh kepler folium we discussed two

00:19:31,679 --> 00:19:35,280
packages but there is

00:19:33,120 --> 00:19:36,880
always another package when it comes to

00:19:35,280 --> 00:19:39,039
the open source ecosystem

00:19:36,880 --> 00:19:41,280
right people just you know create

00:19:39,039 --> 00:19:44,240
amazing packages after amazing packages

00:19:41,280 --> 00:19:44,960
and you know the community grows on uh

00:19:44,240 --> 00:19:46,799
and also

00:19:44,960 --> 00:19:48,240
sometimes these packages tend to

00:19:46,799 --> 00:19:50,720
complement each other

00:19:48,240 --> 00:19:52,640
or try to you know patch a gap present

00:19:50,720 --> 00:19:54,559
in another package

00:19:52,640 --> 00:19:55,760
so let's discuss some of them one is

00:19:54,559 --> 00:19:57,600
bokeh

00:19:55,760 --> 00:19:58,960
so which is again used to create

00:19:57,600 --> 00:20:01,600
interactive maps

00:19:58,960 --> 00:20:02,640
kind of like this so here what we do is

00:20:01,600 --> 00:20:04,080
we import book

00:20:02,640 --> 00:20:05,760
but here the plotting gets a little

00:20:04,080 --> 00:20:08,000
tricky because the

00:20:05,760 --> 00:20:09,760
interface that we were familiar with

00:20:08,000 --> 00:20:12,159
gets really weird right now

00:20:09,760 --> 00:20:13,600
so uh we actually uh you know we have to

00:20:12,159 --> 00:20:14,320
import the tile provider here it's

00:20:13,600 --> 00:20:16,960
cartodb

00:20:14,320 --> 00:20:18,799
catalytic positron and we also give the

00:20:16,960 --> 00:20:19,760
x range which is the range of the map

00:20:18,799 --> 00:20:22,080
which you want to see

00:20:19,760 --> 00:20:23,600
we give it the wide range we give it the

00:20:22,080 --> 00:20:25,679
coordinate

00:20:23,600 --> 00:20:27,919
the crs type which is mercator which is

00:20:25,679 --> 00:20:30,240
the projection we want to use

00:20:27,919 --> 00:20:32,000
and also we again use a simple interface

00:20:30,240 --> 00:20:34,400
to add it and we show it

00:20:32,000 --> 00:20:36,240
right so this is an interface that is

00:20:34,400 --> 00:20:37,679
also awesome but

00:20:36,240 --> 00:20:40,960
it's really hard to get used to when

00:20:37,679 --> 00:20:42,720
you're coming from plotting folio

00:20:40,960 --> 00:20:44,240
and also you have plotly which is again

00:20:42,720 --> 00:20:46,159
an amazing package and also these

00:20:44,240 --> 00:20:48,320
packages are not just used for maps

00:20:46,159 --> 00:20:49,760
these are generally amazing this

00:20:48,320 --> 00:20:50,240
packages that you can use to you know

00:20:49,760 --> 00:20:53,280
plot

00:20:50,240 --> 00:20:54,240
anything uh so with plotly again you can

00:20:53,280 --> 00:20:57,200
create

00:20:54,240 --> 00:20:57,520
a plot like this really cool uh what you

00:20:57,200 --> 00:21:01,039
do

00:20:57,520 --> 00:21:03,360
is you do a dot scada map box

00:21:01,039 --> 00:21:05,360
so that you use a map box base map and

00:21:03,360 --> 00:21:07,919
also you have to have a mapbox

00:21:05,360 --> 00:21:08,640
api key in your environment variables to

00:21:07,919 --> 00:21:10,720
do this

00:21:08,640 --> 00:21:12,640
uh so you pass your latitude you pass

00:21:10,720 --> 00:21:13,919
your longitude you pass what you want to

00:21:12,640 --> 00:21:16,880
cover it based on

00:21:13,919 --> 00:21:17,520
and the whole and what you want the size

00:21:16,880 --> 00:21:19,520
based on

00:21:17,520 --> 00:21:21,280
so here we are representing two

00:21:19,520 --> 00:21:23,840
attributes in a single map

00:21:21,280 --> 00:21:24,480
so color represents an attribute and the

00:21:23,840 --> 00:21:27,120
size

00:21:24,480 --> 00:21:28,799
that's another attribute and again we

00:21:27,120 --> 00:21:30,799
pass the map box style which is carter

00:21:28,799 --> 00:21:33,360
positron and also we pass the scale

00:21:30,799 --> 00:21:35,840
which you want to plot and again the

00:21:33,360 --> 00:21:35,840
zoom level

00:21:36,159 --> 00:21:40,720
okay now onward to geopattern so

00:21:39,360 --> 00:21:44,159
geopatra is

00:21:40,720 --> 00:21:45,679
uh is like a project which i worked on

00:21:44,159 --> 00:21:48,480
during my free time

00:21:45,679 --> 00:21:48,880
and if you have not cringed at it yet

00:21:48,480 --> 00:21:51,840
it's

00:21:48,880 --> 00:21:52,720
a wordplay to rhyme with cleopatra you

00:21:51,840 --> 00:21:56,320
know cleo

00:21:52,720 --> 00:21:59,440
ngo um you know something

00:21:56,320 --> 00:22:01,679
and uh geopath essentially uh

00:21:59,440 --> 00:22:02,480
is just a bunch of scratch scripts that

00:22:01,679 --> 00:22:05,919
i wrote

00:22:02,480 --> 00:22:08,320
uh to uh plot interactively

00:22:05,919 --> 00:22:10,240
with your data frames without leaving

00:22:08,320 --> 00:22:13,840
the comfort of your data frames

00:22:10,240 --> 00:22:17,360
how do you plot these uh data on a map

00:22:13,840 --> 00:22:17,360
without having to do that

00:22:18,000 --> 00:22:21,600
so with geopandas the plotting becomes

00:22:20,880 --> 00:22:24,559
as quick

00:22:21,600 --> 00:22:26,080
as a dot folio dot plot so you don't

00:22:24,559 --> 00:22:26,880
have to define a canvas you don't have

00:22:26,080 --> 00:22:28,400
to do

00:22:26,880 --> 00:22:30,240
you know the or you don't have to go

00:22:28,400 --> 00:22:31,679
through the overhead that you had

00:22:30,240 --> 00:22:33,679
previously it just becomes

00:22:31,679 --> 00:22:34,880
easier and all the keyword arguments

00:22:33,679 --> 00:22:37,039
that i had passed become

00:22:34,880 --> 00:22:38,240
optional so these code arguments are

00:22:37,039 --> 00:22:41,360
either inferred

00:22:38,240 --> 00:22:44,880
on their own or i said it default value

00:22:41,360 --> 00:22:47,520
so that so so i focus more on

00:22:44,880 --> 00:22:49,120
getting the map out quickly than a

00:22:47,520 --> 00:22:50,480
complex workflow so

00:22:49,120 --> 00:22:52,400
if you still want to do complex

00:22:50,480 --> 00:22:53,440
workflows we would be going through

00:22:52,400 --> 00:22:55,919
these packages but

00:22:53,440 --> 00:22:56,880
i i want to focus on the speed of speed

00:22:55,919 --> 00:23:00,159
aspect of it

00:22:56,880 --> 00:23:00,470
so i'm going to quickly just

00:23:00,159 --> 00:23:03,200
uh

00:23:00,470 --> 00:23:05,280
[Music]

00:23:03,200 --> 00:23:06,559
run through the documentation a little

00:23:05,280 --> 00:23:09,520
bit

00:23:06,559 --> 00:23:11,360
so here uh as you see the plot with jojo

00:23:09,520 --> 00:23:13,720
is just dotfolium.plot

00:23:11,360 --> 00:23:15,039
and to do a circle map you just do

00:23:13,720 --> 00:23:17,200
folium.circle

00:23:15,039 --> 00:23:19,600
you pass in the tooltip the radius the

00:23:17,200 --> 00:23:22,559
fill the fill color and the zoom level

00:23:19,600 --> 00:23:22,960
it plots it automatically and also with

00:23:22,559 --> 00:23:26,440
the

00:23:22,960 --> 00:23:27,760
chlorophyt maps it becomes the

00:23:26,440 --> 00:23:29,600
dataframe.folium.chloropath

00:23:27,760 --> 00:23:31,360
you pass the color by argument the

00:23:29,600 --> 00:23:32,799
tooltip the color the zoom level

00:23:31,360 --> 00:23:34,720
and the style that you passed as a

00:23:32,799 --> 00:23:35,280
function you can pass as a keyword

00:23:34,720 --> 00:23:38,960
argument

00:23:35,280 --> 00:23:41,600
here and it plots it for you

00:23:38,960 --> 00:23:42,080
and also again mug clusters which

00:23:41,600 --> 00:23:43,840
becomes

00:23:42,080 --> 00:23:45,440
you know as easy as a single line of

00:23:43,840 --> 00:23:48,000
code you know series.folio

00:23:45,440 --> 00:23:49,919
dot maya cluster so it gets a mark

00:23:48,000 --> 00:23:51,360
cluster and also you can perform

00:23:49,919 --> 00:23:53,440
weighted marker clusters

00:23:51,360 --> 00:23:54,880
where you can cluster these points with

00:23:53,440 --> 00:23:57,039
respect to

00:23:54,880 --> 00:23:58,080
a weight so here the weight is value and

00:23:57,039 --> 00:24:00,080
the metric is sum

00:23:58,080 --> 00:24:01,760
so it essentially sums up all the values

00:24:00,080 --> 00:24:03,760
and creates these clusters

00:24:01,760 --> 00:24:05,520
and also you can you know do the heat

00:24:03,760 --> 00:24:06,320
you'd like to create a heat map with the

00:24:05,520 --> 00:24:09,679
style

00:24:06,320 --> 00:24:10,320
and the zoom level and also uh a similar

00:24:09,679 --> 00:24:12,559
interface

00:24:10,320 --> 00:24:13,360
is exposed for kepler gl along with

00:24:12,559 --> 00:24:15,679
volume

00:24:13,360 --> 00:24:16,840
so plotting with kepler becomes again as

00:24:15,679 --> 00:24:19,360
easy as

00:24:16,840 --> 00:24:21,840
series.kepler.com and then i save it to

00:24:19,360 --> 00:24:24,480
html file and i open it here

00:24:21,840 --> 00:24:24,880
and again i get the tooltip that ex

00:24:24,480 --> 00:24:26,799
that's

00:24:24,880 --> 00:24:29,200
exposed for me and you know i can

00:24:26,799 --> 00:24:32,799
continue to change it as i want to

00:24:29,200 --> 00:24:35,120
uh over here so and also i can create

00:24:32,799 --> 00:24:35,679
simple polygons which is again as simple

00:24:35,120 --> 00:24:38,159
as

00:24:35,679 --> 00:24:39,760
kepler.plot i pass the tooltip i pass

00:24:38,159 --> 00:24:41,600
the color which is rgb

00:24:39,760 --> 00:24:43,039
i pass the opacity i pass the stroke

00:24:41,600 --> 00:24:44,559
color which i want to be black

00:24:43,039 --> 00:24:46,960
and i want the stroke thickness to be

00:24:44,559 --> 00:24:48,880
one and the color to be red which is

00:24:46,960 --> 00:24:50,640
uh the rgb i'm passing and the tool tip

00:24:48,880 --> 00:24:51,679
to be continent so i hover over it i see

00:24:50,640 --> 00:24:53,679
continent

00:24:51,679 --> 00:24:54,960
uh and you know again you can come over

00:24:53,679 --> 00:24:57,440
here and you know

00:24:54,960 --> 00:24:58,320
change the color based on what you want

00:24:57,440 --> 00:25:01,120
or you know

00:24:58,320 --> 00:25:02,400
stick to defaults and again you can

00:25:01,120 --> 00:25:03,919
perform chlorophyt map

00:25:02,400 --> 00:25:05,679
where you mention the color field the

00:25:03,919 --> 00:25:07,200
field you want to color it by

00:25:05,679 --> 00:25:09,919
and you know the color scheme and

00:25:07,200 --> 00:25:12,799
everything and save it

00:25:09,919 --> 00:25:14,400
so that's how you know plotting becomes

00:25:12,799 --> 00:25:16,080
easier for you because

00:25:14,400 --> 00:25:17,440
it's not it's not on the library but

00:25:16,080 --> 00:25:19,039
it's a wrapper around

00:25:17,440 --> 00:25:20,720
existing libraries that are already

00:25:19,039 --> 00:25:22,640
present and i want to switch between

00:25:20,720 --> 00:25:26,000
them without having to remember all the

00:25:22,640 --> 00:25:27,440
interfaces uh so that's how i allow

00:25:26,000 --> 00:25:29,360
these plots to happen i already showed

00:25:27,440 --> 00:25:32,320
this to you in the documentation

00:25:29,360 --> 00:25:33,679
uh and also i'm focused like this

00:25:32,320 --> 00:25:36,640
package is focused on speed

00:25:33,679 --> 00:25:38,480
rather than providing support for uh

00:25:36,640 --> 00:25:41,760
custom intricate map flows

00:25:38,480 --> 00:25:43,919
and again thank you very much

00:25:41,760 --> 00:25:46,480
for listening to me you know getting

00:25:43,919 --> 00:25:49,760
through all the difficulties in the tech

00:25:46,480 --> 00:25:53,760
and yeah i'm done thank you

00:25:49,760 --> 00:25:56,240
so much that was great that was a really

00:25:53,760 --> 00:25:57,360
excellent talk and unfortunately because

00:25:56,240 --> 00:26:00,000
we had

00:25:57,360 --> 00:26:01,279
uh tech shenanigans there are not going

00:26:00,000 --> 00:26:04,000
to be time for questions

00:26:01,279 --> 00:26:06,240
in the recorded bit but thankfully we

00:26:04,000 --> 00:26:08,159
did capture all the tech shenanigans for

00:26:06,240 --> 00:26:11,360
the blooper reels so

00:26:08,159 --> 00:26:15,039
rest easy everyone uh please

00:26:11,360 --> 00:26:17,600
throw your questions at the uh vinulus

00:26:15,039 --> 00:26:20,159
and as i'm doing i will be around

00:26:17,600 --> 00:26:20,159
answering them

00:26:21,440 --> 00:26:25,840

YouTube URL: https://www.youtube.com/watch?v=kmvLn4Iagwo


