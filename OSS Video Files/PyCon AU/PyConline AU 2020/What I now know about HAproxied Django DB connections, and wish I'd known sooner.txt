Title: What I now know about HAproxied Django DB connections, and wish I'd known sooner
Publication date: 2020-09-08
Playlist: PyConline AU 2020
Description: 
	Florian Haas

https://2020.pycon.org.au/program/YZYTMX

When you’re running a Django application, the following things are all pretty commonplace:

* You use MySQL or MariaDB as your Django database backend.
* You don’t run a single standalone MySQL/MariaDB instance, but a Galera cluster.
* You run asynchronous tasks in Celery.

Now suppose your application doesn’t talk to your Galera cluster directly, but via HAProxy. That’s not exactly unheard of; in fact it’s an officially documented HA option for Galera. And, to complicate things further, this may be a feature of your setup that you, the application developer, don't necessarily have control over.

In such a scenario, you may be dealing with very "interesting" features of HAproxy which — if you are unfamiliar with them — can throw you very nasty curveballs.

Having been in the position where, together with my team, I *was* indeed unfamiliar with some of HAProxy's/Galera's intricacies and we were thus on he receiving end of those curveballs, I am taking this opportunity to share our findings so that our pain is someone else's gain. You have multiple options at your disposal — some in your infrastructure setup, and some in your Django application code. This talk covers both those angles.

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

Python, PyCon, PyConAU, PyConline

Fri Sep  4 13:55:00 2020 at Obvious
Captions: 
	00:00:00,000 --> 00:00:04,880
through the devops track here at pycon

00:00:01,920 --> 00:00:05,920
au 4 2020 thank you so much for joining

00:00:04,880 --> 00:00:09,200
us today

00:00:05,920 --> 00:00:11,840
it is amazing things are going so well

00:00:09,200 --> 00:00:12,639
yes i'm jinxing it on purpose everything

00:00:11,840 --> 00:00:14,639
has been running

00:00:12,639 --> 00:00:16,080
way too smoothly we have to increase the

00:00:14,639 --> 00:00:17,760
amounts of entropy in this particular

00:00:16,080 --> 00:00:19,439
track so that we can have lovely talks

00:00:17,760 --> 00:00:21,680
for next year

00:00:19,439 --> 00:00:22,560
the talk we have next is a pre-recorded

00:00:21,680 --> 00:00:26,560
talk by

00:00:22,560 --> 00:00:29,519
florian haas it's called what i now know

00:00:26,560 --> 00:00:31,840
about h.a proxy django db connections

00:00:29,519 --> 00:00:34,719
and wish i'd known sooner

00:00:31,840 --> 00:00:36,880
i'm fascinated by this because i know

00:00:34,719 --> 00:00:38,559
what most of the words there mean but i

00:00:36,880 --> 00:00:40,480
don't think i've ever tried using them

00:00:38,559 --> 00:00:42,160
all together at the same time

00:00:40,480 --> 00:00:44,800
so i'm sure i will learn something both

00:00:42,160 --> 00:00:46,399
about what we should do and what not to

00:00:44,800 --> 00:00:48,399
do

00:00:46,399 --> 00:00:50,160
florian is around to answer your

00:00:48,399 --> 00:00:51,120
questions and will be in the chat as

00:00:50,160 --> 00:00:52,879
well and he will

00:00:51,120 --> 00:00:54,399
he's happy to answer questions both at

00:00:52,879 --> 00:00:55,600
the end but also as

00:00:54,399 --> 00:00:57,520
through the talk if you've got

00:00:55,600 --> 00:00:59,280
particular questions around whatever is

00:00:57,520 --> 00:01:01,039
uh happening at that particular moment

00:00:59,280 --> 00:01:03,920
in the in the discussion

00:01:01,039 --> 00:01:05,600
do ask them in the chat once we finish

00:01:03,920 --> 00:01:06,960
up with this what we're generally doing

00:01:05,600 --> 00:01:08,799
is if there's still some questions

00:01:06,960 --> 00:01:10,240
running or we're running out of time

00:01:08,799 --> 00:01:12,560
we take all those questions into the

00:01:10,240 --> 00:01:15,040
devops hallway track you'll find that

00:01:12,560 --> 00:01:17,360
onto the left part of the navigation

00:01:15,040 --> 00:01:18,799
within venulis so do jump into there

00:01:17,360 --> 00:01:19,360
we've had some really good discussion

00:01:18,799 --> 00:01:21,759
running

00:01:19,360 --> 00:01:23,040
pretty much throughout the day so if you

00:01:21,759 --> 00:01:23,520
if you just want to be talking with

00:01:23,040 --> 00:01:25,680
people

00:01:23,520 --> 00:01:26,720
while you're listening to various

00:01:25,680 --> 00:01:28,560
various talks

00:01:26,720 --> 00:01:30,479
we can actually do that here in the

00:01:28,560 --> 00:01:31,520
online things that we wouldn't actually

00:01:30,479 --> 00:01:35,200
be able to do

00:01:31,520 --> 00:01:38,320
if we were having this in person so

00:01:35,200 --> 00:01:39,439
now let's hear all about haproxy django

00:01:38,320 --> 00:01:42,479
db connections

00:01:39,439 --> 00:01:42,479
from florian haas

00:01:47,759 --> 00:01:51,280
hello dear pykon eu people i'm here to

00:01:50,640 --> 00:01:53,439
talk about

00:01:51,280 --> 00:01:54,479
an interesting issue that my team and i

00:01:53,439 --> 00:01:56,640
ran into

00:01:54,479 --> 00:01:57,840
a few months ago which has to do with

00:01:56,640 --> 00:02:00,159
the very interesting

00:01:57,840 --> 00:02:01,360
behavior of asynchronous celery tasks so

00:02:00,159 --> 00:02:03,280
for that matter

00:02:01,360 --> 00:02:05,119
any long-running operation really in a

00:02:03,280 --> 00:02:08,720
django application

00:02:05,119 --> 00:02:09,599
when it talks to a mysql or mariadb

00:02:08,720 --> 00:02:12,319
cluster

00:02:09,599 --> 00:02:13,040
via haproxy hence the title what i now

00:02:12,319 --> 00:02:15,520
know about

00:02:13,040 --> 00:02:17,280
h.a proxied django database connections

00:02:15,520 --> 00:02:19,520
and which i've known sooner

00:02:17,280 --> 00:02:21,360
so let's start with some basics to set

00:02:19,520 --> 00:02:24,080
the stage

00:02:21,360 --> 00:02:26,080
when you're running a django application

00:02:24,080 --> 00:02:29,200
the following things are i guess all

00:02:26,080 --> 00:02:30,080
quite commonplace you use mysql or

00:02:29,200 --> 00:02:32,879
mariedb

00:02:30,080 --> 00:02:33,599
as your django database backend you

00:02:32,879 --> 00:02:37,200
don't run

00:02:33,599 --> 00:02:39,360
a single mysql server but a

00:02:37,200 --> 00:02:41,440
galera cluster with replication

00:02:39,360 --> 00:02:42,400
everything and then you run asynchronous

00:02:41,440 --> 00:02:45,120
tasks in

00:02:42,400 --> 00:02:46,160
salary and that way if you have a

00:02:45,120 --> 00:02:48,000
complex operation

00:02:46,160 --> 00:02:49,599
in your application you don't

00:02:48,000 --> 00:02:50,080
necessarily have to handle that in your

00:02:49,599 --> 00:02:52,959
latency

00:02:50,080 --> 00:02:54,480
critical request code path but instead

00:02:52,959 --> 00:02:57,920
you can have something

00:02:54,480 --> 00:03:00,000
like this so what this is is the example

00:02:57,920 --> 00:03:02,239
definition of a celery task that is to

00:03:00,000 --> 00:03:05,360
say some functionality that is meant to

00:03:02,239 --> 00:03:08,640
run asynchronously meaning outside

00:03:05,360 --> 00:03:10,720
the request path so it's essentially a

00:03:08,640 --> 00:03:13,680
subclass of celery task

00:03:10,720 --> 00:03:14,080
and it has a run method that implements

00:03:13,680 --> 00:03:17,120
the

00:03:14,080 --> 00:03:18,959
asynchronously run functionality

00:03:17,120 --> 00:03:20,800
and then what you can do from your

00:03:18,959 --> 00:03:21,680
django view or your management command

00:03:20,800 --> 00:03:24,799
or whatever

00:03:21,680 --> 00:03:27,760
is you can invoke this like so so

00:03:24,799 --> 00:03:28,799
um what what this means is the code

00:03:27,760 --> 00:03:32,080
define

00:03:28,799 --> 00:03:35,680
defined in the run method of the complex

00:03:32,080 --> 00:03:38,480
operation object that can run

00:03:35,680 --> 00:03:39,840
asynchronously where while the http

00:03:38,480 --> 00:03:42,560
request

00:03:39,840 --> 00:03:44,400
for example here to slash some path can

00:03:42,560 --> 00:03:46,640
immediately return a response

00:03:44,400 --> 00:03:48,319
and of course you can then subsequently

00:03:46,640 --> 00:03:49,599
fetch the asynchronous tasks results in

00:03:48,319 --> 00:03:53,439
a later request

00:03:49,599 --> 00:03:55,439
and present that to the user

00:03:53,439 --> 00:03:56,879
and the way that we do this in this case

00:03:55,439 --> 00:03:59,439
is via

00:03:56,879 --> 00:04:00,400
calling the complex operations delay

00:03:59,439 --> 00:04:02,640
method and then

00:04:00,400 --> 00:04:03,920
passing in some parameters there are

00:04:02,640 --> 00:04:05,760
other ways to

00:04:03,920 --> 00:04:06,959
invoke salary tasks getting into those

00:04:05,760 --> 00:04:09,760
is not the point of

00:04:06,959 --> 00:04:11,439
this talk and there's also something

00:04:09,760 --> 00:04:13,439
that i'm not covering in this talk which

00:04:11,439 --> 00:04:15,200
is a brand new feature in django 31

00:04:13,439 --> 00:04:16,639
called asynchronous views i'll not get

00:04:15,200 --> 00:04:19,840
into those here that's

00:04:16,639 --> 00:04:21,199
uh for three reasons one is i haven't

00:04:19,840 --> 00:04:22,960
used them yet and i just

00:04:21,199 --> 00:04:24,720
just don't feel qualified to talk about

00:04:22,960 --> 00:04:27,520
them

00:04:24,720 --> 00:04:28,000
two the actual problem that i'm about to

00:04:27,520 --> 00:04:29,759
describe

00:04:28,000 --> 00:04:31,280
is something else else as you'll see in

00:04:29,759 --> 00:04:33,600
a moment and three

00:04:31,280 --> 00:04:37,120
there is already a talk in the program

00:04:33,600 --> 00:04:40,080
on django asynchronous views and the rm

00:04:37,120 --> 00:04:42,560
which is presumably going to be very

00:04:40,080 --> 00:04:44,000
interesting and if you're into

00:04:42,560 --> 00:04:45,520
asynchronous views or want to learn more

00:04:44,000 --> 00:04:47,280
about that that's a talk that i would

00:04:45,520 --> 00:04:49,919
highly recommend

00:04:47,280 --> 00:04:50,960
okay so with that said let's inject

00:04:49,919 --> 00:04:53,520
another item

00:04:50,960 --> 00:04:54,400
into the setup suppose your application

00:04:53,520 --> 00:04:56,639
doesn't talk to

00:04:54,400 --> 00:04:58,720
your galera cluster directly but it does

00:04:56,639 --> 00:05:00,080
so via hha proxy and that's not exactly

00:04:58,720 --> 00:05:03,199
unheard of in fact

00:05:00,080 --> 00:05:05,440
it's an officially documented ha option

00:05:03,199 --> 00:05:07,680
for galera it's not the only one you can

00:05:05,440 --> 00:05:08,800
use for example keeper ifd or pacemaker

00:05:07,680 --> 00:05:11,919
or anything else

00:05:08,800 --> 00:05:13,919
but ha proxy is one of the options that

00:05:11,919 --> 00:05:15,759
you have available at your disposal

00:05:13,919 --> 00:05:17,440
so a few months ago my team and i ran

00:05:15,759 --> 00:05:18,960
exactly this sort of setup

00:05:17,440 --> 00:05:21,520
for the first time we'd previously been

00:05:18,960 --> 00:05:23,280
using mariadb with galera but

00:05:21,520 --> 00:05:25,680
not with h.a proxy we use cubelived

00:05:23,280 --> 00:05:26,720
instead and we ran into some interesting

00:05:25,680 --> 00:05:29,840
issues

00:05:26,720 --> 00:05:33,039
and the issues that we ran into

00:05:29,840 --> 00:05:34,720
is a specific kind of database

00:05:33,039 --> 00:05:37,600
operational error

00:05:34,720 --> 00:05:39,520
so what we saw is um we were running a

00:05:37,600 --> 00:05:41,199
django application against this he

00:05:39,520 --> 00:05:43,520
proxified galera cluster

00:05:41,199 --> 00:05:45,199
and we have some rather long running

00:05:43,520 --> 00:05:46,720
salary tasks and we suddenly started

00:05:45,199 --> 00:05:49,039
seeing a currencies

00:05:46,720 --> 00:05:49,919
of these operational error exceptions

00:05:49,039 --> 00:05:53,120
that map to

00:05:49,919 --> 00:05:55,039
mysql server error 2013

00:05:53,120 --> 00:05:56,960
lost connection to mysql server during

00:05:55,039 --> 00:05:59,280
query and that's

00:05:56,960 --> 00:06:00,960
rather a weird error message to get or

00:05:59,280 --> 00:06:02,639
rather an unexpected error message to

00:06:00,960 --> 00:06:03,440
get because it's quite distinct from

00:06:02,639 --> 00:06:05,039
another

00:06:03,440 --> 00:06:07,360
mysql error code that you may be quite

00:06:05,039 --> 00:06:08,720
familiar with 2006 mysql server has gone

00:06:07,360 --> 00:06:10,160
away

00:06:08,720 --> 00:06:12,560
those are two really two different

00:06:10,160 --> 00:06:14,720
beasts 2006

00:06:12,560 --> 00:06:16,319
means either the server or the client

00:06:14,720 --> 00:06:17,600
has gracefully torn down the connection

00:06:16,319 --> 00:06:20,800
and there's no database

00:06:17,600 --> 00:06:23,199
session that exists anymore whereas

00:06:20,800 --> 00:06:24,240
error 2013 really means the connection

00:06:23,199 --> 00:06:25,759
between the client

00:06:24,240 --> 00:06:27,600
and the server dropped in the middle of

00:06:25,759 --> 00:06:29,759
executing a query

00:06:27,600 --> 00:06:31,600
and that's kind of really sort of an out

00:06:29,759 --> 00:06:32,960
of nowhere connection drop

00:06:31,600 --> 00:06:35,039
in the middle of a query or in the

00:06:32,960 --> 00:06:37,120
middle of a session actually

00:06:35,039 --> 00:06:39,199
which normally occurs only if your

00:06:37,120 --> 00:06:41,440
network has gone very very wonky so

00:06:39,199 --> 00:06:42,800
for example um you know you have a

00:06:41,440 --> 00:06:43,919
switch that's acting up and it's

00:06:42,800 --> 00:06:45,120
dropping packets

00:06:43,919 --> 00:06:47,360
you know that sort of thing and thus

00:06:45,120 --> 00:06:50,160
your tcp connections die and

00:06:47,360 --> 00:06:51,120
you know that sort of problem but we

00:06:50,160 --> 00:06:54,560
could rule that out

00:06:51,120 --> 00:06:56,000
um we looked at that and we could rule

00:06:54,560 --> 00:06:58,800
that out as a potential

00:06:56,000 --> 00:07:00,240
cause of the problem and it turned out

00:06:58,800 --> 00:07:02,319
that with ha proxy

00:07:00,240 --> 00:07:05,039
there is a different reason that you

00:07:02,319 --> 00:07:07,680
will see this specific error

00:07:05,039 --> 00:07:10,160
and there is a actually a relatively

00:07:07,680 --> 00:07:12,479
easy way to distill this problem

00:07:10,160 --> 00:07:14,479
and to reproduce it that doesn't

00:07:12,479 --> 00:07:16,720
actually require a whole lot of

00:07:14,479 --> 00:07:18,080
scaffolding because if you have access

00:07:16,720 --> 00:07:20,319
to manage pi

00:07:18,080 --> 00:07:21,199
for your django application you also

00:07:20,319 --> 00:07:23,440
have access to

00:07:21,199 --> 00:07:24,639
manage pi shell and that's helpful

00:07:23,440 --> 00:07:25,039
because it gives you an interactive

00:07:24,639 --> 00:07:26,800
shell

00:07:25,039 --> 00:07:28,319
that is populated with populated with

00:07:26,800 --> 00:07:29,520
the entire environment of your django

00:07:28,319 --> 00:07:32,080
application and therefore you can do a

00:07:29,520 --> 00:07:34,800
lot of testing interactive testing

00:07:32,080 --> 00:07:35,120
with that and there is a very easy way

00:07:34,800 --> 00:07:38,240
to

00:07:35,120 --> 00:07:41,680
trigger the adverse effect of this

00:07:38,240 --> 00:07:43,840
configuration with

00:07:41,680 --> 00:07:45,759
your django application going through to

00:07:43,840 --> 00:07:47,840
your mysql galera cluster

00:07:45,759 --> 00:07:48,879
via aha proxy because all that you have

00:07:47,840 --> 00:07:50,240
to do is

00:07:48,879 --> 00:07:52,400
you have to create an object from a

00:07:50,240 --> 00:07:53,680
model so it fetches data from the

00:07:52,400 --> 00:07:56,639
database and then

00:07:53,680 --> 00:07:58,080
wait a bit and then try to do anything

00:07:56,639 --> 00:07:59,280
else with that object that requires

00:07:58,080 --> 00:08:00,560
database interaction like

00:07:59,280 --> 00:08:02,720
re-fetch it or refresh it from the

00:08:00,560 --> 00:08:06,160
database like so

00:08:02,720 --> 00:08:09,919
so here what happens here i open

00:08:06,160 --> 00:08:12,639
a session to the database by creating

00:08:09,919 --> 00:08:15,759
user objects or by creating a user

00:08:12,639 --> 00:08:18,319
instance with user object gets

00:08:15,759 --> 00:08:19,280
user objects get i'm sorry and that

00:08:18,319 --> 00:08:21,199
instance is called

00:08:19,280 --> 00:08:22,479
me because it happens to be the user

00:08:21,199 --> 00:08:25,120
object that

00:08:22,479 --> 00:08:26,800
corresponds to my user account in this

00:08:25,120 --> 00:08:30,479
django system

00:08:26,800 --> 00:08:33,360
so i do that and what happens then

00:08:30,479 --> 00:08:34,560
is i get an in-memory object named me

00:08:33,360 --> 00:08:37,760
that is an instance

00:08:34,560 --> 00:08:39,599
of of my user model and

00:08:37,760 --> 00:08:40,959
it represents the user object with the

00:08:39,599 --> 00:08:43,599
username florian

00:08:40,959 --> 00:08:44,320
and then i simulate a long running

00:08:43,599 --> 00:08:55,839
operation

00:08:44,320 --> 00:08:55,839
in my database right stop that silly

00:08:56,240 --> 00:08:59,680
and in this case in the interactive

00:08:57,519 --> 00:09:01,680
shell i simply simulate it by sleeping

00:08:59,680 --> 00:09:03,839
for 40 seconds and then i do another

00:09:01,680 --> 00:09:05,920
database operation like in this case i

00:09:03,839 --> 00:09:07,360
refresh the object from the from the

00:09:05,920 --> 00:09:09,120
database so refresh from db

00:09:07,360 --> 00:09:11,040
simply repopulates the object's

00:09:09,120 --> 00:09:11,440
attributes with the corresponding values

00:09:11,040 --> 00:09:14,800
in the

00:09:11,440 --> 00:09:17,760
tables and columns of my my database

00:09:14,800 --> 00:09:18,720
so i sleep for 40 seconds i refresh

00:09:17,760 --> 00:09:20,800
everything

00:09:18,720 --> 00:09:22,560
completes normally the refresh completes

00:09:20,800 --> 00:09:25,519
normally there's no error

00:09:22,560 --> 00:09:27,040
all is fine and dandy but if i sleep

00:09:25,519 --> 00:09:28,720
just a little bit longer if i simulate

00:09:27,040 --> 00:09:31,040
just a little bit of a longer operation

00:09:28,720 --> 00:09:33,760
in this case i'm sleeping for 55 seconds

00:09:31,040 --> 00:09:35,279
and then i try the same thing again then

00:09:33,760 --> 00:09:37,040
suddenly all hell breaks loose so

00:09:35,279 --> 00:09:39,600
suddenly i run into this

00:09:37,040 --> 00:09:42,000
weird operational error 2013 lost

00:09:39,600 --> 00:09:45,120
connection to mysql server during query

00:09:42,000 --> 00:09:45,760
so that's odd so where does that come

00:09:45,120 --> 00:09:47,440
from

00:09:45,760 --> 00:09:48,800
i can sleep for some time i can have an

00:09:47,440 --> 00:09:51,200
operation that

00:09:48,800 --> 00:09:52,880
takes a certain amount of time but you

00:09:51,200 --> 00:09:55,120
know if it runs over if it runs longer

00:09:52,880 --> 00:09:58,640
then things break so why is that

00:09:55,120 --> 00:09:59,120
and in fact it's once my object is in

00:09:58,640 --> 00:10:02,000
this

00:09:59,120 --> 00:10:04,000
uh in this state then it's a bit

00:10:02,000 --> 00:10:06,399
non-trivial to sort of recover from that

00:10:04,000 --> 00:10:07,920
which is because if i now do refresh

00:10:06,399 --> 00:10:10,320
from db again i just get

00:10:07,920 --> 00:10:12,640
the 2006 error because at this point

00:10:10,320 --> 00:10:13,839
we've actually torn down the connection

00:10:12,640 --> 00:10:15,839
but i don't automatically get my

00:10:13,839 --> 00:10:16,720
database connection back what i have to

00:10:15,839 --> 00:10:19,040
do instead

00:10:16,720 --> 00:10:20,399
in django is i have to use the

00:10:19,040 --> 00:10:23,200
connection close

00:10:20,399 --> 00:10:24,480
convenience method to actually close my

00:10:23,200 --> 00:10:27,600
database session

00:10:24,480 --> 00:10:28,959
and if i then say for example refresh

00:10:27,600 --> 00:10:31,279
the from the database

00:10:28,959 --> 00:10:33,519
or save the object or whatnot then i

00:10:31,279 --> 00:10:36,399
don't need to manually reconnect because

00:10:33,519 --> 00:10:37,920
django will do that for me so i will

00:10:36,399 --> 00:10:39,360
have to like manually close the

00:10:37,920 --> 00:10:40,240
connection or close the connection in

00:10:39,360 --> 00:10:42,079
code

00:10:40,240 --> 00:10:43,440
and then or in this case in the

00:10:42,079 --> 00:10:46,720
interactive shell

00:10:43,440 --> 00:10:47,680
and then um once i want to interact with

00:10:46,720 --> 00:10:50,160
the database again

00:10:47,680 --> 00:10:51,600
django will recreate that connection for

00:10:50,160 --> 00:10:53,040
me

00:10:51,600 --> 00:10:54,560
and of course you know at this stage i

00:10:53,040 --> 00:10:56,160
can't just read from the object again

00:10:54,560 --> 00:10:57,920
but i can also make a right operation

00:10:56,160 --> 00:11:00,399
like for example i could be calling

00:10:57,920 --> 00:11:02,079
save on the me object which writes to

00:11:00,399 --> 00:11:04,959
the database

00:11:02,079 --> 00:11:06,240
so where does this rather unintuitive

00:11:04,959 --> 00:11:08,480
behavior

00:11:06,240 --> 00:11:10,240
come from what is it that makes my

00:11:08,480 --> 00:11:12,880
django application suddenly

00:11:10,240 --> 00:11:14,000
lose its database session and why can i

00:11:12,880 --> 00:11:16,880
keep a session idle for

00:11:14,000 --> 00:11:17,600
40 seconds and everything's fine but if

00:11:16,880 --> 00:11:20,880
i try

00:11:17,600 --> 00:11:22,000
to keep my session idle for 55 seconds

00:11:20,880 --> 00:11:24,000
you know not do anything with the

00:11:22,000 --> 00:11:27,120
database for 55 seconds

00:11:24,000 --> 00:11:29,519
why does that break and the

00:11:27,120 --> 00:11:30,720
reason or the answer to that is um this

00:11:29,519 --> 00:11:32,160
is actually in

00:11:30,720 --> 00:11:34,320
the settings or rather the default

00:11:32,160 --> 00:11:37,600
settings of haproxy

00:11:34,320 --> 00:11:40,560
um because haproxy allows us to set

00:11:37,600 --> 00:11:41,040
four different timeout values and i'll

00:11:40,560 --> 00:11:43,600
go to

00:11:41,040 --> 00:11:44,560
over those four briefly so there's timer

00:11:43,600 --> 00:11:46,959
connect

00:11:44,560 --> 00:11:49,360
which is the time in which a back-end

00:11:46,959 --> 00:11:51,760
server must accept a tcp connection and

00:11:49,360 --> 00:11:54,240
the default for that is five seconds

00:11:51,760 --> 00:11:54,800
this time i'll check that's the time in

00:11:54,240 --> 00:11:57,839
which

00:11:54,800 --> 00:11:59,680
uh backend must respond to a health

00:11:57,839 --> 00:12:02,959
check and the timeout for that is also

00:11:59,680 --> 00:12:05,279
five seconds then there's timeout server

00:12:02,959 --> 00:12:06,399
that's how long the server is allowed to

00:12:05,279 --> 00:12:08,160
take

00:12:06,399 --> 00:12:09,920
before you know when it answers a

00:12:08,160 --> 00:12:10,800
request the default for that is 50

00:12:09,920 --> 00:12:12,079
seconds

00:12:10,800 --> 00:12:14,079
and then and this is the important one

00:12:12,079 --> 00:12:16,240
there's also timeout client which is

00:12:14,079 --> 00:12:17,279
how long the client is allowed to be

00:12:16,240 --> 00:12:20,720
idle

00:12:17,279 --> 00:12:22,160
before ha proxy turns

00:12:20,720 --> 00:12:24,079
tears down the connection and the

00:12:22,160 --> 00:12:26,560
default for that is also

00:12:24,079 --> 00:12:27,279
50 seconds and that value is kind of

00:12:26,560 --> 00:12:29,519
important

00:12:27,279 --> 00:12:31,600
because the reason you run into this

00:12:29,519 --> 00:12:33,839
problem that i just described

00:12:31,600 --> 00:12:35,839
only with h8 proxy and not with a

00:12:33,839 --> 00:12:38,480
standalone mysql server

00:12:35,839 --> 00:12:40,720
or a cluster that uses a keeper live

00:12:38,480 --> 00:12:42,880
d4ha where you actually talk directly to

00:12:40,720 --> 00:12:45,200
a cluster node that just happens to hold

00:12:42,880 --> 00:12:46,320
a virtual ip address so the reason why

00:12:45,200 --> 00:12:48,240
you're running into this

00:12:46,320 --> 00:12:49,519
only with aj proxy and you wouldn't run

00:12:48,240 --> 00:12:51,600
into this with with something like

00:12:49,519 --> 00:12:52,000
keeper ifd is the vast discrepancy

00:12:51,600 --> 00:12:55,120
between

00:12:52,000 --> 00:12:59,360
this default uh client timeout

00:12:55,120 --> 00:13:03,120
in ha proxy and the mysql server's own

00:12:59,360 --> 00:13:05,120
corresponding wait timeout which is the

00:13:03,120 --> 00:13:06,639
amount of time that allow that it allows

00:13:05,120 --> 00:13:07,200
a session to be idle before it takes it

00:13:06,639 --> 00:13:10,560
down

00:13:07,200 --> 00:13:10,959
because he proxy timeout client defaults

00:13:10,560 --> 00:13:14,160
to

00:13:10,959 --> 00:13:18,240
50 seconds whereas mysql wait timeout

00:13:14,160 --> 00:13:21,279
defaults to a whopping 8 hours or 28

00:13:18,240 --> 00:13:23,600
800 seconds so therefore if you're

00:13:21,279 --> 00:13:26,240
running a django app that talks to your

00:13:23,600 --> 00:13:28,160
mysql galera cluster without ha proxy

00:13:26,240 --> 00:13:29,519
it's practically impossible to ever hit

00:13:28,160 --> 00:13:31,680
the limit that

00:13:29,519 --> 00:13:33,440
mysql server imposes on the connection

00:13:31,680 --> 00:13:36,480
but it's quite easy

00:13:33,440 --> 00:13:38,079
or at least not unheard of to have a

00:13:36,480 --> 00:13:39,600
database operation no i'm sorry not a

00:13:38,079 --> 00:13:42,720
database operation but an

00:13:39,600 --> 00:13:44,399
operation with a database query at the

00:13:42,720 --> 00:13:44,800
beginning and a database query at the

00:13:44,399 --> 00:13:46,639
end

00:13:44,800 --> 00:13:48,399
that runs for something like 50 seconds

00:13:46,639 --> 00:13:50,959
specifically if you're doing

00:13:48,399 --> 00:13:51,600
something in a salary task like that's

00:13:50,959 --> 00:13:53,760
indeed

00:13:51,600 --> 00:13:54,639
one thing that salaries is good for so

00:13:53,760 --> 00:13:56,560
say for example

00:13:54,639 --> 00:13:58,480
your salary task makes a series of rest

00:13:56,560 --> 00:14:00,720
api calls to other services

00:13:58,480 --> 00:14:02,399
and all of those take a few seconds or

00:14:00,720 --> 00:14:05,519
perhaps it does an object upload

00:14:02,399 --> 00:14:06,880
to something like s3 so when when that

00:14:05,519 --> 00:14:09,199
sort of thing happens then

00:14:06,880 --> 00:14:10,320
running longer than 50 seconds for a for

00:14:09,199 --> 00:14:13,120
a task for an asynchronous

00:14:10,320 --> 00:14:13,680
salary task is absolutely not unheard of

00:14:13,120 --> 00:14:16,399
so

00:14:13,680 --> 00:14:17,839
um how does this relate to real world

00:14:16,399 --> 00:14:20,880
applications

00:14:17,839 --> 00:14:23,120
um so as opposed to you know

00:14:20,880 --> 00:14:24,800
doing sleep in an interactive shell uh

00:14:23,120 --> 00:14:25,199
suppose you have a long-running task

00:14:24,800 --> 00:14:27,839
like a

00:14:25,199 --> 00:14:28,399
long-running salary task with a database

00:14:27,839 --> 00:14:30,639
update

00:14:28,399 --> 00:14:32,079
or a query at the beginning and at the

00:14:30,639 --> 00:14:35,279
end of something complicated

00:14:32,079 --> 00:14:38,720
right like here

00:14:35,279 --> 00:14:40,720
so what we do here is we retrieve

00:14:38,720 --> 00:14:43,199
data from the database into memory

00:14:40,720 --> 00:14:44,800
populating our object that's named thing

00:14:43,199 --> 00:14:46,320
and then we do something very complex

00:14:44,800 --> 00:14:47,279
with it so suppose that takes on the

00:14:46,320 --> 00:14:50,000
order of minutes

00:14:47,279 --> 00:14:50,560
and finally when we're done we want to

00:14:50,000 --> 00:14:52,560
take

00:14:50,560 --> 00:14:53,839
the modified data for our in-memory

00:14:52,560 --> 00:14:56,079
object and persist it back

00:14:53,839 --> 00:14:57,279
to the database or for example we might

00:14:56,079 --> 00:15:00,079
be doing something like

00:14:57,279 --> 00:15:01,600
we might be using django fsm and we're

00:15:00,079 --> 00:15:02,079
implementing a finite state machine with

00:15:01,600 --> 00:15:04,079
that

00:15:02,079 --> 00:15:05,440
and we have some processing tasks and at

00:15:04,079 --> 00:15:06,880
the beginning of that we want to

00:15:05,440 --> 00:15:08,480
you know switch the object into a

00:15:06,880 --> 00:15:09,199
processing state and then we do our

00:15:08,480 --> 00:15:10,720
processing

00:15:09,199 --> 00:15:12,480
and then at the end we want to switch it

00:15:10,720 --> 00:15:15,920
into a done state

00:15:12,480 --> 00:15:18,959
or something like that okay

00:15:15,920 --> 00:15:21,519
and so if this takes

00:15:18,959 --> 00:15:22,240
longer than the aforementioned 50

00:15:21,519 --> 00:15:25,440
seconds

00:15:22,240 --> 00:15:27,839
by default then you're actually going to

00:15:25,440 --> 00:15:31,759
hit these timeouts

00:15:27,839 --> 00:15:33,120
because um the the timeouts themselves

00:15:31,759 --> 00:15:36,240
the timeout clock

00:15:33,120 --> 00:15:39,759
is going to start running when you make

00:15:36,240 --> 00:15:42,320
your initial database operation

00:15:39,759 --> 00:15:44,000
and it's not going to be reset until you

00:15:42,320 --> 00:15:46,720
do the one at the end

00:15:44,000 --> 00:15:49,040
and if then you actually run into this

00:15:46,720 --> 00:15:52,399
50 second timeout that's how you get

00:15:49,040 --> 00:15:56,000
the 2013 operational error

00:15:52,399 --> 00:15:58,720
so now that we've identified the problem

00:15:56,000 --> 00:16:00,399
how do we fix it and there's absolutely

00:15:58,720 --> 00:16:01,440
well there's actually multiple solutions

00:16:00,399 --> 00:16:04,240
to the problem

00:16:01,440 --> 00:16:05,120
but which of them is actually available

00:16:04,240 --> 00:16:08,720
to you

00:16:05,120 --> 00:16:10,320
depends greatly on a couple of questions

00:16:08,720 --> 00:16:12,160
and the questions are are you the

00:16:10,320 --> 00:16:14,000
developer do you own the code meaning

00:16:12,160 --> 00:16:15,839
you can fix this in your own code

00:16:14,000 --> 00:16:17,199
but perhaps you can't change much about

00:16:15,839 --> 00:16:18,959
the infrastructure so

00:16:17,199 --> 00:16:21,199
you can't ask anyone okay let's please

00:16:18,959 --> 00:16:22,399
not use haproxy because you're doing you

00:16:21,199 --> 00:16:24,480
know you're using some sort of cloud

00:16:22,399 --> 00:16:26,399
load bouncer that mandates that

00:16:24,480 --> 00:16:28,399
but you do have control over the code or

00:16:26,399 --> 00:16:28,880
conversely are you perhaps the systems

00:16:28,399 --> 00:16:30,880
person

00:16:28,880 --> 00:16:32,880
who is just maintaining this code or

00:16:30,880 --> 00:16:34,480
running this code or operating this code

00:16:32,880 --> 00:16:36,160
and you can control all the aspects of

00:16:34,480 --> 00:16:37,839
the infrastructure but you can't change

00:16:36,160 --> 00:16:39,120
the code itself

00:16:37,839 --> 00:16:40,399
obviously if you have control over

00:16:39,120 --> 00:16:41,519
neither the one or the other then you're

00:16:40,399 --> 00:16:43,199
kind of out of luck

00:16:41,519 --> 00:16:45,199
and if you call all the shots about both

00:16:43,199 --> 00:16:47,440
then you can essentially pick and choose

00:16:45,199 --> 00:16:49,360
but what follows are your options are

00:16:47,440 --> 00:16:51,759
your options

00:16:49,360 --> 00:16:53,440
so first if it's your code base and you

00:16:51,759 --> 00:16:53,920
want to make it robust in such a way

00:16:53,440 --> 00:16:56,800
that it

00:16:53,920 --> 00:16:58,639
can run against any mysql gallery

00:16:56,800 --> 00:17:00,399
environment behind ah proxy no matter

00:16:58,639 --> 00:17:02,320
how that is configured you have a couple

00:17:00,399 --> 00:17:04,559
of ways to do that

00:17:02,320 --> 00:17:05,919
first you can explicitly keep your

00:17:04,559 --> 00:17:08,240
database connections

00:17:05,919 --> 00:17:10,400
shorter so you can keep your database

00:17:08,240 --> 00:17:11,919
sessions alive for such a short time

00:17:10,400 --> 00:17:15,120
that you practically never hit

00:17:11,919 --> 00:17:16,480
the ha proxy timeouts because thankfully

00:17:15,120 --> 00:17:18,000
as i already mentioned django order

00:17:16,480 --> 00:17:20,400
reconnects to your database

00:17:18,000 --> 00:17:21,919
every time it needs to do something if

00:17:20,400 --> 00:17:23,439
it doesn't have a connection already so

00:17:21,919 --> 00:17:25,439
the only thing that you need to worry

00:17:23,439 --> 00:17:27,600
about is closing connections and then

00:17:25,439 --> 00:17:30,559
reopening them is automatic

00:17:27,600 --> 00:17:30,880
for example in this case here what you

00:17:30,559 --> 00:17:34,000
do

00:17:30,880 --> 00:17:37,440
is immediately after you've populated

00:17:34,000 --> 00:17:39,840
your object your thing object with

00:17:37,440 --> 00:17:41,200
objects get you close the database

00:17:39,840 --> 00:17:42,080
connection then you do all sorts of

00:17:41,200 --> 00:17:45,120
things to

00:17:42,080 --> 00:17:46,720
the object in memory and then at the

00:17:45,120 --> 00:17:49,679
very end

00:17:46,720 --> 00:17:51,520
you uh do your save or whatever it is

00:17:49,679 --> 00:17:54,559
that you need to do and the connection

00:17:51,520 --> 00:17:57,760
will automatically be reopened

00:17:54,559 --> 00:18:01,360
for you by django

00:17:57,760 --> 00:18:04,080
um now that's quite

00:18:01,360 --> 00:18:06,080
a suitable approach if you're just you

00:18:04,080 --> 00:18:09,200
know writing some

00:18:06,080 --> 00:18:09,679
new code and the other option that you

00:18:09,200 --> 00:18:12,799
have

00:18:09,679 --> 00:18:14,320
is uh you can just catch the errors

00:18:12,799 --> 00:18:16,640
when they happen now here's a

00:18:14,320 --> 00:18:19,919
deliberately over trivialized example

00:18:16,640 --> 00:18:20,480
right so what you do is you populate

00:18:19,919 --> 00:18:23,600
your

00:18:20,480 --> 00:18:24,240
object and then you do something that

00:18:23,600 --> 00:18:26,559
can take

00:18:24,240 --> 00:18:28,559
you know less than a timeout or can take

00:18:26,559 --> 00:18:31,919
longer than the timeout and then

00:18:28,559 --> 00:18:35,440
when you actually hit a problem

00:18:31,919 --> 00:18:36,240
then you just retry but that's really a

00:18:35,440 --> 00:18:38,080
bad idea

00:18:36,240 --> 00:18:40,320
you'd never actually implement it this

00:18:38,080 --> 00:18:41,840
way because you know the one-time retry

00:18:40,320 --> 00:18:42,559
that this example shows is far too

00:18:41,840 --> 00:18:44,799
trivial

00:18:42,559 --> 00:18:47,039
you probably want to retry up to end

00:18:44,799 --> 00:18:48,880
times you want that to be configurable

00:18:47,039 --> 00:18:50,880
you probably want exponential back off

00:18:48,880 --> 00:18:52,720
or something like that

00:18:50,880 --> 00:18:54,000
and in detail it becomes complicated

00:18:52,720 --> 00:18:55,840
really quickly you probably also want

00:18:54,000 --> 00:18:57,120
some logging to catch this sort of thing

00:18:55,840 --> 00:18:59,760
etc

00:18:57,120 --> 00:19:00,320
so in short you really don't want to

00:18:59,760 --> 00:19:02,400
probably

00:19:00,320 --> 00:19:04,480
really don't want to handcraft this but

00:19:02,400 --> 00:19:06,160
rely on something that already does this

00:19:04,480 --> 00:19:07,760
for you and has already done the heavy

00:19:06,160 --> 00:19:09,360
lifting for you and someone has already

00:19:07,760 --> 00:19:12,320
figured out how to do this

00:19:09,360 --> 00:19:14,559
and something that comes in very handy

00:19:12,320 --> 00:19:17,440
here is a library called tenacity

00:19:14,559 --> 00:19:18,080
and tenacity has a retry method that you

00:19:17,440 --> 00:19:21,280
can use

00:19:18,080 --> 00:19:22,880
as a decorator which you can which which

00:19:21,280 --> 00:19:23,760
can conveniently provide everything that

00:19:22,880 --> 00:19:27,120
you need

00:19:23,760 --> 00:19:29,440
to you so the reconnect

00:19:27,120 --> 00:19:32,080
all of that so all that you need to do

00:19:29,440 --> 00:19:34,000
is you need to add a few imports

00:19:32,080 --> 00:19:36,000
from tenacity and you need a little

00:19:34,000 --> 00:19:37,760
wrapper around connection close

00:19:36,000 --> 00:19:40,160
it has to be a wrapper method because it

00:19:37,760 --> 00:19:43,600
has to crock this retry state

00:19:40,160 --> 00:19:44,799
object um but what you do is you just

00:19:43,600 --> 00:19:47,840
wrap connection close

00:19:44,799 --> 00:19:51,360
in that in that little wrapper and then

00:19:47,840 --> 00:19:56,880
you can set a bunch of parameters

00:19:51,360 --> 00:19:59,120
on uh on the arguments on the decorator

00:19:56,880 --> 00:20:00,160
that specify how you want to handle the

00:19:59,120 --> 00:20:03,280
retries

00:20:00,160 --> 00:20:03,760
exactly so what this will do like what

00:20:03,280 --> 00:20:06,880
this

00:20:03,760 --> 00:20:09,520
retry decorator will do is if you ever

00:20:06,880 --> 00:20:11,760
run into an operational error

00:20:09,520 --> 00:20:13,280
the transaction will be rolled back

00:20:11,760 --> 00:20:14,400
actually that's not the retry decorator

00:20:13,280 --> 00:20:15,600
but that's the transaction atomic

00:20:14,400 --> 00:20:18,240
decorator

00:20:15,600 --> 00:20:20,480
and then we retry it that's actually the

00:20:18,240 --> 00:20:22,240
retry decorator and then what

00:20:20,480 --> 00:20:23,760
what's nice is that you don't have to

00:20:22,240 --> 00:20:27,840
write your own code for

00:20:23,760 --> 00:20:29,919
exponential back off or a loop that then

00:20:27,840 --> 00:20:30,960
you know cuts at three after three

00:20:29,919 --> 00:20:32,880
retries

00:20:30,960 --> 00:20:34,000
or for throwing the operational error up

00:20:32,880 --> 00:20:35,679
the stack if it

00:20:34,000 --> 00:20:37,919
does occur three times and it doesn't

00:20:35,679 --> 00:20:39,360
resolve itself or formatting a nice log

00:20:37,919 --> 00:20:41,360
message etc so

00:20:39,360 --> 00:20:43,600
tenacity does all of that for you and

00:20:41,360 --> 00:20:45,440
has a relatively nice api

00:20:43,600 --> 00:20:48,240
for that sort of thing and then what you

00:20:45,440 --> 00:20:51,039
have once you've wrapped everything um

00:20:48,240 --> 00:20:52,880
in those in those decorators um a you

00:20:51,039 --> 00:20:53,919
know having a rather robust database

00:20:52,880 --> 00:20:55,760
update call becomes

00:20:53,919 --> 00:20:57,280
very easy because then instead of you

00:20:55,760 --> 00:20:59,360
know doing

00:20:57,280 --> 00:21:00,400
um thing save you do something like

00:20:59,360 --> 00:21:03,600
self-safe thing

00:21:00,400 --> 00:21:06,240
and that that method then

00:21:03,600 --> 00:21:07,039
applies your automatic retry and and so

00:21:06,240 --> 00:21:10,480
on

00:21:07,039 --> 00:21:11,120
and that's quite helpful uh what about

00:21:10,480 --> 00:21:13,120
however

00:21:11,120 --> 00:21:14,480
if uh the code base is something that

00:21:13,120 --> 00:21:16,880
you cannot touch

00:21:14,480 --> 00:21:18,559
um so or you don't want to touch right

00:21:16,880 --> 00:21:19,360
you may be unable to control this sort

00:21:18,559 --> 00:21:22,000
of thing

00:21:19,360 --> 00:21:23,200
in your code before because for example

00:21:22,000 --> 00:21:24,799
it's a code base

00:21:23,200 --> 00:21:26,240
that you're not allowed to touch that

00:21:24,799 --> 00:21:28,240
you don't want to touch

00:21:26,240 --> 00:21:30,080
you're less than comfortable with the

00:21:28,240 --> 00:21:30,720
idea of going through the whole code

00:21:30,080 --> 00:21:33,280
base

00:21:30,720 --> 00:21:34,159
and profiling long-running code paths

00:21:33,280 --> 00:21:36,000
and then

00:21:34,159 --> 00:21:37,520
sprinkling connection close statements

00:21:36,000 --> 00:21:39,200
uh all around

00:21:37,520 --> 00:21:41,440
and in that case what you can do is you

00:21:39,200 --> 00:21:43,760
can fix your ha proxy configuration

00:21:41,440 --> 00:21:45,280
instead and again the the variables the

00:21:43,760 --> 00:21:47,120
configuration variables that you want to

00:21:45,280 --> 00:21:50,400
set a timeout server

00:21:47,120 --> 00:21:51,600
and uh timeout client and you probably

00:21:50,400 --> 00:21:54,480
want to set them

00:21:51,600 --> 00:21:55,760
to an identical value which should be

00:21:54,480 --> 00:21:59,039
the maximum length

00:21:55,760 --> 00:22:01,600
of your database manipulating

00:21:59,039 --> 00:22:03,600
salary tasks and then some ample room to

00:22:01,600 --> 00:22:05,360
spare

00:22:03,600 --> 00:22:07,200
one thing again that you do want to keep

00:22:05,360 --> 00:22:08,960
in mind is the maximum

00:22:07,200 --> 00:22:10,840
reasonable value that you can set for

00:22:08,960 --> 00:22:13,520
this is that of your backend

00:22:10,840 --> 00:22:15,600
servers wait timeout configuration

00:22:13,520 --> 00:22:19,520
variable so my scale wait timeout

00:22:15,600 --> 00:22:23,440
which again defaults to 8 hours or 28

00:22:19,520 --> 00:22:26,799
28 800 seconds there is a little

00:22:23,440 --> 00:22:30,000
caveat here a little uh snag

00:22:26,799 --> 00:22:33,200
that you can run into which is

00:22:30,000 --> 00:22:34,720
uh that the two platforms aj proxy and

00:22:33,200 --> 00:22:37,840
mysql server

00:22:34,720 --> 00:22:41,360
actually have different default values

00:22:37,840 --> 00:22:44,720
for or default units for time values

00:22:41,360 --> 00:22:47,760
that you set mysql weight timeout

00:22:44,720 --> 00:22:48,960
by default uses seconds so if you set it

00:22:47,760 --> 00:22:52,159
to 28

00:22:48,960 --> 00:22:53,360
800 that's eight hours but haproxy

00:22:52,159 --> 00:22:56,799
actually defaults to

00:22:53,360 --> 00:22:59,840
milliseconds so

00:22:56,799 --> 00:23:00,799
if you naively set the timeout for ha

00:22:59,840 --> 00:23:05,360
proxy to

00:23:00,799 --> 00:23:07,360
28 800 that's actually 28.8 seconds

00:23:05,360 --> 00:23:09,200
that's shorter than the default 50

00:23:07,360 --> 00:23:10,240
second timeout which is most probably

00:23:09,200 --> 00:23:12,799
not what you want

00:23:10,240 --> 00:23:14,400
so if you actually want to set the hd

00:23:12,799 --> 00:23:16,320
proxy timeout to the same

00:23:14,400 --> 00:23:17,760
as that that's the default for mysql

00:23:16,320 --> 00:23:20,799
server then

00:23:17,760 --> 00:23:24,640
you either have to translate that to

00:23:20,799 --> 00:23:27,760
28 million eight hundred thousand

00:23:24,640 --> 00:23:29,919
uh or uh ha proxy also understands uh

00:23:27,760 --> 00:23:30,799
suffixes for these time values so you

00:23:29,919 --> 00:23:34,480
can

00:23:30,799 --> 00:23:37,360
use 28 800 followed by the letter s

00:23:34,480 --> 00:23:38,720
or for that matter eight h for eight

00:23:37,360 --> 00:23:41,760
hours

00:23:38,720 --> 00:23:44,559
um so uh that's also available

00:23:41,760 --> 00:23:45,120
at your disposal so that's my devops

00:23:44,559 --> 00:23:46,960
talk

00:23:45,120 --> 00:23:48,799
i hope you found this useful and i do

00:23:46,960 --> 00:23:52,799
want to credit a couple of people

00:23:48,799 --> 00:23:54,480
uh for some input that they made on this

00:23:52,799 --> 00:23:57,760
talk namely my colleagues

00:23:54,480 --> 00:24:00,880
elena lindquist and philip darle plus

00:23:57,760 --> 00:24:03,679
zayn bitter who got me onto

00:24:00,880 --> 00:24:04,799
tenacity which is something quite

00:24:03,679 --> 00:24:07,279
helpful

00:24:04,799 --> 00:24:09,200
and then murad koch also provided some

00:24:07,279 --> 00:24:10,000
input to clarify the supported time

00:24:09,200 --> 00:24:12,480
formats

00:24:10,000 --> 00:24:13,520
in hd proxy and with that i'll be happy

00:24:12,480 --> 00:24:19,840
to take your questions

00:24:13,520 --> 00:24:19,840
thank you very much for your time

00:24:26,720 --> 00:24:28,799

YouTube URL: https://www.youtube.com/watch?v=2qDh7tl-wpg


