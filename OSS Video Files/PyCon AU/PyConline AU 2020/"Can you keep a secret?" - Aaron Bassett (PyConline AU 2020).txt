Title: "Can you keep a secret?" - Aaron Bassett (PyConline AU 2020)
Publication date: 2020-09-08
Playlist: PyConline AU 2020
Description: 
	Aaron Bassett

https://2020.pycon.org.au/program/UKBKTR

We've all been guilty of hard-coding secrets at some point. It's just a quick hack, and you'll definitely go back and tidy it up later. But then you forget, and it's all too easy to `git push` your API keys to GitHub. 

This easy to make mistake could end up [costing you thousands of dollars](https://dev.to/juanmanuelramallo/i-was-billed-for-14k-usd-on-amazon-web-services-17fn), and with the [median time to discovery for a secret key leaked to GitHub being 20 seconds](https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_04B-3_Meli_paper.pdf) you could end up compromised before you have a chance to correct your error.

In this talk, we'll look at techniques that you can use personally and within your development teams to properly store, share, and manage your secrets, as easily as possible, and most importantly without disrupting your workflow.

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

Python, PyCon, PyConAU, PyConline

Fri Sep  4 12:45:00 2020 at Obvious
Captions: 
	00:00:00,880 --> 00:00:06,560
welcome back to the devops track here

00:00:03,520 --> 00:00:09,040
at pycon au 2020 which we are in

00:00:06,560 --> 00:00:10,639
extremely online uh hopefully you've

00:00:09,040 --> 00:00:12,559
been enjoying the track

00:00:10,639 --> 00:00:14,719
schedule so far today uh we've had some

00:00:12,559 --> 00:00:16,560
great questions some excellent talks

00:00:14,719 --> 00:00:18,000
lots of good interaction which is

00:00:16,560 --> 00:00:19,760
fantastic to see

00:00:18,000 --> 00:00:21,680
so thank you all for for being with us

00:00:19,760 --> 00:00:24,560
today coming up now

00:00:21,680 --> 00:00:25,760
uh we have an amazing talk uh by our

00:00:24,560 --> 00:00:28,480
next speaker

00:00:25,760 --> 00:00:29,039
um before we get to that though i also

00:00:28,480 --> 00:00:31,359
have some

00:00:29,039 --> 00:00:33,440
announcements about the program which

00:00:31,359 --> 00:00:35,200
has been wrangled over the last couple

00:00:33,440 --> 00:00:38,320
of a couple of hours

00:00:35,200 --> 00:00:41,200
so very important and exciting news

00:00:38,320 --> 00:00:42,719
for sunday the details are now up so do

00:00:41,200 --> 00:00:45,680
go to the website and check

00:00:42,719 --> 00:00:47,039
the uh check the schedule there it has

00:00:45,680 --> 00:00:48,719
our regular sprints

00:00:47,039 --> 00:00:50,719
a whole bunch of mentored sprints we

00:00:48,719 --> 00:00:52,239
also have some attendee organized birds

00:00:50,719 --> 00:00:55,280
of a feather meet up

00:00:52,239 --> 00:00:55,920
including unofficially officially maybe

00:00:55,280 --> 00:00:57,760
perhaps

00:00:55,920 --> 00:01:00,399
slightly more official than it was

00:00:57,760 --> 00:01:02,960
previously lightning talks

00:01:00,399 --> 00:01:04,239
which are a popular feature of pycon so

00:01:02,960 --> 00:01:06,720
our regular lighting

00:01:04,239 --> 00:01:09,119
lightning tsar is coordinating those

00:01:06,720 --> 00:01:11,119
activities so do come along

00:01:09,119 --> 00:01:13,040
we also have a coding competition which

00:01:11,119 --> 00:01:13,840
is going to be announced on saturday

00:01:13,040 --> 00:01:15,920
night

00:01:13,840 --> 00:01:17,119
so that's tomorrow night so head over to

00:01:15,920 --> 00:01:19,040
the schedule uh

00:01:17,119 --> 00:01:21,920
click on the sunday tab and you'll be

00:01:19,040 --> 00:01:24,720
able to find out more

00:01:21,920 --> 00:01:25,439
before you do that we want you to stay

00:01:24,720 --> 00:01:27,920
here

00:01:25,439 --> 00:01:29,840
and enjoy this beautiful talk that we

00:01:27,920 --> 00:01:31,759
have from aaron bassett

00:01:29,840 --> 00:01:33,920
now introducing aaron bassett he has

00:01:31,759 --> 00:01:36,079
lived in ireland scotland hungary the

00:01:33,920 --> 00:01:37,920
netherlands and the america

00:01:36,079 --> 00:01:40,159
he is a recovering senior software

00:01:37,920 --> 00:01:42,640
engineer turned award-winning

00:01:40,159 --> 00:01:44,560
developer advocate and as a developer

00:01:42,640 --> 00:01:46,560
public speaker writer and mentor

00:01:44,560 --> 00:01:48,960
he spends most of his time making cool

00:01:46,560 --> 00:01:50,960
stuff and helping other people make

00:01:48,960 --> 00:01:53,759
unbelievably cool stuff

00:01:50,960 --> 00:01:55,920
and he is here to talk to us about

00:01:53,759 --> 00:01:58,240
whether or not we can keep a secret

00:01:55,920 --> 00:02:00,399
so aaron welcome i'm really looking

00:01:58,240 --> 00:02:01,920
forward to this talk

00:02:00,399 --> 00:02:03,920
thank you so much for the introduction

00:02:01,920 --> 00:02:05,840
um so

00:02:03,920 --> 00:02:07,439
yeah hey everyone um thank you for

00:02:05,840 --> 00:02:09,280
joining me today i just want to like

00:02:07,439 --> 00:02:10,640
before we get started um i just like to

00:02:09,280 --> 00:02:13,040
take a moment really to

00:02:10,640 --> 00:02:14,640
express my heartfelt thanks gratitude

00:02:13,040 --> 00:02:16,400
and admiration to everyone involved this

00:02:14,640 --> 00:02:18,480
year's pike on australia they've done

00:02:16,400 --> 00:02:19,840
such an amazing job in a really very

00:02:18,480 --> 00:02:21,440
difficult time

00:02:19,840 --> 00:02:22,879
it would have been so easy for them to

00:02:21,440 --> 00:02:24,239
just skip putting on a conference

00:02:22,879 --> 00:02:26,319
all this year and no one would have

00:02:24,239 --> 00:02:28,000
blamed them but they didn't

00:02:26,319 --> 00:02:29,520
and what they achieved should really be

00:02:28,000 --> 00:02:32,160
celebrated so i want to

00:02:29,520 --> 00:02:33,200
make a big thank you to them okay with

00:02:32,160 --> 00:02:35,760
that said

00:02:33,200 --> 00:02:37,440
let's get started so as you heard i'm

00:02:35,760 --> 00:02:38,959
aaron bassett

00:02:37,440 --> 00:02:40,800
you can find me pretty much everywhere

00:02:38,959 --> 00:02:41,840
as our ambassador because i have zero

00:02:40,800 --> 00:02:44,319
imagination

00:02:41,840 --> 00:02:45,760
twitter github linkedin probably in all

00:02:44,319 --> 00:02:46,720
myspace and people are kind of out there

00:02:45,760 --> 00:02:48,280
somewhere too

00:02:46,720 --> 00:02:50,000
you can find me on them all as our

00:02:48,280 --> 00:02:52,480
ambassador i'm a senior

00:02:50,000 --> 00:02:54,000
developer advocate at mongodb and for

00:02:52,480 --> 00:02:54,800
anyone who hasn't heard of mongodb

00:02:54,000 --> 00:02:56,959
before

00:02:54,800 --> 00:02:58,400
it is a general purpose document-based

00:02:56,959 --> 00:03:00,800
distributed database

00:02:58,400 --> 00:03:02,319
often referred to as a nosql database

00:03:00,800 --> 00:03:03,599
with a fully managed cloud database

00:03:02,319 --> 00:03:05,360
service called atlas

00:03:03,599 --> 00:03:07,120
an on-premise enterprise server and

00:03:05,360 --> 00:03:08,879
on-device database called realm

00:03:07,120 --> 00:03:10,400
who are most but we're probably most

00:03:08,879 --> 00:03:11,760
well known for our free and open source

00:03:10,400 --> 00:03:14,080
community server

00:03:11,760 --> 00:03:14,959
in fact much of what we do at mongodb is

00:03:14,080 --> 00:03:16,959
open source

00:03:14,959 --> 00:03:18,560
and as a developer advocate almost the

00:03:16,959 --> 00:03:20,319
entirety of what i produce is open

00:03:18,560 --> 00:03:22,000
source and publicly available

00:03:20,319 --> 00:03:24,480
whether it's a tutorial demo app

00:03:22,000 --> 00:03:27,040
conference talk twitch stream and so on

00:03:24,480 --> 00:03:28,720
it's all right there to use here's an

00:03:27,040 --> 00:03:30,480
example type of code i write regularly

00:03:28,720 --> 00:03:32,400
this is a small snippet to perform a

00:03:30,480 --> 00:03:34,319
geospatial query

00:03:32,400 --> 00:03:35,519
first we import our mongodb python

00:03:34,319 --> 00:03:38,400
driver

00:03:35,519 --> 00:03:40,720
then we instantiate our database client

00:03:38,400 --> 00:03:42,319
and finally we execute our query

00:03:40,720 --> 00:03:44,159
here we're trying to find all documents

00:03:42,319 --> 00:03:46,959
whose location is venus the defined

00:03:44,159 --> 00:03:49,200
radius of a chosen point

00:03:46,959 --> 00:03:50,720
but even in this short example we have

00:03:49,200 --> 00:03:52,720
some secrets that we really

00:03:50,720 --> 00:03:54,720
shouldn't be sharing the first line

00:03:52,720 --> 00:03:56,000
highlighted here is the uri

00:03:54,720 --> 00:03:57,840
this isn't so much a secret as a

00:03:56,000 --> 00:03:58,959
configuration variable something that's

00:03:57,840 --> 00:04:00,640
likely to change between your

00:03:58,959 --> 00:04:01,519
development staging and production

00:04:00,640 --> 00:04:02,720
environments

00:04:01,519 --> 00:04:04,560
so you probably don't want this

00:04:02,720 --> 00:04:06,720
hard-coded either

00:04:04,560 --> 00:04:08,560
it's the next line however it's the real

00:04:06,720 --> 00:04:09,599
secrets our database username and

00:04:08,560 --> 00:04:11,439
password

00:04:09,599 --> 00:04:12,879
these are type of secrets you never want

00:04:11,439 --> 00:04:16,000
the hard code in your scripts

00:04:12,879 --> 00:04:17,359
not even for a moment so often i see it

00:04:16,000 --> 00:04:18,799
where someone has pulled out their

00:04:17,359 --> 00:04:20,799
secrets in the variables

00:04:18,799 --> 00:04:22,240
over the top of their scripts or

00:04:20,799 --> 00:04:24,080
sometimes they'll hard code them into

00:04:22,240 --> 00:04:26,160
settings up higher similar

00:04:24,080 --> 00:04:27,840
i've been guilty of doing this as well

00:04:26,160 --> 00:04:29,680
you have every intention of removing the

00:04:27,840 --> 00:04:31,520
secrets before you publish your code

00:04:29,680 --> 00:04:32,880
then it's a couple of days later the

00:04:31,520 --> 00:04:33,199
kids are trying to get your attention

00:04:32,880 --> 00:04:35,440
you

00:04:33,199 --> 00:04:36,880
need to make your morning coffee or

00:04:35,440 --> 00:04:38,080
there's one of the other million other

00:04:36,880 --> 00:04:39,440
things that happen in our day-to-day

00:04:38,080 --> 00:04:40,880
lives distracting you

00:04:39,440 --> 00:04:43,199
and as you get up you decide to see if

00:04:40,880 --> 00:04:44,960
you're working draft your muscle memory

00:04:43,199 --> 00:04:47,759
kicks in

00:04:44,960 --> 00:04:48,560
and well that's all it takes all it

00:04:47,759 --> 00:04:50,639
takes is that

00:04:48,560 --> 00:04:52,720
momentary lapse and now your secrets are

00:04:50,639 --> 00:04:55,040
public and as soon as those secrets said

00:04:52,720 --> 00:04:57,360
github or another public repository you

00:04:55,040 --> 00:04:59,360
have to assume they're immediately

00:04:57,360 --> 00:05:02,000
breached

00:04:59,360 --> 00:05:03,680
michael melley matthew r mcneese and

00:05:02,000 --> 00:05:04,320
bradley reeves from north carolina state

00:05:03,680 --> 00:05:06,400
university

00:05:04,320 --> 00:05:08,080
published a research paper titled how

00:05:06,400 --> 00:05:10,080
bad can it get

00:05:08,080 --> 00:05:12,000
characterizing secret leakage and public

00:05:10,080 --> 00:05:13,759
github repositories

00:05:12,000 --> 00:05:14,960
this research showed that the median

00:05:13,759 --> 00:05:17,199
time for discovery for a secret

00:05:14,960 --> 00:05:19,840
published at github was 20 seconds

00:05:17,199 --> 00:05:21,120
and it could be as low as half a second

00:05:19,840 --> 00:05:22,960
it appeared to them that the only

00:05:21,120 --> 00:05:24,000
limiting factor in how fast you discover

00:05:22,960 --> 00:05:26,080
secrets in github

00:05:24,000 --> 00:05:28,000
was how fast github was able to index

00:05:26,080 --> 00:05:29,759
new code as it was pushed up

00:05:28,000 --> 00:05:31,520
the longest time in our testing from

00:05:29,759 --> 00:05:32,800
secrets being pushed until like we

00:05:31,520 --> 00:05:34,720
potentially compromised

00:05:32,800 --> 00:05:36,560
was just four minutes there was no

00:05:34,720 --> 00:05:38,080
correlation to the time of day

00:05:36,560 --> 00:05:39,759
it most likely would just depend on how

00:05:38,080 --> 00:05:41,600
many other people were pushing code at

00:05:39,759 --> 00:05:43,440
that exact same time

00:05:41,600 --> 00:05:44,880
but once the code was indexed then they

00:05:43,440 --> 00:05:45,520
were very quickly able to locate the

00:05:44,880 --> 00:05:47,919
secrets

00:05:45,520 --> 00:05:49,360
using some well-crafted search queries

00:05:47,919 --> 00:05:50,560
but this is probably not used in most

00:05:49,360 --> 00:05:52,479
developers

00:05:50,560 --> 00:05:54,240
okay the speed of which secrets can be

00:05:52,479 --> 00:05:55,680
compromised might be surprising

00:05:54,240 --> 00:05:56,960
but most developers will know that the

00:05:55,680 --> 00:05:58,160
perils of publishing their secrets

00:05:56,960 --> 00:06:00,000
publicly

00:05:58,160 --> 00:06:01,360
many of us have likely heard or read

00:06:00,000 --> 00:06:03,680
horror stories of developers

00:06:01,360 --> 00:06:05,360
accidentally committing their aws keys

00:06:03,680 --> 00:06:06,960
and waking up to a huge bill as someone

00:06:05,360 --> 00:06:08,560
who's been spinning up ec2 instances on

00:06:06,960 --> 00:06:10,880
their kind

00:06:08,560 --> 00:06:12,000
so why do we and i'm including myself in

00:06:10,880 --> 00:06:14,880
that way

00:06:12,000 --> 00:06:15,680
why do we keep doing it because it's

00:06:14,880 --> 00:06:17,840
easy

00:06:15,680 --> 00:06:20,000
we know it's not safe we know it's

00:06:17,840 --> 00:06:22,880
likely going to bite us in the ass

00:06:20,000 --> 00:06:24,479
but it is so very very easy and this is

00:06:22,880 --> 00:06:26,479
the case in most software

00:06:24,479 --> 00:06:28,080
this is the security triangle it

00:06:26,479 --> 00:06:29,680
represents a balance between security

00:06:28,080 --> 00:06:32,319
functionality and usability

00:06:29,680 --> 00:06:34,000
it's a trade-off as two points increase

00:06:32,319 --> 00:06:35,759
one will always decrease

00:06:34,000 --> 00:06:37,440
if we have an app which is very secure

00:06:35,759 --> 00:06:38,639
and has a lot of functionality

00:06:37,440 --> 00:06:40,560
it's probably going to feel pretty

00:06:38,639 --> 00:06:42,240
restricted to use

00:06:40,560 --> 00:06:45,600
if our app is very secure and very

00:06:42,240 --> 00:06:47,039
usable it probably doesn't do very much

00:06:45,600 --> 00:06:48,800
a good example of where a company has

00:06:47,039 --> 00:06:50,479
treated some security for additional

00:06:48,800 --> 00:06:52,960
functionality and usability

00:06:50,479 --> 00:06:54,400
is amazing's one click buy button it

00:06:52,960 --> 00:06:56,400
functions very much as the name

00:06:54,400 --> 00:06:57,680
implies when you want to order a product

00:06:56,400 --> 00:06:59,360
you can click a single button

00:06:57,680 --> 00:07:01,039
and amazon will place your order using

00:06:59,360 --> 00:07:03,199
your default credit card and shipping

00:07:01,039 --> 00:07:05,199
address from their records

00:07:03,199 --> 00:07:08,000
what you might not be aware of is

00:07:05,199 --> 00:07:08,800
amazing cannot send the cvv with that

00:07:08,000 --> 00:07:11,039
order

00:07:08,800 --> 00:07:12,560
the cvb is normally three numbers in the

00:07:11,039 --> 00:07:13,680
back of your card above the signature

00:07:12,560 --> 00:07:15,520
strip

00:07:13,680 --> 00:07:17,280
card issuers say that you should send

00:07:15,520 --> 00:07:19,840
the cvv for each

00:07:17,280 --> 00:07:21,440
card not present transaction now a card

00:07:19,840 --> 00:07:23,360
not present means that the retailer

00:07:21,440 --> 00:07:25,120
could not see that you have the physical

00:07:23,360 --> 00:07:26,960
card in your possession

00:07:25,120 --> 00:07:28,720
so every online transaction is a card

00:07:26,960 --> 00:07:30,319
not present transaction

00:07:28,720 --> 00:07:32,000
okay so the issue would say that you

00:07:30,319 --> 00:07:34,319
should send your cvv each time

00:07:32,000 --> 00:07:36,160
but also say that you must not store it

00:07:34,319 --> 00:07:37,440
this is why for almost all retailers

00:07:36,160 --> 00:07:38,080
even if they have your credit card

00:07:37,440 --> 00:07:39,680
stored

00:07:38,080 --> 00:07:42,319
you will still need to enter the cvv

00:07:39,680 --> 00:07:45,199
during checkline but not amazon

00:07:42,319 --> 00:07:46,560
amazon assembly does not send the cvb

00:07:45,199 --> 00:07:47,440
they know that that decreases their

00:07:46,560 --> 00:07:48,639
security

00:07:47,440 --> 00:07:50,319
but for them the trade-off for

00:07:48,639 --> 00:07:52,160
additional functionality and ease of use

00:07:50,319 --> 00:07:55,199
is worth it

00:07:52,160 --> 00:07:57,280
now a bad real bad example for a company

00:07:55,199 --> 00:07:58,160
traded sanity sorry i mean security for

00:07:57,280 --> 00:07:59,759
usability

00:07:58,160 --> 00:08:02,160
happened at a thankfully non-defunct

00:07:59,759 --> 00:08:03,280
agency i worked out many many years ago

00:08:02,160 --> 00:08:05,680
they decided that while storing

00:08:03,280 --> 00:08:08,000
customers passwords in plain text

00:08:05,680 --> 00:08:09,280
lord or security being able to tell the

00:08:08,000 --> 00:08:11,360
customer their password over the

00:08:09,280 --> 00:08:12,800
telephone when they called was worth it

00:08:11,360 --> 00:08:14,560
and usability

00:08:12,800 --> 00:08:16,639
it really was the wild wild west the web

00:08:14,560 --> 00:08:18,240
in those days

00:08:16,639 --> 00:08:20,240
so a key tenant of everything i'm

00:08:18,240 --> 00:08:20,720
suggesting here is that it has to be as

00:08:20,240 --> 00:08:23,840
low

00:08:20,720 --> 00:08:25,599
friction as possible if it's too hard

00:08:23,840 --> 00:08:27,919
or if it reduces the usability side of a

00:08:25,599 --> 00:08:28,960
triangle then people simply will not

00:08:27,919 --> 00:08:32,080
adopt it

00:08:28,960 --> 00:08:33,680
it also has to be easy to implement

00:08:32,080 --> 00:08:36,159
i want these to be techniques which you

00:08:33,680 --> 00:08:37,760
can start using personally today

00:08:36,159 --> 00:08:40,560
and have them roll out across your team

00:08:37,760 --> 00:08:42,320
by this time next week we can't have

00:08:40,560 --> 00:08:44,159
any high costs or difficult

00:08:42,320 --> 00:08:45,760
infrastructure to set up and manage

00:08:44,159 --> 00:08:48,080
because again we're competing with hard

00:08:45,760 --> 00:08:51,200
coded variables without a doubt the

00:08:48,080 --> 00:08:53,760
easiest method of storing secrets

00:08:51,200 --> 00:08:56,080
so how do we know when we're done how do

00:08:53,760 --> 00:08:57,600
we measure success for this project

00:08:56,080 --> 00:09:00,640
well for that i'm going to borrow from

00:08:57,600 --> 00:09:02,720
the 12 factor apps methodology

00:09:00,640 --> 00:09:04,560
the 12 factor apps methodology is

00:09:02,720 --> 00:09:06,399
designed to enable web applications to

00:09:04,560 --> 00:09:08,160
be built with portability and resilience

00:09:06,399 --> 00:09:10,000
when deployed to the web

00:09:08,160 --> 00:09:11,440
and funnily enough it covers 12

00:09:10,000 --> 00:09:13,920
different factors

00:09:11,440 --> 00:09:16,640
code base dependencies config backing

00:09:13,920 --> 00:09:19,279
services build release run and so on

00:09:16,640 --> 00:09:21,200
we're only interested number three

00:09:19,279 --> 00:09:23,040
config

00:09:21,200 --> 00:09:24,640
here's what 12 factor apps has to say

00:09:23,040 --> 00:09:26,800
about config

00:09:24,640 --> 00:09:29,040
a litmus test for whether an app has all

00:09:26,800 --> 00:09:30,640
config correctly factored out of code

00:09:29,040 --> 00:09:32,080
is whether the code basically made open

00:09:30,640 --> 00:09:36,080
source at any moment

00:09:32,080 --> 00:09:38,000
without compromising any credentials and

00:09:36,080 --> 00:09:39,760
this is super important even for those

00:09:38,000 --> 00:09:41,200
of you who may never publish your code

00:09:39,760 --> 00:09:42,800
publicly

00:09:41,200 --> 00:09:44,240
what would happen if your source code

00:09:42,800 --> 00:09:46,959
were to leak right now

00:09:44,240 --> 00:09:49,680
right this minute in 2015 researchers at

00:09:46,959 --> 00:09:51,760
internet watch find that 9700 websites

00:09:49,680 --> 00:09:53,760
and alexa's top 1 million had their dot

00:09:51,760 --> 00:09:54,880
get folder publicly available in their

00:09:53,760 --> 00:09:56,880
site root

00:09:54,880 --> 00:09:58,640
this included government websites ngos

00:09:56,880 --> 00:09:59,440
banks crypto exchanges large online

00:09:58,640 --> 00:10:02,480
communities

00:09:59,440 --> 00:10:04,560
a few porn sites and mtv

00:10:02,480 --> 00:10:06,399
deploying websites via git pools isn't

00:10:04,560 --> 00:10:08,000
as uncommon as you might think

00:10:06,399 --> 00:10:09,519
and for those websites they're just one

00:10:08,000 --> 00:10:11,440
server misconfiguration away from

00:10:09,519 --> 00:10:12,959
leaking your source code

00:10:11,440 --> 00:10:15,120
so even if your application is closed

00:10:12,959 --> 00:10:16,320
source with source that will never be

00:10:15,120 --> 00:10:18,320
intentionally published

00:10:16,320 --> 00:10:20,160
published publicly it is still

00:10:18,320 --> 00:10:21,600
imperative that you do not hard code

00:10:20,160 --> 00:10:23,040
secrets

00:10:21,600 --> 00:10:25,040
leaking your source code would be

00:10:23,040 --> 00:10:25,760
horrible leaking all the keys to your

00:10:25,040 --> 00:10:28,160
kingdom

00:10:25,760 --> 00:10:29,680
would be devastating so if we can store

00:10:28,160 --> 00:10:32,720
secrets in our code

00:10:29,680 --> 00:10:34,399
where do we put them environment

00:10:32,720 --> 00:10:37,040
variables are probably the most

00:10:34,399 --> 00:10:39,519
common place now remember we're going

00:10:37,040 --> 00:10:40,720
for ease of use and low bar to entry

00:10:39,519 --> 00:10:42,399
there are better ways for managing

00:10:40,720 --> 00:10:43,680
secrets in production and i would highly

00:10:42,399 --> 00:10:45,040
encourage you to look at products like

00:10:43,680 --> 00:10:46,480
hashicorp's fault

00:10:45,040 --> 00:10:48,959
it will give you things like identity

00:10:46,480 --> 00:10:51,279
based access audit logs automatic key

00:10:48,959 --> 00:10:52,880
rotation encryption and so much more

00:10:51,279 --> 00:10:54,399
but for most people this is going to be

00:10:52,880 --> 00:10:55,680
overkill for development

00:10:54,399 --> 00:10:57,440
so we're going to stick to environment

00:10:55,680 --> 00:10:59,920
variables

00:10:57,440 --> 00:11:00,640
but what is an environment variable it

00:10:59,920 --> 00:11:02,240
is a variable

00:11:00,640 --> 00:11:04,240
whose value is set outside of your

00:11:02,240 --> 00:11:05,920
script typically free functionality

00:11:04,240 --> 00:11:07,360
built into your operating system

00:11:05,920 --> 00:11:08,959
and are part of the environment in which

00:11:07,360 --> 00:11:10,160
your process runs

00:11:08,959 --> 00:11:13,040
and we have a few different ways these

00:11:10,160 --> 00:11:15,040
can be accessed in python

00:11:13,040 --> 00:11:16,720
okay so here we have the same code as

00:11:15,040 --> 00:11:18,399
earlier but now we've removed our

00:11:16,720 --> 00:11:19,760
hard-coded values and instead we're

00:11:18,399 --> 00:11:22,560
using environment variables

00:11:19,760 --> 00:11:23,920
in their place environment is a mapping

00:11:22,560 --> 00:11:25,200
object representing the environment

00:11:23,920 --> 00:11:27,279
variables

00:11:25,200 --> 00:11:29,279
it is worth noting that this mapping is

00:11:27,279 --> 00:11:30,079
captured the first time the os module is

00:11:29,279 --> 00:11:31,519
imported

00:11:30,079 --> 00:11:34,640
and changes means the environment after

00:11:31,519 --> 00:11:36,160
this time will not be reflected environ

00:11:34,640 --> 00:11:38,000
environment behaves just like a python

00:11:36,160 --> 00:11:40,000
date we can reference a value by

00:11:38,000 --> 00:11:43,040
providing the corresponding key

00:11:40,000 --> 00:11:44,160
or we can use get

00:11:43,040 --> 00:11:45,920
the main difference in the two

00:11:44,160 --> 00:11:47,519
approaches is when using get if an

00:11:45,920 --> 00:11:48,480
environment variable does not exist it

00:11:47,519 --> 00:11:49,920
will return none

00:11:48,480 --> 00:11:52,079
whereas if you're attempting to access

00:11:49,920 --> 00:11:54,880
it by its key then it will

00:11:52,079 --> 00:11:56,639
raise a key error exception also get

00:11:54,880 --> 00:11:58,240
allows you to provide a second argument

00:11:56,639 --> 00:11:59,839
to be used as default value if the key

00:11:58,240 --> 00:12:02,240
does not exist

00:11:59,839 --> 00:12:04,160
however there is a third way you can

00:12:02,240 --> 00:12:07,680
access environment variables

00:12:04,160 --> 00:12:08,720
get m now get m behaves just like

00:12:07,680 --> 00:12:10,480
environment.get

00:12:08,720 --> 00:12:11,839
in fact it behaves so much like it i dug

00:12:10,480 --> 00:12:13,839
through the source to try and figure out

00:12:11,839 --> 00:12:17,040
what the difference was between the two

00:12:13,839 --> 00:12:17,839
and the benefits of each but what i find

00:12:17,040 --> 00:12:21,200
is that

00:12:17,839 --> 00:12:23,440
there's no difference none at all get mv

00:12:21,200 --> 00:12:25,279
simply a wrapper around environment

00:12:23,440 --> 00:12:27,440
i'm sure there's a very good reason for

00:12:25,279 --> 00:12:29,440
this beyond saving a few keystrokes

00:12:27,440 --> 00:12:31,279
but did not uncover german research if

00:12:29,440 --> 00:12:34,320
you know the reasoning behind why gem

00:12:31,279 --> 00:12:35,519
exists i would love to hear it now

00:12:34,320 --> 00:12:38,560
we know how to access environment

00:12:35,519 --> 00:12:39,839
variables how do we create them

00:12:38,560 --> 00:12:42,000
they have to be available in the

00:12:39,839 --> 00:12:43,519
environment whenever we run our script

00:12:42,000 --> 00:12:46,079
so most of the times will mean within

00:12:43,519 --> 00:12:47,440
our terminal we could manually create

00:12:46,079 --> 00:12:48,160
them each time we open a new terminal

00:12:47,440 --> 00:12:50,160
window

00:12:48,160 --> 00:12:51,680
but that seems like way too much work

00:12:50,160 --> 00:12:54,000
i'm very error

00:12:51,680 --> 00:12:55,600
so where else can we put them if you're

00:12:54,000 --> 00:12:56,959
using virtual end you can manage your

00:12:55,600 --> 00:12:59,120
environment variables within your

00:12:56,959 --> 00:13:01,040
activate script

00:12:59,120 --> 00:13:02,880
it's a little back to front in that

00:13:01,040 --> 00:13:03,839
you'll find a deactivate function at the

00:13:02,880 --> 00:13:05,360
top

00:13:03,839 --> 00:13:06,800
but this is where you can unset any

00:13:05,360 --> 00:13:08,160
environment variables and do your

00:13:06,800 --> 00:13:09,920
housekeeping

00:13:08,160 --> 00:13:12,480
then at the bottom of the script is

00:13:09,920 --> 00:13:14,079
where you can set your variables

00:13:12,480 --> 00:13:15,440
this way when you activate your virtual

00:13:14,079 --> 00:13:17,200
environment your variables will be

00:13:15,440 --> 00:13:18,399
automatically set and available to your

00:13:17,200 --> 00:13:19,760
scripts

00:13:18,399 --> 00:13:21,839
and when you deactivate your virtual

00:13:19,760 --> 00:13:25,120
environment it'll tidy up after you and

00:13:21,839 --> 00:13:26,959
unset those same variables

00:13:25,120 --> 00:13:28,399
personally i'm not a fan of this

00:13:26,959 --> 00:13:30,399
approach i

00:13:28,399 --> 00:13:31,920
never manually alter files within my

00:13:30,399 --> 00:13:33,920
virtual environment

00:13:31,920 --> 00:13:36,480
i do not keep them under source control

00:13:33,920 --> 00:13:38,160
i treat them as wholly disposable

00:13:36,480 --> 00:13:39,920
at any point i should be able to delete

00:13:38,160 --> 00:13:41,440
my entire virtual environment

00:13:39,920 --> 00:13:43,440
and create a new one without fear of

00:13:41,440 --> 00:13:45,279
losing anything so modifying the

00:13:43,440 --> 00:13:46,639
activate script is not a viable option

00:13:45,279 --> 00:13:50,079
for me

00:13:46,639 --> 00:13:51,600
instead i use duranf the ram is an

00:13:50,079 --> 00:13:53,360
extension for your shell

00:13:51,600 --> 00:13:54,800
it augments existing channels with a new

00:13:53,360 --> 00:13:56,240
feature that can load and unload

00:13:54,800 --> 00:13:57,920
environment variables depending on the

00:13:56,240 --> 00:13:59,199
current directory

00:13:57,920 --> 00:14:01,040
what that means is when i see the

00:13:59,199 --> 00:14:01,519
integer directory containing an mvrc

00:14:01,040 --> 00:14:02,959
file

00:14:01,519 --> 00:14:04,880
durant will automatically set the

00:14:02,959 --> 00:14:06,240
environment variables continue event for

00:14:04,880 --> 00:14:08,880
me

00:14:06,240 --> 00:14:09,760
let's look at a typical duram workflow

00:14:08,880 --> 00:14:12,240
so first

00:14:09,760 --> 00:14:13,839
we create an mrc file and we add some

00:14:12,240 --> 00:14:16,000
export statements

00:14:13,839 --> 00:14:18,079
and we immediately get an error for

00:14:16,000 --> 00:14:20,160
security reasons duramp will not load an

00:14:18,079 --> 00:14:21,519
mvrc file until you delight it

00:14:20,160 --> 00:14:23,680
otherwise you might end up executing

00:14:21,519 --> 00:14:25,120
malicious code simply by cding into a

00:14:23,680 --> 00:14:26,880
directory

00:14:25,120 --> 00:14:28,560
so let's tell duram to allow this

00:14:26,880 --> 00:14:30,720
directory

00:14:28,560 --> 00:14:32,240
now i have listed the mvrc file duramp

00:14:30,720 --> 00:14:34,720
has automatically loaded it for us and

00:14:32,240 --> 00:14:37,360
set the db password environment variable

00:14:34,720 --> 00:14:38,399
then if we leave the directory duram

00:14:37,360 --> 00:14:40,399
will unload

00:14:38,399 --> 00:14:44,639
and clean up after us by unsetting any

00:14:40,399 --> 00:14:47,040
environment variables it's set

00:14:44,639 --> 00:14:47,760
nine you should never commit your mvrc

00:14:47,040 --> 00:14:49,360
file

00:14:47,760 --> 00:14:51,199
i advise adding it to your projects

00:14:49,360 --> 00:14:53,040
getting newer file and your global

00:14:51,199 --> 00:14:54,560
getting your file there should never be

00:14:53,040 --> 00:14:56,399
a reason why you would ever want to

00:14:54,560 --> 00:14:58,880
commit an nbrc file

00:14:56,399 --> 00:15:00,560
you will however want to share a list of

00:14:58,880 --> 00:15:02,480
what environment variables are required

00:15:00,560 --> 00:15:04,000
with the rest of your team the

00:15:02,480 --> 00:15:06,240
convention for this is normally to

00:15:04,000 --> 00:15:07,760
create an mvrc.exemple file

00:15:06,240 --> 00:15:09,920
which only includes the variable names

00:15:07,760 --> 00:15:12,079
but no values you can even automate this

00:15:09,920 --> 00:15:14,480
with wrapper similar

00:15:12,079 --> 00:15:15,600
okay so we covered keeping secrets out

00:15:14,480 --> 00:15:16,880
of our source code

00:15:15,600 --> 00:15:19,839
but what about if you need to share

00:15:16,880 --> 00:15:21,519
secret files with co-workers

00:15:19,839 --> 00:15:23,519
let's take an example of when you might

00:15:21,519 --> 00:15:25,519
need to share a file on your repo

00:15:23,519 --> 00:15:27,040
but unsure that but ensure that even if

00:15:25,519 --> 00:15:28,639
your repository becomes public

00:15:27,040 --> 00:15:30,320
only those authorized access the file

00:15:28,639 --> 00:15:31,680
can do so

00:15:30,320 --> 00:15:34,079
okay so i'm going to be supporting

00:15:31,680 --> 00:15:36,880
encryption at rest and client-side

00:15:34,079 --> 00:15:38,240
level client-side field level encryption

00:15:36,880 --> 00:15:40,399
with encryption at rest encryption

00:15:38,240 --> 00:15:42,160
occurs transparently in a storage layer

00:15:40,399 --> 00:15:43,519
i.e all data files are fully encrypted

00:15:42,160 --> 00:15:45,360
from a file system perspective

00:15:43,519 --> 00:15:46,720
and data only exists in an unencrypted

00:15:45,360 --> 00:15:49,680
state in memory

00:15:46,720 --> 00:15:51,279
and during transmission client-side

00:15:49,680 --> 00:15:52,959
field encryption

00:15:51,279 --> 00:15:54,720
applications can encrypt fields in

00:15:52,959 --> 00:15:56,320
documents prior to transmitting data

00:15:54,720 --> 00:15:58,160
over the wire to the server

00:15:56,320 --> 00:15:59,759
that only the applications access the

00:15:58,160 --> 00:16:02,160
correct encryption key

00:15:59,759 --> 00:16:03,920
can decrypt and read the protected data

00:16:02,160 --> 00:16:05,360
delete an encryption key then renders

00:16:03,920 --> 00:16:07,120
all data encrypted using that as

00:16:05,360 --> 00:16:08,720
permanently unreadable

00:16:07,120 --> 00:16:10,240
so with encryption at rest each database

00:16:08,720 --> 00:16:11,680
has its own encryption key

00:16:10,240 --> 00:16:14,160
and then there's a master key for the

00:16:11,680 --> 00:16:15,839
server but with client-side field live

00:16:14,160 --> 00:16:17,839
encryption you can encrypt individual

00:16:15,839 --> 00:16:19,120
fields and documents with customer level

00:16:17,839 --> 00:16:21,519
keys

00:16:19,120 --> 00:16:23,120
i should point out that in production

00:16:21,519 --> 00:16:24,959
you really should use a key management

00:16:23,120 --> 00:16:27,600
service for either of these

00:16:24,959 --> 00:16:29,680
like really use a kms don't don't use a

00:16:27,600 --> 00:16:32,480
local key but for development you can

00:16:29,680 --> 00:16:33,519
use a local key so to generate our key

00:16:32,480 --> 00:16:34,880
we've got these commands

00:16:33,519 --> 00:16:36,800
the first one generates a key file to

00:16:34,880 --> 00:16:38,720
use for encryption at rest it sets our

00:16:36,800 --> 00:16:39,600
permissions and enables encryption on my

00:16:38,720 --> 00:16:41,120
server

00:16:39,600 --> 00:16:42,800
now if multiple developers need to

00:16:41,120 --> 00:16:44,560
access this encrypted server

00:16:42,800 --> 00:16:46,480
i would need to share this key file with

00:16:44,560 --> 00:16:49,199
them and no

00:16:46,480 --> 00:16:50,639
i'm not just going to slack it to them

00:16:49,199 --> 00:16:51,759
we're going to store the key file in our

00:16:50,639 --> 00:16:54,720
repo

00:16:51,759 --> 00:16:56,560
but we're going to encrypt it first get

00:16:54,720 --> 00:16:58,079
secret encrypts files and stores them

00:16:56,560 --> 00:17:00,639
inside the git repository

00:16:58,079 --> 00:17:02,720
so that's perfect exactly what we need

00:17:00,639 --> 00:17:04,640
with one little caveat

00:17:02,720 --> 00:17:06,640
remember these processes all need to be

00:17:04,640 --> 00:17:09,439
safe and easy

00:17:06,640 --> 00:17:10,720
well get secret is easy-ish against

00:17:09,439 --> 00:17:11,360
secret itself is very straightforward to

00:17:10,720 --> 00:17:14,720
use

00:17:11,360 --> 00:17:16,160
but it does rely upon pgp pgp are pretty

00:17:14,720 --> 00:17:17,919
good privacy is an encryption program

00:17:16,160 --> 00:17:19,039
that provides cryptographic privacy and

00:17:17,919 --> 00:17:21,679
identification

00:17:19,039 --> 00:17:24,400
by public and private key pairs and it

00:17:21,679 --> 00:17:26,000
is notoriously fiddly to set up

00:17:24,400 --> 00:17:27,439
there's also the problem of validating a

00:17:26,000 --> 00:17:28,240
public key belongs to who you think it

00:17:27,439 --> 00:17:30,240
does

00:17:28,240 --> 00:17:31,679
and they're key signed parties web of

00:17:30,240 --> 00:17:33,679
trust and

00:17:31,679 --> 00:17:35,120
lots of things that are way too scoped

00:17:33,679 --> 00:17:36,080
for this talk

00:17:35,120 --> 00:17:37,760
thankfully there are pretty

00:17:36,080 --> 00:17:38,480
comprehensive guides for setting up pgp

00:17:37,760 --> 00:17:40,400
on

00:17:38,480 --> 00:17:41,600
pretty much any os you can imagine so

00:17:40,400 --> 00:17:43,440
for the sake of the talk i'm going to

00:17:41,600 --> 00:17:44,880
assume you already have pgp installed

00:17:43,440 --> 00:17:47,280
and you have access to your colleagues

00:17:44,880 --> 00:17:48,880
public keys so let's dive into get

00:17:47,280 --> 00:17:51,120
secret

00:17:48,880 --> 00:17:52,559
first we initiate it much as soon as we

00:17:51,120 --> 00:17:54,480
would a git repository

00:17:52,559 --> 00:17:55,760
this will create a hidden folder dot get

00:17:54,480 --> 00:17:57,280
secret

00:17:55,760 --> 00:17:59,360
now we need to add some users we should

00:17:57,280 --> 00:18:01,200
know our secrets this is done with

00:17:59,360 --> 00:18:04,480
get secret tell followed by the email

00:18:01,200 --> 00:18:06,480
address associated with their public key

00:18:04,480 --> 00:18:08,799
when we add a file to get secret it

00:18:06,480 --> 00:18:10,160
creates a new file it does not change

00:18:08,799 --> 00:18:12,080
the file in place

00:18:10,160 --> 00:18:14,400
so our unencrypted file is still within

00:18:12,080 --> 00:18:14,720
our directory we must ensure that it is

00:18:14,400 --> 00:18:17,200
not

00:18:14,720 --> 00:18:18,160
accidentally committed goodseeker tries

00:18:17,200 --> 00:18:19,840
to help us with this

00:18:18,160 --> 00:18:21,840
if you add a file to get secret it'll

00:18:19,840 --> 00:18:23,840
automatically add it to your getignore

00:18:21,840 --> 00:18:25,600
if it's not already there if we take a

00:18:23,840 --> 00:18:27,520
look at our gitignore file after adding

00:18:25,600 --> 00:18:29,280
our key file to our list of secrets

00:18:27,520 --> 00:18:30,960
we can see that has been added along

00:18:29,280 --> 00:18:31,760
with some files which get secret needs

00:18:30,960 --> 00:18:34,480
to function

00:18:31,760 --> 00:18:35,679
but should also not be shared now at

00:18:34,480 --> 00:18:36,880
this point if we look at the contents of

00:18:35,679 --> 00:18:39,120
our directory

00:18:36,880 --> 00:18:41,360
we can see our unencrypted file is there

00:18:39,120 --> 00:18:43,600
but still no encrypted version

00:18:41,360 --> 00:18:45,360
first we have to tell git secret to hide

00:18:43,600 --> 00:18:47,360
all the files we've added

00:18:45,360 --> 00:18:48,799
now if we ls again we can see the

00:18:47,360 --> 00:18:49,520
encrypted version of the file has been

00:18:48,799 --> 00:18:50,799
created

00:18:49,520 --> 00:18:52,799
and we can now see if we add the

00:18:50,799 --> 00:18:54,400
encrypted version to our repository and

00:18:52,799 --> 00:18:55,840
push it up

00:18:54,400 --> 00:18:58,160
then when one of our colleagues pulls

00:18:55,840 --> 00:18:59,840
diner encoded file they can run reveal

00:18:58,160 --> 00:19:01,760
and it will use their private key to

00:18:59,840 --> 00:19:03,520
decrypt it

00:19:01,760 --> 00:19:05,360
get secret also comes a few commands to

00:19:03,520 --> 00:19:08,160
make managing secrets and access

00:19:05,360 --> 00:19:09,679
easier the who knows command will list

00:19:08,160 --> 00:19:11,200
all users who are able to decrypt

00:19:09,679 --> 00:19:12,880
secrets in a repository

00:19:11,200 --> 00:19:14,160
handy if someone leaves your team need

00:19:12,880 --> 00:19:15,600
to figure out which secrets need to be

00:19:14,160 --> 00:19:17,679
rotated

00:19:15,600 --> 00:19:21,039
list will tell you which files in a

00:19:17,679 --> 00:19:22,880
repository are regarded as secret

00:19:21,039 --> 00:19:24,240
and if someone does leave and need to

00:19:22,880 --> 00:19:26,960
remove their access

00:19:24,240 --> 00:19:28,480
there is the rather morbidly named kill

00:19:26,960 --> 00:19:30,480
person

00:19:28,480 --> 00:19:32,000
the kill person commands will ensure

00:19:30,480 --> 00:19:33,679
that person cannot decrypt any new

00:19:32,000 --> 00:19:35,440
secrets which are created

00:19:33,679 --> 00:19:37,280
but it does not re-encrypt any existing

00:19:35,440 --> 00:19:38,559
secrets so even though the person has

00:19:37,280 --> 00:19:41,600
been removed they will still

00:19:38,559 --> 00:19:42,880
decrypt any existing secrets there's

00:19:41,600 --> 00:19:44,240
little point in re-encrypting the

00:19:42,880 --> 00:19:46,080
existing files as they'll need to be

00:19:44,240 --> 00:19:48,000
rotated anyways

00:19:46,080 --> 00:19:50,000
instead once the secret has been rotated

00:19:48,000 --> 00:19:51,600
then you run hide in the new secret

00:19:50,000 --> 00:19:54,720
and the remove user will not be able to

00:19:51,600 --> 00:19:54,720
access this new version

00:19:55,120 --> 00:19:58,960
another tool i want to look at is

00:19:56,799 --> 00:20:00,320
confusingly called get secrets

00:19:58,960 --> 00:20:02,080
because developers can get tools of

00:20:00,320 --> 00:20:02,960
apparently even less imagination than i

00:20:02,080 --> 00:20:04,880
do

00:20:02,960 --> 00:20:06,640
get secrets scans commits commit

00:20:04,880 --> 00:20:08,000
messages and no fast-forward mergers to

00:20:06,640 --> 00:20:10,480
prevent adding secrets into your git

00:20:08,000 --> 00:20:12,240
repositories

00:20:10,480 --> 00:20:13,919
all the tools and processes we've looked

00:20:12,240 --> 00:20:14,559
at so far have attempted to make it

00:20:13,919 --> 00:20:16,720
easier

00:20:14,559 --> 00:20:18,480
to safely manage secrets this tool

00:20:16,720 --> 00:20:19,760
however attacks a problem in a different

00:20:18,480 --> 00:20:21,120
way

00:20:19,760 --> 00:20:23,200
now we're going to make it more

00:20:21,120 --> 00:20:27,280
difficult to hard code secrets

00:20:23,200 --> 00:20:29,200
in your scripts get secrets uses regexes

00:20:27,280 --> 00:20:30,720
to attempt to detect secret secrets

00:20:29,200 --> 00:20:32,640
within your commits

00:20:30,720 --> 00:20:34,320
it does this be using get hooks get

00:20:32,640 --> 00:20:34,799
secrets installed we'll generate some

00:20:34,320 --> 00:20:36,799
get some

00:20:34,799 --> 00:20:38,400
templates with hooks already configured

00:20:36,799 --> 00:20:40,159
to check each commit

00:20:38,400 --> 00:20:42,799
we can then specify these templates as a

00:20:40,159 --> 00:20:45,039
new defaults for any get repositories

00:20:42,799 --> 00:20:46,960
and because getsecrets is from aws labs

00:20:45,039 --> 00:20:49,280
it comes it comes with providers to take

00:20:46,960 --> 00:20:51,760
away access keys built in

00:20:49,280 --> 00:20:54,000
but you can also add your own a provider

00:20:51,760 --> 00:20:55,360
is simply a list of regexes one per line

00:20:54,000 --> 00:20:57,280
the recommended method is to store them

00:20:55,360 --> 00:21:00,159
all in a file and then chat them

00:20:57,280 --> 00:21:00,640
but this is some draw box so summary x's

00:21:00,159 --> 00:21:03,039
are

00:21:00,640 --> 00:21:04,880
pretty easy to recognize this is the

00:21:03,039 --> 00:21:07,760
regex for an rsa key

00:21:04,880 --> 00:21:09,280
straightforward but what about this one

00:21:07,760 --> 00:21:10,400
i'd love to know if anybody recognizes

00:21:09,280 --> 00:21:11,840
this right away

00:21:10,400 --> 00:21:14,240
it's actually the right x for detecting

00:21:11,840 --> 00:21:17,520
google oauth access tokens

00:21:14,240 --> 00:21:19,039
and this one facebook access tokens

00:21:17,520 --> 00:21:20,720
so as you can see having a single large

00:21:19,039 --> 00:21:22,000
file of undocumented regexes could

00:21:20,720 --> 00:21:22,960
quickly become very difficult to

00:21:22,000 --> 00:21:24,960
maintain

00:21:22,960 --> 00:21:26,080
instead i place my directory neatly

00:21:24,960 --> 00:21:27,600
organized

00:21:26,080 --> 00:21:29,760
separate files depending on the type of

00:21:27,600 --> 00:21:31,360
secret i want to detect and then in each

00:21:29,760 --> 00:21:33,200
file i have comments in y space they'll

00:21:31,360 --> 00:21:34,480
be group rejected together and document

00:21:33,200 --> 00:21:37,520
what secret they're going to

00:21:34,480 --> 00:21:39,039
going to detect but get secrets will not

00:21:37,520 --> 00:21:40,400
accept these as a provider

00:21:39,039 --> 00:21:42,960
so you need to get a little creative

00:21:40,400 --> 00:21:45,120
egrep we collect all the files in our

00:21:42,960 --> 00:21:46,480
directory strip by any lines just our

00:21:45,120 --> 00:21:47,600
hash or which are empty

00:21:46,480 --> 00:21:50,480
and then return the result list

00:21:47,600 --> 00:21:52,080
transformation to git secrets

00:21:50,480 --> 00:21:54,000
which is exactly the same inputs we had

00:21:52,080 --> 00:21:55,679
before but now it comes from a much more

00:21:54,000 --> 00:21:58,400
maintainable

00:21:55,679 --> 00:21:59,600
system than one long undocumented list

00:21:58,400 --> 00:22:01,280
we've got secrets and our customer

00:21:59,600 --> 00:22:03,280
providers installed we try to commit a

00:22:01,280 --> 00:22:05,200
private key it will throw an error

00:22:03,280 --> 00:22:07,520
now get secrets can produce false

00:22:05,200 --> 00:22:08,960
positives the error message

00:22:07,520 --> 00:22:10,799
will give you some examples of how you

00:22:08,960 --> 00:22:12,400
can force your commit through

00:22:10,799 --> 00:22:15,120
so if you are totally committed to

00:22:12,400 --> 00:22:18,320
shooting yourself into fit you still can

00:22:15,120 --> 00:22:18,960
but hopefully it introduces just enough

00:22:18,320 --> 00:22:20,640
friction

00:22:18,960 --> 00:22:22,080
to make hard-coding secrets more of a

00:22:20,640 --> 00:22:23,520
hassle than just using environment

00:22:22,080 --> 00:22:24,799
variables

00:22:23,520 --> 00:22:26,960
finally we're going to look at a tool

00:22:24,799 --> 00:22:30,080
for when all else fails

00:22:26,960 --> 00:22:31,520
get leaks auto get repo's for secrets

00:22:30,080 --> 00:22:33,280
get leaks provides a way for you to find

00:22:31,520 --> 00:22:34,640
unencrypted secrets or other unwanted

00:22:33,280 --> 00:22:35,919
data types and get source code

00:22:34,640 --> 00:22:37,760
repositories

00:22:35,919 --> 00:22:39,280
get leaks is for when even with all your

00:22:37,760 --> 00:22:40,240
best intentions the secret has made it

00:22:39,280 --> 00:22:41,280
into your repo

00:22:40,240 --> 00:22:43,440
because the only thing worse than

00:22:41,280 --> 00:22:45,360
leaking a secret is not knowing you've

00:22:43,440 --> 00:22:46,720
leaked the secret

00:22:45,360 --> 00:22:48,320
it works in much the same way as get

00:22:46,720 --> 00:22:49,360
secrets for rather than inspecting

00:22:48,320 --> 00:22:52,080
individual commits

00:22:49,360 --> 00:22:53,919
you can inspect a multitude of things a

00:22:52,080 --> 00:22:55,840
single repo all we built with single

00:22:53,919 --> 00:22:57,679
user all requests under an organization

00:22:55,840 --> 00:23:00,000
all code in the github pr

00:22:57,679 --> 00:23:01,919
and also inspect get hack sorry get lab

00:23:00,000 --> 00:23:03,520
using groups too

00:23:01,919 --> 00:23:05,280
i recommend using it a couple different

00:23:03,520 --> 00:23:06,559
ways one

00:23:05,280 --> 00:23:08,720
have it configured to run as part of

00:23:06,559 --> 00:23:11,520
your pr process any leaks

00:23:08,720 --> 00:23:12,960
block the merge two run it against your

00:23:11,520 --> 00:23:15,600
entire organization

00:23:12,960 --> 00:23:17,360
every ir day week or whatever frequency

00:23:15,600 --> 00:23:19,039
you feel is sufficient

00:23:17,360 --> 00:23:20,880
whenever it takes a leak you get a nice

00:23:19,039 --> 00:23:22,960
report showing which rule was triggered

00:23:20,880 --> 00:23:24,720
by which commit in which file and who

00:23:22,960 --> 00:23:28,720
authored it

00:23:24,720 --> 00:23:32,240
so in closing keep secrets and code

00:23:28,720 --> 00:23:35,600
separate if you must share secrets

00:23:32,240 --> 00:23:37,760
encrypt them first yes pgb can be fiddly

00:23:35,600 --> 00:23:39,679
but it's worth it in the long run

00:23:37,760 --> 00:23:41,360
automate automate automate

00:23:39,679 --> 00:23:42,799
if your secret management requires lots

00:23:41,360 --> 00:23:45,760
of manual work for developers

00:23:42,799 --> 00:23:47,360
they will skip it i know i would it's so

00:23:45,760 --> 00:23:49,200
easy to justify it yourself

00:23:47,360 --> 00:23:50,880
it's just this once it's just a little

00:23:49,200 --> 00:23:53,039
perfect concept you'll totally remember

00:23:50,880 --> 00:23:54,880
to remove those secrets before you push

00:23:53,039 --> 00:23:56,960
i've made all the same excuses to myself

00:23:54,880 --> 00:23:59,919
too so keep it easy

00:23:56,960 --> 00:24:01,440
automate where possible and late is

00:23:59,919 --> 00:24:02,880
better than never

00:24:01,440 --> 00:24:04,640
finding out you've accidentally leaked a

00:24:02,880 --> 00:24:07,760
secret it's a stomach dropping

00:24:04,640 --> 00:24:09,200
heart racing breath catching experience

00:24:07,760 --> 00:24:11,039
but leaking a secret and not knowing

00:24:09,200 --> 00:24:14,080
until after it's been compromised

00:24:11,039 --> 00:24:15,679
is even worse so run your get leak scans

00:24:14,080 --> 00:24:17,200
run them as often as you can

00:24:15,679 --> 00:24:18,720
and have a plan in place when you do

00:24:17,200 --> 00:24:20,880
inevitably leak a secret so you can deal

00:24:18,720 --> 00:24:22,400
with it quickly

00:24:20,880 --> 00:24:24,159
so that's everything about secrets thank

00:24:22,400 --> 00:24:25,760
you very much for your attention

00:24:24,159 --> 00:24:27,440
please do add me on twitter at our

00:24:25,760 --> 00:24:29,520
ambassador i'd love to hear any feedback

00:24:27,440 --> 00:24:31,120
or questions you might have

00:24:29,520 --> 00:24:32,880
if you would like to revisit any of my

00:24:31,120 --> 00:24:35,120
slides later they will all be published

00:24:32,880 --> 00:24:36,960
that notice shortly after this talk

00:24:35,120 --> 00:24:39,039
i'm not sure how much time we have left

00:24:36,960 --> 00:24:40,240
for questions but it will be available

00:24:39,039 --> 00:24:41,600
in the hallway chat if anybody would

00:24:40,240 --> 00:24:43,600
like to speak to me there

00:24:41,600 --> 00:24:45,360
i know i've been sorely missing seeing

00:24:43,600 --> 00:24:47,440
everyone at conferences this year

00:24:45,360 --> 00:24:49,120
so it would be really nice to catch up

00:24:47,440 --> 00:24:50,640
and chat and thanks again to everyone

00:24:49,120 --> 00:24:52,400
who attended my talk and the picon

00:24:50,640 --> 00:24:53,760
australia organizers for a wonderful

00:24:52,400 --> 00:24:56,799
conference

00:24:53,760 --> 00:24:58,840
thank you fantastic that that was a

00:24:56,799 --> 00:25:01,840
great talk

00:24:58,840 --> 00:25:01,840
um

00:25:02,799 --> 00:25:06,799
um we have a whole bunch of questions

00:25:05,120 --> 00:25:08,080
and unfortunately we don't have time to

00:25:06,799 --> 00:25:10,000
to cater for them all i think we've got

00:25:08,080 --> 00:25:12,240
time for about one um

00:25:10,000 --> 00:25:13,679
picking which one is really difficult so

00:25:12,240 --> 00:25:15,440
um

00:25:13,679 --> 00:25:16,960
questions about the transition from how

00:25:15,440 --> 00:25:18,480
you would do this from what you were

00:25:16,960 --> 00:25:20,000
saying about like well i'm just doing

00:25:18,480 --> 00:25:20,640
this in development and i want to use

00:25:20,000 --> 00:25:23,440
something

00:25:20,640 --> 00:25:25,120
in more in production how how did you

00:25:23,440 --> 00:25:26,240
how would you recommend that people make

00:25:25,120 --> 00:25:28,720
that transition

00:25:26,240 --> 00:25:30,799
from kind of just mucking around on like

00:25:28,720 --> 00:25:32,400
on my machine to now i need to make this

00:25:30,799 --> 00:25:34,640
a bit more production ready

00:25:32,400 --> 00:25:36,000
how would they trade the good thing is

00:25:34,640 --> 00:25:36,400
if you're managing all of your secrets

00:25:36,000 --> 00:25:38,480
um

00:25:36,400 --> 00:25:39,760
within say environment variables so

00:25:38,480 --> 00:25:41,360
they're not being they're not included

00:25:39,760 --> 00:25:42,880
anywhere in your source codes

00:25:41,360 --> 00:25:44,559
then really all you're looking at is

00:25:42,880 --> 00:25:45,600
whatever your orchestration platform is

00:25:44,559 --> 00:25:47,200
whatever is

00:25:45,600 --> 00:25:48,880
put into together your production

00:25:47,200 --> 00:25:49,600
environments is it just needs to set

00:25:48,880 --> 00:25:51,279
those same

00:25:49,600 --> 00:25:53,600
environment variables as well okay so

00:25:51,279 --> 00:25:55,279
not going to be like an mrc file

00:25:53,600 --> 00:25:56,640
um like i had in my example you know

00:25:55,279 --> 00:25:58,880
they may be coming from

00:25:56,640 --> 00:26:00,559
uh chicago faults or they may be coming

00:25:58,880 --> 00:26:02,480
from some other kind of uh

00:26:00,559 --> 00:26:03,840
secret store but as long as they can get

00:26:02,480 --> 00:26:05,279
them into the environment

00:26:03,840 --> 00:26:07,360
then your scripts just run the exact

00:26:05,279 --> 00:26:08,880
same way right

00:26:07,360 --> 00:26:10,640
cool okay that doesn't sound too

00:26:08,880 --> 00:26:12,159
difficult um

00:26:10,640 --> 00:26:13,679
there are lots of questions around some

00:26:12,159 --> 00:26:15,360
of the nuances and i really encourage

00:26:13,679 --> 00:26:18,000
everyone to to jump into the

00:26:15,360 --> 00:26:20,080
uh the hallway chat because uh we've got

00:26:18,000 --> 00:26:21,440
a relatively short time uh spin around

00:26:20,080 --> 00:26:23,039
for the next talk here

00:26:21,440 --> 00:26:24,480
um and i know that people wanna to ask

00:26:23,039 --> 00:26:28,080
you some questions so

00:26:24,480 --> 00:26:29,600
um and um if i don't get to run

00:26:28,080 --> 00:26:31,919
everybody in the chat as is that my

00:26:29,600 --> 00:26:33,600
my uh twitter there is on there please

00:26:31,919 --> 00:26:35,039
i'm i'm pretty active there my dms

00:26:33,600 --> 00:26:36,320
always open as well so if you don't ask

00:26:35,039 --> 00:26:38,159
me something in public

00:26:36,320 --> 00:26:39,760
i'm happy to receive any private

00:26:38,159 --> 00:26:41,360
questions too so hopefully i'll get

00:26:39,760 --> 00:26:44,240
everybody in chat but if not

00:26:41,360 --> 00:26:45,520
please uh feel free to reach out awesome

00:26:44,240 --> 00:26:48,159
thanks so much aaron

00:26:45,520 --> 00:26:48,960
okay thanks again everybody that's great

00:26:48,159 --> 00:26:51,679
so coming up

00:26:48,960 --> 00:26:52,640
uh in about oh i think we've got about

00:26:51,679 --> 00:26:55,360
nine minutes

00:26:52,640 --> 00:26:56,240
um of turnover uh i think with yes about

00:26:55,360 --> 00:26:58,559
well eight minutes

00:26:56,240 --> 00:26:59,360
remaining uh we have thomas wolford

00:26:58,559 --> 00:27:02,320
coming up next

00:26:59,360 --> 00:27:03,840
with a chat uh his talk is called a sack

00:27:02,320 --> 00:27:05,520
full of angry snakes

00:27:03,840 --> 00:27:07,520
taming your python dependencies with

00:27:05,520 --> 00:27:09,840
nicks which sounds fascinating

00:27:07,520 --> 00:27:11,279
so do be back here in about like i said

00:27:09,840 --> 00:27:12,799
about eight minutes but if you have some

00:27:11,279 --> 00:27:14,400
questions we have aaron

00:27:12,799 --> 00:27:16,480
who's going to be in the hallway tracks

00:27:14,400 --> 00:27:18,880
for uh in the hallway chat

00:27:16,480 --> 00:27:20,159
rather to uh to talk to everyone so

00:27:18,880 --> 00:27:26,720
we'll see you again on the stream

00:27:20,159 --> 00:27:26,720

YouTube URL: https://www.youtube.com/watch?v=2XNIbOMYr_Q


