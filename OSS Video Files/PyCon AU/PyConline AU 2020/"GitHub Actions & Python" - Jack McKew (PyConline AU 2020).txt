Title: "GitHub Actions & Python" - Jack McKew (PyConline AU 2020)
Publication date: 2020-09-08
Playlist: PyConline AU 2020
Description: 
	Jack McKew

https://2020.pycon.org.au/program/MRUT7W

GitHub Actions are free-to-use, plug & play blocks of continuous integration / continuous delivery (CICD). 

This talk will go into how GitHub actions help me maintain my open source Python packages (Pandas_Alive), and how I released my own GitHub Actions for automating the packaging of Python code to executables with PyInstaller.

Tutorial blog posts I've written:

https://jackmckew.dev/github-actions-for-cicd.html

https://jackmckew.dev/how-to-make-github-actions.html

GitHub Actions I've released:

https://github.com/marketplace/actions/pyinstaller-windows

https://github.com/marketplace/actions/pyinstaller-linux

https://github.com/marketplace/actions/python-interrogate-check

Open source Python projects that GitHub actions help me maintain:

https://github.com/JackMcKew/pandas_alive

This talk has a brief mention of animated graphs to do with the COVID-19 pandemic.

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

Python, PyCon, PyConAU, PyConline

Sat Sep  5 11:35:00 2020 at Floperator
Captions: 
	00:00:00,320 --> 00:00:04,960
welcome back everybody you are in the

00:00:02,320 --> 00:00:08,000
flip-flop operator auditorium

00:00:04,960 --> 00:00:10,559
um coming up now we have jack mchugh

00:00:08,000 --> 00:00:12,160
jack is an engineer from newcastle uh

00:00:10,559 --> 00:00:14,320
he's very passionate about open source

00:00:12,160 --> 00:00:16,080
software and data science

00:00:14,320 --> 00:00:18,240
and he's going to be talking to us today

00:00:16,080 --> 00:00:18,960
about setting up github actions in

00:00:18,240 --> 00:00:20,800
python

00:00:18,960 --> 00:00:23,119
so without any further ado take it away

00:00:20,800 --> 00:00:23,119
jack

00:00:23,359 --> 00:00:27,840
thanks very much tom um g'day everybody

00:00:26,000 --> 00:00:29,920
uh i'm here to talk about obviously

00:00:27,840 --> 00:00:31,439
github actions and python for pike on a

00:00:29,920 --> 00:00:33,680
year 2020

00:00:31,439 --> 00:00:35,440
the general overview of the talk will be

00:00:33,680 --> 00:00:37,280
what are github actions

00:00:35,440 --> 00:00:40,640
why should you use them or care about

00:00:37,280 --> 00:00:44,160
them at all and how to set them up

00:00:40,640 --> 00:00:44,879
so let's dive into it first off is a

00:00:44,160 --> 00:00:47,440
quick note

00:00:44,879 --> 00:00:49,440
um this talk is completely open source

00:00:47,440 --> 00:00:52,079
and is built with github actions

00:00:49,440 --> 00:00:53,920
um which i thought was very fitting and

00:00:52,079 --> 00:00:55,840
is hosted on github pages

00:00:53,920 --> 00:00:57,920
so there will be a url in the show notes

00:00:55,840 --> 00:00:59,199
later and everything you see you can

00:00:57,920 --> 00:01:01,920
visit yourself and

00:00:59,199 --> 00:01:02,640
see the slides yourself so you'd be more

00:01:01,920 --> 00:01:05,840
than happy to

00:01:02,640 --> 00:01:07,840
visit that later on um a bit about me

00:01:05,840 --> 00:01:09,280
my name is jack mchugh i'm a senior

00:01:07,840 --> 00:01:11,040
software engineer at decky

00:01:09,280 --> 00:01:12,880
i absolutely love solving problems

00:01:11,040 --> 00:01:14,479
especially with python

00:01:12,880 --> 00:01:16,960
which you can see in my weekly blog

00:01:14,479 --> 00:01:18,400
which i try and solve a random problem

00:01:16,960 --> 00:01:20,000
every week or

00:01:18,400 --> 00:01:21,439
with python or any sort of other

00:01:20,000 --> 00:01:22,960
technology things

00:01:21,439 --> 00:01:25,040
you can also reach me on twitter

00:01:22,960 --> 00:01:26,560
linkedin github more

00:01:25,040 --> 00:01:29,439
and i'm more than happy to talk to

00:01:26,560 --> 00:01:32,240
anybody about anything

00:01:29,439 --> 00:01:33,119
the sort of projects that i work on i'm

00:01:32,240 --> 00:01:34,720
the creator

00:01:33,119 --> 00:01:36,799
and the maintainer of open source

00:01:34,720 --> 00:01:37,759
packages such as pandas alive which

00:01:36,799 --> 00:01:41,280
recently just

00:01:37,759 --> 00:01:42,880
crossed 21 000 downloads of pytho which

00:01:41,280 --> 00:01:45,360
is very humbling

00:01:42,880 --> 00:01:47,119
um the awesome python bytes list which

00:01:45,360 --> 00:01:49,200
is a podcast by

00:01:47,119 --> 00:01:50,560
brian ochen and michael kennedy which i

00:01:49,200 --> 00:01:52,479
really enjoy

00:01:50,560 --> 00:01:54,399
and that's maintained on github and then

00:01:52,479 --> 00:01:56,000
i've built numerous github actions

00:01:54,399 --> 00:01:57,520
which is why i'm so passionate about

00:01:56,000 --> 00:02:00,159
them for

00:01:57,520 --> 00:02:01,040
pi installer interrogate and more and

00:02:00,159 --> 00:02:04,159
we'll go into

00:02:01,040 --> 00:02:05,040
more of those later on in this talk but

00:02:04,159 --> 00:02:06,479
first off

00:02:05,040 --> 00:02:08,080
for those out there who might not be

00:02:06,479 --> 00:02:09,119
sure what github is and what the whole

00:02:08,080 --> 00:02:11,599
workflow is

00:02:09,119 --> 00:02:13,200
so github is essentially like google

00:02:11,599 --> 00:02:14,640
drive for code or it's like a

00:02:13,200 --> 00:02:17,760
cloud-based storage

00:02:14,640 --> 00:02:19,760
for code bases and things like that

00:02:17,760 --> 00:02:21,200
so the sort of workflow it's a version

00:02:19,760 --> 00:02:24,319
control system

00:02:21,200 --> 00:02:27,120
so you save your changes locally you

00:02:24,319 --> 00:02:29,440
push them up to github when you're happy

00:02:27,120 --> 00:02:31,200
and then github actions can fire on any

00:02:29,440 --> 00:02:33,040
sort of event you can think of whether

00:02:31,200 --> 00:02:36,080
it's someone commenting

00:02:33,040 --> 00:02:38,080
someone pushing someone else pushing

00:02:36,080 --> 00:02:40,160
etc things like that and you can

00:02:38,080 --> 00:02:41,120
customize this and it's all really well

00:02:40,160 --> 00:02:43,040
documented

00:02:41,120 --> 00:02:45,200
throughout the website that the github

00:02:43,040 --> 00:02:47,920
provides

00:02:45,200 --> 00:02:48,800
but what are github actions github

00:02:47,920 --> 00:02:50,640
actions

00:02:48,800 --> 00:02:52,720
are completely free to use for public

00:02:50,640 --> 00:02:54,560
repositories

00:02:52,720 --> 00:02:55,760
they're paid for private which i think

00:02:54,560 --> 00:02:58,720
is something like an

00:02:55,760 --> 00:02:59,840
eight zero point zero zero zero eight

00:02:58,720 --> 00:03:01,440
cents

00:02:59,840 --> 00:03:03,680
a minute or something like which is

00:03:01,440 --> 00:03:07,519
extremely cheap

00:03:03,680 --> 00:03:10,319
and they're plug and play blocks of cicd

00:03:07,519 --> 00:03:11,200
the i absolutely love the plug and play

00:03:10,319 --> 00:03:14,319
part of it

00:03:11,200 --> 00:03:15,680
you can just use other people's parts

00:03:14,319 --> 00:03:17,440
and stick them all together into your

00:03:15,680 --> 00:03:19,120
workflow just to make it work and it's

00:03:17,440 --> 00:03:23,519
unreal

00:03:19,120 --> 00:03:26,239
but what's cmc cicd you might be asking

00:03:23,519 --> 00:03:28,319
cicd stands for continuous integration

00:03:26,239 --> 00:03:30,159
and continuous delivery

00:03:28,319 --> 00:03:32,159
this allows us to automate building

00:03:30,159 --> 00:03:35,280
testing deployment

00:03:32,159 --> 00:03:38,959
rollouts etc unreal things like that

00:03:35,280 --> 00:03:41,200
and really helps end with our workflow

00:03:38,959 --> 00:03:43,280
as i said the ci part that's the bit

00:03:41,200 --> 00:03:44,799
where we build our python package we

00:03:43,280 --> 00:03:46,640
test it etc

00:03:44,799 --> 00:03:49,200
before we're going to release it to pipe

00:03:46,640 --> 00:03:50,319
bi or anaconda or anything else like

00:03:49,200 --> 00:03:52,720
that

00:03:50,319 --> 00:03:54,319
so that's and that the releasing part is

00:03:52,720 --> 00:03:57,840
the delivery

00:03:54,319 --> 00:03:59,519
so how your users are receiving

00:03:57,840 --> 00:04:01,280
the packages and the software that

00:03:59,519 --> 00:04:03,519
you've built one you

00:04:01,280 --> 00:04:05,200
could think about it is that if with pi

00:04:03,519 --> 00:04:07,840
installer which is a package for

00:04:05,200 --> 00:04:09,360
compiling code into executables that's

00:04:07,840 --> 00:04:11,519
the ci

00:04:09,360 --> 00:04:13,680
and sending that executable to someone

00:04:11,519 --> 00:04:15,360
by whatever means that's the cd

00:04:13,680 --> 00:04:17,199
and if we can automate that that'd be

00:04:15,360 --> 00:04:19,680
unreal

00:04:17,199 --> 00:04:20,880
as i said github actions are plug and

00:04:19,680 --> 00:04:23,520
play

00:04:20,880 --> 00:04:24,720
and there is lots and lots of them to

00:04:23,520 --> 00:04:26,320
use

00:04:24,720 --> 00:04:28,880
so there is a thing called the

00:04:26,320 --> 00:04:30,639
marketplace which you can go on

00:04:28,880 --> 00:04:32,080
from github.com and i'll show you an

00:04:30,639 --> 00:04:35,680
example in a minute

00:04:32,080 --> 00:04:38,800
where you can find pre-made open source

00:04:35,680 --> 00:04:39,440
blocks of cncid cicd that you can click

00:04:38,800 --> 00:04:42,639
together

00:04:39,440 --> 00:04:44,560
and build up your workflow

00:04:42,639 --> 00:04:46,800
so this is the marketplace at the time

00:04:44,560 --> 00:04:49,840
of this screenshot there was 4

00:04:46,800 --> 00:04:50,160
600 or so actions which is unreal and i

00:04:49,840 --> 00:04:51,600
think

00:04:50,160 --> 00:04:54,800
this morning when i checked there's over

00:04:51,600 --> 00:04:56,560
5 000 which is absolutely unreal and i'm

00:04:54,800 --> 00:04:59,440
more than happy to say that i've

00:04:56,560 --> 00:05:01,280
contributed five or six of those

00:04:59,440 --> 00:05:02,880
so we could see there's ones and it's

00:05:01,280 --> 00:05:07,039
not specific to python

00:05:02,880 --> 00:05:10,160
it runs on all sorts of languages ruby

00:05:07,039 --> 00:05:12,479
javascript etc they're all there and

00:05:10,160 --> 00:05:14,160
some of the actions actually come

00:05:12,479 --> 00:05:15,600
pre-compiled with different

00:05:14,160 --> 00:05:17,199
things installed so you don't even have

00:05:15,600 --> 00:05:18,400
to worry about setting them up

00:05:17,199 --> 00:05:20,160
and that's all covered in the

00:05:18,400 --> 00:05:23,280
documentation if you really wanted to

00:05:20,160 --> 00:05:23,280
dive into it as well

00:05:23,759 --> 00:05:28,479
but why should you care about this at

00:05:26,320 --> 00:05:30,320
all

00:05:28,479 --> 00:05:32,320
if you can automate something you

00:05:30,320 --> 00:05:34,479
definitely should in my opinion

00:05:32,320 --> 00:05:36,000
the more time we can spend letting the

00:05:34,479 --> 00:05:37,919
computers do the hard work

00:05:36,000 --> 00:05:39,120
and as programmers and python

00:05:37,919 --> 00:05:42,479
enthusiasts we

00:05:39,120 --> 00:05:42,800
notice more than anyone more the time we

00:05:42,479 --> 00:05:45,199
can

00:05:42,800 --> 00:05:46,880
make a computer give us back more time

00:05:45,199 --> 00:05:48,960
in the day the more time we can spend

00:05:46,880 --> 00:05:50,960
doing the things we enjoy

00:05:48,960 --> 00:05:53,759
seeing family spending time with loved

00:05:50,960 --> 00:05:56,000
ones keeping our health in check

00:05:53,759 --> 00:05:57,680
and we're not worrying about oh did i do

00:05:56,000 --> 00:06:00,319
that analysis right

00:05:57,680 --> 00:06:02,960
and we're getting rid of the manual

00:06:00,319 --> 00:06:06,400
errors that may came up

00:06:02,960 --> 00:06:07,840
so i am strong believer in automation

00:06:06,400 --> 00:06:10,160
and if you can do it you definitely

00:06:07,840 --> 00:06:10,160
should

00:06:10,560 --> 00:06:14,080
what i use github actions obviously i've

00:06:12,639 --> 00:06:16,960
used them for this talk

00:06:14,080 --> 00:06:18,319
this talk is compiled from markdown

00:06:16,960 --> 00:06:20,560
which is then uses a

00:06:18,319 --> 00:06:22,479
javascript package to build this website

00:06:20,560 --> 00:06:25,840
and that's hosted on github pages which

00:06:22,479 --> 00:06:28,400
is another free service by github

00:06:25,840 --> 00:06:28,960
and we'll go into that more in a bit but

00:06:28,400 --> 00:06:31,680
i also

00:06:28,960 --> 00:06:33,600
use github actions for testing i want my

00:06:31,680 --> 00:06:35,280
application to be tested

00:06:33,600 --> 00:06:36,960
once i've saved it to make sure there's

00:06:35,280 --> 00:06:39,840
no problems that i'm introducing

00:06:36,960 --> 00:06:42,319
once i've made some changes locally it

00:06:39,840 --> 00:06:45,280
builds and manages my documentation

00:06:42,319 --> 00:06:46,080
which is a really really handy one that

00:06:45,280 --> 00:06:48,000
i've found

00:06:46,080 --> 00:06:50,639
for especially for pandas alive and

00:06:48,000 --> 00:06:52,800
we'll have a look at that in a minute

00:06:50,639 --> 00:06:53,919
it syncs my examples with my working

00:06:52,800 --> 00:06:56,400
code so

00:06:53,919 --> 00:06:58,080
when you hit the readme of any open

00:06:56,400 --> 00:07:01,599
source package that i maintain

00:06:58,080 --> 00:07:03,280
there's code with the output and

00:07:01,599 --> 00:07:05,759
i always want to make sure that when a

00:07:03,280 --> 00:07:07,919
new user comes along

00:07:05,759 --> 00:07:09,680
the code's there that actually builds

00:07:07,919 --> 00:07:12,240
the output

00:07:09,680 --> 00:07:13,440
and that just makes the user experience

00:07:12,240 --> 00:07:15,440
so much better

00:07:13,440 --> 00:07:17,520
for the awesome python bytes list

00:07:15,440 --> 00:07:18,960
there's hundreds of links to other

00:07:17,520 --> 00:07:22,080
websites

00:07:18,960 --> 00:07:23,599
and it would just be terrible if someone

00:07:22,080 --> 00:07:24,960
went to click on one of those links and

00:07:23,599 --> 00:07:26,639
now it's broken

00:07:24,960 --> 00:07:28,080
and they can't find the thing that we

00:07:26,639 --> 00:07:29,120
would they were talking about on the

00:07:28,080 --> 00:07:30,880
podcast

00:07:29,120 --> 00:07:32,800
so i've got a github action which goes

00:07:30,880 --> 00:07:34,400
and clicks every link automatically for

00:07:32,800 --> 00:07:36,560
me to make sure that there's actually a

00:07:34,400 --> 00:07:39,120
page at the end of it

00:07:36,560 --> 00:07:40,319
for docstring coverage i wanted to make

00:07:39,120 --> 00:07:42,240
sure that all my

00:07:40,319 --> 00:07:44,080
functions in pandas alive had dock

00:07:42,240 --> 00:07:47,039
strings which the documentation

00:07:44,080 --> 00:07:48,879
depends upon so i've built a github

00:07:47,039 --> 00:07:49,840
action using the python package

00:07:48,879 --> 00:07:51,919
interrogate

00:07:49,840 --> 00:07:53,520
which is similar to testing coverage to

00:07:51,919 --> 00:07:54,879
make sure all of your functions are

00:07:53,520 --> 00:07:56,960
tested

00:07:54,879 --> 00:07:58,720
and finally patching packaging python

00:07:56,960 --> 00:08:00,960
code as an executable which is something

00:07:58,720 --> 00:08:03,919
i find myself doing regularly

00:08:00,960 --> 00:08:05,520
as i want to make sure that us python

00:08:03,919 --> 00:08:06,720
developers can share our code with

00:08:05,520 --> 00:08:08,080
people and they don't have to worry

00:08:06,720 --> 00:08:09,919
about setting up python

00:08:08,080 --> 00:08:12,319
virtual environments etc you can give

00:08:09,919 --> 00:08:14,720
them an executable they hit run

00:08:12,319 --> 00:08:16,319
it runs the program that you've

00:08:14,720 --> 00:08:18,160
developed

00:08:16,319 --> 00:08:19,599
and it's just there and we can automate

00:08:18,160 --> 00:08:21,520
that with github actions which you'll

00:08:19,599 --> 00:08:23,919
see in a minute

00:08:21,520 --> 00:08:25,120
you're probably asking me now but how do

00:08:23,919 --> 00:08:28,879
i set them up

00:08:25,120 --> 00:08:32,560
all you need to do is set up a yaml file

00:08:28,879 --> 00:08:35,200
in the root directory dot github

00:08:32,560 --> 00:08:36,959
slash workflows and then you can have as

00:08:35,200 --> 00:08:37,839
many or as little as you like and they

00:08:36,959 --> 00:08:40,320
can be as long

00:08:37,839 --> 00:08:41,120
or as small as you like so let's dive

00:08:40,320 --> 00:08:43,599
into

00:08:41,120 --> 00:08:44,480
the github action that builds this

00:08:43,599 --> 00:08:47,279
presentation

00:08:44,480 --> 00:08:49,200
and this is line for line a copy of

00:08:47,279 --> 00:08:52,000
exactly what i use

00:08:49,200 --> 00:08:54,240
so first i give it a name build and

00:08:52,000 --> 00:08:56,800
build and publish presentation

00:08:54,240 --> 00:08:59,680
and what triggers this action is what

00:08:56,800 --> 00:09:02,080
happens whenever i push my changes

00:08:59,680 --> 00:09:03,120
so whenever a push happens this fires

00:09:02,080 --> 00:09:06,320
the action

00:09:03,120 --> 00:09:08,640
and it does its magic next i've got my

00:09:06,320 --> 00:09:11,440
number of jobs so you can have any

00:09:08,640 --> 00:09:14,080
number of jobs in an action

00:09:11,440 --> 00:09:15,920
and they can do all different things so

00:09:14,080 --> 00:09:18,320
i've started with my first job

00:09:15,920 --> 00:09:20,000
is called release and in this one

00:09:18,320 --> 00:09:20,720
there's only one job because i only

00:09:20,000 --> 00:09:24,240
wanted to do

00:09:20,720 --> 00:09:25,279
i wanted to build release done and now

00:09:24,240 --> 00:09:27,200
i'm getting to

00:09:25,279 --> 00:09:29,040
my actual job and i can give that a name

00:09:27,200 --> 00:09:32,320
in itself which you'll see

00:09:29,040 --> 00:09:35,360
in the ui for github

00:09:32,320 --> 00:09:36,000
it runs on ubuntu so that's a linux

00:09:35,360 --> 00:09:38,240
distribution

00:09:36,000 --> 00:09:39,920
you can also do windows and mac they

00:09:38,240 --> 00:09:42,399
have different pricing schedules

00:09:39,920 --> 00:09:43,680
but for open source it's all free and

00:09:42,399 --> 00:09:46,399
it's

00:09:43,680 --> 00:09:47,839
very accessible from github finally we

00:09:46,399 --> 00:09:51,600
have the steps

00:09:47,839 --> 00:09:54,959
so what actual steps does this job do

00:09:51,600 --> 00:09:55,360
in this action first up i always seem to

00:09:54,959 --> 00:09:58,480
use

00:09:55,360 --> 00:10:01,600
the action slash checkout so actions

00:09:58,480 --> 00:10:02,560
i'm pretty sure is github's own and they

00:10:01,600 --> 00:10:05,360
maintain it

00:10:02,560 --> 00:10:06,000
it's not a so much open source it's a

00:10:05,360 --> 00:10:09,440
very

00:10:06,000 --> 00:10:10,160
extensive use throughout a checkout in

00:10:09,440 --> 00:10:12,720
git

00:10:10,160 --> 00:10:13,839
is when you take a copy of the latest

00:10:12,720 --> 00:10:17,120
code latest

00:10:13,839 --> 00:10:19,519
copy of that has been pushed up

00:10:17,120 --> 00:10:20,480
so we someone has saved their changes

00:10:19,519 --> 00:10:22,880
pushed them up to

00:10:20,480 --> 00:10:25,680
our repository and we're going to take a

00:10:22,880 --> 00:10:28,800
copy of that to run our

00:10:25,680 --> 00:10:30,480
action upon so i wanted to this to run

00:10:28,800 --> 00:10:32,399
on the latest presentation that i've

00:10:30,480 --> 00:10:35,760
started writing

00:10:32,399 --> 00:10:39,440
next up i install what i need to install

00:10:35,760 --> 00:10:41,680
so i install a package with npm

00:10:39,440 --> 00:10:43,519
the similar equivalent in python is pip

00:10:41,680 --> 00:10:46,480
or conda

00:10:43,519 --> 00:10:49,680
and we'll visit that in a little minute

00:10:46,480 --> 00:10:52,800
so i use a package called revealmd

00:10:49,680 --> 00:10:54,320
which is revealed javascript

00:10:52,800 --> 00:10:56,160
is a package for javascript called

00:10:54,320 --> 00:10:58,640
reveal.js which compiles

00:10:56,160 --> 00:11:00,399
markdown files into this presentation

00:10:58,640 --> 00:11:02,640
that you're seeing

00:11:00,399 --> 00:11:04,320
and after it's installed i want to run

00:11:02,640 --> 00:11:06,320
it on the markdown file

00:11:04,320 --> 00:11:08,480
that has been checked out into our

00:11:06,320 --> 00:11:10,000
action

00:11:08,480 --> 00:11:12,079
and finally we need to host this

00:11:10,000 --> 00:11:14,560
somewhere so another free service that

00:11:12,079 --> 00:11:18,240
github provides is github pages

00:11:14,560 --> 00:11:19,839
so i deploy the presentation that's been

00:11:18,240 --> 00:11:20,959
built as you can see that there's this

00:11:19,839 --> 00:11:24,240
static

00:11:20,959 --> 00:11:25,440
and it's compiling the presentation into

00:11:24,240 --> 00:11:28,079
a folder

00:11:25,440 --> 00:11:29,519
and then i push that folder back onto

00:11:28,079 --> 00:11:33,200
another branch

00:11:29,519 --> 00:11:35,040
called gh pages with the same folder

00:11:33,200 --> 00:11:37,519
so that you this is what you see when

00:11:35,040 --> 00:11:41,440
you visit this website

00:11:37,519 --> 00:11:43,519
in its entirety this is the whole action

00:11:41,440 --> 00:11:45,680
and that's it done and now every time i

00:11:43,519 --> 00:11:48,000
push my changes

00:11:45,680 --> 00:11:50,480
everyone will get to see my latest

00:11:48,000 --> 00:11:50,480
website

00:11:50,560 --> 00:11:57,200
so let's do as much as it is a challenge

00:11:54,079 --> 00:12:00,480
let's do a live demonstration to show

00:11:57,200 --> 00:12:04,160
our favorite python curly boys here

00:12:00,480 --> 00:12:05,839
with github actions so i'm going to come

00:12:04,160 --> 00:12:07,920
over to my repository

00:12:05,839 --> 00:12:09,519
as we can see this is github actions so

00:12:07,920 --> 00:12:14,639
i'm going to zoom in

00:12:09,519 --> 00:12:16,399
a lot so hopefully everyone can see that

00:12:14,639 --> 00:12:18,399
and this is freely open source and you

00:12:16,399 --> 00:12:20,240
can visit github to reach it

00:12:18,399 --> 00:12:22,959
and there's as we could see before this

00:12:20,240 --> 00:12:27,040
is presentation dot markdown file

00:12:22,959 --> 00:12:30,959
and inside that is the presentation

00:12:27,040 --> 00:12:32,880
so i've gone to edit it and i've added

00:12:30,959 --> 00:12:35,120
for show curly boys here i've added

00:12:32,880 --> 00:12:38,480
three snake emojis

00:12:35,120 --> 00:12:40,880
so now we can commit the changes

00:12:38,480 --> 00:12:43,360
and this will fire off any sort of

00:12:40,880 --> 00:12:45,200
action that we have on this repository

00:12:43,360 --> 00:12:46,880
and we can see that by this little

00:12:45,200 --> 00:12:48,959
yellow dot

00:12:46,880 --> 00:12:51,040
and they see that there's two actions

00:12:48,959 --> 00:12:53,279
that are running for this one

00:12:51,040 --> 00:12:56,480
i've pre previous here's one i prepared

00:12:53,279 --> 00:12:57,839
earlier hello pycon 2020

00:12:56,480 --> 00:13:00,399
so let's go and have a look at what

00:12:57,839 --> 00:13:04,000
hello pycon 2020 does

00:13:00,399 --> 00:13:07,600
as you can see it happens on a push its

00:13:04,000 --> 00:13:09,519
job is called curly boys it sets up the

00:13:07,600 --> 00:13:11,600
job and you can come in here and see the

00:13:09,519 --> 00:13:13,760
logs on what's happening

00:13:11,600 --> 00:13:14,959
we have a step called show us the curly

00:13:13,760 --> 00:13:17,040
boys which says

00:13:14,959 --> 00:13:20,240
which just echoes hello pike on a year

00:13:17,040 --> 00:13:21,680
2020 and shows our favorite snake emoji

00:13:20,240 --> 00:13:24,000
and then it wraps everything up and it's

00:13:21,680 --> 00:13:27,279
finished but we can see over here that

00:13:24,000 --> 00:13:31,040
our the circle is still

00:13:27,279 --> 00:13:32,800
yellow and green so if we head back over

00:13:31,040 --> 00:13:34,720
to the actions tab

00:13:32,800 --> 00:13:36,399
we can see that it's still updating the

00:13:34,720 --> 00:13:38,079
presentation

00:13:36,399 --> 00:13:39,519
and this is going through this that

00:13:38,079 --> 00:13:41,920
action yaml that we did

00:13:39,519 --> 00:13:43,839
went through before we can see it's just

00:13:41,920 --> 00:13:46,560
completed which is very nice

00:13:43,839 --> 00:13:47,199
we can see that it's ran the checkout

00:13:46,560 --> 00:13:49,360
action

00:13:47,199 --> 00:13:51,040
which has taken the latest copy and this

00:13:49,360 --> 00:13:52,639
is very similar to git if you've used

00:13:51,040 --> 00:13:54,000
git before

00:13:52,639 --> 00:13:55,839
we've seen the next step which is

00:13:54,000 --> 00:13:57,440
installing the dependencies

00:13:55,839 --> 00:13:59,680
and then running and we can see that it

00:13:57,440 --> 00:14:01,600
successfully wrote our

00:13:59,680 --> 00:14:02,800
presentation to the folder underscore

00:14:01,600 --> 00:14:04,800
site

00:14:02,800 --> 00:14:06,720
and then we can head over to deploy

00:14:04,800 --> 00:14:07,920
where github actions is working its

00:14:06,720 --> 00:14:10,720
magic

00:14:07,920 --> 00:14:13,440
to deploy our site to github pages which

00:14:10,720 --> 00:14:16,320
hosts it on a url

00:14:13,440 --> 00:14:18,079
it takes a little while for the freshly

00:14:16,320 --> 00:14:20,480
updated to go through the parts of the

00:14:18,079 --> 00:14:21,519
internet

00:14:20,480 --> 00:14:24,160
so i'm going to head back to the

00:14:21,519 --> 00:14:24,160
presentation

00:14:24,800 --> 00:14:29,279
and we'll see that in just a minute but

00:14:27,680 --> 00:14:30,800
where's the python you might be asking

00:14:29,279 --> 00:14:32,720
all you've talked about so far is

00:14:30,800 --> 00:14:34,000
javascript packages and you haven't used

00:14:32,720 --> 00:14:37,440
python

00:14:34,000 --> 00:14:37,839
so next up there is python we do a check

00:14:37,440 --> 00:14:40,000
yet

00:14:37,839 --> 00:14:42,560
and then there's a actions that's also

00:14:40,000 --> 00:14:45,440
one of the trusted ones by github

00:14:42,560 --> 00:14:46,959
called up python where we can set up any

00:14:45,440 --> 00:14:48,639
version of python that we like

00:14:46,959 --> 00:14:50,959
and all we have to do is give it the

00:14:48,639 --> 00:14:52,720
configuration using the width tag

00:14:50,959 --> 00:14:54,880
to be whatever version you'd like and

00:14:52,720 --> 00:14:56,240
suddenly you have python available on

00:14:54,880 --> 00:14:58,959
all of them

00:14:56,240 --> 00:15:00,240
um i'm quite certain that python

00:14:58,959 --> 00:15:02,160
actually does come

00:15:00,240 --> 00:15:03,680
installed by default as well but i'm not

00:15:02,160 --> 00:15:06,560
sure on the version

00:15:03,680 --> 00:15:08,240
but pip definitely does so then we can

00:15:06,560 --> 00:15:10,839
install things

00:15:08,240 --> 00:15:12,000
and this is an excerpt out of pandas

00:15:10,839 --> 00:15:14,959
alive

00:15:12,000 --> 00:15:16,480
so we always run pip install upgrade kit

00:15:14,959 --> 00:15:18,160
so we have the latest version of our

00:15:16,480 --> 00:15:20,399
package installer

00:15:18,160 --> 00:15:21,680
we install any requirements for the

00:15:20,399 --> 00:15:24,560
project

00:15:21,680 --> 00:15:26,480
and then the readme for panasolive is in

00:15:24,560 --> 00:15:28,160
a jupiter notebook and we want to

00:15:26,480 --> 00:15:31,040
convert that to markdown so it's

00:15:28,160 --> 00:15:31,040
rendered nicely

00:15:31,839 --> 00:15:36,320
but can you make your own actions you

00:15:34,000 --> 00:15:38,959
definitely can

00:15:36,320 --> 00:15:40,160
how currently github actions are either

00:15:38,959 --> 00:15:43,199
built using docker

00:15:40,160 --> 00:15:45,440
or javascript and there's

00:15:43,199 --> 00:15:46,240
thorough documentation on either on how

00:15:45,440 --> 00:15:49,440
to build those

00:15:46,240 --> 00:15:52,880
yourself so while it still

00:15:49,440 --> 00:15:53,600
spins and waits for the our snakes to

00:15:52,880 --> 00:15:55,839
show

00:15:53,600 --> 00:15:57,199
let's dive into any some projects that i

00:15:55,839 --> 00:16:00,399
maintain

00:15:57,199 --> 00:16:00,399
and we'll head back to

00:16:01,279 --> 00:16:06,000
this one for which we want to see the

00:16:03,120 --> 00:16:06,000
snakes appear on

00:16:06,320 --> 00:16:12,079
we can give it a refresh and they may

00:16:09,680 --> 00:16:12,959
potentially be there hey there we go

00:16:12,079 --> 00:16:15,279
they're there

00:16:12,959 --> 00:16:16,399
our favorite snakes so there we go we

00:16:15,279 --> 00:16:19,440
just made a change

00:16:16,399 --> 00:16:21,360
we pushed it out the snakes appeared

00:16:19,440 --> 00:16:22,480
so now let's have a look at pen is alive

00:16:21,360 --> 00:16:25,279
so pandas alive

00:16:22,480 --> 00:16:29,519
is a package that i created that just

00:16:25,279 --> 00:16:31,360
got over 21 000 downloads of pypo

00:16:29,519 --> 00:16:32,880
it's an animated product extension for

00:16:31,360 --> 00:16:35,519
painters with macbook live

00:16:32,880 --> 00:16:36,000
and it just does df.plot animated and

00:16:35,519 --> 00:16:38,320
you get

00:16:36,000 --> 00:16:42,079
an animated gif of your data out and it

00:16:38,320 --> 00:16:44,160
supports all different types of charts

00:16:42,079 --> 00:16:46,560
actions on this one so if we head into

00:16:44,160 --> 00:16:47,680
that dot github and then dot workflows

00:16:46,560 --> 00:16:51,360
folder

00:16:47,680 --> 00:16:54,000
we can see what's happening inside there

00:16:51,360 --> 00:16:55,519
so the build docs this creates the

00:16:54,000 --> 00:16:58,560
documentation website

00:16:55,519 --> 00:17:01,920
which hosts all the documentation

00:16:58,560 --> 00:17:04,720
for pandas alive interrogate

00:17:01,920 --> 00:17:06,400
make sure that whenever a commit is made

00:17:04,720 --> 00:17:08,880
or a change is made there's still enough

00:17:06,400 --> 00:17:11,600
documentation

00:17:08,880 --> 00:17:12,480
toc creates a table of contents on the

00:17:11,600 --> 00:17:14,880
readme

00:17:12,480 --> 00:17:15,679
and update readme as i said before

00:17:14,880 --> 00:17:18,240
converts

00:17:15,679 --> 00:17:21,600
the readme which is a jupiter notebook

00:17:18,240 --> 00:17:24,559
into markdown to be hosted on github

00:17:21,600 --> 00:17:26,880
and we can see the documentation is also

00:17:24,559 --> 00:17:30,240
hosted on github pages

00:17:26,880 --> 00:17:30,240
and it works beautifully

00:17:30,559 --> 00:17:33,840
another one that i mentioned was the

00:17:32,080 --> 00:17:36,480
awesome python bytes

00:17:33,840 --> 00:17:37,039
uh which is a becoming a very long list

00:17:36,480 --> 00:17:40,000
now

00:17:37,039 --> 00:17:41,440
which even pen is alive got mentioned on

00:17:40,000 --> 00:17:43,360
the last one which i

00:17:41,440 --> 00:17:45,120
believe i saw our extra thousand

00:17:43,360 --> 00:17:46,880
downloads come from that

00:17:45,120 --> 00:17:49,200
and we can see in the workflows here

00:17:46,880 --> 00:17:51,520
that there's the link checker which

00:17:49,200 --> 00:17:54,000
makes sure all external links are valid

00:17:51,520 --> 00:17:55,679
it checks the spelling and it generates

00:17:54,000 --> 00:17:58,720
a table of contents

00:17:55,679 --> 00:17:59,360
and this chat ops allows me for whenever

00:17:58,720 --> 00:18:01,840
someone

00:17:59,360 --> 00:18:02,960
makes a pull request or wants to suggest

00:18:01,840 --> 00:18:04,880
a change

00:18:02,960 --> 00:18:06,960
allows me to comment on that and then it

00:18:04,880 --> 00:18:09,039
will run the link checker the spell

00:18:06,960 --> 00:18:12,320
checker on whatever changes they've made

00:18:09,039 --> 00:18:13,039
and helps me out big time next up we

00:18:12,320 --> 00:18:15,360
have

00:18:13,039 --> 00:18:16,559
so this is an example of a github action

00:18:15,360 --> 00:18:18,799
from the marketplace

00:18:16,559 --> 00:18:21,360
one that i created so this is for pi

00:18:18,799 --> 00:18:24,960
installer for windows i also maintain

00:18:21,360 --> 00:18:25,520
pi installer action linux which you can

00:18:24,960 --> 00:18:27,200
drop

00:18:25,520 --> 00:18:29,600
if you've used pi installer before

00:18:27,200 --> 00:18:31,600
creates a executable that you can run on

00:18:29,600 --> 00:18:34,799
any computer

00:18:31,600 --> 00:18:37,280
for your python software

00:18:34,799 --> 00:18:39,440
so this will happen automatically if you

00:18:37,280 --> 00:18:40,320
on this can trigger be triggered on a

00:18:39,440 --> 00:18:42,320
github action

00:18:40,320 --> 00:18:43,360
which we i've created another reaper

00:18:42,320 --> 00:18:46,160
over here called pi

00:18:43,360 --> 00:18:48,000
installer action windows example which

00:18:46,160 --> 00:18:49,919
you can see that your executable just

00:18:48,000 --> 00:18:51,520
gets uploaded as an artifact that you

00:18:49,919 --> 00:18:53,760
can point users to download

00:18:51,520 --> 00:18:55,600
and this could be all automated with the

00:18:53,760 --> 00:18:56,799
release workflow and more and stuff like

00:18:55,600 --> 00:18:59,280
that

00:18:56,799 --> 00:19:00,320
so if we head into the code section of

00:18:59,280 --> 00:19:02,960
this

00:19:00,320 --> 00:19:04,320
repository we can actually see the

00:19:02,960 --> 00:19:07,120
action

00:19:04,320 --> 00:19:08,000
that uses it and we can see that is very

00:19:07,120 --> 00:19:11,120
thin

00:19:08,000 --> 00:19:14,240
so it just triggers on a push

00:19:11,120 --> 00:19:17,760
and then it checks it out it compiles it

00:19:14,240 --> 00:19:21,520
and it uploads and that's everything

00:19:17,760 --> 00:19:24,640
um and finally for the end of the talk

00:19:21,520 --> 00:19:26,480
i believe

00:19:24,640 --> 00:19:28,400
that's everything um i'm more than happy

00:19:26,480 --> 00:19:30,080
to take questions now and i'll be more

00:19:28,400 --> 00:19:31,120
than happy to sit in the hallway track

00:19:30,080 --> 00:19:32,799
after this

00:19:31,120 --> 00:19:34,720
uh feel free to reach out to me on my

00:19:32,799 --> 00:19:37,520
blog twitter linkedin github

00:19:34,720 --> 00:19:38,160
i'm more than happy to help out wherever

00:19:37,520 --> 00:19:40,559
i can

00:19:38,160 --> 00:19:42,400
and really excited and passionate about

00:19:40,559 --> 00:19:44,160
automating as much as we can to bring

00:19:42,400 --> 00:19:45,679
back give us back more time in our day

00:19:44,160 --> 00:19:48,400
for developers

00:19:45,679 --> 00:19:48,400
thank you very much

00:19:49,039 --> 00:19:52,400
all right thank you so much jack we do

00:19:51,039 --> 00:19:55,520
have one question which

00:19:52,400 --> 00:19:56,240
was uh genevieve had a question about

00:19:55,520 --> 00:19:57,919
avoiding

00:19:56,240 --> 00:19:59,520
junk commits when you're setting up your

00:19:57,919 --> 00:20:01,600
pipelines so

00:19:59,520 --> 00:20:03,280
you keep you keep like having syntax

00:20:01,600 --> 00:20:04,799
errors or problems with your ammo you

00:20:03,280 --> 00:20:06,159
keep going commit does this work now

00:20:04,799 --> 00:20:09,679
commit does this work now

00:20:06,159 --> 00:20:09,679
uh do you have any tips for

00:20:10,720 --> 00:20:14,000
dealing with like fiddling getting the

00:20:12,960 --> 00:20:15,600
pipeline right

00:20:14,000 --> 00:20:17,679
is there a better way than just commit

00:20:15,600 --> 00:20:20,720
try again commit try again

00:20:17,679 --> 00:20:23,520
so this is something that i i face also

00:20:20,720 --> 00:20:24,320
there is a piece of open source software

00:20:23,520 --> 00:20:27,440
called act

00:20:24,320 --> 00:20:31,200
act which works really good on

00:20:27,440 --> 00:20:33,280
mac and linux but not so much windows

00:20:31,200 --> 00:20:36,799
and it lets you run github actions

00:20:33,280 --> 00:20:39,120
locally to see what's going to happen

00:20:36,799 --> 00:20:41,440
i see very promising things in it but

00:20:39,120 --> 00:20:42,960
since i'm mainly a windows developer

00:20:41,440 --> 00:20:46,480
i've had a bit of struggles with it

00:20:42,960 --> 00:20:50,240
myself apart from that i just tend to

00:20:46,480 --> 00:20:51,039
commit and then put them all you can

00:20:50,240 --> 00:20:52,799
make it come

00:20:51,039 --> 00:20:54,640
you can make an action run on a separate

00:20:52,799 --> 00:20:56,320
branch so that all those

00:20:54,640 --> 00:20:58,240
um commits happen there and then you can

00:20:56,320 --> 00:20:59,520
squash them all

00:20:58,240 --> 00:21:01,600
so there's sort of different ways you

00:20:59,520 --> 00:21:03,200
can work around it i suppose

00:21:01,600 --> 00:21:04,799
there were commiserations in the chat

00:21:03,200 --> 00:21:06,240
about that it's kind of a universal

00:21:04,799 --> 00:21:08,799
frustration i think

00:21:06,240 --> 00:21:10,880
um yeah question which is does github

00:21:08,799 --> 00:21:13,840
actions provide an easy way to re-run

00:21:10,880 --> 00:21:15,520
actions um yes like reiki application

00:21:13,840 --> 00:21:18,640
bundling and stuff

00:21:15,520 --> 00:21:19,840
so let's head back to our python

00:21:18,640 --> 00:21:23,200
presentation

00:21:19,840 --> 00:21:24,720
um here's the actions uh we say we

00:21:23,200 --> 00:21:26,799
didn't get to see as much of our

00:21:24,720 --> 00:21:28,480
favorite curly boys

00:21:26,799 --> 00:21:30,000
so we can head into that action this

00:21:28,480 --> 00:21:32,159
lets you filter that action

00:21:30,000 --> 00:21:33,440
for whichever workflow that you've got

00:21:32,159 --> 00:21:36,240
if you've got hundreds

00:21:33,440 --> 00:21:37,760
or just a couple and we can see this

00:21:36,240 --> 00:21:39,360
update presentation happened nine

00:21:37,760 --> 00:21:41,760
minutes ago

00:21:39,360 --> 00:21:42,960
and then there's this rerun jobs over

00:21:41,760 --> 00:21:44,799
here

00:21:42,960 --> 00:21:47,360
we'll let you you can come into the

00:21:44,799 --> 00:21:49,120
separate jobs if you have them

00:21:47,360 --> 00:21:50,880
and let you rerun them if you really

00:21:49,120 --> 00:21:53,360
wanted to see your favorite curly boys

00:21:50,880 --> 00:21:53,360
once again

00:21:54,640 --> 00:21:58,880
awesome i think that's all the questions

00:21:58,320 --> 00:22:01,919
we've

00:21:58,880 --> 00:22:03,760
got yep thank you very much jack um can

00:22:01,919 --> 00:22:05,760
everyone do me the favor of mashing the

00:22:03,760 --> 00:22:06,960
little applause emoji in there so

00:22:05,760 --> 00:22:08,320
i don't know if the emojis are actually

00:22:06,960 --> 00:22:09,679
getting caught on the video stream for

00:22:08,320 --> 00:22:10,559
like when these get published later but

00:22:09,679 --> 00:22:13,760
if they do

00:22:10,559 --> 00:22:16,400
hit that button a bunch um i have one

00:22:13,760 --> 00:22:17,440
announcement before we finish up which

00:22:16,400 --> 00:22:20,320
is

00:22:17,440 --> 00:22:21,520
lightning talk submissions are happening

00:22:20,320 --> 00:22:23,200
now but only

00:22:21,520 --> 00:22:25,600
for another half an hour lightning talk

00:22:23,200 --> 00:22:27,520
submissions will close in half an hour

00:22:25,600 --> 00:22:29,600
if you've never given a lightning talk

00:22:27,520 --> 00:22:30,960
at pycon au

00:22:29,600 --> 00:22:32,640
tomorrow would be an awesome time to do

00:22:30,960 --> 00:22:35,520
it it is a hell of a lot of fun

00:22:32,640 --> 00:22:37,200
um so if you have something that you are

00:22:35,520 --> 00:22:39,280
excited enough about

00:22:37,200 --> 00:22:40,720
that you can share that excitement for

00:22:39,280 --> 00:22:41,440
five minutes which is not very long it's

00:22:40,720 --> 00:22:43,600
sort of like

00:22:41,440 --> 00:22:44,880
hey have you seen this project it's cool

00:22:43,600 --> 00:22:47,600
here's why i think it's cool

00:22:44,880 --> 00:22:48,799
um do it you've got 30 minutes left to

00:22:47,600 --> 00:22:51,120
submit your talks

00:22:48,799 --> 00:22:52,400
um which brings us halfway through lunch

00:22:51,120 --> 00:22:55,120
hour because we are now

00:22:52,400 --> 00:22:55,520
breaking for lunch i will see everyone

00:22:55,120 --> 00:22:57,440
back

00:22:55,520 --> 00:23:04,720
in here in the flip flop radar

00:22:57,440 --> 00:23:04,720

YouTube URL: https://www.youtube.com/watch?v=7aBjzZkaGhU


