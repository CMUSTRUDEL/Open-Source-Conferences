Title: "On a shoe-string and a t2.small: scaling on a [zero] budget." - Tom Eastman (PyConline AU 2020)
Publication date: 2020-09-08
Playlist: PyConline AU 2020
Description: 
	Tom Eastman

https://2020.pycon.org.au/program/CNNG8R

When you work for a company, you probably have a decent-sized infrastructure budget. And when you're building a Django project, you have a lot of scope for scaling it up: Add more gunicorn workers! Split the async task workers into their own servers! Quadruple the RAM of the database instance! Beef up your Elasticache!

Okay, but what if you can't just throw your employers' money at it? What if, to keep your side project affordable, you bought a reserved instance for it just a week before it started to go viral? What if the number of users starts going up 50% per week and... doesn't... stop...

You're gonna have to get clever.

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

Python, PyCon, PyConAU, PyConline

Fri Sep  4 14:30:00 2020 at Obvious
Captions: 
	00:00:00,320 --> 00:00:04,640
welcome back from your lovely break up

00:00:02,399 --> 00:00:07,040
next we have tom talking about scaling a

00:00:04,640 --> 00:00:09,200
service on a shoestring budget

00:00:07,040 --> 00:00:11,360
tom is a developer systems architect

00:00:09,200 --> 00:00:13,120
devops and security consultant based

00:00:11,360 --> 00:00:14,799
here in wellington new zealand

00:00:13,120 --> 00:00:16,480
i say here because i'm in wellington as

00:00:14,799 --> 00:00:18,480
well so it checks out

00:00:16,480 --> 00:00:19,520
uh his passion is building and helping

00:00:18,480 --> 00:00:22,960
developers to build

00:00:19,520 --> 00:00:25,359
solid robust and maintainable systems

00:00:22,960 --> 00:00:26,000
and i love this part tom writes words

00:00:25,359 --> 00:00:28,400
that control

00:00:26,000 --> 00:00:29,599
computers to tell other computers to

00:00:28,400 --> 00:00:31,840
build fake

00:00:29,599 --> 00:00:33,920
computers that run on different

00:00:31,840 --> 00:00:37,120
computers

00:00:33,920 --> 00:00:37,520
uh and like this is um tom spoke about

00:00:37,120 --> 00:00:40,399
this

00:00:37,520 --> 00:00:41,120
project at pyconteu 2019 so after his

00:00:40,399 --> 00:00:42,719
talk

00:00:41,120 --> 00:00:44,239
this evening you should go check that

00:00:42,719 --> 00:00:46,160
out and i'm really interested to hear

00:00:44,239 --> 00:00:47,600
more about the details about how

00:00:46,160 --> 00:00:49,520
this project is scaled and kind of how

00:00:47,600 --> 00:00:51,360
it's gone over the last year

00:00:49,520 --> 00:00:53,360
uh tom will be taking questions if we

00:00:51,360 --> 00:00:55,760
have time at the end so please feel

00:00:53,360 --> 00:00:56,879
please feel free to drop them in chat

00:00:55,760 --> 00:00:59,039
i'll be collecting them

00:00:56,879 --> 00:01:02,320
and we'll try to get to them and with

00:00:59,039 --> 00:01:02,320
that take it away tom

00:01:03,039 --> 00:01:07,040
cool thank you so much lauren um it is a

00:01:05,600 --> 00:01:08,640
pleasure and a privilege to be here

00:01:07,040 --> 00:01:11,520
today uh as she said i

00:01:08,640 --> 00:01:13,439
am broadcasting live from wellington i

00:01:11,520 --> 00:01:14,159
was not organized enough to pre-record a

00:01:13,439 --> 00:01:15,759
talk

00:01:14,159 --> 00:01:18,159
um so for those of you who don't know me

00:01:15,759 --> 00:01:20,640
i'm tom i'm a python developer

00:01:18,159 --> 00:01:23,040
systems geek i guess and an occasional

00:01:20,640 --> 00:01:24,560
speaker at pycon au

00:01:23,040 --> 00:01:26,159
i've worn a couple different hats in my

00:01:24,560 --> 00:01:28,000
day jobs but nowadays

00:01:26,159 --> 00:01:29,600
i'm a back end developer and technical

00:01:28,000 --> 00:01:31,520
lead for sharesies

00:01:29,600 --> 00:01:32,960
an online investment platform founded in

00:01:31,520 --> 00:01:34,479
wellington by friends of mine and

00:01:32,960 --> 00:01:35,840
growing really fast

00:01:34,479 --> 00:01:38,079
i've been there since christmas and it's

00:01:35,840 --> 00:01:39,520
been a lot of fun

00:01:38,079 --> 00:01:41,600
a bunch of my colleagues are attending

00:01:39,520 --> 00:01:43,200
the conference for for the first time

00:01:41,600 --> 00:01:44,880
so uh say hi to them if they're in the

00:01:43,200 --> 00:01:46,240
chat they're all super cool people

00:01:44,880 --> 00:01:48,159
and i'm really happy that i get to like

00:01:46,240 --> 00:01:51,520
introduce all of you to them

00:01:48,159 --> 00:01:54,000
um shares these on a technical level is

00:01:51,520 --> 00:01:54,640
a bit a honking big web app built out of

00:01:54,000 --> 00:01:57,840
python

00:01:54,640 --> 00:02:00,320
and flask and react and c-sharp and

00:01:57,840 --> 00:02:01,600
it runs on a pretty hefty aws setup with

00:02:00,320 --> 00:02:03,520
a lot of resources right

00:02:01,600 --> 00:02:04,960
you throw a lot of money at aws

00:02:03,520 --> 00:02:07,360
sometimes

00:02:04,960 --> 00:02:09,840
today i'm talking about the other end of

00:02:07,360 --> 00:02:09,840
the spectrum

00:02:11,280 --> 00:02:14,640
okay so this is secator it's a side

00:02:13,360 --> 00:02:16,480
project of mine that i've been working

00:02:14,640 --> 00:02:19,599
on for a little over a year

00:02:16,480 --> 00:02:21,440
now properly um it's a site that helps

00:02:19,599 --> 00:02:23,920
protect users from

00:02:21,440 --> 00:02:25,040
online harassment and dog piling on

00:02:23,920 --> 00:02:27,040
twitter

00:02:25,040 --> 00:02:28,800
if someone is using their followers to

00:02:27,040 --> 00:02:31,840
harass you on twitter you can use

00:02:28,800 --> 00:02:33,280
secateur to block that person and all of

00:02:31,840 --> 00:02:35,840
their followers

00:02:33,280 --> 00:02:36,879
for a set period of time if you want to

00:02:35,840 --> 00:02:38,480
learn more about

00:02:36,879 --> 00:02:40,720
why i built it check out my talk from

00:02:38,480 --> 00:02:41,840
pycone au last year i go into detail on

00:02:40,720 --> 00:02:43,440
the idea behind it

00:02:41,840 --> 00:02:46,319
and on the security considerations that

00:02:43,440 --> 00:02:47,680
went into building a tool like this

00:02:46,319 --> 00:02:50,160
today what i'm going to be telling you

00:02:47,680 --> 00:02:52,879
about is what's been happening since

00:02:50,160 --> 00:02:55,280
that talk basically

00:02:52,879 --> 00:02:56,560
okay so i reset the database when i sort

00:02:55,280 --> 00:02:58,959
of launched it

00:02:56,560 --> 00:03:00,640
shortly before python au last year and

00:02:58,959 --> 00:03:03,680
the graph that we're looking at now

00:03:00,640 --> 00:03:04,640
is a user sign up since i launched the

00:03:03,680 --> 00:03:06,400
site

00:03:04,640 --> 00:03:08,000
it was used by just sort of a handful

00:03:06,400 --> 00:03:08,879
friends of mine until i gave my talk at

00:03:08,000 --> 00:03:10,319
piconeu

00:03:08,879 --> 00:03:11,840
and that's the start of this line

00:03:10,319 --> 00:03:13,360
because i also reset the database i

00:03:11,840 --> 00:03:14,239
don't know if my mouse pointer is going

00:03:13,360 --> 00:03:15,920
to oh i can

00:03:14,239 --> 00:03:17,360
yet my mouse pointer is there after

00:03:15,920 --> 00:03:19,120
python au this little

00:03:17,360 --> 00:03:20,400
this little jump happened and then it

00:03:19,120 --> 00:03:22,640
just stayed flat for months

00:03:20,400 --> 00:03:23,840
right um second tour was sort of

00:03:22,640 --> 00:03:25,519
invitation only

00:03:23,840 --> 00:03:27,360
you could sign up but you had to get in

00:03:25,519 --> 00:03:29,040
touch with me before i activated your

00:03:27,360 --> 00:03:31,280
account that was

00:03:29,040 --> 00:03:32,799
my only real protection against it

00:03:31,280 --> 00:03:35,120
overloading at the time

00:03:32,799 --> 00:03:36,720
in february of this year i removed that

00:03:35,120 --> 00:03:38,239
requirement and let people sign up and

00:03:36,720 --> 00:03:38,959
start using the site without asking me

00:03:38,239 --> 00:03:40,799
permission

00:03:38,959 --> 00:03:42,640
that led to this sort of spike here and

00:03:40,799 --> 00:03:45,920
i grew to about 60

00:03:42,640 --> 00:03:47,120
users still mainly people who knew me

00:03:45,920 --> 00:03:49,840
personally though

00:03:47,120 --> 00:03:50,159
um in may the new zealand python user

00:03:49,840 --> 00:03:52,239
group

00:03:50,159 --> 00:03:53,840
very kindly sponsored the server that

00:03:52,239 --> 00:03:56,720
i'm running secateur on

00:03:53,840 --> 00:03:57,439
um they asked me what i wanted for help

00:03:56,720 --> 00:03:59,280
and

00:03:57,439 --> 00:04:01,120
i decided to because i was trying to

00:03:59,280 --> 00:04:03,599
keep costs down get a reserved instance

00:04:01,120 --> 00:04:05,360
so i bought a reserved instance on a t3

00:04:03,599 --> 00:04:09,040
small i lied in my talk title

00:04:05,360 --> 00:04:09,920
um a t3 small figuring that that would

00:04:09,040 --> 00:04:12,720
be fine

00:04:09,920 --> 00:04:14,159
for my purposes anyway almost

00:04:12,720 --> 00:04:16,160
immediately after i purchased

00:04:14,159 --> 00:04:18,320
a fixed set of resources on which i'd be

00:04:16,160 --> 00:04:21,440
relying to keep the site running

00:04:18,320 --> 00:04:25,199
this happened that

00:04:21,440 --> 00:04:27,440
it changed direction a little bit it

00:04:25,199 --> 00:04:29,520
okay people found the site and they

00:04:27,440 --> 00:04:31,280
started using it lots

00:04:29,520 --> 00:04:32,960
and this was during lockdown and i

00:04:31,280 --> 00:04:34,320
suddenly discover that i have this new

00:04:32,960 --> 00:04:35,840
routine which is

00:04:34,320 --> 00:04:37,600
every couple days i wake up with

00:04:35,840 --> 00:04:40,240
messages from strangers saying

00:04:37,600 --> 00:04:40,800
hey is the site down and i note that in

00:04:40,240 --> 00:04:43,199
fact

00:04:40,800 --> 00:04:44,800
yeah the site is not just down but it's

00:04:43,199 --> 00:04:47,040
a smoking crater

00:04:44,800 --> 00:04:49,360
after a hundred new people tried to use

00:04:47,040 --> 00:04:51,759
it to block the entire internet

00:04:49,360 --> 00:04:51,759
each

00:04:53,360 --> 00:04:57,280
and so this is secateur it's my little

00:04:55,520 --> 00:04:59,919
web app sitting on its tiny little

00:04:57,280 --> 00:05:02,560
reserved t3 small in amazon sydney

00:04:59,919 --> 00:05:04,560
it beavers away all day blocking and

00:05:02,560 --> 00:05:06,080
unblocking twitter users on behalf of

00:05:04,560 --> 00:05:08,639
other twitter users

00:05:06,080 --> 00:05:11,199
at a rate of anywhere between 250 000

00:05:08,639 --> 00:05:13,680
per day to 2 million per day

00:05:11,199 --> 00:05:14,479
and every once in a while it explodes

00:05:13,680 --> 00:05:16,800
and dies

00:05:14,479 --> 00:05:18,479
and i coax it back to life and try to

00:05:16,800 --> 00:05:19,520
stop it from blowing up the same way

00:05:18,479 --> 00:05:25,840
next time

00:05:19,520 --> 00:05:25,840
so welcome to my devops

00:05:28,560 --> 00:05:31,600
so for the rest of my talk i'm going to

00:05:30,160 --> 00:05:32,880
tell you about the stuff that i found

00:05:31,600 --> 00:05:33,919
really interesting while trying to keep

00:05:32,880 --> 00:05:36,720
the sap running

00:05:33,919 --> 00:05:37,360
on a fixed set of assets as use kind of

00:05:36,720 --> 00:05:40,479
grew

00:05:37,360 --> 00:05:41,360
exponentially and what i'm going to talk

00:05:40,479 --> 00:05:43,039
about today is

00:05:41,360 --> 00:05:45,919
going to fall into broadly three

00:05:43,039 --> 00:05:47,039
categories i'm going to talk about

00:05:45,919 --> 00:05:49,520
stuff that i thought was interesting

00:05:47,039 --> 00:05:50,479
about postgres stuff that i thought that

00:05:49,520 --> 00:05:53,280
was interesting about

00:05:50,479 --> 00:05:54,560
celery and asynchronous task management

00:05:53,280 --> 00:05:57,120
and stuff that i thought was interesting

00:05:54,560 --> 00:05:58,880
about user constraints and safeguards

00:05:57,120 --> 00:06:01,759
so if you're not really interested in

00:05:58,880 --> 00:06:03,199
django or celery or postgres or redis

00:06:01,759 --> 00:06:04,639
then there might not be a lot of

00:06:03,199 --> 00:06:06,080
take-home messages for you but i'd love

00:06:04,639 --> 00:06:07,919
for you to stick around anyway and i'm

00:06:06,080 --> 00:06:10,080
more than happy to take questions

00:06:07,919 --> 00:06:11,120
not now i won't see them but they will

00:06:10,080 --> 00:06:13,120
be collated and

00:06:11,120 --> 00:06:16,479
either after the talk or in the hallway

00:06:13,120 --> 00:06:20,080
track or all weekend come and reach me

00:06:16,479 --> 00:06:23,600
okay so some technical details what is

00:06:20,080 --> 00:06:24,240
what actually is secutor i draw you a

00:06:23,600 --> 00:06:27,120
diagram

00:06:24,240 --> 00:06:28,720
except a i cannot draw and b i don't

00:06:27,120 --> 00:06:31,280
think in diagrams anymore

00:06:28,720 --> 00:06:34,800
god help me i think in yaml i have spent

00:06:31,280 --> 00:06:36,639
too long as a senior yaml engineer

00:06:34,800 --> 00:06:39,199
so what you're looking at is an abridged

00:06:36,639 --> 00:06:42,080
docker compose file

00:06:39,199 --> 00:06:42,720
the app itself the first of those five

00:06:42,080 --> 00:06:45,759
containers

00:06:42,720 --> 00:06:48,240
is just the green unicorn http

00:06:45,759 --> 00:06:50,560
django app it does basically nothing

00:06:48,240 --> 00:06:53,280
it's just a couple html views

00:06:50,560 --> 00:06:55,280
all the interesting work happens in the

00:06:53,280 --> 00:06:57,440
two celery worker containers

00:06:55,280 --> 00:06:58,800
that's where pretty much all of the all

00:06:57,440 --> 00:06:59,599
of the interesting stuff is happening in

00:06:58,800 --> 00:07:01,840
this app

00:06:59,599 --> 00:07:03,120
postgres and redis are postgres and

00:07:01,840 --> 00:07:04,400
redis if you're here you probably

00:07:03,120 --> 00:07:07,120
already know what they are

00:07:04,400 --> 00:07:08,639
um outside of this docker compose file

00:07:07,120 --> 00:07:10,400
there's an ssl terminating

00:07:08,639 --> 00:07:12,319
nginx server proxy into the app

00:07:10,400 --> 00:07:14,479
container and that's the whole thing

00:07:12,319 --> 00:07:16,160
it's just running on that's on that

00:07:14,479 --> 00:07:20,560
instant amazon no rds

00:07:16,160 --> 00:07:20,560
no elastic cash no lambdas for workers

00:07:20,800 --> 00:07:27,280
okay so what segator actually

00:07:24,080 --> 00:07:28,800
does is when someone is

00:07:27,280 --> 00:07:30,880
blocking all the followers of someone

00:07:28,800 --> 00:07:33,520
who's harassing them on twitter it makes

00:07:30,880 --> 00:07:35,360
a salary task that retrieves a page of

00:07:33,520 --> 00:07:37,039
that account's followers each page is

00:07:35,360 --> 00:07:40,080
five thousand accounts

00:07:37,039 --> 00:07:41,680
it spawns five thousand salary tasks one

00:07:40,080 --> 00:07:45,919
for each account to block so

00:07:41,680 --> 00:07:47,759
each salary task handles one api call to

00:07:45,919 --> 00:07:50,160
twitter

00:07:47,759 --> 00:07:54,160
and it recursively spawns a task that

00:07:50,160 --> 00:07:54,160
repeats the process with the next page

00:07:54,479 --> 00:07:58,240
continue until complete so you've got a

00:07:56,639 --> 00:08:00,800
loop of a task

00:07:58,240 --> 00:08:02,000
that does the thing generates 5000 tasks

00:08:00,800 --> 00:08:03,840
and generates the next

00:08:02,000 --> 00:08:06,240
next task that will generate 5000 more

00:08:03,840 --> 00:08:06,240
tasks

00:08:06,560 --> 00:08:11,199
when i hit a twitter rate limit all of

00:08:09,199 --> 00:08:13,120
those tasks automatically reschedule

00:08:11,199 --> 00:08:14,639
themselves according to an exponentially

00:08:13,120 --> 00:08:16,960
weighted back off

00:08:14,639 --> 00:08:17,759
um they all sort of go back onto the

00:08:16,960 --> 00:08:19,919
queue

00:08:17,759 --> 00:08:22,000
and that way all of the tasks kind of

00:08:19,919 --> 00:08:24,319
get fanned out over time and they don't

00:08:22,000 --> 00:08:27,520
fall afoul of twitter rate limits

00:08:24,319 --> 00:08:28,720
cool that is the core loop um that's

00:08:27,520 --> 00:08:30,479
where all the work is happening there's

00:08:28,720 --> 00:08:32,640
other stuff that secateur does it also

00:08:30,479 --> 00:08:35,680
unbox people after months or whatever

00:08:32,640 --> 00:08:39,519
but this is where all of the interesting

00:08:35,680 --> 00:08:43,440
load comes from okay

00:08:39,519 --> 00:08:43,440
so what causes it to explode and die

00:08:43,519 --> 00:08:46,640
and actually there's really just one

00:08:45,279 --> 00:08:49,839
thing that kills it

00:08:46,640 --> 00:08:52,880
and the thing that kills secateur is

00:08:49,839 --> 00:08:55,839
amazon ebs disc iops burst balance

00:08:52,880 --> 00:08:55,839
exhaustion

00:08:56,080 --> 00:09:00,399
let's try that again faster amazon ebs

00:08:58,480 --> 00:09:02,640
disk iops first balance exhaustion cool

00:09:00,399 --> 00:09:02,640
okay

00:09:03,440 --> 00:09:07,920
a disk in amazon an ebs disk in amazon

00:09:06,399 --> 00:09:09,600
is allowed to do a certain number of

00:09:07,920 --> 00:09:10,560
reads and writes per second it doesn't

00:09:09,600 --> 00:09:12,720
actually matter

00:09:10,560 --> 00:09:14,160
how big those reads and writes are it's

00:09:12,720 --> 00:09:14,640
the number of them per second that you

00:09:14,160 --> 00:09:16,720
do

00:09:14,640 --> 00:09:18,480
and if you do more than that you eat

00:09:16,720 --> 00:09:20,959
into your burst balance

00:09:18,480 --> 00:09:23,120
and if your burst balance drops to zero

00:09:20,959 --> 00:09:23,760
your i o operations per second get

00:09:23,120 --> 00:09:25,839
throttled

00:09:23,760 --> 00:09:27,040
your disk slows to a crawl everything

00:09:25,839 --> 00:09:28,959
jams up

00:09:27,040 --> 00:09:30,880
usually your system is so slow at this

00:09:28,959 --> 00:09:31,440
point that you can't even ssh in to stop

00:09:30,880 --> 00:09:32,560
it

00:09:31,440 --> 00:09:34,080
sometimes you just have to turn the

00:09:32,560 --> 00:09:35,279
instance off and turn it back on for it

00:09:34,080 --> 00:09:38,000
to come back online

00:09:35,279 --> 00:09:39,680
so this middle line on this graph that's

00:09:38,000 --> 00:09:41,360
my iops burst balance you can see a

00:09:39,680 --> 00:09:42,320
scheduled task that is occasionally

00:09:41,360 --> 00:09:45,360
expensive

00:09:42,320 --> 00:09:46,160
and then you can see boom once this line

00:09:45,360 --> 00:09:49,200
touches zero

00:09:46,160 --> 00:09:50,560
it's over it's over it slows the disc

00:09:49,200 --> 00:09:52,080
down you can see that there was a bunch

00:09:50,560 --> 00:09:55,440
of disk i o here

00:09:52,080 --> 00:09:57,040
and then the throttle of speed with

00:09:55,440 --> 00:09:58,800
the load of this is probably all

00:09:57,040 --> 00:10:02,240
database stuff

00:09:58,800 --> 00:10:02,640
is so high that ssh doesn't even work to

00:10:02,240 --> 00:10:05,839
go in

00:10:02,640 --> 00:10:05,839
that's that's the end of it

00:10:11,519 --> 00:10:18,320
okay so what causes the system to have

00:10:14,800 --> 00:10:21,600
lots of small disk operations

00:10:18,320 --> 00:10:23,120
a couple things but actually when it

00:10:21,600 --> 00:10:26,000
comes right down to it

00:10:23,120 --> 00:10:26,000
just two things

00:10:26,240 --> 00:10:32,959
too many disk rights by postgres and

00:10:29,519 --> 00:10:35,600
memory swapping to disk as ram fills up

00:10:32,959 --> 00:10:37,600
those are the two things that cause a

00:10:35,600 --> 00:10:40,480
huge explosion of disk rights

00:10:37,600 --> 00:10:40,480
and it falls over

00:10:42,959 --> 00:10:49,440
okay so i'm going to talk about postgres

00:10:46,800 --> 00:10:50,480
a good database and postgres is a very

00:10:49,440 --> 00:10:52,800
good database

00:10:50,480 --> 00:10:53,839
provides certain guarantees with regard

00:10:52,800 --> 00:10:56,399
to your data

00:10:53,839 --> 00:10:58,240
for example when you commit a database

00:10:56,399 --> 00:10:59,440
transaction that commit is absolutely

00:10:58,240 --> 00:11:01,120
guaranteed

00:10:59,440 --> 00:11:04,560
to be flushed to disk when the commit is

00:11:01,120 --> 00:11:06,399
done in secateur

00:11:04,560 --> 00:11:07,839
every asynchronous task all of those

00:11:06,399 --> 00:11:09,839
thousands of salary tasks

00:11:07,839 --> 00:11:11,440
run in their own transaction and there

00:11:09,839 --> 00:11:12,880
are thousands of them

00:11:11,440 --> 00:11:15,680
tens of thousands of them every

00:11:12,880 --> 00:11:17,040
transaction forces postgres to force the

00:11:15,680 --> 00:11:19,440
disk to flash

00:11:17,040 --> 00:11:20,480
too many disk rights too fast the disk

00:11:19,440 --> 00:11:24,959
gets throttled

00:11:20,480 --> 00:11:24,959
boom it explodes you have to rip it

00:11:26,399 --> 00:11:31,040
so on my tiny little instance i have to

00:11:29,040 --> 00:11:31,440
tell postgres that i do not want it to

00:11:31,040 --> 00:11:33,200
write

00:11:31,440 --> 00:11:34,880
disk on every single commit that i want

00:11:33,200 --> 00:11:36,640
it to break its own rules

00:11:34,880 --> 00:11:38,160
i want it to be more chill about disk

00:11:36,640 --> 00:11:41,839
rights i i

00:11:38,160 --> 00:11:43,519
i don't need acid compliance necessarily

00:11:41,839 --> 00:11:45,519
postgres has a lot of parameters that

00:11:43,519 --> 00:11:46,560
let you tune disk rights

00:11:45,519 --> 00:11:48,399
and they're all actually pretty

00:11:46,560 --> 00:11:49,680
dangerous there's a bunch of them that

00:11:48,399 --> 00:11:52,000
you basically just

00:11:49,680 --> 00:11:53,200
should never use partly because they're

00:11:52,000 --> 00:11:56,240
dangerous yes but

00:11:53,200 --> 00:11:58,320
also because more recent versions have

00:11:56,240 --> 00:12:00,959
better ways of achieving what you want

00:11:58,320 --> 00:12:02,800
so let's start with the correct way of

00:12:00,959 --> 00:12:04,240
doing this first so that the primacy

00:12:02,800 --> 00:12:07,440
effect means that it's the one that's

00:12:04,240 --> 00:12:07,440
most likely to stick in your brain

00:12:07,600 --> 00:12:10,720
what you want to do is look at the

00:12:09,200 --> 00:12:12,959
synchronous commit

00:12:10,720 --> 00:12:15,600
option in postgres and it's related

00:12:12,959 --> 00:12:15,600
parameters

00:12:16,000 --> 00:12:19,440
what you're basically telling postgres

00:12:18,800 --> 00:12:22,560
if you turn

00:12:19,440 --> 00:12:23,760
synchronous commit off and then set this

00:12:22,560 --> 00:12:26,240
setting here the

00:12:23,760 --> 00:12:27,360
wall writer delay what to do if i can

00:12:26,240 --> 00:12:30,480
highlight those

00:12:27,360 --> 00:12:31,519
um to something like 200 milliseconds

00:12:30,480 --> 00:12:33,120
for example

00:12:31,519 --> 00:12:35,360
you're making the call of saying to

00:12:33,120 --> 00:12:37,200
postgres hey i know i've committed this

00:12:35,360 --> 00:12:39,040
database transaction but to be totally

00:12:37,200 --> 00:12:40,880
honest with you if the server crashes

00:12:39,040 --> 00:12:43,200
i won't be too sad if i lose the most

00:12:40,880 --> 00:12:45,440
recent transactions

00:12:43,200 --> 00:12:47,440
the advantage of this setting is that

00:12:45,440 --> 00:12:49,600
your database is still guaranteed to

00:12:47,440 --> 00:12:52,160
recover to a consistent state

00:12:49,600 --> 00:12:54,720
in the event of a crash but you're

00:12:52,160 --> 00:12:56,720
saying that you might

00:12:54,720 --> 00:12:58,079
you can afford to lose the most recent

00:12:56,720 --> 00:12:59,760
transactions

00:12:58,079 --> 00:13:01,040
it's not necessarily 200 milliseconds

00:12:59,760 --> 00:13:02,320
either as those document as that

00:13:01,040 --> 00:13:05,040
documentation says you could

00:13:02,320 --> 00:13:07,200
you could end up losing some number of

00:13:05,040 --> 00:13:07,760
transactions up to like three times that

00:13:07,200 --> 00:13:12,480
delay

00:13:07,760 --> 00:13:16,800
but it'll still recover

00:13:12,480 --> 00:13:19,200
back and in in my case when operations

00:13:16,800 --> 00:13:21,200
operations in sector are generally item

00:13:19,200 --> 00:13:22,639
potent so if i fail to record that i

00:13:21,200 --> 00:13:24,399
blocked someone

00:13:22,639 --> 00:13:25,760
and then the app just blocks them again

00:13:24,399 --> 00:13:27,680
it's not actually that big a deal

00:13:25,760 --> 00:13:29,600
the design of my app is such that it's

00:13:27,680 --> 00:13:31,360
no big loss if i lose

00:13:29,600 --> 00:13:32,720
if i lose the most recent transactions

00:13:31,360 --> 00:13:36,160
in the event of a hard crash

00:13:32,720 --> 00:13:36,160
that's a trade-off that i can make

00:13:36,800 --> 00:13:40,079
don't use these options they have much

00:13:39,040 --> 00:13:42,720
more risky

00:13:40,079 --> 00:13:44,079
issues associated with them the other

00:13:42,720 --> 00:13:44,560
really cool thing about asynchronous

00:13:44,079 --> 00:13:46,720
commit

00:13:44,560 --> 00:13:48,320
is that you can set it per transaction

00:13:46,720 --> 00:13:52,320
or per session

00:13:48,320 --> 00:13:54,160
so in your non-side project if you have

00:13:52,320 --> 00:13:55,839
a database where some transactions are a

00:13:54,160 --> 00:13:57,680
lot less important than others

00:13:55,839 --> 00:13:59,360
you can potentially be a bit more

00:13:57,680 --> 00:14:00,639
relaxed about some transactions than

00:13:59,360 --> 00:14:02,160
others you can say oh no

00:14:00,639 --> 00:14:03,519
this is a maintenance job it doesn't

00:14:02,160 --> 00:14:05,600
really matter if it doesn't have to

00:14:03,519 --> 00:14:08,880
commit immediately at 500 milliseconds

00:14:05,600 --> 00:14:08,880
or 200 milliseconds or whatever

00:14:09,839 --> 00:14:12,570
so that can be really handy in your

00:14:11,360 --> 00:14:14,839
actual day job

00:14:12,570 --> 00:14:17,519
[Music]

00:14:14,839 --> 00:14:20,399
projects

00:14:17,519 --> 00:14:21,360
but don't take my word for it read the

00:14:20,399 --> 00:14:24,240
documentation

00:14:21,360 --> 00:14:26,000
be careful if i've got this wrong and if

00:14:24,240 --> 00:14:28,320
i'm misunderstanding how this works

00:14:26,000 --> 00:14:29,760
i won't know until i have an incident

00:14:28,320 --> 00:14:32,880
where i lose all my data

00:14:29,760 --> 00:14:34,480
and then if you've followed my advice i

00:14:32,880 --> 00:14:37,040
probably won't warn you because i'll be

00:14:34,480 --> 00:14:37,040
embittered

00:14:39,760 --> 00:14:42,959
i have a few other bits of postgres

00:14:41,839 --> 00:14:44,800
advice for you

00:14:42,959 --> 00:14:46,560
one of them is to be very aware of what

00:14:44,800 --> 00:14:49,279
indexes you have and which ones you

00:14:46,560 --> 00:14:50,880
actually use second tours database is

00:14:49,279 --> 00:14:54,240
now large enough that i can't

00:14:50,880 --> 00:14:55,680
simply afford for customers to be able

00:14:54,240 --> 00:14:56,240
to do things that require full table

00:14:55,680 --> 00:14:57,920
scans

00:14:56,240 --> 00:15:00,320
a full table scan would just eat up that

00:14:57,920 --> 00:15:01,519
disk balance so having the right indexes

00:15:00,320 --> 00:15:04,560
for the queries that run

00:15:01,519 --> 00:15:06,160
is crucial but also every index means

00:15:04,560 --> 00:15:07,839
that there's more disk rights that

00:15:06,160 --> 00:15:08,959
happen on insert and quite often we

00:15:07,839 --> 00:15:10,480
don't really think about that we don't

00:15:08,959 --> 00:15:12,079
have to worry about it too much but

00:15:10,480 --> 00:15:13,680
when you're resource constrained like i

00:15:12,079 --> 00:15:16,800
am those rights could

00:15:13,680 --> 00:15:18,800
actually make a difference um in my

00:15:16,800 --> 00:15:21,199
situation it can be a trap

00:15:18,800 --> 00:15:23,120
django creates indexes that you

00:15:21,199 --> 00:15:25,040
sometimes don't expect and didn't ask

00:15:23,120 --> 00:15:28,000
for and they will slow down the rights

00:15:25,040 --> 00:15:29,920
so if you're creating a foreign key in

00:15:28,000 --> 00:15:31,759
django in your database models

00:15:29,920 --> 00:15:33,279
django always puts an index on that

00:15:31,759 --> 00:15:35,360
column that'll that's

00:15:33,279 --> 00:15:37,040
they do that so that reverse lookups are

00:15:35,360 --> 00:15:38,480
always fast in django but for foreign

00:15:37,040 --> 00:15:38,959
keys where you know you don't care about

00:15:38,480 --> 00:15:41,519
that

00:15:38,959 --> 00:15:42,800
be sure to turn those off it's overhead

00:15:41,519 --> 00:15:45,519
that you're that you're not using you

00:15:42,800 --> 00:15:48,480
might not even realize it's there

00:15:45,519 --> 00:15:49,519
my last postgres tip for today is if

00:15:48,480 --> 00:15:51,199
you're going to have millions and

00:15:49,519 --> 00:15:52,959
millions of rows in a table

00:15:51,199 --> 00:15:54,480
then don't have a jason b column in

00:15:52,959 --> 00:15:56,480
there

00:15:54,480 --> 00:15:58,079
jason b is super useful it's a really

00:15:56,480 --> 00:15:58,639
cool postgres feature but you know

00:15:58,079 --> 00:16:01,199
what's

00:15:58,639 --> 00:16:03,519
a huge amount faster and more disk

00:16:01,199 --> 00:16:08,000
efficient than a json b column

00:16:03,519 --> 00:16:09,920
a column

00:16:08,000 --> 00:16:12,480
okay so i'm going to talk about celery

00:16:09,920 --> 00:16:12,480
for a little bit

00:16:12,959 --> 00:16:17,519
celery has not been the cause of all my

00:16:15,120 --> 00:16:17,519
problems

00:16:18,079 --> 00:16:22,480
but all of my problems happen in celery

00:16:20,880 --> 00:16:23,759
because that's where all the work is

00:16:22,480 --> 00:16:26,079
getting done in the app

00:16:23,759 --> 00:16:28,240
i'm creating thousands of tasks and

00:16:26,079 --> 00:16:31,839
tasks that create thousands of tasks

00:16:28,240 --> 00:16:33,759
so it adds up fast i also depend a lot

00:16:31,839 --> 00:16:35,519
on celery's delayed

00:16:33,759 --> 00:16:37,920
task mechanism for scheduling future

00:16:35,519 --> 00:16:41,440
tasks that whole exponential back off

00:16:37,920 --> 00:16:41,440
in the rate limit thing that i mentioned

00:16:43,040 --> 00:16:46,720
this is a really handy feature but it

00:16:45,199 --> 00:16:48,079
came with overheads that i didn't

00:16:46,720 --> 00:16:51,519
actually know about at the time and have

00:16:48,079 --> 00:16:54,399
come back to bite me

00:16:51,519 --> 00:16:55,600
so every task waiting to be executed and

00:16:54,399 --> 00:16:58,079
secutor is

00:16:55,600 --> 00:16:59,519
sitting somewhere taking up space it's

00:16:58,079 --> 00:17:00,560
either sitting in your broker waiting to

00:16:59,519 --> 00:17:02,399
be delivered

00:17:00,560 --> 00:17:04,319
or it's sitting in a celery worker

00:17:02,399 --> 00:17:06,480
waiting to be executed

00:17:04,319 --> 00:17:08,160
if you're using redis as your salary

00:17:06,480 --> 00:17:09,679
broker then all of the undelivered

00:17:08,160 --> 00:17:11,199
tasks are sitting in memory they're all

00:17:09,679 --> 00:17:13,919
sitting in ram

00:17:11,199 --> 00:17:14,400
um if your task has a delay in it so

00:17:13,919 --> 00:17:16,079
that it's

00:17:14,400 --> 00:17:18,400
scheduled to be executed minutes or

00:17:16,079 --> 00:17:20,079
hours from now it doesn't stay in the

00:17:18,400 --> 00:17:22,000
salary broker it doesn't stay in the

00:17:20,079 --> 00:17:24,559
queue it gets delivered to the worker

00:17:22,000 --> 00:17:25,679
and then and then it sits in the

00:17:24,559 --> 00:17:27,199
worker's memory

00:17:25,679 --> 00:17:29,520
and the worker holds on to it until it's

00:17:27,199 --> 00:17:31,600
time to execute it

00:17:29,520 --> 00:17:34,880
so once you have too many scheduled

00:17:31,600 --> 00:17:36,720
tasks taking up memory and the worker

00:17:34,880 --> 00:17:38,480
excuse me you hit that death spiral

00:17:36,720 --> 00:17:39,520
either an out-of-memory killed process

00:17:38,480 --> 00:17:47,840
or swapping the disc

00:17:39,520 --> 00:17:47,840
blowing out your iops

00:17:49,520 --> 00:17:53,840
okay so to keep costs down as i said

00:17:52,320 --> 00:17:55,679
earlier in the talk

00:17:53,840 --> 00:17:57,039
i'm not using redis for postgres and i'm

00:17:55,679 --> 00:17:59,760
not using elasticache

00:17:57,039 --> 00:18:01,280
um sorry i'm not using rds for postgres

00:17:59,760 --> 00:18:02,080
and i'm not using elasticash for the

00:18:01,280 --> 00:18:04,559
redis

00:18:02,080 --> 00:18:05,520
but i am now using sqs as the celery

00:18:04,559 --> 00:18:07,760
task broker

00:18:05,520 --> 00:18:09,039
sqs is nice and cheap it's a lot cheaper

00:18:07,760 --> 00:18:10,559
than those other two things which are

00:18:09,039 --> 00:18:11,520
actually loading up instances that you

00:18:10,559 --> 00:18:14,400
don't

00:18:11,520 --> 00:18:16,320
that you don't control and using it

00:18:14,400 --> 00:18:18,720
means that undelivered tasks are no

00:18:16,320 --> 00:18:21,679
longer taking up my precious disk io

00:18:18,720 --> 00:18:23,200
or worker memory um it actually didn't

00:18:21,679 --> 00:18:24,400
turn out to be quite as cost effective

00:18:23,200 --> 00:18:27,120
as i'd hoped because

00:18:24,400 --> 00:18:28,320
i'm sending out about 1.5 million sqs

00:18:27,120 --> 00:18:31,600
messages per day

00:18:28,320 --> 00:18:36,080
so it does kind of add up

00:18:31,600 --> 00:18:36,400
and it completely solved the problem of

00:18:36,080 --> 00:18:38,559
my

00:18:36,400 --> 00:18:40,160
redis memory footprint growing too large

00:18:38,559 --> 00:18:42,000
and blowing things up

00:18:40,160 --> 00:18:43,919
the celery memory footprint was still

00:18:42,000 --> 00:18:46,400
occasionally ballooning out

00:18:43,919 --> 00:18:46,960
uh i have two problems there one of them

00:18:46,400 --> 00:18:48,799
is just

00:18:46,960 --> 00:18:50,400
too many tasks waiting to be executed

00:18:48,799 --> 00:18:52,160
especially those delayed tasks that i

00:18:50,400 --> 00:18:54,640
was telling you about

00:18:52,160 --> 00:18:56,559
and then the other one is a persistent

00:18:54,640 --> 00:18:58,480
memory leak in salary that just seemed

00:18:56,559 --> 00:19:02,240
to cause the memory usage to grow

00:18:58,480 --> 00:19:04,799
forever no matter what i did so

00:19:02,240 --> 00:19:06,240
as i said i have a task that creates

00:19:04,799 --> 00:19:07,440
five thousand other tasks and then calls

00:19:06,240 --> 00:19:08,480
itself again to make another five

00:19:07,440 --> 00:19:10,320
thousand tasks

00:19:08,480 --> 00:19:11,760
it took me way too long to realize that

00:19:10,320 --> 00:19:13,280
this task

00:19:11,760 --> 00:19:15,360
was the one that needed to be slowed

00:19:13,280 --> 00:19:18,000
down so now that task

00:19:15,360 --> 00:19:19,200
spawns 5000 tasks but then it puts

00:19:18,000 --> 00:19:21,039
itself on a delay

00:19:19,200 --> 00:19:23,120
to wait 10 minutes before it runs again

00:19:21,039 --> 00:19:24,799
so those bunches of 5000 tasks kind of

00:19:23,120 --> 00:19:27,600
get released into the broker

00:19:24,799 --> 00:19:29,039
spaced out that's helped immensely um

00:19:27,600 --> 00:19:32,240
one change that i finally

00:19:29,039 --> 00:19:33,520
only made earlier this week was to no

00:19:32,240 --> 00:19:36,960
longer be doing

00:19:33,520 --> 00:19:38,559
always one task per block action

00:19:36,960 --> 00:19:41,120
now i can sort of like have one of them

00:19:38,559 --> 00:19:44,160
be 50 um

00:19:41,120 --> 00:19:47,840
like one task blocks 50 people and so

00:19:44,160 --> 00:19:52,000
just multi multiplying down

00:19:47,840 --> 00:19:55,280
um the number of tasks that have to be

00:19:52,000 --> 00:19:56,559
sent for work to happen

00:19:55,280 --> 00:19:59,679
stumbled over my words there a little

00:19:56,559 --> 00:20:01,840
bit and then there was that memory leak

00:19:59,679 --> 00:20:04,000
and i'm i'm not super proud of this but

00:20:01,840 --> 00:20:05,840
you see that timeout in the command line

00:20:04,000 --> 00:20:08,400
uh that one right there can i select it

00:20:05,840 --> 00:20:09,200
yeah timeout is a really handy uh unix

00:20:08,400 --> 00:20:10,799
command

00:20:09,200 --> 00:20:12,320
that simply runs a program for a while

00:20:10,799 --> 00:20:13,919
and then kills it so

00:20:12,320 --> 00:20:15,760
i literally just put a self-destruct in

00:20:13,919 --> 00:20:16,559
the container the container dies after

00:20:15,760 --> 00:20:19,120
eight hours

00:20:16,559 --> 00:20:20,480
and docker compose restarts it this is

00:20:19,120 --> 00:20:23,280
the most traditional

00:20:20,480 --> 00:20:24,240
memory leak fix of them all this is this

00:20:23,280 --> 00:20:27,919
is this is

00:20:24,240 --> 00:20:27,919
your grandfather's computer science

00:20:28,240 --> 00:20:31,520
although to be honest i i did find a

00:20:30,240 --> 00:20:34,559
possible culprit

00:20:31,520 --> 00:20:37,440
um the memory leaks seemed to

00:20:34,559 --> 00:20:37,919
finally go away or got a lot better at

00:20:37,440 --> 00:20:39,760
least

00:20:37,919 --> 00:20:41,440
when i added these command line options

00:20:39,760 --> 00:20:43,600
the uh without gossip without mingle and

00:20:41,440 --> 00:20:45,280
without heartbeat to the command

00:20:43,600 --> 00:20:47,520
i have no i have no clue what any of

00:20:45,280 --> 00:20:49,280
these three things were doing

00:20:47,520 --> 00:20:51,280
i don't know what mingle or heartbeat or

00:20:49,280 --> 00:20:52,960
gossip are and turning them off

00:20:51,280 --> 00:20:55,520
still doing what i want so i guess i

00:20:52,960 --> 00:20:55,520
didn't need them

00:20:56,880 --> 00:21:00,799
okay so that's all i'm going to talk

00:20:57,919 --> 00:21:04,000
about celery

00:21:00,799 --> 00:21:06,799
the last uh section is helping

00:21:04,000 --> 00:21:08,480
with user constraints it took me way too

00:21:06,799 --> 00:21:09,520
long to get around to preventing one

00:21:08,480 --> 00:21:11,280
single user

00:21:09,520 --> 00:21:13,200
from being able to able to overload

00:21:11,280 --> 00:21:15,280
secateur

00:21:13,200 --> 00:21:16,799
you weren't allowed to block someone

00:21:15,280 --> 00:21:17,280
with an upper bound of followers you

00:21:16,799 --> 00:21:19,520
couldn't

00:21:17,280 --> 00:21:22,000
you couldn't block someone on secateur

00:21:19,520 --> 00:21:23,919
who had more than 200 000 followers

00:21:22,000 --> 00:21:25,520
but you could happily block a bunch of

00:21:23,919 --> 00:21:28,880
people who had 190

00:21:25,520 --> 00:21:32,080
000 followers each that became a problem

00:21:28,880 --> 00:21:33,520
a few months ago when one dude tried to

00:21:32,080 --> 00:21:36,720
block

00:21:33,520 --> 00:21:38,480
everybody the only safeguard i had at

00:21:36,720 --> 00:21:40,000
the time was disabling someone's account

00:21:38,480 --> 00:21:42,559
outright and so i kind of needed

00:21:40,000 --> 00:21:43,919
something better

00:21:42,559 --> 00:21:46,000
it's kind of important to me because i

00:21:43,919 --> 00:21:47,840
really want

00:21:46,000 --> 00:21:49,280
i really want anyone to be able to sign

00:21:47,840 --> 00:21:52,480
up and use this app

00:21:49,280 --> 00:21:54,960
but i also really want to make sure that

00:21:52,480 --> 00:21:56,720
the app always has enough spare capacity

00:21:54,960 --> 00:21:58,480
so that if someone is genuinely being

00:21:56,720 --> 00:22:01,440
targeted for harassment

00:21:58,480 --> 00:22:02,880
um they can use it and i can't i i can't

00:22:01,440 --> 00:22:05,200
just say oh no i'm sorry

00:22:02,880 --> 00:22:07,039
the server's really loaded right now i

00:22:05,200 --> 00:22:08,400
have been messaged by people at imminent

00:22:07,039 --> 00:22:10,080
risk of physical harm because of

00:22:08,400 --> 00:22:11,760
targeted harassment

00:22:10,080 --> 00:22:14,080
by someone with half a million followers

00:22:11,760 --> 00:22:16,000
and so i really need the ability to go

00:22:14,080 --> 00:22:17,840
yes this will work for you just hit the

00:22:16,000 --> 00:22:20,240
button and it will

00:22:17,840 --> 00:22:22,480
it will it will at least help you out

00:22:20,240 --> 00:22:22,480
there

00:22:22,559 --> 00:22:26,000
so not long after the dude who tried to

00:22:25,679 --> 00:22:27,440
block

00:22:26,000 --> 00:22:29,600
the internet but only managed to block

00:22:27,440 --> 00:22:30,960
2.5 million people before my computer

00:22:29,600 --> 00:22:32,960
died

00:22:30,960 --> 00:22:34,559
i finally implemented rate limiting for

00:22:32,960 --> 00:22:37,039
secretary users

00:22:34,559 --> 00:22:38,640
and i settled on a really simple

00:22:37,039 --> 00:22:41,520
algorithm to implement this

00:22:38,640 --> 00:22:43,200
this token bucket algorithm um the

00:22:41,520 --> 00:22:44,640
analogy for a token bucket algorithm is

00:22:43,200 --> 00:22:46,000
really simple to understand you have a

00:22:44,640 --> 00:22:48,400
bucket full of tokens

00:22:46,000 --> 00:22:50,640
if you want to block say 10 000 people

00:22:48,400 --> 00:22:52,880
you have to spend 10 000 tokens

00:22:50,640 --> 00:22:54,559
you get new tokens at a steady rate but

00:22:52,880 --> 00:22:56,799
if your bucket is full you don't get any

00:22:54,559 --> 00:22:56,799
more

00:22:59,840 --> 00:23:02,000
so

00:23:03,679 --> 00:23:06,799
it was a mistake to not have a safeguard

00:23:05,120 --> 00:23:08,400
like this from the start

00:23:06,799 --> 00:23:09,919
and it wasn't actually that hard to add

00:23:08,400 --> 00:23:11,280
uh one of those cool things about the

00:23:09,919 --> 00:23:12,559
token bucket algorithm is it actually

00:23:11,280 --> 00:23:15,200
only requires

00:23:12,559 --> 00:23:16,240
one piece of state which is how many

00:23:15,200 --> 00:23:17,760
tokens you've got

00:23:16,240 --> 00:23:19,760
and then the other bits of state are

00:23:17,760 --> 00:23:22,320
just gravy you know um

00:23:19,760 --> 00:23:24,880
i've built this this is uh my my own

00:23:22,320 --> 00:23:27,520
accounts user profile on secateur and

00:23:24,880 --> 00:23:29,440
it just requires four bits of state and

00:23:27,520 --> 00:23:30,000
that means that i can tune it per user

00:23:29,440 --> 00:23:34,480
as well

00:23:30,000 --> 00:23:36,880
so i can i can give some users

00:23:34,480 --> 00:23:38,640
far more resources if they're actually

00:23:36,880 --> 00:23:40,159
if they're using the app because there's

00:23:38,640 --> 00:23:42,640
some urgency about about what they're

00:23:40,159 --> 00:23:42,640
dealing with

00:23:45,360 --> 00:23:49,840
okay we're pretty much done um i want to

00:23:48,159 --> 00:23:53,279
finish by talking about the inspiration

00:23:49,840 --> 00:23:55,440
that comes from constraints

00:23:53,279 --> 00:23:57,279
my free time is constrained and that's

00:23:55,440 --> 00:23:58,799
why when i chose to build secutor i

00:23:57,279 --> 00:24:00,640
built it out of technologies that i

00:23:58,799 --> 00:24:03,840
already knew

00:24:00,640 --> 00:24:04,480
secretary is doing something that helps

00:24:03,840 --> 00:24:05,919
people

00:24:04,480 --> 00:24:07,840
and so there was a time constraint of

00:24:05,919 --> 00:24:09,279
urgency too i wanted it launched so that

00:24:07,840 --> 00:24:10,640
people could benefit from it

00:24:09,279 --> 00:24:13,039
and not have to wait for me to learn

00:24:10,640 --> 00:24:14,720
some new technology the amount that i

00:24:13,039 --> 00:24:16,400
was willing to spend was constrained

00:24:14,720 --> 00:24:17,200
that's why i'm not just scaling out on

00:24:16,400 --> 00:24:21,919
rds

00:24:17,200 --> 00:24:21,919
or a cluster of kubernetes nodes yet um

00:24:22,960 --> 00:24:26,240
those constraints lead to the cpu and

00:24:24,559 --> 00:24:29,760
ram things as you've seen

00:24:26,240 --> 00:24:30,880
but haven't i just kind of contradicted

00:24:29,760 --> 00:24:32,400
myself

00:24:30,880 --> 00:24:33,760
i make a decent salary i could i could

00:24:32,400 --> 00:24:34,559
throw money at the problem to some

00:24:33,760 --> 00:24:39,440
degree

00:24:34,559 --> 00:24:41,200
am i just using my time instead of money

00:24:39,440 --> 00:24:42,480
and the answer is well yeah but i like

00:24:41,200 --> 00:24:43,919
it

00:24:42,480 --> 00:24:45,679
you know like liking what you're doing

00:24:43,919 --> 00:24:47,760
in your off hours is pretty important

00:24:45,679 --> 00:24:49,520
i've never really done a programming

00:24:47,760 --> 00:24:50,000
challenge or a code wars or an advent of

00:24:49,520 --> 00:24:52,159
code

00:24:50,000 --> 00:24:53,600
but i'll spend hours on this weird stuff

00:24:52,159 --> 00:24:54,640
tweaking to squeeze a little bit more of

00:24:53,600 --> 00:24:57,440
efficiency out of it

00:24:54,640 --> 00:24:59,200
it's it's kind of my jam working with

00:24:57,440 --> 00:25:01,840
constrained resources is a famous way to

00:24:59,200 --> 00:25:01,840
spark creativity

00:25:03,120 --> 00:25:06,400
photographers find more joy when they

00:25:04,880 --> 00:25:08,480
limit the colors they use some of the

00:25:06,400 --> 00:25:10,159
best movies were made when

00:25:08,480 --> 00:25:12,400
decisions are born out of resource

00:25:10,159 --> 00:25:14,159
constraints when it comes right down to

00:25:12,400 --> 00:25:14,960
it my most valuable resource is my

00:25:14,159 --> 00:25:16,559
attention

00:25:14,960 --> 00:25:19,039
and making it fun for me keeps my

00:25:16,559 --> 00:25:19,919
attention on it so as my final message i

00:25:19,039 --> 00:25:21,760
kind of want to just

00:25:19,919 --> 00:25:23,360
suggest that if you're not sure what to

00:25:21,760 --> 00:25:25,679
do next with your project

00:25:23,360 --> 00:25:28,000
add some limits on what you can do and

00:25:25,679 --> 00:25:29,440
work within those constraints

00:25:28,000 --> 00:25:31,520
thank you so much for listening i hope

00:25:29,440 --> 00:25:33,120
you have a fantastic conference

00:25:31,520 --> 00:25:35,520
i am here to answer questions in the

00:25:33,120 --> 00:25:37,360
hallway track or on chat

00:25:35,520 --> 00:25:40,960
or any number of mechanisms have a

00:25:37,360 --> 00:25:40,960
wonderful weekend thank you so much

00:25:41,200 --> 00:25:45,679
thank you so much tom that was really

00:25:43,200 --> 00:25:47,279
great and it's really wonderful to see

00:25:45,679 --> 00:25:48,960
um how you've developed this really

00:25:47,279 --> 00:25:50,720
wonderful and powerful tool and kind of

00:25:48,960 --> 00:25:53,600
how it's grown over the last year

00:25:50,720 --> 00:25:56,559
uh the spike on your load graph was one

00:25:53,600 --> 00:25:58,400
of those things that makes me kind of go

00:25:56,559 --> 00:26:00,480
so that was that was thank you for

00:25:58,400 --> 00:26:03,520
sharing that um

00:26:00,480 --> 00:26:05,200
so we do have uh

00:26:03,520 --> 00:26:07,200
probably time for one question because

00:26:05,200 --> 00:26:08,720
we are at time and we are now going to

00:26:07,200 --> 00:26:10,080
cut into the break so we could probably

00:26:08,720 --> 00:26:13,120
do one question

00:26:10,080 --> 00:26:16,400
um the chat is demanding the swap

00:26:13,120 --> 00:26:17,440
question to be answered so the question

00:26:16,400 --> 00:26:19,360
that we have is

00:26:17,440 --> 00:26:21,679
have you considered using alternates to

00:26:19,360 --> 00:26:24,480
celery

00:26:21,679 --> 00:26:26,080
um i actually started using something

00:26:24,480 --> 00:26:27,440
different from celery because

00:26:26,080 --> 00:26:29,200
when i first built the project i was

00:26:27,440 --> 00:26:31,039
using something called django q

00:26:29,200 --> 00:26:32,720
which was a really nice lightweight

00:26:31,039 --> 00:26:34,240
alternative to celery

00:26:32,720 --> 00:26:36,000
um and i recommend you check it out it

00:26:34,240 --> 00:26:38,559
was a really handy thing um because it

00:26:36,000 --> 00:26:41,760
didn't require a broker

00:26:38,559 --> 00:26:45,679
but i ended up going back to celery

00:26:41,760 --> 00:26:45,679
because i had um

00:26:46,880 --> 00:26:50,080
mainly because of the scheduled task

00:26:48,480 --> 00:26:52,320
thing that was that was a feature that

00:26:50,080 --> 00:26:54,960
celery had that django q did not

00:26:52,320 --> 00:26:57,120
um and there was a reason i needed a

00:26:54,960 --> 00:26:58,159
broker as well in the end and i can't

00:26:57,120 --> 00:27:00,480
remember why

00:26:58,159 --> 00:27:02,240
but the main one the main one was i

00:27:00,480 --> 00:27:05,279
needed the delayed tasks

00:27:02,240 --> 00:27:07,360
and when

00:27:05,279 --> 00:27:09,120
i need when when i started investigating

00:27:07,360 --> 00:27:10,559
other asynchronous task workers i went

00:27:09,120 --> 00:27:12,080
with celery because it is the biggest

00:27:10,559 --> 00:27:13,919
one it's called the biggest community

00:27:12,080 --> 00:27:17,039
i went back to the safe technology that

00:27:13,919 --> 00:27:17,039
i already know my way around

00:27:17,679 --> 00:27:20,960
right that's wonderful thank you um we

00:27:19,919 --> 00:27:22,240
do have one other

00:27:20,960 --> 00:27:24,320
like quick question that we can ask

00:27:22,240 --> 00:27:25,600
which is uh we've been asked how can

00:27:24,320 --> 00:27:27,840
people support you tom

00:27:25,600 --> 00:27:29,120
what can they do to help you out here oh

00:27:27,840 --> 00:27:31,039
um

00:27:29,120 --> 00:27:32,240
the secret tour has a donation page on

00:27:31,039 --> 00:27:34,640
it which is just using

00:27:32,240 --> 00:27:35,840
co coffee i don't even know how you're

00:27:34,640 --> 00:27:37,360
supposed to pronounce that

00:27:35,840 --> 00:27:39,200
um i got talked into putting that on the

00:27:37,360 --> 00:27:40,559
page uh on february so

00:27:39,200 --> 00:27:43,039
if you want to throw a few dollars

00:27:40,559 --> 00:27:44,880
towards the hosting costs then that's a

00:27:43,039 --> 00:27:46,640
very easy way to do it

00:27:44,880 --> 00:27:47,840
otherwise it's on github and i don't

00:27:46,640 --> 00:27:48,960
have much time to develop some of the

00:27:47,840 --> 00:27:50,159
features that people are kind of looking

00:27:48,960 --> 00:27:52,320
for so

00:27:50,159 --> 00:27:53,679
check out the code on github um have

00:27:52,320 --> 00:27:55,120
will we play with it

00:27:53,679 --> 00:27:56,720
and if you just want to support the

00:27:55,120 --> 00:27:58,320
hosting costs then yeah just um

00:27:56,720 --> 00:28:00,720
throw a little bit at kofi thank you so

00:27:58,320 --> 00:28:02,399
much cool thank you so much tom

00:28:00,720 --> 00:28:04,559
um and with that we're going into our

00:28:02,399 --> 00:28:06,720
break uh as mentioned tom will happily

00:28:04,559 --> 00:28:09,520
be in chat or in the devope

00:28:06,720 --> 00:28:10,480
dev oops hallway track uh and willing to

00:28:09,520 --> 00:28:12,080
answer questions

00:28:10,480 --> 00:28:17,840
uh thank you again so much tom this has

00:28:12,080 --> 00:28:17,840
been wonderful thank you catch you later

00:28:20,720 --> 00:28:22,799

YouTube URL: https://www.youtube.com/watch?v=A-3zc1CABqM


