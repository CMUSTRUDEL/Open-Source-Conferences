Title: "What happens behind execution of an `import` statement?" - Shivashis Padhi (PyConline AU 2020)
Publication date: 2020-09-08
Playlist: PyConline AU 2020
Description: 
	Shivashis Padhi

https://2020.pycon.org.au/program/Q7GJNZ

### Introduction

Every Python script involves import statements. And if you develop software with Python, you might already have come across import and path related errors like ImportError, ModuleNotFoundError, etc.

It's important to know the import mechanics, both for general knowledge, and to develop custom plugins to tweak the import system. In this talk, we'd discuss in detail about how the import system works, its components and what tasks they perform respectively.

### Who should attend this talk?
This talk is most suitable for beginner to intermediate level Pythonistas.

### How does the talk proceed?
 - The talk starts with packages in Python, and how to organize Python files in order to make them distributable, and importable.
 - It proceeds to discuss about $PATH and $PYTHONPATH, and how they are used to enable system-wide imports, and how capable are Python's path based import handlers, if they let a programmer import from remote URIs, etc.
 - Different types of packages such as regular packages, namespace packages, frozen modules, etc. are discussed.
 - After that, some key components are introduced i.e sys.modules and how modules are refreshed and regulated in runtime, what finders and loaders are, and what 'import protocol' is, sys.meta_path, sys.path_hooks.

- The talk then goes in detail about finders, the default finders in Python, spec object, and its functioning.
After finders, loaders are discussed with sample code, explaining the steps involved from processing a spec, and creating, executing, and loading a module to sys.modules.
- After finders and loaders, 'import hooks' are discussed i.e how Python allows injection of custom components to handle a pre-defined import statement.
- This follows a demonstration of import hooks, implementation of a meta_path finder Class which protects importing of modules from an http server with a token exchange. (So the source code is protected, and it can be logged who requested the source code by a signature to act against misuse.)
- The demonstration is followed by listing some important use cases of import hooks, and how folks have used it in the past.

### What can someone get out of this talk?

An understanding of the import system's mechanics, which helps to quickly debug and fix path/import related errors.
Knowledge of import hooks, to build custom import related plugins.

### Outline

Time Duration - Topic

0 - 4 Introduction to packages and how to organize packages

4 - 7 Types of packages in python, and the default ones the import system supports.

7 - 12 Components of import system - sys.modules - finders and loaders - chronology of import related tasks

12 - 15 Finders, examples of finders, and how they function, find_spec function

15 - 17 sys.meta_path, sys.path_hooks in detail

17 - 19 Introduction to PEP 302, and import hooks

19 - 22 explain loaders with template code

23 - 25 code walkthrough and demonstration of an implementation of import hooks

25 - 26 briefly cover 'importing of submodules' topic with an example

26 - 28 present use-cases of import hooks, and usage in industry, conclude.

28 - 30 Q&A

### Prerequisites:

 - Syntactic knowledge of Python
 - Should have come across import/$PYTHONPATH related errors

If you don't know either and still like the talk idea, please follow [this gist](https://gist.github.com/plant99/9fee5dbe73f25d4da9c7fb956a36b889) to 'intentionally' come across the errors :)

## Content URLs

[WIP slides](https://speakerdeck.com/plant99/wip-what-happens-behind-execution-of-an-import-statement)

[Longer description of the talk idea as blogpost](https://plant99.bitbucket.io/pages/blogs/ten.html)

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

Python, PyCon, PyConAU, PyConline

Sat Sep  5 11:00:00 2020 at Curlyboi
Captions: 
	00:00:00,080 --> 00:00:03,280
hey everyone welcome back to the curly

00:00:02,159 --> 00:00:06,799
boy theater

00:00:03,280 --> 00:00:08,800
i am lily ryan your mc be here all day

00:00:06,799 --> 00:00:10,000
so if you've got anything just shout out

00:00:08,800 --> 00:00:12,400
and i'll be here

00:00:10,000 --> 00:00:13,040
right okay next up we have shivasha's

00:00:12,400 --> 00:00:14,880
party

00:00:13,040 --> 00:00:17,039
who is going to be talking about what

00:00:14,880 --> 00:00:21,680
happens behind execution of an

00:00:17,039 --> 00:00:24,240
import statement hey how are you going

00:00:21,680 --> 00:00:25,439
i'm doing all late how are you lily yeah

00:00:24,240 --> 00:00:28,880
yeah i'm doing okay

00:00:25,439 --> 00:00:30,480
so shivashis is a senior majoring in

00:00:28,880 --> 00:00:33,760
computer science and engineering

00:00:30,480 --> 00:00:35,680
at nit in chuchi in india

00:00:33,760 --> 00:00:36,960
with three years of experience as a

00:00:35,680 --> 00:00:38,879
student software as a

00:00:36,960 --> 00:00:40,800
as a student software developer he's

00:00:38,879 --> 00:00:43,040
worked with multiple organizations

00:00:40,800 --> 00:00:44,160
large and small-scale startups he lives

00:00:43,040 --> 00:00:45,840
by a simple policy

00:00:44,160 --> 00:00:47,360
learn and build stuff to make the world

00:00:45,840 --> 00:00:48,879
a better place

00:00:47,360 --> 00:00:50,879
he's currently an intern with the data

00:00:48,879 --> 00:00:52,879
engineering team at grofers building

00:00:50,879 --> 00:00:54,960
geospatial data management tools

00:00:52,879 --> 00:00:56,879
you spend some time contributing to mss

00:00:54,960 --> 00:00:58,399
with an amazing set of people and we're

00:00:56,879 --> 00:01:02,000
very happy to have you here today with

00:00:58,399 --> 00:01:03,920
us to talk all about import statements

00:01:02,000 --> 00:01:06,080
thanks leigh it's good to be here

00:01:03,920 --> 00:01:07,680
actually and i hope everybody in

00:01:06,080 --> 00:01:10,080
the conference is doing well and okay

00:01:07,680 --> 00:01:11,520
and staying safe and we can start at the

00:01:10,080 --> 00:01:14,880
top

00:01:11,520 --> 00:01:14,880
excellent let's roll it

00:01:20,720 --> 00:01:24,560
okay hey everyone i am shivashish and

00:01:23,200 --> 00:01:26,400
today we are talking about the import

00:01:24,560 --> 00:01:28,720
system in python

00:01:26,400 --> 00:01:30,720
before that a little bit about me i do

00:01:28,720 --> 00:01:33,200
data and software engineering at grofers

00:01:30,720 --> 00:01:34,400
and in my spare time i tinker with earth

00:01:33,200 --> 00:01:36,400
observation data

00:01:34,400 --> 00:01:37,439
and i was a gsoc student last year with

00:01:36,400 --> 00:01:39,360
the psf

00:01:37,439 --> 00:01:41,439
and i love open source software i worked

00:01:39,360 --> 00:01:42,880
on a couple of them

00:01:41,439 --> 00:01:44,479
before we started that talk there's

00:01:42,880 --> 00:01:47,520
always a relevant xkcd

00:01:44,479 --> 00:01:48,079
in our case it's the python xcd it talks

00:01:47,520 --> 00:01:50,159
about how

00:01:48,079 --> 00:01:51,759
easy everything is in python and for

00:01:50,159 --> 00:01:54,479
relevance there's a nice input statement

00:01:51,759 --> 00:01:56,799
in the bottom frame

00:01:54,479 --> 00:01:58,799
okay let's start with our talk so what

00:01:56,799 --> 00:02:01,680
are packages in python

00:01:58,799 --> 00:02:03,439
packages are there are the directories

00:02:01,680 --> 00:02:05,439
no not necessarily packages can be

00:02:03,439 --> 00:02:07,680
something really abstract as in

00:02:05,439 --> 00:02:08,479
you have a bunch of csv files and you

00:02:07,680 --> 00:02:10,800
tweak your

00:02:08,479 --> 00:02:12,720
import system in python to understand it

00:02:10,800 --> 00:02:13,280
then the whole thing can be a package as

00:02:12,720 --> 00:02:15,200
well

00:02:13,280 --> 00:02:16,480
right and they're just special type of

00:02:15,200 --> 00:02:19,360
modules modules for

00:02:16,480 --> 00:02:20,879
understanding can be as simple as a

00:02:19,360 --> 00:02:22,640
simple python script which has a bunch

00:02:20,879 --> 00:02:23,920
of classes and function that can also be

00:02:22,640 --> 00:02:25,599
a model right

00:02:23,920 --> 00:02:27,599
it is just a special type of module with

00:02:25,599 --> 00:02:29,840
a path attribute which tells us where

00:02:27,599 --> 00:02:31,760
did we find that package

00:02:29,840 --> 00:02:33,280
and sub packages are packages within

00:02:31,760 --> 00:02:35,840
packages right so

00:02:33,280 --> 00:02:39,120
if you try to from spam input ham ham

00:02:35,840 --> 00:02:41,200
should ideally be a sub package of spam

00:02:39,120 --> 00:02:42,239
this is a sample directory structure in

00:02:41,200 --> 00:02:44,560
where there is a

00:02:42,239 --> 00:02:46,239
directory called spam and inside it is a

00:02:44,560 --> 00:02:48,560
component stored by file

00:02:46,239 --> 00:02:50,640
and this has some variables and in the

00:02:48,560 --> 00:02:52,879
same in the same directory

00:02:50,640 --> 00:02:53,760
if we spawn a python shell and try to

00:02:52,879 --> 00:02:56,000
import x

00:02:53,760 --> 00:02:56,879
and print x it works but how can we

00:02:56,000 --> 00:02:58,640
import

00:02:56,879 --> 00:03:00,720
this model spam from a different

00:02:58,640 --> 00:03:02,319
directory right that's where path and

00:03:00,720 --> 00:03:04,480
python path come in

00:03:02,319 --> 00:03:06,159
so if you append the parent directory of

00:03:04,480 --> 00:03:08,480
your package to these

00:03:06,159 --> 00:03:10,159
variables systemwide variables then

00:03:08,480 --> 00:03:11,360
you'll be able to import them from a

00:03:10,159 --> 00:03:14,239
different directory as well

00:03:11,360 --> 00:03:14,720
we'll see how that works later but for

00:03:14,239 --> 00:03:17,680
now

00:03:14,720 --> 00:03:18,720
if you uh append spam's parent directory

00:03:17,680 --> 00:03:20,800
to python path

00:03:18,720 --> 00:03:22,480
it should ideally work with even if you

00:03:20,800 --> 00:03:25,680
try to import it from different

00:03:22,480 --> 00:03:27,360
directories in your system okay

00:03:25,680 --> 00:03:28,879
so let's talk about different types of

00:03:27,360 --> 00:03:31,280
packages here like

00:03:28,879 --> 00:03:33,200
regular and name space packages regular

00:03:31,280 --> 00:03:35,519
packages are the primitive type

00:03:33,200 --> 00:03:37,440
of packages supported in python as in

00:03:35,519 --> 00:03:40,400
you have to put an init.pi file

00:03:37,440 --> 00:03:41,519
in your package and then you can import

00:03:40,400 --> 00:03:44,159
everything inside

00:03:41,519 --> 00:03:45,200
it as a sub package from a different

00:03:44,159 --> 00:03:46,720
directory or

00:03:45,200 --> 00:03:48,720
wherever you're trying to import this

00:03:46,720 --> 00:03:51,760
package spam from

00:03:48,720 --> 00:03:54,319
however with namespace packages

00:03:51,760 --> 00:03:56,000
you can put parts of your package spam

00:03:54,319 --> 00:03:59,519
in different locations in your

00:03:56,000 --> 00:04:01,599
os or anywhere but your

00:03:59,519 --> 00:04:02,799
you have to put put these packages in

00:04:01,599 --> 00:04:05,040
python path or

00:04:02,799 --> 00:04:06,480
the parent directory solve these

00:04:05,040 --> 00:04:08,239
packages in python path

00:04:06,480 --> 00:04:10,560
and then when you try to import this

00:04:08,239 --> 00:04:12,080
package for example here we do from spam

00:04:10,560 --> 00:04:13,840
import package one

00:04:12,080 --> 00:04:15,280
then you'll be able to import everything

00:04:13,840 --> 00:04:18,320
components one to

00:04:15,280 --> 00:04:20,639
any chunks you put in python path

00:04:18,320 --> 00:04:21,759
right even here if you try to log

00:04:20,639 --> 00:04:25,040
spam.part

00:04:21,759 --> 00:04:25,680
you get a namespace part and then yep

00:04:25,040 --> 00:04:28,639
you see

00:04:25,680 --> 00:04:29,840
the different directories you imported

00:04:28,639 --> 00:04:32,320
spam from

00:04:29,840 --> 00:04:34,000
these are name space packages these are

00:04:32,320 --> 00:04:34,960
some packages supported by default by

00:04:34,000 --> 00:04:37,120
the pythons

00:04:34,960 --> 00:04:38,479
import system they are built in modules

00:04:37,120 --> 00:04:41,280
like sys os

00:04:38,479 --> 00:04:42,000
etc frozen modules basically if a model

00:04:41,280 --> 00:04:44,800
is frozen for

00:04:42,000 --> 00:04:46,560
your os and setting and pass entries

00:04:44,800 --> 00:04:48,320
whatever reason pass and python path can

00:04:46,560 --> 00:04:51,840
be inherently supported by

00:04:48,320 --> 00:04:53,440
the input system let's talk about the

00:04:51,840 --> 00:04:54,720
input system we talked about packages

00:04:53,440 --> 00:04:57,199
and how to

00:04:54,720 --> 00:04:58,960
you know make them importable and let's

00:04:57,199 --> 00:05:00,880
talk about the import system how

00:04:58,960 --> 00:05:03,759
what happens when you try to import that

00:05:00,880 --> 00:05:05,520
package from somewhere

00:05:03,759 --> 00:05:07,199
these are some components of the input

00:05:05,520 --> 00:05:09,680
system which we talk about in phases

00:05:07,199 --> 00:05:11,520
the first of it is cis dot modules think

00:05:09,680 --> 00:05:12,320
of systole modules as a dictionary which

00:05:11,520 --> 00:05:14,400
maps

00:05:12,320 --> 00:05:15,680
the module name to the loaded module so

00:05:14,400 --> 00:05:16,240
when you try to import something in

00:05:15,680 --> 00:05:18,000
runtime

00:05:16,240 --> 00:05:19,600
there is a reference to the module in

00:05:18,000 --> 00:05:22,000
sysdot modules

00:05:19,600 --> 00:05:22,880
it lives in the global namespace of sis

00:05:22,000 --> 00:05:24,639
and

00:05:22,880 --> 00:05:27,360
this is something you can experiment

00:05:24,639 --> 00:05:29,440
yourself like if you try to import sys

00:05:27,360 --> 00:05:30,880
and check if system systole modules then

00:05:29,440 --> 00:05:33,120
you get true requests

00:05:30,880 --> 00:05:34,800
you haven't imported yet so if you try

00:05:33,120 --> 00:05:36,240
to check if it is in systole modules you

00:05:34,800 --> 00:05:37,759
get false when you try to import

00:05:36,240 --> 00:05:41,360
requests and after that

00:05:37,759 --> 00:05:43,759
request is in systole modules right

00:05:41,360 --> 00:05:45,600
okay let's now talk about import lab

00:05:43,759 --> 00:05:46,240
import lip provides the implementation

00:05:45,600 --> 00:05:49,199
of the

00:05:46,240 --> 00:05:50,320
whole input statement or how it is

00:05:49,199 --> 00:05:52,639
handled by the imports

00:05:50,320 --> 00:05:54,160
system right so every part of it is

00:05:52,639 --> 00:05:56,560
exposed through import lab

00:05:54,160 --> 00:05:58,400
if we try to replicate the import system

00:05:56,560 --> 00:06:01,199
we can ideally be able to do it

00:05:58,400 --> 00:06:02,400
with the help of input even to tweak the

00:06:01,199 --> 00:06:05,440
input system

00:06:02,400 --> 00:06:07,919
the parts we patch it with

00:06:05,440 --> 00:06:09,680
we will use input lib to do that or the

00:06:07,919 --> 00:06:12,800
fancy term for it being import hooks

00:06:09,680 --> 00:06:12,800
we'll talk about this later

00:06:12,880 --> 00:06:16,560
these are some common use cases of

00:06:14,400 --> 00:06:18,160
import lib even when you don't want to

00:06:16,560 --> 00:06:20,639
tweak the import system you can

00:06:18,160 --> 00:06:22,319
do some tasks with it for example you

00:06:20,639 --> 00:06:24,400
don't want to do import spam

00:06:22,319 --> 00:06:27,039
for some reasons then you can do

00:06:24,400 --> 00:06:28,720
something like spam equal to

00:06:27,039 --> 00:06:31,039
execute a function from import lib

00:06:28,720 --> 00:06:34,160
called import lib dot load module

00:06:31,039 --> 00:06:35,360
right and then in arguments you give the

00:06:34,160 --> 00:06:37,280
model name called spam

00:06:35,360 --> 00:06:39,120
right it will load the model for you and

00:06:37,280 --> 00:06:41,039
then reloading a module in runtime

00:06:39,120 --> 00:06:42,880
for some reason if you have changed the

00:06:41,039 --> 00:06:44,080
module which you have tried to import or

00:06:42,880 --> 00:06:45,680
imported in the past

00:06:44,080 --> 00:06:48,319
and you want to reload the module import

00:06:45,680 --> 00:06:50,720
live gives functions to deal with this

00:06:48,319 --> 00:06:52,560
and the most important it is it gives

00:06:50,720 --> 00:06:53,840
base classes for finders and loaders to

00:06:52,560 --> 00:06:55,680
be used with import hooks

00:06:53,840 --> 00:06:57,120
so to build input tools or to tweak the

00:06:55,680 --> 00:06:59,840
input system we

00:06:57,120 --> 00:07:01,520
have to use custom finders and loaders

00:06:59,840 --> 00:07:02,720
we don't know what they are but we will

00:07:01,520 --> 00:07:05,120
use it so import

00:07:02,720 --> 00:07:07,280
gives these base classes for us to

00:07:05,120 --> 00:07:09,280
inherit and use it

00:07:07,280 --> 00:07:11,120
okay in the last slide we talked about

00:07:09,280 --> 00:07:12,400
finders and loaders let's not talk about

00:07:11,120 --> 00:07:15,599
them

00:07:12,400 --> 00:07:17,280
okay find us finders they stand true to

00:07:15,599 --> 00:07:17,680
the literal sense of meaning as in they

00:07:17,280 --> 00:07:21,120
just

00:07:17,680 --> 00:07:24,160
find things what find what you us okay

00:07:21,120 --> 00:07:27,039
so when you do import something

00:07:24,160 --> 00:07:27,360
the python import system passes it and

00:07:27,039 --> 00:07:29,759
it

00:07:27,360 --> 00:07:31,599
goes to these finders and ask them hey

00:07:29,759 --> 00:07:33,520
can you find this model for me and

00:07:31,599 --> 00:07:35,120
by fine i mean just fine don't load them

00:07:33,520 --> 00:07:35,759
don't do anything just tell me if you

00:07:35,120 --> 00:07:39,440
can

00:07:35,759 --> 00:07:42,000
be able to find it for us okay so

00:07:39,440 --> 00:07:42,960
if a finder can find a module it returns

00:07:42,000 --> 00:07:46,080
a spec object

00:07:42,960 --> 00:07:47,919
right but spec object

00:07:46,080 --> 00:07:49,280
okay we'll talk about spec object next

00:07:47,919 --> 00:07:51,360
but

00:07:49,280 --> 00:07:52,879
if a finder can find a model it returns

00:07:51,360 --> 00:07:54,479
a spec object and

00:07:52,879 --> 00:07:56,400
every finder must have a find spec

00:07:54,479 --> 00:07:58,560
method defined so what

00:07:56,400 --> 00:07:59,919
ideally the import system does is it

00:07:58,560 --> 00:08:02,240
goes through every finder

00:07:59,919 --> 00:08:05,360
and executes this find spec method and

00:08:02,240 --> 00:08:07,440
tries to get the return value from it

00:08:05,360 --> 00:08:08,400
these are some default finders which we

00:08:07,440 --> 00:08:11,120
have in

00:08:08,400 --> 00:08:12,960
python's import system by default they

00:08:11,120 --> 00:08:15,360
are to look at built-in module

00:08:12,960 --> 00:08:17,120
and we discuss what built-in modules are

00:08:15,360 --> 00:08:19,680
and to locate chosen modules

00:08:17,120 --> 00:08:20,800
and to import whatever is in path or

00:08:19,680 --> 00:08:22,319
python path

00:08:20,800 --> 00:08:24,720
they are all different finders which

00:08:22,319 --> 00:08:28,319
will be executed in sequence

00:08:24,720 --> 00:08:30,160
to find a model okay so

00:08:28,319 --> 00:08:31,919
what are the functions of a finder if a

00:08:30,160 --> 00:08:32,479
finder is capable of handling an import

00:08:31,919 --> 00:08:34,800
statement

00:08:32,479 --> 00:08:36,240
it returns a module spec right we know

00:08:34,800 --> 00:08:39,039
this from this

00:08:36,240 --> 00:08:40,800
slide we saw so what are the model spec

00:08:39,039 --> 00:08:41,919
a module spec contains the modules

00:08:40,800 --> 00:08:45,120
metadata as in

00:08:41,919 --> 00:08:46,000
the path name etc and the import

00:08:45,120 --> 00:08:48,399
machinery then

00:08:46,000 --> 00:08:49,279
user said to load the modulator on as

00:08:48,399 --> 00:08:51,519
well so

00:08:49,279 --> 00:08:52,800
after this after metadata is returned

00:08:51,519 --> 00:08:55,279
along with the spec

00:08:52,800 --> 00:08:57,040
a loader object is also written the

00:08:55,279 --> 00:08:58,080
input system uses this loader to load

00:08:57,040 --> 00:09:00,320
the modulator

00:08:58,080 --> 00:09:02,480
just know that finders don't have to do

00:09:00,320 --> 00:09:05,120
anything with loading the module right

00:09:02,480 --> 00:09:06,959
the input machinery it controls

00:09:05,120 --> 00:09:08,000
everything and until now we just know

00:09:06,959 --> 00:09:11,120
that it knows how to find

00:09:08,000 --> 00:09:12,080
a module so this is the find spec method

00:09:11,120 --> 00:09:14,240
i talked about

00:09:12,080 --> 00:09:15,519
this is a dummy example which checks if

00:09:14,240 --> 00:09:17,680
a module is built in

00:09:15,519 --> 00:09:18,959
as in if it is something like types or

00:09:17,680 --> 00:09:21,120
cis etc

00:09:18,959 --> 00:09:22,000
if it is then it returns a spec and a

00:09:21,120 --> 00:09:24,080
loader right

00:09:22,000 --> 00:09:26,080
you can see here you it returns a full

00:09:24,080 --> 00:09:28,720
name and loader object

00:09:26,080 --> 00:09:29,839
and makes it a spec and then returns it

00:09:28,720 --> 00:09:32,720
if it can't find it

00:09:29,839 --> 00:09:32,720
it returns none

00:09:32,880 --> 00:09:36,000
okay to import soft packages like spam

00:09:35,360 --> 00:09:39,120
like importing

00:09:36,000 --> 00:09:40,160
ham from spam we have to find the parent

00:09:39,120 --> 00:09:42,800
packages first

00:09:40,160 --> 00:09:43,920
right we have to import spam first and

00:09:42,800 --> 00:09:46,160
then spam dot ham

00:09:43,920 --> 00:09:47,839
this is done because let's say in your

00:09:46,160 --> 00:09:49,519
ham file or ham

00:09:47,839 --> 00:09:51,279
sub package you are trying to import

00:09:49,519 --> 00:09:54,080
spam and spam doesn't exist

00:09:51,279 --> 00:09:55,200
so you you do it recursively and you

00:09:54,080 --> 00:09:57,279
cannot exit the loop

00:09:55,200 --> 00:09:58,399
so that's why the parent packages are

00:09:57,279 --> 00:10:01,200
imported first

00:09:58,399 --> 00:10:02,720
and then sub packages and gradually so

00:10:01,200 --> 00:10:05,360
if you're trying to import

00:10:02,720 --> 00:10:08,480
c from a dot b then a has to be imported

00:10:05,360 --> 00:10:10,959
first then a dot b then a dot b dot c

00:10:08,480 --> 00:10:13,760
okay that's done let's talk about import

00:10:10,959 --> 00:10:15,200
hooks and pep 302

00:10:13,760 --> 00:10:17,360
these are some more components of the

00:10:15,200 --> 00:10:19,519
input system which we should know about

00:10:17,360 --> 00:10:21,440
so we know what finders are right so

00:10:19,519 --> 00:10:23,120
they help the python's import system or

00:10:21,440 --> 00:10:26,000
input machinery find a module

00:10:23,120 --> 00:10:26,480
so syst.metapath is a list of finders

00:10:26,000 --> 00:10:29,360
which

00:10:26,480 --> 00:10:30,240
the input system checks while finding a

00:10:29,360 --> 00:10:32,240
module right so

00:10:30,240 --> 00:10:33,680
it is a list and it has some finders

00:10:32,240 --> 00:10:35,680
what the input system does

00:10:33,680 --> 00:10:37,360
is it goes through this list and checks

00:10:35,680 --> 00:10:38,079
with every finder hey can you find this

00:10:37,360 --> 00:10:41,839
module

00:10:38,079 --> 00:10:43,920
right and if one of them returns a spec

00:10:41,839 --> 00:10:46,560
then that's it the finding is complete

00:10:43,920 --> 00:10:49,040
and next steps are executed by the

00:10:46,560 --> 00:10:49,920
python's input system else it goes on

00:10:49,040 --> 00:10:52,240
checking

00:10:49,920 --> 00:10:53,360
like until some some finder returns a

00:10:52,240 --> 00:10:55,200
spec

00:10:53,360 --> 00:10:56,480
path hooks however they're used

00:10:55,200 --> 00:10:58,720
internally by the

00:10:56,480 --> 00:11:01,440
pathfinder object and systole metapath

00:10:58,720 --> 00:11:03,920
they're used to find

00:11:01,440 --> 00:11:04,800
a file related objects as in slip files

00:11:03,920 --> 00:11:07,279
or

00:11:04,800 --> 00:11:09,839
tar files you can extend the import

00:11:07,279 --> 00:11:11,440
system to do these as well

00:11:09,839 --> 00:11:13,680
okay this is an example of systole

00:11:11,440 --> 00:11:16,000
metaphase insist or pathways right so

00:11:13,680 --> 00:11:18,000
as you can see sysdot metapath has some

00:11:16,000 --> 00:11:19,200
uh built-in importer frozen importer and

00:11:18,000 --> 00:11:21,920
pathfinder

00:11:19,200 --> 00:11:22,720
right and path of sas zip importer and

00:11:21,920 --> 00:11:26,079
file finder

00:11:22,720 --> 00:11:28,240
these are two find zip and normal dot pi

00:11:26,079 --> 00:11:30,880
source files

00:11:28,240 --> 00:11:31,760
okay so what are input hooks import

00:11:30,880 --> 00:11:35,680
hooks is this

00:11:31,760 --> 00:11:36,160
fancy term to tell about the feature

00:11:35,680 --> 00:11:38,480
where

00:11:36,160 --> 00:11:39,920
we can build our own custom finders and

00:11:38,480 --> 00:11:42,720
loaders and we can

00:11:39,920 --> 00:11:44,240
inject it to python's input system and

00:11:42,720 --> 00:11:46,000
every time

00:11:44,240 --> 00:11:47,279
python's import system tries to find a

00:11:46,000 --> 00:11:49,040
package or load a package

00:11:47,279 --> 00:11:50,639
it checks with our finders as well as in

00:11:49,040 --> 00:11:53,519
the custom finder which we

00:11:50,639 --> 00:11:55,200
uh hook to the input system right so it

00:11:53,519 --> 00:11:56,160
looks a lot like dependency injection

00:11:55,200 --> 00:11:58,959
maybe it is

00:11:56,160 --> 00:12:01,279
and it's as simple as like loading the

00:11:58,959 --> 00:12:02,079
custom finder object to meta path we can

00:12:01,279 --> 00:12:04,320
just append it

00:12:02,079 --> 00:12:06,000
and every time an input happens it

00:12:04,320 --> 00:12:08,160
checks with our custom finder object as

00:12:06,000 --> 00:12:11,519
well

00:12:08,160 --> 00:12:13,040
okay let's talk about ludus now so uh

00:12:11,519 --> 00:12:14,560
before that let's take a step back and

00:12:13,040 --> 00:12:16,000
gather everything we've known so far

00:12:14,560 --> 00:12:17,920
about the input system

00:12:16,000 --> 00:12:20,639
right so we have something like systole

00:12:17,920 --> 00:12:22,560
modules which is a dictionary of

00:12:20,639 --> 00:12:24,560
dictionary which maps a model name to

00:12:22,560 --> 00:12:26,000
the loaded module and runtime

00:12:24,560 --> 00:12:28,639
and we have something like systort

00:12:26,000 --> 00:12:30,800
metapod which has a list of finders

00:12:28,639 --> 00:12:32,240
which the import system goes through

00:12:30,800 --> 00:12:33,839
while

00:12:32,240 --> 00:12:36,160
importing a module right or try to

00:12:33,839 --> 00:12:38,560
finding to try and find a model

00:12:36,160 --> 00:12:40,000
okay so remember when i told you that a

00:12:38,560 --> 00:12:41,920
finder returns a spec

00:12:40,000 --> 00:12:43,760
and this spec object has a loader which

00:12:41,920 --> 00:12:44,399
will be used later to load and execute a

00:12:43,760 --> 00:12:46,320
module

00:12:44,399 --> 00:12:47,839
here we are these are loaders right so

00:12:46,320 --> 00:12:48,480
after spec object is returned from a

00:12:47,839 --> 00:12:50,320
finder

00:12:48,480 --> 00:12:51,920
then the same loaders are used to

00:12:50,320 --> 00:12:54,560
execute the module and store its

00:12:51,920 --> 00:12:56,399
reference in systole modules

00:12:54,560 --> 00:12:58,399
these are some tasks of a loader a

00:12:56,399 --> 00:13:00,639
loader is used to load from

00:12:58,399 --> 00:13:02,000
source or byte code and if it is loading

00:13:00,639 --> 00:13:03,760
from source code then it

00:13:02,000 --> 00:13:05,279
it will compile the source and it

00:13:03,760 --> 00:13:07,120
executes the module and stores a

00:13:05,279 --> 00:13:09,680
reference in cistod modules under the

00:13:07,120 --> 00:13:11,200
key spec dot name

00:13:09,680 --> 00:13:12,959
okay let's now talk about loading with

00:13:11,200 --> 00:13:15,440
the help of an example right

00:13:12,959 --> 00:13:16,000
so there is a model we instantiate it to

00:13:15,440 --> 00:13:17,839
none

00:13:16,000 --> 00:13:19,920
and then we check for an attribute which

00:13:17,839 --> 00:13:21,600
will be a function called create module

00:13:19,920 --> 00:13:23,040
if there is a create model attribute it

00:13:21,600 --> 00:13:27,200
will just create the module with

00:13:23,040 --> 00:13:28,800
all the attributes and um yeah

00:13:27,200 --> 00:13:30,560
basically create a dummy model for us

00:13:28,800 --> 00:13:33,200
right if it is not defined

00:13:30,560 --> 00:13:34,000
then we created ourselves with module

00:13:33,200 --> 00:13:36,320
type right this

00:13:34,000 --> 00:13:37,120
this is imported from the types library

00:13:36,320 --> 00:13:39,040
and yep

00:13:37,120 --> 00:13:40,880
so we create the module now and then we

00:13:39,040 --> 00:13:41,680
initiate it with some attributes as in

00:13:40,880 --> 00:13:44,000
its path

00:13:41,680 --> 00:13:45,279
name what is the spec associated with it

00:13:44,000 --> 00:13:48,399
and what is a loader

00:13:45,279 --> 00:13:50,160
etc okay so

00:13:48,399 --> 00:13:51,519
if spec.loader is none which shouldn't

00:13:50,160 --> 00:13:54,240
ideally be the case because

00:13:51,519 --> 00:13:55,680
we have discussed that sys i mean spec

00:13:54,240 --> 00:13:57,839
must have a loader right if

00:13:55,680 --> 00:13:59,680
it doesn't have a loader then we raise

00:13:57,839 --> 00:14:02,079
an input error

00:13:59,680 --> 00:14:02,959
if it has a loader then we check for an

00:14:02,079 --> 00:14:04,880
exec module

00:14:02,959 --> 00:14:06,399
function if the loader is i mean

00:14:04,880 --> 00:14:08,399
basically if the loader has

00:14:06,399 --> 00:14:10,000
exact module function right if it

00:14:08,399 --> 00:14:11,360
doesn't have it then it has to have a

00:14:10,000 --> 00:14:13,199
load module function

00:14:11,360 --> 00:14:15,360
and this is basically loading the source

00:14:13,199 --> 00:14:17,279
code or

00:14:15,360 --> 00:14:19,279
yeah this is loading the source code and

00:14:17,279 --> 00:14:21,680
storing it in systole modules

00:14:19,279 --> 00:14:23,600
under the keyspec.name right if it

00:14:21,680 --> 00:14:25,440
doesn't have a load module and it has

00:14:23,600 --> 00:14:27,519
exact module then we should use

00:14:25,440 --> 00:14:28,720
exact module right so we create an entry

00:14:27,519 --> 00:14:31,040
in sessor modules

00:14:28,720 --> 00:14:32,399
we execute the module in that namespace

00:14:31,040 --> 00:14:34,639
and if there is an exception

00:14:32,399 --> 00:14:36,560
we raise an input error and if we have

00:14:34,639 --> 00:14:38,079
created an entry in system modules we

00:14:36,560 --> 00:14:38,959
should delete it right it shouldn't have

00:14:38,079 --> 00:14:41,920
a

00:14:38,959 --> 00:14:43,440
faulty entry okay so after that we

00:14:41,920 --> 00:14:45,040
return the interview created in sysdot

00:14:43,440 --> 00:14:46,399
modules

00:14:45,040 --> 00:14:48,240
okay what are some errors which we

00:14:46,399 --> 00:14:51,279
encountered during

00:14:48,240 --> 00:14:54,079
the whole import system right so

00:14:51,279 --> 00:14:54,959
um we got we encountered model not on

00:14:54,079 --> 00:14:56,480
error when

00:14:54,959 --> 00:14:58,560
there are a list of finders in systole

00:14:56,480 --> 00:15:01,040
metapath and every finder

00:14:58,560 --> 00:15:02,079
returns none right so nobody knows how

00:15:01,040 --> 00:15:04,959
to find the module

00:15:02,079 --> 00:15:07,519
so that's true then we cannot find the

00:15:04,959 --> 00:15:09,600
model and we raise a model not one error

00:15:07,519 --> 00:15:10,800
and when when we when one of the finders

00:15:09,600 --> 00:15:13,680
returns a spec

00:15:10,800 --> 00:15:14,639
then while loading it or executing it we

00:15:13,680 --> 00:15:17,760
hit a snag

00:15:14,639 --> 00:15:19,440
then we go we face import errors it's

00:15:17,760 --> 00:15:21,600
the input system telling you that

00:15:19,440 --> 00:15:23,279
okay i know where to find this but i

00:15:21,600 --> 00:15:25,519
don't know how to execute it

00:15:23,279 --> 00:15:26,480
right okay we've discussed a lot of

00:15:25,519 --> 00:15:28,399
things so far

00:15:26,480 --> 00:15:29,519
uh let's put it in a nice block diagram

00:15:28,399 --> 00:15:32,399
and understand

00:15:29,519 --> 00:15:33,920
what happens in the chronological order

00:15:32,399 --> 00:15:35,759
so there is python runtime when

00:15:33,920 --> 00:15:37,040
when you when it passes the input

00:15:35,759 --> 00:15:39,839
statement it

00:15:37,040 --> 00:15:41,360
tries to look for this module in systole

00:15:39,839 --> 00:15:42,880
modules if there is an entry

00:15:41,360 --> 00:15:44,560
then it returns the entry which is in

00:15:42,880 --> 00:15:47,360
systole modules else

00:15:44,560 --> 00:15:49,199
it goes to systole metapath and queries

00:15:47,360 --> 00:15:49,839
each of these finders like executes

00:15:49,199 --> 00:15:53,040
their

00:15:49,839 --> 00:15:55,199
find spec method and checks that if any

00:15:53,040 --> 00:15:56,959
finder can return a spec object for it

00:15:55,199 --> 00:15:58,880
if none of them return a spec object

00:15:56,959 --> 00:16:01,759
then a module not found error is raised

00:15:58,880 --> 00:16:03,440
if one of them returns it then it grow

00:16:01,759 --> 00:16:04,720
it goes forward and tries to load the

00:16:03,440 --> 00:16:06,320
model for us

00:16:04,720 --> 00:16:09,600
and if there is an error while loading

00:16:06,320 --> 00:16:12,639
the module we get an import error

00:16:09,600 --> 00:16:14,399
okay so that's all the theory part let's

00:16:12,639 --> 00:16:16,560
now talk about how we can use it

00:16:14,399 --> 00:16:17,600
so i'll be showing you a demo use case

00:16:16,560 --> 00:16:19,680
where

00:16:17,600 --> 00:16:21,040
our import hook will be able to handle

00:16:19,680 --> 00:16:23,519
import statements

00:16:21,040 --> 00:16:24,800
from a remote url and it would be

00:16:23,519 --> 00:16:27,920
protected by

00:16:24,800 --> 00:16:31,120
an basic http auth method right

00:16:27,920 --> 00:16:34,320
okay let's jump to the code then

00:16:31,120 --> 00:16:36,480
okay so here we have our file which has

00:16:34,320 --> 00:16:38,720
the finder and loader class and then we

00:16:36,480 --> 00:16:42,240
have a test file which we will use it to

00:16:38,720 --> 00:16:43,040
uh to test the input and then we have

00:16:42,240 --> 00:16:45,360
three dot pi

00:16:43,040 --> 00:16:46,480
um this is the final model which we will

00:16:45,360 --> 00:16:49,680
be importing from

00:16:46,480 --> 00:16:50,880
a remote repository like so we have the

00:16:49,680 --> 00:16:52,639
directory structure of the remote

00:16:50,880 --> 00:16:54,959
repository will be like this

00:16:52,639 --> 00:16:56,160
there is test project and inside it is a

00:16:54,959 --> 00:16:57,759
sub package called two

00:16:56,160 --> 00:16:59,680
and inside it is a model called three

00:16:57,759 --> 00:17:00,639
dot pi and there is one dot pi but we

00:16:59,680 --> 00:17:02,720
don't care about it

00:17:00,639 --> 00:17:03,759
we don't import it from one pi and

00:17:02,720 --> 00:17:06,240
anyway

00:17:03,759 --> 00:17:06,799
to serve it i'm using a simple http auth

00:17:06,240 --> 00:17:09,439
with

00:17:06,799 --> 00:17:10,400
uh sorry basic http or with a file

00:17:09,439 --> 00:17:14,000
server

00:17:10,400 --> 00:17:17,280
and we will start the file server

00:17:14,000 --> 00:17:20,160
okay so it's starting here and then

00:17:17,280 --> 00:17:20,480
i'll just move it up so that you can see

00:17:20,160 --> 00:17:23,360
it

00:17:20,480 --> 00:17:24,400
okay okay so we have a file server ready

00:17:23,360 --> 00:17:26,079
now before we

00:17:24,400 --> 00:17:28,880
test anything let's i'll take you

00:17:26,079 --> 00:17:31,120
through the finders and loader class

00:17:28,880 --> 00:17:32,240
okay so what are we essentially doing is

00:17:31,120 --> 00:17:33,919
we are trying to

00:17:32,240 --> 00:17:35,760
get the finder class from import lib

00:17:33,919 --> 00:17:39,280
local which is this file

00:17:35,760 --> 00:17:42,720
and then uh we instantiate the class

00:17:39,280 --> 00:17:44,320
with a url and the test project we are

00:17:42,720 --> 00:17:46,160
or the project name we are trying to

00:17:44,320 --> 00:17:48,559
import three from right

00:17:46,160 --> 00:17:50,400
and we append it to systole metapath and

00:17:48,559 --> 00:17:52,640
then we try the input statement

00:17:50,400 --> 00:17:54,160
and finally if everything goes right we

00:17:52,640 --> 00:17:55,760
will be able to execute the function

00:17:54,160 --> 00:17:58,320
which is in three dot pi

00:17:55,760 --> 00:18:00,080
and print dummy is a function which is

00:17:58,320 --> 00:18:00,960
in three dot pi and it prints the

00:18:00,080 --> 00:18:04,080
parameter

00:18:00,960 --> 00:18:07,280
in red right so if everything goes right

00:18:04,080 --> 00:18:08,320
then we'll be able to see our five

00:18:07,280 --> 00:18:10,720
like this is the parameter we're

00:18:08,320 --> 00:18:14,320
providing in printed format

00:18:10,720 --> 00:18:18,400
in red okay i'll clear

00:18:14,320 --> 00:18:21,679
this and imported local dot pi

00:18:18,400 --> 00:18:22,799
has finder which is named remote

00:18:21,679 --> 00:18:25,679
directory finder

00:18:22,799 --> 00:18:26,480
and there is an init function to uh to

00:18:25,679 --> 00:18:28,400
give it some

00:18:26,480 --> 00:18:29,600
settings as in url and subdirectory

00:18:28,400 --> 00:18:31,600
where to find from

00:18:29,600 --> 00:18:33,200
okay let's talk about find spec method

00:18:31,600 --> 00:18:34,799
we said this is important right this

00:18:33,200 --> 00:18:35,440
will be called by the python's import

00:18:34,799 --> 00:18:38,799
system

00:18:35,440 --> 00:18:41,919
when it is trying to find any module and

00:18:38,799 --> 00:18:42,400
a subset of which is our testproject.2

00:18:41,919 --> 00:18:44,960
import

00:18:42,400 --> 00:18:46,880
right whenever this is imported our

00:18:44,960 --> 00:18:48,000
custom finder will also be called and

00:18:46,880 --> 00:18:51,679
this method is what

00:18:48,000 --> 00:18:54,559
will be called at first if

00:18:51,679 --> 00:18:55,440
basically if the full name doesn't have

00:18:54,559 --> 00:18:57,440
test project

00:18:55,440 --> 00:18:58,720
we are returning none that's how we are

00:18:57,440 --> 00:19:00,000
telling the input system that

00:18:58,720 --> 00:19:02,000
oh we don't know how to handle this

00:19:00,000 --> 00:19:04,559
import statement and

00:19:02,000 --> 00:19:06,000
if it is if there is test project in it

00:19:04,559 --> 00:19:08,480
then what we are trying to do

00:19:06,000 --> 00:19:09,679
is we are printing fine okay we found

00:19:08,480 --> 00:19:11,679
something we found module

00:19:09,679 --> 00:19:12,880
this for our use cases in how we will

00:19:11,679 --> 00:19:15,039
demonstrate it

00:19:12,880 --> 00:19:17,039
and we are returning a model spec with

00:19:15,039 --> 00:19:17,520
the full name and a loader associated

00:19:17,039 --> 00:19:19,360
with it

00:19:17,520 --> 00:19:21,440
so this loader will eventually be used

00:19:19,360 --> 00:19:23,679
to load and execute the module right

00:19:21,440 --> 00:19:24,559
unless we provide a loader will get an

00:19:23,679 --> 00:19:28,000
input error

00:19:24,559 --> 00:19:28,799
right okay so how is the loader

00:19:28,000 --> 00:19:32,240
structure then

00:19:28,799 --> 00:19:34,400
so loader also has an init function and

00:19:32,240 --> 00:19:36,320
these are some url path settings and

00:19:34,400 --> 00:19:38,480
this is a utility function to get the

00:19:36,320 --> 00:19:40,080
source code for a path like basically

00:19:38,480 --> 00:19:40,960
it's requesting the url to get the

00:19:40,080 --> 00:19:44,160
source code

00:19:40,960 --> 00:19:46,799
and the session auth is defined here it

00:19:44,160 --> 00:19:47,679
has to be a basic http auth for now you

00:19:46,799 --> 00:19:49,840
can

00:19:47,679 --> 00:19:51,280
like experiment with the authentication

00:19:49,840 --> 00:19:53,360
you're trying to implement

00:19:51,280 --> 00:19:55,919
and there is a create module function

00:19:53,360 --> 00:19:58,080
this the job of this is to create

00:19:55,919 --> 00:19:59,039
your module right in a module type

00:19:58,080 --> 00:20:01,760
object

00:19:59,039 --> 00:20:03,440
yeah this is imported from types library

00:20:01,760 --> 00:20:05,440
and you can create a module

00:20:03,440 --> 00:20:07,440
and then oh this is a small check to

00:20:05,440 --> 00:20:09,200
check if there is an entry insert

00:20:07,440 --> 00:20:12,159
modules if there is then we don't have

00:20:09,200 --> 00:20:14,400
to go ahead with the import statement

00:20:12,159 --> 00:20:16,320
okay here we are trying to like initiate

00:20:14,400 --> 00:20:17,200
some attributes of the modulus and file

00:20:16,320 --> 00:20:19,760
name

00:20:17,200 --> 00:20:20,480
loader spec right the path is a dummy

00:20:19,760 --> 00:20:22,960
path

00:20:20,480 --> 00:20:24,400
but yeah you can i ideally if you're

00:20:22,960 --> 00:20:25,760
trying to build an import hook then you

00:20:24,400 --> 00:20:28,159
should

00:20:25,760 --> 00:20:30,400
make the path the remote repository path

00:20:28,159 --> 00:20:30,400
right

00:20:30,799 --> 00:20:34,000
so yeah if install is true it should be

00:20:33,600 --> 00:20:36,080
already

00:20:34,000 --> 00:20:37,679
as in like is a default then we are

00:20:36,080 --> 00:20:40,960
adding it to sysdot modules

00:20:37,679 --> 00:20:43,280
right and once that is done

00:20:40,960 --> 00:20:45,440
the next step if you remember from the

00:20:43,280 --> 00:20:47,440
sample code we used to

00:20:45,440 --> 00:20:48,960
show how loading has happened then the

00:20:47,440 --> 00:20:51,520
next steps are

00:20:48,960 --> 00:20:52,880
exact module right here we are trying to

00:20:51,520 --> 00:20:55,520
get the source from

00:20:52,880 --> 00:20:57,280
path and then we are executing the

00:20:55,520 --> 00:20:59,600
source and if there is an error

00:20:57,280 --> 00:21:00,799
we raise an import error and this is the

00:20:59,600 --> 00:21:02,960
name space in which

00:21:00,799 --> 00:21:04,080
all of the variables and class names are

00:21:02,960 --> 00:21:07,440
bound

00:21:04,080 --> 00:21:09,039
mod.dict is the namespace in sys.modules

00:21:07,440 --> 00:21:11,919
under the entry spec dot name

00:21:09,039 --> 00:21:13,120
right so this mod is provided by the

00:21:11,919 --> 00:21:14,720
python's import system

00:21:13,120 --> 00:21:16,400
and this is the same module which will

00:21:14,720 --> 00:21:19,280
be there in systole modules

00:21:16,400 --> 00:21:21,039
so it's executed in that name space so

00:21:19,280 --> 00:21:21,520
every variables and functions are bound

00:21:21,039 --> 00:21:24,480
to that

00:21:21,520 --> 00:21:25,039
namespace and yeah that's all of it

00:21:24,480 --> 00:21:26,480
that's

00:21:25,039 --> 00:21:28,400
these are the three important functions

00:21:26,480 --> 00:21:29,440
which we should care about i'll go

00:21:28,400 --> 00:21:31,360
through this again

00:21:29,440 --> 00:21:32,720
you have to implement find spec you have

00:21:31,360 --> 00:21:34,720
to implement create module

00:21:32,720 --> 00:21:37,200
and you have to implement exact module

00:21:34,720 --> 00:21:38,159
and that's probably all of it we can go

00:21:37,200 --> 00:21:40,799
ahead with

00:21:38,159 --> 00:21:40,799
testing it

00:21:42,080 --> 00:21:46,880
okay so okay it worked because we see

00:21:45,120 --> 00:21:49,840
five printed in red

00:21:46,880 --> 00:21:50,640
and uh since both of these are different

00:21:49,840 --> 00:21:52,720
directories

00:21:50,640 --> 00:21:53,840
we know for sure that it's not importing

00:21:52,720 --> 00:21:57,280
locally

00:21:53,840 --> 00:21:59,600
right uh and okay so uh what happened

00:21:57,280 --> 00:22:01,679
here so we tried to import this

00:21:59,600 --> 00:22:04,000
this is what we tried to import right

00:22:01,679 --> 00:22:06,080
but eventually what happened is test

00:22:04,000 --> 00:22:08,880
project got imported then test logic.2

00:22:06,080 --> 00:22:10,240
then testproject.2.3 right we talked

00:22:08,880 --> 00:22:12,240
about this in a previous slide

00:22:10,240 --> 00:22:14,000
and what it does it is it finds the

00:22:12,240 --> 00:22:15,679
model first then it creates more

00:22:14,000 --> 00:22:17,120
creates the module as in the model type

00:22:15,679 --> 00:22:19,280
function um

00:22:17,120 --> 00:22:20,880
sorry module type instant like to

00:22:19,280 --> 00:22:22,880
instantiate module type

00:22:20,880 --> 00:22:24,240
class and then we are installing the

00:22:22,880 --> 00:22:26,240
module in systole modules

00:22:24,240 --> 00:22:27,840
and then we are executing it in the

00:22:26,240 --> 00:22:31,039
namespace which

00:22:27,840 --> 00:22:33,039
will be required later okay so that's

00:22:31,039 --> 00:22:34,960
everything that's everything uh

00:22:33,039 --> 00:22:36,240
for the demo part let's now jump back to

00:22:34,960 --> 00:22:37,679
the slides and talk about

00:22:36,240 --> 00:22:41,280
talk about how other people have used

00:22:37,679 --> 00:22:44,880
the input x

00:22:41,280 --> 00:22:45,440
okay so what else can you do with input

00:22:44,880 --> 00:22:47,200
x

00:22:45,440 --> 00:22:48,880
with import hooks you get full control

00:22:47,200 --> 00:22:51,280
after what happens when you

00:22:48,880 --> 00:22:52,400
do import x or any import statement

00:22:51,280 --> 00:22:55,440
right you can

00:22:52,400 --> 00:22:58,480
import from ftp https or

00:22:55,440 --> 00:23:00,400
any other like s3 bucket anywhere

00:22:58,480 --> 00:23:02,480
you can import from anywhere and you can

00:23:00,400 --> 00:23:05,520
put your own authorization checks

00:23:02,480 --> 00:23:08,159
um and you can not just dot pi and

00:23:05,520 --> 00:23:10,960
bytecode python files you can import

00:23:08,159 --> 00:23:14,960
from a variety of storage like json csv

00:23:10,960 --> 00:23:16,880
go wild okay so how have people used

00:23:14,960 --> 00:23:18,480
important so far so the first one is a

00:23:16,880 --> 00:23:22,640
library which

00:23:18,480 --> 00:23:24,240
parses json like a python module right

00:23:22,640 --> 00:23:27,360
if you have a file called

00:23:24,240 --> 00:23:29,600
uh some name dot json and you try to

00:23:27,360 --> 00:23:32,640
import name.json in your python file

00:23:29,600 --> 00:23:36,080
if the simple hook is installed

00:23:32,640 --> 00:23:38,000
then you can get a variable for the json

00:23:36,080 --> 00:23:39,760
you don't have to pass it manually so

00:23:38,000 --> 00:23:40,480
this gets useful when you have faulty

00:23:39,760 --> 00:23:42,480
data sets

00:23:40,480 --> 00:23:43,679
you're using within your organization

00:23:42,480 --> 00:23:46,880
and um

00:23:43,679 --> 00:23:48,480
you don't want to parse or make a parser

00:23:46,880 --> 00:23:50,000
in application code so you just

00:23:48,480 --> 00:23:52,480
distribute the input hooks

00:23:50,000 --> 00:23:53,520
and every time someone imports the

00:23:52,480 --> 00:23:55,760
faulty data or

00:23:53,520 --> 00:23:57,039
tries to use the faulty data the parsing

00:23:55,760 --> 00:23:59,279
the filtering cleaning everything

00:23:57,039 --> 00:24:00,960
happens in the importer itself

00:23:59,279 --> 00:24:02,960
right and okay so this is the second

00:24:00,960 --> 00:24:05,279
example is how uh

00:24:02,960 --> 00:24:07,360
this repository helps import from

00:24:05,279 --> 00:24:09,840
github.com it's not recommended because

00:24:07,360 --> 00:24:11,760
there'll be dependencies involved and

00:24:09,840 --> 00:24:13,520
your importer has to be wise enough to

00:24:11,760 --> 00:24:15,520
resolve those dependencies

00:24:13,520 --> 00:24:17,120
right and the third one is a repository

00:24:15,520 --> 00:24:20,559
which helps

00:24:17,120 --> 00:24:23,360
importing from just files in github

00:24:20,559 --> 00:24:23,840
and then ipython notebooks from anywhere

00:24:23,360 --> 00:24:27,200
and

00:24:23,840 --> 00:24:29,279
yeah utility functions like that okay so

00:24:27,200 --> 00:24:31,200
this is something cool which i found

00:24:29,279 --> 00:24:32,480
you can try this on your own as well as

00:24:31,200 --> 00:24:34,720
in by yourself

00:24:32,480 --> 00:24:36,400
so yeah if you have your virtual

00:24:34,720 --> 00:24:37,600
environment disabled and you try to lock

00:24:36,400 --> 00:24:40,080
this dot metapath

00:24:37,600 --> 00:24:40,960
you get some default finders right like

00:24:40,080 --> 00:24:43,279
built-in

00:24:40,960 --> 00:24:44,799
importer frozen importer etc but if you

00:24:43,279 --> 00:24:46,559
have your virtual environment

00:24:44,799 --> 00:24:48,480
enabled then you see your virtual

00:24:46,559 --> 00:24:49,760
environments finder at index 0 of

00:24:48,480 --> 00:24:52,000
sys.metapath

00:24:49,760 --> 00:24:52,960
so what's going on is when you do pip

00:24:52,000 --> 00:24:55,679
install something

00:24:52,960 --> 00:24:56,320
with virtual environment enabled then it

00:24:55,679 --> 00:24:58,240
installs

00:24:56,320 --> 00:25:00,080
the module in site packages in the

00:24:58,240 --> 00:25:02,159
virtual environment directory right

00:25:00,080 --> 00:25:03,840
and it doesn't go all the way up to your

00:25:02,159 --> 00:25:06,240
root site packages

00:25:03,840 --> 00:25:08,400
and installs there it doesn't do that so

00:25:06,240 --> 00:25:10,240
this finder object tries to find

00:25:08,400 --> 00:25:12,320
these packages in local site packages

00:25:10,240 --> 00:25:14,400
directory if it can find it

00:25:12,320 --> 00:25:15,520
then it will return it it it doesn't go

00:25:14,400 --> 00:25:18,159
all the way up to your

00:25:15,520 --> 00:25:20,480
root side packages and yeah that's how

00:25:18,159 --> 00:25:23,440
it makes your system safe

00:25:20,480 --> 00:25:25,200
okay that's almost all which i had and

00:25:23,440 --> 00:25:27,120
you can ask me questions as well

00:25:25,200 --> 00:25:28,400
and thanks for attending the talk i hope

00:25:27,120 --> 00:25:30,159
you have a great day

00:25:28,400 --> 00:25:31,600
and if you have any more questions even

00:25:30,159 --> 00:25:33,120
after this session then you can get my

00:25:31,600 --> 00:25:43,840
contact on my website

00:25:33,120 --> 00:25:43,840
and get in touch with me so okay thanks

00:25:45,679 --> 00:25:47,760

YouTube URL: https://www.youtube.com/watch?v=WrWxThyEl9Y


