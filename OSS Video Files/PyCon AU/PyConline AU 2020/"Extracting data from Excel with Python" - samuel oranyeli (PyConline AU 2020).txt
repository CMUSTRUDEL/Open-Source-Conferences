Title: "Extracting data from Excel with Python" - samuel oranyeli (PyConline AU 2020)
Publication date: 2020-09-06
Playlist: PyConline AU 2020
Description: 
	samuel oranyeli

https://2020.pycon.org.au/program/FAEAH3

How do you read data from Excel? How do you read data that has meaningful formats(rows or cells are colour coded)? Or pivot tables that need to be in tidy format? Or data with hierarchical formatting ? This talk will show how to use Pandas, Openpyxl, and some other make-life-easy tools to extract data from Excel into Python in a tidy form and proceed to the next phase of our data analysis.

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

Python, PyCon, PyConAU, PyConline

Fri Sep  4 13:20:00 2020 at Curlyboi
Captions: 
	00:00:01,839 --> 00:00:05,520
hello everyone

00:00:03,280 --> 00:00:07,200
welcome back to the science data and

00:00:05,520 --> 00:00:10,240
analytics stream

00:00:07,200 --> 00:00:11,360
i'm looking forward to our next talk uh

00:00:10,240 --> 00:00:15,120
that we have

00:00:11,360 --> 00:00:17,840
lined up and that is from samuel

00:00:15,120 --> 00:00:19,520
originally samuel's going to talk to us

00:00:17,840 --> 00:00:22,720
about extracting data from

00:00:19,520 --> 00:00:24,000
excel with python uh a topic i'm super

00:00:22,720 --> 00:00:25,760
interested to hear about there's

00:00:24,000 --> 00:00:27,359
heaps of data out there in excel as i

00:00:25,760 --> 00:00:30,400
think we all understand

00:00:27,359 --> 00:00:32,239
samwell loves to spend uh loves

00:00:30,400 --> 00:00:34,480
love speed and anything that can speed

00:00:32,239 --> 00:00:36,160
up his data analysis and automation

00:00:34,480 --> 00:00:38,079
uh he's a contributor to the project's

00:00:36,160 --> 00:00:38,800
pie janitor and pie data tables

00:00:38,079 --> 00:00:40,719
libraries

00:00:38,800 --> 00:00:42,320
he's a tennis lover and he has a wicked

00:00:40,719 --> 00:00:46,879
forehand so

00:00:42,320 --> 00:00:49,840
uh take it away samuel thank you

00:00:46,879 --> 00:00:52,079
hi everyone thanks for making all the

00:00:49,840 --> 00:00:53,680
time for this presentation

00:00:52,079 --> 00:00:57,360
we'll just go straight to it it's about

00:00:53,680 --> 00:01:00,480
extracting data from excel using python

00:00:57,360 --> 00:01:02,719
excel is everywhere you find it in the

00:01:00,480 --> 00:01:05,920
business circles you find it in

00:01:02,719 --> 00:01:08,320
tech circles as well there are

00:01:05,920 --> 00:01:10,000
situations where you need to get data

00:01:08,320 --> 00:01:12,320
probably you're building a pipeline

00:01:10,000 --> 00:01:14,159
and you need to get one of your file

00:01:12,320 --> 00:01:16,320
sources is an excel file

00:01:14,159 --> 00:01:18,320
or you're doing data analysis and your

00:01:16,320 --> 00:01:20,640
data is not an excel file

00:01:18,320 --> 00:01:21,759
or you just need to do some automation

00:01:20,640 --> 00:01:24,240
either way

00:01:21,759 --> 00:01:25,280
you have to be familiar with excel and

00:01:24,240 --> 00:01:28,400
be able to use it

00:01:25,280 --> 00:01:29,759
with python python offers a bunch of

00:01:28,400 --> 00:01:31,840
tools that can help

00:01:29,759 --> 00:01:34,720
make that processing quite easy so let's

00:01:31,840 --> 00:01:37,119
just jump into it

00:01:34,720 --> 00:01:38,720
uh as i've been introduced earlier on i

00:01:37,119 --> 00:01:42,640
love open source projects

00:01:38,720 --> 00:01:44,479
i have a blog and i love tennis a lot

00:01:42,640 --> 00:01:46,240
so these are the contents we'll be

00:01:44,479 --> 00:01:48,320
dealing with the basics

00:01:46,240 --> 00:01:50,079
how to read in your excel files plainly

00:01:48,320 --> 00:01:51,920
and then we'll have a look at

00:01:50,079 --> 00:01:54,479
the topics that are a little more

00:01:51,920 --> 00:01:58,320
involved your pivot tables excel tables

00:01:54,479 --> 00:02:00,719
and will end with small multiples

00:01:58,320 --> 00:02:02,719
these are the packages that we will be

00:02:00,719 --> 00:02:04,880
using in the addition to what we have

00:02:02,719 --> 00:02:06,880
from python so we have pandas

00:02:04,880 --> 00:02:08,720
when it comes to tabular data it's your

00:02:06,880 --> 00:02:12,000
go to package

00:02:08,720 --> 00:02:13,440
numpy is what you you it's provides you

00:02:12,000 --> 00:02:15,360
that's

00:02:13,440 --> 00:02:16,480
faster ability to do numerical

00:02:15,360 --> 00:02:18,720
transformations

00:02:16,480 --> 00:02:19,520
openpower excel helps with reading excel

00:02:18,720 --> 00:02:22,080
files

00:02:19,520 --> 00:02:24,480
it's the beauty of openpower excel is it

00:02:22,080 --> 00:02:26,640
allows you to access the cell metadata

00:02:24,480 --> 00:02:27,680
and we'll see some examples of that

00:02:26,640 --> 00:02:30,000
pygenito

00:02:27,680 --> 00:02:32,160
helps to clean it's a genital it does

00:02:30,000 --> 00:02:33,360
cleaning and it provides the method

00:02:32,160 --> 00:02:36,400
chaining ability

00:02:33,360 --> 00:02:37,760
we'll see some of its uses as well so

00:02:36,400 --> 00:02:40,160
first things first we import our

00:02:37,760 --> 00:02:43,280
libraries and

00:02:40,160 --> 00:02:45,599
we start with the basics so let's say i

00:02:43,280 --> 00:02:47,599
want to read from a single sheets

00:02:45,599 --> 00:02:48,959
this is how you can read it just pass in

00:02:47,599 --> 00:02:50,959
your file name

00:02:48,959 --> 00:02:52,080
pass in the shit's name or if you're not

00:02:50,959 --> 00:02:55,280
passing any name

00:02:52,080 --> 00:02:57,760
pandas will read the very first

00:02:55,280 --> 00:02:59,920
in that file if you're reading from

00:02:57,760 --> 00:03:03,280
multiple sheets

00:02:59,920 --> 00:03:05,519
you can do that with pandas it will read

00:03:03,280 --> 00:03:07,360
the names for you in a dictionary

00:03:05,519 --> 00:03:08,159
so you can pass in the positions of the

00:03:07,360 --> 00:03:10,319
sheets

00:03:08,159 --> 00:03:11,360
or the sheet names if you want to read

00:03:10,319 --> 00:03:13,280
in all the sheets

00:03:11,360 --> 00:03:16,080
all you just have to do is pass none to

00:03:13,280 --> 00:03:19,440
the sheet name arguments

00:03:16,080 --> 00:03:21,840
and let's say you have your data at

00:03:19,440 --> 00:03:24,000
locations that are different from say a1

00:03:21,840 --> 00:03:26,159
or they're not on the first row or some

00:03:24,000 --> 00:03:28,000
other location that you're used to

00:03:26,159 --> 00:03:30,959
pandas gives you

00:03:28,000 --> 00:03:32,879
that ability to read the exact position

00:03:30,959 --> 00:03:33,599
so you can use the use columns argument

00:03:32,879 --> 00:03:35,840
and say

00:03:33,599 --> 00:03:37,360
within column c and e let's say we're

00:03:35,840 --> 00:03:38,319
trying to read this particular data here

00:03:37,360 --> 00:03:42,000
from column c

00:03:38,319 --> 00:03:44,799
and e skip the first line and

00:03:42,000 --> 00:03:46,159
read just this number of rows so pandas

00:03:44,799 --> 00:03:48,480
knows how to do that

00:03:46,159 --> 00:03:49,519
and get you the value you need never

00:03:48,480 --> 00:03:52,560
forget the

00:03:49,519 --> 00:03:55,040
pandas on python is a zero-based index

00:03:52,560 --> 00:03:55,040
language

00:03:55,680 --> 00:03:58,959
so let's continue if you want to read in

00:03:58,239 --> 00:04:00,239
let's

00:03:58,959 --> 00:04:02,080
take it a bit further let's say you want

00:04:00,239 --> 00:04:03,120
to read in all the excel files in a

00:04:02,080 --> 00:04:06,080
folder

00:04:03,120 --> 00:04:07,200
that folder has just excel files you can

00:04:06,080 --> 00:04:10,239
use the part

00:04:07,200 --> 00:04:13,040
library and read in your data

00:04:10,239 --> 00:04:14,159
if you can even read it as a dictionary

00:04:13,040 --> 00:04:16,320
that's way

00:04:14,159 --> 00:04:17,759
the name of the sheets becomes the key

00:04:16,320 --> 00:04:19,919
of your dictionary and then the data

00:04:17,759 --> 00:04:22,960
frame becomes the values

00:04:19,919 --> 00:04:25,600
if however your folder is a mixture of

00:04:22,960 --> 00:04:26,560
files you can also use the patlib

00:04:25,600 --> 00:04:29,199
library

00:04:26,560 --> 00:04:30,560
and use the r glob to filter just for

00:04:29,199 --> 00:04:32,240
excel files only

00:04:30,560 --> 00:04:33,919
if you look at this you can see that we

00:04:32,240 --> 00:04:36,080
have capital letters in terms of the

00:04:33,919 --> 00:04:38,160
xlsx we have the xls

00:04:36,080 --> 00:04:39,360
and we have the small letters you can

00:04:38,160 --> 00:04:41,120
just write

00:04:39,360 --> 00:04:42,560
this is a filter pattern that gets you

00:04:41,120 --> 00:04:42,960
what you want and then you can read it

00:04:42,560 --> 00:04:46,639
in

00:04:42,960 --> 00:04:49,280
again as a dictionary all right

00:04:46,639 --> 00:04:52,080
we've gone with the basics let's look at

00:04:49,280 --> 00:04:55,199
things that are a bit more involved

00:04:52,080 --> 00:04:58,320
pivot table with multiple headers one of

00:04:55,199 --> 00:05:00,320
this i'd say excel is the very first

00:04:58,320 --> 00:05:03,120
place i came across pivot tables

00:05:00,320 --> 00:05:04,080
it's used extensively and it helps to

00:05:03,120 --> 00:05:06,400
visually present

00:05:04,080 --> 00:05:07,440
data however when you want to work with

00:05:06,400 --> 00:05:09,680
data

00:05:07,440 --> 00:05:11,120
or do data analysis there are times when

00:05:09,680 --> 00:05:13,199
you need to move out from the pivot

00:05:11,120 --> 00:05:14,960
table format to your title format or

00:05:13,199 --> 00:05:16,800
your long format where each

00:05:14,960 --> 00:05:19,199
column represents an information and

00:05:16,800 --> 00:05:21,440
each row represents a record

00:05:19,199 --> 00:05:22,720
so when we look at this pivot table the

00:05:21,440 --> 00:05:25,120
very first thing you can notice here is

00:05:22,720 --> 00:05:26,800
we have this empty space here

00:05:25,120 --> 00:05:28,560
which is nice it gives us a clear

00:05:26,800 --> 00:05:31,520
formatting but is useless

00:05:28,560 --> 00:05:33,360
when you're doing your data analysis at

00:05:31,520 --> 00:05:35,680
the top here we can tell that

00:05:33,360 --> 00:05:36,560
this relates to children and adults

00:05:35,680 --> 00:05:40,000
survivors

00:05:36,560 --> 00:05:40,800
uh no and yes so we can say in the first

00:05:40,000 --> 00:05:43,919
class

00:05:40,800 --> 00:05:43,919
where the sex was male

00:05:44,160 --> 00:05:47,600
no child was lost five children were

00:05:46,560 --> 00:05:51,440
saved

00:05:47,600 --> 00:05:52,160
118 adults did not survive and 57 adults

00:05:51,440 --> 00:05:55,280
survived

00:05:52,160 --> 00:05:57,680
this is taken from the titanic data

00:05:55,280 --> 00:05:59,600
now the next our job here is to convert

00:05:57,680 --> 00:06:00,479
this into something tidy something

00:05:59,600 --> 00:06:02,639
usable

00:06:00,479 --> 00:06:04,960
for our in case you want to you do some

00:06:02,639 --> 00:06:07,360
data analysis going forward

00:06:04,960 --> 00:06:08,319
so if we read it and pandas like we did

00:06:07,360 --> 00:06:10,560
with the other ones

00:06:08,319 --> 00:06:12,880
this is what it gives us which is untidy

00:06:10,560 --> 00:06:16,319
it's not helpful to us

00:06:12,880 --> 00:06:20,000
we can do a bit better one of the

00:06:16,319 --> 00:06:22,400
one of the things that pandas offers is

00:06:20,000 --> 00:06:24,240
multi-indexes so with the multi-index

00:06:22,400 --> 00:06:28,000
you can read in multiple columns

00:06:24,240 --> 00:06:30,160
as your headers and as your row indexes

00:06:28,000 --> 00:06:31,919
and this is what it looks like just pass

00:06:30,160 --> 00:06:34,240
in your headers zero one index

00:06:31,919 --> 00:06:35,199
zero one and you can see we have our age

00:06:34,240 --> 00:06:38,240
and

00:06:35,199 --> 00:06:41,520
survived class and 6 as

00:06:38,240 --> 00:06:42,560
indexes and columns the next thing we

00:06:41,520 --> 00:06:45,840
need to do is

00:06:42,560 --> 00:06:47,759
give our indexes relevant names so we

00:06:45,840 --> 00:06:49,520
know that the very first column is just

00:06:47,759 --> 00:06:52,080
for the adult and child

00:06:49,520 --> 00:06:53,919
and the next column is for survived

00:06:52,080 --> 00:06:56,479
class and sex is pretty clear so we

00:06:53,919 --> 00:06:58,720
don't need to bother about that

00:06:56,479 --> 00:06:59,759
the next thing we need to do is get rid

00:06:58,720 --> 00:07:02,160
of that none

00:06:59,759 --> 00:07:03,680
it's of no help to us thankfully we

00:07:02,160 --> 00:07:05,599
don't have to do any calculations

00:07:03,680 --> 00:07:07,440
so we with the noun so we can just get

00:07:05,599 --> 00:07:09,360
rid of it safely

00:07:07,440 --> 00:07:10,800
when we drop it the next thing we need

00:07:09,360 --> 00:07:12,880
to do is stuck it

00:07:10,800 --> 00:07:14,319
so if you look at that stack you can see

00:07:12,880 --> 00:07:16,960
we now have a sort of

00:07:14,319 --> 00:07:19,039
clear idea you can read it from left to

00:07:16,960 --> 00:07:21,919
right and you can say

00:07:19,039 --> 00:07:22,960
second class when it comes to the female

00:07:21,919 --> 00:07:24,880
you have

00:07:22,960 --> 00:07:27,280
the number of adults that survived with

00:07:24,880 --> 00:07:28,319
that survived were 80 whereas the number

00:07:27,280 --> 00:07:30,960
that did not survive

00:07:28,319 --> 00:07:32,080
was 13. it's clear there are no nulls in

00:07:30,960 --> 00:07:33,919
between

00:07:32,080 --> 00:07:37,360
and you can easily read it from left to

00:07:33,919 --> 00:07:39,680
right so we've gotten a tidy data format

00:07:37,360 --> 00:07:40,880
to an extent and all we just have to do

00:07:39,680 --> 00:07:43,280
is give it

00:07:40,880 --> 00:07:45,039
a name just give the numbers column a

00:07:43,280 --> 00:07:47,680
name and we're good to go

00:07:45,039 --> 00:07:48,560
so from that format on your left and

00:07:47,680 --> 00:07:51,759
before

00:07:48,560 --> 00:07:53,599
we moved on to a pretty clear

00:07:51,759 --> 00:07:55,479
information on the rights

00:07:53,599 --> 00:07:57,120
with this on the right you can do

00:07:55,479 --> 00:07:59,599
aggregations you can

00:07:57,120 --> 00:08:02,160
filter out you can do a whole lot of

00:07:59,599 --> 00:08:06,400
data analysis over there

00:08:02,160 --> 00:08:08,479
the next step is to look at excel tables

00:08:06,400 --> 00:08:10,560
excel tables are a feature in excel

00:08:08,479 --> 00:08:10,960
that's and that sounds like tautology

00:08:10,560 --> 00:08:13,360
but

00:08:10,960 --> 00:08:14,400
it's a feature in excel that allows you

00:08:13,360 --> 00:08:18,160
to

00:08:14,400 --> 00:08:20,319
give your specific sections of your data

00:08:18,160 --> 00:08:22,479
names and features so if you look at

00:08:20,319 --> 00:08:25,280
this particular section here

00:08:22,479 --> 00:08:26,960
it has a name it has a name age and

00:08:25,280 --> 00:08:28,080
height columns it's clear it has

00:08:26,960 --> 00:08:29,919
boundaries

00:08:28,080 --> 00:08:31,840
if you're in excel you could click on

00:08:29,919 --> 00:08:33,360
the drop down button and you could make

00:08:31,840 --> 00:08:36,159
some selections

00:08:33,360 --> 00:08:36,560
now if we're working with excuse me

00:08:36,159 --> 00:08:39,200
there

00:08:36,560 --> 00:08:40,880
if we're working with pandas it is not

00:08:39,200 --> 00:08:42,240
aware of tables it just reads in the

00:08:40,880 --> 00:08:44,959
data bubble team

00:08:42,240 --> 00:08:45,839
however we can use openpower excel which

00:08:44,959 --> 00:08:48,240
is one of the

00:08:45,839 --> 00:08:49,440
third party packages to read in the data

00:08:48,240 --> 00:08:52,000
what openpixel

00:08:49,440 --> 00:08:53,600
does is allow us to access the tables

00:08:52,000 --> 00:08:55,279
method in a dictionary

00:08:53,600 --> 00:08:57,120
so the first thing you do with openpower

00:08:55,279 --> 00:08:59,600
excel is you load the workbook

00:08:57,120 --> 00:09:00,320
you access the specific sheets and if

00:08:59,600 --> 00:09:04,480
you

00:09:00,320 --> 00:09:06,880
couriers you could see that the tables

00:09:04,480 --> 00:09:09,040
have the keys as the table names while

00:09:06,880 --> 00:09:11,680
the values are appended to them

00:09:09,040 --> 00:09:13,279
so if we pick into one of the tables or

00:09:11,680 --> 00:09:16,000
one of the values on the tables

00:09:13,279 --> 00:09:18,080
we can see that this is for the ninja

00:09:16,000 --> 00:09:21,360
the name of the table is called niger

00:09:18,080 --> 00:09:22,320
and this is where your data is located

00:09:21,360 --> 00:09:25,360
between a1

00:09:22,320 --> 00:09:26,080
and c4 so our goal here is to hit every

00:09:25,360 --> 00:09:27,839
section

00:09:26,080 --> 00:09:30,399
in the table and pull out the reference

00:09:27,839 --> 00:09:34,080
detail which is what this particular

00:09:30,399 --> 00:09:35,920
code snippet does and we can read it in

00:09:34,080 --> 00:09:38,320
as a dictionary and if we are so

00:09:35,920 --> 00:09:39,600
inclined we can combine everything into

00:09:38,320 --> 00:09:42,160
one table

00:09:39,600 --> 00:09:44,160
so what we've got from this section here

00:09:42,160 --> 00:09:46,240
we've gotten it into a tidy form and we

00:09:44,160 --> 00:09:50,000
can do our data analysis or whatever

00:09:46,240 --> 00:09:52,560
else we have in mind to do with it

00:09:50,000 --> 00:09:53,760
next one which i believe lots of folks

00:09:52,560 --> 00:09:57,120
are pretty familiar with

00:09:53,760 --> 00:09:59,279
is conditional formatting you

00:09:57,120 --> 00:10:00,959
the formatting could have some context

00:09:59,279 --> 00:10:04,160
or some specific information

00:10:00,959 --> 00:10:06,240
or meaning the yellow could mean it's

00:10:04,160 --> 00:10:08,399
suspect let's investigate further

00:10:06,240 --> 00:10:09,920
what the grain could mean approved go

00:10:08,399 --> 00:10:12,079
ahead either way

00:10:09,920 --> 00:10:13,920
that color has some information with it

00:10:12,079 --> 00:10:16,320
and it needs to be captured

00:10:13,920 --> 00:10:17,680
pandas wants natively captured that

00:10:16,320 --> 00:10:20,079
detail for you

00:10:17,680 --> 00:10:20,880
however open pi excel can help you with

00:10:20,079 --> 00:10:23,040
that

00:10:20,880 --> 00:10:24,399
so let's jump into openpower excel for

00:10:23,040 --> 00:10:26,320
that

00:10:24,399 --> 00:10:28,640
again we load the workbook we read the

00:10:26,320 --> 00:10:32,160
specific watch um worksheets

00:10:28,640 --> 00:10:34,160
and then we iterate through the data

00:10:32,160 --> 00:10:35,600
now we know that the color information

00:10:34,160 --> 00:10:39,760
is associated with a number

00:10:35,600 --> 00:10:42,880
so the trick is to keep the color value

00:10:39,760 --> 00:10:46,240
next to the cell value there are

00:10:42,880 --> 00:10:48,160
extra x a decimal digit so if you look

00:10:46,240 --> 00:10:49,600
at the results here we can see that we

00:10:48,160 --> 00:10:52,640
have your number 65

00:10:49,600 --> 00:10:53,200
and then you have lots of zeros here if

00:10:52,640 --> 00:10:56,320
there

00:10:53,200 --> 00:10:58,480
is just all zeros the color is white

00:10:56,320 --> 00:10:59,440
if not then there's certainly some other

00:10:58,480 --> 00:11:01,680
color

00:10:59,440 --> 00:11:02,959
all right so we've gotten that from

00:11:01,680 --> 00:11:05,200
obama excel

00:11:02,959 --> 00:11:06,160
now we can read it into a pandas data

00:11:05,200 --> 00:11:08,480
frame

00:11:06,160 --> 00:11:10,480
we can this is one of the first features

00:11:08,480 --> 00:11:14,079
of pyjanito wrote to names

00:11:10,480 --> 00:11:18,240
so it promotes the name age height

00:11:14,079 --> 00:11:20,160
from within the data as a header row

00:11:18,240 --> 00:11:22,640
the next thing is to set up as an index

00:11:20,160 --> 00:11:25,680
because my game plan is to stack

00:11:22,640 --> 00:11:26,320
our data agent heights so that i can

00:11:25,680 --> 00:11:30,160
pull out

00:11:26,320 --> 00:11:33,680
the numbers away from the colors

00:11:30,160 --> 00:11:36,560
we stack it and we can split

00:11:33,680 --> 00:11:37,360
give it a name and we've come to a tidy

00:11:36,560 --> 00:11:39,839
format

00:11:37,360 --> 00:11:40,720
so we're not just reading the data we

00:11:39,839 --> 00:11:43,519
captured

00:11:40,720 --> 00:11:44,800
the cell metadata as well it might be

00:11:43,519 --> 00:11:47,040
useful when you're doing your data

00:11:44,800 --> 00:11:49,839
analysis you know you can say

00:11:47,040 --> 00:11:51,519
poseidon has a yellow color no i think

00:11:49,839 --> 00:11:54,720
we should investigate further

00:11:51,519 --> 00:11:57,680
athena has a green color

00:11:54,720 --> 00:11:59,920
she's good even though the age is 1.4

00:11:57,680 --> 00:12:02,240
the height is 1.4

00:11:59,920 --> 00:12:03,120
but either ways you've got in the cell

00:12:02,240 --> 00:12:06,399
metadata

00:12:03,120 --> 00:12:09,760
so we have a before and we have an after

00:12:06,399 --> 00:12:11,440
all right one more reading data with

00:12:09,760 --> 00:12:13,600
embedded comments

00:12:11,440 --> 00:12:15,680
again if you've dealt with excel you

00:12:13,600 --> 00:12:16,320
must you probably would have come across

00:12:15,680 --> 00:12:18,800
this

00:12:16,320 --> 00:12:20,480
for some reason the comments were not

00:12:18,800 --> 00:12:23,600
put on the side they were put

00:12:20,480 --> 00:12:24,959
inside the cell pandas can't get you the

00:12:23,600 --> 00:12:28,000
details

00:12:24,959 --> 00:12:28,639
but open power excel can so if you go

00:12:28,000 --> 00:12:31,360
again

00:12:28,639 --> 00:12:32,959
again the same workflow it's a hierarchy

00:12:31,360 --> 00:12:35,200
you load the workbook

00:12:32,959 --> 00:12:38,560
you access the specific sheets and

00:12:35,200 --> 00:12:40,639
hearing we use the default dict

00:12:38,560 --> 00:12:42,880
because we need to capture them as an

00:12:40,639 --> 00:12:45,440
array and append them to the key

00:12:42,880 --> 00:12:46,720
so we iterate we'll look for the cells

00:12:45,440 --> 00:12:47,839
that have a comments

00:12:46,720 --> 00:12:50,399
we'll put them in the comments

00:12:47,839 --> 00:12:52,560
dictionary and we're putting all the

00:12:50,399 --> 00:12:54,320
values into the data dictionary

00:12:52,560 --> 00:12:56,880
as you can see this is our information

00:12:54,320 --> 00:12:58,639
for the data and this is our information

00:12:56,880 --> 00:13:01,200
for the comments

00:12:58,639 --> 00:13:03,360
the data for each of them this is row

00:13:01,200 --> 00:13:05,120
one row two row three row four that is

00:13:03,360 --> 00:13:07,200
how i capture the data

00:13:05,120 --> 00:13:08,240
and we can move further and then combine

00:13:07,200 --> 00:13:10,880
all the information

00:13:08,240 --> 00:13:13,040
as one dictionary having them in one

00:13:10,880 --> 00:13:14,800
dictionary now we can put them into

00:13:13,040 --> 00:13:16,320
pandas

00:13:14,800 --> 00:13:18,000
if you have a look at this again you can

00:13:16,320 --> 00:13:20,560
see we have name age

00:13:18,000 --> 00:13:22,639
heights and none it would be nice for us

00:13:20,560 --> 00:13:25,440
to move the name age heights

00:13:22,639 --> 00:13:25,920
into the columns names however we need

00:13:25,440 --> 00:13:28,000
to

00:13:25,920 --> 00:13:29,839
give this particular node something more

00:13:28,000 --> 00:13:31,279
meaningful and that is where we're

00:13:29,839 --> 00:13:33,600
coming with the comments

00:13:31,279 --> 00:13:34,720
filename is a function in pandas you

00:13:33,600 --> 00:13:38,000
limit it to one

00:13:34,720 --> 00:13:39,680
so just the first non is filled and now

00:13:38,000 --> 00:13:40,079
we can use the pi generator function

00:13:39,680 --> 00:13:43,519
wrote

00:13:40,079 --> 00:13:47,040
names and here we go

00:13:43,519 --> 00:13:49,920
so from before we've now gotten again

00:13:47,040 --> 00:13:50,639
uh cell metadata information in there so

00:13:49,920 --> 00:13:54,079
we know

00:13:50,639 --> 00:13:56,680
ragna is a medieval warlord well

00:13:54,079 --> 00:13:57,760
netflix helped me with that i think and

00:13:56,680 --> 00:14:00,639
[Music]

00:13:57,760 --> 00:14:03,040
okay not so sure about the age so

00:14:00,639 --> 00:14:06,079
probably should be older than 400

00:14:03,040 --> 00:14:08,000
but those uh information that's

00:14:06,079 --> 00:14:09,839
will help when you're doing your

00:14:08,000 --> 00:14:12,880
analysis

00:14:09,839 --> 00:14:15,680
and finally we get to the last one

00:14:12,880 --> 00:14:17,120
this is what we call small multiples

00:14:15,680 --> 00:14:19,199
some of us might be familiar with this

00:14:17,120 --> 00:14:20,880
this is data from enron

00:14:19,199 --> 00:14:22,560
the famous enron that went to belly

00:14:20,880 --> 00:14:24,959
under

00:14:22,560 --> 00:14:25,920
if you look at it we have a total of 10

00:14:24,959 --> 00:14:29,519
tables

00:14:25,920 --> 00:14:30,800
if cig rocky mountains if nwpl canadian

00:14:29,519 --> 00:14:33,120
border

00:14:30,800 --> 00:14:34,320
this what we're interested in here we're

00:14:33,120 --> 00:14:36,240
not interested in the charts we're not

00:14:34,320 --> 00:14:38,160
interested in information over here

00:14:36,240 --> 00:14:41,760
we just want to pull out all the time

00:14:38,160 --> 00:14:44,800
tables and aggregate them into one

00:14:41,760 --> 00:14:47,120
now in excel you could use your mouse

00:14:44,800 --> 00:14:48,000
highlights each of the tables copy and

00:14:47,120 --> 00:14:50,800
paste

00:14:48,000 --> 00:14:52,639
fine easy what about if you had more

00:14:50,800 --> 00:14:56,399
than one sheets that was like this

00:14:52,639 --> 00:14:57,680
or 10 or say 100 now that's monotonous

00:14:56,399 --> 00:14:58,560
you probably wouldn't want to do that

00:14:57,680 --> 00:15:01,199
with the mouse

00:14:58,560 --> 00:15:02,320
and clicks but with python you could

00:15:01,199 --> 00:15:04,000
pull that off

00:15:02,320 --> 00:15:05,920
let's see how we'll do that in python

00:15:04,000 --> 00:15:09,040
and with

00:15:05,920 --> 00:15:12,240
minimal number of lines so this

00:15:09,040 --> 00:15:14,560
is let's just focus on this this is

00:15:12,240 --> 00:15:16,480
what we want to pull out now the trick

00:15:14,560 --> 00:15:17,519
here is to realize that each table has

00:15:16,480 --> 00:15:19,680
four columns so

00:15:17,519 --> 00:15:21,120
and each of the tape each of the columns

00:15:19,680 --> 00:15:24,320
are linked with a bead

00:15:21,120 --> 00:15:26,480
and offer characters so if we can find a

00:15:24,320 --> 00:15:27,360
way to find where the bead and the offer

00:15:26,480 --> 00:15:31,519
are located

00:15:27,360 --> 00:15:34,720
horizontally and vertically we can then

00:15:31,519 --> 00:15:36,079
pull out our data from that again each

00:15:34,720 --> 00:15:39,680
table has roughly

00:15:36,079 --> 00:15:43,040
about 10 rows so you have two above

00:15:39,680 --> 00:15:46,880
the beat and eight lines below the bead

00:15:43,040 --> 00:15:49,279
so we we can manipulate our extraction

00:15:46,880 --> 00:15:51,199
open pi excel will help us with that so

00:15:49,279 --> 00:15:54,079
we create

00:15:51,199 --> 00:15:55,279
a variable a row a rows variable on a

00:15:54,079 --> 00:15:58,079
columns variable

00:15:55,279 --> 00:15:58,959
again load the workbook read specific

00:15:58,079 --> 00:16:01,279
sheets

00:15:58,959 --> 00:16:02,320
iterates and this is where your check

00:16:01,279 --> 00:16:04,160
comes in

00:16:02,320 --> 00:16:06,160
you look for cells that have a bid and

00:16:04,160 --> 00:16:09,040
offer and then you can get your rows

00:16:06,160 --> 00:16:10,160
and your columns now these are sets

00:16:09,040 --> 00:16:12,320
luckily it looks

00:16:10,160 --> 00:16:13,519
ordered here other times it might not be

00:16:12,320 --> 00:16:15,920
so ordered

00:16:13,519 --> 00:16:16,720
so this is how the data will look like

00:16:15,920 --> 00:16:18,320
remember

00:16:16,720 --> 00:16:19,920
it's written through the entire

00:16:18,320 --> 00:16:22,880
spreadsheet so

00:16:19,920 --> 00:16:24,399
you will get lots of nons in there which

00:16:22,880 --> 00:16:26,079
is fine we'll get rid of them as we

00:16:24,399 --> 00:16:29,680
proceed

00:16:26,079 --> 00:16:31,759
the next step is to fix our rows

00:16:29,680 --> 00:16:33,680
so we create a rangeless corporation

00:16:31,759 --> 00:16:34,720
that gives us a range of where we feel

00:16:33,680 --> 00:16:36,320
the data should be

00:16:34,720 --> 00:16:39,120
and this is where we get our ranges 14

00:16:36,320 --> 00:16:41,279
to 25 25 and 36 and on

00:16:39,120 --> 00:16:42,639
the same thing goes for the columns

00:16:41,279 --> 00:16:45,120
remember the columns

00:16:42,639 --> 00:16:47,199
are four per table so we need to

00:16:45,120 --> 00:16:48,639
manipulate it such that we can get four

00:16:47,199 --> 00:16:51,440
columns per table

00:16:48,639 --> 00:16:52,320
and this is where this iteration comes

00:16:51,440 --> 00:16:54,720
into play

00:16:52,320 --> 00:16:55,519
so we have our rows and our columns the

00:16:54,720 --> 00:16:58,720
next thing

00:16:55,519 --> 00:17:02,160
is to get a cross join between the

00:16:58,720 --> 00:17:05,120
data the rows and the columns and then

00:17:02,160 --> 00:17:06,319
use the row and column information so if

00:17:05,120 --> 00:17:10,400
i'm iterating

00:17:06,319 --> 00:17:12,400
check for each data jump into the

00:17:10,400 --> 00:17:13,679
jump into the row range if the row

00:17:12,400 --> 00:17:15,600
exists in the row range and if the

00:17:13,679 --> 00:17:18,319
column exists in the column list

00:17:15,600 --> 00:17:19,520
add it up to the date to the dictionary

00:17:18,319 --> 00:17:21,360
this default dates

00:17:19,520 --> 00:17:23,039
also if you notice here i use a tuple

00:17:21,360 --> 00:17:26,160
because

00:17:23,039 --> 00:17:27,760
you cannot the keys for a dictionary

00:17:26,160 --> 00:17:31,280
cannot be immutable

00:17:27,760 --> 00:17:34,559
so i had to trans change the type

00:17:31,280 --> 00:17:36,799
from a list to a tuple but in summary

00:17:34,559 --> 00:17:40,000
this is what it does so it will give us

00:17:36,799 --> 00:17:41,520
all the values within that range again

00:17:40,000 --> 00:17:43,520
if you look at this this is range 14 to

00:17:41,520 --> 00:17:45,280
25 which is the row and the

00:17:43,520 --> 00:17:47,600
columns these are the information we're

00:17:45,280 --> 00:17:49,120
getting lots of knowns oh it's fine

00:17:47,600 --> 00:17:50,799
but at least we're getting our traps in

00:17:49,120 --> 00:17:54,320
there

00:17:50,799 --> 00:17:56,320
now we move our data into numpy

00:17:54,320 --> 00:17:58,160
remember each table has to have four

00:17:56,320 --> 00:17:59,120
columns so we use a reshape function in

00:17:58,160 --> 00:18:01,039
numpy

00:17:59,120 --> 00:18:02,160
and then we can v stack so we'll combine

00:18:01,039 --> 00:18:04,640
everything into one

00:18:02,160 --> 00:18:05,600
and then when we're done we read it into

00:18:04,640 --> 00:18:07,360
pandas

00:18:05,600 --> 00:18:09,360
we'll use another function from pi

00:18:07,360 --> 00:18:12,480
generator which is remove empty which

00:18:09,360 --> 00:18:13,360
simply removes all completely empty rows

00:18:12,480 --> 00:18:15,039
and columns

00:18:13,360 --> 00:18:17,200
and then we can add a prefix just to

00:18:15,039 --> 00:18:18,799
make it easier for us to work with

00:18:17,200 --> 00:18:21,039
so this is how your numpy data looks

00:18:18,799 --> 00:18:22,000
like and within numpy lots of nouns but

00:18:21,039 --> 00:18:25,360
look at that

00:18:22,000 --> 00:18:27,840
all four rows and then we hit the

00:18:25,360 --> 00:18:28,559
parts that we are caring about you can

00:18:27,840 --> 00:18:30,799
see how

00:18:28,559 --> 00:18:33,120
we're getting some progress here we read

00:18:30,799 --> 00:18:33,440
the data into pandas we've gotten rid of

00:18:33,120 --> 00:18:36,240
the

00:18:33,440 --> 00:18:37,120
empty cells or the completely empty rows

00:18:36,240 --> 00:18:39,360
and columns

00:18:37,120 --> 00:18:41,280
and this is what we're left with it

00:18:39,360 --> 00:18:45,039
still needs a bit more cleaning

00:18:41,280 --> 00:18:47,120
and we can run some functions on that

00:18:45,039 --> 00:18:50,400
you use your assign your field direction

00:18:47,120 --> 00:18:53,360
your query basically you clean it up

00:18:50,400 --> 00:18:54,640
to get something wait and which turns

00:18:53,360 --> 00:18:56,080
out to be this

00:18:54,640 --> 00:18:58,080
so from that format that we had at the

00:18:56,080 --> 00:19:01,200
outset we've gotten to something clean

00:18:58,080 --> 00:19:02,160
about 70 rows but in a form that we can

00:19:01,200 --> 00:19:04,400
work with

00:19:02,160 --> 00:19:05,919
and look at the number of lines roughly

00:19:04,400 --> 00:19:08,880
30 lines of code

00:19:05,919 --> 00:19:09,520
that is reusable i mean is python

00:19:08,880 --> 00:19:12,640
powerful

00:19:09,520 --> 00:19:13,440
is it not fantastic so this is your

00:19:12,640 --> 00:19:16,720
before

00:19:13,440 --> 00:19:19,280
and this is your after

00:19:16,720 --> 00:19:19,760
easy python does a lot for you again i

00:19:19,280 --> 00:19:22,080
said

00:19:19,760 --> 00:19:23,200
python is powerful as long as you

00:19:22,080 --> 00:19:24,480
understand your data

00:19:23,200 --> 00:19:26,480
as long as you know what you're working

00:19:24,480 --> 00:19:28,160
with you're fine

00:19:26,480 --> 00:19:29,679
these are the resources i use i read the

00:19:28,160 --> 00:19:32,799
documentation of pandas

00:19:29,679 --> 00:19:34,080
i there's this colleague well i'd say is

00:19:32,799 --> 00:19:36,720
a great person

00:19:34,080 --> 00:19:37,360
in the our community duncan garman's way

00:19:36,720 --> 00:19:39,200
he has a

00:19:37,360 --> 00:19:41,600
book an ebook called spreadsheet module

00:19:39,200 --> 00:19:43,360
strategies very lovely

00:19:41,600 --> 00:19:45,520
lots to learn from there the titanic

00:19:43,360 --> 00:19:48,000
data was from the tidy excel repo

00:19:45,520 --> 00:19:48,720
and our package enron is from the empire

00:19:48,000 --> 00:19:51,600
voter

00:19:48,720 --> 00:19:53,280
pac um repo it's on our package as well

00:19:51,600 --> 00:19:54,000
and also my experiences with

00:19:53,280 --> 00:19:56,080
spreadsheets

00:19:54,000 --> 00:19:57,840
i worked at two international banks and

00:19:56,080 --> 00:20:00,000
with delts or i dealt with a lot of

00:19:57,840 --> 00:20:01,679
spreadsheets over that period

00:20:00,000 --> 00:20:03,120
raising spreadsheets but they were fun

00:20:01,679 --> 00:20:05,280
they were interesting and they were

00:20:03,120 --> 00:20:08,159
enlightening as well

00:20:05,280 --> 00:20:09,919
the code and slides are over there and

00:20:08,159 --> 00:20:11,360
this brings me to the end of my

00:20:09,919 --> 00:20:14,799
presentation

00:20:11,360 --> 00:20:16,880
questions comments feedbacks but

00:20:14,799 --> 00:20:18,799
as i said python is powerful and it

00:20:16,880 --> 00:20:22,559
offers you a lot so

00:20:18,799 --> 00:20:23,520
go and conquer cool thank you so much

00:20:22,559 --> 00:20:25,760
for that samwell

00:20:23,520 --> 00:20:27,120
that was great um there were actually a

00:20:25,760 --> 00:20:29,520
few people asking about

00:20:27,120 --> 00:20:31,200
the uh the code uh or whether that was

00:20:29,520 --> 00:20:32,880
up on github so that there's the link

00:20:31,200 --> 00:20:34,400
there so that's that's awesome

00:20:32,880 --> 00:20:35,919
um we've got time for a couple of

00:20:34,400 --> 00:20:39,520
questions one

00:20:35,919 --> 00:20:41,039
is um uh from bosco are there ways to

00:20:39,520 --> 00:20:44,640
import excel formulas

00:20:41,039 --> 00:20:46,880
into python yeah there is a way

00:20:44,640 --> 00:20:49,440
openpower excel can offer you that but

00:20:46,880 --> 00:20:52,400
recently i listened to

00:20:49,440 --> 00:20:54,799
a podcast and there is a particular

00:20:52,400 --> 00:20:57,200
package that allows you to read in

00:20:54,799 --> 00:20:58,240
the exact formulas i think it's a an

00:20:57,200 --> 00:20:59,679
improvement on opponent

00:20:58,240 --> 00:21:01,840
excel but to answer your question

00:20:59,679 --> 00:21:02,480
succinctly openpowerxl can help you with

00:21:01,840 --> 00:21:04,320
that

00:21:02,480 --> 00:21:06,640
but just check out there is a better

00:21:04,320 --> 00:21:08,880
pocket that does that as well

00:21:06,640 --> 00:21:10,480
yeah cool i think maybe we can have a

00:21:08,880 --> 00:21:11,200
people we can we can share links some of

00:21:10,480 --> 00:21:14,960
those libraries

00:21:11,200 --> 00:21:17,360
in the chat um there was um uh

00:21:14,960 --> 00:21:19,440
uh another question that i thought was

00:21:17,360 --> 00:21:20,400
interesting was uh what do you do when

00:21:19,440 --> 00:21:24,000
you get uh

00:21:20,400 --> 00:21:25,840
over one million rows in excel

00:21:24,000 --> 00:21:27,280
the one million rows question now there

00:21:25,840 --> 00:21:29,840
are two tricks to it

00:21:27,280 --> 00:21:31,200
one you can read it in python you could

00:21:29,840 --> 00:21:33,840
have to deal with

00:21:31,200 --> 00:21:35,520
the speed of the memories of pandas or

00:21:33,840 --> 00:21:37,600
if you're so inclined really

00:21:35,520 --> 00:21:38,960
excel is has had some improvements so

00:21:37,600 --> 00:21:40,080
they have a feature in excel called

00:21:38,960 --> 00:21:42,480
power query

00:21:40,080 --> 00:21:44,720
where you can read in your data in so

00:21:42,480 --> 00:21:46,000
that there's no there is no limitation

00:21:44,720 --> 00:21:47,679
when it comes to

00:21:46,000 --> 00:21:49,760
the number of rows that can be read into

00:21:47,679 --> 00:21:51,919
it however when you're exporting your

00:21:49,760 --> 00:21:54,159
data back to the export spreadsheets

00:21:51,919 --> 00:21:55,120
it cannot be more than a million rules

00:21:54,159 --> 00:21:57,120
so again

00:21:55,120 --> 00:21:58,880
you can do it with an excel power query

00:21:57,120 --> 00:22:01,280
or if you're a python fund like i

00:21:58,880 --> 00:22:02,640
am just read it into pandas or work with

00:22:01,280 --> 00:22:04,400
the excel

00:22:02,640 --> 00:22:06,000
and you can manage your memory

00:22:04,400 --> 00:22:07,520
limitations i mean if you find a way to

00:22:06,000 --> 00:22:08,799
deal with your generator expressions or

00:22:07,520 --> 00:22:12,159
your iterations

00:22:08,799 --> 00:22:14,000
you'll be fine yeah great uh i'm

00:22:12,159 --> 00:22:15,440
quickly going to squeeze in one more

00:22:14,000 --> 00:22:18,080
question um

00:22:15,440 --> 00:22:20,799
uh again from bosco is there an easy way

00:22:18,080 --> 00:22:22,720
to refer to cells and ranges of cells

00:22:20,799 --> 00:22:26,400
i think bosco's frustration is having to

00:22:22,720 --> 00:22:28,400
write his own cell naming functions

00:22:26,400 --> 00:22:30,240
but in openpower excel you can access

00:22:28,400 --> 00:22:32,720
named ranges so if your

00:22:30,240 --> 00:22:35,039
ranges have names you can do this and if

00:22:32,720 --> 00:22:37,200
you're sure

00:22:35,039 --> 00:22:38,400
let me just summarize that openpixel is

00:22:37,200 --> 00:22:40,480
a wonderful tool

00:22:38,400 --> 00:22:41,840
if you know how to play with it it will

00:22:40,480 --> 00:22:42,880
solve a whole lot of your problems when

00:22:41,840 --> 00:22:45,600
it comes to

00:22:42,880 --> 00:22:46,720
accessing data xlrd is also a pretty

00:22:45,600 --> 00:22:49,200
wonderful tool i

00:22:46,720 --> 00:22:52,080
just feel more comfortable with

00:22:49,200 --> 00:22:52,080
openpixel

00:22:52,240 --> 00:22:56,000
cool awesome well well thank you so much

00:22:54,559 --> 00:22:56,720
for that samwell that was that was

00:22:56,000 --> 00:22:59,520
amazing

00:22:56,720 --> 00:23:00,400
um i just have a couple of quick uh sort

00:22:59,520 --> 00:23:03,600
of um

00:23:00,400 --> 00:23:04,880
uh conference announcements um and that

00:23:03,600 --> 00:23:05,919
is that there are a few interesting

00:23:04,880 --> 00:23:08,159
things happening on

00:23:05,919 --> 00:23:09,520
sunday uh we have the birds of the

00:23:08,159 --> 00:23:11,679
feather sessions

00:23:09,520 --> 00:23:12,799
we have mentored sprints always a good

00:23:11,679 --> 00:23:15,600
opportunity to get

00:23:12,799 --> 00:23:16,720
a chance to get stuck into some open

00:23:15,600 --> 00:23:18,480
source contribution

00:23:16,720 --> 00:23:19,840
uh with with people the maintainers of

00:23:18,480 --> 00:23:21,520
the packages

00:23:19,840 --> 00:23:22,880
and there's even been some unofficial

00:23:21,520 --> 00:23:23,919
rumors that there are going to be

00:23:22,880 --> 00:23:27,200
lightning talks

00:23:23,919 --> 00:23:29,520
uh so uh stay stay tuned to things

00:23:27,200 --> 00:23:30,960
check the uh announcements page in

00:23:29,520 --> 00:23:32,480
venulis and um

00:23:30,960 --> 00:23:34,240
yeah please keep all the discussions

00:23:32,480 --> 00:23:36,559
happening in venulis um

00:23:34,240 --> 00:23:38,640
uh samwell do you have time to to hang

00:23:36,559 --> 00:23:41,200
out in venulis to chat for a little bit

00:23:38,640 --> 00:23:42,880
oh definitely awesome cool so yeah let's

00:23:41,200 --> 00:23:45,440
let's keep the conversation going

00:23:42,880 --> 00:23:46,480
and uh we'll i hope to see you for the

00:23:45,440 --> 00:23:48,640
next session

00:23:46,480 --> 00:23:49,840
uh in about 10 minutes and that's

00:23:48,640 --> 00:23:52,480
actually going to be on dusk

00:23:49,840 --> 00:23:54,159
image so all about processing

00:23:52,480 --> 00:23:56,000
distributed processing of

00:23:54,159 --> 00:24:05,840
images looking forward to that catch you

00:23:56,000 --> 00:24:05,840
all in a bit

00:24:08,720 --> 00:24:10,799

YouTube URL: https://www.youtube.com/watch?v=8RNh7pe3h1Q


