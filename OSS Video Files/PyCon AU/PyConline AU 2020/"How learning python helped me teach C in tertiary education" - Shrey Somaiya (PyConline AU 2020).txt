Title: "How learning python helped me teach C in tertiary education" - Shrey Somaiya (PyConline AU 2020)
Publication date: 2020-09-08
Playlist: PyConline AU 2020
Description: 
	Shrey Somaiya

https://2020.pycon.org.au/program/73HFNJ

This talk is simply one about my experience of learning C from a python background
  - what python features helped me understand C better (control flow, algorithm and problem breakdown design, functions, etc)
  - what C features helped me understand python better (ie pointers in C helped me understand python lists, etc)
  - how I use my python knowledge to teach C at University

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

Python, PyCon, PyConAU, PyConline

Fri Sep  4 10:25:00 2020 at Floperator
Captions: 
	00:00:03,040 --> 00:00:07,040
and welcome back

00:00:04,560 --> 00:00:07,759
uh i hope you had some snacks or

00:00:07,040 --> 00:00:10,719
something

00:00:07,759 --> 00:00:11,599
we're ready to go for our next speaker

00:00:10,719 --> 00:00:13,920
uh

00:00:11,599 --> 00:00:16,400
we want to remind everybody that if

00:00:13,920 --> 00:00:18,880
you're having some buffering issues uh

00:00:16,400 --> 00:00:19,920
we're having some luck with refreshing

00:00:18,880 --> 00:00:22,480
the browser

00:00:19,920 --> 00:00:24,400
and so everyone is encouraged to refresh

00:00:22,480 --> 00:00:25,279
their browser and also maybe manually

00:00:24,400 --> 00:00:29,119
choose their

00:00:25,279 --> 00:00:31,439
um resolution our next speaker

00:00:29,119 --> 00:00:32,239
is shay samaya and he's going to be

00:00:31,439 --> 00:00:36,960
talking about

00:00:32,239 --> 00:00:36,960
how learning python helped me

00:00:37,520 --> 00:00:41,760
teach c in tertiary education she

00:00:40,320 --> 00:00:43,680
started mucking around with python at

00:00:41,760 --> 00:00:46,559
high school and is now in second year

00:00:43,680 --> 00:00:48,399
studying computer science at unsw he

00:00:46,559 --> 00:00:49,680
he's currently interning at westpac he

00:00:48,399 --> 00:00:52,000
also tutors at uni

00:00:49,680 --> 00:00:54,079
and is addicted to gaming he's a born

00:00:52,000 --> 00:00:55,440
volunteer so just tell him that you need

00:00:54,079 --> 00:00:58,079
his help with something and he'll turn

00:00:55,440 --> 00:01:00,879
it into a society at uni

00:00:58,079 --> 00:01:02,239
uh so now you can take it away shray

00:01:00,879 --> 00:01:04,239
awesome thanks amanda

00:01:02,239 --> 00:01:05,519
um cool so hi everyone my name is shrey

00:01:04,239 --> 00:01:07,920
as amanda

00:01:05,519 --> 00:01:09,200
nicely mentioned so this will be quite

00:01:07,920 --> 00:01:11,280
fast i'm sorry

00:01:09,200 --> 00:01:12,640
um but i know you're all amazing people

00:01:11,280 --> 00:01:15,759
and you'll be able to cope

00:01:12,640 --> 00:01:17,840
with this speed i hope awesome cool so

00:01:15,759 --> 00:01:19,759
this talk um this talk will go a brief

00:01:17,840 --> 00:01:21,280
me briefly explaining my

00:01:19,759 --> 00:01:22,880
some c concepts and reflecting how my

00:01:21,280 --> 00:01:24,479
knowledge of python helped me

00:01:22,880 --> 00:01:27,280
not only to learn those concepts but to

00:01:24,479 --> 00:01:29,920
teach them to new students

00:01:27,280 --> 00:01:31,200
um so who are you um hopefully if you're

00:01:29,920 --> 00:01:32,479
watching this you are interested in

00:01:31,200 --> 00:01:34,159
education and you're interested in

00:01:32,479 --> 00:01:35,600
python because this is pycon and this is

00:01:34,159 --> 00:01:37,360
the education track

00:01:35,600 --> 00:01:39,040
hopefully you have some proficiency with

00:01:37,360 --> 00:01:41,680
python mostly

00:01:39,040 --> 00:01:43,360
variables if statements loops lists

00:01:41,680 --> 00:01:45,680
dictionaries and the basics of

00:01:43,360 --> 00:01:48,000
object-oriented programming in python

00:01:45,680 --> 00:01:49,280
um so who am i as i might have mentioned

00:01:48,000 --> 00:01:50,399
i've been playing around with computers

00:01:49,280 --> 00:01:52,240
for a while

00:01:50,399 --> 00:01:54,079
my dad used to bring home computers and

00:01:52,240 --> 00:01:55,200
i would sort of fix them and play around

00:01:54,079 --> 00:01:56,880
with them and just

00:01:55,200 --> 00:01:58,479
go out of my way to make trouble i would

00:01:56,880 --> 00:02:00,159
often do dumb stuff like write

00:01:58,479 --> 00:02:02,000
bat files on windows to display like the

00:02:00,159 --> 00:02:03,759
matrix code and trick my teachers and

00:02:02,000 --> 00:02:05,680
thinking i hacked the school computers

00:02:03,759 --> 00:02:07,040
um and a bunch of other stuff that i'm i

00:02:05,680 --> 00:02:08,000
was told that i wasn't supposed to talk

00:02:07,040 --> 00:02:10,640
about because they

00:02:08,000 --> 00:02:13,120
probably weren't the best idea um i took

00:02:10,640 --> 00:02:15,680
my first actual computer class in year 7

00:02:13,120 --> 00:02:17,200
and we did basic python things such as

00:02:15,680 --> 00:02:20,800
learning to print triangles

00:02:17,200 --> 00:02:23,360
in total i then chose to pick ist in e9

00:02:20,800 --> 00:02:24,640
and did basics of python making some

00:02:23,360 --> 00:02:27,599
calculators and some more

00:02:24,640 --> 00:02:29,120
um games and small things i then chose

00:02:27,599 --> 00:02:30,239
to do uh software design development for

00:02:29,120 --> 00:02:31,599
my hsc

00:02:30,239 --> 00:02:33,200
unfortunately the subject wasn't offered

00:02:31,599 --> 00:02:34,319
by my school so i chose to do it via

00:02:33,200 --> 00:02:36,560
distance education

00:02:34,319 --> 00:02:38,720
and i can now confirm i'm proud alumni

00:02:36,560 --> 00:02:40,800
of tara anglican school for girls

00:02:38,720 --> 00:02:42,480
i then applied um for the national

00:02:40,800 --> 00:02:43,519
computer science summer school and spent

00:02:42,480 --> 00:02:47,200
a two years

00:02:43,519 --> 00:02:48,800
um well two different summers there um

00:02:47,200 --> 00:02:50,400
then i applied for uncle computer

00:02:48,800 --> 00:02:51,519
science and now i'm tutoring at usw

00:02:50,400 --> 00:02:54,560
computer science and

00:02:51,519 --> 00:02:56,080
here we are today so i'm 19. i'm young

00:02:54,560 --> 00:02:57,360
what qualifies me to be talking about

00:02:56,080 --> 00:02:59,440
the education track

00:02:57,360 --> 00:03:00,640
well i've been teaching from a young age

00:02:59,440 --> 00:03:02,400
whether it was um

00:03:00,640 --> 00:03:04,000
me teaching my friends how to multiply

00:03:02,400 --> 00:03:06,480
two numbers together in year four

00:03:04,000 --> 00:03:07,200
or working at an after school care for a

00:03:06,480 --> 00:03:09,120
few years

00:03:07,200 --> 00:03:11,040
or teaching uni students in basic

00:03:09,120 --> 00:03:12,080
programming from hello world to advanced

00:03:11,040 --> 00:03:14,720
linked lists

00:03:12,080 --> 00:03:16,480
um this subject was taught in c and that

00:03:14,720 --> 00:03:17,040
was surprising to me when i first came

00:03:16,480 --> 00:03:19,680
there

00:03:17,040 --> 00:03:20,959
so there are no shortcuts to learning so

00:03:19,680 --> 00:03:22,239
this talk will start off a little bit

00:03:20,959 --> 00:03:23,360
slow but we'll pick up speed with some

00:03:22,239 --> 00:03:24,080
of the more interesting parts of the

00:03:23,360 --> 00:03:26,879
talk

00:03:24,080 --> 00:03:29,360
so welcome to comp 1511 usw's

00:03:26,879 --> 00:03:30,959
introduction to programming course

00:03:29,360 --> 00:03:32,000
this course is an interactive course the

00:03:30,959 --> 00:03:33,280
basis of computer science and

00:03:32,000 --> 00:03:35,200
programming it's the first

00:03:33,280 --> 00:03:36,480
course that you ever do if you're a

00:03:35,200 --> 00:03:38,159
computer science student or you're doing

00:03:36,480 --> 00:03:39,599
a related discipline i.e electrical

00:03:38,159 --> 00:03:41,840
engineering or

00:03:39,599 --> 00:03:43,040
mechanical engineering it's intended as

00:03:41,840 --> 00:03:44,480
an introduction to the field an

00:03:43,040 --> 00:03:45,440
introduction to programming to problem

00:03:44,480 --> 00:03:49,120
solving to

00:03:45,440 --> 00:03:50,959
breaking down programs into code

00:03:49,120 --> 00:03:52,560
the topics include fundamental

00:03:50,959 --> 00:03:54,799
programming concepts

00:03:52,560 --> 00:03:55,920
the c programming language programming

00:03:54,799 --> 00:03:58,879
style

00:03:55,920 --> 00:04:00,799
design debugging and testing i first

00:03:58,879 --> 00:04:02,640
took this subject in 2019 well i should

00:04:00,799 --> 00:04:03,519
say i only took the subject in 2019 i

00:04:02,640 --> 00:04:06,080
didn't fail it

00:04:03,519 --> 00:04:07,360
um thankfully um but my thoughts at the

00:04:06,080 --> 00:04:08,480
time of looking at this course outline

00:04:07,360 --> 00:04:11,120
this course schedule was

00:04:08,480 --> 00:04:12,959
what is going on why is this course in c

00:04:11,120 --> 00:04:14,400
why is it not in python isn't python so

00:04:12,959 --> 00:04:17,280
much easier to teach with

00:04:14,400 --> 00:04:19,199
um what are data types what is um what

00:04:17,280 --> 00:04:20,479
are arrays i've only ever heard of lists

00:04:19,199 --> 00:04:23,120
are they the same thing

00:04:20,479 --> 00:04:24,720
um functions yeah i guess so they sort

00:04:23,120 --> 00:04:28,560
of transpire from

00:04:24,720 --> 00:04:30,240
python what's memory and pointers what

00:04:28,560 --> 00:04:31,360
linked lists i've never heard of half of

00:04:30,240 --> 00:04:32,639
this stuff and i've been doing python

00:04:31,360 --> 00:04:34,160
for quite some time

00:04:32,639 --> 00:04:36,240
and so i was a bit overwhelmed when i

00:04:34,160 --> 00:04:37,440
first started all these new words and

00:04:36,240 --> 00:04:38,639
stuff that i just haven't heard about

00:04:37,440 --> 00:04:41,120
before

00:04:38,639 --> 00:04:42,560
so let's talk about our first c program

00:04:41,120 --> 00:04:44,400
and i've

00:04:42,560 --> 00:04:45,600
hopefully set this up so you can see my

00:04:44,400 --> 00:04:49,520
screen correctly

00:04:45,600 --> 00:04:52,080
um so let's look at our first c program

00:04:49,520 --> 00:04:53,440
so this is c c is a procedural program

00:04:52,080 --> 00:04:55,919
language meaning that it

00:04:53,440 --> 00:04:57,280
doesn't rely on objects such as python

00:04:55,919 --> 00:04:58,720
when i first heard about this i was

00:04:57,280 --> 00:04:59,680
super confused i didn't actually know

00:04:58,720 --> 00:05:01,120
that was a thing

00:04:59,680 --> 00:05:03,280
i didn't know there was anything but

00:05:01,120 --> 00:05:05,440
object-oriented programming

00:05:03,280 --> 00:05:06,560
and so in object-oriented programming

00:05:05,440 --> 00:05:08,560
everything's about objects

00:05:06,560 --> 00:05:10,560
in procedural programming everything's

00:05:08,560 --> 00:05:12,320
about functions and top down statements

00:05:10,560 --> 00:05:13,759
so everything is executed from the top

00:05:12,320 --> 00:05:15,120
to the bottom and we always start in the

00:05:13,759 --> 00:05:17,759
main function

00:05:15,120 --> 00:05:18,560
um also and the most important and

00:05:17,759 --> 00:05:20,560
frustrating thing

00:05:18,560 --> 00:05:21,759
is that every line must end in a

00:05:20,560 --> 00:05:23,759
semicolon

00:05:21,759 --> 00:05:25,520
so so so many times and i still do this

00:05:23,759 --> 00:05:27,360
day i keep forgetting semicolons i'm so

00:05:25,520 --> 00:05:30,880
used to programming python

00:05:27,360 --> 00:05:32,880
so in order for us to be able to run ac

00:05:30,880 --> 00:05:34,080
program we can't just click run there's

00:05:32,880 --> 00:05:36,400
no button

00:05:34,080 --> 00:05:37,360
or program that will just run our code

00:05:36,400 --> 00:05:38,479
in one statement

00:05:37,360 --> 00:05:40,479
instead we use something called a

00:05:38,479 --> 00:05:41,840
compiler a compiler is a program that

00:05:40,479 --> 00:05:44,080
will translate our c

00:05:41,840 --> 00:05:45,280
code into machine code machine code

00:05:44,080 --> 00:05:47,280
being special instructions that our

00:05:45,280 --> 00:05:50,240
computer is able to read

00:05:47,280 --> 00:05:51,680
so this is our first c program so let's

00:05:50,240 --> 00:05:53,680
look at some variables

00:05:51,680 --> 00:05:55,120
in c all variables must be typed when we

00:05:53,680 --> 00:05:56,400
declare a variable we must also declare

00:05:55,120 --> 00:05:58,080
the type of that variable so you can see

00:05:56,400 --> 00:05:58,479
we've got a name variable which is a

00:05:58,080 --> 00:06:00,880
type

00:05:58,479 --> 00:06:01,840
char character we have an age variable

00:06:00,880 --> 00:06:05,120
which is of type

00:06:01,840 --> 00:06:06,319
int integer and this is our equivalent

00:06:05,120 --> 00:06:08,240
of a print statement

00:06:06,319 --> 00:06:09,600
uh if you haven't seen these things

00:06:08,240 --> 00:06:12,400
before they

00:06:09,600 --> 00:06:12,720
are akin to python's format strings um

00:06:12,400 --> 00:06:15,520
back

00:06:12,720 --> 00:06:15,840
ages ago but essentially you can specify

00:06:15,520 --> 00:06:17,600
what

00:06:15,840 --> 00:06:19,520
is reprinted so in this case percent s

00:06:17,600 --> 00:06:23,840
is a string i.e name

00:06:19,520 --> 00:06:27,120
and percent d is an integer i age

00:06:23,840 --> 00:06:30,160
so let's uh let's run this so

00:06:27,120 --> 00:06:33,199
we want to use a compiler called dcc and

00:06:30,160 --> 00:06:35,600
dcc will take in a

00:06:33,199 --> 00:06:37,600
c file and we will output it to an

00:06:35,600 --> 00:06:39,039
executable file again a file that our

00:06:37,600 --> 00:06:42,000
computer can read and run

00:06:39,039 --> 00:06:43,280
so if we do this it no nothing no output

00:06:42,000 --> 00:06:44,960
that's good it means it's compiled

00:06:43,280 --> 00:06:47,840
successfully everything's fine

00:06:44,960 --> 00:06:48,560
and then we can go dot slash hello

00:06:47,840 --> 00:06:52,080
awesome

00:06:48,560 --> 00:06:54,960
cool so this is our first um c program

00:06:52,080 --> 00:06:55,919
so notably c is statically typed meaning

00:06:54,960 --> 00:06:58,560
that everything we do

00:06:55,919 --> 00:06:59,919
is typed is checked at compile time in

00:06:58,560 --> 00:07:00,720
python everything we do is check at

00:06:59,919 --> 00:07:02,080
runtime

00:07:00,720 --> 00:07:03,199
if you have type errors you'll go

00:07:02,080 --> 00:07:05,440
through all what you've done and then

00:07:03,199 --> 00:07:08,240
when you get to the error it'll be like

00:07:05,440 --> 00:07:10,080
type error in c you don't actually

00:07:08,240 --> 00:07:11,599
execute those lines that are successful

00:07:10,080 --> 00:07:13,199
it checks the whole file for any type

00:07:11,599 --> 00:07:14,319
areas and then it'll error if there is

00:07:13,199 --> 00:07:16,720
even a single one

00:07:14,319 --> 00:07:18,560
so to test that i'm actually not lying

00:07:16,720 --> 00:07:20,960
to you let's check this so here

00:07:18,560 --> 00:07:21,919
we're going to try and add uh 19 to the

00:07:20,960 --> 00:07:23,199
string hello

00:07:21,919 --> 00:07:24,479
um now obviously this should fail

00:07:23,199 --> 00:07:25,280
because we're not javascript you can't

00:07:24,479 --> 00:07:28,639
add

00:07:25,280 --> 00:07:30,960
strings and numbers very easily so

00:07:28,639 --> 00:07:32,800
let's do this yes i want to save and

00:07:30,960 --> 00:07:35,120
let's try and compile it again

00:07:32,800 --> 00:07:35,840
cool so as i said before dcc is a

00:07:35,120 --> 00:07:38,639
compiler

00:07:35,840 --> 00:07:40,479
dcc is a compiler written by um a

00:07:38,639 --> 00:07:42,639
lecturer senior professor at unsw

00:07:40,479 --> 00:07:44,160
and his team to be a nice little

00:07:42,639 --> 00:07:45,360
compiler that helps with

00:07:44,160 --> 00:07:47,280
introduction to programming and helps

00:07:45,360 --> 00:07:48,479
beginner students understand their code

00:07:47,280 --> 00:07:50,400
and what's going on

00:07:48,479 --> 00:07:52,160
so here it's saying careful you can't

00:07:50,400 --> 00:07:54,160
concatenate values in strings in c

00:07:52,160 --> 00:07:56,080
using the plus operator as you seem to

00:07:54,160 --> 00:07:57,360
be doing in line nine of helloworld.c

00:07:56,080 --> 00:07:59,599
so that's really nice and that's

00:07:57,360 --> 00:07:59,919
something that we've used at unsw to

00:07:59,599 --> 00:08:02,000
help

00:07:59,919 --> 00:08:03,680
students in this big journey of

00:08:02,000 --> 00:08:06,960
programming and what it is

00:08:03,680 --> 00:08:07,759
cool um so yeah that's our first c

00:08:06,960 --> 00:08:10,879
program

00:08:07,759 --> 00:08:11,680
um and yeah when i first taught this to

00:08:10,879 --> 00:08:13,120
my students

00:08:11,680 --> 00:08:14,560
many of them seem to understand quite

00:08:13,120 --> 00:08:15,759
intuitively the concept of types and

00:08:14,560 --> 00:08:16,960
that was really exciting for me because

00:08:15,759 --> 00:08:18,080
that was something that took me a long

00:08:16,960 --> 00:08:19,919
time to learn

00:08:18,080 --> 00:08:21,360
types and the way it operates is very

00:08:19,919 --> 00:08:23,280
different to python which is dynamically

00:08:21,360 --> 00:08:24,960
typed types are changed all the time

00:08:23,280 --> 00:08:26,960
in python so let's talk about control

00:08:24,960 --> 00:08:28,639
flow um control flow is the

00:08:26,960 --> 00:08:30,000
order in which our code is executed this

00:08:28,639 --> 00:08:31,440
allows for our code to make decisions

00:08:30,000 --> 00:08:32,959
from sequential decisions

00:08:31,440 --> 00:08:34,640
selection decisions and repetition

00:08:32,959 --> 00:08:36,880
decisions so

00:08:34,640 --> 00:08:37,839
um the syntax of any control flow

00:08:36,880 --> 00:08:40,159
operator

00:08:37,839 --> 00:08:42,080
mainly selection repetition is like this

00:08:40,159 --> 00:08:45,200
in c you have your keyword so

00:08:42,080 --> 00:08:47,279
if for while and you have your condition

00:08:45,200 --> 00:08:49,760
and then you execute the body so let's

00:08:47,279 --> 00:08:52,880
have a look at some basic examples

00:08:49,760 --> 00:08:54,640
um selection if lcf else this should be

00:08:52,880 --> 00:08:56,240
pretty self-explanatory if you've come

00:08:54,640 --> 00:08:57,839
from a python background

00:08:56,240 --> 00:08:59,360
um and for me when i came from that

00:08:57,839 --> 00:09:00,160
python background this really helped me

00:08:59,360 --> 00:09:02,399
pick it up

00:09:00,160 --> 00:09:04,080
um notably elsif is quite different to

00:09:02,399 --> 00:09:05,360
life but it's it's close enough that you

00:09:04,080 --> 00:09:06,080
can sort of understand that it's the

00:09:05,360 --> 00:09:07,839
same

00:09:06,080 --> 00:09:09,279
the same thing so that was really useful

00:09:07,839 --> 00:09:09,839
having that python background to help me

00:09:09,279 --> 00:09:12,399
learn

00:09:09,839 --> 00:09:14,080
and pick up this syntax quite quickly

00:09:12,399 --> 00:09:15,440
similarly with repetition and apologies

00:09:14,080 --> 00:09:16,480
for the image it seems to be a bit uh

00:09:15,440 --> 00:09:18,880
distorted

00:09:16,480 --> 00:09:20,240
but similar with repetition in loops you

00:09:18,880 --> 00:09:20,800
have a while loop similar as you do with

00:09:20,240 --> 00:09:22,160
python

00:09:20,800 --> 00:09:24,160
the thing with loops though is that

00:09:22,160 --> 00:09:26,880
there's no direct translation of the

00:09:24,160 --> 00:09:28,320
four iron range or the um iterating over

00:09:26,880 --> 00:09:30,080
a sequence as we can in python

00:09:28,320 --> 00:09:31,680
we can't do four item in list or four

00:09:30,080 --> 00:09:32,560
item in sequence because it's just not a

00:09:31,680 --> 00:09:34,000
thing in c

00:09:32,560 --> 00:09:35,360
due to the massive amounts of overhead

00:09:34,000 --> 00:09:36,640
that exists when doing a similar

00:09:35,360 --> 00:09:39,440
statement in python

00:09:36,640 --> 00:09:40,399
so um they're a bit different in c and

00:09:39,440 --> 00:09:41,920
so that was a

00:09:40,399 --> 00:09:43,519
bit of a learning curve especially the

00:09:41,920 --> 00:09:45,200
for loop syntax which

00:09:43,519 --> 00:09:46,640
is a bit is very different to c compared

00:09:45,200 --> 00:09:48,240
to python when you're doing four loops

00:09:46,640 --> 00:09:49,839
index and python as i mentioned you're

00:09:48,240 --> 00:09:51,120
iterating over a sequence so you go for

00:09:49,839 --> 00:09:53,680
item in sequence

00:09:51,120 --> 00:09:54,720
but in c it's something like this and

00:09:53,680 --> 00:09:58,320
it's a bit

00:09:54,720 --> 00:10:00,320
concerning so loops are um

00:09:58,320 --> 00:10:01,360
a bit confusing and for me it took me a

00:10:00,320 --> 00:10:02,959
while to understand them

00:10:01,360 --> 00:10:04,640
so when i would end up teaching this i

00:10:02,959 --> 00:10:05,680
sort of rely on my python background and

00:10:04,640 --> 00:10:07,519
my knowledge of how

00:10:05,680 --> 00:10:09,120
python loops internally work which of

00:10:07,519 --> 00:10:10,480
those for those who don't know

00:10:09,120 --> 00:10:13,120
python loops internally work using

00:10:10,480 --> 00:10:14,640
iterables and the underscores called get

00:10:13,120 --> 00:10:17,920
and next methods

00:10:14,640 --> 00:10:19,360
or something similar so the for loop

00:10:17,920 --> 00:10:21,120
sweeping down to three statements

00:10:19,360 --> 00:10:22,399
the first one is the fourth order what

00:10:21,120 --> 00:10:23,680
should be done at the beginning of the

00:10:22,399 --> 00:10:26,560
loop so in this case we want to

00:10:23,680 --> 00:10:27,440
initialize the i variable to an integer

00:10:26,560 --> 00:10:31,360
zero

00:10:27,440 --> 00:10:32,560
um the second area is the condition

00:10:31,360 --> 00:10:34,640
when should the loop be running in this

00:10:32,560 --> 00:10:36,959
case the loops you're running between um

00:10:34,640 --> 00:10:38,320
as long as i is less than 10. the third

00:10:36,959 --> 00:10:39,760
condition is the afterthought

00:10:38,320 --> 00:10:41,600
what should happen after each iteration

00:10:39,760 --> 00:10:42,640
of the loop after each iteration loop we

00:10:41,600 --> 00:10:44,720
want to increase this

00:10:42,640 --> 00:10:45,760
so when we run this as some of you might

00:10:44,720 --> 00:10:46,079
have already guessed this will just

00:10:45,760 --> 00:10:49,040
print

00:10:46,079 --> 00:10:50,399
zero to nine um usually in a full loop

00:10:49,040 --> 00:10:53,839
this is what you usually do

00:10:50,399 --> 00:10:55,279
um you can have uh other other cases

00:10:53,839 --> 00:10:56,320
where you want to do other things in the

00:10:55,279 --> 00:10:58,399
initialization and the

00:10:56,320 --> 00:10:59,920
afterthought um but usually this is the

00:10:58,399 --> 00:11:03,519
case of

00:10:59,920 --> 00:11:04,959
loops in this course um

00:11:03,519 --> 00:11:06,560
lifting was a tough concept for some

00:11:04,959 --> 00:11:07,440
students especially looping through

00:11:06,560 --> 00:11:08,640
arrays and looking through

00:11:07,440 --> 00:11:10,240
two-dimensional arrays

00:11:08,640 --> 00:11:11,839
it was so strange because until this

00:11:10,240 --> 00:11:13,920
time they've only ever seen code

00:11:11,839 --> 00:11:15,200
executing from the top to the bottom in

00:11:13,920 --> 00:11:15,839
the case of loops you go to the top to

00:11:15,200 --> 00:11:17,360
the bottom

00:11:15,839 --> 00:11:19,040
but every now and then the line being

00:11:17,360 --> 00:11:20,640
executed will move up a bit and you go

00:11:19,040 --> 00:11:21,839
back to that for loop at the top

00:11:20,640 --> 00:11:24,079
and that was quite hard for some

00:11:21,839 --> 00:11:24,560
students to grasp some other students

00:11:24,079 --> 00:11:26,320
can't

00:11:24,560 --> 00:11:28,480
struggle with the concept of x equals x

00:11:26,320 --> 00:11:29,440
plus one in this case we have i plus

00:11:28,480 --> 00:11:32,240
plus which is similar

00:11:29,440 --> 00:11:32,480
thing but um i plus plus is the same as

00:11:32,240 --> 00:11:34,880
i

00:11:32,480 --> 00:11:36,079
equals i plus one and some students from

00:11:34,880 --> 00:11:36,880
a mathematical background was super

00:11:36,079 --> 00:11:38,959
confused

00:11:36,880 --> 00:11:40,399
how can i be equal to i plus one that

00:11:38,959 --> 00:11:41,120
doesn't make sense that's saying zero

00:11:40,399 --> 00:11:43,519
equals to one

00:11:41,120 --> 00:11:44,720
one equals a two that's not possible and

00:11:43,519 --> 00:11:46,959
so that was also an interesting

00:11:44,720 --> 00:11:49,519
challenge to tackle

00:11:46,959 --> 00:11:51,040
cool so let's talk about arrays i i

00:11:49,519 --> 00:11:51,760
initially thought that arrays were the

00:11:51,040 --> 00:11:55,279
same in c

00:11:51,760 --> 00:11:57,680
as bliss and python but how wrong i was

00:11:55,279 --> 00:11:58,480
in c much to my surprise lists are a

00:11:57,680 --> 00:12:00,560
contiguous

00:11:58,480 --> 00:12:02,160
allocated segment of memory contiguous

00:12:00,560 --> 00:12:03,040
meaning that all the memory is next to

00:12:02,160 --> 00:12:05,760
each other

00:12:03,040 --> 00:12:07,760
unlike python lists c are not c lists

00:12:05,760 --> 00:12:09,839
are not self expanding and they have a

00:12:07,760 --> 00:12:11,600
fixed amount of elements they can also

00:12:09,839 --> 00:12:13,040
only hold one type which was

00:12:11,600 --> 00:12:14,720
really annoying at first because i was

00:12:13,040 --> 00:12:16,240
so used to chucking everything i needed

00:12:14,720 --> 00:12:16,880
into a list and using that as my data

00:12:16,240 --> 00:12:18,160
structure

00:12:16,880 --> 00:12:20,720
but in c you have to be a little bit

00:12:18,160 --> 00:12:22,160
more careful with what you choose to do

00:12:20,720 --> 00:12:23,600
this can be indexed the same which is

00:12:22,160 --> 00:12:24,880
good but the hardest thing for me to

00:12:23,600 --> 00:12:28,079
understand when i was taking the course

00:12:24,880 --> 00:12:30,800
is the content of fixed size and type

00:12:28,079 --> 00:12:32,079
lists and that was an example of how my

00:12:30,800 --> 00:12:34,160
python background actually sort of

00:12:32,079 --> 00:12:36,079
hindered my learning of this language

00:12:34,160 --> 00:12:38,240
another frustrating part about list and

00:12:36,079 --> 00:12:40,639
c versus doing this in python

00:12:38,240 --> 00:12:42,079
is that you have no nice functions in c

00:12:40,639 --> 00:12:44,000
that will help you with these lists

00:12:42,079 --> 00:12:45,760
there's no list of sort no there's still

00:12:44,000 --> 00:12:47,839
append no that's not removed

00:12:45,760 --> 00:12:49,360
and so on the reliance of functions in

00:12:47,839 --> 00:12:51,200
python that i've gotten used to

00:12:49,360 --> 00:12:53,839
now that they're gone was just left me

00:12:51,200 --> 00:12:56,880
struggling

00:12:53,839 --> 00:12:58,399
so that was list and luckily when i

00:12:56,880 --> 00:12:59,839
taught it i was able to

00:12:58,399 --> 00:13:01,200
go back and use that knowledge of me

00:12:59,839 --> 00:13:03,279
struggling to sort of explain to my

00:13:01,200 --> 00:13:05,680
students which is really helpful

00:13:03,279 --> 00:13:07,200
let's talk about functions so functions

00:13:05,680 --> 00:13:07,920
in python are quite similar to functions

00:13:07,200 --> 00:13:10,399
in c

00:13:07,920 --> 00:13:12,240
so let's have a look at some functions i

00:13:10,399 --> 00:13:15,279
believe i call it oh i did

00:13:12,240 --> 00:13:15,279
functions of c awesome

00:13:16,720 --> 00:13:20,959
cool so uh functions in c uh quite

00:13:19,440 --> 00:13:22,240
similar functions in python

00:13:20,959 --> 00:13:24,160
the only main difference is you have to

00:13:22,240 --> 00:13:25,920
specify types as we mentioned before c

00:13:24,160 --> 00:13:27,360
is a statically typed language meaning

00:13:25,920 --> 00:13:28,959
you have to specify types for everything

00:13:27,360 --> 00:13:30,720
so we could check these types and the

00:13:28,959 --> 00:13:31,680
correctness of these types at compile

00:13:30,720 --> 00:13:33,680
time

00:13:31,680 --> 00:13:36,160
so here we have a function called times

00:13:33,680 --> 00:13:39,199
two times two will take an integer x

00:13:36,160 --> 00:13:40,800
and it'll return another integer and

00:13:39,199 --> 00:13:42,639
it'll be two times that number

00:13:40,800 --> 00:13:44,000
so here this main program and you don't

00:13:42,639 --> 00:13:44,480
understand how this works but at a top

00:13:44,000 --> 00:13:47,120
level

00:13:44,480 --> 00:13:48,000
it'll ask someone to enter a number will

00:13:47,120 --> 00:13:49,839
then enter the number

00:13:48,000 --> 00:13:52,000
and then it will print out that number

00:13:49,839 --> 00:13:54,480
times two is the resulting answer

00:13:52,000 --> 00:13:56,160
so let's see if this works and i really

00:13:54,480 --> 00:14:00,240
hope it does

00:13:56,160 --> 00:14:00,240
dcc functions.c yup cool

00:14:01,279 --> 00:14:08,000
enter a number um uh 21.

00:14:05,120 --> 00:14:08,320
21 times 2 is 42. awesome so that works

00:14:08,000 --> 00:14:10,320
but

00:14:08,320 --> 00:14:11,839
the issue with c is that when you're

00:14:10,320 --> 00:14:13,680
writing c code

00:14:11,839 --> 00:14:15,600
remember everything starts from main so

00:14:13,680 --> 00:14:17,839
if i have a lot of functions

00:14:15,600 --> 00:14:18,639
in my program as is common with

00:14:17,839 --> 00:14:20,800
assignments

00:14:18,639 --> 00:14:22,399
it gets to a point where i'm reading i'm

00:14:20,800 --> 00:14:23,920
marking a student's code and i have to

00:14:22,399 --> 00:14:25,839
scroll all the way down before i realize

00:14:23,920 --> 00:14:28,160
what their main body of code is doing

00:14:25,839 --> 00:14:30,399
and that's quite annoying and it's quite

00:14:28,160 --> 00:14:30,639
unintuitive and it's quite unstylistic i

00:14:30,399 --> 00:14:33,279
would

00:14:30,639 --> 00:14:34,000
even argue so okay let's just move it to

00:14:33,279 --> 00:14:35,360
the bottom then

00:14:34,000 --> 00:14:38,079
what's the big deal we can do this in

00:14:35,360 --> 00:14:39,600
python in python python allows us to

00:14:38,079 --> 00:14:41,440
use functions before we declare them in

00:14:39,600 --> 00:14:42,639
other functions and i can show an

00:14:41,440 --> 00:14:45,440
example of that in a second

00:14:42,639 --> 00:14:46,959
but now we can see that uh my editor is

00:14:45,440 --> 00:14:49,279
being annoyed but let's just look at it

00:14:46,959 --> 00:14:52,160
in dtc

00:14:49,279 --> 00:14:53,839
cool implicit declaration blah blah

00:14:52,160 --> 00:14:55,440
there are several possible causes

00:14:53,839 --> 00:14:58,079
you are calling a function named times

00:14:55,440 --> 00:14:58,959
two but dcc does not recognize times two

00:14:58,079 --> 00:15:00,560
as a function

00:14:58,959 --> 00:15:01,839
how could not recognize it i just told

00:15:00,560 --> 00:15:02,639
it what it was but it's the end of the

00:15:01,839 --> 00:15:04,240
file

00:15:02,639 --> 00:15:06,000
the reason being as i said before is

00:15:04,240 --> 00:15:08,320
that c is read top down

00:15:06,000 --> 00:15:09,040
so it reads the main file and it reads

00:15:08,320 --> 00:15:11,440
times two

00:15:09,040 --> 00:15:13,199
and hasn't seen any of times two so far

00:15:11,440 --> 00:15:14,560
so this is where a concept called

00:15:13,199 --> 00:15:16,720
function declarations come in

00:15:14,560 --> 00:15:18,480
which allows us to declare that the

00:15:16,720 --> 00:15:19,519
integer sorry that the times two

00:15:18,480 --> 00:15:23,120
function exists

00:15:19,519 --> 00:15:26,160
times two it takes in an integer a

00:15:23,120 --> 00:15:27,760
and it will return an integer

00:15:26,160 --> 00:15:30,079
so we do this it's essentially a

00:15:27,760 --> 00:15:31,680
prototype saying hey i promise you at

00:15:30,079 --> 00:15:32,480
some point in the code i will implement

00:15:31,680 --> 00:15:34,160
this function

00:15:32,480 --> 00:15:35,519
just believe me that it's there and if

00:15:34,160 --> 00:15:37,199
you ever need to check the types

00:15:35,519 --> 00:15:38,800
this is what it will look like so we're

00:15:37,199 --> 00:15:40,480
giving it a little blueprint a little

00:15:38,800 --> 00:15:40,800
prototype of what it should look like in

00:15:40,480 --> 00:15:43,120
the

00:15:40,800 --> 00:15:44,800
in the future so now we run this and we

00:15:43,120 --> 00:15:48,399
do it again it should be happy

00:15:44,800 --> 00:15:48,720
awesome cool um so and something that

00:15:48,399 --> 00:15:50,399
was

00:15:48,720 --> 00:15:51,920
a struggle for students to understand

00:15:50,399 --> 00:15:52,880
was return values and the content of

00:15:51,920 --> 00:15:56,160
return values

00:15:52,880 --> 00:15:57,680
were so in this case i took my python

00:15:56,160 --> 00:15:58,399
knowledge and used a python example to

00:15:57,680 --> 00:15:59,680
actually show them

00:15:58,399 --> 00:16:04,000
what return values were and how they

00:15:59,680 --> 00:16:04,000
worked so if i go to

00:16:06,480 --> 00:16:10,560
awesome so i used a so the example of

00:16:09,360 --> 00:16:11,920
the sorted function

00:16:10,560 --> 00:16:13,519
for those who don't know the sorted

00:16:11,920 --> 00:16:14,240
functions will take a list and it will

00:16:13,519 --> 00:16:16,800
return

00:16:14,240 --> 00:16:18,480
a new sorted value of that list so in

00:16:16,800 --> 00:16:20,560
this case we have an unsorted list with

00:16:18,480 --> 00:16:22,399
a bunch of integers again i made sure to

00:16:20,560 --> 00:16:23,680
keep it as closely as possible as in

00:16:22,399 --> 00:16:26,639
they're all the same type

00:16:23,680 --> 00:16:27,759
um and i explained to them that the

00:16:26,639 --> 00:16:30,320
sorted function

00:16:27,759 --> 00:16:31,120
will take that list go away produce a

00:16:30,320 --> 00:16:33,199
sorted version

00:16:31,120 --> 00:16:35,120
and then give us back a sorted list and

00:16:33,199 --> 00:16:37,440
so we got down to this explanation that

00:16:35,120 --> 00:16:38,720
a return value is essentially me asking

00:16:37,440 --> 00:16:40,240
someone to do a task

00:16:38,720 --> 00:16:42,000
and then give me the result of that task

00:16:40,240 --> 00:16:42,480
i.e what's the length of the list can

00:16:42,000 --> 00:16:44,000
you go

00:16:42,480 --> 00:16:46,079
can you go away and count the length

00:16:44,000 --> 00:16:47,600
list and then give me that number back

00:16:46,079 --> 00:16:49,519
and so that's how i use my python

00:16:47,600 --> 00:16:50,959
knowledge and my python experience to

00:16:49,519 --> 00:16:52,880
sort of teach these students

00:16:50,959 --> 00:16:54,560
see concepts or programming concepts in

00:16:52,880 --> 00:16:58,160
general

00:16:54,560 --> 00:16:58,160
and that was pretty interesting for me

00:16:58,800 --> 00:17:06,400
um yes that's it for that segment

00:17:03,600 --> 00:17:07,199
strings strings are technically not a

00:17:06,400 --> 00:17:09,360
thing in python

00:17:07,199 --> 00:17:10,720
uh sorry in c they are a thing of python

00:17:09,360 --> 00:17:12,559
um at least not the

00:17:10,720 --> 00:17:14,640
same extent that they exist in python in

00:17:12,559 --> 00:17:16,559
c strings as an array of characters

00:17:14,640 --> 00:17:17,760
uh the array of char types you can

00:17:16,559 --> 00:17:19,360
define a string

00:17:17,760 --> 00:17:21,600
similar the way we did in our hello

00:17:19,360 --> 00:17:24,480
program which for

00:17:21,600 --> 00:17:24,480
memory i'll bring it up

00:17:25,360 --> 00:17:29,039
so here this is a string but notably

00:17:27,600 --> 00:17:32,080
this is an array

00:17:29,039 --> 00:17:34,000
this is an array of six strings and so

00:17:32,080 --> 00:17:36,080
you might be asking why is sorry six

00:17:34,000 --> 00:17:37,840
characters but why is it six my name is

00:17:36,080 --> 00:17:40,720
only five characters long

00:17:37,840 --> 00:17:42,559
um what happens if i do five and the

00:17:40,720 --> 00:17:45,280
reason with six is because

00:17:42,559 --> 00:17:46,880
um everything must end every string must

00:17:45,280 --> 00:17:48,640
end with a null terminator and an old

00:17:46,880 --> 00:17:50,080
terminator signifies to the computer

00:17:48,640 --> 00:17:52,080
that that is the end of that string it

00:17:50,080 --> 00:17:53,280
is an empty block it signifies the end

00:17:52,080 --> 00:17:55,280
so when we're printing something like

00:17:53,280 --> 00:17:56,400
percent s instead of printing the whole

00:17:55,280 --> 00:17:59,600
buffer so if i did

00:17:56,400 --> 00:18:00,080
like this much instead of printing this

00:17:59,600 --> 00:18:02,960
many

00:18:00,080 --> 00:18:03,360
characters of random garbage um it'll

00:18:02,960 --> 00:18:06,320
print

00:18:03,360 --> 00:18:08,480
the first five see it as a no character

00:18:06,320 --> 00:18:10,080
a no pointer sorry a no character and it

00:18:08,480 --> 00:18:13,200
will just stop printing things

00:18:10,080 --> 00:18:15,440
so um that's why it's one more um

00:18:13,200 --> 00:18:17,039
but yeah strings don't exist in c at

00:18:15,440 --> 00:18:19,039
least not to the same extent so strings

00:18:17,039 --> 00:18:21,280
are in fact an array of characters

00:18:19,039 --> 00:18:22,880
um when i was learning strings again it

00:18:21,280 --> 00:18:24,240
was really complicated because there's a

00:18:22,880 --> 00:18:25,760
lack of all these functions there's no

00:18:24,240 --> 00:18:28,559
starts with there's no

00:18:25,760 --> 00:18:30,160
there's no is in there's no length

00:18:28,559 --> 00:18:32,080
there's no

00:18:30,160 --> 00:18:33,919
substring there's no reverse there's all

00:18:32,080 --> 00:18:36,559
these functions that i was used to using

00:18:33,919 --> 00:18:37,679
for uh c python strings are just not

00:18:36,559 --> 00:18:39,600
existent in c

00:18:37,679 --> 00:18:41,360
there are some functions in the string

00:18:39,600 --> 00:18:42,880
library for um c

00:18:41,360 --> 00:18:44,559
but it's not the same and it's not as

00:18:42,880 --> 00:18:46,400
intuitive and in fact some exercises

00:18:44,559 --> 00:18:48,000
even banned use of the string library

00:18:46,400 --> 00:18:49,840
so you could understand at a fundamental

00:18:48,000 --> 00:18:51,280
level how strings were stored in memory

00:18:49,840 --> 00:18:53,360
and how they were used

00:18:51,280 --> 00:18:54,720
um so yeah that's that's a was an

00:18:53,360 --> 00:18:56,480
interesting time for me

00:18:54,720 --> 00:18:59,039
so let's talk about the elephant in the

00:18:56,480 --> 00:19:01,280
room uh structures and memory allocation

00:18:59,039 --> 00:19:03,039
so as i mentioned earlier when i first

00:19:01,280 --> 00:19:03,919
looked at the course outline i had no

00:19:03,039 --> 00:19:06,000
idea what

00:19:03,919 --> 00:19:07,840
it meant by memory a location what is

00:19:06,000 --> 00:19:09,280
going on i knew a bit a little bit

00:19:07,840 --> 00:19:12,160
objects and garbage collection

00:19:09,280 --> 00:19:12,799
and stuff like that but i have no clue

00:19:12,160 --> 00:19:14,160
so

00:19:12,799 --> 00:19:15,840
i don't expect you all to be familiar

00:19:14,160 --> 00:19:18,480
with memory management or pointers in c

00:19:15,840 --> 00:19:19,679
so let's say we can follow along in

00:19:18,480 --> 00:19:23,200
comparisons

00:19:19,679 --> 00:19:26,480
um so here we have uh

00:19:23,200 --> 00:19:28,880
i have to zoom through this cool here we

00:19:26,480 --> 00:19:30,960
have a struct

00:19:28,880 --> 00:19:32,559
object but it only takes in data you can

00:19:30,960 --> 00:19:33,280
only hold data it's like a collection of

00:19:32,559 --> 00:19:35,679
data

00:19:33,280 --> 00:19:36,559
and so we can set the items in that

00:19:35,679 --> 00:19:39,760
structure

00:19:36,559 --> 00:19:42,080
using the dot notation um

00:19:39,760 --> 00:19:43,760
and so if you run this it'll print title

00:19:42,080 --> 00:19:44,400
is how to python and so that's a

00:19:43,760 --> 00:19:45,760
structure

00:19:44,400 --> 00:19:48,240
but what happens we want to do this in a

00:19:45,760 --> 00:19:50,559
function we want to use a function to

00:19:48,240 --> 00:19:52,320
change the author well surely we could

00:19:50,559 --> 00:19:56,000
just do something like

00:19:52,320 --> 00:19:56,000
this micros

00:19:57,679 --> 00:20:00,320
show something like this where we have a

00:19:58,880 --> 00:20:02,080
change author function again using

00:20:00,320 --> 00:20:04,159
prototypes to talk about earlier

00:20:02,080 --> 00:20:05,679
which will take in a structure book

00:20:04,159 --> 00:20:07,280
which we've defined up here this is a

00:20:05,679 --> 00:20:10,240
structure book

00:20:07,280 --> 00:20:10,640
and we'll take in a string author so

00:20:10,240 --> 00:20:13,280
here

00:20:10,640 --> 00:20:14,559
this should change the author to the

00:20:13,280 --> 00:20:15,600
author that we give it so we call the

00:20:14,559 --> 00:20:17,280
change author function

00:20:15,600 --> 00:20:19,760
with the author barnaby and it should

00:20:17,280 --> 00:20:22,799
change the author from mach to barnaby

00:20:19,760 --> 00:20:35,840
so if we run this um

00:20:22,799 --> 00:20:35,840
dcc struct by

00:20:36,320 --> 00:20:39,840
you notice it doesn't actually change

00:20:37,760 --> 00:20:41,679
the final author it says it is

00:20:39,840 --> 00:20:43,280
but it's not and the issue the reason

00:20:41,679 --> 00:20:46,400
that is is because everything in c

00:20:43,280 --> 00:20:48,640
is passed by value so what that really

00:20:46,400 --> 00:20:51,600
means is that when i create

00:20:48,640 --> 00:20:52,240
um when i say change author in first

00:20:51,600 --> 00:20:54,240
book

00:20:52,240 --> 00:20:55,440
c will create a copy of first book and

00:20:54,240 --> 00:20:58,480
send the function

00:20:55,440 --> 00:21:00,720
and it doesn't actually edit the uh

00:20:58,480 --> 00:21:01,600
structure itself in here it's a key sort

00:21:00,720 --> 00:21:03,840
of similar to

00:21:01,600 --> 00:21:05,679
immutable data types in python and the

00:21:03,840 --> 00:21:06,159
way we solve that is by using pointers

00:21:05,679 --> 00:21:07,919
and so

00:21:06,159 --> 00:21:09,280
stepping back into python in python we

00:21:07,919 --> 00:21:10,960
have references when you create a

00:21:09,280 --> 00:21:13,039
variable you create a reference to that

00:21:10,960 --> 00:21:15,200
object so when you say a equals to 9

00:21:13,039 --> 00:21:16,240
you create a reference to the integer

00:21:15,200 --> 00:21:18,159
object nine

00:21:16,240 --> 00:21:20,159
and so when you pass a to a function

00:21:18,159 --> 00:21:21,360
you're not passing a copy of that object

00:21:20,159 --> 00:21:24,320
you're passing a reference

00:21:21,360 --> 00:21:25,280
a pointer almost to that object so when

00:21:24,320 --> 00:21:27,679
i say

00:21:25,280 --> 00:21:28,640
times two of a it'll take a reference to

00:21:27,679 --> 00:21:30,480
the object a

00:21:28,640 --> 00:21:32,000
passive function the function will take

00:21:30,480 --> 00:21:34,240
that reference a

00:21:32,000 --> 00:21:35,840
and it will do some changes on the uh

00:21:34,240 --> 00:21:39,600
the object advert reference

00:21:35,840 --> 00:21:41,440
and then it will um you know return it

00:21:39,600 --> 00:21:43,200
in this case everything in c is passed

00:21:41,440 --> 00:21:44,559
by value when you're passing things it

00:21:43,200 --> 00:21:46,960
passes a copy of it

00:21:44,559 --> 00:21:48,240
um so this is quite annoying and to

00:21:46,960 --> 00:21:50,480
solve that we have to use

00:21:48,240 --> 00:21:52,480
pointers a pointer is nothing but a type

00:21:50,480 --> 00:21:53,360
and it's a type that holds in memory so

00:21:52,480 --> 00:21:56,480
if we look at

00:21:53,360 --> 00:21:59,840
a small example

00:21:56,480 --> 00:22:00,799
i'll type this is a pointer so this is

00:21:59,840 --> 00:22:02,640
an integer right

00:22:00,799 --> 00:22:04,159
to get the reference to a like we talked

00:22:02,640 --> 00:22:05,200
about before um we have to use a special

00:22:04,159 --> 00:22:07,360
syntax so

00:22:05,200 --> 00:22:08,799
here we have it star in star means this

00:22:07,360 --> 00:22:11,440
is a pointer this is a type

00:22:08,799 --> 00:22:12,720
the type is in star that what this means

00:22:11,440 --> 00:22:16,480
is that this type is a

00:22:12,720 --> 00:22:18,400
pointer star to an integer right and the

00:22:16,480 --> 00:22:20,559
ampersand means get the address of the

00:22:18,400 --> 00:22:23,120
integer a so when we run this

00:22:20,559 --> 00:22:23,840
it'll say the address of a blur and we

00:22:23,120 --> 00:22:26,400
can sort of

00:22:23,840 --> 00:22:26,960
determine the address of the variable in

00:22:26,400 --> 00:22:29,360
memory

00:22:26,960 --> 00:22:30,799
versus the variable itself and we can

00:22:29,360 --> 00:22:32,320
then pass around the address the

00:22:30,799 --> 00:22:33,360
reference like we do in python and it's

00:22:32,320 --> 00:22:35,200
all happy

00:22:33,360 --> 00:22:37,039
um so that's sort of a little

00:22:35,200 --> 00:22:38,559
introduction to pointers

00:22:37,039 --> 00:22:40,080
i don't want to go too deep into them

00:22:38,559 --> 00:22:41,919
but essentially what it ends up with

00:22:40,080 --> 00:22:43,360
sometimes because points are just types

00:22:41,919 --> 00:22:45,760
at a fundamental level

00:22:43,360 --> 00:22:46,400
we can you can actually end up with uh

00:22:45,760 --> 00:22:48,400
this

00:22:46,400 --> 00:22:49,760
where you have a pointer to a pointer to

00:22:48,400 --> 00:22:51,520
a pointer to a pointer

00:22:49,760 --> 00:22:53,120
and it's so messy and this is some of

00:22:51,520 --> 00:22:54,000
the code that i've seen in my students

00:22:53,120 --> 00:22:55,520
code

00:22:54,000 --> 00:22:57,520
so when we teach pointers we have to

00:22:55,520 --> 00:22:58,640
teach them responsibly

00:22:57,520 --> 00:23:01,039
with great power comes great

00:22:58,640 --> 00:23:03,840
responsibility cool

00:23:01,039 --> 00:23:05,200
um so i guess the big question that

00:23:03,840 --> 00:23:07,840
people have asked me is

00:23:05,200 --> 00:23:09,280
why do we use oops that's not my slides

00:23:07,840 --> 00:23:11,120
why do you see instead of python and

00:23:09,280 --> 00:23:12,880
this is something i was ordering for

00:23:11,120 --> 00:23:14,159
and a bigger question fundamentally is

00:23:12,880 --> 00:23:15,440
which language should we use when we're

00:23:14,159 --> 00:23:16,720
teaching internet programming in

00:23:15,440 --> 00:23:18,640
tertiary education

00:23:16,720 --> 00:23:19,760
um clearly it's evident that learning

00:23:18,640 --> 00:23:21,679
python before c

00:23:19,760 --> 00:23:24,320
both helped and hindered my learning of

00:23:21,679 --> 00:23:26,559
c in doing so i was able to understand

00:23:24,320 --> 00:23:28,000
both python and c in a deeper level

00:23:26,559 --> 00:23:29,520
which allowed me to teach it better

00:23:28,000 --> 00:23:31,039
so so far we've gone through my

00:23:29,520 --> 00:23:32,799
experience in learning scene how able to

00:23:31,039 --> 00:23:35,679
use it to teach

00:23:32,799 --> 00:23:37,440
see a better level but some of the

00:23:35,679 --> 00:23:39,600
frustrations are clearly evident

00:23:37,440 --> 00:23:41,200
um so let's have a look at some of the

00:23:39,600 --> 00:23:44,000
biggest universities in australia

00:23:41,200 --> 00:23:45,440
monash teaches python rmit teaches java

00:23:44,000 --> 00:23:47,760
ucid teaches python

00:23:45,440 --> 00:23:49,200
and c in their event stream usw teaches

00:23:47,760 --> 00:23:50,000
c in their undergrad and python their

00:23:49,200 --> 00:23:54,240
postgrad what's

00:23:50,000 --> 00:23:56,720
going on um interestingly c.s.e sock the

00:23:54,240 --> 00:23:57,919
usw society ran a discussion on this

00:23:56,720 --> 00:23:59,679
with lecturers alumni

00:23:57,919 --> 00:24:02,000
and tutors or pitching in and

00:23:59,679 --> 00:24:04,960
surprisingly we had 380 students

00:24:02,000 --> 00:24:06,320
versus 93 vote for c and i wonder why at

00:24:04,960 --> 00:24:06,880
the end of the day it doesn't really

00:24:06,320 --> 00:24:08,320
matter

00:24:06,880 --> 00:24:10,480
that what really matters is that we're

00:24:08,320 --> 00:24:11,279
teaching fundamental understandings of

00:24:10,480 --> 00:24:13,120
programming of

00:24:11,279 --> 00:24:14,400
breaking down programs into problems and

00:24:13,120 --> 00:24:15,120
computer science and that's all that

00:24:14,400 --> 00:24:16,640
really matters

00:24:15,120 --> 00:24:18,159
a cs degree aims to equip you the

00:24:16,640 --> 00:24:19,840
fundamentals of problem solving and

00:24:18,159 --> 00:24:21,200
understanding of a computer system

00:24:19,840 --> 00:24:23,279
and while i think c is good for that

00:24:21,200 --> 00:24:26,320
there are other alternative options i.e

00:24:23,279 --> 00:24:27,600
handwritten binary so thank you for

00:24:26,320 --> 00:24:29,279
listening to this talk i hope this sort

00:24:27,600 --> 00:24:31,760
of given you some insight into

00:24:29,279 --> 00:24:32,880
education and how different languages it

00:24:31,760 --> 00:24:36,000
doesn't matter does it not matter that's

00:24:32,880 --> 00:24:36,000
a question for you to figure out

00:24:37,840 --> 00:24:44,960
good job sharay no big hook needed

00:24:42,320 --> 00:24:46,880
we're close mated we're pretty close um

00:24:44,960 --> 00:24:49,520
but you wrapped up admirably

00:24:46,880 --> 00:24:51,039
uh uh well done and i did learn

00:24:49,520 --> 00:24:51,679
something you you assured me that i

00:24:51,039 --> 00:24:54,720
would

00:24:51,679 --> 00:24:57,120
uh strike is now available uh to

00:24:54,720 --> 00:24:58,000
talk in the in the track uh in the

00:24:57,120 --> 00:25:00,080
hallway track

00:24:58,000 --> 00:25:01,279
so uh all of those questions there were

00:25:00,080 --> 00:25:03,279
a couple

00:25:01,279 --> 00:25:04,960
in the stream so uh you should hang

00:25:03,279 --> 00:25:07,440
around so that people can ask them

00:25:04,960 --> 00:25:09,120
uh and to everyone else uh please stand

00:25:07,440 --> 00:25:11,360
by we'll be back in 10 minutes

00:25:09,120 --> 00:25:12,640
with our next speaker thank you very

00:25:11,360 --> 00:25:15,840
much everyone

00:25:12,640 --> 00:25:15,840

YouTube URL: https://www.youtube.com/watch?v=CjLqY2Fg28g


