Title: "Speeding up Your Docker Image Build" - Vladislav Supalov (PyConline AU 2020)
Publication date: 2020-09-08
Playlist: PyConline AU 2020
Description: 
	Vladislav Supalov

https://2020.pycon.org.au/program/7FP8AB

Are your Docker builds taking forever? Docker can be a valuable part of your tool belt, or a constant source of annoyance. This talk will walk you through frequent sources of slowness when building Docker images for Python projects, and ways how you can avoid or fix them. Letâ€™s speed up an utterly slow Docker build together using the right high-level approach, easy to implement tricks and brand-new Docker features to speed up your build protect your coding flow from annoying delays.

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

Python, PyCon, PyConAU, PyConline

Sat Sep  5 11:00:00 2020 at Python 2
Captions: 
	00:00:00,160 --> 00:00:04,400
hello folks next up we have vladislav

00:00:02,480 --> 00:00:05,680
superloft with a talk about speeding up

00:00:04,400 --> 00:00:07,200
your docker image build

00:00:05,680 --> 00:00:08,880
he's a florida startup founder with

00:00:07,200 --> 00:00:09,360
machine learning enthusiasts and devops

00:00:08,880 --> 00:00:10,800
geek

00:00:09,360 --> 00:00:12,639
and he will be taking questions from the

00:00:10,800 --> 00:00:13,519
chat at the end of this presentation if

00:00:12,639 --> 00:00:15,200
we have time

00:00:13,519 --> 00:00:17,119
so feel free to ask and make comments in

00:00:15,200 --> 00:00:19,680
the venueless chat to rather talk

00:00:17,119 --> 00:00:20,640
thank you very much uh go ahead let us

00:00:19,680 --> 00:00:22,880
off

00:00:20,640 --> 00:00:23,920
thank you so much all right uh it's a

00:00:22,880 --> 00:00:26,240
pleasure to be here

00:00:23,920 --> 00:00:27,279
let's talk about speeding up your docker

00:00:26,240 --> 00:00:28,640
image build

00:00:27,279 --> 00:00:30,800
first of all i'd like to introduce

00:00:28,640 --> 00:00:32,320
myself so hi i'm vladoslav

00:00:30,800 --> 00:00:33,840
my background is in machine learning

00:00:32,320 --> 00:00:37,040
computer vision

00:00:33,840 --> 00:00:39,120
i always loved using python i

00:00:37,040 --> 00:00:41,040
used jungle for my master thesis

00:00:39,120 --> 00:00:41,840
stupidity to go for a bit i still like

00:00:41,040 --> 00:00:44,000
it

00:00:41,840 --> 00:00:45,760
but then i discovered this devops thing

00:00:44,000 --> 00:00:49,360
for me i didn't know what it was

00:00:45,760 --> 00:00:51,520
and eventually in 2014 i thought well

00:00:49,360 --> 00:00:53,280
automating stuff is really cool i used

00:00:51,520 --> 00:00:56,320
vagrant to automate a development

00:00:53,280 --> 00:00:58,800
environment for my projects and so began

00:00:56,320 --> 00:01:00,559
my slide into all things infrastructure

00:00:58,800 --> 00:01:02,800
so i was fascinated by

00:01:00,559 --> 00:01:04,080
big setups by making things reliable

00:01:02,800 --> 00:01:05,760
efficient

00:01:04,080 --> 00:01:07,119
and eventually i started to write things

00:01:05,760 --> 00:01:09,119
down because

00:01:07,119 --> 00:01:10,799
i noticed that if i write stuff down and

00:01:09,119 --> 00:01:11,760
put it on the internet i can look it up

00:01:10,799 --> 00:01:14,240
wherever i am

00:01:11,760 --> 00:01:15,520
so uh this is how i started a nasty

00:01:14,240 --> 00:01:18,560
writing habit which

00:01:15,520 --> 00:01:20,159
continues to this day and um

00:01:18,560 --> 00:01:21,600
professionally i'm in the business of

00:01:20,159 --> 00:01:22,640
helping developers to level up their

00:01:21,600 --> 00:01:24,320
container skills

00:01:22,640 --> 00:01:26,799
through trainings coaching and the stuff

00:01:24,320 --> 00:01:29,040
i write and i'm working with companies

00:01:26,799 --> 00:01:31,360
consulting on fixing docker workflows

00:01:29,040 --> 00:01:32,000
and also sometimes doing the kubernetes

00:01:31,360 --> 00:01:35,360
thing

00:01:32,000 --> 00:01:35,360
but only if it makes sense

00:01:35,680 --> 00:01:39,119
i'm also based in berlin so right now

00:01:38,720 --> 00:01:43,759
it's

00:01:39,119 --> 00:01:44,240
a bit but i'm still very thrilled to be

00:01:43,759 --> 00:01:47,680
here

00:01:44,240 --> 00:01:50,079
because i love this stuff so much so um

00:01:47,680 --> 00:01:51,280
what's in it for you my goal with this

00:01:50,079 --> 00:01:54,000
talk is

00:01:51,280 --> 00:01:54,960
i want to help you reclaim days of your

00:01:54,000 --> 00:01:58,640
time

00:01:54,960 --> 00:01:59,439
over the next 12 months why am i saying

00:01:58,640 --> 00:02:02,000
this well

00:01:59,439 --> 00:02:02,640
i always must refer to this one xkcd

00:02:02,000 --> 00:02:06,079
strip

00:02:02,640 --> 00:02:09,039
it's number 1205 and here you can say

00:02:06,079 --> 00:02:10,239
see the dilemma if i want to make

00:02:09,039 --> 00:02:13,360
something faster

00:02:10,239 --> 00:02:16,080
how much time is it okay to spend

00:02:13,360 --> 00:02:18,239
so if you've got a task which is daily

00:02:16,080 --> 00:02:21,280
and you can shave off five minutes

00:02:18,239 --> 00:02:23,120
then it's well worth to spend six days

00:02:21,280 --> 00:02:26,319
make it making it more efficient and

00:02:23,120 --> 00:02:28,239
over five years you will come out ahead

00:02:26,319 --> 00:02:30,160
well the thing is docker bills can be

00:02:28,239 --> 00:02:33,680
really slow and they can be like

00:02:30,160 --> 00:02:34,560
10 minutes or more and i think using

00:02:33,680 --> 00:02:37,360
these tips

00:02:34,560 --> 00:02:37,920
you can win back lots of minutes maybe

00:02:37,360 --> 00:02:40,239
five

00:02:37,920 --> 00:02:42,800
i can't promise it but i hope you will

00:02:40,239 --> 00:02:46,720
be able to have some impact

00:02:42,800 --> 00:02:50,080
the thing is docker builds they are

00:02:46,720 --> 00:02:52,480
in many places and they can be

00:02:50,080 --> 00:02:55,280
in part of your deployment pipeline they

00:02:52,480 --> 00:02:57,280
can be part of your testing or ci

00:02:55,280 --> 00:02:58,959
people also like to use it in their

00:02:57,280 --> 00:03:01,680
local development workflows

00:02:58,959 --> 00:03:02,959
and this is where taste comes in so

00:03:01,680 --> 00:03:05,519
personally

00:03:02,959 --> 00:03:07,200
i think everything you do is okay my

00:03:05,519 --> 00:03:09,760
personal preference is i

00:03:07,200 --> 00:03:11,760
don't use docker containers too much in

00:03:09,760 --> 00:03:15,040
development if i can avoid it

00:03:11,760 --> 00:03:17,280
and my opinion is if you need to rebuild

00:03:15,040 --> 00:03:17,760
your image in development on every code

00:03:17,280 --> 00:03:20,800
change

00:03:17,760 --> 00:03:23,680
you should really fix this

00:03:20,800 --> 00:03:24,560
because if you have delays which are

00:03:23,680 --> 00:03:26,159
avoidable

00:03:24,560 --> 00:03:27,680
the price you're going to pay is you're

00:03:26,159 --> 00:03:29,440
going to have context switching

00:03:27,680 --> 00:03:31,680
you're going to do some busy waiting

00:03:29,440 --> 00:03:33,360
some minutes are fine but if it's if

00:03:31,680 --> 00:03:34,400
it's more than a certain stretch you get

00:03:33,360 --> 00:03:36,720
out of your flow

00:03:34,400 --> 00:03:38,400
and having slow feedback loops really

00:03:36,720 --> 00:03:40,480
kills the motivation and

00:03:38,400 --> 00:03:42,000
the experience of this thing you're

00:03:40,480 --> 00:03:45,680
developing

00:03:42,000 --> 00:03:48,640
so docker builds

00:03:45,680 --> 00:03:51,760
are in many places and they can be slow

00:03:48,640 --> 00:03:51,760
so how can we address this

00:03:52,000 --> 00:03:57,280
i want to present five tips to speed up

00:03:54,640 --> 00:04:00,319
your docker image builds

00:03:57,280 --> 00:04:01,760
starting with the basics so the first

00:04:00,319 --> 00:04:04,560
one is

00:04:01,760 --> 00:04:05,519
it's it's really i i like i like

00:04:04,560 --> 00:04:07,040
pointing out

00:04:05,519 --> 00:04:09,599
stuff which might seem obvious to some

00:04:07,040 --> 00:04:12,319
people but it's not always always so

00:04:09,599 --> 00:04:14,080
the fastest stock a build is the one you

00:04:12,319 --> 00:04:15,840
don't have to run

00:04:14,080 --> 00:04:17,199
so the fastest you can make your build

00:04:15,840 --> 00:04:20,799
is to just

00:04:17,199 --> 00:04:22,639
maybe not use it this is where opinion

00:04:20,799 --> 00:04:23,040
comes in so i think just because you can

00:04:22,639 --> 00:04:26,400
you

00:04:23,040 --> 00:04:28,000
you could use docker you don't have to

00:04:26,400 --> 00:04:31,440
use it you have to

00:04:28,000 --> 00:04:31,440
look at the trade-offs see

00:04:32,800 --> 00:04:38,800
what's in it for you and

00:04:37,120 --> 00:04:40,800
choose an approach which works for you

00:04:38,800 --> 00:04:42,720
so all of these are perfectly fine

00:04:40,800 --> 00:04:44,400
you can either not use docker in your

00:04:42,720 --> 00:04:46,400
development environment

00:04:44,400 --> 00:04:47,520
you can just use it to run backing

00:04:46,400 --> 00:04:49,600
services

00:04:47,520 --> 00:04:51,919
for example docker compose which i very

00:04:49,600 --> 00:04:54,240
much encourage people to use

00:04:51,919 --> 00:04:56,240
you could just provide an example docker

00:04:54,240 --> 00:04:58,320
file so people can

00:04:56,240 --> 00:04:59,520
consult it while setting up their

00:04:58,320 --> 00:05:02,240
development environment

00:04:59,520 --> 00:05:04,639
or you can use docker for your complete

00:05:02,240 --> 00:05:08,080
environment that's fine as well

00:05:04,639 --> 00:05:10,639
with a few stars to it so i think

00:05:08,080 --> 00:05:12,000
if you go the way that your whole

00:05:10,639 --> 00:05:13,680
environment is dockerized you have to

00:05:12,000 --> 00:05:14,880
distinguish between different styles of

00:05:13,680 --> 00:05:16,800
using docker

00:05:14,880 --> 00:05:18,479
there's this deployment style where you

00:05:16,800 --> 00:05:19,440
where you're producing docker images as

00:05:18,479 --> 00:05:21,440
built artifacts

00:05:19,440 --> 00:05:22,479
where you want reproducible builds you

00:05:21,440 --> 00:05:24,320
want um

00:05:22,479 --> 00:05:25,919
all the dependencies to be pinned you

00:05:24,320 --> 00:05:28,720
want the images to be

00:05:25,919 --> 00:05:29,520
self-contained all the code and that's

00:05:28,720 --> 00:05:31,759
also

00:05:29,520 --> 00:05:33,199
like at the exact same version version

00:05:31,759 --> 00:05:35,759
it should be

00:05:33,199 --> 00:05:38,080
or you can use a development style where

00:05:35,759 --> 00:05:39,759
you only build an image once maybe

00:05:38,080 --> 00:05:41,280
sometimes you need to upgrade it but

00:05:39,759 --> 00:05:43,199
usually you want to avoid it

00:05:41,280 --> 00:05:44,639
you have very infrequent rebuilds

00:05:43,199 --> 00:05:46,000
because you're operating on running

00:05:44,639 --> 00:05:48,000
containers

00:05:46,000 --> 00:05:49,680
and the way you get code into your

00:05:48,000 --> 00:05:53,440
images is by bind mounting it

00:05:49,680 --> 00:05:55,600
instead of baking it into the images

00:05:53,440 --> 00:05:56,800
so um if you want to use development

00:05:55,600 --> 00:06:00,400
make sure

00:05:56,800 --> 00:06:02,479
to consider the right workflow and to

00:06:00,400 --> 00:06:05,440
choose one where you don't have

00:06:02,479 --> 00:06:06,639
lots of lots of delays and busy waiting

00:06:05,440 --> 00:06:09,919
okay so

00:06:06,639 --> 00:06:10,479
we used the first tip and we eliminated

00:06:09,919 --> 00:06:12,720
some

00:06:10,479 --> 00:06:14,400
docker rewards so what can we do about

00:06:12,720 --> 00:06:18,560
the ones which are still there

00:06:14,400 --> 00:06:18,560
and still take a while and

00:06:18,800 --> 00:06:22,160
the next few tips are going to be about

00:06:20,319 --> 00:06:25,199
the basics namely

00:06:22,160 --> 00:06:27,199
um tip number two you know you should

00:06:25,199 --> 00:06:29,440
structure your docker files

00:06:27,199 --> 00:06:30,960
in um you should think about it as an

00:06:29,440 --> 00:06:32,880
inverted pyramid

00:06:30,960 --> 00:06:34,319
so you know pyramids and eject for

00:06:32,880 --> 00:06:36,160
example they have big

00:06:34,319 --> 00:06:38,240
on the bottom and it's like really small

00:06:36,160 --> 00:06:40,080
on the top and in the same way you want

00:06:38,240 --> 00:06:43,120
to be using docker

00:06:40,080 --> 00:06:44,639
layers and the docker cache because

00:06:43,120 --> 00:06:46,720
an image is made out of layer every

00:06:44,639 --> 00:06:49,039
single instruction in your docker file

00:06:46,720 --> 00:06:50,720
translates to a single layer and those

00:06:49,039 --> 00:06:52,240
layers can be cached and reused

00:06:50,720 --> 00:06:54,880
and what you want to get out in the end

00:06:52,240 --> 00:06:58,080
is like the pyramid structured

00:06:54,880 --> 00:07:01,120
the same way as your docker file

00:06:58,080 --> 00:07:02,880
is you want to have big slow

00:07:01,120 --> 00:07:04,479
and rarely changing operations at the

00:07:02,880 --> 00:07:06,639
top and then

00:07:04,479 --> 00:07:08,639
the next one's built on top and at the

00:07:06,639 --> 00:07:10,560
very end you want to add stuff which

00:07:08,639 --> 00:07:11,680
change the changes frequently it is

00:07:10,560 --> 00:07:15,440
really fast to ask

00:07:11,680 --> 00:07:17,840
to add so

00:07:15,440 --> 00:07:18,720
if you don't have a mental model of of

00:07:17,840 --> 00:07:20,560
be cache

00:07:18,720 --> 00:07:23,039
what you have to consider is what's

00:07:20,560 --> 00:07:25,680
important is for a layer to be reused is

00:07:23,039 --> 00:07:26,720
that the previous layers didn't change

00:07:25,680 --> 00:07:29,120
because otherwise it needs to be

00:07:26,720 --> 00:07:30,000
recomputed and if you have copy

00:07:29,120 --> 00:07:33,280
instructions

00:07:30,000 --> 00:07:36,080
then the um

00:07:33,280 --> 00:07:38,319
then what matters is the content of the

00:07:36,080 --> 00:07:39,759
directory or the files so if the files

00:07:38,319 --> 00:07:41,360
has the same checksum

00:07:39,759 --> 00:07:44,720
or recursively if the directory in

00:07:41,360 --> 00:07:47,440
directory doesn't contain any changes

00:07:44,720 --> 00:07:48,319
the layer will be reduced in for other

00:07:47,440 --> 00:07:50,720
instructions

00:07:48,319 --> 00:07:52,639
it just checks the the text of the

00:07:50,720 --> 00:07:55,680
command which leads to a frequent gotcha

00:07:52,639 --> 00:07:57,440
so if you run apt-get update you might

00:07:55,680 --> 00:07:58,479
expect it to run every single time but

00:07:57,440 --> 00:08:00,400
the docker cache

00:07:58,479 --> 00:08:01,919
looks at the command sees it hasn't

00:08:00,400 --> 00:08:03,520
changed and

00:08:01,919 --> 00:08:06,319
is choosing to be lazy and to reuse

00:08:03,520 --> 00:08:06,319
previous results

00:08:08,240 --> 00:08:14,960
ok so if you restructured the layers

00:08:11,520 --> 00:08:15,680
and you've got this kind of pyramids

00:08:14,960 --> 00:08:18,000
going

00:08:15,680 --> 00:08:19,199
what can you do to help the cache be

00:08:18,000 --> 00:08:22,560
even more lazy

00:08:19,199 --> 00:08:25,520
to only do work which is required to be

00:08:22,560 --> 00:08:27,599
it to be to be used and here's where tip

00:08:25,520 --> 00:08:29,440
number three comes in namely

00:08:27,599 --> 00:08:32,800
you should be very selective about which

00:08:29,440 --> 00:08:35,680
files you copy into your images

00:08:32,800 --> 00:08:36,640
this in the python world this uh the

00:08:35,680 --> 00:08:39,039
best example is

00:08:36,640 --> 00:08:40,719
the requirements.txt file so imagine

00:08:39,039 --> 00:08:43,120
we've got a small project

00:08:40,719 --> 00:08:45,360
there's dockerfile there's a directory

00:08:43,120 --> 00:08:50,240
called codes and it contains a code.pi

00:08:45,360 --> 00:08:52,080
and requirements.txt here's what

00:08:50,240 --> 00:08:53,360
would be possible to do so you create a

00:08:52,080 --> 00:08:55,120
new directory

00:08:53,360 --> 00:08:56,480
called code it's there on the bottom

00:08:55,120 --> 00:08:58,399
it's like a docker file snippet

00:08:56,480 --> 00:08:59,680
just three lines then you copy your

00:08:58,399 --> 00:09:02,480
complete directory code

00:08:59,680 --> 00:09:03,200
into the image and then you run a pip

00:09:02,480 --> 00:09:05,120
install

00:09:03,200 --> 00:09:08,560
on this requirements file which you just

00:09:05,120 --> 00:09:11,200
copied and the problem here is that

00:09:08,560 --> 00:09:13,040
everything every every time anything

00:09:11,200 --> 00:09:15,480
inside of this code directory changes

00:09:13,040 --> 00:09:17,519
so either it's the code.pi or the

00:09:15,480 --> 00:09:19,839
requirements.txt

00:09:17,519 --> 00:09:21,279
this copy instruction will be

00:09:19,839 --> 00:09:23,440
re-executed and the next

00:09:21,279 --> 00:09:24,800
extraction instruction the pip installer

00:09:23,440 --> 00:09:27,040
will be executed again

00:09:24,800 --> 00:09:28,800
so even if you just change your code but

00:09:27,040 --> 00:09:31,279
your packages don't change

00:09:28,800 --> 00:09:32,560
they will still need to be reinstalled

00:09:31,279 --> 00:09:34,000
and you can avoid this

00:09:32,560 --> 00:09:35,680
you can avoid this by being very

00:09:34,000 --> 00:09:37,839
selective about what you copy

00:09:35,680 --> 00:09:39,120
by just copying the one file which is

00:09:37,839 --> 00:09:42,000
needed

00:09:39,120 --> 00:09:43,519
to perform the next step so instead of

00:09:42,000 --> 00:09:47,200
copying the whole directory

00:09:43,519 --> 00:09:50,000
you just copy the requirements.txt

00:09:47,200 --> 00:09:51,279
and you run pip install using this file

00:09:50,000 --> 00:09:52,800
and afterwards you

00:09:51,279 --> 00:09:55,279
overwrite it you copy the complete

00:09:52,800 --> 00:09:56,959
directory and this way you give

00:09:55,279 --> 00:10:00,560
the docker cache everything it needs to

00:09:56,959 --> 00:10:00,560
be really lazy which is nice

00:10:01,279 --> 00:10:04,560
all right so we've got our layers audits

00:10:03,920 --> 00:10:07,440
we are

00:10:04,560 --> 00:10:09,279
very selective about what we are copying

00:10:07,440 --> 00:10:11,360
but uh the thing which is

00:10:09,279 --> 00:10:13,200
probably the bottleneck right now is

00:10:11,360 --> 00:10:16,079
that the packages

00:10:13,200 --> 00:10:16,720
um which need to be downloaded really

00:10:16,079 --> 00:10:19,040
take a while

00:10:16,720 --> 00:10:20,079
so for example if you add a new a new

00:10:19,040 --> 00:10:22,560
pip dependency

00:10:20,079 --> 00:10:23,920
or a new operating operating system

00:10:22,560 --> 00:10:27,360
level package

00:10:23,920 --> 00:10:30,079
you need to download everything again

00:10:27,360 --> 00:10:31,760
and the way to fix this is to first of

00:10:30,079 --> 00:10:35,360
all to make sure that you're not

00:10:31,760 --> 00:10:39,040
installing stuff you don't really need

00:10:35,360 --> 00:10:40,560
once again a bit obvious um splitting up

00:10:39,040 --> 00:10:42,320
your dependencies into development

00:10:40,560 --> 00:10:44,560
dependencies and

00:10:42,320 --> 00:10:46,480
like kind of always needed dependencies

00:10:44,560 --> 00:10:47,279
is a good thing to do you can do it with

00:10:46,480 --> 00:10:51,200
most

00:10:47,279 --> 00:10:54,800
packaging tools and um

00:10:51,200 --> 00:10:56,959
sometimes depending on the on the

00:10:54,800 --> 00:10:58,240
on the base image you use you have to

00:10:56,959 --> 00:11:00,959
also tell the

00:10:58,240 --> 00:11:02,240
operating system package manager to just

00:11:00,959 --> 00:11:04,320
install the stuff you need

00:11:02,240 --> 00:11:05,839
for example in the case of ubuntu or

00:11:04,320 --> 00:11:08,320
debian

00:11:05,839 --> 00:11:10,959
you just tell apt with the minus minus

00:11:08,320 --> 00:11:12,800
no install recommends flag

00:11:10,959 --> 00:11:14,079
to just install the package list you

00:11:12,800 --> 00:11:17,279
tell it to and

00:11:14,079 --> 00:11:18,959
nothing extra this will help to prevent

00:11:17,279 --> 00:11:21,519
downloads from happening which don't

00:11:18,959 --> 00:11:21,519
have to happen

00:11:22,880 --> 00:11:27,120
all right so what happens if you just

00:11:26,640 --> 00:11:29,440
need

00:11:27,120 --> 00:11:30,480
to add one single package or to remove

00:11:29,440 --> 00:11:32,079
one single package

00:11:30,480 --> 00:11:33,200
and all the stuff we talked about it

00:11:32,079 --> 00:11:34,880
will not help you because the

00:11:33,200 --> 00:11:38,079
requirements changed

00:11:34,880 --> 00:11:40,880
we need to re-execute it so

00:11:38,079 --> 00:11:43,440
uh this is a relatively new feature

00:11:40,880 --> 00:11:45,600
namely that many people don't don't know

00:11:43,440 --> 00:11:49,839
about it because it's still it's still

00:11:45,600 --> 00:11:52,320
pretty fresh the part of docker

00:11:49,839 --> 00:11:53,920
which is responsible for building images

00:11:52,320 --> 00:11:57,120
is exchangeable

00:11:53,920 --> 00:12:00,959
and buildkit is like a

00:11:57,120 --> 00:12:03,680
new generation of build engine

00:12:00,959 --> 00:12:05,360
which has got some new features and tip

00:12:03,680 --> 00:12:07,680
number five is you can use it

00:12:05,360 --> 00:12:09,680
and you can use uh the cache command

00:12:07,680 --> 00:12:12,480
feature to reduce the amount of stuff

00:12:09,680 --> 00:12:12,480
you need to download

00:12:13,040 --> 00:12:16,240
so as i said bookkit is an alternative

00:12:15,279 --> 00:12:18,560
build engine

00:12:16,240 --> 00:12:20,240
it's mainly the benefits are that it's

00:12:18,560 --> 00:12:20,959
um it's concurrent that's cash cash

00:12:20,240 --> 00:12:22,959
efficient

00:12:20,959 --> 00:12:24,639
so if you've got a multi-stage build it

00:12:22,959 --> 00:12:26,880
can

00:12:24,639 --> 00:12:28,320
process multiple independent layers at

00:12:26,880 --> 00:12:30,399
the same time it downloads

00:12:28,320 --> 00:12:31,360
images at the same time if that's

00:12:30,399 --> 00:12:34,720
possible for you

00:12:31,360 --> 00:12:36,160
it's been around since docker 1806 and

00:12:34,720 --> 00:12:38,639
a few cool features i would like to

00:12:36,160 --> 00:12:40,800
point out before going on like

00:12:38,639 --> 00:12:42,399
we're going to go into cache mounts soon

00:12:40,800 --> 00:12:45,760
so

00:12:42,399 --> 00:12:49,040
think of cache mounts as build time

00:12:45,760 --> 00:12:51,200
volumes you can tell inside of your

00:12:49,040 --> 00:12:53,440
docker file you can you can tell docker

00:12:51,200 --> 00:12:54,720
well you know this directory i want you

00:12:53,440 --> 00:12:55,920
to cache it for the next time you're

00:12:54,720 --> 00:12:59,440
building this image

00:12:55,920 --> 00:13:03,040
and even if the layer needs to be to be

00:12:59,440 --> 00:13:04,720
recomputed this cache will still be used

00:13:03,040 --> 00:13:06,800
which is quite nifty

00:13:04,720 --> 00:13:09,200
you know this problem where you want to

00:13:06,800 --> 00:13:11,200
check out a private git repository

00:13:09,200 --> 00:13:13,440
you can make it a lot easier by using

00:13:11,200 --> 00:13:14,639
the ssh mount which is also provided by

00:13:13,440 --> 00:13:16,240
buildkit

00:13:14,639 --> 00:13:18,560
and if you want to use secrets inside of

00:13:16,240 --> 00:13:20,480
your docker image the secret mount is a

00:13:18,560 --> 00:13:22,800
very convenient way to do this

00:13:20,480 --> 00:13:24,880
i'm not going to go in all of these

00:13:22,800 --> 00:13:27,680
let's just look at the cache mount

00:13:24,880 --> 00:13:29,440
and if you want to try build kits one

00:13:27,680 --> 00:13:30,079
thing you need to do is you need to

00:13:29,440 --> 00:13:32,079
export

00:13:30,079 --> 00:13:33,519
an environment variable inside of your

00:13:32,079 --> 00:13:35,839
terminal

00:13:33,519 --> 00:13:36,880
so you need to set docker build kits to

00:13:35,839 --> 00:13:39,279
one

00:13:36,880 --> 00:13:40,399
and then when you when you use docker

00:13:39,279 --> 00:13:43,519
build you will

00:13:40,399 --> 00:13:46,320
automatically use the build kits build

00:13:43,519 --> 00:13:49,600
engine instead of the default docker one

00:13:46,320 --> 00:13:52,240
and it looks really nifty so um here is

00:13:49,600 --> 00:13:53,839
uh here's what it looks like you can see

00:13:52,240 --> 00:13:55,760
you get all kinds of output

00:13:53,839 --> 00:13:57,920
it looks different what i want to point

00:13:55,760 --> 00:13:59,040
out is what's built in into this

00:13:57,920 --> 00:14:01,920
interface is

00:13:59,040 --> 00:14:03,600
you see on the very top you get like a

00:14:01,920 --> 00:14:04,880
live update of how long your image build

00:14:03,600 --> 00:14:07,199
is taking overall and

00:14:04,880 --> 00:14:08,079
on the right for each single layer you

00:14:07,199 --> 00:14:10,240
get the timing

00:14:08,079 --> 00:14:11,600
how long this this layer needed to be

00:14:10,240 --> 00:14:13,680
computed

00:14:11,600 --> 00:14:14,880
and it's really cool to uh to measure

00:14:13,680 --> 00:14:16,959
how long your stuff

00:14:14,880 --> 00:14:18,800
takes and at this point after we've got

00:14:16,959 --> 00:14:19,839
the basics clear before diving into

00:14:18,800 --> 00:14:21,839
buildkit

00:14:19,839 --> 00:14:23,920
it's a it's a very good thing to see

00:14:21,839 --> 00:14:26,399
where your actual bottlenecks are

00:14:23,920 --> 00:14:28,639
if they are really in the installing

00:14:26,399 --> 00:14:29,120
stuff part or if anything else is going

00:14:28,639 --> 00:14:32,079
wrong

00:14:29,120 --> 00:14:33,120
and if you if you check that and if

00:14:32,079 --> 00:14:35,360
you're sure a little

00:14:33,120 --> 00:14:37,040
well re-download loading stuff really

00:14:35,360 --> 00:14:40,560
takes a while

00:14:37,040 --> 00:14:43,600
we can use the cache mount

00:14:40,560 --> 00:14:44,240
and here's what it looks like so you

00:14:43,600 --> 00:14:46,720
will have to

00:14:44,240 --> 00:14:47,440
modify your docker file so it's so it's

00:14:46,720 --> 00:14:50,720
possible

00:14:47,440 --> 00:14:54,240
i will just point out a few key points

00:14:50,720 --> 00:14:57,760
and then i will i will go

00:14:54,240 --> 00:15:00,399
into a semi-complete example so

00:14:57,760 --> 00:15:02,480
let's take it easy first of all the

00:15:00,399 --> 00:15:03,279
first line of the docker file needs to

00:15:02,480 --> 00:15:05,519
state

00:15:03,279 --> 00:15:06,399
which syntax is being used because we're

00:15:05,519 --> 00:15:08,639
going to use these

00:15:06,399 --> 00:15:10,079
cool nifty features where we need to

00:15:08,639 --> 00:15:12,320
tell the build engine hey

00:15:10,079 --> 00:15:13,600
by the way we are going to need to use

00:15:12,320 --> 00:15:15,839
this syntax

00:15:13,600 --> 00:15:16,800
so it doesn't it doesn't throw any

00:15:15,839 --> 00:15:18,720
errors

00:15:16,800 --> 00:15:20,560
then inside of the docker file you will

00:15:18,720 --> 00:15:21,600
need to probably need to create some new

00:15:20,560 --> 00:15:24,240
directories

00:15:21,600 --> 00:15:25,440
for example if you want pip to cache

00:15:24,240 --> 00:15:27,519
dependencies

00:15:25,440 --> 00:15:29,199
you will you will need to set to set an

00:15:27,519 --> 00:15:30,480
environment variable

00:15:29,199 --> 00:15:32,240
to point to your newly created

00:15:30,480 --> 00:15:35,360
directories so it puts the stuff

00:15:32,240 --> 00:15:39,279
in there um one edge case

00:15:35,360 --> 00:15:42,560
which which people often stumble over is

00:15:39,279 --> 00:15:44,480
docker is docker images are by default

00:15:42,560 --> 00:15:49,279
doing some magic for you for example

00:15:44,480 --> 00:15:49,279
the default configuration of apt-get

00:15:49,839 --> 00:15:55,920
it basically tells apt-gets to remove

00:15:52,720 --> 00:15:59,680
the downloaded step files after they are

00:15:55,920 --> 00:16:01,279
installed and to disable it you need to

00:15:59,680 --> 00:16:03,040
add a single line to your docker file

00:16:01,279 --> 00:16:05,600
namely this rm

00:16:03,040 --> 00:16:06,720
minus f thing which removes a docker

00:16:05,600 --> 00:16:09,920
minusclean

00:16:06,720 --> 00:16:11,920
config file so this way you download

00:16:09,920 --> 00:16:14,079
stuff into the cache folder

00:16:11,920 --> 00:16:15,519
you install it and the downloaded things

00:16:14,079 --> 00:16:16,880
still stick around which is quite

00:16:15,519 --> 00:16:18,720
important otherwise you

00:16:16,880 --> 00:16:20,639
need to download it again and again and

00:16:18,720 --> 00:16:23,199
the cache mount doesn't doesn't take any

00:16:20,639 --> 00:16:24,880
effect and then of course in the run

00:16:23,199 --> 00:16:27,120
instructions where you want to use

00:16:24,880 --> 00:16:28,800
the catch mount you need to specify

00:16:27,120 --> 00:16:31,360
which directory shall be okay

00:16:28,800 --> 00:16:32,320
in the cache and this is done with the

00:16:31,360 --> 00:16:35,839
last

00:16:32,320 --> 00:16:36,560
line so minus minus mounts of type cache

00:16:35,839 --> 00:16:40,000
and then

00:16:36,560 --> 00:16:42,720
wherever the target is and this is how a

00:16:40,000 --> 00:16:43,920
simplified dockerfile which uses

00:16:42,720 --> 00:16:46,639
buildcats

00:16:43,920 --> 00:16:48,240
looks like so you might notice there's

00:16:46,639 --> 00:16:48,880
some stuff missing we're not setting

00:16:48,240 --> 00:16:50,560
some

00:16:48,880 --> 00:16:52,720
environment variables which are good for

00:16:50,560 --> 00:16:54,800
a proper docker file because

00:16:52,720 --> 00:16:55,759
the sliders of limit of space and we

00:16:54,800 --> 00:16:57,440
don't have all the time

00:16:55,759 --> 00:16:58,720
in the world but you see all the

00:16:57,440 --> 00:17:00,000
elements are introduced here so the

00:16:58,720 --> 00:17:02,800
first line tells

00:17:00,000 --> 00:17:04,000
tells docker to use the syntax then in

00:17:02,800 --> 00:17:07,199
the third line we we

00:17:04,000 --> 00:17:09,679
set the pip cache directory to be uh

00:17:07,199 --> 00:17:13,039
directory we are creating afterwards

00:17:09,679 --> 00:17:15,760
we tell apps to please not delete

00:17:13,039 --> 00:17:16,480
or download the stuff and then in the

00:17:15,760 --> 00:17:19,439
last line

00:17:16,480 --> 00:17:20,559
we are doing an update after having

00:17:19,439 --> 00:17:23,839
mounted the cache

00:17:20,559 --> 00:17:27,199
we are installing stuff without the

00:17:23,839 --> 00:17:28,640
recommended packages and by the end we

00:17:27,199 --> 00:17:31,600
are removing the

00:17:28,640 --> 00:17:32,000
the list related to that because we

00:17:31,600 --> 00:17:35,520
don't need

00:17:32,000 --> 00:17:35,520
to stick a stick around in the image

00:17:35,760 --> 00:17:43,520
and if you do all of these

00:17:39,679 --> 00:17:46,000
you should have ways way fast builds so

00:17:43,520 --> 00:17:47,520
instead of having to wait for minutes

00:17:46,000 --> 00:17:49,120
well probably a few minutes

00:17:47,520 --> 00:17:51,200
minutes less depending on where your

00:17:49,120 --> 00:17:53,760
bottlenecks are

00:17:51,200 --> 00:17:55,039
and if you use use caching and if you

00:17:53,760 --> 00:18:00,799
structure your layers right

00:17:55,039 --> 00:18:03,039
the rebuilds will be way way way faster

00:18:00,799 --> 00:18:04,080
yeah the bottleneck will at least in my

00:18:03,039 --> 00:18:06,720
case when the

00:18:04,080 --> 00:18:08,160
the cpu and the memory requirements are

00:18:06,720 --> 00:18:09,840
what makes the builds

00:18:08,160 --> 00:18:11,200
slower and this is the next thing to be

00:18:09,840 --> 00:18:12,799
addressed there's always the next thing

00:18:11,200 --> 00:18:14,240
which you can fix

00:18:12,799 --> 00:18:17,039
but i hope you will not have to wait

00:18:14,240 --> 00:18:20,160
around for your downloads forever

00:18:17,039 --> 00:18:20,720
all right so to to recap it uh the five

00:18:20,160 --> 00:18:22,799
tips

00:18:20,720 --> 00:18:24,400
to make your docker image build faster

00:18:22,799 --> 00:18:28,559
is first of all

00:18:24,400 --> 00:18:30,559
can you avoid doing builds altogether

00:18:28,559 --> 00:18:33,440
this is a good approach because it's

00:18:30,559 --> 00:18:35,679
really fast to not do something

00:18:33,440 --> 00:18:36,799
then think about the pyramid can you

00:18:35,679 --> 00:18:39,440
reorder your layers

00:18:36,799 --> 00:18:42,160
so the slow and heavy stuff is not

00:18:39,440 --> 00:18:45,360
executed as often

00:18:42,160 --> 00:18:48,400
can you copy files selectively so

00:18:45,360 --> 00:18:50,080
you don't you don't trigger re-execution

00:18:48,400 --> 00:18:51,840
when it's not exactly needed

00:18:50,080 --> 00:18:53,840
can you download less stuff by

00:18:51,840 --> 00:18:56,400
configuring your dependencies correctly

00:18:53,840 --> 00:18:58,720
and by configuring the package manager

00:18:56,400 --> 00:19:00,400
and last but not least if you want to

00:18:58,720 --> 00:19:03,360
really measure what's going on

00:19:00,400 --> 00:19:03,760
what takes so long consider using build

00:19:03,360 --> 00:19:07,840
kits

00:19:03,760 --> 00:19:11,600
and consider using the cache mount to

00:19:07,840 --> 00:19:14,559
save yourself some downloading time

00:19:11,600 --> 00:19:15,520
and uh last of all i would like to point

00:19:14,559 --> 00:19:17,840
out like why

00:19:15,520 --> 00:19:19,679
why do i even care about docker build

00:19:17,840 --> 00:19:21,600
speed why should you

00:19:19,679 --> 00:19:23,200
care about why your images are slow and

00:19:21,600 --> 00:19:24,960
i think it's always important to keep

00:19:23,200 --> 00:19:27,200
this in mind

00:19:24,960 --> 00:19:28,880
um all of this stuff all of this like

00:19:27,200 --> 00:19:30,400
infrastructure stuff workflow stuff

00:19:28,880 --> 00:19:31,919
automation stuff is there

00:19:30,400 --> 00:19:35,360
to make it possible for you to focus

00:19:31,919 --> 00:19:37,440
more on your work to have more flow

00:19:35,360 --> 00:19:38,880
and to enjoy what you're building to

00:19:37,440 --> 00:19:40,799
build cool stuff

00:19:38,880 --> 00:19:43,440
so um i always think this is really

00:19:40,799 --> 00:19:46,000
really important to remember this one

00:19:43,440 --> 00:19:46,720
all right so um if you want to learn

00:19:46,000 --> 00:19:49,039
more

00:19:46,720 --> 00:19:50,559
about using buildkit i've got a

00:19:49,039 --> 00:19:52,080
newsletter i'm writing stuff

00:19:50,559 --> 00:19:54,000
i really want to write some articles

00:19:52,080 --> 00:19:54,480
around this topic if you want you can

00:19:54,000 --> 00:19:57,919
join

00:19:54,480 --> 00:20:00,799
it's like be superbowl.com newsletter

00:19:57,919 --> 00:20:02,240
um and one more thing i want to point

00:20:00,799 --> 00:20:04,080
out there's

00:20:02,240 --> 00:20:06,480
there's more to docker than making

00:20:04,080 --> 00:20:08,640
images faster to build so

00:20:06,480 --> 00:20:10,960
just off the top of my head we talked

00:20:08,640 --> 00:20:12,159
about the first point

00:20:10,960 --> 00:20:14,320
making sure that the builds are

00:20:12,159 --> 00:20:17,919
reasonably fast but what else matters

00:20:14,320 --> 00:20:19,200
to make docker images cool you

00:20:17,919 --> 00:20:20,960
should take care of it we are not too

00:20:19,200 --> 00:20:22,960
big you should take care of that the

00:20:20,960 --> 00:20:26,159
containers you start from the images are

00:20:22,960 --> 00:20:26,159
nice to use and operates

00:20:27,360 --> 00:20:32,240
and that your bills are liable that

00:20:30,400 --> 00:20:34,000
containers are not broken but used

00:20:32,240 --> 00:20:36,080
correctly and of course there's always

00:20:34,000 --> 00:20:37,200
the topic of security and we just talked

00:20:36,080 --> 00:20:39,520
about the first point

00:20:37,200 --> 00:20:40,640
so if you would like to deepen your

00:20:39,520 --> 00:20:43,600
overview

00:20:40,640 --> 00:20:44,880
i've taken sometimes to create a small

00:20:43,600 --> 00:20:47,520
course around this topic

00:20:44,880 --> 00:20:48,080
you can sign up it's free slash better

00:20:47,520 --> 00:20:51,200
images

00:20:48,080 --> 00:20:53,360
on my side i think it will be valuable

00:20:51,200 --> 00:20:55,520
and it will be cool if you care about

00:20:53,360 --> 00:20:57,760
docker images and want to learn more

00:20:55,520 --> 00:20:58,559
alright that's it thank you very much if

00:20:57,760 --> 00:21:02,159
we have time

00:20:58,559 --> 00:21:03,919
i would love to take some questions

00:21:02,159 --> 00:21:05,679
thank you so much uh for your talk to

00:21:03,919 --> 00:21:07,600
fellas flatislav i really appreciate

00:21:05,679 --> 00:21:09,039
those mostly simple and easy tips

00:21:07,600 --> 00:21:10,960
i'm sure this will be a great list for

00:21:09,039 --> 00:21:12,480
me to come back to we do have some

00:21:10,960 --> 00:21:14,559
questions which i'll be curating from

00:21:12,480 --> 00:21:16,240
the chat so please feel free to

00:21:14,559 --> 00:21:18,720
type out any further questions that we

00:21:16,240 --> 00:21:20,640
have uh the first question we have is

00:21:18,720 --> 00:21:22,480
from russell keith mcgee

00:21:20,640 --> 00:21:24,320
location build kits is that cache

00:21:22,480 --> 00:21:25,280
maintained her image her build her

00:21:24,320 --> 00:21:27,440
docker file

00:21:25,280 --> 00:21:29,120
i.e if there's a large app to download

00:21:27,440 --> 00:21:32,799
how widely will that download be

00:21:29,120 --> 00:21:34,400
reused by docker all right so

00:21:32,799 --> 00:21:36,240
first of all i don't know exactly i

00:21:34,400 --> 00:21:37,840
still have to find out i know if you

00:21:36,240 --> 00:21:41,039
rebuild the same image

00:21:37,840 --> 00:21:42,640
even if you rebuild it um like if you

00:21:41,039 --> 00:21:43,600
don't use cache the cache will not be

00:21:42,640 --> 00:21:45,280
used but if you

00:21:43,600 --> 00:21:47,520
don't ignore cache these cache

00:21:45,280 --> 00:21:48,240
directories will be will be taken into

00:21:47,520 --> 00:21:49,760
account

00:21:48,240 --> 00:21:52,320
and if you configure it correctly you

00:21:49,760 --> 00:21:54,640
don't need to re-download your dev files

00:21:52,320 --> 00:21:56,480
this is as far as my understanding goes

00:21:54,640 --> 00:21:58,000
i have not looked into how it transfers

00:21:56,480 --> 00:21:59,520
between different images i hope it

00:21:58,000 --> 00:22:01,919
doesn't because this would be a nasty

00:21:59,520 --> 00:22:01,919
gotcha

00:22:02,400 --> 00:22:05,600
yeah um we had another audience member

00:22:04,960 --> 00:22:07,440
adam

00:22:05,600 --> 00:22:09,280
say that they were trying to find the

00:22:07,440 --> 00:22:12,720
documentation for the casing

00:22:09,280 --> 00:22:14,080
um you know

00:22:12,720 --> 00:22:16,400
i don't know where the documentation is

00:22:14,080 --> 00:22:18,080
for it oh yeah i i've got the link i

00:22:16,400 --> 00:22:21,200
will post it in the chat

00:22:18,080 --> 00:22:23,600
there yeah

00:22:21,200 --> 00:22:25,600
so it's it's still a very very early

00:22:23,600 --> 00:22:28,000
feature and documentation is

00:22:25,600 --> 00:22:29,600
bars and also the people who use it

00:22:28,000 --> 00:22:30,799
there are not enough people to to have

00:22:29,600 --> 00:22:32,960
written about it

00:22:30,799 --> 00:22:34,640
which is why i care because i think it's

00:22:32,960 --> 00:22:35,520
a cool feature and i would like to share

00:22:34,640 --> 00:22:38,159
what i learned

00:22:35,520 --> 00:22:39,440
while learning it because it's useful

00:22:38,159 --> 00:22:41,280
definitely

00:22:39,440 --> 00:22:43,360
um there's another question that i've

00:22:41,280 --> 00:22:44,799
got for myself which is what's the most

00:22:43,360 --> 00:22:45,280
time that you've saved on a docker build

00:22:44,799 --> 00:22:46,640
what

00:22:45,280 --> 00:22:48,159
and what was the most frustrating

00:22:46,640 --> 00:22:48,960
process to cut down time that you've run

00:22:48,159 --> 00:22:52,400
into

00:22:48,960 --> 00:22:54,400
so this here's here's a tip i found up

00:22:52,400 --> 00:22:55,679
out really early when working with

00:22:54,400 --> 00:22:58,799
docker it was like back

00:22:55,679 --> 00:23:00,400
back in the early days um my internet

00:22:58,799 --> 00:23:02,400
connection was very really bad

00:23:00,400 --> 00:23:04,080
and i needed to wait forever to rebuild

00:23:02,400 --> 00:23:05,039
my images over time so eventually i

00:23:04,080 --> 00:23:09,039
switched

00:23:05,039 --> 00:23:10,480
to um to a vp virtual private server to

00:23:09,039 --> 00:23:13,440
a vps

00:23:10,480 --> 00:23:14,559
and um when you are on the best internet

00:23:13,440 --> 00:23:16,080
connection possible

00:23:14,559 --> 00:23:17,679
building docker images is way less

00:23:16,080 --> 00:23:19,520
painful before this i think i

00:23:17,679 --> 00:23:22,559
might have waited for like 10 or 15

00:23:19,520 --> 00:23:26,000
minutes or something

00:23:22,559 --> 00:23:26,880
multitasking and like interrupt driven

00:23:26,000 --> 00:23:28,640
work is a

00:23:26,880 --> 00:23:31,360
very big problem for myself but it's

00:23:28,640 --> 00:23:34,000
it's so frequent around steropsy topics

00:23:31,360 --> 00:23:34,000
unfortunately

00:23:34,640 --> 00:23:38,799
that makes sense all right um we've got

00:23:37,120 --> 00:23:39,200
some conversation going on in the chat

00:23:38,799 --> 00:23:41,279
which

00:23:39,200 --> 00:23:42,799
is really good so thank you everyone for

00:23:41,279 --> 00:23:46,720
uh contributing

00:23:42,799 --> 00:23:48,400
um a link to a talk from 2019 pike on a

00:23:46,720 --> 00:23:48,880
u on how to lose a container in 10

00:23:48,400 --> 00:23:52,000
minutes

00:23:48,880 --> 00:23:53,760
uh about container security um

00:23:52,000 --> 00:23:55,919
but yeah thank you very much for sharing

00:23:53,760 --> 00:23:58,000
today vladislav the next presentation we

00:23:55,919 --> 00:23:59,039
have is in about 15 minutes from katie

00:23:58,000 --> 00:24:00,799
bell it's called

00:23:59,039 --> 00:24:02,480
text files full of punctuation there

00:24:00,799 --> 00:24:05,760
must be a better way to code

00:24:02,480 --> 00:24:14,720
um see you all there thank you very much

00:24:05,760 --> 00:24:14,720

YouTube URL: https://www.youtube.com/watch?v=-LSiF8RNM1g


