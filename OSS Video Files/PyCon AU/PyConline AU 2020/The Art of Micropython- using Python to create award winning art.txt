Title: The Art of Micropython- using Python to create award winning art
Publication date: 2020-09-08
Playlist: PyConline AU 2020
Description: 
	Peter van der Burg

https://2020.pycon.org.au/program/XLL9US

The artwork’s description is: “Using the Fibonacci sequence as the basis for the work, I create a dynamic image of the "whole"- an intact and technological world, transitioning through to what appears to be broken and in crisis. The  four Fibonacci boards move in a cyclic and synchronous way from an "S" to the whole "O" back to the "S" enhanced with the use of colour LEDs progressing from red to green back to red palette expressing my narrative.”

This talk will focus on the MicroPython code that synchronises electro-mechanical aspects of the project and how I overcame the specific challenges of keeping a ‘hobby’ servo in sync with the LED light sequencing.

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

Python, PyCon, PyConAU, PyConline

Sat Sep  5 14:05:00 2020 at Curlyboi
Captions: 
	00:00:01,520 --> 00:00:04,160
hey everyone welcome back to the curly

00:00:03,760 --> 00:00:07,040
boy

00:00:04,160 --> 00:00:08,720
theater right now i'm very excited to

00:00:07,040 --> 00:00:10,559
introduce peter vanderburgh

00:00:08,720 --> 00:00:12,080
who's going to be talking about the art

00:00:10,559 --> 00:00:14,000
of micro python

00:00:12,080 --> 00:00:15,599
how are you doing today peter oh very

00:00:14,000 --> 00:00:18,480
well thanks uh lily

00:00:15,599 --> 00:00:19,439
yes excited to be here i'm excited to

00:00:18,480 --> 00:00:22,080
have you

00:00:19,439 --> 00:00:23,920
um now just uh as a quick bio to

00:00:22,080 --> 00:00:26,080
introduce peter peter's career spans a

00:00:23,920 --> 00:00:27,599
few decades in telecommunications and

00:00:26,080 --> 00:00:28,560
local government as a technical

00:00:27,599 --> 00:00:31,840
specialist

00:00:28,560 --> 00:00:34,079
and then into management now contract

00:00:31,840 --> 00:00:36,480
now is contract it project manager and a

00:00:34,079 --> 00:00:38,480
freelance python programmer in melbourne

00:00:36,480 --> 00:00:40,320
peter likes to tinker with electronics

00:00:38,480 --> 00:00:42,640
and interfacing microcontrollers with

00:00:40,320 --> 00:00:44,719
the real world mainly micro python

00:00:42,640 --> 00:00:46,079
and upcycle obsolete computer hardware

00:00:44,719 --> 00:00:49,200
into both jewelry and

00:00:46,079 --> 00:00:52,320
art so really excited to hear you talk

00:00:49,200 --> 00:00:54,960
about micropython and art and um

00:00:52,320 --> 00:00:56,320
i'll hand it over to you thanks very

00:00:54,960 --> 00:00:58,960
much lilly

00:00:56,320 --> 00:01:00,000
and welcome everybody uh for joining me

00:00:58,960 --> 00:01:04,559
this afternoon

00:01:00,000 --> 00:01:04,559
it's uh great to be here just excuse me

00:01:08,960 --> 00:01:13,840
so the art of micro python uh

00:01:12,159 --> 00:01:15,920
this this piece was created for an

00:01:13,840 --> 00:01:18,080
exhibition in my local city of

00:01:15,920 --> 00:01:21,280
whittlesea here in north melbourne

00:01:18,080 --> 00:01:24,240
last year and

00:01:21,280 --> 00:01:27,840
i was quite chuffed to to actually get

00:01:24,240 --> 00:01:27,840
an award

00:01:28,000 --> 00:01:31,280
so um yes we we've just heard a bit of a

00:01:30,240 --> 00:01:35,119
bit of a bio but

00:01:31,280 --> 00:01:38,240
um i like to create mixed media

00:01:35,119 --> 00:01:39,759
art and there's a few examples there but

00:01:38,240 --> 00:01:40,079
i also like to take the opportunity

00:01:39,759 --> 00:01:43,280
right

00:01:40,079 --> 00:01:46,880
now to to thank uh effie my partner and

00:01:43,280 --> 00:01:48,640
the family at home uh for for their

00:01:46,880 --> 00:01:51,119
support and encouragement uh that

00:01:48,640 --> 00:01:54,720
motivates me to create such uh

00:01:51,119 --> 00:01:57,920
materials as well as uh my mates at uh

00:01:54,720 --> 00:02:00,320
the meet up uh matt and crew and also

00:01:57,920 --> 00:02:03,200
the support of local artists here in in

00:02:00,320 --> 00:02:06,399
the city of whittlesea

00:02:03,200 --> 00:02:08,959
so uh this is the uh artist's

00:02:06,399 --> 00:02:10,399
uh description the other statement that

00:02:08,959 --> 00:02:11,440
goes with the piece you can see in the

00:02:10,399 --> 00:02:15,200
photo that it's

00:02:11,440 --> 00:02:18,319
reasonably large uh 600 by 600

00:02:15,200 --> 00:02:20,160
and that gives a bit of scale to to the

00:02:18,319 --> 00:02:23,680
piece

00:02:20,160 --> 00:02:25,760
so the synopsis today really is

00:02:23,680 --> 00:02:27,200
to give a bit of context for the code we

00:02:25,760 --> 00:02:28,160
need to understand the mechanical and

00:02:27,200 --> 00:02:32,160
electronic

00:02:28,160 --> 00:02:34,879
uh aspects of of the creation

00:02:32,160 --> 00:02:36,000
um to really show what i was trying to

00:02:34,879 --> 00:02:39,280
achieve

00:02:36,000 --> 00:02:41,519
we'll be looking into the code in detail

00:02:39,280 --> 00:02:42,560
that synchronizes the electromechanical

00:02:41,519 --> 00:02:45,840
aspects

00:02:42,560 --> 00:02:51,840
and how i overcome uh the few challenges

00:02:45,840 --> 00:02:51,840
that i had in making it all work

00:02:53,360 --> 00:02:56,480
it's always useful maybe you have this

00:02:55,440 --> 00:02:58,879
yourself

00:02:56,480 --> 00:03:00,400
that um when you when you embark on

00:02:58,879 --> 00:03:01,760
something is

00:03:00,400 --> 00:03:04,400
have a few principles that guide you

00:03:01,760 --> 00:03:06,080
along the way clearly as being an artist

00:03:04,400 --> 00:03:06,959
i'll begin with the end in mind i have a

00:03:06,080 --> 00:03:09,599
very clear

00:03:06,959 --> 00:03:11,360
vision of of what i want but the

00:03:09,599 --> 00:03:13,440
principles

00:03:11,360 --> 00:03:14,640
these principles really help me to to

00:03:13,440 --> 00:03:17,280
remain focused

00:03:14,640 --> 00:03:18,560
predo is clearly my number one where i

00:03:17,280 --> 00:03:20,400
find that

00:03:18,560 --> 00:03:21,680
generally twenty percent of the effort

00:03:20,400 --> 00:03:22,800
gets you eighty percent there and it

00:03:21,680 --> 00:03:25,599
only takes a few

00:03:22,800 --> 00:03:27,360
iterations to get you about ninety nine

00:03:25,599 --> 00:03:29,360
percent there

00:03:27,360 --> 00:03:31,599
when i'm coding always have a fully

00:03:29,360 --> 00:03:34,239
working system after an editing session

00:03:31,599 --> 00:03:36,400
if not roll back i've got to keep

00:03:34,239 --> 00:03:39,200
telling myself that'll never be perfect

00:03:36,400 --> 00:03:40,640
perfection is a bit of a perfectionist

00:03:39,200 --> 00:03:44,799
perfection is

00:03:40,640 --> 00:03:47,120
subjective and

00:03:44,799 --> 00:03:47,840
point number four is important as well

00:03:47,120 --> 00:03:50,000
is uh

00:03:47,840 --> 00:03:51,680
it's only a problem if it's a problem

00:03:50,000 --> 00:03:56,159
otherwise stay away from it

00:03:51,680 --> 00:04:01,200
and of course it can always be improved

00:03:56,159 --> 00:04:04,239
but remember points one to four

00:04:01,200 --> 00:04:06,080
so why micro python well um

00:04:04,239 --> 00:04:08,080
back in back in the early 80s i got my

00:04:06,080 --> 00:04:10,879
first first computer it was a

00:04:08,080 --> 00:04:13,120
zx81 and with that i started tinkering

00:04:10,879 --> 00:04:16,799
with assembler

00:04:13,120 --> 00:04:18,000
basic fourth uh and then later in my

00:04:16,799 --> 00:04:19,759
career i i

00:04:18,000 --> 00:04:22,160
became a unix systems administrator

00:04:19,759 --> 00:04:26,320
where i where i had to focus on

00:04:22,160 --> 00:04:28,880
shell scripting pill and sql

00:04:26,320 --> 00:04:30,560
and i managed to steer clear well clear

00:04:28,880 --> 00:04:33,360
of c

00:04:30,560 --> 00:04:35,919
and then about five years ago i decided

00:04:33,360 --> 00:04:37,840
to get back into hardware of course the

00:04:35,919 --> 00:04:40,240
microprocessor world had changed a bit

00:04:37,840 --> 00:04:42,560
since since the 80s

00:04:40,240 --> 00:04:44,240
and with raspberry pi's and i bought

00:04:42,560 --> 00:04:46,880
some arduino hardware

00:04:44,240 --> 00:04:48,800
um got back into it now what i found

00:04:46,880 --> 00:04:52,240
with uh with the raspberry pi

00:04:48,800 --> 00:04:53,440
i could um uh program it and python i

00:04:52,240 --> 00:04:55,440
hadn't actually come across

00:04:53,440 --> 00:04:56,960
python well i've come across it but i

00:04:55,440 --> 00:05:00,240
hadn't lifted a lid on it

00:04:56,960 --> 00:05:01,199
so um with python i found it was very

00:05:00,240 --> 00:05:04,800
easy to code

00:05:01,199 --> 00:05:08,000
and i get get results quickly

00:05:04,800 --> 00:05:11,360
not so with arduino i found arduino

00:05:08,000 --> 00:05:12,240
too much c like and uh i went nut this

00:05:11,360 --> 00:05:16,400
isn't for me

00:05:12,240 --> 00:05:19,440
but while i was um uh researching

00:05:16,400 --> 00:05:20,560
uh python and raspberry pi i stumbled

00:05:19,440 --> 00:05:24,000
across

00:05:20,560 --> 00:05:27,360
a uh a talk that damien george did here

00:05:24,000 --> 00:05:29,919
on at pycon a number of years ago on the

00:05:27,360 --> 00:05:31,520
uh the merits of python for hardware

00:05:29,919 --> 00:05:34,000
micropython

00:05:31,520 --> 00:05:36,160
and i dug into that and i was i was

00:05:34,000 --> 00:05:39,520
hooked got rid of the arduino stuff

00:05:36,160 --> 00:05:42,400
and the working on the esps

00:05:39,520 --> 00:05:43,120
and so for this application micropython

00:05:42,400 --> 00:05:46,479
it was

00:05:43,120 --> 00:05:49,039
the the no-brainer so

00:05:46,479 --> 00:05:50,560
um contextually the mechanical

00:05:49,039 --> 00:05:55,280
construction so

00:05:50,560 --> 00:05:59,520
that the whole frame is 600 by 600 i um

00:05:55,280 --> 00:06:02,080
i used a pcb a pc motherboard pcb

00:05:59,520 --> 00:06:02,960
as fibonacci forms so there are four of

00:06:02,080 --> 00:06:05,759
those

00:06:02,960 --> 00:06:06,160
they connected through an axle to a gear

00:06:05,759 --> 00:06:09,759
on

00:06:06,160 --> 00:06:13,120
on the other side uh 3d printed

00:06:09,759 --> 00:06:14,800
that's connected to a hobby servo

00:06:13,120 --> 00:06:17,840
and so that's the mechanic mechanical

00:06:14,800 --> 00:06:20,160
part of it done and now for the lighting

00:06:17,840 --> 00:06:20,960
that are that i've got around the edges

00:06:20,160 --> 00:06:25,600
i used

00:06:20,960 --> 00:06:25,600
uh acrylic rod as a diffuser

00:06:26,560 --> 00:06:30,319
for the electronics there are lots of

00:06:27,919 --> 00:06:31,919
neopixels there um they're about 70 all

00:06:30,319 --> 00:06:36,080
up across the whole

00:06:31,919 --> 00:06:40,080
creation a couple of esp8266s

00:06:36,080 --> 00:06:40,080
and switch mode to power supplies

00:06:40,639 --> 00:06:48,960
and this is what version one looked like

00:06:43,840 --> 00:06:53,840
so here we've got one esp8266

00:06:48,960 --> 00:06:55,840
using as a simple simplified diagram

00:06:53,840 --> 00:06:57,280
two gpios one for the pulse width

00:06:55,840 --> 00:07:00,319
modulation to the

00:06:57,280 --> 00:07:03,520
servo there's a direct connect and

00:07:00,319 --> 00:07:06,880
another line to the neo pixels for the

00:07:03,520 --> 00:07:10,080
for the serial data stream um

00:07:06,880 --> 00:07:13,199
i needed 3.3 volts and 5 volts and

00:07:10,080 --> 00:07:16,319
that it was fine very

00:07:13,199 --> 00:07:20,479
very simple and the code

00:07:16,319 --> 00:07:23,840
the code for that was equally simple

00:07:20,479 --> 00:07:25,840
so um you know

00:07:23,840 --> 00:07:27,840
just keep things straight forward have

00:07:25,840 --> 00:07:28,880
an open sequence and a closed sequence

00:07:27,840 --> 00:07:32,160
uh pretty much

00:07:28,880 --> 00:07:33,759
the same and here i'm uh

00:07:32,160 --> 00:07:35,759
i've got a start position a stop

00:07:33,759 --> 00:07:39,199
position

00:07:35,759 --> 00:07:41,599
uh send the the uh position to the to

00:07:39,199 --> 00:07:44,879
the servo

00:07:41,599 --> 00:07:49,360
and that same number is a lookup uh

00:07:44,879 --> 00:07:51,360
for it for a led function that then

00:07:49,360 --> 00:07:54,000
kicks kicks off the the appropriate

00:07:51,360 --> 00:07:54,000
animation

00:07:56,840 --> 00:08:01,599
but

00:07:58,400 --> 00:08:04,720
it was inherently unstable

00:08:01,599 --> 00:08:06,479
uh so unstable that uh i it was damaging

00:08:04,720 --> 00:08:09,280
the hardware

00:08:06,479 --> 00:08:10,800
so i found that the the led dimming

00:08:09,280 --> 00:08:12,800
sequences

00:08:10,800 --> 00:08:14,560
seem to affect the pulse width

00:08:12,800 --> 00:08:17,599
modulation timing

00:08:14,560 --> 00:08:19,199
and that those changes in the timing get

00:08:17,599 --> 00:08:21,919
amplified in the servo

00:08:19,199 --> 00:08:23,199
and the servo was basically shaking the

00:08:21,919 --> 00:08:26,080
uh

00:08:23,199 --> 00:08:27,599
the structure to pieces uh the small dc

00:08:26,080 --> 00:08:30,000
motor while it was concentrating its

00:08:27,599 --> 00:08:32,000
power into a very small angle

00:08:30,000 --> 00:08:33,680
uh there's a lot of torque in behind

00:08:32,000 --> 00:08:36,640
that

00:08:33,680 --> 00:08:37,120
and these servos are very fast acting

00:08:36,640 --> 00:08:40,159
and

00:08:37,120 --> 00:08:42,719
uh with with the mass

00:08:40,159 --> 00:08:43,279
connected to the whole structure there

00:08:42,719 --> 00:08:45,519
was

00:08:43,279 --> 00:08:46,560
too much force for the little motor and

00:08:45,519 --> 00:08:47,920
i burnt

00:08:46,560 --> 00:08:49,600
burnt out the motor in fact i went

00:08:47,920 --> 00:08:54,320
through a few um

00:08:49,600 --> 00:08:57,440
servos of solving solving the problems

00:08:54,320 --> 00:09:00,640
so the first set of solutions was uh to

00:08:57,440 --> 00:09:04,720
separate the led uh

00:09:00,640 --> 00:09:06,399
functions from the servo so so the um

00:09:04,720 --> 00:09:08,560
the electronics we're talking about the

00:09:06,399 --> 00:09:11,680
the hardware

00:09:08,560 --> 00:09:13,920
so the leds were connected to one

00:09:11,680 --> 00:09:15,680
micro micro controller while the server

00:09:13,920 --> 00:09:18,480
was connected to another

00:09:15,680 --> 00:09:20,000
and i also boosted the power so while

00:09:18,480 --> 00:09:23,680
the voltages were fine

00:09:20,000 --> 00:09:25,760
uh the instantaneous current demand from

00:09:23,680 --> 00:09:28,399
especially the servo and the leds was

00:09:25,760 --> 00:09:29,519
too high for the for the original uh

00:09:28,399 --> 00:09:31,839
power pack

00:09:29,519 --> 00:09:33,040
and so with a laptop power supply with

00:09:31,839 --> 00:09:34,320
lots of lots of power

00:09:33,040 --> 00:09:36,320
truck loads of power and a couple of

00:09:34,320 --> 00:09:39,600
high efficiency buck converters

00:09:36,320 --> 00:09:41,440
uh managed to solve that problem

00:09:39,600 --> 00:09:42,720
but they created a new problem how do i

00:09:41,440 --> 00:09:45,760
synchronize uh

00:09:42,720 --> 00:09:49,360
two two controllers

00:09:45,760 --> 00:09:52,640
i looked at i squared c um

00:09:49,360 --> 00:09:54,720
however in the esp the i squared c uh

00:09:52,640 --> 00:09:57,760
these these devices can only be masters

00:09:54,720 --> 00:09:59,920
whereas i needed a master and a slave

00:09:57,760 --> 00:10:01,279
i didn't have the a great working

00:09:59,920 --> 00:10:03,680
knowledge of spi

00:10:01,279 --> 00:10:04,640
so spi could have done it but i didn't

00:10:03,680 --> 00:10:07,040
have the time

00:10:04,640 --> 00:10:09,839
to to dig into that and get that working

00:10:07,040 --> 00:10:15,279
so i chose a simple method of

00:10:09,839 --> 00:10:15,279
using some gpio lines three of them

00:10:16,240 --> 00:10:20,640
so so the master is the outputs and

00:10:18,560 --> 00:10:22,560
driving something puts it into

00:10:20,640 --> 00:10:23,839
the second controller and that's what

00:10:22,560 --> 00:10:26,959
that looks like

00:10:23,839 --> 00:10:31,760
so on the top left there we have

00:10:26,959 --> 00:10:31,760
a counter reset uh

00:10:33,279 --> 00:10:38,720
the the step pulse and the direction

00:10:36,320 --> 00:10:38,720
flag

00:10:39,680 --> 00:10:47,839
so it's just three lines across

00:10:54,079 --> 00:10:57,680
so looking at the code once again the

00:10:56,800 --> 00:11:02,000
the close function

00:10:57,680 --> 00:11:05,600
added a bit of extra stuff into here um

00:11:02,000 --> 00:11:08,720
and uh i added a a function

00:11:05,600 --> 00:11:09,760
that uh this this function here external

00:11:08,720 --> 00:11:14,000
servo

00:11:09,760 --> 00:11:18,480
uh that handles uh the the pulsing

00:11:14,000 --> 00:11:18,480
from the master to the slave

00:11:21,279 --> 00:11:24,560
on the slave

00:11:25,360 --> 00:11:30,480
on the slave uh we have the inputs

00:11:28,399 --> 00:11:32,240
the three inputs so we get the step

00:11:30,480 --> 00:11:34,640
pulse the direction flag

00:11:32,240 --> 00:11:36,320
and the counter reset trigger the the

00:11:34,640 --> 00:11:36,880
trigger is to ensure that the counters

00:11:36,320 --> 00:11:40,880
remain

00:11:36,880 --> 00:11:43,839
in in sync between the two

00:11:40,880 --> 00:11:43,839
between the two devices

00:11:44,000 --> 00:11:51,440
and the code for that is

00:11:47,600 --> 00:11:55,279
when initializing the the second

00:11:51,440 --> 00:11:59,040
microprocessor we're setting the pins

00:11:55,279 --> 00:12:02,959
as as inputs and instantiating

00:11:59,040 --> 00:12:07,200
the interrupt callbacks with

00:12:02,959 --> 00:12:10,399
functions as the interrupt handlers

00:12:07,200 --> 00:12:11,200
so basically the the slave just starts

00:12:10,399 --> 00:12:13,040
up

00:12:11,200 --> 00:12:14,720
with the pins and then once the

00:12:13,040 --> 00:12:18,399
interrupts have been

00:12:14,720 --> 00:12:25,200
instantiated they just uh it just

00:12:18,399 --> 00:12:27,440
sits and waits for interrupts

00:12:25,200 --> 00:12:27,440
but

00:12:29,760 --> 00:12:35,200
it was so destroying going into the

00:12:33,360 --> 00:12:39,839
gallery it was so destroying

00:12:35,200 --> 00:12:39,839
seeing my my precious dying

00:12:43,680 --> 00:12:48,959
what was happening was that

00:12:46,880 --> 00:12:51,200
i'd overlooked one aspect of it which

00:12:48,959 --> 00:12:52,639
was that the gallery staff didn't know

00:12:51,200 --> 00:12:56,240
how this thing worked

00:12:52,639 --> 00:12:58,320
and i'd made a big assumption that

00:12:56,240 --> 00:12:59,440
it'll switch off in the closed position

00:12:58,320 --> 00:13:02,079
even though at that point

00:12:59,440 --> 00:13:04,160
i hadn't explicitly programmed it to do

00:13:02,079 --> 00:13:06,880
so

00:13:04,160 --> 00:13:07,760
the staff would switch the unit off at

00:13:06,880 --> 00:13:10,480
the end of the day

00:13:07,760 --> 00:13:11,120
and switch it on uh in the in the

00:13:10,480 --> 00:13:13,360
morning

00:13:11,120 --> 00:13:15,760
and if it wasn't in the home position

00:13:13,360 --> 00:13:18,480
the initialization of the servo

00:13:15,760 --> 00:13:19,360
would whip literally whip the forms into

00:13:18,480 --> 00:13:22,160
the home position

00:13:19,360 --> 00:13:24,240
and then attempt to start the routine

00:13:22,160 --> 00:13:28,240
and as we saw earlier

00:13:24,240 --> 00:13:30,320
uh the um that created

00:13:28,240 --> 00:13:31,760
there's a lot of energy in that and it

00:13:30,320 --> 00:13:36,160
was destroying

00:13:31,760 --> 00:13:36,160
um the motors basically

00:13:36,480 --> 00:13:39,839
so now it is a problem i need to do

00:13:38,000 --> 00:13:42,240
something about that but before

00:13:39,839 --> 00:13:43,360
we can solve that problem we need an

00:13:42,240 --> 00:13:47,120
anatomy

00:13:43,360 --> 00:13:50,000
lesson of a servo

00:13:47,120 --> 00:13:51,199
um a servo is is quite a complex little

00:13:50,000 --> 00:13:54,480
beast

00:13:51,199 --> 00:13:57,279
uh we've got a ordinary dc motor

00:13:54,480 --> 00:13:58,399
uh that uh that instead of having just

00:13:57,279 --> 00:14:01,600
voltage across the

00:13:58,399 --> 00:14:04,240
the motor uh has has a control

00:14:01,600 --> 00:14:05,440
has controlled electronics the output of

00:14:04,240 --> 00:14:08,720
the motor

00:14:05,440 --> 00:14:11,920
the shaft drives a gearbox

00:14:08,720 --> 00:14:14,160
which gears it right down and

00:14:11,920 --> 00:14:15,600
and attached to the gearbox is a

00:14:14,160 --> 00:14:18,800
potentiometer

00:14:15,600 --> 00:14:20,560
and there's the uh the knob essentially

00:14:18,800 --> 00:14:21,360
of the potentiometer is connected to the

00:14:20,560 --> 00:14:23,600
gearbox

00:14:21,360 --> 00:14:24,560
and then that creates a feedback loop

00:14:23,600 --> 00:14:28,079
back into the h

00:14:24,560 --> 00:14:30,800
bridge electronics which compares

00:14:28,079 --> 00:14:31,360
what the signal is that it compares the

00:14:30,800 --> 00:14:34,399
the

00:14:31,360 --> 00:14:36,959
pulse width with the

00:14:34,399 --> 00:14:39,040
feedback and the electronics which then

00:14:36,959 --> 00:14:42,000
determines the voltage that needs to

00:14:39,040 --> 00:14:42,639
go across the motor so when when things

00:14:42,000 --> 00:14:44,399
are equal

00:14:42,639 --> 00:14:45,680
there's zero volts across the motor and

00:14:44,399 --> 00:14:49,199
the motor is stationary

00:14:45,680 --> 00:14:51,760
if we change the the duty cycle here

00:14:49,199 --> 00:14:53,120
then we get a voltage which drives the

00:14:51,760 --> 00:14:55,839
motor which drives the gear

00:14:53,120 --> 00:14:58,000
which drives the the shaft of the

00:14:55,839 --> 00:15:01,360
potentiometer which creates an error

00:14:58,000 --> 00:15:02,880
and then corrects it so that

00:15:01,360 --> 00:15:04,639
this feedback loop is closed at the

00:15:02,880 --> 00:15:07,839
moment but we need to open that up

00:15:04,639 --> 00:15:10,160
and we need to put that into our

00:15:07,839 --> 00:15:11,839
processor and use it

00:15:10,160 --> 00:15:13,519
so that's exactly what i've done this is

00:15:11,839 --> 00:15:16,800
one of my broken

00:15:13,519 --> 00:15:18,560
uh servos so it's just a tower pro uh

00:15:16,800 --> 00:15:20,320
hobby servo so we've got the motor there

00:15:18,560 --> 00:15:22,320
we've got the gear box there

00:15:20,320 --> 00:15:24,160
and this is the uh electronics the

00:15:22,320 --> 00:15:26,720
actual electronics here

00:15:24,160 --> 00:15:28,160
with the standard three-wise pulse width

00:15:26,720 --> 00:15:30,880
modulation input

00:15:28,160 --> 00:15:31,519
plus up to max seven volts ground and

00:15:30,880 --> 00:15:33,759
then i

00:15:31,519 --> 00:15:34,720
attach this uh blue wire or in this case

00:15:33,759 --> 00:15:37,120
a blue eye

00:15:34,720 --> 00:15:38,240
to the wiper of the potentiometer and

00:15:37,120 --> 00:15:41,839
that gives me

00:15:38,240 --> 00:15:46,720
uh the a0

00:15:41,839 --> 00:15:51,040
to 3.3 volts which is very convenient

00:15:46,720 --> 00:15:51,040
so attaching it to to the hardware

00:15:51,360 --> 00:15:58,320
so zero to three 3.3 the adc in the esps

00:15:55,680 --> 00:16:01,360
has a dynamic range of 0 to 1 volt

00:15:58,320 --> 00:16:04,079
and a count of 0 to 1024

00:16:01,360 --> 00:16:05,120
so what we what i do here is through a

00:16:04,079 --> 00:16:08,320
very simple

00:16:05,120 --> 00:16:10,000
resistive voltage divider so while i get

00:16:08,320 --> 00:16:12,079
three point three zero to three point

00:16:10,000 --> 00:16:15,279
three volts there i get zero to one volt

00:16:12,079 --> 00:16:17,600
there and i feed that into both uh

00:16:15,279 --> 00:16:19,279
micro controllers so both the master and

00:16:17,600 --> 00:16:22,240
the slave can keep track

00:16:19,279 --> 00:16:24,480
at all times of uh with where the servo

00:16:22,240 --> 00:16:24,480
is

00:16:25,600 --> 00:16:28,639
so what do i do with it and how do i use

00:16:27,680 --> 00:16:31,759
it so

00:16:28,639 --> 00:16:35,279
i could simply just create a a table

00:16:31,759 --> 00:16:38,560
of duty cycle versus adc voltage

00:16:35,279 --> 00:16:41,519
but um when i was uh

00:16:38,560 --> 00:16:42,639
working on that i found that uh i was

00:16:41,519 --> 00:16:45,680
getting

00:16:42,639 --> 00:16:47,759
differences between the the hardware and

00:16:45,680 --> 00:16:51,040
of course um we're dealing with analog

00:16:47,759 --> 00:16:54,800
electronics here so and not all

00:16:51,040 --> 00:16:57,759
analog devices are created equal

00:16:54,800 --> 00:16:58,880
and nor are all esps created equal as i

00:16:57,759 --> 00:17:00,240
also found out so

00:16:58,880 --> 00:17:02,079
i was having different results of

00:17:00,240 --> 00:17:06,319
different combinations of servos

00:17:02,079 --> 00:17:08,720
and esps so i needed to do something

00:17:06,319 --> 00:17:08,720
else

00:17:17,760 --> 00:17:23,280
so uh to determine the linearity of um

00:17:21,120 --> 00:17:24,160
of these devices i created a small bit

00:17:23,280 --> 00:17:26,959
of code

00:17:24,160 --> 00:17:27,280
uh very simple so i've got the range of

00:17:26,959 --> 00:17:29,840
the

00:17:27,280 --> 00:17:30,480
the duty cycle and i just read the

00:17:29,840 --> 00:17:34,480
voltage

00:17:30,480 --> 00:17:37,840
and i put it into a list or

00:17:34,480 --> 00:17:40,880
also a csv

00:17:37,840 --> 00:17:43,760
and with that i do a linear regression

00:17:40,880 --> 00:17:46,640
analysis now microsoft excel

00:17:43,760 --> 00:17:47,840
conveniently gives that in the form of a

00:17:46,640 --> 00:17:49,600
scatter graph

00:17:47,840 --> 00:17:51,039
which is the pragmatic approach that i

00:17:49,600 --> 00:17:53,520
took

00:17:51,039 --> 00:17:55,760
and i did subsequently find a python way

00:17:53,520 --> 00:17:58,559
of doing it which i'll show you

00:17:55,760 --> 00:17:59,200
but the pragmatic approach gave me this

00:17:58,559 --> 00:18:00,640
and

00:17:59,200 --> 00:18:02,160
so it's nice and linear it looks nice

00:18:00,640 --> 00:18:03,600
and linear but if you look closely you

00:18:02,160 --> 00:18:06,320
can see it's a bit lumpy

00:18:03,600 --> 00:18:06,799
you can see some a few dips a few rises

00:18:06,320 --> 00:18:10,000
and

00:18:06,799 --> 00:18:12,400
here's is one here and what that

00:18:10,000 --> 00:18:14,559
when when we're traveling through the

00:18:12,400 --> 00:18:16,720
duty cycle it's

00:18:14,559 --> 00:18:18,080
um at that point there it would actually

00:18:16,720 --> 00:18:21,120
shutter it

00:18:18,080 --> 00:18:22,240
the servo jumps and up here as well but

00:18:21,120 --> 00:18:24,559
it was linear enough

00:18:22,240 --> 00:18:28,000
for me to to get this formula which is

00:18:24,559 --> 00:18:30,400
exactly what i needed

00:18:28,000 --> 00:18:31,440
just for fun um we can do it in python

00:18:30,400 --> 00:18:34,720
now python

00:18:31,440 --> 00:18:36,000
um see python and there's some very good

00:18:34,720 --> 00:18:39,280
libraries out there

00:18:36,000 --> 00:18:42,400
i understand that uh numpy can

00:18:39,280 --> 00:18:43,520
has methods for regression analysis but

00:18:42,400 --> 00:18:46,320
i wasn't going to go into that

00:18:43,520 --> 00:18:47,360
so this is a longhand way of achieving

00:18:46,320 --> 00:18:50,960
the same

00:18:47,360 --> 00:18:52,880
this um website here gave me a trendline

00:18:50,960 --> 00:18:54,400
and and then i just converted that into

00:18:52,880 --> 00:18:56,559
into some long hand

00:18:54,400 --> 00:18:58,880
and this was the result i got which was

00:18:56,559 --> 00:19:02,640
um very close to to the excel

00:18:58,880 --> 00:19:06,080
method so i was happy with that

00:19:02,640 --> 00:19:09,200
and uh so this is how i uh

00:19:06,080 --> 00:19:11,840
use it in inside the slave and the

00:19:09,200 --> 00:19:11,840
master

00:19:12,080 --> 00:19:21,200
the same function so for

00:19:16,480 --> 00:19:24,480
for every um for every voltage

00:19:21,200 --> 00:19:28,240
i get a position and then i do

00:19:24,480 --> 00:19:31,600
a comparison of um

00:19:28,240 --> 00:19:35,679
of where of of what the code thinks

00:19:31,600 --> 00:19:39,120
um the server should be positioned

00:19:35,679 --> 00:19:42,720
and on the master as a problem that i

00:19:39,120 --> 00:19:42,720
did have was that the thing could stall

00:19:42,880 --> 00:19:47,679
but as i also found out that it doesn't

00:19:46,240 --> 00:19:50,720
necessarily

00:19:47,679 --> 00:19:50,720
work that well

00:19:50,960 --> 00:19:56,400
because uh it's it's a low-powered

00:19:54,799 --> 00:19:58,559
too much current in the in the motor for

00:19:56,400 --> 00:20:01,360
too long will burn it out

00:19:58,559 --> 00:20:02,720
and uh if i was jamming it up five that

00:20:01,360 --> 00:20:06,240
could be five seconds

00:20:02,720 --> 00:20:10,559
and and it doesn't react fast enough but

00:20:06,240 --> 00:20:14,000
um this is basically we're reading in

00:20:10,559 --> 00:20:17,440
the the adc we

00:20:14,000 --> 00:20:20,720
step the the servo we read the

00:20:17,440 --> 00:20:24,400
the adc again and if it's shifted

00:20:20,720 --> 00:20:26,159
that's great um so so that's where we

00:20:24,400 --> 00:20:29,840
get the new position

00:20:26,159 --> 00:20:32,480
and if if it has shifted or good

00:20:29,840 --> 00:20:35,840
if the difference is too much then we've

00:20:32,480 --> 00:20:35,840
got an issue

00:20:38,720 --> 00:20:43,760
on the slave however this is more

00:20:41,679 --> 00:20:47,520
critical

00:20:43,760 --> 00:20:50,880
the the startup is

00:20:47,520 --> 00:20:54,320
is where it comes into its own

00:20:50,880 --> 00:20:54,320
so if it was

00:20:54,640 --> 00:20:58,320
when when the unit is switched on and

00:20:56,720 --> 00:21:01,600
and that and it hasn't

00:20:58,320 --> 00:21:02,559
come home it's um the slave is looking

00:21:01,600 --> 00:21:06,320
to see

00:21:02,559 --> 00:21:09,120
where it actually is and

00:21:06,320 --> 00:21:10,799
so the master is also monitoring the adc

00:21:09,120 --> 00:21:11,679
and will not start the main routines

00:21:10,799 --> 00:21:15,760
until it is

00:21:11,679 --> 00:21:16,799
home so the way that we do that is so

00:21:15,760 --> 00:21:20,240
we've um

00:21:16,799 --> 00:21:22,159
we've started up the slave here

00:21:20,240 --> 00:21:23,440
and it's uh just waiting for the for the

00:21:22,159 --> 00:21:26,240
interrupts uh

00:21:23,440 --> 00:21:27,120
to to be activated and but before i do

00:21:26,240 --> 00:21:31,120
that

00:21:27,120 --> 00:21:34,559
uh we will reset the master uh sorry

00:21:31,120 --> 00:21:36,080
reset the the forms to make sure they

00:21:34,559 --> 00:21:39,280
are home

00:21:36,080 --> 00:21:40,480
and this is it here so just a little

00:21:39,280 --> 00:21:45,840
step

00:21:40,480 --> 00:21:45,840
uh routine and

00:21:46,080 --> 00:21:50,559
essentially it's like what we're seeing

00:21:48,159 --> 00:21:54,400
before

00:21:50,559 --> 00:21:57,600
reach the voltage sees

00:21:54,400 --> 00:22:00,720
with what the position should be and

00:21:57,600 --> 00:22:03,919
if it's not if it's not at the start

00:22:00,720 --> 00:22:07,679
then then call the stepping routine

00:22:03,919 --> 00:22:10,400
until until it does um

00:22:07,679 --> 00:22:11,600
reach home and when it does reach home

00:22:10,400 --> 00:22:14,640
then

00:22:11,600 --> 00:22:19,039
we can start up

00:22:14,640 --> 00:22:22,240
and with that let's see how it looks

00:22:19,039 --> 00:22:24,559
so here pretend that uh it's the end of

00:22:22,240 --> 00:22:24,559
the day

00:22:24,640 --> 00:22:29,440
oh it's been switched off the gallery 10

00:22:28,640 --> 00:22:32,320
goes home

00:22:29,440 --> 00:22:33,200
comes back in the morning switches it on

00:22:32,320 --> 00:22:37,840
and

00:22:33,200 --> 00:22:40,320
now it has it's homing

00:22:37,840 --> 00:22:41,919
and it'll keep slowly stepping back into

00:22:40,320 --> 00:22:45,760
home

00:22:41,919 --> 00:22:48,720
until the master detects that it's home

00:22:45,760 --> 00:22:48,720
it'll stop flashing

00:22:49,520 --> 00:22:57,120
there we have it and now it starts up

00:22:53,679 --> 00:22:57,760
and that my friends is the end of my

00:22:57,120 --> 00:22:59,840
talk

00:22:57,760 --> 00:23:00,799
uh very happy with the way that

00:22:59,840 --> 00:23:04,159
micropath

00:23:00,799 --> 00:23:06,960
micropython can be used and something as

00:23:04,159 --> 00:23:06,960
abstract as this

00:23:07,600 --> 00:23:10,640
very very fast to prototype with um

00:23:10,000 --> 00:23:14,080
overall

00:23:10,640 --> 00:23:15,039
i used about 15 of my time on the actual

00:23:14,080 --> 00:23:18,480
coding

00:23:15,039 --> 00:23:21,360
um leaving uh 85

00:23:18,480 --> 00:23:22,000
you know the old paredo 80 20 thing most

00:23:21,360 --> 00:23:24,480
of my time

00:23:22,000 --> 00:23:25,440
went into into the the visual aspects

00:23:24,480 --> 00:23:28,799
which is what i

00:23:25,440 --> 00:23:30,480
really wanted so uh thank you for

00:23:28,799 --> 00:23:31,919
attending and uh thanks very much to the

00:23:30,480 --> 00:23:34,480
bygone team for

00:23:31,919 --> 00:23:37,840
for for this conference and uh for the

00:23:34,480 --> 00:23:37,840
opportunity to talk to you

00:23:39,039 --> 00:23:43,120
thank you so much chris i can see

00:23:41,679 --> 00:23:46,240
there's some applause uh

00:23:43,120 --> 00:23:48,320
drifting up there in the in the chat

00:23:46,240 --> 00:23:49,919
so that's great there's been some

00:23:48,320 --> 00:23:51,520
interesting discussion going on as well

00:23:49,919 --> 00:23:53,200
but i know that uh speaking live you

00:23:51,520 --> 00:23:55,039
won't have had a chance to see that yet

00:23:53,200 --> 00:23:58,480
but you will soon

00:23:55,039 --> 00:24:00,720
um so we have people uh

00:23:58,480 --> 00:24:01,760
listening for scouting for questions as

00:24:00,720 --> 00:24:03,360
they come through

00:24:01,760 --> 00:24:05,200
but just to kick us off because we do

00:24:03,360 --> 00:24:07,440
have a few minutes for questions

00:24:05,200 --> 00:24:08,480
um i'm interested to know more about

00:24:07,440 --> 00:24:11,120
like uh what your

00:24:08,480 --> 00:24:13,840
next uh project is going to be now

00:24:11,120 --> 00:24:16,880
you've got this one out of the way

00:24:13,840 --> 00:24:18,240
yes there's there's another one

00:24:16,880 --> 00:24:20,799
in fact i just don't have the time for

00:24:18,240 --> 00:24:23,440
it this year unfortunately in a month's

00:24:20,799 --> 00:24:25,919
time that my city has another uh

00:24:23,440 --> 00:24:28,960
exhibition and i've

00:24:25,919 --> 00:24:31,200
i like using uh pcbs

00:24:28,960 --> 00:24:33,039
and the engineering displaying the

00:24:31,200 --> 00:24:36,240
engineering that's gone into

00:24:33,039 --> 00:24:38,559
pc hardware you know it's been created

00:24:36,240 --> 00:24:39,440
originally by people so so i consider

00:24:38,559 --> 00:24:41,760
pcb

00:24:39,440 --> 00:24:43,440
as a form of art in itself and it's my

00:24:41,760 --> 00:24:44,559
way of preserving it so in every

00:24:43,440 --> 00:24:46,400
everything that i build

00:24:44,559 --> 00:24:47,679
i like to have something from the

00:24:46,400 --> 00:24:49,600
electronics world

00:24:47,679 --> 00:24:51,760
sort of embedded in and for the next one

00:24:49,600 --> 00:24:52,799
i i do i do have something in mind but

00:24:51,760 --> 00:24:54,720
it's um

00:24:52,799 --> 00:24:56,960
it's quite hard for me to describe it

00:24:54,720 --> 00:24:59,520
it's i'm quite reasonably visual and

00:24:56,960 --> 00:25:01,440
and to articulate and to recreate that

00:24:59,520 --> 00:25:03,279
in somebody else's mind is quite

00:25:01,440 --> 00:25:04,559
quite challenging i'll just turn that

00:25:03,279 --> 00:25:07,679
off

00:25:04,559 --> 00:25:10,799
yeah no problem that's all right yeah

00:25:07,679 --> 00:25:12,720
that's good we're on time okay

00:25:10,799 --> 00:25:15,120
um so we have another question coming

00:25:12,720 --> 00:25:18,720
through um is the feedback to the adc

00:25:15,120 --> 00:25:18,720
dependent on the server voltage

00:25:21,760 --> 00:25:25,360
you've got to put it through you've got

00:25:23,440 --> 00:25:27,600
to put it through a voltage divider so

00:25:25,360 --> 00:25:29,520
it depends really on the micro

00:25:27,600 --> 00:25:33,200
controller the the adc

00:25:29,520 --> 00:25:33,919
range with the esp8266 it's zero to one

00:25:33,200 --> 00:25:36,159
volt

00:25:33,919 --> 00:25:37,120
other microprocessors may have it up to

00:25:36,159 --> 00:25:39,360
the working voltage of the

00:25:37,120 --> 00:25:43,039
microprocessor say 3.3 or

00:25:39,360 --> 00:25:46,960
five so in that case if if

00:25:43,039 --> 00:25:48,559
the um if the servo was a 3.3

00:25:46,960 --> 00:25:50,240
and you're going into an arduino that

00:25:48,559 --> 00:25:52,240
has a say a

00:25:50,240 --> 00:25:54,320
zero to five volt you can do one of two

00:25:52,240 --> 00:25:57,520
things you could actually amplify

00:25:54,320 --> 00:26:00,960
so you get that the zero to 3.3

00:25:57,520 --> 00:26:02,559
becomes zero to five or you just feed it

00:26:00,960 --> 00:26:05,120
straight in as

00:26:02,559 --> 00:26:07,360
zero to 3.3 and adjust your code

00:26:05,120 --> 00:26:09,440
accordingly

00:26:07,360 --> 00:26:10,480
but but you really you just need to in

00:26:09,440 --> 00:26:12,080
my case i needed

00:26:10,480 --> 00:26:13,520
to know the dynamic range of what i

00:26:12,080 --> 00:26:17,520
wanted to work with

00:26:13,520 --> 00:26:19,840
and just work it accordingly great

00:26:17,520 --> 00:26:21,200
okay this question's starting to flow in

00:26:19,840 --> 00:26:22,799
now um

00:26:21,200 --> 00:26:25,039
someone else would like to know have you

00:26:22,799 --> 00:26:28,880
used circuit python

00:26:25,039 --> 00:26:29,440
no no i haven't but hats off to adafruit

00:26:28,880 --> 00:26:32,799
though

00:26:29,440 --> 00:26:36,720
um circuit python is a fork

00:26:32,799 --> 00:26:39,200
of micropython and what they did with

00:26:36,720 --> 00:26:40,159
micropython is to make it really easy

00:26:39,200 --> 00:26:44,880
for

00:26:40,159 --> 00:26:47,200
um real beginners uh i mean

00:26:44,880 --> 00:26:47,919
the the this micropython has a slightly

00:26:47,200 --> 00:26:49,600
steeper

00:26:47,919 --> 00:26:52,159
i think a steeper learning curve than

00:26:49,600 --> 00:26:54,000
circuit python

00:26:52,159 --> 00:26:55,520
because the assumptions you might have

00:26:54,000 --> 00:26:57,679
if you're brand new into it

00:26:55,520 --> 00:26:59,600
kind of work with circuit python but not

00:26:57,679 --> 00:27:01,600
necessarily with micropython

00:26:59,600 --> 00:27:03,279
for example from what i understand at

00:27:01,600 --> 00:27:05,279
least

00:27:03,279 --> 00:27:06,640
being able to access files and formats

00:27:05,279 --> 00:27:09,919
and sd cards and

00:27:06,640 --> 00:27:11,679
and things like that usb

00:27:09,919 --> 00:27:13,360
but i i don't have i haven't worked with

00:27:11,679 --> 00:27:16,400
circuit python and

00:27:13,360 --> 00:27:18,159
neither do i necessarily want to um

00:27:16,400 --> 00:27:20,240
but uh there's a lot of

00:27:18,159 --> 00:27:21,919
cross-pollination across the two

00:27:20,240 --> 00:27:23,279
so libraries or modules built for

00:27:21,919 --> 00:27:24,559
circuit python can be used in

00:27:23,279 --> 00:27:25,360
micropython with a little bit of

00:27:24,559 --> 00:27:27,760
tweaking

00:27:25,360 --> 00:27:30,320
from what i understand for example the

00:27:27,760 --> 00:27:33,840
neopixel library was from adafruit

00:27:30,320 --> 00:27:36,480
and it's used in circuit python

00:27:33,840 --> 00:27:38,000
you so much um i think that might be all

00:27:36,480 --> 00:27:38,880
questions that we have time for at the

00:27:38,000 --> 00:27:41,679
moment

00:27:38,880 --> 00:27:42,240
um but if you are hanging around after

00:27:41,679 --> 00:27:46,799
this

00:27:42,240 --> 00:27:50,480
is uh where can people find you oh

00:27:46,799 --> 00:27:52,799
would you want me to go in the um thing

00:27:50,480 --> 00:27:56,080
yes in venulis uh there's a text chat we

00:27:52,799 --> 00:27:58,880
have the curly boy theater hallway

00:27:56,080 --> 00:28:00,159
where the conversation can continue okay

00:27:58,880 --> 00:28:01,760
excellent because there has been some

00:28:00,159 --> 00:28:04,559
great conversation there

00:28:01,760 --> 00:28:05,679
thank you thank you okay we're going to

00:28:04,559 --> 00:28:08,559
take a short break

00:28:05,679 --> 00:28:09,360
now just in the theater um until our

00:28:08,559 --> 00:28:10,880
next talk

00:28:09,360 --> 00:28:12,640
which i'm very much looking forward to

00:28:10,880 --> 00:28:14,880
seeing um so

00:28:12,640 --> 00:28:17,840
take about 10 minutes of break and we'll

00:28:14,880 --> 00:28:17,840

YouTube URL: https://www.youtube.com/watch?v=xw5rNDPIt14


