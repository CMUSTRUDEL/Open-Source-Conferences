Title: "Graph Databases will change your (freakin') life" - Elena Williams (PyConline AU 2020)
Publication date: 2020-09-08
Playlist: PyConline AU 2020
Description: 
	Elena Williams

https://2020.pycon.org.au/program/A878CA

Relational and NoSQL DBs have ruled the roost for a couple of decades now, but in real life there's more to data than just tables or key-pairs. Graph DBMS technology has been coming along for the last decade-or-so and is now quite mature. Everyone wants one, just ask a Fortune 500 company. 

I mean: why have a table when you can have a knowledge graph? Why not be able to whip up a recommendations engine (or indeed a fraud detector) in a few minutes?

Graph databases store data in Graphs -- that is NOT chart-visualisation nor syntax standard on API layers (NOT a GraphQL talk), but per the paper written by the mathematician Euler in 1736: those data structures which are "nodes" connected by "relationships".

This talk will be a primer on what this all means, how they work and when they're a good idea to use. There will also be a demonstration and discussion about how to kick off with graph DBs driven by python, specifically for people who are familiar with conventional databases, but have never used Graph databases before, but might be curious.

See code sample: https://github.com/elena/graph-fun

Produced by NDV: https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1

Python, PyCon, PyConAU, PyConline

Sat Sep  5 14:05:00 2020 at Python 2
Captions: 
	00:00:00,240 --> 00:00:03,919
next up we have elena williams she is a

00:00:02,560 --> 00:00:05,680
fellow canberra local

00:00:03,919 --> 00:00:06,960
involved numerous and lovely community

00:00:05,680 --> 00:00:09,679
organizations in python

00:00:06,960 --> 00:00:11,599
and related on communities and we'll be

00:00:09,679 --> 00:00:12,719
talking about python graph type craft

00:00:11,599 --> 00:00:14,080
databases

00:00:12,719 --> 00:00:17,760
and how they will change your freaking

00:00:14,080 --> 00:00:20,800
life take it away elena

00:00:17,760 --> 00:00:21,520
thank you so much caitlyn um so this

00:00:20,800 --> 00:00:23,600
talk is called

00:00:21,520 --> 00:00:25,760
craft databases change your uh freaking

00:00:23,600 --> 00:00:27,920
life thank you everybody for coming to

00:00:25,760 --> 00:00:29,519
pike online 2020. thank you caitlin

00:00:27,920 --> 00:00:33,040
thank you all the organizers

00:00:29,519 --> 00:00:35,040
the av team uh they're absolute

00:00:33,040 --> 00:00:38,239
magicians thank you so much so

00:00:35,040 --> 00:00:42,079
um uh

00:00:38,239 --> 00:00:43,760
this is okay i'm elena and uh i'm

00:00:42,079 --> 00:00:45,360
proudly one of the canberra python

00:00:43,760 --> 00:00:47,440
organizers and we have a really awesome

00:00:45,360 --> 00:00:50,640
team and we have our oktoberfest

00:00:47,440 --> 00:00:52,000
coming up really soon so come sign up to

00:00:50,640 --> 00:00:53,920
that

00:00:52,000 --> 00:00:56,160
um and the reason i'm giving this talk

00:00:53,920 --> 00:00:56,719
is a couple of years ago i saw this talk

00:00:56,160 --> 00:00:59,199
by

00:00:56,719 --> 00:01:00,960
ed finkler he's known as funkatron on

00:00:59,199 --> 00:01:03,920
the internet and it was hilarious

00:01:00,960 --> 00:01:04,559
and it like really spoke to me and since

00:01:03,920 --> 00:01:06,240
then

00:01:04,559 --> 00:01:07,600
i've spent more than a year working

00:01:06,240 --> 00:01:09,600
really intensely on a

00:01:07,600 --> 00:01:10,880
large graph database project that i'm

00:01:09,600 --> 00:01:12,640
really focused on and with his

00:01:10,880 --> 00:01:13,360
permission this talk was inspired by

00:01:12,640 --> 00:01:14,799
that talk

00:01:13,360 --> 00:01:16,720
but it's you know a bit different

00:01:14,799 --> 00:01:20,880
because with python and his

00:01:16,720 --> 00:01:24,240
draw incomparable um so the goal of this

00:01:20,880 --> 00:01:25,920
next 20 odd minutes is to encourage you

00:01:24,240 --> 00:01:27,439
to feel like you're in a place where

00:01:25,920 --> 00:01:29,280
you'd feel good about having a go with

00:01:27,439 --> 00:01:31,439
playing with graph databases and um

00:01:29,280 --> 00:01:33,840
it's that is an actual visualization of

00:01:31,439 --> 00:01:37,600
the paradise papers database

00:01:33,840 --> 00:01:39,200
so i'm assuming that you're familiar

00:01:37,600 --> 00:01:40,960
with conventional database technology

00:01:39,200 --> 00:01:42,479
but are brand new to graphs that's the

00:01:40,960 --> 00:01:43,600
point of view of this talk

00:01:42,479 --> 00:01:45,439
so we're going to go over the

00:01:43,600 --> 00:01:46,720
fundamentals of graphs we're going to

00:01:45,439 --> 00:01:48,000
look at the relative shortcomings of

00:01:46,720 --> 00:01:50,079
other graph database types

00:01:48,000 --> 00:01:51,040
or other other database types non-graph

00:01:50,079 --> 00:01:52,479
database types

00:01:51,040 --> 00:01:54,000
i'm going to talk about how graph

00:01:52,479 --> 00:01:55,200
databases are different and particularly

00:01:54,000 --> 00:01:57,119
what they're good at

00:01:55,200 --> 00:01:58,960
and then we're going to try out some

00:01:57,119 --> 00:02:00,320
code it hasn't been technically perfect

00:01:58,960 --> 00:02:01,600
if we have to bail on that we have to

00:02:00,320 --> 00:02:04,640
bail on it

00:02:01,600 --> 00:02:08,720
cool and i really miss

00:02:04,640 --> 00:02:11,120
just being everyone live most craft

00:02:08,720 --> 00:02:13,599
talks a lot of graph talks start with

00:02:11,120 --> 00:02:14,959
euler's seven bridges of konigsberg a

00:02:13,599 --> 00:02:16,160
historically notable problem in

00:02:14,959 --> 00:02:18,239
mathematics which laid

00:02:16,160 --> 00:02:20,319
the foundations of graph theory i

00:02:18,239 --> 00:02:23,920
appreciate the idea of topology

00:02:20,319 --> 00:02:26,000
and uh to brazenly steal ed's joke from

00:02:23,920 --> 00:02:28,720
the original talk

00:02:26,000 --> 00:02:29,440
i think i mentioned as a web developer

00:02:28,720 --> 00:02:31,680
earlier

00:02:29,440 --> 00:02:32,640
and um it was my understanding that

00:02:31,680 --> 00:02:36,640
there would

00:02:32,640 --> 00:02:39,280
be no maths so all you need to know

00:02:36,640 --> 00:02:40,720
is that graphs are comprised of two

00:02:39,280 --> 00:02:44,319
types of elements

00:02:40,720 --> 00:02:46,239
nodes and relationships the round things

00:02:44,319 --> 00:02:47,840
and the connectory bits that's all you

00:02:46,239 --> 00:02:51,200
need to know so

00:02:47,840 --> 00:02:54,319
congratulations you are looking at

00:02:51,200 --> 00:02:55,680
a graph database knowledge graph so to

00:02:54,319 --> 00:02:58,239
have integrity

00:02:55,680 --> 00:02:59,599
you've got to have a node on either end

00:02:58,239 --> 00:03:00,560
like a half detached relationship don't

00:02:59,599 --> 00:03:02,879
make any sense

00:03:00,560 --> 00:03:04,000
and that the direction you have to have

00:03:02,879 --> 00:03:05,519
a direction but it's it's

00:03:04,000 --> 00:03:07,599
not really that important unless you've

00:03:05,519 --> 00:03:09,120
got a highly optimized environment

00:03:07,599 --> 00:03:11,200
and obviously you want the direction to

00:03:09,120 --> 00:03:13,280
make sense um

00:03:11,200 --> 00:03:14,800
and nodes on the other hand can have as

00:03:13,280 --> 00:03:16,640
many relationships as they like

00:03:14,800 --> 00:03:18,560
and nodes of them they can relate to

00:03:16,640 --> 00:03:20,879
themselves if they want to

00:03:18,560 --> 00:03:22,800
so this is a slightly more complex graph

00:03:20,879 --> 00:03:24,799
so hopefully it's completely evident

00:03:22,800 --> 00:03:26,239
what's going on here

00:03:24,799 --> 00:03:28,319
and you know this doesn't matter too

00:03:26,239 --> 00:03:30,480
badly to a relational database um

00:03:28,319 --> 00:03:32,159
you know maybe we'd expect the blue

00:03:30,480 --> 00:03:35,360
nodes to be in a person table

00:03:32,159 --> 00:03:37,040
green node be like a language um this

00:03:35,360 --> 00:03:39,840
kind of categorization here is not

00:03:37,040 --> 00:03:40,400
tables it's called labeling in a graph

00:03:39,840 --> 00:03:42,799
and it's

00:03:40,400 --> 00:03:44,720
actually totally arbitrary so you can

00:03:42,799 --> 00:03:46,799
have multiple labels on a node

00:03:44,720 --> 00:03:48,239
you could give them all different labels

00:03:46,799 --> 00:03:50,640
um you don't even have to have labels

00:03:48,239 --> 00:03:53,680
like if you want a giant

00:03:50,640 --> 00:03:54,799
homogenous ball of data no one is going

00:03:53,680 --> 00:03:57,680
to stop you

00:03:54,799 --> 00:03:58,959
so all the relationships on the other

00:03:57,680 --> 00:04:00,799
hand can have one

00:03:58,959 --> 00:04:02,480
and only one kind of label that's really

00:04:00,799 --> 00:04:05,519
fundamental to the architecture this is

00:04:02,480 --> 00:04:09,040
language and created

00:04:05,519 --> 00:04:10,080
here um so what

00:04:09,040 --> 00:04:12,480
there are a few things that call

00:04:10,080 --> 00:04:15,120
themselves graph databases in this

00:04:12,480 --> 00:04:16,880
world but um well the ones we're talking

00:04:15,120 --> 00:04:19,440
about here are the ones that are most

00:04:16,880 --> 00:04:21,519
similar to relational databases because

00:04:19,440 --> 00:04:23,919
they have persistent storage

00:04:21,519 --> 00:04:24,960
so the talk graphs i'm talking about are

00:04:23,919 --> 00:04:27,759
called label

00:04:24,960 --> 00:04:28,960
property graphs and that we've talked

00:04:27,759 --> 00:04:30,639
about the labels

00:04:28,960 --> 00:04:33,120
but they have properties as well which

00:04:30,639 --> 00:04:36,240
are key pair properties on the nodes

00:04:33,120 --> 00:04:36,560
and also on the relationships and you

00:04:36,240 --> 00:04:38,479
know

00:04:36,560 --> 00:04:41,199
this is kind of looking a little bit

00:04:38,479 --> 00:04:44,800
like a django model

00:04:41,199 --> 00:04:47,120
and i can wrap my head around that but

00:04:44,800 --> 00:04:48,880
then things start to get strange because

00:04:47,120 --> 00:04:52,560
like i said

00:04:48,880 --> 00:04:55,759
you can have multiple labels on a node

00:04:52,560 --> 00:04:57,360
and that makes no sense at all in a

00:04:55,759 --> 00:04:58,960
relational database context but

00:04:57,360 --> 00:05:02,720
otherwise

00:04:58,960 --> 00:05:04,880
nodes and relationships are labels

00:05:02,720 --> 00:05:06,800
and properties they're the building

00:05:04,880 --> 00:05:07,680
blocks of graph database architecture

00:05:06,800 --> 00:05:10,560
it's all you really

00:05:07,680 --> 00:05:11,360
need to know but because of these rules

00:05:10,560 --> 00:05:15,520
everything

00:05:11,360 --> 00:05:18,639
is related and what you can get

00:05:15,520 --> 00:05:20,160
from that is very long arbitrary graph

00:05:18,639 --> 00:05:22,800
traversals which

00:05:20,160 --> 00:05:24,000
are cheap and this is the real strength

00:05:22,800 --> 00:05:26,240
and point of differentiation

00:05:24,000 --> 00:05:27,199
of graph databases over relational

00:05:26,240 --> 00:05:30,560
databases

00:05:27,199 --> 00:05:33,759
that graph databases are vastly superior

00:05:30,560 --> 00:05:36,240
at managing related data

00:05:33,759 --> 00:05:38,160
related data and so here's where the

00:05:36,240 --> 00:05:39,120
language in the database ecosystem sort

00:05:38,160 --> 00:05:42,720
of starts to

00:05:39,120 --> 00:05:47,360
let us down so let's talk about it

00:05:42,720 --> 00:05:50,639
relational databases relational

00:05:47,360 --> 00:05:51,360
relational that word you keep using that

00:05:50,639 --> 00:05:54,240
word

00:05:51,360 --> 00:05:57,840
so let's ask the question our relational

00:05:54,240 --> 00:05:59,360
database is good with relationships and

00:05:57,840 --> 00:06:01,520
it probably depends on your definition

00:05:59,360 --> 00:06:03,680
of complex and you know managing

00:06:01,520 --> 00:06:04,160
multi-dimensional data is probably you

00:06:03,680 --> 00:06:07,360
know

00:06:04,160 --> 00:06:09,759
painful uh but i pretty much

00:06:07,360 --> 00:06:11,440
if you ask anyone who's ever done it um

00:06:09,759 --> 00:06:13,680
traversing joins is

00:06:11,440 --> 00:06:14,800
rubbish and according to the laws of

00:06:13,680 --> 00:06:17,680
computers it's like

00:06:14,800 --> 00:06:19,120
slow particularly if you have uh many

00:06:17,680 --> 00:06:20,800
data

00:06:19,120 --> 00:06:23,280
and you know as anyone who's

00:06:20,800 --> 00:06:25,280
accidentally broken their pks will know

00:06:23,280 --> 00:06:28,160
relationships only exist because of

00:06:25,280 --> 00:06:29,280
happy coincidence it's effectively a

00:06:28,160 --> 00:06:32,800
clutch

00:06:29,280 --> 00:06:34,560
and you know with all of the gratitude

00:06:32,800 --> 00:06:36,880
in my soul to zeke

00:06:34,560 --> 00:06:38,319
and andy godwin and all the other quiet

00:06:36,880 --> 00:06:40,800
heroes of migrations

00:06:38,319 --> 00:06:41,840
who probably understand more profoundly

00:06:40,800 --> 00:06:44,240
than

00:06:41,840 --> 00:06:46,319
pretty much anyone else it's really

00:06:44,240 --> 00:06:48,479
messed up to modify

00:06:46,319 --> 00:06:50,720
schemers and um particularly keep your

00:06:48,479 --> 00:06:53,280
relationship straight when you do so

00:06:50,720 --> 00:06:54,000
so let's talk about nosql databases

00:06:53,280 --> 00:06:57,440
because

00:06:54,000 --> 00:07:00,880
you know when i'm talking about sql

00:06:57,440 --> 00:07:01,440
and nosql all of the noise girls are the

00:07:00,880 --> 00:07:04,400
same

00:07:01,440 --> 00:07:05,919
really so here are some nosql families

00:07:04,400 --> 00:07:07,360
and obviously i'm not talking about

00:07:05,919 --> 00:07:09,520
graph databases which also

00:07:07,360 --> 00:07:11,680
you said to nosql for the purpose of

00:07:09,520 --> 00:07:13,840
asking the question

00:07:11,680 --> 00:07:15,199
uh nosql database is good with

00:07:13,840 --> 00:07:18,639
relationships

00:07:15,199 --> 00:07:19,360
and you know in relation to ethnoscope

00:07:18,639 --> 00:07:21,440
databases

00:07:19,360 --> 00:07:23,440
were never meant for complex models and

00:07:21,440 --> 00:07:26,560
you know scaling joins

00:07:23,440 --> 00:07:27,360
sucks even harder than with relational

00:07:26,560 --> 00:07:28,800
databases

00:07:27,360 --> 00:07:30,639
and i'm speaking specifically to

00:07:28,800 --> 00:07:34,720
everyone out there who has ever spent

00:07:30,639 --> 00:07:37,840
any of their precious precious life

00:07:34,720 --> 00:07:40,240
having to work with clutchy precarious

00:07:37,840 --> 00:07:41,199
drawings in nosql relationships that

00:07:40,240 --> 00:07:43,280
it's

00:07:41,199 --> 00:07:44,639
no sql data but it's actually not very

00:07:43,280 --> 00:07:48,319
easy and um

00:07:44,639 --> 00:07:51,680
of course modern labeled property graphs

00:07:48,319 --> 00:07:54,560
have acid transactions so

00:07:51,680 --> 00:07:56,080
um there are things that graphs do not

00:07:54,560 --> 00:07:59,919
do well and the answer is like

00:07:56,080 --> 00:08:04,400
simply like ledgers and tables

00:07:59,919 --> 00:08:07,199
so graphs have traded off the ability

00:08:04,400 --> 00:08:08,639
to work efficiently with a records

00:08:07,199 --> 00:08:09,919
property so if you want to get like an

00:08:08,639 --> 00:08:10,879
average you want to get all the heights

00:08:09,919 --> 00:08:11,440
and you want to compare them to each

00:08:10,879 --> 00:08:13,199
other

00:08:11,440 --> 00:08:16,160
they've traded off the ability to do

00:08:13,199 --> 00:08:19,360
that well to instead be able to do

00:08:16,160 --> 00:08:20,000
fast complex traversals over the data

00:08:19,360 --> 00:08:23,680
start a

00:08:20,000 --> 00:08:24,840
database and so how is this trade-off

00:08:23,680 --> 00:08:28,000
good

00:08:24,840 --> 00:08:30,960
well we live in an area where we don't

00:08:28,000 --> 00:08:32,719
count our data in rows we weigh it in

00:08:30,960 --> 00:08:35,599
terror and petabytes

00:08:32,719 --> 00:08:37,360
and it's expensive and hard to get

00:08:35,599 --> 00:08:38,000
insights from data when it comes by the

00:08:37,360 --> 00:08:40,880
boatload

00:08:38,000 --> 00:08:43,039
so graph database give you a tool that's

00:08:40,880 --> 00:08:46,800
optimized specifically to get

00:08:43,039 --> 00:08:48,959
cool insights from very large

00:08:46,800 --> 00:08:50,080
corpora don't come out yet about the

00:08:48,959 --> 00:08:51,920
plurals we've already had that

00:08:50,080 --> 00:08:54,000
conversation today and it's gonna get a

00:08:51,920 --> 00:08:55,680
lot worse

00:08:54,000 --> 00:08:57,360
so um so long as you know how to ask

00:08:55,680 --> 00:08:58,720
really good questions this is an

00:08:57,360 --> 00:09:00,320
excellent tool for that so let me give

00:08:58,720 --> 00:09:01,440
you an example

00:09:00,320 --> 00:09:03,839
so you get an email requesting a

00:09:01,440 --> 00:09:05,839
customer report and um there's a

00:09:03,839 --> 00:09:07,760
research called uh nicholas christarchus

00:09:05,839 --> 00:09:09,200
as a physician a sociologist at yale who

00:09:07,760 --> 00:09:10,560
over the years has introduced some very

00:09:09,200 --> 00:09:12,160
interesting ideas

00:09:10,560 --> 00:09:14,320
about spheres of influences over your

00:09:12,160 --> 00:09:15,920
social network so maybe someone in your

00:09:14,320 --> 00:09:17,680
organization's read about that

00:09:15,920 --> 00:09:20,080
and they've requested an email for

00:09:17,680 --> 00:09:21,360
everyone who bought a widget that's sure

00:09:20,080 --> 00:09:24,399
who bought a widget from yesterday's

00:09:21,360 --> 00:09:27,839
email no worries losing canberra

00:09:24,399 --> 00:09:31,360
fine he's into books okay good

00:09:27,839 --> 00:09:35,200
no wait where is it where is this no no

00:09:31,360 --> 00:09:37,760
no no you've got a big database

00:09:35,200 --> 00:09:38,399
whatever happens you are about to have a

00:09:37,760 --> 00:09:41,440
very

00:09:38,399 --> 00:09:45,120
annoying day because you my friend

00:09:41,440 --> 00:09:48,320
are in sql join hell and what you need

00:09:45,120 --> 00:09:51,920
is many many indexes

00:09:48,320 --> 00:09:53,920
indices plurals don't know me um

00:09:51,920 --> 00:09:55,680
and if you haven't set up your indices

00:09:53,920 --> 00:09:58,160
right you're going to have to

00:09:55,680 --> 00:09:59,120
and if you have many data your lookups

00:09:58,160 --> 00:10:02,720
are going

00:09:59,120 --> 00:10:06,560
to take a while and what you need

00:10:02,720 --> 00:10:08,480
is really big long traversals for cheap

00:10:06,560 --> 00:10:10,240
and because you have what we call index

00:10:08,480 --> 00:10:11,760
free adjacency because graphs use

00:10:10,240 --> 00:10:15,200
adjacency matrixes

00:10:11,760 --> 00:10:17,360
not matrices not indices you are not in

00:10:15,200 --> 00:10:19,680
sql join hell

00:10:17,360 --> 00:10:21,200
and that pre-query cringe you get when

00:10:19,680 --> 00:10:22,240
you suspect it might be really bad query

00:10:21,200 --> 00:10:24,079
it's just not there

00:10:22,240 --> 00:10:25,360
you can do literally millions of hops

00:10:24,079 --> 00:10:27,600
per second

00:10:25,360 --> 00:10:29,120
and you require much much less computing

00:10:27,600 --> 00:10:32,000
resources but don't

00:10:29,120 --> 00:10:32,800
take my word for it ask this guy who

00:10:32,000 --> 00:10:35,120
said they got

00:10:32,800 --> 00:10:36,399
thousands of times faster in orders of

00:10:35,120 --> 00:10:37,760
magnitude less code

00:10:36,399 --> 00:10:39,040
with functionality that was previously

00:10:37,760 --> 00:10:40,000
impossible and he's talking about part

00:10:39,040 --> 00:10:43,440
of ebay's

00:10:40,000 --> 00:10:44,240
distribution network in asia but ebay

00:10:43,440 --> 00:10:46,800
also have

00:10:44,240 --> 00:10:48,480
a knowledge graph to power their

00:10:46,800 --> 00:10:51,360
conversational commerce

00:10:48,480 --> 00:10:53,040
whatever that might be um and there are

00:10:51,360 --> 00:10:54,320
testimonials like this all over so let's

00:10:53,040 --> 00:10:57,519
dig into the specifics of

00:10:54,320 --> 00:10:59,120
why so this is probably the most basic

00:10:57,519 --> 00:11:00,399
relationship joint crew money can buy

00:10:59,120 --> 00:11:01,600
but don't try and pass that's not even

00:11:00,399 --> 00:11:04,079
worth your effort

00:11:01,600 --> 00:11:04,959
this is a graphical representation of

00:11:04,079 --> 00:11:08,800
the same

00:11:04,959 --> 00:11:10,800
with our drawing table and so let's

00:11:08,800 --> 00:11:13,279
strip away all of the irrelevant craft

00:11:10,800 --> 00:11:15,279
and just focus

00:11:13,279 --> 00:11:17,680
get rid of that join table and focus

00:11:15,279 --> 00:11:18,800
just on the relationships now look at

00:11:17,680 --> 00:11:22,079
the query

00:11:18,800 --> 00:11:25,760
for this so congratulations

00:11:22,079 --> 00:11:27,360
you are looking at a graph query um

00:11:25,760 --> 00:11:29,360
this is in a query language called

00:11:27,360 --> 00:11:30,480
cipher there's another proper curious

00:11:29,360 --> 00:11:31,200
open source query language called

00:11:30,480 --> 00:11:32,720
gremlin

00:11:31,200 --> 00:11:34,800
there's currently a standardization

00:11:32,720 --> 00:11:37,120
process going on right now and hopefully

00:11:34,800 --> 00:11:38,880
that it will soon be called gql to go

00:11:37,120 --> 00:11:42,160
side by side with sql

00:11:38,880 --> 00:11:43,519
um and science being developed by neo4j

00:11:42,160 --> 00:11:44,959
and i'm really grateful to them because

00:11:43,519 --> 00:11:45,760
they've let me you know steal all their

00:11:44,959 --> 00:11:50,079
examples

00:11:45,760 --> 00:11:52,560
um but you can use whatever you want um

00:11:50,079 --> 00:11:54,079
but this query is obviously match person

00:11:52,560 --> 00:11:55,680
who works at the department and return

00:11:54,079 --> 00:11:58,480
their name you can also

00:11:55,680 --> 00:11:59,760
use a where statement like this in case

00:11:58,480 --> 00:12:00,720
you want to go wild with your cruise

00:11:59,760 --> 00:12:04,000
later

00:12:00,720 --> 00:12:07,360
let's put those two side by side now

00:12:04,000 --> 00:12:08,399
one of these is certainly a lot easier

00:12:07,360 --> 00:12:11,440
on the brain

00:12:08,399 --> 00:12:13,200
than the other and so let's just uh oh

00:12:11,440 --> 00:12:14,720
sorry i just wanted to remind all my

00:12:13,200 --> 00:12:17,040
django nautical friends

00:12:14,720 --> 00:12:18,079
that those you know beautiful careful

00:12:17,040 --> 00:12:19,839
hard-working people

00:12:18,079 --> 00:12:21,279
have made it much easier for us but it

00:12:19,839 --> 00:12:25,120
just conceals

00:12:21,279 --> 00:12:27,360
you know more crafty sludgy yeah

00:12:25,120 --> 00:12:29,440
so let's take a moment to admire how

00:12:27,360 --> 00:12:31,519
simple that query is

00:12:29,440 --> 00:12:32,720
and you know what you get back from it

00:12:31,519 --> 00:12:35,040
um

00:12:32,720 --> 00:12:36,480
and of course you get the flexibility to

00:12:35,040 --> 00:12:38,160
add properties on the fly i mean you can

00:12:36,480 --> 00:12:41,680
use a python

00:12:38,160 --> 00:12:43,040
ogm it's like an o-r-m but an o-g

00:12:41,680 --> 00:12:44,560
and if you want you don't have to and

00:12:43,040 --> 00:12:45,440
then you have all the freedom and you

00:12:44,560 --> 00:12:48,959
can just you know

00:12:45,440 --> 00:12:50,639
proliferate properties like crazy

00:12:48,959 --> 00:12:53,440
it actually gets wilder than this

00:12:50,639 --> 00:12:57,120
because this is the equivalent of moving

00:12:53,440 --> 00:12:59,360
the alice record to a like a different

00:12:57,120 --> 00:13:00,240
table but keeping the relationships and

00:12:59,360 --> 00:13:01,760
the properties

00:13:00,240 --> 00:13:03,600
and you can have multiple labels which

00:13:01,760 --> 00:13:06,480
is the equivalent of existing in

00:13:03,600 --> 00:13:07,040
multiple tables simultaneously which is

00:13:06,480 --> 00:13:09,279
possible

00:13:07,040 --> 00:13:10,480
that's wild and ultimately you can have

00:13:09,279 --> 00:13:13,360
just nothing and do

00:13:10,480 --> 00:13:13,760
like whatever and you know we're talking

00:13:13,360 --> 00:13:16,959
about

00:13:13,760 --> 00:13:19,839
patterns um the things that graphs do

00:13:16,959 --> 00:13:21,279
do well and anywhere where things are

00:13:19,839 --> 00:13:22,720
interacting with each other and you're

00:13:21,279 --> 00:13:24,079
doing lots of queries

00:13:22,720 --> 00:13:26,000
graphs are suitable for obviously

00:13:24,079 --> 00:13:28,880
they're not suitable for everything

00:13:26,000 --> 00:13:30,959
but if you want to analyze behavior you

00:13:28,880 --> 00:13:32,720
want to analyze patterns of behavior

00:13:30,959 --> 00:13:34,079
this is the optimized tool you want

00:13:32,720 --> 00:13:36,560
complex insights

00:13:34,079 --> 00:13:38,560
if you want flexibility what we call

00:13:36,560 --> 00:13:41,600
unbounded hierarchies

00:13:38,560 --> 00:13:43,600
uh anywhere you know that there

00:13:41,600 --> 00:13:45,680
the connections are more important than

00:13:43,600 --> 00:13:48,399
the entities

00:13:45,680 --> 00:13:49,040
so domains where um obviously there are

00:13:48,399 --> 00:13:51,199
patterns like

00:13:49,040 --> 00:13:53,760
looking for fraud predictive maintenance

00:13:51,199 --> 00:13:53,760
in networks

00:13:54,399 --> 00:13:57,760
recommendations and customer

00:13:55,920 --> 00:14:00,800
segmentation

00:13:57,760 --> 00:14:03,120
and often at this early stage in

00:14:00,800 --> 00:14:04,560
the evolution of these technology graphs

00:14:03,120 --> 00:14:06,320
are being used as feature layers on top

00:14:04,560 --> 00:14:06,560
of other processes and data's piped in

00:14:06,320 --> 00:14:09,760
and

00:14:06,560 --> 00:14:11,360
you can solve a particular problem um

00:14:09,760 --> 00:14:13,120
but like with all data it's good to

00:14:11,360 --> 00:14:16,079
clearly know what you are

00:14:13,120 --> 00:14:17,680
looking for so there's a sort of general

00:14:16,079 --> 00:14:20,480
spectrum of

00:14:17,680 --> 00:14:21,920
simple to extremely advanced use cases

00:14:20,480 --> 00:14:23,360
and depending on your expertise and

00:14:21,920 --> 00:14:24,560
domain knowledge you might immediately

00:14:23,360 --> 00:14:27,199
find some of these things in the

00:14:24,560 --> 00:14:28,720
top right obvious even though they're at

00:14:27,199 --> 00:14:30,959
the top end

00:14:28,720 --> 00:14:33,600
but let's look at some of these so cisco

00:14:30,959 --> 00:14:35,199
currently uses a graph database as a

00:14:33,600 --> 00:14:36,959
master for dumb master data management

00:14:35,199 --> 00:14:40,000
that single source of truth

00:14:36,959 --> 00:14:43,600
um like many many banks

00:14:40,000 --> 00:14:45,760
and uh firms retail firms and investment

00:14:43,600 --> 00:14:49,120
firms use

00:14:45,760 --> 00:14:50,560
graph databases for fraud detection uh

00:14:49,120 --> 00:14:53,279
because finding relations between

00:14:50,560 --> 00:14:56,000
entities uh finding fraud rings

00:14:53,279 --> 00:14:56,720
and because you can query the graph very

00:14:56,000 --> 00:14:58,160
quickly

00:14:56,720 --> 00:15:00,639
you can have a real-time scenario for

00:14:58,160 --> 00:15:02,959
fraud detection um

00:15:00,639 --> 00:15:03,839
you can use it for networking operations

00:15:02,959 --> 00:15:07,199
so

00:15:03,839 --> 00:15:08,639
you can map dependencies of a system so

00:15:07,199 --> 00:15:10,160
you can find out what's going wrong and

00:15:08,639 --> 00:15:10,720
what the root cause might be for power

00:15:10,160 --> 00:15:13,440
reading

00:15:10,720 --> 00:15:14,320
paragraph hp uses graph databases for

00:15:13,440 --> 00:15:17,440
this

00:15:14,320 --> 00:15:20,399
um and iam like this is an

00:15:17,440 --> 00:15:22,399
obvious use case for you know unbounded

00:15:20,399 --> 00:15:25,519
hierarchies with users and

00:15:22,399 --> 00:15:28,399
groups and science

00:15:25,519 --> 00:15:29,920
so much science um particularly when

00:15:28,399 --> 00:15:31,600
you're starting doing advanced

00:15:29,920 --> 00:15:33,680
machine learning stuff but at nasa

00:15:31,600 --> 00:15:36,160
someone made a graph database

00:15:33,680 --> 00:15:37,360
from for their orion project and to

00:15:36,160 --> 00:15:39,279
quote them they saved

00:15:37,360 --> 00:15:41,199
two years of work and over one million

00:15:39,279 --> 00:15:42,320
dollars of tax payer funds and um

00:15:41,199 --> 00:15:44,480
they have a knowledge graph that they

00:15:42,320 --> 00:15:45,279
call lessons learned for space missions

00:15:44,480 --> 00:15:47,759
apparently

00:15:45,279 --> 00:15:48,560
which is a pretty cool so there are lots

00:15:47,759 --> 00:15:51,360
of graph

00:15:48,560 --> 00:15:51,920
databases going at the moment um these

00:15:51,360 --> 00:15:53,839
are a lot of

00:15:51,920 --> 00:15:55,360
more mature open source graph databases

00:15:53,839 --> 00:15:56,079
and there are a lot of proprietary ones

00:15:55,360 --> 00:15:59,120
too and it's

00:15:56,079 --> 00:16:02,399
you know it's only been like 10 years

00:15:59,120 --> 00:16:04,959
so the moment of truth let's

00:16:02,399 --> 00:16:06,320
get into some code enough talking about

00:16:04,959 --> 00:16:10,399
it let's get into it

00:16:06,320 --> 00:16:13,519
um so let's make a recommendations

00:16:10,399 --> 00:16:16,639
engine and when you install

00:16:13,519 --> 00:16:18,959
neo4j um

00:16:16,639 --> 00:16:20,480
you immediately get this uh local

00:16:18,959 --> 00:16:24,880
browser that runs so let's

00:16:20,480 --> 00:16:24,880
click on this and see how we go

00:16:25,360 --> 00:16:29,199
please do something hello so when the

00:16:27,600 --> 00:16:29,759
first time you log on this is what you

00:16:29,199 --> 00:16:31,519
get

00:16:29,759 --> 00:16:32,880
and you get this connection status with

00:16:31,519 --> 00:16:33,839
some credentials which is

00:16:32,880 --> 00:16:35,279
you need to remember because we're going

00:16:33,839 --> 00:16:37,600
to use those later we've got this

00:16:35,279 --> 00:16:40,079
tutorial and introduction

00:16:37,600 --> 00:16:41,199
um okay but we don't need all of that

00:16:40,079 --> 00:16:44,079
and i am actually for

00:16:41,199 --> 00:16:45,440
safety gonna just go to some examples i

00:16:44,079 --> 00:16:47,839
prepared earlier

00:16:45,440 --> 00:16:50,000
so the first thing we're gonna do is we

00:16:47,839 --> 00:16:52,399
are going to create our first

00:16:50,000 --> 00:16:54,000
demo slide it's just adding some data to

00:16:52,399 --> 00:16:55,279
our database we're creating guido

00:16:54,000 --> 00:16:59,519
and we're creating python and then we're

00:16:55,279 --> 00:16:59,519
connecting them together then we get

00:17:01,600 --> 00:17:07,679
great looks like a slide and then

00:17:05,199 --> 00:17:09,520
we're going to make all of our

00:17:07,679 --> 00:17:11,360
frameworks and our people

00:17:09,520 --> 00:17:12,559
who invented those so again same thing

00:17:11,360 --> 00:17:14,240
we're matching

00:17:12,559 --> 00:17:16,079
those those notes because they already

00:17:14,240 --> 00:17:17,520
exist and we're creating flask we're

00:17:16,079 --> 00:17:21,120
creating django

00:17:17,520 --> 00:17:21,120
and go

00:17:21,360 --> 00:17:28,079
and if i pull this over here like so ah

00:17:25,039 --> 00:17:31,280
look it's a messy version of that them

00:17:28,079 --> 00:17:34,320
same slide okay

00:17:31,280 --> 00:17:36,640
now let's create our buddies alice and

00:17:34,320 --> 00:17:37,520
bob over there at the it department

00:17:36,640 --> 00:17:38,960
and this should be pretty

00:17:37,520 --> 00:17:39,760
straightforward create create create

00:17:38,960 --> 00:17:43,520
return

00:17:39,760 --> 00:17:45,520
no worries and there they are

00:17:43,520 --> 00:17:47,200
and you know what i can even make this

00:17:45,520 --> 00:17:50,240
bubbly one and this is all just

00:17:47,200 --> 00:17:52,799
default stuff you get off the bigger

00:17:50,240 --> 00:17:53,679
like it was oh yeah there we go the

00:17:52,799 --> 00:17:55,919
slides and

00:17:53,679 --> 00:17:56,720
you know i'm gonna set some arbitrary

00:17:55,919 --> 00:17:59,360
properties

00:17:56,720 --> 00:18:00,000
like i did in that other slide just

00:17:59,360 --> 00:18:02,320
adding a bunch

00:18:00,000 --> 00:18:05,440
of arbitrary stuff here some business

00:18:02,320 --> 00:18:08,960
won't keep breaking on me so let's go

00:18:05,440 --> 00:18:09,520
that go yes that's going to work too and

00:18:08,960 --> 00:18:11,679
look

00:18:09,520 --> 00:18:14,080
what i did there so alice here is still

00:18:11,679 --> 00:18:16,559
a person but she's also an all-around

00:18:14,080 --> 00:18:18,799
legend um and bob has all these

00:18:16,559 --> 00:18:20,960
properties and we can see that

00:18:18,799 --> 00:18:22,640
in this table here lots of their

00:18:20,960 --> 00:18:24,720
properties and stuff that we just added

00:18:22,640 --> 00:18:28,480
there's a text version

00:18:24,720 --> 00:18:32,000
here's some kodi code um

00:18:28,480 --> 00:18:33,919
and now let us do something

00:18:32,000 --> 00:18:36,480
new we'll get rid of all those guys and

00:18:33,919 --> 00:18:37,760
let us like some frameworks

00:18:36,480 --> 00:18:39,039
so what i'm going to do here is i'm

00:18:37,760 --> 00:18:41,120
going to match all of the nodes that we

00:18:39,039 --> 00:18:43,280
already have in the system

00:18:41,120 --> 00:18:45,200
now i'm going to create bottle i'm going

00:18:43,280 --> 00:18:48,240
to add another colleague

00:18:45,200 --> 00:18:49,360
for alice and bob colley called chris

00:18:48,240 --> 00:18:50,640
and then we're going to define what they

00:18:49,360 --> 00:18:51,360
like so alice and bob and chris light

00:18:50,640 --> 00:18:53,360
bottle

00:18:51,360 --> 00:18:54,960
alice and bob and chris like django and

00:18:53,360 --> 00:18:58,320
alice and bob like flask but

00:18:54,960 --> 00:18:59,840
chris doesn't you know what i reckon we

00:18:58,320 --> 00:19:02,160
could recommend it to chris

00:18:59,840 --> 00:19:03,440
that she might so we're going to like

00:19:02,160 --> 00:19:04,240
floss so we're going to create all of

00:19:03,440 --> 00:19:07,760
those

00:19:04,240 --> 00:19:08,400
and let's see what frameworks our team

00:19:07,760 --> 00:19:11,679
likes

00:19:08,400 --> 00:19:13,760
so here's a nice little match statement

00:19:11,679 --> 00:19:15,039
which is everyone in the it department

00:19:13,760 --> 00:19:17,360
who likes a

00:19:15,039 --> 00:19:19,200
python framework i'm going to return the

00:19:17,360 --> 00:19:22,400
frame we're going to return python

00:19:19,200 --> 00:19:23,600
i'm going to order it for later so let's

00:19:22,400 --> 00:19:27,200
see what that looks like

00:19:23,600 --> 00:19:30,720
okay so we've got alice oh orange lentil

00:19:27,200 --> 00:19:33,200
bob and we've got our frameworks here

00:19:30,720 --> 00:19:35,679
and you'll see that alice likes those

00:19:33,200 --> 00:19:37,360
three bob likes rosary but there is no

00:19:35,679 --> 00:19:40,400
connection for chris so let's go

00:19:37,360 --> 00:19:42,240
find this so

00:19:40,400 --> 00:19:43,520
we are going to make a little match

00:19:42,240 --> 00:19:46,880
statement

00:19:43,520 --> 00:19:49,360
but the thing is is that recommendations

00:19:46,880 --> 00:19:51,280
only make sense from a point of view if

00:19:49,360 --> 00:19:53,200
you think about it for two seconds

00:19:51,280 --> 00:19:54,480
and so we need to add the parameter that

00:19:53,200 --> 00:19:56,720
is chris

00:19:54,480 --> 00:19:58,080
i'm going to add chris as a parameter

00:19:56,720 --> 00:20:03,120
which makes it easier to do

00:19:58,080 --> 00:20:03,120
programming later and we are going to

00:20:03,360 --> 00:20:06,960
for chris who is our person we just

00:20:05,679 --> 00:20:10,559
added

00:20:06,960 --> 00:20:12,960
um we're going to match what frameworks

00:20:10,559 --> 00:20:14,400
this knot is doing a lot of work here

00:20:12,960 --> 00:20:17,440
that she doesn't like and

00:20:14,400 --> 00:20:17,440
the answer should be

00:20:18,240 --> 00:20:22,960
flask correct okay now let's do it in

00:20:21,280 --> 00:20:26,720
python let's go

00:20:22,960 --> 00:20:28,240
so here we have uh there's a neo4j

00:20:26,720 --> 00:20:29,120
python driver which is the official

00:20:28,240 --> 00:20:31,200
driver

00:20:29,120 --> 00:20:33,280
but there which is pretty basic but

00:20:31,200 --> 00:20:34,880
there's also a community drive python

00:20:33,280 --> 00:20:35,600
driver called cartoon neo which is

00:20:34,880 --> 00:20:38,320
written by

00:20:35,600 --> 00:20:39,039
roger smalls who also writes the pythony

00:20:38,320 --> 00:20:42,000
pythony

00:20:39,039 --> 00:20:43,360
the python driver for navigate um and

00:20:42,000 --> 00:20:45,520
that's all that we need that's all that

00:20:43,360 --> 00:20:48,880
i needed to install to get this farm so

00:20:45,520 --> 00:20:50,720
let's go with that great and

00:20:48,880 --> 00:20:52,559
hopefully my graph connection still

00:20:50,720 --> 00:20:56,000
works

00:20:52,559 --> 00:20:58,480
okay nothing happened so did it work

00:20:56,000 --> 00:20:59,360
ah look at look at that law looks pretty

00:20:58,480 --> 00:21:02,320
familiar

00:20:59,360 --> 00:21:02,880
so we're returning all the nodes we're

00:21:02,320 --> 00:21:06,400
going to do

00:21:02,880 --> 00:21:08,240
our query our match people person who

00:21:06,400 --> 00:21:11,200
works at and then return

00:21:08,240 --> 00:21:12,320
their details grace we're going to

00:21:11,200 --> 00:21:15,280
return it as

00:21:12,320 --> 00:21:17,039
a table which we can only do in python

00:21:15,280 --> 00:21:18,080
um and then we're going to use some of

00:21:17,039 --> 00:21:20,640
the built-in match

00:21:18,080 --> 00:21:22,880
functions that come as part of um uh

00:21:20,640 --> 00:21:25,679
python neo so we've got uh

00:21:22,880 --> 00:21:26,320
our person all of our people no mat

00:21:25,679 --> 00:21:29,120
we're

00:21:26,320 --> 00:21:30,960
using our graph instance from up here

00:21:29,120 --> 00:21:33,440
yeah graph instance from up here

00:21:30,960 --> 00:21:34,559
we instantiated the graph and then we're

00:21:33,440 --> 00:21:37,520
getting all the nodes

00:21:34,559 --> 00:21:38,000
and they were matching all of the like

00:21:37,520 --> 00:21:40,159
people

00:21:38,000 --> 00:21:41,200
things that are labelled person then

00:21:40,159 --> 00:21:44,000
we're going to match

00:21:41,200 --> 00:21:45,600
all of the nodes that have the name

00:21:44,000 --> 00:21:47,679
alice

00:21:45,600 --> 00:21:48,960
great we're going to match all the nodes

00:21:47,679 --> 00:21:52,480
where the node

00:21:48,960 --> 00:21:54,320
is or randall the label is around legend

00:21:52,480 --> 00:21:56,080
and we only want the first one of those

00:21:54,320 --> 00:21:58,320
and of course it's our friend alice

00:21:56,080 --> 00:21:58,720
again and we're going to find everyone

00:21:58,320 --> 00:22:02,080
who

00:21:58,720 --> 00:22:04,240
works at this organization great

00:22:02,080 --> 00:22:05,120
that's exactly what we would expect and

00:22:04,240 --> 00:22:08,240
then let's

00:22:05,120 --> 00:22:09,600
do our match query so we're matching all

00:22:08,240 --> 00:22:11,600
of the frameworks

00:22:09,600 --> 00:22:12,640
that everybody liked all of the python

00:22:11,600 --> 00:22:14,080
frameworks that everyone likes so

00:22:12,640 --> 00:22:14,480
they're all of our frameworks and

00:22:14,080 --> 00:22:18,080
they're

00:22:14,480 --> 00:22:19,440
all of our people and then finally

00:22:18,080 --> 00:22:21,440
where here is our big recommend

00:22:19,440 --> 00:22:22,480
statement with our match and our person

00:22:21,440 --> 00:22:24,159
and the frameworks

00:22:22,480 --> 00:22:26,320
and this is from the point of view of

00:22:24,159 --> 00:22:28,720
chris from the parameter we put in

00:22:26,320 --> 00:22:30,159
and because in our run statement we can

00:22:28,720 --> 00:22:32,320
just add parameters and of course

00:22:30,159 --> 00:22:33,840
that can be optimized later so the the

00:22:32,320 --> 00:22:35,200
database will automatically optimize

00:22:33,840 --> 00:22:37,520
around parameters if you run

00:22:35,200 --> 00:22:38,559
the same query repeatedly and the answer

00:22:37,520 --> 00:22:42,000
to this should be

00:22:38,559 --> 00:22:44,640
flask correct yay

00:22:42,000 --> 00:22:45,679
so let's just quickly just chuck this in

00:22:44,640 --> 00:22:48,799
a

00:22:45,679 --> 00:22:49,760
flask so here are our statements and

00:22:48,799 --> 00:22:51,200
then we're just going to make a quick

00:22:49,760 --> 00:22:52,960
route so let's make um

00:22:51,200 --> 00:22:54,720
let's just see what we've got here this

00:22:52,960 --> 00:22:56,559
is returning our

00:22:54,720 --> 00:22:58,159
statement of all of the frameworks that

00:22:56,559 --> 00:22:59,679
everyone likes let's make a

00:22:58,159 --> 00:23:01,679
recommendation for alice

00:22:59,679 --> 00:23:02,799
no there are no recommendations for

00:23:01,679 --> 00:23:06,559
alice

00:23:02,799 --> 00:23:11,679
bob no but chris we can recommend

00:23:06,559 --> 00:23:11,679
flask terrific alright so

00:23:13,120 --> 00:23:18,799
let's get back to where we were

00:23:16,159 --> 00:23:20,240
so there are so many more demos to play

00:23:18,799 --> 00:23:22,320
with

00:23:20,240 --> 00:23:23,840
i originally had a covert demo and guess

00:23:22,320 --> 00:23:26,080
what it died on

00:23:23,840 --> 00:23:27,679
thursday so these people had already

00:23:26,080 --> 00:23:29,039
made this huge covert database 50

00:23:27,679 --> 00:23:30,159
million records on it that would be

00:23:29,039 --> 00:23:31,440
really cool we could have checked out

00:23:30,159 --> 00:23:34,880
some clinical trials

00:23:31,440 --> 00:23:37,360
um but we made our flask gap instead uh

00:23:34,880 --> 00:23:39,120
there are heaps and heaps and heaps of

00:23:37,360 --> 00:23:41,279
graph demos that people have just put

00:23:39,120 --> 00:23:44,320
around the world i strongly recommend

00:23:41,279 --> 00:23:48,159
recommend playing with them um

00:23:44,320 --> 00:23:51,360
and really this technology is

00:23:48,159 --> 00:23:52,880
kind and new you know like um

00:23:51,360 --> 00:23:54,480
it's much less mature than relational

00:23:52,880 --> 00:23:56,480
databases which are like

00:23:54,480 --> 00:23:57,520
40 years old and depending on who you

00:23:56,480 --> 00:24:00,559
are graphs are like

00:23:57,520 --> 00:24:02,880
10 you know it's just a different

00:24:00,559 --> 00:24:04,000
technological paradigm um and it's

00:24:02,880 --> 00:24:06,080
different from rdb so

00:24:04,000 --> 00:24:07,679
the trick is to start small and know

00:24:06,080 --> 00:24:08,640
what quiet kind of questions you're

00:24:07,679 --> 00:24:09,919
trying to answer and what kind of

00:24:08,640 --> 00:24:12,240
problems you want to solve

00:24:09,919 --> 00:24:13,919
like i'm pretty deep in the kool-aid of

00:24:12,240 --> 00:24:15,279
the graph databases but the big graph

00:24:13,919 --> 00:24:17,200
database project i've been working on

00:24:15,279 --> 00:24:18,799
only has has four components and only

00:24:17,200 --> 00:24:20,320
one of them is graph based

00:24:18,799 --> 00:24:22,159
because just in the right tool for the

00:24:20,320 --> 00:24:24,000
rest of it and um

00:24:22,159 --> 00:24:26,320
it's just a fun ah fundamentally

00:24:24,000 --> 00:24:30,640
different mindset

00:24:26,320 --> 00:24:30,640
um so um

00:24:31,200 --> 00:24:34,480
if there are all the tools are open

00:24:33,200 --> 00:24:35,120
source for the ones that i've been

00:24:34,480 --> 00:24:36,640
looking at

00:24:35,120 --> 00:24:38,240
um lots of work still needs to be done

00:24:36,640 --> 00:24:39,120
there and there are road maps and stuff

00:24:38,240 --> 00:24:41,520
like that

00:24:39,120 --> 00:24:43,120
um but we do need better documentation

00:24:41,520 --> 00:24:46,240
like the beginner documentation

00:24:43,120 --> 00:24:48,080
is isn't great um

00:24:46,240 --> 00:24:49,679
and the other thing too is that these

00:24:48,080 --> 00:24:51,039
communities are actually pretty good and

00:24:49,679 --> 00:24:54,080
i'm kind of selective

00:24:51,039 --> 00:24:56,159
and the communities are actually

00:24:54,080 --> 00:24:57,120
like nice and there are lots of people

00:24:56,159 --> 00:24:59,200
who look like me

00:24:57,120 --> 00:25:00,799
and i knew immediately that i love graph

00:24:59,200 --> 00:25:01,200
databases and i understand that they are

00:25:00,799 --> 00:25:04,080
not

00:25:01,200 --> 00:25:05,919
a good fit for everybody but they're

00:25:04,080 --> 00:25:07,919
good for solving problems you can't

00:25:05,919 --> 00:25:11,120
solve with existing tech and solving

00:25:07,919 --> 00:25:12,960
existing problems differently so

00:25:11,120 --> 00:25:14,400
i'm really looking forward to seeing

00:25:12,960 --> 00:25:15,120
lots of people in the party community

00:25:14,400 --> 00:25:16,960
have fun

00:25:15,120 --> 00:25:18,400
playing with graphs because i sure as

00:25:16,960 --> 00:25:22,400
hell have a heap of fun

00:25:18,400 --> 00:25:23,600
playing with them so um yeah very good

00:25:22,400 --> 00:25:25,039
i hope to see you around and thanks for

00:25:23,600 --> 00:25:28,640
everyone for coming to online it's

00:25:25,039 --> 00:25:30,240
so cool

00:25:28,640 --> 00:25:31,679
great thank you so much for your

00:25:30,240 --> 00:25:33,039
presentation olina that was really

00:25:31,679 --> 00:25:34,720
accessible for me to understand

00:25:33,039 --> 00:25:36,720
what value graph databases can add and

00:25:34,720 --> 00:25:37,919
how to think about them oh thanks for

00:25:36,720 --> 00:25:40,080
dating

00:25:37,919 --> 00:25:41,360
new for jc is really friendly for

00:25:40,080 --> 00:25:42,559
beginners as well

00:25:41,360 --> 00:25:44,159
we've got some good questions in the

00:25:42,559 --> 00:25:44,480
chat for you to hang around and look at

00:25:44,159 --> 00:25:47,039
them

00:25:44,480 --> 00:25:47,679
and vanilla afterwards if you'd like uh

00:25:47,039 --> 00:25:51,120
yeah

00:25:47,679 --> 00:25:52,400
sure yes next up we have intramural gosh

00:25:51,120 --> 00:25:54,640
with introducing

00:25:52,400 --> 00:25:57,200
lambda calculus with python thank you

00:25:54,640 --> 00:26:04,720
very much

00:25:57,200 --> 00:26:04,720

YouTube URL: https://www.youtube.com/watch?v=h8cyPIEfxQY


