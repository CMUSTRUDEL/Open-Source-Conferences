Title: Keynote: Python for Humans
Publication date: 2012-08-23
Playlist: PyCon Australia 2012 - Keynotes
Description: 
	Kenneth Reitz
Python's ecosystem is held up to a high standard, but it falls short in a few key areas. A handful of crucial APIs are an absolute pain to work with. We'll go over where these APIs went wrong and learn about strong and elegant API desig
Captions: 
	00:00:00,000 --> 00:00:05,040
hi everybody how you guys doing today I

00:00:02,159 --> 00:00:06,540
hope you're faring better with the boat

00:00:05,040 --> 00:00:10,080
last night than I was I wasn't feeling

00:00:06,540 --> 00:00:14,759
too well so my name is Kenneth writes

00:00:10,080 --> 00:00:17,580
and this is Python for humans you can

00:00:14,759 --> 00:00:20,340
find me on Twitter at Kenneth writes and

00:00:17,580 --> 00:00:22,289
I work for a company called Heroku which

00:00:20,340 --> 00:00:24,330
is an application development platform

00:00:22,289 --> 00:00:27,269
which allows you to push your code up

00:00:24,330 --> 00:00:29,429
without having to mess with servers and

00:00:27,269 --> 00:00:30,990
it kind of goes really well with the

00:00:29,429 --> 00:00:32,700
things that I'm passionate about which

00:00:30,990 --> 00:00:37,440
I'm going to get into here it which

00:00:32,700 --> 00:00:41,010
include essentially putting the user

00:00:37,440 --> 00:00:42,270
ahead of the implementation so as a

00:00:41,010 --> 00:00:44,010
developer you can spend your time

00:00:42,270 --> 00:00:46,410
working on your code not messing with

00:00:44,010 --> 00:00:48,480
servers they sent me all the way here so

00:00:46,410 --> 00:00:50,520
it's about 10,000 miles that live on the

00:00:48,480 --> 00:00:51,690
east coast of the US so I'm very

00:00:50,520 --> 00:00:54,300
thankful for that

00:00:51,690 --> 00:00:57,300
I've been working on my Australian a

00:00:54,300 --> 00:00:58,710
little bit and I was I was told I'm

00:00:57,300 --> 00:01:02,010
gonna try this but I'm not sure if I can

00:00:58,710 --> 00:01:05,750
do it right it was a how you done is

00:01:02,010 --> 00:01:07,770
that is that about right not quite

00:01:05,750 --> 00:01:13,350
you'll have to give me some training

00:01:07,770 --> 00:01:15,540
later so you may know me from the open

00:01:13,350 --> 00:01:16,979
source that I write I do quite a bit of

00:01:15,540 --> 00:01:19,619
it I'm very passionate about open source

00:01:16,979 --> 00:01:22,430
and it essentially everything in my life

00:01:19,619 --> 00:01:25,380
revolves around it my most popular

00:01:22,430 --> 00:01:28,140
project is called requests which is HTTP

00:01:25,380 --> 00:01:31,170
for humans which we will get to in a bit

00:01:28,140 --> 00:01:34,829
I also authored a project called HTTP

00:01:31,170 --> 00:01:37,140
bin which is kind of this hosted

00:01:34,829 --> 00:01:39,509
framework or it's a hosted essentially

00:01:37,140 --> 00:01:40,950
HTTP mirror that allows you to send

00:01:39,509 --> 00:01:43,409
requests and it just gives you a nice

00:01:40,950 --> 00:01:45,149
JSON response with what you actually

00:01:43,409 --> 00:01:47,579
requested and a couple different tricks

00:01:45,149 --> 00:01:52,500
that can do so you can test how your API

00:01:47,579 --> 00:01:55,890
clients are working also authored legit

00:01:52,500 --> 00:01:57,840
which is a work get workflow tool that's

00:01:55,890 --> 00:02:01,049
written in Python that is a pretty

00:01:57,840 --> 00:02:04,170
useful envoi which is subprocesses and

00:02:01,049 --> 00:02:07,079
it makes a better api essentially for

00:02:04,170 --> 00:02:08,369
showing out two commands which polishes

00:02:07,079 --> 00:02:09,900
security and things like that so I

00:02:08,369 --> 00:02:13,210
wouldn't recommend using it in

00:02:09,900 --> 00:02:16,390
but you may be familiar with that

00:02:13,210 --> 00:02:18,910
there's tab lob which is essentially a

00:02:16,390 --> 00:02:22,560
tabular data set library allows you to

00:02:18,910 --> 00:02:24,430
build these tables of data that are

00:02:22,560 --> 00:02:27,040
they're pretty simple they're just

00:02:24,430 --> 00:02:30,670
essentially regular Python objects but

00:02:27,040 --> 00:02:34,180
then you can just export them to CSV and

00:02:30,670 --> 00:02:36,370
JSON and Excel HTML tables very easily

00:02:34,180 --> 00:02:37,800
which is a pretty nifty for generating

00:02:36,370 --> 00:02:39,790
reports and things like that

00:02:37,800 --> 00:02:42,160
Clint which is a command line

00:02:39,790 --> 00:02:45,040
application toolkit does things like

00:02:42,160 --> 00:02:46,240
shell command coloring and argument

00:02:45,040 --> 00:02:49,210
parsing things like that

00:02:46,240 --> 00:02:51,970
there's auto end which is super awesome

00:02:49,210 --> 00:02:54,580
it allows you to for example you put a

00:02:51,970 --> 00:02:56,170
dot env file in your in a directory for

00:02:54,580 --> 00:02:58,750
a project that you're working on and it

00:02:56,170 --> 00:03:00,460
is essentially a shell script that will

00:02:58,750 --> 00:03:02,560
be executed when you see it into the

00:03:00,460 --> 00:03:05,020
directory so then you can automatically

00:03:02,560 --> 00:03:06,340
activate a virtual LEM and things like

00:03:05,020 --> 00:03:09,220
that when you're like hopping around

00:03:06,340 --> 00:03:11,230
projects it's pretty useful and then

00:03:09,220 --> 00:03:13,360
there's a probably most popular one that

00:03:11,230 --> 00:03:15,700
I've done is called OSX GCC installer

00:03:13,360 --> 00:03:18,850
and that essentially allows you to

00:03:15,700 --> 00:03:20,680
install GCC on your Mac without

00:03:18,850 --> 00:03:22,960
installing Xcode and that the main

00:03:20,680 --> 00:03:25,780
purpose of that is to provoke apples

00:03:22,960 --> 00:03:31,390
lawyers they give me a call every once

00:03:25,780 --> 00:03:33,910
in a while the the more I do open source

00:03:31,390 --> 00:03:36,940
the more I try to push these different

00:03:33,910 --> 00:03:39,540
concepts of you know these lessons

00:03:36,940 --> 00:03:42,130
learned and I'm trying to push this new

00:03:39,540 --> 00:03:43,600
philosophy in like all the code that I

00:03:42,130 --> 00:03:45,600
write it's essentially open source

00:03:43,600 --> 00:03:48,130
everything that you could possibly

00:03:45,600 --> 00:03:50,710
open-source and there's a lot of

00:03:48,130 --> 00:03:52,360
benefits that come from that when you

00:03:50,710 --> 00:03:53,920
start building your tools for open

00:03:52,360 --> 00:03:56,020
source even if they're not going to be

00:03:53,920 --> 00:03:58,000
published we're seen by anybody but the

00:03:56,020 --> 00:04:00,220
company for example if you're writing

00:03:58,000 --> 00:04:02,380
internal code a lot of really great

00:04:00,220 --> 00:04:04,450
things can kind of arise from you know

00:04:02,380 --> 00:04:07,390
that constraint you have a components

00:04:04,450 --> 00:04:08,680
can become concise and decoupled so

00:04:07,390 --> 00:04:10,540
usually when you work on an open source

00:04:08,680 --> 00:04:11,980
project you can't make it extremely

00:04:10,540 --> 00:04:14,170
specific to your problem you have to

00:04:11,980 --> 00:04:15,790
make it nice in general and loosely

00:04:14,170 --> 00:04:18,460
coupled so there's not a lot of overlap

00:04:15,790 --> 00:04:20,500
between different components and that's

00:04:18,460 --> 00:04:21,150
a that's great when you're building

00:04:20,500 --> 00:04:24,419
applications

00:04:21,150 --> 00:04:27,600
in general because it can really force

00:04:24,419 --> 00:04:28,889
you to think about things properly

00:04:27,600 --> 00:04:31,740
instead of just kind of hacking things

00:04:28,889 --> 00:04:33,720
to get things done so and that's it's a

00:04:31,740 --> 00:04:34,979
lot of what I really believe in software

00:04:33,720 --> 00:04:36,389
development is trying to do things the

00:04:34,979 --> 00:04:39,090
right way rather than the really quick

00:04:36,389 --> 00:04:41,340
way of course there's time and place for

00:04:39,090 --> 00:04:43,650
everything but it's it's what I'm

00:04:41,340 --> 00:04:45,259
passionate about personally so when you

00:04:43,650 --> 00:04:47,789
start to build things for open source

00:04:45,259 --> 00:04:50,220
separate our concerns start to separate

00:04:47,789 --> 00:04:52,740
themselves a lot of best best practices

00:04:50,220 --> 00:04:54,630
emerge for example you have you know you

00:04:52,740 --> 00:04:56,460
wouldn't be storing credentials right in

00:04:54,630 --> 00:04:57,000
your codebase if it was an open source

00:04:56,460 --> 00:04:58,229
project

00:04:57,000 --> 00:05:02,400
which you shouldn't be doing for your

00:04:58,229 --> 00:05:05,160
projects anyway documentation I'm sure

00:05:02,400 --> 00:05:06,720
and how many people have robust code

00:05:05,160 --> 00:05:10,410
bases in your company that have like no

00:05:06,720 --> 00:05:13,440
documentation at all yeah so you all

00:05:10,410 --> 00:05:14,699
feel the pain of that I'm sure so if you

00:05:13,440 --> 00:05:16,590
were to treat all of your projects as if

00:05:14,699 --> 00:05:19,919
they were open source we wouldnt have

00:05:16,590 --> 00:05:21,690
that problem and the code can could be

00:05:19,919 --> 00:05:23,009
released as open source at any time if

00:05:21,690 --> 00:05:25,710
you build it this way which is an

00:05:23,009 --> 00:05:27,210
excellent benefit you know usually when

00:05:25,710 --> 00:05:28,680
someone goes to open source an internal

00:05:27,210 --> 00:05:29,940
project they essentially go rewrite all

00:05:28,680 --> 00:05:31,979
the history and they make sure there's

00:05:29,940 --> 00:05:34,139
nothing in it and they do a fresh

00:05:31,979 --> 00:05:36,409
release and it's it's much better to

00:05:34,139 --> 00:05:39,599
just do it properly from the beginning

00:05:36,409 --> 00:05:41,340
so we are all here because of open

00:05:39,599 --> 00:05:45,090
source we love open source Python is

00:05:41,340 --> 00:05:49,590
open source there's a lot of things that

00:05:45,090 --> 00:05:54,150
other than that that draws us to Python

00:05:49,590 --> 00:05:58,020
in general we all I'm sure share a very

00:05:54,150 --> 00:06:02,099
dark past we've all worked with Perl and

00:05:58,020 --> 00:06:06,300
Java PHP ColdFusion classic ASP scheme

00:06:02,099 --> 00:06:08,460
all these other crazy languages and you

00:06:06,300 --> 00:06:10,139
know they're these things about Python

00:06:08,460 --> 00:06:11,849
that really attract us you know the

00:06:10,139 --> 00:06:14,400
reason that we come and we spend all of

00:06:11,849 --> 00:06:15,930
our time and are at this conference well

00:06:14,400 --> 00:06:18,210
either either here because you're using

00:06:15,930 --> 00:06:19,650
Python or you're here because you're

00:06:18,210 --> 00:06:22,979
interested in learning more about Python

00:06:19,650 --> 00:06:26,909
or the the ideals of the language or

00:06:22,979 --> 00:06:29,669
they appeal to you as Chris alluded to

00:06:26,909 --> 00:06:31,680
there is the Zen of Python which is kind

00:06:29,669 --> 00:06:33,630
of the core of what our philosophies are

00:06:31,680 --> 00:06:35,790
if you were to represent them

00:06:33,630 --> 00:06:38,850
in a very concise and short way you'd

00:06:35,790 --> 00:06:42,900
have visit a Python which is pep 20

00:06:38,850 --> 00:06:45,180
which includes 19 statements the 20th of

00:06:42,900 --> 00:06:46,920
which has never been written down I'm

00:06:45,180 --> 00:06:48,990
not sure what it is if anyone knows

00:06:46,920 --> 00:06:52,440
please tell me but essentially it's

00:06:48,990 --> 00:06:55,380
these line by lines of things that are

00:06:52,440 --> 00:06:57,930
kind of represent the philosophy of the

00:06:55,380 --> 00:06:59,910
plaka python ecosystem some good

00:06:57,930 --> 00:07:03,870
examples of this that we're going to

00:06:59,910 --> 00:07:06,950
cover today are that beautiful is better

00:07:03,870 --> 00:07:09,390
than ugly if you have a code base that

00:07:06,950 --> 00:07:11,310
you're looking at all day long you're

00:07:09,390 --> 00:07:12,540
gonna be reading your code ten times as

00:07:11,310 --> 00:07:15,480
often as you're gonna be writing it and

00:07:12,540 --> 00:07:17,130
python in general goes out of the way to

00:07:15,480 --> 00:07:19,200
make sure the syntax is as beautiful as

00:07:17,130 --> 00:07:23,040
possible and there's not a lot of crud

00:07:19,200 --> 00:07:26,760
in the way so beautiful in general is

00:07:23,040 --> 00:07:30,000
better than ugly explicit is better than

00:07:26,760 --> 00:07:31,140
implicit we go out of our way to make

00:07:30,000 --> 00:07:33,600
sure that everything that is happening

00:07:31,140 --> 00:07:37,770
in a code base or in an application is

00:07:33,600 --> 00:07:39,360
actually explicitly declared so that you

00:07:37,770 --> 00:07:40,710
know if you are calling a single

00:07:39,360 --> 00:07:42,030
function for example it's not going to

00:07:40,710 --> 00:07:44,670
actually do all these magical things in

00:07:42,030 --> 00:07:46,110
the background typically and if there's

00:07:44,670 --> 00:07:49,380
not gonna be any environment variables

00:07:46,110 --> 00:07:52,110
or there's gonna be any uh I guess just

00:07:49,380 --> 00:07:54,450
in general like context locals that

00:07:52,110 --> 00:07:56,670
weren't necessarily explicitly declared

00:07:54,450 --> 00:07:58,080
and put there and a lot of different

00:07:56,670 --> 00:08:00,060
farmers can break this if they want and

00:07:58,080 --> 00:08:01,560
so it's a little controversial but in

00:08:00,060 --> 00:08:03,090
general we try to be as explicit as

00:08:01,560 --> 00:08:05,810
possible if you work with the language

00:08:03,090 --> 00:08:07,710
like Ruby they spend a lot of time

00:08:05,810 --> 00:08:09,390
everything's just kind of crazy and you

00:08:07,710 --> 00:08:12,540
have I got these variables that just

00:08:09,390 --> 00:08:14,820
exist from nowhere and it's monkey

00:08:12,540 --> 00:08:17,790
patches that like effect every module

00:08:14,820 --> 00:08:19,170
that you have imported it's uh it's much

00:08:17,790 --> 00:08:20,910
it's I think that's the biggest

00:08:19,170 --> 00:08:23,280
difference between us in Ruby really and

00:08:20,910 --> 00:08:24,390
as you can see there's a kind of

00:08:23,280 --> 00:08:26,850
permeates through absolutely everything

00:08:24,390 --> 00:08:29,190
we do so this is a really good as

00:08:26,850 --> 00:08:32,430
engineers you know we like things to be

00:08:29,190 --> 00:08:37,169
explicit so it's a I think is a big win

00:08:32,430 --> 00:08:41,340
for systems people we have simple is

00:08:37,169 --> 00:08:45,120
better than complex and complex is

00:08:41,340 --> 00:08:46,310
better than complicated so essentially

00:08:45,120 --> 00:08:49,460
what happens

00:08:46,310 --> 00:08:51,440
is you'll build a codebase and you know

00:08:49,460 --> 00:08:52,970
can become you can start layering it and

00:08:51,440 --> 00:08:56,480
layering it and making all these like

00:08:52,970 --> 00:09:00,910
advanced handling messages and these

00:08:56,480 --> 00:09:02,960
yeah what's the best way to say this

00:09:00,910 --> 00:09:06,800
essentially it's really easy to write

00:09:02,960 --> 00:09:08,690
really shitty code yeah so in general

00:09:06,800 --> 00:09:11,300
try to avoid that and a lot of systems

00:09:08,690 --> 00:09:13,370
early pride themselves on complexity

00:09:11,300 --> 00:09:16,270
over anything else in Python in general

00:09:13,370 --> 00:09:18,470
does the best to do the opposite

00:09:16,270 --> 00:09:22,790
that's couldn't gets what separates us

00:09:18,470 --> 00:09:25,160
from Java if the implementation is hard

00:09:22,790 --> 00:09:27,350
to explain it's a bad idea unless you

00:09:25,160 --> 00:09:29,480
are PI pi

00:09:27,350 --> 00:09:32,540
I think we should amend the pep to say

00:09:29,480 --> 00:09:34,700
that essentially if you have a difficult

00:09:32,540 --> 00:09:38,690
time explaining to someone verbally or

00:09:34,700 --> 00:09:39,980
or you know textually online essentially

00:09:38,690 --> 00:09:41,270
it's probably not a good idea that

00:09:39,980 --> 00:09:43,339
you're doing that in the first place if

00:09:41,270 --> 00:09:45,950
it's difficult for you to explain pretty

00:09:43,339 --> 00:09:48,170
simple and this is the most important

00:09:45,950 --> 00:09:50,420
one and it that we are going to cover

00:09:48,170 --> 00:09:53,060
today it is that there is one and

00:09:50,420 --> 00:09:55,790
preferably only one obvious way to do it

00:09:53,060 --> 00:09:57,260
this is something that really separates

00:09:55,790 --> 00:09:58,760
us from a lot of other languages you

00:09:57,260 --> 00:10:00,560
have things like Perl and Ruby where

00:09:58,760 --> 00:10:02,510
they have like 75 different modules to

00:10:00,560 --> 00:10:05,000
do the same thing and Python we have

00:10:02,510 --> 00:10:07,670
quite a we actually have a problem with

00:10:05,000 --> 00:10:11,690
that in a lot of ways but for the most

00:10:07,670 --> 00:10:15,260
part we do value the concept of having

00:10:11,690 --> 00:10:17,060
one obvious way to do it so you've

00:10:15,260 --> 00:10:18,860
chosen Python for let's say your first

00:10:17,060 --> 00:10:20,810
project right you are going to go and

00:10:18,860 --> 00:10:23,210
you were going to build an awesome tool

00:10:20,810 --> 00:10:25,100
and they we have all these values it's

00:10:23,210 --> 00:10:28,040
gonna be excellent you're excited and

00:10:25,100 --> 00:10:30,440
finally a you know a culture of

00:10:28,040 --> 00:10:32,060
engineers that understands the way

00:10:30,440 --> 00:10:38,089
things should be done so welcome to

00:10:32,060 --> 00:10:40,010
paradise lies not the case at all so we

00:10:38,089 --> 00:10:42,740
are going to start out with hitting the

00:10:40,010 --> 00:10:46,820
gate github API for example let's say we

00:10:42,740 --> 00:10:50,450
know Ruby and we are going to try to

00:10:46,820 --> 00:10:53,620
write this code in Python so the first

00:10:50,450 --> 00:10:56,060
thing we're gonna do in Ruby which is a

00:10:53,620 --> 00:10:59,660
it's not the prettiest code but it's

00:10:56,060 --> 00:11:02,930
pretty functional as we import

00:10:59,660 --> 00:11:05,600
an HTTP module called net HTTP has a

00:11:02,930 --> 00:11:09,260
nice name space and we import a URI

00:11:05,600 --> 00:11:11,570
module then we take the URL that we're

00:11:09,260 --> 00:11:15,470
going to be hittin and we parse it with

00:11:11,570 --> 00:11:17,540
the URI module and then we have the URI

00:11:15,470 --> 00:11:20,420
object that we set aside and then we

00:11:17,540 --> 00:11:24,530
create a new HTTP connection with the

00:11:20,420 --> 00:11:29,210
parsed host and port from the URI and we

00:11:24,530 --> 00:11:31,550
tell that connection to use SSL and we

00:11:29,210 --> 00:11:35,030
created a new get request pass it in

00:11:31,550 --> 00:11:36,830
from the URI to the URI and then we

00:11:35,030 --> 00:11:39,620
attach basic authentication with the

00:11:36,830 --> 00:11:41,600
username and password and we get our

00:11:39,620 --> 00:11:43,790
content body back with the actual

00:11:41,600 --> 00:11:45,770
request method it's pretty simple it's

00:11:43,790 --> 00:11:47,720
pretty straightforward it's a little

00:11:45,770 --> 00:11:49,700
monotonous but there's no surprises here

00:11:47,720 --> 00:11:52,610
this should be like kind of an obvious

00:11:49,700 --> 00:11:54,800
thing to do so we're gonna take the

00:11:52,610 --> 00:11:58,160
script and we're going to port it to

00:11:54,800 --> 00:11:59,240
Python so the first thing I'm gonna do

00:11:58,160 --> 00:12:02,000
when you try to do this is you're gonna

00:11:59,240 --> 00:12:05,030
go through and you're gonna look at Hina

00:12:02,000 --> 00:12:07,370
where's pythons net HTTP library and

00:12:05,030 --> 00:12:09,890
you're gonna find a lot of different

00:12:07,370 --> 00:12:13,040
answers that are not very obvious you'll

00:12:09,890 --> 00:12:17,750
find the HTTP live module HTTP live to

00:12:13,040 --> 00:12:21,260
URL Lib URL em to rest kit many many

00:12:17,750 --> 00:12:23,000
others so several hours later you're

00:12:21,260 --> 00:12:25,970
gonna be searching and you're gonna find

00:12:23,000 --> 00:12:27,890
that URL Lib two seems to be the best

00:12:25,970 --> 00:12:29,030
practice according to the community you

00:12:27,890 --> 00:12:30,110
know if you go and Stack Overflow you'll

00:12:29,030 --> 00:12:32,450
probably see that most of the answers

00:12:30,110 --> 00:12:35,030
and that's the most modern version it's

00:12:32,450 --> 00:12:36,260
in a standard library so you know you're

00:12:35,030 --> 00:12:37,460
gonna go through and it supports like

00:12:36,260 --> 00:12:39,680
basic authentication and all these

00:12:37,460 --> 00:12:41,320
things that you need to do so you know

00:12:39,680 --> 00:12:43,700
we're gonna try to do this the prop boy

00:12:41,320 --> 00:12:46,250
the explicit is better than implicit and

00:12:43,700 --> 00:12:48,670
everything and this is what we're gonna

00:12:46,250 --> 00:12:53,150
come out with and it took me probably

00:12:48,670 --> 00:12:55,280
two hours to write this so essentially

00:12:53,150 --> 00:12:57,590
what you do is you import the URL Lib to

00:12:55,280 --> 00:12:59,630
module and then you have your URL that

00:12:57,590 --> 00:13:02,320
you've set aside and you're gonna create

00:12:59,630 --> 00:13:06,590
a new request object from that URL and

00:13:02,320 --> 00:13:09,020
then you create a HTTP password manager

00:13:06,590 --> 00:13:09,750
with a default realm as the password

00:13:09,020 --> 00:13:13,019
manager

00:13:09,750 --> 00:13:16,110
and then you take your URL attach it to

00:13:13,019 --> 00:13:18,689
the password manager with the URL passed

00:13:16,110 --> 00:13:22,050
in as well and then you create an

00:13:18,689 --> 00:13:24,870
authentication manager that called ADA

00:13:22,050 --> 00:13:26,430
HTTP basic authentication Handler and

00:13:24,870 --> 00:13:29,399
then you pass in the password manager

00:13:26,430 --> 00:13:32,670
into the off manager and then you create

00:13:29,399 --> 00:13:34,470
a URL Lib to opener that you build from

00:13:32,670 --> 00:13:37,199
the off manager and then you have your

00:13:34,470 --> 00:13:39,480
opener and then you install the opener

00:13:37,199 --> 00:13:41,069
and then you can open your request and

00:13:39,480 --> 00:13:46,680
then get your response as a socket

00:13:41,069 --> 00:13:48,180
object what the hell and I actually lied

00:13:46,680 --> 00:13:51,269
this is a it's more complicated than

00:13:48,180 --> 00:13:53,459
this so essentially the github API

00:13:51,269 --> 00:13:55,170
actually will go through and if you are

00:13:53,459 --> 00:13:58,759
requesting a protected resource for

00:13:55,170 --> 00:14:01,110
example a private repository a will most

00:13:58,759 --> 00:14:03,180
services I believe it's a 403 they will

00:14:01,110 --> 00:14:06,060
return its is not authorized and github

00:14:03,180 --> 00:14:07,680
will do a 404 saying not found so that

00:14:06,060 --> 00:14:08,639
they don't they don't act like they even

00:14:07,680 --> 00:14:10,379
know what you're talking about when you

00:14:08,639 --> 00:14:12,360
ask for a particular repo so that way I

00:14:10,379 --> 00:14:13,980
couldn't go on your account and then

00:14:12,360 --> 00:14:16,100
just try a bunch of repos and see what

00:14:13,980 --> 00:14:20,069
the names of your projects are so

00:14:16,100 --> 00:14:22,259
essentially so the way that a lot of

00:14:20,069 --> 00:14:25,100
libraries work is they'll just if you're

00:14:22,259 --> 00:14:27,480
explicitly passing in the authentication

00:14:25,100 --> 00:14:28,139
you know the basic authentication for a

00:14:27,480 --> 00:14:29,759
request

00:14:28,139 --> 00:14:32,790
it'll just send it as you are being

00:14:29,759 --> 00:14:36,839
explicit and the if you go according to

00:14:32,790 --> 00:14:38,519
spec and which was what the URL live to

00:14:36,839 --> 00:14:39,899
does it will only send it if it gets the

00:14:38,519 --> 00:14:41,759
proper header back it says hey I need

00:14:39,899 --> 00:14:44,519
authentication not hey I don't know what

00:14:41,759 --> 00:14:47,819
this is so we have to do this thing

00:14:44,519 --> 00:14:50,699
where we write our own forced basic

00:14:47,819 --> 00:14:53,160
authentication Handler and we have to do

00:14:50,699 --> 00:14:57,269
this crazy reg X and essentially

00:14:53,160 --> 00:15:00,990
override the 401 and then over yeah send

00:14:57,269 --> 00:15:03,750
that to the 404 so it's uh yeah I mean

00:15:00,990 --> 00:15:05,309
if you were gonna be have if you had to

00:15:03,750 --> 00:15:08,459
write that in order to do this very

00:15:05,309 --> 00:15:10,559
simple task I think that we you know you

00:15:08,459 --> 00:15:12,529
would essentially leave Python and never

00:15:10,559 --> 00:15:15,449
come back

00:15:12,529 --> 00:15:16,800
the problem is that it's unclear which

00:15:15,449 --> 00:15:19,860
module you're supposed to be using in

00:15:16,800 --> 00:15:22,050
the first place if you search online the

00:15:19,860 --> 00:15:22,570
prognosis seems to be your lib too but

00:15:22,050 --> 00:15:24,610
the dark

00:15:22,570 --> 00:15:26,050
it doesn't even show you how to do

00:15:24,610 --> 00:15:28,480
essentially any of the things that I

00:15:26,050 --> 00:15:30,250
just showed on the slides you know

00:15:28,480 --> 00:15:31,900
you'll find if you search online you'll

00:15:30,250 --> 00:15:33,910
find some pretty good resources a void

00:15:31,900 --> 00:15:36,670
space has a really great you er Lib to

00:15:33,910 --> 00:15:39,760
God but you know those aren't part of

00:15:36,670 --> 00:15:41,680
the standard libraries documentation and

00:15:39,760 --> 00:15:44,260
the API you know even if it was

00:15:41,680 --> 00:15:46,000
extremely well documented is I mean I

00:15:44,260 --> 00:15:52,810
don't think anyone in the room probably

00:15:46,000 --> 00:15:54,730
in would enjoy writing this code this is

00:15:52,810 --> 00:15:56,530
a very serious problem a lot of people

00:15:54,730 --> 00:15:59,020
think that this is probably not a very

00:15:56,530 --> 00:16:00,460
big deal you know just you kind of if

00:15:59,020 --> 00:16:01,510
you're working on a single project you

00:16:00,460 --> 00:16:04,180
just kind of write you're a little shim

00:16:01,510 --> 00:16:05,290
that makes you know your requests for

00:16:04,180 --> 00:16:07,210
you and then that's kind of it you'll

00:16:05,290 --> 00:16:08,860
have to worry about it but I think it's

00:16:07,210 --> 00:16:11,890
one of the biggest problems in the

00:16:08,860 --> 00:16:14,890
ecosystem right now and it's essentially

00:16:11,890 --> 00:16:18,520
HTTP is our universal protocol that we

00:16:14,890 --> 00:16:19,660
use for almost everything nowadays you

00:16:18,520 --> 00:16:21,820
know if you're getting into like

00:16:19,660 --> 00:16:23,530
service-oriented architecture or just

00:16:21,820 --> 00:16:25,600
even building simple web apps interact

00:16:23,530 --> 00:16:27,820
with social media all of these tools are

00:16:25,600 --> 00:16:29,890
all built around HTTP and if it's that

00:16:27,820 --> 00:16:31,690
difficult to make a single request to a

00:16:29,890 --> 00:16:34,300
developer website like github that has

00:16:31,690 --> 00:16:35,590
like one of the best API is around think

00:16:34,300 --> 00:16:37,720
of how hard it would be to do in your

00:16:35,590 --> 00:16:40,960
own infrastructure it would not be a fun

00:16:37,720 --> 00:16:43,480
task so HTTP should essentially in my

00:16:40,960 --> 00:16:48,220
opinion be as simple as a single print

00:16:43,480 --> 00:16:50,470
statement so the solution is simple we

00:16:48,220 --> 00:16:53,770
need to build elegant tools to perform

00:16:50,470 --> 00:16:57,790
these tasks we need what I like to call

00:16:53,770 --> 00:16:58,930
pragmatic packages pragmatic means that

00:16:57,790 --> 00:17:01,180
you are dealing with things in a

00:16:58,930 --> 00:17:03,190
sensible and realistic way that is based

00:17:01,180 --> 00:17:05,320
on practical rather than theoretical

00:17:03,190 --> 00:17:07,240
considerations if you go through and

00:17:05,320 --> 00:17:09,490
look at the URL Lib to documentation

00:17:07,240 --> 00:17:12,760
you'll see lots and lots and lots of

00:17:09,490 --> 00:17:14,740
theoretical use cases that these

00:17:12,760 --> 00:17:19,329
different authentication managers and

00:17:14,740 --> 00:17:21,579
handlers and openers fit but at the end

00:17:19,329 --> 00:17:24,160
of the day 99% of the time you're gonna

00:17:21,579 --> 00:17:25,870
be probably doing you know the same like

00:17:24,160 --> 00:17:30,160
ten things not you don't need to do

00:17:25,870 --> 00:17:32,230
everything possible so essentially a URL

00:17:30,160 --> 00:17:35,610
Lib - method is not pragmatic in any way

00:17:32,230 --> 00:17:39,210
it is it is based on

00:17:35,610 --> 00:17:41,940
rather than practical considerations so

00:17:39,210 --> 00:17:44,490
I like to call Python for humans

00:17:41,940 --> 00:17:45,840
essentially taking everything that you

00:17:44,490 --> 00:17:49,920
do in Python and trying to make it as

00:17:45,840 --> 00:17:53,100
pragmatic as possible so we'll do that

00:17:49,920 --> 00:17:56,010
for example with this HTTP library when

00:17:53,100 --> 00:17:57,990
you break down HTTP essentially what

00:17:56,010 --> 00:18:00,840
you'll see is it's a really a totally

00:17:57,990 --> 00:18:02,880
simple protocol there's a lot of this

00:18:00,840 --> 00:18:05,520
couple nuances and it can be difficult

00:18:02,880 --> 00:18:07,380
to to work with but at the end of the

00:18:05,520 --> 00:18:09,870
day there are a small set of methods

00:18:07,380 --> 00:18:12,480
with consistent parameters you have

00:18:09,870 --> 00:18:16,590
ahead requests and get push post put

00:18:12,480 --> 00:18:19,530
delete etc and all of them except you

00:18:16,590 --> 00:18:21,960
know they can have headers attached they

00:18:19,530 --> 00:18:24,960
have URL parameters for like queries and

00:18:21,960 --> 00:18:28,020
they you attach a body with the request

00:18:24,960 --> 00:18:30,900
body or form data and essentially that's

00:18:28,020 --> 00:18:32,250
all HTTP really is at the end of the day

00:18:30,900 --> 00:18:33,660
I don't see anything in here about

00:18:32,250 --> 00:18:36,720
authentication managers and

00:18:33,660 --> 00:18:41,550
authentication broker systems and

00:18:36,720 --> 00:18:44,880
openers so you are a Lib to when you try

00:18:41,550 --> 00:18:46,500
to use it is quite toxic it's extremely

00:18:44,880 --> 00:18:49,500
over engineered for these very simple

00:18:46,500 --> 00:18:53,010
tasks it abolish is almost all of pep 20

00:18:49,500 --> 00:18:55,050
the docs are impossible to read HTTP is

00:18:53,010 --> 00:18:57,390
a fairly simple protocol and URL Lib too

00:18:55,050 --> 00:18:58,950
is not and if you were the state

00:18:57,390 --> 00:19:00,600
learning Python and trying to do this I

00:18:58,950 --> 00:19:05,910
really feel like it would scare a lot of

00:19:00,600 --> 00:19:07,950
people away so enter requests which is

00:19:05,910 --> 00:19:09,990
HTTP for humans which is the library

00:19:07,950 --> 00:19:11,880
that I wrote that I'm trying to push to

00:19:09,990 --> 00:19:14,730
help fix this problem in the Python

00:19:11,880 --> 00:19:16,590
ecosystem essentially what you do to do

00:19:14,730 --> 00:19:19,710
this exact same thing is you import

00:19:16,590 --> 00:19:21,840
requests you have your URL and you have

00:19:19,710 --> 00:19:24,210
your username and password and then you

00:19:21,840 --> 00:19:26,330
make a get request with the URL and the

00:19:24,210 --> 00:19:30,230
authentication and you get your response

00:19:26,330 --> 00:19:30,230
and that's it very simple

00:19:36,930 --> 00:19:41,230
achievement unlocked it's a small set of

00:19:39,520 --> 00:19:42,820
methods with consistent parameters it

00:19:41,230 --> 00:19:44,680
has every single method right there the

00:19:42,820 --> 00:19:46,750
head that get the push the post the

00:19:44,680 --> 00:19:50,040
patch in the delete and they all accept

00:19:46,750 --> 00:19:54,460
headers URL parameters and form and data

00:19:50,040 --> 00:19:56,170
do this do this with everything that you

00:19:54,460 --> 00:19:58,180
ever have to go and if you have to go

00:19:56,170 --> 00:19:59,440
and find the documentation in reference

00:19:58,180 --> 00:20:02,020
that every single time you use a module

00:19:59,440 --> 00:20:03,730
and I'm sure all of us have many modules

00:20:02,020 --> 00:20:05,230
like this sub process is another good

00:20:03,730 --> 00:20:07,570
example of something that you have to

00:20:05,230 --> 00:20:10,060
essentially use reference documentation

00:20:07,570 --> 00:20:12,160
every time if you have to do that you

00:20:10,060 --> 00:20:13,540
should either be finding a bla Jul

00:20:12,160 --> 00:20:15,940
that's better and easier to use or

00:20:13,540 --> 00:20:17,290
building a new module and not saying

00:20:15,940 --> 00:20:19,510
that those libraries shouldn't exist

00:20:17,290 --> 00:20:21,700
they're often very good low-level

00:20:19,510 --> 00:20:23,350
modules that need to exist but having a

00:20:21,700 --> 00:20:26,530
layered API on top of that that makes it

00:20:23,350 --> 00:20:29,350
actually useable to a developer is a

00:20:26,530 --> 00:20:33,340
much better approach so to do this a

00:20:29,350 --> 00:20:35,830
couple tips you can fit the 90% use case

00:20:33,340 --> 00:20:38,410
essentially so you try to fit those

00:20:35,830 --> 00:20:41,970
pragmatic considerations and not the

00:20:38,410 --> 00:20:44,020
theoretical ones you know 10% of people

00:20:41,970 --> 00:20:46,990
will come to you and they'll be like you

00:20:44,020 --> 00:20:48,760
know I lied what I can't do XYZ and

00:20:46,990 --> 00:20:51,220
essentially what you have to say is I

00:20:48,760 --> 00:20:54,850
don't care I want this to be easy to use

00:20:51,220 --> 00:20:55,840
and actually practical the API is really

00:20:54,850 --> 00:20:57,790
all that should matter when you're

00:20:55,840 --> 00:20:59,950
building these tools and everything else

00:20:57,790 --> 00:21:01,990
should be essentially completely

00:20:59,950 --> 00:21:04,480
secondary and I mean absolutely

00:21:01,990 --> 00:21:07,660
everything you have your features you

00:21:04,480 --> 00:21:09,220
know if you build the API first all

00:21:07,660 --> 00:21:11,230
these other things can come later so you

00:21:09,220 --> 00:21:14,200
can have features later that fit that

00:21:11,230 --> 00:21:15,610
other 10% if you want you don't need to

00:21:14,200 --> 00:21:17,440
necessarily be extremely efficient in

00:21:15,610 --> 00:21:19,540
the beginning you know you don't have to

00:21:17,440 --> 00:21:20,740
have extremely great performance you

00:21:19,540 --> 00:21:26,230
don't have to fit the corner cases

00:21:20,740 --> 00:21:28,330
everything should come after the API so

00:21:26,230 --> 00:21:30,010
you can do this pretty easily if you

00:21:28,330 --> 00:21:32,140
start with you want to want to write a

00:21:30,010 --> 00:21:35,050
new package essentially what you can do

00:21:32,140 --> 00:21:36,760
is write or read me first before you

00:21:35,050 --> 00:21:40,570
write any code so you go through the

00:21:36,760 --> 00:21:41,710
steps and you will write essentially you

00:21:40,570 --> 00:21:43,720
know you have like this is what this

00:21:41,710 --> 00:21:45,790
project is and you can have a few lat

00:21:43,720 --> 00:21:47,920
examples of some different function

00:21:45,790 --> 00:21:49,630
calls and what they will return and how

00:21:47,920 --> 00:21:50,680
you'll actually use the module and then

00:21:49,630 --> 00:21:52,750
you can go through and actually build

00:21:50,680 --> 00:21:53,920
the module there's a lot of different

00:21:52,750 --> 00:21:57,190
terms for this can be called readme

00:21:53,920 --> 00:21:57,520
driven development or it's pretty

00:21:57,190 --> 00:22:01,840
awesome

00:21:57,520 --> 00:22:04,570
I like to call it we call it responsive

00:22:01,840 --> 00:22:06,280
API design a couple other things

00:22:04,570 --> 00:22:07,690
essentially what it is is it allows you

00:22:06,280 --> 00:22:10,330
to actually interact with the problem at

00:22:07,690 --> 00:22:11,800
hand and build something the way it

00:22:10,330 --> 00:22:13,480
should be built and then everything else

00:22:11,800 --> 00:22:15,100
can happen underneath if there's a lot

00:22:13,480 --> 00:22:16,630
of complication in making these simple

00:22:15,100 --> 00:22:18,280
calls that you haven't you read me you

00:22:16,630 --> 00:22:19,690
can do a layered API where you have

00:22:18,280 --> 00:22:22,930
lower-level things that are happening in

00:22:19,690 --> 00:22:25,240
the background but at the end of the day

00:22:22,930 --> 00:22:26,530
you know the API is where people the

00:22:25,240 --> 00:22:28,410
developers are gonna be interacting with

00:22:26,530 --> 00:22:32,170
and that's what really matters

00:22:28,410 --> 00:22:34,180
so you can pivot as you go along so at

00:22:32,170 --> 00:22:36,010
first requests really wasn't that great

00:22:34,180 --> 00:22:38,440
of a library the API it was pretty

00:22:36,010 --> 00:22:40,780
decent but it deeply resonated with

00:22:38,440 --> 00:22:43,240
everybody and over time the features

00:22:40,780 --> 00:22:46,780
grew and the API really never changed

00:22:43,240 --> 00:22:48,730
that much so today well originally it

00:22:46,780 --> 00:22:50,470
was built it was like running on URL Lib

00:22:48,730 --> 00:22:52,830
- which is kind of ironic because I

00:22:50,470 --> 00:22:55,060
actually had to go through and

00:22:52,830 --> 00:22:57,010
essentially the thing I hated the most

00:22:55,060 --> 00:22:59,500
in the world I had to intimately become

00:22:57,010 --> 00:23:02,560
familiar with in order to build it which

00:22:59,500 --> 00:23:04,420
I don't know it's it wasn't the best so

00:23:02,560 --> 00:23:06,220
in the end of the day I ended up

00:23:04,420 --> 00:23:09,700
switching just using the lower level

00:23:06,220 --> 00:23:11,770
even lower level api's directly and so

00:23:09,700 --> 00:23:14,850
today it supports cookies and sessions

00:23:11,770 --> 00:23:17,290
has content iteration so you can

00:23:14,850 --> 00:23:18,370
essentially iterate over your content as

00:23:17,290 --> 00:23:20,560
you're downloading it so you don't have

00:23:18,370 --> 00:23:23,670
to hit like have it all in memory it'll

00:23:20,560 --> 00:23:27,490
automatically decompress zipped

00:23:23,670 --> 00:23:29,170
responses you can do file uploads it has

00:23:27,490 --> 00:23:30,790
an asynchronous module that has a

00:23:29,170 --> 00:23:33,430
built-in keepalive and connection

00:23:30,790 --> 00:23:35,050
pulling support it has a callback hooks

00:23:33,430 --> 00:23:37,570
proxies ooofff

00:23:35,050 --> 00:23:41,260
all kinds of stuff now it's been

00:23:37,570 --> 00:23:42,580
downloaded over 500,000 times and I gave

00:23:41,260 --> 00:23:44,200
his presentation a couple weeks ago and

00:23:42,580 --> 00:23:46,360
it was four hundred thousand so it's a I

00:23:44,200 --> 00:23:49,360
haven't plotted the graph exactly but

00:23:46,360 --> 00:23:51,760
it's pretty crazy and a lot of really

00:23:49,360 --> 00:23:54,280
major companies use it and I'm very

00:23:51,760 --> 00:23:55,440
thankful for that but you know why am I

00:23:54,280 --> 00:23:58,529
telling you this

00:23:55,440 --> 00:24:01,889
cool story bro essentially we all need

00:23:58,529 --> 00:24:03,870
better api's and we want them and the

00:24:01,889 --> 00:24:06,090
success of this library kind of shows

00:24:03,870 --> 00:24:07,649
that it's worth your time as a developer

00:24:06,090 --> 00:24:09,090
if you're building tools like this and

00:24:07,649 --> 00:24:11,370
it's worth everybody else's time because

00:24:09,090 --> 00:24:12,899
it saves lots and lots of developer

00:24:11,370 --> 00:24:16,080
frustration and it helps the Python

00:24:12,899 --> 00:24:17,820
ecosystem because you know those people

00:24:16,080 --> 00:24:18,210
that might have turned away before won't

00:24:17,820 --> 00:24:22,830
anymore

00:24:18,210 --> 00:24:24,000
and that's really important so when you

00:24:22,830 --> 00:24:25,200
go through and you start building things

00:24:24,000 --> 00:24:26,759
like this you'll notice that there's a

00:24:25,200 --> 00:24:29,759
lot of other barriers to entry in the

00:24:26,759 --> 00:24:31,200
ecosystem right I try to cater as much

00:24:29,759 --> 00:24:34,649
as possible to people that are coming

00:24:31,200 --> 00:24:36,480
new to Python or you know for example if

00:24:34,649 --> 00:24:39,029
they work in a different field in Python

00:24:36,480 --> 00:24:40,799
they start doing HTTP for example they

00:24:39,029 --> 00:24:42,570
know they can you need to make it as

00:24:40,799 --> 00:24:44,279
simple as possible so because Python is

00:24:42,570 --> 00:24:47,070
a very broad language it's used for

00:24:44,279 --> 00:24:50,519
everything under the Sun so making

00:24:47,070 --> 00:24:52,049
things in your quadrant as easy to get

00:24:50,519 --> 00:24:54,809
into as possible really has a lot of

00:24:52,049 --> 00:24:56,580
benefits so some other problems in

00:24:54,809 --> 00:25:02,539
Python that really make it difficult for

00:24:56,580 --> 00:25:05,190
newcomers our file and system operations

00:25:02,539 --> 00:25:06,629
there's a quite a few modules I'm sure

00:25:05,190 --> 00:25:07,980
all of us have the same problem where

00:25:06,629 --> 00:25:10,259
whenever we need to do something we have

00:25:07,980 --> 00:25:13,019
to figure out if it's the Syst the sh

00:25:10,259 --> 00:25:16,679
utils o as so as path or i/o module we

00:25:13,019 --> 00:25:17,789
kind of get lost in all those it's

00:25:16,679 --> 00:25:20,429
really difficult to run external

00:25:17,789 --> 00:25:21,720
commands with a subprocess module it's

00:25:20,429 --> 00:25:23,789
once you figure out how to do it it's

00:25:21,720 --> 00:25:26,309
not so bad but it's not a more of a

00:25:23,789 --> 00:25:28,679
documentation problem and I really feel

00:25:26,309 --> 00:25:30,720
like this blocks DevOps people from

00:25:28,679 --> 00:25:34,139
adopting Python and Ruby it's really

00:25:30,720 --> 00:25:36,509
easy to shell out commands to a your

00:25:34,139 --> 00:25:37,679
base system and in Python it's not

00:25:36,509 --> 00:25:39,720
something you really see people doing

00:25:37,679 --> 00:25:41,490
very often so I think that that's

00:25:39,720 --> 00:25:42,840
probably a big reason that all these

00:25:41,490 --> 00:25:45,330
system administration tools are built

00:25:42,840 --> 00:25:50,129
with Ruby if like chef and puppet and

00:25:45,330 --> 00:25:52,860
they're not built in Python so who here

00:25:50,129 --> 00:25:59,070
let's say is installing has installed

00:25:52,860 --> 00:26:01,200
Python on their Mac alright so how many

00:25:59,070 --> 00:26:02,700
of you keep your hands up well actually

00:26:01,200 --> 00:26:07,260
put down two right

00:26:02,700 --> 00:26:11,070
how how many of you installed it from

00:26:07,260 --> 00:26:13,500
python.org you just double-click didn't

00:26:11,070 --> 00:26:17,700
ran the installer okay how many of you

00:26:13,500 --> 00:26:21,960
installed from homebrew how many of you

00:26:17,700 --> 00:26:25,470
use the built-in system Python very bad

00:26:21,960 --> 00:26:31,590
don't do that how many of you use Mac

00:26:25,470 --> 00:26:33,050
ports or Fink for shame I'm trying to

00:26:31,590 --> 00:26:37,350
who built it from source themselves

00:26:33,050 --> 00:26:39,330
excellent I mean what happened to there

00:26:37,350 --> 00:26:42,060
being only one obvious way to do it I

00:26:39,330 --> 00:26:43,710
mean essentially you know there we have

00:26:42,060 --> 00:26:45,720
this beautiful operating system that

00:26:43,710 --> 00:26:47,610
everyone is attracted to and it's you

00:26:45,720 --> 00:26:49,260
know considered by many to be one of the

00:26:47,610 --> 00:26:50,790
better platforms to develop on and yet

00:26:49,260 --> 00:26:53,550
we have all these people that do all

00:26:50,790 --> 00:26:54,990
these different things and it's not very

00:26:53,550 --> 00:26:57,330
obvious which thing you're supposed to

00:26:54,990 --> 00:26:59,070
do so there's some other questions when

00:26:57,330 --> 00:27:01,020
you're building a Python is should you

00:26:59,070 --> 00:27:03,930
use the system Python you have to pick

00:27:01,020 --> 00:27:06,990
if it's 2 or 3 which will get more

00:27:03,930 --> 00:27:08,730
complicated in the future you have you

00:27:06,990 --> 00:27:10,740
know Python velorek you have to pick

00:27:08,730 --> 00:27:13,530
32-bit or 64-bit should you build from

00:27:10,740 --> 00:27:14,970
source and if you're using if you're on

00:27:13,530 --> 00:27:16,320
a Mac you have to pick if it's a UNIX or

00:27:14,970 --> 00:27:17,970
a framework build and most people have

00:27:16,320 --> 00:27:21,450
no idea what that is or the implications

00:27:17,970 --> 00:27:24,180
of that and again there should be one

00:27:21,450 --> 00:27:27,090
obvious way to do it some other problems

00:27:24,180 --> 00:27:29,580
is there's XML hell essentially III

00:27:27,090 --> 00:27:31,500
really annoys people and L XML is a

00:27:29,580 --> 00:27:33,930
really awesome library the documentation

00:27:31,500 --> 00:27:35,510
is not so great but it once you figure

00:27:33,930 --> 00:27:37,680
it out it's really really powerful and

00:27:35,510 --> 00:27:40,200
efficient but it can be really difficult

00:27:37,680 --> 00:27:42,270
to install for a lot of people and that

00:27:40,200 --> 00:27:43,560
prevents a lot of people from building

00:27:42,270 --> 00:27:46,470
tools that they would otherwise be

00:27:43,560 --> 00:27:49,830
building for packaging and dependencies

00:27:46,470 --> 00:27:51,960
to a newcomer it's not very obvious you

00:27:49,830 --> 00:27:54,210
know sure that for example if you're on

00:27:51,960 --> 00:27:55,860
a Mac easy install and you're using the

00:27:54,210 --> 00:27:57,270
system Python is already there and

00:27:55,860 --> 00:27:58,710
people think that is built into Python

00:27:57,270 --> 00:28:00,930
and it's not at all

00:27:58,710 --> 00:28:03,450
so you have to decide between pip and

00:28:00,930 --> 00:28:05,490
easy install people will realize there's

00:28:03,450 --> 00:28:07,070
no easy uninstall which is pretty easy

00:28:05,490 --> 00:28:09,950
to get them to switch to pip then but

00:28:07,070 --> 00:28:12,860
that's a pretty big barrier to entry

00:28:09,950 --> 00:28:14,910
distribute versus set up tools I mean

00:28:12,860 --> 00:28:15,970
should be using distribute I guess but

00:28:14,910 --> 00:28:17,529
no one really knows why

00:28:15,970 --> 00:28:19,059
and it's kind of not obvious if it's

00:28:17,529 --> 00:28:22,389
even being maintained more than set of

00:28:19,059 --> 00:28:25,389
tools now set of tools does appear to be

00:28:22,389 --> 00:28:27,370
built into Python on OSX and people ship

00:28:25,389 --> 00:28:30,460
a lot of broken set up top PI files for

00:28:27,370 --> 00:28:32,470
example you'll try to compile a library

00:28:30,460 --> 00:28:35,139
that has a lot of C extensions and it

00:28:32,470 --> 00:28:36,460
just won't work essentially and another

00:28:35,139 --> 00:28:39,700
big problem is that people will release

00:28:36,460 --> 00:28:40,960
packages on to the cheese shop and they

00:28:39,700 --> 00:28:42,220
well they won't be on the cheese shop

00:28:40,960 --> 00:28:43,690
essentially they'll be on github it'll

00:28:42,220 --> 00:28:45,070
be like go check out my library and it's

00:28:43,690 --> 00:28:47,950
definitely not the way you should be

00:28:45,070 --> 00:28:50,320
doing things some other complications

00:28:47,950 --> 00:28:51,940
are you have to decide what module to

00:28:50,320 --> 00:28:54,820
use when you're doing date times there's

00:28:51,940 --> 00:28:56,950
the date time module date time calendar

00:28:54,820 --> 00:28:59,080
date util when you try to install they

00:28:56,950 --> 00:29:00,519
eat a little work if you're on to seven

00:28:59,080 --> 00:29:02,019
so you it because it'll install the

00:29:00,519 --> 00:29:05,350
Python 3 version by default you have to

00:29:02,019 --> 00:29:06,000
go specify a specific release it's a

00:29:05,350 --> 00:29:08,440
nightmare

00:29:06,000 --> 00:29:10,990
there's timezone hell and we're not

00:29:08,440 --> 00:29:14,049
gonna get into that but I'm sure you all

00:29:10,990 --> 00:29:17,490
feel the pain and the standard lab can

00:29:14,049 --> 00:29:19,509
generate but not parse ISO 8601 dates

00:29:17,490 --> 00:29:23,860
little things that really kind of

00:29:19,509 --> 00:29:25,529
frustrate you come errs Unicode we're

00:29:23,860 --> 00:29:29,379
not really gonna get into this but uh

00:29:25,529 --> 00:29:31,389
unicode essentially you can go through

00:29:29,379 --> 00:29:33,250
and you'll you'll I think eventually

00:29:31,389 --> 00:29:34,870
what happens is someone right you'll

00:29:33,250 --> 00:29:36,190
Google this one or you'll find like on

00:29:34,870 --> 00:29:37,600
hacker news or something that's one blog

00:29:36,190 --> 00:29:40,000
post for this presentation that will

00:29:37,600 --> 00:29:41,529
really kind of make it obvious what you

00:29:40,000 --> 00:29:43,000
should be doing but you know it usually

00:29:41,529 --> 00:29:45,820
takes a year or two for you to get to

00:29:43,000 --> 00:29:48,070
that point and it's you know there's not

00:29:45,820 --> 00:29:49,720
a very easy thing to get into and to

00:29:48,070 --> 00:29:53,799
understand properly Python three makes

00:29:49,720 --> 00:29:55,149
it a lot better but to anyway

00:29:53,799 --> 00:29:56,320
testing there's a little bit of

00:29:55,149 --> 00:29:57,399
confusion around what kind of test

00:29:56,320 --> 00:29:59,440
manners you should be using

00:29:57,399 --> 00:30:01,330
there's the built in one for unit tests

00:29:59,440 --> 00:30:03,759
I believe has a test runner theirs knows

00:30:01,330 --> 00:30:07,240
there's product tests there's a test

00:30:03,759 --> 00:30:09,100
there's all kinds of stuff and you know

00:30:07,240 --> 00:30:10,899
there's doc tests and people sometimes

00:30:09,100 --> 00:30:13,600
will use that for pretty robust serious

00:30:10,899 --> 00:30:14,289
testing and they shouldn't be little

00:30:13,600 --> 00:30:18,100
things like that

00:30:14,289 --> 00:30:19,659
installing dependencies okay so if you

00:30:18,100 --> 00:30:21,100
remember the name of the my sequel

00:30:19,659 --> 00:30:21,780
module when you're trying to install it

00:30:21,100 --> 00:30:23,340
I mean

00:30:21,780 --> 00:30:25,410
who here has ever like forgotten the

00:30:23,340 --> 00:30:27,660
name of that module yeah it like happens

00:30:25,410 --> 00:30:29,160
constantly once you remember the name

00:30:27,660 --> 00:30:32,400
like you know you have to try to install

00:30:29,160 --> 00:30:35,340
it and it's uh that that's just yeah

00:30:32,400 --> 00:30:37,590
that's all needs to be said it's it's

00:30:35,340 --> 00:30:39,090
quite frustrating there's the well

00:30:37,590 --> 00:30:42,150
that's just an excuse to be using a

00:30:39,090 --> 00:30:43,860
psycho PG and post-grad but that

00:30:42,150 --> 00:30:44,400
prevents a lot of people from moving to

00:30:43,860 --> 00:30:46,400
Python

00:30:44,400 --> 00:30:48,780
you have the Python imaging library

00:30:46,400 --> 00:30:51,870
which is really robust and pretty nice

00:30:48,780 --> 00:30:52,950
but it's hard to install it's really

00:30:51,870 --> 00:30:54,720
simple once you figure out how to

00:30:52,950 --> 00:30:57,570
install but getting to that point it's

00:30:54,720 --> 00:31:01,140
not the documentation it can be very

00:30:57,570 --> 00:31:03,510
frustrating to people in L XML again mod

00:31:01,140 --> 00:31:06,660
whiskey can be difficult sorry Graham to

00:31:03,510 --> 00:31:07,590
install against essentially if you're

00:31:06,660 --> 00:31:09,750
trying to build it and things like that

00:31:07,590 --> 00:31:11,700
or make very specific Python changes and

00:31:09,750 --> 00:31:13,050
you're like on a bun to for example

00:31:11,700 --> 00:31:15,180
you'll just use the Python that comes

00:31:13,050 --> 00:31:17,910
with mod whiskey and you makes it a

00:31:15,180 --> 00:31:22,200
little difficult to break to decouple

00:31:17,910 --> 00:31:24,420
those things so my solution to a lot of

00:31:22,200 --> 00:31:26,550
these problems is to build a tool or

00:31:24,420 --> 00:31:28,800
website a resource called The

00:31:26,550 --> 00:31:32,280
Hitchhiker's Guide to Python which is

00:31:28,800 --> 00:31:32,520
available at Python guide org and it is

00:31:32,280 --> 00:31:35,310
uh

00:31:32,520 --> 00:31:37,350
the core message is that you shouldn't

00:31:35,310 --> 00:31:40,050
panic you should always carry a towel of

00:31:37,350 --> 00:31:41,850
course but essentially what it does is

00:31:40,050 --> 00:31:45,270
it documents all of our best practices

00:31:41,850 --> 00:31:46,320
and it is a guidebook for newcomers so

00:31:45,270 --> 00:31:48,840
they can go through and they can see

00:31:46,320 --> 00:31:53,760
exactly what best practices we have and

00:31:48,840 --> 00:31:55,220
what they should be doing the Python org

00:31:53,760 --> 00:31:57,810
site is really great and there's some

00:31:55,220 --> 00:32:00,360
real good efforts right now to try to

00:31:57,810 --> 00:32:02,550
kind of change its purpose but at the

00:32:00,360 --> 00:32:04,440
moment it's essentially you know it's

00:32:02,550 --> 00:32:05,730
not gonna be opinionated in any way it's

00:32:04,440 --> 00:32:08,310
not going to say use Django in flask

00:32:05,730 --> 00:32:10,730
it's not going to say use this version

00:32:08,310 --> 00:32:13,200
of Python on OSX and install it this way

00:32:10,730 --> 00:32:14,970
essentially you know there needs to be

00:32:13,200 --> 00:32:16,380
another resource for these things and

00:32:14,970 --> 00:32:18,510
that's that's what python guide tries to

00:32:16,380 --> 00:32:20,040
fill so it's a guidebook for newcomers

00:32:18,510 --> 00:32:21,990
then it's a reference for seasoned

00:32:20,040 --> 00:32:23,310
veterans who for example are moving to a

00:32:21,990 --> 00:32:25,440
different area and Python there or not

00:32:23,310 --> 00:32:28,220
they don't have expertise in and of

00:32:25,440 --> 00:32:30,450
course don't panic in North Korea tell

00:32:28,220 --> 00:32:31,380
the best practices it recommends for

00:32:30,450 --> 00:32:34,130
example is that you should be using

00:32:31,380 --> 00:32:35,480
distribute and pimp in virtual mmm

00:32:34,130 --> 00:32:37,730
like that's right in the installation

00:32:35,480 --> 00:32:39,800
guide for Python so you do that right

00:32:37,730 --> 00:32:41,900
from the day from the get-go

00:32:39,800 --> 00:32:44,300
there's explicit installation directions

00:32:41,900 --> 00:32:46,010
for every operating system and you know

00:32:44,300 --> 00:32:48,320
this is all open source and on github so

00:32:46,010 --> 00:32:49,850
if someone believes that the way I'm

00:32:48,320 --> 00:32:51,260
recommending isn't correct they can't

00:32:49,850 --> 00:32:53,540
open up an issue and we can be discussed

00:32:51,260 --> 00:32:57,050
as a community and we can decide what is

00:32:53,540 --> 00:32:58,580
the obvious way to do it in stills and

00:32:57,050 --> 00:33:01,550
resistance to dock tests and it teaches

00:32:58,580 --> 00:33:08,810
the adamant use of date time UTC now

00:33:01,550 --> 00:33:10,580
with time zone naive date times yes but

00:33:08,810 --> 00:33:12,230
there's only one rule on the website and

00:33:10,580 --> 00:33:14,800
it is that there should be one and

00:33:12,230 --> 00:33:17,030
preferably only one obvious way to do it

00:33:14,800 --> 00:33:18,920
once you go through and build this it

00:33:17,030 --> 00:33:20,000
makes Python a lot more accessible it

00:33:18,920 --> 00:33:22,220
lowers the barrier to entry

00:33:20,000 --> 00:33:23,570
it sets developers on the right path

00:33:22,220 --> 00:33:24,650
from the start so you don't have these

00:33:23,570 --> 00:33:26,900
people building these terrible

00:33:24,650 --> 00:33:28,880
frameworks that are just the worst or

00:33:26,900 --> 00:33:30,770
these you know these tools that are just

00:33:28,880 --> 00:33:32,330
completely isolated from the rest of the

00:33:30,770 --> 00:33:35,780
Python ecosystem because they do their

00:33:32,330 --> 00:33:39,140
own things and essentially it allows us

00:33:35,780 --> 00:33:40,970
to practice what we preach so I

00:33:39,140 --> 00:33:42,860
recommend if you guys want to check that

00:33:40,970 --> 00:33:46,460
out it's at python.org it's also on

00:33:42,860 --> 00:33:50,060
github and I have our first one it was

00:33:46,460 --> 00:33:53,480
launched essentially it was a an outline

00:33:50,060 --> 00:33:55,220
and about a hundred 120 I think people

00:33:53,480 --> 00:33:56,630
have sent pull requests like filling in

00:33:55,220 --> 00:34:00,080
their own section that they're experts

00:33:56,630 --> 00:34:02,780
in and it's really growing quite a bit I

00:34:00,080 --> 00:34:05,180
think it gets about 2,000 visitors a day

00:34:02,780 --> 00:34:06,890
now maybe I haven't really thought a ton

00:34:05,180 --> 00:34:08,300
to push it so it's gonna be I think

00:34:06,890 --> 00:34:10,310
it'll be pretty great once everything is

00:34:08,300 --> 00:34:12,200
once we get a lot more people involved

00:34:10,310 --> 00:34:14,360
and have full requests happening every

00:34:12,200 --> 00:34:15,980
day it'll be pretty awesome so hey you

00:34:14,360 --> 00:34:18,080
can use it if you're new to Python and

00:34:15,980 --> 00:34:20,210
you want to learn more and B if you want

00:34:18,080 --> 00:34:21,860
to contribute which most people in this

00:34:20,210 --> 00:34:23,510
room I believe can even if you're a

00:34:21,860 --> 00:34:25,100
newcomer you know you get to see the

00:34:23,510 --> 00:34:26,030
things that confuse you and those are

00:34:25,100 --> 00:34:28,340
the things that should be in the guide

00:34:26,030 --> 00:34:30,170
so I definitely recommend you check it

00:34:28,340 --> 00:34:33,220
out if you'd like to help

00:34:30,170 --> 00:34:36,670
so the manifesto of my presentation is

00:34:33,220 --> 00:34:41,620
simple simplify your terrible api's and

00:34:36,670 --> 00:34:41,620
document our best practices that's it

00:34:48,160 --> 00:34:52,690
good throwing questions could you please

00:34:50,440 --> 00:34:54,580
come and form a queue up around here

00:34:52,690 --> 00:34:57,190
conveniently our first question is where

00:34:54,580 --> 00:34:59,440
I'm going to start the queue by their

00:34:57,190 --> 00:35:02,800
great tall things and I was just looking

00:34:59,440 --> 00:35:04,420
at the the source of requests and deep

00:35:02,800 --> 00:35:07,120
in the packages library those you are a

00:35:04,420 --> 00:35:10,360
you are a live 3 correct what's

00:35:07,120 --> 00:35:11,920
happening there so your lip 3 is a kind

00:35:10,360 --> 00:35:15,160
of an ironic name essentially what it is

00:35:11,920 --> 00:35:17,800
is the developer whose name is uh andrei

00:35:15,160 --> 00:35:19,750
petrov he went through and he you know

00:35:17,800 --> 00:35:20,830
he saw that URL live in your lib to

00:35:19,750 --> 00:35:22,870
really have nothing to do with one

00:35:20,830 --> 00:35:24,460
another so he wanted to build a new HTTP

00:35:22,870 --> 00:35:26,130
library and he decided to call it your

00:35:24,460 --> 00:35:28,390
lip three

00:35:26,130 --> 00:35:31,840
so essentially what it does is it is

00:35:28,390 --> 00:35:34,900
HTTP live with it's slightly wrapped in

00:35:31,840 --> 00:35:37,450
ads connection pooling and file uploads

00:35:34,900 --> 00:35:39,070
essentially and keep alive so that's

00:35:37,450 --> 00:35:40,810
what you are lib three is and i work

00:35:39,070 --> 00:35:44,890
very closely with the developer of that

00:35:40,810 --> 00:35:46,840
and essentially i take the whole source

00:35:44,890 --> 00:35:50,920
tree and embed it into request instead

00:35:46,840 --> 00:35:52,810
of doing a dependency because i kind of

00:35:50,920 --> 00:35:54,040
consider it a fork like if i'm waiting

00:35:52,810 --> 00:35:56,830
for him to make a change i can make the

00:35:54,040 --> 00:35:58,690
change in the meantime and requests is i

00:35:56,830 --> 00:36:00,850
want it to be fully embeddable in your

00:35:58,690 --> 00:36:04,120
application if you're building a lot of

00:36:00,850 --> 00:36:05,740
system tools essentially you know like

00:36:04,120 --> 00:36:08,260
an api client that's on the command line

00:36:05,740 --> 00:36:10,720
it's really valuable to put those things

00:36:08,260 --> 00:36:12,760
into the source trees so that it doesn't

00:36:10,720 --> 00:36:15,370
conflict with other things like the HTTP

00:36:12,760 --> 00:36:17,710
live to had a big thing for awhile like

00:36:15,370 --> 00:36:18,640
the MPO clients and a gondor client

00:36:17,710 --> 00:36:21,340
we're different than like what the

00:36:18,640 --> 00:36:23,080
github you get up to api required and

00:36:21,340 --> 00:36:25,270
like you could never install those all

00:36:23,080 --> 00:36:26,740
in the same environment so embedding

00:36:25,270 --> 00:36:30,270
those things and system tools i think is

00:36:26,740 --> 00:36:32,500
pretty valuable so that's why i embed it

00:36:30,270 --> 00:36:34,240
second question this time you're a bit

00:36:32,500 --> 00:36:35,260
slow off the mark hamlet and stand up

00:36:34,240 --> 00:36:37,180
fast enough

00:36:35,260 --> 00:36:38,680
okay i've got the question of god is

00:36:37,180 --> 00:36:40,990
essentially one about community

00:36:38,680 --> 00:36:42,070
management and how this sort of

00:36:40,990 --> 00:36:44,290
philosophy you're talking about which

00:36:42,070 --> 00:36:46,390
are completely on board with fits into

00:36:44,290 --> 00:36:47,710
the greater park Python ecosystem one of

00:36:46,390 --> 00:36:49,060
the big selling points of plan has

00:36:47,710 --> 00:36:50,050
always been batteries included now you

00:36:49,060 --> 00:36:51,850
don't need to worry about anything

00:36:50,050 --> 00:36:53,020
anywhere else because you just

00:36:51,850 --> 00:36:56,650
downloaded into there and all the things

00:36:53,020 --> 00:36:58,750
you need are there and there's a sort of

00:36:56,650 --> 00:37:00,670
a trade-off between one having the 90%

00:36:58,750 --> 00:37:02,680
solution which works for most people

00:37:00,670 --> 00:37:05,440
and having the solution that works for

00:37:02,680 --> 00:37:07,240
everybody batteries included I wasn't

00:37:05,440 --> 00:37:08,799
around for the development of HTTP Lib -

00:37:07,240 --> 00:37:10,420
or you are a Lib - or any of those but I

00:37:08,799 --> 00:37:11,650
can see exactly how that conversation

00:37:10,420 --> 00:37:12,910
got us to the point where we have

00:37:11,650 --> 00:37:14,470
openers the North managers and all the

00:37:12,910 --> 00:37:17,049
rest of it because you do want to have

00:37:14,470 --> 00:37:19,660
all these things you can do in HTTP that

00:37:17,049 --> 00:37:22,960
your requesters can't do most people

00:37:19,660 --> 00:37:24,819
aren't gonna care about them what's I

00:37:22,960 --> 00:37:27,730
just interested having your comments on

00:37:24,819 --> 00:37:29,079
you know windows requests get into the

00:37:27,730 --> 00:37:30,220
the step light of the standard library

00:37:29,079 --> 00:37:32,470
should it be in the Python standard

00:37:30,220 --> 00:37:33,790
library why is it not why should it not

00:37:32,470 --> 00:37:36,040
be in the Python standard library and

00:37:33,790 --> 00:37:38,530
that issue of how how does the community

00:37:36,040 --> 00:37:40,960
deal with having more than one way to do

00:37:38,530 --> 00:37:43,299
it externally but still recommending one

00:37:40,960 --> 00:37:44,349
that's that is there no the right way to

00:37:43,299 --> 00:37:46,690
do it but it isn't in the in the

00:37:44,349 --> 00:37:49,119
standard library and so issues of ya

00:37:46,690 --> 00:37:50,470
know so essentially what happens is when

00:37:49,119 --> 00:37:52,089
you're you know trying to fix

00:37:50,470 --> 00:37:53,200
I think problems in Python in general

00:37:52,089 --> 00:37:56,859
there's two different approaches you can

00:37:53,200 --> 00:37:58,540
take you can take the approach of going

00:37:56,859 --> 00:38:00,910
through the pet process and like going

00:37:58,540 --> 00:38:03,099
top-down essentially and or you can just

00:38:00,910 --> 00:38:05,140
kind of build something and then have if

00:38:03,099 --> 00:38:07,780
the official community wants to respond

00:38:05,140 --> 00:38:09,309
and can adopt it and that's the path

00:38:07,780 --> 00:38:10,599
that I try to take so you know I'm not

00:38:09,309 --> 00:38:12,819
going to go and like to start a pet to

00:38:10,599 --> 00:38:14,290
like fix HTTP before I start working on

00:38:12,819 --> 00:38:16,059
a great library I'm gonna build it and

00:38:14,290 --> 00:38:17,619
just you know I'm not gonna do the same

00:38:16,059 --> 00:38:20,410
thing with python.org I'm not gonna

00:38:17,619 --> 00:38:24,880
maybe you know to me I'm not gonna waste

00:38:20,410 --> 00:38:26,140
my time going through the be trying to

00:38:24,880 --> 00:38:28,359
think of the right word but such as the

00:38:26,140 --> 00:38:30,250
bureaucracy of going you know changing

00:38:28,359 --> 00:38:32,200
the python.org side so for me building

00:38:30,250 --> 00:38:33,700
my own that's proper and then you know

00:38:32,200 --> 00:38:35,260
if python doric wants to adopt some

00:38:33,700 --> 00:38:38,049
similar things and it could happen if

00:38:35,260 --> 00:38:40,180
that can happen so as far as a standard

00:38:38,049 --> 00:38:41,260
library is concerned a love request to

00:38:40,180 --> 00:38:43,150
be in a standard library but it's

00:38:41,260 --> 00:38:45,730
definitely not at that point yet it's a

00:38:43,150 --> 00:38:48,430
very stable library but I'm developed

00:38:45,730 --> 00:38:50,530
quite iteratively on it so essentially

00:38:48,430 --> 00:38:53,500
the standard library as they say is

00:38:50,530 --> 00:38:57,790
where library goes to die in a good way

00:38:53,500 --> 00:38:59,920
though so essentially you know it's a

00:38:57,790 --> 00:39:02,440
burial with allness yes exactly

00:38:59,920 --> 00:39:03,790
yes you know you can't really change it

00:39:02,440 --> 00:39:05,079
once it's in there and it's not it

00:39:03,790 --> 00:39:07,150
wouldn't I wouldn't have control over it

00:39:05,079 --> 00:39:10,599
anymore which is fine once I get to that

00:39:07,150 --> 00:39:12,339
big like I'm done state essentially and

00:39:10,599 --> 00:39:12,859
it's only bug fixes but I'm not not at

00:39:12,339 --> 00:39:16,670
that point

00:39:12,859 --> 00:39:18,079
so yeah and essentially I you know

00:39:16,670 --> 00:39:22,959
batteries included is a really great

00:39:18,079 --> 00:39:24,589
system and but it doesn't necessarily

00:39:22,959 --> 00:39:25,700
try it you have to be really careful

00:39:24,589 --> 00:39:27,559
with what you're adding to the standard

00:39:25,700 --> 00:39:29,930
library essentially and things can

00:39:27,559 --> 00:39:32,959
change pretty quickly so I think there's

00:39:29,930 --> 00:39:34,789
a big value in you know encouraging

00:39:32,959 --> 00:39:36,200
people to be using you know packaging

00:39:34,789 --> 00:39:37,849
and not just relying on the standard

00:39:36,200 --> 00:39:41,839
library I feel like that's the best

00:39:37,849 --> 00:39:44,539
practice nowadays so yeah it'll be in

00:39:41,839 --> 00:39:48,680
there one day okay we have time for one

00:39:44,539 --> 00:39:51,499
more question I was just curious about

00:39:48,680 --> 00:39:54,469
you come into the our duct test yeah I

00:39:51,499 --> 00:39:56,869
was wondering what it was about doctors

00:39:54,469 --> 00:39:59,479
that you think it's not a good solution

00:39:56,869 --> 00:40:01,969
and what you see best practice as in

00:39:59,479 --> 00:40:03,380
testing so dog test is really nice and

00:40:01,969 --> 00:40:07,579
it's a very elegant solution for

00:40:03,380 --> 00:40:09,319
essentially testing your readme driven

00:40:07,579 --> 00:40:10,789
development in a way so at the top of

00:40:09,319 --> 00:40:13,789
your module you'll say like here's how I

00:40:10,789 --> 00:40:15,890
use it or in your stinks documentation

00:40:13,789 --> 00:40:17,719
you can say you know these are the steps

00:40:15,890 --> 00:40:19,519
is what output should be and you can

00:40:17,719 --> 00:40:20,569
test that and that's really nice and if

00:40:19,519 --> 00:40:23,420
you're building I think like a one-off

00:40:20,569 --> 00:40:25,910
script or just a small thing or you want

00:40:23,420 --> 00:40:27,289
to sanitize sanity check your code

00:40:25,910 --> 00:40:29,869
examples I think it's a great tool for

00:40:27,289 --> 00:40:32,569
that but you know some people will go

00:40:29,869 --> 00:40:34,489
down the line and they'll actually build

00:40:32,569 --> 00:40:36,680
like their entire test suite for a very

00:40:34,489 --> 00:40:39,289
robust application all in doc test and

00:40:36,680 --> 00:40:40,579
that's there's a lot of problems with

00:40:39,289 --> 00:40:42,349
that you know because it's not actual

00:40:40,579 --> 00:40:45,529
code you know it's like a string that

00:40:42,349 --> 00:40:48,499
they're manipulating so unit test is a

00:40:45,529 --> 00:40:50,029
really great module and you know that's

00:40:48,499 --> 00:40:51,499
essentially what you should be writing

00:40:50,029 --> 00:40:54,170
your unit tests and I think the

00:40:51,499 --> 00:40:55,219
integration test as well with unit tests

00:40:54,170 --> 00:40:57,410
and then running them with something

00:40:55,219 --> 00:40:59,449
like nose or PI test or running them

00:40:57,410 --> 00:41:01,069
directly works really well

00:40:59,449 --> 00:41:04,130
PI test in general is really great but

00:41:01,069 --> 00:41:05,989
like it it has a specific time place and

00:41:04,130 --> 00:41:10,699
I think it's overused a bit and

00:41:05,989 --> 00:41:13,999
essentially one yeah absolutely right as

00:41:10,699 --> 00:41:17,080
a token all of our thanks this wakeful

00:41:13,999 --> 00:41:20,300
just to actually bring those over

00:41:17,080 --> 00:41:22,910
we have this fantastic pike on Australia

00:41:20,300 --> 00:41:25,700
Hobart 2012 coffee cup excellent thank a

00:41:22,910 --> 00:41:28,100
bag of African swallow coffee beans from

00:41:25,700 --> 00:41:30,620
ritual coffee Tasmania to put inside the

00:41:28,100 --> 00:41:33,800
coffee cup it's African or European no

00:41:30,620 --> 00:41:35,330
no definitely effort and a 500 mil

00:41:33,800 --> 00:41:37,160
bottle of cask strength

00:41:35,330 --> 00:41:38,600
single malt Tasmanian whisky with thanks

00:41:37,160 --> 00:41:39,800
to the Locke distillery and cotton

00:41:38,600 --> 00:41:42,430
everyone please thank Kenneth for a

00:41:39,800 --> 00:41:42,430

YouTube URL: https://www.youtube.com/watch?v=Y97D8j6CAog


