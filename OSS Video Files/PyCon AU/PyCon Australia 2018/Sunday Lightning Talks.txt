Title: Sunday Lightning Talks
Publication date: 2018-08-26
Playlist: PyCon Australia 2018
Description: 
	00:40 - Tim Heap - chucksof() - The Story of a generator
06:07 - Nic James - PyO3
08:27 - Tisham Dhar - Tracking trucks in East Africa using satellites and words 
13:36 - Brett Swanson - Using Sphnix and Jira and Python to automate the creation of software release reports
17:40 - Amber Brown - String encodings, and how we got into this mess
23:15 - Cormac Kikkert - Building a 3D simulation (in PyGame)
27:22 - Libby Berrie - python Bugs
32:54 - Lewis Bobberman - Don't do this
39:02 - Aden Pulford - Confessions of a GOTO user
44:27 - Merrin Macleod - Flip Flop Face Offerator
51:01 - Aaron Leech  - How to do embedded device development better with MicroPython and Jupyter
56:39 - Nick Coghlan - Controversial PEPs you've (probably) never herad of


Lightning Talk Tzar

https://2018.pycon-au.org/lightning-talks

Lightning talks are 5 minute talks. You have 5 minutes. 5 shall be the number, and the number shall be 5. 6 is too much.

Python, PyCon, PyConAU, australia, programming, sydney

This video is licensed under CC BY 3.0 AU - https://creativecommons.org/licenses/by/3.0/au/

PyCon Australia (“PyCon AU”) is the national conference for the Python Programming Community, bringing together professional, student and enthusiast developers with a love for developing with Python.

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 24 - 28 2018.

Python, PyCon, PyConAU
Captions: 
	00:00:00,709 --> 00:00:10,590
lights I've always wanted to do that

00:00:07,859 --> 00:00:18,930
that's fun lightning talks time applaud

00:00:10,590 --> 00:00:24,960
please stop lights back up lights back

00:00:18,930 --> 00:00:26,369
lights back up I gotta get off stage can

00:00:24,960 --> 00:00:37,770
we have the lights up again please I'm

00:00:26,369 --> 00:00:38,219
gonna try again right lights stop much

00:00:37,770 --> 00:00:46,730
better

00:00:38,219 --> 00:00:49,289
Tim hoop slides thank you alright so

00:00:46,730 --> 00:00:52,110
this is the story of me attempting to

00:00:49,289 --> 00:00:53,460
write a generator chunks of it's a

00:00:52,110 --> 00:00:54,809
generator that many people have trained

00:00:53,460 --> 00:00:56,579
to try to write over the years and

00:00:54,809 --> 00:00:57,960
there's stackoverflow everywhere and I

00:00:56,579 --> 00:01:00,539
looked at the implementation and they

00:00:57,960 --> 00:01:03,510
were all not quite right so I try to

00:01:00,539 --> 00:01:06,000
implement it a good one and I got a

00:01:03,510 --> 00:01:09,210
little distracted so this is the story

00:01:06,000 --> 00:01:11,850
of that generator so the goal of this

00:01:09,210 --> 00:01:15,000
generator is to make so take an iterable

00:01:11,850 --> 00:01:16,409
and then return some chunks and full of

00:01:15,000 --> 00:01:19,110
chunk so you can iterate over those

00:01:16,409 --> 00:01:21,720
chunks so that you can do chunk of

00:01:19,110 --> 00:01:23,549
computation the the code that we're

00:01:21,720 --> 00:01:27,710
trying to make run is on the screen

00:01:23,549 --> 00:01:30,210
currently there are as I said numerous

00:01:27,710 --> 00:01:35,509
implementations on Stack Overflow they

00:01:30,210 --> 00:01:38,130
range from correct to really not correct

00:01:35,509 --> 00:01:39,720
so let's try and find a solution that

00:01:38,130 --> 00:01:43,409
works in all the corner cases you're

00:01:39,720 --> 00:01:46,530
never even going to try and find so this

00:01:43,409 --> 00:01:49,740
is the base implementation this this

00:01:46,530 --> 00:01:51,619
works if you get a little list and

00:01:49,740 --> 00:01:53,880
that's fine if that's all you need but

00:01:51,619 --> 00:01:55,470
it doesn't work on generators it just

00:01:53,880 --> 00:01:57,990
like slice doesn't work on generators so

00:01:55,470 --> 00:02:00,880
that ain't good for us all so it's it's

00:01:57,990 --> 00:02:03,049
not over engineered enough sorry

00:02:00,880 --> 00:02:05,420
there is a function in eater tools

00:02:03,049 --> 00:02:08,989
called I slice and that slices an

00:02:05,420 --> 00:02:10,069
iterator much like you do in a list you

00:02:08,989 --> 00:02:11,690
can then continue to continue the

00:02:10,069 --> 00:02:13,040
iterator from there on and get the rest

00:02:11,690 --> 00:02:16,700
of the items that's kind of sounds like

00:02:13,040 --> 00:02:18,319
what we want so you can try this if

00:02:16,700 --> 00:02:20,660
anyone's used I slice before you might

00:02:18,319 --> 00:02:23,690
spot the problem so it groups things

00:02:20,660 --> 00:02:25,220
works on lists and generators not quite

00:02:23,690 --> 00:02:27,980
fancy enough yet and also it never

00:02:25,220 --> 00:02:29,780
terminates it enters an infinite loop

00:02:27,980 --> 00:02:33,769
that is then an infinite loop and then

00:02:29,780 --> 00:02:36,290
and so if you try and I slice an empty

00:02:33,769 --> 00:02:39,080
iterator then you'll get an iterator out

00:02:36,290 --> 00:02:42,140
of it it will never stop generating new

00:02:39,080 --> 00:02:43,549
iterator so you've got a check if the

00:02:42,140 --> 00:02:45,830
iterator is empty there's you can make

00:02:43,549 --> 00:02:47,269
an is empty thing like this that will do

00:02:45,830 --> 00:02:49,250
a little look ahead but you're using T

00:02:47,269 --> 00:02:50,660
and then chain together some iterators

00:02:49,250 --> 00:02:53,180
and then return you a new thing that

00:02:50,660 --> 00:02:54,980
actually tells you if it's empty and

00:02:53,180 --> 00:03:00,349
then an iterator you continue to consume

00:02:54,980 --> 00:03:01,610
so then this actually works there's a

00:03:00,349 --> 00:03:03,260
fancy function I use there you may have

00:03:01,610 --> 00:03:05,840
seen context little dots as a press it

00:03:03,260 --> 00:03:07,970
just does it does that easy so please

00:03:05,840 --> 00:03:10,220
use that one it's really nice

00:03:07,970 --> 00:03:12,370
sorry results groups things works and

00:03:10,220 --> 00:03:16,970
lists and generators actually terminates

00:03:12,370 --> 00:03:18,920
not fancy enough and it doesn't allow

00:03:16,970 --> 00:03:21,260
you to garbage collect items as you go

00:03:18,920 --> 00:03:22,519
which is bad so that the data set I was

00:03:21,260 --> 00:03:24,320
working off was like tens of megabytes

00:03:22,519 --> 00:03:25,970
hundreds of megabytes big per chunk and

00:03:24,320 --> 00:03:27,620
if you consume like a thousand of them

00:03:25,970 --> 00:03:30,200
you ran out of memory so we need to

00:03:27,620 --> 00:03:32,450
allow garbage collection T doesn't do

00:03:30,200 --> 00:03:34,069
that it keeps references around until

00:03:32,450 --> 00:03:37,220
you consume it across all the iterator

00:03:34,069 --> 00:03:39,500
so we can't use T so the look ahead is

00:03:37,220 --> 00:03:41,510
never consumed and you have a sad time

00:03:39,500 --> 00:03:45,260
you also can't close the T iterator so

00:03:41,510 --> 00:03:48,470
it useless to us garbage collection in

00:03:45,260 --> 00:03:49,670
Python is an implementation detail so it

00:03:48,470 --> 00:03:50,600
works different of these things but

00:03:49,670 --> 00:03:51,859
reference counting so if you keep a

00:03:50,600 --> 00:03:52,790
reference around that's bad I am

00:03:51,859 --> 00:03:55,069
hurrying through some running out of

00:03:52,790 --> 00:03:56,660
time this is a really useful thing you

00:03:55,069 --> 00:03:58,310
can do that I made that will just print

00:03:56,660 --> 00:04:01,760
when something's made and deleted it's

00:03:58,310 --> 00:04:03,739
great for debugging generators so here's

00:04:01,760 --> 00:04:06,079
another one is empty that just does some

00:04:03,739 --> 00:04:09,199
chaining things it works it doesn't have

00:04:06,079 --> 00:04:10,280
the garbage collection problems of T it

00:04:09,199 --> 00:04:11,600
groups things works on this and

00:04:10,280 --> 00:04:13,760
generator terminates not fancy enough

00:04:11,600 --> 00:04:14,900
the first item you can't go

00:04:13,760 --> 00:04:16,639
collect that one because it's in a list

00:04:14,900 --> 00:04:18,799
and chain doesn't forget iterate as once

00:04:16,639 --> 00:04:20,000
it's gone past them so the list keeps

00:04:18,799 --> 00:04:24,290
around the reference and then you've

00:04:20,000 --> 00:04:26,830
still got problems so you can't do it

00:04:24,290 --> 00:04:29,180
that one so here's another one

00:04:26,830 --> 00:04:30,590
yield one you send it to the thing it

00:04:29,180 --> 00:04:31,460
makes a generator yields one item that

00:04:30,590 --> 00:04:33,260
it can then forget it

00:04:31,460 --> 00:04:36,410
so now we use that instead of sending a

00:04:33,260 --> 00:04:37,729
list in and that actually works it group

00:04:36,410 --> 00:04:40,130
sinks works and listen generators

00:04:37,729 --> 00:04:41,810
terminators you can collect everything

00:04:40,130 --> 00:04:44,360
it's not that fancy

00:04:41,810 --> 00:04:46,699
and you can't consume things out of

00:04:44,360 --> 00:04:48,110
order which is a very nice use case but

00:04:46,699 --> 00:04:51,500
whatever let's fix it let's over

00:04:48,110 --> 00:04:52,910
engineers properly so if you generate

00:04:51,500 --> 00:04:54,650
one chunk keep it around in a writer

00:04:52,910 --> 00:04:56,419
over the next chunk items will yield it

00:04:54,650 --> 00:04:58,100
out of order so if you do this you make

00:04:56,419 --> 00:05:00,260
an iterable you get some chunks you get

00:04:58,100 --> 00:05:03,530
the first new second chunk you say next

00:05:00,260 --> 00:05:11,630
to the first one and you get one then

00:05:03,530 --> 00:05:13,039
you get the so aim to this works the

00:05:11,630 --> 00:05:14,210
iterated list minimal number of items

00:05:13,039 --> 00:05:15,889
from the generator nice garbage

00:05:14,210 --> 00:05:18,410
collection LS out of order consumption

00:05:15,889 --> 00:05:22,039
of chunks terminates and E's fancy

00:05:18,410 --> 00:05:25,580
enough I wrote a thing it's bigger than

00:05:22,039 --> 00:05:37,370
I thought it would be this does all of

00:05:25,580 --> 00:05:39,410
the things all of them it just yeah so

00:05:37,370 --> 00:05:40,699
groups things works in listen generators

00:05:39,410 --> 00:05:42,349
terminates all items can be garbage

00:05:40,699 --> 00:05:44,060
collected minimal look-ahead used allows

00:05:42,349 --> 00:05:48,919
out of all the consumption over

00:05:44,060 --> 00:05:49,760
engineered no known issues yet thanks

00:05:48,919 --> 00:05:52,710
turn

00:05:49,760 --> 00:05:55,780
[Music]

00:05:52,710 --> 00:05:57,220
so definitely our award for best use of

00:05:55,780 --> 00:05:59,350
the four five minutes so far this

00:05:57,220 --> 00:06:03,220
conference so thank you very much

00:05:59,350 --> 00:06:04,090
is tishambia here you are great so

00:06:03,220 --> 00:06:10,090
you're up on deck

00:06:04,090 --> 00:06:13,660
but first Nick James with piyo three all

00:06:10,090 --> 00:06:16,090
right so there was this wonderful thing

00:06:13,660 --> 00:06:19,270
that happened at PyCon us this year

00:06:16,090 --> 00:06:25,410
where someone overheard someone say that

00:06:19,270 --> 00:06:31,840
a something sounded like Python 2.7

00:06:25,410 --> 00:06:36,789
fanfiction so we got this idea we should

00:06:31,840 --> 00:06:39,370
create an anthology of fanfiction so we

00:06:36,789 --> 00:06:43,570
are collecting these fanfiction art

00:06:39,370 --> 00:06:45,070
poetry everything but we need more we're

00:06:43,570 --> 00:06:46,660
going to turn this into an ontology that

00:06:45,070 --> 00:06:53,139
we auction off at the PI lady's auction

00:06:46,660 --> 00:06:57,010
but we need more so what do we mean the

00:06:53,139 --> 00:06:59,740
rules you must have Python in your story

00:06:57,010 --> 00:07:02,260
picture art poetry song whatever it is

00:06:59,740 --> 00:07:04,020
that you choose to do you must keep it

00:07:02,260 --> 00:07:06,370
pg-13

00:07:04,020 --> 00:07:09,360
avoid using real humans unless you have

00:07:06,370 --> 00:07:14,010
permission I guess you can use yourself

00:07:09,360 --> 00:07:16,599
stories can't violate the coz of PyCon

00:07:14,010 --> 00:07:20,949
so everything is welcome whether it be

00:07:16,599 --> 00:07:26,880
stories art poetry we need more so the

00:07:20,949 --> 00:07:28,870
deadline for your idea is September 1st

00:07:26,880 --> 00:07:30,370
you don't have to have the full thing

00:07:28,870 --> 00:07:32,340
all fleshed out and everything we just

00:07:30,370 --> 00:07:36,310
need your idea to make sure that it

00:07:32,340 --> 00:07:38,650
follows the rules submit the pitches

00:07:36,310 --> 00:07:43,409
through github you add your pitch to the

00:07:38,650 --> 00:07:49,320
appropriate folder which looks like this

00:07:43,409 --> 00:07:55,030
nope there I've got it all worked out

00:07:49,320 --> 00:07:58,139
and deadlines September 1st or you can

00:07:55,030 --> 00:08:01,260
you can find the link at piyo 3.com

00:07:58,139 --> 00:08:01,260
thank you

00:08:05,410 --> 00:08:11,600
thank you very much

00:08:08,180 --> 00:08:14,180
Brett Swanson you around Brett great so

00:08:11,600 --> 00:08:18,680
you're up on deck on this side and we're

00:08:14,180 --> 00:08:21,170
ready over this side so our next

00:08:18,680 --> 00:08:23,420
presenter is tisha I'm da who's going to

00:08:21,170 --> 00:08:29,450
be talking about tracking trucks in East

00:08:23,420 --> 00:08:31,220
Africa using satellites and words okay

00:08:29,450 --> 00:08:33,320
so I just got back from Nairobi on

00:08:31,220 --> 00:08:35,810
Thursday and I was working at this place

00:08:33,320 --> 00:08:38,840
called Lorri systems I do tech stuff

00:08:35,810 --> 00:08:41,030
there this is like a thing that runs on

00:08:38,840 --> 00:08:46,520
our screen to make us feel good with

00:08:41,030 --> 00:08:51,470
night stock photos of trucks not Africa

00:08:46,520 --> 00:08:53,120
we do well we present well and this is a

00:08:51,470 --> 00:08:56,060
question we hear all the time in the

00:08:53,120 --> 00:08:57,740
office which is a co-op it's like with

00:08:56,060 --> 00:09:01,900
question mark and exclamation mark

00:08:57,740 --> 00:09:01,900
people are not sure where the truck is

00:09:02,680 --> 00:09:09,020
we did an app and we give it out to

00:09:05,710 --> 00:09:11,050
truckers but truckers only have there's

00:09:09,020 --> 00:09:13,430
only like 40% smartphone penetration

00:09:11,050 --> 00:09:15,970
rest of the people have feature phones

00:09:13,430 --> 00:09:17,620
and feature phones can't run the app

00:09:15,970 --> 00:09:19,940
yeah

00:09:17,620 --> 00:09:22,670
I'm sure there will be a gps-based

00:09:19,940 --> 00:09:25,720
feature phone which is will survive in

00:09:22,670 --> 00:09:29,390
the truck environment at some point and

00:09:25,720 --> 00:09:31,940
so then we give out a few 10 phones to

00:09:29,390 --> 00:09:34,100
people which we bought from from some

00:09:31,940 --> 00:09:38,030
money we had and then they just went

00:09:34,100 --> 00:09:40,130
about into the villages yeah so this was

00:09:38,030 --> 00:09:42,800
a hard question to answer so like what

00:09:40,130 --> 00:09:46,550
do we do and sometimes the answer to the

00:09:42,800 --> 00:09:50,839
question is not these images yeah the

00:09:46,550 --> 00:09:53,630
answer is this this is a truck outside

00:09:50,839 --> 00:09:55,880
our office in Mombasa it's not our truck

00:09:53,630 --> 00:09:58,730
thankfully we don't have any trucks this

00:09:55,880 --> 00:10:00,950
not a truck that was moving with us I

00:09:58,730 --> 00:10:02,510
was I took an image of the container we

00:10:00,950 --> 00:10:04,880
are doing some reading of the container

00:10:02,510 --> 00:10:09,410
text so that was interesting as well but

00:10:04,880 --> 00:10:11,089
also where a truck can be stuck so I was

00:10:09,410 --> 00:10:13,280
looking at people who provide tracking

00:10:11,089 --> 00:10:14,390
in Kenya and this was one of the

00:10:13,280 --> 00:10:17,170
companies which provide

00:10:14,390 --> 00:10:20,330
tracking in Kenya and this is their site

00:10:17,170 --> 00:10:22,520
so I was like there's no HTTP there's no

00:10:20,330 --> 00:10:29,090
domain name should I pay these guys my

00:10:22,520 --> 00:10:32,150
money so yeah so I was like okay how

00:10:29,090 --> 00:10:36,050
hard can tracking be so I went to

00:10:32,150 --> 00:10:37,700
Aliexpress I bought some stuff I went

00:10:36,050 --> 00:10:39,860
out to the streets in Nairobi and I

00:10:37,700 --> 00:10:41,840
bought some stuff and I don't know if

00:10:39,860 --> 00:10:44,720
you guys watched Dave Jones it's like

00:10:41,840 --> 00:10:46,340
don't turn it on open it up so I open

00:10:44,720 --> 00:10:50,120
them up to have a look at what's inside

00:10:46,340 --> 00:10:53,840
so that the thing to the I guess to my

00:10:50,120 --> 00:10:55,730
left is the is a car charger so that's

00:10:53,840 --> 00:10:59,930
what the inside of a car charger looks

00:10:55,730 --> 00:11:02,420
like for USB and to the other side is

00:10:59,930 --> 00:11:05,720
the GPS tracker and the little ceramic

00:11:02,420 --> 00:11:08,450
key shiny thing somewhere here is what

00:11:05,720 --> 00:11:10,880
these the satellites so there are some

00:11:08,450 --> 00:11:13,430
satellites involved in here hopefully

00:11:10,880 --> 00:11:16,990
the truck sees them with right location

00:11:13,430 --> 00:11:19,820
and this is an open source java

00:11:16,990 --> 00:11:22,040
unfortunately fleet tracking system I

00:11:19,820 --> 00:11:27,620
haven't found a python one yet so please

00:11:22,040 --> 00:11:30,110
somebody write one yeah so there are a

00:11:27,620 --> 00:11:31,130
lot of data formats from all these

00:11:30,110 --> 00:11:34,490
trackers they have all been

00:11:31,130 --> 00:11:36,710
reverse-engineered they're listed in

00:11:34,490 --> 00:11:38,540
particular this particular page and you

00:11:36,710 --> 00:11:41,060
can read the data that's coming off the

00:11:38,540 --> 00:11:43,760
tracking thing there's a sim the sim is

00:11:41,060 --> 00:11:45,260
an m2m sim them terms it means it

00:11:43,760 --> 00:11:49,880
doesn't have a number it can only be

00:11:45,260 --> 00:11:51,940
accessed by API and then that data is

00:11:49,880 --> 00:11:54,530
goes into a particular port

00:11:51,940 --> 00:11:56,810
infrastructure is in AWS and the port

00:11:54,530 --> 00:11:59,420
load balancer and some HTTP load

00:11:56,810 --> 00:12:03,080
balancers and there are I stored it's

00:11:59,420 --> 00:12:05,810
good ok so the only bit of Python here

00:12:03,080 --> 00:12:07,850
is moving the data around if you haven't

00:12:05,810 --> 00:12:09,920
talked about celery this is another

00:12:07,850 --> 00:12:12,410
alternative to celery you can run on AWS

00:12:09,920 --> 00:12:15,500
where you schedule stuff in lambda you

00:12:12,410 --> 00:12:17,570
just run a function so that data the

00:12:15,500 --> 00:12:20,660
tracking data is checked for whether the

00:12:17,570 --> 00:12:22,550
truck has arrived or not regularly this

00:12:20,660 --> 00:12:24,380
is the other thing from names so no

00:12:22,550 --> 00:12:26,660
satellites involved we can only afford

00:12:24,380 --> 00:12:29,779
so many trackers and

00:12:26,660 --> 00:12:31,550
getting stuff into Kenya is hard so we

00:12:29,779 --> 00:12:34,579
call up the drivers and say oh co op e

00:12:31,550 --> 00:12:36,529
and then tell us a name and then we put

00:12:34,579 --> 00:12:40,930
the name through creative use of the

00:12:36,529 --> 00:12:45,410
Google places and places the API and

00:12:40,930 --> 00:12:48,139
names API where some of it is ambiguous

00:12:45,410 --> 00:12:49,370
so the ambiguity is resolved by making

00:12:48,139 --> 00:12:51,139
sure it's in Kenya it's somewhere in

00:12:49,370 --> 00:12:53,389
East Africa it's somewhere along the

00:12:51,139 --> 00:12:55,569
route it's there are heuristics for that

00:12:53,389 --> 00:12:58,100
the place name that comes after is

00:12:55,569 --> 00:13:00,980
logically in the route after that the

00:12:58,100 --> 00:13:04,910
place name that was before and so he

00:13:00,980 --> 00:13:15,290
transform words into places and show

00:13:04,910 --> 00:13:18,139
some 800 trucks that's it thank you very

00:13:15,290 --> 00:13:20,000
much seem to know where your trucks are

00:13:18,139 --> 00:13:23,560
better than what then where I know my

00:13:20,000 --> 00:13:26,899
car is so that's sir that's quite good

00:13:23,560 --> 00:13:29,600
amber brown you're up on deck but first

00:13:26,899 --> 00:13:33,050
Brett Swanson who is going to be talking

00:13:29,600 --> 00:13:34,430
about using sinks and JIRA and Python to

00:13:33,050 --> 00:13:37,089
automate the creation of software

00:13:34,430 --> 00:13:37,089
release reports

00:13:38,949 --> 00:13:48,100
okay thanks yes so I'm Brett Swanson

00:13:43,910 --> 00:13:51,860
this is my first PyCon yeah thank you

00:13:48,100 --> 00:13:54,019
yeah so this is that picture is now hit

00:13:51,860 --> 00:13:55,730
offices in Sydney here at Macquarie

00:13:54,019 --> 00:13:57,980
University we have about 600 people

00:13:55,730 --> 00:13:59,839
there we sold a billion and a half

00:13:57,980 --> 00:14:03,079
dollars worth of product last year so

00:13:59,839 --> 00:14:05,209
we're a reasonably sized company now

00:14:03,079 --> 00:14:08,000
yeah so we make cochlear implants that

00:14:05,209 --> 00:14:09,920
allow deaf people to hear because it's

00:14:08,000 --> 00:14:12,559
an implanted medical device it's very

00:14:09,920 --> 00:14:20,959
heavily regulated kind of business so we

00:14:12,559 --> 00:14:22,790
need a lot of documentation and one of

00:14:20,959 --> 00:14:24,949
the things we have to produce is a

00:14:22,790 --> 00:14:26,709
software release report for different

00:14:24,949 --> 00:14:28,910
pieces of software that we make

00:14:26,709 --> 00:14:30,410
typically we would have a Microsoft Word

00:14:28,910 --> 00:14:33,199
template for something like that and

00:14:30,410 --> 00:14:34,670
isn't in the example case you know

00:14:33,199 --> 00:14:36,230
there'd be a couple of tables that you'd

00:14:34,670 --> 00:14:38,180
have to fill with information that you

00:14:36,230 --> 00:14:39,620
maybe get out of giro which we use for

00:14:38,180 --> 00:14:40,910
our issue tracking

00:14:39,620 --> 00:14:42,470
so the tables might be you know what

00:14:40,910 --> 00:14:44,630
bugs have been fixed in this release

00:14:42,470 --> 00:14:46,700
what improvements and new features you

00:14:44,630 --> 00:14:49,370
might have and what known bugs that are

00:14:46,700 --> 00:14:52,610
still in this piece of software so it's

00:14:49,370 --> 00:14:54,290
a bit of a manual process so far so I

00:14:52,610 --> 00:14:56,540
thought I'd order mate it and I just

00:14:54,290 --> 00:14:59,060
picked a sort of an internal kind of

00:14:56,540 --> 00:15:03,380
research project rather than a piece of

00:14:59,060 --> 00:15:06,770
product software so for example

00:15:03,380 --> 00:15:08,570
yeah he's JIRA issue tracker so normally

00:15:06,770 --> 00:15:11,240
we just use it from the web browser and

00:15:08,570 --> 00:15:12,860
you can export data from from the

00:15:11,240 --> 00:15:14,300
browser in a variety of different

00:15:12,860 --> 00:15:15,710
formats but then somehow I've got to get

00:15:14,300 --> 00:15:19,270
that into the into the word document

00:15:15,710 --> 00:15:22,520
which is a bit tedious but Atlassian

00:15:19,270 --> 00:15:24,920
also provide a nice Python interface so

00:15:22,520 --> 00:15:30,410
I thought I'd have a go at using that

00:15:24,920 --> 00:15:31,820
and I chose our sphinx which is the you

00:15:30,410 --> 00:15:33,890
know documentation system that's used

00:15:31,820 --> 00:15:36,410
for the Python documentation itself and

00:15:33,890 --> 00:15:38,120
it's quite my system and you make text

00:15:36,410 --> 00:15:40,310
files and then you process I mean in

00:15:38,120 --> 00:15:43,700
Python and turns into say a web page or

00:15:40,310 --> 00:15:46,250
a bunch of web pages so I needed to put

00:15:43,700 --> 00:15:48,680
some information into a table so I had

00:15:46,250 --> 00:15:50,090
to look at how sinks handles tables so

00:15:48,680 --> 00:15:52,850
there's a couple of different ways you

00:15:50,090 --> 00:15:54,830
could do it and this first one I thought

00:15:52,850 --> 00:15:57,740
well looks a bit complicated for me to

00:15:54,830 --> 00:15:59,720
build in my script so don't want to do

00:15:57,740 --> 00:16:01,340
that they have these ones that are

00:15:59,720 --> 00:16:03,500
simple tables but that's a bit hard if

00:16:01,340 --> 00:16:05,450
you've got like quite a lot of words in

00:16:03,500 --> 00:16:07,430
each column so that wasn't good so

00:16:05,450 --> 00:16:09,950
instead they have these other nice

00:16:07,430 --> 00:16:12,860
things CSV tables and this table so I

00:16:09,950 --> 00:16:16,100
decided to use this tables so basically

00:16:12,860 --> 00:16:18,350
I just had to make my Python script go

00:16:16,100 --> 00:16:21,230
up go up to JIRA and then kind of

00:16:18,350 --> 00:16:24,710
populate this text file so that the you

00:16:21,230 --> 00:16:27,830
know use this table the column is going

00:16:24,710 --> 00:16:30,650
to be issue the summary and what kind of

00:16:27,830 --> 00:16:31,700
verification we've done and so just had

00:16:30,650 --> 00:16:34,160
to write a little script that went

00:16:31,700 --> 00:16:36,380
through found the issues and pulled that

00:16:34,160 --> 00:16:38,900
information out of JIRA so that was

00:16:36,380 --> 00:16:41,030
pretty good one little thing that was a

00:16:38,900 --> 00:16:42,800
good tip was I actually put this class

00:16:41,030 --> 00:16:45,710
long table in and that way if I want to

00:16:42,800 --> 00:16:47,710
turn it into a PDF file later that

00:16:45,710 --> 00:16:51,410
allows the tables to break across pages

00:16:47,710 --> 00:16:53,420
it took me a while to figure that out so

00:16:51,410 --> 00:16:58,130
that's the slide so sure

00:16:53,420 --> 00:16:59,840
what what the end result look black we

00:16:58,130 --> 00:17:04,210
got a job going for a synapse in your

00:16:59,840 --> 00:17:04,210
pocket Development developer but anyway

00:17:12,160 --> 00:17:18,620
thanks Brett it's really cool to see

00:17:15,970 --> 00:17:20,630
like see new features of restructured

00:17:18,620 --> 00:17:21,110
text and Sphinx that I certainly haven't

00:17:20,630 --> 00:17:22,760
seen before

00:17:21,110 --> 00:17:24,340
and seeing that from when you speak at

00:17:22,760 --> 00:17:27,530
the conference is great

00:17:24,340 --> 00:17:30,020
Cormack kick it if you can set up over

00:17:27,530 --> 00:17:36,970
here that would be amazing and now we

00:17:30,020 --> 00:17:40,430
have everyone's favorites twisted verb

00:17:36,970 --> 00:17:47,840
and bird Brown with string encodings and

00:17:40,430 --> 00:17:49,490
how we got in this mess so thanks to the

00:17:47,840 --> 00:17:51,260
wonders of Desktop Linux I can now

00:17:49,490 --> 00:17:52,400
actually see my speakers notes because

00:17:51,260 --> 00:17:55,820
this screen is blank

00:17:52,400 --> 00:17:58,880
thanks arch linux so anyway hi i'm

00:17:55,820 --> 00:18:01,280
hockey so you have some text

00:17:58,880 --> 00:18:06,920
we all have text like an instant message

00:18:01,280 --> 00:18:09,560
or you know twitter etc but you need to

00:18:06,920 --> 00:18:11,450
encode it to put on a wire because you

00:18:09,560 --> 00:18:14,660
know networks don't work in text they

00:18:11,450 --> 00:18:18,020
were in parts 1 and ones and zeros on

00:18:14,660 --> 00:18:20,990
and off so you need to use a text

00:18:18,020 --> 00:18:24,110
encoding but what even is that well it

00:18:20,990 --> 00:18:25,940
all started back in 1870 when we had bad

00:18:24,110 --> 00:18:29,000
ideas and didn't realize that there were

00:18:25,940 --> 00:18:32,980
languages other than english it was a 5

00:18:29,000 --> 00:18:35,900
bit encoding and as an example you have

00:18:32,980 --> 00:18:38,630
5 bits here it could encourage pretty

00:18:35,900 --> 00:18:41,720
much all of the while we've called the

00:18:38,630 --> 00:18:43,970
latin alphabet so A to Z one to nine a

00:18:41,720 --> 00:18:46,780
couple of other characters to help

00:18:43,970 --> 00:18:49,790
belong transmission about it

00:18:46,780 --> 00:18:52,160
ITA 2 which came later changed things up

00:18:49,790 --> 00:18:56,600
a bit still used in like ham radio in 90

00:18:52,160 --> 00:18:59,140
that's from 1924 still five bit it

00:18:56,600 --> 00:19:01,670
changes around the encoding from ITA one

00:18:59,140 --> 00:19:03,650
because we didn't really have to persist

00:19:01,670 --> 00:19:06,500
data back then they didn't really matter

00:19:03,650 --> 00:19:07,370
if the encoding changed because it was

00:19:06,500 --> 00:19:10,790
very and

00:19:07,370 --> 00:19:15,610
for all so there's also this thing

00:19:10,790 --> 00:19:24,140
called BCD or binary character something

00:19:15,610 --> 00:19:26,420
IBM did it so it was a six bit ish

00:19:24,140 --> 00:19:27,860
encoding and it was basically what was

00:19:26,420 --> 00:19:29,690
on punch cards it was never really

00:19:27,860 --> 00:19:31,250
standardized and sometimes you had punch

00:19:29,690 --> 00:19:34,610
cards that will work in one machine and

00:19:31,250 --> 00:19:36,350
be total gobble mess in another and I

00:19:34,610 --> 00:19:37,580
don't know how to encode it because why

00:19:36,350 --> 00:19:41,570
would you ever need to encode to a

00:19:37,580 --> 00:19:43,220
literal physical punch card in 2018 but

00:19:41,570 --> 00:19:45,620
in the digital age

00:19:43,220 --> 00:19:47,840
IBM realized too that rather than come

00:19:45,620 --> 00:19:49,700
up with a nice system they'll just take

00:19:47,840 --> 00:19:53,420
the encoding of the punch cards and just

00:19:49,700 --> 00:19:53,929
put on on the computer and go done it's

00:19:53,420 --> 00:19:59,300
great

00:19:53,929 --> 00:20:00,980
so in 1928 no 1960s and it forgot to

00:19:59,300 --> 00:20:02,600
update that date they decided to do it

00:20:00,980 --> 00:20:05,240
it was an 8-bit encoding so it could

00:20:02,600 --> 00:20:06,500
actually store more than the just the

00:20:05,240 --> 00:20:11,750
English language and you could have

00:20:06,500 --> 00:20:13,190
things like Russian so that's good but

00:20:11,750 --> 00:20:20,300
the Americans were up to their old

00:20:13,190 --> 00:20:24,350
tricks and in 1963 they standardized the

00:20:20,300 --> 00:20:27,620
seven bit USS key so you could do things

00:20:24,350 --> 00:20:29,330
like you know letters except if you

00:20:27,620 --> 00:20:31,580
wanted like the British Pound symbol

00:20:29,330 --> 00:20:36,940
well that's not American it's not

00:20:31,580 --> 00:20:40,749
freedom there's only freedom here

00:20:36,940 --> 00:20:42,879
so you don't get that now the Japanese

00:20:40,749 --> 00:20:46,029
were also up to their own thing because

00:20:42,879 --> 00:20:48,249
they also they were like we have

00:20:46,029 --> 00:20:50,919
different characters please we need to

00:20:48,249 --> 00:20:52,779
encode them when you send letters so

00:20:50,919 --> 00:20:58,210
they came up with something called G is

00:20:52,779 --> 00:21:00,879
X Oh 201 in 1969 and shift yes in 1997

00:20:58,210 --> 00:21:02,639
it was an 8-bit variable encoding now

00:21:00,879 --> 00:21:06,249
what variable and coatings are is that

00:21:02,639 --> 00:21:09,639
for certain characters for example the

00:21:06,249 --> 00:21:12,460
Latin alphabet and some Japanese

00:21:09,639 --> 00:21:13,119
characters only were able to fit in one

00:21:12,460 --> 00:21:15,190
bite

00:21:13,119 --> 00:21:17,710
however there was some that couldn't fit

00:21:15,190 --> 00:21:21,759
so they'd had a little there was a rule

00:21:17,710 --> 00:21:24,759
that you know if it had this this number

00:21:21,759 --> 00:21:26,799
in its like that I think it's I forget

00:21:24,759 --> 00:21:28,749
which section is signifies that it's

00:21:26,799 --> 00:21:32,229
actually a 2-byte things so you can

00:21:28,749 --> 00:21:34,840
encode much more of course the Americans

00:21:32,229 --> 00:21:38,529
were still up at it and the encoded I so

00:21:34,840 --> 00:21:41,979
there was ISO 8859 or Latin one is the

00:21:38,529 --> 00:21:46,379
most common one in 1987 now you could

00:21:41,979 --> 00:21:50,739
actually encode things like the British

00:21:46,379 --> 00:21:52,840
Pound II but there were still problems

00:21:50,739 --> 00:21:54,549
because you had to switch you had a

00:21:52,840 --> 00:21:57,519
different encoding for all these

00:21:54,549 --> 00:22:02,340
different languages finally we had

00:21:57,519 --> 00:22:06,759
utf-16 which you know had eight sixteen

00:22:02,340 --> 00:22:08,259
by a 16-bit variable length so some

00:22:06,759 --> 00:22:11,590
things were in two bytes

00:22:08,259 --> 00:22:15,460
utf-8 which is what we use now is a bit

00:22:11,590 --> 00:22:17,859
more compact so we're all good right now

00:22:15,460 --> 00:22:19,710
lots of those things are still around so

00:22:17,859 --> 00:22:22,299
you end up with things called mochi back

00:22:19,710 --> 00:22:24,609
which ends up where the pound symbol if

00:22:22,299 --> 00:22:26,889
you encode it with Latin one ends up

00:22:24,609 --> 00:22:28,359
being gobbled mess and that and then if

00:22:26,889 --> 00:22:30,820
you try and do some Japanese it just

00:22:28,359 --> 00:22:32,589
there so you have some bytes how do you

00:22:30,820 --> 00:22:34,960
know what it is well you kind of just

00:22:32,589 --> 00:22:37,469
have to guess because it could be a code

00:22:34,960 --> 00:22:39,820
page of anything it could be Russian

00:22:37,469 --> 00:22:42,929
python has a thing called pet 5 3 8 it

00:22:39,820 --> 00:22:42,929
makes this a lot better thank you

00:22:43,830 --> 00:22:58,210
and and that was a bird on wire

00:22:46,929 --> 00:23:00,719
protocols twisted developer you had your

00:22:58,210 --> 00:23:00,719
5 minutes

00:23:02,039 --> 00:23:09,820
Libby Barry yeah but first

00:23:06,009 --> 00:23:11,859
Cormack kick it with you removed a word

00:23:09,820 --> 00:23:14,880
from your front slide this one says

00:23:11,859 --> 00:23:19,690
simple on it is doesn't

00:23:14,880 --> 00:23:19,690
[Laughter]

00:23:22,160 --> 00:23:27,240
hey hey guys I'm calm at kick it I'm the

00:23:25,500 --> 00:23:28,980
grade 12 student I can go on college and

00:23:27,240 --> 00:23:32,400
I'm competitive

00:23:28,980 --> 00:23:34,260
well just a bit so two years ago are

00:23:32,400 --> 00:23:36,540
back in grade 10 we had a final project

00:23:34,260 --> 00:23:38,040
coming up and I wanted to do something

00:23:36,540 --> 00:23:40,350
crazy in order to beat everyone else I

00:23:38,040 --> 00:23:43,080
wanted to make a 3d physics engine in

00:23:40,350 --> 00:23:44,730
Python so Python actually makes this

00:23:43,080 --> 00:23:46,650
really easy there's a ton of useful

00:23:44,730 --> 00:23:48,600
libraries that you can use so for

00:23:46,650 --> 00:23:51,750
example of this Pi monk this can be used

00:23:48,600 --> 00:23:53,220
to do the 3d physics simulations pipe

00:23:51,750 --> 00:23:55,680
and GL can be used to vendor the feed

00:23:53,220 --> 00:23:58,440
environment anti-cancer can be used to

00:23:55,680 --> 00:24:00,090
build a GUI for the application however

00:23:58,440 --> 00:24:03,110
why use all these fancy modules and

00:24:00,090 --> 00:24:05,880
libraries when we can just use PI games

00:24:03,110 --> 00:24:06,750
so for those who don't know PI game it

00:24:05,880 --> 00:24:09,510
has some nice features

00:24:06,750 --> 00:24:09,980
there's no physics simulations capable

00:24:09,510 --> 00:24:14,220
in it

00:24:09,980 --> 00:24:18,030
you can't do any fede rendering there's

00:24:14,220 --> 00:24:21,690
no GUI framework but you can't do a

00:24:18,030 --> 00:24:24,390
triangles and lines so I'll just like

00:24:21,690 --> 00:24:26,010
quickly showcase my thing so here's the

00:24:24,390 --> 00:24:28,830
game you can like move around in this

00:24:26,010 --> 00:24:30,690
feed environment and you can build stuff

00:24:28,830 --> 00:24:41,970
by just clicking on points and like

00:24:30,690 --> 00:24:43,140
doesn't do it see ya yeah same before

00:24:41,970 --> 00:24:44,430
actually like show the physics

00:24:43,140 --> 00:24:44,850
simulation I just wanna explain how it

00:24:44,430 --> 00:24:46,830
works

00:24:44,850 --> 00:24:48,990
so I guess the fundamental building

00:24:46,830 --> 00:24:50,790
block of it is the point so the point is

00:24:48,990 --> 00:24:53,460
just two vectors there's a position

00:24:50,790 --> 00:24:55,200
vector which is like the green circle in

00:24:53,460 --> 00:24:57,450
it and there's a velocity vector which

00:24:55,200 --> 00:24:58,890
is the pic aller so on each frame are

00:24:57,450 --> 00:25:01,170
you calculate the velocity vector and

00:24:58,890 --> 00:25:04,680
you add it to the position vector like

00:25:01,170 --> 00:25:05,850
that this is like pretty simple where

00:25:04,680 --> 00:25:08,310
you can make it as complicated as you

00:25:05,850 --> 00:25:09,900
want so for example if you want to

00:25:08,310 --> 00:25:11,400
simulate gravity you could have a vector

00:25:09,900 --> 00:25:14,010
going downwards and just add it to the

00:25:11,400 --> 00:25:15,330
velocity train like that or if you want

00:25:14,010 --> 00:25:16,860
to seem like collisions you could like

00:25:15,330 --> 00:25:20,370
flip it on like the vertical axis or

00:25:16,860 --> 00:25:22,380
something like that so this is fine but

00:25:20,370 --> 00:25:24,720
only really allows us to simulate points

00:25:22,380 --> 00:25:26,370
moving in a 3d environment so what if we

00:25:24,720 --> 00:25:29,580
wanted to simulate more complex objects

00:25:26,370 --> 00:25:30,780
like on a cube or pyramid this this may

00:25:29,580 --> 00:25:32,850
sound really difficult

00:25:30,780 --> 00:25:35,310
pretty simple sum first we just break

00:25:32,850 --> 00:25:37,260
down the object into triangles which

00:25:35,310 --> 00:25:39,050
some is pretty easy to do and then we

00:25:37,260 --> 00:25:41,600
just put it down further into sticks

00:25:39,050 --> 00:25:45,000
alive I was like calling them sticks

00:25:41,600 --> 00:25:47,610
so I'm each stick in my simulation is

00:25:45,000 --> 00:25:49,200
just a line and the two points so the

00:25:47,610 --> 00:25:51,150
line just represents how far the points

00:25:49,200 --> 00:25:52,440
should be from each other so we do the

00:25:51,150 --> 00:25:53,880
same thing as you did before we

00:25:52,440 --> 00:25:55,980
calculate the position vectors and the

00:25:53,880 --> 00:25:58,680
velocity vectors and just add them like

00:25:55,980 --> 00:25:59,940
that and then we just readjust the

00:25:58,680 --> 00:26:01,740
points then make sure that they stay the

00:25:59,940 --> 00:26:04,230
same distance from each other do that

00:26:01,740 --> 00:26:06,090
and we do this like ten times a frame

00:26:04,230 --> 00:26:08,130
for each stick in the simulation and

00:26:06,090 --> 00:26:11,130
this like a relatively simple process

00:26:08,130 --> 00:26:15,510
allows me to do stuff like this don't

00:26:11,130 --> 00:26:16,980
open it see here's a fabric and as you

00:26:15,510 --> 00:26:20,120
can see you can like move it around and

00:26:16,980 --> 00:26:20,120
like behaves pretty realistically

00:26:25,590 --> 00:26:36,250
okay thank you that all these are still

00:26:33,880 --> 00:26:39,910
going yeah that's pretty much it but I'm

00:26:36,250 --> 00:26:42,700
oh no no no the other right hand side

00:26:39,910 --> 00:26:44,560
keep going IAS a my github link is on my

00:26:42,700 --> 00:26:45,760
screen oh yeah that is so if you want to

00:26:44,560 --> 00:26:47,200
see the rest of the code because I

00:26:45,760 --> 00:26:49,900
didn't actually explain how to the GUI

00:26:47,200 --> 00:26:52,090
or the vending so if you want to see it

00:26:49,900 --> 00:26:59,770
you can click that link or type it in

00:26:52,090 --> 00:27:01,180
whatever and yeah if anyone wants to

00:26:59,770 --> 00:27:02,500
come up and click on the screen later

00:27:01,180 --> 00:27:07,240
there'll be an opportunity at the end of

00:27:02,500 --> 00:27:15,340
the lightning talks thank you that that

00:27:07,240 --> 00:27:16,690
wasn't simple Louis Louis be your

00:27:15,340 --> 00:27:19,090
handwriting is terrible I can't read

00:27:16,690 --> 00:27:19,750
your name I'm sorry Louis you're up on

00:27:19,090 --> 00:27:25,230
this side

00:27:19,750 --> 00:27:25,230
but first Libby Barry with Python bugs

00:27:27,780 --> 00:27:35,100
hi I'm Libby this is my first PyCon and

00:27:31,360 --> 00:27:35,100
also my first lightning talk

00:27:36,420 --> 00:27:41,580
sir i'm libby i know a little about a

00:27:39,570 --> 00:27:43,020
lot of different things so a little bit

00:27:41,580 --> 00:27:45,030
of background i saw the graphic design

00:27:43,020 --> 00:27:46,110
in college then i was like i really

00:27:45,030 --> 00:27:47,790
am interested in biology and

00:27:46,110 --> 00:27:49,200
bioinformatics so i went to uni and did

00:27:47,790 --> 00:27:50,760
that and then i was like i don't really

00:27:49,200 --> 00:27:53,280
want to do any research and so I went

00:27:50,760 --> 00:27:55,350
into web development and so as a result

00:27:53,280 --> 00:27:57,660
I went wind up doing mostly JavaScript

00:27:55,350 --> 00:27:59,970
and PHP mij day job so I don't know

00:27:57,660 --> 00:28:01,740
enough Python to sort of comfortably do

00:27:59,970 --> 00:28:04,350
a lightning talk on it so here I am

00:28:01,740 --> 00:28:06,420
talking to you across the chasm of logic

00:28:04,350 --> 00:28:07,650
that I had to leap over in order to have

00:28:06,420 --> 00:28:09,380
a subject that I felt comfortable

00:28:07,650 --> 00:28:12,960
talking about that was even remotely

00:28:09,380 --> 00:28:14,280
interested related to Python I'm going

00:28:12,960 --> 00:28:22,320
to talk to you about a type of parasite

00:28:14,280 --> 00:28:23,910
that can be found in snakes I also I

00:28:22,320 --> 00:28:25,560
apologize for my voice I'm recovering

00:28:23,910 --> 00:28:26,940
from a cold so my voice is the right

00:28:25,560 --> 00:28:30,180
amount of sultry but with the wrong

00:28:26,940 --> 00:28:32,130
amount of congested I was convinced to

00:28:30,180 --> 00:28:34,080
do a talk by multiple people but I felt

00:28:32,130 --> 00:28:35,820
way over my depth the reason why I came

00:28:34,080 --> 00:28:37,680
here in the first place was I wanted to

00:28:35,820 --> 00:28:39,870
get back into Python and R cuz I did a

00:28:37,680 --> 00:28:41,520
little bit of it in bioinformatics and I

00:28:39,870 --> 00:28:43,170
wanted to become enthusiastic about the

00:28:41,520 --> 00:28:44,670
language again by making friends and the

00:28:43,170 --> 00:28:46,860
way that I do that as someone who's very

00:28:44,670 --> 00:28:50,220
interested in strange biology is to show

00:28:46,860 --> 00:28:51,660
people gross things so here's here's my

00:28:50,220 --> 00:28:53,460
moment here's your moment to leave if

00:28:51,660 --> 00:28:55,200
you don't like any talk related to

00:28:53,460 --> 00:28:56,090
parasites I'm not going to show you

00:28:55,200 --> 00:28:58,320
anything

00:28:56,090 --> 00:28:59,850
extremely gross I realized that would be

00:28:58,320 --> 00:29:02,640
off-putting to many people

00:28:59,850 --> 00:29:05,550
there will be one x-ray I will say x-ray

00:29:02,640 --> 00:29:07,230
on an x-ray off when I'm putting it on

00:29:05,550 --> 00:29:09,210
and off so you can either leave the room

00:29:07,230 --> 00:29:12,690
now or you can close your eyes but I

00:29:09,210 --> 00:29:15,000
promise you it is not that gross just so

00:29:12,690 --> 00:29:18,060
that's out of the way also while I did

00:29:15,000 --> 00:29:20,610
do some parasitol tea parasitology units

00:29:18,060 --> 00:29:22,260
I am no expert I am also not a science

00:29:20,610 --> 00:29:23,970
communicator so don't just take this

00:29:22,260 --> 00:29:27,450
with a grain of salt but take it heavily

00:29:23,970 --> 00:29:29,640
seasoned so that's what is a parasite a

00:29:27,450 --> 00:29:32,550
parasite is a type of symbiotic

00:29:29,640 --> 00:29:35,610
relationship where a organism benefits

00:29:32,550 --> 00:29:38,250
directly off a host while harming the

00:29:35,610 --> 00:29:39,690
host it doesn't necessarily have to be a

00:29:38,250 --> 00:29:42,060
one-to-one relationship there can be

00:29:39,690 --> 00:29:44,370
multiple hosts involved that the

00:29:42,060 --> 00:29:48,000
parasite can occupy in order to grow up

00:29:44,370 --> 00:29:48,980
and enough to replicate and pass on its

00:29:48,000 --> 00:29:52,690
genome so long as

00:29:48,980 --> 00:29:55,640
multiple phylogeny so Pentastar Mader

00:29:52,690 --> 00:29:57,200
Penta five five openings only one is a

00:29:55,640 --> 00:29:59,030
mouth for a hooky things that it can

00:29:57,200 --> 00:30:01,040
attach onto so it can you know stay

00:29:59,030 --> 00:30:04,250
still while it sucks the blood out of

00:30:01,040 --> 00:30:07,190
whatever host organism it wants it is a

00:30:04,250 --> 00:30:08,960
phylum that is very very old they have

00:30:07,190 --> 00:30:10,760
found fossils of this thing that are

00:30:08,960 --> 00:30:14,559
four hundred and twenty five million

00:30:10,760 --> 00:30:16,730
years old which is just wild to me I

00:30:14,559 --> 00:30:20,270
felt like it was appropriate to call

00:30:16,730 --> 00:30:22,520
this title like Python bugs because it

00:30:20,270 --> 00:30:25,040
is related to arthropods and annelids

00:30:22,520 --> 00:30:27,230
which are both bug like things so

00:30:25,040 --> 00:30:32,419
there's the joke there are relevance I

00:30:27,230 --> 00:30:34,280
have my moment of pride it's very very

00:30:32,419 --> 00:30:35,870
varied it contains too many families

00:30:34,280 --> 00:30:39,230
it's beyond this book over this I have

00:30:35,870 --> 00:30:44,030
two minutes left let's go sorry here's

00:30:39,230 --> 00:30:47,090
Kelly boy he has a he has a parasite

00:30:44,030 --> 00:30:49,280
infection he's the primary host luckily

00:30:47,090 --> 00:30:50,840
for him it's the within the parasites

00:30:49,280 --> 00:30:52,070
interest for him to stay alive so he can

00:30:50,840 --> 00:30:54,710
reproduce so he just has like a

00:30:52,070 --> 00:30:57,590
respiratory infection he coughs up some

00:30:54,710 --> 00:30:59,299
bugs bugs the bugs remain in the

00:30:57,590 --> 00:31:00,890
environment can last for ages an

00:30:59,299 --> 00:31:02,660
intermediate host in most cases

00:31:00,890 --> 00:31:04,220
particularly if we're talking about a

00:31:02,660 --> 00:31:06,650
Python it'll be something like a mouse

00:31:04,220 --> 00:31:08,390
will eat something that has these eggs

00:31:06,650 --> 00:31:10,669
on it the eggs will burrow through their

00:31:08,390 --> 00:31:14,750
intestinal tract to wherever is warm and

00:31:10,669 --> 00:31:17,780
safe and nice and it will grow up here's

00:31:14,750 --> 00:31:19,160
where things go wrong so parasites don't

00:31:17,780 --> 00:31:20,780
usually care about their intermediate

00:31:19,160 --> 00:31:22,640
hosts they just care enough for it to

00:31:20,780 --> 00:31:24,770
grow up and then move on

00:31:22,640 --> 00:31:27,260
it doesn't really care if the

00:31:24,770 --> 00:31:29,419
intermediate host lives during or after

00:31:27,260 --> 00:31:31,400
that especially like during if they're

00:31:29,419 --> 00:31:36,470
looking for people which will like eat

00:31:31,400 --> 00:31:41,000
it so it when it develops cysts it's not

00:31:36,470 --> 00:31:43,250
fun for anyone any the intermediate host

00:31:41,000 --> 00:31:45,350
at all you get flu-like symptoms if

00:31:43,250 --> 00:31:47,750
you're a human it will be most likely

00:31:45,350 --> 00:31:49,250
misdiagnosed you have to look like

00:31:47,750 --> 00:31:52,640
Timmons you probably have a cold or a

00:31:49,250 --> 00:31:55,490
flu not necessarily a parasite also if

00:31:52,640 --> 00:31:57,620
you are a human who gets a very very

00:31:55,490 --> 00:31:59,510
heavy infection you get comorbidities

00:31:57,620 --> 00:32:01,640
that is a disease that comes along as

00:31:59,510 --> 00:32:02,750
the result of another thing so you might

00:32:01,640 --> 00:32:04,190
not die directly from

00:32:02,750 --> 00:32:06,860
parasites but you might die from

00:32:04,190 --> 00:32:10,190
septicemia caused by parasites okay

00:32:06,860 --> 00:32:11,930
x-ray on this is what a type of

00:32:10,190 --> 00:32:13,850
parasitic infections looks like it's

00:32:11,930 --> 00:32:16,460
tiny things though tiny tipsy shapes are

00:32:13,850 --> 00:32:19,850
cysts that are formed by them okay x-ray

00:32:16,460 --> 00:32:24,430
off okay the best thing about this is

00:32:19,850 --> 00:32:24,430
most human infections are asymptomatic

00:32:25,150 --> 00:32:29,919
[Applause]

00:32:29,980 --> 00:32:43,160
thank you very much I think you didn't

00:32:40,280 --> 00:32:50,030
put your name on your slide I'd never

00:32:43,160 --> 00:32:52,490
lanyard yes okay so up on deck we have

00:32:50,030 --> 00:33:01,640
eight and Pulford on this side but first

00:32:52,490 --> 00:33:03,980
Louis Bowman with don't do this hey

00:33:01,640 --> 00:33:10,610
folks this is my first lightning talk so

00:33:03,980 --> 00:33:14,030
go easy on me yet don't do this Who am I

00:33:10,610 --> 00:33:15,170
I'm from Brisbane I'm studying software

00:33:14,030 --> 00:33:17,210
engineering at the University of

00:33:15,170 --> 00:33:20,450
Queensland I work at play Mac Ian and

00:33:17,210 --> 00:33:23,090
I'm on a committee of code Network which

00:33:20,450 --> 00:33:27,110
is a like group of like 4,000 developers

00:33:23,090 --> 00:33:30,830
based in Brisbane anyway what is this

00:33:27,110 --> 00:33:34,130
talk it's bad code hopefully I want to

00:33:30,830 --> 00:33:37,670
teach you something from my madness and

00:33:34,130 --> 00:33:41,830
let's see how that goes let's start I'll

00:33:37,670 --> 00:33:44,590
start small it'll get worse trust me

00:33:41,830 --> 00:33:47,540
raise your hands who's ever thought

00:33:44,590 --> 00:33:50,420
parentheses the lame the cool kids use

00:33:47,540 --> 00:33:55,640
square brackets there's actually some

00:33:50,420 --> 00:34:00,440
hands I was not prepared for this well

00:33:55,640 --> 00:34:03,590
have I got the code for you so this is a

00:34:00,440 --> 00:34:05,870
class that acts as a decorator takes a

00:34:03,590 --> 00:34:08,720
function and also overrides get item

00:34:05,870 --> 00:34:12,000
with ogz which will return calling the

00:34:08,720 --> 00:34:14,350
function with those arguments

00:34:12,000 --> 00:34:16,930
apply through this innocent function

00:34:14,350 --> 00:34:20,650
name which says hello format name and

00:34:16,930 --> 00:34:22,180
then prints hi Tom and notice that

00:34:20,650 --> 00:34:26,890
you're calling the function with square

00:34:22,180 --> 00:34:28,960
brackets because parentheses Elaine who

00:34:26,890 --> 00:34:32,440
here likes Haskell raise your hands

00:34:28,960 --> 00:34:36,430
you're thinking this is a trap you're

00:34:32,440 --> 00:34:37,900
right my favorite part of high school is

00:34:36,430 --> 00:34:41,410
currying if you don't know what that is

00:34:37,900 --> 00:34:43,420
it's like partially applying arguments

00:34:41,410 --> 00:34:45,900
to a function you can do it in Python

00:34:43,420 --> 00:34:49,270
using funk tools or partial it's a bit

00:34:45,900 --> 00:34:52,300
verbose I'm not a huge fan of it so I

00:34:49,270 --> 00:34:54,910
found a better way to do it again

00:34:52,300 --> 00:34:58,980
another class takes a function this time

00:34:54,910 --> 00:35:02,280
also initializes ogz to an empty array

00:34:58,980 --> 00:35:05,530
overrides or to append the eggs and then

00:35:02,280 --> 00:35:07,780
overrides call which will do things I

00:35:05,530 --> 00:35:09,790
created a function which just adds two

00:35:07,780 --> 00:35:12,700
numbers and then add five you just do

00:35:09,790 --> 00:35:15,910
innocent or five which will make a b5

00:35:12,700 --> 00:35:20,820
print out add five one two you've now

00:35:15,910 --> 00:35:20,820
got seven you're welcome

00:35:22,830 --> 00:35:27,970
who is forced to use Python 2 and miss

00:35:25,780 --> 00:35:30,940
out on some of those awesome Python 3

00:35:27,970 --> 00:35:32,920
features I know I am I thought there'd

00:35:30,940 --> 00:35:35,800
be more of you you are a very lucky

00:35:32,920 --> 00:35:39,220
crowd so one feature that a lot of

00:35:35,800 --> 00:35:40,330
people love is F strings Python 2

00:35:39,220 --> 00:35:42,460
doesn't have them if you don't know what

00:35:40,330 --> 00:35:48,390
that is it's where you put an F before

00:35:42,460 --> 00:35:51,760
your string and then it will yeah and

00:35:48,390 --> 00:35:53,980
then it will like evaluate the variables

00:35:51,760 --> 00:35:57,460
with that engine called dot format on it

00:35:53,980 --> 00:36:05,859
so I was like I work in Python 2 I want

00:35:57,460 --> 00:36:09,380
that I made it so instead of just yes

00:36:05,859 --> 00:36:14,630
so instead of just prefixing your string

00:36:09,380 --> 00:36:17,210
with f you call F as a function on it so

00:36:14,630 --> 00:36:18,859
how this works is the double double

00:36:17,210 --> 00:36:21,259
under the double underscore import

00:36:18,859 --> 00:36:25,059
double underscore inspect is basically

00:36:21,259 --> 00:36:27,049
importing inspect and then returning it

00:36:25,059 --> 00:36:29,900
current frame gets you the current

00:36:27,049 --> 00:36:32,240
calling frame dot F back gives you the

00:36:29,900 --> 00:36:36,710
parent frame and dot F locals gives you

00:36:32,240 --> 00:36:38,960
a dictionary of key to variable value in

00:36:36,710 --> 00:36:41,269
that frame so basically you're going to

00:36:38,960 --> 00:36:43,690
the parent calling frame getting the

00:36:41,269 --> 00:36:47,200
locals and passing them all in to format

00:36:43,690 --> 00:36:47,200
you're welcome

00:36:48,579 --> 00:36:56,180
now who saw the flip flop errata and

00:36:54,500 --> 00:36:58,430
thought I want this for legitimate

00:36:56,180 --> 00:37:01,369
reasons that actually exists and not

00:36:58,430 --> 00:37:09,039
just to annoy my coworkers there's some

00:37:01,369 --> 00:37:09,039
hands have I got the code for you so

00:37:09,339 --> 00:37:13,519
similar to how the other one works it

00:37:11,809 --> 00:37:14,839
uses inspect on current frame and

00:37:13,519 --> 00:37:16,730
getting the back but this time it also

00:37:14,839 --> 00:37:19,220
gets the frame info on it like the phone

00:37:16,730 --> 00:37:21,289
name the line the function name the

00:37:19,220 --> 00:37:24,650
index and some other stuff uses a cache

00:37:21,289 --> 00:37:27,740
and then it stores the case of that

00:37:24,650 --> 00:37:30,759
calling thing and stores the toggled

00:37:27,740 --> 00:37:33,289
value and then uses the values on a or B

00:37:30,759 --> 00:37:37,099
which allows you to get the flip-flop

00:37:33,289 --> 00:37:43,220
errata in python just calling FF on two

00:37:37,099 --> 00:37:45,170
expressions you're welcome and now

00:37:43,220 --> 00:37:49,750
you're thinking well these are all cool

00:37:45,170 --> 00:37:49,750
but is there a way to use them together

00:37:49,900 --> 00:37:57,140
yes sorry this uses square brackets

00:37:54,170 --> 00:38:00,609
currying thank and then yeah all of them

00:37:57,140 --> 00:38:00,609
together thanks

00:38:17,580 --> 00:38:21,010
so you know that F string things in the

00:38:19,930 --> 00:38:30,940
standard library right

00:38:21,010 --> 00:38:32,980
in Python - really that's cool it's it's

00:38:30,940 --> 00:38:42,220
either in the email thing Racine mailman

00:38:32,980 --> 00:38:43,990
or something like that very exciting so

00:38:42,220 --> 00:38:48,310
I seem to have created a string of

00:38:43,990 --> 00:38:50,560
talked about code issues Marin you're up

00:38:48,310 --> 00:38:52,900
on this side in a moment but first we

00:38:50,560 --> 00:39:03,940
have Aidan Pulford with confessions of a

00:38:52,900 --> 00:39:07,630
go to user applause that is a fantastic

00:39:03,940 --> 00:39:08,680
talk to go after consider you're gonna

00:39:07,630 --> 00:39:13,420
recognize some of the stuff in and

00:39:08,680 --> 00:39:17,350
actually so I have a confession to make

00:39:13,420 --> 00:39:18,520
I love go to and I have for a long time

00:39:17,350 --> 00:39:22,090
now

00:39:18,520 --> 00:39:25,300
it has followed me for almost all of my

00:39:22,090 --> 00:39:29,080
programming career from my distant

00:39:25,300 --> 00:39:31,420
childhood very long time ago all the way

00:39:29,080 --> 00:39:34,690
to the present so it goes all the way

00:39:31,420 --> 00:39:37,780
back to about five years ago when I just

00:39:34,690 --> 00:39:39,340
started programming in batch now I don't

00:39:37,780 --> 00:39:40,690
know if you're all familiar with batch

00:39:39,340 --> 00:39:44,080
but you don't actually have much of a

00:39:40,690 --> 00:39:47,440
choice regarding go-to and year seven me

00:39:44,080 --> 00:39:50,650
definitely didn't so I was making all

00:39:47,440 --> 00:39:52,330
sorts of text adventures in batch and

00:39:50,650 --> 00:39:57,160
the way I'd river between all of the

00:39:52,330 --> 00:39:58,810
things was with go-to and then I got

00:39:57,160 --> 00:40:00,220
frustrated at something I don't know

00:39:58,810 --> 00:40:03,190
what it was probably go too

00:40:00,220 --> 00:40:06,130
and then I moved on I didn't code for

00:40:03,190 --> 00:40:09,190
another three years until I came to my

00:40:06,130 --> 00:40:12,730
current school which and I mean about

00:40:09,190 --> 00:40:14,620
year ten now and I'm taking an IT course

00:40:12,730 --> 00:40:20,080
on Drock learning love you guys do not

00:40:14,620 --> 00:40:22,060
blame them and we move on to an Arduino

00:40:20,080 --> 00:40:24,820
assignment in the end of the first

00:40:22,060 --> 00:40:25,930
semester and I hit a problem

00:40:24,820 --> 00:40:28,360
oh it's sorry I actually skipped

00:40:25,930 --> 00:40:29,440
something this is how go-to works for

00:40:28,360 --> 00:40:30,940
all of you who are just missing the joke

00:40:29,440 --> 00:40:33,490
at the moment

00:40:30,940 --> 00:40:35,530
basically what go-to does is it moves

00:40:33,490 --> 00:40:39,010
you through the courage so if you have a

00:40:35,530 --> 00:40:40,630
look at this example what happens is you

00:40:39,010 --> 00:40:43,450
run procedurally through this until you

00:40:40,630 --> 00:40:45,430
hit the go-to in batch echo is print

00:40:43,450 --> 00:40:47,710
basically in this case so it goes to go

00:40:45,430 --> 00:40:49,420
to then it goes back up to middle and

00:40:47,710 --> 00:40:50,620
then it keeps going back down as if

00:40:49,420 --> 00:40:53,710
nothing happened and it gives you

00:40:50,620 --> 00:40:56,020
something like that alright so back to

00:40:53,710 --> 00:40:57,820
the story of you attend me who's using

00:40:56,020 --> 00:41:00,250
go to again

00:40:57,820 --> 00:41:03,220
I hit a problem I'm not sure what the

00:41:00,250 --> 00:41:05,350
problem was actually because that's at

00:41:03,220 --> 00:41:08,260
the end of void loop and I send it back

00:41:05,350 --> 00:41:09,880
to the top of it which for those of you

00:41:08,260 --> 00:41:18,280
aren't familiar with Arduino happens

00:41:09,880 --> 00:41:21,160
anyway and I also used it two other

00:41:18,280 --> 00:41:25,330
times in the code and I'm not sure why I

00:41:21,160 --> 00:41:27,310
used it but I was hooked and so at the

00:41:25,330 --> 00:41:29,650
ends of that unit we go back to Python

00:41:27,310 --> 00:41:32,770
and I'm heartbroken because python does

00:41:29,650 --> 00:41:34,630
not natively have go-to and my my young

00:41:32,770 --> 00:41:37,180
impressionable self starts looking out

00:41:34,630 --> 00:41:38,470
in the community for go to libraries but

00:41:37,180 --> 00:41:40,450
we haven't covered object-oriented

00:41:38,470 --> 00:41:41,590
programming like fully at this point so

00:41:40,450 --> 00:41:43,660
I'm not really able to understand what's

00:41:41,590 --> 00:41:46,600
going on and I go why don't I make it

00:41:43,660 --> 00:41:49,760
myself so this is the earliest version

00:41:46,600 --> 00:41:54,340
of that from year 10 what

00:41:49,760 --> 00:41:58,540
[Laughter]

00:41:54,340 --> 00:42:01,720
it works sort of if you put this at the

00:41:58,540 --> 00:42:05,830
top of your file you will go to where

00:42:01,720 --> 00:42:07,870
you flagged however it can't import a

00:42:05,830 --> 00:42:09,040
file with this in it and then start

00:42:07,870 --> 00:42:11,530
using go to in a different folder

00:42:09,040 --> 00:42:12,670
because file will always go back to the

00:42:11,530 --> 00:42:16,660
one that the function is actually

00:42:12,670 --> 00:42:18,760
written in and I'm in new ten at this

00:42:16,660 --> 00:42:20,440
point I have assignments coming in I'm

00:42:18,760 --> 00:42:22,120
working on some of your eleven classes

00:42:20,440 --> 00:42:25,300
as well so something's actually matter

00:42:22,120 --> 00:42:26,710
and so I'm basically I give it up

00:42:25,300 --> 00:42:29,070
because it's on the back burner it's not

00:42:26,710 --> 00:42:32,250
as important as my actual classwork

00:42:29,070 --> 00:42:32,250
until yesterday

00:42:32,520 --> 00:42:37,300
inspired by the warnings talked

00:42:34,900 --> 00:42:44,200
specifically specifically about the part

00:42:37,300 --> 00:42:46,300
about deprecated code I made this with

00:42:44,200 --> 00:42:48,280
the help of one of my classmates oh wait

00:42:46,300 --> 00:42:49,750
no sorry this is this is actually a

00:42:48,280 --> 00:42:51,460
stack overflow thing which that code

00:42:49,750 --> 00:42:56,170
before you told me about in specs like

00:42:51,460 --> 00:42:57,660
the the clever bosses they are for those

00:42:56,170 --> 00:43:01,360
of you don't know what's happening here

00:42:57,660 --> 00:43:02,770
basically it's inspecting the current

00:43:01,360 --> 00:43:04,960
frame which is saying what happened just

00:43:02,770 --> 00:43:07,060
now let's go back one step and get the

00:43:04,960 --> 00:43:09,400
global variables from them get the file

00:43:07,060 --> 00:43:12,130
that was active then read it split it

00:43:09,400 --> 00:43:14,650
and get the dude was doing in the

00:43:12,130 --> 00:43:21,490
previous example so this is what I made

00:43:14,650 --> 00:43:24,370
yesterday basically what happened is it

00:43:21,490 --> 00:43:25,840
goes through the file okay here occurs

00:43:24,370 --> 00:43:28,750
backwards and forwards at the same time

00:43:25,840 --> 00:43:31,090
in a sense it goes through the

00:43:28,750 --> 00:43:33,310
iterations because the previous example

00:43:31,090 --> 00:43:34,930
could only be called once and then it

00:43:33,310 --> 00:43:36,910
would break with from a different file

00:43:34,930 --> 00:43:39,160
this one goes back through all of these

00:43:36,910 --> 00:43:41,050
previous iterations of go-to until it

00:43:39,160 --> 00:43:45,090
hits the base file and then goes all the

00:43:41,050 --> 00:43:49,080
way back it's a print what was happening

00:43:45,090 --> 00:43:49,080
yeah I'm sorry

00:43:55,160 --> 00:43:59,820
so I really appreciated that you had

00:43:58,290 --> 00:44:01,470
that section where you explained for all

00:43:59,820 --> 00:44:04,230
the people slightly older than you and

00:44:01,470 --> 00:44:08,100
what go to actually does most of us

00:44:04,230 --> 00:44:09,420
let's skip that I think I I think people

00:44:08,100 --> 00:44:11,310
who are older than that can agree that

00:44:09,420 --> 00:44:13,200
we can finally remove the question mark

00:44:11,310 --> 00:44:15,470
from that famous paper go to considered

00:44:13,200 --> 00:44:15,470
harmful

00:44:15,560 --> 00:44:35,670
Andrew leach Europe on Dec you again hi

00:44:32,190 --> 00:44:38,280
I'm Aaron this is my first Pike on this

00:44:35,670 --> 00:44:43,410
is not my first lightening talk this

00:44:38,280 --> 00:44:46,020
bike on so some of you may remember from

00:44:43,410 --> 00:44:49,310
the last couple of days there's been

00:44:46,020 --> 00:44:54,270
some discussions of flip-flop operators

00:44:49,310 --> 00:44:56,310
and so we've been the slightly talk is

00:44:54,270 --> 00:45:00,240
going to be a face off of different

00:44:56,310 --> 00:45:05,690
implementations and Python of the

00:45:00,240 --> 00:45:13,619
flip-flop operator you may be asking why

00:45:05,690 --> 00:45:15,090
yeah so again for some background for

00:45:13,619 --> 00:45:18,300
those of you who went around today and

00:45:15,090 --> 00:45:21,930
to just take a non blame Tom a little

00:45:18,300 --> 00:45:26,420
bit so Tom mentioned in his in this in

00:45:21,930 --> 00:45:28,920
his keynote or kind of mentioned Ruby's

00:45:26,420 --> 00:45:30,960
flip-flop operator suggests that I do a

00:45:28,920 --> 00:45:36,770
lightning talk about it I did

00:45:30,960 --> 00:45:39,510
and then suggested that someone might

00:45:36,770 --> 00:45:43,470
might implement a flip-flop operator for

00:45:39,510 --> 00:45:47,460
Python over the in the weekend not just

00:45:43,470 --> 00:45:49,890
someone did did that at last count we

00:45:47,460 --> 00:45:52,420
have six implementations

00:45:49,890 --> 00:45:56,289
and we're gonna judge them so we have

00:45:52,420 --> 00:46:03,089
two guest judges that cap your dogs and

00:45:56,289 --> 00:46:06,069
Tommy's men this is not my fault

00:46:03,089 --> 00:46:10,960
listen there are there's 600 people in

00:46:06,069 --> 00:46:13,569
here last night I didn't speak a single

00:46:10,960 --> 00:46:15,130
word all right all right that's Tom and

00:46:13,569 --> 00:46:22,509
exactly want to introduce yourself

00:46:15,130 --> 00:46:26,619
briefly I'm Zack I was apparently a

00:46:22,509 --> 00:46:29,200
celebrity at a judge at 3:20 so I've

00:46:26,619 --> 00:46:31,210
invented some rules the rules for

00:46:29,200 --> 00:46:32,829
judging these implementations does it

00:46:31,210 --> 00:46:34,660
work is it a good idea

00:46:32,829 --> 00:46:37,930
does it have pizzazz and extra points

00:46:34,660 --> 00:46:40,359
for arbitrary reasons so the first

00:46:37,930 --> 00:46:43,960
implementation that we are looking at is

00:46:40,359 --> 00:46:46,920
the flip flopper ada pie pie package so

00:46:43,960 --> 00:46:50,140
flow block actually got this up on on

00:46:46,920 --> 00:46:52,119
Piper in the last in the last 20 hours

00:46:50,140 --> 00:46:55,989
this morning quite impressive

00:46:52,119 --> 00:46:57,729
there's documentation there's tests I'm

00:46:55,989 --> 00:46:59,920
not sure what that square is I don't

00:46:57,729 --> 00:47:01,690
think it's a I think it's a square in

00:46:59,920 --> 00:47:03,519
the original it's meant to be a digraph

00:47:01,690 --> 00:47:08,890
from the kinetic Canadian Aboriginal

00:47:03,519 --> 00:47:12,430
cell our big block which is a of two

00:47:08,890 --> 00:47:14,170
dots right all right so can we get some

00:47:12,430 --> 00:47:16,989
some judgment we're gonna have to go

00:47:14,170 --> 00:47:19,930
really quickly because so it doesn't

00:47:16,989 --> 00:47:24,430
work maybe maybe does is it a good idea

00:47:19,930 --> 00:47:26,559
no does it have possess yes yes yes all

00:47:24,430 --> 00:47:29,529
right - takes any extra points for

00:47:26,559 --> 00:47:31,869
arbitrary reasons no one point for being

00:47:29,529 --> 00:47:35,269
a party on one point yes okay but why

00:47:31,869 --> 00:47:38,659
not - yes yes

00:47:35,269 --> 00:47:41,209
oh good an implementation from Nathan

00:47:38,659 --> 00:47:43,789
Creek it supports multiple syntaxes we

00:47:41,209 --> 00:47:46,689
can use different types of things and

00:47:43,789 --> 00:47:50,809
we've got a little example of it there

00:47:46,689 --> 00:47:52,659
does it work maybe we're not sure it's a

00:47:50,809 --> 00:47:57,439
good idea

00:47:52,659 --> 00:47:59,569
does it have possess half points all

00:47:57,439 --> 00:48:02,209
right half a possess any extra points

00:47:59,569 --> 00:48:03,919
for arbitrary reasons half a point for

00:48:02,209 --> 00:48:05,809
tooth in taxes half a point for two

00:48:03,919 --> 00:48:08,839
syntaxes cool all right now we've got

00:48:05,809 --> 00:48:13,279
the salt thing we've got a real infix

00:48:08,839 --> 00:48:18,649
operator from Samuel Bishop does it work

00:48:13,279 --> 00:48:30,259
it does work I tested this one is it a

00:48:18,649 --> 00:48:30,859
good idea extra points for arbitrary

00:48:30,259 --> 00:48:33,709
reasons

00:48:30,859 --> 00:48:35,329
no it's an infix operator so two points

00:48:33,709 --> 00:48:36,709
but again minus one because if you take

00:48:35,329 --> 00:48:39,999
the brackets off the conditions it

00:48:36,709 --> 00:48:39,999
breaks also it looks like a TIE fighter

00:48:41,769 --> 00:48:47,419
now we've got one from Lois and from the

00:48:44,569 --> 00:48:51,109
previous and the previous he's really

00:48:47,419 --> 00:48:52,999
skinny and alright does it work I think

00:48:51,109 --> 00:48:55,489
it does yeah he actually got this in

00:48:52,999 --> 00:48:58,339
first he got this and I can midnight

00:48:55,489 --> 00:49:03,559
like it midnight so that's choice you

00:48:58,339 --> 00:49:06,859
can make with your evening alright

00:49:03,559 --> 00:49:08,940
doesn't work yeah sure yes is it a good

00:49:06,859 --> 00:49:11,609
idea

00:49:08,940 --> 00:49:12,540
are you doing this one right does it

00:49:11,609 --> 00:49:16,319
have pizzazz

00:49:12,540 --> 00:49:18,230
yep yep extra points the stack thing

00:49:16,319 --> 00:49:20,550
blew my mind I've really loved that

00:49:18,230 --> 00:49:22,770
alright and now we've got two we've got

00:49:20,550 --> 00:49:26,220
13 so you can sleep but wait well keep

00:49:22,770 --> 00:49:28,079
going all right so you and McNeill

00:49:26,220 --> 00:49:31,410
actually made two different

00:49:28,079 --> 00:49:38,609
implementations both a context and a

00:49:31,410 --> 00:49:40,230
generator based some yeah let's let's

00:49:38,609 --> 00:49:43,230
take them to give it does does it work

00:49:40,230 --> 00:49:46,740
and let's take some ways it's a good

00:49:43,230 --> 00:49:50,099
idea no does it have pizzazz

00:49:46,740 --> 00:49:54,290
yeah the two implementations yeah yeah

00:49:50,099 --> 00:49:58,440
extra points for arbitrary reasons nope

00:49:54,290 --> 00:50:01,560
all right so despite the minus points

00:49:58,440 --> 00:50:06,599
for being a good idea we've we've got a

00:50:01,560 --> 00:50:09,980
winner and it's Sam for building an

00:50:06,599 --> 00:50:14,280
infix operator I've got you add a tiny

00:50:09,980 --> 00:50:16,380
little constant do we have Sam's do we

00:50:14,280 --> 00:50:19,609
not have Sam we do have Sam it's also

00:50:16,380 --> 00:50:19,609
got road signs on it

00:50:26,630 --> 00:50:37,380
thank you I apologize profusely this

00:50:32,070 --> 00:50:42,000
this got out of hand so Nick Coughlin

00:50:37,380 --> 00:50:44,220
you are up on deck on this side this

00:50:42,000 --> 00:50:46,200
talk has a remarkably long title which

00:50:44,220 --> 00:50:48,330
I'm going to read in its entirety which

00:50:46,200 --> 00:50:50,250
is how to do embedded device development

00:50:48,330 --> 00:50:53,550
better with micro Python and Jupiter

00:50:50,250 --> 00:50:55,080
it's ready for professional use so good

00:50:53,550 --> 00:50:57,660
pretty please

00:50:55,080 --> 00:50:59,790
I have lights and live demos so it will

00:50:57,660 --> 00:51:06,840
be a good laugh please welcome Andrea

00:50:59,790 --> 00:51:08,970
leach thank you very much hi I'm Andrew

00:51:06,840 --> 00:51:11,730
at Planet innovation I'm lucky enough to

00:51:08,970 --> 00:51:15,270
be working on our first medical device

00:51:11,730 --> 00:51:19,740
running on micro Python this is great

00:51:15,270 --> 00:51:21,600
fun mic pythons letting us really change

00:51:19,740 --> 00:51:24,480
the way we think about possibilities of

00:51:21,600 --> 00:51:27,480
embedded development it's giving us lots

00:51:24,480 --> 00:51:30,090
of new tools and more importantly it's

00:51:27,480 --> 00:51:32,070
letting us reuse a lot of Python code

00:51:30,090 --> 00:51:33,510
that's already out there in our

00:51:32,070 --> 00:51:36,900
particular case we've got an existing

00:51:33,510 --> 00:51:38,850
product with a Python desktop app that

00:51:36,900 --> 00:51:40,500
we want to turn into a standalone so we

00:51:38,850 --> 00:51:42,720
can just look at sharing that code from

00:51:40,500 --> 00:51:46,350
the desktop straight to the Python micro

00:51:42,720 --> 00:51:48,420
Python and get it standalone this will

00:51:46,350 --> 00:51:50,340
speed up development and allow us to

00:51:48,420 --> 00:51:53,790
have better tested code previously

00:51:50,340 --> 00:51:55,670
tested code up and running quickly but

00:51:53,790 --> 00:51:58,100
the only problem running into so far is

00:51:55,670 --> 00:52:01,350
there's a bit of a lack of debugging

00:51:58,100 --> 00:52:03,000
opportunities in micro pathan especially

00:52:01,350 --> 00:52:04,320
as Python developers were used to line

00:52:03,000 --> 00:52:06,990
by line stepping through debugging

00:52:04,320 --> 00:52:10,080
embedded developers for usage a DB line

00:52:06,990 --> 00:52:13,590
by line debugging but that's okay Python

00:52:10,080 --> 00:52:16,920
is easy so we can just go back to the

00:52:13,590 --> 00:52:18,420
good old days of flash our chip plug in

00:52:16,920 --> 00:52:23,460
the serial port and look at the print

00:52:18,420 --> 00:52:25,610
statements that does the job not too

00:52:23,460 --> 00:52:25,610
much

00:52:25,890 --> 00:52:34,360
Jupiter night book we all love Jupiter

00:52:28,030 --> 00:52:35,420
we've gone too far it doesn't matter it

00:52:34,360 --> 00:52:39,410
does actually

00:52:35,420 --> 00:52:39,410
[Laughter]

00:52:49,200 --> 00:52:58,079
we'll get there Jupiter so there's been

00:52:56,220 --> 00:52:59,730
a Jupiter notebook Colonel Mike laughing

00:52:58,079 --> 00:53:01,890
around for a little while by goat Church

00:52:59,730 --> 00:53:04,559
Prime it never got published a pie pie

00:53:01,890 --> 00:53:05,880
but it's got a lot of functionality I've

00:53:04,559 --> 00:53:08,039
had to rework that a bit taking it

00:53:05,880 --> 00:53:10,260
further it's now in Popeye and we can

00:53:08,039 --> 00:53:18,240
just start talking to our bike paths and

00:53:10,260 --> 00:53:22,099
devices easily from Jupiter get it run

00:53:18,240 --> 00:53:25,260
edit run rinse and repeat

00:53:22,099 --> 00:53:27,990
this kernel also lets us run some cells

00:53:25,260 --> 00:53:30,180
on the local environment so you can see

00:53:27,990 --> 00:53:35,400
where cpython rather than Mike Pathan

00:53:30,180 --> 00:53:42,359
you can edit files look at stuff or use

00:53:35,400 --> 00:53:44,730
widgets this is stuff I can't do when

00:53:42,359 --> 00:53:47,010
I'm doing C++ development on the

00:53:44,730 --> 00:53:49,799
microcontroller this opens up some new

00:53:47,010 --> 00:53:52,260
possibilities of debugging that not used

00:53:49,799 --> 00:53:53,759
having before so we've sort of getting

00:53:52,260 --> 00:53:57,539
into some new ways of thinking about

00:53:53,759 --> 00:53:59,640
what we can and can't do not really fun

00:53:57,539 --> 00:54:01,200
I know Damian's already left but a

00:53:59,640 --> 00:54:03,509
little while back he started it a pull

00:54:01,200 --> 00:54:06,329
request on Mike a Python called MP

00:54:03,509 --> 00:54:08,220
ripple which uses the virtual file

00:54:06,329 --> 00:54:10,880
system in the market python board and

00:54:08,220 --> 00:54:14,640
gives you this little tiny remote folder

00:54:10,880 --> 00:54:18,660
which is actually the local folder on

00:54:14,640 --> 00:54:21,240
your PC so this lets you open read write

00:54:18,660 --> 00:54:23,700
copy files from your PC to micro Python

00:54:21,240 --> 00:54:27,000
on the fly and eventually import files

00:54:23,700 --> 00:54:28,859
straight from PC when it gets there this

00:54:27,000 --> 00:54:30,599
makes it potentially a lot easier to

00:54:28,859 --> 00:54:33,119
deploy your applications on to your

00:54:30,599 --> 00:54:35,279
market Python board so for a start we

00:54:33,119 --> 00:54:37,740
can flash the board ROM on or within the

00:54:35,279 --> 00:54:41,900
same Jupiter then we can copy our

00:54:37,740 --> 00:54:45,390
important libraries on happy days and

00:54:41,900 --> 00:54:47,579
within this kernel and even in the

00:54:45,390 --> 00:54:54,170
original one you can define a file in a

00:54:47,579 --> 00:54:57,079
Cell and let's send it to a file easy

00:54:54,170 --> 00:55:02,690
unplug

00:54:57,079 --> 00:55:05,930
rape blog yes

00:55:02,690 --> 00:55:12,440
we've now gonna deployed mark Parsons

00:55:05,930 --> 00:55:15,240
development I got time let's get forego

00:55:12,440 --> 00:55:16,829
so hoping Envy for those who don't know

00:55:15,240 --> 00:55:19,530
this was a kickstart a few years back

00:55:16,829 --> 00:55:22,740
it's a camera board all completely

00:55:19,530 --> 00:55:25,160
open-source running market pathan so

00:55:22,740 --> 00:55:30,740
with this we've got eleven lines of text

00:55:25,160 --> 00:55:32,869
smile that is connecting to the board

00:55:30,740 --> 00:55:36,240
configuring the camera sensor

00:55:32,869 --> 00:55:38,190
compressing it to JPEG or take your

00:55:36,240 --> 00:55:44,040
photo compressing a JPEG copying to the

00:55:38,190 --> 00:55:51,619
PC and locally we've got the bright

00:55:44,040 --> 00:55:53,940
lights with all the time left available

00:55:51,619 --> 00:55:58,069
thanks thanks so much damien and

00:55:53,940 --> 00:55:58,069
everyone is helping contributors

00:56:00,400 --> 00:56:05,420
so yes the colonel is on pipe I feel

00:56:03,349 --> 00:56:11,060
free to have fun yeah and we're done

00:56:05,420 --> 00:56:12,619
great thank you - two seconds left not

00:56:11,060 --> 00:56:13,520
quite full use of the time it's very

00:56:12,619 --> 00:56:15,380
disappointing

00:56:13,520 --> 00:56:16,880
I was also promised two lights were

00:56:15,380 --> 00:56:18,140
there two lights in that multiple lights

00:56:16,880 --> 00:56:23,810
are great

00:56:18,140 --> 00:56:25,339
it did say lights plural yes yeah I told

00:56:23,810 --> 00:56:27,020
Nick that he was doing this lightning

00:56:25,339 --> 00:56:28,670
talk first thing this morning and here

00:56:27,020 --> 00:56:30,410
is Nick with that lightning talk and

00:56:28,670 --> 00:56:33,530
this is the last lightning talk as well

00:56:30,410 --> 00:56:35,060
so if we can have a at least on this

00:56:33,530 --> 00:56:37,250
lecture and over here setting up while

00:56:35,060 --> 00:56:45,500
Nick's talking that would be great Nick

00:56:37,250 --> 00:56:47,180
Coghlan thank you Chris yep so I'm here

00:56:45,500 --> 00:56:48,680
to talk about controversial peps you've

00:56:47,180 --> 00:56:50,690
probably never heard of even if you're

00:56:48,680 --> 00:56:55,190
over 40 and I get to make over 40 jokes

00:56:50,690 --> 00:56:57,800
now so what it's a pep a pep is a Python

00:56:55,190 --> 00:56:59,510
enhancement proposal the way we handle

00:56:57,800 --> 00:57:01,730
Python language and ecosystem change

00:56:59,510 --> 00:57:03,290
proposals that are too complex to be

00:57:01,730 --> 00:57:05,660
handled or too complex or controversial

00:57:03,290 --> 00:57:07,730
to be handled as regular tracker issues

00:57:05,660 --> 00:57:10,160
on bugs the Python the dog and so

00:57:07,730 --> 00:57:12,380
they're all available online your URL is

00:57:10,160 --> 00:57:14,210
there and mailing lists themselves are

00:57:12,380 --> 00:57:17,089
online and we'll talk more about that

00:57:14,210 --> 00:57:18,890
later but pep I'm gonna start with

00:57:17,089 --> 00:57:21,319
statically nested scopes

00:57:18,890 --> 00:57:23,300
these are available in Python 2.1 from

00:57:21,319 --> 00:57:25,700
future import lexical scopes i think

00:57:23,300 --> 00:57:27,950
something like that and they became the

00:57:25,700 --> 00:57:28,369
default in python 2.2 we have an example

00:57:27,950 --> 00:57:32,150
here

00:57:28,369 --> 00:57:34,250
classic counter in a function that adds

00:57:32,150 --> 00:57:36,470
something to a value that was provided

00:57:34,250 --> 00:57:38,630
in the outer function back then 3.0 you

00:57:36,470 --> 00:57:39,980
couldn't do this as far as the inner

00:57:38,630 --> 00:57:41,569
function was concerned based didn't

00:57:39,980 --> 00:57:42,170
exist it's like what is this base thing

00:57:41,569 --> 00:57:44,450
you're talking about

00:57:42,170 --> 00:57:48,390
I have no base all the base belong to

00:57:44,450 --> 00:57:50,470
somebody else showing my age again

00:57:48,390 --> 00:57:52,790
[Music]

00:57:50,470 --> 00:57:54,859
here's a comment from the discussions of

00:57:52,790 --> 00:57:56,420
statically nested scoped this will break

00:57:54,859 --> 00:57:57,890
code I'm not sure whether it's worth

00:57:56,420 --> 00:57:59,329
going down this path just for the sake

00:57:57,890 --> 00:58:01,490
of being able to define functions within

00:57:59,329 --> 00:58:06,770
functions who here has ever defined a

00:58:01,490 --> 00:58:10,369
function within a function yeah 2,000

00:58:06,770 --> 00:58:13,010
2,000 for Pepsi one night decorators for

00:58:10,369 --> 00:58:14,390
function methods added in Python 2.4 who

00:58:13,010 --> 00:58:19,340
here is ever written

00:58:14,390 --> 00:58:20,540
whatever on top of a function do you

00:58:19,340 --> 00:58:23,270
think it makes your code I believe you

00:58:20,540 --> 00:58:26,270
make it take makes it horribly obtrusive

00:58:23,270 --> 00:58:28,670
and hard to read and terribly terribly

00:58:26,270 --> 00:58:31,400
intrusive yeah some people do still

00:58:28,670 --> 00:58:33,620
believe that but consider it consider

00:58:31,400 --> 00:58:35,810
the old version of it where you had to

00:58:33,620 --> 00:58:37,880
name the function then after the

00:58:35,810 --> 00:58:40,070
function you had to call the decorator

00:58:37,880 --> 00:58:41,870
with the named function and then rebind

00:58:40,070 --> 00:58:46,010
it back to the same name nobody wants to

00:58:41,870 --> 00:58:47,240
do that but yeah to decorators cosmas

00:58:46,010 --> 00:58:49,820
inserted method been available since

00:58:47,240 --> 00:58:51,650
python version 2.2 discussions have

00:58:49,820 --> 00:58:53,060
raged off and on on both complying

00:58:51,650 --> 00:58:54,740
Python in the Python dev mailing list

00:58:53,060 --> 00:58:57,530
about how best to implement function

00:58:54,740 --> 00:58:59,210
decorators and lots of objections about

00:58:57,530 --> 00:59:00,620
it being intrusive ugly lots of

00:58:59,210 --> 00:59:02,090
objections about there being no obvious

00:59:00,620 --> 00:59:03,440
way to pronounce it lots of objections

00:59:02,090 --> 00:59:05,810
to the fact that this was no longer an

00:59:03,440 --> 00:59:07,670
executable pseudo code now routinely

00:59:05,810 --> 00:59:10,520
accepted as a way of marking up callable

00:59:07,670 --> 00:59:12,440
some classes with extra information side

00:59:10,520 --> 00:59:13,790
note the original version did not have

00:59:12,440 --> 00:59:16,250
class decorators in it because there was

00:59:13,790 --> 00:59:18,350
no obvious use case for them python 37

00:59:16,250 --> 00:59:21,500
has their classes in it which you mark

00:59:18,350 --> 00:59:24,470
with the decorator pet 308 conditional

00:59:21,500 --> 00:59:25,700
expressions added in python 2.4 hands up

00:59:24,470 --> 00:59:31,070
if you've ever written a conditional

00:59:25,700 --> 00:59:33,560
expression so first line there argue fog

00:59:31,070 --> 00:59:35,170
is not none else default the way people

00:59:33,560 --> 00:59:38,000
used to write this pirate Python 3.4

00:59:35,170 --> 00:59:42,140
result equals argh is not nun and dog or

00:59:38,000 --> 00:59:44,390
default do you see a problem here what

00:59:42,140 --> 00:59:47,930
if I get 0 what if I get an empty list

00:59:44,390 --> 00:59:50,240
what if a key is an empty tuple yeah if

00:59:47,930 --> 00:59:51,980
statement if conditional expressions

00:59:50,240 --> 00:59:54,380
were added to get people to stop writing

00:59:51,980 --> 00:59:56,360
that and I suspect for anyone who's

00:59:54,380 --> 00:59:58,040
learned Python in the past 10 years this

00:59:56,360 --> 01:00:00,650
may actually be the first time they have

00:59:58,040 --> 01:00:02,750
ever seen the end or hack actually is

01:00:00,650 --> 01:00:04,640
this the first is this the first time

01:00:02,750 --> 01:00:07,430
you've ever seen the and alack there's a

01:00:04,640 --> 01:00:12,320
lot of hands going up awesome we

01:00:07,430 --> 01:00:14,150
succeeded pip 340 anonymous block

01:00:12,320 --> 01:00:17,330
statements these were proposed by Guido

01:00:14,150 --> 01:00:19,910
van Rossum they never shipped block

01:00:17,330 --> 01:00:22,070
expression as var 1 block 1 does this

01:00:19,910 --> 01:00:25,820
look familiar to anyone seem kind of

01:00:22,070 --> 01:00:27,380
like anything from the pep block

01:00:25,820 --> 01:00:28,100
statements provide a method mechanism

01:00:27,380 --> 01:00:29,960
for encapsulation

01:00:28,100 --> 01:00:31,280
patterns of structure code inside the

01:00:29,960 --> 01:00:32,390
block statement runs under the control

01:00:31,280 --> 01:00:34,250
of an object called the block Katerina

01:00:32,390 --> 01:00:35,720
simple blocking iterated execute code

01:00:34,250 --> 01:00:38,600
before and after the code inside a block

01:00:35,720 --> 01:00:40,490
statement might be sound if alia block

01:00:38,600 --> 01:00:42,140
eroded block iterators also have the

01:00:40,490 --> 01:00:44,270
opportunity to execute the controlled

01:00:42,140 --> 01:00:46,100
code more than once or not at all

01:00:44,270 --> 01:00:48,920
catch exceptions or receive data from

01:00:46,100 --> 01:00:51,080
the body of the block statement this

01:00:48,920 --> 01:00:54,170
Brooks people's brains this broke my

01:00:51,080 --> 01:00:56,120
brain one of the things I say about

01:00:54,170 --> 01:00:57,890
getting commit access to see pythons I

01:00:56,120 --> 01:01:02,440
got commit access to see Python for

01:00:57,890 --> 01:01:02,440
arguing with Guido this was the argument

01:01:03,460 --> 01:01:10,670
from that pet we have seen a decade's

01:01:08,390 --> 01:01:12,530
worth of follow-on development of some

01:01:10,670 --> 01:01:14,930
of the ideas that were originally

01:01:12,530 --> 01:01:17,150
expressed in that pet directly coming

01:01:14,930 --> 01:01:19,070
out of it we had Pep 342 co-routines

01:01:17,150 --> 01:01:20,510
very enhanced generators this is when

01:01:19,070 --> 01:01:21,830
yield went from being a statement to

01:01:20,510 --> 01:01:24,740
being an expression so you could send

01:01:21,830 --> 01:01:27,080
data back into the generator it gave us

01:01:24,740 --> 01:01:28,580
the wit statement so a constrained

01:01:27,080 --> 01:01:30,770
version and the block statement that

01:01:28,580 --> 01:01:32,780
just it just did the exception handling

01:01:30,770 --> 01:01:37,070
just let you run the code before and the

01:01:32,780 --> 01:01:38,600
code after later on we got pep 384

01:01:37,070 --> 01:01:42,800
delegating sub generators would yield

01:01:38,600 --> 01:01:44,420
from and then finally the other side of

01:01:42,800 --> 01:01:46,670
it of the more complex control

01:01:44,420 --> 01:01:51,050
structures came with native code in

01:01:46,670 --> 01:01:54,440
syntax with async await and so yeah so

01:01:51,050 --> 01:01:56,030
that pep while never accepted still laid

01:01:54,440 --> 01:01:59,810
the foundation for some ideas that are

01:01:56,030 --> 01:02:04,750
still filtering into Python today matrix

01:01:59,810 --> 01:02:04,750
multiplications most people ever seen it

01:02:08,130 --> 01:02:15,160
I've I've always wanted to threaten an

01:02:11,050 --> 01:02:18,849
overtime speaker with a with a thing

01:02:15,160 --> 01:02:28,810
that I can threaten them with Thanks

01:02:18,849 --> 01:02:30,910
what oh yeah thanks Nick

01:02:28,810 --> 01:02:33,910
it's it's great to see how the how the

01:02:30,910 --> 01:02:35,170
pep process has have shaped Python over

01:02:33,910 --> 01:02:38,950
the last however many years it's been

01:02:35,170 --> 01:02:40,180
and it a lot of really good relative

01:02:38,950 --> 01:02:43,440
really good things have come from and a

01:02:40,180 --> 01:02:48,730
lot of other things have been rejected I

01:02:43,440 --> 01:02:53,349
have two talks here for the to be

01:02:48,730 --> 01:02:56,800
awarded today's non pointed stick the

01:02:53,349 --> 01:03:01,690
first one is a talk that was on topic

01:02:56,800 --> 01:03:07,470
from Libby Berry the Python bugs talk

01:03:01,690 --> 01:03:09,880
and the other one is from a talk with

01:03:07,470 --> 01:03:11,830
code ideas that are worse than his

01:03:09,880 --> 01:03:15,160
handwriting don't do this by lewis beau

01:03:11,830 --> 01:03:22,240
Berman can we have a round of applause

01:03:15,160 --> 01:03:25,710
for Lewis and don't do this and for

01:03:22,240 --> 01:03:25,710
python bugs from Lily Barry

01:03:27,520 --> 01:03:41,390
Louis it's hard to tell yeah okay

01:03:36,080 --> 01:03:43,370
Tom Libby okay good we didn't want it to

01:03:41,390 --> 01:03:47,120
a flip-flopper rater which is great

01:03:43,370 --> 01:03:49,930
Libby you've got a giant plastic thing

01:03:47,120 --> 01:03:49,930
if you're around here

01:03:57,349 --> 01:04:04,769
you have the giant staff of pythonic

01:04:00,029 --> 01:04:07,069
enlightenment oh it actually does come

01:04:04,769 --> 01:04:07,069
apart

01:04:07,459 --> 01:04:11,329

YouTube URL: https://www.youtube.com/watch?v=rNkbmu4e3MA


