Title: Danger Will Robinson! Warning! Warning! Warning!
Publication date: 2018-08-25
Playlist: PyCon Australia 2018
Description: 
	Peter Lovett

https://2018.pycon-au.org/talks/45066-danger-will-robinson-warning-warning-warning/

Danger Will Robinson! Warning! Warning! Warning! (What Python warnings are, why you should turn them on and how to create your own)

Python's warnings mechanism is an important part of creating robust, reliable, production grade code. Unfortunately, it's also one of the most under-used standard libraries. Help find the bugs and errors with warnings! Ignore them at your peril! Suitable for beginner to intermediate.

Python, PyCon, PyConAU, australia, programming, sydney

This video is licensed under CC BY 3.0 AU - https://creativecommons.org/licenses/by/3.0/au/

PyCon Australia (“PyCon AU”) is the national conference for the Python Programming Community, bringing together professional, student and enthusiast developers with a love for developing with Python.

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 24 - 28 2018.

Python, PyCon, PyConAU
Captions: 
	00:00:05,629 --> 00:00:12,990
thank you everyone for coming in this

00:00:09,059 --> 00:00:15,450
session we have Peter lubbers and he's

00:00:12,990 --> 00:00:18,660
going to talk to us about danger Will

00:00:15,450 --> 00:00:21,630
Robinson warning warning warning what -

00:00:18,660 --> 00:00:24,720
warnings are why you should turn them on

00:00:21,630 --> 00:00:30,000
and how to create your own can I have a

00:00:24,720 --> 00:00:34,340
round of applause for Peter thank you

00:00:30,000 --> 00:00:43,920
ribbon and yes welcome to warnings I

00:00:34,340 --> 00:00:45,180
should probably play this clip so for

00:00:43,920 --> 00:00:48,200
those that don't know me I see some

00:00:45,180 --> 00:00:51,570
faces that I do so good to see you here

00:00:48,200 --> 00:00:52,920
I'm a programmer son of a programmer I

00:00:51,570 --> 00:00:57,690
have three sons two of whom were

00:00:52,920 --> 00:01:00,329
programmers let's hear it for them I've

00:00:57,690 --> 00:01:03,180
been paid to program since 1982 I've

00:01:00,329 --> 00:01:05,549
been working in Python since about 2000

00:01:03,180 --> 00:01:07,590
and I run my own company called plus

00:01:05,549 --> 00:01:09,479
plus and I've run training courses

00:01:07,590 --> 00:01:14,299
around Australia in New Zealand and a

00:01:09,479 --> 00:01:17,040
few other places primarily in C++ C

00:01:14,299 --> 00:01:18,659
Python and occasionally a bit of Java

00:01:17,040 --> 00:01:21,570
and a bit of Perl and a bit of other

00:01:18,659 --> 00:01:23,700
things if you're interested in my work

00:01:21,570 --> 00:01:25,920
for your company please see me

00:01:23,700 --> 00:01:29,700
afterwards or visit us blast comm today

00:01:25,920 --> 00:01:31,890
you this talk is an apology this is

00:01:29,700 --> 00:01:35,430
incomplete your mileage may vary and

00:01:31,890 --> 00:01:38,400
also this is a simple talk warnings are

00:01:35,430 --> 00:01:40,829
I've decided that the morning module is

00:01:38,400 --> 00:01:42,990
a very simple module but it's unloved

00:01:40,829 --> 00:01:46,500
and it needed a bit of extra love so I

00:01:42,990 --> 00:01:49,590
thought I'd run this session to lift its

00:01:46,500 --> 00:01:52,229
profile a bit so what I'm going to

00:01:49,590 --> 00:01:53,729
brother cover briefly is why we need

00:01:52,229 --> 00:01:56,250
warnings the history of the warnings

00:01:53,729 --> 00:01:59,909
module the different kinds of warnings

00:01:56,250 --> 00:02:02,939
that can issue controlling those

00:01:59,909 --> 00:02:05,909
warnings which is very important also

00:02:02,939 --> 00:02:07,799
very important for those going 23.7

00:02:05,909 --> 00:02:10,470
there are some changes in the different

00:02:07,799 --> 00:02:13,890
versions of Python how they manage and

00:02:10,470 --> 00:02:17,010
display warnings some more events

00:02:13,890 --> 00:02:20,760
issuing warnings and how that relates to

00:02:17,010 --> 00:02:24,840
testing logging asserts exceptions so

00:02:20,760 --> 00:02:29,040
let's let's get started why we need

00:02:24,840 --> 00:02:31,980
warnings this is a photo unretouched no

00:02:29,040 --> 00:02:36,870
Photoshop involved of Quentin my son and

00:02:31,980 --> 00:02:38,790
I skiing only a couple of weeks ago and

00:02:36,870 --> 00:02:41,850
that was they that was the photo of what

00:02:38,790 --> 00:02:44,210
the Vista look like pan right to where

00:02:41,850 --> 00:02:46,980
Quentin's standing and there you can see

00:02:44,210 --> 00:02:50,610
or maybe you can't see down that can you

00:02:46,980 --> 00:02:54,750
see the yet the drop off there no no

00:02:50,610 --> 00:02:57,000
neither did I that's why we need

00:02:54,750 --> 00:02:59,460
warnings for those that aren't familiar

00:02:57,000 --> 00:03:01,320
with the realm of skiing if you come

00:02:59,460 --> 00:03:03,330
across one of these orange poles do not

00:03:01,320 --> 00:03:04,710
ski over that orange pole that orange

00:03:03,330 --> 00:03:08,370
pole is there for a very important

00:03:04,710 --> 00:03:10,740
reason go around the orange pole if you

00:03:08,370 --> 00:03:13,890
come across orange poles in an X they're

00:03:10,740 --> 00:03:15,960
even worse we'll call that a danger one

00:03:13,890 --> 00:03:17,880
that one really stay away from there

00:03:15,960 --> 00:03:21,690
even if you can't see what the problem

00:03:17,880 --> 00:03:24,060
is with the emphasized that there is a

00:03:21,690 --> 00:03:26,250
problem there because if you ski past

00:03:24,060 --> 00:03:33,390
that what you might find is something

00:03:26,250 --> 00:03:36,390
like that I'm sure he was okay

00:03:33,390 --> 00:03:41,760
or maybe not that's why one has to take

00:03:36,390 --> 00:03:43,710
notice of warnings so a bit of a

00:03:41,760 --> 00:03:47,400
background brief background to the

00:03:43,710 --> 00:03:53,340
warnings module it actually authored by

00:03:47,400 --> 00:03:55,830
GVR pep to 30 because as he says with

00:03:53,340 --> 00:03:58,710
Putnam 3000 as it was known then now

00:03:55,830 --> 00:04:00,630
known as Parton 3 looming it's necessary

00:03:58,710 --> 00:04:05,670
to start issuing warnings about the use

00:04:00,630 --> 00:04:07,110
of obsolete or deprecated features there

00:04:05,670 --> 00:04:09,390
are lots of other reasons for warnings

00:04:07,110 --> 00:04:11,360
but that was the principal motivation

00:04:09,390 --> 00:04:16,320
was around deprecated features

00:04:11,360 --> 00:04:17,340
deprecated language aspects etc so if

00:04:16,320 --> 00:04:20,430
you're not familiar with the word

00:04:17,340 --> 00:04:24,180
deprecated it's a funny word and what it

00:04:20,430 --> 00:04:26,760
means is the discouragement of the use

00:04:24,180 --> 00:04:31,260
of something instead of just blank out

00:04:26,760 --> 00:04:33,840
just stopping its availability will mark

00:04:31,260 --> 00:04:36,900
it as please don't use this this would

00:04:33,840 --> 00:04:40,080
be a bad idea to use stay away from this

00:04:36,900 --> 00:04:41,550
they there might be just a little bit of

00:04:40,080 --> 00:04:45,210
grass on the other side or it might be a

00:04:41,550 --> 00:04:48,479
cliff without completely removing it

00:04:45,210 --> 00:04:51,630
having said that deprecation also may

00:04:48,479 --> 00:04:54,540
imply that a feature or a design or a

00:04:51,630 --> 00:04:57,900
practice or a function or a library will

00:04:54,540 --> 00:04:59,880
be removed so it's a it's a it's a shot

00:04:57,900 --> 00:05:03,390
across the bow watch out it's coming up

00:04:59,880 --> 00:05:05,010
it might not be available to you later

00:05:03,390 --> 00:05:09,450
on we'll leave it in there for the

00:05:05,010 --> 00:05:11,490
moment but later on it might not be

00:05:09,450 --> 00:05:13,590
available so why don't you fix your code

00:05:11,490 --> 00:05:16,229
now

00:05:13,590 --> 00:05:20,040
some other definitions I do enjoy the

00:05:16,229 --> 00:05:22,800
express strong disapproval of urge

00:05:20,040 --> 00:05:28,320
reasons against or pray for deliverance

00:05:22,800 --> 00:05:31,530
from seems somehow relevant okay enough

00:05:28,320 --> 00:05:34,229
talk let's look at code there's a bit of

00:05:31,530 --> 00:05:38,280
code there'd be a whole bunch of imports

00:05:34,229 --> 00:05:42,060
at the top and this code is fine it runs

00:05:38,280 --> 00:05:43,770
fine I would say that that's not true

00:05:42,060 --> 00:05:46,620
actually it doesn't run fine but when it

00:05:43,770 --> 00:05:49,050
runs it gives me some output at the end

00:05:46,620 --> 00:05:54,470
can anyone see any trouble with this

00:05:49,050 --> 00:05:54,470
code shout out if you can see a problem

00:05:59,090 --> 00:06:03,660
excellent that's actually one of them

00:06:01,200 --> 00:06:06,540
one of the warnings that can be issued

00:06:03,660 --> 00:06:09,750
if does get not closed because I'm

00:06:06,540 --> 00:06:11,610
rather poorly using the not using the

00:06:09,750 --> 00:06:14,460
context manager and just doing a plain

00:06:11,610 --> 00:06:16,530
old open and I forgot to close it and

00:06:14,460 --> 00:06:19,200
did you notice that I'm reusing the name

00:06:16,530 --> 00:06:21,240
on the the weather statement therefore

00:06:19,200 --> 00:06:23,730
that will actually come so close but

00:06:21,240 --> 00:06:29,660
actually throws a resources resource

00:06:23,730 --> 00:06:34,020
warning backslash W I'm on Windows

00:06:29,660 --> 00:06:40,230
so backslash two years what tab

00:06:34,020 --> 00:06:42,170
backslash n is newline backslash W yeah

00:06:40,230 --> 00:06:46,020
I don't know either

00:06:42,170 --> 00:06:47,700
backslash oh yeah well it's actually

00:06:46,020 --> 00:06:50,850
nothing which means that you can

00:06:47,700 --> 00:06:55,040
actually get away with it really bad

00:06:50,850 --> 00:06:57,570
practice but it's actually a deprecated

00:06:55,040 --> 00:07:00,660
characteristic because sometime in the

00:06:57,570 --> 00:07:02,790
future that will be disallowed and this

00:07:00,660 --> 00:07:05,640
code sometime in the future will stop

00:07:02,790 --> 00:07:07,920
working fractions GCD got thrown out of

00:07:05,640 --> 00:07:10,830
fractions that should now be in is in

00:07:07,920 --> 00:07:12,720
math you should stop using fractions GCD

00:07:10,830 --> 00:07:15,650
because it will be taken out at some

00:07:12,720 --> 00:07:18,960
stage I don't know when sooner or later

00:07:15,650 --> 00:07:22,080
the buffering argument to be said to

00:07:18,960 --> 00:07:23,670
file doesn't do anything might have used

00:07:22,080 --> 00:07:27,180
to but if you think it's you doing

00:07:23,670 --> 00:07:30,210
something it's not the one bit which I

00:07:27,180 --> 00:07:36,210
really do like is the DBM open which

00:07:30,210 --> 00:07:38,190
default open mode is read-only so when I

00:07:36,210 --> 00:07:41,010
said this works fine that's actually not

00:07:38,190 --> 00:07:43,650
true at all it doesn't work fine because

00:07:41,010 --> 00:07:47,190
that DBM key won't be written and the

00:07:43,650 --> 00:07:49,920
value won't be written so warnings you

00:07:47,190 --> 00:07:51,390
want to know about them both for things

00:07:49,920 --> 00:07:53,460
that could actually be a real problem at

00:07:51,390 --> 00:07:58,110
the moment and for things that might

00:07:53,460 --> 00:07:59,970
become a problem that later on that

00:07:58,110 --> 00:08:00,330
produces the output to the screen at the

00:07:59,970 --> 00:08:05,629
bottom

00:08:00,330 --> 00:08:05,629
there if I turn warnings on I get that

00:08:05,810 --> 00:08:10,469
telling me all the sorts of things that

00:08:07,919 --> 00:08:14,400
I need to know about the invalid escapes

00:08:10,469 --> 00:08:16,020
sequence the encode string is a terrible

00:08:14,400 --> 00:08:17,669
misnomer it should never been called

00:08:16,020 --> 00:08:19,259
encode string it's your being code bytes

00:08:17,669 --> 00:08:23,370
because it takes bytes it doesn't take a

00:08:19,259 --> 00:08:24,210
string etc let me give you another

00:08:23,370 --> 00:08:28,860
example

00:08:24,210 --> 00:08:30,719
give us code pete anders whoa i think so

00:08:28,860 --> 00:08:33,240
there are some dramas though with pandas

00:08:30,719 --> 00:08:37,110
anyone here use pandas it's great

00:08:33,240 --> 00:08:38,729
library there's a very simple one

00:08:37,110 --> 00:08:40,229
creating a dictionary build a series

00:08:38,729 --> 00:08:45,390
from the dictionary and when I run that

00:08:40,229 --> 00:08:54,990
I get that I turn on warnings and I get

00:08:45,390 --> 00:08:56,700
that and that and that and that now I

00:08:54,990 --> 00:08:59,070
could say these are not my problem well

00:08:56,700 --> 00:09:01,589
and that's actually true all of those

00:08:59,070 --> 00:09:03,779
warnings were in fact issued from pandas

00:09:01,589 --> 00:09:07,110
and this was I think might have actually

00:09:03,779 --> 00:09:09,029
been the latest version of pandas it's

00:09:07,110 --> 00:09:11,070
not my problem though it's the pandas

00:09:09,029 --> 00:09:13,199
people's problem but it becomes my

00:09:11,070 --> 00:09:16,279
problem if there's things inside there

00:09:13,199 --> 00:09:22,170
that stop working I'm in trouble

00:09:16,279 --> 00:09:24,540
so that's a few pages of there so let's

00:09:22,170 --> 00:09:27,240
learn a bit about the warnings the the

00:09:24,540 --> 00:09:29,640
the categories of warning my broad

00:09:27,240 --> 00:09:32,670
coverage will be covering deprecation

00:09:29,640 --> 00:09:35,610
warnings things that will be thrown out

00:09:32,670 --> 00:09:37,709
later may be thrown out loader bites are

00:09:35,610 --> 00:09:39,000
a particular issue they're handled

00:09:37,709 --> 00:09:41,910
differently they still come under the

00:09:39,000 --> 00:09:45,060
category of warnings puttan 3k we'll

00:09:41,910 --> 00:09:46,949
look at moving to pattern 3 just

00:09:45,060 --> 00:09:48,829
checking who's running on python 2 is a

00:09:46,949 --> 00:09:53,040
normal version that you're running

00:09:48,829 --> 00:09:56,399
awesome oh not so awesome I won't be

00:09:53,040 --> 00:09:58,470
harsh on you but there are some things

00:09:56,399 --> 00:10:00,149
to know about that I'll cover and use

00:09:58,470 --> 00:10:02,190
the warnings for those creating your own

00:10:00,149 --> 00:10:04,019
libraries where you need to say or

00:10:02,190 --> 00:10:06,110
please stop using this function because

00:10:04,019 --> 00:10:11,300
I've got a better one that's over there

00:10:06,110 --> 00:10:14,040
these are the actual warning classes

00:10:11,300 --> 00:10:16,680
warning is the base class and then there

00:10:14,040 --> 00:10:19,680
all of these other warning classes and

00:10:16,680 --> 00:10:21,480
PS I do have these slides up on my

00:10:19,680 --> 00:10:26,220
website I'll give you the URL at the end

00:10:21,480 --> 00:10:28,320
if you want to copy those so how do I

00:10:26,220 --> 00:10:29,759
turn on warnings well there's a few

00:10:28,320 --> 00:10:31,980
options I'll give you three the first

00:10:29,759 --> 00:10:35,639
way is via command line switches easy

00:10:31,980 --> 00:10:37,949
with - W and then the action the actions

00:10:35,639 --> 00:10:39,959
can include always if you want to really

00:10:37,949 --> 00:10:43,769
check your code make sure you're all

00:10:39,959 --> 00:10:45,779
good Chuck - W always yay now we're

00:10:43,769 --> 00:10:47,970
going to get all of the warnings from my

00:10:45,779 --> 00:10:50,850
libraries from other libraries from my

00:10:47,970 --> 00:10:53,430
code everywhere I'll get them all that

00:10:50,850 --> 00:10:58,560
would be a good thing if you get that

00:10:53,430 --> 00:11:00,720
clean then you can commit or if you

00:10:58,560 --> 00:11:02,430
really want to be extra careful make

00:11:00,720 --> 00:11:04,430
them errors warnings will then become

00:11:02,430 --> 00:11:09,660
exceptions and your program will crash

00:11:04,430 --> 00:11:11,519
that will create better code oh sorry I

00:11:09,660 --> 00:11:17,339
didn't mean to put that in the the notes

00:11:11,519 --> 00:11:20,670
there if you needed to you can ignore

00:11:17,339 --> 00:11:22,529
warnings default is arguably the best

00:11:20,670 --> 00:11:25,079
option for most of the times that you

00:11:22,529 --> 00:11:26,910
want warnings this will print the

00:11:25,079 --> 00:11:30,329
warning the first time that it comes

00:11:26,910 --> 00:11:32,130
across that warning for each location so

00:11:30,329 --> 00:11:33,690
if the same warning is emitted from

00:11:32,130 --> 00:11:35,760
different places in your code you will

00:11:33,690 --> 00:11:37,889
get both of those but if this function

00:11:35,760 --> 00:11:39,420
gets called a hundred times and there's

00:11:37,889 --> 00:11:42,120
a warning thrown out of there you'll

00:11:39,420 --> 00:11:46,290
only get at once I'll argue that that's

00:11:42,120 --> 00:11:48,089
your best option once you get it once

00:11:46,290 --> 00:11:50,370
regardless of where it's limited from

00:11:48,089 --> 00:11:53,850
module the first time from that module

00:11:50,370 --> 00:11:57,480
and these can be abbreviated so WD is

00:11:53,850 --> 00:11:59,010
the same as w default that's one way and

00:11:57,480 --> 00:12:02,550
that will be on your command line launch

00:11:59,010 --> 00:12:08,010
option two sorry before I get to that I

00:12:02,550 --> 00:12:09,720
need to tell you about default now I

00:12:08,010 --> 00:12:11,509
like the sense of default and one might

00:12:09,720 --> 00:12:16,079
think that default would be the default

00:12:11,509 --> 00:12:18,000
but in fact no pates little trick

00:12:16,079 --> 00:12:22,079
default and doesn't actually mean

00:12:18,000 --> 00:12:24,540
default the default is not default if

00:12:22,079 --> 00:12:26,649
you don't turn on any warnings then you

00:12:24,540 --> 00:12:28,779
kind of get default except

00:12:26,649 --> 00:12:30,220
it's the deprecation one independent

00:12:28,779 --> 00:12:32,259
irrigation import warnings bytes

00:12:30,220 --> 00:12:35,589
warnings and resource warnings and not

00:12:32,259 --> 00:12:37,569
are all ignored there's other ones that

00:12:35,589 --> 00:12:39,069
won't be ignored but that's a good list

00:12:37,569 --> 00:12:41,769
of things that I would like to know

00:12:39,069 --> 00:12:45,610
about asterisk this changes in different

00:12:41,769 --> 00:12:47,649
versions of Python so the standard

00:12:45,610 --> 00:12:51,879
setting that I'm not going to call the

00:12:47,649 --> 00:12:56,529
default is not default therefore turn on

00:12:51,879 --> 00:13:00,149
default everything else is emitted which

00:12:56,529 --> 00:13:03,399
means gets generated throws it comes out

00:13:00,149 --> 00:13:05,170
option - Oh

00:13:03,399 --> 00:13:08,470
so yeah the default is not same as W

00:13:05,170 --> 00:13:09,939
default option two is going use it

00:13:08,470 --> 00:13:12,160
environmental variables better because

00:13:09,939 --> 00:13:14,920
then everything will throw them with the

00:13:12,160 --> 00:13:17,290
Python warnings equals either set it on

00:13:14,920 --> 00:13:21,839
Windows like Python warnings equals a

00:13:17,290 --> 00:13:21,839
for always or python warnings equals a

00:13:22,019 --> 00:13:27,730
maybe just set that let's just go and do

00:13:24,550 --> 00:13:29,860
that or you can do it in code so if your

00:13:27,730 --> 00:13:32,079
program needs to set and play with the

00:13:29,860 --> 00:13:34,629
warnings you can control it in code

00:13:32,079 --> 00:13:36,970
import the warnings module then you get

00:13:34,629 --> 00:13:40,170
warnings dot simple filter which is the

00:13:36,970 --> 00:13:43,179
simplest with various different options

00:13:40,170 --> 00:13:46,269
filter the warnings I'll give you some

00:13:43,179 --> 00:13:49,089
examples of these reset the warnings to

00:13:46,269 --> 00:13:51,279
throw the settings away and you can

00:13:49,089 --> 00:13:52,929
check the warnings with either sister

00:13:51,279 --> 00:13:56,879
warned options which tells you the

00:13:52,929 --> 00:13:58,959
command line - double use or the

00:13:56,879 --> 00:14:02,019
noticeably missing from the

00:13:58,959 --> 00:14:04,660
documentation I should put that in the

00:14:02,019 --> 00:14:06,879
mornings dot filters which can be used

00:14:04,660 --> 00:14:10,839
to access a nice list of what the

00:14:06,879 --> 00:14:13,089
filters have been set as there's also a

00:14:10,839 --> 00:14:15,699
nice context manager so use catch

00:14:13,089 --> 00:14:18,899
warnings if you want to turn them on for

00:14:15,699 --> 00:14:21,999
a little block and then turn them off

00:14:18,899 --> 00:14:23,769
the standard idiom this is a nice idiom

00:14:21,999 --> 00:14:26,410
there for near the top of your program

00:14:23,769 --> 00:14:30,189
if warning options haven't been set

00:14:26,410 --> 00:14:33,790
let's make it default which is not the

00:14:30,189 --> 00:14:37,529
default but therefore if you set it to

00:14:33,790 --> 00:14:37,529
warnings all that will stick

00:14:39,889 --> 00:14:44,959
this is a little cluttered but give us

00:14:42,410 --> 00:14:48,649
code peep filtered the warnings I'm

00:14:44,959 --> 00:14:51,500
going to ignore every message that hair

00:14:48,649 --> 00:14:53,870
matches the regex star starting and

00:14:51,500 --> 00:14:56,870
there's an implied dot star only and so

00:14:53,870 --> 00:14:58,910
that will therefore ignore the program

00:14:56,870 --> 00:15:00,920
starting warning for many of you your

00:14:58,910 --> 00:15:04,189
program should start with warning

00:15:00,920 --> 00:15:07,250
program starting sorry that was a bit

00:15:04,189 --> 00:15:10,129
man I didn't you can filter warnings

00:15:07,250 --> 00:15:12,379
based on the category turnoff specific

00:15:10,129 --> 00:15:16,279
categories reset and there's an example

00:15:12,379 --> 00:15:18,589
of using the width to play with the

00:15:16,279 --> 00:15:23,019
setting programmatically and then have

00:15:18,589 --> 00:15:26,480
it reset after that the warnings filters

00:15:23,019 --> 00:15:28,569
both with both over from the command

00:15:26,480 --> 00:15:31,069
line or environmental variables or even

00:15:28,569 --> 00:15:34,189
broadly speaking within the the code

00:15:31,069 --> 00:15:38,089
runs follow this pattern action message

00:15:34,189 --> 00:15:42,620
category module line so I would just

00:15:38,089 --> 00:15:44,019
like cistern everything on always but if

00:15:42,620 --> 00:15:47,019
you want to find a grained control

00:15:44,019 --> 00:15:50,720
here's how you can do it you can set

00:15:47,019 --> 00:15:55,610
ignore warnings that begin with the text

00:15:50,720 --> 00:16:00,490
FN or ignore that warnings that have FM

00:15:55,610 --> 00:16:03,199
in the text or ignore user warnings or

00:16:00,490 --> 00:16:08,059
ignore any warnings that come out from

00:16:03,199 --> 00:16:10,339
any line seven I don't know what's on

00:16:08,059 --> 00:16:12,680
line seven but and that would be in any

00:16:10,339 --> 00:16:15,490
module because I'm not specifying which

00:16:12,680 --> 00:16:15,490
module

00:16:17,899 --> 00:16:21,230
therefore to set them on the command

00:16:19,459 --> 00:16:23,149
line you use space separated - double

00:16:21,230 --> 00:16:25,160
use within environmental variables use

00:16:23,149 --> 00:16:28,759
commas between the bits and if you're

00:16:25,160 --> 00:16:30,889
using the simple filter then by default

00:16:28,759 --> 00:16:33,379
they stack front first and that will

00:16:30,889 --> 00:16:35,360
match first although there is an append

00:16:33,379 --> 00:16:41,959
a calls true that you can set if you

00:16:35,360 --> 00:16:44,899
want them to happen at the end bytes are

00:16:41,959 --> 00:16:48,439
different there are some problems in

00:16:44,899 --> 00:16:51,870
pattern well in all pythons but this one

00:16:48,439 --> 00:16:54,220
is is that okay

00:16:51,870 --> 00:16:59,140
look I just say if you're after best

00:16:54,220 --> 00:17:00,730
practice don't mix strings and bytes for

00:16:59,140 --> 00:17:03,790
keys that that's sort of like just a

00:17:00,730 --> 00:17:06,640
general Pete's tip but that would

00:17:03,790 --> 00:17:08,920
actually be okay turning on or playing

00:17:06,640 --> 00:17:12,100
with the warnings for bites though even

00:17:08,920 --> 00:17:16,780
though they do admit warnings uses

00:17:12,100 --> 00:17:20,470
different switches you got - be to turn

00:17:16,780 --> 00:17:23,709
on warnings about bites or - be be to

00:17:20,470 --> 00:17:26,410
turn on to make those warnings errors

00:17:23,709 --> 00:17:30,460
you probably want that and the - W

00:17:26,410 --> 00:17:32,710
option switches don't turn that on PS

00:17:30,460 --> 00:17:34,480
it's lowercase being not capital B

00:17:32,710 --> 00:17:36,600
capital B is something else if you're

00:17:34,480 --> 00:17:39,190
not aware of it Python is case sensitive

00:17:36,600 --> 00:17:43,930
and the switches are case sensitive beef

00:17:39,190 --> 00:17:48,250
and don't write byte code if I turn that

00:17:43,930 --> 00:17:49,660
on then I'll get a bytes warning fix it

00:17:48,250 --> 00:17:53,230
well I don't know how you're gonna fix

00:17:49,660 --> 00:17:56,770
it it depends what you need to do that

00:17:53,230 --> 00:17:59,530
would encode my string into bytes as

00:17:56,770 --> 00:18:01,540
ASCII whether that's the appropriate

00:17:59,530 --> 00:18:05,140
solution to your problem

00:18:01,540 --> 00:18:08,850
is up to you but greater than less then

00:18:05,140 --> 00:18:08,850
never makes sense and is not allowed

00:18:09,180 --> 00:18:15,280
Python to people

00:18:11,200 --> 00:18:18,340
Pete's tip get on to pattern 3 and I've

00:18:15,280 --> 00:18:21,280
said in order this is really though

00:18:18,340 --> 00:18:25,630
where Python warnings really started so

00:18:21,280 --> 00:18:31,480
if you're on Python to the - 3 option

00:18:25,630 --> 00:18:35,050
turn on turns on the morn pi3k warnings

00:18:31,480 --> 00:18:37,000
the one pi3k warnings though are for

00:18:35,050 --> 00:18:40,780
things that would break once you get to

00:18:37,000 --> 00:18:44,260
Python 3 and can be tested with sis

00:18:40,780 --> 00:18:46,990
pytho warning but that was new in - 6

00:18:44,260 --> 00:18:50,530
available in - 7 but it was removed in

00:18:46,990 --> 00:18:54,820
3.0 and it's not in the six

00:18:50,530 --> 00:18:57,900
compatibility library so that's for the

00:18:54,820 --> 00:18:57,900
Python - people

00:18:59,020 --> 00:19:04,720
different versions of Python handle

00:19:01,720 --> 00:19:08,740
warnings slightly differently so in 2.1

00:19:04,720 --> 00:19:11,980
we got the warnings framework yay 2.7

00:19:08,740 --> 00:19:13,870
and 3.2 deprecation warnings were coming

00:19:11,980 --> 00:19:16,090
out everywhere including in libraries

00:19:13,870 --> 00:19:20,799
that I was calling that I had no chance

00:19:16,090 --> 00:19:24,909
to fix or wasn't able to so deprecation

00:19:20,799 --> 00:19:27,880
warnings were ignored which kind of like

00:19:24,909 --> 00:19:29,169
is like being skiing and they go are too

00:19:27,880 --> 00:19:32,580
many people are running into this

00:19:29,169 --> 00:19:38,440
barrier let's take the barrier away and

00:19:32,580 --> 00:19:42,279
that's that was a problem that was found

00:19:38,440 --> 00:19:44,169
to be needing to be rectified 3.2 also

00:19:42,279 --> 00:19:47,830
go the python warnings environmental

00:19:44,169 --> 00:19:53,169
variable 3.6 we've got some new things

00:19:47,830 --> 00:19:57,460
about resource warnings and 3.7 we got

00:19:53,169 --> 00:19:59,980
pepper 565 now deprecation warnings do

00:19:57,460 --> 00:20:04,480
show interactively if you're in an AI

00:19:59,980 --> 00:20:07,870
park the notebook do put a notebook in

00:20:04,480 --> 00:20:10,539
my main script but they don't show for

00:20:07,870 --> 00:20:15,130
problems that are in that library that I

00:20:10,539 --> 00:20:18,120
don't I can't fix so that's a marvelous

00:20:15,130 --> 00:20:21,250
edition Pete's tip get two three seven

00:20:18,120 --> 00:20:23,470
that solds a lot of these issues it

00:20:21,250 --> 00:20:25,539
doesn't fix the deprecation warnings but

00:20:23,470 --> 00:20:30,669
at least now you'll see them so then you

00:20:25,539 --> 00:20:32,649
can fix them warning control where do

00:20:30,669 --> 00:20:35,770
they go how they formatted creating your

00:20:32,649 --> 00:20:39,340
own warnings where do they go

00:20:35,770 --> 00:20:41,140
standard error therefore you could grab

00:20:39,340 --> 00:20:42,159
them by redirecting standard output

00:20:41,140 --> 00:20:45,640
mm-hm

00:20:42,159 --> 00:20:48,549
that'll work but a much nicer solution

00:20:45,640 --> 00:20:50,950
is in the logging library go and turn

00:20:48,549 --> 00:20:53,169
capture warnings on now they become

00:20:50,950 --> 00:20:57,039
logged into the your log they will

00:20:53,169 --> 00:20:59,520
follow the logging framework perfect I

00:20:57,039 --> 00:21:02,679
saw that there is actually a talk

00:20:59,520 --> 00:21:05,559
tomorrow about logging if you're not

00:21:02,679 --> 00:21:09,250
doing logging you need to do logging or

00:21:05,559 --> 00:21:11,049
you can replace the show warning warning

00:21:09,250 --> 00:21:12,680
stop show warning and that's the

00:21:11,049 --> 00:21:15,830
function that gets

00:21:12,680 --> 00:21:17,540
how they are formatted just below the

00:21:15,830 --> 00:21:20,090
dashed line there that's how a warning

00:21:17,540 --> 00:21:23,900
normally comes out but I can replace it

00:21:20,090 --> 00:21:26,930
with my own my warning and set the full

00:21:23,900 --> 00:21:29,180
mount warning rebind the format warning

00:21:26,930 --> 00:21:31,490
name to my function that gives me

00:21:29,180 --> 00:21:35,020
control over how they're formatted show

00:21:31,490 --> 00:21:39,050
warning would follow the similar pattern

00:21:35,020 --> 00:21:40,550
creating your own warnings if you've got

00:21:39,050 --> 00:21:44,660
code that you want people to stop using

00:21:40,550 --> 00:21:46,820
that you are deprecating or that you're

00:21:44,660 --> 00:21:50,210
going to do something with warnings dot

00:21:46,820 --> 00:21:52,490
warned will throw a user warning don't

00:21:50,210 --> 00:21:56,840
use this would be a deprecation warning

00:21:52,490 --> 00:22:00,050
is being raised there or being emitted

00:21:56,840 --> 00:22:02,750
as a deprecation warning inside a

00:22:00,050 --> 00:22:04,970
function the problem is is that the

00:22:02,750 --> 00:22:07,640
warning message will show you the line

00:22:04,970 --> 00:22:09,470
of code that created the warning but I

00:22:07,640 --> 00:22:14,420
don't care that because I want to know

00:22:09,470 --> 00:22:17,000
who called me and set the stack level to

00:22:14,420 --> 00:22:18,980
not emit this line of code but that line

00:22:17,000 --> 00:22:23,780
of code that called the function that

00:22:18,980 --> 00:22:26,180
you don't want them calling and just as

00:22:23,780 --> 00:22:28,370
a little side tip the morning classes

00:22:26,180 --> 00:22:30,550
are actually built-ins so it's just

00:22:28,370 --> 00:22:34,310
deprecation warning it's not warnings

00:22:30,550 --> 00:22:37,670
deprecation warning that's not a warning

00:22:34,310 --> 00:22:39,190
well a deprecation warning isn't one you

00:22:37,670 --> 00:22:42,350
know what I'm saying

00:22:39,190 --> 00:22:44,120
creating you wanting to warnings level

00:22:42,350 --> 00:22:46,520
two you can create your own class

00:22:44,120 --> 00:22:49,520
inherit from that's fairly

00:22:46,520 --> 00:22:51,680
straightforward highly recommended and

00:22:49,520 --> 00:22:53,750
I'll point out to you the standard when

00:22:51,680 --> 00:22:56,270
to use logging in the standard Python

00:22:53,750 --> 00:22:59,420
documentation tells you when you should

00:22:56,270 --> 00:23:01,070
be using the warnings module versus all

00:22:59,420 --> 00:23:03,800
of the other options broadly speaking

00:23:01,070 --> 00:23:06,560
summary use warning stop warned in your

00:23:03,800 --> 00:23:09,500
library code if the issue is avoidable

00:23:06,560 --> 00:23:15,370
and whoever's calling you needs to be

00:23:09,500 --> 00:23:17,810
fixed the actual capture of earth and

00:23:15,370 --> 00:23:20,630
therefore testing logging and asserts

00:23:17,810 --> 00:23:23,200
how do these all relate I would point

00:23:20,630 --> 00:23:25,350
out those creating test runners shells

00:23:23,200 --> 00:23:27,179
etc need to think careful

00:23:25,350 --> 00:23:30,440
about what they will do with warnings

00:23:27,179 --> 00:23:33,240
that are raised this is actually the

00:23:30,440 --> 00:23:37,080
summary of the things from the logging

00:23:33,240 --> 00:23:40,260
dock display console output if you need

00:23:37,080 --> 00:23:42,419
to do that print reporting on events

00:23:40,260 --> 00:23:45,570
that occurred during normal operation

00:23:42,419 --> 00:23:47,429
that's logging info or debug issuing

00:23:45,570 --> 00:23:49,710
warning regarding a particular runtime

00:23:47,429 --> 00:23:52,890
event warnings not warned if it's

00:23:49,710 --> 00:23:54,809
avoidable logging dot warn Ning

00:23:52,890 --> 00:23:57,419
if there's nothing the client can do

00:23:54,809 --> 00:24:00,390
about it report an error regarding a

00:23:57,419 --> 00:24:02,309
runtime event raise an exception report

00:24:00,390 --> 00:24:04,740
the suppression of an exception with

00:24:02,309 --> 00:24:09,360
logging error exception or critical and

00:24:04,740 --> 00:24:13,010
to report a impossible error that's what

00:24:09,360 --> 00:24:15,630
asserts for this could never happen so

00:24:13,010 --> 00:24:18,840
warnings is not a huge part of that big

00:24:15,630 --> 00:24:23,820
list but it's been too long didn't

00:24:18,840 --> 00:24:25,799
listen I just loved the way that the

00:24:23,820 --> 00:24:32,070
semicolons there too like isn't that

00:24:25,799 --> 00:24:34,049
redundant use WW default turn on

00:24:32,070 --> 00:24:37,850
warnings with python warnings equals

00:24:34,049 --> 00:24:40,320
environmental variable use pattern 37

00:24:37,850 --> 00:24:42,570
lots of those warnings that were being

00:24:40,320 --> 00:24:45,240
emitted almost all of them out of pandas

00:24:42,570 --> 00:24:46,710
were because of backslashes that were in

00:24:45,240 --> 00:24:49,679
regular expressions and they weren't

00:24:46,710 --> 00:24:51,419
rule strings so one of the highest

00:24:49,679 --> 00:24:53,309
priority things you can do is

00:24:51,419 --> 00:24:55,440
particularly for your regex

00:24:53,309 --> 00:24:58,289
always make them raw strings that's a

00:24:55,440 --> 00:24:59,880
general best practice anyway always use

00:24:58,289 --> 00:25:01,770
royal strings for regex you'll get into

00:24:59,880 --> 00:25:04,140
all sorts of drums if you don't but

00:25:01,770 --> 00:25:07,200
it'll cut down the number of warnings

00:25:04,140 --> 00:25:09,590
that your code is emitting once you've

00:25:07,200 --> 00:25:12,539
turned on the warnings with default and

00:25:09,590 --> 00:25:15,000
use warnings don't warn of a message

00:25:12,539 --> 00:25:18,000
when you'll when you're writing library

00:25:15,000 --> 00:25:24,679
code functions and the caller needs to

00:25:18,000 --> 00:25:24,679
be corrected thank you

00:25:27,259 --> 00:25:32,970
thank you thanks to my wife Cody Quentin

00:25:30,869 --> 00:25:34,979
buddy the Python community the parking

00:25:32,970 --> 00:25:38,429
community and particularly we want to

00:25:34,979 --> 00:25:42,320
call out Nick for Python for pet 565

00:25:38,429 --> 00:25:45,239
that really introduced the omitting of

00:25:42,320 --> 00:25:46,769
deprecation warnings from main lines and

00:25:45,239 --> 00:25:49,729
from the interactive shell because it's

00:25:46,769 --> 00:25:52,999
a really important thing

00:25:49,729 --> 00:25:52,999
question time

00:25:53,119 --> 00:25:56,690
any questions

00:25:58,369 --> 00:26:03,749
so you deprecated a function by using

00:26:01,229 --> 00:26:07,499
that stick level equals two can you also

00:26:03,749 --> 00:26:13,950
use it as a decorator oh I haven't seen

00:26:07,499 --> 00:26:18,599
warnings being used as decorators yeah

00:26:13,950 --> 00:26:23,369
yeah yeah probably not

00:26:18,599 --> 00:26:25,679
I didn't sort of cover in detail why

00:26:23,369 --> 00:26:27,869
something would be dick deprecated you

00:26:25,679 --> 00:26:31,169
don't deprecated things because they've

00:26:27,869 --> 00:26:32,999
got a bug you don't deprecated you

00:26:31,169 --> 00:26:34,710
deprecated things because other people

00:26:32,999 --> 00:26:36,090
are already using this function and you

00:26:34,710 --> 00:26:38,700
want to change its name it's an

00:26:36,090 --> 00:26:41,700
unhelpful name or there's something

00:26:38,700 --> 00:26:44,639
wrong with the argument list like orgy

00:26:41,700 --> 00:26:46,859
we we need to know this and we can't put

00:26:44,639 --> 00:26:50,549
it in that but people should stop using

00:26:46,859 --> 00:26:52,559
this function because it's not going to

00:26:50,549 --> 00:26:55,200
do the right thing in every scenario

00:26:52,559 --> 00:26:57,840
that's sort of the rationale behind when

00:26:55,200 --> 00:27:00,599
you would deprecated something and as a

00:26:57,840 --> 00:27:02,659
side note I can think Java forum being

00:27:00,599 --> 00:27:08,070
very extensive in the deprecation

00:27:02,659 --> 00:27:27,179
mechanism any further questions are the

00:27:08,070 --> 00:27:29,970
questions yeah yes so there is an

00:27:27,179 --> 00:27:34,889
important line sorry young let me repeat

00:27:29,970 --> 00:27:39,899
that how often should um warnings be

00:27:34,889 --> 00:27:41,099
used for said again to anticipate that

00:27:39,899 --> 00:27:44,999
was the word I was trying to remember

00:27:41,099 --> 00:27:48,269
yet to anticipate that this code

00:27:44,999 --> 00:27:51,179
shouldn't be used warnings deprecation

00:27:48,269 --> 00:27:52,710
warnings are aimed at developers so

00:27:51,179 --> 00:27:55,409
they're aimed at the programmers that

00:27:52,710 --> 00:27:57,119
are using the library not the client

00:27:55,409 --> 00:27:59,940
that's using my application that's using

00:27:57,119 --> 00:28:02,099
the library so deprecation Aryans are

00:27:59,940 --> 00:28:06,869
really a deprecation warnings are really

00:28:02,099 --> 00:28:09,299
my issue because that's telling me that

00:28:06,869 --> 00:28:11,399
something's stopped being used over

00:28:09,299 --> 00:28:15,989
there a good example would be fractions

00:28:11,399 --> 00:28:19,710
GCD it's been in the process of being

00:28:15,989 --> 00:28:22,349
replaced with math GCD the client code

00:28:19,710 --> 00:28:25,200
should be fixed up but it hasn't been

00:28:22,349 --> 00:28:27,419
done yet at some point it will be taken

00:28:25,200 --> 00:28:30,479
out of there so it's a bit like a it's a

00:28:27,419 --> 00:28:33,289
it's a heads up this is going to go

00:28:30,479 --> 00:28:36,419
wrong it will stop working at some stage

00:28:33,289 --> 00:28:39,049
I don't know when one of the other

00:28:36,419 --> 00:28:44,700
categories there is pending deprecation

00:28:39,049 --> 00:28:46,950
which is even further back of those

00:28:44,700 --> 00:28:50,549
pandas warnings though are not really my

00:28:46,950 --> 00:28:52,529
problem because they there's nothing

00:28:50,549 --> 00:28:55,619
that I'm doing wrong in that four pages

00:28:52,529 --> 00:28:57,989
of pandas errors of pandas warnings they

00:28:55,619 --> 00:28:59,759
were there or emitting from the pandas

00:28:57,989 --> 00:29:03,479
library that the pandas library is doing

00:28:59,759 --> 00:29:05,609
something incorrect backslash W at some

00:29:03,479 --> 00:29:10,379
point could actually become a regex

00:29:05,609 --> 00:29:11,809
pattern for something any other

00:29:10,379 --> 00:29:16,230
questions

00:29:11,809 --> 00:29:18,779
yeah thanks

00:29:16,230 --> 00:29:21,120
so say I've written some terrible code

00:29:18,779 --> 00:29:22,769
of my own and I want to get rid of it

00:29:21,120 --> 00:29:23,970
but I haven't written an alternative yet

00:29:22,769 --> 00:29:26,190
would that be a good situation for

00:29:23,970 --> 00:29:27,210
appending deprecation yeah yeah yeah I

00:29:26,190 --> 00:29:29,460
like it yep

00:29:27,210 --> 00:29:32,010
you know that you're going to have to

00:29:29,460 --> 00:29:33,899
you haven't even got a roadmap of my

00:29:32,010 --> 00:29:39,149
other thing to suggest though is stop

00:29:33,899 --> 00:29:40,289
writing bad code that would be my that

00:29:39,149 --> 00:29:43,649
would be the first thing that I would

00:29:40,289 --> 00:29:48,750
say didn't mean that to sound is an

00:29:43,649 --> 00:29:51,230
insult but you started this and in fact

00:29:48,750 --> 00:29:54,360
you even freely admitted that you are so

00:29:51,230 --> 00:29:56,940
or maybe it was just a postulation yes

00:29:54,360 --> 00:30:00,149
for somebody that did write code that

00:29:56,940 --> 00:30:01,950
you do realize that there is some thing

00:30:00,149 --> 00:30:04,169
that's wrong with it I'm not talking

00:30:01,950 --> 00:30:05,669
about bugs there bugs are just things

00:30:04,169 --> 00:30:08,880
that we'll have to fix but there's a

00:30:05,669 --> 00:30:11,220
then the encode string is a great

00:30:08,880 --> 00:30:13,620
example of a name that's misleading and

00:30:11,220 --> 00:30:15,389
needs to be replaced because it doesn't

00:30:13,620 --> 00:30:17,250
encode strings that encodes bytes you

00:30:15,389 --> 00:30:18,510
must give it the bytes as an argument if

00:30:17,250 --> 00:30:21,330
you don't give it bites you'll get a

00:30:18,510 --> 00:30:24,720
wrong argument time so that's a good

00:30:21,330 --> 00:30:26,340
example of just the names wrong even if

00:30:24,720 --> 00:30:27,450
I hadn't written the encode bytes

00:30:26,340 --> 00:30:30,210
function yet

00:30:27,450 --> 00:30:31,710
I would know that I have to and that

00:30:30,210 --> 00:30:32,970
I'll probably go through and find

00:30:31,710 --> 00:30:35,580
there's lots of other places where I

00:30:32,970 --> 00:30:37,590
used a similarly misleading name

00:30:35,580 --> 00:30:39,690
I can't just delete the function because

00:30:37,590 --> 00:30:42,389
other people are already using it but I

00:30:39,690 --> 00:30:46,230
want them to update to use the new one

00:30:42,389 --> 00:30:47,970
or that one will be coming okay well it

00:30:46,230 --> 00:30:49,710
is now time for lunch so can I get

00:30:47,970 --> 00:30:55,460
another round of applause for Peter

00:30:49,710 --> 00:30:57,900
while I give him this mug thank you

00:30:55,460 --> 00:31:01,770
I'm hanging around for a bit longer

00:30:57,900 --> 00:31:04,100
or if you've got other questions having

00:31:01,770 --> 00:31:04,100

YouTube URL: https://www.youtube.com/watch?v=Rm4t_5uVqTU


