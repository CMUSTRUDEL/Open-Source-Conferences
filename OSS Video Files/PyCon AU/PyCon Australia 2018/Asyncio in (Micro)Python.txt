Title: Asyncio in (Micro)Python
Publication date: 2018-08-24
Playlist: PyCon Australia 2018
Description: 
	Matt Trentini

https://2018.pycon-au.org/talks/45338-asyncio-in-micropython/

Asyncio is cool in Python. It's super cool in MicroPython!

Asyncio provides a way to achieve concurrency in a relatively simplistic fashion. However, first-time users still struggle with the concepts so let's sort them out! Then we'll see why it's especially useful in an embedded environment.

Python, PyCon, PyConAU, australia, programming, sydney

This video is licensed under CC BY 3.0 AU ‹https://creativecommons.org/licenses/by/3.0/au/›.

PyCon Australia (“PyCon AU”) is the national conference for the Python Programming Community, bringing together professional, student and enthusiast developers with a love for developing with Python.

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 24 - 28 2018.

Python, PyCon, PyConAU
Captions: 
	00:00:00,199 --> 00:00:03,990
so next up we have Matt whose

00:00:02,610 --> 00:00:05,940
presentation is all you looking quite

00:00:03,990 --> 00:00:07,859
excellent from the setup we've had so

00:00:05,940 --> 00:00:10,710
I'm expecting good things here so to you

00:00:07,859 --> 00:00:16,080
Matt thank you very much thank you this

00:00:10,710 --> 00:00:17,699
is thanks Ram this is my first Pike on

00:00:16,080 --> 00:00:21,000
and which I'm really excited to be

00:00:17,699 --> 00:00:22,500
speaking at and when they were

00:00:21,000 --> 00:00:25,350
organizing the schedule they said yeah

00:00:22,500 --> 00:00:27,090
you can talk about Python like a Python

00:00:25,350 --> 00:00:31,160
async yeah great I'm looking forward to

00:00:27,090 --> 00:00:34,110
it I don't afford Damien and I was like

00:00:31,160 --> 00:00:35,070
let's it's here we go home so for today

00:00:34,110 --> 00:00:36,809
I'd like to redefine the word

00:00:35,070 --> 00:00:38,399
intimidation as being the feeling of

00:00:36,809 --> 00:00:40,500
unease cause when you have to follow up

00:00:38,399 --> 00:00:43,230
the creator of the language this you've

00:00:40,500 --> 00:00:45,780
got to talk about so that's been quite

00:00:43,230 --> 00:00:46,170
exciting I said by way of explanation of

00:00:45,780 --> 00:00:47,789
Who I am

00:00:46,170 --> 00:00:48,750
I'm a software engineer of nearly 20

00:00:47,789 --> 00:00:52,110
years experience so I'm feeling quite

00:00:48,750 --> 00:00:53,820
old when I say that but I am I have

00:00:52,110 --> 00:00:56,129
played around with all aspects of

00:00:53,820 --> 00:00:58,559
software so everything from assembly on

00:00:56,129 --> 00:01:01,199
small little devices to web development

00:00:58,559 --> 00:01:02,100
up at the other end but I've got a

00:01:01,199 --> 00:01:03,690
little bit of electronics in my

00:01:02,100 --> 00:01:05,549
background as well so I tend to work

00:01:03,690 --> 00:01:09,119
with his projects that need firmware and

00:01:05,549 --> 00:01:10,409
need some sort of embedded component and

00:01:09,119 --> 00:01:12,659
I guess that had gotten quite

00:01:10,409 --> 00:01:14,189
frustrating to me over the years it sort

00:01:12,659 --> 00:01:15,960
of had been I felt have been sort of

00:01:14,189 --> 00:01:18,860
stagnant for some time sort of using

00:01:15,960 --> 00:01:20,759
these C compilers which blessed by your

00:01:18,860 --> 00:01:23,250
microcontroller vendor they tend to be

00:01:20,759 --> 00:01:25,229
terrible it's a slow loop where you've

00:01:23,250 --> 00:01:26,700
got to compile build and get under the

00:01:25,229 --> 00:01:29,070
device find it doesn't work and repeat

00:01:26,700 --> 00:01:31,740
and so I've been looking for

00:01:29,070 --> 00:01:33,450
alternatives for some time because it

00:01:31,740 --> 00:01:33,720
just it felt like we could do a lot

00:01:33,450 --> 00:01:36,150
better

00:01:33,720 --> 00:01:38,280
I tried lure and I tried JavaScript both

00:01:36,150 --> 00:01:39,869
of which showed some promise but when I

00:01:38,280 --> 00:01:42,509
came across micro path and I was so

00:01:39,869 --> 00:01:43,860
close all in for me this is the way

00:01:42,509 --> 00:01:45,479
forward in terms of embedded development

00:01:43,860 --> 00:01:48,270
and I'm trying to push in that

00:01:45,479 --> 00:01:49,290
directions as much as I can and so today

00:01:48,270 --> 00:01:52,020
I want to talk about one of the

00:01:49,290 --> 00:01:54,470
languages features which is concurrency

00:01:52,020 --> 00:01:57,570
or to support concurrency co-routines

00:01:54,470 --> 00:02:01,009
which for me being able to run that in a

00:01:57,570 --> 00:02:01,009
living bed advice is just fantastic

00:02:01,920 --> 00:02:07,060
we're gonna start with a bit of theory

00:02:03,760 --> 00:02:08,979
what curry teens are how they work in

00:02:07,060 --> 00:02:10,750
Python will move into how they work in

00:02:08,979 --> 00:02:12,610
Myka Python and what differences there

00:02:10,750 --> 00:02:15,700
are there and I've got a little bit of

00:02:12,610 --> 00:02:17,440
hardware here that if if we pray to the

00:02:15,700 --> 00:02:20,290
demo gods might actually workers here we

00:02:17,440 --> 00:02:22,650
go as quick knight in the title of use

00:02:20,290 --> 00:02:24,550
the word async io which is not

00:02:22,650 --> 00:02:26,680
technically correct what I'm really

00:02:24,550 --> 00:02:29,590
talking about today is co-routines the

00:02:26,680 --> 00:02:30,850
ability to run things concurrently it's

00:02:29,590 --> 00:02:34,180
a small but important distinction

00:02:30,850 --> 00:02:35,530
considering we're at a software talk you

00:02:34,180 --> 00:02:37,090
didn't have the same ring I think async

00:02:35,530 --> 00:02:40,210
I was using the changeably and it sounds

00:02:37,090 --> 00:02:42,430
better right so I said we're going to

00:02:40,210 --> 00:02:45,460
start with some theory that was a

00:02:42,430 --> 00:02:48,130
blatant lie I'm gonna go straight into

00:02:45,460 --> 00:02:50,680
using Jupiter if I couldn't find what

00:02:48,130 --> 00:02:52,420
I've sorted and I've got this little

00:02:50,680 --> 00:03:06,280
scrolling little display here hopefully

00:02:52,420 --> 00:03:13,270
this will be visible in a different

00:03:06,280 --> 00:03:16,180
number okay hi good more or less

00:03:13,270 --> 00:03:18,160
okay so you look at some very simple

00:03:16,180 --> 00:03:22,209
method to scroll something on this

00:03:18,160 --> 00:03:24,730
display it's very simple method welcome

00:03:22,209 --> 00:03:26,080
to by Cano you I think cool very

00:03:24,730 --> 00:03:28,810
difficult to see over the webcam sorry

00:03:26,080 --> 00:03:29,920
but the codes pretty straightforward we

00:03:28,810 --> 00:03:31,959
don't really need to go in the details

00:03:29,920 --> 00:03:33,670
but this is a blocking function we're

00:03:31,959 --> 00:03:36,430
basically just taking a blob of text and

00:03:33,670 --> 00:03:37,750
we're shifting it along until it falls

00:03:36,430 --> 00:03:42,430
off the display so we're just changing

00:03:37,750 --> 00:03:44,310
the the X alignment I would like to show

00:03:42,430 --> 00:03:47,860
is an asynchronous equivalent to that

00:03:44,310 --> 00:03:50,080
and as an example of how it's quite

00:03:47,860 --> 00:03:52,660
straightforward to change things form a

00:03:50,080 --> 00:03:54,010
synchronous method alright so you'll

00:03:52,660 --> 00:03:56,920
notice one of the differences is this

00:03:54,010 --> 00:03:59,769
word async we've put in a slightly

00:03:56,920 --> 00:04:01,510
different library to do some sleeping

00:03:59,769 --> 00:04:03,600
which I'll talk about in a sec and we've

00:04:01,510 --> 00:04:07,209
got the word keyword or weight here

00:04:03,600 --> 00:04:09,040
otherwise the code here is identical and

00:04:07,209 --> 00:04:11,700
that's a key thing a lot of the async

00:04:09,040 --> 00:04:13,930
stuff that we've got in Python today

00:04:11,700 --> 00:04:15,230
there's a lot of close resemblance to

00:04:13,930 --> 00:04:17,690
the synchronous equivalents which will

00:04:15,230 --> 00:04:19,690
familiar with the only other bid is this

00:04:17,690 --> 00:04:21,739
magical event loop stuff at the bottom

00:04:19,690 --> 00:04:23,419
and we'll give into some of the detail

00:04:21,739 --> 00:04:27,710
that before that we should see that this

00:04:23,419 --> 00:04:29,030
performs is the same way and by way of

00:04:27,710 --> 00:04:31,970
quick explanation the event loop is

00:04:29,030 --> 00:04:34,400
required for us to hook in our Co

00:04:31,970 --> 00:04:36,500
routine to the system and when we want

00:04:34,400 --> 00:04:38,090
to relinquish control I'll talk about

00:04:36,500 --> 00:04:39,500
this in a sec I want to relinquish

00:04:38,090 --> 00:04:41,780
control other things could come in and

00:04:39,500 --> 00:04:44,090
do stuff during that period where we are

00:04:41,780 --> 00:04:46,070
wise blocking okay nice thing about this

00:04:44,090 --> 00:04:50,600
though is that it's very easy to sort of

00:04:46,070 --> 00:04:52,310
convert that code okay so I mentioned

00:04:50,600 --> 00:04:54,260
the word curly things a few times what

00:04:52,310 --> 00:04:56,630
are they there are techniques to provide

00:04:54,260 --> 00:04:58,580
concurrency now that's where we're

00:04:56,630 --> 00:05:00,380
providing this illusion that things are

00:04:58,580 --> 00:05:02,510
happening at the same time even when

00:05:00,380 --> 00:05:05,479
they're not necessarily down at the bit

00:05:02,510 --> 00:05:08,180
level so technically we're talking about

00:05:05,479 --> 00:05:10,310
having yield points to relinquish

00:05:08,180 --> 00:05:12,020
control so with our routines in that

00:05:10,310 --> 00:05:13,789
last one we just saw I decided to go to

00:05:12,020 --> 00:05:16,100
sleep for a little while and that sleep

00:05:13,789 --> 00:05:18,199
process was normally be blocking but I'm

00:05:16,100 --> 00:05:20,120
saying hey go sleep let someone else

00:05:18,199 --> 00:05:24,530
take over and in this case no one was

00:05:20,120 --> 00:05:27,620
but that's the trick the event loop

00:05:24,530 --> 00:05:29,539
schedules all this stuff and also does

00:05:27,620 --> 00:05:31,430
all the long-running operations more in

00:05:29,539 --> 00:05:33,530
a picture in a sec there's a form of

00:05:31,430 --> 00:05:35,479
cooperative multitasking so it's really

00:05:33,530 --> 00:05:36,770
easy to hold the system up so if your

00:05:35,479 --> 00:05:38,389
career team just decides to call a

00:05:36,770 --> 00:05:40,220
blocking function which goes out to town

00:05:38,389 --> 00:05:41,840
for ten seconds no one else can do

00:05:40,220 --> 00:05:43,099
anything else that within that event

00:05:41,840 --> 00:05:45,800
loop so it could be little bit careful

00:05:43,099 --> 00:05:49,190
with that kind of stuff just a note here

00:05:45,800 --> 00:05:50,510
that concurrency is not parallelism care

00:05:49,190 --> 00:05:52,580
routines are fantastic I'm gratefully

00:05:50,510 --> 00:05:54,410
doing some really good performance stuff

00:05:52,580 --> 00:05:58,539
but they won't help you if your CPU

00:05:54,410 --> 00:06:00,380
bound so it's worth bearing that in mind

00:05:58,539 --> 00:06:01,669
the guts what i could' think of any more

00:06:00,380 --> 00:06:04,160
Australian way to say that but the guts

00:06:01,669 --> 00:06:07,729
of this is the co-routines you define

00:06:04,160 --> 00:06:09,620
out here and the event loop after this

00:06:07,729 --> 00:06:10,700
side here is where the magic of the

00:06:09,620 --> 00:06:13,099
event loop happens so for any

00:06:10,700 --> 00:06:15,560
long-running operation what happens is

00:06:13,099 --> 00:06:17,240
the curry team requests a yield points

00:06:15,560 --> 00:06:19,760
and in our case we had asleep but it

00:06:17,240 --> 00:06:21,560
could be a an HTP request or it could be

00:06:19,760 --> 00:06:23,570
a database request something that we

00:06:21,560 --> 00:06:24,620
know is going to take some time and when

00:06:23,570 --> 00:06:26,240
you throw it back to the event weed and

00:06:24,620 --> 00:06:27,469
say hey and then do this thing I'm going

00:06:26,240 --> 00:06:28,960
to give up control can you let me know

00:06:27,469 --> 00:06:30,400
when it's finished

00:06:28,960 --> 00:06:32,410
and that goes into the back end of the

00:06:30,400 --> 00:06:33,610
event loop which we won't cover today

00:06:32,410 --> 00:06:35,650
but it's actually not as magical and

00:06:33,610 --> 00:06:37,900
mystical as you might think

00:06:35,650 --> 00:06:40,120
rigid as an operation to occur and gets

00:06:37,900 --> 00:06:41,740
a callback when it's finished in the

00:06:40,120 --> 00:06:43,900
meantime the curry routine pauses

00:06:41,740 --> 00:06:45,639
operation and sometime later the event

00:06:43,900 --> 00:06:47,500
loop wakes it up when its operation is

00:06:45,639 --> 00:06:49,690
finished and offer continues on its

00:06:47,500 --> 00:06:52,300
merry way those curry teens can co-exist

00:06:49,690 --> 00:06:53,830
so the event loop can determine that oh

00:06:52,300 --> 00:06:56,530
we've got a blocking care routine or

00:06:53,830 --> 00:06:58,810
we'll give it to someone else so in my

00:06:56,530 --> 00:07:01,000
device down here I've got a button on

00:06:58,810 --> 00:07:02,350
the front look at some LEDs it means

00:07:01,000 --> 00:07:04,540
that I can listen to that button while

00:07:02,350 --> 00:07:05,680
I'm talking to the LEDs and I can do

00:07:04,540 --> 00:07:07,120
that at the same time because there's

00:07:05,680 --> 00:07:11,620
plenty of space within our execution

00:07:07,120 --> 00:07:12,820
path so use at this point where so

00:07:11,620 --> 00:07:14,470
friends go hang on a second

00:07:12,820 --> 00:07:16,260
wait what about threads this is this is

00:07:14,470 --> 00:07:18,880
a solve problem we've done this before

00:07:16,260 --> 00:07:21,639
that's kind of true threads a great way

00:07:18,880 --> 00:07:25,180
of getting concurrency as well most

00:07:21,639 --> 00:07:26,710
popular form of concurrency I think they

00:07:25,180 --> 00:07:28,780
provide pre-emptive multitasking which

00:07:26,710 --> 00:07:31,900
means that the OS gives and takes

00:07:28,780 --> 00:07:33,940
controls as it feels needs to to your

00:07:31,900 --> 00:07:36,610
thread but they've run independently ok

00:07:33,940 --> 00:07:39,010
and there's the complexity of threads I

00:07:36,610 --> 00:07:42,250
guess is where you need to synchronize

00:07:39,010 --> 00:07:43,419
them so we've got shared resources or

00:07:42,250 --> 00:07:45,070
you need to synchronize them at certain

00:07:43,419 --> 00:07:47,380
points that becomes very difficult with

00:07:45,070 --> 00:07:48,640
threads they do have the advantage you

00:07:47,380 --> 00:07:52,180
can paralyze them if you've got multi

00:07:48,640 --> 00:07:53,110
cause that's a significant benefit so

00:07:52,180 --> 00:07:54,900
when we use them all the time as I

00:07:53,110 --> 00:07:57,039
mentioned they get complex quickly

00:07:54,900 --> 00:07:59,380
they're heavy they each have their own

00:07:57,039 --> 00:08:01,840
stack whereas in a co-routine system you

00:07:59,380 --> 00:08:04,750
share the stack and I've mentioned here

00:08:01,840 --> 00:08:07,120
heisenberg's so if anyone's worked with

00:08:04,750 --> 00:08:08,860
threaded code before you I'm sure run

00:08:07,120 --> 00:08:10,960
into these problems that you observe

00:08:08,860 --> 00:08:12,100
every so often and then they go away and

00:08:10,960 --> 00:08:16,120
the how do you look at them and how do

00:08:12,100 --> 00:08:17,830
they are to appear so that's a really

00:08:16,120 --> 00:08:22,180
common problem that we face with

00:08:17,830 --> 00:08:23,830
threading code back to kuru teens some

00:08:22,180 --> 00:08:26,789
of the benefits are we've got minimal

00:08:23,830 --> 00:08:32,320
overhead in a really high performance so

00:08:26,789 --> 00:08:33,820
cover that in time one of the other nice

00:08:32,320 --> 00:08:36,339
things is that when we have control when

00:08:33,820 --> 00:08:39,640
the event loop has given our corroding

00:08:36,339 --> 00:08:41,470
control no one can take it away and like

00:08:39,640 --> 00:08:43,240
the osk doesn't get in the way

00:08:41,470 --> 00:08:45,490
which means we don't have to suffer so

00:08:43,240 --> 00:08:47,260
much from difficult locks to shared

00:08:45,490 --> 00:08:48,490
resources there are still some

00:08:47,260 --> 00:08:51,340
synchronization we have to worry about

00:08:48,490 --> 00:08:53,650
what we're dealing with actual shared

00:08:51,340 --> 00:08:55,120
shared resources but for example we

00:08:53,650 --> 00:08:58,060
don't have the mutex problem that you

00:08:55,120 --> 00:08:59,920
might otherwise have in in threads so I

00:08:58,060 --> 00:09:01,950
find it much easier to diagnose problems

00:08:59,920 --> 00:09:03,790
when we're talking in co-routines I

00:09:01,950 --> 00:09:05,020
mentioned before it more closely

00:09:03,790 --> 00:09:08,530
represents synchronous code I think

00:09:05,020 --> 00:09:10,230
that's it's quite easy to prove and it's

00:09:08,530 --> 00:09:13,000
generally a better fit where tasks a

00:09:10,230 --> 00:09:14,470
blocking a lot of the time ok so which

00:09:13,000 --> 00:09:16,420
is quite a lot of tasks if you're

00:09:14,470 --> 00:09:18,040
reading from files really are running

00:09:16,420 --> 00:09:21,570
from databases you're blocking and

00:09:18,040 --> 00:09:21,570
co-routines feeling really nicely yeah

00:09:22,650 --> 00:09:27,580
so in Python we've talked so generically

00:09:25,870 --> 00:09:29,920
about it but the Python model is

00:09:27,580 --> 00:09:32,130
actually very Maps very much under the

00:09:29,920 --> 00:09:33,970
general use case of carotenes

00:09:32,130 --> 00:09:35,350
technically they're built on generators

00:09:33,970 --> 00:09:38,770
and we've got a couple of new keywords

00:09:35,350 --> 00:09:40,840
to decorate our code the event loop and

00:09:38,770 --> 00:09:43,450
that long task handling is delegated to

00:09:40,840 --> 00:09:46,030
the async i/o module but that module is

00:09:43,450 --> 00:09:48,760
actually a component that you could

00:09:46,030 --> 00:09:50,890
extend you can change out it's been

00:09:48,760 --> 00:09:53,310
designed such that it's not a core

00:09:50,890 --> 00:09:56,290
component and we can evolve it over time

00:09:53,310 --> 00:09:58,360
so there's a couple other projects AOH

00:09:56,290 --> 00:10:01,300
TP and qu on trio these are all projects

00:09:58,360 --> 00:10:02,770
that go to some way of improving or at

00:10:01,300 --> 00:10:07,360
least making a little difference to the

00:10:02,770 --> 00:10:09,010
benefits of the async i/o module I'm

00:10:07,360 --> 00:10:11,530
going to briefly touch on the history of

00:10:09,010 --> 00:10:13,270
co-routines because it came to the

00:10:11,530 --> 00:10:15,790
language over a fairly long period of

00:10:13,270 --> 00:10:18,670
time but certainly in the three three

00:10:15,790 --> 00:10:20,410
three four range we've got a lot of the

00:10:18,670 --> 00:10:21,730
features that we still have today but

00:10:20,410 --> 00:10:24,730
they're not quite as nicely packaged

00:10:21,730 --> 00:10:25,960
three five for me is where it gets

00:10:24,730 --> 00:10:27,910
interesting because we get those key

00:10:25,960 --> 00:10:30,820
words before that we're using decorators

00:10:27,910 --> 00:10:33,280
to flag to decorate the functions that

00:10:30,820 --> 00:10:35,560
are asynchronous and overusing the word

00:10:33,280 --> 00:10:37,630
word yield and I think that adds a lot

00:10:35,560 --> 00:10:40,420
of confusion to the the way that was

00:10:37,630 --> 00:10:41,620
implemented certainly if you go looking

00:10:40,420 --> 00:10:43,930
at this it can be a bit of an impediment

00:10:41,620 --> 00:10:46,870
to learning how to use them because a

00:10:43,930 --> 00:10:48,040
lot of the documentation is still like

00:10:46,870 --> 00:10:49,510
if you go look at Stack Overflow you'll

00:10:48,040 --> 00:10:52,000
find stuff which so references

00:10:49,510 --> 00:10:52,780
decorators and so I guess today I'm

00:10:52,000 --> 00:10:55,210
trying to say

00:10:52,780 --> 00:11:00,490
it's Pisan 3-5 syntax or bus rail

00:10:55,210 --> 00:11:03,400
just your shoes acing can I wait that's

00:11:00,490 --> 00:11:04,870
what basically I've said there so I

00:11:03,400 --> 00:11:08,880
think we've already covered most of this

00:11:04,870 --> 00:11:11,290
but just to clarify at this point we use

00:11:08,880 --> 00:11:13,900
an await keyword to say we've got a

00:11:11,290 --> 00:11:14,920
yield point this is in Python space the

00:11:13,900 --> 00:11:16,930
part of the implementation of these

00:11:14,920 --> 00:11:19,810
carotenes the event loop handles all

00:11:16,930 --> 00:11:22,000
that stuff and we resume when the event

00:11:19,810 --> 00:11:24,040
loop comes back later we've got to

00:11:22,000 --> 00:11:30,100
decorate our co-routine with the async

00:11:24,040 --> 00:11:31,750
keyword so thinking of step back why do

00:11:30,100 --> 00:11:34,210
we need this at all right it was it was

00:11:31,750 --> 00:11:37,840
actually performance that sort of push

00:11:34,210 --> 00:11:39,510
for adoption of async Python was seen

00:11:37,840 --> 00:11:41,500
didn't need to be stay relevant

00:11:39,510 --> 00:11:43,390
particularly with the advent of node

00:11:41,500 --> 00:11:47,860
that was doing some really good work

00:11:43,390 --> 00:11:49,270
responding to web requests but also even

00:11:47,860 --> 00:11:51,910
within this the parsing Pina we had

00:11:49,270 --> 00:11:54,220
stack lists and twisted and G event or

00:11:51,910 --> 00:11:55,990
providing ways of getting co-routine

00:11:54,220 --> 00:11:57,610
like features and getting really good

00:11:55,990 --> 00:12:01,180
performance but there being sort of

00:11:57,610 --> 00:12:03,280
incompatible with each other so the path

00:12:01,180 --> 00:12:05,080
of foundation decided to distend us and

00:12:03,280 --> 00:12:07,090
I think this is a key thing keeping

00:12:05,080 --> 00:12:10,690
Python relevant and competitive in this

00:12:07,090 --> 00:12:11,710
growing area so it has come about on the

00:12:10,690 --> 00:12:13,750
outside it looks like it's kind of out

00:12:11,710 --> 00:12:18,220
really quickly but it's still under a

00:12:13,750 --> 00:12:19,180
quite active development it's not all

00:12:18,220 --> 00:12:22,180
rainbows and unicorns

00:12:19,180 --> 00:12:24,310
that's the are you there you'll hear

00:12:22,180 --> 00:12:26,380
people refer to the async virus because

00:12:24,310 --> 00:12:30,130
once you started using async into your

00:12:26,380 --> 00:12:32,020
code you've you've got a there's this

00:12:30,130 --> 00:12:33,760
ripple on right like if you're in a car

00:12:32,020 --> 00:12:35,560
routine and you start blocking all the

00:12:33,760 --> 00:12:37,600
other carotenes stops so all of a sudden

00:12:35,560 --> 00:12:39,940
you need more and more asynchronous

00:12:37,600 --> 00:12:42,130
enabled code so it kind of permeates

00:12:39,940 --> 00:12:44,260
down through your code base that's there

00:12:42,130 --> 00:12:46,150
must a very bad thing but today we've

00:12:44,260 --> 00:12:47,890
only got limited library support and we

00:12:46,150 --> 00:12:49,360
don't have you ever got this massive

00:12:47,890 --> 00:12:51,670
code base of synchronous code that can

00:12:49,360 --> 00:12:52,930
do everything in anything and we're

00:12:51,670 --> 00:12:56,170
still catching up on making all of those

00:12:52,930 --> 00:12:58,390
functions asynchronous so that's going

00:12:56,170 --> 00:13:01,879
to improve over time

00:12:58,390 --> 00:13:04,860
I mentioned doesn't provide parallelism

00:13:01,879 --> 00:13:07,050
syntax changes sure it's hardly using

00:13:04,860 --> 00:13:08,730
the ripple which is a bit annoying but I

00:13:07,050 --> 00:13:09,600
also find that's not such a big problem

00:13:08,730 --> 00:13:11,160
because usually I'll write it

00:13:09,600 --> 00:13:12,449
synchronously and then add my

00:13:11,160 --> 00:13:14,459
decorations to make it work

00:13:12,449 --> 00:13:16,949
asynchronous Lin it usually works pretty

00:13:14,459 --> 00:13:18,180
well documentation still catching up the

00:13:16,949 --> 00:13:21,209
official documentation is actually

00:13:18,180 --> 00:13:23,040
reasonably good but leaving beginners to

00:13:21,209 --> 00:13:24,180
using async is because it's been

00:13:23,040 --> 00:13:27,149
difficult for me and you're choosing

00:13:24,180 --> 00:13:28,889
it's my team where I work it's also an

00:13:27,149 --> 00:13:30,120
area of really active development I

00:13:28,889 --> 00:13:32,009
mentioned a few libraries before that

00:13:30,120 --> 00:13:34,439
are looking to improve the async i/o

00:13:32,009 --> 00:13:35,759
module but there's quite a lot going on

00:13:34,439 --> 00:13:37,350
and people are still feeling out what

00:13:35,759 --> 00:13:40,170
they can do is with this now I expect

00:13:37,350 --> 00:13:43,920
that the the the facilities will improve

00:13:40,170 --> 00:13:45,569
and grow over time which is great but it

00:13:43,920 --> 00:13:48,290
also means that we've got a bit of a

00:13:45,569 --> 00:13:50,610
shaky landscape underneath our feet

00:13:48,290 --> 00:13:52,259
right so is there a kind of one to get

00:13:50,610 --> 00:13:55,589
to where we get karey teens in micah

00:13:52,259 --> 00:13:57,509
python there are some technical

00:13:55,589 --> 00:13:59,970
differences and it is a subset in some

00:13:57,509 --> 00:14:01,319
ways but for the most users it's

00:13:59,970 --> 00:14:03,810
basically the same we've got the same

00:14:01,319 --> 00:14:05,639
keywords it's implemented with very

00:14:03,810 --> 00:14:06,899
similar syntax we haven't quite caught

00:14:05,639 --> 00:14:08,850
up with some of the newer features in

00:14:06,899 --> 00:14:11,009
three six and three seven but they're

00:14:08,850 --> 00:14:15,120
kind of gravy

00:14:11,009 --> 00:14:16,560
I think it's really exciting to have

00:14:15,120 --> 00:14:17,790
these kind of features in an embedded

00:14:16,560 --> 00:14:19,980
device right particularly because

00:14:17,790 --> 00:14:22,620
threading supports pretty limited on

00:14:19,980 --> 00:14:24,630
most embedded devices and a lot of the

00:14:22,620 --> 00:14:27,930
operations are really concurrent by

00:14:24,630 --> 00:14:30,110
nature often we want to like yeah watch

00:14:27,930 --> 00:14:32,610
a button we want to update a display and

00:14:30,110 --> 00:14:34,470
we're in Internet of Things track here

00:14:32,610 --> 00:14:35,880
we want to make web queries I mean you

00:14:34,470 --> 00:14:37,860
do all that at the same time on these

00:14:35,880 --> 00:14:39,660
little devices right I think I a gives

00:14:37,860 --> 00:14:40,889
us a way that can do that which doesn't

00:14:39,660 --> 00:14:44,360
really make doesn't force us to make

00:14:40,889 --> 00:14:47,069
obscure code I think it's fantastic I

00:14:44,360 --> 00:14:49,170
also find that a micro Python the focus

00:14:47,069 --> 00:14:50,670
is a bit different with regular Python a

00:14:49,170 --> 00:14:52,319
lot of it's about performance and eking

00:14:50,670 --> 00:14:54,180
out you know lots of web requests per

00:14:52,319 --> 00:14:55,850
second I'm Michel path from the benefit

00:14:54,180 --> 00:14:58,709
I see is being able to do those

00:14:55,850 --> 00:15:02,970
concurrent tasks in a way that's

00:14:58,709 --> 00:15:04,379
expressive there's also some research

00:15:02,970 --> 00:15:06,149
into looking at making this efficient

00:15:04,379 --> 00:15:08,250
for power use because the event loop

00:15:06,149 --> 00:15:10,649
knows when things are going to wake up

00:15:08,250 --> 00:15:14,309
at least relatively I'm really excited

00:15:10,649 --> 00:15:14,819
to look at how we can drive the CPUs or

00:15:14,309 --> 00:15:16,649
drive the

00:15:14,819 --> 00:15:18,209
microcontrollers into low-power uses

00:15:16,649 --> 00:15:19,589
because the event loop has that

00:15:18,209 --> 00:15:20,879
knowledge so there's a few people

00:15:19,589 --> 00:15:24,720
looking into that and I think it's quite

00:15:20,879 --> 00:15:27,269
interesting so we'd tackle a time ago of

00:15:24,720 --> 00:15:28,470
time it so we take a quickly a classic

00:15:27,269 --> 00:15:32,609
problem in micro controls which is

00:15:28,470 --> 00:15:34,889
debounce debounce is all about the fact

00:15:32,609 --> 00:15:37,199
that switches armors binary as we'd like

00:15:34,889 --> 00:15:38,910
when you push a button if you look at it

00:15:37,199 --> 00:15:41,160
in this little square bit ago goes all

00:15:38,910 --> 00:15:43,169
over the place and traditionally what

00:15:41,160 --> 00:15:45,989
happens is rules latch onto one of those

00:15:43,169 --> 00:15:48,660
edges and do something when that happens

00:15:45,989 --> 00:15:50,459
and we usually just go to sleep for 15

00:15:48,660 --> 00:15:52,649
milliseconds or something to wait for

00:15:50,459 --> 00:15:54,059
that debounce period that's probably the

00:15:52,649 --> 00:15:56,249
most common way to handle it that issue

00:15:54,059 --> 00:15:58,529
and that of course isn't ideal because

00:15:56,249 --> 00:16:00,600
your microcontrollers basically dead in

00:15:58,529 --> 00:16:01,679
the water at that point otherwise you

00:16:00,600 --> 00:16:05,069
can you can have this in other ways you

00:16:01,679 --> 00:16:07,199
can have a handcrafted case statement

00:16:05,069 --> 00:16:09,509
with switches to basically have a state

00:16:07,199 --> 00:16:11,929
machine but then we're doing a lot of

00:16:09,509 --> 00:16:14,910
coding for what's a really common event

00:16:11,929 --> 00:16:16,799
in my compasseth it's it's a really

00:16:14,910 --> 00:16:19,739
simple thing to do we have a loop which

00:16:16,799 --> 00:16:22,049
is polling a switch the state of the

00:16:19,739 --> 00:16:24,569
switch haven't got here but there's a

00:16:22,049 --> 00:16:27,079
interrupt which would normally set a

00:16:24,569 --> 00:16:29,249
value when that that transition occurs

00:16:27,079 --> 00:16:31,259
then we go and do whatever we have to do

00:16:29,249 --> 00:16:32,489
and then we go to sleep now

00:16:31,259 --> 00:16:34,259
the difference here is that we're going

00:16:32,489 --> 00:16:35,759
to sleep but we're handing control back

00:16:34,259 --> 00:16:37,199
to the event loop so we can go into

00:16:35,759 --> 00:16:40,139
other things

00:16:37,199 --> 00:16:41,909
now this codes relatively how you think

00:16:40,139 --> 00:16:43,799
about what you want to do here and it's

00:16:41,909 --> 00:16:47,999
expressive and it performs really well

00:16:43,799 --> 00:16:49,139
so I think it's really nice the other

00:16:47,999 --> 00:16:50,579
option is of course we've already got

00:16:49,139 --> 00:16:52,319
classes that wrapped these things up so

00:16:50,579 --> 00:16:54,689
we can register for a lambda to be

00:16:52,319 --> 00:16:56,699
called when a button is pushed you can

00:16:54,689 --> 00:16:58,919
also register for a long switch or a

00:16:56,699 --> 00:17:01,049
double double switch or all those kinds

00:16:58,919 --> 00:17:06,569
of things and that's in the micro path

00:17:01,049 --> 00:17:08,339
an async library which I'll just want to

00:17:06,569 --> 00:17:10,919
mention briefly is it's a fantastic

00:17:08,339 --> 00:17:12,480
resource by one of our members by our

00:17:10,919 --> 00:17:14,100
community members Peter hinge it's a

00:17:12,480 --> 00:17:15,600
wonderful tutorial there although it

00:17:14,100 --> 00:17:17,250
focuses on Micah Python I encourage you

00:17:15,600 --> 00:17:19,079
go read it it's actually really good for

00:17:17,250 --> 00:17:21,539
just understanding that event loop and

00:17:19,079 --> 00:17:22,769
how it how its implemented he's also

00:17:21,539 --> 00:17:24,419
working on May Sinclair a replacement

00:17:22,769 --> 00:17:26,539
which has a lot of benefits in in micro

00:17:24,419 --> 00:17:28,220
Python specifically because you can put

00:17:26,539 --> 00:17:30,080
priorities on

00:17:28,220 --> 00:17:33,200
things that go into the event loop quite

00:17:30,080 --> 00:17:37,909
interesting right so having done for

00:17:33,200 --> 00:17:40,730
time not much left right this was one of

00:17:37,909 --> 00:17:44,539
the projects I had worked on one day put

00:17:40,730 --> 00:17:45,890
together it was called you pick TV I

00:17:44,539 --> 00:17:48,070
can't show because I've got my phone

00:17:45,890 --> 00:17:50,000
over there but you can see that the

00:17:48,070 --> 00:17:51,289
there's four numbers displayed on the

00:17:50,000 --> 00:17:53,299
screen it's really simple

00:17:51,289 --> 00:17:55,880
my nephew likes trains and he likes

00:17:53,299 --> 00:17:57,530
numbers right so this shows the number

00:17:55,880 --> 00:18:00,620
of minutes until the next two trains

00:17:57,530 --> 00:18:02,690
near my house so 24 minutes and then 54

00:18:00,620 --> 00:18:04,870
minutes which is a sad indictment of the

00:18:02,690 --> 00:18:07,760
rail system in Melbourne actually bitman

00:18:04,870 --> 00:18:09,080
so we'll look at that in a sec there's

00:18:07,760 --> 00:18:10,880
also this LED strip controller we've got

00:18:09,080 --> 00:18:13,900
lying all over the ground here and we'll

00:18:10,880 --> 00:18:16,970
talk about how I use async IO for that

00:18:13,900 --> 00:18:19,340
so micro-p TV actually explain to you

00:18:16,970 --> 00:18:21,429
Sydney folks PT VZ a rail operator in

00:18:19,340 --> 00:18:23,270
Melbourne that's the training operator

00:18:21,429 --> 00:18:25,510
there's a couple of things we have to do

00:18:23,270 --> 00:18:28,669
here we have to make sure the device is

00:18:25,510 --> 00:18:31,460
synchronized at a time so we need NTP

00:18:28,669 --> 00:18:33,230
support we also need to make an HTTP

00:18:31,460 --> 00:18:34,909
request so it can ask PTV when the

00:18:33,230 --> 00:18:36,080
trains are arriving and whether it's

00:18:34,909 --> 00:18:38,450
display that I want to keep updated

00:18:36,080 --> 00:18:42,049
right and then I've got a cinco to pull

00:18:38,450 --> 00:18:45,860
it together so ntp is a one-liner in

00:18:42,049 --> 00:18:48,370
Python that's we don't have time zone

00:18:45,860 --> 00:18:51,799
support yet but that does set your

00:18:48,370 --> 00:18:53,510
microcontroller to UTC time just reaches

00:18:51,799 --> 00:18:56,150
out as a networking Grubbs Grubbs the

00:18:53,510 --> 00:18:58,549
server we have an equivalent to the

00:18:56,150 --> 00:19:01,370
requests library which is micro request

00:18:58,549 --> 00:19:02,840
now this is a blocking library comebacks

00:19:01,370 --> 00:19:06,520
than a sec but this is what I use to

00:19:02,840 --> 00:19:10,010
make the query for the pea TV schedule

00:19:06,520 --> 00:19:12,590
and we have a matrix control so the LED

00:19:10,010 --> 00:19:16,190
systems SPI communications to drive this

00:19:12,590 --> 00:19:19,130
display originally it was synchronous

00:19:16,190 --> 00:19:21,260
it's now asynchronous and we got a sink

00:19:19,130 --> 00:19:24,230
i/o and again I kind of wanted to show

00:19:21,260 --> 00:19:25,400
this little snippet of code because it's

00:19:24,230 --> 00:19:27,020
kind of how I think about it we're

00:19:25,400 --> 00:19:28,909
synching time now if we went and had a

00:19:27,020 --> 00:19:30,470
look at that code that's just in a while

00:19:28,909 --> 00:19:32,450
loop and it runs every 10 minutes so

00:19:30,470 --> 00:19:34,940
every 10 minutes I go and just make sure

00:19:32,450 --> 00:19:36,380
I'm synchronized for MTV I get the

00:19:34,940 --> 00:19:37,909
schedules services and I do you think I

00:19:36,380 --> 00:19:40,909
do that every minute or every 30 seconds

00:19:37,909 --> 00:19:41,480
so go retrieve how often well when the

00:19:40,909 --> 00:19:43,610
next to train

00:19:41,480 --> 00:19:45,410
coming and then this last operation I

00:19:43,610 --> 00:19:47,179
check the times and I have to display if

00:19:45,410 --> 00:19:49,490
the time has change and I do that quite

00:19:47,179 --> 00:19:52,070
frequently every 100 milliseconds or

00:19:49,490 --> 00:19:53,330
something like that but these are broken

00:19:52,070 --> 00:19:55,010
down and exactly the way I think about

00:19:53,330 --> 00:19:57,169
what that device has to do

00:19:55,010 --> 00:19:59,870
they're also separated so they aren't so

00:19:57,169 --> 00:20:02,690
dependent on each other for me this is a

00:19:59,870 --> 00:20:06,620
really neat neat system I won't give a

00:20:02,690 --> 00:20:07,610
damn I guess we're short in time if you

00:20:06,620 --> 00:20:10,610
don't demo that I'll show you right

00:20:07,610 --> 00:20:12,980
after the house they took the LED strip

00:20:10,610 --> 00:20:13,970
controller I'll just do the exciting bit

00:20:12,980 --> 00:20:18,650
and hopefully this will work I've had

00:20:13,970 --> 00:20:20,150
some problems with my LED strips so I've

00:20:18,650 --> 00:20:25,400
got like a little space under my house

00:20:20,150 --> 00:20:27,049
where I store stuff you guys are all

00:20:25,400 --> 00:20:28,490
probably the same you've got like I got

00:20:27,049 --> 00:20:29,570
rock climbing gear and scuba gear all

00:20:28,490 --> 00:20:31,610
this kind of stuff and I don't have room

00:20:29,570 --> 00:20:33,200
in the in the house of repurposed

00:20:31,610 --> 00:20:34,940
underneath it to store this kind of

00:20:33,200 --> 00:20:36,410
stuff and at some point I realized these

00:20:34,940 --> 00:20:38,240
lids trips were cheap and that would be

00:20:36,410 --> 00:20:41,480
perfect for lighting this really narrow

00:20:38,240 --> 00:20:43,100
but really long space next thing you

00:20:41,480 --> 00:20:44,450
know you're building a system when we've

00:20:43,100 --> 00:20:48,710
got some electronics in there now and

00:20:44,450 --> 00:20:52,010
some carry transistors and what luck but

00:20:48,710 --> 00:20:53,299
again this is quite nice and I think the

00:20:52,010 --> 00:20:54,980
nice thing about this is that when you

00:20:53,299 --> 00:20:59,809
use it you don't really think about it

00:20:54,980 --> 00:21:02,750
but that fade routine is fading right

00:20:59,809 --> 00:21:04,220
after I it's fading asynchronously to

00:21:02,750 --> 00:21:06,049
whatever value I'm sitting on my rotary

00:21:04,220 --> 00:21:07,880
encoder so I'm constantly creating this

00:21:06,049 --> 00:21:10,270
rotary encoder but you'll see that my

00:21:07,880 --> 00:21:13,100
favorite team is actually following it

00:21:10,270 --> 00:21:15,380
asynchronously it's not stopping until

00:21:13,100 --> 00:21:16,850
it reaches its goal it has a goal that's

00:21:15,380 --> 00:21:18,590
going through and that goal can change

00:21:16,850 --> 00:21:20,360
whenever the rotary encoder changes so

00:21:18,590 --> 00:21:22,190
I've just got like a loop that says hey

00:21:20,360 --> 00:21:23,390
what's the value of your own encoder set

00:21:22,190 --> 00:21:25,309
it to that value and then there's

00:21:23,390 --> 00:21:27,350
another loop which says hey fade - the

00:21:25,309 --> 00:21:29,000
value of whatever their goal is and so

00:21:27,350 --> 00:21:31,970
the nice thing there is that I can

00:21:29,000 --> 00:21:34,370
change it midway through as its racing

00:21:31,970 --> 00:21:37,610
toward its goal and just readjusts and

00:21:34,370 --> 00:21:43,850
it's the codes very simple and it's very

00:21:37,610 --> 00:21:46,580
smooth like that that is about all I had

00:21:43,850 --> 00:21:49,220
for today a couple of quick thanks to

00:21:46,580 --> 00:21:51,409
you guys in micah python paul peter and

00:21:49,220 --> 00:21:53,480
diming and pretty instrumental in making

00:21:51,409 --> 00:21:55,430
all this happen thanks things could be

00:21:53,480 --> 00:21:57,470
here I didn't say say say

00:21:55,430 --> 00:21:58,610
but do go check out Peters work he's

00:21:57,470 --> 00:22:00,650
done some fantastic stuff about

00:21:58,610 --> 00:22:03,560
documenting all this stuff made my job a

00:22:00,650 --> 00:22:05,120
lot easier today Nick and Andy we run

00:22:03,560 --> 00:22:07,730
the melbourne microfiber meetup group

00:22:05,120 --> 00:22:09,260
feelin's from melbourne come chat to me

00:22:07,730 --> 00:22:12,020
later and let's see if I can drag you

00:22:09,260 --> 00:22:14,030
along come my friends Oliver and Sean

00:22:12,020 --> 00:22:16,820
the Levant the output see of these

00:22:14,030 --> 00:22:19,280
little cases I said I'd give a shout-out

00:22:16,820 --> 00:22:22,570
and that's my girlfriend listen to this

00:22:19,280 --> 00:22:22,570
over the last week and she's English

00:22:25,200 --> 00:22:28,759
[Applause]

00:22:31,570 --> 00:22:35,090
they very much Matt back to finish a

00:22:33,860 --> 00:22:42,320
little bit early so definitely got time

00:22:35,090 --> 00:22:43,730
for some questions ones go to me yep hey

00:22:42,320 --> 00:22:46,580
thanks really great presentation I'm

00:22:43,730 --> 00:22:48,410
people doing uh you talked about the

00:22:46,580 --> 00:22:49,760
event loops and people doing specialized

00:22:48,410 --> 00:22:51,950
ones some people doing stuff in real

00:22:49,760 --> 00:22:53,960
time and with sort of concepts of advice

00:22:51,950 --> 00:22:55,490
that's between co-routines there are

00:22:53,960 --> 00:22:58,910
people experimenting with that it's

00:22:55,490 --> 00:23:00,140
still at that stage this project I'll

00:22:58,910 --> 00:23:01,340
have to look it up for you and chase you

00:23:00,140 --> 00:23:02,960
up later but there's there's a project

00:23:01,340 --> 00:23:06,050
which you're trying to do it in real

00:23:02,960 --> 00:23:08,180
time so it's a difficult thing to do and

00:23:06,050 --> 00:23:10,160
I showed some examples before about

00:23:08,180 --> 00:23:12,740
going to sleep I should probably specify

00:23:10,160 --> 00:23:14,420
that you never get back before that

00:23:12,740 --> 00:23:16,670
sleep request the event loop will get to

00:23:14,420 --> 00:23:17,600
you sometime after that and it's you've

00:23:16,670 --> 00:23:20,420
gotta be a little careful because if you

00:23:17,600 --> 00:23:21,800
requests like five millisecond sleep it

00:23:20,420 --> 00:23:23,480
might be five milliseconds or it might

00:23:21,800 --> 00:23:24,830
be fifteen it depends on what other

00:23:23,480 --> 00:23:25,520
things are going on in your other

00:23:24,830 --> 00:23:29,300
co-routines

00:23:25,520 --> 00:23:30,500
so you do have to manage that and for

00:23:29,300 --> 00:23:31,850
any the real-time systems they've also

00:23:30,500 --> 00:23:33,760
got got that trade-off as well

00:23:31,850 --> 00:23:41,390
something's gonna have to have priority

00:23:33,760 --> 00:23:43,820
yeah yeah do any more questions bit of a

00:23:41,390 --> 00:23:45,650
technical question under the hood do you

00:23:43,820 --> 00:23:47,600
know how it's actually implemented is it

00:23:45,650 --> 00:23:50,480
usually actually time interrupts on the

00:23:47,600 --> 00:23:52,310
actual hardware 250 it depends where

00:23:50,480 --> 00:23:53,510
you're talking about so in Python I'm

00:23:52,310 --> 00:23:55,310
less familiar with it but in micro

00:23:53,510 --> 00:23:57,290
Python most of its actually implemented

00:23:55,310 --> 00:23:59,360
in in micro Python that's about three

00:23:57,290 --> 00:24:02,900
hundred lines of code defines the event

00:23:59,360 --> 00:24:04,640
loop it uses a queue or a couple of cues

00:24:02,900 --> 00:24:06,620
which are implemented in C so has good

00:24:04,640 --> 00:24:08,340
performance but basically it's just

00:24:06,620 --> 00:24:10,830
shifting things

00:24:08,340 --> 00:24:11,850
under under those cues and then looks at

00:24:10,830 --> 00:24:14,730
the times when they need to be working

00:24:11,850 --> 00:24:17,309
up and and deals with them so yeah

00:24:14,730 --> 00:24:20,370
that's that's the that's how it works

00:24:17,309 --> 00:24:21,510
it's I if you're good enough a half hour

00:24:20,370 --> 00:24:23,220
later I'm happy to walk you through the

00:24:21,510 --> 00:24:27,470
code it's quite I was a bit shocked at

00:24:23,220 --> 00:24:27,470
how readable it was yeah it's quite nice

00:24:27,710 --> 00:24:36,240
hi this is not used my scheduling

00:24:32,210 --> 00:24:38,549
techniques or by itself

00:24:36,240 --> 00:24:42,870
sorry second so does it not use the oiz

00:24:38,549 --> 00:24:44,220
scheduling so in micro Pisan we don't

00:24:42,870 --> 00:24:46,409
really have an OS we're usually a built

00:24:44,220 --> 00:24:48,690
on top of a very thin layer and that the

00:24:46,409 --> 00:24:50,220
microcontroller vendor gives you in

00:24:48,690 --> 00:24:51,450
python it's a different story yeah it's

00:24:50,220 --> 00:24:53,159
usually built on top of the OS and the

00:24:51,450 --> 00:24:53,970
users select and whole bunch of other

00:24:53,159 --> 00:24:56,970
things to get really good performance

00:24:53,970 --> 00:24:58,140
out of the system but yeah when you're

00:24:56,970 --> 00:24:59,370
running on the bare metal it's it's a

00:24:58,140 --> 00:25:02,640
little different you can handle it

00:24:59,370 --> 00:25:05,490
yourself how would the source sharing or

00:25:02,640 --> 00:25:08,220
you know you have any sort of shade just

00:25:05,490 --> 00:25:12,510
also sharing across these two programs

00:25:08,220 --> 00:25:14,520
which is running in parallel you can sir

00:25:12,510 --> 00:25:15,960
a reference before there's a markup

00:25:14,520 --> 00:25:18,029
Arthur nice inquiry there's a group on

00:25:15,960 --> 00:25:19,710
libraries in Python as well but you can

00:25:18,029 --> 00:25:21,090
put barriers around part of your

00:25:19,710 --> 00:25:23,850
co-routines and a barrier basically

00:25:21,090 --> 00:25:25,350
gives up execution until such point is

00:25:23,850 --> 00:25:25,500
to another career team gives it back to

00:25:25,350 --> 00:25:27,299
you

00:25:25,500 --> 00:25:29,220
so gives you a way to synchronize things

00:25:27,299 --> 00:25:31,340
to a shared resource I think that's what

00:25:29,220 --> 00:25:31,340
you

00:25:39,860 --> 00:25:56,390
sorry sorry it wasn't here - had a

00:25:42,540 --> 00:25:56,390
question yep

00:26:03,260 --> 00:26:09,090
not really it's kind of up to you to

00:26:06,059 --> 00:26:10,380
define where those viewpoints are that

00:26:09,090 --> 00:26:12,270
said there's a few techniques you can

00:26:10,380 --> 00:26:14,730
use like for this one here for the fade

00:26:12,270 --> 00:26:17,210
routine I have a loop which has said

00:26:14,730 --> 00:26:19,590
just spins and tries to get to the goal

00:26:17,210 --> 00:26:20,640
and I wake up I think it's every five

00:26:19,590 --> 00:26:22,890
milliseconds with ten milliseconds

00:26:20,640 --> 00:26:24,270
something in that order I know that I

00:26:22,890 --> 00:26:26,220
don't hit that and so what I do is I

00:26:24,270 --> 00:26:28,230
measure the time since the last time I

00:26:26,220 --> 00:26:29,760
woke up and so it might be 12

00:26:28,230 --> 00:26:32,910
milliseconds or might be 15 milliseconds

00:26:29,760 --> 00:26:34,910
and then I incorporate that delay into

00:26:32,910 --> 00:26:38,400
the amount of fade that I want to apply

00:26:34,910 --> 00:26:40,650
so you can absorb it in that way but in

00:26:38,400 --> 00:26:42,600
terms of having you know locking

00:26:40,650 --> 00:26:46,290
yourself into saying that you I can't

00:26:42,600 --> 00:26:47,850
respond unless rather I need to be back

00:26:46,290 --> 00:26:50,580
in like 30 milliseconds you don't have

00:26:47,850 --> 00:26:51,540
that you don't have that facility you've

00:26:50,580 --> 00:26:53,760
just got to write your code carefully

00:26:51,540 --> 00:26:54,720
and so it's it's a bit tricky to get

00:26:53,760 --> 00:26:57,800
that right when you get those kind of

00:26:54,720 --> 00:26:57,800
constraints yeah

00:26:59,840 --> 00:27:06,120
yep

00:27:01,970 --> 00:27:08,940
sure so on in Python is AI Oh

00:27:06,120 --> 00:27:11,490
HTTP is very popular library which which

00:27:08,940 --> 00:27:14,250
gives you all those lovely requests like

00:27:11,490 --> 00:27:18,840
stuff in micro Python the name is

00:27:14,250 --> 00:27:20,160
library is they may be any amp yes it's

00:27:18,840 --> 00:27:22,740
something very similar it's modeled and

00:27:20,160 --> 00:27:24,140
model on a i/o HTTP and does the same

00:27:22,740 --> 00:27:27,560
sorts of things

00:27:24,140 --> 00:27:30,090
it exists yeah actually that's right

00:27:27,560 --> 00:27:32,150
it's very crude it lets you do a git it

00:27:30,090 --> 00:27:36,090
doesn't handle things like redirects

00:27:32,150 --> 00:27:37,410
it's quite simple but the I guess the

00:27:36,090 --> 00:27:39,060
thing that's exciting there is that the

00:27:37,410 --> 00:27:40,350
the structure has been put in place so

00:27:39,060 --> 00:27:40,710
we can build on it yeah it's still early

00:27:40,350 --> 00:27:45,620
days

00:27:40,710 --> 00:27:48,210
so yeah that's absolutely true

00:27:45,620 --> 00:27:50,340
there are yeah Pico webs is an

00:27:48,210 --> 00:27:51,660
interesting service that does async star

00:27:50,340 --> 00:27:53,550
stuff in markup I think it's quite nice

00:27:51,660 --> 00:28:02,580
have any more questions they got time

00:27:53,550 --> 00:28:04,170
for one more trying to use that yeah so

00:28:02,580 --> 00:28:06,300
this is a general question about

00:28:04,170 --> 00:28:08,700
anything can find them so back then when

00:28:06,300 --> 00:28:11,120
it didn't support we had things like G

00:28:08,700 --> 00:28:14,610
event where we could monkey patch and

00:28:11,120 --> 00:28:17,160
make a blocking call unblocking so with

00:28:14,610 --> 00:28:20,280
the current situation how good is the

00:28:17,160 --> 00:28:23,100
libraries in terms of you know with the

00:28:20,280 --> 00:28:25,620
latest Python versions if you encounter

00:28:23,100 --> 00:28:26,070
or if you get into a library which is

00:28:25,620 --> 00:28:28,980
blocking

00:28:26,070 --> 00:28:30,780
how do you work around it yeah there's a

00:28:28,980 --> 00:28:32,280
few different ways you can't put

00:28:30,780 --> 00:28:36,270
timeouts on things which is the obvious

00:28:32,280 --> 00:28:37,380
sort of thing so you can in your care

00:28:36,270 --> 00:28:40,460
routine you can say hey I'm gonna make a

00:28:37,380 --> 00:28:43,140
call but I want to be notified if if it

00:28:40,460 --> 00:28:44,910
if it's taken too long and at that point

00:28:43,140 --> 00:28:47,250
you can get interrupted and hand off

00:28:44,910 --> 00:28:52,680
control that's probably the most common

00:28:47,250 --> 00:28:54,720
way to do that yeah you can spin tough

00:28:52,680 --> 00:28:58,410
things into other threads is another way

00:28:54,720 --> 00:29:01,050
is with you before any T so the async

00:28:58,410 --> 00:29:03,540
i/o module has a way of pushing like a

00:29:01,050 --> 00:29:04,950
method into another thread so you could

00:29:03,540 --> 00:29:07,500
have a thread that works off things off

00:29:04,950 --> 00:29:09,180
the side so if you know the tasks are

00:29:07,500 --> 00:29:10,230
going to take some time you can push

00:29:09,180 --> 00:29:12,600
them into a thread and then coordinate

00:29:10,230 --> 00:29:25,529
it within your care team

00:29:12,600 --> 00:29:29,519
yeah so there's a guy here yeah I do

00:29:25,529 --> 00:29:31,320
I I guess it's actually a more natural

00:29:29,519 --> 00:29:34,049
way for me maybe of my brains we had

00:29:31,320 --> 00:29:35,340
wired wrong I'm not sure but it feels

00:29:34,049 --> 00:29:37,139
more natural like I usually sort of

00:29:35,340 --> 00:29:38,759
state what I want to do and what I like

00:29:37,139 --> 00:29:40,950
in this case so I need to fade something

00:29:38,759 --> 00:29:42,990
I need to have a and so I write those

00:29:40,950 --> 00:29:45,509
blocks of code now don't really worry

00:29:42,990 --> 00:29:46,950
about the asynchronous nature of it I

00:29:45,509 --> 00:29:48,210
just worry about making them do what

00:29:46,950 --> 00:29:50,070
they need to do and then I sort of

00:29:48,210 --> 00:29:52,350
bought them all together if they sink I

00:29:50,070 --> 00:29:54,240
oh I find that it's quite liberating

00:29:52,350 --> 00:29:57,059
it's it's just more in line with the way

00:29:54,240 --> 00:30:00,419
I think again it might just be weird

00:29:57,059 --> 00:30:01,529
mood brain but it seems worth reading I

00:30:00,419 --> 00:30:05,940
tend to spend a lot of time thinking

00:30:01,529 --> 00:30:08,340
about synchronization and when I'm going

00:30:05,940 --> 00:30:10,409
to get cut off from the OS and and how

00:30:08,340 --> 00:30:12,990
long things are going to take it really

00:30:10,409 --> 00:30:14,100
shifts the focus for me instead of

00:30:12,990 --> 00:30:16,409
having to worry about the task at hand

00:30:14,100 --> 00:30:17,820
worrying about the the boilerplate of

00:30:16,409 --> 00:30:22,320
managing all those different things

00:30:17,820 --> 00:30:23,429
going on but yeah ok I think that's it

00:30:22,320 --> 00:30:26,870
this will go time for thank you very

00:30:23,429 --> 00:30:26,870

YouTube URL: https://www.youtube.com/watch?v=tIgu7q38bUw


