Title: Embedded applications using Python and Debian
Publication date: 2018-08-26
Playlist: PyCon Australia 2018
Description: 
	Jaminy Prabaharan

https://2018.pycon-au.org/talks/41830-embedded-applications-using-python-and-debian/

Python is widely used in embedded applications due to its simplicity. Raspberry pi (pi came from the Python!) and Beagle Bone which are commonly used in embedded applications are  programmed using Python and run on Debian Linux platform.

Python, PyCon, PyConAU, australia, programming, sydney

This video is licensed under CC BY 3.0 AU - https://creativecommons.org/licenses/by/3.0/au/

PyCon Australia (“PyCon AU”) is the national conference for the Python Programming Community, bringing together professional, student and enthusiast developers with a love for developing with Python.

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 24 - 28 2018.

Python, PyCon, PyConAU
Captions: 
	00:00:01,070 --> 00:00:07,950
okay so let me start with why did I

00:00:05,910 --> 00:00:10,110
choose this topic first because you all

00:00:07,950 --> 00:00:12,059
will be wondering and looks I'm looking

00:00:10,110 --> 00:00:15,719
so small like what she's going to talk

00:00:12,059 --> 00:00:17,820
about so basically I was working as an

00:00:15,719 --> 00:00:19,650
embedded engineer so that's why I have

00:00:17,820 --> 00:00:22,529
chosen I did my degree in electronic and

00:00:19,650 --> 00:00:24,210
communication engineering and I worked

00:00:22,529 --> 00:00:26,010
as an embedded engineer so I got some

00:00:24,210 --> 00:00:31,260
hands-on experience with embedded

00:00:26,010 --> 00:00:33,870
applications so that's the main topic

00:00:31,260 --> 00:00:37,079
embedded applications and then why

00:00:33,870 --> 00:00:39,690
Debian so I was part of Debian if you

00:00:37,079 --> 00:00:41,190
know google Summer of Code how how many

00:00:39,690 --> 00:00:44,070
people know about google Summer of Code

00:00:41,190 --> 00:00:46,320
yeah that's one of the global program

00:00:44,070 --> 00:00:48,750
that brings students into the

00:00:46,320 --> 00:00:50,250
open-source community so that's where I

00:00:48,750 --> 00:00:53,430
was introduced to the open source

00:00:50,250 --> 00:00:56,190
community and I got a lot of experience

00:00:53,430 --> 00:00:59,160
when I was doing my program there and

00:00:56,190 --> 00:01:01,620
then I got lots of opportunity all

00:00:59,160 --> 00:01:06,060
around the world to speak and share my

00:01:01,620 --> 00:01:09,030
experience I had my speak in open source

00:01:06,060 --> 00:01:10,920
Amit North America Europe Japan so

00:01:09,030 --> 00:01:14,659
thanks to google Summer of Code I got

00:01:10,920 --> 00:01:18,360
for giving me this opportunity so now

00:01:14,659 --> 00:01:20,820
this year I was a finally I was a mentor

00:01:18,360 --> 00:01:22,500
and organization administrator for

00:01:20,820 --> 00:01:24,509
google Summer of Code with Debian and

00:01:22,500 --> 00:01:27,750
thanks to debian for giving me that

00:01:24,509 --> 00:01:30,540
opportunity as well and then Python so

00:01:27,750 --> 00:01:32,790
it's of course it's Pikul so I had to

00:01:30,540 --> 00:01:35,340
include Python and I already worked for

00:01:32,790 --> 00:01:37,500
you with Python so I just come find all

00:01:35,340 --> 00:01:45,600
these and connected the dots and created

00:01:37,500 --> 00:01:47,610
this topic so so let me start it so how

00:01:45,600 --> 00:01:49,920
many of you use Python here for your

00:01:47,610 --> 00:01:54,329
embedded applications can you'll raise

00:01:49,920 --> 00:01:57,149
your hand yeah so I can see few hands so

00:01:54,329 --> 00:01:59,009
that's what this statistic stays so 95

00:01:57,149 --> 00:02:02,250
percentage of code for embedded system

00:01:59,009 --> 00:02:05,909
is written almost in C or C++ but you

00:02:02,250 --> 00:02:08,819
know already Python is Python is it's a

00:02:05,909 --> 00:02:11,190
number one language for the top

00:02:08,819 --> 00:02:12,430
programming languages and also it's open

00:02:11,190 --> 00:02:15,280
source programming languages

00:02:12,430 --> 00:02:17,290
so there is always a necessity to bring

00:02:15,280 --> 00:02:19,480
the Python into the embedded system so

00:02:17,290 --> 00:02:23,590
today I'm here to convince that how we

00:02:19,480 --> 00:02:27,129
can migrate from C++ most of the C++

00:02:23,590 --> 00:02:29,950
stuffs to Python so bringing that 95%

00:02:27,129 --> 00:02:35,920
agent for the Python into the embedded

00:02:29,950 --> 00:02:39,579
application so let me compare Python and

00:02:35,920 --> 00:02:41,319
C for embedded application so as you all

00:02:39,579 --> 00:02:46,000
know python is an interpreted language

00:02:41,319 --> 00:02:49,209
and sees a compiled language and since

00:02:46,000 --> 00:02:52,930
it's easy to write you there's less

00:02:49,209 --> 00:02:55,810
error and C you can say it's more error

00:02:52,930 --> 00:02:59,409
so when I started coding I started with

00:02:55,810 --> 00:03:02,379
C so you know I I have engineering

00:02:59,409 --> 00:03:06,849
background so I did I started with C so

00:03:02,379 --> 00:03:08,709
for me for I mean for me it was not that

00:03:06,849 --> 00:03:11,829
hard to learn that language because that

00:03:08,709 --> 00:03:14,409
syntax when you like learn for 3 months

00:03:11,829 --> 00:03:17,769
you just have you just start coding if

00:03:14,409 --> 00:03:20,379
you have brain but Python it's easy it's

00:03:17,769 --> 00:03:21,849
easy for you for anyone if your hobby

00:03:20,379 --> 00:03:25,359
store you don't need to be an engineer

00:03:21,849 --> 00:03:28,530
to code for embedded so mostly if you

00:03:25,359 --> 00:03:32,260
see the embedded application most of the

00:03:28,530 --> 00:03:36,699
hobbies they hop into the embedded field

00:03:32,260 --> 00:03:41,439
because it's robotics drawn so anyone

00:03:36,699 --> 00:03:43,829
can work on it so so if a person who is

00:03:41,439 --> 00:03:45,909
not in the engineering background or

00:03:43,829 --> 00:03:49,359
technology background they can easily

00:03:45,909 --> 00:03:52,479
move to the Python language easily so

00:03:49,359 --> 00:03:56,049
it's easily writable you know the syntax

00:03:52,479 --> 00:03:58,750
are very easy so when I shifted from C

00:03:56,049 --> 00:04:00,340
to fight fight and I was like I got a

00:03:58,750 --> 00:04:03,790
lot of time learning this just the

00:04:00,340 --> 00:04:07,720
syntax because python is very easy to

00:04:03,790 --> 00:04:10,659
read and a major problem with the Python

00:04:07,720 --> 00:04:15,790
is the it takes a lot of time for

00:04:10,659 --> 00:04:17,979
running so see it it it trans first so

00:04:15,790 --> 00:04:20,109
that's the major advantage in C so

00:04:17,979 --> 00:04:22,020
that's the major reason because in

00:04:20,109 --> 00:04:25,760
mostly in the embedded application they

00:04:22,020 --> 00:04:30,880
prefer the speed right so that's what

00:04:25,760 --> 00:04:33,410
go 4c and they leave out the Python so

00:04:30,880 --> 00:04:37,730
let's see how can we compensate that

00:04:33,410 --> 00:04:39,530
speed problem so this is just a Python

00:04:37,730 --> 00:04:41,270
for him but it's the top programming

00:04:39,530 --> 00:04:43,850
language and it's open source so anyone

00:04:41,270 --> 00:04:45,890
can edit it and use it for their own

00:04:43,850 --> 00:04:47,450
purpose so if you are trying to use for

00:04:45,890 --> 00:04:50,360
a special purpose in the embedded system

00:04:47,450 --> 00:04:52,520
you can you can itself edit it because

00:04:50,360 --> 00:04:55,250
it's an open source programming language

00:04:52,520 --> 00:04:57,800
and rendering working in a team it's

00:04:55,250 --> 00:04:59,840
easy for someone to read your code so

00:04:57,800 --> 00:05:01,430
they can collaborate with each other and

00:04:59,840 --> 00:05:05,150
they can read your code and edit it so

00:05:01,430 --> 00:05:10,850
it's easy for collaborating with the

00:05:05,150 --> 00:05:13,820
team so how can you compensate that a

00:05:10,850 --> 00:05:17,060
speed problem so from the table you

00:05:13,820 --> 00:05:19,610
might have seen that C has a runtime

00:05:17,060 --> 00:05:22,070
speed problem right so how can we

00:05:19,610 --> 00:05:25,460
compensate that so we can use the site

00:05:22,070 --> 00:05:29,540
on where it includes a part of C and

00:05:25,460 --> 00:05:33,650
tries to increase the speed or you can

00:05:29,540 --> 00:05:35,930
go for the just-in-time compilers mostly

00:05:33,650 --> 00:05:41,360
in pi PI they try to use for use this

00:05:35,930 --> 00:05:44,630
just-in-time compilers so these are some

00:05:41,360 --> 00:05:46,580
of the Python libraries you could use

00:05:44,630 --> 00:05:50,300
for embedded application micro Python

00:05:46,580 --> 00:05:53,180
embedded Python C Python pi PI so I just

00:05:50,300 --> 00:05:56,210
did a research and just list it down

00:05:53,180 --> 00:05:57,760
which you could use so mostly embedded

00:05:56,210 --> 00:06:00,620
application means Internet of Things

00:05:57,760 --> 00:06:02,810
artificial intelligence so you can see

00:06:00,620 --> 00:06:05,360
most of the artificial intelligent

00:06:02,810 --> 00:06:07,310
program things are done with tens of I

00:06:05,360 --> 00:06:11,750
mean for example the tensorflow

00:06:07,310 --> 00:06:13,580
it runs with Python so if it's it's it

00:06:11,750 --> 00:06:16,490
would be easy if you could shift the

00:06:13,580 --> 00:06:18,440
internet-of-things also to python from c

00:06:16,490 --> 00:06:21,520
so that we could combine artificial

00:06:18,440 --> 00:06:28,160
intelligence which is already in Python

00:06:21,520 --> 00:06:29,750
to combine together so this is about the

00:06:28,160 --> 00:06:32,600
micro pattern I think you might have got

00:06:29,750 --> 00:06:35,600
the interaction about the micro Python

00:06:32,600 --> 00:06:38,900
from the previous talks so I don't want

00:06:35,600 --> 00:06:39,380
to go much into this so I'm part of

00:06:38,900 --> 00:06:41,000
Debian

00:06:39,380 --> 00:06:45,280
I had to speak about it so these are

00:06:41,000 --> 00:06:47,810
some of the devices that can run with

00:06:45,280 --> 00:06:50,240
Python

00:06:47,810 --> 00:06:56,450
they are Raspberry Pi BeagleBone black

00:06:50,240 --> 00:06:58,370
black gum stick and the modules so let

00:06:56,450 --> 00:07:00,620
let me give an introduction about the

00:06:58,370 --> 00:07:04,180
debian how many of you know debian

00:07:00,620 --> 00:07:07,970
already or using how many know already

00:07:04,180 --> 00:07:12,890
how many of you are using it all right

00:07:07,970 --> 00:07:15,200
so they bein call itself as an Universal

00:07:12,890 --> 00:07:19,910
operating system and it was founded in

00:07:15,200 --> 00:07:24,740
1993 and I have to say my age as de

00:07:19,910 --> 00:07:27,560
being so yeah so Ian Murdoch that Ian

00:07:24,740 --> 00:07:30,200
the Ian in Debian came from n Murdoch

00:07:27,560 --> 00:07:33,350
and the DEP came from the her girlfriend

00:07:30,200 --> 00:07:39,050
his girlfriend so that's the basic

00:07:33,350 --> 00:07:42,020
interaction for Debian so this year that

00:07:39,050 --> 00:07:46,490
you know they're being we all heard

00:07:42,020 --> 00:07:49,130
about Debian adept conf okay it's the

00:07:46,490 --> 00:07:52,070
annual Developers Conference all the

00:07:49,130 --> 00:07:55,220
Debian developers they gather in any

00:07:52,070 --> 00:07:58,250
part of the world to collaborate and

00:07:55,220 --> 00:08:01,220
work more about more on the Debian

00:07:58,250 --> 00:08:02,510
packages and so since I was part of

00:08:01,220 --> 00:08:04,580
who-ville Summer of Code I got the

00:08:02,510 --> 00:08:05,810
opportunity in two thousand sixteen

00:08:04,580 --> 00:08:09,080
hours of google Summer of Code through

00:08:05,810 --> 00:08:11,390
and so I was part of the DEP kind of in

00:08:09,080 --> 00:08:15,020
2016 I presented my project and this

00:08:11,390 --> 00:08:18,670
year it happened in Taiwan last month so

00:08:15,020 --> 00:08:22,540
I was fortunate enough to be part of the

00:08:18,670 --> 00:08:25,910
DEP confer as well and so I was

00:08:22,540 --> 00:08:28,940
organization administrator for net BBN

00:08:25,910 --> 00:08:32,810
with google Summer of Code so there was

00:08:28,940 --> 00:08:40,130
a G succession so that's that's me being

00:08:32,810 --> 00:08:41,479
presenting that project so before so

00:08:40,130 --> 00:08:43,520
most of the time in the embedded

00:08:41,479 --> 00:08:47,240
application we are mostly using the

00:08:43,520 --> 00:08:53,370
raspberry pi black BeagleBone black are

00:08:47,240 --> 00:08:57,389
do right so raspberry pi mostly it runs

00:08:53,370 --> 00:08:59,790
the the operating system is there has be

00:08:57,389 --> 00:09:03,449
end so how many of you are using

00:08:59,790 --> 00:09:08,430
Raspberry Pi already and raspbian with

00:09:03,449 --> 00:09:11,370
running okay so there comes the debian

00:09:08,430 --> 00:09:14,490
so if you haven't running if you haven't

00:09:11,370 --> 00:09:17,069
running it on your personal computer you

00:09:14,490 --> 00:09:25,740
might be using it for the raspberry

00:09:17,069 --> 00:09:28,290
raspberry pi so it's the free operating

00:09:25,740 --> 00:09:31,470
system it Durant's on raspberry hardware

00:09:28,290 --> 00:09:33,889
and then comes the BeagleBone black that

00:09:31,470 --> 00:09:36,120
is also one of the popular

00:09:33,889 --> 00:09:39,600
microcontroller microprocessors are used

00:09:36,120 --> 00:09:47,399
for embedded application they're also

00:09:39,600 --> 00:09:49,259
mostly it runs on Debian so if you want

00:09:47,399 --> 00:09:51,860
to know more about the embedded and

00:09:49,259 --> 00:09:57,720
Debian you can go to that website and

00:09:51,860 --> 00:10:01,069
learn more about it so yeah I think it's

00:09:57,720 --> 00:10:01,069
so fastly there yeah that's it

00:10:01,680 --> 00:10:10,660
[Applause]

00:10:08,700 --> 00:10:11,860
so that that tilts finished a little bit

00:10:10,660 --> 00:10:12,790
early so we've got plenty of time for

00:10:11,860 --> 00:10:23,650
questions if anyone has any questions

00:10:12,790 --> 00:10:26,200
about Debian thank you very very much

00:10:23,650 --> 00:10:28,480
for that I was wondering what was your

00:10:26,200 --> 00:10:30,730
google Summer of Code what was the first

00:10:28,480 --> 00:10:38,680
one that you were that was on the

00:10:30,730 --> 00:10:43,810
all-time computation okay thank you any

00:10:38,680 --> 00:10:46,390
more questions so I've tried running

00:10:43,810 --> 00:10:48,880
raspbian on Raspberry Pi but I haven't

00:10:46,390 --> 00:10:50,380
tried the Beagle bone in your experience

00:10:48,880 --> 00:10:56,470
how do you compared it to is it like

00:10:50,380 --> 00:10:58,720
easier so I I worked both with Raspberry

00:10:56,470 --> 00:11:00,100
Pi and BeagleBone black so mostly I

00:10:58,720 --> 00:11:02,890
think there's a problem it's a

00:11:00,100 --> 00:11:10,060
BeagleBone black for installing you

00:11:02,890 --> 00:11:12,279
might have faced problem so I had the

00:11:10,060 --> 00:11:15,160
problem installing but once you install

00:11:12,279 --> 00:11:17,230
it's normalized terminal but you don't

00:11:15,160 --> 00:11:18,990
get to get the graphical user interface

00:11:17,230 --> 00:11:22,209
but it's just a command-line interface

00:11:18,990 --> 00:11:24,520
but it's almost same as this if you are

00:11:22,209 --> 00:11:31,230
using Raspberry Pi just to come online

00:11:24,520 --> 00:11:34,830
it's same as that any more questions

00:11:31,230 --> 00:11:34,830

YouTube URL: https://www.youtube.com/watch?v=dqp710ByGok


