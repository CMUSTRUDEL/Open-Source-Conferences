Title: Create and Watch Kubernetes Resources With Python
Publication date: 2018-08-26
Playlist: PyCon Australia 2018
Description: 
	Oliver Nagy

https://2018.pycon-au.org/talks/44310-create-and-watch-kubernetes-resources-with-python/

A practical guide to using the Kubernetes API from Python in production.

Batteries are included: Python code, service account manifests, Dockerfile and
all commands to deploy directly to Google Kubernetes Engine (no affiliation).

Python, PyCon, PyConAU, australia, programming, sydney

This video is licensed under CC BY 3.0 AU - https://creativecommons.org/licenses/by/3.0/au/

PyCon Australia (“PyCon AU”) is the national conference for the Python Programming Community, bringing together professional, student and enthusiast developers with a love for developing with Python.

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 24 - 28 2018.

Python, PyCon, PyConAU
Captions: 
	00:00:02,090 --> 00:00:06,990
okay everyone will get started the last

00:00:04,650 --> 00:00:09,929
for lunch is Oliver Nagi who's going to

00:00:06,990 --> 00:00:12,540
be talking to us about how to create and

00:00:09,929 --> 00:00:14,270
watch humanities resources with Python

00:00:12,540 --> 00:00:18,539
can we get a round of applause please

00:00:14,270 --> 00:00:18,539
[Applause]

00:00:24,400 --> 00:00:28,480
now okay that's better

00:00:29,640 --> 00:00:34,540
so for some reason I decided that this

00:00:31,960 --> 00:00:37,000
year I'm going to add a logo to my talk

00:00:34,540 --> 00:00:38,680
in retrospect I'm not entirely sure why

00:00:37,000 --> 00:00:40,900
I did that because ultimately it doesn't

00:00:38,680 --> 00:00:42,489
add much naturally that's what I spend

00:00:40,900 --> 00:00:46,120
most of my time doing in the

00:00:42,489 --> 00:00:47,920
presentation so you have to admire the

00:00:46,120 --> 00:00:49,540
logo more than the presentation I was

00:00:47,920 --> 00:00:51,430
pretty happy about it at first and then

00:00:49,540 --> 00:00:53,890
yesterday having to talk by Jenny

00:00:51,430 --> 00:00:55,570
Rosenbaum and she explained how I can

00:00:53,890 --> 00:00:58,210
actually create them with machine

00:00:55,570 --> 00:00:59,890
learning not oh crap so all the all the

00:00:58,210 --> 00:01:01,690
time that I spend on this beautiful logo

00:00:59,890 --> 00:01:04,750
here I could have saved myself lot of

00:01:01,690 --> 00:01:07,150
effort so after I talked I got home

00:01:04,750 --> 00:01:09,010
inspired and I was faced should I fix

00:01:07,150 --> 00:01:11,140
the bug that I know is in the repository

00:01:09,010 --> 00:01:13,090
for the demo files or shall I create a

00:01:11,140 --> 00:01:16,570
better logo so did the bigger better

00:01:13,090 --> 00:01:18,400
logo of course and the thing that she

00:01:16,570 --> 00:01:19,810
had that really excited me was you can

00:01:18,400 --> 00:01:21,580
take just a picture of something which

00:01:19,810 --> 00:01:23,170
which I can do and you can take a

00:01:21,580 --> 00:01:25,950
picture of something else and then

00:01:23,170 --> 00:01:28,030
somehow this deep dream Network creates

00:01:25,950 --> 00:01:30,570
something looks like this like a

00:01:28,030 --> 00:01:34,050
Rembrandt defied version of your input

00:01:30,570 --> 00:01:36,730
that's great I can take my logo then and

00:01:34,050 --> 00:01:39,880
this pikemen logo because how hard can

00:01:36,730 --> 00:01:42,130
it be right and so put it in press enter

00:01:39,880 --> 00:01:46,030
and hope for my amazing art and that's

00:01:42,130 --> 00:01:47,560
what I got so I know she was very

00:01:46,030 --> 00:01:50,710
excited because apparently those

00:01:47,560 --> 00:01:53,140
networks they can create colors they

00:01:50,710 --> 00:01:56,920
were not in any of the input images and

00:01:53,140 --> 00:01:59,320
I really kind of visually didn't because

00:01:56,920 --> 00:02:02,740
I was a bit underwhelmed so the take

00:01:59,320 --> 00:02:04,840
away the icons from that one is that if

00:02:02,740 --> 00:02:07,570
the input image is already amazing I

00:02:04,840 --> 00:02:10,629
mean this is condensed this condensed

00:02:07,570 --> 00:02:12,909
raw talent of art right if it is that

00:02:10,629 --> 00:02:16,659
good then the network can't do anything

00:02:12,909 --> 00:02:19,540
better to it the other thing is machine

00:02:16,659 --> 00:02:21,129
learning is simply overrated so don't

00:02:19,540 --> 00:02:23,440
waste a time doing machine learning do

00:02:21,129 --> 00:02:26,019
kubernetes instead so which is obviously

00:02:23,440 --> 00:02:29,590
why I end this talk so this talk is a

00:02:26,019 --> 00:02:32,500
bit different because it is a it is the

00:02:29,590 --> 00:02:34,750
if I can do it you can do it talk I'm

00:02:32,500 --> 00:02:37,420
going to talk to kubernetes do a couple

00:02:34,750 --> 00:02:39,370
of things with it and I'm going to live

00:02:37,420 --> 00:02:40,990
code everything believe it or not which

00:02:39,370 --> 00:02:42,130
means I'm also going to run or use a

00:02:40,990 --> 00:02:44,140
live cluster and

00:02:42,130 --> 00:02:45,640
kubernetes engine in this case which

00:02:44,140 --> 00:02:48,730
means we will need an internet

00:02:45,640 --> 00:02:50,080
connection so in the next 20 minutes if

00:02:48,730 --> 00:02:52,360
we have the internet connection I'm

00:02:50,080 --> 00:02:55,090
going to show you how you can do a

00:02:52,360 --> 00:02:57,130
couple of simple things like listing

00:02:55,090 --> 00:02:58,780
creating and deleting namespaces and

00:02:57,130 --> 00:03:00,610
they're going to be disappointed by how

00:02:58,780 --> 00:03:03,400
easy that one actually is because it is

00:03:00,610 --> 00:03:06,460
just a normal get post and delete

00:03:03,400 --> 00:03:08,170
request then afterwards I do something

00:03:06,460 --> 00:03:10,120
slightly more sophisticated I'm going to

00:03:08,170 --> 00:03:11,620
subscribe to various resources on

00:03:10,120 --> 00:03:13,960
kubernetes so you can actually watch

00:03:11,620 --> 00:03:15,280
them as they change very useful if

00:03:13,960 --> 00:03:17,530
you're looking after its last time

00:03:15,280 --> 00:03:20,080
because it allows you to easily keep a

00:03:17,530 --> 00:03:22,150
tap on what's changing soap or dice or a

00:03:20,080 --> 00:03:25,780
pod code evicted you immediately get the

00:03:22,150 --> 00:03:27,340
notification lastly I'm going to write

00:03:25,780 --> 00:03:29,560
believe it or not as more English

00:03:27,340 --> 00:03:31,960
controller and what that English

00:03:29,560 --> 00:03:33,820
controller does is it adds a feature

00:03:31,960 --> 00:03:35,740
that is missing from the Google English

00:03:33,820 --> 00:03:37,210
controller is anybody here running a

00:03:35,740 --> 00:03:42,310
general stack from google kubernetes

00:03:37,210 --> 00:03:45,460
engine by any chance no one oh wow ok

00:03:42,310 --> 00:03:47,350
but if you were so you were if you were

00:03:45,460 --> 00:03:49,480
you would be unhappy with the status quo

00:03:47,350 --> 00:03:51,220
because you cannot attach a timeout

00:03:49,480 --> 00:03:53,110
annotation to your ingress which means

00:03:51,220 --> 00:03:54,970
all your load balancers have a 30-second

00:03:53,110 --> 00:03:57,700
timeout which is not long enough to

00:03:54,970 --> 00:03:59,050
proxy WebSockets and I'm going to fix it

00:03:57,700 --> 00:04:01,510
even though nobody of you will obviously

00:03:59,050 --> 00:04:03,160
go into chaos just realize but I'm going

00:04:01,510 --> 00:04:08,220
to fix that anyway in a completely

00:04:03,160 --> 00:04:08,220
non-invasive way so let's get started oh

00:04:09,510 --> 00:04:17,680
my gosh one thing by the way before I

00:04:14,290 --> 00:04:19,030
get started all the files or all the

00:04:17,680 --> 00:04:20,620
demos that I'm creating available in

00:04:19,030 --> 00:04:24,310
this github repository if you want to

00:04:20,620 --> 00:04:26,230
follow on in your own time so we are

00:04:24,310 --> 00:04:27,700
going to need the OS library have you

00:04:26,230 --> 00:04:29,290
seen in the second and I going to need

00:04:27,700 --> 00:04:31,600
these Utahns library which is in this

00:04:29,290 --> 00:04:33,310
repository two completely flat library

00:04:31,600 --> 00:04:35,080
only hundred sixty lines of code to save

00:04:33,310 --> 00:04:38,140
me some boilerplate nothing much going

00:04:35,080 --> 00:04:40,600
on and the first thing we need is our

00:04:38,140 --> 00:04:42,840
ten dication credentials for kubernetes

00:04:40,600 --> 00:04:48,030
which are in your queue config file and

00:04:42,840 --> 00:04:48,030
i saved myself some typing here by

00:04:52,580 --> 00:04:57,690
so this conf is simply a named tuple has

00:04:55,980 --> 00:04:59,940
four entries two of them are related to

00:04:57,690 --> 00:05:02,370
the SSL Certificates so they can talk to

00:04:59,940 --> 00:05:04,140
your server one is the server address

00:05:02,370 --> 00:05:06,330
itself and the last one is the bearer

00:05:04,140 --> 00:05:08,820
token the second thing I need in order

00:05:06,330 --> 00:05:10,470
to talk to kubernetes is a client I'm

00:05:08,820 --> 00:05:23,370
going to use the request library in this

00:05:10,470 --> 00:05:26,730
case so this is another convenience rapa

00:05:23,370 --> 00:05:28,020
simply because I need to make it aware

00:05:26,730 --> 00:05:30,360
of those SSL thing instead of just

00:05:28,020 --> 00:05:33,330
mentioned that is in this Kampf and I

00:05:30,360 --> 00:05:35,280
need to add authorization header it

00:05:33,330 --> 00:05:36,900
contains the bearer token I don't want

00:05:35,280 --> 00:05:40,290
to show you the bearer token that's why

00:05:36,900 --> 00:05:42,390
I put that away in this setup routine

00:05:40,290 --> 00:05:43,890
here but all that is is a normal request

00:05:42,390 --> 00:05:45,780
session object there's nothing special

00:05:43,890 --> 00:05:47,400
about it and believe it or not that is

00:05:45,780 --> 00:05:49,710
already all you need in order to get

00:05:47,400 --> 00:05:52,760
cracking on kubernetes so let's get some

00:05:49,710 --> 00:05:52,760
namespaces for instance

00:06:01,910 --> 00:06:14,090
that's some API everyone spaces if the

00:06:06,980 --> 00:06:17,260
worked it will come back to the 200 and

00:06:14,090 --> 00:06:19,580
you will be presented with a namespace

00:06:17,260 --> 00:06:21,380
manifest so I namespace lists manifest

00:06:19,580 --> 00:06:23,210
so all you gotta do is now everything

00:06:21,380 --> 00:06:25,580
accumulated returns is chasing obviously

00:06:23,210 --> 00:06:30,260
so all you gotta do is iterate over this

00:06:25,580 --> 00:06:32,480
thing idiom testes filled items and each

00:06:30,260 --> 00:06:34,820
of these items is a namespace manifest

00:06:32,480 --> 00:06:36,980
it has like every manifest it has

00:06:34,820 --> 00:06:45,980
metadata and we're going to use that one

00:06:36,980 --> 00:06:49,450
to print out the names of the namespaces

00:06:45,980 --> 00:06:49,450
and see if it actually worked

00:06:50,260 --> 00:06:55,430
and voila these are all the namespaces

00:06:52,700 --> 00:06:58,990
on your kubernetes cluster and just to

00:06:55,430 --> 00:07:01,220
prove to you there's really nothing that

00:06:58,990 --> 00:07:03,640
big enough to read by the way I can make

00:07:01,220 --> 00:07:03,640
it bigger

00:07:11,420 --> 00:07:18,600
not surprising same namespaces obviously

00:07:14,190 --> 00:07:20,580
so you have already reinvented one part

00:07:18,600 --> 00:07:22,710
of the queue control command so

00:07:20,580 --> 00:07:24,900
similarly if you want to this is for

00:07:22,710 --> 00:07:26,850
listening spaces similarly if you want

00:07:24,900 --> 00:07:35,700
to create and delete namespaces it works

00:07:26,850 --> 00:07:37,110
pretty much the same so for a create

00:07:35,700 --> 00:07:40,590
namespace it's going to be a post

00:07:37,110 --> 00:07:43,320
request we thought and it'll pass along

00:07:40,590 --> 00:07:47,330
a namespace manifest I show you that in

00:07:43,320 --> 00:07:47,330
a second I'm just going to load it here

00:08:03,840 --> 00:08:07,780
so that's the name says money fish has

00:08:06,340 --> 00:08:09,880
its ton of stuff that you see when you

00:08:07,780 --> 00:08:12,130
look up the documentation for Q control

00:08:09,880 --> 00:08:13,390
in this case it's going to be obviously

00:08:12,130 --> 00:08:16,000
of kind namespace and we're going to

00:08:13,390 --> 00:08:17,530
create a namespace called Python and

00:08:16,000 --> 00:08:19,960
similarly if I want to delete the

00:08:17,530 --> 00:08:22,000
namespace it's really not hard to guess

00:08:19,960 --> 00:08:24,220
or the gotta do is a delete request and

00:08:22,000 --> 00:08:27,610
then you specify the namespace that he

00:08:24,220 --> 00:08:28,270
would like to delete the only change is

00:08:27,610 --> 00:08:30,490
it

00:08:28,270 --> 00:08:32,350
if the namespace was created it's a 201

00:08:30,490 --> 00:08:35,020
if the namespace already existed it's a

00:08:32,350 --> 00:08:42,430
409 both of them are acceptable right

00:08:35,020 --> 00:08:44,410
now it was a neat and repatha yeah and

00:08:42,430 --> 00:08:47,350
it has now created and delete the

00:08:44,410 --> 00:08:49,420
namespace but so I say right can you

00:08:47,350 --> 00:08:58,270
prove that to you that this really did

00:08:49,420 --> 00:09:00,010
happen so these are just 44 namespaces

00:08:58,270 --> 00:09:01,810
that we have when I run my program you

00:09:00,010 --> 00:09:03,220
receive will immediately at the Python

00:09:01,810 --> 00:09:06,070
namespace and art was immediately

00:09:03,220 --> 00:09:08,200
schedule it for deletion again and that

00:09:06,070 --> 00:09:10,630
believe it or not is really all you need

00:09:08,200 --> 00:09:12,790
to know in order to work with kubernetes

00:09:10,630 --> 00:09:15,160
it always comes down to obviously

00:09:12,790 --> 00:09:18,760
knowing your endpoint api with a

00:09:15,160 --> 00:09:21,250
namespaces in that case and then doing a

00:09:18,760 --> 00:09:22,810
get in if you want a list resource doing

00:09:21,250 --> 00:09:24,910
a post if you want to create it you can

00:09:22,810 --> 00:09:28,060
do a patch i'm not going to show that to

00:09:24,910 --> 00:09:29,050
patch it they lead to delete it and it's

00:09:28,060 --> 00:09:30,490
really that simple

00:09:29,050 --> 00:09:32,080
so if you were hoping for anything more

00:09:30,490 --> 00:09:33,180
sophisticated that's about as bad as it

00:09:32,080 --> 00:09:36,250
gets

00:09:33,180 --> 00:09:38,290
now namespaces in its in an offensive

00:09:36,250 --> 00:09:40,120
not so exciting obviously you can do

00:09:38,290 --> 00:09:41,980
that with every source that kubernetes

00:09:40,120 --> 00:09:44,020
has and you don't really have to change

00:09:41,980 --> 00:09:45,280
much in terms of your code so these are

00:09:44,020 --> 00:09:47,500
all the ports that are running on this

00:09:45,280 --> 00:09:49,990
cluster at the moment we can make this

00:09:47,500 --> 00:09:55,690
here look a bit more informative and for

00:09:49,990 --> 00:10:04,030
instance print out the namespace and now

00:09:55,690 --> 00:10:05,410
I know which saving would be good so and

00:10:04,030 --> 00:10:08,260
now I know that I have in my default

00:10:05,410 --> 00:10:09,910
namespace I have a sleeper port my hello

00:10:08,260 --> 00:10:11,680
world namespace I come to them and later

00:10:09,910 --> 00:10:13,750
there are two ports running and queue

00:10:11,680 --> 00:10:16,650
system is just a normal system namespace

00:10:13,750 --> 00:10:16,650
with their own ports

00:10:16,950 --> 00:10:21,580
there is it in order to get to ports and

00:10:19,690 --> 00:10:24,100
you get to other is always an exact same

00:10:21,580 --> 00:10:25,690
Bay I only have to figure out the UAM

00:10:24,100 --> 00:10:28,360
here so if you want to see deployments

00:10:25,690 --> 00:10:30,310
you would think they might be here but

00:10:28,360 --> 00:10:32,110
they know because deployments are no

00:10:30,310 --> 00:10:34,690
part of the core API is I have to go

00:10:32,110 --> 00:10:37,870
look at the kubernetes api and then you

00:10:34,690 --> 00:10:39,660
find there an API is extensions and for

00:10:37,870 --> 00:10:46,180
this version of the cluster they are in

00:10:39,660 --> 00:10:48,100
still in beta and you get all your

00:10:46,180 --> 00:10:50,230
deployments in the exact same way so

00:10:48,100 --> 00:10:52,180
it's really rather boring in the end at

00:10:50,230 --> 00:10:53,620
the end of the day so I'm not going to

00:10:52,180 --> 00:10:55,540
bore you with listing more resources

00:10:53,620 --> 00:10:57,640
here another thing you can do with I

00:10:55,540 --> 00:10:59,260
mentioned before is subscribing to

00:10:57,640 --> 00:11:01,360
certain endpoints so that you get

00:10:59,260 --> 00:11:03,580
notified whenever something changes so

00:11:01,360 --> 00:11:05,110
that is I find it very useful when

00:11:03,580 --> 00:11:06,940
you're looking after clusters because

00:11:05,110 --> 00:11:08,740
you can subscribe to the port's endpoint

00:11:06,940 --> 00:11:10,480
for instance and then every time

00:11:08,740 --> 00:11:12,970
something changes by the ports report

00:11:10,480 --> 00:11:15,400
gets deployed or and gets a big period

00:11:12,970 --> 00:11:17,380
or gets modified you immediately get the

00:11:15,400 --> 00:11:19,210
notification you can calculate with a

00:11:17,380 --> 00:11:21,430
slack notification if you want or send

00:11:19,210 --> 00:11:24,070
yourself an email or tweet about it if

00:11:21,430 --> 00:11:25,810
you feel it feel like it and it's a

00:11:24,070 --> 00:11:28,150
really good way to keep it kept on your

00:11:25,810 --> 00:11:30,070
cluster so maybe not on Google scale but

00:11:28,150 --> 00:11:33,910
for a start up scale that's actually

00:11:30,070 --> 00:11:35,710
very nice shortcut in initially just to

00:11:33,910 --> 00:11:37,810
keep it tape on all the things that you

00:11:35,710 --> 00:11:47,470
cover because they're doing so I'm going

00:11:37,810 --> 00:11:50,890
to show that with the ports all you need

00:11:47,470 --> 00:11:53,110
is which is true again it's just

00:11:50,890 --> 00:11:54,550
straight from the API and because this

00:11:53,110 --> 00:11:56,470
is now a streaming response we need to

00:11:54,550 --> 00:11:58,090
tell our request client that this is

00:11:56,470 --> 00:12:01,660
streaming response otherwise it will

00:11:58,090 --> 00:12:04,480
block forever which wasn't means that

00:12:01,660 --> 00:12:07,810
this one here that's also purely from

00:12:04,480 --> 00:12:13,110
the rest library during the iterator one

00:12:07,810 --> 00:12:13,110
lines just comes back as binary blobs

00:12:20,290 --> 00:12:24,640
they're with me for a second here so

00:12:27,550 --> 00:12:33,140
what you get is a type which is just a

00:12:30,560 --> 00:12:34,339
string and it simply says edit modified

00:12:33,140 --> 00:12:36,500
or deleted those are the three options

00:12:34,339 --> 00:12:39,260
and you get the object which is again

00:12:36,500 --> 00:12:42,650
the normal manifest file that we

00:12:39,260 --> 00:12:45,970
received before so I can now do the same

00:12:42,650 --> 00:12:45,970
thing again and run this program

00:12:55,490 --> 00:12:59,660
yes or most isn't it

00:13:05,160 --> 00:13:09,480
so here is the same information as

00:13:07,410 --> 00:13:10,920
before because every time you watch an

00:13:09,480 --> 00:13:12,870
endpoint you first get a list of all the

00:13:10,920 --> 00:13:14,880
resources that are there just as if you

00:13:12,870 --> 00:13:16,860
had it listed normally but yours are now

00:13:14,880 --> 00:13:17,370
getting a take of what it actually what

00:13:16,860 --> 00:13:19,830
happened

00:13:17,370 --> 00:13:21,240
so initially kubernetes will tell you

00:13:19,830 --> 00:13:23,940
every resource that was already there

00:13:21,240 --> 00:13:25,890
has the Edit tag just the way it works

00:13:23,940 --> 00:13:30,210
and I notice the program is still

00:13:25,890 --> 00:13:36,750
running so if I now kill my sleeper pod

00:13:30,210 --> 00:13:39,660
here for instance then you will see I

00:13:36,750 --> 00:13:41,730
get notification it was modified that's

00:13:39,660 --> 00:13:43,680
when got scheduled for deletion st. was

00:13:41,730 --> 00:13:45,390
in a deployment kubernetes immediately

00:13:43,680 --> 00:13:47,640
spun up a new port it's this one here

00:13:45,390 --> 00:13:50,430
and this port goes through the various

00:13:47,640 --> 00:13:52,200
startup phases and eventually the other

00:13:50,430 --> 00:13:54,300
port will be expunged and you will see a

00:13:52,200 --> 00:13:56,730
delete it here so it's just a very

00:13:54,300 --> 00:14:01,140
convenient way of keeping a tab on all

00:13:56,730 --> 00:14:03,390
your ports in your cluster directed here

00:14:01,140 --> 00:14:04,860
so you can tailor it down I'm not really

00:14:03,390 --> 00:14:06,870
going to show it in detail but if you

00:14:04,860 --> 00:14:10,320
just interested in ports in a certain

00:14:06,870 --> 00:14:15,590
namespace again the API is very clean

00:14:10,320 --> 00:14:17,640
it's just 44 and you know it's port now

00:14:15,590 --> 00:14:20,580
just make it like this one and then you

00:14:17,640 --> 00:14:23,820
only get the ports in one namespace so

00:14:20,580 --> 00:14:25,290
that's for the watching part now the

00:14:23,820 --> 00:14:26,820
last thing I want to show that almost

00:14:25,290 --> 00:14:28,830
some people will be interested in but

00:14:26,820 --> 00:14:31,020
nobody is using it on Google class so

00:14:28,830 --> 00:14:32,340
obviously maybe not that interesting but

00:14:31,020 --> 00:14:36,090
the last thing is building a small

00:14:32,340 --> 00:14:37,980
ingress controller for Google Cloud all

00:14:36,090 --> 00:14:40,230
right not the replacement it's simply an

00:14:37,980 --> 00:14:41,490
extension because one thing that if I

00:14:40,230 --> 00:14:43,500
mentioned already the one thing that

00:14:41,490 --> 00:14:45,270
Google ingress controller doesn't do is

00:14:43,500 --> 00:14:47,180
it doesn't have a timeout a notation so

00:14:45,270 --> 00:14:49,980
you can put one imperil ignore it and

00:14:47,180 --> 00:14:52,020
that's been a long-standing issue

00:14:49,980 --> 00:14:53,580
there's been a github ticket filed about

00:14:52,020 --> 00:14:55,440
18 months ago and it's a very long

00:14:53,580 --> 00:14:58,080
thread and for some reason or another

00:14:55,440 --> 00:15:01,020
that I don't fully understand myself it

00:14:58,080 --> 00:15:03,120
just just hasn't made it into the

00:15:01,020 --> 00:15:04,710
English controller so you can't hack the

00:15:03,120 --> 00:15:06,330
angular controller and replace it that's

00:15:04,710 --> 00:15:09,360
one option or you can just use a few

00:15:06,330 --> 00:15:11,640
lines of Python and edit yourself

00:15:09,360 --> 00:15:13,740
without touching the original English

00:15:11,640 --> 00:15:15,300
controller so the way that works is the

00:15:13,740 --> 00:15:18,380
way every English controller works is

00:15:15,300 --> 00:15:19,880
you are watching the ingress ul

00:15:18,380 --> 00:15:22,460
point just like we have watched what's

00:15:19,880 --> 00:15:24,380
here and every time the English changes

00:15:22,460 --> 00:15:26,600
you're going to read the annotation you

00:15:24,380 --> 00:15:28,190
extract the back ends and you extract

00:15:26,600 --> 00:15:30,500
this timeout value that it would like to

00:15:28,190 --> 00:15:33,400
have and then use a normal Google Cloud

00:15:30,500 --> 00:15:36,560
API and set the timeout value for those

00:15:33,400 --> 00:15:39,830
and power for those backends and voila

00:15:36,560 --> 00:15:42,110
you have a timeout annotation or you can

00:15:39,830 --> 00:15:47,200
support time arbitrary timeouts on the

00:15:42,110 --> 00:15:47,200
Google Cloud ingresses as well so the

00:15:58,610 --> 00:16:06,890
so down here we need to get the the back

00:16:01,770 --> 00:16:06,890
ends that will be in

00:16:19,309 --> 00:16:26,429
so and similarly the timeout that we can

00:16:22,920 --> 00:16:27,899
then specify will be a quote this one

00:16:26,429 --> 00:16:30,299
here the Python demo timeout you can

00:16:27,899 --> 00:16:32,369
really make it name it whatever you want

00:16:30,299 --> 00:16:35,879
I was just pretty certain this name

00:16:32,369 --> 00:16:44,220
would not clash and then here for the

00:16:35,879 --> 00:16:47,629
Google API to timeout

00:16:44,220 --> 00:16:50,579
so at this part I'm not going to like

00:16:47,629 --> 00:16:52,170
some things with my keyboard this part

00:16:50,579 --> 00:16:55,439
I'm not going to live code but you find

00:16:52,170 --> 00:16:57,179
the example here in the repository this

00:16:55,439 --> 00:16:58,679
is the full ingress controller which I

00:16:57,179 --> 00:17:00,629
have already deployed I'm going to prove

00:16:58,679 --> 00:17:02,309
to you it actually works this is

00:17:00,629 --> 00:17:04,110
precisely what we had before trading the

00:17:02,309 --> 00:17:04,799
client this is watching the ingress

00:17:04,110 --> 00:17:06,750
endpoint

00:17:04,799 --> 00:17:08,309
this is iterating over the events that

00:17:06,750 --> 00:17:10,049
come in you're going to ignore

00:17:08,309 --> 00:17:11,639
everything that's not a modified event

00:17:10,049 --> 00:17:14,549
you can ask me afterwards why we don't

00:17:11,639 --> 00:17:16,439
worry about edit this is extracting

00:17:14,549 --> 00:17:18,480
their backends that the English

00:17:16,439 --> 00:17:20,939
controller has provision for this

00:17:18,480 --> 00:17:23,549
ingress this is unpacking the timer

00:17:20,939 --> 00:17:25,949
value that we will add and doing some

00:17:23,549 --> 00:17:28,169
error checking and then down here this

00:17:25,949 --> 00:17:29,460
is the one core this is the one function

00:17:28,169 --> 00:17:31,559
that I didn't write explicitly

00:17:29,460 --> 00:17:34,260
and it's just a pet request by the

00:17:31,559 --> 00:17:35,820
Google Cloud API to set the timeout off

00:17:34,260 --> 00:17:39,809
your ingress is to whatever you would

00:17:35,820 --> 00:17:40,470
like so and this is how it works this is

00:17:39,809 --> 00:17:43,279
how it looks

00:17:40,470 --> 00:17:43,279
currently

00:17:48,480 --> 00:17:58,710
the timeout is 200 seconds I cannot go

00:17:53,160 --> 00:18:11,400
and edit that ingress my hello world

00:17:58,710 --> 00:18:15,770
namespace and set it up to 50 then I

00:18:11,400 --> 00:18:15,770
should have shown you that one as well I

00:18:21,860 --> 00:18:28,440
gave you already too late doesn't matter

00:18:26,220 --> 00:18:32,190
point is this one here will now

00:18:28,440 --> 00:18:34,170
hopefully have changed to 50 seconds it

00:18:32,190 --> 00:18:40,460
has not of course as the first time it

00:18:34,170 --> 00:18:43,110
has not worked it was supposed to change

00:18:40,460 --> 00:18:53,280
okay this is now really indeed a bit

00:18:43,110 --> 00:18:56,030
embarrassing maybe something would stay

00:18:53,280 --> 00:18:56,030
with the connection

00:19:17,030 --> 00:19:21,230
let's try it one more time

00:19:33,380 --> 00:19:38,179
I hate God so now it has picked up the

00:19:36,200 --> 00:19:39,710
enjoy bus listen to this English end

00:19:38,179 --> 00:19:41,409
point and now it has picked up in the

00:19:39,710 --> 00:19:43,490
change it will read the annotation and

00:19:41,409 --> 00:19:45,980
extract it back end from that one which

00:19:43,490 --> 00:19:47,750
is this thing here and the time avail in

00:19:45,980 --> 00:19:49,669
our 60 and the same for the second bacon

00:19:47,750 --> 00:19:52,159
so in Google I would always two backends

00:19:49,669 --> 00:19:54,529
140 Ford one for the actual port but

00:19:52,159 --> 00:20:00,529
it's a technical detail and even now go

00:19:54,529 --> 00:20:02,389
here and refresh that one it has changed

00:20:00,529 --> 00:20:03,529
the timeout to 60 seconds and I didn't

00:20:02,389 --> 00:20:04,820
have to hack the original English

00:20:03,529 --> 00:20:06,710
control arm it is completely

00:20:04,820 --> 00:20:09,200
complementary to the one that Google

00:20:06,710 --> 00:20:11,029
already has if one day they do at the

00:20:09,200 --> 00:20:12,470
timeout all you have to do is kill that

00:20:11,029 --> 00:20:14,960
port and you're good to go

00:20:12,470 --> 00:20:16,509
and that's how you can fix a problem

00:20:14,960 --> 00:20:19,029
with a few lines of Python code that

00:20:16,509 --> 00:20:22,580
hasn't been fixed in 18 months for

00:20:19,029 --> 00:20:26,450
reasons I don't fully understand okay

00:20:22,580 --> 00:20:33,060
and that is the end of my talk

00:20:26,450 --> 00:20:35,920
[Applause]

00:20:33,060 --> 00:20:36,490
hmm oh yes oh yeah I think we have time

00:20:35,920 --> 00:20:44,920
for

00:20:36,490 --> 00:20:47,020
we've got why not use the Python client

00:20:44,920 --> 00:20:48,460
for kubernetes because in particular for

00:20:47,020 --> 00:20:50,920
doing for a watch one of the things

00:20:48,460 --> 00:20:53,020
you're not handling is if you lose the

00:20:50,920 --> 00:20:54,490
connection when you reconnect you're

00:20:53,020 --> 00:20:56,740
gonna get the whole object stream again

00:20:54,490 --> 00:20:58,450
whereas the kubernetes client will

00:20:56,740 --> 00:20:59,710
automatically reckon it for you and will

00:20:58,450 --> 00:21:03,010
only give you the results from the

00:20:59,710 --> 00:21:04,480
resource version you're up to yeah so

00:21:03,010 --> 00:21:05,980
the reason why I don't use is the

00:21:04,480 --> 00:21:08,050
efficient kubernetes Python client is

00:21:05,980 --> 00:21:10,060
because I don't like it that's the

00:21:08,050 --> 00:21:11,890
simple reason and the reason why I don't

00:21:10,060 --> 00:21:13,690
like it is because it goes to great

00:21:11,890 --> 00:21:16,900
lengths to hide all the things from you

00:21:13,690 --> 00:21:18,940
that you are interested in so the

00:21:16,900 --> 00:21:20,620
official combination communities Python

00:21:18,940 --> 00:21:22,990
client is just as big of wrapper around

00:21:20,620 --> 00:21:24,130
every possibility is so if you install

00:21:22,990 --> 00:21:25,900
that library you're getting a couple of

00:21:24,130 --> 00:21:28,740
dependencies and it installs believe it

00:21:25,900 --> 00:21:31,510
or not around 220,000 lines of code and

00:21:28,740 --> 00:21:34,240
all it does it has one wrapper for each

00:21:31,510 --> 00:21:36,400
of these and you do not actually have

00:21:34,240 --> 00:21:38,830
access to the underlying connection you

00:21:36,400 --> 00:21:40,450
do not know you don't even know which

00:21:38,830 --> 00:21:43,150
server you're talking to you do not know

00:21:40,450 --> 00:21:44,770
which headers percent all of those

00:21:43,150 --> 00:21:47,470
things I find is very useful for

00:21:44,770 --> 00:21:49,990
debugging and I didn't have that one in

00:21:47,470 --> 00:21:52,750
terms of the particular example as I

00:21:49,990 --> 00:21:54,670
mentioned with watch all it does is it

00:21:52,750 --> 00:21:56,950
takes the last resource element or the

00:21:54,670 --> 00:21:58,570
last resource version and automatically

00:21:56,950 --> 00:22:00,670
reconnects and passes they don't as a

00:21:58,570 --> 00:22:02,950
resource version parameter so it's

00:22:00,670 --> 00:22:04,060
literally a three or four line extension

00:22:02,950 --> 00:22:06,850
and then you can have the exact same

00:22:04,060 --> 00:22:08,440
behavior but you stay in control of your

00:22:06,850 --> 00:22:10,450
connection so you know your connection

00:22:08,440 --> 00:22:12,430
parameters rather having some proxy

00:22:10,450 --> 00:22:14,710
library doing something under the hood

00:22:12,430 --> 00:22:18,310
that you do not fully understand that's

00:22:14,710 --> 00:22:20,200
why I use that one you may wanna have a

00:22:18,310 --> 00:22:22,960
look at the openshift client like it's

00:22:20,200 --> 00:22:24,610
still kubernetes it has a dynamic client

00:22:22,960 --> 00:22:27,150
so instead of a hugely generated swagger

00:22:24,610 --> 00:22:29,140
api one it's 500 lines of Python code

00:22:27,150 --> 00:22:30,730
dynamically queries all the resource

00:22:29,140 --> 00:22:32,470
types and generators on flights a lot

00:22:30,730 --> 00:22:34,540
simple and easily you don't do all the

00:22:32,470 --> 00:22:36,310
different class types okay I didn't know

00:22:34,540 --> 00:22:38,980
about that one yeah I might used it but

00:22:36,310 --> 00:22:40,420
as I said I wanted this one to be from

00:22:38,980 --> 00:22:42,190
first principles just to show you

00:22:40,420 --> 00:22:43,540
there's really no secrets that are baked

00:22:42,190 --> 00:22:45,250
into those libraries it's not difficult

00:22:43,540 --> 00:22:48,520
to talk to kubernetes

00:22:45,250 --> 00:22:51,060
directly with the normal rest line any

00:22:48,520 --> 00:22:51,060
more questions

00:22:54,630 --> 00:23:01,950
okay well we'll be having lunch can we

00:22:57,460 --> 00:23:01,950
get a round of applause for Oliver and

00:23:05,790 --> 00:23:11,130
we have of course the lovely mark for

00:23:08,350 --> 00:23:11,130

YouTube URL: https://www.youtube.com/watch?v=ck-bB5tqZj4


