Title: Dynamic web pages without Javascript
Publication date: 2018-08-24
Playlist: PyCon Australia 2018
Description: 
	Tim Bell

https://2018.pycon-au.org/talks/45351-dynamic-web-pages-without-javascript/

Intercooler is a Javascript library that allows you to make dynamic web pages without writing any JS yourself. This talk demonstrates how to use Intercooler to add dynamic functionality to a Django app. It will also cover a number of apps that make using Intercooler with Django even easier.

Python, PyCon, PyConAU, australia, programming, sydney

This video is licensed under CC BY 3.0 AU ‹https://creativecommons.org/licenses/by/3.0/au/›.

PyCon Australia (“PyCon AU”) is the national conference for the Python Programming Community, bringing together professional, student and enthusiast developers with a love for developing with Python.

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 24 - 28 2018.

Python, PyCon, PyConAU
Captions: 
	00:00:00,030 --> 00:00:08,189
microphone on and then I can actually

00:00:01,319 --> 00:00:12,120
say thank you right so thanks for that

00:00:08,189 --> 00:00:15,599
introduction my talk dynamic web pages

00:00:12,120 --> 00:00:17,960
work JavaScript okay I lied just a

00:00:15,599 --> 00:00:21,560
little bit

00:00:17,960 --> 00:00:21,560
there's JavaScript

00:00:22,900 --> 00:00:31,349
sorry sorry that's not sinking

00:01:08,460 --> 00:01:15,070
there we go sorry about that hitch as I

00:01:11,440 --> 00:01:17,410
said I lied there is some JavaScript but

00:01:15,070 --> 00:01:23,020
you don't need to write it yourself so

00:01:17,410 --> 00:01:25,690
that's kind of the same thing here's a

00:01:23,020 --> 00:01:27,850
scenario let's say that you're new to

00:01:25,690 --> 00:01:32,920
web development you're new to Django

00:01:27,850 --> 00:01:35,110
maybe even new to Python maybe you've

00:01:32,920 --> 00:01:36,820
just done the Django tutorial or done

00:01:35,110 --> 00:01:39,910
the Django girl session you've made a

00:01:36,820 --> 00:01:42,160
web app it's you've actually written

00:01:39,910 --> 00:01:43,660
something as opposed to the the first

00:01:42,160 --> 00:01:44,890
the keynote this morning where it says

00:01:43,660 --> 00:01:46,990
you know you're not done anything yet

00:01:44,890 --> 00:01:53,140
you've made aware that app web app but

00:01:46,990 --> 00:01:56,200
it's very web 1.0 app when you enter

00:01:53,140 --> 00:01:58,870
data in a form nothing happens until you

00:01:56,200 --> 00:01:59,620
hit the submit button and then when you

00:01:58,870 --> 00:02:03,100
hit the submit button

00:01:59,620 --> 00:02:04,210
you know you go to a new page if you're

00:02:03,100 --> 00:02:06,400
searching for something

00:02:04,210 --> 00:02:15,150
there aren't any search suggestions it's

00:02:06,400 --> 00:02:20,430
all a bit last decade so what is the

00:02:15,150 --> 00:02:25,270
sorry you don't like JavaScript who does

00:02:20,430 --> 00:02:28,750
there are frameworks that use JavaScript

00:02:25,270 --> 00:02:32,760
like react and view that are very

00:02:28,750 --> 00:02:32,760
commonly used to do all these very fancy

00:02:33,120 --> 00:02:39,580
web 2.0 apps you know Facebook and and

00:02:36,550 --> 00:02:41,110
and you know getup users I don't know

00:02:39,580 --> 00:02:43,450
what it does but you get all this kind

00:02:41,110 --> 00:02:45,850
of interaction but the point of this

00:02:43,450 --> 00:02:47,410
talk is that those are very JavaScript

00:02:45,850 --> 00:02:49,690
intensive and we want to get some of

00:02:47,410 --> 00:02:53,260
that without having to do all that

00:02:49,690 --> 00:02:53,709
JavaScript so what to do well here's the

00:02:53,260 --> 00:02:56,110
solution

00:02:53,709 --> 00:02:57,940
it's called intercooler and that is an

00:02:56,110 --> 00:02:59,080
intercooler it's a cross-section view of

00:02:57,940 --> 00:03:02,050
an intercooler from an ingersoll-rand

00:02:59,080 --> 00:03:03,760
class a a two air compressor from 1910

00:03:02,050 --> 00:03:06,160
according to the Wikipedia page on

00:03:03,760 --> 00:03:07,420
intercoolers and it looks nice but

00:03:06,160 --> 00:03:09,100
that's actually not what I'm here to

00:03:07,420 --> 00:03:12,220
talk about I'm going to talk about

00:03:09,100 --> 00:03:15,100
intercooler j/s or just intercooler for

00:03:12,220 --> 00:03:16,900
short I'm not sure what relationship the

00:03:15,100 --> 00:03:19,540
two intercoolers have but nevermind

00:03:16,900 --> 00:03:21,819
let's just keep trucking along it is a

00:03:19,540 --> 00:03:23,720
JavaScript library

00:03:21,819 --> 00:03:26,390
but you don't need to write the

00:03:23,720 --> 00:03:28,459
JavaScript and I'm not going to do any

00:03:26,390 --> 00:03:30,620
JavaScript in this talk but there are

00:03:28,459 --> 00:03:32,480
some times that maybe you do want to

00:03:30,620 --> 00:03:33,980
write a little bit to get some extra

00:03:32,480 --> 00:03:36,410
functionality but again I'm not going to

00:03:33,980 --> 00:03:41,120
cover that part in this talk so how does

00:03:36,410 --> 00:03:43,330
it work we're stepping away a little bit

00:03:41,120 --> 00:03:46,069
from the absolute beginners so I'll

00:03:43,330 --> 00:03:48,459
describe it in the technological terms

00:03:46,069 --> 00:03:51,380
that I imagine most of you familiar with

00:03:48,459 --> 00:03:54,080
what intercooler does is send HTTP

00:03:51,380 --> 00:03:56,450
requests via Ajax when particular events

00:03:54,080 --> 00:03:59,060
like interacting with a link or a form

00:03:56,450 --> 00:04:00,940
occur so intercooler then takes the

00:03:59,060 --> 00:04:04,040
response to the HTTP request and

00:04:00,940 --> 00:04:07,790
replaces the content of an HTML element

00:04:04,040 --> 00:04:09,920
either the element that was the event

00:04:07,790 --> 00:04:13,610
was triggered on or another element you

00:04:09,920 --> 00:04:16,220
specify and you tell intercooler what to

00:04:13,610 --> 00:04:19,910
do that is which events to trigger on

00:04:16,220 --> 00:04:23,419
and which elements and what HTTP

00:04:19,910 --> 00:04:25,669
requests to send and where via HTTP

00:04:23,419 --> 00:04:28,160
element attributes and these are custom

00:04:25,669 --> 00:04:29,810
attributes that intercooler defines so

00:04:28,160 --> 00:04:33,590
let's look at what that looks like in

00:04:29,810 --> 00:04:36,710
HTML the fundamental building block of

00:04:33,590 --> 00:04:41,030
the web is the hypertext link H is

00:04:36,710 --> 00:04:42,410
hypertext an HTML a element when you

00:04:41,030 --> 00:04:45,440
click the link you go to the page

00:04:42,410 --> 00:04:46,610
specified in the URL ok this is all web

00:04:45,440 --> 00:04:50,350
101 that's everything you're familiar

00:04:46,610 --> 00:04:53,120
with intercooler mixes that up a bit

00:04:50,350 --> 00:04:56,360
here's an a link except instead of

00:04:53,120 --> 00:04:58,370
having an H ref it has this funny I see

00:04:56,360 --> 00:05:02,600
in post two I see standing for

00:04:58,370 --> 00:05:05,090
intercooler how it works is when you

00:05:02,600 --> 00:05:07,610
click the link in to put cooler sends a

00:05:05,090 --> 00:05:10,090
post request because we said icy post to

00:05:07,610 --> 00:05:13,039
to the URL in the attribute value and

00:05:10,090 --> 00:05:16,850
whatever response comes back from the

00:05:13,039 --> 00:05:20,570
server replaces the the click me content

00:05:16,850 --> 00:05:24,440
of that element and unlike a normal link

00:05:20,570 --> 00:05:27,380
you stay on the same page so just with

00:05:24,440 --> 00:05:29,180
this little example here we see we're

00:05:27,380 --> 00:05:33,380
already starting it to address some of

00:05:29,180 --> 00:05:36,140
the web 1.0 aspects of the very plain

00:05:33,380 --> 00:05:43,640
standard Gengo tutorial that a lot of

00:05:36,140 --> 00:05:49,070
people start off with and if you click

00:05:43,640 --> 00:05:50,690
the link here for example is the change

00:05:49,070 --> 00:05:51,740
that would happen to the raw HTML you've

00:05:50,690 --> 00:05:53,420
got a response back from the server

00:05:51,740 --> 00:05:59,000
we're assuming it says you clicked me

00:05:53,420 --> 00:06:01,580
and that's been substituted in I keep

00:05:59,000 --> 00:06:03,530
saying no JavaScript okay you do need to

00:06:01,580 --> 00:06:05,090
specify somewhere in your web page that

00:06:03,530 --> 00:06:07,370
you're going to include some scripts and

00:06:05,090 --> 00:06:09,590
this is the kind of boilerplate example

00:06:07,370 --> 00:06:12,560
that the intercooler documentation says

00:06:09,590 --> 00:06:14,750
to use or else there's this little

00:06:12,560 --> 00:06:17,950
Django app called Django intercooler

00:06:14,750 --> 00:06:20,960
which takes the relevant files and

00:06:17,950 --> 00:06:23,420
prepares them to be used as static files

00:06:20,960 --> 00:06:26,740
in a Django app so you just need to do

00:06:23,420 --> 00:06:31,100
load static and then specify these two

00:06:26,740 --> 00:06:35,600
to intercooler files and it's it's even

00:06:31,100 --> 00:06:37,010
more Django ish all right wow that

00:06:35,600 --> 00:06:41,420
trivial example is actually quite

00:06:37,010 --> 00:06:47,240
trivial but it does set a foundation for

00:06:41,420 --> 00:06:49,430
what's going to come next and here are

00:06:47,240 --> 00:06:51,470
some of the things that you can do with

00:06:49,430 --> 00:06:53,360
intercooler I'm not going to cover all

00:06:51,470 --> 00:06:57,350
of them in this talk but we're going to

00:06:53,360 --> 00:06:59,570
cover some so what are the inputs that

00:06:57,350 --> 00:07:02,300
get sent along with the requests so form

00:06:59,570 --> 00:07:03,980
data etc what are the different ways you

00:07:02,300 --> 00:07:06,560
can handle a response you get back from

00:07:03,980 --> 00:07:08,680
the server what about the Dom and

00:07:06,560 --> 00:07:11,330
changes to the Dom or styling changes

00:07:08,680 --> 00:07:13,400
and is there any way to define

00:07:11,330 --> 00:07:15,710
dependencies within the different data

00:07:13,400 --> 00:07:17,210
elements on your page and the answers to

00:07:15,710 --> 00:07:18,550
that all of those questions is yes

00:07:17,210 --> 00:07:20,600
intercoolers got something to do that

00:07:18,550 --> 00:07:22,280
we're not going to cover them all but

00:07:20,600 --> 00:07:26,060
hopefully enough that you can understand

00:07:22,280 --> 00:07:28,340
the core concepts so let's look at some

00:07:26,060 --> 00:07:29,630
more examples here's an example where

00:07:28,340 --> 00:07:31,990
we're going to use intercooler to

00:07:29,630 --> 00:07:34,370
validate an email address that's entered

00:07:31,990 --> 00:07:37,640
but without actually submitting the form

00:07:34,370 --> 00:07:39,680
I should mention that these are

00:07:37,640 --> 00:07:41,180
screenshots and in the screenshots you

00:07:39,680 --> 00:07:43,130
will see that the submit button gets

00:07:41,180 --> 00:07:45,620
highlighted that's just because I've

00:07:43,130 --> 00:07:47,150
pressed the tab key to move to the next

00:07:45,620 --> 00:07:48,620
element and that's

00:07:47,150 --> 00:07:51,379
I haven't actually submitted anything so

00:07:48,620 --> 00:07:55,759
just in case you think I'm cheating so

00:07:51,379 --> 00:07:57,529
let's put an email addressing an invalid

00:07:55,759 --> 00:07:59,870
email address results in the input and

00:07:57,529 --> 00:08:04,310
label turning red and an error message

00:07:59,870 --> 00:08:05,930
being displayed so I've put in user at

00:08:04,310 --> 00:08:08,060
example hopefully you can read that yes

00:08:05,930 --> 00:08:13,900
and it says please enter a valid email

00:08:08,060 --> 00:08:16,009
address if I put in user at example.com

00:08:13,900 --> 00:08:18,560
according to the validation code in the

00:08:16,009 --> 00:08:23,150
back end that email address is already

00:08:18,560 --> 00:08:26,150
taken and please enter another email if

00:08:23,150 --> 00:08:27,860
I put in test at test com

00:08:26,150 --> 00:08:30,529
it turns out that one hasn't been used

00:08:27,860 --> 00:08:34,339
and so it's valid and the result turns

00:08:30,529 --> 00:08:36,019
green and at this point presumably the

00:08:34,339 --> 00:08:38,479
user will see that all that's valid I

00:08:36,019 --> 00:08:39,979
can hit submit obviously this is

00:08:38,479 --> 00:08:41,539
probably going to be part of a much

00:08:39,979 --> 00:08:45,399
larger form but we're just concentrating

00:08:41,539 --> 00:08:47,720
on the email validation so let's see how

00:08:45,399 --> 00:08:52,850
that example is implemented with a

00:08:47,720 --> 00:08:54,260
django view and Django templates so this

00:08:52,850 --> 00:08:56,690
is the django view for the email

00:08:54,260 --> 00:08:58,820
validation example we're assuming

00:08:56,690 --> 00:09:02,060
there's a validate email function and

00:08:58,820 --> 00:09:03,980
also that by the logic in this in this

00:09:02,060 --> 00:09:05,810
function that the only available test

00:09:03,980 --> 00:09:08,449
the only available email address is test

00:09:05,810 --> 00:09:10,220
at test comp obviously just some

00:09:08,449 --> 00:09:13,220
specific logic for the purpose of the

00:09:10,220 --> 00:09:15,199
example it's otherwise a completely

00:09:13,220 --> 00:09:17,329
normal Django view to process a form

00:09:15,199 --> 00:09:19,459
post request except we're not using the

00:09:17,329 --> 00:09:21,589
Django form handling features we've just

00:09:19,459 --> 00:09:22,940
got a request we're checking that it's a

00:09:21,589 --> 00:09:24,769
well we're grabbing the data from the

00:09:22,940 --> 00:09:26,839
post request and we're going to do stuff

00:09:24,769 --> 00:09:27,709
with it and then we're going to send a

00:09:26,839 --> 00:09:31,310
response we're going to render a

00:09:27,709 --> 00:09:38,149
response very standard Django View

00:09:31,310 --> 00:09:41,930
handling so I will just note have a look

00:09:38,149 --> 00:09:43,760
at the the URL for the the template

00:09:41,930 --> 00:09:46,540
although a template we're using because

00:09:43,760 --> 00:09:50,240
that will come up in in a minute

00:09:46,540 --> 00:09:52,399
so here's the base template for the page

00:09:50,240 --> 00:09:54,440
we're going to be displaying it's just a

00:09:52,399 --> 00:09:56,630
form obviously I'm leaving out all the

00:09:54,440 --> 00:09:57,170
irrelevant stuff it's formed with a CF

00:09:56,630 --> 00:09:59,850
token

00:09:57,170 --> 00:10:03,120
submit button and in between we're in

00:09:59,850 --> 00:10:05,850
including another template and what's

00:10:03,120 --> 00:10:08,370
that template oh look it's the same when

00:10:05,850 --> 00:10:11,940
we mentioned just before example slash

00:10:08,370 --> 00:10:13,350
form group dot HTML so here's that

00:10:11,940 --> 00:10:15,300
template this is this is the interesting

00:10:13,350 --> 00:10:19,019
bit this is where intercooler does it

00:10:15,300 --> 00:10:21,000
stuff first up we've got a div and we're

00:10:19,019 --> 00:10:22,920
using a Django variable to set one of

00:10:21,000 --> 00:10:24,630
the classes on the div depending on

00:10:22,920 --> 00:10:25,620
whether there was error or success so

00:10:24,630 --> 00:10:28,319
that's how we're getting the red of the

00:10:25,620 --> 00:10:30,389
green and that's controlled by the style

00:10:28,319 --> 00:10:32,850
guide which I was sorry the style file

00:10:30,389 --> 00:10:36,410
which we weren't going to the next

00:10:32,850 --> 00:10:38,670
interesting part is the input element

00:10:36,410 --> 00:10:41,670
where all the integral attributes the

00:10:38,670 --> 00:10:43,550
controller behavior are so we've already

00:10:41,670 --> 00:10:45,870
seen one of them it's the icy post too

00:10:43,550 --> 00:10:47,940
and that works the same way we're just

00:10:45,870 --> 00:10:51,569
specifying the URL that intercooler is

00:10:47,940 --> 00:10:55,110
going to post our request off to icy

00:10:51,569 --> 00:10:57,990
target specifies a different target to

00:10:55,110 --> 00:11:00,269
the default and the default is the HTML

00:10:57,990 --> 00:11:02,190
element containing the integral of

00:11:00,269 --> 00:11:05,730
directive which in this case would be

00:11:02,190 --> 00:11:08,519
the input element here we've actually

00:11:05,730 --> 00:11:10,050
specified the closest div which in this

00:11:08,519 --> 00:11:13,050
case is the surrounding div it's

00:11:10,050 --> 00:11:14,699
actually this whole template okay so the

00:11:13,050 --> 00:11:16,620
target is basically what's going to be

00:11:14,699 --> 00:11:20,639
replaced when we get our response back

00:11:16,620 --> 00:11:24,259
from the server and finally I see

00:11:20,639 --> 00:11:26,790
replaced target says instead of just

00:11:24,259 --> 00:11:29,040
replacing what's between the opening and

00:11:26,790 --> 00:11:30,899
closing tags we're going to replace

00:11:29,040 --> 00:11:33,509
everything including the opening and

00:11:30,899 --> 00:11:34,800
closing tags and the reason we want to

00:11:33,509 --> 00:11:36,750
do that is because we want to be able to

00:11:34,800 --> 00:11:39,990
change the value that gets substituted

00:11:36,750 --> 00:11:49,500
in there for the form group class which

00:11:39,990 --> 00:11:52,199
is what changes the blue or green and so

00:11:49,500 --> 00:11:54,839
two slides back I said you know have a

00:11:52,199 --> 00:11:57,149
look at this template and that's this

00:11:54,839 --> 00:12:02,300
this one here we are rendering this

00:11:57,149 --> 00:12:02,300
template in response to the post request

00:12:02,750 --> 00:12:08,309
all right there are a few questions that

00:12:05,630 --> 00:12:10,350
sorry this is me posing questions not

00:12:08,309 --> 00:12:12,959
you posing questions at this point we

00:12:10,350 --> 00:12:13,770
looked at how the targets are specified

00:12:12,959 --> 00:12:15,330
in that

00:12:13,770 --> 00:12:18,480
but there are further questions we

00:12:15,330 --> 00:12:22,050
should look at how does intercooler

00:12:18,480 --> 00:12:25,260
determine when to trigger a request so I

00:12:22,050 --> 00:12:27,240
said that when I tabbed out of out of

00:12:25,260 --> 00:12:29,880
the field and then the submit button was

00:12:27,240 --> 00:12:33,570
highlighted that point the validation

00:12:29,880 --> 00:12:37,550
happened and what data does intercooler

00:12:33,570 --> 00:12:43,890
send along with the request

00:12:37,550 --> 00:12:46,110
so intercooler uses the natural event

00:12:43,890 --> 00:12:48,210
for an element to trigger a request

00:12:46,110 --> 00:12:51,000
what's natural well for form elements

00:12:48,210 --> 00:12:52,800
the request is triggered on a submit

00:12:51,000 --> 00:12:55,770
event that's talking about the entire

00:12:52,800 --> 00:12:57,960
form for input elements except for

00:12:55,770 --> 00:13:01,860
buttons so things like the the field

00:12:57,960 --> 00:13:05,430
that we had in the example we issue the

00:13:01,860 --> 00:13:07,620
request on a change event and for other

00:13:05,430 --> 00:13:10,830
elements including buttons issue the

00:13:07,620 --> 00:13:12,270
request on the click event so that was

00:13:10,830 --> 00:13:15,800
the original example you click on the

00:13:12,270 --> 00:13:15,800
link the real quest goes off

00:13:16,010 --> 00:13:19,680
alternatively we can use another

00:13:17,640 --> 00:13:24,780
intercooler attribute which is icy

00:13:19,680 --> 00:13:26,100
trigger on for example Mouse enter so if

00:13:24,780 --> 00:13:27,840
you move your mouse over something you

00:13:26,100 --> 00:13:30,270
can trigger in a we can trigger an event

00:13:27,840 --> 00:13:32,580
and we can get our display changing some

00:13:30,270 --> 00:13:34,020
other change key up so if somebody's

00:13:32,580 --> 00:13:37,440
entering data maybe you want to validate

00:13:34,020 --> 00:13:44,100
as they're entering and in fact any

00:13:37,440 --> 00:13:48,300
other jQuery events the data that's sent

00:13:44,100 --> 00:13:49,860
with a request the form data so when a

00:13:48,300 --> 00:13:52,860
request is triggered by an input element

00:13:49,860 --> 00:13:54,890
with which is within a form the entire

00:13:52,860 --> 00:13:57,270
form data is sent along with the request

00:13:54,890 --> 00:14:00,450
just as if you'd actually submitted the

00:13:57,270 --> 00:14:03,570
form so in the email validation example

00:14:00,450 --> 00:14:05,580
there's C surf token that input element

00:14:03,570 --> 00:14:07,350
was part of the same form as the input

00:14:05,580 --> 00:14:09,510
element that triggered the request

00:14:07,350 --> 00:14:11,790
so the cephus or token was sent along

00:14:09,510 --> 00:14:13,080
with the request and obviously if you're

00:14:11,790 --> 00:14:14,730
dealing with Django and it's C surf

00:14:13,080 --> 00:14:16,410
protection you want to make sure that if

00:14:14,730 --> 00:14:18,960
you're doing post requests that that

00:14:16,410 --> 00:14:21,030
token get sent along so as long as your

00:14:18,960 --> 00:14:22,980
form is structured correctly intercooler

00:14:21,030 --> 00:14:25,820
will kind of basically deal with that

00:14:22,980 --> 00:14:25,820
for you transparently

00:14:28,190 --> 00:14:34,350
values from sorry I've lost my cursor

00:14:32,209 --> 00:14:36,510
values from different forms or in fact

00:14:34,350 --> 00:14:38,149
from anywhere other element on the page

00:14:36,510 --> 00:14:40,800
can be added to the requests by

00:14:38,149 --> 00:14:44,670
specifying them using a jQuery selector

00:14:40,800 --> 00:14:46,350
with I see include so that might be

00:14:44,670 --> 00:14:49,529
useful if you want to send a post

00:14:46,350 --> 00:14:51,240
requests that is not within a forum but

00:14:49,529 --> 00:14:56,790
you still need to get a see surf token

00:14:51,240 --> 00:14:58,470
from somewhere and there's also these

00:14:56,790 --> 00:15:00,660
things called intercooler parameters

00:14:58,470 --> 00:15:02,220
where they're going to include some

00:15:00,660 --> 00:15:04,529
extra information about the element that

00:15:02,220 --> 00:15:06,269
the request was triggered from and the

00:15:04,529 --> 00:15:09,029
target element among some other things

00:15:06,269 --> 00:15:10,320
so there are scenarios where you might

00:15:09,029 --> 00:15:13,170
be getting a request from a particular

00:15:10,320 --> 00:15:15,209
page and any number of elements on that

00:15:13,170 --> 00:15:16,380
page might have been triggering it so

00:15:15,209 --> 00:15:19,829
you need to know which one it is so you

00:15:16,380 --> 00:15:21,600
can deal with it appropriately so I'm

00:15:19,829 --> 00:15:25,560
going to show another example it's the

00:15:21,600 --> 00:15:27,540
kind of somewhat dreaded to-do list but

00:15:25,560 --> 00:15:32,220
what I want to concentrate on in this

00:15:27,540 --> 00:15:33,930
example is the sum of the well the most

00:15:32,220 --> 00:15:38,339
powerful idea behind intercooler which

00:15:33,930 --> 00:15:41,520
is essentially that we are operating in

00:15:38,339 --> 00:15:44,070
essentially the the fundamental request

00:15:41,520 --> 00:15:52,560
response architecture of the original

00:15:44,070 --> 00:15:54,089
web design so here's a template which is

00:15:52,560 --> 00:15:57,570
quite similar to the first email

00:15:54,089 --> 00:16:00,209
validation example we've got a form

00:15:57,570 --> 00:16:02,220
we've got a sea surf token we can

00:16:00,209 --> 00:16:04,770
iterate over our tasks which is

00:16:02,220 --> 00:16:06,060
obviously we've got a database of tasks

00:16:04,770 --> 00:16:08,790
coming in from somewhere from our

00:16:06,060 --> 00:16:10,890
context and for each task we're going to

00:16:08,790 --> 00:16:16,829
include this little snippet which is

00:16:10,890 --> 00:16:18,890
examples tossed on HTML that file that

00:16:16,829 --> 00:16:24,570
sorry that that template we're including

00:16:18,890 --> 00:16:28,380
again fairly similar when you look at

00:16:24,570 --> 00:16:30,720
the input element we're doing a test to

00:16:28,380 --> 00:16:35,480
see if the task is done and if it's done

00:16:30,720 --> 00:16:38,600
we are setting an checked attribute

00:16:35,480 --> 00:16:41,449
and if it's not it'll be blank the the

00:16:38,600 --> 00:16:45,649
the button the check box will be empty

00:16:41,449 --> 00:16:47,480
I see target and I see replaced target

00:16:45,649 --> 00:16:50,059
but the same as in the previous example

00:16:47,480 --> 00:16:51,619
we're specifying the surrounding div and

00:16:50,059 --> 00:17:04,399
we're specifying that we want to replace

00:16:51,619 --> 00:17:06,260
the entire div and yes let's just see so

00:17:04,399 --> 00:17:08,299
here's his what a single to do list

00:17:06,260 --> 00:17:11,600
sorry to do list with a single item was

00:17:08,299 --> 00:17:14,209
going to look like now in the in the

00:17:11,600 --> 00:17:18,319
request response cycle we will have sent

00:17:14,209 --> 00:17:20,569
a request to view this page the view

00:17:18,319 --> 00:17:22,880
will have iterated over our tasks we've

00:17:20,569 --> 00:17:24,709
only got one it will have taken that

00:17:22,880 --> 00:17:28,220
template it will have rendered the

00:17:24,709 --> 00:17:32,750
template the value for the task done is

00:17:28,220 --> 00:17:35,000
is false so that check box is blank now

00:17:32,750 --> 00:17:36,919
we come along and we click on that box

00:17:35,000 --> 00:17:39,139
and we know that's going to send a

00:17:36,919 --> 00:17:41,480
intercooler request a post request back

00:17:39,139 --> 00:17:45,559
to the server at which point your view

00:17:41,480 --> 00:17:47,570
is going to change the state it's going

00:17:45,559 --> 00:17:49,190
to say ok I'm going to grab that task

00:17:47,570 --> 00:17:51,830
I'm going to set it to done and I'm

00:17:49,190 --> 00:17:56,929
going to save that as the state of the

00:17:51,830 --> 00:17:58,460
task so the clicking on the box remember

00:17:56,929 --> 00:17:59,720
the email of validation example all we

00:17:58,460 --> 00:18:00,980
were doing was we gonna send some data

00:17:59,720 --> 00:18:03,019
back and we're going to get some

00:18:00,980 --> 00:18:04,880
feedback about what's this you know is

00:18:03,019 --> 00:18:06,200
this valid we're not actually changing

00:18:04,880 --> 00:18:08,029
the state of anything on the server in

00:18:06,200 --> 00:18:10,760
that example but in this example we are

00:18:08,029 --> 00:18:13,820
and then the very next thing that

00:18:10,760 --> 00:18:16,190
happens is that view that we posted -

00:18:13,820 --> 00:18:18,740
it's going to take that template it's

00:18:16,190 --> 00:18:20,510
going to take the new state of this

00:18:18,740 --> 00:18:22,399
particular task it's going to fill out

00:18:20,510 --> 00:18:25,070
that template and send it back to our

00:18:22,399 --> 00:18:27,590
web page where it will replace what we

00:18:25,070 --> 00:18:34,279
had before and now that task is marked

00:18:27,590 --> 00:18:38,269
as done so as far as the user is

00:18:34,279 --> 00:18:40,940
concerned with we haven't had a page

00:18:38,269 --> 00:18:43,639
load it just looks like you've clicked a

00:18:40,940 --> 00:18:45,889
box maybe they're wondering do I need to

00:18:43,639 --> 00:18:48,320
submit this page because that's the one

00:18:45,889 --> 00:18:49,250
web 1.0 way of doing things you make

00:18:48,320 --> 00:18:50,690
some changes on the form

00:18:49,250 --> 00:18:52,760
you click Submit and once you click

00:18:50,690 --> 00:18:55,190
Submit you know it's saved but with this

00:18:52,760 --> 00:18:57,170
way the very act of checking the box

00:18:55,190 --> 00:18:59,180
means the request goes to the server the

00:18:57,170 --> 00:19:01,220
state is changed on the server and then

00:18:59,180 --> 00:19:02,840
the display that the user sees is

00:19:01,220 --> 00:19:05,120
updated to reflect the state of the

00:19:02,840 --> 00:19:08,330
server and that's really just a

00:19:05,120 --> 00:19:10,370
traditional request response cycle but

00:19:08,330 --> 00:19:12,380
taking the response and using it to

00:19:10,370 --> 00:19:15,440
update any only a part of the page and

00:19:12,380 --> 00:19:16,970
that's the fundamental way the

00:19:15,440 --> 00:19:18,950
intercooler works and that's I think

00:19:16,970 --> 00:19:22,420
where both its power and its simplicity

00:19:18,950 --> 00:19:25,040
lies we're not trying to do anything

00:19:22,420 --> 00:19:29,690
complex with representing the state on

00:19:25,040 --> 00:19:32,900
the webpage we're trying to keep the

00:19:29,690 --> 00:19:34,670
server operation as similar to the way

00:19:32,900 --> 00:19:36,800
it would be in under a traditional web

00:19:34,670 --> 00:19:38,630
1.0 but we're getting this extra

00:19:36,800 --> 00:19:44,360
functionality of this this dynamic

00:19:38,630 --> 00:19:48,410
nature the person who wrote in to call

00:19:44,360 --> 00:19:51,920
it excuse me for a second the person who

00:19:48,410 --> 00:19:53,810
wrote in to call has written a few blog

00:19:51,920 --> 00:19:55,820
posts about the philosophy behind it and

00:19:53,810 --> 00:19:58,670
I think they're well worth reading for

00:19:55,820 --> 00:20:02,230
anyone who is not kind of on board with

00:19:58,670 --> 00:20:07,340
why you would choose to go this way

00:20:02,230 --> 00:20:09,440
I'm not going to read them out but I'm

00:20:07,340 --> 00:20:13,330
kind of just going to flip through these

00:20:09,440 --> 00:20:15,500
ones it basically comes down to

00:20:13,330 --> 00:20:20,270
intercooler trying to respect the

00:20:15,500 --> 00:20:26,390
original ideas behind a rest approach to

00:20:20,270 --> 00:20:29,810
the web and also an opinion about the

00:20:26,390 --> 00:20:31,310
state of JavaScript frameworks which is

00:20:29,810 --> 00:20:33,370
definitely an opinion and appears to be

00:20:31,310 --> 00:20:36,500
a strongly held opinion by this author

00:20:33,370 --> 00:20:38,660
which is not me somebody else which is

00:20:36,500 --> 00:20:40,700
that those frameworks have a very high

00:20:38,660 --> 00:20:44,600
rate of churn it's very hard to keep up

00:20:40,700 --> 00:20:46,250
with them and he's suggesting that using

00:20:44,600 --> 00:20:48,860
something like integral like you can get

00:20:46,250 --> 00:20:51,650
a lot of the functionality but with a

00:20:48,860 --> 00:20:53,420
code base that is not changing all the

00:20:51,650 --> 00:20:55,940
time which means it's easier to get

00:20:53,420 --> 00:20:57,800
people on up to speed with it and you

00:20:55,940 --> 00:21:00,440
don't have to worry so much about is

00:20:57,800 --> 00:21:01,870
this going to be radically changed next

00:21:00,440 --> 00:21:06,400
year and am I going to have to rework

00:21:01,870 --> 00:21:08,200
my app and finally when I was updating

00:21:06,400 --> 00:21:09,550
these slides last night I discovered

00:21:08,200 --> 00:21:12,910
there was a blog post from earlier in

00:21:09,550 --> 00:21:16,090
the year which I thought I would finish

00:21:12,910 --> 00:21:21,970
with just a couple of the ideas from

00:21:16,090 --> 00:21:24,460
that blog post intercooler is

00:21:21,970 --> 00:21:26,920
incremental remember I started out by

00:21:24,460 --> 00:21:28,510
saying if you've just started using

00:21:26,920 --> 00:21:31,720
Django you've just finished the tutorial

00:21:28,510 --> 00:21:34,270
and you want to liven up your app what

00:21:31,720 --> 00:21:37,000
can you do intercooler lets you make

00:21:34,270 --> 00:21:39,300
very small changes in as few places you

00:21:37,000 --> 00:21:42,610
want to get that kind of dynamic

00:21:39,300 --> 00:21:44,440
behavior so you don't need to throw

00:21:42,610 --> 00:21:46,390
everything out and start again with a

00:21:44,440 --> 00:21:48,250
new system you build on what you've

00:21:46,390 --> 00:21:49,900
already learned you've built on the

00:21:48,250 --> 00:21:51,190
concepts you've already learned and you

00:21:49,900 --> 00:21:57,100
don't have to pick up a new language to

00:21:51,190 --> 00:21:58,710
to do that its back-end agnostic I

00:21:57,100 --> 00:22:00,700
actually suspect it was written

00:21:58,710 --> 00:22:02,380
initially to be used with the rails

00:22:00,700 --> 00:22:04,420
back-end I'm not sure of that totally

00:22:02,380 --> 00:22:06,429
but it does not care what the backend is

00:22:04,420 --> 00:22:08,320
because it's just sending normal

00:22:06,429 --> 00:22:10,420
requests getting normal responses back

00:22:08,320 --> 00:22:14,050
and doing some funky handling with the

00:22:10,420 --> 00:22:15,850
JavaScript library on the client so it

00:22:14,050 --> 00:22:17,830
works with Django it works with flask

00:22:15,850 --> 00:22:24,580
you can even use it with a language

00:22:17,830 --> 00:22:25,690
which is in Python and it trivially

00:22:24,580 --> 00:22:27,760
satisfies rest

00:22:25,690 --> 00:22:29,320
that's represent a representational

00:22:27,760 --> 00:22:34,360
state transfer one of the key

00:22:29,320 --> 00:22:37,090
architectural concepts behind the web so

00:22:34,360 --> 00:22:40,210
I think the conclusion from that blog

00:22:37,090 --> 00:22:42,610
posts also serves as a good conclusion

00:22:40,210 --> 00:22:44,230
to my talk so I will read it out I hope

00:22:42,610 --> 00:22:46,210
you find some of these reasons to look

00:22:44,230 --> 00:22:48,730
at intercal or compelling and decide to

00:22:46,210 --> 00:22:50,200
give it a try in 2018 it obviously goes

00:22:48,730 --> 00:22:52,030
against the grain of a lot of web

00:22:50,200 --> 00:22:53,679
development being done today and it

00:22:52,030 --> 00:22:55,360
certainly isn't right for every project

00:22:53,679 --> 00:22:58,000
but I think there are some real

00:22:55,360 --> 00:23:01,720
advantages to its approach for many web

00:22:58,000 --> 00:23:04,890
applications so here's some resources

00:23:01,720 --> 00:23:08,500
the first ones the intercooler website

00:23:04,890 --> 00:23:12,310
the second one is an excellent excuse me

00:23:08,500 --> 00:23:14,880
accident tutorial on using intercooler

00:23:12,310 --> 00:23:14,880
to add

00:23:15,400 --> 00:23:26,790
autocomplete functionality to a django

00:23:18,460 --> 00:23:30,310
search and the next one is another

00:23:26,790 --> 00:23:33,070
django app to help help you use

00:23:30,310 --> 00:23:35,740
intercooler with django i didn't have a

00:23:33,070 --> 00:23:38,470
chance to cover it but it's worth a look

00:23:35,740 --> 00:23:39,970
at because it does make some of the edge

00:23:38,470 --> 00:23:41,470
cases which again i haven't covered a

00:23:39,970 --> 00:23:45,490
little bit easier to deal with django

00:23:41,470 --> 00:23:47,590
with django and finally that's it

00:23:45,490 --> 00:23:50,200
there's another intercooler contact me

00:23:47,590 --> 00:23:52,240
on email that's my twitter handle it's

00:23:50,200 --> 00:23:55,830
also where you can find me on github and

00:23:52,240 --> 00:23:55,830
i think we have some time for questions

00:24:03,930 --> 00:24:08,080
just reminder that if you'd like to ask

00:24:06,040 --> 00:24:10,540
questions the question session is for

00:24:08,080 --> 00:24:13,810
questions if you'd like to share your

00:24:10,540 --> 00:24:15,940
anecdotes or knowledge maybe either the

00:24:13,810 --> 00:24:17,620
hallway or the call for proposals and

00:24:15,940 --> 00:24:23,170
2019 is the best place for that so if

00:24:17,620 --> 00:24:27,130
you have a question raise your hand when

00:24:23,170 --> 00:24:30,070
they're away so you mentioned i think

00:24:27,130 --> 00:24:34,240
one of the examples you talked about

00:24:30,070 --> 00:24:35,800
there was dynamic search what's the

00:24:34,240 --> 00:24:38,350
performance like that with the with the

00:24:35,800 --> 00:24:41,350
round tripping so this difference

00:24:38,350 --> 00:24:43,930
there's this there's two two tricks i

00:24:41,350 --> 00:24:45,580
mentioned the key up event there's

00:24:43,930 --> 00:24:48,610
another modifier you can use for the

00:24:45,580 --> 00:24:51,580
event which you said which is don't send

00:24:48,610 --> 00:24:53,800
a request on every event but waitin a

00:24:51,580 --> 00:24:55,900
delay so for instance if somebody's

00:24:53,800 --> 00:24:57,970
actively typing you do not want you know

00:24:55,900 --> 00:24:59,080
an event for each ten key presses you

00:24:57,970 --> 00:25:01,540
want to wait until they finish typing

00:24:59,080 --> 00:25:05,890
for a pause at that point send off a

00:25:01,540 --> 00:25:09,190
request and come back my experience

00:25:05,890 --> 00:25:12,370
using intercooler is that it doesn't

00:25:09,190 --> 00:25:15,670
seem to have any particular particularly

00:25:12,370 --> 00:25:17,050
large overhead if you consider how you

00:25:15,670 --> 00:25:18,460
would implement that natively in

00:25:17,050 --> 00:25:20,140
javascript essentially we're going to be

00:25:18,460 --> 00:25:21,370
doing the same work we're going to we're

00:25:20,140 --> 00:25:23,800
going to take what the current state

00:25:21,370 --> 00:25:25,270
value of a form element is we're going

00:25:23,800 --> 00:25:27,070
to make an a check request we're going

00:25:25,270 --> 00:25:29,020
to wait for a response and then we're

00:25:27,070 --> 00:25:32,140
going to display that now

00:25:29,020 --> 00:25:35,559
some autocomplete libraries will we'll

00:25:32,140 --> 00:25:38,760
preload some hints which integral it

00:25:35,559 --> 00:25:41,410
doesn't do and in the cases where

00:25:38,760 --> 00:25:42,760
pre-loading is going to be required to

00:25:41,410 --> 00:25:44,500
get the performance you want then maybe

00:25:42,760 --> 00:25:47,559
intercooler is not going to satisfy that

00:25:44,500 --> 00:25:48,970
for you but as far as overhead I think

00:25:47,559 --> 00:25:51,850
you should expect a similar to behavior

00:25:48,970 --> 00:25:55,140
to to a more traditional Ajax jQuery

00:25:51,850 --> 00:25:55,140
whatever implementation

00:26:05,040 --> 00:26:11,890
you will talk so within tikal you have

00:26:08,919 --> 00:26:15,040
to change how the hf tags work and edit

00:26:11,890 --> 00:26:19,320
them to become from href to IC :

00:26:15,040 --> 00:26:22,780
etc how does that deal with

00:26:19,320 --> 00:26:27,280
accessibility and porting old code and

00:26:22,780 --> 00:26:29,799
so forth okay so first of all there's

00:26:27,280 --> 00:26:31,720
nothing that stops you maintaining the

00:26:29,799 --> 00:26:33,549
existing structure of your website where

00:26:31,720 --> 00:26:35,650
you want a link to go to another page

00:26:33,549 --> 00:26:40,840
leave that as a normal HF rink

00:26:35,650 --> 00:26:44,110
H ref link this is really for where you

00:26:40,840 --> 00:26:46,990
want to add some functionality and we're

00:26:44,110 --> 00:26:49,059
basically borrowing the a element and

00:26:46,990 --> 00:26:54,820
instead of using an href we're putting

00:26:49,059 --> 00:27:01,049
this icy post to intercooler really

00:26:54,820 --> 00:27:06,190
implements the web browser to server

00:27:01,049 --> 00:27:08,350
communications layer and it replaces the

00:27:06,190 --> 00:27:11,350
functionality you get from doing ajax

00:27:08,350 --> 00:27:13,030
directly yourself but while I haven't

00:27:11,350 --> 00:27:17,049
looked into if there's anything specific

00:27:13,030 --> 00:27:18,910
about accessibility essentially whatever

00:27:17,049 --> 00:27:20,830
you would put on a web page to make it

00:27:18,910 --> 00:27:24,520
accessible you put a lot the same thing

00:27:20,830 --> 00:27:28,750
on this page if you're if you can make

00:27:24,520 --> 00:27:29,980
an AJAX interaction accessible in

00:27:28,750 --> 00:27:32,290
traditional methods it should be

00:27:29,980 --> 00:27:33,910
possible with intercooler as well sorry

00:27:32,290 --> 00:27:35,140
I'm not sure if I've completely covered

00:27:33,910 --> 00:27:37,950
your question but hopefully I've

00:27:35,140 --> 00:27:37,950
addressed it a little bit

00:27:46,820 --> 00:27:56,059
hands up nice and high and keep them

00:27:48,409 --> 00:27:58,250
around you thank you this might be a bit

00:27:56,059 --> 00:28:00,409
of a naive question but um Dora has is

00:27:58,250 --> 00:28:02,809
compared to something like Django forms

00:28:00,409 --> 00:28:10,389
and crispy forms are they solving two

00:28:02,809 --> 00:28:15,230
different problems so yes and no I think

00:28:10,389 --> 00:28:18,769
I have been meaning to do some work

00:28:15,230 --> 00:28:20,929
looking at how it would be easier to get

00:28:18,769 --> 00:28:23,240
intercooler to interact with Django

00:28:20,929 --> 00:28:26,779
forms because I think it might be

00:28:23,240 --> 00:28:29,139
possible to to kind of automatically

00:28:26,779 --> 00:28:32,600
include some of this functionality

00:28:29,139 --> 00:28:34,970
what krispies forms for instance does is

00:28:32,600 --> 00:28:37,789
replace how Django constructs forms but

00:28:34,970 --> 00:28:39,919
I think that that should be largely

00:28:37,789 --> 00:28:43,490
independent of whether you can work with

00:28:39,919 --> 00:28:45,830
with the integral or not those crispy

00:28:43,490 --> 00:28:48,200
forms for instance addresses the some

00:28:45,830 --> 00:28:49,639
issues with in Django forms where you

00:28:48,200 --> 00:28:51,820
know the author has some particular

00:28:49,639 --> 00:28:54,200
opinions about a better way of doing it

00:28:51,820 --> 00:28:56,120
but it's it's really addressing a

00:28:54,200 --> 00:28:59,750
different problem because you don't get

00:28:56,120 --> 00:29:02,090
this kind of dynamic interaction with

00:28:59,750 --> 00:29:05,570
crispy forms just by using crispy forms

00:29:02,090 --> 00:29:06,500
it's just it builds on existing Django

00:29:05,570 --> 00:29:13,299
forms or provides a different

00:29:06,500 --> 00:29:13,299

YouTube URL: https://www.youtube.com/watch?v=eEVRapHQFKI


