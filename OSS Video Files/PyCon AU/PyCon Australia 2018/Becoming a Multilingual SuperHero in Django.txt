Title: Becoming a Multilingual SuperHero in Django
Publication date: 2018-08-24
Playlist: PyCon Australia 2018
Description: 
	Sanyam Khurana

https://2018.pycon-au.org/talks/44212-becoming-a-multilingual-superhero-in-django/

In this talk, we'll see how we make a language agnostic backend, to serve our app in different languages, based on what language the client wants to communicate in.

We'll see how to support translation for static data and dynamic data, using various third-party services.

Python, PyCon, PyConAU, australia, programming, sydney

This video is licensed under CC BY 3.0 AU ‹https://creativecommons.org/licenses/by/3.0/au/›.

PyCon Australia (“PyCon AU”) is the national conference for the Python Programming Community, bringing together professional, student and enthusiast developers with a love for developing with Python.

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 24 - 28 2018.

Python, PyCon, PyConAU
Captions: 
	00:00:00,030 --> 00:00:15,360
welcome thank you very much so Who am I

00:00:12,960 --> 00:00:17,520
I work at fuel as a back-end dev and

00:00:15,360 --> 00:00:20,369
this presentation is inspired directly

00:00:17,520 --> 00:00:22,980
from one of the projects I had built I

00:00:20,369 --> 00:00:24,630
had to support Chinese in it so I'm one

00:00:22,980 --> 00:00:27,150
of you a part of the community I am a

00:00:24,630 --> 00:00:30,449
cpython contributor and I've contributed

00:00:27,150 --> 00:00:32,640
to many open-source projects including

00:00:30,449 --> 00:00:35,540
many of the Mozilla's project I've been

00:00:32,640 --> 00:00:39,840
a g-shock 2,080 mentor for Debian and

00:00:35,540 --> 00:00:42,210
NRG soft 2016 mentor today we'll learn

00:00:39,840 --> 00:00:45,000
about the road to become a multilingual

00:00:42,210 --> 00:00:47,670
superhero in Django so imagine you have

00:00:45,000 --> 00:00:50,280
got this awesome app served by RESTful

00:00:47,670 --> 00:00:52,649
API through django NDRF and suddenly a

00:00:50,280 --> 00:00:55,289
requirement comes in that we want this

00:00:52,649 --> 00:00:57,329
app and the in bangle in Chinese or we

00:00:55,289 --> 00:01:00,300
want it in German and if you have got

00:00:57,329 --> 00:01:02,370
this humongous codebase not written well

00:01:00,300 --> 00:01:04,830
with all the internationalization and

00:01:02,370 --> 00:01:07,890
localization stuff in mind then boy

00:01:04,830 --> 00:01:09,210
you're in danger and you should better

00:01:07,890 --> 00:01:11,070
start praying to the Almighty to give

00:01:09,210 --> 00:01:13,790
you the strength and endurance on your

00:01:11,070 --> 00:01:16,560
part to become a multilingual superhero

00:01:13,790 --> 00:01:19,560
so the first and foremost thing to

00:01:16,560 --> 00:01:21,090
enable translation is to tell django

00:01:19,560 --> 00:01:22,979
what is the list of languages that

00:01:21,090 --> 00:01:25,229
should support where does it find the

00:01:22,979 --> 00:01:26,970
translation for static data what is the

00:01:25,229 --> 00:01:30,450
default language it should fall back on

00:01:26,970 --> 00:01:32,490
in this in the case that there is no

00:01:30,450 --> 00:01:38,280
translation available for the requested

00:01:32,490 --> 00:01:40,590
language so settings part you need to

00:01:38,280 --> 00:01:43,979
have the locale middleware defined in

00:01:40,590 --> 00:01:46,560
the middle of middleware classes the

00:01:43,979 --> 00:01:51,570
sequence of middleware is important here

00:01:46,560 --> 00:01:54,180
we'll see how it plays a role and the

00:01:51,570 --> 00:01:55,590
next slide in the languages part you

00:01:54,180 --> 00:01:57,899
define all the languages you want to

00:01:55,590 --> 00:02:00,149
support and so in this example I am

00:01:57,899 --> 00:02:04,890
supporting English simplified Chinese as

00:02:00,149 --> 00:02:08,729
well as traditional Chinese you also

00:02:04,890 --> 00:02:12,470
make two boolean true which is use

00:02:08,729 --> 00:02:16,190
iodine in and use Elton

00:02:12,470 --> 00:02:20,060
true so what does internet are i18n does

00:02:16,190 --> 00:02:22,070
is like it would load all the

00:02:20,060 --> 00:02:26,600
internationalisation machinery and the

00:02:22,070 --> 00:02:28,610
l10n one will format the dates numbers

00:02:26,600 --> 00:02:33,530
and calendars according to whatever

00:02:28,610 --> 00:02:35,120
locale the client has requested in apart

00:02:33,530 --> 00:02:37,280
from that you define the language code

00:02:35,120 --> 00:02:40,370
this is a very important bit of

00:02:37,280 --> 00:02:43,880
information here because this is the

00:02:40,370 --> 00:02:46,730
ultimate fallback and a request response

00:02:43,880 --> 00:02:49,400
cycle so you also define the locale

00:02:46,730 --> 00:02:52,790
parts so locale is a directory where all

00:02:49,400 --> 00:02:56,000
the PIO files are placed the PIO files

00:02:52,790 --> 00:02:59,570
contain the static data translations so

00:02:56,000 --> 00:03:01,100
before moving on we see like how do you

00:02:59,570 --> 00:03:03,260
retrieve language preference from the

00:03:01,100 --> 00:03:05,090
clients request now we need to decide

00:03:03,260 --> 00:03:06,920
how to track the language the client

00:03:05,090 --> 00:03:08,959
wants to communicate in the different

00:03:06,920 --> 00:03:11,510
ways to get the language preference in

00:03:08,959 --> 00:03:13,370
an HTTP request in order to retrieve the

00:03:11,510 --> 00:03:15,260
language preference the locale

00:03:13,370 --> 00:03:16,850
middleware tries to determine the user's

00:03:15,260 --> 00:03:21,739
language preference by the following

00:03:16,850 --> 00:03:23,950
algorithm so first it looks D for the

00:03:21,739 --> 00:03:26,750
language prefix in the requested URL

00:03:23,950 --> 00:03:30,650
this is only performed when you are

00:03:26,750 --> 00:03:33,739
using the i18n patterns function in your

00:03:30,650 --> 00:03:35,989
route your l conf failing that it would

00:03:33,739 --> 00:03:39,920
look for the language session key in the

00:03:35,989 --> 00:03:43,700
current user session failing that it

00:03:39,920 --> 00:03:45,950
would look for a cookie the name of the

00:03:43,700 --> 00:03:48,739
cookie used to set by the language

00:03:45,950 --> 00:03:51,410
cookie name setting the default name for

00:03:48,739 --> 00:03:53,989
this key is Django underscore language

00:03:51,410 --> 00:03:56,150
so failing that it looks for the accept

00:03:53,989 --> 00:03:58,430
language HTTP header this header is sent

00:03:56,150 --> 00:04:00,709
by your browser and tells the server

00:03:58,430 --> 00:04:03,920
which language or languages you prefer

00:04:00,709 --> 00:04:06,290
in order of priority so Django tries

00:04:03,920 --> 00:04:09,940
each language in the head until it finds

00:04:06,290 --> 00:04:14,030
the one with the available translations

00:04:09,940 --> 00:04:16,010
so for the rest api s-- specifically i

00:04:14,030 --> 00:04:18,620
have found the accept language header a

00:04:16,010 --> 00:04:22,370
much cleaner way to accomplish the task

00:04:18,620 --> 00:04:25,730
and for enabling the multiple languages

00:04:22,370 --> 00:04:29,380
in admin panel will prefer

00:04:25,730 --> 00:04:35,270
functions which is in the Django jutice

00:04:29,380 --> 00:04:37,580
translation package and it modify your

00:04:35,270 --> 00:04:42,050
route URL

00:04:37,580 --> 00:04:45,260
conf as shown here so you say format all

00:04:42,050 --> 00:04:47,660
my you are admin panel URLs with the

00:04:45,260 --> 00:04:52,000
language code so as soon as you do that

00:04:47,660 --> 00:04:55,100
in your settings it becomes this so the

00:04:52,000 --> 00:04:57,080
i18n patterns will automatically prepend

00:04:55,100 --> 00:04:59,450
the current active language code to all

00:04:57,080 --> 00:05:01,850
the ural patterns defined within this

00:04:59,450 --> 00:05:04,570
particular function so all your admin

00:05:01,850 --> 00:05:11,780
roles with the current configuration

00:05:04,570 --> 00:05:15,710
having those edits Ian and Ian activated

00:05:11,780 --> 00:05:19,010
will have these urals the start here in

00:05:15,710 --> 00:05:20,650
both of these cases is kind of a regular

00:05:19,010 --> 00:05:24,470
expression which is indicating that

00:05:20,650 --> 00:05:27,290
anything can happen after dead min so

00:05:24,470 --> 00:05:31,070
for whatever language you want the admin

00:05:27,290 --> 00:05:33,830
panel to be accessible the use of

00:05:31,070 --> 00:05:37,820
corresponding code in the Ural can help

00:05:33,830 --> 00:05:40,400
you in accessing that then there is

00:05:37,820 --> 00:05:42,320
another setting which is prefix

00:05:40,400 --> 00:05:45,140
underscore default underscore language

00:05:42,320 --> 00:05:47,660
when you set it to false the default

00:05:45,140 --> 00:05:49,730
language code will not be prepended so

00:05:47,660 --> 00:05:52,310
we have en in this case so if you set it

00:05:49,730 --> 00:05:54,290
to false the default path would again

00:05:52,310 --> 00:05:58,700
become slash admin rather than becoming

00:05:54,290 --> 00:06:02,450
slash Ian slash admin so although you

00:05:58,700 --> 00:06:04,850
can do this to all the URLs but for the

00:06:02,450 --> 00:06:06,740
API endpoints we prefer to supply this

00:06:04,850 --> 00:06:09,020
particular bit of information in the

00:06:06,740 --> 00:06:12,190
accept language header which is

00:06:09,020 --> 00:06:14,780
specifically to the HTTP requests and

00:06:12,190 --> 00:06:19,760
which seems a more cleaner approach for

00:06:14,780 --> 00:06:21,590
the API endpoints so during this talk I

00:06:19,760 --> 00:06:24,190
will talk about the gorgeous moments

00:06:21,590 --> 00:06:27,080
where I tend to learn something new

00:06:24,190 --> 00:06:29,480
where I was literally pulling out my

00:06:27,080 --> 00:06:32,690
hair like what happened why are only

00:06:29,480 --> 00:06:34,400
things working the way they should so

00:06:32,690 --> 00:06:35,990
the local middleware should always come

00:06:34,400 --> 00:06:38,870
before the common middleware and after

00:06:35,990 --> 00:06:39,650
session middleware this is because we

00:06:38,870 --> 00:06:44,300
earlier disk

00:06:39,650 --> 00:06:47,270
that the okay these this session defines

00:06:44,300 --> 00:06:48,770
the cookie in the HTTP requests right so

00:06:47,270 --> 00:06:52,130
if it isn't there

00:06:48,770 --> 00:06:58,370
then the local middleware cannot process

00:06:52,130 --> 00:07:00,500
your request and know what kind of the

00:06:58,370 --> 00:07:05,630
the locale is being requested by the

00:07:00,500 --> 00:07:08,570
client so yes let's see what does locale

00:07:05,630 --> 00:07:10,430
middleware help with exactly it's a

00:07:08,570 --> 00:07:13,250
secret sauce in the translation

00:07:10,430 --> 00:07:16,400
machinery let's have a look at the

00:07:13,250 --> 00:07:20,150
Django request response cycle here so if

00:07:16,400 --> 00:07:22,580
you see here it does the following for

00:07:20,150 --> 00:07:25,669
the request part it passes it and decide

00:07:22,580 --> 00:07:28,340
what translation object to install in

00:07:25,669 --> 00:07:31,849
the current thread context for the

00:07:28,340 --> 00:07:34,370
response part it does two things first

00:07:31,849 --> 00:07:38,300
of all it sets the content language

00:07:34,370 --> 00:07:40,430
header in the response for the client to

00:07:38,300 --> 00:07:45,020
know what language is used in the

00:07:40,430 --> 00:07:48,320
response for parsing and if you have

00:07:45,020 --> 00:07:52,729
used the i18n patterns utility functions

00:07:48,320 --> 00:07:54,770
in your URL conf then it would format

00:07:52,729 --> 00:07:57,979
the URL with the appropriate activated

00:07:54,770 --> 00:08:01,699
language so the client can know what

00:07:57,979 --> 00:08:03,440
exactly the language was like whatever

00:08:01,699 --> 00:08:05,840
response you through the the client

00:08:03,440 --> 00:08:10,280
should be able to know which language

00:08:05,840 --> 00:08:13,460
the response is in so the question is

00:08:10,280 --> 00:08:16,070
what to translate majorly we need two

00:08:13,460 --> 00:08:19,070
kinds of data static data that includes

00:08:16,070 --> 00:08:22,610
the model names field name of models

00:08:19,070 --> 00:08:24,199
error messages data particularly static

00:08:22,610 --> 00:08:26,690
in the application then there is a

00:08:24,199 --> 00:08:29,210
dynamic data which particularly mostly

00:08:26,690 --> 00:08:33,229
include the field values in the models

00:08:29,210 --> 00:08:37,190
and that is input by the user so for the

00:08:33,229 --> 00:08:39,620
static strings we use static strings and

00:08:37,190 --> 00:08:42,919
our model names field names error

00:08:39,620 --> 00:08:45,440
messages and we use them in many places

00:08:42,919 --> 00:08:49,089
including Django templates all our code

00:08:45,440 --> 00:08:53,089
files including the model sort py and

00:08:49,089 --> 00:08:55,069
let's see how the translation looks like

00:08:53,089 --> 00:08:57,829
all those places let's first discuss

00:08:55,069 --> 00:08:59,449
about templates anything that should be

00:08:57,829 --> 00:09:01,579
translated and templates should be

00:08:59,449 --> 00:09:03,829
marked under the trance or the block

00:09:01,579 --> 00:09:05,480
trance stack to make the translation

00:09:03,829 --> 00:09:08,139
work there's one more thing to take care

00:09:05,480 --> 00:09:11,509
of and that is loading the

00:09:08,139 --> 00:09:14,389
internationalization library tag at the

00:09:11,509 --> 00:09:16,670
top of every file that uses the transfer

00:09:14,389 --> 00:09:21,129
block ransacked let's quickly look at an

00:09:16,670 --> 00:09:25,009
example so I have this dummy signup page

00:09:21,129 --> 00:09:27,019
which demonstrates a header it has two

00:09:25,009 --> 00:09:31,059
labels one is user name and another one

00:09:27,019 --> 00:09:33,170
is password so right now if I say that

00:09:31,059 --> 00:09:35,329
this particular template should be

00:09:33,170 --> 00:09:37,399
served to me in Chinese I don't really

00:09:35,329 --> 00:09:39,379
get the Chinese version all I get is the

00:09:37,399 --> 00:09:43,069
English version so what I need to do

00:09:39,379 --> 00:09:45,189
here is to enable translation and serve

00:09:43,069 --> 00:09:48,889
the signup page with the static content

00:09:45,189 --> 00:09:53,629
will first load the translation tag like

00:09:48,889 --> 00:09:55,519
this and then use the trans tag here to

00:09:53,629 --> 00:09:57,589
mark the content for translation so all

00:09:55,519 --> 00:09:59,689
we are saying here is like convert this

00:09:57,589 --> 00:10:01,399
particular static string convert this

00:09:59,689 --> 00:10:03,319
particular static string and convert

00:10:01,399 --> 00:10:06,620
this particular static string if you

00:10:03,319 --> 00:10:11,860
have like multiple lines to be

00:10:06,620 --> 00:10:11,860
translated you can use the transport a

00:10:12,309 --> 00:10:20,749
Gaussian number to the eye 18 tag should

00:10:16,279 --> 00:10:23,929
be loaded in every file even if it

00:10:20,749 --> 00:10:28,069
extends another file that already has it

00:10:23,929 --> 00:10:30,230
loaded so this can happen that you think

00:10:28,069 --> 00:10:32,889
okay you mark everything for translation

00:10:30,230 --> 00:10:36,670
and then you are inheriting from another

00:10:32,889 --> 00:10:38,600
template and you'll be sitting there

00:10:36,670 --> 00:10:42,550
snatching away your hair like what's

00:10:38,600 --> 00:10:45,079
happening and you can't figure it out so

00:10:42,550 --> 00:10:47,179
use this tag everywhere in every

00:10:45,079 --> 00:10:51,499
template file no matter if it is being

00:10:47,179 --> 00:10:55,759
extended so let's talk about all the p/y

00:10:51,499 --> 00:10:58,249
files by the py files I mean the mall

00:10:55,759 --> 00:11:02,089
store py file so let's quickly look at

00:10:58,249 --> 00:11:05,149
an example so we generally use the

00:11:02,089 --> 00:11:06,649
verbose name property so we have the

00:11:05,149 --> 00:11:08,300
static string defined like

00:11:06,649 --> 00:11:10,639
first name last name email address and

00:11:08,300 --> 00:11:12,740
one thing you will see here is like it

00:11:10,639 --> 00:11:15,589
uses a particular function known as you

00:11:12,740 --> 00:11:26,689
get X lazy from Django dot util soft

00:11:15,589 --> 00:11:28,399
translation package so there are various

00:11:26,689 --> 00:11:31,459
functions that this particular package

00:11:28,399 --> 00:11:33,679
provides this get text there is you get

00:11:31,459 --> 00:11:36,709
text there is get text lazy and then

00:11:33,679 --> 00:11:39,199
there is you get text lazy basically the

00:11:36,709 --> 00:11:41,869
you represents here the Unicode

00:11:39,199 --> 00:11:43,939
characters so all over the codebase

00:11:41,869 --> 00:11:47,149
generally you will use the you get text

00:11:43,939 --> 00:11:50,720
lazy or do you get explosion we'll see

00:11:47,149 --> 00:11:53,300
how that works but right now we just

00:11:50,720 --> 00:11:56,209
mark them for translations just like we

00:11:53,300 --> 00:12:01,249
did did it in templates we will do it

00:11:56,209 --> 00:12:04,040
here so both the you get text and you

00:12:01,249 --> 00:12:07,779
get a sleazy are the Python objects data

00:12:04,040 --> 00:12:11,389
evaluated to strength at different time

00:12:07,779 --> 00:12:14,170
so the string representation depends on

00:12:11,389 --> 00:12:20,329
whatever language is activated in your

00:12:14,170 --> 00:12:23,839
HTTP requests to quickly test you have

00:12:20,329 --> 00:12:27,230
this activate function which activates a

00:12:23,839 --> 00:12:29,720
particular locale in your django

00:12:27,230 --> 00:12:32,149
environment and then you have this get

00:12:29,720 --> 00:12:34,629
language utility functions which tells

00:12:32,149 --> 00:12:36,589
you which particular language is

00:12:34,629 --> 00:12:41,389
activated right now in the current

00:12:36,589 --> 00:12:43,850
context thread so we'll say like I want

00:12:41,389 --> 00:12:45,920
to activate English I check that it is

00:12:43,850 --> 00:12:51,019
indeed English in the current thread and

00:12:45,920 --> 00:12:53,299
then I use this sign up I use you get

00:12:51,019 --> 00:12:55,279
takes to convert the static string and

00:12:53,299 --> 00:12:58,970
since the English translation remains

00:12:55,279 --> 00:13:02,089
same I get this then I activate

00:12:58,970 --> 00:13:04,449
simplified Chinese I try to get language

00:13:02,089 --> 00:13:06,679
in order to ensure that it is indeed

00:13:04,449 --> 00:13:08,629
simplified Chinese set in the current

00:13:06,679 --> 00:13:11,540
context thread and then what I do is

00:13:08,629 --> 00:13:13,699
like I request again the translated

00:13:11,540 --> 00:13:18,259
version and then it gives me Chinese for

00:13:13,699 --> 00:13:19,540
sign up I know this looks like a bit of

00:13:18,259 --> 00:13:23,199
a magic

00:13:19,540 --> 00:13:25,329
we'll see where do we exactly set up all

00:13:23,199 --> 00:13:30,730
these static strings further in these

00:13:25,329 --> 00:13:33,160
slides so many people have a question

00:13:30,730 --> 00:13:35,380
here like how do I decide which one to

00:13:33,160 --> 00:13:38,350
use either the Yuga takes or the you get

00:13:35,380 --> 00:13:41,980
lazy version that's indeed a great

00:13:38,350 --> 00:13:43,660
question and use yoga takes to

00:13:41,980 --> 00:13:46,420
immediately get the translated version

00:13:43,660 --> 00:13:49,560
of the text for example in your view

00:13:46,420 --> 00:13:53,260
store py file so as soon as the request

00:13:49,560 --> 00:13:56,589
hits your Django back-end you should use

00:13:53,260 --> 00:14:01,240
you get text to return a response so use

00:13:56,589 --> 00:14:03,490
yoga text in where it is required to

00:14:01,240 --> 00:14:06,130
return a response immediately use you

00:14:03,490 --> 00:14:07,930
get text lazy as a lazy object reference

00:14:06,130 --> 00:14:09,880
it's a lazy object reference in the

00:14:07,930 --> 00:14:14,560
static string so use it in your models

00:14:09,880 --> 00:14:18,940
or P Phi files like we did it to define

00:14:14,560 --> 00:14:22,029
the verbose name right so now that we

00:14:18,940 --> 00:14:24,670
have all the static data marked with the

00:14:22,029 --> 00:14:26,889
trance tag you get text and you get X

00:14:24,670 --> 00:14:28,630
lazy methods it's time to generate the

00:14:26,889 --> 00:14:31,389
translation files and fill in the

00:14:28,630 --> 00:14:33,339
translations so for generating the

00:14:31,389 --> 00:14:36,940
Django dot P of files for simplified

00:14:33,339 --> 00:14:39,310
Chinese we'll run the following in built

00:14:36,940 --> 00:14:44,470
management command which is make

00:14:39,310 --> 00:14:47,250
messages so it accepts a flag which is

00:14:44,470 --> 00:14:51,790
minus L and then you say whichever

00:14:47,250 --> 00:14:56,319
language code you want to have statics

00:14:51,790 --> 00:15:00,459
translation for so you say I want it in

00:14:56,319 --> 00:15:02,290
for simplified Chinese so as soon as you

00:15:00,459 --> 00:15:05,139
run this management command what happens

00:15:02,290 --> 00:15:07,930
in your project directory is if you

00:15:05,139 --> 00:15:10,870
remember we had already defined in

00:15:07,930 --> 00:15:14,380
settings the path for the locale folder

00:15:10,870 --> 00:15:19,240
so inside the locale folder all you get

00:15:14,380 --> 00:15:21,220
is this new folder defined which was

00:15:19,240 --> 00:15:22,870
through make messages command inside it

00:15:21,220 --> 00:15:25,420
you will find another directory which is

00:15:22,870 --> 00:15:27,910
the locale messages and inside it you

00:15:25,420 --> 00:15:30,810
will get the Django dot P or file the

00:15:27,910 --> 00:15:33,340
Pio file is the portable object format

00:15:30,810 --> 00:15:37,570
it's used by the

00:15:33,340 --> 00:15:39,490
you get text library so all the magic is

00:15:37,570 --> 00:15:41,800
because of the new gate text library

00:15:39,490 --> 00:15:46,090
like all the all django does is through

00:15:41,800 --> 00:15:48,910
that particular library so we'll have a

00:15:46,090 --> 00:15:51,150
look at how the django dot Pio file

00:15:48,910 --> 00:15:54,400
looks like so it looks like this and

00:15:51,150 --> 00:15:57,540
here the message ID is the text marked

00:15:54,400 --> 00:16:02,530
for translation and the message STR is

00:15:57,540 --> 00:16:04,570
it's translated form so you have to do

00:16:02,530 --> 00:16:07,480
this for all the languages you want to

00:16:04,570 --> 00:16:10,450
support in your django app and there

00:16:07,480 --> 00:16:14,740
will be separate django dot Pio files

00:16:10,450 --> 00:16:16,720
for each of the language so let's do one

00:16:14,740 --> 00:16:19,420
thing and fill it for simplified Chinese

00:16:16,720 --> 00:16:24,340
so when I fill it for simplified Chinese

00:16:19,420 --> 00:16:26,830
it looks like this so what I say is like

00:16:24,340 --> 00:16:29,500
this is the message ID whenever someone

00:16:26,830 --> 00:16:33,310
reference it through maybe you get text

00:16:29,500 --> 00:16:37,440
or you get X lazy methods or even in

00:16:33,310 --> 00:16:41,830
trance or transport AG and it the the

00:16:37,440 --> 00:16:45,700
current locale is Chinese then give this

00:16:41,830 --> 00:16:48,430
out simple as that it's a kind of

00:16:45,700 --> 00:16:54,250
function you input something you get an

00:16:48,430 --> 00:16:55,480
output has come gotcha foo use make

00:16:54,250 --> 00:16:59,260
messages

00:16:55,480 --> 00:17:02,250
- I VN to exclude generating Django dog

00:16:59,260 --> 00:17:06,610
Bo files for every package in a and B so

00:17:02,250 --> 00:17:09,850
what happened with me like I had my

00:17:06,610 --> 00:17:13,660
virtual environment defined inside my

00:17:09,850 --> 00:17:16,270
Django project and as soon as I ran the

00:17:13,660 --> 00:17:18,580
make messages command what did it was it

00:17:16,270 --> 00:17:20,560
got inside every package that was

00:17:18,580 --> 00:17:22,660
included in the virtual environment and

00:17:20,560 --> 00:17:24,459
try to generate Django dot Pio files for

00:17:22,660 --> 00:17:29,260
every other package this shouldn't

00:17:24,459 --> 00:17:32,080
happen and honestly this this isn't

00:17:29,260 --> 00:17:39,340
looking like a big deal but we'll figure

00:17:32,080 --> 00:17:42,010
out how it can mess up so got a 5 if you

00:17:39,340 --> 00:17:46,570
notice correctly in Django settings we

00:17:42,010 --> 00:17:49,809
have mentioned the language code

00:17:46,570 --> 00:17:51,090
all small letters and it's separated by

00:17:49,809 --> 00:17:53,769
a hyphen

00:17:51,090 --> 00:17:56,470
but when you do it with make messages

00:17:53,769 --> 00:17:57,940
command the language part it is in small

00:17:56,470 --> 00:18:00,309
letters and the country part is in

00:17:57,940 --> 00:18:06,549
capital letters separated by an

00:18:00,309 --> 00:18:09,820
underscore rather than a - now if you

00:18:06,549 --> 00:18:14,740
make a mistake here you won't see any

00:18:09,820 --> 00:18:18,490
error at all and your translations won't

00:18:14,740 --> 00:18:20,799
work either so since it was my first

00:18:18,490 --> 00:18:23,679
time with Chinese I didn't even know

00:18:20,799 --> 00:18:25,389
like what's happening I was kind of

00:18:23,679 --> 00:18:27,850
debugging this issue like first I tried

00:18:25,389 --> 00:18:30,850
zat H - Sienne then I tried sachet

00:18:27,850 --> 00:18:33,070
underscore CN I played it really well

00:18:30,850 --> 00:18:34,779
and then I noticed there is a small

00:18:33,070 --> 00:18:39,490
caveat in the documentation which says

00:18:34,779 --> 00:18:40,389
okay you have to do this so as soon as I

00:18:39,490 --> 00:18:43,750
did this

00:18:40,389 --> 00:18:46,090
it all worked so please take care if you

00:18:43,750 --> 00:18:47,649
make a mistake here it can leave you

00:18:46,090 --> 00:18:53,320
baffled and probably pulling out your

00:18:47,649 --> 00:18:55,539
ear so the next step once we have the

00:18:53,320 --> 00:18:58,090
Django torpedo files in place and then

00:18:55,539 --> 00:19:00,700
we have already defined all the static

00:18:58,090 --> 00:19:02,350
strength translations we compile those

00:19:00,700 --> 00:19:06,490
static strength translations in order to

00:19:02,350 --> 00:19:08,649
be used by Django we use we use another

00:19:06,490 --> 00:19:12,610
management command which is compiled

00:19:08,649 --> 00:19:17,279
messages so what it does is it generates

00:19:12,610 --> 00:19:20,440
another file which is Django dot mo file

00:19:17,279 --> 00:19:23,559
the mo object are the Machine machine

00:19:20,440 --> 00:19:27,789
readable objects that Django can process

00:19:23,559 --> 00:19:31,090
and can pick up the translations from so

00:19:27,789 --> 00:19:33,190
another lacasa compiled messages command

00:19:31,090 --> 00:19:36,279
would generate Django dot Emma files for

00:19:33,190 --> 00:19:40,029
every package in if your VN is in your

00:19:36,279 --> 00:19:42,190
project directory so now it would really

00:19:40,029 --> 00:19:45,220
hurt you bad because what happened with

00:19:42,190 --> 00:19:47,259
me is as soon as I ran this particular

00:19:45,220 --> 00:19:49,120
command a try to generate Django demo

00:19:47,259 --> 00:19:50,950
package Django demo files for every

00:19:49,120 --> 00:19:53,620
package and then I realized there were

00:19:50,950 --> 00:19:55,299
certain errors with packages and I was

00:19:53,620 --> 00:19:57,159
wondering okay why is it failing why is

00:19:55,299 --> 00:19:58,980
it failing and then I realized it's not

00:19:57,159 --> 00:20:02,510
my code but it

00:19:58,980 --> 00:20:06,990
some other library that was breaking up

00:20:02,510 --> 00:20:09,690
got just seven after everything make

00:20:06,990 --> 00:20:12,840
sure you restart your whiskey server if

00:20:09,690 --> 00:20:15,860
you don't restart it sorry there won't

00:20:12,840 --> 00:20:18,960
be any translations available so after

00:20:15,860 --> 00:20:23,040
doing all these steps remember to always

00:20:18,960 --> 00:20:30,890
restart your whiskey server this this

00:20:23,040 --> 00:20:33,480
isn't like you may not be able to like

00:20:30,890 --> 00:20:37,080
find this when you're developing locally

00:20:33,480 --> 00:20:39,540
but can be a problem on the server so

00:20:37,080 --> 00:20:43,320
make sure you do it and probably include

00:20:39,540 --> 00:20:44,520
it in your deployment scripts now we're

00:20:43,320 --> 00:20:47,640
going to talk about dynamic string

00:20:44,520 --> 00:20:49,800
translations so most of the data in our

00:20:47,640 --> 00:20:53,340
django applications is dynamic and the

00:20:49,800 --> 00:20:55,350
user generated so we can employ two

00:20:53,340 --> 00:20:58,500
approaches in order to support

00:20:55,350 --> 00:21:00,600
translations first of all is enabling

00:20:58,500 --> 00:21:03,300
the end-user to enter information in

00:21:00,600 --> 00:21:05,790
multiple languages and the second one

00:21:03,300 --> 00:21:07,590
would be translating the dynamic text

00:21:05,790 --> 00:21:08,700
with the use of third-party libraries

00:21:07,590 --> 00:21:11,490
such as transifex

00:21:08,700 --> 00:21:14,310
so what transifex is does is you give

00:21:11,490 --> 00:21:15,840
them all the static data all the dynamic

00:21:14,310 --> 00:21:18,330
data that is being fed in your jungle

00:21:15,840 --> 00:21:21,720
applications and they have the serial

00:21:18,330 --> 00:21:24,690
translators out there who will convert

00:21:21,720 --> 00:21:26,730
that particular data and provide it to

00:21:24,690 --> 00:21:30,120
you and then you can store it as you

00:21:26,730 --> 00:21:33,420
like so we will see the first approach

00:21:30,120 --> 00:21:37,860
in action enabling the end user to enter

00:21:33,420 --> 00:21:40,020
information in multiple languages so one

00:21:37,860 --> 00:21:45,960
of the like one of the approaches

00:21:40,020 --> 00:21:48,570
defining multiple columns corresponding

00:21:45,960 --> 00:21:50,970
to the language you're supporting so if

00:21:48,570 --> 00:21:56,460
I say I have a column named first

00:21:50,970 --> 00:22:00,330
underscore name it so if my default

00:21:56,460 --> 00:22:02,070
locale is English then I might have

00:22:00,330 --> 00:22:04,140
another column defined which says name

00:22:02,070 --> 00:22:06,540
first name underscore Zed agenda so CN

00:22:04,140 --> 00:22:11,700
which is which would actually store the

00:22:06,540 --> 00:22:14,750
first name in simplified Chinese so the

00:22:11,700 --> 00:22:14,750
tricky part begins here

00:22:16,670 --> 00:22:21,530
so let's say we are supporting two

00:22:19,590 --> 00:22:24,330
languages Chinese and English

00:22:21,530 --> 00:22:27,510
there's a package known as django model

00:22:24,330 --> 00:22:29,880
translation which would do exactly the

00:22:27,510 --> 00:22:32,220
same as i described so what it does is

00:22:29,880 --> 00:22:33,920
it will define different columns or

00:22:32,220 --> 00:22:38,100
attributes title mark for translation

00:22:33,920 --> 00:22:44,670
the code is really very similar to what

00:22:38,100 --> 00:22:48,540
you have ideally seen in your wildest so

00:22:44,670 --> 00:22:51,060
it takes the class name whatever it is

00:22:48,540 --> 00:22:55,490
it defined you you will define the field

00:22:51,060 --> 00:22:58,910
sir like I want more columns with the

00:22:55,490 --> 00:23:02,130
within for first name and the last name

00:22:58,910 --> 00:23:04,380
and you are done now after you do this

00:23:02,130 --> 00:23:07,530
and you run migrations it will

00:23:04,380 --> 00:23:09,840
dynamically attach all those fields so

00:23:07,530 --> 00:23:12,860
you don't define those fields in your

00:23:09,840 --> 00:23:18,990
model sort paper but to define them here

00:23:12,860 --> 00:23:21,990
and this is how the sequel looks like so

00:23:18,990 --> 00:23:24,360
first name is the default field that was

00:23:21,990 --> 00:23:25,920
defined on the model which tends to

00:23:24,360 --> 00:23:28,710
store and retrieve the value of first

00:23:25,920 --> 00:23:30,450
name for the default language that is

00:23:28,710 --> 00:23:32,580
set in your Django app which is English

00:23:30,450 --> 00:23:34,470
in this case for each subsequent

00:23:32,580 --> 00:23:36,570
language that a Django project supports

00:23:34,470 --> 00:23:39,390
a new field with the same name appears

00:23:36,570 --> 00:23:41,190
so suffixed with the language code it is

00:23:39,390 --> 00:23:43,830
created like first name underscore

00:23:41,190 --> 00:23:45,330
saidit's and through CN for keeping the

00:23:43,830 --> 00:23:51,840
simplified Chinese version of the first

00:23:45,330 --> 00:23:53,820
name field so now what if you don't want

00:23:51,840 --> 00:23:56,040
to burden your users adding information

00:23:53,820 --> 00:23:57,720
multiple languages as we discuss then

00:23:56,040 --> 00:23:59,580
the second approach comes into action

00:23:57,720 --> 00:24:01,890
you can combine both the first and

00:23:59,580 --> 00:24:04,050
second approaches to ultimately support

00:24:01,890 --> 00:24:06,120
an immediate a second approach is using

00:24:04,050 --> 00:24:08,700
a third-party service such as transifex

00:24:06,120 --> 00:24:13,020
to convert all the incoming text in

00:24:08,700 --> 00:24:17,340
different languages and since you all

00:24:13,020 --> 00:24:21,830
are still full of energy here our bonus

00:24:17,340 --> 00:24:26,850
on debugging translation issues so you

00:24:21,830 --> 00:24:29,740
can have the Django shell activated and

00:24:26,850 --> 00:24:31,779
then check if the translations are

00:24:29,740 --> 00:24:34,419
working with the help of the activate

00:24:31,779 --> 00:24:37,750
and the you get text method already

00:24:34,419 --> 00:24:39,789
provided like this so you say I am

00:24:37,750 --> 00:24:44,039
trying to activate the Chinese version

00:24:39,789 --> 00:24:46,480
and I particularly looking for the

00:24:44,039 --> 00:24:48,640
static string translation for sign up we

00:24:46,480 --> 00:24:50,140
have already seen it earlier so this is

00:24:48,640 --> 00:24:55,450
quite helpful while debugging issues

00:24:50,140 --> 00:24:57,490
with translation so some strings are

00:24:55,450 --> 00:24:59,980
still not translated you have defined

00:24:57,490 --> 00:25:03,850
them in the jungle or Pio file and then

00:24:59,980 --> 00:25:05,799
you have compiled messages some of these

00:25:03,850 --> 00:25:08,700
things are translated some of them are

00:25:05,799 --> 00:25:14,080
not so if you go to Jango dot P or file

00:25:08,700 --> 00:25:15,549
you will actually see that those

00:25:14,080 --> 00:25:17,980
particular strings should have been

00:25:15,549 --> 00:25:21,370
marked with the keyword fuzzy with a

00:25:17,980 --> 00:25:23,500
comment fuzzy so remove that line that

00:25:21,370 --> 00:25:25,990
marks ms fuzzy and then compiling

00:25:23,500 --> 00:25:28,990
messages again and it should work again

00:25:25,990 --> 00:25:33,039
so why does John who actually mark them

00:25:28,990 --> 00:25:36,909
as fuzzy so if you have very slight

00:25:33,039 --> 00:25:39,370
variation in the Django dot Pio files

00:25:36,909 --> 00:25:40,990
for the same static string Django thinks

00:25:39,370 --> 00:25:44,230
that the translated version should

00:25:40,990 --> 00:25:47,260
change as well so it Maximus fuzzy so

00:25:44,230 --> 00:25:50,440
that the translator may have may want to

00:25:47,260 --> 00:25:52,840
have a second look at it so when you are

00:25:50,440 --> 00:25:54,789
sure that the translated version is

00:25:52,840 --> 00:25:57,370
correct you can remove that line that

00:25:54,789 --> 00:26:02,159
Maximus fuzzy and compiling messages

00:25:57,370 --> 00:26:05,169
again and it would work so conclusion

00:26:02,159 --> 00:26:07,960
Django's translation support is indeed

00:26:05,169 --> 00:26:09,970
very powerful but the initial setup

00:26:07,960 --> 00:26:12,250
becomes a lot of pain due to simple

00:26:09,970 --> 00:26:14,049
gotcha moments or dot can cause you a

00:26:12,250 --> 00:26:19,600
lot of headache and sometimes pulling

00:26:14,049 --> 00:26:22,450
out your hair as as I did so the more

00:26:19,600 --> 00:26:24,190
early you support your project in

00:26:22,450 --> 00:26:26,830
different languages and write code

00:26:24,190 --> 00:26:30,750
correctly the easier it will get in

00:26:26,830 --> 00:26:30,750
future to support multiple languages oh

00:26:30,899 --> 00:26:35,710
do you know something now you just

00:26:33,520 --> 00:26:37,570
became a multilingual superhero you have

00:26:35,710 --> 00:26:38,980
the power to now support multiple

00:26:37,570 --> 00:26:42,070
languages in your app

00:26:38,980 --> 00:26:44,710
so congrats if you have any questions

00:26:42,070 --> 00:26:48,159
you can reach me at a mail

00:26:44,710 --> 00:26:51,130
I am also available at code mentor on

00:26:48,159 --> 00:27:00,279
github ask you - learner and you can ask

00:26:51,130 --> 00:27:09,100
me on Twitter thank you very much we got

00:27:00,279 --> 00:27:11,529
three minutes for questions thanks for

00:27:09,100 --> 00:27:12,460
the great talk quick question I was

00:27:11,529 --> 00:27:14,889
wondering if you could expand a little

00:27:12,460 --> 00:27:16,659
bit on the trans effects service that

00:27:14,889 --> 00:27:20,799
you mentioned a couple of times I'm not

00:27:16,659 --> 00:27:22,990
familiar with it yeah trans effects okay

00:27:20,799 --> 00:27:26,590
so what do you particularly do with

00:27:22,990 --> 00:27:28,750
trans effects is you you have continuous

00:27:26,590 --> 00:27:33,510
stream of data which is input by the

00:27:28,750 --> 00:27:36,159
users in your app so what you do is like

00:27:33,510 --> 00:27:38,500
you integrate their API where you throw

00:27:36,159 --> 00:27:40,389
all of the data that is coming and then

00:27:38,500 --> 00:27:42,460
you implement a web hook which says that

00:27:40,389 --> 00:27:44,559
the translated version would be

00:27:42,460 --> 00:27:46,659
available there so they have actual

00:27:44,559 --> 00:27:48,370
translators in place actually human

00:27:46,659 --> 00:27:51,070
beings which actually translate that

00:27:48,370 --> 00:27:53,380
particular data and then submit it as

00:27:51,070 --> 00:27:56,139
soon as they submit it it comes back to

00:27:53,380 --> 00:27:58,570
your given web hook and then you can

00:27:56,139 --> 00:28:00,279
store it as you like so for the first

00:27:58,570 --> 00:28:02,289
approach that we defined like having

00:28:00,279 --> 00:28:04,510
different columns for the attributes you

00:28:02,289 --> 00:28:08,500
can use that particular approach to

00:28:04,510 --> 00:28:11,190
actually integrate all the data that is

00:28:08,500 --> 00:28:11,190
coming in again

00:28:14,590 --> 00:28:21,049
hi can you please explain what pitfall

00:28:18,950 --> 00:28:26,140
should be avoided while defining URLs

00:28:21,049 --> 00:28:28,370
and app URL and in the project URL file

00:28:26,140 --> 00:28:30,169
what do you mean by a puerile and

00:28:28,370 --> 00:28:31,850
decreasing children like their there are

00:28:30,169 --> 00:28:34,580
actually two URL files that you define

00:28:31,850 --> 00:28:36,650
one is the main one and the other one is

00:28:34,580 --> 00:28:39,049
that you can include in the main one

00:28:36,650 --> 00:28:41,600
sorry I didn't get it there are two

00:28:39,049 --> 00:28:43,700
files one is the URL conf which is the

00:28:41,600 --> 00:28:48,320
main file and the other one that goes

00:28:43,700 --> 00:28:50,540
into your app that sits right next to

00:28:48,320 --> 00:28:55,030
views okay that's that's okay that's

00:28:50,540 --> 00:28:58,150
that's entirely okay like indeed the the

00:28:55,030 --> 00:29:00,860
local URLs are the local you account for

00:28:58,150 --> 00:29:02,990
goes then again in inside they do to

00:29:00,860 --> 00:29:05,750
your account so it doesn't make any

00:29:02,990 --> 00:29:08,030
different difference as such so for the

00:29:05,750 --> 00:29:12,020
aps part for the restful APIs part I

00:29:08,030 --> 00:29:13,660
really prefer supplying the local

00:29:12,020 --> 00:29:17,000
information in the request headers

00:29:13,660 --> 00:29:20,240
instead of defining in the URL itself

00:29:17,000 --> 00:29:23,510
some people do it but like then it makes

00:29:20,240 --> 00:29:31,940
the URL somewhat clumsy so I tried to

00:29:23,510 --> 00:29:34,220
avoid it and for for the admin panel

00:29:31,940 --> 00:29:39,500
pages I prefer to have that information

00:29:34,220 --> 00:29:41,750
in the request itself in the URL itself

00:29:39,500 --> 00:29:45,140
because it's easier for people to

00:29:41,750 --> 00:29:47,210
actually make a get request with say /en

00:29:45,140 --> 00:29:49,460
slash admin so I am requesting the

00:29:47,210 --> 00:29:52,370
English version of the page or say slash

00:29:49,460 --> 00:29:57,190
said it says us - Sienne so I am

00:29:52,370 --> 00:29:57,190
requesting the Chinese you lots of page

00:29:58,030 --> 00:30:03,280
ok yeah out of time sorry

00:30:05,169 --> 00:30:09,820
so if anyone has any further questions

00:30:07,039 --> 00:30:09,820

YouTube URL: https://www.youtube.com/watch?v=go7JklZRtrs


