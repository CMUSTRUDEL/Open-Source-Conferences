Title: A guided tour of Python logging
Publication date: 2018-08-26
Playlist: PyCon Australia 2018
Description: 
	Curtis Maloney

https://2018.pycon-au.org/talks/41793-a-guided-tour-of-python-logging/

Logging is a tremendously powerful tool in monitoring and debugging, but many people avoid it in Python, feeling it's too complex.
Come with me as we explore what's going on, and hopefully become better friends with this wonderful part of stdlib.

Python, PyCon, PyConAU, australia, programming, sydney

This video is licensed under CC BY 3.0 AU - https://creativecommons.org/licenses/by/3.0/au/

PyCon Australia (“PyCon AU”) is the national conference for the Python Programming Community, bringing together professional, student and enthusiast developers with a love for developing with Python.

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 24 - 28 2018.

Python, PyCon, PyConAU
Captions: 
	00:00:00,000 --> 00:00:05,670
all right welcome back here in this room

00:00:02,280 --> 00:00:07,950
next on stage is Curtis Maloney who is

00:00:05,670 --> 00:00:11,780
going to give us an introduction to PI's

00:00:07,950 --> 00:00:11,780
and logging give him a round of applause

00:00:15,859 --> 00:00:24,510
morning happy Sunday

00:00:18,420 --> 00:00:25,650
hope you enjoyed the scones as you said

00:00:24,510 --> 00:00:28,980
I'm Curtis my only there's my

00:00:25,650 --> 00:00:33,079
information details you can hit me up on

00:00:28,980 --> 00:00:35,700
Twitter or github or IRC that cat is

00:00:33,079 --> 00:00:40,250
kind of my avatar you'll see it around

00:00:35,700 --> 00:00:40,250
places that's me it's done here's my cat

00:00:41,480 --> 00:00:46,620
right I'm doing this talk basically

00:00:43,950 --> 00:00:48,329
because I run into a lot of cases where

00:00:46,620 --> 00:00:50,670
I see people using Python logging and

00:00:48,329 --> 00:00:52,860
they do it wrong they either don't

00:00:50,670 --> 00:00:56,370
understand what facilities are there to

00:00:52,860 --> 00:00:58,590
be used and reinvent it which I've had

00:00:56,370 --> 00:01:00,059
to dig out of a couple of projects or

00:00:58,590 --> 00:01:00,600
they just feel it's too hard and don't

00:01:00,059 --> 00:01:02,430
use it

00:01:00,600 --> 00:01:05,549
Python logging can be very simple very

00:01:02,430 --> 00:01:09,780
flexible very powerful if you let it so

00:01:05,549 --> 00:01:13,140
let's go for a quick introduction come

00:01:09,780 --> 00:01:16,350
on not focused on the right window to

00:01:13,140 --> 00:01:19,439
get the cookie here's the basics you run

00:01:16,350 --> 00:01:20,909
Python new you in bore logging you say I

00:01:19,439 --> 00:01:23,549
want a lot some debug information and

00:01:20,909 --> 00:01:27,030
nothing comes out or some info level

00:01:23,549 --> 00:01:28,680
stuff and nothing comes out or you want

00:01:27,030 --> 00:01:32,340
to log a warning and you get a warning

00:01:28,680 --> 00:01:34,170
from root or something you log in error

00:01:32,340 --> 00:01:35,579
you get an error nice and big scary

00:01:34,170 --> 00:01:38,549
error and in fact you can catch

00:01:35,579 --> 00:01:39,960
exceptions and log the exception along

00:01:38,549 --> 00:01:41,369
with your message it'll actually grab

00:01:39,960 --> 00:01:43,530
the exception and love it for you which

00:01:41,369 --> 00:01:48,240
looks just like I actually got the error

00:01:43,530 --> 00:01:50,480
but didn't honest and that's it thank

00:01:48,240 --> 00:01:59,790
you any questions

00:01:50,480 --> 00:02:02,400
just as we saw using logging quite

00:01:59,790 --> 00:02:05,850
simple what you should be doing is

00:02:02,400 --> 00:02:07,650
asking for your own logger just like

00:02:05,850 --> 00:02:09,360
this import logging you say get logger

00:02:07,650 --> 00:02:11,430
and then you log all your messages

00:02:09,360 --> 00:02:12,900
through your own locker now there's a

00:02:11,430 --> 00:02:16,050
few different ways you can call and a

00:02:12,900 --> 00:02:18,140
few different levels as we can see here

00:02:16,050 --> 00:02:24,330
you can just log a straight message and

00:02:18,140 --> 00:02:25,950
use the percent s formatting to get your

00:02:24,330 --> 00:02:28,290
value pass through you can love the

00:02:25,950 --> 00:02:30,900
exception as we showed earlier or in

00:02:28,290 --> 00:02:34,020
fact you can use the more extended dict

00:02:30,900 --> 00:02:36,420
format expressions for your % s

00:02:34,020 --> 00:02:39,330
formatting to get more flexible messages

00:02:36,420 --> 00:02:42,780
more information and if you really want

00:02:39,330 --> 00:02:44,880
to go dirty you can pass locals and just

00:02:42,780 --> 00:02:47,459
grab everything from your local scope in

00:02:44,880 --> 00:02:51,300
there but that's probably not the best

00:02:47,459 --> 00:02:53,700
move when we're doing this as you saw

00:02:51,300 --> 00:02:56,940
there were several different levels all

00:02:53,700 --> 00:02:59,160
of these levels are predefined you can

00:02:56,940 --> 00:03:00,780
add your own levels if you want but in

00:02:59,160 --> 00:03:03,060
the end they all become numeric levels

00:03:00,780 --> 00:03:04,890
and they're used for controlling how

00:03:03,060 --> 00:03:06,239
many messages really come out because

00:03:04,890 --> 00:03:08,700
whilst you're in production you're not

00:03:06,239 --> 00:03:10,920
interested in your debug levels or info

00:03:08,700 --> 00:03:12,269
level stuff more interested in warnings

00:03:10,920 --> 00:03:14,459
and errors and so on so you could turn

00:03:12,269 --> 00:03:19,019
that off you quieten it down you squelch

00:03:14,459 --> 00:03:21,239
for anyone who's into radio but you can

00:03:19,019 --> 00:03:22,920
turn the logging level down so that you

00:03:21,239 --> 00:03:26,820
can get more information whilst you're

00:03:22,920 --> 00:03:29,130
debugging and it's always compared with

00:03:26,820 --> 00:03:32,190
greater than or equal to so if you set

00:03:29,130 --> 00:03:35,580
your logging level to info you'll get

00:03:32,190 --> 00:03:36,690
info and above little messages so you

00:03:35,580 --> 00:03:38,640
don't have to worry about saying oh

00:03:36,690 --> 00:03:41,160
what's the level below info so that I

00:03:38,640 --> 00:03:42,930
can always get my info messages in

00:03:41,160 --> 00:03:45,900
logging there's these four basic players

00:03:42,930 --> 00:03:49,920
we have loggers log records handlers and

00:03:45,900 --> 00:03:51,630
formatters your logger as we saw before

00:03:49,920 --> 00:03:53,100
it's the thing you ask the logging

00:03:51,630 --> 00:03:54,690
library for and it gives you a logger

00:03:53,100 --> 00:03:58,440
and that's where you pass your messages

00:03:54,690 --> 00:04:00,120
to it will in turn produce log records

00:03:58,440 --> 00:04:03,240
which hold all the information about the

00:04:00,120 --> 00:04:05,400
log event that you have generated

00:04:03,240 --> 00:04:07,260
and then how it eventually makes its way

00:04:05,400 --> 00:04:10,010
under handlers which do something to

00:04:07,260 --> 00:04:12,570
output that log message somewhere and

00:04:10,010 --> 00:04:17,400
they will often use for matters to

00:04:12,570 --> 00:04:20,850
decide how that looks the actual flow is

00:04:17,400 --> 00:04:23,490
something a bit like this so you will

00:04:20,850 --> 00:04:25,500
pass your message into your logger which

00:04:23,490 --> 00:04:26,940
will then go and create a record which

00:04:25,500 --> 00:04:28,410
you can actually configure the record

00:04:26,940 --> 00:04:31,350
format but you probably won't need to

00:04:28,410 --> 00:04:34,410
then hand that message off maybe to a

00:04:31,350 --> 00:04:36,510
number of handlers which might call out

00:04:34,410 --> 00:04:38,640
to the formatter to format it and then

00:04:36,510 --> 00:04:40,650
pass off either just dump it in with all

00:04:38,640 --> 00:04:43,200
your logs I couldn't find an image for

00:04:40,650 --> 00:04:45,480
disk sorry

00:04:43,200 --> 00:04:48,380
maybe email it or even send it off into

00:04:45,480 --> 00:04:50,790
the cloud for somebody else to deal with

00:04:48,380 --> 00:04:53,130
the logger class is actually really

00:04:50,790 --> 00:04:55,200
simple all of the logging code is really

00:04:53,130 --> 00:04:58,620
simple as it turns out as I discovered

00:04:55,200 --> 00:05:02,100
was researching this so the logger

00:04:58,620 --> 00:05:04,080
itself has a name and a level that check

00:05:02,100 --> 00:05:05,970
level function just turns level names

00:05:04,080 --> 00:05:09,840
into level numbers and make sure it's a

00:05:05,970 --> 00:05:13,230
known value apparent and propagate which

00:05:09,840 --> 00:05:16,110
we'll get into later on a list of

00:05:13,230 --> 00:05:17,790
handlers not just one but a list and in

00:05:16,110 --> 00:05:19,620
a flag to try and disable it and as you

00:05:17,790 --> 00:05:22,020
can see it extends the filter a class

00:05:19,620 --> 00:05:25,980
which has a list of filters which I'll

00:05:22,020 --> 00:05:29,610
explain in a minute then you have your

00:05:25,980 --> 00:05:30,750
log record which has a lot of arguments

00:05:29,610 --> 00:05:32,550
but you never have to create it

00:05:30,750 --> 00:05:36,840
explicitly the handler will do that for

00:05:32,550 --> 00:05:39,480
you but it has again the name of the the

00:05:36,840 --> 00:05:42,750
handle of the logger that it came in via

00:05:39,480 --> 00:05:44,400
the level of this log message and then

00:05:42,750 --> 00:05:48,360
some information about where it came

00:05:44,400 --> 00:05:50,370
from in the code base what the file name

00:05:48,360 --> 00:05:52,200
was what the line number was and then

00:05:50,370 --> 00:05:54,000
the message that you passed in and the

00:05:52,200 --> 00:05:58,470
arguments you passed in and maybe some

00:05:54,000 --> 00:06:00,120
exception information as well the

00:05:58,470 --> 00:06:02,430
function that it came from if it's known

00:06:00,120 --> 00:06:05,340
the stack information and any other

00:06:02,430 --> 00:06:09,990
details that the logger passed along to

00:06:05,340 --> 00:06:11,310
it it also goes and figures out what

00:06:09,990 --> 00:06:12,419
thread it's running in if you've got

00:06:11,310 --> 00:06:14,460
threads enabled and gets that

00:06:12,419 --> 00:06:16,860
information the process ID and process

00:06:14,460 --> 00:06:19,139
name if it can figure them out

00:06:16,860 --> 00:06:21,599
the level name from the level number and

00:06:19,139 --> 00:06:23,280
the filename and module that the

00:06:21,599 --> 00:06:26,360
function comes from if you can figure

00:06:23,280 --> 00:06:29,460
these out it will stash them on itself

00:06:26,360 --> 00:06:31,199
it has only one real significant method

00:06:29,460 --> 00:06:33,300
and that is get message which takes the

00:06:31,199 --> 00:06:35,190
message you got it and just Splott

00:06:33,300 --> 00:06:39,500
resolves it with the odds you gave it

00:06:35,190 --> 00:06:43,020
which is why you should always call and

00:06:39,500 --> 00:06:44,879
pass message format and list of

00:06:43,020 --> 00:06:48,780
arguments or message format and

00:06:44,879 --> 00:06:52,530
addictive arguments but instead of

00:06:48,780 --> 00:06:54,720
formatting yourself because if you leave

00:06:52,530 --> 00:06:57,870
it for the logging formatter and all the

00:06:54,720 --> 00:06:59,759
rest of it to do means sometimes that

00:06:57,870 --> 00:07:01,169
work won't have to be done because the

00:06:59,759 --> 00:07:04,020
message will be dropped rather than

00:07:01,169 --> 00:07:05,460
actually logged in save your bit of

00:07:04,020 --> 00:07:09,440
performance is a small thing but it can

00:07:05,460 --> 00:07:11,880
add up a lot over time don't do that

00:07:09,440 --> 00:07:13,949
then the messages are passed to handlers

00:07:11,880 --> 00:07:15,780
which again extend filter it so they

00:07:13,949 --> 00:07:19,050
have a list of filters as well which

00:07:15,780 --> 00:07:21,479
we'll get into a name which they might

00:07:19,050 --> 00:07:25,770
figure out from somewhere that's

00:07:21,479 --> 00:07:27,719
relevant later on again a level and a

00:07:25,770 --> 00:07:29,400
formatter that they might use and they

00:07:27,719 --> 00:07:31,259
have two important methods which is

00:07:29,400 --> 00:07:33,840
handle which is how the messages get

00:07:31,259 --> 00:07:36,840
passed into them and emit which is how

00:07:33,840 --> 00:07:39,029
this specific handler actually deals

00:07:36,840 --> 00:07:42,360
with messages handle itself is

00:07:39,029 --> 00:07:43,770
implemented by default for you which has

00:07:42,360 --> 00:07:46,169
a lock to make sure that things are

00:07:43,770 --> 00:07:48,710
happening in order and not stamping all

00:07:46,169 --> 00:07:50,969
over each other the logger gives you

00:07:48,710 --> 00:07:52,440
these actually come in the standard

00:07:50,969 --> 00:07:55,319
library there's quite a large selection

00:07:52,440 --> 00:07:57,479
of handlers obviously a stream handler

00:07:55,319 --> 00:08:00,300
which by default will hand will stream

00:07:57,479 --> 00:08:01,710
out to standard i/o standard error so

00:08:00,300 --> 00:08:03,960
you can just have it come out on the

00:08:01,710 --> 00:08:06,180
console or you can give it another

00:08:03,960 --> 00:08:07,949
stream to pass through some other file

00:08:06,180 --> 00:08:09,509
or whatever there's an explicit file

00:08:07,949 --> 00:08:12,330
handle which you tell it what file you

00:08:09,509 --> 00:08:15,270
want to log to a null handler which just

00:08:12,330 --> 00:08:17,719
drops it in the bin I'm not sure of the

00:08:15,270 --> 00:08:21,180
use for that but there it is

00:08:17,719 --> 00:08:22,740
watched file handler is really handy

00:08:21,180 --> 00:08:24,270
because it will watch the file and if

00:08:22,740 --> 00:08:26,009
somebody else writes to it or somebody

00:08:24,270 --> 00:08:28,370
else deletes it or truncates it will

00:08:26,009 --> 00:08:30,800
close its handle and open it again

00:08:28,370 --> 00:08:34,669
so you can easily get your logs to

00:08:30,800 --> 00:08:36,740
restart rotating handle there is a base

00:08:34,669 --> 00:08:38,419
class for rotating file handle and timed

00:08:36,740 --> 00:08:41,300
rotating file handler so you can either

00:08:38,419 --> 00:08:42,710
set a maximum size or a maximum age for

00:08:41,300 --> 00:08:45,920
the log file and have it rotate and

00:08:42,710 --> 00:08:47,510
continue socket Handler and datagram

00:08:45,920 --> 00:08:49,580
handle are handy if you want to send

00:08:47,510 --> 00:08:51,320
your little log messages over the wire

00:08:49,580 --> 00:08:52,970
to somebody else to handle but can

00:08:51,320 --> 00:08:54,529
actually be a very efficient way because

00:08:52,970 --> 00:08:56,690
the specially with diagram handler

00:08:54,529 --> 00:08:58,580
anyone who was here for Briana's talk

00:08:56,690 --> 00:09:01,610
it's a very similar solution to what

00:08:58,580 --> 00:09:02,690
collect Dee does send it out as a UDP

00:09:01,610 --> 00:09:05,240
packet and forget about it

00:09:02,690 --> 00:09:07,310
it's very efficient to get rid of syslog

00:09:05,240 --> 00:09:09,470
handler because we have syslog and the

00:09:07,310 --> 00:09:12,770
event handler for a Windows version of

00:09:09,470 --> 00:09:14,300
the same thing more or less SMTP handler

00:09:12,770 --> 00:09:17,540
because sometimes you want to email your

00:09:14,300 --> 00:09:21,470
admins on the weekend they don't want

00:09:17,540 --> 00:09:22,970
you to but you might want to memory

00:09:21,470 --> 00:09:24,470
handler because you just want to hold

00:09:22,970 --> 00:09:26,510
stuff in memory for a while maybe you're

00:09:24,470 --> 00:09:27,860
using it in testing so you can get hold

00:09:26,510 --> 00:09:30,710
of the logs that you've got you've put

00:09:27,860 --> 00:09:32,420
out you can make a web request and then

00:09:30,710 --> 00:09:36,320
the last two queue Handler and queue

00:09:32,420 --> 00:09:38,360
listener queue handler will push it into

00:09:36,320 --> 00:09:39,950
one of pythons queue classes either a

00:09:38,360 --> 00:09:42,260
regular one or one of the other types

00:09:39,950 --> 00:09:44,900
that come along from async ioans and

00:09:42,260 --> 00:09:46,580
threading and so on and queue listener

00:09:44,900 --> 00:09:48,500
will actually consume from one of those

00:09:46,580 --> 00:09:50,630
queues so you could potentially offload

00:09:48,500 --> 00:09:55,279
all your logging to one thread and let

00:09:50,630 --> 00:09:57,650
the others get on with their work when

00:09:55,279 --> 00:10:00,459
you're configuring your logging which is

00:09:57,650 --> 00:10:02,390
what a lot of people skip over

00:10:00,459 --> 00:10:04,550
configuring your logging is where a lot

00:10:02,390 --> 00:10:07,130
of the power really comes from you will

00:10:04,550 --> 00:10:09,080
configure a number of loggers which is

00:10:07,130 --> 00:10:11,089
where you send your messages in and they

00:10:09,080 --> 00:10:13,870
will have a level to determine how much

00:10:11,089 --> 00:10:16,220
they squelch messages coming in

00:10:13,870 --> 00:10:18,200
propagate as we talked about before a

00:10:16,220 --> 00:10:20,870
list of filters which allow you to

00:10:18,200 --> 00:10:23,570
control which messages actually get

00:10:20,870 --> 00:10:24,920
through and a list of handle is that

00:10:23,570 --> 00:10:28,640
they're going to pass on successful

00:10:24,920 --> 00:10:30,380
messages to handlers will have when

00:10:28,640 --> 00:10:31,850
you're configuring you specify what the

00:10:30,380 --> 00:10:33,980
classes of the handle are you're trying

00:10:31,850 --> 00:10:36,140
to configure it's a level that it's

00:10:33,980 --> 00:10:37,880
going to squelch at again its own list

00:10:36,140 --> 00:10:40,459
of filters to decide what to do and

00:10:37,880 --> 00:10:42,110
perhaps a formatter for how it's going

00:10:40,459 --> 00:10:44,660
to format its messages for matters

00:10:42,110 --> 00:10:46,519
you generally just give of the actual

00:10:44,660 --> 00:10:48,800
format string a Python format string

00:10:46,519 --> 00:10:50,959
normally date format so how to

00:10:48,800 --> 00:10:52,250
specifically format dates for this case

00:10:50,959 --> 00:10:55,790
so you can actually control that

00:10:52,250 --> 00:10:57,950
separately and there's now since three

00:10:55,790 --> 00:10:59,690
point six or three point seven three

00:10:57,950 --> 00:11:02,089
different styles of formatting you're

00:10:59,690 --> 00:11:04,100
allowed to use because python has so

00:11:02,089 --> 00:11:07,790
many different string formatting options

00:11:04,100 --> 00:11:09,649
now and then there's filters which are

00:11:07,790 --> 00:11:11,870
basically most of the time you're going

00:11:09,649 --> 00:11:13,820
to use them a function of the type

00:11:11,870 --> 00:11:15,500
record where you get a log record and

00:11:13,820 --> 00:11:20,560
they return a ball to say whether or not

00:11:15,500 --> 00:11:23,000
to allow this message through this is a

00:11:20,560 --> 00:11:26,690
relatively simple way of configuring

00:11:23,000 --> 00:11:29,480
your logging you can import from logging

00:11:26,690 --> 00:11:30,769
dot config import dict config which

00:11:29,480 --> 00:11:32,720
allows you to configure things just

00:11:30,769 --> 00:11:37,240
passing in a dictionary there's also an

00:11:32,720 --> 00:11:39,649
any format one but that's really tedious

00:11:37,240 --> 00:11:42,279
it looks like a lot but we'll break it

00:11:39,649 --> 00:11:46,370
down so we can see it's simpler parts

00:11:42,279 --> 00:11:48,199
the formatter is just a dict of named

00:11:46,370 --> 00:11:49,610
formats that you want to have we're

00:11:48,199 --> 00:11:51,199
going to have a default one here which

00:11:49,610 --> 00:11:53,449
just gives us the time the level the

00:11:51,199 --> 00:11:54,800
module the line number the messages the

00:11:53,449 --> 00:11:56,709
actual message we're getting and we're

00:11:54,800 --> 00:12:01,579
going to tell it that we're using for

00:11:56,709 --> 00:12:03,560
map type formatting you can get an awful

00:12:01,579 --> 00:12:05,720
lot of extra information that's all well

00:12:03,560 --> 00:12:08,000
tabled in the logging documentation but

00:12:05,720 --> 00:12:12,019
this is an example of what you might

00:12:08,000 --> 00:12:15,949
want to log about something next is

00:12:12,019 --> 00:12:18,230
filters you might for instance want to

00:12:15,949 --> 00:12:20,180
not log too certain things on the

00:12:18,230 --> 00:12:22,820
weekend you might not want to SMS your

00:12:20,180 --> 00:12:25,459
admins or your ops team on the weekends

00:12:22,820 --> 00:12:27,260
or not during the week you might have an

00:12:25,459 --> 00:12:29,209
emergency service that you only want to

00:12:27,260 --> 00:12:33,980
log to during the week and not the

00:12:29,209 --> 00:12:37,820
weekends then we have the handlers so

00:12:33,980 --> 00:12:39,649
this is where the messages go out so

00:12:37,820 --> 00:12:42,829
here we have a simple example of a

00:12:39,649 --> 00:12:45,740
console we're calling a console that's

00:12:42,829 --> 00:12:47,120
using the stream handler which means we

00:12:45,740 --> 00:12:49,040
haven't told it anywhere else to put it

00:12:47,120 --> 00:12:51,430
to it's going to send it to standard

00:12:49,040 --> 00:12:53,750
error which is basically on the console

00:12:51,430 --> 00:12:56,770
but we're going to limit it to only

00:12:53,750 --> 00:12:58,790
warning level messages and above

00:12:56,770 --> 00:13:01,040
then we're gonna have one we're gonna

00:12:58,790 --> 00:13:02,750
call log file and it uses the file

00:13:01,040 --> 00:13:06,340
handler right obviously and we're gonna

00:13:02,750 --> 00:13:06,340
tell it the file name we want to log to

00:13:06,430 --> 00:13:14,180
or email Handler using email that min

00:13:11,030 --> 00:13:21,470
we're going to sometimes annoy our

00:13:14,180 --> 00:13:23,200
admins but not on the weekend so we're

00:13:21,470 --> 00:13:26,090
going to specify a filter here on the

00:13:23,200 --> 00:13:30,890
outgoing messages to not send them on

00:13:26,090 --> 00:13:36,140
the weekend but sorry only critical

00:13:30,890 --> 00:13:39,080
messages get sent and then we configure

00:13:36,140 --> 00:13:41,960
our loggers so here we have two entries

00:13:39,080 --> 00:13:43,460
one is just for my app and this is where

00:13:41,960 --> 00:13:45,650
the names actually start to won't be

00:13:43,460 --> 00:13:49,250
important so when we asked for our logo

00:13:45,650 --> 00:13:51,020
we gave it a name and this is where it

00:13:49,250 --> 00:13:52,910
will look up the names but the names

00:13:51,020 --> 00:13:54,860
don't actually have to match what's in

00:13:52,910 --> 00:13:59,000
the logging country but I'll get to that

00:13:54,860 --> 00:14:01,910
in a minute - so here we have my app the

00:13:59,000 --> 00:14:03,740
basic logger which only logs error level

00:14:01,910 --> 00:14:05,360
messages and above and send some

00:14:03,740 --> 00:14:07,490
straight to the log file but we have

00:14:05,360 --> 00:14:09,200
this one module that's really troubling

00:14:07,490 --> 00:14:13,490
us so we're going to put in a debug

00:14:09,200 --> 00:14:14,870
living debug level logging and it's also

00:14:13,490 --> 00:14:18,370
going to send to the console so that we

00:14:14,870 --> 00:14:22,220
can see it a different way to write this

00:14:18,370 --> 00:14:25,810
and get mostly the same effect would be

00:14:22,220 --> 00:14:29,510
to specify only the console handling and

00:14:25,810 --> 00:14:31,220
propagate as true what happens with the

00:14:29,510 --> 00:14:33,650
names of your handlers is they're

00:14:31,220 --> 00:14:38,690
treated like a hierarchy based on the

00:14:33,650 --> 00:14:42,560
dot separators so in our example my app

00:14:38,690 --> 00:14:45,230
is apparent to my app troubling module

00:14:42,560 --> 00:14:48,500
so any messages that the my app

00:14:45,230 --> 00:14:50,780
troubling module gets from any any

00:14:48,500 --> 00:14:53,030
logger whose name begins with my app

00:14:50,780 --> 00:14:58,190
troubling module or anything longer than

00:14:53,030 --> 00:15:00,410
that it will now catch here get debug

00:14:58,190 --> 00:15:02,390
level logging on that but it will also

00:15:00,410 --> 00:15:04,280
propagate to its parent which in our

00:15:02,390 --> 00:15:06,500
case is up here so it'll still reach to

00:15:04,280 --> 00:15:08,130
the log file but it will also go to the

00:15:06,500 --> 00:15:10,720
console

00:15:08,130 --> 00:15:13,390
this means that you can very narrowly

00:15:10,720 --> 00:15:15,310
target bits of your code to say in this

00:15:13,390 --> 00:15:17,050
part I want to log it more closely for a

00:15:15,310 --> 00:15:18,610
while because it's giving us problems or

00:15:17,050 --> 00:15:21,400
this part I don't want to hear about

00:15:18,610 --> 00:15:25,380
these messages this is where the

00:15:21,400 --> 00:15:25,380
propagate and the parent part come in

00:15:25,650 --> 00:15:29,830
then there is the root logo which is

00:15:28,210 --> 00:15:31,810
basically when none of those are the

00:15:29,830 --> 00:15:34,060
messages match none of those other

00:15:31,810 --> 00:15:36,670
loggers match what you're trying to send

00:15:34,060 --> 00:15:38,800
what do we do with the messages and it's

00:15:36,670 --> 00:15:40,720
just like all the other logger configs

00:15:38,800 --> 00:15:42,910
in this case we're just going to say

00:15:40,720 --> 00:15:45,280
it's going to go to the log file and

00:15:42,910 --> 00:15:46,600
we're going to email our admin in case

00:15:45,280 --> 00:15:48,250
there's a critical message from

00:15:46,600 --> 00:15:50,980
somewhere because if we remember email

00:15:48,250 --> 00:15:55,120
admin handler limits to critical

00:15:50,980 --> 00:15:58,990
messages so generally your best practice

00:15:55,120 --> 00:16:01,000
when you're using logging is import

00:15:58,990 --> 00:16:02,950
logging and then get your own local

00:16:01,000 --> 00:16:06,040
logger based on your current modules

00:16:02,950 --> 00:16:09,070
name so in Python dunder named under

00:16:06,040 --> 00:16:13,720
gives you your current modules import

00:16:09,070 --> 00:16:16,800
path this way you can very easily have

00:16:13,720 --> 00:16:19,630
your code logging hierarchical and

00:16:16,800 --> 00:16:21,490
therefore configure it based on your

00:16:19,630 --> 00:16:23,350
modules here I'm not interested in

00:16:21,490 --> 00:16:25,240
logging from this module or any of its

00:16:23,350 --> 00:16:27,730
descendants so I'll just turn that off

00:16:25,240 --> 00:16:29,589
or I am interested in this one at this

00:16:27,730 --> 00:16:33,310
level but this part of it at a greater

00:16:29,589 --> 00:16:35,470
detail also this leaves your login

00:16:33,310 --> 00:16:37,660
configuration to your application not

00:16:35,470 --> 00:16:39,250
your library not your module you can

00:16:37,660 --> 00:16:41,290
configure all of your logging and how

00:16:39,250 --> 00:16:45,750
detailed you want it from a global scope

00:16:41,290 --> 00:16:48,690
and still get localized configuration

00:16:45,750 --> 00:16:52,270
additionally as I mentioned before

00:16:48,690 --> 00:16:54,730
don't use the formatting when you're

00:16:52,270 --> 00:16:57,640
calling logging let the logging library

00:16:54,730 --> 00:17:01,650
do it for you it's not a big win but it

00:16:57,640 --> 00:17:01,650
can sometimes add up quite considerably

00:17:01,710 --> 00:17:07,990
some neat Texan tips and tricks one you

00:17:05,560 --> 00:17:10,900
can use yeah more who likes working with

00:17:07,990 --> 00:17:16,209
gamal over perhaps maintaining code or

00:17:10,900 --> 00:17:18,339
writing Jason by hand yeah right it's a

00:17:16,209 --> 00:17:19,720
little nicer to work with so look you

00:17:18,339 --> 00:17:20,730
read in yellow and guess what it comes

00:17:19,720 --> 00:17:23,549
out as a Dixon so

00:17:20,730 --> 00:17:29,220
why not you can just pass it away and

00:17:23,549 --> 00:17:30,510
use dick config also and someone was

00:17:29,220 --> 00:17:32,549
asking about this the other day they

00:17:30,510 --> 00:17:34,620
wanted to track certain log messages and

00:17:32,549 --> 00:17:36,750
get some extra detail about it well what

00:17:34,620 --> 00:17:38,700
actually happens is any extra

00:17:36,750 --> 00:17:42,419
information you pass in the extra

00:17:38,700 --> 00:17:46,110
keyword argument gets stuffed onto

00:17:42,419 --> 00:17:48,120
attributes on the log message the log

00:17:46,110 --> 00:17:51,540
record carries this so long as it's not

00:17:48,120 --> 00:17:54,900
of an existing attribute of the log that

00:17:51,540 --> 00:17:57,090
will actually raise an error so you can

00:17:54,900 --> 00:17:59,160
pass it along and have your filters or

00:17:57,090 --> 00:18:01,380
your handlers do magic things based on

00:17:59,160 --> 00:18:03,540
what you've actually passed along I

00:18:01,380 --> 00:18:05,400
couldn't actually think of anything else

00:18:03,540 --> 00:18:08,309
to include in this talk because it was

00:18:05,400 --> 00:18:17,190
kind of rushed so that's all and have we

00:18:08,309 --> 00:18:25,200
any questions we got some time for some

00:18:17,190 --> 00:18:30,690
questions big surprise hello thank you I

00:18:25,200 --> 00:18:34,080
needed this so many years ago a couple

00:18:30,690 --> 00:18:36,120
of questions first one is about a struct

00:18:34,080 --> 00:18:37,799
look do you have opinions about struct

00:18:36,120 --> 00:18:41,730
log how does it relate to standard

00:18:37,799 --> 00:18:43,770
logging etc I think using structured

00:18:41,730 --> 00:18:45,960
logging in general just logging that

00:18:43,770 --> 00:18:47,880
logs actual structured records rather

00:18:45,960 --> 00:18:49,799
than strings is definitely the way

00:18:47,880 --> 00:18:51,440
forward now that sort of thing is a lot

00:18:49,799 --> 00:18:53,880
cheaper and more efficient to use and

00:18:51,440 --> 00:18:56,220
standard logging does not preclude this

00:18:53,880 --> 00:18:57,990
in any way as there's something else

00:18:56,220 --> 00:18:59,910
that I know we've had discussions on

00:18:57,990 --> 00:19:01,740
this before and I thought logging always

00:18:59,910 --> 00:19:03,929
like strings well no it doesn't the

00:19:01,740 --> 00:19:06,900
handler is not forced to do that it can

00:19:03,929 --> 00:19:10,290
output any format you want to any sir

00:19:06,900 --> 00:19:14,070
any target you want so if you want to

00:19:10,290 --> 00:19:15,750
build a logger that outputs to your

00:19:14,070 --> 00:19:19,350
struck log service or whatever you're

00:19:15,750 --> 00:19:21,179
using you can it doesn't actually limit

00:19:19,350 --> 00:19:23,299
you to that so they thought that far

00:19:21,179 --> 00:19:23,299
ahead

00:19:25,630 --> 00:19:29,000
hey Curtis um thanks for the talk I've

00:19:28,040 --> 00:19:33,020
got um

00:19:29,000 --> 00:19:36,770
Django specific question sort of two

00:19:33,020 --> 00:19:39,740
parts based on what you've laid out is

00:19:36,770 --> 00:19:41,179
there anything magical or unexpected

00:19:39,740 --> 00:19:43,010
happening in the Django login

00:19:41,179 --> 00:19:46,780
configuration and do you have any Django

00:19:43,010 --> 00:19:48,470
specific sort of tips or best practices

00:19:46,780 --> 00:19:51,020
well pretty much

00:19:48,470 --> 00:19:53,780
Django uses the the dict config approach

00:19:51,020 --> 00:19:56,540
I mean in your settings pie you'll find

00:19:53,780 --> 00:19:59,210
the logging setting is pretty much the

00:19:56,540 --> 00:20:00,799
same format I laid out there it should

00:19:59,210 --> 00:20:02,510
also include a version number which I've

00:20:00,799 --> 00:20:06,169
somehow managed to leave out from my

00:20:02,510 --> 00:20:08,660
talk there you go oops there's no real

00:20:06,169 --> 00:20:12,370
magic to it and again Django tends to

00:20:08,660 --> 00:20:15,410
abide by the the hierarchical log naming

00:20:12,370 --> 00:20:16,910
so you can very easily say okay I don't

00:20:15,410 --> 00:20:18,860
want to hear from the Django library

00:20:16,910 --> 00:20:21,410
unless it's really bad except for now I

00:20:18,860 --> 00:20:23,630
want to love all my SQL queries so I'll

00:20:21,410 --> 00:20:26,630
set the logging lower like debug or info

00:20:23,630 --> 00:20:28,610
level on Django DB models and then I can

00:20:26,630 --> 00:20:30,860
get all of that information or I want to

00:20:28,610 --> 00:20:35,020
hear errors from somewhere else and turn

00:20:30,860 --> 00:20:46,669
that on and turn that off so no magic

00:20:35,020 --> 00:20:51,410
sorry thanks yep thank you very much for

00:20:46,669 --> 00:20:54,410
this talk a quick question about modules

00:20:51,410 --> 00:20:58,390
so if you actually set up your log or

00:20:54,410 --> 00:21:01,220
configure it in your kind of your main

00:20:58,390 --> 00:21:04,130
is there any sort of magic where you can

00:21:01,220 --> 00:21:06,650
then just use log or do you have to put

00:21:04,130 --> 00:21:11,240
it into global use it from there or

00:21:06,650 --> 00:21:14,720
what's the how do you pass around the

00:21:11,240 --> 00:21:16,460
log instances that you grabbed well

00:21:14,720 --> 00:21:18,440
that's one of the joys is you don't have

00:21:16,460 --> 00:21:20,480
to there's a there's a global logging

00:21:18,440 --> 00:21:23,270
configuration so that when you create

00:21:20,480 --> 00:21:25,250
your logging country when you call get

00:21:23,270 --> 00:21:29,090
logger it's added to a global registry

00:21:25,250 --> 00:21:30,650
of lot of names loggers and same with

00:21:29,090 --> 00:21:33,530
the handlers there is actually a

00:21:30,650 --> 00:21:35,860
facility to allow you to run a network

00:21:33,530 --> 00:21:37,340
thread that will listen for log

00:21:35,860 --> 00:21:39,410
reconfigurations

00:21:37,340 --> 00:21:40,430
this is built into the library - but I

00:21:39,410 --> 00:21:43,880
don't think they make a big noise about

00:21:40,430 --> 00:21:45,830
it so in theory you could actually

00:21:43,880 --> 00:21:48,170
connect to a socket that your task is

00:21:45,830 --> 00:21:50,890
running and ship it a new config that it

00:21:48,170 --> 00:21:53,900
will update its existing config with

00:21:50,890 --> 00:21:55,730
because it has that registry of all the

00:21:53,900 --> 00:21:59,060
different handlers so it doesn't matter

00:21:55,730 --> 00:22:00,920
where you are in the codebase and which

00:21:59,060 --> 00:22:04,040
library are coming from as long as we

00:22:00,920 --> 00:22:06,110
all play by this single simple rule all

00:22:04,040 --> 00:22:10,630
of the logging will work together you

00:22:06,110 --> 00:22:10,630
don't have to pass around logging okay

00:22:12,250 --> 00:22:17,900
hi guys thanks for the talk in your

00:22:15,650 --> 00:22:21,170
sample config that you just had you had

00:22:17,900 --> 00:22:24,380
your most precise logger configured to

00:22:21,170 --> 00:22:27,850
write debug messages to the console but

00:22:24,380 --> 00:22:31,010
then your hand icon soul handler you had

00:22:27,850 --> 00:22:33,560
filtered the level filter - warning so

00:22:31,010 --> 00:22:39,250
will that only show warning level

00:22:33,560 --> 00:22:41,810
messages so double yeah so you've got

00:22:39,250 --> 00:22:46,820
console debug going to console and then

00:22:41,810 --> 00:22:49,190
in the console handler level warned yeah

00:22:46,820 --> 00:22:51,110
so with that and see them you might see

00:22:49,190 --> 00:22:53,510
anything from though so when the

00:22:51,110 --> 00:22:54,860
messages come in and go back to my

00:22:53,510 --> 00:23:04,940
diagram cuz that's a good way of showing

00:22:54,860 --> 00:23:07,160
it the logger itself has a level so it

00:23:04,940 --> 00:23:09,440
can drop messages because of the level

00:23:07,160 --> 00:23:10,910
and it has a bunch of filters and it'll

00:23:09,440 --> 00:23:12,590
drop messages because of the filters

00:23:10,910 --> 00:23:14,810
anything that gets through all of that

00:23:12,590 --> 00:23:16,820
it'll hand on to the handlers which also

00:23:14,810 --> 00:23:19,100
have their own level and their own

00:23:16,820 --> 00:23:21,530
filters so you've got this sort of a

00:23:19,100 --> 00:23:25,670
mesh happening of everybody gets their

00:23:21,530 --> 00:23:27,440
own rules applied so yes in that

00:23:25,670 --> 00:23:29,270
particular configuration you wouldn't

00:23:27,440 --> 00:23:30,770
see your debug messages and so that was

00:23:29,270 --> 00:23:33,680
probably an oversight on my

00:23:30,770 --> 00:23:36,680
configuration but yes you've got

00:23:33,680 --> 00:23:41,060
multiple points of being able to trim

00:23:36,680 --> 00:23:44,810
down how much noise gets through how do

00:23:41,060 --> 00:23:47,890
you recommend disabling the log handlers

00:23:44,810 --> 00:23:47,890
during unit tests

00:23:49,100 --> 00:23:53,630
you can reset the login configuration if

00:23:51,860 --> 00:23:55,930
you really must if you've imported

00:23:53,630 --> 00:24:00,230
everything and you're doing that

00:23:55,930 --> 00:24:06,350
alternatively you should be able to get

00:24:00,230 --> 00:24:09,380
in there and reset all the all the

00:24:06,350 --> 00:24:11,450
handlers to work to be null handlers but

00:24:09,380 --> 00:24:13,220
really since all of the configuration of

00:24:11,450 --> 00:24:14,720
the logging is handled at your top level

00:24:13,220 --> 00:24:18,230
if you're not running the application

00:24:14,720 --> 00:24:21,830
per se but importing modules to call

00:24:18,230 --> 00:24:23,750
them then you get to configure the login

00:24:21,830 --> 00:24:26,870
before any of the modules that your unit

00:24:23,750 --> 00:24:28,730
testing run so you can say I want this

00:24:26,870 --> 00:24:34,370
to go to an in-memory Handler and just

00:24:28,730 --> 00:24:37,870
read that hello Curtis um with testing

00:24:34,370 --> 00:24:43,460
is it also possible to assert that

00:24:37,870 --> 00:24:44,840
logging calls are made well you can mock

00:24:43,460 --> 00:24:46,880
a part of your testing library if you

00:24:44,840 --> 00:24:48,680
really need to or you can use things

00:24:46,880 --> 00:24:55,070
like the memory Handler and so on to

00:24:48,680 --> 00:24:57,320
count how many messages got put in PI

00:24:55,070 --> 00:25:00,890
test has its own log capture stuff so

00:24:57,320 --> 00:25:03,170
for that but I don't tend to think of PI

00:25:00,890 --> 00:25:06,230
test by default because most people well

00:25:03,170 --> 00:25:10,280
not everybody uses by test it's good but

00:25:06,230 --> 00:25:12,860
not everybody uses it hey I was just

00:25:10,280 --> 00:25:16,190
wondering because of the complexity of

00:25:12,860 --> 00:25:17,960
log and of logging in Python it presents

00:25:16,190 --> 00:25:19,640
quite a barrier to entry for people who

00:25:17,960 --> 00:25:21,320
are very new to Python do you know if

00:25:19,640 --> 00:25:22,940
any has any work being done to create a

00:25:21,320 --> 00:25:26,180
simple 5 logging framework that just

00:25:22,940 --> 00:25:28,010
gets you the basics well that was part

00:25:26,180 --> 00:25:29,900
of why I did this talk I didn't think

00:25:28,010 --> 00:25:31,730
logging itself is really that complex

00:25:29,900 --> 00:25:32,870
there are a number of moving parts but

00:25:31,730 --> 00:25:36,170
once you break them down they're aged

00:25:32,870 --> 00:25:38,180
quite simple that said as I showed in

00:25:36,170 --> 00:25:40,070
the very very first slide you can import

00:25:38,180 --> 00:25:43,430
logging and just log through it which

00:25:40,070 --> 00:25:45,080
will use the route logger so you don't

00:25:43,430 --> 00:25:47,680
have to do anything and you can very

00:25:45,080 --> 00:25:50,240
very quickly use there's a simple config

00:25:47,680 --> 00:25:52,490
where you can pass just a few options to

00:25:50,240 --> 00:25:54,470
say I want my level to be this I want my

00:25:52,490 --> 00:25:56,870
destination be that my handler yeah and

00:25:54,470 --> 00:26:00,590
I'm the fly you can also call add

00:25:56,870 --> 00:26:01,370
Handler and so on to to make it so yes

00:26:00,590 --> 00:26:04,460
it can be

00:26:01,370 --> 00:26:10,190
very simply four very simple cases your

00:26:04,460 --> 00:26:12,430
very simplest option is as I showed

00:26:10,190 --> 00:26:14,750
import logging and call the log messages

00:26:12,430 --> 00:26:17,900
and that's very simple

00:26:14,750 --> 00:26:22,300
if you then configure a handler to say

00:26:17,900 --> 00:26:22,300
send my messages out there you're done

00:26:23,770 --> 00:26:30,320
Thank You Curtis for an excellent talk

00:26:26,260 --> 00:26:32,360
so when I first came across logging I

00:26:30,320 --> 00:26:34,550
had some difficulties because I wanted

00:26:32,360 --> 00:26:37,340
to change the log level based upon

00:26:34,550 --> 00:26:39,500
parameters at the arc pass that's coming

00:26:37,340 --> 00:26:41,750
through have you seen any good examples

00:26:39,500 --> 00:26:45,080
of that and if it's too long we can do

00:26:41,750 --> 00:26:47,120
it later I've done it myself in a couple

00:26:45,080 --> 00:26:48,860
of programs based on environment

00:26:47,120 --> 00:26:50,300
variables and you can just say if

00:26:48,860 --> 00:26:53,000
they've set this variable set this to

00:26:50,300 --> 00:26:54,710
debug otherwise set it to and because

00:26:53,000 --> 00:26:56,360
you can set all your levels in names

00:26:54,710 --> 00:26:58,430
instead of numbers that can actually

00:26:56,360 --> 00:27:01,400
work very well you can say love level

00:26:58,430 --> 00:27:05,180
equals info and just go with it or as a

00:27:01,400 --> 00:27:08,450
nag pass option yeah - - debug will set

00:27:05,180 --> 00:27:11,300
the log level to debugger so it's quite

00:27:08,450 --> 00:27:15,340
yeah they've made a lot of small things

00:27:11,300 --> 00:27:18,740
that can make that life a lot easier

00:27:15,340 --> 00:27:26,360
these lights are really bright other

00:27:18,740 --> 00:27:28,430
that's one more question thanks for the

00:27:26,360 --> 00:27:31,250
talk so I just have a question with your

00:27:28,430 --> 00:27:33,890
email admin log how you had it set to

00:27:31,250 --> 00:27:35,690
not on weekends yes is there how would

00:27:33,890 --> 00:27:38,450
you implement if you wanted to say a

00:27:35,690 --> 00:27:45,560
critical level to bypass the not on

00:27:38,450 --> 00:27:47,720
weekends clause and actually what you

00:27:45,560 --> 00:27:53,750
want to say don't email on weekends

00:27:47,720 --> 00:27:55,010
unless it's critical yeah I mean given

00:27:53,750 --> 00:27:56,780
the flexibility you have a lot of

00:27:55,010 --> 00:27:58,490
choices you could rewrite you're not on

00:27:56,780 --> 00:28:02,870
weekends filter to say unless it's

00:27:58,490 --> 00:28:05,240
critical potentially you could write a

00:28:02,870 --> 00:28:06,770
nested filter filter but that's going a

00:28:05,240 --> 00:28:09,860
bit too far or you could write a

00:28:06,770 --> 00:28:13,240
separate handler to say critical

00:28:09,860 --> 00:28:13,240
messages handle always

00:28:13,700 --> 00:28:27,000
everything else handle but not on

00:28:16,170 --> 00:28:31,690
weekends all right more questions going

00:28:27,000 --> 00:28:39,799
once twice all right Thank You Curtis

00:28:31,690 --> 00:28:39,799

YouTube URL: https://www.youtube.com/watch?v=DxZ5WEo4hvU


