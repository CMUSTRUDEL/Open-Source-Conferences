Title: Pi-thon: Teaching maths with python!
Publication date: 2018-08-25
Playlist: PyCon Australia 2018
Description: 
	Liam Callaway

https://2018.pycon-au.org/talks/45012-pithon-teaching-maths-with-python/

Mathematics and programming often go hand in hand, but aren't always equally loved by students. I believe that Python can be a fantastic tool for teaching mathematical concepts, but also that mathematical inquiry can be a starting point for developing a wider interest in programming.

Python, PyCon, PyConAU, australia, programming, sydney

This video is licensed under CC BY 3.0 AU ‹https://creativecommons.org/licenses/by/3.0/au/›.

PyCon Australia (“PyCon AU”) is the national conference for the Python Programming Community, bringing together professional, student and enthusiast developers with a love for developing with Python.

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 24 - 28 2018.

Python, PyCon, PyConAU
Captions: 
	00:00:03,170 --> 00:00:11,570
hello everyone good morning we'd like to

00:00:06,569 --> 00:00:14,070
welcome you to Pike on a youth all right

00:00:11,570 --> 00:00:16,379
so we're going to start this morning

00:00:14,070 --> 00:00:20,400
with Python teaching math very psych

00:00:16,379 --> 00:00:28,470
yeah Python meeting teaching math with

00:00:20,400 --> 00:00:30,150
Python but it's welcome Liam Calloway hi

00:00:28,470 --> 00:00:32,610
everyone thanks for coming out to my

00:00:30,150 --> 00:00:35,790
talk today for the first talk of this

00:00:32,610 --> 00:00:37,680
session so first a little bit a little

00:00:35,790 --> 00:00:40,500
bit about me who is this guy

00:00:37,680 --> 00:00:42,719
so hi my name is Liam Calloway I

00:00:40,500 --> 00:00:43,620
recently graduated from the University

00:00:42,719 --> 00:00:46,050
of Tasmania

00:00:43,620 --> 00:00:48,690
I'm currently a software developer at

00:00:46,050 --> 00:00:51,030
wise tech global and in the past I've

00:00:48,690 --> 00:00:52,920
been a tutor at in CSS the national

00:00:51,030 --> 00:00:54,800
computer summit computer science Summer

00:00:52,920 --> 00:00:58,140
School and the University of Tasmania

00:00:54,800 --> 00:01:00,600
this is my second PyCon and it's my

00:00:58,140 --> 00:01:04,409
first time ever giving a talk so go easy

00:01:00,600 --> 00:01:07,140
on me so first of all just that's a bit

00:01:04,409 --> 00:01:08,670
about me about you show of hands who in

00:01:07,140 --> 00:01:12,000
this room is currently a student

00:01:08,670 --> 00:01:13,460
University High School cool and who is a

00:01:12,000 --> 00:01:17,460
teacher

00:01:13,460 --> 00:01:20,250
well nice alright so hopefully you find

00:01:17,460 --> 00:01:22,560
this interesting so I'm gonna start this

00:01:20,250 --> 00:01:25,799
talk with a brief anecdote as a lot of

00:01:22,560 --> 00:01:27,420
talks tend to so last year at the

00:01:25,799 --> 00:01:30,329
University of Tasmania I treated a

00:01:27,420 --> 00:01:31,920
course called computational science but

00:01:30,329 --> 00:01:34,350
this course was a bit different because

00:01:31,920 --> 00:01:36,240
was actually offered under two separate

00:01:34,350 --> 00:01:37,860
unit codes with two different titles the

00:01:36,240 --> 00:01:41,369
other being to scream mathematics with

00:01:37,860 --> 00:01:43,140
applications so this course covered a

00:01:41,369 --> 00:01:45,000
lot of farms sort of first-year mass

00:01:43,140 --> 00:01:47,280
concepts with set theory combinatorics

00:01:45,000 --> 00:01:49,200
number theory but it was also

00:01:47,280 --> 00:01:51,180
supplemented with practical implement

00:01:49,200 --> 00:01:54,270
practical implementations taught in

00:01:51,180 --> 00:01:56,939
Python and the content was exactly the

00:01:54,270 --> 00:01:59,520
same for both unit codes so this meant

00:01:56,939 --> 00:02:01,740
that students studying a programming

00:01:59,520 --> 00:02:03,420
degree were doing the same assessments

00:02:01,740 --> 00:02:05,549
as students studying a mathematics

00:02:03,420 --> 00:02:07,829
degree they had lectures for both maths

00:02:05,549 --> 00:02:10,110
and programming assignments for both

00:02:07,829 --> 00:02:12,190
maths and programming and tutorials for

00:02:10,110 --> 00:02:14,290
both maths and programming

00:02:12,190 --> 00:02:16,660
so I was taking the tutorials and the

00:02:14,290 --> 00:02:18,670
lab sessions for the programming content

00:02:16,660 --> 00:02:21,430
but I got to interact with students from

00:02:18,670 --> 00:02:22,900
both streams and I would get this

00:02:21,430 --> 00:02:26,200
question a lot from the programming

00:02:22,900 --> 00:02:29,110
students do I have to learn maths I want

00:02:26,200 --> 00:02:32,500
to be a programmer maths is hard why do

00:02:29,110 --> 00:02:33,790
I need to do this maybe not always quite

00:02:32,500 --> 00:02:36,100
negatively sometimes these questions

00:02:33,790 --> 00:02:38,890
were genuine coming from like I am

00:02:36,100 --> 00:02:40,980
scared is this something that I'm gonna

00:02:38,890 --> 00:02:43,900
need to be good at to be good at my job

00:02:40,980 --> 00:02:45,940
but then from the math students do I

00:02:43,900 --> 00:02:47,920
have to learn programming a lot of these

00:02:45,940 --> 00:02:49,420
mathematic students were taking a

00:02:47,920 --> 00:02:51,720
programming course for the first time

00:02:49,420 --> 00:02:54,790
and this was all completely new to them

00:02:51,720 --> 00:02:56,830
so they answer these questions I would

00:02:54,790 --> 00:03:01,120
you should say no you don't need to

00:02:56,830 --> 00:03:02,260
learn these things B should and this

00:03:01,120 --> 00:03:03,360
course is a pretty good way to get

00:03:02,260 --> 00:03:06,550
started with it

00:03:03,360 --> 00:03:08,350
so - is pretty great right we're all

00:03:06,550 --> 00:03:09,670
here at PyCon I don't think I'm gonna

00:03:08,350 --> 00:03:11,710
have to try too hard to convince you of

00:03:09,670 --> 00:03:13,900
that there's lots of really good reasons

00:03:11,710 --> 00:03:15,940
that Python E is a useful language it's

00:03:13,900 --> 00:03:17,290
very clean and expressive because it's

00:03:15,940 --> 00:03:19,870
interpreted it makes it highly

00:03:17,290 --> 00:03:22,209
interactive and it's batteries included

00:03:19,870 --> 00:03:25,450
we have a lot of useful tools through

00:03:22,209 --> 00:03:27,100
the standard library and in fact you

00:03:25,450 --> 00:03:29,080
might be familiar with something called

00:03:27,100 --> 00:03:30,640
the Zen of Python these are some design

00:03:29,080 --> 00:03:32,980
principles that Python is built around

00:03:30,640 --> 00:03:35,290
if you open up a Python interpreter and

00:03:32,980 --> 00:03:37,900
type import this we get a whole list of

00:03:35,290 --> 00:03:39,340
these and I've pulled out a few here we

00:03:37,900 --> 00:03:41,380
have things like beautiful is better

00:03:39,340 --> 00:03:44,590
than ugly sparse is better than tense

00:03:41,380 --> 00:03:46,810
but readability counts but the reason

00:03:44,590 --> 00:03:48,100
why I've selected these here is because

00:03:46,810 --> 00:03:50,830
I think that these are some good

00:03:48,100 --> 00:03:52,989
examples for mathematics as well if

00:03:50,830 --> 00:03:55,360
we're doing a proof we want it to be

00:03:52,989 --> 00:03:57,820
beautiful and simple rather than ugly

00:03:55,360 --> 00:03:58,989
and going on for pages and pages but

00:03:57,820 --> 00:04:00,130
then at the same time we don't want to

00:03:58,989 --> 00:04:03,100
make things too dense

00:04:00,130 --> 00:04:05,200
because readability counts also I

00:04:03,100 --> 00:04:07,270
actually studied an applied mathematics

00:04:05,200 --> 00:04:11,070
degree rather than pure maths so that

00:04:07,270 --> 00:04:11,070
last one practicality beats purity

00:04:11,140 --> 00:04:15,740
so this leads me to the conjecture that

00:04:13,370 --> 00:04:19,639
getting hands-on with Python is a great

00:04:15,740 --> 00:04:21,470
way to learn some maths but also getting

00:04:19,639 --> 00:04:24,560
hands-on with maps is a great way to

00:04:21,470 --> 00:04:26,060
learn some Python so for the rest of

00:04:24,560 --> 00:04:28,340
this talk I'm going to run through some

00:04:26,060 --> 00:04:30,200
examples that I think illustrate this

00:04:28,340 --> 00:04:32,120
concept how we can introduce some

00:04:30,200 --> 00:04:35,030
mathematical concepts alongside

00:04:32,120 --> 00:04:39,590
programming concepts and use this bridge

00:04:35,030 --> 00:04:44,050
to sort of extend both topics so first

00:04:39,590 --> 00:04:44,050
let's talk a little bit about set theory

00:04:44,890 --> 00:04:52,580
yes this talk will feature memes so what

00:04:50,240 --> 00:04:54,560
is a set I said is a collection of

00:04:52,580 --> 00:04:56,300
objects that belong to some group

00:04:54,560 --> 00:04:58,310
they're defined by certain property or

00:04:56,300 --> 00:04:59,930
attribute the elements of a set of

00:04:58,310 --> 00:05:03,890
unordered and we don't care about

00:04:59,930 --> 00:05:06,050
repetitions with innocence in maths we

00:05:03,890 --> 00:05:07,520
have a few ways of notating out a set we

00:05:06,050 --> 00:05:10,100
have something called list format where

00:05:07,520 --> 00:05:11,270
we simply list the values but more

00:05:10,100 --> 00:05:13,790
commonly we use something called

00:05:11,270 --> 00:05:16,340
defining property format where we have

00:05:13,790 --> 00:05:19,220
some function which defines our set and

00:05:16,340 --> 00:05:22,580
then some range of values that our set

00:05:19,220 --> 00:05:24,280
can take so that's all well and good how

00:05:22,580 --> 00:05:26,570
do we do this in Python

00:05:24,280 --> 00:05:29,120
well Python also gives us a few

00:05:26,570 --> 00:05:31,610
different ways of defining a set again

00:05:29,120 --> 00:05:32,930
we can simply list the values using

00:05:31,610 --> 00:05:35,660
what's called a set literal with the

00:05:32,930 --> 00:05:38,270
curly braces but we also have something

00:05:35,660 --> 00:05:40,280
called a set comprehension which just

00:05:38,270 --> 00:05:43,220
like defining property format allows us

00:05:40,280 --> 00:05:45,710
to create a set using some generating

00:05:43,220 --> 00:05:48,560
function and some range of values for

00:05:45,710 --> 00:05:50,360
that to take so this is a concept that

00:05:48,560 --> 00:05:52,100
students that maybe have a bit of

00:05:50,360 --> 00:05:54,110
programming experience before but a new

00:05:52,100 --> 00:05:55,340
to Python might take them a little bit

00:05:54,110 --> 00:05:56,690
to wrap their head around they're used

00:05:55,340 --> 00:05:59,000
to the sort of traditional looping

00:05:56,690 --> 00:06:00,500
structure but for mathematics students

00:05:59,000 --> 00:06:02,360
they're already used to this kind of

00:06:00,500 --> 00:06:04,190
notation and we actually found that a

00:06:02,360 --> 00:06:08,030
lot of them pick up this idea a lot

00:06:04,190 --> 00:06:09,530
quicker so that's quite neat it also in

00:06:08,030 --> 00:06:11,510
Python if you want to create an empty

00:06:09,530 --> 00:06:13,520
set unfortunately you can't just use the

00:06:11,510 --> 00:06:14,900
empty set literal like that because

00:06:13,520 --> 00:06:17,120
python is going to interpret that as a

00:06:14,900 --> 00:06:20,000
dictionary so you have to use this set

00:06:17,120 --> 00:06:21,620
constructor instead so now that we've

00:06:20,000 --> 00:06:24,110
got some sets what can we do with them

00:06:21,620 --> 00:06:26,689
well this brings us to set operation

00:06:24,110 --> 00:06:28,699
and insert operations are really just

00:06:26,689 --> 00:06:31,789
about allowing us to answer specific

00:06:28,699 --> 00:06:34,129
questions about groups of things so we

00:06:31,789 --> 00:06:36,319
could use set operations to see who has

00:06:34,129 --> 00:06:38,780
attended either plaque on a U or Linux

00:06:36,319 --> 00:06:40,550
comp or even things like how many people

00:06:38,780 --> 00:06:44,120
came to the keynote this morning but

00:06:40,550 --> 00:06:46,159
forgot to bring a coffee so I'm going to

00:06:44,120 --> 00:06:47,870
run through some of these set operations

00:06:46,159 --> 00:06:50,569
really quickly first of all we have set

00:06:47,870 --> 00:06:53,449
Union this is the elements that are in

00:06:50,569 --> 00:06:58,009
either set a or set B and we denote it

00:06:53,449 --> 00:06:59,569
with this little u symbol conversely we

00:06:58,009 --> 00:07:01,610
have set intersections so this is the

00:06:59,569 --> 00:07:03,500
set of elements that are in a and B and

00:07:01,610 --> 00:07:06,710
this is notated with the update upside

00:07:03,500 --> 00:07:08,840
down use symbol and set difference the

00:07:06,710 --> 00:07:14,000
set of elements that are in a but not in

00:07:08,840 --> 00:07:16,789
B so now that we've seen that how do we

00:07:14,000 --> 00:07:19,699
do this in Python well - gives us this

00:07:16,789 --> 00:07:22,460
nice clean readable function notation we

00:07:19,699 --> 00:07:24,620
have two sets here a and B and we simply

00:07:22,460 --> 00:07:26,659
call the corresponding function on one

00:07:24,620 --> 00:07:29,180
set and pass it the other one and you

00:07:26,659 --> 00:07:31,009
can see these results here so it's

00:07:29,180 --> 00:07:35,240
really obvious what we're actually doing

00:07:31,009 --> 00:07:36,710
here a union B a difference buddy but

00:07:35,240 --> 00:07:38,479
Python also gives us another way that we

00:07:36,710 --> 00:07:40,849
can do this using what's called the

00:07:38,479 --> 00:07:42,349
operator notation where we replace those

00:07:40,849 --> 00:07:44,479
functions with single character

00:07:42,349 --> 00:07:46,669
operators so for Union we have the

00:07:44,479 --> 00:07:48,349
vertical bar character intersection has

00:07:46,669 --> 00:07:51,589
an ampersand and difference is

00:07:48,349 --> 00:07:52,729
subtraction so at first glance you might

00:07:51,589 --> 00:07:54,979
think that this is actually less

00:07:52,729 --> 00:07:58,270
readable it's not as clear what's going

00:07:54,979 --> 00:08:01,490
on here but this is still useful to know

00:07:58,270 --> 00:08:03,199
because this operator syntax is actually

00:08:01,490 --> 00:08:05,270
closer to what we're going to be doing

00:08:03,199 --> 00:08:07,490
in mathematics in maths we're used to

00:08:05,270 --> 00:08:09,620
this idea of having two objects with an

00:08:07,490 --> 00:08:11,180
operator in the middle of them but

00:08:09,620 --> 00:08:13,339
what's more this actually suggests a

00:08:11,180 --> 00:08:15,620
really useful conceptual link to other

00:08:13,339 --> 00:08:17,750
topics like boolean algebra and logic

00:08:15,620 --> 00:08:20,089
you saw that for a union we use the

00:08:17,750 --> 00:08:22,370
vertical bar character well in boolean

00:08:20,089 --> 00:08:25,639
logic that's an or symbol and the union

00:08:22,370 --> 00:08:27,080
of two sets is the element in a or b so

00:08:25,639 --> 00:08:28,580
that we can start extending some of

00:08:27,080 --> 00:08:31,129
these ideas and linking them to other

00:08:28,580 --> 00:08:33,380
topics and then on top of that we can

00:08:31,129 --> 00:08:35,390
also start looking at some more advanced

00:08:33,380 --> 00:08:37,460
computer science topics talking about

00:08:35,390 --> 00:08:39,740
things like operator overloading how is

00:08:37,460 --> 00:08:41,330
actually made possible in in pythons

00:08:39,740 --> 00:08:45,140
case that's using the double underscore

00:08:41,330 --> 00:08:46,700
methods there's a bunch of other Python

00:08:45,140 --> 00:08:48,470
set operators as well that are built in

00:08:46,700 --> 00:08:50,270
things like subsets and supersets or

00:08:48,470 --> 00:08:55,670
symmetric difference which is the

00:08:50,270 --> 00:08:57,170
equivalent of a set X or another useful

00:08:55,670 --> 00:08:59,390
thing we might want to do with sets is

00:08:57,170 --> 00:09:02,420
dues membership testing we want to

00:08:59,390 --> 00:09:06,950
determine if an element belongs to a set

00:09:02,420 --> 00:09:09,320
or not so in Python we just use the in

00:09:06,950 --> 00:09:11,330
keyword we've got a nice readable way of

00:09:09,320 --> 00:09:15,620
doing this as well we can say is the

00:09:11,330 --> 00:09:17,510
element for in set a so this is really

00:09:15,620 --> 00:09:19,900
simple Python makes it nice and clean

00:09:17,510 --> 00:09:22,190
and readable but again there's

00:09:19,900 --> 00:09:24,740
opportunities for further discussion and

00:09:22,190 --> 00:09:27,050
exploring these topics how long does

00:09:24,740 --> 00:09:29,060
this take to run what if this set is

00:09:27,050 --> 00:09:30,980
really large well then we can start

00:09:29,060 --> 00:09:33,560
talking about things like linear search

00:09:30,980 --> 00:09:36,140
or binary search but of course these are

00:09:33,560 --> 00:09:38,900
a set so these are actually going to be

00:09:36,140 --> 00:09:41,810
backed by hash sets which were more

00:09:38,900 --> 00:09:43,430
complicated data structure but these

00:09:41,810 --> 00:09:44,930
have interesting properties because

00:09:43,430 --> 00:09:46,700
they're storing the elements not in the

00:09:44,930 --> 00:09:49,580
order that they're added but based on

00:09:46,700 --> 00:09:51,200
their hash values and now our Python

00:09:49,580 --> 00:09:53,390
sets have a lot of the same properties

00:09:51,200 --> 00:09:55,640
as the mathematical definition of a set

00:09:53,390 --> 00:09:57,770
the elements are now unordered and we

00:09:55,640 --> 00:09:59,510
can't have duplicates but now we can

00:09:57,770 --> 00:10:02,120
also start talking about how sets give

00:09:59,510 --> 00:10:04,550
us instant look up with oh one oh one

00:10:02,120 --> 00:10:08,570
runtime complexity and what does that

00:10:04,550 --> 00:10:10,430
actually mean what is Big O notation so

00:10:08,570 --> 00:10:14,170
that's a crash course in sets

00:10:10,430 --> 00:10:14,170
next up combinatorics

00:10:16,740 --> 00:10:23,370
this one's bothered me for ages

00:10:19,880 --> 00:10:25,260
permutation lock clearly all right

00:10:23,370 --> 00:10:27,180
what's combinatorics common torques is

00:10:25,260 --> 00:10:28,709
all about different ways elements of a

00:10:27,180 --> 00:10:31,709
collection can be combined

00:10:28,709 --> 00:10:33,959
hence combinatorics we have many

00:10:31,709 --> 00:10:35,580
intuitive real-world examples for

00:10:33,959 --> 00:10:37,380
combinatorics which makes this a lot

00:10:35,580 --> 00:10:39,720
easier to sort of talk about and explain

00:10:37,380 --> 00:10:41,490
but it's also highly relevant to a

00:10:39,720 --> 00:10:43,080
number of important computer science

00:10:41,490 --> 00:10:45,899
problems a lot of these have ongoing

00:10:43,080 --> 00:10:47,550
research and like lots of fields of

00:10:45,899 --> 00:10:49,640
mathematics it actually builds upon and

00:10:47,550 --> 00:10:51,720
links to lots of other disciplines

00:10:49,640 --> 00:10:54,720
so the bread-and-butter of combinatorics

00:10:51,720 --> 00:10:56,670
are permutations and combinations so

00:10:54,720 --> 00:10:59,250
given a collection of items how many

00:10:56,670 --> 00:11:01,740
ways can we select a subset of them and

00:10:59,250 --> 00:11:02,640
does the automatic if we care about how

00:11:01,740 --> 00:11:07,200
we're going to order them its

00:11:02,640 --> 00:11:09,420
permutations otherwise combinations so

00:11:07,200 --> 00:11:13,080
permutations often conceptualizes how

00:11:09,420 --> 00:11:14,580
many ways can we arrange in n items so

00:11:13,080 --> 00:11:17,070
this could be something like the books

00:11:14,580 --> 00:11:21,360
on our bookshelf or classes in our time

00:11:17,070 --> 00:11:22,980
table or the numbers in our pincode now

00:11:21,360 --> 00:11:25,050
there's a formula given for calculating

00:11:22,980 --> 00:11:28,440
the number of permutations we have this

00:11:25,050 --> 00:11:30,089
n factorial over N minus K factorial now

00:11:28,440 --> 00:11:32,730
I'm not going to sit here and talk about

00:11:30,089 --> 00:11:34,380
equations or talk but this is going to

00:11:32,730 --> 00:11:37,310
come back later so just keep that in

00:11:34,380 --> 00:11:39,120
mind now combinations otherwise

00:11:37,310 --> 00:11:41,279
conceptualizes how many ways can we

00:11:39,120 --> 00:11:42,630
choose n items so now we don't care

00:11:41,279 --> 00:11:44,850
about how we order them we're just

00:11:42,630 --> 00:11:46,680
selecting them so for example which

00:11:44,850 --> 00:11:48,890
books would we feature in a catalog or

00:11:46,680 --> 00:11:51,750
maybe picking out our lottery numbers

00:11:48,890 --> 00:11:54,810
the gambling is bad so they don't do

00:11:51,750 --> 00:11:56,490
that and again we have a similar similar

00:11:54,810 --> 00:11:58,620
formula for the number of combinations

00:11:56,490 --> 00:12:00,630
you'll see here that this actually has

00:11:58,620 --> 00:12:02,730
an extra K factorial term on the bottom

00:12:00,630 --> 00:12:05,070
here of the fraction and what this tells

00:12:02,730 --> 00:12:06,630
us is that the number of combinations is

00:12:05,070 --> 00:12:08,910
always going to be a lot less than the

00:12:06,630 --> 00:12:10,620
number of permutations because we don't

00:12:08,910 --> 00:12:15,360
have the option of rearranging them and

00:12:10,620 --> 00:12:17,610
to generate extra permutations so in

00:12:15,360 --> 00:12:19,860
Python we're going to be using the Ida

00:12:17,610 --> 00:12:22,110
tools module now either tools has a

00:12:19,860 --> 00:12:24,570
bunch of different tools for efficient

00:12:22,110 --> 00:12:26,279
iteration but in particular for our case

00:12:24,570 --> 00:12:27,839
it has built-in functions for

00:12:26,279 --> 00:12:29,820
calculating permutations and

00:12:27,839 --> 00:12:32,130
combinations

00:12:29,820 --> 00:12:33,450
so if we're teaching this to a student

00:12:32,130 --> 00:12:35,250
we might give them an example like this

00:12:33,450 --> 00:12:37,860
or they need to do is import

00:12:35,250 --> 00:12:39,480
permutations they create some collection

00:12:37,860 --> 00:12:41,970
of things they want to permutate in this

00:12:39,480 --> 00:12:45,120
case subjects maybe for a timetable and

00:12:41,970 --> 00:12:46,770
they run this permutations function and

00:12:45,120 --> 00:12:49,800
they go great that's worked let's print

00:12:46,770 --> 00:12:56,040
out the result and we get this Ida tools

00:12:49,800 --> 00:12:59,040
not permutation object so many questions

00:12:56,040 --> 00:13:02,340
what is this what is going on wide in my

00:12:59,040 --> 00:13:03,870
program work well it did but clearly

00:13:02,340 --> 00:13:06,810
something more complicated is going on

00:13:03,870 --> 00:13:10,290
here and I'm a tutor I have a class of

00:13:06,810 --> 00:13:12,570
twenty kids I kind of have to tell them

00:13:10,290 --> 00:13:14,340
well for the moment we'll come back to

00:13:12,570 --> 00:13:16,440
this later but just convert to a list

00:13:14,340 --> 00:13:19,050
and then you can print it out and we'll

00:13:16,440 --> 00:13:20,300
see all the values this is going to bite

00:13:19,050 --> 00:13:23,250
me later

00:13:20,300 --> 00:13:25,260
and similarly for combinations just

00:13:23,250 --> 00:13:27,480
instead of importing permutations we

00:13:25,260 --> 00:13:28,860
import combinations so you can see here

00:13:27,480 --> 00:13:31,770
we have a different collection of fruits

00:13:28,860 --> 00:13:34,170
how many what two different fruits could

00:13:31,770 --> 00:13:35,370
I take maybe from morning tea before so

00:13:34,170 --> 00:13:37,410
you can see we have an apple and a

00:13:35,370 --> 00:13:40,800
banana but not a banana in an apple

00:13:37,410 --> 00:13:42,510
because they're the same combination so

00:13:40,800 --> 00:13:44,370
let's run through a practical example of

00:13:42,510 --> 00:13:46,680
a question that a student might get on

00:13:44,370 --> 00:13:48,990
an assignment how many eight character

00:13:46,680 --> 00:13:51,180
passwords are possible using only the

00:13:48,990 --> 00:13:54,210
lowercase alphabet without repeating a

00:13:51,180 --> 00:13:56,730
character all right so we need to think

00:13:54,210 --> 00:13:58,530
is this permutations or combinations the

00:13:56,730 --> 00:14:01,500
order matters for a password so it must

00:13:58,530 --> 00:14:04,050
be permutations so the students seen

00:14:01,500 --> 00:14:05,730
some examples they might start out with

00:14:04,050 --> 00:14:07,620
some code we give them the lowercase

00:14:05,730 --> 00:14:10,650
alphabet they get the permutations

00:14:07,620 --> 00:14:12,990
function lowercase letters how many ways

00:14:10,650 --> 00:14:15,120
can we pick eight of them and then we

00:14:12,990 --> 00:14:17,460
need to see how many so we use the Len

00:14:15,120 --> 00:14:20,900
function and we get another error object

00:14:17,460 --> 00:14:25,620
of type Ida tools permutation has no Len

00:14:20,900 --> 00:14:26,910
why why won't it work well some of you

00:14:25,620 --> 00:14:28,950
in the room probably know exactly why

00:14:26,910 --> 00:14:31,080
it's not going to work but the student

00:14:28,950 --> 00:14:33,300
didn't but the student who did pay

00:14:31,080 --> 00:14:36,720
attention in class remember that I told

00:14:33,300 --> 00:14:39,990
them to just convert it to a list

00:14:36,720 --> 00:14:41,730
now this is actually like this code is

00:14:39,990 --> 00:14:45,870
running so I have to comment this out

00:14:41,730 --> 00:14:47,900
otherwise my talk would end here nothing

00:14:45,870 --> 00:14:51,630
that sadness awaits

00:14:47,900 --> 00:14:53,160
so why didn't it work well remember this

00:14:51,630 --> 00:14:55,260
is our formula for calculating the

00:14:53,160 --> 00:14:58,050
number of permutations in factorial over

00:14:55,260 --> 00:15:01,080
n minus K factorial so let's substitute

00:14:58,050 --> 00:15:03,660
in our values for N and K we have 26

00:15:01,080 --> 00:15:06,060
letters selecting 8 of them let's

00:15:03,660 --> 00:15:08,460
evaluate some of these permutations you

00:15:06,060 --> 00:15:10,890
see we have six point three times ten to

00:15:08,460 --> 00:15:13,770
the ten that's sixty three billion

00:15:10,890 --> 00:15:18,150
possible passwords quite a lot to deal

00:15:13,770 --> 00:15:20,790
with so what do we learn from this will

00:15:18,150 --> 00:15:23,430
clearly factorials get really big really

00:15:20,790 --> 00:15:25,260
quickly and again now we can start

00:15:23,430 --> 00:15:27,540
talking about runtime complexity and

00:15:25,260 --> 00:15:30,900
also in this case memory usage and why

00:15:27,540 --> 00:15:33,000
these two things matter now we had that

00:15:30,900 --> 00:15:35,100
Ida tools permutation object before well

00:15:33,000 --> 00:15:37,400
that was a generator and generators are

00:15:35,100 --> 00:15:39,720
a really cool interesting concept and

00:15:37,400 --> 00:15:41,370
you know we can start talking about

00:15:39,720 --> 00:15:42,990
these and the problems that they solve

00:15:41,370 --> 00:15:45,390
and how we can use these tools to get

00:15:42,990 --> 00:15:47,640
around things but we don't actually

00:15:45,390 --> 00:15:49,470
always need to rely on generators to

00:15:47,640 --> 00:15:51,330
solve these sorts of problems sometimes

00:15:49,470 --> 00:15:53,190
we should just go back to the basics so

00:15:51,330 --> 00:15:56,250
let's take another look at that question

00:15:53,190 --> 00:15:58,890
how many a character passwords are

00:15:56,250 --> 00:16:00,720
possible it didn't ask us to generate

00:15:58,890 --> 00:16:03,090
those passwords and are definitely don't

00:16:00,720 --> 00:16:05,520
ask us to store them in memory okay once

00:16:03,090 --> 00:16:07,050
you give students this tool of being

00:16:05,520 --> 00:16:09,360
able to generate generate these

00:16:07,050 --> 00:16:11,730
permutations and show them how they're

00:16:09,360 --> 00:16:13,140
going to want to do that but you don't

00:16:11,730 --> 00:16:15,390
actually need to do that for every

00:16:13,140 --> 00:16:18,060
question sometimes it's just a matter of

00:16:15,390 --> 00:16:20,760
doing the maths now of course

00:16:18,060 --> 00:16:22,650
calculating 26 factorial or whatever by

00:16:20,760 --> 00:16:24,480
hand is a bit tedious maybe you don't

00:16:22,650 --> 00:16:26,270
have a scientific calculator on you so

00:16:24,480 --> 00:16:28,560
we can just use Python again

00:16:26,270 --> 00:16:30,750
unfortunately the path Python doesn't

00:16:28,560 --> 00:16:32,910
have a built-in factorial function but

00:16:30,750 --> 00:16:35,490
we can import one from side pi put in

00:16:32,910 --> 00:16:37,589
our values for N and K and we see our 63

00:16:35,490 --> 00:16:39,930
billion passwords we're a little bit of

00:16:37,589 --> 00:16:43,770
floating point error but you know don't

00:16:39,930 --> 00:16:47,700
worry about that okay next up linear

00:16:43,770 --> 00:16:49,769
algebra so I contemplated whether or not

00:16:47,700 --> 00:16:51,209
leaving this section in

00:16:49,769 --> 00:16:53,100
because it's actually really hard to

00:16:51,209 --> 00:16:55,499
talk about linear algebra in a few

00:16:53,100 --> 00:16:57,209
minutes in a talk but the reason I left

00:16:55,499 --> 00:16:58,680
it in is because I think it's a really

00:16:57,209 --> 00:17:02,999
good example of how we can start

00:16:58,680 --> 00:17:06,569
thinking about algorithms so linear

00:17:02,999 --> 00:17:08,520
algebra matrices what is a matrix matrix

00:17:06,569 --> 00:17:10,709
is a two-dimensional array of elements

00:17:08,520 --> 00:17:13,980
here the positioning within a matrix

00:17:10,709 --> 00:17:16,409
does matter and matrices are actually a

00:17:13,980 --> 00:17:18,240
different type of mathematical object so

00:17:16,409 --> 00:17:19,679
you have standard operations defined but

00:17:18,240 --> 00:17:22,650
they might work a little bit different

00:17:19,679 --> 00:17:24,089
to what you're expecting now if we're

00:17:22,650 --> 00:17:25,770
going to do anything with matrices in

00:17:24,089 --> 00:17:27,870
Python chances are we're going to be

00:17:25,770 --> 00:17:29,820
using numpy because it's a really cool

00:17:27,870 --> 00:17:33,299
library for scientific computing

00:17:29,820 --> 00:17:35,820
it has amongst a bunch of other tools a

00:17:33,299 --> 00:17:38,159
really high-performance n dimensional

00:17:35,820 --> 00:17:40,950
array object that we can use for doing

00:17:38,159 --> 00:17:42,870
matrix operations so let's start playing

00:17:40,950 --> 00:17:44,909
around with numpy if we want to

00:17:42,870 --> 00:17:47,190
construct some matrices we just import

00:17:44,909 --> 00:17:49,380
the matrix constructor we pass it a list

00:17:47,190 --> 00:17:53,280
of lists and we get these two matrix

00:17:49,380 --> 00:17:55,350
objects out let's do some addition and

00:17:53,280 --> 00:17:57,570
subtraction on them so for addition and

00:17:55,350 --> 00:17:59,700
subtraction of two matrices you simply

00:17:57,570 --> 00:18:01,890
add up the elements in the corresponding

00:17:59,700 --> 00:18:03,840
positions so this means the two major

00:18:01,890 --> 00:18:06,570
disease need to have the same size you

00:18:03,840 --> 00:18:08,880
can see for addition we have in matrix a

00:18:06,570 --> 00:18:11,280
in this position too and in matrix B

00:18:08,880 --> 00:18:13,260
this position three and our result is

00:18:11,280 --> 00:18:16,399
five but if we were subtract them a

00:18:13,260 --> 00:18:19,169
result is minus money all good so far

00:18:16,399 --> 00:18:20,450
what about matrix multiplication well

00:18:19,169 --> 00:18:23,730
clearly it wasn't going to last

00:18:20,450 --> 00:18:26,130
something different is happening here to

00:18:23,730 --> 00:18:28,649
multiply by three definitely isn't nine

00:18:26,130 --> 00:18:30,419
last time I checked but also you'll see

00:18:28,649 --> 00:18:33,030
that the results for this is actually

00:18:30,419 --> 00:18:35,490
different if we flip the order because

00:18:33,030 --> 00:18:37,830
matrix multiplication is actually

00:18:35,490 --> 00:18:41,039
defined differently to addition and

00:18:37,830 --> 00:18:42,750
subtraction so this is where I try and

00:18:41,039 --> 00:18:45,720
teach you matrix multiplication in 30

00:18:42,750 --> 00:18:47,940
seconds no that's not going to happen

00:18:45,720 --> 00:18:49,350
okay so this is how we might teach it to

00:18:47,940 --> 00:18:51,120
a mathematics student we've got some

00:18:49,350 --> 00:18:53,070
nice formula for how to define matrix

00:18:51,120 --> 00:18:55,409
multiplication but if you're a

00:18:53,070 --> 00:18:58,770
first-year computing student who doesn't

00:18:55,409 --> 00:19:00,570
really like maths this is scary right

00:18:58,770 --> 00:19:02,869
what's this thing this is like a

00:19:00,570 --> 00:19:05,369
somewhat haven't

00:19:02,869 --> 00:19:07,499
how about an algorithm all right we like

00:19:05,369 --> 00:19:09,440
algorithms algorithms are fun they tell

00:19:07,499 --> 00:19:11,549
us what we need to do there are recipe

00:19:09,440 --> 00:19:13,289
turns out actually writing matrix

00:19:11,549 --> 00:19:14,929
multiplication in an algorithm is also

00:19:13,289 --> 00:19:17,700
harder than I thought it was going to be

00:19:14,929 --> 00:19:20,129
but this is my attempt at it so if we're

00:19:17,700 --> 00:19:22,559
multiplying two matrices together C

00:19:20,129 --> 00:19:24,690
equals a times B we iterate over the

00:19:22,559 --> 00:19:27,210
rows and columns of C and what we

00:19:24,690 --> 00:19:29,070
actually do is we get the corresponding

00:19:27,210 --> 00:19:31,110
row from one matrix and the

00:19:29,070 --> 00:19:33,600
corresponding column from another matrix

00:19:31,110 --> 00:19:36,570
and we multiply each element pairwise

00:19:33,600 --> 00:19:38,190
and sum them all up like this so for

00:19:36,570 --> 00:19:40,350
this position we using this row in this

00:19:38,190 --> 00:19:43,019
column and for this position we're using

00:19:40,350 --> 00:19:44,700
this row and this column all right

00:19:43,019 --> 00:19:47,190
that's my thirty second explanation of

00:19:44,700 --> 00:19:50,369
matrix multiplication but we've got this

00:19:47,190 --> 00:19:53,759
algorithm so now let's do it in Python

00:19:50,369 --> 00:19:56,309
and you can see that the code for doing

00:19:53,759 --> 00:19:58,470
this in Python is pretty much just that

00:19:56,309 --> 00:20:02,600
algorithm that we had before hint

00:19:58,470 --> 00:20:05,580
I wrote the Python first and then yeah

00:20:02,600 --> 00:20:07,440
okay so the only extra thing we need to

00:20:05,580 --> 00:20:09,210
do is sort of calculate what our values

00:20:07,440 --> 00:20:10,860
for the rows and columns are and sort of

00:20:09,210 --> 00:20:13,019
initialize our matrix with a bunch of

00:20:10,860 --> 00:20:14,639
zeros to start with and then we can sum

00:20:13,019 --> 00:20:15,899
them up there's a bunch of different

00:20:14,639 --> 00:20:18,509
ways to do this there's better ways to

00:20:15,899 --> 00:20:20,519
do this but this is one way and now we

00:20:18,509 --> 00:20:22,139
can do matrix multiplication with just

00:20:20,519 --> 00:20:24,509
two lists of Lists we don't actually

00:20:22,139 --> 00:20:26,129
need the numpy matrix constructor and we

00:20:24,509 --> 00:20:27,929
can see that we get the same results

00:20:26,129 --> 00:20:32,789
that we had before admittedly they're

00:20:27,929 --> 00:20:34,830
not formatted as nicely so why why Liam

00:20:32,789 --> 00:20:36,539
you just told us you can do this with

00:20:34,830 --> 00:20:39,330
numpy numpy is going to do a better job

00:20:36,539 --> 00:20:41,100
why not just use numpy well this gives

00:20:39,330 --> 00:20:44,009
us a better understanding of how matrix

00:20:41,100 --> 00:20:45,779
multiplication actually works because

00:20:44,009 --> 00:20:47,700
remember the students that are studying

00:20:45,779 --> 00:20:51,690
this also are going to have to do this

00:20:47,700 --> 00:20:53,220
on written math assignments okay and if

00:20:51,690 --> 00:20:55,679
you're a programming student who's new

00:20:53,220 --> 00:20:58,110
to this getting any sort of practice of

00:20:55,679 --> 00:21:00,210
sort of conceptualizing this idea and

00:20:58,110 --> 00:21:02,309
the steps that you need to do is really

00:21:00,210 --> 00:21:03,659
useful and this gives us practice in

00:21:02,309 --> 00:21:05,340
doing that and we're breaking down a

00:21:03,659 --> 00:21:08,100
process and actually implementing an

00:21:05,340 --> 00:21:09,869
iterative algorithm and again this also

00:21:08,100 --> 00:21:11,549
gives us a sense of why matrix

00:21:09,869 --> 00:21:13,830
multiplication is a really

00:21:11,549 --> 00:21:15,720
computationally expensive task even

00:21:13,830 --> 00:21:16,260
though it's so important you saw we had

00:21:15,720 --> 00:21:18,630
those three

00:21:16,260 --> 00:21:20,310
nested for-loops before so we have a

00:21:18,630 --> 00:21:22,500
classic example of a nolan cubed

00:21:20,310 --> 00:21:24,420
algorithm so what does that mean and

00:21:22,500 --> 00:21:25,350
there are there ways that we could maybe

00:21:24,420 --> 00:21:29,850
do it better

00:21:25,350 --> 00:21:31,260
turns out kinda but not really and we

00:21:29,850 --> 00:21:33,750
can make a similar case for matrix

00:21:31,260 --> 00:21:36,330
determinant this is another calculation

00:21:33,750 --> 00:21:38,010
you can do on a matrix which sort of

00:21:36,330 --> 00:21:40,230
reduces down to a really simple

00:21:38,010 --> 00:21:44,460
recursive algorithm well moderately

00:21:40,230 --> 00:21:45,780
simple recursive algorithm so now that

00:21:44,460 --> 00:21:47,430
we've done this made from matrix

00:21:45,780 --> 00:21:50,580
multiplication let's take it further

00:21:47,430 --> 00:21:52,200
let's practice some opie so we can

00:21:50,580 --> 00:21:54,300
actually create our own matrix class

00:21:52,200 --> 00:21:56,850
like this and using the double

00:21:54,300 --> 00:21:59,400
underscore mul method for overloading

00:21:56,850 --> 00:22:01,890
matrix multiplication we can just insert

00:21:59,400 --> 00:22:03,540
our code from before we can also do the

00:22:01,890 --> 00:22:06,180
same for an ADD method and a subtract

00:22:03,540 --> 00:22:08,490
method etc and we can create our own

00:22:06,180 --> 00:22:10,320
matrix class and do some of those

00:22:08,490 --> 00:22:12,840
operations that we saw none by doing

00:22:10,320 --> 00:22:17,280
ourselves so now we've got an

00:22:12,840 --> 00:22:19,500
introduction in 200p alright my last set

00:22:17,280 --> 00:22:23,580
of examples are all about visualization

00:22:19,500 --> 00:22:25,710
and data so digital K did a talk

00:22:23,580 --> 00:22:27,390
yesterday in the education track and she

00:22:25,710 --> 00:22:29,550
had a bunch of great examples for this

00:22:27,390 --> 00:22:31,230
so I was like really impressed to see

00:22:29,550 --> 00:22:32,970
those as well

00:22:31,230 --> 00:22:35,040
so some of these might be a little bit

00:22:32,970 --> 00:22:37,530
familiar but I'm gonna go through them

00:22:35,040 --> 00:22:39,000
really quickly if you're interested in

00:22:37,530 --> 00:22:43,260
this stuff I'd really recommend watching

00:22:39,000 --> 00:22:44,820
her talk it was fantastic so first I

00:22:43,260 --> 00:22:47,970
just want to talk briefly about Jupiter

00:22:44,820 --> 00:22:50,010
or as it used to be known ipython so

00:22:47,970 --> 00:22:53,670
Jupiter is a web-based notebook which

00:22:50,010 --> 00:22:56,130
allows students to present to prepare

00:22:53,670 --> 00:22:59,070
documents which contain both live code

00:22:56,130 --> 00:23:01,620
snippets and rich text to annotate them

00:22:59,070 --> 00:23:03,330
so this is really useful if a student is

00:23:01,620 --> 00:23:05,490
preparing some sort of report or

00:23:03,330 --> 00:23:07,350
presentation and they need to include

00:23:05,490 --> 00:23:11,040
code in it and that code is actually

00:23:07,350 --> 00:23:12,510
runnable now what you might be surprised

00:23:11,040 --> 00:23:14,070
to learn as well as that these slides

00:23:12,510 --> 00:23:15,810
that I've prepared today were actually

00:23:14,070 --> 00:23:17,730
all written in a Jupiter notebook as

00:23:15,810 --> 00:23:20,250
well and then it's a little simple

00:23:17,730 --> 00:23:22,320
extension to convert them into slides so

00:23:20,250 --> 00:23:25,080
this can be a really useful tool in some

00:23:22,320 --> 00:23:28,380
of these sort of situations so my next

00:23:25,080 --> 00:23:30,179
few examples about how we can sort of do

00:23:28,380 --> 00:23:32,039
some visualization and plot

00:23:30,179 --> 00:23:36,029
with python or use the matplotlib

00:23:32,039 --> 00:23:38,580
library now in these cases the code

00:23:36,029 --> 00:23:40,980
itself is not particularly interesting

00:23:38,580 --> 00:23:42,240
or relevant to the talk so don't get too

00:23:40,980 --> 00:23:44,909
bogged down in what's happening there

00:23:42,240 --> 00:23:47,070
how this is useful is that a student or

00:23:44,909 --> 00:23:48,840
a tutor can prepare this sort of

00:23:47,070 --> 00:23:52,649
boilerplate code and provide it to

00:23:48,840 --> 00:23:53,879
students to allow them to experiment so

00:23:52,649 --> 00:23:56,369
I've got five minutes left so I'm going

00:23:53,879 --> 00:23:58,710
to rush through these we can plot

00:23:56,369 --> 00:24:01,799
functions really simply we just create

00:23:58,710 --> 00:24:04,590
our x-axis and a y-axis using MATLAB and

00:24:01,799 --> 00:24:09,419
numpy and we can simply show a nice

00:24:04,590 --> 00:24:10,860
beautiful sine wave there similarly we

00:24:09,419 --> 00:24:14,610
can do the same with charts and graphs

00:24:10,860 --> 00:24:16,950
we just get our x-axis and some Y points

00:24:14,610 --> 00:24:18,539
here and we can see a nice bar chart so

00:24:16,950 --> 00:24:20,490
maybe we've done some data collection in

00:24:18,539 --> 00:24:24,419
class and we want to plot that into a

00:24:20,490 --> 00:24:27,240
bar chart let's get a little bit more

00:24:24,419 --> 00:24:28,980
fancy let's do a linear regression so

00:24:27,240 --> 00:24:31,049
here we've got a bit more boilerplate

00:24:28,980 --> 00:24:33,029
here I've got a function to calculate a

00:24:31,049 --> 00:24:35,460
line of best fit now of course I'm not

00:24:33,029 --> 00:24:38,179
doing that myself I'm using the stats

00:24:35,460 --> 00:24:40,559
function the stats module from side play

00:24:38,179 --> 00:24:43,679
and then we can just do a linear

00:24:40,559 --> 00:24:46,080
regression plot like this so you can see

00:24:43,679 --> 00:24:48,419
here now I've got some X&Y data points

00:24:46,080 --> 00:24:51,539
and I just call that function and we get

00:24:48,419 --> 00:24:54,600
our nice blue data points with our line

00:24:51,539 --> 00:24:57,600
of best fit through the middle let's get

00:24:54,600 --> 00:25:00,119
even more fancy 3d surfaces these are

00:24:57,600 --> 00:25:03,210
really cool so you saw before with the

00:25:00,119 --> 00:25:05,879
function plot we had of function with

00:25:03,210 --> 00:25:07,320
one variable y equals x well if we add

00:25:05,879 --> 00:25:09,210
another dimension to that we have

00:25:07,320 --> 00:25:13,320
something like I said is a function of y

00:25:09,210 --> 00:25:16,019
and X now we take it into 3d so again a

00:25:13,320 --> 00:25:18,029
little bit of boilerplate here we have

00:25:16,019 --> 00:25:20,999
this apply function which is going to

00:25:18,029 --> 00:25:25,049
map a function onto that 3d space and

00:25:20,999 --> 00:25:26,519
then do our plotting here again not too

00:25:25,049 --> 00:25:30,149
important don't worry too much about

00:25:26,519 --> 00:25:33,690
this code I can show you later but what

00:25:30,149 --> 00:25:36,720
we can do is define some functions so I

00:25:33,690 --> 00:25:39,450
have one here called a saddle otherwise

00:25:36,720 --> 00:25:42,030
known as a hyperbolic paraboloid I think

00:25:39,450 --> 00:25:44,820
it just looks like a Pringle

00:25:42,030 --> 00:25:47,010
and we can plot that with some X&Y

00:25:44,820 --> 00:25:48,480
ranges here we can see I have another

00:25:47,010 --> 00:25:51,990
function here which is a little bit more

00:25:48,480 --> 00:25:54,540
complicated called a sinc function and I

00:25:51,990 --> 00:25:59,270
can just change this here run that

00:25:54,540 --> 00:26:00,570
obviously we get another 3d plot there

00:25:59,270 --> 00:26:07,410
all right

00:26:00,570 --> 00:26:10,020
so summing up pun intended look I said

00:26:07,410 --> 00:26:12,450
at the start I like bad jokes all right

00:26:10,020 --> 00:26:13,770
so I really think based on these

00:26:12,450 --> 00:26:16,170
examples we can see that learning

00:26:13,770 --> 00:26:17,700
programming alongside mathematics can be

00:26:16,170 --> 00:26:20,070
used to sort of help bridge these

00:26:17,700 --> 00:26:22,620
related concepts if we have students

00:26:20,070 --> 00:26:24,240
familiar with one stream or another they

00:26:22,620 --> 00:26:29,430
can sort of use that as an entry point

00:26:24,240 --> 00:26:30,990
in to start exploring the converse both

00:26:29,430 --> 00:26:33,120
of these fields contain a lot of

00:26:30,990 --> 00:26:35,820
opportunities for further extension and

00:26:33,120 --> 00:26:37,830
inquiry once we get started it's easy to

00:26:35,820 --> 00:26:39,420
use these tools to sort of start

00:26:37,830 --> 00:26:43,350
stepping through some more complicated

00:26:39,420 --> 00:26:45,450
ideas and clearly Python is a fantastic

00:26:43,350 --> 00:26:47,970
tool for introducing these concepts to

00:26:45,450 --> 00:26:49,710
new students as you've seen all these

00:26:47,970 --> 00:26:52,260
built-in libraries provide plenty of

00:26:49,710 --> 00:26:53,670
useful tools because as interpreted

00:26:52,260 --> 00:26:55,590
we're dealing with a lot of

00:26:53,670 --> 00:26:57,630
interactivity and this allows students

00:26:55,590 --> 00:26:59,640
to really experiment you saw I could

00:26:57,630 --> 00:27:02,400
easily change that example of a 3d

00:26:59,640 --> 00:27:04,620
surface plot before and of course

00:27:02,400 --> 00:27:06,210
pythons simple clean and readable syntax

00:27:04,620 --> 00:27:08,040
it's really going to lower some of those

00:27:06,210 --> 00:27:10,440
barriers to programming there's been

00:27:08,040 --> 00:27:13,440
lots of talks about this some already in

00:27:10,440 --> 00:27:15,660
the education track but where I find

00:27:13,440 --> 00:27:17,760
this is useful is that it allows

00:27:15,660 --> 00:27:19,680
students and tutors and teachers to

00:27:17,760 --> 00:27:21,510
focus more on the important concepts

00:27:19,680 --> 00:27:23,730
that they're trying to convey we're not

00:27:21,510 --> 00:27:26,010
getting too bogged down in syntax and

00:27:23,730 --> 00:27:27,750
other things like that and instead we

00:27:26,010 --> 00:27:30,780
can actually start talking about things

00:27:27,750 --> 00:27:33,240
like you know calculating permutations

00:27:30,780 --> 00:27:36,870
and runtime complexity or using hash

00:27:33,240 --> 00:27:39,420
sets things like that so thank you very

00:27:36,870 --> 00:27:41,250
much for listening to my talk the slides

00:27:39,420 --> 00:27:43,290
are available online through this tiny

00:27:41,250 --> 00:27:45,660
link they're on github you'll actually

00:27:43,290 --> 00:27:47,330
see that Jupiter notebook so you can

00:27:45,660 --> 00:27:50,810
also look at all the code snippets there

00:27:47,330 --> 00:27:53,370
do we have time for questions no okay so

00:27:50,810 --> 00:27:54,350
thank you very much if you're interested

00:27:53,370 --> 00:27:56,000
in this

00:27:54,350 --> 00:27:57,950
any questions I'll be milling around

00:27:56,000 --> 00:27:59,210
feel free to come up and talk to me I'd

00:27:57,950 --> 00:28:00,860
also love to hear if you have any

00:27:59,210 --> 00:28:03,080
comments about anything I've said

00:28:00,860 --> 00:28:05,570
because these are just my opinions as

00:28:03,080 --> 00:28:07,460
students teachers or other developers

00:28:05,570 --> 00:28:19,460
I'm curious to see what you have to say

00:28:07,460 --> 00:28:21,169
otherwise thank you alright so as he

00:28:19,460 --> 00:28:22,940
said we would ask that if you have

00:28:21,169 --> 00:28:24,830
questions for Liam you take it up to the

00:28:22,940 --> 00:28:27,070
hall as we have ten minutes until our

00:28:24,830 --> 00:28:27,070

YouTube URL: https://www.youtube.com/watch?v=YFts_TKJhus


