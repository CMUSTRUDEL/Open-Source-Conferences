Title: A Beginner's Guide to WebSockets
Publication date: 2018-08-25
Playlist: PyCon Australia 2018
Description: 
	Dion Misic

https://2018.pycon-au.org/talks/45211-a-beginners-guide-to-websockets/

A gentle introduction to the web-socket protocol, how it works, it's intended usage and a number of examples where it can be used with Python and it's popular web frameworks - topped off with a rapid demonstration of the speed and ease of which it can be implemented with Python.

Python, PyCon, PyConAU, australia, programming, sydney

This video is licensed under CC BY 3.0 AU - https://creativecommons.org/licenses/by/3.0/au/

PyCon Australia (“PyCon AU”) is the national conference for the Python Programming Community, bringing together professional, student and enthusiast developers with a love for developing with Python.

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 24 - 28 2018.

Python, PyCon, PyConAU
Captions: 
	00:00:00,860 --> 00:00:07,560
okay so Deon here today is going to give

00:00:05,160 --> 00:00:09,120
us a beginner's guide to websites he

00:00:07,560 --> 00:00:10,889
said he will introduce himself so I'll

00:00:09,120 --> 00:00:12,840
get off the stand so he could get going

00:00:10,889 --> 00:00:14,280
and depending on how he goes is whether

00:00:12,840 --> 00:00:24,720
how much question time we'll get at the

00:00:14,280 --> 00:00:27,330
end okay so hi everyone welcome to my

00:00:24,720 --> 00:00:28,680
talk and thank you for coming today as

00:00:27,330 --> 00:00:31,289
you were saying I'm gonna be talking

00:00:28,680 --> 00:00:32,759
about WebSockets and we're gonna be

00:00:31,289 --> 00:00:34,290
talking about it from sort of a

00:00:32,759 --> 00:00:36,690
beginners standpoint so someone who's

00:00:34,290 --> 00:00:38,550
never actually really used it more has

00:00:36,690 --> 00:00:40,230
sort of like heard of what WebSocket is

00:00:38,550 --> 00:00:42,120
but has never actually gone to the

00:00:40,230 --> 00:00:46,680
effort of actually using it in one of

00:00:42,120 --> 00:00:49,739
their projects so a bit about me I'm

00:00:46,680 --> 00:00:51,809
doing music that's my name I'm a

00:00:49,739 --> 00:00:55,440
full-time associate developer at Y state

00:00:51,809 --> 00:00:57,750
currently I study at UTSA doing the vit

00:00:55,440 --> 00:01:00,899
co-op scholarship so that's the Bachelor

00:00:57,750 --> 00:01:02,250
of information technology I spoke at

00:01:00,899 --> 00:01:05,129
PyCon last year some of you might have

00:01:02,250 --> 00:01:07,590
been at my talk and I did a bit of data

00:01:05,129 --> 00:01:09,659
science work at the ANU last year as

00:01:07,590 --> 00:01:10,770
well and so I'm 18 years old and I'm

00:01:09,659 --> 00:01:15,720
obviously from Canberra and have

00:01:10,770 --> 00:01:17,670
recently moved up here to study and to

00:01:15,720 --> 00:01:18,689
give you guys a bit of structure about

00:01:17,670 --> 00:01:21,210
what we're going to be going through

00:01:18,689 --> 00:01:23,759
today we're gonna sort of start off with

00:01:21,210 --> 00:01:24,840
a basic low-level understanding of some

00:01:23,759 --> 00:01:26,040
of the protocols which we're gonna be

00:01:24,840 --> 00:01:28,740
talking about today sort of to get an

00:01:26,040 --> 00:01:31,140
idea of where everything sits in the

00:01:28,740 --> 00:01:32,850
whole IT world we're gonna go over some

00:01:31,140 --> 00:01:35,009
of the use cases and the applications

00:01:32,850 --> 00:01:37,740
which you might find using WebSockets

00:01:35,009 --> 00:01:40,439
and I'm gonna go over some of the

00:01:37,740 --> 00:01:42,990
previous technologies which might be

00:01:40,439 --> 00:01:45,840
used in place of WebSockets since it's

00:01:42,990 --> 00:01:47,610
still quite relatively new and will go a

00:01:45,840 --> 00:01:49,140
bit about the browser support and the

00:01:47,610 --> 00:01:52,229
characteristics of WebSockets as a

00:01:49,140 --> 00:01:55,189
protocol and how fast it is in

00:01:52,229 --> 00:01:57,540
comparison to other implementations and

00:01:55,189 --> 00:01:59,189
of course what you'll hear for is the

00:01:57,540 --> 00:02:01,409
Python aspect of it so we're going to go

00:01:59,189 --> 00:02:03,750
over how python has a role to play with

00:02:01,409 --> 00:02:06,810
it and how easy it is to do things with

00:02:03,750 --> 00:02:07,740
WebSockets with Python and just a quick

00:02:06,810 --> 00:02:10,590
note at the end we're going to go

00:02:07,740 --> 00:02:13,040
quickly over how deploying a WebSockets

00:02:10,590 --> 00:02:15,349
works over the web

00:02:13,040 --> 00:02:17,209
so to get into it we're gonna start off

00:02:15,349 --> 00:02:18,680
with a pretty contrived example and so

00:02:17,209 --> 00:02:20,810
anyone who's done any sort of networking

00:02:18,680 --> 00:02:22,970
or taking any networking courses would

00:02:20,810 --> 00:02:24,290
have seen something similar to this you

00:02:22,970 --> 00:02:27,379
probably would have seen something

00:02:24,290 --> 00:02:29,569
called the OSI networking layers so this

00:02:27,379 --> 00:02:30,829
is the Internet Protocol suite and this

00:02:29,569 --> 00:02:33,290
is sort of just a good idea of where

00:02:30,829 --> 00:02:34,400
everything sits relative to each other

00:02:33,290 --> 00:02:38,780
so I'm gonna start from the bottom

00:02:34,400 --> 00:02:42,650
you'll see the transport layer so these

00:02:38,780 --> 00:02:44,450
are things which define the way that

00:02:42,650 --> 00:02:45,980
data packets are transferred over the

00:02:44,450 --> 00:02:49,879
web right so these are things such as

00:02:45,980 --> 00:02:52,750
TCP and UDP and so TCP guarantees that

00:02:49,879 --> 00:02:55,220
any packet that you send over the web

00:02:52,750 --> 00:02:56,870
will reach his destination in the same

00:02:55,220 --> 00:02:59,510
order which there was sent right and it

00:02:56,870 --> 00:03:01,849
does this by acknowledging the packet

00:02:59,510 --> 00:03:04,180
once it's reached its destination so say

00:03:01,849 --> 00:03:06,709
I want to send a packet to a web server

00:03:04,180 --> 00:03:08,989
TCP guarantees that all of my packets

00:03:06,709 --> 00:03:12,129
will get there and I want to mention

00:03:08,989 --> 00:03:14,420
that UDP the less important one to TCP

00:03:12,129 --> 00:03:15,950
is a bit more careless and it doesn't

00:03:14,420 --> 00:03:17,449
really care about this guarantee of

00:03:15,950 --> 00:03:20,359
order and it's generally used for things

00:03:17,449 --> 00:03:21,919
like streaming video data where we don't

00:03:20,359 --> 00:03:24,709
care if we lose some of the packets on

00:03:21,919 --> 00:03:29,900
the way and so TCP is sort of the

00:03:24,709 --> 00:03:30,769
underlying transport layer behind a lot

00:03:29,900 --> 00:03:32,389
of the things I'm gonna be talking about

00:03:30,769 --> 00:03:33,889
today and so then you move up to the

00:03:32,389 --> 00:03:37,209
next stage which is the internet layer

00:03:33,889 --> 00:03:41,090
so this is things like ipv4 and ipv6

00:03:37,209 --> 00:03:42,560
which define the addresses which packets

00:03:41,090 --> 00:03:44,120
are sent right so everyone has an IP

00:03:42,560 --> 00:03:48,500
address you've probably heard of this in

00:03:44,120 --> 00:03:51,769
any regards it's it's pretty much where

00:03:48,500 --> 00:03:53,419
data is sent on the web and so we then

00:03:51,769 --> 00:03:55,639
get to the application layer which is

00:03:53,419 --> 00:03:59,239
sort of the top-level layer and this is

00:03:55,639 --> 00:04:01,159
where HTTP WebSockets and the rest of

00:03:59,239 --> 00:04:02,900
them all sit this is the sort of stuff

00:04:01,159 --> 00:04:05,690
that you guys might interface with when

00:04:02,900 --> 00:04:07,340
actually developing things now again I

00:04:05,690 --> 00:04:11,000
want to admit that this is a very

00:04:07,340 --> 00:04:13,970
contrived example so take this layers in

00:04:11,000 --> 00:04:14,930
with a like a grain of salt I would

00:04:13,970 --> 00:04:17,030
suggest if you want to be further

00:04:14,930 --> 00:04:20,570
reading into where everything sits to

00:04:17,030 --> 00:04:22,159
either Google the OSI layer model or

00:04:20,570 --> 00:04:26,690
just looking into any networking courses

00:04:22,159 --> 00:04:28,550
that you can now I'm in a sort of basic

00:04:26,690 --> 00:04:30,620
just to gave one sort of up to speed and

00:04:28,550 --> 00:04:33,410
you probably all know what HTTP is but

00:04:30,620 --> 00:04:36,170
for those that don't it's pretty much

00:04:33,410 --> 00:04:39,080
this request model where a client sends

00:04:36,170 --> 00:04:41,870
a request to a server the server then

00:04:39,080 --> 00:04:43,850
processes that request and then responds

00:04:41,870 --> 00:04:47,270
with like anything so right we it could

00:04:43,850 --> 00:04:49,010
be a HTML page it could be anything and

00:04:47,270 --> 00:04:51,560
so generally you type in a URL the

00:04:49,010 --> 00:04:54,230
client is that browser that sends that

00:04:51,560 --> 00:04:56,330
request and the server does the

00:04:54,230 --> 00:04:58,370
processing so that could be anything and

00:04:56,330 --> 00:05:01,040
in our cases this is generally a web

00:04:58,370 --> 00:05:06,860
application like flask or Django and

00:05:01,040 --> 00:05:08,720
then it returns a response okay so I may

00:05:06,860 --> 00:05:10,130
be talking a bit about what HTTP is and

00:05:08,720 --> 00:05:12,230
a bit of the characteristics behind it

00:05:10,130 --> 00:05:14,860
so you can sort of understand where HTTP

00:05:12,230 --> 00:05:18,110
and WebSockets it relative to each other

00:05:14,860 --> 00:05:20,690
so HTTP stands for hypertext Transfer

00:05:18,110 --> 00:05:23,570
Protocol and it's a stateless protocol

00:05:20,690 --> 00:05:27,200
which means after the initial request is

00:05:23,570 --> 00:05:28,790
done that's it the the channel between

00:05:27,200 --> 00:05:30,950
the client and server is completely lost

00:05:28,790 --> 00:05:32,330
after this initial request right and so

00:05:30,950 --> 00:05:34,610
I like to think of it as flipping a coin

00:05:32,330 --> 00:05:37,490
you flip a coin once and you get your

00:05:34,610 --> 00:05:39,410
result heads or tails and if you flip it

00:05:37,490 --> 00:05:41,750
again that result doesn't have anything

00:05:39,410 --> 00:05:44,690
to do with the previous result right so

00:05:41,750 --> 00:05:47,990
the connection is completely lost after

00:05:44,690 --> 00:05:49,970
that initial request in the HTTP model

00:05:47,990 --> 00:05:52,370
clients who are requesting data have to

00:05:49,970 --> 00:05:55,490
specify an action so that's either a get

00:05:52,370 --> 00:05:56,870
post put or delete this just tells the

00:05:55,490 --> 00:05:59,300
server what they want to do so we get

00:05:56,870 --> 00:06:01,370
request is retrieving some data a post

00:05:59,300 --> 00:06:04,940
request is making something new on the

00:06:01,370 --> 00:06:06,680
server a put request is replacing

00:06:04,940 --> 00:06:07,970
something if it does exist

00:06:06,680 --> 00:06:11,030
we're like it a resource on the server

00:06:07,970 --> 00:06:13,820
or creating a new one and the delete one

00:06:11,030 --> 00:06:17,440
is deleting a resource on the server and

00:06:13,820 --> 00:06:19,430
these things these methods and

00:06:17,440 --> 00:06:21,740
characteristics are all put into a thing

00:06:19,430 --> 00:06:24,020
called a header which is sent over the

00:06:21,740 --> 00:06:26,419
web to tell the server what it wants it

00:06:24,020 --> 00:06:30,050
to do right and the server also responds

00:06:26,419 --> 00:06:34,310
with this header so I'm just going to

00:06:30,050 --> 00:06:39,500
quickly give you a quick example of a

00:06:34,310 --> 00:06:40,440
basic HTTP requests and I'm just going

00:06:39,500 --> 00:06:43,380
to show you how you could

00:06:40,440 --> 00:06:45,300
find these headers and look at what

00:06:43,380 --> 00:06:48,380
these things look like so if you open up

00:06:45,300 --> 00:06:51,450
any web page like my Olsen web page here

00:06:48,380 --> 00:06:54,600
if you open up the inspect tools and go

00:06:51,450 --> 00:06:55,530
into the network's tab and then you can

00:06:54,600 --> 00:06:58,590
have a look down here at all the

00:06:55,530 --> 00:07:00,630
requests you've made to the server and

00:06:58,590 --> 00:07:02,760
if you can click on that you can look in

00:07:00,630 --> 00:07:06,270
greater detail at what the request is

00:07:02,760 --> 00:07:08,880
actually doing so in a general sense you

00:07:06,270 --> 00:07:10,860
have all of the chrome that does this

00:07:08,880 --> 00:07:12,660
nicely and it sort of gets the data that

00:07:10,860 --> 00:07:14,130
you will probably want to look at at the

00:07:12,660 --> 00:07:17,280
top and then it gives you more detail

00:07:14,130 --> 00:07:19,440
beneath right and so you can view the

00:07:17,280 --> 00:07:22,410
URL which you might want a request so

00:07:19,440 --> 00:07:24,320
I've requested that URL and I specified

00:07:22,410 --> 00:07:27,420
that I wanted to get that webpage and

00:07:24,320 --> 00:07:28,980
then the server responded with a 200 ok

00:07:27,420 --> 00:07:31,440
response which means that my response

00:07:28,980 --> 00:07:33,450
was valid and it returned this data so

00:07:31,440 --> 00:07:34,650
you can also look in greater detail into

00:07:33,450 --> 00:07:36,870
the request and the response headers

00:07:34,650 --> 00:07:39,660
down here by this clicking view source

00:07:36,870 --> 00:07:41,340
and you can look at exactly what headers

00:07:39,660 --> 00:07:42,900
were sent up in the web now a lot of you

00:07:41,340 --> 00:07:44,430
who have done web work probably you have

00:07:42,900 --> 00:07:46,169
interface with this but I thought I

00:07:44,430 --> 00:07:48,150
might start off and show you exactly

00:07:46,169 --> 00:07:49,980
where you should be looking for this

00:07:48,150 --> 00:07:51,330
sort of data now there's a couple other

00:07:49,980 --> 00:07:53,400
tabs which might be useful when

00:07:51,330 --> 00:07:55,320
inspecting this sort of stuff like the

00:07:53,400 --> 00:07:58,080
response tab so you can see that the

00:07:55,320 --> 00:07:59,370
server responded with a HTML page and

00:07:58,080 --> 00:08:01,800
all my browser's done has loaded that

00:07:59,370 --> 00:08:04,950
page and then you have a timing page

00:08:01,800 --> 00:08:09,530
which also shows you how long it took to

00:08:04,950 --> 00:08:13,320
download all the data for this page cool

00:08:09,530 --> 00:08:15,660
so in 2005 we realized that that model

00:08:13,320 --> 00:08:17,060
wasn't really what we wanted we wanted

00:08:15,660 --> 00:08:21,060
the web to be able to do more than just

00:08:17,060 --> 00:08:23,220
respond with some data ok and so we

00:08:21,060 --> 00:08:25,680
invented this technology known as Ajax

00:08:23,220 --> 00:08:28,380
which stands for asynchronous JavaScript

00:08:25,680 --> 00:08:30,720
and XML ok and so what this allowed us

00:08:28,380 --> 00:08:33,450
to do is a synchronously send data to

00:08:30,720 --> 00:08:35,490
the server after the initial request so

00:08:33,450 --> 00:08:37,979
as you can see with the model the client

00:08:35,490 --> 00:08:40,050
sends the initial request for the HTML

00:08:37,979 --> 00:08:41,700
page it gets responded with that and

00:08:40,050 --> 00:08:46,350
then it can continue to make requests

00:08:41,700 --> 00:08:48,839
after that and that did a lot of cool

00:08:46,350 --> 00:08:51,330
things for us so we could do a whole

00:08:48,839 --> 00:08:52,020
range of new things with that and I'm

00:08:51,330 --> 00:08:53,769
going to show you another quick example

00:08:52,020 --> 00:08:56,949
just to sort of stick

00:08:53,769 --> 00:08:57,970
that explained an example type thing so

00:08:56,949 --> 00:09:01,449
you guys can get used to looking at

00:08:57,970 --> 00:09:03,309
headers in the inspect tab so this is

00:09:01,449 --> 00:09:05,709
just a basic page which where you click

00:09:03,309 --> 00:09:08,170
the button and it makes an ajax request

00:09:05,709 --> 00:09:11,139
to an api and the API responds with some

00:09:08,170 --> 00:09:13,269
data so if I click this you'll see I'll

00:09:11,139 --> 00:09:16,749
make a request I'll just sort of make

00:09:13,269 --> 00:09:18,279
the headers tab a little bit smaller and

00:09:16,749 --> 00:09:20,709
so what I've done here you just print it

00:09:18,279 --> 00:09:25,540
out what the request is so I did a get

00:09:20,709 --> 00:09:29,399
method to this URL and I went to that

00:09:25,540 --> 00:09:32,529
API okay and then that responded with a

00:09:29,399 --> 00:09:36,129
greeting just as arbitrary greeting

00:09:32,529 --> 00:09:37,509
which I created and this is great right

00:09:36,129 --> 00:09:39,999
so we could do these things now where we

00:09:37,509 --> 00:09:41,470
do the initial request and then we can

00:09:39,999 --> 00:09:43,989
get more data from the server so if we

00:09:41,470 --> 00:09:45,850
want to grab information we can just ask

00:09:43,989 --> 00:09:46,839
the server for it and it's a really cool

00:09:45,850 --> 00:09:49,720
thing we don't have to refresh the page

00:09:46,839 --> 00:09:51,369
and we can do a whole lot of things but

00:09:49,720 --> 00:09:55,149
what happens when you want to do

00:09:51,369 --> 00:09:58,480
something which is a bit more real-time

00:09:55,149 --> 00:10:01,179
okay what if I've got something like a

00:09:58,480 --> 00:10:02,889
feed or a Facebook feed or a chat

00:10:01,179 --> 00:10:05,079
application right where I want users to

00:10:02,889 --> 00:10:07,749
be able to instantly in real time be

00:10:05,079 --> 00:10:11,199
able to talk to each other okay

00:10:07,749 --> 00:10:14,019
imagine if say a Facebook wall or a chat

00:10:11,199 --> 00:10:17,199
required you to press get all posts to

00:10:14,019 --> 00:10:18,249
see the posts of your friends you you

00:10:17,199 --> 00:10:19,149
wouldn't want to be able to sit there

00:10:18,249 --> 00:10:22,559
the whole time

00:10:19,149 --> 00:10:26,100
pressing get all posts the whole day

00:10:22,559 --> 00:10:26,100
looking for new things

00:10:29,769 --> 00:10:35,470
I'm sorry but you get the point right

00:10:34,540 --> 00:10:38,019
you don't want to sit there the whole

00:10:35,470 --> 00:10:40,420
day pressing get all posts but if you

00:10:38,019 --> 00:10:42,550
did it I guess it would work and this

00:10:40,420 --> 00:10:44,259
this model could work for certain

00:10:42,550 --> 00:10:46,149
applications but for stuff that we want

00:10:44,259 --> 00:10:50,499
to be real-time it's not the ideal thing

00:10:46,149 --> 00:10:52,299
and so ideally what we want is a model

00:10:50,499 --> 00:10:54,369
where you can make a request and get a

00:10:52,299 --> 00:10:56,589
response for the initial page and then

00:10:54,369 --> 00:10:59,769
if the server happens to have some new

00:10:56,589 --> 00:11:01,480
data in its events it can send that data

00:10:59,769 --> 00:11:03,549
back down to me as you can see you sort

00:11:01,480 --> 00:11:05,489
of buy the model it shows when there's

00:11:03,549 --> 00:11:07,959
any new data it can send it down right

00:11:05,489 --> 00:11:09,879
so in the case of a chat application if

00:11:07,959 --> 00:11:12,519
I'm sending a message to a group chat

00:11:09,879 --> 00:11:14,139
with all my friends the server will get

00:11:12,519 --> 00:11:16,389
that message and then about okay I've

00:11:14,139 --> 00:11:17,679
got this message let me send it to all

00:11:16,389 --> 00:11:19,929
the people that want to know about that

00:11:17,679 --> 00:11:22,119
message and if they're connected to this

00:11:19,929 --> 00:11:26,769
the server can then send that message to

00:11:22,119 --> 00:11:28,629
everyone is connected so that's what

00:11:26,769 --> 00:11:31,149
WebSockets does right

00:11:28,629 --> 00:11:34,240
WebSockets is built to solve that

00:11:31,149 --> 00:11:36,459
inherit problem with HTTP and to develop

00:11:34,240 --> 00:11:39,369
that dual channel right so what

00:11:36,459 --> 00:11:42,040
WebSockets does is it defines this fully

00:11:39,369 --> 00:11:43,420
duplex bi-directional communication

00:11:42,040 --> 00:11:44,920
channel between the client and the

00:11:43,420 --> 00:11:47,110
server I know that's a whole lot of

00:11:44,920 --> 00:11:49,029
jargon but pretty much it means that the

00:11:47,110 --> 00:11:52,059
client and a server can talk in real

00:11:49,029 --> 00:11:56,619
time without having to continuously make

00:11:52,059 --> 00:11:58,449
requests so what it does is it if you

00:11:56,619 --> 00:12:00,850
want to do WebSockets over the web you

00:11:58,449 --> 00:12:02,619
send a header to the server saying okay

00:12:00,850 --> 00:12:06,579
I want to upgrade from HTTP to

00:12:02,619 --> 00:12:07,720
WebSockets and it uses that same TCP

00:12:06,579 --> 00:12:10,209
connection that it originally

00:12:07,720 --> 00:12:13,029
established loading the page and the

00:12:10,209 --> 00:12:16,269
server is like okay let's upgrade once

00:12:13,029 --> 00:12:17,919
this upgrade is done those two the

00:12:16,269 --> 00:12:19,209
client server can continuously send data

00:12:17,919 --> 00:12:22,540
back and forth with each other without

00:12:19,209 --> 00:12:24,220
the overhead which HTTP might bring with

00:12:22,540 --> 00:12:26,649
it and we never talked a bit a bit about

00:12:24,220 --> 00:12:31,269
the performance benefits you can have by

00:12:26,649 --> 00:12:32,739
removing headers from requests so

00:12:31,269 --> 00:12:34,209
essentially one of the great things

00:12:32,739 --> 00:12:35,769
about it is it's really easy to

00:12:34,209 --> 00:12:37,629
implement and we'll get into some of the

00:12:35,769 --> 00:12:39,279
details with that soon and it's

00:12:37,629 --> 00:12:40,660
standardized and it's been standardized

00:12:39,279 --> 00:12:43,139
for quite a while so I don't understand

00:12:40,660 --> 00:12:45,869
why people aren't really implementing

00:12:43,139 --> 00:12:47,220
more than they are and as the last point

00:12:45,869 --> 00:12:49,139
says there the headers are only sent

00:12:47,220 --> 00:12:50,879
once so in that initial handshake where

00:12:49,139 --> 00:12:53,069
the server and the client agree to

00:12:50,879 --> 00:12:56,189
upgrade to WebSockets that's the only

00:12:53,069 --> 00:12:58,350
headers that are sent the rest is just

00:12:56,189 --> 00:13:01,350
sending data back and forth and so you

00:12:58,350 --> 00:13:05,429
don't have that overhead when sending

00:13:01,350 --> 00:13:08,759
data so I'm going to sort of go over a

00:13:05,429 --> 00:13:12,989
brief example again with that same feed

00:13:08,759 --> 00:13:16,769
idea feel free to go on this if you want

00:13:12,989 --> 00:13:18,989
and we can try crash my server and so

00:13:16,769 --> 00:13:21,749
I'm gonna sort of show you how you can

00:13:18,989 --> 00:13:23,339
inspect them and sort of see what a

00:13:21,749 --> 00:13:24,929
WebSocket looks like so if you want you

00:13:23,339 --> 00:13:27,059
can again feel free to go on there and

00:13:24,929 --> 00:13:29,129
post a message so I could be like okay

00:13:27,059 --> 00:13:33,089
my name is Dion and I could be like hey

00:13:29,129 --> 00:13:35,249
I can make that post okay and so what's

00:13:33,089 --> 00:13:37,619
happening here is I've made the initial

00:13:35,249 --> 00:13:41,069
request to the server we've upgraded our

00:13:37,619 --> 00:13:42,419
connection I've sent my message and the

00:13:41,069 --> 00:13:44,790
service saved that message to some

00:13:42,419 --> 00:13:45,839
database on the side and then it sent

00:13:44,790 --> 00:13:49,639
that message out to anyone that's

00:13:45,839 --> 00:13:51,600
connected okay and if we look at the

00:13:49,639 --> 00:13:55,889
WebSocket headers which you can find by

00:13:51,600 --> 00:14:00,829
going in this little tab you can see

00:13:55,889 --> 00:14:07,379
this initial header so I'll just quickly

00:14:00,829 --> 00:14:09,629
drag that open it's not okay so you see

00:14:07,379 --> 00:14:11,249
the initial headers which happened with

00:14:09,629 --> 00:14:14,189
that upgrade connection so you can see

00:14:11,249 --> 00:14:15,660
the status code from the server was okay

00:14:14,189 --> 00:14:18,319
we're going to switch protocols to

00:14:15,660 --> 00:14:18,319
WebSockets

00:14:25,450 --> 00:14:35,260
and so if you want to look further into

00:14:29,340 --> 00:14:39,250
please be reasonable you don't see your

00:14:35,260 --> 00:14:41,380
drop tables okay so if you want to look

00:14:39,250 --> 00:14:42,520
more into what's actually going on

00:14:41,380 --> 00:14:45,190
behind the scenes you can go into this

00:14:42,520 --> 00:14:47,700
little tab called the frames tab and you

00:14:45,190 --> 00:14:50,710
can see everything which is happening

00:14:47,700 --> 00:14:52,420
behind the scenes so you can see in my

00:14:50,710 --> 00:14:54,610
case all that's happening for me is I've

00:14:52,420 --> 00:14:57,040
been I've upgraded my connection to

00:14:54,610 --> 00:14:58,570
WebSockets and now all I'm doing is

00:14:57,040 --> 00:15:00,160
receiving that data from the server so

00:14:58,570 --> 00:15:02,260
when you guys are making those posts is

00:15:00,160 --> 00:15:03,760
going up into the server saving them to

00:15:02,260 --> 00:15:06,280
the database and then sending them back

00:15:03,760 --> 00:15:09,660
to me and you can see that by looking at

00:15:06,280 --> 00:15:09,660
these here right so

00:15:12,440 --> 00:15:17,220
you can see exactly what the event was

00:15:14,970 --> 00:15:20,040
so I made an event on my client saying

00:15:17,220 --> 00:15:22,050
add to wall which does what it says and

00:15:20,040 --> 00:15:24,149
it just adds that text to the wall and

00:15:22,050 --> 00:15:26,190
you can see the the data that came with

00:15:24,149 --> 00:15:28,589
it right so you have the username of the

00:15:26,190 --> 00:15:29,610
person that sent it and the message that

00:15:28,589 --> 00:15:31,620
came with it as well

00:15:29,610 --> 00:15:33,589
and this probably isn't the best

00:15:31,620 --> 00:15:41,630
implementation of it but it sort of just

00:15:33,589 --> 00:15:46,529
defines it defines that that connection

00:15:41,630 --> 00:15:49,410
okay so we'll go away I also do

00:15:46,529 --> 00:15:51,990
apologize in advance for in creating all

00:15:49,410 --> 00:15:53,640
the curly braces in my slides I didn't

00:15:51,990 --> 00:15:55,920
realize until afterwards I just did it

00:15:53,640 --> 00:15:57,750
sort of as an aesthetic thing and I was

00:15:55,920 --> 00:15:58,950
like well I'm actually presenting this

00:15:57,750 --> 00:16:05,670
to a bunch of Python people they

00:15:58,950 --> 00:16:07,860
probably don't know that anyway so a lot

00:16:05,670 --> 00:16:10,320
of people criticize WebSockets for its

00:16:07,860 --> 00:16:11,880
browser support and we can now go ahead

00:16:10,320 --> 00:16:13,560
and say that that is sort of a myth

00:16:11,880 --> 00:16:16,620
because WebSockets is widely supported

00:16:13,560 --> 00:16:19,500
now in all of the latest versions of the

00:16:16,620 --> 00:16:22,380
browsers including ie which is good yes

00:16:19,500 --> 00:16:24,660
if you still support that and if you

00:16:22,380 --> 00:16:26,130
want to defer the reading and find these

00:16:24,660 --> 00:16:28,230
sorts of things for other things I'd

00:16:26,130 --> 00:16:30,930
urge you to go to this website can I use

00:16:28,230 --> 00:16:33,630
com most web developers who've done any

00:16:30,930 --> 00:16:34,560
front-end stuff with probably interface

00:16:33,630 --> 00:16:41,310
with that but it's just a nice little

00:16:34,560 --> 00:16:42,900
way of seeing if you can use it okay so

00:16:41,310 --> 00:16:44,459
I mentioned earlier that we're gonna be

00:16:42,900 --> 00:16:47,310
talking about other technologies used to

00:16:44,459 --> 00:16:49,920
achieve quite similar real time goals

00:16:47,310 --> 00:16:51,750
- what WebSockets does and you may have

00:16:49,920 --> 00:16:53,910
heard of these technologies before and

00:16:51,750 --> 00:16:56,040
I'm not trying to be credit them because

00:16:53,910 --> 00:16:58,200
they still are used today but I'm saying

00:16:56,040 --> 00:17:01,770
WebSockets can do all this but it's an

00:16:58,200 --> 00:17:03,510
all standard way okay so there are these

00:17:01,770 --> 00:17:03,930
two things called polling and long

00:17:03,510 --> 00:17:06,360
polling

00:17:03,930 --> 00:17:08,640
okay so polling is sending an ajax

00:17:06,360 --> 00:17:11,250
request any X number of seconds so I

00:17:08,640 --> 00:17:13,079
could tell my my client every five

00:17:11,250 --> 00:17:16,199
seconds make a request to the server for

00:17:13,079 --> 00:17:18,569
some new data now my work actually does

00:17:16,199 --> 00:17:20,910
something like this right and it's not

00:17:18,569 --> 00:17:23,189
probably the best way to do things but

00:17:20,910 --> 00:17:25,299
it does work so you will get some sense

00:17:23,189 --> 00:17:28,539
of real-time I guess because you will be

00:17:25,299 --> 00:17:29,860
data every X amount of seconds and it's

00:17:28,539 --> 00:17:31,179
sort of a workaround to not having to

00:17:29,860 --> 00:17:31,899
use that WebSockets and it should be

00:17:31,179 --> 00:17:34,389
used

00:17:31,899 --> 00:17:37,840
sometimes when you only want to be

00:17:34,389 --> 00:17:39,489
receiving data on intervals we also came

00:17:37,840 --> 00:17:41,619
up with another way of doing this called

00:17:39,489 --> 00:17:43,389
long polling now this is still I think

00:17:41,619 --> 00:17:45,159
widely used today from what I can see

00:17:43,389 --> 00:17:46,210
and if you look at a lot of applications

00:17:45,159 --> 00:17:48,309
where you'd expect

00:17:46,210 --> 00:17:50,649
WebSockets to be used like for example a

00:17:48,309 --> 00:17:52,330
chat you'll often see that you might be

00:17:50,649 --> 00:17:53,799
able to inspect any WebSocket headers

00:17:52,330 --> 00:17:56,919
and that's because people still do use

00:17:53,799 --> 00:17:58,929
this long polling technique you might

00:17:56,919 --> 00:18:01,210
have also heard this referred to as

00:17:58,929 --> 00:18:02,830
comet programming but essentially what

00:18:01,210 --> 00:18:04,779
it does is it makes a request to the

00:18:02,830 --> 00:18:06,609
server and it tells us server not to

00:18:04,779 --> 00:18:09,460
close that request until it has any new

00:18:06,609 --> 00:18:11,409
data so it keeps that connection open

00:18:09,460 --> 00:18:14,049
until the server finds something to give

00:18:11,409 --> 00:18:15,279
it and then after it gives it back the

00:18:14,049 --> 00:18:16,749
clients just like okay I'm gonna send

00:18:15,279 --> 00:18:19,149
you another request to do the same thing

00:18:16,749 --> 00:18:21,549
and by doing that you sort of achieve

00:18:19,149 --> 00:18:24,940
that goal of having dual connection

00:18:21,549 --> 00:18:27,009
between a client and a server and there

00:18:24,940 --> 00:18:29,669
are upsides to it and downsides to it

00:18:27,009 --> 00:18:32,950
and we'll get onto that quite soon

00:18:29,669 --> 00:18:36,609
another way of doing it is called server

00:18:32,950 --> 00:18:37,929
events or server sent events sorry and

00:18:36,609 --> 00:18:40,210
it uses this thing called the event

00:18:37,929 --> 00:18:42,220
source API to send events from the

00:18:40,210 --> 00:18:44,529
server and it's not truly bi-directional

00:18:42,220 --> 00:18:46,419
because it's really based from the

00:18:44,529 --> 00:18:47,769
server send it to the client not an

00:18:46,419 --> 00:18:49,090
interaction between the two of them and

00:18:47,769 --> 00:18:51,489
that's sort of the distinction between

00:18:49,090 --> 00:18:53,350
them and web sockets where web sockets

00:18:51,489 --> 00:18:55,749
expects both the client and server to

00:18:53,350 --> 00:18:57,850
continuously communicate this expects

00:18:55,749 --> 00:18:59,169
the client to sometimes communicate with

00:18:57,850 --> 00:19:01,929
the server but mainly for it to be

00:18:59,169 --> 00:19:03,909
server data being sent back and so this

00:19:01,929 --> 00:19:06,609
generally requires an event loop or

00:19:03,909 --> 00:19:08,470
asynchronous server and one of the

00:19:06,609 --> 00:19:09,970
downsides is you don't have that binary

00:19:08,470 --> 00:19:12,330
message capability which you will

00:19:09,970 --> 00:19:15,789
receive with WebSockets which supports

00:19:12,330 --> 00:19:17,409
binary donor and one of the main upsides

00:19:15,789 --> 00:19:19,090
of this method and I guess is the

00:19:17,409 --> 00:19:21,429
arguable thing you might want to

00:19:19,090 --> 00:19:24,460
consider when choosing to use WebSockets

00:19:21,429 --> 00:19:26,710
or not is using this method allows you

00:19:24,460 --> 00:19:29,289
to coexist with existing technologies

00:19:26,710 --> 00:19:31,960
and when I say that I'm saying it works

00:19:29,289 --> 00:19:33,399
well with rest api's and with things

00:19:31,960 --> 00:19:36,359
like oh all right so existing

00:19:33,399 --> 00:19:38,860
technologies which use that that model

00:19:36,359 --> 00:19:40,870
now WebSockets can't really

00:19:38,860 --> 00:19:44,020
interface with them properly and there's

00:19:40,870 --> 00:19:46,150
a bit of an issue trying to request from

00:19:44,020 --> 00:19:49,030
an API using WebSockets so you've got to

00:19:46,150 --> 00:19:52,030
kind of consider if you want to be using

00:19:49,030 --> 00:19:54,640
those sorts of technologies and if it's

00:19:52,030 --> 00:19:56,710
worth the trade-off now the browser

00:19:54,640 --> 00:19:59,950
support for server sent events isn't as

00:19:56,710 --> 00:20:01,420
good as WebSockets which is funny it's

00:19:59,950 --> 00:20:03,610
pretty much everything except for

00:20:01,420 --> 00:20:05,380
Internet Explorer but it that can also

00:20:03,610 --> 00:20:07,090
be polyfilled so I guess it's arguable

00:20:05,380 --> 00:20:11,440
that you can pretty much use WebSockets

00:20:07,090 --> 00:20:15,040
all these in replace of each other the

00:20:11,440 --> 00:20:16,929
intended use case of WebSockets this is

00:20:15,040 --> 00:20:19,000
sort of a topic which is I guess

00:20:16,929 --> 00:20:22,660
controversial so I don't want to make my

00:20:19,000 --> 00:20:24,460
opinion change this but one of the

00:20:22,660 --> 00:20:26,049
things I want to get clear to you guys

00:20:24,460 --> 00:20:28,830
is WebSockets is not a complete

00:20:26,049 --> 00:20:32,080
replacement for HTTP right

00:20:28,830 --> 00:20:33,280
WebSockets is an upgrade we saw earlier

00:20:32,080 --> 00:20:35,559
with the headers it's it's not a

00:20:33,280 --> 00:20:40,059
replacement for the HTTP model but it's

00:20:35,559 --> 00:20:42,220
more an upgrade for that channel so you

00:20:40,059 --> 00:20:44,940
can't just replace HTTP users because

00:20:42,220 --> 00:20:47,460
HTTP provides you a number of benefits

00:20:44,940 --> 00:20:50,440
which you won't receive with just native

00:20:47,460 --> 00:20:54,220
WebSockets like for example as mentioned

00:20:50,440 --> 00:20:55,150
on the slide automatic caching and you

00:20:54,220 --> 00:20:57,760
can communicate with those other

00:20:55,150 --> 00:21:00,730
technologies like a rest and auth and

00:20:57,760 --> 00:21:03,820
one of the things that's often another

00:21:00,730 --> 00:21:07,630
critical point about WebSockets is load

00:21:03,820 --> 00:21:09,880
balancing the server's is often quite

00:21:07,630 --> 00:21:11,200
hard with the WebSocket protocol and it

00:21:09,880 --> 00:21:12,880
makes the whole implementation of

00:21:11,200 --> 00:21:17,230
deployment a little bit more complicated

00:21:12,880 --> 00:21:18,640
than just doing HTTP server and so the

00:21:17,230 --> 00:21:20,350
intended use case for WebSockets is

00:21:18,640 --> 00:21:23,080
generally things where you need that

00:21:20,350 --> 00:21:24,730
full duplex client-server interaction so

00:21:23,080 --> 00:21:26,890
it's things where you're doing things in

00:21:24,730 --> 00:21:29,049
real time like creating maybe a game on

00:21:26,890 --> 00:21:30,840
the web chatting applications where

00:21:29,049 --> 00:21:33,160
you've constantly got that interaction

00:21:30,840 --> 00:21:38,530
anything which needs that low latency

00:21:33,160 --> 00:21:39,640
real time connection over the web ok so

00:21:38,530 --> 00:21:41,520
we're gonna get into some of the clients

00:21:39,640 --> 00:21:44,799
which are used to interface with

00:21:41,520 --> 00:21:47,650
WebSockets so these are the things which

00:21:44,799 --> 00:21:49,450
you use to talk to a server and the

00:21:47,650 --> 00:21:51,160
server either upgrades or doesn't

00:21:49,450 --> 00:21:52,450
upgrade with you and I'll get into what

00:21:51,160 --> 00:21:54,610
that means in a second

00:21:52,450 --> 00:21:56,320
so these clients are built in a lot of

00:21:54,610 --> 00:22:00,430
different languages including Python

00:21:56,320 --> 00:22:01,630
which is an episode and even micro Pi

00:22:00,430 --> 00:22:03,370
and Arduino have them which is kind of

00:22:01,630 --> 00:22:05,080
cool so if you enter a IT sort of things

00:22:03,370 --> 00:22:07,330
you can use WebSockets which is awesome

00:22:05,080 --> 00:22:09,640
so if you want to control any IOT

00:22:07,330 --> 00:22:11,890
devices you can create that WebSocket

00:22:09,640 --> 00:22:14,670
connection with a web browser so for

00:22:11,890 --> 00:22:18,310
example if I wanted to interface with

00:22:14,670 --> 00:22:20,010
one of my IT devices let's say some kind

00:22:18,310 --> 00:22:24,730
of robot or something I could control it

00:22:20,010 --> 00:22:27,130
using my web browser with a WebSocket

00:22:24,730 --> 00:22:28,750
connection and so clients which

00:22:27,130 --> 00:22:31,300
interface with WebSockets

00:22:28,750 --> 00:22:32,680
aren't necessarily web browsers like

00:22:31,300 --> 00:22:34,720
we'd expect but the most popular

00:22:32,680 --> 00:22:37,360
implementation of these clients are

00:22:34,720 --> 00:22:40,330
built in JavaScript and are used as web

00:22:37,360 --> 00:22:41,500
clients and obviously they require the

00:22:40,330 --> 00:22:42,660
server to be able to interface with

00:22:41,500 --> 00:22:46,600
WebSockets

00:22:42,660 --> 00:22:48,700
if a client tries to request an upgrade

00:22:46,600 --> 00:22:51,400
with a server that doesn't support it

00:22:48,700 --> 00:22:54,910
it'll obviously respond with an error

00:22:51,400 --> 00:22:56,140
and you won't get that upgrade and if

00:22:54,910 --> 00:22:58,120
you want to read more into sort of

00:22:56,140 --> 00:22:59,380
clients and looking for the right one

00:22:58,120 --> 00:23:01,930
that you might want to use for in your

00:22:59,380 --> 00:23:03,820
projects I'd consider looking at socket

00:23:01,930 --> 00:23:06,610
IO which I'm gonna go into a lot more

00:23:03,820 --> 00:23:08,020
depth in a second and looking into just

00:23:06,610 --> 00:23:10,150
some of the web socket libraries just by

00:23:08,020 --> 00:23:12,340
doing a simple google search for a web

00:23:10,150 --> 00:23:14,710
socket client and if obviously you guys

00:23:12,340 --> 00:23:16,330
are Python people so I'd assume it'd be

00:23:14,710 --> 00:23:20,020
looking for things in Python and those

00:23:16,330 --> 00:23:22,390
do exist so for this example I'm going

00:23:20,020 --> 00:23:25,300
to be showing you the native web socket

00:23:22,390 --> 00:23:26,680
support which is in JavaScript I'm going

00:23:25,300 --> 00:23:29,470
to show you a bit of code sort of work

00:23:26,680 --> 00:23:31,150
through how quite easy it is to create a

00:23:29,470 --> 00:23:35,020
client which can interface with the

00:23:31,150 --> 00:23:36,250
WebSocket server so in this example we

00:23:35,020 --> 00:23:37,870
start off with the initial socket

00:23:36,250 --> 00:23:40,450
connection which is just a new web

00:23:37,870 --> 00:23:41,740
socket object and again I'm sorry for

00:23:40,450 --> 00:23:44,260
pushing JavaScript on you guys I know

00:23:41,740 --> 00:23:47,200
you're not here for this but you give

00:23:44,260 --> 00:23:51,220
this this new WebSocket connection and

00:23:47,200 --> 00:23:54,280
you define AWS route so for this example

00:23:51,220 --> 00:23:56,740
I'm connecting to my localhost and then

00:23:54,280 --> 00:24:00,160
you have to define a couple of functions

00:23:56,740 --> 00:24:02,470
so the this socket object has a non open

00:24:00,160 --> 00:24:04,870
event which means once the protocol has

00:24:02,470 --> 00:24:06,190
been swapped and upgraded to WebSockets

00:24:04,870 --> 00:24:08,529
this function

00:24:06,190 --> 00:24:11,320
it's called right and so in the example

00:24:08,529 --> 00:24:15,070
that I've got up on the screen it's just

00:24:11,320 --> 00:24:16,990
a lambda way of dealing with that so for

00:24:15,070 --> 00:24:18,190
example in my example I open that

00:24:16,990 --> 00:24:21,669
connection

00:24:18,190 --> 00:24:25,080
and then I send using socket sent I send

00:24:21,669 --> 00:24:28,990
the string PyCon au up to the server and

00:24:25,080 --> 00:24:30,879
then when the server sent something back

00:24:28,990 --> 00:24:34,779
to me the socket on message is called

00:24:30,879 --> 00:24:35,529
I just realize I don't have too much

00:24:34,779 --> 00:24:38,950
time

00:24:35,529 --> 00:24:40,090
so socket IO is another thing I want to

00:24:38,950 --> 00:24:42,389
also mention and it's sort of the main

00:24:40,090 --> 00:24:45,269
thing I want to push it you guys to use

00:24:42,389 --> 00:24:48,909
this is a nicer way of interfacing with

00:24:45,269 --> 00:24:51,490
WebSocket service because it's sort of

00:24:48,909 --> 00:24:53,139
like a jQuery to JavaScript right so

00:24:51,490 --> 00:24:55,960
it's sort of like this this library that

00:24:53,139 --> 00:24:57,429
takes the native WebSockets and makes a

00:24:55,960 --> 00:24:58,809
lot nicer and easier to use

00:24:57,429 --> 00:25:02,200
right and so it includes things like

00:24:58,809 --> 00:25:04,240
Auto reconnection and fall backs so say

00:25:02,200 --> 00:25:06,549
a server and a client don't agree on the

00:25:04,240 --> 00:25:09,000
handshake what it does is it uses a

00:25:06,549 --> 00:25:11,620
fallback mechanism to use long polling

00:25:09,000 --> 00:25:13,690
instead which is quite good if you want

00:25:11,620 --> 00:25:16,330
to support older browsers and it gives

00:25:13,690 --> 00:25:18,490
you that ability to do that it also as

00:25:16,330 --> 00:25:20,470
native WebSockets does handles

00:25:18,490 --> 00:25:22,179
disconnection in connection and it gives

00:25:20,470 --> 00:25:24,190
you this ability to create these things

00:25:22,179 --> 00:25:27,580
called main spaces which is sort of like

00:25:24,190 --> 00:25:32,649
a group of clients which so they can

00:25:27,580 --> 00:25:34,029
talk to and so a socket IO client side

00:25:32,649 --> 00:25:35,230
code is quite similar to what you saw

00:25:34,029 --> 00:25:37,450
before you create that initial

00:25:35,230 --> 00:25:39,730
connection and you give it the name

00:25:37,450 --> 00:25:43,360
space as one of the parameters to the

00:25:39,730 --> 00:25:45,309
URL you have a connect event and you can

00:25:43,360 --> 00:25:48,340
also send events to custom-made events

00:25:45,309 --> 00:25:51,519
right so the native web sockets can only

00:25:48,340 --> 00:25:53,710
send events to and a message event on

00:25:51,519 --> 00:25:56,889
the server whereas this I can define

00:25:53,710 --> 00:25:59,049
custom events to do that and I'm gonna

00:25:56,889 --> 00:26:01,330
skip over this slide because I'm slowly

00:25:59,049 --> 00:26:05,049
running out of time but there's a lot of

00:26:01,330 --> 00:26:06,669
support for Python servers which do do

00:26:05,049 --> 00:26:08,259
this and I'm going to be using flask for

00:26:06,669 --> 00:26:11,769
a lot of my examples which we should

00:26:08,259 --> 00:26:12,970
hopefully fly through but there's a lot

00:26:11,769 --> 00:26:16,480
of different limitations for using

00:26:12,970 --> 00:26:19,720
socket IO it's really really quite easy

00:26:16,480 --> 00:26:21,309
so you create a flask application

00:26:19,720 --> 00:26:22,419
most of you might have used flasks if

00:26:21,309 --> 00:26:26,110
you'd ever done on your web stuff with

00:26:22,419 --> 00:26:30,519
Python but it's as easy as wrapping the

00:26:26,110 --> 00:26:34,200
app with the provided socket object and

00:26:30,519 --> 00:26:36,730
then creating a route which takes in a

00:26:34,200 --> 00:26:40,269
custom event name like for example my

00:26:36,730 --> 00:26:43,629
sockets sorry this isn't actually an

00:26:40,269 --> 00:26:44,799
example for native web sockets so this

00:26:43,629 --> 00:26:47,860
is where you're using that native

00:26:44,799 --> 00:26:49,690
connection and then socket IO is where

00:26:47,860 --> 00:26:51,580
you can do custom events and so this

00:26:49,690 --> 00:26:54,009
namespace allows me to address a group

00:26:51,580 --> 00:26:55,690
of people let's say the namespace PyCon

00:26:54,009 --> 00:26:57,159
so I get all the people to connect to

00:26:55,690 --> 00:26:59,350
this namespace Python and then I can

00:26:57,159 --> 00:27:01,360
send messages back and forth to anyone

00:26:59,350 --> 00:27:03,159
that's connected to that PyCon namespace

00:27:01,360 --> 00:27:04,419
which is really quite cool for managing

00:27:03,159 --> 00:27:06,399
groups of people so let's say you've got

00:27:04,419 --> 00:27:10,750
chat groups you can use this namespace

00:27:06,399 --> 00:27:12,929
to achieve that and also I came before

00:27:10,750 --> 00:27:16,559
the performance comparison between

00:27:12,929 --> 00:27:19,179
WebSockets and just HTTP it's quite big

00:27:16,559 --> 00:27:19,539
so HTTP requests they always send that

00:27:19,179 --> 00:27:22,419
header

00:27:19,539 --> 00:27:24,370
whereas WebSockets don't so after that

00:27:22,419 --> 00:27:27,490
initial connections done every other

00:27:24,370 --> 00:27:30,179
request is only framed by a two byte

00:27:27,490 --> 00:27:33,759
header frame I think it's called a frame

00:27:30,179 --> 00:27:38,019
and it it's not as heavy as the multiple

00:27:33,759 --> 00:27:41,289
kilobytes which a HTTP request might

00:27:38,019 --> 00:27:44,409
have but then there's also that socket

00:27:41,289 --> 00:27:46,509
IO idea from before also does contribute

00:27:44,409 --> 00:27:50,889
to adding latency to that WebSockets but

00:27:46,509 --> 00:27:54,879
it's not as much as HTTP might I'm gonna

00:27:50,889 --> 00:27:57,870
quickly go to a speed test if I can this

00:27:54,879 --> 00:28:00,820
is just my localhost and what it does is

00:27:57,870 --> 00:28:03,460
I enter a number of requests I want it

00:28:00,820 --> 00:28:07,289
to perform and it just does that so I

00:28:03,460 --> 00:28:09,669
just send in a basic string to either my

00:28:07,289 --> 00:28:13,809
WebSocket endpoint or my API endpoint

00:28:09,669 --> 00:28:17,740
and you'll see how much quicker

00:28:13,809 --> 00:28:19,450
WebSockets is in comparison to Ajax this

00:28:17,740 --> 00:28:21,399
isn't actually hosted on the on the web

00:28:19,450 --> 00:28:25,379
because I wanted to take latency out of

00:28:21,399 --> 00:28:27,399
it out of the equation but you can see

00:28:25,379 --> 00:28:28,929
it looks a bit small here because it's

00:28:27,399 --> 00:28:31,179
in milliseconds but you can imagine

00:28:28,929 --> 00:28:31,840
having a thousand hundreds of thousands

00:28:31,179 --> 00:28:34,480
of users can

00:28:31,840 --> 00:28:36,220
to a connection all doing these requests

00:28:34,480 --> 00:28:40,690
you can see how that can quickly get

00:28:36,220 --> 00:28:42,690
quite expensive now I was going to do a

00:28:40,690 --> 00:28:44,860
live demo but I'm quickly out of time

00:28:42,690 --> 00:28:47,650
I'm just gonna quickly touch on

00:28:44,860 --> 00:28:49,350
deploying these WebSockets and so

00:28:47,650 --> 00:28:51,520
synchronous servers don't generally have

00:28:49,350 --> 00:28:53,529
support for this so we have to use

00:28:51,520 --> 00:28:56,320
libraries such as event late' and G

00:28:53,529 --> 00:28:57,549
event to monkey patch some of the

00:28:56,320 --> 00:28:59,980
standard libraries in Python so

00:28:57,549 --> 00:29:02,559
synchronous just means that it it uses

00:28:59,980 --> 00:29:05,950
blocking functions and using these

00:29:02,559 --> 00:29:07,059
libraries unblocked suit I'll go into

00:29:05,950 --> 00:29:09,010
more detail if anyone's to know about

00:29:07,059 --> 00:29:10,960
deploying it afterwards because I think

00:29:09,010 --> 00:29:14,140
I've literally got a minute

00:29:10,960 --> 00:29:16,270
but deploying WebSockets does add that

00:29:14,140 --> 00:29:17,980
little extra layer of complexity and

00:29:16,270 --> 00:29:20,049
doing them with asynchronous servers

00:29:17,980 --> 00:29:21,130
makes your life a lot easier and it's

00:29:20,049 --> 00:29:24,279
sort of the point I want to get across

00:29:21,130 --> 00:29:25,990
so unfortunately I'm gonna have to wrap

00:29:24,279 --> 00:29:28,840
up early but if you do want to talk more

00:29:25,990 --> 00:29:30,399
about this feel free to find me outside

00:29:28,840 --> 00:29:34,169
I'll probably be loitering around for a

00:29:30,399 --> 00:29:34,169
little bit and thank you for coming

00:29:35,150 --> 00:29:38,269
[Music]

00:29:39,509 --> 00:29:43,929
thank you dear as you can see is very

00:29:42,159 --> 00:29:47,909
enthusiastic about it so I'm sure he'll

00:29:43,929 --> 00:29:47,909

YouTube URL: https://www.youtube.com/watch?v=PjiXkJ6P9pQ


