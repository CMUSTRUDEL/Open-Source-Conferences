Title: How To Publish A Package On PyPI
Publication date: 2018-08-26
Playlist: PyCon Australia 2018
Description: 
	Mark Smith

https://2018.pycon-au.org/talks/44349-how-to-publish-a-package-on-pypi/

Starting with nothing, we'll build a package and publish it on PyPI using current best practices! Learn how to structure, document and test your project on different platforms. Discover the difference between `setup.py` and `Pipfile`. Finally, use CookieCutter to avoid doing it twice (or even once)!

Python, PyCon, PyConAU, australia, programming, sydney

This video is licensed under CC BY 3.0 AU - https://creativecommons.org/licenses/by/3.0/au/

PyCon Australia (“PyCon AU”) is the national conference for the Python Programming Community, bringing together professional, student and enthusiast developers with a love for developing with Python.

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 24 - 28 2018.

Python, PyCon, PyConAU
Captions: 
	00:00:07,099 --> 00:00:11,309
okay we're gonna get started with the

00:00:09,179 --> 00:00:14,969
second talk of this last session of

00:00:11,309 --> 00:00:17,400
PyCon au 2018 next up we have Mark Smith

00:00:14,969 --> 00:00:20,990
with publishing perfect Python packages

00:00:17,400 --> 00:00:20,990
on pi PI let's give them a warm welcome

00:00:23,090 --> 00:00:27,240
thank you everybody

00:00:24,960 --> 00:00:29,340
I apologize for the the last-minute

00:00:27,240 --> 00:00:30,300
change of title but I suddenly rise

00:00:29,340 --> 00:00:32,219
there's a real opportunity for

00:00:30,300 --> 00:00:33,750
alliteration here and I I couldn't turn

00:00:32,219 --> 00:00:36,090
it down originally the title was how to

00:00:33,750 --> 00:00:39,480
publish a package on PI P is much less

00:00:36,090 --> 00:00:42,090
interesting so I'm about to run through

00:00:39,480 --> 00:00:44,070
building and publishing a package from

00:00:42,090 --> 00:00:46,590
scratch in a moment but first I'll just

00:00:44,070 --> 00:00:50,250
run through talking about myself for a

00:00:46,590 --> 00:00:52,370
moment this is me I am gt2k on Twitter

00:00:50,250 --> 00:00:56,100
github and pretty much everything else

00:00:52,370 --> 00:00:58,500
my real name is Mark Smith and I'm a

00:00:56,100 --> 00:01:01,890
developer advocate at next mo we're a

00:00:58,500 --> 00:01:03,449
sponsor of the conference I stole this

00:01:01,890 --> 00:01:04,589
slide from my colleague Aaron he

00:01:03,449 --> 00:01:05,610
complained about that before so I

00:01:04,589 --> 00:01:08,580
thought I'd give him some credit this

00:01:05,610 --> 00:01:10,140
time we offer web-based api sattell our

00:01:08,580 --> 00:01:11,880
web developers to write code that sends

00:01:10,140 --> 00:01:13,590
text messages makes phone calls sends

00:01:11,880 --> 00:01:16,170
messages via different in its domestic

00:01:13,590 --> 00:01:17,220
platforms if that sounds interesting we

00:01:16,170 --> 00:01:18,689
are around for the rest of the

00:01:17,220 --> 00:01:20,100
conference come and talk to me or Aaron

00:01:18,689 --> 00:01:23,340
who's wearing a hoodie the same color as

00:01:20,100 --> 00:01:25,229
mine and that's enough about me I've got

00:01:23,340 --> 00:01:26,460
a lot to get through in a really short

00:01:25,229 --> 00:01:30,020
space of time so I'm going to talk

00:01:26,460 --> 00:01:32,729
really quickly whoa

00:01:30,020 --> 00:01:34,320
this is actually falling apart can

00:01:32,729 --> 00:01:38,340
somebody help me with that no I think

00:01:34,320 --> 00:01:46,619
it's okay that's new they just slid

00:01:38,340 --> 00:01:49,320
forward okay I'll keep an eye on it so

00:01:46,619 --> 00:01:51,270
in March 2016 a developer removed a

00:01:49,320 --> 00:01:53,369
library called left pad from NPM the

00:01:51,270 --> 00:01:55,560
nodejs equivalent of pi pi it's a big

00:01:53,369 --> 00:01:57,299
web service containing packages it broke

00:01:55,560 --> 00:01:59,219
lots and lots of libraries that depended

00:01:57,299 --> 00:02:01,200
on it left pad was down had been

00:01:59,219 --> 00:02:02,610
downloaded two million four hundred and

00:02:01,200 --> 00:02:04,860
eighty six thousand six hundred and

00:02:02,610 --> 00:02:07,020
ninety six times in the month before it

00:02:04,860 --> 00:02:08,819
was removed so it was very popular it

00:02:07,020 --> 00:02:11,099
was just one function and eleven lines

00:02:08,819 --> 00:02:12,720
of code that padded a string to a

00:02:11,099 --> 00:02:13,319
certain length by adding characters to

00:02:12,720 --> 00:02:16,439
the start of this

00:02:13,319 --> 00:02:18,599
drink lots of people thought that this

00:02:16,439 --> 00:02:21,409
the existence of this library made the

00:02:18,599 --> 00:02:23,790
JavaScript community look kind of stupid

00:02:21,409 --> 00:02:26,099
why would anyone publish a library

00:02:23,790 --> 00:02:29,310
consisting of just 11 lines of code why

00:02:26,099 --> 00:02:30,870
would anyone use it now the fact that it

00:02:29,310 --> 00:02:32,879
could be removed like this and cause

00:02:30,870 --> 00:02:34,950
these huge problems in the JavaScript

00:02:32,879 --> 00:02:36,599
ecosystem is a problem but I think in

00:02:34,950 --> 00:02:38,340
general the existence that this library

00:02:36,599 --> 00:02:42,150
actually made the JavaScript community

00:02:38,340 --> 00:02:45,709
and especially NPM look amazing and if

00:02:42,150 --> 00:02:49,650
you disagree you can fight me on Twitter

00:02:45,709 --> 00:02:52,620
left pad was not a problem left pad was

00:02:49,650 --> 00:02:54,120
a solution it was because the JavaScript

00:02:52,620 --> 00:02:55,620
standard library doesn't contain a

00:02:54,120 --> 00:02:57,480
solution for adding white space to the

00:02:55,620 --> 00:02:59,489
start of a line the developer of left

00:02:57,480 --> 00:03:01,260
pad solved the problem himself and

00:02:59,489 --> 00:03:04,500
published the solution for other people

00:03:01,260 --> 00:03:07,379
to use and because it's really easy to

00:03:04,500 --> 00:03:08,939
share code on NPM people do with really

00:03:07,379 --> 00:03:10,590
small libraries the type of thing that

00:03:08,939 --> 00:03:12,919
you would normally in other languages

00:03:10,590 --> 00:03:15,810
find on Stack Overflow and a gist but

00:03:12,919 --> 00:03:19,590
copy and paste is not how you should

00:03:15,810 --> 00:03:21,540
share code I think we all agree but I

00:03:19,590 --> 00:03:24,720
think people in the Python community are

00:03:21,540 --> 00:03:26,879
kind of afraid of setup py files over

00:03:24,720 --> 00:03:27,959
the years the docs and best practice

00:03:26,879 --> 00:03:30,269
have been a bit tricky to put together

00:03:27,959 --> 00:03:32,430
things opinions have changed over time

00:03:30,269 --> 00:03:33,959
there are differing opinions online so

00:03:32,430 --> 00:03:35,699
it's just difficult to work out how to

00:03:33,959 --> 00:03:38,220
do things properly or even whether you

00:03:35,699 --> 00:03:39,720
are doing things properly but they are

00:03:38,220 --> 00:03:41,579
getting better all the time and

00:03:39,720 --> 00:03:44,759
hopefully this talk will help in some

00:03:41,579 --> 00:03:46,829
small way so every time you publish code

00:03:44,759 --> 00:03:48,959
on a shared repository you make the

00:03:46,829 --> 00:03:50,639
Python ecosystem stronger you make

00:03:48,959 --> 00:03:53,159
somebody's life easier and these are all

00:03:50,639 --> 00:03:56,359
good things where would we be if Django

00:03:53,159 --> 00:03:59,790
numpy or pandas had never been published

00:03:56,359 --> 00:04:01,889
so let's make a package so the idea of

00:03:59,790 --> 00:04:03,120
this talk really is that you've you're

00:04:01,889 --> 00:04:04,769
working on a project and you've written

00:04:03,120 --> 00:04:06,359
some code and you realize it's not that

00:04:04,769 --> 00:04:08,759
specific to the project so you want to

00:04:06,359 --> 00:04:10,379
share it with other people so well let's

00:04:08,759 --> 00:04:11,849
start with some code that we could be

00:04:10,379 --> 00:04:13,379
useful to other people I mean I'm sure

00:04:11,849 --> 00:04:14,959
everyone in this room has had to write

00:04:13,379 --> 00:04:16,650
this code from one time or another

00:04:14,959 --> 00:04:19,799
wouldn't it be better if you could just

00:04:16,650 --> 00:04:21,840
BIP install it and call it so the first

00:04:19,799 --> 00:04:23,190
thing to do is extract the code and here

00:04:21,840 --> 00:04:26,340
we've extracted it into a file called

00:04:23,190 --> 00:04:26,880
hello world up py and so and we put it

00:04:26,340 --> 00:04:29,250
in a sauce

00:04:26,880 --> 00:04:31,290
directory I'll explain that in a minute

00:04:29,250 --> 00:04:33,270
and the next step to make this a

00:04:31,290 --> 00:04:35,580
publishable package is to write a setup

00:04:33,270 --> 00:04:38,910
opy file in our hello world directory

00:04:35,580 --> 00:04:41,910
that contains all this stuff so this is

00:04:38,910 --> 00:04:44,370
about the simplest setup py file you can

00:04:41,910 --> 00:04:46,380
write so we're using setup tools which

00:04:44,370 --> 00:04:48,030
is a third-party dependency and it never

00:04:46,380 --> 00:04:49,560
used to be necessarily recommended

00:04:48,030 --> 00:04:52,590
unless you needed the extensions that it

00:04:49,560 --> 00:04:55,110
provided but these days setup tools is a

00:04:52,590 --> 00:04:56,850
dependency that pip has so you already

00:04:55,110 --> 00:04:58,410
have setup tools available it's more

00:04:56,850 --> 00:05:00,510
powerful than dist utils so we're going

00:04:58,410 --> 00:05:02,280
to use it so import setup and although

00:05:00,510 --> 00:05:04,080
we're calling a function really all

00:05:02,280 --> 00:05:05,910
those arguments passed to setup are just

00:05:04,080 --> 00:05:07,950
kind of metadata describing our library

00:05:05,910 --> 00:05:09,720
so the name of our library is hello

00:05:07,950 --> 00:05:11,640
world so this is what you will pip

00:05:09,720 --> 00:05:14,400
install this is how it will be looked up

00:05:11,640 --> 00:05:15,780
in the pi PI database we've picked a

00:05:14,400 --> 00:05:17,280
really low version number because we're

00:05:15,780 --> 00:05:19,530
probably going to be iterating several

00:05:17,280 --> 00:05:22,380
times as we get the package kind of sort

00:05:19,530 --> 00:05:23,670
of solidified in the early stages I've

00:05:22,380 --> 00:05:24,870
written a description here which isn't

00:05:23,670 --> 00:05:27,240
very useful so you would write a

00:05:24,870 --> 00:05:29,370
one-line description and put it in here

00:05:27,240 --> 00:05:31,260
so people can understand very quickly

00:05:29,370 --> 00:05:33,330
what the library does and then in plain

00:05:31,260 --> 00:05:34,980
modules although it looks in this case

00:05:33,330 --> 00:05:37,200
it contains the same thing as name and

00:05:34,980 --> 00:05:39,330
in it often will contain the same thing

00:05:37,200 --> 00:05:41,100
as name and this is what you import so

00:05:39,330 --> 00:05:43,170
it's not what you pip install is this

00:05:41,100 --> 00:05:44,550
it's the py file essentially that's

00:05:43,170 --> 00:05:47,280
going to be copied into the package and

00:05:44,550 --> 00:05:48,900
uploaded to pi PI and then this last

00:05:47,280 --> 00:05:50,070
line is needed because we have a source

00:05:48,900 --> 00:05:52,560
directory which I mentioned in the

00:05:50,070 --> 00:05:56,220
previous slide it's it's kind of a magic

00:05:52,560 --> 00:05:57,690
copy paste thing just do that so let's

00:05:56,220 --> 00:05:59,910
test it we're already at the stage where

00:05:57,690 --> 00:06:02,220
we can build our package so we call the

00:05:59,910 --> 00:06:04,290
setup py file with this me distill come

00:06:02,220 --> 00:06:06,990
and which is short for build me a wheel

00:06:04,290 --> 00:06:08,640
binary distribution file wheel is the

00:06:06,990 --> 00:06:11,310
file format that is currently the

00:06:08,640 --> 00:06:12,840
standard for pip and we get lots of

00:06:11,310 --> 00:06:14,760
output that comes out of this which I've

00:06:12,840 --> 00:06:16,770
got lots of that out the important line

00:06:14,760 --> 00:06:19,260
is the one I've highlighted which says

00:06:16,770 --> 00:06:22,380
that it's copied our source code into

00:06:19,260 --> 00:06:26,040
the library folder so that's a good sign

00:06:22,380 --> 00:06:29,460
and now our project looks like this so

00:06:26,040 --> 00:06:31,890
it's created a egg info folder which I

00:06:29,460 --> 00:06:34,440
kind of hate but we'll just ignore that

00:06:31,890 --> 00:06:37,290
for the rest of the talk and we have a

00:06:34,440 --> 00:06:38,820
build folder which contains the source

00:06:37,290 --> 00:06:40,650
code essentially copied our source code

00:06:38,820 --> 00:06:43,800
into the build folder so that's good

00:06:40,650 --> 00:06:47,040
and then it zipped it up into this WHL

00:06:43,800 --> 00:06:48,720
wheel file which is what we want it so

00:06:47,040 --> 00:06:49,919
we know that it builds we didn't get any

00:06:48,720 --> 00:06:51,900
errors but we don't know if everything

00:06:49,919 --> 00:06:56,760
that we need is in there so let's

00:06:51,900 --> 00:06:59,220
install it so installed the package we

00:06:56,760 --> 00:07:01,020
just created into our own virtual env

00:06:59,220 --> 00:07:03,180
running using this command to this pip

00:07:01,020 --> 00:07:06,210
install command but you may be wondering

00:07:03,180 --> 00:07:08,220
what this - e dot thing at the end is so

00:07:06,210 --> 00:07:10,350
the - e flag means you're installing it

00:07:08,220 --> 00:07:12,090
as editable code and what this means is

00:07:10,350 --> 00:07:14,010
it's not going to copy the source code

00:07:12,090 --> 00:07:16,169
in the source folder into the virtual nf

00:07:14,010 --> 00:07:18,300
into the virtual ends library folder

00:07:16,169 --> 00:07:22,229
instead it's going to link that virtual

00:07:18,300 --> 00:07:25,500
end that to the the Python path so that

00:07:22,229 --> 00:07:27,600
when you can import HelloWorld just even

00:07:25,500 --> 00:07:29,310
though it's not it has in fact the point

00:07:27,600 --> 00:07:30,810
is it's importing the file that you're

00:07:29,310 --> 00:07:31,919
editing so everything you're editing in

00:07:30,810 --> 00:07:33,330
source is the thing that's being

00:07:31,919 --> 00:07:34,919
imported in your current virtual ends

00:07:33,330 --> 00:07:36,660
and then oops excuse me

00:07:34,919 --> 00:07:39,090
the dot at the end just means you're

00:07:36,660 --> 00:07:41,550
installing the current directory so it

00:07:39,090 --> 00:07:43,740
runs the setup dot py in the directory

00:07:41,550 --> 00:07:48,000
that you're currently in so it's also a

00:07:43,740 --> 00:07:49,229
HelloWorld distribution so the end

00:07:48,000 --> 00:07:50,849
result here is that your HelloWorld

00:07:49,229 --> 00:07:54,510
library will now be in portable into

00:07:50,849 --> 00:07:56,460
your virtual F so let's test that so we

00:07:54,510 --> 00:07:58,260
can run Python we can import hello world

00:07:56,460 --> 00:07:59,910
we can import say hello we can call it a

00:07:58,260 --> 00:08:01,470
couple of times this is going to get a

00:07:59,910 --> 00:08:03,030
bit tiresome if we have to do this every

00:08:01,470 --> 00:08:04,620
time to make sure our setup file is

00:08:03,030 --> 00:08:08,220
still correct so we'll sort that out in

00:08:04,620 --> 00:08:10,110
a minute so in theory we can upload this

00:08:08,220 --> 00:08:11,970
to pipe the I already and you might want

00:08:10,110 --> 00:08:13,289
to do that just at this early stage to

00:08:11,970 --> 00:08:15,449
make sure that you're reserving the name

00:08:13,289 --> 00:08:17,039
of your package so somebody else doesn't

00:08:15,449 --> 00:08:19,440
take it and just kind of make sure that

00:08:17,039 --> 00:08:21,030
your basics are set up but I would say

00:08:19,440 --> 00:08:22,199
that really before we publish to pipe VI

00:08:21,030 --> 00:08:22,620
there are three things we need to do

00:08:22,199 --> 00:08:25,349
first

00:08:22,620 --> 00:08:27,229
we've got documentation testing and but

00:08:25,349 --> 00:08:29,580
first a bit a little bit of housekeeping

00:08:27,229 --> 00:08:31,080
so you need to get ignore file as you've

00:08:29,580 --> 00:08:32,459
seen we've just built the project and

00:08:31,080 --> 00:08:33,810
it's created this dist folder the build

00:08:32,459 --> 00:08:35,400
folder and stuff you don't want to get

00:08:33,810 --> 00:08:37,110
because those are generated files you

00:08:35,400 --> 00:08:38,550
don't want to add them to get there's a

00:08:37,110 --> 00:08:40,800
great site here called git ignore i/o

00:08:38,550 --> 00:08:43,529
you just try placing in that text box

00:08:40,800 --> 00:08:45,900
hit create and it will spit out a bunch

00:08:43,529 --> 00:08:47,310
of text of common artifacts on Python

00:08:45,900 --> 00:08:50,250
projects and you can just paste that

00:08:47,310 --> 00:08:52,589
into a git ignore file then we need a

00:08:50,250 --> 00:08:54,329
license to zoo license comm is a great

00:08:52,589 --> 00:08:55,589
human readable site

00:08:54,329 --> 00:08:57,299
human understandable sight for

00:08:55,589 --> 00:09:00,269
understanding what powers you're

00:08:57,299 --> 00:09:01,439
granting your users and so I recommend

00:09:00,269 --> 00:09:02,610
going through that eventually it'll give

00:09:01,439 --> 00:09:04,110
you the text of the library that you

00:09:02,610 --> 00:09:06,089
look at the license you're looking at

00:09:04,110 --> 00:09:07,949
and you paste that into a licensed txt

00:09:06,089 --> 00:09:10,259
file and then finally there's some

00:09:07,949 --> 00:09:11,639
metadata that you should really add to

00:09:10,259 --> 00:09:12,989
your setup file so I don't know if you

00:09:11,639 --> 00:09:14,819
noticed the F string in that function

00:09:12,989 --> 00:09:17,309
that means that was only introduced in

00:09:14,819 --> 00:09:19,170
Python 3.6 so here's some classifiers

00:09:17,309 --> 00:09:20,759
that say specifically it's a Python 3

00:09:19,170 --> 00:09:24,329
library and more specifically it's a

00:09:20,759 --> 00:09:25,980
Python 3.6 and 3.7 is 3.7 compatible and

00:09:24,329 --> 00:09:27,929
over time as new releases of python come

00:09:25,980 --> 00:09:29,429
out you'll want to test it on those and

00:09:27,929 --> 00:09:30,779
update this so that people understand

00:09:29,429 --> 00:09:33,389
that it's compatible with the version of

00:09:30,779 --> 00:09:35,730
python that they're using I've also just

00:09:33,389 --> 00:09:39,839
but in the fact that we using the GPL v2

00:09:35,730 --> 00:09:41,730
plus license on this particular package

00:09:39,839 --> 00:09:42,629
and I've said it's OS independent

00:09:41,730 --> 00:09:46,439
because we're not doing anything

00:09:42,629 --> 00:09:48,809
native to any one platform so now it

00:09:46,439 --> 00:09:50,339
can't we come to documentation first you

00:09:48,809 --> 00:09:51,689
need to make a big choice essentially up

00:09:50,339 --> 00:09:52,470
front you need to pick the file format

00:09:51,689 --> 00:09:55,139
that you're going to use for your

00:09:52,470 --> 00:09:57,360
documentation you can choose out there

00:09:55,139 --> 00:09:58,649
option other options but generally it

00:09:57,360 --> 00:10:00,470
comes down to restructured text or

00:09:58,649 --> 00:10:02,309
markdown they have various trade-offs

00:10:00,470 --> 00:10:03,899
restructure text is slightly more

00:10:02,309 --> 00:10:05,850
powerful it's very well known in the

00:10:03,899 --> 00:10:07,649
Python community but not so much outside

00:10:05,850 --> 00:10:09,839
and you can use Sphinx to generate

00:10:07,649 --> 00:10:12,299
static site of documentation using

00:10:09,839 --> 00:10:14,369
restructured text if you choose markdown

00:10:12,299 --> 00:10:16,679
it's simpler and other language

00:10:14,369 --> 00:10:18,089
communities understand it more and you

00:10:16,679 --> 00:10:19,470
can use make Docs which is basically the

00:10:18,089 --> 00:10:22,259
equivalent of Sphinx but for markdown

00:10:19,470 --> 00:10:24,480
files both of those support read the

00:10:22,259 --> 00:10:25,739
docs as well so if you're planning to

00:10:24,480 --> 00:10:27,089
publish your documentation to read the

00:10:25,739 --> 00:10:30,419
docs it doesn't matter which of these

00:10:27,089 --> 00:10:32,279
two choices you make I'm going to choose

00:10:30,419 --> 00:10:35,699
markdown just because it's quick and

00:10:32,279 --> 00:10:37,799
easy so we can write a readme file with

00:10:35,699 --> 00:10:40,169
dot MD to say it's a markdown file we

00:10:37,799 --> 00:10:42,329
give it you should give it a title which

00:10:40,169 --> 00:10:43,919
is the name of the project you give it a

00:10:42,329 --> 00:10:46,139
one-line description of what the project

00:10:43,919 --> 00:10:48,779
is for you should have installation

00:10:46,139 --> 00:10:51,089
instructions in there this is just very

00:10:48,779 --> 00:10:54,179
simple and you should have some basic

00:10:51,089 --> 00:10:57,149
snippets of code code examples to show

00:10:54,179 --> 00:10:58,589
how the library might be used and in

00:10:57,149 --> 00:10:59,939
some projects this may be all you need

00:10:58,589 --> 00:11:01,619
in other projects you will want to use

00:10:59,939 --> 00:11:04,399
Fink's or make Docs and upload and

00:11:01,619 --> 00:11:04,399
publish to read the docs

00:11:04,670 --> 00:11:08,170
now we have a readme we've kind of got a

00:11:06,710 --> 00:11:11,150
long description of the project and

00:11:08,170 --> 00:11:12,860
that's a handy thing to publish to pi PI

00:11:11,150 --> 00:11:14,570
when you're looking at packages on pi PI

00:11:12,860 --> 00:11:16,340
you'll notice that they usually have

00:11:14,570 --> 00:11:18,380
essentially a copy of the readme from

00:11:16,340 --> 00:11:19,970
their github page so that's exactly what

00:11:18,380 --> 00:11:22,850
we're going to do we because the setup

00:11:19,970 --> 00:11:25,640
file is a Python code we can open the

00:11:22,850 --> 00:11:27,110
readme file read it into a variable and

00:11:25,640 --> 00:11:28,220
then we can provide it to our setup

00:11:27,110 --> 00:11:30,260
function as the long description

00:11:28,220 --> 00:11:32,930
argument and then this last argument

00:11:30,260 --> 00:11:35,330
here is a nice thing these days is that

00:11:32,930 --> 00:11:36,830
PI P I now supports markdown but we have

00:11:35,330 --> 00:11:39,470
to tell it upfront so we tell it that

00:11:36,830 --> 00:11:41,570
the content type is of text markdown and

00:11:39,470 --> 00:11:46,190
it supports plain text rest or markdown

00:11:41,570 --> 00:11:47,510
these days so now we want to test and I

00:11:46,190 --> 00:11:50,930
would recommend using PI test because

00:11:47,510 --> 00:11:53,090
play test it's awesome but this now

00:11:50,930 --> 00:11:54,980
means we have a development dependency

00:11:53,090 --> 00:11:56,990
so where other contributors will need to

00:11:54,980 --> 00:11:58,820
install PI tests so we need something

00:11:56,990 --> 00:12:01,670
like a requirements txt file or a pip

00:11:58,820 --> 00:12:04,070
file now I'm getting a lot of usage out

00:12:01,670 --> 00:12:05,450
of pip in for these days so we're going

00:12:04,070 --> 00:12:07,400
to use pip file because it may be new to

00:12:05,450 --> 00:12:10,190
some members of the audience and it's

00:12:07,400 --> 00:12:12,770
kind of new and fun so we need a bit

00:12:10,190 --> 00:12:13,580
file so we don't need to write this

00:12:12,770 --> 00:12:15,980
ourselves

00:12:13,580 --> 00:12:18,020
once we've got pip env installed it will

00:12:15,980 --> 00:12:20,930
essentially maintain this file for us

00:12:18,020 --> 00:12:24,470
mostly so the first thing to do is to

00:12:20,930 --> 00:12:25,940
tell our develop a dependency file that

00:12:24,470 --> 00:12:27,530
we want to install the current module so

00:12:25,940 --> 00:12:29,840
this is a kind of a copy of our pip

00:12:27,530 --> 00:12:31,520
install minus u dot but now it's pip

00:12:29,840 --> 00:12:33,460
ends which means it will also store this

00:12:31,520 --> 00:12:36,380
store this information in the bit file

00:12:33,460 --> 00:12:38,540
then secondly we install our development

00:12:36,380 --> 00:12:40,330
dependency of high test saying that we

00:12:38,540 --> 00:12:44,900
want something compatible with well up

00:12:40,330 --> 00:12:47,990
3.7 and up and then we run pip end shell

00:12:44,900 --> 00:12:50,360
so pipin also manages your virtual end

00:12:47,990 --> 00:12:51,740
for you so shell will drop you into the

00:12:50,360 --> 00:12:55,100
virtual environment it's created with

00:12:51,740 --> 00:12:56,120
the other two commands so this creates a

00:12:55,100 --> 00:12:57,650
pip file

00:12:56,120 --> 00:13:00,140
I think these are pretty straightforward

00:12:57,650 --> 00:13:02,420
that except for this first highlighted

00:13:00,140 --> 00:13:04,580
line which is what they're - e dot

00:13:02,420 --> 00:13:05,960
command stored it's it's got like a

00:13:04,580 --> 00:13:06,650
magic string at the start which I don't

00:13:05,960 --> 00:13:08,360
understand

00:13:06,650 --> 00:13:10,040
it's got path equals dot which makes

00:13:08,360 --> 00:13:11,570
sense it's got editable equals true

00:13:10,040 --> 00:13:12,830
which kind of speaks for itself and then

00:13:11,570 --> 00:13:14,510
we've got our dev packages that we

00:13:12,830 --> 00:13:15,830
depend upon and we've got PI tests and

00:13:14,510 --> 00:13:18,300
it said greater than or equal to three

00:13:15,830 --> 00:13:20,850
point seven so this means when other pip

00:13:18,300 --> 00:13:22,470
users download our project they can just

00:13:20,850 --> 00:13:24,060
run pip and install and it will install

00:13:22,470 --> 00:13:26,310
this stuff for them which is kind of

00:13:24,060 --> 00:13:27,870
cool but the really cool thing about bit

00:13:26,310 --> 00:13:30,360
files and pip ends is that it also

00:13:27,870 --> 00:13:32,700
creates these lock files so as part as

00:13:30,360 --> 00:13:34,680
well as storing this information the PIP

00:13:32,700 --> 00:13:36,930
file it also installs them it goes off

00:13:34,680 --> 00:13:38,880
to PI pi it says what versions of PI

00:13:36,930 --> 00:13:40,380
tests do you have that are greater or

00:13:38,880 --> 00:13:41,670
equal to three point seven and it found

00:13:40,380 --> 00:13:43,500
three point seven point two and

00:13:41,670 --> 00:13:45,840
installed it for us and an it stored

00:13:43,500 --> 00:13:48,150
that exact version in the lock file and

00:13:45,840 --> 00:13:50,640
you could commit this file to github

00:13:48,150 --> 00:13:52,680
when other people to get rather and then

00:13:50,640 --> 00:13:54,300
when other people are inst installing

00:13:52,680 --> 00:13:55,740
your projects using PIP and they will

00:13:54,300 --> 00:13:57,830
get exactly that version that you're

00:13:55,740 --> 00:13:59,700
using and then when you want to upgrade

00:13:57,830 --> 00:14:01,440
when there's a new version release

00:13:59,700 --> 00:14:04,260
that's compatible with your specifier

00:14:01,440 --> 00:14:06,090
you can run upgrade and it will update

00:14:04,260 --> 00:14:07,590
your lock file and install the newer

00:14:06,090 --> 00:14:09,030
version of PI test that's available so

00:14:07,590 --> 00:14:10,290
it can keep you up to date but you would

00:14:09,030 --> 00:14:14,400
only commit that after you've run your

00:14:10,290 --> 00:14:15,990
tests which kind of keeps you stable so

00:14:14,400 --> 00:14:17,700
now we have two dependency lists well we

00:14:15,990 --> 00:14:20,490
don't because this setup file doesn't

00:14:17,700 --> 00:14:24,420
have any dependencies but if we did it's

00:14:20,490 --> 00:14:27,270
for production dependencies like flask

00:14:24,420 --> 00:14:28,740
or click none PI pandas and the version

00:14:27,270 --> 00:14:30,270
should be as relaxed as possible because

00:14:28,740 --> 00:14:33,090
you don't want to force your users to

00:14:30,270 --> 00:14:34,590
use exactly the same version as you if

00:14:33,090 --> 00:14:35,910
you if your library can be compatible

00:14:34,590 --> 00:14:37,950
across multiple versions of your

00:14:35,910 --> 00:14:39,750
dependencies you should do that and then

00:14:37,950 --> 00:14:42,090
your user gets to use their favorite

00:14:39,750 --> 00:14:43,770
version of pandas and you're not locking

00:14:42,090 --> 00:14:46,500
them into a specific version so when you

00:14:43,770 --> 00:14:47,250
can do that you should pip files are

00:14:46,500 --> 00:14:49,620
slightly different

00:14:47,250 --> 00:14:51,440
although versus requirements files where

00:14:49,620 --> 00:14:54,180
you should be as specific as possible

00:14:51,440 --> 00:14:56,010
you can use the same version type

00:14:54,180 --> 00:14:57,930
versions of specifies in your pit file

00:14:56,010 --> 00:15:00,030
because it locks in the versions in the

00:14:57,930 --> 00:15:01,800
lock file as we just explained but this

00:15:00,030 --> 00:15:03,660
is for development requirements so it's

00:15:01,800 --> 00:15:06,600
the things other developers need to work

00:15:03,660 --> 00:15:08,130
on your code or run your tests so it's

00:15:06,600 --> 00:15:11,130
things like PI test and mock and

00:15:08,130 --> 00:15:12,740
coverage so now we have quite s

00:15:11,130 --> 00:15:14,610
installed we can write some tests

00:15:12,740 --> 00:15:15,870
anybody who's worked with ply test

00:15:14,610 --> 00:15:17,460
before will know how simple it is to

00:15:15,870 --> 00:15:19,080
write sort of simple tests and then it

00:15:17,460 --> 00:15:21,300
scales up nicely using fixtures and

00:15:19,080 --> 00:15:22,560
things like that so here's some tests

00:15:21,300 --> 00:15:24,420
that just test that the output of our

00:15:22,560 --> 00:15:26,820
function is what we expect and then we

00:15:24,420 --> 00:15:28,560
can run them just using PI tests the PI

00:15:26,820 --> 00:15:30,600
test commands and then it prints out

00:15:28,560 --> 00:15:32,430
some staffing ss2 to test

00:15:30,600 --> 00:15:35,399
passed in point zero two seconds that's

00:15:32,430 --> 00:15:36,630
all good and so now this is what our

00:15:35,399 --> 00:15:38,790
project looks like there's still not a

00:15:36,630 --> 00:15:43,079
huge amount of stuff there but it's

00:15:38,790 --> 00:15:44,250
gradually building up and now we have we

00:15:43,079 --> 00:15:46,319
can essentially publish nicely

00:15:44,250 --> 00:15:48,000
documented binary distributions now so

00:15:46,319 --> 00:15:49,319
that's good but the other type of

00:15:48,000 --> 00:15:51,180
distribution that sometimes gets

00:15:49,319 --> 00:15:52,800
overlooked is source distributions so

00:15:51,180 --> 00:15:55,529
for whatever reason when other people

00:15:52,800 --> 00:15:57,930
can't use get to pull things down or

00:15:55,529 --> 00:16:00,329
they can't access pi PI they may need to

00:15:57,930 --> 00:16:01,680
get a table all of your code that they

00:16:00,329 --> 00:16:03,389
need an audit and then stick into their

00:16:01,680 --> 00:16:06,300
own repository it's the way companies

00:16:03,389 --> 00:16:07,800
like Google and Facebook work so we we

00:16:06,300 --> 00:16:09,449
run this estadística man to create a

00:16:07,800 --> 00:16:11,399
table all containing all our source code

00:16:09,449 --> 00:16:13,319
really we want it to be everything

00:16:11,399 --> 00:16:15,810
that's in it so it's all the files that

00:16:13,319 --> 00:16:17,610
we're distributing via get normally so

00:16:15,810 --> 00:16:19,170
when we run s dist just as a side-effect

00:16:17,610 --> 00:16:20,819
here we it's telling us that there's

00:16:19,170 --> 00:16:22,529
some extra metadata it would like so it

00:16:20,819 --> 00:16:24,509
would like us to have a URL and some

00:16:22,529 --> 00:16:28,380
author information so we just open up

00:16:24,509 --> 00:16:29,970
our setup py file and add that in so

00:16:28,380 --> 00:16:31,560
yeah we've added the URL here's my

00:16:29,970 --> 00:16:33,480
github page if you had a documentation

00:16:31,560 --> 00:16:36,959
page that might be another option it's

00:16:33,480 --> 00:16:39,000
really down to personal choice and then

00:16:36,959 --> 00:16:41,189
we can just kind of test the Tarble by

00:16:39,000 --> 00:16:43,050
just listing the files that are inside

00:16:41,189 --> 00:16:44,519
it so when we look at it it's done a

00:16:43,050 --> 00:16:47,040
pretty good job we've got our setup

00:16:44,519 --> 00:16:48,420
Python set up py file we've got a source

00:16:47,040 --> 00:16:50,040
directory with all the stuff in there

00:16:48,420 --> 00:16:51,540
but we're missing a few things we're

00:16:50,040 --> 00:16:53,730
missing our license file missing our pet

00:16:51,540 --> 00:16:54,720
files we're missing our tests so that's

00:16:53,730 --> 00:16:57,540
not really a very good source

00:16:54,720 --> 00:16:59,819
distribution and where you fix this is

00:16:57,540 --> 00:17:01,649
by writing a manifesto I in file and

00:16:59,819 --> 00:17:03,360
this I'm not going to show you what this

00:17:01,649 --> 00:17:05,880
looks like but it's a file that kind of

00:17:03,360 --> 00:17:08,640
tells you what type of it matches

00:17:05,880 --> 00:17:10,890
certain file names file types and adds

00:17:08,640 --> 00:17:12,630
them to the list of stuff that goes in

00:17:10,890 --> 00:17:14,069
your source distribution and they're

00:17:12,630 --> 00:17:15,689
really they're slightly fiddly to write

00:17:14,069 --> 00:17:17,640
they're no fun and they're easy to get

00:17:15,689 --> 00:17:19,140
wrong and so instead I recommend using

00:17:17,640 --> 00:17:21,299
this tool called check manifest which is

00:17:19,140 --> 00:17:24,120
just amazing and what that does is it

00:17:21,299 --> 00:17:26,579
tries to create manifest rules that

00:17:24,120 --> 00:17:28,169
match what's in get what you've

00:17:26,579 --> 00:17:29,490
committed so it kind of matches the

00:17:28,169 --> 00:17:32,850
basic idea of what should go in a

00:17:29,490 --> 00:17:34,409
manifest so you install it like this you

00:17:32,850 --> 00:17:36,059
run check manifest to create and it will

00:17:34,409 --> 00:17:37,500
actually just store those rules away for

00:17:36,059 --> 00:17:39,090
you it's a great way to get started with

00:17:37,500 --> 00:17:41,130
a manifest file and then you add that

00:17:39,090 --> 00:17:42,910
manifest to get and then when you run

00:17:41,130 --> 00:17:44,350
your s dist command again and then

00:17:42,910 --> 00:17:45,850
Stout the contents of your table all we

00:17:44,350 --> 00:17:47,890
get things like the PIP file the pitfall

00:17:45,850 --> 00:17:49,870
lock but just to make sure before you

00:17:47,890 --> 00:17:51,370
run check manifest create you have

00:17:49,870 --> 00:17:55,480
committed the files to get because

00:17:51,370 --> 00:17:57,190
that's the point of check manifest so

00:17:55,480 --> 00:17:59,200
now we're really at the point where we

00:17:57,190 --> 00:18:03,430
can publish so let's get this thing on

00:17:59,200 --> 00:18:05,470
pi PI so here we run our setup command

00:18:03,430 --> 00:18:06,970
we tell it we want to run a we want to

00:18:05,470 --> 00:18:08,380
create the the wheel we want to create

00:18:06,970 --> 00:18:09,640
the source distribution and then

00:18:08,380 --> 00:18:11,140
afterwards we can just check that those

00:18:09,640 --> 00:18:13,750
have appeared in the dist folder so you

00:18:11,140 --> 00:18:16,630
can see we've got a wheel file and a GZ

00:18:13,750 --> 00:18:18,460
table all and then we want to push those

00:18:16,630 --> 00:18:21,250
two pi pi and it's really simple you go

00:18:18,460 --> 00:18:22,630
one two pi PI you create an account it

00:18:21,250 --> 00:18:25,900
will prompt you to create a username and

00:18:22,630 --> 00:18:28,840
a password and then we want to use twine

00:18:25,900 --> 00:18:30,220
to upload so there's the setup setup

00:18:28,840 --> 00:18:32,260
tools can automatically upload your

00:18:30,220 --> 00:18:34,330
stuff but you shouldn't use that command

00:18:32,260 --> 00:18:35,980
for various reasons one of which is that

00:18:34,330 --> 00:18:38,680
up until relatively recently it was

00:18:35,980 --> 00:18:40,240
insecure twine has always been insecure

00:18:38,680 --> 00:18:42,780
from the start it also separates

00:18:40,240 --> 00:18:45,100
building your Yodas at your

00:18:42,780 --> 00:18:46,840
distributions from uploading your

00:18:45,100 --> 00:18:49,060
distributions so you can build your

00:18:46,840 --> 00:18:50,320
table and check it rather than building

00:18:49,060 --> 00:18:51,040
and uploading it and hoping that you've

00:18:50,320 --> 00:18:53,590
got it all right

00:18:51,040 --> 00:18:54,940
so it's brilliant really easy to use

00:18:53,590 --> 00:18:56,980
once you've installed it you run twine

00:18:54,940 --> 00:18:58,390
upload and then give it a list of files

00:18:56,980 --> 00:18:59,830
that you want to upload so we're using a

00:18:58,390 --> 00:19:01,150
wild card on our dist folder we just

00:18:59,830 --> 00:19:03,550
want to upload everything that's in

00:19:01,150 --> 00:19:05,830
there and it prints out a bunch of stuff

00:19:03,550 --> 00:19:07,540
telling you it's uploaded and then you

00:19:05,830 --> 00:19:09,370
go to PI pi and they have a box there

00:19:07,540 --> 00:19:10,870
that says they've recently updated and

00:19:09,370 --> 00:19:13,060
hopefully you should be in that box if

00:19:10,870 --> 00:19:14,920
you're quick enough on the browser and

00:19:13,060 --> 00:19:16,330
here's our library so I've renamed it

00:19:14,920 --> 00:19:18,100
slightly because obviously somebody's

00:19:16,330 --> 00:19:20,830
already uploaded a package called hello

00:19:18,100 --> 00:19:22,330
world to PI pi so I've added my username

00:19:20,830 --> 00:19:25,270
to the end of that it tells you how to

00:19:22,330 --> 00:19:28,180
install it it's nicely formatted a

00:19:25,270 --> 00:19:29,350
markdown readme in the page down the

00:19:28,180 --> 00:19:31,720
bottom where you can't see there's a

00:19:29,350 --> 00:19:33,070
link to our github repo I mean it's

00:19:31,720 --> 00:19:38,800
pretty much what you expect to see with

00:19:33,070 --> 00:19:40,030
the published package so those are

00:19:38,800 --> 00:19:41,800
really the bare essentials

00:19:40,030 --> 00:19:43,720
for publishing a package we've got some

00:19:41,800 --> 00:19:45,550
tests and documentation we've published

00:19:43,720 --> 00:19:47,560
the package so that people can use it I

00:19:45,550 --> 00:19:50,590
would recommend doing a few other things

00:19:47,560 --> 00:19:51,970
but maybe you can publish first before

00:19:50,590 --> 00:19:53,590
moving on to the other stuff it's better

00:19:51,970 --> 00:19:54,850
to make stuff available than to perfect

00:19:53,590 --> 00:19:56,230
it if you're constantly trying to

00:19:54,850 --> 00:19:56,590
perfect it before releasing it

00:19:56,230 --> 00:19:59,440
you

00:19:56,590 --> 00:20:01,270
never release it so one of the things

00:19:59,440 --> 00:20:02,679
I'd like to fix next is that we should

00:20:01,270 --> 00:20:05,380
really test against different versions

00:20:02,679 --> 00:20:06,909
of Python and there's a tool called tox

00:20:05,380 --> 00:20:08,409
if people haven't used it heard of it

00:20:06,909 --> 00:20:10,570
before that does exactly that

00:20:08,409 --> 00:20:13,270
so a tox configuration can be really

00:20:10,570 --> 00:20:15,549
simple this one is fine for this current

00:20:13,270 --> 00:20:17,380
project so this is really three lines of

00:20:15,549 --> 00:20:18,760
configuration the first one says we want

00:20:17,380 --> 00:20:21,580
to test under Python three to three

00:20:18,760 --> 00:20:24,130
point six by three point seven and then

00:20:21,580 --> 00:20:26,049
we say our dependency is play test for

00:20:24,130 --> 00:20:28,210
running the tests and then we say to

00:20:26,049 --> 00:20:29,919
actually run the tests run run the PI

00:20:28,210 --> 00:20:31,870
test command that they just installed in

00:20:29,919 --> 00:20:33,789
the previous line and so what tox does

00:20:31,870 --> 00:20:35,529
is it creates a virtual environment that

00:20:33,789 --> 00:20:37,659
I've for three point six and three point

00:20:35,529 --> 00:20:39,789
seven in this case it installs your

00:20:37,659 --> 00:20:41,230
package into that environment and then

00:20:39,789 --> 00:20:42,909
it runs the command that you told it to

00:20:41,230 --> 00:20:45,850
run and assuming that runs with a zero

00:20:42,909 --> 00:20:48,610
exit code then then everything's fine so

00:20:45,850 --> 00:20:51,370
running it looks a bit like this so we

00:20:48,610 --> 00:20:53,140
just run the tox command and you can see

00:20:51,370 --> 00:20:54,789
that it's running under Python 3.6 and

00:20:53,140 --> 00:20:57,610
veneks running under the alpha version

00:20:54,789 --> 00:20:59,440
of python 3.7 and then further down

00:20:57,610 --> 00:21:01,179
assuming everything goes okay we get

00:20:59,440 --> 00:21:03,429
this nice light this nice summary saying

00:21:01,179 --> 00:21:05,380
come on succeeded come on succeeded and

00:21:03,429 --> 00:21:06,460
in if all the different virtual ends

00:21:05,380 --> 00:21:10,570
pass you get this nice congratulations

00:21:06,460 --> 00:21:11,860
line with a little smiley but one thing

00:21:10,570 --> 00:21:13,090
I wanted to highlight so I mentioned

00:21:11,860 --> 00:21:15,909
this earlier why we have a source

00:21:13,090 --> 00:21:18,190
directory there's that when tox runs

00:21:15,909 --> 00:21:19,720
your tests your your current working

00:21:18,190 --> 00:21:21,279
directory is actually that top-level

00:21:19,720 --> 00:21:22,330
directory the one the one that we're

00:21:21,279 --> 00:21:26,169
working and the one that contains our

00:21:22,330 --> 00:21:28,179
setup py and when you're running Python

00:21:26,169 --> 00:21:30,429
commands your current working directory

00:21:28,179 --> 00:21:31,809
is in your Python path it's the first

00:21:30,429 --> 00:21:33,610
thing in your Python path so if it's

00:21:31,809 --> 00:21:34,990
looking for a file called hello world py

00:21:33,610 --> 00:21:37,059
it will load that one in the top

00:21:34,990 --> 00:21:39,250
directory it won't load the one that was

00:21:37,059 --> 00:21:40,990
installed by your setup py so you can

00:21:39,250 --> 00:21:43,330
end up in situations where your your

00:21:40,990 --> 00:21:45,039
setup configuration is wrong it will

00:21:43,330 --> 00:21:46,990
work but like it's not copying the hello

00:21:45,039 --> 00:21:49,270
world file into your virtual ends but

00:21:46,990 --> 00:21:50,980
your tests will still all pass so this

00:21:49,270 --> 00:21:53,980
is why we have a source directory is to

00:21:50,980 --> 00:21:55,899
just move our code out of the in

00:21:53,980 --> 00:21:57,549
portable path unless it's specifically

00:21:55,899 --> 00:22:00,700
installed so again this is why we need

00:21:57,549 --> 00:22:04,780
to do run pip install minus e dot to

00:22:00,700 --> 00:22:06,970
install it just once but yeah it just

00:22:04,780 --> 00:22:07,789
stops us from accidentally importing the

00:22:06,970 --> 00:22:12,440
wrong copy

00:22:07,789 --> 00:22:13,639
hello world so that talks allows us to

00:22:12,440 --> 00:22:15,590
create these kind of contained

00:22:13,639 --> 00:22:18,139
environments on our machine and run

00:22:15,590 --> 00:22:20,899
tests inside them but and that's great

00:22:18,139 --> 00:22:23,659
but developer machines are messy things

00:22:20,899 --> 00:22:25,149
we have things in our path that maybe

00:22:23,659 --> 00:22:27,559
we're not using all the time we have

00:22:25,149 --> 00:22:29,330
environment variables set that could may

00:22:27,559 --> 00:22:31,580
may affect the running of your tests

00:22:29,330 --> 00:22:33,440
really what you want is a container or a

00:22:31,580 --> 00:22:35,779
virtual machine to run these tests for

00:22:33,440 --> 00:22:36,950
you and there's nice services like

00:22:35,779 --> 00:22:39,409
Travis if you've got an open source

00:22:36,950 --> 00:22:40,879
library will do this for you and all you

00:22:39,409 --> 00:22:44,169
need is a Travis configuration file that

00:22:40,879 --> 00:22:46,340
you push to github and this is all free

00:22:44,169 --> 00:22:47,720
so this is what a basic Travis

00:22:46,340 --> 00:22:49,970
configuration looks like we say it's a

00:22:47,720 --> 00:22:51,799
Python project we say we want to run it

00:22:49,970 --> 00:22:54,409
under Python 3.6 and the development

00:22:51,799 --> 00:22:55,970
version of Python 3.7 and then we tell

00:22:54,409 --> 00:22:57,590
it how to install our project which in

00:22:55,970 --> 00:22:59,359
this case is just pip install talks it

00:22:57,590 --> 00:23:03,229
will automatically install from our

00:22:59,359 --> 00:23:06,049
setup py as part of the whole kickoff

00:23:03,229 --> 00:23:07,489
before the tests and then it will run

00:23:06,049 --> 00:23:09,679
the script that you asked it to so in

00:23:07,489 --> 00:23:13,190
this case we asked it to run talks in a

00:23:09,679 --> 00:23:14,869
verbose mode with in the environment py

00:23:13,190 --> 00:23:17,389
this is something I only learned

00:23:14,869 --> 00:23:19,129
recently if you ask talks to run the pea

00:23:17,389 --> 00:23:20,809
white environment it will pick up

00:23:19,129 --> 00:23:23,239
whatever the sort of the available

00:23:20,809 --> 00:23:25,129
Python is so we're using the Python that

00:23:23,239 --> 00:23:26,570
Travis installed for us it creates a

00:23:25,129 --> 00:23:29,720
virtual end of that and then runs your

00:23:26,570 --> 00:23:32,809
tests inside it so every time we commit

00:23:29,720 --> 00:23:35,330
now Travis will pick it up create a

00:23:32,809 --> 00:23:37,580
couple of virtual machines and run our

00:23:35,330 --> 00:23:39,739
tests and then send us a message on

00:23:37,580 --> 00:23:41,690
github to say that our tests passed or

00:23:39,739 --> 00:23:42,889
failed which is kind of cool and it

00:23:41,690 --> 00:23:45,169
makes working with other developers

00:23:42,889 --> 00:23:47,179
easier it makes contributing easier

00:23:45,169 --> 00:23:48,710
because contributors can see sooner

00:23:47,179 --> 00:23:50,090
rather than without you even saying

00:23:48,710 --> 00:23:51,679
anything the contributors can see that

00:23:50,090 --> 00:23:53,659
their pull request doesn't pass the

00:23:51,679 --> 00:23:54,739
tests and that allows them to fix it

00:23:53,659 --> 00:23:57,619
before you ever need to go and have a

00:23:54,739 --> 00:23:58,429
look at it which is which is good so for

00:23:57,619 --> 00:24:00,259
extra credit

00:23:58,429 --> 00:24:01,789
there's other stuff you can do so we

00:24:00,259 --> 00:24:03,499
should add badges to the top of the

00:24:01,789 --> 00:24:05,809
readme to give people more confidence in

00:24:03,499 --> 00:24:07,549
the project a simple badge to add is

00:24:05,809 --> 00:24:09,349
often code coverage using one of these

00:24:07,549 --> 00:24:10,909
other services like coveralls and code

00:24:09,349 --> 00:24:13,820
Cavallaro and they all integrate really

00:24:10,909 --> 00:24:15,139
nicely with github we can add quality

00:24:13,820 --> 00:24:16,480
metrics where they essentially run

00:24:15,139 --> 00:24:18,470
linting on the code and tell you

00:24:16,480 --> 00:24:20,890
possible mistakes you've made or

00:24:18,470 --> 00:24:22,750
formatting errors and things like that

00:24:20,890 --> 00:24:24,190
bomp version is a really nice tool for

00:24:22,750 --> 00:24:26,890
managing your version numbers and it

00:24:24,190 --> 00:24:28,750
will automatically tag your commits to

00:24:26,890 --> 00:24:30,940
to tell github that essentially you're

00:24:28,750 --> 00:24:32,980
making a release you should test on

00:24:30,940 --> 00:24:35,169
different platforms you can write more

00:24:32,980 --> 00:24:38,650
documentation you can always write more

00:24:35,169 --> 00:24:40,150
documentation this is really a lot of

00:24:38,650 --> 00:24:42,490
work I mean I don't know if you noticed

00:24:40,150 --> 00:24:43,750
that and I've run through all this in

00:24:42,490 --> 00:24:44,980
half an hour I mean really if you're

00:24:43,750 --> 00:24:46,960
going through this in detail it takes

00:24:44,980 --> 00:24:48,789
quite a lot longer this is this is maybe

00:24:46,960 --> 00:24:50,590
a day or twos work to really kind of

00:24:48,789 --> 00:24:52,270
refine all this stuff so what I

00:24:50,590 --> 00:24:54,130
recommend is that you don't do any of

00:24:52,270 --> 00:24:57,039
this so this is like the biggest

00:24:54,130 --> 00:25:01,299
bait-and-switch I've ever done in a talk

00:24:57,039 --> 00:25:02,950
so so at least now you know why you do

00:25:01,299 --> 00:25:05,110
all these things or kind of how they all

00:25:02,950 --> 00:25:08,380
go together but it's this is the it's

00:25:05,110 --> 00:25:10,330
repetitive its error-prone and it's kind

00:25:08,380 --> 00:25:11,710
of boring you know what's really good at

00:25:10,330 --> 00:25:15,280
fixing problems that are repetitive

00:25:11,710 --> 00:25:17,620
boring and error-prone so tools on

00:25:15,280 --> 00:25:19,510
computers so in this case we've got code

00:25:17,620 --> 00:25:20,620
that writes code there's this awesome

00:25:19,510 --> 00:25:22,840
project you may have heard of called

00:25:20,620 --> 00:25:24,549
cookie cutter which is it runs through a

00:25:22,840 --> 00:25:26,350
template and sort of builds directories

00:25:24,549 --> 00:25:29,830
for the files and folders it can ask you

00:25:26,350 --> 00:25:32,320
a few simple questions to the customize

00:25:29,830 --> 00:25:33,909
the things that it's making for you and

00:25:32,320 --> 00:25:35,950
you've got templates for a whole bunch

00:25:33,909 --> 00:25:38,830
of things like ansible configuration and

00:25:35,950 --> 00:25:40,240
but among other things creating new

00:25:38,830 --> 00:25:42,390
Python projects which i think is what it

00:25:40,240 --> 00:25:44,980
was really designed for in the beginning

00:25:42,390 --> 00:25:47,409
so let's just for a moment pretend I

00:25:44,980 --> 00:25:48,850
didn't spend twenty five minutes telling

00:25:47,409 --> 00:25:51,159
you how to build a project project from

00:25:48,850 --> 00:25:53,260
scratch and instead we we use cookie

00:25:51,159 --> 00:25:56,110
cutter so the first thing to do is

00:25:53,260 --> 00:25:58,120
install cookie cutter and then we run

00:25:56,110 --> 00:25:59,679
cookie cutter and we give it the path to

00:25:58,120 --> 00:26:00,909
a specific template so in this case we

00:25:59,679 --> 00:26:03,250
haven't even downloaded the template

00:26:00,909 --> 00:26:04,990
upfront we're pointing it at a template

00:26:03,250 --> 00:26:07,570
called cookie cutter PI library which is

00:26:04,990 --> 00:26:09,580
maintained by a guy a vaguely no called

00:26:07,570 --> 00:26:10,809
Yunel and I'd love to pronounce his

00:26:09,580 --> 00:26:13,059
surname but it's got accent so I've

00:26:10,809 --> 00:26:16,360
never seen before in it so I'm not even

00:26:13,059 --> 00:26:18,870
going to attempt that he's also written

00:26:16,360 --> 00:26:21,429
a bunch of blog posts on good packaging

00:26:18,870 --> 00:26:23,650
practices and easy mistakes you can make

00:26:21,429 --> 00:26:25,770
when you're packaging so those will be

00:26:23,650 --> 00:26:29,590
up on my on the repo for this talk

00:26:25,770 --> 00:26:31,690
probably later on today or tomorrow so

00:26:29,590 --> 00:26:33,340
first asks you lots of questions it asks

00:26:31,690 --> 00:26:34,250
you lots and lots of questions because

00:26:33,340 --> 00:26:36,110
it's as well as

00:26:34,250 --> 00:26:38,720
giving you in court of a single pass

00:26:36,110 --> 00:26:40,670
through building a package this package

00:26:38,720 --> 00:26:41,870
it can work with pay tests it can work

00:26:40,670 --> 00:26:43,430
with knows it can work with the unit

00:26:41,870 --> 00:26:45,020
test and it once you wants to know which

00:26:43,430 --> 00:26:46,250
one of these things you want to work

00:26:45,020 --> 00:26:48,410
with all the time and a bunch of other

00:26:46,250 --> 00:26:49,520
services it can integrate with so ask

00:26:48,410 --> 00:26:50,900
you lots of questions but it's still

00:26:49,520 --> 00:26:53,300
quicker than writing those config files

00:26:50,900 --> 00:26:56,240
by hand and then once it's generated

00:26:53,300 --> 00:26:58,550
this folder full of files you copy in

00:26:56,240 --> 00:27:00,110
your own code and tests you'll need to

00:26:58,550 --> 00:27:02,630
make some minor file tweaks to the

00:27:00,110 --> 00:27:04,700
configuration has generated for you so

00:27:02,630 --> 00:27:05,960
to specify the versions of Python you

00:27:04,700 --> 00:27:09,290
want to test against and things like

00:27:05,960 --> 00:27:12,050
that and then you're done and the end

00:27:09,290 --> 00:27:13,670
result looks a bit like this and so when

00:27:12,050 --> 00:27:15,770
I last ran through this process this

00:27:13,670 --> 00:27:18,140
took me five minutes so it did take a

00:27:15,770 --> 00:27:19,190
little bit of manual configuration but

00:27:18,140 --> 00:27:20,540
it took me about five minutes from

00:27:19,190 --> 00:27:22,820
beginning to end and I could have pushed

00:27:20,540 --> 00:27:24,470
it to pipe the I if I'd wanted to so I

00:27:22,820 --> 00:27:25,880
could have cut this entire talk down to

00:27:24,470 --> 00:27:27,710
two slides in fact really this is a

00:27:25,880 --> 00:27:31,520
lightning talk that I just spent 30

00:27:27,710 --> 00:27:33,740
minutes giving so if I'd wanted instead

00:27:31,520 --> 00:27:36,290
of wasting all your time but hopefully

00:27:33,740 --> 00:27:38,810
this gives you a good overview of good

00:27:36,290 --> 00:27:40,940
packaging practice and encourages you to

00:27:38,810 --> 00:27:42,920
publish your own packages on pipey I it

00:27:40,940 --> 00:27:46,760
maybe understand what's going on under

00:27:42,920 --> 00:27:48,050
the hood so these slides and a bunch of

00:27:46,760 --> 00:27:50,210
supporting material and bunch of

00:27:48,050 --> 00:27:52,460
references will be up on github tomorrow

00:27:50,210 --> 00:27:53,900
probably I recommend you follow me on

00:27:52,460 --> 00:27:55,970
Twitter but that's because I like what I

00:27:53,900 --> 00:27:58,120
publish on Twitter and thank you very

00:27:55,970 --> 00:27:58,120
much

00:28:02,770 --> 00:28:06,710
we have a little gift for you thank you

00:28:04,790 --> 00:28:08,330
so much for speaking he's not gonna be

00:28:06,710 --> 00:28:09,230
taking questions at this time but you

00:28:08,330 --> 00:28:11,780
could probably talk to him out in the

00:28:09,230 --> 00:28:14,390
hall absolutely I'm around and the next

00:28:11,780 --> 00:28:17,020
talk here is going to be at 250 so in

00:28:14,390 --> 00:28:17,020

YouTube URL: https://www.youtube.com/watch?v=QgZ7qv4Cd0Y


