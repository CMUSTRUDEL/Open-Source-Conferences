Title: Write Perfect* Code First Time, Every Time
Publication date: 2018-08-26
Playlist: PyCon Australia 2018
Description: 
	Ishaan Varshney

https://2018.pycon-au.org/talks/45378-write-perfect-code-first-time-every-time/

Wouldn’t it be nice to know if the line you just wrote actually works? In this talk, we look at a Python development environment that is tuned for situations where one has to explore a new code base, learn a new framework or is a new-comer to the Python language.

*No code is perfect.

Python, PyCon, PyConAU, australia, programming, sydney

This video is licensed under CC BY 3.0 AU - https://creativecommons.org/licenses/by/3.0/au/

PyCon Australia (“PyCon AU”) is the national conference for the Python Programming Community, bringing together professional, student and enthusiast developers with a love for developing with Python.

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 24 - 28 2018.

Python, PyCon, PyConAU
Captions: 
	00:00:00,060 --> 00:00:06,089
good morning everyone my name's grant

00:00:02,970 --> 00:00:06,870
I'm going to be the session chair for

00:00:06,089 --> 00:00:08,429
next few sessions

00:00:06,870 --> 00:00:09,809
I just wanted to kick off by

00:00:08,429 --> 00:00:11,550
acknowledging the traditional custodians

00:00:09,809 --> 00:00:13,650
the land in which we meet today the

00:00:11,550 --> 00:00:15,150
gadigal people of the eora nation and

00:00:13,650 --> 00:00:19,289
pay my respects to their elders past

00:00:15,150 --> 00:00:22,020
present and future this morning the

00:00:19,289 --> 00:00:24,810
first session we've got a Jean to talk

00:00:22,020 --> 00:00:26,279
to us about writing perfect code which

00:00:24,810 --> 00:00:29,130
I've already heard a few people joking

00:00:26,279 --> 00:00:32,399
about is there such a thing one of the

00:00:29,130 --> 00:00:37,200
focal points of his talk is going to be

00:00:32,399 --> 00:00:39,239
the around vs code and I even when I was

00:00:37,200 --> 00:00:40,770
writing Microsoft applications I didn't

00:00:39,239 --> 00:00:43,290
use Microsoft products but I found

00:00:40,770 --> 00:00:45,690
myself using BS code more recently and

00:00:43,290 --> 00:00:47,210
it's a it's an interesting tool but I

00:00:45,690 --> 00:00:49,860
find that the some of the Python

00:00:47,210 --> 00:00:51,899
integrations are a little a pike and

00:00:49,860 --> 00:00:53,850
hard to wrap your head around

00:00:51,899 --> 00:00:56,250
in fact sometimes the only time I get

00:00:53,850 --> 00:00:57,660
them to come up is when I accidentally

00:00:56,250 --> 00:00:59,039
hit the key combination that gives me a

00:00:57,660 --> 00:01:00,660
terminal I don't know how it got there

00:00:59,039 --> 00:01:02,820
I'm so I'm really looking forward to

00:01:00,660 --> 00:01:04,379
today's talk to find out actually how I

00:01:02,820 --> 00:01:06,360
might use that more productively and

00:01:04,379 --> 00:01:09,260
constructively I so I'm going to hand

00:01:06,360 --> 00:01:13,950
over to Asia and and enjoy the talk

00:01:09,260 --> 00:01:21,090
thank you great welcome everyone let me

00:01:13,950 --> 00:01:26,939
just get my bearings sorry hello this

00:01:21,090 --> 00:01:29,790
talk is very live code heavy so I would

00:01:26,939 --> 00:01:32,670
like to I want the demagogues to look

00:01:29,790 --> 00:01:35,310
down on me for this and also

00:01:32,670 --> 00:01:37,340
interestingly out of the out of my four

00:01:35,310 --> 00:01:40,140
previous employees and the current one

00:01:37,340 --> 00:01:42,630
there's a representation of three of

00:01:40,140 --> 00:01:45,030
them so three out of four than here so I

00:01:42,630 --> 00:01:46,320
think that's you know I think it just

00:01:45,030 --> 00:01:50,399
shows that I'm very clean to Python

00:01:46,320 --> 00:01:52,799
maybe anyway so this is my talk mission

00:01:50,399 --> 00:01:54,750
work I work at being in and I apologize

00:01:52,799 --> 00:01:56,399
about the clickbait title I think I'm a

00:01:54,750 --> 00:01:57,930
more appropriate title would probably be

00:01:56,399 --> 00:02:01,829
watch this talk and we'll make you a

00:01:57,930 --> 00:02:04,890
math genius or maybe code this way and

00:02:01,829 --> 00:02:07,170
you look 10 years younger or how to take

00:02:04,890 --> 00:02:09,360
your code private at $420 funding

00:02:07,170 --> 00:02:13,550
secured and there's no caveat to that

00:02:09,360 --> 00:02:16,790
funding is secure so

00:02:13,550 --> 00:02:19,790
I only have two goals for this talk and

00:02:16,790 --> 00:02:21,140
the hope is that you go away with tools

00:02:19,790 --> 00:02:24,200
that hopefully increase your code

00:02:21,140 --> 00:02:29,390
quality and decrease the time taken to

00:02:24,200 --> 00:02:31,250
code also so before I get to the crux of

00:02:29,390 --> 00:02:34,400
it I'd like to provide some context I

00:02:31,250 --> 00:02:37,190
also read sapience last year and if you

00:02:34,400 --> 00:02:39,110
know anyone who's read sapience you

00:02:37,190 --> 00:02:41,450
think everything is part of you know

00:02:39,110 --> 00:02:43,910
human evolution and you know we're all

00:02:41,450 --> 00:02:46,240
sort of like that the book is

00:02:43,910 --> 00:02:50,150
essentially one giant Soviet Russia

00:02:46,240 --> 00:02:52,610
Prussia me is like we didn't domesticate

00:02:50,150 --> 00:02:56,780
wheat wheat domesticated us that's the

00:02:52,610 --> 00:02:59,720
sort of main theme of the book so Homo

00:02:56,780 --> 00:03:02,170
sapiens our history has been plagued

00:02:59,720 --> 00:03:05,210
with a constant battle to procure food

00:03:02,170 --> 00:03:07,040
searching was a large part of it and

00:03:05,210 --> 00:03:08,960
then once you found it you had to do

00:03:07,040 --> 00:03:10,940
some mechanical work and you know grab

00:03:08,960 --> 00:03:13,700
it and also run away from danger like

00:03:10,940 --> 00:03:15,130
Triceratops every now and then and then

00:03:13,700 --> 00:03:18,410
a few hundred thousand years later

00:03:15,130 --> 00:03:21,080
depending on who you what dairy

00:03:18,410 --> 00:03:23,360
subscribe to we domesticated we found

00:03:21,080 --> 00:03:25,489
wheat and imperiled agricultural

00:03:23,360 --> 00:03:27,140
revolution which meant that now we

00:03:25,489 --> 00:03:30,980
didn't have to search so much it was

00:03:27,140 --> 00:03:32,600
mainly about you plant the food and then

00:03:30,980 --> 00:03:36,020
you water it you harvest it so it's very

00:03:32,600 --> 00:03:37,730
mechanical so you know it was good in

00:03:36,020 --> 00:03:40,310
some ways because you didn't have to

00:03:37,730 --> 00:03:42,290
search so much that was less effort but

00:03:40,310 --> 00:03:44,690
you know population soared as a result

00:03:42,290 --> 00:03:47,030
because you needed people to work on the

00:03:44,690 --> 00:03:48,500
farms and you know that's sort of

00:03:47,030 --> 00:03:49,459
backfired because then there was a

00:03:48,500 --> 00:03:54,010
drought and you had this whole big

00:03:49,459 --> 00:03:56,780
population and there was no food so food

00:03:54,010 --> 00:03:59,480
came by easier so you know increasing

00:03:56,780 --> 00:04:01,910
productivity and then a few thousand

00:03:59,480 --> 00:04:04,430
years later we got the tractor so now to

00:04:01,910 --> 00:04:07,670
get food you just had to you know do

00:04:04,430 --> 00:04:10,190
some donuts in in this thing and you

00:04:07,670 --> 00:04:12,010
would basically you know get some food

00:04:10,190 --> 00:04:14,030
so that was an increase in productivity

00:04:12,010 --> 00:04:15,530
and you know but you still need to do

00:04:14,030 --> 00:04:18,290
some like mental math maybe solve

00:04:15,530 --> 00:04:20,989
Traveling Salesman kind of to see how

00:04:18,290 --> 00:04:23,080
you can hit all the farms you know with

00:04:20,989 --> 00:04:25,700
the least amount of distance travel and

00:04:23,080 --> 00:04:26,810
then we got this and

00:04:25,700 --> 00:04:28,280
you know you didn't have to worry about

00:04:26,810 --> 00:04:32,120
trailing salesmen anymore that's sold

00:04:28,280 --> 00:04:34,430
right so over think you think he stuff

00:04:32,120 --> 00:04:36,290
was handled by this and now you're

00:04:34,430 --> 00:04:38,030
really productive so all you had to do

00:04:36,290 --> 00:04:41,150
was you know punch a few holes in this

00:04:38,030 --> 00:04:44,570
thing and you could get some food and

00:04:41,150 --> 00:04:47,900
then you know so I was I was looking for

00:04:44,570 --> 00:04:50,330
an image of how they did spreadsheets

00:04:47,900 --> 00:04:52,370
before computer spreadsheets were a

00:04:50,330 --> 00:04:55,370
thing so that the description is they

00:04:52,370 --> 00:04:57,470
essentially use pen and pencil to write

00:04:55,370 --> 00:04:59,900
a whole spreadsheet by hand and if

00:04:57,470 --> 00:05:02,210
anything changed get to rub rub out the

00:04:59,900 --> 00:05:06,050
relevant cells and do it again

00:05:02,210 --> 00:05:07,430
and then so you know we spreadsheets are

00:05:06,050 --> 00:05:09,590
great use case let's develop software

00:05:07,430 --> 00:05:11,990
for that and now you can you know just

00:05:09,590 --> 00:05:13,910
type a few buttons in and you can buy

00:05:11,990 --> 00:05:20,360
some celery at the end of the day so

00:05:13,910 --> 00:05:22,370
we're super productive now right bit so

00:05:20,360 --> 00:05:25,850
programming is a very cerebral very

00:05:22,370 --> 00:05:31,760
high-level you know thinking activity

00:05:25,850 --> 00:05:34,810
it's not very mechanical is it so can I

00:05:31,760 --> 00:05:37,400
have a show of hands if anyone has ever

00:05:34,810 --> 00:05:39,860
once in their program and create type ok

00:05:37,400 --> 00:05:42,800
so that's most of the room 10% of people

00:05:39,860 --> 00:05:48,470
haven't you're probably good friends are

00:05:42,800 --> 00:05:51,320
Jeff Dean then and I would have like

00:05:48,470 --> 00:05:56,470
Jason Street except that he uses Python

00:05:51,320 --> 00:05:58,700
to in his tweets in 2018 so a shame so

00:05:56,470 --> 00:06:02,360
with Python there's two ways you can run

00:05:58,700 --> 00:06:04,760
code one way is this edit compile run

00:06:02,360 --> 00:06:07,430
debug mode which essentially is your

00:06:04,760 --> 00:06:09,620
standard way of running Python is you

00:06:07,430 --> 00:06:12,880
write a script and then you go Python

00:06:09,620 --> 00:06:17,180
and then the name the script so you've

00:06:12,880 --> 00:06:18,950
written up some script compiled it run

00:06:17,180 --> 00:06:21,560
you find out that nothing works in the

00:06:18,950 --> 00:06:23,750
debugger and on the other end you have

00:06:21,560 --> 00:06:26,720
what's also known as interactive mode

00:06:23,750 --> 00:06:29,660
for Python and that's it's essentially a

00:06:26,720 --> 00:06:31,850
loop of read evaluate print so you'll

00:06:29,660 --> 00:06:34,130
type something it'll evaluate it it will

00:06:31,850 --> 00:06:37,570
print the result and then you move on no

00:06:34,130 --> 00:06:39,390
one really codes using the second method

00:06:37,570 --> 00:06:40,740
but it's just good

00:06:39,390 --> 00:06:44,970
for doing quick things like if you want

00:06:40,740 --> 00:06:49,380
to do some math so what if you merge the

00:06:44,970 --> 00:06:51,300
two what if we could read evaluate edit

00:06:49,380 --> 00:06:54,780
and then loop so maybe a real or a

00:06:51,300 --> 00:06:59,270
ripple and that is what I want to show

00:06:54,780 --> 00:07:03,750
you so now for the live to live demo bit

00:06:59,270 --> 00:07:08,460
so here we have a script and I just want

00:07:03,750 --> 00:07:10,230
to spend a few minutes I don't spend a

00:07:08,460 --> 00:07:13,170
few minutes just sort of familiarizing

00:07:10,230 --> 00:07:16,200
at us with BS code so this is Visual

00:07:13,170 --> 00:07:19,800
Studio code by Microsoft and here we

00:07:16,200 --> 00:07:22,590
have a few windows and let's just fire

00:07:19,800 --> 00:07:25,470
up and see what happens so this thing

00:07:22,590 --> 00:07:30,210
here is a breakpoint and what's happened

00:07:25,470 --> 00:07:30,810
so far is we have executed in main so we

00:07:30,210 --> 00:07:32,310
came here

00:07:30,810 --> 00:07:33,810
this is execute and this is the called

00:07:32,310 --> 00:07:35,580
stack so some of you would be familiar

00:07:33,810 --> 00:07:37,680
with the call stack when you call a

00:07:35,580 --> 00:07:39,840
function it pop it adds it on to the

00:07:37,680 --> 00:07:41,940
stack and you sort of keep going and as

00:07:39,840 --> 00:07:43,260
you return from functions you pop up you

00:07:41,940 --> 00:07:46,640
popped off the stack so we went into

00:07:43,260 --> 00:07:51,270
Maine and in Maine we came into here and

00:07:46,640 --> 00:07:54,420
after that we're in this function here

00:07:51,270 --> 00:07:56,490
first three letters so now you can also

00:07:54,420 --> 00:07:58,230
so this I'll just go over some features

00:07:56,490 --> 00:08:00,390
that you come across so if you hover

00:07:58,230 --> 00:08:02,880
over you can see all the variables

00:08:00,390 --> 00:08:06,900
nicely and that makes it all you know

00:08:02,880 --> 00:08:12,570
very visible so now if we wanted to try

00:08:06,900 --> 00:08:16,010
out so we just want to return the first

00:08:12,570 --> 00:08:22,890
three letters of each item in that list

00:08:16,010 --> 00:08:27,450
so if I were a if I was new to Python I

00:08:22,890 --> 00:08:29,130
may try something like this just I just

00:08:27,450 --> 00:08:30,690
want to try I'm not sure whether this

00:08:29,130 --> 00:08:34,200
would work or not and when I type it

00:08:30,690 --> 00:08:36,060
says fruits not defined because you

00:08:34,200 --> 00:08:39,210
would think oh okay I thought fruits was

00:08:36,060 --> 00:08:42,180
was defined but you realize that oh it's

00:08:39,210 --> 00:08:45,050
not defined in the scope so then one

00:08:42,180 --> 00:08:45,050
might go and try

00:08:48,470 --> 00:08:53,370
items and here's one of the things that

00:08:51,510 --> 00:08:55,829
Python is sometimes you're not sure

00:08:53,370 --> 00:08:57,959
whether this would grab the first three

00:08:55,829 --> 00:08:59,610
is it inclusive exclusive and I blame

00:08:57,959 --> 00:09:01,890
Rand for this because the brand is

00:08:59,610 --> 00:09:03,870
inclusive and everything else isn't and

00:09:01,890 --> 00:09:05,880
then you go okay so that's - I think I'm

00:09:03,870 --> 00:09:09,079
getting closer and then you might

00:09:05,880 --> 00:09:09,079
finally try something like this

00:09:18,990 --> 00:09:23,670
and then okay that's that's exactly what

00:09:21,839 --> 00:09:28,279
I want then what you can do is now that

00:09:23,670 --> 00:09:31,850
you've tried it out you can simply just

00:09:28,279 --> 00:09:34,080
return that and then execute it again

00:09:31,850 --> 00:09:38,760
and it will break again and then you can

00:09:34,080 --> 00:09:42,180
just hit continue oh and this is one of

00:09:38,760 --> 00:09:44,010
the things this is a issue with vs code

00:09:42,180 --> 00:09:44,670
is if there's list if there's list

00:09:44,010 --> 00:09:46,200
comprehension

00:09:44,670 --> 00:09:50,459
it will keep breaking on that and there

00:09:46,200 --> 00:09:53,610
you go so this allowed me to try out

00:09:50,459 --> 00:09:57,050
whatever I wanted to see and then add it

00:09:53,610 --> 00:10:01,920
to the script and then execute it so

00:09:57,050 --> 00:10:03,450
another way this comes in handy is the

00:10:01,920 --> 00:10:06,690
break point so I've been working with

00:10:03,450 --> 00:10:09,570
graphs a fair bit at my current job it'd

00:10:06,690 --> 00:10:12,660
be n so you know if you want to look at

00:10:09,570 --> 00:10:15,420
social networks or well what we're

00:10:12,660 --> 00:10:18,600
looking at spatial networks you often

00:10:15,420 --> 00:10:20,580
use the network X library so one thing

00:10:18,600 --> 00:10:22,200
that has really been helpful in

00:10:20,580 --> 00:10:29,190
understanding a lot of complex

00:10:22,200 --> 00:10:30,839
mathematical mathematical equations and

00:10:29,190 --> 00:10:32,940
sides of side of things as well as the

00:10:30,839 --> 00:10:34,500
implementation of them is being able to

00:10:32,940 --> 00:10:39,209
step through it so what I've done is I

00:10:34,500 --> 00:10:42,959
stepped in to the network X library for

00:10:39,209 --> 00:10:46,520
betweenness centrality and there I am

00:10:42,959 --> 00:10:49,020
able to essentially see how between this

00:10:46,520 --> 00:10:51,120
centrality is calculated as per network

00:10:49,020 --> 00:10:52,820
X's implementation and this can be very

00:10:51,120 --> 00:10:55,170
powerful especially if you're using

00:10:52,820 --> 00:10:57,959
things in sci-fi so if you're understand

00:10:55,170 --> 00:10:59,310
Syfy's version of linear regression you

00:10:57,959 --> 00:11:01,890
can just step through the code and

00:10:59,310 --> 00:11:03,420
understand understand what blooney

00:11:01,890 --> 00:11:04,980
aggression is from a code point of view

00:11:03,420 --> 00:11:06,540
and that's and that can be very powerful

00:11:04,980 --> 00:11:08,640
because then linear regression isn't

00:11:06,540 --> 00:11:11,670
this idea that oh it's that you're

00:11:08,640 --> 00:11:13,410
minimizing this the sum of squared

00:11:11,670 --> 00:11:15,270
differences it's actually a real code

00:11:13,410 --> 00:11:20,250
where you can see how it's being

00:11:15,270 --> 00:11:23,520
calculated so that's very handy and the

00:11:20,250 --> 00:11:25,800
other killer use case for me is when

00:11:23,520 --> 00:11:27,900
using it with flask so all you really

00:11:25,800 --> 00:11:32,060
have to do is kind of have the skeleton

00:11:27,900 --> 00:11:32,060
of a flask running

00:11:35,880 --> 00:11:39,180
that's interesting

00:11:43,620 --> 00:11:50,690
oh it's sort of lodge here oh this is

00:11:54,260 --> 00:11:58,410
okay

00:11:56,150 --> 00:12:03,300
so what's interesting is like when you

00:11:58,410 --> 00:12:06,840
zoom up this much you can't see what

00:12:03,300 --> 00:12:08,490
fuzzy met so if you zoom out enough and

00:12:06,840 --> 00:12:12,090
I apologize you can pick your

00:12:08,490 --> 00:12:13,890
interpreter as well and I have the

00:12:12,090 --> 00:12:15,600
virtual environment selector at the

00:12:13,890 --> 00:12:17,010
moment so that's that's also handy and

00:12:15,600 --> 00:12:19,170
it'll come to that that's sort of part

00:12:17,010 --> 00:12:25,520
of the setup cost of this thing okay so

00:12:19,170 --> 00:12:25,520
now we're running and if I were to kill

00:12:29,480 --> 00:12:35,040
German also let's open a terminal

00:12:32,390 --> 00:12:37,080
so let's curl put five thousand I have a

00:12:35,040 --> 00:12:40,230
breakpoint set on on the get page and

00:12:37,080 --> 00:12:42,750
Here I am so return at the moment is

00:12:40,230 --> 00:12:51,690
none and I would really I would just

00:12:42,750 --> 00:12:55,020
like to return something so why don't

00:12:51,690 --> 00:12:57,420
when we return type icon EIU so

00:12:55,020 --> 00:12:59,490
currently ret is still not and this is

00:12:57,420 --> 00:13:02,190
the way this is where I think BS code is

00:12:59,490 --> 00:13:05,550
more powerful than all the other methods

00:13:02,190 --> 00:13:10,520
of working this way is because is that

00:13:05,550 --> 00:13:13,260
you can actually execute that line there

00:13:10,520 --> 00:13:15,260
so that even though it says none now if

00:13:13,260 --> 00:13:18,690
I was to refresh it this is one of the

00:13:15,260 --> 00:13:29,340
shortcomings is that if I let that run

00:13:18,690 --> 00:13:31,470
through it should yeah alright since in

00:13:29,340 --> 00:13:33,210
the terminal so it returns hello hi

00:13:31,470 --> 00:13:35,490
Connie are you so I was able to just

00:13:33,210 --> 00:13:38,250
execute things inside the debug console

00:13:35,490 --> 00:13:40,620
and let it run through and you you get

00:13:38,250 --> 00:13:42,840
the result that you wanted as if as if

00:13:40,620 --> 00:13:44,760
you actually wrote that wrote that in

00:13:42,840 --> 00:13:48,240
the script starting out and then you can

00:13:44,760 --> 00:13:50,880
also do some some more advanced stuff

00:13:48,240 --> 00:13:53,850
like if you wanted to so this is the

00:13:50,880 --> 00:13:57,300
common use case for me is that you would

00:13:53,850 --> 00:14:01,290
want to say consume some API or

00:13:57,300 --> 00:14:06,240
see see what it returns is let's say if

00:14:01,290 --> 00:14:09,390
we post this so it's a post request with

00:14:06,240 --> 00:14:15,600
username to the port that we're running

00:14:09,390 --> 00:14:20,730
on so here we are and let's say if that

00:14:15,600 --> 00:14:22,700
was ok maybe not so what what the nice

00:14:20,730 --> 00:14:29,279
thing about that is we're able to

00:14:22,700 --> 00:14:32,220
actually so we've broken in here and we

00:14:29,279 --> 00:14:33,390
can inspect the objects that we have

00:14:32,220 --> 00:14:35,519
inside here so flask has a thing called

00:14:33,390 --> 00:14:37,320
requests some of you may be aware of it

00:14:35,519 --> 00:14:39,990
and you know generally if you were to

00:14:37,320 --> 00:14:42,510
use PDB you would have to type in derp

00:14:39,990 --> 00:14:44,310
and the object that you want to look and

00:14:42,510 --> 00:14:48,269
you can see all the methods on that on

00:14:44,310 --> 00:14:49,649
that object this way you go okay if I'm

00:14:48,269 --> 00:14:51,540
interested in Jason I think there's a

00:14:49,649 --> 00:14:54,540
this adjacent field let me confirm that

00:14:51,540 --> 00:15:01,380
so we go oh there is a Jason thing so I

00:14:54,540 --> 00:15:03,630
can further explore this and this way so

00:15:01,380 --> 00:15:05,940
ok so that there there is Jason and that

00:15:03,630 --> 00:15:11,220
way you know I can type in oh this is

00:15:05,940 --> 00:15:11,880
login detected and return them and in

00:15:11,220 --> 00:15:13,740
the terminal

00:15:11,880 --> 00:15:15,839
exercise they're logging detective so

00:15:13,740 --> 00:15:17,490
this is a really powerful way to work

00:15:15,839 --> 00:15:19,230
because all we have to do is just set

00:15:17,490 --> 00:15:21,240
the skeleton add a few breakpoints and

00:15:19,230 --> 00:15:23,670
then write the code that you want to

00:15:21,240 --> 00:15:25,079
write and it's also especially useful if

00:15:23,670 --> 00:15:27,630
you want to do test-driven development

00:15:25,079 --> 00:15:29,070
you just write your tests and let your

00:15:27,630 --> 00:15:30,779
tests call the code that you want to

00:15:29,070 --> 00:15:33,779
write and then what we have to just

00:15:30,779 --> 00:15:35,370
break in there and get a version of the

00:15:33,779 --> 00:15:37,890
code out there that passes their tests

00:15:35,370 --> 00:15:44,730
and that can really decrease your time

00:15:37,890 --> 00:15:45,600
to go I think that's all I want too oh

00:15:44,730 --> 00:15:47,579
and also

00:15:45,600 --> 00:15:52,470
so the ok so here's one more thing I'll

00:15:47,579 --> 00:15:53,910
show you let's take that out for now you

00:15:52,470 --> 00:15:56,550
also have the thing called conditional

00:15:53,910 --> 00:15:59,550
breakpoints so you can right-click and

00:15:56,550 --> 00:16:02,670
add a conditional breakpoint and the

00:15:59,550 --> 00:16:05,459
condition I have at the moment is if a

00:16:02,670 --> 00:16:07,980
is greater than 5 so this will only

00:16:05,459 --> 00:16:11,300
break when a is very fine this is

00:16:07,980 --> 00:16:15,420
classic Fibonacci so

00:16:11,300 --> 00:16:16,860
when this turn to a it's only then

00:16:15,420 --> 00:16:19,200
because it's greater than five it's only

00:16:16,860 --> 00:16:20,640
then to that breakpoint right so this

00:16:19,200 --> 00:16:22,920
can be very powerful if you want to look

00:16:20,640 --> 00:16:25,500
at specific use cases when you know if

00:16:22,920 --> 00:16:27,930
your if your code only breaks at certain

00:16:25,500 --> 00:16:32,220
points you can you can inspect what's

00:16:27,930 --> 00:16:33,330
going on when when that condition is

00:16:32,220 --> 00:16:35,570
satisfied so I think that's another

00:16:33,330 --> 00:16:38,550
powerful thing and I believe it's only

00:16:35,570 --> 00:16:40,920
in BS code but please correct me if I'm

00:16:38,550 --> 00:16:44,400
wrong in the Q&A time okay so that was

00:16:40,920 --> 00:16:46,290
the demo so use cases this is really

00:16:44,400 --> 00:16:51,300
useful when you're dealing with legacy

00:16:46,290 --> 00:16:52,920
code bases and it's also so just when he

00:16:51,300 --> 00:16:55,170
likes to code base because you might not

00:16:52,920 --> 00:16:59,010
know exactly what the intention of the

00:16:55,170 --> 00:17:00,600
author was hence its legacy and this

00:16:59,010 --> 00:17:02,310
allows you really quick way to explore

00:17:00,600 --> 00:17:05,730
what's happening and be able to make

00:17:02,310 --> 00:17:08,070
changes and do what if cases to see okay

00:17:05,730 --> 00:17:13,500
if I change this how does it change the

00:17:08,070 --> 00:17:15,720
output and so the other main use case

00:17:13,500 --> 00:17:18,420
for this I found is when you're using it

00:17:15,720 --> 00:17:24,180
to teach newcomers to Python and

00:17:18,420 --> 00:17:26,280
programming for this because so I like

00:17:24,180 --> 00:17:28,500
to to course for design students and

00:17:26,280 --> 00:17:33,030
banana who's in the audience we gave a

00:17:28,500 --> 00:17:35,280
talk about this on Friday is those so

00:17:33,030 --> 00:17:37,500
students who aren't necessarily coming

00:17:35,280 --> 00:17:40,530
from stem backgrounds or you know have

00:17:37,500 --> 00:17:42,420
this sort of maybe an innate way of

00:17:40,530 --> 00:17:44,700
looking at or there at least I'm used to

00:17:42,420 --> 00:17:46,860
dealing things and dealing with things

00:17:44,700 --> 00:17:48,900
in the abstract this allows a visual

00:17:46,860 --> 00:17:50,850
method of being able to program so you

00:17:48,900 --> 00:17:53,010
know how we saw that if we just hovered

00:17:50,850 --> 00:17:55,140
over a variable you could see the value

00:17:53,010 --> 00:17:57,540
of it at that point and on the left you

00:17:55,140 --> 00:18:00,210
could see all the variables and their

00:17:57,540 --> 00:18:02,010
values so that's very powerful when

00:18:00,210 --> 00:18:04,110
you're new to Python because then you

00:18:02,010 --> 00:18:06,630
have this ability to change things on

00:18:04,110 --> 00:18:10,040
the go and see how that corresponds with

00:18:06,630 --> 00:18:12,750
the output and that's very powerful

00:18:10,040 --> 00:18:15,540
so what allows us to do to do this and

00:18:12,750 --> 00:18:19,710
it's it's a little bit to me it's a

00:18:15,540 --> 00:18:22,650
little bit black magic so it's so vs

00:18:19,710 --> 00:18:23,440
code uses this library called PTSD and

00:18:22,650 --> 00:18:24,580
it's

00:18:23,440 --> 00:18:27,669
unfortunate because it sounds like

00:18:24,580 --> 00:18:30,809
something you'd get off someone else but

00:18:27,669 --> 00:18:33,519
it's it's it uses a very interesting

00:18:30,809 --> 00:18:35,279
client-server model so there's a there's

00:18:33,519 --> 00:18:40,990
a little Python interpreter that's

00:18:35,279 --> 00:18:43,659
specific to Microsoft and it sends the

00:18:40,990 --> 00:18:47,409
server whatever is being executed and it

00:18:43,659 --> 00:18:51,190
returns back the corresponding actions

00:18:47,409 --> 00:18:54,250
so I think that's where the I I wasn't

00:18:51,190 --> 00:18:57,820
able to do too much of a deep dive into

00:18:54,250 --> 00:19:01,450
what the code looks like but it's um

00:18:57,820 --> 00:19:03,159
it's a it's a thing unto itself and it

00:19:01,450 --> 00:19:04,899
was also part of a visual studios

00:19:03,159 --> 00:19:07,480
Community Edition that's where I sort of

00:19:04,899 --> 00:19:09,279
got was introduced to this way of

00:19:07,480 --> 00:19:11,139
programming and then when BS card came

00:19:09,279 --> 00:19:14,460
out it was just a lot more powerful lot

00:19:11,139 --> 00:19:16,990
more self-contained and I said downside

00:19:14,460 --> 00:19:18,279
set up costs and this is this is the

00:19:16,990 --> 00:19:21,220
main barrier because I think it's an

00:19:18,279 --> 00:19:23,590
excellent way to teach programming using

00:19:21,220 --> 00:19:27,220
this kind of interface but you need to

00:19:23,590 --> 00:19:30,279
be aware of essentially where your where

00:19:27,220 --> 00:19:32,919
your Python installed which interpreter

00:19:30,279 --> 00:19:34,750
you're targeting and as sort of grant

00:19:32,919 --> 00:19:37,299
mentioned that there's a lot of just

00:19:34,750 --> 00:19:39,009
random things that occur so if you for

00:19:37,299 --> 00:19:41,710
example execute with command and enter

00:19:39,009 --> 00:19:43,750
by accident in your debug in your debug

00:19:41,710 --> 00:19:45,850
console it'll fire up the terminal and

00:19:43,750 --> 00:19:48,190
with Python there's a lot of weird

00:19:45,850 --> 00:19:50,730
things like that that will catch you if

00:19:48,190 --> 00:19:52,899
you're not aware of that underlying

00:19:50,730 --> 00:19:55,750
underlying sort of architecture that it

00:19:52,899 --> 00:19:57,669
sits on so unfortunately there's still a

00:19:55,750 --> 00:19:58,179
fair bit of setup costs in getting this

00:19:57,669 --> 00:20:00,100
working

00:19:58,179 --> 00:20:04,059
there's also performance penalty and

00:20:00,100 --> 00:20:08,370
that's primarily because of the the

00:20:04,059 --> 00:20:12,220
server client model and it often it

00:20:08,370 --> 00:20:15,730
often makes it not so good when you're

00:20:12,220 --> 00:20:18,100
dealing with very sort of intense or

00:20:15,730 --> 00:20:21,759
long-running processes for example

00:20:18,100 --> 00:20:25,419
traveling salesmen if your if your bug

00:20:21,759 --> 00:20:27,820
if your bug occurs after a bunch of say

00:20:25,419 --> 00:20:32,590
double nested loops it just takes a

00:20:27,820 --> 00:20:35,470
while to get there and also not all

00:20:32,590 --> 00:20:36,490
features supported so if you were to go

00:20:35,470 --> 00:20:39,370
off and

00:20:36,490 --> 00:20:41,530
try a list comprehension in the debug

00:20:39,370 --> 00:20:44,230
console sometimes it doesn't recognize

00:20:41,530 --> 00:20:45,810
that the thing you're iterating over is

00:20:44,230 --> 00:20:49,390
defined

00:20:45,810 --> 00:20:51,880
okay so that was vs code I just wanted

00:20:49,390 --> 00:20:56,320
to quickly talk about some non vs code

00:20:51,880 --> 00:20:58,770
options mainly PDB good old PDB and you

00:20:56,320 --> 00:21:01,510
know this a lot of you may be aware of

00:20:58,770 --> 00:21:05,620
this line that you had to type in which

00:21:01,510 --> 00:21:07,650
is gone now thankfully because every

00:21:05,620 --> 00:21:11,770
time I had to do it you have to google

00:21:07,650 --> 00:21:13,630
that command again so in Python 3.7 that

00:21:11,770 --> 00:21:15,460
that line has been replaced by

00:21:13,630 --> 00:21:17,440
breakpoint so all you have to do is type

00:21:15,460 --> 00:21:23,020
in breakpoint if using 3.7 and does the

00:21:17,440 --> 00:21:30,490
exact same thing it's so with our

00:21:23,020 --> 00:21:33,250
previous example if I were to run that

00:21:30,490 --> 00:21:36,010
it breaks right there and there you can

00:21:33,250 --> 00:21:37,420
list so this is just after that break

00:21:36,010 --> 00:21:40,360
point so you can see where it's broken

00:21:37,420 --> 00:21:42,730
and it's a couple of things I just

00:21:40,360 --> 00:21:45,490
wanted to show here while we here so you

00:21:42,730 --> 00:21:54,250
can somewhat replicate you can somewhat

00:21:45,490 --> 00:21:56,710
replicate the functionality here so what

00:21:54,250 --> 00:22:02,110
I've done there is I've said display a

00:21:56,710 --> 00:22:05,080
so print whenever 8 has changed so if we

00:22:02,110 --> 00:22:07,750
were to continue stepping through so a

00:22:05,080 --> 00:22:10,030
has been updated to 1 and you get a nice

00:22:07,750 --> 00:22:11,410
little output output then that can be

00:22:10,030 --> 00:22:14,020
very handy when you're debugging things

00:22:11,410 --> 00:22:16,410
another thing so one of the limitations

00:22:14,020 --> 00:22:18,580
with PDB is that you can't do multi-line

00:22:16,410 --> 00:22:21,340
statements because whenever you hit

00:22:18,580 --> 00:22:26,320
Enter it sort of doesn't work so another

00:22:21,340 --> 00:22:28,360
alternative is you can do interact so

00:22:26,320 --> 00:22:31,450
when you type in interact it creates a

00:22:28,360 --> 00:22:34,240
Python interpreter or in interactive

00:22:31,450 --> 00:22:37,270
mode down there and there you can go off

00:22:34,240 --> 00:22:40,090
and make changes so but one of the short

00:22:37,270 --> 00:22:42,400
shortcomings is that if you make any

00:22:40,090 --> 00:22:45,610
updates to variables they don't carry

00:22:42,400 --> 00:22:49,350
over when you quit quit out so there's a

00:22:45,610 --> 00:22:49,350
it's a little bit of getting used to

00:22:51,510 --> 00:22:56,350
because all the alternatives out there

00:22:53,410 --> 00:22:58,540
that you can use when I gave a version

00:22:56,350 --> 00:23:00,400
of this talk at Syfy someone came up and

00:22:58,540 --> 00:23:03,790
said you can use spider and spider

00:23:00,400 --> 00:23:07,270
believe comes bundled in the Windows

00:23:03,790 --> 00:23:08,470
version of Python so that's handy and

00:23:07,270 --> 00:23:10,720
when I throw experimented with it

00:23:08,470 --> 00:23:13,030
briefly I don't think you can do

00:23:10,720 --> 00:23:15,910
multi-line statements in the deep in the

00:23:13,030 --> 00:23:16,330
debug console which you can do with vs

00:23:15,910 --> 00:23:19,210
code

00:23:16,330 --> 00:23:21,340
there's also PyCharm and I think that's

00:23:19,210 --> 00:23:23,710
great it's in my experience a little bit

00:23:21,340 --> 00:23:26,799
bulky and a little bit expensive as I'm

00:23:23,710 --> 00:23:28,330
not free and similarly with comodo oh

00:23:26,799 --> 00:23:30,760
you have to pay for that but I believe

00:23:28,330 --> 00:23:34,600
you can do the same thing there so in

00:23:30,760 --> 00:23:36,880
summary they exist methods that allow

00:23:34,600 --> 00:23:38,799
you to logically step through code so

00:23:36,880 --> 00:23:40,450
you don't necessarily need to litter

00:23:38,799 --> 00:23:42,460
your code with print statements and then

00:23:40,450 --> 00:23:44,860
take them out

00:23:42,460 --> 00:23:46,270
Python lends itself well to exploratory

00:23:44,860 --> 00:23:48,220
programming which is the idea that you

00:23:46,270 --> 00:23:49,480
break at a certain point you don't

00:23:48,220 --> 00:23:50,919
exactly know how you gonna solve it so

00:23:49,480 --> 00:23:53,290
you try out several methods you

00:23:50,919 --> 00:23:56,410
experiment rapidly and just keep things

00:23:53,290 --> 00:23:59,260
that work and also that history plays a

00:23:56,410 --> 00:24:01,210
big role in how we do things and that's

00:23:59,260 --> 00:24:04,270
primarily I think the reason why we're

00:24:01,210 --> 00:24:05,830
still stuck in using this method of

00:24:04,270 --> 00:24:08,260
programming which is just you type a

00:24:05,830 --> 00:24:10,450
script you run it you see doesn't work

00:24:08,260 --> 00:24:12,250
then you go back and type it again and

00:24:10,450 --> 00:24:13,919
you know it's sort of everywhere like

00:24:12,250 --> 00:24:16,540
the reason we have broadsheets

00:24:13,919 --> 00:24:19,960
broadsheet newspapers today is because

00:24:16,540 --> 00:24:23,080
in 1712 some some government decided

00:24:19,960 --> 00:24:24,700
that there's gonna be a tax per page for

00:24:23,080 --> 00:24:26,830
newspapers so they said okay well why

00:24:24,700 --> 00:24:28,360
don't we just increase the size of the

00:24:26,830 --> 00:24:31,390
pages so I think we need to be aware of

00:24:28,360 --> 00:24:35,130
that so we can be free from those free

00:24:31,390 --> 00:24:35,130
from the historical baggage thank you

00:24:40,830 --> 00:24:45,640
excellent so it shines happy to take

00:24:43,000 --> 00:24:49,570
questions at the moment so in comments

00:24:45,640 --> 00:24:51,250
panels end comments or all of that I may

00:24:49,570 --> 00:24:53,770
break things if we get a little off

00:24:51,250 --> 00:24:55,000
track so we'll see how we go but I'm

00:24:53,770 --> 00:24:57,010
sure we'll be fine

00:24:55,000 --> 00:24:58,360
we've got a little bit more than five

00:24:57,010 --> 00:25:01,840
minutes to do that so we've got a little

00:24:58,360 --> 00:25:03,910
bit of time we've got one question just

00:25:01,840 --> 00:25:06,480
if you can wait for me to bring the mic

00:25:03,910 --> 00:25:08,890
that'd be great

00:25:06,480 --> 00:25:13,270
hey thanks for your talk and I also

00:25:08,890 --> 00:25:14,740
really love to talk on Friday in our

00:25:13,270 --> 00:25:17,860
development environment we use a virtual

00:25:14,740 --> 00:25:21,730
machine for our Python to run our Python

00:25:17,860 --> 00:25:24,010
would I be able to connect the vs code

00:25:21,730 --> 00:25:25,720
debugger into the virtual machine you

00:25:24,010 --> 00:25:27,840
mentioned there's a client-server model

00:25:25,720 --> 00:25:29,620
do you know anything about that right

00:25:27,840 --> 00:25:35,470
that's a good question

00:25:29,620 --> 00:25:38,190
so I think you can run PT VSD if I'm

00:25:35,470 --> 00:25:40,990
saying that correctly by itself and

00:25:38,190 --> 00:25:45,160
because what what actually happens is it

00:25:40,990 --> 00:25:47,350
runs that process PTSD PTV SD and the

00:25:45,160 --> 00:25:49,680
electron is another process which then

00:25:47,350 --> 00:25:53,050
talks to that process using sort of

00:25:49,680 --> 00:25:54,490
local network interface so I'm pretty

00:25:53,050 --> 00:25:59,410
sure you could do that if you expose it

00:25:54,490 --> 00:26:02,700
on your VM it'd be interesting if you

00:25:59,410 --> 00:26:05,500
could just you have run your vs code

00:26:02,700 --> 00:26:06,970
side and configure it such that it talks

00:26:05,500 --> 00:26:13,170
to that specific port I'm pretty sure

00:26:06,970 --> 00:26:13,170
it's possible did I see one over here

00:26:17,920 --> 00:26:22,430
hi-yah thanks for the talk in Visual

00:26:20,930 --> 00:26:24,590
Studio code there if you search for

00:26:22,430 --> 00:26:26,780
Python there are literally dozens or

00:26:24,590 --> 00:26:28,640
maybe even hundreds of Python plugins is

00:26:26,780 --> 00:26:30,020
it just the Microsoft plug-in that

00:26:28,640 --> 00:26:32,390
you've installed or is there more that

00:26:30,020 --> 00:26:35,720
you need to install to get working so

00:26:32,390 --> 00:26:37,130
this is just the mic so previously this

00:26:35,720 --> 00:26:38,900
was someone someone's open-source

00:26:37,130 --> 00:26:40,190
project which was then absorbed by

00:26:38,900 --> 00:26:42,110
Microsoft

00:26:40,190 --> 00:26:43,640
I wish I remember that person's name

00:26:42,110 --> 00:26:45,050
shout out to them because I think it's a

00:26:43,640 --> 00:26:47,210
great library and they were then hired

00:26:45,050 --> 00:26:49,640
by Microsoft to maintain this this

00:26:47,210 --> 00:26:53,150
extension so what what you see there is

00:26:49,640 --> 00:26:54,590
just the Microsoft sort of Python

00:26:53,150 --> 00:27:01,030
extension it comes with everything

00:26:54,590 --> 00:27:01,030
including other questions yeah

00:27:02,330 --> 00:27:05,870
thanks for the talking to me for

00:27:04,250 --> 00:27:07,460
somebody who's need to be escort to you

00:27:05,870 --> 00:27:09,200
show us how to how do you setup that

00:27:07,460 --> 00:27:11,360
layout and is it all comes up when you

00:27:09,200 --> 00:27:12,640
lower Python or do you need to set these

00:27:11,360 --> 00:27:18,160
things up thank you

00:27:12,640 --> 00:27:20,660
sure so the main process is really just

00:27:18,160 --> 00:27:22,580
installing the extension and there's a

00:27:20,660 --> 00:27:26,080
extension thing you just type in Python

00:27:22,580 --> 00:27:31,040
and you install it and from there on

00:27:26,080 --> 00:27:36,140
it's the if if your setup is quite

00:27:31,040 --> 00:27:38,000
standard by just by just sort of adding

00:27:36,140 --> 00:27:41,480
the configuration and typing in Python

00:27:38,000 --> 00:27:45,890
it should work for 80% of cases having

00:27:41,480 --> 00:27:47,570
taught having done this with the code

00:27:45,890 --> 00:27:49,610
romatic find the design computing

00:27:47,570 --> 00:27:51,830
students it basically worked most of the

00:27:49,610 --> 00:27:53,870
time except maybe like 10 percent of the

00:27:51,830 --> 00:27:55,220
time when someone you know check didn't

00:27:53,870 --> 00:27:56,720
have python in their path though it

00:27:55,220 --> 00:27:58,790
wasn't in the right place that's when it

00:27:56,720 --> 00:28:00,230
broke but if you if you have a standard

00:27:58,790 --> 00:28:03,760
environment it should all just work out

00:28:00,230 --> 00:28:03,760
of the box of the default configurations

00:28:04,870 --> 00:28:11,460
other questions

00:28:07,440 --> 00:28:13,590
I have one I'm just really quickly one

00:28:11,460 --> 00:28:15,510
of the things around vs codon and Python

00:28:13,590 --> 00:28:17,220
that I found as I mentioned the

00:28:15,510 --> 00:28:19,350
beginning is it's very hard to find

00:28:17,220 --> 00:28:21,690
really good solid tutorials on how to

00:28:19,350 --> 00:28:23,340
set up the environment because if you do

00:28:21,690 --> 00:28:25,200
have I did have a non-standard

00:28:23,340 --> 00:28:27,240
environment right now this was working

00:28:25,200 --> 00:28:30,930
for me do you have any kind of go-to

00:28:27,240 --> 00:28:32,940
resources or you know good blogs that

00:28:30,930 --> 00:28:36,480
you would recommend that's a good

00:28:32,940 --> 00:28:39,540
question I found there's quite a few

00:28:36,480 --> 00:28:41,880
videos service codes taken over is the

00:28:39,540 --> 00:28:45,350
most popular editor as per stack

00:28:41,880 --> 00:28:48,210
overflows latest developer so survey and

00:28:45,350 --> 00:28:50,010
in my experience there's a few good

00:28:48,210 --> 00:28:52,530
videos that allow you to set it up with

00:28:50,010 --> 00:28:55,680
the standard environment for the

00:28:52,530 --> 00:28:58,110
non-standard environments it's really I

00:28:55,680 --> 00:29:01,470
think about just understanding that

00:28:58,110 --> 00:29:05,310
configuration file and just knowing

00:29:01,470 --> 00:29:07,110
which what means what essentially and

00:29:05,310 --> 00:29:09,600
the documentation has improved

00:29:07,110 --> 00:29:11,640
significantly for vs code especially

00:29:09,600 --> 00:29:14,510
when it was absorbed by Microsoft so I

00:29:11,640 --> 00:29:17,820
think it's probably your best bet is the

00:29:14,510 --> 00:29:23,400
documentation for this anything further

00:29:17,820 --> 00:29:25,230
from you guys no great like to thank a

00:29:23,400 --> 00:29:29,869
Sean again and have you done

00:29:25,230 --> 00:29:29,869

YouTube URL: https://www.youtube.com/watch?v=nopZ7ydl55k


