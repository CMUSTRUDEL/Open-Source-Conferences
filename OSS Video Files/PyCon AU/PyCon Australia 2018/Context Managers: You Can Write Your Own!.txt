Title: Context Managers: You Can Write Your Own!
Publication date: 2018-08-25
Playlist: PyCon Australia 2018
Description: 
	Daniel Porteous

https://2018.pycon-au.org/talks/45062-context-managers-you-can-write-your-own/

Did you know context managers go beyond `with open('myfile.txt', 'r') as f`? In fact, you can even write your own! Context managers are an amazing tool for managing resources safely. They make your code look great, and they're now easier to write than ever thanks to contextlib! Come get contextual!

Python, PyCon, PyConAU, australia, programming, sydney

This video is licensed under CC BY 3.0 AU ‹https://creativecommons.org/licenses/by/3.0/au/›.

PyCon Australia (“PyCon AU”) is the national conference for the Python Programming Community, bringing together professional, student and enthusiast developers with a love for developing with Python.

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 24 - 28 2018.

Python, PyCon, PyConAU
Captions: 
	00:00:00,770 --> 00:00:07,290
okay we're ready to get started with the

00:00:03,600 --> 00:00:09,840
second talk of the session we have

00:00:07,290 --> 00:00:11,219
Daniel Porteous who's originally from

00:00:09,840 --> 00:00:13,259
Melbourne but currently living in

00:00:11,219 --> 00:00:23,340
Silicon Valley to teach us how to make

00:00:13,259 --> 00:00:26,789
context Pantages I thank you everyone

00:00:23,340 --> 00:00:29,910
see I'm Daniel just a bit about myself

00:00:26,789 --> 00:00:32,160
to start off with so I'm a production

00:00:29,910 --> 00:00:33,390
engineer at Facebook I'm from Townsville

00:00:32,160 --> 00:00:36,030
but I've lived in Melbourne for

00:00:33,390 --> 00:00:39,180
University these days I live in the Bay

00:00:36,030 --> 00:00:40,680
Area California so I always found talks

00:00:39,180 --> 00:00:43,649
on core Python features to be my

00:00:40,680 --> 00:00:45,210
personal favorite so I'm super excited

00:00:43,649 --> 00:00:46,710
to be giving my first talk at a

00:00:45,210 --> 00:00:50,610
conference about one of my favorite

00:00:46,710 --> 00:00:52,199
Python features context managers for the

00:00:50,610 --> 00:00:54,629
sake of accessibility you can download

00:00:52,199 --> 00:00:58,530
the slides using the link in the corner

00:00:54,629 --> 00:01:00,510
all code is in text and whatever images

00:00:58,530 --> 00:01:01,079
I have have alt text on them if you

00:01:00,510 --> 00:01:04,830
can't see it

00:01:01,079 --> 00:01:07,439
deport dot me slash Python dot PDF I

00:01:04,830 --> 00:01:10,020
know that sounds like deport me which I

00:01:07,439 --> 00:01:12,710
didn't intend to do because I'm a huge

00:01:10,020 --> 00:01:15,479
nerd I was reading it as a deport me

00:01:12,710 --> 00:01:17,930
anyway I hope no one in America takes

00:01:15,479 --> 00:01:20,640
this too literally

00:01:17,930 --> 00:01:26,580
but I do have a subdomain called don't

00:01:20,640 --> 00:01:27,689
so so thank you by the way this is

00:01:26,580 --> 00:01:30,869
because this is my first talk I

00:01:27,689 --> 00:01:32,759
appreciate that you laugh at my jokes so

00:01:30,869 --> 00:01:34,680
this is the agenda for today so we'll

00:01:32,759 --> 00:01:36,380
start with context managers the what

00:01:34,680 --> 00:01:38,939
they are and why we should use them

00:01:36,380 --> 00:01:42,240
we'll look at some coral examples of

00:01:38,939 --> 00:01:44,490
context managers in like Python standard

00:01:42,240 --> 00:01:46,710
libraries we'll look at the hard way to

00:01:44,490 --> 00:01:49,409
write them ourselves before moving on to

00:01:46,710 --> 00:01:51,540
the easy way and what that entails and

00:01:49,409 --> 00:01:54,090
then we'll look at some best practices

00:01:51,540 --> 00:01:55,680
gotchas and a few other things so this

00:01:54,090 --> 00:01:57,930
is going to start out pretty simple and

00:01:55,680 --> 00:01:59,549
then end up covering sort of everything

00:01:57,930 --> 00:02:02,909
there is to cover about context managers

00:01:59,549 --> 00:02:05,399
so it's okay if you get lost all my code

00:02:02,909 --> 00:02:07,860
snippets are up in my github the context

00:02:05,399 --> 00:02:09,420
manager dogs are also excellent and I'll

00:02:07,860 --> 00:02:12,900
summarize the key takeaways at the end

00:02:09,420 --> 00:02:13,890
so just hold on tight and please be nice

00:02:12,900 --> 00:02:17,230
to me

00:02:13,890 --> 00:02:19,180
okay so lots of people I talk to don't

00:02:17,230 --> 00:02:21,010
know what context managers are by name

00:02:19,180 --> 00:02:23,500
but pretty much everyone has used them

00:02:21,010 --> 00:02:25,090
it's sort of an instance of like some

00:02:23,500 --> 00:02:26,950
fancy nomenclature for something that

00:02:25,090 --> 00:02:28,360
you see every day there'll be a bit of

00:02:26,950 --> 00:02:30,550
that throughout the talk so I'll do my

00:02:28,360 --> 00:02:32,739
best to break down fancy sounding things

00:02:30,550 --> 00:02:34,959
into simple terms because that's how I

00:02:32,739 --> 00:02:37,840
learn things and I'm sure you'll

00:02:34,959 --> 00:02:40,810
appreciate it so what are they

00:02:37,840 --> 00:02:44,170
anytime you see the word with maybe

00:02:40,810 --> 00:02:46,180
accompanied by an as you're looking at a

00:02:44,170 --> 00:02:47,620
context manager so let's look at the

00:02:46,180 --> 00:02:49,569
classic example like everyone's

00:02:47,620 --> 00:02:52,690
introduction into context managers

00:02:49,569 --> 00:02:54,970
opening a file so this is a simple

00:02:52,690 --> 00:02:56,860
example it opens a file for you and

00:02:54,970 --> 00:03:00,420
gives you a handle to that file F as

00:02:56,860 --> 00:03:04,510
some sort of reference after exiting

00:03:00,420 --> 00:03:06,160
that block F is closed and like read and

00:03:04,510 --> 00:03:09,130
write operations to that handle will

00:03:06,160 --> 00:03:13,420
fail so context managers manage your

00:03:09,130 --> 00:03:15,640
context in this case a file there's

00:03:13,420 --> 00:03:20,440
extra context on this that we'll come

00:03:15,640 --> 00:03:21,609
back to later yeah terrible so in case

00:03:20,440 --> 00:03:24,070
it wasn't already plain let's look at

00:03:21,609 --> 00:03:26,200
why we should use context managers so

00:03:24,070 --> 00:03:28,600
for starters you can't forget to close

00:03:26,200 --> 00:03:31,390
resources that I think was pretty clear

00:03:28,600 --> 00:03:32,980
just from the last example they can make

00:03:31,390 --> 00:03:34,750
your code much prettier I know that's

00:03:32,980 --> 00:03:36,910
very subjective especially if you if the

00:03:34,750 --> 00:03:39,459
last talk which was all about art and

00:03:36,910 --> 00:03:42,310
stuff but I think they do more

00:03:39,459 --> 00:03:44,769
concretely you can very clearly visually

00:03:42,310 --> 00:03:48,190
see the lifetime of a resource within

00:03:44,769 --> 00:03:51,209
your code they can make more complex

00:03:48,190 --> 00:03:53,560
logic simpler which we'll look at later

00:03:51,209 --> 00:03:55,090
like any other functional class they're

00:03:53,560 --> 00:03:56,500
like these nice little bundles of

00:03:55,090 --> 00:03:58,319
abstraction that you can just use

00:03:56,500 --> 00:04:01,600
without understanding what's inside them

00:03:58,319 --> 00:04:03,609
so you can just sort of grab on use it

00:04:01,600 --> 00:04:04,150
without really having to understand how

00:04:03,609 --> 00:04:06,430
they work

00:04:04,150 --> 00:04:08,889
which I think increases how easy it is

00:04:06,430 --> 00:04:10,180
to understand in your codebase and it

00:04:08,889 --> 00:04:13,000
can like increase quality without too

00:04:10,180 --> 00:04:17,139
much effort and what which will sort of

00:04:13,000 --> 00:04:19,239
get you so and to reference Python

00:04:17,139 --> 00:04:21,160
here's import this which I think other

00:04:19,239 --> 00:04:23,440
people have done today oh no Liam

00:04:21,160 --> 00:04:27,310
Calloway did that this morning he

00:04:23,440 --> 00:04:29,350
referenced import this this morning

00:04:27,310 --> 00:04:33,910
so in my humble opinion context manages

00:04:29,350 --> 00:04:35,350
to tick those boxes so let's look at our

00:04:33,910 --> 00:04:38,770
first example of a context manager

00:04:35,350 --> 00:04:40,600
that's in coop - so this currently does

00:04:38,770 --> 00:04:43,600
not use a context manager we have a

00:04:40,600 --> 00:04:46,389
function called kill process it takes in

00:04:43,600 --> 00:04:50,110
a process ID and it will try to kill it

00:04:46,389 --> 00:04:52,060
with a sig kill as the signal if the

00:04:50,110 --> 00:04:53,500
process can't be found we just do

00:04:52,060 --> 00:04:57,340
nothing we're like okay cool the process

00:04:53,500 --> 00:04:58,840
is already gone no worries so in my

00:04:57,340 --> 00:05:00,820
opinion that's a pretty verbose way to

00:04:58,840 --> 00:05:03,460
just say do nothing like accept this

00:05:00,820 --> 00:05:04,030
error do nothing so let's look at the

00:05:03,460 --> 00:05:06,940
next slide

00:05:04,030 --> 00:05:09,340
so inside context Lib there's this

00:05:06,940 --> 00:05:10,750
context manager called suppress contact

00:05:09,340 --> 00:05:12,419
slip has all kinds of goodies in it I

00:05:10,750 --> 00:05:15,580
highly recommend you check out the docs

00:05:12,419 --> 00:05:18,700
it's all kinds of fun stuff surpress was

00:05:15,580 --> 00:05:20,590
only added in 3.6 3.7 has this really

00:05:18,700 --> 00:05:24,930
good context manager that does nothing

00:05:20,590 --> 00:05:29,440
which is actually surprisingly useful so

00:05:24,930 --> 00:05:32,110
so check it out and here's the same

00:05:29,440 --> 00:05:34,090
example using suppress so what we do is

00:05:32,110 --> 00:05:36,010
we pass an exception in to suppress or a

00:05:34,090 --> 00:05:38,020
list of exceptions and then if that

00:05:36,010 --> 00:05:40,290
exception is raised within the block we

00:05:38,020 --> 00:05:43,210
just ignore it and keep chugging along

00:05:40,290 --> 00:05:45,070
very terse very efficient to fuel lines

00:05:43,210 --> 00:05:46,750
right so like you're really maximizing

00:05:45,070 --> 00:05:50,590
the amount of code you can fit on a

00:05:46,750 --> 00:05:51,970
screen cool and here's the old one just

00:05:50,590 --> 00:05:55,630
for reference so you can sort of see the

00:05:51,970 --> 00:05:59,400
difference give me a second just

00:05:55,630 --> 00:05:59,400
consider how great that example just was

00:06:00,090 --> 00:06:06,430
ok so we'll move on to something else so

00:06:03,780 --> 00:06:09,370
for starters what is thread pool

00:06:06,430 --> 00:06:10,750
executors for all you Python to folk out

00:06:09,370 --> 00:06:13,419
there this is a replacement of

00:06:10,750 --> 00:06:14,500
multi-processing pool thread pool it's

00:06:13,419 --> 00:06:16,120
pretty much just something that gives

00:06:14,500 --> 00:06:18,280
you a big bunch of threads and you can

00:06:16,120 --> 00:06:20,440
submit jobs to them and do stuff like

00:06:18,280 --> 00:06:22,930
that so what's happening in this code I

00:06:20,440 --> 00:06:25,030
make myself a pool and then I've got

00:06:22,930 --> 00:06:28,810
this dictionary of items I submit jobs

00:06:25,030 --> 00:06:30,669
to the pool and it'll be my funk which

00:06:28,810 --> 00:06:32,680
is just some random function and then

00:06:30,669 --> 00:06:34,000
these three arguments and then I could

00:06:32,680 --> 00:06:35,830
do something like wait on the results or

00:06:34,000 --> 00:06:40,240
whatever and then I'll shut down the

00:06:35,830 --> 00:06:40,840
pool so notice that we manually create

00:06:40,240 --> 00:06:42,669
the pool

00:06:40,840 --> 00:06:44,650
and then we have to manually shut it

00:06:42,669 --> 00:06:46,360
down right so this is clearly bad

00:06:44,650 --> 00:06:49,930
because you know that because I told you

00:06:46,360 --> 00:06:51,760
in the comments up there and what's this

00:06:49,930 --> 00:06:53,830
it's the good version so you can see

00:06:51,760 --> 00:06:55,479
that firstly it's shorter and secondly

00:06:53,830 --> 00:06:58,180
we're using our thread pool as a context

00:06:55,479 --> 00:07:00,310
manager so we go with thread pool as

00:06:58,180 --> 00:07:02,590
pull we do all the stuff that we want to

00:07:00,310 --> 00:07:04,600
do with it and then once we exit that

00:07:02,590 --> 00:07:07,260
lock it will automatically get shut down

00:07:04,600 --> 00:07:09,280
and all that good stuff will happen

00:07:07,260 --> 00:07:12,130
obviously you can just say okay well

00:07:09,280 --> 00:07:13,450
just don't forget to close it but this

00:07:12,130 --> 00:07:13,810
is the kind of thing that happens all

00:07:13,450 --> 00:07:15,610
the time

00:07:13,810 --> 00:07:18,010
not to mention sometimes you can have

00:07:15,610 --> 00:07:19,150
different exits from like your functions

00:07:18,010 --> 00:07:21,669
so you might forget to do it in a

00:07:19,150 --> 00:07:24,190
particular place so this is clearly like

00:07:21,669 --> 00:07:27,220
a nice way to do it but you say that

00:07:24,190 --> 00:07:30,430
when it exits things will happen what is

00:07:27,220 --> 00:07:31,720
an exit method we'll find out shortly so

00:07:30,430 --> 00:07:33,400
if I was just to run this code just to

00:07:31,720 --> 00:07:37,270
give you a quick example to make a more

00:07:33,400 --> 00:07:39,400
complete sorry I've got a like sort of

00:07:37,270 --> 00:07:42,400
cramp the code in to fit my agenda in

00:07:39,400 --> 00:07:44,530
and then a function like this which is

00:07:42,400 --> 00:07:48,310
like nanny's adjective we would get

00:07:44,530 --> 00:07:53,680
output like this right and yes so I'm

00:07:48,310 --> 00:07:55,060
pushing my message anyway sorry just as

00:07:53,680 --> 00:07:56,530
a fun little aside notice that it's out

00:07:55,060 --> 00:07:58,720
of order because of threading and stuff

00:07:56,530 --> 00:07:59,919
and not because of dictionaries because

00:07:58,720 --> 00:08:01,479
dictionaries are actually ordered in

00:07:59,919 --> 00:08:03,190
three-point-six I know that's like a

00:08:01,479 --> 00:08:07,479
little tangent but just fun pipe and

00:08:03,190 --> 00:08:08,919
stuff so now let's look at how to write

00:08:07,479 --> 00:08:12,340
your own context managers yeah that's

00:08:08,919 --> 00:08:14,229
why we're here right so let's look at

00:08:12,340 --> 00:08:15,789
our very own context manager so what

00:08:14,229 --> 00:08:16,229
does a context manager look like under

00:08:15,789 --> 00:08:18,820
the hood

00:08:16,229 --> 00:08:21,340
formally a context manager is any class

00:08:18,820 --> 00:08:22,900
with a dunder exit and a dunder sorry

00:08:21,340 --> 00:08:26,380
done to enter and the done to exit

00:08:22,900 --> 00:08:27,520
method you have to define both from now

00:08:26,380 --> 00:08:28,810
on I'm gonna just call them enter and

00:08:27,520 --> 00:08:30,580
exit methods to save myself the

00:08:28,810 --> 00:08:33,400
syllables so because we're all about

00:08:30,580 --> 00:08:34,839
efficiency here your init method is

00:08:33,400 --> 00:08:38,529
optional just sort of just like with any

00:08:34,839 --> 00:08:40,270
other class when you enter the block

00:08:38,529 --> 00:08:42,610
enter will be cold and when you exit the

00:08:40,270 --> 00:08:44,529
book exit will be cold if you feel

00:08:42,610 --> 00:08:45,940
Miglia with unit testing which I hope

00:08:44,529 --> 00:08:50,890
you all are because what writing tests

00:08:45,940 --> 00:08:53,770
right enter an X right enter an Exeter I

00:08:50,890 --> 00:08:56,030
want to when he said yes

00:08:53,770 --> 00:08:57,320
enter an exit I like ideologically

00:08:56,030 --> 00:08:59,690
similar to sort of like a setup and

00:08:57,320 --> 00:09:01,910
teardown method so what would this

00:08:59,690 --> 00:09:04,940
output look like it's pretty

00:09:01,910 --> 00:09:07,910
straightforward I hope you enter inside

00:09:04,940 --> 00:09:09,560
the block and then exit as you would

00:09:07,910 --> 00:09:11,060
expect so

00:09:09,560 --> 00:09:14,090
this context manager doesn't really

00:09:11,060 --> 00:09:15,560
manage a resource per se which goes to

00:09:14,090 --> 00:09:17,690
show the context managers can be used

00:09:15,560 --> 00:09:19,100
for a bunch of things really anytime you

00:09:17,690 --> 00:09:21,650
want to do something before and after a

00:09:19,100 --> 00:09:23,630
particular discrete event this is a good

00:09:21,650 --> 00:09:26,810
way to go you'll notice that in this

00:09:23,630 --> 00:09:29,660
example that there's no as keyword so

00:09:26,810 --> 00:09:33,790
let's go see how that works so we've got

00:09:29,660 --> 00:09:40,190
by the way as a neat as it gets right

00:09:33,790 --> 00:09:43,310
thank you so in this slide we're looking

00:09:40,190 --> 00:09:44,930
at how to get things after the as before

00:09:43,310 --> 00:09:47,120
going further to rattle on or not about

00:09:44,930 --> 00:09:49,010
another cool feature F strings huh in

00:09:47,120 --> 00:09:50,600
three point six fancy new way of

00:09:49,010 --> 00:09:52,280
formatting strings I recommend you get

00:09:50,600 --> 00:09:52,700
on to three point six up of this

00:09:52,280 --> 00:09:56,420
goodness

00:09:52,700 --> 00:09:59,570
so this example uses as let's make it a

00:09:56,420 --> 00:10:01,160
little more obvious so what you can see

00:09:59,570 --> 00:10:03,140
here is that what you're returning from

00:10:01,160 --> 00:10:05,660
your enter method is sort of what you'll

00:10:03,140 --> 00:10:08,510
get a reference to when you use your

00:10:05,660 --> 00:10:10,790
context manager so data in with food

00:10:08,510 --> 00:10:13,420
context manager as data is a reference

00:10:10,790 --> 00:10:15,530
to yourself data inside that class right

00:10:13,420 --> 00:10:21,350
so let's look at sort of how we can use

00:10:15,530 --> 00:10:23,960
that and quickly here's an example that

00:10:21,350 --> 00:10:26,120
uses in it by the way so you can see in

00:10:23,960 --> 00:10:28,130
the previous slide in it just takes self

00:10:26,120 --> 00:10:29,870
here it takes a thing and then you

00:10:28,130 --> 00:10:32,120
instantiate your context manager with

00:10:29,870 --> 00:10:34,180
dictionary this is just like any other

00:10:32,120 --> 00:10:40,910
class so it shouldn't be too unfamiliar

00:10:34,180 --> 00:10:42,410
like that yeah cool that's pretty much

00:10:40,910 --> 00:10:44,090
everything there is to writing context

00:10:42,410 --> 00:10:45,980
managers with classes except for a few

00:10:44,090 --> 00:10:48,050
like exception handling things and exit

00:10:45,980 --> 00:10:50,060
methods which we will come back to but

00:10:48,050 --> 00:10:54,020
you're probably thinking boy that sure

00:10:50,060 --> 00:10:55,700
was a lot of work because I know I was

00:10:54,020 --> 00:10:57,830
with all those methods like two to three

00:10:55,700 --> 00:11:00,740
methods just for that surely there's an

00:10:57,830 --> 00:11:02,750
easier way wow there is because I told

00:11:00,740 --> 00:11:04,370
you that would be an easier way so

00:11:02,750 --> 00:11:06,540
there's this thing called context live

00:11:04,370 --> 00:11:08,730
context manager

00:11:06,540 --> 00:11:10,500
as it says in the docs this function is

00:11:08,730 --> 00:11:12,510
a decorator that can be used to define a

00:11:10,500 --> 00:11:13,920
factory function for with statement

00:11:12,510 --> 00:11:15,630
context manages without needing to

00:11:13,920 --> 00:11:17,280
create a class or separate enter and

00:11:15,630 --> 00:11:19,500
exit methods which is a whole lot of

00:11:17,280 --> 00:11:21,900
like baloney

00:11:19,500 --> 00:11:23,460
so really the takeaway is that you can

00:11:21,900 --> 00:11:25,440
make yourself a context manager without

00:11:23,460 --> 00:11:28,140
defining an enter and exit method it's

00:11:25,440 --> 00:11:30,240
really just a thing like a decorator

00:11:28,140 --> 00:11:32,910
that you whack on top of a generator to

00:11:30,240 --> 00:11:36,920
make it a context manager but like what

00:11:32,910 --> 00:11:41,220
well now generators and decorators so

00:11:36,920 --> 00:11:43,110
yeah right before looking at an example

00:11:41,220 --> 00:11:44,910
for how we use this context manager

00:11:43,110 --> 00:11:48,150
decorator we sort of need to set up the

00:11:44,910 --> 00:11:49,590
groundwork for what generators and

00:11:48,150 --> 00:11:51,720
decorators actually are just like a

00:11:49,590 --> 00:11:54,630
little bit so you regularly familiar if

00:11:51,720 --> 00:11:55,680
you're not already so if the decorators

00:11:54,630 --> 00:11:57,570
we just got a quick set of slides

00:11:55,680 --> 00:12:00,450
generators will be more complicated and

00:11:57,570 --> 00:12:02,730
we'll get to those in a bit so a

00:12:00,450 --> 00:12:05,700
decorator is essentially a function that

00:12:02,730 --> 00:12:08,910
takes a function and then returns a new

00:12:05,700 --> 00:12:11,070
function right so in this example I take

00:12:08,910 --> 00:12:12,720
something func and then I'm returning

00:12:11,070 --> 00:12:15,150
new func and what new func does is it

00:12:12,720 --> 00:12:17,940
just calls func and then appends for

00:12:15,150 --> 00:12:21,540
exclamation marks to the end and then we

00:12:17,940 --> 00:12:22,920
returned that function by the way if you

00:12:21,540 --> 00:12:24,330
like super interested in this this has

00:12:22,920 --> 00:12:26,610
something to do with closures I know I

00:12:24,330 --> 00:12:27,900
don't know anything about them but if

00:12:26,610 --> 00:12:30,300
you're feeling academic then that's a

00:12:27,900 --> 00:12:32,190
good place to go so let's say I have

00:12:30,300 --> 00:12:36,630
this function called hello PyCon it says

00:12:32,190 --> 00:12:40,350
you know that and I put these decorator

00:12:36,630 --> 00:12:43,010
on top and I call it what do we get

00:12:40,350 --> 00:12:46,680
right say it with me

00:12:43,010 --> 00:12:50,550
hello PyCon au 2018 Wow

00:12:46,680 --> 00:12:53,040
so enthusiastic I think we can do that

00:12:50,550 --> 00:12:54,870
again I'm gonna be that guy so okay

00:12:53,040 --> 00:12:58,590
three two one

00:12:54,870 --> 00:13:00,780
hello pi karne used 2018 wow that was

00:12:58,590 --> 00:13:05,040
actually so much better I'm proud of you

00:13:00,780 --> 00:13:06,270
guys okay so I hope hopefully that sort

00:13:05,040 --> 00:13:07,650
of made sense you don't really need to

00:13:06,270 --> 00:13:10,070
understand how they work I just want to

00:13:07,650 --> 00:13:13,170
give you a little bit of information so

00:13:10,070 --> 00:13:16,410
this with the @ sign is really just

00:13:13,170 --> 00:13:18,180
syntactic sugar for this where you just

00:13:16,410 --> 00:13:20,250
you know it takes the hello PyCon

00:13:18,180 --> 00:13:21,630
function you call the decorator on it

00:13:20,250 --> 00:13:23,700
and then you get a new help icon

00:13:21,630 --> 00:13:25,710
function so if you would call help icon

00:13:23,700 --> 00:13:28,920
now it would return it with all the

00:13:25,710 --> 00:13:39,300
exclamation marks cool just give me a

00:13:28,920 --> 00:13:40,710
sec okay so it generators Matt Tran

00:13:39,300 --> 00:13:42,240
teeny this morning vaguely reference

00:13:40,710 --> 00:13:44,040
generators just just like a little bit

00:13:42,240 --> 00:13:47,340
oh sorry that was yesterday he needs

00:13:44,040 --> 00:13:48,690
really good async a micro Pathan talk so

00:13:47,340 --> 00:13:51,180
hopefully I'm not coming in totally

00:13:48,690 --> 00:13:52,530
blind and Liam Calloway name-dropped

00:13:51,180 --> 00:13:54,750
them this morning too so if you're like

00:13:52,530 --> 00:13:56,190
hey what would generators then you're in

00:13:54,750 --> 00:13:57,290
luck because I'm about to sort of

00:13:56,190 --> 00:14:02,030
explain them

00:13:57,290 --> 00:14:04,020
hold on tight so this is a generator

00:14:02,030 --> 00:14:07,290
essentially it's a function that holds

00:14:04,020 --> 00:14:09,720
state every time you call it it's going

00:14:07,290 --> 00:14:11,070
to generate the next value that it has

00:14:09,720 --> 00:14:13,290
available so let's look at how that

00:14:11,070 --> 00:14:16,010
actually works so if I create this

00:14:13,290 --> 00:14:18,840
generator so gen equals first and five

00:14:16,010 --> 00:14:20,550
when I call next on that generator it's

00:14:18,840 --> 00:14:23,100
gonna ask for the next value that it has

00:14:20,550 --> 00:14:24,390
available and it's gonna like step

00:14:23,100 --> 00:14:27,690
through this loop so the first one's

00:14:24,390 --> 00:14:29,490
gonna print zero right and then the next

00:14:27,690 --> 00:14:33,060
time we call it it's gonna print one

00:14:29,490 --> 00:14:34,260
it's not going to print zero again which

00:14:33,060 --> 00:14:35,550
it would do if it was returned right

00:14:34,260 --> 00:14:37,230
because you go return the first value

00:14:35,550 --> 00:14:39,900
call it again and it just do the same

00:14:37,230 --> 00:14:41,160
thing Sarah it's got it's returned one

00:14:39,900 --> 00:14:43,440
because of the generator sort of

00:14:41,160 --> 00:14:45,480
maintain state about where it's at

00:14:43,440 --> 00:14:48,089
if you called it in love three times you

00:14:45,480 --> 00:14:52,589
would get to four sorry that's not hang

00:14:48,089 --> 00:14:54,270
up this way two three four and then if

00:14:52,589 --> 00:14:55,620
you called it again you would get a stop

00:14:54,270 --> 00:14:57,330
iteration error because the generator

00:14:55,620 --> 00:15:01,530
would be like hey and out of stuff I got

00:14:57,330 --> 00:15:04,080
nothing left to give you cool you can

00:15:01,530 --> 00:15:05,700
also use them like this so you can use

00:15:04,080 --> 00:15:07,050
it in a for loop and it will sort of do

00:15:05,700 --> 00:15:09,600
that work for you it'll call it up to

00:15:07,050 --> 00:15:12,030
the point that stop iteration is raised

00:15:09,600 --> 00:15:16,020
and then done right so there's just got

00:15:12,030 --> 00:15:17,790
to print 0:34 now so you've got a

00:15:16,020 --> 00:15:20,010
generator on the left each time you hit

00:15:17,790 --> 00:15:21,930
it you get the next number and then if

00:15:20,010 --> 00:15:23,610
we have some sort of regular function on

00:15:21,930 --> 00:15:25,950
the right this one's a little different

00:15:23,610 --> 00:15:27,620
it just produces that list from 0

00:15:25,950 --> 00:15:31,140
through to 4

00:15:27,620 --> 00:15:32,459
however if I was to call base print the

00:15:31,140 --> 00:15:34,170
Sun it's actually going to be the same

00:15:32,459 --> 00:15:36,170
value right and so some is going to take

00:15:34,170 --> 00:15:38,399
lists from the right function and

00:15:36,170 --> 00:15:40,860
consume it and sum them together and

00:15:38,399 --> 00:15:41,850
then with the generator on the left it

00:15:40,860 --> 00:15:43,200
will do the same thing it'll just

00:15:41,850 --> 00:15:45,269
iterate through it up until it can't

00:15:43,200 --> 00:15:48,480
anymore and sum them together so we get

00:15:45,269 --> 00:15:50,399
45 so the key difference is that

00:15:48,480 --> 00:15:52,110
generators sort of let you choose when

00:15:50,399 --> 00:15:54,990
to produce each item in your iterable

00:15:52,110 --> 00:15:56,699
that thing you're iterating over it's

00:15:54,990 --> 00:15:59,190
good for like lazy evaluation and stuff

00:15:56,699 --> 00:16:00,209
if you're into that kind of thing but if

00:15:59,190 --> 00:16:02,250
all that just were of your head don't

00:16:00,209 --> 00:16:04,589
panic the basic takeaway here is that

00:16:02,250 --> 00:16:07,079
when you're writing a context manager

00:16:04,589 --> 00:16:09,089
decorate context manager function

00:16:07,079 --> 00:16:11,519
just use your instead of return so and

00:16:09,089 --> 00:16:13,260
that will be fine you don't need to know

00:16:11,519 --> 00:16:15,089
the intricacies here the basic info is

00:16:13,260 --> 00:16:18,149
enough so now that we have the

00:16:15,089 --> 00:16:21,350
groundwork we can understand context

00:16:18,149 --> 00:16:24,029
manager the decorator so here's a little

00:16:21,350 --> 00:16:25,920
creative commons image in the legal like

00:16:24,029 --> 00:16:30,060
in the creative domain so that makes

00:16:25,920 --> 00:16:32,279
legal happy so let's put the two

00:16:30,060 --> 00:16:35,100
together finally back to context

00:16:32,279 --> 00:16:37,320
managers after that little aside so this

00:16:35,100 --> 00:16:39,000
is our old example showing how context

00:16:37,320 --> 00:16:41,579
managers work with the basic enter

00:16:39,000 --> 00:16:45,779
inside the block and then exit so let's

00:16:41,579 --> 00:16:47,250
rebuild this with context manager so I

00:16:45,779 --> 00:16:48,810
haven't included the import that you

00:16:47,250 --> 00:16:51,600
would go from context live include

00:16:48,810 --> 00:16:54,720
context manager so the function my

00:16:51,600 --> 00:16:56,940
context manager underscores is a

00:16:54,720 --> 00:16:58,560
generator it yields once this is a

00:16:56,940 --> 00:17:01,860
requirement compared to those previous

00:16:58,560 --> 00:17:03,779
examples to turn this generator into a

00:17:01,860 --> 00:17:06,030
context manager all we do is put on the

00:17:03,779 --> 00:17:08,040
context manager decorator this builds

00:17:06,030 --> 00:17:10,290
the enter and exit methods for you which

00:17:08,040 --> 00:17:11,429
I think is like freaking cool I think

00:17:10,290 --> 00:17:13,530
it's pretty amazing how all of these

00:17:11,429 --> 00:17:15,150
like crazy Python things like generators

00:17:13,530 --> 00:17:18,480
and decorators and just like sorry

00:17:15,150 --> 00:17:20,520
and things like that come together to

00:17:18,480 --> 00:17:22,559
just you know give you that nice little

00:17:20,520 --> 00:17:25,530
mmm one-liner that gives you a like a

00:17:22,559 --> 00:17:26,579
generator sorry a context manager so

00:17:25,530 --> 00:17:29,220
let's step through this piece by piece

00:17:26,579 --> 00:17:31,590
and see how it works so you can see the

00:17:29,220 --> 00:17:33,000
parallel between the two your enter

00:17:31,590 --> 00:17:35,370
method is essentially everything that

00:17:33,000 --> 00:17:37,380
you do before yielding and then your

00:17:35,370 --> 00:17:39,809
exit method is everything you do after

00:17:37,380 --> 00:17:41,750
yielding which i think is very intuitive

00:17:39,809 --> 00:17:45,120
like it's a very intuitive way of

00:17:41,750 --> 00:17:47,040
constructing them so let's go back to

00:17:45,120 --> 00:17:47,790
our food context manager so this is our

00:17:47,040 --> 00:17:51,390
original

00:17:47,790 --> 00:17:54,240
and then we'll rebuild it like this so

00:17:51,390 --> 00:17:55,530
when you sew by the way notice that

00:17:54,240 --> 00:17:55,920
these are functions that we put the

00:17:55,530 --> 00:17:58,110
thing on

00:17:55,920 --> 00:18:00,900
so the function takes our variable our

00:17:58,110 --> 00:18:05,060
argument we print the data in it yield

00:18:00,900 --> 00:18:07,440
the data and then print the exit data so

00:18:05,060 --> 00:18:09,870
it's the same example as before pretty

00:18:07,440 --> 00:18:11,910
simple here's how these two relate so

00:18:09,870 --> 00:18:15,060
whatever you yield is what you get after

00:18:11,910 --> 00:18:18,930
your as yeah and then here's how you

00:18:15,060 --> 00:18:22,020
initialize and stuff so I think it's

00:18:18,930 --> 00:18:23,640
worth noting that when you like when you

00:18:22,020 --> 00:18:23,910
enter and print it it's going to look

00:18:23,640 --> 00:18:27,450
like

00:18:23,910 --> 00:18:29,370
Darry as the key and then when you exit

00:18:27,450 --> 00:18:34,740
you're gonna get both dairy and fruit as

00:18:29,370 --> 00:18:36,810
keys cool that's just uh just breathe

00:18:34,740 --> 00:18:39,030
yeah let's just stretch okay I know I

00:18:36,810 --> 00:18:40,400
need to relax I'm freaking out that's

00:18:39,030 --> 00:18:45,300
okay

00:18:40,400 --> 00:18:46,770
so what have we learned so context

00:18:45,300 --> 00:18:48,480
managers have enter and exit methods

00:18:46,770 --> 00:18:50,780
that's when you're making the class

00:18:48,480 --> 00:18:53,090
based one unit methods optional

00:18:50,780 --> 00:18:55,230
generators and decorators exist and

00:18:53,090 --> 00:18:57,480
using these together we can make the

00:18:55,230 --> 00:18:59,040
context manager decorator lets you

00:18:57,480 --> 00:19:00,810
easily turn a generator function into a

00:18:59,040 --> 00:19:03,330
context manager so if you're overwhelmed

00:19:00,810 --> 00:19:05,100
at this point that's fine if you're

00:19:03,330 --> 00:19:06,420
hungry for more graham Dumbleton who has

00:19:05,100 --> 00:19:08,940
actually graced me with these presents

00:19:06,420 --> 00:19:10,890
in the front row has a talk about quote

00:19:08,940 --> 00:19:13,230
complex use cases for decorators and

00:19:10,890 --> 00:19:14,400
context managers tomorrow morning so you

00:19:13,230 --> 00:19:15,600
might want to take a look at that if you

00:19:14,400 --> 00:19:18,690
like hungry for more

00:19:15,600 --> 00:19:20,040
not that I'm done yet so that's just me

00:19:18,690 --> 00:19:23,540
offloading responsibility for teaching

00:19:20,040 --> 00:19:27,090
things to others that's a delegation sir

00:19:23,540 --> 00:19:29,430
so let's move on almost there so let's

00:19:27,090 --> 00:19:30,600
look at all the rest if you're still

00:19:29,430 --> 00:19:31,800
following me at this point good job if

00:19:30,600 --> 00:19:35,160
you are here are some things you should

00:19:31,800 --> 00:19:38,070
know so we'll start with scope after a

00:19:35,160 --> 00:19:40,080
context manager is used variables that

00:19:38,070 --> 00:19:42,720
you define in the context manager still

00:19:40,080 --> 00:19:45,060
exist so free this in this example

00:19:42,720 --> 00:19:47,700
content still exists at that print so

00:19:45,060 --> 00:19:49,260
that's valid code I don't know if that

00:19:47,700 --> 00:19:51,480
seems obvious it didn't to me when I

00:19:49,260 --> 00:19:53,430
first use these because you sort of

00:19:51,480 --> 00:19:56,220
intuitively look at a new Ness like a

00:19:53,430 --> 00:19:56,700
new indent as a new scope but that's not

00:19:56,220 --> 00:19:58,470
the case

00:19:56,700 --> 00:20:00,510
context managers do not create a new

00:19:58,470 --> 00:20:03,730
scope

00:20:00,510 --> 00:20:05,470
this on the other hand is not valid but

00:20:03,730 --> 00:20:07,690
it's not valid because F doesn't exist

00:20:05,470 --> 00:20:09,940
it's invalid because F has been closed

00:20:07,690 --> 00:20:11,500
and the read won't work so you're going

00:20:09,940 --> 00:20:13,150
to get a value error for trying to read

00:20:11,500 --> 00:20:15,670
the file after it's been closed from the

00:20:13,150 --> 00:20:18,400
context manager that's just something to

00:20:15,670 --> 00:20:19,570
keep in mind but this is what we want

00:20:18,400 --> 00:20:21,700
right this is the context advantage of

00:20:19,570 --> 00:20:24,570
doing its job because we want F to be

00:20:21,700 --> 00:20:26,500
closed once we've exited the block okay

00:20:24,570 --> 00:20:29,290
so next we'll see how to handle

00:20:26,500 --> 00:20:31,810
exceptions in the exit method previously

00:20:29,290 --> 00:20:35,260
we showed exit with this signature that

00:20:31,810 --> 00:20:36,790
asterisks ax e XE just consumes all the

00:20:35,260 --> 00:20:38,770
remaining arguments which we've ignored

00:20:36,790 --> 00:20:42,880
so if we expand it out it looks like

00:20:38,770 --> 00:20:44,920
this right so you get the type of an

00:20:42,880 --> 00:20:47,590
exception an exception and exception

00:20:44,920 --> 00:20:49,450
trace back this exception is if an

00:20:47,590 --> 00:20:51,400
exception is raised inside the block of

00:20:49,450 --> 00:20:52,900
the context manager your exit method has

00:20:51,400 --> 00:20:57,220
the opportunity to do something with it

00:20:52,900 --> 00:20:58,300
and deal with it right so but there are

00:20:57,220 --> 00:21:00,070
some things to think about here there

00:20:58,300 --> 00:21:01,990
are some gotchas so if you want to

00:21:00,070 --> 00:21:03,640
ignore the exception that was raised you

00:21:01,990 --> 00:21:06,580
can just return true from your exit

00:21:03,640 --> 00:21:08,080
method and it will get ignored if you

00:21:06,580 --> 00:21:09,880
want to raise the exception you can

00:21:08,080 --> 00:21:12,130
return false or just do nothing and

00:21:09,880 --> 00:21:13,060
that's the default behavior it's

00:21:12,130 --> 00:21:15,220
important to know that you shouldn't

00:21:13,060 --> 00:21:16,810
explicitly rewrite the exception because

00:21:15,220 --> 00:21:19,000
that creates some like crazy like nested

00:21:16,810 --> 00:21:23,590
exception thing that you don't want to

00:21:19,000 --> 00:21:24,940
do so this is sort of the way you go so

00:21:23,590 --> 00:21:26,800
for example I could have this code where

00:21:24,940 --> 00:21:30,820
if an exception occurred within my

00:21:26,800 --> 00:21:32,230
context manager I can react to it so if

00:21:30,820 --> 00:21:33,790
exception is none this code won't

00:21:32,230 --> 00:21:35,710
trigger and will just keep on going but

00:21:33,790 --> 00:21:37,840
if there was an exception I'll print I

00:21:35,710 --> 00:21:39,550
know and then do some call for help

00:21:37,840 --> 00:21:40,780
function which could be I don't know get

00:21:39,550 --> 00:21:43,210
like an engineer who knows how they're

00:21:40,780 --> 00:21:45,100
doing in and then you can return false

00:21:43,210 --> 00:21:46,630
to re-raise the exception so you've done

00:21:45,100 --> 00:21:49,660
something to deal with it and then you

00:21:46,630 --> 00:21:51,820
get to see it and of course you don't

00:21:49,660 --> 00:21:53,490
actually need to return false so using

00:21:51,820 --> 00:21:55,480
this we can actually implement suppress

00:21:53,490 --> 00:21:57,220
which we looked at earlier this is

00:21:55,480 --> 00:22:00,100
pretty much how suppress is actually

00:21:57,220 --> 00:22:01,540
implemented in context loop which is

00:22:00,100 --> 00:22:03,430
what's so great about Python is that the

00:22:01,540 --> 00:22:05,710
library code is actually still quite

00:22:03,430 --> 00:22:08,200
understandable so if your exception

00:22:05,710 --> 00:22:10,120
wasn't nun meaning that an exception

00:22:08,200 --> 00:22:12,910
happened and your exception was a

00:22:10,120 --> 00:22:13,900
subclass of the exceptions that you put

00:22:12,910 --> 00:22:15,040
in you're like you

00:22:13,900 --> 00:22:18,280
you've started it within your init

00:22:15,040 --> 00:22:19,900
method then the exception will be

00:22:18,280 --> 00:22:21,190
ignored that boolean will resolve to

00:22:19,900 --> 00:22:23,320
true and then you'll just ignore the

00:22:21,190 --> 00:22:25,990
exception so I think that's pretty neat

00:22:23,320 --> 00:22:30,220
right whoops tells me to say that by

00:22:25,990 --> 00:22:32,200
highlighting stuff so moving on and then

00:22:30,220 --> 00:22:34,300
finally we'll look at how we do that

00:22:32,200 --> 00:22:36,280
exception handling inside context

00:22:34,300 --> 00:22:37,450
manages with this decorator so the

00:22:36,280 --> 00:22:40,720
examples that I've shown don't actually

00:22:37,450 --> 00:22:43,570
have you know they don't actually handle

00:22:40,720 --> 00:22:45,490
the exceptions so what do we expect will

00:22:43,570 --> 00:22:46,150
happen here I'll give you a minute to

00:22:45,490 --> 00:22:47,590
think about it

00:22:46,150 --> 00:22:50,890
well like five seconds because I'm

00:22:47,590 --> 00:22:52,300
running out of time so if we look at the

00:22:50,890 --> 00:22:55,030
output of this what we're going to get

00:22:52,300 --> 00:22:56,370
is we're going to get before and then

00:22:55,030 --> 00:22:59,110
we're going to get an exception right

00:22:56,370 --> 00:23:00,970
because we've yielded we've tried to

00:22:59,110 --> 00:23:02,650
print one divided by zero which is not

00:23:00,970 --> 00:23:05,350
like which will cause a black hole so we

00:23:02,650 --> 00:23:07,960
don't do it and then we get this trace

00:23:05,350 --> 00:23:09,670
back right so if we want to deal with it

00:23:07,960 --> 00:23:11,830
here's our old code which through the

00:23:09,670 --> 00:23:14,440
error we can get some exception handling

00:23:11,830 --> 00:23:16,390
like this so we'll print before we'll

00:23:14,440 --> 00:23:18,010
try to yield if we get an exception

00:23:16,390 --> 00:23:19,810
we'll print oh no and print the

00:23:18,010 --> 00:23:21,580
exception message and then finally this

00:23:19,810 --> 00:23:27,730
is just a standard try except finally we

00:23:21,580 --> 00:23:29,680
can print after so notice that I know

00:23:27,730 --> 00:23:31,240
this is confusing but unlike class-based

00:23:29,680 --> 00:23:33,070
context managers you have to explicitly

00:23:31,240 --> 00:23:33,580
re-raise the exception if you want it to

00:23:33,070 --> 00:23:37,000
happen again

00:23:33,580 --> 00:23:38,470
I'm like returning true or false so I'm

00:23:37,000 --> 00:23:40,360
sorry about that that's just how it is

00:23:38,470 --> 00:23:43,300
and then you're going to get it like

00:23:40,360 --> 00:23:48,040
this so division by oh no division by

00:23:43,300 --> 00:23:49,900
zero after we made it excellent Wow

00:23:48,040 --> 00:23:52,750
we almost made it we've just got a few

00:23:49,900 --> 00:23:54,460
other things so one more time we just

00:23:52,750 --> 00:23:56,350
covered context managers in the stem

00:23:54,460 --> 00:23:58,540
library our own context managers the

00:23:56,350 --> 00:24:01,150
hard way decorators and generators the

00:23:58,540 --> 00:24:02,800
easy stuff and then all the rest is

00:24:01,150 --> 00:24:04,330
coming up well we just did all the rest

00:24:02,800 --> 00:24:06,730
now there's like the last a little bit

00:24:04,330 --> 00:24:08,650
of all the rest so just some best

00:24:06,730 --> 00:24:11,440
practices to remind you don't explicitly

00:24:08,650 --> 00:24:14,340
re-raise in your exit method in context

00:24:11,440 --> 00:24:16,120
managers you do have to re-raise and

00:24:14,340 --> 00:24:17,530
finally something we didn't talk about

00:24:16,120 --> 00:24:19,090
is know the roles of in it didn't enter

00:24:17,530 --> 00:24:21,160
because they both sort of get cold when

00:24:19,090 --> 00:24:22,840
you use your context manager the

00:24:21,160 --> 00:24:24,960
takeaway is don't make in it too

00:24:22,840 --> 00:24:26,669
expensive computationally expensive

00:24:24,960 --> 00:24:28,080
because there is the option that you

00:24:26,669 --> 00:24:30,870
could make a context manager but never

00:24:28,080 --> 00:24:32,340
use it which is extra possible in 3.7

00:24:30,870 --> 00:24:35,759
now that we have null context that

00:24:32,340 --> 00:24:38,309
do-nothing context manager and then some

00:24:35,759 --> 00:24:40,049
other possible uses is you could do an

00:24:38,309 --> 00:24:43,110
event and then log based on what happens

00:24:40,049 --> 00:24:45,509
inside that block something I was doing

00:24:43,110 --> 00:24:47,700
is you enter your context manager you

00:24:45,509 --> 00:24:49,769
spin up a remote host it gives you a

00:24:47,700 --> 00:24:50,970
handle like a host name you run commands

00:24:49,769 --> 00:24:53,009
against that host and then once you're

00:24:50,970 --> 00:24:54,559
done it'll destroy the host again well

00:24:53,009 --> 00:24:58,289
not physically but you know what I mean

00:24:54,559 --> 00:25:00,779
and more I'll leave it to your

00:24:58,289 --> 00:25:03,769
imagination what we can do so to

00:25:00,779 --> 00:25:05,820
paraphrase Tim Peters incorrectly

00:25:03,769 --> 00:25:09,149
context managers are one honking great

00:25:05,820 --> 00:25:10,470
idea let's use more of notice before

00:25:09,149 --> 00:25:12,059
moving on to questions I'll let you guys

00:25:10,470 --> 00:25:14,429
know that I have a whole bunch of pins

00:25:12,059 --> 00:25:16,289
slash buttons with this on the end of it

00:25:14,429 --> 00:25:18,149
this is very cute drawing by my friend

00:25:16,289 --> 00:25:20,159
Fatima a Twitter handle attached please

00:25:18,149 --> 00:25:23,909
go follow you can come grab one of them

00:25:20,159 --> 00:25:26,940
after the talk from me have like like 30

00:25:23,909 --> 00:25:30,929
so don't everyone come but please do

00:25:26,940 --> 00:25:33,509
come okay questions or cancel that no

00:25:30,929 --> 00:25:35,429
questions thanks to people thanks to my

00:25:33,509 --> 00:25:37,409
fellow Facebook folks for watching all

00:25:35,429 --> 00:25:38,580
my dry runs and stuff because when I

00:25:37,409 --> 00:25:41,419
first did it I was like oh yeah it's

00:25:38,580 --> 00:25:43,559
done and then it was 11 minutes long so

00:25:41,419 --> 00:25:45,330
to my friends for moral support

00:25:43,559 --> 00:25:46,860
the PyCon au team from putting this

00:25:45,330 --> 00:25:48,539
awesome event together and all of you

00:25:46,860 --> 00:25:50,159
lovely people for laughing at my stuff

00:25:48,539 --> 00:25:55,460
and hopefully following along with what

00:25:50,159 --> 00:25:55,460
I was saying yeah questions and stuff

00:25:59,930 --> 00:26:03,990
we have a few minutes for questions if

00:26:02,460 --> 00:26:06,350
anyone has questions just raise your

00:26:03,990 --> 00:26:06,350
hand

00:26:14,610 --> 00:26:20,399
have a great talk I was just wondering

00:26:17,399 --> 00:26:22,049
with the with the decorator usage you

00:26:20,399 --> 00:26:23,909
have that yield statement in there and

00:26:22,049 --> 00:26:27,330
what happens if that function yields

00:26:23,909 --> 00:26:28,649
more than once every run is that defined

00:26:27,330 --> 00:26:31,710
behavior is that something you'd ever

00:26:28,649 --> 00:26:33,179
want to do or no that's illegal behavior

00:26:31,710 --> 00:26:34,830
I haven't actually experimented with

00:26:33,179 --> 00:26:37,200
what happens I'm fairly sure the answer

00:26:34,830 --> 00:26:39,299
is you'll get an exception but in the

00:26:37,200 --> 00:26:41,580
docs it says that you need they use some

00:26:39,299 --> 00:26:44,490
fancy like singular iterative generator

00:26:41,580 --> 00:26:52,230
or something but I'm fairly sure it

00:26:44,490 --> 00:26:57,090
doesn't work at all sir and thanks for

00:26:52,230 --> 00:26:59,220
saying my talk it's nice hi when you

00:26:57,090 --> 00:27:02,010
write our own context manager or we do

00:26:59,220 --> 00:27:03,690
we write the clean up function to clear

00:27:02,010 --> 00:27:05,490
all these resources is it should be

00:27:03,690 --> 00:27:07,320
written in the exit function or yeah

00:27:05,490 --> 00:27:10,200
that's right yeah yeah exit method

00:27:07,320 --> 00:27:12,889
should clean up whatever was established

00:27:10,200 --> 00:27:12,889
in your enter method

00:27:17,520 --> 00:27:24,630
it's just high context managers differ

00:27:20,970 --> 00:27:27,000
from decorators in general because I

00:27:24,630 --> 00:27:29,520
realized everything that was done by

00:27:27,000 --> 00:27:30,300
context manager could just be done by a

00:27:29,520 --> 00:27:31,800
decorator

00:27:30,300 --> 00:27:33,720
that's an excellent question and

00:27:31,800 --> 00:27:35,550
something that I didn't have time to

00:27:33,720 --> 00:27:37,530
touch on but they are very similar

00:27:35,550 --> 00:27:39,930
ideologically and there is a thing if

00:27:37,530 --> 00:27:42,210
you go read contacts libs Docs there's a

00:27:39,930 --> 00:27:44,280
thing called context decorator and then

00:27:42,210 --> 00:27:45,270
you can make context managers decorators

00:27:44,280 --> 00:27:47,820
and vice versa

00:27:45,270 --> 00:27:48,780
I believe so the answer is yes you care

00:27:47,820 --> 00:27:51,390
whatever you do with a context manager

00:27:48,780 --> 00:27:52,620
you can do with the decorator it's

00:27:51,390 --> 00:27:53,880
really a matter of taste

00:27:52,620 --> 00:28:00,270
I think context managers are sort of

00:27:53,880 --> 00:28:02,220
simpler to think about thank you yes the

00:28:00,270 --> 00:28:05,250
Ducks are great and I've said that like

00:28:02,220 --> 00:28:06,600
five times but they're really good okay

00:28:05,250 --> 00:28:10,020
we still have a couple of minutes if

00:28:06,600 --> 00:28:10,560
there's more questions great questions

00:28:10,020 --> 00:28:13,740
so far

00:28:10,560 --> 00:28:15,330
you haven't made me look too done hi

00:28:13,740 --> 00:28:16,740
Annie are there any gotchas with writing

00:28:15,330 --> 00:28:18,690
functions that can be used both as a

00:28:16,740 --> 00:28:21,330
context manager and not like the open

00:28:18,690 --> 00:28:23,250
function so whether it comes with a

00:28:21,330 --> 00:28:26,130
width before it or not I imagine

00:28:23,250 --> 00:28:27,930
probably not right like there are a lot

00:28:26,130 --> 00:28:30,840
of things like his in Python Terry for

00:28:27,930 --> 00:28:32,580
example saket was not a context manager

00:28:30,840 --> 00:28:34,320
and lots of people would like to use it

00:28:32,580 --> 00:28:37,770
as one and therefore they made it one in

00:28:34,320 --> 00:28:39,690
Python 3 I really don't see many

00:28:37,770 --> 00:28:40,980
examples where it's detrimental to have

00:28:39,690 --> 00:28:43,500
them that's both assuming that they're

00:28:40,980 --> 00:28:44,670
not implemented erroneously I'm sure

00:28:43,500 --> 00:28:47,550
someone can prove me wrong with an

00:28:44,670 --> 00:28:49,770
example from history but I I think

00:28:47,550 --> 00:28:54,960
context man trees are great so use them

00:28:49,770 --> 00:28:57,380
where possible does anyone have a last

00:28:54,960 --> 00:28:57,380
question

00:28:59,620 --> 00:29:09,309
a great talk thank you thank you I

00:29:07,090 --> 00:29:13,300
wanted to follow up and ask what the use

00:29:09,309 --> 00:29:16,870
of the null context manager was ah it's

00:29:13,300 --> 00:29:18,670
it's amazing it's seriously so good like

00:29:16,870 --> 00:29:20,680
it's essentially if there's some

00:29:18,670 --> 00:29:22,270
condition where let's say you've got a

00:29:20,680 --> 00:29:26,320
function that takes an argument called

00:29:22,270 --> 00:29:28,180
ignore exceptions you if that is true

00:29:26,320 --> 00:29:30,010
then you'll want to use the suppress

00:29:28,180 --> 00:29:31,900
context manager on whatever exceptions

00:29:30,010 --> 00:29:32,980
you want to ignore that if it's not true

00:29:31,900 --> 00:29:35,020
you don't want to use that context

00:29:32,980 --> 00:29:36,490
manager so previously it we've got

00:29:35,020 --> 00:29:39,220
really awkward way we'd have to go

00:29:36,490 --> 00:29:42,130
if ignore exceptions do the whole thing

00:29:39,220 --> 00:29:44,020
with that with else and you sort of have

00:29:42,130 --> 00:29:45,370
to re-implement the behavior these days

00:29:44,020 --> 00:29:47,110
what you can do is you can go if ignore

00:29:45,370 --> 00:29:49,720
exceptions context manager equals

00:29:47,110 --> 00:29:51,940
suppress else context manager equals

00:29:49,720 --> 00:29:54,640
null context and then you can use it in

00:29:51,940 --> 00:29:56,140
the same by code structure except when

00:29:54,640 --> 00:29:58,390
no context is happening it just doesn't

00:29:56,140 --> 00:29:59,559
do anything so it's just sort of like

00:29:58,390 --> 00:30:01,360
something to make your code structure

00:29:59,559 --> 00:30:03,160
nicer that's a three point seven feature

00:30:01,360 --> 00:30:07,809
so you really need to get cutting-edge

00:30:03,160 --> 00:30:10,000
to use that thank you that's all the

00:30:07,809 --> 00:30:11,170
time that we have and please think

00:30:10,000 --> 00:30:14,759
Daniel for his talk

00:30:11,170 --> 00:30:14,759

YouTube URL: https://www.youtube.com/watch?v=-tpn94V9vK4


