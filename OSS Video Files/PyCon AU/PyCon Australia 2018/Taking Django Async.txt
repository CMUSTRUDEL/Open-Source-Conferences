Title: Taking Django Async
Publication date: 2018-08-25
Playlist: PyCon Australia 2018
Description: 
	Andrew Godwin

https://2018.pycon-au.org/talks/41797-taking-django-async/

We take a look at Django and Channels 2.0 and the changes it brings by going fully async - Examining not only why the change makes things better, but also how it's managed to bridge between Django's synchronous world and the async world. Plus, what might the future hold for Django and Channels?

Python, PyCon, PyConAU, australia, programming, sydney

This video is licensed under CC BY 3.0 AU ‹https://creativecommons.org/licenses/by/3.0/au/›.

PyCon Australia (“PyCon AU”) is the national conference for the Python Programming Community, bringing together professional, student and enthusiast developers with a love for developing with Python.

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 24 - 28 2018.

Python, PyCon, PyConAU
Captions: 
	00:00:06,170 --> 00:00:09,770
there's more people coming in

00:00:12,580 --> 00:00:16,970
channels 2.0 now embraces pythons async

00:00:15,559 --> 00:00:18,440
support the only apps around an event

00:00:16,970 --> 00:00:20,420
loop rather than using worth of

00:00:18,440 --> 00:00:21,650
processors and regard when is a django

00:00:20,420 --> 00:00:23,570
core team member and the author of

00:00:21,650 --> 00:00:25,250
tunnels he's going to share with us the

00:00:23,570 --> 00:00:26,480
motivation for that change and what's

00:00:25,250 --> 00:00:29,440
next for async and Django

00:00:26,480 --> 00:00:29,440
please make Andrew feel welcome

00:00:33,850 --> 00:00:38,839
thank you very much yeah hello everybody

00:00:36,289 --> 00:00:41,899
as you've just heard I am Andrew Godwin

00:00:38,839 --> 00:00:43,519
I am Hatt's most infamous for being a

00:00:41,899 --> 00:00:44,930
django core team member I've worked on

00:00:43,519 --> 00:00:47,960
things like channels and Django

00:00:44,930 --> 00:00:50,299
migrations and South back in the day my

00:00:47,960 --> 00:00:51,949
day job is obviously is wrong I'm now a

00:00:50,299 --> 00:00:55,039
principal engineer mmm November right

00:00:51,949 --> 00:00:56,539
and generally I have a bad hobby of

00:00:55,039 --> 00:00:59,420
picking the nastiest parts of

00:00:56,539 --> 00:01:00,979
programming to do for fun in this case

00:00:59,420 --> 00:01:01,940
Network and asynchronous programming as

00:01:00,979 --> 00:01:04,159
well see you in a middle me at the

00:01:01,940 --> 00:01:06,770
moment but this talk is mostly about

00:01:04,159 --> 00:01:10,390
channels and Django and channels and how

00:01:06,770 --> 00:01:12,649
they talk to each other around 2015 I

00:01:10,390 --> 00:01:14,390
sort of thought of the idea of channels

00:01:12,649 --> 00:01:16,759
lings around one of the Django under the

00:01:14,390 --> 00:01:18,860
hoods that year I was like yeah we

00:01:16,759 --> 00:01:20,899
should have something in in Django that

00:01:18,860 --> 00:01:21,890
does like proper asynchronous port and

00:01:20,899 --> 00:01:23,479
WebSockets and a lot of kind of stuff

00:01:21,890 --> 00:01:26,209
and sort of sat down there and

00:01:23,479 --> 00:01:28,250
prototyped it and the first version was

00:01:26,209 --> 00:01:29,990
a bit rough and ready I'll say but it

00:01:28,250 --> 00:01:32,030
did a couple of things like the idea was

00:01:29,990 --> 00:01:34,850
it added this asynchronous protocol

00:01:32,030 --> 00:01:36,619
supported Django and like it was never

00:01:34,850 --> 00:01:38,270
about purely WebSockets but like

00:01:36,619 --> 00:01:40,700
WebSockets was the important headline

00:01:38,270 --> 00:01:42,229
rights like it did other things too but

00:01:40,700 --> 00:01:43,849
the idea was WebSockets was the driving

00:01:42,229 --> 00:01:48,020
force that people knew about it was a

00:01:43,849 --> 00:01:49,399
good buzzword in so many words but also

00:01:48,020 --> 00:01:51,830
did things like background jobs and

00:01:49,399 --> 00:01:54,619
queuing and other things you want to do

00:01:51,830 --> 00:01:56,869
like TCP stuff let's continue for two

00:01:54,619 --> 00:01:58,879
years and about two years later in 2017

00:01:56,869 --> 00:02:00,470
I released channels one point naught and

00:01:58,879 --> 00:02:02,720
that was continuation of these same

00:02:00,470 --> 00:02:05,239
ideas it was very much based on that

00:02:02,720 --> 00:02:07,729
initial foundation I found four channels

00:02:05,239 --> 00:02:09,440
back in 2015 some of those key things

00:02:07,729 --> 00:02:12,530
were things like being Python 2.7

00:02:09,440 --> 00:02:14,810
compatible at the time Django was still

00:02:12,530 --> 00:02:16,280
running on Python 2.7 I thought it was

00:02:14,810 --> 00:02:19,400
important to have that as part of the

00:02:16,280 --> 00:02:20,840
process also things like you know I use

00:02:19,400 --> 00:02:21,950
twisted web servers because I didn't

00:02:20,840 --> 00:02:25,750
want to write my own and twisted to make

00:02:21,950 --> 00:02:29,269
a good one and the crucial thing was I

00:02:25,750 --> 00:02:31,790
didn't use Python 3 so I couldn't use

00:02:29,269 --> 00:02:33,950
async i/o so I had to run Django without

00:02:31,790 --> 00:02:36,080
a team support and so what happened in

00:02:33,950 --> 00:02:38,480
the old channels was it ran Django

00:02:36,080 --> 00:02:40,970
synchronously in a separate process and

00:02:38,480 --> 00:02:42,469
handed things off from a twisted process

00:02:40,970 --> 00:02:44,590
I have got a diagram don't worry

00:02:42,469 --> 00:02:46,629
so basically you have this

00:02:44,590 --> 00:02:48,670
separate Django synchronous process and

00:02:46,629 --> 00:02:50,739
you have a twisted asynchronous web

00:02:48,670 --> 00:02:52,420
server twisted is fully au synchronous

00:02:50,739 --> 00:02:54,069
had been for many many years and the

00:02:52,420 --> 00:02:56,349
problem was that these two processes

00:02:54,069 --> 00:02:57,610
happily live in their own worlds but how

00:02:56,349 --> 00:02:59,890
do you talk between them they are after

00:02:57,610 --> 00:03:02,980
all different proteases on the same

00:02:59,890 --> 00:03:04,060
machine the reason it's called channels

00:03:02,980 --> 00:03:05,470
incidentally is this thing called the

00:03:04,060 --> 00:03:07,569
channel layer if you have been written

00:03:05,470 --> 00:03:10,000
something like CSP or go which is

00:03:07,569 --> 00:03:11,650
inspired by CSP seminar G a channel is a

00:03:10,000 --> 00:03:13,780
way you send messages in one process to

00:03:11,650 --> 00:03:16,060
another and so the channel layer was the

00:03:13,780 --> 00:03:18,160
thing like oh we can use Redis as our

00:03:16,060 --> 00:03:19,870
thing that lets us do async and that's

00:03:18,160 --> 00:03:23,200
sort of the the innovation of channels

00:03:19,870 --> 00:03:24,970
one and of course diagrams should never

00:03:23,200 --> 00:03:26,709
have a single thing in them you say well

00:03:24,970 --> 00:03:28,750
whatever having more than one Django

00:03:26,709 --> 00:03:30,250
process what I get a lot of site load so

00:03:28,750 --> 00:03:31,890
the idea was you could have multiple

00:03:30,250 --> 00:03:33,819
copies of each of these processes

00:03:31,890 --> 00:03:35,739
handling their various functions

00:03:33,819 --> 00:03:37,959
multiple web servers terminating

00:03:35,739 --> 00:03:40,470
WebSockets and doing requests multiple

00:03:37,959 --> 00:03:43,450
Django processes doing things like

00:03:40,470 --> 00:03:45,310
processing model queries and running

00:03:43,450 --> 00:03:49,000
views that kind of stuff and the Redis

00:03:45,310 --> 00:03:51,400
layer binding them all together this has

00:03:49,000 --> 00:03:53,019
a lot of advantages and crucially it

00:03:51,400 --> 00:03:55,380
fits those first three categories it

00:03:53,019 --> 00:03:58,019
runs on Python - first and foremost

00:03:55,380 --> 00:04:01,239
there are having some problems with this

00:03:58,019 --> 00:04:03,220
first and most importantly there are too

00:04:01,239 --> 00:04:06,190
many moving pieces no one wants to

00:04:03,220 --> 00:04:07,959
deploy a Redis in the middle of two

00:04:06,190 --> 00:04:09,370
whole parallel sets of extra processes

00:04:07,959 --> 00:04:11,950
to run the website on this is too much

00:04:09,370 --> 00:04:13,690
and second of course it doesn't have a

00:04:11,950 --> 00:04:15,819
zero support that wasn't a problem in

00:04:13,690 --> 00:04:18,160
2015 these days it's much more of a

00:04:15,819 --> 00:04:19,269
problem 18 ko is much more popular and

00:04:18,160 --> 00:04:22,030
people want to use stuff and there's

00:04:19,269 --> 00:04:23,950
more libraries that use it and perhaps

00:04:22,030 --> 00:04:26,260
most importantly for me and one of the

00:04:23,950 --> 00:04:28,389
Django philosophies I tried adhere to it

00:04:26,260 --> 00:04:30,760
was very very easy to shoot yourself in

00:04:28,389 --> 00:04:32,860
the foot one of Django's core tenants is

00:04:30,760 --> 00:04:35,080
that we don't only make things that are

00:04:32,860 --> 00:04:37,090
powerful and useful but all the things

00:04:35,080 --> 00:04:38,680
that are safe it's very hard to do the

00:04:37,090 --> 00:04:40,590
wrong thing in Django certainly with the

00:04:38,680 --> 00:04:42,849
out of the box defaults and

00:04:40,590 --> 00:04:44,620
unfortunately channels one was very bad

00:04:42,849 --> 00:04:46,750
a lot of ways for example it was

00:04:44,620 --> 00:04:49,270
incredibly easy to deadlock and block

00:04:46,750 --> 00:04:51,960
the entire synchronous worker and the

00:04:49,270 --> 00:04:54,340
clusion was I was pretty much wrong

00:04:51,960 --> 00:04:57,130
given the constraints at the time some

00:04:54,340 --> 00:04:58,010
of it had value but in the end I sat

00:04:57,130 --> 00:05:01,550
back and

00:04:58,010 --> 00:05:03,470
did some retroflex which reflection

00:05:01,550 --> 00:05:05,720
there we go there's the word all my

00:05:03,470 --> 00:05:07,790
choices and was like okay let's step

00:05:05,720 --> 00:05:09,680
back look at the scenario look at the

00:05:07,790 --> 00:05:13,340
environment python is in now and 2017

00:05:09,680 --> 00:05:14,720
and think about this again but not throw

00:05:13,340 --> 00:05:16,850
away the lessons of channels one let's

00:05:14,720 --> 00:05:18,740
try and bring all the good parts the

00:05:16,850 --> 00:05:20,420
design philosophy this weights similar

00:05:18,740 --> 00:05:22,910
to Django and how do you bring those

00:05:20,420 --> 00:05:25,190
together and that's what channels two is

00:05:22,910 --> 00:05:27,250
channels two is the culmination of that

00:05:25,190 --> 00:05:29,630
thought experiment turned into reality

00:05:27,250 --> 00:05:32,210
taking the lessons from channels one and

00:05:29,630 --> 00:05:34,490
the things the Python community has done

00:05:32,210 --> 00:05:36,980
in the interim three years and pull them

00:05:34,490 --> 00:05:39,290
together channels two runs an ace and ko

00:05:36,980 --> 00:05:42,230
you can do things using async libraries

00:05:39,290 --> 00:05:44,420
if you want to you can run parallel HTTP

00:05:42,230 --> 00:05:47,120
requests whenever you want to it runs on

00:05:44,420 --> 00:05:48,830
Python three because these days you

00:05:47,120 --> 00:05:52,670
should be running on Python three if

00:05:48,830 --> 00:05:55,490
you're not then I'm sorry because some

00:05:52,670 --> 00:05:56,930
of us and my work is also this case have

00:05:55,490 --> 00:05:59,600
some code in front some Python too but

00:05:56,930 --> 00:06:01,970
if you're doing exciting new things they

00:05:59,600 --> 00:06:04,430
synchronous like WebSockets you're

00:06:01,970 --> 00:06:05,810
probably okay with Python three no one's

00:06:04,430 --> 00:06:07,310
got an enterprise code base that run a

00:06:05,810 --> 00:06:10,730
strap WebSockets on to and if you are

00:06:07,310 --> 00:06:13,070
I'm very sorry and crucially it also

00:06:10,730 --> 00:06:15,410
supports both kinds it supports both

00:06:13,070 --> 00:06:16,130
synchronous threads and asynchronous

00:06:15,410 --> 00:06:18,320
co-routines

00:06:16,130 --> 00:06:20,150
I'll get into wireless this later it is

00:06:18,320 --> 00:06:21,860
a big important point for me but I don't

00:06:20,150 --> 00:06:23,750
think you should be forced to always

00:06:21,860 --> 00:06:25,700
write asynchronous code it's much more

00:06:23,750 --> 00:06:27,590
difficult so is crucial to me you could

00:06:25,700 --> 00:06:29,480
still write boring predictable

00:06:27,590 --> 00:06:31,610
synchronous code when you wanted to

00:06:29,480 --> 00:06:33,440
there was much harder to screw up much

00:06:31,610 --> 00:06:35,990
harder to shoot yourself in the foot

00:06:33,440 --> 00:06:37,010
with that's a little bit some different

00:06:35,990 --> 00:06:38,870
diagrams how this works

00:06:37,010 --> 00:06:40,880
so the first thing we've done the

00:06:38,870 --> 00:06:43,370
channels to is we've gone back to the

00:06:40,880 --> 00:06:46,310
good old single process like WSGI has

00:06:43,370 --> 00:06:48,800
there's a web server inside that web

00:06:46,310 --> 00:06:50,690
server you run django it's very happy

00:06:48,800 --> 00:06:51,560
and familiar if you want to run more

00:06:50,690 --> 00:06:53,260
than one web server

00:06:51,560 --> 00:06:57,830
you just run more than one web server

00:06:53,260 --> 00:06:59,600
the channel layer does reappear fulfills

00:06:57,830 --> 00:07:01,190
a different role here it's not time to

00:06:59,600 --> 00:07:03,830
gather the different parts of the

00:07:01,190 --> 00:07:05,750
request and response cycle it's job is

00:07:03,830 --> 00:07:07,700
to let you talk between processes easily

00:07:05,750 --> 00:07:09,470
it's now completely optional component

00:07:07,700 --> 00:07:11,289
if you don't want it you can just throw

00:07:09,470 --> 00:07:13,449
it away and use database but

00:07:11,289 --> 00:07:16,509
when you're writing WebSocket code or

00:07:13,449 --> 00:07:18,999
chat code or other sort of similar

00:07:16,509 --> 00:07:21,789
real-time code you'll find yourself

00:07:18,999 --> 00:07:23,680
having this big need for real-time

00:07:21,789 --> 00:07:24,610
communication between their different

00:07:23,680 --> 00:07:25,899
processes

00:07:24,610 --> 00:07:27,729
so the channel layer is there to give

00:07:25,899 --> 00:07:29,680
you that common solution to that problem

00:07:27,729 --> 00:07:31,930
like you know the Django philosophy is

00:07:29,680 --> 00:07:33,819
here we're giving you all the batteries

00:07:31,930 --> 00:07:36,009
included the channel layer is the

00:07:33,819 --> 00:07:38,589
included battery that lets you have that

00:07:36,009 --> 00:07:40,629
easy to use cross process communication

00:07:38,589 --> 00:07:42,849
it's not perfect doesn't scale amazingly

00:07:40,629 --> 00:07:45,249
just huge volumes but it will get you

00:07:42,849 --> 00:07:46,629
running for the first you know 100

00:07:45,249 --> 00:07:50,520
requests a second and then you can start

00:07:46,629 --> 00:07:53,740
replacing it after that now all of this

00:07:50,520 --> 00:07:56,469
come lazing around a 75% rewrite of the

00:07:53,740 --> 00:07:58,479
codebase obviously a lot of this is I

00:07:56,469 --> 00:08:00,999
went from synchronous of Python code to

00:07:58,479 --> 00:08:02,379
asynchronous Python code the two are

00:08:00,999 --> 00:08:05,499
very very different

00:08:02,379 --> 00:08:08,830
also Python 2 to Python 3 but the key

00:08:05,499 --> 00:08:11,559
thing is when you write async code they

00:08:08,830 --> 00:08:12,999
are different to synchronous functions

00:08:11,559 --> 00:08:14,139
you can't have a function that's both

00:08:12,999 --> 00:08:16,059
synchronous and asynchronous

00:08:14,139 --> 00:08:18,009
for example if I've got a function that

00:08:16,059 --> 00:08:20,219
says fetch me this model from the

00:08:18,009 --> 00:08:22,509
database I can run a synchronous version

00:08:20,219 --> 00:08:24,129
if I want an asynchronous version and

00:08:22,509 --> 00:08:25,809
write a separate copy that's the

00:08:24,129 --> 00:08:28,300
asynchronous version and call that one

00:08:25,809 --> 00:08:29,559
they're two different universes and you

00:08:28,300 --> 00:08:31,719
because I can't call one from the other

00:08:29,559 --> 00:08:33,339
you can't call a synchronous function

00:08:31,719 --> 00:08:34,389
easily from an asynchronous function it

00:08:33,339 --> 00:08:36,250
was blocked the thread

00:08:34,389 --> 00:08:37,449
you can't call an asynchronous function

00:08:36,250 --> 00:08:39,190
from synchronous function and without

00:08:37,449 --> 00:08:40,449
making an event loop I'll go through

00:08:39,190 --> 00:08:42,610
this in a bit don't worry it's a bit

00:08:40,449 --> 00:08:45,279
confusing but the point being that like

00:08:42,610 --> 00:08:48,130
I had these two different universes and

00:08:45,279 --> 00:08:50,740
Jango mostly lives in the synchronous

00:08:48,130 --> 00:08:53,139
universe it's you know over ten year old

00:08:50,740 --> 00:08:55,300
code it comes from the older time of

00:08:53,139 --> 00:08:56,800
Python when we didn't have proper

00:08:55,300 --> 00:08:58,930
unicode support and list comprehensions

00:08:56,800 --> 00:09:01,240
when new and exciting and all those

00:08:58,930 --> 00:09:04,120
wonderful things like that and so I had

00:09:01,240 --> 00:09:05,949
this challenge of taking Jango which is

00:09:04,120 --> 00:09:07,779
an amazing codebase very stable but

00:09:05,949 --> 00:09:10,750
still has these old design philosophies

00:09:07,779 --> 00:09:13,810
and trying to mate it partially async

00:09:10,750 --> 00:09:15,550
now Jango is quite complicated this is a

00:09:13,810 --> 00:09:18,819
very simplified version of Jango as you

00:09:15,550 --> 00:09:21,399
can see here at WCI handler it turns

00:09:18,819 --> 00:09:24,250
your request into an object URL routing

00:09:21,399 --> 00:09:24,490
that takes the request object and sends

00:09:24,250 --> 00:09:26,410
it to a

00:09:24,490 --> 00:09:28,990
function Jagga middleware does

00:09:26,410 --> 00:09:31,540
authentication sessions views do the

00:09:28,990 --> 00:09:33,550
logic in presentation and the RM does

00:09:31,540 --> 00:09:35,620
things and models are storage and the

00:09:33,550 --> 00:09:39,670
problem is all five of these layers are

00:09:35,620 --> 00:09:43,060
fully synchronous but if you want to do

00:09:39,670 --> 00:09:44,500
WebSockets or even a simple HTTP you

00:09:43,060 --> 00:09:46,810
want some of them to not be synchronous

00:09:44,500 --> 00:09:49,450
and so you get this problem where you

00:09:46,810 --> 00:09:52,330
want to take all of those and add a

00:09:49,450 --> 00:09:54,250
separate parallel set of versions of

00:09:52,330 --> 00:09:56,170
them that are asynchronous and this is

00:09:54,250 --> 00:09:58,959
what channel's does channels has a

00:09:56,170 --> 00:10:00,459
separate asynchronous set of things that

00:09:58,959 --> 00:10:03,010
reflect those things in the left-hand

00:10:00,459 --> 00:10:05,410
column so you'll see that the handler

00:10:03,010 --> 00:10:06,850
that the one bit of code we can make

00:10:05,410 --> 00:10:10,050
synchronous and asynchronous at once

00:10:06,850 --> 00:10:12,040
that that is the same but the routing

00:10:10,050 --> 00:10:13,959
different versions they take patient as

00:10:12,040 --> 00:10:14,500
a synchronous middleware different sets

00:10:13,959 --> 00:10:17,020
of middleware

00:10:14,500 --> 00:10:18,640
views and consumers same concept

00:10:17,020 --> 00:10:21,010
different universes and this is the

00:10:18,640 --> 00:10:22,630
problem that channels faced this is how

00:10:21,010 --> 00:10:24,399
it works right now and you get to choose

00:10:22,630 --> 00:10:26,560
which university you live in but the

00:10:24,399 --> 00:10:30,130
goal is to try and take that synchronous

00:10:26,560 --> 00:10:32,410
box and slowly but surely move it up to

00:10:30,130 --> 00:10:35,110
reduce the amount of duplicated code

00:10:32,410 --> 00:10:38,050
more and more till we share more of the

00:10:35,110 --> 00:10:40,980
stuff and eventually take it and have

00:10:38,050 --> 00:10:43,630
more and more of Jango be a sync native

00:10:40,980 --> 00:10:46,329
now of course you'll heard me say

00:10:43,630 --> 00:10:47,920
earlier on but Andrew you can't call

00:10:46,329 --> 00:10:50,440
synchronous code from asynchronous code

00:10:47,920 --> 00:10:52,149
easily what do I do with all my old nice

00:10:50,440 --> 00:10:53,649
synchronous view functions

00:10:52,149 --> 00:10:54,910
I'm not going to rewrite them to sync

00:10:53,649 --> 00:10:56,620
right no you shouldn't rewrite them to

00:10:54,910 --> 00:11:00,100
asynchronous code and this is the

00:10:56,620 --> 00:11:02,170
problem like how do you take an existing

00:11:00,100 --> 00:11:03,970
code base or even existing set of Python

00:11:02,170 --> 00:11:05,649
libraries and the ecosystem that's so

00:11:03,970 --> 00:11:07,480
good the reason Jango is so good is all

00:11:05,649 --> 00:11:10,240
the stuff out there and make it

00:11:07,480 --> 00:11:12,399
compatible with this new system that is

00:11:10,240 --> 00:11:15,279
where my two friends sync it to async

00:11:12,399 --> 00:11:16,810
async to sync come in these are two

00:11:15,279 --> 00:11:19,360
functions that you bridge those two

00:11:16,810 --> 00:11:21,100
worlds with these functions you can call

00:11:19,360 --> 00:11:23,110
asynchronous function from an

00:11:21,100 --> 00:11:26,170
asynchronous context and vice versa if

00:11:23,110 --> 00:11:27,490
the name is very self descriptive one is

00:11:26,170 --> 00:11:28,779
easier than the other so we'll start

00:11:27,490 --> 00:11:33,880
with the easy one and move on to the

00:11:28,779 --> 00:11:36,390
hard one so seem to async a brief

00:11:33,880 --> 00:11:38,140
diversion here when you're trying to run

00:11:36,390 --> 00:11:40,900
synchronous code in Python

00:11:38,140 --> 00:11:43,060
it has to run in its own full thread and

00:11:40,900 --> 00:11:45,340
when asynchronous code is running it has

00:11:43,060 --> 00:11:47,710
a salinas capacity reserves a thread and

00:11:45,340 --> 00:11:49,120
runs an event loop in that thread but

00:11:47,710 --> 00:11:51,400
other threads are free to use if you

00:11:49,120 --> 00:11:54,760
want to and so basically if you want to

00:11:51,400 --> 00:11:57,040
run a sync function from an asynchronous

00:11:54,760 --> 00:12:00,040
context you have to basically make a

00:11:57,040 --> 00:12:01,240
thread shove the function in there run

00:12:00,040 --> 00:12:02,410
the function in the thread get the

00:12:01,240 --> 00:12:05,500
result and pull it back on to the main

00:12:02,410 --> 00:12:07,960
thread as that's what we do here this

00:12:05,500 --> 00:12:09,700
function is pretty much just this code

00:12:07,960 --> 00:12:14,110
it's simplified there's more exception

00:12:09,700 --> 00:12:16,150
handling but you use pythons built-in

00:12:14,110 --> 00:12:17,830
functionality like Python core planned

00:12:16,150 --> 00:12:20,500
this they knew this would be a problem

00:12:17,830 --> 00:12:22,990
and so you can very easily just say hey

00:12:20,500 --> 00:12:25,260
take the synchronous function run it in

00:12:22,990 --> 00:12:28,120
a thread executor give me the result and

00:12:25,260 --> 00:12:29,830
await that future and it will correctly

00:12:28,120 --> 00:12:31,180
suspend your co routine do things on the

00:12:29,830 --> 00:12:33,970
background thread and everything runs

00:12:31,180 --> 00:12:36,160
pretty well and this is used for a few

00:12:33,970 --> 00:12:38,920
crucial things in fact wherever channels

00:12:36,160 --> 00:12:41,950
tries to talk to core Django this is

00:12:38,920 --> 00:12:47,230
what comes up for example if you want to

00:12:41,950 --> 00:12:48,490
call the ORM we use sync - async if you

00:12:47,230 --> 00:12:50,290
want to render templates we use it as

00:12:48,490 --> 00:12:51,520
well all these parts of Django that have

00:12:50,290 --> 00:12:53,920
been there for a long time and is still

00:12:51,520 --> 00:12:55,630
synchronous well at least me say it

00:12:53,920 --> 00:12:57,970
synchronous sure but I'm not gonna

00:12:55,630 --> 00:12:58,930
rewrite the ORM in a year it's a be

00:12:57,970 --> 00:12:59,650
asynchronous that's not gonna happen

00:12:58,930 --> 00:13:01,540
trust me

00:12:59,650 --> 00:13:04,240
we'd much better people than me and much

00:13:01,540 --> 00:13:06,100
more of them one more time I guess like

00:13:04,240 --> 00:13:08,110
luck Meena hut for like three years it

00:13:06,100 --> 00:13:12,040
might happen and that's not gonna happen

00:13:08,110 --> 00:13:16,030
either so like this is how we mostly use

00:13:12,040 --> 00:13:18,040
channels it pretty much lives in front

00:13:16,030 --> 00:13:20,070
of Django so whenever you have a request

00:13:18,040 --> 00:13:21,970
it hits the asynchronous layer first

00:13:20,070 --> 00:13:23,380
that's all it's still a Singlish lead

00:13:21,970 --> 00:13:26,950
and then falls back to synchronous

00:13:23,380 --> 00:13:29,440
components afterwards but that's not how

00:13:26,950 --> 00:13:31,660
all of it works you have the other

00:13:29,440 --> 00:13:33,940
problem sometimes you want to call

00:13:31,660 --> 00:13:36,990
asynchronous code from synchronous code

00:13:33,940 --> 00:13:40,450
and the words particularly comes into

00:13:36,990 --> 00:13:43,680
place is when you realize that you want

00:13:40,450 --> 00:13:45,520
to write say an authentication library

00:13:43,680 --> 00:13:47,200
channels has an authentication

00:13:45,520 --> 00:13:49,480
middleware system that's very similar to

00:13:47,200 --> 00:13:51,699
Jango is a bit different and you want to

00:13:49,480 --> 00:13:53,739
call that authentication middleware

00:13:51,699 --> 00:13:55,029
from both your synchronous code and your

00:13:53,739 --> 00:13:57,609
synchronous code because everybody like

00:13:55,029 --> 00:13:59,439
if the user is writing code and as a

00:13:57,609 --> 00:14:01,540
user of channels you can choose to write

00:13:59,439 --> 00:14:03,040
synchronous code have it easy or your

00:14:01,540 --> 00:14:06,369
bright async risk code and have it more

00:14:03,040 --> 00:14:07,869
difficult but more powerful and so we

00:14:06,369 --> 00:14:09,189
fade the problem like well we have to

00:14:07,869 --> 00:14:11,529
let you call the function from wherever

00:14:09,189 --> 00:14:14,379
you like I don't want to write the

00:14:11,529 --> 00:14:16,389
function twice so we had to let you

00:14:14,379 --> 00:14:18,910
somehow call these asynchronous

00:14:16,389 --> 00:14:22,239
functions from potentially synchronous

00:14:18,910 --> 00:14:23,859
code now in Pais then as I said

00:14:22,239 --> 00:14:25,600
asynchronous code runs on what's called

00:14:23,859 --> 00:14:28,089
an event loop it basically takes over an

00:14:25,600 --> 00:14:30,040
entire thread runs the event loop in the

00:14:28,089 --> 00:14:31,779
main part of that thread and it sits

00:14:30,040 --> 00:14:33,489
there waiting for events when an event

00:14:31,779 --> 00:14:35,589
happens it goes runs a KO routine for it

00:14:33,489 --> 00:14:37,480
comes back again and so to run a

00:14:35,589 --> 00:14:39,970
synchronous code it needs an event loop

00:14:37,480 --> 00:14:41,619
you defined an event loop give you a

00:14:39,970 --> 00:14:44,709
signal as co-routine to it and say hey

00:14:41,619 --> 00:14:46,149
you run this if you remember the

00:14:44,709 --> 00:14:48,429
previous code sample was pretty easy

00:14:46,149 --> 00:14:49,929
this is a simplified version of the next

00:14:48,429 --> 00:14:51,309
piece of code you're not meant to read

00:14:49,929 --> 00:14:53,019
this don't worry

00:14:51,309 --> 00:14:55,809
in short what this is doing is trying to

00:14:53,019 --> 00:14:58,720
find an event loop it does two things if

00:14:55,809 --> 00:15:00,879
you're running in a thread it tries to

00:14:58,720 --> 00:15:02,559
go and find the main thread with its

00:15:00,879 --> 00:15:04,419
event loop and run it there which is

00:15:02,559 --> 00:15:05,709
what you want ideally but if you're

00:15:04,419 --> 00:15:08,589
running in a fully synchronous

00:15:05,709 --> 00:15:11,980
application for example if you are in a

00:15:08,589 --> 00:15:13,359
managed stop I command you have a main

00:15:11,980 --> 00:15:15,160
loop with an event loop you're running

00:15:13,359 --> 00:15:17,379
in a purely synchronous context so I so

00:15:15,160 --> 00:15:19,209
make its own event loop spin one up from

00:15:17,379 --> 00:15:22,419
from scratch put it into that and bring

00:15:19,209 --> 00:15:23,230
it back again this is the simplified

00:15:22,419 --> 00:15:23,819
version how to do it if you're

00:15:23,230 --> 00:15:28,179
interested

00:15:23,819 --> 00:15:30,160
now this is something you should never

00:15:28,179 --> 00:15:31,419
care about probably I mean you're at

00:15:30,160 --> 00:15:33,970
this talks you care about it somewhat

00:15:31,419 --> 00:15:36,100
I'm sure but the point being in the end

00:15:33,970 --> 00:15:38,199
end of the day I don't want my users to

00:15:36,100 --> 00:15:40,989
worry about this too much like this is a

00:15:38,199 --> 00:15:43,089
lot of like Python internal stuff if you

00:15:40,989 --> 00:15:43,509
want to know the event loop great that's

00:15:43,089 --> 00:15:46,179
lovely

00:15:43,509 --> 00:15:47,499
congratulations please come and help but

00:15:46,179 --> 00:15:51,730
most people shouldn't have to know that

00:15:47,499 --> 00:15:54,429
stuff and so this helps take that idea

00:15:51,730 --> 00:15:56,049
of having a more abstract interface you

00:15:54,429 --> 00:15:58,649
can use and make it something like we

00:15:56,049 --> 00:16:01,739
could say like hey you can write fully

00:15:58,649 --> 00:16:04,389
async native api's write them once and

00:16:01,739 --> 00:16:05,470
if you want synchronous code to use them

00:16:04,389 --> 00:16:07,300
you still can

00:16:05,470 --> 00:16:08,740
so for example if you're writing in a

00:16:07,300 --> 00:16:11,710
child application and say hey I've

00:16:08,740 --> 00:16:14,710
written an entirely asynchronous native

00:16:11,710 --> 00:16:16,600
way to query my writer's database and

00:16:14,710 --> 00:16:20,140
get like current user present status

00:16:16,600 --> 00:16:21,820
it's fantastic it's very useful and if

00:16:20,140 --> 00:16:23,080
you have a couple of management commands

00:16:21,820 --> 00:16:26,470
you want to use that think that stuff

00:16:23,080 --> 00:16:29,140
too they can just use the same code via

00:16:26,470 --> 00:16:32,500
these helpers and you don't have to

00:16:29,140 --> 00:16:35,770
write a second synchronous stack for

00:16:32,500 --> 00:16:38,470
example in Python the Redis binding you

00:16:35,770 --> 00:16:40,300
use for synchronous code is an entirely

00:16:38,470 --> 00:16:42,400
different package to the one you use for

00:16:40,300 --> 00:16:45,490
a scripts code and they have different

00:16:42,400 --> 00:16:47,440
api's and behave differently like it's

00:16:45,490 --> 00:16:48,940
not just replacing pools you have to

00:16:47,440 --> 00:16:50,560
restructure your code and tied

00:16:48,940 --> 00:16:52,150
understand how that looks and that's

00:16:50,560 --> 00:16:54,460
true of a lot of libraries a lot of

00:16:52,150 --> 00:16:55,750
asynchronous Python isn't quite the same

00:16:54,460 --> 00:16:57,430
as synchronous stuff they're different

00:16:55,750 --> 00:16:59,470
libraries at different calling patents

00:16:57,430 --> 00:17:01,690
and so it's very very useful to be able

00:16:59,470 --> 00:17:05,439
to just reuse stuff you've written

00:17:01,690 --> 00:17:09,010
before and as I said you want to write

00:17:05,439 --> 00:17:12,579
both as somebody who knows a thing was

00:17:09,010 --> 00:17:15,189
programming reasonably well I will try

00:17:12,579 --> 00:17:18,430
and never write it if I can it is so

00:17:15,189 --> 00:17:21,699
easy to screw up and shoot yourself in

00:17:18,430 --> 00:17:23,260
the foot that if I can find a very

00:17:21,699 --> 00:17:25,900
reasonable way to write it synchronously

00:17:23,260 --> 00:17:28,030
I want totally going to do that because

00:17:25,900 --> 00:17:29,350
most of the problems in my career have

00:17:28,030 --> 00:17:31,600
been from writing code that is too

00:17:29,350 --> 00:17:33,640
complicated and not realizing it not for

00:17:31,600 --> 00:17:35,170
any code that's not efficient enough if

00:17:33,640 --> 00:17:37,000
it's not very efficient you add more

00:17:35,170 --> 00:17:39,060
servers that's an easy thing to do you

00:17:37,000 --> 00:17:42,190
go to Amazon and press the plus button

00:17:39,060 --> 00:17:44,050
that's hard to screw up if you make it

00:17:42,190 --> 00:17:46,090
clever and magical but occasionally at

00:17:44,050 --> 00:17:48,430
deadlocks let's whole site down south of

00:17:46,090 --> 00:17:50,020
the fix and so generally like I would

00:17:48,430 --> 00:17:51,400
encourage most of my colleagues who

00:17:50,020 --> 00:17:53,800
write code like this to and anyone out

00:17:51,400 --> 00:17:55,990
there right things synchronously first

00:17:53,800 --> 00:17:57,370
and when you find a thing that's a

00:17:55,990 --> 00:17:58,660
particular bottleneck or if it's just

00:17:57,370 --> 00:18:00,640
naturally can't be done synchronously

00:17:58,660 --> 00:18:03,040
like having determinate thousand people

00:18:00,640 --> 00:18:05,050
at once then and only then jump to

00:18:03,040 --> 00:18:06,430
asynchronous and this is an important

00:18:05,050 --> 00:18:08,890
part annals right I want you to be able

00:18:06,430 --> 00:18:10,810
to take those two worlds and use them

00:18:08,890 --> 00:18:12,400
when you want to crucially I want you to

00:18:10,810 --> 00:18:14,590
build the right views and the rest of

00:18:12,400 --> 00:18:15,460
your site normally and then just for the

00:18:14,590 --> 00:18:17,230
bits that need it

00:18:15,460 --> 00:18:18,740
just like the WebSocket bits or the chat

00:18:17,230 --> 00:18:21,320
bits or whatever

00:18:18,740 --> 00:18:22,550
there you can use asynchronous code and

00:18:21,320 --> 00:18:24,770
even then you've used some synchronous

00:18:22,550 --> 00:18:26,660
stuff like use it exactly where and when

00:18:24,770 --> 00:18:29,510
you want it and when you need that level

00:18:26,660 --> 00:18:30,950
of power and you don't use it when you

00:18:29,510 --> 00:18:34,040
don't need it you can be safe and and

00:18:30,950 --> 00:18:35,510
more reasonable that said there is one

00:18:34,040 --> 00:18:38,540
small problem

00:18:35,510 --> 00:18:42,260
in fact on this diagram there is an

00:18:38,540 --> 00:18:46,700
arrow right here this arrow is far too

00:18:42,260 --> 00:18:49,070
small for the problem it belies you have

00:18:46,700 --> 00:18:50,420
all I presume heard of WSGI but your

00:18:49,070 --> 00:18:51,140
hands if you've heard of WSGI or whiskey

00:18:50,420 --> 00:18:53,420
it's often called

00:18:51,140 --> 00:18:55,970
that's like 90% the room piece of fact

00:18:53,420 --> 00:18:57,950
that's good it is a wonderful protocol

00:18:55,970 --> 00:19:00,440
we've had in Python for many many many

00:18:57,950 --> 00:19:02,750
years now that standardizes how web

00:19:00,440 --> 00:19:04,970
server talks to an application it's

00:19:02,750 --> 00:19:09,260
great it has one small problem it's

00:19:04,970 --> 00:19:12,650
fully synchronous and so you go hmm okay

00:19:09,260 --> 00:19:14,780
well what if we had a version that

00:19:12,650 --> 00:19:17,090
wasn't fully synchronous and this again

00:19:14,780 --> 00:19:19,190
has been argued at length for many many

00:19:17,090 --> 00:19:21,590
years on various channels like well we

00:19:19,190 --> 00:19:23,179
can just make the in async deathlike now

00:19:21,590 --> 00:19:25,610
it isn't of these reasons and so

00:19:23,179 --> 00:19:29,090
eventually the problem of how do we make

00:19:25,610 --> 00:19:31,520
whiskey async here problem for me with

00:19:29,090 --> 00:19:35,600
channels and I'm a person who believes

00:19:31,520 --> 00:19:37,220
in taking feedback to a point and then

00:19:35,600 --> 00:19:38,510
going away and building the thing and

00:19:37,220 --> 00:19:40,730
then kind of I can see how the thing

00:19:38,510 --> 00:19:42,110
works in practice and this is part of

00:19:40,730 --> 00:19:43,970
the channels one the channels to thing

00:19:42,110 --> 00:19:46,400
right like there are two versions of my

00:19:43,970 --> 00:19:47,830
approach to replacing WSGI and I'm much

00:19:46,400 --> 00:19:52,309
happy with the second one the first one

00:19:47,830 --> 00:19:53,780
so crucially a SGI it's whisky with an A

00:19:52,309 --> 00:19:55,940
in it it's a very inventive naming

00:19:53,780 --> 00:19:59,210
scheme I'm very proud of this but

00:19:55,940 --> 00:20:02,530
crucially it is a similar replacement

00:19:59,210 --> 00:20:04,850
for what CC I does it lets you have

00:20:02,530 --> 00:20:07,580
different servers and different

00:20:04,850 --> 00:20:09,230
applications that can coexist

00:20:07,580 --> 00:20:11,270
you have to write application to begin

00:20:09,230 --> 00:20:15,320
to a certain server when I joined the

00:20:11,270 --> 00:20:17,929
Python it was awhile ago now and it was

00:20:15,320 --> 00:20:20,690
back in the days where we hadn't quite

00:20:17,929 --> 00:20:22,760
got WSGI fully supported yet it was kind

00:20:20,690 --> 00:20:24,830
of a new thing and so some of the old

00:20:22,760 --> 00:20:27,650
web frameworks were like well you have

00:20:24,830 --> 00:20:30,140
to use this web server for our framework

00:20:27,650 --> 00:20:31,790
you can't find anything else and it was

00:20:30,140 --> 00:20:33,980
like okay that's terrible

00:20:31,790 --> 00:20:37,160
well event like whoever not like it well

00:20:33,980 --> 00:20:38,960
you know screwed and I didn't want that

00:20:37,160 --> 00:20:42,290
for this new stuff I didn't want to say

00:20:38,960 --> 00:20:43,790
hey the only web server you can use is

00:20:42,290 --> 00:20:45,950
the one andrew writes in his spare time

00:20:43,790 --> 00:20:48,800
that's not a way to do open source to

00:20:45,950 --> 00:20:52,670
stain ugly trust me and so having a

00:20:48,800 --> 00:20:55,970
standard is very important WSGI is

00:20:52,670 --> 00:20:57,650
pretty simple it's a callable that takes

00:20:55,970 --> 00:20:59,030
an environment that's basically load of

00:20:57,650 --> 00:21:01,160
like you know like it's a big dictionary

00:20:59,030 --> 00:21:04,190
of what happens like that method and the

00:21:01,160 --> 00:21:06,920
path and call them all to start response

00:21:04,190 --> 00:21:08,660
you do stuff you start your response

00:21:06,920 --> 00:21:11,360
like a 200 ok then you send some data

00:21:08,660 --> 00:21:13,700
it's very simplistic i wanted a similar

00:21:11,360 --> 00:21:16,070
thing for a SGI but it's a bit more of a

00:21:13,700 --> 00:21:18,980
complex problem so this is as simple as

00:21:16,070 --> 00:21:20,540
i managed to get it it is a callable

00:21:18,980 --> 00:21:22,070
that returns a callable which i

00:21:20,540 --> 00:21:24,290
apologise for but it has to be like that

00:21:22,070 --> 00:21:26,630
the crucial e you can when it's a class

00:21:24,290 --> 00:21:28,070
it gets called with the scope which is

00:21:26,630 --> 00:21:29,510
like the environment it tells you what

00:21:28,070 --> 00:21:30,830
the path is what the method is what's

00:21:29,510 --> 00:21:33,290
happening where am i what kind of

00:21:30,830 --> 00:21:35,720
protocol is this and then once it's been

00:21:33,290 --> 00:21:38,000
initialized you just get cool with this

00:21:35,720 --> 00:21:40,970
cool method you get given to call apples

00:21:38,000 --> 00:21:42,410
one that sends and one that receives you

00:21:40,970 --> 00:21:45,830
sit there you listen for events on the

00:21:42,410 --> 00:21:48,590
receive and then when you get the events

00:21:45,830 --> 00:21:51,500
you act on them and then you send some

00:21:48,590 --> 00:21:54,650
stuff and crucially I like to be rich GI

00:21:51,500 --> 00:21:57,320
you can't receive more than once here if

00:21:54,650 --> 00:22:00,500
an event happens the only event you have

00:21:57,320 --> 00:22:02,990
is my function has been cooled so you

00:22:00,500 --> 00:22:06,080
can't have say WebSocket that has like

00:22:02,990 --> 00:22:08,690
multiple incoming packets in a SGI you

00:22:06,080 --> 00:22:11,000
have that separate receive away table so

00:22:08,690 --> 00:22:12,290
you can await again and again and again

00:22:11,000 --> 00:22:13,610
and receive all those events and that's

00:22:12,290 --> 00:22:16,810
the crucial design difference between

00:22:13,610 --> 00:22:20,990
the two of them the other difference is

00:22:16,810 --> 00:22:23,090
the wonderful shall we say vision we had

00:22:20,990 --> 00:22:26,690
back in the early woodsy days a whiskey

00:22:23,090 --> 00:22:28,340
middleware we were like ah well everyone

00:22:26,690 --> 00:22:30,080
had like Django has a middleware the

00:22:28,340 --> 00:22:32,570
other stuff amid like giant like turbo

00:22:30,080 --> 00:22:33,590
gears at that point had middleware and

00:22:32,570 --> 00:22:36,290
what if they could all share the same

00:22:33,590 --> 00:22:38,690
stuff and there was a unfortunately

00:22:36,290 --> 00:22:42,950
unsuccessful attempt to do this with

00:22:38,690 --> 00:22:44,870
whiskey middleware and being a little

00:22:42,950 --> 00:22:46,400
bit stubborn I've come back to that

00:22:44,870 --> 00:22:50,690
and doing what's called Turtles all the

00:22:46,400 --> 00:22:53,330
way down so the way SGI is designed it's

00:22:50,690 --> 00:22:55,010
not just a protocol for talking from a

00:22:53,330 --> 00:22:57,710
web server into a framework every

00:22:55,010 --> 00:22:58,460
component of channels talks a SGI to

00:22:57,710 --> 00:23:02,270
each other

00:22:58,460 --> 00:23:04,790
the middlewares are just a SGO apps the

00:23:02,270 --> 00:23:06,590
wrap other airshow apps the routing is

00:23:04,790 --> 00:23:08,450
just an app that takes a dictionary of

00:23:06,590 --> 00:23:11,090
other apps they all nests and

00:23:08,450 --> 00:23:13,880
interweaves in certain ways you can

00:23:11,090 --> 00:23:17,090
reuse the charity channels

00:23:13,880 --> 00:23:18,470
Chango SGI middleware in the other HDI

00:23:17,090 --> 00:23:20,929
frameworks and it works perfectly fine

00:23:18,470 --> 00:23:22,040
like that actually does work today it's

00:23:20,929 --> 00:23:24,260
like this is the other philosophy of

00:23:22,040 --> 00:23:26,390
there's like because it's much more

00:23:24,260 --> 00:23:30,260
Nesta bull and WSGI because it have that

00:23:26,390 --> 00:23:31,610
sort of that nice symmetry of send and

00:23:30,260 --> 00:23:33,650
receive rather than being much more

00:23:31,610 --> 00:23:36,860
biased in one way you can nest it much

00:23:33,650 --> 00:23:38,660
more easily but crucially I want to talk

00:23:36,860 --> 00:23:40,670
at the end here for a little bit what

00:23:38,660 --> 00:23:42,500
does this mean for Django in particular

00:23:40,670 --> 00:23:44,179
I show the diagram earlier of like

00:23:42,500 --> 00:23:46,940
there's a synchronous portion and an

00:23:44,179 --> 00:23:49,850
asynchronous portion but how much of

00:23:46,940 --> 00:23:53,150
Django can we make async how much can we

00:23:49,850 --> 00:23:55,460
shrink that box and take it from being a

00:23:53,150 --> 00:23:57,470
huge proportion of Django being

00:23:55,460 --> 00:23:57,860
synchronous to being less and less or

00:23:57,470 --> 00:24:01,010
less

00:23:57,860 --> 00:24:04,880
can we take the Django routing layer and

00:24:01,010 --> 00:24:06,200
make that fully asynchronous and reuse

00:24:04,880 --> 00:24:07,850
it from the synchronous part if we can

00:24:06,200 --> 00:24:09,679
can we take some of the middleware and

00:24:07,850 --> 00:24:11,300
do this can we take some of the view

00:24:09,679 --> 00:24:13,670
layer like how much we push that

00:24:11,300 --> 00:24:15,830
boundary in and then just say well if

00:24:13,670 --> 00:24:17,750
you kind from a whisky application we

00:24:15,830 --> 00:24:20,300
just bridge across the asynchronous and

00:24:17,750 --> 00:24:21,710
run it in a single thread by itself it

00:24:20,300 --> 00:24:23,809
won't perform any worse it performs the

00:24:21,710 --> 00:24:25,690
same and what that means is you can

00:24:23,809 --> 00:24:27,770
share all that code between two things

00:24:25,690 --> 00:24:31,520
of course the big elephant in the room

00:24:27,770 --> 00:24:33,380
here is top of that that shot what does

00:24:31,520 --> 00:24:36,440
may synchronous Django Arum looked like

00:24:33,380 --> 00:24:38,030
is it even possible for many years this

00:24:36,440 --> 00:24:40,070
was the thing that scared me the most I

00:24:38,030 --> 00:24:42,830
just didn't think this is possible

00:24:40,070 --> 00:24:44,120
thankfully a series of conferences this

00:24:42,830 --> 00:24:46,190
year I've been very fortunate to have

00:24:44,120 --> 00:24:49,580
other people in the PI community sit

00:24:46,190 --> 00:24:52,760
down talk me through this and slowly but

00:24:49,580 --> 00:24:54,650
surely I think we can do this like I

00:24:52,760 --> 00:24:56,330
posted a plan to the Django dev mailing

00:24:54,650 --> 00:24:57,920
list a few months ago with a rough

00:24:56,330 --> 00:25:00,980
outline how to do this

00:24:57,920 --> 00:25:02,540
the only thing we would lose is magical

00:25:00,980 --> 00:25:05,240
foreign key jumping when you go like ol

00:25:02,540 --> 00:25:06,350
model dot foreign key door filled with

00:25:05,240 --> 00:25:08,270
haven't you'd have to deduce that

00:25:06,350 --> 00:25:11,330
related which honestly you should be

00:25:08,270 --> 00:25:14,840
doing anyway it's like this seems

00:25:11,330 --> 00:25:16,790
possible right like can we make Django

00:25:14,840 --> 00:25:18,350
more pluggable like Django can criticize

00:25:16,790 --> 00:25:20,240
for many many years by the rest of the

00:25:18,350 --> 00:25:23,360
Python web community for being this sort

00:25:20,240 --> 00:25:26,570
of stool or monolith it's very hard to

00:25:23,360 --> 00:25:29,180
come at Django and reuse parts of it if

00:25:26,570 --> 00:25:32,150
you ever tried to import import part of

00:25:29,180 --> 00:25:35,000
Django outside of Django you're very

00:25:32,150 --> 00:25:36,560
familiar with you must configure Django

00:25:35,000 --> 00:25:39,680
settings module before importing Django

00:25:36,560 --> 00:25:43,420
like this giant trailer like Django

00:25:39,680 --> 00:25:46,250
requires this like level of setup and

00:25:43,420 --> 00:25:50,300
like investment that means reusing parts

00:25:46,250 --> 00:25:52,730
of it is very very difficult so it's not

00:25:50,300 --> 00:25:55,460
just taking like Django itself but like

00:25:52,730 --> 00:25:58,280
how do we get the whole Python web

00:25:55,460 --> 00:25:59,900
ecosystem to this next step how do we

00:25:58,280 --> 00:26:03,080
get things like flowers like pyramid

00:25:59,900 --> 00:26:04,820
like other web frameworks to also make

00:26:03,080 --> 00:26:07,910
the jump from synchronous to

00:26:04,820 --> 00:26:12,410
asynchronous but as part of that we have

00:26:07,910 --> 00:26:15,100
to realize something most people buy a

00:26:12,410 --> 00:26:18,140
pure number of developers do not need

00:26:15,100 --> 00:26:19,490
asynchronous code if you think you do

00:26:18,140 --> 00:26:21,350
you might be right

00:26:19,490 --> 00:26:24,170
I'm not here to judge you but think

00:26:21,350 --> 00:26:27,170
about it it's very shining exciting but

00:26:24,170 --> 00:26:30,740
a lot of normal boring code is perfectly

00:26:27,170 --> 00:26:33,050
fine synchronous we don't need to

00:26:30,740 --> 00:26:34,880
replace whiskey for a lot of people it

00:26:33,050 --> 00:26:36,860
would be much better in the long run it

00:26:34,880 --> 00:26:38,480
performs more efficiently for one but

00:26:36,860 --> 00:26:40,490
it's not this really really important

00:26:38,480 --> 00:26:41,780
requirement and one of the things that's

00:26:40,490 --> 00:26:44,810
very hard to do as an open source

00:26:41,780 --> 00:26:46,700
project one of those dangerous thing to

00:26:44,810 --> 00:26:48,400
do as an open source project is to

00:26:46,700 --> 00:26:50,900
impose this kind of restriction you

00:26:48,400 --> 00:26:52,880
often see what happens is like people

00:26:50,900 --> 00:26:55,490
will family open source project they

00:26:52,880 --> 00:26:57,320
will get to buried in the weeds grew up

00:26:55,490 --> 00:26:59,540
with it like and often this happens a

00:26:57,320 --> 00:27:02,180
lot with with many projects and myself

00:26:59,540 --> 00:27:04,280
included they end up in like bigger

00:27:02,180 --> 00:27:07,130
companies they see the big enterprise

00:27:04,280 --> 00:27:09,800
problems and like their point of view

00:27:07,130 --> 00:27:11,389
ends up just being that big enterprise

00:27:09,800 --> 00:27:12,859
thing I'm like well you know everyone

00:27:11,389 --> 00:27:15,889
these really nasty gnarly problems

00:27:12,859 --> 00:27:17,659
that's not true like a lot of and we saw

00:27:15,889 --> 00:27:18,950
a surveyor today like a look here like

00:27:17,659 --> 00:27:20,690
this is their first showing a corn like

00:27:18,950 --> 00:27:23,329
they may likes doing small Django

00:27:20,690 --> 00:27:25,700
websites one of the key things about

00:27:23,329 --> 00:27:28,489
Django that I've loved from day one is

00:27:25,700 --> 00:27:31,219
that you can come in install it and run

00:27:28,489 --> 00:27:34,969
it very quickly you can get started and

00:27:31,219 --> 00:27:35,539
crucially as you grow it gets out of

00:27:34,969 --> 00:27:37,909
your way

00:27:35,539 --> 00:27:40,759
Chandler's problem Django's strength

00:27:37,909 --> 00:27:43,190
rather is to have this very opinionated

00:27:40,759 --> 00:27:44,719
framework at the beginning when you are

00:27:43,190 --> 00:27:46,039
getting started and not sure what to do

00:27:44,719 --> 00:27:47,089
or you're a big company and like you can

00:27:46,039 --> 00:27:49,700
solve your mother table you need to

00:27:47,089 --> 00:27:51,649
standard and then as you get bigger as

00:27:49,700 --> 00:27:54,979
you realize what your scaling problems

00:27:51,649 --> 00:27:57,429
are you can piecemeal take parts of it

00:27:54,979 --> 00:27:59,389
and remove those and scale them up and

00:27:57,429 --> 00:28:01,309
that's kind of what's happened here the

00:27:59,389 --> 00:28:03,409
problem is that we can't piecemeal

00:28:01,309 --> 00:28:07,369
replace wsgo you have to buy into this

00:28:03,409 --> 00:28:11,659
wholesale since i've launched charles ii

00:28:07,369 --> 00:28:12,799
we now have at least three servers we

00:28:11,659 --> 00:28:14,690
have at least three frameworks to

00:28:12,799 --> 00:28:16,929
support this I've had some good talks

00:28:14,690 --> 00:28:19,309
with other server and framework

00:28:16,929 --> 00:28:21,679
maintainer some of whom you'll maintain

00:28:19,309 --> 00:28:23,119
the big ones and there's general

00:28:21,679 --> 00:28:24,859
agreement we need to do this the problem

00:28:23,119 --> 00:28:27,649
is getting from wanting to actually

00:28:24,859 --> 00:28:29,929
having done it but right now you can go

00:28:27,649 --> 00:28:31,879
and run any of these three frameworks on

00:28:29,929 --> 00:28:33,739
any of these three servers and the dream

00:28:31,879 --> 00:28:36,289
is real it all runs properly and in many

00:28:33,739 --> 00:28:37,669
ways Daphne the one I maintain up our

00:28:36,289 --> 00:28:39,440
channels is probably the worse of these

00:28:37,669 --> 00:28:42,469
three because I don't really sure what

00:28:39,440 --> 00:28:43,909
I'm doing where the other two have like

00:28:42,469 --> 00:28:45,889
actual people who are good at their jobs

00:28:43,909 --> 00:28:49,969
so in many ways you want to use those

00:28:45,889 --> 00:28:51,769
ones that's part of it and like do we

00:28:49,969 --> 00:28:54,799
want everyone watching async right like

00:28:51,769 --> 00:28:56,450
anything we do but I think we want

00:28:54,799 --> 00:28:57,950
everyone have the option to write basic

00:28:56,450 --> 00:28:59,929
that's why it's important to me I think

00:28:57,950 --> 00:29:02,389
having a Django where we can have

00:28:59,929 --> 00:29:04,579
everyone have the option to write async

00:29:02,389 --> 00:29:07,249
what if you want to can go well this one

00:29:04,579 --> 00:29:09,409
view I want to fetch five web pages in

00:29:07,249 --> 00:29:11,539
parallel this one view basic that's my

00:29:09,409 --> 00:29:14,779
dream I think we should have that if you

00:29:11,539 --> 00:29:17,059
want to fetch 25 models in parallel you

00:29:14,779 --> 00:29:19,159
can we don't have to I think that's the

00:29:17,059 --> 00:29:23,239
way to do it and that kind of comes in

00:29:19,159 --> 00:29:24,829
Oh what is Django is Django that thing

00:29:23,239 --> 00:29:25,320
we reached you know a few years ago like

00:29:24,829 --> 00:29:27,419
it's very

00:29:25,320 --> 00:29:30,120
Abel it's about in a certain way oh is

00:29:27,419 --> 00:29:32,669
Django a place has to be revolve for the

00:29:30,120 --> 00:29:34,409
next you know five years of Python we

00:29:32,669 --> 00:29:36,840
can't just stand still and do nothing in

00:29:34,409 --> 00:29:38,519
my personal opinion like the scene is

00:29:36,840 --> 00:29:41,669
changing like how I make are the Django

00:29:38,519 --> 00:29:44,730
ORM arguably it's biggest feature into

00:29:41,669 --> 00:29:46,110
this amazing async capable thing that

00:29:44,730 --> 00:29:48,240
you can use in many years to come

00:29:46,110 --> 00:29:50,669
whose amazing parallel queries to solve

00:29:48,240 --> 00:29:53,039
problems at scale the you otherwise

00:29:50,669 --> 00:29:54,120
wouldn't be able to honestly I think

00:29:53,039 --> 00:29:56,430
that's what the future trend give us

00:29:54,120 --> 00:30:05,749
thank you very much

00:29:56,430 --> 00:30:05,749

YouTube URL: https://www.youtube.com/watch?v=cNbcHvRvJsg


