Title: Teaching OOP using Python (Progressing from GameMaker to Pygame)
Publication date: 2018-08-25
Playlist: PyCon Australia 2018
Description: 
	Brad Nielsen

https://2018.pycon-au.org/talks/42567-teaching-oop-using-python-progressing-from-gamemaker-to-pygame/

Teaching students Object-Oriented Programming(OOP) is challenging but invaluable. Due to its abstract nature, OOP is best taught in a fun and practical context such as game design. This talk will examine the progression of teaching OOP using the drag-and-drop interface of Game Maker to using Pygame.

Python, PyCon, PyConAU, australia, programming, sydney

This video is licensed under CC BY 3.0 AU ‹https://creativecommons.org/licenses/by/3.0/au/›.

PyCon Australia (“PyCon AU”) is the national conference for the Python Programming Community, bringing together professional, student and enthusiast developers with a love for developing with Python.

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 24 - 28 2018.

Python, PyCon, PyConAU
Captions: 
	00:00:05,150 --> 00:00:15,360
all right welcome back to the education

00:00:10,380 --> 00:00:17,940
track here at PyCon au 2018 we are

00:00:15,360 --> 00:00:19,430
joined by the fantastic at Brad Nelson

00:00:17,940 --> 00:00:21,740
we've got to talk to us about

00:00:19,430 --> 00:00:25,529
object-oriented programming

00:00:21,740 --> 00:00:28,170
moving from game maker to high game Brad

00:00:25,529 --> 00:00:30,480
is currently the judo technologies

00:00:28,170 --> 00:00:33,420
coordinator at Mars College in Ashgrove

00:00:30,480 --> 00:00:35,040
he's taught itv for several years

00:00:33,420 --> 00:00:37,350
teaching Python specifically for five

00:00:35,040 --> 00:00:38,600
years and before that he worked for

00:00:37,350 --> 00:00:41,100
several years as an e-learning

00:00:38,600 --> 00:00:52,079
specialist for various companies and

00:00:41,100 --> 00:00:55,920
organizations Brad thank you okay so yes

00:00:52,079 --> 00:00:59,010
I've been teaching IT for last five

00:00:55,920 --> 00:01:02,160
years of a certain school and in that

00:00:59,010 --> 00:01:04,439
time we've gone purely Python so I

00:01:02,160 --> 00:01:05,580
quickly made the decision that Pythian

00:01:04,439 --> 00:01:08,400
was a really good language for my

00:01:05,580 --> 00:01:10,619
students to learn but the difficulty and

00:01:08,400 --> 00:01:13,350
the challenges were how to actually

00:01:10,619 --> 00:01:16,619
develop that progression into students

00:01:13,350 --> 00:01:18,540
learning Python and there's two main

00:01:16,619 --> 00:01:21,689
challenges that I've identified one is

00:01:18,540 --> 00:01:25,380
transitioning students from visual block

00:01:21,689 --> 00:01:28,320
coding into text based coding and the

00:01:25,380 --> 00:01:30,000
second challenge in some ways it's it's

00:01:28,320 --> 00:01:32,250
a it's a challenge that I've chosen for

00:01:30,000 --> 00:01:36,470
myself is how do I actually teach my

00:01:32,250 --> 00:01:36,470
students object-oriented programming

00:01:37,220 --> 00:01:42,450
there's actually a lot of debate about

00:01:39,060 --> 00:01:45,119
this certainly in Queensland where I'm

00:01:42,450 --> 00:01:48,149
from the Queensland Government's just

00:01:45,119 --> 00:01:51,659
produced the new IT syllabus and it

00:01:48,149 --> 00:01:53,909
begins next year and that IT syllabus

00:01:51,659 --> 00:01:56,670
makes no mention of object-oriented

00:01:53,909 --> 00:01:59,280
programming it had specifically

00:01:56,670 --> 00:02:02,579
mentioned it and then a lot of people

00:01:59,280 --> 00:02:04,969
complained and every reference to OOP

00:02:02,579 --> 00:02:07,770
was actually removed from the syllabus

00:02:04,969 --> 00:02:12,840
it's not that I can't teach it I'm still

00:02:07,770 --> 00:02:15,209
able to teach it but yeah but I think

00:02:12,840 --> 00:02:18,080
for a lot of educators it scared them

00:02:15,209 --> 00:02:21,000
and to be fair

00:02:18,080 --> 00:02:23,629
object-oriented programming does present

00:02:21,000 --> 00:02:26,430
massive challenges in terms of teaching

00:02:23,629 --> 00:02:29,250
from my point of view though it's really

00:02:26,430 --> 00:02:32,670
important it's important because it's

00:02:29,250 --> 00:02:34,590
what's used in industry it leads to

00:02:32,670 --> 00:02:37,530
better programming more efficient

00:02:34,590 --> 00:02:41,310
programming and it also allows students

00:02:37,530 --> 00:02:44,329
to be able to effectively use the Python

00:02:41,310 --> 00:02:47,670
libraries that are out there to

00:02:44,329 --> 00:02:51,810
basically create a myriad of of exciting

00:02:47,670 --> 00:02:54,329
and interesting applications and one of

00:02:51,810 --> 00:02:55,799
the best things about my job is I get to

00:02:54,329 --> 00:02:57,420
play around with all these different

00:02:55,799 --> 00:03:02,220
Python libraries and different gadgets

00:02:57,420 --> 00:03:03,840
that might run Python and it's super

00:03:02,220 --> 00:03:06,360
interesting for me but it's also super

00:03:03,840 --> 00:03:08,720
interesting for the kids but on some

00:03:06,360 --> 00:03:12,150
level it still requires students to

00:03:08,720 --> 00:03:16,019
understand a lot about object-oriented

00:03:12,150 --> 00:03:18,269
programming because objects give context

00:03:16,019 --> 00:03:20,790
to what they're learning I mean even

00:03:18,269 --> 00:03:23,579
teaching kids Python turtle for example

00:03:20,790 --> 00:03:25,410
Python turtle has an object in it so

00:03:23,579 --> 00:03:29,910
rather than students actually just

00:03:25,410 --> 00:03:31,889
making blinds calls to the library I

00:03:29,910 --> 00:03:33,389
would actually have them understand what

00:03:31,889 --> 00:03:35,010
they're doing and then being able to

00:03:33,389 --> 00:03:36,049
create their own objects by the end of

00:03:35,010 --> 00:03:41,280
year 12

00:03:36,049 --> 00:03:44,609
but OOP is difficult to understand and

00:03:41,280 --> 00:03:48,690
just before I go on one of the biggest

00:03:44,609 --> 00:03:50,910
issues is its abstract when we talk

00:03:48,690 --> 00:03:53,849
about objects it's actually it's hard to

00:03:50,910 --> 00:03:56,750
teach students that a piece of code can

00:03:53,849 --> 00:03:58,889
actually have properties and behaviors

00:03:56,750 --> 00:04:00,359
if you haven't had much to do with

00:03:58,889 --> 00:04:02,489
object-oriented programming I'm just

00:04:00,359 --> 00:04:04,980
going to go quickly through it now just

00:04:02,489 --> 00:04:07,530
to give context to what I'm saying but

00:04:04,980 --> 00:04:09,660
for me I believe teaching students

00:04:07,530 --> 00:04:12,299
object-oriented programming gives them

00:04:09,660 --> 00:04:15,480
the context to further their studies as

00:04:12,299 --> 00:04:16,799
well so if you haven't used well I see

00:04:15,480 --> 00:04:19,919
two nights you've all probably used

00:04:16,799 --> 00:04:22,320
objects Python is a very much an

00:04:19,919 --> 00:04:23,969
object-oriented programming language as

00:04:22,320 --> 00:04:25,720
something as simple as a string is

00:04:23,969 --> 00:04:28,180
actually an object

00:04:25,720 --> 00:04:31,210
it's an object is that is a complex data

00:04:28,180 --> 00:04:34,050
type and a string contains within it a

00:04:31,210 --> 00:04:36,640
list of characters and it also contains

00:04:34,050 --> 00:04:40,510
functions that can be used to manipulate

00:04:36,640 --> 00:04:42,880
those characters so when we talk about

00:04:40,510 --> 00:04:44,290
objects it's about using that datatype

00:04:42,880 --> 00:04:46,540
effectively we don't actually need to

00:04:44,290 --> 00:04:52,900
see what's inside it to be able to use

00:04:46,540 --> 00:04:54,880
it the foundation of an object is

00:04:52,900 --> 00:04:57,160
something known as a class and in

00:04:54,880 --> 00:05:00,460
essence a class is a blueprint to

00:04:57,160 --> 00:05:02,950
creating that object so while we can use

00:05:00,460 --> 00:05:04,690
someone else's class to create objects

00:05:02,950 --> 00:05:06,430
we can also define our own classes and

00:05:04,690 --> 00:05:10,320
define our own objects so we're defining

00:05:06,430 --> 00:05:13,810
our own advanced complex data structures

00:05:10,320 --> 00:05:15,850
when we actually create the objects it

00:05:13,810 --> 00:05:19,030
takes up memory and then it becomes an

00:05:15,850 --> 00:05:20,410
instance so the class is a blueprint for

00:05:19,030 --> 00:05:23,110
an object we can make many of those

00:05:20,410 --> 00:05:24,700
objects when we create them it's known

00:05:23,110 --> 00:05:26,860
as instantiation we're actually creating

00:05:24,700 --> 00:05:28,750
an instance of that object some of these

00:05:26,860 --> 00:05:32,320
terms are important because when I talk

00:05:28,750 --> 00:05:35,230
about game maker and play game you'll

00:05:32,320 --> 00:05:36,790
actually find that there's actually a

00:05:35,230 --> 00:05:38,050
little similarity between what they're

00:05:36,790 --> 00:05:40,090
doing and there's a little symmetry

00:05:38,050 --> 00:05:42,190
between what they're doing and they're

00:05:40,090 --> 00:05:44,050
actually explicitly teaching students

00:05:42,190 --> 00:05:49,240
those types of object-oriented

00:05:44,050 --> 00:05:51,420
principles just going back to that there

00:05:49,240 --> 00:05:54,130
the example that I've got on the screen

00:05:51,420 --> 00:05:56,470
there's a bicycle object so let's say

00:05:54,130 --> 00:05:59,170
you're creating an object to represent a

00:05:56,470 --> 00:06:02,290
bicycle and see that the class contains

00:05:59,170 --> 00:06:04,660
functions functions to do with the

00:06:02,290 --> 00:06:07,360
object and it also contains its

00:06:04,660 --> 00:06:08,850
attributes so an object has and this is

00:06:07,360 --> 00:06:11,860
something that I teach my students

00:06:08,850 --> 00:06:13,810
explicitly an object has properties or

00:06:11,860 --> 00:06:18,430
attributes and it has behaviors or

00:06:13,810 --> 00:06:21,070
functions the benefits of doing it and

00:06:18,430 --> 00:06:23,580
this is why industry uses

00:06:21,070 --> 00:06:26,440
object-oriented programming you've got

00:06:23,580 --> 00:06:28,630
abstraction so we're simplifying the

00:06:26,440 --> 00:06:30,490
code in many ways we're focusing on an

00:06:28,630 --> 00:06:33,040
object does as opposed to what's

00:06:30,490 --> 00:06:35,560
actually inside it since in some ways

00:06:33,040 --> 00:06:37,810
when we actually use objects we're

00:06:35,560 --> 00:06:39,550
actually creating an interface for our

00:06:37,810 --> 00:06:41,290
code someone doesn't have to

00:06:39,550 --> 00:06:43,930
all the specific code that underlies it

00:06:41,290 --> 00:06:45,430
to be able to use it and actually is

00:06:43,930 --> 00:06:48,130
part of what makes it difficult for

00:06:45,430 --> 00:06:49,090
students to understand and then there's

00:06:48,130 --> 00:06:51,580
encapsulation

00:06:49,090 --> 00:06:53,470
we're actually wrapping up our variables

00:06:51,580 --> 00:06:55,570
and our functions inside this

00:06:53,470 --> 00:06:57,790
self-contained unit that we can use lots

00:06:55,570 --> 00:07:00,730
of times and then finally there's

00:06:57,790 --> 00:07:02,770
inheritance and polymorphism which is in

00:07:00,730 --> 00:07:05,050
in essence our sexy

00:07:02,770 --> 00:07:08,050
being able to adapt someone else's

00:07:05,050 --> 00:07:10,060
object so you can have a parent object

00:07:08,050 --> 00:07:11,740
and then you have a child object where

00:07:10,060 --> 00:07:14,490
it inherits all the code and then you

00:07:11,740 --> 00:07:17,800
can actually do something else with it

00:07:14,490 --> 00:07:20,500
and the example of polymorphism there

00:07:17,800 --> 00:07:22,540
you've got if you had a piece of code

00:07:20,500 --> 00:07:24,310
that represents a bike you could accept

00:07:22,540 --> 00:07:27,130
a mountain bike a racing bike a tandem

00:07:24,310 --> 00:07:30,550
bike and those bikes inherit the code

00:07:27,130 --> 00:07:32,080
from the code for a bicycle if you're

00:07:30,550 --> 00:07:34,060
sitting there confused at the moment

00:07:32,080 --> 00:07:38,740
it'll make more sense when we talk about

00:07:34,060 --> 00:07:40,600
games and this is primarily on what my

00:07:38,740 --> 00:07:43,240
speech is about is I'm actually using

00:07:40,600 --> 00:07:46,120
games to teach objects and I make no

00:07:43,240 --> 00:07:47,440
apology for that I have a lot of a lot

00:07:46,120 --> 00:07:50,200
of teachers that school make fun of me

00:07:47,440 --> 00:07:52,780
because I'm sitting at my computer and a

00:07:50,200 --> 00:07:55,540
lot of times I'm either making game or

00:07:52,780 --> 00:07:57,430
I'm actually playing some other students

00:07:55,540 --> 00:07:58,720
game so they think I'm just sitting at

00:07:57,430 --> 00:08:02,020
my desk

00:07:58,720 --> 00:08:03,730
playing games all day long but I

00:08:02,020 --> 00:08:06,900
actually I make no apology for it

00:08:03,730 --> 00:08:10,960
because allowing students to use games

00:08:06,900 --> 00:08:12,030
and make games actually is a really

00:08:10,960 --> 00:08:14,650
really good way of teaching

00:08:12,030 --> 00:08:17,560
object-oriented programming and there's

00:08:14,650 --> 00:08:20,650
actually a lot of research and studies

00:08:17,560 --> 00:08:24,070
that actually back that up

00:08:20,650 --> 00:08:26,490
so if teaching objects can be difficult

00:08:24,070 --> 00:08:28,600
at least with teaching using games

00:08:26,490 --> 00:08:31,240
you're providing context that will

00:08:28,600 --> 00:08:33,160
motivate them to try to struggle through

00:08:31,240 --> 00:08:36,460
that and there is an increased cognitive

00:08:33,160 --> 00:08:38,530
load and the other thing is it's

00:08:36,460 --> 00:08:40,960
actually an intuitive way to show

00:08:38,530 --> 00:08:42,730
students the piece of code is an object

00:08:40,960 --> 00:08:45,550
because the thing about games is they

00:08:42,730 --> 00:08:48,540
actually simulate real-world behavior or

00:08:45,550 --> 00:08:48,540
a lot of games do

00:08:50,670 --> 00:08:55,240
and an example of that would be pac-man

00:08:53,110 --> 00:08:57,790
so if you think about the game pac-man

00:08:55,240 --> 00:09:00,400
and you think about what types of

00:08:57,790 --> 00:09:03,460
objects might exist you would actually

00:09:00,400 --> 00:09:06,190
have the the pac-man you'd have the

00:09:03,460 --> 00:09:08,110
ghost and you have to pack dot so each

00:09:06,190 --> 00:09:11,710
one of those elements of the game could

00:09:08,110 --> 00:09:15,280
easily be represented by an object in

00:09:11,710 --> 00:09:17,200
Python and you can see how an object

00:09:15,280 --> 00:09:19,630
itself has properties and it has

00:09:17,200 --> 00:09:23,920
behaviors so I'm constantly and drumming

00:09:19,630 --> 00:09:28,210
this into my students okay so what is

00:09:23,920 --> 00:09:31,300
game maker game maker is a is a simple

00:09:28,210 --> 00:09:33,520
drag-and-drop type gaming environment

00:09:31,300 --> 00:09:35,620
for 2d games but it allows students to

00:09:33,520 --> 00:09:39,280
create really really effective really

00:09:35,620 --> 00:09:42,040
nice visually attractive games that

00:09:39,280 --> 00:09:43,480
excite them and probably the best thing

00:09:42,040 --> 00:09:45,520
about it is it's actually a really good

00:09:43,480 --> 00:09:48,910
vehicle for teaching object-oriented

00:09:45,520 --> 00:09:52,360
programming and when I talk about PI

00:09:48,910 --> 00:09:54,550
game it actually makes that it teaches

00:09:52,360 --> 00:09:57,730
students the the stuff they need to be

00:09:54,550 --> 00:09:59,380
able to use PI game effectively so as I

00:09:57,730 --> 00:10:00,730
said in the beginning of my speech one

00:09:59,380 --> 00:10:02,710
of the things I need to do is transition

00:10:00,730 --> 00:10:06,160
students from drag-and-drop and visual

00:10:02,710 --> 00:10:07,840
block coding to text-based coding so in

00:10:06,160 --> 00:10:09,900
terms of game maker if I get the

00:10:07,840 --> 00:10:12,600
students to do game maker in year 9

00:10:09,900 --> 00:10:15,880
they're starting to make that transition

00:10:12,600 --> 00:10:18,190
and then when it gets to year 10 and

00:10:15,880 --> 00:10:21,220
year 11 year 12 I'm starting to look at

00:10:18,190 --> 00:10:27,130
PI game and the stuff they learn in game

00:10:21,220 --> 00:10:33,850
maker transfers across so I'm just going

00:10:27,130 --> 00:10:35,820
to briefly show you game maker by the

00:10:33,850 --> 00:10:38,530
way you can actually you can download a

00:10:35,820 --> 00:10:39,870
trial version of game maker so that's

00:10:38,530 --> 00:10:42,640
generally what I get my students to do

00:10:39,870 --> 00:10:44,770
but you can also get a classroom license

00:10:42,640 --> 00:10:46,830
the classroom license will cost you

00:10:44,770 --> 00:10:49,720
money but it allows them to publish

00:10:46,830 --> 00:10:51,640
whereas the actual trial version will

00:10:49,720 --> 00:10:52,630
allow them to create a game and might be

00:10:51,640 --> 00:10:55,360
a little bit limited in its

00:10:52,630 --> 00:10:58,000
functionality but I find it it's simple

00:10:55,360 --> 00:11:01,660
enough for me and my courses so all

00:10:58,000 --> 00:11:02,980
about saving money but I mean the

00:11:01,660 --> 00:11:04,060
classroom license would be quite

00:11:02,980 --> 00:11:05,440
effective

00:11:04,060 --> 00:11:08,460
if you've got enough students using it

00:11:05,440 --> 00:11:12,340
in your school for myself I might have

00:11:08,460 --> 00:11:15,160
maybe 60 students in a year so I know

00:11:12,340 --> 00:11:18,030
it's a bit debatable about the costs now

00:11:15,160 --> 00:11:21,610
the interface of GameMaker is very much

00:11:18,030 --> 00:11:24,280
it makes it's got a lot more difficult

00:11:21,610 --> 00:11:26,860
over time but it's very much explicit in

00:11:24,280 --> 00:11:29,650
terms of object-oriented programming so

00:11:26,860 --> 00:11:31,060
you view an example you'll notice I

00:11:29,650 --> 00:11:33,280
don't know if you can see it from back

00:11:31,060 --> 00:11:36,180
there but you'll actually notice that

00:11:33,280 --> 00:11:40,150
there is a tab there called objects and

00:11:36,180 --> 00:11:42,100
you can create an object so in game

00:11:40,150 --> 00:11:45,670
maker everything is an object and those

00:11:42,100 --> 00:11:48,160
objects have properties and behaviors so

00:11:45,670 --> 00:11:49,660
everything actually inherits their stuff

00:11:48,160 --> 00:11:51,730
from something called the game object

00:11:49,660 --> 00:11:54,430
and the game object in game maker has an

00:11:51,730 --> 00:11:56,890
x and y position it has a sprite which

00:11:54,430 --> 00:11:58,960
is its image and then it's actually got

00:11:56,890 --> 00:12:01,660
various functions that go along with

00:11:58,960 --> 00:12:04,480
that so there's things like render and

00:12:01,660 --> 00:12:08,470
display and visibility and that kind of

00:12:04,480 --> 00:12:12,280
stuff so here is an example of a

00:12:08,470 --> 00:12:14,620
spaceship object and the thing about

00:12:12,280 --> 00:12:15,220
these objects is I can choose a sprite

00:12:14,620 --> 00:12:19,360
for it

00:12:15,220 --> 00:12:22,650
so you load images in you've also got

00:12:19,360 --> 00:12:24,760
events and game maker has a whole set of

00:12:22,650 --> 00:12:27,280
events so you can have whether it's a

00:12:24,760 --> 00:12:30,460
key down or a key pressed or a mouse

00:12:27,280 --> 00:12:33,010
click or even just it being created or

00:12:30,460 --> 00:12:34,540
destroyed everything's there the

00:12:33,010 --> 00:12:37,900
functionalities are there for students

00:12:34,540 --> 00:12:39,430
to be able to use every object also

00:12:37,900 --> 00:12:41,380
largely create what's known as instance

00:12:39,430 --> 00:12:44,110
variables so I can actually create

00:12:41,380 --> 00:12:46,840
variables inside the object and when I

00:12:44,110 --> 00:12:49,150
refer to another objects I refer to it I

00:12:46,840 --> 00:12:51,730
can actually find another object and

00:12:49,150 --> 00:12:54,220
find its instance variables or I can

00:12:51,730 --> 00:12:55,900
call its instance functions so the

00:12:54,220 --> 00:12:58,870
actual terminology relates straight

00:12:55,900 --> 00:13:00,250
across to object-oriented programming so

00:12:58,870 --> 00:13:02,590
it's it's really good for building up

00:13:00,250 --> 00:13:06,220
that context now there's also a little

00:13:02,590 --> 00:13:07,840
tab here called parent and if you use a

00:13:06,220 --> 00:13:10,840
parent you're actually creating an

00:13:07,840 --> 00:13:13,180
object that inherits all the code from

00:13:10,840 --> 00:13:17,230
another object so it's teaching them

00:13:13,180 --> 00:13:17,620
inheritance in terms of the coder you

00:13:17,230 --> 00:13:21,940
can see

00:13:17,620 --> 00:13:24,940
it's drag-and-drop so for each of these

00:13:21,940 --> 00:13:26,710
events I have code attached to it so on

00:13:24,940 --> 00:13:29,529
the create event I'm jumping to a point

00:13:26,710 --> 00:13:32,230
on the step event which is run every

00:13:29,529 --> 00:13:35,560
frame I'm rotating based on where my

00:13:32,230 --> 00:13:37,750
mouse is so if I actually play this game

00:13:35,560 --> 00:13:39,339
by the way it's not a completed game I

00:13:37,750 --> 00:13:41,260
never actually give the kids this an

00:13:39,339 --> 00:13:44,260
example game I never actually give them

00:13:41,260 --> 00:13:46,360
my full unit functional game because I

00:13:44,260 --> 00:13:49,029
want them to improve upon it and then

00:13:46,360 --> 00:13:50,770
start creating their own so occasionally

00:13:49,029 --> 00:13:51,839
I'm going to die because an alien's jump

00:13:50,770 --> 00:13:54,640
straight on top of me

00:13:51,839 --> 00:13:56,710
so it's not a fully finished game but

00:13:54,640 --> 00:13:59,200
you can see the various objects that are

00:13:56,710 --> 00:14:02,410
there and it's quite easy to create this

00:13:59,200 --> 00:14:03,790
kind of stuff using game maker by the

00:14:02,410 --> 00:14:06,040
way when I'm creating bolts there

00:14:03,790 --> 00:14:10,060
the bullet is an object and the object

00:14:06,040 --> 00:14:12,460
is the bullets are multiple instances of

00:14:10,060 --> 00:14:14,620
that same object so it's really about

00:14:12,460 --> 00:14:15,970
when we define an object in game a key

00:14:14,620 --> 00:14:17,680
creating a blueprint and then you're

00:14:15,970 --> 00:14:21,660
actually creating something based on

00:14:17,680 --> 00:14:24,190
that blueprint okay I'm going to move on

00:14:21,660 --> 00:14:27,480
it's there's so much in game maker you'd

00:14:24,190 --> 00:14:30,850
really have to try that yourselves

00:14:27,480 --> 00:14:33,279
however one of the things I do during

00:14:30,850 --> 00:14:37,690
that unit is I actually show the

00:14:33,279 --> 00:14:39,760
students I actually show the students

00:14:37,690 --> 00:14:42,420
what's meant by a game loop so I'm gonna

00:14:39,760 --> 00:14:44,230
have to quickly jump through that

00:14:42,420 --> 00:14:45,459
because that's probably one of the most

00:14:44,230 --> 00:14:46,959
difficult things for students to

00:14:45,459 --> 00:14:49,150
understand when it comes to games is the

00:14:46,959 --> 00:14:51,850
idea of a game loop the game loop will

00:14:49,150 --> 00:14:54,100
run it will basically clear the screen

00:14:51,850 --> 00:14:57,850
go through the logic of each of those

00:14:54,100 --> 00:14:59,380
objects and then it actually will render

00:14:57,850 --> 00:15:02,020
the next surface so there's a frame

00:14:59,380 --> 00:15:04,300
there it's constantly going nonstop

00:15:02,020 --> 00:15:05,680
so using game maker I teach them about

00:15:04,300 --> 00:15:07,570
the game loop because it's actually

00:15:05,680 --> 00:15:12,400
going to come in handy when we start

00:15:07,570 --> 00:15:15,990
looking at PI game just to jump out for

00:15:12,400 --> 00:15:18,640
a second in terms of the sequence of

00:15:15,990 --> 00:15:19,839
teaching object-oriented programming so

00:15:18,640 --> 00:15:22,750
in year 9

00:15:19,839 --> 00:15:24,970
I teach game maker and they just start

00:15:22,750 --> 00:15:25,720
to make that transition into from

00:15:24,970 --> 00:15:28,839
drag-and-drop

00:15:25,720 --> 00:15:30,880
into proper coding one of the things I

00:15:28,839 --> 00:15:31,510
haven't mention about game maker is you

00:15:30,880 --> 00:15:33,760
can actually

00:15:31,510 --> 00:15:35,680
I put in some little scripts that are

00:15:33,760 --> 00:15:37,750
are text-based so you can kind of blend

00:15:35,680 --> 00:15:41,070
the visual drag and drop stuff with the

00:15:37,750 --> 00:15:43,930
text yet 10 I'm actually teaching Python

00:15:41,070 --> 00:15:47,260
and I start teaching them things like

00:15:43,930 --> 00:15:51,100
pythons Hurdle tkinter I use a lot of

00:15:47,260 --> 00:15:53,740
grok learning my crabbit and a few

00:15:51,100 --> 00:15:56,170
little robots that actually use Python

00:15:53,740 --> 00:15:58,540
libraries and one of the things there is

00:15:56,170 --> 00:15:59,800
we use objects but we don't actually I

00:15:58,540 --> 00:16:02,260
don't teach the kids how to make their

00:15:59,800 --> 00:16:03,820
own objects when it gets to PI game

00:16:02,260 --> 00:16:07,410
that's when I start teaching the

00:16:03,820 --> 00:16:07,410
students how to make their own objects

00:16:07,650 --> 00:16:15,270
so Pi game is a Python library for 2d

00:16:12,010 --> 00:16:17,650
gaming it's very much objects based

00:16:15,270 --> 00:16:21,790
objects' actually inherit from something

00:16:17,650 --> 00:16:25,360
called a sprite class and it has its own

00:16:21,790 --> 00:16:26,800
inbuilt kind of event handling so I'm

00:16:25,360 --> 00:16:33,250
just going to jump out and show you PI

00:16:26,800 --> 00:16:38,200
game and I'm just going to show you just

00:16:33,250 --> 00:16:39,610
quick demo this here is just again I

00:16:38,200 --> 00:16:41,500
don't want to give students too much

00:16:39,610 --> 00:16:43,270
code because they know this they'll

00:16:41,500 --> 00:16:45,130
basically just take my game so I want

00:16:43,270 --> 00:16:46,810
them to I show them a very simple game

00:16:45,130 --> 00:16:49,060
that they generally won't be happy with

00:16:46,810 --> 00:16:53,200
and they'll want to improve but you can

00:16:49,060 --> 00:16:56,440
see here in PI game you create a class

00:16:53,200 --> 00:16:58,000
which defines the game object and it

00:16:56,440 --> 00:17:01,690
inherits from something called the

00:16:58,000 --> 00:17:04,060
sprite class and then you actually

00:17:01,690 --> 00:17:07,230
define your functions and your variables

00:17:04,060 --> 00:17:11,050
so in Python you can define all your

00:17:07,230 --> 00:17:13,480
instance variables inside the init

00:17:11,050 --> 00:17:15,459
function you can say define it outside

00:17:13,480 --> 00:17:18,339
the init function foo but I find it

00:17:15,459 --> 00:17:21,060
easier to just show students how to

00:17:18,339 --> 00:17:23,380
initialize their variables this way and

00:17:21,060 --> 00:17:26,650
then you have your functions like draw

00:17:23,380 --> 00:17:29,350
or sets feed or update where Aleksey

00:17:26,650 --> 00:17:32,010
process the users input so this is

00:17:29,350 --> 00:17:34,870
actually a very very simple class and

00:17:32,010 --> 00:17:38,380
then the other part of Pi game is the

00:17:34,870 --> 00:17:39,850
game loop and this is where the the

00:17:38,380 --> 00:17:41,680
concepts and the principles that I've

00:17:39,850 --> 00:17:44,770
been showing students from game maker

00:17:41,680 --> 00:17:46,480
translate across because

00:17:44,770 --> 00:17:50,740
when you're actually going into pygame

00:17:46,480 --> 00:17:52,300
you're creating yourself a game loop and

00:17:50,740 --> 00:17:54,780
in that game loop you're regulating the

00:17:52,300 --> 00:17:57,660
framerate you're clearing the screen and

00:17:54,780 --> 00:18:03,250
then you're starting to do the logic and

00:17:57,660 --> 00:18:07,000
processes the events and using those

00:18:03,250 --> 00:18:11,890
events then passes the necessary input

00:18:07,000 --> 00:18:14,080
to those objects so you can see the the

00:18:11,890 --> 00:18:16,060
symmetry between game maker and PI game

00:18:14,080 --> 00:18:18,190
so I'm not having to teach everything

00:18:16,060 --> 00:18:19,660
from start again I'm actually the

00:18:18,190 --> 00:18:21,190
students are you know what an object is

00:18:19,660 --> 00:18:24,460
they know has properties they know has

00:18:21,190 --> 00:18:27,040
has behaviors they know about the game

00:18:24,460 --> 00:18:28,390
loop then I get to PI game I don't have

00:18:27,040 --> 00:18:30,790
to teach that stuff again I can focus

00:18:28,390 --> 00:18:33,880
more upon actually how do you create an

00:18:30,790 --> 00:18:36,430
object in Python probably the only thing

00:18:33,880 --> 00:18:38,640
I find hard to explain to the students

00:18:36,430 --> 00:18:42,850
is why they have to keep referring to

00:18:38,640 --> 00:18:46,510
variables by via the word self but

00:18:42,850 --> 00:18:49,090
that's another story but in terms of

00:18:46,510 --> 00:18:51,810
I'll just run this code now and like I

00:18:49,090 --> 00:18:54,970
said it's a very very simple game but

00:18:51,810 --> 00:18:56,200
this one here is just basically a cave

00:18:54,970 --> 00:18:59,200
me and running around trying to get

00:18:56,200 --> 00:19:01,540
stakes I would have to sand on but I

00:18:59,200 --> 00:19:03,460
just make a new noise so it's like a cow

00:19:01,540 --> 00:19:06,540
noise every time he collects a steak and

00:19:03,460 --> 00:19:08,680
it's actually really really annoying so

00:19:06,540 --> 00:19:11,140
but anyway so you can see it's a very

00:19:08,680 --> 00:19:13,120
very simple game I give the kids this

00:19:11,140 --> 00:19:15,370
code because then I know they're going

00:19:13,120 --> 00:19:17,230
to adapt it if I made a really good game

00:19:15,370 --> 00:19:18,760
they might just come back and just

00:19:17,230 --> 00:19:20,980
change a little bit and give it back to

00:19:18,760 --> 00:19:22,810
me but I know they're not going to enjoy

00:19:20,980 --> 00:19:24,670
this game too much and they're going to

00:19:22,810 --> 00:19:26,680
come up with a better one so I'll show

00:19:24,670 --> 00:19:30,280
you one of the games that a student has

00:19:26,680 --> 00:19:38,530
made and this this student was quite

00:19:30,280 --> 00:19:39,520
amazing and I should mention they use PI

00:19:38,530 --> 00:19:42,880
game in year 11

00:19:39,520 --> 00:19:45,310
so by this stage they know a lot about

00:19:42,880 --> 00:19:48,730
Python but now they're starting to learn

00:19:45,310 --> 00:19:50,710
about objects and so in terms of the

00:19:48,730 --> 00:19:51,910
code there's like you just see the

00:19:50,710 --> 00:19:53,890
amount of code is amazing

00:19:51,910 --> 00:19:58,980
he's even creating objects based on his

00:19:53,890 --> 00:19:58,980
own little maps so

00:20:00,850 --> 00:20:06,799
and in fact the the really fun thing

00:20:03,620 --> 00:20:08,150
about this game is I so should have a

00:20:06,799 --> 00:20:09,860
sandal because the music's actually

00:20:08,150 --> 00:20:12,799
really cool but he actually makes

00:20:09,860 --> 00:20:15,860
objects during the game because you can

00:20:12,799 --> 00:20:18,590
actually destroy objects make objects

00:20:15,860 --> 00:20:21,080
etc etc so I really should have to game

00:20:18,590 --> 00:20:24,290
on for that the music on for that right

00:20:21,080 --> 00:20:26,540
so that shows you PI game and that shows

00:20:24,290 --> 00:20:27,620
you game makeup there's too much in

00:20:26,540 --> 00:20:30,650
there for me to possibly cover

00:20:27,620 --> 00:20:32,059
everything but I recommend it as a

00:20:30,650 --> 00:20:33,770
process of teaching students

00:20:32,059 --> 00:20:35,540
object-oriented programming because you

00:20:33,770 --> 00:20:38,020
get the context and it translates across

00:20:35,540 --> 00:21:04,010
and that reduces the cognitive load

00:20:38,020 --> 00:21:07,100
right any questions what's that oh I

00:21:04,010 --> 00:21:09,830
could convert it's just a it's actually

00:21:07,100 --> 00:21:12,190
a game that teaches Python a so you can

00:21:09,830 --> 00:21:15,470
teach JavaScript with it - it's actually

00:21:12,190 --> 00:21:18,590
yeah you'd have to see it just type in

00:21:15,470 --> 00:21:19,970
code combat or go think and it's

00:21:18,590 --> 00:21:21,140
literally a 2-d game that teaches

00:21:19,970 --> 00:21:23,360
students they have to solve puzzles

00:21:21,140 --> 00:21:25,040
using Python so it's actually really

00:21:23,360 --> 00:21:27,290
really really simple and it's actually

00:21:25,040 --> 00:21:31,480
their first it's the first introduction

00:21:27,290 --> 00:21:31,480
I give my students to Python programming

00:21:38,690 --> 00:21:44,909
what about the kids in years seven and

00:21:41,220 --> 00:21:47,759
eight yes seven and eight they're still

00:21:44,909 --> 00:21:51,269
doing a lot of block based coding so in

00:21:47,759 --> 00:21:52,619
Year seven they do scratch I've been

00:21:51,269 --> 00:21:55,110
playing around with a bit of Minecraft

00:21:52,619 --> 00:21:57,869
and mate code so you can i seduce crach

00:21:55,110 --> 00:21:59,340
with with minecraft near year rates

00:21:57,869 --> 00:22:02,820
they're using micro bits for they're

00:21:59,340 --> 00:22:05,730
still using block based coding but they

00:22:02,820 --> 00:22:07,860
start doing the code combat there so

00:22:05,730 --> 00:22:09,720
that's when they're starting to just get

00:22:07,860 --> 00:22:11,279
the idea of text-based programming and

00:22:09,720 --> 00:22:13,289
then you nan they do it a little bit

00:22:11,279 --> 00:22:14,820
more code combat is this a really good

00:22:13,289 --> 00:22:21,749
thing to use when your students have

00:22:14,820 --> 00:22:24,830
finished everything I found you

00:22:21,749 --> 00:22:29,519
mentioned that when your games

00:22:24,830 --> 00:22:34,649
the caveman makes a really annoying move

00:22:29,519 --> 00:22:37,710
oh it's just yeah how do you find that

00:22:34,649 --> 00:22:40,139
that sound that the making sound as part

00:22:37,710 --> 00:22:42,539
of the games is a motivating or de

00:22:40,139 --> 00:22:45,029
motivating factor

00:22:42,539 --> 00:22:48,090
I'll definitely motivating yeah so I

00:22:45,029 --> 00:22:49,950
mean if I had the sand on that snow me

00:22:48,090 --> 00:22:52,499
and little game has really funky kind of

00:22:49,950 --> 00:22:54,749
arcade music to it so no the students

00:22:52,499 --> 00:22:56,340
love putting sound in and special

00:22:54,749 --> 00:22:58,830
effects and game maker allows you have

00:22:56,340 --> 00:23:03,080
particle explosions as well so they they

00:22:58,830 --> 00:23:05,299
love all that the

00:23:03,080 --> 00:23:07,999
the thing is I don't want to do it for

00:23:05,299 --> 00:23:10,399
them so for me I give them start are

00:23:07,999 --> 00:23:11,809
things that all hands are then but I

00:23:10,399 --> 00:23:13,850
know they're going to do something

00:23:11,809 --> 00:23:15,590
wonderful with it and normally I'll show

00:23:13,850 --> 00:23:17,179
them I'll show them another students

00:23:15,590 --> 00:23:19,159
work that has all that kind of stuff in

00:23:17,179 --> 00:23:24,499
it something said for them to aspire to

00:23:19,159 --> 00:23:27,860
yeah otherwise you're not on the

00:23:24,499 --> 00:23:29,899
recording high with the interface you

00:23:27,860 --> 00:23:31,340
that came straight out of Pi game didn't

00:23:29,899 --> 00:23:34,299
you didn't have to call up to Kenta to

00:23:31,340 --> 00:23:38,059
get the know the interface you know it

00:23:34,299 --> 00:23:42,499
yeah it's it's PI game is just a 2d

00:23:38,059 --> 00:23:45,460
gaming library yeah it's all just it

00:23:42,499 --> 00:23:52,519
just comes up how to explain actually

00:23:45,460 --> 00:23:55,549
you'd have to if I go to that code yeah

00:23:52,519 --> 00:23:58,129
you have to bring your own images in so

00:23:55,549 --> 00:23:59,809
here on well things I did get the

00:23:58,129 --> 00:24:02,269
students do is separate their objects

00:23:59,809 --> 00:24:05,149
normally and so into their own files as

00:24:02,269 --> 00:24:08,119
well but it's pretty much you

00:24:05,149 --> 00:24:09,710
initialized the PI game white and import

00:24:08,119 --> 00:24:11,239
the PI game by the way that's the

00:24:09,710 --> 00:24:13,029
hardest thing upon students half the

00:24:11,239 --> 00:24:15,440
master is actually installing it

00:24:13,029 --> 00:24:16,999
installing PI game is actually the

00:24:15,440 --> 00:24:18,950
hardest thing for them to do especially

00:24:16,999 --> 00:24:20,600
the students who are using a MacBook

00:24:18,950 --> 00:24:23,960
because we're a bring your own device

00:24:20,600 --> 00:24:28,460
school so and the the MacBook just hates

00:24:23,960 --> 00:24:30,249
installing stuff how much of the code

00:24:28,460 --> 00:24:32,359
would you typically give to the students

00:24:30,249 --> 00:24:34,190
like what would you give in the class

00:24:32,359 --> 00:24:36,559
definitions or how much should you be

00:24:34,190 --> 00:24:38,659
expecting to edit it or create stuff

00:24:36,559 --> 00:24:39,320
from scratch themselves I give them the

00:24:38,659 --> 00:24:41,869
caveman

00:24:39,320 --> 00:24:44,600
so they've got a caveman class there and

00:24:41,869 --> 00:24:48,470
there's actually a steak class as well

00:24:44,600 --> 00:24:52,159
and that's its and I give them the the

00:24:48,470 --> 00:24:57,769
main game loop by the way there's

00:24:52,159 --> 00:25:00,080
actually uh an office there's actually a

00:24:57,769 --> 00:25:03,379
really good website for this yet pike a

00:25:00,080 --> 00:25:08,960
program arcade games using Python I see

00:25:03,379 --> 00:25:10,340
no weights I should actually maybe I'll

00:25:08,960 --> 00:25:12,559
include it later on there's actually

00:25:10,340 --> 00:25:14,960
this really good sample website and I

00:25:12,559 --> 00:25:16,249
point them there it doesn't give them a

00:25:14,960 --> 00:25:16,610
full game but I'll actually show them

00:25:16,249 --> 00:25:19,160
things

00:25:16,610 --> 00:25:22,400
like using and detecting a mouse-click

00:25:19,160 --> 00:25:24,980
or moving a sprite and all jumping or

00:25:22,400 --> 00:25:27,799
that kind of stuff so I think it's

00:25:24,980 --> 00:25:30,650
Python arcade games or something

00:25:27,799 --> 00:25:32,299
maybe that's name is got different maybe

00:25:30,650 --> 00:25:33,650
this is it I think it's just got a

00:25:32,299 --> 00:25:37,070
different interface to what I'm thinking

00:25:33,650 --> 00:25:38,690
but anyway I might suggest that we after

00:25:37,070 --> 00:25:41,059
the talk the talk will be published on

00:25:38,690 --> 00:25:45,110
YouTube and you can comment on the talk

00:25:41,059 --> 00:25:48,470
yeah yeah I should have included some

00:25:45,110 --> 00:25:51,290
links I'm sorry I had one more question

00:25:48,470 --> 00:25:53,090
about the scaffolding as well so if you

00:25:51,290 --> 00:25:54,980
get if you give them this do you have

00:25:53,090 --> 00:25:59,179
how do you set the students expectations

00:25:54,980 --> 00:26:01,340
of what in terms of assessment I assume

00:25:59,179 --> 00:26:03,470
this is an accessible task yes what

00:26:01,340 --> 00:26:06,530
makes a good game and require

00:26:03,470 --> 00:26:08,809
progression um I actually I asked them

00:26:06,530 --> 00:26:14,330
for various things so one there has to

00:26:08,809 --> 00:26:17,780
be there has to be some monsters too

00:26:14,330 --> 00:26:20,750
there has to be a school 3a wouldn't

00:26:17,780 --> 00:26:22,450
mind health and one of the things I also

00:26:20,750 --> 00:26:25,040
asked them this for different game modes

00:26:22,450 --> 00:26:26,900
one being invulnerability because I

00:26:25,040 --> 00:26:29,929
don't last two seconds playing their

00:26:26,900 --> 00:26:31,580
games a lot of their games they the kids

00:26:29,929 --> 00:26:33,350
have designed their games they play them

00:26:31,580 --> 00:26:34,610
over and over again they're just like

00:26:33,350 --> 00:26:36,230
fan tapped out but they know what's

00:26:34,610 --> 00:26:37,910
happening they know that which monsters

00:26:36,230 --> 00:26:39,890
going to come out they know how to beat

00:26:37,910 --> 00:26:41,929
their game and then I play it I die

00:26:39,890 --> 00:26:44,630
within ten seconds and they think I'm no

00:26:41,929 --> 00:26:46,340
good but it's actually just they have

00:26:44,630 --> 00:26:49,700
become expert players at their own game

00:26:46,340 --> 00:26:51,200
so I asked them and this is actually one

00:26:49,700 --> 00:26:53,660
of the ways I can work out who's going

00:26:51,200 --> 00:26:55,220
to get an A - because programming a game

00:26:53,660 --> 00:26:58,520
mode is actually the most difficult

00:26:55,220 --> 00:27:00,490
thing because the objects in your game

00:26:58,520 --> 00:27:03,740
all sudden the behaviors have to change

00:27:00,490 --> 00:27:05,630
so it's actually one of the ways I work

00:27:03,740 --> 00:27:07,520
out who's going to get an A is by the

00:27:05,630 --> 00:27:09,020
game modes they've they've put in so

00:27:07,520 --> 00:27:10,340
they might have a powerup as well like

00:27:09,020 --> 00:27:13,010
you discover something and you become

00:27:10,340 --> 00:27:14,540
super fast and or maybe you've got all

00:27:13,010 --> 00:27:16,250
the monsters start running away from you

00:27:14,540 --> 00:27:17,809
just all that kind of stuff the game

00:27:16,250 --> 00:27:19,100
modes is actually in the power-ups is

00:27:17,809 --> 00:27:22,809
actually where the tricky kind of

00:27:19,100 --> 00:27:25,429
programming comes into it so I put those

00:27:22,809 --> 00:27:27,830
very loose I don't a stifle creativity

00:27:25,429 --> 00:27:29,870
so I just list different things that I

00:27:27,830 --> 00:27:32,510
want

00:27:29,870 --> 00:27:34,900
but the type of game they they choose

00:27:32,510 --> 00:27:38,870
that's up to them

00:27:34,900 --> 00:27:39,140
fantastic all right thank you very very

00:27:38,870 --> 00:27:40,910
much

00:27:39,140 --> 00:27:48,850
thank you everyone I'll give you a mug

00:27:40,910 --> 00:27:48,850

YouTube URL: https://www.youtube.com/watch?v=_tYPQPXb90k


