Title: Running Python web applications in Docker
Publication date: 2018-08-26
Playlist: PyCon Australia 2018
Description: 
	Tim Heap

https://2018.pycon-au.org/talks/45205-running-python-web-applications-in-docker/

An introduction on running Python web applications in Docker, covering how to structure your project, running the project in both development and production, testing the project, and compiling static assets for your frontend.

Python, PyCon, PyConAU, australia, programming, sydney

This video is licensed under CC BY 3.0 AU - https://creativecommons.org/licenses/by/3.0/au/

PyCon Australia (“PyCon AU”) is the national conference for the Python Programming Community, bringing together professional, student and enthusiast developers with a love for developing with Python.

PyCon AU, the national Python Language conference, is on again this August in Sydney, at the International Convention Centre, Sydney, August 24 - 28 2018.

Python, PyCon, PyConAU
Captions: 
	00:00:00,979 --> 00:00:05,040
good afternoon everybody and welcome to

00:00:03,360 --> 00:00:06,120
this afternoon's session of pi comma au

00:00:05,040 --> 00:00:08,250
00:00:06,120 --> 00:00:09,540
our first speaker in this block is Tim

00:00:08,250 --> 00:00:11,429
and he will be speaking to us about

00:00:09,540 --> 00:00:20,279
Python and docker please make him feel

00:00:11,429 --> 00:00:23,010
welcome all right hello so yes I will be

00:00:20,279 --> 00:00:26,910
talking about how you run Python web

00:00:23,010 --> 00:00:29,640
applications in docker this talk sorry

00:00:26,910 --> 00:00:31,199
first up this is me if you want to

00:00:29,640 --> 00:00:34,250
harass me on the Internet

00:00:31,199 --> 00:00:37,649
this is various places you can find me

00:00:34,250 --> 00:00:40,200
Twitter's and github I work for a

00:00:37,649 --> 00:00:42,239
company called tide tech we do

00:00:40,200 --> 00:00:44,640
oceanographic modeling and I run a bunch

00:00:42,239 --> 00:00:47,789
of Python web applications to help us do

00:00:44,640 --> 00:00:53,100
that so a lot of this is about what

00:00:47,789 --> 00:00:57,149
we've built to achieve those goals this

00:00:53,100 --> 00:00:59,910
talk it is fairly dense on code or

00:00:57,149 --> 00:01:01,920
configuration and docker examples don't

00:00:59,910 --> 00:01:04,290
worry about the slides too much all of

00:01:01,920 --> 00:01:07,229
my code examples are up on github so if

00:01:04,290 --> 00:01:10,080
you want to study the code the github

00:01:07,229 --> 00:01:11,850
this is where the slides are it also has

00:01:10,080 --> 00:01:16,350
some code examples fully functional

00:01:11,850 --> 00:01:18,150
docker django apps so yeah feel free to

00:01:16,350 --> 00:01:20,340
follow along on your computer now if you

00:01:18,150 --> 00:01:23,400
want to as well

00:01:20,340 --> 00:01:26,280
this talk is mostly about the concepts

00:01:23,400 --> 00:01:27,930
of why I have configured docker to run

00:01:26,280 --> 00:01:29,759
in a particular way rather than like you

00:01:27,930 --> 00:01:31,770
know this is the code you must run this

00:01:29,759 --> 00:01:33,540
is like this is this is why I've

00:01:31,770 --> 00:01:35,100
structured my applications in this way

00:01:33,540 --> 00:01:39,030
and hopefully you can build on from that

00:01:35,100 --> 00:01:40,950
to customize with your application there

00:01:39,030 --> 00:01:42,780
are examples as I said there is three

00:01:40,950 --> 00:01:46,560
examples and I'll cover them in detail

00:01:42,780 --> 00:01:48,750
as part of the talk and this talk does

00:01:46,560 --> 00:01:50,850
not cover how to actually build a web

00:01:48,750 --> 00:01:53,820
application this kind of assumes that

00:01:50,850 --> 00:01:57,360
you know how to build a Django or flask

00:01:53,820 --> 00:01:58,890
or any whisky Python application this is

00:01:57,360 --> 00:02:04,430
more than how are you then deployed in

00:01:58,890 --> 00:02:06,719
docker it so it assumes you know Python

00:02:04,430 --> 00:02:08,789
does not assume you know dr. at all I'll

00:02:06,719 --> 00:02:11,129
go through how docker what basically

00:02:08,789 --> 00:02:12,930
docker is and the basic syntax is of

00:02:11,129 --> 00:02:13,450
docker files and docker compose and how

00:02:12,930 --> 00:02:16,090
he use

00:02:13,450 --> 00:02:20,069
together it also doesn't cover

00:02:16,090 --> 00:02:21,790
deployment there are a large variety of

00:02:20,069 --> 00:02:25,390
deployment strategies for docker

00:02:21,790 --> 00:02:28,690
containers kubernetes or AWS or onwards

00:02:25,390 --> 00:02:30,099
and onwards and onwards please go see

00:02:28,690 --> 00:02:33,239
them I'm sure someone's giving a talk

00:02:30,099 --> 00:02:33,239
about this at some point yeah

00:02:33,540 --> 00:02:43,569
sorry first up docker is a way of making

00:02:40,060 --> 00:02:46,060
application images that you can run your

00:02:43,569 --> 00:02:47,680
application in there are theoretically

00:02:46,060 --> 00:02:50,799
deterministic so you build it and it

00:02:47,680 --> 00:02:54,970
always builds the same thing you can

00:02:50,799 --> 00:02:56,349
then use it as a kind of as an isolated

00:02:54,970 --> 00:02:57,819
execution environment and before the

00:02:56,349 --> 00:02:59,380
security people get it me know it's not

00:02:57,819 --> 00:03:01,090
as isolated as a VM there are security

00:02:59,380 --> 00:03:03,610
risks involved if you're running docker

00:03:01,090 --> 00:03:05,590
but it's a lot more isolated than any

00:03:03,610 --> 00:03:08,860
other shared hosting strategy that I can

00:03:05,590 --> 00:03:10,299
think of and you can also compose

00:03:08,860 --> 00:03:13,390
containers together and link them

00:03:10,299 --> 00:03:16,420
together to achieve multiple services on

00:03:13,390 --> 00:03:17,709
in the one deployment environment where

00:03:16,420 --> 00:03:19,299
they don't interact with each other

00:03:17,709 --> 00:03:21,940
unless you give them permission to that

00:03:19,299 --> 00:03:23,739
that are easy to come join together

00:03:21,940 --> 00:03:29,380
including in development which is really

00:03:23,739 --> 00:03:31,389
handy the basic way of making a docker

00:03:29,380 --> 00:03:34,600
file or docker container is through a

00:03:31,389 --> 00:03:38,170
docker file now the basic syntax of a

00:03:34,600 --> 00:03:42,730
docker file is up on screen you have the

00:03:38,170 --> 00:03:44,079
first line is you say what kind of base

00:03:42,730 --> 00:03:46,420
image you're building from in this case

00:03:44,079 --> 00:03:48,459
I would say please install it please

00:03:46,420 --> 00:03:49,900
start from Debian there is a vast array

00:03:48,459 --> 00:03:52,660
of choices there you can even to start

00:03:49,900 --> 00:03:55,180
from a Python image if you want to run a

00:03:52,660 --> 00:03:58,030
particular version of Python you can

00:03:55,180 --> 00:04:00,040
then run any commands inside there such

00:03:58,030 --> 00:04:01,900
as installing Python copying in a

00:04:00,040 --> 00:04:03,280
requirements file installing all your

00:04:01,900 --> 00:04:08,760
requirements through pip and then

00:04:03,280 --> 00:04:08,760
copying in your application files

00:04:09,660 --> 00:04:15,880
another very useful thing in dhaka is a

00:04:12,609 --> 00:04:17,200
docker compose this is mostly for

00:04:15,880 --> 00:04:21,640
development though you can use it in

00:04:17,200 --> 00:04:23,289
production but it specifies how your the

00:04:21,640 --> 00:04:27,100
pieces of your application can be joined

00:04:23,289 --> 00:04:31,240
together and so in this example I am

00:04:27,100 --> 00:04:34,900
saying please please set up this Python

00:04:31,240 --> 00:04:37,870
environment then connect a database to

00:04:34,900 --> 00:04:39,940
that and also run a dummy mail server

00:04:37,870 --> 00:04:41,260
and then with one command you can start

00:04:39,940 --> 00:04:46,480
all three of these services in

00:04:41,260 --> 00:04:51,810
development with no no extra bother on

00:04:46,480 --> 00:04:53,710
your host computer really great for

00:04:51,810 --> 00:05:02,950
little repeatable development

00:04:53,710 --> 00:05:04,270
environments so I will now cover how you

00:05:02,950 --> 00:05:05,650
should structure in my opinion your

00:05:04,270 --> 00:05:09,820
Python application to make it really

00:05:05,650 --> 00:05:13,260
easy to deploy in docker you don't have

00:05:09,820 --> 00:05:15,220
to follow this but it will way the the I

00:05:13,260 --> 00:05:18,070
have with my reasons for this that I'll

00:05:15,220 --> 00:05:19,420
go through so it'll make putting a

00:05:18,070 --> 00:05:22,390
Python application into docker a lot

00:05:19,420 --> 00:05:25,030
easier this example does cover a django

00:05:22,390 --> 00:05:27,070
application but the concepts are

00:05:25,030 --> 00:05:28,720
applicable to any whisky app I've

00:05:27,070 --> 00:05:30,490
successfully built flask applications in

00:05:28,720 --> 00:05:33,130
this way as well so the the Django a bit

00:05:30,490 --> 00:05:34,120
of this example is fairly arbitrary is

00:05:33,130 --> 00:05:39,280
just something many people are familiar

00:05:34,120 --> 00:05:40,750
with so the application is built pretty

00:05:39,280 --> 00:05:43,650
much as normal there are some small

00:05:40,750 --> 00:05:46,390
constraints that I'll go over but that's

00:05:43,650 --> 00:05:48,940
most most of the constraints are good

00:05:46,390 --> 00:05:50,790
development practice anyway so now all

00:05:48,940 --> 00:05:53,470
probably useful too if you follow them

00:05:50,790 --> 00:05:57,190
it runs as a whisky application so you

00:05:53,470 --> 00:05:59,050
will install you whiskey or unicorn or

00:05:57,190 --> 00:06:01,090
something in the container to run your

00:05:59,050 --> 00:06:04,330
application and then connect to that

00:06:01,090 --> 00:06:12,790
from nginx for example or Apache or any

00:06:04,330 --> 00:06:14,470
other front-end server as I just said so

00:06:12,790 --> 00:06:17,650
this is the the file structure I

00:06:14,470 --> 00:06:19,300
proposed for your application now has it

00:06:17,650 --> 00:06:22,540
readme because of course you should tell

00:06:19,300 --> 00:06:24,790
it how to run your thing I recommend

00:06:22,540 --> 00:06:27,070
putting all of your Python code into one

00:06:24,790 --> 00:06:28,510
top-level directory which is different

00:06:27,070 --> 00:06:30,310
to how django recommends you do it where

00:06:28,510 --> 00:06:34,600
you have like different directories per

00:06:30,310 --> 00:06:36,280
app feel free to put sub modules within

00:06:34,600 --> 00:06:37,690
your top-level module but just having

00:06:36,280 --> 00:06:39,070
one top-level module will make things

00:06:37,690 --> 00:06:40,830
easier for you later when you're copying

00:06:39,070 --> 00:06:43,870
files in

00:06:40,830 --> 00:06:45,280
so if you want to have some models for

00:06:43,870 --> 00:06:46,690
your blog or your contacts or kind of

00:06:45,280 --> 00:06:48,910
stuff just just just whack them in their

00:06:46,690 --> 00:06:54,220
um old flask Django all those things to

00:06:48,910 --> 00:06:56,070
support this so put everything in there

00:06:54,220 --> 00:07:01,000
you whiskey files your settings files

00:06:56,070 --> 00:07:02,740
and anything else you want please have

00:07:01,000 --> 00:07:04,660
tests I'll go over how to run tests in

00:07:02,740 --> 00:07:06,160
your doc of container later if you don't

00:07:04,660 --> 00:07:10,600
have tests there's talks on that as well

00:07:06,160 --> 00:07:12,550
I recommend you have tests again

00:07:10,600 --> 00:07:16,060
everything else you want requirements

00:07:12,550 --> 00:07:17,350
text so this this is for building an

00:07:16,060 --> 00:07:18,730
application at the end of the day so it

00:07:17,350 --> 00:07:20,260
doesn't have a set up top I file for

00:07:18,730 --> 00:07:24,420
building libraries libraries and docker

00:07:20,260 --> 00:07:26,560
that they're not really a thing so

00:07:24,420 --> 00:07:34,630
that's completely different build story

00:07:26,560 --> 00:07:37,210
I like to have a separate directory per

00:07:34,630 --> 00:07:39,430
deployment environment so you'll have a

00:07:37,210 --> 00:07:40,900
develop directory and a production

00:07:39,430 --> 00:07:42,250
directory and you could have a staged

00:07:40,900 --> 00:07:45,580
directory as well if you want and that

00:07:42,250 --> 00:07:47,950
just keeps all of the files specific to

00:07:45,580 --> 00:07:50,440
that environment in one location easier

00:07:47,950 --> 00:07:51,850
to tell what's what in that case so

00:07:50,440 --> 00:07:53,770
developer has the settings file deploy

00:07:51,850 --> 00:07:56,890
has a settings file if you needed any

00:07:53,770 --> 00:07:59,200
like extra configuration whack it in

00:07:56,890 --> 00:08:01,690
there as well

00:07:59,200 --> 00:08:04,810
this also has some scripts which I'll

00:08:01,690 --> 00:08:08,550
show in detail later that will run your

00:08:04,810 --> 00:08:11,080
application in the docker container and

00:08:08,550 --> 00:08:13,810
finally you have your doctor file docker

00:08:11,080 --> 00:08:15,430
compose sitting in the repo and that's

00:08:13,810 --> 00:08:19,960
what we used to build your image and run

00:08:15,430 --> 00:08:22,720
it in development so yeah as I was

00:08:19,960 --> 00:08:26,320
saying you one configuration file in the

00:08:22,720 --> 00:08:28,480
main project directory and that should

00:08:26,320 --> 00:08:31,360
contain all the base settings that your

00:08:28,480 --> 00:08:34,590
application needs to run it shouldn't

00:08:31,360 --> 00:08:37,150
have any environment specific settings

00:08:34,590 --> 00:08:38,050
that's where the other files come in so

00:08:37,150 --> 00:08:39,280
you'll have a development in

00:08:38,050 --> 00:08:40,719
configuration stage in configuration

00:08:39,280 --> 00:08:42,460
production configuration and they can

00:08:40,719 --> 00:08:47,250
they can get there

00:08:42,460 --> 00:08:47,250
their settings from where if you need to

00:08:47,790 --> 00:08:53,590
and then select them with environment

00:08:51,130 --> 00:08:59,470
variables or with dr. volume Mountain

00:08:53,590 --> 00:09:00,760
magic your development configuration

00:08:59,470 --> 00:09:03,460
because you completely control the

00:09:00,760 --> 00:09:04,750
development environment in docker you

00:09:03,460 --> 00:09:07,720
knows how to create all of it it's

00:09:04,750 --> 00:09:09,280
brilliant so everything's in the docker

00:09:07,720 --> 00:09:11,470
compose so everything knows where it's

00:09:09,280 --> 00:09:15,550
going to be and you can just put it

00:09:11,470 --> 00:09:17,890
there as you don't need magic secret

00:09:15,550 --> 00:09:18,970
keys because it's in development you

00:09:17,890 --> 00:09:22,410
know where the data base is going to be

00:09:18,970 --> 00:09:25,600
because it's running through docker and

00:09:22,410 --> 00:09:27,580
you can run a fully fledged SMTP

00:09:25,600 --> 00:09:30,610
receiver in docker which then makes

00:09:27,580 --> 00:09:34,360
debugging your emails really easy check

00:09:30,610 --> 00:09:36,100
that one out the I've got now anyway

00:09:34,360 --> 00:09:37,660
sorry dr cohn poison later check out

00:09:36,100 --> 00:09:41,620
that mail back-end it's brilliant

00:09:37,660 --> 00:09:42,940
and then for your production image i

00:09:41,620 --> 00:09:45,100
recommend pulling everything for

00:09:42,940 --> 00:09:47,290
environment variables this is fairly

00:09:45,100 --> 00:09:49,930
standard in configuration and then you

00:09:47,290 --> 00:09:53,860
can inject those using whatever system

00:09:49,930 --> 00:09:56,680
you use to run it so kubernetes or AWS

00:09:53,860 --> 00:10:00,220
or just plain old docker you can put

00:09:56,680 --> 00:10:02,560
those environment variables in and it'll

00:10:00,220 --> 00:10:04,930
configure your thing and the great thing

00:10:02,560 --> 00:10:06,610
about doing it this way is that you can

00:10:04,930 --> 00:10:08,020
see where all of the environment

00:10:06,610 --> 00:10:11,470
variables are in this one configuration

00:10:08,020 --> 00:10:15,780
file and you know what you need to

00:10:11,470 --> 00:10:15,780
configure to make it work in production

00:10:17,400 --> 00:10:23,320
so the that was all python this is how i

00:10:20,860 --> 00:10:24,280
would build a docker container that runs

00:10:23,320 --> 00:10:28,600
this application that I've just

00:10:24,280 --> 00:10:32,140
described so start it from wherever you

00:10:28,600 --> 00:10:33,400
want if you start it from the Python

00:10:32,140 --> 00:10:34,900
repos then you can build it from

00:10:33,400 --> 00:10:36,220
whatever version of Python you want so

00:10:34,900 --> 00:10:37,870
it's really easy to keep up to date with

00:10:36,220 --> 00:10:40,210
the latest Python assuming all your

00:10:37,870 --> 00:10:41,920
dependencies run in it but a 3.7 was

00:10:40,210 --> 00:10:44,160
released two months ago and it can

00:10:41,920 --> 00:10:46,570
already run it in production if you want

00:10:44,160 --> 00:10:48,100
now I'm no bothering with upgrading in

00:10:46,570 --> 00:10:49,750
production images and I stuff or your

00:10:48,100 --> 00:10:52,750
production servers because dr u n-- is

00:10:49,750 --> 00:10:54,120
rebuilding say where you and put your

00:10:52,750 --> 00:10:56,380
stuff

00:10:54,120 --> 00:10:58,000
install any dependencies you might need

00:10:56,380 --> 00:11:00,070
for example installing the Postgres

00:10:58,000 --> 00:11:03,850
libraries the client library so you can

00:11:00,070 --> 00:11:05,950
connect your Postgres database copying

00:11:03,850 --> 00:11:12,690
your Python or climate's file and

00:11:05,950 --> 00:11:12,690
install it and then copy in your files

00:11:12,779 --> 00:11:16,959
so this is part of the reason that I

00:11:15,430 --> 00:11:19,120
recommend putting all of your Python

00:11:16,959 --> 00:11:21,519
files into one module is justice you

00:11:19,120 --> 00:11:22,779
have to name each directory individually

00:11:21,519 --> 00:11:26,560
to copy them in so if you just have one

00:11:22,779 --> 00:11:28,329
it simplifies your life copying your

00:11:26,560 --> 00:11:31,300
deployment your production deployment

00:11:28,329 --> 00:11:32,920
environment settings and then there are

00:11:31,300 --> 00:11:36,760
files like your Django management PI as

00:11:32,920 --> 00:11:41,079
appropriate a couple of useful

00:11:36,760 --> 00:11:43,260
environment variables for docker Python

00:11:41,079 --> 00:11:46,029
unbuffered means that reading input is

00:11:43,260 --> 00:11:50,200
not buffered and writing things out is

00:11:46,029 --> 00:11:53,980
not buffered it does

00:11:50,200 --> 00:11:54,790
utf-8 hard code that so that everything

00:11:53,980 --> 00:11:56,500
runs

00:11:54,790 --> 00:11:59,260
please use utf-8 I think there's a talk

00:11:56,500 --> 00:12:01,660
on that later use utf-8 and don't write

00:11:59,260 --> 00:12:03,449
bytecode so Python when it runs

00:12:01,660 --> 00:12:06,399
something will compile it to bytecode

00:12:03,449 --> 00:12:08,440
that's only useful if you restart Python

00:12:06,399 --> 00:12:10,329
if you're increased startup times but

00:12:08,440 --> 00:12:11,560
because you're in the air be using R

00:12:10,329 --> 00:12:13,480
you'll start the image up and then when

00:12:11,560 --> 00:12:15,699
it closes that you just start a new

00:12:13,480 --> 00:12:17,260
image up so it's never there's no point

00:12:15,699 --> 00:12:19,089
in writing bytecode out because you'll

00:12:17,260 --> 00:12:20,740
never have a chance to reuse that in

00:12:19,089 --> 00:12:21,820
your Python image it also kind of

00:12:20,740 --> 00:12:23,500
pollutes your development environment a

00:12:21,820 --> 00:12:26,829
little bit and can lead to strange

00:12:23,500 --> 00:12:30,339
issues with out-of-date PI C files so

00:12:26,829 --> 00:12:32,589
don't write it finally set up any other

00:12:30,339 --> 00:12:35,550
things like your Django settings module

00:12:32,589 --> 00:12:38,890
that you would like to use and finally

00:12:35,550 --> 00:12:41,350
how you should that the command that

00:12:38,890 --> 00:12:44,709
will run your application so we say

00:12:41,350 --> 00:12:49,959
please expose port 80 will serve the

00:12:44,709 --> 00:12:50,589
application over port 80 will the entry

00:12:49,959 --> 00:12:53,350
point one

00:12:50,589 --> 00:12:58,240
docker magic I can explain it in detail

00:12:53,350 --> 00:13:00,550
but it's Dockers weird and then the run

00:12:58,240 --> 00:13:03,779
script which I'll cover in a second and

00:13:00,550 --> 00:13:03,779
I'll actually start our whisky server

00:13:04,170 --> 00:13:09,130
docker compose this is again how you run

00:13:07,930 --> 00:13:13,270
your application in development and

00:13:09,130 --> 00:13:14,710
compose your docker image your Python

00:13:13,270 --> 00:13:15,880
image and your databases and your mail

00:13:14,710 --> 00:13:17,920
servers and your Redis and your

00:13:15,880 --> 00:13:18,220
memcached and all of these things

00:13:17,920 --> 00:13:21,520
together

00:13:18,220 --> 00:13:23,800
whatever you need pick and choose we

00:13:21,520 --> 00:13:27,550
tell it to build the current directory

00:13:23,800 --> 00:13:31,420
as the docker container of choice we

00:13:27,550 --> 00:13:33,580
tell it to run the docker container in

00:13:31,420 --> 00:13:35,500
so you can override what command is run

00:13:33,580 --> 00:13:37,450
so back in the previous slide where we

00:13:35,500 --> 00:13:40,060
had the command we're overriding that

00:13:37,450 --> 00:13:41,260
setting for development and saying

00:13:40,060 --> 00:13:42,700
please just run that the django

00:13:41,260 --> 00:13:44,740
development server which will give us

00:13:42,700 --> 00:13:48,820
library loading and nicer stack traces

00:13:44,740 --> 00:13:52,240
and debug messages we are saying please

00:13:48,820 --> 00:13:53,920
forward our host machine port 80 to the

00:13:52,240 --> 00:13:56,140
port 8000 in the docker

00:13:53,920 --> 00:14:01,110
machine so then we can access localhost

00:13:56,140 --> 00:14:04,150
port 80 to view the django application

00:14:01,110 --> 00:14:05,950
we are saying please mount our current

00:14:04,150 --> 00:14:07,450
directory into the docker container so

00:14:05,950 --> 00:14:08,650
all of the code changes that you make

00:14:07,450 --> 00:14:10,620
locally for development will be

00:14:08,650 --> 00:14:13,000
instantly married into the container and

00:14:10,620 --> 00:14:16,170
you get your library your loading and

00:14:13,000 --> 00:14:17,890
updated Python code as you would in a

00:14:16,170 --> 00:14:21,190
development on your hosts kind of

00:14:17,890 --> 00:14:24,270
environment saying please use the dev

00:14:21,190 --> 00:14:26,950
settings instead of the deploy settings

00:14:24,270 --> 00:14:29,860
are we saying please link me to the

00:14:26,950 --> 00:14:31,210
database image so that'll make sure that

00:14:29,860 --> 00:14:34,630
started up first before it starts the

00:14:31,210 --> 00:14:37,060
Django one up then we're saying please

00:14:34,630 --> 00:14:38,620
make me a database image and it really

00:14:37,060 --> 00:14:40,930
is that simple just please run me a

00:14:38,620 --> 00:14:42,190
Postgres and it will and then like you

00:14:40,930 --> 00:14:43,840
don't have to install Postgres on your

00:14:42,190 --> 00:14:44,980
host this this will run Postgres it'll

00:14:43,840 --> 00:14:48,220
take care of managing the database

00:14:44,980 --> 00:14:50,470
starting it giving it making a user two

00:14:48,220 --> 00:14:52,690
lines this is one of the great things

00:14:50,470 --> 00:14:54,190
about docker and then it got memcached

00:14:52,690 --> 00:14:58,360
same thing two lines you've got

00:14:54,190 --> 00:15:00,700
memcached and then you've got a debug

00:14:58,360 --> 00:15:02,410
mail server this one is useful this is

00:15:00,700 --> 00:15:04,720
what I was mentioning earlier that it

00:15:02,410 --> 00:15:08,500
just runs as a docker image it is an

00:15:04,720 --> 00:15:09,520
SMTP server so you send like you connect

00:15:08,500 --> 00:15:11,110
to wood and say please send me this

00:15:09,520 --> 00:15:13,750
email and it won't actually send it or

00:15:11,110 --> 00:15:16,390
just keep it in a mailbox that you can

00:15:13,750 --> 00:15:18,730
then access on port 9000 and

00:15:16,390 --> 00:15:20,350
view them in your browser no so it makes

00:15:18,730 --> 00:15:22,720
debugging emails really easy you're not

00:15:20,350 --> 00:15:24,190
accidentally gonna spam your clients if

00:15:22,720 --> 00:15:25,480
you've if you've copied down some

00:15:24,190 --> 00:15:27,100
production data you're not accidentally

00:15:25,480 --> 00:15:28,420
gonna overwhelm your network if you get

00:15:27,100 --> 00:15:31,360
into a bit of a loop is just gonna go to

00:15:28,420 --> 00:15:33,310
locally and view it you can see how your

00:15:31,360 --> 00:15:39,670
emails gonna look in a browser that's

00:15:33,310 --> 00:15:44,950
great the run script this one is not

00:15:39,670 --> 00:15:46,780
particularly interesting this is not the

00:15:44,950 --> 00:15:50,200
best way of doing it I'm still learning

00:15:46,780 --> 00:15:51,910
how to do some of this but you need to

00:15:50,200 --> 00:15:54,460
run your migrate your database

00:15:51,910 --> 00:15:56,770
migrations and any other startup

00:15:54,460 --> 00:15:58,390
migration commands like collecting

00:15:56,770 --> 00:16:00,730
static files and moving uploading into

00:15:58,390 --> 00:16:02,830
s3 it's something like that run them

00:16:00,730 --> 00:16:04,240
here the other option is if you're

00:16:02,830 --> 00:16:06,220
running kubernetes or something you can

00:16:04,240 --> 00:16:09,070
have like a one-off pod that launches

00:16:06,220 --> 00:16:11,350
and runs these scripts but if you're not

00:16:09,070 --> 00:16:16,150
quite that fancy yet like me you can

00:16:11,350 --> 00:16:19,390
just do it all in one go then you start

00:16:16,150 --> 00:16:23,740
your whisky process which a bunch of

00:16:19,390 --> 00:16:25,660
settings again these settings they're

00:16:23,740 --> 00:16:29,650
all on the code example not particularly

00:16:25,660 --> 00:16:33,270
interesting right now but just start

00:16:29,650 --> 00:16:33,270
whisky there you can then access

00:16:35,490 --> 00:16:38,850
that'll get you are working in docker

00:16:36,899 --> 00:16:41,850
container hopefully you don't know until

00:16:38,850 --> 00:16:44,550
you tested it so you can use this image

00:16:41,850 --> 00:16:47,429
that you've just built to run your tests

00:16:44,550 --> 00:16:49,139
in and then you're testing the actual

00:16:47,429 --> 00:16:50,699
thing that you're gonna run in

00:16:49,139 --> 00:16:52,499
production like you you build this image

00:16:50,699 --> 00:16:53,850
and then you invoke your tests in this

00:16:52,499 --> 00:16:55,410
image and then you run that image in

00:16:53,850 --> 00:16:58,589
production so you're testing the literal

00:16:55,410 --> 00:17:00,540
thing you're about to deploy so the way

00:16:58,589 --> 00:17:03,529
you do that you build your image you

00:17:00,540 --> 00:17:06,740
start up a container you put your tests

00:17:03,529 --> 00:17:09,689
directory in there and then you run them

00:17:06,740 --> 00:17:14,970
and this is just a few command line

00:17:09,689 --> 00:17:17,159
docker calls I potentially

00:17:14,970 --> 00:17:19,470
controversially say that you should

00:17:17,159 --> 00:17:22,260
install your test dependencies in your

00:17:19,470 --> 00:17:24,990
production image it's only a you know a

00:17:22,260 --> 00:17:26,789
couple of kilobytes megabytes wince tall

00:17:24,990 --> 00:17:29,039
PI tests or any of those other libraries

00:17:26,789 --> 00:17:32,370
but then you know that the image that

00:17:29,039 --> 00:17:34,320
you're about to test unaltered is the

00:17:32,370 --> 00:17:36,390
image that's going to run in production

00:17:34,320 --> 00:17:37,890
you don't have to install anything extra

00:17:36,390 --> 00:17:39,990
which will then modify the image it's

00:17:37,890 --> 00:17:42,539
it's it's the thing that's running and

00:17:39,990 --> 00:17:47,909
the extra file size is more or less

00:17:42,539 --> 00:17:49,770
irrelevant in this day and age so yeah

00:17:47,909 --> 00:17:50,789
test gesture with as little modification

00:17:49,770 --> 00:17:52,200
as you can to your production image

00:17:50,789 --> 00:17:56,429
because then you know what you're

00:17:52,200 --> 00:17:58,860
testing is what you're running and you

00:17:56,429 --> 00:18:01,620
can use docker to spin up any other

00:17:58,860 --> 00:18:05,270
dependencies like your database just as

00:18:01,620 --> 00:18:11,610
you would a docker compose it will make

00:18:05,270 --> 00:18:13,100
yeah so they have a test of I'm easy so

00:18:11,610 --> 00:18:18,000
[Music]

00:18:13,100 --> 00:18:24,360
building an image you run something a

00:18:18,000 --> 00:18:28,860
much like that this is a bunch of flags

00:18:24,360 --> 00:18:32,520
that I'll explain so create a container

00:18:28,860 --> 00:18:35,820
name it so we can find it mount your the

00:18:32,520 --> 00:18:37,110
tests for your code into your docker

00:18:35,820 --> 00:18:38,760
container so that they're in there we

00:18:37,110 --> 00:18:41,419
didn't include them in the production

00:18:38,760 --> 00:18:45,149
image because some test Suites have like

00:18:41,419 --> 00:18:46,380
megabytes of sample data so you don't

00:18:45,149 --> 00:18:47,340
want to include them in production image

00:18:46,380 --> 00:18:48,900
because that'll that'll get a bit

00:18:47,340 --> 00:18:51,540
excessive

00:18:48,900 --> 00:18:53,760
copying any other configuration files

00:18:51,540 --> 00:18:55,920
like your linting file so the linters

00:18:53,760 --> 00:18:57,330
can find them later set up any

00:18:55,920 --> 00:19:01,160
environment variables such as the

00:18:57,330 --> 00:19:04,530
ability to connect to databases and then

00:19:01,160 --> 00:19:06,150
the last line with a tail - f is a

00:19:04,530 --> 00:19:07,950
sneaky little thing it'll just do

00:19:06,150 --> 00:19:09,030
nothing so he started the container it's

00:19:07,950 --> 00:19:10,410
got all the code there but it does

00:19:09,030 --> 00:19:16,370
nothing so it's not actually running a

00:19:10,410 --> 00:19:19,290
Python process yet then we started we

00:19:16,370 --> 00:19:21,660
exactly execute in that container our

00:19:19,290 --> 00:19:24,450
tests hopefully they will pass

00:19:21,660 --> 00:19:25,980
I think it's crossed and then you can do

00:19:24,450 --> 00:19:27,840
other things so that like the first one

00:19:25,980 --> 00:19:29,280
is running all your things unmodified

00:19:27,840 --> 00:19:30,390
and then you can install any linting

00:19:29,280 --> 00:19:33,090
tools that you might want that flake

00:19:30,390 --> 00:19:36,630
eight I saw copy in any extra

00:19:33,090 --> 00:19:39,390
directories lint them check them run all

00:19:36,630 --> 00:19:45,440
your tests and everything passes it's

00:19:39,390 --> 00:19:50,070
magical some useful tools for this so

00:19:45,440 --> 00:19:52,590
pip compiled from paper tools it allows

00:19:50,070 --> 00:19:54,290
you to specify requirements that are

00:19:52,590 --> 00:19:57,140
kind of broad and then locks them down

00:19:54,290 --> 00:20:00,240
so that their ties into the Dockers

00:19:57,140 --> 00:20:01,980
repeatable builds kind of thing so you

00:20:00,240 --> 00:20:03,600
know if someone releases a new version

00:20:01,980 --> 00:20:04,890
on pip you don't accidentally pull down

00:20:03,600 --> 00:20:06,590
the latest version and then break all

00:20:04,890 --> 00:20:08,490
your things because it's locked down

00:20:06,590 --> 00:20:10,980
please look into that one that's great

00:20:08,490 --> 00:20:12,540
it's kind of I know the node community

00:20:10,980 --> 00:20:14,370
and many other development communities

00:20:12,540 --> 00:20:16,380
have similar tools OPM does similar

00:20:14,370 --> 00:20:18,170
things I like pip compiled from their

00:20:16,380 --> 00:20:21,300
particular reason

00:20:18,170 --> 00:20:22,980
DJ database URL if you're running docker

00:20:21,300 --> 00:20:24,120
sorry if you're running Jango just

00:20:22,980 --> 00:20:26,490
allows you to configure database with a

00:20:24,120 --> 00:20:27,900
single string instead of the four or

00:20:26,490 --> 00:20:29,520
five or six that you need to connect to

00:20:27,900 --> 00:20:34,260
your hosts so it makes it comparing with

00:20:29,520 --> 00:20:36,630
environment variables very easily there

00:20:34,260 --> 00:20:37,260
is a demo as I said this is all up on

00:20:36,630 --> 00:20:38,940
github

00:20:37,260 --> 00:20:41,880
that the thing I just described I have

00:20:38,940 --> 00:20:44,520
built in github and I have uploaded it

00:20:41,880 --> 00:20:46,260
you can run it it's just a docker up and

00:20:44,520 --> 00:20:48,350
we'll talk to compose up and it works

00:20:46,260 --> 00:20:52,590
and then you can play around with it and

00:20:48,350 --> 00:20:54,150
have fun it runs an application that

00:20:52,590 --> 00:20:56,370
looks a bit like this it's a very simple

00:20:54,150 --> 00:20:58,210
to do app that you can't even delete

00:20:56,370 --> 00:21:06,920
talk to dues but you know

00:20:58,210 --> 00:21:08,570
of the and that runs in docker from that

00:21:06,920 --> 00:21:15,530
github 300 so please play with that if

00:21:08,570 --> 00:21:17,810
you would like I am it slightly running

00:21:15,530 --> 00:21:20,710
out of time but the that that gives you

00:21:17,810 --> 00:21:23,060
a very very basic docker image there are

00:21:20,710 --> 00:21:26,570
real world applications require a bit

00:21:23,060 --> 00:21:28,400
more fanciness so I have built two extra

00:21:26,570 --> 00:21:31,580
examples in the demo repo that please go

00:21:28,400 --> 00:21:35,540
and look at them but first one is that

00:21:31,580 --> 00:21:37,100
builds front-end assets so any so most

00:21:35,540 --> 00:21:38,540
web development where where you're

00:21:37,100 --> 00:21:41,780
making a front-end as well you'll need

00:21:38,540 --> 00:21:44,210
to run or you might want to run a node

00:21:41,780 --> 00:21:46,370
or NPM build chain that will compile

00:21:44,210 --> 00:21:49,070
your CSS files and his JavaScript files

00:21:46,370 --> 00:21:51,500
together you don't necessarily want to

00:21:49,070 --> 00:21:53,000
have node in your final image because

00:21:51,500 --> 00:21:54,350
it'll blow things up and then you'll

00:21:53,000 --> 00:21:57,260
have node and Python in there at the

00:21:54,350 --> 00:22:00,740
same time so there is an example that

00:21:57,260 --> 00:22:02,690
will compile your front-end assets copy

00:22:00,740 --> 00:22:07,070
them into the Python image won't have

00:22:02,690 --> 00:22:10,220
node in there and you can use whatever

00:22:07,070 --> 00:22:12,590
build chain they were black works in

00:22:10,220 --> 00:22:15,080
development supports library load all

00:22:12,590 --> 00:22:17,420
those fancy things a proper node build

00:22:15,080 --> 00:22:19,880
chain is a topic for a completely

00:22:17,420 --> 00:22:22,960
different audience so I'll let you

00:22:19,880 --> 00:22:22,960
discover those ones on your own

00:22:26,700 --> 00:22:32,289
the other thing you might want to run is

00:22:29,049 --> 00:22:34,539
celery tasks so any sort of build queue

00:22:32,289 --> 00:22:36,610
so this is that the generic thought here

00:22:34,539 --> 00:22:37,929
is you have your webserver running but

00:22:36,610 --> 00:22:41,369
you might also want to run other things

00:22:37,929 --> 00:22:43,330
like a task queue or any or any other

00:22:41,369 --> 00:22:46,419
thing that has all your code available

00:22:43,330 --> 00:22:48,369
runs a completely different command so

00:22:46,419 --> 00:22:51,759
the celery task queue consumer it's one

00:22:48,369 --> 00:22:56,350
of those things and it reuse the same

00:22:51,759 --> 00:22:58,690
build image to keep all your code in one

00:22:56,350 --> 00:23:05,259
flat spot minimal duplication of

00:22:58,690 --> 00:23:06,639
configuration and then you can use the

00:23:05,259 --> 00:23:09,009
doctor composer to run the actual broker

00:23:06,639 --> 00:23:11,740
which again is just two lines and then

00:23:09,009 --> 00:23:17,919
magically you've got a whole celery task

00:23:11,740 --> 00:23:22,840
queue so I have this repo there's some

00:23:17,919 --> 00:23:25,869
examples fairly minimal changes to make

00:23:22,840 --> 00:23:27,129
the celery task queue run I won't bore

00:23:25,869 --> 00:23:34,240
you with the actual details please look

00:23:27,129 --> 00:23:35,919
at them and it runs celery and there's

00:23:34,240 --> 00:23:38,309
also the front-end Bill chain in there

00:23:35,919 --> 00:23:38,309
as well

00:23:38,590 --> 00:23:42,820
[Music]

00:23:39,960 --> 00:23:51,509
cool just about done and I wanted to

00:23:42,820 --> 00:23:51,509
take questions so don't thank you Tim

00:23:52,100 --> 00:24:03,800
Thanks are there any questions for Tim

00:23:54,770 --> 00:24:06,170
yes hey I just wanted to ask why using

00:24:03,800 --> 00:24:08,830
separate config file for dev and

00:24:06,170 --> 00:24:11,210
production why aren't you just using

00:24:08,830 --> 00:24:13,250
having one config file having everything

00:24:11,210 --> 00:24:15,830
come out for environment variables since

00:24:13,250 --> 00:24:18,140
you're being set in dogger compose and

00:24:15,830 --> 00:24:21,280
then imagine they're being set when you

00:24:18,140 --> 00:24:24,950
deploy to production yep

00:24:21,280 --> 00:24:27,140
I've just often found that like so

00:24:24,950 --> 00:24:28,640
staging and production I agree you

00:24:27,140 --> 00:24:30,470
should reuse the one config file but

00:24:28,640 --> 00:24:33,080
development you just want some weird

00:24:30,470 --> 00:24:35,570
little different things like you might

00:24:33,080 --> 00:24:38,090
want to enable some extra apps some

00:24:35,570 --> 00:24:41,570
extra plugins that you don't want to

00:24:38,090 --> 00:24:44,390
enable in production if you start doing

00:24:41,570 --> 00:24:46,400
flags like you know if is production you

00:24:44,390 --> 00:24:47,690
know enable these apps if and

00:24:46,400 --> 00:24:51,940
development enables other ones then I

00:24:47,690 --> 00:24:54,470
found the config file gets convoluted

00:24:51,940 --> 00:24:57,170
whereas if you just have two separate

00:24:54,470 --> 00:25:00,350
ones like development is a starkly

00:24:57,170 --> 00:25:01,760
different environment to production you

00:25:00,350 --> 00:25:03,460
want to enable your live reload you want

00:25:01,760 --> 00:25:06,890
to enable all these other things so I

00:25:03,460 --> 00:25:09,200
just found it easier to just keep them

00:25:06,890 --> 00:25:10,550
separate you could absolutely if you

00:25:09,200 --> 00:25:12,350
wanted to and if you and this would

00:25:10,550 --> 00:25:14,660
preserve your environment in development

00:25:12,350 --> 00:25:17,540
production and make them even closer of

00:25:14,660 --> 00:25:20,680
course we use the production config in

00:25:17,540 --> 00:25:20,680
development doctor you

00:25:30,020 --> 00:25:35,120
hi how do you manage like logging in an

00:25:32,990 --> 00:25:36,680
application like if I wanted all the

00:25:35,120 --> 00:25:41,450
output of something to go to like log

00:25:36,680 --> 00:25:43,070
stash or something like that you can

00:25:41,450 --> 00:25:45,260
configure the logging as you would any

00:25:43,070 --> 00:25:47,090
other Python application so if you're

00:25:45,260 --> 00:25:48,740
just using this standard Python logging

00:25:47,090 --> 00:25:50,270
library then you just configure it in

00:25:48,740 --> 00:25:53,870
the normal way and then if you want to

00:25:50,270 --> 00:25:56,150
pipe it somewhere else so you could I'm

00:25:53,870 --> 00:25:57,590
not that familiar with log stash but if

00:25:56,150 --> 00:25:58,520
that's an image you can run locally then

00:25:57,590 --> 00:26:00,080
you probably just run that in

00:25:58,520 --> 00:26:01,910
development and if you're not running it

00:26:00,080 --> 00:26:03,500
in and if that's not a thing you can do

00:26:01,910 --> 00:26:05,330
if it's one of those cloud hosted ones

00:26:03,500 --> 00:26:07,250
then you could put the configuration for

00:26:05,330 --> 00:26:08,810
that in your production configure as

00:26:07,250 --> 00:26:09,980
opposed to your development config which

00:26:08,810 --> 00:26:12,050
might have a completely different like

00:26:09,980 --> 00:26:14,660
console logging there's another reason

00:26:12,050 --> 00:26:16,160
to have a difference but at the end of

00:26:14,660 --> 00:26:19,600
the day it's just running Python so you

00:26:16,160 --> 00:26:19,600
can figure it in the same kind of ways I

00:26:22,240 --> 00:26:26,660
thank you for the talk you mentioned you

00:26:24,980 --> 00:26:31,280
wouldn't really use docker compose in

00:26:26,660 --> 00:26:34,430
production why is that to make a

00:26:31,280 --> 00:26:36,230
significant change to your environment

00:26:34,430 --> 00:26:37,850
such as environment variables or

00:26:36,230 --> 00:26:39,980
different image and that kind of stuff I

00:26:37,850 --> 00:26:42,230
haven't found a way in docker compose to

00:26:39,980 --> 00:26:43,310
gracefully restart just that one section

00:26:42,230 --> 00:26:44,170
you have to bring the whole thing down

00:26:43,310 --> 00:26:46,850
and back up again

00:26:44,170 --> 00:26:49,310
also in production you might want to

00:26:46,850 --> 00:26:50,690
have like a shared database for a couple

00:26:49,310 --> 00:26:54,620
of your apps as opposed to one database

00:26:50,690 --> 00:26:56,780
per app or memory national Redis or as

00:26:54,620 --> 00:27:00,050
appropriate so you would have to have a

00:26:56,780 --> 00:27:05,270
duplicate config for production and

00:27:00,050 --> 00:27:07,160
development and in production I would

00:27:05,270 --> 00:27:10,520
advise using something like kubernetes

00:27:07,160 --> 00:27:12,560
that does all the magic for you but I

00:27:10,520 --> 00:27:15,440
don't think dr. Campos is that's not its

00:27:12,560 --> 00:27:19,310
intended purpose I don't think so it

00:27:15,440 --> 00:27:20,660
can't do nice rolling updates to images

00:27:19,310 --> 00:27:23,320
and that kind of blue-green deployment

00:27:20,660 --> 00:27:23,320
and all those fancy things

00:27:25,510 --> 00:27:34,900
hi where is a process monitoring tool

00:27:28,210 --> 00:27:37,290
like supervisor D fitted not always

00:27:34,900 --> 00:27:40,480
inside your docker containers so

00:27:37,290 --> 00:27:42,280
supervisor D all those process monitors

00:27:40,480 --> 00:27:46,630
could theoretically run your docker

00:27:42,280 --> 00:27:50,260
images so if you had a couple of Soyoung

00:27:46,630 --> 00:27:51,820
if you had your web application docker

00:27:50,260 --> 00:27:53,650
image and a couple of celery worker

00:27:51,820 --> 00:27:57,190
docker images then supervisor D could

00:27:53,650 --> 00:27:59,590
theoretically run those processes on the

00:27:57,190 --> 00:28:00,970
host system and with a bit of magic you

00:27:59,590 --> 00:28:03,280
could even run that inside a docker

00:28:00,970 --> 00:28:07,240
image that then runs docker images on

00:28:03,280 --> 00:28:12,300
the host image a host computer that's

00:28:07,240 --> 00:28:14,760
that's getting a bit fancy but you

00:28:12,300 --> 00:28:17,620
recommended not to run multiple

00:28:14,760 --> 00:28:21,430
processes or multiple apps inside a

00:28:17,620 --> 00:28:23,050
single docker container so you rarely

00:28:21,430 --> 00:28:27,250
run supervisor D within your doctor

00:28:23,050 --> 00:28:29,400
container itself and that's all we have

00:28:27,250 --> 00:28:33,890
time for please THANK to him again

00:28:29,400 --> 00:28:33,890

YouTube URL: https://www.youtube.com/watch?v=9L6x2j-7eVQ


