Title: MicroPython: Embedded programming for everyone
Publication date: 2016-08-16
Playlist: Education Seminar 2016 (Miniconf)
Description: 
	Jim Mussared
https://2016.pycon-au.org/schedule/110/view_talk
Embedded programming allows students to take their programs into the physical world - to build robots and interactive gadgets with sensors and displays. Until recently, this has been almost exclusively the domain of lower level languages like C which is not known for its beginner friendliness.

MicroPython is an optimized implementation of Python 3 designed to be run on the sort of embedded microcontrollers that are making their way into the classroom, allowing Python to take the place of C. In particular, the BBC MicroBit, the pyboard and the ESP8266 all now support MicroPython.

By using a language that students are already familiar with, more time can be spent on fun things like building robots and less time debugging code or setting up development tools.

One of the problems with teaching embedded programming in a classroom environment is the equipment required - both the actual boards and any additional accessories or modules. We will also demonstrate a browser-based MicroBit simulator which makes embedded programming accessible to more students and also allows for the creation of structured lessons, problems and assessments.
Captions: 
	00:00:00,199 --> 00:00:06,060
all right thank you yes women's gym and

00:00:04,859 --> 00:00:08,460
I'm from grukk and I'll talk a little

00:00:06,060 --> 00:00:09,660
bit about rock later on I guess there's

00:00:08,460 --> 00:00:12,630
an audience of teachers and educators

00:00:09,660 --> 00:00:14,549
here who who's familiar with Kroc and

00:00:12,630 --> 00:00:17,490
the ancestors challenge and cool awesome

00:00:14,549 --> 00:00:19,590
so I told a lot about that but so

00:00:17,490 --> 00:00:21,990
embedded programming is a personal

00:00:19,590 --> 00:00:23,580
interest of mine messing around with

00:00:21,990 --> 00:00:25,320
microcontrollers and I do know things

00:00:23,580 --> 00:00:26,939
like that and building building building

00:00:25,320 --> 00:00:30,510
circuits and whatever always has been

00:00:26,939 --> 00:00:32,610
the for anyone who's taught Arduino or

00:00:30,510 --> 00:00:35,010
embedded programming in a classroom you

00:00:32,610 --> 00:00:36,780
know how difficult this can be and so

00:00:35,010 --> 00:00:39,930
this talk is about micro Python which is

00:00:36,780 --> 00:00:40,770
hopefully a great alternative to some of

00:00:39,930 --> 00:00:42,270
the things that are already out there

00:00:40,770 --> 00:00:43,739
and just makes this process so much

00:00:42,270 --> 00:00:49,200
easier and focuses on the things that

00:00:43,739 --> 00:00:53,190
are actually important so micro Python

00:00:49,200 --> 00:00:55,500
first of all it's Python but micro runs

00:00:53,190 --> 00:00:56,760
on micro and rollers um we'll talk a

00:00:55,500 --> 00:00:57,420
little bit about what that means what is

00:00:56,760 --> 00:00:59,789
a microcontroller

00:00:57,420 --> 00:01:01,320
so you're probably familiar with Arduino

00:00:59,789 --> 00:01:04,559
which runs on a microcontroller called

00:01:01,320 --> 00:01:06,270
the 18 mega micro Python is not quite

00:01:04,559 --> 00:01:09,240
that micro but it's just a little bit

00:01:06,270 --> 00:01:11,340
little bit bigger than that the cortex

00:01:09,240 --> 00:01:14,490
m0 is a typical kind of chip that you

00:01:11,340 --> 00:01:16,470
might run micro Python on these are sort

00:01:14,490 --> 00:01:18,240
of chips that have maybe a quarter of a

00:01:16,470 --> 00:01:20,909
megabyte of Flash that's where you store

00:01:18,240 --> 00:01:23,549
your programming code and 16 K of RAM

00:01:20,909 --> 00:01:27,240
it's a pretty tiny and they run out sort

00:01:23,549 --> 00:01:29,700
of 16 megabytes but it's real Python

00:01:27,240 --> 00:01:33,049
it's everything you expect from Python

00:01:29,700 --> 00:01:36,930
all of the standard libraries JSON

00:01:33,049 --> 00:01:38,310
sockets and anyone who's intimate anyone

00:01:36,930 --> 00:01:39,720
who's familiar with Python 3 will

00:01:38,310 --> 00:01:41,490
immediately before be familiar with

00:01:39,720 --> 00:01:43,229
micro Python most of your micro pipe

00:01:41,490 --> 00:01:45,360
most of your Python 3 code runs

00:01:43,229 --> 00:01:48,899
unmodified on on the microfiber on the

00:01:45,360 --> 00:01:50,040
microf a third runtime and if you've

00:01:48,899 --> 00:01:51,720
ever done in better program you used to

00:01:50,040 --> 00:01:53,159
doing things like a compile process that

00:01:51,720 --> 00:01:54,360
then builds an image that you flash on

00:01:53,159 --> 00:01:56,340
with a programmer and things like that

00:01:54,360 --> 00:01:58,229
once you have a completely set up micro

00:01:56,340 --> 00:02:00,000
Python device you put the micropyle in

00:01:58,229 --> 00:02:01,469
firmware on there once and then there's

00:02:00,000 --> 00:02:04,020
a very easy way of just putting a new

00:02:01,469 --> 00:02:05,430
main dot pi onto your so you're dealing

00:02:04,020 --> 00:02:08,610
just with python and things that you're

00:02:05,430 --> 00:02:10,830
already familiar with and then it's

00:02:08,610 --> 00:02:13,380
Python 3 but it also gives you Python

00:02:10,830 --> 00:02:15,000
style access to all the things on the

00:02:13,380 --> 00:02:17,190
is that you'd like to get to do with

00:02:15,000 --> 00:02:19,580
their device access GPIO pins to turn

00:02:17,190 --> 00:02:22,440
lights on and off to control motors

00:02:19,580 --> 00:02:25,890
control displays talk serial and things

00:02:22,440 --> 00:02:30,260
like that Python was created microphone

00:02:25,890 --> 00:02:33,780
was created by physicist damien rim and

00:02:30,260 --> 00:02:36,030
it's going to space it's being picked up

00:02:33,780 --> 00:02:37,740
by lots of vendors it's a really

00:02:36,030 --> 00:02:41,400
exciting project it's an easy codebase

00:02:37,740 --> 00:02:43,380
to work on and functionally has

00:02:41,400 --> 00:02:47,820
everything you need from python up to

00:02:43,380 --> 00:02:50,550
Python 3.4 I should mention the pie

00:02:47,820 --> 00:02:52,200
board if you are looking to bring micro

00:02:50,550 --> 00:02:57,030
Python into your classroom pi board is

00:02:52,200 --> 00:02:58,140
one of the great options it has a an SD

00:02:57,030 --> 00:03:00,390
card which is great for additional

00:02:58,140 --> 00:03:04,530
storage it's easily extensible lots of

00:03:00,390 --> 00:03:05,880
GPIO pins runs Python microphone out of

00:03:04,530 --> 00:03:10,620
the box and it's designed for micro

00:03:05,880 --> 00:03:11,610
Python but one of the main things

00:03:10,620 --> 00:03:14,160
actually on this walkway is the BBC

00:03:11,610 --> 00:03:16,890
micro bit when I say baby say micro bit

00:03:14,160 --> 00:03:18,300
this is what people think of here who

00:03:16,890 --> 00:03:21,800
went to it went to school it had a micro

00:03:18,300 --> 00:03:24,180
bit I'm like I'm BBC micro I should say

00:03:21,800 --> 00:03:26,130
no we're not told me this isn't only one

00:03:24,180 --> 00:03:27,630
but well the BBC did is they said we

00:03:26,130 --> 00:03:28,800
want to get competing in schools so when

00:03:27,630 --> 00:03:30,990
you give one of these to every classroom

00:03:28,800 --> 00:03:33,210
in the UK and Australia picked up a few

00:03:30,990 --> 00:03:35,160
as well what they did this time around

00:03:33,210 --> 00:03:38,070
as they said we're going to give one of

00:03:35,160 --> 00:03:39,630
these the BBC micro bit to every grade 7

00:03:38,070 --> 00:03:42,300
student in the UK and something like a

00:03:39,630 --> 00:03:45,330
million units or they just shipped so

00:03:42,300 --> 00:03:47,070
this is the micro bit it's got our

00:03:45,330 --> 00:03:48,660
little five by five LED matrix on the

00:03:47,070 --> 00:03:49,980
front so out of the box you can do

00:03:48,660 --> 00:03:51,420
things with this if you've ever used an

00:03:49,980 --> 00:03:53,550
Arduino and you've been frustrated that

00:03:51,420 --> 00:03:57,870
all you can do is blink one LED on the

00:03:53,550 --> 00:04:01,740
arduino the micro bit has 25 LEDs just

00:03:57,870 --> 00:04:04,320
to start in addition it has two buttons

00:04:01,740 --> 00:04:06,150
an A and a B button it has an

00:04:04,320 --> 00:04:08,520
accelerometer a compass a temperature

00:04:06,150 --> 00:04:10,200
sensor and it talks bluetooth and it's

00:04:08,520 --> 00:04:12,240
built for all of those things there's no

00:04:10,200 --> 00:04:14,010
trying to find sample code and things

00:04:12,240 --> 00:04:16,560
like that it just works it's it's a

00:04:14,010 --> 00:04:18,720
fully packaged unit that's easy to teach

00:04:16,560 --> 00:04:21,450
with and down the bottom it has a whole

00:04:18,720 --> 00:04:25,229
bunch of additional pins the big pins

00:04:21,450 --> 00:04:26,910
are specifically designed to hook a I'll

00:04:25,229 --> 00:04:27,389
get equipped to so if you want to build

00:04:26,910 --> 00:04:28,889
a simple

00:04:27,389 --> 00:04:31,050
bucket it's really easy just to put a

00:04:28,889 --> 00:04:32,879
clip on the thing and you're only ready

00:04:31,050 --> 00:04:35,819
to go there's no bread boarding or

00:04:32,879 --> 00:04:39,240
anything like that for basic things as

00:04:35,819 --> 00:04:40,860
well as the GPIO pins it'll do standard

00:04:39,240 --> 00:04:42,990
set of protocols like SPI I squared C

00:04:40,860 --> 00:04:45,270
UART and 80s and and they're all a few

00:04:42,990 --> 00:04:46,650
of them analog pins as well it has a

00:04:45,270 --> 00:04:47,939
battery connector on the top so you can

00:04:46,650 --> 00:04:49,259
build battery-powered circuits this is a

00:04:47,939 --> 00:04:51,360
big problem with Arduino if you've ever

00:04:49,259 --> 00:04:53,969
done big battery packs on your Arduino

00:04:51,360 --> 00:04:57,900
and things like that it's incredibly

00:04:53,969 --> 00:05:00,419
easy to get started with and they're not

00:04:57,900 --> 00:05:01,770
that expensive if you've bought Arduino

00:05:00,419 --> 00:05:04,710
is for your school you'll be familiar

00:05:01,770 --> 00:05:07,919
with just how expensive they can be you

00:05:04,710 --> 00:05:10,139
can buy packs of ten from places like

00:05:07,919 --> 00:05:11,490
atronics in the UK it works out to

00:05:10,139 --> 00:05:15,629
roughly twenty twenty-five dollars each

00:05:11,490 --> 00:05:17,370
for the micro bit compare that to some

00:05:15,629 --> 00:05:18,960
of the options out there it's worth

00:05:17,370 --> 00:05:20,789
comparing it's it's a more powerful

00:05:18,960 --> 00:05:22,979
thing than the Arduino Leonardo it's

00:05:20,789 --> 00:05:24,509
similar specs when Arduino zero the

00:05:22,979 --> 00:05:26,039
Explorer obviously if you've seen it has

00:05:24,509 --> 00:05:27,990
all the buttons and things you can do

00:05:26,039 --> 00:05:29,069
with it so I'm gonna but explorers are

00:05:27,990 --> 00:05:31,589
really expensive and they don't have

00:05:29,069 --> 00:05:33,000
displays the Raspberry Pi is and

00:05:31,589 --> 00:05:34,229
actually a whole computer so when you're

00:05:33,000 --> 00:05:36,389
teaching with your ivory Pi you have to

00:05:34,229 --> 00:05:39,029
deal with all the things like running

00:05:36,389 --> 00:05:41,909
Linux on it and logging into it in

00:05:39,029 --> 00:05:43,199
software and things like that and a

00:05:41,909 --> 00:05:47,729
mention of hi bye-bye boards another

00:05:43,199 --> 00:05:49,110
great option for micro Python so the BBC

00:05:47,729 --> 00:05:51,419
worked with a bunch of providers to

00:05:49,110 --> 00:05:52,319
build this board they're basically we're

00:05:51,419 --> 00:05:54,270
just going to make this happen

00:05:52,319 --> 00:05:55,830
and all these individual providers came

00:05:54,270 --> 00:05:59,430
together to actually produce the board

00:05:55,830 --> 00:06:00,569
so nautic supplied the cpu Microsoft was

00:05:59,430 --> 00:06:02,159
a big partner and they provided

00:06:00,569 --> 00:06:03,810
optimally some of the programming tools

00:06:02,159 --> 00:06:06,659
for it and one of the really cool things

00:06:03,810 --> 00:06:07,860
that BBC did was said all this is going

00:06:06,659 --> 00:06:10,610
to happen in the browser whether it's

00:06:07,860 --> 00:06:13,080
coding or block or visual programming

00:06:10,610 --> 00:06:15,449
you build up the program in the website

00:06:13,080 --> 00:06:16,949
we provide free access to that and the

00:06:15,449 --> 00:06:18,990
thing you get from that is an image that

00:06:16,949 --> 00:06:20,669
you can just drag onto the micro bit so

00:06:18,990 --> 00:06:21,960
there's if you've done Arduino again so

00:06:20,669 --> 00:06:22,889
I don't want it actually really like I

00:06:21,960 --> 00:06:25,710
do we notice I don't want to keep hating

00:06:22,889 --> 00:06:27,689
on it but the is the process for the

00:06:25,710 --> 00:06:29,729
micro bit assistance so much simpler you

00:06:27,689 --> 00:06:31,589
download a dot hex file the micro bit

00:06:29,729 --> 00:06:33,870
shows up as a USB Drive on your computer

00:06:31,589 --> 00:06:35,129
you drag that downloaded file onto it

00:06:33,870 --> 00:06:37,949
and it reboots and you have your code

00:06:35,129 --> 00:06:40,349
running on it immediately but what the

00:06:37,949 --> 00:06:41,419
BBC did was the four options they

00:06:40,349 --> 00:06:43,789
provide four languages

00:06:41,419 --> 00:06:45,889
the fourth one is micro Python and you

00:06:43,789 --> 00:06:48,050
go to the website your little IDE in the

00:06:45,889 --> 00:06:53,000
browser and you write Python in the

00:06:48,050 --> 00:06:54,379
browser and now an ecosystem is popping

00:06:53,000 --> 00:06:57,169
up just like I do I know which is

00:06:54,379 --> 00:06:59,150
wonderful a company called kitronik in

00:06:57,169 --> 00:07:03,620
the UK is doing things like motorised

00:06:59,150 --> 00:07:06,259
buggies motors lights neopixels the

00:07:03,620 --> 00:07:07,729
whole works and it's easy just to click

00:07:06,259 --> 00:07:08,900
connect the pins I think that's worth

00:07:07,729 --> 00:07:11,240
mentioning and the reason I put another

00:07:08,900 --> 00:07:12,259
picture up here is that these pins are a

00:07:11,240 --> 00:07:14,210
little bit annoying other than the

00:07:12,259 --> 00:07:16,370
alligator clip ones so a must-have

00:07:14,210 --> 00:07:17,689
accessory is the edge connector and it's

00:07:16,370 --> 00:07:19,340
basically a little slot that it goes in

00:07:17,689 --> 00:07:27,050
and exposes all these pins on a

00:07:19,340 --> 00:07:29,840
breadboard compatible board so some more

00:07:27,050 --> 00:07:32,960
info the microphone documentation the

00:07:29,840 --> 00:07:35,449
micro website itself the third link is

00:07:32,960 --> 00:07:37,550
interesting the microbe it is an ARM

00:07:35,449 --> 00:07:38,750
based development platform if you have

00:07:37,550 --> 00:07:41,029
really advanced students who actually

00:07:38,750 --> 00:07:42,199
want to break free of the provider to

00:07:41,029 --> 00:07:44,870
the sandbox and things like that and

00:07:42,199 --> 00:07:46,339
treat this as a professional thing that

00:07:44,870 --> 00:07:48,110
like a real software engineer or a real

00:07:46,339 --> 00:07:51,199
hardware engineer would work on you can

00:07:48,110 --> 00:07:54,500
download all the ARM based tools that

00:07:51,199 --> 00:07:56,000
use the embed platform and build C++

00:07:54,500 --> 00:07:57,650
code from scratch but this is this is a

00:07:56,000 --> 00:08:01,339
board that actually is quite limitless

00:07:57,650 --> 00:08:02,900
in terms of your your options and things

00:08:01,339 --> 00:08:04,060
to learn from it I think you're trying

00:08:02,900 --> 00:08:06,620
to kill one of the providers of

00:08:04,060 --> 00:08:10,159
accessories and so forth for the micro

00:08:06,620 --> 00:08:12,050
bit alright so now it's time for the

00:08:10,159 --> 00:08:14,689
obligatory demo so I have another micro

00:08:12,050 --> 00:08:16,279
bit plugged in here this is the maze

00:08:14,689 --> 00:08:17,389
demo and so what you can if you can see

00:08:16,279 --> 00:08:21,889
there's a flashing light in the center

00:08:17,389 --> 00:08:23,569
that's where I am and the the red lights

00:08:21,889 --> 00:08:27,020
are the walls and what I can do it's bit

00:08:23,569 --> 00:08:28,129
hard to see this but I can move my using

00:08:27,020 --> 00:08:30,020
the accelerometer to move around the

00:08:28,129 --> 00:08:31,729
maze surprisingly difficult I've

00:08:30,020 --> 00:08:35,089
actually yet to succeed it more than

00:08:31,729 --> 00:08:36,949
about once but the great thing about

00:08:35,089 --> 00:08:44,240
this and this is true of many micro

00:08:36,949 --> 00:08:46,880
Python boards is that I can I can

00:08:44,240 --> 00:08:48,140
connect to this as a terminal so the

00:08:46,880 --> 00:08:49,640
moment my code is running so I just see

00:08:48,140 --> 00:08:51,350
nothing on the terminal but just like a

00:08:49,640 --> 00:08:53,660
regular Python program I can hit control

00:08:51,350 --> 00:08:55,100
C and Here I am at the Python prompt and

00:08:53,660 --> 00:08:56,389
this is the exciting part

00:08:55,100 --> 00:08:57,649
microwave the microphone something you

00:08:56,389 --> 00:09:00,529
just can't even imagine doing on an

00:08:57,649 --> 00:09:02,810
Arduino is that I can run Python code on

00:09:00,529 --> 00:09:15,339
on this on this board so you can see my

00:09:02,810 --> 00:09:15,339
little maze demo has stopped but sorry

00:09:20,050 --> 00:09:26,240
there yeah and I can turn pins on I can

00:09:23,480 --> 00:09:27,620
turn okay I can turn pins on I can do

00:09:26,240 --> 00:09:30,259
all the things I can do or I can even

00:09:27,620 --> 00:09:31,639
pipe snippets of code into this so this

00:09:30,259 --> 00:09:32,990
is a really really important thing for

00:09:31,639 --> 00:09:34,940
getting in electronics working in the

00:09:32,990 --> 00:09:36,290
classroom because so much of your time

00:09:34,940 --> 00:09:37,670
is spent going through this iteration

00:09:36,290 --> 00:09:39,440
cycle of trying to figure out what works

00:09:37,670 --> 00:09:41,420
and what what do I need to set up in

00:09:39,440 --> 00:09:43,550
high or low or whatever now you can just

00:09:41,420 --> 00:09:45,259
interact with it it's the equivalent of

00:09:43,550 --> 00:09:48,470
the Python wrapper loop this is really

00:09:45,259 --> 00:09:50,870
really really powerful there's a sort of

00:09:48,470 --> 00:09:53,540
a standard demo I have to do for the

00:09:50,870 --> 00:09:55,639
microbe it one of the things about it is

00:09:53,540 --> 00:09:59,569
that you can plug a speaker into it of

00:09:55,639 --> 00:10:13,370
course because there are pins and for

00:09:59,569 --> 00:10:14,810
alligator clip them onto there so so

00:10:13,370 --> 00:10:15,949
microfiber provides a bunch of libraries

00:10:14,810 --> 00:10:18,019
and then depending on the board you get

00:10:15,949 --> 00:10:21,100
library specific to that board so we

00:10:18,019 --> 00:10:21,100
have a music library for the microwave

00:10:23,800 --> 00:10:30,470
play sound not very exciting but what I

00:10:27,500 --> 00:10:37,670
should do is get the sound from

00:10:30,470 --> 00:10:41,269
somewhere else so so this is like the

00:10:37,670 --> 00:10:46,490
demo you have to do that's not working

00:10:41,269 --> 00:10:50,029
I've done that one probably needs really

00:10:46,490 --> 00:10:53,439
of course thank you live demo why would

00:10:50,029 --> 00:10:53,439
anyone live demo anything

00:10:54,680 --> 00:11:01,800
press ENTER again yeah that it these

00:11:00,750 --> 00:11:17,220
probably I'd even do that from the back

00:11:01,800 --> 00:11:18,480
but yeah I have a microphone alright

00:11:17,220 --> 00:11:25,320
that's damn I wonderful it's the other

00:11:18,480 --> 00:11:26,760
SK okay so that's a micro bet this is a

00:11:25,320 --> 00:11:28,500
great option for teaching embedded

00:11:26,760 --> 00:11:30,600
programming in classrooms there's a lot

00:11:28,500 --> 00:11:31,980
you can do with this I made a really fun

00:11:30,600 --> 00:11:33,990
Tetris game where all the blocks are one

00:11:31,980 --> 00:11:36,180
layer one led it's really easy but it

00:11:33,990 --> 00:11:38,220
was a fun way to learn about arrays and

00:11:36,180 --> 00:11:39,540
moving things around the next thing and

00:11:38,220 --> 00:11:45,630
this has been talked about a lot already

00:11:39,540 --> 00:11:48,780
it already today is the esp8266 so this

00:11:45,630 --> 00:11:50,850
is an esp8266 it cost five dollars

00:11:48,780 --> 00:11:53,280
it runs micro Python and it has a Wi-Fi

00:11:50,850 --> 00:11:56,190
chip in it and it can be an access point

00:11:53,280 --> 00:11:58,230
or a station most of this board is the

00:11:56,190 --> 00:12:01,320
antenna at the bottom that's going to

00:11:58,230 --> 00:12:03,150
photo the antenna at the bottom and the

00:12:01,320 --> 00:12:04,440
giant pin header on the top the actual

00:12:03,150 --> 00:12:05,760
interesting part is these two chips in

00:12:04,440 --> 00:12:10,190
the middle ones a flash chip and once

00:12:05,760 --> 00:12:13,110
the actual Wi-Fi and and system-on-chip

00:12:10,190 --> 00:12:14,910
processor it runs microfiber 80

00:12:13,110 --> 00:12:17,690
megahertz it is actually a seriously

00:12:14,910 --> 00:12:20,340
powerful a little bit of competing and

00:12:17,690 --> 00:12:23,040
you can get various modules of variants

00:12:20,340 --> 00:12:24,360
of this they have a whole lot of GPIO so

00:12:23,040 --> 00:12:27,690
you can build internet of things

00:12:24,360 --> 00:12:29,760
wirelessly connected classroom-based

00:12:27,690 --> 00:12:31,860
activities or whatever for five dollars

00:12:29,760 --> 00:12:35,400
it's it's it's quite amazing what you

00:12:31,860 --> 00:12:36,840
can do it's not Ian's cheap you can

00:12:35,400 --> 00:12:38,850
figure it once you put micro Python on

00:12:36,840 --> 00:12:40,620
it and then what happens is it becomes a

00:12:38,850 --> 00:12:40,890
thing on the network and you can connect

00:12:40,620 --> 00:12:44,820
to it

00:12:40,890 --> 00:12:46,500
over Wi-Fi and your upload code run that

00:12:44,820 --> 00:12:49,590
same interactive Python prompt that we

00:12:46,500 --> 00:12:50,640
just that we just showed you and it has

00:12:49,590 --> 00:12:53,130
all the library support for everything

00:12:50,640 --> 00:12:54,630
you'd ever want to do near pixels all

00:12:53,130 --> 00:12:57,480
the things we talked about earlier JSON

00:12:54,630 --> 00:12:58,590
whatever and they mean access point and

00:12:57,480 --> 00:13:00,390
being access point means you don't have

00:12:58,590 --> 00:13:02,400
to worry about whether or not your

00:13:00,390 --> 00:13:03,840
school has Wi-Fi or the Wi-Fi works or

00:13:02,400 --> 00:13:06,980
it's available or things like that you

00:13:03,840 --> 00:13:06,980
connect to it instead

00:13:07,610 --> 00:13:10,800
just as a quick sort of warning if

00:13:09,540 --> 00:13:14,370
you're going to go and pursue that the

00:13:10,800 --> 00:13:16,170
SP h6 it's a really confusing thing to

00:13:14,370 --> 00:13:17,580
build for there's like once you get the

00:13:16,170 --> 00:13:19,110
one you want and the one that works then

00:13:17,580 --> 00:13:20,820
you just go with that but but figuring

00:13:19,110 --> 00:13:23,640
that out can be a little bit tricky

00:13:20,820 --> 00:13:25,410
there was another talk earlier today in

00:13:23,640 --> 00:13:27,090
the internet things conference about

00:13:25,410 --> 00:13:28,620
this and then there was the keynote this

00:13:27,090 --> 00:13:30,360
morning and there's nothing about the

00:13:28,620 --> 00:13:32,160
history here it's a kind of a weird

00:13:30,360 --> 00:13:33,960
thing it was built for a purpose and

00:13:32,160 --> 00:13:35,640
then people discovered it and and

00:13:33,960 --> 00:13:37,050
suddenly were like wow this is a cheap

00:13:35,640 --> 00:13:38,370
Wi-Fi chip let's do things with it but

00:13:37,050 --> 00:13:40,320
it involved a lot of reverse engineering

00:13:38,370 --> 00:13:42,180
some very very clever people who built

00:13:40,320 --> 00:13:45,630
the arkansas surgeon of the sdks that

00:13:42,180 --> 00:13:47,310
micro Python is built one this is called

00:13:45,630 --> 00:13:48,420
the ESP o1 board this is this form

00:13:47,310 --> 00:13:50,370
factor you saw earlier but there are

00:13:48,420 --> 00:13:52,200
like 14 different variants of this board

00:13:50,370 --> 00:13:53,940
and I'll give you some recommendations a

00:13:52,200 --> 00:13:55,770
bit later on if you are gonna do

00:13:53,940 --> 00:13:57,600
microphone on this make sure you get at

00:13:55,770 --> 00:14:00,000
least an eight megabit one watch out for

00:13:57,600 --> 00:14:01,740
megabit vs megabyte so a megabit is one

00:14:00,000 --> 00:14:04,980
megabyte you need enough flash to run

00:14:01,740 --> 00:14:06,690
micro Python this board on its own is

00:14:04,980 --> 00:14:10,920
painful I had to make a programmer from

00:14:06,690 --> 00:14:12,150
scratch the sort of thing get one that

00:14:10,920 --> 00:14:15,180
has a programmer built in or by a

00:14:12,150 --> 00:14:16,800
specific programmer for the purpose but

00:14:15,180 --> 00:14:18,030
once they're programmed they just run

00:14:16,800 --> 00:14:20,220
Python in it and then they're on the

00:14:18,030 --> 00:14:21,660
Wi-Fi so then once you've got it all set

00:14:20,220 --> 00:14:24,300
up you just need to do that once and

00:14:21,660 --> 00:14:26,160
then it's quite easy to work with this

00:14:24,300 --> 00:14:28,230
one only has two GPIO pins so it's not

00:14:26,160 --> 00:14:30,030
very easy to plug into other devices but

00:14:28,230 --> 00:14:33,570
the more the other additions have like

00:14:30,030 --> 00:14:34,980
22 GPIO pins one thing to watch out for

00:14:33,570 --> 00:14:36,540
you have to build your own micro Python

00:14:34,980 --> 00:14:38,520
code the first time I'm sure that will

00:14:36,540 --> 00:14:40,860
change soon micro Python on the ESP

00:14:38,520 --> 00:14:42,840
h.264 the Kickstarter and originally the

00:14:40,860 --> 00:14:46,230
binary images were only available to

00:14:42,840 --> 00:14:48,780
backers I imagine that will change at

00:14:46,230 --> 00:14:49,650
some point but I just have to warn you

00:14:48,780 --> 00:14:52,080
if you're gonna use this in the

00:14:49,650 --> 00:14:54,030
classroom the SPO DCC is running at 3.3

00:14:52,080 --> 00:14:55,950
volts not the sort of 5 volt issue for

00:14:54,030 --> 00:14:57,210
Arduino so if you're gonna mix and match

00:14:55,950 --> 00:15:00,720
it with other things and other devices

00:14:57,210 --> 00:15:03,330
be aware of this this is summarized

00:15:00,720 --> 00:15:05,460
basically as by a board that does this

00:15:03,330 --> 00:15:08,280
all completely for you a great example

00:15:05,460 --> 00:15:11,270
is the Adafruit feather Hazara board and

00:15:08,280 --> 00:15:14,280
it has as you can see the ESP module is

00:15:11,270 --> 00:15:15,810
this thing there and then a bunch of

00:15:14,280 --> 00:15:17,520
other USB interfaces and voltage

00:15:15,810 --> 00:15:19,680
conversions and things like that this is

00:15:17,520 --> 00:15:23,370
a great board to use to build white

00:15:19,680 --> 00:15:27,720
by projects in classroom Sparkfun I have

00:15:23,370 --> 00:15:28,800
another one called the IOT thing if you

00:15:27,720 --> 00:15:30,120
want to learn more about this there's a

00:15:28,800 --> 00:15:33,000
great talk about the history of the

00:15:30,120 --> 00:15:35,940
esp8266 from LCA earlier this year by

00:15:33,000 --> 00:15:38,670
Angus Grandin and then two talks from

00:15:35,940 --> 00:15:43,709
micro from the PyCon conference we're

00:15:38,670 --> 00:15:46,680
currently at earlier today okay

00:15:43,709 --> 00:15:50,250
this demo very very quickly so this is a

00:15:46,680 --> 00:15:55,350
SPI HTC six connected to a little LED

00:15:50,250 --> 00:15:56,730
matrix and the point here is that once

00:15:55,350 --> 00:15:58,110
I've powered it up and I could be

00:15:56,730 --> 00:15:59,700
powering this by a battery but I'm just

00:15:58,110 --> 00:16:05,250
using this a needle three point three

00:15:59,700 --> 00:16:14,190
supply here doing so this thing boots up

00:16:05,250 --> 00:16:21,080
and provides a access point and if I

00:16:14,190 --> 00:16:21,080
switch my laptops Wi-Fi over to Mary

00:16:21,529 --> 00:16:27,860
yeah it's got a password on today so I

00:16:28,010 --> 00:16:31,770
don't spend too much time in this I

00:16:30,180 --> 00:16:33,540
might sure I might do me this afterwards

00:16:31,770 --> 00:16:34,620
cause it might take a bit of time but

00:16:33,540 --> 00:16:36,690
basically it provides a wireless access

00:16:34,620 --> 00:16:38,550
point you connect to it it serves up a

00:16:36,690 --> 00:16:39,990
web page and that web page is a picture

00:16:38,550 --> 00:16:42,029
of this grid and you can turn the pixels

00:16:39,990 --> 00:16:43,350
on and off and and multiple people can

00:16:42,029 --> 00:16:44,279
interact with it things like that the

00:16:43,350 --> 00:16:46,410
point that I actually wanted to make

00:16:44,279 --> 00:16:47,820
here is that it's about this much HTML

00:16:46,410 --> 00:16:49,110
to make the little grid on the web page

00:16:47,820 --> 00:16:51,240
and the JavaScript and whatever and

00:16:49,110 --> 00:16:53,160
about this much microbiome to actually

00:16:51,240 --> 00:16:54,690
control the LEDs into the web server and

00:16:53,160 --> 00:16:56,550
things like that and if you've ever done

00:16:54,690 --> 00:16:58,050
sort of any network based stuff on an

00:16:56,550 --> 00:17:00,000
embedded device and dealing with string

00:16:58,050 --> 00:17:01,470
processing whatever it's painful whereas

00:17:00,000 --> 00:17:03,360
Python they're just string dot starts

00:17:01,470 --> 00:17:04,980
with and split and things like that it's

00:17:03,360 --> 00:17:06,569
really really easy and the cool thing is

00:17:04,980 --> 00:17:10,980
you get to focus on the actual concepts

00:17:06,569 --> 00:17:12,600
that are important to you not the not

00:17:10,980 --> 00:17:18,449
the dealing with difficult embedded

00:17:12,600 --> 00:17:20,189
systems things okay next up sorry I'm

00:17:18,449 --> 00:17:22,350
from grukk learning Australian company

00:17:20,189 --> 00:17:23,550
providing online courses Zulu Python the

00:17:22,350 --> 00:17:25,410
ancestors challenge and things like that

00:17:23,550 --> 00:17:26,550
we're really excited about embedded

00:17:25,410 --> 00:17:28,140
programming isn't it as a future

00:17:26,550 --> 00:17:30,120
direction and the micro bit in

00:17:28,140 --> 00:17:32,400
particular that we demoed earlier so

00:17:30,120 --> 00:17:33,360
when you're running embed yourself in a

00:17:32,400 --> 00:17:36,240
classroom the big

00:17:33,360 --> 00:17:38,309
problem we have is that devices are

00:17:36,240 --> 00:17:39,299
flaky why's fallout there's a lot of

00:17:38,309 --> 00:17:40,890
other things you have to do other than

00:17:39,299 --> 00:17:42,330
just writing code so it actually is very

00:17:40,890 --> 00:17:44,370
hard to teach the core concepts around

00:17:42,330 --> 00:17:46,200
coding when you have to deal with

00:17:44,370 --> 00:17:47,490
everything else programming and flashing

00:17:46,200 --> 00:17:50,330
and devices that fail and things like

00:17:47,490 --> 00:17:54,179
that so

00:17:50,330 --> 00:17:56,600
grok provides interactive notes and

00:17:54,179 --> 00:18:00,270
assess and automatically assessing

00:17:56,600 --> 00:18:05,220
submissions for python so I'll give a

00:18:00,270 --> 00:18:08,419
quick background on grogg glencove new

00:18:05,220 --> 00:18:12,750
browser this is Venus course

00:18:08,419 --> 00:18:14,940
registration so notes on the left hand

00:18:12,750 --> 00:18:18,150
side and then an interactive Python

00:18:14,940 --> 00:18:21,780
thing with a marker and an interactive

00:18:18,150 --> 00:18:27,809
Python shell yeah so our goal was to

00:18:21,780 --> 00:18:32,450
provide exactly that experience for for

00:18:27,809 --> 00:18:44,070
the microwave so we're building a course

00:18:32,450 --> 00:18:47,610
that when you that means you don't have

00:18:44,070 --> 00:18:49,049
to ever speak it's still buzzing so we

00:18:47,610 --> 00:18:51,059
provide notes about how the microwave

00:18:49,049 --> 00:18:52,679
works and there's it'll code snippet and

00:18:51,059 --> 00:18:54,049
then you can click run and we'll

00:18:52,679 --> 00:18:56,460
actually run a micro be in your browser

00:18:54,049 --> 00:18:58,350
and it's a real macro bit it's not

00:18:56,460 --> 00:19:00,059
Python pretending to be a micro bit it's

00:18:58,350 --> 00:19:03,410
actually the same software that the

00:19:00,059 --> 00:19:05,280
microphone runtime is and so forth and

00:19:03,410 --> 00:19:06,690
for example one of the concepts you

00:19:05,280 --> 00:19:09,299
learn a very on an embedded programming

00:19:06,690 --> 00:19:10,440
is dealing with loops and buttons and

00:19:09,299 --> 00:19:11,460
buttons are hard because you've got to

00:19:10,440 --> 00:19:13,350
deal with the fact that they might sort

00:19:11,460 --> 00:19:14,910
of jitter a little bit and they might

00:19:13,350 --> 00:19:16,320
hold them down and stuff like that so

00:19:14,910 --> 00:19:17,730
here's an example of sort of four slides

00:19:16,320 --> 00:19:19,500
where we worked through the concept of

00:19:17,730 --> 00:19:21,720
how to deal with pressing a button that

00:19:19,500 --> 00:19:24,090
ultimately finishes in an exercise which

00:19:21,720 --> 00:19:28,290
is write a program to do a specific

00:19:24,090 --> 00:19:29,429
thing and so I run this program not a

00:19:28,290 --> 00:19:34,470
great resolution and I can press the

00:19:29,429 --> 00:19:37,380
button and the sorry button a and the I

00:19:34,470 --> 00:19:39,809
interact with my with my device and then

00:19:37,380 --> 00:19:41,550
for an assessment I can actually mark

00:19:39,809 --> 00:19:43,800
this did the program actually do what it

00:19:41,550 --> 00:19:45,990
was supposed to do and when I run it it

00:19:43,800 --> 00:19:46,570
will run that code on a real device and

00:19:45,990 --> 00:19:47,860
man

00:19:46,570 --> 00:19:49,529
things about the timing and about

00:19:47,860 --> 00:19:53,710
whether the inputs did the right thing

00:19:49,529 --> 00:19:55,450
so you can build content and courses

00:19:53,710 --> 00:19:57,880
around this they emphasize the actual

00:19:55,450 --> 00:19:59,529
fundamentals of writing code not about

00:19:57,880 --> 00:20:01,330
did you build this project that kind of

00:19:59,529 --> 00:20:02,769
worked in the end but actually did you

00:20:01,330 --> 00:20:06,429
write this code correctly and did it

00:20:02,769 --> 00:20:09,850
behave exactly as we wanted you to but

00:20:06,429 --> 00:20:15,700
extending this with so that that demo

00:20:09,850 --> 00:20:17,470
gave you earlier of of the speaker and

00:20:15,700 --> 00:20:20,620
the accelerometer so this is an example

00:20:17,470 --> 00:20:22,360
where we use the compass and we can

00:20:20,620 --> 00:20:27,129
point to where North is while the code

00:20:22,360 --> 00:20:28,450
is running the maze demo that I was

00:20:27,129 --> 00:20:30,639
trying to show you on the real device

00:20:28,450 --> 00:20:34,000
can run on the device in the browser as

00:20:30,639 --> 00:20:35,649
well and as I navigate around you can

00:20:34,000 --> 00:20:38,740
see I that was the what I was trying to

00:20:35,649 --> 00:20:40,330
show you on the real micro bit but more

00:20:38,740 --> 00:20:41,409
importantly students want to build

00:20:40,330 --> 00:20:45,639
things that are actually connected to

00:20:41,409 --> 00:20:48,129
other devices so we have lights and

00:20:45,639 --> 00:20:51,639
servo motors the speaker demo from

00:20:48,129 --> 00:20:53,649
earlier you can press the button and yet

00:20:51,639 --> 00:20:57,129
you probably can't hear my speakers but

00:20:53,649 --> 00:21:01,110
there's playing a tone and most

00:20:57,129 --> 00:21:12,990
importantly sorry let me stop that first

00:21:01,110 --> 00:21:12,990
most importantly when I press the button

00:21:15,090 --> 00:21:18,159
so what we've done is we've configured

00:21:16,809 --> 00:21:20,879
this workspace to say pretend they plug

00:21:18,159 --> 00:21:24,600
the speaker into pin zero and

00:21:20,879 --> 00:21:24,600
unfortunately as a power button as well

00:21:26,190 --> 00:21:31,269
plug in an external devices like RGB

00:21:28,720 --> 00:21:32,980
LEDs configure the brightness of those

00:21:31,269 --> 00:21:37,480
LEDs based on the orientation of the

00:21:32,980 --> 00:21:38,769
device and things like that so and not

00:21:37,480 --> 00:21:40,389
worry about whether or not the LEDs are

00:21:38,769 --> 00:21:42,879
plugged in correctly that's some a big

00:21:40,389 --> 00:21:44,440
thing servomotors what we'd eventually

00:21:42,879 --> 00:21:46,690
like to do to actually completely

00:21:44,440 --> 00:21:49,149
emulate the robotic buggy that kitronik

00:21:46,690 --> 00:21:52,269
it that we saw earlier so in this case

00:21:49,149 --> 00:21:54,639
what we have is when I press the buttons

00:21:52,269 --> 00:21:57,039
it turns the servo to the to the

00:21:54,639 --> 00:21:58,029
appropriate place but it's the same it's

00:21:57,039 --> 00:21:59,889
the Python code that you would have

00:21:58,029 --> 00:22:00,250
written and this is this is kind of a

00:21:59,889 --> 00:22:01,600
great

00:22:00,250 --> 00:22:04,960
to show you what like a Python is like

00:22:01,600 --> 00:22:06,910
that I could just read from the pins and

00:22:04,960 --> 00:22:08,410
write to the pins and so there's

00:22:06,910 --> 00:22:10,000
actually servo library than not using

00:22:08,410 --> 00:22:11,530
this example but I'm setting the servo

00:22:10,000 --> 00:22:13,720
orientation just by writing to it to a

00:22:11,530 --> 00:22:15,130
pin from Python so if this was ID we

00:22:13,720 --> 00:22:16,680
know you'd have to set the pin modes and

00:22:15,130 --> 00:22:18,550
all those sort of things and whatever

00:22:16,680 --> 00:22:20,770
just run the whole thing a loop with a

00:22:18,550 --> 00:22:24,940
sleep at the bottom and that's the whole

00:22:20,770 --> 00:22:26,890
program yeah and all of those components

00:22:24,940 --> 00:22:28,270
can be integrated with the marker and so

00:22:26,890 --> 00:22:32,590
forth so yeah we're looking forward to

00:22:28,270 --> 00:22:38,050
rolling this out as a croc learning

00:22:32,590 --> 00:22:40,720
course and if you're interested the croc

00:22:38,050 --> 00:22:41,860
code quest starts in October the event

00:22:40,720 --> 00:22:44,110
end of October this year and we'll be

00:22:41,860 --> 00:22:47,260
including a micro bit stream based on

00:22:44,110 --> 00:22:50,020
those other things additionally students

00:22:47,260 --> 00:22:52,300
really like to especially younger

00:22:50,020 --> 00:22:53,290
students find programming difficult when

00:22:52,300 --> 00:22:54,850
you have to do a lot of typing and

00:22:53,290 --> 00:22:56,620
things like that so we've also built a

00:22:54,850 --> 00:22:58,810
block we based interface for the micro

00:22:56,620 --> 00:23:00,190
micro Python so as you drag your blocks

00:22:58,810 --> 00:23:02,740
around it generates the micro Python

00:23:00,190 --> 00:23:06,760
code for you and then you can run it in

00:23:02,740 --> 00:23:08,080
the same interactive thing just some

00:23:06,760 --> 00:23:09,460
background on the on the development of

00:23:08,080 --> 00:23:10,780
this it was really important to us that

00:23:09,460 --> 00:23:12,070
this felt like a real micro bit it

00:23:10,780 --> 00:23:13,150
should run out of memory in the same way

00:23:12,070 --> 00:23:16,420
that a micro bit runs out of memory

00:23:13,150 --> 00:23:17,500
because it's a tiny little device you

00:23:16,420 --> 00:23:19,030
shouldn't be able to just run regular

00:23:17,500 --> 00:23:20,950
Python code because you can't run

00:23:19,030 --> 00:23:23,590
regular I think around random stuff from

00:23:20,950 --> 00:23:25,660
the internet which is why we actually

00:23:23,590 --> 00:23:27,220
run the microfiber micro bit firmware

00:23:25,660 --> 00:23:29,470
rather than just emulating this in

00:23:27,220 --> 00:23:30,700
Python if anyone's interested in the

00:23:29,470 --> 00:23:31,900
technology behind how we do that I'd

00:23:30,700 --> 00:23:33,880
love to talk about that in more detail

00:23:31,900 --> 00:23:39,550
later on come and find me over here oh

00:23:33,880 --> 00:23:40,960
we can't that's about it questions I'm

00:23:39,550 --> 00:23:41,740
really interested in teaching embedded

00:23:40,960 --> 00:23:43,780
programming in schools

00:23:41,740 --> 00:23:45,070
I think micro thing is is one of the

00:23:43,780 --> 00:23:48,610
best things you have available to do

00:23:45,070 --> 00:23:49,690
this I would love if you have ideas what

00:23:48,610 --> 00:23:51,520
you do in school tell us what your

00:23:49,690 --> 00:23:52,930
school does I just love to know about it

00:23:51,520 --> 00:23:56,230
my email address is at the bottom of

00:23:52,930 --> 00:23:57,190
this slide and if you'd like to know

00:23:56,230 --> 00:23:58,990
more about any of the things in this

00:23:57,190 --> 00:24:02,610
slide email me I'd love to talk about it

00:23:58,990 --> 00:24:02,610
so yeah thank you

00:24:08,140 --> 00:24:12,540
so anyone have questions for Jim

00:24:17,080 --> 00:24:22,720
I am simile really interested in

00:24:20,110 --> 00:24:23,650
embedded programming as a method for

00:24:22,720 --> 00:24:26,070
teaching

00:24:23,650 --> 00:24:28,780
I guess computer science and programming

00:24:26,070 --> 00:24:31,180
one of the things that micro Python I

00:24:28,780 --> 00:24:33,430
found really liking is that there's no

00:24:31,180 --> 00:24:34,600
sort of debugger kind of either can be

00:24:33,430 --> 00:24:36,370
running the code or it can be in a

00:24:34,600 --> 00:24:37,990
wrapper but as soon as you're trying to

00:24:36,370 --> 00:24:39,790
break into the code that you've

00:24:37,990 --> 00:24:42,930
pre-written it's really hard and I'm

00:24:39,790 --> 00:24:46,830
sort of really big on teaching debugging

00:24:42,930 --> 00:24:50,080
to students is there any I guess

00:24:46,830 --> 00:24:53,410
movement going towards a really simple

00:24:50,080 --> 00:24:55,420
debugger in micro Pythian I would

00:24:53,410 --> 00:24:57,910
probably damien have a lot more to say

00:24:55,420 --> 00:24:59,350
about this from a technical perspective

00:24:57,910 --> 00:25:01,440
a debugger is actually quite a difficult

00:24:59,350 --> 00:25:03,520
thing to provide on a device that small

00:25:01,440 --> 00:25:04,870
Arduino has a similar limitation that

00:25:03,520 --> 00:25:07,660
something like a Leonardo you can you

00:25:04,870 --> 00:25:09,250
can actually put a JTAG debugger on one

00:25:07,660 --> 00:25:10,360
one thing I have noticed the transition

00:25:09,250 --> 00:25:12,610
from doing so divided I know stuff to

00:25:10,360 --> 00:25:13,840
microbio and stuff adding print

00:25:12,610 --> 00:25:15,520
statement suddenly is a lot more useful

00:25:13,840 --> 00:25:17,170
because while while you've still on that

00:25:15,520 --> 00:25:18,580
shell the print statements come through

00:25:17,170 --> 00:25:20,560
and things like that so standard sort of

00:25:18,580 --> 00:25:22,330
techniques for tracing and annotating

00:25:20,560 --> 00:25:23,380
your code are a lot easier on micro

00:25:22,330 --> 00:25:26,170
Python than they have been on other

00:25:23,380 --> 00:25:28,420
devices just really simple things having

00:25:26,170 --> 00:25:29,830
25 LEDs on the device makes it really

00:25:28,420 --> 00:25:31,510
easy to indicate you know I mean this

00:25:29,830 --> 00:25:33,700
part of the code or things like that but

00:25:31,510 --> 00:25:35,080
yeah an interactive step by step source

00:25:33,700 --> 00:25:41,800
code level debugger would be would be

00:25:35,080 --> 00:25:43,390
wonderful I have a question if people

00:25:41,800 --> 00:25:46,240
actually wanted to get their hands on a

00:25:43,390 --> 00:25:49,530
micro bit yeah would they do that the

00:25:46,240 --> 00:25:51,940
link I provided earlier kitronik are

00:25:49,530 --> 00:25:54,700
providing international distribution for

00:25:51,940 --> 00:25:58,540
the micro bit they're roughly 25

00:25:54,700 --> 00:26:00,640
Australian dollars yeah you've got

00:25:58,540 --> 00:26:03,480
you've got yours yeah so it does work

00:26:00,640 --> 00:26:03,480
you can buy them

00:26:05,320 --> 00:26:11,720
thanks for talk was really cool

00:26:07,870 --> 00:26:13,940
can the web thing talk to its hardware

00:26:11,720 --> 00:26:15,259
and have you thought about trying to do

00:26:13,940 --> 00:26:16,850
that like so instead of running a

00:26:15,259 --> 00:26:21,200
virtualized macro bit talking to our

00:26:16,850 --> 00:26:23,059
mark a bit with the real Mac approach

00:26:21,200 --> 00:26:25,220
they plug it in by USB or something and

00:26:23,059 --> 00:26:27,080
so what we provide is a download button

00:26:25,220 --> 00:26:28,610
the same that same at the way the BBC

00:26:27,080 --> 00:26:30,110
website works so if you have a real

00:26:28,610 --> 00:26:31,370
micro bit pressing that button will then

00:26:30,110 --> 00:26:34,059
give you the the thing that you can

00:26:31,370 --> 00:26:36,799
drive on to your real micro bit

00:26:34,059 --> 00:26:38,000
yeah it would be a step where we didn't

00:26:36,799 --> 00:26:40,490
have to have that download and drag and

00:26:38,000 --> 00:26:42,129
drop thing would be really great but now

00:26:40,490 --> 00:26:44,929
this shows that's the limitation yeah

00:26:42,129 --> 00:26:53,629
then you get into browser access to USB

00:26:44,929 --> 00:26:58,340
ports yes yeah just generally USB any

00:26:53,629 --> 00:27:01,899
other questions okay in that case please

00:26:58,340 --> 00:27:01,899

YouTube URL: https://www.youtube.com/watch?v=oCEZyJqkMrE


