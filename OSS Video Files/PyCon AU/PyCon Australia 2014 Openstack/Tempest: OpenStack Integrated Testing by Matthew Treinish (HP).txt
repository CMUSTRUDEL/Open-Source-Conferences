Title: Tempest: OpenStack Integrated Testing by Matthew Treinish (HP)
Publication date: 2014-08-11
Playlist: PyCon Australia 2014 Openstack
Description: 
	PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:05,220 --> 00:00:10,530
our next talk is a dramatic finish who

00:00:08,160 --> 00:00:12,570
is going to be talking about tempest and

00:00:10,530 --> 00:00:16,640
the earth aesthetic integration in

00:00:12,570 --> 00:00:19,470
contesting and the worst HP is the

00:00:16,640 --> 00:00:27,869
project lead for the quality assurance

00:00:19,470 --> 00:00:29,489
program focus please okay well this josh

00:00:27,869 --> 00:00:33,000
said i'm here to talk to you about

00:00:29,489 --> 00:00:35,810
campus which is the biggest project and

00:00:33,000 --> 00:00:41,610
quality assurance program and this or

00:00:35,810 --> 00:00:45,030
open set so get started so i'm sure

00:00:41,610 --> 00:00:47,550
everyone's seen this this diagram before

00:00:45,030 --> 00:00:49,410
everyone's favorite it's the complicated

00:00:47,550 --> 00:00:53,400
you about women staff works internally

00:00:49,410 --> 00:00:56,280
and this is also severely out of date

00:00:53,400 --> 00:00:57,900
because it's been drizzling current

00:00:56,280 --> 00:00:59,400
we're currently working on univ so it's

00:00:57,900 --> 00:01:02,210
missing a bunch of services and a bunch

00:00:59,400 --> 00:01:05,850
of projects but the end message is that

00:01:02,210 --> 00:01:07,200
OpenStack is complicated and because

00:01:05,850 --> 00:01:08,970
it's complicated it's also very

00:01:07,200 --> 00:01:15,210
complicated test it to make sure it's

00:01:08,970 --> 00:01:18,840
working before we had done this every

00:01:15,210 --> 00:01:21,229
project which was the bigger box on that

00:01:18,840 --> 00:01:23,580
previous slide had its own unit test

00:01:21,229 --> 00:01:26,330
some of the projects also had functional

00:01:23,580 --> 00:01:29,430
tests where they would spin up their

00:01:26,330 --> 00:01:31,560
respective sac and polka dance on Maya

00:01:29,430 --> 00:01:33,330
nature and working properly but there

00:01:31,560 --> 00:01:36,690
was nothing testing that whole picture

00:01:33,330 --> 00:01:39,060
together there was no guarantee that no

00:01:36,690 --> 00:01:40,650
who talked to glance properly if you

00:01:39,060 --> 00:01:42,720
wanted to look the two pieces to work

00:01:40,650 --> 00:01:43,820
together which is really what opens have

00:01:42,720 --> 00:01:46,229
ability it's about building

00:01:43,820 --> 00:01:48,030
infrastructure as a service ecosystem

00:01:46,229 --> 00:01:51,570
with mantra projects that work together

00:01:48,030 --> 00:01:53,430
we didn't have a way to test that so

00:01:51,570 --> 00:01:55,710
that's where tempest cannon and this was

00:01:53,430 --> 00:01:58,170
designed to be the official open staffed

00:01:55,710 --> 00:02:00,479
integration test way it only deals with

00:01:58,170 --> 00:02:03,270
black box testing through the OpenStack

00:02:00,479 --> 00:02:06,040
resting ah so that's by design it needs

00:02:03,270 --> 00:02:10,400
a few remember the diagram

00:02:06,040 --> 00:02:12,830
so that the dash lines are rested guides

00:02:10,400 --> 00:02:14,450
and everything else is internal

00:02:12,830 --> 00:02:17,030
communication so we only deal with the

00:02:14,450 --> 00:02:18,560
dash lines they're from the external

00:02:17,030 --> 00:02:20,480
perspective we started worrying about

00:02:18,560 --> 00:02:22,660
the internal details things objections

00:02:20,480 --> 00:02:27,230
are too complicated and it would be

00:02:22,660 --> 00:02:30,560
almost impossible to verify currently

00:02:27,230 --> 00:02:33,470
contest has over 2300 tests which cover

00:02:30,560 --> 00:02:35,810
every currently created an integrated

00:02:33,470 --> 00:02:38,630
open stat project I think that number is

00:02:35,810 --> 00:02:43,610
now actually closer to 2880 slides about

00:02:38,630 --> 00:02:45,620
10 months ago and it's also used as the

00:02:43,610 --> 00:02:47,930
gating pencils for every integrated of

00:02:45,620 --> 00:02:50,870
the staff project which means that if

00:02:47,930 --> 00:02:53,000
you're submitting a patch to any

00:02:50,870 --> 00:02:56,150
OpenStack project tempest be going to

00:02:53,000 --> 00:03:02,570
run against it at least two times I

00:02:56,150 --> 00:03:05,600
think we ain't forgot for this place so

00:03:02,570 --> 00:03:08,240
and this was started late in the almost

00:03:05,600 --> 00:03:11,150
like to solve the problem of having an

00:03:08,240 --> 00:03:14,239
integrated test suite and no way to test

00:03:11,150 --> 00:03:16,310
the complete OpenStack picture two

00:03:14,239 --> 00:03:18,380
cycles later and folsom we started

00:03:16,310 --> 00:03:21,200
dating I never commit templates which is

00:03:18,380 --> 00:03:24,910
sparta OpenStack human deaths at and use

00:03:21,200 --> 00:03:29,030
tempest against that deploy OpenStack

00:03:24,910 --> 00:03:30,980
and as of the ice half cycle it was one

00:03:29,030 --> 00:03:33,440
of the 50 most active projects and

00:03:30,980 --> 00:03:36,920
OpenStack by both through commit count

00:03:33,440 --> 00:03:41,120
and you count things number for growth

00:03:36,920 --> 00:03:43,310
actually and it's become so important

00:03:41,120 --> 00:03:45,860
that TC is dictated that every project

00:03:43,310 --> 00:03:48,320
that wants to be integrated has to have

00:03:45,860 --> 00:03:52,640
time this test said before that can

00:03:48,320 --> 00:03:55,700
happen and the Foundation Board has also

00:03:52,640 --> 00:03:57,860
stated that em vez will be used for

00:03:55,700 --> 00:03:59,569
whatever they decide def for validation

00:03:57,860 --> 00:04:03,409
that's always up for

00:03:59,569 --> 00:04:05,120
but so it happens to become increasingly

00:04:03,409 --> 00:04:07,609
more important and the graph on the

00:04:05,120 --> 00:04:09,859
bottom just shows the growth rate and

00:04:07,609 --> 00:04:12,620
activity independence project you can

00:04:09,859 --> 00:04:16,720
see that it's almost exponential for

00:04:12,620 --> 00:04:21,759
some number of tests I think is the

00:04:16,720 --> 00:04:24,500
square knot on books almost exponential

00:04:21,759 --> 00:04:26,960
so tempest has been growing very rapidly

00:04:24,500 --> 00:04:30,410
and it hasn't been around that long it's

00:04:26,960 --> 00:04:33,229
become increasingly important so and

00:04:30,410 --> 00:04:39,310
with that growth has there have been

00:04:33,229 --> 00:04:41,960
some permanence the biggest one is that

00:04:39,310 --> 00:04:43,610
we have a huge number of new tasks and

00:04:41,960 --> 00:04:44,960
we also have a huge number of new

00:04:43,610 --> 00:04:47,419
projects open staff is growing very

00:04:44,960 --> 00:04:49,070
quickly and integrated test we has to

00:04:47,419 --> 00:04:51,199
grow equally as quickly to keep up with

00:04:49,070 --> 00:04:54,620
all of the changes otherwise things

00:04:51,199 --> 00:04:57,590
aren't being tested another thing is

00:04:54,620 --> 00:05:00,650
that all the common code we have tempest

00:04:57,590 --> 00:05:05,690
to handle things like resting

00:05:00,650 --> 00:05:07,759
communication and other like oceans

00:05:05,690 --> 00:05:10,159
cover itself has gotten increasingly

00:05:07,759 --> 00:05:12,229
more complicated as we start adding more

00:05:10,159 --> 00:05:16,550
api's we have to be able to handle all

00:05:12,229 --> 00:05:19,130
that with the number of tests we have a

00:05:16,550 --> 00:05:20,479
tempest another thing is that individual

00:05:19,130 --> 00:05:23,150
test management becomes increasingly

00:05:20,479 --> 00:05:25,070
difficult if we're running 2300 tests

00:05:23,150 --> 00:05:28,159
every time we run tempest how do we

00:05:25,070 --> 00:05:29,930
figure out that one destined run because

00:05:28,159 --> 00:05:32,389
of configuration mistake a God's gift

00:05:29,930 --> 00:05:35,330
instead when you're looking at the out

00:05:32,389 --> 00:05:37,370
of 2400 it's hard to see one skip that

00:05:35,330 --> 00:05:41,090
changed from this rod vs the run two

00:05:37,370 --> 00:05:43,009
days ago things like that another thing

00:05:41,090 --> 00:05:44,940
is as the number of tests pros we have

00:05:43,009 --> 00:05:48,840
to get more more clever value

00:05:44,940 --> 00:05:50,910
how long it takes campus to run the

00:05:48,840 --> 00:05:54,300
current goal we have is to keep it

00:05:50,910 --> 00:05:59,310
running up under it with a desktop

00:05:54,300 --> 00:06:02,250
limiting gate and as we start handling

00:05:59,310 --> 00:06:03,600
more services or api's more options the

00:06:02,250 --> 00:06:06,720
configuration for campus gets

00:06:03,600 --> 00:06:08,640
increasingly more complex for example

00:06:06,720 --> 00:06:11,610
right now a tempest I think we have over

00:06:08,640 --> 00:06:14,280
250 configuration options to try to

00:06:11,610 --> 00:06:18,870
handle all potential options that go to

00:06:14,280 --> 00:06:22,170
second flavor oh so from those growing

00:06:18,870 --> 00:06:24,660
pains we decided to have some design

00:06:22,170 --> 00:06:27,960
principles to define what tempest is

00:06:24,660 --> 00:06:30,300
because before we have this we were kind

00:06:27,960 --> 00:06:33,090
of just doing everything what we wanted

00:06:30,300 --> 00:06:36,000
to there's no reporter it's kind of a

00:06:33,090 --> 00:06:37,710
mess so we decided to define what

00:06:36,000 --> 00:06:39,720
tempest was and how we were going to do

00:06:37,710 --> 00:06:43,050
integrated testing and OpenStack go from

00:06:39,720 --> 00:06:44,460
there so the first one is the tempest

00:06:43,050 --> 00:06:46,770
should run against any openstack cloud

00:06:44,460 --> 00:06:51,990
whether that be devstack or someone's

00:06:46,770 --> 00:06:54,960
public cloud bluffing that's it's an

00:06:51,990 --> 00:06:56,700
ideal goal unfortunately because we run

00:06:54,960 --> 00:06:58,800
it only indicate for verification

00:06:56,700 --> 00:07:01,110
there's bias for running toward F stack

00:06:58,800 --> 00:07:03,510
I don't get feedback from people who run

00:07:01,110 --> 00:07:05,880
it against large deployments regular

00:07:03,510 --> 00:07:08,430
basis so we don't know where we screw up

00:07:05,880 --> 00:07:11,700
and have a particle just acting halt for

00:07:08,430 --> 00:07:16,490
example another principle with tempest

00:07:11,700 --> 00:07:20,160
is everything explicit this came out of

00:07:16,490 --> 00:07:21,810
auto-discovery so tempest aight guys try

00:07:20,160 --> 00:07:26,250
the sort of bubble of discovery of

00:07:21,810 --> 00:07:29,190
features and when we started doing that

00:07:26,250 --> 00:07:30,630
in the game things would get skipped and

00:07:29,190 --> 00:07:34,140
would it realize it because the

00:07:30,630 --> 00:07:36,270
discovery of got to work and that's not

00:07:34,140 --> 00:07:38,490
really good testing if you're trying to

00:07:36,270 --> 00:07:41,390
test an API and it says it's not Mabel

00:07:38,490 --> 00:07:43,650
but it really is skip it instead of pen

00:07:41,390 --> 00:07:44,790
so we came up with everything explicit

00:07:43,650 --> 00:07:46,530
which means if you want to test

00:07:44,790 --> 00:07:48,820
something you have to say this is

00:07:46,530 --> 00:07:50,710
enabled so make sure you test it

00:07:48,820 --> 00:07:52,840
and we carry that philosophy throughout

00:07:50,710 --> 00:07:55,390
code in the testing as well we don't

00:07:52,840 --> 00:07:56,980
make any underlying assumptions or we

00:07:55,390 --> 00:07:59,610
assume that everything from the API is

00:07:56,980 --> 00:08:01,870
garbage and you have to verify it in

00:07:59,610 --> 00:08:04,210
let's actually work pretty well for

00:08:01,870 --> 00:08:07,210
keeping the quality of your technique is

00:08:04,210 --> 00:08:09,220
high the other thing is we should only

00:08:07,210 --> 00:08:11,410
be using public interfaces this comes

00:08:09,220 --> 00:08:13,380
back to the black box testin at one

00:08:11,410 --> 00:08:16,330
point there were white box tests which

00:08:13,380 --> 00:08:18,820
would make an API call and check the

00:08:16,330 --> 00:08:20,230
note database letter to make sure that

00:08:18,820 --> 00:08:22,450
things something up into the database

00:08:20,230 --> 00:08:24,130
and that's completely on maintainable

00:08:22,450 --> 00:08:26,350
when you look at the scope of OpenStack

00:08:24,130 --> 00:08:30,250
scored what we're trying to test with

00:08:26,350 --> 00:08:32,320
Tempest so we decided that everything

00:08:30,250 --> 00:08:33,729
has to be through public interface and

00:08:32,320 --> 00:08:35,530
has to be queryable to the public and

00:08:33,729 --> 00:08:37,330
develops really want to test it and if

00:08:35,530 --> 00:08:39,729
you can't do that in the api's bourbon

00:08:37,330 --> 00:08:42,940
things as also end-users we want to do

00:08:39,729 --> 00:08:45,250
the same thing it should be a

00:08:42,940 --> 00:08:47,620
self-cleaning test because we're

00:08:45,250 --> 00:08:49,840
creating resources a lot for these tests

00:08:47,620 --> 00:08:51,610
so a nobody guy asks for example will

00:08:49,840 --> 00:08:53,470
create a server do something to the

00:08:51,610 --> 00:08:55,150
server at the end it has to make sure it

00:08:53,470 --> 00:08:57,340
elites deserve it doesn't need a bank of

00:08:55,150 --> 00:08:59,470
brown this comes back first design point

00:08:57,340 --> 00:09:01,690
of working against any openstack cloud

00:08:59,470 --> 00:09:03,370
and if you have a few running tests

00:09:01,690 --> 00:09:05,200
against public without unified to be

00:09:03,370 --> 00:09:09,400
sitting there reading resources that

00:09:05,200 --> 00:09:11,650
aren't deleted we try to do a good job

00:09:09,400 --> 00:09:13,900
that sometimes we both said so trailer

00:09:11,650 --> 00:09:16,240
resources get left angrily it's a

00:09:13,900 --> 00:09:17,920
constant problem and the other thing is

00:09:16,240 --> 00:09:19,750
it has to be self tested which is

00:09:17,920 --> 00:09:22,240
something that came out of one of the

00:09:19,750 --> 00:09:26,620
growing previous slide increased common

00:09:22,240 --> 00:09:28,360
code complexity and things started

00:09:26,620 --> 00:09:29,770
getting very complicated we realized we

00:09:28,360 --> 00:09:32,010
weren't actually validating tamest

00:09:29,770 --> 00:09:34,230
itself work but expected to

00:09:32,010 --> 00:09:39,930
votes so we started implementing your

00:09:34,230 --> 00:09:42,150
test fits that so the slide outlines the

00:09:39,930 --> 00:09:44,400
basic campus architectures create cheap

00:09:42,150 --> 00:09:46,620
and simple diagram but outlines that

00:09:44,400 --> 00:09:49,500
there are four basic types of testing we

00:09:46,620 --> 00:09:52,830
have intend this we have api test which

00:09:49,500 --> 00:09:55,260
used a tempest specific common rest

00:09:52,830 --> 00:09:56,820
client with service client

00:09:55,260 --> 00:09:58,290
implementations for all the OpenStack

00:09:56,820 --> 00:10:00,810
services may be honest so there's a

00:09:58,290 --> 00:10:04,410
known servers a client of novo flavors

00:10:00,810 --> 00:10:05,760
client for mental Neutron client so on

00:10:04,410 --> 00:10:07,860
and so forth but they're all based on

00:10:05,760 --> 00:10:10,770
the same common dress plan or just

00:10:07,860 --> 00:10:12,870
extensions on it which is in very handy

00:10:10,770 --> 00:10:16,230
lets us write tests in a very uniform

00:10:12,870 --> 00:10:18,750
matter between services for validating

00:10:16,230 --> 00:10:21,060
native lives and we have two classes of

00:10:18,750 --> 00:10:24,240
tests which use the official Python

00:10:21,060 --> 00:10:26,340
builders to go over the rest api and we

00:10:24,240 --> 00:10:28,860
also have you know film is easy to

00:10:26,340 --> 00:10:31,470
implementation since that's published at

00:10:28,860 --> 00:10:34,050
augusta as well but we use photo instead

00:10:31,470 --> 00:10:35,520
of testing the api directly which is why

00:10:34,050 --> 00:10:37,260
we have a common rest of mine because

00:10:35,520 --> 00:10:40,950
something we found is that python

00:10:37,260 --> 00:10:43,410
clients often mask bugs and put around

00:10:40,950 --> 00:10:45,200
it there's a funny guy instead of fixham

00:10:43,410 --> 00:10:51,150
enemy and care that it's to the client

00:10:45,200 --> 00:10:53,610
and we didn't want that to skip or sorry

00:10:51,150 --> 00:10:58,440
fail s we want to fail desta PA guys

00:10:53,610 --> 00:11:00,000
broken not work with it so first class

00:10:58,440 --> 00:11:01,590
of tests we haven't have this ready

00:11:00,000 --> 00:11:03,030
eight doctors they directly test they

00:11:01,590 --> 00:11:06,480
don't attack rescate guys for all the

00:11:03,030 --> 00:11:09,630
services of the admin regular bringing

00:11:06,480 --> 00:11:11,640
your user ID oddities they use the

00:11:09,630 --> 00:11:14,640
beautified time distress client which is

00:11:11,640 --> 00:11:18,090
a simple rapper riff HTTP with two and

00:11:14,640 --> 00:11:19,110
had some fancy custom features like fast

00:11:18,090 --> 00:11:23,490
raise an exception

00:11:19,110 --> 00:11:27,019
error codes inspected and tomorrow fans

00:11:23,490 --> 00:11:29,100
like hang Keystone all based into it and

00:11:27,019 --> 00:11:31,880
then there are two categories they've

00:11:29,100 --> 00:11:34,890
got us positive negative tests which is

00:11:31,880 --> 00:11:36,420
full weird but it's positive test is

00:11:34,890 --> 00:11:38,519
something that you expect to basically

00:11:36,420 --> 00:11:40,620
return 200 response code is something

00:11:38,519 --> 00:11:43,230
that you expect to succeed like create a

00:11:40,620 --> 00:11:45,810
server in this tenant and make sure if

00:11:43,230 --> 00:11:48,420
you can do something while the negative

00:11:45,810 --> 00:11:50,820
test is something you expect to fail and

00:11:48,420 --> 00:11:55,230
you expect to get an exception from an

00:11:50,820 --> 00:11:58,079
example that would be create a tenant in

00:11:55,230 --> 00:12:02,160
and out looking for something you expect

00:11:58,079 --> 00:12:05,700
a failure to come the issue we have with

00:12:02,160 --> 00:12:07,920
many the testing was that the negative

00:12:05,700 --> 00:12:10,680
space would basically if you think about

00:12:07,920 --> 00:12:13,079
it you have a defined behavior for

00:12:10,680 --> 00:12:14,310
greater difference than anything that's

00:12:13,079 --> 00:12:18,300
different from that which could be

00:12:14,310 --> 00:12:19,860
anything is about a negative test and

00:12:18,300 --> 00:12:21,870
what we started seeing once there was a

00:12:19,860 --> 00:12:24,630
slew of developers right before the Hong

00:12:21,870 --> 00:12:26,970
Kong side that just started pushing like

00:12:24,630 --> 00:12:28,860
1i negative eight contests that said

00:12:26,970 --> 00:12:30,810
like oh you didn't test this with an

00:12:28,860 --> 00:12:32,899
aspirin in the acog request and that's

00:12:30,810 --> 00:12:36,000
an invalid character for that call and

00:12:32,899 --> 00:12:38,790
we start getting hundreds of those so we

00:12:36,000 --> 00:12:41,130
decided to switch that to use test

00:12:38,790 --> 00:12:42,899
scenarios and the API scheming to

00:12:41,130 --> 00:12:45,540
autogenic negative tests so we have a

00:12:42,899 --> 00:12:47,760
fine step for what the Akash good

00:12:45,540 --> 00:12:49,860
behavior is and they are generated with

00:12:47,760 --> 00:12:52,890
that stuff d is based on a good step and

00:12:49,860 --> 00:12:54,510
it gives us free applying negative

00:12:52,890 --> 00:12:56,250
testing characteristics we won't catch

00:12:54,510 --> 00:12:58,560
anything to hold it but at least is

00:12:56,250 --> 00:13:00,579
where we don't have a clue jr. built

00:12:58,560 --> 00:13:02,649
only able to step

00:13:00,579 --> 00:13:07,660
pushing our country send random

00:13:02,649 --> 00:13:09,339
characters to random implants the next

00:13:07,660 --> 00:13:11,410
type of testing part of the scenario

00:13:09,339 --> 00:13:13,540
test scenario tests are a little bit

00:13:11,410 --> 00:13:17,769
more involved they design to simulate

00:13:13,540 --> 00:13:19,149
end-user workflow so basically sending

00:13:17,769 --> 00:13:21,970
light like what i usually do if they

00:13:19,149 --> 00:13:23,920
want to use a server with cinder do

00:13:21,970 --> 00:13:28,389
something with its interval and migrated

00:13:23,920 --> 00:13:30,069
to my new server they currently are

00:13:28,389 --> 00:13:31,629
using the Python official clients

00:13:30,069 --> 00:13:33,850
although right now we're actually

00:13:31,629 --> 00:13:36,040
working on removing that and switching

00:13:33,850 --> 00:13:38,619
to tempest clients because of Python

00:13:36,040 --> 00:13:39,999
clients when they fail it's almost

00:13:38,619 --> 00:13:42,069
impossible figure out why it fails

00:13:39,999 --> 00:13:43,660
sometimes massive hit too much under the

00:13:42,069 --> 00:13:46,480
covers and switching eyes and tempest

00:13:43,660 --> 00:13:49,059
ones but the original intent was since

00:13:46,480 --> 00:13:50,679
its end-user workflow that I'm simulate

00:13:49,059 --> 00:13:55,720
we should use these survives because

00:13:50,679 --> 00:13:57,069
that's what end users are all today the

00:13:55,720 --> 00:13:58,660
obvious implication of that is that

00:13:57,069 --> 00:14:00,220
India to shoot from using efficient

00:13:58,660 --> 00:14:01,989
clients because they're broken I'm not

00:14:00,220 --> 00:14:05,439
going to go like pollution fractured

00:14:01,989 --> 00:14:07,660
money oh and ideally these tests will

00:14:05,439 --> 00:14:09,489
only be used to test integration points

00:14:07,660 --> 00:14:12,249
between projects like I mentioned the

00:14:09,489 --> 00:14:15,220
sender another example are you moodle

00:14:12,249 --> 00:14:17,410
included server creates endured while

00:14:15,220 --> 00:14:21,699
you attach it do something to this in

00:14:17,410 --> 00:14:23,679
your volume go on from there we don't

00:14:21,699 --> 00:14:26,259
want these tests to be basically mirrors

00:14:23,679 --> 00:14:29,019
be a guy cuts the api test testing

00:14:26,259 --> 00:14:31,480
singular api functions like create a

00:14:29,019 --> 00:14:33,879
server with this an assumption scenario

00:14:31,480 --> 00:14:35,579
test some more for create a server do

00:14:33,879 --> 00:14:39,339
something with the server life musically

00:14:35,579 --> 00:14:43,509
it's kind of a weird distinction if very

00:14:39,339 --> 00:14:45,790
little time so it's the next one

00:14:43,509 --> 00:14:49,179
category of testing or the command line

00:14:45,790 --> 00:14:51,910
interface tests which test the official

00:14:49,179 --> 00:14:54,040
client command-line interfaces and it's

00:14:51,910 --> 00:14:55,340
really just a quick sanity check of

00:14:54,040 --> 00:14:57,250
functionality

00:14:55,340 --> 00:15:00,530
interfaces to make sure they came as

00:14:57,250 --> 00:15:03,500
expected they don't form read-only

00:15:00,530 --> 00:15:04,940
operations and very simple and it was

00:15:03,500 --> 00:15:08,090
mostly added the tempest for gaining

00:15:04,940 --> 00:15:12,110
convenience we had this three cycles

00:15:08,090 --> 00:15:14,510
available there wasn't an easy way to

00:15:12,110 --> 00:15:15,590
spin up desk at nodes of the gate and we

00:15:14,510 --> 00:15:18,710
didn't have a way of functionally

00:15:15,590 --> 00:15:21,560
testing the committee python clients

00:15:18,710 --> 00:15:23,510
many line interface it is very easily so

00:15:21,560 --> 00:15:25,670
we just dumped it in tempest because it

00:15:23,510 --> 00:15:27,170
already had all that so if you remember

00:15:25,670 --> 00:15:28,910
from the earlier slides of the design

00:15:27,170 --> 00:15:32,120
point templates dissolved up the rest

00:15:28,910 --> 00:15:34,940
api command-line interfaces of clients

00:15:32,120 --> 00:15:35,990
or python a classic appliance so this

00:15:34,940 --> 00:15:37,760
really doesn't fit the mission of

00:15:35,990 --> 00:15:39,740
tempest and one of the goals for this

00:15:37,760 --> 00:15:42,140
development cycle is actually removing

00:15:39,740 --> 00:15:44,720
dementedly CLI tests and putting them

00:15:42,140 --> 00:15:46,880
back in the Python client as functional

00:15:44,720 --> 00:15:49,160
tests jobs now that we have the ability

00:15:46,880 --> 00:15:50,960
to easily spin up that's forgetting

00:15:49,160 --> 00:15:55,640
roses which was the only reason to put

00:15:50,960 --> 00:15:58,840
it encompassed in first place there's

00:15:55,640 --> 00:16:02,470
also a stress test suite built a palace

00:15:58,840 --> 00:16:05,330
it uses the tempest test to generate

00:16:02,470 --> 00:16:08,390
load basically running the tests and

00:16:05,330 --> 00:16:10,400
bake them and it also runs that in

00:16:08,390 --> 00:16:12,890
parallel with continual unhappy about

00:16:10,400 --> 00:16:16,810
the tasks there's a set of dedicated

00:16:12,890 --> 00:16:20,210
scenarios for generating press on cloud

00:16:16,810 --> 00:16:23,360
they're mostly like just creating set

00:16:20,210 --> 00:16:25,280
volume source of servers in a series and

00:16:23,360 --> 00:16:27,320
then there's also the ability to

00:16:25,280 --> 00:16:29,420
decorate any existing countless tests to

00:16:27,320 --> 00:16:30,740
be a stress test generator because a lot

00:16:29,420 --> 00:16:32,960
of the things we're doing and have this

00:16:30,740 --> 00:16:35,600
to do it once it's a good test you do it

00:16:32,960 --> 00:16:38,510
50 times at once over the period an hour

00:16:35,600 --> 00:16:40,430
it's a good way to stretch the club so

00:16:38,510 --> 00:16:43,400
we have the ability to make any time

00:16:40,430 --> 00:16:44,440
it's tested stresses all the scenario

00:16:43,400 --> 00:16:46,990
tests that mentioned

00:16:44,440 --> 00:16:47,920
previously they're good stress gets

00:16:46,990 --> 00:16:49,300
things they're testing integration

00:16:47,920 --> 00:16:51,460
points and they're getting lots of

00:16:49,300 --> 00:16:53,320
things so if you run that block the same

00:16:51,460 --> 00:16:56,770
time that's a good way to stress your

00:16:53,320 --> 00:16:59,860
plan the stress tests wait and running

00:16:56,770 --> 00:17:02,140
is configurable but it's basically set a

00:16:59,860 --> 00:17:04,720
fury of time to run for then you say you

00:17:02,140 --> 00:17:07,270
are on these tests seriously or

00:17:04,720 --> 00:17:09,910
parallely how many friends and just

00:17:07,270 --> 00:17:13,900
loops until time runs out or everything

00:17:09,910 --> 00:17:16,329
explodes which happens and then there

00:17:13,900 --> 00:17:19,630
are two other class there are

00:17:16,329 --> 00:17:21,130
third-party times which often gets

00:17:19,630 --> 00:17:23,050
confused by people trying to spin up

00:17:21,130 --> 00:17:25,959
their party I is nothing to do that

00:17:23,050 --> 00:17:29,620
integration it's about testing the ec2

00:17:25,959 --> 00:17:31,810
API no we call that third party does

00:17:29,620 --> 00:17:34,210
because we assume that one day there

00:17:31,810 --> 00:17:38,470
possibly be another not within the staph

00:17:34,210 --> 00:17:41,050
epi in an OpenStack project because the

00:17:38,470 --> 00:17:43,270
theory is if you have a guy in your own

00:17:41,050 --> 00:17:44,890
staff tree or your OpenStack project

00:17:43,270 --> 00:17:47,110
tree it needs to be tested because it's

00:17:44,890 --> 00:17:50,230
published 8 yard since nobody knows that

00:17:47,110 --> 00:17:53,110
easy to we have to verify that bc 2

00:17:50,230 --> 00:17:54,790
works I don't actually ever see that in

00:17:53,110 --> 00:17:57,310
Rome because all the other third-party

00:17:54,790 --> 00:18:02,500
you guys'd & Spa offers rapper layers

00:17:57,310 --> 00:18:04,300
outside the project sacral chakra the

00:18:02,500 --> 00:18:06,550
other thing is unit tests which are

00:18:04,300 --> 00:18:09,370
basically as they sound if you remember

00:18:06,550 --> 00:18:10,810
from the grubs games to figure out won't

00:18:09,370 --> 00:18:12,280
be issues what we do actually have any

00:18:10,810 --> 00:18:15,490
verification attempt this was doing what

00:18:12,280 --> 00:18:18,790
we five related so that in savannah i

00:18:15,490 --> 00:18:20,770
actually pushed above into the chemistry

00:18:18,790 --> 00:18:23,020
which broke the wrapper scripts so it

00:18:20,770 --> 00:18:24,790
always returns zero and because we're

00:18:23,020 --> 00:18:29,530
always running has continuously employed

00:18:24,790 --> 00:18:32,080
the gate for verification every job task

00:18:29,530 --> 00:18:33,580
but it failed a past and a couple

00:18:32,080 --> 00:18:34,960
projects managed to break themselves in

00:18:33,580 --> 00:18:36,210
the three hours that opens to catch my

00:18:34,960 --> 00:18:38,739
mistake

00:18:36,210 --> 00:18:40,389
so that was a pretty good motivation for

00:18:38,739 --> 00:18:42,999
actually testing what we were doing and

00:18:40,389 --> 00:18:45,369
it's since grown significantly I started

00:18:42,999 --> 00:18:47,619
with four tests unit tests just testing

00:18:45,369 --> 00:18:49,509
that rapper script in Havana and the end

00:18:47,619 --> 00:18:53,769
of icehouse we had over 50 you to test

00:18:49,509 --> 00:18:58,840
so we're starting to increase the

00:18:53,769 --> 00:19:01,690
quality of equality transfer the battle

00:18:58,840 --> 00:19:02,679
I'm sorry so now I'm going to pop a

00:19:01,690 --> 00:19:06,190
little bit about some of the cool

00:19:02,679 --> 00:19:08,139
features we have in tempest one of them

00:19:06,190 --> 00:19:10,359
in his parallel templates something I

00:19:08,139 --> 00:19:11,919
spent a lot of time on and a lot of time

00:19:10,359 --> 00:19:14,769
working with rubber getting tests are to

00:19:11,919 --> 00:19:18,789
do what we needed rotten canvas

00:19:14,769 --> 00:19:21,039
comparable but before basically then

00:19:18,789 --> 00:19:23,409
release we were running all the tempest

00:19:21,039 --> 00:19:25,960
test serially so we had at that time I

00:19:23,409 --> 00:19:27,970
think about 900 texts online we were

00:19:25,960 --> 00:19:31,899
running there's one at a time one in

00:19:27,970 --> 00:19:34,149
single threat and we realized that was

00:19:31,899 --> 00:19:37,179
slow and not sustainable before hour run

00:19:34,149 --> 00:19:38,799
time limit without our gate so we said

00:19:37,179 --> 00:19:41,379
well the simple things to run the tests

00:19:38,799 --> 00:19:43,389
in parallel do that unit tests there are

00:19:41,379 --> 00:19:46,769
interesting synchronization issues in

00:19:43,389 --> 00:19:49,929
front local API requests the same time

00:19:46,769 --> 00:19:51,249
so we had to get rid of those but the

00:19:49,929 --> 00:19:53,940
other thing we found when we switch to

00:19:51,249 --> 00:19:58,210
parallel was it's actually more closely

00:19:53,940 --> 00:19:59,830
simulating the real logo cloud in your

00:19:58,210 --> 00:20:01,509
broken stock footage you're not going to

00:19:59,830 --> 00:20:03,369
have a single user sitting there and

00:20:01,509 --> 00:20:06,070
loop getting at one request at a time

00:20:03,369 --> 00:20:07,259
we've got hundreds of user tapi all at

00:20:06,070 --> 00:20:10,269
the same time you're going to have

00:20:07,259 --> 00:20:12,580
interesting cross reactions because of

00:20:10,269 --> 00:20:14,590
the stack is a distributed asynchronous

00:20:12,580 --> 00:20:16,330
message passing architectures here and

00:20:14,590 --> 00:20:19,989
have all sorts of non-deterministic

00:20:16,330 --> 00:20:22,840
behavior Bubba and that's something

00:20:19,989 --> 00:20:24,410
we've actually found has hugely improved

00:20:22,840 --> 00:20:27,410
the quality of open

00:20:24,410 --> 00:20:29,270
that were running for a thread when we

00:20:27,410 --> 00:20:32,060
verified tempest indicate as part of

00:20:29,270 --> 00:20:33,740
game we should shake boots tons of race

00:20:32,060 --> 00:20:35,450
conditions and all of the projects and

00:20:33,740 --> 00:20:37,550
fix that make things more stable and

00:20:35,450 --> 00:20:38,900
Brendan we have hundreds of race

00:20:37,550 --> 00:20:41,660
conditions that we know about today

00:20:38,900 --> 00:20:45,220
pistol are six but the fact that we can

00:20:41,660 --> 00:20:49,180
find those means that Harold doing huge

00:20:45,220 --> 00:20:52,880
huge job improving inaudible projects

00:20:49,180 --> 00:20:55,370
and as I said before the speed is also

00:20:52,880 --> 00:20:56,900
greatly I mean we were pushing an hour

00:20:55,370 --> 00:20:58,940
with less than a thousand tests before

00:20:56,900 --> 00:21:01,580
we turned it on after we turned it on

00:20:58,940 --> 00:21:05,240
running about 23 on your tests in 40

00:21:01,580 --> 00:21:07,130
minutes to an hour so it so it seems

00:21:05,240 --> 00:21:09,830
like it's slow for tests we take up long

00:21:07,130 --> 00:21:12,730
we're actually doing lots of things like

00:21:09,830 --> 00:21:16,520
spitting up a second level virtual guest

00:21:12,730 --> 00:21:18,460
as part of a test run first thing we're

00:21:16,520 --> 00:21:21,320
doing real work because we're not not

00:21:18,460 --> 00:21:24,770
all functional testing will detect a

00:21:21,320 --> 00:21:26,600
question right the other thing which we

00:21:24,770 --> 00:21:29,930
started beginning of june of cycles

00:21:26,600 --> 00:21:33,440
branch that's tempest which a little

00:21:29,930 --> 00:21:35,150
confusing basically we know created the

00:21:33,440 --> 00:21:37,850
concept of releases and tempest and

00:21:35,150 --> 00:21:39,530
stable branches so before when the

00:21:37,850 --> 00:21:41,180
OpenStack project released Greenwood

00:21:39,530 --> 00:21:44,090
were they sentenced him to say okay

00:21:41,180 --> 00:21:46,679
after this point everything here is

00:21:44,090 --> 00:21:50,020
stable

00:21:46,679 --> 00:21:51,520
stable de madame x and then we start

00:21:50,020 --> 00:21:53,380
again and then when the next release

00:21:51,520 --> 00:21:55,000
happened we'd say this is a stable base

00:21:53,380 --> 00:21:57,700
has emerged and would go like that and

00:21:55,000 --> 00:21:59,890
that their fixes backcourt we def like

00:21:57,700 --> 00:22:02,800
that but what we figured out what was

00:21:59,890 --> 00:22:04,780
that by doing that we weren't actually

00:22:02,800 --> 00:22:06,429
there applying the API was consistent

00:22:04,780 --> 00:22:08,050
between the leases things would be

00:22:06,429 --> 00:22:10,270
running the stable branch is against the

00:22:08,050 --> 00:22:12,070
stable wrenches the staple branch of

00:22:10,270 --> 00:22:13,960
tempest against stable branches of

00:22:12,070 --> 00:22:16,690
projects and there wasn't actually

00:22:13,960 --> 00:22:18,490
running whatever temp is closing its

00:22:16,690 --> 00:22:19,960
current form against both the old and

00:22:18,490 --> 00:22:22,510
the new so if there were bugs and

00:22:19,960 --> 00:22:24,460
Tempest and stable branches then we

00:22:22,510 --> 00:22:26,200
wouldn't catch the fixes to that

00:22:24,460 --> 00:22:28,390
necessarily knows we got work and we

00:22:26,200 --> 00:22:30,760
work very good contact so what we

00:22:28,390 --> 00:22:32,320
decided to do was that from icehouse

00:22:30,760 --> 00:22:34,300
forward there's only going to be a

00:22:32,320 --> 00:22:36,100
master branch your interest and this

00:22:34,300 --> 00:22:38,110
will ensure that the API is consistent

00:22:36,100 --> 00:22:40,870
people running the same exact tests on

00:22:38,110 --> 00:22:42,520
master as we are stable isotopes and

00:22:40,870 --> 00:22:46,270
moving forward stable check out with

00:22:42,520 --> 00:22:47,290
Ronald massive Tempest is weapon this is

00:22:46,270 --> 00:22:49,540
something that's actually government

00:22:47,290 --> 00:22:50,980
it's a problem I controversial the fact

00:22:49,540 --> 00:22:52,600
that we want to ensure the KT guys

00:22:50,980 --> 00:22:54,670
consistent between releases a lot of

00:22:52,600 --> 00:22:58,360
people don't understand the door for

00:22:54,670 --> 00:23:01,090
tecnica chemistry that if you want to

00:22:58,360 --> 00:23:02,860
fix bugs you have to back with them so

00:23:01,090 --> 00:23:04,210
if there's breaking API change for I

00:23:02,860 --> 00:23:06,040
think the most recent example was

00:23:04,210 --> 00:23:09,370
Keystone they started applying under

00:23:06,040 --> 00:23:10,809
Apache and the hand response code of

00:23:09,370 --> 00:23:13,030
success was different when you're on

00:23:10,809 --> 00:23:16,720
your patchy that was under whatever the

00:23:13,030 --> 00:23:18,010
other whiskey staff works and fix that

00:23:16,720 --> 00:23:19,450
they need to backport changes to

00:23:18,010 --> 00:23:21,700
icehouse being mobilized wouldn't land

00:23:19,450 --> 00:23:23,710
because the API wasn't consistent it

00:23:21,700 --> 00:23:26,470
wasn't consistently growing i should say

00:23:23,710 --> 00:23:28,900
between the releases so they have to fix

00:23:26,470 --> 00:23:31,179
it and to fix it they head back for what

00:23:28,900 --> 00:23:33,559
this really does is makes end users life

00:23:31,179 --> 00:23:36,840
happier or end users happier

00:23:33,559 --> 00:23:39,330
but the API is they've got and it's not

00:23:36,840 --> 00:23:42,030
be a guy of the random get patched in to

00:23:39,330 --> 00:23:44,490
run to the problem like for example of

00:23:42,030 --> 00:23:46,049
rats basic lavage was deployed they all

00:23:44,490 --> 00:23:48,809
contains deployed if they were running

00:23:46,049 --> 00:23:50,970
ice house and HP fire was running Padano

00:23:48,809 --> 00:23:53,669
be eight guys were consistent on the

00:23:50,970 --> 00:23:55,290
right code of clouds they didn't know

00:23:53,669 --> 00:23:56,880
going on he to be the same so by doing

00:23:55,290 --> 00:23:58,830
this we are ensuring that things are

00:23:56,880 --> 00:24:04,350
consistent quick releases and it's not

00:23:58,830 --> 00:24:05,970
just releases but any qantas that's in

00:24:04,350 --> 00:24:10,410
the slides of optimism in our problems

00:24:05,970 --> 00:24:12,809
but so those are the wings i assume

00:24:10,410 --> 00:24:14,220
slides will be posted soon but the ones

00:24:12,809 --> 00:24:16,770
of temps repository attempts

00:24:14,220 --> 00:24:18,510
documentation both of which have far

00:24:16,770 --> 00:24:21,299
more details of cursory glance

00:24:18,510 --> 00:24:23,309
everything i'm talking about and if you

00:24:21,299 --> 00:24:26,100
ever want interactive help is obviously

00:24:23,309 --> 00:24:28,440
the exact day of mailing list and we all

00:24:26,100 --> 00:24:31,380
hang out everyone works with down 1070

00:24:28,440 --> 00:24:35,010
OpenStack uhl freenode just everything

00:24:31,380 --> 00:24:38,179
as melanie and questions so it was in

00:24:35,010 --> 00:24:38,179
Les life are there any questions

00:24:45,820 --> 00:24:47,880

YouTube URL: https://www.youtube.com/watch?v=KBvPj_QFnQY


