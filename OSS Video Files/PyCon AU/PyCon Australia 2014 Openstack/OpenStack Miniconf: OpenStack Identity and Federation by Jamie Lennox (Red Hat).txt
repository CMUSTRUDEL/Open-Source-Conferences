Title: OpenStack Miniconf: OpenStack Identity and Federation by Jamie Lennox (Red Hat)
Publication date: 2014-08-17
Playlist: PyCon Australia 2014 Openstack
Description: 
	PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:05,230 --> 00:00:10,360
morning everybody welcome to plaque on

00:00:07,510 --> 00:00:12,549
my name is Jamie Lennox and I work for

00:00:10,360 --> 00:00:14,619
red hat here in Brisbane I've been doing

00:00:12,549 --> 00:00:17,500
OpenStack for about 18 months and I'm a

00:00:14,619 --> 00:00:20,289
core member of the Keystone team and do

00:00:17,500 --> 00:00:23,859
able to work around the various Python

00:00:20,289 --> 00:00:25,720
libraries for the services today we're

00:00:23,859 --> 00:00:32,169
looking at federated identities and

00:00:25,720 --> 00:00:33,940
Keystone so apparently we all know a

00:00:32,169 --> 00:00:35,860
little bit about OpenStack at least I

00:00:33,940 --> 00:00:39,309
was had the standard Keystone

00:00:35,860 --> 00:00:41,110
introduction Keystone is the part of the

00:00:39,309 --> 00:00:43,899
cloud that provides your authentication

00:00:41,110 --> 00:00:45,670
and discovery it's generally the first

00:00:43,899 --> 00:00:47,500
point of contact you submit your

00:00:45,670 --> 00:00:48,730
credentials to Keystone for the

00:00:47,500 --> 00:00:51,850
presentation we'll just use the username

00:00:48,730 --> 00:00:53,920
and password and you get back a token

00:00:51,850 --> 00:00:57,969
containing your permissions within that

00:00:53,920 --> 00:00:59,890
cloud and the different a catalog of the

00:00:57,969 --> 00:01:01,780
different URLs that you can access using

00:00:59,890 --> 00:01:07,510
that token for all the different

00:01:01,780 --> 00:01:10,330
services so standard token flow a user

00:01:07,510 --> 00:01:12,400
here submits his password to Keystone

00:01:10,330 --> 00:01:17,080
get back token and whenever he goes to

00:01:12,400 --> 00:01:19,570
talk to novo glance insert service he

00:01:17,080 --> 00:01:21,070
submits token and it says you know

00:01:19,570 --> 00:01:22,390
Keystone has said this is what I'm

00:01:21,070 --> 00:01:25,420
allowed to do you don't need to re

00:01:22,390 --> 00:01:27,430
authenticate me so the security ramage

00:01:25,420 --> 00:01:30,330
is that username and password is only

00:01:27,430 --> 00:01:32,110
transmitted once to Keystone and

00:01:30,330 --> 00:01:34,570
everything else just works with the

00:01:32,110 --> 00:01:37,030
token if your token gets intercepted

00:01:34,570 --> 00:01:40,000
that's still bad but your token lives

00:01:37,030 --> 00:01:42,520
for by default about an hour your

00:01:40,000 --> 00:01:44,530
password can live until you change it so

00:01:42,520 --> 00:01:51,120
you know the interception risk is much

00:01:44,530 --> 00:01:54,130
much less so there are two major jobs to

00:01:51,120 --> 00:01:55,240
Keystone's token issuing and the

00:01:54,130 --> 00:01:57,400
difference between authentication and

00:01:55,240 --> 00:02:01,510
authorization is a fairly important one

00:01:57,400 --> 00:02:04,840
so FM occation is just looking up who

00:02:01,510 --> 00:02:08,080
the user is taking the username and

00:02:04,840 --> 00:02:10,780
password matching that to a user in your

00:02:08,080 --> 00:02:13,829
database and verifying that the password

00:02:10,780 --> 00:02:15,790
is correct that's all if n occation does

00:02:13,829 --> 00:02:18,250
authorization is then the process of

00:02:15,790 --> 00:02:18,590
taking that user and figuring out what

00:02:18,250 --> 00:02:20,390
their

00:02:18,590 --> 00:02:21,860
allowed to do with an OpenStack what

00:02:20,390 --> 00:02:26,050
roles they have what projects they're

00:02:21,860 --> 00:02:28,610
involved in all that sort of work so

00:02:26,050 --> 00:02:30,500
typically in deploy in sort of a

00:02:28,610 --> 00:02:32,150
large-scale deployment will say that

00:02:30,500 --> 00:02:33,890
authentication should be coming out of

00:02:32,150 --> 00:02:36,400
LDAP or something it's probably coming

00:02:33,890 --> 00:02:39,680
out of an existing identity store and

00:02:36,400 --> 00:02:41,480
your authorizations should be managed by

00:02:39,680 --> 00:02:44,090
keystone are probably within a sequel

00:02:41,480 --> 00:02:46,940
database and if you look in keystone

00:02:44,090 --> 00:02:48,560
they're not called that but you know we

00:02:46,940 --> 00:02:49,970
have authentication which is the

00:02:48,560 --> 00:02:51,260
identity back end and we have

00:02:49,970 --> 00:02:54,890
authorization which is the assignment

00:02:51,260 --> 00:02:59,920
back end so that structures fairly well

00:02:54,890 --> 00:03:03,230
followed putting that aside for a second

00:02:59,920 --> 00:03:05,870
federation for us or for our contacts

00:03:03,230 --> 00:03:08,750
federation is the ability to use a

00:03:05,870 --> 00:03:12,620
person's externally managed identity

00:03:08,750 --> 00:03:13,910
within keystone so you've probably seen

00:03:12,620 --> 00:03:15,799
when you go to a website and your ass

00:03:13,910 --> 00:03:18,079
tube you know create a new account or to

00:03:15,799 --> 00:03:19,790
sign in you're offered a list of you log

00:03:18,079 --> 00:03:22,250
in using your google account login using

00:03:19,790 --> 00:03:23,900
your facebook account some other you

00:03:22,250 --> 00:03:27,139
know some existing identity that you

00:03:23,900 --> 00:03:28,549
have and the concept here is exactly the

00:03:27,139 --> 00:03:31,760
same for we're trying to do in keystone

00:03:28,549 --> 00:03:33,530
how do we take those users that already

00:03:31,760 --> 00:03:37,609
exist in the next ermal identity

00:03:33,530 --> 00:03:45,170
provider and use them within keystone

00:03:37,609 --> 00:03:47,180
and within our cloud so firstly what is

00:03:45,170 --> 00:03:49,760
the advantages here why do i do we want

00:03:47,180 --> 00:03:51,709
to go down this path so the obvious one

00:03:49,760 --> 00:03:53,480
is convenience users already have a

00:03:51,709 --> 00:03:54,980
bunch of credentials you've got username

00:03:53,480 --> 00:03:56,739
and passwords for just about every site

00:03:54,980 --> 00:03:58,459
they don't really need another one

00:03:56,739 --> 00:04:01,069
particularly if you're looking at sort

00:03:58,459 --> 00:04:03,139
of deploying private clouds you probably

00:04:01,069 --> 00:04:04,609
have already got your enterprise login

00:04:03,139 --> 00:04:05,930
your you and your company login you

00:04:04,609 --> 00:04:08,799
don't need another one just for your

00:04:05,930 --> 00:04:10,639
clout or just for OpenStack

00:04:08,799 --> 00:04:12,139
inconvenience for the admins as well

00:04:10,639 --> 00:04:15,109
every time you've got something that

00:04:12,139 --> 00:04:16,880
manages passwords you've got password

00:04:15,109 --> 00:04:18,859
resets to manage you've got to make sure

00:04:16,880 --> 00:04:20,299
that password rotation policies match

00:04:18,859 --> 00:04:23,419
whatever your corporate sort of

00:04:20,299 --> 00:04:25,250
structure is so that all exists managing

00:04:23,419 --> 00:04:27,200
now sort of identities there that's out

00:04:25,250 --> 00:04:29,650
there we don't really want to reinvent

00:04:27,200 --> 00:04:29,650
that wheel

00:04:29,910 --> 00:04:36,070
integration so you've Enterprise you've

00:04:34,300 --> 00:04:39,010
probably already got some form of either

00:04:36,070 --> 00:04:40,720
single sign-on identity store at the

00:04:39,010 --> 00:04:44,200
moment we can access a lot of that using

00:04:40,720 --> 00:04:45,700
ldap but there are still specific there

00:04:44,200 --> 00:04:47,560
are companies or there are structures

00:04:45,700 --> 00:04:50,110
where the scheme is a different ldap is

00:04:47,560 --> 00:04:51,550
a pain to manage if you've got a single

00:04:50,110 --> 00:04:52,990
sign-on we want to reuse that in

00:04:51,550 --> 00:04:56,590
Keystone rather than have all of our own

00:04:52,990 --> 00:04:58,030
structures and partnerships so you know

00:04:56,590 --> 00:04:59,320
a public cloud you've got two different

00:04:58,030 --> 00:05:03,520
companies that want to work together

00:04:59,320 --> 00:05:06,040
from a joint team either somebody has to

00:05:03,520 --> 00:05:09,460
create users for your other partner

00:05:06,040 --> 00:05:11,380
company or better would be just to map

00:05:09,460 --> 00:05:13,300
both of the existing identity providers

00:05:11,380 --> 00:05:17,800
into keystone so they can both work in

00:05:13,300 --> 00:05:19,510
the same space migration I'm particular

00:05:17,800 --> 00:05:21,160
for talking public clouds if there are

00:05:19,510 --> 00:05:22,630
you know five or six public cloud

00:05:21,160 --> 00:05:25,600
providers and they will all accept your

00:05:22,630 --> 00:05:27,910
google ID you're gonna start seeing much

00:05:25,600 --> 00:05:29,470
better movement across clouds you're

00:05:27,910 --> 00:05:31,479
going to start you know this cloud is

00:05:29,470 --> 00:05:32,979
particularly good for this job you're

00:05:31,479 --> 00:05:34,750
this clap for this job if it's all using

00:05:32,979 --> 00:05:36,180
the same credentials we sort of hope

00:05:34,750 --> 00:05:41,830
that you're going to get a lot better

00:05:36,180 --> 00:05:44,950
migration across them and security this

00:05:41,830 --> 00:05:46,900
every time you create an identity store

00:05:44,950 --> 00:05:48,610
that's another place that can be

00:05:46,900 --> 00:05:50,860
compromised as a set of processes that

00:05:48,610 --> 00:05:53,710
you have to make work there's a you know

00:05:50,860 --> 00:05:55,270
another database table another chance

00:05:53,710 --> 00:05:57,310
that your company can end up in the news

00:05:55,270 --> 00:06:00,010
for dropping its table all over the

00:05:57,310 --> 00:06:06,460
internet so we definitely don't want to

00:06:00,010 --> 00:06:08,770
be that we can never get away from what

00:06:06,460 --> 00:06:11,500
we've got like we will always have to

00:06:08,770 --> 00:06:14,229
have some internal support but yes

00:06:11,500 --> 00:06:16,120
hopefully we're probably talking at

00:06:14,229 --> 00:06:21,520
least three or four cycles but yes well

00:06:16,120 --> 00:06:24,100
that was will it be the default so same

00:06:21,520 --> 00:06:27,240
diagram the federated worlds we got two

00:06:24,100 --> 00:06:30,220
types of providers or two i dint or two

00:06:27,240 --> 00:06:32,919
services the identity providers which

00:06:30,220 --> 00:06:35,139
i'm probably going to call IDPs at least

00:06:32,919 --> 00:06:37,210
once they're the source but entity

00:06:35,139 --> 00:06:41,020
they're storing a user they're storing

00:06:37,210 --> 00:06:42,430
the password somewhere and then the

00:06:41,020 --> 00:06:42,610
other side that is the service providers

00:06:42,430 --> 00:06:45,009
and

00:06:42,610 --> 00:06:47,289
service providers of the consumer they

00:06:45,009 --> 00:06:48,669
want to provide their service they want

00:06:47,289 --> 00:06:51,250
to know that the person that's logging

00:06:48,669 --> 00:06:52,330
on to them is authenticated but they

00:06:51,250 --> 00:06:53,770
don't want to manage their own user

00:06:52,330 --> 00:06:57,099
table that that sort of stuff should be

00:06:53,770 --> 00:06:59,979
given to them and so same diagram from

00:06:57,099 --> 00:07:02,139
before this is Keystone as an identity

00:06:59,979 --> 00:07:05,530
provider we are storing passwords in a

00:07:02,139 --> 00:07:07,719
database what we want to do is get away

00:07:05,530 --> 00:07:12,969
from that layer have that managed by

00:07:07,719 --> 00:07:14,169
somebody completely else so this is what

00:07:12,969 --> 00:07:16,449
we're looking for this is them this is

00:07:14,169 --> 00:07:18,400
our goal model so your user

00:07:16,449 --> 00:07:20,259
authentication is handled by some

00:07:18,400 --> 00:07:22,360
completely other identity provider that

00:07:20,259 --> 00:07:25,990
can be Google Facebook your enterprise

00:07:22,360 --> 00:07:28,719
accounts anything then Keystone is a

00:07:25,990 --> 00:07:30,849
service provider the service of issuing

00:07:28,719 --> 00:07:33,039
tokens and the authorization of what can

00:07:30,849 --> 00:07:34,599
happen within your cloud so we take that

00:07:33,039 --> 00:07:37,509
user and we still need to look up the

00:07:34,599 --> 00:07:39,279
roles and stuff in Keystone to figure

00:07:37,509 --> 00:07:45,460
out what that user can do so Keystone is

00:07:39,279 --> 00:07:47,949
not becoming obsolete it means that it's

00:07:45,460 --> 00:07:51,009
a booster performance we're running

00:07:47,949 --> 00:07:54,479
behind Apache any crypto in terms of

00:07:51,009 --> 00:07:58,629
identifying and validating the IDPs

00:07:54,479 --> 00:08:01,509
handled in c it's a boost of security

00:07:58,629 --> 00:08:04,000
we're looking to use standard a patch

00:08:01,509 --> 00:08:05,500
existing apache modules we don't need to

00:08:04,000 --> 00:08:08,979
implement that ourselves so you know

00:08:05,500 --> 00:08:10,360
they've been battle tested and for any

00:08:08,979 --> 00:08:12,250
other developers in the room running

00:08:10,360 --> 00:08:13,779
behind apache means keystone no longer

00:08:12,250 --> 00:08:18,969
has to deal with event 'let which is a

00:08:13,779 --> 00:08:23,319
massive win for us so to get there there

00:08:18,969 --> 00:08:25,539
are a couple of competing standards open

00:08:23,319 --> 00:08:28,330
re-connect there's a newish one called

00:08:25,539 --> 00:08:29,919
ab fab but the most common and

00:08:28,330 --> 00:08:36,449
particularly in the enterprise space the

00:08:29,919 --> 00:08:40,599
most common one is sam'l so Sam all

00:08:36,449 --> 00:08:44,560
symbols an I'm open standard and XML

00:08:40,599 --> 00:08:46,420
based protocol it came out of one of the

00:08:44,560 --> 00:08:47,560
Oasis groups about ten years ago and

00:08:46,420 --> 00:08:52,360
that's had a number of improvements

00:08:47,560 --> 00:08:56,560
since then it's it transmits both

00:08:52,360 --> 00:08:58,870
authentication and authorization data so

00:08:56,560 --> 00:09:01,540
what that means is that the packet that

00:08:58,870 --> 00:09:03,820
we get from a sam'l provider contains

00:09:01,540 --> 00:09:06,190
not only who the user is but all of the

00:09:03,820 --> 00:09:09,130
roles that that IDP knows about that

00:09:06,190 --> 00:09:12,220
user so for anyone that's familiar we

00:09:09,130 --> 00:09:14,380
say the OAuth flow I will only give you

00:09:12,220 --> 00:09:16,089
delegation it says this user is allowed

00:09:14,380 --> 00:09:18,250
to access this service but it doesn't

00:09:16,089 --> 00:09:20,140
tell us anything more than that in

00:09:18,250 --> 00:09:21,400
keystone we need to know what roles you

00:09:20,140 --> 00:09:27,040
have so that we can turn them into

00:09:21,400 --> 00:09:30,160
something useful so it's it's a it was a

00:09:27,040 --> 00:09:32,350
design there's a browser-based spec your

00:09:30,160 --> 00:09:34,990
user goes off to the service provider

00:09:32,350 --> 00:09:37,120
says give me this resource service

00:09:34,990 --> 00:09:39,790
provider probably a patchy level it

00:09:37,120 --> 00:09:42,580
never actually gets into the press into

00:09:39,790 --> 00:09:44,529
the program Apache will say this is an

00:09:42,580 --> 00:09:47,260
authenticated call you need to go and

00:09:44,529 --> 00:09:50,140
log on to this IDP to give you a browser

00:09:47,260 --> 00:09:52,360
redirect and over to the identity

00:09:50,140 --> 00:09:55,330
provider and you'll get the standard hey

00:09:52,360 --> 00:09:57,580
log on with your password do you want to

00:09:55,330 --> 00:10:00,310
allow Keystone to have access to this

00:09:57,580 --> 00:10:03,760
information assuming you say yes it

00:10:00,310 --> 00:10:05,589
returns the response and we typically

00:10:03,760 --> 00:10:08,770
call the response at least in the sam'l

00:10:05,589 --> 00:10:11,620
case an assertion this is what I DP

00:10:08,770 --> 00:10:14,500
asserts about the user this is what we

00:10:11,620 --> 00:10:18,250
know about it returns the sam'l

00:10:14,500 --> 00:10:20,170
assertions and by the browser redirects

00:10:18,250 --> 00:10:22,380
gets back to the service provider this

00:10:20,170 --> 00:10:24,339
time so as 40 says yep that's cool and

00:10:22,380 --> 00:10:27,760
returns the response that you initially

00:10:24,339 --> 00:10:29,980
asked for that's as it sound more

00:10:27,760 --> 00:10:34,410
specific but all of the providers that

00:10:29,980 --> 00:10:34,410
do this work in a fairly similar flow

00:10:36,870 --> 00:10:42,280
this is a small chunk of what Sam will

00:10:40,900 --> 00:10:44,500
looks like and if you can't read the

00:10:42,280 --> 00:10:45,760
little bits it doesn't matter it's just

00:10:44,500 --> 00:10:49,570
this is what happens when you let

00:10:45,760 --> 00:10:51,820
committees design XML specs that is a

00:10:49,570 --> 00:10:59,260
two item list and a key value pair in

00:10:51,820 --> 00:11:01,450
XML it's yeah so it contains obviously

00:10:59,260 --> 00:11:04,150
you can see in hard you've got two roles

00:11:01,450 --> 00:11:06,700
it's got which is your authorization

00:11:04,150 --> 00:11:09,320
ladder and it's got so named relics

00:11:06,700 --> 00:11:12,270
which is an authentication information

00:11:09,320 --> 00:11:13,980
along with a bunch more of these it's

00:11:12,270 --> 00:11:15,480
got some basic restrictions and like how

00:11:13,980 --> 00:11:18,390
long the sam'l assertion is allowed to

00:11:15,480 --> 00:11:20,930
live for who the service provider is

00:11:18,390 --> 00:11:24,630
allowed to be that sort of thing so

00:11:20,930 --> 00:11:27,230
Apache gets this snippet and passes it

00:11:24,630 --> 00:11:30,030
out and throws it through to Keystone so

00:11:27,230 --> 00:11:34,610
Keystone never needs to see this we

00:11:30,030 --> 00:11:37,470
don't have to deal with XML at all and

00:11:34,610 --> 00:11:38,940
if you wrote a small PHP script that

00:11:37,470 --> 00:11:40,020
dumped out all the environment variables

00:11:38,940 --> 00:11:44,430
you would get something that looked like

00:11:40,020 --> 00:11:46,140
this now in this case the module that I

00:11:44,430 --> 00:11:48,990
was using to pass the sam'l is called

00:11:46,140 --> 00:11:50,610
mod melon that's what the melon prefixes

00:11:48,990 --> 00:11:52,350
for it doesn't always happen like that

00:11:50,610 --> 00:11:55,800
there are other modules that you can use

00:11:52,350 --> 00:11:58,650
it doesn't matter so long as that data

00:11:55,800 --> 00:12:00,360
comes through into keystone so there's a

00:11:58,650 --> 00:12:02,010
lot of information there you don't need

00:12:00,360 --> 00:12:04,440
to read it all but you can sort of see

00:12:02,010 --> 00:12:05,730
that the surname has come through and

00:12:04,440 --> 00:12:08,070
there's a few other important fields

00:12:05,730 --> 00:12:13,770
like the UID which we're probably going

00:12:08,070 --> 00:12:14,700
to want to use so what now we've got all

00:12:13,770 --> 00:12:16,670
that that's coming through an

00:12:14,700 --> 00:12:20,160
environment variables on a per

00:12:16,670 --> 00:12:22,860
authentication request basis and it's

00:12:20,160 --> 00:12:25,170
unique to the IDP how do we convert that

00:12:22,860 --> 00:12:29,460
into something that Keystone is going to

00:12:25,170 --> 00:12:32,310
understand and the answer is essentially

00:12:29,460 --> 00:12:35,070
a mapping table if Keystone's job now or

00:12:32,310 --> 00:12:37,680
in this federated case is going to be to

00:12:35,070 --> 00:12:39,300
take those existing credentials and turn

00:12:37,680 --> 00:12:43,740
them into something local turn them into

00:12:39,300 --> 00:12:47,760
a token that OpenStack can use now

00:12:43,740 --> 00:12:49,140
that's not overly easy you can have the

00:12:47,760 --> 00:12:50,850
case where you've now got multiple

00:12:49,140 --> 00:12:54,600
identity providers all existing within

00:12:50,850 --> 00:12:56,670
the same cloud and each IDP will define

00:12:54,600 --> 00:12:59,940
their own roles that mean something

00:12:56,670 --> 00:13:01,950
specific to that IDP you can have you

00:12:59,940 --> 00:13:04,440
know two IDPs mapped in and each of them

00:13:01,950 --> 00:13:07,110
has a staff role but one of those is

00:13:04,440 --> 00:13:09,510
staff at a 50,000 person company where

00:13:07,110 --> 00:13:11,910
staff gives you pretty much nothing the

00:13:09,510 --> 00:13:13,650
other is staff at a small start-up where

00:13:11,910 --> 00:13:14,910
staff lets you create projects and

00:13:13,650 --> 00:13:16,620
delete users and all sorts of other

00:13:14,910 --> 00:13:19,190
things you can't just wonder one map

00:13:16,620 --> 00:13:19,190
those roles

00:13:19,300 --> 00:13:27,199
so yes our mapping table is a series of

00:13:22,610 --> 00:13:30,680
rules on a per IDP per protocol on the

00:13:27,199 --> 00:13:33,079
IDP basis which says the presence of

00:13:30,680 --> 00:13:37,370
these attributes coming in from the

00:13:33,079 --> 00:13:43,699
remote rdp linked to or create this user

00:13:37,370 --> 00:13:45,320
within Keystone now that's great but we

00:13:43,699 --> 00:13:47,089
have a problem because now these users

00:13:45,320 --> 00:13:48,290
they don't exist in Keystone their

00:13:47,089 --> 00:13:50,149
ephemeral they've been created

00:13:48,290 --> 00:13:51,949
essentially for the purpose of this we

00:13:50,149 --> 00:13:53,449
don't take that data and then store it

00:13:51,949 --> 00:13:56,690
in our database it sort of defeats the

00:13:53,449 --> 00:13:58,760
purpose but the standard way of

00:13:56,690 --> 00:14:02,149
assigning permissions in OpenStack is

00:13:58,760 --> 00:14:05,839
you take your user ID and you assign a

00:14:02,149 --> 00:14:10,519
role to it in a project if the user

00:14:05,839 --> 00:14:12,199
doesn't exist that breaks down so what

00:14:10,519 --> 00:14:13,820
we have and what we're left with is the

00:14:12,199 --> 00:14:18,170
groups and groups have been around in

00:14:13,820 --> 00:14:20,750
Keystone for a while now and a group can

00:14:18,170 --> 00:14:23,029
be assigned permissions in a can be

00:14:20,750 --> 00:14:26,329
assigned roles in a project such that

00:14:23,029 --> 00:14:30,380
all of the users within that group also

00:14:26,329 --> 00:14:32,959
inherit the roles from that group so the

00:14:30,380 --> 00:14:35,480
standard flow would be for administrator

00:14:32,959 --> 00:14:37,670
you create a bunch of groups that make

00:14:35,480 --> 00:14:41,120
sense and you assign the roles to them

00:14:37,670 --> 00:14:43,940
and what we're trying to do then is map

00:14:41,120 --> 00:14:46,310
these ephemeral the sort of faith users

00:14:43,940 --> 00:14:48,800
that are coming in from the not fate

00:14:46,310 --> 00:14:51,980
they just exist externally map those

00:14:48,800 --> 00:14:58,959
users into the groups so that we can get

00:14:51,980 --> 00:15:02,660
rolls out of them so to do that mapping

00:14:58,959 --> 00:15:06,949
we get things that look like this that's

00:15:02,660 --> 00:15:09,680
one JSON packet or one Jason segment

00:15:06,949 --> 00:15:11,449
just sort of split into a list of rules

00:15:09,680 --> 00:15:14,470
and each rule is dictionary and it

00:15:11,449 --> 00:15:19,100
contains a local part and a remote part

00:15:14,470 --> 00:15:21,529
so in this case we're looking for this

00:15:19,100 --> 00:15:25,010
rule matches you need to have coming in

00:15:21,529 --> 00:15:27,740
from the IDP and I've stripped out the

00:15:25,010 --> 00:15:30,170
melon prefix it has to have the natra

00:15:27,740 --> 00:15:32,510
beaut of a given name a surname a UID

00:15:30,170 --> 00:15:33,020
and it has to have a role and role has

00:15:32,510 --> 00:15:34,850
to match

00:15:33,020 --> 00:15:37,730
laughs and surname has to match lenox

00:15:34,850 --> 00:15:39,320
that's a pretty useless rule in a real

00:15:37,730 --> 00:15:41,150
sort of production system but you know

00:15:39,320 --> 00:15:44,660
it works for what we've had in the

00:15:41,150 --> 00:15:46,730
previous two slides if all of those

00:15:44,660 --> 00:15:49,820
things are present then on the local

00:15:46,730 --> 00:15:52,310
side we construct the user and the

00:15:49,820 --> 00:15:54,680
format string is essentially pull that

00:15:52,310 --> 00:15:56,450
information out of remote so zero will

00:15:54,680 --> 00:15:58,670
map to given name one more lap to

00:15:56,450 --> 00:16:01,910
surname that's how it construction local

00:15:58,670 --> 00:16:03,980
user data and importantly a list of

00:16:01,910 --> 00:16:07,730
groups because your groups already exist

00:16:03,980 --> 00:16:11,420
they do exist in Keystone with that user

00:16:07,730 --> 00:16:13,760
and group information we're at exactly

00:16:11,420 --> 00:16:15,110
the same point as we would be had we

00:16:13,760 --> 00:16:17,690
pulled that information out of the

00:16:15,110 --> 00:16:19,690
database so you take that information

00:16:17,690 --> 00:16:22,640
and your son your start assigning roles

00:16:19,690 --> 00:16:24,920
that goes into your token the rest of

00:16:22,640 --> 00:16:35,860
openstack doesn't have a clue how your

00:16:24,920 --> 00:16:38,930
user actually authenticated okay this is

00:16:35,860 --> 00:16:41,330
some of the more depths of how you

00:16:38,930 --> 00:16:43,610
access all of that information and how

00:16:41,330 --> 00:16:46,640
you would go about setting it up you

00:16:43,610 --> 00:16:48,770
need to create an IDP everything I'm

00:16:46,640 --> 00:16:51,170
talking about is done under the OS

00:16:48,770 --> 00:16:54,490
Federation extension with in keystone

00:16:51,170 --> 00:16:59,000
and that's where the prefix comes from

00:16:54,490 --> 00:17:01,100
you create an IDP you need to create a

00:16:59,000 --> 00:17:04,490
mapping for all of those environment

00:17:01,100 --> 00:17:08,150
variables through to Keystone and you

00:17:04,490 --> 00:17:10,670
assign that mapping / IDP per protocol

00:17:08,150 --> 00:17:12,380
so what that means is your IDP is your

00:17:10,670 --> 00:17:14,270
external provider it could be google it

00:17:12,380 --> 00:17:16,790
could be your enterprise and then the

00:17:14,270 --> 00:17:19,640
protocol is the way that that provider

00:17:16,790 --> 00:17:21,620
talks to you so your protocol could be

00:17:19,640 --> 00:17:24,050
sam'l adverb open idea I've mentioned

00:17:21,620 --> 00:17:26,150
already so you can have multiple

00:17:24,050 --> 00:17:29,660
protocols per IDP but the mapping

00:17:26,150 --> 00:17:31,400
easiest per protocol and then when you

00:17:29,660 --> 00:17:34,910
want to get a token you have to come to

00:17:31,400 --> 00:17:38,930
this longer string and get it specific

00:17:34,910 --> 00:17:39,890
to that off type so in a standard flow

00:17:38,930 --> 00:17:43,160
it means we're going to have to have

00:17:39,890 --> 00:17:46,120
some discovery of what id or how do i

00:17:43,160 --> 00:17:46,120
log on to this service

00:17:47,049 --> 00:17:55,100
okay so where are we it works it does

00:17:52,309 --> 00:17:56,270
you might have seen there's been some

00:17:55,100 --> 00:17:57,820
press coverage recently particularly

00:17:56,270 --> 00:18:01,010
coming out of CERN and out of rackspace

00:17:57,820 --> 00:18:04,250
about the federated identities they've

00:18:01,010 --> 00:18:07,190
got working in the CERN labs and this is

00:18:04,250 --> 00:18:12,710
what it's all based upon there are some

00:18:07,190 --> 00:18:16,220
caveats to that the main one being ecp

00:18:12,710 --> 00:18:18,230
is a profile of sam'l it did stands very

00:18:16,220 --> 00:18:22,549
enhanced client or proxy which tells you

00:18:18,230 --> 00:18:24,980
nothing about it as I said Sam will is a

00:18:22,549 --> 00:18:26,809
particularly a web based protocol it was

00:18:24,980 --> 00:18:29,179
designed as a web-based it expects you

00:18:26,809 --> 00:18:31,970
to be able to bounce around by over by a

00:18:29,179 --> 00:18:33,200
browser and have links you can click on

00:18:31,970 --> 00:18:36,020
and places for you to enter your

00:18:33,200 --> 00:18:41,270
password that doesn't really work for us

00:18:36,020 --> 00:18:45,470
in most cases so ecp is the same sam'l

00:18:41,270 --> 00:18:47,090
protocol but from a non GUI perspective

00:18:45,470 --> 00:18:50,799
so you can use it from a command line or

00:18:47,090 --> 00:18:50,799
from sort of stored applications

00:18:51,190 --> 00:18:58,640
unfortunately ACP is fairly rare in

00:18:55,309 --> 00:19:01,160
actual production it typically means

00:18:58,640 --> 00:19:03,230
that somebody in the organization has

00:19:01,160 --> 00:19:06,470
already said oh crap sam'l doesn't work

00:19:03,230 --> 00:19:08,600
for our case we need to install ecp so

00:19:06,470 --> 00:19:14,419
unless you've hit that case you probably

00:19:08,600 --> 00:19:21,350
don't have a CP enabled and the client

00:19:14,419 --> 00:19:24,230
side of all of this on the IDP so the

00:19:21,350 --> 00:19:27,380
IDP has to say yes I accept because when

00:19:24,230 --> 00:19:29,299
you can figure a CPU can say you still

00:19:27,380 --> 00:19:31,010
need to do an authentication step so do

00:19:29,299 --> 00:19:32,780
I want to authenticate over basic both

00:19:31,010 --> 00:19:34,730
do I want to authenticate over client

00:19:32,780 --> 00:19:36,140
service within that there are still a

00:19:34,730 --> 00:19:41,270
bunch of different ways you can actually

00:19:36,140 --> 00:19:43,309
authenticate to the IDP and the client

00:19:41,270 --> 00:19:46,190
side of all this is still in review so

00:19:43,309 --> 00:19:48,470
all of those roots I mentioned they work

00:19:46,190 --> 00:19:50,270
in there exist but if you want to use it

00:19:48,470 --> 00:19:54,260
today you're pretty much constructing

00:19:50,270 --> 00:19:55,520
all of those JSON packets yourself in

00:19:54,260 --> 00:19:57,169
the case of CERN they've got a whole

00:19:55,520 --> 00:19:57,720
team there that's whose job is to make

00:19:57,169 --> 00:20:00,180
this stuff

00:19:57,720 --> 00:20:01,440
work they can do it but you know we're

00:20:00,180 --> 00:20:03,540
still filtering through the

00:20:01,440 --> 00:20:08,580
authentication plugins and stuff to have

00:20:03,540 --> 00:20:10,080
a user friendly but what I think is

00:20:08,580 --> 00:20:13,290
interesting from all this is the the

00:20:10,080 --> 00:20:16,410
framework and the mapper given we've now

00:20:13,290 --> 00:20:18,930
got this base we should be able to turn

00:20:16,410 --> 00:20:21,090
pretty much anything that comes in from

00:20:18,930 --> 00:20:22,590
an Apache module and there are a bunch

00:20:21,090 --> 00:20:25,140
of them for just about any sort of

00:20:22,590 --> 00:20:26,490
authentication mechanism you want we can

00:20:25,140 --> 00:20:29,670
turn that into something that makes

00:20:26,490 --> 00:20:31,230
sense in a keystone perspective so we

00:20:29,670 --> 00:20:33,660
can support a couple and then it can be

00:20:31,230 --> 00:20:35,100
up to the end the implementer to figure

00:20:33,660 --> 00:20:43,220
out exactly what protocols that they

00:20:35,100 --> 00:20:45,570
want to implement so the top one the

00:20:43,220 --> 00:20:48,120
anything you can map the top one is of

00:20:45,570 --> 00:20:51,330
is open ID connect that's fairly high on

00:20:48,120 --> 00:20:52,680
our on our priority list there are

00:20:51,330 --> 00:20:53,760
blueprints and I think there are even a

00:20:52,680 --> 00:20:57,960
few reviews going through at the moment

00:20:53,760 --> 00:21:01,140
for working with open ID connect model

00:20:57,960 --> 00:21:04,740
then in the lookup is backs to free IPA

00:21:01,140 --> 00:21:07,230
and Baxter sssd it essentially that you

00:21:04,740 --> 00:21:10,740
do a lot of things like looking up your

00:21:07,230 --> 00:21:13,890
LDAP tables from Apache and pumping all

00:21:10,740 --> 00:21:15,960
that information through which is a huge

00:21:13,890 --> 00:21:18,450
win because for us managing ldap stuff

00:21:15,960 --> 00:21:20,940
in python is a massive bottleneck in a

00:21:18,450 --> 00:21:25,410
pain so if you can get that stuff out

00:21:20,940 --> 00:21:27,570
that's amazing abfab is relatively new

00:21:25,410 --> 00:21:29,640
it's fairly important to a couple of the

00:21:27,570 --> 00:21:33,840
universities and stuff around the

00:21:29,640 --> 00:21:35,880
european area that's slowly progressing

00:21:33,840 --> 00:21:37,560
but the point is you can do pretty much

00:21:35,880 --> 00:21:41,130
anything I mean model of curb is

00:21:37,560 --> 00:21:42,840
kerberos model digest is basic auth they

00:21:41,130 --> 00:21:45,270
don't give you much beyond the user name

00:21:42,840 --> 00:21:46,830
when you authenticate with those but if

00:21:45,270 --> 00:21:48,960
you set up your mapping rules if that's

00:21:46,830 --> 00:21:50,310
all you need you can map that into

00:21:48,960 --> 00:21:54,780
something in keystone and never have

00:21:50,310 --> 00:21:56,510
that user exists but what I think is

00:21:54,780 --> 00:21:59,700
going to be the most interesting one is

00:21:56,510 --> 00:22:02,280
Keystone to Keystone Federation which is

00:21:59,700 --> 00:22:06,030
Keystone acting as an identity provider

00:22:02,280 --> 00:22:08,910
for another Keystone so take for example

00:22:06,030 --> 00:22:09,970
you've got your local your private cloud

00:22:08,910 --> 00:22:12,850
in your company

00:22:09,970 --> 00:22:15,460
and you want to send off to a public

00:22:12,850 --> 00:22:18,520
cloud to do a certain workload you take

00:22:15,460 --> 00:22:20,260
your private clouds token you send that

00:22:18,520 --> 00:22:22,750
to the public cloud and get a new token

00:22:20,260 --> 00:22:24,700
that lets you work in that cloud without

00:22:22,750 --> 00:22:26,890
ever having to go back and get new

00:22:24,700 --> 00:22:28,450
credentials get new information they

00:22:26,890 --> 00:22:30,130
they will work together and they will

00:22:28,450 --> 00:22:31,990
recognize each other because again all

00:22:30,130 --> 00:22:35,140
we're doing is mapping rules that exist

00:22:31,990 --> 00:22:38,050
in one key stone into roles that exist

00:22:35,140 --> 00:22:41,470
in another key stone and that's

00:22:38,050 --> 00:22:43,900
essentially the basis for a lot of this

00:22:41,470 --> 00:22:46,750
hybrid cloud promise that has been

00:22:43,900 --> 00:22:48,310
coming but you know has never quite got

00:22:46,750 --> 00:22:50,350
here once you've sort of I think once

00:22:48,310 --> 00:22:53,770
you've got that you start seeing a lot

00:22:50,350 --> 00:22:55,420
more single login working across

00:22:53,770 --> 00:22:58,450
multiple clouds that are sort of linked

00:22:55,420 --> 00:23:00,460
together so i think that's that's

00:22:58,450 --> 00:23:06,910
probably the most sort of exciting of

00:23:00,460 --> 00:23:09,490
where this is going um so as all

00:23:06,910 --> 00:23:12,400
OpenStack products there's a lot of

00:23:09,490 --> 00:23:15,250
fingers in this pie particular mention

00:23:12,400 --> 00:23:17,440
from this list are the team at CERN and

00:23:15,250 --> 00:23:21,070
the teen at the team at the University

00:23:17,440 --> 00:23:22,450
of Kent they've done a lot of probably

00:23:21,070 --> 00:23:26,920
most of the design and implementation

00:23:22,450 --> 00:23:28,390
work around Federation and obviously the

00:23:26,920 --> 00:23:30,130
CERN guys are actually trying to put

00:23:28,390 --> 00:23:40,440
this into production as quick as

00:23:30,130 --> 00:23:40,440
possible that's me I'm around for the

00:23:45,400 --> 00:23:47,460

YouTube URL: https://www.youtube.com/watch?v=M2KOzgMx2tI


