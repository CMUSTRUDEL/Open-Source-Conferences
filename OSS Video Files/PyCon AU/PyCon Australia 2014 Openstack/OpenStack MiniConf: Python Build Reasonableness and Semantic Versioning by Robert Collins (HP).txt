Title: OpenStack MiniConf: Python Build Reasonableness and Semantic Versioning by Robert Collins (HP)
Publication date: 2014-08-11
Playlist: PyCon Australia 2014 Openstack
Description: 
	PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:14,870 --> 00:00:27,090
before our next speaker a couple of

00:00:24,570 --> 00:00:29,820
housekeeping things lunches catered

00:00:27,090 --> 00:00:33,570
today just there's a pen and a half

00:00:29,820 --> 00:00:36,560
break go find somewhere to grab some

00:00:33,570 --> 00:00:38,489
food and importantly this evening

00:00:36,560 --> 00:00:42,000
dinners we've got a bunch of

00:00:38,489 --> 00:00:44,100
reservations made but you need to put

00:00:42,000 --> 00:00:47,010
your name down for one of them or else

00:00:44,100 --> 00:00:49,640
the reservations we can't sort so if you

00:00:47,010 --> 00:00:51,690
go to the pine cone website and then to

00:00:49,640 --> 00:00:53,070
under the program there's a social

00:00:51,690 --> 00:00:54,949
events page and you can put your name

00:00:53,070 --> 00:00:57,859
down there it might be cool if we

00:00:54,949 --> 00:01:00,300
actually had a couple of tables for

00:00:57,859 --> 00:01:02,879
openstack people so if anyone's had a

00:01:00,300 --> 00:01:04,710
look at that list and notice any way of

00:01:02,879 --> 00:01:07,740
good to recommend feel free to shout

00:01:04,710 --> 00:01:10,770
that out otherwise do put your name down

00:01:07,740 --> 00:01:14,640
or else you might struggle to find

00:01:10,770 --> 00:01:18,439
somewhere to eat we've got a couple more

00:01:14,640 --> 00:01:18,439
minutes before the next off begins

00:07:15,340 --> 00:07:18,890
all right we'll get started with our

00:07:17,900 --> 00:07:21,260
next speaker

00:07:18,890 --> 00:07:23,090
our next speaker is Robert Collins who's

00:07:21,260 --> 00:07:26,390
going to be talking about Python build

00:07:23,090 --> 00:07:28,250
reasonableness Robert works for HP and

00:07:26,390 --> 00:07:30,140
lives in New Zealand he didn't give me a

00:07:28,250 --> 00:07:33,380
buyer so I can say anything about him

00:07:30,140 --> 00:07:38,230
and it will be true however I'll leave

00:07:33,380 --> 00:07:38,230
him to give his talk and said

00:07:52,520 --> 00:07:57,780
so at this point I guess we do the mic

00:07:54,750 --> 00:08:04,590
check and see whether I'm yep

00:07:57,780 --> 00:08:06,930
everyone's happy admit okay so PBR is a

00:08:04,590 --> 00:08:10,229
kind of interesting project and I think

00:08:06,930 --> 00:08:11,759
the best way to lead into it is to get

00:08:10,229 --> 00:08:15,720
my mouse in the right window so things

00:08:11,759 --> 00:08:18,120
work so I think it was in LCA 2006 where

00:08:15,720 --> 00:08:20,639
Anthony Baxter described just do tools

00:08:18,120 --> 00:08:22,860
and setup tools as very clever people

00:08:20,639 --> 00:08:24,840
very clever code and then very very

00:08:22,860 --> 00:08:27,050
clever code written by very clever

00:08:24,840 --> 00:08:31,050
people which no one else can understand

00:08:27,050 --> 00:08:33,659
and it turns out that well opens neck

00:08:31,050 --> 00:08:35,969
needs to use that and we've got lots and

00:08:33,659 --> 00:08:36,959
lots of fairly straightforward code but

00:08:35,969 --> 00:08:39,930
we've got a very complex environment

00:08:36,959 --> 00:08:41,940
it's distributed its concurrent

00:08:39,930 --> 00:08:44,520
everything that can go wrong in terms of

00:08:41,940 --> 00:08:49,250
making a environment hard to debug we've

00:08:44,520 --> 00:08:53,339
got all of that and dozens of projects

00:08:49,250 --> 00:08:54,810
and every single one of them a few years

00:08:53,339 --> 00:08:57,990
ago now every single one of them had

00:08:54,810 --> 00:09:01,620
exactly the same code in their set up

00:08:57,990 --> 00:09:04,110
the pipe and every time we found a bug

00:09:01,620 --> 00:09:06,209
it would take weeks to fix it because it

00:09:04,110 --> 00:09:08,279
had to roll it one project after another

00:09:06,209 --> 00:09:10,140
after another after another wait for

00:09:08,279 --> 00:09:14,640
everyone to approve them and then you

00:09:10,140 --> 00:09:17,339
can finally get get on with your day so

00:09:14,640 --> 00:09:19,020
there's a fairly standard pattern when

00:09:17,339 --> 00:09:23,750
you run into the sort of thing you

00:09:19,020 --> 00:09:27,870
refactor all right bring it all together

00:09:23,750 --> 00:09:32,490
one place consistent glue everything

00:09:27,870 --> 00:09:36,240
solved no more problems well maybe

00:09:32,490 --> 00:09:39,680
there's a couple of little quirks she

00:09:36,240 --> 00:09:45,480
did I just skip I did I'm terrible sorry

00:09:39,680 --> 00:09:48,060
so anyway we brought in PBR and it

00:09:45,480 --> 00:09:51,899
brought everything together it also

00:09:48,060 --> 00:09:53,430
added another abstraction layer and what

00:09:51,899 --> 00:09:56,610
problem can't we solve by adding

00:09:53,430 --> 00:09:58,320
abstractions abstractions themselves so

00:09:56,610 --> 00:10:00,300
it's a new project and it's the setup

00:09:58,320 --> 00:10:02,310
tools plugin so this is the point where

00:10:00,300 --> 00:10:03,930
we now have to write code that interacts

00:10:02,310 --> 00:10:05,270
with very very clever code written by

00:10:03,930 --> 00:10:07,610
very clever people and make it

00:10:05,270 --> 00:10:10,580
work across dozens of projects without

00:10:07,610 --> 00:10:13,760
fail and it also has to work for a

00:10:10,580 --> 00:10:15,110
fairly complex CI system and it has to

00:10:13,760 --> 00:10:16,310
work for distributors who are just

00:10:15,110 --> 00:10:17,810
dripping it and distribution and

00:10:16,310 --> 00:10:18,890
maintaining it for years and years and

00:10:17,810 --> 00:10:20,450
years and years and years because

00:10:18,890 --> 00:10:21,950
there's some crazy people out there and

00:10:20,450 --> 00:10:26,720
it has to work for people who are

00:10:21,950 --> 00:10:27,350
deploying track every day and yeah it's

00:10:26,720 --> 00:10:29,960
fun

00:10:27,350 --> 00:10:31,280
but the key thing about it from an open

00:10:29,960 --> 00:10:33,950
statement is because every single

00:10:31,280 --> 00:10:38,630
overset project uses it it's got huge

00:10:33,950 --> 00:10:48,560
leverage for fixing things so I am

00:10:38,630 --> 00:10:50,810
jumping all over the place I'm sorry

00:10:48,560 --> 00:10:54,640
about this while I find out what the

00:10:50,810 --> 00:11:00,490
hell is going on yeah yeah that slide

00:10:54,640 --> 00:11:00,490
that's it wasn't entirely missing slime

00:11:02,410 --> 00:11:07,390
next time use a presentation tool of use

00:11:05,060 --> 00:11:07,390
before

00:11:09,280 --> 00:11:14,870
so anecdotally within HP everything runs

00:11:13,010 --> 00:11:16,820
on PowerPoint and I just can't stomach

00:11:14,870 --> 00:11:20,360
that and I've been using LibreOffice to

00:11:16,820 --> 00:11:22,850
survive in the corporate environment and

00:11:20,360 --> 00:11:24,830
my soul is dying so I needed to find

00:11:22,850 --> 00:11:26,690
something else that could kind of bridge

00:11:24,830 --> 00:11:28,160
that gap and reveal jeaious has been a

00:11:26,690 --> 00:11:28,640
shiny thing for a while so I was like

00:11:28,160 --> 00:11:31,010
okay

00:11:28,640 --> 00:11:32,900
it's time to dive in and make a theme

00:11:31,010 --> 00:11:36,200
that's kind of got the HP colors and

00:11:32,900 --> 00:11:37,850
maybe the fonts and that's why I was

00:11:36,200 --> 00:11:44,300
writing the actual content of my slides

00:11:37,850 --> 00:11:46,220
this morning last bit anyway so the key

00:11:44,300 --> 00:11:48,080
thing I think for PBR it's a Python

00:11:46,220 --> 00:11:51,590
project anyone can use it for any Python

00:11:48,080 --> 00:11:54,350
project as long as you use git for your

00:11:51,590 --> 00:11:56,840
source code and you're able to depend on

00:11:54,350 --> 00:11:59,300
a fairly recent pet some of the stuff it

00:11:56,840 --> 00:12:01,480
does for installation confuse but there

00:11:59,300 --> 00:12:04,310
were genuine bugs and older people and

00:12:01,480 --> 00:12:10,870
it's just best to say use a recent pip

00:12:04,310 --> 00:12:14,090
if you're going to use purple so is that

00:12:10,870 --> 00:12:18,230
code block the HD visible it looks like

00:12:14,090 --> 00:12:21,830
it's alright so that just says pythons

00:12:18,230 --> 00:12:25,340
ease of the pie kissed and I suspect

00:12:21,830 --> 00:12:28,430
it's clamped to the yeah okay so the CSS

00:12:25,340 --> 00:12:32,570
is tweaking so one of the things we

00:12:28,430 --> 00:12:35,720
found old OpenStack ran with those tests

00:12:32,570 --> 00:12:37,670
and OpenStack as a whole wanted to move

00:12:35,720 --> 00:12:38,870
away from that for a few reasons but as

00:12:37,670 --> 00:12:40,760
they moved away from it

00:12:38,870 --> 00:12:42,830
they found that everyone got terribly

00:12:40,760 --> 00:12:44,690
terribly confused that brought in a

00:12:42,830 --> 00:12:46,640
wrapper around those tests which was a

00:12:44,690 --> 00:12:48,320
shell script and it wasn't talks and

00:12:46,640 --> 00:12:52,070
then ended up their thing being wrapped

00:12:48,320 --> 00:12:54,080
talks and we had at one point I think

00:12:52,070 --> 00:12:57,020
seven or eight months worth a little

00:12:54,080 --> 00:12:59,420
different this is what you should run

00:12:57,020 --> 00:13:01,400
answers being run concurrently by people

00:12:59,420 --> 00:13:02,900
and every time someone changed something

00:13:01,400 --> 00:13:05,710
only something that yes everyone's

00:13:02,900 --> 00:13:05,710
caught up now

00:13:06,380 --> 00:13:13,980
yeah the answer was no they have so

00:13:10,250 --> 00:13:15,390
setup I test will now run whatever the

00:13:13,980 --> 00:13:16,530
standard is for testing in that

00:13:15,390 --> 00:13:18,990
particular project

00:13:16,530 --> 00:13:20,130
it doesn't call into talks so if you're

00:13:18,990 --> 00:13:21,810
under see that the virtual in was

00:13:20,130 --> 00:13:22,770
something else you do that around it but

00:13:21,810 --> 00:13:25,320
you don't need to know what the actual

00:13:22,770 --> 00:13:29,460
specific test run of the vet project

00:13:25,320 --> 00:13:31,680
uses it was anymore and the git

00:13:29,460 --> 00:13:33,990
integration is a hard requirement but

00:13:31,680 --> 00:13:35,430
it's it's got some benefits so it

00:13:33,990 --> 00:13:37,500
ultimately picks up all the version

00:13:35,430 --> 00:13:40,920
files and your tree puts them into your

00:13:37,500 --> 00:13:43,230
setup and into your tab all it scans the

00:13:40,920 --> 00:13:45,810
history builds a change log and a fairly

00:13:43,230 --> 00:13:47,700
an offensive format it may not be the

00:13:45,810 --> 00:13:49,860
perfect one but it works for all of the

00:13:47,700 --> 00:13:51,780
open set projects and it creates an

00:13:49,860 --> 00:13:52,860
author's file with the name of all of

00:13:51,780 --> 00:13:54,870
the authors of the contribute of the

00:13:52,860 --> 00:13:56,520
project so you don't need to say thank

00:13:54,870 --> 00:13:57,900
you for your patch now I'm going to go

00:13:56,520 --> 00:13:59,580
and manually do this file and see if

00:13:57,900 --> 00:14:02,160
you're already in a tree sorted in my

00:13:59,580 --> 00:14:05,630
current locale just to find you know you

00:14:02,160 --> 00:14:09,360
just forget about all of that goes away

00:14:05,630 --> 00:14:11,100
and when you push up to pi PI one of the

00:14:09,360 --> 00:14:13,020
things I have to used to have to do for

00:14:11,100 --> 00:14:15,360
my projects was manually create a little

00:14:13,020 --> 00:14:17,040
bit of code that took up a readme file I

00:14:15,360 --> 00:14:18,630
had in my tree and put that into the

00:14:17,040 --> 00:14:20,700
long description so that when you go to

00:14:18,630 --> 00:14:23,610
the pi pi page you see something other

00:14:20,700 --> 00:14:26,580
than project name tarball which isn't a

00:14:23,610 --> 00:14:32,460
very friendly or useful experience did

00:14:26,580 --> 00:14:34,320
you want you read me there we use Fink's

00:14:32,460 --> 00:14:35,730
across the board and OpenStack and again

00:14:34,320 --> 00:14:37,350
this is one of the places where we had

00:14:35,730 --> 00:14:39,210
slightly different glue turning up and

00:14:37,350 --> 00:14:42,060
place after place after place and

00:14:39,210 --> 00:14:44,280
there's some stubs you need to create to

00:14:42,060 --> 00:14:45,930
your API Docs and sphynx um PVR knows

00:14:44,280 --> 00:14:48,960
about that and can generate those

00:14:45,930 --> 00:14:51,210
automatically and it turns on man page

00:14:48,960 --> 00:14:53,120
output again because we've got such a

00:14:51,210 --> 00:14:55,230
close relationship with distributors

00:14:53,120 --> 00:15:01,620
having man pages for all of our things

00:14:55,230 --> 00:15:02,970
kind of useful and this pip thing this

00:15:01,620 --> 00:15:06,600
is another case we've got this

00:15:02,970 --> 00:15:10,950
redundancy so every and it's at two

00:15:06,600 --> 00:15:13,110
levels when you want to use easy install

00:15:10,950 --> 00:15:15,420
you've got to list your dependencies in

00:15:13,110 --> 00:15:16,010
one place when you want to use purp you

00:15:15,420 --> 00:15:19,750
have to

00:15:16,010 --> 00:15:21,860
this them in a different place and

00:15:19,750 --> 00:15:23,330
that's so that's one level so we

00:15:21,860 --> 00:15:25,370
consolidate that and we just have a

00:15:23,330 --> 00:15:28,610
requirement stop text file or a test

00:15:25,370 --> 00:15:30,590
requirement stop text and maybe a Python

00:15:28,610 --> 00:15:32,180
version specific one but you put the

00:15:30,590 --> 00:15:35,150
requirement in once and it applies to

00:15:32,180 --> 00:15:36,860
both perf an easy install fantastic but

00:15:35,150 --> 00:15:39,200
the second place we've got redundancy is

00:15:36,860 --> 00:15:40,750
that we didn't have 20 30 40 I don't

00:15:39,200 --> 00:15:43,280
know how many projects were up to now

00:15:40,750 --> 00:15:45,530
all of which have slightly different

00:15:43,280 --> 00:15:47,060
requirements files we haven't fixed that

00:15:45,530 --> 00:15:49,100
one yet at the moment what we do is we

00:15:47,060 --> 00:15:50,450
write it into a global requirements in

00:15:49,100 --> 00:15:52,070
the separate tree and then we go to all

00:15:50,450 --> 00:15:54,950
the other ones and we copy it out I

00:15:52,070 --> 00:16:02,810
don't think that's sustainable we don't

00:15:54,950 --> 00:16:04,910
have a better answer yet I'm very sorry

00:16:02,810 --> 00:16:06,980
about this um sore throat I was

00:16:04,910 --> 00:16:09,320
absolutely fine yesterday morning and I

00:16:06,980 --> 00:16:10,910
blame my daughter who my wife has told

00:16:09,320 --> 00:16:12,590
me is currently second crook so I know

00:16:10,910 --> 00:16:14,120
it's coming down the line for me and

00:16:12,590 --> 00:16:20,150
I'll try not to give her the NEA you I

00:16:14,120 --> 00:16:21,590
suggest you don't kiss me so versioning

00:16:20,150 --> 00:16:22,820
this is actually the but I really wanted

00:16:21,590 --> 00:16:24,950
to talk about this what the rest was

00:16:22,820 --> 00:16:28,730
just giving you background I hope it

00:16:24,950 --> 00:16:32,600
wasn't too boring with current releases

00:16:28,730 --> 00:16:33,170
of PBR when you do Python set up a PI s

00:16:32,600 --> 00:16:34,880
test

00:16:33,170 --> 00:16:37,610
it creates a version number for you so

00:16:34,880 --> 00:16:39,980
if the last tag you haven't get was one

00:16:37,610 --> 00:16:42,110
point three point two it will give you a

00:16:39,980 --> 00:16:45,800
version like one point three point two

00:16:42,110 --> 00:16:47,990
point five point G and a bit of good

00:16:45,800 --> 00:16:50,330
hash and what this is really saying is

00:16:47,990 --> 00:16:52,760
is v met after that tag and this is the

00:16:50,330 --> 00:16:54,500
hash of the local tree so for a local

00:16:52,760 --> 00:16:58,210
developer you can just do a commit

00:16:54,500 --> 00:16:58,210
install a new version that will work

00:16:59,020 --> 00:17:05,030
those version numbers are not it's not

00:17:03,590 --> 00:17:07,070
it doesn't really support you in

00:17:05,030 --> 00:17:09,140
creating new version numbers it just

00:17:07,070 --> 00:17:10,430
gives you a version that is reasonably

00:17:09,140 --> 00:17:14,720
unique for what you've got in front of

00:17:10,430 --> 00:17:18,199
you but let's talk about consistency for

00:17:14,720 --> 00:17:20,660
a second most projects have one version

00:17:18,199 --> 00:17:22,720
scheme right you know I'm going to do

00:17:20,660 --> 00:17:26,290
semantic versioning or I'm going to do

00:17:22,720 --> 00:17:28,690
odd-numbered releases even numbers dev

00:17:26,290 --> 00:17:30,790
1.3 point you know that's a day of 1.4

00:17:28,690 --> 00:17:34,330
as a release what I'm gonna do years and

00:17:30,790 --> 00:17:37,810
months 2010 . 2 is the next release if

00:17:34,330 --> 00:17:41,200
you're in 2010 my time machine works

00:17:37,810 --> 00:17:43,510
backwards the lovely thing about opens

00:17:41,200 --> 00:17:46,900
there because we do two of these at once

00:17:43,510 --> 00:17:50,860
our API servers do year month based

00:17:46,900 --> 00:17:52,600
versioning so first component is year

00:17:50,860 --> 00:17:55,450
second components month third component

00:17:52,600 --> 00:17:58,330
is a serial number and there are clients

00:17:55,450 --> 00:18:01,420
and libraries do something that

00:17:58,330 --> 00:18:09,400
currently approximates cinder and is

00:18:01,420 --> 00:18:13,650
meant to be simpler so yeah Simba who

00:18:09,400 --> 00:18:17,440
doesn't know it's Emperor's okay so

00:18:13,650 --> 00:18:19,510
Simba is a set of rules for when you

00:18:17,440 --> 00:18:21,070
should change your version numbers so

00:18:19,510 --> 00:18:23,710
that people who are depending on your

00:18:21,070 --> 00:18:26,290
API can make really well informed

00:18:23,710 --> 00:18:28,870
choices about what how they depend so

00:18:26,290 --> 00:18:32,530
for example if you're in a silver world

00:18:28,870 --> 00:18:34,060
and you should never just pick up a new

00:18:32,530 --> 00:18:35,770
major version because you know that any

00:18:34,060 --> 00:18:37,540
major version that comes out is going to

00:18:35,770 --> 00:18:37,810
have backwards and compatibility isn't

00:18:37,540 --> 00:18:40,420
it

00:18:37,810 --> 00:18:42,460
either they deleted deprecated functions

00:18:40,420 --> 00:18:44,290
or they've changed the part of the

00:18:42,460 --> 00:18:47,410
contract in a way that won't work it

00:18:44,290 --> 00:18:49,210
might not affect you but it might but

00:18:47,410 --> 00:18:51,370
equally if you stay with the same major

00:18:49,210 --> 00:18:52,960
version number everything will work and

00:18:51,370 --> 00:18:54,670
will never break assuming that the

00:18:52,960 --> 00:18:57,400
authors have actually implemented this

00:18:54,670 --> 00:19:02,320
in the assessment about changes

00:18:57,400 --> 00:19:04,240
correctly mistakes happen so we adopted

00:19:02,320 --> 00:19:07,090
semantic versioning a couple of years

00:19:04,240 --> 00:19:09,310
ago in OpenStack and it didn't work for

00:19:07,090 --> 00:19:12,550
us we found out that there was some

00:19:09,310 --> 00:19:18,520
friction so we created an open stack

00:19:12,550 --> 00:19:25,210
theory ins of cinder specifically about

00:19:18,520 --> 00:19:29,590
distributions and the pre-release labels

00:19:25,210 --> 00:19:31,420
and and build labels are all about being

00:19:29,590 --> 00:19:32,770
able to put binaries onto people's

00:19:31,420 --> 00:19:34,450
machines and be able to tell where they

00:19:32,770 --> 00:19:37,290
came from and whether or not they'll

00:19:34,450 --> 00:19:37,290
work

00:19:38,690 --> 00:19:46,499
however even with that we still have

00:19:42,449 --> 00:19:49,049
some issues firstly current PBR this is

00:19:46,499 --> 00:19:51,449
all about current PBR if you have a tag

00:19:49,049 --> 00:19:53,940
one point three point two in your tree

00:19:51,449 --> 00:19:57,690
and you do a development build you'd

00:19:53,940 --> 00:20:00,149
want a version that looks like an alpha

00:19:57,690 --> 00:20:02,429
or a beta it's not going to look like a

00:20:00,149 --> 00:20:05,309
full release to someone who is tracking

00:20:02,429 --> 00:20:13,379
natural releases so that's why what we

00:20:05,309 --> 00:20:16,049
do is we create a full release our

00:20:13,379 --> 00:20:17,849
developers we got I think it's over two

00:20:16,049 --> 00:20:19,859
thousand contributors now to OpenStack

00:20:17,849 --> 00:20:22,649
and about fifteen hundred they're active

00:20:19,859 --> 00:20:24,209
in the last six months so this is a huge

00:20:22,649 --> 00:20:27,149
number of people it's a smaller number

00:20:24,209 --> 00:20:28,889
of people doing releases but even so as

00:20:27,149 --> 00:20:30,569
I said dozens of projects so you're

00:20:28,889 --> 00:20:32,549
probably looking at 50 old people who

00:20:30,569 --> 00:20:34,859
need to be trained on doing releases to

00:20:32,549 --> 00:20:36,809
make sure releases are done properly and

00:20:34,859 --> 00:20:39,269
with the CI and infrastructure that open

00:20:36,809 --> 00:20:42,239
snake has doing a release is doing a tag

00:20:39,269 --> 00:20:44,279
and a push so it's actually very easy to

00:20:42,239 --> 00:20:48,959
get wrong because there's not a lot to

00:20:44,279 --> 00:20:51,409
do to make it happen and in pit 440 this

00:20:48,959 --> 00:20:54,929
is not a valid pit 440 version string

00:20:51,409 --> 00:20:59,539
this yeah it's not a version sorry go

00:20:54,929 --> 00:20:59,539
home I mean you can is it now

00:21:04,639 --> 00:21:15,809
this wasn't a valid version string that

00:21:13,080 --> 00:21:18,000
is actually the valid version string was

00:21:15,809 --> 00:21:29,419
the only valid version string may now be

00:21:18,000 --> 00:21:29,419
obsolete okay fine Wow

00:21:32,389 --> 00:21:39,870
ego sir Billa both less scratchy and the

00:21:36,090 --> 00:21:40,320
mouse out of the way so what else is

00:21:39,870 --> 00:21:42,629
there

00:21:40,320 --> 00:21:44,309
continual deployment if you are

00:21:42,629 --> 00:21:46,320
deploying from track you want a

00:21:44,309 --> 00:21:47,700
monotonic version every time you get

00:21:46,320 --> 00:21:49,110
another build of track you want to make

00:21:47,700 --> 00:21:52,759
sure it's going to be higher than your

00:21:49,110 --> 00:21:52,759
local version sold in stores properly

00:21:55,580 --> 00:21:59,669
development versions you just want to

00:21:58,320 --> 00:22:03,090
install what's local so you want a

00:21:59,669 --> 00:22:04,529
different version number and you're

00:22:03,090 --> 00:22:05,669
going to be forcing it you're not going

00:22:04,529 --> 00:22:07,889
to be right depending on the package

00:22:05,669 --> 00:22:09,360
repository like deep package for rpm to

00:22:07,889 --> 00:22:13,769
be doing the right version comparisons

00:22:09,360 --> 00:22:16,159
for you problem is that as I've put up

00:22:13,769 --> 00:22:19,080
there there's not in Simba there's no

00:22:16,159 --> 00:22:20,669
distinguishing sort order between dev

00:22:19,080 --> 00:22:22,649
versions and alpha versions there's no

00:22:20,669 --> 00:22:24,629
concept about the division as before

00:22:22,649 --> 00:22:28,620
after an alpha there are separate

00:22:24,629 --> 00:22:32,870
timelines and that's a problem

00:22:28,620 --> 00:22:38,759
so we needed to solve that and oh man

00:22:32,870 --> 00:22:42,269
binary packaging everyone reinvents the

00:22:38,759 --> 00:22:44,789
I'll just take an upstream Python estes

00:22:42,269 --> 00:22:49,279
release and i'll put it into my debian

00:22:44,789 --> 00:22:52,169
package or my RPM package differently

00:22:49,279 --> 00:22:54,059
every single time is some little corner

00:22:52,169 --> 00:22:56,820
case they managed to get different I'm

00:22:54,059 --> 00:22:58,320
not saying wrong just different and what

00:22:56,820 --> 00:23:00,360
we're trying to do here is gain is to

00:22:58,320 --> 00:23:01,950
get good answers and get it consistent

00:23:00,360 --> 00:23:03,240
so we can write documentation or we can

00:23:01,950 --> 00:23:06,269
teach lots and lots of different people

00:23:03,240 --> 00:23:08,789
about how it's going to work one

00:23:06,269 --> 00:23:13,019
particular thing is the sort before

00:23:08,789 --> 00:23:15,990
primitive so an alpha release of version

00:23:13,019 --> 00:23:16,559
1.3 point two should come before version

00:23:15,990 --> 00:23:20,399
one point

00:23:16,559 --> 00:23:23,639
three point two in d package you can use

00:23:20,399 --> 00:23:27,090
a tilde to say to lift and to the right

00:23:23,639 --> 00:23:28,769
and this is going to sort before so you

00:23:27,090 --> 00:23:33,029
can write one point three point two

00:23:28,769 --> 00:23:35,129
tilde a one and it's a pre-release of

00:23:33,029 --> 00:23:37,139
one point three point two and RPM I'm

00:23:35,129 --> 00:23:38,970
not aware of any equivalent mechanism or

00:23:37,139 --> 00:23:44,309
hack so we've got some pretty awful

00:23:38,970 --> 00:23:46,440
stuff I'll come back to you later and

00:23:44,309 --> 00:23:49,049
this leads us to the actual we're now

00:23:46,440 --> 00:23:51,990
doing a spec which has been approved in

00:23:49,049 --> 00:23:54,210
Oslo and most of the patches are up for

00:23:51,990 --> 00:23:57,090
us and just percolating through review

00:23:54,210 --> 00:24:01,769
to do semantic versioning support

00:23:57,090 --> 00:24:04,769
directly in PVR so the first thing is oh

00:24:01,769 --> 00:24:07,799
and it's new and it's shiny and it's

00:24:04,769 --> 00:24:09,330
magic and I'm driving this largely

00:24:07,799 --> 00:24:10,769
because I have a bunch of projects that

00:24:09,330 --> 00:24:12,629
currently in beads that are that I want

00:24:10,769 --> 00:24:15,600
to move over to get and I don't want to

00:24:12,629 --> 00:24:17,970
have to go and write new glue to do

00:24:15,600 --> 00:24:19,889
stuff I already do and be Zadar in the

00:24:17,970 --> 00:24:23,909
good world so it's like okay let's do it

00:24:19,889 --> 00:24:26,070
once do it right so the first thing is

00:24:23,909 --> 00:24:28,590
all of these version numbers are not pip

00:24:26,070 --> 00:24:30,539
440 compliant we're going to reject them

00:24:28,590 --> 00:24:32,999
when you try and build a local s test so

00:24:30,539 --> 00:24:42,419
this will avoid bad tags being made we

00:24:32,999 --> 00:24:46,070
hope go on well sure if pitfall for he

00:24:42,419 --> 00:24:46,070
would stop changing this might be easier

00:24:47,779 --> 00:25:00,929
yeah that's yeah so I I'm happy to talk

00:24:56,299 --> 00:25:03,240
modulo throat of course this um

00:25:00,929 --> 00:25:07,110
typically fails if your existing tags

00:25:03,240 --> 00:25:10,230
and just for the rhesus talk pretend no

00:25:07,110 --> 00:25:14,009
no new and new things are fine but I now

00:25:10,230 --> 00:25:15,720
I know it is a delta there but I'm not

00:25:14,009 --> 00:25:17,399
I'm sure that every tag out there isn't

00:25:15,720 --> 00:25:25,070
actually going to beep it for for the

00:25:17,399 --> 00:25:28,370
compliant I hope yeah I love Donald

00:25:25,070 --> 00:25:31,550
so yes so the problem is that we have to

00:25:28,370 --> 00:25:33,950
accept every single version and turn it

00:25:31,550 --> 00:25:35,480
into a semantic version so this to a

00:25:33,950 --> 00:25:36,650
degree this is pitiful for you but it's

00:25:35,480 --> 00:25:37,970
also be able to guarantee that we

00:25:36,650 --> 00:25:41,660
actually understand what that version

00:25:37,970 --> 00:25:44,260
was so that when we output it in the

00:25:41,660 --> 00:25:46,880
current format we do the thing correctly

00:25:44,260 --> 00:25:49,340
and some of these are fairly easy it

00:25:46,880 --> 00:25:50,720
some of them are bit harder I think

00:25:49,340 --> 00:25:52,790
we've got all the code in place but it's

00:25:50,720 --> 00:25:54,620
a horrible power because we wanted to

00:25:52,790 --> 00:25:56,270
keep the dependencies lean we didn't

00:25:54,620 --> 00:25:58,010
want to depend on parsing or something

00:25:56,270 --> 00:25:59,600
in something that's gonna be pulled in

00:25:58,010 --> 00:26:03,910
by easy install when you install your

00:25:59,600 --> 00:26:03,910
package got to keep it very lame

00:26:04,210 --> 00:26:09,050
secondly history scanning we need to do

00:26:07,550 --> 00:26:10,640
a lot more than we count at the moment

00:26:09,050 --> 00:26:12,980
we just figure out how many commits

00:26:10,640 --> 00:26:16,000
since the last tag that's not really

00:26:12,980 --> 00:26:21,920
enough what we need to be able to do is

00:26:16,000 --> 00:26:24,050
instead of generating this new virtus so

00:26:21,920 --> 00:26:26,090
did I I don't know if I explained enough

00:26:24,050 --> 00:26:29,000
about Sylvia I'll touch on that just one

00:26:26,090 --> 00:26:30,920
last little bit Simba has the concept

00:26:29,000 --> 00:26:32,150
that you have a major a minor and a

00:26:30,920 --> 00:26:34,190
patch level and if you're doing

00:26:32,150 --> 00:26:35,720
something that semantically the project

00:26:34,190 --> 00:26:39,440
is the same you change the patch level

00:26:35,720 --> 00:26:41,570
if you're adding some functionality or

00:26:39,440 --> 00:26:42,860
you're deprecating something but you're

00:26:41,570 --> 00:26:45,080
keeping it around anything that people

00:26:42,860 --> 00:26:46,820
actually need to know about you change

00:26:45,080 --> 00:26:48,500
the minor version and if you're breaking

00:26:46,820 --> 00:26:50,330
something so that existing code will

00:26:48,500 --> 00:26:54,290
stop working you change the major

00:26:50,330 --> 00:26:57,170
version so if you've got a commitment to

00:26:54,290 --> 00:27:03,670
PBR that currently generates a version

00:26:57,170 --> 00:27:08,060
of 0.8.1 dev 5 and this is such a commit

00:27:03,670 --> 00:27:10,610
you can now add hitters to it to say

00:27:08,060 --> 00:27:14,690
this is a feature commit so the second

00:27:10,610 --> 00:27:16,070
last line semicolon feature and that

00:27:14,690 --> 00:27:17,510
will automatically update the version

00:27:16,070 --> 00:27:23,930
increment it to give you zero point

00:27:17,510 --> 00:27:27,200
eleven point zero if you put the feature

00:27:23,930 --> 00:27:29,690
does their API break will update the

00:27:27,200 --> 00:27:32,760
major version deprecation updates the

00:27:29,690 --> 00:27:34,290
minor bug fixes update the

00:27:32,760 --> 00:27:36,900
Hach if you don't put the header in at

00:27:34,290 --> 00:27:38,910
all we assume it's a patch and you can

00:27:36,900 --> 00:27:40,500
put multiple comments in there so this

00:27:38,910 --> 00:27:44,400
is meant to be a communication tool as

00:27:40,500 --> 00:27:46,980
well as driving the automation in the

00:27:44,400 --> 00:27:49,350
same way that we currently in the

00:27:46,980 --> 00:27:53,670
OpenStack commit logs we have things

00:27:49,350 --> 00:27:56,010
like doc impact and deploy or impact or

00:27:53,670 --> 00:28:15,750
release impact this is in the same

00:27:56,010 --> 00:28:17,610
subspace so those aren't used all that

00:28:15,750 --> 00:28:22,860
consistently and implementing the

00:28:17,610 --> 00:28:27,960
blueprint doesn't necessary we don't

00:28:22,860 --> 00:28:29,790
have any marker that actually so you you

00:28:27,960 --> 00:28:31,770
could infer from a broader set of things

00:28:29,790 --> 00:28:34,320
but we felt that being really clear

00:28:31,770 --> 00:28:37,130
about this drives this thing is actually

00:28:34,320 --> 00:28:40,650
kind useful in its own right

00:28:37,130 --> 00:28:43,890
particularly since PBR is used by more

00:28:40,650 --> 00:28:46,260
people than just OpenStack and we don't

00:28:43,890 --> 00:28:48,300
necessarily want to enforce the insanity

00:28:46,260 --> 00:28:51,450
that is blueprint process on other

00:28:48,300 --> 00:28:54,000
projects or in small projects there's a

00:28:51,450 --> 00:28:56,640
bit of tension there I think that

00:28:54,000 --> 00:28:58,980
looking and you can we can discuss it

00:28:56,640 --> 00:29:00,480
after this I'm happy to go back and make

00:28:58,980 --> 00:29:02,720
a change to the speak and see what Doug

00:29:00,480 --> 00:29:02,720
says

00:29:05,250 --> 00:29:09,100
but the thing that this gives us that

00:29:07,210 --> 00:29:10,660
I'm really excited about is that you no

00:29:09,100 --> 00:29:11,830
longer need to think about what version

00:29:10,660 --> 00:29:14,800
you're going to release so you can just

00:29:11,830 --> 00:29:17,140
say the top of this patch set you better

00:29:14,800 --> 00:29:18,970
just say Python sell to PI tag release

00:29:17,140 --> 00:29:21,010
and you get a release out with the next

00:29:18,970 --> 00:29:25,360
version calculated out of your history

00:29:21,010 --> 00:29:27,760
so at the moment in triple o we do a

00:29:25,360 --> 00:29:29,410
release of all all of our projects every

00:29:27,760 --> 00:29:31,270
week and that involves looking at

00:29:29,410 --> 00:29:33,310
history to figure out what API breaks if

00:29:31,270 --> 00:29:35,800
any have happened that's the the key

00:29:33,310 --> 00:29:37,450
thing you can't just monotonically

00:29:35,800 --> 00:29:39,130
assume there aren't any and if there are

00:29:37,450 --> 00:29:42,280
some you know obviously that should be a

00:29:39,130 --> 00:29:45,060
big decision to do it but this gives us

00:29:42,280 --> 00:29:48,600
automation to not have to think too hard

00:29:45,060 --> 00:29:51,940
for binary builds will be either query

00:29:48,600 --> 00:29:53,530
setup to get Debian version or an RPM

00:29:51,940 --> 00:29:54,130
version other but note the nine nine

00:29:53,530 --> 00:29:57,310
nine nine

00:29:54,130 --> 00:30:00,510
thing to emulate sort before we drop

00:29:57,310 --> 00:30:05,020
down to a fourth component of the

00:30:00,510 --> 00:30:06,040
version before and silver to emulator

00:30:05,020 --> 00:30:07,690
it's terrible

00:30:06,040 --> 00:30:10,210
I said it would be terrible it really is

00:30:07,690 --> 00:30:12,790
terrible but we think that will work

00:30:10,210 --> 00:30:14,290
well enough that we don't need to think

00:30:12,790 --> 00:30:16,840
about it after we get this done I mean

00:30:14,290 --> 00:30:18,490
it's not it's basically pleasing but

00:30:16,840 --> 00:30:20,050
that's not really the goal of it the

00:30:18,490 --> 00:30:22,690
goal of it is to be reliable and

00:30:20,050 --> 00:30:24,580
automatic and Nix smirking in the corner

00:30:22,690 --> 00:30:27,480
he's going to tell me something I really

00:30:24,580 --> 00:30:27,480
wish I knew a week ago

00:30:34,830 --> 00:30:40,780
one one thing that is this is kind of a

00:30:38,400 --> 00:30:42,850
kind of thing there's a thing in Python

00:30:40,780 --> 00:30:45,040
itself perversion info which is a tuple

00:30:42,850 --> 00:30:48,070
that describes the version of Python

00:30:45,040 --> 00:30:50,320
it's not as rich as silver and it's got

00:30:48,070 --> 00:30:52,660
a couple of differences but we can

00:30:50,320 --> 00:30:54,820
translate semver into that at least for

00:30:52,660 --> 00:30:58,570
releases diversions and are the ones

00:30:54,820 --> 00:30:59,860
which it doesn't quite fit and that some

00:30:58,570 --> 00:31:03,040
projects use that and it's really really

00:30:59,860 --> 00:31:05,980
easy just these two lines in your inner

00:31:03,040 --> 00:31:09,640
PI and PB I will figure it all out for

00:31:05,980 --> 00:31:12,510
you and for the continual deployment

00:31:09,640 --> 00:31:17,170
case I was talking about before that is

00:31:12,510 --> 00:31:20,230
fairly easily solved I managed to delete

00:31:17,170 --> 00:31:23,170
the - - no RC on that didn't I

00:31:20,230 --> 00:31:25,210
so the second one there the difference

00:31:23,170 --> 00:31:27,190
between those two examples is the first

00:31:25,210 --> 00:31:29,230
one is showing the current tag it's an

00:31:27,190 --> 00:31:30,730
alpha release the second one is saying

00:31:29,230 --> 00:31:34,930
hey this is what that would be if it was

00:31:30,730 --> 00:31:36,400
a dev version so essentially you've got

00:31:34,930 --> 00:31:39,280
an alias at the same commit that will

00:31:36,400 --> 00:31:41,410
occur on any actual pre-release tag and

00:31:39,280 --> 00:31:43,960
that means you can get a single timeline

00:31:41,410 --> 00:31:45,250
for continual deployment so you for

00:31:43,960 --> 00:31:47,350
continuous deployment you just ignore

00:31:45,250 --> 00:31:49,810
whether something is now for a beta or

00:31:47,350 --> 00:31:58,690
an RC you'll just say look it's either

00:31:49,810 --> 00:31:59,830
release or it's a dead yeah I realize so

00:31:58,690 --> 00:32:02,080
how many people here are actively

00:31:59,830 --> 00:32:04,030
involved with OpenStack I mean everyone

00:32:02,080 --> 00:32:11,440
knows what it is but who's contributing

00:32:04,030 --> 00:32:13,240
- right and how many is using it right

00:32:11,440 --> 00:32:16,630
and then the rest are just interested I

00:32:13,240 --> 00:32:18,910
presume no hands go up so

00:32:16,630 --> 00:32:20,410
the monotone is working everyone's

00:32:18,910 --> 00:32:24,280
getting them nappin nice and early in

00:32:20,410 --> 00:32:27,610
the morning so to get started PBR it's

00:32:24,280 --> 00:32:29,260
really easy you need a four line five

00:32:27,610 --> 00:32:31,710
line if you want to be able to do dot

00:32:29,260 --> 00:32:36,340
slash sit up top I sit up top I just

00:32:31,710 --> 00:32:45,070
import it call it done put it in get

00:32:36,340 --> 00:32:47,680
obviously yeah and secondly secondly you

00:32:45,070 --> 00:32:50,710
need to have a setup got config file

00:32:47,680 --> 00:32:56,710
which is a declarative form of silica Pi

00:32:50,710 --> 00:32:59,590
there was a project digital D 2 and D 2

00:32:56,710 --> 00:33:02,080
to one that we kind of included and got

00:32:59,590 --> 00:33:03,700
us going with this these days I believe

00:33:02,080 --> 00:33:05,230
we've got to complete three

00:33:03,700 --> 00:33:09,060
implementation of that because it kind

00:33:05,230 --> 00:33:11,890
of petered out once it becomes a

00:33:09,060 --> 00:33:14,620
approved and landed speak and not a trap

00:33:11,890 --> 00:33:17,710
it and not a draft we'll probably have a

00:33:14,620 --> 00:33:18,970
little bit of adjustment to do there's

00:33:17,710 --> 00:33:22,590
really straightforward everything

00:33:18,970 --> 00:33:24,880
essentially Maps directly across and

00:33:22,590 --> 00:33:26,770
this is an example from one of the

00:33:24,880 --> 00:33:29,370
triple o projects off supply config

00:33:26,770 --> 00:33:34,030
which is a little template in thing and

00:33:29,370 --> 00:33:35,950
you can see it yeah it's very little

00:33:34,030 --> 00:33:37,570
dear that's not actually specific to

00:33:35,950 --> 00:33:39,670
this project so we got rid of all of

00:33:37,570 --> 00:33:42,000
that boilerplate that I was talking

00:33:39,670 --> 00:33:42,000
about before

00:33:45,919 --> 00:34:06,959
okay so questions these are made to come

00:33:48,779 --> 00:34:08,940
from you to me yes so the way an alpha

00:34:06,959 --> 00:34:11,190
is done in the OpenStack infrastructure

00:34:08,940 --> 00:34:13,230
is that you tagged over j'en as one

00:34:11,190 --> 00:34:15,750
point three point 2 point 0 a 1 and you

00:34:13,230 --> 00:34:18,750
push that tag up to ferret and Herrick

00:34:15,750 --> 00:34:20,129
then uploads that to pi pi and if that

00:34:18,750 --> 00:34:22,799
hasn't happened you know it doesn't

00:34:20,129 --> 00:34:25,109
really exist now if someone is tracking

00:34:22,799 --> 00:34:27,029
trunk when they pull it down they'll get

00:34:25,109 --> 00:34:30,059
that tag when they run Hester's locally

00:34:27,029 --> 00:34:31,799
or create an alpha s test rather than a

00:34:30,059 --> 00:34:33,779
dear Vesta stand that's in a separate

00:34:31,799 --> 00:34:36,089
time line so they can't actually compare

00:34:33,779 --> 00:34:38,399
visually I mean they can just install it

00:34:36,089 --> 00:34:40,470
directly but if they then wrap that into

00:34:38,399 --> 00:34:42,720
RPM or D package which is what happens

00:34:40,470 --> 00:34:47,460
the versions don't sort in any

00:34:42,720 --> 00:34:58,619
appropriate fashion next maybe got an

00:34:47,460 --> 00:35:03,599
answer for a PM oh good oh yeah I'd love

00:34:58,619 --> 00:35:04,020
to join under that wait we got going

00:35:03,599 --> 00:35:06,529
once

00:35:04,020 --> 00:35:06,529
yes

00:35:21,650 --> 00:35:26,519
so the solution we recommend upstream is

00:35:24,180 --> 00:35:32,869
to never use easy install and to always

00:35:26,519 --> 00:35:36,569
use pip when you do sit up top PI

00:35:32,869 --> 00:35:39,450
install thing if there are dependencies

00:35:36,569 --> 00:35:42,029
of that set up top PI that aren't

00:35:39,450 --> 00:35:43,920
installed locally setup tools goes and

00:35:42,029 --> 00:35:46,859
triggers the easy install code path and

00:35:43,920 --> 00:35:48,569
then downloads with its own

00:35:46,859 --> 00:35:51,630
implementation of a bunch of stuff it

00:35:48,569 --> 00:35:54,450
shouldn't have needed to implement from

00:35:51,630 --> 00:35:56,369
pi PI locally installs it and doesn't

00:35:54,450 --> 00:35:58,410
actually install it locally unpacks in

00:35:56,369 --> 00:36:01,980
the root of the tree you're in adds that

00:35:58,410 --> 00:36:04,769
to your Python path and then chains into

00:36:01,980 --> 00:36:07,490
the actual setup top.i code and that's

00:36:04,769 --> 00:36:10,500
done through the setup requires keyword

00:36:07,490 --> 00:36:14,160
now if you run pip install dot in the

00:36:10,500 --> 00:36:15,750
same situation it will look at your I

00:36:14,160 --> 00:36:18,059
forget the pip number

00:36:15,750 --> 00:36:21,720
metadata that declares declarative

00:36:18,059 --> 00:36:24,710
dependency format which you'll have if

00:36:21,720 --> 00:36:28,400
you've grabbed this off at our ball and

00:36:24,710 --> 00:36:28,400
next got an answer

00:36:35,540 --> 00:36:47,370
it did so no no I you're actually

00:36:44,760 --> 00:36:48,660
slightly wrong there so pip install pip

00:36:47,370 --> 00:36:51,720
and still dot doesn't look at

00:36:48,660 --> 00:36:53,400
requirements text pip install dot is

00:36:51,720 --> 00:36:54,480
looking at the declarative metadata for

00:36:53,400 --> 00:36:57,210
dependencies and one of those

00:36:54,480 --> 00:36:59,820
dependencies says it requires PBR it

00:36:57,210 --> 00:37:03,030
will then install PBR and then you chain

00:36:59,820 --> 00:37:05,700
into the Python into the setup object

00:37:03,030 --> 00:37:06,930
and then the setup object can say oh by

00:37:05,700 --> 00:37:09,240
the way I have a bunch of other

00:37:06,930 --> 00:37:11,490
dependencies and requirement statics can

00:37:09,240 --> 00:37:13,590
be consulted beer for the uncommitted

00:37:11,490 --> 00:37:15,480
case for the committed case sorry for

00:37:13,590 --> 00:37:16,950
the it's just in case you've got all the

00:37:15,480 --> 00:37:19,080
metadata there already and pip will grab

00:37:16,950 --> 00:37:20,220
all of them straight up but it doesn't

00:37:19,080 --> 00:37:22,280
actually know about the requirements dot

00:37:20,220 --> 00:37:24,900
text file that's what we use is our

00:37:22,280 --> 00:37:27,240
authoring tool it all gets reflected

00:37:24,900 --> 00:37:31,130
into either explicitly today that or a

00:37:27,240 --> 00:37:31,130
dependency list on the set of object

00:37:34,670 --> 00:37:42,330
right right so basically setup tools bad

00:37:39,330 --> 00:37:45,750
tip good does I mean I don't know how

00:37:42,330 --> 00:37:50,220
much detail live a code written by very

00:37:45,750 --> 00:37:54,230
very clever people yes yes I mean does

00:37:50,220 --> 00:37:54,230
that answer your question a yep

00:38:03,130 --> 00:38:07,780
so the top of the stack is women so

00:38:06,280 --> 00:38:11,740
there's a bunch of refactoring stuff

00:38:07,780 --> 00:38:15,369
that has been landing and is in 0/10 the

00:38:11,740 --> 00:38:19,180
actual meet of this I hope will be 0 11

00:38:15,369 --> 00:38:20,349
it it's some of us passing ci other ones

00:38:19,180 --> 00:38:22,089
have got little bits of glitches as if

00:38:20,349 --> 00:38:25,300
to fix and then we've got to get it

00:38:22,089 --> 00:38:32,740
approve and so on yeah so I don't know

00:38:25,300 --> 00:38:39,160
few weeks month tops if you can give me

00:38:32,740 --> 00:38:41,260
another plus two we're going to talk

00:38:39,160 --> 00:38:50,920
you're going to bind the alcohol for my

00:38:41,260 --> 00:38:54,069
throat and I'm gonna listen to you so it

00:38:50,920 --> 00:38:56,500
sounds like so the gateways that we need

00:38:54,069 --> 00:38:58,059
to get through our code review actually

00:38:56,500 --> 00:38:59,740
landing it testing it out to make sure

00:38:58,059 --> 00:39:01,150
it doesn't break any of the API servers

00:38:59,740 --> 00:39:04,480
or anything I'd like to make sure it's

00:39:01,150 --> 00:39:06,760
in for Juno it sounds like some of the

00:39:04,480 --> 00:39:09,520
design may be redundant with pip 440

00:39:06,760 --> 00:39:11,890
evolving things but if we're tighter

00:39:09,520 --> 00:39:13,240
than pip 440 and have more constraints

00:39:11,890 --> 00:39:14,349
I'm not worried about that I'd be more

00:39:13,240 --> 00:39:16,089
worried if we do something that's in

00:39:14,349 --> 00:39:17,740
compared to always fit before 40 in the

00:39:16,089 --> 00:39:20,280
sense that we do something people 440

00:39:17,740 --> 00:39:20,280
won't accept

00:39:23,330 --> 00:39:32,180
yep awesome okay

00:39:29,960 --> 00:39:36,980
so who's got a torch so I can see you

00:39:32,180 --> 00:39:39,340
again asking for a question like really

00:39:36,980 --> 00:39:39,340
I can't

00:39:39,850 --> 00:39:51,530
you know I just can't see if anyone's

00:39:42,080 --> 00:39:54,640
got their hand up okay okay thank you

00:39:51,530 --> 00:39:54,640
Robert you're welcome

00:40:03,250 --> 00:40:05,310

YouTube URL: https://www.youtube.com/watch?v=RcwLcKhbVSk


