Title: Custom Python Applications in Neuroscience by Simon Salinas and Gagan Sharma
Publication date: 2015-08-06
Playlist: PyCon Australia 2015 Science & Data Miniconf
Description: 
	There are several (open source and proprietary) packages available for image processing in neuroscience. However, each package has its own strengths and limitations depending on the purpose of the analysis. After testing many of them at work, we have found a need to develop our own packages (at the Brain Imaging Laboratory, MBC). We will expose a couple of python tools that could be handy for anyone dealing with neuroscience (or medical images in general) in their projects. The tools presented are for (i.) quick image viewing, (ii.) dicom image sorting and de-identifying and (iii.) automatic email notifications to alert about server warnings (e.g., if machine is down, close to full capacity, failing to connect to local image archiving network (PACS), etc..). While many of these tools could have been written in other programming languages, we will explain the reasons for choosing python, share a bit about our python learning journey and perform a brief demonstration on the command line.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:12,000 --> 00:00:17,320
good morning everyone and thanks for

00:00:14,619 --> 00:00:18,939
having us here today my name is gavin

00:00:17,320 --> 00:00:21,279
sharma and my background is in computer

00:00:18,939 --> 00:00:23,199
science i've been working in the field

00:00:21,279 --> 00:00:25,540
of neuroscience from last 7 odd years

00:00:23,199 --> 00:00:28,649
today i'm here with my colleagues I'm in

00:00:25,540 --> 00:00:30,939
Salinas with whom I work very closely

00:00:28,649 --> 00:00:33,879
Simon is the mechanical engineer but

00:00:30,939 --> 00:00:36,399
much more than you a scientist now do is

00:00:33,879 --> 00:00:38,050
before when Nathan am presented

00:00:36,399 --> 00:00:40,899
here his work on image processing and

00:00:38,050 --> 00:00:43,090
using seitan and number we got inspired

00:00:40,899 --> 00:00:47,020
and thought we should also present our

00:00:43,090 --> 00:00:49,090
work from a neuroimaging perspective so

00:00:47,020 --> 00:00:51,399
today we will start by telling you why

00:00:49,090 --> 00:00:53,920
we are here and a little bit about our

00:00:51,399 --> 00:00:57,550
Python journey we will briefly introduce

00:00:53,920 --> 00:00:59,770
our work then we will expose an agile

00:00:57,550 --> 00:01:06,340
image viewer customized to visually

00:00:59,770 --> 00:01:08,049
check brain scans and we will show you

00:01:06,340 --> 00:01:10,210
the benefits of navigating image headers

00:01:08,049 --> 00:01:13,360
with pike on this is very useful when

00:01:10,210 --> 00:01:16,539
sorting and D identifying medical images

00:01:13,360 --> 00:01:18,429
which contain sensitive data and we will

00:01:16,539 --> 00:01:21,090
conclude with an example of how a few

00:01:18,429 --> 00:01:23,950
lines of Python code helps us to manage

00:01:21,090 --> 00:01:25,959
million-dollar clinical trials to manage

00:01:23,950 --> 00:01:29,679
remote processing machines around the

00:01:25,959 --> 00:01:32,319
world we started coming to python with

00:01:29,679 --> 00:01:33,819
the motivation of learning and now we're

00:01:32,319 --> 00:01:36,429
happy to present our work here for the

00:01:33,819 --> 00:01:40,119
first time we're relatively new to this

00:01:36,429 --> 00:01:42,789
community garden has been to python

00:01:40,119 --> 00:01:45,729
since 2013 and last year was my first

00:01:42,789 --> 00:01:47,439
time so we felt like outliers at the

00:01:45,729 --> 00:01:49,810
beginning since most of you guys are

00:01:47,439 --> 00:01:52,419
professional programmers but this

00:01:49,810 --> 00:01:54,549
community is very welcoming so I'm now

00:01:52,419 --> 00:01:57,789
we're very excited again to share our

00:01:54,549 --> 00:02:00,279
work with you I'm not a programmer I

00:01:57,789 --> 00:02:02,950
barely knew what linux was when I

00:02:00,279 --> 00:02:05,349
started working in this field but with

00:02:02,950 --> 00:02:07,899
time I became comfortable with matlab

00:02:05,349 --> 00:02:09,640
and bash scripting and i know this

00:02:07,899 --> 00:02:11,860
goggin was coming back from this type of

00:02:09,640 --> 00:02:15,099
conferences very excited talking about

00:02:11,860 --> 00:02:17,610
python and i asked him one question well

00:02:15,099 --> 00:02:20,770
why bother traveling so much when

00:02:17,610 --> 00:02:22,300
information is abundant out there and

00:02:20,770 --> 00:02:22,630
you can pretty much learn anything on

00:02:22,300 --> 00:02:25,510
google

00:02:22,630 --> 00:02:28,630
these days and he laughed at me and

00:02:25,510 --> 00:02:31,210
forced me to come to pikin with him last

00:02:28,630 --> 00:02:33,750
year and I understood that there is some

00:02:31,210 --> 00:02:37,690
type of knowledge or inspiration that

00:02:33,750 --> 00:02:39,430
you can only that you cannot absorb by

00:02:37,690 --> 00:02:42,250
googling everything on an isolated

00:02:39,430 --> 00:02:43,990
corner so this motivated us to start

00:02:42,250 --> 00:02:46,060
using Python more in our work and

00:02:43,990 --> 00:02:50,110
implementing the kind of tools that we

00:02:46,060 --> 00:02:51,430
heard about in this type of talks now

00:02:50,110 --> 00:02:54,070
Ghana will tell you about the type of

00:02:51,430 --> 00:02:56,170
work we do and then we will explain how

00:02:54,070 --> 00:03:01,150
Python makes our life easier when

00:02:56,170 --> 00:03:03,220
handling medical images I will begin by

00:03:01,150 --> 00:03:06,430
telling you what we do at our work and

00:03:03,220 --> 00:03:08,530
this is us at the brain imaging lab we

00:03:06,430 --> 00:03:10,840
are constantly receiving images from the

00:03:08,530 --> 00:03:13,750
local scanners and the sites around the

00:03:10,840 --> 00:03:16,570
world we process this data to enhance

00:03:13,750 --> 00:03:19,450
its value and output pretty pictures

00:03:16,570 --> 00:03:24,130
hand data for high quality publications

00:03:19,450 --> 00:03:27,010
and for a clinical translation before

00:03:24,130 --> 00:03:29,140
showing you how Python how we use Python

00:03:27,010 --> 00:03:31,660
and neuroscience I need to tell you what

00:03:29,140 --> 00:03:34,240
is dicom and what sort of images we work

00:03:31,660 --> 00:03:37,000
all the time I know some of you already

00:03:34,240 --> 00:03:39,130
know dicom dicom is a standard for

00:03:37,000 --> 00:03:41,800
handling storing printing and

00:03:39,130 --> 00:03:46,420
transmitting information in medical

00:03:41,800 --> 00:03:49,060
imaging the imaging part of it contains

00:03:46,420 --> 00:03:51,820
an image and an information about it is

00:03:49,060 --> 00:03:55,000
called header it is the language of

00:03:51,820 --> 00:03:56,500
medical imaging equipment it's always

00:03:55,000 --> 00:03:58,540
worth telling the complexities in the

00:03:56,500 --> 00:04:00,970
icon but in short these are the images

00:03:58,540 --> 00:04:04,750
with lot of information embedded into a

00:04:00,970 --> 00:04:07,930
file dicom has many flavors as ice cream

00:04:04,750 --> 00:04:10,150
does sometimes the people implement your

00:04:07,930 --> 00:04:12,250
own way breaks your code hence there is

00:04:10,150 --> 00:04:15,000
always the chance for an element of

00:04:12,250 --> 00:04:17,440
surprise last but not the least

00:04:15,000 --> 00:04:19,180
everything in dicom is a tag whether

00:04:17,440 --> 00:04:22,240
it's a patient information data

00:04:19,180 --> 00:04:26,650
information doctors information where it

00:04:22,240 --> 00:04:30,370
was taken is it AG and also the pixel

00:04:26,650 --> 00:04:32,140
data itself is represented by a tag we

00:04:30,370 --> 00:04:34,990
all know that every development has a

00:04:32,140 --> 00:04:36,520
story and so does this one day we were

00:04:34,990 --> 00:04:38,620
approached by a clinician

00:04:36,520 --> 00:04:42,069
work who need you the 3d data we're with

00:04:38,620 --> 00:04:45,550
the very specific needs he wants to read

00:04:42,069 --> 00:04:47,740
dicom and other imaging formats he wants

00:04:45,550 --> 00:04:49,960
it to be platform independent he wants

00:04:47,740 --> 00:04:53,500
to use it as a module in the language of

00:04:49,960 --> 00:04:55,449
his own choice and he wants it to be

00:04:53,500 --> 00:04:58,449
quick so that he can change the contrast

00:04:55,449 --> 00:05:00,849
level of an image quickly and whatnot I

00:04:58,449 --> 00:05:02,560
did not say no to him not because I'm an

00:05:00,849 --> 00:05:04,300
Indian I thought it's a great

00:05:02,560 --> 00:05:07,650
opportunity for us to learn how to

00:05:04,300 --> 00:05:10,030
develop the 3d medical imaging data year

00:05:07,650 --> 00:05:11,500
but then why to reinvent the wheel when

00:05:10,030 --> 00:05:14,650
there are so many good views already

00:05:11,500 --> 00:05:17,080
available in the market mind it these

00:05:14,650 --> 00:05:18,370
are not the good dicom viewers these are

00:05:17,080 --> 00:05:20,620
the viewers with a great functionality

00:05:18,370 --> 00:05:23,259
and strengths but in this particular

00:05:20,620 --> 00:05:25,780
situation they were not taking the boxes

00:05:23,259 --> 00:05:27,729
which were required so I start looking

00:05:25,780 --> 00:05:30,310
for a programming language of which I

00:05:27,729 --> 00:05:32,080
could use to develop the 3d data beer we

00:05:30,310 --> 00:05:33,340
all know that these are the two

00:05:32,080 --> 00:05:36,039
dimension in which most of the

00:05:33,340 --> 00:05:37,930
programming language fall but I'm always

00:05:36,039 --> 00:05:41,229
keen to use Python because I find it

00:05:37,930 --> 00:05:43,930
easy to learn and implement so I start

00:05:41,229 --> 00:05:45,610
googling again I thought okay whether

00:05:43,930 --> 00:05:48,659
the python is suitable for my high

00:05:45,610 --> 00:05:51,340
performance computing and google serious

00:05:48,659 --> 00:05:55,150
only if i can start with the code which

00:05:51,340 --> 00:05:57,400
is readable really is there something

00:05:55,150 --> 00:05:58,960
country readable i can barely read my

00:05:57,400 --> 00:06:01,690
own code which i wrote three months

00:05:58,960 --> 00:06:03,490
before around the top i need to merge it

00:06:01,690 --> 00:06:06,009
with the pre you know some cool

00:06:03,490 --> 00:06:08,770
pre-existing compile libraries I thought

00:06:06,009 --> 00:06:11,529
okay if it's true for one minute what I

00:06:08,770 --> 00:06:14,560
can do with that it's possible then then

00:06:11,529 --> 00:06:16,719
I will be able to focus on the fun part

00:06:14,560 --> 00:06:18,639
which is a science part here and I will

00:06:16,719 --> 00:06:21,550
be still able to develop an application

00:06:18,639 --> 00:06:23,500
with less effort more impact without

00:06:21,550 --> 00:06:26,080
worrying about the nuts and bolts of a

00:06:23,500 --> 00:06:27,520
GUI so I start looking around the

00:06:26,080 --> 00:06:29,770
packages on Google we all know that

00:06:27,520 --> 00:06:32,680
grime also explained my aviv-based by

00:06:29,770 --> 00:06:34,150
both very nice packages and this pie is

00:06:32,680 --> 00:06:36,969
also supported with some research

00:06:34,150 --> 00:06:39,340
publications but very mouthful for me I

00:06:36,969 --> 00:06:42,400
thought only spartacus can do that in

00:06:39,340 --> 00:06:44,319
known in such a short notice I can't so

00:06:42,400 --> 00:06:47,289
I started looking again I found a bike

00:06:44,319 --> 00:06:50,169
Yuri graph especially this picture on

00:06:47,289 --> 00:06:52,150
the webpage took my attention I thought

00:06:50,169 --> 00:06:54,550
engga the brain image looks like what we

00:06:52,150 --> 00:06:57,669
do all the time and maybe this could be

00:06:54,550 --> 00:06:59,289
adapted to our needs looking in start

00:06:57,669 --> 00:07:00,520
looking into its feature speed we all

00:06:59,289 --> 00:07:03,490
know that if you are doing something

00:07:00,520 --> 00:07:06,879
which needs a rapid plot update video or

00:07:03,490 --> 00:07:08,529
real-time activity this is for you it's

00:07:06,879 --> 00:07:10,900
a pure python package which means that

00:07:08,529 --> 00:07:13,810
it runs virtually on every platform

00:07:10,900 --> 00:07:16,240
supported by numpy and pi q de Graaff no

00:07:13,810 --> 00:07:19,180
compiling required and this portability

00:07:16,240 --> 00:07:21,669
made our life easy it's much more than

00:07:19,180 --> 00:07:23,499
applauding library it's tribes are its

00:07:21,669 --> 00:07:25,870
striped to cover many aspects of science

00:07:23,499 --> 00:07:27,849
and engineering application development

00:07:25,870 --> 00:07:29,439
so that's how my babies have started I

00:07:27,849 --> 00:07:32,379
downloaded it I started reading the

00:07:29,439 --> 00:07:35,710
examples I would like to emphasize here

00:07:32,379 --> 00:07:37,930
this code was so easy to follow and so

00:07:35,710 --> 00:07:41,319
easy to understand which I never thought

00:07:37,930 --> 00:07:45,699
before so this is all I did I wrote only

00:07:41,319 --> 00:07:47,370
24 lines of code so you can see bit of a

00:07:45,699 --> 00:07:50,139
knowledge of numpy where I'm reading my

00:07:47,370 --> 00:07:53,439
medical data into an umpire raised bit

00:07:50,139 --> 00:07:57,069
of a knowledge of a sci-fi what I got I

00:07:53,439 --> 00:07:59,919
got this is the original pie cutie gruff

00:07:57,069 --> 00:08:01,930
example i injected this code with those

00:07:59,919 --> 00:08:03,719
24 lines of code and Merry Christmas I

00:08:01,930 --> 00:08:06,279
got a 3d data of your running in no time

00:08:03,719 --> 00:08:09,399
which could display most of the medical

00:08:06,279 --> 00:08:11,229
images which was very useful for slicing

00:08:09,399 --> 00:08:13,930
the multi dimensional images at an

00:08:11,229 --> 00:08:16,629
arbitrary angle it is honestly a great

00:08:13,930 --> 00:08:19,089
tool for a CT and MRI and it's very

00:08:16,629 --> 00:08:26,199
interactive to let me show you the tool

00:08:19,089 --> 00:08:29,199
itself we can't see on our screen so I

00:08:26,199 --> 00:08:33,130
have to see you there so hang on where

00:08:29,199 --> 00:08:35,469
is my marks that's fine that's fine so

00:08:33,130 --> 00:08:37,180
the first I can easily change the

00:08:35,469 --> 00:08:39,909
contrast level I can see where most of

00:08:37,180 --> 00:08:44,440
the intensities are lying I can go

00:08:39,909 --> 00:08:47,170
through these slices using the fast and

00:08:44,440 --> 00:08:49,750
the slow up and arrow keys and this is

00:08:47,170 --> 00:08:55,420
what the researchers was looking I can

00:08:49,750 --> 00:08:57,970
see the data quickly and I can cut it at

00:08:55,420 --> 00:08:59,800
any particular Bertie angle I can zoom

00:08:57,970 --> 00:09:02,110
in zoom out very responsive I haven't

00:08:59,800 --> 00:09:05,640
seen anything part and so responsive so

00:09:02,110 --> 00:09:05,640
let's get back to our presentation

00:09:05,910 --> 00:09:11,220
this is us using this medical viewed at

00:09:08,710 --> 00:09:13,960
our work clinicians and along with me

00:09:11,220 --> 00:09:16,810
what we were able to do this with with

00:09:13,960 --> 00:09:18,790
this GUI we were able to review the 400

00:09:16,810 --> 00:09:20,980
patients each having a three different

00:09:18,790 --> 00:09:22,780
scans at three different time points we

00:09:20,980 --> 00:09:24,850
were able to review them visually in a

00:09:22,780 --> 00:09:27,520
simple loop and recorded the response of

00:09:24,850 --> 00:09:29,740
our clinicians it's helping us to review

00:09:27,520 --> 00:09:33,130
the data for the publications and how

00:09:29,740 --> 00:09:36,430
much I wrote 24 lines this is how I felt

00:09:33,130 --> 00:09:38,680
I felt like a spider cos not a Spartacus

00:09:36,430 --> 00:09:41,440
who can cut the difficult code using my

00:09:38,680 --> 00:09:44,110
pie sir and save I've worked with my 3d

00:09:41,440 --> 00:09:46,120
Dot of you but minded we started showing

00:09:44,110 --> 00:09:48,280
you the viewer but before you load the

00:09:46,120 --> 00:09:50,560
data into the view you know it comes up

00:09:48,280 --> 00:09:53,740
in a one single folder of 100,000 files

00:09:50,560 --> 00:09:55,810
complete miss you have to sort it in a

00:09:53,740 --> 00:09:58,270
way so that you can navigate nicely and

00:09:55,810 --> 00:10:00,490
that's where pie dicom comes in which

00:09:58,270 --> 00:10:02,410
made our lives easy and now Simon will

00:10:00,490 --> 00:10:06,220
explain you how we use by the icon bin

00:10:02,410 --> 00:10:08,290
ab work that's right now i'll show you a

00:10:06,220 --> 00:10:11,890
great python tool we discovered to

00:10:08,290 --> 00:10:13,570
process medical images these are the raw

00:10:11,890 --> 00:10:16,240
medical images coming from the scanner

00:10:13,570 --> 00:10:18,430
and here is where we have some

00:10:16,240 --> 00:10:21,160
flexibility to use python for image

00:10:18,430 --> 00:10:23,410
processing after this we use other

00:10:21,160 --> 00:10:24,970
specialized packages that take care of

00:10:23,410 --> 00:10:27,010
outputting these beautiful maps

00:10:24,970 --> 00:10:29,950
depending on the type of information you

00:10:27,010 --> 00:10:31,210
want to extract from a brain scan we

00:10:29,950 --> 00:10:34,960
will show you how we use Python in the

00:10:31,210 --> 00:10:36,370
processing stage of this pipeline this

00:10:34,960 --> 00:10:38,560
is what you usually get from the scanner

00:10:36,370 --> 00:10:41,530
a data set with disorganized files

00:10:38,560 --> 00:10:43,510
dumped into a single folder we use pied

00:10:41,530 --> 00:10:45,400
I come to output a nice folder structure

00:10:43,510 --> 00:10:48,280
that make sense to scientists that is

00:10:45,400 --> 00:10:51,610
that assaulted by patient named study

00:10:48,280 --> 00:10:56,200
date and the type of scan acquired with

00:10:51,610 --> 00:10:57,850
in that study the eigen mentioned I come

00:10:56,200 --> 00:11:00,220
alone is an extensive field that could

00:10:57,850 --> 00:11:01,510
easily take up a whole presentation what

00:11:00,220 --> 00:11:03,850
you basically need to know is that

00:11:01,510 --> 00:11:06,280
diagrams were created with the aim to

00:11:03,850 --> 00:11:08,410
standardize medical images coming from

00:11:06,280 --> 00:11:10,060
different sources and this is done by

00:11:08,410 --> 00:11:14,290
embedding critical information into the

00:11:10,060 --> 00:11:16,330
tags these are the Gator headers Scoggin

00:11:14,290 --> 00:11:18,200
was talking about and we need to access

00:11:16,330 --> 00:11:20,030
these tags to create organized

00:11:18,200 --> 00:11:22,010
all these structures with pie diagram

00:11:20,030 --> 00:11:25,790
you can navigate these structures and

00:11:22,010 --> 00:11:30,110
store them in handy Python variables as

00:11:25,790 --> 00:11:32,030
I will show you in the next slide I know

00:11:30,110 --> 00:11:35,300
it might seem like a mouthful of code we

00:11:32,030 --> 00:11:38,020
have Python on top you have flash on the

00:11:35,300 --> 00:11:40,910
bottom they achieve the same result but

00:11:38,020 --> 00:11:43,100
tell me which method do you find more

00:11:40,910 --> 00:11:45,920
intuitive you're probably Python biased

00:11:43,100 --> 00:11:48,500
so I know the answer for that but for us

00:11:45,920 --> 00:11:50,150
we find it very convenient as you read

00:11:48,500 --> 00:11:52,280
the headers and they become variable

00:11:50,150 --> 00:11:55,340
straight away and there's less fiddling

00:11:52,280 --> 00:12:02,270
around with regular expressions this is

00:11:55,340 --> 00:12:07,060
how we do it on the command line so we

00:12:02,270 --> 00:12:10,190
start by importing the Python library

00:12:07,060 --> 00:12:16,160
now we assign the dicom image to a

00:12:10,190 --> 00:12:19,460
variable and now we can use the read

00:12:16,160 --> 00:12:21,980
function just access all of the headers

00:12:19,460 --> 00:12:23,840
and here I can can see all of the

00:12:21,980 --> 00:12:26,000
headers stored in a Python data

00:12:23,840 --> 00:12:31,460
structure even the pics of that is

00:12:26,000 --> 00:12:40,820
referenced here I can also print for

00:12:31,460 --> 00:12:44,530
example patient name or name study date

00:12:40,820 --> 00:12:44,530
and the place where it was acquired

00:12:46,090 --> 00:12:50,660
again we find it easier to navigate

00:12:48,320 --> 00:12:53,210
through the Python structures as The

00:12:50,660 --> 00:12:54,980
Bachelor native takes a lot more effort

00:12:53,210 --> 00:12:57,740
and string manipulation store the

00:12:54,980 --> 00:13:00,410
headers but we need to modify these

00:12:57,740 --> 00:13:02,750
headers often because medical data is

00:13:00,410 --> 00:13:05,120
regarded as sacred data due to privacy

00:13:02,750 --> 00:13:07,730
legislations mainly around the first

00:13:05,120 --> 00:13:10,640
world some tags have doctors name

00:13:07,730 --> 00:13:13,310
patient age hospital address and other

00:13:10,640 --> 00:13:15,020
private data so it's important to

00:13:13,310 --> 00:13:17,900
de-identify them properly when sharing

00:13:15,020 --> 00:13:20,720
it with other sites here's an example of

00:13:17,900 --> 00:13:23,080
how we do this with Python back to the

00:13:20,720 --> 00:13:23,080
command line

00:13:27,070 --> 00:13:34,760
I'm trying to load up patient name and

00:13:30,800 --> 00:13:37,670
I'm going to give it up dummy name and

00:13:34,760 --> 00:13:44,090
I'm also going to change the hospital

00:13:37,670 --> 00:13:52,940
name and here you go we have the

00:13:44,090 --> 00:13:55,670
identified those two headers so there

00:13:52,940 --> 00:13:57,230
are plenty of private tags but the neat

00:13:55,670 --> 00:13:59,120
thing here is that you don't need to

00:13:57,230 --> 00:14:01,750
have a loop to go through all of these

00:13:59,120 --> 00:14:05,150
values to remove these tags we can

00:14:01,750 --> 00:14:07,580
remove all of this in one hit with an

00:14:05,150 --> 00:14:10,220
inbuilt pipe by the item libraries and

00:14:07,580 --> 00:14:12,200
we also have the flexibility to save the

00:14:10,220 --> 00:14:15,550
de-identified image in any format

00:14:12,200 --> 00:14:17,780
without overwriting the original ones

00:14:15,550 --> 00:14:20,000
that was just for a single image but

00:14:17,780 --> 00:14:22,130
this process can be easily scripted to

00:14:20,000 --> 00:14:24,770
scan a whole data set and now put a

00:14:22,130 --> 00:14:26,720
desired folder structure here's an

00:14:24,770 --> 00:14:28,970
example of how we run the code for

00:14:26,720 --> 00:14:30,620
sorting and D identifying not going to

00:14:28,970 --> 00:14:32,750
go through the whole code it is

00:14:30,620 --> 00:14:34,610
available in bitbucket but one thing

00:14:32,750 --> 00:14:36,950
worth mentioning though is that we were

00:14:34,610 --> 00:14:38,690
able to improve it after coming coming

00:14:36,950 --> 00:14:42,350
to pike and last year and hearing about

00:14:38,690 --> 00:14:44,990
a couple of libraries scan dear

00:14:42,350 --> 00:14:47,450
mentioned by one known as iglesias to go

00:14:44,990 --> 00:14:50,480
through all files more efficiently and

00:14:47,450 --> 00:14:52,130
improve reading speed we tried this

00:14:50,480 --> 00:14:54,500
instead of always the walk and found

00:14:52,130 --> 00:14:57,290
that it was not working at the beginning

00:14:54,500 --> 00:14:58,640
but then goggin I mean when we heard

00:14:57,290 --> 00:15:00,740
about this library we got very excited

00:14:58,640 --> 00:15:02,420
we went back we started using it we

00:15:00,740 --> 00:15:04,460
could not reach achieve the same result

00:15:02,420 --> 00:15:06,800
so I had a few email exchange with Ben

00:15:04,460 --> 00:15:08,950
the developer and find out it was some

00:15:06,800 --> 00:15:11,690
interface and other issues and

00:15:08,950 --> 00:15:14,180
eventually once that was so did this

00:15:11,690 --> 00:15:16,010
library really made of a code super fast

00:15:14,180 --> 00:15:19,700
and every was so excited to use these

00:15:16,010 --> 00:15:21,500
libraries yeah that's right we also use

00:15:19,700 --> 00:15:23,780
the da cops to simplify parsing

00:15:21,500 --> 00:15:25,580
arguments into our script this one was

00:15:23,780 --> 00:15:27,380
particularly handy as the G search

00:15:25,580 --> 00:15:30,380
function gets written automatically as

00:15:27,380 --> 00:15:32,150
you specify the input arguments we're

00:15:30,380 --> 00:15:34,640
also having a look at pandas for

00:15:32,150 --> 00:15:38,380
handling data structures after hearing

00:15:34,640 --> 00:15:38,380
like ciders talk last year

00:15:38,560 --> 00:15:43,149
while we were talking about medical

00:15:40,699 --> 00:15:46,610
imaging here I would like to emphasize

00:15:43,149 --> 00:15:48,769
this could be any digital image with

00:15:46,610 --> 00:15:51,170
data and headers so even if you're not

00:15:48,769 --> 00:15:53,240
from neuroscience storing headers in two

00:15:51,170 --> 00:15:56,839
variables and using Python to manage the

00:15:53,240 --> 00:15:59,540
data can be very useful we will finish

00:15:56,839 --> 00:16:02,089
with a quick example of Python script

00:15:59,540 --> 00:16:04,899
that has helped us to monitor machines

00:16:02,089 --> 00:16:08,779
across Australia New Zealand and Taiwan

00:16:04,899 --> 00:16:10,730
we have around 30 remote machines used

00:16:08,779 --> 00:16:12,860
for automated processing in several

00:16:10,730 --> 00:16:15,889
clinical trials and it's important to

00:16:12,860 --> 00:16:18,139
make sure they're running 24 7 with a

00:16:15,889 --> 00:16:19,820
few lines of Python code we're able to

00:16:18,139 --> 00:16:22,880
detect signals coming from each machine

00:16:19,820 --> 00:16:25,940
and deliver an automated report into our

00:16:22,880 --> 00:16:27,889
inbox every morning this is probably

00:16:25,940 --> 00:16:29,690
basic for those of you working in IT but

00:16:27,889 --> 00:16:33,649
we were quite excited to get a daily

00:16:29,690 --> 00:16:35,750
summary telling us every day if any of

00:16:33,649 --> 00:16:37,820
the machines were down close to full

00:16:35,750 --> 00:16:40,790
capacity or failing to connect to the

00:16:37,820 --> 00:16:42,610
local hospital scanner and what we like

00:16:40,790 --> 00:16:45,199
most is the simplicity and readability

00:16:42,610 --> 00:16:47,420
readability of this code allowing us to

00:16:45,199 --> 00:16:51,319
have so much power with just a few lines

00:16:47,420 --> 00:16:52,850
of code to summarize the scientific

00:16:51,319 --> 00:16:54,980
community usually has their own

00:16:52,850 --> 00:16:57,860
preference in which software packages

00:16:54,980 --> 00:17:00,139
use for image processing but it's always

00:16:57,860 --> 00:17:03,319
possible to use Python to replace or pre

00:17:00,139 --> 00:17:04,760
process that are more effectively Python

00:17:03,319 --> 00:17:07,790
provides readable code that can be

00:17:04,760 --> 00:17:09,740
easily adapted for custom aging image

00:17:07,790 --> 00:17:13,069
viewing and also for careful

00:17:09,740 --> 00:17:15,199
manipulation of sensitive data lastly

00:17:13,069 --> 00:17:16,790
we're very grateful for Python

00:17:15,199 --> 00:17:19,669
inspiration that allow us to develop

00:17:16,790 --> 00:17:22,880
three excellent tools so come to this

00:17:19,669 --> 00:17:26,990
type of conferences to absorb what

00:17:22,880 --> 00:17:28,640
Google alone cannot provide we would

00:17:26,990 --> 00:17:30,559
like to conclude by sharing the few

00:17:28,640 --> 00:17:32,929
lessons we learned from the main aspects

00:17:30,559 --> 00:17:36,020
of our workflow which we discussed today

00:17:32,929 --> 00:17:38,320
you must have seen the data processing

00:17:36,020 --> 00:17:40,940
using pi comma Simon explain data

00:17:38,320 --> 00:17:43,309
visualization using pi Curie graph and

00:17:40,940 --> 00:17:47,120
the server reporting management using

00:17:43,309 --> 00:17:48,830
pythons API but there are times when we

00:17:47,120 --> 00:17:51,260
still have to use other software

00:17:48,830 --> 00:17:52,370
packages to support these three very

00:17:51,260 --> 00:17:55,250
important aspects of

00:17:52,370 --> 00:17:58,040
work we all know that it's not easy to

00:17:55,250 --> 00:18:01,790
change people process and the technology

00:17:58,040 --> 00:18:05,090
in a very well-established workflow but

00:18:01,790 --> 00:18:07,580
also we are getting there at our work

00:18:05,090 --> 00:18:10,460
now we are trying to use Python in every

00:18:07,580 --> 00:18:13,040
possible situation not because python is

00:18:10,460 --> 00:18:15,080
agile far as portable but we also

00:18:13,040 --> 00:18:16,700
strongly believe that in these exciting

00:18:15,080 --> 00:18:19,550
times we can achieve anything with

00:18:16,700 --> 00:18:21,440
Python the good thing is that if you are

00:18:19,550 --> 00:18:24,290
very specific about your software tools

00:18:21,440 --> 00:18:27,470
python has the flexibility to join these

00:18:24,290 --> 00:18:29,990
tools together and in short Python can

00:18:27,470 --> 00:18:32,600
be a glue with in infinite possibilities

00:18:29,990 --> 00:18:34,790
so in the near future we will be

00:18:32,600 --> 00:18:38,450
focusing on a python-based ni pie or

00:18:34,790 --> 00:18:40,760
nippy for analyzing our structural new

00:18:38,450 --> 00:18:43,040
imaging data and pipeline new imaging

00:18:40,760 --> 00:18:45,650
data and for scientific pipelining we

00:18:43,040 --> 00:18:47,360
also realize today that after looking at

00:18:45,650 --> 00:18:48,650
the program that Sam will be presenting

00:18:47,360 --> 00:18:50,960
later today on these scientific

00:18:48,650 --> 00:18:53,540
pipelines so we are also looking forward

00:18:50,960 --> 00:18:55,490
to that very particular talk and and I

00:18:53,540 --> 00:18:58,220
learned for using these for these

00:18:55,490 --> 00:19:00,290
statistical techniques and PI X nap for

00:18:58,220 --> 00:19:02,240
X naught which facilitates the common

00:19:00,290 --> 00:19:04,760
management productivity elect Quality

00:19:02,240 --> 00:19:09,440
Assurance task for imaging and other

00:19:04,760 --> 00:19:11,210
associated data sets we hope this talk

00:19:09,440 --> 00:19:14,809
has been useful to show how Python tools

00:19:11,210 --> 00:19:16,190
can help and neuroscience imaging and we

00:19:14,809 --> 00:19:18,410
strongly recommend to infect your

00:19:16,190 --> 00:19:20,090
colleagues with the python spirit so

00:19:18,410 --> 00:19:22,460
they can enhance their learning as it

00:19:20,090 --> 00:19:24,110
happened to me with Goggin please come

00:19:22,460 --> 00:19:26,929
and talk to us if you have any questions

00:19:24,110 --> 00:19:29,050
or feedback anytime thanks for your

00:19:26,929 --> 00:19:29,050
attention

00:19:36,830 --> 00:19:38,890

YouTube URL: https://www.youtube.com/watch?v=ZA05sGM6UfA


