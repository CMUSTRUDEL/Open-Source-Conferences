Title: Automated Scientific Pipelines With Doit by Sam Hames
Publication date: 2015-08-06
Playlist: PyCon Australia 2015 Science & Data Miniconf
Description: 
	Doit is a Python library for task management and automation. It provides a straightforward Python approach to manage and execute any series of interrelated tasks, such as in scientific data analysis. Doit can be used as a command line substitute for Make to drive existing tools/applications, or can be integrated directly with your application at the Python level. Task automation can be as simple as manually specifying a dictionary of dependencies, target files and actions, or as complex as automatically determining dependencies and whether a task is up to date using arbitrary Python expressions. This talk will give an overview of why and how to use doit for your project.

This talk assumes no particular background except some familiarity with Python, but is geared towards a scientific computing audience and will touch on automated data analysis as a motivating example.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:09,680 --> 00:00:17,390
speaker is sam hands and he is doing

00:00:13,850 --> 00:00:22,760
automatic scientific python pipelines

00:00:17,390 --> 00:00:26,180
with do it he's a PhD student working in

00:00:22,760 --> 00:00:28,220
medical imaging hi everybody can you

00:00:26,180 --> 00:00:29,750
hear me all right down the back my voice

00:00:28,220 --> 00:00:32,930
is going I just want to make sure oh

00:00:29,750 --> 00:00:34,699
good you can hear me cool thank you

00:00:32,930 --> 00:00:36,710
alright so I'm gonna put the

00:00:34,699 --> 00:00:38,750
acknowledgments at the start because I

00:00:36,710 --> 00:00:41,150
want my voice to actually be working for

00:00:38,750 --> 00:00:43,340
this part I'm talking about PI do it

00:00:41,150 --> 00:00:45,860
that's the website that's the author I'm

00:00:43,340 --> 00:00:47,600
also acknowledging that Rob be grease

00:00:45,860 --> 00:00:50,090
software carpentry lessons on do it

00:00:47,600 --> 00:00:51,440
because a they were the my first

00:00:50,090 --> 00:00:53,570
introduction to do it and why I started

00:00:51,440 --> 00:00:55,219
using it and be because I borrowed some

00:00:53,570 --> 00:00:59,180
of his outline for that particular

00:00:55,219 --> 00:01:00,410
lesson to start this talk off okay so

00:00:59,180 --> 00:01:03,260
what what am I talking about when I say

00:01:00,410 --> 00:01:07,460
a pipeline I mean in most science and

00:01:03,260 --> 00:01:08,720
stuff we have data ro dah de dah maybe

00:01:07,460 --> 00:01:10,310
it's from a medical imaging machine

00:01:08,720 --> 00:01:12,080
maybe it's from a remote sensor rabbits

00:01:10,310 --> 00:01:14,659
from a satellite maybe it's from some

00:01:12,080 --> 00:01:16,310
custom instrumentation thing at the end

00:01:14,659 --> 00:01:19,070
we have our results what I'm talking

00:01:16,310 --> 00:01:21,470
about is what you do in between your raw

00:01:19,070 --> 00:01:23,780
data to your results what's the the

00:01:21,470 --> 00:01:26,210
magic steps in between so what I'm

00:01:23,780 --> 00:01:28,909
talking about in a pipeline is the bits

00:01:26,210 --> 00:01:31,250
we do to get from our raw data to our

00:01:28,909 --> 00:01:32,930
results or for most people that's the

00:01:31,250 --> 00:01:39,920
science see bit that's the bit we're

00:01:32,930 --> 00:01:41,659
interested in now this is this is all

00:01:39,920 --> 00:01:43,700
this is obviously a really important

00:01:41,659 --> 00:01:45,409
step because a you should be able to

00:01:43,700 --> 00:01:46,580
replicate it you should be able to get

00:01:45,409 --> 00:01:47,780
some new data you should be able to run

00:01:46,580 --> 00:01:48,860
it through the pipeline get through the

00:01:47,780 --> 00:01:50,570
same things you should be able to

00:01:48,860 --> 00:01:52,670
recover in the sense that if your laptop

00:01:50,570 --> 00:01:54,280
dies you should be able to recreate your

00:01:52,670 --> 00:01:56,630
results like if you've submitted a paper

00:01:54,280 --> 00:01:58,159
with a bunch of figures in it it's

00:01:56,630 --> 00:01:59,869
reasonable to expect that you could

00:01:58,159 --> 00:02:01,610
recreate those figures given your code

00:01:59,869 --> 00:02:04,880
in your data so what I'm talking about

00:02:01,610 --> 00:02:06,920
is and do it is a tool for automating

00:02:04,880 --> 00:02:08,720
that process for automatically combining

00:02:06,920 --> 00:02:09,709
everything so you don't have to worry

00:02:08,720 --> 00:02:11,600
about it you don't have to worry about

00:02:09,709 --> 00:02:12,890
what the manual steps are you just let

00:02:11,600 --> 00:02:17,690
it do its magic and figure it all out

00:02:12,890 --> 00:02:20,870
for you and this kind of this isn't a

00:02:17,690 --> 00:02:22,549
new idea it's actually a very old idea

00:02:20,870 --> 00:02:22,930
so and it kind of goes into the idea of

00:02:22,549 --> 00:02:24,909
a

00:02:22,930 --> 00:02:28,659
build system so make is the classic

00:02:24,909 --> 00:02:29,950
example the reasons I don't want to I I

00:02:28,659 --> 00:02:32,260
was looking for something other than

00:02:29,950 --> 00:02:33,370
make i'm not going to survey all of the

00:02:32,260 --> 00:02:35,049
possible tools i'm just going to talk

00:02:33,370 --> 00:02:38,290
about making to it because we don't have

00:02:35,049 --> 00:02:40,659
all day the reason i didn't want anyone

00:02:38,290 --> 00:02:42,939
make is because it's a joins

00:02:40,659 --> 00:02:44,889
domain-specific language i don't really

00:02:42,939 --> 00:02:46,269
want to learn a new language just to

00:02:44,889 --> 00:02:48,700
automate some tasks I already know

00:02:46,269 --> 00:02:49,959
python I like Python I don't want to

00:02:48,700 --> 00:02:53,579
learn a new language just to make some

00:02:49,959 --> 00:02:55,780
stuff happen the other reasons I was

00:02:53,579 --> 00:02:57,549
interested in do it is because it is

00:02:55,780 --> 00:02:59,260
pure python so I don't need to learn a

00:02:57,549 --> 00:03:01,090
whole new language I can make stuff

00:02:59,260 --> 00:03:02,709
happen without doing too much effort

00:03:01,090 --> 00:03:04,419
there's not a lot of cognitive burden I

00:03:02,709 --> 00:03:05,859
don't have to remember some strange

00:03:04,419 --> 00:03:08,530
syntax I don't have to differentiate

00:03:05,859 --> 00:03:13,510
between tabs and spaces and all that

00:03:08,530 --> 00:03:16,810
other stuff I know what python is so in

00:03:13,510 --> 00:03:18,189
the context of a pipeline from data to

00:03:16,810 --> 00:03:19,840
results there's a lot of ways you can

00:03:18,189 --> 00:03:21,250
make this reproducible and repeatable

00:03:19,840 --> 00:03:23,230
and all that other things if it's a

00:03:21,250 --> 00:03:26,799
really simple simple pipeline you only

00:03:23,230 --> 00:03:28,810
have a touch of data so it's a small csv

00:03:26,799 --> 00:03:30,280
file and you've only got one figure at

00:03:28,810 --> 00:03:33,099
the end this is easy you just write one

00:03:30,280 --> 00:03:34,329
script that loads the file does some

00:03:33,099 --> 00:03:36,099
stuff print out another file you don't

00:03:34,329 --> 00:03:37,540
need to worry about it anymore but for

00:03:36,099 --> 00:03:39,220
most people it's a lot more complicated

00:03:37,540 --> 00:03:41,560
than that you have a series of

00:03:39,220 --> 00:03:43,299
intermediate steps I mean as are in our

00:03:41,560 --> 00:03:45,220
medical imaging example this morning

00:03:43,299 --> 00:03:47,049
it's not just here's the data here's the

00:03:45,220 --> 00:03:48,609
result its data goes through some

00:03:47,049 --> 00:03:50,879
pre-processing goes through some other

00:03:48,609 --> 00:03:53,949
analysis and then we visualize it's not

00:03:50,879 --> 00:03:56,290
one step it's a series of steps and I

00:03:53,949 --> 00:03:59,079
was talked about in our middle sessions

00:03:56,290 --> 00:04:01,870
in calling other functions it's usually

00:03:59,079 --> 00:04:03,250
not just one you know it's rare that

00:04:01,870 --> 00:04:04,780
you're working with just one tool you

00:04:03,250 --> 00:04:06,099
actually have a bunch of tools and they

00:04:04,780 --> 00:04:07,209
may be in different languages and you

00:04:06,099 --> 00:04:12,909
need some way to combine them all

00:04:07,209 --> 00:04:15,340
together to get your final result so I'm

00:04:12,909 --> 00:04:18,789
talking about do it so do it I really

00:04:15,340 --> 00:04:20,979
like it because it's so it's it seems a

00:04:18,789 --> 00:04:22,270
verbose if you use to make I think a lot

00:04:20,979 --> 00:04:23,979
of people would think this is a lot of

00:04:22,270 --> 00:04:26,740
writing but once you get used to it it's

00:04:23,979 --> 00:04:30,789
a lot more readable so what I have here

00:04:26,740 --> 00:04:33,460
is a I have a task so at asking do it is

00:04:30,789 --> 00:04:34,810
just a unit of work that has some output

00:04:33,460 --> 00:04:36,330
in the form of targets so that's the

00:04:34,810 --> 00:04:39,840
file we expect to come out

00:04:36,330 --> 00:04:42,550
some actions in this case it's just

00:04:39,840 --> 00:04:44,650
using W get to download the file from a

00:04:42,550 --> 00:04:46,120
web server and i'll talk about up to

00:04:44,650 --> 00:04:49,030
date in just a little bit more i could

00:04:46,120 --> 00:04:50,890
also have this task could also depend on

00:04:49,030 --> 00:04:54,190
other files in which case they could

00:04:50,890 --> 00:04:57,520
i'll show you in the next part of this

00:04:54,190 --> 00:05:00,730
example what i mean by that but although

00:04:57,520 --> 00:05:03,850
all the do it task is is a dictionary

00:05:00,730 --> 00:05:06,280
that with a bunch of named key value

00:05:03,850 --> 00:05:07,690
pairs so targets actions up to date

00:05:06,280 --> 00:05:12,820
there's a few other ones that i might

00:05:07,690 --> 00:05:14,920
mention i'll just give the other half of

00:05:12,820 --> 00:05:18,310
this first example so we have a second

00:05:14,920 --> 00:05:19,600
task which is going to use that function

00:05:18,310 --> 00:05:21,040
which I'm not showing you the full thing

00:05:19,600 --> 00:05:24,640
just assume that that plot temperature

00:05:21,040 --> 00:05:27,910
function exists it's going to given that

00:05:24,640 --> 00:05:29,830
given it has a dependency on that file

00:05:27,910 --> 00:05:32,140
we've just downloaded we're going to

00:05:29,830 --> 00:05:35,890
call that function and we're going to

00:05:32,140 --> 00:05:37,180
create a plot from that file and I'm

00:05:35,890 --> 00:05:41,230
just going to give you the example for

00:05:37,180 --> 00:05:43,120
this so I have this already do it is a

00:05:41,230 --> 00:05:45,930
mostly a command-line tool but I'll talk

00:05:43,120 --> 00:05:48,430
at the end that you can also use it as a

00:05:45,930 --> 00:05:49,930
through its pass an API so you don't

00:05:48,430 --> 00:05:53,260
you're not limited to just the command

00:05:49,930 --> 00:05:56,530
line by default it looks for a file

00:05:53,260 --> 00:05:57,640
called do do PI but I'm just because I

00:05:56,530 --> 00:05:59,950
want to show you a couple of examples

00:05:57,640 --> 00:06:04,930
I'm explicitly telling it let's load

00:05:59,950 --> 00:06:06,310
example 1 dot pie um so if i run this it

00:06:04,930 --> 00:06:08,020
tells you that it i downloaded something

00:06:06,310 --> 00:06:13,000
really fast cuz i put it on my laptop to

00:06:08,020 --> 00:06:14,860
make sure that the internet works so

00:06:13,000 --> 00:06:17,050
it's run oh sorry there's a lot more

00:06:14,860 --> 00:06:21,190
output than I remember so it's run two

00:06:17,050 --> 00:06:22,840
tasks the first one called download data

00:06:21,190 --> 00:06:24,460
it gives you a single dot to tell you

00:06:22,840 --> 00:06:28,390
that's running all the rest of that is

00:06:24,460 --> 00:06:30,010
just the output of W get and then after

00:06:28,390 --> 00:06:34,240
downloading that it's run plot

00:06:30,010 --> 00:06:36,340
temperatures so it's run the first part

00:06:34,240 --> 00:06:37,960
of our part our first task which is just

00:06:36,340 --> 00:06:40,360
to download the data and then it's done

00:06:37,960 --> 00:06:43,960
the actual plotting work after

00:06:40,360 --> 00:06:46,320
downloading it and if we actually have a

00:06:43,960 --> 00:06:46,320
quick look

00:06:47,990 --> 00:06:55,760
hey look it's plotted some data for us

00:06:51,510 --> 00:07:00,930
which is Brisbane temperature for June

00:06:55,760 --> 00:07:05,340
so this is from the UQ school of Joe

00:07:00,930 --> 00:07:07,200
geology I think it'll be I will have a

00:07:05,340 --> 00:07:11,820
full listing of the code and stuff i'm

00:07:07,200 --> 00:07:13,620
using in this sometime on the web so

00:07:11,820 --> 00:07:17,220
what this has done is I've put all of

00:07:13,620 --> 00:07:19,920
this in the these sorry this function

00:07:17,220 --> 00:07:22,230
and those two task functions do it

00:07:19,920 --> 00:07:24,150
interprets like nose tests anything that

00:07:22,230 --> 00:07:26,430
begins with task it treats as a task and

00:07:24,150 --> 00:07:27,720
it's going to iterate through that it's

00:07:26,430 --> 00:07:29,790
going to run through your file extract

00:07:27,720 --> 00:07:32,040
everything that's going to be a task it

00:07:29,790 --> 00:07:34,530
looks at your dependencies your targets

00:07:32,040 --> 00:07:35,790
works out what tasks depend on others

00:07:34,530 --> 00:07:40,530
house and then runs them in the correct

00:07:35,790 --> 00:07:42,420
order it's implied in this that you

00:07:40,530 --> 00:07:44,820
don't have any cyclic dependencies in

00:07:42,420 --> 00:07:46,200
the you it all has to be a nice chain

00:07:44,820 --> 00:07:50,940
you can't just have a loop of stuff that

00:07:46,200 --> 00:07:53,580
will give it problems so the important

00:07:50,940 --> 00:07:55,560
part is you define a task like this you

00:07:53,580 --> 00:07:57,600
let do it figure out what order it needs

00:07:55,560 --> 00:07:59,220
to run what dependencies it needs to

00:07:57,600 --> 00:08:00,660
figure out and it does all of the work

00:07:59,220 --> 00:08:02,340
for you so you don't need to actually

00:08:00,660 --> 00:08:04,200
tell it to run anything you just say

00:08:02,340 --> 00:08:10,460
here's the tasks i have and it does the

00:08:04,200 --> 00:08:13,460
rest for you and of course

00:08:10,460 --> 00:08:16,009
I mean this is a bit verbose you have

00:08:13,460 --> 00:08:18,770
I've repeated a bunch of stuff there so

00:08:16,009 --> 00:08:21,080
do it has a couple of niceties to make

00:08:18,770 --> 00:08:23,569
it a bit easier sorry I'll also point

00:08:21,080 --> 00:08:26,599
out one other thing in this first

00:08:23,569 --> 00:08:30,349
example I had a shell script so if in

00:08:26,599 --> 00:08:32,240
the actions list it has a string it

00:08:30,349 --> 00:08:33,830
treats that as a command and it caused

00:08:32,240 --> 00:08:37,010
sub-process and it runs it out to the

00:08:33,830 --> 00:08:39,589
show so you can integrate and sorry and

00:08:37,010 --> 00:08:41,390
the other half of this I've called a

00:08:39,589 --> 00:08:43,430
Python function directly so I've given a

00:08:41,390 --> 00:08:45,170
function named the arguments are

00:08:43,430 --> 00:08:48,950
separate to pull in this case you could

00:08:45,170 --> 00:08:51,920
also do a list so you can mix both pison

00:08:48,950 --> 00:08:53,390
n sub process and other stuff all in the

00:08:51,920 --> 00:08:54,560
same file so you're not constrained to

00:08:53,390 --> 00:08:56,060
just working inviting you're not

00:08:54,560 --> 00:08:58,399
constrained to just working in the show

00:08:56,060 --> 00:08:59,779
you can mix them all together in the way

00:08:58,399 --> 00:09:04,580
that makes the most sense for your

00:08:59,779 --> 00:09:08,600
particular project so when you're doing

00:09:04,580 --> 00:09:10,190
a in the duet lingo this is called a

00:09:08,600 --> 00:09:12,250
command action because it's going out to

00:09:10,190 --> 00:09:14,750
the show and there's a bunch of

00:09:12,250 --> 00:09:16,220
utilities for handling this in a nicer

00:09:14,750 --> 00:09:17,420
way which I'm not going to go into today

00:09:16,220 --> 00:09:21,200
but i just want to point out that they

00:09:17,420 --> 00:09:23,779
exist so you can use pythons string

00:09:21,200 --> 00:09:25,370
substitution with percentages when you

00:09:23,779 --> 00:09:27,500
run this command three do it it'll

00:09:25,370 --> 00:09:31,850
automatically substitute the keyword

00:09:27,500 --> 00:09:34,459
targets from the targets of that task so

00:09:31,850 --> 00:09:37,670
you don't have to write that particular

00:09:34,459 --> 00:09:40,300
file name over and over again but you

00:09:37,670 --> 00:09:42,050
can substitute it from the actual act

00:09:40,300 --> 00:09:44,300
targets and also you can use

00:09:42,050 --> 00:09:49,700
dependencies to get the file

00:09:44,300 --> 00:09:52,459
dependencies as well you can also do the

00:09:49,700 --> 00:09:55,300
same thing for functions but instead of

00:09:52,459 --> 00:10:00,110
using string substitutions you can

00:09:55,300 --> 00:10:02,930
define your function directly in terms

00:10:00,110 --> 00:10:05,980
of the dependencies and the target so

00:10:02,930 --> 00:10:08,089
what I mean by this is you write the

00:10:05,980 --> 00:10:10,459
function you're interested in just has

00:10:08,089 --> 00:10:12,350
to take the q of the dependencies and

00:10:10,459 --> 00:10:14,089
targets as arguments and then you don't

00:10:12,350 --> 00:10:15,680
even need to tell it anything else you

00:10:14,089 --> 00:10:17,410
just say here's the action I want you to

00:10:15,680 --> 00:10:20,690
run and it figures out the rest for you

00:10:17,410 --> 00:10:22,600
so this I think this is pretty readable

00:10:20,690 --> 00:10:25,699
I mean you

00:10:22,600 --> 00:10:27,980
once you use I'm assuming most of you a

00:10:25,699 --> 00:10:29,269
used to python it's a pretty good guess

00:10:27,980 --> 00:10:32,920
that that's a function and it's going to

00:10:29,269 --> 00:10:36,019
do something so you can do a bunch of

00:10:32,920 --> 00:10:37,370
substitutions and so on just to generate

00:10:36,019 --> 00:10:39,220
your tasks you don't need to specify

00:10:37,370 --> 00:10:42,079
hardcode everything you're not

00:10:39,220 --> 00:10:45,559
constrained in that way and the other

00:10:42,079 --> 00:10:49,670
thing is these are because these are

00:10:45,559 --> 00:10:52,519
just all Python object for example I've

00:10:49,670 --> 00:10:54,709
used the string interpolate the format

00:10:52,519 --> 00:10:56,749
operator just to chuck the URL into that

00:10:54,709 --> 00:10:58,370
particular string so you can you can

00:10:56,749 --> 00:11:00,490
generate your actions and your targets

00:10:58,370 --> 00:11:02,990
and all those other things in python is

00:11:00,490 --> 00:11:04,699
much less overhead you don't have to

00:11:02,990 --> 00:11:05,899
think too hard about it you can just

00:11:04,699 --> 00:11:08,350
write the python that matches your

00:11:05,899 --> 00:11:08,350
problem

00:11:17,000 --> 00:11:20,320
excuse me one second

00:11:28,259 --> 00:11:35,399
alright so what I defined earlier in

00:11:33,009 --> 00:11:40,480
something like this is just a single

00:11:35,399 --> 00:11:43,870
task but a task to do it is just a

00:11:40,480 --> 00:11:45,519
dictionary with the right names inside

00:11:43,870 --> 00:11:47,889
it and it figures out but and it creates

00:11:45,519 --> 00:11:49,689
its internal representation of the task

00:11:47,889 --> 00:11:52,779
from that so you can actually do a lot

00:11:49,689 --> 00:11:54,550
more complicated things so just assume

00:11:52,779 --> 00:11:56,639
for the sake of convenience that we have

00:11:54,550 --> 00:11:59,920
a latest data function which returns

00:11:56,639 --> 00:12:03,610
lists of file names and URLs for the

00:11:59,920 --> 00:12:06,879
latest data in this case sorry and in

00:12:03,610 --> 00:12:09,370
the in this case and the example I'll

00:12:06,879 --> 00:12:12,040
put up on my website this will download

00:12:09,370 --> 00:12:14,980
the three most recent months data from

00:12:12,040 --> 00:12:18,310
the web server that the weather data

00:12:14,980 --> 00:12:21,600
store that I'm talking about it gets the

00:12:18,310 --> 00:12:23,769
latest data just by doing some horrible

00:12:21,600 --> 00:12:25,060
checking what files exist on the server

00:12:23,769 --> 00:12:27,100
because i don't think it's automatically

00:12:25,060 --> 00:12:29,709
updated they just kind of get added when

00:12:27,100 --> 00:12:31,990
someone remembers so it's not a

00:12:29,709 --> 00:12:35,019
straightforward problem to work out what

00:12:31,990 --> 00:12:36,370
it is but there's some horrible passing

00:12:35,019 --> 00:12:38,110
and checking headers to see what exists

00:12:36,370 --> 00:12:39,670
just to get tell me what is the latest

00:12:38,110 --> 00:12:42,370
data they actually have on the website

00:12:39,670 --> 00:12:44,019
but what I've done here is we've

00:12:42,370 --> 00:12:46,120
extended this example a little bit more

00:12:44,019 --> 00:12:48,850
so we're no longer returning a

00:12:46,120 --> 00:12:52,329
dictionary we're yielding we are where

00:12:48,850 --> 00:12:54,160
we this is actually defining a generator

00:12:52,329 --> 00:12:58,059
of dictionaries in terms of a bunch of

00:12:54,160 --> 00:12:59,860
data files so latest data is going to

00:12:58,059 --> 00:13:02,589
return the information about the three

00:12:59,860 --> 00:13:04,689
latest pieces sorry the three latest

00:13:02,589 --> 00:13:08,439
months of weather data and for each of

00:13:04,689 --> 00:13:10,839
those pieces of weather data as separate

00:13:08,439 --> 00:13:13,089
files it's going to generate a task to

00:13:10,839 --> 00:13:15,250
do that action so this one's just the

00:13:13,089 --> 00:13:19,180
download and stick them in the data

00:13:15,250 --> 00:13:21,790
subdirectory I'll also point out that I

00:13:19,180 --> 00:13:27,009
have you need to define a unique name

00:13:21,790 --> 00:13:30,490
because do it uses the name to tell

00:13:27,009 --> 00:13:31,990
unique tasks apart so you need a unique

00:13:30,490 --> 00:13:33,370
name for each task just so that it knows

00:13:31,990 --> 00:13:36,790
and can resolve all the dependencies

00:13:33,370 --> 00:13:41,360
correctly without going crazy so this

00:13:36,790 --> 00:13:45,530
will run and download 3d data files and

00:13:41,360 --> 00:13:45,530
save them into a particular location

00:13:48,050 --> 00:13:53,850
this next task is the companion to that

00:13:52,140 --> 00:13:56,520
so after we've downloaded some data

00:13:53,850 --> 00:13:59,100
obviously we want to go through and read

00:13:56,520 --> 00:14:05,550
and do the same plot we did for all of

00:13:59,100 --> 00:14:08,160
that data so in this case I can actually

00:14:05,550 --> 00:14:11,760
tell me what are the data files i

00:14:08,160 --> 00:14:13,440
actually have present and i'm going to

00:14:11,760 --> 00:14:15,240
generate a task for each of the data

00:14:13,440 --> 00:14:17,960
files in that directory and each of

00:14:15,240 --> 00:14:22,380
those tasks is going to generate the

00:14:17,960 --> 00:14:24,060
graph from that data file so I have a

00:14:22,380 --> 00:14:25,650
task to download sorry i have an

00:14:24,060 --> 00:14:26,880
individual task to download each of the

00:14:25,650 --> 00:14:30,300
latest data files and then i have an

00:14:26,880 --> 00:14:32,910
individual task to process each of the

00:14:30,300 --> 00:14:36,450
data files in that data directory I'm

00:14:32,910 --> 00:14:40,800
also just point out that this decorator

00:14:36,450 --> 00:14:43,170
at create after it's just to overcome

00:14:40,800 --> 00:14:45,270
one limitation of do it and that is when

00:14:43,170 --> 00:14:48,000
it passes a file it passes all of the

00:14:45,270 --> 00:14:51,150
tasks at the beginning and builds up and

00:14:48,000 --> 00:14:54,180
builds up that view however if you run

00:14:51,150 --> 00:14:55,470
this if you didn't have it it would

00:14:54,180 --> 00:14:57,780
build it up it would find there's no

00:14:55,470 --> 00:14:59,010
data files in that directory and it just

00:14:57,780 --> 00:15:01,230
download some new ones but wouldn't

00:14:59,010 --> 00:15:04,290
actually do anything with them so all

00:15:01,230 --> 00:15:05,730
that decorators that is don't try and do

00:15:04,290 --> 00:15:07,560
it don't try and even build this task

00:15:05,730 --> 00:15:10,010
until that other task is completed so

00:15:07,560 --> 00:15:12,960
it's just a way of controlling the flow

00:15:10,010 --> 00:15:15,110
through the through that application so

00:15:12,960 --> 00:15:15,110
if we

00:15:21,600 --> 00:15:29,110
okay so perhaps less impressive when it

00:15:26,560 --> 00:15:32,080
runs on localhost unless you like the

00:15:29,110 --> 00:15:34,510
really big numbers on w get so it has

00:15:32,080 --> 00:15:36,190
downloaded three data flows it's now

00:15:34,510 --> 00:15:40,060
going to run through and run a long run

00:15:36,190 --> 00:15:43,090
a 10 second plot job on each of those

00:15:40,060 --> 00:15:46,270
data files and we're going to have the

00:15:43,090 --> 00:15:53,280
results saved into results I'm just

00:15:46,270 --> 00:15:53,280
gonna so we have april may and june

00:15:53,580 --> 00:15:59,260
plots of the weather and as you can see

00:15:57,280 --> 00:16:01,060
for brisbane whether it's really really

00:15:59,260 --> 00:16:09,040
terrible it's obviously very cold here

00:16:01,060 --> 00:16:10,810
we can't stand it so that's the basic

00:16:09,040 --> 00:16:12,820
idea because you're writing in Python

00:16:10,810 --> 00:16:14,860
you can programmatically generate your

00:16:12,820 --> 00:16:16,360
tasks although this is kind of the

00:16:14,860 --> 00:16:18,640
benefit of having a slight limp over

00:16:16,360 --> 00:16:20,260
both syntax for defining a task in terms

00:16:18,640 --> 00:16:22,960
of a dictionary is that it actually

00:16:20,260 --> 00:16:25,450
makes it so much easier to generate all

00:16:22,960 --> 00:16:27,010
of these bits and pieces now I'm just

00:16:25,450 --> 00:16:32,130
going to point out a couple of extra

00:16:27,010 --> 00:16:32,130
little bits and pieces before I forget

00:16:33,750 --> 00:16:39,580
so do it has a whole bunch of utility

00:16:38,110 --> 00:16:40,960
routines to tell you what's going on

00:16:39,580 --> 00:16:43,690
even when you have automatically

00:16:40,960 --> 00:16:45,970
generated tasks you can run do it lists

00:16:43,690 --> 00:16:48,070
sorry do it lists that subcommand will

00:16:45,970 --> 00:16:51,940
tell you these are all the tasks I know

00:16:48,070 --> 00:16:56,770
about for this particular directory so

00:16:51,940 --> 00:16:59,320
if if we wanted to we could then select

00:16:56,770 --> 00:17:01,900
say plot if it's for example we had a

00:16:59,320 --> 00:17:03,940
much larger change of 10 connected tiles

00:17:01,900 --> 00:17:06,040
we could just say pick out one of them

00:17:03,940 --> 00:17:07,420
it'll execute that one and only the

00:17:06,040 --> 00:17:09,810
dependencies of that one or not go

00:17:07,420 --> 00:17:12,430
further through the train so you can run

00:17:09,810 --> 00:17:14,020
you don't need to do any more work it's

00:17:12,430 --> 00:17:15,820
all past and worked out but I do it it

00:17:14,020 --> 00:17:18,310
tells you what tasks you have available

00:17:15,820 --> 00:17:19,720
and then you can run specific tasks

00:17:18,310 --> 00:17:24,400
within that if you just want to look at

00:17:19,720 --> 00:17:27,720
one bit one one piece of it I'll just

00:17:24,400 --> 00:17:27,720
point out one one more thing

00:17:28,870 --> 00:17:34,760
so do it just keeps a database in that

00:17:32,210 --> 00:17:39,140
working directory and that keeps the

00:17:34,760 --> 00:17:41,690
keeps track of the task names a hash of

00:17:39,140 --> 00:17:44,060
all of the action dependencies and

00:17:41,690 --> 00:17:45,740
targets Justin so it notice what's going

00:17:44,060 --> 00:17:47,600
on so that database is how it keeps

00:17:45,740 --> 00:17:48,980
track of what you've done what you

00:17:47,600 --> 00:17:53,780
haven't done what tasks need to be run

00:17:48,980 --> 00:17:55,370
later and so on so I'll just point out

00:17:53,780 --> 00:18:01,070
one thing I wrote the last thing I'm

00:17:55,370 --> 00:18:04,550
going to look at is a real world example

00:18:01,070 --> 00:18:07,970
from Nicola so nickel there is a static

00:18:04,550 --> 00:18:11,570
website generator and it uses do it

00:18:07,970 --> 00:18:12,620
heavily to actually orchestrate all of

00:18:11,570 --> 00:18:14,240
the tasks because if you're making a

00:18:12,620 --> 00:18:16,040
static website then you obviously have

00:18:14,240 --> 00:18:17,570
things like you make a gallery from some

00:18:16,040 --> 00:18:20,450
images you resize some images to

00:18:17,570 --> 00:18:23,210
websites web size you'll construct the

00:18:20,450 --> 00:18:27,110
RSS feed so nuclear is basically just a

00:18:23,210 --> 00:18:28,850
layer on the top of do it so it'll have

00:18:27,110 --> 00:18:32,030
a bunch of plugins that do something

00:18:28,850 --> 00:18:34,850
like this so create galleries just

00:18:32,030 --> 00:18:36,650
creates a bunch of tasks for each

00:18:34,850 --> 00:18:38,900
gallery you have defined in your website

00:18:36,650 --> 00:18:40,520
so this is an example of

00:18:38,900 --> 00:18:41,690
programmatically generating all of the

00:18:40,520 --> 00:18:43,370
bits and pieces you need for your

00:18:41,690 --> 00:18:44,600
website and nuclear does this so that

00:18:43,370 --> 00:18:45,980
you don't need to regenerate the whole

00:18:44,600 --> 00:18:48,290
thing at once just a little bits that

00:18:45,980 --> 00:18:50,180
have changed and a little bit sort of

00:18:48,290 --> 00:18:55,850
change specified by all the tasks coming

00:18:50,180 --> 00:18:57,410
out of this so the main the main magic

00:18:55,850 --> 00:18:59,000
and Nicola is it just iterates through

00:18:57,410 --> 00:19:01,640
all the plugins that knows about says

00:18:59,000 --> 00:19:03,650
give me the tasks you've generated and

00:19:01,640 --> 00:19:05,210
then hands it off to do it Nicola

00:19:03,650 --> 00:19:06,860
doesn't actually do any of the work it

00:19:05,210 --> 00:19:09,350
just gives it to do it to fiddle around

00:19:06,860 --> 00:19:11,630
and make everything happen so the whole

00:19:09,350 --> 00:19:14,090
thing is just the plugins are all

00:19:11,630 --> 00:19:16,790
defined a bunch of tasks Nicola hands it

00:19:14,090 --> 00:19:18,110
off to do it and it regenerates only two

00:19:16,790 --> 00:19:23,900
bits and pieces of the website that

00:19:18,110 --> 00:19:25,760
actually matter just a couple of things

00:19:23,900 --> 00:19:28,100
I think I mentioned some of them one is

00:19:25,760 --> 00:19:30,440
if you're not on Windows you can use do

00:19:28,100 --> 00:19:32,510
it auto and it will automatically watch

00:19:30,440 --> 00:19:34,010
your directory and the moment one of the

00:19:32,510 --> 00:19:35,900
dependencies of a task change it will

00:19:34,010 --> 00:19:37,640
run that one again that's really nice

00:19:35,900 --> 00:19:39,320
when you're just trying to refine that

00:19:37,640 --> 00:19:40,830
tiny little piece of a figure at the end

00:19:39,320 --> 00:19:43,409
of a pipeline

00:19:40,830 --> 00:19:45,210
in the format you need for publication

00:19:43,409 --> 00:19:47,240
so you change your file you hit save and

00:19:45,210 --> 00:19:51,809
it automatically generates it for you

00:19:47,240 --> 00:19:53,429
you can also if you have if you have

00:19:51,809 --> 00:19:55,260
independent tasks you can run them in

00:19:53,429 --> 00:19:59,820
parallel by specifying a number of jobs

00:19:55,260 --> 00:20:01,260
and there's a whole lot more a couple of

00:19:59,820 --> 00:20:05,490
things I can think of off the top of my

00:20:01,260 --> 00:20:09,000
head if you have a particular task that

00:20:05,490 --> 00:20:12,149
needs a special something set up in its

00:20:09,000 --> 00:20:13,799
environment or needs a special tear down

00:20:12,149 --> 00:20:17,909
after its run you can define those as

00:20:13,799 --> 00:20:19,440
actions if you wanted to define

00:20:17,909 --> 00:20:21,090
parameters that will be passed through

00:20:19,440 --> 00:20:27,210
that command on the command line you can

00:20:21,090 --> 00:20:31,289
do that with a params key in your task

00:20:27,210 --> 00:20:32,789
definition dictionary and so on so

00:20:31,289 --> 00:20:34,260
there's lots and lots of little bits and

00:20:32,789 --> 00:20:37,169
pieces and niceties to make this all

00:20:34,260 --> 00:20:38,760
happen you don't have to worry too much

00:20:37,169 --> 00:20:40,409
about it you let do it do all the work

00:20:38,760 --> 00:20:42,600
you just specify what the individual

00:20:40,409 --> 00:20:44,610
tasks look like and it works out that if

00:20:42,600 --> 00:20:49,289
it works out what needs to run when for

00:20:44,610 --> 00:20:53,250
you don't search for do it you'll never

00:20:49,289 --> 00:20:55,500
find anything because it's it's

00:20:53,250 --> 00:20:57,919
frustratingly unglue global tripe I do

00:20:55,500 --> 00:20:59,669
it otherwise you'll have trouble I

00:20:57,919 --> 00:21:02,010
wouldn't have thought that would be a

00:20:59,669 --> 00:21:06,450
bad name to search for but apparently it

00:21:02,010 --> 00:21:09,120
is that's my email address i will put

00:21:06,450 --> 00:21:12,179
some i will put the examples I've talked

00:21:09,120 --> 00:21:16,940
about there eventually when I had time

00:21:12,179 --> 00:21:16,940
when I'm not going to fall over thank

00:21:23,820 --> 00:21:43,630
okay great do we have any questions for

00:21:26,590 --> 00:21:46,060
Sam so I've automated tasks in a simple

00:21:43,630 --> 00:21:48,100
way using Jenkins and I've avoided doing

00:21:46,060 --> 00:21:51,340
it in a complicated way using a job

00:21:48,100 --> 00:21:55,360
scheduler like something called silk cyl

00:21:51,340 --> 00:21:57,040
see something something lots of C's did

00:21:55,360 --> 00:21:59,140
you compare and contrast this with any

00:21:57,040 --> 00:22:00,670
other job automation and dependency

00:21:59,140 --> 00:22:05,140
management and what are the relative

00:22:00,670 --> 00:22:07,330
benefits the short answer is I didn't do

00:22:05,140 --> 00:22:09,280
an exhaustive search this kind of

00:22:07,330 --> 00:22:11,110
satisfied my needs very early on so I

00:22:09,280 --> 00:22:13,570
didn't want to go down the rabbit hole

00:22:11,110 --> 00:22:15,550
of a is better than B but slightly

00:22:13,570 --> 00:22:17,920
better than see but maybe tea is better

00:22:15,550 --> 00:22:20,170
for this use case I I liked it because a

00:22:17,920 --> 00:22:21,550
it was pure python the main I would just

00:22:20,170 --> 00:22:25,000
say that the main motivators were it was

00:22:21,550 --> 00:22:26,800
pure python and it didn't require a lot

00:22:25,000 --> 00:22:28,960
of mental overhead to think about I

00:22:26,800 --> 00:22:30,280
can't I haven't done an extensive survey

00:22:28,960 --> 00:22:38,170
in comparison to others so I can't

00:22:30,280 --> 00:22:40,000
really comment on that unfortunate up

00:22:38,170 --> 00:22:42,640
this little worried question from what

00:22:40,000 --> 00:22:45,070
Tennessee said did you get any chance to

00:22:42,640 --> 00:22:48,070
also look into the NI pi which is for

00:22:45,070 --> 00:22:50,130
the new imaging pipelines stuff or you

00:22:48,070 --> 00:22:53,080
have no I haven't because i'm not doing

00:22:50,130 --> 00:22:55,120
neuroimaging like like why but I feel

00:22:53,080 --> 00:22:57,600
you haven't had any experience with now

00:22:55,120 --> 00:22:57,600
I have not

00:23:02,880 --> 00:23:09,340
so Oh miss lad um if you already know

00:23:07,090 --> 00:23:11,710
python what's the overhead to get in to

00:23:09,340 --> 00:23:13,720
do it what how would you is it a week is

00:23:11,710 --> 00:23:15,309
it two weeks but what would you suggest

00:23:13,720 --> 00:23:19,330
to people about how long it's going to

00:23:15,309 --> 00:23:22,360
take them to get up to speed assuming

00:23:19,330 --> 00:23:24,370
you have a little bit of experience in

00:23:22,360 --> 00:23:27,460
both and I don't think that it's less

00:23:24,370 --> 00:23:29,289
than a week assuming you know exactly

00:23:27,460 --> 00:23:30,549
what tough assuming you know the tasks

00:23:29,289 --> 00:23:33,010
you're trying to automate I don't think

00:23:30,549 --> 00:23:34,390
it's going to be more than that if you

00:23:33,010 --> 00:23:36,549
have less experience that we overhead

00:23:34,390 --> 00:23:38,429
with learning idiot idiomatic bits and

00:23:36,549 --> 00:23:40,360
pieces of the Bison but apart from that

00:23:38,429 --> 00:23:42,370
don't think there's a lot of overhead

00:23:40,360 --> 00:23:44,409
it's certainly not like learning a whole

00:23:42,370 --> 00:23:54,720
new language from scratch that hey it's

00:23:44,409 --> 00:23:54,720
just used for building stuff go on

00:23:55,570 --> 00:24:00,250
not really a serious question but are

00:23:58,580 --> 00:24:04,070
you familiar with Shia LaBeouf and

00:24:00,250 --> 00:24:05,900
here's our do it performance it would

00:24:04,070 --> 00:24:08,960
have been awesome if you started or

00:24:05,900 --> 00:24:15,800
ended the presentation with the video of

00:24:08,960 --> 00:24:28,160
him do it I will consider that for next

00:24:15,800 --> 00:24:30,080
day I would just do it okay so unless

00:24:28,160 --> 00:24:32,450
there are any other questions I think we

00:24:30,080 --> 00:24:35,080
can get to afternoon tea a couple of

00:24:32,450 --> 00:24:35,080
minutes early

00:24:44,070 --> 00:24:46,130

YouTube URL: https://www.youtube.com/watch?v=ccFqbCwcLko


