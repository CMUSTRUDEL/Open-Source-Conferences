Title: Karaage Gardening by Brian May
Publication date: 2015-08-06
Playlist: PyCon Australia 2015 Science & Data Miniconf
Description: 
	Karaage is an open source Python/Django application for managing users and projects on HPC clusters. It is being used in production in a number of sites across Australia. This talk will discuss turning a messy legacy software base into a modern software platform that is much a cleaner mess ("gardening"). I will also talk about some of the lessons learnt along the way, including things that went well, and things that could have been handled better.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:09,540 --> 00:00:14,639
pretty well so I'm about to introduce

00:00:12,090 --> 00:00:16,470
our brine here Brian now works on

00:00:14,639 --> 00:00:19,170
computers are much bigger than the rest

00:00:16,470 --> 00:00:21,210
of us have access to it's also as i

00:00:19,170 --> 00:00:23,550
understand it his first event of

00:00:21,210 --> 00:00:25,320
speaking at this scale so I'd like you

00:00:23,550 --> 00:00:37,290
to add to his nerves by giving him a

00:00:25,320 --> 00:00:39,239
raucous welcome hello my name is Brian

00:00:37,290 --> 00:00:41,100
May and playing the passion to Philippa

00:00:39,239 --> 00:00:44,060
I'm pleased to announce that I'll be a

00:00:41,100 --> 00:00:47,220
karate expert for the next 25 minutes

00:00:44,060 --> 00:00:49,320
this is a it going to be a talk about an

00:00:47,220 --> 00:00:51,720
identity management system not to be

00:00:49,320 --> 00:00:53,640
confused with three ip8 which will be a

00:00:51,720 --> 00:00:57,470
much better talk on identity management

00:00:53,640 --> 00:00:57,470
systems being held in the next room

00:00:59,780 --> 00:01:08,310
first it's disclaimer which I'll talk

00:01:02,579 --> 00:01:13,049
about more about later so our first

00:01:08,310 --> 00:01:14,760
question is why is karogi Wikipedia is

00:01:13,049 --> 00:01:17,430
considered an authoritative source of

00:01:14,760 --> 00:01:21,180
information let's see what I wikipedia

00:01:17,430 --> 00:01:28,049
says some karate karate is deep fried

00:01:21,180 --> 00:01:30,479
chicken Draghi is a young unfortunately

00:01:28,049 --> 00:01:33,299
this isn't fair oggi I am going to be

00:01:30,479 --> 00:01:35,520
talking about if you decide for chicken

00:01:33,299 --> 00:01:41,850
I believe a number of nearby restaurants

00:01:35,520 --> 00:01:47,729
itself is sort of Karachi groggy is a

00:01:41,850 --> 00:01:49,470
HPC cluster management system it is open

00:01:47,729 --> 00:01:52,799
source software initially created in

00:01:49,470 --> 00:01:55,070
2008 to automate to management of users

00:01:52,799 --> 00:01:58,799
on clusters at fee-free Alliance

00:01:55,070 --> 00:02:02,070
formerly known as feedback at this time

00:01:58,799 --> 00:02:04,200
users were added by hand to NIS and we

00:02:02,070 --> 00:02:06,840
wanted to upgrade to an automatic l DET

00:02:04,200 --> 00:02:09,929
solution a number of sites across

00:02:06,840 --> 00:02:12,289
australia now use Karate for cluster

00:02:09,929 --> 00:02:12,289
management

00:02:13,880 --> 00:02:19,310
kuraki takes inputs from a number of

00:02:16,130 --> 00:02:21,620
sources and writes the results to one or

00:02:19,310 --> 00:02:24,500
more data source tools such as mo adds

00:02:21,620 --> 00:02:31,420
learn ldap alpha backgrounds could also

00:02:24,500 --> 00:02:35,270
be written eg for kerberos Caracas

00:02:31,420 --> 00:02:36,740
correction groggy also supports storing

00:02:35,270 --> 00:02:38,990
and reporting on cluster usage

00:02:36,740 --> 00:02:45,260
information recorded by slow and Moab

00:02:38,990 --> 00:02:48,260
which is interesting because sites

00:02:45,260 --> 00:02:52,240
required storing or historic usage

00:02:48,260 --> 00:02:54,560
information into one database table and

00:02:52,240 --> 00:02:59,690
typically you can end up with millions

00:02:54,560 --> 00:03:03,140
of rows like 11 million rows one site s

00:02:59,690 --> 00:03:06,590
and this means retrieving results can be

00:03:03,140 --> 00:03:08,960
slow for a web-based system so my

00:03:06,590 --> 00:03:12,680
predecessor had daily acacia tables so

00:03:08,960 --> 00:03:15,320
the first time you'd access a particular

00:03:12,680 --> 00:03:19,850
few ill patient information and then

00:03:15,320 --> 00:03:22,420
display it so on subsequent use you

00:03:19,850 --> 00:03:26,690
would it would be much faster

00:03:22,420 --> 00:03:29,390
unfortunately just didn't work for view

00:03:26,690 --> 00:03:32,240
first times he person try to access a

00:03:29,390 --> 00:03:35,350
page and if you try and access a page

00:03:32,240 --> 00:03:38,180
and it takes 30 seconds to load a

00:03:35,350 --> 00:03:42,350
typical user is going to try and click

00:03:38,180 --> 00:03:45,230
reload and 15 turn will create another

00:03:42,350 --> 00:03:47,840
process that will try and generate user

00:03:45,230 --> 00:03:50,150
information in case it and essentially

00:03:47,840 --> 00:03:53,270
you end up with that situation we've got

00:03:50,150 --> 00:03:57,709
more than one result in fication table

00:03:53,270 --> 00:03:59,900
and the GD on go get method then we'll

00:03:57,709 --> 00:04:02,870
return multiple results found every time

00:03:59,900 --> 00:04:10,070
you try view it and of course that isn't

00:04:02,870 --> 00:04:12,350
going to work it just crushes so Tyson

00:04:10,070 --> 00:04:16,730
from common code came up with a solution

00:04:12,350 --> 00:04:19,220
to this he's got a aggregated tables so

00:04:16,730 --> 00:04:21,979
all the information is aggregated on a

00:04:19,220 --> 00:04:25,120
daily basis and it's substantially

00:04:21,979 --> 00:04:25,120
reduces the number of

00:04:25,220 --> 00:04:34,950
rows in the table and it's part of

00:04:31,260 --> 00:04:38,220
karate for so if karate for where karate

00:04:34,950 --> 00:04:43,170
falls released that would be one of us

00:04:38,220 --> 00:04:46,700
substantial benefits anyway qiraji has

00:04:43,170 --> 00:04:52,620
been development for over eight years

00:04:46,700 --> 00:04:59,310
from 2008 to through 2 2015 when it was

00:04:52,620 --> 00:05:01,260
my last date fee-free Alliance for most

00:04:59,310 --> 00:05:02,910
recent work was to try and make karate

00:05:01,260 --> 00:05:06,210
more general and work with non-free

00:05:02,910 --> 00:05:08,190
alliance requirements common code as I

00:05:06,210 --> 00:05:13,170
mentioned before updated to database

00:05:08,190 --> 00:05:17,970
schemas found bugs and made improvements

00:05:13,170 --> 00:05:22,830
to V tests then unfortunately for our

00:05:17,970 --> 00:05:26,600
funding from the VLSC I tried up now

00:05:22,830 --> 00:05:29,130
it's stage I took fair for tree I

00:05:26,600 --> 00:05:34,050
cleaned up all the changes and merge

00:05:29,130 --> 00:05:36,360
them into qiraji for branch before

00:05:34,050 --> 00:05:39,030
getting to our detail some important

00:05:36,360 --> 00:05:42,780
terminology because otherwise you'll get

00:05:39,030 --> 00:05:45,320
totally confused a machine category is a

00:05:42,780 --> 00:05:48,200
set of clusters which are independent

00:05:45,320 --> 00:05:50,730
including independent ldap servers

00:05:48,200 --> 00:05:52,410
typically first feature israel use now

00:05:50,730 --> 00:05:57,540
except for see free alliance for

00:05:52,410 --> 00:05:59,880
historic information a person can have

00:05:57,540 --> 00:06:01,050
one or more accounts with each account

00:05:59,880 --> 00:06:03,690
belonging to a different machine

00:06:01,050 --> 00:06:08,730
category as that each account will get

00:06:03,690 --> 00:06:11,310
written to a different ldap server when

00:06:08,730 --> 00:06:13,020
I took over karate at Metro requirements

00:06:11,310 --> 00:06:14,820
alpha it was very difficult to

00:06:13,020 --> 00:06:16,680
understand the code or adapt to our

00:06:14,820 --> 00:06:19,170
tragic demands there are many

00:06:16,680 --> 00:06:21,660
improvements I made to its simplify the

00:06:19,170 --> 00:06:23,700
code for example what could be simpler

00:06:21,660 --> 00:06:27,920
than locking an account all you need to

00:06:23,700 --> 00:06:27,920
do is set an attribute in ldap right

00:06:28,830 --> 00:06:34,770
pizzas wafi a locking code looks like

00:06:31,970 --> 00:06:37,560
first for few code caused a lot method

00:06:34,770 --> 00:06:39,420
on person fears in turn cause he opened

00:06:37,560 --> 00:06:42,720
out up datastore which inherits from

00:06:39,420 --> 00:06:44,910
ldap which in turn inherits from for

00:06:42,720 --> 00:06:49,080
generic data store class i show you if

00:06:44,910 --> 00:06:51,570
he is data storm efforts in sequence if

00:06:49,080 --> 00:06:53,850
you open outdated style method cause am

00:06:51,570 --> 00:06:56,730
effort from placards postally a generic

00:06:53,850 --> 00:07:00,540
ldap library first method sets the

00:06:56,730 --> 00:07:03,540
openldap specific attribute and cannot

00:07:00,540 --> 00:07:06,860
be used for directly sir for 389 we also

00:07:03,540 --> 00:07:12,300
call off the inherited method from the

00:07:06,860 --> 00:07:14,910
elder data store so we've got a generic

00:07:12,300 --> 00:07:20,280
library that it's not actually generic

00:07:14,910 --> 00:07:23,100
get specific to openldap the elder

00:07:20,280 --> 00:07:25,080
method sets and attribute required for

00:07:23,100 --> 00:07:28,770
fear directory server free at nine fat

00:07:25,080 --> 00:07:30,360
is not required for openldap it also

00:07:28,770 --> 00:07:35,520
causes inherited methods for such a

00:07:30,360 --> 00:07:37,260
narrow class and for generic class we

00:07:35,520 --> 00:07:39,690
were locking the person but no fee

00:07:37,260 --> 00:07:41,220
accounts associated with person finally

00:07:39,690 --> 00:07:47,690
we've got to jump back to the stop of

00:07:41,220 --> 00:07:50,940
this data to request for every account

00:07:47,690 --> 00:07:54,180
to fix up the accounts now shall we

00:07:50,940 --> 00:07:57,000
fixed up for people so now the layers

00:07:54,180 --> 00:07:58,800
look like this note that while we acting

00:07:57,000 --> 00:08:02,970
on the accounts we've bye parsley to

00:07:58,800 --> 00:08:06,900
jangle accounts model so we'll look at

00:08:02,970 --> 00:08:10,470
the account data store methods if

00:08:06,900 --> 00:08:12,620
there's no ldap code openldap specific

00:08:10,470 --> 00:08:15,630
code so you use inherited function

00:08:12,620 --> 00:08:18,780
similarly says no l-dub specific code so

00:08:15,630 --> 00:08:20,910
use inherited function and for generic

00:08:18,780 --> 00:08:23,220
code we safer current shell into Franco

00:08:20,910 --> 00:08:25,440
DB model and then we call for top-level

00:08:23,220 --> 00:08:29,150
datastore method again to change the

00:08:25,440 --> 00:08:32,550
shelter a specifically defined block gel

00:08:29,150 --> 00:08:36,180
so now for your simple load chart looks

00:08:32,550 --> 00:08:36,960
like this in other words it's a complete

00:08:36,180 --> 00:08:41,630
mess for some

00:08:36,960 --> 00:08:41,630
if that's meant to be very simple a

00:08:41,840 --> 00:08:46,800
result rest by replacing placard

00:08:44,550 --> 00:08:51,180
libraries my own el Diablo babe called

00:08:46,800 --> 00:08:53,190
tiata phenol red lights the ER data

00:08:51,180 --> 00:08:56,460
stores in karate to be less outback

00:08:53,190 --> 00:09:00,000
centric and easier to understand so you

00:08:56,460 --> 00:09:03,150
can now use data stores for not just our

00:09:00,000 --> 00:09:07,080
dap you can use them for other day alpha

00:09:03,150 --> 00:09:15,660
backends like no lab or saloon right in

00:09:07,080 --> 00:09:17,640
theory kerberos or other things I'm I

00:09:15,660 --> 00:09:23,100
made from mistake of attending Andrew

00:09:17,640 --> 00:09:25,920
Bartlett's talk in LCA 2015 so I'll just

00:09:23,100 --> 00:09:28,680
quote what he said default ackles i

00:09:25,920 --> 00:09:30,240
found i looked at openldap and i found

00:09:28,680 --> 00:09:33,000
it to fall tackle across the whole

00:09:30,240 --> 00:09:35,700
directory when you start finally you're

00:09:33,000 --> 00:09:38,850
going to build everything else on is to

00:09:35,700 --> 00:09:40,770
start by self right seems reasonable

00:09:38,850 --> 00:09:43,680
enough it's a phone book you can update

00:09:40,770 --> 00:09:46,110
your phone number do you want to be able

00:09:43,680 --> 00:09:50,910
to update your uid number hey Darrell

00:09:46,110 --> 00:09:53,850
what number would you like any 140 well

00:09:50,910 --> 00:09:55,740
yeah it's good thing our karate got

00:09:53,850 --> 00:09:57,660
first right first people stuffed up

00:09:55,740 --> 00:10:02,970
there no spectacular lake I wouldn't

00:09:57,660 --> 00:10:05,070
mess up like that but and for car key

00:10:02,970 --> 00:10:06,930
documentation is good i used here so all

00:10:05,070 --> 00:10:09,270
i recently installed so everything is

00:10:06,930 --> 00:10:15,110
good right well trust worries him for

00:10:09,270 --> 00:10:18,110
documentation to start by self right oh

00:10:15,110 --> 00:10:18,110
crap

00:10:18,670 --> 00:10:23,120
denial quick fix to for documentation

00:10:21,259 --> 00:10:25,250
during the middle of Andrew buckler's

00:10:23,120 --> 00:10:26,990
talk make sure that change message

00:10:25,250 --> 00:10:28,850
doesn't give away anything important

00:10:26,990 --> 00:10:36,139
because they can't actually updated

00:10:28,850 --> 00:10:38,720
sites justice yet also note so is my

00:10:36,139 --> 00:10:41,509
tests I wasn't able to impersonate a

00:10:38,720 --> 00:10:49,250
route however any other users share

00:10:41,509 --> 00:10:56,120
going upstream elder documentation also

00:10:49,250 --> 00:10:59,149
has bad examples of the four main

00:10:56,120 --> 00:11:01,069
problem was on debian in stores which

00:10:59,149 --> 00:11:04,940
would automatically configures the are

00:11:01,069 --> 00:11:09,009
caused by default too bad failures onda

00:11:04,940 --> 00:11:11,240
liban rizzi I made sure security

00:11:09,009 --> 00:11:14,149
advisories were issued and fixed

00:11:11,240 --> 00:11:17,300
packages for Debian stable at the time

00:11:14,149 --> 00:11:19,639
for easy night for fixed packages don't

00:11:17,300 --> 00:11:21,980
fix the ACLU's for you but should warn

00:11:19,639 --> 00:11:28,430
you if they appear to be insecure when

00:11:21,980 --> 00:11:32,389
you update the package red doesn't set

00:11:28,430 --> 00:11:34,430
up these cycles by default however that

00:11:32,389 --> 00:11:36,920
doesn't mean redhead systems won't be

00:11:34,430 --> 00:11:38,779
final brought to this issue it depends

00:11:36,920 --> 00:11:44,240
on the system administrator who

00:11:38,779 --> 00:11:46,430
configured fit add some silly get issues

00:11:44,240 --> 00:11:50,839
I've encountered that they were driving

00:11:46,430 --> 00:11:53,689
me and say so I have a number of changes

00:11:50,839 --> 00:11:56,839
in my working directory and I only want

00:11:53,689 --> 00:12:02,800
to commit one specific change estate

00:11:56,839 --> 00:12:05,240
retainers and I commit whoops I just

00:12:02,800 --> 00:12:08,689
committed everything and lost my

00:12:05,240 --> 00:12:12,319
carefully staged changes because commit

00:12:08,689 --> 00:12:15,589
dash egg overrides of stage stage

00:12:12,319 --> 00:12:20,439
changes and commits everything I do not

00:12:15,589 --> 00:12:23,540
want my to say but I just chose it as

00:12:20,439 --> 00:12:27,589
automatic muscle memory

00:12:23,540 --> 00:12:31,550
oops and another silly mistake creature

00:12:27,589 --> 00:12:33,649
I've been making I want to update your

00:12:31,550 --> 00:12:39,880
last commit first time it still did not

00:12:33,649 --> 00:12:43,279
work so I Yogi's git commit and then

00:12:39,880 --> 00:12:49,880
only I was supposed to use took dashes

00:12:43,279 --> 00:12:54,110
and only one n so for that a commits

00:12:49,880 --> 00:13:05,899
everything and for that inserts a

00:12:54,110 --> 00:13:10,130
message to mend so I ended up trading

00:13:05,899 --> 00:13:15,110
arata forget to capture for you so minus

00:13:10,130 --> 00:13:17,029
a flag and if I do use the minus a flake

00:13:15,110 --> 00:13:21,680
it checks to make sure if there's no

00:13:17,029 --> 00:13:26,480
stage commits and this could be easily

00:13:21,680 --> 00:13:32,690
be improved but it catches my mistakes

00:13:26,480 --> 00:13:36,850
which is for my thing recently they've

00:13:32,690 --> 00:13:39,769
been big changes in fee for your lines I

00:13:36,850 --> 00:13:43,810
was made redundant from fee-free lights

00:13:39,769 --> 00:13:46,430
due to reasons unrelated to Karachi

00:13:43,810 --> 00:13:51,199
management went to pains to say it's

00:13:46,430 --> 00:13:53,389
nothing to do with your performance as a

00:13:51,199 --> 00:13:55,690
result I am no longer involved in its

00:13:53,389 --> 00:13:55,690
development

00:14:00,199 --> 00:14:11,970
what did I learn from my time developing

00:14:03,149 --> 00:14:13,529
karate lots of things yeah it my

00:14:11,970 --> 00:14:14,970
experience of karate is taught me a

00:14:13,529 --> 00:14:17,999
number of lessons when dealing with

00:14:14,970 --> 00:14:26,220
large projects such as karate I've got

00:14:17,999 --> 00:14:29,850
some things right such as working out

00:14:26,220 --> 00:14:33,839
how to fix broken code which wasn't

00:14:29,850 --> 00:14:37,739
always obvious how to fix it and I got

00:14:33,839 --> 00:14:40,290
some things wrong what's always been a

00:14:37,739 --> 00:14:43,069
mistake in karate fat it's had lots of

00:14:40,290 --> 00:14:46,049
installations on different sites and

00:14:43,069 --> 00:14:49,379
traditionally fear method of customizing

00:14:46,049 --> 00:14:52,559
karate just copy that complete file and

00:14:49,379 --> 00:14:56,449
halo cook and bake for one line change

00:14:52,559 --> 00:14:59,699
you want full of that site that towers a

00:14:56,449 --> 00:15:01,470
meant that any changes in karate would

00:14:59,699 --> 00:15:06,360
break installation when you put it back

00:15:01,470 --> 00:15:10,740
on fist fight because everything it

00:15:06,360 --> 00:15:14,720
would change his file and it would no

00:15:10,740 --> 00:15:14,720
longer be compatible is he local copy

00:15:16,860 --> 00:15:24,810
so it's much better to try and work out

00:15:19,689 --> 00:15:27,819
areas fifths API fact remains constant

00:15:24,810 --> 00:15:30,279
so you don't have to try and copy the

00:15:27,819 --> 00:15:33,550
entire file rather you just copy the

00:15:30,279 --> 00:15:45,069
 that you need to copy to make the

00:15:33,550 --> 00:15:48,310
local customizations and also fair with

00:15:45,069 --> 00:15:50,920
features removed along the lines that

00:15:48,310 --> 00:15:52,930
were removed because they were broken up

00:15:50,920 --> 00:15:55,600
what's the point of having a broken

00:15:52,930 --> 00:16:00,790
feature and I find that a lot of sites

00:15:55,600 --> 00:16:03,459
were actually relying off him the hand

00:16:00,790 --> 00:16:12,959
rather then removes them I shiraz fix

00:16:03,459 --> 00:16:12,959
tool so what is the future of Karachi

00:16:14,129 --> 00:16:18,990
the future of Karachi depends on the

00:16:17,410 --> 00:16:21,399
open source community including

00:16:18,990 --> 00:16:25,420
organizations like fee-free alliance and

00:16:21,399 --> 00:16:29,529
pls di so at the moment I'm not involved

00:16:25,420 --> 00:16:33,149
any in anything anyway unless somebody

00:16:29,529 --> 00:16:33,149
decides to employ me again

00:16:36,360 --> 00:16:39,680
so any questions

00:16:53,920 --> 00:17:04,069
um does karoge have sort of a mix of

00:17:01,000 --> 00:17:05,689
volunteer developers and paid developers

00:17:04,069 --> 00:17:10,819
or at least it used to and how was that

00:17:05,689 --> 00:17:13,760
managed I'm not for majority of

00:17:10,819 --> 00:17:16,699
development occurred through me through

00:17:13,760 --> 00:17:20,679
our free free alliance of how we did

00:17:16,699 --> 00:17:23,480
receive contributions from the VLSC I

00:17:20,679 --> 00:17:26,630
that treats a University of Melbourne

00:17:23,480 --> 00:17:30,290
organization and one stage we got

00:17:26,630 --> 00:17:37,040
contributions from nectar team also at

00:17:30,290 --> 00:17:39,710
University of Melbourne and also fel SAR

00:17:37,040 --> 00:17:44,480
car said contracted common code to work

00:17:39,710 --> 00:17:48,490
on Karate for a one-step but yeah most

00:17:44,480 --> 00:17:48,490
effective development was funny fur

00:17:55,660 --> 00:18:02,690
alright well we'll yep 10-2 so we'll

00:17:59,960 --> 00:18:04,490
come back here here at ten too if I take

00:18:02,690 --> 00:18:08,929
nothing else away i'm going to take away

00:18:04,490 --> 00:18:10,820
get dash a mm en D and actually try that

00:18:08,929 --> 00:18:12,559
out and just can just double check that

00:18:10,820 --> 00:18:17,350
because that was pretty impressive for

00:18:12,559 --> 00:18:17,350
me so yeah a bit big round of applause

00:18:25,260 --> 00:18:27,320

YouTube URL: https://www.youtube.com/watch?v=9yiiwcntx5M


