Title: From Flying Circus to Holy Grail: Migrating the Twilio API from PHP to Python
Publication date: 2016-08-16
Playlist: Pycon Australia 2016
Description: 
	Sam Kitajima-Kimbrel
https://2016.pycon-au.org/schedule/23/view_talk
Almost every software project of meaningful scale eventually runs into architectural problems. One of the larger issues we’ve dealt with at Twilio is an increasingly-brittle and hard-to-manage PHP codebase, originally responsible for running a website and public REST API. Rather than risk a from-scratch rewrite of the entire system, we chose to extract small and well-defined chunks one at a time into simple services using a common internal interface standard.

Given a new fleet of services and a set of internal REST APIs, how do we get to parity with the existing public API specifications? Rather than force every service to implement authentication, data validation, rate-limiting, and so on, we chose to build a simple federation service to translate and proxy customer requests to internal systems. Python was a natural choice for this application due to its flexibility, extensive library and testing ecosystem, and suitability for rapid prototyping and development.

But: how did we get from A to B? This talk will cover the details of Twilio’s past and current API architecture, how we adapted the service-oriented architecture pattern to build a consistent public interface, and the testing and deployment strategies we used to migrate 5 billion monthly requests from old to new systems with no downtime.
Captions: 
	00:00:00,230 --> 00:00:07,799
so finally for for this session we have

00:00:04,080 --> 00:00:11,790
Sam a kid Ogmo Kimbrel he works at

00:00:07,799 --> 00:00:14,130
twilio and has been working for the past

00:00:11,790 --> 00:00:18,150
two years on maintaining and scaling the

00:00:14,130 --> 00:00:21,020
twilio rest api so he's very much a

00:00:18,150 --> 00:00:24,330
Python enthusiast for many years and

00:00:21,020 --> 00:00:26,640
please welcome him to his talk from the

00:00:24,330 --> 00:00:31,880
Flying Circus Holy Grail migrating the

00:00:26,640 --> 00:00:31,880
twilio API from PHP Python so off you

00:00:33,890 --> 00:00:41,370
all right get ready here great thanks

00:00:37,739 --> 00:00:43,649
ever so yeah a of a question for the

00:00:41,370 --> 00:00:46,379
room put your hand up if you've ever

00:00:43,649 --> 00:00:48,450
wanted to take some genki old piece of

00:00:46,379 --> 00:00:49,500
code that has you know 200m lines and

00:00:48,450 --> 00:00:52,350
does everything your entire business

00:00:49,500 --> 00:00:55,110
operates and just tear it up and rewrite

00:00:52,350 --> 00:00:57,090
it from scratch great for the video the

00:00:55,110 --> 00:01:01,739
room is full of hands keep your hand up

00:00:57,090 --> 00:01:06,000
if you pull this off one two three five

00:01:01,739 --> 00:01:07,860
six okay so clearly we've all seen this

00:01:06,000 --> 00:01:10,650
go wrong right so our old code sucks

00:01:07,860 --> 00:01:14,010
let's rip it out redo it we fast forward

00:01:10,650 --> 00:01:15,840
12 months and yeah Rogers fought the

00:01:14,010 --> 00:01:17,909
rails or we didn't get to where I wanted

00:01:15,840 --> 00:01:20,880
to get or we deployed to prod and it

00:01:17,909 --> 00:01:22,320
fell over 12 months later right so since

00:01:20,880 --> 00:01:25,770
I'm standing here there's obviously a

00:01:22,320 --> 00:01:28,250
better way so hi I'm Sam that point

00:01:25,770 --> 00:01:31,079
Witter handle I have opinions there I

00:01:28,250 --> 00:01:32,369
worked for Cleo for three years through

00:01:31,079 --> 00:01:34,770
those like amber said we're on the API

00:01:32,369 --> 00:01:37,140
team where we did in fact migrate from

00:01:34,770 --> 00:01:39,540
our seven year old flying circus of PHP

00:01:37,140 --> 00:01:41,460
code to the holy grail of Python and

00:01:39,540 --> 00:01:42,990
federated services today I'm going to

00:01:41,460 --> 00:01:45,409
talk about techniques for replacing old

00:01:42,990 --> 00:01:47,880
code using this project as a case study

00:01:45,409 --> 00:01:49,799
if you're not familiar with twilio real

00:01:47,880 --> 00:01:52,020
quick we provide communications as a

00:01:49,799 --> 00:01:54,149
service so as a developer you can use

00:01:52,020 --> 00:01:56,610
our platform to build communication so

00:01:54,149 --> 00:01:59,280
phone calls text messages mms web RTC

00:01:56,610 --> 00:02:01,920
many other things these days into your

00:01:59,280 --> 00:02:04,200
app wherever you need to to put some

00:02:01,920 --> 00:02:06,299
context on here the rest api is very

00:02:04,200 --> 00:02:09,030
critical to our platform it exposes all

00:02:06,299 --> 00:02:11,670
of our entire feature set and at peak we

00:02:09,030 --> 00:02:12,580
now process 5,000 RPS and we maintain

00:02:11,670 --> 00:02:16,180
over 4

00:02:12,580 --> 00:02:17,920
I'm up time so with that in mind I'll

00:02:16,180 --> 00:02:20,530
start with a really brief overview of

00:02:17,920 --> 00:02:23,230
the total architecture so ancient

00:02:20,530 --> 00:02:25,630
history and 2008 we had pretty much one

00:02:23,230 --> 00:02:27,340
product that was folio voice you can

00:02:25,630 --> 00:02:28,810
make phone calls using our API and

00:02:27,340 --> 00:02:30,490
direct them in real time it's still

00:02:28,810 --> 00:02:33,340
pretty cool and we also had exactly to

00:02:30,490 --> 00:02:34,840
code bases we had tilia voice tech which

00:02:33,340 --> 00:02:36,220
was written in Java and handled

00:02:34,840 --> 00:02:37,990
everything that actually involved

00:02:36,220 --> 00:02:39,580
picking up a line to a carrier and

00:02:37,990 --> 00:02:42,310
making a phone call happen moving media

00:02:39,580 --> 00:02:46,180
back and forth and we had PHP which did

00:02:42,310 --> 00:02:48,280
everything else so we had the website

00:02:46,180 --> 00:02:50,140
the API the billing back end or internal

00:02:48,280 --> 00:02:53,110
admin tools and pretty much everything

00:02:50,140 --> 00:02:55,420
in PHP so basically contained a core set

00:02:53,110 --> 00:02:58,120
of domain objects and models and

00:02:55,420 --> 00:03:00,220
business logic for running to Leo as

00:02:58,120 --> 00:03:02,230
time went on this code base grew and

00:03:00,220 --> 00:03:03,910
grew and grew and we added more features

00:03:02,230 --> 00:03:06,340
to it right so by the time we launched

00:03:03,910 --> 00:03:09,340
SMS oh I totally missed something in

00:03:06,340 --> 00:03:10,870
here I'm sorry go back to this the

00:03:09,340 --> 00:03:13,570
database in the middle is how the two

00:03:10,870 --> 00:03:16,300
systems communicated so you would make a

00:03:13,570 --> 00:03:18,400
request to the API to Inc you a call now

00:03:16,300 --> 00:03:20,680
PHP would authenticate you validate your

00:03:18,400 --> 00:03:22,330
request and then drop a row into the

00:03:20,680 --> 00:03:24,820
calls table that said we'd like to make

00:03:22,330 --> 00:03:27,310
a call now java on the other side of the

00:03:24,820 --> 00:03:29,620
world will be pulling that database and

00:03:27,310 --> 00:03:31,090
pick up the init state calls pick up a

00:03:29,620 --> 00:03:32,560
phone line and make a call happen and

00:03:31,090 --> 00:03:35,769
then write state back in which could

00:03:32,560 --> 00:03:38,380
then query through the API there we go

00:03:35,769 --> 00:03:40,150
I've got the missing piece there so yeah

00:03:38,380 --> 00:03:41,800
by the time we launched SMS we knew had

00:03:40,150 --> 00:03:43,810
a queue better nice people is not a

00:03:41,800 --> 00:03:45,910
really great queuing system but we still

00:03:43,810 --> 00:03:47,980
relied on PHP and the database for just

00:03:45,910 --> 00:03:50,170
let everything else so again as we added

00:03:47,980 --> 00:03:53,190
features there might be a little smarter

00:03:50,170 --> 00:03:55,209
logic for the real time constraints but

00:03:53,190 --> 00:03:56,500
retrieving your records of everything

00:03:55,209 --> 00:03:57,760
you've done still just went straight

00:03:56,500 --> 00:04:01,900
through some PHP code and hit the

00:03:57,760 --> 00:04:03,610
database five years later we added a lot

00:04:01,900 --> 00:04:06,040
more things and their API just kept

00:04:03,610 --> 00:04:12,370
growing like this until 2013 then you

00:04:06,040 --> 00:04:14,470
realize we had some problems problems

00:04:12,370 --> 00:04:17,200
like difficult to place deploying all

00:04:14,470 --> 00:04:20,500
this PHP code was difficult it ran 12 or

00:04:17,200 --> 00:04:22,270
13 different roles but as a single repo

00:04:20,500 --> 00:04:24,370
all these roles process multiple

00:04:22,270 --> 00:04:26,020
functions but the core logic was shared

00:04:24,370 --> 00:04:26,440
right so we have these business objects

00:04:26,020 --> 00:04:28,440
the wrist

00:04:26,440 --> 00:04:30,280
between the website the API and so on

00:04:28,440 --> 00:04:31,840
changing something to make it work

00:04:30,280 --> 00:04:33,700
better on the web or employee new

00:04:31,840 --> 00:04:36,280
feature might very well break the API or

00:04:33,700 --> 00:04:37,720
vice versa so we always end up pulling

00:04:36,280 --> 00:04:39,970
together a massive release candidate

00:04:37,720 --> 00:04:41,470
branches and locking 10 developers in a

00:04:39,970 --> 00:04:44,830
room for two hours to verify everything

00:04:41,470 --> 00:04:46,000
against stage and by say verify

00:04:44,830 --> 00:04:48,580
everything I mean everything we knew

00:04:46,000 --> 00:04:52,240
about we were also had a not great in

00:04:48,580 --> 00:04:54,160
testing situation this took hours this

00:04:52,240 --> 00:04:55,450
system was difficult to understand in

00:04:54,160 --> 00:04:58,330
kind of two senses of the word here

00:04:55,450 --> 00:05:00,520
first the code had grown so fast that it

00:04:58,330 --> 00:05:02,440
was not very well organized figuring out

00:05:00,520 --> 00:05:04,680
what lived where and why I usually took

00:05:02,440 --> 00:05:07,030
a senior dev and half an afternoon and

00:05:04,680 --> 00:05:08,740
it wasn't well I'm is instrumented at

00:05:07,030 --> 00:05:10,150
all and so in production we never took

00:05:08,740 --> 00:05:11,830
the time to go through and add fine

00:05:10,150 --> 00:05:13,330
grained metrics to the system and so

00:05:11,830 --> 00:05:16,870
things would slow down in production we

00:05:13,330 --> 00:05:19,690
have no clue why and finally it was a

00:05:16,870 --> 00:05:21,850
operationally brittle and the rest api

00:05:19,690 --> 00:05:23,830
this surface with one major flaw we were

00:05:21,850 --> 00:05:26,230
running a single fleet to handle the API

00:05:23,830 --> 00:05:28,570
shaffer for all the API resources and

00:05:26,230 --> 00:05:30,190
those resources varied widely in their

00:05:28,570 --> 00:05:33,220
access patterns and how they performed

00:05:30,190 --> 00:05:36,790
so making a new call or sending an SMS

00:05:33,220 --> 00:05:38,919
message returns in 100 millas but if you

00:05:36,790 --> 00:05:41,730
go and ask us for a thousand calls from

00:05:38,919 --> 00:05:43,930
two years ago with to and from filter

00:05:41,730 --> 00:05:46,780
might take a couple seconds to dig that

00:05:43,930 --> 00:05:49,030
out of my sequel add in synchronous i/o

00:05:46,780 --> 00:05:51,130
thanks to PHP as well lack of anything

00:05:49,030 --> 00:05:54,640
else and we rented a couple really

00:05:51,130 --> 00:05:56,260
quickly look like this and he slowed

00:05:54,640 --> 00:05:57,580
down in a single resource even if

00:05:56,260 --> 00:05:59,350
everything else in the system was

00:05:57,580 --> 00:06:02,140
healthy would quickly exhaust the

00:05:59,350 --> 00:06:05,770
synchronous worker pools on our php-fpm

00:06:02,140 --> 00:06:07,300
servers and take down the entire API so

00:06:05,770 --> 00:06:09,850
we couldn't serve any traffic even two

00:06:07,300 --> 00:06:11,860
unrelated resources as an api platform

00:06:09,850 --> 00:06:13,540
we were deeply ashamed of this it was

00:06:11,860 --> 00:06:15,190
the worst possible failure mode for us

00:06:13,540 --> 00:06:16,480
we couldn't take traffic from customers

00:06:15,190 --> 00:06:21,280
for things that should have worked

00:06:16,480 --> 00:06:23,169
because something else was slow so to

00:06:21,280 --> 00:06:25,750
recap what we got half a million lines

00:06:23,169 --> 00:06:27,640
of PHP handling this critical part of

00:06:25,750 --> 00:06:30,220
our business it was failing to scale

00:06:27,640 --> 00:06:32,110
with both of our customers traffic

00:06:30,220 --> 00:06:36,400
growth and the growth of our developer

00:06:32,110 --> 00:06:38,080
team and from accumulated wisdom we knew

00:06:36,400 --> 00:06:39,680
that if we set out to relight rewrite

00:06:38,080 --> 00:06:43,669
this thing in one go we would

00:06:39,680 --> 00:06:44,780
certainly fail so instead we decided

00:06:43,669 --> 00:06:49,100
we're going to take it apart and replace

00:06:44,780 --> 00:06:51,410
it bit by bit so it support more context

00:06:49,100 --> 00:06:54,169
on this thankfully the API team wasn't

00:06:51,410 --> 00:06:55,580
in a vacuum over those couple years the

00:06:54,169 --> 00:06:58,009
rest of engineering had figured out that

00:06:55,580 --> 00:07:01,340
service-oriented architectures were a

00:06:58,009 --> 00:07:03,139
good idea so for those not familiar SOA

00:07:01,340 --> 00:07:06,020
is when you have a fleet of small single

00:07:03,139 --> 00:07:08,060
purpose services working together in

00:07:06,020 --> 00:07:09,759
concert to solve your problem instead of

00:07:08,060 --> 00:07:13,130
a single giant monolith of one codebase

00:07:09,759 --> 00:07:15,889
this grew out of work done at amazon if

00:07:13,130 --> 00:07:17,870
you haven't read the CVI a post on Jeff

00:07:15,889 --> 00:07:20,270
bezos's mandate about services you

00:07:17,870 --> 00:07:22,460
should I basically outlines how you

00:07:20,270 --> 00:07:24,560
should build large distributed systems

00:07:22,460 --> 00:07:26,870
like this and we'd build a few of these

00:07:24,560 --> 00:07:29,060
and actually had managed to even hook up

00:07:26,870 --> 00:07:30,320
that PHP API to a couple of them because

00:07:29,060 --> 00:07:33,110
we didn't want to go back and build it

00:07:30,320 --> 00:07:35,270
the other way it looks like this right

00:07:33,110 --> 00:07:36,949
so like I said inspired by Amazon the

00:07:35,270 --> 00:07:38,930
rule the court rule here is that no

00:07:36,949 --> 00:07:40,610
system is allowed to use code or data

00:07:38,930 --> 00:07:42,080
from another service so you cannot link

00:07:40,610 --> 00:07:44,330
anybody else's libraries you cannot

00:07:42,080 --> 00:07:46,520
access the database directly everything

00:07:44,330 --> 00:07:49,099
has to go over the official interface

00:07:46,520 --> 00:07:51,139
that service over the network so we

00:07:49,099 --> 00:07:53,320
picked rest as our internal API standard

00:07:51,139 --> 00:07:55,490
and we started thinking because of that

00:07:53,320 --> 00:07:57,919
well we got all these internal rest

00:07:55,490 --> 00:07:59,810
services and our public API already

00:07:57,919 --> 00:08:02,120
speaks rest to our customers can't we

00:07:59,810 --> 00:08:07,190
just map one to the other and call it a

00:08:02,120 --> 00:08:08,720
day and so we did we built a simple

00:08:07,190 --> 00:08:10,460
powerful app for transforming and

00:08:08,720 --> 00:08:12,020
routing rest requests we identify the

00:08:10,460 --> 00:08:13,460
internal systems that had grown to

00:08:12,020 --> 00:08:16,699
feature parity with existing API

00:08:13,460 --> 00:08:19,880
endpoints and we cut them over we call

00:08:16,699 --> 00:08:21,949
it starship it's built in Python yes

00:08:19,880 --> 00:08:25,820
it's the API Federation the next

00:08:21,949 --> 00:08:28,490
generation that's the joke it's built on

00:08:25,820 --> 00:08:30,979
Python and flask we actually open source

00:08:28,490 --> 00:08:33,169
the fast restful framework which powers

00:08:30,979 --> 00:08:36,890
the rest endpoints inside of this flask

00:08:33,169 --> 00:08:39,380
app and we use requests to do HTTP to

00:08:36,890 --> 00:08:41,300
our internal services as of the end of

00:08:39,380 --> 00:08:43,459
2014 it handles one hundred percent of

00:08:41,300 --> 00:08:44,990
to leo's api five traffic and this

00:08:43,459 --> 00:08:46,910
architecture and the system solve

00:08:44,990 --> 00:08:49,190
everything that we disliked about the

00:08:46,910 --> 00:08:52,640
PHP architecture and some problems we

00:08:49,190 --> 00:08:53,570
didn't even know we had so the recap the

00:08:52,640 --> 00:08:55,550
architecture now looks

00:08:53,570 --> 00:08:57,380
this we have this wide array of internal

00:08:55,550 --> 00:08:59,180
services that implant all of the twilio

00:08:57,380 --> 00:09:01,510
platform functionality and expose

00:08:59,180 --> 00:09:03,860
internal REST API s4 that functionality

00:09:01,510 --> 00:09:06,500
starship acts as the public front door

00:09:03,860 --> 00:09:08,260
to all these systems and unifies the API

00:09:06,500 --> 00:09:12,200
is into the public interface and

00:09:08,260 --> 00:09:13,550
critically which is what really the huge

00:09:12,200 --> 00:09:15,410
wing with this project is that starship

00:09:13,550 --> 00:09:18,260
provides all the common pieces of the

00:09:15,410 --> 00:09:21,080
public API so authentication validation

00:09:18,260 --> 00:09:24,410
rate limiting feature manaphy chur roll

00:09:21,080 --> 00:09:25,580
out etc and lets our teams not have to

00:09:24,410 --> 00:09:27,980
worry about doing all those common

00:09:25,580 --> 00:09:29,570
things so if your SMS team you don't

00:09:27,980 --> 00:09:30,740
have to build authentication for your

00:09:29,570 --> 00:09:33,230
new service when you stand it up because

00:09:30,740 --> 00:09:36,170
starship provides it for you we call

00:09:33,230 --> 00:09:39,140
this the proxy resource pattern and in

00:09:36,170 --> 00:09:40,970
brief given an external API and in

00:09:39,140 --> 00:09:43,190
Israel service the implements something

00:09:40,970 --> 00:09:44,630
that does the semantic work of that API

00:09:43,190 --> 00:09:46,010
endpoint but might be formatted or

00:09:44,630 --> 00:09:47,270
structured differently because we have a

00:09:46,010 --> 00:09:48,800
lot of data internal to the platform

00:09:47,270 --> 00:09:50,960
that customers don't need to care about

00:09:48,800 --> 00:09:54,500
we define a mapping from one of the

00:09:50,960 --> 00:09:56,300
other so for example here's what the

00:09:54,500 --> 00:09:57,800
internal external representations of

00:09:56,300 --> 00:09:59,120
phone numbers on the twilio platform

00:09:57,800 --> 00:10:00,440
look like don't worry about reading this

00:09:59,120 --> 00:10:02,030
just kind of look at the shape of this

00:10:00,440 --> 00:10:05,300
JSON and say like they're similar but

00:10:02,030 --> 00:10:06,950
not the same and so starship maps from

00:10:05,300 --> 00:10:10,220
one of the other and the the core of

00:10:06,950 --> 00:10:11,900
starship is a configurable engine that

00:10:10,220 --> 00:10:14,120
can apply all the transformation steps

00:10:11,900 --> 00:10:16,220
for requests send it off to the internal

00:10:14,120 --> 00:10:17,450
service and then take the response to

00:10:16,220 --> 00:10:24,830
transform it back to other customer

00:10:17,450 --> 00:10:26,690
expects and return that and these days

00:10:24,830 --> 00:10:29,090
so we just write config files to define

00:10:26,690 --> 00:10:30,500
both sides of the API so we take we have

00:10:29,090 --> 00:10:32,390
a config file to finding the public

00:10:30,500 --> 00:10:34,400
interface the private interface and any

00:10:32,390 --> 00:10:37,070
transformations necessary to get from

00:10:34,400 --> 00:10:38,420
one to the other so the framework takes

00:10:37,070 --> 00:10:39,950
care of the rest it's extremely quick to

00:10:38,420 --> 00:10:41,090
add or modify resource definitions you

00:10:39,950 --> 00:10:43,130
usually don't have to actually write any

00:10:41,090 --> 00:10:45,380
code you just map something out in JSON

00:10:43,130 --> 00:10:48,410
file rebuild the service and redeploy

00:10:45,380 --> 00:10:50,510
and out it goes so there was a huge

00:10:48,410 --> 00:10:52,070
amount of risk involving it involved in

00:10:50,510 --> 00:10:53,600
migrating all of our API traffic off of

00:10:52,070 --> 00:10:55,040
a system that we knew worked and had

00:10:53,600 --> 00:10:57,290
worked for five years even if it had

00:10:55,040 --> 00:11:01,010
some operational issues but there's also

00:10:57,290 --> 00:11:03,410
a lot for us to gain so first of all we

00:11:01,010 --> 00:11:05,960
fix the deployment problem so these days

00:11:03,410 --> 00:11:07,430
adding API endpoints or making changes

00:11:05,960 --> 00:11:09,860
to existing ones just means model

00:11:07,430 --> 00:11:11,149
the configuration for starship and the

00:11:09,860 --> 00:11:13,250
team is responsible for the internal

00:11:11,149 --> 00:11:14,630
systems that build the logic can

00:11:13,250 --> 00:11:15,950
actually deploy whenever there whenever

00:11:14,630 --> 00:11:18,380
they want without worrying about

00:11:15,950 --> 00:11:19,790
breaking other pieces of the platform we

00:11:18,380 --> 00:11:21,980
use automated testing heavily on both

00:11:19,790 --> 00:11:23,360
sides and across the service boundary to

00:11:21,980 --> 00:11:26,270
ensure that we don't break things as we

00:11:23,360 --> 00:11:29,510
roll forward we gained a lot of

00:11:26,270 --> 00:11:31,040
flexibility we used to be just in PHP

00:11:29,510 --> 00:11:32,930
and we do have if we wanted to change

00:11:31,040 --> 00:11:34,130
something to be about how a request was

00:11:32,930 --> 00:11:37,610
handled we have to go write a bunch of

00:11:34,130 --> 00:11:39,380
code and Python now means we can route

00:11:37,610 --> 00:11:41,149
and handle requests and do whatever you

00:11:39,380 --> 00:11:44,029
want with them based on pretty much any

00:11:41,149 --> 00:11:45,740
aspect of the requests we've added

00:11:44,029 --> 00:11:47,899
features to starship to let us do

00:11:45,740 --> 00:11:50,000
randomly selected requests for baby

00:11:47,899 --> 00:11:52,100
testing or percentage based rollouts

00:11:50,000 --> 00:11:53,959
account flags we can even shadow

00:11:52,100 --> 00:11:55,550
internal reimplement ations of services

00:11:53,959 --> 00:11:57,440
or release candidate versions without

00:11:55,550 --> 00:12:00,380
disrupting the customer facing response

00:11:57,440 --> 00:12:02,480
and we fixed all of our operational

00:12:00,380 --> 00:12:05,300
issues so starship is much more fault

00:12:02,480 --> 00:12:07,100
tolerant we use async IO not actually a

00:12:05,300 --> 00:12:10,670
sink is G event because we're saw in

00:12:07,100 --> 00:12:12,050
Python too but be using a Cinco means we

00:12:10,670 --> 00:12:14,120
can handle orders of magnitude more in

00:12:12,050 --> 00:12:15,470
flight requests so we no longer fall

00:12:14,120 --> 00:12:18,320
over just because one thing is slowed

00:12:15,470 --> 00:12:19,790
down starship also gives us a single

00:12:18,320 --> 00:12:21,589
place at a instrument all of our traffic

00:12:19,790 --> 00:12:25,250
which gives us a huge amount of insight

00:12:21,589 --> 00:12:27,680
into our infrastructure is performing so

00:12:25,250 --> 00:12:29,870
for example this is a chart of latency

00:12:27,680 --> 00:12:32,150
to API resources grouped by the internal

00:12:29,870 --> 00:12:33,980
system that handles the resource and so

00:12:32,150 --> 00:12:35,750
lets us watch how things are performing

00:12:33,980 --> 00:12:37,370
day over day week-over-week we can

00:12:35,750 --> 00:12:40,010
anticipate growth and fix problems

00:12:37,370 --> 00:12:42,230
before they become outages and similarly

00:12:40,010 --> 00:12:44,510
here's the API request latency to a

00:12:42,230 --> 00:12:45,980
single endpoint with timers over every

00:12:44,510 --> 00:12:47,959
phase of the operation inside of a

00:12:45,980 --> 00:12:50,510
starship right so that into the initial

00:12:47,959 --> 00:12:51,829
processing phase authentication the

00:12:50,510 --> 00:12:53,839
actual dispatch and waiting for the

00:12:51,829 --> 00:12:55,820
internal service to return and so on

00:12:53,839 --> 00:12:57,440
this looks scary this is actually just

00:12:55,820 --> 00:12:58,430
seasonal right traffic causing our

00:12:57,440 --> 00:13:01,130
database to get a little bogged down

00:12:58,430 --> 00:13:03,829
we're still in there were tens of

00:13:01,130 --> 00:13:06,020
milliseconds on this chart but

00:13:03,829 --> 00:13:07,970
importantly we could look and say like

00:13:06,020 --> 00:13:09,320
if for example this were the offline it

00:13:07,970 --> 00:13:10,850
could say oh do we deploy the

00:13:09,320 --> 00:13:13,490
authentication service why did that slow

00:13:10,850 --> 00:13:16,400
down both of these things we had no idea

00:13:13,490 --> 00:13:18,680
before so it's extremely powerful so

00:13:16,400 --> 00:13:20,450
starship is awesome but how do we do

00:13:18,680 --> 00:13:21,120
this how do we move all this logic to

00:13:20,450 --> 00:13:23,790
these new certain

00:13:21,120 --> 00:13:26,910
services and safely move the API traffic

00:13:23,790 --> 00:13:30,000
over that's going to go through the rest

00:13:26,910 --> 00:13:31,650
of today starship wasn't a new idea I

00:13:30,000 --> 00:13:33,210
told you came about in twenty twelve or

00:13:31,650 --> 00:13:34,830
so but it took us a while to decide we

00:13:33,210 --> 00:13:36,300
wanted to go all in and deprecated the

00:13:34,830 --> 00:13:38,010
old systems and I'm going to go through

00:13:36,300 --> 00:13:39,930
how we plan that movement that migration

00:13:38,010 --> 00:13:45,870
the intermediate architectures we chose

00:13:39,930 --> 00:13:48,570
and how we test it and deployed this so

00:13:45,870 --> 00:13:50,550
first up planning if you want to go and

00:13:48,570 --> 00:13:53,730
rip out your legacy code and replace it

00:13:50,550 --> 00:13:58,740
a piece by piece like this you should

00:13:53,730 --> 00:14:00,300
have a plan I recommend it so really the

00:13:58,740 --> 00:14:01,890
core p series you should identify the

00:14:00,300 --> 00:14:05,370
granularity at which it makes sense to

00:14:01,890 --> 00:14:06,810
break apart your legacy monoliths if you

00:14:05,370 --> 00:14:08,970
go too low you're gonna spend all your

00:14:06,810 --> 00:14:10,110
time rebuilding moving tiny pieces one

00:14:08,970 --> 00:14:11,190
at the time and if you go too high

00:14:10,110 --> 00:14:12,630
you're not actually gonna get any

00:14:11,190 --> 00:14:15,210
benefit there's kind of like two or

00:14:12,630 --> 00:14:16,589
three one LS instead of one you should

00:14:15,210 --> 00:14:19,050
make a list of what you're going to

00:14:16,589 --> 00:14:19,920
replace and order it the ordering should

00:14:19,050 --> 00:14:22,110
look something like this you should

00:14:19,920 --> 00:14:23,190
start small so start with a couple

00:14:22,110 --> 00:14:26,700
things that aren't so mission-critical

00:14:23,190 --> 00:14:27,959
or lower volume but at the same time

00:14:26,700 --> 00:14:29,339
there's also a competing drive here

00:14:27,959 --> 00:14:31,040
which is that you want to start

00:14:29,339 --> 00:14:34,290
realizing the benefits from this project

00:14:31,040 --> 00:14:35,790
the benefits and I come from moving the

00:14:34,290 --> 00:14:38,010
big stuff that powers most of your

00:14:35,790 --> 00:14:39,360
business or most your app because that's

00:14:38,010 --> 00:14:40,740
where you're going to reap the most

00:14:39,360 --> 00:14:42,720
benefit by unblocking all the other

00:14:40,740 --> 00:14:45,330
developers who want to add features or

00:14:42,720 --> 00:14:46,800
make improvements to those systems who

00:14:45,330 --> 00:14:50,459
are stuck waiting for stuff to happen in

00:14:46,800 --> 00:14:53,610
year old in your old legacy code so

00:14:50,459 --> 00:14:55,080
that's planning a next up architectural

00:14:53,610 --> 00:14:56,610
e you should think through what you're

00:14:55,080 --> 00:14:59,400
doing please don't just pick up a

00:14:56,610 --> 00:15:01,020
machete and start hacking things off you

00:14:59,400 --> 00:15:02,940
should pick off reasonably sized chunks

00:15:01,020 --> 00:15:04,620
and deploy them one of the time instead

00:15:02,940 --> 00:15:06,570
of one big bang cut over which is the

00:15:04,620 --> 00:15:09,779
point of this entire talk and this

00:15:06,570 --> 00:15:12,029
sounds hard right but uh fortunately

00:15:09,779 --> 00:15:13,680
wheelers fundamental theorem of software

00:15:12,029 --> 00:15:15,660
engineering applies which is that we can

00:15:13,680 --> 00:15:18,000
solve any problem by introducing a layer

00:15:15,660 --> 00:15:21,029
of indirection except for too many

00:15:18,000 --> 00:15:23,339
layers of indirection so we apply this

00:15:21,029 --> 00:15:26,430
right add some sort of Shem to your

00:15:23,339 --> 00:15:28,860
system I think it is a way it dispatched

00:15:26,430 --> 00:15:31,350
between your old code again and your new

00:15:28,860 --> 00:15:33,660
reimplantation based on a function call

00:15:31,350 --> 00:15:34,889
or request some some attribute of the

00:15:33,660 --> 00:15:36,689
work you're trying to do

00:15:34,889 --> 00:15:38,759
and like I said earlier the most

00:15:36,689 --> 00:15:40,439
critical piece here is to find the right

00:15:38,759 --> 00:15:41,369
level to add this at if you go to oh

00:15:40,439 --> 00:15:43,619
you're going to spend all your time

00:15:41,369 --> 00:15:45,389
configuring your dispatch module and if

00:15:43,619 --> 00:15:46,499
you go too high you will not be able to

00:15:45,389 --> 00:15:49,769
work in chunks or a small enough to

00:15:46,499 --> 00:15:51,419
deploy safely and quickly for us to give

00:15:49,769 --> 00:15:53,939
an example the right place to do this

00:15:51,419 --> 00:15:55,739
was in our HTTP server sweet ran both

00:15:53,939 --> 00:15:58,619
starship and the old PHP code behind

00:15:55,739 --> 00:16:01,079
engine X on a single host using it to

00:15:58,619 --> 00:16:02,669
require a single fleet of hosts using

00:16:01,079 --> 00:16:04,019
its retro quests to one of the ogre

00:16:02,669 --> 00:16:07,589
based on the method and path of the

00:16:04,019 --> 00:16:09,029
request so for a long time post to the

00:16:07,589 --> 00:16:11,129
calls endpoint to start a new call went

00:16:09,029 --> 00:16:12,449
to the PHP implementation because it was

00:16:11,129 --> 00:16:14,129
kind of the oldest thing we knew it

00:16:12,449 --> 00:16:16,259
worked we didn't want to touch it until

00:16:14,129 --> 00:16:17,819
we've proven ourselves and then we

00:16:16,259 --> 00:16:20,160
started moving messages went first write

00:16:17,819 --> 00:16:23,879
messages and from phone numbers and so

00:16:20,160 --> 00:16:26,519
on moved into starship most importantly

00:16:23,879 --> 00:16:28,290
keep this dispatch layer simple because

00:16:26,519 --> 00:16:30,809
depending on how big your code is and

00:16:28,290 --> 00:16:32,489
how barge when undertaking you're going

00:16:30,809 --> 00:16:33,809
into here you might be running with this

00:16:32,489 --> 00:16:35,549
in place for a long time so making sure

00:16:33,809 --> 00:16:37,410
it's something you can debug make sure

00:16:35,549 --> 00:16:40,799
something that's perform as well and so

00:16:37,410 --> 00:16:42,600
on and once you have a way to control

00:16:40,799 --> 00:16:43,439
which system is use where you should

00:16:42,600 --> 00:16:47,100
think about how to test this

00:16:43,439 --> 00:16:48,689
implementation so a confession here if

00:16:47,100 --> 00:16:51,059
your legacy systems are anything like to

00:16:48,689 --> 00:16:52,980
leo's this is a blessing and a curse you

00:16:51,059 --> 00:16:55,589
have a great opportunity to improve your

00:16:52,980 --> 00:16:58,910
test coverage but you might be starting

00:16:55,589 --> 00:17:00,629
from let's go with not much

00:16:58,910 --> 00:17:02,129
unfortunately there are a few tax to

00:17:00,629 --> 00:17:04,230
take here I'm gonna talk through a

00:17:02,129 --> 00:17:07,289
little bit of testing the theory and

00:17:04,230 --> 00:17:08,539
architecture so really quarter this is

00:17:07,289 --> 00:17:10,500
that you should test in multiple layers

00:17:08,539 --> 00:17:11,639
this is actually one of the more useful

00:17:10,500 --> 00:17:13,860
things to come out of the agile movement

00:17:11,639 --> 00:17:16,169
it's called the test pyramid and it's

00:17:13,860 --> 00:17:17,760
really about boundaries so if you have

00:17:16,169 --> 00:17:20,279
some piece of functionality in your code

00:17:17,760 --> 00:17:21,899
bases you need to test you should

00:17:20,279 --> 00:17:23,610
identify the right level to test that at

00:17:21,899 --> 00:17:25,409
the right set of boundaries to cross or

00:17:23,610 --> 00:17:28,889
not cross in order to assert that the

00:17:25,409 --> 00:17:30,510
code does what it should do as you go up

00:17:28,889 --> 00:17:32,490
the pyramid your tests are going to be

00:17:30,510 --> 00:17:34,200
slower to write because you have to deal

00:17:32,490 --> 00:17:35,309
with more of the world as you have

00:17:34,200 --> 00:17:37,980
crossing more boundaries I've been

00:17:35,309 --> 00:17:39,000
mocking them or using live services and

00:17:37,980 --> 00:17:41,909
they're going slower to run because

00:17:39,000 --> 00:17:43,830
you're exercising more code so choosing

00:17:41,909 --> 00:17:45,360
the right level of the test pyramid to

00:17:43,830 --> 00:17:46,799
write your test cases that lets you

00:17:45,360 --> 00:17:47,830
focus your effort appropriately and

00:17:46,799 --> 00:17:50,260
tested the right

00:17:47,830 --> 00:17:52,029
place so to walk through how this work

00:17:50,260 --> 00:17:55,000
for a starship and something like this

00:17:52,029 --> 00:17:58,269
our unit tests are the internal logic of

00:17:55,000 --> 00:18:00,250
Starship right so given a username and

00:17:58,269 --> 00:18:04,000
password to the API do we authenticate

00:18:00,250 --> 00:18:05,799
correctly do we transform JSON correctly

00:18:04,000 --> 00:18:08,260
do we correctly strip out internal

00:18:05,799 --> 00:18:10,000
fields for a response we call the

00:18:08,260 --> 00:18:11,500
functions you know in isolation right so

00:18:10,000 --> 00:18:13,990
this is at the level of individual

00:18:11,500 --> 00:18:15,070
functions inside the code you might have

00:18:13,990 --> 00:18:18,159
to walk out a few things here if you

00:18:15,070 --> 00:18:21,039
have side effects but to talk to that

00:18:18,159 --> 00:18:22,960
aspecto of speed there about 1200 tests

00:18:21,039 --> 00:18:24,429
in this set and they take three seconds

00:18:22,960 --> 00:18:26,889
to run so this is very much the thing

00:18:24,429 --> 00:18:28,690
you hit you run after every commit as

00:18:26,889 --> 00:18:30,519
you're working in a branch right make a

00:18:28,690 --> 00:18:34,539
change commit it run the tests are you

00:18:30,519 --> 00:18:36,760
green keep going if not fix it this is

00:18:34,539 --> 00:18:39,070
the next level is integration tests so

00:18:36,760 --> 00:18:41,200
this is external to the starship proxy

00:18:39,070 --> 00:18:43,690
engine but with a faked out client and

00:18:41,200 --> 00:18:46,630
internal service right so we put a mock

00:18:43,690 --> 00:18:48,159
object on requests to fake out what

00:18:46,630 --> 00:18:50,799
we're going to do internally and fake

00:18:48,159 --> 00:18:52,360
out the client and so the question here

00:18:50,799 --> 00:18:55,149
is assuming the correct dependencies

00:18:52,360 --> 00:18:56,620
does the starship engine config with the

00:18:55,149 --> 00:18:59,049
configuration for its endpoint do the

00:18:56,620 --> 00:19:00,970
correct thing so there's several hundred

00:18:59,049 --> 00:19:03,039
tests in here that at least one to cover

00:19:00,970 --> 00:19:06,730
each API endpoint and method and they

00:19:03,039 --> 00:19:08,230
take about 30 seconds to run and next up

00:19:06,730 --> 00:19:09,909
we have cluster tests you might call

00:19:08,230 --> 00:19:12,309
these functional tests in to end tests

00:19:09,909 --> 00:19:14,049
or acceptance tests they run against a

00:19:12,309 --> 00:19:15,399
complete Tullio cluster in our staging

00:19:14,049 --> 00:19:17,649
environment and they assert that

00:19:15,399 --> 00:19:19,929
starship works correctly in concert with

00:19:17,649 --> 00:19:22,899
all the other services in the system to

00:19:19,929 --> 00:19:24,549
implement the API critically you have to

00:19:22,899 --> 00:19:26,950
run these when either side of the

00:19:24,549 --> 00:19:30,370
interface changes because if you faint

00:19:26,950 --> 00:19:31,570
if we change starship and suddenly break

00:19:30,370 --> 00:19:33,519
something we'll want to catch it and if

00:19:31,570 --> 00:19:36,190
the SMS team changes something in their

00:19:33,519 --> 00:19:37,450
service you want to catch that too there

00:19:36,190 --> 00:19:38,679
are a couple dozen tests in this suite

00:19:37,450 --> 00:19:40,059
and they take about five minutes to run

00:19:38,679 --> 00:19:43,539
because they're hitting life service is

00:19:40,059 --> 00:19:45,070
actually doing work and finally when

00:19:43,539 --> 00:19:47,019
we're making large changes or adding new

00:19:45,070 --> 00:19:48,730
endpoints the API will do manual

00:19:47,019 --> 00:19:50,230
acceptance tests usually will sit down

00:19:48,730 --> 00:19:51,700
with a p.m. or a lead engineer from the

00:19:50,230 --> 00:19:52,960
other team who's exposing something and

00:19:51,700 --> 00:19:55,480
assert that everything works correctly

00:19:52,960 --> 00:19:56,950
and these often form a basis for new

00:19:55,480 --> 00:19:58,419
cluster and integration tests we save

00:19:56,950 --> 00:20:01,049
those responses and can them and put

00:19:58,419 --> 00:20:02,789
them into the automated suites

00:20:01,049 --> 00:20:05,340
so that's got a little bit of testing

00:20:02,789 --> 00:20:08,070
theory or the test pyramid best

00:20:05,340 --> 00:20:11,070
practices there and next up you should

00:20:08,070 --> 00:20:13,230
reduce overhead in your test cases make

00:20:11,070 --> 00:20:15,899
it easy to write test cases other people

00:20:13,230 --> 00:20:17,429
otherwise developers won't a lot of the

00:20:15,899 --> 00:20:20,309
time you end up writing test cases that

00:20:17,429 --> 00:20:22,649
look really similar so for us right take

00:20:20,309 --> 00:20:24,210
the example of authentication right we

00:20:22,649 --> 00:20:25,679
need to test it with a correct username

00:20:24,210 --> 00:20:28,289
and password we authenticate we need to

00:20:25,679 --> 00:20:29,460
test it with an incorrect password we

00:20:28,289 --> 00:20:31,139
failed to authenticate we need to test

00:20:29,460 --> 00:20:34,169
it with an incorrect username we failed

00:20:31,139 --> 00:20:35,879
authenticate and so on so automate as

00:20:34,169 --> 00:20:37,440
much of that as you can right so usually

00:20:35,879 --> 00:20:38,669
it looks like you'll have some function

00:20:37,440 --> 00:20:40,379
you're calling or a service endpoint

00:20:38,669 --> 00:20:42,179
you're hitting you'll do what just set

00:20:40,379 --> 00:20:44,399
up and you'll put some stuff into it and

00:20:42,179 --> 00:20:45,690
then a cert a bunch of things automate

00:20:44,399 --> 00:20:47,249
as much as you can because you want to

00:20:45,690 --> 00:20:49,249
reduce the boilerplate and copy place

00:20:47,249 --> 00:20:51,299
code because changes will hurt less

00:20:49,249 --> 00:20:53,009
fortunately testing frameworks come to

00:20:51,299 --> 00:20:54,899
our rescue here this is a toy example

00:20:53,009 --> 00:20:57,659
for using those tests if that's your

00:20:54,899 --> 00:21:01,019
runner what you're using here is you

00:20:57,659 --> 00:21:03,659
define your test actual test logic as a

00:21:01,019 --> 00:21:05,580
generator function sorry know as the

00:21:03,659 --> 00:21:08,190
function on the bottom and then you set

00:21:05,580 --> 00:21:10,109
up your sequence of all your test cases

00:21:08,190 --> 00:21:11,639
to run through it and then just yield

00:21:10,109 --> 00:21:12,659
test cases from that and the nose runner

00:21:11,639 --> 00:21:13,919
is actually smart enough to pick all

00:21:12,659 --> 00:21:16,889
those up and treat them as individual

00:21:13,919 --> 00:21:18,179
test cases this is a toy example but you

00:21:16,889 --> 00:21:19,499
can see what's going on here and then

00:21:18,179 --> 00:21:21,389
similarly this is well looks like for

00:21:19,499 --> 00:21:23,580
pie tests it's a decorator instead of a

00:21:21,389 --> 00:21:25,230
generator but same idea right we write a

00:21:23,580 --> 00:21:26,340
function that does some test logic and

00:21:25,230 --> 00:21:28,769
we call it with a whole bunch of

00:21:26,340 --> 00:21:30,840
different arguments these are toy cases

00:21:28,769 --> 00:21:32,850
obviously in the real world your test

00:21:30,840 --> 00:21:34,739
cases will have 10 20 50 lines of code

00:21:32,850 --> 00:21:36,450
and the benefit is much more apparent

00:21:34,739 --> 00:21:39,149
because you have one definition that you

00:21:36,450 --> 00:21:40,259
can change once instead of 100 copy

00:21:39,149 --> 00:21:44,909
pasted versions that you have to go

00:21:40,259 --> 00:21:46,889
change a hundred times and finally you

00:21:44,909 --> 00:21:49,200
can write throwaway tests sometimes test

00:21:46,889 --> 00:21:50,940
shouldn't live forever the example i'm

00:21:49,200 --> 00:21:53,850
going to give here is a response dipping

00:21:50,940 --> 00:21:55,259
so we are moving from one system to a

00:21:53,850 --> 00:21:57,480
system that needed to work exactly the

00:21:55,259 --> 00:22:00,149
same way and so we had a reference

00:21:57,480 --> 00:22:03,179
implementation to check against and so

00:22:00,149 --> 00:22:04,830
what we did was run the requests against

00:22:03,179 --> 00:22:06,029
a known good right so right how much

00:22:04,830 --> 00:22:08,429
your request against the PHP

00:22:06,029 --> 00:22:10,649
implantation of the API save the results

00:22:08,429 --> 00:22:12,419
right then go to starship and the new

00:22:10,649 --> 00:22:13,950
services and run those same requests and

00:22:12,419 --> 00:22:16,679
then just do a bite from right

00:22:13,950 --> 00:22:18,330
if of the output these are really fast

00:22:16,679 --> 00:22:21,029
to write they're really easy to run and

00:22:18,330 --> 00:22:24,450
they're extremely brittle so if they

00:22:21,029 --> 00:22:25,679
pass you're golden and if they fail then

00:22:24,450 --> 00:22:27,570
you have to go stare at some diff and

00:22:25,679 --> 00:22:29,639
figure out what changed and most

00:22:27,570 --> 00:22:33,090
importantly if you go don't save them

00:22:29,639 --> 00:22:35,669
right because if you use these as a

00:22:33,090 --> 00:22:36,990
crutch for your testing effort then

00:22:35,669 --> 00:22:38,669
every time you change something if you

00:22:36,990 --> 00:22:40,320
change the formatting of your responses

00:22:38,669 --> 00:22:42,210
or any other thing that is you know

00:22:40,320 --> 00:22:45,059
semantically the same but maybe

00:22:42,210 --> 00:22:46,320
syntactically different you have to go

00:22:45,059 --> 00:22:48,389
review bite for bite if to figure out

00:22:46,320 --> 00:22:49,950
why your tests failed don't bother use

00:22:48,389 --> 00:22:51,690
these to verify that your implementation

00:22:49,950 --> 00:22:53,580
functions correctly and then throw them

00:22:51,690 --> 00:22:57,179
away and replace them with test cases

00:22:53,580 --> 00:22:58,860
actually hit what you need to test so

00:22:57,179 --> 00:23:00,630
that was testing so I said you should

00:22:58,860 --> 00:23:02,399
write multiple sets of tests to test

00:23:00,630 --> 00:23:03,600
things at the right level you should I

00:23:02,399 --> 00:23:06,299
didn't if I and accelerate the common

00:23:03,600 --> 00:23:07,620
cases and machine generate tests for

00:23:06,299 --> 00:23:10,590
your systems when it's useful but don't

00:23:07,620 --> 00:23:14,519
rely on those long term so let's talk

00:23:10,590 --> 00:23:15,960
about deployments I think everybody can

00:23:14,519 --> 00:23:19,620
agree that deploying code should be easy

00:23:15,960 --> 00:23:21,269
it should be small to minimize risk your

00:23:19,620 --> 00:23:24,210
deployments to be fast to minimize the

00:23:21,269 --> 00:23:25,740
overhead and they should be simple so

00:23:24,210 --> 00:23:27,149
every time a human has to do something

00:23:25,740 --> 00:23:28,980
to deploy your code is a chance for you

00:23:27,149 --> 00:23:30,720
to screw it up so you want to minimize

00:23:28,980 --> 00:23:32,279
the complexity of your deployments and

00:23:30,720 --> 00:23:34,529
then get rid of the chances for error

00:23:32,279 --> 00:23:36,090
there's a lot of writing on this I don't

00:23:34,529 --> 00:23:38,460
have time to dig in basically it comes

00:23:36,090 --> 00:23:39,750
down to automate everything just get the

00:23:38,460 --> 00:23:42,059
humans at the loop automate wherever you

00:23:39,750 --> 00:23:43,799
can I'm going to talk about a couple

00:23:42,059 --> 00:23:45,539
specific techniques for doing things

00:23:43,799 --> 00:23:48,149
like replacing legacy systems that are

00:23:45,539 --> 00:23:49,409
actually more useful so here's a couple

00:23:48,149 --> 00:23:50,730
extra tactics once you have the

00:23:49,409 --> 00:23:53,789
mechanics of whatever your deployment

00:23:50,730 --> 00:23:56,039
tected diplomat pipeline is shadow

00:23:53,789 --> 00:23:58,350
deployments this might also be familiar

00:23:56,039 --> 00:24:01,289
to you guys dark launching all you do is

00:23:58,350 --> 00:24:03,990
you deploy both versions of a system in

00:24:01,289 --> 00:24:05,850
production and then put something in

00:24:03,990 --> 00:24:09,059
front of them that copies or requests

00:24:05,850 --> 00:24:10,620
and runs them about against both your

00:24:09,059 --> 00:24:11,850
original system and your new system and

00:24:10,620 --> 00:24:13,289
then dips the responses so this is

00:24:11,850 --> 00:24:15,269
effectively a high-scale automated

00:24:13,289 --> 00:24:16,769
version of response to fame tests using

00:24:15,269 --> 00:24:18,750
your customer traffic to produce the

00:24:16,769 --> 00:24:20,490
breath and load against your system

00:24:18,750 --> 00:24:21,600
without affecting the live responses

00:24:20,490 --> 00:24:22,740
right so that the golden rule here is

00:24:21,600 --> 00:24:26,309
always return the response from their

00:24:22,740 --> 00:24:27,840
own good don't return from the new uh

00:24:26,309 --> 00:24:29,309
there's one big problem with it though

00:24:27,840 --> 00:24:30,450
which is that you can't change this do

00:24:29,309 --> 00:24:31,679
this for anything that changes state

00:24:30,450 --> 00:24:33,330
right at least not without doing a lot

00:24:31,679 --> 00:24:35,240
of plumbing to you know get your I

00:24:33,330 --> 00:24:38,039
dependency flags throughout the system

00:24:35,240 --> 00:24:39,539
so for that we turn to canaria ng this

00:24:38,039 --> 00:24:41,669
comes from a phrase a canary in a coal

00:24:39,539 --> 00:24:43,200
mine and the ideas you just launched one

00:24:41,669 --> 00:24:44,400
host with your release candidate rather

00:24:43,200 --> 00:24:46,080
than a full fleet put in the load

00:24:44,400 --> 00:24:47,940
balancer alongside the current

00:24:46,080 --> 00:24:49,559
implementation let it serve whatever

00:24:47,940 --> 00:24:52,049
person do traffic gets gets and watch it

00:24:49,559 --> 00:24:53,460
for errors this is safer than a full

00:24:52,049 --> 00:24:55,110
deploy because if you do screw up

00:24:53,460 --> 00:24:58,110
perfectly you're only screwing Viper

00:24:55,110 --> 00:24:59,850
than your customers and it's faster to

00:24:58,110 --> 00:25:02,460
rollback is the big piece right if you

00:24:59,850 --> 00:25:05,220
have to flip 30 house 30 hosting a load

00:25:02,460 --> 00:25:06,809
balancer for a full deploy that's going

00:25:05,220 --> 00:25:09,500
to take five minutes if you have one

00:25:06,809 --> 00:25:12,210
that's you know gone ten seconds and

00:25:09,500 --> 00:25:13,590
then finally we have our low friction

00:25:12,210 --> 00:25:15,990
deploy system and we have our extra

00:25:13,590 --> 00:25:17,700
techniques for ensuring safety and we

00:25:15,990 --> 00:25:18,750
want to conquer this one with so let's

00:25:17,700 --> 00:25:20,549
go back to what I said about planning

00:25:18,750 --> 00:25:22,350
you should start with the easy and

00:25:20,549 --> 00:25:24,870
low-risk stuff but then you should try

00:25:22,350 --> 00:25:27,120
to get going get rolling deploy multiple

00:25:24,870 --> 00:25:29,130
pieces at once we had dozens of

00:25:27,120 --> 00:25:31,200
endpoints to move in our API migration

00:25:29,130 --> 00:25:32,429
so we were deploying four or five at

00:25:31,200 --> 00:25:35,279
once two or three times a week at the

00:25:32,429 --> 00:25:37,500
peak the goal here is balancing speed

00:25:35,279 --> 00:25:41,490
against risk so move fast and don't

00:25:37,500 --> 00:25:44,190
break things and finally you can cheat

00:25:41,490 --> 00:25:45,080
this is where I come clean say that

00:25:44,190 --> 00:25:47,279
you're going to get to a point in

00:25:45,080 --> 00:25:48,809
replacing your monolithic code where

00:25:47,279 --> 00:25:51,179
you're down to the long tail the stuff

00:25:48,809 --> 00:25:53,010
it handles 10 requests a day or it just

00:25:51,179 --> 00:25:54,330
really isn't worth rewriting because the

00:25:53,010 --> 00:25:56,429
logic is so trivial and you don't want

00:25:54,330 --> 00:26:00,149
have to move it over leave it where it

00:25:56,429 --> 00:26:02,399
is we actually still run some of the PHP

00:26:00,149 --> 00:26:04,140
API code the difference is that we moved

00:26:02,399 --> 00:26:06,059
it out onto its own role and it lives

00:26:04,140 --> 00:26:07,740
behind starship nothing says we can't

00:26:06,059 --> 00:26:11,429
proxy to something that already speaks

00:26:07,740 --> 00:26:12,570
our public API interface and what you

00:26:11,429 --> 00:26:14,520
should really do here this is a

00:26:12,570 --> 00:26:15,840
technique for you to cut off the long

00:26:14,520 --> 00:26:18,539
tail and they not waste your time doing

00:26:15,840 --> 00:26:19,830
the stuff that isn't worth it but you're

00:26:18,539 --> 00:26:21,390
also at the same time putting a wall

00:26:19,830 --> 00:26:23,610
around your old code right so leave it

00:26:21,390 --> 00:26:26,130
behind that shim leave it kind of walled

00:26:23,610 --> 00:26:27,539
off because it handles stuff that you

00:26:26,130 --> 00:26:29,760
need to get done but you didn't want to

00:26:27,539 --> 00:26:30,809
have to add to it right so make it more

00:26:29,760 --> 00:26:32,760
attractive for everybody in your

00:26:30,809 --> 00:26:33,990
organization to follow the new rules

00:26:32,760 --> 00:26:36,140
rather than going back to the old way

00:26:33,990 --> 00:26:38,760
and chucking stuff into the monolith

00:26:36,140 --> 00:26:41,010
that's all I've got and I actually have

00:26:38,760 --> 00:26:41,789
a couple minutes for questions so brings

00:26:41,010 --> 00:26:44,580
to the end

00:26:41,789 --> 00:26:46,019
so to recap Big Bang rebuilds are prone

00:26:44,580 --> 00:26:48,720
to failure you should replace things

00:26:46,019 --> 00:26:50,369
incrementally and we went through how to

00:26:48,720 --> 00:26:52,019
Leo uses techniques to replace five

00:26:50,369 --> 00:26:54,929
hundred thousand lines of PHP with micro

00:26:52,019 --> 00:26:56,609
services and how we employ best

00:26:54,929 --> 00:26:57,960
practices for architecture testing and

00:26:56,609 --> 00:26:59,940
deployment to move five billion monthly

00:26:57,960 --> 00:27:01,739
requests about den time so thanks i hope

00:26:59,940 --> 00:27:07,700
i helped you earn something and yeah

00:27:01,739 --> 00:27:07,700
we've got three minutes great thank you

00:27:11,600 --> 00:27:17,759
so if you have questions come up front i

00:27:14,729 --> 00:27:21,299
will start with one so you mentioned

00:27:17,759 --> 00:27:23,429
that the older PHP api like things would

00:27:21,299 --> 00:27:26,070
slow down and of course when you slow

00:27:23,429 --> 00:27:28,080
down that decreases the user experience

00:27:26,070 --> 00:27:30,179
and then you know all the vat and then

00:27:28,080 --> 00:27:32,220
there's sort of financial long tail sort

00:27:30,179 --> 00:27:36,330
of things from that do you think that

00:27:32,220 --> 00:27:38,940
such a large-scale refactor is a as far

00:27:36,330 --> 00:27:44,129
as economics go a choice that companies

00:27:38,940 --> 00:27:46,830
should do without like severe planning

00:27:44,129 --> 00:27:49,229
ahead likes like when people say we

00:27:46,830 --> 00:27:52,499
should rewrite this in this new hot

00:27:49,229 --> 00:27:58,889
language at what point you think that

00:27:52,499 --> 00:28:00,690
the the cost is worth the reward yeah so

00:27:58,889 --> 00:28:03,090
to speak off the cuff em please don't

00:28:00,690 --> 00:28:06,509
quote me on this but we had experienced

00:28:03,090 --> 00:28:09,059
multiple several hour outages due to the

00:28:06,509 --> 00:28:11,190
PHP code bases performance problems

00:28:09,059 --> 00:28:14,129
right so it SMS database would fall over

00:28:11,190 --> 00:28:16,289
and we would spend more time picking up

00:28:14,129 --> 00:28:17,879
broken php-fpm workers and putting them

00:28:16,289 --> 00:28:19,919
back and into the pool to sort of

00:28:17,879 --> 00:28:23,249
requests then it took us actually pivot

00:28:19,919 --> 00:28:26,099
the database master so i think that's an

00:28:23,249 --> 00:28:28,859
obvious example on the side of yes

00:28:26,099 --> 00:28:31,649
please do the rewrite um and so I think

00:28:28,859 --> 00:28:33,509
that it's worth considering but what is

00:28:31,649 --> 00:28:35,759
the economic costs in terms of developer

00:28:33,509 --> 00:28:37,289
overhead or outages if you have if you

00:28:35,759 --> 00:28:39,570
have SLI violations and have to give

00:28:37,289 --> 00:28:40,529
money back to your customers against the

00:28:39,570 --> 00:28:43,320
amount of time I was going to take to

00:28:40,529 --> 00:28:44,909
actually accomplish this and as I

00:28:43,320 --> 00:28:47,039
pointed out kind of at the end you can

00:28:44,909 --> 00:28:48,479
always go part way right and the

00:28:47,039 --> 00:28:50,009
advantage of doing the incremental

00:28:48,479 --> 00:28:52,470
refractor is that you can stop at

00:28:50,009 --> 00:28:53,639
whatever makes sense right so you don't

00:28:52,470 --> 00:28:55,730
have to do the entire thing if it makes

00:28:53,639 --> 00:28:57,530
sense to just extract the really

00:28:55,730 --> 00:29:01,300
high-value pieces and then leave

00:28:57,530 --> 00:29:01,300
everything else where it is thank you

00:29:02,710 --> 00:29:09,020
all right thank you great talk so time

00:29:06,470 --> 00:29:12,380
is always limited so how did you manage

00:29:09,020 --> 00:29:13,570
the efforts of the team or the number of

00:29:12,380 --> 00:29:17,060
people working on this project between

00:29:13,570 --> 00:29:20,540
fixing bugs and attic features to the

00:29:17,060 --> 00:29:23,270
older code base and the newer code base

00:29:20,540 --> 00:29:27,170
and how did you convince management yeah

00:29:23,270 --> 00:29:28,610
all of this so we actually thankfully

00:29:27,170 --> 00:29:31,190
that the thing working in our favor here

00:29:28,610 --> 00:29:33,440
is that we'd proven the architecture by

00:29:31,190 --> 00:29:34,760
rolling out starship kind of for some

00:29:33,440 --> 00:29:38,330
new features that nobody wanted to

00:29:34,760 --> 00:29:39,770
implement in the old code base and when

00:29:38,330 --> 00:29:41,060
we kind of made the cut was when we said

00:29:39,770 --> 00:29:43,610
okay good we're not going to add

00:29:41,060 --> 00:29:45,440
features to the old code base anymore if

00:29:43,610 --> 00:29:47,630
you want new stuff in the API you have

00:29:45,440 --> 00:29:50,480
to build a new internal service and use

00:29:47,630 --> 00:29:53,630
the new pattern and so we had been in

00:29:50,480 --> 00:29:54,680
that mode for a long while and then it

00:29:53,630 --> 00:29:56,900
was mostly a matter of convincing

00:29:54,680 --> 00:29:59,360
management but actually as I kind of jen

00:29:56,900 --> 00:30:01,520
has the last question that the cost of

00:29:59,360 --> 00:30:03,410
those adages was less than the car more

00:30:01,520 --> 00:30:04,550
than the cost of migrating everything

00:30:03,410 --> 00:30:06,710
out of the old systems and actually

00:30:04,550 --> 00:30:11,870
getting getting replacements built

00:30:06,710 --> 00:30:13,940
internally so yeah unfortunately I'm a

00:30:11,870 --> 00:30:15,320
really good answer on how to convince

00:30:13,940 --> 00:30:17,450
management and let you do things like

00:30:15,320 --> 00:30:20,090
this aside from the arm yourself with

00:30:17,450 --> 00:30:22,630
the facts measure the cost of whatever

00:30:20,090 --> 00:30:25,970
it is in terms of developer time or

00:30:22,630 --> 00:30:28,310
outage time and point to it and say look

00:30:25,970 --> 00:30:31,880
look if we invested six months here we

00:30:28,310 --> 00:30:34,030
could stop doing this thank you very

00:30:31,880 --> 00:30:34,030

YouTube URL: https://www.youtube.com/watch?v=KdVfJoImmno


