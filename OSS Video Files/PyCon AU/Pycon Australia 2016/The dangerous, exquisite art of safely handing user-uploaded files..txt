Title: The dangerous, exquisite art of safely handing user-uploaded files.
Publication date: 2016-08-16
Playlist: Pycon Australia 2016
Description: 
	Tom Eastman
https://2016.pycon-au.org/schedule/148/view_talk
Every web application has an attack surface -- the exposed points of interaction where a malicious or mischievous user can commit malice, or mischief (respectively). Possibly nowhere, however, is more vulnerable than places a user is allowed to upload arbitrary files.

The scope for abuse is eye-widening: The contents of the file, the type of the file, the size and encoding of the file, even the *name* of the file can be a potent vector for attacking your system.

The scariest part? Even the best and most secure web-frameworks (yes, I'm talking about Django) can't protect you from all of it.

In this talk, I'll show you every scary thing I know about that can be done with a file upload, and how to protect yourself from -- hopefully -- most of them.
Captions: 
	00:00:08,179 --> 00:00:19,170
hi hi how's everybody going whoop I

00:00:17,310 --> 00:00:21,119
heard that okay I guess I should start

00:00:19,170 --> 00:00:23,250
by explaining why i was inspired to give

00:00:21,119 --> 00:00:25,260
this talk in the first place because i'm

00:00:23,250 --> 00:00:27,869
not a hacker or a penetration tester by

00:00:25,260 --> 00:00:30,810
trade I'm a developer right like almost

00:00:27,869 --> 00:00:33,480
all of you I build things and I like

00:00:30,810 --> 00:00:35,460
helping people to build things my

00:00:33,480 --> 00:00:38,640
interest in security isn't born out of

00:00:35,460 --> 00:00:40,290
wanting to be a hacker it's born from a

00:00:38,640 --> 00:00:42,329
constant crippling anxiety about

00:00:40,290 --> 00:00:44,670
screwing it up and letting everyone down

00:00:42,329 --> 00:00:48,329
which is not exactly the healthiest

00:00:44,670 --> 00:00:49,559
approach but it is a motivating one so

00:00:48,329 --> 00:00:52,550
I'd always known that handling user

00:00:49,559 --> 00:00:57,899
uploads and web applications was tricky

00:00:52,550 --> 00:00:59,579
but I'd always managed to mitigate that

00:00:57,899 --> 00:01:01,050
the most effective way possible by

00:00:59,579 --> 00:01:03,660
avoiding having to do it in the first

00:01:01,050 --> 00:01:05,489
place so more recently I've been working

00:01:03,660 --> 00:01:07,619
on projects that require user uploads

00:01:05,489 --> 00:01:08,970
either because of like data in jest or

00:01:07,619 --> 00:01:10,710
because they're being rehosted for

00:01:08,970 --> 00:01:13,790
download later or handling images of a

00:01:10,710 --> 00:01:17,939
certain type and I made a few sort of

00:01:13,790 --> 00:01:18,930
unpleasant realizations so number one

00:01:17,939 --> 00:01:21,570
getting it right is harder than I

00:01:18,930 --> 00:01:23,670
expected right most of my web

00:01:21,570 --> 00:01:26,700
development experiences as a Python dev

00:01:23,670 --> 00:01:28,290
using django django has got a really

00:01:26,700 --> 00:01:30,479
good reputation when it comes to secure

00:01:28,290 --> 00:01:33,000
web development you're pretty well

00:01:30,479 --> 00:01:35,250
protected from the common pitfalls when

00:01:33,000 --> 00:01:37,590
you're building your site it's got its

00:01:35,250 --> 00:01:39,180
object relational map if you use it

00:01:37,590 --> 00:01:41,820
correctly makes you pretty much immune

00:01:39,180 --> 00:01:43,829
to SQL injection attacks its template

00:01:41,820 --> 00:01:44,970
engine has really strong auto escaping

00:01:43,829 --> 00:01:47,340
by default so you're pretty well

00:01:44,970 --> 00:01:48,960
protected from cross-site scripting it's

00:01:47,340 --> 00:01:50,009
not impossible to get attacked with

00:01:48,960 --> 00:01:51,240
cross-site scripting that's one of the

00:01:50,009 --> 00:01:53,399
hardest ones to protect yourself from

00:01:51,240 --> 00:01:55,920
but it it gets you a lot of the way

00:01:53,399 --> 00:01:57,659
there for free and the built-in user

00:01:55,920 --> 00:01:59,250
authentication stuff and the session

00:01:57,659 --> 00:02:00,780
management capabilities they're all

00:01:59,250 --> 00:02:05,490
really well designed and they follow

00:02:00,780 --> 00:02:07,500
secure best practices so with Django the

00:02:05,490 --> 00:02:08,789
defaults keep you pretty safe most of

00:02:07,500 --> 00:02:10,470
the time right out of the gate you're

00:02:08,789 --> 00:02:12,690
really well shielded from the worst of

00:02:10,470 --> 00:02:13,950
the OWASP top 10 vulnerabilities which

00:02:12,690 --> 00:02:17,730
isn't all you need to worry about

00:02:13,950 --> 00:02:19,379
but it's a really good start to my

00:02:17,730 --> 00:02:20,910
surprise though it turned out that when

00:02:19,379 --> 00:02:22,670
it comes to handling file uploads

00:02:20,910 --> 00:02:27,060
Django's default settings are

00:02:22,670 --> 00:02:30,030
problematic not insecure exactly not you

00:02:27,060 --> 00:02:32,130
know worryingly so but geared towards

00:02:30,030 --> 00:02:35,690
getting you up and running fast and not

00:02:32,130 --> 00:02:38,190
necessarily putting safety first so a

00:02:35,690 --> 00:02:42,390
lot of you have used Django at least a

00:02:38,190 --> 00:02:45,000
little bit right I'm at PyCon you who

00:02:42,390 --> 00:02:49,470
knows a Django is cool yep I'm in the

00:02:45,000 --> 00:02:51,870
right room so this snippet of code is

00:02:49,470 --> 00:02:53,459
basically all you need to do to set up

00:02:51,870 --> 00:02:57,269
basic appeal upload with Django you've

00:02:53,459 --> 00:02:59,579
got your file field here and you've got

00:02:57,269 --> 00:03:02,160
a couple required settings in your

00:02:59,579 --> 00:03:04,380
settings file the problem with this

00:03:02,160 --> 00:03:05,760
example is that behind the scenes the

00:03:04,380 --> 00:03:07,230
defaults expect you to be saving the

00:03:05,760 --> 00:03:09,299
files directly to a location where

00:03:07,230 --> 00:03:13,040
they'll be hosted and i'll be explaining

00:03:09,299 --> 00:03:15,239
why this is a pretty bad idea coming up

00:03:13,040 --> 00:03:16,860
the other thing I realized when I was

00:03:15,239 --> 00:03:18,660
doing this is that if you get it wrong

00:03:16,860 --> 00:03:20,700
the scope for damage is kind of I

00:03:18,660 --> 00:03:22,799
widening a little bit of clever

00:03:20,700 --> 00:03:25,380
manipulation could see files saved two

00:03:22,799 --> 00:03:26,880
locations you didn't expect leading to

00:03:25,380 --> 00:03:28,859
exploitation of your server a

00:03:26,880 --> 00:03:30,959
misconfigured web server could be led to

00:03:28,859 --> 00:03:33,900
execute code included in user uploaded

00:03:30,959 --> 00:03:37,410
files which I'll explain soon why that's

00:03:33,900 --> 00:03:39,989
bad but you can probably guess and most

00:03:37,410 --> 00:03:41,430
importantly there's a lack of care or a

00:03:39,989 --> 00:03:43,170
lack of care when handling these rep

00:03:41,430 --> 00:03:44,609
loaded files could turn your own project

00:03:43,170 --> 00:03:47,160
into a platform for attacking other

00:03:44,609 --> 00:03:47,970
sites and other services and I think

00:03:47,160 --> 00:03:50,760
it's fair to say that you have a

00:03:47,970 --> 00:03:54,959
responsibility to ensure that your work

00:03:50,760 --> 00:03:56,250
can be exploited to attack others so

00:03:54,959 --> 00:03:57,630
this afternoon what I'm going to do is

00:03:56,250 --> 00:03:59,880
I'm going to give you a short list of

00:03:57,630 --> 00:04:01,380
concrete steps to help you solve what is

00:03:59,880 --> 00:04:03,980
actually quite a complex problem I

00:04:01,380 --> 00:04:06,930
couldn't cover it all in one talk in

00:04:03,980 --> 00:04:08,160
order to explain why each step is a good

00:04:06,930 --> 00:04:10,049
idea i'll need to give you some examples

00:04:08,160 --> 00:04:11,389
of just how it can go wrong and what

00:04:10,049 --> 00:04:16,470
you're actually protecting yourself from

00:04:11,389 --> 00:04:18,239
now I'm terrible with spoilers I can't

00:04:16,470 --> 00:04:21,630
help but look at the last page of a

00:04:18,239 --> 00:04:22,860
mystery novel and see how it ends I I'm

00:04:21,630 --> 00:04:24,630
four seasons behind in Game of Thrones

00:04:22,860 --> 00:04:25,510
and I already know everything that

00:04:24,630 --> 00:04:28,160
happened

00:04:25,510 --> 00:04:29,870
but we're not here as a mystery show

00:04:28,160 --> 00:04:31,040
this isn't a mystery suspense is

00:04:29,870 --> 00:04:36,650
pointless I'm going to give you the last

00:04:31,040 --> 00:04:39,830
slide of my talk first so so here's my

00:04:36,650 --> 00:04:41,420
advice step zero the only winning move

00:04:39,830 --> 00:04:45,680
is not to play at all if you can avoid

00:04:41,420 --> 00:04:49,070
file uploads at all do and we'll go into

00:04:45,680 --> 00:04:51,760
that later step 1 throw away the entire

00:04:49,070 --> 00:04:55,850
file name don't trust any part of it

00:04:51,760 --> 00:04:57,620
ignore it completely step 2 always store

00:04:55,850 --> 00:04:59,480
freshly uploaded files in a quarantine

00:04:57,620 --> 00:05:01,910
somewhere outside the webroot where

00:04:59,480 --> 00:05:05,780
they're not being directly hosted again

00:05:01,910 --> 00:05:09,950
step 3 carefully parse the file yourself

00:05:05,780 --> 00:05:12,500
while it's in quarantine and step 4 copy

00:05:09,950 --> 00:05:15,740
the parts you care about into a new file

00:05:12,500 --> 00:05:17,180
that you then host so with any luck you

00:05:15,740 --> 00:05:20,720
never even host the original file that

00:05:17,180 --> 00:05:22,370
got uploaded I'm gonna spend the rest of

00:05:20,720 --> 00:05:23,810
my talk explaining why every single one

00:05:22,370 --> 00:05:25,430
of those steps is a pretty good idea

00:05:23,810 --> 00:05:30,650
especially step zero it's a good one

00:05:25,430 --> 00:05:33,050
remember that one so in order to talk

00:05:30,650 --> 00:05:34,400
about steps one and two getting rid of

00:05:33,050 --> 00:05:35,800
file names entirely and storing

00:05:34,400 --> 00:05:37,730
everything outside of the web brute I

00:05:35,800 --> 00:05:39,140
need to explain something about web

00:05:37,730 --> 00:05:40,190
server software and about some of the

00:05:39,140 --> 00:05:42,470
assumptions that they've historically

00:05:40,190 --> 00:05:45,230
made about their threat model and about

00:05:42,470 --> 00:05:47,120
their attack surface web servers I think

00:05:45,230 --> 00:05:50,000
it's fair to say are the most exposed

00:05:47,120 --> 00:05:51,950
pieces of software on the planet they're

00:05:50,000 --> 00:05:54,110
hit by requests all day non-stop

00:05:51,950 --> 00:05:56,180
legitimate requests malformed ones

00:05:54,110 --> 00:05:59,150
corrupt ones and actively malicious ones

00:05:56,180 --> 00:06:01,280
all the time by now they're really

00:05:59,150 --> 00:06:03,740
resilient to malicious attacks from

00:06:01,280 --> 00:06:06,500
outside they've had to be it's it's

00:06:03,740 --> 00:06:08,930
Darwinistic almost but here's the

00:06:06,500 --> 00:06:10,520
problem web server software does expect

00:06:08,930 --> 00:06:12,980
to be able to trust the files that

00:06:10,520 --> 00:06:14,480
they're serving they've been built with

00:06:12,980 --> 00:06:16,130
the assumption that files that they're

00:06:14,480 --> 00:06:17,990
actually serving out to people are

00:06:16,130 --> 00:06:20,480
probably there because you put them

00:06:17,990 --> 00:06:23,260
there so quite often they're configured

00:06:20,480 --> 00:06:25,610
to execute instructions in those files

00:06:23,260 --> 00:06:27,560
so this is the key premise right this is

00:06:25,610 --> 00:06:29,510
this is rule number one if an attacker

00:06:27,560 --> 00:06:30,980
can upload some kind of script or some

00:06:29,510 --> 00:06:34,560
kind of instructions to your website and

00:06:30,980 --> 00:06:56,850
get your web server to run that they win

00:06:34,560 --> 00:07:02,669
OOP is that me 12 is I'll turn that back

00:06:56,850 --> 00:07:04,800
on the wireless is back on okay can you

00:07:02,669 --> 00:07:09,810
hear me cool okay let's see if that

00:07:04,800 --> 00:07:11,400
doesn't happen again okay so code that

00:07:09,810 --> 00:07:14,070
can be executed by the web server from

00:07:11,400 --> 00:07:16,200
inside the webroot what's an example of

00:07:14,070 --> 00:07:17,729
a type of code that lives in the webroot

00:07:16,200 --> 00:07:22,979
that is executed by the web server when

00:07:17,729 --> 00:07:25,410
it's served somebody PHP right the most

00:07:22,979 --> 00:07:27,360
obvious is PHP but it's not the only one

00:07:25,410 --> 00:07:28,860
okay there's a whole bunch apache server

00:07:27,360 --> 00:07:30,300
side includes Apache has its own

00:07:28,860 --> 00:07:32,220
built-in little programming language

00:07:30,300 --> 00:07:34,110
that lets you do all kinds of things CGI

00:07:32,220 --> 00:07:36,660
scripts the traditional original way of

00:07:34,110 --> 00:07:40,289
doing things active server pages if you

00:07:36,660 --> 00:07:41,760
live in the windows world HT access and

00:07:40,289 --> 00:07:43,860
configuration directives if you're using

00:07:41,760 --> 00:07:46,400
apache you can reconfigure apache with

00:07:43,860 --> 00:07:48,870
files that are in the web root and

00:07:46,400 --> 00:07:51,000
whatever modules that you might be using

00:07:48,870 --> 00:07:53,940
in whatever where web server you happen

00:07:51,000 --> 00:07:55,500
to be using those are Apache centric but

00:07:53,940 --> 00:07:56,669
the same principle applies to almost

00:07:55,500 --> 00:07:59,850
every web server that you might be

00:07:56,669 --> 00:08:01,650
working with if your web server is

00:07:59,850 --> 00:08:03,330
configured to treat any of these files

00:08:01,650 --> 00:08:05,490
as special than an attacker who can

00:08:03,330 --> 00:08:07,430
successfully upload any of these files

00:08:05,490 --> 00:08:10,680
might have a way into your system right

00:08:07,430 --> 00:08:12,840
I'm going to be talking about PHP as an

00:08:10,680 --> 00:08:14,910
example here but this is not a PHP only

00:08:12,840 --> 00:08:16,740
issue it's just that its ubiquity

00:08:14,910 --> 00:08:18,479
combined with its execution model makes

00:08:16,740 --> 00:08:20,850
it a common risk factor so it's worth

00:08:18,479 --> 00:08:22,950
having front and center so let's say you

00:08:20,850 --> 00:08:25,770
have PHP installed either intentionally

00:08:22,950 --> 00:08:27,570
or unintentionally and we'll we'll get

00:08:25,770 --> 00:08:30,389
to that it does happen it's easy to have

00:08:27,570 --> 00:08:32,250
happen most default Apache

00:08:30,389 --> 00:08:34,229
configurations including debian and

00:08:32,250 --> 00:08:37,380
ubuntu which most of us probably use

00:08:34,229 --> 00:08:39,060
quite a lot will execute any files

00:08:37,380 --> 00:08:41,279
requested with the dot PHP file

00:08:39,060 --> 00:08:44,550
extension as if they were part of your

00:08:41,279 --> 00:08:46,470
program okay that you're probably used

00:08:44,550 --> 00:08:48,360
to so you might think that you need to

00:08:46,470 --> 00:08:51,480
block any files with the extension p

00:08:48,360 --> 00:08:55,170
HP from being uploaded to your web root

00:08:51,480 --> 00:08:58,019
and you'd be correct don't let that get

00:08:55,170 --> 00:08:59,459
uploaded so the trouble is that same

00:08:58,019 --> 00:09:01,170
default configuration the one that's

00:08:59,459 --> 00:09:03,329
installed by default whenever you just

00:09:01,170 --> 00:09:06,510
go apt-get install apache on any debian

00:09:03,329 --> 00:09:10,230
ubuntu system also runs as PHP any files

00:09:06,510 --> 00:09:21,990
with these extensions PHP three PHP for

00:09:10,230 --> 00:09:27,750
php5 page b6 PHP 7p HT and PHP s and p

00:09:21,990 --> 00:09:30,300
HTML and that's just the standard

00:09:27,750 --> 00:09:32,250
conservative configuration provided by

00:09:30,300 --> 00:09:33,810
distributions that's the default that's

00:09:32,250 --> 00:09:36,600
the well-constructed default

00:09:33,810 --> 00:09:38,100
configuration and unfortunately as you

00:09:36,600 --> 00:09:41,070
might have heard the internet is full of

00:09:38,100 --> 00:09:43,200
bad advice and so depending on what

00:09:41,070 --> 00:09:44,670
tutorial you or your administrator

00:09:43,200 --> 00:09:46,440
followed when setting up PHP they might

00:09:44,670 --> 00:09:49,260
have used this snippet of configuration

00:09:46,440 --> 00:09:51,860
code when setting up PHP with Apache so

00:09:49,260 --> 00:09:54,899
that looks pretty familiar anyone who's

00:09:51,860 --> 00:09:57,329
done Apache configuration has seen add

00:09:54,899 --> 00:09:58,589
handler before it looks familiar it

00:09:57,329 --> 00:10:00,870
looks innocent but it has this

00:09:58,589 --> 00:10:04,470
interesting bonus feature of allowing

00:10:00,870 --> 00:10:07,019
multiple extensions on the file so now

00:10:04,470 --> 00:10:09,600
all these counters PHP as well filename

00:10:07,019 --> 00:10:12,420
dot PHP dot JPEG file name dot PHP give

00:10:09,600 --> 00:10:14,220
phone into PHP take stock jpg gif all of

00:10:12,420 --> 00:10:16,230
these will be executed as PHP on your

00:10:14,220 --> 00:10:22,560
server file name dot PHP dot whatever I

00:10:16,230 --> 00:10:23,910
want to type yeah so so your extension

00:10:22,560 --> 00:10:25,769
checking in your upload is already

00:10:23,910 --> 00:10:27,449
getting a little bit front-loaded so

00:10:25,769 --> 00:10:29,490
what if you're not even using PHP right

00:10:27,449 --> 00:10:30,990
well it's it's surprising how often PHP

00:10:29,490 --> 00:10:32,940
is running on your system even without

00:10:30,990 --> 00:10:34,079
you knowing it if you're using any kind

00:10:32,940 --> 00:10:36,360
of shared hosting environment it

00:10:34,079 --> 00:10:39,390
probably supports PHP and if you've

00:10:36,360 --> 00:10:41,250
installed debian and ubuntu and you have

00:10:39,390 --> 00:10:44,279
like install recommends or install

00:10:41,250 --> 00:10:46,079
suggests you might have gotten mod PHP

00:10:44,279 --> 00:10:48,329
installed by default anyway if you

00:10:46,079 --> 00:10:50,040
select lamp server when you do your

00:10:48,329 --> 00:10:52,320
installation on your debian ubuntu that

00:10:50,040 --> 00:10:55,110
automatically installs a full PHP stack

00:10:52,320 --> 00:10:58,050
as well even if the p in lamp to you

00:10:55,110 --> 00:11:00,450
meant python or pearl or Ruby or any

00:10:58,050 --> 00:11:03,210
number of things

00:11:00,450 --> 00:11:04,830
so again I'm using PHP as an example but

00:11:03,210 --> 00:11:06,780
these risk factors apply to any system

00:11:04,830 --> 00:11:10,440
where the web server is configured to

00:11:06,780 --> 00:11:13,860
execute code in files based on what that

00:11:10,440 --> 00:11:15,660
file name might be and as if that wasn't

00:11:13,860 --> 00:11:17,160
enough reason for you to never trust the

00:11:15,660 --> 00:11:21,540
file name or the extension of an

00:11:17,160 --> 00:11:22,620
uploaded file here's seven more so file

00:11:21,540 --> 00:11:24,330
names can do weird things with their

00:11:22,620 --> 00:11:25,890
case have you made sure to standardize

00:11:24,330 --> 00:11:28,380
the case on your on your extension

00:11:25,890 --> 00:11:30,780
checking file names can look funny this

00:11:28,380 --> 00:11:33,240
one would fool older versions of

00:11:30,780 --> 00:11:36,780
Internet Information server so an ASP

00:11:33,240 --> 00:11:38,790
file would read that file as a dot jpg

00:11:36,780 --> 00:11:40,200
but when it got saved to disk because of

00:11:38,790 --> 00:11:42,450
a quirk in the file system it would just

00:11:40,200 --> 00:11:43,740
so save it as file ASP and you'd end up

00:11:42,450 --> 00:11:47,670
with that same execution problem that

00:11:43,740 --> 00:11:50,730
you had with PHP if your file name has

00:11:47,670 --> 00:11:52,620
dot slash slash dot slash how sure are

00:11:50,730 --> 00:11:54,870
you that you'll be safely handling that

00:11:52,620 --> 00:11:56,490
Django handles that pretty gracefully

00:11:54,870 --> 00:11:58,290
but a lot of things don't and are you

00:11:56,490 --> 00:12:01,170
shelling out with that file name to do

00:11:58,290 --> 00:12:03,180
some kind of image manipulation or any

00:12:01,170 --> 00:12:04,950
kind of additional thing are you sure

00:12:03,180 --> 00:12:08,400
you've successfully sanitized that what

00:12:04,950 --> 00:12:09,960
about that Python lets you kind of swap

00:12:08,400 --> 00:12:10,950
around front slash and backslash four

00:12:09,960 --> 00:12:12,780
paths doesn't it because it's

00:12:10,950 --> 00:12:15,150
cross-platform and on Windows I think it

00:12:12,780 --> 00:12:18,060
accepts both of them may be mixed like

00:12:15,150 --> 00:12:19,410
that someone else tell me yep oh yeah I

00:12:18,060 --> 00:12:22,710
was kind of hoping that wasn't true but

00:12:19,410 --> 00:12:28,530
I was hoping I was lying to just

00:12:22,710 --> 00:12:31,980
intimidate you more darn old school

00:12:28,530 --> 00:12:34,620
eight dot 3 / file names on windows file

00:12:31,980 --> 00:12:37,230
systems are still a bit weird so this

00:12:34,620 --> 00:12:39,390
file might be called web config but

00:12:37,230 --> 00:12:41,580
it'll get saved with a special entry in

00:12:39,390 --> 00:12:43,110
the file system with that killed one

00:12:41,580 --> 00:12:45,150
thing and you can actually overwrite the

00:12:43,110 --> 00:12:49,200
file if you save it to that depending on

00:12:45,150 --> 00:12:50,910
your Windows system configuration files

00:12:49,200 --> 00:12:52,290
with weird mixtures of single and double

00:12:50,910 --> 00:12:53,580
quotes in the file name could be

00:12:52,290 --> 00:12:56,970
hilarious to anything that you're

00:12:53,580 --> 00:12:58,740
showing at and the poison Mel bite if

00:12:56,970 --> 00:13:00,540
you have a if you have a null byte in

00:12:58,740 --> 00:13:02,310
your string and then your file is being

00:13:00,540 --> 00:13:03,690
passed to any kind of see function which

00:13:02,310 --> 00:13:04,670
will treat that as the end of the string

00:13:03,690 --> 00:13:09,210
you're going to have a hilarious time

00:13:04,670 --> 00:13:12,540
and so finally as if that wasn't reason

00:13:09,210 --> 00:13:14,070
enough to throw away the file name you

00:13:12,540 --> 00:13:16,230
can't trust them in the first place be

00:13:14,070 --> 00:13:18,750
because even forgetting maliciousness

00:13:16,230 --> 00:13:20,340
completely the users will upload the

00:13:18,750 --> 00:13:24,060
wrong file and they'll upload files

00:13:20,340 --> 00:13:26,220
without extensions and file extensions

00:13:24,060 --> 00:13:27,720
were never a successful plan for trying

00:13:26,220 --> 00:13:29,670
to determine what type of file was in

00:13:27,720 --> 00:13:33,060
the first place so you don't have to be

00:13:29,670 --> 00:13:37,110
a malicious user to upload the wrong

00:13:33,060 --> 00:13:39,180
file nope you can't trust the file a

00:13:37,110 --> 00:13:42,000
name to tell you anything true or useful

00:13:39,180 --> 00:13:43,620
at the contents of the file likewise you

00:13:42,000 --> 00:13:45,450
can't trust the content-type header in

00:13:43,620 --> 00:13:47,460
the upload because a malicious user

00:13:45,450 --> 00:13:49,830
could easily faked that in an upload to

00:13:47,460 --> 00:13:52,170
be whatever they want it to be throw

00:13:49,830 --> 00:13:54,660
away the entire file name including the

00:13:52,170 --> 00:13:56,940
extension if you're saving the file to

00:13:54,660 --> 00:13:58,770
the disk save it as an anonymous lump of

00:13:56,940 --> 00:14:00,390
data maybe with a file name generated

00:13:58,770 --> 00:14:02,280
from a hash of the contents of the file

00:14:00,390 --> 00:14:04,200
or some database ID or some transaction

00:14:02,280 --> 00:14:07,710
ID something that you made up in you

00:14:04,200 --> 00:14:09,750
control don't use the file name at all

00:14:07,710 --> 00:14:11,520
if you need to keep it save it to your

00:14:09,750 --> 00:14:13,020
database but treat it like untrusted

00:14:11,520 --> 00:14:15,930
input just like any other untrusted

00:14:13,020 --> 00:14:17,280
input and don't use it as a file name if

00:14:15,930 --> 00:14:19,440
you're saving to an object store that

00:14:17,280 --> 00:14:21,270
guess 3 do the same thing actually

00:14:19,440 --> 00:14:23,070
saving your files directly to s3 is a

00:14:21,270 --> 00:14:25,920
good idea anyway because it removes a

00:14:23,070 --> 00:14:28,560
whole lot of it's a good separation of

00:14:25,920 --> 00:14:33,450
the data of your web app from the server

00:14:28,560 --> 00:14:35,400
side finally throwing away the entire

00:14:33,450 --> 00:14:38,130
file name forces you into steps two and

00:14:35,400 --> 00:14:42,120
three of my safety plan so back to that

00:14:38,130 --> 00:14:43,800
again always store freshly uploaded

00:14:42,120 --> 00:14:46,590
files in a quarantine outside the

00:14:43,800 --> 00:14:49,230
webroot now that you've thrown away the

00:14:46,590 --> 00:14:51,630
file name you've removed from yourself

00:14:49,230 --> 00:14:55,080
the temptation of trusting it to tell

00:14:51,630 --> 00:14:57,060
you anything useful thank you so now you

00:14:55,080 --> 00:14:58,560
are actually forced to look inside the

00:14:57,060 --> 00:15:01,230
file itself to prove that it contains

00:14:58,560 --> 00:15:03,690
what you were expecting right if you are

00:15:01,230 --> 00:15:05,520
expecting a CSV you actually have to

00:15:03,690 --> 00:15:06,780
read the CSV have to see that what's

00:15:05,520 --> 00:15:09,420
inside it and actually see that it is a

00:15:06,780 --> 00:15:11,250
CSV you don't get to be lazy anymore if

00:15:09,420 --> 00:15:12,300
you're expecting an image file you

00:15:11,250 --> 00:15:14,160
actually have to use an image file

00:15:12,300 --> 00:15:17,190
parser to prove that it opens

00:15:14,160 --> 00:15:19,580
successfully as an image so you're safe

00:15:17,190 --> 00:15:19,580
now right

00:15:19,819 --> 00:15:29,819
nah reading in parsing potentially

00:15:27,329 --> 00:15:32,639
malicious files is not a fun game you

00:15:29,819 --> 00:15:33,689
don't actually want to be playing it but

00:15:32,639 --> 00:15:35,849
if you're going to be serving the files

00:15:33,689 --> 00:15:38,119
you have to because the alternative is

00:15:35,849 --> 00:15:41,279
throwing your users under the bus it's

00:15:38,119 --> 00:15:42,329
yeah sorry it's your job to protect them

00:15:41,279 --> 00:15:45,989
from your website not the other way

00:15:42,329 --> 00:15:48,419
around so the things that can go wrong

00:15:45,989 --> 00:15:50,159
with the actual file content or about as

00:15:48,419 --> 00:15:52,109
myriad as the kinds of types that exist

00:15:50,159 --> 00:15:54,089
in the world but just for a couple of

00:15:52,109 --> 00:15:56,220
examples a file could straight up

00:15:54,089 --> 00:15:59,220
contain a virus right just plain old

00:15:56,220 --> 00:16:00,569
virus old fashioned a compressed file

00:15:59,220 --> 00:16:02,069
like an image file could be crafted to

00:16:00,569 --> 00:16:04,309
blow out your memory when you parse it

00:16:02,069 --> 00:16:07,259
it could be like 10 billion black pixels

00:16:04,309 --> 00:16:09,959
in XML or xml-based file can have all

00:16:07,259 --> 00:16:13,019
kinds of nasty fun things going on to

00:16:09,959 --> 00:16:14,609
mess with your XML parser if you haven't

00:16:13,019 --> 00:16:17,249
seen my talk about XML you should

00:16:14,609 --> 00:16:20,489
probably check that out just because XML

00:16:17,249 --> 00:16:22,439
is fun were you ever one of those kids

00:16:20,489 --> 00:16:25,409
who emailed a zip file with a hundred

00:16:22,439 --> 00:16:31,199
gigabytes of empty space to to me

00:16:25,409 --> 00:16:32,699
neither now and yet on that subject if

00:16:31,199 --> 00:16:35,129
you're dealing with zip files you have

00:16:32,699 --> 00:16:37,100
all of these problems all over again for

00:16:35,129 --> 00:16:39,779
every file that might be in the zip file

00:16:37,100 --> 00:16:45,059
including unique ones special to the zip

00:16:39,779 --> 00:16:46,559
file like Android pki files talk to me

00:16:45,059 --> 00:16:48,859
about weird things with zip files later

00:16:46,559 --> 00:16:52,229
they can they can be their own fun game

00:16:48,859 --> 00:16:54,389
so the advice that I can give you here

00:16:52,229 --> 00:16:55,949
is limited because what you need to do

00:16:54,389 --> 00:16:58,169
depends on your individual use case in

00:16:55,949 --> 00:17:00,359
the kinds of files you're expecting you

00:16:58,169 --> 00:17:01,919
need to be aware of the failure modes of

00:17:00,359 --> 00:17:05,399
whatever parsers you're using to read

00:17:01,919 --> 00:17:06,899
uploads so things like XML you have you

00:17:05,399 --> 00:17:08,279
with things like XML you have the

00:17:06,899 --> 00:17:09,809
problem that they're essentially

00:17:08,279 --> 00:17:11,850
programming languages in their own right

00:17:09,809 --> 00:17:14,339
and the parser is essentially an

00:17:11,850 --> 00:17:15,779
interpreter so you need to turn off all

00:17:14,339 --> 00:17:18,209
the features of the parsers that are

00:17:15,779 --> 00:17:21,299
dangerous on untrusted input and again

00:17:18,209 --> 00:17:22,980
with XML there's a lot of them and with

00:17:21,299 --> 00:17:24,600
images it's vitally important to keep

00:17:22,980 --> 00:17:28,169
your systems up to date and patched

00:17:24,600 --> 00:17:30,059
because we have a long long terrible

00:17:28,169 --> 00:17:33,740
history of security bugs being found in

00:17:30,059 --> 00:17:33,740
image parsing libraries

00:17:35,200 --> 00:17:41,210
who knows where I'm going with this some

00:17:38,120 --> 00:17:44,030
of you did cool who here is unfamiliar

00:17:41,210 --> 00:17:46,430
with imagemagick cool okay so

00:17:44,030 --> 00:17:48,170
imagemagick is a ubiquitous suite of

00:17:46,430 --> 00:17:49,670
image manipulation tools that used to be

00:17:48,170 --> 00:17:51,170
really commonly used for image

00:17:49,670 --> 00:17:53,600
manipulation and web apps because it's

00:17:51,170 --> 00:17:56,450
really easily scriptable resize a file

00:17:53,600 --> 00:18:00,770
identify a file add arrows annotations

00:17:56,450 --> 00:18:03,200
to a file and its venerable it's been

00:18:00,770 --> 00:18:05,750
around for a long time and two months

00:18:03,200 --> 00:18:07,610
ago a large number of critical security

00:18:05,750 --> 00:18:10,790
issues were publicly disclosed and

00:18:07,610 --> 00:18:12,530
patched in imagemagick and these were

00:18:10,790 --> 00:18:15,080
worst nightmare scenario kind of bugs

00:18:12,530 --> 00:18:17,720
like anybody using imagemagick to do any

00:18:15,080 --> 00:18:19,460
kind of operation could have been to

00:18:17,720 --> 00:18:23,120
handle any untrusted image could have

00:18:19,460 --> 00:18:25,250
been vulnerable and it was trivially

00:18:23,120 --> 00:18:26,780
easy to exploit so here's an example

00:18:25,250 --> 00:18:29,240
that would trigger shell execution on

00:18:26,780 --> 00:18:32,630
your server this is an entire image file

00:18:29,240 --> 00:18:34,429
if it was called exploit mvg mbg is

00:18:32,630 --> 00:18:36,860
actually an image magic specific file

00:18:34,429 --> 00:18:39,710
type I think but this could have been in

00:18:36,860 --> 00:18:43,670
any imagemagick compatible thing and you

00:18:39,710 --> 00:18:45,200
see that that got run as shell so you

00:18:43,670 --> 00:18:47,900
don't even have to be a clever hacker

00:18:45,200 --> 00:18:49,730
there's no there's no buffer overflow

00:18:47,900 --> 00:18:53,140
stuff there's no stack smashing there's

00:18:49,730 --> 00:18:56,480
no clever c low-level machine code

00:18:53,140 --> 00:18:59,390
exploitation here straight up type in

00:18:56,480 --> 00:19:02,980
the commands you want the server to run

00:18:59,390 --> 00:19:02,980
and the server belongs to you now so

00:19:04,120 --> 00:19:08,330
anyone who's behind on their security

00:19:06,350 --> 00:19:10,250
patching could be could end up being

00:19:08,330 --> 00:19:15,020
vulnerable to something embarrassingly

00:19:10,250 --> 00:19:18,020
destructive and don't get me started on

00:19:15,020 --> 00:19:19,550
antivirus software just follow tavis or

00:19:18,020 --> 00:19:23,660
Middies feed on twitter and weep for

00:19:19,550 --> 00:19:25,130
Humanity fun fact actually Tavis Ormandy

00:19:23,660 --> 00:19:26,480
found a bunch of severe security

00:19:25,130 --> 00:19:29,570
vulnerabilities in Symantec AntiVirus

00:19:26,480 --> 00:19:32,140
recently and he tried to email them to

00:19:29,570 --> 00:19:36,320
warn them about it but semantic you know

00:19:32,140 --> 00:19:39,020
uses its eats its own dog food and used

00:19:36,320 --> 00:19:40,790
Symantec to scan the emails attachments

00:19:39,020 --> 00:19:43,300
and their entire email infrastructure

00:19:40,790 --> 00:19:43,300
crashed

00:19:44,630 --> 00:19:49,740
so so look if you're required to run

00:19:48,029 --> 00:19:52,380
antivirus software because of business

00:19:49,740 --> 00:19:53,880
requirements or customer requirements my

00:19:52,380 --> 00:19:56,010
recommendation to you would be run at

00:19:53,880 --> 00:19:58,590
somewhere else get it get it off your

00:19:56,010 --> 00:20:01,320
server so you maybe you can mount the

00:19:58,590 --> 00:20:03,419
upload quarantine as an NFS file share

00:20:01,320 --> 00:20:05,970
or some other file share or you can

00:20:03,419 --> 00:20:07,620
upload files directly to a cloud

00:20:05,970 --> 00:20:10,470
scanning service if they're not

00:20:07,620 --> 00:20:14,970
confidential data but antivirus software

00:20:10,470 --> 00:20:17,580
has a pretty patchy track record and you

00:20:14,970 --> 00:20:20,130
need to assume that bad things will

00:20:17,580 --> 00:20:22,830
happen if the software is running in an

00:20:20,130 --> 00:20:23,970
untrusted spot so if that doesn't scare

00:20:22,830 --> 00:20:25,440
you about opening up and looking at

00:20:23,970 --> 00:20:28,559
random files and I don't really know

00:20:25,440 --> 00:20:30,720
what will but if you're receiving the

00:20:28,559 --> 00:20:32,789
files from the internet it is your job

00:20:30,720 --> 00:20:34,460
to do this you still have to look inside

00:20:32,789 --> 00:20:37,740
them and make sure that they're okay so

00:20:34,460 --> 00:20:39,120
remember step zero right the only

00:20:37,740 --> 00:20:40,679
winning move is not to play this is the

00:20:39,120 --> 00:20:42,950
point where you might be starting to be

00:20:40,679 --> 00:20:45,059
really tempted to look into tools like

00:20:42,950 --> 00:20:47,190
gravatar and Libra avatar to handle

00:20:45,059 --> 00:20:49,049
those profile pictures that that your

00:20:47,190 --> 00:20:51,000
that your client insisted that people

00:20:49,049 --> 00:20:53,639
allow to be able to customize their

00:20:51,000 --> 00:20:57,539
profiles if you can outsource it if you

00:20:53,639 --> 00:20:58,889
can outsource the risk do so and if not

00:20:57,539 --> 00:21:00,840
keep your tools up to date keep your

00:20:58,889 --> 00:21:02,880
security patches current keep your

00:21:00,840 --> 00:21:05,039
parsers and file ingest mechanisms

00:21:02,880 --> 00:21:08,190
conservative paranoid and stupid and

00:21:05,039 --> 00:21:09,269
throw away the files that look wrong and

00:21:08,190 --> 00:21:10,470
this might be an extra credits

00:21:09,269 --> 00:21:12,480
assignment but if you're working in a

00:21:10,470 --> 00:21:14,580
high-risk environment then definitely

00:21:12,480 --> 00:21:16,830
look into a parmer app armor is a pretty

00:21:14,580 --> 00:21:20,039
cool technology it's a debian and ubuntu

00:21:16,830 --> 00:21:21,990
thing but you can use selinux profiles

00:21:20,039 --> 00:21:24,179
to do roughly the same thing on redhat

00:21:21,990 --> 00:21:26,630
it's a security technology that

00:21:24,179 --> 00:21:28,710
restricts the program's capabilities so

00:21:26,630 --> 00:21:30,690
for example you would create an app

00:21:28,710 --> 00:21:32,610
armor profile that says this programs

00:21:30,690 --> 00:21:36,179
will have to open its shared libraries

00:21:32,610 --> 00:21:37,830
and files in my upload folder but if it

00:21:36,179 --> 00:21:42,269
tries to open a network connection or

00:21:37,830 --> 00:21:43,740
start a subshell kill it so remember the

00:21:42,269 --> 00:21:45,389
image magic example from before a

00:21:43,740 --> 00:21:47,220
well-crafted app armor profile might

00:21:45,389 --> 00:21:52,710
have actually preempted you preemptively

00:21:47,220 --> 00:21:56,070
protected you from faulty software that

00:21:52,710 --> 00:21:57,660
you didn't even know was faulty the

00:21:56,070 --> 00:22:02,310
second image magic behaved in an

00:21:57,660 --> 00:22:04,050
expected way like running LS the process

00:22:02,310 --> 00:22:05,910
could have been killed by a parmer and a

00:22:04,050 --> 00:22:09,720
warning could show up in your logs which

00:22:05,910 --> 00:22:10,980
maybe one day you'll even read and so

00:22:09,720 --> 00:22:12,210
this is this is cool stuff it's

00:22:10,980 --> 00:22:13,530
definitely worth checking out if you're

00:22:12,210 --> 00:22:15,570
working in any kind of high-risk

00:22:13,530 --> 00:22:17,430
environment and if you're a paranoid

00:22:15,570 --> 00:22:22,490
systems geek like I'm hopefully turning

00:22:17,430 --> 00:22:24,870
you into so we finally reached step for

00:22:22,490 --> 00:22:26,190
the final safeguard that might protect

00:22:24,870 --> 00:22:30,810
you and your users from unpleasant

00:22:26,190 --> 00:22:32,760
surprises the idea here is you never

00:22:30,810 --> 00:22:35,280
serve the original uploaded file if you

00:22:32,760 --> 00:22:39,570
can possibly avoid it you build a new

00:22:35,280 --> 00:22:42,150
file yourself that isn't a straight copy

00:22:39,570 --> 00:22:45,780
of the old one the most simple example

00:22:42,150 --> 00:22:47,370
again is image files right once you

00:22:45,780 --> 00:22:49,170
validated that the uploaded file is

00:22:47,370 --> 00:22:51,480
actually a JPEG like you expected it to

00:22:49,170 --> 00:22:53,310
be don't just copy it into place for

00:22:51,480 --> 00:22:55,410
hosting instead create a new JPEG with

00:22:53,310 --> 00:22:58,020
the same picture in it either by Rhian

00:22:55,410 --> 00:22:59,220
coding it or rescaling the image which

00:22:58,020 --> 00:23:00,510
with an image file you're probably going

00:22:59,220 --> 00:23:03,060
to do anyway right you're going to

00:23:00,510 --> 00:23:05,160
resize it and do what you need or

00:23:03,060 --> 00:23:06,360
convert it to another format entirely

00:23:05,160 --> 00:23:10,460
maybe you're going to serve it as a PNG

00:23:06,360 --> 00:23:12,360
when it was uploaded as something else

00:23:10,460 --> 00:23:14,600
there's two goals that you want to

00:23:12,360 --> 00:23:17,160
achieve by doing this the first one is

00:23:14,600 --> 00:23:19,080
we end up hosting the file that we built

00:23:17,160 --> 00:23:20,670
and that we know has the data that we

00:23:19,080 --> 00:23:23,100
need and that we know doesn't contain

00:23:20,670 --> 00:23:25,650
any other unpleasant surprises and the

00:23:23,100 --> 00:23:27,120
second one is we've successfully thrown

00:23:25,650 --> 00:23:30,000
away any data that we don't need or

00:23:27,120 --> 00:23:31,950
don't care about so JPEG files again

00:23:30,000 --> 00:23:33,630
they're a good example tampering with

00:23:31,950 --> 00:23:35,610
the image yourself you might break any

00:23:33,630 --> 00:23:37,830
last malicious content that might have

00:23:35,610 --> 00:23:39,300
been in there like after all that

00:23:37,830 --> 00:23:40,380
malicious content might not have been

00:23:39,300 --> 00:23:45,060
meant for you it might have been

00:23:40,380 --> 00:23:47,430
exploiting a image bug in Android or

00:23:45,060 --> 00:23:49,200
iPhone devices for example there was

00:23:47,430 --> 00:23:51,000
there been vulnerable ities in both

00:23:49,200 --> 00:23:52,620
platforms within the last period of time

00:23:51,000 --> 00:23:57,000
stage fright and I don't think the

00:23:52,620 --> 00:23:59,070
iphone one has a clever name but but it

00:23:57,000 --> 00:24:02,850
might not be you being attacked so you

00:23:59,070 --> 00:24:05,940
might accidentally on purpose break the

00:24:02,850 --> 00:24:07,350
exploit and forget about securities for

00:24:05,940 --> 00:24:10,590
a second it's actually just good data

00:24:07,350 --> 00:24:11,490
hygiene anyway so imagine a user is

00:24:10,590 --> 00:24:14,070
uploading a picture and

00:24:11,490 --> 00:24:16,080
picture contains an exit header file

00:24:14,070 --> 00:24:17,360
that includes the GPS coordinates of the

00:24:16,080 --> 00:24:19,620
location where they took the photo

00:24:17,360 --> 00:24:22,110
that's a potential data leak that the

00:24:19,620 --> 00:24:23,850
user possibly neither expected nor

00:24:22,110 --> 00:24:26,809
desired right like they probably didn't

00:24:23,850 --> 00:24:29,850
expect that their location would show up

00:24:26,809 --> 00:24:31,980
if there's no compelling reason for the

00:24:29,850 --> 00:24:34,170
image to have that data to have all that

00:24:31,980 --> 00:24:36,270
extra metadata in it it should just be

00:24:34,170 --> 00:24:40,050
removed as a routine part of your upload

00:24:36,270 --> 00:24:42,870
processing so take this photo for

00:24:40,050 --> 00:24:45,840
example this photo was published on

00:24:42,870 --> 00:24:47,400
Google+ a month ago by Huawei to

00:24:45,840 --> 00:24:51,600
demonstrate the power of the camera on

00:24:47,400 --> 00:24:54,620
their new p9 smartphone it's beautiful

00:24:51,600 --> 00:24:57,600
isn't it that is a good smartphone photo

00:24:54,620 --> 00:25:01,080
unfortunately for huawei Google+ didn't

00:24:57,600 --> 00:25:02,670
sanitize the exit headers and because of

00:25:01,080 --> 00:25:07,800
that we could all see that the image was

00:25:02,670 --> 00:25:11,070
actually taken on something a little

00:25:07,800 --> 00:25:12,720
bigger than a smartphone camera so

00:25:11,070 --> 00:25:17,760
always be on the side of your users

00:25:12,720 --> 00:25:20,640
discretion don't be like Google+ so

00:25:17,760 --> 00:25:21,720
we're back where we started I hope that

00:25:20,640 --> 00:25:25,140
what I've done is given you some food

00:25:21,720 --> 00:25:27,090
for thought and some basic ideas on how

00:25:25,140 --> 00:25:31,110
to make both yourself and your users

00:25:27,090 --> 00:25:33,540
safer so take care right beautiful code

00:25:31,110 --> 00:25:37,260
and always be on the lookout for new

00:25:33,540 --> 00:25:38,400
ways you can disappoint bad people thank

00:25:37,260 --> 00:25:40,640
you very much for your time have a great

00:25:38,400 --> 00:25:40,640
conference

00:25:44,410 --> 00:25:52,330
I think if anyone has questions Oliver

00:25:50,560 --> 00:25:53,950
and I will be going around so I'll be

00:25:52,330 --> 00:26:00,670
taking this side and Oliver will be

00:25:53,950 --> 00:26:02,410
taking that side hey thanks Tom is there

00:26:00,670 --> 00:26:05,080
any performance or security

00:26:02,410 --> 00:26:07,960
considerations on storing files

00:26:05,080 --> 00:26:09,400
especially with those funky pathnames by

00:26:07,960 --> 00:26:11,500
blobbing it and putting in a database is

00:26:09,400 --> 00:26:13,690
that a better or worse thing to do

00:26:11,500 --> 00:26:15,160
rather think everyone everyone will tell

00:26:13,690 --> 00:26:18,660
you it's a terrible idea but it does

00:26:15,160 --> 00:26:18,660
depend a little bit on your case so

00:26:18,870 --> 00:26:25,300
there are better options for file

00:26:22,630 --> 00:26:28,060
storage but the advice that you're going

00:26:25,300 --> 00:26:33,160
to get a lot these days is on any

00:26:28,060 --> 00:26:35,110
website that has even an intermediate

00:26:33,160 --> 00:26:37,060
amount of traffic you're probably going

00:26:35,110 --> 00:26:39,190
to put some kind of CDN in front of it

00:26:37,060 --> 00:26:44,410
anyway or some kind of reverse proxy or

00:26:39,190 --> 00:26:45,730
like varnish or fastly or and so at that

00:26:44,410 --> 00:26:48,070
point suddenly where you're storing the

00:26:45,730 --> 00:26:49,750
original file matters less so I wouldn't

00:26:48,070 --> 00:26:53,470
recommend it but it's not it's not

00:26:49,750 --> 00:26:55,840
actually as bad an idea as some ideas a

00:26:53,470 --> 00:26:57,220
better a better option may just be

00:26:55,840 --> 00:26:58,690
throwing it in s3 or something like that

00:26:57,220 --> 00:27:01,600
especially if you're in that sort of

00:26:58,690 --> 00:27:08,110
cloud environment anyway ok I will

00:27:01,600 --> 00:27:10,480
actually be more ok thanks Tom hey is

00:27:08,110 --> 00:27:13,600
there anything we can do in Django as of

00:27:10,480 --> 00:27:17,640
right now that would make Django more

00:27:13,600 --> 00:27:20,650
secure for future users except is

00:27:17,640 --> 00:27:24,700
considering that we can't file field

00:27:20,650 --> 00:27:26,890
yeah so okay so I'm being a little

00:27:24,700 --> 00:27:30,580
needlessly mean to django with this talk

00:27:26,890 --> 00:27:32,170
so their defaults aren't great because

00:27:30,580 --> 00:27:33,700
of where they're putting the files but

00:27:32,170 --> 00:27:36,820
if you just go a little bit further than

00:27:33,700 --> 00:27:39,760
the defaults you're in better shape like

00:27:36,820 --> 00:27:41,260
there's plenty of other storage engines

00:27:39,760 --> 00:27:43,810
and the storage engine mechanism is

00:27:41,260 --> 00:27:44,910
pluggable i have i've given that a

00:27:43,810 --> 00:27:46,900
little bit of thought but i'm not sure

00:27:44,910 --> 00:27:48,880
directly one thing that I've seen

00:27:46,900 --> 00:27:51,400
because I've given this talk at UM

00:27:48,880 --> 00:27:53,560
language agnostic conferences and you'll

00:27:51,400 --> 00:27:55,060
see the the note for paperclip their

00:27:53,560 --> 00:27:57,200
paper cup is a gem for Ruby on Rails

00:27:55,060 --> 00:27:58,880
that does a lot of this stuff that

00:27:57,200 --> 00:28:00,500
been talking about it actually looks

00:27:58,880 --> 00:28:02,630
like its security models pretty tight i

00:28:00,500 --> 00:28:04,370
haven't used it so we should steal some

00:28:02,630 --> 00:28:06,559
ideas we should have a look at some of

00:28:04,370 --> 00:28:09,909
that stuff and see what other options

00:28:06,559 --> 00:28:15,260
there are it doesn't it doesn't take

00:28:09,909 --> 00:28:16,880
well no it is fiddly to do decent file

00:28:15,260 --> 00:28:18,230
upload in Django but it is achievable

00:28:16,880 --> 00:28:46,130
and so we should we should come up with

00:28:18,230 --> 00:28:48,529
a way of making it simpler yeah hey um

00:28:46,130 --> 00:28:50,630
so what what he's talking about is

00:28:48,529 --> 00:28:54,830
giffen Giffin zip is a good example

00:28:50,630 --> 00:28:56,450
because i think in a zip file its table

00:28:54,830 --> 00:28:58,940
of contents are at the end of the file

00:28:56,450 --> 00:29:00,320
and so a file reading a zip file go

00:28:58,940 --> 00:29:01,730
straight to the end of the file and a

00:29:00,320 --> 00:29:03,409
gift parts that looks at the magic

00:29:01,730 --> 00:29:06,440
number at the start so you can actually

00:29:03,409 --> 00:29:08,179
create a gif image file that you can

00:29:06,440 --> 00:29:10,659
then unzip and get files out of just

00:29:08,179 --> 00:29:14,360
because it's its file format doesn't

00:29:10,659 --> 00:29:16,789
doesn't conflict with each other but

00:29:14,360 --> 00:29:18,049
that's an excellent example of what I

00:29:16,789 --> 00:29:20,600
was saying before where you build your

00:29:18,049 --> 00:29:22,669
own file out of it right so if you if

00:29:20,600 --> 00:29:25,850
someone uploaded a gift and then you use

00:29:22,669 --> 00:29:28,909
an image converter like imagemagick for

00:29:25,850 --> 00:29:30,980
example to convert the gift into a gif

00:29:28,909 --> 00:29:33,620
it'll almost definitely throw away that

00:29:30,980 --> 00:29:35,929
zip file craft right and so you might

00:29:33,620 --> 00:29:37,580
never find out that it was there but you

00:29:35,929 --> 00:29:39,529
don't care and your users aren't exposed

00:29:37,580 --> 00:29:41,210
to whatever was inside of it so that's

00:29:39,529 --> 00:29:45,740
that's one that's probably the best

00:29:41,210 --> 00:29:52,510
option by default I think any other

00:29:45,740 --> 00:29:52,510
questions yes coming

00:30:00,500 --> 00:30:09,760
hi so we use Django and we have Django

00:30:06,380 --> 00:30:12,530
storages to a store to s3 it seems to

00:30:09,760 --> 00:30:16,340
get around some of your issues but how

00:30:12,530 --> 00:30:18,290
would you solve the quarantine and build

00:30:16,340 --> 00:30:20,930
your own file when you're using that

00:30:18,290 --> 00:30:22,880
sort of where is that even possible yeah

00:30:20,930 --> 00:30:25,700
I haven't actually used Django storages

00:30:22,880 --> 00:30:27,560
myself yet but I know just don't upload

00:30:25,700 --> 00:30:29,210
the file directly to the s3 without

00:30:27,560 --> 00:30:31,460
putting it on the server first so the

00:30:29,210 --> 00:30:32,420
main you want to then generate something

00:30:31,460 --> 00:30:33,860
else from the file you would actually

00:30:32,420 --> 00:30:37,700
have to download it back from the bucket

00:30:33,860 --> 00:30:39,530
yeah you already so um you might end up

00:30:37,700 --> 00:30:41,960
doing that asynchronously using a celery

00:30:39,530 --> 00:30:45,800
task or something if you had to or if

00:30:41,960 --> 00:30:48,890
you if you're not serving the file

00:30:45,800 --> 00:30:51,470
directly from s3 then like if it's being

00:30:48,890 --> 00:30:53,600
delivered back through then when someone

00:30:51,470 --> 00:30:55,550
requests the file from your django

00:30:53,600 --> 00:30:58,280
server maybe you would end up reverse

00:30:55,550 --> 00:31:00,500
proxying and pulling the file out of s3

00:30:58,280 --> 00:31:02,180
and returning it so if you're doing that

00:31:00,500 --> 00:31:05,120
what that means is that you can have

00:31:02,180 --> 00:31:07,670
cleared the file before you do that so

00:31:05,120 --> 00:31:10,070
someone uploads a file it goes into s3

00:31:07,670 --> 00:31:12,290
and in your database maybe you marked

00:31:10,070 --> 00:31:13,700
that is not a trusted file yet some

00:31:12,290 --> 00:31:15,260
background task would verify that that

00:31:13,700 --> 00:31:18,110
file is cool that you're that you're

00:31:15,260 --> 00:31:20,000
happy with it and then if it's your

00:31:18,110 --> 00:31:26,000
application server that's mediating the

00:31:20,000 --> 00:31:27,320
file delivery back then it can clear or

00:31:26,000 --> 00:31:29,480
black list the files when they're

00:31:27,320 --> 00:31:30,680
requested so that's that's one

00:31:29,480 --> 00:31:32,180
possibility there would be there would

00:31:30,680 --> 00:31:33,140
be other ways of doing it like you could

00:31:32,180 --> 00:31:35,330
just move things between us three

00:31:33,140 --> 00:31:37,280
buckets right like you can have they get

00:31:35,330 --> 00:31:38,450
uploaded to a private s3 store and then

00:31:37,280 --> 00:31:42,440
they get moved to a public one where

00:31:38,450 --> 00:31:44,210
they're hosted unfortunately we're out

00:31:42,440 --> 00:31:47,210
of time I'm sorry but you're welcome to

00:31:44,210 --> 00:31:48,440
ask him questions during our break if we

00:31:47,210 --> 00:31:51,460
could give another round of applause

00:31:48,440 --> 00:31:51,460
thank you

00:31:52,590 --> 00:31:54,650

YouTube URL: https://www.youtube.com/watch?v=HS8KQbswZkU


