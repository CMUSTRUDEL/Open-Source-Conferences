Title: RULES FOR RADICALS: CHANGING THE CULTURE OF PYTHON AT FACEBOOK
Publication date: 2016-08-16
Playlist: Pycon Australia 2016
Description: 
	Jason Fried
https://2016.pycon-au.org/schedule/27/view_talk
Today, services built on Python 3.5 using asyncio are widely used at Facebook. But as recently as May of 2014 it was actually impossible to use Python 3 at Facebook. Come learn how we cut the Gordian Knot of dependencies and social aversion to the point where new services are now being written in Python 3 and existing codebases have plans to move to Python 3.5.  All without official support or sanction.

"Rules for Radicals" is a book for community organizers by the late Saul Alinsky on how to unite people to effect positive change in their communities.
Captions: 
	00:00:00,000 --> 00:00:10,139
okay cool so first up we have Justin

00:00:04,500 --> 00:00:12,450
free Jason free early morning so he's

00:00:10,139 --> 00:00:14,160
been in text since 2006 and was a pill

00:00:12,450 --> 00:00:16,220
guru for most of that time up until

00:00:14,160 --> 00:00:19,020
accepting a job with Facebook in 2011

00:00:16,220 --> 00:00:21,990
and since then he's been writing Python

00:00:19,020 --> 00:00:24,990
and has been at Python 3 advocate known

00:00:21,990 --> 00:00:27,269
you since I singh KO came out so quite a

00:00:24,990 --> 00:00:28,830
while now please welcome Jason and their

00:00:27,269 --> 00:00:36,480
talk rules for radicals changing the

00:00:28,830 --> 00:00:38,070
culture of Python at Facebook awesome so

00:00:36,480 --> 00:00:40,649
this is rules for radicals the only all

00:00:38,070 --> 00:00:43,140
caps talk at bike on australia that

00:00:40,649 --> 00:00:45,329
turns out to be my fault i somehow did

00:00:43,140 --> 00:00:48,539
that so my name is jason free like she

00:00:45,329 --> 00:00:50,579
said I'm abductions near at Facebook and

00:00:48,539 --> 00:00:53,789
Instagram i started at facebook in

00:00:50,579 --> 00:00:55,140
october 2011 that was a Halloween like

00:00:53,789 --> 00:00:57,030
she's probably been my language choice

00:00:55,140 --> 00:00:58,829
for the six years prior so I I taught

00:00:57,030 --> 00:01:02,670
myself Python since it was more socially

00:00:58,829 --> 00:01:05,400
acceptable at Facebook than Pearl was it

00:01:02,670 --> 00:01:07,200
took about a year until I had the

00:01:05,400 --> 00:01:09,869
confidence as a new Python programmer to

00:01:07,200 --> 00:01:14,670
start taking an active role in Python at

00:01:09,869 --> 00:01:16,229
Facebook for me initially I got started

00:01:14,670 --> 00:01:19,170
by helping out people in the internal

00:01:16,229 --> 00:01:20,580
boards being the first to answer

00:01:19,170 --> 00:01:23,700
questions and I kind of became

00:01:20,580 --> 00:01:26,430
internally famous or infamous in Python

00:01:23,700 --> 00:01:29,250
circles that and it became my favorite

00:01:26,430 --> 00:01:31,860
side project like I sometimes neglecting

00:01:29,250 --> 00:01:33,960
my primary job to facebook to help

00:01:31,860 --> 00:01:35,490
people with their Python when I saw

00:01:33,960 --> 00:01:37,710
issues and places where we were doing

00:01:35,490 --> 00:01:39,689
things wrong I just kind of fix them and

00:01:37,710 --> 00:01:42,210
over time people started to accept my

00:01:39,689 --> 00:01:43,500
expertise and this is how most of is how

00:01:42,210 --> 00:01:45,930
most of Facebook works it's not a

00:01:43,500 --> 00:01:48,149
top-down where you can command people to

00:01:45,930 --> 00:01:49,860
do things technologically it's more from

00:01:48,149 --> 00:01:51,869
the bottom up it's a meritocracy of

00:01:49,860 --> 00:01:53,850
ideas you have to kind of sway public

00:01:51,869 --> 00:01:56,700
opinion by just the merit of your ideas

00:01:53,850 --> 00:01:59,700
alone or use your social capital you've

00:01:56,700 --> 00:02:01,170
gained from helping them to you convince

00:01:59,700 --> 00:02:03,780
them that your idea said mayor so it's

00:02:01,170 --> 00:02:05,630
kind of almost like open source you

00:02:03,780 --> 00:02:09,270
can't force people to do what you want

00:02:05,630 --> 00:02:11,610
so Python at Facebook is not as simple

00:02:09,270 --> 00:02:13,540
as deploying a script and running it we

00:02:11,610 --> 00:02:16,719
have the problem of dependencies

00:02:13,540 --> 00:02:18,189
so instead of baking a bunch of virtual

00:02:16,719 --> 00:02:19,629
environments and deploying the via chef

00:02:18,189 --> 00:02:21,609
to all of our servers around the world

00:02:19,629 --> 00:02:22,870
and then hoping to God that the

00:02:21,609 --> 00:02:23,920
developers would keep them up to date

00:02:22,870 --> 00:02:25,900
and make sure they had all the

00:02:23,920 --> 00:02:27,519
dependencies needed we solved that a

00:02:25,900 --> 00:02:31,329
different way we dissolved it would

00:02:27,519 --> 00:02:33,400
thing we call par now par or a Python

00:02:31,329 --> 00:02:36,129
archive is what that's short for is all

00:02:33,400 --> 00:02:38,650
the code for a thing being a script or a

00:02:36,129 --> 00:02:41,019
service or something combined with all

00:02:38,650 --> 00:02:43,359
of its internal supporting libraries its

00:02:41,019 --> 00:02:44,739
third party dependencies and any SOS

00:02:43,359 --> 00:02:46,930
that it may need to execute in our

00:02:44,739 --> 00:02:49,450
environment these are all zipped up and

00:02:46,930 --> 00:02:52,030
we prepend a shell script on top of it

00:02:49,450 --> 00:02:55,599
that handles the the work of extracting

00:02:52,030 --> 00:02:57,579
and executing it at the destination we

00:02:55,599 --> 00:03:00,069
build these much like c++ applications

00:02:57,579 --> 00:03:01,480
we create a build config that has a list

00:03:00,069 --> 00:03:04,120
of all the source files all the

00:03:01,480 --> 00:03:06,340
dependencies all the libraries all the

00:03:04,120 --> 00:03:08,379
c++ dependencies and our build system

00:03:06,340 --> 00:03:10,090
buck then builds all these appendices

00:03:08,379 --> 00:03:12,430
that need to be compiled and then does

00:03:10,090 --> 00:03:14,829
the packaging of it and that means that

00:03:12,430 --> 00:03:16,870
developers control their dependencies

00:03:14,829 --> 00:03:18,310
very close to their source it's not

00:03:16,870 --> 00:03:21,299
connect it's connected to the service

00:03:18,310 --> 00:03:23,650
and not the system in which it runs

00:03:21,299 --> 00:03:25,060
we're then able to take these pars and

00:03:23,650 --> 00:03:26,590
we can ship them all over the world to

00:03:25,060 --> 00:03:28,569
any machine of Facebook and they will

00:03:26,590 --> 00:03:30,190
just execute as the developer and Ted

00:03:28,569 --> 00:03:34,510
intended they don't have to go mess with

00:03:30,190 --> 00:03:36,190
chef he'll just work hopefully so

00:03:34,510 --> 00:03:38,590
changing something at a company is

00:03:36,190 --> 00:03:40,449
largest Facebook takes time so let me

00:03:38,590 --> 00:03:42,370
tell you a story about how during my

00:03:40,449 --> 00:03:44,739
free time it with no authority

00:03:42,370 --> 00:03:49,180
whatsoever I made Python 3 the default

00:03:44,739 --> 00:03:50,829
version of Python at Facebook in 2013

00:03:49,180 --> 00:03:54,400
the same time we were getting access to

00:03:50,829 --> 00:03:56,500
Python 27 we got access to Python 33 is

00:03:54,400 --> 00:03:58,989
part of a task to add Python 3 support

00:03:56,500 --> 00:04:01,840
to the build system but the task had

00:03:58,989 --> 00:04:04,180
stalled out since 2011 2012 it was

00:04:01,840 --> 00:04:05,799
blocking on adding PI 3 support to our

00:04:04,180 --> 00:04:06,669
internal tools and they were like some

00:04:05,799 --> 00:04:08,829
people were saying I will just

00:04:06,669 --> 00:04:11,680
automatically run 2 to 3 well of course

00:04:08,829 --> 00:04:13,750
that didn't materialize I but that was

00:04:11,680 --> 00:04:14,790
that really didn't get us anywhere he's

00:04:13,750 --> 00:04:17,940
just like

00:04:14,790 --> 00:04:20,310
so it was like we had installed Python 3

00:04:17,940 --> 00:04:21,449
on my laptop and sure we had access to

00:04:20,310 --> 00:04:23,580
it but didn't really know where it was

00:04:21,449 --> 00:04:26,520
we didn't code that ran on it and it was

00:04:23,580 --> 00:04:27,900
all very theoretical at that point it

00:04:26,520 --> 00:04:31,139
also didn't help that the popular

00:04:27,900 --> 00:04:33,090
opinion of Python 3 about Python 3 by

00:04:31,139 --> 00:04:34,770
engineers was very negative at the time

00:04:33,090 --> 00:04:36,690
most people in the company were either

00:04:34,770 --> 00:04:39,449
thinking of staying with Python 27

00:04:36,690 --> 00:04:40,410
forever weird and some were talking

00:04:39,449 --> 00:04:43,800
about jumping ship to a different

00:04:40,410 --> 00:04:47,280
language like hey let's all go to go and

00:04:43,800 --> 00:04:49,199
you know I I said something along these

00:04:47,280 --> 00:04:51,180
lines internally once and in my defense

00:04:49,199 --> 00:04:52,710
at the time it looked very bleak that

00:04:51,180 --> 00:04:55,620
we'd ever be able to run Python 3 in

00:04:52,710 --> 00:04:59,070
production and 2013 that was the truth

00:04:55,620 --> 00:05:00,720
of it well the time one person only one

00:04:59,070 --> 00:05:02,370
person called me out and all my

00:05:00,720 --> 00:05:04,800
statement and they said they challenged

00:05:02,370 --> 00:05:07,070
me to do something about it so you see

00:05:04,800 --> 00:05:11,699
change won't happen unless you

00:05:07,070 --> 00:05:13,440
personally make it happen so though it

00:05:11,699 --> 00:05:14,970
wasn't all bad had a few things that

00:05:13,440 --> 00:05:17,910
were going for us we had some rays of

00:05:14,970 --> 00:05:19,699
hope in 2013 in the very beginning here

00:05:17,910 --> 00:05:21,990
when we got the new version of Python

00:05:19,699 --> 00:05:23,970
some an engineer and His infinite wisdom

00:05:21,990 --> 00:05:26,190
thought he could extend the life of his

00:05:23,970 --> 00:05:28,199
Python 27 code by forcing everybody to

00:05:26,190 --> 00:05:30,030
do these just import this in your code

00:05:28,199 --> 00:05:33,810
and maybe our 27 code will live for the

00:05:30,030 --> 00:05:36,020
future so he set up a code winter that

00:05:33,810 --> 00:05:40,530
would require these these four infamous

00:05:36,020 --> 00:05:42,479
future imports and it was there pretty

00:05:40,530 --> 00:05:44,460
much used everywhere now Facebook there

00:05:42,479 --> 00:05:45,599
are ubiquitous everybody uses them they

00:05:44,460 --> 00:05:47,820
may not know what they do but they put

00:05:45,599 --> 00:05:53,099
them there because the linter tells them

00:05:47,820 --> 00:05:55,080
to and we it salt so that means we had

00:05:53,099 --> 00:05:56,490
to solve a lot of our Unicode issues by

00:05:55,080 --> 00:05:59,460
the infamous Unicode littles we had to

00:05:56,490 --> 00:06:01,440
solve them in 2013 and so by the time we

00:05:59,460 --> 00:06:03,599
got to Python 3 it wasn't that much of a

00:06:01,440 --> 00:06:05,070
big deal now we introduce other issues

00:06:03,599 --> 00:06:07,620
where we people would make code that

00:06:05,070 --> 00:06:09,810
would accept a PI to string or a Unicode

00:06:07,620 --> 00:06:12,150
object and they would use bass string

00:06:09,810 --> 00:06:13,889
for is is just testing and they you know

00:06:12,150 --> 00:06:17,250
they didn't understand that Unicode was

00:06:13,889 --> 00:06:18,449
so we had other issues but you know it

00:06:17,250 --> 00:06:20,009
wouldn't make it easier than the long

00:06:18,449 --> 00:06:22,680
run to convert to Python 3 so it leads

00:06:20,009 --> 00:06:24,389
us to thrift thrift is a remote

00:06:22,680 --> 00:06:26,430
procedure called serialization framework

00:06:24,389 --> 00:06:27,700
Facebook created we open source via

00:06:26,430 --> 00:06:29,350
patchy

00:06:27,700 --> 00:06:31,180
and it's used extensively inside

00:06:29,350 --> 00:06:34,510
Facebook it allows services to talk to

00:06:31,180 --> 00:06:35,680
one another that's what our PC does but

00:06:34,510 --> 00:06:38,200
this is one of those core dependencies

00:06:35,680 --> 00:06:40,990
that that had to work for Python 3 to be

00:06:38,200 --> 00:06:43,240
realized or Facebook in October 15th in

00:06:40,990 --> 00:06:45,300
2013 the thrift teen put out a poll to

00:06:43,240 --> 00:06:48,190
see if anybody would be interested in

00:06:45,300 --> 00:06:51,490
Python 3 support this was 13 months

00:06:48,190 --> 00:06:53,380
after the the stalled poll the stalled

00:06:51,490 --> 00:06:55,840
task to add 3 support to our build

00:06:53,380 --> 00:06:57,910
system so you can see we didn't really

00:06:55,840 --> 00:07:00,160
move very fast there and there were a

00:06:57,910 --> 00:07:02,440
few people that voted voted no they said

00:07:00,160 --> 00:07:04,600
that we should never never go to python

00:07:02,440 --> 00:07:06,370
3 it was just a waste of time but there

00:07:04,600 --> 00:07:10,150
was actually a majority of people that

00:07:06,370 --> 00:07:12,460
voted yes and I voted yes because I hope

00:07:10,150 --> 00:07:13,690
that Python Python 3 refactor would

00:07:12,460 --> 00:07:16,120
clean up some of the things that I was

00:07:13,690 --> 00:07:18,610
very unhappy with how thrift was handled

00:07:16,120 --> 00:07:20,230
in Python I always thought it had made a

00:07:18,610 --> 00:07:25,900
venture through java before came to

00:07:20,230 --> 00:07:28,660
python so and that was my my opinion

00:07:25,900 --> 00:07:32,320
until until this guy so October

00:07:28,660 --> 00:07:34,960
sixteenth of 2013 guido van rossum gave

00:07:32,320 --> 00:07:36,790
a talk at Yelp in San Francisco about

00:07:34,960 --> 00:07:38,980
tulip which would become what you know

00:07:36,790 --> 00:07:40,450
now is a sink I owe a group of Facebook

00:07:38,980 --> 00:07:42,280
employees and I car pulled up to the sea

00:07:40,450 --> 00:07:44,650
to see the talk and this was the day

00:07:42,280 --> 00:07:47,140
after the thrift pole had landed I was

00:07:44,650 --> 00:07:49,900
already fan of a sink in Python 2 been

00:07:47,140 --> 00:07:54,130
doing G event stuff yeah it's dark time

00:07:49,900 --> 00:07:56,110
and but async io in my head opened up

00:07:54,130 --> 00:07:58,810
this wonderful magical future where

00:07:56,110 --> 00:08:00,910
different async frameworks could have

00:07:58,810 --> 00:08:03,250
interoperability where the library

00:08:00,910 --> 00:08:05,950
riders me would have to make this

00:08:03,250 --> 00:08:07,870
religious decision of what you is the

00:08:05,950 --> 00:08:09,550
user of my library would use as an async

00:08:07,870 --> 00:08:13,030
framework that it would be left up to

00:08:09,550 --> 00:08:14,950
you well before the talk was over I was

00:08:13,030 --> 00:08:16,360
already on my phone messaging the the

00:08:14,950 --> 00:08:18,730
thrift team but like they need to

00:08:16,360 --> 00:08:20,530
support tulip now because they were they

00:08:18,730 --> 00:08:22,690
were saying that they would have to wait

00:08:20,530 --> 00:08:25,150
till G event and twist his support had

00:08:22,690 --> 00:08:26,560
landed in Python 3 before they could

00:08:25,150 --> 00:08:28,030
start because that was the feature set

00:08:26,560 --> 00:08:29,950
they provided for Python to I was like

00:08:28,030 --> 00:08:31,720
no no let's not bother with that will do

00:08:29,950 --> 00:08:33,640
tulip now so that when those things come

00:08:31,720 --> 00:08:35,950
out hopefully they will have

00:08:33,640 --> 00:08:40,330
interoperability with a snake i oh so i

00:08:35,950 --> 00:08:41,409
was able to convince them and after

00:08:40,330 --> 00:08:43,029
afters talk

00:08:41,409 --> 00:08:46,360
was very very pumped about the future

00:08:43,029 --> 00:08:48,220
python and on october 19th when the

00:08:46,360 --> 00:08:51,339
thrift team finally put up their project

00:08:48,220 --> 00:08:54,370
plan including a tulip support was one

00:08:51,339 --> 00:08:57,430
of their number one items so thrift for

00:08:54,370 --> 00:08:58,779
Python 3 became my new side project this

00:08:57,430 --> 00:09:00,910
was my first attempt to change something

00:08:58,779 --> 00:09:03,600
at Facebook beyond my control and 2015

00:09:00,910 --> 00:09:07,360
what's even greater efforts on my part

00:09:03,600 --> 00:09:09,100
well I wanted people to use Python 3 and

00:09:07,360 --> 00:09:12,009
tulip at Facebook and we had to make

00:09:09,100 --> 00:09:13,899
that at least possible right so I a to

00:09:12,009 --> 00:09:16,540
the 15 with code reviews and porting

00:09:13,899 --> 00:09:18,639
help and by februari third of 2014 yeah

00:09:16,540 --> 00:09:22,209
takes a while sometimes we shipped

00:09:18,639 --> 00:09:27,250
Python 3 support for the rift well for

00:09:22,209 --> 00:09:29,019
six months it for six months it's sat

00:09:27,250 --> 00:09:30,579
there unused we had built the

00:09:29,019 --> 00:09:32,439
infrastructure but nobody was using it

00:09:30,579 --> 00:09:33,939
it was like those cities in China built

00:09:32,439 --> 00:09:35,680
during explosive urbanization and

00:09:33,939 --> 00:09:37,089
economic growth there were left

00:09:35,680 --> 00:09:39,370
abandoned when they couldn't convince

00:09:37,089 --> 00:09:42,399
anybody to move there I don't think we

00:09:39,370 --> 00:09:43,660
really had a plan yet for for when we

00:09:42,399 --> 00:09:47,110
built thrift we just kind of hoped

00:09:43,660 --> 00:09:48,610
somebody one day would use Python 3 this

00:09:47,110 --> 00:09:50,589
was all about to change I had been

00:09:48,610 --> 00:09:54,130
maintaining a system called Fe package

00:09:50,589 --> 00:09:56,170
to every package came about as a way to

00:09:54,130 --> 00:09:59,410
solve the problem of distributing code

00:09:56,170 --> 00:10:01,810
to our front end servers when an rsync

00:09:59,410 --> 00:10:03,790
fan out would take hours and hours to

00:10:01,810 --> 00:10:06,029
complete we needed a better way so we

00:10:03,790 --> 00:10:08,110
utilize his BitTorrent technology and

00:10:06,029 --> 00:10:10,329
distribute the packages and it also had

00:10:08,110 --> 00:10:12,009
this idea that after you could do this

00:10:10,329 --> 00:10:15,279
asynchronously so after the fact you

00:10:12,009 --> 00:10:17,199
could request the package it was so easy

00:10:15,279 --> 00:10:20,560
and it came very popular but it was it

00:10:17,199 --> 00:10:22,480
was rated Python but by 2013 it was

00:10:20,560 --> 00:10:24,880
already at least five years old and it

00:10:22,480 --> 00:10:26,589
was starting to show its its age and it

00:10:24,880 --> 00:10:29,829
didn't age very well due to various

00:10:26,589 --> 00:10:32,290
reasons most of them scalability it it

00:10:29,829 --> 00:10:34,600
needed to be fixed so I I had already

00:10:32,290 --> 00:10:35,980
been put into to the position of having

00:10:34,600 --> 00:10:38,199
to maintain this thing so instead of

00:10:35,980 --> 00:10:39,790
putting it another piece of tape on this

00:10:38,199 --> 00:10:41,769
box or maybe putting a ribbon on it and

00:10:39,790 --> 00:10:43,990
saying it's new I decided we needed a

00:10:41,769 --> 00:10:45,910
complete rewrite the existing code which

00:10:43,990 --> 00:10:49,930
is not worth fixing anymore and so we

00:10:45,910 --> 00:10:51,250
needed a new box so in August of 2014 I

00:10:49,930 --> 00:10:52,899
started a project to rewrite this

00:10:51,250 --> 00:10:55,059
service that I have become the

00:10:52,899 --> 00:10:57,009
misfortune owner of and I

00:10:55,059 --> 00:10:59,109
I was going to call it FB PKG which is

00:10:57,009 --> 00:11:00,459
short for every package and we were

00:10:59,109 --> 00:11:01,959
going to do a complete rewrite of the

00:11:00,459 --> 00:11:04,209
existing service using modern

00:11:01,959 --> 00:11:06,609
infrastructure in modern best practices

00:11:04,209 --> 00:11:08,739
I wanted the service to be fast for many

00:11:06,609 --> 00:11:10,449
years to come and be free of the

00:11:08,739 --> 00:11:12,369
crushing technical debt that strangled

00:11:10,449 --> 00:11:16,569
its predecessor and I was going to write

00:11:12,369 --> 00:11:19,059
it in Python 27 and G of it but it

00:11:16,569 --> 00:11:21,189
dawned on me that if I wrote this thing

00:11:19,059 --> 00:11:24,609
using Python 27 it would be obsolete

00:11:21,189 --> 00:11:26,679
from day one and it would be it would be

00:11:24,609 --> 00:11:27,969
baking into a technical debt that one

00:11:26,679 --> 00:11:30,219
day we would have to convert this system

00:11:27,969 --> 00:11:31,509
to python 3 because we at all just know

00:11:30,219 --> 00:11:35,379
that we were going to go to python 3

00:11:31,509 --> 00:11:37,449
eventually we just know how so like I

00:11:35,379 --> 00:11:38,859
said change won't happen on its own

00:11:37,449 --> 00:11:41,769
somebody has to be the first person that

00:11:38,859 --> 00:11:43,179
person should be you for Python Python 3

00:11:41,769 --> 00:11:47,229
and Facebook that person was going to be

00:11:43,179 --> 00:11:49,149
me so like like the words Gandhi be the

00:11:47,229 --> 00:11:51,729
change you want to see I wanted Python 3

00:11:49,149 --> 00:11:54,249
to be a thing at Facebook and I would

00:11:51,729 --> 00:11:55,869
have to be that change I was about to

00:11:54,249 --> 00:11:57,909
come the driving force python3 at

00:11:55,869 --> 00:12:02,109
facebook so i started writing ftp kg

00:11:57,909 --> 00:12:04,899
using Python 3 and everything was broken

00:12:02,109 --> 00:12:06,279
as you'd imagine no wonder nobody was

00:12:04,899 --> 00:12:08,409
using Python 3 or Facebook it just

00:12:06,279 --> 00:12:11,439
didn't work so i wrote a build config

00:12:08,409 --> 00:12:13,239
for my first fe PKG par and it wouldn't

00:12:11,439 --> 00:12:15,189
even build the build system treated

00:12:13,239 --> 00:12:18,669
Python 3 much like it would expect it to

00:12:15,189 --> 00:12:21,309
be Python 28 you thought it was in

00:12:18,669 --> 00:12:23,529
disguise so the dependency tree refused

00:12:21,309 --> 00:12:25,599
to resolve because all the third party

00:12:23,529 --> 00:12:27,429
dependencies in our system by default

00:12:25,599 --> 00:12:30,069
had been configured to be Python 2 only

00:12:27,429 --> 00:12:31,809
so that we would say people the hassle

00:12:30,069 --> 00:12:35,049
of having to get Python 3 support you

00:12:31,809 --> 00:12:36,429
know what do you think and the even the

00:12:35,049 --> 00:12:38,889
thrift support that we had landed before

00:12:36,429 --> 00:12:40,509
was broken by the time I'd got to use it

00:12:38,889 --> 00:12:42,339
by people adding Python to only

00:12:40,509 --> 00:12:45,189
regressions over the last six months and

00:12:42,339 --> 00:12:47,109
a lot of our swig and boost rappers were

00:12:45,189 --> 00:12:48,969
and still fundamentally broken for

00:12:47,109 --> 00:12:51,429
Python 3 in regards to handling binary

00:12:48,969 --> 00:12:53,769
data and when I resolved each of these

00:12:51,429 --> 00:12:55,269
issues to get my par to finally build it

00:12:53,769 --> 00:12:57,429
traced back to mediately when I started

00:12:55,269 --> 00:13:00,009
the moment I executed it but it wasn't

00:12:57,429 --> 00:13:03,279
in my code it was in the basement at

00:13:00,009 --> 00:13:06,560
made par files work was broken in Python

00:13:03,279 --> 00:13:10,850
3 so

00:13:06,560 --> 00:13:13,880
Wow while I was riding fe PKG i was also

00:13:10,850 --> 00:13:15,800
fixing the world at facebook or at least

00:13:13,880 --> 00:13:17,690
as much as the world as I needed to get

00:13:15,800 --> 00:13:19,550
python3 to work I had to rebuild

00:13:17,690 --> 00:13:21,020
hundreds of third-party modules in our

00:13:19,550 --> 00:13:22,940
build system and configure them say no

00:13:21,020 --> 00:13:25,160
these really are python3 supported and

00:13:22,940 --> 00:13:26,930
every time I need an internal library I

00:13:25,160 --> 00:13:29,900
had to convert it to to be two to three

00:13:26,930 --> 00:13:32,300
and I did this myself but I had a

00:13:29,900 --> 00:13:35,270
problem every day somebody would commit

00:13:32,300 --> 00:13:36,890
a Python 3 regression and in my defense

00:13:35,270 --> 00:13:38,089
II tree and it would or they would

00:13:36,890 --> 00:13:39,620
upgrade one of those third-party two

00:13:38,089 --> 00:13:43,220
modules that I had just finished working

00:13:39,620 --> 00:13:44,210
on to be Python to only and it was it

00:13:43,220 --> 00:13:46,580
was you know I was like it was a

00:13:44,210 --> 00:13:49,490
never-ending heal at that point so well

00:13:46,580 --> 00:13:51,800
most of the regressions was code that

00:13:49,490 --> 00:13:54,260
while valid in Python 2 was a syntax

00:13:51,800 --> 00:13:56,300
error or a name Aaron Python 3 so I had

00:13:54,260 --> 00:13:58,160
Nick force some compliance now I said

00:13:56,300 --> 00:14:00,350
before Facebook is not an organization

00:13:58,160 --> 00:14:02,690
where you can top-down control of the

00:14:00,350 --> 00:14:06,200
technology that changes to come from the

00:14:02,690 --> 00:14:07,580
bottom up well some of us engineers the

00:14:06,200 --> 00:14:09,650
bottom can force a certain level

00:14:07,580 --> 00:14:10,940
compliance if you handle it right and I

00:14:09,650 --> 00:14:12,680
learned quickly if you acted with

00:14:10,940 --> 00:14:16,910
authority people would assume you had

00:14:12,680 --> 00:14:18,260
the authority well I think I used up a

00:14:16,910 --> 00:14:20,540
lot of a good portion of my social

00:14:18,260 --> 00:14:25,010
capital in 2014 that I had built up in

00:14:20,540 --> 00:14:28,990
2013 and 2012 and used my status as the

00:14:25,010 --> 00:14:28,990
perceived Python subject matter expert

00:14:29,920 --> 00:14:37,400
and in late August of 2014 I instituted

00:14:34,760 --> 00:14:38,720
an automatic pie flakes linter that

00:14:37,400 --> 00:14:40,640
would run on all new code when it goes

00:14:38,720 --> 00:14:42,440
up for review pi flakes was a good pick

00:14:40,640 --> 00:14:44,810
for us because it didn't have a lot of

00:14:42,440 --> 00:14:48,890
false positives and I could sell it as

00:14:44,810 --> 00:14:50,930
improving our code quality since we

00:14:48,890 --> 00:14:52,970
already had a pet bait winter and people

00:14:50,930 --> 00:14:55,130
you know hated or loved it and we had

00:14:52,970 --> 00:14:56,470
the for imports linter it people didn't

00:14:55,130 --> 00:14:59,360
notice that I put an extra one in there

00:14:56,470 --> 00:15:02,300
so I made sure pi flakes would run under

00:14:59,360 --> 00:15:03,770
then under Python 2 and Python 3 so we

00:15:02,300 --> 00:15:05,120
would have the errors we would know

00:15:03,770 --> 00:15:07,040
immediately if it was a name or syntax

00:15:05,120 --> 00:15:09,740
error in in Python 3 kotor by the

00:15:07,040 --> 00:15:13,360
through code so even if people were not

00:15:09,740 --> 00:15:17,060
riding python 3 code they would be

00:15:13,360 --> 00:15:19,459
compliant by the linter to not commit

00:15:17,060 --> 00:15:20,270
obvious errors so in effect I was

00:15:19,459 --> 00:15:22,430
training peep

00:15:20,270 --> 00:15:25,190
who didn't know it to write Python 3

00:15:22,430 --> 00:15:26,810
code sort of this allowed me to

00:15:25,190 --> 00:15:28,550
distribute the job of maintaining Python

00:15:26,810 --> 00:15:32,180
3 Kubelik compatibility so I could focus

00:15:28,550 --> 00:15:34,940
on my project so linting is in this part

00:15:32,180 --> 00:15:37,160
isn't perfect you really need to do unit

00:15:34,940 --> 00:15:38,720
tests so far for all those libraries

00:15:37,160 --> 00:15:41,510
where I had to do the 23 conversion

00:15:38,720 --> 00:15:43,760
myself I also instilled a unit test that

00:15:41,510 --> 00:15:45,830
i made sure ran under Python 3 so the

00:15:43,760 --> 00:15:47,840
team that owned that library would not

00:15:45,830 --> 00:15:52,520
it themselves break me when they release

00:15:47,840 --> 00:15:54,140
new features so I found that using new

00:15:52,520 --> 00:15:55,850
test was a little easier than then

00:15:54,140 --> 00:15:57,350
filing a task to fix regression after

00:15:55,850 --> 00:15:59,330
the fact it was always easier to get

00:15:57,350 --> 00:16:05,390
people to fix up and they thought they

00:15:59,330 --> 00:16:07,700
had broken but it wasn't always easy for

00:16:05,390 --> 00:16:09,680
the people i had to i did be responsive

00:16:07,700 --> 00:16:11,720
to the people's cries for help at first

00:16:09,680 --> 00:16:14,600
to spend a lot of time fixing pi

00:16:11,720 --> 00:16:16,220
people's Python 3 lint warnings and I

00:16:14,600 --> 00:16:18,800
explained many times that nae mair

00:16:16,220 --> 00:16:21,620
unicode is not defined was not a false

00:16:18,800 --> 00:16:23,360
positive but a legitimate lint error for

00:16:21,620 --> 00:16:26,240
python 3 and explain why they should

00:16:23,360 --> 00:16:30,320
care because if supporting Python 3

00:16:26,240 --> 00:16:31,970
seemed hard people wouldn't bother they

00:16:30,320 --> 00:16:33,440
would they would regress to the let's

00:16:31,970 --> 00:16:36,020
just stay in Python to forever it's

00:16:33,440 --> 00:16:38,000
easier and so I ended up making it

00:16:36,020 --> 00:16:40,280
really simple to write 23 code by

00:16:38,000 --> 00:16:41,960
patching our build system kind of an

00:16:40,280 --> 00:16:44,390
evil thing to do so that the third party

00:16:41,960 --> 00:16:46,220
module 6 and future were universally

00:16:44,390 --> 00:16:48,410
available whether you asked for them or

00:16:46,220 --> 00:16:49,910
not so that when there was an issue I

00:16:48,410 --> 00:16:52,340
could just say hey here's appears a

00:16:49,910 --> 00:16:54,350
snippet of code for two or future so

00:16:52,340 --> 00:16:55,880
that you can write Python 2 3 code

00:16:54,350 --> 00:16:58,340
really easy without all the try

00:16:55,880 --> 00:17:01,850
exception mess and without having to

00:16:58,340 --> 00:17:03,380
modify their build configs i also fixed

00:17:01,850 --> 00:17:06,170
the defaults with our third-party of

00:17:03,380 --> 00:17:08,810
module imports so that build config

00:17:06,170 --> 00:17:10,970
templates did not default to being pi/2

00:17:08,810 --> 00:17:14,089
only that they would be default to PI 2

00:17:10,970 --> 00:17:15,650
and 3 this removed the consuming

00:17:14,089 --> 00:17:18,260
time-consuming process of having to

00:17:15,650 --> 00:17:21,950
rebuild those modules on my own to fix

00:17:18,260 --> 00:17:23,870
regressions without the with all those

00:17:21,950 --> 00:17:25,670
things in place we were not we were no

00:17:23,870 --> 00:17:28,430
longer losing ground in Python 3 but we

00:17:25,670 --> 00:17:30,830
were not really gaining any ground I had

00:17:28,430 --> 00:17:33,050
joined the teaching rotation in 2014 for

00:17:30,830 --> 00:17:34,040
a new new hire class we called Python at

00:17:33,050 --> 00:17:36,860
Facebook

00:17:34,040 --> 00:17:38,480
it informed new engineers the realities

00:17:36,860 --> 00:17:40,280
of Python at Facebook and it prepared

00:17:38,480 --> 00:17:42,650
them for any gotchas they might stand in

00:17:40,280 --> 00:17:44,780
their way to begin their work because of

00:17:42,650 --> 00:17:47,120
the lenders that we had put in place the

00:17:44,780 --> 00:17:49,000
class already instructed engineers that

00:17:47,120 --> 00:17:52,310
they were expected to write 23 code

00:17:49,000 --> 00:17:55,910
because one day in the distant future we

00:17:52,310 --> 00:17:57,800
were going to switch to python 3 it was

00:17:55,910 --> 00:17:59,780
very unlikely at the time but in that

00:17:57,800 --> 00:18:02,240
date always kind of moved forward but

00:17:59,780 --> 00:18:05,240
but writing 2 3 code and only ever

00:18:02,240 --> 00:18:07,850
testing it in Python 2 wasn't enough to

00:18:05,240 --> 00:18:09,380
advance Python 3 at Facebook we wanted

00:18:07,850 --> 00:18:12,440
to get to a future where people wrote

00:18:09,380 --> 00:18:15,080
Python 3 4 new code and only wrote to

00:18:12,440 --> 00:18:18,350
code 2 3 code when supporting legacy

00:18:15,080 --> 00:18:20,060
systems so in 2015 I took matters into

00:18:18,350 --> 00:18:21,500
my own hands and I made a change to the

00:18:20,060 --> 00:18:24,170
class slides and inform the other

00:18:21,500 --> 00:18:26,090
teachers I changed that the slides for

00:18:24,170 --> 00:18:28,580
the class and said that all new code

00:18:26,090 --> 00:18:31,130
stepping on my soapbox all new code

00:18:28,580 --> 00:18:33,650
should has to be written in Python 3 and

00:18:31,130 --> 00:18:35,540
that you should never write Python to

00:18:33,650 --> 00:18:37,340
code unless it is for a legacy project

00:18:35,540 --> 00:18:39,710
and even then it should be 23 code

00:18:37,340 --> 00:18:41,390
because either that project will die or

00:18:39,710 --> 00:18:44,480
one day we will have to do the work to

00:18:41,390 --> 00:18:46,280
convert it to python 3 we taught them

00:18:44,480 --> 00:18:47,840
that everything should work they should

00:18:46,280 --> 00:18:49,040
expect things to work and if they don't

00:18:47,840 --> 00:18:51,050
they should file tasks and they should

00:18:49,040 --> 00:18:56,510
complain very loudly or just fix it

00:18:51,050 --> 00:18:58,460
themselves and that's what happened I

00:18:56,510 --> 00:19:00,920
kept this thing educate for the future

00:18:58,460 --> 00:19:02,720
you want not the present you have we

00:19:00,920 --> 00:19:04,700
that class was to educate them about the

00:19:02,720 --> 00:19:06,650
truths of Python well this wasn't the

00:19:04,700 --> 00:19:09,260
truth of Python at Facebook this is what

00:19:06,650 --> 00:19:10,760
we wanted the truth to be and I started

00:19:09,260 --> 00:19:17,600
using it to fit myself to the other

00:19:10,760 --> 00:19:18,830
teachers and then justify to myself that

00:19:17,600 --> 00:19:21,230
this was how we're going to get new

00:19:18,830 --> 00:19:23,720
hires to to drive change at Facebook and

00:19:21,230 --> 00:19:26,150
he'll most of the core dependencies had

00:19:23,720 --> 00:19:28,880
been converted to 2014 so everything

00:19:26,150 --> 00:19:31,880
should really have worked all we needed

00:19:28,880 --> 00:19:33,320
was the people to show up and to use it

00:19:31,880 --> 00:19:36,830
to keep it from regressing and to make

00:19:33,320 --> 00:19:38,810
it improve so for the rest of 2015 after

00:19:36,830 --> 00:19:41,150
I'd done all this work I could focus on

00:19:38,810 --> 00:19:42,260
my project so I I worked on getting ftp

00:19:41,150 --> 00:19:44,420
edgy as the replacement for every

00:19:42,260 --> 00:19:46,559
package shoe and had announced it as a

00:19:44,420 --> 00:19:50,100
service in January of

00:19:46,559 --> 00:19:53,519
of 2016 of 2015 but something strange

00:19:50,100 --> 00:19:56,220
happened in 2016 i switched teams to a

00:19:53,519 --> 00:19:58,649
brand new team dedicated to shepherding

00:19:56,220 --> 00:20:00,929
python at facebook now there was only

00:19:58,649 --> 00:20:02,999
two of us so far but having the team

00:20:00,929 --> 00:20:05,190
name added a lot of the validity to our

00:20:02,999 --> 00:20:07,649
efforts it added to that perceived

00:20:05,190 --> 00:20:09,809
authority we saw a slow but steady

00:20:07,649 --> 00:20:11,340
growth in Python 3 usage at Facebook

00:20:09,809 --> 00:20:15,210
internal discussions were regularly

00:20:11,340 --> 00:20:16,529
about Python 3 and every day we would

00:20:15,210 --> 00:20:18,659
hear about some new project that was

00:20:16,529 --> 00:20:20,460
Python 3 and that their that their new

00:20:18,659 --> 00:20:22,980
code and it was obvious the tide of

00:20:20,460 --> 00:20:26,009
public opinion opinion had shifted to be

00:20:22,980 --> 00:20:27,360
pro Python 3 at Facebook Python 3 use

00:20:26,009 --> 00:20:29,610
was growing even though it was not the

00:20:27,360 --> 00:20:31,080
default Python for new projects you had

00:20:29,610 --> 00:20:34,169
to go out of your way to configure it to

00:20:31,080 --> 00:20:35,759
use Python 3 and we even used to say

00:20:34,169 --> 00:20:38,249
that Python 2 will probably always be

00:20:35,759 --> 00:20:41,720
the default Python because it was just

00:20:38,249 --> 00:20:44,879
the easier thing to do well not anymore

00:20:41,720 --> 00:20:46,860
on May second of 2016 I made a post

00:20:44,879 --> 00:20:49,169
expressing my intention oh my soapbox

00:20:46,860 --> 00:20:50,909
again to make Python 3 the default

00:20:49,169 --> 00:20:52,259
version for the build system one of the

00:20:50,909 --> 00:20:55,169
argument that I used was that legacy

00:20:52,259 --> 00:20:57,299
versions of Python for new projects was

00:20:55,169 --> 00:20:58,799
a waste of company money since any

00:20:57,299 --> 00:21:01,649
projects starting with Python 2 will at

00:20:58,799 --> 00:21:03,539
some point be upgraded to python 3 why

00:21:01,649 --> 00:21:05,639
not save the technical debt and use

00:21:03,539 --> 00:21:07,259
modern Python to begin with the post

00:21:05,639 --> 00:21:09,360
received unanimous support and by May

00:21:07,259 --> 00:21:11,039
fifth I had mod and all the existing

00:21:09,360 --> 00:21:13,019
Python to build configs to indicate that

00:21:11,039 --> 00:21:15,600
they needed to use the legacy option for

00:21:13,019 --> 00:21:18,059
my phone version and made Python 3 the

00:21:15,600 --> 00:21:19,409
default for our in our build system with

00:21:18,059 --> 00:21:21,240
the millions of lines of code in the

00:21:19,409 --> 00:21:24,539
thousands of pars that we have deployed

00:21:21,240 --> 00:21:26,820
I didn't break a single thing nobody

00:21:24,539 --> 00:21:28,649
even seem to notice for a couple days it

00:21:26,820 --> 00:21:31,769
was just it was kind of the next logical

00:21:28,649 --> 00:21:34,559
thing people weren't angry they kind of

00:21:31,769 --> 00:21:37,919
happy we started out so we started out

00:21:34,559 --> 00:21:41,700
in q3 of 2014 with for just just just

00:21:37,919 --> 00:21:44,100
just for four pars actually have three

00:21:41,700 --> 00:21:46,200
pars and but one of them was the pie

00:21:44,100 --> 00:21:49,230
flakes linter and that the others were

00:21:46,200 --> 00:21:51,360
part of my server side written and that

00:21:49,230 --> 00:21:53,600
didn't change for almost a year in q2

00:21:51,360 --> 00:21:56,279
2015 we had a fifth part come along

00:21:53,600 --> 00:22:00,029
sadly we didn't maintain statistics

00:21:56,279 --> 00:22:00,460
after that for pretty much a year but

00:22:00,029 --> 00:22:01,900
two days

00:22:00,460 --> 00:22:04,930
after I made the switch for default

00:22:01,900 --> 00:22:07,150
Python we we put it place a mattock stat

00:22:04,930 --> 00:22:09,130
together that would would count all the

00:22:07,150 --> 00:22:11,260
Python pars and would tell us whether or

00:22:09,130 --> 00:22:12,460
not they were two or three and when we

00:22:11,260 --> 00:22:13,900
were quite surprised to see that we are

00:22:12,460 --> 00:22:17,380
already at four percent of all Python

00:22:13,900 --> 00:22:19,120
pars at Facebook being Python 3 and by

00:22:17,380 --> 00:22:22,330
q3 this year we'd already reached ten

00:22:19,120 --> 00:22:24,280
percent so the the Green Line is a

00:22:22,330 --> 00:22:27,520
basically a letter of your protection I

00:22:24,280 --> 00:22:30,250
came up with between the two values so I

00:22:27,520 --> 00:22:32,020
don't really have have the data there

00:22:30,250 --> 00:22:33,490
because it was too time-consuming to dig

00:22:32,020 --> 00:22:35,800
through our mercurial repository to get

00:22:33,490 --> 00:22:37,900
the actual numbers so the growth rate

00:22:35,800 --> 00:22:39,550
was largely unknown at that time but you

00:22:37,900 --> 00:22:42,580
can see the blue lines we know exactly

00:22:39,550 --> 00:22:44,980
what's going on there so I would say

00:22:42,580 --> 00:22:46,600
this as a success we now have Python

00:22:44,980 --> 00:22:49,180
three pars widely distributed since

00:22:46,600 --> 00:22:50,830
early 2015 we are pretty sure that we

00:22:49,180 --> 00:22:52,960
have the largest async i/o deployment

00:22:50,830 --> 00:22:54,940
we're running on hundreds of hundreds of

00:22:52,960 --> 00:22:57,100
thousands machines and we're growing by

00:22:54,940 --> 00:22:59,800
half a percent week-over-week after

00:22:57,100 --> 00:23:01,330
making python through the default is now

00:22:59,800 --> 00:23:03,460
generally expected that Python 3 will

00:23:01,330 --> 00:23:05,170
just work at Facebook and only the most

00:23:03,460 --> 00:23:08,020
Krusty libraries that Facebook don't

00:23:05,170 --> 00:23:09,520
have Python 3 support and many teams are

00:23:08,020 --> 00:23:11,530
giving up supporting Python to moving

00:23:09,520 --> 00:23:13,690
forward and even those that were once

00:23:11,530 --> 00:23:14,950
the most hardline anti Python 3 people

00:23:13,690 --> 00:23:16,330
at Facebook have come around and are

00:23:14,950 --> 00:23:20,740
emitting that Python 3 is actually

00:23:16,330 --> 00:23:22,630
pretty awesome so the future of Python

00:23:20,740 --> 00:23:24,070
at Facebook is bright as ever calls to

00:23:22,630 --> 00:23:26,710
replace Python with some other language

00:23:24,070 --> 00:23:28,630
are few and far between and now we have

00:23:26,710 --> 00:23:31,810
now we even have the weird issues of

00:23:28,630 --> 00:23:34,540
people breaking Python 2 but legs echo

00:23:31,810 --> 00:23:40,270
by making Python 3 only regressions so

00:23:34,540 --> 00:23:41,800
let's review so you've got to lay the

00:23:40,270 --> 00:23:43,480
groundwork don't just say that we should

00:23:41,800 --> 00:23:46,030
move to python 3 making an actual

00:23:43,480 --> 00:23:48,370
possibility and change has to start with

00:23:46,030 --> 00:23:52,630
somebody and it should be you pick

00:23:48,370 --> 00:23:54,450
Python 3 first for your projects get

00:23:52,630 --> 00:23:56,590
people to help you don't do it alone and

00:23:54,450 --> 00:23:58,750
get them to help either they don't know

00:23:56,590 --> 00:24:01,240
they're helping you so that's all I say

00:23:58,750 --> 00:24:03,460
install the sneaky unit tests and

00:24:01,240 --> 00:24:06,010
lectures and if you're not if you're not

00:24:03,460 --> 00:24:07,150
training your new hires already you

00:24:06,010 --> 00:24:11,230
should and you should train them for

00:24:07,150 --> 00:24:12,520
what you want to be and of course you

00:24:11,230 --> 00:24:14,279
should collect statistics don't be like

00:24:12,520 --> 00:24:15,659
me because

00:24:14,279 --> 00:24:17,279
I guess at the time we didn't I didn't

00:24:15,659 --> 00:24:21,119
know I'd ever make this change so why

00:24:17,279 --> 00:24:23,099
would I ever track that information if

00:24:21,119 --> 00:24:24,479
you want to know more information about

00:24:23,099 --> 00:24:26,399
Python pars that I've talked about I

00:24:24,479 --> 00:24:29,580
know I ran through that really quickly

00:24:26,399 --> 00:24:31,559
there's a talk tomorrow in room 103 bye

00:24:29,580 --> 00:24:34,259
bye Dan and it's the evolution of our

00:24:31,559 --> 00:24:38,489
packaging at Facebook so go see his talk

00:24:34,259 --> 00:24:40,859
tomorrow and ask him some questions this

00:24:38,489 --> 00:24:43,019
is where I work facebook page for me to

00:24:40,859 --> 00:24:44,789
come to this conference and I would love

00:24:43,019 --> 00:24:46,589
to tell you that we are hiring you can

00:24:44,789 --> 00:24:48,389
check out facebook.com / careers and if

00:24:46,589 --> 00:24:52,999
you want to come talk to me at this talk

00:24:48,389 --> 00:24:52,999
out we can do that also so questions

00:25:00,109 --> 00:25:05,429
thank you um so if you have a question

00:25:02,639 --> 00:25:09,089
just come up to the mic because this is

00:25:05,429 --> 00:25:11,639
recorded so people can see it afterwards

00:25:09,089 --> 00:25:13,889
come on Russell come on I know I know

00:25:11,639 --> 00:25:16,080
you've got questions inside you so

00:25:13,889 --> 00:25:17,940
nervous about asking questions um thanks

00:25:16,080 --> 00:25:18,989
for the talk to question about the the

00:25:17,940 --> 00:25:20,969
linting process you were going through

00:25:18,989 --> 00:25:24,210
in the early days where you were you're

00:25:20,969 --> 00:25:26,700
running pie flakes over the Python to

00:25:24,210 --> 00:25:28,109
code base to validate Python 3 code is

00:25:26,700 --> 00:25:29,639
that don't stand it correctly well I

00:25:28,109 --> 00:25:31,109
didn't put questions and that like

00:25:29,639 --> 00:25:34,229
answers in that last slide just said

00:25:31,109 --> 00:25:35,999
quite as good yes um so uh I put it in

00:25:34,229 --> 00:25:38,639
place so even old to code would would be

00:25:35,999 --> 00:25:40,710
Lintott against Python 3 we did have

00:25:38,639 --> 00:25:42,299
initially some keywords people could add

00:25:40,710 --> 00:25:44,729
to their file that would say you know

00:25:42,299 --> 00:25:46,349
just don't just break out of Python 3

00:25:44,729 --> 00:25:48,139
linting like if they knew it was like

00:25:46,349 --> 00:25:50,279
old crusty code but most people just

00:25:48,139 --> 00:25:51,960
kind of did what the winter told them to

00:25:50,279 --> 00:25:53,669
do right so you would you're running

00:25:51,960 --> 00:25:55,169
like two separate linting passes this is

00:25:53,669 --> 00:25:57,119
yasin to you we don't have two files

00:25:55,169 --> 00:25:58,320
that we were that was a pie flakes for

00:25:57,119 --> 00:26:05,609
two and a pie plates for three right

00:25:58,320 --> 00:26:07,849
okay any opposed okay thank you very

00:26:05,609 --> 00:26:07,849
much

00:26:09,770 --> 00:26:11,830

YouTube URL: https://www.youtube.com/watch?v=hFONj6r3aB8


