Title: Hear no evil, see no evil, patch no evil: Or, how to monkey-patch safely.
Publication date: 2016-08-16
Playlist: Pycon Australia 2016
Description: 
	Graham Dumpleton
https://2016.pycon-au.org/schedule/18/view_talk
Python is a dynamic programming language and has a strong tradition of adhering to a programming style called duck-typing. This means that it is possible to easily modify an application's code while it is running. One might wish to do this for various reasons, including enhancing the functionality of code, correcting errant behaviour, or adding instrumentation or debugging code.

Making such code modifications can be tricky though and not done correctly can potentially interfere with the operation of the original code, through destroying introspection abilities, not honouring the duck-typing mantra or due to being applied at the wrong time.

If you do need to do monkey patching though, the 'wrapt' library is your friend, with its transparent object proxy wrappers and post import hook mechanism, it allows you to safely monkey patch code to modify its behaviour.

Come learn about the 'wrapt' library and the joys, but also the dangers, of monkey patching.
Captions: 
	00:00:00,000 --> 00:00:10,260
welcome to the first sunday session um

00:00:04,850 --> 00:00:13,830
the first talk will be by Graham

00:00:10,260 --> 00:00:16,379
dumbleton and he's the author of mod

00:00:13,830 --> 00:00:19,730
whiskey a popular module for hosting

00:00:16,379 --> 00:00:23,010
Python web applications of the apache

00:00:19,730 --> 00:00:25,800
httpd web server he is currently a

00:00:23,010 --> 00:00:29,820
developer advocate for open shift at Red

00:00:25,800 --> 00:00:37,590
Hat can we please give a round of

00:00:29,820 --> 00:00:39,540
applause to enjoy wow thank you coming

00:00:37,590 --> 00:00:41,100
this is the second day in a row I've

00:00:39,540 --> 00:00:42,960
been stuck right behind the keynote and

00:00:41,100 --> 00:00:45,539
I know it's probably a big lip down

00:00:42,960 --> 00:00:48,450
because Russell did an amazing job this

00:00:45,539 --> 00:00:51,030
morning as usual with his case is always

00:00:48,450 --> 00:00:54,559
a a lot of fun to watch what he has to

00:00:51,030 --> 00:00:57,420
say so let's get going decorators

00:00:54,559 --> 00:01:01,230
everyone here knows what a decorator in

00:00:57,420 --> 00:01:04,010
python is has seen one use one I assume

00:01:01,230 --> 00:01:11,520
so would you agree that they're useful

00:01:04,010 --> 00:01:13,770
yes are they easy to implement a mix so

00:01:11,520 --> 00:01:18,720
for the people who said yes how are you

00:01:13,770 --> 00:01:21,930
absolutely sure here is your typical

00:01:18,720 --> 00:01:24,750
decorator we are using a function

00:01:21,930 --> 00:01:26,700
closure so nested function will you were

00:01:24,750 --> 00:01:27,869
caught in there and we're going to

00:01:26,700 --> 00:01:30,509
credit that and we essentially going to

00:01:27,869 --> 00:01:33,030
use this special at simple this syntax

00:01:30,509 --> 00:01:36,689
to apply that decorated step function so

00:01:33,030 --> 00:01:38,820
it looks simple doesn't it ok but this

00:01:36,689 --> 00:01:42,030
breaks various things it breaks

00:01:38,820 --> 00:01:44,369
inspection so name and doc attributes

00:01:42,030 --> 00:01:47,610
are not preserved and various other

00:01:44,369 --> 00:01:49,890
things but you might say but that's what

00:01:47,610 --> 00:01:51,170
funk tools wrap s is about that's

00:01:49,890 --> 00:01:53,220
supposed to solve all of these problems

00:01:51,170 --> 00:01:54,810
right all we're going to do is in our

00:01:53,220 --> 00:01:56,640
closure inside then we're going to put

00:01:54,810 --> 00:02:00,439
that fun tools wrapped in their magic

00:01:56,640 --> 00:02:03,360
it's all going to work no it doesn't it

00:02:00,439 --> 00:02:05,729
still has issues with introspection so

00:02:03,360 --> 00:02:09,209
if you try and grab the signature of

00:02:05,729 --> 00:02:11,400
that function and your nested your

00:02:09,209 --> 00:02:13,830
clothes of closure functions using star

00:02:11,400 --> 00:02:15,870
star star keyword uggs

00:02:13,830 --> 00:02:17,880
rather than named arguments it doesn't

00:02:15,870 --> 00:02:20,240
bring back the right signature there's

00:02:17,880 --> 00:02:26,430
also problems we're using that decorator

00:02:20,240 --> 00:02:28,470
in that form on a another another

00:02:26,430 --> 00:02:30,720
decorated function where the other

00:02:28,470 --> 00:02:34,260
decorated function is using a descriptor

00:02:30,720 --> 00:02:36,240
so like a class method for example can

00:02:34,260 --> 00:02:37,970
have problems with that so if Santa's

00:02:36,240 --> 00:02:40,470
rep test does not solve all the problems

00:02:37,970 --> 00:02:42,510
now there's a little various other

00:02:40,470 --> 00:02:43,980
problems as well I'm not going to go

00:02:42,510 --> 00:02:45,930
into this talk I've done a talk like

00:02:43,980 --> 00:02:47,640
this before and I just put too much

00:02:45,930 --> 00:02:50,400
information and killed a lot of people

00:02:47,640 --> 00:02:52,470
burning some brain cells so there is you

00:02:50,400 --> 00:02:54,090
go to my blog go to the right hand side

00:02:52,470 --> 00:02:56,100
there's a quick lynch and you can find

00:02:54,090 --> 00:02:58,890
this decorators monkey patching section

00:02:56,100 --> 00:03:01,920
and it has about a dozen blog posts on

00:02:58,890 --> 00:03:04,140
the topic of decorators what's wrong

00:03:01,920 --> 00:03:06,390
with them how to implement the correctly

00:03:04,140 --> 00:03:07,800
and start getting into a bit of on

00:03:06,390 --> 00:03:09,680
monkey patching as well which is I'm

00:03:07,800 --> 00:03:13,140
going to talk a little bit up this talk

00:03:09,680 --> 00:03:15,410
so please don't try not to implement

00:03:13,140 --> 00:03:18,420
decorators yourself that was my advice

00:03:15,410 --> 00:03:21,750
but what is the solution the solution is

00:03:18,420 --> 00:03:25,410
is packaged I wrote called rat okay so

00:03:21,750 --> 00:03:29,430
trust me but let's let's see how this

00:03:25,410 --> 00:03:30,870
works so basically before in this case

00:03:29,430 --> 00:03:33,150
what I'm actually supplying a decorator

00:03:30,870 --> 00:03:34,350
within the Raptor library itself which

00:03:33,150 --> 00:03:35,519
is a bit of a chicken edge problem

00:03:34,350 --> 00:03:39,450
because that decorators actually

00:03:35,519 --> 00:03:42,800
implemented in wrapped so i'm using then

00:03:39,450 --> 00:03:44,610
that to actually help you create one and

00:03:42,800 --> 00:03:47,220
you'll see that it's a little bit

00:03:44,610 --> 00:03:50,280
different we're passing it your wrapper

00:03:47,220 --> 00:03:52,170
function takes wrapped which is the

00:03:50,280 --> 00:03:54,390
original wrapped function and instance

00:03:52,170 --> 00:03:58,050
and args and keyword uggs i can use that

00:03:54,390 --> 00:04:00,570
to then call the original one now the

00:03:58,050 --> 00:04:02,519
purpose of that instance is one of the

00:04:00,570 --> 00:04:04,980
things that wraps decorators can do

00:04:02,519 --> 00:04:07,019
which you can't easily do nawl decorator

00:04:04,980 --> 00:04:09,420
thing is that you can create what's

00:04:07,019 --> 00:04:12,030
called a universal decorator when you

00:04:09,420 --> 00:04:14,489
use a decrement a decorator using those

00:04:12,030 --> 00:04:15,959
function closure it's not really as

00:04:14,489 --> 00:04:17,970
simple to determine whether that

00:04:15,959 --> 00:04:19,830
decorator was applied to a normal

00:04:17,970 --> 00:04:24,180
function or an instance method or a

00:04:19,830 --> 00:04:25,890
class method or a class you if you

00:04:24,180 --> 00:04:27,330
needed a decorator which had to work at

00:04:25,890 --> 00:04:28,949
all as such as such difference

00:04:27,330 --> 00:04:32,009
erations is it's almost basically

00:04:28,949 --> 00:04:34,050
impossible the thing that Django does

00:04:32,009 --> 00:04:36,419
for example they have decorated which

00:04:34,050 --> 00:04:38,340
they need to apply in instance methods

00:04:36,419 --> 00:04:41,280
or functions and they end up having two

00:04:38,340 --> 00:04:43,349
versions of it okay so it's not that

00:04:41,280 --> 00:04:45,150
hard or not that simple so one of the

00:04:43,349 --> 00:04:47,400
things that wrapped has that by passing

00:04:45,150 --> 00:04:48,960
in this extra instance argument it gives

00:04:47,400 --> 00:04:51,419
you a hint as to what actually you're

00:04:48,960 --> 00:04:52,860
being the decorator originally applied

00:04:51,419 --> 00:04:54,539
to at the point that your wrapper

00:04:52,860 --> 00:04:55,560
function has been called so you can

00:04:54,539 --> 00:04:57,210
actually determine whether it was

00:04:55,560 --> 00:04:58,710
applied to a class or a function or a

00:04:57,210 --> 00:05:00,360
second method or a classmate from an

00:04:58,710 --> 00:05:02,159
instance method and this is where you

00:05:00,360 --> 00:05:03,569
can actually miss universe decorator can

00:05:02,159 --> 00:05:04,860
actually determine the context of the

00:05:03,569 --> 00:05:08,009
news and you might be able to use that

00:05:04,860 --> 00:05:09,300
for doing special magic or generating an

00:05:08,009 --> 00:05:12,479
error is someone used it in the wrong

00:05:09,300 --> 00:05:14,340
context now using that ability of

00:05:12,479 --> 00:05:16,259
universal decorators one of the features

00:05:14,340 --> 00:05:19,340
that rap provides if you're doing

00:05:16,259 --> 00:05:21,629
multi-threading is a synchronized class

00:05:19,340 --> 00:05:23,759
synchronize decorator now people have

00:05:21,629 --> 00:05:26,099
tried this before but it runs in those

00:05:23,759 --> 00:05:28,169
same sort of problems of when you're

00:05:26,099 --> 00:05:31,349
applying it to function or method of

00:05:28,169 --> 00:05:33,060
class most implementations what they do

00:05:31,349 --> 00:05:35,279
is that they're putting a lock just on

00:05:33,060 --> 00:05:37,979
that one function but if you're locking

00:05:35,279 --> 00:05:40,770
a method of a class you want to lock the

00:05:37,979 --> 00:05:43,430
whole instance and if you know anything

00:05:40,770 --> 00:05:47,190
about Java it has a synchronized keyword

00:05:43,430 --> 00:05:49,500
and it works in various ways if it's

00:05:47,190 --> 00:05:51,180
applied to just the static function and

00:05:49,500 --> 00:05:52,560
it just locks at one static function if

00:05:51,180 --> 00:05:53,940
you apply it to an instance method it

00:05:52,560 --> 00:05:56,460
will lock the whole instance and so on

00:05:53,940 --> 00:05:57,960
so one of the bonus features in raptis

00:05:56,460 --> 00:06:01,430
is synchronized echo networks basically

00:05:57,960 --> 00:06:03,839
very similar to what does in in in Java

00:06:01,430 --> 00:06:08,370
so he put on normal function locks that

00:06:03,839 --> 00:06:10,379
one function if you put on a method of a

00:06:08,370 --> 00:06:12,990
class it'll lock the lock will be bound

00:06:10,379 --> 00:06:14,879
to that instance of the class if you put

00:06:12,990 --> 00:06:18,210
it on a class method you're locking the

00:06:14,879 --> 00:06:21,599
class type and if you put it on a static

00:06:18,210 --> 00:06:24,330
method lock set function so that's about

00:06:21,599 --> 00:06:26,849
us now other interesting thing is it's

00:06:24,330 --> 00:06:29,729
it's a decorator but I've actually also

00:06:26,849 --> 00:06:31,889
made that decorator a context manager so

00:06:29,729 --> 00:06:34,319
it's actually serving two roles so if

00:06:31,889 --> 00:06:35,819
you don't if it's not convenient to

00:06:34,319 --> 00:06:37,979
apply that synchronize decorated to the

00:06:35,819 --> 00:06:39,750
function as a whole you can actually

00:06:37,979 --> 00:06:41,160
still then use it as context manager

00:06:39,750 --> 00:06:42,870
inside of that function to

00:06:41,160 --> 00:06:44,070
be more find a great hey how you do

00:06:42,870 --> 00:06:48,630
locking so that's a middle of a bonus

00:06:44,070 --> 00:06:51,390
feature now as I said very useful re I

00:06:48,630 --> 00:06:54,600
think and I said you should use it but

00:06:51,390 --> 00:06:56,370
you know should you trust me i keep

00:06:54,600 --> 00:06:58,950
getting pestered to get wrapped inside

00:06:56,370 --> 00:07:02,670
of the standard library okay and this is

00:06:58,950 --> 00:07:04,590
from core developers in python so if you

00:07:02,670 --> 00:07:06,720
default and should use it that might

00:07:04,590 --> 00:07:08,340
give you a bit more confidence so this

00:07:06,720 --> 00:07:12,210
is not going to make it into Python 26

00:07:08,340 --> 00:07:13,620
it's way too late but well it is next

00:07:12,210 --> 00:07:15,720
monster cut out come on you want me get

00:07:13,620 --> 00:07:16,740
it in one month because there's actually

00:07:15,720 --> 00:07:18,570
going to be a lot of work to put stuff

00:07:16,740 --> 00:07:20,280
in the in the call you know the standard

00:07:18,570 --> 00:07:21,660
library but i am keep getting pestered

00:07:20,280 --> 00:07:23,160
about I had another discussion with

00:07:21,660 --> 00:07:25,770
about it last night with Nicole bang and

00:07:23,160 --> 00:07:28,590
so maybe we'll try name for Python 27

00:07:25,770 --> 00:07:32,040
but that's like 18 months away a bit so

00:07:28,590 --> 00:07:33,480
a bit of time anyway I wrote this rap

00:07:32,040 --> 00:07:34,980
library and great it's got this

00:07:33,480 --> 00:07:37,170
decorator implementation then people

00:07:34,980 --> 00:07:40,080
know for that but that's not actually

00:07:37,170 --> 00:07:44,070
what i wrote wrapped for what rap was

00:07:40,080 --> 00:07:46,920
originally written for was for monkey

00:07:44,070 --> 00:07:49,200
patching and it's weird there's sort of

00:07:46,920 --> 00:07:53,970
concepts of what you need for both are

00:07:49,200 --> 00:07:55,410
very similar so so very similar and for

00:07:53,970 --> 00:07:57,060
those have been using Python long enough

00:07:55,410 --> 00:07:59,190
that decorator things that that at

00:07:57,060 --> 00:08:00,360
symbol but you should put there in front

00:07:59,190 --> 00:08:02,130
of the decorator know when your plight

00:08:00,360 --> 00:08:04,260
didn't always exist it was only

00:08:02,130 --> 00:08:07,169
interested introduced in Python to it

00:08:04,260 --> 00:08:08,820
for you can still do decorators before

00:08:07,169 --> 00:08:11,850
that you just didn't have that nice sink

00:08:08,820 --> 00:08:13,850
tactical feature the way you did it was

00:08:11,850 --> 00:08:16,050
you sensually down the bottom there

00:08:13,850 --> 00:08:19,080
where you had to function and then you

00:08:16,050 --> 00:08:22,080
actually replace the function with your

00:08:19,080 --> 00:08:25,860
decorator we're passing in that function

00:08:22,080 --> 00:08:27,330
and this that sort of model is sort of

00:08:25,860 --> 00:08:28,680
like what you're more familiar with when

00:08:27,330 --> 00:08:30,570
you're doing monkey patching and that's

00:08:28,680 --> 00:08:32,099
why decorators had that they're parallel

00:08:30,570 --> 00:08:33,660
you're actually changing the behavior of

00:08:32,099 --> 00:08:36,450
an existing code by putting a wrapper

00:08:33,660 --> 00:08:42,150
around something so wrap was originally

00:08:36,450 --> 00:08:43,440
for doing monkey patching now the

00:08:42,150 --> 00:08:45,210
difference I guess when you look at this

00:08:43,440 --> 00:08:47,220
is that especially with that axe in text

00:08:45,210 --> 00:08:48,840
when you're doing decorators you are

00:08:47,220 --> 00:08:50,970
setting up that decorator and it's

00:08:48,840 --> 00:08:54,720
evaluated at the point your code is

00:08:50,970 --> 00:08:57,209
being defined and passed in okay where

00:08:54,720 --> 00:09:00,569
decorator's it's being done after the

00:08:57,209 --> 00:09:02,939
fact so you're not using the same syntax

00:09:00,569 --> 00:09:05,009
because in many instances your code may

00:09:02,939 --> 00:09:06,149
have already been imported and you're

00:09:05,009 --> 00:09:07,620
actually going to go back and try and

00:09:06,149 --> 00:09:08,970
retrospectively monkey patch it and

00:09:07,620 --> 00:09:12,060
you're going to do that by straight

00:09:08,970 --> 00:09:14,129
assignment now why would you want to

00:09:12,060 --> 00:09:16,290
monkey patch you may want to monkey

00:09:14,129 --> 00:09:18,329
patch to fix bugs in third party

00:09:16,290 --> 00:09:20,009
packages that you're using you may have

00:09:18,329 --> 00:09:22,529
identified a bugs you may have reported

00:09:20,009 --> 00:09:24,209
it upstream and they have fixed it but

00:09:22,529 --> 00:09:25,680
it may be some time before they actually

00:09:24,209 --> 00:09:27,509
release a new version of the package and

00:09:25,680 --> 00:09:28,949
you need to do something to still allow

00:09:27,509 --> 00:09:31,350
you to use that package to make it work

00:09:28,949 --> 00:09:33,720
so that's one reason you might use

00:09:31,350 --> 00:09:36,990
monkey patching if you're using doing

00:09:33,720 --> 00:09:38,750
unit testing so people here maybe will

00:09:36,990 --> 00:09:40,889
be familiar with the mock library

00:09:38,750 --> 00:09:43,139
testing library and there's a variant of

00:09:40,889 --> 00:09:46,199
that now in Python free dot something as

00:09:43,139 --> 00:09:48,149
well and the idea there is your monkey

00:09:46,199 --> 00:09:51,569
patching in the code to actually replace

00:09:48,149 --> 00:09:54,779
existing code to make it return mock

00:09:51,569 --> 00:09:56,250
values or stub functions so that you

00:09:54,779 --> 00:09:57,720
know when you're doing your unit testing

00:09:56,250 --> 00:09:59,639
you're not actually making a call out

00:09:57,720 --> 00:10:01,529
for some remote web service it's just

00:09:59,639 --> 00:10:03,480
going to say great I did that and here's

00:10:01,529 --> 00:10:05,610
some dummy results so that's another use

00:10:03,480 --> 00:10:07,350
for it and another user which has

00:10:05,610 --> 00:10:09,779
original reason I wrote wrapped in the

00:10:07,350 --> 00:10:12,420
first place was related to monkey

00:10:09,779 --> 00:10:14,699
patching code to add in special wrappers

00:10:12,420 --> 00:10:17,759
for dealing with instrumenting Cove for

00:10:14,699 --> 00:10:21,600
performance analysis and that was where

00:10:17,759 --> 00:10:22,790
I originally came from so monkey

00:10:21,600 --> 00:10:25,500
patching of wraps how would you use it

00:10:22,790 --> 00:10:27,720
we have a module up there with our code

00:10:25,500 --> 00:10:29,040
in it we want to monkey patch we have a

00:10:27,720 --> 00:10:30,809
wrapper function which will in apply to

00:10:29,040 --> 00:10:33,420
that and it's just a simple matter of

00:10:30,809 --> 00:10:34,800
importing wrapped and we're getting a

00:10:33,420 --> 00:10:36,209
wrap function wrapper we're going to

00:10:34,800 --> 00:10:38,100
give it the name of the we're going to

00:10:36,209 --> 00:10:39,449
give it the actual class do we want a

00:10:38,100 --> 00:10:41,759
mac new patch on the name of the method

00:10:39,449 --> 00:10:43,790
and here is a rapper and it's going

00:10:41,759 --> 00:10:46,920
apply it he's going to apply it for you

00:10:43,790 --> 00:10:49,800
now very important we're not going to do

00:10:46,920 --> 00:10:51,420
this and you may have fought yeah can't

00:10:49,800 --> 00:10:52,949
we do this which is very similar to what

00:10:51,420 --> 00:10:56,339
i showed when we at the decorating

00:10:52,949 --> 00:10:58,319
example for we just re-signed the

00:10:56,339 --> 00:11:01,379
original value and replaced it with a

00:10:58,319 --> 00:11:03,269
new one we don't do this because it

00:11:01,379 --> 00:11:04,949
doesn't actually always work there are

00:11:03,269 --> 00:11:08,300
certain corner cases where this causes

00:11:04,949 --> 00:11:13,770
problems it's all bound up to how

00:11:08,300 --> 00:11:15,570
method binding works in in Python so

00:11:13,770 --> 00:11:18,030
when you actually call a method on an

00:11:15,570 --> 00:11:20,160
instance of a class there's a bit of

00:11:18,030 --> 00:11:21,900
magic in there which actually creates

00:11:20,160 --> 00:11:23,610
what's called a bound a method so it's

00:11:21,900 --> 00:11:25,050
applying that instance pointer and

00:11:23,610 --> 00:11:27,600
joining it together with a function be

00:11:25,050 --> 00:11:29,400
called so they're applying that function

00:11:27,600 --> 00:11:30,840
to the correct instance there's some

00:11:29,400 --> 00:11:33,180
weird cases around that if you do a

00:11:30,840 --> 00:11:34,800
direct assignment through the class the

00:11:33,180 --> 00:11:36,480
binding means you're actually binding it

00:11:34,800 --> 00:11:39,540
to none and that causes various problems

00:11:36,480 --> 00:11:41,400
so don't do that let you win we let rap

00:11:39,540 --> 00:11:43,320
do it for you because I do some funny

00:11:41,400 --> 00:11:46,550
fancy tricks with diving into dicks to

00:11:43,320 --> 00:11:50,160
actually make sure all work scripting

00:11:46,550 --> 00:11:52,410
now in that prior example to in order to

00:11:50,160 --> 00:11:54,090
do that monkey patching we imported the

00:11:52,410 --> 00:11:55,740
code we imported the other module first

00:11:54,090 --> 00:11:57,990
that we wanted to actually apply the

00:11:55,740 --> 00:12:00,630
patch to that's a bit inconvenient so we

00:11:57,990 --> 00:12:06,840
can skip that we can use a decorator

00:12:00,630 --> 00:12:08,460
inside of wrapped which just says patch

00:12:06,840 --> 00:12:10,260
dispatch function mapper so what'll

00:12:08,460 --> 00:12:11,850
happen is instead of the actual name of

00:12:10,260 --> 00:12:13,350
the class here I'll actually give it a

00:12:11,850 --> 00:12:15,330
name in the module and they're not

00:12:13,350 --> 00:12:17,880
giving it the name of the class and the

00:12:15,330 --> 00:12:20,640
method as a path so what'll happen now

00:12:17,880 --> 00:12:22,560
is that will get past and as it gets

00:12:20,640 --> 00:12:24,660
past it'll see that you know it will

00:12:22,560 --> 00:12:25,920
rattle go and import a module for you

00:12:24,660 --> 00:12:28,670
behind the scenes and apply the wrapper

00:12:25,920 --> 00:12:33,810
so we can make it a little bit simpler

00:12:28,670 --> 00:12:35,370
now what about testing ok so in all

00:12:33,810 --> 00:12:37,650
those those cases i'm applying a

00:12:35,370 --> 00:12:40,410
permanent patch ok so that's the thing

00:12:37,650 --> 00:12:41,970
of decorators as well you put in place

00:12:40,410 --> 00:12:44,300
and it's always in there for the life of

00:12:41,970 --> 00:12:47,490
the process now if we talk about testing

00:12:44,300 --> 00:12:49,560
we want to apply a monkey patch but only

00:12:47,490 --> 00:12:51,150
for the length of that test we want to

00:12:49,560 --> 00:12:55,800
remove it afterwards because when we go

00:12:51,150 --> 00:12:57,060
and run a a different test we may not

00:12:55,800 --> 00:12:58,440
want that in are in place and we going

00:12:57,060 --> 00:12:59,610
to patch something else or apply

00:12:58,440 --> 00:13:01,320
different patch to have it just

00:12:59,610 --> 00:13:04,200
something differently so we need a way

00:13:01,320 --> 00:13:05,790
of taking it away and again this time

00:13:04,200 --> 00:13:08,370
like a different decorator we can use

00:13:05,790 --> 00:13:10,620
this one's transient function rapper so

00:13:08,370 --> 00:13:11,880
this time I'm actually declare that's a

00:13:10,620 --> 00:13:14,010
declaration is not actually doing

00:13:11,880 --> 00:13:15,930
anything at that point it's just setting

00:13:14,010 --> 00:13:18,660
up debt decorator and then I can

00:13:15,930 --> 00:13:20,070
actually use the name of that decorator

00:13:18,660 --> 00:13:21,690
in here and what will happen is that

00:13:20,070 --> 00:13:24,570
when test me

00:13:21,690 --> 00:13:27,120
is called it will go in and apply that

00:13:24,570 --> 00:13:29,220
patch for me importing the module is

00:13:27,120 --> 00:13:35,010
necessary and once the method exits

00:13:29,220 --> 00:13:37,560
it'll move that patch so that is where

00:13:35,010 --> 00:13:39,090
we were in it where we want to intercept

00:13:37,560 --> 00:13:41,280
something that's happening in you when

00:13:39,090 --> 00:13:44,850
you call a function now what if we

00:13:41,280 --> 00:13:47,280
didn't want to make apply a patch so I

00:13:44,850 --> 00:13:52,020
don't say we want to apply a patch to a

00:13:47,280 --> 00:13:55,110
class of method of a class but only to

00:13:52,020 --> 00:13:56,820
that one instance we are dealing with it

00:13:55,110 --> 00:13:59,910
may be the case if we were to apply the

00:13:56,820 --> 00:14:02,250
patch to the whole class in a test or in

00:13:59,910 --> 00:14:03,840
a real-life system if we do it

00:14:02,250 --> 00:14:05,370
everywhere that might cause problems the

00:14:03,840 --> 00:14:08,190
rest of the application so undo it to

00:14:05,370 --> 00:14:09,510
one particular instance of the class now

00:14:08,190 --> 00:14:13,020
what is there is in Raptors what's

00:14:09,510 --> 00:14:15,780
called a transparent object proxy if you

00:14:13,020 --> 00:14:17,100
ever used week refs there's a skewer

00:14:15,780 --> 00:14:19,920
class and the Python standard library

00:14:17,100 --> 00:14:22,890
called week ref proxy I think it's the

00:14:19,920 --> 00:14:24,750
name the idea is it's a you essentially

00:14:22,890 --> 00:14:26,700
take your proxy class you've got your

00:14:24,750 --> 00:14:28,710
original and you're going to create mr.

00:14:26,700 --> 00:14:31,620
this such that this has got a reference

00:14:28,710 --> 00:14:33,420
to it internally and every operation you

00:14:31,620 --> 00:14:36,600
do on the proxy then will essentially be

00:14:33,420 --> 00:14:37,980
then made on the original so idea is

00:14:36,600 --> 00:14:40,950
that you shouldn't really notice a

00:14:37,980 --> 00:14:44,130
difference so in this case what we can

00:14:40,950 --> 00:14:46,860
do is we want to override the lookup

00:14:44,130 --> 00:14:52,050
method on just by one instance of that

00:14:46,860 --> 00:14:54,240
class so I'm actually going to drive

00:14:52,050 --> 00:14:56,120
from this special object proxy and I'm

00:14:54,240 --> 00:14:58,140
going to just override that method

00:14:56,120 --> 00:15:03,210
create my storage box to give it the

00:14:58,140 --> 00:15:05,310
original one and I can call that one and

00:15:03,210 --> 00:15:08,160
all call my override one but you see

00:15:05,310 --> 00:15:09,360
this this one here clear that clear

00:15:08,160 --> 00:15:12,510
method would have existed on the

00:15:09,360 --> 00:15:14,970
original object I wrapped but the object

00:15:12,510 --> 00:15:18,050
proxy will just magically pass that

00:15:14,970 --> 00:15:20,870
fruit and you don't need to know about

00:15:18,050 --> 00:15:24,030
now be where they are ordering problems

00:15:20,870 --> 00:15:28,020
the examples I showed before I one case

00:15:24,030 --> 00:15:29,610
I imported the module explicitly and

00:15:28,020 --> 00:15:32,790
then applied the patch the other one was

00:15:29,610 --> 00:15:35,430
doing it when I saw my my patch wrap my

00:15:32,790 --> 00:15:37,290
pêche decorated with the patch

00:15:35,430 --> 00:15:38,970
function rapper thing and essentially

00:15:37,290 --> 00:15:41,700
that cause that thing to be applied at

00:15:38,970 --> 00:15:43,410
that particular point in time but what

00:15:41,700 --> 00:15:45,779
if someone's already imported that

00:15:43,410 --> 00:15:49,410
module previously and I wasn't the first

00:15:45,779 --> 00:15:52,470
person to import that module in Python

00:15:49,410 --> 00:15:55,380
you can do this from example import

00:15:52,470 --> 00:15:57,270
function and what's going to happen is

00:15:55,380 --> 00:16:00,810
in module pie it's going to hold a

00:15:57,270 --> 00:16:02,339
direct reference to function and what

00:16:00,810 --> 00:16:04,350
that means is actually really two ways

00:16:02,339 --> 00:16:06,420
of getting to that function now the

00:16:04,350 --> 00:16:10,110
original example module and also in my

00:16:06,420 --> 00:16:12,480
module module so when I go down here and

00:16:10,110 --> 00:16:14,550
do my patches won't if I were to import

00:16:12,480 --> 00:16:17,040
this apply my patch I've given an

00:16:14,550 --> 00:16:19,290
example in the function it's only going

00:16:17,040 --> 00:16:22,260
to patch this one up here it's not going

00:16:19,290 --> 00:16:23,700
to patch this one here which means that

00:16:22,260 --> 00:16:25,290
if some other bead occurred you're

00:16:23,700 --> 00:16:27,149
expecting to everything go through your

00:16:25,290 --> 00:16:28,649
patch now it's not going to get your

00:16:27,149 --> 00:16:31,920
patch because it's got own to an a

00:16:28,649 --> 00:16:34,350
reference to it so order of imports and

00:16:31,920 --> 00:16:37,529
ensuring you get in first to apply

00:16:34,350 --> 00:16:43,560
monkey pitchers a big problem gee event

00:16:37,529 --> 00:16:46,110
and event lit have this problem you if

00:16:43,560 --> 00:16:49,800
if many of those they are a ways of

00:16:46,110 --> 00:16:51,510
adding concurrency into Python

00:16:49,800 --> 00:16:52,529
application using green lips and so what

00:16:51,510 --> 00:16:53,910
it's going to do is going to go in

00:16:52,529 --> 00:16:55,790
monkey patch that's why for standard

00:16:53,910 --> 00:16:58,230
library and replace a lot of stuff

00:16:55,790 --> 00:16:59,880
related to things like multi-threading

00:16:58,230 --> 00:17:00,839
so that when you create a Fred it's

00:16:59,880 --> 00:17:04,189
actually creating one of these things

00:17:00,839 --> 00:17:07,380
called a greenlit the problem is that

00:17:04,189 --> 00:17:09,540
how those you're going to start up your

00:17:07,380 --> 00:17:11,220
buena corn server which might have g

00:17:09,540 --> 00:17:12,839
vent enabled in it and some point in a

00:17:11,220 --> 00:17:14,280
long time g event will apply its monkey

00:17:12,839 --> 00:17:15,929
patches but guna core has already

00:17:14,280 --> 00:17:17,520
started and imported all these modules

00:17:15,929 --> 00:17:20,790
from the Python standard library and

00:17:17,520 --> 00:17:22,350
that patching is done too late so what

00:17:20,790 --> 00:17:24,630
are the critical functions of patches is

00:17:22,350 --> 00:17:27,600
time to sleep because rather than going

00:17:24,630 --> 00:17:30,840
she really sleeping it needs to say I'm

00:17:27,600 --> 00:17:32,280
going to let another green lit run so it

00:17:30,840 --> 00:17:34,920
has to actually instead of just going to

00:17:32,280 --> 00:17:37,230
the time module it has to know all that

00:17:34,920 --> 00:17:38,670
much sleep function was also imported

00:17:37,230 --> 00:17:40,230
directly into all these other modules

00:17:38,670 --> 00:17:41,760
and has to go in and patch them

00:17:40,230 --> 00:17:43,590
everywhere else too so it's not patching

00:17:41,760 --> 00:17:45,860
1 spot catching many so course a lot a

00:17:43,590 --> 00:17:45,860
problem

00:17:47,600 --> 00:17:53,160
the other problem is that if you think

00:17:50,340 --> 00:17:56,040
about with especially the G event inside

00:17:53,160 --> 00:17:57,809
unicorn is that it needs to apply all

00:17:56,040 --> 00:17:59,790
these patches everywhere but you may

00:17:57,809 --> 00:18:01,500
actually not use some of those modules

00:17:59,790 --> 00:18:03,630
that it's patching in your application

00:18:01,500 --> 00:18:05,460
but it's still imported them all and

00:18:03,630 --> 00:18:08,040
that's going to take up memory in your

00:18:05,460 --> 00:18:09,570
process so you can get the situation was

00:18:08,040 --> 00:18:13,679
good at all these extra code important

00:18:09,570 --> 00:18:15,870
you don't even knew so how can we solve

00:18:13,679 --> 00:18:18,210
this now there was this pep that was

00:18:15,870 --> 00:18:22,200
created pet-free 69 had a fish called

00:18:18,210 --> 00:18:27,030
post in post import hooks the idea with

00:18:22,200 --> 00:18:28,770
it was that you could have this you

00:18:27,030 --> 00:18:31,320
might want to make modifications to a

00:18:28,770 --> 00:18:32,580
module when it's imported and the idea

00:18:31,320 --> 00:18:34,830
was you could say that you can make that

00:18:32,580 --> 00:18:36,809
specification so you can put a

00:18:34,830 --> 00:18:40,740
definition this decorated which is when

00:18:36,809 --> 00:18:43,940
imported module example and that's not

00:18:40,740 --> 00:18:47,309
actually doing anything at that point if

00:18:43,940 --> 00:18:49,590
later on the example module is imported

00:18:47,309 --> 00:18:52,140
then this will fire off and then apply

00:18:49,590 --> 00:18:54,840
the patch and you can apply that patch

00:18:52,140 --> 00:18:57,090
before anything gets it so where we have

00:18:54,840 --> 00:19:00,510
from example import function this would

00:18:57,090 --> 00:19:01,710
have got in first okay now the problem

00:19:00,510 --> 00:19:06,210
you still get a problem here what if

00:19:01,710 --> 00:19:09,450
example is already important first so

00:19:06,210 --> 00:19:11,400
the problem with it still is that you

00:19:09,450 --> 00:19:13,980
need to do that very very first up in in

00:19:11,400 --> 00:19:16,740
your application right at the site so

00:19:13,980 --> 00:19:18,360
you've got to change your application so

00:19:16,740 --> 00:19:20,040
we want a way of triggering this monkey

00:19:18,360 --> 00:19:22,200
pictures all the other things you've had

00:19:20,040 --> 00:19:24,750
to modify your application to do that so

00:19:22,200 --> 00:19:27,000
you're modifying code so the next thing

00:19:24,750 --> 00:19:28,740
is how do we modify the application or

00:19:27,000 --> 00:19:30,240
be able to monkey patch Cove actually

00:19:28,740 --> 00:19:33,900
modifying the applique code in the first

00:19:30,240 --> 00:19:36,900
place so imagine you want to use what's

00:19:33,900 --> 00:19:38,309
a what's a application some Python

00:19:36,900 --> 00:19:40,490
application i can't figure 1 right now

00:19:38,309 --> 00:19:43,650
there are lots of them so maybe you

00:19:40,490 --> 00:19:45,000
imagined well just say unicorn for

00:19:43,650 --> 00:19:46,500
instance maybe if you want to patch

00:19:45,000 --> 00:19:49,980
jewnicorn because it's got a bug in it

00:19:46,500 --> 00:19:52,350
right you can't go and modify easily

00:19:49,980 --> 00:19:54,000
guna corns code without forking it and

00:19:52,350 --> 00:19:56,190
making your own modified version you

00:19:54,000 --> 00:19:59,860
want to apply patches to unicorn itself

00:19:56,190 --> 00:20:01,660
you want a way of doing that I think

00:19:59,860 --> 00:20:04,299
another package i wrote comes in as one

00:20:01,660 --> 00:20:07,960
called auto wrapped so we can pip

00:20:04,299 --> 00:20:10,480
install auto wrapped and what we can do

00:20:07,960 --> 00:20:12,790
this time is rather than have our own

00:20:10,480 --> 00:20:14,440
code which is somehow imported by us

00:20:12,790 --> 00:20:16,360
making changes to the application code

00:20:14,440 --> 00:20:18,760
of guna call for example we're going to

00:20:16,360 --> 00:20:22,179
package up how monkey patch that we want

00:20:18,760 --> 00:20:23,710
to apply as a module in itself so here

00:20:22,179 --> 00:20:26,380
I've got a set up dot pi which is what

00:20:23,710 --> 00:20:29,230
you use to create your own package and

00:20:26,380 --> 00:20:31,059
the key thing here is I'm using this

00:20:29,230 --> 00:20:35,230
feature here called entry points which

00:20:31,059 --> 00:20:36,669
is part of the setup tools and what

00:20:35,230 --> 00:20:38,799
that's going to do is I'm justifying a

00:20:36,669 --> 00:20:40,780
declaration here it says that I've

00:20:38,799 --> 00:20:43,720
defied an entry point which is called

00:20:40,780 --> 00:20:45,730
wrapped whiskey ref debugging and I've

00:20:43,720 --> 00:20:48,280
given this dictionary up here and I'm

00:20:45,730 --> 00:20:50,370
giving it in this case I want to patch a

00:20:48,280 --> 00:20:54,390
module called whiskey ref simple server

00:20:50,370 --> 00:20:59,679
and I want this function to be called

00:20:54,390 --> 00:21:04,270
when that module is imported okay so may

00:20:59,679 --> 00:21:08,140
not be too obvious I can then have my

00:21:04,270 --> 00:21:09,370
actual monkey patch code and I say she

00:21:08,140 --> 00:21:11,950
this is that function that's going to be

00:21:09,370 --> 00:21:13,960
called when the that module is important

00:21:11,950 --> 00:21:15,340
and it's just going to print out that

00:21:13,960 --> 00:21:17,290
we're going to pass this module I'm

00:21:15,340 --> 00:21:19,450
going to wrap a function wrapper around

00:21:17,290 --> 00:21:20,679
this whiskey request handle and I'm

00:21:19,450 --> 00:21:23,020
going to wrap this function around it

00:21:20,679 --> 00:21:24,429
this thing called time function so I've

00:21:23,020 --> 00:21:25,840
mentioned good Nicole and I totally

00:21:24,429 --> 00:21:27,910
forgot that my example is set up for

00:21:25,840 --> 00:21:30,190
this whiskey server in the past and

00:21:27,910 --> 00:21:32,140
Allah called whiskey ref but in the

00:21:30,190 --> 00:21:33,820
whisker if module so anyways we're doing

00:21:32,140 --> 00:21:35,860
so the person what I want to do this for

00:21:33,820 --> 00:21:38,559
is that I want to patch this existing

00:21:35,860 --> 00:21:41,440
whiskey server to put a wrap around

00:21:38,559 --> 00:21:43,809
there so I can time every HTTP request

00:21:41,440 --> 00:21:46,000
that comes in and put something out and

00:21:43,809 --> 00:21:47,860
I don't want to modify the original code

00:21:46,000 --> 00:21:49,390
so i packaged up this patch now in a

00:21:47,860 --> 00:21:52,690
module and I mean I'm going to install

00:21:49,390 --> 00:21:54,400
it I've got my audio wrap module already

00:21:52,690 --> 00:21:58,450
installed and this is where the magic

00:21:54,400 --> 00:22:03,309
happens I just whoops I'm just going to

00:21:58,450 --> 00:22:04,870
I went backwards that's been I undefined

00:22:03,309 --> 00:22:06,940
in boerum variable here autorap

00:22:04,870 --> 00:22:09,970
bootstrap I'm giving it a name of my

00:22:06,940 --> 00:22:12,760
entry point that I created I'm going to

00:22:09,970 --> 00:22:13,750
export it I'm just going to run Python

00:22:12,760 --> 00:22:16,090
with my app so

00:22:13,750 --> 00:22:18,040
a nap dot P Y which inside is is using

00:22:16,090 --> 00:22:19,060
whiskey ref whiskey server to run my app

00:22:18,040 --> 00:22:23,550
and that's the code i didn't want to

00:22:19,060 --> 00:22:26,290
mofo and look what happens it works i

00:22:23,550 --> 00:22:31,300
have not changed the original code there

00:22:26,290 --> 00:22:33,700
at all does it look evil it is a bit

00:22:31,300 --> 00:22:37,510
it's using a very naughty feature in

00:22:33,700 --> 00:22:39,820
Python in Python when you install a

00:22:37,510 --> 00:22:43,870
parchment package there's a magic file

00:22:39,820 --> 00:22:45,870
you can install called a dot pth file it

00:22:43,870 --> 00:22:48,820
was originally intended as a way of

00:22:45,870 --> 00:22:52,630
installing hyphen packages into a

00:22:48,820 --> 00:22:54,580
version subdirectory and then the pth

00:22:52,630 --> 00:22:57,460
file would act like a symbolic link if

00:22:54,580 --> 00:22:58,360
you like and in it would be the name so

00:22:57,460 --> 00:23:00,850
you might have that you might have

00:22:58,360 --> 00:23:04,210
installed jewnicorn and it's installed

00:23:00,850 --> 00:23:07,900
as whatever version up to 20 so guna

00:23:04,210 --> 00:23:09,640
corn dash 20 but that won't be found

00:23:07,900 --> 00:23:11,920
when you import it so then you have a

00:23:09,640 --> 00:23:13,690
goonie corn dot P th file which inside

00:23:11,920 --> 00:23:15,430
has good nakorn dash 20 which acts as a

00:23:13,690 --> 00:23:17,080
symbolic links way of selling pipe and

00:23:15,430 --> 00:23:20,050
well for this module actually look in

00:23:17,080 --> 00:23:22,170
this directory somewhere along the lines

00:23:20,050 --> 00:23:25,600
and apparently or something to do with

00:23:22,170 --> 00:23:29,280
codecs for unicode i think or some

00:23:25,600 --> 00:23:33,520
brother someone had this brilliant idea

00:23:29,280 --> 00:23:37,660
of allowing executable code inside of

00:23:33,520 --> 00:23:40,930
that dot pth file if that dot pth file

00:23:37,660 --> 00:23:44,650
starts with import space it'll execute

00:23:40,930 --> 00:23:46,420
that line of code it's really nasty hack

00:23:44,650 --> 00:23:48,760
I wish the business a better way of

00:23:46,420 --> 00:23:51,940
doing it this is what i'm using i've

00:23:48,760 --> 00:23:55,300
installed the doc PDF file and i'm not

00:23:51,940 --> 00:23:56,740
sure if i have the copra noda it will

00:23:55,300 --> 00:23:59,770
look for that environment variable and

00:23:56,740 --> 00:24:01,870
if it says it enviable it'll import auto

00:23:59,770 --> 00:24:04,690
wrapped and fire off a bootstrap routine

00:24:01,870 --> 00:24:05,860
which will then go and register it'll

00:24:04,690 --> 00:24:09,400
look up all those entry points i've

00:24:05,860 --> 00:24:11,320
defined and will that way later on when

00:24:09,400 --> 00:24:15,880
those modules are imported it'll trigger

00:24:11,320 --> 00:24:18,460
all my hooks and do nasty stuff now the

00:24:15,880 --> 00:24:20,320
reason I don't like Pete pth files if

00:24:18,460 --> 00:24:24,820
you remember mud Python please tell me

00:24:20,320 --> 00:24:26,060
no one here is using my Python mod

00:24:24,820 --> 00:24:28,700
Python

00:24:26,060 --> 00:24:31,610
if you've used it in the past it's a

00:24:28,700 --> 00:24:33,230
precursor to mod whiskey I managed to

00:24:31,610 --> 00:24:34,790
kill mod python by brightening mod whisk

00:24:33,230 --> 00:24:36,380
which is good thing one of the problems

00:24:34,790 --> 00:24:39,400
it has was that mod Python embedded

00:24:36,380 --> 00:24:44,060
inside of Apache Apache start up as root

00:24:39,400 --> 00:24:45,650
and the Python interpreter in mud Python

00:24:44,060 --> 00:24:48,650
was initialized inside of the Apache

00:24:45,650 --> 00:24:51,290
parent process as root so if you can

00:24:48,650 --> 00:24:54,050
socially engineer your system admin to

00:24:51,290 --> 00:24:56,570
install your custom Python package you

00:24:54,050 --> 00:24:58,340
need into your system puffin

00:24:56,570 --> 00:25:00,680
installation and you put one of these

00:24:58,340 --> 00:25:04,040
nasty pth files in which had executable

00:25:00,680 --> 00:25:06,320
code it you get to gain root very nasty

00:25:04,040 --> 00:25:10,450
so that's why they're bit nasty know

00:25:06,320 --> 00:25:12,320
said whistles a better way anyway so

00:25:10,450 --> 00:25:15,200
other issue thing about being out

00:25:12,320 --> 00:25:17,450
package up patches using Auto wrapped

00:25:15,200 --> 00:25:19,940
like that is that you potentially could

00:25:17,450 --> 00:25:21,860
have this whole ecosystem of patches up

00:25:19,940 --> 00:25:23,780
on pi PI as well if you've ever used new

00:25:21,860 --> 00:25:26,150
relic this is where I originally related

00:25:23,780 --> 00:25:27,980
to the rap stuff with this is all this

00:25:26,150 --> 00:25:30,440
monkey patching happening to instrument

00:25:27,980 --> 00:25:33,500
modules for Django and pyramid and flask

00:25:30,440 --> 00:25:35,330
and all these if I could package them up

00:25:33,500 --> 00:25:38,150
you could have a core which does this

00:25:35,330 --> 00:25:39,890
concept of all these monitoring stuff

00:25:38,150 --> 00:25:41,150
but then you have this whole ecosystem

00:25:39,890 --> 00:25:42,650
where people would actually just create

00:25:41,150 --> 00:25:44,510
packages for doing all this extra

00:25:42,650 --> 00:25:46,970
instrumentation for custom packages and

00:25:44,510 --> 00:25:49,780
the people who did the core one wouldn't

00:25:46,970 --> 00:25:52,490
need to do it so reason to use rap

00:25:49,780 --> 00:25:53,960
create better decorators I've got the

00:25:52,490 --> 00:25:56,060
awesome synchronization decorator in

00:25:53,960 --> 00:25:58,460
there but also safer mechanism for

00:25:56,060 --> 00:26:00,440
monkey patching now like with with the

00:25:58,460 --> 00:26:02,150
decorator library where I do everything

00:26:00,440 --> 00:26:03,860
correctly to preserve things like

00:26:02,150 --> 00:26:06,950
introspection and make sure all that

00:26:03,860 --> 00:26:08,660
works that all carries through into how

00:26:06,950 --> 00:26:10,070
the monkey patching is done I ensuring

00:26:08,660 --> 00:26:11,870
all that work so that's why it's a safe

00:26:10,070 --> 00:26:13,430
mechanism monkey patching I deal with

00:26:11,870 --> 00:26:15,020
those things where if you assign

00:26:13,430 --> 00:26:18,340
directly things don't always work I

00:26:15,020 --> 00:26:22,310
worry about all that and that's it so

00:26:18,340 --> 00:26:25,070
wrapped Brittany can fund docs on for

00:26:22,310 --> 00:26:27,470
rapid detox and as before I've got a

00:26:25,070 --> 00:26:29,950
whole series of blog posts on my site

00:26:27,470 --> 00:26:33,800
where you can go there and read

00:26:29,950 --> 00:26:35,330
intricate detail about why the existing

00:26:33,800 --> 00:26:36,740
way doesn't work how to do it better and

00:26:35,330 --> 00:26:39,580
also bit about the monkey patching stuff

00:26:36,740 --> 00:26:39,580
as well so

00:26:45,480 --> 00:26:59,260
any questions open mic um so sometimes

00:26:57,490 --> 00:27:01,210
when you are when you use a decorator

00:26:59,260 --> 00:27:03,460
it's not to return I wrapped function

00:27:01,210 --> 00:27:04,600
it's to like add the function to a to a

00:27:03,460 --> 00:27:06,039
registry or something like that in which

00:27:04,600 --> 00:27:08,169
case you return the original function

00:27:06,039 --> 00:27:10,419
and at that point there's no extra cost

00:27:08,169 --> 00:27:11,650
of using the decorator like the if

00:27:10,419 --> 00:27:13,120
you're if you're using wrap function

00:27:11,650 --> 00:27:14,470
you've got the extra cost of an extra

00:27:13,120 --> 00:27:17,679
function call I was running if you could

00:27:14,470 --> 00:27:19,809
talk about whether what kind of costs

00:27:17,679 --> 00:27:22,090
using wrapped decorate to decorate

00:27:19,809 --> 00:27:24,700
functions introduces ok yes so first

00:27:22,090 --> 00:27:26,620
comment about that particular usage yes

00:27:24,700 --> 00:27:28,900
you don't need wrapped when you're doing

00:27:26,620 --> 00:27:31,090
just that so if all you're doing is

00:27:28,900 --> 00:27:32,260
taking existing function registering at

00:27:31,090 --> 00:27:35,650
them sterling ridge what you don't need

00:27:32,260 --> 00:27:37,330
wraps ok so make that clear so to do all

00:27:35,650 --> 00:27:39,630
this is Magic and wrapped yes there is

00:27:37,330 --> 00:27:44,080
overhead and that is because that

00:27:39,630 --> 00:27:47,200
original simple decorator implementation

00:27:44,080 --> 00:27:49,419
it not is not doing properly what's

00:27:47,200 --> 00:27:51,429
called that it's not honoring the

00:27:49,419 --> 00:27:53,409
descriptor protocol and there's all this

00:27:51,429 --> 00:27:56,230
stuff to do a magic binding and things

00:27:53,409 --> 00:27:58,210
like that so to do that properly your

00:27:56,230 --> 00:28:00,970
decorated source has to be min as a

00:27:58,210 --> 00:28:02,830
descriptor so it can honor that protocol

00:28:00,970 --> 00:28:05,470
and pass it through to the original so

00:28:02,830 --> 00:28:08,140
it does have overhead and I have a blog

00:28:05,470 --> 00:28:11,380
post up on my site which goes through

00:28:08,140 --> 00:28:14,710
all of those overhead costs and gives

00:28:11,380 --> 00:28:16,090
comparisons to the basic way and also

00:28:14,710 --> 00:28:18,580
other libraries like the decorator

00:28:16,090 --> 00:28:20,770
package and hand my now in my particular

00:28:18,580 --> 00:28:22,780
one because of the overhead costs I have

00:28:20,770 --> 00:28:25,690
both a pure python implementation but

00:28:22,780 --> 00:28:27,429
also a C code implementation so the C

00:28:25,690 --> 00:28:30,700
code implementation because the extra

00:28:27,429 --> 00:28:32,289
binding cost is not going to be lower

00:28:30,700 --> 00:28:34,480
overhead as doing simple way which

00:28:32,289 --> 00:28:37,059
doesn't always work but it's still

00:28:34,480 --> 00:28:39,370
better than doing pure python so yes I

00:28:37,059 --> 00:28:40,720
know their issues and you better off

00:28:39,370 --> 00:28:44,470
just going to my blog site and look at

00:28:40,720 --> 00:28:46,740
the actual post about that any other

00:28:44,470 --> 00:28:46,740
questions

00:28:47,590 --> 00:28:58,450
yeah well a lot hi good talk do you

00:28:55,059 --> 00:29:02,289
think the executable path files should

00:28:58,450 --> 00:29:05,070
be fixed or changed will they be changed

00:29:02,289 --> 00:29:07,330
and do feel bad for abusing that system

00:29:05,070 --> 00:29:10,990
yes I feel bad for abusing the system

00:29:07,330 --> 00:29:12,309
and and this is the by actually no I

00:29:10,990 --> 00:29:15,220
think I did write a blog post about

00:29:12,309 --> 00:29:18,130
autorap but yeah I've been very hesitant

00:29:15,220 --> 00:29:21,270
in putting that package out there for

00:29:18,130 --> 00:29:23,440
people to use it would it be changed no

00:29:21,270 --> 00:29:26,260
and that is purely because there's too

00:29:23,440 --> 00:29:30,279
much stuff depend upon it now all the

00:29:26,260 --> 00:29:33,309
setup setup tools may be as easy install

00:29:30,279 --> 00:29:34,690
was dependent on that feature to work

00:29:33,309 --> 00:29:36,340
things do things properly and i think

00:29:34,690 --> 00:29:38,409
maybe even peep still users that are now

00:29:36,340 --> 00:29:39,700
as well so it's something the things

00:29:38,409 --> 00:29:41,770
that depend upon it and i think it'd

00:29:39,700 --> 00:29:43,480
just be too hard to change it although

00:29:41,770 --> 00:29:45,039
I'm probably the only one abusing it by

00:29:43,480 --> 00:29:49,630
putting my own stuff in there so maybe

00:29:45,039 --> 00:29:55,740
maybe not no other people could i'm not

00:29:49,630 --> 00:29:55,740
the only one okay was that it i'm more

00:30:03,929 --> 00:30:07,570
it could have been a separate module i

00:30:06,039 --> 00:30:12,039
put in there as borrow more as an

00:30:07,570 --> 00:30:16,090
example and yeah so this basically

00:30:12,039 --> 00:30:17,500
example I I I didn't want to it's just a

00:30:16,090 --> 00:30:18,429
hassle to create another package because

00:30:17,500 --> 00:30:23,289
then there's another thing I have to

00:30:18,429 --> 00:30:26,260
maintain yeah so yes it could have been

00:30:23,289 --> 00:30:28,500
separate and certainly there are people

00:30:26,260 --> 00:30:30,640
who have packages full of light a

00:30:28,500 --> 00:30:32,380
collection of different decorators and

00:30:30,640 --> 00:30:36,970
why could have gone off down that track

00:30:32,380 --> 00:30:39,100
because for example lrq LRU cache in the

00:30:36,970 --> 00:30:41,529
Python standard library that exists well

00:30:39,100 --> 00:30:43,450
it it uses a simplified decorator and I

00:30:41,529 --> 00:30:45,250
it doesn't I don't know if there has

00:30:43,450 --> 00:30:47,320
issues because of when it's being

00:30:45,250 --> 00:30:48,850
applied to well it probably won't work

00:30:47,320 --> 00:30:51,250
on a class method if you put an arrow

00:30:48,850 --> 00:30:53,350
your case on the class won't work it'll

00:30:51,250 --> 00:30:54,909
break it so I could have gone off their

00:30:53,350 --> 00:30:57,250
credit my own separate package with

00:30:54,909 --> 00:30:58,990
better implementation value case using

00:30:57,250 --> 00:31:00,669
synchronized but it seems like better

00:30:58,990 --> 00:31:01,180
idea is to get wrapped inside the stone

00:31:00,669 --> 00:31:02,890
library

00:31:01,180 --> 00:31:06,580
and then have Billy you because my

00:31:02,890 --> 00:31:10,540
implementation I think will finish at

00:31:06,580 --> 00:31:21,480
that can we please give a round of

00:31:10,540 --> 00:31:21,480

YouTube URL: https://www.youtube.com/watch?v=u7oj-ghfhUk


