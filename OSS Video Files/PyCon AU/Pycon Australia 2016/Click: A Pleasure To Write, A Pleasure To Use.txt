Title: Click: A Pleasure To Write, A Pleasure To Use
Publication date: 2016-08-16
Playlist: Pycon Australia 2016
Description: 
	Sebastian Vetter
https://2016.pycon-au.org/schedule/64/view_talk
We have a wide variety of packages and modules in Python that help build 
commandline tools in different ways. One of the more recent contenders is
'click'. It uses a very intuitive approach to create simple CLIs as well as
complex ones. In this talk, I will introduce building CLIs with 'click' and
illustrate some of its advantages.
Captions: 
	00:00:00,000 --> 00:00:05,430
guys welcome back so finally we have

00:00:02,700 --> 00:00:07,259
Sebastian Vettel Sebastian discovered

00:00:05,430 --> 00:00:09,960
his love for Python early in his

00:00:07,259 --> 00:00:12,269
university days since then he has used

00:00:09,960 --> 00:00:14,420
his used it in his academic research

00:00:12,269 --> 00:00:17,039
financial testing and web development

00:00:14,420 --> 00:00:19,680
please welcome Sebastian and his talk

00:00:17,039 --> 00:00:29,789
click a pleasure to ride a pleasure to

00:00:19,680 --> 00:00:31,890
use hi everyone it's interesting to see

00:00:29,789 --> 00:00:34,110
how intimidating a small room with a lot

00:00:31,890 --> 00:00:37,649
of people is this is a big room with a

00:00:34,110 --> 00:00:41,239
few people so I hope you're as Python

00:00:37,649 --> 00:00:45,710
community people are as nice to me as I

00:00:41,239 --> 00:00:48,000
have learned to appreciate so it's

00:00:45,710 --> 00:00:50,510
always even though this is the first

00:00:48,000 --> 00:00:52,890
time I'm giving this talk it's always

00:00:50,510 --> 00:00:57,390
nerve-racking especially the first two

00:00:52,890 --> 00:01:02,660
minutes so bear with me what I'm going

00:00:57,390 --> 00:01:06,119
to talk about is click my name is Seb I

00:01:02,660 --> 00:01:09,450
live in Vancouver in Canada I used to

00:01:06,119 --> 00:01:11,400
live here in Melbourne and I work for a

00:01:09,450 --> 00:01:14,909
company called mobile I as a backend

00:01:11,400 --> 00:01:17,460
engineer and that sort of we mostly work

00:01:14,909 --> 00:01:20,400
with Python on the back end we have a

00:01:17,460 --> 00:01:22,650
couple of websites they are all either

00:01:20,400 --> 00:01:26,970
Django or flask and that sort of where

00:01:22,650 --> 00:01:30,090
our most prominent Python use is but

00:01:26,970 --> 00:01:32,909
there is also other use cases for Python

00:01:30,090 --> 00:01:35,939
and that sort of where this part comes

00:01:32,909 --> 00:01:38,009
in we have like all of the dev ops II

00:01:35,939 --> 00:01:41,430
kind of stuff that comes with having a

00:01:38,009 --> 00:01:45,000
web application you basically need to

00:01:41,430 --> 00:01:46,740
deploy your your application or you have

00:01:45,000 --> 00:01:49,140
like certificates that you have to push

00:01:46,740 --> 00:01:51,329
to AWS or things like that things that

00:01:49,140 --> 00:01:54,860
you want to automate and python is

00:01:51,329 --> 00:01:57,509
really good at that as well so I

00:01:54,860 --> 00:02:00,570
generally try to write everything that I

00:01:57,509 --> 00:02:03,540
do that can be codified in a Python

00:02:00,570 --> 00:02:06,240
script or something like that and there

00:02:03,540 --> 00:02:08,970
is there is stuff like bash scripts that

00:02:06,240 --> 00:02:11,250
you can write but i personally prefer

00:02:08,970 --> 00:02:13,319
python because it has a couple of things

00:02:11,250 --> 00:02:13,940
that i'll go into that make it much

00:02:13,319 --> 00:02:18,180
easier

00:02:13,940 --> 00:02:22,319
or much more maintainable as well than a

00:02:18,180 --> 00:02:24,959
basket before i get into that just a

00:02:22,319 --> 00:02:26,940
little bit of terminology as i'll use it

00:02:24,959 --> 00:02:29,220
just so that we don't talk about the

00:02:26,940 --> 00:02:32,400
different things the same things in

00:02:29,220 --> 00:02:35,130
different ways when I talk about

00:02:32,400 --> 00:02:38,270
parameters on the command line there's

00:02:35,130 --> 00:02:42,660
basically two types technically three

00:02:38,270 --> 00:02:44,580
there is the argument which is there is

00:02:42,660 --> 00:02:47,940
the argument there is the option and the

00:02:44,580 --> 00:02:49,380
type of option which is the flag and an

00:02:47,940 --> 00:02:51,390
argument is basically a mandatory

00:02:49,380 --> 00:02:54,180
parameter that you have to pass in

00:02:51,390 --> 00:02:56,580
otherwise the application will say no I

00:02:54,180 --> 00:03:00,180
don't know what to do and it's usually

00:02:56,580 --> 00:03:03,750
just the value itself and in this case

00:03:00,180 --> 00:03:07,260
if you look at the pge CLI klein you

00:03:03,750 --> 00:03:08,940
pass in a database URL and that contains

00:03:07,260 --> 00:03:11,010
all the information about how to connect

00:03:08,940 --> 00:03:12,690
to the database if you don't give it

00:03:11,010 --> 00:03:17,940
that then it doesn't really know what to

00:03:12,690 --> 00:03:21,209
do in the case of an option options are

00:03:17,940 --> 00:03:24,150
as the name suggests optional they are

00:03:21,209 --> 00:03:27,890
usually name value pairs that identify

00:03:24,150 --> 00:03:30,750
what option does this value refer to and

00:03:27,890 --> 00:03:33,390
in this case I've got a couple of

00:03:30,750 --> 00:03:34,890
examples if you use Heroku the Heroku to

00:03:33,390 --> 00:03:38,610
about there's probably something that

00:03:34,890 --> 00:03:41,790
you're familiar with Double Dash help or

00:03:38,610 --> 00:03:44,040
double or dash H is one of the probably

00:03:41,790 --> 00:03:46,590
most prominent options that you find on

00:03:44,040 --> 00:03:49,440
almost every unique stool or every

00:03:46,590 --> 00:03:55,110
command line client and there is others

00:03:49,440 --> 00:03:57,510
like in in the the bottom case Double

00:03:55,110 --> 00:04:02,549
Dash app specifying which app on Heroku

00:03:57,510 --> 00:04:05,459
you're currently using there is also a

00:04:02,549 --> 00:04:08,549
thing that not every command line client

00:04:05,459 --> 00:04:12,959
really has it's called a command or a

00:04:08,549 --> 00:04:15,630
sub command pip does have that as we see

00:04:12,959 --> 00:04:17,519
at the bottom pip install install in

00:04:15,630 --> 00:04:19,919
this case would be a sub command and

00:04:17,519 --> 00:04:22,590
it's one of the things that is very

00:04:19,919 --> 00:04:25,020
difficult to get with anything but click

00:04:22,590 --> 00:04:28,069
or I haven't really found a good

00:04:25,020 --> 00:04:30,930
framework that actually provides that

00:04:28,069 --> 00:04:33,689
it's a way of grouping commands together

00:04:30,930 --> 00:04:36,030
grouping options to a specific set of

00:04:33,689 --> 00:04:40,289
commands and one of the things that I

00:04:36,030 --> 00:04:42,990
really appreciate so one of the things

00:04:40,289 --> 00:04:45,180
that I generally here when I talk to

00:04:42,990 --> 00:04:47,189
people about that it's like well i can

00:04:45,180 --> 00:04:50,699
write all of that in playing python so

00:04:47,189 --> 00:04:53,129
why would i use something like that and

00:04:50,699 --> 00:04:55,740
it's that's true you can do that you can

00:04:53,129 --> 00:04:59,759
just import this and then look at the

00:04:55,740 --> 00:05:03,990
arc be list and extract all the options

00:04:59,759 --> 00:05:06,360
and arguments from that the unfortunate

00:05:03,990 --> 00:05:09,930
thing about that though is that you get

00:05:06,360 --> 00:05:13,500
all the manual parsing you have to write

00:05:09,930 --> 00:05:16,319
yourself well as manual implies you have

00:05:13,500 --> 00:05:18,750
to do all the work yourself you have to

00:05:16,319 --> 00:05:21,569
do the input validation to a certain

00:05:18,750 --> 00:05:23,939
degree yourself you always have to do

00:05:21,569 --> 00:05:26,969
some level of input validation if it's a

00:05:23,939 --> 00:05:30,060
very specific type of input to your use

00:05:26,969 --> 00:05:32,789
case but stuff like I need an integer I

00:05:30,060 --> 00:05:34,529
expect an integer you can get that for

00:05:32,789 --> 00:05:37,680
free and you don't have to rewrite that

00:05:34,529 --> 00:05:39,659
in every script that use and there is

00:05:37,680 --> 00:05:42,990
also help text generation and better

00:05:39,659 --> 00:05:45,569
formatting then like writing a function

00:05:42,990 --> 00:05:47,750
that you output whenever someone types

00:05:45,569 --> 00:05:52,800
in help and that you manually maintain

00:05:47,750 --> 00:05:55,740
separate from your regular code so

00:05:52,800 --> 00:05:57,389
poison is a language that has a big

00:05:55,740 --> 00:06:01,620
standard library there is usually a

00:05:57,389 --> 00:06:03,779
solution for everything most likely if

00:06:01,620 --> 00:06:06,180
it's a very common problem it is part of

00:06:03,779 --> 00:06:09,599
the standard library and this is the

00:06:06,180 --> 00:06:13,409
case for the problem of a command line

00:06:09,599 --> 00:06:16,110
line as well so we have our parts we

00:06:13,409 --> 00:06:18,389
have our cars and we have dog opt we

00:06:16,110 --> 00:06:23,250
have a lot of other tools as well that

00:06:18,389 --> 00:06:25,439
are smaller niche clients the advantage

00:06:23,250 --> 00:06:27,360
of something like a parse is that it has

00:06:25,439 --> 00:06:29,819
been part of the standard library for

00:06:27,360 --> 00:06:32,610
quite some time but it has also been

00:06:29,819 --> 00:06:37,259
deprecated now so it will still be part

00:06:32,610 --> 00:06:40,440
of Python 2.3 plus and 3.2 plus but it

00:06:37,259 --> 00:06:41,310
will no longer get any feature additions

00:06:40,440 --> 00:06:44,790
or bug

00:06:41,310 --> 00:06:48,750
fixes in that sense what it looks like

00:06:44,790 --> 00:06:51,660
is we have we define a parser and then

00:06:48,750 --> 00:06:54,270
we can add options to that define what

00:06:51,660 --> 00:06:57,240
type of input it is define whether it's

00:06:54,270 --> 00:06:59,400
a flag or not and then at the bottom we

00:06:57,240 --> 00:07:02,790
just do a par as arcs which basically

00:06:59,400 --> 00:07:05,010
takes a look at sis RV and then extracts

00:07:02,790 --> 00:07:07,890
things and validates that these options

00:07:05,010 --> 00:07:11,490
either have been specified if they are

00:07:07,890 --> 00:07:16,110
mandatory or whether their values are

00:07:11,490 --> 00:07:18,710
the values that we expect the

00:07:16,110 --> 00:07:22,230
alternative and the one that is now the

00:07:18,710 --> 00:07:25,710
default or the standard in the standard

00:07:22,230 --> 00:07:28,950
library is our parts which has been

00:07:25,710 --> 00:07:31,830
introduced as a successor for our parts

00:07:28,950 --> 00:07:34,710
to introduce new features that wouldn't

00:07:31,830 --> 00:07:38,910
be able to provide in our opt parse

00:07:34,710 --> 00:07:40,440
without breaking the API so this is the

00:07:38,910 --> 00:07:44,250
new way to go if you just want to use

00:07:40,440 --> 00:07:48,090
stuff in the standard library and it

00:07:44,250 --> 00:07:50,490
looks fairly similar the only major

00:07:48,090 --> 00:07:53,460
difference for in a simple use case is

00:07:50,490 --> 00:07:55,260
that you have the ability to specify the

00:07:53,460 --> 00:07:57,840
arguments as well and not just the

00:07:55,260 --> 00:08:00,570
options and at the bottom you get out a

00:07:57,840 --> 00:08:06,420
day look up of all the options and

00:08:00,570 --> 00:08:08,460
arguments that you have specified this

00:08:06,420 --> 00:08:10,430
is all in the standard library easy to

00:08:08,460 --> 00:08:14,190
use you don't have to install anything

00:08:10,430 --> 00:08:15,870
there is also another contender doc up

00:08:14,190 --> 00:08:18,660
that takes a very different approach to

00:08:15,870 --> 00:08:20,580
that and says write down how you want

00:08:18,660 --> 00:08:22,590
the help text to look for this command

00:08:20,580 --> 00:08:24,750
line client I'm going to look at that

00:08:22,590 --> 00:08:28,410
and infer what the options or the

00:08:24,750 --> 00:08:31,710
arguments should be which looks a little

00:08:28,410 --> 00:08:33,840
bit like this where you basically define

00:08:31,710 --> 00:08:35,910
your this this looks like a standard

00:08:33,840 --> 00:08:39,290
output that you get when you do the dash

00:08:35,910 --> 00:08:42,840
how double dash help or a dash H on a

00:08:39,290 --> 00:08:44,670
unix tool and it in it basically gives

00:08:42,840 --> 00:08:47,180
you the validation by inferring it from

00:08:44,670 --> 00:08:50,010
the documentation it's a nice way of

00:08:47,180 --> 00:08:54,270
doing it I don't necessarily like it

00:08:50,010 --> 00:08:55,140
that much so here's click I come came

00:08:54,270 --> 00:08:57,600
across click

00:08:55,140 --> 00:08:59,100
probably three years ago and started to

00:08:57,600 --> 00:09:03,210
use it more and more and more and i

00:08:59,100 --> 00:09:07,890
really like it it's been written by I

00:09:03,210 --> 00:09:12,120
mean Ron occur he's the author of flask

00:09:07,890 --> 00:09:14,280
for example so he has a very he is very

00:09:12,120 --> 00:09:17,190
opinionated about things and in this

00:09:14,280 --> 00:09:23,090
case he has very good opinions that

00:09:17,190 --> 00:09:25,710
match up with the ones that I have so

00:09:23,090 --> 00:09:27,240
yeah this is basically the URL where you

00:09:25,710 --> 00:09:30,870
can find the documentation and the

00:09:27,240 --> 00:09:35,670
documentation is very extensive and very

00:09:30,870 --> 00:09:38,370
good the reasons why i like it is that

00:09:35,670 --> 00:09:40,590
it's very pythonic it is very intuitive

00:09:38,370 --> 00:09:44,820
to use as soon as you go through the

00:09:40,590 --> 00:09:47,250
first getting started section and it is

00:09:44,820 --> 00:09:49,650
built to be very composable and you can

00:09:47,250 --> 00:09:51,630
move things around easily and nest or

00:09:49,650 --> 00:09:54,840
group together certain commands and

00:09:51,630 --> 00:09:56,910
subcommands it also has a very good

00:09:54,840 --> 00:09:58,980
handling of inputs and outputs and

00:09:56,910 --> 00:10:02,340
getting things like colored outputs and

00:09:58,980 --> 00:10:04,680
stuff like that and he has a pulse as

00:10:02,340 --> 00:10:07,010
part of the documentation on why click

00:10:04,680 --> 00:10:09,900
and why he built it in the first place

00:10:07,010 --> 00:10:14,250
so I recommend giving that a read if

00:10:09,900 --> 00:10:15,960
you're interested in that but let's take

00:10:14,250 --> 00:10:17,430
a look at what it actually means to

00:10:15,960 --> 00:10:22,050
build a command line client with click

00:10:17,430 --> 00:10:24,330
and it all starts with obviously setting

00:10:22,050 --> 00:10:27,720
up the project which can be a lot of

00:10:24,330 --> 00:10:31,050
boilerplate the most important part is

00:10:27,720 --> 00:10:33,210
obviously installing click but getting

00:10:31,050 --> 00:10:36,390
around the boilerplate is something that

00:10:33,210 --> 00:10:38,610
can be easily done with this at the top

00:10:36,390 --> 00:10:40,800
there is a little cookie cutter project

00:10:38,610 --> 00:10:43,170
that I've set up on github for all of

00:10:40,800 --> 00:10:46,440
the things command line client that I

00:10:43,170 --> 00:10:48,780
right so I just throw cookie cutter at

00:10:46,440 --> 00:10:52,470
that repo and what I get out is a

00:10:48,780 --> 00:10:55,110
readily setup project that has a first

00:10:52,470 --> 00:10:58,950
main entry point that i can use and then

00:10:55,110 --> 00:11:02,340
extend from there the code example in

00:10:58,950 --> 00:11:06,990
gear is going to be well is on github so

00:11:02,340 --> 00:11:08,490
the bottom link gives you a all the code

00:11:06,990 --> 00:11:11,010
in steps of

00:11:08,490 --> 00:11:14,100
mids according to what we go through

00:11:11,010 --> 00:11:15,660
here so if you want to take a look at

00:11:14,100 --> 00:11:18,089
that and look at the different steps and

00:11:15,660 --> 00:11:22,410
REE factors you'll be able to see that

00:11:18,089 --> 00:11:27,660
there the slides will be up on speaker

00:11:22,410 --> 00:11:32,029
deck so basically when I start a project

00:11:27,660 --> 00:11:35,880
that's what I do I run my cookie cutter

00:11:32,029 --> 00:11:38,310
against that repo I do an install and

00:11:35,880 --> 00:11:42,630
then I can actually run this and I can

00:11:38,310 --> 00:11:45,089
see the output of a print statement and

00:11:42,630 --> 00:11:47,970
this is basically what the corresponding

00:11:45,089 --> 00:11:50,580
code looks like it's basically you

00:11:47,970 --> 00:11:52,770
import click and then everything else is

00:11:50,580 --> 00:11:56,040
going to be a decorator around functions

00:11:52,770 --> 00:11:58,140
so click command defines the main

00:11:56,040 --> 00:12:01,440
function at your as your main entry

00:11:58,140 --> 00:12:06,029
point to the click command line tool

00:12:01,440 --> 00:12:08,910
that you're building the example that

00:12:06,029 --> 00:12:11,490
I'm going to go through is I was looking

00:12:08,910 --> 00:12:14,640
for a bike recently and craigslist has a

00:12:11,490 --> 00:12:20,490
nice search save your search get emails

00:12:14,640 --> 00:12:22,980
feature but the bike add site that i was

00:12:20,490 --> 00:12:24,510
using didn't have that so I wrote a

00:12:22,980 --> 00:12:27,510
little command line client that would

00:12:24,510 --> 00:12:29,520
just recurrently pour down the results

00:12:27,510 --> 00:12:31,260
and then figure out which ones are new

00:12:29,520 --> 00:12:33,750
which ones are not and send me an email

00:12:31,260 --> 00:12:35,520
so we use that as a bit of an example

00:12:33,750 --> 00:12:37,740
some of that might be a little bit

00:12:35,520 --> 00:12:39,930
engineered for illustrating some

00:12:37,740 --> 00:12:44,010
examples here but that's sort of the

00:12:39,930 --> 00:12:46,740
idea the first thing I'm going to do is

00:12:44,010 --> 00:12:48,600
I'm going to take a URL that has all the

00:12:46,740 --> 00:12:51,839
query parameters for the search in it

00:12:48,600 --> 00:12:56,610
and I want to specify that to mine

00:12:51,839 --> 00:12:58,170
command line client and so what I do the

00:12:56,610 --> 00:13:00,570
command line client is called ad

00:12:58,170 --> 00:13:03,720
notifier and then I pass in as a

00:13:00,570 --> 00:13:06,060
mandatory argument my URL that gets

00:13:03,720 --> 00:13:09,420
processed and it tells me how many ads I

00:13:06,060 --> 00:13:13,020
have in there so here are the arguments

00:13:09,420 --> 00:13:15,300
that we talked about earlier and it's

00:13:13,020 --> 00:13:18,410
basically pretty easy we extend our

00:13:15,300 --> 00:13:21,630
initial example we add another rapper

00:13:18,410 --> 00:13:24,780
decorator we give it the name

00:13:21,630 --> 00:13:26,970
of the argument that we want and then

00:13:24,780 --> 00:13:30,120
click automatically puts that argument

00:13:26,970 --> 00:13:32,880
into the function as one of the function

00:13:30,120 --> 00:13:36,180
arguments and then I can just use that

00:13:32,880 --> 00:13:38,430
as I normally would parameters that get

00:13:36,180 --> 00:13:42,090
positive to the function we hand that

00:13:38,430 --> 00:13:45,240
over to a fine dad's function that grabs

00:13:42,090 --> 00:13:46,860
the stuff use this beautiful soup or

00:13:45,240 --> 00:13:50,460
something like that and it gives me a

00:13:46,860 --> 00:13:54,210
list of ads out so that was pretty easy

00:13:50,460 --> 00:13:56,940
let's look at getting the notification

00:13:54,210 --> 00:14:01,290
email that we want for all the ads that

00:13:56,940 --> 00:14:03,000
we get that's sort of a good example for

00:14:01,290 --> 00:14:05,100
using an option on the command line I

00:14:03,000 --> 00:14:06,840
want to just pass that in because I

00:14:05,100 --> 00:14:11,310
might have like different people that I

00:14:06,840 --> 00:14:13,770
want different search results same same

00:14:11,310 --> 00:14:16,140
here it goes through it processes the

00:14:13,770 --> 00:14:18,780
URL finds the ads but this time it sends

00:14:16,140 --> 00:14:21,450
it out via email to the email that I

00:14:18,780 --> 00:14:26,190
specified so we're looking at the

00:14:21,450 --> 00:14:29,100
options and this is pretty similar we

00:14:26,190 --> 00:14:32,790
add there is another decorator in click

00:14:29,100 --> 00:14:35,280
that has that is called option very

00:14:32,790 --> 00:14:37,200
straightforward you give it exactly what

00:14:35,280 --> 00:14:39,750
you want on the command line double dash

00:14:37,200 --> 00:14:42,450
email and then that gets transformed

00:14:39,750 --> 00:14:44,790
into by dropping the double dashes and

00:14:42,450 --> 00:14:47,190
like dashes get turned into double

00:14:44,790 --> 00:14:49,830
unders into underscores or something

00:14:47,190 --> 00:14:52,260
like that it gets passed in as a

00:14:49,830 --> 00:14:55,500
parameter into the function as well and

00:14:52,260 --> 00:14:58,980
then we can use it the same way an

00:14:55,500 --> 00:15:02,820
interesting feature of click is that if

00:14:58,980 --> 00:15:05,940
you have a sort of 12 factor set up as

00:15:02,820 --> 00:15:10,020
on Heroku or in other platforms you can

00:15:05,940 --> 00:15:13,010
actually specify n far as a an option to

00:15:10,020 --> 00:15:15,660
the decorator and say this is the

00:15:13,010 --> 00:15:18,420
environment variable and if I don't pass

00:15:15,660 --> 00:15:21,060
in the option look if you can find that

00:15:18,420 --> 00:15:24,150
variable and take it from there so I can

00:15:21,060 --> 00:15:27,060
basically export that URL on the command

00:15:24,150 --> 00:15:28,350
line or in my environment and then take

00:15:27,060 --> 00:15:30,810
it out of there and don't have to

00:15:28,350 --> 00:15:33,180
specify it every time or I can pull

00:15:30,810 --> 00:15:35,279
secrets out of there that I have exposed

00:15:33,180 --> 00:15:41,279
on the environment

00:15:35,279 --> 00:15:43,499
I said before that this feature is sort

00:15:41,279 --> 00:15:46,879
of about getting information about new

00:15:43,499 --> 00:15:49,259
ads not like here's everything so

00:15:46,879 --> 00:15:51,089
looking at that we probably have some

00:15:49,259 --> 00:15:53,300
sort of caching layer that stores all

00:15:51,089 --> 00:15:56,399
the ads that we found and then only

00:15:53,300 --> 00:15:59,819
extracts the ones that are new and what

00:15:56,399 --> 00:16:03,889
comes with that is one of the problems

00:15:59,819 --> 00:16:07,019
in computer science cache invalidation

00:16:03,889 --> 00:16:11,089
so for something like either i have it

00:16:07,019 --> 00:16:11,089
run locally and i want to test it or

00:16:12,199 --> 00:16:17,220
basically just running it multiple times

00:16:14,910 --> 00:16:19,499
without actually catching any data i

00:16:17,220 --> 00:16:22,170
might want to use a flag that basically

00:16:19,499 --> 00:16:24,389
disables the cash or resets resets the

00:16:22,170 --> 00:16:26,430
cash regardless of how we implement that

00:16:24,389 --> 00:16:31,019
whether we don't connect to redness or

00:16:26,430 --> 00:16:33,449
don't store things in a file so flags

00:16:31,019 --> 00:16:36,240
are sort of special options they have a

00:16:33,449 --> 00:16:38,879
default value and by using them we

00:16:36,240 --> 00:16:40,500
basically flip that value from like

00:16:38,879 --> 00:16:45,870
either false to true or true to false

00:16:40,500 --> 00:16:48,089
and it's again very simple to do that we

00:16:45,870 --> 00:16:50,430
can specify the option with a default

00:16:48,089 --> 00:16:53,360
value and then say this is a flag so

00:16:50,430 --> 00:16:57,029
just treat it as such and flip that

00:16:53,360 --> 00:16:59,819
value to whatever the opposite is and

00:16:57,029 --> 00:17:03,180
then we can use that in whichever way we

00:16:59,819 --> 00:17:05,429
want in our code again and this is an

00:17:03,180 --> 00:17:07,199
example where the dash in the option

00:17:05,429 --> 00:17:09,780
actually gets turned into an underscore

00:17:07,199 --> 00:17:14,610
so that is actually a usable Python

00:17:09,780 --> 00:17:16,890
variable so this is where it gets a

00:17:14,610 --> 00:17:19,770
little bit engineered because most

00:17:16,890 --> 00:17:21,600
people would say well if you want to run

00:17:19,770 --> 00:17:23,579
this periodically you could just saw it

00:17:21,600 --> 00:17:25,709
into something like cron or stuff like

00:17:23,579 --> 00:17:31,350
that but I want to make a point here so

00:17:25,709 --> 00:17:33,179
I'm not going to accept that so let's

00:17:31,350 --> 00:17:35,070
say we want to run it as a periodic task

00:17:33,179 --> 00:17:38,159
or we want to run it just like the way

00:17:35,070 --> 00:17:40,049
we did it before and if we run it as a

00:17:38,159 --> 00:17:42,320
periodic task we might want to have a

00:17:40,049 --> 00:17:45,570
sub command that says run periodically

00:17:42,320 --> 00:17:48,780
whereas the other one is run once and as

00:17:45,570 --> 00:17:50,820
you can see appear there

00:17:48,780 --> 00:17:53,730
is an extra option that we don't have in

00:17:50,820 --> 00:17:59,370
the example below that is specific to

00:17:53,730 --> 00:18:01,200
that subcommand and looking at that we

00:17:59,370 --> 00:18:03,300
have to do a little bit of refactoring

00:18:01,200 --> 00:18:05,580
because suddenly we have two commands

00:18:03,300 --> 00:18:08,970
which means to entry points how do we

00:18:05,580 --> 00:18:10,950
actually do that and that's where click

00:18:08,970 --> 00:18:14,250
is really powerful because it allows us

00:18:10,950 --> 00:18:16,380
to have a group and the group says this

00:18:14,250 --> 00:18:20,400
is the main entry point and then you can

00:18:16,380 --> 00:18:23,250
attach subcommands to that group so we

00:18:20,400 --> 00:18:26,040
wrap our main class in that decorator

00:18:23,250 --> 00:18:29,310
and then use main instead of click

00:18:26,040 --> 00:18:32,220
command to wrap our sub commands and

00:18:29,310 --> 00:18:34,530
then basically the rest looks pretty

00:18:32,220 --> 00:18:37,140
much the same this is the run once come

00:18:34,530 --> 00:18:39,540
on and then we add that extra option

00:18:37,140 --> 00:18:43,460
just to the sub command for our run

00:18:39,540 --> 00:18:46,950
every five minutes option that we have

00:18:43,460 --> 00:18:48,810
so this is pretty nice but a lot of

00:18:46,950 --> 00:18:51,090
people would say well it's a little bit

00:18:48,810 --> 00:18:53,700
ugly because we have those options on

00:18:51,090 --> 00:18:58,110
both of those functions and this isn't

00:18:53,700 --> 00:19:00,770
really dry so one of the things that is

00:18:58,110 --> 00:19:04,440
a little bit under the hood of click is

00:19:00,770 --> 00:19:06,900
context every command and subcommand

00:19:04,440 --> 00:19:10,140
runs within a certain context and you

00:19:06,900 --> 00:19:15,270
won't ever see that unless you use it

00:19:10,140 --> 00:19:19,650
explicitly so click has this past

00:19:15,270 --> 00:19:22,410
context decorated that will basically

00:19:19,650 --> 00:19:25,830
result in the first argument being

00:19:22,410 --> 00:19:27,840
passed into the wrapped function being a

00:19:25,830 --> 00:19:31,860
context and that's the context that

00:19:27,840 --> 00:19:36,420
click automatically generates for that

00:19:31,860 --> 00:19:38,160
specific command what the context

00:19:36,420 --> 00:19:40,190
contains a lot of stuff and a lot of the

00:19:38,160 --> 00:19:43,490
things you never really actually need

00:19:40,190 --> 00:19:46,800
but it contains a special object

00:19:43,490 --> 00:19:50,340
attribute and this is something for the

00:19:46,800 --> 00:19:52,860
developer to use for whatever they want

00:19:50,340 --> 00:19:54,900
so you could put an object in there you

00:19:52,860 --> 00:19:58,320
could put a dictionary in there like

00:19:54,900 --> 00:20:00,060
will do in a minute or tweet it

00:19:58,320 --> 00:20:02,190
whichever way you like click is not

00:20:00,060 --> 00:20:05,370
going to touch that it'll just for

00:20:02,190 --> 00:20:08,220
what it into all the sub commands that

00:20:05,370 --> 00:20:10,350
you have so in our group we can

00:20:08,220 --> 00:20:14,970
basically take all the options that are

00:20:10,350 --> 00:20:17,879
global put them into that main group

00:20:14,970 --> 00:20:20,820
entry point and then just throw them

00:20:17,879 --> 00:20:24,269
into a dictionary and attach them to

00:20:20,820 --> 00:20:26,759
that context object and then in our

00:20:24,269 --> 00:20:29,490
individual subcommands all we have to do

00:20:26,759 --> 00:20:31,919
is basically say pass context because we

00:20:29,490 --> 00:20:34,110
want to get the context and we can take

00:20:31,919 --> 00:20:36,289
that context and have access to all the

00:20:34,110 --> 00:20:40,649
data that we put in there earlier and

00:20:36,289 --> 00:20:43,559
that makes it very easy to see what's

00:20:40,649 --> 00:20:46,500
going on here and we only have one

00:20:43,559 --> 00:20:51,980
additional option on that run

00:20:46,500 --> 00:20:55,200
periodically function so that gives us

00:20:51,980 --> 00:20:57,710
quite a bit of a sort of a first

00:20:55,200 --> 00:21:00,299
impression of what we can do with click

00:20:57,710 --> 00:21:03,870
what I said earlier is that there is

00:21:00,299 --> 00:21:07,289
also documentation is generated in a

00:21:03,870 --> 00:21:09,570
very easy nice and pythonic way because

00:21:07,289 --> 00:21:12,000
what you do is to get something like

00:21:09,570 --> 00:21:16,559
this which is basically just running the

00:21:12,000 --> 00:21:21,509
command with dash H is actually not that

00:21:16,559 --> 00:21:24,240
much all I have to do is on the option

00:21:21,509 --> 00:21:28,169
have an extra help equals and then

00:21:24,240 --> 00:21:30,389
provide a string and for any of the

00:21:28,169 --> 00:21:33,389
commands or sub commands that I have I

00:21:30,389 --> 00:21:36,029
can just use the regular doc string for

00:21:33,389 --> 00:21:37,950
documentation and I should be using that

00:21:36,029 --> 00:21:39,809
anyways if I write any piece of code

00:21:37,950 --> 00:21:42,080
that's a function or a module or

00:21:39,809 --> 00:21:47,250
something like that and that basically

00:21:42,080 --> 00:21:53,669
gives us the documentation printed out

00:21:47,250 --> 00:21:58,019
exactly like this so for me that's a

00:21:53,669 --> 00:22:00,059
very nice experience in writing quick

00:21:58,019 --> 00:22:04,409
scripts that actually give me a little

00:22:00,059 --> 00:22:07,559
bit of validation it feels very pythonic

00:22:04,409 --> 00:22:10,970
through using using the the decorator

00:22:07,559 --> 00:22:13,649
pattern and there is a lot of very

00:22:10,970 --> 00:22:15,690
simple validation that you get for free

00:22:13,649 --> 00:22:18,990
without actually doing any

00:22:15,690 --> 00:22:20,820
additional work what I would recommend

00:22:18,990 --> 00:22:23,129
is checking out some things like the

00:22:20,820 --> 00:22:26,190
environment variables in the

00:22:23,129 --> 00:22:28,710
documentation there is also a pretty big

00:22:26,190 --> 00:22:31,919
section on parameter types that make

00:22:28,710 --> 00:22:35,370
handling of files very easy so if you

00:22:31,919 --> 00:22:38,070
say my input is a file I actually you

00:22:35,370 --> 00:22:41,309
actually get it does this file exists

00:22:38,070 --> 00:22:43,110
for free and and things like that where

00:22:41,309 --> 00:22:45,029
you can ensure you don't have to check

00:22:43,110 --> 00:22:46,649
for the file yourself because that's one

00:22:45,029 --> 00:22:49,620
of the common things that you have when

00:22:46,649 --> 00:22:52,950
you want a file past in is does this

00:22:49,620 --> 00:22:54,450
file actually exist there's also a lot

00:22:52,950 --> 00:22:56,429
of testing and there are some things

00:22:54,450 --> 00:22:58,649
like bash auto-completion that you get

00:22:56,429 --> 00:23:02,190
for free so if you just have it

00:22:58,649 --> 00:23:04,679
installed through set up top I then you

00:23:02,190 --> 00:23:08,509
basically have assuming your shell is

00:23:04,679 --> 00:23:10,860
bash you get bash auto-completion and

00:23:08,509 --> 00:23:21,389
with that I'm going to open it up for

00:23:10,860 --> 00:23:23,549
questions if you have any okay thank you

00:23:21,389 --> 00:23:32,299
Sebastian for your talk yeah sure any

00:23:23,549 --> 00:23:35,429
questions yep if you ever try to convert

00:23:32,299 --> 00:23:41,340
like a decent size command line tool us

00:23:35,429 --> 00:23:43,799
just using our pasties and click no not

00:23:41,340 --> 00:23:46,259
not decent sized like the small scripts

00:23:43,799 --> 00:23:52,620
that I right I've done that but not to a

00:23:46,259 --> 00:23:55,679
sort of a large scale yeah thanks for

00:23:52,620 --> 00:23:57,419
the talk said I just wanted to ask about

00:23:55,679 --> 00:23:59,429
validation you mentioned validation

00:23:57,419 --> 00:24:01,320
right at the end there I know you can do

00:23:59,429 --> 00:24:03,419
it for file types is there any other

00:24:01,320 --> 00:24:05,340
types of validation like if I want to

00:24:03,419 --> 00:24:08,370
ensure it's an email address or a path

00:24:05,340 --> 00:24:12,360
or URL or something like that there are

00:24:08,370 --> 00:24:14,909
certain types that are coming with click

00:24:12,360 --> 00:24:16,889
so there is like uuid validation for

00:24:14,909 --> 00:24:21,470
example there are all the basic types

00:24:16,889 --> 00:24:23,700
for Python there is no email validation

00:24:21,470 --> 00:24:25,679
when I was putting this together I

00:24:23,700 --> 00:24:27,659
actually look for that and there is no

00:24:25,679 --> 00:24:29,230
way of doing that there is a way of

00:24:27,659 --> 00:24:32,510
writing your own

00:24:29,230 --> 00:24:34,550
parameter type subclasses that basically

00:24:32,510 --> 00:24:38,150
do custom validation to whatever your

00:24:34,550 --> 00:24:42,650
use cases but like something like email

00:24:38,150 --> 00:24:54,650
is is not part of click itself yep

00:24:42,650 --> 00:24:56,570
anyone else with the automatic help

00:24:54,650 --> 00:24:58,490
generation can you sequence that input

00:24:56,570 --> 00:25:02,060
specific order so more user-friendly

00:24:58,490 --> 00:25:04,120
order that's a good question I don't

00:25:02,060 --> 00:25:13,790
know that but I'm pretty sure it'll be

00:25:04,120 --> 00:25:15,410
described in the documentation so I'm

00:25:13,790 --> 00:25:17,840
just curious is there a way of

00:25:15,410 --> 00:25:19,580
validating say an easy to input for a

00:25:17,840 --> 00:25:23,390
range so say it's only valid if it's

00:25:19,580 --> 00:25:25,880
between one and ten I think there is a

00:25:23,390 --> 00:25:29,750
type that allows you to say this is a

00:25:25,880 --> 00:25:32,420
range so give me validate that in that

00:25:29,750 --> 00:25:34,730
it is within that range or that is it is

00:25:32,420 --> 00:25:44,600
of a specific type and within that range

00:25:34,730 --> 00:25:47,330
yes very more yeah does click of

00:25:44,600 --> 00:25:51,790
anything built in for showing progress

00:25:47,330 --> 00:25:55,850
of long-running command-line tasks I

00:25:51,790 --> 00:25:57,470
don't think so but that's also where I

00:25:55,850 --> 00:26:05,450
would again refer you to the

00:25:57,470 --> 00:26:07,010
documentation anyone who do you have to

00:26:05,450 --> 00:26:10,490
do anything special to unit test these

00:26:07,010 --> 00:26:12,860
things so you basically the way you

00:26:10,490 --> 00:26:14,660
write your functions you can basically

00:26:12,860 --> 00:26:17,960
just do unit testing as you usually

00:26:14,660 --> 00:26:20,120
would of the individual units but there

00:26:17,960 --> 00:26:21,590
is an additional test framework that

00:26:20,120 --> 00:26:24,620
comes with click that gives you the

00:26:21,590 --> 00:26:26,930
ability to sort of fake execute the

00:26:24,620 --> 00:26:29,180
actual command line tool that'll

00:26:26,930 --> 00:26:31,400
basically handle some of the validation

00:26:29,180 --> 00:26:34,970
edge cases that you might have where you

00:26:31,400 --> 00:26:38,800
can check the passing in of parameters

00:26:34,970 --> 00:26:38,800
and and options and things like that

00:26:39,779 --> 00:26:49,169
no one else okay well I guess that's it

00:26:46,039 --> 00:26:51,299
Sebastian I've one more thing on behalf

00:26:49,169 --> 00:26:53,879
of pike on Australia 2016 I'd like to

00:26:51,299 --> 00:26:56,419
present you a small gift um please a

00:26:53,879 --> 00:26:56,419

YouTube URL: https://www.youtube.com/watch?v=bsJFMtQ5MZU


