Title: Reproducible Research in Python
Publication date: 2016-08-16
Playlist: Pycon Australia 2016
Description: 
	Jodie Burchell
https://2016.pycon-au.org/schedule/127/view_talk
You’ve seen a great idea on someone’s blog that you think would really push that old analysis you did 6 months ago to the next level. You open up the Dropbox folder you have with all of your scripts, and … you’re lost. Which script did you start with? What does this random chunk of code do? Where is the original data file? You finally sort out your scripts, but then your code fails every second line because you don't even remember which packages you used before. Frustrated, you give up.

What if I told you that there is a better way to keep track of your analyses, and that it is easier than you think to do so? In this talk I will show you how using a reproducible research approach to your analyses can save you hours of time when revisiting or updating old projects, and demonstrate some of the tools that Python has available to make this possible. This talk will cover how to manage your packages using virtualenvs, how to thoroughly document your analysis using Jupyter Notebook, how to keep track of any changes using source control systems like Git and how to collaborate effectively using GitHub. By the end you will wonder why you’ve ever done your analyses any other way, and will be happily maintaining and improving your projects for many years to come!
Captions: 
	00:00:00,829 --> 00:00:08,370
okay welcome back this is our last talk

00:00:04,529 --> 00:00:12,599
in this morning session we have Jodi

00:00:08,370 --> 00:00:15,780
Jodi büchel she loves data like she

00:00:12,599 --> 00:00:18,029
really really really love started so

00:00:15,780 --> 00:00:21,060
imagine what she's working in the data

00:00:18,029 --> 00:00:23,130
scientist in a client site analytics in

00:00:21,060 --> 00:00:26,460
sick Australia and her favorite

00:00:23,130 --> 00:00:29,699
languages are Python and stutter or

00:00:26,460 --> 00:00:31,830
stata as you prefer and she will be

00:00:29,699 --> 00:00:40,500
talking about reproducible research in

00:00:31,830 --> 00:00:42,059
Python so please welcome her hi everyone

00:00:40,500 --> 00:00:43,590
thanks for coming to my talk today

00:00:42,059 --> 00:00:45,420
there's obviously a lot of great

00:00:43,590 --> 00:00:48,539
selections to choose from in this time

00:00:45,420 --> 00:00:50,010
slot so thank you for coming to mind so

00:00:48,539 --> 00:00:52,129
today obviously I'm going to be talking

00:00:50,010 --> 00:00:54,960
about a topic near and dear to my heart

00:00:52,129 --> 00:00:58,410
reproducible research and how well

00:00:54,960 --> 00:00:59,609
python is set up to implement this so

00:00:58,410 --> 00:01:02,010
obviously there's a very complicated

00:00:59,609 --> 00:01:04,140
topic we saw some examples of how it can

00:01:02,010 --> 00:01:06,510
be implemented in the previous two talks

00:01:04,140 --> 00:01:08,490
by Nathan and Henry so what I'm going to

00:01:06,510 --> 00:01:11,490
be doing is be giving a very high level

00:01:08,490 --> 00:01:14,220
overview but as you can see on that

00:01:11,490 --> 00:01:16,080
slide I have a blog and in the next

00:01:14,220 --> 00:01:17,640
couple of weeks I promise I'll be

00:01:16,080 --> 00:01:19,200
popping up a blog post which will show

00:01:17,640 --> 00:01:22,650
you how to implement this in a concrete

00:01:19,200 --> 00:01:25,439
manner also I'm a really crazy cat lady

00:01:22,650 --> 00:01:29,729
so there's going to be a lot of cats in

00:01:25,439 --> 00:01:32,220
this talk so to start let's define what

00:01:29,729 --> 00:01:33,900
reproducible research is so you can see

00:01:32,220 --> 00:01:36,180
from this quote that the goal of

00:01:33,900 --> 00:01:38,490
reproducible research is to tie together

00:01:36,180 --> 00:01:41,509
specific instructions to your data

00:01:38,490 --> 00:01:43,979
analysis and the data that you used in

00:01:41,509 --> 00:01:46,920
order to make sure that the scholarship

00:01:43,979 --> 00:01:49,829
or the work can be recreated better very

00:01:46,920 --> 00:01:51,659
better understood and verified so you

00:01:49,829 --> 00:01:53,880
know this is a very noble sounding

00:01:51,659 --> 00:01:56,700
high-level aid but how do we actually

00:01:53,880 --> 00:02:00,240
apply it to our everyday work doing data

00:01:56,700 --> 00:02:02,310
analysis well to understand what this

00:02:00,240 --> 00:02:03,869
quote is trying to say I think it helps

00:02:02,310 --> 00:02:06,090
to first understand what irreproducible

00:02:03,869 --> 00:02:08,129
researchers and yes that's a very

00:02:06,090 --> 00:02:09,479
awkward sounding word so I'm extremely

00:02:08,129 --> 00:02:10,869
sad that that's the opposite of

00:02:09,479 --> 00:02:13,090
reproducible

00:02:10,869 --> 00:02:16,510
so let's say we're going back to an

00:02:13,090 --> 00:02:18,220
analysis we did six months ago we open

00:02:16,510 --> 00:02:20,709
up our dropbox folder where we stored

00:02:18,220 --> 00:02:25,810
all of our files associated with our

00:02:20,709 --> 00:02:27,970
analysis and it's a huge mess you can

00:02:25,810 --> 00:02:30,370
see here that there are 30 different

00:02:27,970 --> 00:02:32,590
data files and there are seven and

00:02:30,370 --> 00:02:35,019
Python analysis groups which have an

00:02:32,590 --> 00:02:36,519
incomprehensible naming structure sure

00:02:35,019 --> 00:02:38,170
it made sense at the time that I did

00:02:36,519 --> 00:02:41,920
this analysis that I've got no idea what

00:02:38,170 --> 00:02:44,680
it means right now so let's open up what

00:02:41,920 --> 00:02:47,319
looks to be the most recent file the

00:02:44,680 --> 00:02:50,290
very helpfully named life expectancy

00:02:47,319 --> 00:02:52,629
script final three final with the foot

00:02:50,290 --> 00:02:55,780
the second final in capitals for good

00:02:52,629 --> 00:02:59,019
measure so there's not really a lot of

00:02:55,780 --> 00:03:01,780
pointers here as to what I actually did

00:02:59,019 --> 00:03:03,879
why i chose the data i chose and it

00:03:01,780 --> 00:03:06,700
makes it really hard to pick up where I

00:03:03,879 --> 00:03:09,239
left off and actually be sure that I'm

00:03:06,700 --> 00:03:11,470
building on the research I did earlier

00:03:09,239 --> 00:03:13,329
so in order to convert this piece of

00:03:11,470 --> 00:03:15,190
irreproducible research into something

00:03:13,329 --> 00:03:20,319
reproducible we need to be able to

00:03:15,190 --> 00:03:23,919
answer five questions what did i do why

00:03:20,319 --> 00:03:27,129
did I do it how did I set it up at the

00:03:23,919 --> 00:03:30,819
time I did the analysis when did I make

00:03:27,129 --> 00:03:33,849
changes and what were they and of course

00:03:30,819 --> 00:03:35,560
a very important step in kind of modern

00:03:33,849 --> 00:03:37,629
science who needs to be able to access

00:03:35,560 --> 00:03:40,959
it and how can I get it to them in a

00:03:37,629 --> 00:03:42,819
really easy manner so to give a bit of

00:03:40,959 --> 00:03:45,010
background for this talk I'll be using a

00:03:42,819 --> 00:03:47,590
very simple example analysis so I

00:03:45,010 --> 00:03:50,340
predicted the average life expectancy in

00:03:47,590 --> 00:03:52,449
around 150 who member states using

00:03:50,340 --> 00:03:54,669
publicly available data from the who

00:03:52,449 --> 00:03:56,230
website and I've used a lassie

00:03:54,669 --> 00:03:57,459
regression approach there's a few

00:03:56,230 --> 00:04:00,190
different predictors in this model

00:03:57,459 --> 00:04:03,190
including chronic and infectious disease

00:04:00,190 --> 00:04:06,430
prevalence death rates by violent crime

00:04:03,190 --> 00:04:10,540
access to clean water and sanitation so

00:04:06,430 --> 00:04:12,129
really cheery topic but something that

00:04:10,540 --> 00:04:14,260
makes us a really nice case study for

00:04:12,129 --> 00:04:16,209
reproducibility is that each of the

00:04:14,260 --> 00:04:18,549
variables need to be downloaded from

00:04:16,209 --> 00:04:20,590
separate sources loaded into panda's

00:04:18,549 --> 00:04:23,020
data frames and then cleaned before they

00:04:20,590 --> 00:04:23,620
merged into the full data file that you

00:04:23,020 --> 00:04:25,810
can use

00:04:23,620 --> 00:04:28,750
analysis so it makes it a really nice

00:04:25,810 --> 00:04:30,310
case study or something that needs clear

00:04:28,750 --> 00:04:34,660
reproducibility to be able to build

00:04:30,310 --> 00:04:36,699
again so let's jump into how to convert

00:04:34,660 --> 00:04:38,500
your reproducible analysis into

00:04:36,699 --> 00:04:42,880
something reproducible by answering our

00:04:38,500 --> 00:04:44,650
first question what did I do so one of

00:04:42,880 --> 00:04:46,750
the first things that can trip you up is

00:04:44,650 --> 00:04:49,960
working out where you got your data from

00:04:46,750 --> 00:04:51,100
so you can see from this gif that there

00:04:49,960 --> 00:04:53,199
is a lot of different steps in

00:04:51,100 --> 00:04:54,940
downloading data manually that are

00:04:53,199 --> 00:04:56,740
difficult to document and you can easily

00:04:54,940 --> 00:04:58,660
forget them when you come back to your

00:04:56,740 --> 00:05:00,789
analysis since there's quite a lot of

00:04:58,660 --> 00:05:04,630
different data sources even available on

00:05:00,789 --> 00:05:06,729
that one page so the best way to get

00:05:04,630 --> 00:05:09,250
around this in Python is to include the

00:05:06,729 --> 00:05:10,750
data download as part of your script so

00:05:09,250 --> 00:05:13,419
you can see here in this script at the

00:05:10,750 --> 00:05:17,440
top I've used the pandas function read

00:05:13,419 --> 00:05:19,360
CSV to get the Python get pathan to read

00:05:17,440 --> 00:05:21,190
in the exact URL that I want there's no

00:05:19,360 --> 00:05:22,810
ambiguity about the exact data source

00:05:21,190 --> 00:05:25,780
when I come back to doing my analysis

00:05:22,810 --> 00:05:28,900
later so similarly if you're using

00:05:25,780 --> 00:05:30,580
sequel to say get your data you can

00:05:28,900 --> 00:05:32,470
include your sequel query with your

00:05:30,580 --> 00:05:33,940
Python scripts or if you're using

00:05:32,470 --> 00:05:35,289
something like my sequel there's

00:05:33,940 --> 00:05:38,050
actually a package that allows you to

00:05:35,289 --> 00:05:42,190
run your sequel query directly from your

00:05:38,050 --> 00:05:43,960
poison script another trifle

00:05:42,190 --> 00:05:46,139
reproducibility is editing data by hand

00:05:43,960 --> 00:05:48,250
and I know it's really tempting

00:05:46,139 --> 00:05:49,599
particularly when it's small and you

00:05:48,250 --> 00:05:52,380
convince yourself oh let me do it once

00:05:49,599 --> 00:05:54,580
it's never just once we all know that

00:05:52,380 --> 00:05:55,720
but it's really really difficult to

00:05:54,580 --> 00:05:58,060
document probably one of the hardest

00:05:55,720 --> 00:06:00,460
things to document properly so you can

00:05:58,060 --> 00:06:03,340
see in this gif it's quite a few steps /

00:06:00,460 --> 00:06:05,349
needed to take to reduce this messy data

00:06:03,340 --> 00:06:07,900
set down to the clean form that I need

00:06:05,349 --> 00:06:10,120
for my analysis so I'm doing things like

00:06:07,900 --> 00:06:11,800
getting rid of rows and columns not

00:06:10,120 --> 00:06:14,020
documenting which ones are kept and

00:06:11,800 --> 00:06:15,729
naming them with names that don't

00:06:14,020 --> 00:06:19,930
actually tie back to the original data

00:06:15,729 --> 00:06:22,900
set so the obvious solution for this is

00:06:19,930 --> 00:06:24,970
to script any data manipulations and of

00:06:22,900 --> 00:06:27,340
course pandas has been mentioned a lot

00:06:24,970 --> 00:06:28,750
in talks throughout the conference it's

00:06:27,340 --> 00:06:30,970
a really wonderful package for data

00:06:28,750 --> 00:06:33,490
manipulation and it makes it pretty

00:06:30,970 --> 00:06:36,650
straightforward to do all the standard

00:06:33,490 --> 00:06:39,350
tasks like subsetting cleaning variables

00:06:36,650 --> 00:06:41,090
so you can see in this script written a

00:06:39,350 --> 00:06:44,060
function that keeps a subset of columns

00:06:41,090 --> 00:06:45,979
keeps a subset of rows and also cleans

00:06:44,060 --> 00:06:49,130
up any string columns that contain extra

00:06:45,979 --> 00:06:50,389
characters by stripping them out and

00:06:49,130 --> 00:06:53,389
converting the whole thing into a

00:06:50,389 --> 00:06:55,130
numeric so now that this is scripted we

00:06:53,389 --> 00:06:56,750
had a really clear record of what we did

00:06:55,130 --> 00:06:59,030
so we know when we come back later and

00:06:56,750 --> 00:07:01,250
it also makes it really quick and really

00:06:59,030 --> 00:07:03,050
easy to do it again and most importantly

00:07:01,250 --> 00:07:07,090
for other people to be able to do it who

00:07:03,050 --> 00:07:09,440
are not familiar with our analysis and

00:07:07,090 --> 00:07:12,229
finally I think we've all been guilty of

00:07:09,440 --> 00:07:15,289
leaving exploratory code that we didn't

00:07:12,229 --> 00:07:16,940
end up using ennis groups it's really

00:07:15,289 --> 00:07:18,710
kind of a pain when you get to the end

00:07:16,940 --> 00:07:20,300
of an analysis and have to clean up your

00:07:18,710 --> 00:07:21,830
scripts take a leave you're under a lot

00:07:20,300 --> 00:07:24,590
of time pressure like we all are

00:07:21,830 --> 00:07:26,419
ticularly at work but failing to do so

00:07:24,590 --> 00:07:28,430
means it's super confusing when you come

00:07:26,419 --> 00:07:31,970
back and you need to replicate what you

00:07:28,430 --> 00:07:34,669
did so for an example in this analysis I

00:07:31,970 --> 00:07:38,539
tried to regression approaches a ridge

00:07:34,669 --> 00:07:40,039
regression and a lousy regression and in

00:07:38,539 --> 00:07:42,620
my untidy script it makes it really

00:07:40,039 --> 00:07:46,099
confusing to know which regression model

00:07:42,620 --> 00:07:48,650
i actually used as my final approach so

00:07:46,099 --> 00:07:51,590
the obvious solution is a very boring

00:07:48,650 --> 00:07:53,330
one but you need to leave behind a tidy

00:07:51,590 --> 00:07:55,310
script like cleaning house when you

00:07:53,330 --> 00:07:58,130
finish your analysis leave only the

00:07:55,310 --> 00:07:59,780
analysis in that report in that script

00:07:58,130 --> 00:08:04,070
that you use for your final report or

00:07:59,780 --> 00:08:06,229
whatever your final outcome is okay so

00:08:04,070 --> 00:08:08,330
now that we understand the Watts need a

00:08:06,229 --> 00:08:12,409
document why we did what we did in our

00:08:08,330 --> 00:08:14,000
analysis so as we all know there's a

00:08:12,409 --> 00:08:15,620
whole bunch of decisions and assumptions

00:08:14,000 --> 00:08:17,900
you make when you're doing an analysis

00:08:15,620 --> 00:08:20,330
that you'll never remember when you're

00:08:17,900 --> 00:08:21,560
not in the midst of that project so what

00:08:20,330 --> 00:08:26,289
sort of things that you're not likely to

00:08:21,560 --> 00:08:28,639
remember later why did I use these data

00:08:26,289 --> 00:08:32,120
why did I pick these specific data

00:08:28,639 --> 00:08:34,940
transformations why did I use this

00:08:32,120 --> 00:08:36,529
modeling approach and most importantly

00:08:34,940 --> 00:08:40,820
what question was I even trying to

00:08:36,529 --> 00:08:42,589
answer in the first place so one way we

00:08:40,820 --> 00:08:44,779
can document this is writing comments in

00:08:42,589 --> 00:08:47,089
code obviously so it gets the job done

00:08:44,779 --> 00:08:48,920
but it's quite difficult to read so you

00:08:47,089 --> 00:08:50,510
can see here as I told you there's a

00:08:48,920 --> 00:08:52,490
bunch of different data sets that you

00:08:50,510 --> 00:08:54,920
for this analysis what I've tried to do

00:08:52,490 --> 00:08:56,930
is document where I got them from and

00:08:54,920 --> 00:09:01,820
what subset I've kept in each but it's

00:08:56,930 --> 00:09:03,350
pretty hard to digest that so the

00:09:01,820 --> 00:09:06,380
solution to this is an approach called

00:09:03,350 --> 00:09:07,910
literate programming and it's designed

00:09:06,380 --> 00:09:10,430
to get this around this limitation of

00:09:07,910 --> 00:09:13,550
comments so again from this quote

00:09:10,430 --> 00:09:15,920
illiterate program is an explanation of

00:09:13,550 --> 00:09:18,860
program logic in natural code in our

00:09:15,920 --> 00:09:20,540
case English which is interspersed with

00:09:18,860 --> 00:09:25,220
snippets of source code in our case

00:09:20,540 --> 00:09:27,890
Python so as many of you would know from

00:09:25,220 --> 00:09:29,540
this conference or your own work Jupiter

00:09:27,890 --> 00:09:31,970
notebooks offer a really nice way of

00:09:29,540 --> 00:09:35,420
implementing literate statistical

00:09:31,970 --> 00:09:37,910
programs in Python so just to give an

00:09:35,420 --> 00:09:40,970
overview of you although pretty sure one

00:09:37,910 --> 00:09:42,740
knows what they are at this point juven

00:09:40,970 --> 00:09:44,570
our notebooks are documents that run in

00:09:42,740 --> 00:09:47,150
your browser and they're really flexible

00:09:44,570 --> 00:09:49,370
so as well as allowing you to include

00:09:47,150 --> 00:09:51,080
into and interactively run chunks of

00:09:49,370 --> 00:09:54,550
Python code you can include things like

00:09:51,080 --> 00:09:56,960
images tables and dynamic visualizations

00:09:54,550 --> 00:09:59,000
for those of you who were here on Friday

00:09:56,960 --> 00:10:00,920
there was some really nice interactive

00:09:59,000 --> 00:10:06,800
visualizations running Python in plot

00:10:00,920 --> 00:10:08,810
lee so you can see here an excerpt of a

00:10:06,800 --> 00:10:12,080
jupiter notebook i created for this life

00:10:08,810 --> 00:10:14,420
expectancy analysis so at the top is a

00:10:12,080 --> 00:10:16,580
chunk of human readable code in markdown

00:10:14,420 --> 00:10:18,920
and because it's in markdown we've been

00:10:16,580 --> 00:10:20,390
able to exploit formatting features like

00:10:18,920 --> 00:10:23,120
titles and bullets that make it really

00:10:20,390 --> 00:10:25,430
clear what we've done and then at the

00:10:23,120 --> 00:10:31,280
bottom is the accompanying code that

00:10:25,430 --> 00:10:33,320
actually goes with that explanation so

00:10:31,280 --> 00:10:36,380
revisiting our data downloading com

00:10:33,320 --> 00:10:39,290
example let's compare side-by-side how

00:10:36,380 --> 00:10:41,900
comments look on the left with Jupiter

00:10:39,290 --> 00:10:43,970
notebook on the right so you can see on

00:10:41,900 --> 00:10:46,520
the right what I've been able to do is

00:10:43,970 --> 00:10:49,660
explain where I got data from in a nice

00:10:46,520 --> 00:10:52,550
easy to digest and then at the bottom

00:10:49,660 --> 00:10:54,320
use the formatting features that allow

00:10:52,550 --> 00:10:56,330
you to do a table to list all the

00:10:54,320 --> 00:10:58,570
variables in a really easy to read

00:10:56,330 --> 00:10:58,570
format

00:10:59,000 --> 00:11:03,800
okay so now we've documented what we did

00:11:01,310 --> 00:11:06,110
and why we did it when we come back to

00:11:03,800 --> 00:11:08,420
it later now we need to work out how we

00:11:06,110 --> 00:11:09,830
get around our next trap not remembering

00:11:08,420 --> 00:11:13,250
how we set up our environment when we

00:11:09,830 --> 00:11:15,680
ran the analysis all right so six months

00:11:13,250 --> 00:11:18,980
ago we system installed our packages to

00:11:15,680 --> 00:11:20,480
run our analysis at the time we

00:11:18,980 --> 00:11:24,170
installed the most up-to-date versions

00:11:20,480 --> 00:11:25,970
of numpy pandas and map gottlieb we ran

00:11:24,170 --> 00:11:29,090
our analysis using these and everything

00:11:25,970 --> 00:11:30,920
worked beautifully so now we come back

00:11:29,090 --> 00:11:33,200
to this analysis six months later and

00:11:30,920 --> 00:11:34,670
things have moved on with all three

00:11:33,200 --> 00:11:37,820
packages they're all now it's different

00:11:34,670 --> 00:11:40,460
versions so what happens when we go to

00:11:37,820 --> 00:11:43,820
run our analysis using these different

00:11:40,460 --> 00:11:45,110
versions of the same package well

00:11:43,820 --> 00:11:47,990
depending on the changes that have been

00:11:45,110 --> 00:11:50,030
made between our versions ok code may

00:11:47,990 --> 00:11:52,280
not produce the same results or it may

00:11:50,030 --> 00:11:57,590
not run at all I think we all know this

00:11:52,280 --> 00:11:59,840
field so luckily as always lifan has a

00:11:57,590 --> 00:12:02,540
very easy and elegant solution called

00:11:59,840 --> 00:12:04,610
virtual limbs so the way to think of

00:12:02,540 --> 00:12:06,410
virtual labs is essentially being just

00:12:04,610 --> 00:12:08,660
like your global environment instead of

00:12:06,410 --> 00:12:10,220
just having one that affects all Python

00:12:08,660 --> 00:12:13,640
code that you run on your machine you

00:12:10,220 --> 00:12:15,650
have many they're disposable and they're

00:12:13,640 --> 00:12:18,680
isolated from each other and also from

00:12:15,650 --> 00:12:20,210
the global environment so you can see

00:12:18,680 --> 00:12:21,800
how useful virtual names are when you

00:12:20,210 --> 00:12:23,450
have multiple projects running that use

00:12:21,800 --> 00:12:24,980
different versions of the same package

00:12:23,450 --> 00:12:26,780
because it means that you don't need to

00:12:24,980 --> 00:12:28,490
mess around in the global environment

00:12:26,780 --> 00:12:30,440
trying to downgrade or change the

00:12:28,490 --> 00:12:34,190
versions of packages when you're trying

00:12:30,440 --> 00:12:36,080
to run the next analysis so I have heard

00:12:34,190 --> 00:12:38,000
that virtual ms have a bit of a bad

00:12:36,080 --> 00:12:40,310
reputation when you try and run them

00:12:38,000 --> 00:12:42,140
directly from terminal they're really

00:12:40,310 --> 00:12:44,990
apparently bit of a pain in the butt to

00:12:42,140 --> 00:12:46,940
implement but if you use this thing

00:12:44,990 --> 00:12:49,700
called wrappers over the top of your

00:12:46,940 --> 00:12:50,570
terminal it makes it really easy so I

00:12:49,700 --> 00:12:52,700
just want to give you a quick

00:12:50,570 --> 00:12:54,230
demonstration of how easy it is to set

00:12:52,700 --> 00:12:56,510
up virtual and using my shell

00:12:54,230 --> 00:12:58,280
interpreter which is fish and its

00:12:56,510 --> 00:12:59,780
associated rapper virtual him and I'm

00:12:58,280 --> 00:13:03,290
not doing a live demo because I was too

00:12:59,780 --> 00:13:05,300
scared so we have a diff so to

00:13:03,290 --> 00:13:07,880
initialize the virtual m you simply type

00:13:05,300 --> 00:13:09,690
BF new and the name of the virtual one

00:13:07,880 --> 00:13:12,240
in my case cats

00:13:09,690 --> 00:13:14,280
so you can stay see I'm installing all

00:13:12,240 --> 00:13:16,920
the packages using pip just as I would

00:13:14,280 --> 00:13:20,400
in the virtual environment and it really

00:13:16,920 --> 00:13:24,660
is just that easy so just late for that

00:13:20,400 --> 00:13:25,860
to all install this is the all good

00:13:24,660 --> 00:13:29,600
thing about not doing that live demo

00:13:25,860 --> 00:13:29,600
understand here while big issues running

00:13:31,580 --> 00:13:37,050
fantastic and when we do people East you

00:13:35,280 --> 00:13:40,620
can see that they're all there listed

00:13:37,050 --> 00:13:42,270
with the most up-to-date versions so my

00:13:40,620 --> 00:13:44,790
understanding is I'm not an anaconda

00:13:42,270 --> 00:13:48,480
user but anaconda also has its own

00:13:44,790 --> 00:13:50,310
virtual and implementation it looks like

00:13:48,480 --> 00:13:51,900
it's also very easy to implement so if

00:13:50,310 --> 00:13:54,000
you're a the Condor user and you're not

00:13:51,900 --> 00:13:55,590
using virtual ms I'd recommend reading

00:13:54,000 --> 00:13:58,640
up on how to do it because the benefits

00:13:55,590 --> 00:14:01,590
are really enormous for reproducibility

00:13:58,640 --> 00:14:03,750
okay so of course virtual lambs work

00:14:01,590 --> 00:14:05,790
super well when you're running the

00:14:03,750 --> 00:14:07,200
analysis on your own machine but what

00:14:05,790 --> 00:14:08,670
happens when you're using a different

00:14:07,200 --> 00:14:11,430
computer or you want to share your

00:14:08,670 --> 00:14:13,050
analysis on with someone else well it's

00:14:11,430 --> 00:14:14,520
really simple to bundle up the contents

00:14:13,050 --> 00:14:16,860
of your virtual am using a process

00:14:14,520 --> 00:14:18,840
called freezing and you can see there on

00:14:16,860 --> 00:14:21,420
the left what I've done is just simply

00:14:18,840 --> 00:14:23,370
typed pip freeze and assign the contents

00:14:21,420 --> 00:14:26,040
of my virtual em to a text file called

00:14:23,370 --> 00:14:28,710
cats requirements and you can see that

00:14:26,040 --> 00:14:30,240
there so it's just a text file it's

00:14:28,710 --> 00:14:32,160
really easy to store with all of your

00:14:30,240 --> 00:14:34,860
analyses and we'll talk about using

00:14:32,160 --> 00:14:39,810
tools such as github to track of all of

00:14:34,860 --> 00:14:41,640
your code and all you need to do when

00:14:39,810 --> 00:14:43,680
you need to recreate this analysis is

00:14:41,640 --> 00:14:46,290
pop the contents of that frozen virtual

00:14:43,680 --> 00:14:50,940
em in a fresh virtual em and bam it's

00:14:46,290 --> 00:14:53,460
just ready to go it's really easy okay

00:14:50,940 --> 00:14:55,860
so in the process of creating this

00:14:53,460 --> 00:14:57,660
lovely clean well-documented script

00:14:55,860 --> 00:14:59,550
we've obviously created a lot of code

00:14:57,660 --> 00:15:01,110
and we don't need a lot of it but we

00:14:59,550 --> 00:15:02,790
might want to keep track of what changes

00:15:01,110 --> 00:15:04,470
we've made or keep track of snippets

00:15:02,790 --> 00:15:07,170
that we think will be useful for later

00:15:04,470 --> 00:15:09,180
but we don't want in our final script so

00:15:07,170 --> 00:15:12,990
how do we keep track of this in a nice

00:15:09,180 --> 00:15:14,850
clean reproducible way so as I showed

00:15:12,990 --> 00:15:17,220
you at the beginning of the talk keeping

00:15:14,850 --> 00:15:18,750
track of changes can be really messy so

00:15:17,220 --> 00:15:21,420
as I said I've got seven different

00:15:18,750 --> 00:15:24,240
versions of the same file

00:15:21,420 --> 00:15:28,170
and I really don't know which is the

00:15:24,240 --> 00:15:29,730
right piece I don't really know like how

00:15:28,170 --> 00:15:31,560
to keep track of it's a code I've

00:15:29,730 --> 00:15:35,010
written what's useful what I want to use

00:15:31,560 --> 00:15:37,380
later so fortunately there's a better

00:15:35,010 --> 00:15:39,240
way with a version control system called

00:15:37,380 --> 00:15:41,550
get and get has an asterisk there

00:15:39,240 --> 00:15:43,170
because it's simply the version control

00:15:41,550 --> 00:15:45,870
system I'm most familiar with I

00:15:43,170 --> 00:15:48,390
understand a lot of Python users also

00:15:45,870 --> 00:15:51,510
use mercurial also valid choice it all

00:15:48,390 --> 00:15:53,460
works in a very similar way so what get

00:15:51,510 --> 00:15:55,020
does is it allows you to take snapshots

00:15:53,460 --> 00:15:57,300
of your code at different points in time

00:15:55,020 --> 00:15:58,590
and then allows you to compare changes

00:15:57,300 --> 00:16:00,390
you've made between different versions

00:15:58,590 --> 00:16:03,930
or go back to earlier versions if need

00:16:00,390 --> 00:16:06,600
be so to illustrate this let's have a

00:16:03,930 --> 00:16:09,390
little diagram so we have the current

00:16:06,600 --> 00:16:11,790
version of our working script what we do

00:16:09,390 --> 00:16:15,600
we get is we commit these changes to a

00:16:11,790 --> 00:16:17,070
local repo or repository and this is

00:16:15,600 --> 00:16:18,630
essentially just a special type of

00:16:17,070 --> 00:16:21,180
folder that keeps track of changes that

00:16:18,630 --> 00:16:24,180
you make to your script we can also push

00:16:21,180 --> 00:16:25,950
this version to remote repo in order to

00:16:24,180 --> 00:16:27,750
make sharing with others easier later

00:16:25,950 --> 00:16:31,170
but I'll cover that in the next section

00:16:27,750 --> 00:16:34,530
of the talk so okay we get back to our

00:16:31,170 --> 00:16:36,480
script and we make some changes when we

00:16:34,530 --> 00:16:40,860
can met this version to our local repo

00:16:36,480 --> 00:16:42,420
and subsequently to our remote repo you

00:16:40,860 --> 00:16:46,140
can see them instead of overriding the

00:16:42,420 --> 00:16:48,600
old version keep get treats the current

00:16:46,140 --> 00:16:50,310
commit as the latest version but keeps

00:16:48,600 --> 00:16:54,030
track of the previous changes that have

00:16:50,310 --> 00:16:56,280
been made so let's have a look at how

00:16:54,030 --> 00:16:58,470
this looks in an analysis so for the

00:16:56,280 --> 00:17:00,690
life expectancy analysis I made three

00:16:58,470 --> 00:17:02,370
commits and I really should admit this

00:17:00,690 --> 00:17:03,990
is far for your commitment than I should

00:17:02,370 --> 00:17:06,810
have made it was not very good practice

00:17:03,990 --> 00:17:08,400
on my part and you can see them with

00:17:06,810 --> 00:17:11,580
each of those commits are being able to

00:17:08,400 --> 00:17:12,720
make a meaningful message in my case the

00:17:11,580 --> 00:17:15,390
messages were not particularly

00:17:12,720 --> 00:17:17,610
meaningful started the script finish the

00:17:15,390 --> 00:17:19,950
script made some changes but I would

00:17:17,610 --> 00:17:23,150
encourage you to exploit get in a much

00:17:19,950 --> 00:17:26,040
nicer way than I have in this example

00:17:23,150 --> 00:17:28,590
even better you can easily compare what

00:17:26,040 --> 00:17:31,320
changes were made so here on the left

00:17:28,590 --> 00:17:33,810
and with the red is the previous version

00:17:31,320 --> 00:17:34,590
of the Jupiter notebook and on the right

00:17:33,810 --> 00:17:36,809
is the current

00:17:34,590 --> 00:17:38,370
so in the previous version we hadn't

00:17:36,809 --> 00:17:40,679
filled in the introductory text

00:17:38,370 --> 00:17:42,570
explaining what the analysis was in the

00:17:40,679 --> 00:17:44,130
version on the right we filled that in

00:17:42,570 --> 00:17:47,549
and gets just demonstrating the

00:17:44,130 --> 00:17:49,470
difference between those so I should

00:17:47,549 --> 00:17:51,000
also say that it doesn't just apply to

00:17:49,470 --> 00:17:54,840
mark down text this keeps track of

00:17:51,000 --> 00:17:56,970
changes in code as well so we now get to

00:17:54,840 --> 00:17:59,429
our final step who needs to access our

00:17:56,970 --> 00:18:02,400
analysis and how can we easily get it to

00:17:59,429 --> 00:18:04,380
them so the traditional method of

00:18:02,400 --> 00:18:08,909
sharing documents that I used to use

00:18:04,380 --> 00:18:10,950
back in my academic job is involving

00:18:08,909 --> 00:18:13,080
attaching a word document or code files

00:18:10,950 --> 00:18:14,580
to an email sending it to relevant

00:18:13,080 --> 00:18:16,559
collaborators and waiting them for them

00:18:14,580 --> 00:18:18,480
to send back their changes so if you're

00:18:16,559 --> 00:18:19,799
really lucky what you might get is word

00:18:18,480 --> 00:18:21,809
document with track changes that you can

00:18:19,799 --> 00:18:24,480
merge but otherwise you're manually

00:18:21,809 --> 00:18:27,390
putting in all those changes so not only

00:18:24,480 --> 00:18:29,789
is this really painful but it's also not

00:18:27,390 --> 00:18:34,799
easy to keep track of who made what

00:18:29,789 --> 00:18:38,730
changes and when so of course I have a

00:18:34,799 --> 00:18:40,710
solution for you there is a file sharing

00:18:38,730 --> 00:18:43,799
website called github and it's one of

00:18:40,710 --> 00:18:45,000
many co sharing websites it's just one

00:18:43,799 --> 00:18:47,870
of the most popular and the one that I

00:18:45,000 --> 00:18:50,010
use and what it allows is for

00:18:47,870 --> 00:18:53,580
collaboration between people who are

00:18:50,010 --> 00:18:55,470
working on the same projects so github

00:18:53,580 --> 00:18:57,360
has a bunch of different functions but

00:18:55,470 --> 00:18:59,340
for this talk what I'll talk about is

00:18:57,360 --> 00:19:01,140
how it can be use for simplified and

00:18:59,340 --> 00:19:04,399
more importantly documentable

00:19:01,140 --> 00:19:07,409
collaboration so here we have our

00:19:04,399 --> 00:19:09,409
project remote repo and it contains the

00:19:07,409 --> 00:19:12,570
current version of our analysis script

00:19:09,409 --> 00:19:14,250
so I'm the owner of this repo and I come

00:19:12,570 --> 00:19:16,740
in and I make a change to the script as

00:19:14,250 --> 00:19:19,230
you can see here on the left I commit

00:19:16,740 --> 00:19:22,470
this change and I push it to the remote

00:19:19,230 --> 00:19:24,330
repo as earlier the current analysis

00:19:22,470 --> 00:19:26,610
script is now the one that I've just

00:19:24,330 --> 00:19:28,049
committed but that remote repo is

00:19:26,610 --> 00:19:31,440
keeping track of all the changes that

00:19:28,049 --> 00:19:33,929
have been made now my collaborator comes

00:19:31,440 --> 00:19:37,649
in she clones this remote repo to her

00:19:33,929 --> 00:19:39,899
machine and she makes her own change as

00:19:37,649 --> 00:19:41,159
you can see there on the right so as

00:19:39,899 --> 00:19:43,289
I've given her permission to make

00:19:41,159 --> 00:19:45,120
changes to the repo she can then push

00:19:43,289 --> 00:19:48,150
her changes and have them integrated

00:19:45,120 --> 00:19:49,230
with the script so these

00:19:48,150 --> 00:19:50,790
becomes the current version of the

00:19:49,230 --> 00:19:54,750
analysis script and the two previous

00:19:50,790 --> 00:19:56,820
versions are stored so an important part

00:19:54,750 --> 00:19:57,960
of collaborating using github is that

00:19:56,820 --> 00:20:00,360
the contributions of every author

00:19:57,960 --> 00:20:02,610
attract so this is really useful if

00:20:00,360 --> 00:20:04,020
you've got a collaborator that's made a

00:20:02,610 --> 00:20:05,550
change you've got to no idea what they

00:20:04,020 --> 00:20:07,620
did particularly they're not documenting

00:20:05,550 --> 00:20:09,180
properly you can go to them and say why

00:20:07,620 --> 00:20:11,760
did you make this change and what's up

00:20:09,180 --> 00:20:13,830
with that so you can see the github

00:20:11,760 --> 00:20:16,050
marks really clearly who's contributed

00:20:13,830 --> 00:20:18,390
what so at the bottom we have the latest

00:20:16,050 --> 00:20:21,690
commit that I've made to this project

00:20:18,390 --> 00:20:23,700
and above that the contributor the

00:20:21,690 --> 00:20:27,740
change with my contributor see prieto

00:20:23,700 --> 00:20:30,960
there in the front row Maebh after that

00:20:27,740 --> 00:20:32,460
okay so let's recap everything we've

00:20:30,960 --> 00:20:38,700
covered about reproducible research in

00:20:32,460 --> 00:20:41,280
Python okay so answering what did I do

00:20:38,700 --> 00:20:44,580
with an irreducible approach what we'd

00:20:41,280 --> 00:20:46,350
use is messy untidy in progress scripts

00:20:44,580 --> 00:20:49,140
or a lot of point-and-click steps that

00:20:46,350 --> 00:20:51,540
we can't document with reproducible

00:20:49,140 --> 00:20:53,760
research we use a tidy script and we

00:20:51,540 --> 00:20:57,720
also make sure that we put as much of

00:20:53,760 --> 00:21:00,540
the analysis in code as possible why did

00:20:57,720 --> 00:21:02,400
I do it well in an irreducible research

00:21:00,540 --> 00:21:04,590
project we don't document the thinking

00:21:02,400 --> 00:21:06,180
behind our analysis whereas in

00:21:04,590 --> 00:21:07,800
reproducible research we use tools

00:21:06,180 --> 00:21:09,720
approaches such as literate programming

00:21:07,800 --> 00:21:13,080
and tool such as Jupiter notebook to

00:21:09,720 --> 00:21:15,750
document what we've done how did I set

00:21:13,080 --> 00:21:17,340
it up in an irreducible approach will

00:21:15,750 --> 00:21:19,890
load all of our packages into the global

00:21:17,340 --> 00:21:21,180
environment whereas in a reproducible

00:21:19,890 --> 00:21:23,730
research approach will put them in a

00:21:21,180 --> 00:21:26,000
virtual m and store that store those

00:21:23,730 --> 00:21:28,620
frozen requirements with our analysis

00:21:26,000 --> 00:21:30,180
when did I make the changes with

00:21:28,620 --> 00:21:32,850
irreproducible research will have

00:21:30,180 --> 00:21:35,940
multiple scripts that we don't really

00:21:32,850 --> 00:21:37,290
know what's useful and what's not with

00:21:35,940 --> 00:21:39,630
reproducible research we use version

00:21:37,290 --> 00:21:43,800
control and make sure that we keep track

00:21:39,630 --> 00:21:45,630
of all the changes and the kind of

00:21:43,800 --> 00:21:47,580
optional but extremely important step is

00:21:45,630 --> 00:21:49,500
sharing who needs to access it in

00:21:47,580 --> 00:21:51,420
irreproducible research we may email

00:21:49,500 --> 00:21:54,440
collaborators and manually integrate

00:21:51,420 --> 00:21:57,360
their changes in reproducible research

00:21:54,440 --> 00:21:58,650
will use code sharing websites such as

00:21:57,360 --> 00:21:59,980
github to make sure that we have

00:21:58,650 --> 00:22:01,330
documented

00:21:59,980 --> 00:22:05,250
changes and everything is easily

00:22:01,330 --> 00:22:17,620
integrated so if anyone's taking a photo

00:22:05,250 --> 00:22:19,750
and that's it thank you very much okay

00:22:17,620 --> 00:22:22,510
thank you very much foooddd oh yeah we

00:22:19,750 --> 00:22:25,750
have 10 minutes for questions so Oh 10

00:22:22,510 --> 00:22:27,429
minutes questions haha thank you that

00:22:25,750 --> 00:22:29,620
was a really good talk um I always

00:22:27,429 --> 00:22:31,570
struggle with version control with

00:22:29,620 --> 00:22:33,040
Jupiter notebooks yeah I wanted you have

00:22:31,570 --> 00:22:35,740
any advice do you keep your binary

00:22:33,040 --> 00:22:37,090
inputs and images in when you commit

00:22:35,740 --> 00:22:39,070
order you strip them out or do you only

00:22:37,090 --> 00:22:41,650
use notebooks at the later stages of

00:22:39,070 --> 00:22:43,540
analysis look I don't tend to use

00:22:41,650 --> 00:22:45,370
notebooks for things that require

00:22:43,540 --> 00:22:48,429
anything but code and math down

00:22:45,370 --> 00:22:52,240
generally i do do some blogging with

00:22:48,429 --> 00:22:55,570
Jupiter and I have found that it the way

00:22:52,240 --> 00:22:56,650
it handles images is a bit weird so I

00:22:55,570 --> 00:22:59,730
guess I don't really have any advice

00:22:56,650 --> 00:23:04,030
because it's something kind of a void

00:22:59,730 --> 00:23:06,340
hey I I want to continue that why do you

00:23:04,030 --> 00:23:10,890
struggle with do with your notebooks to

00:23:06,340 --> 00:23:10,890
like to keep them under version control

00:23:19,940 --> 00:23:24,720
okay because in that case you can clear

00:23:22,559 --> 00:23:37,710
the output cells and then commit that

00:23:24,720 --> 00:23:39,830
problem again no great tom thank you I

00:23:37,710 --> 00:23:41,700
imagine there's a number of coders

00:23:39,830 --> 00:23:43,950
programmers in the room who don't

00:23:41,700 --> 00:23:45,840
consider themselves scientists and may

00:23:43,950 --> 00:23:50,399
not know that the special problems that

00:23:45,840 --> 00:23:52,350
researchers have how can programmers who

00:23:50,399 --> 00:23:56,129
work on these version control tools and

00:23:52,350 --> 00:23:58,500
deployment tools improve your life at

00:23:56,129 --> 00:24:00,570
keeping track of this stuff when we

00:23:58,500 --> 00:24:01,950
don't but what special problems are

00:24:00,570 --> 00:24:03,960
there that we need to be aware of and

00:24:01,950 --> 00:24:05,610
haven't resolves them for you so I

00:24:03,960 --> 00:24:08,450
actually think a really good problem

00:24:05,610 --> 00:24:11,220
that's being raised is particularly in I

00:24:08,450 --> 00:24:12,870
think probably neuroscience and ecology

00:24:11,220 --> 00:24:16,139
and areas like that they probably are a

00:24:12,870 --> 00:24:17,639
lot of images that are used I think it's

00:24:16,139 --> 00:24:20,730
really different difficult to keep track

00:24:17,639 --> 00:24:23,970
of changes to images so that's one

00:24:20,730 --> 00:24:26,549
problem i would say another problem is

00:24:23,970 --> 00:24:28,590
was only a problem I think the

00:24:26,549 --> 00:24:30,570
documentation around get in particular

00:24:28,590 --> 00:24:34,919
is actually quite excellent and it's

00:24:30,570 --> 00:24:36,480
very approachable for beginners it does

00:24:34,919 --> 00:24:39,360
get really confusing though I think

00:24:36,480 --> 00:24:40,559
maybe something could be helpful is when

00:24:39,360 --> 00:24:41,789
you're dealing with many people who are

00:24:40,559 --> 00:24:46,350
working on a project and you've got

00:24:41,789 --> 00:24:49,379
problems with clashes like two people

00:24:46,350 --> 00:24:51,509
make a change and they're basically

00:24:49,379 --> 00:24:53,279
incompatible maybe some more advice

00:24:51,509 --> 00:24:56,779
around handling that because I always

00:24:53,279 --> 00:25:04,830
struggle with that to be honest haha

00:24:56,779 --> 00:25:06,629
solver forest I thanks very much

00:25:04,830 --> 00:25:09,539
excellent advice about scripting

00:25:06,629 --> 00:25:13,139
downloads and scripting data cleansing

00:25:09,539 --> 00:25:16,100
the way in reality then you first do a

00:25:13,139 --> 00:25:18,389
manual download and then script it oh

00:25:16,100 --> 00:25:22,110
and the exactly the same with the data

00:25:18,389 --> 00:25:24,960
cleansing so I would I would never do

00:25:22,110 --> 00:25:27,929
data cleansing by hand unless I had no

00:25:24,960 --> 00:25:29,779
choice it's simply because i just cannot

00:25:27,929 --> 00:25:32,479
remember what I've done

00:25:29,779 --> 00:25:34,999
I think there is a case for downloading

00:25:32,479 --> 00:25:38,239
by hand but it's if you expect those

00:25:34,999 --> 00:25:39,830
data to change rapidly so something that

00:25:38,239 --> 00:25:40,820
I kind of forgot to mention is you

00:25:39,830 --> 00:25:43,700
should include the date that you

00:25:40,820 --> 00:25:45,499
downloaded your data because obviously

00:25:43,700 --> 00:25:47,269
data changes but if you need to go to

00:25:45,499 --> 00:25:50,059
replicate exactly what you did you

00:25:47,269 --> 00:25:51,979
should have a snapshot of that data if

00:25:50,059 --> 00:25:55,869
it's on your computer or in a single

00:25:51,979 --> 00:25:55,869
database depending on how big it is

00:25:58,210 --> 00:26:04,940
sorry just to clarify yeah I agreed that

00:26:01,489 --> 00:26:08,330
too we should script it okay that I'm I

00:26:04,940 --> 00:26:10,159
often you busy discovering data yeah so

00:26:08,330 --> 00:26:12,649
you're looking around trying different

00:26:10,159 --> 00:26:15,769
things and then once you find the data

00:26:12,649 --> 00:26:19,039
then script it and similar with data

00:26:15,769 --> 00:26:23,330
cleansing I was wondering because it's

00:26:19,039 --> 00:26:25,489
really hard to do it script it before

00:26:23,330 --> 00:26:27,440
you've actually tried it for ya before

00:26:25,489 --> 00:26:28,729
you know what you've done I think

00:26:27,440 --> 00:26:30,919
there's kind of a difference between

00:26:28,729 --> 00:26:34,369
your in progress groups and your tidy

00:26:30,919 --> 00:26:36,469
scripts so yeah the exploratory stage is

00:26:34,369 --> 00:26:38,330
extremely messy the code looks like crap

00:26:36,469 --> 00:26:40,159
there's just bits of stuff it doesn't

00:26:38,330 --> 00:26:42,769
run and there's stuff that you're never

00:26:40,159 --> 00:26:43,820
going to use so i would probably you

00:26:42,769 --> 00:26:45,529
know if you're playing around and you

00:26:43,820 --> 00:26:47,719
don't intend to reproduce those steps

00:26:45,529 --> 00:26:49,190
that's okay but if you need to know that

00:26:47,719 --> 00:26:51,320
you actually did downloads those things

00:26:49,190 --> 00:26:53,629
I'd probably recommend scripting it and

00:26:51,320 --> 00:26:54,799
then deleting it that have committed

00:26:53,629 --> 00:26:59,809
that you downloaded as part of your

00:26:54,799 --> 00:27:01,969
version control um so I think things you

00:26:59,809 --> 00:27:03,499
talk sorry i came in late so i'm

00:27:01,969 --> 00:27:06,889
probably going to ask something that's

00:27:03,499 --> 00:27:09,169
already been covered in the talk but it

00:27:06,889 --> 00:27:13,039
seems like i'm especially in the last

00:27:09,169 --> 00:27:16,519
slide it leaves the process sort of

00:27:13,039 --> 00:27:20,200
halfway so then there's there's follow

00:27:16,519 --> 00:27:23,599
up so after that there's things like

00:27:20,200 --> 00:27:27,859
publication peer review and reuse so

00:27:23,599 --> 00:27:32,899
just wondering is there some quality bar

00:27:27,859 --> 00:27:36,019
that things like jupiter notebooks etc i

00:27:32,899 --> 00:27:38,839
need to to be able to reach in order to

00:27:36,019 --> 00:27:41,269
be reusable by other projects and how do

00:27:38,839 --> 00:27:42,210
you get over that sort of hurdle of Sir

00:27:41,269 --> 00:27:45,220
of

00:27:42,210 --> 00:27:47,230
reproducibility versus I need to clean

00:27:45,220 --> 00:27:48,880
up my script so that it's usable by

00:27:47,230 --> 00:27:50,860
somebody else and now it's not what I

00:27:48,880 --> 00:27:53,980
actually ran when I ran the experiment

00:27:50,860 --> 00:27:55,630
in the first place so I think there's a

00:27:53,980 --> 00:27:59,200
couple of questions there one's about

00:27:55,630 --> 00:28:01,090
the code that you used by understand

00:27:59,200 --> 00:28:02,860
quickly so about the actual things that

00:28:01,090 --> 00:28:04,810
you did during your analysis and one is

00:28:02,860 --> 00:28:08,730
about using things like Jupiter notebook

00:28:04,810 --> 00:28:18,640
and pushing them and say journal formats

00:28:08,730 --> 00:28:20,560
that right yes I'm just I'm assuming

00:28:18,640 --> 00:28:23,680
that the research is part of a chain

00:28:20,560 --> 00:28:26,530
where a lot of it actually gets passed

00:28:23,680 --> 00:28:28,810
on to either the next research group or

00:28:26,530 --> 00:28:31,660
the next university or somebody who

00:28:28,810 --> 00:28:34,120
doesn't necessarily have have you no

00:28:31,660 --> 00:28:36,910
human contact with you and so everything

00:28:34,120 --> 00:28:39,400
has to be explained in the documents and

00:28:36,910 --> 00:28:42,370
and therefore and especially with

00:28:39,400 --> 00:28:45,280
respect to peer review everything have

00:28:42,370 --> 00:28:47,620
you all of your methodology is now not

00:28:45,280 --> 00:28:50,290
in a methods paragraph at the end of

00:28:47,620 --> 00:28:53,410
your text but is actually in these extra

00:28:50,290 --> 00:28:55,540
documents that that publishers are still

00:28:53,410 --> 00:28:58,930
finding novel and aren't necessarily

00:28:55,540 --> 00:29:00,580
able to help with you so do you have any

00:28:58,930 --> 00:29:02,920
strategies for coping with all of that

00:29:00,580 --> 00:29:05,170
sort of stuff you know refactoring

00:29:02,920 --> 00:29:07,390
making things presentable and still

00:29:05,170 --> 00:29:10,870
making it actually representing the

00:29:07,390 --> 00:29:12,730
research that you actually did so full

00:29:10,870 --> 00:29:14,470
confession I really only started doing

00:29:12,730 --> 00:29:18,160
reproducible analysis after I left

00:29:14,470 --> 00:29:20,500
academia so my academic practices were

00:29:18,160 --> 00:29:21,940
pretty much textbook terrible that's how

00:29:20,500 --> 00:29:26,920
it was so easy for me to produce the

00:29:21,940 --> 00:29:30,820
irreproducible examples i guess probably

00:29:26,920 --> 00:29:33,070
i would say that there's a difference

00:29:30,820 --> 00:29:34,870
between like each each document needs to

00:29:33,070 --> 00:29:36,310
be built for the purpose so there's a

00:29:34,870 --> 00:29:38,290
difference between the scripts that you

00:29:36,310 --> 00:29:40,180
would pass on to another research group

00:29:38,290 --> 00:29:43,090
compared to what you'd pass on to

00:29:40,180 --> 00:29:45,340
journals and i would say probably

00:29:43,090 --> 00:29:48,040
designing the script for the purpose as

00:29:45,340 --> 00:29:50,260
much detail as needs to be known in

00:29:48,040 --> 00:29:52,450
order to reproduce it but nothing that's

00:29:50,260 --> 00:29:53,740
in there that's confusing so you could

00:29:52,450 --> 00:29:55,120
say if you've tried out a bunch of

00:29:53,740 --> 00:29:55,510
different approaches and you know

00:29:55,120 --> 00:29:57,190
they're going to

00:29:55,510 --> 00:29:58,660
I asked you about it I don't think you

00:29:57,190 --> 00:30:02,620
put that in code I think you mentioned

00:29:58,660 --> 00:30:05,830
that in the text but you know that's I

00:30:02,620 --> 00:30:07,960
think probably a subjective thing in

00:30:05,830 --> 00:30:10,180
terms of Jupiter notebooks and journal

00:30:07,960 --> 00:30:13,300
outputs I've got no idea of like in

00:30:10,180 --> 00:30:16,990
terms of whether you can convert panda

00:30:13,300 --> 00:30:20,770
can convert it okay cool looks like

00:30:16,990 --> 00:30:24,250
there's a solution hey thanks for the

00:30:20,770 --> 00:30:26,620
talk do you have any advice on the

00:30:24,250 --> 00:30:30,070
change management rather changing the

00:30:26,620 --> 00:30:32,440
culture of the organization some of

00:30:30,070 --> 00:30:36,280
probably something that you faced at

00:30:32,440 --> 00:30:38,530
what steps you took to move away from a

00:30:36,280 --> 00:30:42,550
culture of just hacking together some

00:30:38,530 --> 00:30:44,380
code into actually building a

00:30:42,550 --> 00:30:46,150
reproducible in what reproducible

00:30:44,380 --> 00:30:47,920
research environment but this is

00:30:46,150 --> 00:30:50,260
something I'm struggling with yeah so

00:30:47,920 --> 00:30:52,000
need some help with that another full

00:30:50,260 --> 00:30:54,610
confession we're not kind of at this

00:30:52,000 --> 00:30:58,090
point in my workplace either this is the

00:30:54,610 --> 00:31:00,160
ideal I think probably encouraging

00:30:58,090 --> 00:31:03,040
organizations to actually have access to

00:31:00,160 --> 00:31:06,070
private github repos is probably a

00:31:03,040 --> 00:31:08,290
really good first step but I think a big

00:31:06,070 --> 00:31:11,490
part of reproducibility is about

00:31:08,290 --> 00:31:14,230
allowing just that extra time budget

00:31:11,490 --> 00:31:16,480
which you know can be a big ask but

00:31:14,230 --> 00:31:18,940
making sure that they're actually making

00:31:16,480 --> 00:31:21,700
the time to let you go back and tidy

00:31:18,940 --> 00:31:23,440
everything up letting you actually have

00:31:21,700 --> 00:31:25,450
the time to think things through and

00:31:23,440 --> 00:31:28,990
make sure your analysis is thoughtfully

00:31:25,450 --> 00:31:31,960
documented how to get managers to do

00:31:28,990 --> 00:31:35,400
that that is I do have a PhD in

00:31:31,960 --> 00:31:35,400
psychology but that's a mystery to me

00:31:35,490 --> 00:31:40,890
okay ah Thank You Jody thanks more time

00:31:43,860 --> 00:31:45,920

YouTube URL: https://www.youtube.com/watch?v=G3mwNnGu5T4


