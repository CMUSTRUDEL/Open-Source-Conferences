Title: Every Millisecond Counts: Performance & UX
Publication date: 2016-08-16
Playlist: Pycon Australia 2016
Description: 
	Davey Shafik
https://2016.pycon-au.org/schedule/38/view_talk
How do you lose 900 million dollars in 100ms? Or 8 million visits in just 4/10 of a second?

User expectations are higher than ever when it comes to web performance, so much so that we've created an entirely new application architecture just to make it feel like our websites are faster than they actually are.

This talk will look at how we can improve our users experience at any scale through performance optimizations at every layer of the stack, from backend to browser.
Captions: 
	00:00:00,000 --> 00:00:06,120
alright good afternoon everyone welcome

00:00:02,669 --> 00:00:09,630
back so the next speaker is David

00:00:06,120 --> 00:00:11,880
traffic David is a developer works for

00:00:09,630 --> 00:00:14,340
akamai technologies and he's going to

00:00:11,880 --> 00:00:23,100
teach us about performance and user

00:00:14,340 --> 00:00:25,710
experience okay thanks all right so uh

00:00:23,100 --> 00:00:26,960
my name is Davy Shoppach not David my

00:00:25,710 --> 00:00:30,060
mother still calls me David but that's

00:00:26,960 --> 00:00:33,090
none of you are my mother i hope i am a

00:00:30,060 --> 00:00:34,230
developer I'm an author I'm an open

00:00:33,090 --> 00:00:36,570
source contributor I do a lot of open

00:00:34,230 --> 00:00:38,670
source work I am the release manager for

00:00:36,570 --> 00:00:41,070
PHP 71 I did not realize that was a

00:00:38,670 --> 00:00:43,980
three-year commitment when I offered but

00:00:41,070 --> 00:00:48,420
there you go and most importantly i'm at

00:00:43,980 --> 00:00:50,789
dietsch aphek on twitter you may noticed

00:00:48,420 --> 00:00:52,829
my accent is a bit fluid today I am

00:00:50,789 --> 00:00:55,620
British I live in the States and y'all

00:00:52,829 --> 00:00:57,899
will convert me between both so if that

00:00:55,620 --> 00:01:01,559
happens I apologize we'll see what

00:00:57,899 --> 00:01:03,270
happens I do work for akamai we are the

00:01:01,559 --> 00:01:05,100
world's largest CDN we do some really

00:01:03,270 --> 00:01:08,610
cool things check out developer doc my

00:01:05,100 --> 00:01:11,310
calm all right so I always mentioned

00:01:08,610 --> 00:01:12,750
mental health prompt this is a project

00:01:11,310 --> 00:01:13,650
that I helped start which gets people

00:01:12,750 --> 00:01:14,729
talking about mental health and

00:01:13,650 --> 00:01:17,159
technology which is a really really

00:01:14,729 --> 00:01:20,970
serious issue so check out mhm prompt

00:01:17,159 --> 00:01:24,110
org when you get a chance all right

00:01:20,970 --> 00:01:28,049
let's start with why performance matters

00:01:24,110 --> 00:01:30,180
amazon I know they're not as big here as

00:01:28,049 --> 00:01:33,630
they are in the United States but pretty

00:01:30,180 --> 00:01:36,170
a pretty popular store they found that

00:01:33,630 --> 00:01:39,450
they lose one percent of revenue for

00:01:36,170 --> 00:01:44,640
every 100 milliseconds that they run

00:01:39,450 --> 00:01:46,470
slower one percent which means in 2014

00:01:44,640 --> 00:01:50,970
based on revenue they would have lost

00:01:46,470 --> 00:01:54,030
over a billion australian dollars which

00:01:50,970 --> 00:01:56,820
is 16.3 cents for every single person on

00:01:54,030 --> 00:02:01,890
earth or forty nine dollars for every

00:01:56,820 --> 00:02:04,740
Australian citizen that's for every 100

00:02:01,890 --> 00:02:09,479
milliseconds that's kind of a big number

00:02:04,740 --> 00:02:11,730
I like to look at others Google they

00:02:09,479 --> 00:02:13,870
found that being half a second slower

00:02:11,730 --> 00:02:16,180
and they got twenty percent less

00:02:13,870 --> 00:02:23,349
riches twenty percent less engagement

00:02:16,180 --> 00:02:25,480
half a second being very popular two

00:02:23,349 --> 00:02:31,420
seconds slower they lost four point

00:02:25,480 --> 00:02:35,290
three percent revenue per user GQ

00:02:31,420 --> 00:02:36,730
popular magazine they cut load time by

00:02:35,290 --> 00:02:38,940
eighty percent and they found that their

00:02:36,730 --> 00:02:42,430
traffic went up by eighty percent and

00:02:38,940 --> 00:02:44,849
time spent per session was up thirty two

00:02:42,430 --> 00:02:49,540
percent that's that's pretty impressive

00:02:44,849 --> 00:02:51,129
a few others Walmart found that a

00:02:49,540 --> 00:02:53,010
one-second improvement led to a two

00:02:51,129 --> 00:02:55,900
percent increase in conversions so sales

00:02:53,010 --> 00:02:57,819
etsy found that by adding a hundred and

00:02:55,900 --> 00:03:00,370
sixty kilobytes more imagery on their

00:02:57,819 --> 00:03:02,049
mobile site they got a twelve percent

00:03:00,370 --> 00:03:03,549
increase in bounce rate so people coming

00:03:02,049 --> 00:03:08,440
in and leaving immediately twelve

00:03:03,549 --> 00:03:09,730
percent staples big station restore one

00:03:08,440 --> 00:03:12,010
second improvement they found the ten

00:03:09,730 --> 00:03:16,569
percent increase in conversions this is

00:03:12,010 --> 00:03:20,709
why performance matters so conclusion on

00:03:16,569 --> 00:03:22,780
that users can perceive tiny changes in

00:03:20,709 --> 00:03:28,049
performance and it's actually as little

00:03:22,780 --> 00:03:30,370
as 14 milliseconds 14 millisecond and

00:03:28,049 --> 00:03:32,709
slower sites make your customers let's

00:03:30,370 --> 00:03:37,150
happen this is proven time and time and

00:03:32,709 --> 00:03:41,139
time again less happy poor user

00:03:37,150 --> 00:03:43,750
experience now you may have noticed if

00:03:41,139 --> 00:03:46,840
you were paying attention that my slides

00:03:43,750 --> 00:03:51,569
have been getting increasingly slower by

00:03:46,840 --> 00:03:53,680
exactly 100 milliseconds of slide uh I

00:03:51,569 --> 00:03:56,139
noticed that about eight slides in I

00:03:53,680 --> 00:03:57,790
don't know when you caught it but I just

00:03:56,139 --> 00:03:59,430
wanted to prove that 100 milliseconds

00:03:57,790 --> 00:04:01,780
actually is a really long time and

00:03:59,430 --> 00:04:03,459
generally the the thing that we go by is

00:04:01,780 --> 00:04:04,959
ten seconds that's the magic number you

00:04:03,459 --> 00:04:06,849
can get it in under 10 seconds then your

00:04:04,959 --> 00:04:10,690
users you'll keep them you'll be happy

00:04:06,849 --> 00:04:12,459
this is so not true today on mobile

00:04:10,690 --> 00:04:14,379
especially it's not true which is

00:04:12,459 --> 00:04:15,639
ridiculous considering that's the more

00:04:14,379 --> 00:04:18,579
bandwidth constrained application

00:04:15,639 --> 00:04:20,079
alright so ten seconds just forget about

00:04:18,579 --> 00:04:24,580
it you're looking more like three or

00:04:20,079 --> 00:04:26,000
four max so who is responsible for

00:04:24,580 --> 00:04:29,450
performance

00:04:26,000 --> 00:04:31,940
the answer is everybody everybody who

00:04:29,450 --> 00:04:34,910
has a role in producing your web

00:04:31,940 --> 00:04:37,670
experience has a role to play in

00:04:34,910 --> 00:04:40,010
performance that means your designers

00:04:37,670 --> 00:04:42,050
that means your sis admins and DevOps

00:04:40,010 --> 00:04:43,700
people that means you're back in people

00:04:42,050 --> 00:04:47,810
your front-end people and browser

00:04:43,700 --> 00:04:49,280
vendors all of us have a role to play so

00:04:47,810 --> 00:04:51,290
what makes a web page what are we

00:04:49,280 --> 00:04:54,710
looking at typically today when we talk

00:04:51,290 --> 00:04:57,560
about websites sixty-three percent of

00:04:54,710 --> 00:04:59,060
the page weight is generally imagery so

00:04:57,560 --> 00:05:00,350
anything you can do with images to

00:04:59,060 --> 00:05:01,720
increase performance that's where you're

00:05:00,350 --> 00:05:06,140
gonna get the biggest bang for the buck

00:05:01,720 --> 00:05:09,590
next up we have a lot of JavaScript HTML

00:05:06,140 --> 00:05:11,660
not so much CSS fonts that's getting a

00:05:09,590 --> 00:05:12,740
larger I think other not really sure

00:05:11,660 --> 00:05:15,260
what that includes these days but

00:05:12,740 --> 00:05:20,240
imagery is is a huge huge part of page

00:05:15,260 --> 00:05:21,500
way the size of pages is also going up

00:05:20,240 --> 00:05:23,540
there was an article that came out

00:05:21,500 --> 00:05:25,160
probably got three months ago that we've

00:05:23,540 --> 00:05:28,910
now surpassed an average page weight

00:05:25,160 --> 00:05:37,280
larger than the entire binary for doom

00:05:28,910 --> 00:05:41,930
the original doom one more time doom the

00:05:37,280 --> 00:05:43,220
the game Doom yeah so thirty-six percent

00:05:41,930 --> 00:05:45,110
of websites are somewhere between zero

00:05:43,220 --> 00:05:47,479
and one megabytes twenty-eight percent

00:05:45,110 --> 00:05:48,590
are in that larger than doom size it's

00:05:47,479 --> 00:05:51,080
about one and a half makes it fit on the

00:05:48,590 --> 00:05:52,700
floppy remember fifteen percent no still

00:05:51,080 --> 00:05:55,640
like still large number two to three

00:05:52,700 --> 00:05:59,540
megs three percent at eight Meg's like

00:05:55,640 --> 00:06:00,680
that's kind of ridiculous but something

00:05:59,540 --> 00:06:02,870
else that's really really important is

00:06:00,680 --> 00:06:04,460
the number of requests per page have to

00:06:02,870 --> 00:06:05,900
remember that every single resource in a

00:06:04,460 --> 00:06:08,240
page is a separate requests and that has

00:06:05,900 --> 00:06:12,080
overhead and the largest number by far

00:06:08,240 --> 00:06:15,680
is between 51 and 75 requests to load a

00:06:12,080 --> 00:06:20,660
page so even fifteen percent of more

00:06:15,680 --> 00:06:23,479
than 150 there we go alright so if

00:06:20,660 --> 00:06:28,570
you're a designer you have a role to

00:06:23,479 --> 00:06:31,139
play compress your images if you don't

00:06:28,570 --> 00:06:32,849
we'll do it for you

00:06:31,139 --> 00:06:35,370
I'm so glad that's really hard to see

00:06:32,849 --> 00:06:37,650
sometimes on this great if you want

00:06:35,370 --> 00:06:39,990
fidelity in your imagery you are

00:06:37,650 --> 00:06:44,819
responsible for compressing them that

00:06:39,990 --> 00:06:48,719
simple sis admins DevOps people enable

00:06:44,819 --> 00:06:50,819
HTTP to like I can't I can't state that

00:06:48,719 --> 00:06:53,340
enough it's super simple it's complete

00:06:50,819 --> 00:06:55,199
transparent and it will help with that

00:06:53,340 --> 00:06:57,689
overhead of multiple requests that are

00:06:55,199 --> 00:06:59,520
happening for sub resources and you can

00:06:57,689 --> 00:07:03,900
do a lots of other stuff that brings

00:06:59,520 --> 00:07:05,969
with it encryption HTTP two requires TLS

00:07:03,900 --> 00:07:07,740
support or requires two you're less

00:07:05,969 --> 00:07:10,590
sorry to be supportive in all major

00:07:07,740 --> 00:07:13,830
browsers check out let's encrypt org

00:07:10,590 --> 00:07:15,650
completely free search great and they

00:07:13,830 --> 00:07:18,509
are free as in beer their automated

00:07:15,650 --> 00:07:20,969
their securitrons parent they're open

00:07:18,509 --> 00:07:24,930
and you can automate them with scripts

00:07:20,969 --> 00:07:27,270
and sounds great highly recommend it use

00:07:24,930 --> 00:07:29,189
the cloud to scale based on perceived

00:07:27,270 --> 00:07:31,439
performance now a lot of us who've

00:07:29,189 --> 00:07:34,919
looked at the cloud or work in the cloud

00:07:31,439 --> 00:07:36,659
will look at things like CPU usage or

00:07:34,919 --> 00:07:40,050
memory usage and will scale based on

00:07:36,659 --> 00:07:42,629
actual resources that is not always the

00:07:40,050 --> 00:07:44,370
best way to scale we can have resources

00:07:42,629 --> 00:07:47,370
free but because we're hitting say I Oh

00:07:44,370 --> 00:07:49,050
locks or something like that a perceived

00:07:47,370 --> 00:07:51,689
performance is much much less than the

00:07:49,050 --> 00:07:53,610
resources actually tell us so this is

00:07:51,689 --> 00:07:55,169
not i'm not saying to only scale based

00:07:53,610 --> 00:07:56,069
on perceived performance but it's

00:07:55,169 --> 00:07:58,620
another thing you should be adding to

00:07:56,069 --> 00:08:00,469
your toolbox so there's something called

00:07:58,620 --> 00:08:02,580
the speed index which is a metric to

00:08:00,469 --> 00:08:06,960
inform you how fast your page actually

00:08:02,580 --> 00:08:09,389
is being perceived and there is a node

00:08:06,960 --> 00:08:12,270
script everyone can read that I'm sure

00:08:09,389 --> 00:08:15,449
so let's see a little bit of JavaScript

00:08:12,270 --> 00:08:19,139
I apologize so pull in the web page test

00:08:15,449 --> 00:08:21,479
module go ahead and set up a test so

00:08:19,139 --> 00:08:23,669
here I'm going to web page test org but

00:08:21,479 --> 00:08:25,379
in my key that's actually the server

00:08:23,669 --> 00:08:27,120
that's going to be doing the test then I

00:08:25,379 --> 00:08:29,009
want to test my site because why else

00:08:27,120 --> 00:08:31,289
would I put any other slide in here and

00:08:29,009 --> 00:08:33,000
tell it to return the page speed that's

00:08:31,289 --> 00:08:34,919
all I want and then when it's done I'm

00:08:33,000 --> 00:08:36,870
going to call this callback check

00:08:34,919 --> 00:08:39,659
response and I pass in the response now

00:08:36,870 --> 00:08:41,339
what actually you get back is a URL that

00:08:39,659 --> 00:08:42,839
you can ping until you get an actual

00:08:41,339 --> 00:08:44,700
result so it just tells you this is

00:08:42,839 --> 00:08:47,040
where the result is going to be

00:08:44,700 --> 00:08:48,540
and until the test is finished you just

00:08:47,040 --> 00:08:51,480
need to keep pinging you that's what

00:08:48,540 --> 00:08:54,180
this looks like so we do a simple get on

00:08:51,480 --> 00:08:57,600
the report URL and we get all the data

00:08:54,180 --> 00:08:59,460
the way javascript does AC we press is

00:08:57,600 --> 00:09:01,800
kind of yucky essentially you have a

00:08:59,460 --> 00:09:05,160
response data variable you just assign

00:09:01,800 --> 00:09:06,600
stuff as it comes in on the end of the

00:09:05,160 --> 00:09:08,100
request when it finishes this is when we

00:09:06,600 --> 00:09:11,400
can actually process it so we can say

00:09:08,100 --> 00:09:12,750
parse the response is it 200 if it is

00:09:11,400 --> 00:09:14,550
some we've actually got our result and

00:09:12,750 --> 00:09:16,620
we can look at both the first view and

00:09:14,550 --> 00:09:19,320
the repeat view speed index so that is

00:09:16,620 --> 00:09:21,090
with and without cast resources and then

00:09:19,320 --> 00:09:22,890
if not we'll just go back through the

00:09:21,090 --> 00:09:24,690
loop again so you can start to use this

00:09:22,890 --> 00:09:27,210
information to inform your scaling I

00:09:24,690 --> 00:09:29,610
said you're behind this so here's an

00:09:27,210 --> 00:09:30,960
example calling that just pings every

00:09:29,610 --> 00:09:34,290
five seconds and then finally you get

00:09:30,960 --> 00:09:36,660
your speed index results right great so

00:09:34,290 --> 00:09:40,410
sis admins DevOps people you have a role

00:09:36,660 --> 00:09:42,750
to play back end developers who is a

00:09:40,410 --> 00:09:45,690
back-end developer here imagine most

00:09:42,750 --> 00:09:50,220
okay so this is to apply to you cash

00:09:45,690 --> 00:09:54,240
aggressively yes I do work for CDN this

00:09:50,220 --> 00:09:56,970
is my business but do database caching

00:09:54,240 --> 00:09:59,490
like you must whether that's in memcache

00:09:56,970 --> 00:10:02,400
Cassandra doesn't matter put in some

00:09:59,490 --> 00:10:05,340
database caching full page caching

00:10:02,400 --> 00:10:06,810
should be also doing this again men base

00:10:05,340 --> 00:10:10,410
Cassandra maybe you're using varnish or

00:10:06,810 --> 00:10:13,010
squid as part of your HTTP layer who

00:10:10,410 --> 00:10:15,150
here is heard of edge site includes a

00:10:13,010 --> 00:10:17,460
couple people okay so this is that

00:10:15,150 --> 00:10:19,700
you're really cool thing Akamai helped

00:10:17,460 --> 00:10:23,700
spec this out it is a standard however

00:10:19,700 --> 00:10:26,790
and what it allows you to do is to do

00:10:23,700 --> 00:10:28,230
partial cashing on pages so we run into

00:10:26,790 --> 00:10:30,540
this problem very quickly with full page

00:10:28,230 --> 00:10:32,610
caching if we have dynamic websites so

00:10:30,540 --> 00:10:34,950
you can't return somebody else's cached

00:10:32,610 --> 00:10:36,300
version to the wrong person all right so

00:10:34,950 --> 00:10:38,340
the idea behind edge site includes is

00:10:36,300 --> 00:10:41,330
that you can do caching on portions of

00:10:38,340 --> 00:10:44,100
your site separately from the rest of it

00:10:41,330 --> 00:10:46,050
so there are many different ways to do

00:10:44,100 --> 00:10:48,330
this it is supported by varnish and

00:10:46,050 --> 00:10:51,480
squid otherwise I wouldn't put it in

00:10:48,330 --> 00:10:52,890
this talk so you can turn off caching

00:10:51,480 --> 00:10:54,330
entirely so for something that is

00:10:52,890 --> 00:10:56,610
completely dynamic you can say don't

00:10:54,330 --> 00:10:58,540
cash this part of the page you can have

00:10:56,610 --> 00:11:00,730
different ttls for different portions

00:10:58,540 --> 00:11:02,980
it can be per user session or maybe /

00:11:00,730 --> 00:11:05,710
geographic area so for example if your

00:11:02,980 --> 00:11:07,270
site is being delivered both here and in

00:11:05,710 --> 00:11:08,890
New Zealand they're going to get maybe

00:11:07,270 --> 00:11:12,160
different imagery for different pricing

00:11:08,890 --> 00:11:13,810
right so things to think about this what

00:11:12,160 --> 00:11:16,810
it looks like you have an ESI include

00:11:13,810 --> 00:11:19,090
pull in this HTML segment this is the

00:11:16,810 --> 00:11:20,410
personalized greeting this is what the

00:11:19,090 --> 00:11:23,680
edge site include will try to include

00:11:20,410 --> 00:11:26,530
and then we have ESI remove and what

00:11:23,680 --> 00:11:27,850
this will do is this is a include for

00:11:26,530 --> 00:11:29,740
something that is way way less

00:11:27,850 --> 00:11:32,170
resource-intensive so generic greeting

00:11:29,740 --> 00:11:36,070
so maybe for example the first one says

00:11:32,170 --> 00:11:38,830
you know hello Johanna and this one says

00:11:36,070 --> 00:11:40,720
hi right and what will happen is if we

00:11:38,830 --> 00:11:43,900
are able to process the include

00:11:40,720 --> 00:11:46,120
correctly then we will remove what's

00:11:43,900 --> 00:11:51,070
between those tags okay so this is a

00:11:46,120 --> 00:11:53,830
fallback image compression as i

00:11:51,070 --> 00:11:55,450
mentioned image optimizations is the

00:11:53,830 --> 00:11:58,030
most important thing probably these days

00:11:55,450 --> 00:12:01,150
and while designers have a role to play

00:11:58,030 --> 00:12:03,310
we also can play a role so you can do

00:12:01,150 --> 00:12:05,800
format negotiation there are two new

00:12:03,310 --> 00:12:12,720
formats that are being pushed web p by

00:12:05,800 --> 00:12:15,700
chrome jeng peg XR x IE 11 and edge

00:12:12,720 --> 00:12:18,280
these are both better compressors in

00:12:15,700 --> 00:12:23,290
some ways and for some things and say

00:12:18,280 --> 00:12:25,660
jpg or PNG you can dynamically convert

00:12:23,290 --> 00:12:26,860
images and store them and then depending

00:12:25,660 --> 00:12:28,840
on the browser that's coming in you can

00:12:26,860 --> 00:12:33,580
deliver the most performant version for

00:12:28,840 --> 00:12:37,420
them compression is a huge thing who has

00:12:33,580 --> 00:12:41,830
ever played with the jpeg levels what do

00:12:37,420 --> 00:12:43,750
they mean nothing it's completely up to

00:12:41,830 --> 00:12:46,870
the encoder they get to decide what

00:12:43,750 --> 00:12:48,550
those mean so yeah you can't actually

00:12:46,870 --> 00:12:49,600
sort of say I'm just going to have a

00:12:48,550 --> 00:12:52,390
sixty percent everywhere it's not

00:12:49,600 --> 00:12:55,420
actually a presented but something

00:12:52,390 --> 00:12:57,490
that's really easy to do is jpg levels

00:12:55,420 --> 00:13:00,430
now one thing we can talk about is

00:12:57,490 --> 00:13:01,750
perceived quality if you remember

00:13:00,430 --> 00:13:03,280
earlier I showed you that image that

00:13:01,750 --> 00:13:04,330
looked terrible when we compressed it

00:13:03,280 --> 00:13:07,330
because you know we don't know exactly

00:13:04,330 --> 00:13:09,550
what the designer wanted perceived

00:13:07,330 --> 00:13:12,400
quality is this idea that its quality

00:13:09,550 --> 00:13:15,400
humans can see not quality

00:13:12,400 --> 00:13:19,420
can see and so I think this is an

00:13:15,400 --> 00:13:22,240
animation start no this is what we had

00:13:19,420 --> 00:13:25,210
before so this is a compression level

00:13:22,240 --> 00:13:26,710
100 this is the same image actually size

00:13:25,210 --> 00:13:27,550
down to like 50 pixels and then back out

00:13:26,710 --> 00:13:30,160
because it's the only way I could make

00:13:27,550 --> 00:13:31,780
it look terrible enough on a slide but

00:13:30,160 --> 00:13:34,060
obviously we as humans we can see this

00:13:31,780 --> 00:13:39,610
looks pretty terrible this looks pretty

00:13:34,060 --> 00:13:44,470
good right as computers so 16.8 mix for

00:13:39,610 --> 00:13:45,790
the original 95.8 megs 4.2 numbers again

00:13:44,470 --> 00:13:47,410
those JPEG compression levels really

00:13:45,790 --> 00:13:53,050
don't mean anything but we can keep

00:13:47,410 --> 00:13:54,280
going down here 30 20 10 0 I actually

00:13:53,050 --> 00:13:59,800
can't see a difference in this one even

00:13:54,280 --> 00:14:01,540
on my computer so original 0 and what's

00:13:59,800 --> 00:14:03,220
the difference there's a little bit of

00:14:01,540 --> 00:14:04,630
artifacting move slightly cuz I'm

00:14:03,220 --> 00:14:09,100
terrible of slides may be down here

00:14:04,630 --> 00:14:10,750
maybe some jpg artifacts but that's a

00:14:09,100 --> 00:14:13,270
huge difference in size like the

00:14:10,750 --> 00:14:17,920
original was like 15 Meg's this is 393 k

00:14:13,270 --> 00:14:20,380
right but how do we dynamically make

00:14:17,920 --> 00:14:23,080
these changes by how do we know where

00:14:20,380 --> 00:14:26,130
that compression level is that a user is

00:14:23,080 --> 00:14:26,130
going to start seeing the difference

00:14:26,280 --> 00:14:44,380
come on out loud enough all right did

00:14:41,080 --> 00:14:48,640
someone say something no okay so we can

00:14:44,380 --> 00:14:50,710
use ssim structural similarity for

00:14:48,640 --> 00:14:52,510
images now ssim is a really really cool

00:14:50,710 --> 00:14:56,230
algorithm it is actually an Emmy

00:14:52,510 --> 00:14:58,060
award-winning algorithm I did not know

00:14:56,230 --> 00:15:00,720
they gave Emmys for algorithms who

00:14:58,060 --> 00:15:04,150
collects that I'm not sure but it does

00:15:00,720 --> 00:15:05,530
have an Emmy this is the algorithm if

00:15:04,150 --> 00:15:07,960
you're good at math that might not be

00:15:05,530 --> 00:15:09,580
complex thankfully for me it is and

00:15:07,960 --> 00:15:10,600
we're not going to go into it fact of

00:15:09,580 --> 00:15:13,900
the matter is someone else is written to

00:15:10,600 --> 00:15:16,960
code but what it's based on is a

00:15:13,900 --> 00:15:18,430
brightness contrast and structure these

00:15:16,960 --> 00:15:20,980
are things that human eyes perceive and

00:15:18,430 --> 00:15:24,040
it is fast which is really really

00:15:20,980 --> 00:15:25,930
important what we can do is we can use

00:15:24,040 --> 00:15:28,120
DSS IM

00:15:25,930 --> 00:15:31,600
which is the dissimilarity between two

00:15:28,120 --> 00:15:34,149
ssim scores to figure out how different

00:15:31,600 --> 00:15:38,680
two images are terms of perceived

00:15:34,149 --> 00:15:40,690
quality so we see the dss IM scores up

00:15:38,680 --> 00:15:42,310
there in the top right and then this is

00:15:40,690 --> 00:15:45,209
like a heat map for how much the image

00:15:42,310 --> 00:15:48,250
changes so i'll go through one more time

00:15:45,209 --> 00:15:49,149
so this is that the 90 you see ever so

00:15:48,250 --> 00:15:52,480
slightly we're seeing more and more

00:15:49,149 --> 00:15:55,450
noise introduced so what we can do is we

00:15:52,480 --> 00:15:58,510
can decide what our threshold is for

00:15:55,450 --> 00:16:00,370
that similarity score and we can

00:15:58,510 --> 00:16:02,920
actually tweak that we can say for users

00:16:00,370 --> 00:16:05,830
in India where Internet is not so great

00:16:02,920 --> 00:16:07,570
maybe we're okay with that dissimilarity

00:16:05,830 --> 00:16:09,310
being greater so that we can get greater

00:16:07,570 --> 00:16:11,440
compression all right we do geographic

00:16:09,310 --> 00:16:14,620
changes things like that mobile is

00:16:11,440 --> 00:16:17,649
another great one so for example taking

00:16:14,620 --> 00:16:20,920
that image at 90 I get a DSS IM from the

00:16:17,649 --> 00:16:24,180
original of 009 going through all the

00:16:20,920 --> 00:16:27,220
way down to zero and i may say that 0.02

00:16:24,180 --> 00:16:29,440
that's my cut off so i know that

00:16:27,220 --> 00:16:31,120
somewhere between 30 and 20 is my magic

00:16:29,440 --> 00:16:32,410
number and we're just going to do it

00:16:31,120 --> 00:16:34,720
intends because that's easy right and

00:16:32,410 --> 00:16:36,250
that's the one that I will then store so

00:16:34,720 --> 00:16:38,140
I will compress it at every single one

00:16:36,250 --> 00:16:40,089
of these levels to see where the

00:16:38,140 --> 00:16:44,980
similarity is too great and then store

00:16:40,089 --> 00:16:48,180
that one is my perfect one alright so

00:16:44,980 --> 00:16:51,700
set the perceptive quality threshold

00:16:48,180 --> 00:16:53,380
there's original 14.1 Meg's here it is a

00:16:51,700 --> 00:16:56,520
30 I know it's hard to see but these

00:16:53,380 --> 00:16:59,800
look pretty much identical and we save

00:16:56,520 --> 00:17:03,880
91.4 percent of our bandwidth which is

00:16:59,800 --> 00:17:08,290
kind of incredible right all right who's

00:17:03,880 --> 00:17:15,929
a front-end developer thank you you make

00:17:08,290 --> 00:17:18,910
me look good I yeah so for you guys

00:17:15,929 --> 00:17:21,790
predictive browsing is super cool it's

00:17:18,910 --> 00:17:24,160
also known as pre browsing and what pre

00:17:21,790 --> 00:17:25,630
browsing is is the ability to inform the

00:17:24,160 --> 00:17:29,020
browser of actions that are going to

00:17:25,630 --> 00:17:33,010
happen on your user's behalf so you can

00:17:29,020 --> 00:17:35,110
do things like prefetching of DNS or pre

00:17:33,010 --> 00:17:36,730
connecting TCP connections you can

00:17:35,110 --> 00:17:38,260
prefetch which means to grab the

00:17:36,730 --> 00:17:39,790
resource and you can actually pre-render

00:17:38,260 --> 00:17:41,200
so you can actually take

00:17:39,790 --> 00:17:42,670
off-screen and render it in its entirety

00:17:41,200 --> 00:17:45,670
so when they then request that resource

00:17:42,670 --> 00:17:49,060
it's already rendered so here's a

00:17:45,670 --> 00:17:50,410
browser this is DNS prefetch so you say

00:17:49,060 --> 00:17:53,620
to the browser we are going to be

00:17:50,410 --> 00:17:57,670
looking up probably this domain next so

00:17:53,620 --> 00:17:59,380
go ahead and do the DNS fetch now then

00:17:57,670 --> 00:18:00,700
you have the TCP pre connect so we say

00:17:59,380 --> 00:18:02,430
we're probably going to connect to the

00:18:00,700 --> 00:18:04,270
server neck so let's just go ahead and

00:18:02,430 --> 00:18:07,870
connect to it will leave that connection

00:18:04,270 --> 00:18:09,880
open until we need it preloading just

00:18:07,870 --> 00:18:12,820
grab the content just stays in memory

00:18:09,880 --> 00:18:14,830
don't do anything with it and then

00:18:12,820 --> 00:18:17,050
finally actually render it off-screen

00:18:14,830 --> 00:18:19,690
store it so that when it's needed it's

00:18:17,050 --> 00:18:21,100
already done and pre-render is actually

00:18:19,690 --> 00:18:23,650
really important for like whole tree

00:18:21,100 --> 00:18:24,970
whole page transitions like an animation

00:18:23,650 --> 00:18:28,540
that's starting to happen on the web

00:18:24,970 --> 00:18:32,500
that's how that's performed so DNS

00:18:28,540 --> 00:18:35,380
prefetching really simple link rel DMS

00:18:32,500 --> 00:18:37,440
prefetch href and you'll notice there's

00:18:35,380 --> 00:18:40,060
no protocol here because its dns

00:18:37,440 --> 00:18:41,800
protocols it is DNS so just example org

00:18:40,060 --> 00:18:45,610
that will tell the browser to go in

00:18:41,800 --> 00:18:49,360
resolve example org oh no I had

00:18:45,610 --> 00:18:52,660
animation sir very similarly pre connect

00:18:49,360 --> 00:18:56,290
so literally change dns to pre connect

00:18:52,660 --> 00:18:57,670
this time we need protocol and we will

00:18:56,290 --> 00:19:01,050
just go ahead and open tcp connection

00:18:57,670 --> 00:19:04,690
and do the ssl handshake to example org

00:19:01,050 --> 00:19:07,750
prefetch again just change that rel now

00:19:04,690 --> 00:19:11,370
this time we can use a relative URL so

00:19:07,750 --> 00:19:15,700
it could be on the same domain and

00:19:11,370 --> 00:19:17,230
pre-render again pretty similar really

00:19:15,700 --> 00:19:18,880
really important for you to take note

00:19:17,230 --> 00:19:20,230
that course we're all going we've got so

00:19:18,880 --> 00:19:21,340
much internet and we know they're going

00:19:20,230 --> 00:19:25,600
to have all that time let's just

00:19:21,340 --> 00:19:27,100
pre-render everything you have to render

00:19:25,600 --> 00:19:29,440
the entire page which means you have to

00:19:27,100 --> 00:19:32,050
fetch all of the sub resources so when

00:19:29,440 --> 00:19:33,820
your page loads and that link tag comes

00:19:32,050 --> 00:19:35,950
in it's going to start fetching all the

00:19:33,820 --> 00:19:38,110
sub resources for the pre-render stop

00:19:35,950 --> 00:19:39,520
which is potentially going to contend

00:19:38,110 --> 00:19:42,790
with the sub resources for the current

00:19:39,520 --> 00:19:44,860
page as well plus it could be huge

00:19:42,790 --> 00:19:47,890
because you know rather web pages are

00:19:44,860 --> 00:19:53,230
huge these days there's another speck

00:19:47,890 --> 00:19:57,370
rel preload and what preload will do is

00:19:53,230 --> 00:19:59,080
it will tell the it's it's very similar

00:19:57,370 --> 00:20:01,140
to prefetch switch why i have is blight

00:19:59,080 --> 00:20:03,340
on it alright here's the difference

00:20:01,140 --> 00:20:05,650
prefetching is about the next action

00:20:03,340 --> 00:20:09,040
this is what the user is going to do

00:20:05,650 --> 00:20:12,669
next it is intended to be something that

00:20:09,040 --> 00:20:15,100
is optional and not high priority

00:20:12,669 --> 00:20:18,010
preload on the other hand is about the

00:20:15,100 --> 00:20:20,980
current page so for example you may tell

00:20:18,010 --> 00:20:23,350
it to preload the CSS or more likely the

00:20:20,980 --> 00:20:25,540
font for the CSS right so if you can

00:20:23,350 --> 00:20:27,970
load the HTML page have the link tag to

00:20:25,540 --> 00:20:29,470
the CSS file have a preload for the font

00:20:27,970 --> 00:20:31,240
it means the browser can start

00:20:29,470 --> 00:20:32,890
downloading the font before it has

00:20:31,240 --> 00:20:36,390
finished downloading the CSS or before

00:20:32,890 --> 00:20:39,580
it is finished parsing the CSS so

00:20:36,390 --> 00:20:41,890
preload is typically sent as a header it

00:20:39,580 --> 00:20:45,700
makes more sense at that point it is

00:20:41,890 --> 00:20:47,380
also used for server push this is what

00:20:45,700 --> 00:20:51,400
looks like link the resource rel equals

00:20:47,380 --> 00:20:52,870
preload I don't like that we're using it

00:20:51,400 --> 00:20:55,720
for server push so the idea is is that

00:20:52,870 --> 00:20:57,990
the engine X or Apache or wizzy or

00:20:55,720 --> 00:21:00,280
whatever would see that header from the

00:20:57,990 --> 00:21:03,340
responding application and it would then

00:21:00,280 --> 00:21:04,540
do a server push to the client and it

00:21:03,340 --> 00:21:06,040
would remove the header the browser

00:21:04,540 --> 00:21:07,750
would not actually get it my problem

00:21:06,040 --> 00:21:10,780
with this is that you are loading two

00:21:07,750 --> 00:21:13,720
different mechanisms behind preload and

00:21:10,780 --> 00:21:16,090
I argued for this with the group that

00:21:13,720 --> 00:21:19,240
maintains this stuff and they said no

00:21:16,090 --> 00:21:22,780
now it's fine in every case you can do

00:21:19,240 --> 00:21:24,730
either and then they decided to add a no

00:21:22,780 --> 00:21:27,640
push flag that goes here just in case

00:21:24,730 --> 00:21:29,350
you don't want to push it so I'm going

00:21:27,640 --> 00:21:31,240
to go back and we argue for that but for

00:21:29,350 --> 00:21:35,350
now this is the way they're also doing

00:21:31,240 --> 00:21:38,799
push what this does is it opens us up to

00:21:35,350 --> 00:21:42,280
new architectures an h2 also opens up

00:21:38,799 --> 00:21:46,330
some really great architectures so HTTP

00:21:42,280 --> 00:21:50,200
one sucks sorry we have come up with a

00:21:46,330 --> 00:21:52,960
whole bunch of really clever hacks to

00:21:50,200 --> 00:21:54,940
make a CD 1 not suck so much minifying

00:21:52,960 --> 00:21:57,700
concatenating javascript and CSS for

00:21:54,940 --> 00:22:00,340
example in lining small javascript and

00:21:57,700 --> 00:22:02,140
CSS is known as critical path using

00:22:00,340 --> 00:22:04,090
image sprites who's used an image sprite

00:22:02,140 --> 00:22:05,890
how much of a pain of those to handle

00:22:04,090 --> 00:22:07,100
like you've got grunt ass on grunt ask

00:22:05,890 --> 00:22:09,530
to manage that

00:22:07,100 --> 00:22:11,169
and then we have data here our eyes we

00:22:09,530 --> 00:22:16,660
have domain charting all of these things

00:22:11,169 --> 00:22:16,660
to make HTTP one not suck I need a drink

00:22:28,299 --> 00:22:39,169
ya shoulda pre-loaded is anyone not

00:22:35,360 --> 00:22:42,650
familiar with domain charting so the

00:22:39,169 --> 00:22:45,140
main starting is this idea that browsers

00:22:42,650 --> 00:22:49,220
have an artificial limit of only loading

00:22:45,140 --> 00:22:51,950
six connections to any given domain so

00:22:49,220 --> 00:22:53,450
if you have 15 images it will make six

00:22:51,950 --> 00:22:56,270
requests and then six requests and then

00:22:53,450 --> 00:22:58,820
however many is left three right so

00:22:56,270 --> 00:23:00,950
domain charting you sub domains for the

00:22:58,820 --> 00:23:03,169
same server and you just split it out so

00:23:00,950 --> 00:23:05,299
you'd have s one example or gas to

00:23:03,169 --> 00:23:09,460
example org et cetera and it would make

00:23:05,299 --> 00:23:12,440
six connections to each of those so

00:23:09,460 --> 00:23:14,200
they're all very clever certainly far

00:23:12,440 --> 00:23:17,169
more clever than I could come up with

00:23:14,200 --> 00:23:19,429
but they're all hacks and they take time

00:23:17,169 --> 00:23:23,030
multiplexing is something that we get

00:23:19,429 --> 00:23:25,460
for free with age 12 and multiplexing is

00:23:23,030 --> 00:23:30,169
this ability to send many many requests

00:23:25,460 --> 00:23:33,740
over a single TCP connection and it also

00:23:30,169 --> 00:23:35,179
allows us to do server push we do

00:23:33,740 --> 00:23:37,190
dependencies which is really cool it

00:23:35,179 --> 00:23:39,020
allows us to say I want to send this

00:23:37,190 --> 00:23:40,220
resource but don't bother sending it

00:23:39,020 --> 00:23:42,409
until this other resource has been sent

00:23:40,220 --> 00:23:44,210
great example fonts for your CSS and the

00:23:42,409 --> 00:23:46,610
CSS stylesheet before sending the fonts

00:23:44,210 --> 00:23:49,490
right that makes sense we can also give

00:23:46,610 --> 00:23:51,260
things weights we can it's sort of an

00:23:49,490 --> 00:23:53,150
arbitrary thing you say it's a number

00:23:51,260 --> 00:23:55,220
between 1 and 256 you say this one

00:23:53,150 --> 00:23:56,600
weighs this much in terms of importance

00:23:55,220 --> 00:23:58,520
and this one weighs this much in terms

00:23:56,600 --> 00:23:59,960
of importance so something with a weight

00:23:58,520 --> 00:24:01,850
of one is essentially the least

00:23:59,960 --> 00:24:04,309
important thing and something with a way

00:24:01,850 --> 00:24:05,900
to 256 is 256 times more important

00:24:04,309 --> 00:24:08,000
whatever that means in the connectivity

00:24:05,900 --> 00:24:09,110
environment that you are in so the

00:24:08,000 --> 00:24:11,750
browser and the server will sort of

00:24:09,110 --> 00:24:14,610
negotiate how many resources to dedicate

00:24:11,750 --> 00:24:19,110
to each individual stream

00:24:14,610 --> 00:24:22,040
so if we look at a page today what we

00:24:19,110 --> 00:24:25,080
can do now is open up a TCP connection

00:24:22,040 --> 00:24:29,160
we can do a simple get and get a

00:24:25,080 --> 00:24:31,650
response this is what we do right now in

00:24:29,160 --> 00:24:33,390
h2 we can also say i also want to send

00:24:31,650 --> 00:24:35,070
all of these things and i will

00:24:33,390 --> 00:24:37,410
proactively as a server just shove those

00:24:35,070 --> 00:24:38,670
down the pipe so we send our critical

00:24:37,410 --> 00:24:40,650
past CSS and our critical path

00:24:38,670 --> 00:24:43,740
JavaScript we're very vain so we send

00:24:40,650 --> 00:24:46,200
our logo we can do this instead of

00:24:43,740 --> 00:24:48,419
embedding them in the page which is

00:24:46,200 --> 00:24:50,340
really important because by embedding

00:24:48,419 --> 00:24:52,950
them in the page you can't cash them

00:24:50,340 --> 00:24:54,929
across pages so we actually are saving

00:24:52,950 --> 00:24:57,480
bandwidth there because you never know

00:24:54,929 --> 00:24:59,790
if they got the critical path stuff so

00:24:57,480 --> 00:25:02,100
by sending it as individual items they

00:24:59,790 --> 00:25:03,120
can be cached individually and we don't

00:25:02,100 --> 00:25:06,000
have to worry about that all of the

00:25:03,120 --> 00:25:08,820
caching wills come into play we can have

00:25:06,000 --> 00:25:12,179
a dependency so send the font once the

00:25:08,820 --> 00:25:15,840
critical path CSS has been sent send our

00:25:12,179 --> 00:25:17,280
main JavaScript so everything else maybe

00:25:15,840 --> 00:25:19,740
we send a splash image I wouldn't

00:25:17,280 --> 00:25:21,000
recommend it but again we're vain and

00:25:19,740 --> 00:25:22,500
then we can maybe send the rest of our

00:25:21,000 --> 00:25:24,540
styles so the idea behind the critical

00:25:22,500 --> 00:25:26,730
path is it's just to render what is

00:25:24,540 --> 00:25:30,470
visible on screen when the page loads

00:25:26,730 --> 00:25:36,110
and everything else can look like crap

00:25:30,470 --> 00:25:42,419
so in summary performance is critical

00:25:36,110 --> 00:25:44,669
time is literally money but time is also

00:25:42,419 --> 00:25:51,809
user experience which is more important

00:25:44,669 --> 00:25:58,890
ah that's it so I would love feedback in

00:25:51,809 --> 00:26:05,169
questions and water I can walk

00:25:58,890 --> 00:26:11,620
this we're gonna have to share we good

00:26:05,169 --> 00:26:14,260
for questions sure okay um I was just

00:26:11,620 --> 00:26:16,270
gonna ask about page page load

00:26:14,260 --> 00:26:17,620
animations and how they affect perceived

00:26:16,270 --> 00:26:21,040
performance and any guidelines around

00:26:17,620 --> 00:26:22,679
minimizing that impact sure um I'm

00:26:21,040 --> 00:26:25,780
assuming everybody else heard that so

00:26:22,679 --> 00:26:27,460
anima humans are really special our

00:26:25,780 --> 00:26:29,530
brains are really really clever and they

00:26:27,460 --> 00:26:31,660
will fool us into thinking things are

00:26:29,530 --> 00:26:33,280
more performant than they are and we can

00:26:31,660 --> 00:26:35,850
use things like loading animations to

00:26:33,280 --> 00:26:39,010
pretend that slow things are not slow

00:26:35,850 --> 00:26:41,350
animations are critical for perceived

00:26:39,010 --> 00:26:43,390
performance you have to be aware though

00:26:41,350 --> 00:26:45,040
just like there's always that trade-off

00:26:43,390 --> 00:26:46,690
how much resources does it take to

00:26:45,040 --> 00:26:48,160
prepare the animation could I get it

00:26:46,690 --> 00:26:50,340
better spend that actually doing the

00:26:48,160 --> 00:26:54,340
thing that I'm pretending that I'm doing

00:26:50,340 --> 00:26:57,790
so other questions I'm just gonna work

00:26:54,340 --> 00:27:00,010
my way back sorry yeah so if you had

00:26:57,790 --> 00:27:02,290
like some large piece of data you needed

00:27:00,010 --> 00:27:04,780
them to I synchronously fetch on a on a

00:27:02,290 --> 00:27:06,669
on a page based on their identity or

00:27:04,780 --> 00:27:07,870
something how would and you wanted to

00:27:06,669 --> 00:27:10,090
use the prefetching sort of mechanism

00:27:07,870 --> 00:27:11,799
how would you make sure they didn't

00:27:10,090 --> 00:27:15,850
already have a request in flight and

00:27:11,799 --> 00:27:19,059
you're giving it to them twice um so

00:27:15,850 --> 00:27:22,419
this there's kind of two answers to that

00:27:19,059 --> 00:27:24,010
if you push something to a browser they

00:27:22,419 --> 00:27:26,169
are the determining factors to whether

00:27:24,010 --> 00:27:28,090
or not to receive it so in h2 we would

00:27:26,169 --> 00:27:29,919
send a frame that says I want to push

00:27:28,090 --> 00:27:31,330
you something do you want it and they

00:27:29,919 --> 00:27:32,679
would just ignore they would say no if

00:27:31,330 --> 00:27:38,110
they already had it in flight or didn't

00:27:32,679 --> 00:27:39,520
want it of course if it's dynamic you're

00:27:38,110 --> 00:27:42,370
doubling your resources to generate it

00:27:39,520 --> 00:27:43,690
both times right that's unfortunate we

00:27:42,370 --> 00:27:48,340
need to do better we're all learning I

00:27:43,690 --> 00:27:51,429
will go this way I just don't want to

00:27:48,340 --> 00:27:54,100
walk all the way right so specifically

00:27:51,429 --> 00:27:56,320
around white of resources being pushed

00:27:54,100 --> 00:27:59,260
down the pipe because that number

00:27:56,320 --> 00:28:01,809
between 1 and 2 56 is arbitrary based on

00:27:59,260 --> 00:28:03,460
implementation browsers notorious at

00:28:01,809 --> 00:28:06,760
being reliable and consistent in their

00:28:03,460 --> 00:28:08,260
implementation of that kind of thing how

00:28:06,760 --> 00:28:11,380
do browsers currently handler are we

00:28:08,260 --> 00:28:12,460
good bad ugly was waiting for the

00:28:11,380 --> 00:28:15,500
question

00:28:12,460 --> 00:28:16,880
yes so it is it's it's based on a whole

00:28:15,500 --> 00:28:18,860
lot of factors the number one thing is

00:28:16,880 --> 00:28:20,750
is that it is implementation-specific

00:28:18,860 --> 00:28:23,540
just like the jpeg levels those numbers

00:28:20,750 --> 00:28:25,160
mean nothing and unfortunately browsers

00:28:23,540 --> 00:28:27,710
today there H two implementations are

00:28:25,160 --> 00:28:30,620
technically correct in that they work

00:28:27,710 --> 00:28:34,220
but they don't know enough yet to

00:28:30,620 --> 00:28:37,400
optimize so you do get something for

00:28:34,220 --> 00:28:39,530
free like by using one connection ssl

00:28:37,400 --> 00:28:42,500
overhead is basically minimal could you

00:28:39,530 --> 00:28:45,050
only be one handshake so that that's

00:28:42,500 --> 00:28:47,150
great but things like weights they're

00:28:45,050 --> 00:28:49,310
not there yet implementations of weights

00:28:47,150 --> 00:28:51,350
are not there having said that this is

00:28:49,310 --> 00:28:53,030
not just about the web if you are

00:28:51,350 --> 00:28:55,160
building your own API clients for

00:28:53,030 --> 00:28:57,140
example and servers and you can use all

00:28:55,160 --> 00:28:59,540
of these features there also and then

00:28:57,140 --> 00:29:07,250
you get to control that so bear that in

00:28:59,540 --> 00:29:10,070
mind other questions yes I was wondering

00:29:07,250 --> 00:29:14,570
how widespread and how well supported is

00:29:10,070 --> 00:29:20,150
HTTP to right now and web servers in web

00:29:14,570 --> 00:29:21,440
service okay so first of all the I will

00:29:20,150 --> 00:29:23,750
tell you about browsers because I know

00:29:21,440 --> 00:29:25,040
that as a number sixty percent are

00:29:23,750 --> 00:29:27,590
browsers currently in users hands

00:29:25,040 --> 00:29:30,350
support h2 that's a great number as far

00:29:27,590 --> 00:29:32,240
as servers Apache supports it engine X

00:29:30,350 --> 00:29:38,930
supports everything but server push so I

00:29:32,240 --> 00:29:41,480
hate engine X hmm it did they told me it

00:29:38,930 --> 00:29:43,280
wasn't on the road man okay so maybe

00:29:41,480 --> 00:29:45,770
it's there I actually don't know if like

00:29:43,280 --> 00:29:55,610
whiskey supports it for example I don't

00:29:45,770 --> 00:29:58,040
know the answer to that so yes so in the

00:29:55,610 --> 00:29:59,780
example you gave of different renderings

00:29:58,040 --> 00:30:02,180
and for example we said in India with

00:29:59,780 --> 00:30:03,710
slow internet connectivity or what about

00:30:02,180 --> 00:30:06,260
the differences as well between a mobile

00:30:03,710 --> 00:30:08,690
or desktop in the same example of from a

00:30:06,260 --> 00:30:09,980
CDN perspective if I had rendered say a

00:30:08,690 --> 00:30:11,810
hundred percent and I want to display to

00:30:09,980 --> 00:30:13,610
a desktop and then it's the ten percent

00:30:11,810 --> 00:30:17,690
I want to display as a mobile is that

00:30:13,610 --> 00:30:19,420
possible from a CDN rule or um I can

00:30:17,690 --> 00:30:22,040
only speak for akamai yes it's possible

00:30:19,420 --> 00:30:23,840
I don't want to advertise for akamai so

00:30:22,040 --> 00:30:25,850
that's all I'll say yes it's just

00:30:23,840 --> 00:30:27,650
basically generally geolocation stuff

00:30:25,850 --> 00:30:29,539
it is certainly possible on the platform

00:30:27,650 --> 00:30:32,299
and it's possible without the platform

00:30:29,539 --> 00:30:34,789
also one other great use case for that

00:30:32,299 --> 00:30:38,270
is mobile where people will transition

00:30:34,789 --> 00:30:40,789
from say Wi-Fi to being on their network

00:30:38,270 --> 00:30:42,260
provider the if you're writing it like a

00:30:40,789 --> 00:30:45,500
native application that can detect those

00:30:42,260 --> 00:30:47,960
changes you may decide that the server

00:30:45,500 --> 00:30:50,690
is going to push down say comments on a

00:30:47,960 --> 00:30:52,520
blog post and if you are mobile mobile

00:30:50,690 --> 00:30:53,570
then you would just not accept those

00:30:52,520 --> 00:30:56,630
because you don't want the bandwidth

00:30:53,570 --> 00:30:58,100
usage so nice use case there there's a

00:30:56,630 --> 00:30:59,480
lot of dynamis ism that we can start to

00:30:58,100 --> 00:31:05,750
bring in from both the client and server

00:30:59,480 --> 00:31:07,610
side any more questions but we don't

00:31:05,750 --> 00:31:14,559
have one so that's fine all right thank

00:31:07,610 --> 00:31:14,559

YouTube URL: https://www.youtube.com/watch?v=jDcDfcH-oP4


