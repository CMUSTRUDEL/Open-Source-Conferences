Title: Behind Closed Doors: Managing Passwords in a Dangerous World
Publication date: 2016-08-16
Playlist: Pycon Australia 2016
Description: 
	Noah Kantrowitz
https://2016.pycon-au.org/schedule/61/view_talk
Secrets come in many forms, passwords, keys, tokens. All crucial for the operation of an application, but each dangerous in its own way. In the past, many of us have pasted those secrets in to a text file and moved on, but in a world of config automation and ephemeral microservices these patterns are leaving our data at greater risk than ever before.

New tools, products, and libraries are being released all the time to try to cope with this massive rise in threats, both new and old-but-ignored. This talk will cover the major types of secrets in a normal web application, how to model their security properties, what tools are best for each situation, and how to use them with major web frameworks.
Captions: 
	00:00:00,000 --> 00:00:04,200
our next presenter is on the

00:00:02,159 --> 00:00:06,120
infrastructure team with the Python

00:00:04,200 --> 00:00:08,250
Software Foundation amongst the various

00:00:06,120 --> 00:00:11,190
other bits of engineering rock on Turing

00:00:08,250 --> 00:00:13,290
that he generally does today he's going

00:00:11,190 --> 00:00:15,030
to be presenting us with alternatives to

00:00:13,290 --> 00:00:16,980
writing passwords on your computer

00:00:15,030 --> 00:00:24,779
screen please make welcome now I

00:00:16,980 --> 00:00:26,160
counterfeits alright so as as Chris

00:00:24,779 --> 00:00:27,630
mentioned before if you saw this talk

00:00:26,160 --> 00:00:31,890
yesterday it's the same talk I promise

00:00:27,630 --> 00:00:33,719
no hard feelings you want to escape I am

00:00:31,890 --> 00:00:35,219
primarily known in the chef community I

00:00:33,719 --> 00:00:36,630
still do a lot of work in the Python

00:00:35,219 --> 00:00:38,850
world but most of my professional life

00:00:36,630 --> 00:00:40,079
is in chef these days can turn on

00:00:38,850 --> 00:00:42,390
Twitter and code Ranger everywhere else

00:00:40,079 --> 00:00:45,809
over for Bloomberg on generic

00:00:42,390 --> 00:00:47,850
open-source liaison ecosystem stuff and

00:00:45,809 --> 00:00:48,989
to lead off the seat this talk is gonna

00:00:47,850 --> 00:00:50,430
be about secrets as they pertain to

00:00:48,989 --> 00:00:52,379
infrastructure this is not a talk about

00:00:50,430 --> 00:00:54,899
browser extensions or writing secure

00:00:52,379 --> 00:00:56,879
Django code if you want my advice on

00:00:54,899 --> 00:00:59,520
those one password or story passwords

00:00:56,879 --> 00:01:00,629
using PDF to respectively but again no

00:00:59,520 --> 00:01:02,270
hard feelings if you want to escape

00:01:00,629 --> 00:01:05,189
because this is about infrastructure

00:01:02,270 --> 00:01:07,080
alright so let's lead in what defines a

00:01:05,189 --> 00:01:08,760
secret in terms of infrastructure you

00:01:07,080 --> 00:01:10,350
could treat all private information as

00:01:08,760 --> 00:01:12,119
secret like user data and stuff like

00:01:10,350 --> 00:01:13,650
that but it gets really unwieldy really

00:01:12,119 --> 00:01:15,540
fast so we're going to use these three

00:01:13,650 --> 00:01:17,130
properties to lock down exactly what's

00:01:15,540 --> 00:01:18,780
going to be a secret so the first thing

00:01:17,130 --> 00:01:20,400
is has to be small you might use

00:01:18,780 --> 00:01:23,189
techniques like disk encryption of data

00:01:20,400 --> 00:01:24,570
base encryption to use a small secret to

00:01:23,189 --> 00:01:26,340
control access to a larger amount of

00:01:24,570 --> 00:01:28,290
data but the secret part itself is

00:01:26,340 --> 00:01:30,240
relatively small second it's going to be

00:01:28,290 --> 00:01:32,250
radioactive so if an attacker knows it

00:01:30,240 --> 00:01:34,259
something bad happens if you compare a

00:01:32,250 --> 00:01:35,579
username and a password for example then

00:01:34,259 --> 00:01:36,869
attacker knows your username you don't

00:01:35,579 --> 00:01:38,640
usually considered a big deal but if I

00:01:36,869 --> 00:01:40,110
know your password that's a problem the

00:01:38,640 --> 00:01:42,060
passwords the radioactive ones that's

00:01:40,110 --> 00:01:43,890
the secret and finally it's got to be

00:01:42,060 --> 00:01:45,479
required these days when we talk about

00:01:43,890 --> 00:01:46,890
micro services and service-oriented

00:01:45,479 --> 00:01:48,090
architecture there's a lot of discussion

00:01:46,890 --> 00:01:50,399
of graceful fall back and degradation

00:01:48,090 --> 00:01:52,829
and things like that as your services

00:01:50,399 --> 00:01:55,110
start to to fall over things should keep

00:01:52,829 --> 00:01:56,700
functioning secrets are usually immune

00:01:55,110 --> 00:01:58,259
from that they are required for your

00:01:56,700 --> 00:01:59,340
infrastructure to function if your

00:01:58,259 --> 00:02:00,840
django app doesn't have a database

00:01:59,340 --> 00:02:04,770
password it's not going to do anything

00:02:00,840 --> 00:02:06,320
sorry there's four types of secrets

00:02:04,770 --> 00:02:08,789
we're going to use as guiding use cases

00:02:06,320 --> 00:02:10,229
when I talk about passwords in this talk

00:02:08,789 --> 00:02:11,790
again infrastructure so we're talking

00:02:10,229 --> 00:02:12,910
about things that are machine to machine

00:02:11,790 --> 00:02:14,650
or server to server

00:02:12,910 --> 00:02:16,570
but with passwords usually things that

00:02:14,650 --> 00:02:18,520
were designed for humans first so for

00:02:16,570 --> 00:02:20,080
example postgres on my sequel they use a

00:02:18,520 --> 00:02:21,760
username and password they were

00:02:20,080 --> 00:02:23,290
originally designed for human de la

00:02:21,760 --> 00:02:24,670
going to do into a database but these

00:02:23,290 --> 00:02:26,190
days it's generally going to be an

00:02:24,670 --> 00:02:28,480
application log into your database

00:02:26,190 --> 00:02:30,010
passwords are small usually under one

00:02:28,480 --> 00:02:32,470
kilobyte of data and there's some sort

00:02:30,010 --> 00:02:34,360
of single word be it you know multiple

00:02:32,470 --> 00:02:38,920
actual words but it's it's a single

00:02:34,360 --> 00:02:41,380
string in common use they're usually

00:02:38,920 --> 00:02:43,000
just going to be a ski if you want to go

00:02:41,380 --> 00:02:45,130
beyond that go for it some examples like

00:02:43,000 --> 00:02:47,980
i mentioned sequel passwords HTTP proxy

00:02:45,130 --> 00:02:49,900
passwords or linux login passwords to

00:02:47,980 --> 00:02:51,100
contrast that we have tokens tokens are

00:02:49,900 --> 00:02:52,720
usually instead of things that were

00:02:51,100 --> 00:02:54,220
built for humans they're things built

00:02:52,720 --> 00:02:56,950
for server to server interaction from

00:02:54,220 --> 00:02:58,600
the ground up you also can't cheat with

00:02:56,950 --> 00:03:00,730
passwords you can sometimes store a hash

00:02:58,600 --> 00:03:02,560
of a password with a token it needs to

00:03:00,730 --> 00:03:03,820
be in its raw form to be usable other

00:03:02,560 --> 00:03:05,770
than that they're relatively similar to

00:03:03,820 --> 00:03:07,780
passwords some example include API

00:03:05,770 --> 00:03:10,720
credentials for say pedro duty or oh off

00:03:07,780 --> 00:03:12,550
access credentials and then again to

00:03:10,720 --> 00:03:14,440
compare keys are going to be much larger

00:03:12,550 --> 00:03:16,090
than tokens and passwords they usually

00:03:14,440 --> 00:03:19,209
have some kind of internal formatting

00:03:16,090 --> 00:03:21,220
new lines the the dash dash dash RSA

00:03:19,209 --> 00:03:22,890
private key header stuff like that they

00:03:21,220 --> 00:03:25,920
sort of internal structure that matters

00:03:22,890 --> 00:03:28,360
TLS keys SSH keys that kind of thing and

00:03:25,920 --> 00:03:30,760
then after that there's this long tail

00:03:28,360 --> 00:03:32,080
of miscellaneous sometimes some of the

00:03:30,760 --> 00:03:33,250
miscellaneous things look enough like

00:03:32,080 --> 00:03:35,560
one of the other three to make it work

00:03:33,250 --> 00:03:38,290
so like Kerberos machine tickets it look

00:03:35,560 --> 00:03:39,700
kind of like key files just with some

00:03:38,290 --> 00:03:41,470
specialized administration commands

00:03:39,700 --> 00:03:44,170
around the edges like caedmon and

00:03:41,470 --> 00:03:46,750
whatnot but other stuff like PCI log

00:03:44,170 --> 00:03:48,280
records you can't use any of these tools

00:03:46,750 --> 00:03:49,720
for that you've got to look at dedicated

00:03:48,280 --> 00:03:52,180
secrets management tools for that

00:03:49,720 --> 00:03:53,500
specific task so be aware that

00:03:52,180 --> 00:03:55,150
occasionally you will need to look

00:03:53,500 --> 00:03:57,700
outside the box that dedicated tools and

00:03:55,150 --> 00:03:59,020
that's okay so we know what types of

00:03:57,700 --> 00:04:01,570
secrets we're talking about let's take

00:03:59,020 --> 00:04:02,800
their temperature hot secrets or online

00:04:01,570 --> 00:04:04,239
secrets are things that are needed

00:04:02,800 --> 00:04:06,100
during the normal operation of your

00:04:04,239 --> 00:04:08,410
infrastructure and they need to be used

00:04:06,100 --> 00:04:10,570
and manipulated autonomously so for

00:04:08,410 --> 00:04:12,310
example you have a flask web app if you

00:04:10,570 --> 00:04:13,600
Minh had to sit at the console and type

00:04:12,310 --> 00:04:15,310
in the database password every time a

00:04:13,600 --> 00:04:17,049
new web request came in your apps not

00:04:15,310 --> 00:04:18,910
going to get a whole lot of work done so

00:04:17,049 --> 00:04:20,080
that is an example of something where it

00:04:18,910 --> 00:04:21,549
needs to be available for the

00:04:20,080 --> 00:04:23,939
application to use whenever it wants

00:04:21,549 --> 00:04:26,349
without human interaction

00:04:23,939 --> 00:04:28,150
to compare we have cold or offline

00:04:26,349 --> 00:04:30,159
secrets which are things that are secret

00:04:28,150 --> 00:04:31,870
they're important we need to store them

00:04:30,159 --> 00:04:34,240
for a long piece of a long period of

00:04:31,870 --> 00:04:36,639
time but we don't necessarily need them

00:04:34,240 --> 00:04:38,740
every day or every minute so for example

00:04:36,639 --> 00:04:40,569
AWS master account passwords or

00:04:38,740 --> 00:04:42,099
revocation certificates these are things

00:04:40,569 --> 00:04:45,219
that we can put behind a bit more of a

00:04:42,099 --> 00:04:46,569
wall to get to the hot versus cold

00:04:45,219 --> 00:04:49,680
dichotomy Israeli a hundred percent

00:04:46,569 --> 00:04:51,729
clear and practice most small

00:04:49,680 --> 00:04:53,529
application clusters let's say you're

00:04:51,729 --> 00:04:55,599
going to need to have human interaction

00:04:53,529 --> 00:04:57,520
to boot a new server into your web app

00:04:55,599 --> 00:04:59,259
pool but once the server is running it

00:04:57,520 --> 00:05:00,759
needs to run autonomously so it's start

00:04:59,259 --> 00:05:03,400
sort of hot there start sort of cold and

00:05:00,759 --> 00:05:05,050
then it goes to the hot side and then

00:05:03,400 --> 00:05:06,550
within online or hot secrets there's

00:05:05,050 --> 00:05:08,529
another sub spectrum related to how

00:05:06,550 --> 00:05:10,360
often the secret changes most

00:05:08,529 --> 00:05:12,279
traditional hot secret management

00:05:10,360 --> 00:05:14,860
systems are built around slow secrets

00:05:12,279 --> 00:05:16,539
once set a secret usually only changes

00:05:14,860 --> 00:05:18,370
either because of an emergency like some

00:05:16,539 --> 00:05:20,409
kind of compromise or to comply with

00:05:18,370 --> 00:05:21,699
industry regulations like PCI DSS sort

00:05:20,409 --> 00:05:24,699
says you have to rotate your keys every

00:05:21,699 --> 00:05:26,409
six months rotating a slow secret is

00:05:24,699 --> 00:05:28,000
usually a human initiated action and

00:05:26,409 --> 00:05:29,050
it's something that's complicated enough

00:05:28,000 --> 00:05:31,569
that you don't want to do it every day

00:05:29,050 --> 00:05:33,240
biggest example is TLS keys and

00:05:31,569 --> 00:05:35,500
certificates we all know these change

00:05:33,240 --> 00:05:37,300
they change maybe every year every two

00:05:35,500 --> 00:05:38,680
years but day to day you think of a TLS

00:05:37,300 --> 00:05:41,169
key and certificate as being relatively

00:05:38,680 --> 00:05:42,819
static data you probably manage and

00:05:41,169 --> 00:05:46,089
treat them as you would any other static

00:05:42,819 --> 00:05:47,620
file some newer secrets platforms are

00:05:46,089 --> 00:05:49,899
bringing in the idea fast automatic

00:05:47,620 --> 00:05:51,729
rotation so for example OCSP stapling

00:05:49,899 --> 00:05:53,259
which is basically like automatically

00:05:51,729 --> 00:05:55,839
regenerating your certificate every 15

00:05:53,259 --> 00:05:59,050
minutes or ec2 roll credentials which

00:05:55,839 --> 00:06:01,029
reset every six hours within reason the

00:05:59,050 --> 00:06:02,469
more often a secret is rotated the more

00:06:01,029 --> 00:06:05,259
secure you're going to be if there had

00:06:02,469 --> 00:06:06,550
been a brute force or a code leak of

00:06:05,259 --> 00:06:08,169
some kind that you weren't aware of yet

00:06:06,550 --> 00:06:11,349
every time you rotate the secret you

00:06:08,169 --> 00:06:12,819
reset the clock that said the fast

00:06:11,349 --> 00:06:14,439
rotation does usually require more

00:06:12,819 --> 00:06:15,639
coordination between the secret consumer

00:06:14,439 --> 00:06:18,069
and secret management platform because

00:06:15,639 --> 00:06:19,930
the consumer has to understand you know

00:06:18,069 --> 00:06:22,509
TTL values expiration time errors and

00:06:19,930 --> 00:06:23,949
how to refresh the data so that's

00:06:22,509 --> 00:06:25,330
properties of Secrets let's talk about

00:06:23,949 --> 00:06:27,370
properties of Secrets management systems

00:06:25,330 --> 00:06:28,870
the principle of least access or

00:06:27,370 --> 00:06:30,399
principle of least privilege at least as

00:06:28,870 --> 00:06:32,080
it pertains to computer science it

00:06:30,399 --> 00:06:34,389
generally attributed to Jerry saltzer in

00:06:32,080 --> 00:06:35,979
a 1974 ACM paper it's mostly common

00:06:34,389 --> 00:06:37,300
sense but it's so often ignored the

00:06:35,979 --> 00:06:39,039
Bears strenuous repetition

00:06:37,300 --> 00:06:40,569
in short a servicer tool should have

00:06:39,039 --> 00:06:43,870
access only to the secrets it requires

00:06:40,569 --> 00:06:45,009
and nothing else quality of every

00:06:43,870 --> 00:06:46,599
secrets management platform should

00:06:45,009 --> 00:06:49,720
always be judged on these two principles

00:06:46,599 --> 00:06:51,129
first how well can it implement Prince

00:06:49,720 --> 00:06:52,599
Mobley's privilege and then how much

00:06:51,129 --> 00:06:54,340
audit information is recorded when

00:06:52,599 --> 00:06:55,900
something goes wrong something will go

00:06:54,340 --> 00:06:57,699
wrong at some point and you're going to

00:06:55,900 --> 00:07:00,879
want to know what was accessed when how

00:06:57,699 --> 00:07:02,050
and where other features are important

00:07:00,879 --> 00:07:03,610
in specific tools and we'll talk about

00:07:02,050 --> 00:07:04,960
those later they'll make or break your

00:07:03,610 --> 00:07:06,490
use case for specific tools and

00:07:04,960 --> 00:07:08,770
techniques but always start with an

00:07:06,490 --> 00:07:10,060
examination of these two properties all

00:07:08,770 --> 00:07:12,940
right let's do it let's manage some

00:07:10,060 --> 00:07:16,389
secrets cool BAM done we can all go home

00:07:12,940 --> 00:07:18,069
right all right we've all done this I've

00:07:16,389 --> 00:07:19,750
done this plenty of times and we knew it

00:07:18,069 --> 00:07:22,030
was a bad idea but maybe not why it was

00:07:19,750 --> 00:07:23,440
a bad idea what we've done breaks both

00:07:22,030 --> 00:07:25,780
of our guiding principles we've

00:07:23,440 --> 00:07:27,729
permanently linked the privilege of able

00:07:25,780 --> 00:07:29,979
to clone the repository with the

00:07:27,729 --> 00:07:32,229
privilege of can read database password

00:07:29,979 --> 00:07:34,569
on top of that we have no audit logging

00:07:32,229 --> 00:07:36,219
at best maybe we have a list of who

00:07:34,569 --> 00:07:37,750
cloned the repository from the git

00:07:36,219 --> 00:07:40,690
server but beyond that we have no idea

00:07:37,750 --> 00:07:42,789
who access the password so all in all

00:07:40,690 --> 00:07:44,080
not a good idea we have a strong feeling

00:07:42,789 --> 00:07:45,819
at this point that we want to make

00:07:44,080 --> 00:07:47,770
things better but we've to figure out

00:07:45,819 --> 00:07:49,960
how we're going to improve things so the

00:07:47,770 --> 00:07:51,069
next port the next port the next point

00:07:49,960 --> 00:07:52,750
that you need to look at is threat

00:07:51,069 --> 00:07:54,819
modeling figure out what the attack

00:07:52,750 --> 00:07:56,080
surfaces are how you're going to defend

00:07:54,819 --> 00:07:58,060
them and what a successful attack

00:07:56,080 --> 00:08:01,479
against each surface would bring to the

00:07:58,060 --> 00:08:03,370
table the eight major levels that I use

00:08:01,479 --> 00:08:04,630
are here again I'm not talking about web

00:08:03,370 --> 00:08:06,759
app security there's a lot of things

00:08:04,630 --> 00:08:08,229
inside your django or flask or whatever

00:08:06,759 --> 00:08:09,879
application you need to deal with i'm

00:08:08,229 --> 00:08:14,590
most looking at infrastructure level

00:08:09,879 --> 00:08:15,639
protections brute force simplest one if

00:08:14,590 --> 00:08:17,469
you're on the internet you see a

00:08:15,639 --> 00:08:19,479
non-stop parade of these on all the

00:08:17,469 --> 00:08:22,000
major ports the simplest solutions to

00:08:19,479 --> 00:08:24,279
these are the three RS rate limit access

00:08:22,000 --> 00:08:26,560
things like logins or API use especially

00:08:24,279 --> 00:08:29,469
if it's invalid use put rate limits on

00:08:26,560 --> 00:08:31,449
those restrict access so if you're say

00:08:29,469 --> 00:08:33,070
using a database server for an internal

00:08:31,449 --> 00:08:34,209
web app don't put the database server on

00:08:33,070 --> 00:08:35,919
the internet doesn't need to be there

00:08:34,209 --> 00:08:37,599
put it on an internal subnet firewall it

00:08:35,919 --> 00:08:38,949
off whatever it's not on the internet

00:08:37,599 --> 00:08:42,219
it's not going to be subject to this

00:08:38,949 --> 00:08:44,620
massive wave of brute force and finally

00:08:42,219 --> 00:08:46,089
rotate your secrets if it takes three

00:08:44,620 --> 00:08:47,980
years to brute force something and you

00:08:46,089 --> 00:08:49,660
rotate it every 15 minutes well not

00:08:47,980 --> 00:08:50,950
really a big deal and then finally you

00:08:49,660 --> 00:08:52,360
can use techniques

00:08:50,950 --> 00:08:54,670
technologies that are currently beyond

00:08:52,360 --> 00:08:56,410
brute-forcing like say 4096 bit RSA keys

00:08:54,670 --> 00:08:58,630
but remember that's always going to be a

00:08:56,410 --> 00:09:00,370
moving target and traffic or data thats

00:08:58,630 --> 00:09:03,040
stolen or recorded now could potentially

00:09:00,370 --> 00:09:05,620
be decrypted in the future all right

00:09:03,040 --> 00:09:07,600
next up weakest threat of all of these

00:09:05,620 --> 00:09:08,530
is a code leak taking aside the effects

00:09:07,600 --> 00:09:10,180
to the business which may be

00:09:08,530 --> 00:09:12,700
considerable but aren't my problem is an

00:09:10,180 --> 00:09:14,410
ops person hopefully this isn't going to

00:09:12,700 --> 00:09:16,000
be a big deal for security we all know

00:09:14,410 --> 00:09:18,130
we shouldn't hard code passwords into

00:09:16,000 --> 00:09:20,290
our source code so somebody oops seeing

00:09:18,130 --> 00:09:22,090
on github shouldn't be a big deal this

00:09:20,290 --> 00:09:23,830
can also happen more subtly over time

00:09:22,090 --> 00:09:25,570
things like debug pages will usually

00:09:23,830 --> 00:09:27,550
reveal one line of source code at a time

00:09:25,570 --> 00:09:29,800
and if an attacker is smart enough they

00:09:27,550 --> 00:09:31,390
can manipulate your stack traces to

00:09:29,800 --> 00:09:34,540
figure out the lines of code that they

00:09:31,390 --> 00:09:37,600
need but overall like I said shouldn't

00:09:34,540 --> 00:09:39,700
really be a big deal next up is a backup

00:09:37,600 --> 00:09:41,320
leak so remember the instagram hack from

00:09:39,700 --> 00:09:43,570
about a year ago that was one of these

00:09:41,320 --> 00:09:45,250
they put a backup file up on s3 and

00:09:43,570 --> 00:09:48,700
promptly forgot about it and it had live

00:09:45,250 --> 00:09:50,230
credentials in it in general there's a

00:09:48,700 --> 00:09:51,580
couple things need to do here one audit

00:09:50,230 --> 00:09:53,140
your backup system figure out what you

00:09:51,580 --> 00:09:54,460
are backing up every time and take a

00:09:53,140 --> 00:09:56,590
look and see if you can prune stuff out

00:09:54,460 --> 00:09:58,930
of it make sure you update your config

00:09:56,590 --> 00:10:01,690
files block lists of files and things to

00:09:58,930 --> 00:10:03,900
avoid backing up and then also consider

00:10:01,690 --> 00:10:06,370
using techniques that will not put

00:10:03,900 --> 00:10:07,990
things into files if it's only ever

00:10:06,370 --> 00:10:11,920
stored in RAM then it can't be caught in

00:10:07,990 --> 00:10:14,020
the backup system traversal attacks you

00:10:11,920 --> 00:10:15,310
know this is usually when you see when

00:10:14,020 --> 00:10:16,780
your traversal you're thinking directory

00:10:15,310 --> 00:10:18,250
traversal but from an instructor point

00:10:16,780 --> 00:10:19,870
of view traversal is anything where the

00:10:18,250 --> 00:10:21,940
application has legitimate access to a

00:10:19,870 --> 00:10:24,130
secret but an attacker shouldn't so for

00:10:21,940 --> 00:10:26,140
example your database password your

00:10:24,130 --> 00:10:27,310
application needs real access to that it

00:10:26,140 --> 00:10:29,350
needs to get the database password to

00:10:27,310 --> 00:10:30,640
connect the database but a user using

00:10:29,350 --> 00:10:33,160
your web app shouldn't have access to

00:10:30,640 --> 00:10:34,870
that database password so things like

00:10:33,160 --> 00:10:36,660
sequel injection directory traversal all

00:10:34,870 --> 00:10:38,680
of those fall into the same category and

00:10:36,660 --> 00:10:40,540
here is really where good web app

00:10:38,680 --> 00:10:41,860
security shines you know make sure that

00:10:40,540 --> 00:10:43,480
your app is well written such that they

00:10:41,860 --> 00:10:45,370
can't extract files or do sequel

00:10:43,480 --> 00:10:48,790
injection hopefully that's not news to

00:10:45,370 --> 00:10:50,320
anyone here I will mention a frequent

00:10:48,790 --> 00:10:51,490
traversal style attack takes advantage

00:10:50,320 --> 00:10:53,800
of the fact that a lot of people these

00:10:51,490 --> 00:10:55,540
days store secrets and tokens in

00:10:53,800 --> 00:10:57,190
environment variables the 12 factor

00:10:55,540 --> 00:10:59,230
manifesto from Heroku even go so far as

00:10:57,190 --> 00:11:02,470
calling this a best practice I disagree

00:10:59,230 --> 00:11:04,150
so big problem with this is a things

00:11:02,470 --> 00:11:05,560
like debug pages and error

00:11:04,150 --> 00:11:07,690
lugz likes a century they usually

00:11:05,560 --> 00:11:09,340
capture all local environment variables

00:11:07,690 --> 00:11:12,400
and ship them off in plain text to send

00:11:09,340 --> 00:11:13,480
in a log file somewhere so yes most of

00:11:12,400 --> 00:11:14,590
these are configurable and you can

00:11:13,480 --> 00:11:16,480
probably prevent them from showing

00:11:14,590 --> 00:11:18,220
individual environment variables but if

00:11:16,480 --> 00:11:19,750
you ever forget one you know all that

00:11:18,220 --> 00:11:21,700
work you did to protect that valuable

00:11:19,750 --> 00:11:22,990
API token is all now moot because it's

00:11:21,700 --> 00:11:25,060
chilling over in plain text somewhere

00:11:22,990 --> 00:11:26,410
you're not watching carefully so be

00:11:25,060 --> 00:11:29,920
careful with these I consider them

00:11:26,410 --> 00:11:32,320
unsafe at any speed all right next up on

00:11:29,920 --> 00:11:33,760
attack surfaces code execution we've

00:11:32,320 --> 00:11:35,410
moved beyond the bounds of good web app

00:11:33,760 --> 00:11:37,750
security no matter how awesome your

00:11:35,410 --> 00:11:39,670
internal Django security is they can run

00:11:37,750 --> 00:11:41,380
code so all of that is completely moot

00:11:39,670 --> 00:11:43,090
so here we fall back on structural

00:11:41,380 --> 00:11:45,220
protections principle of least access is

00:11:43,090 --> 00:11:46,750
the most important thing if the web app

00:11:45,220 --> 00:11:48,310
didn't have access to a secret there is

00:11:46,750 --> 00:11:51,160
no possible way than attacker could get

00:11:48,310 --> 00:11:52,660
access to it things like using file

00:11:51,160 --> 00:11:54,790
permissions dropping privileges as a

00:11:52,660 --> 00:11:57,580
service using Linux containers all can

00:11:54,790 --> 00:11:58,990
help here when Dante passes through the

00:11:57,580 --> 00:12:01,870
gates of hell he reads in description

00:11:58,990 --> 00:12:03,700
abandon all hope ye who enter here once

00:12:01,870 --> 00:12:06,250
you have root execution basically all

00:12:03,700 --> 00:12:07,750
local protections are void containers

00:12:06,250 --> 00:12:10,840
yeah that's fantastic doesn't help

00:12:07,750 --> 00:12:12,250
anymore I sure somebody somewhere has

00:12:10,840 --> 00:12:14,560
been told the doctor will protect you in

00:12:12,250 --> 00:12:16,450
this case it will not here is where

00:12:14,560 --> 00:12:18,130
audit trails really start to matter you

00:12:16,450 --> 00:12:19,540
want to see exactly what was accessed

00:12:18,130 --> 00:12:23,080
and when so you know exactly what

00:12:19,540 --> 00:12:24,610
secrets you need to go rotate another

00:12:23,080 --> 00:12:26,950
commonly ignored attack surface is

00:12:24,610 --> 00:12:28,780
laptop theft at most small companies

00:12:26,950 --> 00:12:31,360
access to a developer workstation gives

00:12:28,780 --> 00:12:33,640
you root on every server fortunately

00:12:31,360 --> 00:12:35,350
laptops used by humans not other servers

00:12:33,640 --> 00:12:36,520
so we can use techniques like disk

00:12:35,350 --> 00:12:37,780
encryption where you can have an

00:12:36,520 --> 00:12:40,120
encryption password that the person

00:12:37,780 --> 00:12:41,620
never tells anyone else if you're not

00:12:40,120 --> 00:12:43,090
already using disk encryption will your

00:12:41,620 --> 00:12:45,790
developer machines you should probably

00:12:43,090 --> 00:12:48,340
be doing that and then finally the

00:12:45,790 --> 00:12:49,210
nebulous higher power attack surface so

00:12:48,340 --> 00:12:51,160
where a lot of people draw the line on

00:12:49,210 --> 00:12:52,780
planning either voluntarily or because

00:12:51,160 --> 00:12:53,710
they have industry regulations like for

00:12:52,780 --> 00:12:56,710
me I work in the financial services

00:12:53,710 --> 00:12:58,420
industry we can't tell the US Federal

00:12:56,710 --> 00:13:01,030
Bureau of Investigation to snag off it's

00:12:58,420 --> 00:13:02,590
just not an option but there's this you

00:13:01,030 --> 00:13:04,300
know in cascading list things like

00:13:02,590 --> 00:13:06,640
bicycle court warrants advanced

00:13:04,300 --> 00:13:08,650
persistent threats natural disasters who

00:13:06,640 --> 00:13:10,300
knows figure out what your response is

00:13:08,650 --> 00:13:13,440
going to be even if that response is I

00:13:10,300 --> 00:13:13,440
don't know I'm going to find a new job

00:13:13,600 --> 00:13:18,020
alright so those are our eight attack

00:13:16,460 --> 00:13:20,590
surfaces let's talk a little bit about

00:13:18,020 --> 00:13:23,150
some of the cryptography that's involved

00:13:20,590 --> 00:13:25,370
first up symmetric versus asymmetric

00:13:23,150 --> 00:13:26,870
cryptography hopefully this is not news

00:13:25,370 --> 00:13:28,970
for everyone but just as a quick review

00:13:26,870 --> 00:13:31,610
we start with a secret we generate a

00:13:28,970 --> 00:13:32,990
random key we use the key to encrypt the

00:13:31,610 --> 00:13:36,650
secret we get some kind of encrypted

00:13:32,990 --> 00:13:38,390
blob that can't be read we transfer the

00:13:36,650 --> 00:13:39,770
key over to the server who transfer the

00:13:38,390 --> 00:13:41,690
encrypted blob over to the server the

00:13:39,770 --> 00:13:43,040
server uses the key to decrypt the

00:13:41,690 --> 00:13:44,660
encrypted blob and get back our secret

00:13:43,040 --> 00:13:47,500
fairly simple use of symmetric

00:13:44,660 --> 00:13:49,730
encryption this is things like AES etc

00:13:47,500 --> 00:13:51,230
to compare that we have asymmetric

00:13:49,730 --> 00:13:53,870
cryptography where we start with secret

00:13:51,230 --> 00:13:57,230
we generate a public/private key pair on

00:13:53,870 --> 00:13:58,550
the server we retrieve the public key we

00:13:57,230 --> 00:14:00,380
use the public key to generate an

00:13:58,550 --> 00:14:02,240
encrypted blob we send the encrypted

00:14:00,380 --> 00:14:05,420
blob over to the target server and it

00:14:02,240 --> 00:14:06,740
decrypts to the secret this is important

00:14:05,420 --> 00:14:08,690
because there's a couple of different

00:14:06,740 --> 00:14:11,540
main modes of Secrets management tools

00:14:08,690 --> 00:14:13,010
the three are symmetric pre encryption a

00:14:11,540 --> 00:14:15,260
symmetric key encryption and trusted

00:14:13,010 --> 00:14:16,850
third party so symmetric pre encryption

00:14:15,260 --> 00:14:19,520
as you would imagine uses symmetric

00:14:16,850 --> 00:14:22,130
cryptography again we have a secret and

00:14:19,520 --> 00:14:25,850
a random key we use the key to encrypt

00:14:22,130 --> 00:14:27,620
the secret we throw the key onto the

00:14:25,850 --> 00:14:29,090
machines that should have access so in

00:14:27,620 --> 00:14:31,190
this case only two of the servers are

00:14:29,090 --> 00:14:32,510
being given access to the secret we put

00:14:31,190 --> 00:14:34,520
the encrypted blob up on some kind of

00:14:32,510 --> 00:14:36,170
storage system maybe s3 or internal

00:14:34,520 --> 00:14:38,930
database or a chef server or maybe it's

00:14:36,170 --> 00:14:40,850
copying directly but some kind of less

00:14:38,930 --> 00:14:42,140
secure or authenticated storage

00:14:40,850 --> 00:14:44,210
mechanism because the encrypted blob

00:14:42,140 --> 00:14:47,090
can't be read we don't really care who

00:14:44,210 --> 00:14:48,980
has access to it and then the server's

00:14:47,090 --> 00:14:51,020
they can all download the encrypted blob

00:14:48,980 --> 00:14:53,660
but only the ones with the key get

00:14:51,020 --> 00:14:56,300
access to the secret to compare this

00:14:53,660 --> 00:14:58,220
with a symmetric key encryption we

00:14:56,300 --> 00:15:00,500
generate a key pair on all of the

00:14:58,220 --> 00:15:02,600
machines we copy all of the public keys

00:15:00,500 --> 00:15:05,510
up to the storage system we retrieve

00:15:02,600 --> 00:15:07,310
those public keys onto our admin we use

00:15:05,510 --> 00:15:10,430
each public key to generate a separate

00:15:07,310 --> 00:15:13,250
encrypted private copy we copy all of

00:15:10,430 --> 00:15:16,040
those onto the storage system copy those

00:15:13,250 --> 00:15:18,200
down onto the relevant machines and then

00:15:16,040 --> 00:15:20,210
each server uses its private key to

00:15:18,200 --> 00:15:22,550
decrypt its corresponding encrypted copy

00:15:20,210 --> 00:15:23,870
this means is that a symmetric key

00:15:22,550 --> 00:15:25,580
encryption systems because they have to

00:15:23,870 --> 00:15:26,880
generate a separate encrypted copy for

00:15:25,580 --> 00:15:28,200
each server

00:15:26,880 --> 00:15:30,330
generally don't work with techniques

00:15:28,200 --> 00:15:32,280
like auto scaling because a new server

00:15:30,330 --> 00:15:33,390
boots up it can generate a key but

00:15:32,280 --> 00:15:34,920
there's not going to be an encrypted

00:15:33,390 --> 00:15:38,490
copy sitting and waiting for it in the

00:15:34,920 --> 00:15:41,130
storage system to address that we turn

00:15:38,490 --> 00:15:43,920
to trusted third-party systems now what

00:15:41,130 --> 00:15:46,260
we have here instead is the trusted

00:15:43,920 --> 00:15:48,360
third party will be given the secret in

00:15:46,260 --> 00:15:50,940
plain text we might use transfer

00:15:48,360 --> 00:15:52,590
encryption or at rescue encryption but

00:15:50,940 --> 00:15:54,240
at heart a trusted third party system

00:15:52,590 --> 00:15:57,090
gets access to all of the secrets in

00:15:54,240 --> 00:15:59,070
plain text in memory at runtime but we

00:15:57,090 --> 00:16:00,960
attach a policy to it and we say only

00:15:59,070 --> 00:16:04,500
and the secret outs to servers B and C

00:16:00,960 --> 00:16:06,030
and then it does that so server d it can

00:16:04,500 --> 00:16:07,350
access the secrets management system but

00:16:06,030 --> 00:16:08,820
no matter what it does it shouldn't get

00:16:07,350 --> 00:16:10,410
access to our secret so we're giving it

00:16:08,820 --> 00:16:12,360
access to the entire universe of our

00:16:10,410 --> 00:16:14,580
secrets and we're trusting its internal

00:16:12,360 --> 00:16:18,420
access controls to only do what we told

00:16:14,580 --> 00:16:20,660
it all right so with those definitions

00:16:18,420 --> 00:16:23,130
mine let's look at some specific tools

00:16:20,660 --> 00:16:24,420
starting to the top again text files we

00:16:23,130 --> 00:16:26,070
covered this already so I won't dwell on

00:16:24,420 --> 00:16:27,960
it long usually this will take the form

00:16:26,070 --> 00:16:29,520
of either checking stuff into individual

00:16:27,960 --> 00:16:30,930
application repositories sometimes

00:16:29,520 --> 00:16:33,270
you'll see a git repository just called

00:16:30,930 --> 00:16:35,160
secrets or keys or sometimes you'll have

00:16:33,270 --> 00:16:37,470
things just being SCP de round manually

00:16:35,160 --> 00:16:39,420
TLS Keys that's very often you get you

00:16:37,470 --> 00:16:40,590
know a text file down from your CA and

00:16:39,420 --> 00:16:42,630
you just copy it onto each machine

00:16:40,590 --> 00:16:45,270
individually but we've already talked

00:16:42,630 --> 00:16:47,280
about why this is bad so moving on next

00:16:45,270 --> 00:16:48,510
step a lot of people reach for is I want

00:16:47,280 --> 00:16:50,010
it to be encrypted because encryption

00:16:48,510 --> 00:16:51,600
makes everything better right cool

00:16:50,010 --> 00:16:52,920
there's a lot of tools that do this that

00:16:51,600 --> 00:16:53,940
integrate would get get crypt is

00:16:52,920 --> 00:16:55,440
probably the best of them so it's the

00:16:53,940 --> 00:16:57,330
one I'll talk about it can be used in

00:16:55,440 --> 00:16:58,200
either symmetric or asymmetric modes but

00:16:57,330 --> 00:16:59,550
it doesn't really matter it doesn't

00:16:58,200 --> 00:17:01,920
change the underlying problem with it

00:16:59,550 --> 00:17:03,300
which is it's full of foot guns we've

00:17:01,920 --> 00:17:06,270
already talked about why get doesn't

00:17:03,300 --> 00:17:07,589
really give us good audit logs so no

00:17:06,270 --> 00:17:09,089
matter what you do with all of the

00:17:07,589 --> 00:17:11,220
encryption in the world it's not going

00:17:09,089 --> 00:17:13,439
to give you a better audit log and it

00:17:11,220 --> 00:17:15,270
also is a whitelist system generally so

00:17:13,439 --> 00:17:16,860
if you forget to mark that a file needs

00:17:15,270 --> 00:17:18,510
to be encrypted you'll accidentally just

00:17:16,860 --> 00:17:20,430
push it up in the clear to your git

00:17:18,510 --> 00:17:21,600
repository then you get to deal with the

00:17:20,430 --> 00:17:23,010
lovely thing of finding that one

00:17:21,600 --> 00:17:24,390
question on Stack Overflow where you

00:17:23,010 --> 00:17:26,540
learn how to expunge data from a git

00:17:24,390 --> 00:17:28,740
repository we've all done it admit it

00:17:26,540 --> 00:17:30,270
alright so next up we don't wanna put

00:17:28,740 --> 00:17:31,920
stuff and get what else can we put them

00:17:30,270 --> 00:17:33,420
in well we've got these cluster managers

00:17:31,920 --> 00:17:34,980
just lying around their key value stores

00:17:33,420 --> 00:17:37,830
they've got a CLS right we can probably

00:17:34,980 --> 00:17:39,810
just put some data in them right this is

00:17:37,830 --> 00:17:40,620
okay there's also tools but a layer

00:17:39,810 --> 00:17:42,360
encryption on

00:17:40,620 --> 00:17:44,190
but it doesn't really help anything the

00:17:42,360 --> 00:17:45,540
core problem is that the ACLS on these

00:17:44,190 --> 00:17:48,030
systems are usually not wonderful

00:17:45,540 --> 00:17:50,010
console is okay at CDs I don't love

00:17:48,030 --> 00:17:51,960
zookeeper as a really powerful ACL

00:17:50,010 --> 00:17:55,800
system that I've literally never seen

00:17:51,960 --> 00:17:56,880
anyone implement correctly so maybe this

00:17:55,800 --> 00:17:58,050
works for you but I don't really

00:17:56,880 --> 00:18:00,780
recommend it just because it's so

00:17:58,050 --> 00:18:02,160
difficult to do right so I'm active in

00:18:00,780 --> 00:18:03,090
the chef world like I said before I see

00:18:02,160 --> 00:18:04,530
a lot of people reaching for chef

00:18:03,090 --> 00:18:05,970
encrypted data bags because again it

00:18:04,530 --> 00:18:08,010
says encryption on it that'll just make

00:18:05,970 --> 00:18:09,720
everything better unfortunately

00:18:08,010 --> 00:18:11,490
encrypted data bags are asymmetric

00:18:09,720 --> 00:18:13,590
system so we saw before is we have to

00:18:11,490 --> 00:18:15,300
generate that random key and then send

00:18:13,590 --> 00:18:17,309
the key to all of our servers they can

00:18:15,300 --> 00:18:18,660
decrypt the encrypted blob that key is

00:18:17,309 --> 00:18:21,630
itself a secret so we're not really

00:18:18,660 --> 00:18:22,710
solving encryption or so not solving

00:18:21,630 --> 00:18:24,540
secrets management and we deal with

00:18:22,710 --> 00:18:26,040
symmetric pre encryption systems all

00:18:24,540 --> 00:18:28,020
we're doing is pushing down a level of

00:18:26,040 --> 00:18:29,309
recursion that might be okay it means

00:18:28,020 --> 00:18:31,290
that you've to solve key management once

00:18:29,309 --> 00:18:32,730
and doing it by hand once and then

00:18:31,290 --> 00:18:34,650
having a nice set of tools built on top

00:18:32,730 --> 00:18:36,960
of that might be okay if you don't start

00:18:34,650 --> 00:18:39,140
and stop servers very often but be aware

00:18:36,960 --> 00:18:41,250
that you probably still got this sort of

00:18:39,140 --> 00:18:43,920
secondary key management problem to

00:18:41,250 --> 00:18:46,290
solve ansible vault is very similar to

00:18:43,920 --> 00:18:47,730
chef encrypted data bags but it takes

00:18:46,290 --> 00:18:48,809
advantage of ansibles put space nature

00:18:47,730 --> 00:18:50,700
so it's better having to put the

00:18:48,809 --> 00:18:52,380
decryption key on every target machine

00:18:50,700 --> 00:18:54,600
you only need it on the workstation of

00:18:52,380 --> 00:18:55,830
the person running ansible push but we

00:18:54,600 --> 00:18:57,840
still the same problem how does the

00:18:55,830 --> 00:19:01,410
person get that password did they copy

00:18:57,840 --> 00:19:04,470
it out of an internal wiki mm-hmm all

00:19:01,410 --> 00:19:05,880
right here I EML is the closest analogue

00:19:04,470 --> 00:19:07,470
to encrypted bags and ansible vault but

00:19:05,880 --> 00:19:09,090
for the puppet world but instead it's a

00:19:07,470 --> 00:19:10,800
trusted third party system so we're

00:19:09,090 --> 00:19:12,270
going to encrypt all of the secrets in a

00:19:10,800 --> 00:19:13,800
way the puppet master can decrypt them

00:19:12,270 --> 00:19:15,420
and then we're going to trust the puppet

00:19:13,800 --> 00:19:17,390
master will only hand the secrets out to

00:19:15,420 --> 00:19:20,070
the people that we have said it should

00:19:17,390 --> 00:19:22,020
how much you trust this should always be

00:19:20,070 --> 00:19:24,030
got checked I can say in this case the

00:19:22,020 --> 00:19:25,710
puppet master and here EML are fine so I

00:19:24,030 --> 00:19:27,750
would trust that their internal ACLs or

00:19:25,710 --> 00:19:29,700
well implemented and safe but if it's a

00:19:27,750 --> 00:19:31,230
brand new system maybe go and look at

00:19:29,700 --> 00:19:35,460
how strong you think their ACL code is

00:19:31,230 --> 00:19:36,960
and then the last of the specific the CM

00:19:35,460 --> 00:19:39,090
specific tool is a chef vault this

00:19:36,960 --> 00:19:41,070
builds on top of encrypted data bags to

00:19:39,090 --> 00:19:43,500
build a key distribution system taking

00:19:41,070 --> 00:19:45,750
advantage of the fact that chef uses RSA

00:19:43,500 --> 00:19:47,370
key pairs for API authentication but

00:19:45,750 --> 00:19:49,020
again we've got the same problem those

00:19:47,370 --> 00:19:50,070
key pairs themselves or secrets and we

00:19:49,020 --> 00:19:52,080
need to figure out how to manage them

00:19:50,070 --> 00:19:53,100
even people that have used chef for a

00:19:52,080 --> 00:19:54,210
lot of years probably don't know how to

00:19:53,100 --> 00:19:57,330
rotate their chef client

00:19:54,210 --> 00:19:58,980
he's so beware all right leaving the

00:19:57,330 --> 00:20:00,510
realm of single cm tools we've got hash

00:19:58,980 --> 00:20:02,550
core vault new kid on the block

00:20:00,510 --> 00:20:04,140
relatively powerful and making a lot of

00:20:02,550 --> 00:20:05,670
waves it's a dedicated secrets

00:20:04,140 --> 00:20:07,050
management platform so built from the

00:20:05,670 --> 00:20:09,840
ground up has all of the features you'd

00:20:07,050 --> 00:20:11,460
expect granular acl's high quality audit

00:20:09,840 --> 00:20:13,800
logs modular backends all that nice

00:20:11,460 --> 00:20:16,590
stuff and best a breed system for auto

00:20:13,800 --> 00:20:18,690
rotation of fast secrets slightly older

00:20:16,590 --> 00:20:20,040
but still solid as squares key Wiz it's

00:20:18,690 --> 00:20:22,890
got a more limited data model than hash

00:20:20,040 --> 00:20:24,900
court vault so it's somewhat more

00:20:22,890 --> 00:20:27,030
difficult to use with passwords and

00:20:24,900 --> 00:20:28,380
tokens it really excels keys through Q

00:20:27,030 --> 00:20:30,780
as FS that we'll talk about in a second

00:20:28,380 --> 00:20:33,650
but because it's more limited its

00:20:30,780 --> 00:20:36,090
ultimate battle tested a lot harder for

00:20:33,650 --> 00:20:37,860
people that are one hundred percent AWS

00:20:36,090 --> 00:20:39,630
based and are never planning to leave my

00:20:37,860 --> 00:20:41,610
personal recommendation is to use just a

00:20:39,630 --> 00:20:43,320
private s3 bucket and IM permissions

00:20:41,610 --> 00:20:44,550
this can be a little bit difficult to

00:20:43,320 --> 00:20:46,110
configure and a lot of people end up

00:20:44,550 --> 00:20:47,700
writing fairly complex building

00:20:46,110 --> 00:20:49,230
management scripts for it but it means

00:20:47,700 --> 00:20:50,940
you don't to run your own servers for

00:20:49,230 --> 00:20:55,470
any of this it's all integrated into the

00:20:50,940 --> 00:20:57,690
Amazon ecosystem sort of separate from

00:20:55,470 --> 00:21:00,630
using just plain private s3 i should

00:20:57,690 --> 00:21:02,190
mention amazon KMS it's not itself a key

00:21:00,630 --> 00:21:03,750
management sir so it's not itself a

00:21:02,190 --> 00:21:05,700
secret management system it's more of a

00:21:03,750 --> 00:21:07,470
key escrow system we'll look at a couple

00:21:05,700 --> 00:21:10,050
of tools that tied into a full secrets

00:21:07,470 --> 00:21:11,610
management tool but really imagine that

00:21:10,050 --> 00:21:13,680
instead of generating the key on your

00:21:11,610 --> 00:21:15,480
admin workstation you instead generated

00:21:13,680 --> 00:21:17,130
inside kms and it lives there

00:21:15,480 --> 00:21:19,230
permanently and you can just send data

00:21:17,130 --> 00:21:20,970
to KMS to be encrypted or decrypted and

00:21:19,230 --> 00:21:23,670
access to the keys is controlled through

00:21:20,970 --> 00:21:26,730
AWS I am I don't love things that use

00:21:23,670 --> 00:21:29,610
Amazon kms but sometimes it's cool to

00:21:26,730 --> 00:21:31,560
use for things so sneaker is one of the

00:21:29,610 --> 00:21:33,870
tools that builds on top of KMS it uses

00:21:31,560 --> 00:21:35,400
amazon s3 as the storage back end so

00:21:33,870 --> 00:21:37,860
again you have to be running on AWS

00:21:35,400 --> 00:21:39,300
forever for always but a lot of people

00:21:37,860 --> 00:21:40,680
are doing that so it's okay it's a

00:21:39,300 --> 00:21:42,180
command-line tools that can be a little

00:21:40,680 --> 00:21:44,210
bit more difficult to use but it's

00:21:42,180 --> 00:21:47,130
relatively simple to get started with

00:21:44,210 --> 00:21:48,720
confidante also uses kms but uses dynamo

00:21:47,130 --> 00:21:50,190
DB as the back end instead of being a

00:21:48,720 --> 00:21:51,870
command-line tool it's a little micro

00:21:50,190 --> 00:21:52,920
service with its own REST API so that

00:21:51,870 --> 00:21:55,350
can be a little bit easier to integrate

00:21:52,920 --> 00:21:57,510
into other systems it's also got a nice

00:21:55,350 --> 00:22:00,240
little versioning system for seeing when

00:21:57,510 --> 00:22:02,670
secrets change in Y going back to

00:22:00,240 --> 00:22:04,350
command line tools torso is similar to

00:22:02,670 --> 00:22:06,640
sneaker but instead of using kms where

00:22:04,350 --> 00:22:08,860
the key management it uses gpg

00:22:06,640 --> 00:22:10,900
I will mention the problem with gpg is

00:22:08,860 --> 00:22:13,840
by neckbeards for neck beards I say is

00:22:10,900 --> 00:22:17,170
the bearer of a neckbeard it is possible

00:22:13,840 --> 00:22:18,760
to do broad and large-scale automatic

00:22:17,170 --> 00:22:20,860
key distribution and management with gpg

00:22:18,760 --> 00:22:22,510
but it's not easy expect to spend a lot

00:22:20,860 --> 00:22:26,530
of time looking at man pages and being

00:22:22,510 --> 00:22:28,270
mad at the internet sop's is a little

00:22:26,530 --> 00:22:29,290
bit less feature 'full than the previous

00:22:28,270 --> 00:22:31,780
tools because it doesn't do storage

00:22:29,290 --> 00:22:34,480
management but it does allow using

00:22:31,780 --> 00:22:35,770
either KMS or gpg or both so if you're

00:22:34,480 --> 00:22:37,420
running a hybrid infrastructure on

00:22:35,770 --> 00:22:40,120
amazon and on amazon this could be

00:22:37,420 --> 00:22:41,500
interesting red october from clouds

00:22:40,120 --> 00:22:43,030
layer is a bit of a different beast all

00:22:41,500 --> 00:22:45,160
the previous ones have really been

00:22:43,030 --> 00:22:46,480
optimized for hot or online secrets Red

00:22:45,160 --> 00:22:48,640
October is built from the ground up for

00:22:46,480 --> 00:22:50,320
cold secrets so I remember the old

00:22:48,640 --> 00:22:52,690
movies we have to turn two keys to

00:22:50,320 --> 00:22:55,780
launch a nuclear missile it's like that

00:22:52,690 --> 00:22:58,000
but for technology so you can set up

00:22:55,780 --> 00:23:00,280
your key split to say you need two out

00:22:58,000 --> 00:23:03,100
of three or three out of five or five

00:23:00,280 --> 00:23:04,900
out of five of the key holders to unlock

00:23:03,100 --> 00:23:06,610
a given secret you can customize that /

00:23:04,900 --> 00:23:08,800
secret so for things that are high value

00:23:06,610 --> 00:23:12,280
but long term storage this can be very

00:23:08,800 --> 00:23:13,360
nice presented for completeness barbican

00:23:12,280 --> 00:23:15,430
was supposed to be the OpenStack

00:23:13,360 --> 00:23:17,020
equivalent to amazon KMS it is

00:23:15,430 --> 00:23:19,510
unfortunately pretty much dead at this

00:23:17,020 --> 00:23:20,800
point i mentioned conjurer because it's

00:23:19,510 --> 00:23:22,510
the one I see the most but this applies

00:23:20,800 --> 00:23:23,890
pretty universally to all closed source

00:23:22,510 --> 00:23:27,550
proprietary secrets management tools

00:23:23,890 --> 00:23:29,020
trust but verify be very wary when

00:23:27,550 --> 00:23:30,370
people come in claiming that this

00:23:29,020 --> 00:23:32,950
security tool will solve all of your

00:23:30,370 --> 00:23:34,210
problems always examine what is the what

00:23:32,950 --> 00:23:38,800
is the underlying authentication

00:23:34,210 --> 00:23:40,210
mechanism what is the granularity of the

00:23:38,800 --> 00:23:44,830
audit logs with the granularity of the

00:23:40,210 --> 00:23:46,750
ACLS and then the biggest gun in here h

00:23:44,830 --> 00:23:48,460
SMS and their baby brothers the tpms

00:23:46,750 --> 00:23:49,690
tpms if you're running your own hardware

00:23:48,460 --> 00:23:52,270
they come on most modern server

00:23:49,690 --> 00:23:54,340
motherboards but otherwise h SMS are

00:23:52,270 --> 00:23:56,110
hugely expensive dedicated hardware

00:23:54,340 --> 00:23:57,370
amazon will happily least one to you in

00:23:56,110 --> 00:23:59,770
the cloud for only sixteen thousand

00:23:57,370 --> 00:24:01,720
dollars a month but if used correctly

00:23:59,770 --> 00:24:03,340
they are incredibly secure the idea of

00:24:01,720 --> 00:24:04,720
an HSM is that it's a way of building

00:24:03,340 --> 00:24:06,490
one of those public/private key pairs

00:24:04,720 --> 00:24:08,590
except the private key lives inside a

00:24:06,490 --> 00:24:10,300
chip you cannot extract that private key

00:24:08,590 --> 00:24:11,410
short of dissolving the chip in acid and

00:24:10,300 --> 00:24:13,720
reading it out of memory with an

00:24:11,410 --> 00:24:15,310
electron microscope that said bugs in

00:24:13,720 --> 00:24:17,260
firmware are not unheard of but

00:24:15,310 --> 00:24:18,550
relatively rare if used properly if you

00:24:17,260 --> 00:24:20,080
go this route expect to spend a lot of

00:24:18,550 --> 00:24:22,340
money on consultants

00:24:20,080 --> 00:24:23,570
all right throughout all of this we keep

00:24:22,340 --> 00:24:26,300
dancing around the really hard problem

00:24:23,570 --> 00:24:27,470
of Secrets management deep down any

00:24:26,300 --> 00:24:28,790
secret management system needs to

00:24:27,470 --> 00:24:30,470
establish an identity relationship

00:24:28,790 --> 00:24:32,960
between the thing requesting secrets and

00:24:30,470 --> 00:24:35,110
the thing managing them this is in the

00:24:32,960 --> 00:24:40,280
parlance called secure introduction so

00:24:35,110 --> 00:24:41,870
I'm going to do questions usually

00:24:40,280 --> 00:24:43,880
bootstrapping this trust relationship

00:24:41,870 --> 00:24:45,650
boils down to I'm going to generate some

00:24:43,880 --> 00:24:49,120
kind of key or token and then I'm going

00:24:45,650 --> 00:24:52,250
to ssh and whoever answers SSH at IP

00:24:49,120 --> 00:24:55,370
1234 they are going to become identity X

00:24:52,250 --> 00:24:57,350
by holding this token they are who I

00:24:55,370 --> 00:24:59,840
think they are if somebody else answered

00:24:57,350 --> 00:25:01,250
that SSH connection you've you know done

00:24:59,840 --> 00:25:03,530
an end run around the entire security

00:25:01,250 --> 00:25:04,640
model that said some clouds do have

00:25:03,530 --> 00:25:06,230
better techniques for secure

00:25:04,640 --> 00:25:08,750
introduction so amazon has the instance

00:25:06,230 --> 00:25:10,550
identity document google cloud has the

00:25:08,750 --> 00:25:12,410
cloud signature system and azure has the

00:25:10,550 --> 00:25:14,840
azure key manager all of which allow

00:25:12,410 --> 00:25:17,000
much sort of stronger concepts of server

00:25:14,840 --> 00:25:18,740
identity and some tools so like hash

00:25:17,000 --> 00:25:20,300
core vault can now directly use the

00:25:18,740 --> 00:25:21,530
amazon instance identity document for

00:25:20,300 --> 00:25:23,870
authentications you don't have to build

00:25:21,530 --> 00:25:25,760
your own system anymore for that but a

00:25:23,870 --> 00:25:26,840
lot of the other things are not well

00:25:25,760 --> 00:25:29,240
integrated like nothing really

00:25:26,840 --> 00:25:32,870
integrates with google clouds instant

00:25:29,240 --> 00:25:35,120
signatures and if you take as a

00:25:32,870 --> 00:25:36,200
corollary given that you have to do

00:25:35,120 --> 00:25:37,490
secure introduction you have to come

00:25:36,200 --> 00:25:39,440
over this identity management system

00:25:37,490 --> 00:25:41,720
sometimes you can skip the secret parts

00:25:39,440 --> 00:25:43,580
entirely my sequel postgres a lot of

00:25:41,720 --> 00:25:44,900
other internal tools will support using

00:25:43,580 --> 00:25:47,300
TLS client certificates for

00:25:44,900 --> 00:25:48,680
authentication directly public/private

00:25:47,300 --> 00:25:50,270
key pairs the public key is not

00:25:48,680 --> 00:25:52,070
technically a secret because public keys

00:25:50,270 --> 00:25:53,240
are not radioactive they do need to be

00:25:52,070 --> 00:25:54,980
handled very carefully you need to make

00:25:53,240 --> 00:25:57,020
sure that you know the public key you

00:25:54,980 --> 00:25:58,160
get from a machine is who it says it is

00:25:57,020 --> 00:25:59,720
when you get the public key and you

00:25:58,160 --> 00:26:01,580
record it and there's a you know a sort

00:25:59,720 --> 00:26:03,830
of chain of trust all along the way but

00:26:01,580 --> 00:26:05,750
it can be difficult in better ways

00:26:03,830 --> 00:26:07,160
because it's no longer quite as

00:26:05,750 --> 00:26:08,750
radioactive you don't need to keep the

00:26:07,160 --> 00:26:11,360
public key database private or secret

00:26:08,750 --> 00:26:13,460
anymore all right let's talk quickly

00:26:11,360 --> 00:26:15,650
about integrations how to tie this into

00:26:13,460 --> 00:26:17,120
your applications a whole bunch of the

00:26:15,650 --> 00:26:18,920
ones that I mentioned are some kind of

00:26:17,120 --> 00:26:20,900
service so they run an API the two main

00:26:18,920 --> 00:26:23,780
ones hash core vault has a library

00:26:20,900 --> 00:26:25,850
called hvac and KMS and along with all

00:26:23,780 --> 00:26:27,290
the other AWS tools has Bo decor or boto

00:26:25,850 --> 00:26:29,810
if you're on older versions of Python

00:26:27,290 --> 00:26:31,250
I'm sorry and you can just use these

00:26:29,810 --> 00:26:33,050
directly it's a you've got a django

00:26:31,250 --> 00:26:33,740
settings got pie you can use hvac

00:26:33,050 --> 00:26:35,929
directly so

00:26:33,740 --> 00:26:38,000
Oh connects to vault from within your

00:26:35,929 --> 00:26:40,370
django settings and just grab the

00:26:38,000 --> 00:26:42,140
password on the fly this is probably the

00:26:40,370 --> 00:26:45,370
easiest and most direct way but relies

00:26:42,140 --> 00:26:48,440
on being able to change the source code

00:26:45,370 --> 00:26:49,850
for other tools you can integrate them

00:26:48,440 --> 00:26:52,330
in your config management layer salt

00:26:49,850 --> 00:26:54,410
puppets chef ansible whatever it is

00:26:52,330 --> 00:26:56,360
sometimes you'll use it for executing

00:26:54,410 --> 00:26:58,610
some of the CLI driven things other

00:26:56,360 --> 00:27:00,260
times you can pull data you can pull

00:26:58,610 --> 00:27:01,730
data down in your CM tool and write it

00:27:00,260 --> 00:27:04,190
into template files like into a local

00:27:01,730 --> 00:27:06,080
settings whatever it is this is very

00:27:04,190 --> 00:27:07,880
flexible but it usually requires

00:27:06,080 --> 00:27:09,950
differences depending on what secrets

00:27:07,880 --> 00:27:11,540
manager tool you're using relatively

00:27:09,950 --> 00:27:13,640
unique feature of key Wiz is this idea

00:27:11,540 --> 00:27:15,860
of Q is FS it's a fused file system

00:27:13,640 --> 00:27:19,160
driver that acts as an API client for

00:27:15,860 --> 00:27:20,929
Kiwis this is great for dealing with TLS

00:27:19,160 --> 00:27:22,400
and other similar keys on things you

00:27:20,929 --> 00:27:25,670
don't want to modify like say engine X

00:27:22,400 --> 00:27:27,920
you can point it to read its TLS key and

00:27:25,670 --> 00:27:31,309
certificate out of Q is FS so like /

00:27:27,920 --> 00:27:32,270
keys / food up m and all of a sudden you

00:27:31,309 --> 00:27:34,070
don't have to change it anybody in

00:27:32,270 --> 00:27:36,650
genetics but it's reading its key file

00:27:34,070 --> 00:27:38,059
directly out of key Wiz without ever

00:27:36,650 --> 00:27:40,250
touching the disk it's buffered in RAM

00:27:38,059 --> 00:27:42,559
it's much safer to use etc so this is

00:27:40,250 --> 00:27:45,050
super cool if you've got a lot of tools

00:27:42,559 --> 00:27:46,730
that you don't want to modify console

00:27:45,050 --> 00:27:48,320
templates is mostly useful if you're

00:27:46,730 --> 00:27:49,790
using hash court vault it was originally

00:27:48,320 --> 00:27:51,620
part of hash court console but it now

00:27:49,790 --> 00:27:53,600
works with with both council in vault if

00:27:51,620 --> 00:27:55,250
you're already using CM it's very

00:27:53,600 --> 00:27:57,230
similar it'll write data out to template

00:27:55,250 --> 00:27:59,450
files this can be useful if you want to

00:27:57,230 --> 00:28:01,730
use a hash core vault auto rotation

00:27:59,450 --> 00:28:03,740
system so it's changing the secrets at a

00:28:01,730 --> 00:28:05,500
higher interval or faster interval then

00:28:03,740 --> 00:28:07,670
you would be running your CM tool

00:28:05,500 --> 00:28:09,050
similarly end of console I've mentioned

00:28:07,670 --> 00:28:11,000
that i don't like storing things and

00:28:09,050 --> 00:28:12,110
environment variables but end console

00:28:11,000 --> 00:28:14,450
exists if that's the thing that you

00:28:12,110 --> 00:28:16,040
really need to do and summon is similar

00:28:14,450 --> 00:28:17,570
to em con soul it takes secret data and

00:28:16,040 --> 00:28:19,190
shoves it into environment variables and

00:28:17,570 --> 00:28:20,929
then runs a subprocess but it's got

00:28:19,190 --> 00:28:22,640
modular providers for a bunch of systems

00:28:20,929 --> 00:28:24,290
I did mention that I don't love conjurer

00:28:22,640 --> 00:28:25,760
but fortunately some in his open source

00:28:24,290 --> 00:28:28,730
so i can actually audit and make sure

00:28:25,760 --> 00:28:30,380
it's doing the right thing all right so

00:28:28,730 --> 00:28:31,670
in summary check your privilege in your

00:28:30,380 --> 00:28:33,260
audit trails pick your types and

00:28:31,670 --> 00:28:35,170
temperatures of Secrets think about your

00:28:33,260 --> 00:28:38,780
attack surfaces and have a disaster plan

00:28:35,170 --> 00:28:41,480
thank you very much we've got like one

00:28:38,780 --> 00:28:44,880
one one or two questions

00:28:41,480 --> 00:28:46,410
okay if you have a really really good

00:28:44,880 --> 00:28:48,480
question that's suitable for being the

00:28:46,410 --> 00:28:52,590
only question we can ask Noah please

00:28:48,480 --> 00:28:53,960
raise your hand now I terrified the

00:28:52,590 --> 00:28:56,820
audience it looks like we don't have any

00:28:53,960 --> 00:28:58,620
as a token of our thanks for coming

00:28:56,820 --> 00:29:01,590
along here we have this wonderful saving

00:28:58,620 --> 00:29:05,570
tram coffee cup for you everybody please

00:29:01,590 --> 00:29:05,570

YouTube URL: https://www.youtube.com/watch?v=gUpCSgcChRk


