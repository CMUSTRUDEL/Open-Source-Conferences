Title: Empowering X.509 Certificate Management with Python
Publication date: 2016-08-16
Playlist: Pycon Australia 2016
Description: 
	Marlon Dutra
https://2016.pycon-au.org/schedule/68/view_talk
Today, more than ever before, security is part of the fabric of the internet, with most websites defaulting to https over the historically used default of unsecured http. Whenever you see a URL starting with https:// (https:), your browser is sending the HTTP (or Spdy) traffic through a Transport Layer Security (TLS) tunnel. Part of establishing this secure tunnel involves your browser validating an X.509 certificate provided by the website you're viewing. This allows you to be sure that the server on the other end is who it says it is before you send some potentially sensitive information like your username and password.

This is just one example of how these technologies can be used, but there are many more. In distributed systems that communicate sensitive information, like user data, it is imperative to have a mutual authentication mechanism, where the client is confident it is talking to the right service, as well as the service being confident it is talking to the right client. Beyond strong authentication, it is usually desirable to have some authorization logic, to prevent clients from having unrestricted access to all services. 

Since any TCP communication can be tunneled through TLS, and TLS supports such mutual authentication through X.509 certificates, they are the perfect set of tools for the job. The problem to solve then becomes how you manage all of these certificates.

Crafting simple certificates with the openssl command line is a bit tricky but doable. However, modern certificates support a variety of advanced features and it is quite complicated to take full advantage of them through the command line, especially in a programmatic way. This is where Python can be a powerful tool. Through the use of certain libraries, you can inject valuable information into your certificates that can be used for many purposes, such as establishing a robust authorization model for a service.

In this session we'll explore some of the ways you can leverage X.509 certificate features to better protect your systems and data. We'll give specific examples of how to use Python for the programmatic management of complex certificates as well as talking about how the largest website on the Internet, Facebook, handles hundreds of thousands of such certificates in its internal infrastructure, using these same approaches.

By the end of this talk, you will understand how to craft your own elaborate certificates with Python and how to use them to secure communications between networked services.
Captions: 
	00:00:00,030 --> 00:00:03,240
okay good afternoon everybody and

00:00:01,770 --> 00:00:06,120
welcome back from lunch I hope you had a

00:00:03,240 --> 00:00:10,170
lovely time and we are just about to

00:00:06,120 --> 00:00:14,820
start this session this first first talk

00:00:10,170 --> 00:00:16,650
is by Marlin Dora he has over 20 years

00:00:14,820 --> 00:00:17,699
of experience in distributed systems

00:00:16,650 --> 00:00:18,510
with a strong background in

00:00:17,699 --> 00:00:21,600
infrastructure

00:00:18,510 --> 00:00:23,519
he has also Linux systems networking and

00:00:21,600 --> 00:00:25,410
security Marlin has worked Facebook

00:00:23,519 --> 00:00:26,670
since 2012 where he's a production

00:00:25,410 --> 00:00:27,570
engineer and so there's a technical

00:00:26,670 --> 00:00:28,789
leader for the Production Engineering

00:00:27,570 --> 00:00:36,390
security team

00:00:28,789 --> 00:00:36,899
please welcome Alan and his talk hello

00:00:36,390 --> 00:00:38,610
everyone

00:00:36,899 --> 00:00:41,160
can you guys forgive me well I guess

00:00:38,610 --> 00:00:43,800
yeah so really excited to be here this

00:00:41,160 --> 00:00:45,480
is my first time in Australia so it's

00:00:43,800 --> 00:00:47,370
been pretty fun so far so we're going to

00:00:45,480 --> 00:00:49,289
talk about x.509 like everybody uses

00:00:47,370 --> 00:00:51,030
x.509 everyday all day long like

00:00:49,289 --> 00:00:53,910
whenever you access our website that's

00:00:51,030 --> 00:00:55,379
an HTTP whenever you read your email or

00:00:53,910 --> 00:00:58,199
you send an email pretty much is it

00:00:55,379 --> 00:01:00,449
because like everywhere the thing is

00:00:58,199 --> 00:01:03,030
there even though like all of you know

00:01:00,449 --> 00:01:06,360
that it's very likely that a lot of you

00:01:03,030 --> 00:01:08,220
don't know the power of what x.509 what

00:01:06,360 --> 00:01:10,830
we can do with a criminai so I'm gonna

00:01:08,220 --> 00:01:13,470
cover a few things here that is usually

00:01:10,830 --> 00:01:14,400
not very common in everyone's life so

00:01:13,470 --> 00:01:17,570
we're going to talk a little bit about

00:01:14,400 --> 00:01:19,350
how to build an internal CA and why and

00:01:17,570 --> 00:01:22,740
especially how to do that

00:01:19,350 --> 00:01:24,570
programmatically with fight and how to

00:01:22,740 --> 00:01:26,700
do like mutual authentication how to

00:01:24,570 --> 00:01:28,650
authenticate client and how to

00:01:26,700 --> 00:01:31,290
authenticate servers using certificates

00:01:28,650 --> 00:01:32,490
x.509 certificates I'm gonna cover a

00:01:31,290 --> 00:01:34,320
little bit thirty party apps

00:01:32,490 --> 00:01:37,140
unfortunately I have only half an hour

00:01:34,320 --> 00:01:39,140
so I can't do much and I have a series

00:01:37,140 --> 00:01:42,450
of final tips that would be interesting

00:01:39,140 --> 00:01:45,540
first why should I care like where am I

00:01:42,450 --> 00:01:47,729
here and when I talk about this this is

00:01:45,540 --> 00:01:51,479
probably the main reason like managing

00:01:47,729 --> 00:01:53,640
passwords is pretty complicated and a

00:01:51,479 --> 00:01:56,520
lot of security vulnerabilities that we

00:01:53,640 --> 00:01:59,399
have noticed on the internet have been

00:01:56,520 --> 00:02:02,430
caused by leaked passwords or passwords

00:01:59,399 --> 00:02:04,170
committing repos and stuff like that but

00:02:02,430 --> 00:02:05,640
this is not the main reason there's a

00:02:04,170 --> 00:02:08,280
lot of other things that we can solve

00:02:05,640 --> 00:02:10,679
with certificates one of them is like

00:02:08,280 --> 00:02:12,270
you can have short leave the credentials

00:02:10,679 --> 00:02:13,590
so I can give you a certificate that's

00:02:12,270 --> 00:02:13,850
valid for like a month

00:02:13,590 --> 00:02:17,150
or

00:02:13,850 --> 00:02:18,590
so and so that that system can no love

00:02:17,150 --> 00:02:20,210
engaged in that specific period of time

00:02:18,590 --> 00:02:23,390
and then I need to either renew the

00:02:20,210 --> 00:02:26,510
certificate or revoked completely the

00:02:23,390 --> 00:02:28,040
access if it's a temper advanced we can

00:02:26,510 --> 00:02:29,210
have unique identities something that

00:02:28,040 --> 00:02:31,370
you can't have with passwords because

00:02:29,210 --> 00:02:34,430
passwords by nature they are sure so

00:02:31,370 --> 00:02:36,110
there are pre shared key metier so I

00:02:34,430 --> 00:02:38,060
don't have any identity so this is

00:02:36,110 --> 00:02:42,380
important for like a series of reasons

00:02:38,060 --> 00:02:44,420
especially auditing no shared material

00:02:42,380 --> 00:02:46,490
like each client has its own certificate

00:02:44,420 --> 00:02:49,490
like its own private key its own public

00:02:46,490 --> 00:02:51,920
key it's on certificate so not nobody's

00:02:49,490 --> 00:02:54,800
sharing this key material sharing is

00:02:51,920 --> 00:02:56,930
very dangerous because we need to take

00:02:54,800 --> 00:02:58,970
care of data at rest take care of data

00:02:56,930 --> 00:03:01,010
transport so there's a lot of stuff that

00:02:58,970 --> 00:03:03,380
I need to take care when we share things

00:03:01,010 --> 00:03:05,420
that are supposed to be secret so if I

00:03:03,380 --> 00:03:07,250
cop a secret somewhere else by

00:03:05,420 --> 00:03:09,350
definition it's not a secret anymore and

00:03:07,250 --> 00:03:13,580
mutual authentication so usually

00:03:09,350 --> 00:03:16,760
whenever you 99% of the time when we are

00:03:13,580 --> 00:03:19,550
using HTTPS and we are talking to an SSL

00:03:16,760 --> 00:03:20,780
enabled website we all have the client

00:03:19,550 --> 00:03:22,220
authenticating the server so if I'm

00:03:20,780 --> 00:03:24,100
talking to Facebook or I'm talking to

00:03:22,220 --> 00:03:26,660
Google my browser is making sure that

00:03:24,100 --> 00:03:28,700
it's talking to Google and Facebook or

00:03:26,660 --> 00:03:32,180
whatever else but we don't have the

00:03:28,700 --> 00:03:33,440
other way in authentication so the next

00:03:32,180 --> 00:03:38,330
time I can do that this way and I'm

00:03:33,440 --> 00:03:40,340
gonna talk about that so so whenever

00:03:38,330 --> 00:03:41,900
using certificates what I have when I

00:03:40,340 --> 00:03:43,910
need to have a certificate this is

00:03:41,900 --> 00:03:46,580
always the workflow that we follow

00:03:43,910 --> 00:03:48,560
so I generate a private key material in

00:03:46,580 --> 00:03:50,570
my host that private key material should

00:03:48,560 --> 00:03:52,750
never ever leave the house and I'll talk

00:03:50,570 --> 00:03:55,100
a little bit more about that later and

00:03:52,750 --> 00:03:56,990
based on that private key material I can

00:03:55,100 --> 00:03:59,600
create a certificate request there we

00:03:56,990 --> 00:04:01,640
also call like CSR that certificate

00:03:59,600 --> 00:04:03,620
request is signed by the private key so

00:04:01,640 --> 00:04:07,130
that's the only way that the other side

00:04:03,620 --> 00:04:08,630
can make sure that I possess the private

00:04:07,130 --> 00:04:10,790
key even though the other side that's

00:04:08,630 --> 00:04:13,010
the certificate authority doesn't have

00:04:10,790 --> 00:04:15,530
the private key heads but it has a way

00:04:13,010 --> 00:04:17,330
to verify that I have that I possess the

00:04:15,530 --> 00:04:19,250
private key because of the signature and

00:04:17,330 --> 00:04:20,390
then that certificate request is sent to

00:04:19,250 --> 00:04:22,700
the CA to the certificate authority

00:04:20,390 --> 00:04:24,560
might be something eternal that's what

00:04:22,700 --> 00:04:26,780
I've covered here might be something

00:04:24,560 --> 00:04:27,300
public like Verisign or digi Sartori

00:04:26,780 --> 00:04:30,660
Aquifer

00:04:27,300 --> 00:04:33,720
like many others and then the CIA does

00:04:30,660 --> 00:04:36,930
their diligent work to verify that you

00:04:33,720 --> 00:04:38,669
you in fact on that domain and in the

00:04:36,930 --> 00:04:41,610
ether certificate a certificate is

00:04:38,669 --> 00:04:43,560
basically you're try your public key

00:04:41,610 --> 00:04:45,750
that's the counterpart of your private

00:04:43,560 --> 00:04:48,360
key signed by the CIA's private key and

00:04:45,750 --> 00:04:50,400
then some extra metadata that that's

00:04:48,360 --> 00:04:52,860
your domain it's valid for a year or

00:04:50,400 --> 00:04:54,750
something like that but essentially the

00:04:52,860 --> 00:04:57,810
cryptographic part the most important

00:04:54,750 --> 00:05:00,500
part is that you have your public key

00:04:57,810 --> 00:05:02,669
signed by the same private key so that

00:05:00,500 --> 00:05:04,470
anywhere else in the world that has

00:05:02,669 --> 00:05:07,789
access to the CAS public key that's like

00:05:04,470 --> 00:05:10,800
public knowledge can verify that that CA

00:05:07,789 --> 00:05:13,440
with process of the CAS private key sign

00:05:10,800 --> 00:05:15,360
the other cheek as I said before private

00:05:13,440 --> 00:05:17,039
keys should never ever move so you

00:05:15,360 --> 00:05:19,009
generate a private key would be always

00:05:17,039 --> 00:05:22,860
there in the system stereo you generate

00:05:19,009 --> 00:05:24,599
so of course if you are building an

00:05:22,860 --> 00:05:26,430
internal CA the first thing that we can

00:05:24,599 --> 00:05:28,379
do that you need to do is actually to

00:05:26,430 --> 00:05:31,310
create the key pair and to create a

00:05:28,379 --> 00:05:33,900
self-signed certificate

00:05:31,310 --> 00:05:36,750
why do we need an internal CI

00:05:33,900 --> 00:05:38,460
there is like many many reasons like so

00:05:36,750 --> 00:05:40,169
within currency a we can usually like a

00:05:38,460 --> 00:05:42,539
sheet don't know certificates like we

00:05:40,169 --> 00:05:44,460
can have like a certificates for every

00:05:42,539 --> 00:05:47,430
system for every client whatever service

00:05:44,460 --> 00:05:49,229
or people or or be is basically like

00:05:47,430 --> 00:05:53,009
anything ever you might need to identify

00:05:49,229 --> 00:05:54,630
a client if we are if we need some teeth

00:05:53,009 --> 00:05:55,949
like Public Safety if you need to pay

00:05:54,630 --> 00:05:59,279
for each one of them and they usually

00:05:55,949 --> 00:06:01,319
cost like a lot of money so in order of

00:05:59,279 --> 00:06:03,060
a few hundred dollars every year per

00:06:01,319 --> 00:06:04,680
certificate that's that's too expensive

00:06:03,060 --> 00:06:06,630
that's one of the reasons the other

00:06:04,680 --> 00:06:09,300
reasons security when you have your

00:06:06,630 --> 00:06:11,789
private CA you control your destiny like

00:06:09,300 --> 00:06:13,949
your control how secure there is whereas

00:06:11,789 --> 00:06:15,990
if you have a public CA you are just as

00:06:13,949 --> 00:06:17,729
secure as the power as the public see I

00:06:15,990 --> 00:06:19,590
use most of the public's fears of course

00:06:17,729 --> 00:06:21,210
they are very secure but if you can

00:06:19,590 --> 00:06:25,710
control your destiny it's usually better

00:06:21,210 --> 00:06:27,449
if you can do that well so that's how it

00:06:25,710 --> 00:06:29,550
creates so usually when they're creating

00:06:27,449 --> 00:06:31,740
a CA we don't make that programmatically

00:06:29,550 --> 00:06:33,930
because we do that like every couple of

00:06:31,740 --> 00:06:35,159
years or so it doesn't make sense to to

00:06:33,930 --> 00:06:37,979
have like something very sophisticated

00:06:35,159 --> 00:06:39,539
to create the CIA so so I have a few

00:06:37,979 --> 00:06:41,130
commands here so the first command is

00:06:39,539 --> 00:06:43,620
like opens the sale rack

00:06:41,130 --> 00:06:47,670
when I create a new request basically

00:06:43,620 --> 00:06:50,190
and then I create a new key we strongly

00:06:47,670 --> 00:06:53,370
recommend not to use RSA 1024 anymore

00:06:50,190 --> 00:06:57,570
so at least 2048 or more maybe for a CA

00:06:53,370 --> 00:06:59,790
even like 40 49:6 yeah we saved the key

00:06:57,570 --> 00:07:01,110
in the state of key and they request so

00:06:59,790 --> 00:07:02,760
I'm not going to send that request to

00:07:01,110 --> 00:07:04,890
another CA because this is a self sign

00:07:02,760 --> 00:07:06,810
yeah so I can sign my own request so the

00:07:04,890 --> 00:07:10,290
second command actually does that so

00:07:06,810 --> 00:07:12,240
there is this - self sign where I'm

00:07:10,290 --> 00:07:14,670
create a co that to see a that's signed

00:07:12,240 --> 00:07:16,500
by its own private key that's fine all

00:07:14,670 --> 00:07:19,080
the routiers in the world are exactly

00:07:16,500 --> 00:07:21,230
that and my CA in that specific example

00:07:19,080 --> 00:07:23,790
it's valid for 25 years

00:07:21,230 --> 00:07:26,430
so usually we suggest something like

00:07:23,790 --> 00:07:29,460
pretty large but even though we should

00:07:26,430 --> 00:07:31,410
be rotating that every so I have an

00:07:29,460 --> 00:07:33,210
alias that I have my laptop so I can

00:07:31,410 --> 00:07:35,400
inspect here's like very quickly without

00:07:33,210 --> 00:07:38,010
typing this entire command so if I

00:07:35,400 --> 00:07:40,290
smacked my CA I create like a small CA

00:07:38,010 --> 00:07:42,720
as an example so I have all this

00:07:40,290 --> 00:07:45,720
information the subject so I have

00:07:42,720 --> 00:07:50,610
country state by con Australia it's

00:07:45,720 --> 00:07:53,550
valid from dry to like 2041 and anyway

00:07:50,610 --> 00:07:55,740
the the the cipher that I use and how he

00:07:53,550 --> 00:07:56,910
was signed and then like there's a lot

00:07:55,740 --> 00:08:00,420
of information when you run that command

00:07:56,910 --> 00:08:02,490
a lot of stuff doesn't really matter

00:08:00,420 --> 00:08:05,120
because it's the cryptographic part but

00:08:02,490 --> 00:08:10,110
the matter of data is pretty important

00:08:05,120 --> 00:08:11,940
so I'm not here to talk about Java

00:08:10,110 --> 00:08:14,190
scripts or OpenSSL command I'm here to

00:08:11,940 --> 00:08:17,280
talk about how to do that with Python

00:08:14,190 --> 00:08:18,690
that's what matters for us

00:08:17,280 --> 00:08:21,000
there's a lot of libraries for gasps

00:08:18,690 --> 00:08:23,940
most of them are built on top of open

00:08:21,000 --> 00:08:26,850
SSL using a business l directly read

00:08:23,940 --> 00:08:28,680
annoy the API is super old it's not

00:08:26,850 --> 00:08:30,780
object oriented so it's pretty annoying

00:08:28,680 --> 00:08:32,550
to use but fortunately most of these

00:08:30,780 --> 00:08:35,240
libraries these bindings on top of open

00:08:32,550 --> 00:08:37,169
SSL they are they have like an object

00:08:35,240 --> 00:08:39,510
representation of certificates and

00:08:37,169 --> 00:08:41,550
requests there is many of those I

00:08:39,510 --> 00:08:43,680
personally like the Python Creed

00:08:41,550 --> 00:08:46,200
cryptography the most most of this stuff

00:08:43,680 --> 00:08:48,030
is Facebook or butan cryptography but

00:08:46,200 --> 00:08:49,320
anyway this is a personal choice Amy -

00:08:48,030 --> 00:08:52,560
Krypto is very nice as well

00:08:49,320 --> 00:08:54,540
the site is cryptography are and you can

00:08:52,560 --> 00:08:57,810
use bit between style just make sure the

00:08:54,540 --> 00:09:00,810
to install the OpenSSL libraries before

00:08:57,810 --> 00:09:02,310
you ramp it so if you need that to

00:09:00,810 --> 00:09:05,339
compile because it's as I said it's a

00:09:02,310 --> 00:09:07,170
bit and talk with that so why should we

00:09:05,339 --> 00:09:08,850
handle certificates programmatically so

00:09:07,170 --> 00:09:10,709
the main reason is that we can have

00:09:08,850 --> 00:09:12,750
something like fully automated without

00:09:10,709 --> 00:09:15,899
human intervention so if you have like a

00:09:12,750 --> 00:09:18,420
very small set up a small infrastructure

00:09:15,899 --> 00:09:19,410
it may be okay to have like a few shell

00:09:18,420 --> 00:09:22,319
scripts where you can sign your

00:09:19,410 --> 00:09:24,480
certificates or you can do some manual

00:09:22,319 --> 00:09:26,100
human validation but if you have a

00:09:24,480 --> 00:09:27,209
larger infrastructure it really doesn't

00:09:26,100 --> 00:09:28,709
make sense in the more so you need to

00:09:27,209 --> 00:09:32,040
have something that can operate them

00:09:28,709 --> 00:09:34,920
itself so it's beyond the scope of this

00:09:32,040 --> 00:09:37,170
talk to talk about how to do that super

00:09:34,920 --> 00:09:38,910
securely but the thing is that when you

00:09:37,170 --> 00:09:41,759
have a programmatic CA and it's well

00:09:38,910 --> 00:09:44,240
implemented you can issue

00:09:41,759 --> 00:09:46,560
lots of certificates everywhere and

00:09:44,240 --> 00:09:50,610
without human intervention that's really

00:09:46,560 --> 00:09:53,160
important so this is just an example of

00:09:50,610 --> 00:09:59,610
how I can read an existing certificate

00:09:53,160 --> 00:10:01,620
so I created that CA before using the

00:09:59,610 --> 00:10:03,569
opposite of command line and here is

00:10:01,620 --> 00:10:04,829
cold I actually I'm interpreting the

00:10:03,569 --> 00:10:07,500
certificate certificate is a very

00:10:04,829 --> 00:10:10,050
standard format is based on asn.1 most

00:10:07,500 --> 00:10:12,149
likely be based 64 encoded that's it

00:10:10,050 --> 00:10:15,870
called Pam certificates they are base 64

00:10:12,149 --> 00:10:17,910
encoded so I have all the imports so I

00:10:15,870 --> 00:10:20,310
know the file and then I have this extra

00:10:17,910 --> 00:10:22,440
nine dot load pen certificate and they

00:10:20,310 --> 00:10:24,510
use the default back-end that's open SSL

00:10:22,440 --> 00:10:26,370
and then I have an object that's a

00:10:24,510 --> 00:10:28,290
certificate and then that object has a

00:10:26,370 --> 00:10:30,810
lot of attributes has a lot of methods

00:10:28,290 --> 00:10:33,149
so one of the end is the common name the

00:10:30,810 --> 00:10:35,910
CN the CN is the most important thing in

00:10:33,149 --> 00:10:38,160
every certificate it's like the title of

00:10:35,910 --> 00:10:40,380
the identification of this activity so

00:10:38,160 --> 00:10:42,089
that's super important for SSL

00:10:40,380 --> 00:10:44,939
certificates for website it's usually

00:10:42,089 --> 00:10:46,500
the domain name for client certificates

00:10:44,939 --> 00:10:48,449
is whatever you want

00:10:46,500 --> 00:10:50,910
so in that case here is the CA so the

00:10:48,449 --> 00:10:52,920
common name is just name and I have

00:10:50,910 --> 00:10:54,990
dates like not well before not well

00:10:52,920 --> 00:10:57,029
after interesting is that I have

00:10:54,990 --> 00:10:59,160
actually quite an object out of that

00:10:57,029 --> 00:11:00,990
there's a lot more information that I

00:10:59,160 --> 00:11:02,459
can have in the city of Kate and I will

00:11:00,990 --> 00:11:05,790
both probably spend like half an hour

00:11:02,459 --> 00:11:08,260
talking about this so let's go back to

00:11:05,790 --> 00:11:10,000
the workflow there I mentioned before so

00:11:08,260 --> 00:11:12,490
the private key I create a certificate

00:11:10,000 --> 00:11:15,610
request that's signed by my private key

00:11:12,490 --> 00:11:17,830
and I send that to a CA how can I do

00:11:15,610 --> 00:11:19,960
that programmatically so if I built my

00:11:17,830 --> 00:11:20,560
own CA I need to build the my C client

00:11:19,960 --> 00:11:21,940
as well

00:11:20,560 --> 00:11:23,920
because I need to run the client

00:11:21,940 --> 00:11:24,700
everywhere so my client would look

00:11:23,920 --> 00:11:26,500
something like this

00:11:24,700 --> 00:11:29,170
lots of imports I'm using all of them in

00:11:26,500 --> 00:11:30,580
the next page so I want folks on that so

00:11:29,170 --> 00:11:32,290
I have private key the first thing that

00:11:30,580 --> 00:11:34,150
we need to always do is to create a

00:11:32,290 --> 00:11:36,880
private key as I said that private key

00:11:34,150 --> 00:11:39,550
should be Darien should not move so RSA

00:11:36,880 --> 00:11:40,930
you can use elliptic curve it's probably

00:11:39,550 --> 00:11:44,620
better but anyway for this example I'm

00:11:40,930 --> 00:11:47,140
using RSA 2048 public public exponent is

00:11:44,620 --> 00:11:50,350
usually 64 K and the back end is open

00:11:47,140 --> 00:11:53,290
SSL so so the private key will be an

00:11:50,350 --> 00:11:55,510
object that represents my my private key

00:11:53,290 --> 00:11:57,670
and I'm gonna use that like so it's

00:11:55,510 --> 00:11:59,920
crawling down I have a builder so I'd be

00:11:57,670 --> 00:12:02,560
a builder is basically certificate

00:11:59,920 --> 00:12:04,930
signing request builder is my CSR it's

00:12:02,560 --> 00:12:07,450
based I'm doing pretty much what OpenSSL

00:12:04,930 --> 00:12:10,630
recommend us so I have a builder and

00:12:07,450 --> 00:12:12,700
then I have the subject so my subject

00:12:10,630 --> 00:12:14,290
has the CN has a country name it has a

00:12:12,700 --> 00:12:17,650
state it can have a lot of other

00:12:14,290 --> 00:12:19,090
attributes so I'm just mentioning like

00:12:17,650 --> 00:12:21,430
four of those here but it can have more

00:12:19,090 --> 00:12:23,200
things like you have extensions so this

00:12:21,430 --> 00:12:26,500
particular extension is called base

00:12:23,200 --> 00:12:28,660
constraints that says that this EA will

00:12:26,500 --> 00:12:30,940
not be used as a see this certificate

00:12:28,660 --> 00:12:32,770
request will not be used as a CI so when

00:12:30,940 --> 00:12:34,990
I get a certificate back from the CA

00:12:32,770 --> 00:12:36,490
that certificate will not be used to

00:12:34,990 --> 00:12:38,320
sign all their certificates so this is

00:12:36,490 --> 00:12:39,780
pretty important sometimes you might

00:12:38,320 --> 00:12:41,980
want to submit a that's fine

00:12:39,780 --> 00:12:44,320
you can have all sorts of different

00:12:41,980 --> 00:12:47,590
extensions there's a lot of newer

00:12:44,320 --> 00:12:51,610
extensions in the x.509 standard these

00:12:47,590 --> 00:12:53,440
days so I gotta be I use the Builder so

00:12:51,610 --> 00:12:55,000
you notice the pattern is not very clear

00:12:53,440 --> 00:12:57,220
so I need to reassign a builder all the

00:12:55,000 --> 00:12:58,840
time that's because the builder object

00:12:57,220 --> 00:13:01,360
is immutable

00:12:58,840 --> 00:13:03,160
so we can't change it so whenever you

00:13:01,360 --> 00:13:05,320
call dude about subject name or builder

00:13:03,160 --> 00:13:07,410
extension that actually returns a new

00:13:05,320 --> 00:13:09,730
builder object that seems very strange

00:13:07,410 --> 00:13:11,530
but anyway it's it's the way it's be

00:13:09,730 --> 00:13:16,270
implemented so there's probably a reason

00:13:11,530 --> 00:13:18,190
for that yeah I scrolling now so I have

00:13:16,270 --> 00:13:19,750
the request so I have the builder and

00:13:18,190 --> 00:13:21,329
from the Builder I have the request as I

00:13:19,750 --> 00:13:23,610
mention before they request

00:13:21,329 --> 00:13:25,799
is sign it by my private key so that's

00:13:23,610 --> 00:13:27,839
what I do in the first block there so

00:13:25,799 --> 00:13:31,259
the other dot sign I have my private key

00:13:27,839 --> 00:13:33,420
I'm gonna sign using the hash shot 256

00:13:31,259 --> 00:13:35,009
please don't sign anything with travel

00:13:33,420 --> 00:13:38,670
anymore it's going to be difficult

00:13:35,009 --> 00:13:41,489
December of this year so mostly I think

00:13:38,670 --> 00:13:43,649
all modern browser is off January 1st

00:13:41,489 --> 00:13:45,480
next the next year will not accept shall

00:13:43,649 --> 00:13:47,759
one certificate anyone so sign

00:13:45,480 --> 00:13:50,610
everything was at least sha-256 ohm

00:13:47,759 --> 00:13:51,899
workshop to v6 is very very secure so I

00:13:50,610 --> 00:13:54,600
don't think it's gonna be a problem in

00:13:51,899 --> 00:13:56,549
the next several years and then save

00:13:54,600 --> 00:13:58,679
everything so I have a CSR that's the

00:13:56,549 --> 00:14:00,839
certificate request let's save that the

00:13:58,679 --> 00:14:03,149
J's can I have the key obviously I need

00:14:00,839 --> 00:14:04,889
to save that for the rice my certificate

00:14:03,149 --> 00:14:06,420
to be invalid without a key so in that

00:14:04,889 --> 00:14:08,670
particular example here I'm writing the

00:14:06,420 --> 00:14:09,629
key with no encryption so most of the

00:14:08,670 --> 00:14:10,889
cases where I'm using this

00:14:09,629 --> 00:14:12,660
programmatically the one I have a

00:14:10,889 --> 00:14:15,389
password because of the right someone

00:14:12,660 --> 00:14:18,119
needs to go that in fact the past so I

00:14:15,389 --> 00:14:20,429
send this to the CI so usually most of

00:14:18,119 --> 00:14:23,309
the times like in the real world I don't

00:14:20,429 --> 00:14:25,619
write down the CSR to disk I just send

00:14:23,309 --> 00:14:28,529
this yes are straight via wire to the CA

00:14:25,619 --> 00:14:30,059
using like REST API or thrift or

00:14:28,529 --> 00:14:32,339
something that in the Facebook case will

00:14:30,059 --> 00:14:34,889
always this drift so I move that CA to

00:14:32,339 --> 00:14:38,069
the that CSR to the CA side and now the

00:14:34,889 --> 00:14:40,079
CA needs to verify and then sign it to

00:14:38,069 --> 00:14:42,089
generate the proper certificate all the

00:14:40,079 --> 00:14:43,889
imports I'm gonna use everything so I

00:14:42,089 --> 00:14:46,439
open the CSR in that particular example

00:14:43,889 --> 00:14:49,079
me open from the file system the real

00:14:46,439 --> 00:14:52,110
world and most likely open from from a

00:14:49,079 --> 00:14:53,910
rest request or from a thrift API so I

00:14:52,110 --> 00:14:56,009
opened this year that the CA open see a

00:14:53,910 --> 00:14:58,769
dot CRT I transformed that in an object

00:14:56,009 --> 00:15:01,169
I opened the CA key because I need the

00:14:58,769 --> 00:15:03,389
key to sign the certificate and then

00:15:01,169 --> 00:15:05,489
yeah it's see realized I needed is

00:15:03,389 --> 00:15:09,179
realized has no password because it's

00:15:05,489 --> 00:15:11,939
programmatic squirreling now again the

00:15:09,179 --> 00:15:13,499
builder object so this time it's not as

00:15:11,939 --> 00:15:14,669
a chief to build it's not a certificate

00:15:13,499 --> 00:15:16,410
request view it's actually the

00:15:14,669 --> 00:15:18,869
certificate builder because this is the

00:15:16,410 --> 00:15:20,249
CA the CA build certificate so it is the

00:15:18,869 --> 00:15:21,509
same thing and it reassigned everything

00:15:20,249 --> 00:15:23,879
all the time because the objects are

00:15:21,509 --> 00:15:26,339
immutable and I have the subject name

00:15:23,879 --> 00:15:28,739
and that example I'm just copying the

00:15:26,339 --> 00:15:30,480
subject that the CSR sent to me in the

00:15:28,739 --> 00:15:32,639
real world you never do that because you

00:15:30,480 --> 00:15:34,110
can't just trust what the CSR asked you

00:15:32,639 --> 00:15:34,950
so you need to do some sort of like

00:15:34,110 --> 00:15:37,260
programmatic very

00:15:34,950 --> 00:15:38,940
datian the issuer name is Lala's your

00:15:37,260 --> 00:15:40,680
say-so that's by definition the issuer

00:15:38,940 --> 00:15:43,920
name will always be the CA that subject

00:15:40,680 --> 00:15:45,330
even in the real world not very before

00:15:43,920 --> 00:15:48,560
not value after how long your

00:15:45,330 --> 00:15:51,000
certificate is good for one protip here

00:15:48,560 --> 00:15:53,280
so in that particular example here I'm

00:15:51,000 --> 00:15:55,980
starting with right now like John I

00:15:53,280 --> 00:15:57,750
would not recommend doing that usually

00:15:55,980 --> 00:15:59,190
start like an hour before two hours

00:15:57,750 --> 00:16:01,500
before because there is a lot of clock

00:15:59,190 --> 00:16:04,530
skew in the internet so we can't assume

00:16:01,500 --> 00:16:06,570
that everyone who have the clock like

00:16:04,530 --> 00:16:08,070
pretty well aligned so usually at

00:16:06,570 --> 00:16:09,720
Facebook I think we start at least an

00:16:08,070 --> 00:16:12,000
hour before even though we make we have

00:16:09,720 --> 00:16:14,490
in TP everywhere and we know that our

00:16:12,000 --> 00:16:15,690
clocks are supposed to online it but

00:16:14,490 --> 00:16:17,880
anyway it's a good practice to start

00:16:15,690 --> 00:16:21,150
like a little bit before so in that case

00:16:17,880 --> 00:16:22,860
here it's valid for seven days how long

00:16:21,150 --> 00:16:26,870
should be valid for really depends on

00:16:22,860 --> 00:16:29,610
the case there's no silver bullet clear

00:16:26,870 --> 00:16:31,440
the certificate public key must be the

00:16:29,610 --> 00:16:33,840
public key that came from the CSR that's

00:16:31,440 --> 00:16:35,340
by definition right you can't be

00:16:33,840 --> 00:16:37,710
differently otherwise you are building

00:16:35,340 --> 00:16:40,200
an invalid certificate the serial number

00:16:37,710 --> 00:16:42,660
in that case I'm just using you AG to

00:16:40,200 --> 00:16:44,490
make a random random is fine as long as

00:16:42,660 --> 00:16:45,990
it's unique it's fine

00:16:44,490 --> 00:16:47,820
some people do its equation so we used

00:16:45,990 --> 00:16:49,230
to do sequential at Facebook but it was

00:16:47,820 --> 00:16:51,090
very hard for us coordinate because we

00:16:49,230 --> 00:16:52,770
have the CAE distributed like in

00:16:51,090 --> 00:16:54,660
hundreds of servers so it was very

00:16:52,770 --> 00:16:56,670
complicated to coordinate uniqueness so

00:16:54,660 --> 00:16:59,280
now we just moved to random it's much

00:16:56,670 --> 00:17:03,270
easier and we have a seed make sure that

00:16:59,280 --> 00:17:04,709
we won't have collisions extensions so

00:17:03,270 --> 00:17:06,150
in that case I'm just iterating the

00:17:04,709 --> 00:17:08,070
extensions from the CSR and let me add

00:17:06,150 --> 00:17:10,500
those extensions to the to the

00:17:08,070 --> 00:17:12,240
certificate of course you never did that

00:17:10,500 --> 00:17:13,980
in the real life so you need to do some

00:17:12,240 --> 00:17:16,980
sort of validation before actually doing

00:17:13,980 --> 00:17:18,360
that so it's crawling now the last thing

00:17:16,980 --> 00:17:20,610
and probably the most important is

00:17:18,360 --> 00:17:22,860
actually signed the certificate so

00:17:20,610 --> 00:17:24,510
builder dot sign the private key that

00:17:22,860 --> 00:17:26,880
I'm signed the certificate with is

00:17:24,510 --> 00:17:28,290
obviously the CA the hash that I'm using

00:17:26,880 --> 00:17:30,540
is sha-256

00:17:28,290 --> 00:17:32,850
as I said don't use shy one anymore and

00:17:30,540 --> 00:17:34,290
I'm writing that certificate to JISC but

00:17:32,850 --> 00:17:36,240
in the real world you would most likely

00:17:34,290 --> 00:17:40,110
be returning that certificate in your

00:17:36,240 --> 00:17:42,900
API output somehow so that's that's base

00:17:40,110 --> 00:17:45,630
that's the very basic workflow that you

00:17:42,900 --> 00:17:48,360
have from a see a client and then a CA

00:17:45,630 --> 00:17:53,149
serves so

00:17:48,360 --> 00:17:55,500
the reward would probably have some more

00:17:53,149 --> 00:17:58,230
anyway validations and authentication

00:17:55,500 --> 00:18:00,330
and stuff so also have certificates like

00:17:58,230 --> 00:18:02,220
you have your CA your services have

00:18:00,330 --> 00:18:05,820
certificates your client website if good

00:18:02,220 --> 00:18:08,669
how can how can we use them like how can

00:18:05,820 --> 00:18:10,169
we make the this whole thing useful so

00:18:08,669 --> 00:18:12,240
before before dive know a little bit

00:18:10,169 --> 00:18:14,570
more in authentication I'm going to talk

00:18:12,240 --> 00:18:16,380
a little bit about super way so

00:18:14,570 --> 00:18:19,049
authentication authorization and

00:18:16,380 --> 00:18:21,450
accounting so authentication is bit

00:18:19,049 --> 00:18:23,519
needs to answer one simple question who

00:18:21,450 --> 00:18:25,380
are you and are you who you claim you

00:18:23,519 --> 00:18:28,500
are that's the whole thing the

00:18:25,380 --> 00:18:30,059
authentication by definition is not an

00:18:28,500 --> 00:18:32,639
evidence that you have access to

00:18:30,059 --> 00:18:35,519
something it's just authentication I am

00:18:32,639 --> 00:18:37,139
Marlon Dutra blah blah blah etc so that

00:18:35,519 --> 00:18:39,299
doesn't mean by definition that I can do

00:18:37,139 --> 00:18:41,279
anything so the next step that's

00:18:39,299 --> 00:18:43,019
probably the the important things in

00:18:41,279 --> 00:18:44,519
terms of business logic that's the

00:18:43,019 --> 00:18:46,620
authorization so once you have a very

00:18:44,519 --> 00:18:48,360
strong authentication and that I'm

00:18:46,620 --> 00:18:51,029
secured I'm very confident that you know

00:18:48,360 --> 00:18:52,830
who you claim you are then I can move to

00:18:51,029 --> 00:18:55,919
authorization then I can say come out

00:18:52,830 --> 00:18:57,179
and do what it's trying to do and that's

00:18:55,919 --> 00:18:58,830
the whole thing about authorization

00:18:57,179 --> 00:19:01,620
there is no authorization or if we don't

00:18:58,830 --> 00:19:03,240
have strong growth engage if I can

00:19:01,620 --> 00:19:05,820
impersonate each other here like very

00:19:03,240 --> 00:19:07,409
quickly there is no good authorization

00:19:05,820 --> 00:19:10,049
in the world that will solve any kind of

00:19:07,409 --> 00:19:11,610
problem here in accounting is keeping

00:19:10,049 --> 00:19:13,580
track keeping track of what happened

00:19:11,610 --> 00:19:17,399
this is like super important

00:19:13,580 --> 00:19:20,429
so moving on so as a subscriber if I

00:19:17,399 --> 00:19:23,159
want to build an SSL server in Python

00:19:20,429 --> 00:19:24,929
that's pretty much how how I do this is

00:19:23,159 --> 00:19:27,750
Python 3.5 because I'm pretty sure that

00:19:24,929 --> 00:19:30,630
nobody uses bite into any more hopefully

00:19:27,750 --> 00:19:33,080
that's the case anyway python 3.5 has

00:19:30,630 --> 00:19:35,639
changed a little bit how this works and

00:19:33,080 --> 00:19:37,169
so a couple imports so we create

00:19:35,639 --> 00:19:39,299
something that we call our contacts so

00:19:37,169 --> 00:19:40,769
this comes from up SSL so I have this

00:19:39,299 --> 00:19:44,279
context that's like for client

00:19:40,769 --> 00:19:46,409
authentication and my this this is a

00:19:44,279 --> 00:19:49,289
server code so my server code you have

00:19:46,409 --> 00:19:51,779
the certificate in this key and the CA

00:19:49,289 --> 00:19:54,450
that my self-interest is this ei dot CRT

00:19:51,779 --> 00:19:56,370
and the verify mode is required so that

00:19:54,450 --> 00:20:00,270
says that whenever they have a neural

00:19:56,370 --> 00:20:02,190
connection I as a server will require

00:20:00,270 --> 00:20:04,200
that the other side

00:20:02,190 --> 00:20:06,419
provides a certificate everything else

00:20:04,200 --> 00:20:08,759
here is just standard socket boilerplate

00:20:06,419 --> 00:20:12,269
there's nothing new here so I'm

00:20:08,759 --> 00:20:14,370
listening to this port so scrolling now

00:20:12,269 --> 00:20:15,809
Marco they do they accept of course that

00:20:14,370 --> 00:20:17,850
would be in a wire loop in the thread

00:20:15,809 --> 00:20:19,350
pool or something like that and then I

00:20:17,850 --> 00:20:20,909
have this wrapped socket that's where

00:20:19,350 --> 00:20:22,830
the authentication happens so the the

00:20:20,909 --> 00:20:25,559
accept actually does the TCP three-way

00:20:22,830 --> 00:20:27,179
handshake so if if their self doesn't

00:20:25,559 --> 00:20:28,139
didn't throw in a Stephan that means

00:20:27,179 --> 00:20:30,389
that you have a TCP connection

00:20:28,139 --> 00:20:32,340
established and then we have the wrap

00:20:30,389 --> 00:20:34,860
socket that's where the SSR handshake

00:20:32,340 --> 00:20:37,679
happens like all the client hello server

00:20:34,860 --> 00:20:39,210
hello and etc usually two round-trips so

00:20:37,679 --> 00:20:41,309
that's where the authentication happens

00:20:39,210 --> 00:20:43,620
if we pass that car without reason

00:20:41,309 --> 00:20:44,909
exception that means that both the

00:20:43,620 --> 00:20:46,889
client authenticate the server and the

00:20:44,909 --> 00:20:48,509
server authenticate the client so the

00:20:46,889 --> 00:20:50,549
client provides a certificate that's

00:20:48,509 --> 00:20:53,399
signed by this year that I trust and the

00:20:50,549 --> 00:20:54,990
certificates not expired so the thing

00:20:53,399 --> 00:20:57,269
the interesting thing is that in the

00:20:54,990 --> 00:21:00,149
third line I can actually get the

00:20:57,269 --> 00:21:02,399
certificate that the client provided and

00:21:00,149 --> 00:21:04,350
I can do I can load an object using

00:21:02,399 --> 00:21:05,850
x.509 and I can interpret that

00:21:04,350 --> 00:21:08,909
certificate so in that case I'm just

00:21:05,850 --> 00:21:09,929
printing the CN as I showed before once

00:21:08,909 --> 00:21:11,759
I have the certificate the

00:21:09,929 --> 00:21:12,960
authentication authentication is done I

00:21:11,759 --> 00:21:14,580
can actually do all sorts of

00:21:12,960 --> 00:21:18,210
authorization so what now I know that

00:21:14,580 --> 00:21:19,950
Marlo is connected he is my client then

00:21:18,210 --> 00:21:22,320
I do all my authorization code the way

00:21:19,950 --> 00:21:24,090
that a lot like a Marlin do that and

00:21:22,320 --> 00:21:25,409
then they just close the socket this

00:21:24,090 --> 00:21:27,480
comment is very interesting everybody

00:21:25,409 --> 00:21:30,059
has that it's the opposite service

00:21:27,480 --> 00:21:32,639
client I can use it's like a channel but

00:21:30,059 --> 00:21:34,980
with SSL support and I came pair

00:21:32,639 --> 00:21:36,000
certificate and client key for that so

00:21:34,980 --> 00:21:37,889
you can use that command against

00:21:36,000 --> 00:21:41,909
anything and then it will show you the

00:21:37,889 --> 00:21:43,049
certificate and everything most like in

00:21:41,909 --> 00:21:47,549
the vast majority of the cases you are

00:21:43,049 --> 00:21:49,289
not writing socket code because like

00:21:47,549 --> 00:21:53,759
there's a lot of good projects up there

00:21:49,289 --> 00:21:55,710
that can do that for you so Apache for

00:21:53,759 --> 00:21:57,899
example I can configure my apart to do

00:21:55,710 --> 00:21:59,549
that for me so I don't need to worry

00:21:57,899 --> 00:22:01,710
about that in vitam itself so I can

00:21:59,549 --> 00:22:03,570
configure a part pretty much the

00:22:01,710 --> 00:22:06,330
language is obviously different but it's

00:22:03,570 --> 00:22:08,970
expressing the same thing so beautified

00:22:06,330 --> 00:22:11,369
clients require verified apt 1 that

00:22:08,970 --> 00:22:13,649
means that I only trust certificate

00:22:11,369 --> 00:22:16,050
signed by that CA and not super

00:22:13,649 --> 00:22:17,400
certificate and I might

00:22:16,050 --> 00:22:20,580
well for some reason but this particular

00:22:17,400 --> 00:22:21,960
example I don't so where where does the

00:22:20,580 --> 00:22:23,310
certificate that I trust so everything

00:22:21,960 --> 00:22:25,590
needs to be signed by that certificate

00:22:23,310 --> 00:22:28,890
and then in Python if I using like CGI

00:22:25,590 --> 00:22:30,000
or SSPI or anything I can I have that

00:22:28,890 --> 00:22:32,340
available in an environment variable

00:22:30,000 --> 00:22:33,870
some different systems like the best

00:22:32,340 --> 00:22:36,480
year I might be a little bit different

00:22:33,870 --> 00:22:38,340
but anyways all of them will expose the

00:22:36,480 --> 00:22:39,510
client certificate somehow to you and

00:22:38,340 --> 00:22:41,250
then you can use the extra nine

00:22:39,510 --> 00:22:43,020
cryptography module to load to

00:22:41,250 --> 00:22:44,280
transformed an object and then you can

00:22:43,020 --> 00:22:46,110
do other authorized agent logics

00:22:44,280 --> 00:22:47,460
the only thing that you are offloaded

00:22:46,110 --> 00:22:49,050
here is the authentication we are not

00:22:47,460 --> 00:22:50,880
offload notarization authorization is a

00:22:49,050 --> 00:22:53,730
business thing and then you need to do

00:22:50,880 --> 00:22:55,260
it yourself if you want to do it apart

00:22:53,730 --> 00:22:58,290
it with my sequel for example we can

00:22:55,260 --> 00:23:00,260
configure my sequel to a SAP client

00:22:58,290 --> 00:23:01,920
certificate as well so the main

00:23:00,260 --> 00:23:04,830
configuration in the section basically

00:23:01,920 --> 00:23:08,640
that's the the main session for the

00:23:04,830 --> 00:23:10,470
server I can say I trust that CA and as

00:23:08,640 --> 00:23:13,200
a server this is my certificate is my

00:23:10,470 --> 00:23:15,300
key and I can create internal users in

00:23:13,200 --> 00:23:17,160
my sequel with the create user command

00:23:15,300 --> 00:23:19,170
that requires subject something and

00:23:17,160 --> 00:23:21,360
whatever the subject is and then

00:23:19,170 --> 00:23:23,220
whenever the client presents that

00:23:21,360 --> 00:23:25,320
certificate the client will

00:23:23,220 --> 00:23:28,020
automatically become that internal user

00:23:25,320 --> 00:23:31,080
no passwords there at all here on the

00:23:28,020 --> 00:23:32,700
client side if I'm using Python I can do

00:23:31,080 --> 00:23:34,890
that as well so I can use my secret DB

00:23:32,700 --> 00:23:36,900
and instead of have like username

00:23:34,890 --> 00:23:38,880
password I have this dictionary where I

00:23:36,900 --> 00:23:40,260
pass the CA that I trust because the

00:23:38,880 --> 00:23:42,690
client also needs to authenticate the

00:23:40,260 --> 00:23:45,000
server and then my own client

00:23:42,690 --> 00:23:48,240
certificate in my private key and then I

00:23:45,000 --> 00:23:50,730
connect to any host and then SSL no

00:23:48,240 --> 00:23:54,930
passwords at all so this is way way more

00:23:50,730 --> 00:23:58,890
secure than ever use investment few

00:23:54,930 --> 00:24:01,080
final tips unique serial numbers I

00:23:58,890 --> 00:24:04,560
mention that it's important for several

00:24:01,080 --> 00:24:06,090
reasons to keep track of all the

00:24:04,560 --> 00:24:08,340
certificates that you issued so this is

00:24:06,090 --> 00:24:10,860
pretty important so usually when you

00:24:08,340 --> 00:24:12,870
write your own CA have some sort of like

00:24:10,860 --> 00:24:14,820
secure logging like a panda on logging

00:24:12,870 --> 00:24:17,100
try to log to different systems like

00:24:14,820 --> 00:24:18,870
syslog whatever so you keep track of all

00:24:17,100 --> 00:24:20,280
the certificates that your issue so if

00:24:18,870 --> 00:24:22,290
you ever have like an incident or

00:24:20,280 --> 00:24:26,040
something you know what is going now

00:24:22,290 --> 00:24:26,820
most likely and also for revocation so

00:24:26,040 --> 00:24:28,770
you might have a revocation

00:24:26,820 --> 00:24:29,090
infrastructure and then you must have

00:24:28,770 --> 00:24:31,070
your

00:24:29,090 --> 00:24:33,440
Sugoi serial numbers to replicate

00:24:31,070 --> 00:24:34,940
certificate shortly birth certificates

00:24:33,440 --> 00:24:37,070
did this is pretty important if you have

00:24:34,940 --> 00:24:41,179
a programmatic CA there is no reason to

00:24:37,070 --> 00:24:43,730
issue very long certificates how short

00:24:41,179 --> 00:24:45,980
it really depends at Facebook it varies

00:24:43,730 --> 00:24:48,379
for users achieve kids we usually do

00:24:45,980 --> 00:24:49,970
like 24 hours for service certificates

00:24:48,379 --> 00:24:51,649
like 1 day or so

00:24:49,970 --> 00:24:53,779
host certificates we gonna do like

00:24:51,649 --> 00:24:57,710
couple weeks it really depends there's

00:24:53,779 --> 00:24:59,649
no right answer here rotate your CI ever

00:24:57,710 --> 00:25:03,110
so often and have a process to do that

00:24:59,649 --> 00:25:07,190
the main reason to have a process and to

00:25:03,110 --> 00:25:09,799
make sure the process works is that what

00:25:07,190 --> 00:25:11,330
if your CI gets compromised like what if

00:25:09,799 --> 00:25:13,399
you legs if you are CA legs

00:25:11,330 --> 00:25:16,009
you were totally screwed that you need

00:25:13,399 --> 00:25:17,539
to rotate your city immediately and then

00:25:16,009 --> 00:25:20,269
you need pretty much revoke pretty

00:25:17,539 --> 00:25:21,799
everything that you have everything if

00:25:20,269 --> 00:25:24,350
you have a process in your rotate your

00:25:21,799 --> 00:25:26,869
say like every year or every six months

00:25:24,350 --> 00:25:28,610
or whatever you know how to do that and

00:25:26,869 --> 00:25:31,340
it would be exercising that process so

00:25:28,610 --> 00:25:33,559
whenever they issue the necessity arises

00:25:31,340 --> 00:25:35,869
you know how to do it if you don't have

00:25:33,559 --> 00:25:39,529
a process you have a very hard time to

00:25:35,869 --> 00:25:40,970
rotate our Seri don't trust public CAS

00:25:39,529 --> 00:25:43,279
in our internal systems because there's

00:25:40,970 --> 00:25:45,049
a lot of public space so if you if you

00:25:43,279 --> 00:25:47,929
look at your laptop your laptops just so

00:25:45,049 --> 00:25:49,789
a lot of things so if you trust public

00:25:47,929 --> 00:25:52,249
CA is basically you are saying that you

00:25:49,789 --> 00:25:54,679
are trusting your level in during your

00:25:52,249 --> 00:25:56,450
entire leverage of trust is as good as

00:25:54,679 --> 00:25:59,029
the weakest CA that you trust

00:25:56,450 --> 00:26:00,710
so if you some one compromises any of

00:25:59,029 --> 00:26:02,299
those CA is in Lincoln signed

00:26:00,710 --> 00:26:03,830
certificate with the information that

00:26:02,299 --> 00:26:05,749
you need to tweak your authentication

00:26:03,830 --> 00:26:07,759
authorization systems they gain your

00:26:05,749 --> 00:26:09,230
system so just trust your internal

00:26:07,759 --> 00:26:11,980
things there's no reason to trust public

00:26:09,230 --> 00:26:14,570
stuff never move private keys around

00:26:11,980 --> 00:26:17,360
whenever you move you need to control

00:26:14,570 --> 00:26:19,940
very precisely like all the residuals of

00:26:17,360 --> 00:26:21,710
the movement so when you're moving using

00:26:19,940 --> 00:26:23,389
SCP you need to take care because you

00:26:21,710 --> 00:26:25,159
might be using temporary directories you

00:26:23,389 --> 00:26:27,169
might be forgetting keys here and there

00:26:25,159 --> 00:26:29,389
or keys might be developing memory even

00:26:27,169 --> 00:26:30,769
though we don't know there's a lot of

00:26:29,389 --> 00:26:32,389
things that can happen when you're

00:26:30,769 --> 00:26:34,879
moving keys around that you were not

00:26:32,389 --> 00:26:36,619
aware so just don't do it there's no

00:26:34,879 --> 00:26:39,320
reason to do it you have certificate

00:26:36,619 --> 00:26:41,679
request and have an entire very standard

00:26:39,320 --> 00:26:42,830
workflows so you don't need to do it

00:26:41,679 --> 00:26:44,780
before

00:26:42,830 --> 00:26:46,400
eliminate user passwords that's probably

00:26:44,780 --> 00:26:48,620
the main reason that I'm here talking to

00:26:46,400 --> 00:26:50,780
you guys about this so user passwords

00:26:48,620 --> 00:26:53,840
are super complicated to maintain

00:26:50,780 --> 00:26:56,240
programmatically so there is no anyway

00:26:53,840 --> 00:26:59,510
if you pretty much everything that's

00:26:56,240 --> 00:27:01,810
modern these days support extra benign

00:26:59,510 --> 00:27:05,120
mutual authentication Postgres my sequel

00:27:01,810 --> 00:27:07,970
etc lots of stuff do that and on the

00:27:05,120 --> 00:27:10,790
server side engine acts a tree proxy for

00:27:07,970 --> 00:27:13,880
actually probably Django a lot of stuff

00:27:10,790 --> 00:27:16,280
in the last and probably the most

00:27:13,880 --> 00:27:18,890
important things you need to be serious

00:27:16,280 --> 00:27:21,650
about protecting your ca if you are CA

00:27:18,890 --> 00:27:26,630
Lakes everything else falls apart so be

00:27:21,650 --> 00:27:28,430
very serious about that we're hiring if

00:27:26,630 --> 00:27:31,010
you are passionate about this kind of

00:27:28,430 --> 00:27:33,170
stuff or anything around soft when you

00:27:31,010 --> 00:27:35,540
need infrastructure it said come talk to

00:27:33,170 --> 00:27:37,550
us I have a couple of friends here we

00:27:35,540 --> 00:27:39,200
were like in six engineers here so feel

00:27:37,550 --> 00:27:41,180
free to reach out to us and talk about

00:27:39,200 --> 00:27:42,560
Facebook in general any cool stuff that

00:27:41,180 --> 00:27:44,300
you might like I have a few perspective

00:27:42,560 --> 00:27:46,250
if you wanna know a little bit more

00:27:44,300 --> 00:27:49,960
about Production Engineering

00:27:46,250 --> 00:27:54,260
I think we have a few minutes for

00:27:49,960 --> 00:27:56,300
questions I guess do we have just a

00:27:54,260 --> 00:27:59,080
couple of minutes yeah so thank you very

00:27:56,300 --> 00:27:59,080
much my lunch

00:28:02,750 --> 00:28:09,480
okay thanks for the talk just following

00:28:07,050 --> 00:28:10,800
up on that final point be serious but

00:28:09,480 --> 00:28:12,950
particularly your CA how do you

00:28:10,800 --> 00:28:15,360
bootstrap this like how do you

00:28:12,950 --> 00:28:16,740
authenticate someone who's calling your

00:28:15,360 --> 00:28:18,380
CA trying to get that initial

00:28:16,740 --> 00:28:21,240
certificate it's a very good question

00:28:18,380 --> 00:28:22,350
so at Facebook for example like this is

00:28:21,240 --> 00:28:23,430
just an example you can do like in

00:28:22,350 --> 00:28:26,370
several different ways we have three

00:28:23,430 --> 00:28:29,400
three kinds of certificates user hosts

00:28:26,370 --> 00:28:31,260
and services for user the the sorts of

00:28:29,400 --> 00:28:32,790
trust is my password and Kerberos

00:28:31,260 --> 00:28:35,520
authentication so all app tops they

00:28:32,790 --> 00:28:37,800
become their member of a G domain so

00:28:35,520 --> 00:28:39,480
when i unlock it my laptop around k in

00:28:37,800 --> 00:28:41,370
it in the background so that fetches a

00:28:39,480 --> 00:28:43,050
Kerberos ticket and then when I assess

00:28:41,370 --> 00:28:45,060
age to my dev server that's my Bastion

00:28:43,050 --> 00:28:47,430
host that Cairo certificate gets moved

00:28:45,060 --> 00:28:49,200
and then you think that and signals I

00:28:47,430 --> 00:28:50,490
know and can't request an extra 90 60 if

00:28:49,200 --> 00:28:53,040
good that belongs to me

00:28:50,490 --> 00:28:55,140
for host is based on our provision

00:28:53,040 --> 00:28:56,820
assist so our provisioning system is

00:28:55,140 --> 00:28:58,530
maintained by the security parts

00:28:56,820 --> 00:29:00,030
maintained by the security team so

00:28:58,530 --> 00:29:02,250
whenever you provision your server the

00:29:00,030 --> 00:29:05,370
provision assistant will sign a token

00:29:02,250 --> 00:29:08,400
and the server will build the private

00:29:05,370 --> 00:29:10,380
key the CSR and do send the CSR and the

00:29:08,400 --> 00:29:13,110
token to the CI in the CA validates the

00:29:10,380 --> 00:29:15,120
talk is actually is the proof did the

00:29:13,110 --> 00:29:17,850
provisioning system sign this and then

00:29:15,120 --> 00:29:20,100
it gives gives back a certificate on the

00:29:17,850 --> 00:29:21,870
services side you have a scheduler that

00:29:20,100 --> 00:29:23,520
pretty much orchestrate and all all the

00:29:21,870 --> 00:29:26,100
allocation of services across Facebook

00:29:23,520 --> 00:29:28,080
we trust this Cutler so this schedule is

00:29:26,100 --> 00:29:29,580
also maintained by the security team so

00:29:28,080 --> 00:29:33,180
it's the same thing when we start a new

00:29:29,580 --> 00:29:35,640
job in servers we have like a call an

00:29:33,180 --> 00:29:37,740
RPC call called like start task or

00:29:35,640 --> 00:29:39,900
something like that and that has a sign

00:29:37,740 --> 00:29:42,360
token by the scheduler and then the same

00:29:39,900 --> 00:29:44,820
thing this case the task creates its

00:29:42,360 --> 00:29:46,800
private kids yes our sends the CSR to

00:29:44,820 --> 00:29:49,230
the CA with the token and the save at

00:29:46,800 --> 00:29:50,970
this is over so that's very Facebook

00:29:49,230 --> 00:29:52,440
specific of course for different

00:29:50,970 --> 00:29:54,630
business we might have different ways to

00:29:52,440 --> 00:29:56,730
do that but anyway you need to have a

00:29:54,630 --> 00:29:58,320
source of trust because the trust needs

00:29:56,730 --> 00:29:59,700
to start somewhere otherwise you have

00:29:58,320 --> 00:30:02,010
always that you connect properly so that

00:29:59,700 --> 00:30:05,010
that's how we do it if it's the best way

00:30:02,010 --> 00:30:06,240
to do it for us it's being that I'm not

00:30:05,010 --> 00:30:07,170
sure that it would be the best way to do

00:30:06,240 --> 00:30:09,290
for other people

00:30:07,170 --> 00:30:13,770
thank you think one quick final question

00:30:09,290 --> 00:30:16,110
was it yes sorry just before I go for

00:30:13,770 --> 00:30:18,180
those who before you flee the room if

00:30:16,110 --> 00:30:21,480
you have lost anything please see

00:30:18,180 --> 00:30:23,430
registration Thanks

00:30:21,480 --> 00:30:26,310
I just wanted to ask about the error

00:30:23,430 --> 00:30:28,650
handling in cryptography if it's just

00:30:26,310 --> 00:30:30,330
kind of passing open SSL errors back and

00:30:28,650 --> 00:30:32,700
they're like equally as cryptic or if

00:30:30,330 --> 00:30:34,130
it's a little bit better to catch it's

00:30:32,700 --> 00:30:37,080
basically everything is based on

00:30:34,130 --> 00:30:38,610
everything raises exceptions so your

00:30:37,080 --> 00:30:40,170
code needs to be like try a set and

00:30:38,610 --> 00:30:41,610
everything so it's different than using

00:30:40,170 --> 00:30:43,320
a pass out your activator you need to be

00:30:41,610 --> 00:30:45,240
tracking the return of everything that's

00:30:43,320 --> 00:30:48,000
pretty annoying but it's very pi turning

00:30:45,240 --> 00:30:49,950
the the way they built on top of focus

00:30:48,000 --> 00:30:52,080
itself which is pretty good so most of

00:30:49,950 --> 00:30:53,700
our code is actually try this design

00:30:52,080 --> 00:30:55,530
that and catch all sorts of reception

00:30:53,700 --> 00:30:57,950
and then do some times of that that's

00:30:55,530 --> 00:30:57,950
how it works

00:30:58,040 --> 00:31:02,300

YouTube URL: https://www.youtube.com/watch?v=x_OWvcC8YY0


