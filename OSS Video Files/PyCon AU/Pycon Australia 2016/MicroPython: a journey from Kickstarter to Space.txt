Title: MicroPython: a journey from Kickstarter to Space
Publication date: 2016-08-14
Playlist: Pycon Australia 2016
Description: 
	Damien George
https://2016.pycon-au.org/schedule/199/view_talk
MicroPython is a lean and efficient reimplementation of Python 3 with a
reduced standard library, and brings the awesomeness of Python to computing
devices with few resources, such as microcontrollers.  In this talk I will
detail my journey in building MicroPython and the various projects that it
has been used in and the people who are using it.  I will talk about running
a successful Kickstarter campaign (actually two of them!), circuit board
manufacturing, working with the European Space Agency, working with the BBC
on the micro:bit project, and the challenges of managing and funding
open-source software.  There will also be some live demos!
Captions: 
	00:00:01,100 --> 00:00:06,629
so a couple of weeks ago the I Triple E

00:00:04,830 --> 00:00:08,970
posted are the results of a best

00:00:06,629 --> 00:00:11,910
language survey and Python did pretty

00:00:08,970 --> 00:00:13,679
darned well I thought you can see that

00:00:11,910 --> 00:00:17,809
they even categorized the languages by

00:00:13,679 --> 00:00:17,809
where they were they're usable

00:00:18,080 --> 00:00:25,289
apparently they hadn't heard of micro

00:00:20,490 --> 00:00:28,439
Python it's the creation of Damien

00:00:25,289 --> 00:00:31,650
George who's the recipient of the PSFS

00:00:28,439 --> 00:00:34,170
genuinely nice chap award for his

00:00:31,650 --> 00:00:35,780
service to Python and the Python

00:00:34,170 --> 00:00:37,860
community at large

00:00:35,780 --> 00:00:39,690
Damien actually has a background in

00:00:37,860 --> 00:00:41,430
theoretical physics robotics and

00:00:39,690 --> 00:00:44,250
computer engineering

00:00:41,430 --> 00:00:46,469
he loves to program and build things and

00:00:44,250 --> 00:00:49,350
he's actually made a successful company

00:00:46,469 --> 00:00:52,050
out of the micro Python project and the

00:00:49,350 --> 00:00:55,620
pi board and he's brought it to makers I

00:00:52,050 --> 00:00:57,329
have a couple and teachers and Industry

00:00:55,620 --> 00:00:59,100
developers around the world and he's

00:00:57,329 --> 00:01:02,129
worked with the BBC on their amazing

00:00:59,100 --> 00:01:04,049
micro bit project as well and there's

00:01:02,129 --> 00:01:06,180
even a space angle with the European

00:01:04,049 --> 00:01:09,030
Space Agency taking micro Python into

00:01:06,180 --> 00:01:10,830
space so I'd like to welcome Damien to

00:01:09,030 --> 00:01:15,530
the stage to talk about his journey from

00:01:10,830 --> 00:01:15,530
Kickstarter to space with micro Python

00:01:21,770 --> 00:01:30,210
thanks Richard thanks a lot so slide

00:01:27,780 --> 00:01:32,940
should appear but so you've all heard

00:01:30,210 --> 00:01:35,760
that there is a code of conduct for this

00:01:32,940 --> 00:01:37,410
for this conference and basically it

00:01:35,760 --> 00:01:39,630
means to be awesome to each other which

00:01:37,410 --> 00:01:40,890
i think is really awesome but it also

00:01:39,630 --> 00:01:42,780
means you need to be awesome to the

00:01:40,890 --> 00:01:47,630
speaker and you need to laugh at all

00:01:42,780 --> 00:01:50,190
their jokes but that that wasn't a joke

00:01:47,630 --> 00:01:53,190
the other you also you're not allowed to

00:01:50,190 --> 00:01:54,750
laugh when it's not a joke and you're

00:01:53,190 --> 00:01:56,220
not allowed the speakers not allowed to

00:01:54,750 --> 00:01:58,860
confuse the audience either is to when

00:01:56,220 --> 00:02:03,150
they should laugh or not that's

00:01:58,860 --> 00:02:08,550
confusing anyway so okay if my slides

00:02:03,150 --> 00:02:10,290
appear I can start talking but I can

00:02:08,550 --> 00:02:11,250
start talking without them so I'll just

00:02:10,290 --> 00:02:13,140
give you a little bit of background

00:02:11,250 --> 00:02:17,610
about myself so you understand where I'm

00:02:13,140 --> 00:02:19,740
coming from so I did a PhD at Melbourne

00:02:17,610 --> 00:02:21,510
Uni here and then that's that was in

00:02:19,740 --> 00:02:23,910
theoretical particle physics high-energy

00:02:21,510 --> 00:02:27,300
physics like extra dimensions and

00:02:23,910 --> 00:02:29,340
cosmology and so on and then I moved to

00:02:27,300 --> 00:02:32,820
Amsterdam and did a postdoc there at the

00:02:29,340 --> 00:02:34,769
Dutch research for topic physics and

00:02:32,820 --> 00:02:37,340
actually right next door to where I was

00:02:34,769 --> 00:02:40,110
working was where Greedo invented Python

00:02:37,340 --> 00:02:43,440
many many many years ago so that was

00:02:40,110 --> 00:02:45,230
really really interesting and then after

00:02:43,440 --> 00:02:47,250
Amsterdam I moved to Cambridge

00:02:45,230 --> 00:02:48,470
University of Cambridge and a postdoc

00:02:47,250 --> 00:02:52,500
there as well in theoretical physics

00:02:48,470 --> 00:02:56,100
working on supersymmetry and inflation

00:02:52,500 --> 00:02:58,709
and Higgs boson physics and so on but

00:02:56,100 --> 00:03:00,570
during my time in Cambridge

00:02:58,709 --> 00:03:03,030
so I also did a computer engineering

00:03:00,570 --> 00:03:04,890
degree at Melbourne University and I

00:03:03,030 --> 00:03:07,049
always kept up an active interest in

00:03:04,890 --> 00:03:08,580
programming and and and robotics and

00:03:07,049 --> 00:03:11,400
building CNC machines and all these

00:03:08,580 --> 00:03:13,049
other things and when I was at Cambridge

00:03:11,400 --> 00:03:15,299
I thought oh it would it might be fun to

00:03:13,049 --> 00:03:19,050
do a Kickstarter just for you know the

00:03:15,299 --> 00:03:24,930
sake of it everyone else was doing it

00:03:19,050 --> 00:03:26,970
and so I yeah I thought well you know I

00:03:24,930 --> 00:03:29,430
always wanted to try running Python on a

00:03:26,970 --> 00:03:31,080
microcontroller so I'll see if you know

00:03:29,430 --> 00:03:32,820
this can be fit into the Kickstarter

00:03:31,080 --> 00:03:34,800
format so I thought I could make a

00:03:32,820 --> 00:03:38,610
little board to give people as a reward

00:03:34,800 --> 00:03:40,200
and yeah that that turned out to be

00:03:38,610 --> 00:03:42,030
really successful and took over my life

00:03:40,200 --> 00:03:45,480
and then I transitioned slowly from

00:03:42,030 --> 00:03:47,220
physics to micro Python I mean I don't

00:03:45,480 --> 00:03:49,980
even know what I am anymore I guess I'm

00:03:47,220 --> 00:03:53,100
just a scientist who does stuff but and

00:03:49,980 --> 00:03:54,810
and eventually ya built a company or a

00:03:53,100 --> 00:04:00,050
micro path for them I'll talk a bit more

00:03:54,810 --> 00:04:07,290
about all those things in the talk ok

00:04:00,050 --> 00:04:10,190
let's see how this goes so what was the

00:04:07,290 --> 00:04:13,590
motivation for making micro Python well

00:04:10,190 --> 00:04:15,630
these days microcontrollers which are

00:04:13,590 --> 00:04:19,230
really small computers like that one

00:04:15,630 --> 00:04:21,180
there on the in the picture they have a

00:04:19,230 --> 00:04:23,910
lot of functionality in such a tiny

00:04:21,180 --> 00:04:25,560
package a little comply casi pu and then

00:04:23,910 --> 00:04:27,840
all these peripherals to do things like

00:04:25,560 --> 00:04:30,810
convert voltages and timers and

00:04:27,840 --> 00:04:32,990
interrupts and in order to control that

00:04:30,810 --> 00:04:35,010
you need to you need to code it up and

00:04:32,990 --> 00:04:37,890
traditionally it was done in assembler

00:04:35,010 --> 00:04:39,810
or C but as you know programming

00:04:37,890 --> 00:04:42,090
languages like a similar seek is

00:04:39,810 --> 00:04:43,470
difficult and time-consuming so I

00:04:42,090 --> 00:04:46,260
thought maybe it would be a good idea

00:04:43,470 --> 00:04:47,730
instead to be able to use a high-level

00:04:46,260 --> 00:04:50,760
language to program these more

00:04:47,730 --> 00:04:53,520
sophisticated devices and and I chose

00:04:50,760 --> 00:04:59,430
Python and to do to church sure I do

00:04:53,520 --> 00:05:01,440
that and the main thing for me because

00:04:59,430 --> 00:05:03,570
coming from a physics background in a

00:05:01,440 --> 00:05:05,490
research background the it was more of a

00:05:03,570 --> 00:05:07,530
research project for me as well as like

00:05:05,490 --> 00:05:10,560
can this even be done Python such a

00:05:07,530 --> 00:05:13,050
large language can it even run on a

00:05:10,560 --> 00:05:14,880
microcontroller at all so I was

00:05:13,050 --> 00:05:18,330
approaching it from the point of view of

00:05:14,880 --> 00:05:19,620
you know research and enjoying it from

00:05:18,330 --> 00:05:21,320
that point of view not from like a

00:05:19,620 --> 00:05:24,390
software engineering point of view or

00:05:21,320 --> 00:05:26,190
this is what I I think the world needs

00:05:24,390 --> 00:05:29,640
it was just something intellectually

00:05:26,190 --> 00:05:31,830
stimulating for me and why why was it so

00:05:29,640 --> 00:05:32,669
difficult and it's because python uses a

00:05:31,830 --> 00:05:36,389
lot of memory

00:05:32,669 --> 00:05:39,180
basically lots of RAM and ROM so ROM is

00:05:36,389 --> 00:05:40,469
read-only memory like your hard drive

00:05:39,180 --> 00:05:42,689
sort of you can think of it like that

00:05:40,469 --> 00:05:46,289
and on a microcontroller you only have

00:05:42,689 --> 00:05:48,599
about say half a megabyte of ROM to put

00:05:46,289 --> 00:05:52,020
all of your stuff your files and your

00:05:48,599 --> 00:05:55,590
code and the RAM is around you know 64

00:05:52,020 --> 00:05:56,939
kilobytes so it's really really tiny so

00:05:55,590 --> 00:06:00,060
you need to run everything in such a

00:05:56,939 --> 00:06:01,919
small environment why did I choose

00:06:00,060 --> 00:06:04,680
Python why didn't I you know choose

00:06:01,919 --> 00:06:08,639
JavaScript or law or Ruby or some other

00:06:04,680 --> 00:06:10,349
scripting language well at the time I

00:06:08,639 --> 00:06:12,330
didn't actually know Python very well

00:06:10,349 --> 00:06:13,379
I'd use it a little bit but I thought

00:06:12,330 --> 00:06:18,060
well this would be a good chance to

00:06:13,379 --> 00:06:19,650
learn Python as well and I thought you

00:06:18,060 --> 00:06:22,919
know how high can Python be it's like if

00:06:19,650 --> 00:06:24,150
for you know it's pretty basic and then

00:06:22,919 --> 00:06:25,710
you know there's more and more I got

00:06:24,150 --> 00:06:28,349
into it the more I realized how such

00:06:25,710 --> 00:06:31,080
sophisticated language it was and all

00:06:28,349 --> 00:06:32,759
these features and and took quite a lot

00:06:31,080 --> 00:06:34,589
of time to implement them all but anyway

00:06:32,759 --> 00:06:36,509
it was a I was very naive and it was

00:06:34,589 --> 00:06:37,860
good that I was naive it's always always

00:06:36,509 --> 00:06:40,860
good to approach things from a very nice

00:06:37,860 --> 00:06:44,580
point of view you otherwise you don't do

00:06:40,860 --> 00:06:46,740
anything at all so and python has a

00:06:44,580 --> 00:06:48,629
really good community at large I mean as

00:06:46,740 --> 00:06:51,449
you can see here really large great

00:06:48,629 --> 00:06:53,159
community lots of people friendly on the

00:06:51,449 --> 00:06:55,949
Internet willing to teach you how to use

00:06:53,159 --> 00:06:58,349
it lots of tutorials lots of you know

00:06:55,949 --> 00:07:00,389
debuggers and developers and libraries

00:06:58,349 --> 00:07:02,610
and infrastructure that already exists

00:07:00,389 --> 00:07:04,710
so by choosing Python I was leveraging

00:07:02,610 --> 00:07:06,839
off that instead of implementing my own

00:07:04,710 --> 00:07:08,969
language for example or a different one

00:07:06,839 --> 00:07:11,849
so that was one of the big choices for

00:07:08,969 --> 00:07:14,460
using Python I also think Python is

00:07:11,849 --> 00:07:16,110
really really easy to learn if if you're

00:07:14,460 --> 00:07:18,659
here and you're new to Python and you've

00:07:16,110 --> 00:07:20,550
never tried it before it's a really easy

00:07:18,659 --> 00:07:22,649
language to start learn to start with

00:07:20,550 --> 00:07:25,439
you can do something simple very quickly

00:07:22,649 --> 00:07:27,300
but then as an advanced user you don't

00:07:25,439 --> 00:07:28,860
run out of steam along the way so you

00:07:27,300 --> 00:07:31,020
keep learning and learning and

00:07:28,860 --> 00:07:32,640
learning and you keep learning and even

00:07:31,020 --> 00:07:34,800
today I still learn about stuff even

00:07:32,640 --> 00:07:37,770
though I've implemented Python basically

00:07:34,800 --> 00:07:39,300
so I mean the Glennon curve is shallow

00:07:37,770 --> 00:07:40,950
but really long and I think it's great

00:07:39,300 --> 00:07:42,090
for both beginners and advanced use it's

00:07:40,950 --> 00:07:44,310
because it keeps people interested in

00:07:42,090 --> 00:07:48,540
the language and it also evolved all the

00:07:44,310 --> 00:07:50,100
time it has really good operations for

00:07:48,540 --> 00:07:52,020
microcontrollers because you when you're

00:07:50,100 --> 00:07:55,020
working with bits you want to be able to

00:07:52,020 --> 00:07:57,120
do and and or and XOR and Python

00:07:55,020 --> 00:07:58,710
provides these features for you and it

00:07:57,120 --> 00:08:01,890
has a good distinction between integers

00:07:58,710 --> 00:08:05,160
and floating point numbers which is very

00:08:01,890 --> 00:08:06,180
important and cause pythons compiled

00:08:05,160 --> 00:08:08,010
that you can actually do some

00:08:06,180 --> 00:08:10,680
optimizations in fact there's a lot of

00:08:08,010 --> 00:08:14,280
work at the moment develop on the Python

00:08:10,680 --> 00:08:16,920
dev mailing list about optimizing C

00:08:14,280 --> 00:08:19,980
Python to make it faster faster you know

00:08:16,920 --> 00:08:24,270
advanced compilation of the byte code so

00:08:19,980 --> 00:08:27,120
that's really cool so why can't we just

00:08:24,270 --> 00:08:29,730
take normal Python so C Python is the

00:08:27,120 --> 00:08:32,820
normal person you use every day mostly

00:08:29,730 --> 00:08:35,700
on your computer why can't we just take

00:08:32,820 --> 00:08:41,130
C Python and you know compile it with

00:08:35,700 --> 00:08:43,130
space optimization as in my - OS in GCC

00:08:41,130 --> 00:08:47,100
so that it fits on our microcontroller

00:08:43,130 --> 00:08:50,250
and the reason is because internally C

00:08:47,100 --> 00:08:52,560
Python doesn't really care about memory

00:08:50,250 --> 00:08:54,330
usage so much so it uses it liberally I

00:08:52,560 --> 00:08:56,520
mean it doesn't use it excessively but

00:08:54,330 --> 00:09:00,570
when you're talking about 64 kilobytes

00:08:56,520 --> 00:09:03,780
of RAM is all you have then things like

00:09:00,570 --> 00:09:05,970
integers in C Python each integer like

00:09:03,780 --> 00:09:07,950
the number one takes about 16 bytes of

00:09:05,970 --> 00:09:09,960
memory because you need to point it to

00:09:07,950 --> 00:09:11,940
its type being an integer its reference

00:09:09,960 --> 00:09:13,560
count and then the number of limbs and

00:09:11,940 --> 00:09:19,230
the limb value which just for number one

00:09:13,560 --> 00:09:20,490
is about 16 bytes and so PI C Python in

00:09:19,230 --> 00:09:22,680
order to be more efficient it pre

00:09:20,490 --> 00:09:25,500
allocates all the integers from -5 to

00:09:22,680 --> 00:09:27,240
255 and that uses about 4 kilobytes of

00:09:25,500 --> 00:09:29,340
memory when you just start Python and

00:09:27,240 --> 00:09:30,660
that's already eating in to a

00:09:29,340 --> 00:09:32,490
significant amount of memory on your

00:09:30,660 --> 00:09:34,680
microcontroller so this is not a very

00:09:32,490 --> 00:09:36,660
good thing and it also means every time

00:09:34,680 --> 00:09:39,600
you want to do some addition like you

00:09:36,660 --> 00:09:42,290
know 100 plus 200 I got to allocate

00:09:39,600 --> 00:09:46,019
memory for the result for 300

00:09:42,290 --> 00:09:47,850
so this in C Python it's not slow

00:09:46,019 --> 00:09:50,310
because memory is is abundant but I'm a

00:09:47,850 --> 00:09:53,430
microcontroller this is a problem

00:09:50,310 --> 00:09:55,470
I'm the other thing which which requires

00:09:53,430 --> 00:09:57,899
memory is if you do a method call you

00:09:55,470 --> 00:09:59,820
have to led2 on for example you've got

00:09:57,899 --> 00:10:02,190
to extract the on method from the led

00:09:59,820 --> 00:10:04,589
object and you make a bound method

00:10:02,190 --> 00:10:06,480
object which takes our memory and then

00:10:04,589 --> 00:10:08,850
you call this bound method object and

00:10:06,480 --> 00:10:10,649
then this takes up you know a little bit

00:10:08,850 --> 00:10:12,600
of memory but if you're going to do this

00:10:10,649 --> 00:10:13,829
thing hundreds of thousands of times in

00:10:12,600 --> 00:10:15,240
a loop you're going to be eating through

00:10:13,829 --> 00:10:17,190
lots of memory writing the garbage

00:10:15,240 --> 00:10:21,050
collector so it's going to be a bit slow

00:10:17,190 --> 00:10:23,940
and so the idea with micro Python was to

00:10:21,050 --> 00:10:28,380
rewrite Python from scratch so I didn't

00:10:23,940 --> 00:10:32,040
take C Python and just change it I just

00:10:28,380 --> 00:10:33,360
started from zero and implemented Python

00:10:32,040 --> 00:10:34,949
in a new way

00:10:33,360 --> 00:10:36,449
so that it was optimized from the

00:10:34,949 --> 00:10:39,930
beginning not to use memory where

00:10:36,449 --> 00:10:43,970
possible so the main thing is don't use

00:10:39,930 --> 00:10:46,199
memory so for those who haven't seen

00:10:43,970 --> 00:10:48,899
macro Python in action before I'll do a

00:10:46,199 --> 00:10:50,910
quick demo just about what it is so you

00:10:48,899 --> 00:10:54,420
can understand so you have a bit more in

00:10:50,910 --> 00:10:56,310
mind what's going on here so you don't

00:10:54,420 --> 00:10:58,199
need to see anything but it's just this

00:10:56,310 --> 00:11:02,730
this is what this is our Pi board which

00:10:58,199 --> 00:11:03,959
is a runs macro Python but most of the

00:11:02,730 --> 00:11:10,920
stuff you'll see will be on the screen

00:11:03,959 --> 00:11:12,839
here so I'll okay so I log in here now I

00:11:10,920 --> 00:11:15,089
just have to explain what's happening so

00:11:12,839 --> 00:11:17,970
the computer he's not doing anything

00:11:15,089 --> 00:11:20,940
special it's just sending characters

00:11:17,970 --> 00:11:22,920
down this wire this USB cable to the

00:11:20,940 --> 00:11:24,420
chip the chip decides what to do and

00:11:22,920 --> 00:11:25,740
then it sends characters back so it's

00:11:24,420 --> 00:11:27,889
just the computer's acting is a very

00:11:25,740 --> 00:11:31,050
dumb terminal so if I press the letter A

00:11:27,889 --> 00:11:32,699
it just sends a down the wire and then

00:11:31,050 --> 00:11:34,350
the could this microcontroller has to

00:11:32,699 --> 00:11:36,000
decide what to do with that a and

00:11:34,350 --> 00:11:38,250
because it knows I'm at the prompt it's

00:11:36,000 --> 00:11:40,519
like okay he's typing in a given a back

00:11:38,250 --> 00:11:44,100
and so it looks like he's typing in a

00:11:40,519 --> 00:11:45,839
but anyway the microcontroller has to do

00:11:44,100 --> 00:11:48,949
all these things so this is well the

00:11:45,839 --> 00:11:48,949
obits the end of the talk that's it

00:11:50,690 --> 00:11:56,460
but you can i mean well one plus two is

00:11:53,760 --> 00:11:58,290
three but the point is yeah it's okay

00:11:56,460 --> 00:12:01,260
you can see that's a three that when I

00:11:58,290 --> 00:12:02,610
do one plus two so it sends the one it

00:12:01,260 --> 00:12:04,020
sends the plus it sends the to it soon

00:12:02,610 --> 00:12:05,370
as the enter and then the

00:12:04,020 --> 00:12:07,890
microcontroller is like well what do I

00:12:05,370 --> 00:12:09,720
do with one plus two enter and it knows

00:12:07,890 --> 00:12:11,400
okay I've got to compile that into black

00:12:09,720 --> 00:12:13,770
code then I've got it executed and I got

00:12:11,400 --> 00:12:16,350
to print the result out and all of that

00:12:13,770 --> 00:12:18,270
is done on the microcontroller so it it

00:12:16,350 --> 00:12:20,610
it looks at this string one plus two it

00:12:18,270 --> 00:12:22,830
turns it into tokens and a compiler and

00:12:20,610 --> 00:12:24,600
it um it prints the result out so that

00:12:22,830 --> 00:12:27,570
the compilation is all done on the

00:12:24,600 --> 00:12:30,270
microcontroller it could be running with

00:12:27,570 --> 00:12:32,310
a battery sitting in the corner over

00:12:30,270 --> 00:12:33,630
there doing all this stuff I'm on its

00:12:32,310 --> 00:12:36,840
own doesn't need to be connected to the

00:12:33,630 --> 00:12:38,660
computer so this is just to set your

00:12:36,840 --> 00:12:41,910
expectations of what's happening here

00:12:38,660 --> 00:12:43,710
but this here is a full well as full as

00:12:41,910 --> 00:12:46,800
we can make at Python sort of

00:12:43,710 --> 00:12:48,150
interactive prompt and you have things

00:12:46,800 --> 00:12:53,070
where you have you have floating-point

00:12:48,150 --> 00:12:58,380
numbers and math module so sine of a

00:12:53,070 --> 00:13:00,630
half and then you have say big numbers

00:12:58,380 --> 00:13:04,410
so one two three four times four five

00:13:00,630 --> 00:13:06,360
six well that's not very big but if I do

00:13:04,410 --> 00:13:08,370
let's try one two three to the power of

00:13:06,360 --> 00:13:11,160
four or five six that's a bigger number

00:13:08,370 --> 00:13:14,010
so but it has so it has all the features

00:13:11,160 --> 00:13:15,930
of Python you don't it's it's supposed

00:13:14,010 --> 00:13:17,700
to be you know Python on your computer

00:13:15,930 --> 00:13:22,710
you know Python on the microcontroller

00:13:17,700 --> 00:13:25,440
it's the same thing and it it has so we

00:13:22,710 --> 00:13:27,870
can have a look at this is a micro

00:13:25,440 --> 00:13:31,710
Python module and we can have a look at

00:13:27,870 --> 00:13:34,620
the memory that's being used so it says

00:13:31,710 --> 00:13:36,900
GC total 100 to 400 to this

00:13:34,620 --> 00:13:39,800
microcontroller has that much that many

00:13:36,900 --> 00:13:42,120
bytes of heap 102 kilobyte oh yeah

00:13:39,800 --> 00:13:45,120
hundred thousand bytes of heap and it's

00:13:42,120 --> 00:13:47,370
used 1,300 of them to do what I've

00:13:45,120 --> 00:13:48,960
already done and then this this diagram

00:13:47,370 --> 00:13:52,770
down the bottom showing you which parts

00:13:48,960 --> 00:13:54,450
of the heap is used so you can see it

00:13:52,770 --> 00:13:56,640
doesn't need much memory just to do what

00:13:54,450 --> 00:14:02,360
I've been doing import math module if if

00:13:56,640 --> 00:14:02,360
I reboot that was and and try again

00:14:03,290 --> 00:14:08,570
it's also got tab-completion that's why

00:14:05,570 --> 00:14:11,649
I can type so quickly I'm only using 480

00:14:08,570 --> 00:14:13,820
bytes of heap just just a fresh start

00:14:11,649 --> 00:14:18,259
so the other things it has a built-in

00:14:13,820 --> 00:14:20,420
file system so input OS OS start Lister

00:14:18,259 --> 00:14:24,079
so these are some files in the file

00:14:20,420 --> 00:14:25,819
system attack I'm actually and if I put

00:14:24,079 --> 00:14:28,160
an SD card in I'll have another sort of

00:14:25,819 --> 00:14:31,540
directory mounted on the SD card but I

00:14:28,160 --> 00:14:37,339
can use in your f equals open to read my

00:14:31,540 --> 00:14:39,829
boot py which is run on the boot up so

00:14:37,339 --> 00:14:42,259
it's really trying to be Python as much

00:14:39,829 --> 00:14:44,029
as it can and you can store your Python

00:14:42,259 --> 00:14:45,980
code on the internal file system and

00:14:44,029 --> 00:14:50,360
import your code that you wrote and and

00:14:45,980 --> 00:14:51,949
do all these fancy things ok so this is

00:14:50,360 --> 00:14:54,440
just to show you what what's possible

00:14:51,949 --> 00:14:56,329
there's there's so many things I can do

00:14:54,440 --> 00:15:00,110
maybe I can show you just quickly the

00:14:56,329 --> 00:15:06,440
accelerometer demo so if I make an

00:15:00,110 --> 00:15:08,389
accelerometer object so so AC is now my

00:15:06,440 --> 00:15:12,350
accelerometer which is built into the

00:15:08,389 --> 00:15:16,940
board and I think it has an X method so

00:15:12,350 --> 00:15:20,240
let's make a loop while true print the x

00:15:16,940 --> 00:15:22,069
value and then let's just wait a little

00:15:20,240 --> 00:15:28,220
bit so it doesn't print so much stuff

00:15:22,069 --> 00:15:30,079
out okay so this is the X angle of the

00:15:28,220 --> 00:15:33,380
board so if I just the angle of the

00:15:30,079 --> 00:15:35,899
board zero is when it's flat and then it

00:15:33,380 --> 00:15:38,120
goes from minus thirty well minus 22

00:15:35,899 --> 00:15:39,740
past went well I think it's minus 32

00:15:38,120 --> 00:15:44,080
plus 32 is what's supposed to go between

00:15:39,740 --> 00:15:46,149
but um if I shake it Ekans

00:15:44,080 --> 00:15:47,830
okay but then and then you just press

00:15:46,149 --> 00:15:49,300
control-c to break out of the loop and

00:15:47,830 --> 00:15:50,860
you can keep doing stuff so there's lots

00:15:49,300 --> 00:15:52,540
of hardware you can play with lights and

00:15:50,860 --> 00:15:55,240
accelerometer and you can attach things

00:15:52,540 --> 00:16:01,060
to it and you have an i2c bus and aur

00:15:55,240 --> 00:16:03,399
and a spi and SD card a can bus ADC SDA

00:16:01,060 --> 00:16:05,290
sees timers interrupts you can do

00:16:03,399 --> 00:16:09,010
hardware interrupts lots of cool stuff

00:16:05,290 --> 00:16:10,930
so okay that's just sort of an

00:16:09,010 --> 00:16:13,480
introduction to micro paithan and how it

00:16:10,930 --> 00:16:16,630
works so you can know what's going on

00:16:13,480 --> 00:16:18,610
let's continue with the talk so the

00:16:16,630 --> 00:16:21,040
title of the talk was from kickstarter

00:16:18,610 --> 00:16:23,470
to space so i explained already how the

00:16:21,040 --> 00:16:25,420
kickstarter came about it's because I

00:16:23,470 --> 00:16:28,029
thought you know I but let's see if

00:16:25,420 --> 00:16:31,690
people lack this idea Kickstarter is a

00:16:28,029 --> 00:16:33,130
good way to sort of you know bootstrap

00:16:31,690 --> 00:16:35,410
your idea the people are people

00:16:33,130 --> 00:16:37,180
interested in what you're doing at least

00:16:35,410 --> 00:16:39,540
that's what it used to be this because

00:16:37,180 --> 00:16:42,490
this was done almost three years ago now

00:16:39,540 --> 00:16:44,470
and and today Kickstarter has turned

00:16:42,490 --> 00:16:45,910
into a bit more of well we already have

00:16:44,470 --> 00:16:47,500
a product it's almost ready we're just

00:16:45,910 --> 00:16:52,690
gonna use Kickstarter by advertising

00:16:47,500 --> 00:16:54,399
it's a bit of a shame but anyway so I

00:16:52,690 --> 00:16:56,860
started I wrote the first line of micro

00:16:54,399 --> 00:16:59,050
Python in the third of April 2013 over

00:16:56,860 --> 00:17:00,459
three years ago and I remember writing

00:16:59,050 --> 00:17:02,890
the date down because I'm like you know

00:17:00,459 --> 00:17:05,260
it's just to have a history of what when

00:17:02,890 --> 00:17:06,970
you started something and then in

00:17:05,260 --> 00:17:08,829
September of that year there was a

00:17:06,970 --> 00:17:10,419
flashing light and a button running on

00:17:08,829 --> 00:17:12,640
the microcontroller and then a month

00:17:10,419 --> 00:17:16,150
later I was able to attach USB and have

00:17:12,640 --> 00:17:18,220
a file system and at that point I'm like

00:17:16,150 --> 00:17:20,860
okay this is Minimum Viable Product this

00:17:18,220 --> 00:17:22,209
is ready to show people and asked if

00:17:20,860 --> 00:17:26,410
they're interested and then I can

00:17:22,209 --> 00:17:28,780
continue developing it further so with

00:17:26,410 --> 00:17:30,580
my lovely wife we made a video which is

00:17:28,780 --> 00:17:32,230
all Kickstarter's need a good video but

00:17:30,580 --> 00:17:34,390
I think it's good to be honest in your

00:17:32,230 --> 00:17:35,679
video just you know just have you saying

00:17:34,390 --> 00:17:37,990
in front of the camera and you just talk

00:17:35,679 --> 00:17:41,550
about stuff and it's the best way to

00:17:37,990 --> 00:17:41,550
make a video and that's what we did and

00:17:41,760 --> 00:17:46,240
the next you know then you you go

00:17:44,830 --> 00:17:49,780
through the process of Kickstarter we

00:17:46,240 --> 00:17:52,060
launched it in November of 2013 and we

00:17:49,780 --> 00:17:53,920
got a really great response many many

00:17:52,060 --> 00:17:56,250
more backers than we thought we would

00:17:53,920 --> 00:17:58,840
almost 2000 backers and raised nearly

00:17:56,250 --> 00:18:02,470
180,000 Australian dollars when

00:17:58,840 --> 00:18:04,720
converted from pounds and then I

00:18:02,470 --> 00:18:06,970
officially call it finished in April

00:18:04,720 --> 00:18:08,440
2015 which was only a year ago because

00:18:06,970 --> 00:18:10,480
it took so long to do all the things

00:18:08,440 --> 00:18:11,800
that I promised I would do we need if

00:18:10,480 --> 00:18:16,810
you do a Kickstarter don't over promise

00:18:11,800 --> 00:18:19,120
that's the worst thing and just note

00:18:16,810 --> 00:18:20,980
that Kickstarter itself as a company has

00:18:19,120 --> 00:18:22,930
raised over a billion dollars in funds

00:18:20,980 --> 00:18:24,640
for its projects which is a massive

00:18:22,930 --> 00:18:28,080
amount of money Kickstarter is a

00:18:24,640 --> 00:18:30,790
phenomenon these days I mean and yes

00:18:28,080 --> 00:18:33,850
it's it's a pretty crazy ride doing a

00:18:30,790 --> 00:18:35,320
Kickstarter and it's difficult if you're

00:18:33,850 --> 00:18:37,210
going to do one get get advice to

00:18:35,320 --> 00:18:40,710
someone who's done one and ask them know

00:18:37,210 --> 00:18:44,950
just to take you through the ropes so

00:18:40,710 --> 00:18:47,530
what happens when you when you do it so

00:18:44,950 --> 00:18:49,750
you get this you get this page and it

00:18:47,530 --> 00:18:51,580
says I have read the terms of conditions

00:18:49,750 --> 00:18:56,170
and you just click you don't read then

00:18:51,580 --> 00:18:57,850
we just click yeah I think it in there

00:18:56,170 --> 00:18:59,410
it's like you know if you don't fulfill

00:18:57,850 --> 00:19:02,140
you've got to pay everyone the money

00:18:59,410 --> 00:19:05,820
back for whatever you might be worried

00:19:02,140 --> 00:19:08,650
about that winner gets the problem

00:19:05,820 --> 00:19:11,470
anyway so you click launch and then it

00:19:08,650 --> 00:19:15,250
says yeah your your your project has

00:19:11,470 --> 00:19:16,600
been launched good luck and in the

00:19:15,250 --> 00:19:20,590
background you can see we're at zero

00:19:16,600 --> 00:19:23,290
pounds and 29 days to go and then at the

00:19:20,590 --> 00:19:26,560
very end so here's one second to go so

00:19:23,290 --> 00:19:30,070
this is when we was finished and we had

00:19:26,560 --> 00:19:31,690
surpassed our all our expectations and I

00:19:30,070 --> 00:19:33,580
mean doing a Kickstarter it's it's a

00:19:31,690 --> 00:19:34,960
full I thought you know I'll launch the

00:19:33,580 --> 00:19:38,080
Kickstarter and then I'll do all the

00:19:34,960 --> 00:19:39,940
coding while it's running and but know

00:19:38,080 --> 00:19:41,950
when the Kickstarter launches you've got

00:19:39,940 --> 00:19:44,410
threat you know got a month of answering

00:19:41,950 --> 00:19:46,810
emails of people who are asking

00:19:44,410 --> 00:19:49,360
questions we were like wow this is cool

00:19:46,810 --> 00:19:51,330
or this is you know you beat me to it

00:19:49,360 --> 00:19:53,880
and I hate you and

00:19:51,330 --> 00:19:57,200
no I did get I I got one was very

00:19:53,880 --> 00:19:59,190
similar to that because anyway but

00:19:57,200 --> 00:20:01,080
before we launched we were really

00:19:59,190 --> 00:20:02,280
worried that you know because it was a

00:20:01,080 --> 00:20:04,230
time when everyone was doing these

00:20:02,280 --> 00:20:06,480
Arduino projects and there was s Perino

00:20:04,230 --> 00:20:07,560
the JavaScript version and we were

00:20:06,480 --> 00:20:09,150
really worried that we were going to get

00:20:07,560 --> 00:20:11,790
beaten to it because mycoplasma seems

00:20:09,150 --> 00:20:13,590
like such a good idea Mac you know what

00:20:11,790 --> 00:20:17,310
hasn't someone done this and I was

00:20:13,590 --> 00:20:21,480
really worried and luckily we made it in

00:20:17,310 --> 00:20:22,680
time and then we had to fulfill so you

00:20:21,480 --> 00:20:24,210
don't get a hundred thousand pounds to

00:20:22,680 --> 00:20:27,270
spend on a car you get a hundred

00:20:24,210 --> 00:20:29,340
thousand pounds to to do all this stuff

00:20:27,270 --> 00:20:31,290
and one of those things was to make

00:20:29,340 --> 00:20:34,500
boards this little board that I was

00:20:31,290 --> 00:20:37,020
demonstrating before so we called the PI

00:20:34,500 --> 00:20:38,820
board so we decided not to go in China

00:20:37,020 --> 00:20:41,430
and try and get it cheaply done but to

00:20:38,820 --> 00:20:42,990
do it locally in the UK which was just

00:20:41,430 --> 00:20:45,600
down the road in Luton about an hour's

00:20:42,990 --> 00:20:47,910
drive from Cambridge and it was really

00:20:45,600 --> 00:20:49,950
good I mean we got approached by many

00:20:47,910 --> 00:20:53,790
different manufacturers from UK and

00:20:49,950 --> 00:20:56,700
abroad and and gel tech weirdest with

00:20:53,790 --> 00:20:59,610
their fifth free lunch and yummy food so

00:20:56,700 --> 00:21:01,140
they said you know come over and come

00:20:59,610 --> 00:21:03,000
over and have a look at our facility and

00:21:01,140 --> 00:21:04,710
we did and we walk through and there's a

00:21:03,000 --> 00:21:06,870
picture in top right corner there it's

00:21:04,710 --> 00:21:08,340
really nice to be inside a factory where

00:21:06,870 --> 00:21:10,200
they make stuff because it's like

00:21:08,340 --> 00:21:11,460
normally you're coding away but if

00:21:10,200 --> 00:21:12,840
you're going to a factory and you see

00:21:11,460 --> 00:21:15,930
things coming out of a production line

00:21:12,840 --> 00:21:17,610
it's very cool they had a nice facility

00:21:15,930 --> 00:21:19,740
normally gel take two really high-end

00:21:17,610 --> 00:21:22,620
stuff low volume like they build parts

00:21:19,740 --> 00:21:24,380
of the LHC this Collider that I was sort

00:21:22,620 --> 00:21:27,030
of part of when I was a physicist and

00:21:24,380 --> 00:21:29,700
they'd never done such a large volume

00:21:27,030 --> 00:21:30,990
production before making 3,000 boards

00:21:29,700 --> 00:21:35,430
they're like three thousand that's a

00:21:30,990 --> 00:21:36,930
massive number and so but there but this

00:21:35,430 --> 00:21:39,300
small you know so we wanted to small

00:21:36,930 --> 00:21:42,450
low-cost per unit but many of them and

00:21:39,300 --> 00:21:45,060
we because they were so keen to sort of

00:21:42,450 --> 00:21:46,890
help us and get into this space of more

00:21:45,060 --> 00:21:50,190
consumer grade rather than high tech

00:21:46,890 --> 00:21:51,720
great products they they gave us a

00:21:50,190 --> 00:21:53,790
really good price and assembly which

00:21:51,720 --> 00:21:57,030
match the other passes we had and so we

00:21:53,790 --> 00:21:59,070
wanted to go with them and and yeah it

00:21:57,030 --> 00:22:00,570
was really good that we I mean that

00:21:59,070 --> 00:22:02,040
there's always a few little bumps along

00:22:00,570 --> 00:22:04,290
the way with the manufacturer because

00:22:02,040 --> 00:22:05,130
you know when you make three thousand of

00:22:04,290 --> 00:22:06,720
something

00:22:05,130 --> 00:22:08,309
the little errors oh they're always come

00:22:06,720 --> 00:22:10,140
in you know even if there's a point 1%

00:22:08,309 --> 00:22:12,270
error of something happening if you buy

00:22:10,140 --> 00:22:14,700
6000 switches poor point one percent of

00:22:12,270 --> 00:22:17,400
6000 is a few so a few switches break

00:22:14,700 --> 00:22:18,720
for example so when you're dealing with

00:22:17,400 --> 00:22:20,460
such large numbers there's always things

00:22:18,720 --> 00:22:24,179
that go wrong but jobs are really really

00:22:20,460 --> 00:22:26,460
helpful all along the way we would the

00:22:24,179 --> 00:22:27,929
first batch of so you're making a panel

00:22:26,460 --> 00:22:29,250
at the bottom left corner this doesn't

00:22:27,929 --> 00:22:31,260
show the full panel but there's 24

00:22:29,250 --> 00:22:33,150
boards in the panel and the first one

00:22:31,260 --> 00:22:34,350
that came off the line I was there to

00:22:33,150 --> 00:22:37,110
see it come out of the oven and was

00:22:34,350 --> 00:22:40,169
going to test it so we tested all 24 and

00:22:37,110 --> 00:22:41,929
I think 16 were broken and that's not

00:22:40,169 --> 00:22:44,520
very good yield

00:22:41,929 --> 00:22:47,490
so we said so jobs like we're helpful we

00:22:44,520 --> 00:22:48,960
sat there we had an oscilloscope and you

00:22:47,490 --> 00:22:50,580
know working out was wrong and in the

00:22:48,960 --> 00:22:52,620
end it turned out that the capacitors

00:22:50,580 --> 00:22:54,450
for the load capacitors for the crystal

00:22:52,620 --> 00:22:56,159
weren't on the right size because the

00:22:54,450 --> 00:22:58,530
datasheet was wrong and so we changed

00:22:56,159 --> 00:23:00,030
them we tried all different sizes so

00:22:58,530 --> 00:23:02,520
there were 27 picofarad and we tried

00:23:00,030 --> 00:23:04,049
everything from 27 down to 10 and then

00:23:02,520 --> 00:23:05,909
picked the middle one that worked and

00:23:04,049 --> 00:23:08,789
then made the rest of the board to that

00:23:05,909 --> 00:23:13,559
revised capacitor value and then luckily

00:23:08,789 --> 00:23:16,110
they all worked so yeah after they come

00:23:13,559 --> 00:23:18,690
out of the factory then you you you get

00:23:16,110 --> 00:23:20,429
all these things to ship to people so

00:23:18,690 --> 00:23:22,260
there's these boxes we put them in

00:23:20,429 --> 00:23:24,299
little black boxes and on the right

00:23:22,260 --> 00:23:27,179
there's the boards with header pins sold

00:23:24,299 --> 00:23:28,500
it in and you get boxes of parts and

00:23:27,179 --> 00:23:31,230
you've got to put them all together into

00:23:28,500 --> 00:23:33,690
kits so what you do is you go to your

00:23:31,230 --> 00:23:40,830
local university and hire all these PhDs

00:23:33,690 --> 00:23:42,240
and then postdocs well I mean because I

00:23:40,830 --> 00:23:43,980
was still at the University then and I

00:23:42,240 --> 00:23:46,380
had lots of good friends so I think in

00:23:43,980 --> 00:23:50,730
this room there's like 4 PhDs in

00:23:46,380 --> 00:23:52,860
theoretical physics and masters of

00:23:50,730 --> 00:23:56,220
Business and everything I mean the way

00:23:52,860 --> 00:23:59,159
overqualified but programming and

00:23:56,220 --> 00:24:03,500
packing boxes and this is a little house

00:23:59,159 --> 00:24:05,850
in Cambridge and it's yeah anyway so

00:24:03,500 --> 00:24:07,140
this is this is if you've done a

00:24:05,850 --> 00:24:08,220
Kickstarter you know what it's like and

00:24:07,140 --> 00:24:09,450
if you've seen photos from other

00:24:08,220 --> 00:24:11,370
Kickstarter's you've probably seen

00:24:09,450 --> 00:24:15,419
something similar to this this is what

00:24:11,370 --> 00:24:15,900
it's like and you pack stuff into boxes

00:24:15,419 --> 00:24:21,350
into n

00:24:15,900 --> 00:24:23,730
elopes and into boxes and actually we so

00:24:21,350 --> 00:24:26,580
you do think in sort of on the on this

00:24:23,730 --> 00:24:28,220
on the you don't have time to plan so

00:24:26,580 --> 00:24:30,990
we're like okay how do we ship you know

00:24:28,220 --> 00:24:34,500
2,000 items around the world and let's

00:24:30,990 --> 00:24:36,450
put stamps on them and then you go to

00:24:34,500 --> 00:24:38,730
the post office in like well we need 500

00:24:36,450 --> 00:24:41,610
pounds worth of stamps like $1,000 worth

00:24:38,730 --> 00:24:43,080
of stamps please and they're like okay

00:24:41,610 --> 00:24:46,050
and they actually had it at the time and

00:24:43,080 --> 00:24:48,270
they counted out 500 pounds with the

00:24:46,050 --> 00:24:49,800
stamps so we took them home and we put

00:24:48,270 --> 00:24:51,420
them on all the things and I went back

00:24:49,800 --> 00:24:56,490
the next day and I need another 500

00:24:51,420 --> 00:24:58,050
pounds with the stamps and but they said

00:24:56,490 --> 00:25:01,890
ah sorry someone came in yesterday and

00:24:58,050 --> 00:25:05,460
bought all of our stuff we so we don't

00:25:01,890 --> 00:25:07,470
have any left and and I said well what

00:25:05,460 --> 00:25:09,690
can we do and they said well you can buy

00:25:07,470 --> 00:25:13,230
them online and we yeah so we ordered

00:25:09,690 --> 00:25:15,120
more stamps online but it was the right

00:25:13,230 --> 00:25:16,650
solution was actually to do this like

00:25:15,120 --> 00:25:18,390
printed postage and you can print your

00:25:16,650 --> 00:25:21,510
own stamps but we eventually got there

00:25:18,390 --> 00:25:23,520
but not not at the start here is more

00:25:21,510 --> 00:25:24,050
bag so these are like postage bags full

00:25:23,520 --> 00:25:26,640
of stuff

00:25:24,050 --> 00:25:31,560
this is a typical quick style of picture

00:25:26,640 --> 00:25:34,290
if anyway but it was so that was a lot

00:25:31,560 --> 00:25:35,790
of fun doing a Kickstarter and also a

00:25:34,290 --> 00:25:37,890
lot of stress but you know you learn

00:25:35,790 --> 00:25:38,400
stuff and it didn't kill us so it made

00:25:37,890 --> 00:25:44,730
us stronger

00:25:38,400 --> 00:25:48,360
I hope well so anyway back to some

00:25:44,730 --> 00:25:50,250
technical stuff if you ask me you know

00:25:48,360 --> 00:25:51,690
why did you write this piece of code

00:25:50,250 --> 00:25:53,970
this way and I'll they're most likely

00:25:51,690 --> 00:25:56,250
the answer is so that it reduces RAM

00:25:53,970 --> 00:25:57,600
usage because as I said before RAM usage

00:25:56,250 --> 00:26:00,570
is the biggest problem on a

00:25:57,600 --> 00:26:02,490
microcontroller so there's just a list

00:26:00,570 --> 00:26:08,070
here of sort of some of the tricks that

00:26:02,490 --> 00:26:09,720
I've used to reduce ram usage and yeah I

00:26:08,070 --> 00:26:12,600
don't need to go through them all in

00:26:09,720 --> 00:26:16,500
technical detail really but um I think

00:26:12,600 --> 00:26:19,470
there's one oh hang on sorry let me go

00:26:16,500 --> 00:26:20,610
back this there's one trick we use to so

00:26:19,470 --> 00:26:23,790
that you don't have to allocate memory

00:26:20,610 --> 00:26:25,590
for before for numbers all the time we

00:26:23,790 --> 00:26:26,970
use the sinkhole pointer tagging or

00:26:25,590 --> 00:26:28,770
point of stuffing which was barred from

00:26:26,970 --> 00:26:31,110
Lisp or maybe even

00:26:28,770 --> 00:26:35,610
someone invented up all this but you put

00:26:31,110 --> 00:26:37,380
so you have a 32-bit pointer which

00:26:35,610 --> 00:26:39,540
points to your object normally but

00:26:37,380 --> 00:26:41,640
actually you can use the lower bits and

00:26:39,540 --> 00:26:44,100
because they're always zero so if the

00:26:41,640 --> 00:26:46,920
lowest bit is actually a 1 then the rest

00:26:44,100 --> 00:26:48,930
of the bits to encode the integer and if

00:26:46,920 --> 00:26:50,160
a lower bits a 0 then the rest of the

00:26:48,930 --> 00:26:52,410
bits are actually a pointer to the

00:26:50,160 --> 00:26:54,180
object so you you're reusing the address

00:26:52,410 --> 00:26:57,780
space of all your pointers in order to

00:26:54,180 --> 00:26:59,790
fit more stuff in in in the pointers so

00:26:57,780 --> 00:27:02,160
numbers integers below integers that fit

00:26:59,790 --> 00:27:04,730
in 31 bits don't take up any memory on

00:27:02,160 --> 00:27:09,450
the heap they're only they're sort of in

00:27:04,730 --> 00:27:10,890
place stored in place there's no

00:27:09,450 --> 00:27:12,480
reference counting in micro Python only

00:27:10,890 --> 00:27:14,130
garbage collection that reduces the

00:27:12,480 --> 00:27:15,840
memory usage of objects you don't need

00:27:14,130 --> 00:27:17,700
this extra information to do reference

00:27:15,840 --> 00:27:18,780
counting it also means the code is

00:27:17,700 --> 00:27:21,920
smaller because you have to increment

00:27:18,780 --> 00:27:25,290
decrement reference it's all the time

00:27:21,920 --> 00:27:28,080
but I mean yeah it also means you have

00:27:25,290 --> 00:27:30,000
other problems though with with having

00:27:28,080 --> 00:27:32,220
no reference counting this is this is

00:27:30,000 --> 00:27:35,460
sort of a diagram of how the internals

00:27:32,220 --> 00:27:37,740
work don't worry if you can't really

00:27:35,460 --> 00:27:41,520
read it but if if you start at the red

00:27:37,740 --> 00:27:43,440
box that's where the script starts so

00:27:41,520 --> 00:27:45,090
you either have a rapid prompt like

00:27:43,440 --> 00:27:47,670
you're typing in code like I was before

00:27:45,090 --> 00:27:48,930
or you have a script or maybe you've

00:27:47,670 --> 00:27:50,760
have a string that you're compiling

00:27:48,930 --> 00:27:54,260
using Eva or something like that and

00:27:50,760 --> 00:27:56,970
that comes into the lexical asari to the

00:27:54,260 --> 00:28:00,720
lexical analyzer which splits the string

00:27:56,970 --> 00:28:03,540
into the stream of tokens like 1 + + + 2

00:28:00,720 --> 00:28:06,810
and if + :

00:28:03,540 --> 00:28:09,240
and then that stream of tokens goes into

00:28:06,810 --> 00:28:10,830
the parser which turns that into a tree

00:28:09,240 --> 00:28:14,010
which has structure depending on what

00:28:10,830 --> 00:28:16,200
the language is so it'll be plus 1 2 in

00:28:14,010 --> 00:28:19,800
the tree which means the + is applying

00:28:16,200 --> 00:28:21,660
to these two objects and then that parse

00:28:19,800 --> 00:28:23,700
tree goes through the compiler which

00:28:21,660 --> 00:28:26,460
turns it into bytecode so it's like to

00:28:23,700 --> 00:28:28,230
do a plus 1 and 2 I've got a load 1 onto

00:28:26,460 --> 00:28:30,990
the stack then load 2 onto the stack and

00:28:28,230 --> 00:28:33,390
then do a plus operation so it

00:28:30,990 --> 00:28:36,090
translates that into bytecode and then

00:28:33,390 --> 00:28:38,130
that byte code gets executed by the

00:28:36,090 --> 00:28:41,190
virtual machine orange box sort of in

00:28:38,130 --> 00:28:42,460
the middle and the virtual machine

00:28:41,190 --> 00:28:45,760
relies on a lot of runs

00:28:42,460 --> 00:28:47,950
I'm code which is code to lack sort our

00:28:45,760 --> 00:28:50,560
sort lists or search dictionaries or

00:28:47,950 --> 00:28:52,300
split strings so all the things that you

00:28:50,560 --> 00:28:54,250
know you can do with strings like

00:28:52,300 --> 00:28:56,080
searching for string that ends with

00:28:54,250 --> 00:29:00,910
that's implemented by some runtime

00:28:56,080 --> 00:29:03,430
functions which is written in C so yeah

00:29:00,910 --> 00:29:05,980
that's that's the basic way of

00:29:03,430 --> 00:29:07,720
microprocessing instruction most I mean

00:29:05,980 --> 00:29:15,340
normal Python is also structured in a

00:29:07,720 --> 00:29:18,400
very similar way okay this slide is a

00:29:15,340 --> 00:29:21,960
bit more detail about how the point of

00:29:18,400 --> 00:29:24,610
stuffing works so this the X's represent

00:29:21,960 --> 00:29:28,960
and the one represents your object

00:29:24,610 --> 00:29:30,580
pointer and if it's a one in the last

00:29:28,960 --> 00:29:33,520
bit than the X's are actually the

00:29:30,580 --> 00:29:35,500
integer and in all of the code that runs

00:29:33,520 --> 00:29:37,780
it checks where if it is ever an

00:29:35,500 --> 00:29:39,910
overflow so if I've got the biggest

00:29:37,780 --> 00:29:41,980
number I can store in 31 bits and I had

00:29:39,910 --> 00:29:43,570
one two that I don't want to overflow

00:29:41,980 --> 00:29:45,730
like I do and see I think I've actually

00:29:43,570 --> 00:29:48,210
got to now do something else so it

00:29:45,730 --> 00:29:50,860
actually makes a big num which is an

00:29:48,210 --> 00:29:52,180
arbitrarily sized number that's stored

00:29:50,860 --> 00:29:54,910
on the heap and that can use as much

00:29:52,180 --> 00:29:56,710
memory as it likes but usually you don't

00:29:54,910 --> 00:29:58,180
go up to such large numbers but they're

00:29:56,710 --> 00:29:59,950
there as I showed you before if you need

00:29:58,180 --> 00:30:02,200
them so there's this transparent

00:29:59,950 --> 00:30:04,860
transition between numbers that fit in a

00:30:02,200 --> 00:30:07,540
word machine word and numbers that don't

00:30:04,860 --> 00:30:10,150
and then we also optimize the way

00:30:07,540 --> 00:30:13,480
strings are in are restored by by that

00:30:10,150 --> 00:30:15,280
bit pattern you see there and then some

00:30:13,480 --> 00:30:17,830
of the work I did on the Easter project

00:30:15,280 --> 00:30:21,280
which I'll talk about later we

00:30:17,830 --> 00:30:22,900
introduced the 64 bit nan boxing object

00:30:21,280 --> 00:30:24,540
model which is optional if you want to

00:30:22,900 --> 00:30:28,060
use that so if you know what that is

00:30:24,540 --> 00:30:30,100
then you understand it just means that

00:30:28,060 --> 00:30:31,570
the numbers are twice as big and you can

00:30:30,100 --> 00:30:32,920
actually fit floating-point numbers in

00:30:31,570 --> 00:30:36,130
place you don't have to store them on

00:30:32,920 --> 00:30:38,740
the heap either you can ask me later if

00:30:36,130 --> 00:30:42,490
you want to know more details and so

00:30:38,740 --> 00:30:45,520
there's a few extra things I added

00:30:42,490 --> 00:30:49,630
because I wanted to make I wanted to

00:30:45,520 --> 00:30:51,970
make it the ability to run code fast if

00:30:49,630 --> 00:30:53,800
you needed to on a microcontroller so

00:30:51,970 --> 00:30:55,990
normally code

00:30:53,800 --> 00:30:57,160
they said turns into byte code squid

00:30:55,990 --> 00:31:01,120
that you've written like this add

00:30:57,160 --> 00:31:04,420
function is compiling into these four op

00:31:01,120 --> 00:31:06,640
codes which each take out one byte the

00:31:04,420 --> 00:31:09,820
left column is the offset the middle

00:31:06,640 --> 00:31:11,170
column is the OP the opcode value and

00:31:09,820 --> 00:31:14,050
the right column is just a human

00:31:11,170 --> 00:31:17,590
description of that of that opcode so to

00:31:14,050 --> 00:31:19,330
add X&Y you load X you load Y and then

00:31:17,590 --> 00:31:21,640
you add in the new return so it's quite

00:31:19,330 --> 00:31:23,890
straightforward and this is the default

00:31:21,640 --> 00:31:25,929
way of compiling but you can force this

00:31:23,890 --> 00:31:28,900
compilation mode by adding this

00:31:25,929 --> 00:31:31,780
decorator at the micro Python bytecode

00:31:28,900 --> 00:31:33,640
at the start of the function okay so

00:31:31,780 --> 00:31:36,370
that becomes important important for the

00:31:33,640 --> 00:31:39,250
next slide because if you change at

00:31:36,370 --> 00:31:43,660
micro Python dot bytecode to at macro

00:31:39,250 --> 00:31:45,429
Python dot native now I don't expect you

00:31:43,660 --> 00:31:47,800
to read I understand any of that text

00:31:45,429 --> 00:31:50,290
there but what happens then is instead

00:31:47,800 --> 00:31:53,580
of emitting byte code it emits machine

00:31:50,290 --> 00:31:56,260
code so what's happening is instead of

00:31:53,580 --> 00:31:58,929
so the virtual machine can execute

00:31:56,260 --> 00:32:00,490
simple byte codes like load and add but

00:31:58,929 --> 00:32:02,020
all the virtual machine is really doing

00:32:00,490 --> 00:32:04,030
when it executes one of those is

00:32:02,020 --> 00:32:06,309
executing some machine instructions that

00:32:04,030 --> 00:32:08,260
will do that operation so what we do

00:32:06,309 --> 00:32:10,120
here is instead of writing out the byte

00:32:08,260 --> 00:32:11,860
code we write out the machine code

00:32:10,120 --> 00:32:14,110
instructions that the virtual machine

00:32:11,860 --> 00:32:19,360
would have executed for that bytecode

00:32:14,110 --> 00:32:21,730
anyway and so those byte codes from the

00:32:19,360 --> 00:32:24,730
previous page we'll just go back this

00:32:21,730 --> 00:32:26,770
load fast stuff binary up and return

00:32:24,730 --> 00:32:29,080
value they're all expanded by the

00:32:26,770 --> 00:32:31,210
compiler into these machine instructions

00:32:29,080 --> 00:32:33,580
so this is machine code for an ARM chip

00:32:31,210 --> 00:32:35,890
with the running in non thumb mode if

00:32:33,580 --> 00:32:37,990
you interested a lot of it is set up to

00:32:35,890 --> 00:32:39,700
decode the keyword arguments if you've

00:32:37,990 --> 00:32:43,210
passed them in actually the real code is

00:32:39,700 --> 00:32:45,190
sort of at the bottom but yeah and if

00:32:43,210 --> 00:32:46,780
you run if you have code like this it

00:32:45,190 --> 00:32:47,830
uses more memory but it runs about twice

00:32:46,780 --> 00:32:51,220
as fast because you don't have that

00:32:47,830 --> 00:32:54,670
overhead of the virtual machine so

00:32:51,220 --> 00:32:58,510
that's kind of nice but one of the main

00:32:54,670 --> 00:33:00,250
things I wanted to do so if you write

00:32:58,510 --> 00:33:01,780
from microcontrollers in see a lot of

00:33:00,250 --> 00:33:03,790
the time you have some a little bits of

00:33:01,780 --> 00:33:05,590
inline assembler because you want to

00:33:03,790 --> 00:33:07,270
maybe turn interrupts off and write to

00:33:05,590 --> 00:33:09,190
this special register and then

00:33:07,270 --> 00:33:11,860
interest back on again just because

00:33:09,190 --> 00:33:13,120
that's what you have to do to do some

00:33:11,860 --> 00:33:16,420
special feature with the microcontroller

00:33:13,120 --> 00:33:18,220
and that's I didn't want to take that

00:33:16,420 --> 00:33:20,200
away with macro Python I still wanted

00:33:18,220 --> 00:33:21,670
you to have this ability to really go to

00:33:20,200 --> 00:33:23,830
the low level of the machine if you

00:33:21,670 --> 00:33:27,750
needed to so if you decorate your

00:33:23,830 --> 00:33:30,550
function with at micro Python DeSimone

00:33:27,750 --> 00:33:32,710
that means that the next function is

00:33:30,550 --> 00:33:35,800
written in an in machine code assembly

00:33:32,710 --> 00:33:39,340
and it's converted directly line by line

00:33:35,800 --> 00:33:42,100
to the corresponding machine code so in

00:33:39,340 --> 00:33:44,890
this case the function some bytes will

00:33:42,100 --> 00:33:46,270
add an array of memory of so you pass it

00:33:44,890 --> 00:33:47,740
in a memory and it adds the bytes in

00:33:46,270 --> 00:33:49,690
that memory and returns it as a number

00:33:47,740 --> 00:33:53,200
and this is the code to do that written

00:33:49,690 --> 00:33:56,320
in arm thumb code so we moved branch

00:33:53,200 --> 00:33:58,720
label load by add and subtract label

00:33:56,320 --> 00:34:01,150
compare branch if greater than and move

00:33:58,720 --> 00:34:03,010
so the last instruction there that move

00:34:01,150 --> 00:34:04,420
R naught r2 that sort of like return

00:34:03,010 --> 00:34:07,540
because I'm naught is the return

00:34:04,420 --> 00:34:07,930
register so an r2 was the accumulated

00:34:07,540 --> 00:34:10,149
value

00:34:07,930 --> 00:34:12,250
anyway this function does work but the

00:34:10,149 --> 00:34:14,560
main thing is you can now call it like a

00:34:12,250 --> 00:34:18,159
normal pie third function so some bytes

00:34:14,560 --> 00:34:20,770
is just a Python function called some

00:34:18,159 --> 00:34:23,140
bytes it takes two arguments so down the

00:34:20,770 --> 00:34:25,960
bottom there I have the example of how

00:34:23,140 --> 00:34:27,669
it's called so I'm passing it the first

00:34:25,960 --> 00:34:30,840
argument is the number of bytes to add

00:34:27,669 --> 00:34:34,240
and the second argument is a object with

00:34:30,840 --> 00:34:36,640
hopefully of it could be a string or an

00:34:34,240 --> 00:34:38,679
array or anything that has bytes in it

00:34:36,640 --> 00:34:41,040
essentially and then it will return you

00:34:38,679 --> 00:34:43,060
a Python object like an integer

00:34:41,040 --> 00:34:45,130
representing the addition of those bytes

00:34:43,060 --> 00:34:46,659
so this is really useful when you want

00:34:45,130 --> 00:34:49,450
to do some low-level stuff really fast

00:34:46,659 --> 00:34:51,310
and then you don't have to you know

00:34:49,450 --> 00:34:53,590
really give up anything by using Python

00:34:51,310 --> 00:34:56,590
because python is slower running on a

00:34:53,590 --> 00:34:59,350
microcontroller then C and that's just

00:34:56,590 --> 00:35:03,550
unavoidable so this gives you some

00:34:59,350 --> 00:35:05,200
advantage back if you need it I'll just

00:35:03,550 --> 00:35:06,910
briefly say the coding style macca

00:35:05,200 --> 00:35:08,440
Python is not traditional software

00:35:06,910 --> 00:35:11,350
engineering I'm not a software engineer

00:35:08,440 --> 00:35:14,410
I'm a physicist and physicist rat code

00:35:11,350 --> 00:35:16,570
really bad of her not they're not maybe

00:35:14,410 --> 00:35:18,280
not bad but not not not really well but

00:35:16,570 --> 00:35:19,440
with micro Python it wasn't about making

00:35:18,280 --> 00:35:21,060
it a good Coby

00:35:19,440 --> 00:35:22,619
it was about make it actually work and

00:35:21,060 --> 00:35:24,450
from the beginning I didn't know if it

00:35:22,619 --> 00:35:26,400
would work so it was like whatever I'm

00:35:24,450 --> 00:35:30,390
gonna use go to everywhere I'm gonna

00:35:26,400 --> 00:35:33,630
optimize first and you know make it work

00:35:30,390 --> 00:35:35,550
later so a lot of the decisions that

00:35:33,630 --> 00:35:37,980
were made based on analysis as well like

00:35:35,550 --> 00:35:39,270
and analyzed a million lines of Python

00:35:37,980 --> 00:35:41,280
library and see what the most common

00:35:39,270 --> 00:35:44,750
byte codes were or whatever just to see

00:35:41,280 --> 00:35:47,250
how to encode things better for example

00:35:44,750 --> 00:35:49,020
and we have we have this dashboard which

00:35:47,250 --> 00:35:50,579
tracks the size of the code and the

00:35:49,020 --> 00:35:53,700
performance of the code so the red

00:35:50,579 --> 00:35:57,660
jagged line is the PI stones for micro

00:35:53,700 --> 00:35:58,980
Python that went up after doing some

00:35:57,660 --> 00:36:01,650
optimizations and the other lines are

00:35:58,980 --> 00:36:05,550
the size of the code we just try and

00:36:01,650 --> 00:36:07,200
make sure it doesn't grow too much it's

00:36:05,550 --> 00:36:10,140
on github and I think github is an

00:36:07,200 --> 00:36:12,210
amazing community of coders and people

00:36:10,140 --> 00:36:14,190
can just come to a project submit a bug

00:36:12,210 --> 00:36:16,410
report submit a pull request or just

00:36:14,190 --> 00:36:18,000
contribute to the discussion and having

00:36:16,410 --> 00:36:20,790
it on github has really helped the

00:36:18,000 --> 00:36:22,319
project grow because people can run it

00:36:20,790 --> 00:36:24,660
on all different machines submit bug

00:36:22,319 --> 00:36:26,310
reports for those machines and just

00:36:24,660 --> 00:36:29,880
contribute in general has been really

00:36:26,310 --> 00:36:32,810
great we have quite a lot of stars and

00:36:29,880 --> 00:36:36,329
lots of Forks and over 100 contributors

00:36:32,810 --> 00:36:39,089
and I couldn't have done it without the

00:36:36,329 --> 00:36:40,380
help of the community and I think having

00:36:39,089 --> 00:36:44,040
an open-source and being on something

00:36:40,380 --> 00:36:47,700
like github helps a lot with that just

00:36:44,040 --> 00:36:49,380
for your interest here I I scraped

00:36:47,700 --> 00:36:51,930
github a little bit to find out the

00:36:49,380 --> 00:36:53,670
stars of all the top projects because I

00:36:51,930 --> 00:36:55,140
was interested to see sort of what you

00:36:53,670 --> 00:36:56,940
know when you have three thousand stars

00:36:55,140 --> 00:36:58,470
what does it actually mean you know

00:36:56,940 --> 00:36:59,310
could mean nothing or it could mean

00:36:58,470 --> 00:37:02,819
you're the best

00:36:59,310 --> 00:37:05,160
so here there's a lot of JavaScript

00:37:02,819 --> 00:37:09,329
projects on github so I filtered only

00:37:05,160 --> 00:37:12,270
the C and C++ projects and this is the

00:37:09,329 --> 00:37:13,530
top yeah the top list from one and then

00:37:12,270 --> 00:37:15,839
I skipped a few and down to a hundred

00:37:13,530 --> 00:37:17,490
thirteen this was done last year and it

00:37:15,839 --> 00:37:19,339
takes a bit of time to do the scraping

00:37:17,490 --> 00:37:21,990
so I didn't redo it for this year but

00:37:19,339 --> 00:37:23,520
the rankings pretty much haven't changed

00:37:21,990 --> 00:37:25,890
just everyone stars have gone up by a

00:37:23,520 --> 00:37:29,310
lot but you can see microphone is almost

00:37:25,890 --> 00:37:31,109
a position 100 so we're doing okay at

00:37:29,310 --> 00:37:32,570
the top is Linux which I guess you'd

00:37:31,109 --> 00:37:36,360
expect

00:37:32,570 --> 00:37:41,640
but yeah Raspberry Pi Linux is just up

00:37:36,360 --> 00:37:43,530
there at a hundred so yeah micro Python

00:37:41,640 --> 00:37:45,990
can run on really small hardware like

00:37:43,530 --> 00:37:49,590
this pie board that I showed you and

00:37:45,990 --> 00:37:51,750
their it specs there's another platform

00:37:49,590 --> 00:37:53,430
the Wi-Fi which has Wi-Fi built in and

00:37:51,750 --> 00:37:56,010
then this ESP chip which I talked about

00:37:53,430 --> 00:37:57,000
yesterday in a talk only has 96

00:37:56,010 --> 00:37:59,490
kilobytes of RAM

00:37:57,000 --> 00:38:03,110
although the heap is only 32 kilobytes

00:37:59,490 --> 00:38:05,370
on that one or maybe even less about 24

00:38:03,110 --> 00:38:07,560
and yet it's really constrained but

00:38:05,370 --> 00:38:08,910
microfossil still works in microwave 'ln

00:38:07,560 --> 00:38:10,530
also runs on your computer if you want

00:38:08,910 --> 00:38:13,730
to use it as a lightweight version of

00:38:10,530 --> 00:38:16,590
Python maybe on you know open wrt like

00:38:13,730 --> 00:38:19,010
system that you have more other really

00:38:16,590 --> 00:38:21,720
embedded system and a constrain system

00:38:19,010 --> 00:38:24,090
it also runs on this thing called the

00:38:21,720 --> 00:38:26,580
micro bit which was a BBC project that

00:38:24,090 --> 00:38:28,290
we were involved when involved in along

00:38:26,580 --> 00:38:30,740
with the Python Software Foundation I

00:38:28,290 --> 00:38:33,810
won't really talk too much about it it

00:38:30,740 --> 00:38:36,000
asked me later if you'd like it's it's a

00:38:33,810 --> 00:38:38,070
very constrained device 256 K a flash

00:38:36,000 --> 00:38:42,600
and 16 kilobytes of RAM is really small

00:38:38,070 --> 00:38:44,610
but it has some a lot of LEDs and if a

00:38:42,600 --> 00:38:46,500
million of them were made and given away

00:38:44,610 --> 00:38:49,530
or about 700 thousand were given away

00:38:46,500 --> 00:38:51,030
for free to all of the Year sevens in

00:38:49,530 --> 00:38:52,860
the UK so they can learn teaching

00:38:51,030 --> 00:38:56,400
because the curriculum in the UK has

00:38:52,860 --> 00:38:58,650
changed from IT like Excel and word to

00:38:56,400 --> 00:39:01,560
actual computing like programming and

00:38:58,650 --> 00:39:03,390
kids are now on the curriculum they're

00:39:01,560 --> 00:39:05,430
required to learn at least two languages

00:39:03,390 --> 00:39:07,410
one of which must be text-based like

00:39:05,430 --> 00:39:09,180
Python for example and cuz a lot of

00:39:07,410 --> 00:39:11,190
teachers already know Python anyway and

00:39:09,180 --> 00:39:13,350
ticket kids have been learning it we

00:39:11,190 --> 00:39:15,930
think using the micro but with micro

00:39:13,350 --> 00:39:18,000
Python is it's almost a seamless

00:39:15,930 --> 00:39:19,320
transition so they know Python and now

00:39:18,000 --> 00:39:22,080
they can actually make some cool stuff

00:39:19,320 --> 00:39:26,030
with this macro bit so I'll just do a

00:39:22,080 --> 00:39:28,650
little yeah a little demo because

00:39:26,030 --> 00:39:31,190
there's a lot of hard works gone into

00:39:28,650 --> 00:39:34,830
developing the micro bit here let's

00:39:31,190 --> 00:39:36,780
cross our fingers that it works okay so

00:39:34,830 --> 00:39:38,250
this works just like the pie boy demo I

00:39:36,780 --> 00:39:41,310
showed you before you just log in with a

00:39:38,250 --> 00:39:43,950
serial console and you type a and it

00:39:41,310 --> 00:39:46,090
gives you a back a but it can do one

00:39:43,950 --> 00:39:50,590
plus two and I think it can even do

00:39:46,090 --> 00:39:52,810
like you know okay so bit slower it's

00:39:50,590 --> 00:39:56,950
running only at 16 megahertz the other

00:39:52,810 --> 00:40:00,030
one was at about 160 megahertz so but

00:39:56,950 --> 00:40:04,120
the cool thing with the micro bit is we

00:40:00,030 --> 00:40:05,860
have implemented a speech module and you

00:40:04,120 --> 00:40:22,750
can say whatever you like

00:40:05,860 --> 00:40:24,820
so let's see this some a lot of hard

00:40:22,750 --> 00:40:26,680
work has been put into this mostly map

00:40:24,820 --> 00:40:29,230
by mark Shannon who maybe some of you

00:40:26,680 --> 00:40:31,960
know who's a core Python developer and

00:40:29,230 --> 00:40:34,870
Nicolas Tolliver you might also know so

00:40:31,960 --> 00:40:37,630
yeah the three of us have worked quite a

00:40:34,870 --> 00:40:39,040
lot to get this going and Nicolas really

00:40:37,630 --> 00:40:40,660
pushed to get this speech modules he

00:40:39,040 --> 00:40:42,010
thought it would be really cool for kids

00:40:40,660 --> 00:40:43,870
to have this in their classroom they

00:40:42,010 --> 00:40:45,670
could well I think you can imagine what

00:40:43,870 --> 00:40:48,610
you can imagine what the kids are gonna

00:40:45,670 --> 00:40:49,870
say in the classroom I won't write it

00:40:48,610 --> 00:40:53,170
here because that's probably not allowed

00:40:49,870 --> 00:40:57,310
by the code of conduct but if you want

00:40:53,170 --> 00:40:59,560
to hear this again but just to show I

00:40:57,310 --> 00:41:04,710
mean I whatever I type it will talk but

00:40:59,560 --> 00:41:07,710
I mean I'm not it's not pre-canned code

00:41:04,710 --> 00:41:10,600
it's got an American accent I think

00:41:07,710 --> 00:41:12,340
anyway so but this is just normal this

00:41:10,600 --> 00:41:16,810
is Python with with a few extra cool

00:41:12,340 --> 00:41:21,480
things like the micro bit you have a

00:41:16,810 --> 00:41:28,420
display and I can show like an image a

00:41:21,480 --> 00:41:29,680
heart or happy but yeah I won't pick it

00:41:28,420 --> 00:41:31,180
up because it will might destroy the

00:41:29,680 --> 00:41:32,530
sound but it it has a nice little

00:41:31,180 --> 00:41:35,230
display and you can do lots of things

00:41:32,530 --> 00:41:38,590
with it it's a fun device and we think

00:41:35,230 --> 00:41:39,790
that the kids will really like using and

00:41:38,590 --> 00:41:41,260
they've been starting to use it we have

00:41:39,790 --> 00:41:42,310
a lot of good feedback and there have

00:41:41,260 --> 00:41:43,180
been other countries around the world

00:41:42,310 --> 00:41:45,670
that have been interested in

00:41:43,180 --> 00:41:47,050
implementing this as well but anyway I

00:41:45,670 --> 00:41:48,640
have to get to this last bit because

00:41:47,050 --> 00:41:50,560
this is an important part of the talk

00:41:48,640 --> 00:41:57,070
about the European Space Agency project

00:41:50,560 --> 00:41:58,360
that we were doing so I got an email the

00:41:57,070 --> 00:41:59,560
kick started finished and it had been a

00:41:58,360 --> 00:42:02,590
few months into the work

00:41:59,560 --> 00:42:04,300
and I got an email and it you know it

00:42:02,590 --> 00:42:07,270
said it was from someone at the European

00:42:04,300 --> 00:42:09,100
Space Agency the kestech part which is

00:42:07,270 --> 00:42:11,050
in the Netherlands that take their

00:42:09,100 --> 00:42:13,090
technology group and they said do you

00:42:11,050 --> 00:42:23,290
think Marco Pathan can run on a

00:42:13,090 --> 00:42:26,890
satellite and I said yes I I didn't even

00:42:23,290 --> 00:42:30,430
think about it I'm just like yes I think

00:42:26,890 --> 00:42:32,530
it can and then they said well that

00:42:30,430 --> 00:42:34,450
sounds good and then their vast a few

00:42:32,530 --> 00:42:36,280
more technical questions you know we've

00:42:34,450 --> 00:42:38,470
got a constrained system that you know

00:42:36,280 --> 00:42:40,120
space computers were built in you know a

00:42:38,470 --> 00:42:42,340
long time ago and they haven't been

00:42:40,120 --> 00:42:45,460
changed because they've got to be

00:42:42,340 --> 00:42:46,630
hardened to radiation and proven and and

00:42:45,460 --> 00:42:48,040
all this stuff and it costs you know

00:42:46,630 --> 00:42:49,630
hundreds of thousands of euros to

00:42:48,040 --> 00:42:50,710
actually prove them so once you've done

00:42:49,630 --> 00:42:53,380
it you don't want to do it again every

00:42:50,710 --> 00:42:55,450
year so space computers run it like 80

00:42:53,380 --> 00:42:58,570
megahertz and have 16 megabytes of RAM

00:42:55,450 --> 00:43:01,780
so they're very constrained and usually

00:42:58,570 --> 00:43:03,340
written in C and what you have to do so

00:43:01,780 --> 00:43:05,410
your satellites up there and you like

00:43:03,340 --> 00:43:07,060
okay I have to change the program so you

00:43:05,410 --> 00:43:09,040
turn the settle that off and then you

00:43:07,060 --> 00:43:10,540
upload your new C code that you've

00:43:09,040 --> 00:43:11,860
tested on the ground and you turn

00:43:10,540 --> 00:43:13,570
yourself back on again it boots up and

00:43:11,860 --> 00:43:16,870
it's running your code and this is a

00:43:13,570 --> 00:43:18,400
pretty painful iterative process which

00:43:16,870 --> 00:43:19,780
is why well there's lots of

00:43:18,400 --> 00:43:21,490
infrastructure on the ground to make

00:43:19,780 --> 00:43:24,070
sure it's as efficient as possible but

00:43:21,490 --> 00:43:26,560
it's still not great so the idea they

00:43:24,070 --> 00:43:28,000
had was well we want to have a scripting

00:43:26,560 --> 00:43:29,590
or a high-level scripting language

00:43:28,000 --> 00:43:32,230
running on the satellite that we can

00:43:29,590 --> 00:43:33,640
easily upload scripts to without turning

00:43:32,230 --> 00:43:36,340
a satellite offer without interrupting

00:43:33,640 --> 00:43:38,200
any of the other services so micro

00:43:36,340 --> 00:43:42,020
Python won't be controlling the Boosters

00:43:38,200 --> 00:43:46,680
for example that will be which

00:43:42,020 --> 00:43:49,260
maybe maybe in the I don't know that's

00:43:46,680 --> 00:43:53,910
that though that'll still be written in

00:43:49,260 --> 00:43:55,440
C or ADA but they're so micro pythons

00:43:53,910 --> 00:43:57,810
acting like the application level

00:43:55,440 --> 00:43:59,370
language so you know you got operating

00:43:57,810 --> 00:44:01,350
system you've got all the drivers and

00:43:59,370 --> 00:44:02,970
you've got the kernel and you've got the

00:44:01,350 --> 00:44:04,260
Wi-Fi stack and then on top of that

00:44:02,970 --> 00:44:06,750
you've got your Python code which does

00:44:04,260 --> 00:44:08,670
all of the you know the actual user

00:44:06,750 --> 00:44:09,870
phrase of facing stuff so the same idea

00:44:08,670 --> 00:44:11,820
with the satellite is you have a

00:44:09,870 --> 00:44:13,740
scripting language which does the

00:44:11,820 --> 00:44:15,330
top-level stuff that's not super

00:44:13,740 --> 00:44:17,040
critical because the boosters are still

00:44:15,330 --> 00:44:20,190
controlled in the sea and they've got

00:44:17,040 --> 00:44:21,780
lots of testing or lots of checks to

00:44:20,190 --> 00:44:23,340
make sure things that go wrong but you

00:44:21,780 --> 00:44:26,160
can easily change the script to say okay

00:44:23,340 --> 00:44:28,860
we've got you know a solar panels broken

00:44:26,160 --> 00:44:31,140
why okay let's upload a debugging script

00:44:28,860 --> 00:44:32,730
which can check all the currents and the

00:44:31,140 --> 00:44:34,410
heaters and everything and check what's

00:44:32,730 --> 00:44:35,700
wrong and then download all that data

00:44:34,410 --> 00:44:37,560
then once we've worked it out we can

00:44:35,700 --> 00:44:39,420
upload another script to fix it and then

00:44:37,560 --> 00:44:42,000
upload another script to run with the

00:44:39,420 --> 00:44:44,300
disabled solar panel for example so it's

00:44:42,000 --> 00:44:47,190
really easy to change things on the fly

00:44:44,300 --> 00:44:50,490
you won't have a ripple in space because

00:44:47,190 --> 00:44:52,530
of a few problems one the satellite

00:44:50,490 --> 00:44:54,300
moves and you know you lose

00:44:52,530 --> 00:44:56,490
communication with it and two because of

00:44:54,300 --> 00:44:58,770
the time delay I mean you know - the Sun

00:44:56,490 --> 00:45:00,540
is eight minutes - the moon is what

00:44:58,770 --> 00:45:02,520
thirty seconds or even thirty seconds

00:45:00,540 --> 00:45:04,440
maybe so you can't have a rebel really

00:45:02,520 --> 00:45:07,170
in space but you can the idea is to be

00:45:04,440 --> 00:45:09,930
able to compile scripts on earth verify

00:45:07,170 --> 00:45:11,370
they working and upload them so we did a

00:45:09,930 --> 00:45:13,560
ten month contract with the European

00:45:11,370 --> 00:45:15,330
Space Agency and there was a lot of red

00:45:13,560 --> 00:45:16,620
tape which is annoying but once you get

00:45:15,330 --> 00:45:18,630
through that there's a lot of really fun

00:45:16,620 --> 00:45:20,250
coding and there were lots of good

00:45:18,630 --> 00:45:21,900
things that came out of it like NAND

00:45:20,250 --> 00:45:23,910
boxing support and separation of

00:45:21,900 --> 00:45:25,800
compiler or interpreter and all these

00:45:23,910 --> 00:45:28,380
things went well most of them back into

00:45:25,800 --> 00:45:30,390
norm acro Python under the MIT license

00:45:28,380 --> 00:45:33,150
ISA the European Space Agency very very

00:45:30,390 --> 00:45:37,830
happy to do that because the way ether

00:45:33,150 --> 00:45:39,390
works is it's a it's an agency which

00:45:37,830 --> 00:45:41,810
gathers money from all the European

00:45:39,390 --> 00:45:44,100
countries and then gives it back to

00:45:41,810 --> 00:45:46,410
companies within the European Union to

00:45:44,100 --> 00:45:50,100
do work so ISA themselves don't actually

00:45:46,410 --> 00:45:52,590
do that much or STS tech so they just

00:45:50,100 --> 00:45:55,230
write contracts hand them out to those

00:45:52,590 --> 00:45:58,410
who bid you know bid for them and then

00:45:55,230 --> 00:46:00,990
check the results so they're really

00:45:58,410 --> 00:46:04,020
happy to have companies like ours join

00:46:00,990 --> 00:46:06,780
the join the team and and take a

00:46:04,020 --> 00:46:08,400
contract and do some work and build the

00:46:06,780 --> 00:46:09,930
economy that way and then give all our

00:46:08,400 --> 00:46:13,050
work back to free for free to the

00:46:09,930 --> 00:46:14,460
community so yeah Easter or not this you

00:46:13,050 --> 00:46:15,720
know close company that you might think

00:46:14,460 --> 00:46:17,580
and all the stuffs proprietary knowledge

00:46:15,720 --> 00:46:20,970
a lot of it is freely available if

00:46:17,580 --> 00:46:22,560
you're in the EU so this was an amazing

00:46:20,970 --> 00:46:24,660
opportunity and I think it for me it was

00:46:22,560 --> 00:46:27,690
probably the biggest thing that came out

00:46:24,660 --> 00:46:29,640
of this project so far is that I got to

00:46:27,690 --> 00:46:33,660
work I mean I always wanted to work for

00:46:29,640 --> 00:46:37,260
ISA or NASA say but having a company

00:46:33,660 --> 00:46:38,850
contracting is probably even better so

00:46:37,260 --> 00:46:40,619
it was really cool really cool you can

00:46:38,850 --> 00:46:43,590
ask me more about it and I'm happy to

00:46:40,619 --> 00:46:44,760
talk all about what we did and then

00:46:43,590 --> 00:46:48,300
actually we went and did another

00:46:44,760 --> 00:46:49,740
Kickstarter for this esp8266 Wi-Fi chip

00:46:48,300 --> 00:46:51,240
which I talked about yesterday

00:46:49,740 --> 00:46:53,010
so you know even after doing one

00:46:51,240 --> 00:46:55,140
Kickstarter I'll never do another one

00:46:53,010 --> 00:46:56,190
and then I did another one and then but

00:46:55,140 --> 00:46:57,600
we've got a great response it was

00:46:56,190 --> 00:46:59,430
software only we didn't give any

00:46:57,600 --> 00:47:02,040
Hardware away but we've still got you

00:46:59,430 --> 00:47:04,080
know almost 50,000 equivalent Australian

00:47:02,040 --> 00:47:05,100
dollars and the massive massive support

00:47:04,080 --> 00:47:09,600
people who just wanted to see the

00:47:05,100 --> 00:47:12,150
project succeed further it has been well

00:47:09,600 --> 00:47:13,650
a lot of challenges there's a list here

00:47:12,150 --> 00:47:15,720
but the one that I'll talk of just

00:47:13,650 --> 00:47:17,250
briefly about is I think the big the

00:47:15,720 --> 00:47:20,160
hardest thing is managing a community

00:47:17,250 --> 00:47:22,109
and expectations so you know it's free

00:47:20,160 --> 00:47:23,820
software but people still complain and

00:47:22,109 --> 00:47:24,990
ask question you know about fire bug

00:47:23,820 --> 00:47:28,410
reports and I like you know why it

00:47:24,990 --> 00:47:30,630
doesn't this work and I know I like to

00:47:28,410 --> 00:47:33,119
try and fix things but at some point you

00:47:30,630 --> 00:47:35,760
run out of time to fix everybody's

00:47:33,119 --> 00:47:38,280
problems but I mean managing a community

00:47:35,760 --> 00:47:40,020
is hard really hard and also it's hard

00:47:38,280 --> 00:47:41,790
to be a manager of a project and also do

00:47:40,020 --> 00:47:43,109
all technical coding as you know a lot

00:47:41,790 --> 00:47:45,510
of technical coding as well which I

00:47:43,109 --> 00:47:47,550
still like to do and monetizing a

00:47:45,510 --> 00:47:50,550
project with the company that we have

00:47:47,550 --> 00:47:54,270
selling hardware I think is something

00:47:50,550 --> 00:47:55,650
we're doing and it's and also contracts

00:47:54,270 --> 00:47:58,470
with the European Space Agency and some

00:47:55,650 --> 00:48:00,660
other people I don't think you can have

00:47:58,470 --> 00:48:02,369
an open-source software project without

00:48:00,660 --> 00:48:03,900
some kind of monetization and we're

00:48:02,369 --> 00:48:06,300
really lucky that we have some streams

00:48:03,900 --> 00:48:09,359
like hardware to do that

00:48:06,300 --> 00:48:13,199
so I think my time is pretty much up now

00:48:09,359 --> 00:48:15,459
this is my concluding slide which has

00:48:13,199 --> 00:48:18,369
just a list of things I talked about

00:48:15,459 --> 00:48:20,140
what so I mean my co patent has seen

00:48:18,369 --> 00:48:24,130
used in lots of places like for example

00:48:20,140 --> 00:48:25,449
in coffee machines in there's a you know

00:48:24,130 --> 00:48:27,039
there's a university course in France

00:48:25,449 --> 00:48:30,999
built around micro Python to teach

00:48:27,039 --> 00:48:32,799
embedded systems labs using it to

00:48:30,999 --> 00:48:35,739
automate you know heating and cooling of

00:48:32,799 --> 00:48:39,279
their their blood samples for example in

00:48:35,739 --> 00:48:40,900
some biotech labs and there are lots and

00:48:39,279 --> 00:48:42,279
lots of hackers around the world just

00:48:40,900 --> 00:48:44,469
using it and playing with it and

00:48:42,279 --> 00:48:45,699
contributing back so there are many

00:48:44,469 --> 00:48:47,049
applications and I think it's still

00:48:45,699 --> 00:48:50,319
growing and the Internet of Things is a

00:48:47,049 --> 00:48:52,779
massive area which is only just starting

00:48:50,319 --> 00:48:54,519
off and if Python can run the normal

00:48:52,779 --> 00:48:56,619
internet maybe markup I think and run

00:48:54,519 --> 00:48:59,650
the Internet of Things the micro

00:48:56,619 --> 00:49:04,479
Internet or at least be part of that in

00:48:59,650 --> 00:49:06,640
some way so you also saw it in space it

00:49:04,479 --> 00:49:08,199
may we we actually have a couple more

00:49:06,640 --> 00:49:09,609
contracts coming up with the european

00:49:08,199 --> 00:49:11,949
space agency so they really like the

00:49:09,609 --> 00:49:14,439
first bit of work really happy with it

00:49:11,949 --> 00:49:16,059
and think that you know it may be that

00:49:14,439 --> 00:49:16,959
it can actually go into space so the

00:49:16,059 --> 00:49:20,529
first project we did was a

00:49:16,959 --> 00:49:23,319
proof-of-concept and we'll be doing at

00:49:20,529 --> 00:49:24,849
least another one maybe two or three to

00:49:23,319 --> 00:49:26,559
further integrate it into their system

00:49:24,849 --> 00:49:31,109
so that it can maybe one day go into

00:49:26,559 --> 00:49:32,739
space as this application layer language

00:49:31,109 --> 00:49:34,179
there's other things there's

00:49:32,739 --> 00:49:36,279
multi-threading support that's recently

00:49:34,179 --> 00:49:39,549
gone in and not yet available on the pi

00:49:36,279 --> 00:49:42,729
board that should be soon hopefully the

00:49:39,549 --> 00:49:45,880
micro bit we can optimize that to get a

00:49:42,729 --> 00:49:47,859
bit more memory and yeah we're also

00:49:45,880 --> 00:49:50,369
looking to develop some more hardware

00:49:47,859 --> 00:49:53,619
we've got lots of lots of ideas but

00:49:50,369 --> 00:49:55,479
sadly not as much time as ideas anyway

00:49:53,619 --> 00:49:59,619
so trying to focus on things like

00:49:55,479 --> 00:50:01,119
housing for the board and extra when

00:49:59,619 --> 00:50:02,890
there's lots of new chips coming out in

00:50:01,119 --> 00:50:04,269
the market and getting them to run micro

00:50:02,890 --> 00:50:07,449
Python would be really cool so that's

00:50:04,269 --> 00:50:10,479
what we're looking at at the moment and

00:50:07,449 --> 00:50:12,390
so yeah I mean I work full time for my

00:50:10,479 --> 00:50:15,130
company doing micro path and stuff and

00:50:12,390 --> 00:50:18,699
it's a lot of fun I get I get a lot of

00:50:15,130 --> 00:50:20,310
freedom like I did in physics and here

00:50:18,699 --> 00:50:22,680
are some websites you can visit if you

00:50:20,310 --> 00:50:24,960
to learn some more the forum has a lot

00:50:22,680 --> 00:50:26,310
of discussion on github is all the code

00:50:24,960 --> 00:50:28,860
freely available if you want to look

00:50:26,310 --> 00:50:32,060
through it and this this is a picture of

00:50:28,860 --> 00:50:36,020
our board which for sale on our webshop

00:50:32,060 --> 00:50:36,020

YouTube URL: https://www.youtube.com/watch?v=Zm08hXeuv-I


