Title: SSL all the things
Publication date: 2016-08-16
Playlist: Pycon Australia 2016
Description: 
	Markus Holtermann
https://2016.pycon-au.org/schedule/50/view_talk
Over the last few years SSL/TLS encryption of websites has risen tremendously. The Letâ€™s Encrypt organization makes that pretty easy. And you can use it, too. For free! In this talk I'll show how to integrate SSL/TLS and point out some common pitfalls.
Captions: 
	00:00:00,000 --> 00:00:03,629
one talk standing between you and

00:00:01,319 --> 00:00:06,390
afternoon tea and that is from our next

00:00:03,629 --> 00:00:09,780
presenter who is a past euro Python

00:00:06,390 --> 00:00:12,960
organizer Django core developer working

00:00:09,780 --> 00:00:14,429
on the migrations the migrations part of

00:00:12,960 --> 00:00:16,680
Django and today he's going to be

00:00:14,429 --> 00:00:24,840
telling us how to SSL all of the things

00:00:16,680 --> 00:00:29,039
please welcome Marcus halterman thanks

00:00:24,840 --> 00:00:31,170
Chris thanks for the introduction I'm

00:00:29,039 --> 00:00:34,500
Marcus Wasserman i'm doing a core

00:00:31,170 --> 00:00:37,290
developer for almost two years now i

00:00:34,500 --> 00:00:39,899
started contributing in 2014 picked up

00:00:37,290 --> 00:00:42,870
every other migration bug that they're

00:00:39,899 --> 00:00:44,550
almost out there became a core developer

00:00:42,870 --> 00:00:48,390
in 2015 when the core team was too lazy

00:00:44,550 --> 00:00:52,379
to merge them themselves and well now i

00:00:48,390 --> 00:00:54,960
do that myself since april i work for a

00:00:52,379 --> 00:00:58,469
german company called later p we do

00:00:54,960 --> 00:01:01,020
micro payment or for online content

00:00:58,469 --> 00:01:03,030
providers and try to make the both of

00:01:01,020 --> 00:01:05,850
selling and the buying part more easy in

00:01:03,030 --> 00:01:08,850
more convenient for us as users in the

00:01:05,850 --> 00:01:10,770
way that you well get get access to the

00:01:08,850 --> 00:01:14,369
content before you necessarily actually

00:01:10,770 --> 00:01:16,909
give money and then have can experience

00:01:14,369 --> 00:01:21,360
the content before you actually pay

00:01:16,909 --> 00:01:24,530
which is pretty cool ssl all the things

00:01:21,360 --> 00:01:29,189
and this is the topic of the talk and

00:01:24,530 --> 00:01:30,750
being from germany we are pretty kind of

00:01:29,189 --> 00:01:33,119
scared about for all the things that

00:01:30,750 --> 00:01:36,329
happened to the nm weather with what

00:01:33,119 --> 00:01:41,100
Snowden revered Wendy what with what BS

00:01:36,329 --> 00:01:45,329
NSA is doing and we there's a constant

00:01:41,100 --> 00:01:48,450
urge for most acuity and this is mostly

00:01:45,329 --> 00:01:50,670
for John privacy laws or data data and

00:01:48,450 --> 00:01:54,119
privacy laws but also for generally

00:01:50,670 --> 00:01:55,920
European ones and this when you think

00:01:54,119 --> 00:01:59,820
about where you use the internet these

00:01:55,920 --> 00:02:01,920
days you go to a key for example and put

00:01:59,820 --> 00:02:06,180
out and take out your laptop and connect

00:02:01,920 --> 00:02:07,890
to Wi-Fi who tells you that this Wi-Fi

00:02:06,180 --> 00:02:09,690
provider is not doing evil things and

00:02:07,890 --> 00:02:10,979
wiretaps on your entire network

00:02:09,690 --> 00:02:12,370
communication so you want to have

00:02:10,979 --> 00:02:15,340
security there

00:02:12,370 --> 00:02:17,830
and also there are some interest in her

00:02:15,340 --> 00:02:19,959
service providers out there that if you

00:02:17,830 --> 00:02:24,040
have unencrypted connections to a server

00:02:19,959 --> 00:02:26,440
they inject a HTML in the websites with

00:02:24,040 --> 00:02:29,049
advertisements which is kind of nasty

00:02:26,440 --> 00:02:30,549
and not really what you want especially

00:02:29,049 --> 00:02:33,760
when the when the website is otherwise

00:02:30,549 --> 00:02:36,940
ad free and this is better user

00:02:33,760 --> 00:02:39,489
experience also bad for security and so

00:02:36,940 --> 00:02:42,269
this is something where security or SSL

00:02:39,489 --> 00:02:45,970
encryption or TLS encryption can help

00:02:42,269 --> 00:02:47,799
this being a security talk I need to

00:02:45,970 --> 00:02:49,720
give you a short disclaimer I'm not a

00:02:47,799 --> 00:02:52,030
cryptographer I don't know anything

00:02:49,720 --> 00:02:55,120
about the underlying mathematics of

00:02:52,030 --> 00:02:57,730
these things but that's okay all the

00:02:55,120 --> 00:02:59,379
Excel examples i give here are either to

00:02:57,730 --> 00:03:01,480
the best at least of my knowledge or if

00:02:59,379 --> 00:03:04,000
i was i'm sure i talked to pee too

00:03:01,480 --> 00:03:07,049
skilled people i trust about that idea

00:03:04,000 --> 00:03:09,940
or their thoughts on those topics and

00:03:07,049 --> 00:03:12,519
this still means there can be errors if

00:03:09,940 --> 00:03:13,959
you're keen on or if you know something

00:03:12,519 --> 00:03:15,730
about the topic and do spot errors

00:03:13,959 --> 00:03:19,239
please talk to me before i put up the

00:03:15,730 --> 00:03:24,130
slide serkan correctors and not proper

00:03:19,239 --> 00:03:26,829
published mistakes there this talk will

00:03:24,130 --> 00:03:29,319
also not cover everything about ssl/tls

00:03:26,829 --> 00:03:31,239
that would that's out there because

00:03:29,319 --> 00:03:35,230
that's too much and would probably not

00:03:31,239 --> 00:03:38,500
for an entire conference ssl two and

00:03:35,230 --> 00:03:42,639
three are broken do not use that TLS one

00:03:38,500 --> 00:03:44,829
dot 01 not one are well not necessarily

00:03:42,639 --> 00:03:49,150
outdated but are discouraged and

00:03:44,829 --> 00:03:51,340
superseded by 12 if you don't have to

00:03:49,150 --> 00:03:54,340
use them for four back reasons probably

00:03:51,340 --> 00:03:56,769
just go with TLS one or two and if

00:03:54,340 --> 00:03:58,810
that's not secure enough for you well

00:03:56,769 --> 00:04:01,900
you can go into the future with Google

00:03:58,810 --> 00:04:03,790
with a algorithm called new hope they

00:04:01,900 --> 00:04:07,180
come up with a couple of weeks ago I'm

00:04:03,790 --> 00:04:12,220
not sure what supports that yet but it's

00:04:07,180 --> 00:04:16,180
post quantum computer cryptography okay

00:04:12,220 --> 00:04:18,250
so much about that ssl/tls are two words

00:04:16,180 --> 00:04:20,019
or two abbreviations standing for secure

00:04:18,250 --> 00:04:23,440
socket layer and transport layer

00:04:20,019 --> 00:04:25,940
security and they are both crypto

00:04:23,440 --> 00:04:28,730
cryptographic protocols that are you

00:04:25,940 --> 00:04:32,810
for communication most notably networks

00:04:28,730 --> 00:04:35,930
and either one provides two out of three

00:04:32,810 --> 00:04:38,450
things of information security the first

00:04:35,930 --> 00:04:40,640
one being confidentiality which is

00:04:38,450 --> 00:04:44,290
achieved through encryption encryption

00:04:40,640 --> 00:04:48,020
of the data that means nobody who has

00:04:44,290 --> 00:04:50,570
access to the to the data is actually

00:04:48,020 --> 00:04:53,180
able to figure out what's what's being

00:04:50,570 --> 00:04:56,450
transmitted except for this pile of

00:04:53,180 --> 00:04:59,650
garbage then there's integrity in there

00:04:56,450 --> 00:05:03,020
which is which ensures that nobody can

00:04:59,650 --> 00:05:05,330
provide different data than what should

00:05:03,020 --> 00:05:08,360
be in there nobody can change data the

00:05:05,330 --> 00:05:11,630
data that was transmitted the third part

00:05:08,360 --> 00:05:14,090
of information security is available is

00:05:11,630 --> 00:05:16,130
availability which is unfortunately not

00:05:14,090 --> 00:05:17,900
part of the cryptographic protocols

00:05:16,130 --> 00:05:19,760
let's get you this you can achieve

00:05:17,900 --> 00:05:27,710
through load balancing your side for

00:05:19,760 --> 00:05:30,320
example I'm pretty sure all of you have

00:05:27,710 --> 00:05:33,280
at least come across let's encrypt even

00:05:30,320 --> 00:05:37,070
if it's only I've heard about it and

00:05:33,280 --> 00:05:41,810
what is it and how does it relate to

00:05:37,070 --> 00:05:43,250
this talk and the entire SSL thing that

00:05:41,810 --> 00:05:44,930
I mentioned before how you do you

00:05:43,250 --> 00:05:46,940
actually do that and how does it even

00:05:44,930 --> 00:05:49,400
work and this is what I want to explain

00:05:46,940 --> 00:05:50,990
to you in this talk and then how to use

00:05:49,400 --> 00:05:55,040
in how to hear and how to get

00:05:50,990 --> 00:05:57,710
certificates and all those things let's

00:05:55,040 --> 00:06:00,250
start with how SSL actually works not

00:05:57,710 --> 00:06:02,750
the cryptographic part but the on the a

00:06:00,250 --> 00:06:05,680
bit higher level from a user's

00:06:02,750 --> 00:06:08,390
perspective let's take a browser

00:06:05,680 --> 00:06:12,910
browsers have these things called trust

00:06:08,390 --> 00:06:15,730
stores this is the collection of

00:06:12,910 --> 00:06:20,590
certificates that the browser vendors

00:06:15,730 --> 00:06:23,780
think our secure or are from so-called

00:06:20,590 --> 00:06:25,640
certificate authorities and assemble

00:06:23,780 --> 00:06:29,360
them and deliver them with your browser

00:06:25,640 --> 00:06:31,610
and these certificates or root

00:06:29,360 --> 00:06:34,280
certificate authorities they have

00:06:31,610 --> 00:06:36,740
intermediate certificates that they

00:06:34,280 --> 00:06:38,990
signed and by signing that means that

00:06:36,740 --> 00:06:39,950
when your browser trusts the root

00:06:38,990 --> 00:06:41,360
certificates

00:06:39,950 --> 00:06:43,700
everything that is signed by a root

00:06:41,360 --> 00:06:47,480
certificate your browser's trust as well

00:06:43,700 --> 00:06:49,760
and in return when something is signed

00:06:47,480 --> 00:06:51,500
by an intermediate certificate because

00:06:49,760 --> 00:06:54,710
your browser trusts the intermediate

00:06:51,500 --> 00:06:56,750
certificate it rusts the signed

00:06:54,710 --> 00:07:00,640
certificates or leaf certificates are

00:06:56,750 --> 00:07:02,390
these down at the bottom are called now

00:07:00,640 --> 00:07:04,220
certificate authorities don't

00:07:02,390 --> 00:07:06,440
necessarily need to sign only down

00:07:04,220 --> 00:07:09,080
intermediate certificates they can also

00:07:06,440 --> 00:07:13,970
sign others which you can see between on

00:07:09,080 --> 00:07:16,130
the right side here now root CA 3 is not

00:07:13,970 --> 00:07:19,790
part of the trust store as you can see

00:07:16,130 --> 00:07:22,880
in the picture but because the root

00:07:19,790 --> 00:07:24,410
certificate two of the root CA to that

00:07:22,880 --> 00:07:26,650
you can see here is part of the trust

00:07:24,410 --> 00:07:31,010
store the intermediate certificate 3 is

00:07:26,650 --> 00:07:33,430
trusted and if root CA 3 has access to

00:07:31,010 --> 00:07:37,430
that intermediate certificate and can

00:07:33,430 --> 00:07:40,040
well has the appropriate permissions to

00:07:37,430 --> 00:07:43,160
do things with that certificate it can

00:07:40,040 --> 00:07:47,270
actually provide valid certificates for

00:07:43,160 --> 00:07:49,010
you as a user for example and this is

00:07:47,270 --> 00:07:52,670
essentially well let's encrypt comes

00:07:49,010 --> 00:07:54,980
into play let's encrypt is rooted

00:07:52,670 --> 00:07:57,080
certificate authority which is currently

00:07:54,980 --> 00:08:00,040
not in it in trust stores of modern

00:07:57,080 --> 00:08:02,780
browsers firefox 50 is going to include

00:08:00,040 --> 00:08:07,760
let's encrypt but that's a couple of

00:08:02,780 --> 00:08:09,200
weeks from now let's encrypt controls

00:08:07,760 --> 00:08:11,870
there are intermediate certificates

00:08:09,200 --> 00:08:15,170
meaning they can do can sign other

00:08:11,870 --> 00:08:18,320
certificates with that one and because

00:08:15,170 --> 00:08:21,740
there's another in root CA that trusts

00:08:18,320 --> 00:08:23,300
that intermediate certificate that

00:08:21,740 --> 00:08:25,190
include can provide you with

00:08:23,300 --> 00:08:27,950
certificates that are trusted by your

00:08:25,190 --> 00:08:30,470
browsers and this is why let's encrypt

00:08:27,950 --> 00:08:34,760
is being used more than 5 million more

00:08:30,470 --> 00:08:39,890
than 5 million websites let's encrypt

00:08:34,760 --> 00:08:43,220
also provides a fairly easy API REST API

00:08:39,890 --> 00:08:45,920
that you can use to then automated

00:08:43,220 --> 00:08:49,060
process to receive a certificate for

00:08:45,920 --> 00:08:53,300
domain that is under your control and

00:08:49,060 --> 00:08:55,610
that process is called a CM e

00:08:53,300 --> 00:08:58,180
that stands that means automatic

00:08:55,610 --> 00:09:01,339
certificate management environment and

00:08:58,180 --> 00:09:04,420
it's a fairly simple JSON API with some

00:09:01,339 --> 00:09:08,029
crypto magic and that's not necessarily

00:09:04,420 --> 00:09:10,700
well it's not really complicated just

00:09:08,029 --> 00:09:14,470
has four steps to from the first time

00:09:10,700 --> 00:09:18,380
you use it to hear the valid certificate

00:09:14,470 --> 00:09:21,170
in order to use that you need to have an

00:09:18,380 --> 00:09:23,350
account key for let's encrypt you need

00:09:21,170 --> 00:09:27,200
to have a certificate key which is

00:09:23,350 --> 00:09:29,630
something that the secret part for for

00:09:27,200 --> 00:09:33,529
your s4 the SSL connections to your

00:09:29,630 --> 00:09:36,769
servers on your side and a certificate

00:09:33,529 --> 00:09:39,500
signing request which is the intent that

00:09:36,769 --> 00:09:43,600
you send let's encrypt to can I please

00:09:39,500 --> 00:09:45,829
have a certificate for these domains now

00:09:43,600 --> 00:09:48,920
when you look through at the process

00:09:45,829 --> 00:09:52,279
it's a fair bit of diagram here but you

00:09:48,920 --> 00:09:54,019
can see the four parts in here the first

00:09:52,279 --> 00:09:59,000
thing is that you authenticate or

00:09:54,019 --> 00:10:03,140
register your account with your with

00:09:59,000 --> 00:10:05,660
your account key having done that you

00:10:03,140 --> 00:10:08,270
send the signing request over to let's

00:10:05,660 --> 00:10:10,550
encrypt they take that apart look at the

00:10:08,270 --> 00:10:13,399
domains they want or you want to get

00:10:10,550 --> 00:10:15,140
certificates for and they provide you

00:10:13,399 --> 00:10:17,779
with a bunch of challenges or with a

00:10:15,140 --> 00:10:21,560
bunch of files you supposed to write in

00:10:17,779 --> 00:10:24,860
a particular domain on your webs on your

00:10:21,560 --> 00:10:26,720
server when you have done that you tell

00:10:24,860 --> 00:10:28,880
them okay I wrote a little challenges

00:10:26,720 --> 00:10:32,450
down and they are going to request all

00:10:28,880 --> 00:10:35,240
the challenges these are a bunch of HTTP

00:10:32,450 --> 00:10:37,579
requests coming in they check for the

00:10:35,240 --> 00:10:39,529
content of these files matching what is

00:10:37,579 --> 00:10:43,510
supposed to be there and if everything

00:10:39,529 --> 00:10:45,399
is fine you can request the certificate

00:10:43,510 --> 00:10:49,990
now that you have the certificate

00:10:45,399 --> 00:10:52,250
certificate how do you or now that we

00:10:49,990 --> 00:10:54,910
understand the process here how do you

00:10:52,250 --> 00:10:57,589
actually get those certificates and

00:10:54,910 --> 00:10:59,870
there's an authorship let's encrypt

00:10:57,589 --> 00:11:01,699
climb out there that does all the magic

00:10:59,870 --> 00:11:04,100
literally it rewrites your apache config

00:11:01,699 --> 00:11:06,410
if you wanted to as far as I understand

00:11:04,100 --> 00:11:07,130
they even write wrote are working on

00:11:06,410 --> 00:11:10,730
them

00:11:07,130 --> 00:11:13,520
engine integration if that's the right

00:11:10,730 --> 00:11:16,100
way forward I'm personally not I

00:11:13,520 --> 00:11:18,430
personally don't think so i gave a talk

00:11:16,100 --> 00:11:20,510
at last bike on australia about

00:11:18,430 --> 00:11:22,880
configuration management if you want to

00:11:20,510 --> 00:11:25,820
go and look bad for more details but i

00:11:22,880 --> 00:11:28,040
don't think it's the right choice the

00:11:25,820 --> 00:11:31,550
script out there called this descriptive

00:11:28,040 --> 00:11:34,610
they are called a cme tiny has about 200

00:11:31,550 --> 00:11:37,100
lines if you want to look into the how

00:11:34,610 --> 00:11:39,350
the process this api actually work read

00:11:37,100 --> 00:11:41,240
that it's i encourage you to actually

00:11:39,350 --> 00:11:43,940
read that because it's really well

00:11:41,240 --> 00:11:47,150
written there's a bunch of other tools

00:11:43,940 --> 00:11:49,730
for example let's encrypt AWS by alex

00:11:47,150 --> 00:11:53,300
gainer which as the name internet

00:11:49,730 --> 00:11:55,820
suggest is for AWS integration and

00:11:53,300 --> 00:12:00,410
there's a tool called a proxy by amber

00:11:55,820 --> 00:12:02,750
brown which sets up a proxy with let's

00:12:00,410 --> 00:12:05,300
encrypt integration and you write a

00:12:02,750 --> 00:12:10,160
couple of conflict lines and it does all

00:12:05,300 --> 00:12:12,680
the magic for you in order to get these

00:12:10,160 --> 00:12:14,870
challenges working you need a bit of a

00:12:12,680 --> 00:12:17,450
web server configuration this is what

00:12:14,870 --> 00:12:22,070
you work on what it looks like for

00:12:17,450 --> 00:12:25,040
engine X this is the part of the

00:12:22,070 --> 00:12:27,440
location where at where let's encrypt is

00:12:25,040 --> 00:12:35,270
looking for and then some random file

00:12:27,440 --> 00:12:38,330
underneath this is the let's encrypt or

00:12:35,270 --> 00:12:40,760
a cme tiny script that we use eps django

00:12:38,330 --> 00:12:44,090
project calm and i use for my own sites

00:12:40,760 --> 00:12:46,580
it's a slight variation of the SME tiny

00:12:44,090 --> 00:12:49,460
script as in i edit a bits of support

00:12:46,580 --> 00:12:52,490
for systemd and a couple of other tiny

00:12:49,460 --> 00:12:54,920
things you provide your account key the

00:12:52,490 --> 00:12:56,750
signing rick fehst you tell it where to

00:12:54,920 --> 00:12:59,300
put the challenges and where to put the

00:12:56,750 --> 00:13:03,200
certificate and yeah you're pretty much

00:12:59,300 --> 00:13:07,010
done now that we have these certificates

00:13:03,200 --> 00:13:10,640
how do we actually use it and being at

00:13:07,010 --> 00:13:14,350
PyCon let's talk about doing that in

00:13:10,640 --> 00:13:19,190
python let's start with a client side

00:13:14,350 --> 00:13:21,230
that's it to write an ssl client in

00:13:19,190 --> 00:13:26,180
patent that connects to an ass

00:13:21,230 --> 00:13:28,700
l server write something and receive

00:13:26,180 --> 00:13:30,860
something it does validation on the host

00:13:28,700 --> 00:13:34,130
name it does the all the things you

00:13:30,860 --> 00:13:38,270
should do by just letting Python deal

00:13:34,130 --> 00:13:40,970
with that you create a circle you create

00:13:38,270 --> 00:13:44,540
a socket you created an SSL default

00:13:40,970 --> 00:13:47,420
context and with the SL purpose server

00:13:44,540 --> 00:13:52,370
off you tell Python this is a client

00:13:47,420 --> 00:13:54,530
authentication against the server you

00:13:52,370 --> 00:13:58,730
can drop till as version 1 and version

00:13:54,530 --> 00:14:02,510
11 if you want to kill as ssl two and

00:13:58,730 --> 00:14:04,790
three are already either unsupported by

00:14:02,510 --> 00:14:08,030
depending on which openssl version you

00:14:04,790 --> 00:14:09,980
use or not included by default and then

00:14:08,030 --> 00:14:14,000
you wrap the socket with this as an

00:14:09,980 --> 00:14:15,770
context connect to the host and then do

00:14:14,000 --> 00:14:21,980
network communication as you would do it

00:14:15,770 --> 00:14:24,140
in Python the server side does not

00:14:21,980 --> 00:14:28,670
necessarily look much more complicated

00:14:24,140 --> 00:14:30,830
to be honest let's look at this fair

00:14:28,670 --> 00:14:33,380
enough there's a bit more code here but

00:14:30,830 --> 00:14:35,750
most of that is something you would

00:14:33,380 --> 00:14:37,970
otherwise define in your engine ixora

00:14:35,750 --> 00:14:41,570
pesci web server when you set up SS are

00:14:37,970 --> 00:14:44,750
there the important part here is again

00:14:41,570 --> 00:14:48,350
the the purpose so the server

00:14:44,750 --> 00:14:51,170
authenticates against the client and you

00:14:48,350 --> 00:14:52,910
need to load a certificate there's a bit

00:14:51,170 --> 00:14:58,040
of a separate syntax you can use as well

00:14:52,910 --> 00:15:00,710
you can either use I put the the ssl key

00:14:58,040 --> 00:15:03,410
or the TLS key in the in one file with

00:15:00,710 --> 00:15:06,260
together with a certificate and the

00:15:03,410 --> 00:15:08,750
intermediate certificate or you can have

00:15:06,260 --> 00:15:12,920
the key in a one file and certificates

00:15:08,750 --> 00:15:16,660
in another one then you potentially will

00:15:12,920 --> 00:15:19,070
disable TLS sort some pls versions and

00:15:16,660 --> 00:15:21,740
what you want to make sure is that you

00:15:19,070 --> 00:15:25,910
set a appropriate term cipher string

00:15:21,740 --> 00:15:28,160
that's a open SSL cipher string I'm not

00:15:25,910 --> 00:15:31,340
going to go into the details of how that

00:15:28,160 --> 00:15:32,570
is composed and how to figure out what

00:15:31,340 --> 00:15:34,850
you put in there there's a website

00:15:32,570 --> 00:15:37,310
called cipher list

00:15:34,850 --> 00:15:38,959
this is a stringed iCarly recommend this

00:15:37,310 --> 00:15:41,180
is one of the things I have no idea how

00:15:38,959 --> 00:15:44,120
to do that let's look it up by where

00:15:41,180 --> 00:15:47,750
people that now how to do it tell you

00:15:44,120 --> 00:15:50,089
how to do that again you have the

00:15:47,750 --> 00:15:54,199
context you have your SSL you have your

00:15:50,089 --> 00:15:57,250
socket let's wrap the socket with the

00:15:54,199 --> 00:16:06,920
account context and do communication and

00:15:57,250 --> 00:16:10,130
that's all now what I didn't cover but

00:16:06,920 --> 00:16:12,740
at least want to mention depending of

00:16:10,130 --> 00:16:15,589
the context where you use SSL that might

00:16:12,740 --> 00:16:18,290
be from Python itself that might be in

00:16:15,589 --> 00:16:22,550
your web server that might be in other

00:16:18,290 --> 00:16:27,019
projects you should have a way in the

00:16:22,550 --> 00:16:28,579
process for certificate revocation so

00:16:27,019 --> 00:16:32,480
the tificate lubrication you do then

00:16:28,579 --> 00:16:36,800
when you potentially compromised the so

00:16:32,480 --> 00:16:40,689
the key the regarding other belonging as

00:16:36,800 --> 00:16:43,430
a turkey because other what in that case

00:16:40,689 --> 00:16:45,860
this certificate could otherwise be used

00:16:43,430 --> 00:16:49,819
by the owner of the key and you don't

00:16:45,860 --> 00:16:52,250
want that to happen you also might want

00:16:49,819 --> 00:16:53,990
to have when you use and let's encrypt

00:16:52,250 --> 00:16:56,810
you might want to have an idea of what

00:16:53,990 --> 00:16:59,240
you do when you have a compromised

00:16:56,810 --> 00:17:04,010
account key let's encrypt as an API to

00:16:59,240 --> 00:17:07,900
do either process as well and these are

00:17:04,010 --> 00:17:14,240
again only one or two HTTP requests

00:17:07,900 --> 00:17:16,669
against their API in the context of HTTP

00:17:14,240 --> 00:17:20,360
there are two things out called at SDS

00:17:16,669 --> 00:17:22,610
and HP KP which which stand for HTTP

00:17:20,360 --> 00:17:26,689
strict Transport Security and HTTP

00:17:22,610 --> 00:17:30,770
public key pinning the letter probably

00:17:26,689 --> 00:17:34,100
being not that publicly known is also

00:17:30,770 --> 00:17:36,909
not necessarily the thing you need to

00:17:34,100 --> 00:17:40,429
worry about it's probably more it's more

00:17:36,909 --> 00:17:43,000
thing more for like huge enterprises

00:17:40,429 --> 00:17:47,299
that are constants in a constant attack

00:17:43,000 --> 00:17:48,790
HST s is something you might want to

00:17:47,299 --> 00:17:53,210
consider for your own domains

00:17:48,790 --> 00:17:57,140
it essentially tells browsers to once

00:17:53,210 --> 00:18:00,920
they have this hsd s signature received

00:17:57,140 --> 00:18:05,559
ones to never ever try to access that

00:18:00,920 --> 00:18:09,830
site via HTTP again ever for the next

00:18:05,559 --> 00:18:12,320
the standard says I think one year that

00:18:09,830 --> 00:18:16,190
means if once you've written visited

00:18:12,320 --> 00:18:19,640
this site via HTTPS nobody can force you

00:18:16,190 --> 00:18:23,170
to visit with visited via HTTP which

00:18:19,640 --> 00:18:26,150
means websites like Facebook for example

00:18:23,170 --> 00:18:27,890
nobody can downgrade you too insecure

00:18:26,150 --> 00:18:30,800
connection because your browser is never

00:18:27,890 --> 00:18:38,120
ever going to try to access an unsecure

00:18:30,800 --> 00:18:40,700
version of this website but both of them

00:18:38,120 --> 00:18:43,640
have a problem as you can probably

00:18:40,700 --> 00:18:45,260
derive from when you don't when your

00:18:43,640 --> 00:18:47,420
browser is not trying to access this

00:18:45,260 --> 00:18:49,580
site on an insecure version ever again

00:18:47,420 --> 00:18:53,000
what happens if you want to turn off as

00:18:49,580 --> 00:18:56,780
a cell well you can't really the only

00:18:53,000 --> 00:18:59,690
thing you can do is to disable HTS for

00:18:56,780 --> 00:19:03,380
the time of the length of these as h st

00:18:59,690 --> 00:19:06,679
s sessions and then go to when old when

00:19:03,380 --> 00:19:09,500
this is when this time is over turn off

00:19:06,679 --> 00:19:12,230
ssl because at that point nobody no

00:19:09,500 --> 00:19:14,870
browser actually has this indicator

00:19:12,230 --> 00:19:19,940
anymore if you want to drop if you set

00:19:14,870 --> 00:19:22,070
hsd as now on your web shop and your

00:19:19,940 --> 00:19:24,500
browser's iou users are using that or

00:19:22,070 --> 00:19:26,660
accepting that and you turn it off

00:19:24,500 --> 00:19:28,520
tomorrow all those people accessing that

00:19:26,660 --> 00:19:31,670
in the meantime won't be able to access

00:19:28,520 --> 00:19:35,240
your website anymore just be sure about

00:19:31,670 --> 00:19:37,370
what you do there as mentioned or as

00:19:35,240 --> 00:19:39,650
shown in the process of here's how you

00:19:37,370 --> 00:19:42,650
use that in Python you can of course use

00:19:39,650 --> 00:19:44,780
the certificates from let's encrypt for

00:19:42,650 --> 00:19:48,770
other services they don't need to be

00:19:44,780 --> 00:19:54,740
used on HTTP as long as you have a way

00:19:48,770 --> 00:19:58,070
to get that certificate things that

00:19:54,740 --> 00:20:02,060
could go wrong and it's being cooped

00:19:58,070 --> 00:20:04,760
ography there's a lot of that hsd s HP

00:20:02,060 --> 00:20:07,550
p as mentioned if you do it wrong or if

00:20:04,760 --> 00:20:11,060
you disable it too early then you lose

00:20:07,550 --> 00:20:14,570
customers you potentially be able to

00:20:11,060 --> 00:20:16,490
leak keys there was a talk right before

00:20:14,570 --> 00:20:19,760
buying our country with that you might

00:20:16,490 --> 00:20:24,070
want to look at a watch on youtube when

00:20:19,760 --> 00:20:24,070
it comes out and how to distribute keys

00:20:24,940 --> 00:20:32,450
people claim that the resource usage for

00:20:28,390 --> 00:20:36,970
HTTPS or SSL and generally increases yes

00:20:32,450 --> 00:20:40,100
of course it does but the majority of

00:20:36,970 --> 00:20:42,470
servers won't probably have any of it

00:20:40,100 --> 00:20:45,020
probably won't implicate any of your

00:20:42,470 --> 00:20:48,560
daily business because at least if you

00:20:45,020 --> 00:20:51,650
run mostly modern service they have some

00:20:48,560 --> 00:20:55,340
cpu internal or hardware cryptography

00:20:51,650 --> 00:21:00,350
implemented in some way that helps speed

00:20:55,340 --> 00:21:02,510
things up this is a list of a couple of

00:21:00,350 --> 00:21:06,140
sources that I recommend to look empty

00:21:02,510 --> 00:21:09,890
the first one is this cipher list m SS

00:21:06,140 --> 00:21:13,760
elapsed is probably the standard testing

00:21:09,890 --> 00:21:17,060
tool for ssl if you want to see what you

00:21:13,760 --> 00:21:22,550
did wrong or how you compete against

00:21:17,060 --> 00:21:25,340
others hennecke has generally a couple

00:21:22,550 --> 00:21:29,630
of good talks on security as well and

00:21:25,340 --> 00:21:35,600
others this is the AC where I SME tiny

00:21:29,630 --> 00:21:41,770
jewel now this D s a cme standard the

00:21:35,600 --> 00:21:51,890
post quantum algorithm and a link to the

00:21:41,770 --> 00:21:54,410
snippets I showed earlier thank you ok

00:21:51,890 --> 00:21:56,630
by now I hope you know the deal if you

00:21:54,410 --> 00:21:59,180
have a question put your hand up and

00:21:56,630 --> 00:22:00,530
I'll run a microphone to you don't start

00:21:59,180 --> 00:22:06,670
talking till till you have the

00:22:00,530 --> 00:22:08,930
microphone are there any questions yes

00:22:06,670 --> 00:22:10,720
hey Marcus thank you very much for your

00:22:08,930 --> 00:22:12,940
talk

00:22:10,720 --> 00:22:15,520
I just wanted to ask about so generally

00:22:12,940 --> 00:22:18,130
now I think most people consider it best

00:22:15,520 --> 00:22:21,010
practice to sort of redirect everyone to

00:22:18,130 --> 00:22:23,500
ask this out firstly whether or not you

00:22:21,010 --> 00:22:25,059
support that but then secondly what sort

00:22:23,500 --> 00:22:26,860
of strategies you've used to handle

00:22:25,059 --> 00:22:32,169
older browsers that don't support the

00:22:26,860 --> 00:22:34,360
newest cipher suites or TLS 1.2 figure

00:22:32,169 --> 00:22:38,020
out the minimum browser support you have

00:22:34,360 --> 00:22:40,330
use SSL labs to figure out what you need

00:22:38,020 --> 00:22:42,460
to support so go with this cipher suit

00:22:40,330 --> 00:22:45,659
and then figure out what you're missing

00:22:42,460 --> 00:22:47,850
and appended to the end in a way that is

00:22:45,659 --> 00:22:50,260
slightly optimized and see that you

00:22:47,850 --> 00:22:55,500
support the balance you need but only

00:22:50,260 --> 00:22:55,500
those you need any other questions

00:22:55,679 --> 00:23:08,080
excellent great talk further to that one

00:23:05,220 --> 00:23:09,640
the way I think the way it fails now if

00:23:08,080 --> 00:23:12,220
you if you say I'm not going to support

00:23:09,640 --> 00:23:14,110
all the browsers they just get a wide

00:23:12,220 --> 00:23:18,309
screen they get nothing like they don't

00:23:14,110 --> 00:23:20,110
is there a way to gracefully say I'm not

00:23:18,309 --> 00:23:25,270
going to support you but you need to do

00:23:20,110 --> 00:23:27,760
you need to upgrade your browser i'm not

00:23:25,270 --> 00:23:30,400
sure i'm not i think it also depends on

00:23:27,760 --> 00:23:33,010
the browser's how they how they handle

00:23:30,400 --> 00:23:36,669
cook cryptographic connections that they

00:23:33,010 --> 00:23:39,280
are not able to deal with generally what

00:23:36,669 --> 00:23:41,740
you wanted to define is it in web

00:23:39,280 --> 00:23:44,610
service is the preferred server ciphers

00:23:41,740 --> 00:23:47,650
which means that a browser cannot go

00:23:44,610 --> 00:23:53,500
cannot send a weaker cryptographic

00:23:47,650 --> 00:23:56,200
algorithm if you i'm not sure if there's

00:23:53,500 --> 00:23:58,419
a way to actually tell tell browsers or

00:23:56,200 --> 00:24:01,120
tell your web server if this is brousard

00:23:58,419 --> 00:24:04,450
handling not not handling these ciphers

00:24:01,120 --> 00:24:06,669
then redirect them there if there's the

00:24:04,450 --> 00:24:10,059
way for that please tell me I can so I

00:24:06,669 --> 00:24:12,659
can read it out again we have a question

00:24:10,059 --> 00:24:16,330
down here we'll just pass the microphone

00:24:12,659 --> 00:24:19,720
thank you for the talk certificate

00:24:16,330 --> 00:24:22,390
pinning and client libraries are you

00:24:19,720 --> 00:24:23,559
aware of how we can do this so that we

00:24:22,390 --> 00:24:26,499
can make our apps

00:24:23,559 --> 00:24:31,649
nating to where web servers more secure

00:24:26,499 --> 00:24:36,249
I haven't looked into that to be honest

00:24:31,649 --> 00:24:37,990
desh well certificate pinning is a bit

00:24:36,249 --> 00:24:40,179
of a problem with let's encrypt if you

00:24:37,990 --> 00:24:41,679
look into the if you want to pin on the

00:24:40,179 --> 00:24:43,360
serial number of the certificate because

00:24:41,679 --> 00:24:45,759
let's encrypt certificates are only

00:24:43,360 --> 00:24:48,249
valid for 90 days which is fine because

00:24:45,759 --> 00:24:51,909
the the automated process normally runs

00:24:48,249 --> 00:24:55,749
every 30 days 60 days and then renews

00:24:51,909 --> 00:24:58,990
the or gets your new certificate if you

00:24:55,749 --> 00:25:01,509
manage to ship out versions updates in

00:24:58,990 --> 00:25:04,679
the meantime on it to your app and all

00:25:01,509 --> 00:25:07,059
kind of force shaping of those updates

00:25:04,679 --> 00:25:09,190
you could do that but otherwise

00:25:07,059 --> 00:25:14,440
certificate pinning with let's encrypt

00:25:09,190 --> 00:25:18,669
is not really suitable right now no

00:25:14,440 --> 00:25:22,570
further questions yeah take my time you

00:25:18,669 --> 00:25:25,450
get to the front of the room here I have

00:25:22,570 --> 00:25:27,909
here one of our fantastic sailing tram

00:25:25,450 --> 00:25:29,830
coffee cups for you as a token of our

00:25:27,909 --> 00:25:33,330
thanks for giving this talk thank you

00:25:29,830 --> 00:25:33,330

YouTube URL: https://www.youtube.com/watch?v=iVy-fHUzJFc


