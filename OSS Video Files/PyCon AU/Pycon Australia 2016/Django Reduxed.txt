Title: Django Reduxed
Publication date: 2016-08-16
Playlist: Pycon Australia 2016
Description: 
	Saket  Bhushan
https://2016.pycon-au.org/schedule/56/view_talk
The talk will be an introduction to all the moving parts involved in building 
a client side isomorphic single page application with a REST backend. We 
will take a dive into How and where does React-Redux fit into the bigger picture 
of REST APIs and Client Side MVC, and how to seamlessly introduce the goodness 
it brings to your django project. We will also see some non obvious things that you had 
to deal while using redux.

Having a service oriented architecture in web projects require interfacing the
backend using a REST-ful interface. Building your website as a single page app
allows you to focus on building the API up front, rather than duplicating your
efforts to build a website and then replicating the functionality with an API.
With a single page app, your website can be constructed in much the same way as
a mobile app. Django and the Django REST Framework enabled my team to quickly
deliverable a highly functional REST API that was customised to our unique needs.

React is a great tool to keep UI organised, but won't keep
track of the data and state of application. Redux comes to rescue over here -
it defines a minimal but sufficiently powerful way of interacting with that state.
An action from the UI is combined with a simple JS object(state).
Redux helps developers manage the state and flow of data around an application.


One of the strengths of redux is that everything is very explicit.
It ease out the process of managing the state and flow of data
around an application. Imagine tons of asynchronous actions without introducing
annoying UI bugs.
Captions: 
	00:00:00,000 --> 00:00:04,200
I last last scheduled talk for this

00:00:02,370 --> 00:00:06,240
afternoon before the lightning talks is

00:00:04,200 --> 00:00:10,610
suck it we will be talking to us about

00:00:06,240 --> 00:00:10,610
django redux thank every circuit yep

00:00:13,580 --> 00:00:18,840
good evening everyone my name is socket

00:00:16,230 --> 00:00:21,390
and I'm primarily going to talk about my

00:00:18,840 --> 00:00:24,000
experiences of building a dynamic

00:00:21,390 --> 00:00:26,789
dashboard based on django as of a back

00:00:24,000 --> 00:00:30,480
end and redox react reacts as the front

00:00:26,789 --> 00:00:33,930
end I've been doing Django since 0.99

00:00:30,480 --> 00:00:36,000
and have been mostly loyal to it I have

00:00:33,930 --> 00:00:40,170
been hearing a lot about redox react and

00:00:36,000 --> 00:00:41,730
stuff and it piqued my interest when I

00:00:40,170 --> 00:00:43,410
kind of figured out how philosophically

00:00:41,730 --> 00:00:47,610
it is pretty close to functional

00:00:43,410 --> 00:00:49,079
programming in redux and we when we

00:00:47,610 --> 00:00:50,730
initially started there was lot of

00:00:49,079 --> 00:00:52,649
things which we had to figure out and

00:00:50,730 --> 00:00:55,170
this talk is mostly going to be about

00:00:52,649 --> 00:00:56,399
sharing my experiences so that that kind

00:00:55,170 --> 00:01:00,390
of reduces the learning curve for you

00:00:56,399 --> 00:01:02,910
guys this talk by no means is going to

00:01:00,390 --> 00:01:04,559
be a react or a redux tutorial and also

00:01:02,910 --> 00:01:07,350
we are not doing in comparisons how

00:01:04,559 --> 00:01:09,479
react come relax compares to flux or

00:01:07,350 --> 00:01:12,360
something like that I would assume

00:01:09,479 --> 00:01:14,549
everybody over here knows is aware with

00:01:12,360 --> 00:01:16,439
MVC frameworks and rest architecture

00:01:14,549 --> 00:01:20,369
jquery and ajax are like everything i

00:01:16,439 --> 00:01:22,439
mean ii i assume you know this so when

00:01:20,369 --> 00:01:25,409
we side off with like every week you

00:01:22,439 --> 00:01:28,140
have a new web frame javascript

00:01:25,409 --> 00:01:29,670
framework coming it coming up and if you

00:01:28,140 --> 00:01:33,150
go on to do and we see there are like 35

00:01:29,670 --> 00:01:36,270
odd javascript frameworks and it made us

00:01:33,150 --> 00:01:37,759
first to you know decide difficult for

00:01:36,270 --> 00:01:40,650
us to decide which one to go with

00:01:37,759 --> 00:01:42,450
angular and react were like mostly the

00:01:40,650 --> 00:01:46,909
most popular ones so we chose react and

00:01:42,450 --> 00:01:49,890
went ahead typically when you want to

00:01:46,909 --> 00:01:52,170
write code you would want to abstract

00:01:49,890 --> 00:01:54,750
things and see if the same thing can be

00:01:52,170 --> 00:01:57,090
reused at multiple places similarly for

00:01:54,750 --> 00:02:01,860
our data store we chose to have one rest

00:01:57,090 --> 00:02:03,869
back end and the iOS the Android or the

00:02:01,860 --> 00:02:07,920
web and the desktop refers to the same

00:02:03,869 --> 00:02:10,110
API as a writer store so that it

00:02:07,920 --> 00:02:13,540
simplifies us you know having not to

00:02:10,110 --> 00:02:14,890
build of the back end plus front end

00:02:13,540 --> 00:02:16,659
coupled together and then doing the same

00:02:14,890 --> 00:02:20,560
rest api somewhere other for the iOS and

00:02:16,659 --> 00:02:23,439
Android the good features about reactors

00:02:20,560 --> 00:02:26,260
it's declarative it has got XML sort of

00:02:23,439 --> 00:02:28,299
syntax jsx when you can write your

00:02:26,260 --> 00:02:30,670
components and arrange them it's

00:02:28,299 --> 00:02:32,049
basically the entire UI the pages can be

00:02:30,670 --> 00:02:33,819
divided into different components and

00:02:32,049 --> 00:02:37,030
you can have each of your components

00:02:33,819 --> 00:02:39,010
modularly organized and with things like

00:02:37,030 --> 00:02:41,409
react native you can write your react

00:02:39,010 --> 00:02:44,769
code you can extend your pre-written

00:02:41,409 --> 00:02:48,909
react poll for web to iOS and Android as

00:02:44,769 --> 00:02:57,720
well having said that let me just show

00:02:48,909 --> 00:03:03,220
you a very basic react code so this is

00:02:57,720 --> 00:03:08,310
your HTML page I have included the react

00:03:03,220 --> 00:03:11,769
and react DOM and here is what I have

00:03:08,310 --> 00:03:15,870
described a basic div with an ID example

00:03:11,769 --> 00:03:19,180
and I am loading the javascript file and

00:03:15,870 --> 00:03:22,720
if we go to say hello world is there are

00:03:19,180 --> 00:03:28,209
two different components one is a

00:03:22,720 --> 00:03:33,549
country and the other is a world if you

00:03:28,209 --> 00:03:35,829
take a look over here this world the

00:03:33,549 --> 00:03:38,349
country component is present inside the

00:03:35,829 --> 00:03:40,329
world component and that's how a very

00:03:38,349 --> 00:03:43,590
simplistic representation of how you

00:03:40,329 --> 00:03:47,229
include one component into the other and

00:03:43,590 --> 00:03:50,260
lastly in the example we are just kind

00:03:47,229 --> 00:03:53,199
of rendering world and the country

00:03:50,260 --> 00:03:55,479
itself will get rendered think of it as

00:03:53,199 --> 00:04:04,000
like of inheritance class-based

00:03:55,479 --> 00:04:05,799
inheritance Django is mostly an MTV

00:04:04,000 --> 00:04:08,079
framework MVC is like Model View and

00:04:05,799 --> 00:04:10,389
controller Django is MTV where your

00:04:08,079 --> 00:04:12,250
template is the view and your view is a

00:04:10,389 --> 00:04:14,590
controller model is essentially your

00:04:12,250 --> 00:04:16,690
database abstraction layer and view is

00:04:14,590 --> 00:04:18,669
where you liked your logic and it get

00:04:16,690 --> 00:04:22,750
trend renders it gets rendered in your

00:04:18,669 --> 00:04:25,719
templates react fits primarily towards

00:04:22,750 --> 00:04:27,340
the last part for MVC it's the view

00:04:25,719 --> 00:04:30,780
layer for Django MTV

00:04:27,340 --> 00:04:33,669
kinds of it kind of is the temperature

00:04:30,780 --> 00:04:36,669
so this is what happened when we started

00:04:33,669 --> 00:04:39,699
with react you are things like npm react

00:04:36,669 --> 00:04:41,740
react if babel mean tons of tools how do

00:04:39,699 --> 00:04:45,310
we organize the static files how do we

00:04:41,740 --> 00:04:48,790
push it to production should we use gulp

00:04:45,310 --> 00:04:53,290
should we use Bower and felt like really

00:04:48,790 --> 00:04:55,060
complicated for us so basically the way

00:04:53,290 --> 00:04:59,500
we kind of figure it out and simplified

00:04:55,060 --> 00:05:02,260
for ourselves was the entire react code

00:04:59,500 --> 00:05:04,960
is transpired the JX j sx code is

00:05:02,260 --> 00:05:07,630
transpile into transpired via Babel and

00:05:04,960 --> 00:05:08,950
the web pack loader combines all of

00:05:07,630 --> 00:05:11,040
these different files together and

00:05:08,950 --> 00:05:13,570
creates a single JavaScript files

00:05:11,040 --> 00:05:22,419
javascript file which is later pushed to

00:05:13,570 --> 00:05:26,680
production and used for rendering let me

00:05:22,419 --> 00:05:28,389
show you how it happens so essentially

00:05:26,680 --> 00:05:32,979
there is a file called webpack config

00:05:28,389 --> 00:05:35,860
and this web pack dot config takes up

00:05:32,979 --> 00:05:37,210
let me show you the the code is mostly

00:05:35,860 --> 00:05:39,460
the same the one which I had previously

00:05:37,210 --> 00:05:41,530
shown you there's a country class and

00:05:39,460 --> 00:05:44,020
there is a world which inherits a

00:05:41,530 --> 00:05:47,169
country and you render the world as

00:05:44,020 --> 00:05:50,110
simple as that and the addition to this

00:05:47,169 --> 00:05:52,599
is the web by config wearing you

00:05:50,110 --> 00:05:57,070
mentioned an entry point so my main dot

00:05:52,599 --> 00:05:59,080
GS is the entry point and where I want

00:05:57,070 --> 00:06:02,919
the code to be output I mean the entire

00:05:59,080 --> 00:06:06,789
files all of those compiled transpired

00:06:02,919 --> 00:06:10,210
jsx files combined together should be

00:06:06,789 --> 00:06:12,990
pushed to a file called output dot GS

00:06:10,210 --> 00:06:12,990
here

00:06:17,370 --> 00:06:27,070
we use a plug-in called bundle tracker

00:06:20,970 --> 00:06:30,390
to a kind of log out whatever clogs are

00:06:27,070 --> 00:06:37,270
therefore during the process of

00:06:30,390 --> 00:06:39,130
translation and we use loaders babel

00:06:37,270 --> 00:06:40,930
loader and we specify that we will be

00:06:39,130 --> 00:06:44,830
dealing with react code so we specify

00:06:40,930 --> 00:06:47,170
that in the presets and there are things

00:06:44,830 --> 00:06:52,480
like node modules which you do not want

00:06:47,170 --> 00:06:56,980
to kind of include and these are the

00:06:52,480 --> 00:07:00,430
extensions star GS star dot gsx it

00:06:56,980 --> 00:07:02,320
follows the regex pattern so the pack

00:07:00,430 --> 00:07:03,790
dot configuration you mentioned almost

00:07:02,320 --> 00:07:06,520
everything is almost like the settings

00:07:03,790 --> 00:07:08,260
were pie in your django so this is the

00:07:06,520 --> 00:07:11,260
packet config is like the settings /

00:07:08,260 --> 00:07:13,450
settings file and you kind of mentioned

00:07:11,260 --> 00:07:15,010
all the entry point out points the

00:07:13,450 --> 00:07:18,310
plugins that you are going to use the

00:07:15,010 --> 00:07:21,850
loaders and the kind of files that you

00:07:18,310 --> 00:07:26,680
want to you know transpire and combine

00:07:21,850 --> 00:07:31,690
together so far so good but how do we do

00:07:26,680 --> 00:07:34,750
it in Django so Django has a plug-in

00:07:31,690 --> 00:07:40,450
called chango webpack there's a django

00:07:34,750 --> 00:07:43,410
app called Jango web pack so if you I

00:07:40,450 --> 00:07:43,410
mean it's a simple

00:07:51,500 --> 00:07:59,310
nothing is a simple note model wherein

00:07:54,860 --> 00:08:02,099
you have a title and status and we have

00:07:59,310 --> 00:08:06,710
created a REST API for this using the

00:08:02,099 --> 00:08:13,289
Django rest framework in the templates

00:08:06,710 --> 00:08:16,490
we have an index dot HTML this template

00:08:13,289 --> 00:08:19,440
tag over here render bundle main tells

00:08:16,490 --> 00:08:27,979
back to render whatever JavaScript has

00:08:19,440 --> 00:08:27,979
been compiled over here and we have our

00:08:29,509 --> 00:08:42,180
Jas so let us look at this particular

00:08:33,899 --> 00:08:45,330
code what we are doing essentially is we

00:08:42,180 --> 00:08:49,500
have created a model which is nodes it

00:08:45,330 --> 00:08:51,779
has a title and status and we have

00:08:49,500 --> 00:08:54,660
created a REST API on top of it by

00:08:51,779 --> 00:08:56,790
Django rest framework that kind of spits

00:08:54,660 --> 00:08:59,640
out the JSON response to whatever the

00:08:56,790 --> 00:09:02,760
requests are being made to it now that

00:08:59,640 --> 00:09:05,250
Jason response is kind of being taken by

00:09:02,760 --> 00:09:08,190
a react application and that reactor

00:09:05,250 --> 00:09:11,640
application shows it renders it into the

00:09:08,190 --> 00:09:15,990
browser so we create a class called node

00:09:11,640 --> 00:09:22,020
list and we make an AJAX request to the

00:09:15,990 --> 00:09:26,190
API endpoint and we render the entire

00:09:22,020 --> 00:09:32,430
data as a list with no title and no dot

00:09:26,190 --> 00:09:34,589
status and when this entire thing is

00:09:32,430 --> 00:09:38,779
kind of combined together we use web

00:09:34,589 --> 00:09:43,290
pack and web back in the index dot HTML

00:09:38,779 --> 00:09:45,110
tells to render the entire JavaScript

00:09:43,290 --> 00:09:51,089
which has been assembled together and

00:09:45,110 --> 00:09:53,640
you get to see the output the problem we

00:09:51,089 --> 00:09:55,920
started fixing was once we had multiple

00:09:53,640 --> 00:09:57,270
components we had around 15 odd

00:09:55,920 --> 00:10:01,939
components different components together

00:09:57,270 --> 00:10:04,079
and we fetch the data we cache the data

00:10:01,939 --> 00:10:05,639
similar data needs to be present at

00:10:04,079 --> 00:10:08,339
three or four different components and

00:10:05,639 --> 00:10:10,679
once a change happens in one component

00:10:08,339 --> 00:10:15,809
the reflection in other components was

00:10:10,679 --> 00:10:20,850
getting extremely tricky for us now that

00:10:15,809 --> 00:10:28,230
problem is essentially solved by a nap

00:10:20,850 --> 00:10:30,779
and leg library called redux so what

00:10:28,230 --> 00:10:33,439
Redux does is it helps you manage your

00:10:30,779 --> 00:10:37,790
the entire state of the application

00:10:33,439 --> 00:10:40,619
using a JavaScript object called state

00:10:37,790 --> 00:10:43,410
let's look at it there are three basic

00:10:40,619 --> 00:10:44,999
principles with three ducks Redux has a

00:10:43,410 --> 00:10:46,980
single source of truth the state which

00:10:44,999 --> 00:10:48,749
is essentially a reflection of all the

00:10:46,980 --> 00:10:53,040
UI elements and the data that is present

00:10:48,749 --> 00:10:55,919
inside your Dom state is read-only as in

00:10:53,040 --> 00:10:58,019
its immutable you cannot read to it you

00:10:55,919 --> 00:10:59,579
you can only read it you cannot write to

00:10:58,019 --> 00:11:01,649
it and changes are done by pure

00:10:59,579 --> 00:11:03,540
functions by pure functions pure

00:11:01,649 --> 00:11:05,759
functions are functions wherein they

00:11:03,540 --> 00:11:07,439
don't operate they don't make changes to

00:11:05,759 --> 00:11:13,049
the input set they just operate and you

00:11:07,439 --> 00:11:15,419
know kind of send across the output so

00:11:13,049 --> 00:11:20,850
let's lick it take a look at the flow of

00:11:15,419 --> 00:11:23,720
how Redux works suppose there is an

00:11:20,850 --> 00:11:27,259
action in the UI an action in the UI

00:11:23,720 --> 00:11:29,610
triggers an action by an action creator

00:11:27,259 --> 00:11:31,889
that action creator combined with the

00:11:29,610 --> 00:11:33,449
current application state goes towards

00:11:31,889 --> 00:11:36,119
the reducer this reducer is the pure

00:11:33,449 --> 00:11:40,379
function this reducer updates the

00:11:36,119 --> 00:11:42,449
application state which is then kind of

00:11:40,379 --> 00:11:46,739
sent across to the view layer binding in

00:11:42,449 --> 00:11:50,639
in redux and the renderer the reaction

00:11:46,739 --> 00:11:54,720
durer shows out to the UI throws it up

00:11:50,639 --> 00:11:59,929
to the UI so this is a very simple Redux

00:11:54,720 --> 00:12:03,169
workflow essentially action is

00:11:59,929 --> 00:12:05,959
dispatched to the reducers reducers then

00:12:03,169 --> 00:12:08,669
update the current application state

00:12:05,959 --> 00:12:11,519
throw it out to the view layer binding

00:12:08,669 --> 00:12:14,389
and then the reaction durer displays the

00:12:11,519 --> 00:12:14,389
same thing to the UI

00:12:14,690 --> 00:12:28,520
let me show you the code so that it

00:12:17,660 --> 00:12:30,170
becomes more clear over here what we

00:12:28,520 --> 00:12:33,490
have a very simple to do model just an

00:12:30,170 --> 00:12:36,920
extension of the previous node model

00:12:33,490 --> 00:12:44,090
again we have an API for this serializer

00:12:36,920 --> 00:12:48,650
Django rest framework it takes a ID text

00:12:44,090 --> 00:13:09,830
and whether it's marked or not let us

00:12:48,650 --> 00:13:15,400
move on to the more so again this is

00:13:09,830 --> 00:13:18,200
your react Redux application we have

00:13:15,400 --> 00:13:22,310
reducers we have actions and reduces so

00:13:18,200 --> 00:13:28,010
let's first look into the actions so

00:13:22,310 --> 00:13:31,810
whenever there is any UI interaction the

00:13:28,010 --> 00:13:31,810
first thing is what we do is we make a

00:13:34,270 --> 00:13:39,320
call to the reducer so this the call to

00:13:37,700 --> 00:13:41,480
the reducer is kind of being made by

00:13:39,320 --> 00:13:43,970
here types dot add to do makes a call to

00:13:41,480 --> 00:13:51,920
the reducer there are multiple reducers

00:13:43,970 --> 00:13:57,020
which are kind of defined already the

00:13:51,920 --> 00:13:59,690
reducers dispatch those I mean the

00:13:57,020 --> 00:14:02,660
action dispatch dispatches the state

00:13:59,690 --> 00:14:05,960
current state to the reducer the reducer

00:14:02,660 --> 00:14:08,570
then makes changes to the entire DOM and

00:14:05,960 --> 00:14:14,480
that is essentially kind of reflected

00:14:08,570 --> 00:14:18,740
towards the UI element so this kind of

00:14:14,480 --> 00:14:21,320
fills up the entire cycle the last thing

00:14:18,740 --> 00:14:24,400
that we faced the problem which we faced

00:14:21,320 --> 00:14:28,579
with react was the reactor Redux and our

00:14:24,400 --> 00:14:31,059
drf problem assembly was

00:14:28,579 --> 00:14:34,399
number one it was not SEO friendly

00:14:31,059 --> 00:14:37,129
google recently released that it can

00:14:34,399 --> 00:14:39,439
troll single page applications but being

00:14:37,129 --> 00:14:41,959
still does not do this the second thing

00:14:39,439 --> 00:14:44,209
was it was taking a lot of time to on

00:14:41,959 --> 00:14:48,019
the front end to get the entire back-end

00:14:44,209 --> 00:14:51,069
code and render it so the workaround

00:14:48,019 --> 00:14:51,069
that is kind of currently being

00:14:52,449 --> 00:14:57,709
practiced is what you do first is you

00:14:55,249 --> 00:14:59,959
make up the first get request is made to

00:14:57,709 --> 00:15:01,999
a Python web server the Python web

00:14:59,959 --> 00:15:04,009
server then she realizes the entire data

00:15:01,999 --> 00:15:05,540
the way we had seen in the to do MSC we

00:15:04,009 --> 00:15:07,069
had the data the data is entirely

00:15:05,540 --> 00:15:10,610
serialized and then there is additional

00:15:07,069 --> 00:15:14,299
node server which runs behind this

00:15:10,610 --> 00:15:17,059
Python web server the entire data and

00:15:14,299 --> 00:15:19,970
the initial Redux state is thrown into

00:15:17,059 --> 00:15:23,360
the node server in case if there is any

00:15:19,970 --> 00:15:24,860
additional data query that needs to be

00:15:23,360 --> 00:15:27,589
made to the API that node server makes

00:15:24,860 --> 00:15:29,779
it to the API gets the data renders the

00:15:27,589 --> 00:15:31,509
component again back to the Python web

00:15:29,779 --> 00:15:33,579
server the Python web server again

00:15:31,509 --> 00:15:36,619
assembles all these components and

00:15:33,579 --> 00:15:41,480
renders the page now this kind of solves

00:15:36,619 --> 00:15:46,309
the SEO problem we're in any web crawler

00:15:41,480 --> 00:15:50,439
is hitting your endpoint your URL you it

00:15:46,309 --> 00:15:50,439
gets to see the entire page number two

00:15:50,619 --> 00:15:56,179
it doesn't take too much of time and and

00:15:53,179 --> 00:15:57,559
for subsequent you know request API

00:15:56,179 --> 00:15:59,839
requests the client itself from here

00:15:57,559 --> 00:16:03,049
reacted the reductant from here itself

00:15:59,839 --> 00:16:04,429
makes a request to the API directly it

00:16:03,049 --> 00:16:08,149
doesn't have to go through all the

00:16:04,429 --> 00:16:09,799
entire entire process so this is just

00:16:08,149 --> 00:16:12,559
the first time and subsequently

00:16:09,799 --> 00:16:14,419
subsequent API calls directly to the API

00:16:12,559 --> 00:16:17,329
so that kind of reduces the entire time

00:16:14,419 --> 00:16:19,489
and the third thing was we were able to

00:16:17,329 --> 00:16:22,149
separate things like there is no more

00:16:19,489 --> 00:16:27,649
template at the Django templates is just

00:16:22,149 --> 00:16:29,209
react entire static files and that

00:16:27,649 --> 00:16:31,189
brought in about separation of concerns

00:16:29,209 --> 00:16:34,100
as in front end is front-end back-end is

00:16:31,189 --> 00:16:39,160
back and that is what we have done

00:16:34,100 --> 00:16:39,160
mostly happy to make any questions

00:16:45,890 --> 00:16:49,320
thank you very much like it and again

00:16:47,670 --> 00:16:51,959
we've got any questions please form a

00:16:49,320 --> 00:16:54,000
line just to get the ball rolling that

00:16:51,959 --> 00:16:56,730
last slide you show the sort of the

00:16:54,000 --> 00:16:58,190
farmed out server-side rendering yeah I

00:16:56,730 --> 00:17:00,899
understand entirely why it's necessary

00:16:58,190 --> 00:17:02,370
it is there what's the performance

00:17:00,899 --> 00:17:04,170
overhead for that I mean obviously it's

00:17:02,370 --> 00:17:06,390
just template rendering but it's just

00:17:04,170 --> 00:17:08,069
template rendering behind HTTP stack so

00:17:06,390 --> 00:17:10,470
yeah slow anything down in any

00:17:08,069 --> 00:17:11,790
meaningful to be very honest with you I

00:17:10,470 --> 00:17:13,770
mean we are not facing hundred millions

00:17:11,790 --> 00:17:17,100
of requests per day so far as

00:17:13,770 --> 00:17:19,230
performance is not an issue the initial

00:17:17,100 --> 00:17:21,480
the thing was the first problem which we

00:17:19,230 --> 00:17:24,209
faced was the first load was taking too

00:17:21,480 --> 00:17:26,339
much of time and this solution helped us

00:17:24,209 --> 00:17:27,720
minimise the load from around 23 seconds

00:17:26,339 --> 00:17:30,690
to like I don't know whatever million

00:17:27,720 --> 00:17:32,190
seconds is milliseconds is so that's the

00:17:30,690 --> 00:17:33,540
first point second point we are yet to

00:17:32,190 --> 00:17:34,830
hit the state of traffic where and we

00:17:33,540 --> 00:17:38,120
want to worry about how much that

00:17:34,830 --> 00:17:42,570
additional you know python two nodes our

00:17:38,120 --> 00:17:43,890
request response time is so I think at

00:17:42,570 --> 00:17:45,270
this point we don't have enough data

00:17:43,890 --> 00:17:48,419
points to you no answer your question

00:17:45,270 --> 00:17:51,450
sure right okay well one more just to

00:17:48,419 --> 00:17:53,010
get go I got the you showed up there's a

00:17:51,450 --> 00:17:55,620
lot of JavaScript code that was up there

00:17:53,010 --> 00:17:58,140
yeah a lot of that fizz following sort

00:17:55,620 --> 00:17:59,190
of some fairly common patterns for what

00:17:58,140 --> 00:18:00,990
would for a lot of people you know

00:17:59,190 --> 00:18:02,669
should display a list of objects display

00:18:00,990 --> 00:18:04,830
a single object that's being updated and

00:18:02,669 --> 00:18:07,200
so on is there any scope for any of that

00:18:04,830 --> 00:18:10,020
to be modularized reused you know in a

00:18:07,200 --> 00:18:10,980
reusable django app of any kind or is it

00:18:10,020 --> 00:18:12,600
is it something that is going to be

00:18:10,980 --> 00:18:16,290
genuine they custom built for every

00:18:12,600 --> 00:18:17,730
application I don't get you I mean I so

00:18:16,290 --> 00:18:19,380
okay so there is a lot of you had you've

00:18:17,730 --> 00:18:21,720
had to write a lot of JavaScript yet to

00:18:19,380 --> 00:18:23,610
write a lot of modules yeah is any of it

00:18:21,720 --> 00:18:27,150
sufficiently boilerplate that it could

00:18:23,610 --> 00:18:29,160
be templated wrapped up you know

00:18:27,150 --> 00:18:33,840
easy-to-use bundles who can just say

00:18:29,160 --> 00:18:36,690
give me a redux list of objects no just

00:18:33,840 --> 00:18:38,309
no in Austin no no I mean the most you

00:18:36,690 --> 00:18:40,080
can get is what Redux has and there are

00:18:38,309 --> 00:18:41,549
several boiler plates but I mean

00:18:40,080 --> 00:18:43,140
whatever components you want to write

00:18:41,549 --> 00:18:46,830
you need to write on your own there are

00:18:43,140 --> 00:18:47,910
things like react strap I mean in case

00:18:46,830 --> 00:18:49,770
if we just want the bootstrapping

00:18:47,910 --> 00:18:50,910
directly into your you know you right so

00:18:49,770 --> 00:18:52,620
they are think libraries like react

00:18:50,910 --> 00:18:57,090
strap apart from them that

00:18:52,620 --> 00:18:59,780
I think that exists outside the question

00:18:57,090 --> 00:19:03,300
about that template tag the bundle yeah

00:18:59,780 --> 00:19:05,520
so is that taking a pre-rendered so

00:19:03,300 --> 00:19:08,160
you've run web pack that's produced yeah

00:19:05,520 --> 00:19:10,590
single jayus file yes and is that

00:19:08,160 --> 00:19:12,930
inserting the whole JS file in that

00:19:10,590 --> 00:19:15,210
template yes in serving that whole thing

00:19:12,930 --> 00:19:18,240
yeah that's quite a large pagent yes yes

00:19:15,210 --> 00:19:22,620
okay yeah justjust yeah I'll check goes

00:19:18,240 --> 00:19:25,520
yes knowing that right yeah thanks okay

00:19:22,620 --> 00:19:25,520

YouTube URL: https://www.youtube.com/watch?v=xZYe2Avldlo


