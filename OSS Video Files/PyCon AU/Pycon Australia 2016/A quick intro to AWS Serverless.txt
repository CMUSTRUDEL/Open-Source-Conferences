Title: A quick intro to AWS Serverless
Publication date: 2016-08-16
Playlist: Pycon Australia 2016
Description: 
	Curtis Maloney
https://2016.pycon-au.org/schedule/126/view_talk
Captions: 
	00:00:00,000 --> 00:00:06,660
I good afternoon welcome back everyone

00:00:02,689 --> 00:00:08,700
so next up we've got Curtis Maloney who

00:00:06,660 --> 00:00:12,330
will be speaking about a quick

00:00:08,700 --> 00:00:15,030
introduction to AWS service I'm quite

00:00:12,330 --> 00:00:17,730
intrigued Curtis has been working with

00:00:15,030 --> 00:00:20,730
Python since the late 90s starting with

00:00:17,730 --> 00:00:22,710
1.5 and in the interim is used to

00:00:20,730 --> 00:00:25,710
everything from web services payment

00:00:22,710 --> 00:00:27,029
gateways access control systems is use

00:00:25,710 --> 00:00:37,309
it for everything and just mucking about

00:00:27,029 --> 00:00:40,020
so please welcome Curtis hi first up

00:00:37,309 --> 00:00:42,239
sorry about the very rough nature of

00:00:40,020 --> 00:00:44,010
this talk i wrote it over the last

00:00:42,239 --> 00:00:46,920
couple of days to help fill in for a gap

00:00:44,010 --> 00:00:54,750
in the schedule so that's my excuse and

00:00:46,920 --> 00:00:57,239
i'm sticking to it right so hands up

00:00:54,750 --> 00:00:59,370
anyone who knows well firstly I've got

00:00:57,239 --> 00:01:01,199
nothing to do with him they don't pay me

00:00:59,370 --> 00:01:02,520
they don't reward me that I just use

00:01:01,199 --> 00:01:06,869
their free stuff like everybody else

00:01:02,520 --> 00:01:12,390
does anyone here have any experience

00:01:06,869 --> 00:01:13,500
with AWS a service technology okay I've

00:01:12,390 --> 00:01:15,990
been playing around with it for the last

00:01:13,500 --> 00:01:17,340
few weeks actually it must be longer

00:01:15,990 --> 00:01:21,689
than that because i gave a talk about it

00:01:17,340 --> 00:01:23,520
at mel django last month and I'm finding

00:01:21,689 --> 00:01:25,350
it very very promising for a number of

00:01:23,520 --> 00:01:30,990
reasons which I'll start covering during

00:01:25,350 --> 00:01:33,270
the talk so firstly what is it well you

00:01:30,990 --> 00:01:36,780
take AWS lambda anyone here know what a

00:01:33,270 --> 00:01:39,780
diverse lambda is good most of you okay

00:01:36,780 --> 00:01:43,409
so it's an ability in AWS to write a

00:01:39,780 --> 00:01:47,100
function in Java or Python or node and

00:01:43,409 --> 00:01:49,439
have it run when certain events happen

00:01:47,100 --> 00:01:51,530
and then you can basically script up

00:01:49,439 --> 00:01:54,869
reactions to stuff on your server

00:01:51,530 --> 00:01:56,549
combining that with AWS API gateway

00:01:54,869 --> 00:01:58,439
which allows you to create restful

00:01:56,549 --> 00:02:02,310
gateways that then bind through to other

00:01:58,439 --> 00:02:06,149
things in AWS infrastructure and this

00:02:02,310 --> 00:02:11,009
gives you ops free scaling who likes the

00:02:06,149 --> 00:02:12,269
idea of zero effort scaling come on you

00:02:11,009 --> 00:02:15,670
all do

00:02:12,269 --> 00:02:18,519
so what's lamba as i said functions in

00:02:15,670 --> 00:02:20,500
Python or node or Java or who could not

00:02:18,519 --> 00:02:22,810
hear about the other two triggered by

00:02:20,500 --> 00:02:25,090
events in AWS so it might be that as a

00:02:22,810 --> 00:02:26,620
service shut starts up or somebody sends

00:02:25,090 --> 00:02:29,530
a message or a message appears in the

00:02:26,620 --> 00:02:30,640
queue or the day changes there's all

00:02:29,530 --> 00:02:33,430
kinds of things and you can even have

00:02:30,640 --> 00:02:34,690
periodic ones originally there for

00:02:33,430 --> 00:02:37,930
automating reactions but it's auto

00:02:34,690 --> 00:02:40,390
scaling so AWS will manage firing up a

00:02:37,930 --> 00:02:42,519
box and running your code on it and

00:02:40,390 --> 00:02:44,049
keeping it around for a while just in

00:02:42,519 --> 00:02:45,849
case you decide to do that again and

00:02:44,049 --> 00:02:49,720
throwing it out and if you start running

00:02:45,849 --> 00:02:54,700
at a lot of times they'll run up a lot

00:02:49,720 --> 00:02:57,040
of boxes for you this sounds easy what's

00:02:54,700 --> 00:02:59,230
API gateway so you get a restful api

00:02:57,040 --> 00:03:02,200
front end that you can then adaptively

00:02:59,230 --> 00:03:04,810
bind to all kinds of things so you might

00:03:02,200 --> 00:03:07,540
want it to serve the file out of s3 you

00:03:04,810 --> 00:03:09,670
might want it to make a database query

00:03:07,540 --> 00:03:12,329
to DynamoDB and hand back the results

00:03:09,670 --> 00:03:15,280
you might want it to who knows what else

00:03:12,329 --> 00:03:16,840
it's also auto scaling you just get

00:03:15,280 --> 00:03:20,579
charged by the request in the amount of

00:03:16,840 --> 00:03:25,000
data you send and it can talk to lambda

00:03:20,579 --> 00:03:27,910
so now we have a recipe we can go

00:03:25,000 --> 00:03:30,430
straight from a web request map that

00:03:27,910 --> 00:03:32,980
information to our function have the

00:03:30,430 --> 00:03:35,260
information come back and send that back

00:03:32,980 --> 00:03:38,079
to the client well that's that's a web

00:03:35,260 --> 00:03:43,750
application so I'm going to do the crazy

00:03:38,079 --> 00:03:48,819
stuff of live demo right here in front

00:03:43,750 --> 00:03:51,060
of you first the window doesn't go

00:03:48,819 --> 00:03:51,060
anywhere

00:03:58,120 --> 00:04:06,010
I have problems with scaling sometimes

00:04:01,620 --> 00:04:13,540
mmm problems with a high DPI monitor and

00:04:06,010 --> 00:04:20,350
not high DPI everything else so why do

00:04:13,540 --> 00:04:21,910
you split air come on full screen so AWS

00:04:20,350 --> 00:04:23,889
provides a lot of services as you can

00:04:21,910 --> 00:04:26,199
see here lots and lots of opportunities

00:04:23,889 --> 00:04:27,490
but let's go have a look at lambda I've

00:04:26,199 --> 00:04:30,610
already got a bunch of stuff I've been

00:04:27,490 --> 00:04:35,169
working on it's the very first one I

00:04:30,610 --> 00:04:38,110
wrote which is a lander handler that

00:04:35,169 --> 00:04:42,190
returns the current date or time date

00:04:38,110 --> 00:04:47,320
and time and if you ask it to mock it it

00:04:42,190 --> 00:04:50,770
returns a known date and time we can

00:04:47,320 --> 00:04:52,630
test this go on run it and down here it

00:04:50,770 --> 00:04:56,830
shows us we've got some output which is

00:04:52,630 --> 00:04:58,330
somewhere around about now doesn't seem

00:04:56,830 --> 00:05:05,560
like a lot of use but I actually have a

00:04:58,330 --> 00:05:10,419
client who needs this not going into why

00:05:05,560 --> 00:05:12,539
but there it is and that means I don't

00:05:10,419 --> 00:05:14,830
have to worry about this ever again

00:05:12,539 --> 00:05:16,780
because they've got this function it's

00:05:14,830 --> 00:05:19,419
there amazon will make it work forever

00:05:16,780 --> 00:05:23,860
as heavily as they hit it which would be

00:05:19,419 --> 00:05:25,120
once or six times a day or whatever how

00:05:23,860 --> 00:05:26,910
do we actually create our own new

00:05:25,120 --> 00:05:29,530
function let's do this from scratch

00:05:26,910 --> 00:05:31,960
let's create a lambda function they've

00:05:29,530 --> 00:05:33,810
got a whole lot of templates there for

00:05:31,960 --> 00:05:36,510
you if you're into that sort of thing

00:05:33,810 --> 00:05:38,860
we're going to do this the hard way I

00:05:36,510 --> 00:05:40,419
never worked out what this step is for

00:05:38,860 --> 00:05:42,099
because I've never needed it but that's

00:05:40,419 --> 00:05:44,979
basically hooking up what triggers you

00:05:42,099 --> 00:05:48,599
want to fire this lambda I'm going to

00:05:44,979 --> 00:05:51,599
call it spike on a year description

00:05:48,599 --> 00:05:51,599
lives

00:05:56,309 --> 00:06:07,569
we'll pick our language of preference

00:05:59,429 --> 00:06:10,779
sorry mistyped there mmm now you have a

00:06:07,569 --> 00:06:12,279
choice of editing the code in line in

00:06:10,779 --> 00:06:13,659
this lovely little edited down here

00:06:12,279 --> 00:06:16,209
which i think is using code mirror or

00:06:13,659 --> 00:06:19,149
the basis of atom or one of those it's

00:06:16,209 --> 00:06:21,099
quite nice uploading a zip file so you

00:06:19,149 --> 00:06:22,749
can take all your source code zip it up

00:06:21,099 --> 00:06:24,429
and just send it there and so you can

00:06:22,749 --> 00:06:26,709
actually access other modules and so on

00:06:24,429 --> 00:06:28,959
as you're going along or uploading stuff

00:06:26,709 --> 00:06:32,129
from Amazon s3 because we all store our

00:06:28,959 --> 00:06:32,129
files on s3 don't we

00:06:38,520 --> 00:06:45,660
ok this is the function to call inside

00:06:42,870 --> 00:06:50,190
our module let's just choose an existing

00:06:45,660 --> 00:06:53,759
role I have that one which is an IM role

00:06:50,190 --> 00:06:55,169
so you can run it in control we get to

00:06:53,759 --> 00:06:57,000
allocate how much memory and this is

00:06:55,169 --> 00:06:59,340
important later on as I'll explain and

00:06:57,000 --> 00:07:01,560
even can run it inside a virtual private

00:06:59,340 --> 00:07:03,180
cloud to make sure it's really isolated

00:07:01,560 --> 00:07:07,080
from the rest of the outside world if

00:07:03,180 --> 00:07:12,900
you want to be careful are you really

00:07:07,080 --> 00:07:14,940
sure yep I'm sure let's test this do I

00:07:12,900 --> 00:07:20,789
want to pass it any parameters will just

00:07:14,940 --> 00:07:22,409
yep and hello there's our output so what

00:07:20,789 --> 00:07:24,150
happens here is the context is a bunch

00:07:22,409 --> 00:07:27,419
of information about what's going on

00:07:24,150 --> 00:07:30,060
where the requests come from what

00:07:27,419 --> 00:07:31,979
version of things is going on what

00:07:30,060 --> 00:07:34,469
server you're running on a whole bunch

00:07:31,979 --> 00:07:36,690
of useful context information the event

00:07:34,469 --> 00:07:41,069
is information about what happened to

00:07:36,690 --> 00:07:44,940
trigger this invocation this is useful a

00:07:41,069 --> 00:07:48,479
little later on so that's creating a

00:07:44,940 --> 00:07:52,020
very simple lambda function as we saw

00:07:48,479 --> 00:07:54,270
from my time stamp example doesn't take

00:07:52,020 --> 00:07:57,479
much and here I'm actually getting some

00:07:54,270 --> 00:08:00,389
information out of there ok api gateway

00:07:57,479 --> 00:08:03,000
is much more complicated because it can

00:08:00,389 --> 00:08:04,830
do an awful lot more i have a little

00:08:03,000 --> 00:08:12,210
test area here where I've been playing

00:08:04,830 --> 00:08:14,599
with things let me just delete the whole

00:08:12,210 --> 00:08:14,599
API

00:08:20,969 --> 00:08:34,789
create new IP I that's a text box people

00:08:37,790 --> 00:08:44,030
is this at all readable to anyone down

00:08:40,250 --> 00:08:45,530
there good okay so the first thing we

00:08:44,030 --> 00:08:48,590
have a route that's been created or a

00:08:45,530 --> 00:08:50,180
resource automatically created for us

00:08:48,590 --> 00:08:54,620
the root resource we can create a new

00:08:50,180 --> 00:08:59,840
resource let's call it hello and that

00:08:54,620 --> 00:09:06,580
gets put under / hello on this resource

00:08:59,840 --> 00:09:12,380
we're going to create a method called

00:09:06,580 --> 00:09:14,540
get here it is and we're going to do a

00:09:12,380 --> 00:09:16,790
lambda function but if we wanted we

00:09:14,540 --> 00:09:19,790
could do any sort of AWS service in NE

00:09:16,790 --> 00:09:22,040
AWS region that we wanted we can proxy

00:09:19,790 --> 00:09:23,780
to other HTTP services and we can do a

00:09:22,040 --> 00:09:25,340
mock integration which is useful if you

00:09:23,780 --> 00:09:27,470
need to do options headers for cause

00:09:25,340 --> 00:09:32,410
that's all handled automatically for you

00:09:27,470 --> 00:09:32,410
if you ask them to I'm down here

00:09:33,190 --> 00:09:36,520
southeast to

00:09:40,769 --> 00:09:45,089
lots of autocomplete here just to make a

00:09:43,139 --> 00:09:48,209
life easier warning that it's going to

00:09:45,089 --> 00:09:49,889
give access to this from the API gateway

00:09:48,209 --> 00:09:52,290
so just keeping you aware that you're

00:09:49,889 --> 00:09:59,009
opening yourself up and this is what

00:09:52,290 --> 00:10:01,319
it's set up the method request is how it

00:09:59,009 --> 00:10:04,529
takes the information from the web

00:10:01,319 --> 00:10:07,350
request and what it's going to do with

00:10:04,529 --> 00:10:10,110
it how it's going to make it available

00:10:07,350 --> 00:10:12,480
to you or whatever you're integrating

00:10:10,110 --> 00:10:14,850
with the integration request allows you

00:10:12,480 --> 00:10:17,220
to take that information and then

00:10:14,850 --> 00:10:18,899
reformat it to make sense to whatever

00:10:17,220 --> 00:10:20,610
you're passing it off to so for example

00:10:18,899 --> 00:10:22,889
if you were going to form pass this

00:10:20,610 --> 00:10:24,689
through to a dynamo dB you would have to

00:10:22,889 --> 00:10:27,480
take the query that you were given and

00:10:24,689 --> 00:10:30,089
turn it into an actual actual dynamo

00:10:27,480 --> 00:10:32,189
query or an SQL query or whatever else

00:10:30,089 --> 00:10:33,509
you're going to use to pass it on then

00:10:32,189 --> 00:10:34,850
there's the lambda which is the thing

00:10:33,509 --> 00:10:36,899
we're actually going to invoke

00:10:34,850 --> 00:10:39,029
integration response allows you to do

00:10:36,899 --> 00:10:41,970
reverse you get to reformat the response

00:10:39,029 --> 00:10:44,189
and hand it on and the method response

00:10:41,970 --> 00:10:49,290
allows you to turn out how that gets

00:10:44,189 --> 00:10:52,439
mapped into an HTTP response so let's

00:10:49,290 --> 00:10:56,279
have a look do we need authorization so

00:10:52,439 --> 00:10:58,470
we can actually change that to require

00:10:56,279 --> 00:11:02,730
an IM login if we want but we're not

00:10:58,470 --> 00:11:04,980
going to do that are there any query

00:11:02,730 --> 00:11:06,569
string arguments that we want a special

00:11:04,980 --> 00:11:11,119
interest to and this will help make them

00:11:06,569 --> 00:11:13,470
available to us more easily in our event

00:11:11,119 --> 00:11:14,790
are there any headers that we want to

00:11:13,470 --> 00:11:20,850
pass through which I'll address that a

00:11:14,790 --> 00:11:22,769
little later on and do we want to do any

00:11:20,850 --> 00:11:25,679
special work with content types now

00:11:22,769 --> 00:11:28,790
there is down the list of options as a

00:11:25,679 --> 00:11:32,879
thing to behold models where you can use

00:11:28,790 --> 00:11:34,829
the JSON schema system to describe data

00:11:32,879 --> 00:11:36,629
shapes that you actually want to use and

00:11:34,829 --> 00:11:39,419
this can be applied to you information

00:11:36,629 --> 00:11:41,279
coming in and going out to make sure

00:11:39,419 --> 00:11:43,829
it's all valid and correctly formatted

00:11:41,279 --> 00:11:45,980
before your code gets invoked this way

00:11:43,829 --> 00:11:49,910
you add an extra layer of protection to

00:11:45,980 --> 00:11:52,410
stop you getting their data in or out

00:11:49,910 --> 00:11:53,779
and this allows you to map that by

00:11:52,410 --> 00:11:55,220
content type so that

00:11:53,779 --> 00:11:57,290
depending on what the request says its

00:11:55,220 --> 00:12:01,339
data shape is you can then go and map it

00:11:57,290 --> 00:12:04,040
out accordingly next we have the

00:12:01,339 --> 00:12:05,930
integration request which we've said

00:12:04,040 --> 00:12:08,240
we're going to a lambda function it's

00:12:05,930 --> 00:12:12,980
this one and again we get some body

00:12:08,240 --> 00:12:18,889
mapping checks you can ask for it to

00:12:12,980 --> 00:12:20,329
pass the body through directly we're

00:12:18,889 --> 00:12:23,779
going to address that later on when we

00:12:20,329 --> 00:12:26,569
try a little trick call the lambda

00:12:23,779 --> 00:12:28,189
integration response we get to say okay

00:12:26,569 --> 00:12:32,360
by default we're going to give a 200

00:12:28,189 --> 00:12:34,850
response there is a way to say i want to

00:12:32,360 --> 00:12:37,309
match on specific error error messages

00:12:34,850 --> 00:12:39,290
if your response is not a 200 or if you

00:12:37,309 --> 00:12:41,779
want if you're 200 to respond to an

00:12:39,290 --> 00:12:45,110
exception it's actually easier to

00:12:41,779 --> 00:12:46,579
control that in mode which allows you to

00:12:45,110 --> 00:12:48,769
different callbacks to return the

00:12:46,579 --> 00:12:50,180
response whereas in Python you either

00:12:48,769 --> 00:12:52,850
return your response you raise an

00:12:50,180 --> 00:12:54,139
exception I think this is a bit of a

00:12:52,850 --> 00:12:55,370
limitation but it's the way it's

00:12:54,139 --> 00:12:57,949
implemented there's nothing we can

00:12:55,370 --> 00:12:59,990
change yet this header mappings which

00:12:57,949 --> 00:13:01,639
allow you to say okay this field of

00:12:59,990 --> 00:13:05,389
information that I'm returning I want to

00:13:01,639 --> 00:13:07,550
put it into the header this header this

00:13:05,389 --> 00:13:09,290
I've used only for two different things

00:13:07,550 --> 00:13:10,790
one is redirections and one is for

00:13:09,290 --> 00:13:12,500
setting cookies which I'll show you a

00:13:10,790 --> 00:13:17,149
little later on I hope if I have time

00:13:12,500 --> 00:13:18,709
and finally a body mapper which allows

00:13:17,149 --> 00:13:21,050
you to say how am I going to translate

00:13:18,709 --> 00:13:22,610
what my function returns into something

00:13:21,050 --> 00:13:25,730
that I can actually send across the wire

00:13:22,610 --> 00:13:27,019
and by default it's just send back

00:13:25,730 --> 00:13:28,970
exactly what you gave it which is

00:13:27,019 --> 00:13:31,569
typically JSON and then get serialized

00:13:28,970 --> 00:13:31,569
and returned

00:13:35,020 --> 00:13:39,850
so let's give it a test I haven't said

00:13:38,110 --> 00:13:42,580
there's any headers or query strings of

00:13:39,850 --> 00:13:44,710
interest and no staging variables to

00:13:42,580 --> 00:13:48,850
help test it out so I'm going to test it

00:13:44,710 --> 00:13:53,980
and we get our response and some headers

00:13:48,850 --> 00:13:55,840
and an execution log well stuff happened

00:13:53,980 --> 00:13:59,050
lots of stuff happened that we get to

00:13:55,840 --> 00:14:03,580
hold all about it have I just made an

00:13:59,050 --> 00:14:05,770
API yes but nobody can get at it so in

00:14:03,580 --> 00:14:10,180
order to do that for all of you to start

00:14:05,770 --> 00:14:13,390
costing me money I have to deploy my API

00:14:10,180 --> 00:14:20,070
and to do that I have to create a

00:14:13,390 --> 00:14:23,500
deployment stage is call it dev which is

00:14:20,070 --> 00:14:27,190
development and why am I deploying

00:14:23,500 --> 00:14:30,430
because you all do new stuff and now I

00:14:27,190 --> 00:14:34,060
have an actual URL I can go to that URL

00:14:30,430 --> 00:14:38,470
and it'll tell me rack off because that

00:14:34,060 --> 00:14:43,830
URL is for the base of the API what did

00:14:38,470 --> 00:14:43,830
I call it hello

00:14:49,130 --> 00:14:55,480
anyone who wants to actually try and

00:14:51,620 --> 00:14:55,480
type in that URL can do that now and

00:14:56,080 --> 00:15:04,580
well will it cost me we'll get to that

00:15:01,990 --> 00:15:07,340
so I can add other actions I can add

00:15:04,580 --> 00:15:09,470
other methods I can put a post method on

00:15:07,340 --> 00:15:11,030
here i can put options and delete and

00:15:09,470 --> 00:15:13,550
all the rest of it and have that run

00:15:11,030 --> 00:15:15,260
through and do whatever i need every now

00:15:13,550 --> 00:15:17,660
and again of course a lot of the times

00:15:15,260 --> 00:15:20,120
you want to do something then redirect

00:15:17,660 --> 00:15:24,350
somebody else where so I'm going to turn

00:15:20,120 --> 00:15:31,670
this into a redirection function you

00:15:24,350 --> 00:15:35,780
know so in our method response first we

00:15:31,670 --> 00:15:37,820
have to delete the old one because you

00:15:35,780 --> 00:15:41,210
cannot change the status code without

00:15:37,820 --> 00:15:44,020
deleting and creating a new one going to

00:15:41,210 --> 00:15:44,020
add a 303

00:15:49,710 --> 00:15:57,320
you can't hit enter you have to hit the

00:15:52,020 --> 00:16:06,740
tick I'm going to add a header which is

00:15:57,320 --> 00:16:06,740
location okay

00:16:07,710 --> 00:16:12,540
in our integration response just as a

00:16:10,650 --> 00:16:15,810
test I'll have to get rid of that

00:16:12,540 --> 00:16:21,200
because that doesn't exist anymore add

00:16:15,810 --> 00:16:21,200
an integration response to go to our 303

00:16:22,010 --> 00:16:27,480
now i'm going to set this and say we

00:16:26,070 --> 00:16:29,550
have ahead of mapping now we have the

00:16:27,480 --> 00:16:32,460
option to set how do i tell it what our

00:16:29,550 --> 00:16:34,590
header location is so i'm going to edit

00:16:32,460 --> 00:16:46,220
that and say you're going to put in the

00:16:34,590 --> 00:16:46,220
string literal of that's a good place

00:17:06,730 --> 00:17:13,150
it's very picky you have to use the

00:17:08,559 --> 00:17:17,290
right quotes it does matter okay so

00:17:13,150 --> 00:17:24,720
that's safe that's all there who expects

00:17:17,290 --> 00:17:28,299
this to work anyone know three of you

00:17:24,720 --> 00:17:30,450
three four of you you're all wrong it's

00:17:28,299 --> 00:17:34,450
not going to work what didn't they do I

00:17:30,450 --> 00:17:37,270
didn't deploy so you can go around you

00:17:34,450 --> 00:17:39,990
can experiment you can test you can

00:17:37,270 --> 00:17:43,210
fiddle with stuff I can test it here

00:17:39,990 --> 00:17:46,240
test and what do I get your content type

00:17:43,210 --> 00:17:56,669
and a location head up that's what I

00:17:46,240 --> 00:17:56,669
wanted to see now deploy into dev

00:18:06,730 --> 00:18:09,990
what happened

00:18:19,520 --> 00:18:24,120
the redirection works the site I

00:18:22,260 --> 00:18:27,630
centrist who doesn't exist but the

00:18:24,120 --> 00:18:29,910
redirection worked just it took a while

00:18:27,630 --> 00:18:34,830
because it had to filter through all the

00:18:29,910 --> 00:18:37,950
stuff that AWS is doing for you here on

00:18:34,830 --> 00:18:43,820
the screen alright so i can redirect but

00:18:37,950 --> 00:18:43,820
i wanted control where i redirect to so

00:18:44,450 --> 00:18:48,860
back to our little test function

00:19:01,140 --> 00:19:04,400
what are we saying it is

00:19:06,460 --> 00:19:09,090
that

00:19:12,900 --> 00:19:21,090
so I'm going to return this save and

00:19:16,050 --> 00:19:30,000
test okay what I'm going to go back to

00:19:21,090 --> 00:19:33,080
the Gateway and i'm going to say in our

00:19:30,000 --> 00:19:33,080
integration response

00:19:37,140 --> 00:19:43,980
don't put this literal let me use your

00:19:40,850 --> 00:19:48,000
fancy JavaScript looking but not quite

00:19:43,980 --> 00:19:54,600
template language and it's a integration

00:19:48,000 --> 00:19:55,920
response body location so I'm coming

00:19:54,600 --> 00:19:57,930
from the integration I'm getting

00:19:55,920 --> 00:19:59,550
whatever it sent me as a response I'm

00:19:57,930 --> 00:20:01,920
getting the body property of that and

00:19:59,550 --> 00:20:04,550
inside that we stuffed something called

00:20:01,920 --> 00:20:04,550
location

00:20:36,230 --> 00:20:42,419
so that's how i can send a response back

00:20:39,330 --> 00:20:47,580
but what if i want to get more

00:20:42,419 --> 00:20:49,679
information from the request i have a

00:20:47,580 --> 00:20:51,149
couple of options one in student get the

00:20:49,679 --> 00:20:56,220
information from the headers one is to

00:20:51,149 --> 00:21:00,289
get information so what what they do

00:20:56,220 --> 00:21:07,440
helpfully in your integration request

00:21:00,289 --> 00:21:09,119
let's add just by default its

00:21:07,440 --> 00:21:15,379
application JSON because this is made

00:21:09,119 --> 00:21:15,379
for so

00:21:18,540 --> 00:21:24,030
now they have this precooked script here

00:21:21,330 --> 00:21:26,430
to do a lot of work for you so what this

00:21:24,030 --> 00:21:28,380
is doing is you've got an object called

00:21:26,430 --> 00:21:30,540
dollar input which is everything that's

00:21:28,380 --> 00:21:32,040
been passed to you and you can grab some

00:21:30,540 --> 00:21:33,630
information so they're saying into the

00:21:32,040 --> 00:21:36,570
body we're going to try and pass the

00:21:33,630 --> 00:21:39,180
body of the request as JSON and put that

00:21:36,570 --> 00:21:40,740
into this attribute called body JSON

00:21:39,180 --> 00:21:43,560
then we're going to create a list of

00:21:40,740 --> 00:21:45,060
poems for each different type in there

00:21:43,560 --> 00:21:49,260
and so what you get out of there is

00:21:45,060 --> 00:21:52,260
headers query string and something else

00:21:49,260 --> 00:21:53,520
we'll see in a minute and then it's

00:21:52,260 --> 00:21:55,140
going to say okay I've got all this

00:21:53,520 --> 00:21:57,000
other contexts stuff that I'm going to

00:21:55,140 --> 00:21:59,990
tell you about which is like what what

00:21:57,000 --> 00:22:03,540
account you're running on what version

00:21:59,990 --> 00:22:06,600
what tags what HTTP method was sent are

00:22:03,540 --> 00:22:08,910
you in the deployed stage or dev stage

00:22:06,600 --> 00:22:11,550
where did they come from are they an

00:22:08,910 --> 00:22:14,520
authorized user which unfortunately

00:22:11,550 --> 00:22:21,200
requires using cognito which isn't

00:22:14,520 --> 00:22:28,640
available in Australia yet and save that

00:22:21,200 --> 00:22:28,640
I'm going to change this to also

00:22:34,279 --> 00:22:38,559
just passes the event

00:22:47,399 --> 00:22:51,649
she went on this first give her at that

00:22:58,360 --> 00:23:08,040
statuscode 2000 coming to you that's all

00:23:06,010 --> 00:23:08,040
good

00:23:19,779 --> 00:23:24,509
these are little tedious but there are

00:23:21,669 --> 00:23:24,509
shortcuts this

00:23:32,050 --> 00:23:36,270
does anybody here worked with

00:23:42,630 --> 00:23:48,690
I'm safe up there is a WoW five minutes

00:23:47,520 --> 00:23:52,770
already there is a language for

00:23:48,690 --> 00:23:56,460
describing api's which is called Graham

00:23:52,770 --> 00:23:57,810
help me out swagger you can use swagger

00:23:56,460 --> 00:23:59,100
to describe all we were api's in

00:23:57,810 --> 00:24:01,470
integrations for this stuff obviously

00:23:59,100 --> 00:24:03,270
I'm running out of time I completely

00:24:01,470 --> 00:24:10,290
misjudged how long any of this would

00:24:03,270 --> 00:24:13,610
take I honestly thought I'd be

00:24:10,290 --> 00:24:13,610
struggling to fill the discussion

00:24:20,179 --> 00:24:24,390
nothing we've got nothing because I did

00:24:22,470 --> 00:24:30,899
it all wrong come and see me later I'll

00:24:24,390 --> 00:24:33,690
show you how to do it properly so what

00:24:30,899 --> 00:24:38,730
does it cost well lambda 3 tier includes

00:24:33,690 --> 00:24:40,740
a million free requests a month 400

00:24:38,730 --> 00:24:42,390
gigabytes seconds of compute time so

00:24:40,740 --> 00:24:44,549
what happens is the amount of memory you

00:24:42,390 --> 00:24:47,010
allocate to the lambda multiplied by the

00:24:44,549 --> 00:24:51,809
time it runs for is your gigabyte

00:24:47,010 --> 00:24:54,809
seconds 400,000 gigabyte seconds is

00:24:51,809 --> 00:24:56,429
quite a lot but they round up all your

00:24:54,809 --> 00:25:00,330
time usage to the nearest hundred

00:24:56,429 --> 00:25:02,789
milliseconds so for example the 100

00:25:00,330 --> 00:25:05,490
millisecond or the 40 odd millisecond

00:25:02,789 --> 00:25:06,690
requests that you make that takes 128

00:25:05,490 --> 00:25:09,690
mega RAM because that's the least you

00:25:06,690 --> 00:25:12,240
can use has just cost you 12.8 megabyte

00:25:09,690 --> 00:25:14,309
seconds it's going to take you a long

00:25:12,240 --> 00:25:17,700
time to rack up 400 gigabytes seconds

00:25:14,309 --> 00:25:19,139
and it keeps going forever this is not a

00:25:17,700 --> 00:25:20,820
12-month thing like some of the other

00:25:19,139 --> 00:25:23,750
free tier stuff after that it cost you

00:25:20,820 --> 00:25:29,720
twenty cents per million requests is

00:25:23,750 --> 00:25:33,860
cheap and point stuff all per gigabyte

00:25:29,720 --> 00:25:36,929
second after that I mean that's that's

00:25:33,860 --> 00:25:38,639
absurd so that's not really gonna buy

00:25:36,929 --> 00:25:41,940
the time that starts costing you

00:25:38,639 --> 00:25:46,919
something you're not going to care i

00:25:41,940 --> 00:25:48,570
suspect api gateway the own you only pay

00:25:46,919 --> 00:25:51,029
this is a little poke from their

00:25:48,570 --> 00:25:53,490
payments age you only pay when you use

00:25:51,029 --> 00:25:54,990
the api's when they're in use so when

00:25:53,490 --> 00:25:58,799
something's actually calling it there's

00:25:54,990 --> 00:26:00,179
no minimum fee no commitments pay for

00:25:58,799 --> 00:26:01,830
the number of calls and the amount of

00:26:00,179 --> 00:26:05,490
data transferred and you get a million

00:26:01,830 --> 00:26:08,220
per month free for the first 12 months

00:26:05,490 --> 00:26:11,159
three dollars 50 per million api that

00:26:08,220 --> 00:26:13,470
calls received and nine cents per

00:26:11,159 --> 00:26:18,830
gigabyte for the first 10 terabytes of

00:26:13,470 --> 00:26:18,830
data so really wouldn't worry about it

00:26:18,919 --> 00:26:28,380
yeah any questions okay we'll only have

00:26:25,860 --> 00:26:32,090
time for one or two so

00:26:28,380 --> 00:26:36,780
um what about this thing called zapper

00:26:32,090 --> 00:26:39,600
right well yes I should talk about that

00:26:36,780 --> 00:26:42,720
there is zapper and there is chalice so

00:26:39,600 --> 00:26:44,970
two mobs one inside AWS one outside have

00:26:42,720 --> 00:26:46,470
gone and said hey we can do this we can

00:26:44,970 --> 00:26:49,310
make it happy for other Python people

00:26:46,470 --> 00:26:52,380
zapper is a solution for publishing

00:26:49,310 --> 00:26:54,300
whiskey apps through this and it

00:26:52,380 --> 00:26:56,220
automates an awful lot of it chalice

00:26:54,300 --> 00:27:00,590
gives you a much more low-level flask

00:26:56,220 --> 00:27:04,560
like solution and again you just say

00:27:00,590 --> 00:27:06,240
deploy my app and up it goes and creates

00:27:04,560 --> 00:27:08,100
it all and pushes it and does all the

00:27:06,240 --> 00:27:10,770
authorization and everything and makes

00:27:08,100 --> 00:27:12,720
it very easy the problem that all of

00:27:10,770 --> 00:27:14,430
these solutions suffer from is that if

00:27:12,720 --> 00:27:17,010
you leave it alone for a while your

00:27:14,430 --> 00:27:18,420
lambda app gets spun down and it has to

00:27:17,010 --> 00:27:19,680
be spun up again which isn't such a

00:27:18,420 --> 00:27:22,410
problem when you've got tiny little

00:27:19,680 --> 00:27:25,800
functions which mine I've measured at

00:27:22,410 --> 00:27:27,660
taking maybe two seconds to spin up but

00:27:25,800 --> 00:27:30,560
if that matters to you you can set up a

00:27:27,660 --> 00:27:32,850
periodic task to go and refresh and

00:27:30,560 --> 00:27:37,740
request it every five minutes to make

00:27:32,850 --> 00:27:39,720
sure it's hot any other questions please

00:27:37,740 --> 00:27:41,340
please tell me there's some way to set

00:27:39,720 --> 00:27:45,450
this thing up without all this tedious

00:27:41,340 --> 00:27:47,370
web yes nonsense yes there is as I

00:27:45,450 --> 00:27:49,230
saying you can write it up in swagger

00:27:47,370 --> 00:27:51,630
they cover it quite deal in fact the

00:27:49,230 --> 00:27:54,060
documentation almost it you know really

00:27:51,630 --> 00:27:55,530
heavily relies on using swagger to

00:27:54,060 --> 00:27:57,180
describe how to bind all this stuff

00:27:55,530 --> 00:27:59,940
together and do it instead of doing it

00:27:57,180 --> 00:28:02,790
manually so you can if you're managing

00:27:59,940 --> 00:28:04,580
stuff on a larger scale just describe it

00:28:02,790 --> 00:28:07,980
and so I going to go that's what I want

00:28:04,580 --> 00:28:09,510
and I'm planning on moving a lot more of

00:28:07,980 --> 00:28:12,480
my stuff over to doing that as well but

00:28:09,510 --> 00:28:15,390
I haven't got to that stage yet more

00:28:12,480 --> 00:28:18,620
questions Omar did to play around with

00:28:15,390 --> 00:28:22,350
deploying de la pie that framework on

00:28:18,620 --> 00:28:24,750
lambda and getting that to work sorry

00:28:22,350 --> 00:28:27,240
with playing with dollar back from work

00:28:24,750 --> 00:28:29,640
as in whatever web framework you want to

00:28:27,240 --> 00:28:31,770
use in the from the patent world I did

00:28:29,640 --> 00:28:33,690
try out using jealous and it was very

00:28:31,770 --> 00:28:36,330
easy but very immature at the time I was

00:28:33,690 --> 00:28:37,650
using it they've improved it but it's

00:28:36,330 --> 00:28:39,810
still getting there it's still very

00:28:37,650 --> 00:28:41,309
young I haven't tried anything further

00:28:39,810 --> 00:28:45,779
if I wanted to do anything for

00:28:41,309 --> 00:28:47,309
would probably have to use them and I

00:28:45,779 --> 00:28:51,450
think we'll just take one last question

00:28:47,309 --> 00:28:53,340
yeah are you able to adjust the request

00:28:51,450 --> 00:28:55,980
coming in vile and to return different

00:28:53,340 --> 00:28:58,620
objects if it's a mobile if it's a mac

00:28:55,980 --> 00:29:04,999
if its windows and so on mobile desktop

00:28:58,620 --> 00:29:07,169
in particular um I haven't looked to see

00:29:04,999 --> 00:29:08,970
how much information I mean you could

00:29:07,169 --> 00:29:11,879
pass in the headers and scan them to see

00:29:08,970 --> 00:29:13,440
what sort of device you're getting the

00:29:11,879 --> 00:29:17,039
same know you usually wouldn't then you

00:29:13,440 --> 00:29:18,659
just respond respond accordingly you get

00:29:17,039 --> 00:29:20,279
and you can get all the headers that

00:29:18,659 --> 00:29:22,830
you've you've got so if that's what you

00:29:20,279 --> 00:29:24,389
want to check I'm not sure how else you

00:29:22,830 --> 00:29:28,679
might want to check what done okay I

00:29:24,389 --> 00:29:30,809
think this is the last question yeah

00:29:28,679 --> 00:29:33,210
kind of auditor commenters although I

00:29:30,809 --> 00:29:36,090
know we need to ask a question it starts

00:29:33,210 --> 00:29:37,649
with what or why or how but um I just

00:29:36,090 --> 00:29:40,289
can you maybe just comment on

00:29:37,649 --> 00:29:41,580
persistence and storing state in these

00:29:40,289 --> 00:29:43,230
things because i know that's a bit of an

00:29:41,580 --> 00:29:46,440
issue and how some of the frameworks try

00:29:43,230 --> 00:29:50,519
and work around that all right well

00:29:46,440 --> 00:29:53,840
since you have access to all of AWS you

00:29:50,519 --> 00:29:58,580
have access to all of their databases

00:29:53,840 --> 00:30:01,649
I've been using RDS at sorry dynamo DB

00:29:58,580 --> 00:30:05,610
which is their documents stored key

00:30:01,649 --> 00:30:08,490
value store thing and it's super fast

00:30:05,610 --> 00:30:11,429
now boat 03 is already installed for you

00:30:08,490 --> 00:30:15,090
so you can get that and get access to

00:30:11,429 --> 00:30:16,559
all of their other stuff via that so

00:30:15,090 --> 00:30:18,029
yeah if you need persistence they've got

00:30:16,559 --> 00:30:21,929
databases they'll manage them for you

00:30:18,029 --> 00:30:26,460
and boto DynamoDB is free for the first

00:30:21,929 --> 00:30:28,740
25 gigs and some stupid number of

00:30:26,460 --> 00:30:31,799
requests as usual so you're not a

00:30:28,740 --> 00:30:33,980
problem okay can we think Curtis for

00:30:31,799 --> 00:30:33,980

YouTube URL: https://www.youtube.com/watch?v=HBQZ8aOO0G8


