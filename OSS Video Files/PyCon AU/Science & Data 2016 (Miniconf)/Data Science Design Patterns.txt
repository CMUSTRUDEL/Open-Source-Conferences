Title: Data Science Design Patterns
Publication date: 2016-08-16
Playlist: Science & Data 2016 (Miniconf)
Description: 
	Tennessee Leeuwenburg
https://2016.pycon-au.org/schedule/78/view_talk
Most 'data science' projects fall into just a few well-understood design patterns. This talk de-mystifies what those patterns are, how to use them practically, and how to get to grips with your data. We'll a look at how to understand the input/output structure of the models, how to design a reasonable 'experiment', and how to get started. We'll look at getting to grips with problems by simple data sets that can fit entirely on-screen, designing the basic 'form' of the machine before levelling up to bigger data and badder algorithms.

All of this will be shown using Python tools, libraries and running code.
Captions: 
	00:00:00,140 --> 00:00:07,350
okay without further ado we'll get

00:00:03,600 --> 00:00:09,599
started so first up we have Tennessee

00:00:07,350 --> 00:00:11,730
Loewenberg Tennessee's been extremely

00:00:09,599 --> 00:00:18,330
active in the Melbourne Pythian user

00:00:11,730 --> 00:00:20,550
group and is a scientist data scientist

00:00:18,330 --> 00:00:23,699
software developer manager who works at

00:00:20,550 --> 00:00:25,769
the Bureau of Meteorology and his talk

00:00:23,699 --> 00:00:28,320
today as you can see is data science

00:00:25,769 --> 00:00:36,390
design patterns and without further ado

00:00:28,320 --> 00:00:40,260
Tennessee thanks very much for that

00:00:36,390 --> 00:00:43,320
Graham that's a lovely introduction

00:00:40,260 --> 00:00:45,149
I always feel a bit uncertain about how

00:00:43,320 --> 00:00:47,160
to how to approach a presentation I feel

00:00:45,149 --> 00:00:49,860
like I'm I have to pick somehow the

00:00:47,160 --> 00:00:52,230
middle of a very long conversation and

00:00:49,860 --> 00:00:54,930
try to pick an endpoint within 25

00:00:52,230 --> 00:00:57,329
minutes that make sense so what I've

00:00:54,930 --> 00:01:00,239
I've done is is more or less just start

00:00:57,329 --> 00:01:03,480
and and we get where we get in terms of

00:01:00,239 --> 00:01:05,400
the content and I've got less and less

00:01:03,480 --> 00:01:08,640
interested in lecture style

00:01:05,400 --> 00:01:10,340
presentations as times gone by so anyone

00:01:08,640 --> 00:01:13,200
who wants to enter into quite a

00:01:10,340 --> 00:01:15,750
conversation debate discussion and such

00:01:13,200 --> 00:01:20,280
like as far as I'm concerned that's all

00:01:15,750 --> 00:01:23,490
completely fine so probably to initiate

00:01:20,280 --> 00:01:26,520
that up I've got a slide in two slides

00:01:23,490 --> 00:01:29,070
time where I put down what I think it is

00:01:26,520 --> 00:01:31,619
that you'd like to hear about but I'd

00:01:29,070 --> 00:01:33,360
like to know if I'm right so I'd like to

00:01:31,619 --> 00:01:35,040
know does anyone have you happen to tell

00:01:33,360 --> 00:01:39,200
me what they think I'm gonna talk about

00:01:35,040 --> 00:01:39,200
when I say a data science design pattern

00:01:39,890 --> 00:01:44,340
no great I've got a roomful of people

00:01:42,210 --> 00:01:47,759
that aren't here to think I can I can

00:01:44,340 --> 00:01:49,740
now proceed just fine okay so no one no

00:01:47,759 --> 00:01:52,049
one's gonna question it it's great okay

00:01:49,740 --> 00:01:55,140
so about me I was a coder once and I

00:01:52,049 --> 00:01:57,420
still tinker actively I've seen a lot of

00:01:55,140 --> 00:01:59,969
applications and systems including data

00:01:57,420 --> 00:02:02,040
science he wants and that's that's the

00:01:59,969 --> 00:02:03,810
little nugget I picked up on like what

00:02:02,040 --> 00:02:06,420
it is that I could possibly have to say

00:02:03,810 --> 00:02:07,950
that hasn't been said on the internet

00:02:06,420 --> 00:02:11,970
enough times that you were all either

00:02:07,950 --> 00:02:14,010
more expert in me than me and all could

00:02:11,970 --> 00:02:15,930
simply read for yourself elsewhere

00:02:14,010 --> 00:02:17,489
and I think what it is is that I've seen

00:02:15,930 --> 00:02:19,680
them in a number of contexts the

00:02:17,489 --> 00:02:24,030
research context the operational context

00:02:19,680 --> 00:02:25,769
the two-day hackathon context and I feel

00:02:24,030 --> 00:02:28,409
like I don't know whether I've learned

00:02:25,769 --> 00:02:30,540
anything exactly but I've experienced a

00:02:28,409 --> 00:02:32,370
fair amount of the pain and I can tell

00:02:30,540 --> 00:02:37,200
you what that is so that that's where

00:02:32,370 --> 00:02:38,970
I'm going to concentrate my talk so this

00:02:37,200 --> 00:02:40,410
is my slide that I was going to talk

00:02:38,970 --> 00:02:42,239
about before in terms of what I think

00:02:40,410 --> 00:02:44,670
this audience is here to talk here to

00:02:42,239 --> 00:02:47,970
here to here so I think we're all

00:02:44,670 --> 00:02:50,340
interested in Python I'm somewhere in

00:02:47,970 --> 00:02:52,170
the middle between solving data science

00:02:50,340 --> 00:02:53,700
problems and making software to deliver

00:02:52,170 --> 00:02:55,859
solutions so that's kind of where I said

00:02:53,700 --> 00:02:58,049
is kind of squarely in the middle and my

00:02:55,859 --> 00:03:01,609
great fear is that the entire audience

00:02:58,049 --> 00:03:03,930
is either entirely demographic or 50%

00:03:01,609 --> 00:03:06,359
non-intersecting demographic one

00:03:03,930 --> 00:03:08,370
demographic - and what I have to do is

00:03:06,359 --> 00:03:10,680
give two presentations to two separate

00:03:08,370 --> 00:03:12,810
audiences in the same room so that's my

00:03:10,680 --> 00:03:14,160
that's my working theory with the rest

00:03:12,810 --> 00:03:17,099
of this presentation is that I actually

00:03:14,160 --> 00:03:18,959
have two presentations and if you could

00:03:17,099 --> 00:03:21,269
all kindly just collect yourselves into

00:03:18,959 --> 00:03:24,359
that half of the room we'll all discover

00:03:21,269 --> 00:03:26,190
whether I'm right but we've already

00:03:24,359 --> 00:03:28,200
established that you're not here to

00:03:26,190 --> 00:03:30,989
think so it's all good okay so what do

00:03:28,200 --> 00:03:33,450
design patterns do for you so this is

00:03:30,989 --> 00:03:36,480
probably the main this is for the data

00:03:33,450 --> 00:03:37,769
science this is for demographic - what

00:03:36,480 --> 00:03:40,859
is it what do they actually do for you

00:03:37,769 --> 00:03:43,919
so they do at least in theory once you

00:03:40,859 --> 00:03:47,130
know them make the work easier and for

00:03:43,919 --> 00:03:48,810
demographic one that also applies so the

00:03:47,130 --> 00:03:50,790
question is it either does that in the

00:03:48,810 --> 00:03:52,709
data science a bit solving the data

00:03:50,790 --> 00:03:55,470
science problem or in the software bit

00:03:52,709 --> 00:03:57,209
or conceivably both at the same time so

00:03:55,470 --> 00:03:59,700
it'll allow you to turn your data

00:03:57,209 --> 00:04:01,560
science into software and make your

00:03:59,700 --> 00:04:03,419
software more standard so it'll allow

00:04:01,560 --> 00:04:04,799
you to integrate and make tools that

00:04:03,419 --> 00:04:07,019
everyone can just pick up and use

00:04:04,799 --> 00:04:09,599
everywhere easily for those in

00:04:07,019 --> 00:04:12,120
demographic - it assists with giving you

00:04:09,599 --> 00:04:13,980
a starting point and making making more

00:04:12,120 --> 00:04:17,190
rapid progress in your problem-solving

00:04:13,980 --> 00:04:18,810
and making software or experimental code

00:04:17,190 --> 00:04:22,049
that's going to still make sense to you

00:04:18,810 --> 00:04:23,940
in some time to come so let's start with

00:04:22,049 --> 00:04:26,280
a bit of a bit of a formal definition so

00:04:23,940 --> 00:04:26,880
software engineers get to own that own

00:04:26,280 --> 00:04:28,230
the word

00:04:26,880 --> 00:04:31,230
in pattern and I think that they still

00:04:28,230 --> 00:04:33,510
manage to claim that that definition so

00:04:31,230 --> 00:04:35,430
it's a a general repeatable solution for

00:04:33,510 --> 00:04:38,310
commonly occurring problem in software

00:04:35,430 --> 00:04:40,380
design the design pattern isn't a

00:04:38,310 --> 00:04:43,440
finished design or even in an

00:04:40,380 --> 00:04:46,680
implementation it's more just this kind

00:04:43,440 --> 00:04:48,090
of thought so no one really seems to

00:04:46,680 --> 00:04:49,920
have been able to nail it down a little

00:04:48,090 --> 00:04:52,020
bit harder for that then that's so I

00:04:49,920 --> 00:04:54,450
decided to Dijon it for you it's when

00:04:52,020 --> 00:04:59,880
some code is so great that you give it a

00:04:54,450 --> 00:05:01,500
name okay so why do we use use that well

00:04:59,880 --> 00:05:03,120
actually you know what it kind of isn't

00:05:01,500 --> 00:05:05,700
really when the codes so great it is

00:05:03,120 --> 00:05:07,020
when the design is so great and and the

00:05:05,700 --> 00:05:09,420
reason you want to concentrate on the

00:05:07,020 --> 00:05:10,890
design more than you code the code is

00:05:09,420 --> 00:05:12,180
because we all want to be able to talk

00:05:10,890 --> 00:05:13,850
to each other and some of us use

00:05:12,180 --> 00:05:16,380
different languages or different

00:05:13,850 --> 00:05:18,000
implementations or we've got different

00:05:16,380 --> 00:05:19,710
experiments and we need to relate them

00:05:18,000 --> 00:05:22,050
to one another and the clothes the best

00:05:19,710 --> 00:05:23,610
thing we can do is try to reduce the

00:05:22,050 --> 00:05:25,920
degree of confusion amongst all of

00:05:23,610 --> 00:05:28,530
ourselves so if you're working in an

00:05:25,920 --> 00:05:30,240
entirely isolated experiment you'll see

00:05:28,530 --> 00:05:32,340
design patterns mainly through the tools

00:05:30,240 --> 00:05:33,720
and libraries that we use if you're

00:05:32,340 --> 00:05:35,280
trying to convert someone else's

00:05:33,720 --> 00:05:36,690
experiment into a working piece of

00:05:35,280 --> 00:05:38,190
software you'll be very grateful if

00:05:36,690 --> 00:05:39,480
they've taken the trouble to understand

00:05:38,190 --> 00:05:41,610
some of the design patterns of the

00:05:39,480 --> 00:05:43,830
software world and if you're wrangling a

00:05:41,610 --> 00:05:45,300
portfolio of applications you will

00:05:43,830 --> 00:05:48,840
discover that they all have their own

00:05:45,300 --> 00:05:50,550
unique and beautiful view on how

00:05:48,840 --> 00:05:53,160
software should be built constructed and

00:05:50,550 --> 00:05:54,930
interoperate so we use them to make more

00:05:53,160 --> 00:05:57,720
readable more comprehensible code so

00:05:54,930 --> 00:06:00,660
it's about good code to see our problems

00:05:57,720 --> 00:06:04,050
in a new way or from a higher level and

00:06:00,660 --> 00:06:06,450
I think I think the language thing is

00:06:04,050 --> 00:06:08,970
probably the main one and that's a human

00:06:06,450 --> 00:06:11,010
to human talking but it's also like the

00:06:08,970 --> 00:06:13,410
implementer from three years ago to the

00:06:11,010 --> 00:06:17,370
fresh developer now kind of conversation

00:06:13,410 --> 00:06:19,830
both of those things go on so I really

00:06:17,370 --> 00:06:22,430
wanted to get in and make this a bit

00:06:19,830 --> 00:06:27,240
exciting so I thought let's play a game

00:06:22,430 --> 00:06:29,610
who wants to play a game okay hand

00:06:27,240 --> 00:06:31,050
raising okay so I can use hand raising

00:06:29,610 --> 00:06:33,100
as an input/output mechanism to

00:06:31,050 --> 00:06:36,220
communicate with my audience

00:06:33,100 --> 00:06:39,160
okay so sticking to a strict binary

00:06:36,220 --> 00:06:40,660
language of communication here hands up

00:06:39,160 --> 00:06:45,520
if anyone thinks there's a design

00:06:40,660 --> 00:06:47,259
pattern in this that they recognize to

00:06:45,520 --> 00:06:48,910
hate so we've got some people so let's

00:06:47,259 --> 00:06:50,470
work out if it's the same one that I

00:06:48,910 --> 00:06:53,259
thought was in there so I think the

00:06:50,470 --> 00:06:56,410
design pattern in here is a builder

00:06:53,259 --> 00:06:58,570
design pattern where you use a function

00:06:56,410 --> 00:07:00,729
to return an object rather than a

00:06:58,570 --> 00:07:02,770
constructor anyone up

00:07:00,729 --> 00:07:04,419
did we have any did anyone choose that

00:07:02,770 --> 00:07:08,530
particular design pattern for what they

00:07:04,419 --> 00:07:10,180
saw no what what did anyone else pick

00:07:08,530 --> 00:07:12,690
I'm sure there's more than one answer

00:07:10,180 --> 00:07:16,000
there's always more than one answer

00:07:12,690 --> 00:07:24,389
no hand-raising it is okay is this good

00:07:16,000 --> 00:07:24,389
card I agree I think this is bad code

00:07:25,080 --> 00:07:29,620
let's see if we think it's bad code for

00:07:27,639 --> 00:07:31,630
the same reason I actually don't think

00:07:29,620 --> 00:07:33,190
it's bad code because it's called do

00:07:31,630 --> 00:07:35,169
magic in the middle I actually think

00:07:33,190 --> 00:07:37,449
there's a different reason that it's bad

00:07:35,169 --> 00:07:39,669
code a load that is possibly also bad I

00:07:37,449 --> 00:07:41,919
think it's bad code because you're

00:07:39,669 --> 00:07:44,139
reading from something and then you're

00:07:41,919 --> 00:07:46,870
not writing to it and you know what this

00:07:44,139 --> 00:07:48,940
does is that every time I use this

00:07:46,870 --> 00:07:50,979
library I can't remember which one's

00:07:48,940 --> 00:07:53,199
from and to and which ones read and

00:07:50,979 --> 00:07:54,940
write and every single time I need to

00:07:53,199 --> 00:07:56,530
use pandas for the first time in two

00:07:54,940 --> 00:07:58,419
weeks I need to look at the

00:07:56,530 --> 00:08:01,389
documentation and it's annoying

00:07:58,419 --> 00:08:04,840
so that's not exactly a design pattern

00:08:01,389 --> 00:08:07,449
so the design pattern in there is the

00:08:04,840 --> 00:08:09,220
way the object is constructed so for

00:08:07,449 --> 00:08:11,740
people for whom the code that's going on

00:08:09,220 --> 00:08:13,570
is the piece of information that's in

00:08:11,740 --> 00:08:15,400
their head not the design not that not

00:08:13,570 --> 00:08:17,289
the data science not the fact that

00:08:15,400 --> 00:08:19,210
pandas is fantastic and a library full

00:08:17,289 --> 00:08:21,130
of wonderful tools that just do amazing

00:08:19,210 --> 00:08:22,479
things for you but the people are

00:08:21,130 --> 00:08:24,370
thinking about what's going on in the

00:08:22,479 --> 00:08:25,479
memory and the state of the program and

00:08:24,370 --> 00:08:26,800
how they're keeping track of their

00:08:25,479 --> 00:08:28,360
objects and making sure that

00:08:26,800 --> 00:08:31,690
everything's got integrity and memory

00:08:28,360 --> 00:08:33,310
the issue is is the there's no

00:08:31,690 --> 00:08:35,289
constructor here what we're doing is

00:08:33,310 --> 00:08:37,120
reading CSV we're calling the pandas

00:08:35,289 --> 00:08:38,860
general module it's under the hood

00:08:37,120 --> 00:08:40,120
creating something that's a constructor

00:08:38,860 --> 00:08:41,950
we don't know what arguments that

00:08:40,120 --> 00:08:43,779
constructor has we don't necessarily

00:08:41,950 --> 00:08:46,329
know without looking for looking through

00:08:43,779 --> 00:08:47,050
the docs exactly what comes back just in

00:08:46,329 --> 00:08:49,300
it

00:08:47,050 --> 00:08:51,100
so we might and then and then there it

00:08:49,300 --> 00:08:53,019
is and then when we write it out again

00:08:51,100 --> 00:08:54,730
instead of doing it again through the

00:08:53,019 --> 00:08:56,170
same idiom which is through the pandas

00:08:54,730 --> 00:08:58,509
library we're now doing it off the

00:08:56,170 --> 00:09:02,560
object so for people who are highly

00:08:58,509 --> 00:09:04,300
focused on the semantics of the API this

00:09:02,560 --> 00:09:05,769
would be like super confusing and the

00:09:04,300 --> 00:09:07,920
only reason it's not confusing to

00:09:05,769 --> 00:09:10,689
everyone here is because pandas is

00:09:07,920 --> 00:09:11,139
fantastic and we all know exactly how it

00:09:10,689 --> 00:09:15,060
works

00:09:11,139 --> 00:09:17,620
okay so let's pick another one all right

00:09:15,060 --> 00:09:22,480
hands up who who sees a design pattern

00:09:17,620 --> 00:09:24,220
here know you're all we're all scared by

00:09:22,480 --> 00:09:27,220
the last example where I pick where I

00:09:24,220 --> 00:09:28,990
picked a different one so okay so I see

00:09:27,220 --> 00:09:32,139
a design pattern here I thought the one

00:09:28,990 --> 00:09:33,610
I see is a pipeline so what we're going

00:09:32,139 --> 00:09:36,250
here is we've got this this thing called

00:09:33,610 --> 00:09:38,019
a model and it's this sequential thing

00:09:36,250 --> 00:09:39,310
and the first thing happens and the

00:09:38,019 --> 00:09:41,050
second thing happens and the third thing

00:09:39,310 --> 00:09:42,790
happens and the four things happens this

00:09:41,050 --> 00:09:45,339
is effectively the same thing as a kind

00:09:42,790 --> 00:09:47,050
of like a a UNIX pipe philosophy what

00:09:45,339 --> 00:09:49,300
we're doing is declaring a one-way work

00:09:47,050 --> 00:09:50,829
flow so we kind of we kind of get the

00:09:49,300 --> 00:09:51,970
impression from from what's going on

00:09:50,829 --> 00:09:53,470
here that you know because it's

00:09:51,970 --> 00:09:55,389
sequential nature there's probably not a

00:09:53,470 --> 00:09:57,310
whole lot of you know backwards data

00:09:55,389 --> 00:09:59,560
flow I mean to some extent it's a neural

00:09:57,310 --> 00:10:01,630
network and there will be but what we're

00:09:59,560 --> 00:10:04,120
talking about is the way we construct

00:10:01,630 --> 00:10:06,579
what we've got in memory is this linear

00:10:04,120 --> 00:10:08,889
concept there's a data pipeline we're

00:10:06,579 --> 00:10:10,240
trying to get towards an outcome and so

00:10:08,889 --> 00:10:12,970
that's the design pattern that's going

00:10:10,240 --> 00:10:16,899
on here so this is where by good fortune

00:10:12,970 --> 00:10:18,519
or clever design this kind of design

00:10:16,899 --> 00:10:19,750
pattern kind of instantly makes sense

00:10:18,519 --> 00:10:21,639
you don't really have to think too hard

00:10:19,750 --> 00:10:23,110
about it you understand that you know

00:10:21,639 --> 00:10:24,579
the data hits the model and the first

00:10:23,110 --> 00:10:26,439
thing that happens is there's this dense

00:10:24,579 --> 00:10:28,149
layer that the data gets fed into and

00:10:26,439 --> 00:10:29,800
then that then this activation thing

00:10:28,149 --> 00:10:32,019
occurs afterwards and the semantics are

00:10:29,800 --> 00:10:33,939
really pretty clear and using terms like

00:10:32,019 --> 00:10:36,519
sequential to call out the nature of the

00:10:33,939 --> 00:10:38,170
of the calling function helps us

00:10:36,519 --> 00:10:40,750
understand without even really having to

00:10:38,170 --> 00:10:43,769
think about it too hard exactly what's

00:10:40,750 --> 00:10:49,470
going on so I like that particular code

00:10:43,769 --> 00:10:53,470
okay all right hands up who can see a

00:10:49,470 --> 00:10:53,829
design pattern in here I'll give you a

00:10:53,470 --> 00:10:58,240
hint

00:10:53,829 --> 00:11:00,370
it's inside the big gray box okay so so

00:10:58,240 --> 00:11:02,800
one person before the big gray box idea

00:11:00,370 --> 00:11:04,630
to fight a design pattern so again let's

00:11:02,800 --> 00:11:07,390
play the game of picking did you pick

00:11:04,630 --> 00:11:09,730
the same one that I picked so the design

00:11:07,390 --> 00:11:12,040
pattern that I picked here was the

00:11:09,730 --> 00:11:14,529
strategy pattern so essentially what's

00:11:12,040 --> 00:11:16,960
going on here is this this library here

00:11:14,529 --> 00:11:19,630
is able to make different choices on the

00:11:16,960 --> 00:11:22,480
fly through an automated pro pipeline

00:11:19,630 --> 00:11:25,060
about what's actually going on here so

00:11:22,480 --> 00:11:27,760
it may choose for example a different

00:11:25,060 --> 00:11:29,890
model modeling algorithm tubes it may

00:11:27,760 --> 00:11:34,020
choose a random forest one day or a

00:11:29,890 --> 00:11:36,250
neural network the next or a you know

00:11:34,020 --> 00:11:38,980
state vector machine the next or

00:11:36,250 --> 00:11:40,390
something of that nature it may walk

00:11:38,980 --> 00:11:42,970
through different parameterization

00:11:40,390 --> 00:11:44,740
schemes automatically and so what that's

00:11:42,970 --> 00:11:46,870
doing is it's giving the giving the

00:11:44,740 --> 00:11:48,970
computer the ability to make its own

00:11:46,870 --> 00:11:51,430
decisions about how to even process

00:11:48,970 --> 00:11:53,110
what's going on on the fly and that's

00:11:51,430 --> 00:11:58,480
generally referred to as the strategy

00:11:53,110 --> 00:12:00,490
pattern so highly doubt that anyone in

00:11:58,480 --> 00:12:02,740
particular when writing these things in

00:12:00,490 --> 00:12:05,500
the first place started with a design

00:12:02,740 --> 00:12:07,209
patterns book I'm sure that this is more

00:12:05,500 --> 00:12:09,220
the result of just generalized thinking

00:12:07,209 --> 00:12:11,350
about software over time but what it

00:12:09,220 --> 00:12:13,600
means is is that when we get these like

00:12:11,350 --> 00:12:15,820
fantastic libraries they're more likely

00:12:13,600 --> 00:12:18,100
to interrupt interoperate or be able to

00:12:15,820 --> 00:12:19,510
be adapted to one another if we can

00:12:18,100 --> 00:12:21,160
understand the design patterns and

00:12:19,510 --> 00:12:25,089
understand the thinking of how the the

00:12:21,160 --> 00:12:27,250
software get gets put together and this

00:12:25,089 --> 00:12:29,680
is also a really interesting library so

00:12:27,250 --> 00:12:31,779
I don't know whether for anyone who's a

00:12:29,680 --> 00:12:34,260
bit of a machine learning tinkerer this

00:12:31,779 --> 00:12:38,380
thing called teapot was produced by

00:12:34,260 --> 00:12:40,930
Randy Olson effectively it's the the

00:12:38,380 --> 00:12:43,300
unthinking engineers approach to finding

00:12:40,930 --> 00:12:45,279
a data science solution so you can you

00:12:43,300 --> 00:12:46,900
can use this to do effectively not

00:12:45,279 --> 00:12:49,450
merely a grid search of your parameter

00:12:46,900 --> 00:12:53,050
space but a it also allows you to choose

00:12:49,450 --> 00:12:54,790
different models and optimize according

00:12:53,050 --> 00:12:56,290
to effectively a genetic algorithm

00:12:54,790 --> 00:12:58,690
approach I haven't used it personally

00:12:56,290 --> 00:13:02,230
but I've gone through the podcast and I

00:12:58,690 --> 00:13:05,110
think this could be well what he said is

00:13:02,230 --> 00:13:07,029
that it is an effective way for finding

00:13:05,110 --> 00:13:08,440
a useful starting point and I think that

00:13:07,029 --> 00:13:10,209
that's that's probably actually very

00:13:08,440 --> 00:13:12,190
true so it's one of the one of the

00:13:10,209 --> 00:13:14,070
things in my back pocket to pick up and

00:13:12,190 --> 00:13:17,350
and try one day

00:13:14,070 --> 00:13:20,770
so bonus question the difference between

00:13:17,350 --> 00:13:22,300
an idiom and a design pattern who thinks

00:13:20,770 --> 00:13:26,470
there isn't a difference between an

00:13:22,300 --> 00:13:28,210
idiom and a design pattern alright so if

00:13:26,470 --> 00:13:30,070
I take the compliment of zero a hundred

00:13:28,210 --> 00:13:31,990
percent of people think that these

00:13:30,070 --> 00:13:34,900
things are different okay so that's

00:13:31,990 --> 00:13:38,620
that's good you're all correct good good

00:13:34,900 --> 00:13:42,340
work okay so what do they have to do

00:13:38,620 --> 00:13:44,440
with each other do you think that the

00:13:42,340 --> 00:13:47,860
idiom has a relationship with a design

00:13:44,440 --> 00:13:50,580
pattern one yes

00:13:47,860 --> 00:13:53,680
- excellent brilliant you're both right

00:13:50,580 --> 00:13:56,380
998 percent of people were too lazy to

00:13:53,680 --> 00:14:01,210
raise their hands I hope I can draw the

00:13:56,380 --> 00:14:03,340
correct conclusion okay so look the

00:14:01,210 --> 00:14:06,700
fuzzy thing is is what they have to do

00:14:03,340 --> 00:14:08,140
with each other so if we go back to our

00:14:06,700 --> 00:14:09,820
definition we know they're not the same

00:14:08,140 --> 00:14:11,950
thing because the design pattern really

00:14:09,820 --> 00:14:15,760
says very clearly that it isn't about

00:14:11,950 --> 00:14:18,660
code and an idiom is really about the

00:14:15,760 --> 00:14:20,860
translation of a design pattern or

00:14:18,660 --> 00:14:23,050
whatever we happen to be thinking at the

00:14:20,860 --> 00:14:25,900
time one of the two into an

00:14:23,050 --> 00:14:27,130
implementation so insofar as they relate

00:14:25,900 --> 00:14:29,950
to each other it's the difference

00:14:27,130 --> 00:14:31,750
between more abstract conceptualization

00:14:29,950 --> 00:14:33,550
of what's happening and the

00:14:31,750 --> 00:14:35,080
implementation at hand and because the

00:14:33,550 --> 00:14:37,180
programming language affects the way

00:14:35,080 --> 00:14:38,950
that you can express things it affects

00:14:37,180 --> 00:14:40,780
the ways in which you realize the design

00:14:38,950 --> 00:14:43,690
pattern and to some degree whether you

00:14:40,780 --> 00:14:46,030
even need to - for example has natural

00:14:43,690 --> 00:14:47,890
language semantics for the singleton

00:14:46,030 --> 00:14:49,780
pattern which is the module there's only

00:14:47,890 --> 00:14:52,180
one thing in memory going on at once you

00:14:49,780 --> 00:14:54,040
change it it changes everywhere

00:14:52,180 --> 00:14:56,470
whereas other languages you may need to

00:14:54,040 --> 00:14:58,150
actually construct a class or construct

00:14:56,470 --> 00:15:00,850
implementation logic that provides that

00:14:58,150 --> 00:15:03,790
guarantee for you so what does Python

00:15:00,850 --> 00:15:05,950
have to tell us about good code so we've

00:15:03,790 --> 00:15:07,720
said that that design patterns are about

00:15:05,950 --> 00:15:09,520
good code and we've said idioms are

00:15:07,720 --> 00:15:11,980
about good code and we know pythons all

00:15:09,520 --> 00:15:13,390
about good code so python comes with a

00:15:11,980 --> 00:15:15,220
kind of a rule book and they don't

00:15:13,390 --> 00:15:17,920
bother talking about design patterns or

00:15:15,220 --> 00:15:20,380
idioms or any of that abstract malarkey

00:15:17,920 --> 00:15:23,190
that you get taught in a comp sy degree

00:15:20,380 --> 00:15:26,800
and never really use again potentially

00:15:23,190 --> 00:15:27,580
so it has this this sort of set of kind

00:15:26,800 --> 00:15:31,210
of prints

00:15:27,580 --> 00:15:33,400
pulse really and I don't really know

00:15:31,210 --> 00:15:35,940
exactly how this relates to either

00:15:33,400 --> 00:15:39,430
design patterns or implementations

00:15:35,940 --> 00:15:41,230
exactly a lot of it's a lot of its this

00:15:39,430 --> 00:15:43,540
beauty is in the eye of the beholder

00:15:41,230 --> 00:15:45,100
thought I mean we've there are plenty of

00:15:43,540 --> 00:15:46,900
talks out there that discuss what

00:15:45,100 --> 00:15:50,830
particular software engineers interpret

00:15:46,900 --> 00:15:53,830
interpret this as I think that what it

00:15:50,830 --> 00:15:57,820
tells us is how to translate thoughts

00:15:53,830 --> 00:15:59,110
into Python most effectively but it

00:15:57,820 --> 00:16:03,340
doesn't really tell us how we should

00:15:59,110 --> 00:16:07,870
design so I think a design can be

00:16:03,340 --> 00:16:09,670
beautiful or ugly I think that a design

00:16:07,870 --> 00:16:11,950
can be explicit in the sense of you

00:16:09,670 --> 00:16:14,050
actually write down what your design is

00:16:11,950 --> 00:16:15,430
separately from your implementation

00:16:14,050 --> 00:16:19,270
which is something I'm still struggling

00:16:15,430 --> 00:16:21,670
with I think that many of these concepts

00:16:19,270 --> 00:16:25,720
apply equally as much to the idea of

00:16:21,670 --> 00:16:26,950
design as they do to a language so I'd

00:16:25,720 --> 00:16:29,950
encourage you everyone to sort of think

00:16:26,950 --> 00:16:32,770
about it now well get into a bit more

00:16:29,950 --> 00:16:35,590
sort of data science aspects of this in

00:16:32,770 --> 00:16:38,350
just a minute but one of the things I

00:16:35,590 --> 00:16:40,750
struggled with with this whole talk was

00:16:38,350 --> 00:16:42,970
was kind of you know what's what's the

00:16:40,750 --> 00:16:44,860
pitch and and it goes back to some of

00:16:42,970 --> 00:16:47,710
these examples about things like like

00:16:44,860 --> 00:16:49,750
you know numpy everyone has picked numpy

00:16:47,710 --> 00:16:51,850
because it just works everywhere

00:16:49,750 --> 00:16:54,370
everyone's picked pandas because it's

00:16:51,850 --> 00:16:56,500
very powerful and it's got just enough

00:16:54,370 --> 00:16:57,790
numpy under the hood that you don't

00:16:56,500 --> 00:17:00,610
really have to change your worldview

00:16:57,790 --> 00:17:02,200
very often so we've got these design

00:17:00,610 --> 00:17:06,310
patterns of data science what are data

00:17:02,200 --> 00:17:08,199
Sciences design patterns and you know

00:17:06,310 --> 00:17:10,120
what are they how should we think about

00:17:08,199 --> 00:17:11,680
this in the domain of data science so

00:17:10,120 --> 00:17:13,330
here we're back on what I've just been

00:17:11,680 --> 00:17:14,709
waffling about all this demographic one

00:17:13,330 --> 00:17:16,839
computer science stuff now we're back

00:17:14,709 --> 00:17:19,270
into demographic to the data scientists

00:17:16,839 --> 00:17:21,790
in the room so these things are very

00:17:19,270 --> 00:17:23,380
likely to be highly familiar to many of

00:17:21,790 --> 00:17:26,650
the people in this room as the basic

00:17:23,380 --> 00:17:28,570
things that we work work from so when

00:17:26,650 --> 00:17:31,570
does design come into these concepts so

00:17:28,570 --> 00:17:34,350
the first thing I want to do is a bit of

00:17:31,570 --> 00:17:36,820
anchoring and just put this slide up

00:17:34,350 --> 00:17:39,160
because it's all about the data science

00:17:36,820 --> 00:17:39,970
domain space and then then I ask a few

00:17:39,160 --> 00:17:41,140
questions

00:17:39,970 --> 00:17:43,690
hypothetical quest

00:17:41,140 --> 00:17:45,250
using only hand raising required from

00:17:43,690 --> 00:17:49,299
small numbers of people in order to

00:17:45,250 --> 00:17:54,929
proceed with the Q&A session so this is

00:17:49,299 --> 00:17:56,860
what would be effectively some kind of

00:17:54,929 --> 00:17:58,870
description of the the general

00:17:56,860 --> 00:18:00,220
significant concepts involved in many

00:17:58,870 --> 00:18:01,929
data science problems so this would

00:18:00,220 --> 00:18:03,280
probably be where your head is at when

00:18:01,929 --> 00:18:04,690
someone asks you to implement a

00:18:03,280 --> 00:18:08,290
particular feature or solve a particular

00:18:04,690 --> 00:18:09,340
problem so here's a spot quiz so I

00:18:08,290 --> 00:18:11,049
thought well I'll come up with a

00:18:09,340 --> 00:18:15,070
hypothetical example and then talk about

00:18:11,049 --> 00:18:17,559
how we do work on an example like this

00:18:15,070 --> 00:18:19,330
and where does designing fit and where

00:18:17,559 --> 00:18:21,309
to design patterns fit and what can we

00:18:19,330 --> 00:18:24,400
do with them so hypothetical I'm a

00:18:21,309 --> 00:18:27,460
researcher I'm really not so I that I've

00:18:24,400 --> 00:18:29,440
started badly but if you can just just

00:18:27,460 --> 00:18:31,260
pause your disbelief for a moment and

00:18:29,440 --> 00:18:33,280
imagine that I'm a researcher on

00:18:31,260 --> 00:18:35,140
conversations just in general I'm

00:18:33,280 --> 00:18:36,850
researching conversations and I have a

00:18:35,140 --> 00:18:39,040
large body of text which includes

00:18:36,850 --> 00:18:40,809
conversations in it and I need to write

00:18:39,040 --> 00:18:42,850
some intelligent search and I need to be

00:18:40,809 --> 00:18:44,440
able to find things about conversations

00:18:42,850 --> 00:18:46,120
and I've got a bunch of Word documents

00:18:44,440 --> 00:18:48,760
because everyone knows that's the

00:18:46,120 --> 00:18:51,429
natural and true format for all dot or

00:18:48,760 --> 00:18:53,679
all documents and there's some photos in

00:18:51,429 --> 00:18:56,020
there sometimes you know just sometimes

00:18:53,679 --> 00:18:58,120
and they're not labeled so what I'd

00:18:56,020 --> 00:19:00,400
really like to do is is effectively just

00:18:58,120 --> 00:19:02,049
like Google over my word document and

00:19:00,400 --> 00:19:03,669
I'd really like it to just know about

00:19:02,049 --> 00:19:05,470
conversations and I'd like to be able to

00:19:03,669 --> 00:19:07,419
search on the semantics of who said what

00:19:05,470 --> 00:19:09,250
to whom and when and why and about what

00:19:07,419 --> 00:19:10,600
and sometimes people are talking to each

00:19:09,250 --> 00:19:12,520
other and sometimes they're talking to

00:19:10,600 --> 00:19:13,840
each other about other people and when

00:19:12,520 --> 00:19:15,370
they're talking about other people those

00:19:13,840 --> 00:19:18,429
other people of the topic and not the

00:19:15,370 --> 00:19:22,799
subject and such like so how do I do

00:19:18,429 --> 00:19:26,250
that so what's the first thing you do

00:19:22,799 --> 00:19:28,169
don't we all know this you google for it

00:19:26,250 --> 00:19:31,019
okay

00:19:28,169 --> 00:19:34,559
what is the second thing we do you

00:19:31,019 --> 00:19:36,989
google for how to do part of it okay so

00:19:34,559 --> 00:19:38,840
what's the third thing you do you look

00:19:36,989 --> 00:19:41,399
for libraries that already do it and

00:19:38,840 --> 00:19:42,989
then somewhere down there you go

00:19:41,399 --> 00:19:46,590
okay I think I can cobble together

00:19:42,989 --> 00:19:49,019
pieces of this so there's been very

00:19:46,590 --> 00:19:51,090
little design going on so far there's

00:19:49,019 --> 00:19:53,549
mainly been mainly been I don't know

00:19:51,090 --> 00:19:56,070
that kind of lost phase at the beginning

00:19:53,549 --> 00:19:57,929
I don't really know how to I don't they

00:19:56,070 --> 00:20:00,269
didn't teach me that in computer science

00:19:57,929 --> 00:20:03,059
but they should have it's everywhere

00:20:00,269 --> 00:20:04,679
okay so then we start growing a solution

00:20:03,059 --> 00:20:06,869
then at some point we start to

00:20:04,679 --> 00:20:09,330
understand how a problem domain and our

00:20:06,869 --> 00:20:11,249
software goals and the requirements and

00:20:09,330 --> 00:20:13,590
the libraries all kind of come together

00:20:11,249 --> 00:20:16,320
and we've got this sort of like mishmash

00:20:13,590 --> 00:20:18,269
of like so Jupiter notebooks and some

00:20:16,320 --> 00:20:19,889
code and some Word documents that are an

00:20:18,269 --> 00:20:22,379
incomplete data set because complete

00:20:19,889 --> 00:20:23,659
data sets are too big and some ideas and

00:20:22,379 --> 00:20:25,649
we need to start stitching it together

00:20:23,659 --> 00:20:27,090
so we need to work forwards and

00:20:25,649 --> 00:20:28,590
backwards through the business problem

00:20:27,090 --> 00:20:30,570
and understand the business rules and

00:20:28,590 --> 00:20:32,549
we've got to like model all of these

00:20:30,570 --> 00:20:34,409
things and come up with some ideas and

00:20:32,549 --> 00:20:36,090
come up with an experiment so what's the

00:20:34,409 --> 00:20:39,840
one design pattern that we all know

00:20:36,090 --> 00:20:41,609
about the adapter pattern that's what

00:20:39,840 --> 00:20:45,779
cobbling together things is called in

00:20:41,609 --> 00:20:47,789
computer standards so what what is an

00:20:45,779 --> 00:20:50,850
adapter pattern and how do you do it and

00:20:47,789 --> 00:20:53,220
why would you do it in an organized way

00:20:50,850 --> 00:20:55,440
rather than in a well I'm just gonna

00:20:53,220 --> 00:20:56,879
have this big sequential 500 line block

00:20:55,440 --> 00:20:59,029
of Python code where everything just

00:20:56,879 --> 00:21:01,080
sort of flows into each other so

00:20:59,029 --> 00:21:03,210
essentially what it does is it lets you

00:21:01,080 --> 00:21:05,249
hide all of your bad code the

00:21:03,210 --> 00:21:08,190
fundamental goal of the adapter pattern

00:21:05,249 --> 00:21:09,600
is to hide bad code in a library where

00:21:08,190 --> 00:21:11,850
people don't know that you've written it

00:21:09,600 --> 00:21:15,720
and bring the business logic to the for

00:21:11,850 --> 00:21:17,789
such as do magic so do magic is

00:21:15,720 --> 00:21:19,679
effectively like do all of the business

00:21:17,789 --> 00:21:22,470
logic and then you can write all of your

00:21:19,679 --> 00:21:24,989
methods like you know search between

00:21:22,470 --> 00:21:27,090
person a and person B and the fact that

00:21:24,989 --> 00:21:30,119
what you're doing is loading word Docs

00:21:27,090 --> 00:21:32,009
into a library using the clipboard to to

00:21:30,119 --> 00:21:34,169
extract from there and then paste it

00:21:32,009 --> 00:21:36,570
directly into a string IO and then feed

00:21:34,169 --> 00:21:40,090
that into numpy and initiate pad all of

00:21:36,570 --> 00:21:42,150
that is adapted and

00:21:40,090 --> 00:21:44,470
all of the business logic remains and

00:21:42,150 --> 00:21:45,940
almost no matter how terrible your

00:21:44,470 --> 00:21:48,039
implementation all of your software

00:21:45,940 --> 00:21:50,529
engineers will thank you because what

00:21:48,039 --> 00:21:54,309
your program is supposed to do is what's

00:21:50,529 --> 00:21:55,600
left okay and that's what the software

00:21:54,309 --> 00:21:58,059
engineer so now we go back to

00:21:55,600 --> 00:21:59,980
demographic one so you've managed to

00:21:58,059 --> 00:22:01,750
explain that that the adapter pattern

00:21:59,980 --> 00:22:03,490
has something to do with hiding away the

00:22:01,750 --> 00:22:05,440
horrible implementation details and

00:22:03,490 --> 00:22:07,419
concentrating on business logic and now

00:22:05,440 --> 00:22:09,490
your job is to make software out of this

00:22:07,419 --> 00:22:10,990
stuff and so whether we're that where

00:22:09,490 --> 00:22:11,860
the data side has been working forwards

00:22:10,990 --> 00:22:13,779
and backwards through the business

00:22:11,860 --> 00:22:14,500
problem your job becomes working

00:22:13,779 --> 00:22:17,140
sideways

00:22:14,500 --> 00:22:19,750
I need a GUI I need a web server I need

00:22:17,140 --> 00:22:20,799
a database because the local CSV files

00:22:19,750 --> 00:22:22,990
gotten out of hand

00:22:20,799 --> 00:22:26,649
actually I need three databases I'll

00:22:22,990 --> 00:22:28,330
wait now I need security oh so then you

00:22:26,649 --> 00:22:30,429
need Active Directory Integration and

00:22:28,330 --> 00:22:32,919
then then you're just lost forever so

00:22:30,429 --> 00:22:34,870
you need to know about how to construct

00:22:32,919 --> 00:22:36,429
the code in memory and the api's and

00:22:34,870 --> 00:22:38,289
start integrating with other systems so

00:22:36,429 --> 00:22:39,730
your interest is to get the data

00:22:38,289 --> 00:22:41,320
scientists to hide all of their

00:22:39,730 --> 00:22:43,510
implementation so that you can either re

00:22:41,320 --> 00:22:45,070
implement or ignore and be able to

00:22:43,510 --> 00:22:48,100
integrate more directly using common

00:22:45,070 --> 00:22:49,960
features and that's largely what numpy

00:22:48,100 --> 00:22:51,730
has done for the scientific community by

00:22:49,960 --> 00:22:55,799
providing a universal data encapsulation

00:22:51,730 --> 00:22:57,929
for everything now like I said before I

00:22:55,799 --> 00:23:00,520
don't really know how to end

00:22:57,929 --> 00:23:03,669
presentations so we've got to my last

00:23:00,520 --> 00:23:07,059
slide in the next slide and here it is

00:23:03,669 --> 00:23:08,649
so I don't know whether I've encouraged

00:23:07,059 --> 00:23:10,990
you to know more I don't really know if

00:23:08,649 --> 00:23:13,010
I had a point but I have run out of time

00:23:10,990 --> 00:23:37,910
and

00:23:13,010 --> 00:23:39,620
so thank you very much okay well thank

00:23:37,910 --> 00:23:41,720
you very much for that and I hope that

00:23:39,620 --> 00:23:44,510
the oh that's our hands already this is

00:23:41,720 --> 00:23:51,950
amazing yeah so I will hand over for

00:23:44,510 --> 00:23:53,450
questions all right it says the moment

00:23:51,950 --> 00:23:55,370
in my mind the prototypical design

00:23:53,450 --> 00:23:57,530
pattern is the scientists throw it over

00:23:55,370 --> 00:23:59,900
the fence at the computer scientists I

00:23:57,530 --> 00:24:02,120
just try and catch it and it sounds like

00:23:59,900 --> 00:24:03,530
the idea of design patterns itself is

00:24:02,120 --> 00:24:06,740
actually some sort of tunnel and a

00:24:03,530 --> 00:24:10,280
defense I think that's an organizational

00:24:06,740 --> 00:24:11,780
design pattern as well look broadly but

00:24:10,280 --> 00:24:13,820
the idea is that hopefully it gives you

00:24:11,780 --> 00:24:14,900
some common framework so that yeah I

00:24:13,820 --> 00:24:16,190
don't know maybe you're passing it to

00:24:14,900 --> 00:24:17,900
each other through a hole in the fence

00:24:16,190 --> 00:24:19,460
that's about the same size I'm not

00:24:17,900 --> 00:24:26,860
really sure how to carry the analogy

00:24:19,460 --> 00:24:28,970
much any other questions so one

00:24:26,860 --> 00:24:31,070
organizational design patterns that

00:24:28,970 --> 00:24:32,720
software developers and scientists

00:24:31,070 --> 00:24:35,330
working together are the things that

00:24:32,720 --> 00:24:37,570
you've seen work really well or things

00:24:35,330 --> 00:24:39,830
that fall down and should be avoided

00:24:37,570 --> 00:24:42,230
yeah it looks I have seen a bit of that

00:24:39,830 --> 00:24:45,560
in my time I think the thing that works

00:24:42,230 --> 00:24:48,080
the best is where you have one person

00:24:45,560 --> 00:24:50,720
responsible for effectively API design

00:24:48,080 --> 00:24:52,880
and identifying good code and giving it

00:24:50,720 --> 00:24:54,620
somewhere to live and another person on

00:24:52,880 --> 00:24:56,860
basically hacking around and Jupiter

00:24:54,620 --> 00:24:59,270
notebooks and doing implementations and

00:24:56,860 --> 00:25:01,610
but doing that in a pretty free-flowing

00:24:59,270 --> 00:25:04,250
fashion so that you know you have some

00:25:01,610 --> 00:25:07,790
conversation around it and that that

00:25:04,250 --> 00:25:09,500
seems to have worked okay having them

00:25:07,790 --> 00:25:12,290
all work in the same language is pretty

00:25:09,500 --> 00:25:13,760
important and pythons quite successful

00:25:12,290 --> 00:25:19,900
at allowing people to work in the same

00:25:13,760 --> 00:25:19,900
language yeah I think there's probably

00:25:28,980 --> 00:25:37,030
hi great presentation by the way you

00:25:33,190 --> 00:25:41,230
mentioned the adapt style of design as

00:25:37,030 --> 00:25:43,480
sort of like the basic one that most

00:25:41,230 --> 00:25:48,070
people do if they have like a deadline

00:25:43,480 --> 00:25:51,280
is there like types of design styles

00:25:48,070 --> 00:25:53,470
that are more efficient or people should

00:25:51,280 --> 00:25:56,410
start looking into yeah look that's

00:25:53,470 --> 00:25:58,290
that's a great question so for for an

00:25:56,410 --> 00:26:01,060
example of using the adapter pattern

00:25:58,290 --> 00:26:03,010
properly because python has a lot of

00:26:01,060 --> 00:26:05,290
support for that like you know context

00:26:03,010 --> 00:26:07,390
managers are a great example of how you

00:26:05,290 --> 00:26:09,390
can use the Python language semantics to

00:26:07,390 --> 00:26:12,190
implement one of these design patterns I

00:26:09,390 --> 00:26:15,400
start with that first YouTube video that

00:26:12,190 --> 00:26:17,820
illustrates the concept of focusing in

00:26:15,400 --> 00:26:21,430
on business rules and pushing away

00:26:17,820 --> 00:26:24,010
implementation logic really very well in

00:26:21,430 --> 00:26:26,620
terms of things where like you know kind

00:26:24,010 --> 00:26:28,720
of like how would you write a program to

00:26:26,620 --> 00:26:30,850
minimize the number of like newbie

00:26:28,720 --> 00:26:32,950
mistakes or a lot a common denominator

00:26:30,850 --> 00:26:35,080
that works for everyone or places to

00:26:32,950 --> 00:26:37,390
start I generally go with something

00:26:35,080 --> 00:26:39,370
fairly functional as a rule try to make

00:26:37,390 --> 00:26:42,220
your your calls as transactional as

00:26:39,370 --> 00:26:45,040
possible and even if you have a class or

00:26:42,220 --> 00:26:47,260
object structure within that try to

00:26:45,040 --> 00:26:49,120
adopt a functional style within it

00:26:47,260 --> 00:26:50,820
within it so try to avoid methods that

00:26:49,120 --> 00:26:53,050
have significant amounts of side-effects

00:26:50,820 --> 00:26:55,420
don't have them do too many things at

00:26:53,050 --> 00:26:58,120
once don't have them be too long and

00:26:55,420 --> 00:26:59,680
generally separate out the bits that are

00:26:58,120 --> 00:27:02,350
the business rules away from from the

00:26:59,680 --> 00:27:03,820
other stuff but the that functional

00:27:02,350 --> 00:27:07,600
approach will effectively make it much

00:27:03,820 --> 00:27:08,800
easier to test going forward and it also

00:27:07,600 --> 00:27:10,420
has this side effect where you'll

00:27:08,800 --> 00:27:12,550
suddenly discover that a lot of your

00:27:10,420 --> 00:27:14,380
methods actually don't need any of the

00:27:12,550 --> 00:27:16,660
class objects in order to do their work

00:27:14,380 --> 00:27:18,910
and so you can start moving them out of

00:27:16,660 --> 00:27:21,670
the class and then you suddenly realize

00:27:18,910 --> 00:27:23,650
that you know you can still use them

00:27:21,670 --> 00:27:25,360
from within the class but what you are

00:27:23,650 --> 00:27:27,910
thinking about as a complex object

00:27:25,360 --> 00:27:29,440
actually kind of falls away a bit and it

00:27:27,910 --> 00:27:31,240
can kind of reveal with the true nature

00:27:29,440 --> 00:27:36,070
of what you need in the class a little

00:27:31,240 --> 00:27:39,150
bit more easily are there any other

00:27:36,070 --> 00:27:39,150
questions for Tennessee

00:27:39,460 --> 00:27:47,690
no out of hands well we're back here at

00:27:45,080 --> 00:27:49,279
10 past for the next paper so if you

00:27:47,690 --> 00:27:51,909
would like to thank Tennessee again for

00:27:49,279 --> 00:27:51,909

YouTube URL: https://www.youtube.com/watch?v=toRpjZT-yQk


