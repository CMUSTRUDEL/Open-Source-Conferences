Title: Clustering of high-content screen images to discover off-target phenotypes by Juan Nunez-Iglesias
Publication date: 2014-08-11
Playlist: PyCon Australia 2014 Science & Data miniconf
Description: 
	PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:06,090 --> 00:00:13,650
hi everyone thanks for the opportunity

00:00:09,430 --> 00:00:17,320
to speak here so this presentation is

00:00:13,650 --> 00:00:20,050
based on that one and I tried to move it

00:00:17,320 --> 00:00:22,690
100% to the notebook and some things

00:00:20,050 --> 00:00:24,460
aren't working so it won't be live but

00:00:22,690 --> 00:00:29,260
at least you'll see similar capabilities

00:00:24,460 --> 00:00:33,940
so this is using dummy anomalous live

00:00:29,260 --> 00:00:37,090
reveal a yes so you get a presentation

00:00:33,940 --> 00:00:39,460
that is can also execute code so that's

00:00:37,090 --> 00:00:46,000
that ran a line of code even though you

00:00:39,460 --> 00:00:51,790
didn't see it does that that goes off

00:00:46,000 --> 00:01:00,159
the page may be able to zoom out oh that

00:00:51,790 --> 00:01:01,540
makes sense all right okay so that's a

00:01:00,159 --> 00:01:03,369
title of my talk clustering of high

00:01:01,540 --> 00:01:06,040
content screen images to discover off

00:01:03,369 --> 00:01:10,180
target phenotypes so I'll tell you what

00:01:06,040 --> 00:01:12,100
all of that is about first and yet as i

00:01:10,180 --> 00:01:14,619
said this notebook has the entire

00:01:12,100 --> 00:01:17,590
analysis but some of the stuff isn't

00:01:14,619 --> 00:01:19,060
working so won't be life okay so what is

00:01:17,590 --> 00:01:22,179
high content screening and why do you

00:01:19,060 --> 00:01:23,890
care about it so first the first

00:01:22,179 --> 00:01:26,259
question is reverse its reverse genetics

00:01:23,890 --> 00:01:28,899
on a massive scale so for those of you

00:01:26,259 --> 00:01:32,439
that don't do biology forward genetics

00:01:28,899 --> 00:01:36,749
is sort of the traditional way to do

00:01:32,439 --> 00:01:40,149
genetics and you go from mutation so a

00:01:36,749 --> 00:01:42,640
interesting trait a phenotype for

00:01:40,149 --> 00:01:44,439
example in the fruit fly one of the

00:01:42,640 --> 00:01:45,999
classic ones is curly wing so some flies

00:01:44,439 --> 00:01:47,979
have curly wings and other flies have

00:01:45,999 --> 00:01:49,929
straight wings so I got from that and

00:01:47,979 --> 00:01:53,049
then using breeding and various other

00:01:49,929 --> 00:01:56,590
approaches you find out which gene is

00:01:53,049 --> 00:01:59,200
responsible for that trait okay so

00:01:56,590 --> 00:02:00,939
that's reverse genetics for urgent sorry

00:01:59,200 --> 00:02:03,579
that's for genetics reverse genetics is

00:02:00,939 --> 00:02:08,350
when you mutate a specific gene and you

00:02:03,579 --> 00:02:09,660
observe what happens to the organism so

00:02:08,350 --> 00:02:12,490
that's why it's in the other direction

00:02:09,660 --> 00:02:16,210
and in high concentrating what you're

00:02:12,490 --> 00:02:20,650
doing is on each of these wells in a

00:02:16,210 --> 00:02:22,240
384-well plate you put some cells and

00:02:20,650 --> 00:02:26,200
then every well gets a different

00:02:22,240 --> 00:02:27,880
treatment usually you're disrupting a

00:02:26,200 --> 00:02:31,240
specific gene and then you take a

00:02:27,880 --> 00:02:33,370
picture and you do this for say fifty

00:02:31,240 --> 00:02:37,060
thousand one hundred thousand half a

00:02:33,370 --> 00:02:39,850
million images so you're testing the

00:02:37,060 --> 00:02:45,550
effect of all of these disruptions at

00:02:39,850 --> 00:02:47,440
once on the shape of your cells so

00:02:45,550 --> 00:02:49,390
that's high content screening by the way

00:02:47,440 --> 00:02:53,260
talks a bit short so feel free to ask

00:02:49,390 --> 00:02:58,260
questions throughout it why should you

00:02:53,260 --> 00:03:02,470
care about it because in the past decade

00:02:58,260 --> 00:03:04,420
or in the odds rather on this study more

00:03:02,470 --> 00:03:06,640
new drugs were discovered from high

00:03:04,420 --> 00:03:08,530
content screening than from same

00:03:06,640 --> 00:03:11,020
molecular modeling based approaches even

00:03:08,530 --> 00:03:13,390
though the latter actually had way more

00:03:11,020 --> 00:03:16,690
resources through an enemy so it's

00:03:13,390 --> 00:03:20,860
actually a very effective way to find

00:03:16,690 --> 00:03:27,430
drugs treat diseases and just generally

00:03:20,860 --> 00:03:29,680
do biological discovery okay and why do

00:03:27,430 --> 00:03:32,200
I want to do clustering and that's

00:03:29,680 --> 00:03:33,880
because I find that the traditional way

00:03:32,200 --> 00:03:37,810
to analyze high content screening is

00:03:33,880 --> 00:03:40,990
pretty limiting so this is just a figure

00:03:37,810 --> 00:03:42,910
from a high content screening paper the

00:03:40,990 --> 00:03:45,430
main point there's no at least when i'll

00:03:42,910 --> 00:03:47,020
use my mask the main point is this panel

00:03:45,430 --> 00:03:48,880
so these two axes are essentially

00:03:47,020 --> 00:03:50,740
replicates of one another that's why

00:03:48,880 --> 00:03:54,610
it's highly correlated so all you're

00:03:50,740 --> 00:03:56,110
doing is taking one variable don't

00:03:54,610 --> 00:03:58,090
really know what it is here something

00:03:56,110 --> 00:03:59,590
like cell density and your ranking all

00:03:58,090 --> 00:04:01,000
of your images across that one variable

00:03:59,590 --> 00:04:05,860
and then you look at the load ranking

00:04:01,000 --> 00:04:08,050
images the high rankings but obviously

00:04:05,860 --> 00:04:10,240
there's there can be a lot more going on

00:04:08,050 --> 00:04:13,420
in your pictures so cells can take all

00:04:10,240 --> 00:04:16,510
forms of shape independent of the

00:04:13,420 --> 00:04:19,750
density so essentially you're spending a

00:04:16,510 --> 00:04:21,310
quarter of a million dollars on a screen

00:04:19,750 --> 00:04:23,170
and then you're getting this one number

00:04:21,310 --> 00:04:24,410
out of it maybe a list of 100 genes that

00:04:23,170 --> 00:04:26,750
look interesting

00:04:24,410 --> 00:04:29,270
that's it and as I said it's actually

00:04:26,750 --> 00:04:31,160
very valuable great drugs there's been a

00:04:29,270 --> 00:04:32,960
lot of stress in drug discovery but

00:04:31,160 --> 00:04:36,970
there's a lot more information in that

00:04:32,960 --> 00:04:40,400
data that people aren't using and

00:04:36,970 --> 00:04:43,970
clustering is a nice way to discover

00:04:40,400 --> 00:04:45,530
that because if you have one image where

00:04:43,970 --> 00:04:48,080
your cells look weird in a particular

00:04:45,530 --> 00:04:50,270
way then that doesn't necessarily tell

00:04:48,080 --> 00:04:52,640
you much because in biology stuff goes

00:04:50,270 --> 00:04:55,490
wrong all the time and you don't know

00:04:52,640 --> 00:04:57,050
whether that thing was a fluke or if

00:04:55,490 --> 00:04:58,880
it's a real effect whereas if you get a

00:04:57,050 --> 00:05:01,100
cluster of images that all look that way

00:04:58,880 --> 00:05:05,930
then you might get a clue that you're on

00:05:01,100 --> 00:05:12,620
to something ok so again this is a

00:05:05,930 --> 00:05:15,830
notebook demo so can run this and again

00:05:12,620 --> 00:05:17,660
it's not we're not actually going to run

00:05:15,830 --> 00:05:22,100
this but I just want to emphasize that

00:05:17,660 --> 00:05:23,720
you can do this live ok so the first

00:05:22,100 --> 00:05:27,020
step if you if you're familiar with

00:05:23,720 --> 00:05:29,780
clustering you want to describe every

00:05:27,020 --> 00:05:32,590
image as a set of features so that's the

00:05:29,780 --> 00:05:35,990
first step is to map your images to to

00:05:32,590 --> 00:05:38,150
feature or descriptors they're sometimes

00:05:35,990 --> 00:05:42,830
called just some some way to summarize

00:05:38,150 --> 00:05:44,750
the image and so first thing we're going

00:05:42,830 --> 00:05:46,730
to do is write the map function so from

00:05:44,750 --> 00:05:48,919
the this is from the screen that I've

00:05:46,730 --> 00:05:54,680
been mostly working on it's from

00:05:48,919 --> 00:05:56,480
christoph marcel at monash and the main

00:05:54,680 --> 00:05:59,360
thing that i want you to take away from

00:05:56,480 --> 00:06:01,669
this image is that there is no way

00:05:59,360 --> 00:06:04,340
you're going to count cells or find the

00:06:01,669 --> 00:06:06,800
cells in here these are muscle precursor

00:06:04,340 --> 00:06:08,780
cells and what they do is they start

00:06:06,800 --> 00:06:11,390
fusing together when you put certain

00:06:08,780 --> 00:06:15,710
factors into the thing in order to form

00:06:11,390 --> 00:06:18,620
you know muscle fibers and so we're

00:06:15,710 --> 00:06:21,410
interested in things that promote muscle

00:06:18,620 --> 00:06:23,840
formation or muscle fiber formation or

00:06:21,410 --> 00:06:25,010
disrupt it but the point is once they

00:06:23,840 --> 00:06:26,840
start freezing and getting all these

00:06:25,010 --> 00:06:29,580
Findlay shapes you're not going to find

00:06:26,840 --> 00:06:33,530
where the cells are

00:06:29,580 --> 00:06:37,740
and so designing features for this is

00:06:33,530 --> 00:06:40,979
challenging and there's this great quote

00:06:37,740 --> 00:06:43,860
from the speech recognition field which

00:06:40,979 --> 00:06:47,009
I took to heart and it's from Fred

00:06:43,860 --> 00:06:48,270
jelinek every time I fire linguist the

00:06:47,009 --> 00:06:52,259
performance of our speech recognition

00:06:48,270 --> 00:06:55,139
system goes up so that the moral of this

00:06:52,259 --> 00:06:58,289
story from this it might be apocryphal

00:06:55,139 --> 00:07:03,990
but i think it's it's really good is

00:06:58,289 --> 00:07:07,199
that sometimes machines and doing sort

00:07:03,990 --> 00:07:09,870
of random okay things does as well as

00:07:07,199 --> 00:07:13,770
intuition or better and you don't need

00:07:09,870 --> 00:07:16,580
the precise knowledge you just need to

00:07:13,770 --> 00:07:20,819
get some information out of your data

00:07:16,580 --> 00:07:26,129
statistical information so knowing this

00:07:20,819 --> 00:07:28,139
I plaid bravely on and I did some future

00:07:26,129 --> 00:07:30,810
mapping so this is my main function

00:07:28,139 --> 00:07:32,099
feature map take an image and sample

00:07:30,810 --> 00:07:35,099
size and I'll tell you what that's about

00:07:32,099 --> 00:07:37,860
in a second so I call this don't care

00:07:35,099 --> 00:07:40,469
feature extraction so I don't care that

00:07:37,860 --> 00:07:42,779
I'm not finding the cells so all I'm

00:07:40,469 --> 00:07:44,879
doing here is I'm threshold in very

00:07:42,779 --> 00:07:47,190
simple threshold and I'm doing connected

00:07:44,879 --> 00:07:49,080
components so things that are isolated

00:07:47,190 --> 00:07:52,440
from each other so you can see obviously

00:07:49,080 --> 00:07:53,789
none of these objects are individual

00:07:52,440 --> 00:07:56,339
cells or maybe some of them are but

00:07:53,789 --> 00:08:00,120
mostly they're agglomerations of cells

00:07:56,339 --> 00:08:05,490
at various forms and we're just going to

00:08:00,120 --> 00:08:07,979
measure properties on those and because

00:08:05,490 --> 00:08:12,389
the data had some illumination issues in

00:08:07,979 --> 00:08:14,430
some cases so i'll scroll that so you

00:08:12,389 --> 00:08:15,990
can see here like the center of the

00:08:14,430 --> 00:08:19,919
image is a bit less illuminated on the

00:08:15,990 --> 00:08:21,389
outside i use two different threshold

00:08:19,919 --> 00:08:23,279
things and I measure the objects in both

00:08:21,389 --> 00:08:27,000
and I just concatenate all the features

00:08:23,279 --> 00:08:30,629
together so very very simple what are

00:08:27,000 --> 00:08:34,110
the features I'll skip this bit because

00:08:30,629 --> 00:08:38,430
it's very long but this this one here is

00:08:34,110 --> 00:08:41,250
where you want to see it so for every

00:08:38,430 --> 00:08:42,820
object in that image I'm measuring these

00:08:41,250 --> 00:08:45,430
properties using psyche

00:08:42,820 --> 00:08:47,860
so the area how big that object is the

00:08:45,430 --> 00:08:50,410
eccentricity how elongated versus

00:08:47,860 --> 00:08:52,690
vertical it is Euler number is whether

00:08:50,410 --> 00:08:57,760
it has holes in it or it's one solid

00:08:52,690 --> 00:09:01,240
block extent is how big it is main max

00:08:57,760 --> 00:09:05,140
and min incenses intensity and solidity

00:09:01,240 --> 00:09:08,620
which is how much of a sphere it fills

00:09:05,140 --> 00:09:11,380
up so I measure that for all of the

00:09:08,620 --> 00:09:13,120
objects and then or some subsample of

00:09:11,380 --> 00:09:16,090
the objects and then I take the

00:09:13,120 --> 00:09:21,670
quantiles fifth 25th line and that that

00:09:16,090 --> 00:09:23,620
summarizes my image okay and this is the

00:09:21,670 --> 00:09:29,740
thing that it's not working so let's get

00:09:23,620 --> 00:09:31,600
rid of it so find all the images scan

00:09:29,740 --> 00:09:35,350
dear you should check it out it's like

00:09:31,600 --> 00:09:36,850
it's a way to recurse at least walk your

00:09:35,350 --> 00:09:42,610
directories and it's a lot faster than

00:09:36,850 --> 00:09:45,610
the built-in OS adult look and then we

00:09:42,610 --> 00:09:47,560
do the conversion and we put it into a

00:09:45,610 --> 00:09:52,240
pandas dataframe which you all know that

00:09:47,560 --> 00:09:56,320
now so this gives me a 2d matrix of

00:09:52,240 --> 00:09:58,630
floats and the index is just the

00:09:56,320 --> 00:10:02,620
coordinates which is the flight ID and

00:09:58,630 --> 00:10:05,890
the coordinates on that plate and the

00:10:02,620 --> 00:10:09,220
columns are the future names and so what

00:10:05,890 --> 00:10:11,710
does that look like looks like that

00:10:09,220 --> 00:10:16,440
right so the number of objects in the

00:10:11,710 --> 00:10:20,050
image in this particular image is 481

00:10:16,440 --> 00:10:23,320
this the 5th percentile of object size

00:10:20,050 --> 00:10:28,710
is 13 pixels 25th percentile is 20

00:10:23,320 --> 00:10:37,270
pixels and so on ok so again these are

00:10:28,710 --> 00:10:40,090
very very unsupervised features MongoDB

00:10:37,270 --> 00:10:43,210
is what I use to keep track of these

00:10:40,090 --> 00:10:46,420
relationships of every image corresponds

00:10:43,210 --> 00:10:49,360
to a gene that has been disrupted and

00:10:46,420 --> 00:10:51,160
that corresponds to an image file

00:10:49,360 --> 00:10:52,430
somewhere in my disk or in a server

00:10:51,160 --> 00:10:55,430
somewhere

00:10:52,430 --> 00:10:58,460
and server-side processing is one of the

00:10:55,430 --> 00:11:01,279
things that I haven't done yet but would

00:10:58,460 --> 00:11:02,990
like to and then the coordinates and the

00:11:01,279 --> 00:11:07,700
wells and there's obviously other

00:11:02,990 --> 00:11:09,110
information that you can get it so for

00:11:07,700 --> 00:11:11,779
those of you that don't know MongoDB is

00:11:09,110 --> 00:11:14,990
like the database for people who don't

00:11:11,779 --> 00:11:18,290
know or want to deal with databases and

00:11:14,990 --> 00:11:20,180
a single entry and a MongoDB is just is

00:11:18,290 --> 00:11:23,390
like a JSON file it's just a bunch of

00:11:20,180 --> 00:11:26,290
key value collections and it's fast open

00:11:23,390 --> 00:11:29,660
source has a lot of support and it has

00:11:26,290 --> 00:11:33,830
python bindings so highly recommended

00:11:29,660 --> 00:11:37,270
and so we can start a demon which I'm

00:11:33,830 --> 00:11:43,130
not okay so that's that's starting the

00:11:37,270 --> 00:11:45,050
MongoDB process in my computer and just

00:11:43,130 --> 00:11:47,060
so you know what it is you get the

00:11:45,050 --> 00:11:51,140
client to the demon and then you give it

00:11:47,060 --> 00:11:59,660
the database name and the collection

00:11:51,140 --> 00:12:02,839
name and get that hopefully and if you

00:11:59,660 --> 00:12:08,870
do a search this is what it looks like

00:12:02,839 --> 00:12:11,810
okay so this is the ID of that document

00:12:08,870 --> 00:12:14,050
and yet you've got the barcode the file

00:12:11,810 --> 00:12:14,050
name

00:12:14,830 --> 00:12:27,280
so it's it's super easy then we use

00:12:21,900 --> 00:12:28,840
psychic learn to do clustering and yet

00:12:27,280 --> 00:12:31,360
all I'm doing is scaling the data so

00:12:28,840 --> 00:12:32,800
that everything has 0 mean and two

00:12:31,360 --> 00:12:34,030
variants so that all the features are on

00:12:32,800 --> 00:12:37,840
the same scale because as you saw my

00:12:34,030 --> 00:12:39,610
features are all over the place and then

00:12:37,840 --> 00:12:44,260
we do mini batch k-means which is a

00:12:39,610 --> 00:12:47,590
scalable version of k-means to cluster

00:12:44,260 --> 00:12:48,910
all the images so let's have a look at

00:12:47,590 --> 00:12:53,170
what that looks like this is just some

00:12:48,910 --> 00:12:57,340
setup code to get some costs get the

00:12:53,170 --> 00:12:59,650
genes from the cluster ID and these are

00:12:57,340 --> 00:13:01,690
all the cluster sizes so one of the

00:12:59,650 --> 00:13:03,130
things to take aways I'm um super happy

00:13:01,690 --> 00:13:05,380
with k-means because he is very

00:13:03,130 --> 00:13:13,000
heterogeneous cluster size or at least

00:13:05,380 --> 00:13:16,570
with my data so yeah and so pick a

00:13:13,000 --> 00:13:17,830
couple clusters and this so these are

00:13:16,570 --> 00:13:21,790
all the genes and one of the clusters

00:13:17,830 --> 00:13:26,710
and I'll show you what the images look

00:13:21,790 --> 00:13:30,010
like all right so this is a set of six

00:13:26,710 --> 00:13:31,690
images in one cluster you don't have a

00:13:30,010 --> 00:13:35,050
baseline for how somewhere that but they

00:13:31,690 --> 00:13:40,090
do have similar features right and if

00:13:35,050 --> 00:13:42,190
you look at another cluster you can see

00:13:40,090 --> 00:13:43,900
that they're completely different to

00:13:42,190 --> 00:13:47,920
that previous one and quite similar to

00:13:43,900 --> 00:13:50,200
each other all right so that is the the

00:13:47,920 --> 00:13:53,700
main message from this talk is that you

00:13:50,200 --> 00:13:56,850
can do something really simple

00:13:53,700 --> 00:14:01,660
borderline stupid with your data and

00:13:56,850 --> 00:14:04,060
still get useful results if you if you

00:14:01,660 --> 00:14:09,070
do this sort of don't care feature

00:14:04,060 --> 00:14:11,140
expansion approach okay and then

00:14:09,070 --> 00:14:13,840
ultimately what I want to do with this

00:14:11,140 --> 00:14:15,940
is take all of this approach and package

00:14:13,840 --> 00:14:17,800
it into a way that a biologist can rock

00:14:15,940 --> 00:14:23,889
and and get something out of their data

00:14:17,800 --> 00:14:26,290
and so I'll skip over the details of

00:14:23,889 --> 00:14:28,149
getting what I'm doing is for every

00:14:26,290 --> 00:14:29,709
image I'm computing the six nearest

00:14:28,149 --> 00:14:32,609
neighbors you can do any number of

00:14:29,709 --> 00:14:38,769
neighbors that you want so that I

00:14:32,609 --> 00:14:41,799
biologists can do I'll skip all this all

00:14:38,769 --> 00:14:43,359
right so this is kind of what I see the

00:14:41,799 --> 00:14:47,160
project going towards so this is a

00:14:43,359 --> 00:14:50,439
completely static thing but it should be

00:14:47,160 --> 00:14:53,199
dynamic so every point here this is the

00:14:50,439 --> 00:14:56,169
PCA decomposition of the data every

00:14:53,199 --> 00:14:59,290
point is an image or a gene that's been

00:14:56,169 --> 00:15:01,449
disrupted so here I've highlighted in

00:14:59,290 --> 00:15:02,799
orange a particular image that the

00:15:01,449 --> 00:15:04,749
researcher might be interested in in

00:15:02,799 --> 00:15:09,249
blue are all the neighbors so these are

00:15:04,749 --> 00:15:11,980
the images most similar to your image

00:15:09,249 --> 00:15:13,179
that you're looking at lots of genes are

00:15:11,980 --> 00:15:14,919
being done in replicate these are the

00:15:13,179 --> 00:15:17,109
replicates so you can see that they look

00:15:14,919 --> 00:15:18,639
more or less the same so if your

00:15:17,109 --> 00:15:20,350
replicates don't look like your original

00:15:18,639 --> 00:15:21,939
one then probably don't want to be

00:15:20,350 --> 00:15:26,319
looking at the gene because there's

00:15:21,939 --> 00:15:28,569
something fishy going on and these two

00:15:26,319 --> 00:15:34,779
panels are cross-sections of that to D

00:15:28,569 --> 00:15:39,299
matrix of images and features so for

00:15:34,779 --> 00:15:42,369
this particular image this is the

00:15:39,299 --> 00:15:43,989
feature profile so each of these points

00:15:42,369 --> 00:15:47,319
corresponds to a particular feature and

00:15:43,989 --> 00:15:50,040
for this particular feature this is the

00:15:47,319 --> 00:15:55,959
histogram of what all of the different

00:15:50,040 --> 00:15:58,089
images have for that feature so the way

00:15:55,959 --> 00:15:59,860
I envisioned eyeball just using this is

00:15:58,089 --> 00:16:03,279
ok will take me to the gene I'm

00:15:59,860 --> 00:16:05,319
interested in ok well that has some

00:16:03,279 --> 00:16:07,119
middling value for this feature what

00:16:05,319 --> 00:16:11,679
does it look like if we go to be either

00:16:07,119 --> 00:16:14,259
extreme of this distribution and so very

00:16:11,679 --> 00:16:16,149
quickly using all these pre computed

00:16:14,259 --> 00:16:19,989
structures like your clusters and your

00:16:16,149 --> 00:16:23,109
nearest neighbors I've all just can get

00:16:19,989 --> 00:16:25,679
an idea of what parts of the data are

00:16:23,109 --> 00:16:25,679
interesting

00:16:25,820 --> 00:16:34,560
yeah what the genes are doing I'm not

00:16:31,680 --> 00:16:36,899
even i'm going to this oh my god is

00:16:34,560 --> 00:16:40,589
actually worked okay so if you haven't

00:16:36,899 --> 00:16:45,180
heard of empty ld3 it directly converts

00:16:40,589 --> 00:16:48,389
matplotlib to d3 data but these aren't

00:16:45,180 --> 00:16:55,339
linked right now but you can do stuff

00:16:48,389 --> 00:16:55,339
like zooming into your plots and pending

00:16:57,199 --> 00:17:02,899
so the main point of that is you can

00:17:00,570 --> 00:17:06,980
build something that's a nice interface

00:17:02,899 --> 00:17:09,059
using all of these frameworks okay

00:17:06,980 --> 00:17:11,069
conclusions and future directions so

00:17:09,059 --> 00:17:14,459
I'll just go over this apologies for all

00:17:11,069 --> 00:17:16,860
the texts so as I mentioned the number

00:17:14,459 --> 00:17:18,510
one thing image clustering in python is

00:17:16,860 --> 00:17:20,730
pretty close to out of the box you use

00:17:18,510 --> 00:17:24,150
some standard libraries and like a

00:17:20,730 --> 00:17:26,549
psychedelic it learn combine them in a

00:17:24,150 --> 00:17:28,860
simple way and you get southern edge

00:17:26,549 --> 00:17:32,870
clustering which you know stuff like

00:17:28,860 --> 00:17:38,100
google image search and whatever work on

00:17:32,870 --> 00:17:41,669
I think the interactive GUI idea is

00:17:38,100 --> 00:17:44,220
feasible I can all of these search

00:17:41,669 --> 00:17:47,220
functions are very fast so that's the

00:17:44,220 --> 00:17:52,530
main goal the goal is not an easy GUI

00:17:47,220 --> 00:17:54,840
for the simple one dimensional feature

00:17:52,530 --> 00:17:57,030
analysis that most screens do there's

00:17:54,840 --> 00:17:59,100
actually a excellent software called

00:17:57,030 --> 00:18:02,070
cell profiler that's also built using

00:17:59,100 --> 00:18:04,710
the scientific Python stack that does

00:18:02,070 --> 00:18:08,340
that but the goal is to be able to

00:18:04,710 --> 00:18:12,620
define a feature set quickly and easily

00:18:08,340 --> 00:18:15,330
in Python and ship interactive

00:18:12,620 --> 00:18:19,350
multivariate exploratory analysis to the

00:18:15,330 --> 00:18:21,809
biologists one really interesting

00:18:19,350 --> 00:18:23,750
application for this work is to use the

00:18:21,809 --> 00:18:26,280
clustering and the neighbors network for

00:18:23,750 --> 00:18:27,840
functional prediction so if you have a

00:18:26,280 --> 00:18:30,169
set of genes that you know are involved

00:18:27,840 --> 00:18:32,820
in this biological process and you have

00:18:30,169 --> 00:18:34,260
some new gene that you hadn't heard of

00:18:32,820 --> 00:18:36,320
and it's right next to all of these in

00:18:34,260 --> 00:18:38,149
terms of its effect on the cells

00:18:36,320 --> 00:18:39,620
then you can be pretty sure that that

00:18:38,149 --> 00:18:42,649
gene is involved in that process as well

00:18:39,620 --> 00:18:48,169
so suddenly you've got new biological

00:18:42,649 --> 00:18:50,840
knowledge that didn't exist before yeah

00:18:48,169 --> 00:18:52,940
and some minor improvements so I've

00:18:50,840 --> 00:18:57,309
called it husk and when I did that it

00:18:52,940 --> 00:18:57,309
was just because as I said this is life

00:19:02,710 --> 00:19:07,700
which is high content screening

00:19:05,779 --> 00:19:10,129
unsupervised sample clustering goes

00:19:07,700 --> 00:19:11,690
short pronounceable but and it's not a

00:19:10,129 --> 00:19:16,039
word but it's not actually Google older

00:19:11,690 --> 00:19:17,450
tons of things called testing I want to

00:19:16,039 --> 00:19:19,759
improve the image pre-processing so I

00:19:17,450 --> 00:19:21,110
showed you some clusters that had some

00:19:19,759 --> 00:19:25,940
pretty good images but someone have

00:19:21,110 --> 00:19:28,429
massive artifacts so it'd be good to get

00:19:25,940 --> 00:19:32,360
to get all the images to a nice clean

00:19:28,429 --> 00:19:34,039
state before doing the work and as I

00:19:32,360 --> 00:19:36,379
said k-means might not be the ideal

00:19:34,039 --> 00:19:38,899
choice for this so if anyone has

00:19:36,379 --> 00:19:42,860
experience and all of this stuff and in

00:19:38,899 --> 00:19:45,169
particular an interactive data analysis

00:19:42,860 --> 00:19:50,409
can be really interested to talk to you

00:19:45,169 --> 00:19:50,409
and thanks for listening any questions

00:19:51,039 --> 00:19:54,610
thanks very much fun

00:19:55,390 --> 00:20:01,090
so we have quite a lot of time for

00:19:58,250 --> 00:20:06,710
questions now we have any any questions

00:20:01,090 --> 00:20:10,100
yeah okay yeah so there's been a call

00:20:06,710 --> 00:20:11,570
for on Chris leah is Chris leah here can

00:20:10,100 --> 00:20:25,970
you please go to the registration desks

00:20:11,570 --> 00:20:27,800
um it's a call for you okay yes thanks

00:20:25,970 --> 00:20:30,200
man that was a great talk and just a

00:20:27,800 --> 00:20:31,520
quick question what is the size of the

00:20:30,200 --> 00:20:34,070
data sets that you're dealing with you

00:20:31,520 --> 00:20:37,640
right so the data set that you show that

00:20:34,070 --> 00:20:40,280
you saw is a very tiny subset it was

00:20:37,640 --> 00:20:43,910
seventeen hundred images the full data

00:20:40,280 --> 00:20:47,960
set for this screen is 45 thousand

00:20:43,910 --> 00:20:52,990
images the full set for new screens is

00:20:47,960 --> 00:20:56,270
half a million images and this is after

00:20:52,990 --> 00:20:59,900
doing merging so a lot of the images are

00:20:56,270 --> 00:21:01,190
actually taken as mosaics and then so

00:20:59,900 --> 00:21:06,830
after you merge them all you get this

00:21:01,190 --> 00:21:10,570
this size of data so in the new sets you

00:21:06,830 --> 00:21:13,720
there half a million fairly big images

00:21:10,570 --> 00:21:13,720
decent size

00:21:17,510 --> 00:21:29,370
any other questions and yep I have a

00:21:24,840 --> 00:21:33,390
question on so yeah one would you yeah

00:21:29,370 --> 00:21:35,250
we share any of the future goals for the

00:21:33,390 --> 00:21:38,360
psyche dimage project and where do you

00:21:35,250 --> 00:21:41,010
see it going in the next few years okay

00:21:38,360 --> 00:21:44,520
so the thing was I could image is that

00:21:41,010 --> 00:21:46,050
it's kind of scrappy and I mean it

00:21:44,520 --> 00:21:49,230
wasn't really interesting we came out

00:21:46,050 --> 00:21:51,180
with the paper just recently and as we

00:21:49,230 --> 00:21:52,700
were all submitting figures to it like

00:21:51,180 --> 00:21:55,890
wow that's what you do this really cool

00:21:52,700 --> 00:21:57,240
and completely different fields so

00:21:55,890 --> 00:21:59,760
everyone has a bit of their own agenda

00:21:57,240 --> 00:22:05,430
and so long as the features are seen as

00:21:59,760 --> 00:22:10,560
valuable by everyone then they going my

00:22:05,430 --> 00:22:14,100
agenda is biology so I want to make it

00:22:10,560 --> 00:22:16,350
easy to get support for violet common

00:22:14,100 --> 00:22:19,920
biological image formats support for 3d

00:22:16,350 --> 00:22:25,410
data which is right now pretty good but

00:22:19,920 --> 00:22:27,720
not excellent there's a lot of speed

00:22:25,410 --> 00:22:30,090
improvements to do we have registration

00:22:27,720 --> 00:22:33,600
that this is currently non-existent so

00:22:30,090 --> 00:22:39,020
trying to align it to images but mesh

00:22:33,600 --> 00:22:39,020
together that's your image segmentation

00:22:39,110 --> 00:22:45,050
revamping the i/o does anyone have any

00:22:41,160 --> 00:22:45,050
particular image wish lists

00:22:49,900 --> 00:22:56,750
you know sort of a job at quite recently

00:22:53,060 --> 00:22:59,150
about from CSIRO about phenotyping of

00:22:56,750 --> 00:23:01,850
our whole plants you know with within

00:22:59,150 --> 00:23:03,500
some you know field you've got some some

00:23:01,850 --> 00:23:06,020
number of actual plants you grow the

00:23:03,500 --> 00:23:08,630
plant to it not necessarily mature size

00:23:06,020 --> 00:23:10,760
but to a size so you're not just

00:23:08,630 --> 00:23:14,360
finished opening soldier phenotyping

00:23:10,760 --> 00:23:15,650
whole organisms yep so is sort of um

00:23:14,360 --> 00:23:17,870
picture is that what's happening or

00:23:15,650 --> 00:23:20,270
sorry will cushion once it's grown you

00:23:17,870 --> 00:23:22,370
take a picture of it or are you yeah we

00:23:20,270 --> 00:23:24,080
take video of a row Ed multispectral

00:23:22,370 --> 00:23:26,510
imaging of it all you to something

00:23:24,080 --> 00:23:29,500
having to do with with computer vision

00:23:26,510 --> 00:23:31,760
so does it sound it sounds to me like

00:23:29,500 --> 00:23:33,110
software like you're sort of clustering

00:23:31,760 --> 00:23:36,530
software would be useful for

00:23:33,110 --> 00:23:40,670
identification tasks even in that area I

00:23:36,530 --> 00:23:42,560
think so so I did this project is very

00:23:40,670 --> 00:23:46,360
much in its infancy it's sort of been me

00:23:42,560 --> 00:23:51,460
half time less than half time for a year

00:23:46,360 --> 00:23:54,380
but I think this project part of the

00:23:51,460 --> 00:23:58,010
design of it is to very easily define

00:23:54,380 --> 00:24:00,410
new features so so long as you can

00:23:58,010 --> 00:24:03,200
extract relevant information out of your

00:24:00,410 --> 00:24:05,420
images or videos or even if people are

00:24:03,200 --> 00:24:08,570
going in and measuring various aspects

00:24:05,420 --> 00:24:09,740
of of each plant specimen then yeah I

00:24:08,570 --> 00:24:12,760
think this framework would be really

00:24:09,740 --> 00:24:15,950
useful again because when you see

00:24:12,760 --> 00:24:19,130
something once it could be a fluke and

00:24:15,950 --> 00:24:20,930
when you cluster it and see it happening

00:24:19,130 --> 00:24:23,930
multiple times then you're more

00:24:20,930 --> 00:24:26,300
confident that you're onto something hey

00:24:23,930 --> 00:24:29,350
um so far there seems to be a common

00:24:26,300 --> 00:24:33,530
theme in the talks arm and it involves

00:24:29,350 --> 00:24:37,250
program is providing methods for wet lab

00:24:33,530 --> 00:24:39,590
or more scientists to get the data do

00:24:37,250 --> 00:24:41,990
you have any comments on the Python

00:24:39,590 --> 00:24:45,470
stack hell that's developing or growing

00:24:41,990 --> 00:24:50,140
to support easy application development

00:24:45,470 --> 00:24:53,930
to push data to the scientists I think

00:24:50,140 --> 00:24:58,310
Python is close to as good as it gets in

00:24:53,930 --> 00:25:02,280
terms of ease of use and

00:24:58,310 --> 00:25:06,450
finding tools that are very that already

00:25:02,280 --> 00:25:10,370
exist to do whatever you want and also

00:25:06,450 --> 00:25:13,800
there's a huge education effort going on

00:25:10,370 --> 00:25:17,850
with software carpentry and that's

00:25:13,800 --> 00:25:20,160
usually or mostly based on Python for

00:25:17,850 --> 00:25:21,900
the reasons that I said before I should

00:25:20,160 --> 00:25:24,390
mention I've actually trained as a

00:25:21,900 --> 00:25:27,270
biologist and slowly pick this up and

00:25:24,390 --> 00:25:30,300
now I'm core developer first I could

00:25:27,270 --> 00:25:36,090
image so I think that just speaks to how

00:25:30,300 --> 00:25:38,390
easy the ecosystem is yeah hi apologize

00:25:36,090 --> 00:25:41,670
my ignorance about so I could image a

00:25:38,390 --> 00:25:44,370
canned for the to develop the feature

00:25:41,670 --> 00:25:45,960
Victor but is there anything with in

00:25:44,370 --> 00:25:47,910
there to kind of automatically extract

00:25:45,960 --> 00:25:50,160
features from images in order to enable

00:25:47,910 --> 00:25:52,860
clustering or is it kind of every single

00:25:50,160 --> 00:25:57,720
domain needs to do manual feature

00:25:52,860 --> 00:26:00,210
extraction there's nothing completely

00:25:57,720 --> 00:26:02,820
generic in there but that actually might

00:26:00,210 --> 00:26:06,150
be something that we might be interested

00:26:02,820 --> 00:26:09,630
in yeah so I had to develop there's a

00:26:06,150 --> 00:26:13,320
lot of excellent primitives for it which

00:26:09,630 --> 00:26:15,570
is how I I worked here nothing out of

00:26:13,320 --> 00:26:18,480
the box but that's that's a possibility

00:26:15,570 --> 00:26:19,710
if you want to submit like you doesn't

00:26:18,480 --> 00:26:25,370
have to be a pull request it can be a

00:26:19,710 --> 00:26:25,370
raisin issue on github it I think

00:26:44,000 --> 00:26:46,060
you

00:26:50,279 --> 00:26:52,340

YouTube URL: https://www.youtube.com/watch?v=qxKf7LGf7x8


