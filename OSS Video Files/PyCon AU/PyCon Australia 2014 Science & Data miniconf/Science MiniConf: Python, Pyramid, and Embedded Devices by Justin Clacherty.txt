Title: Science MiniConf: Python, Pyramid, and Embedded Devices by Justin Clacherty
Publication date: 2014-08-11
Playlist: PyCon Australia 2014 Science & Data miniconf
Description: 
	PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:06,259 --> 00:00:16,680
okay hi I'm here to talk about pipe and

00:00:11,190 --> 00:00:19,050
pyramid and embedded devices my name is

00:00:16,680 --> 00:00:23,999
Justin clackety I'm from Rufus group as

00:00:19,050 --> 00:00:26,159
ads already said we're a small product

00:00:23,999 --> 00:00:28,980
design firm in Brisbane and we're not

00:00:26,159 --> 00:00:31,619
when we're not working on our clients

00:00:28,980 --> 00:00:34,350
work we've been developing warp 1 which

00:00:31,619 --> 00:00:37,590
is an open router project an open

00:00:34,350 --> 00:00:40,830
hardware open software rather and we're

00:00:37,590 --> 00:00:44,100
using Python and pyramid for the web

00:00:40,830 --> 00:00:45,720
interface on that so today I'm here to

00:00:44,100 --> 00:00:47,970
talk to you about embedded devices and

00:00:45,720 --> 00:00:52,500
what we can do to improve the human

00:00:47,970 --> 00:00:53,670
interfaces to them try and be kind this

00:00:52,500 --> 00:00:58,200
is the first time talking at a

00:00:53,670 --> 00:01:00,330
conference ok so embedded devices are

00:00:58,200 --> 00:01:07,020
there any embedded developers in the

00:01:00,330 --> 00:01:10,230
room a couple excellent ok so for

00:01:07,020 --> 00:01:12,840
everyone else embedded devices they're

00:01:10,230 --> 00:01:15,360
basically just computerized devices that

00:01:12,840 --> 00:01:19,050
aren't servers or desktop machines

00:01:15,360 --> 00:01:23,729
computers their things such as you

00:01:19,050 --> 00:01:25,950
printer a phone tablet navigation

00:01:23,729 --> 00:01:29,370
systems home and building automation

00:01:25,950 --> 00:01:32,400
systems Raspberry Pi I'm sure some of

00:01:29,370 --> 00:01:34,979
you have heard of that at least network

00:01:32,400 --> 00:01:37,979
appliances so routers consume and ask

00:01:34,979 --> 00:01:39,479
devices basically they're things that

00:01:37,979 --> 00:01:42,350
have been developed with a specific

00:01:39,479 --> 00:01:42,350
purpose in mind

00:01:44,260 --> 00:01:52,000
there's a few criteria which most

00:01:48,700 --> 00:01:54,850
embedded devices fit and it can cause a

00:01:52,000 --> 00:01:58,270
problem for things like running Python

00:01:54,850 --> 00:02:01,390
on them basically they generally have a

00:01:58,270 --> 00:02:05,260
fairly slow CPUs though that's changing

00:02:01,390 --> 00:02:08,670
much of this is changing relatively low

00:02:05,260 --> 00:02:12,810
amount of memory on them low storage

00:02:08,670 --> 00:02:17,200
talking sometimes k sometimes megabytes

00:02:12,810 --> 00:02:22,240
rarely gigabytes but yeah as I said this

00:02:17,200 --> 00:02:27,010
is changing larger systems are starting

00:02:22,240 --> 00:02:29,890
to come out with faster processors so

00:02:27,010 --> 00:02:32,230
what's the problem more and more

00:02:29,890 --> 00:02:34,870
Internet devices embedded devices are

00:02:32,230 --> 00:02:38,590
becoming Internet enabled so we've got

00:02:34,870 --> 00:02:41,170
the Internet of Things it typically

00:02:38,590 --> 00:02:43,090
means that there's going to be a web

00:02:41,170 --> 00:02:45,490
interface on these devices and that's

00:02:43,090 --> 00:02:50,410
used for configuration and management of

00:02:45,490 --> 00:02:53,350
the devices so what's the problem with

00:02:50,410 --> 00:02:56,080
this well I don't know if you've looked

00:02:53,350 --> 00:03:03,519
at your router's recently or any other

00:02:56,080 --> 00:03:05,140
devices but they're just awful these

00:03:03,519 --> 00:03:07,180
aren't the worst ones I found it's just

00:03:05,140 --> 00:03:09,000
that some of the really bad ones I know

00:03:07,180 --> 00:03:12,070
the people who've developed them so I

00:03:09,000 --> 00:03:20,200
didn't feel it was nice to put them on

00:03:12,070 --> 00:03:23,700
on display here so why why are they so

00:03:20,200 --> 00:03:27,340
bad well primarily it's because

00:03:23,700 --> 00:03:31,200
engineers development designed by

00:03:27,340 --> 00:03:31,200
engineer on a user interface is not good

00:03:31,230 --> 00:03:39,400
but that's not the only problem that's

00:03:33,370 --> 00:03:44,140
just being a bit flippant I think really

00:03:39,400 --> 00:03:47,380
it's because they're typically developed

00:03:44,140 --> 00:03:48,989
on fairly tight budgets a lot of the

00:03:47,380 --> 00:03:51,870
smaller embedded devices out there

00:03:48,989 --> 00:03:55,329
industrial devices and things like that

00:03:51,870 --> 00:03:57,250
typically being designed by very small

00:03:55,329 --> 00:03:59,320
firms

00:03:57,250 --> 00:04:02,670
so they don't have a lot of resources to

00:03:59,320 --> 00:04:04,540
spend on things like user interfaces and

00:04:02,670 --> 00:04:08,920
previously they haven't really had to

00:04:04,540 --> 00:04:10,570
worry about it the other thing is that

00:04:08,920 --> 00:04:13,210
the type of people who are coding on

00:04:10,570 --> 00:04:16,299
this they're much more interested in

00:04:13,210 --> 00:04:19,120
getting into the Royal functionality of

00:04:16,299 --> 00:04:22,120
whatever device they're creating they're

00:04:19,120 --> 00:04:23,830
not so interested in people and so they

00:04:22,120 --> 00:04:27,130
don't really care so much about how

00:04:23,830 --> 00:04:31,690
those people configure and use the

00:04:27,130 --> 00:04:36,760
device it's much more fun working on the

00:04:31,690 --> 00:04:38,350
rest of it anyway also configuration and

00:04:36,760 --> 00:04:40,419
management systems are typically left or

00:04:38,350 --> 00:04:45,610
left to the last minute partly for that

00:04:40,419 --> 00:04:48,550
reason they're developed on systems with

00:04:45,610 --> 00:04:55,720
minimal resources you don't really have

00:04:48,550 --> 00:04:57,910
a lot of code space ram cpu space to

00:04:55,720 --> 00:05:03,010
deal with user interfaces which can be

00:04:57,910 --> 00:05:08,290
quite large but as I said that's

00:05:03,010 --> 00:05:11,440
changing and when you do get around to

00:05:08,290 --> 00:05:13,930
doing that the amount of work that's

00:05:11,440 --> 00:05:19,740
involved in building those back-end

00:05:13,930 --> 00:05:19,740
systems to actually serve web pages and

00:05:20,070 --> 00:05:25,240
deal with all the checking of user

00:05:23,680 --> 00:05:31,300
interactions making sure no one's

00:05:25,240 --> 00:05:34,470
putting in the wrong text items whatever

00:05:31,300 --> 00:05:37,900
that actually takes a fair bit of code

00:05:34,470 --> 00:05:42,760
and these guys are writing in C and C++

00:05:37,900 --> 00:05:45,550
and there's a quite a lot of effort

00:05:42,760 --> 00:05:47,490
involved in writing that base of code

00:05:45,550 --> 00:05:49,990
that you need and there's not really

00:05:47,490 --> 00:05:52,540
huge numbers of frameworks around two

00:05:49,990 --> 00:05:56,229
years on that there's a few but not on a

00:05:52,540 --> 00:06:00,160
lot and what that means is that because

00:05:56,229 --> 00:06:03,610
good UX design is iterative you just

00:06:00,160 --> 00:06:07,120
can't go and write that base code test

00:06:03,610 --> 00:06:10,300
it find that someone wants to put this

00:06:07,120 --> 00:06:12,729
widget here or the slight functionality

00:06:10,300 --> 00:06:15,250
that widget might change and easily

00:06:12,729 --> 00:06:19,030
change it because the codes just not

00:06:15,250 --> 00:06:20,409
that simple one of the other problems is

00:06:19,030 --> 00:06:23,560
a lot of these companies really don't

00:06:20,409 --> 00:06:28,000
value UX there in industrial systems

00:06:23,560 --> 00:06:30,129
they're out at mines there in things

00:06:28,000 --> 00:06:34,419
like drag lines and shovels and trucks

00:06:30,129 --> 00:06:38,080
and they used to seeing ugly industrial

00:06:34,419 --> 00:06:40,900
systems so the people are used to it the

00:06:38,080 --> 00:06:47,500
companies don't care about it and lastly

00:06:40,900 --> 00:06:49,300
they're designed by engineers so why is

00:06:47,500 --> 00:06:54,550
it actually matter well the biggest

00:06:49,300 --> 00:06:56,729
problem is actually security if you have

00:06:54,550 --> 00:07:00,639
a system that is difficult to use

00:06:56,729 --> 00:07:02,979
difficult to find settings difficult to

00:07:00,639 --> 00:07:04,419
navigate people won't use it people

00:07:02,979 --> 00:07:07,030
won't be able to configure it properly

00:07:04,419 --> 00:07:09,460
and you end up with poorly configured

00:07:07,030 --> 00:07:11,560
devices which are insecure and this is a

00:07:09,460 --> 00:07:14,110
huge problem with things like wireless

00:07:11,560 --> 00:07:16,930
routers and routers in general a lot of

00:07:14,110 --> 00:07:19,090
people just pick it up run with the

00:07:16,930 --> 00:07:22,380
little app wizard that sometimes has it

00:07:19,090 --> 00:07:24,779
sometimes has and that's the end of it

00:07:22,380 --> 00:07:28,860
they don't care about all the things

00:07:24,779 --> 00:07:31,870
like setting different passwords

00:07:28,860 --> 00:07:36,029
disabling WEP on a wireless system

00:07:31,870 --> 00:07:38,610
because it can be trivially bypassed and

00:07:36,029 --> 00:07:40,990
the other problem is because they're

00:07:38,610 --> 00:07:43,180
typically left is the last minute thing

00:07:40,990 --> 00:07:45,430
they're not tested particularly well and

00:07:43,180 --> 00:07:53,650
they tend to have a lot of back doors in

00:07:45,430 --> 00:07:56,349
them other problems are that from a

00:07:53,650 --> 00:07:59,889
sales perspective people just won't buy

00:07:56,349 --> 00:08:02,680
your product if your product is not easy

00:07:59,889 --> 00:08:07,210
to use no one's going to want to buy out

00:08:02,680 --> 00:08:09,009
a second time that's for the business

00:08:07,210 --> 00:08:11,680
people in the room that look at it and

00:08:09,009 --> 00:08:13,060
go well security I don't care well

00:08:11,680 --> 00:08:15,819
you'll care when people don't want to

00:08:13,060 --> 00:08:19,930
buy a thing or your products sitting up

00:08:15,819 --> 00:08:22,360
there on slashdot or whatever tech site

00:08:19,930 --> 00:08:29,289
with people broadcasting that it's

00:08:22,360 --> 00:08:32,729
trivial to bypass everything in it so

00:08:29,289 --> 00:08:37,240
what can we do how do we overcome this

00:08:32,729 --> 00:08:40,050
well I think can help you as I said

00:08:37,240 --> 00:08:44,020
embedded devices typically low resources

00:08:40,050 --> 00:08:45,670
but they're starting to not be so you've

00:08:44,020 --> 00:08:49,029
got your raspberry PI's out there and

00:08:45,670 --> 00:08:50,890
the Raspberry Pi has I mean 60 Meg of

00:08:49,029 --> 00:08:53,649
RAM or something like that so we're not

00:08:50,890 --> 00:08:57,040
talking about systems that have Ches of

00:08:53,649 --> 00:08:59,440
ram and kays of flash anymore they're

00:08:57,040 --> 00:09:05,440
linux-based so you can put Python on a

00:08:59,440 --> 00:09:07,649
fairly easily you now have tens to

00:09:05,440 --> 00:09:12,160
hundreds of megs of ram on the things

00:09:07,649 --> 00:09:14,860
large flash storage CPUs still not so

00:09:12,160 --> 00:09:17,649
fast but they do range up to the

00:09:14,860 --> 00:09:19,149
gigahertz range smaller systems like

00:09:17,649 --> 00:09:22,570
your typical routers are probably only

00:09:19,149 --> 00:09:26,350
going to be 100 to 200 megahertz but in

00:09:22,570 --> 00:09:27,970
applications like that you're not really

00:09:26,350 --> 00:09:30,040
going to have so many problems it's not

00:09:27,970 --> 00:09:32,680
like people are going to be consistently

00:09:30,040 --> 00:09:35,110
logged into them and using it as a web

00:09:32,680 --> 00:09:37,450
application constantly it's a configure

00:09:35,110 --> 00:09:40,890
once and every now and then you'll go to

00:09:37,450 --> 00:09:40,890
check on it for some diagnostics

00:09:45,180 --> 00:09:54,130
so once again good UX is an iterative

00:09:49,000 --> 00:09:56,170
process so if we use Python there's an

00:09:54,130 --> 00:09:57,940
awful lot of frameworks available you've

00:09:56,170 --> 00:09:59,710
already got that base code you can pull

00:09:57,940 --> 00:10:02,080
in a lots of different modules to do

00:09:59,710 --> 00:10:03,760
most of the stuff you need you can pull

00:10:02,080 --> 00:10:05,530
in web frameworks which you're going to

00:10:03,760 --> 00:10:08,200
be able to help you out and you don't

00:10:05,530 --> 00:10:12,340
need to spend that ridiculous amount of

00:10:08,200 --> 00:10:15,670
time just building a web server in C or

00:10:12,340 --> 00:10:18,910
C++ before you can even start looking at

00:10:15,670 --> 00:10:27,550
the user interface side of it so this is

00:10:18,910 --> 00:10:28,780
really going to help now there still are

00:10:27,550 --> 00:10:30,910
going to be some systems that don't

00:10:28,780 --> 00:10:33,820
won't be able to support something like

00:10:30,910 --> 00:10:36,130
Python but even in that case you can

00:10:33,820 --> 00:10:39,010
still use it so you can go and develop a

00:10:36,130 --> 00:10:44,470
Python web app and you can use that for

00:10:39,010 --> 00:10:46,120
your user interface development and go

00:10:44,470 --> 00:10:48,430
through that iterative process at the

00:10:46,120 --> 00:10:50,110
end you'll have a decent interface in

00:10:48,430 --> 00:10:52,120
front of you people will be able to use

00:10:50,110 --> 00:10:55,000
it and you can use that as a base to

00:10:52,120 --> 00:10:57,130
then go and build something that's

00:10:55,000 --> 00:11:00,400
smaller in whatever language you're

00:10:57,130 --> 00:11:02,680
choosing to do there's also instances

00:11:00,400 --> 00:11:04,960
where people don't really want to put

00:11:02,680 --> 00:11:06,760
something that's compiled on the machine

00:11:04,960 --> 00:11:09,400
or whether the source codes effectively

00:11:06,760 --> 00:11:14,170
available on their system so they're

00:11:09,400 --> 00:11:16,510
going to want to proprietary binary and

00:11:14,170 --> 00:11:17,770
to put on their system but if you can

00:11:16,510 --> 00:11:20,440
quickly go through that iterative

00:11:17,770 --> 00:11:23,010
process and actually work out what

00:11:20,440 --> 00:11:26,050
you're going to do on the system then

00:11:23,010 --> 00:11:28,540
it's a much smaller task for the guys to

00:11:26,050 --> 00:11:30,550
come in and then go okay well this is

00:11:28,540 --> 00:11:32,710
what you want we can develop the base

00:11:30,550 --> 00:11:34,870
code for that all the front-end works

00:11:32,710 --> 00:11:37,060
for the JavaScript CSS and whatnot is

00:11:34,870 --> 00:11:39,640
just going to come straight across you

00:11:37,060 --> 00:11:41,740
can fairly easily write templating

00:11:39,640 --> 00:11:43,300
systems that will match whatever

00:11:41,740 --> 00:11:46,080
templating system you decide to use

00:11:43,300 --> 00:11:46,080
under python

00:11:47,860 --> 00:11:55,640
so there's a few challenges to look out

00:11:50,089 --> 00:11:58,279
for okay so the first challenge will be

00:11:55,640 --> 00:12:00,320
your embedded developer they'll

00:11:58,279 --> 00:12:01,910
basically laugh at you hysterically when

00:12:00,320 --> 00:12:05,450
you say you want to put Python on their

00:12:01,910 --> 00:12:06,470
system so once they finish that and told

00:12:05,450 --> 00:12:09,050
you that it's going to use too much

00:12:06,470 --> 00:12:13,399
memory too much cpu too much storage

00:12:09,050 --> 00:12:16,730
which it does well you tell them it

00:12:13,399 --> 00:12:23,000
doesn't have to so here's what you need

00:12:16,730 --> 00:12:25,519
to do storage embedded devices don't

00:12:23,000 --> 00:12:28,700
have much storage what storage they have

00:12:25,519 --> 00:12:31,880
is typically not writable so that means

00:12:28,700 --> 00:12:33,769
that you can't have hip on there or easy

00:12:31,880 --> 00:12:38,050
install so if you're missing a module

00:12:33,769 --> 00:12:40,250
it's not trivial to just install it

00:12:38,050 --> 00:12:42,050
there's no editing of files on the

00:12:40,250 --> 00:12:45,730
device so during development you can't

00:12:42,050 --> 00:12:49,640
just go in and edit your pipe and file

00:12:45,730 --> 00:12:51,320
to get things up and running there's a

00:12:49,640 --> 00:12:54,699
bit of rigmarole you have to go through

00:12:51,320 --> 00:12:58,269
to do it but there's ways around this

00:12:54,699 --> 00:13:02,709
easiest is to the development on a pc

00:12:58,269 --> 00:13:07,480
now that obvious that seems obvious but

00:13:02,709 --> 00:13:12,170
it can lead to some inconsistencies not

00:13:07,480 --> 00:13:15,800
all Python is the same so once you pull

00:13:12,170 --> 00:13:18,050
it across to your embedded device it may

00:13:15,800 --> 00:13:20,209
not work perfectly so you need to make

00:13:18,050 --> 00:13:23,930
sure that you're testing on the device

00:13:20,209 --> 00:13:26,959
as well so sure develop on the pc but

00:13:23,930 --> 00:13:28,820
regularly test on the device assuming

00:13:26,959 --> 00:13:31,190
you have it because software dev

00:13:28,820 --> 00:13:36,199
typically starts before you have

00:13:31,190 --> 00:13:37,760
hardware available another option if

00:13:36,199 --> 00:13:39,829
it's a Linux system and you have enough

00:13:37,760 --> 00:13:42,680
RAM memory is just around a tempo fess

00:13:39,829 --> 00:13:44,930
system so basically running a file

00:13:42,680 --> 00:13:48,290
system in memory and then you can work

00:13:44,930 --> 00:13:52,010
in that or NFS to network attached

00:13:48,290 --> 00:13:55,940
storage on the system's so there's a few

00:13:52,010 --> 00:13:59,120
ways around it the next thing is memory

00:13:55,940 --> 00:14:01,550
ah memory it uses a lot

00:13:59,120 --> 00:14:04,370
of memory anyone who tells you pipe and

00:14:01,550 --> 00:14:05,839
doesn't is not really an embedded

00:14:04,370 --> 00:14:12,020
developer and doesn't understand what a

00:14:05,839 --> 00:14:14,750
lot of memory is so once again there's

00:14:12,020 --> 00:14:17,870
ways around it hyphen is modular can be

00:14:14,750 --> 00:14:19,430
compiled majority so you can pull down

00:14:17,870 --> 00:14:21,380
the size of it you can pull down the

00:14:19,430 --> 00:14:23,270
storage size of it you can pull down the

00:14:21,380 --> 00:14:28,670
amount of memory it's going to use there

00:14:23,270 --> 00:14:32,990
are a few embedded flavors of Python out

00:14:28,670 --> 00:14:34,580
there you don't have to use C Python you

00:14:32,990 --> 00:14:38,589
need to make sure that you're strict

00:14:34,580 --> 00:14:38,589
with memory allocation and de-allocation

00:14:39,430 --> 00:14:44,360
profile make sure your profile

00:14:42,080 --> 00:14:50,000
everything understand what your codes

00:14:44,360 --> 00:14:53,440
doing understand what what the impact of

00:14:50,000 --> 00:14:55,970
things you are doing will be and

00:14:53,440 --> 00:14:58,010
profiling is easiest way to do that also

00:14:55,970 --> 00:15:02,450
obviously understanding the language

00:14:58,010 --> 00:15:04,690
further Python has a lot of built-in

00:15:02,450 --> 00:15:07,459
ways of doing things which can help you

00:15:04,690 --> 00:15:12,920
use them so you've got generator

00:15:07,459 --> 00:15:15,890
expressions is those rather than storing

00:15:12,920 --> 00:15:17,540
large amounts of data in memory use the

00:15:15,890 --> 00:15:20,330
correct containers for the data types

00:15:17,540 --> 00:15:22,790
that you have so tuples for mutable

00:15:20,330 --> 00:15:27,170
lists Python arrays for arrays of

00:15:22,790 --> 00:15:29,870
numbers essentially act like you would

00:15:27,170 --> 00:15:34,520
if you are writing embedded code in C or

00:15:29,870 --> 00:15:36,830
C++ C++ was something that a lot of

00:15:34,520 --> 00:15:39,529
people shied away from for embedded code

00:15:36,830 --> 00:15:40,910
for a long time some still do and it was

00:15:39,529 --> 00:15:42,529
basically because there's a lot of

00:15:40,910 --> 00:15:45,050
people there that just don't understand

00:15:42,529 --> 00:15:47,510
what the implications of using certain

00:15:45,050 --> 00:15:50,170
features are you don't have to use them

00:15:47,510 --> 00:15:53,570
all so use what's suitable for your

00:15:50,170 --> 00:15:56,230
system your software system and your

00:15:53,570 --> 00:15:56,230
hardware system

00:15:56,520 --> 00:16:01,540
speed is the other problem and we're

00:15:59,470 --> 00:16:05,230
still running on fairly low-speed CPUs

00:16:01,540 --> 00:16:10,090
as I said so while they've gotten faster

00:16:05,230 --> 00:16:12,930
they're not desktops pythons great

00:16:10,090 --> 00:16:15,970
though it allows you to really easily

00:16:12,930 --> 00:16:19,180
implement C and C++ libraries that you

00:16:15,970 --> 00:16:22,900
can link into so profile I'm sure we've

00:16:19,180 --> 00:16:24,460
got profiling in there again yes profile

00:16:22,900 --> 00:16:27,310
profile profile if there's something

00:16:24,460 --> 00:16:30,730
that is taking up too much time look at

00:16:27,310 --> 00:16:32,170
it can it be moved to another language

00:16:30,730 --> 00:16:39,960
something that's going to run a little

00:16:32,170 --> 00:16:41,830
bit quicker if it can do it threading on

00:16:39,960 --> 00:16:47,620
embedded systems you're typically going

00:16:41,830 --> 00:16:49,530
to have single CPUs single pools so you

00:16:47,620 --> 00:16:51,670
need to think about that and

00:16:49,530 --> 00:16:57,310
asynchronous i/o is typically the way to

00:16:51,670 --> 00:16:59,320
go so use Greenland sanji event that'll

00:16:57,310 --> 00:17:00,940
make things a lot easier for you there

00:16:59,320 --> 00:17:04,300
are a few embedded systems out there

00:17:00,940 --> 00:17:07,390
that have multiple cores in it but still

00:17:04,300 --> 00:17:14,140
you want to do the best you can so use

00:17:07,390 --> 00:17:19,090
those profiling again yes know what your

00:17:14,140 --> 00:17:21,760
system is doing and a lesson pulling can

00:17:19,090 --> 00:17:24,790
be evil now that's to do with we have a

00:17:21,760 --> 00:17:27,310
client who asked us to write a web

00:17:24,790 --> 00:17:30,430
interface to some data systems that they

00:17:27,310 --> 00:17:35,290
had we had to do it in a bit of a hurry

00:17:30,430 --> 00:17:38,410
for them that we wrote all that it works

00:17:35,290 --> 00:17:41,200
it's fine it runs on servers and

00:17:38,410 --> 00:17:42,970
desktops really it would be nice for

00:17:41,200 --> 00:17:46,300
these guys to be able to put it onto an

00:17:42,970 --> 00:17:48,730
embedded system so when they're selling

00:17:46,300 --> 00:17:51,790
their product to smaller clients it's a

00:17:48,730 --> 00:17:53,140
it's in the transport industry and so

00:17:51,790 --> 00:17:54,820
when they're selling to smaller clients

00:17:53,140 --> 00:17:56,920
they can just give an appliance server

00:17:54,820 --> 00:17:58,360
rather than having to go and tell these

00:17:56,920 --> 00:18:00,520
small clients all you need to buy a

00:17:58,360 --> 00:18:02,560
server with these specs and you need to

00:18:00,520 --> 00:18:05,740
then install windows or Linux or

00:18:02,560 --> 00:18:08,710
whatever you're installing so embedded

00:18:05,740 --> 00:18:09,880
systems would be great but what they ask

00:18:08,710 --> 00:18:13,450
for won't actually work

00:18:09,880 --> 00:18:16,900
and that's because the dashboard they

00:18:13,450 --> 00:18:19,960
have has three tables in it which

00:18:16,900 --> 00:18:23,560
upholds every five seconds or so one of

00:18:19,960 --> 00:18:26,250
those tables has about 100 columns in it

00:18:23,560 --> 00:18:30,310
which is sorta bull on a per-user basis

00:18:26,250 --> 00:18:32,350
another one is just a list of alarms or

00:18:30,310 --> 00:18:35,530
events that come through and another one

00:18:32,350 --> 00:18:38,580
is just a counter of alarm so that they

00:18:35,530 --> 00:18:41,500
can notify people and sent set off

00:18:38,580 --> 00:18:44,500
noises and what not to alert people that

00:18:41,500 --> 00:18:45,940
something's going on now this is fine on

00:18:44,500 --> 00:18:47,980
a server but when you're on an only

00:18:45,940 --> 00:18:50,920
embedded device I think it took up about

00:18:47,980 --> 00:18:53,560
twenty-five percent CPU usage when one

00:18:50,920 --> 00:18:57,580
person was looking on it on the

00:18:53,560 --> 00:19:00,000
dashboard on a gigahertz CPU so that's

00:18:57,580 --> 00:19:02,830
obviously not going to scale very well

00:19:00,000 --> 00:19:07,210
for people your system doesn't work

00:19:02,830 --> 00:19:11,170
anymore so bowling can be evil use web

00:19:07,210 --> 00:19:16,270
sockets where appropriate so code like

00:19:11,170 --> 00:19:19,240
that can fairly easily be rejigged so

00:19:16,270 --> 00:19:21,400
that you can do web sockets and the

00:19:19,240 --> 00:19:25,000
alarm stuff is all events so that can

00:19:21,400 --> 00:19:28,000
just be sent out as needed and even the

00:19:25,000 --> 00:19:30,540
polling of the main table in there can

00:19:28,000 --> 00:19:33,130
fairly easily be done with WebSockets

00:19:30,540 --> 00:19:37,900
but that comes back to know your code

00:19:33,130 --> 00:19:40,090
now the guys that had been working on

00:19:37,900 --> 00:19:41,920
this previously probably wouldn't even

00:19:40,090 --> 00:19:43,960
know that okay well this is going to

00:19:41,920 --> 00:19:45,340
cause problems but when they get a

00:19:43,960 --> 00:19:48,280
hundred people on it even on a server

00:19:45,340 --> 00:19:52,480
it's going to cause issues because the

00:19:48,280 --> 00:19:54,280
CPU usage is it it's linear so while it

00:19:52,480 --> 00:19:56,650
might be twenty five percent on our

00:19:54,280 --> 00:19:59,230
little embedded device it's five percent

00:19:56,650 --> 00:20:00,490
on the server so that quickly gets up to

00:19:59,230 --> 00:20:03,330
a hundred percent once you've got a lot

00:20:00,490 --> 00:20:03,330
of people in the system

00:20:04,019 --> 00:20:10,720
okay and lastly avoid large frameworks

00:20:08,190 --> 00:20:12,669
another Django guys are here and that's

00:20:10,720 --> 00:20:19,029
great but it's not going to work on an

00:20:12,669 --> 00:20:21,850
embedded system so flask bottle and

00:20:19,029 --> 00:20:25,450
pyramid reasonable for these things

00:20:21,850 --> 00:20:28,779
pyramids fairly big but for us we've got

00:20:25,450 --> 00:20:31,499
more than enough resources to use it and

00:20:28,779 --> 00:20:33,879
it's just a bit nicer because you can

00:20:31,499 --> 00:20:37,929
you can tailor it a little bit better to

00:20:33,879 --> 00:20:41,230
what you're doing so for us our

00:20:37,929 --> 00:20:43,809
application stack is we're using engine

00:20:41,230 --> 00:20:48,070
X so that we can basically do HTTPS

00:20:43,809 --> 00:20:50,830
proxy there's a G event application

00:20:48,070 --> 00:20:54,759
server let's say that we can easily tie

00:20:50,830 --> 00:20:56,739
into web sockets we've got our

00:20:54,759 --> 00:20:59,080
diagnostic section which shows network

00:20:56,739 --> 00:21:01,889
throughput and a few other little system

00:20:59,080 --> 00:21:04,989
little things and that's just done by

00:21:01,889 --> 00:21:07,179
WebSockets the pyramid framework which

00:21:04,989 --> 00:21:10,629
shows that basically because it just

00:21:07,179 --> 00:21:13,539
rolls authentication into it we've used

00:21:10,629 --> 00:21:15,279
it before you can choose your templating

00:21:13,539 --> 00:21:17,429
language you can you just have a lot of

00:21:15,279 --> 00:21:19,899
options in how you configure it and

00:21:17,429 --> 00:21:21,489
client solid we went with pattern fly

00:21:19,899 --> 00:21:27,759
which is something red hat just came out

00:21:21,489 --> 00:21:29,019
with they're trying to try to change the

00:21:27,759 --> 00:21:32,830
user interfaces in a lot of their

00:21:29,019 --> 00:21:34,960
systems so that the configuration is the

00:21:32,830 --> 00:21:36,970
same across different products so we

00:21:34,960 --> 00:21:38,350
just felt well why not use there so

00:21:36,970 --> 00:21:40,929
people who are using readout systems

00:21:38,350 --> 00:21:44,350
will understand it and more easily know

00:21:40,929 --> 00:21:48,190
what to do we're probably not going to

00:21:44,350 --> 00:21:51,279
have time for a demo are we oh yeah okay

00:21:48,190 --> 00:21:55,450
we'll try a quick one so a quick demo

00:21:51,279 --> 00:21:58,960
has anyone used pyramid before okay so

00:21:55,450 --> 00:22:02,139
if you that's cool so we'll do as much

00:21:58,960 --> 00:22:04,749
of this as we can in a time allotted and

00:22:02,139 --> 00:22:07,570
basically will create a virtual

00:22:04,749 --> 00:22:09,700
environment I'm sure most of you can do

00:22:07,570 --> 00:22:13,389
that

00:22:09,700 --> 00:22:16,630
create a standard pyramid up then I'll

00:22:13,389 --> 00:22:18,370
just show you the the rough layout of

00:22:16,630 --> 00:22:20,289
pyramid and what we've done when we

00:22:18,370 --> 00:22:22,600
plugged in some client side the client

00:22:20,289 --> 00:22:27,720
side information so the bootstrap

00:22:22,600 --> 00:22:27,720
pattern fly system and authentication

00:22:43,200 --> 00:22:48,660
ok so I can't actually see what's going

00:22:49,290 --> 00:22:55,740
ok great ok so we've got this here I've

00:22:53,950 --> 00:22:59,550
actually created an environment already

00:22:55,740 --> 00:23:04,270
but if anyone doesn't know how to do it

00:22:59,550 --> 00:23:10,410
I'm sure you do virtual mm too we're

00:23:04,270 --> 00:23:15,180
running Python 2.7 here so not three

00:23:10,410 --> 00:23:15,180
environments created we're all good

00:23:24,070 --> 00:23:29,190
activate your environment so this is the

00:23:26,170 --> 00:23:29,190
environment that I've already created

00:23:32,850 --> 00:23:38,920
bring down pyramid it's already

00:23:36,370 --> 00:23:40,810
installed so don't have any of these

00:23:38,920 --> 00:23:42,990
little networking issues that often

00:23:40,810 --> 00:23:42,990
happens

00:23:48,470 --> 00:23:54,679
and P create minus T there's some

00:23:52,700 --> 00:23:57,500
templates that you can correct in Python

00:23:54,679 --> 00:24:00,740
and pyramid sorry I think there's two to

00:23:57,500 --> 00:24:05,809
fourth ones start up and an SQL alchemy

00:24:00,740 --> 00:24:11,419
one and the directory you want to put it

00:24:05,809 --> 00:24:15,440
in there you go created have a look in

00:24:11,419 --> 00:24:16,760
here and that's your basic web framework

00:24:15,440 --> 00:24:21,220
so it's got everything that's in there

00:24:16,760 --> 00:24:34,870
so that it can answer website answer a

00:24:21,220 --> 00:24:38,720
get and serve a web page install all the

00:24:34,870 --> 00:24:41,570
things required for it and then just p

00:24:38,720 --> 00:24:52,120
serve is a web server that comes with

00:24:41,570 --> 00:24:52,120
thumb pyramid and it's running

00:24:54,900 --> 00:24:58,500
we got here

00:25:01,320 --> 00:25:07,570
there you go what about running now to

00:25:05,920 --> 00:25:16,110
get to that point if you were doing in C

00:25:07,570 --> 00:25:19,300
and C++ is a long time I'm don't you bro

00:25:16,110 --> 00:25:26,790
it's a few days if you were doing it

00:25:19,300 --> 00:25:26,790
from scratch and added back for okay and

00:25:32,160 --> 00:25:37,140
is one we did yeah

00:25:56,450 --> 00:26:05,610
and there is a basic low in screen with

00:26:02,030 --> 00:26:12,840
authentication basic authentication we

00:26:05,610 --> 00:26:18,420
can log in what's that a minute John

00:26:12,840 --> 00:26:20,820
okay narrow exciting I was going to show

00:26:18,420 --> 00:26:27,270
you the code but we don't have time but

00:26:20,820 --> 00:26:29,190
it's about 20 lines of code I've actual

00:26:27,270 --> 00:26:31,950
code that you have to right now to do

00:26:29,190 --> 00:26:36,390
that in C and C++ is going to take you a

00:26:31,950 --> 00:26:45,690
good week week or two depending on who

00:26:36,390 --> 00:26:49,410
you are so to finish up web interfaces

00:26:45,690 --> 00:26:53,100
on develop on embedded systems or fall

00:26:49,410 --> 00:26:54,570
you can change it the only way to change

00:26:53,100 --> 00:26:57,030
it is to convince your company your

00:26:54,570 --> 00:26:59,370
developers the people you buy off to do

00:26:57,030 --> 00:27:01,320
it pythons a great way to work through

00:26:59,370 --> 00:27:03,900
that iterative process and get decent

00:27:01,320 --> 00:27:09,950
systems up profile your code and have

00:27:03,900 --> 00:27:09,950
fun developing thank you for much

00:27:15,549 --> 00:27:17,610

YouTube URL: https://www.youtube.com/watch?v=scgudhbfmjA


