Title: Science MiniConf: Python for Bioinformatics by Clare Sloggett
Publication date: 2014-08-11
Playlist: PyCon Australia 2014 Science & Data miniconf
Description: 
	PyCon Australia is the national conference for users of the Python Programming Language. In August 2014, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

August 1-5, Brisbane, Queensland, Australia
Captions: 
	00:00:05,910 --> 00:00:13,300
next up is claire slaw great claire

00:00:10,450 --> 00:00:15,790
works as a bioinformatician and research

00:00:13,300 --> 00:00:17,560
fellow at the victorian life sciences

00:00:15,790 --> 00:00:21,640
computing initiative at Melbourne

00:00:17,560 --> 00:00:23,560
University and her research interests

00:00:21,640 --> 00:00:26,830
include next-generation sequence

00:00:23,560 --> 00:00:33,550
analysis cancer genetics and statistical

00:00:26,830 --> 00:00:35,830
methods so claire has a bachelor

00:00:33,550 --> 00:00:37,390
bachelors in science with honours and a

00:00:35,830 --> 00:00:41,350
PhD from the University of New South

00:00:37,390 --> 00:00:46,799
Wales and she's part of the nectar

00:00:41,350 --> 00:00:46,799
funded genomics virtual lab project okay

00:01:15,409 --> 00:01:21,390
if you've arrived recently there's a

00:01:19,470 --> 00:01:24,270
Wi-Fi password on this our whiteboard

00:01:21,390 --> 00:01:34,439
here and we'll be having yummy cated

00:01:24,270 --> 00:01:42,920
morning tea after this talk yes okay

00:01:34,439 --> 00:01:48,210
please give a warm welcome to Claire um

00:01:42,920 --> 00:01:49,920
hi I'm I'm honored to be speaking so I'm

00:01:48,210 --> 00:01:51,090
going to be talking about Python for

00:01:49,920 --> 00:01:54,590
bioinformatics I don't know how many

00:01:51,090 --> 00:01:57,090
people in the room I've life sciences

00:01:54,590 --> 00:01:58,740
okay handful but not a huge number it's

00:01:57,090 --> 00:02:02,280
probably good that it's not a huge

00:01:58,740 --> 00:02:04,500
number because I'm going to UM because

00:02:02,280 --> 00:02:07,380
since I've got a reasonably long flight

00:02:04,500 --> 00:02:11,700
I've got like 40 minutes so working just

00:02:07,380 --> 00:02:16,799
having some huge me by my slides have

00:02:11,700 --> 00:02:18,180
been taken away okay um so I think I've

00:02:16,799 --> 00:02:19,560
got enough time to try to give you a bit

00:02:18,180 --> 00:02:21,420
of an introduction to genomics itself

00:02:19,560 --> 00:02:23,130
which is a little bit off topic for the

00:02:21,420 --> 00:02:27,019
Python stuff but it's very interesting

00:02:23,130 --> 00:02:29,820
and it means that you have some idea

00:02:27,019 --> 00:02:32,609
what the genomic data looks like and

00:02:29,820 --> 00:02:38,810
what it means which i think is is

00:02:32,609 --> 00:02:41,340
important for talking about the code and

00:02:38,810 --> 00:02:42,390
I'm going to try to not spend too long

00:02:41,340 --> 00:02:44,790
talking because I want to do a little

00:02:42,390 --> 00:02:47,880
bit of a demo at the end so at the end I

00:02:44,790 --> 00:02:52,019
will get to just a fairly arbitrarily

00:02:47,880 --> 00:02:55,200
chosen example of how using ipad and

00:02:52,019 --> 00:02:57,450
notebook has changed the way I work and

00:02:55,200 --> 00:02:59,730
a real analysis that I've I've done with

00:02:57,450 --> 00:03:02,420
it and just show a small project I've

00:02:59,730 --> 00:03:02,420
been working on as well

00:03:03,650 --> 00:03:10,980
so how life works so this may sound

00:03:07,230 --> 00:03:13,409
ambitious I'm going to not assume too

00:03:10,980 --> 00:03:15,360
much knowledge I assume that kind of

00:03:13,409 --> 00:03:16,799
everyone in this day and age tends to

00:03:15,360 --> 00:03:18,659
have at least seen the picture of the

00:03:16,799 --> 00:03:21,209
spiral molecule like you have some vague

00:03:18,659 --> 00:03:26,030
idea that DNA is this spiral molecule

00:03:21,209 --> 00:03:28,470
and that it stores information maybe um

00:03:26,030 --> 00:03:29,879
so I'm going to start with this this

00:03:28,470 --> 00:03:32,760
really basic stuff it is a spiral

00:03:29,879 --> 00:03:35,640
molecule it stores your genetic

00:03:32,760 --> 00:03:37,200
information there's a copy of your DNA

00:03:35,640 --> 00:03:38,670
in every cell in your body and it's the

00:03:37,200 --> 00:03:40,410
same information stored in every cell

00:03:38,670 --> 00:03:43,739
and it stores it as a four letter code

00:03:40,410 --> 00:03:45,390
so you've probably seen that four-letter

00:03:43,739 --> 00:03:48,629
code written I mean if you've seen this

00:03:45,390 --> 00:03:50,129
movie then the net in gattaca is kind of

00:03:48,629 --> 00:03:52,560
pun on this code because the four

00:03:50,129 --> 00:03:56,599
letters we use those for later DNA uses

00:03:52,560 --> 00:03:58,920
a JC and T so it's built out of four

00:03:56,599 --> 00:04:01,950
nearly identical building blocks for

00:03:58,920 --> 00:04:04,319
building blocks which we abbreviate as

00:04:01,950 --> 00:04:06,000
agent cgt and when we write our data

00:04:04,319 --> 00:04:08,489
that we read from the genetic code

00:04:06,000 --> 00:04:12,209
that's how we write it um it's double

00:04:08,489 --> 00:04:14,010
stranded because firstly that's kind of

00:04:12,209 --> 00:04:18,120
stable protects the information it's

00:04:14,010 --> 00:04:23,340
hard to mutate it and secondly it makes

00:04:18,120 --> 00:04:26,880
it easy to copy so these bases are

00:04:23,340 --> 00:04:30,660
complementary a only binds roughly a

00:04:26,880 --> 00:04:32,639
only binds the T G only binds to see so

00:04:30,660 --> 00:04:35,160
on each strand you've got what we call

00:04:32,639 --> 00:04:37,590
the complement of the information on the

00:04:35,160 --> 00:04:38,880
other strand which means if you want to

00:04:37,590 --> 00:04:41,520
make a copy all you have to do is unzip

00:04:38,880 --> 00:04:43,380
the DNA and stick on the complementary

00:04:41,520 --> 00:04:45,690
bases and now you've got two copies of

00:04:43,380 --> 00:04:48,479
your original DNA and this is what sells

00:04:45,690 --> 00:04:50,430
actually do when they divide when they

00:04:48,479 --> 00:04:52,910
replicate and make new cells in order to

00:04:50,430 --> 00:04:52,910
copy the information

00:04:56,320 --> 00:05:03,890
so this is what the information looks

00:04:59,840 --> 00:05:06,020
like this is point zero zero zero zero

00:05:03,890 --> 00:05:07,700
three percent of human genome it's

00:05:06,020 --> 00:05:09,950
actually the human genome I took the

00:05:07,700 --> 00:05:11,900
giant text file which is what we use to

00:05:09,950 --> 00:05:13,490
represent the human genome and I cut and

00:05:11,900 --> 00:05:15,550
paste it a bit out of it so if I showed

00:05:13,490 --> 00:05:20,390
you three million slides like this I

00:05:15,550 --> 00:05:24,140
described a person so if I got lots of

00:05:20,390 --> 00:05:26,080
time left over at the end um so there's

00:05:24,140 --> 00:05:29,300
probably about a thousand bases on there

00:05:26,080 --> 00:05:31,040
sorry if I say basis I mean letters we

00:05:29,300 --> 00:05:34,400
call the nucleotides DNA is made up of

00:05:31,040 --> 00:05:42,350
bases and there's about three billion in

00:05:34,400 --> 00:05:44,090
the human genome so if I show you three

00:05:42,350 --> 00:05:45,590
million slides like this I would have

00:05:44,090 --> 00:05:47,210
described a person but it wouldn't be

00:05:45,590 --> 00:05:51,320
very informative because it just says

00:05:47,210 --> 00:05:53,570
you know CAG actg gt8 and what does that

00:05:51,320 --> 00:05:55,490
mean so when we talk about the human

00:05:53,570 --> 00:05:57,650
genome we do mean a giant set of

00:05:55,490 --> 00:05:59,600
sequences like this but we also mean a

00:05:57,650 --> 00:06:01,910
database of the variations the common

00:05:59,600 --> 00:06:04,940
variations between individuals because I

00:06:01,910 --> 00:06:06,500
say this is the human genome obviously

00:06:04,940 --> 00:06:10,880
we're not all identical so whose genome

00:06:06,500 --> 00:06:14,930
is this yeah it's probably mostly a rich

00:06:10,880 --> 00:06:16,610
white men student but so we saw this and

00:06:14,930 --> 00:06:17,960
we also store a database of common

00:06:16,610 --> 00:06:19,760
differences between people and we also

00:06:17,960 --> 00:06:21,500
still a set of what we call annotations

00:06:19,760 --> 00:06:24,500
so for instance which bits of this

00:06:21,500 --> 00:06:26,450
sequence describe a gene right and what

00:06:24,500 --> 00:06:27,800
is that gene so there'll be some portion

00:06:26,450 --> 00:06:32,810
of this sequence which is the gene for

00:06:27,800 --> 00:06:34,090
insulin for instance and so the other

00:06:32,810 --> 00:06:37,280
thing I'm going to talk about in this

00:06:34,090 --> 00:06:39,320
quick little introduction is proteins

00:06:37,280 --> 00:06:42,700
and the reason I'm talking about

00:06:39,320 --> 00:06:45,140
proteins is that they are kind of

00:06:42,700 --> 00:06:47,060
probably the most important organic

00:06:45,140 --> 00:06:50,810
molecule a they form little molecular

00:06:47,060 --> 00:06:52,580
machines and catalysts and they do most

00:06:50,810 --> 00:06:53,750
of the interesting and complex work in

00:06:52,580 --> 00:06:55,280
your body so they've they're building

00:06:53,750 --> 00:06:58,280
blocks like muscle fibers for instance

00:06:55,280 --> 00:06:59,600
of proteins ion pumps that embed

00:06:58,280 --> 00:07:03,830
themselves in the walls of cells and

00:06:59,600 --> 00:07:04,880
pump ions in and out enzymes which are

00:07:03,830 --> 00:07:06,590
machinery are the machinery that

00:07:04,880 --> 00:07:07,340
actually does the copying of DNA for

00:07:06,590 --> 00:07:10,340
instance has made

00:07:07,340 --> 00:07:12,680
proteins so if you know how to build

00:07:10,340 --> 00:07:15,530
proteins given some DNA you know a

00:07:12,680 --> 00:07:17,270
fairly important chunk of how life works

00:07:15,530 --> 00:07:21,800
so that's the chunk of stuff I'm trying

00:07:17,270 --> 00:07:24,919
to tell you about here so this is an

00:07:21,800 --> 00:07:25,910
overview of that process and I won't

00:07:24,919 --> 00:07:27,979
have time to go into it in as much

00:07:25,910 --> 00:07:30,020
detail as I'd like but very roughly that

00:07:27,979 --> 00:07:33,680
process is you have DNA and some portion

00:07:30,020 --> 00:07:35,630
of that DNA encodes a gene that portion

00:07:33,680 --> 00:07:37,820
of DNA is what we call transcribed

00:07:35,630 --> 00:07:39,979
copied into RNA which is a single

00:07:37,820 --> 00:07:42,229
stranded molecule that contains exactly

00:07:39,979 --> 00:07:46,610
the same information but it's more

00:07:42,229 --> 00:07:48,200
accessible and then that code is used to

00:07:46,610 --> 00:07:49,280
build a protein I'm not going to play

00:07:48,200 --> 00:07:51,020
this video because I don't think I have

00:07:49,280 --> 00:07:53,900
time but if you get the slides and you

00:07:51,020 --> 00:07:55,760
want to it's a little molecular dynamics

00:07:53,900 --> 00:08:01,010
simulation of these processes in action

00:07:55,760 --> 00:08:03,979
and it's really cool so what do I mean

00:08:01,010 --> 00:08:05,510
by the genetic code it's well the cool

00:08:03,979 --> 00:08:07,789
thing that we mean there's arguably a

00:08:05,510 --> 00:08:10,520
lot more to it now but a really

00:08:07,789 --> 00:08:12,889
important aspect of it is this process

00:08:10,520 --> 00:08:15,530
of describing how you make a protein so

00:08:12,889 --> 00:08:17,780
protein is actually a chain of amino

00:08:15,530 --> 00:08:18,830
acids so where DNA is made of four

00:08:17,780 --> 00:08:21,410
different types of building blocks

00:08:18,830 --> 00:08:26,120
proteins made of 20 different building

00:08:21,410 --> 00:08:28,430
blocks and they form a chain and that

00:08:26,120 --> 00:08:30,380
chain folds into shape so when you see

00:08:28,430 --> 00:08:33,560
this thing this is actually one long

00:08:30,380 --> 00:08:35,810
chain just fold it up and the different

00:08:33,560 --> 00:08:37,070
properties of the amino acids help it to

00:08:35,810 --> 00:08:39,039
fold into the right shape so some a

00:08:37,070 --> 00:08:40,880
flexible and so a rigid summer

00:08:39,039 --> 00:08:42,289
hydrophobic so they try to get away from

00:08:40,880 --> 00:08:47,720
the surrounding water and going to the

00:08:42,289 --> 00:08:50,330
middle of the protein and so on so if

00:08:47,720 --> 00:08:51,950
you're going to build a chain of twenty

00:08:50,330 --> 00:08:53,330
building blocks out of a chain of four

00:08:51,950 --> 00:08:56,089
building blocks you're going to need at

00:08:53,330 --> 00:08:59,330
least three letters of DNA to describe

00:08:56,089 --> 00:09:01,760
each amino acid because if you have to

00:08:59,330 --> 00:09:03,230
you can only have 16 unique sequences if

00:09:01,760 --> 00:09:05,390
you have three you can have 64 unique

00:09:03,230 --> 00:09:08,540
sequences and this is actually how it

00:09:05,390 --> 00:09:10,700
works so this is the table the codon

00:09:08,540 --> 00:09:14,959
table since each of these three letters

00:09:10,700 --> 00:09:16,700
is called a codon I don't think I

00:09:14,959 --> 00:09:17,209
explained the reason you're seeing

00:09:16,700 --> 00:09:19,939
eighth

00:09:17,209 --> 00:09:21,619
the G and you instead of T is that RNA

00:09:19,939 --> 00:09:25,339
uses a slightly chemically different

00:09:21,619 --> 00:09:28,399
place called uracil so a cg u is the

00:09:25,339 --> 00:09:30,850
code when it's in computer already so

00:09:28,399 --> 00:09:33,559
each of these three letter code ons

00:09:30,850 --> 00:09:36,410
describes an amino acid you'll also see

00:09:33,559 --> 00:09:39,259
that there is M is also used as the

00:09:36,410 --> 00:09:41,119
start codon so the protein starts here

00:09:39,259 --> 00:09:42,949
this is where you should start building

00:09:41,119 --> 00:09:44,809
and there's a few which means the stop

00:09:42,949 --> 00:09:48,730
codon and when the machinery gets to

00:09:44,809 --> 00:09:51,139
that point it stops let's go um and

00:09:48,730 --> 00:09:53,990
you'll also see that because 64 is more

00:09:51,139 --> 00:09:56,119
than 20 it's redundant so there are

00:09:53,990 --> 00:09:59,540
mutations that could occur which don't

00:09:56,119 --> 00:10:06,110
change the protein at all which we often

00:09:59,540 --> 00:10:06,920
call silent mutations okay so finally

00:10:06,110 --> 00:10:08,720
I'm just going to talk about one

00:10:06,920 --> 00:10:10,269
particular experimental technology there

00:10:08,720 --> 00:10:13,369
are lots of experimental technologies

00:10:10,269 --> 00:10:15,559
but this one is a source of a lot of the

00:10:13,369 --> 00:10:17,480
data that I deal with so this is for

00:10:15,559 --> 00:10:20,720
reading you've got DNA molecule and you

00:10:17,480 --> 00:10:24,079
want to get out a string but it tells

00:10:20,720 --> 00:10:27,290
you what it says this is the current

00:10:24,079 --> 00:10:29,329
technology for doing that um it's called

00:10:27,290 --> 00:10:31,759
next-generation DNA sequencing which is

00:10:29,329 --> 00:10:34,779
a name that doesn't have a lot of

00:10:31,759 --> 00:10:34,779
foresight in it

00:10:35,270 --> 00:10:40,520
I think they're now calling the next Lok

00:10:37,280 --> 00:10:44,240
third generation sequencing because this

00:10:40,520 --> 00:10:46,910
was actually second um so the problem is

00:10:44,240 --> 00:10:49,670
there's three billion letters in the

00:10:46,910 --> 00:10:52,820
human genome we cannot and even the

00:10:49,670 --> 00:10:54,470
longest chromosome is about a quarter of

00:10:52,820 --> 00:10:56,090
a billion letters long so a chromosome

00:10:54,470 --> 00:10:58,370
is a single molecule of DNA and your

00:10:56,090 --> 00:11:00,080
cell one really long molecule of DNA if

00:10:58,370 --> 00:11:03,440
you want to read the entire chromosome

00:11:00,080 --> 00:11:04,460
which ideally is what we'd like it's the

00:11:03,440 --> 00:11:07,010
longest of them is a quarter of a

00:11:04,460 --> 00:11:08,210
billion letters long in humans and we

00:11:07,010 --> 00:11:09,470
can't read that one like we don't have a

00:11:08,210 --> 00:11:10,910
technology to do that so what we

00:11:09,470 --> 00:11:12,740
actually do is cut it into lots of

00:11:10,910 --> 00:11:15,110
little pieces and read the little pieces

00:11:12,740 --> 00:11:16,310
and because you're going to miss some we

00:11:15,110 --> 00:11:18,830
cut it into lots of little pieces then

00:11:16,310 --> 00:11:21,410
copy them using the DNA copying enzymes

00:11:18,830 --> 00:11:23,720
and then read them which means we'll

00:11:21,410 --> 00:11:25,460
read some of them many times or some

00:11:23,720 --> 00:11:28,070
parts of the genome any times and will

00:11:25,460 --> 00:11:30,980
miss some bits so that's the nature of

00:11:28,070 --> 00:11:33,590
the the data that we're given today

00:11:30,980 --> 00:11:36,380
always and when I say you cut it into

00:11:33,590 --> 00:11:38,960
short reads at the moment that's

00:11:36,380 --> 00:11:43,070
probably likely to be like 150 base

00:11:38,960 --> 00:11:44,600
pairs 150 letters long when I started

00:11:43,070 --> 00:11:47,930
working in this field like three years

00:11:44,600 --> 00:11:51,080
ago it was 36 so it's it is technologies

00:11:47,930 --> 00:11:55,820
actually changing quite a lot but it's

00:11:51,080 --> 00:11:56,840
still a lot less than 3 billion so just

00:11:55,820 --> 00:11:59,570
to give you an idea what you would do

00:11:56,840 --> 00:12:01,040
with this data the two most common very

00:11:59,570 --> 00:12:05,750
first things you do when you've got lots

00:12:01,040 --> 00:12:07,100
of short strings 150 letters long the

00:12:05,750 --> 00:12:09,170
obvious one is you might just try to

00:12:07,100 --> 00:12:10,250
look at how they overlap and reassemble

00:12:09,170 --> 00:12:11,320
the original sequence that you would

00:12:10,250 --> 00:12:13,760
have liked to read in the first place

00:12:11,320 --> 00:12:15,380
that's actually much harder than it

00:12:13,760 --> 00:12:16,310
sounds because there are errors and

00:12:15,380 --> 00:12:18,590
there's missing coverage and there's

00:12:16,310 --> 00:12:20,930
repeated sequences so it's actually

00:12:18,590 --> 00:12:23,660
quite computationally difficult um if

00:12:20,930 --> 00:12:25,610
you are dealing with a species that is

00:12:23,660 --> 00:12:27,770
well studied like humans then you

00:12:25,610 --> 00:12:30,590
already have what we call a reference

00:12:27,770 --> 00:12:32,780
genome which is that big string I showed

00:12:30,590 --> 00:12:34,280
you and in that case it's

00:12:32,780 --> 00:12:36,650
computationally much easier to just

00:12:34,280 --> 00:12:38,510
compare your reads to that reference

00:12:36,650 --> 00:12:40,310
because although there's differences

00:12:38,510 --> 00:12:42,020
between us the vast majority of our DNA

00:12:40,310 --> 00:12:43,970
is identical because we're the same

00:12:42,020 --> 00:12:46,390
species there's actually only quite

00:12:43,970 --> 00:12:49,990
small differences relative to

00:12:46,390 --> 00:12:52,030
the rest of the three billion so that's

00:12:49,990 --> 00:12:54,040
basically string alignment algorithms

00:12:52,030 --> 00:12:55,810
right finding differences between two

00:12:54,040 --> 00:13:00,000
strings but it's on a really massive

00:12:55,810 --> 00:13:00,000
scale so you have to make optimizations

00:13:00,690 --> 00:13:08,590
um when is the gone ten minutes before

00:13:04,360 --> 00:13:10,330
okay all right and this is just a quick

00:13:08,590 --> 00:13:14,980
visualization of some of the things I've

00:13:10,330 --> 00:13:16,270
been talking about if you sequence if

00:13:14,980 --> 00:13:17,650
you sequence DNA and you get back a

00:13:16,270 --> 00:13:20,890
bunch of reeds each of these gray

00:13:17,650 --> 00:13:22,870
rectangles is a read that has been

00:13:20,890 --> 00:13:23,950
aligned or mapped to the reference

00:13:22,870 --> 00:13:25,540
genome the reference genome is

00:13:23,950 --> 00:13:28,300
represented by those blocks of colors at

00:13:25,540 --> 00:13:30,700
the bottom where there's four colors and

00:13:28,300 --> 00:13:33,490
they represent a cgt so that's actually

00:13:30,700 --> 00:13:35,770
just the sequence zoomed out so its

00:13:33,490 --> 00:13:37,570
color rather than letters and we've

00:13:35,770 --> 00:13:39,160
taken each of our reads and matched it

00:13:37,570 --> 00:13:41,350
to its best location on the genome and

00:13:39,160 --> 00:13:43,000
you can see that they all well half of

00:13:41,350 --> 00:13:44,500
them seem to have a difference from the

00:13:43,000 --> 00:13:46,390
reference so probably this individual

00:13:44,500 --> 00:13:55,680
has a difference from the reference at

00:13:46,390 --> 00:13:55,680
that location in the genome okay

00:13:56,420 --> 00:14:01,970
alright so let's talk about Python a bit

00:13:58,550 --> 00:14:03,440
um I'll try to get fairly rapidly onto

00:14:01,970 --> 00:14:05,750
the ipython notebook stuff I almost

00:14:03,440 --> 00:14:07,279
called this talk ipython notebook for

00:14:05,750 --> 00:14:13,459
bioinformatics because I use it so much

00:14:07,279 --> 00:14:14,779
now but I'd not quite um so a quick

00:14:13,459 --> 00:14:17,120
overview of just what kind of

00:14:14,779 --> 00:14:20,709
computational stuff do you do in

00:14:17,120 --> 00:14:23,959
bioinformatics and this is kind of in

00:14:20,709 --> 00:14:29,240
order so you do the stuff at the top of

00:14:23,959 --> 00:14:30,709
this list first so there's one class of

00:14:29,240 --> 00:14:31,940
stuff is the computationally intensive

00:14:30,709 --> 00:14:34,160
stuff you get in the raw data which is

00:14:31,940 --> 00:14:36,680
really big you know millions of reeds

00:14:34,160 --> 00:14:39,760
and you align them to the genome for

00:14:36,680 --> 00:14:42,709
instance that's rarely done in Python

00:14:39,760 --> 00:14:43,880
it's usually probably sees the most

00:14:42,709 --> 00:14:45,949
common thing those algorithms are

00:14:43,880 --> 00:14:48,820
written in and I rarely write them wait

00:14:45,949 --> 00:14:53,079
do you usually using someone else's tool

00:14:48,820 --> 00:14:55,790
data munging which means a

00:14:53,079 --> 00:14:58,579
bioinformatics data is distributed it's

00:14:55,790 --> 00:14:59,959
it's offered by various organizations

00:14:58,579 --> 00:15:03,860
throughout the world in various

00:14:59,959 --> 00:15:06,290
databases and giant text files in many

00:15:03,860 --> 00:15:07,790
formats I spent a disturbing amount of

00:15:06,290 --> 00:15:10,940
time converting data from one format to

00:15:07,790 --> 00:15:12,500
another and so a lot of your time when

00:15:10,940 --> 00:15:14,240
you're doing data analysis your data

00:15:12,500 --> 00:15:15,980
munging right and that's the sort of

00:15:14,240 --> 00:15:20,690
thing something like pandas is really

00:15:15,980 --> 00:15:21,860
good for there's a big class of stuff

00:15:20,690 --> 00:15:24,199
which you could just characterize of

00:15:21,860 --> 00:15:26,620
statistics so for instance I've got 10

00:15:24,199 --> 00:15:29,540
cancer samples and 10 normal samples

00:15:26,620 --> 00:15:31,070
which genes are important in this cancer

00:15:29,540 --> 00:15:36,529
can I answer that question with

00:15:31,070 --> 00:15:37,910
statistics and visualization which is

00:15:36,529 --> 00:15:40,029
also something notebooks really nice for

00:15:37,910 --> 00:15:42,110
since the visualization is immediate and

00:15:40,029 --> 00:15:44,180
genomics is a very visual science

00:15:42,110 --> 00:15:46,100
because genomic data has coordinates and

00:15:44,180 --> 00:15:49,540
we also just deal with comparative

00:15:46,100 --> 00:15:49,540
numerical values a lot

00:15:51,490 --> 00:15:55,550
okay so this is another just overview

00:15:54,260 --> 00:15:58,520
slide which I'll talk about for a little

00:15:55,550 --> 00:16:01,250
bit and this is roughly an order of what

00:15:58,520 --> 00:16:03,529
and this is biased by my own work there

00:16:01,250 --> 00:16:05,930
will be people in genomics to have a

00:16:03,529 --> 00:16:09,430
different list about the particular kind

00:16:05,930 --> 00:16:11,779
of genomics I do this is what I do um

00:16:09,430 --> 00:16:13,279
you might notice that their actual bio

00:16:11,779 --> 00:16:14,540
ones that I've mentioned are actually at

00:16:13,279 --> 00:16:16,880
the bottom that's not meant to be a

00:16:14,540 --> 00:16:19,220
knock on them because they're actually

00:16:16,880 --> 00:16:22,220
really useful when you use them it's

00:16:19,220 --> 00:16:23,360
just that so much of genomics is kind of

00:16:22,220 --> 00:16:25,459
data munching and dealing with text

00:16:23,360 --> 00:16:27,050
files that one of the reasons I like

00:16:25,459 --> 00:16:29,149
Python for it is that it's good at that

00:16:27,050 --> 00:16:31,160
and you can use generic tools to do that

00:16:29,149 --> 00:16:34,580
so I applied the notebooks at the top

00:16:31,160 --> 00:16:36,860
I've kind of maybe during the last year

00:16:34,580 --> 00:16:38,089
I've converted to using it but it always

00:16:36,860 --> 00:16:39,890
takes a certain amount of effort to

00:16:38,089 --> 00:16:41,209
convert what you're doing because you

00:16:39,890 --> 00:16:43,399
feel like you never have time to learn

00:16:41,209 --> 00:16:45,320
the new thing instead of just doing the

00:16:43,399 --> 00:16:48,490
analysis that's in front of you but now

00:16:45,320 --> 00:16:51,620
I've I'm converted an over enthusiast

00:16:48,490 --> 00:16:53,750
proponent obviously just sigh paying

00:16:51,620 --> 00:16:57,380
them playing motley for plotting pandas

00:16:53,750 --> 00:16:59,990
um there's a lot of tabular data lists

00:16:57,380 --> 00:17:02,150
of all the mutations we found tables of

00:16:59,990 --> 00:17:04,959
how much these genes were expressed in

00:17:02,150 --> 00:17:08,600
cancer versus normal for that kind of

00:17:04,959 --> 00:17:12,949
manipulation Pender's is excellent and

00:17:08,600 --> 00:17:16,550
the stuff that gives me access to our so

00:17:12,949 --> 00:17:21,050
you saw i think in Ed's slides are is

00:17:16,550 --> 00:17:22,819
still above python in bio that's i think

00:17:21,050 --> 00:17:27,010
that's true as well and it's mostly

00:17:22,819 --> 00:17:30,050
because statisticians use our and so the

00:17:27,010 --> 00:17:33,290
cutting edge statistical algorithms are

00:17:30,050 --> 00:17:34,760
implemented in our and i still go to our

00:17:33,290 --> 00:17:39,110
for that stuff because that's where they

00:17:34,760 --> 00:17:43,940
are um but now i can do it you through

00:17:39,110 --> 00:17:46,220
our magic so that's nice um pai bed

00:17:43,940 --> 00:17:48,200
tools i will i'll sorry i'll show you

00:17:46,220 --> 00:17:50,809
rest api is in my example actually and

00:17:48,200 --> 00:17:55,160
why i mentioned this and i'll show you

00:17:50,809 --> 00:17:56,390
pi bed tools as well um those libraries

00:17:55,160 --> 00:18:00,820
are all libraries for manipulating

00:17:56,390 --> 00:18:00,820
particular types of genomics

00:18:03,290 --> 00:18:07,440
all right and I just want to put in a

00:18:05,280 --> 00:18:10,290
plug for the Rosalynn project is anyone

00:18:07,440 --> 00:18:14,640
here heard of this ok the thing there

00:18:10,290 --> 00:18:16,860
was a subset of the bio people so this

00:18:14,640 --> 00:18:19,230
is if you've heard of project euler it's

00:18:16,860 --> 00:18:21,390
conceptually somewhat similar in that it

00:18:19,230 --> 00:18:23,610
starts with a really easy problem like

00:18:21,390 --> 00:18:25,590
count how many seas are in this string

00:18:23,610 --> 00:18:26,910
and then it gets progressively more

00:18:25,590 --> 00:18:28,100
difficult until it's got so quite

00:18:26,910 --> 00:18:30,270
interesting things and it has a

00:18:28,100 --> 00:18:34,590
dependency tree of which problems you

00:18:30,270 --> 00:18:36,600
should sell first um so I've seen people

00:18:34,590 --> 00:18:39,150
use it for learning bioinformatics

00:18:36,600 --> 00:18:41,160
algorithms and I've seen people you use

00:18:39,150 --> 00:18:43,530
it people in bio music to learn to

00:18:41,160 --> 00:18:44,790
program or to learn Python and I think

00:18:43,530 --> 00:18:47,340
it's a really good resource for both and

00:18:44,790 --> 00:18:50,460
there is also now a Coursera course

00:18:47,340 --> 00:18:51,420
based on it which is also very good if

00:18:50,460 --> 00:18:53,790
you're interested in that sort of thing

00:18:51,420 --> 00:18:55,140
and I think there's another Coursera

00:18:53,790 --> 00:18:56,790
course based on it coming out so if your

00:18:55,140 --> 00:18:59,160
google cross error which is the online

00:18:56,790 --> 00:19:03,500
learning platform Coursera for

00:18:59,160 --> 00:19:03,500
bioinformatics you'll find those courses

00:19:05,510 --> 00:19:13,560
okay so I pack the notebook I think I

00:19:09,030 --> 00:19:14,820
have plenty of time um so I will have a

00:19:13,560 --> 00:19:16,740
couple of slides but then i'll do a demo

00:19:14,820 --> 00:19:21,450
so this is I apologize for the extremely

00:19:16,740 --> 00:19:24,420
verbose slide um you don't have to read

00:19:21,450 --> 00:19:27,330
it i'll talk about it so i guess i just

00:19:24,420 --> 00:19:29,970
want to say because i converted to using

00:19:27,330 --> 00:19:31,620
notebook for a lot of my analysis I used

00:19:29,970 --> 00:19:33,360
teaser for a lot of the same data

00:19:31,620 --> 00:19:36,090
munging tasks that I once would have

00:19:33,360 --> 00:19:38,850
used this sorry with data managing tasks

00:19:36,090 --> 00:19:42,410
that i would now use this for and i

00:19:38,850 --> 00:19:44,430
actually managed to start using notebook

00:19:42,410 --> 00:19:47,010
firstly just as that literally as a

00:19:44,430 --> 00:19:48,570
notebook because i was trying to you

00:19:47,010 --> 00:19:49,470
know wet lab biologists are really good

00:19:48,570 --> 00:19:51,150
about keeping notebooks because they

00:19:49,470 --> 00:19:55,170
have to like i have to get them signed

00:19:51,150 --> 00:19:56,820
it's a physical book but computational

00:19:55,170 --> 00:19:57,990
biologists no one's going to breathe

00:19:56,820 --> 00:19:59,010
down your neck if you don't keep track

00:19:57,990 --> 00:20:00,870
of what you're doing but you really

00:19:59,010 --> 00:20:03,420
should keep a running log of what you're

00:20:00,870 --> 00:20:07,020
doing so i kept trying to do that and i

00:20:03,420 --> 00:20:08,730
kept not keeping it up and one reason i

00:20:07,020 --> 00:20:11,250
didn't keep it up was that none of them

00:20:08,730 --> 00:20:12,840
are flexible enough and can't for

00:20:11,250 --> 00:20:16,049
instance write equations

00:20:12,840 --> 00:20:18,419
in a google doc or something so actually

00:20:16,049 --> 00:20:19,950
I i managed to first start using it

00:20:18,419 --> 00:20:21,870
literally just as a notebook just

00:20:19,950 --> 00:20:23,850
because it smack down and produces

00:20:21,870 --> 00:20:26,429
produces a JSON file which is portable

00:20:23,850 --> 00:20:31,110
and version able and all sorts of nice

00:20:26,429 --> 00:20:35,220
things but I now use it for most of my

00:20:31,110 --> 00:20:39,000
analysis um mostly because of pandas I

00:20:35,220 --> 00:20:41,429
think that's a major factor and also

00:20:39,000 --> 00:20:45,440
because of course because you can do in

00:20:41,429 --> 00:20:45,440
line plots so you can visualize stuff

00:20:45,500 --> 00:20:50,730
and the advantage over our has a very

00:20:49,350 --> 00:20:52,320
nice syntax for certain kinds of data

00:20:50,730 --> 00:20:53,549
exploration but when I get up to a hard

00:20:52,320 --> 00:20:55,890
bit and I have to actually write some

00:20:53,549 --> 00:20:57,840
real code I don't like writing code in

00:20:55,890 --> 00:20:59,580
our so now i can write it in python so

00:20:57,840 --> 00:21:01,620
the hard bits have become easier i think

00:20:59,580 --> 00:21:04,799
that's the big difference so if i need

00:21:01,620 --> 00:21:10,200
to pause some xml or something that's a

00:21:04,799 --> 00:21:12,059
lot nicer and i also find that i can

00:21:10,200 --> 00:21:14,010
write just a great big on the fly

00:21:12,059 --> 00:21:16,919
analysis where I just try different

00:21:14,010 --> 00:21:18,659
things and then I can go through and

00:21:16,919 --> 00:21:21,000
kind of organize it with headings I'll

00:21:18,659 --> 00:21:22,950
show you this and it becomes like a

00:21:21,000 --> 00:21:24,720
navigable document which is quite nice

00:21:22,950 --> 00:21:27,230
like a good starting point for

00:21:24,720 --> 00:21:29,010
discussion with collaborators or for

00:21:27,230 --> 00:21:33,480
starting to write up the methods section

00:21:29,010 --> 00:21:37,020
of the paper and we've also started

00:21:33,480 --> 00:21:38,820
using it a bit for like certainly for

00:21:37,020 --> 00:21:39,870
collaboration with biologists right it's

00:21:38,820 --> 00:21:40,980
great because you can sit down next to

00:21:39,870 --> 00:21:42,510
them and say here's the graph and they

00:21:40,980 --> 00:21:44,880
say of what if we change the threshold

00:21:42,510 --> 00:21:47,279
and you can change the threshold and see

00:21:44,880 --> 00:21:49,770
how the plot changes and this is really

00:21:47,279 --> 00:21:51,240
nice and also some of the people in my

00:21:49,770 --> 00:21:53,549
workplace I actually work with them

00:21:51,240 --> 00:21:54,809
where we have a shared server then we

00:21:53,549 --> 00:21:58,049
look at each other's code I'll talk

00:21:54,809 --> 00:21:59,610
about that actually a bit later um I

00:21:58,049 --> 00:22:02,460
also just want to mention this because

00:21:59,610 --> 00:22:04,350
if you are this room probably has a lot

00:22:02,460 --> 00:22:06,539
of Australian researchers in it and that

00:22:04,350 --> 00:22:08,399
means this resource is actually

00:22:06,539 --> 00:22:14,000
available to you you just might not know

00:22:08,399 --> 00:22:14,000
about it and this is what i use as a

00:22:14,419 --> 00:22:20,370
ipython notebook server that I can work

00:22:17,549 --> 00:22:22,289
with collaborators on because Australia

00:22:20,370 --> 00:22:24,090
now has a research cloud which is

00:22:22,289 --> 00:22:25,380
somewhat analogous to Amazon Web

00:22:24,090 --> 00:22:29,280
Services

00:22:25,380 --> 00:22:31,230
ac2 so you can launch an instance and

00:22:29,280 --> 00:22:33,680
we've got some scripts which configure a

00:22:31,230 --> 00:22:37,740
bunch of bioinformatics tools and

00:22:33,680 --> 00:22:41,730
notebook is one of those things if

00:22:37,740 --> 00:22:43,380
you're at a australian research

00:22:41,730 --> 00:22:44,640
institution that uses the australian

00:22:43,380 --> 00:22:46,380
access Federation which includes all the

00:22:44,640 --> 00:22:47,640
universities i think then you already

00:22:46,380 --> 00:22:49,800
have an account and you have a very

00:22:47,640 --> 00:22:51,840
small default quitter so you can try it

00:22:49,800 --> 00:22:55,740
out so you can follow this link and try

00:22:51,840 --> 00:22:58,740
it um and you can also follow these

00:22:55,740 --> 00:23:00,090
links if you want to use it for our

00:22:58,740 --> 00:23:01,980
bioinformatics or for notebook this is

00:23:00,090 --> 00:23:03,480
what I use for my setup so my disclaimer

00:23:01,980 --> 00:23:06,480
is I'm not involved in the cloud itself

00:23:03,480 --> 00:23:08,370
but I am involved in the GBL project the

00:23:06,480 --> 00:23:09,690
genomics virtual lab project so i'm

00:23:08,370 --> 00:23:11,460
mostly putting this up for reference so

00:23:09,690 --> 00:23:14,040
that people who have access to this

00:23:11,460 --> 00:23:15,210
resource can go and find it I'm i think

00:23:14,040 --> 00:23:17,790
i might be just about up to where I want

00:23:15,210 --> 00:23:19,880
to do a demo yes I do I'll come back to

00:23:17,790 --> 00:23:19,880
this

00:23:22,909 --> 00:23:35,029
yes ok now okay so the first thing I'll

00:23:34,009 --> 00:23:36,619
show you is this table of contents

00:23:35,029 --> 00:23:38,239
because i'm going to use it is this big

00:23:36,619 --> 00:23:42,080
enough do i need to increase the font

00:23:38,239 --> 00:23:45,710
size okay if people that back wave at me

00:23:42,080 --> 00:23:47,570
i will um so I'm actually I've got a

00:23:45,710 --> 00:23:49,190
little thing here introducing notebook

00:23:47,570 --> 00:23:51,169
but I am kind of assuming this audience

00:23:49,190 --> 00:23:54,349
knows about notebook already this being

00:23:51,169 --> 00:23:55,669
the science and data Python intersection

00:23:54,349 --> 00:23:57,919
so I won't come back to this and less

00:23:55,669 --> 00:24:00,320
people ask me questions about it but you

00:23:57,919 --> 00:24:04,129
can see this is the table of contents

00:24:00,320 --> 00:24:05,539
extension this button so to ipython

00:24:04,129 --> 00:24:08,059
notebook extension it's actually one of

00:24:05,539 --> 00:24:09,799
min our keys it's the first thing I

00:24:08,059 --> 00:24:13,999
install when i use notebook because I

00:24:09,799 --> 00:24:15,470
now find it indispensable and it

00:24:13,999 --> 00:24:17,330
basically takes your hierarchical

00:24:15,470 --> 00:24:19,369
headings if you haven't seen it before

00:24:17,330 --> 00:24:21,710
and turns them into this table of

00:24:19,369 --> 00:24:24,590
contents so I can jump down to where I

00:24:21,710 --> 00:24:26,570
want to go so this is what I use when

00:24:24,590 --> 00:24:28,820
I've just done a giant rambling on the

00:24:26,570 --> 00:24:30,470
fly try different things analysis if I

00:24:28,820 --> 00:24:32,029
stick headings into that then I can jump

00:24:30,470 --> 00:24:37,190
to the bits that are actually important

00:24:32,029 --> 00:24:40,519
and rerun them so I'm actually going to

00:24:37,190 --> 00:24:44,570
start with this n bit because I think it

00:24:40,519 --> 00:24:49,509
will be more intelligible that way so

00:24:44,570 --> 00:24:51,349
I'm going to talk a little bit about

00:24:49,509 --> 00:24:55,849
project I've started working on it's

00:24:51,349 --> 00:24:58,580
still in very early days it's so there

00:24:55,849 --> 00:25:02,539
or there exists this browser a genome

00:24:58,580 --> 00:25:06,070
browser called dalliance which is not

00:25:02,539 --> 00:25:07,849
mine by Thomas down and it tries its

00:25:06,070 --> 00:25:09,710
javascript-based it's designed to be

00:25:07,849 --> 00:25:12,159
embeddable it's based on open standards

00:25:09,710 --> 00:25:14,869
like does so it goes and retrieves

00:25:12,159 --> 00:25:16,849
annotation tracks like where the jeans

00:25:14,869 --> 00:25:18,919
are from servers around the world you

00:25:16,849 --> 00:25:20,570
can tell it go and get the ensemble

00:25:18,919 --> 00:25:22,609
track for these jeans and it will

00:25:20,570 --> 00:25:27,200
display it for you so it looks like this

00:25:22,609 --> 00:25:28,909
its interactive and scrollable and I

00:25:27,200 --> 00:25:31,789
could be able to

00:25:28,909 --> 00:25:34,340
zoom in to the point where I can start

00:25:31,789 --> 00:25:37,759
seeing things for instance so these for

00:25:34,340 --> 00:25:39,979
instance are the genes so this is

00:25:37,759 --> 00:25:43,099
showing the x-axis is basically the

00:25:39,979 --> 00:25:46,220
position in the genome along a stretch

00:25:43,099 --> 00:25:48,470
of DNA and these things here are there

00:25:46,220 --> 00:25:51,820
is a gene at this position in the genome

00:25:48,470 --> 00:25:51,820
and here's what we know about that gene

00:25:52,960 --> 00:25:58,849
so if you were to trade it if you want

00:25:56,749 --> 00:25:59,960
to put this browser into a web page of

00:25:58,849 --> 00:26:02,509
yours you basically embed some

00:25:59,960 --> 00:26:06,109
JavaScript where you specify what

00:26:02,509 --> 00:26:07,340
sources you want of information so it

00:26:06,109 --> 00:26:09,739
seemed to me that this would solve a

00:26:07,340 --> 00:26:11,330
problem that I have which is if I'm

00:26:09,739 --> 00:26:12,769
working with some data on a cloud server

00:26:11,330 --> 00:26:15,139
sometimes these files are really big

00:26:12,769 --> 00:26:17,690
like 400 gigabytes and I don't want to

00:26:15,139 --> 00:26:20,479
download them but i do want to visualize

00:26:17,690 --> 00:26:21,769
them so and i'm doing a lot of work and

00:26:20,479 --> 00:26:23,389
I fight the notebook so it seemed to me

00:26:21,769 --> 00:26:25,249
that an embeddable JavaScript browser

00:26:23,389 --> 00:26:27,529
could be a good solution to that if I

00:26:25,249 --> 00:26:30,289
can embed it in a notebook then I can

00:26:27,529 --> 00:26:33,739
visualize my files without downloading

00:26:30,289 --> 00:26:36,799
them so I've made a start on doing that

00:26:33,739 --> 00:26:41,059
so all the features of Valiants are not

00:26:36,799 --> 00:26:42,889
mine at all they are Thomas's I'm just

00:26:41,059 --> 00:26:44,179
trying to writing a wrapper for it at

00:26:42,889 --> 00:26:46,149
the moment that referee is at the very

00:26:44,179 --> 00:26:48,619
early stage where it basically works

00:26:46,149 --> 00:26:49,940
where you can specify your sources as

00:26:48,619 --> 00:26:52,519
Python dictionaries rather than

00:26:49,940 --> 00:26:56,599
specifying them in JavaScript and then

00:26:52,519 --> 00:26:58,970
pass them in and it will go away and

00:26:56,599 --> 00:27:02,720
load them in display so this is it's not

00:26:58,970 --> 00:27:06,249
an extension it's a python module which

00:27:02,720 --> 00:27:10,940
I haven't pushed out to anywhere yet um

00:27:06,249 --> 00:27:12,349
but you can see for instance becomes

00:27:10,940 --> 00:27:13,789
nice because you've got your list of

00:27:12,349 --> 00:27:17,359
sources and if I remove one it should

00:27:13,789 --> 00:27:19,220
just disappear right I should be able to

00:27:17,359 --> 00:27:22,070
specify them and add to them the obvious

00:27:19,220 --> 00:27:23,629
next step for this is the JavaScript

00:27:22,070 --> 00:27:25,669
code actually creates a browser object

00:27:23,629 --> 00:27:27,470
which you can then call methods on so

00:27:25,669 --> 00:27:28,549
you can say set location for instance to

00:27:27,470 --> 00:27:30,979
browse to a different location

00:27:28,549 --> 00:27:32,899
programmatically the sensible thing to

00:27:30,979 --> 00:27:34,340
do would be to track that JavaScript

00:27:32,899 --> 00:27:36,950
objects with a Python objects so that i

00:27:34,340 --> 00:27:39,159
can give access to those same methods

00:27:36,950 --> 00:27:39,159
course

00:27:40,210 --> 00:27:49,240
so I just wanted to to demo that briefly

00:27:44,810 --> 00:27:51,620
I'm actually going to jump back now and

00:27:49,240 --> 00:27:52,670
give you an example of a real analysis

00:27:51,620 --> 00:27:54,290
and this is a slightly simplified

00:27:52,670 --> 00:28:03,130
version of an actual analysis I had to

00:27:54,290 --> 00:28:05,270
do for a real project recently okay so

00:28:03,130 --> 00:28:06,800
here's the problem so I'm going to

00:28:05,270 --> 00:28:09,080
demonstrate I was going to show you

00:28:06,800 --> 00:28:09,980
pandas but I thought better of it and I

00:28:09,080 --> 00:28:12,860
think that's good because you're going

00:28:09,980 --> 00:28:14,720
to see lots of pandas today I think and

00:28:12,860 --> 00:28:17,570
also the stuff i do in pounders it's not

00:28:14,720 --> 00:28:20,890
particularly revolutionary doesn't use

00:28:17,570 --> 00:28:22,850
any of its really advanced features um

00:28:20,890 --> 00:28:24,950
so instead i'm going to show you an

00:28:22,850 --> 00:28:29,000
example of using a REST API to retrieve

00:28:24,950 --> 00:28:29,990
data and manipulate other so you don't

00:28:29,000 --> 00:28:31,070
there's going to be a lot of words

00:28:29,990 --> 00:28:32,000
because this is a notebook and it's

00:28:31,070 --> 00:28:33,680
designed for people to be able to come

00:28:32,000 --> 00:28:34,910
back later you don't need to read

00:28:33,680 --> 00:28:38,140
everything i will tell you what's going

00:28:34,910 --> 00:28:40,910
on but the basic the motivation here is

00:28:38,140 --> 00:28:44,090
I've done some next-generation

00:28:40,910 --> 00:28:46,370
sequencing on a DNA sample from from

00:28:44,090 --> 00:28:47,720
cancer and I want to know what mutations

00:28:46,370 --> 00:28:49,040
there are in this cancer and

00:28:47,720 --> 00:28:51,140
specifically I want to know if there are

00:28:49,040 --> 00:28:52,910
mutations in for the sake of argument

00:28:51,140 --> 00:28:54,440
this list of genes here and these are

00:28:52,910 --> 00:28:56,720
actually genes involved in the process

00:28:54,440 --> 00:28:59,060
of DNA mismatch repair which means if

00:28:56,720 --> 00:29:02,630
the DNA somehow gets copied wrongly they

00:28:59,060 --> 00:29:04,490
can repair the error so if these genes

00:29:02,630 --> 00:29:07,310
get mutated then it leads to more

00:29:04,490 --> 00:29:10,460
mutations because you no longer have

00:29:07,310 --> 00:29:16,840
error repair or you've got sub standard

00:29:10,460 --> 00:29:19,670
error repair so I want to look at my DNA

00:29:16,840 --> 00:29:22,250
my sequence information from the DNA and

00:29:19,670 --> 00:29:27,170
find out if there are any mutations in

00:29:22,250 --> 00:29:29,210
these particular genes and I've got

00:29:27,170 --> 00:29:32,870
variant detection software so I can take

00:29:29,210 --> 00:29:37,150
my aligned reads I think if we just go

00:29:32,870 --> 00:29:37,150
back here for a second

00:29:38,970 --> 00:29:43,510
so remember this visualization this is

00:29:42,399 --> 00:29:47,820
what I mean when I say aligned reads

00:29:43,510 --> 00:29:47,820
it's taught us what we call a band file

00:29:48,389 --> 00:29:54,880
so i can look for four variants exactly

00:29:51,669 --> 00:29:57,610
as it's doing there so i can run a piece

00:29:54,880 --> 00:29:59,470
of software which will take those reads

00:29:57,610 --> 00:30:01,720
that have been mapped to a reference

00:29:59,470 --> 00:30:03,639
genome and look for differences and that

00:30:01,720 --> 00:30:04,840
will find me mutations but I

00:30:03,639 --> 00:30:06,760
specifically want to know about

00:30:04,840 --> 00:30:07,809
mutations in these particular genes so I

00:30:06,760 --> 00:30:09,429
could run the software over the whole

00:30:07,809 --> 00:30:12,370
genome and then try to pick out those

00:30:09,429 --> 00:30:13,779
jeans or I could pick out those regions

00:30:12,370 --> 00:30:15,639
of the genome and then just run the

00:30:13,779 --> 00:30:17,200
software over them which is better for

00:30:15,639 --> 00:30:20,049
my purposes because it will be much much

00:30:17,200 --> 00:30:22,000
faster but either way no matter what I

00:30:20,049 --> 00:30:23,169
do I need to know where the jeans are so

00:30:22,000 --> 00:30:25,330
the example I'm going to show is just

00:30:23,169 --> 00:30:29,950
how do you get the coordinates of those

00:30:25,330 --> 00:30:32,110
genes in the genome so what I need is a

00:30:29,950 --> 00:30:33,610
file like this actually without the

00:30:32,110 --> 00:30:35,679
hetero but just for illustration

00:30:33,610 --> 00:30:37,269
purposes a file like this which is

00:30:35,679 --> 00:30:40,090
called a bed file which actually means

00:30:37,269 --> 00:30:44,169
browser extensible data but it just

00:30:40,090 --> 00:30:47,440
shows for each gene which which

00:30:44,169 --> 00:30:49,000
chromosome is it on what coordinate what

00:30:47,440 --> 00:30:51,100
position on that chromosome does it the

00:30:49,000 --> 00:30:53,350
genes start at and what position does it

00:30:51,100 --> 00:30:55,090
end out and if I know that for all my

00:30:53,350 --> 00:30:57,190
jeans then I can pass that information

00:30:55,090 --> 00:30:59,110
into my tools and they will just examine

00:30:57,190 --> 00:31:01,120
those regions and they'll run a thousand

00:30:59,110 --> 00:31:04,019
times faster and give me back the

00:31:01,120 --> 00:31:04,019
information i actually won

00:31:05,710 --> 00:31:12,350
so the actual computational task is I've

00:31:10,160 --> 00:31:15,580
got just a list of gene names and I want

00:31:12,350 --> 00:31:19,850
a bed file giving their coordinates and

00:31:15,580 --> 00:31:21,830
what I would have done once upon a time

00:31:19,850 --> 00:31:22,850
it's not that hard a task it's a little

00:31:21,830 --> 00:31:24,470
bit more complicated as you'll see at

00:31:22,850 --> 00:31:26,299
the end but once upon a time I would

00:31:24,470 --> 00:31:27,770
have downloaded a giant tabular text

00:31:26,299 --> 00:31:29,840
file with all the genes in it and ridden

00:31:27,770 --> 00:31:34,039
a perl script to parse out the bits i

00:31:29,840 --> 00:31:41,770
needed um here's a slightly nicer way to

00:31:34,039 --> 00:31:44,120
do it so here's my list of genes an

00:31:41,770 --> 00:31:46,460
ensemble has this information on genomic

00:31:44,120 --> 00:31:49,039
coordinates and ensemble now has a REST

00:31:46,460 --> 00:31:52,220
API prob probably everyone knows what

00:31:49,039 --> 00:31:54,140
that is if you don't it's basically well

00:31:52,220 --> 00:31:56,179
for our purposes it's an HTTP rest api

00:31:54,140 --> 00:31:59,419
so i can construct a URL to query for

00:31:56,179 --> 00:32:01,010
information and the basic feature of a

00:31:59,419 --> 00:32:04,280
REST API is that it should be stateless

00:32:01,010 --> 00:32:08,720
so if i make multiple queries it

00:32:04,280 --> 00:32:11,690
shouldn't matter and if we follow if we

00:32:08,720 --> 00:32:16,240
look at ensembles rest api root URL it

00:32:11,690 --> 00:32:16,240
has documentation and we can see that

00:32:17,169 --> 00:32:22,309
this is the query I'm interested in I

00:32:19,940 --> 00:32:29,000
can look up a gene by species and gene

00:32:22,309 --> 00:32:31,280
name so that's what I'm going to do I'll

00:32:29,000 --> 00:32:32,390
use requests if I were doing this in the

00:32:31,280 --> 00:32:34,309
real world I would either reuse

00:32:32,390 --> 00:32:36,679
someone's library or I would write a

00:32:34,309 --> 00:32:38,539
reasonably robust function to do this to

00:32:36,679 --> 00:32:39,770
you know handle errors and stuff but for

00:32:38,539 --> 00:32:43,039
the sake of a demonstration we don't

00:32:39,770 --> 00:32:44,620
care about any of that stuff this REST

00:32:43,039 --> 00:32:46,909
API will give me back XML or JSON

00:32:44,620 --> 00:32:49,970
generally that's what they do I want

00:32:46,909 --> 00:32:52,970
Jason I'm going to specify in the HTTP

00:32:49,970 --> 00:32:54,650
header that I want Jason and then if we

00:32:52,970 --> 00:32:59,470
just pick one of our genes say the first

00:32:54,650 --> 00:32:59,470
one which was a TR

00:33:00,570 --> 00:33:04,769
and we'll just manually try the URL to

00:33:02,700 --> 00:33:06,870
check that it works so this is what that

00:33:04,769 --> 00:33:09,450
query will look up what this query will

00:33:06,870 --> 00:33:15,389
look like it's / you look up / symbol /

00:33:09,450 --> 00:33:18,269
human / ATR if I run that it comes back

00:33:15,389 --> 00:33:20,039
with this Jason which has various bits

00:33:18,269 --> 00:33:23,130
of information about the gene that I

00:33:20,039 --> 00:33:24,539
just queried see that it's gene that

00:33:23,130 --> 00:33:26,909
codes for a protein it's in their core

00:33:24,539 --> 00:33:29,880
database etc the information I'm

00:33:26,909 --> 00:33:32,450
interested in is this secret name which

00:33:29,880 --> 00:33:37,159
is which chromosome the gene is on the

00:33:32,450 --> 00:33:39,210
start coordinate and the end coordinate

00:33:37,159 --> 00:33:41,759
so that's that's the information I

00:33:39,210 --> 00:33:43,289
needed so I'll just turn it into a

00:33:41,759 --> 00:33:46,860
little function which just returns those

00:33:43,289 --> 00:33:50,269
three fields try it out ok so my

00:33:46,860 --> 00:33:53,909
function takes human gene name and

00:33:50,269 --> 00:33:56,429
returns the coordinates and now write

00:33:53,909 --> 00:33:58,710
another very tiny function which prints

00:33:56,429 --> 00:34:04,080
out that information in the format that

00:33:58,710 --> 00:34:06,870
I needed so gets the coordinates prints

00:34:04,080 --> 00:34:08,730
out tab-separated values together with

00:34:06,870 --> 00:34:10,950
the name so this is this is actually the

00:34:08,730 --> 00:34:13,770
exact format that I need so that was

00:34:10,950 --> 00:34:15,960
really simple and more pleasant than

00:34:13,770 --> 00:34:17,609
dealing with giant files and going out

00:34:15,960 --> 00:34:20,399
and writing a separate bill script to my

00:34:17,609 --> 00:34:21,899
mind so I could just now write a list

00:34:20,399 --> 00:34:22,980
comprehension to generate the whole this

00:34:21,899 --> 00:34:25,339
will take a second because it has to

00:34:22,980 --> 00:34:28,679
query the API for each gene individually

00:34:25,339 --> 00:34:30,480
and this is actually the file at one

00:34:28,679 --> 00:34:32,790
right except you can see it's out of

00:34:30,480 --> 00:34:34,700
order so the chromosomes are in order

00:34:32,790 --> 00:34:36,960
and also the positions are in order and

00:34:34,700 --> 00:34:39,659
that will actually make some of the

00:34:36,960 --> 00:34:41,639
tools I want to run panic if I give them

00:34:39,659 --> 00:34:44,520
this file as input they expect it to be

00:34:41,639 --> 00:34:45,990
sorted you can also see that these two

00:34:44,520 --> 00:34:47,849
appear to be there probably variants of

00:34:45,990 --> 00:34:50,159
the same gene so they're coordinates

00:34:47,849 --> 00:34:51,780
overlap so I'm going to query the same

00:34:50,159 --> 00:34:53,099
region twice or again I'm just going to

00:34:51,780 --> 00:34:56,879
crash whichever tool I try to run

00:34:53,099 --> 00:34:59,250
because it expects unique regions so i'm

00:34:56,879 --> 00:35:00,359
going to use PI bed tools which is one

00:34:59,250 --> 00:35:02,400
of the libraries I mentioned it's a

00:35:00,359 --> 00:35:04,410
wrapper around bed tools and it

00:35:02,400 --> 00:35:06,359
manipulates this kind of data right so

00:35:04,410 --> 00:35:08,700
it manipulates genomic interval data and

00:35:06,359 --> 00:35:10,589
it does so in an optimized way so

00:35:08,700 --> 00:35:11,970
manipulating to an ohmic intervals so if

00:35:10,589 --> 00:35:12,710
you have two files of intervals and you

00:35:11,970 --> 00:35:15,290
want to merge

00:35:12,710 --> 00:35:16,640
find their overlaps that's not too

00:35:15,290 --> 00:35:18,710
difficult unless you want to do it

00:35:16,640 --> 00:35:20,480
efficiently and then you actually need

00:35:18,710 --> 00:35:21,950
to do it right otherwise it could

00:35:20,480 --> 00:35:24,140
actually be really slow so bad tools

00:35:21,950 --> 00:35:26,420
does it right and this is just a small

00:35:24,140 --> 00:35:28,150
wrapper around it so I just need to do a

00:35:26,420 --> 00:35:32,380
couple of steps to turn this file into

00:35:28,150 --> 00:35:34,700
something I can actually use firstly I

00:35:32,380 --> 00:35:36,830
can pretend that the text I just

00:35:34,700 --> 00:35:40,280
produced with my list comprehension is a

00:35:36,830 --> 00:35:41,780
bed file and I can just read it in with

00:35:40,280 --> 00:35:44,150
this from string equals true so I'll

00:35:41,780 --> 00:35:45,859
make a bed tool object which you can see

00:35:44,150 --> 00:35:48,410
looks exactly the same but now it's a

00:35:45,859 --> 00:35:51,619
bit to object and so now I can apply bed

00:35:48,410 --> 00:35:58,250
tools nice utility functions to it so

00:35:51,619 --> 00:36:01,280
first I'll sort it and then i will run

00:35:58,250 --> 00:36:03,800
merge which looks for overlapping

00:36:01,280 --> 00:36:05,150
intervals and merges them and you can

00:36:03,800 --> 00:36:07,820
see that once I've done that there's one

00:36:05,150 --> 00:36:12,290
less row and these things which were

00:36:07,820 --> 00:36:14,060
overlapping are now just one larger

00:36:12,290 --> 00:36:15,830
interval and you can see the chromosomes

00:36:14,060 --> 00:36:17,810
are in order and within each chromosome

00:36:15,830 --> 00:36:19,580
the regions are in order as well so if I

00:36:17,810 --> 00:36:21,980
write that out to a file now I can use

00:36:19,580 --> 00:36:27,170
it to look for mutations in those jeans

00:36:21,980 --> 00:36:29,690
that's pretty much what I needed so I

00:36:27,170 --> 00:36:32,150
think that's that's all the demo I

00:36:29,690 --> 00:36:33,290
wanted to show you I will stop in a

00:36:32,150 --> 00:36:36,950
second but I just want to go back to the

00:36:33,290 --> 00:36:38,720
slides and put up one more cuz I think

00:36:36,950 --> 00:36:44,150
this is a good group to have this

00:36:38,720 --> 00:36:46,550
discussion with except for some reason

00:36:44,150 --> 00:36:51,310
I'm stuck

00:36:46,550 --> 00:36:53,960
okay okay so this was the last slide um

00:36:51,310 --> 00:36:55,730
so now I started using notebook a lot

00:36:53,960 --> 00:36:57,860
for analysis I use it to sit down with

00:36:55,730 --> 00:37:01,280
biologists and say look at these pretty

00:36:57,860 --> 00:37:04,190
graphs and what should we do next but I

00:37:01,280 --> 00:37:05,750
also work with you know some of my some

00:37:04,190 --> 00:37:08,600
of my colleagues who work in a similar

00:37:05,750 --> 00:37:10,520
way to me where we try to actually work

00:37:08,600 --> 00:37:14,270
on the same analysis at the same time

00:37:10,520 --> 00:37:15,470
and for that notebook is it's way better

00:37:14,270 --> 00:37:18,170
than having your own little bundle of

00:37:15,470 --> 00:37:20,420
private scripts but I still feel like it

00:37:18,170 --> 00:37:22,310
there's more that could be done it's not

00:37:20,420 --> 00:37:23,750
really designed for multiple users to

00:37:22,310 --> 00:37:26,000
use at the same time right you have your

00:37:23,750 --> 00:37:28,070
own document and you work on that

00:37:26,000 --> 00:37:30,470
document and if someone else edits it's

00:37:28,070 --> 00:37:35,000
hard to tell what they did or why they

00:37:30,470 --> 00:37:36,620
did it um on the ipython notebook

00:37:35,000 --> 00:37:38,600
roadmap I think there's a multi-user

00:37:36,620 --> 00:37:39,920
server coming as far as I know it won't

00:37:38,600 --> 00:37:42,080
really be about collaboration it will be

00:37:39,920 --> 00:37:46,330
about multiple logins so that you don't

00:37:42,080 --> 00:37:46,330
have to run lots of different servers um

00:37:46,510 --> 00:37:51,110
the sage math cloud example if people

00:37:49,460 --> 00:37:53,990
have seen that I don't know if people

00:37:51,110 --> 00:37:55,610
have seen that but it it does try to

00:37:53,990 --> 00:37:57,080
solve this problem I don't know whether

00:37:55,610 --> 00:38:00,050
it's the right solution in fact what I

00:37:57,080 --> 00:38:01,220
want to say here is not so much how do

00:38:00,050 --> 00:38:02,390
we implement stuff but what should the

00:38:01,220 --> 00:38:04,010
solution look like because right now I

00:38:02,390 --> 00:38:05,390
don't feel like I know what the solution

00:38:04,010 --> 00:38:07,640
should look like and that's really the

00:38:05,390 --> 00:38:09,410
first step other ways HMS cloud does it

00:38:07,640 --> 00:38:11,300
is two people can edit a document you

00:38:09,410 --> 00:38:13,370
can see one another way I documentum in

00:38:11,300 --> 00:38:15,110
a notebook you can see one another doing

00:38:13,370 --> 00:38:17,090
the edits and you're actually sending

00:38:15,110 --> 00:38:19,700
commands to the same kernel which is

00:38:17,090 --> 00:38:21,590
both cool and terrifying it means that

00:38:19,700 --> 00:38:22,880
if I execute a cell and then you execute

00:38:21,590 --> 00:38:24,410
a cell that changes the value of my

00:38:22,880 --> 00:38:27,890
variable and then I execute another cell

00:38:24,410 --> 00:38:30,620
it changes right so you better be

00:38:27,890 --> 00:38:33,980
talking to each other so maybe that's a

00:38:30,620 --> 00:38:35,570
good solution I don't know um people

00:38:33,980 --> 00:38:37,520
when I say this they say have you tried

00:38:35,570 --> 00:38:39,440
using get because it's it's just a JSON

00:38:37,520 --> 00:38:42,350
file and yet I have but not when I'm

00:38:39,440 --> 00:38:44,210
collaborating because it is great for

00:38:42,350 --> 00:38:45,410
versioning and keeping a log but when

00:38:44,210 --> 00:38:48,110
you're working with someone else it

00:38:45,410 --> 00:38:49,250
doesn't solve that problem i think not

00:38:48,110 --> 00:38:51,740
in this case because this is not

00:38:49,250 --> 00:38:53,240
software it's more like a document and

00:38:51,740 --> 00:38:55,620
analysis is a document with code in it

00:38:53,240 --> 00:38:57,210
not software with writing in it

00:38:55,620 --> 00:39:01,560
so I guess I just want to put the

00:38:57,210 --> 00:39:03,090
question out there of scientists um how

00:39:01,560 --> 00:39:04,830
would we like to collaborate when we're

00:39:03,090 --> 00:39:07,020
actually writing code what's a good

00:39:04,830 --> 00:39:10,620
model for that okay and I'm going to

00:39:07,020 --> 00:39:13,950
stop and see if we have any time for

00:39:10,620 --> 00:39:22,410
questions thank you very much clearer so

00:39:13,950 --> 00:39:29,280
yes we do have yes we do have about five

00:39:22,410 --> 00:39:33,510
minutes of our questions I clear poly

00:39:29,280 --> 00:39:35,910
party from and you I'm asking a

00:39:33,510 --> 00:39:40,530
tangential question here but when you

00:39:35,910 --> 00:39:42,750
actually go to publish your work how if

00:39:40,530 --> 00:39:43,890
at all does ipython notebook help there

00:39:42,750 --> 00:39:46,350
and there's a second part of that

00:39:43,890 --> 00:39:48,450
question which is in more diabolical and

00:39:46,350 --> 00:39:52,310
that is when you're actually reviewing

00:39:48,450 --> 00:39:55,530
other people's you know submitted work

00:39:52,310 --> 00:39:58,320
would that is there any infrastructure

00:39:55,530 --> 00:40:00,240
that can help there because generally

00:39:58,320 --> 00:40:07,500
what you get is something thrown over

00:40:00,240 --> 00:40:10,200
the fence yeah I'd say when you go to

00:40:07,500 --> 00:40:12,330
write a paper up you pretty much have to

00:40:10,200 --> 00:40:13,650
rewrite it like the notes to myself or

00:40:12,330 --> 00:40:14,880
the nose to my collaborators it's just

00:40:13,650 --> 00:40:17,580
they're not even using the same language

00:40:14,880 --> 00:40:21,150
that a paper expects you to use but it's

00:40:17,580 --> 00:40:23,250
extremely helpful to have that document

00:40:21,150 --> 00:40:27,210
like your notes that you wrote as you

00:40:23,250 --> 00:40:30,080
went let's try this let's try this when

00:40:27,210 --> 00:40:34,890
you're doing that writing so it's really

00:40:30,080 --> 00:40:36,660
just that you have a good initial a good

00:40:34,890 --> 00:40:38,990
initial draft in some sense of the

00:40:36,660 --> 00:40:38,990
methods

00:40:40,529 --> 00:40:47,949
there's when people when people are

00:40:44,199 --> 00:40:51,729
reviewing papers it would be nice if

00:40:47,949 --> 00:40:53,680
people made their analyses available

00:40:51,729 --> 00:40:55,239
somewhere where the reviewer could get

00:40:53,680 --> 00:40:58,689
at it in this kind of sense it's

00:40:55,239 --> 00:41:00,069
incredibly rare I don't know if there's

00:40:58,689 --> 00:41:02,589
something called authorial which is an

00:41:00,069 --> 00:41:05,349
attempt to let people link notebooks

00:41:02,589 --> 00:41:06,609
into their actual papers I think all

00:41:05,349 --> 00:41:08,380
this stuff is actually just getting

00:41:06,609 --> 00:41:10,150
started it's definitely not like

00:41:08,380 --> 00:41:12,160
widespread standard practice not even in

00:41:10,150 --> 00:41:20,380
bioinformatics which is a fairly you

00:41:12,160 --> 00:41:25,059
know technically literate science hi I'm

00:41:20,380 --> 00:41:27,279
Frank Sainsbury Tasmania the went last

00:41:25,059 --> 00:41:28,959
week to a talk on the research into a

00:41:27,279 --> 00:41:30,759
structure that nectar people are putting

00:41:28,959 --> 00:41:33,069
out my little bits of that is a huge

00:41:30,759 --> 00:41:35,650
piece of data storage and discussed this

00:41:33,069 --> 00:41:37,839
same issue that there's no competitive

00:41:35,650 --> 00:41:40,809
compulsion on people to put their data

00:41:37,839 --> 00:41:42,699
where I can find it I'm actually hunting

00:41:40,809 --> 00:41:44,199
someone in South Australia is now a head

00:41:42,699 --> 00:41:46,150
of department and ten years ago did a

00:41:44,199 --> 00:41:48,279
study and we want to do a comparative

00:41:46,150 --> 00:41:50,859
study and to get the data out of it is

00:41:48,279 --> 00:41:53,890
not me yeah she's now so busy she might

00:41:50,859 --> 00:41:55,779
be in Europe or whatever and this is so

00:41:53,890 --> 00:41:58,420
the research infrastructure theme the

00:41:55,779 --> 00:42:01,089
RDS I I think it is yeah it's coming to

00:41:58,420 --> 00:42:03,069
place these guys were head honchos from

00:42:01,089 --> 00:42:04,869
where but we're talking about but the

00:42:03,069 --> 00:42:06,309
the oceanographic people have got a

00:42:04,869 --> 00:42:08,049
march on everybody because they've been

00:42:06,309 --> 00:42:11,049
doing this for a while but the tools

00:42:08,049 --> 00:42:12,459
exist and and they're still thinking

00:42:11,049 --> 00:42:14,559
about the same things y'all think of it

00:42:12,459 --> 00:42:16,779
how do we put it up month we put it up

00:42:14,559 --> 00:42:19,299
how do we put notebooks a drip so we can

00:42:16,779 --> 00:42:20,679
find it again do it so as I'm more of a

00:42:19,299 --> 00:42:23,380
statement the question but people should

00:42:20,679 --> 00:42:24,729
be aware that there's what 70 million

00:42:23,380 --> 00:42:26,289
dollars gone down the tube already

00:42:24,729 --> 00:42:27,670
there's a lot more money floating about

00:42:26,289 --> 00:42:29,499
the government wants us to stick the

00:42:27,670 --> 00:42:32,650
stuff in one place and find it again

00:42:29,499 --> 00:42:34,059
which i think is key to leveraging all

00:42:32,650 --> 00:42:36,910
the work that people have done thank you

00:42:34,059 --> 00:42:40,269
yep everything comments on that clear um

00:42:36,910 --> 00:42:42,880
yes I'm aware of rds-a so nectar is the

00:42:40,269 --> 00:42:44,259
organization that has built the

00:42:42,880 --> 00:42:48,880
researcher cloud which is what I showed

00:42:44,259 --> 00:42:49,959
for VMS and they there's also half that

00:42:48,880 --> 00:42:51,459
money went to them and half that money

00:42:49,959 --> 00:42:54,010
went to AI dsi so half the money went to

00:42:51,459 --> 00:42:55,330
compute and half went to storage um

00:42:54,010 --> 00:42:56,380
which means that we've now got the

00:42:55,330 --> 00:42:58,840
computer we don't have the storage

00:42:56,380 --> 00:43:01,300
because they were built separately so

00:42:58,840 --> 00:43:03,070
yeah we're looking forward to this

00:43:01,300 --> 00:43:05,430
coming online and getting access to it

00:43:03,070 --> 00:43:07,990
the other thing I just comment on with

00:43:05,430 --> 00:43:09,130
data being accessible is that situations

00:43:07,990 --> 00:43:10,570
definitely improved and it mostly

00:43:09,130 --> 00:43:12,040
depends on the journals a lot of

00:43:10,570 --> 00:43:13,720
journals you submit a paper to now it's

00:43:12,040 --> 00:43:16,360
a requirement of your submission that

00:43:13,720 --> 00:43:19,230
you upload the data to it can be an

00:43:16,360 --> 00:43:21,520
international archive it usually is and

00:43:19,230 --> 00:43:24,130
that you set a policy for who's allowed

00:43:21,520 --> 00:43:25,660
to access that data so a lot of the time

00:43:24,130 --> 00:43:27,100
you're not allowed to submit your paper

00:43:25,660 --> 00:43:31,510
to the journal until you can give them a

00:43:27,100 --> 00:43:43,210
dla for your uploaded data so right

00:43:31,510 --> 00:43:45,910
that's all yeah yeah that's right so

00:43:43,210 --> 00:43:47,290
it's it's it's got better but that

00:43:45,910 --> 00:43:49,750
doesn't help very much if you want all

00:43:47,290 --> 00:43:52,030
data where you'll email the researcher

00:43:49,750 --> 00:43:52,990
and maybe they don't even have maybe

00:43:52,030 --> 00:43:54,040
they've got it on an old hard drive

00:43:52,990 --> 00:43:58,060
somewhere they don't even remember where

00:43:54,040 --> 00:44:00,970
to find it Ravens ok we have them time

00:43:58,060 --> 00:44:06,640
for two more quick questions if you'll

00:44:00,970 --> 00:44:09,460
be so some I sorry I understand a lot of

00:44:06,640 --> 00:44:11,400
what you do is involves like graph

00:44:09,460 --> 00:44:13,270
theory and network theory some

00:44:11,400 --> 00:44:14,740
bioinformaticians I've spoken to have

00:44:13,270 --> 00:44:16,990
kind of scoffed at the idea of using

00:44:14,740 --> 00:44:19,750
Python or any other high-level language

00:44:16,990 --> 00:44:21,880
arguing that it just can't perform

00:44:19,750 --> 00:44:24,220
adequately for things like Network

00:44:21,880 --> 00:44:26,050
traversals and things like that and have

00:44:24,220 --> 00:44:28,870
justified continuing to just build their

00:44:26,050 --> 00:44:31,570
tools in C++ in your experience is that

00:44:28,870 --> 00:44:34,570
desert rose at a practical limitation or

00:44:31,570 --> 00:44:37,210
I actually don't know so when I put up

00:44:34,570 --> 00:44:39,160
that slide of what kinds of things do we

00:44:37,210 --> 00:44:39,940
do that involve computation that very

00:44:39,160 --> 00:44:41,530
first thing which was the

00:44:39,940 --> 00:44:46,120
computationally intensive tasks that

00:44:41,530 --> 00:44:47,680
probably includes that stuff and I could

00:44:46,120 --> 00:44:48,970
be writing those tools and maybe one day

00:44:47,680 --> 00:44:51,970
I will be right but right now in my

00:44:48,970 --> 00:44:53,950
current job i'm not so i'm doing a lot

00:44:51,970 --> 00:44:58,180
of data analysis i'm not doing a lot of

00:44:53,950 --> 00:44:59,890
writing of large tools so mostly if i

00:44:58,180 --> 00:45:01,150
need to do a genome assembly for

00:44:59,890 --> 00:45:04,330
instance which is very much a graph

00:45:01,150 --> 00:45:06,160
graph based algorithm i will just be

00:45:04,330 --> 00:45:07,480
running a genome assembler tool which

00:45:06,160 --> 00:45:12,700
was probably written in c

00:45:07,480 --> 00:45:14,560
um and I i'm not sure where the language

00:45:12,700 --> 00:45:19,750
is really a constraint on those

00:45:14,560 --> 00:45:23,080
algorithms Adrian Higgins from Planet

00:45:19,750 --> 00:45:24,970
innovation I recently had a need for

00:45:23,080 --> 00:45:26,770
collaboration using ipython notebook and

00:45:24,970 --> 00:45:29,290
there really are no tools to support it

00:45:26,770 --> 00:45:32,080
the merging of the of the JSON files is

00:45:29,290 --> 00:45:35,920
just a nightmare I found one guy kya

00:45:32,080 --> 00:45:40,990
Patel from Washington and he's put

00:45:35,920 --> 00:45:43,990
together a an implementation in the

00:45:40,990 --> 00:45:47,140
browser which then then allows you to

00:45:43,990 --> 00:45:48,490
use Google Docs to to manage

00:45:47,140 --> 00:45:50,200
collaborations like that I have

00:45:48,490 --> 00:45:51,850
absolutely brilliant had a chance to try

00:45:50,200 --> 00:45:53,369
it yes I've tried that off set that up

00:45:51,850 --> 00:45:57,330
on the Camino works really really well

00:45:53,369 --> 00:46:00,310
anyone can grab it at Jupiter /

00:45:57,330 --> 00:46:02,140
collaboratory on github yeah it's

00:46:00,310 --> 00:46:04,109
brilliant I'll have to ask you about it

00:46:02,140 --> 00:46:06,490
yeah what we're doing at the moment is

00:46:04,109 --> 00:46:08,109
maintaining separate notebook documents

00:46:06,490 --> 00:46:10,390
with a shared server so at least we can

00:46:08,109 --> 00:46:11,760
see each other analyses others analysis

00:46:10,390 --> 00:46:13,930
and we can kind of cut and paste and

00:46:11,760 --> 00:46:15,400
while it seems clunky it's still light

00:46:13,930 --> 00:46:16,780
years ahead of you've got your own

00:46:15,400 --> 00:46:21,960
bundle of scripts in your directory

00:46:16,780 --> 00:46:21,960
somewhere thank you very much again put

00:46:26,970 --> 00:46:29,030

YouTube URL: https://www.youtube.com/watch?v=jKcRcdu9X3Y


