Title: Using MicroPython in the wild
Publication date: 2017-08-04
Playlist: Pycon Australia 2017
Description: 
	Damien George

http://2017.pycon-au.org/schedule/presentation/68/

#pyconau

This talk was given at PyCon Australia 2017 which was held from 3-8 August, 2017 in Melbourne, Victoria.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2017, we're returning to Melbourne, bringing together students, enthusiasts, and professionals with a love of Python from around Australia, and from all over the World. 

August 3-8 2017, Melbourne, Victoria

Python, PyCon, PyConAU
Captions: 
	00:00:00,149 --> 00:00:06,660
hello everybody good morning hope

00:00:02,909 --> 00:00:09,420
everybody is enjoying PyCon it's a

00:00:06,660 --> 00:00:12,870
pleasure to introduce Damian and it's an

00:00:09,420 --> 00:00:16,020
honor to we all know him as the creator

00:00:12,870 --> 00:00:18,840
of micro Python and the ecosystem around

00:00:16,020 --> 00:00:20,789
it so he has a background in theoretical

00:00:18,840 --> 00:00:23,490
physics robotics and computer

00:00:20,789 --> 00:00:28,410
engineering and he loves to program and

00:00:23,490 --> 00:00:31,140
we all love to do that ok so welcome to

00:00:28,410 --> 00:00:39,590
Python and I hand it over to you now

00:00:31,140 --> 00:00:43,590
ok ok thanks Cinelli and hello everyone

00:00:39,590 --> 00:00:47,760
welcome to the IOT mini conference and

00:00:43,590 --> 00:00:49,489
thanks for coming to my talk so I gave

00:00:47,760 --> 00:00:52,500
quite a couple of talks last year and

00:00:49,489 --> 00:00:54,510
maybe heard them maybe didn't that this

00:00:52,500 --> 00:00:56,550
talk were independent but also a little

00:00:54,510 --> 00:00:59,070
bit of a follow one of the things that

00:00:56,550 --> 00:01:01,469
have happened since in the last 12

00:00:59,070 --> 00:01:03,449
months with microphone and I hope to

00:01:01,469 --> 00:01:05,189
just tell you a bit about micro Python

00:01:03,449 --> 00:01:08,520
for those who don't know about it

00:01:05,189 --> 00:01:10,530
give some demos and tell you what some

00:01:08,520 --> 00:01:13,320
really cool applications that it's being

00:01:10,530 --> 00:01:17,670
used for in the real world or out in the

00:01:13,320 --> 00:01:20,009
wild as this picture is depicting ok so

00:01:17,670 --> 00:01:25,380
my question is given by this little logo

00:01:20,009 --> 00:01:27,930
in the middle there all right so this is

00:01:25,380 --> 00:01:29,729
kind of like my spiel site slide my

00:01:27,930 --> 00:01:31,740
elevator pitch slide but there's a big

00:01:29,729 --> 00:01:33,509
opportunity these days in electronics

00:01:31,740 --> 00:01:35,520
and microcontrollers because there's

00:01:33,509 --> 00:01:37,500
lots of really cool components that you

00:01:35,520 --> 00:01:39,180
can buy and use like software-defined

00:01:37,500 --> 00:01:42,000
radio things we heard about in the

00:01:39,180 --> 00:01:44,070
previous talk cameras gyroscopes

00:01:42,000 --> 00:01:46,290
accelerometers motors really great

00:01:44,070 --> 00:01:49,049
sensors and actuators that you can use

00:01:46,290 --> 00:01:51,869
to build really cool devices Internet of

00:01:49,049 --> 00:01:52,920
Things devices but the problem with

00:01:51,869 --> 00:01:55,110
these things is they're really

00:01:52,920 --> 00:01:56,460
complicated to use you have to read

00:01:55,110 --> 00:01:59,399
through lots of data sheets and

00:01:56,460 --> 00:02:01,979
understand registers and understand lots

00:01:59,399 --> 00:02:04,950
of things to use them so there's an

00:02:01,979 --> 00:02:06,810
opportunity now we know that are from a

00:02:04,950 --> 00:02:08,129
desktop programming so everyone uses

00:02:06,810 --> 00:02:12,250
Python because it's so much better than

00:02:08,129 --> 00:02:14,830
C no but but from a I mean it's

00:02:12,250 --> 00:02:16,150
because python is a high-level language

00:02:14,830 --> 00:02:18,880
and you can get things done more quickly

00:02:16,150 --> 00:02:20,080
and it's cheaper from cost of programmer

00:02:18,880 --> 00:02:23,320
point of view because the program is

00:02:20,080 --> 00:02:24,970
more efficient and you know you write a

00:02:23,320 --> 00:02:26,440
web server in Python very easily you

00:02:24,970 --> 00:02:28,690
don't write a web server in C because

00:02:26,440 --> 00:02:30,940
it's really hard and parsing JSON and C

00:02:28,690 --> 00:02:32,920
is really not fun um you can do it but

00:02:30,940 --> 00:02:35,770
it's easier to do it in Python and

00:02:32,920 --> 00:02:38,140
similarly on a microcontroller which is

00:02:35,770 --> 00:02:40,150
traditionally program C the idea is to

00:02:38,140 --> 00:02:42,730
use a high-level language like Python

00:02:40,150 --> 00:02:45,100
so that you can more easily get your

00:02:42,730 --> 00:02:46,870
devices running much more quickly so it

00:02:45,100 --> 00:02:49,810
takes you a day instead of a month to

00:02:46,870 --> 00:02:52,060
build some cool device so it lets

00:02:49,810 --> 00:02:53,500
beginners come on board and do things

00:02:52,060 --> 00:02:56,709
they couldn't do before because they've

00:02:53,500 --> 00:02:59,140
now got access to microcontrollers via

00:02:56,709 --> 00:03:00,520
Python and and also people who were very

00:02:59,140 --> 00:03:03,430
familiar with the field can get things

00:03:00,520 --> 00:03:05,320
done much more productively so that

00:03:03,430 --> 00:03:09,520
that's sort of the the spiel for micro

00:03:05,320 --> 00:03:10,840
Python so but what exactly what exactly

00:03:09,520 --> 00:03:12,850
is it so it's a complete

00:03:10,840 --> 00:03:15,160
re-implementation of the Python language

00:03:12,850 --> 00:03:17,140
so it doesn't take anything from the C

00:03:15,160 --> 00:03:20,410
Python implementation it's all written

00:03:17,140 --> 00:03:23,200
from scratch and it was designed from

00:03:20,410 --> 00:03:25,090
the ground up to be very very efficient

00:03:23,200 --> 00:03:28,540
with resources and not use much memory

00:03:25,090 --> 00:03:31,390
and not use much code space which is

00:03:28,540 --> 00:03:33,940
important and to also be efficient when

00:03:31,390 --> 00:03:35,769
executing so you know normal Python

00:03:33,940 --> 00:03:39,190
running on your desk take takes

00:03:35,769 --> 00:03:41,200
megabytes of data to of RAM to run in if

00:03:39,190 --> 00:03:43,630
not hundreds of megabytes but my co

00:03:41,200 --> 00:03:47,670
person can run in about eight kilobytes

00:03:43,630 --> 00:03:50,590
of RAM so you know a thousand times less

00:03:47,670 --> 00:03:52,900
it's also designed to run without an

00:03:50,590 --> 00:03:55,450
operating system so directly on top of a

00:03:52,900 --> 00:03:57,940
bare-metal as I like to say so you have

00:03:55,450 --> 00:04:00,640
the microcontroller or a Raspberry Pi or

00:03:57,940 --> 00:04:02,230
anything and there's no operating system

00:04:00,640 --> 00:04:04,330
it's just micro path and running

00:04:02,230 --> 00:04:06,100
straight on top of that so you can think

00:04:04,330 --> 00:04:08,230
of Python micro Python as the actual

00:04:06,100 --> 00:04:09,489
operating system itself and the Python

00:04:08,230 --> 00:04:11,440
prompt does the only way you can

00:04:09,489 --> 00:04:13,780
interact with the computer and it gives

00:04:11,440 --> 00:04:15,310
you a real feeling like you're in you

00:04:13,780 --> 00:04:18,669
know you have a master control of this

00:04:15,310 --> 00:04:20,320
machine so no question includes the

00:04:18,669 --> 00:04:23,890
familiar ripple that you'll use through

00:04:20,320 --> 00:04:26,669
the read evaluate print loop the in

00:04:23,890 --> 00:04:29,340
Python so you can do stuff interactively

00:04:26,669 --> 00:04:31,409
and it has some of the Python libraries

00:04:29,340 --> 00:04:33,240
like the JSON module but in macro path

00:04:31,409 --> 00:04:36,720
and everything starts with a u for micro

00:04:33,240 --> 00:04:38,940
so it's called you JSON and so on and

00:04:36,720 --> 00:04:40,650
there's also extra modules in there to

00:04:38,940 --> 00:04:44,460
control hardware and I'll show a bit of

00:04:40,650 --> 00:04:45,780
those later on so if you want to track

00:04:44,460 --> 00:04:46,680
micro path and it runs on lots of

00:04:45,780 --> 00:04:49,319
different boards

00:04:46,680 --> 00:04:51,180
there's the PI board and so for the

00:04:49,319 --> 00:04:53,069
really low quality resolution pictures

00:04:51,180 --> 00:04:54,500
but there's a PI board there and then

00:04:53,069 --> 00:04:57,930
there's a micro bit and then there's the

00:04:54,500 --> 00:05:01,020
esp8266 and then there's the ESP 32 and

00:04:57,930 --> 00:05:03,990
then there's a the CC text instrument CC

00:05:01,020 --> 00:05:06,090
300 then there's Adafruit circuit

00:05:03,990 --> 00:05:08,400
playground there's lots of boards that

00:05:06,090 --> 00:05:10,080
runs on we can even run it on your PC

00:05:08,400 --> 00:05:13,069
you can even run it in the browser and

00:05:10,080 --> 00:05:15,539
all playing about that a bit later

00:05:13,069 --> 00:05:18,120
there's some links here you can go if

00:05:15,539 --> 00:05:22,169
you want to buy or download or try it

00:05:18,120 --> 00:05:23,460
out so I'll just quickly do a demo for

00:05:22,169 --> 00:05:25,169
those who haven't seen it and for those

00:05:23,460 --> 00:05:27,330
who have seen micro Python before

00:05:25,169 --> 00:05:33,120
hopefully the demos something's slightly

00:05:27,330 --> 00:05:34,680
new for you okay so I have you don't

00:05:33,120 --> 00:05:37,199
really have to see much but this is a

00:05:34,680 --> 00:05:39,779
board in a nice little purple housing

00:05:37,199 --> 00:05:41,789
and it's collected connected to a sensor

00:05:39,779 --> 00:05:45,240
and accelerometer sensor and the most a

00:05:41,789 --> 00:05:47,310
servo motor on the output and then to

00:05:45,240 --> 00:05:53,490
the computer via USB just so I can type

00:05:47,310 --> 00:05:57,150
commands I and okay and here so is the

00:05:53,490 --> 00:05:59,639
prompt so this is running directly on

00:05:57,150 --> 00:06:02,969
the board and I can do simple things

00:05:59,639 --> 00:06:04,229
like addition and stuff okay but I want

00:06:02,969 --> 00:06:08,039
to do something a bit more interesting

00:06:04,229 --> 00:06:09,659
than just addition so the machine module

00:06:08,039 --> 00:06:12,389
has some really useful things for

00:06:09,659 --> 00:06:13,860
working with microcontrollers for

00:06:12,389 --> 00:06:16,560
example an i2c

00:06:13,860 --> 00:06:20,219
class so this is a way to communicate

00:06:16,560 --> 00:06:22,349
with sensors so I create an i2c object

00:06:20,219 --> 00:06:25,949
and then I can scan the bus for devices

00:06:22,349 --> 00:06:28,319
so it's found for devices and one of

00:06:25,949 --> 00:06:34,430
them the number 107 is that gyroscope

00:06:28,319 --> 00:06:38,530
that I want to work with so I can read

00:06:34,430 --> 00:06:41,020
read from the gyroscope address 107

00:06:38,530 --> 00:06:45,490
and I want to read the gyroscopes memory

00:06:41,020 --> 00:06:48,840
say and address what are we doing

00:06:45,490 --> 00:06:51,760
address 20 and I want to read one byte

00:06:48,840 --> 00:06:54,340
okay and you know it's non Python so I

00:06:51,760 --> 00:06:55,780
couldn't use like being convert to

00:06:54,340 --> 00:07:00,070
binary underscore is the previous

00:06:55,780 --> 00:07:02,380
expression whoops okay being off all

00:07:00,070 --> 00:07:04,210
right so it's a hex F because it was a

00:07:02,380 --> 00:07:05,770
it was a byte string that was not a

00:07:04,210 --> 00:07:09,490
integer okay

00:07:05,770 --> 00:07:11,860
so this is the value of the register the

00:07:09,490 --> 00:07:14,950
register Oh X xx and if I go to my

00:07:11,860 --> 00:07:16,330
datasheet just quickly so this is a list

00:07:14,950 --> 00:07:19,600
of all the registers in the gyroscope

00:07:16,330 --> 00:07:21,400
and control register one is an address

00:07:19,600 --> 00:07:22,860
so X xx and it tells you all the bits

00:07:21,400 --> 00:07:28,450
there

00:07:22,860 --> 00:07:32,950
now let me I actually just need to cuz I

00:07:28,450 --> 00:07:35,710
redid this demo before okay so read from

00:07:32,950 --> 00:07:37,710
that value now it's actually got okay

00:07:35,710 --> 00:07:40,780
I'll do it properly this time

00:07:37,710 --> 00:07:43,419
okay when I reset the gyroscope that

00:07:40,780 --> 00:07:46,690
register has values just one one one at

00:07:43,419 --> 00:07:48,370
the end so that means that the X the Y

00:07:46,690 --> 00:07:50,530
and the Z axis of the gyroscope to

00:07:48,370 --> 00:07:54,220
enabled but it's actually in power-down

00:07:50,530 --> 00:08:00,970
mode so if I start to read data from it

00:07:54,220 --> 00:08:02,380
read from m107 don't worry about that

00:08:00,970 --> 00:08:04,419
where X hey let's just so it increments

00:08:02,380 --> 00:08:07,600
the memory address and I want to read

00:08:04,419 --> 00:08:11,890
six bytes from address 28 for go back to

00:08:07,600 --> 00:08:15,040
my datasheet address 28 is the output X

00:08:11,890 --> 00:08:17,680
low and that's followed by Apple to xh y

00:08:15,040 --> 00:08:19,540
l YH said l said hey so there the data

00:08:17,680 --> 00:08:22,750
registers of the gyroscope the XY and

00:08:19,540 --> 00:08:24,910
there's ed axes so if I'm read six bytes

00:08:22,750 --> 00:08:26,860
I get the this is the raw data from the

00:08:24,910 --> 00:08:28,510
gyroscope and if I move the gyroscope

00:08:26,860 --> 00:08:29,229
around nothing's happening the data is

00:08:28,510 --> 00:08:32,200
all the same

00:08:29,229 --> 00:08:38,969
okay so I've actually got to enable it

00:08:32,200 --> 00:08:38,969
so right to the register

00:08:41,280 --> 00:08:53,040
so this is enabling the okay it needs to

00:08:46,290 --> 00:08:55,350
be a buffer by its object okay so now

00:08:53,040 --> 00:08:58,710
I've enabled the gyroscope by writing to

00:08:55,350 --> 00:09:00,810
that control register and if I read the

00:08:58,710 --> 00:09:03,600
data it now changes as I move the thing

00:09:00,810 --> 00:09:06,480
around okay but this data is just bytes

00:09:03,600 --> 00:09:10,200
now I have to interpret it so it's

00:09:06,480 --> 00:09:12,000
actually in 16-bit signed format so I

00:09:10,200 --> 00:09:13,770
couldn't use the struct module so in

00:09:12,000 --> 00:09:18,870
python things are really easy it's an

00:09:13,770 --> 00:09:21,420
import struct so let's get some data and

00:09:18,870 --> 00:09:24,380
save it in a variable so i want to

00:09:21,420 --> 00:09:28,980
interpret that so struck unpack and

00:09:24,380 --> 00:09:31,440
little-endian signed half word three

00:09:28,980 --> 00:09:34,860
values for x y&z okay so that's my

00:09:31,440 --> 00:09:36,300
Jarrah scope x y&z value okay so now

00:09:34,860 --> 00:09:37,890
that we know how to get the values from

00:09:36,300 --> 00:09:44,390
the gyroscopes let's make a loop and

00:09:37,890 --> 00:09:52,200
extract report time first so forever

00:09:44,390 --> 00:09:58,260
data could extract the data values just

00:09:52,200 --> 00:10:01,370
use they're very quick so extract the

00:09:58,260 --> 00:10:07,650
data there and then print vowels and

00:10:01,370 --> 00:10:09,900
let's sleep for say 50 milliseconds okay

00:10:07,650 --> 00:10:12,330
so this is the raw gyroscope data and if

00:10:09,900 --> 00:10:14,339
I move the gyroscope around so if it's

00:10:12,330 --> 00:10:16,050
stable it's it's close to zero but if I

00:10:14,339 --> 00:10:18,660
move it quickly I get really big numbers

00:10:16,050 --> 00:10:22,620
depending on if I'm rotating left right

00:10:18,660 --> 00:10:24,660
or whatever okay so that's a really

00:10:22,620 --> 00:10:27,030
quick way to start using an i2c sensor

00:10:24,660 --> 00:10:29,220
and it's like super quick and you can

00:10:27,030 --> 00:10:31,440
use all your Python abilities struct

00:10:29,220 --> 00:10:34,770
module let's just do one more thing

00:10:31,440 --> 00:10:39,089
create a server and we'll control the

00:10:34,770 --> 00:10:41,220
server from the from the gyroscope if I

00:10:39,089 --> 00:10:46,430
could get it okay the history still

00:10:41,220 --> 00:10:48,780
there so extract the data get the values

00:10:46,430 --> 00:10:51,780
print the values just to show you what's

00:10:48,780 --> 00:10:53,910
going on and servo set the angle of the

00:10:51,780 --> 00:10:57,090
servo to say the Z acts

00:10:53,910 --> 00:11:01,290
/ a hundred just because the numbers are

00:10:57,090 --> 00:11:06,530
very big and then sleep for fifty

00:11:01,290 --> 00:11:12,470
milliseconds again okay so now if I

00:11:06,530 --> 00:11:16,620
write that it's going to be crazy really

00:11:12,470 --> 00:11:25,800
all right so it should be if I rotate

00:11:16,620 --> 00:11:27,420
this so in the z axis okay so it'll it's

00:11:25,800 --> 00:11:28,950
actually the derivative of the angle cuz

00:11:27,420 --> 00:11:30,480
it's a gyroscope is telling that at the

00:11:28,950 --> 00:11:32,670
change in angle if I don't change

00:11:30,480 --> 00:11:34,980
anything the server stay still but if I

00:11:32,670 --> 00:11:37,020
move left it moves to the right well if

00:11:34,980 --> 00:11:40,020
I move that way it's only what I moved

00:11:37,020 --> 00:11:41,220
as the server actually moves okay that's

00:11:40,020 --> 00:11:43,770
how gyroscopes work they're the

00:11:41,220 --> 00:11:45,300
derivative of the angle okay so that's

00:11:43,770 --> 00:11:46,920
the that's that's the end of the demo

00:11:45,300 --> 00:11:50,400
but it shows you how quick and easy it

00:11:46,920 --> 00:11:52,140
is to get something working so yeah you

00:11:50,400 --> 00:11:54,150
might still need to read a data sheet to

00:11:52,140 --> 00:11:56,010
understand things but it's easy to

00:11:54,150 --> 00:11:57,660
implement that data sheet and also

00:11:56,010 --> 00:11:59,430
hopefully and in this case for this

00:11:57,660 --> 00:12:01,710
sensor it's there someone's written

00:11:59,430 --> 00:12:03,810
actually a python module that that you

00:12:01,710 --> 00:12:06,420
know allows you to provide a class and

00:12:03,810 --> 00:12:07,860
some methods like get gyroscope XY and

00:12:06,420 --> 00:12:09,780
they will draw a scope to say we'll try

00:12:07,860 --> 00:12:11,550
a scope and it's quite a simple wrapper

00:12:09,780 --> 00:12:12,770
and then you don't have even have to

00:12:11,550 --> 00:12:18,150
read the datasheet

00:12:12,770 --> 00:12:22,770
all right so okay that's the live demo

00:12:18,150 --> 00:12:25,500
so what's happened in the past year so

00:12:22,770 --> 00:12:27,810
it's a 12-month recap of advances in the

00:12:25,500 --> 00:12:28,920
software of markup I thought I think the

00:12:27,810 --> 00:12:30,840
biggest thing which I should have done

00:12:28,920 --> 00:12:33,420
at the very very beginning was implement

00:12:30,840 --> 00:12:35,670
help modules so help modules if you type

00:12:33,420 --> 00:12:37,080
a it tells you what modules are

00:12:35,670 --> 00:12:39,120
available in market in your current

00:12:37,080 --> 00:12:42,420
implementation of microphone so help

00:12:39,120 --> 00:12:44,610
I hope this work help modules okay they

00:12:42,420 --> 00:12:47,040
go so this is a list of the modules that

00:12:44,610 --> 00:12:49,440
you could you can use on this board so

00:12:47,040 --> 00:12:51,180
this is a the important thing is sort of

00:12:49,440 --> 00:12:52,590
discoverability so I've got a Python

00:12:51,180 --> 00:12:54,770
board and how you know what can I do

00:12:52,590 --> 00:13:00,330
with it well you know I can import

00:12:54,770 --> 00:13:01,860
random and then random dot press press

00:13:00,330 --> 00:13:04,230
tab and it will tell me what's in the

00:13:01,860 --> 00:13:06,209
random thing so I can do you know Rand

00:13:04,230 --> 00:13:08,699
int we all know how that were

00:13:06,209 --> 00:13:13,619
from a hundred to four hundred and then

00:13:08,699 --> 00:13:16,350
yeah so on okay so help modules yeah

00:13:13,619 --> 00:13:17,670
it's a really useful thing and by the

00:13:16,350 --> 00:13:19,139
way that's exactly how you do it in

00:13:17,670 --> 00:13:20,819
normal Python so it's the same thing

00:13:19,139 --> 00:13:22,399
your knowledge goes from Myka pythons in

00:13:20,819 --> 00:13:25,259
the world happen

00:13:22,399 --> 00:13:27,119
micro peeps so pip is used to install

00:13:25,259 --> 00:13:28,769
modules on your computer for a normal

00:13:27,119 --> 00:13:31,740
pattern and you can use it in micro

00:13:28,769 --> 00:13:33,629
Python to install things but because you

00:13:31,740 --> 00:13:35,220
don't have a like a bash prompt or

00:13:33,629 --> 00:13:37,230
something you actually have a module

00:13:35,220 --> 00:13:39,449
called you pip so you do import new pip

00:13:37,230 --> 00:13:41,069
and you picked our install and then you

00:13:39,449 --> 00:13:42,839
can install modules on them on the PI

00:13:41,069 --> 00:13:44,220
board it's got to be connected to the

00:13:42,839 --> 00:13:44,699
Internet they're obviously for that to

00:13:44,220 --> 00:13:46,800
work

00:13:44,699 --> 00:13:48,990
but yeah that that's actually

00:13:46,800 --> 00:13:50,550
implementing and working there's some

00:13:48,990 --> 00:13:53,689
modules for the internet of things like

00:13:50,550 --> 00:13:56,369
you sync you a stink-eye oh so you can

00:13:53,689 --> 00:13:58,860
create HTTP server that can have

00:13:56,369 --> 00:14:00,749
multiple connections so that mirrors how

00:13:58,860 --> 00:14:04,529
it's done in non person with a stink-eye

00:14:00,749 --> 00:14:06,360
oh there's a module you MQTT for doing

00:14:04,529 --> 00:14:12,449
simple messaging in the internet of

00:14:06,360 --> 00:14:14,970
things there's things that have been

00:14:12,449 --> 00:14:17,429
added to help think reduce memory usage

00:14:14,970 --> 00:14:19,980
so you Jason load so you know load s

00:14:17,429 --> 00:14:21,749
will parse a string but load you can

00:14:19,980 --> 00:14:23,189
pass it a file and it will read it you

00:14:21,749 --> 00:14:25,769
know as it goes instead of loading the

00:14:23,189 --> 00:14:28,290
whole string into memory same with

00:14:25,769 --> 00:14:30,360
usually live decomp Iyer so instead of

00:14:28,290 --> 00:14:31,499
having to hold the whole file in memory

00:14:30,360 --> 00:14:33,929
and decompress it all at once

00:14:31,499 --> 00:14:35,220
you can decompress it as a stream so

00:14:33,929 --> 00:14:36,839
this helps ports that don't have much

00:14:35,220 --> 00:14:41,189
memory and they just want to read things

00:14:36,839 --> 00:14:43,290
in one at a time there's also a virtual

00:14:41,189 --> 00:14:45,290
file system subsystem virtual file

00:14:43,290 --> 00:14:48,209
subsystem that's been added so you can

00:14:45,290 --> 00:14:50,160
mount multiple file systems an arbitrary

00:14:48,209 --> 00:14:51,899
number of them under the under macro

00:14:50,160 --> 00:14:55,110
Python you can even implement a file

00:14:51,899 --> 00:15:00,269
system in path so you write a class and

00:14:55,110 --> 00:15:03,480
that class has to have Lister CW get CWD

00:15:00,269 --> 00:15:05,879
open and all the things that you'd

00:15:03,480 --> 00:15:07,649
expect the OS module to have to do file

00:15:05,879 --> 00:15:09,540
system things if you're at a class that

00:15:07,649 --> 00:15:11,420
implements those basic functions you can

00:15:09,540 --> 00:15:13,619
actually mount an instance of that class

00:15:11,420 --> 00:15:17,370
under the virtual file system and then

00:15:13,619 --> 00:15:18,870
use normal lister and open and stuff on

00:15:17,370 --> 00:15:21,330
that class

00:15:18,870 --> 00:15:22,800
so it's pretty powerful in that sense so

00:15:21,330 --> 00:15:24,810
you can have a normal like a fat

00:15:22,800 --> 00:15:28,410
filesystem living alongside your own

00:15:24,810 --> 00:15:30,630
path and filesystem and other things on

00:15:28,410 --> 00:15:34,380
the esp8266 has implemented inline

00:15:30,630 --> 00:15:36,720
assembler there's been additional

00:15:34,380 --> 00:15:39,120
software queue handlers so that you can

00:15:36,720 --> 00:15:42,450
now allocate memory doing an IQ although

00:15:39,120 --> 00:15:44,190
it's not as the latency is longer these

00:15:42,450 --> 00:15:46,380
are all quite technical things

00:15:44,190 --> 00:15:48,570
threading has been implemented pi boards

00:15:46,380 --> 00:15:52,650
so you can use the underscore threat

00:15:48,570 --> 00:15:55,800
model and have multiple threads of it

00:15:52,650 --> 00:15:57,210
code executing at the same time and it's

00:15:55,800 --> 00:15:59,279
also microwave has been ported to the

00:15:57,210 --> 00:16:02,070
Sofia operating system which is the many

00:15:59,279 --> 00:16:05,279
exceptions sort of IOT operating system

00:16:02,070 --> 00:16:07,410
so marketing can run on top of that

00:16:05,279 --> 00:16:10,680
which makes means it can run on lots of

00:16:07,410 --> 00:16:12,529
different boards this list is pretty

00:16:10,680 --> 00:16:13,980
long lots of stuffs happened in the year

00:16:12,529 --> 00:16:17,160
support for double-precision

00:16:13,980 --> 00:16:19,680
floating-point and then there's been

00:16:17,160 --> 00:16:21,870
lots of bug fixes minor things like 0 ^

00:16:19,680 --> 00:16:23,310
-1 will now rekt an exception for

00:16:21,870 --> 00:16:24,270
example where before it just gave you

00:16:23,310 --> 00:16:26,760
nan

00:16:24,270 --> 00:16:30,360
so lots of IDI cases have been fixed

00:16:26,760 --> 00:16:32,190
from people finding small bugs refining

00:16:30,360 --> 00:16:34,770
compatibility with c python so you can

00:16:32,190 --> 00:16:36,680
now hash floats for example I don't know

00:16:34,770 --> 00:16:38,820
why I really want a hash float but

00:16:36,680 --> 00:16:41,910
sometimes you want because if you know

00:16:38,820 --> 00:16:47,190
if your flash if you put 1.01 a dick and

00:16:41,910 --> 00:16:49,380
1.0 you know one one it's like it's a

00:16:47,190 --> 00:16:50,940
bit strange because the same in the same

00:16:49,380 --> 00:16:53,790
float maybe hashes different things if

00:16:50,940 --> 00:16:56,730
it's slightly different anyway that some

00:16:53,790 --> 00:16:57,990
people like to hash floats the code size

00:16:56,730 --> 00:16:59,820
has been actually reduced whilst

00:16:57,990 --> 00:17:03,570
features have been added there's less

00:16:59,820 --> 00:17:06,809
stack being used and test coverage is up

00:17:03,570 --> 00:17:08,790
from 94% to 98% and the last 2% is

00:17:06,809 --> 00:17:11,130
really tough to get so I might have

00:17:08,790 --> 00:17:12,750
further that we'll go do note that the

00:17:11,130 --> 00:17:14,429
the first version of the pi board from

00:17:12,750 --> 00:17:15,569
the first kickstarter that was done over

00:17:14,429 --> 00:17:18,030
two and a half three and a half years

00:17:15,569 --> 00:17:19,650
ago is still supported and all these new

00:17:18,030 --> 00:17:21,540
features are all available for it so i

00:17:19,650 --> 00:17:22,949
have one from a long time ago you can

00:17:21,540 --> 00:17:25,260
just install the latest firmware and you

00:17:22,949 --> 00:17:29,720
get everything you get threading and all

00:17:25,260 --> 00:17:29,720
these calls okay

00:17:30,330 --> 00:17:34,950
so the another cool thing that we've

00:17:31,890 --> 00:17:37,590
developed you can run micro Python in

00:17:34,950 --> 00:17:40,710
the browser by using this thing called

00:17:37,590 --> 00:17:45,179
unicorn which is an M scripted version

00:17:40,710 --> 00:17:46,559
of a qemu CPU emulator lots of technical

00:17:45,179 --> 00:17:49,110
terms in there but basically it means

00:17:46,559 --> 00:17:52,049
you can go to this web address and

00:17:49,110 --> 00:17:57,299
you'll get beta prompt and it's really

00:17:52,049 --> 00:17:58,980
Micra browser on the simulated arm or so

00:17:57,299 --> 00:18:00,480
you can actually do inline assembler in

00:17:58,980 --> 00:18:02,010
the browser as well like it's with

00:18:00,480 --> 00:18:03,630
you're really running on an arm core

00:18:02,010 --> 00:18:05,399
there and there's a little picture of a

00:18:03,630 --> 00:18:06,929
pipe out there you can connect a servo

00:18:05,399 --> 00:18:08,549
motor to it you can click the buttons

00:18:06,929 --> 00:18:10,320
you can make the LEDs turn on and off in

00:18:08,549 --> 00:18:14,970
exactly the same way that you would use

00:18:10,320 --> 00:18:15,809
the real hardware so I'm yeah I won't

00:18:14,970 --> 00:18:17,700
show it to you because there's not

00:18:15,809 --> 00:18:21,299
enough time to do a demo but just go to

00:18:17,700 --> 00:18:24,330
this address and try things out it's

00:18:21,299 --> 00:18:26,279
still in beta there's a few bugs you may

00:18:24,330 --> 00:18:29,370
find so just refresh your page if things

00:18:26,279 --> 00:18:32,639
crash but you know you can select things

00:18:29,370 --> 00:18:34,110
like your RAM size and has a little

00:18:32,639 --> 00:18:35,730
clock speed indicator I think it gets up

00:18:34,110 --> 00:18:38,730
to like 1 megahertz or something in the

00:18:35,730 --> 00:18:43,950
sleep in the browser but that's been a

00:18:38,730 --> 00:18:46,169
lot of fun developing we've have a new

00:18:43,950 --> 00:18:48,779
LCD screen that you can you can get

00:18:46,169 --> 00:18:50,370
which and you can duplicate the rip pull

00:18:48,779 --> 00:18:54,919
on it so that this is like outputting

00:18:50,370 --> 00:18:57,029
the the actual Python ripple on the LCD

00:18:54,919 --> 00:18:58,730
and we also have these really fancy

00:18:57,029 --> 00:19:05,010
housings which are made of machined

00:18:58,730 --> 00:19:06,389
anodized and engraved aluminium and you

00:19:05,010 --> 00:19:08,850
can have a look at one up here at the

00:19:06,389 --> 00:19:12,269
front later on if you're interested ok

00:19:08,850 --> 00:19:13,860
so that's sort of the advances

00:19:12,269 --> 00:19:15,840
I just want to go on and talk about

00:19:13,860 --> 00:19:19,110
things so we're micro passions being

00:19:15,840 --> 00:19:23,460
used in the wild or out there in in the

00:19:19,110 --> 00:19:25,850
real world and we have some we have some

00:19:23,460 --> 00:19:28,740
people who are using micro Python so

00:19:25,850 --> 00:19:32,510
veteran engineers whose job it is to

00:19:28,740 --> 00:19:34,559
make devices for people on contract and

00:19:32,510 --> 00:19:36,120
they're using micro pathing because it's

00:19:34,559 --> 00:19:39,330
a really great way to build products

00:19:36,120 --> 00:19:41,100
really quickly you start with a you have

00:19:39,330 --> 00:19:42,600
like a PI board and yuri at market path

00:19:41,100 --> 00:19:43,830
and running on it you develop your

00:19:42,600 --> 00:19:45,810
application

00:19:43,830 --> 00:19:49,260
you prototype it very quickly and then

00:19:45,810 --> 00:19:50,460
you refine it you maybe make some custom

00:19:49,260 --> 00:19:52,500
hardware because you really need to be

00:19:50,460 --> 00:19:54,330
better or smaller or faster and you

00:19:52,500 --> 00:19:55,530
might write some code in C to replace

00:19:54,330 --> 00:19:57,420
the Python bits that you need to run

00:19:55,530 --> 00:20:00,090
faster but eventually you end up with a

00:19:57,420 --> 00:20:01,890
product that's using micro path of sort

00:20:00,090 --> 00:20:04,170
of those as the application level layer

00:20:01,890 --> 00:20:07,500
or is the the logic the glue logic of

00:20:04,170 --> 00:20:09,810
your of your system and it's been used

00:20:07,500 --> 00:20:11,130
in a in a traffic measurement device

00:20:09,810 --> 00:20:14,870
which has had has been actually been

00:20:11,130 --> 00:20:17,640
certified by a Institute of measurements

00:20:14,870 --> 00:20:21,210
so that's actually in use micro PAC

00:20:17,640 --> 00:20:28,560
that's being being used in a real world

00:20:21,210 --> 00:20:30,450
device it's it's used in a way to to

00:20:28,560 --> 00:20:35,420
measure some things optically for

00:20:30,450 --> 00:20:37,860
medical use and it's in currently being

00:20:35,420 --> 00:20:42,540
designed into a device that will help

00:20:37,860 --> 00:20:44,820
brain surgery so it's um it's not just

00:20:42,540 --> 00:20:50,940
the toy it's it's it's actually useful

00:20:44,820 --> 00:20:53,040
in real industry it's also using

00:20:50,940 --> 00:20:54,960
education on the BBC micro bit and there

00:20:53,040 --> 00:20:58,800
was recently a program where micro boots

00:20:54,960 --> 00:21:00,810
were taken out to help students at

00:20:58,800 --> 00:21:02,640
school learn about well teach them about

00:21:00,810 --> 00:21:04,710
computers and things with really

00:21:02,640 --> 00:21:06,090
hands-on experience so it's a really

00:21:04,710 --> 00:21:08,190
there's a time little micro bit with the

00:21:06,090 --> 00:21:11,220
smiley face a bit of red lights in the

00:21:08,190 --> 00:21:13,860
bottom left there running micro Python

00:21:11,220 --> 00:21:18,000
so that's really cool it's reaching lots

00:21:13,860 --> 00:21:20,040
and lots of people and it's also being

00:21:18,000 --> 00:21:25,680
used by hobbyists who are sort of our

00:21:20,040 --> 00:21:26,970
core our core user group I guess who you

00:21:25,680 --> 00:21:28,350
know make all sorts of weird and

00:21:26,970 --> 00:21:32,160
wonderful things out of it so on the

00:21:28,350 --> 00:21:34,020
left here is a barometer so a weather

00:21:32,160 --> 00:21:34,530
station and there's three sensor nodes

00:21:34,020 --> 00:21:36,930
placed

00:21:34,530 --> 00:21:38,520
sort of around the house and they're all

00:21:36,930 --> 00:21:41,820
running like a Python and transmitting

00:21:38,520 --> 00:21:44,660
over some very warm radio it's not

00:21:41,820 --> 00:21:47,400
bluetooth but it's 2.4 gigahertz

00:21:44,660 --> 00:21:51,210
transmitting their battery status and

00:21:47,400 --> 00:21:53,490
pressure and this thing will then log it

00:21:51,210 --> 00:21:58,340
on a SD card and output it on an ePaper

00:21:53,490 --> 00:22:00,780
display and there's a

00:21:58,340 --> 00:22:02,520
Quadra Petrova up there with lots of

00:22:00,780 --> 00:22:04,260
servos which has being controlled by

00:22:02,520 --> 00:22:07,170
micro Python and then on the bottom

00:22:04,260 --> 00:22:09,150
right there is a two wheel balancing

00:22:07,170 --> 00:22:13,410
robot that has a gyroscope like I showed

00:22:09,150 --> 00:22:16,500
you before and it has a couple of motors

00:22:13,410 --> 00:22:18,780
and it has a radio control so you can

00:22:16,500 --> 00:22:20,610
remote control it and microphone will

00:22:18,780 --> 00:22:22,470
sit there will read the gyroscope and

00:22:20,610 --> 00:22:24,540
the accelerometer to work at its current

00:22:22,470 --> 00:22:26,520
angle and then adjust the motors

00:22:24,540 --> 00:22:28,620
accordingly so that it's balanced and

00:22:26,520 --> 00:22:33,180
also if you use the remote control you

00:22:28,620 --> 00:22:35,910
can move it around so people can build

00:22:33,180 --> 00:22:38,070
really cool things with Nathan and I

00:22:35,910 --> 00:22:40,410
guess these are these are internet e of

00:22:38,070 --> 00:22:42,110
things things because they use you know

00:22:40,410 --> 00:22:45,180
microcontrollers and they use wireless

00:22:42,110 --> 00:22:46,950
communication and I said this last year

00:22:45,180 --> 00:22:48,620
but that to me Internet of Things is

00:22:46,950 --> 00:22:50,340
really this combination of

00:22:48,620 --> 00:22:53,490
microcontrollers and embedded devices

00:22:50,340 --> 00:22:56,400
that are communicating over the wire or

00:22:53,490 --> 00:22:58,170
sorry over over-the-air so it doesn't

00:22:56,400 --> 00:23:00,240
have to be like a coffee machine that's

00:22:58,170 --> 00:23:03,000
connected to the internet and tweets it

00:23:00,240 --> 00:23:05,130
can be something like like a robot

00:23:03,000 --> 00:23:08,220
that's controlled over over the air you

00:23:05,130 --> 00:23:10,050
know I mean it's still it's

00:23:08,220 --> 00:23:13,770
communication as microcontrollers and

00:23:10,050 --> 00:23:16,260
it's technology the other thing here on

00:23:13,770 --> 00:23:18,720
the left is this called the PI gets

00:23:16,260 --> 00:23:22,200
asked so with guitars you have all these

00:23:18,720 --> 00:23:23,460
knobs and levers to adjust the all the

00:23:22,200 --> 00:23:26,070
different properties of the electric

00:23:23,460 --> 00:23:28,950
guitar how it works and this guy wanted

00:23:26,070 --> 00:23:30,720
to sort of suit that up so be able to

00:23:28,950 --> 00:23:33,630
control even more things on the electric

00:23:30,720 --> 00:23:36,330
guitar so he used the PI board in that

00:23:33,630 --> 00:23:39,030
and wrote his coding Micah Python and

00:23:36,330 --> 00:23:41,490
and and added all these extra

00:23:39,030 --> 00:23:44,820
electronics to sense the guitar and

00:23:41,490 --> 00:23:47,220
control it and I'm not a musician and I

00:23:44,820 --> 00:23:49,410
don't really know how but he had this

00:23:47,220 --> 00:23:51,540
this massive array of electronics and

00:23:49,410 --> 00:23:53,010
and he was like microphone you really

00:23:51,540 --> 00:23:55,140
helped me do this because the

00:23:53,010 --> 00:23:56,610
programming was so easy and I could make

00:23:55,140 --> 00:23:58,670
this really cool thing and he has all

00:23:56,610 --> 00:24:02,850
these videos of his of his PI guitar

00:23:58,670 --> 00:24:05,760
it's pretty cool and then on the right

00:24:02,850 --> 00:24:07,440
here is a quadcopter so this is actually

00:24:05,760 --> 00:24:08,029
something I started a long time ago I

00:24:07,440 --> 00:24:11,809
wanted to

00:24:08,029 --> 00:24:13,820
working and I've only just re got this

00:24:11,809 --> 00:24:18,320
thing out of the cupboard and dusted it

00:24:13,820 --> 00:24:19,219
off and one aim is to show that micro

00:24:18,320 --> 00:24:21,379
fighting can actually control a

00:24:19,219 --> 00:24:22,969
quadcopter in real time and like this is

00:24:21,379 --> 00:24:24,409
the the ultimate example of having

00:24:22,969 --> 00:24:26,179
something you don't want to crash you

00:24:24,409 --> 00:24:27,889
don't want it to run out of memory or

00:24:26,179 --> 00:24:30,349
pause because it's doing a garbage

00:24:27,889 --> 00:24:32,149
collection you want it to actually okay

00:24:30,349 --> 00:24:33,950
like you you got your quadcopter

00:24:32,149 --> 00:24:36,139
hovering there and yet it cannot pause

00:24:33,950 --> 00:24:38,239
for a moment to think it's got to keep

00:24:36,139 --> 00:24:42,379
those motors spinning so that it doesn't

00:24:38,239 --> 00:24:44,049
drop out of the sky so I know it can be

00:24:42,379 --> 00:24:46,609
done I just I just it just has to be

00:24:44,049 --> 00:24:49,039
well the proof is in the actual code

00:24:46,609 --> 00:24:52,009
right so the idea is to make some code

00:24:49,039 --> 00:24:53,570
and publish a nice demo of how you can

00:24:52,009 --> 00:24:56,299
use it to build a quadcopter and then

00:24:53,570 --> 00:24:59,469
control it also with the remote control

00:24:56,299 --> 00:25:01,429
over the over the air and then maybe

00:24:59,469 --> 00:25:04,129
maybe go further and add like

00:25:01,429 --> 00:25:06,440
localization things and and make it

00:25:04,129 --> 00:25:08,919
really cool so these are the sorts of

00:25:06,440 --> 00:25:11,539
things micro pathing is being useful and

00:25:08,919 --> 00:25:14,719
there's lots more this is just a sample

00:25:11,539 --> 00:25:16,129
that I wanted to give you and you can go

00:25:14,719 --> 00:25:18,409
online and search for micro Python

00:25:16,129 --> 00:25:20,889
there's YouTube videos and on the forum

00:25:18,409 --> 00:25:23,119
there's lots of cool stuff

00:25:20,889 --> 00:25:25,849
there's also been a book written

00:25:23,119 --> 00:25:27,139
certainly by a good friend Nicholas

00:25:25,849 --> 00:25:29,149
Harvey

00:25:27,139 --> 00:25:31,489
who was a really real champion of the

00:25:29,149 --> 00:25:33,589
micro bit and this is an O'Reilly book

00:25:31,489 --> 00:25:36,919
about micro Python so this is really

00:25:33,589 --> 00:25:39,469
cool it's like a milestone it same sort

00:25:36,919 --> 00:25:40,700
of at the beginner and goes gives you an

00:25:39,469 --> 00:25:42,139
overview of different boards and what

00:25:40,700 --> 00:25:45,440
you can do with them and you use micro

00:25:42,139 --> 00:25:47,419
Python and I don't think it's I think

00:25:45,440 --> 00:25:48,529
it's only if early release at the moment

00:25:47,419 --> 00:25:52,219
online I don't think you can buy a high

00:25:48,529 --> 00:25:54,739
copy just yet I wrote a foreword to it

00:25:52,219 --> 00:25:58,489
so yeah you can you can read some some

00:25:54,739 --> 00:26:00,859
of my words if you get that book but

00:25:58,489 --> 00:26:01,399
yeah so that's that's the end of my on

00:26:00,859 --> 00:26:03,349
my talk

00:26:01,399 --> 00:26:06,229
but so microphone dog is where you can

00:26:03,349 --> 00:26:08,059
go to read information the forum is

00:26:06,229 --> 00:26:10,309
where people discuss things on github is

00:26:08,059 --> 00:26:12,710
where all the code is develops and

00:26:10,309 --> 00:26:14,899
there's this you new unicorn thing which

00:26:12,710 --> 00:26:17,690
you can try out if you want it's linked

00:26:14,899 --> 00:26:19,849
from the main website but yeah that's

00:26:17,690 --> 00:26:20,980
all I had to say and I guess I have a

00:26:19,849 --> 00:26:32,559
few more minutes left

00:26:20,980 --> 00:26:34,799
questions thanks any questions for them

00:26:32,559 --> 00:26:34,799
yet

00:26:48,450 --> 00:26:52,600
hi-yah I'm currently I'm doing a better

00:26:51,100 --> 00:26:55,000
programming in season very much as

00:26:52,600 --> 00:26:57,460
decision switching to Python I notices

00:26:55,000 --> 00:27:00,070
some commercial support like this PyCon

00:26:57,460 --> 00:27:01,990
dot IO European company an Adafruit with

00:27:00,070 --> 00:27:04,559
some of their other boards yeah they

00:27:01,990 --> 00:27:07,120
have micro Python or circuit Python

00:27:04,559 --> 00:27:13,240
implementations yep as the creator of

00:27:07,120 --> 00:27:17,830
micro fight then what's your view okay

00:27:13,240 --> 00:27:19,990
you say yeah good question so I think of

00:27:17,830 --> 00:27:22,659
micro Python is sort of a Linux kernel

00:27:19,990 --> 00:27:24,399
and that people are making distributions

00:27:22,659 --> 00:27:26,409
of it ladies a Punto and Red Hat an Arch

00:27:24,399 --> 00:27:28,510
Linux and so on and so there's micro

00:27:26,409 --> 00:27:30,820
Python and then there's sort of my

00:27:28,510 --> 00:27:32,830
distribution which is like official

00:27:30,820 --> 00:27:34,390
micro Python in the PI board and then

00:27:32,830 --> 00:27:36,490
there's Adafruit with their circuit

00:27:34,390 --> 00:27:38,020
Python so they've taken micro Python and

00:27:36,490 --> 00:27:40,600
rebranded it as cycle Python and

00:27:38,020 --> 00:27:43,659
underneath it's just micro Python but

00:27:40,600 --> 00:27:44,740
they've got a few extra their philosophy

00:27:43,659 --> 00:27:46,809
was that they want to make it easier for

00:27:44,740 --> 00:27:49,149
people to use these are for beginners to

00:27:46,809 --> 00:27:51,010
use and they think that normal

00:27:49,149 --> 00:27:53,140
microphone is not easier I would

00:27:51,010 --> 00:27:54,640
disagree but they just had a different a

00:27:53,140 --> 00:27:55,899
different mentality I mean it's like the

00:27:54,640 --> 00:27:57,429
difference with a bunt or and Red Hat

00:27:55,899 --> 00:27:59,049
and arch linux it's just different for

00:27:57,429 --> 00:28:00,520
different sort of people and they've

00:27:59,049 --> 00:28:03,580
created different libraries for doing

00:28:00,520 --> 00:28:07,750
i/o it's just a different way of doing I

00:28:03,580 --> 00:28:09,490
oh and i2c and and and PACOM as well

00:28:07,750 --> 00:28:10,899
have taken it and created their own line

00:28:09,490 --> 00:28:14,169
of boards and they are very commercially

00:28:10,899 --> 00:28:17,350
oriented company PyCon very confusing

00:28:14,169 --> 00:28:20,080
itself I always mix the two but PI comm

00:28:17,350 --> 00:28:22,899
they're creating boards with Laura and

00:28:20,080 --> 00:28:24,970
sig Fox connectivity so that's their

00:28:22,899 --> 00:28:27,370
main slant and they're using the ESP 32

00:28:24,970 --> 00:28:29,230
as their courtship so these are these

00:28:27,370 --> 00:28:31,149
are technically competitors to me in

00:28:29,230 --> 00:28:32,380
that I'm trying to run a business

00:28:31,149 --> 00:28:35,169
Jorge robotics is the name of the

00:28:32,380 --> 00:28:37,090
business selling PI boards and stuff but

00:28:35,169 --> 00:28:39,190
I'm also developing the core software

00:28:37,090 --> 00:28:40,690
which all my competitors run so

00:28:39,190 --> 00:28:42,520
basically I write software for my

00:28:40,690 --> 00:28:45,100
company and all my talk my competitors

00:28:42,520 --> 00:28:46,240
companies but you know you keep keep

00:28:45,100 --> 00:28:50,260
your friends close and your enemies even

00:28:46,240 --> 00:28:51,880
closer so if you write your enemies

00:28:50,260 --> 00:28:53,679
software then I guess you got them in

00:28:51,880 --> 00:28:55,539
the palm of your hand but that that's

00:28:53,679 --> 00:28:57,669
kind of that's the state of play and and

00:28:55,539 --> 00:28:59,530
my philosophy is look let micro Python

00:28:57,669 --> 00:29:01,480
flourish and if it's going to be other

00:28:59,530 --> 00:29:04,140
people taking it into

00:29:01,480 --> 00:29:04,140
that at all

00:29:08,559 --> 00:29:12,619
Thanks so great talk Damian I was

00:29:11,239 --> 00:29:14,989
wondering if you could share with us

00:29:12,619 --> 00:29:21,820
what's upcoming in micro Python

00:29:14,989 --> 00:29:24,709
okay so what's in the next one yeah so

00:29:21,820 --> 00:29:26,149
well I'm doing work at the moment all

00:29:24,709 --> 00:29:27,469
doing work for the European Space Agency

00:29:26,149 --> 00:29:29,239
I've been doing it for quite a while now

00:29:27,469 --> 00:29:31,700
because they want to use micro pathing

00:29:29,239 --> 00:29:34,099
to control satellites and there's been

00:29:31,700 --> 00:29:36,469
some really good progress there to make

00:29:34,099 --> 00:29:39,799
micro paths and actually ready to go on

00:29:36,469 --> 00:29:42,379
a satellite this there's no you know

00:29:39,799 --> 00:29:45,049
these things have timescales of five

00:29:42,379 --> 00:29:46,969
years so the and and there are plans for

00:29:45,049 --> 00:29:49,579
micro Python to perhaps go into space

00:29:46,969 --> 00:29:52,879
but it's it's it's early days and things

00:29:49,579 --> 00:29:56,749
can always change so in the next half

00:29:52,879 --> 00:29:58,219
years but in terms of I've also been

00:29:56,749 --> 00:30:00,950
developing version 2 of the PI board

00:29:58,219 --> 00:30:02,839
recently it's been a lot longer than

00:30:00,950 --> 00:30:04,700
expected but hopefully it will be really

00:30:02,839 --> 00:30:06,649
cool when it's released

00:30:04,700 --> 00:30:09,109
there's just currently a very very long

00:30:06,649 --> 00:30:11,599
lead time of microcontrollers of the

00:30:09,109 --> 00:30:14,959
order of six months so that's really set

00:30:11,599 --> 00:30:16,969
us back but look out for a new version

00:30:14,959 --> 00:30:21,109
of the board with lots of cool features

00:30:16,969 --> 00:30:23,509
and in terms of software I'm

00:30:21,109 --> 00:30:25,429
concentrating well I think there's a lot

00:30:23,509 --> 00:30:30,289
of Aspen's buffer in the past six months

00:30:25,429 --> 00:30:31,579
and more concentrating on applications

00:30:30,289 --> 00:30:33,679
and things that markup I think an beeps

00:30:31,579 --> 00:30:38,149
for making demos and tutorials and

00:30:33,679 --> 00:30:39,079
things to help people get on board okay

00:30:38,149 --> 00:30:41,379
but thanks for the question it was a

00:30:39,079 --> 00:30:41,379
good group

00:30:46,490 --> 00:30:52,049
hi I'm wondering is any sort of scope or

00:30:50,159 --> 00:30:55,789
possibility to make like a power of

00:30:52,049 --> 00:30:59,010
Ethernet enabled pie board

00:30:55,789 --> 00:31:02,370
yes you can it

00:30:59,010 --> 00:31:04,470
there's definitely scope the esti line

00:31:02,370 --> 00:31:06,690
of chips that have Ethernet built into

00:31:04,470 --> 00:31:10,700
their hardware that micro breath in runs

00:31:06,690 --> 00:31:13,200
on those already so that's a good start

00:31:10,700 --> 00:31:16,470
microphone doesn't have built-in an

00:31:13,200 --> 00:31:18,120
Ethernet support it can do Wi-Fi just

00:31:16,470 --> 00:31:20,789
because that's a more interesting but

00:31:18,120 --> 00:31:22,020
adding ether it's sort of not to add you

00:31:20,789 --> 00:31:23,760
know all the building blocks are they

00:31:22,020 --> 00:31:25,710
just have to put them together and then

00:31:23,760 --> 00:31:27,090
the power over ethernet bit that's more

00:31:25,710 --> 00:31:29,640
of a hardware thing than a software

00:31:27,090 --> 00:31:30,710
thing so you just need to build a board

00:31:29,640 --> 00:31:33,150
that has power over ethernet

00:31:30,710 --> 00:31:35,309
capabilities and then put micro passing

00:31:33,150 --> 00:31:37,980
on it that's not on my horizon though

00:31:35,309 --> 00:31:50,520
but there's no reason why someone else

00:31:37,980 --> 00:31:53,360
can't do it lovely talk I get a cool mug

00:31:50,520 --> 00:31:53,360

YouTube URL: https://www.youtube.com/watch?v=WI-nTf5iM84


