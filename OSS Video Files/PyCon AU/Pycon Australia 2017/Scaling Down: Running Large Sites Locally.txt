Title: Scaling Down: Running Large Sites Locally
Publication date: 2017-08-05
Playlist: Pycon Australia 2017
Description: 
	Andrew Godwin

http://2017.pycon-au.org/schedule/presentation/25/

#pyconau

This talk was given at PyCon Australia 2017 which was held from 3-8 August, 2017 in Melbourne, Victoria.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2017, we're returning to Melbourne, bringing together students, enthusiasts, and professionals with a love of Python from around Australia, and from all over the World. 

August 3-8 2017, Melbourne, Victoria

Python, PyCon, PyConAU
Captions: 
	00:00:00,890 --> 00:00:07,980
all right let's get the party started

00:00:04,319 --> 00:00:10,170
again next up we have Andrew Godwin he's

00:00:07,980 --> 00:00:12,139
going to talk about to us about scaling

00:00:10,170 --> 00:00:14,759
down and running large sites locally

00:00:12,139 --> 00:00:17,670
Andrews member of the Django core team

00:00:14,759 --> 00:00:19,859
he's senior engineer at Eventbrite and

00:00:17,670 --> 00:00:22,410
was originally or is the original author

00:00:19,859 --> 00:00:25,740
of the Django migrations framework and

00:00:22,410 --> 00:00:28,380
South which was there before he had

00:00:25,740 --> 00:00:31,769
worked at Eventbrite where he focuses on

00:00:28,380 --> 00:00:33,660
the architectural stuff and yeah let's

00:00:31,769 --> 00:00:45,660
see what he has for us give him away

00:00:33,660 --> 00:00:47,850
applause thank you Marcus so yes as just

00:00:45,660 --> 00:00:50,879
discussed I am a django core developer

00:00:47,850 --> 00:00:53,730
and very relevant to this talk a senior

00:00:50,879 --> 00:00:55,680
engineer at Eventbrite and what this

00:00:53,730 --> 00:00:57,960
talk is really about is about how

00:00:55,680 --> 00:01:00,539
Eventbrite s-- internal developer tools

00:00:57,960 --> 00:01:02,960
have evolved over my four years there so

00:01:00,539 --> 00:01:05,970
let's go back in history a bit to 2013

00:01:02,960 --> 00:01:08,640
when I joined Eventbrite in roughly in

00:01:05,970 --> 00:01:12,119
August about this time so I came into

00:01:08,640 --> 00:01:14,880
Eventbrite as a slightly more naive

00:01:12,119 --> 00:01:17,430
slightly more junior developer and I

00:01:14,880 --> 00:01:19,259
thought oh there's no way that their

00:01:17,430 --> 00:01:21,119
codebase can be worse than lanyards it's

00:01:19,259 --> 00:01:25,229
a bit crafty and we've got a few hacks

00:01:21,119 --> 00:01:26,369
in there boy was I wrong but the key

00:01:25,229 --> 00:01:29,189
thing to think about is how it was

00:01:26,369 --> 00:01:31,259
organized so at the time Eventbrite was

00:01:29,189 --> 00:01:33,990
pretty much one big Django monolith with

00:01:31,259 --> 00:01:36,540
I think about 20 or 30 django apps in it

00:01:33,990 --> 00:01:38,850
and all of this ran on one big vagrant

00:01:36,540 --> 00:01:41,280
vm as a developer you would sit down

00:01:38,850 --> 00:01:43,320
install the vagrant virtual machine it

00:01:41,280 --> 00:01:44,880
would take an hour to to rebuild itself

00:01:43,320 --> 00:01:47,220
and install all the packages and all the

00:01:44,880 --> 00:01:48,840
dependencies there's about 200

00:01:47,220 --> 00:01:51,780
requirements lines in there I think and

00:01:48,840 --> 00:01:54,270
eventually you get a working machine now

00:01:51,780 --> 00:01:56,850
if you have any sense of how developing

00:01:54,270 --> 00:01:59,549
works you may realize it's a little bit

00:01:56,850 --> 00:02:02,159
of a problem on the horizon here which

00:01:59,549 --> 00:02:05,399
is that things tend to grow so let's

00:02:02,159 --> 00:02:07,140
flash forward to today in 2017 we still

00:02:05,399 --> 00:02:09,330
have that monolith but we have 40

00:02:07,140 --> 00:02:11,250
individual services that also talk to it

00:02:09,330 --> 00:02:13,500
what we're doing is we're taking the big

00:02:11,250 --> 00:02:15,960
monolith and slowly carving out Peters

00:02:13,500 --> 00:02:17,460
in two separate services running over a

00:02:15,960 --> 00:02:19,680
microservices framework which is of

00:02:17,460 --> 00:02:21,840
course very fancy and modern and all

00:02:19,680 --> 00:02:23,910
those things but what the practicality

00:02:21,840 --> 00:02:26,280
of this is is that those are individual

00:02:23,910 --> 00:02:28,200
things that run by themselves NH the

00:02:26,280 --> 00:02:31,590
individual Services has their own data

00:02:28,200 --> 00:02:33,000
store and what this leads to is roughly

00:02:31,590 --> 00:02:36,840
a hundred and fifty different moving

00:02:33,000 --> 00:02:39,270
components my sequel's casandra's Python

00:02:36,840 --> 00:02:42,510
containers JavaScript renderers all of

00:02:39,270 --> 00:02:44,220
that stuff and what this means is we

00:02:42,510 --> 00:02:46,650
have a much more complex system in

00:02:44,220 --> 00:02:48,570
particular we have a hundred and fifty

00:02:46,650 --> 00:02:50,160
dollar containers if you've ever tried

00:02:48,570 --> 00:02:52,050
to deal with docker with about ten

00:02:50,160 --> 00:02:55,760
containers you know that's where your

00:02:52,050 --> 00:02:58,680
hard ask let alone having 150 of them a

00:02:55,760 --> 00:03:00,690
crucial thing is though we've kept it to

00:02:58,680 --> 00:03:02,700
one to two hours rebuild time which is

00:03:00,690 --> 00:03:04,050
still worse than I'd like to but given

00:03:02,700 --> 00:03:05,820
the growth we've seen in those four

00:03:04,050 --> 00:03:08,580
years we've managed to keep it down keep

00:03:05,820 --> 00:03:10,700
it sane so how do we do that and more

00:03:08,580 --> 00:03:13,740
importantly how do we do it with this

00:03:10,700 --> 00:03:15,570
there's a lot of site there's so much

00:03:13,740 --> 00:03:16,950
site in fact that it takes about 24

00:03:15,570 --> 00:03:19,650
gigabytes of RAM to run all of

00:03:16,950 --> 00:03:21,239
Eventbrite on one person's laptop now if

00:03:19,650 --> 00:03:24,510
you are familiar with the Apple product

00:03:21,239 --> 00:03:26,880
line Apple will only sell you a maximum

00:03:24,510 --> 00:03:28,470
of 16 gigabytes of RAM and so unless we

00:03:26,880 --> 00:03:30,959
can download more ram from the internet

00:03:28,470 --> 00:03:33,810
we have a very bad chance about to run

00:03:30,959 --> 00:03:36,510
the whole site at once and this results

00:03:33,810 --> 00:03:38,640
in this huge big ball of code and RAM

00:03:36,510 --> 00:03:40,230
usage and the monolith is still in there

00:03:38,640 --> 00:03:42,480
as well and you have to work out what to

00:03:40,230 --> 00:03:45,060
do with it now when you think about

00:03:42,480 --> 00:03:46,980
developing this docker many people first

00:03:45,060 --> 00:03:48,450
turn to dock compose they're like oh

00:03:46,980 --> 00:03:50,370
well of course we have this tool the

00:03:48,450 --> 00:03:51,510
dock had wrote some of my friends in

00:03:50,370 --> 00:03:54,000
fact people who wrote docker compose

00:03:51,510 --> 00:03:55,830
from a company I used to work out and

00:03:54,000 --> 00:03:58,380
it's very good tool for taking a few

00:03:55,830 --> 00:04:00,290
different dock containers plugging them

00:03:58,380 --> 00:04:03,209
together and understanding how they work

00:04:00,290 --> 00:04:04,950
unfortunately if you present it with a

00:04:03,209 --> 00:04:06,690
hundred and fifty it starts have a small

00:04:04,950 --> 00:04:09,630
panic attack and goes away into little

00:04:06,690 --> 00:04:11,489
corner and so we had to learn to

00:04:09,630 --> 00:04:13,320
overcome not only the size restrictions

00:04:11,489 --> 00:04:15,209
but other problems we had as well with

00:04:13,320 --> 00:04:18,030
dock compose this is what we have what

00:04:15,209 --> 00:04:19,919
we call bay bay is event writes internal

00:04:18,030 --> 00:04:22,080
replacement for dock compose it is a

00:04:19,919 --> 00:04:24,000
tool for running development of our

00:04:22,080 --> 00:04:26,310
development environments based on docker

00:04:24,000 --> 00:04:27,330
with not only lots of images with lots

00:04:26,310 --> 00:04:28,800
of disparate images that

00:04:27,330 --> 00:04:30,629
relate in different ways and managing

00:04:28,800 --> 00:04:33,569
that really complex web of dependencies

00:04:30,629 --> 00:04:36,810
see that in a bit but first of all what

00:04:33,569 --> 00:04:39,690
is bei essence so first of all it's

00:04:36,810 --> 00:04:41,280
Python 3 it is one of the big things I

00:04:39,690 --> 00:04:43,860
went into the project doing was like no

00:04:41,280 --> 00:04:45,810
we have to have some Python 3 code at

00:04:43,860 --> 00:04:47,759
some point everyone we Mosel start with

00:04:45,810 --> 00:04:49,740
the separate dev tools suffice not part

00:04:47,759 --> 00:04:51,840
of the rest of the site so it was our

00:04:49,740 --> 00:04:53,460
first Python 3 project it's now not the

00:04:51,840 --> 00:04:55,440
only one thankfully but it was leading

00:04:53,460 --> 00:04:57,720
the way internally for us of that it

00:04:55,440 --> 00:04:59,729
runs in sadaqa API so it does still talk

00:04:57,720 --> 00:05:01,680
to docker is like dock compose it's a

00:04:59,729 --> 00:05:03,449
layer on top of docker and I'll just

00:05:01,680 --> 00:05:05,009
throw out some of the issues that brings

00:05:03,449 --> 00:05:07,530
with it but it's much better than

00:05:05,009 --> 00:05:09,930
writing your own from scratch container

00:05:07,530 --> 00:05:11,580
system I've done that in the past that

00:05:09,930 --> 00:05:12,690
come and ask me how later if you want to

00:05:11,580 --> 00:05:15,719
battle the over a drink

00:05:12,690 --> 00:05:17,219
it's very difficult and also we want to

00:05:15,719 --> 00:05:18,719
be portable at outsider vamp right it's

00:05:17,219 --> 00:05:20,190
no good developing at all like this and

00:05:18,719 --> 00:05:22,949
saying and it's just for internal use

00:05:20,190 --> 00:05:25,199
like not only is it not a great way to

00:05:22,949 --> 00:05:27,900
design software have it so internal and

00:05:25,199 --> 00:05:30,539
probably it just fits 2017 event right

00:05:27,900 --> 00:05:32,009
rather than 2020 Eventbrite but also try

00:05:30,539 --> 00:05:35,639
and share it with everyone else has the

00:05:32,009 --> 00:05:37,139
same kind of problems now if you saw my

00:05:35,639 --> 00:05:39,389
talk yesterday you may have seen this

00:05:37,139 --> 00:05:40,500
slide where I very wonderfully said

00:05:39,389 --> 00:05:42,029
don't reinvent the wheel

00:05:40,500 --> 00:05:45,539
it's excellent advice and I'm ignoring

00:05:42,029 --> 00:05:47,460
it entirely there are reasons in this

00:05:45,539 --> 00:05:50,069
case to reinvent the wheel as I said doc

00:05:47,460 --> 00:05:52,409
composes is very well known it's very

00:05:50,069 --> 00:05:53,669
widely used it's well documented but

00:05:52,409 --> 00:05:56,580
there are some key things that doesn't

00:05:53,669 --> 00:05:58,020
do and these are the three key things I

00:05:56,580 --> 00:06:00,539
sort of want to talk about in this talk

00:05:58,020 --> 00:06:03,539
as to why we have an alternative to

00:06:00,539 --> 00:06:05,069
compose the first one the best one which

00:06:03,539 --> 00:06:07,979
you've seen from that Ram figure earlier

00:06:05,069 --> 00:06:09,930
is running subsets of the site now we

00:06:07,979 --> 00:06:12,360
can't run a whole copy of of embroil

00:06:09,930 --> 00:06:13,620
anyone laptop and we don't tend to do

00:06:12,360 --> 00:06:15,509
the thing where you run on a virtual

00:06:13,620 --> 00:06:17,219
machine in the cloud some companies do

00:06:15,509 --> 00:06:19,620
that they give each developer a huge

00:06:17,219 --> 00:06:21,930
virtual machine ush into it do your

00:06:19,620 --> 00:06:23,729
development there we don't do that part

00:06:21,930 --> 00:06:25,409
of that is because we have some remote

00:06:23,729 --> 00:06:27,900
developers in places like Argentina

00:06:25,409 --> 00:06:29,279
where the bandwidth is very bad and part

00:06:27,900 --> 00:06:30,870
of it's just a cultural thing from all

00:06:29,279 --> 00:06:33,990
the years like working on planes and

00:06:30,870 --> 00:06:35,520
places the ban internet in general the

00:06:33,990 --> 00:06:38,219
other thing we have is develop a code

00:06:35,520 --> 00:06:40,710
mounting this is where you can work in

00:06:38,219 --> 00:06:42,810
your code live on

00:06:40,710 --> 00:06:44,280
sort of docker container set and it

00:06:42,810 --> 00:06:47,100
understands how to do that and I'll come

00:06:44,280 --> 00:06:48,630
to that much more later in this talk and

00:06:47,100 --> 00:06:51,030
the last bits image building and pulling

00:06:48,630 --> 00:06:52,949
now docker does image building perfectly

00:06:51,030 --> 00:06:54,210
well that's what it's designed for but

00:06:52,949 --> 00:06:57,060
there are some key things in there like

00:06:54,210 --> 00:06:58,560
SSH keys an authorization that aren't

00:06:57,060 --> 00:07:00,539
part of the main docker sweets so I'll

00:06:58,560 --> 00:07:02,190
come to those as well but let's start

00:07:00,539 --> 00:07:04,800
with that subset stuff with containers

00:07:02,190 --> 00:07:07,139
and links so I just told you that there

00:07:04,800 --> 00:07:08,789
are 150 of them if I was allowed to I

00:07:07,139 --> 00:07:10,710
would show you the full graph of all

00:07:08,789 --> 00:07:12,539
hundred and fifty unfortunately the

00:07:10,710 --> 00:07:14,880
names and the layout is proprietary and

00:07:12,539 --> 00:07:17,370
confidential so I have a very contrived

00:07:14,880 --> 00:07:20,190
example here for you instead if it were

00:07:17,370 --> 00:07:22,740
this simple I'd be a happy man so here

00:07:20,190 --> 00:07:24,870
you can see this tree of five different

00:07:22,740 --> 00:07:27,360
services with some kind of theoretical

00:07:24,870 --> 00:07:29,130
site where we have a core django

00:07:27,360 --> 00:07:31,259
monolith with its own my sequel database

00:07:29,130 --> 00:07:32,759
we have a separate payment service which

00:07:31,259 --> 00:07:35,160
we do have internally in Eventbrite and

00:07:32,759 --> 00:07:36,960
payments has its own my sequel database

00:07:35,160 --> 00:07:39,210
as well for auditing it so append-only

00:07:36,960 --> 00:07:41,940
database and then a Redis we use for

00:07:39,210 --> 00:07:44,849
caching and other things like that so if

00:07:41,940 --> 00:07:46,650
you just have these fire containers you

00:07:44,849 --> 00:07:48,389
need to not only have them but start

00:07:46,650 --> 00:07:50,070
them in the right order when you use

00:07:48,389 --> 00:07:52,260
docker you have to tell each container

00:07:50,070 --> 00:07:54,300
what the address of the container is

00:07:52,260 --> 00:07:56,880
depending on is there is an if this is

00:07:54,300 --> 00:07:58,830
ordering in this stuff in particular you

00:07:56,880 --> 00:08:00,930
need to start with the edge node the

00:07:58,830 --> 00:08:03,090
leaf node in a tree system and work your

00:08:00,930 --> 00:08:05,250
way up so we start read us first and we

00:08:03,090 --> 00:08:06,750
start the auditing my sequel and then we

00:08:05,250 --> 00:08:09,120
can feed those addresses into the

00:08:06,750 --> 00:08:10,949
containers above them and this way we

00:08:09,120 --> 00:08:12,960
can start them in order and go one two

00:08:10,949 --> 00:08:14,340
three four five and have our five

00:08:12,960 --> 00:08:16,259
containers started and knowing where

00:08:14,340 --> 00:08:18,180
everybody else is there are some

00:08:16,259 --> 00:08:19,830
problems here for example if I restart

00:08:18,180 --> 00:08:20,970
the Redis container I have to restart

00:08:19,830 --> 00:08:22,800
everything that depends on it cuz it's

00:08:20,970 --> 00:08:24,509
address can change dock containers

00:08:22,800 --> 00:08:27,440
happily change addresses and ports

00:08:24,509 --> 00:08:29,909
whenever you reboot them or restart them

00:08:27,440 --> 00:08:32,250
but there is an optimization here to

00:08:29,909 --> 00:08:34,349
start with because I've done a very

00:08:32,250 --> 00:08:36,750
simple numbering here idle treat is gone

00:08:34,349 --> 00:08:38,640
we're gonna do a tree search from the

00:08:36,750 --> 00:08:40,560
bottom up and do what's called a

00:08:38,640 --> 00:08:42,060
topographical ordering and just order

00:08:40,560 --> 00:08:44,670
them in linear min do one two three four

00:08:42,060 --> 00:08:47,100
five this is in fact how BAE's

00:08:44,670 --> 00:08:49,680
predecessor called Targ used to work as

00:08:47,100 --> 00:08:51,420
a bit of history what happened was we

00:08:49,680 --> 00:08:53,430
started moving to docker in about 2014

00:08:51,420 --> 00:08:54,270
at that time you made a call at all

00:08:53,430 --> 00:08:55,680
called tug which

00:08:54,270 --> 00:08:58,080
a lot of the stuff you see here in babe

00:08:55,680 --> 00:09:01,710
it was a bit worse and a bit sort of

00:08:58,080 --> 00:09:05,280
less developed and last year me and ash

00:09:01,710 --> 00:09:07,920
we nee or gotti rewrote tug into what is

00:09:05,280 --> 00:09:10,550
now bei and formalized all the concepts

00:09:07,920 --> 00:09:12,600
you see here one of the key things is we

00:09:10,550 --> 00:09:15,030
discover that we could change this

00:09:12,600 --> 00:09:17,340
particular inefficiency and do it in

00:09:15,030 --> 00:09:19,680
parallel we can take everything that has

00:09:17,340 --> 00:09:21,810
no dependencies start them all at once

00:09:19,680 --> 00:09:23,670
in parallel then move on to the next

00:09:21,810 --> 00:09:25,260
thing that has satisfied dependencies

00:09:23,670 --> 00:09:27,090
which is payments and start that and

00:09:25,260 --> 00:09:28,560
then move on to the last thing which is

00:09:27,090 --> 00:09:30,710
the Django come on let us start that

00:09:28,560 --> 00:09:33,360
last and so what babe now does

00:09:30,710 --> 00:09:36,120
understand this parallel stuff it can go

00:09:33,360 --> 00:09:38,370
through a tree of dependencies and start

00:09:36,120 --> 00:09:40,440
with him is in parallel at once and save

00:09:38,370 --> 00:09:42,150
you potentially minutes of startup time

00:09:40,440 --> 00:09:45,060
imagine there are 20 or 30 things in

00:09:42,150 --> 00:09:47,250
this tree each container takes 10 or 20

00:09:45,060 --> 00:09:49,110
seconds to boot up and the time you save

00:09:47,250 --> 00:09:51,060
going from this linear thing to the

00:09:49,110 --> 00:09:53,610
parallel thing is quite substantial for

00:09:51,060 --> 00:09:55,740
a developer but let's talk about the

00:09:53,610 --> 00:09:57,690
subsections I said at the beginning you

00:09:55,740 --> 00:10:00,510
can't run the whole thing well let's

00:09:57,690 --> 00:10:02,430
imagine in this case what we do I for

00:10:00,510 --> 00:10:03,990
example don't want to work on the

00:10:02,430 --> 00:10:05,910
payment system I'm just doing like

00:10:03,990 --> 00:10:07,920
front-end on the main site just doing

00:10:05,910 --> 00:10:10,170
some design changes and ICMS stuff maybe

00:10:07,920 --> 00:10:12,090
so I just want to run this sub section

00:10:10,170 --> 00:10:14,970
and what they does is they understands

00:10:12,090 --> 00:10:16,740
that you can say hey I want Django

00:10:14,970 --> 00:10:19,020
without the payments dependency and it

00:10:16,740 --> 00:10:20,880
works out it can remove the payments

00:10:19,020 --> 00:10:23,970
auditing pendency as well as gives you

00:10:20,880 --> 00:10:26,220
this subsection and moreover it lets you

00:10:23,970 --> 00:10:28,410
label these sections with names so we

00:10:26,220 --> 00:10:30,030
call them profiles so different teams

00:10:28,410 --> 00:10:32,190
inside the company you can say oh well

00:10:30,030 --> 00:10:33,750
we have the payment schema we have the

00:10:32,190 --> 00:10:36,510
front end we have the ordering ski

00:10:33,750 --> 00:10:37,830
profile and it defines a sort of subset

00:10:36,510 --> 00:10:40,560
of that true you can run at once

00:10:37,830 --> 00:10:42,750
and what Bay does is they adapt to the

00:10:40,560 --> 00:10:44,250
new tree and changes the ordering to

00:10:42,750 --> 00:10:47,670
make sure things match what you've just

00:10:44,250 --> 00:10:49,200
done now this is all well and good it

00:10:47,670 --> 00:10:51,780
lets you go through some containers and

00:10:49,200 --> 00:10:54,270
put them in order but there's a little

00:10:51,780 --> 00:10:57,000
bit of an issue with docker and the

00:10:54,270 --> 00:10:59,730
issue is how docker boots things now

00:10:57,000 --> 00:11:02,250
without going into a very long detailed

00:10:59,730 --> 00:11:04,080
explanation of how Linux kernel

00:11:02,250 --> 00:11:06,540
containerization namespacing works which

00:11:04,080 --> 00:11:07,889
is a whole other talk the key thing to

00:11:06,540 --> 00:11:09,239
understand is that when you make

00:11:07,889 --> 00:11:12,569
docker container it makes sort of its

00:11:09,239 --> 00:11:15,389
own little OS by itself with own little

00:11:12,569 --> 00:11:17,519
startup process and from the outside all

00:11:15,389 --> 00:11:18,509
you can do is say start and you can try

00:11:17,519 --> 00:11:20,309
and connect to things on it you can't

00:11:18,509 --> 00:11:24,049
really sort of see what it's doing in

00:11:20,309 --> 00:11:27,480
particular and the other problem is that

00:11:24,049 --> 00:11:29,549
well doc containers are meant to only

00:11:27,480 --> 00:11:32,220
run one thing in a docker file you can

00:11:29,549 --> 00:11:33,839
say hey when you boot the container run

00:11:32,220 --> 00:11:36,749
this command and you get a choice to

00:11:33,839 --> 00:11:38,369
supply only one command at a time now I

00:11:36,749 --> 00:11:41,999
subscribed the idea that they should run

00:11:38,369 --> 00:11:44,339
one logical thing that is one overall

00:11:41,999 --> 00:11:46,139
component or service and thus there

00:11:44,339 --> 00:11:47,970
might be three or four processes serving

00:11:46,139 --> 00:11:49,679
that one for example they could be a

00:11:47,970 --> 00:11:51,569
service that's serving web requests and

00:11:49,679 --> 00:11:54,029
a scheduled cron job inside that is

00:11:51,569 --> 00:11:55,169
cleaning up as well and so this means we

00:11:54,029 --> 00:11:57,149
have the problem not only of knowing

00:11:55,169 --> 00:11:59,459
when we finish booting that is when the

00:11:57,149 --> 00:12:02,279
websites ready to go but also we want to

00:11:59,459 --> 00:12:04,489
run more than one thing at once so this

00:12:02,279 --> 00:12:08,279
is where we bring out the big guns and

00:12:04,489 --> 00:12:11,999
me being me I wrote my own init function

00:12:08,279 --> 00:12:14,970
in Python so if you're not familiar in

00:12:11,999 --> 00:12:16,319
it is the process in a Linux machine but

00:12:14,970 --> 00:12:18,899
it's the first thing to run it boots

00:12:16,319 --> 00:12:20,730
everything else it cleans up child pids

00:12:18,899 --> 00:12:23,429
and zombies and other things in POSIX

00:12:20,730 --> 00:12:25,499
you never want to know about because I

00:12:23,429 --> 00:12:27,629
am lazy I wrote it in Python rather than

00:12:25,499 --> 00:12:29,129
in C or rust or something but the key

00:12:27,629 --> 00:12:31,049
thing is what this does is it gives us a

00:12:29,129 --> 00:12:32,819
few extra features it gives us things

00:12:31,049 --> 00:12:35,549
like knowing when the boots finished

00:12:32,819 --> 00:12:38,009
because what this can do is because it's

00:12:35,549 --> 00:12:39,600
running the programs it can run the

00:12:38,009 --> 00:12:41,879
startup scripts then run the programs

00:12:39,600 --> 00:12:43,290
when the programs are finished it writes

00:12:41,879 --> 00:12:45,329
to a file on the file system in the

00:12:43,290 --> 00:12:47,040
container and then what they can do is

00:12:45,329 --> 00:12:48,480
they can look at the file system and we

00:12:47,040 --> 00:12:51,179
can peek at what's happening work out

00:12:48,480 --> 00:12:53,639
what's the statuses the other thing it

00:12:51,179 --> 00:12:55,049
does is parallel startup it takes the

00:12:53,639 --> 00:12:58,259
command line you pass it actually runs

00:12:55,049 --> 00:13:00,179
them in parallel and in particular what

00:12:58,259 --> 00:13:01,769
it does is it does a daughter thing

00:13:00,179 --> 00:13:04,529
where if any of the things you're

00:13:01,769 --> 00:13:05,819
running die the whole container dies if

00:13:04,529 --> 00:13:07,739
you've seen somewhere other talks I'm a

00:13:05,819 --> 00:13:09,749
big believer in explicit failure this is

00:13:07,739 --> 00:13:11,249
one of those things we don't want to

00:13:09,749 --> 00:13:13,049
have a container keep running if some

00:13:11,249 --> 00:13:15,119
part of it dies it's a whole single

00:13:13,049 --> 00:13:17,339
thing as an atomic unit so anything that

00:13:15,119 --> 00:13:18,779
dies whole dependent goes away and this

00:13:17,339 --> 00:13:19,920
isn't really provided by Dockers init

00:13:18,779 --> 00:13:20,910
script

00:13:19,920 --> 00:13:23,100
there's a couple of other things like

00:13:20,910 --> 00:13:25,920
the killing of zombies when I wrote this

00:13:23,100 --> 00:13:28,559
in 2014 this wasn't present in docker

00:13:25,920 --> 00:13:31,019
docker half since I think just this year

00:13:28,559 --> 00:13:32,759
I did the fact that they're in it script

00:13:31,019 --> 00:13:34,290
does the more the clean up stuff so it

00:13:32,759 --> 00:13:36,929
hasn't improved a bit but there's still

00:13:34,290 --> 00:13:38,910
a bit of a need for this but there are

00:13:36,929 --> 00:13:40,169
more things than this and some of some

00:13:38,910 --> 00:13:42,359
of our containers don't have a custom

00:13:40,169 --> 00:13:43,679
init script which is you know why would

00:13:42,359 --> 00:13:45,569
you want to not have a custom init

00:13:43,679 --> 00:13:47,249
script that sounds lovely and so we need

00:13:45,569 --> 00:13:49,259
other ways of working out what's going

00:13:47,249 --> 00:13:50,999
on like how are these things working

00:13:49,259 --> 00:13:53,129
what are they doing and if there's more

00:13:50,999 --> 00:13:56,100
things called weights and what weights

00:13:53,129 --> 00:13:57,929
are is there a way of saying these are

00:13:56,100 --> 00:13:59,549
the conditions by which the container is

00:13:57,929 --> 00:14:01,470
running like when you see these

00:13:59,549 --> 00:14:03,720
reactions we know it's good there's sort

00:14:01,470 --> 00:14:05,489
of health checks in a way and so things

00:14:03,720 --> 00:14:08,489
like TCP weights so for Redis for

00:14:05,489 --> 00:14:11,119
example we say okay when you can open a

00:14:08,489 --> 00:14:13,529
TCP connection to the Redis port 6 3 7 9

00:14:11,119 --> 00:14:14,910
then it's finished booting then you can

00:14:13,529 --> 00:14:17,850
find the next thing in the chain and

00:14:14,910 --> 00:14:19,889
start doing it things like HTTP like our

00:14:17,850 --> 00:14:22,230
whiskey server can be a bit more clever

00:14:19,889 --> 00:14:24,899
you can say well when you get a valid

00:14:22,230 --> 00:14:27,209
HTTP response 200 then you can keep

00:14:24,899 --> 00:14:29,459
going and it's important because in our

00:14:27,209 --> 00:14:31,559
case the socket will open and then it'll

00:14:29,459 --> 00:14:34,169
spend over a minute bootstrapping itself

00:14:31,559 --> 00:14:37,049
with 300 dependencies and all the

00:14:34,169 --> 00:14:39,449
libraries and around 400 megabytes of

00:14:37,049 --> 00:14:41,249
RAM of just Python code before we can

00:14:39,449 --> 00:14:43,739
actually serve you a request we have a

00:14:41,249 --> 00:14:45,179
monolith around that's huge and so you

00:14:43,739 --> 00:14:46,739
have to not only open the socket but get

00:14:45,179 --> 00:14:48,629
a response back I'm gonna go aha now

00:14:46,739 --> 00:14:50,970
it's ready to start giving you requests

00:14:48,629 --> 00:14:54,329
and finally for our services our

00:14:50,970 --> 00:14:55,980
services are some of them at HTTP HTTP

00:14:54,329 --> 00:14:57,779
based some of them are based on freitas

00:14:55,980 --> 00:14:59,399
there's some some more custom checked

00:14:57,779 --> 00:15:01,589
around that stuff but all these are like

00:14:59,399 --> 00:15:03,329
how do I know this is finished booting

00:15:01,589 --> 00:15:05,759
and these feed into that startup process

00:15:03,329 --> 00:15:07,139
and let you know ok this is how I'm

00:15:05,759 --> 00:15:09,989
going to understand what's going and

00:15:07,139 --> 00:15:11,639
what's gonna keep happening but that's

00:15:09,989 --> 00:15:13,379
just running containers and running them

00:15:11,639 --> 00:15:15,029
is half the problem the other half of

00:15:13,379 --> 00:15:16,139
them is rebuilding the containers and

00:15:15,029 --> 00:15:18,239
this is kind of the more difficult

00:15:16,139 --> 00:15:20,069
problem in a way we can run containers

00:15:18,239 --> 00:15:21,869
reasonably easily and restart them and

00:15:20,069 --> 00:15:25,019
it's all fire and they they start pretty

00:15:21,869 --> 00:15:26,749
quickly but rebuilding is slow we have

00:15:25,019 --> 00:15:29,819
so much code and so many dependencies

00:15:26,749 --> 00:15:32,759
not just Python dependencies but Debian

00:15:29,819 --> 00:15:33,750
packages and custom unzips and at one

00:15:32,759 --> 00:15:36,390
point a Java 8

00:15:33,750 --> 00:15:37,770
tarballs downloaded and in Argentina

00:15:36,390 --> 00:15:40,980
that takes about an hour to download

00:15:37,770 --> 00:15:42,780
sometimes it gets really slow and so it

00:15:40,980 --> 00:15:45,900
takes a long long time to do this stuff

00:15:42,780 --> 00:15:47,610
and we've got it down that big monolith

00:15:45,900 --> 00:15:50,100
rebuilds is only 10 minutes in the best

00:15:47,610 --> 00:15:53,490
case and it's kind of a lie we'll come

00:15:50,100 --> 00:15:55,320
to the lie in a second but as I said the

00:15:53,490 --> 00:15:56,850
beginning like the full rebuild of all

00:15:55,320 --> 00:16:00,660
the different components is about hour

00:15:56,850 --> 00:16:02,760
or two in san francisco in argentina in

00:16:00,660 --> 00:16:05,610
mendoza it's around 8 or 9 hours in the

00:16:02,760 --> 00:16:07,410
worst case which you can see if you come

00:16:05,610 --> 00:16:08,790
in for the morning as a developer and

00:16:07,410 --> 00:16:12,450
you're trying to work on some software

00:16:08,790 --> 00:16:14,010
and you need to rebuild that's your

00:16:12,450 --> 00:16:15,240
whole day gone you can't do anything and

00:16:14,010 --> 00:16:17,640
so we're trying to solve some of these

00:16:15,240 --> 00:16:19,140
problems but the first problem here is

00:16:17,640 --> 00:16:20,610
the actual rebuilding itself and it's

00:16:19,140 --> 00:16:23,220
one of the key things we solved in the

00:16:20,610 --> 00:16:25,710
beginning of bay so the way darker works

00:16:23,220 --> 00:16:28,740
usually is you make a docket image and

00:16:25,710 --> 00:16:30,630
the image is static so when you build it

00:16:28,740 --> 00:16:32,130
it makes you a file system you take a

00:16:30,630 --> 00:16:34,320
big image of that and plunk it down

00:16:32,130 --> 00:16:36,090
whenever you run a container you take

00:16:34,320 --> 00:16:38,130
the static file system and you just use

00:16:36,090 --> 00:16:40,290
that you can't modify or persist changes

00:16:38,130 --> 00:16:41,940
well this means normally is when you're

00:16:40,290 --> 00:16:43,950
changing the code so you edited a

00:16:41,940 --> 00:16:46,470
template or a Python file or view in

00:16:43,950 --> 00:16:48,390
Django and you want to have that change

00:16:46,470 --> 00:16:50,010
take effect you would have to rebuild

00:16:48,390 --> 00:16:51,750
the docker image and include the new

00:16:50,010 --> 00:16:53,520
file in the file system and then restart

00:16:51,750 --> 00:16:55,260
the image to make it have effect now

00:16:53,520 --> 00:16:57,750
this is fine if you're a small site it's

00:16:55,260 --> 00:17:00,140
like a two-second rebuild we have 10

00:16:57,750 --> 00:17:03,089
minutes which is still quite fast in the

00:17:00,140 --> 00:17:05,459
relative scale but if you're having to

00:17:03,089 --> 00:17:07,530
refresh test template changes this is

00:17:05,459 --> 00:17:09,990
painful it's basically impossible to

00:17:07,530 --> 00:17:11,880
test stuff and so we have called dev

00:17:09,990 --> 00:17:14,520
modes this is where you can take

00:17:11,880 --> 00:17:16,380
different parts of the site and live

00:17:14,520 --> 00:17:18,420
mount them from your Mac or your Linux

00:17:16,380 --> 00:17:21,089
machine through into the docker

00:17:18,420 --> 00:17:23,069
containers and the idea is that they

00:17:21,089 --> 00:17:24,959
understand the layout of your site it

00:17:23,069 --> 00:17:27,300
knows that when you want to mount the

00:17:24,959 --> 00:17:29,520
monolith where it comes from in your

00:17:27,300 --> 00:17:31,800
working directory and where it goes to

00:17:29,520 --> 00:17:33,420
in the container one of the examples

00:17:31,800 --> 00:17:35,340
here is it knows about Python packages

00:17:33,420 --> 00:17:37,110
so it says when we want to mount our

00:17:35,340 --> 00:17:39,510
current library which is our internal

00:17:37,110 --> 00:17:41,580
library for safe currency handling it

00:17:39,510 --> 00:17:44,940
knows that it has to go from my home

00:17:41,580 --> 00:17:46,830
directory into the Python 2.7 site

00:17:44,940 --> 00:17:47,220
packages place and all you do as a user

00:17:46,830 --> 00:17:49,350
is

00:17:47,220 --> 00:17:51,059
they mount current you have to know

00:17:49,350 --> 00:17:53,070
about that internals of Python the

00:17:51,059 --> 00:17:54,539
library paths but it manages this stuff

00:17:53,070 --> 00:17:57,330
for you and this means our developers

00:17:54,539 --> 00:17:58,980
can say oh I'm working on the current

00:17:57,330 --> 00:18:00,960
library so I'm going to mount that I'm

00:17:58,980 --> 00:18:02,610
not gonna just write stuff and it'll

00:18:00,960 --> 00:18:05,070
just load and refresh in the browser for

00:18:02,610 --> 00:18:08,039
me and this come of ends up with this

00:18:05,070 --> 00:18:09,960
situation where we have sort of a dual

00:18:08,039 --> 00:18:12,330
situation the things we can dare mount

00:18:09,960 --> 00:18:14,429
the code and templates we don't have to

00:18:12,330 --> 00:18:16,409
rebuild for those because they are live

00:18:14,429 --> 00:18:18,150
mounted through into our images they

00:18:16,409 --> 00:18:19,890
just take effect you can edit templates

00:18:18,150 --> 00:18:21,780
hit refresh in the browser and see the

00:18:19,890 --> 00:18:24,480
changes but there's other stuff that

00:18:21,780 --> 00:18:25,770
doesn't even if different stuff our OS

00:18:24,480 --> 00:18:28,530
packages and our dependencies for

00:18:25,770 --> 00:18:29,789
example those have issues because those

00:18:28,530 --> 00:18:32,789
are part of the docker build process

00:18:29,789 --> 00:18:36,120
like we have apt-get install pipes he

00:18:32,789 --> 00:18:38,100
said in there for example and those you

00:18:36,120 --> 00:18:39,840
can't really low life Mountain Lee as

00:18:38,100 --> 00:18:42,330
well like you want Dockers ability to

00:18:39,840 --> 00:18:43,950
manage packages and do that stuff and so

00:18:42,330 --> 00:18:45,870
we have this split where anything above

00:18:43,950 --> 00:18:48,510
the line if it changes you have to

00:18:45,870 --> 00:18:49,950
rebuild it and you might think well you

00:18:48,510 --> 00:18:53,520
know how bad can that be

00:18:49,950 --> 00:18:54,690
you know like Shirley Shirley Andrew you

00:18:53,520 --> 00:18:59,580
only give a changing the code and the

00:18:54,690 --> 00:19:03,630
templates very often mmm so because we

00:18:59,580 --> 00:19:05,760
have a lot of services and many of those

00:19:03,630 --> 00:19:07,710
services run as libraries against the

00:19:05,760 --> 00:19:10,140
main core they are themselves

00:19:07,710 --> 00:19:13,020
dependencies and so every small change

00:19:10,140 --> 00:19:17,419
to a service and Eventbrite generally

00:19:13,020 --> 00:19:20,789
results in a dependency change to core

00:19:17,419 --> 00:19:23,640
what this means is that repository

00:19:20,789 --> 00:19:26,400
changes dependencies every hour or two

00:19:23,640 --> 00:19:30,270
on average which means that the build

00:19:26,400 --> 00:19:31,770
caching that works are great you had to

00:19:30,270 --> 00:19:34,110
rebuild a pretty much every time you

00:19:31,770 --> 00:19:37,620
pull from that git repo which is not

00:19:34,110 --> 00:19:38,970
great and so we sat down like well how

00:19:37,620 --> 00:19:40,980
can we solve this we need to fix this

00:19:38,970 --> 00:19:42,900
problem and you know bear in mind that

00:19:40,980 --> 00:19:44,250
if we had a vagrant or similar this was

00:19:42,900 --> 00:19:46,919
still be initially the vagrant in

00:19:44,250 --> 00:19:49,500
particular if we think back to the

00:19:46,919 --> 00:19:50,760
alternate history where we had oh we

00:19:49,500 --> 00:19:52,350
still have the big vagrant virtual

00:19:50,760 --> 00:19:54,240
machine with all the code in it well

00:19:52,350 --> 00:19:57,510
first of all would fit in Ram but we'll

00:19:54,240 --> 00:19:58,740
ignore that lots of swap maybe but the

00:19:57,510 --> 00:20:00,419
second thing is you have to rebuild it

00:19:58,740 --> 00:20:00,960
all at once you can't rebuild a portion

00:20:00,419 --> 00:20:02,370
with

00:20:00,960 --> 00:20:04,440
Dokka we can say I just want to rebuild

00:20:02,370 --> 00:20:05,940
the payment system you can't say in

00:20:04,440 --> 00:20:08,070
vagrant on tour just rebuild this

00:20:05,940 --> 00:20:09,679
section has to go through and do the new

00:20:08,070 --> 00:20:12,299
packages and do that stuff for you

00:20:09,679 --> 00:20:14,070
and so with docker we have a little bit

00:20:12,299 --> 00:20:16,590
of amount which is that docker images

00:20:14,070 --> 00:20:18,480
are portable once you've built them you

00:20:16,590 --> 00:20:19,860
get sort of this big blob of file system

00:20:18,480 --> 00:20:21,690
and you can move it around you can ship

00:20:19,860 --> 00:20:24,480
it to other servers you can deploy it in

00:20:21,690 --> 00:20:25,559
production in the typical case we didn't

00:20:24,480 --> 00:20:27,990
run docker in production just in

00:20:25,559 --> 00:20:29,309
development for reference but what we

00:20:27,990 --> 00:20:33,000
can do is we can shoot them around and

00:20:29,309 --> 00:20:35,970
so what we try to aim at was well what

00:20:33,000 --> 00:20:39,270
if you just build these images once in

00:20:35,970 --> 00:20:42,600
one place and then pull them down sort

00:20:39,270 --> 00:20:44,909
of you know we have here a machine just

00:20:42,600 --> 00:20:46,230
builds the payment systems and Redis

00:20:44,909 --> 00:20:49,169
stuff and all the different stuff and

00:20:46,230 --> 00:20:52,020
then developers in Argentina in

00:20:49,169 --> 00:20:53,549
Nashville in San Francisco in Seattle we

00:20:52,020 --> 00:20:55,980
have many different people around the

00:20:53,549 --> 00:20:58,380
world can all just pull down those

00:20:55,980 --> 00:21:00,510
images and save all the time of not only

00:20:58,380 --> 00:21:02,429
the bandwidth but it's very chatty if

00:21:00,510 --> 00:21:04,260
you're building a say a Python package

00:21:02,429 --> 00:21:05,610
or an actor package you have lots of

00:21:04,260 --> 00:21:08,279
bounces to and from a server

00:21:05,610 --> 00:21:09,750
it's very latency intensive and the

00:21:08,279 --> 00:21:11,399
problem with Argentina is that their

00:21:09,750 --> 00:21:13,620
latency is very high but their

00:21:11,399 --> 00:21:15,630
throughputs reasonably okay and so we

00:21:13,620 --> 00:21:17,549
give them one big file download that's

00:21:15,630 --> 00:21:19,070
much better than having lots of tiny

00:21:17,549 --> 00:21:21,539
requests going backwards and forwards

00:21:19,070 --> 00:21:23,669
and this is where we sort of where we

00:21:21,539 --> 00:21:27,149
are now it's a little bit of a difficult

00:21:23,669 --> 00:21:29,940
area we are still trying to work out all

00:21:27,149 --> 00:21:31,679
the difficulties because it turns out

00:21:29,940 --> 00:21:33,960
when you start working on a system to

00:21:31,679 --> 00:21:36,179
build dependencies you end up plunging

00:21:33,960 --> 00:21:39,720
yourself into we need to have a release

00:21:36,179 --> 00:21:41,850
management system it's sort of the awful

00:21:39,720 --> 00:21:43,289
side effect of like oh you've just gone

00:21:41,850 --> 00:21:44,700
down the rabbit hole that leads to we

00:21:43,289 --> 00:21:47,399
have to fix the entire data model of the

00:21:44,700 --> 00:21:49,260
site but we are getting there and so I

00:21:47,399 --> 00:21:51,179
want to talk at the end here for the

00:21:49,260 --> 00:21:53,820
last seven minutes or so about what's

00:21:51,179 --> 00:21:55,490
next well side changes are forebay now

00:21:53,820 --> 00:21:57,600
giving you a brief idea of how it works

00:21:55,490 --> 00:22:00,149
again it's hard to describe all of it

00:21:57,600 --> 00:22:01,470
but here are some had some more

00:22:00,149 --> 00:22:03,630
interesting ideas of what the future

00:22:01,470 --> 00:22:05,100
holds for it and other things we can't

00:22:03,630 --> 00:22:09,090
do with docker compose and other dollar

00:22:05,100 --> 00:22:11,760
tools the first one is that automated

00:22:09,090 --> 00:22:13,110
image building so this is not just

00:22:11,760 --> 00:22:14,559
having a server that builds the images

00:22:13,110 --> 00:22:17,919
we have the problem

00:22:14,559 --> 00:22:19,749
of our sort of master branches on git

00:22:17,919 --> 00:22:21,399
aren't necessarily always stable you

00:22:19,749 --> 00:22:24,100
can't rely on the latest checkout always

00:22:21,399 --> 00:22:26,649
work and not only that we have you know

00:22:24,100 --> 00:22:28,299
150 engineers you can't synchronize

00:22:26,649 --> 00:22:30,549
across who's working on what and like

00:22:28,299 --> 00:22:34,419
well we want the stable version of this

00:22:30,549 --> 00:22:37,120
code all its commit a three c4f and that

00:22:34,419 --> 00:22:39,399
doesn't work and so our quest is have a

00:22:37,120 --> 00:22:41,980
system that has not only automatic

00:22:39,399 --> 00:22:44,049
building but tagging of stable versions

00:22:41,980 --> 00:22:45,970
so if you're just working on say one

00:22:44,049 --> 00:22:46,210
system at the order flow you can just

00:22:45,970 --> 00:22:47,649
ask

00:22:46,210 --> 00:22:49,210
I want the stable versions of payments

00:22:47,649 --> 00:22:51,580
the stable versions of front-end

00:22:49,210 --> 00:22:53,679
I don't Malaysia's dev copies I don't

00:22:51,580 --> 00:22:55,450
care at the latest and greatest stuff I

00:22:53,679 --> 00:22:57,610
just want this stable stable versions

00:22:55,450 --> 00:22:59,590
right now you can't get that right now

00:22:57,610 --> 00:23:01,809
at Eventbrite you always have basically

00:22:59,590 --> 00:23:04,269
the latest master release of everything

00:23:01,809 --> 00:23:05,769
which occasionally means developers sort

00:23:04,269 --> 00:23:07,360
of pull from the repos until it all

00:23:05,769 --> 00:23:09,009
works and just don't pull for three days

00:23:07,360 --> 00:23:10,749
because they've got to the right place

00:23:09,009 --> 00:23:13,330
and it's stable it's a stable

00:23:10,749 --> 00:23:15,610
configuration and then when they finish

00:23:13,330 --> 00:23:17,019
the port they all know I need to pull

00:23:15,610 --> 00:23:18,490
the repository and so they have like an

00:23:17,019 --> 00:23:20,169
hour like pulling things and try to make

00:23:18,490 --> 00:23:22,869
it all work again so we try and get

00:23:20,169 --> 00:23:25,090
around that problem the next big thing

00:23:22,869 --> 00:23:27,549
and this is really a big thing is trying

00:23:25,090 --> 00:23:29,350
to run some of that stuff remotely now I

00:23:27,549 --> 00:23:31,269
said at the top that we run everything

00:23:29,350 --> 00:23:34,570
on one machine this is mostly historical

00:23:31,269 --> 00:23:36,399
and I would love to give our developers

00:23:34,570 --> 00:23:38,769
the opportunity to run things on other

00:23:36,399 --> 00:23:39,999
machines than their laptop this is a

00:23:38,769 --> 00:23:43,210
particular problem for our native

00:23:39,999 --> 00:23:45,070
engineers for mobile because if you

00:23:43,210 --> 00:23:46,840
develop Android you'll be familiar with

00:23:45,070 --> 00:23:49,990
the idea that RAM is a precious resource

00:23:46,840 --> 00:23:52,179
with the android studio ide and having

00:23:49,990 --> 00:23:53,590
an emulator and Android studio running

00:23:52,179 --> 00:23:55,210
is already like half of your RAM gone

00:23:53,590 --> 00:23:58,119
and then slacks another quarter of your

00:23:55,210 --> 00:23:59,919
RAM gone and then you're left with about

00:23:58,119 --> 00:24:01,720
six gigabytes if you're lucky to run

00:23:59,919 --> 00:24:03,070
everything else in and so there are

00:24:01,720 --> 00:24:05,259
certain teams in the company become like

00:24:03,070 --> 00:24:07,419
a hardware like RFID scanners or mobile

00:24:05,259 --> 00:24:08,590
who don't need most the site on their

00:24:07,419 --> 00:24:11,230
machine there's like one or two things

00:24:08,590 --> 00:24:14,259
they're playing around with so we want

00:24:11,230 --> 00:24:15,759
to run different subsets remotely and we

00:24:14,259 --> 00:24:17,919
can build what we have before like Bay

00:24:15,759 --> 00:24:19,960
understands those dependencies between

00:24:17,919 --> 00:24:22,750
systems it knows that if you have a

00:24:19,960 --> 00:24:24,850
payments container that needs to talk to

00:24:22,750 --> 00:24:27,789
the my sequel the payments and so we can

00:24:24,850 --> 00:24:28,090
teach Bay hey this payments Henry's

00:24:27,789 --> 00:24:29,679
remote

00:24:28,090 --> 00:24:32,440
which means everything it depends on is

00:24:29,679 --> 00:24:34,450
also remote and building on this try and

00:24:32,440 --> 00:24:36,940
have the idea of running whole stack to

00:24:34,450 --> 00:24:39,100
this stuff remotely like taking all of

00:24:36,940 --> 00:24:40,929
the different containers and saying I

00:24:39,100 --> 00:24:43,720
want to run a whole copy of development

00:24:40,929 --> 00:24:45,159
of em right on summer route system and

00:24:43,720 --> 00:24:47,620
this is a thing we haven't only where

00:24:45,159 --> 00:24:50,110
say I'm making a you know a whole new

00:24:47,620 --> 00:24:52,659
hack day prototype of like I've changed

00:24:50,110 --> 00:24:53,740
the order flow to have funny balloons on

00:24:52,659 --> 00:24:55,539
it I don't know what something crazy

00:24:53,740 --> 00:24:57,190
like that but I want to show it to my

00:24:55,539 --> 00:24:59,440
colleagues I want to put it up somewhere

00:24:57,190 --> 00:25:01,870
and show them right now we have a static

00:24:59,440 --> 00:25:04,120
set of QA servers numbered 1 through 5

00:25:01,870 --> 00:25:06,100
imagine it to be and you can reserve

00:25:04,120 --> 00:25:07,659
them on a wiki and you can reserve one

00:25:06,100 --> 00:25:10,240
and then you go to the server and you

00:25:07,659 --> 00:25:12,279
can upload stuff to it and use it but on

00:25:10,240 --> 00:25:14,860
things like hack days this five is not

00:25:12,279 --> 00:25:17,529
enough for 150 people and so finding a

00:25:14,860 --> 00:25:20,649
system where we can use our dev tools as

00:25:17,529 --> 00:25:22,600
also a sort of pre staging like QA and

00:25:20,649 --> 00:25:24,909
demo area will be really useful as well

00:25:22,600 --> 00:25:27,070
we want to share that work and not have

00:25:24,909 --> 00:25:29,200
to have our operations team who run

00:25:27,070 --> 00:25:31,929
production also have to run all of our

00:25:29,200 --> 00:25:33,340
city developer QA stuff as well and the

00:25:31,929 --> 00:25:35,380
big part of this is try not to reinvent

00:25:33,340 --> 00:25:37,419
the wheel if you are familiar with I've

00:25:35,380 --> 00:25:40,000
been saying I've been describing

00:25:37,419 --> 00:25:43,630
kubernetes at some point or docker swarm

00:25:40,000 --> 00:25:45,940
or Nomad and all of these tools have

00:25:43,630 --> 00:25:48,309
those slight problems that they don't

00:25:45,940 --> 00:25:49,899
quite match what we need like I said I

00:25:48,309 --> 00:25:51,279
said earlier like oh that's the things

00:25:49,899 --> 00:25:52,450
about mounting and the penalty

00:25:51,279 --> 00:25:54,399
management and this is still true of

00:25:52,450 --> 00:25:56,710
these other tools like kubernetes is

00:25:54,399 --> 00:25:58,149
very capable but it takes like a team of

00:25:56,710 --> 00:26:00,039
five people to configure at each time

00:25:58,149 --> 00:26:02,590
and it's not going to be happy with you

00:26:00,039 --> 00:26:04,659
just carving sections off and changing

00:26:02,590 --> 00:26:06,820
the cold think config without a whole

00:26:04,659 --> 00:26:08,350
nother lay on top of kubernetes and so

00:26:06,820 --> 00:26:10,779
what we try and do is look into how we

00:26:08,350 --> 00:26:12,640
can wrap Bey around not only docker but

00:26:10,779 --> 00:26:14,860
around things like nomad as well and

00:26:12,640 --> 00:26:16,390
like try and keep the abstraction there

00:26:14,860 --> 00:26:17,770
and the understanding of this sort of

00:26:16,390 --> 00:26:21,610
higher-level idea of how things interact

00:26:17,770 --> 00:26:23,500
but also try and use some of that

00:26:21,610 --> 00:26:24,880
existing technology and as I said

00:26:23,500 --> 00:26:26,710
yesterday and today

00:26:24,880 --> 00:26:28,179
try not to remit sometimes it's

00:26:26,710 --> 00:26:31,570
necessary but try not to reinvent the

00:26:28,179 --> 00:26:33,340
wheel if you are curious about Bay it is

00:26:31,570 --> 00:26:36,610
up in a repository on github that is

00:26:33,340 --> 00:26:38,980
open source it is very poorly documented

00:26:36,610 --> 00:26:40,790
I warn you now but the code is quite

00:26:38,980 --> 00:26:42,169
nice I think

00:26:40,790 --> 00:26:44,030
thank thank me and mostly actually knee

00:26:42,169 --> 00:26:46,309
for that so you can go there and see it

00:26:44,030 --> 00:26:49,309
there's a small readme my intention is

00:26:46,309 --> 00:26:50,809
to get some proper model and process

00:26:49,309 --> 00:26:52,580
Doc's in there there's some start of

00:26:50,809 --> 00:26:54,830
some Doc's but it's not very good but if

00:26:52,580 --> 00:26:56,450
you're curious at all don't have a read

00:26:54,830 --> 00:26:58,640
it has some interesting ideas about how

00:26:56,450 --> 00:27:00,530
to do CLI library stuff and there's a

00:26:58,640 --> 00:27:02,660
plugin system that's sort of Jango

00:27:00,530 --> 00:27:03,830
signals equivalents in there so there's

00:27:02,660 --> 00:27:16,340
a lot of code to read if you're curious

00:27:03,830 --> 00:27:18,530
and thank you very much thanks Andrew as

00:27:16,340 --> 00:27:21,230
a token of our appreciation coffee mug

00:27:18,530 --> 00:27:26,809
thank you very much we are pretty much

00:27:21,230 --> 00:27:31,940
out of time there's a next the next

00:27:26,809 --> 00:27:34,280
session up here is going to be rough

00:27:31,940 --> 00:27:36,679
iron works on mocking virtual reality

00:27:34,280 --> 00:27:39,070
for patent tests there's a ten-minute

00:27:36,679 --> 00:27:39,070

YouTube URL: https://www.youtube.com/watch?v=3bnBY23TsIw


