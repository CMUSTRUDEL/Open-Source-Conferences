Title: Syntax Hijacking: Genius or Evil?
Publication date: 2017-08-05
Playlist: Pycon Australia 2017
Description: 
	Tennessee Leeuwenburg

http://2017.pycon-au.org/schedule/presentation/2/

#pyconau

This talk was given at PyCon Australia 2017 which was held from 3-8 August, 2017 in Melbourne, Victoria.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2017, we're returning to Melbourne, bringing together students, enthusiasts, and professionals with a love of Python from around Australia, and from all over the World. 

August 3-8 2017, Melbourne, Victoria

Python, PyCon, PyConAU
Captions: 
	00:00:00,000 --> 00:00:05,549
let's get this started and next up we

00:00:03,300 --> 00:00:09,240
have Tennessee Logan Rock

00:00:05,549 --> 00:00:10,230
he started coding like probably before I

00:00:09,240 --> 00:00:15,210
was born

00:00:10,230 --> 00:00:20,730
like before the internet exists now okay

00:00:15,210 --> 00:00:22,130
well anyway and he does enjoyed having

00:00:20,730 --> 00:00:27,570
the internet around these days though

00:00:22,130 --> 00:00:29,429
and yeah he went from being a operator

00:00:27,570 --> 00:00:31,830
over all through all the different

00:00:29,429 --> 00:00:34,290
stages of development and so engineer

00:00:31,830 --> 00:00:36,870
over to having his own team he's

00:00:34,290 --> 00:00:39,960
managing these days he's going to talk

00:00:36,870 --> 00:00:42,180
to us about syntax hijacking and if this

00:00:39,960 --> 00:00:45,300
is genius or evil and leave the decision

00:00:42,180 --> 00:00:48,350
up to you after the talk but give him a

00:00:45,300 --> 00:00:48,350
warm welcome

00:00:51,440 --> 00:00:55,350
all right thank you everyone

00:00:53,640 --> 00:00:57,510
due to the fact I was still hacking on

00:00:55,350 --> 00:00:59,699
code for this last night I've given it

00:00:57,510 --> 00:01:01,800
absolutely no run through preparation at

00:00:59,699 --> 00:01:03,629
all so generally expect this to be a

00:01:01,800 --> 00:01:06,840
chaotic roller coaster ride of

00:01:03,629 --> 00:01:08,850
demonstrations and fun so I'm going to

00:01:06,840 --> 00:01:10,530
get into get into my introductions I've

00:01:08,850 --> 00:01:12,720
also for the first time not had any

00:01:10,530 --> 00:01:14,729
slides I've just got Python notebooks

00:01:12,720 --> 00:01:15,810
which means that the entire codes on

00:01:14,729 --> 00:01:18,350
everything is on github

00:01:15,810 --> 00:01:21,420
everything executes everything works

00:01:18,350 --> 00:01:23,009
nothing is sensible so you can go

00:01:21,420 --> 00:01:25,170
through there so here are my rules so

00:01:23,009 --> 00:01:28,049
well-intentioned heckling questions and

00:01:25,170 --> 00:01:29,549
comments go for your life questions that

00:01:28,049 --> 00:01:31,110
are not questions I am fine with

00:01:29,549 --> 00:01:32,430
questions that are not questions I don't

00:01:31,110 --> 00:01:34,290
understand why people don't like

00:01:32,430 --> 00:01:35,520
questions that are not questions feel

00:01:34,290 --> 00:01:38,430
free to ask questions that are not

00:01:35,520 --> 00:01:41,100
questions tweet-tweet

00:01:38,430 --> 00:01:42,780
go nuts the only noes are getting

00:01:41,100 --> 00:01:46,770
genuinely angry with me or with other

00:01:42,780 --> 00:01:48,689
people so you know keep it classy so I

00:01:46,770 --> 00:01:50,759
so some people like the whole crowd

00:01:48,689 --> 00:01:53,310
participation thing I'm fine with it I'm

00:01:50,759 --> 00:01:54,869
not monitoring Twitter but what we're

00:01:53,310 --> 00:01:56,579
going to do is if I demonstrate

00:01:54,869 --> 00:01:59,250
something that you think the rest of the

00:01:56,579 --> 00:02:01,530
world should definitely not do give it a

00:01:59,250 --> 00:02:03,210
- - if you think that the rest of the

00:02:01,530 --> 00:02:06,240
world should actually do it give it a

00:02:03,210 --> 00:02:08,099
plus - and if you're just kind of like

00:02:06,240 --> 00:02:09,869
hey that was fun or I'm not so sure

00:02:08,099 --> 00:02:12,330
about it give it a plus a plus 1 or a

00:02:09,869 --> 00:02:13,770
minus 1 and you know we won't do

00:02:12,330 --> 00:02:16,770
anything with the data at all

00:02:13,770 --> 00:02:18,900
I don't have time but there it is so so

00:02:16,770 --> 00:02:20,790
there's so what is cindex hijacking so

00:02:18,900 --> 00:02:22,380
Python lets you change a lot of its

00:02:20,790 --> 00:02:23,850
default behavior okay and the Zen of

00:02:22,380 --> 00:02:26,280
Python tells us there should be one and

00:02:23,850 --> 00:02:27,960
only one way to do it and and that's not

00:02:26,280 --> 00:02:30,480
obvious unless you're Dutch now I am

00:02:27,960 --> 00:02:33,660
half Dutch so what I'm going for is

00:02:30,480 --> 00:02:35,640
being half way dangerous that's so so

00:02:33,660 --> 00:02:37,920
there's bits of Python that you own okay

00:02:35,640 --> 00:02:39,810
we should all know that we own what goes

00:02:37,920 --> 00:02:42,360
in methods that's what most people do

00:02:39,810 --> 00:02:45,510
most of the time you also own what

00:02:42,360 --> 00:02:48,060
happens when you use the square brackets

00:02:45,510 --> 00:02:50,130
and that people do that much less but

00:02:48,060 --> 00:02:51,630
like most people are vaguely aware they

00:02:50,130 --> 00:02:54,090
can control what happens when you use

00:02:51,630 --> 00:02:59,670
the square brackets and then there's the

00:02:54,090 --> 00:03:01,950
bits of Python you can steal so a little

00:02:59,670 --> 00:03:04,860
bit of basic wizardry at first okay so

00:03:01,950 --> 00:03:10,670
I'm going to import some spells so what

00:03:04,860 --> 00:03:17,100
do you think this statement will do okay

00:03:10,670 --> 00:03:19,500
no no we're starting easy yep okay now

00:03:17,100 --> 00:03:21,270
so so just as to help the audience along

00:03:19,500 --> 00:03:22,380
all of the wizardry is contained in the

00:03:21,270 --> 00:03:26,910
spells what do you think this one's

00:03:22,380 --> 00:03:29,010
going to do would print seven your close

00:03:26,910 --> 00:03:30,510
close if your round up Peter Peter

00:03:29,010 --> 00:03:31,260
butter all right so hang on let's just

00:03:30,510 --> 00:03:35,580
try that again

00:03:31,260 --> 00:03:38,220
oh wait that's different okay okay now

00:03:35,580 --> 00:03:41,820
I'm going to cast a different spell what

00:03:38,220 --> 00:03:46,120
do you think this one's going to do five

00:03:41,820 --> 00:03:48,020
Oh I am now an aeroplane

00:03:46,120 --> 00:03:49,500
[Laughter]

00:03:48,020 --> 00:03:52,060
[Applause]

00:03:49,500 --> 00:03:54,190
okay so a lot a lot of this talk is

00:03:52,060 --> 00:03:57,160
going to be based on duck typing I

00:03:54,190 --> 00:03:59,470
figure this cat is trying really hard to

00:03:57,160 --> 00:04:00,730
do its duck typing now duck typing is

00:03:59,470 --> 00:04:02,590
where if it smells like a duck and a

00:04:00,730 --> 00:04:05,470
quack like wait no sounds like a duck

00:04:02,590 --> 00:04:07,870
and quacks like a duck it's a duck so so

00:04:05,470 --> 00:04:09,730
that's what you can use to exploit some

00:04:07,870 --> 00:04:13,000
of pythons gaps and weaknesses

00:04:09,730 --> 00:04:14,620
so for example suppose I've got this

00:04:13,000 --> 00:04:17,799
dictionary of values that I copy and

00:04:14,620 --> 00:04:19,389
pasted off Wikipedia and I want to get

00:04:17,799 --> 00:04:21,340
the first index weight that points to

00:04:19,389 --> 00:04:24,340
the number two now we all know that this

00:04:21,340 --> 00:04:26,139
is wrong clearly the one should point at

00:04:24,340 --> 00:04:30,160
the one that that's how this should work

00:04:26,139 --> 00:04:33,729
and and so if you and the minors one is

00:04:30,160 --> 00:04:35,800
also wrong the minors one is the six but

00:04:33,729 --> 00:04:37,360
it should be minus one clearly clearly

00:04:35,800 --> 00:04:42,070
so this is this is wrong so we're going

00:04:37,360 --> 00:04:45,820
to fix Python okay so and there we go

00:04:42,070 --> 00:04:48,010
right okay so so standard indexing but

00:04:45,820 --> 00:04:50,320
but it's fixed okay

00:04:48,010 --> 00:04:51,639
so if you want to know how to fix Python

00:04:50,320 --> 00:04:54,060
you can go and get into the source code

00:04:51,639 --> 00:04:57,400
for the libraries that the dual of this

00:04:54,060 --> 00:04:59,169
now yeah there's a few what I'm not

00:04:57,400 --> 00:05:00,910
going to tell you is the like like the

00:04:59,169 --> 00:05:02,470
Chiti bits where this only works when

00:05:00,910 --> 00:05:04,330
you call it in a particular way because

00:05:02,470 --> 00:05:06,130
then it would would look less impressive

00:05:04,330 --> 00:05:09,280
but there's a reason that it's in it

00:05:06,130 --> 00:05:12,010
like it turns out like if it's in a

00:05:09,280 --> 00:05:14,500
dictionary I can like steal this from

00:05:12,010 --> 00:05:16,300
the from the locals and then like add

00:05:14,500 --> 00:05:18,220
what's in the dictionary but I can't

00:05:16,300 --> 00:05:20,080
actually write back the locals to out of

00:05:18,220 --> 00:05:22,330
so there's gaps so there's a lot of

00:05:20,080 --> 00:05:26,229
wizardry you can do which is like pretty

00:05:22,330 --> 00:05:28,539
hilarious so here we go like just to

00:05:26,229 --> 00:05:31,300
prove that like I'm not pulling the same

00:05:28,539 --> 00:05:33,880
so what I did up up earlier was I

00:05:31,300 --> 00:05:35,530
changed what print was doing so I can I

00:05:33,880 --> 00:05:37,270
can get in there and use mocking to

00:05:35,530 --> 00:05:39,430
change what the built-in print function

00:05:37,270 --> 00:05:41,560
does but just in case you think that's

00:05:39,430 --> 00:05:45,280
what I'm doing here I'm not I really

00:05:41,560 --> 00:05:46,930
really have even even outside of the

00:05:45,280 --> 00:05:48,310
spell I've actually gone through and

00:05:46,930 --> 00:05:50,349
changed the adjustment of how the

00:05:48,310 --> 00:05:51,669
indexing works so that's a basic example

00:05:50,349 --> 00:05:54,820
of the kind of wizardry you can do in

00:05:51,669 --> 00:05:58,060
Python now now this is probably all a

00:05:54,820 --> 00:06:00,880
bit evil like there's like the

00:05:58,060 --> 00:06:02,580
difference in indexing I'm like well if

00:06:00,880 --> 00:06:05,430
you have some like

00:06:02,580 --> 00:06:07,139
maybe external library that somehow one

00:06:05,430 --> 00:06:08,879
index like you're calling the Fortran

00:06:07,139 --> 00:06:10,650
code and it's one index like maybe

00:06:08,879 --> 00:06:12,360
actually doing something like this could

00:06:10,650 --> 00:06:15,930
conceivably make sense so that your

00:06:12,360 --> 00:06:18,870
index um and X lined up maybe okay so

00:06:15,930 --> 00:06:21,120
like I can kind of justify that one but

00:06:18,870 --> 00:06:22,740
I definitely can't justify changing what

00:06:21,120 --> 00:06:25,680
print statement does and I definitely

00:06:22,740 --> 00:06:28,229
can't justify bringing cats up in your

00:06:25,680 --> 00:06:30,030
operational code okay okay so sorting so

00:06:28,229 --> 00:06:31,500
sorting is one of the the classic

00:06:30,030 --> 00:06:33,780
example so this is like where I think

00:06:31,500 --> 00:06:36,090
it's like a good idea this is what it's

00:06:33,780 --> 00:06:37,560
supposed to be for okay so we've got a

00:06:36,090 --> 00:06:40,080
list and it's not in order

00:06:37,560 --> 00:06:42,569
and we sort it it comes back in order of

00:06:40,080 --> 00:06:45,180
the numbers okay but if we have playing

00:06:42,569 --> 00:06:47,759
cards you know five a heart six of heart

00:06:45,180 --> 00:06:50,060
six of spades ordering is not just

00:06:47,759 --> 00:06:53,310
numerical anymore there's an additional

00:06:50,060 --> 00:06:54,569
aspect so if I've got you know I've got

00:06:53,310 --> 00:06:56,129
a couple of hands of cards I've got a

00:06:54,569 --> 00:06:58,740
short hand of cards in a long hand of

00:06:56,129 --> 00:07:01,379
cards if I sort my shorthand of cards

00:06:58,740 --> 00:07:03,300
you know it's coming in coming in

00:07:01,379 --> 00:07:05,189
numerical order sure and then it's

00:07:03,300 --> 00:07:07,310
ordering these according to the suit the

00:07:05,189 --> 00:07:10,430
sort order so I haven't had to like call

00:07:07,310 --> 00:07:12,690
playing cards dot sort or like you know

00:07:10,430 --> 00:07:14,550
understand that the semantics I'm just

00:07:12,690 --> 00:07:16,379
using that the completely standard

00:07:14,550 --> 00:07:18,599
Python function for doing the sorting

00:07:16,379 --> 00:07:20,969
but if I want to play a different game

00:07:18,599 --> 00:07:23,490
like five hundred well it's got a

00:07:20,969 --> 00:07:25,490
different suit suit order so five

00:07:23,490 --> 00:07:28,349
hundred now what you'll see is that the

00:07:25,490 --> 00:07:30,839
the hearts and the spades have have

00:07:28,349 --> 00:07:32,729
flipped okay so we're still using the

00:07:30,839 --> 00:07:35,490
standard Python language but I've been

00:07:32,729 --> 00:07:37,830
able to tell my class what its semantics

00:07:35,490 --> 00:07:40,289
are supposed to be but I haven't had to

00:07:37,830 --> 00:07:42,539
tell the program or a new way to sort so

00:07:40,289 --> 00:07:45,150
maybe that's a little bit magical

00:07:42,539 --> 00:07:46,969
because but at the same time if you you

00:07:45,150 --> 00:07:50,129
know you're playing a particular game

00:07:46,969 --> 00:07:51,810
you can use that to say well this deck

00:07:50,129 --> 00:07:54,210
of cards now relates to this particular

00:07:51,810 --> 00:07:55,770
set of game semantics but the actual

00:07:54,210 --> 00:07:59,039
programmer doesn't need to relearn how

00:07:55,770 --> 00:08:00,960
to sort a list okay and then we go back

00:07:59,039 --> 00:08:03,930
to bridge which is the standard mode and

00:08:00,960 --> 00:08:07,770
there it is so this is interesting so

00:08:03,930 --> 00:08:10,139
this is random mode so what's going on

00:08:07,770 --> 00:08:11,819
here is that it's it starts with a

00:08:10,139 --> 00:08:13,800
number and then it breaks ties by going

00:08:11,819 --> 00:08:16,650
into the suit based on a specified suit

00:08:13,800 --> 00:08:19,650
order now I can random

00:08:16,650 --> 00:08:21,300
that suit order and then I can sort it

00:08:19,650 --> 00:08:23,100
by randomized suit now this is cut this

00:08:21,300 --> 00:08:27,510
is a little bit evil but now you see we

00:08:23,100 --> 00:08:29,580
have now it's just disordered it's hard

00:08:27,510 --> 00:08:34,500
to explain why I added random into the

00:08:29,580 --> 00:08:36,390
good example but I did okay so so there

00:08:34,500 --> 00:08:38,520
you go okay so like like if you're gonna

00:08:36,390 --> 00:08:40,710
try to like change the greater than and

00:08:38,520 --> 00:08:43,140
the less than like probably make it

00:08:40,710 --> 00:08:45,690
deterministic so so I bet that's why

00:08:43,140 --> 00:08:47,520
that's why I did it that now now I

00:08:45,690 --> 00:08:49,170
remember so the so what are the what are

00:08:47,520 --> 00:08:51,390
the constraints you have to respect okay

00:08:49,170 --> 00:08:53,190
so this is a bit like you know if you're

00:08:51,390 --> 00:08:54,779
going to change some concept like this

00:08:53,190 --> 00:08:56,250
you need to understand what it is you've

00:08:54,779 --> 00:08:58,140
got a respect when you're doing it like

00:08:56,250 --> 00:08:59,720
it is fine to implement greater than

00:08:58,140 --> 00:09:03,660
re-implement greater than and less than

00:08:59,720 --> 00:09:05,190
but if it was a more complex example and

00:09:03,660 --> 00:09:07,410
you didn't realize that you were

00:09:05,190 --> 00:09:09,150
violating the determinism of greater

00:09:07,410 --> 00:09:12,779
than and less then then you might get

00:09:09,150 --> 00:09:14,700
yourself into hot hot hot water okay so

00:09:12,779 --> 00:09:18,000
that was that that's just that's just

00:09:14,700 --> 00:09:19,320
the warm-up act okay so all right so now

00:09:18,000 --> 00:09:21,089
we're going to be talking about some

00:09:19,320 --> 00:09:22,290
books cuz everyone everyone reads books

00:09:21,089 --> 00:09:25,350
right so we're going to read three books

00:09:22,290 --> 00:09:26,940
and and in fact they're poems but by the

00:09:25,350 --> 00:09:28,890
time I realized I was going to use poems

00:09:26,940 --> 00:09:31,110
instead of books I was way too far down

00:09:28,890 --> 00:09:32,690
into implementation so these are books

00:09:31,110 --> 00:09:35,100
so I'm going to learn these books and

00:09:32,690 --> 00:09:37,980
then I'm just gonna like pull out

00:09:35,100 --> 00:09:39,720
something Zen Peters like whatever okay

00:09:37,980 --> 00:09:41,310
so just give me what I meant okay and

00:09:39,720 --> 00:09:43,350
here we go look the Zen of Python by Tim

00:09:41,310 --> 00:09:46,020
Tim Peters that that's what I meant

00:09:43,350 --> 00:09:47,970
so that's interesting so the square

00:09:46,020 --> 00:09:50,160
brackets are usually used for selections

00:09:47,970 --> 00:09:52,589
so it's not really complicated to go oh

00:09:50,160 --> 00:09:55,290
yeah he's like pulling something out but

00:09:52,589 --> 00:09:57,330
it's it's fuzzy right like there may

00:09:55,290 --> 00:10:00,150
have been similar books that it's chosen

00:09:57,330 --> 00:10:02,910
between you know is this a good idea or

00:10:00,150 --> 00:10:06,000
a bad idea like should square brackets

00:10:02,910 --> 00:10:08,100
election return like one well-defined

00:10:06,000 --> 00:10:09,750
deterministic thing out of you know like

00:10:08,100 --> 00:10:11,130
if I'm pulling out of a dictionary like

00:10:09,750 --> 00:10:13,200
there's a hash function I'm getting that

00:10:11,130 --> 00:10:15,150
exact thing that I put in there before I

00:10:13,200 --> 00:10:17,640
know that if I get the same thing twice

00:10:15,150 --> 00:10:20,400
the same things going to come back you

00:10:17,640 --> 00:10:23,190
know like I actually kind of quite like

00:10:20,400 --> 00:10:24,630
this sort of fuzzy search concept but it

00:10:23,190 --> 00:10:26,910
worries me because if I added something

00:10:24,630 --> 00:10:30,420
else to the list that was like I don't

00:10:26,910 --> 00:10:33,240
know is it that was like similar but

00:10:30,420 --> 00:10:34,500
maybe maybe more directly relevant to

00:10:33,240 --> 00:10:37,320
the search term I might get something

00:10:34,500 --> 00:10:39,000
out that was different so I'm not sure

00:10:37,320 --> 00:10:41,790
whether this is genius or evil I'm not

00:10:39,000 --> 00:10:44,070
it's kind of neat anyway so yeah I can

00:10:41,790 --> 00:10:46,860
get Jabberwocky so that's great

00:10:44,070 --> 00:10:49,800
I've asked for Zen and Jabberwocky it

00:10:46,860 --> 00:10:52,470
makes a call and goes well Jabbawockeez

00:10:49,800 --> 00:10:54,449
longer than Zen so he typed that pretty

00:10:52,470 --> 00:10:58,500
deliberately so I think we'll go with

00:10:54,449 --> 00:11:00,779
Jabberwocky if I go for rabbin PO so I

00:10:58,500 --> 00:11:03,540
haven't spelled it correctly at all and

00:11:00,779 --> 00:11:04,740
I've got out the Raven by a gallon so

00:11:03,540 --> 00:11:07,230
that's pretty good so we're doing some

00:11:04,740 --> 00:11:09,180
pretty decent like fuzzy and tension

00:11:07,230 --> 00:11:11,850
matching here and if I go for like

00:11:09,180 --> 00:11:13,199
Reverend PO Bible it goes like look that

00:11:11,850 --> 00:11:15,630
guy was clearly drunk when you wrote

00:11:13,199 --> 00:11:17,880
that search term this is probably what

00:11:15,630 --> 00:11:20,790
he wants so so there's a measure of like

00:11:17,880 --> 00:11:22,949
intention guessing going on there and

00:11:20,790 --> 00:11:24,149
just because this is no longer so much

00:11:22,949 --> 00:11:26,970
about that but this is like what's

00:11:24,149 --> 00:11:28,649
actually happening so like this is kind

00:11:26,970 --> 00:11:30,600
of where I was about four days ago I'm

00:11:28,649 --> 00:11:33,000
like I've had this idea that we should

00:11:30,600 --> 00:11:35,220
have fuzzy fuzzy getting but now I'm

00:11:33,000 --> 00:11:38,010
gonna have to implement like all of how

00:11:35,220 --> 00:11:40,110
to do a fuzzy search so this is a random

00:11:38,010 --> 00:11:45,120
now aside this is how to implement fuzzy

00:11:40,110 --> 00:11:46,290
search in Python okay so okay what's

00:11:45,120 --> 00:11:47,640
going on here so there's a thing called

00:11:46,290 --> 00:11:50,250
that we're started with a thing called

00:11:47,640 --> 00:11:51,690
the levenshtein distance which is like

00:11:50,250 --> 00:11:53,040
called the Edit distance which is like

00:11:51,690 --> 00:11:55,860
how many characters are difference

00:11:53,040 --> 00:11:58,320
between the two and then I've got a

00:11:55,860 --> 00:12:00,750
particular function that will take me

00:11:58,320 --> 00:12:03,269
from like you know if I have like two

00:12:00,750 --> 00:12:06,600
edits like it'll map it back to a number

00:12:03,269 --> 00:12:08,579
between 0 and 1 but so this is what this

00:12:06,600 --> 00:12:11,760
tan age function is and there's a few

00:12:08,579 --> 00:12:13,440
different ways to to do that too like

00:12:11,760 --> 00:12:15,870
I'm like oh it doesn't give me enough

00:12:13,440 --> 00:12:18,240
kind of hang on I'm pointing at my

00:12:15,870 --> 00:12:20,100
screen that's silly so it doesn't give

00:12:18,240 --> 00:12:22,769
me like enough sort of resolution so

00:12:20,100 --> 00:12:24,750
like here I've got where the axes on

00:12:22,769 --> 00:12:28,019
there they're on my screen this is

00:12:24,750 --> 00:12:31,110
ridiculous okay so okay so now I can get

00:12:28,019 --> 00:12:33,149
scores between like minus 5 and plus 5

00:12:31,110 --> 00:12:35,069
and get some kind of useful number

00:12:33,149 --> 00:12:37,380
between 0 and 1 and any worse than that

00:12:35,069 --> 00:12:39,810
you're just kind of horrible and it's

00:12:37,380 --> 00:12:41,160
either perfect or well not very good so

00:12:39,810 --> 00:12:44,240
if you've ever got something like this

00:12:41,160 --> 00:12:48,740
where you need to like take some

00:12:44,240 --> 00:12:51,080
kind of you know like specific value

00:12:48,740 --> 00:12:52,970
difference between two things and then

00:12:51,080 --> 00:12:54,560
like use it in some kind of matching

00:12:52,970 --> 00:12:57,020
system and this is on three so this is

00:12:54,560 --> 00:12:59,540
now now way more scaled or not brilliant

00:12:57,020 --> 00:13:01,700
okay I can get up to you know six to

00:12:59,540 --> 00:13:03,589
eight characters apart and be able to

00:13:01,700 --> 00:13:05,420
reasonably discriminate the quality of a

00:13:03,589 --> 00:13:08,180
match on those things and away we go

00:13:05,420 --> 00:13:10,010
okay so then we take that and then like

00:13:08,180 --> 00:13:12,649
here's here's a bunch of examples for a

00:13:10,010 --> 00:13:15,920
whole bunch of different words and you

00:13:12,649 --> 00:13:18,020
can see that yes so like things that are

00:13:15,920 --> 00:13:20,959
very like the number of edits what sort

00:13:18,020 --> 00:13:23,600
of number comes back for for how how bad

00:13:20,959 --> 00:13:25,160
of a typo it was so this is what I've

00:13:23,600 --> 00:13:27,649
actually implemented under the hood so

00:13:25,160 --> 00:13:29,959
it takes the the words that you ended up

00:13:27,649 --> 00:13:32,330
you put in for title and author splits

00:13:29,959 --> 00:13:35,180
them up by string sorts them by the

00:13:32,330 --> 00:13:37,459
quality of this match so it starts with

00:13:35,180 --> 00:13:38,930
like the search term and then sorts the

00:13:37,459 --> 00:13:40,399
other list by the quality of the match

00:13:38,930 --> 00:13:42,620
with the first element and so forth

00:13:40,399 --> 00:13:45,560
there were iteratively are down the way

00:13:42,620 --> 00:13:47,720
and then users even more maths to work

00:13:45,560 --> 00:13:49,160
out which one of those represents kind

00:13:47,720 --> 00:13:51,260
of the closest match and like that

00:13:49,160 --> 00:13:52,940
actually worked pretty well now I've got

00:13:51,260 --> 00:13:55,820
three reasonably well discriminated

00:13:52,940 --> 00:13:58,760
examples but hey this is a talk not a

00:13:55,820 --> 00:14:00,770
career so I'm just stopping there okay

00:13:58,760 --> 00:14:03,649
so graph wizardry so this was so number

00:14:00,770 --> 00:14:06,260
four was where I started okay so this is

00:14:03,649 --> 00:14:08,959
some more syntax hijacking so I've got

00:14:06,260 --> 00:14:11,089
this this wizard graph now anyone who's

00:14:08,959 --> 00:14:14,720
seen a lot of graph definitions knows

00:14:11,089 --> 00:14:18,560
often it's like fairly verbose so this

00:14:14,720 --> 00:14:21,529
is about the most brief syntax I've ever

00:14:18,560 --> 00:14:23,630
seen for declaring a graph so you've

00:14:21,529 --> 00:14:26,180
just you make one and then you make your

00:14:23,630 --> 00:14:28,850
node function and then you just use the

00:14:26,180 --> 00:14:32,570
arrows so like you know that's an arrow

00:14:28,850 --> 00:14:33,110
a points to be a points to see and we

00:14:32,570 --> 00:14:35,420
are done

00:14:33,110 --> 00:14:37,279
okay so that it that isn't my this is my

00:14:35,420 --> 00:14:39,829
graphing library it's not complete but I

00:14:37,279 --> 00:14:41,720
think it's awesome and there you go it's

00:14:39,829 --> 00:14:43,700
so plus to you I'm like I think I just

00:14:41,720 --> 00:14:46,250
like invented a better graph syntax I

00:14:43,700 --> 00:14:47,690
you know so I think this was good okay

00:14:46,250 --> 00:14:50,300
and then we've got some plotting and

00:14:47,690 --> 00:14:53,089
then now when you're not in the in the

00:14:50,300 --> 00:14:54,829
with statement it doesn't change it you

00:14:53,089 --> 00:14:57,610
just get true or false so you can also

00:14:54,829 --> 00:15:01,900
use this to query your graph afterwards

00:14:57,610 --> 00:15:04,210
so you can use like the with the context

00:15:01,900 --> 00:15:06,490
manager to like modify your graph so

00:15:04,210 --> 00:15:08,920
it's mutable inside the context they're

00:15:06,490 --> 00:15:11,650
here it's immutable so you can still

00:15:08,920 --> 00:15:12,750
just use the arrows does a point at B

00:15:11,650 --> 00:15:17,830
yes

00:15:12,750 --> 00:15:20,020
okay does B point at a no B does not

00:15:17,830 --> 00:15:22,450
point at a okay job done

00:15:20,020 --> 00:15:24,750
and then we can bring out our context

00:15:22,450 --> 00:15:26,740
manager back in add a few more things

00:15:24,750 --> 00:15:29,080
plot a more complicated graph but I

00:15:26,740 --> 00:15:30,700
didn't like these plots so like I know

00:15:29,080 --> 00:15:33,250
I've kind of demonstrated the point

00:15:30,700 --> 00:15:35,260
around like you can do the syntax thing

00:15:33,250 --> 00:15:38,050
but like it just wasn't pretty enough so

00:15:35,260 --> 00:15:42,130
I just had to keep going so this is the

00:15:38,050 --> 00:15:44,020
same code still awesome graph syntax and

00:15:42,130 --> 00:15:46,750
then like this one you can plot drop it

00:15:44,020 --> 00:15:48,130
out to like a DSL and you can draw it

00:15:46,750 --> 00:15:49,720
and it got like I think that's better

00:15:48,130 --> 00:15:52,600
drawing okay so there we go so we can

00:15:49,720 --> 00:15:54,070
draw it better and then we can draw them

00:15:52,600 --> 00:15:55,540
or complicated one and there's the

00:15:54,070 --> 00:15:57,430
bi-directional think so that's the

00:15:55,540 --> 00:15:59,350
equals equal so I'm like yeah there that

00:15:57,430 --> 00:16:00,550
that's bi-directional that's single

00:15:59,350 --> 00:16:03,760
directional and that's a much better

00:16:00,550 --> 00:16:05,620
plotting library so oh that was those a

00:16:03,760 --> 00:16:07,780
relief think things should look good

00:16:05,620 --> 00:16:11,140
and if you print it you get so you can

00:16:07,780 --> 00:16:14,380
print it or draw it so you see the

00:16:11,140 --> 00:16:16,840
printing is just like it just represent

00:16:14,380 --> 00:16:19,300
have to call like dot two string or is

00:16:16,840 --> 00:16:22,840
it dot string or is it dot thump string

00:16:19,300 --> 00:16:24,100
you just use the Python syntax and just

00:16:22,840 --> 00:16:25,660
there it is it's fine

00:16:24,100 --> 00:16:27,460
and you can just pipe that out to a file

00:16:25,660 --> 00:16:28,930
if you want to and you don't need a

00:16:27,460 --> 00:16:31,450
whole lot of extra semantics around

00:16:28,930 --> 00:16:34,120
complicated this is what all my class

00:16:31,450 --> 00:16:37,150
semantics are so this was one I thought

00:16:34,120 --> 00:16:39,730
was good okay so how am I going for time

00:16:37,150 --> 00:16:42,070
I'm actually doing alright for time okay

00:16:39,730 --> 00:16:45,390
so now now we get into some text

00:16:42,070 --> 00:16:47,920
wizardry this is a text generation so

00:16:45,390 --> 00:16:50,650
all right so I've got this chunking

00:16:47,920 --> 00:16:52,030
class and I'm going to create this chunk

00:16:50,650 --> 00:16:54,520
now this chunk means that from like

00:16:52,030 --> 00:16:57,280
midday till 3:00 p.m. the temperature

00:16:54,520 --> 00:17:01,480
will vary between 14 and 15 degrees so

00:16:57,280 --> 00:17:06,130
if we look at that oh it says it says

00:17:01,480 --> 00:17:10,120
words that's cool so we can use this for

00:17:06,130 --> 00:17:11,650
text generation now you don't even

00:17:10,120 --> 00:17:14,650
need the Ripper just there it is they

00:17:11,650 --> 00:17:17,740
tailed it so then we've got c2 okay now

00:17:14,650 --> 00:17:20,559
who can tell me what's interesting about

00:17:17,740 --> 00:17:22,600
the next statement okay so this is where

00:17:20,559 --> 00:17:25,300
I think that Python is wrong again

00:17:22,600 --> 00:17:26,290
so it's not really I'm just being

00:17:25,300 --> 00:17:31,270
ridiculous

00:17:26,290 --> 00:17:33,250
so normally if you'd add like 3 & 9

00:17:31,270 --> 00:17:34,690
you'd get the same thing as if you got 9

00:17:33,250 --> 00:17:37,809
& 3 because that's how that's worked

00:17:34,690 --> 00:17:41,100
it's not how strings work they are in a

00:17:37,809 --> 00:17:43,179
specific order if you add c1 and and

00:17:41,100 --> 00:17:45,790
different things happen to if you had

00:17:43,179 --> 00:17:47,890
and and c1 not only are the words in a

00:17:45,790 --> 00:17:50,020
different order but a different object

00:17:47,890 --> 00:17:54,510
add method is getting called in both

00:17:50,020 --> 00:18:03,220
instances so if I pull the wrapper off

00:17:54,510 --> 00:18:07,030
c2 right right who's got an idea of what

00:18:03,220 --> 00:18:09,130
might happen now syntax error

00:18:07,030 --> 00:18:11,140
there we go invalid syntax exactly it's

00:18:09,130 --> 00:18:13,120
because a c2 knows how to add a string

00:18:11,140 --> 00:18:21,790
but a string doesn't know how to add a

00:18:13,120 --> 00:18:25,179
c2 and I don't oh damn it all right okay

00:18:21,790 --> 00:18:27,870
still an error this one is now caused by

00:18:25,179 --> 00:18:31,330
the thing that I was talking about

00:18:27,870 --> 00:18:32,890
at least I was able to reproduce it so

00:18:31,330 --> 00:18:35,380
yeah that that's where like the street

00:18:32,890 --> 00:18:37,300
so c1 and add up together and give you

00:18:35,380 --> 00:18:37,809
the string which is from up there in the

00:18:37,300 --> 00:18:40,300
end

00:18:37,809 --> 00:18:42,670
but then the string doesn't know how to

00:18:40,300 --> 00:18:44,470
add us in instance of c2 and I don't

00:18:42,670 --> 00:18:46,030
this may just be me

00:18:44,470 --> 00:18:48,640
but I don't know how to tell the string

00:18:46,030 --> 00:18:51,429
to know how to add like I need like a an

00:18:48,640 --> 00:18:53,050
if added concept I like you know I need

00:18:51,429 --> 00:18:55,059
to like know how to tell a string that

00:18:53,050 --> 00:18:56,770
it is acted like the thing over there

00:18:55,059 --> 00:18:58,179
does know how to be a string really and

00:18:56,770 --> 00:18:59,590
it's fine to give a string back but I

00:18:58,179 --> 00:19:01,990
kind of understand that the people who

00:18:59,590 --> 00:19:05,559
implemented Python didn't really decide

00:19:01,990 --> 00:19:08,440
to like make their string class like no

00:19:05,559 --> 00:19:12,429
way yeah that's just ridiculous

00:19:08,440 --> 00:19:14,200
okay I'll stop ranting about that

00:19:12,429 --> 00:19:17,500
particular thing because I'm doing a

00:19:14,200 --> 00:19:19,090
silly thing and I know it okay so I can

00:19:17,500 --> 00:19:21,520
create a multi chunk out of those two

00:19:19,090 --> 00:19:23,200
things and I go I haven't put a lot of

00:19:21,520 --> 00:19:23,800
effort into the the niceness of the

00:19:23,200 --> 00:19:25,150
words but he

00:19:23,800 --> 00:19:27,340
we go now we've got a chunk out of two

00:19:25,150 --> 00:19:28,720
bits and it says well this thing will

00:19:27,340 --> 00:19:39,250
happen and then this other thing will

00:19:28,720 --> 00:19:40,990
happen no cool there's a way if I need

00:19:39,250 --> 00:19:46,120
if only I'd known you three days ago

00:19:40,990 --> 00:19:48,010
Nick okay so so this is where I've done

00:19:46,120 --> 00:19:50,950
a little different thing with like I can

00:19:48,010 --> 00:19:52,900
make a chunk that's indicating a

00:19:50,950 --> 00:19:55,480
sequence which is like that happens and

00:19:52,900 --> 00:19:57,640
then that happens but this one where I

00:19:55,480 --> 00:20:00,160
add them I've actually used an addition

00:19:57,640 --> 00:20:02,050
concept so the times have been added

00:20:00,160 --> 00:20:03,880
together and the new max temperature is

00:20:02,050 --> 00:20:07,690
based on the the max out of each of the

00:20:03,880 --> 00:20:09,610
two so if I'd had say another like two

00:20:07,690 --> 00:20:11,560
months full-time to work on the talk I

00:20:09,610 --> 00:20:13,090
could have implemented a really powerful

00:20:11,560 --> 00:20:14,500
text generation thing and you could see

00:20:13,090 --> 00:20:17,440
how you could add all of these chunks

00:20:14,500 --> 00:20:18,760
together and take take something

00:20:17,440 --> 00:20:21,130
anything that involves like an

00:20:18,760 --> 00:20:23,920
aggregation is kind of reasonable to use

00:20:21,130 --> 00:20:26,830
a plus four and you can get into these

00:20:23,920 --> 00:20:28,540
sorts of things so I went I just because

00:20:26,830 --> 00:20:30,220
I've done text generation before I just

00:20:28,540 --> 00:20:34,090
kept going further and further down the

00:20:30,220 --> 00:20:37,000
text generation rabbit hole okay so if I

00:20:34,090 --> 00:20:40,300
have 24 hours it stops being quite so

00:20:37,000 --> 00:20:42,070
readable so let's let's like look at a

00:20:40,300 --> 00:20:44,020
graph of what's supposed to happen there

00:20:42,070 --> 00:20:47,680
so that's the the the track of this

00:20:44,020 --> 00:20:49,930
hypothetical daily temperature but again

00:20:47,680 --> 00:20:52,390
I just I don't like writing that much

00:20:49,930 --> 00:20:54,460
code so I just told my class how to do

00:20:52,390 --> 00:20:56,770
it and then I gave it this dumb chunk

00:20:54,460 --> 00:21:01,240
method which chunks it up into four bits

00:20:56,770 --> 00:21:02,890
and and away we go so then what we've

00:21:01,240 --> 00:21:05,350
done is I've used behind the hood the

00:21:02,890 --> 00:21:07,060
same kind of class can be like one thing

00:21:05,350 --> 00:21:10,390
or multiple things that's effectively a

00:21:07,060 --> 00:21:12,400
tree and there we go so it now gives you

00:21:10,390 --> 00:21:13,870
the maximum temperature in chunks per

00:21:12,400 --> 00:21:15,220
day now I've only got five minutes left

00:21:13,870 --> 00:21:17,380
which means I get to gloss over

00:21:15,220 --> 00:21:20,830
everything that's happening for the next

00:21:17,380 --> 00:21:24,640
few minutes okay so then I implement an

00:21:20,830 --> 00:21:26,530
error function on this so now what I

00:21:24,640 --> 00:21:27,640
need to do is take these time series and

00:21:26,530 --> 00:21:29,080
go well what is the best possible

00:21:27,640 --> 00:21:31,600
chunking that is going to best

00:21:29,080 --> 00:21:33,250
discriminate my times of day and I feel

00:21:31,600 --> 00:21:35,650
like I've kind of changed topic now it's

00:21:33,250 --> 00:21:37,270
no longer syntax hijacking is like how

00:21:35,650 --> 00:21:37,929
to deal with things that are more than

00:21:37,270 --> 00:21:39,250
one

00:21:37,929 --> 00:21:41,380
like there's a piece of data something

00:21:39,250 --> 00:21:44,190
that's being represented and you need an

00:21:41,380 --> 00:21:47,169
elegant way of working working with them

00:21:44,190 --> 00:21:50,200
so I've got this error message method so

00:21:47,169 --> 00:21:51,520
the error is like the integral of the

00:21:50,200 --> 00:21:53,860
difference between the maximum

00:21:51,520 --> 00:21:55,539
temperature per hour and the actual

00:21:53,860 --> 00:21:57,370
maximum temperature of the aggregated

00:21:55,539 --> 00:21:59,620
thing that's being represented and I

00:21:57,370 --> 00:22:01,840
didn't know enough plotting magic to be

00:21:59,620 --> 00:22:03,220
able to draw that and I didn't have

00:22:01,840 --> 00:22:05,410
enough time to take a photograph of a

00:22:03,220 --> 00:22:07,150
napkin either so you either followed or

00:22:05,410 --> 00:22:10,440
you didn't but I have implemented a

00:22:07,150 --> 00:22:13,059
smart chunk and so the smart chunk

00:22:10,440 --> 00:22:16,419
results in this particular thing here

00:22:13,059 --> 00:22:17,980
so this ignore that little white gap I

00:22:16,419 --> 00:22:19,780
also and have enough plotting skills to

00:22:17,980 --> 00:22:21,340
make little white gaps not appear but I

00:22:19,780 --> 00:22:22,480
did know what I meant I didn't know what

00:22:21,340 --> 00:22:25,330
I meant to achieve so what we've got

00:22:22,480 --> 00:22:26,919
here is that this minimizes and now I

00:22:25,330 --> 00:22:29,169
can just like draw with a finger so

00:22:26,919 --> 00:22:30,400
there's sort of you know that's kind of

00:22:29,169 --> 00:22:32,260
the temperature and then it starts

00:22:30,400 --> 00:22:35,169
raising up and the idea is that it's

00:22:32,260 --> 00:22:37,990
minimizing the area of blue above that

00:22:35,169 --> 00:22:40,539
max line by considering every possible

00:22:37,990 --> 00:22:44,650
split of the hourly temperatures along

00:22:40,539 --> 00:22:47,070
the way and then if I just print that

00:22:44,650 --> 00:22:50,470
then even though the the text is still

00:22:47,070 --> 00:22:53,530
not very great English this is a an

00:22:50,470 --> 00:22:55,360
inter for more readable you know sort of

00:22:53,530 --> 00:23:00,370
sequence of the words that are going on

00:22:55,360 --> 00:23:02,770
and I was tempted but didn't - instead

00:23:00,370 --> 00:23:05,289
of having this smart chunk thing be

00:23:02,770 --> 00:23:08,559
there just go you just you just sort it

00:23:05,289 --> 00:23:11,470
so you can just go like c2 equals sorted

00:23:08,559 --> 00:23:13,330
of C but I didn't implement that so one

00:23:11,470 --> 00:23:16,270
of the things we could do there is

00:23:13,330 --> 00:23:19,600
possibly override the concept of sorting

00:23:16,270 --> 00:23:24,669
- just like general improvement so you

00:23:19,600 --> 00:23:26,650
could say so so like if you go well well

00:23:24,669 --> 00:23:28,450
a sorted list is like just kind of

00:23:26,650 --> 00:23:31,240
better than an unsorted list

00:23:28,450 --> 00:23:34,630
well error minimization is a lot like

00:23:31,240 --> 00:23:36,970
sorting I mean and just better this is a

00:23:34,630 --> 00:23:38,620
lot like that kind of improvement so I

00:23:36,970 --> 00:23:41,770
feel like you can take some of these

00:23:38,620 --> 00:23:42,820
concepts and and and use them for your

00:23:41,770 --> 00:23:44,980
own purposes

00:23:42,820 --> 00:23:46,570
now that whether you're developers will

00:23:44,980 --> 00:23:49,440
thank you for this is highly variable

00:23:46,570 --> 00:23:49,440
mine didn't

00:23:50,260 --> 00:23:56,950
but I remain convinced that this has

00:23:53,540 --> 00:23:59,330
value in some particular context but I

00:23:56,950 --> 00:24:02,750
leave no judgement about what those

00:23:59,330 --> 00:24:06,710
specifically are that brings me to the

00:24:02,750 --> 00:24:08,480
end end of the slides as such if you

00:24:06,710 --> 00:24:09,680
want to there's the wizardry library if

00:24:08,480 --> 00:24:11,870
anyone wants to pull the graph

00:24:09,680 --> 00:24:13,580
implementation out and start a graph

00:24:11,870 --> 00:24:16,400
project I think there's there's possibly

00:24:13,580 --> 00:24:18,080
legs in it and feel free to add more

00:24:16,400 --> 00:24:19,610
wizardry to the wizardry library with

00:24:18,080 --> 00:24:20,800
pull requests and who knows where we'll

00:24:19,610 --> 00:24:31,580
be in a year

00:24:20,800 --> 00:24:33,740
thanks Iran thanks Tennessee as a token

00:24:31,580 --> 00:24:36,170
of the appreciation we have this coffee

00:24:33,740 --> 00:24:39,380
mug for you thank you for you to talk

00:24:36,170 --> 00:24:41,560
and do you take questions I do take

00:24:39,380 --> 00:24:46,280
questions then we have a few minutes

00:24:41,560 --> 00:24:48,320
let's have a somebody from a non common

00:24:46,280 --> 00:24:55,780
group a gift for first question please

00:24:48,320 --> 00:24:55,780
like non-male white young like not me

00:25:12,410 --> 00:25:23,690
[Laughter]

00:25:16,540 --> 00:25:25,550
anyone no well I hate but this is just

00:25:23,690 --> 00:25:28,580
like a kind of like 10 year old case of

00:25:25,550 --> 00:25:30,590
sour grapefruit so the basis of the text

00:25:28,580 --> 00:25:32,090
generation stuff I did some things like

00:25:30,590 --> 00:25:34,880
that at work and we were faced with this

00:25:32,090 --> 00:25:36,710
question of do we go down there using as

00:25:34,880 --> 00:25:39,770
much of a Python it like what was a

00:25:36,710 --> 00:25:40,970
pythonic approach but we had developers

00:25:39,770 --> 00:25:44,540
from like all sorts of different

00:25:40,970 --> 00:25:46,280
backgrounds and so it was like easier to

00:25:44,540 --> 00:25:48,650
come together on a set of class and

00:25:46,280 --> 00:25:50,270
object semantics than it was on what the

00:25:48,650 --> 00:25:55,700
definition of pythonic really meant

00:25:50,270 --> 00:25:58,070
anyway so you will face that but I think

00:25:55,700 --> 00:25:59,960
but but one of the things that can be

00:25:58,070 --> 00:26:02,360
good to do is remember that like being

00:25:59,960 --> 00:26:05,360
able to print an object is really useful

00:26:02,360 --> 00:26:08,809
being able to get represent data in more

00:26:05,360 --> 00:26:14,929
than one way is really useful so but no

00:26:08,809 --> 00:26:17,390
no ones have used it I really like the

00:26:14,929 --> 00:26:19,789
graph idea I think that that does have

00:26:17,390 --> 00:26:22,250
legs I was also thinking could you get

00:26:19,789 --> 00:26:25,580
back to that scene sex which one the

00:26:22,250 --> 00:26:32,210
graph Center yeah I'll show you the

00:26:25,580 --> 00:26:34,010
pretty one because I'm thinking we could

00:26:32,210 --> 00:26:39,950
use square brackets slicing to find

00:26:34,010 --> 00:26:43,929
paths and brilliant I'm here on Monday

00:26:39,950 --> 00:26:43,929
and Tuesday let's just make it happen I

00:26:44,799 --> 00:26:50,480
know this is like your third or maybe

00:26:47,809 --> 00:26:54,470
even fourth talk you just collecting

00:26:50,480 --> 00:26:55,880
mugs that come in here this is my this

00:26:54,470 --> 00:26:59,690
is my second talk at this particular

00:26:55,880 --> 00:27:01,250
conference this this I do love my mugs

00:26:59,690 --> 00:27:04,120
every year there's a mug photo at the

00:27:01,250 --> 00:27:07,100
end of the conference but this talk was

00:27:04,120 --> 00:27:08,539
became very special to me over the last

00:27:07,100 --> 00:27:10,519
sort of three or four days while I'm

00:27:08,539 --> 00:27:12,380
madly attempted to implement as much as

00:27:10,519 --> 00:27:16,490
much strange functionality as I could I

00:27:12,380 --> 00:27:18,649
wish I'd given myself longer if you're

00:27:16,490 --> 00:27:21,470
going to use this technique with your

00:27:18,649 --> 00:27:24,289
own types and not just for fun but the

00:27:21,470 --> 00:27:26,049
serious work what help is there for

00:27:24,289 --> 00:27:29,539
making sure that your implementations

00:27:26,049 --> 00:27:31,940
obey the relevant laws like totality

00:27:29,539 --> 00:27:34,610
associativity total order in the case of

00:27:31,940 --> 00:27:36,740
ordering yeah I think you need to find

00:27:34,610 --> 00:27:38,720
someone who knows about those things to

00:27:36,740 --> 00:27:41,029
write your test rig for you essentially

00:27:38,720 --> 00:27:43,279
so yeah make sure you run it through a

00:27:41,029 --> 00:27:44,630
bunch of total ordering tests if you're

00:27:43,279 --> 00:27:46,220
going to use that kind of thing make

00:27:44,630 --> 00:27:48,320
sure you've implemented it so that

00:27:46,220 --> 00:27:50,899
things like sorting don't explode so

00:27:48,320 --> 00:27:53,000
you're going to need to understand what

00:27:50,899 --> 00:27:54,620
those constraints are like that that is

00:27:53,000 --> 00:27:56,120
the hard side of all of this is like

00:27:54,620 --> 00:27:58,850
like the graph thing doesn't

00:27:56,120 --> 00:28:00,769
particularly like break any constraints

00:27:58,850 --> 00:28:02,809
or such yeah I'm reusing the the thing

00:28:00,769 --> 00:28:04,610
but it's clearly within there's that

00:28:02,809 --> 00:28:07,100
context manager and I don't have to like

00:28:04,610 --> 00:28:08,750
magically call graph dot make mutable

00:28:07,100 --> 00:28:10,880
and change the definition of everything

00:28:08,750 --> 00:28:12,409
and then like remember to undo that when

00:28:10,880 --> 00:28:14,000
I'm finished so I think there's a few

00:28:12,409 --> 00:28:16,250
ways where if you're going to do it you

00:28:14,000 --> 00:28:18,350
can make it more convenient to people

00:28:16,250 --> 00:28:20,420
I think that the context manager syntax

00:28:18,350 --> 00:28:22,670
is amazingly powerful and underused in

00:28:20,420 --> 00:28:25,550
general so even if you don't use it to

00:28:22,670 --> 00:28:27,320
do weird things using it to go this is

00:28:25,550 --> 00:28:29,030
setup code I want to have happen every

00:28:27,320 --> 00:28:30,740
time this is boilerplate that has to

00:28:29,030 --> 00:28:32,510
happen at the end and really get to the

00:28:30,740 --> 00:28:36,200
business logic is actually incredibly

00:28:32,510 --> 00:28:38,120
valuable and being able to push but you

00:28:36,200 --> 00:28:39,410
can you can abstract things and write

00:28:38,120 --> 00:28:41,810
wrapper libraries for things as a

00:28:39,410 --> 00:28:44,300
perfectly reasonable thing to do and let

00:28:41,810 --> 00:28:46,250
you push you know oddities of creating

00:28:44,300 --> 00:28:48,620
connections to servers and credential

00:28:46,250 --> 00:28:50,750
passing and things like that to you know

00:28:48,620 --> 00:28:52,970
you could just go like with my favorite

00:28:50,750 --> 00:28:54,410
server brackets name and have something

00:28:52,970 --> 00:28:55,610
know how to sort of manage all the

00:28:54,410 --> 00:28:57,350
credential side of that so the

00:28:55,610 --> 00:29:00,200
developers not confronted with this just

00:28:57,350 --> 00:29:01,820
like wall of setup when they're looking

00:29:00,200 --> 00:29:03,230
at the code so it really does help to

00:29:01,820 --> 00:29:05,140
bring the business logic of what you're

00:29:03,230 --> 00:29:08,390
trying to achieve to the fall

00:29:05,140 --> 00:29:10,930
all right thanks Tennessee there is a

00:29:08,390 --> 00:29:10,930

YouTube URL: https://www.youtube.com/watch?v=Ej4Kh41VySc


