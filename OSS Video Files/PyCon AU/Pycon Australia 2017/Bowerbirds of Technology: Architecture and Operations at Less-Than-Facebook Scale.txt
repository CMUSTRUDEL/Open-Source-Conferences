Title: Bowerbirds of Technology: Architecture and Operations at Less-Than-Facebook Scale
Publication date: 2017-08-05
Playlist: Pycon Australia 2017
Description: 
	Sam Kitajima-Kimbrel

http://2017.pycon-au.org/schedule/presentation/54/

#pyconau

This talk was given at PyCon Australia 2017 which was held from 3-8 August, 2017 in Melbourne, Victoria.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2017, we're returning to Melbourne, bringing together students, enthusiasts, and professionals with a love of Python from around Australia, and from all over the World. 

August 3-8 2017, Melbourne, Victoria

Python, PyCon, PyConAU
Captions: 
	00:00:00,000 --> 00:00:07,529
is Sam Kadima Kimbrel he's a lovely

00:00:02,639 --> 00:00:09,900
gentleman from from the valley who I had

00:00:07,529 --> 00:00:13,349
the benefit of meeting Sam last year at

00:00:09,900 --> 00:00:16,770
PyCon and met him again accidentally at

00:00:13,349 --> 00:00:21,119
Pyke Ohio Ohio a couple months later no

00:00:16,770 --> 00:00:23,880
it was a couple weeks later yeah and at

00:00:21,119 --> 00:00:26,670
that time Sam did today a little keen a

00:00:23,880 --> 00:00:28,109
little lightening talk about something

00:00:26,670 --> 00:00:29,490
had been bugging him because some people

00:00:28,109 --> 00:00:30,689
had been talking about all this

00:00:29,490 --> 00:00:32,369
wonderful technology they were using

00:00:30,689 --> 00:00:33,630
that was completely inappropriate for

00:00:32,369 --> 00:00:36,989
the purposes for which they are applying

00:00:33,630 --> 00:00:39,540
it and he gave a fantastic little little

00:00:36,989 --> 00:00:41,070
lightning talk that many people myself

00:00:39,540 --> 00:00:43,379
included said needed to be turned to a

00:00:41,070 --> 00:00:45,899
full length talk as fast as humanly

00:00:43,379 --> 00:00:48,719
possible and so when the opportunity

00:00:45,899 --> 00:00:51,480
arose to give Sam the the keynote spot

00:00:48,719 --> 00:00:52,770
or the close the closing closing invited

00:00:51,480 --> 00:00:54,809
speakers but for today

00:00:52,770 --> 00:00:56,309
I couldn't pass that one up so with very

00:00:54,809 --> 00:00:59,040
very very great pleasure to introduce

00:00:56,309 --> 00:01:03,810
the stage so and get a jima Kimbrel

00:00:59,040 --> 00:01:03,810
[Applause]

00:01:15,230 --> 00:01:21,890
all right now great okay so I think I'm

00:01:20,120 --> 00:01:23,180
going to choose to believe that Jack and

00:01:21,890 --> 00:01:25,250
the gentleman and yellow were just

00:01:23,180 --> 00:01:26,720
holding in time for late arrivals to get

00:01:25,250 --> 00:01:27,800
in here I saw people wandering and so

00:01:26,720 --> 00:01:31,460
thank you for that increasing the

00:01:27,800 --> 00:01:33,080
audience so yes this is bowerbirds of

00:01:31,460 --> 00:01:34,940
technology thanks everybody for

00:01:33,080 --> 00:01:37,340
attending the conference today very

00:01:34,940 --> 00:01:39,470
honored to be closing these are

00:01:37,340 --> 00:01:41,510
bowerbirds if you're not familiar with

00:01:39,470 --> 00:01:43,430
them they're birds they build these

00:01:41,510 --> 00:01:45,500
structures called Bauer's out of sticks

00:01:43,430 --> 00:01:46,940
and colorful objects that they find in

00:01:45,500 --> 00:01:48,530
their environment in an effort to

00:01:46,940 --> 00:01:50,510
attract mates well come back to them

00:01:48,530 --> 00:01:53,320
later please for now just enjoy the nice

00:01:50,510 --> 00:01:56,510
photos of birds that I found on Flickr

00:01:53,320 --> 00:01:58,670
speaking of Flickr kal Henderson I think

00:01:56,510 --> 00:02:01,220
I even called up this morning for a I

00:01:58,670 --> 00:02:03,230
hate Django talk in that talk he

00:02:01,220 --> 00:02:06,020
actually said that most websites are not

00:02:03,230 --> 00:02:08,179
in the top hundred websites it turns out

00:02:06,020 --> 00:02:11,510
if you do the math all but 100 of them

00:02:08,179 --> 00:02:13,100
are not in the top 100 I can take no

00:02:11,510 --> 00:02:17,270
credit for that joke that is exactly his

00:02:13,100 --> 00:02:18,890
phrasing but thank you for the left more

00:02:17,270 --> 00:02:21,590
on this point this is a zipfian

00:02:18,890 --> 00:02:24,080
distribution it says that the number of

00:02:21,590 --> 00:02:26,600
links or traffic or users or whatever

00:02:24,080 --> 00:02:28,910
metric you want to pick for a given spot

00:02:26,600 --> 00:02:31,220
in the ranking of web sites is inversely

00:02:28,910 --> 00:02:33,170
proportional to that ranking this

00:02:31,220 --> 00:02:35,840
happens to be Wikipedia articles and the

00:02:33,170 --> 00:02:37,250
axes of note are a log-log so it doesn't

00:02:35,840 --> 00:02:39,980
turn into a turn into some sort of 1

00:02:37,250 --> 00:02:41,980
over X there many empirical studies of

00:02:39,980 --> 00:02:44,870
the web have shown that this holds true

00:02:41,980 --> 00:02:46,580
so my point and I think Andrew made this

00:02:44,870 --> 00:02:48,380
in his talk earlier before the break is

00:02:46,580 --> 00:02:51,020
that you're not Google or unless you

00:02:48,380 --> 00:02:53,570
work at Google but that's ok

00:02:51,020 --> 00:02:57,920
tons of products work really great for

00:02:53,570 --> 00:02:59,840
people use them at not Google scale I am

00:02:57,920 --> 00:03:01,520
also not Google if you're in the back

00:02:59,840 --> 00:03:04,550
and can't see this is me with a slightly

00:03:01,520 --> 00:03:06,290
different hair color currently I work at

00:03:04,550 --> 00:03:08,450
Twilio which is large and pretty fast

00:03:06,290 --> 00:03:09,739
growing but not Google and for about

00:03:08,450 --> 00:03:11,600
seven years or so I've been working on

00:03:09,739 --> 00:03:14,540
other similarly large and fast growing

00:03:11,600 --> 00:03:17,959
but not Google web services so I'd like

00:03:14,540 --> 00:03:19,760
to open by discussing what Google and

00:03:17,959 --> 00:03:21,470
Facebook and Amazon and the rest of them

00:03:19,760 --> 00:03:24,860
kind of at the very tippy top worry

00:03:21,470 --> 00:03:26,960
about so first

00:03:24,860 --> 00:03:28,490
they worry about absurdly high

00:03:26,960 --> 00:03:31,100
throughput in storage demands I'm

00:03:28,490 --> 00:03:34,330
talking millions tens of millions of

00:03:31,100 --> 00:03:36,530
requests per second and exabytes of data

00:03:34,330 --> 00:03:38,540
they deal with tens of thousands of

00:03:36,530 --> 00:03:41,270
servers in hundreds of data centers

00:03:38,540 --> 00:03:42,560
across the world that are managed and

00:03:41,270 --> 00:03:46,670
deployed to by thousands of developers

00:03:42,560 --> 00:03:48,080
and they have near unlimited resources

00:03:46,670 --> 00:03:49,490
right if you look at Google's quarterly

00:03:48,080 --> 00:03:53,330
statements we're talking about billions

00:03:49,490 --> 00:03:55,310
of dollars they get specific I have a

00:03:53,330 --> 00:03:57,770
couple case studies just to really prove

00:03:55,310 --> 00:03:59,570
things to talk through first up is uber

00:03:57,770 --> 00:04:01,130
and sidenote

00:03:59,570 --> 00:04:03,080
uber has given us plenty of bad examples

00:04:01,130 --> 00:04:04,940
in non technological things and this is

00:04:03,080 --> 00:04:06,760
emphatically not an endorsement of any

00:04:04,940 --> 00:04:08,480
of their behavior towards human beings

00:04:06,760 --> 00:04:10,730
but it's a kind of interesting

00:04:08,480 --> 00:04:12,830
technological story

00:04:10,730 --> 00:04:14,180
uber hit scaling issues with Postgres

00:04:12,830 --> 00:04:17,150
and I said that they are going to write

00:04:14,180 --> 00:04:18,890
their own data storage tier they blogged

00:04:17,150 --> 00:04:20,900
about it three times so you can go read

00:04:18,890 --> 00:04:22,100
about it it's pretty fascinating they

00:04:20,900 --> 00:04:23,780
started by talking about what they were

00:04:22,100 --> 00:04:26,390
looking for and some quotes from that

00:04:23,780 --> 00:04:27,710
they wanted to lynnie area'd capacity to

00:04:26,390 --> 00:04:31,490
their storage tier by adding more

00:04:27,710 --> 00:04:33,440
servers uber wanted to favor write

00:04:31,490 --> 00:04:36,979
availability availability over being

00:04:33,440 --> 00:04:38,750
able to read your own rights and they

00:04:36,979 --> 00:04:40,880
wanted to event notifications at the

00:04:38,750 --> 00:04:42,710
sidebar here is they said quote we had

00:04:40,880 --> 00:04:44,630
an asynchronous event system built on

00:04:42,710 --> 00:04:47,060
Kafka at 7:00 and we couldn't get it to

00:04:44,630 --> 00:04:49,610
run lossless if you're not familiar with

00:04:47,060 --> 00:04:52,370
Kafka Kafka ate the very next release

00:04:49,610 --> 00:04:55,760
introduced the correct behavior to run

00:04:52,370 --> 00:04:57,770
lossless have you tried upgrading so

00:04:55,760 --> 00:05:01,460
what is schema-less then what did they

00:04:57,770 --> 00:05:03,229
build they built an append-only sparse

00:05:01,460 --> 00:05:06,620
three-dimensional persistent hash map

00:05:03,229 --> 00:05:08,780
very similar to Google's BigTable -

00:05:06,620 --> 00:05:14,440
waits my only reply is this slightly

00:05:08,780 --> 00:05:14,440
infamous comic here it is again

00:05:24,720 --> 00:05:31,660
so the point is that this is a cost it

00:05:29,110 --> 00:05:34,060
cost for your developers and that shows

00:05:31,660 --> 00:05:35,380
up in the form of new abstractions right

00:05:34,060 --> 00:05:37,330
writing your own data store like this

00:05:35,380 --> 00:05:39,490
means that the boundary between the app

00:05:37,330 --> 00:05:42,190
and the database changes your app has to

00:05:39,490 --> 00:05:43,750
know and enforce schemas and purses and

00:05:42,190 --> 00:05:47,620
strategies kind of done - every last

00:05:43,750 --> 00:05:49,870
detail means that they went deliberately

00:05:47,620 --> 00:05:51,430
for eventual consistency like they said

00:05:49,870 --> 00:05:53,380
earlier you can't read things that you

00:05:51,430 --> 00:05:55,420
just wrote and maybe neither can other

00:05:53,380 --> 00:05:58,720
processes for some undefined amount of

00:05:55,420 --> 00:06:00,370
time they gave up the ability to do

00:05:58,720 --> 00:06:02,080
flexible queries against their data sets

00:06:00,370 --> 00:06:03,550
if you read the posts they say that you

00:06:02,080 --> 00:06:05,080
have to know your query patterns ahead

00:06:03,550 --> 00:06:06,540
of time because you only have a fixed

00:06:05,080 --> 00:06:09,250
set of indexes

00:06:06,540 --> 00:06:11,320
the system enforces mandatory sharding

00:06:09,250 --> 00:06:12,850
so you can't do global reads without a

00:06:11,320 --> 00:06:17,950
lot of extra work in your application

00:06:12,850 --> 00:06:19,300
and there's no joints and finally and

00:06:17,950 --> 00:06:21,340
probably most important for everybody

00:06:19,300 --> 00:06:23,770
who is not Eber or Google sized they

00:06:21,340 --> 00:06:26,470
gave up developer familiarity right so

00:06:23,770 --> 00:06:28,000
you can't hire fast for people who are

00:06:26,470 --> 00:06:31,060
going to work on this people aren't

00:06:28,000 --> 00:06:34,510
going to walk in knowing this and good

00:06:31,060 --> 00:06:40,780
luck using contractors so that was uber

00:06:34,510 --> 00:06:43,000
next Amazon a couple years ago a guy

00:06:40,780 --> 00:06:46,390
named Steve yogi quit Amazon and joined

00:06:43,000 --> 00:06:48,370
Google somewhere down the line after

00:06:46,390 --> 00:06:51,640
that he accidentally made public a long

00:06:48,370 --> 00:06:52,870
rant on Google+ about how Amazon was

00:06:51,640 --> 00:06:54,160
going to eat Google's lunch because

00:06:52,870 --> 00:06:56,830
Google didn't understand how to do

00:06:54,160 --> 00:06:59,440
platforms a large part of this post was

00:06:56,830 --> 00:07:00,730
devoted to how Amazon got their kind of

00:06:59,440 --> 00:07:03,610
their infamous for this their service

00:07:00,730 --> 00:07:05,440
architecture he says that in 2002 or so

00:07:03,610 --> 00:07:07,480
Jeff Bezos issue this company-wide

00:07:05,440 --> 00:07:10,840
mandate something along the lines of the

00:07:07,480 --> 00:07:12,370
following one all teams will henceforth

00:07:10,840 --> 00:07:16,000
expose their data and functionality

00:07:12,370 --> 00:07:17,350
through service interfaces two teams

00:07:16,000 --> 00:07:21,280
must communicate with each other through

00:07:17,350 --> 00:07:22,450
these interfaces there will be no other

00:07:21,280 --> 00:07:24,820
form of inter process communication

00:07:22,450 --> 00:07:27,430
allowed whatsoever and no linking no

00:07:24,820 --> 00:07:28,570
service calls sorry no uh no library

00:07:27,430 --> 00:07:30,760
linking you know connecting to other

00:07:28,570 --> 00:07:32,590
peoples databases the only communication

00:07:30,760 --> 00:07:33,340
allowed is via the documented service

00:07:32,590 --> 00:07:37,090
interfaces

00:07:33,340 --> 00:07:39,669
the network doesn't matter what

00:07:37,090 --> 00:07:42,660
technology they use HTTP CORBA because

00:07:39,669 --> 00:07:46,960
it was 2002 pub/sub custom protocols

00:07:42,660 --> 00:07:49,030
doesn't matter and all service

00:07:46,960 --> 00:07:50,710
interfaces with that exception must be

00:07:49,030 --> 00:07:52,960
designed from the ground up to be

00:07:50,710 --> 00:07:55,180
externalize Abul externalize Abul he

00:07:52,960 --> 00:07:57,610
remains exposed to the outside world ie

00:07:55,180 --> 00:08:00,280
to customers and sold as a product and

00:07:57,610 --> 00:08:03,220
if you can't guess this is where Amazon

00:08:00,280 --> 00:08:04,510
Web Services came from and finally

00:08:03,220 --> 00:08:05,889
because Jeff Bezos is serious about

00:08:04,510 --> 00:08:12,550
things anybody who doesn't do this will

00:08:05,889 --> 00:08:15,370
be fired Amazon was and is still very

00:08:12,550 --> 00:08:17,020
serious about this they also learn two

00:08:15,370 --> 00:08:19,540
things about the cost of doing things

00:08:17,020 --> 00:08:21,220
like this Steve came back later in his

00:08:19,540 --> 00:08:23,050
post to talk about this so some of the

00:08:21,220 --> 00:08:25,870
things that they learned or that quote

00:08:23,050 --> 00:08:27,760
pager escalation gets way harder because

00:08:25,870 --> 00:08:29,289
a ticket might bounce through 20 service

00:08:27,760 --> 00:08:33,669
calls before the real owner is

00:08:29,289 --> 00:08:35,289
identified but every single one of your

00:08:33,669 --> 00:08:38,520
peer teams suddenly becomes a potential

00:08:35,289 --> 00:08:40,930
denial of service attack err that

00:08:38,520 --> 00:08:44,200
monitoring and QA are the same thing

00:08:40,930 --> 00:08:45,970
because sometimes the only thing still

00:08:44,200 --> 00:08:47,680
functioning in the server is the little

00:08:45,970 --> 00:08:48,400
component that knows how to say I'm fine

00:08:47,680 --> 00:08:52,800
Roger Roger

00:08:48,400 --> 00:08:55,750
over and out in a cheery droid voice and

00:08:52,800 --> 00:08:57,610
that if you have all these services you

00:08:55,750 --> 00:08:59,650
won't be able to find any of them

00:08:57,610 --> 00:09:02,440
without a service discovery mechanism

00:08:59,650 --> 00:09:06,370
which relies on a service registry which

00:09:02,440 --> 00:09:09,160
is itself another service so with this

00:09:06,370 --> 00:09:10,240
as with kind of the uber example what

00:09:09,160 --> 00:09:11,529
I'm trying to say here is that having

00:09:10,240 --> 00:09:13,779
this sort of massively scalable

00:09:11,529 --> 00:09:15,940
infrastructure costs you in developer

00:09:13,779 --> 00:09:18,550
time because the mental model is that

00:09:15,940 --> 00:09:21,160
much more complicated and when you're a

00:09:18,550 --> 00:09:23,200
five-person shop a 50-person shop 200

00:09:21,160 --> 00:09:27,100
people you don't have a lot of developer

00:09:23,200 --> 00:09:29,459
time the way Google does so this point

00:09:27,100 --> 00:09:31,440
you might be saying I want to be Google

00:09:29,459 --> 00:09:34,120
I'd like you to keep in mind that

00:09:31,440 --> 00:09:37,270
aspiring to be Google is great but even

00:09:34,120 --> 00:09:39,820
Google wasn't Google overnight some

00:09:37,270 --> 00:09:42,820
numbers a lot this is an interview with

00:09:39,820 --> 00:09:43,990
Ben Gomez early Google engineer when I

00:09:42,820 --> 00:09:45,940
joined Google would take them about a

00:09:43,990 --> 00:09:47,139
month to crawl and build an index of 50

00:09:45,940 --> 00:09:50,319
million pages this was 19

00:09:47,139 --> 00:09:53,399
9 and they also at the time we're doing

00:09:50,319 --> 00:09:56,109
about 10,000 queries per day yep per day

00:09:53,399 --> 00:09:57,790
Google in 2006 published that they were

00:09:56,109 --> 00:10:00,249
doing that same 10,000 queries per

00:09:57,790 --> 00:10:03,730
second so you've got 7 years to do that

00:10:00,249 --> 00:10:05,410
growth Google in 2012 said that now

00:10:03,730 --> 00:10:07,389
takes them about one minute to index

00:10:05,410 --> 00:10:09,879
those 50 million pages so that's what

00:10:07,389 --> 00:10:13,209
the ramp looks like and even sometimes

00:10:09,879 --> 00:10:14,649
Google still is not Google I have it on

00:10:13,209 --> 00:10:15,819
good authority from people who work at

00:10:14,649 --> 00:10:17,410
Google that there are a lot of things

00:10:15,819 --> 00:10:19,389
internally that still run on just

00:10:17,410 --> 00:10:21,209
vanilla uncharted my sequel there just

00:10:19,389 --> 00:10:23,139
has some notes attached to it really

00:10:21,209 --> 00:10:27,279
they don't solve problems they don't

00:10:23,139 --> 00:10:29,589
have which goes to show that even boring

00:10:27,279 --> 00:10:34,269
quote unquote technology can go really

00:10:29,589 --> 00:10:35,829
far if you were at PyCon us this year we

00:10:34,269 --> 00:10:38,230
learned the Instagram is still a Django

00:10:35,829 --> 00:10:42,009
monolith and as far as I can tell they

00:10:38,230 --> 00:10:43,600
don't even seem to be using async IO my

00:10:42,009 --> 00:10:45,069
team at Tullio we still rely on

00:10:43,600 --> 00:10:47,109
horizontally sharted relational

00:10:45,069 --> 00:10:49,239
databases which is you know a 15 year

00:10:47,109 --> 00:10:52,629
old pattern at this point but for us it

00:10:49,239 --> 00:10:54,699
goes 20,000 mps 20,000 writes per second

00:10:52,629 --> 00:10:56,919
and we still get full acid so rightful

00:10:54,699 --> 00:10:58,299
consistency atomicity isolation and

00:10:56,919 --> 00:11:00,100
durability all those nice things that

00:10:58,299 --> 00:11:04,839
make it really easy to write apps it

00:11:00,100 --> 00:11:06,489
gives a database so yeah exponential

00:11:04,839 --> 00:11:08,379
growth feels slow at first rate if you

00:11:06,489 --> 00:11:10,149
and your product are lucky enough to

00:11:08,379 --> 00:11:12,879
experience the twin joys of irrational

00:11:10,149 --> 00:11:14,649
exuberance and exponential growth the

00:11:12,879 --> 00:11:16,149
low part of the curve is gentle right it

00:11:14,649 --> 00:11:18,549
gives you a warning you see it coming

00:11:16,149 --> 00:11:20,379
and second of all most importantly

00:11:18,549 --> 00:11:22,629
there's no single point where your

00:11:20,379 --> 00:11:24,639
entire app is just going to say oh no

00:11:22,629 --> 00:11:26,889
10,000 requests I can't possibly do that

00:11:24,639 --> 00:11:28,239
and just die irrevocably that doesn't

00:11:26,889 --> 00:11:30,549
happen right you start to feel the pain

00:11:28,239 --> 00:11:32,439
in your mind you nights get slow it

00:11:30,549 --> 00:11:35,079
comes on you you can see it coming and

00:11:32,439 --> 00:11:37,589
you have time to respond so with that in

00:11:35,079 --> 00:11:40,779
mind if you do start hitting that ramp

00:11:37,589 --> 00:11:43,509
iterate find the thing that's most on

00:11:40,779 --> 00:11:45,639
fire evolve it or replace it to cope

00:11:43,509 --> 00:11:51,190
with your new scale and then go find the

00:11:45,639 --> 00:11:53,480
next most on fire thing all right

00:11:51,190 --> 00:11:55,160
so at this point I hope some of you are

00:11:53,480 --> 00:11:58,790
throwing to think well okay fine I'm not

00:11:55,160 --> 00:12:00,500
Google yet so what what should I worry

00:11:58,790 --> 00:12:02,930
about instead and so I have some

00:12:00,500 --> 00:12:04,520
guidelines for you on how to focus on

00:12:02,930 --> 00:12:06,500
building apps that are easy for you to

00:12:04,520 --> 00:12:09,590
develop on and easy to scale at your

00:12:06,500 --> 00:12:11,030
current scale first up user Trust is the

00:12:09,590 --> 00:12:12,920
most important thing you're never going

00:12:11,030 --> 00:12:14,690
to get to a billion users if you burn

00:12:12,920 --> 00:12:17,240
them by leaking their credit card

00:12:14,690 --> 00:12:20,510
numbers right maintain their trust meet

00:12:17,240 --> 00:12:23,000
their needs you also really want fast

00:12:20,510 --> 00:12:25,070
and easy development developer time is

00:12:23,000 --> 00:12:27,320
your most precious resource so don't

00:12:25,070 --> 00:12:32,180
waste it you might be able to move fast

00:12:27,320 --> 00:12:34,670
without breaking things you want quiet

00:12:32,180 --> 00:12:36,830
on call I'm gonna go into this a little

00:12:34,670 --> 00:12:39,650
bit the tech industry has a problem with

00:12:36,830 --> 00:12:41,360
on call and pager rotations if you look

00:12:39,650 --> 00:12:43,130
at that people in the world not just a

00:12:41,360 --> 00:12:45,050
tech industry everybody out of all seven

00:12:43,130 --> 00:12:47,690
billion of us who do on call correctly

00:12:45,050 --> 00:12:50,420
it it's places where life safety is

00:12:47,690 --> 00:12:52,280
critical right so hospitals nuclear

00:12:50,420 --> 00:12:56,450
power plants firefighters and so on

00:12:52,280 --> 00:12:59,600
let's do some math they're 168 hours in

00:12:56,450 --> 00:13:02,810
a week usually we want a 40-hour work

00:12:59,600 --> 00:13:05,030
week union spot for a write for this do

00:13:02,810 --> 00:13:06,500
you divide out that's 4.2 people we

00:13:05,030 --> 00:13:10,850
can't have a fractional person so we

00:13:06,500 --> 00:13:13,760
have five now multiply the other way and

00:13:10,850 --> 00:13:15,350
you have 32 hours left for a PTO six

00:13:13,760 --> 00:13:16,520
time anything else that might come up

00:13:15,350 --> 00:13:18,890
and take somebody out of your rotation

00:13:16,520 --> 00:13:22,780
for a little bit so let's call it sixty

00:13:18,890 --> 00:13:25,850
safe right show of hands if you do this

00:13:22,780 --> 00:13:28,850
for the video there are zero hands up

00:13:25,850 --> 00:13:31,250
because this is expensive right that's

00:13:28,850 --> 00:13:34,340
six times zero load your cost just to

00:13:31,250 --> 00:13:37,100
get a real on-call rotation so alright

00:13:34,340 --> 00:13:40,760
we're not going to do this how do we

00:13:37,100 --> 00:13:42,470
make on-call less awful first one of the

00:13:40,760 --> 00:13:44,360
things that has come out of DevOps

00:13:42,470 --> 00:13:47,710
culture is that employing humans to be

00:13:44,360 --> 00:13:50,480
robots is bad so don't do it

00:13:47,710 --> 00:13:52,820
your on-calls job hopefully an ideal

00:13:50,480 --> 00:13:55,640
world is to get paged at 2:00 a.m. maybe

00:13:52,820 --> 00:13:57,770
once a week hopefully once a month find

00:13:55,640 --> 00:14:01,010
the thing that broke and make it never

00:13:57,770 --> 00:14:02,540
do that again when people are on call

00:14:01,010 --> 00:14:04,370
you need to give them a time in space to

00:14:02,540 --> 00:14:05,540
do this empower them to fix

00:14:04,370 --> 00:14:10,130
things instead of just patching them

00:14:05,540 --> 00:14:11,750
over on a related note you want

00:14:10,130 --> 00:14:13,970
appropriate availability and scalability

00:14:11,750 --> 00:14:17,150
for your scale you're not going to go

00:14:13,970 --> 00:14:18,890
from 10,000 requests today frog to

00:14:17,150 --> 00:14:20,600
10,000 per second overnight right like I

00:14:18,890 --> 00:14:21,560
said it took Google seven years

00:14:20,600 --> 00:14:24,140
you're not even need to get there in one

00:14:21,560 --> 00:14:26,510
year you should have an obvious path of

00:14:24,140 --> 00:14:29,390
to scaling your app by a factor of 10

00:14:26,510 --> 00:14:30,620
and a rough line of sight a kind of

00:14:29,390 --> 00:14:34,190
notion of how you're going to get to a

00:14:30,620 --> 00:14:36,020
factor of 100 and think about just how

00:14:34,190 --> 00:14:38,960
available and reliable you need to be

00:14:36,020 --> 00:14:40,760
are you a telecom company or did you

00:14:38,960 --> 00:14:42,230
write an office appointment system for

00:14:40,760 --> 00:14:44,240
doctors offices that's only ever going

00:14:42,230 --> 00:14:48,260
to be used between the hours of 8 & 5

00:14:44,240 --> 00:14:50,810
we'll come back to this so with all that

00:14:48,260 --> 00:14:52,490
in mind Andrew pointed out before the

00:14:50,810 --> 00:14:54,350
break that you don't have to reinvent

00:14:52,490 --> 00:14:57,440
the wheel I'm going to say that instead

00:14:54,350 --> 00:14:59,960
you should build Bauer's so the birds

00:14:57,440 --> 00:15:01,490
are back bowerbirds like I said they

00:14:59,960 --> 00:15:02,900
build structures from materials they

00:15:01,490 --> 00:15:06,650
find in their environment to attract

00:15:02,900 --> 00:15:08,450
mates we want to build software and the

00:15:06,650 --> 00:15:10,490
modern software ecosystem open source

00:15:08,450 --> 00:15:13,850
and hosted everything's out there is our

00:15:10,490 --> 00:15:15,230
found environment we want our goal is to

00:15:13,850 --> 00:15:17,300
have healthy relationships with our

00:15:15,230 --> 00:15:19,790
users and our developers so what we

00:15:17,300 --> 00:15:21,950
should do is find what we need to solve

00:15:19,790 --> 00:15:23,330
there our subproblems combine it using

00:15:21,950 --> 00:15:25,760
our own special business logic that's

00:15:23,330 --> 00:15:27,709
why we're doing this and basically build

00:15:25,760 --> 00:15:30,589
this beautiful technological Bower to

00:15:27,709 --> 00:15:32,089
make our users happy so first of the

00:15:30,589 --> 00:15:33,860
time today I'm going to talk about how

00:15:32,089 --> 00:15:36,529
to make technical decisions within this

00:15:33,860 --> 00:15:39,790
framework and then how to run your team

00:15:36,529 --> 00:15:42,050
in business with all this in mind town

00:15:39,790 --> 00:15:45,260
so first let's talk about picking

00:15:42,050 --> 00:15:47,630
technologies so we need a bottle cap it

00:15:45,260 --> 00:15:49,070
seems according to this bird what does

00:15:47,630 --> 00:15:50,930
this bottle cap it could be a database

00:15:49,070 --> 00:15:52,670
could be a browser framework web server

00:15:50,930 --> 00:15:54,350
it doesn't really matter the point is

00:15:52,670 --> 00:15:56,180
generic Oh what do we want to think

00:15:54,350 --> 00:15:59,180
about when we're doing this how do we

00:15:56,180 --> 00:16:02,779
find our bottle caps Jen this morning

00:15:59,180 --> 00:16:04,550
said JavaScript fatigue is a real thing

00:16:02,779 --> 00:16:06,230
right because there's it's a new input

00:16:04,550 --> 00:16:07,690
new environment new community lots of

00:16:06,230 --> 00:16:10,790
stuff comes on the scene very quickly

00:16:07,690 --> 00:16:13,070
avoid this you don't have to try every

00:16:10,790 --> 00:16:14,930
new thing that comes along so with that

00:16:13,070 --> 00:16:16,430
in mind you might want to pick things

00:16:14,930 --> 00:16:17,550
based on the maturity of the projects

00:16:16,430 --> 00:16:19,769
Jango is

00:16:17,550 --> 00:16:22,140
good example here things that are not

00:16:19,769 --> 00:16:23,940
brand speaking new and but on the other

00:16:22,140 --> 00:16:27,080
side things are not in the Apache attic

00:16:23,940 --> 00:16:29,670
which is where they put retired projects

00:16:27,080 --> 00:16:31,459
you also want maintain ership for that

00:16:29,670 --> 00:16:34,230
piece of software you're going to adopt

00:16:31,459 --> 00:16:35,670
importantly it should not be solely by

00:16:34,230 --> 00:16:38,610
the company that wrote it the first time

00:16:35,670 --> 00:16:40,440
before they open sourced it Apache here

00:16:38,610 --> 00:16:41,459
if the front is the standard really if

00:16:40,440 --> 00:16:44,339
the project isn't big enough for

00:16:41,459 --> 00:16:46,829
something about so unlike the DSF and

00:16:44,339 --> 00:16:48,720
also the flip side of maintainer ship is

00:16:46,829 --> 00:16:53,070
was really release velocity look like

00:16:48,720 --> 00:16:55,860
how fast are updates coming out alright

00:16:53,070 --> 00:16:56,450
security this is big there were talks on

00:16:55,860 --> 00:16:59,519
this today

00:16:56,450 --> 00:17:00,899
usage search the database for CVS so the

00:16:59,519 --> 00:17:03,959
exploits that are known against the

00:17:00,899 --> 00:17:06,360
project how many were they were they

00:17:03,959 --> 00:17:09,150
resolved at all how quickly were they

00:17:06,360 --> 00:17:11,490
resolved and when patches come out for

00:17:09,150 --> 00:17:12,929
critical security phones how hard is it

00:17:11,490 --> 00:17:14,910
going to be a patch this thing right are

00:17:12,929 --> 00:17:17,100
we talking about just bump some pointers

00:17:14,910 --> 00:17:21,540
on your CDN or redeploy your entire

00:17:17,100 --> 00:17:22,860
database to your also stability there's

00:17:21,540 --> 00:17:25,829
two types here right so first there's

00:17:22,860 --> 00:17:27,360
API stability we all love semantic

00:17:25,829 --> 00:17:30,300
versioning some people do it better than

00:17:27,360 --> 00:17:31,860
others it is version 2.0 going to come

00:17:30,300 --> 00:17:33,510
out tomorrow and offer you great

00:17:31,860 --> 00:17:36,120
features at the cost of breaking every

00:17:33,510 --> 00:17:37,950
integration you have and the other type

00:17:36,120 --> 00:17:40,020
of stability is system stability right

00:17:37,950 --> 00:17:41,700
so does the database actually database

00:17:40,020 --> 00:17:46,350
or does it just pretend it took your

00:17:41,700 --> 00:17:47,790
data and drop it on the floor the

00:17:46,350 --> 00:17:49,590
ecosystem of the project is also really

00:17:47,790 --> 00:17:51,419
important to think about is there

00:17:49,590 --> 00:17:54,120
library support for your language of

00:17:51,419 --> 00:17:56,010
choice our developers aware and familiar

00:17:54,120 --> 00:17:57,510
with this thing can you hire people fast

00:17:56,010 --> 00:17:59,070
enough right that this is the opposite

00:17:57,510 --> 00:18:00,750
of what we were hit with scheme OS and

00:17:59,070 --> 00:18:02,160
building your own stuff if you hire

00:18:00,750 --> 00:18:03,690
somebody how fast they're going to ramp

00:18:02,160 --> 00:18:05,940
up on your particular pieces of there's

00:18:03,690 --> 00:18:08,280
no technology that you've chosen can you

00:18:05,940 --> 00:18:10,470
find consultants to know it so picking

00:18:08,280 --> 00:18:12,600
technology that everybody knows even if

00:18:10,470 --> 00:18:13,919
it's quote-unquote boring means that you

00:18:12,600 --> 00:18:16,010
don't have to wait three months for your

00:18:13,919 --> 00:18:19,890
new devs to be productive on your stack

00:18:16,010 --> 00:18:22,200
and out of the box eNOS this is Josh

00:18:19,890 --> 00:18:25,260
Simmons used this in a talk he gave I

00:18:22,200 --> 00:18:27,870
think at a never much conference but

00:18:25,260 --> 00:18:30,660
doesn't matter the friction of using

00:18:27,870 --> 00:18:31,470
this system right what's the first 30

00:18:30,660 --> 00:18:33,780
minutes that

00:18:31,470 --> 00:18:35,640
you experience with this thing like are

00:18:33,780 --> 00:18:36,809
the docker files to get it deployed to

00:18:35,640 --> 00:18:38,730
your infrastructure what's it like when

00:18:36,809 --> 00:18:42,840
you download it to your Mac and unpack

00:18:38,730 --> 00:18:43,650
it how easy is it to turn on and they

00:18:42,840 --> 00:18:49,049
have documentation

00:18:43,650 --> 00:18:51,809
does it exist is it up to date is it

00:18:49,049 --> 00:18:53,370
comprehensive searchable discoverable

00:18:51,809 --> 00:18:55,890
there's not really important things when

00:18:53,370 --> 00:18:58,020
you figure out that a the kind of happy

00:18:55,890 --> 00:19:00,179
path that's in the how the QuickStart on

00:18:58,020 --> 00:19:01,470
the front page of the site is no longer

00:19:00,179 --> 00:19:03,539
exactly what you need when you need to

00:19:01,470 --> 00:19:05,179
deviate from that you want comprehensive

00:19:03,539 --> 00:19:08,760
API Docs

00:19:05,179 --> 00:19:10,400
all right support and consultants can

00:19:08,760 --> 00:19:12,330
you get a support contact from somebody

00:19:10,400 --> 00:19:14,820
because when your post first instance

00:19:12,330 --> 00:19:15,900
dies at 1:00 a.m. and turns out your

00:19:14,820 --> 00:19:19,130
backups are less three months are

00:19:15,900 --> 00:19:22,440
corrupt you will probably want some help

00:19:19,130 --> 00:19:24,480
and finally there are things to be aware

00:19:22,440 --> 00:19:27,299
of when it comes to licensing for

00:19:24,480 --> 00:19:29,610
example GPL software cannot go in the

00:19:27,299 --> 00:19:30,270
Apple App Store or more recently in the

00:19:29,610 --> 00:19:32,100
news

00:19:30,270 --> 00:19:33,809
Apaches foundation declared that

00:19:32,100 --> 00:19:36,360
Facebook's license and patent grant

00:19:33,809 --> 00:19:38,010
model was no good panic ensued until

00:19:36,360 --> 00:19:42,000
Facebook releasing this to react and

00:19:38,010 --> 00:19:43,770
rocks TV so that's things you should

00:19:42,000 --> 00:19:45,140
think about when baking open source

00:19:43,770 --> 00:19:48,000
software and also software in general

00:19:45,140 --> 00:19:49,710
you can also buy software right so

00:19:48,000 --> 00:19:51,809
building things ourselves from scratch

00:19:49,710 --> 00:19:53,820
or finding open source projects aren't

00:19:51,809 --> 00:19:56,700
our only choices we can pay money for

00:19:53,820 --> 00:19:57,840
people to solve problems for us if we

00:19:56,700 --> 00:19:59,220
think we want to do that how should we

00:19:57,840 --> 00:20:00,870
decide how should we decide whether we

00:19:59,220 --> 00:20:03,110
watch they want to pay for that hosted

00:20:00,870 --> 00:20:07,320
solution or to build something ourselves

00:20:03,110 --> 00:20:09,030
what's it going to cost right how long

00:20:07,320 --> 00:20:10,440
is it going to take and what would you

00:20:09,030 --> 00:20:13,110
lose in the meantime but you're not

00:20:10,440 --> 00:20:14,429
having it tomorrow and there's two costs

00:20:13,110 --> 00:20:15,960
to think about here not only do you not

00:20:14,429 --> 00:20:17,549
get the shiny monitoring solution

00:20:15,960 --> 00:20:19,110
tomorrow you have to choose something

00:20:17,549 --> 00:20:20,700
else on your product roadmap not to

00:20:19,110 --> 00:20:22,230
build for the next month because you're

00:20:20,700 --> 00:20:26,280
using up your developer time to build

00:20:22,230 --> 00:20:28,230
your monetary solution and how hard is

00:20:26,280 --> 00:20:30,690
it to replace right so if the vendor

00:20:28,230 --> 00:20:32,100
goes down what happens is this our

00:20:30,690 --> 00:20:33,360
source control and we just have a copy

00:20:32,100 --> 00:20:35,039
to get repost somewhere else that we can

00:20:33,360 --> 00:20:37,679
put onto whatever you find to replace it

00:20:35,039 --> 00:20:38,429
or was this our platform vendor what

00:20:37,679 --> 00:20:42,960
happens if they go out of business

00:20:38,429 --> 00:20:45,030
business okay so that's a lot about

00:20:42,960 --> 00:20:45,510
technology how to select it how to use

00:20:45,030 --> 00:20:48,130
it

00:20:45,510 --> 00:20:49,930
like to talk about relationships and our

00:20:48,130 --> 00:20:52,900
services and our projects how should we

00:20:49,930 --> 00:20:54,550
run things from here out what should our

00:20:52,900 --> 00:20:56,080
relationships our customers look like

00:20:54,550 --> 00:20:57,430
because we care about our users a lot

00:20:56,080 --> 00:20:59,530
because we want to have a billion of

00:20:57,430 --> 00:21:02,260
them right that's how we get to Google

00:20:59,530 --> 00:21:04,630
scale so first let's go back to what I

00:21:02,260 --> 00:21:07,630
said earlier about uptime and set some

00:21:04,630 --> 00:21:10,330
reasonable goals here comes some math

00:21:07,630 --> 00:21:12,940
again two nines of uptime ninety-nine

00:21:10,330 --> 00:21:14,380
percent of time is three point six five

00:21:12,940 --> 00:21:16,720
days per year okay that one was obvious

00:21:14,380 --> 00:21:19,180
seven point two hours per month of

00:21:16,720 --> 00:21:20,740
unplanned outages one point six hours

00:21:19,180 --> 00:21:24,310
per week or fourteen and a half minutes

00:21:20,740 --> 00:21:25,480
per day this is reasonably doable even

00:21:24,310 --> 00:21:26,680
if you're just kind of taking your

00:21:25,480 --> 00:21:28,330
credit card out and paying for machines

00:21:26,680 --> 00:21:31,540
in Amazon and not thinking about it too

00:21:28,330 --> 00:21:33,460
much three lines you have to really have

00:21:31,540 --> 00:21:35,350
some intent to get there that's 8 and

00:21:33,460 --> 00:21:37,120
3/4 hours over the out of the year you

00:21:35,350 --> 00:21:38,590
can be down less than an hour per month

00:21:37,120 --> 00:21:41,650
10 minutes a week or one and a half

00:21:38,590 --> 00:21:43,960
minutes per day four nines is where it

00:21:41,650 --> 00:21:46,600
starts to get really difficult and it's

00:21:43,960 --> 00:21:48,250
hard to find hosted companies it'll give

00:21:46,600 --> 00:21:49,990
you a contracts with an SLA for four

00:21:48,250 --> 00:21:54,370
nights even telecom usually goes for

00:21:49,990 --> 00:21:56,140
three and a half quote-unquote four

00:21:54,370 --> 00:21:59,160
nines is less than an hour per year or

00:21:56,140 --> 00:22:02,650
nine seconds of downtime per day and

00:21:59,160 --> 00:22:04,710
finally five nines is 5.26 minutes per

00:22:02,650 --> 00:22:07,870
year in less than a second per day

00:22:04,710 --> 00:22:09,640
things that are implied by this are they

00:22:07,870 --> 00:22:11,530
if you can have nine seconds of downtime

00:22:09,640 --> 00:22:13,450
per day at the four nines level you had

00:22:11,530 --> 00:22:16,300
any people detect and recover from

00:22:13,450 --> 00:22:19,360
failure in nine seconds you can't have a

00:22:16,300 --> 00:22:24,190
human in the loop so keep that in mind

00:22:19,360 --> 00:22:26,410
and set goals appropriately you want to

00:22:24,190 --> 00:22:27,760
be able to survive failure if you

00:22:26,410 --> 00:22:30,430
inevitably do have that outage it's

00:22:27,760 --> 00:22:32,430
coming how are we going to get through

00:22:30,430 --> 00:22:35,530
it and keep your customer base around

00:22:32,430 --> 00:22:37,030
first you need to have empathy so

00:22:35,530 --> 00:22:37,980
understand what it means to your

00:22:37,030 --> 00:22:40,090
customer is when you're unavailable

00:22:37,980 --> 00:22:42,520
something I keep in mind because I work

00:22:40,090 --> 00:22:44,200
at Twilio there are nonprofits that use

00:22:42,520 --> 00:22:45,550
the Tullio platform for doing things

00:22:44,200 --> 00:22:48,670
like rescuing the victims of human

00:22:45,550 --> 00:22:51,520
trafficking via SMS hotline so when we

00:22:48,670 --> 00:22:53,020
go down I feel it and I know that that's

00:22:51,520 --> 00:22:53,700
important because their lives hanging in

00:22:53,020 --> 00:22:57,730
the balance

00:22:53,700 --> 00:22:59,230
so keep keep it in mind but don't let

00:22:57,730 --> 00:23:00,880
that block you right

00:22:59,230 --> 00:23:01,900
when that comes up remember why you're

00:23:00,880 --> 00:23:04,090
doing what you're doing that is

00:23:01,900 --> 00:23:05,559
important or not important that's the

00:23:04,090 --> 00:23:08,919
case maybe right if you have Instagram

00:23:05,559 --> 00:23:09,910
for cats maybe the cats don't care but

00:23:08,919 --> 00:23:12,370
keep in mind right remember that

00:23:09,910 --> 00:23:13,540
somebody wants to use your thing you let

00:23:12,370 --> 00:23:16,450
that drive you and then get back to the

00:23:13,540 --> 00:23:18,669
problem of actually solving it and using

00:23:16,450 --> 00:23:20,980
that empathy set expectations so manage

00:23:18,669 --> 00:23:21,970
expectations ahead of time so make sure

00:23:20,980 --> 00:23:25,120
that you're not committing to an

00:23:21,970 --> 00:23:27,910
Escalade you can't deliver and as always

00:23:25,120 --> 00:23:31,020
under promising and over delivering is a

00:23:27,910 --> 00:23:34,570
good strategy never fails

00:23:31,020 --> 00:23:36,970
you should also over communicate talk to

00:23:34,570 --> 00:23:39,309
your users you should have a Status page

00:23:36,970 --> 00:23:41,080
you should update it when you even think

00:23:39,309 --> 00:23:43,150
that there might be a problem not when

00:23:41,080 --> 00:23:49,030
your customers tell you and speaking of

00:23:43,150 --> 00:23:50,530
status pages don't do this yes this this

00:23:49,030 --> 00:23:52,809
actually happened this is February when

00:23:50,530 --> 00:23:54,010
Amazon went down the post-mortem

00:23:52,809 --> 00:23:55,690
included the fact that they couldn't

00:23:54,010 --> 00:23:57,220
update the status page because the

00:23:55,690 --> 00:24:01,210
status page was dependent on their own

00:23:57,220 --> 00:24:02,500
technology if you're hosted on Amazon

00:24:01,210 --> 00:24:04,450
put your Sata's page on Google cloud

00:24:02,500 --> 00:24:07,770
platform if you're on Google put it on

00:24:04,450 --> 00:24:10,660
Azure right and so on

00:24:07,770 --> 00:24:12,070
another amazing case of radical

00:24:10,660 --> 00:24:14,169
transparency and how to handle outages

00:24:12,070 --> 00:24:16,330
when gitlab went down they had a major

00:24:14,169 --> 00:24:19,299
incident somebody basically accidentally

00:24:16,330 --> 00:24:20,440
at the entire database and what they did

00:24:19,299 --> 00:24:22,510
was they actually put up a Google

00:24:20,440 --> 00:24:23,830
document and updated their incident

00:24:22,510 --> 00:24:25,929
notes right this was an engineering team

00:24:23,830 --> 00:24:27,490
communicating with each other in front

00:24:25,929 --> 00:24:29,650
of the entire public in front of the

00:24:27,490 --> 00:24:31,450
entire customer base so doing that

00:24:29,650 --> 00:24:32,980
restored a huge amount of their customer

00:24:31,450 --> 00:24:33,970
trust right not only can you see that

00:24:32,980 --> 00:24:35,770
they're aware that there's a problem

00:24:33,970 --> 00:24:38,080
you're watching exactly what they're

00:24:35,770 --> 00:24:40,630
doing to help fix it so yeah

00:24:38,080 --> 00:24:43,360
over-communicate staff up your social

00:24:40,630 --> 00:24:45,340
media step up puts people staffing your

00:24:43,360 --> 00:24:47,370
Zendesk or whatever support solution

00:24:45,340 --> 00:24:49,660
you're using and then listen to them and

00:24:47,370 --> 00:24:52,660
also measure their performance because

00:24:49,660 --> 00:24:54,880
uptime isn't the only SLA when tickets

00:24:52,660 --> 00:24:56,470
come in you want to measure how fast is

00:24:54,880 --> 00:24:57,669
how long it takes you to respond to

00:24:56,470 --> 00:24:59,470
those tickets for the first time the

00:24:57,669 --> 00:25:01,510
first response time how long it takes

00:24:59,470 --> 00:25:04,750
you to actually resolve the issue for

00:25:01,510 --> 00:25:06,130
the customer and finally the overall

00:25:04,750 --> 00:25:07,659
satisfaction score reaches on the scale

00:25:06,130 --> 00:25:11,010
of one to five did we actually solve

00:25:07,659 --> 00:25:11,010
your problem for you or we useless

00:25:11,290 --> 00:25:15,430
all right and then disaster recovery

00:25:13,390 --> 00:25:18,520
because worse than outages disasters are

00:25:15,430 --> 00:25:22,120
going to happen you should identify your

00:25:18,520 --> 00:25:23,260
fault domains and this is if you're on

00:25:22,120 --> 00:25:24,550
Amazon right we'll use them as an

00:25:23,260 --> 00:25:27,700
example because I do a lot of work on

00:25:24,550 --> 00:25:28,750
them is the Amazon node that hosts your

00:25:27,700 --> 00:25:30,400
failure domain right do you wanna be

00:25:28,750 --> 00:25:31,620
able to tolerate your hosts disappearing

00:25:30,400 --> 00:25:33,550
pro-forma do you probably should do this

00:25:31,620 --> 00:25:35,290
you want to tolerate the entire

00:25:33,550 --> 00:25:36,880
availability zone disappearing out from

00:25:35,290 --> 00:25:38,920
underneath you how about the entire

00:25:36,880 --> 00:25:41,230
region and again there are costs and

00:25:38,920 --> 00:25:43,630
trade-offs here right so what's

00:25:41,230 --> 00:25:47,740
reasonable for you to architect for to

00:25:43,630 --> 00:25:51,690
build around failures at and practice

00:25:47,740 --> 00:25:53,380
please exercise your favor mechanisms

00:25:51,690 --> 00:25:55,510
exercise your backup recover a

00:25:53,380 --> 00:25:58,540
particular test your backups ahead of

00:25:55,510 --> 00:25:59,080
time under controlled conditions you'll

00:25:58,540 --> 00:26:04,510
thank me later

00:25:59,080 --> 00:26:06,150
and please do consider security there

00:26:04,510 --> 00:26:09,130
are a lot of really great resources here

00:26:06,150 --> 00:26:11,500
first up is the open web application

00:26:09,130 --> 00:26:13,150
security project go to the website they

00:26:11,500 --> 00:26:14,950
have immensely useful guides to just

00:26:13,150 --> 00:26:16,600
about everything they have a list of the

00:26:14,950 --> 00:26:17,980
top ten threats that happen and

00:26:16,600 --> 00:26:19,870
vulnerabilities that are exploited

00:26:17,980 --> 00:26:21,550
against web applications you should read

00:26:19,870 --> 00:26:23,320
it and be familiar with them so you can

00:26:21,550 --> 00:26:25,750
build against them and keep them out of

00:26:23,320 --> 00:26:28,360
your systems as you go know your threat

00:26:25,750 --> 00:26:30,010
model so what this means is you need to

00:26:28,360 --> 00:26:32,230
understand what the valuable assets are

00:26:30,010 --> 00:26:33,970
inside your system what are people going

00:26:32,230 --> 00:26:35,440
to go after if they do break into your

00:26:33,970 --> 00:26:36,150
data center if they do break into your

00:26:35,440 --> 00:26:38,830
environment

00:26:36,150 --> 00:26:40,270
know the vectors of attack how are

00:26:38,830 --> 00:26:42,670
people going to get into your systems

00:26:40,270 --> 00:26:43,630
and then with those things in mind make

00:26:42,670 --> 00:26:46,420
sure you can design effective

00:26:43,630 --> 00:26:49,450
mitigations so if we anticipate that

00:26:46,420 --> 00:26:51,970
people might try to inject sequel into

00:26:49,450 --> 00:26:53,950
our forms we should put a sanitizer in

00:26:51,970 --> 00:26:55,840
place so we don't allow that sequel

00:26:53,950 --> 00:26:57,010
strings to go directly to the database

00:26:55,840 --> 00:26:59,200
and we should probably use parameters

00:26:57,010 --> 00:27:03,340
queries right so how are you going to

00:26:59,200 --> 00:27:04,510
block things as as they come up some

00:27:03,340 --> 00:27:08,680
really obvious things don't check your

00:27:04,510 --> 00:27:11,530
credentials and to get and also don't do

00:27:08,680 --> 00:27:13,990
this this is this is a real paper these

00:27:11,530 --> 00:27:16,990
people scan the internet and they found

00:27:13,990 --> 00:27:19,470
several thousands of MongoDB s with zero

00:27:16,990 --> 00:27:22,700
access controls hosting production data

00:27:19,470 --> 00:27:25,299
don't do that don't be in those papers

00:27:22,700 --> 00:27:28,239
and just like everything else

00:27:25,299 --> 00:27:30,289
communicate security breaches are

00:27:28,239 --> 00:27:31,850
serious but they're also just like any

00:27:30,289 --> 00:27:32,960
other incident the longer you keep them

00:27:31,850 --> 00:27:34,519
secret the longer you don't talk about

00:27:32,960 --> 00:27:36,049
them the worse that that clash is going

00:27:34,519 --> 00:27:37,519
to be and you're going to lose those

00:27:36,049 --> 00:27:39,590
users and you're never going to get to

00:27:37,519 --> 00:27:40,369
Google scale talk about what was

00:27:39,590 --> 00:27:42,919
compromised

00:27:40,369 --> 00:27:45,200
talk about how it was compromised for

00:27:42,919 --> 00:27:46,999
how many people and answer whether it's

00:27:45,200 --> 00:27:49,899
going to happen again and there's really

00:27:46,999 --> 00:27:52,639
one only one answer here which is know

00:27:49,899 --> 00:27:54,590
so that's that that was a lot of stuff I

00:27:52,639 --> 00:27:56,269
hope that my advice helps you get more

00:27:54,590 --> 00:27:59,059
content and comfortable no matter how

00:27:56,269 --> 00:28:01,309
big or small your system is we might not

00:27:59,059 --> 00:28:03,019
all be Google or Facebook but we can all

00:28:01,309 --> 00:28:05,059
learn from their paths to the dizzying

00:28:03,019 --> 00:28:07,549
heights of scale and we can all adopt

00:28:05,059 --> 00:28:09,409
code and ideas from them and everybody

00:28:07,549 --> 00:28:11,419
else who came before us and to build

00:28:09,409 --> 00:28:14,509
amazing noob hours of technology for our

00:28:11,419 --> 00:28:16,129
users one final note is that before I

00:28:14,509 --> 00:28:19,100
thought of the bowerbird is a metaphor

00:28:16,129 --> 00:28:22,629
for this topic for this talk the only

00:28:19,100 --> 00:28:25,850
other thing I had going was dung beetles

00:28:22,629 --> 00:28:29,690
so aren't you glad that this was a half

00:28:25,850 --> 00:28:32,980
hour of bird pictures instead all right

00:28:29,690 --> 00:28:32,980
thank you happy about our building

00:28:44,040 --> 00:28:48,070
thank you very much Sam

00:28:46,000 --> 00:28:50,320
wonderful presentation thank you for

00:28:48,070 --> 00:28:51,400
sharing your experiences and advising

00:28:50,320 --> 00:28:53,500
what we shouldn't should we shouldn't be

00:28:51,400 --> 00:28:56,440
looking for again by way of thank you

00:28:53,500 --> 00:28:58,190
complimentary bug and thank you thanks

00:28:56,440 --> 00:29:05,640
thank you very much Sam

00:28:58,190 --> 00:29:05,640

YouTube URL: https://www.youtube.com/watch?v=1bApndiHBBw


