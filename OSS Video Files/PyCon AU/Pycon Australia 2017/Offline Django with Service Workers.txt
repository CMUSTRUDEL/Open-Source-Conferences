Title: Offline Django with Service Workers
Publication date: 2017-08-04
Playlist: Pycon Australia 2017
Description: 
	Raphael Merx

http://2017.pycon-au.org/schedule/presentation/49/

#pyconau

This talk was given at PyCon Australia 2017 which was held from 3-8 August, 2017 in Melbourne, Victoria.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2017, we're returning to Melbourne, bringing together students, enthusiasts, and professionals with a love of Python from around Australia, and from all over the World. 

August 3-8 2017, Melbourne, Victoria

Python, PyCon, PyConAU
Captions: 
	00:00:07,670 --> 00:00:12,030
ok ladies and gentlemen one more talk

00:00:10,650 --> 00:00:14,219
decision this time around we have

00:00:12,030 --> 00:00:16,080
Raphael mercs Rafa discovered Python in

00:00:14,219 --> 00:00:17,160
high school and has never looked back he

00:00:16,080 --> 00:00:19,140
used Python for academic research

00:00:17,160 --> 00:00:20,550
machine learning and most recently in

00:00:19,140 --> 00:00:22,710
web development after working for

00:00:20,550 --> 00:00:24,060
startups in California he moved to team

00:00:22,710 --> 00:00:26,400
on this day where he works on aid

00:00:24,060 --> 00:00:28,050
projects for catalpa international he is

00:00:26,400 --> 00:00:29,670
a django contributor and a general open

00:00:28,050 --> 00:00:31,619
source enthusiast and when the temari's

00:00:29,670 --> 00:00:33,059
internet internet goes down you can find

00:00:31,619 --> 00:00:34,920
him free diving and practicing his

00:00:33,059 --> 00:00:42,960
broken tattooin everyone please welcome

00:00:34,920 --> 00:00:44,820
to the stage Rafael mercs all right

00:00:42,960 --> 00:00:47,700
hello thank you everyone so yeah a lot

00:00:44,820 --> 00:00:50,760
has been said I'm Rafa and in my day job

00:00:47,700 --> 00:00:54,449
I do work for catalpa so we're about 15

00:00:50,760 --> 00:00:56,699
people now and we're an NGO we design

00:00:54,449 --> 00:01:00,149
and we build software for development

00:00:56,699 --> 00:01:02,910
projects in itself and project we do

00:01:00,149 --> 00:01:05,670
work entirely using Python and Django

00:01:02,910 --> 00:01:08,220
for the back end and the front end has

00:01:05,670 --> 00:01:11,310
been a mix of like mobile applications

00:01:08,220 --> 00:01:12,900
and riot J's for the most part and we're

00:01:11,310 --> 00:01:15,810
in it based in timor-leste so

00:01:12,900 --> 00:01:19,229
timor-leste it's about 700 kilometers

00:01:15,810 --> 00:01:21,630
north of Darwin Australia it's the

00:01:19,229 --> 00:01:23,040
second youngest country in the world and

00:01:21,630 --> 00:01:26,130
know that South Sudan exists not the

00:01:23,040 --> 00:01:30,210
youngest anymore and it's about 1.2

00:01:26,130 --> 00:01:31,740
million people one of our projects is

00:01:30,210 --> 00:01:34,320
called League a none

00:01:31,740 --> 00:01:36,869
so that stay tuned for connecting

00:01:34,320 --> 00:01:39,030
mothers and this project seeks to

00:01:36,869 --> 00:01:41,340
improve the health of pregnant mothers

00:01:39,030 --> 00:01:44,100
and their babies once they're born so

00:01:41,340 --> 00:01:46,560
historically in Timor maternal mortality

00:01:44,100 --> 00:01:48,869
and neonatal mortality has been pretty

00:01:46,560 --> 00:01:51,119
high and there's many reasons to that

00:01:48,869 --> 00:01:53,520
but one of them is general lack of

00:01:51,119 --> 00:01:56,070
access to healthcare because Timor is a

00:01:53,520 --> 00:02:00,509
poor country and especially for women

00:01:56,070 --> 00:02:02,520
who live in rural areas they won't

00:02:00,509 --> 00:02:04,649
necessarily have a motorbike definitely

00:02:02,520 --> 00:02:06,600
don't have a car even if they do the

00:02:04,649 --> 00:02:08,220
roads or poor quality and there's not

00:02:06,600 --> 00:02:10,819
that many hospitals so in general it's

00:02:08,220 --> 00:02:13,800
it's hard for them to get access to

00:02:10,819 --> 00:02:16,040
health advice or even the health

00:02:13,800 --> 00:02:19,020
additional well when they're delivering

00:02:16,040 --> 00:02:22,110
but like in many developing countries in

00:02:19,020 --> 00:02:24,990
Timor in the past five or ten years

00:02:22,110 --> 00:02:27,120
there's been increasing access to mobile

00:02:24,990 --> 00:02:28,890
phones and five years ago when you

00:02:27,120 --> 00:02:30,750
gained and started definitely not

00:02:28,890 --> 00:02:32,430
smartphones but at the very least

00:02:30,750 --> 00:02:34,500
feature phones and people use it like

00:02:32,430 --> 00:02:37,250
people will send SMS to their family

00:02:34,500 --> 00:02:39,810
that live in other parts of the country

00:02:37,250 --> 00:02:41,670
they call each other they have like

00:02:39,810 --> 00:02:43,470
definitely like a lot of the people I

00:02:41,670 --> 00:02:45,990
meet have at least one from one phone

00:02:43,470 --> 00:02:49,410
per family so what we do with the gainin

00:02:45,990 --> 00:02:51,270
is we send them sms's and there's two

00:02:49,410 --> 00:02:54,020
things we do one is we send general

00:02:51,270 --> 00:02:56,550
sms's that about like nutrition advice

00:02:54,020 --> 00:02:59,280
general health advice like do not smoke

00:02:56,550 --> 00:03:00,780
during your pregnancy once the baby is

00:02:59,280 --> 00:03:04,260
born we just send advise about

00:03:00,780 --> 00:03:08,220
vaccination and we also put the mothers

00:03:04,260 --> 00:03:10,530
in contact with midwives so let's say a

00:03:08,220 --> 00:03:12,240
mother comes to a midwife and that

00:03:10,530 --> 00:03:14,940
midwife is registered with a legal end

00:03:12,240 --> 00:03:17,940
program that midwife is going to send a

00:03:14,940 --> 00:03:19,560
command to lea gainin that will register

00:03:17,940 --> 00:03:21,810
this mother with the program thereafter

00:03:19,560 --> 00:03:23,850
the mother will receive sms's and then

00:03:21,810 --> 00:03:25,620
the mother can also send an SMS to the

00:03:23,850 --> 00:03:27,120
program and request a kilometre with the

00:03:25,620 --> 00:03:29,489
Midwife so if anything is happening

00:03:27,120 --> 00:03:31,890
during her pregnancy she can seek she

00:03:29,489 --> 00:03:33,300
can seek advice she has like her local

00:03:31,890 --> 00:03:35,280
Midwife that might not be close

00:03:33,300 --> 00:03:39,060
physically but at least she's closer

00:03:35,280 --> 00:03:42,060
thanks to like sms's the Midwife is also

00:03:39,060 --> 00:03:44,880
going to try to ensure that the mother

00:03:42,060 --> 00:03:46,950
will have some health professional when

00:03:44,880 --> 00:03:48,959
she's delivering so maybe best-case

00:03:46,950 --> 00:03:50,959
scenario she goes to a hospital so they

00:03:48,959 --> 00:03:54,030
arrange transportation to the hospital

00:03:50,959 --> 00:03:57,390
but it can also be that the Midwife goes

00:03:54,030 --> 00:04:00,420
to the mother's home yeah

00:03:57,390 --> 00:04:02,459
solely gainin we just passed 20,000

00:04:00,420 --> 00:04:04,920
mothers registered with legaia and last

00:04:02,459 --> 00:04:07,260
year and overall his brain has been

00:04:04,920 --> 00:04:09,570
stressed fairly successful there is

00:04:07,260 --> 00:04:11,880
research that shows that women

00:04:09,570 --> 00:04:14,370
registered with laguna nor by twice as

00:04:11,880 --> 00:04:16,109
likely to deliver in the presence of a

00:04:14,370 --> 00:04:20,340
health professional than mothers who are

00:04:16,109 --> 00:04:21,900
not registered with lea gainin okay one

00:04:20,340 --> 00:04:25,710
problem that came up with Leegin was

00:04:21,900 --> 00:04:27,660
that midwives were using all these SMS

00:04:25,710 --> 00:04:29,370
commands to manage all these mothers

00:04:27,660 --> 00:04:32,370
and typically when mean wife might be

00:04:29,370 --> 00:04:34,230
responsible for like 100 pregnant women

00:04:32,370 --> 00:04:36,060
at a time and that's quite a bit of

00:04:34,230 --> 00:04:39,090
women to manage when you just have like

00:04:36,060 --> 00:04:41,310
this SMS application on your phone so

00:04:39,090 --> 00:04:44,160
they were saying that there's this

00:04:41,310 --> 00:04:46,740
information program and smartphones are

00:04:44,160 --> 00:04:48,720
getting cheaper we made a mobile app for

00:04:46,740 --> 00:04:50,910
them to track all the mothers so the

00:04:48,720 --> 00:04:53,190
mobile app is really mostly a list of

00:04:50,910 --> 00:04:55,050
mothers that says okay here's she's all

00:04:53,190 --> 00:04:57,570
the mothers in your area that are set to

00:04:55,050 --> 00:04:59,160
deliver soon like here's their name

00:04:57,570 --> 00:05:01,470
their phone number I'll show it to you

00:04:59,160 --> 00:05:04,680
in a minute and then they also get

00:05:01,470 --> 00:05:07,230
notifications for example Oh Adelia is

00:05:04,680 --> 00:05:09,690
said to deliver in three weeks or this

00:05:07,230 --> 00:05:12,750
woman should have given birth a week ago

00:05:09,690 --> 00:05:14,430
has she and if she has did she go to a

00:05:12,750 --> 00:05:20,360
hospital and we use this to track our

00:05:14,430 --> 00:05:23,010
stats etc but the timer is internet is

00:05:20,360 --> 00:05:24,810
not as good as the Australian Internet

00:05:23,010 --> 00:05:26,040
you can't just like rely on the network

00:05:24,810 --> 00:05:27,330
all the time

00:05:26,040 --> 00:05:29,130
I know Australians complaining about

00:05:27,330 --> 00:05:33,050
their internet but I can assure you it's

00:05:29,130 --> 00:05:35,370
it's really good I'm really enjoying it

00:05:33,050 --> 00:05:36,960
yeah so definitely we need this

00:05:35,370 --> 00:05:39,900
application to be accessible offline

00:05:36,960 --> 00:05:43,020
sometimes there's Network available but

00:05:39,900 --> 00:05:44,490
that network is slow and so we don't

00:05:43,020 --> 00:05:46,170
necessarily want for the network to

00:05:44,490 --> 00:05:49,740
return before we start showing

00:05:46,170 --> 00:05:51,720
information to the Midwife yeah there's

00:05:49,740 --> 00:05:53,880
this basically in general we're just

00:05:51,720 --> 00:05:55,500
showing information and if the

00:05:53,880 --> 00:05:57,690
information is like a little bit

00:05:55,500 --> 00:05:59,100
outdated is much better to show it than

00:05:57,690 --> 00:06:02,580
to not show it and wait for the network

00:05:59,100 --> 00:06:04,440
to come up all right and we build this

00:06:02,580 --> 00:06:09,450
entire mobile application using web

00:06:04,440 --> 00:06:11,700
views we yeah we don't have Android

00:06:09,450 --> 00:06:13,500
developers in house with a it was

00:06:11,700 --> 00:06:15,810
simpler to just use web views display

00:06:13,500 --> 00:06:17,880
information and the way we bridge this

00:06:15,810 --> 00:06:20,010
gap between web views and taking a nap

00:06:17,880 --> 00:06:22,110
offline is using service workers so

00:06:20,010 --> 00:06:23,640
that's the theme of this talk service

00:06:22,110 --> 00:06:25,200
workers they're available in any web

00:06:23,640 --> 00:06:27,450
views like you don't have to use a

00:06:25,200 --> 00:06:28,770
mobile phone to use them they're in

00:06:27,450 --> 00:06:32,190
general available on Chrome and Firefox

00:06:28,770 --> 00:06:33,810
even for any web site I'm going to start

00:06:32,190 --> 00:06:35,610
by showing you the lee gyein and

00:06:33,810 --> 00:06:38,550
application without the users fit of

00:06:35,610 --> 00:06:40,830
service workers so on the left you have

00:06:38,550 --> 00:06:41,560
the view of the mothers and on the right

00:06:40,830 --> 00:06:44,590
you have the Chrome

00:06:41,560 --> 00:06:46,690
developer tools for that view all right

00:06:44,590 --> 00:06:47,950
so so this is all fake information by

00:06:46,690 --> 00:06:50,470
the way I'm not showing you like real

00:06:47,950 --> 00:06:53,860
health data the mothers view this is the

00:06:50,470 --> 00:06:57,550
notifications view okay very good

00:06:53,860 --> 00:07:00,130
and then I'm reloading this page using

00:06:57,550 --> 00:07:01,750
my very good Australian internet here

00:07:00,130 --> 00:07:05,200
and it takes like a couple seconds and

00:07:01,750 --> 00:07:08,020
everything looks fine you might be a

00:07:05,200 --> 00:07:09,790
little mad at all these requests were

00:07:08,020 --> 00:07:11,680
making but we're using HTTP too so

00:07:09,790 --> 00:07:13,419
that's not a concern in general we're

00:07:11,680 --> 00:07:15,820
caching all of this static assets so

00:07:13,419 --> 00:07:17,200
really there's mostly the the requests

00:07:15,820 --> 00:07:19,750
at the top that's like about 10

00:07:17,200 --> 00:07:22,720
kilobytes that the that's the route like

00:07:19,750 --> 00:07:24,820
HTML request and then there's a couple

00:07:22,720 --> 00:07:26,200
JSON requests at the bottom for loading

00:07:24,820 --> 00:07:28,240
data about the mothers and the

00:07:26,200 --> 00:07:30,700
notifications and stuff but that was

00:07:28,240 --> 00:07:33,310
really fast like a yeah no problem over

00:07:30,700 --> 00:07:38,460
in Australian Internet no in my settings

00:07:33,310 --> 00:07:40,840
here I have a team or option chrome

00:07:38,460 --> 00:07:43,120
chrome offers you two

00:07:40,840 --> 00:07:45,729
- like customize your network conditions

00:07:43,120 --> 00:07:48,250
so yeah Timur is about two seconds

00:07:45,729 --> 00:07:50,740
latency 30 kilobytes down 30 kilobytes

00:07:48,250 --> 00:07:53,950
up and that's honestly like that's

00:07:50,740 --> 00:07:55,570
that's good like in Timur in Delisle in

00:07:53,950 --> 00:07:58,570
Delhi the capital you'll get much better

00:07:55,570 --> 00:08:00,700
than that but in what we call the

00:07:58,570 --> 00:08:02,740
district's like outside of dearly

00:08:00,700 --> 00:08:05,169
those are like good conditions if I have

00:08:02,740 --> 00:08:08,110
if I have this there I'm pretty happy so

00:08:05,169 --> 00:08:10,810
I said Timur and I reload my page and

00:08:08,110 --> 00:08:13,330
that's gonna load but that's gonna take

00:08:10,810 --> 00:08:15,370
a little while right big even this

00:08:13,330 --> 00:08:17,800
initial request there is latency there

00:08:15,370 --> 00:08:21,580
then there is some download time all the

00:08:17,800 --> 00:08:23,590
cash register is cached and then my JSON

00:08:21,580 --> 00:08:26,830
down there is also taking a while I

00:08:23,590 --> 00:08:29,680
think in general we think a lot about

00:08:26,830 --> 00:08:31,720
we'll think about a lot about us raw

00:08:29,680 --> 00:08:34,180
speed but in Timur a lot a lot of the

00:08:31,720 --> 00:08:36,159
problem stems from latency really and

00:08:34,180 --> 00:08:38,229
here if I take the offline box and I'm

00:08:36,159 --> 00:08:39,610
offline and I try to reload of course I

00:08:38,229 --> 00:08:41,400
get this annoying there is no internet

00:08:39,610 --> 00:08:43,719
connection you are offline kind of thing

00:08:41,400 --> 00:08:46,089
yeah so that's without service workers

00:08:43,719 --> 00:08:48,040
and that's like not an acceptable user

00:08:46,089 --> 00:08:49,420
experience for Lee gainin all right

00:08:48,040 --> 00:08:53,190
let's take a look at what happens when

00:08:49,420 --> 00:08:55,240
we do have service workers enabled so

00:08:53,190 --> 00:08:57,010
Australian Internet

00:08:55,240 --> 00:08:58,649
oh by the way I'm going back I'm going

00:08:57,010 --> 00:09:01,270
to this serviceworker

00:08:58,649 --> 00:09:03,850
Developer tab here so far I was

00:09:01,270 --> 00:09:06,970
bypassing the serviceworker like doing

00:09:03,850 --> 00:09:09,370
as if it wasn't existent for development

00:09:06,970 --> 00:09:11,110
you can do that but now I'm like

00:09:09,370 --> 00:09:14,680
actually letting the serviceworker

00:09:11,110 --> 00:09:16,300
handle my requests and we load it over

00:09:14,680 --> 00:09:20,649
Australian internet it's about the same

00:09:16,300 --> 00:09:24,070
speed but we can see there is this from

00:09:20,649 --> 00:09:25,570
serviceworker column here and that tells

00:09:24,070 --> 00:09:27,970
you that the requests were actually

00:09:25,570 --> 00:09:29,680
handled not directly by the network but

00:09:27,970 --> 00:09:33,220
by the serviceworker attached to this

00:09:29,680 --> 00:09:37,300
website okay going back to the team or

00:09:33,220 --> 00:09:39,970
preset reloading the page and that's

00:09:37,300 --> 00:09:42,520
going to be just as fast as my

00:09:39,970 --> 00:09:44,140
Australian Internet everything is served

00:09:42,520 --> 00:09:46,240
from the serviceworker and when

00:09:44,140 --> 00:09:48,040
interesting thing down there is all of

00:09:46,240 --> 00:09:52,060
these JSON requests they've been made

00:09:48,040 --> 00:09:54,040
but they returned after our page was

00:09:52,060 --> 00:09:57,010
shown so basically all these data that

00:09:54,040 --> 00:10:00,430
you've seen at first it wasn't coming

00:09:57,010 --> 00:10:03,670
from these JSON requests and we'll we'll

00:10:00,430 --> 00:10:05,440
see how to do this later and then if I

00:10:03,670 --> 00:10:06,940
said the offline preset and I reload my

00:10:05,440 --> 00:10:08,529
application it's just everything is

00:10:06,940 --> 00:10:10,839
loading and my JSON request at the

00:10:08,529 --> 00:10:12,399
bottom are failing but my application is

00:10:10,839 --> 00:10:14,620
being shown so basically if I if you

00:10:12,399 --> 00:10:16,300
didn't have this chrome tab open you

00:10:14,620 --> 00:10:18,670
wouldn't be able to tell that you have a

00:10:16,300 --> 00:10:21,459
slow Network or that you're offline it

00:10:18,670 --> 00:10:24,190
all looks as if you had full network and

00:10:21,459 --> 00:10:26,380
everything has been cached before okay

00:10:24,190 --> 00:10:29,560
so how how did we do that

00:10:26,380 --> 00:10:31,089
right let's take a step back and talk a

00:10:29,560 --> 00:10:34,149
little bit about what service workers

00:10:31,089 --> 00:10:36,520
are so they really run like a proxy

00:10:34,149 --> 00:10:37,990
server you really go to think about them

00:10:36,520 --> 00:10:41,890
like they're sitting between your

00:10:37,990 --> 00:10:43,300
application and the internet and all of

00:10:41,890 --> 00:10:44,649
their requests are being made by your

00:10:43,300 --> 00:10:46,120
application are going through this

00:10:44,649 --> 00:10:47,890
serviceworker and it's up to the

00:10:46,120 --> 00:10:50,050
serviceworker to decide what you're

00:10:47,890 --> 00:10:52,240
gonna do with this request you can check

00:10:50,050 --> 00:10:54,279
the network you can surf from cache you

00:10:52,240 --> 00:10:57,250
can just go directly to the student to

00:10:54,279 --> 00:11:00,399
the server but yeah everything is being

00:10:57,250 --> 00:11:03,100
handled by the serviceworker they do run

00:11:00,399 --> 00:11:04,959
in the background as in you can you

00:11:03,100 --> 00:11:07,480
define a serviceworker attached to your

00:11:04,959 --> 00:11:08,740
application and in certain specific

00:11:07,480 --> 00:11:10,300
cases you could even

00:11:08,740 --> 00:11:12,279
have your serviceworker running when

00:11:10,300 --> 00:11:15,370
none of the tabs for your application is

00:11:12,279 --> 00:11:18,370
running and they are entirely written in

00:11:15,370 --> 00:11:20,230
JavaScript okay so how do you create

00:11:18,370 --> 00:11:22,330
your serviceworker so if you have your

00:11:20,230 --> 00:11:24,910
applications code here

00:11:22,330 --> 00:11:27,850
you call this register method on the

00:11:24,910 --> 00:11:31,089
navigator that serviceworker you pass it

00:11:27,850 --> 00:11:33,910
a string that is a path to the file that

00:11:31,089 --> 00:11:35,560
contains your serviceworkers code so

00:11:33,910 --> 00:11:38,310
your server should be here your server

00:11:35,560 --> 00:11:41,020
should be serving this SW that J's file

00:11:38,310 --> 00:11:42,880
and then if this has been successful as

00:11:41,020 --> 00:11:45,730
in like the file has been downloaded and

00:11:42,880 --> 00:11:47,290
the the browser has registered the

00:11:45,730 --> 00:11:51,070
serviceworker then you get a

00:11:47,290 --> 00:11:52,630
registration object in practice you

00:11:51,070 --> 00:11:54,459
often see code that's like a little more

00:11:52,630 --> 00:11:55,830
complicated like this where you're

00:11:54,459 --> 00:11:59,260
checking whether the serviceworker

00:11:55,830 --> 00:12:01,839
exists on the navigator and for edge

00:11:59,260 --> 00:12:03,190
users and Safra users they won't get

00:12:01,839 --> 00:12:05,320
that but that's fine like that just

00:12:03,190 --> 00:12:08,350
won't get like offline experience Chrome

00:12:05,320 --> 00:12:11,589
and Firefox users can still get it and

00:12:08,350 --> 00:12:14,620
you can also pass a scope option to your

00:12:11,589 --> 00:12:16,360
register method and what this does is it

00:12:14,620 --> 00:12:19,180
says okay this serviceworker

00:12:16,360 --> 00:12:21,880
only attached it to this sub scope of my

00:12:19,180 --> 00:12:24,880
application only these pages are going

00:12:21,880 --> 00:12:26,649
to be using my serviceworker but in

00:12:24,880 --> 00:12:31,000
general your scope cannot be any higher

00:12:26,649 --> 00:12:32,560
than the scope of your application okay

00:12:31,000 --> 00:12:35,850
so let's take a look at what's within

00:12:32,560 --> 00:12:38,829
our SW that j/s right so this is really

00:12:35,850 --> 00:12:41,740
a proxy server written in JavaScript

00:12:38,829 --> 00:12:44,649
you're listening to fetch events and you

00:12:41,740 --> 00:12:48,990
get events pass to your event listener

00:12:44,649 --> 00:12:52,270
and then you can respond with something

00:12:48,990 --> 00:12:54,550
let's we're gonna start with some like

00:12:52,270 --> 00:12:56,950
useless and simple examples and then you

00:12:54,550 --> 00:13:00,430
can see like how you do something useful

00:12:56,950 --> 00:13:03,940
and complicated yeah so like as useless

00:13:00,430 --> 00:13:05,680
serviceworker is just doing whatever not

00:13:03,940 --> 00:13:08,170
having a serviceworker would do right

00:13:05,680 --> 00:13:10,000
so you're just fetching that request

00:13:08,170 --> 00:13:11,560
you're being passed the request but

00:13:10,000 --> 00:13:14,170
you're always just forwarding to the

00:13:11,560 --> 00:13:15,790
network and so you're gonna fail if the

00:13:14,170 --> 00:13:19,510
network fails and that's not very

00:13:15,790 --> 00:13:21,910
interesting but at least that's simple

00:13:19,510 --> 00:13:22,660
an annoying service worker is always

00:13:21,910 --> 00:13:26,170
responding

00:13:22,660 --> 00:13:27,759
with like this pre-canned response that

00:13:26,170 --> 00:13:29,199
you're not even serving from cash you

00:13:27,759 --> 00:13:31,029
never reaching the network you're just

00:13:29,199 --> 00:13:34,930
like always returning something that's

00:13:31,029 --> 00:13:36,670
pretty fine but let's think about use

00:13:34,930 --> 00:13:42,370
cases that would actually be useful or

00:13:36,670 --> 00:13:43,990
using our service workers maybe one

00:13:42,370 --> 00:13:47,050
service worker that would be useful in

00:13:43,990 --> 00:13:49,060
Australia would be you can assume the

00:13:47,050 --> 00:13:51,819
network is available but if that network

00:13:49,060 --> 00:13:54,160
does fail you serve from the cache right

00:13:51,819 --> 00:13:55,930
and you that's that's pretty realistic

00:13:54,160 --> 00:13:58,470
isn't it like it's like maybe people are

00:13:55,930 --> 00:14:02,589
commuting then their network will fail

00:13:58,470 --> 00:14:06,189
but you but in general the network you

00:14:02,589 --> 00:14:08,230
can assume that it's available so here's

00:14:06,189 --> 00:14:11,079
how you'd go about it you respond to the

00:14:08,230 --> 00:14:14,589
events with a network arc with the

00:14:11,079 --> 00:14:16,689
network or cache and this function isn't

00:14:14,589 --> 00:14:19,930
part of the Service Worker API so we are

00:14:16,689 --> 00:14:21,639
going to have to define it but here's

00:14:19,930 --> 00:14:24,759
you would how you'd go about it so we're

00:14:21,639 --> 00:14:26,620
using our fetch function that by the way

00:14:24,759 --> 00:14:29,410
like this is a this is part of the fetch

00:14:26,620 --> 00:14:31,029
API so this I I didn't write

00:14:29,410 --> 00:14:35,110
and we're fetching from the request and

00:14:31,029 --> 00:14:36,819
inside of the we're catching any of the

00:14:35,110 --> 00:14:38,800
promises failure because fetch is

00:14:36,819 --> 00:14:40,389
returning a promise

00:14:38,800 --> 00:14:43,300
we're catching any of the premises

00:14:40,389 --> 00:14:45,730
failure and if this is failing we're

00:14:43,300 --> 00:14:49,420
serving from cache so you'll need to

00:14:45,730 --> 00:14:51,490
have cached before any requests that

00:14:49,420 --> 00:14:53,800
have been made that were made to a

00:14:51,490 --> 00:14:55,779
similar URI and we'll we'll talk later

00:14:53,800 --> 00:14:58,509
about how you would go with the caching

00:14:55,779 --> 00:15:03,160
strategy but yeah this would work and

00:14:58,509 --> 00:15:05,410
the catch event handler will not be

00:15:03,160 --> 00:15:07,809
called if you are returning like a 400

00:15:05,410 --> 00:15:11,100
or 500 or something it will be called if

00:15:07,809 --> 00:15:14,230
the network is failing from cache in the

00:15:11,100 --> 00:15:17,139
serviceworker you get access to a global

00:15:14,230 --> 00:15:20,019
cache object and that this is namespace

00:15:17,139 --> 00:15:22,750
so here I'm accessing the from the my

00:15:20,019 --> 00:15:25,050
cache cache and then you can match

00:15:22,750 --> 00:15:27,309
requests so you can say any requests

00:15:25,050 --> 00:15:30,250
basically any cash on tree that is

00:15:27,309 --> 00:15:32,769
matching this request just open it and

00:15:30,250 --> 00:15:35,870
then return whatever is in this cache

00:15:32,769 --> 00:15:37,700
entry as I like yeah

00:15:35,870 --> 00:15:39,230
that's a couple lines of code there but

00:15:37,700 --> 00:15:40,880
in general it's like pretty

00:15:39,230 --> 00:15:42,410
straightforward how to open put in the

00:15:40,880 --> 00:15:48,020
cash add to the cash get from the cash

00:15:42,410 --> 00:15:49,010
etc alright let if we were in Timor I

00:15:48,020 --> 00:15:50,750
wouldn't do this anymore

00:15:49,010 --> 00:15:52,250
because sometimes the latency is like 10

00:15:50,750 --> 00:15:54,529
seconds and I don't want my users to

00:15:52,250 --> 00:15:56,180
wait for ACK 10 seconds so what we're

00:15:54,529 --> 00:15:59,089
doing in Nagaina and the reason why you

00:15:56,180 --> 00:16:01,730
were seeing these JSON requests we're

00:15:59,089 --> 00:16:04,010
responding after the page is loaded is

00:16:01,730 --> 00:16:06,680
that I'm actually always serving from

00:16:04,010 --> 00:16:08,480
the cache but whenever I'm serving from

00:16:06,680 --> 00:16:10,730
the cache I'm also attempting to

00:16:08,480 --> 00:16:13,040
retrieve them from the network so that's

00:16:10,730 --> 00:16:15,589
why the page is loading first but at the

00:16:13,040 --> 00:16:16,850
same time that's why the requests are

00:16:15,589 --> 00:16:18,529
being triggered because the

00:16:16,850 --> 00:16:20,150
serviceworker is like oh like we're

00:16:18,529 --> 00:16:24,520
accessing this cache now it's probably a

00:16:20,150 --> 00:16:26,720
good moment to try to update that cache

00:16:24,520 --> 00:16:28,220
yeah and this is how you go about it so

00:16:26,720 --> 00:16:30,050
you are definitely responding to this

00:16:28,220 --> 00:16:32,450
fetch event right away with the cash and

00:16:30,050 --> 00:16:34,480
this is are the same from cache function

00:16:32,450 --> 00:16:39,320
than the one we were using right before

00:16:34,480 --> 00:16:42,589
but you after this you're not returning

00:16:39,320 --> 00:16:43,970
right away you're also adding your

00:16:42,589 --> 00:16:46,490
you're calling this add to cache

00:16:43,970 --> 00:16:49,130
function which is going to reach the

00:16:46,490 --> 00:16:50,570
network so I'm giving you the code here

00:16:49,130 --> 00:16:52,310
for the add to cache function but it's

00:16:50,570 --> 00:16:54,589
very similar than the one we're having

00:16:52,310 --> 00:16:56,740
before only it's actually calling the

00:16:54,589 --> 00:16:59,540
fetch function so we're opening the cash

00:16:56,740 --> 00:17:01,820
calling fetch and if this fetch is

00:16:59,540 --> 00:17:03,620
successful we're just updating the cache

00:17:01,820 --> 00:17:06,620
entry for that request within our new

00:17:03,620 --> 00:17:07,910
response and what you can have is in the

00:17:06,620 --> 00:17:10,880
gain and for example let's say that the

00:17:07,910 --> 00:17:13,040
cache has 100 mothers and let's say that

00:17:10,880 --> 00:17:15,079
they're the network after the page is

00:17:13,040 --> 00:17:18,079
loaded is responding with 101 mothers

00:17:15,079 --> 00:17:22,309
it's going to be our applications role

00:17:18,079 --> 00:17:23,630
to handle this the fact that the what

00:17:22,309 --> 00:17:25,790
has returned from the network is

00:17:23,630 --> 00:17:27,559
different than what has been loaded from

00:17:25,790 --> 00:17:29,000
the cache so you can just say oh there's

00:17:27,559 --> 00:17:31,160
a hundred and one mother I'm just going

00:17:29,000 --> 00:17:33,380
to inject that new mother inside of the

00:17:31,160 --> 00:17:34,610
view that we have here and the user is

00:17:33,380 --> 00:17:37,580
just going to see our like there's a

00:17:34,610 --> 00:17:39,580
mother a new mother that pops up and if

00:17:37,580 --> 00:17:42,140
if we have the same number of mothers

00:17:39,580 --> 00:17:44,210
what our application is doing it's

00:17:42,140 --> 00:17:45,560
actually returning a 304 in which case

00:17:44,210 --> 00:17:47,690
the application is saying oh okay so

00:17:45,560 --> 00:17:49,280
this is this is returning a second time

00:17:47,690 --> 00:17:52,360
but there is nothing new so

00:17:49,280 --> 00:17:52,360
I'm not updating the view at all

00:17:52,490 --> 00:17:56,060
one thing you should be aware of also

00:17:54,260 --> 00:17:58,850
about service workers is their life

00:17:56,060 --> 00:18:01,550
cycle so because they ran in the

00:17:58,850 --> 00:18:04,850
background you can't always assume that

00:18:01,550 --> 00:18:07,580
whatever file is at SW that Jas will be

00:18:04,850 --> 00:18:10,060
the one that will be running as a

00:18:07,580 --> 00:18:12,770
service worker for your application so

00:18:10,060 --> 00:18:14,360
coming back to our register function

00:18:12,770 --> 00:18:18,050
that we were calling before if you're

00:18:14,360 --> 00:18:20,090
registering as wjs yoruba the browser is

00:18:18,050 --> 00:18:22,250
going to download that file and then

00:18:20,090 --> 00:18:25,610
it's going to install the service worker

00:18:22,250 --> 00:18:27,590
and third is going to activate it now

00:18:25,610 --> 00:18:29,840
there is a difference between being

00:18:27,590 --> 00:18:31,490
installed and activated because if you

00:18:29,840 --> 00:18:33,860
do have an old service worker that is

00:18:31,490 --> 00:18:35,870
already running for your application the

00:18:33,860 --> 00:18:38,030
browser is actually going to wait until

00:18:35,870 --> 00:18:40,160
your tab is closed to activate the new

00:18:38,030 --> 00:18:42,200
one so you have the old one it's

00:18:40,160 --> 00:18:45,020
installed activated the new one is

00:18:42,200 --> 00:18:46,700
installed not yet activated and then

00:18:45,020 --> 00:18:48,650
once your tab is closed the brother is

00:18:46,700 --> 00:18:50,420
like oh I won't need this old service

00:18:48,650 --> 00:18:53,180
worker anymore I'm just and registering

00:18:50,420 --> 00:18:55,130
it and then the one the new one that was

00:18:53,180 --> 00:19:00,170
already installed I'm activating this

00:18:55,130 --> 00:19:02,150
one for my application another another

00:19:00,170 --> 00:19:04,340
thing where this is the install event is

00:19:02,150 --> 00:19:04,880
going to be useful is for caching you

00:19:04,340 --> 00:19:07,250
can say Oh

00:19:04,880 --> 00:19:08,750
instead of cat attempting to cache when

00:19:07,250 --> 00:19:10,370
the requests are actually being made I

00:19:08,750 --> 00:19:11,480
could just like cache everything and I

00:19:10,370 --> 00:19:13,970
know I'm going to need in the future

00:19:11,480 --> 00:19:17,690
during the service workers installation

00:19:13,970 --> 00:19:19,340
and we'll see this later a little word

00:19:17,690 --> 00:19:22,340
about debugging you've seen this step

00:19:19,340 --> 00:19:25,370
before during the video this is really

00:19:22,340 --> 00:19:27,350
useful in general for example you can

00:19:25,370 --> 00:19:29,200
bypass your serviceworker when you are

00:19:27,350 --> 00:19:31,430
just working on your applications code

00:19:29,200 --> 00:19:33,380
you don't necessarily want your

00:19:31,430 --> 00:19:35,480
serviceworker to meddle with your

00:19:33,380 --> 00:19:37,160
requests so you have this little

00:19:35,480 --> 00:19:39,200
checkbox there you're just by passing it

00:19:37,160 --> 00:19:42,020
during development another interesting

00:19:39,200 --> 00:19:43,370
thing is like the update on reload so

00:19:42,020 --> 00:19:45,620
that you don't have to actually like

00:19:43,370 --> 00:19:46,940
close the tab and reopen it to activate

00:19:45,620 --> 00:19:49,640
your new your serviceworker if you're

00:19:46,940 --> 00:19:52,790
actively developing on this SW that J's

00:19:49,640 --> 00:19:54,680
file you'll want to always read like

00:19:52,790 --> 00:19:59,240
reactivate the newest one every time you

00:19:54,680 --> 00:20:00,590
reload the page another thing I want to

00:19:59,240 --> 00:20:02,870
draw your attention on the slick little

00:20:00,590 --> 00:20:05,980
sync button that's at the right

00:20:02,870 --> 00:20:08,510
and that's for background sink that's

00:20:05,980 --> 00:20:10,910
maybe a more advanced feature of service

00:20:08,510 --> 00:20:14,090
workers let's say that you have a chat

00:20:10,910 --> 00:20:17,930
app and the user attempts to send a chat

00:20:14,090 --> 00:20:20,260
message while offline right in the

00:20:17,930 --> 00:20:22,370
service worker you can in queue a sink

00:20:20,260 --> 00:20:23,930
and what this is gonna do is this is

00:20:22,370 --> 00:20:26,180
going to wait for the network to come up

00:20:23,930 --> 00:20:28,160
to sink this message but the interesting

00:20:26,180 --> 00:20:31,460
thing about it is that even if your

00:20:28,160 --> 00:20:32,900
users tab is closed this thing is going

00:20:31,460 --> 00:20:35,750
to be really attempted in the background

00:20:32,900 --> 00:20:37,820
until it actually clears and then when

00:20:35,750 --> 00:20:39,710
your work when your user is coming back

00:20:37,820 --> 00:20:41,930
on their on their tab the message has

00:20:39,710 --> 00:20:43,490
been sent and the user is like oh I left

00:20:41,930 --> 00:20:44,720
the tab the message wasn't sent and I'm

00:20:43,490 --> 00:20:46,630
coming back and the message has been

00:20:44,720 --> 00:20:48,740
sent

00:20:46,630 --> 00:20:50,750
let's take a look at how we would

00:20:48,740 --> 00:20:53,660
integrate our Service Worker with Django

00:20:50,750 --> 00:20:56,690
and how we would precache during

00:20:53,660 --> 00:20:59,270
installation so what we have for Lea

00:20:56,690 --> 00:21:00,650
gainin is we have this view that's the

00:20:59,270 --> 00:21:03,260
Service Worker view and that's just

00:21:00,650 --> 00:21:05,810
serving our JavaScript file and the

00:21:03,260 --> 00:21:07,640
reason why this is a served as a an

00:21:05,810 --> 00:21:10,280
actual view and not just like a static

00:21:07,640 --> 00:21:12,260
asset is because we are we know in

00:21:10,280 --> 00:21:15,770
advance all the URLs that we want to

00:21:12,260 --> 00:21:16,700
have cached and we're pre-caching and so

00:21:15,770 --> 00:21:19,790
when you're installing your

00:21:16,700 --> 00:21:22,190
serviceworker for example the mother's

00:21:19,790 --> 00:21:25,190
json the notifications JSON they're all

00:21:22,190 --> 00:21:28,430
being pre cached and this is being

00:21:25,190 --> 00:21:30,800
called during the installation so we're

00:21:28,430 --> 00:21:32,510
adding an event hist listener and during

00:21:30,800 --> 00:21:34,550
the service workers installation we're

00:21:32,510 --> 00:21:38,210
pre-caching all of this and the good

00:21:34,550 --> 00:21:40,430
thing is like as soon as as soon as the

00:21:38,210 --> 00:21:42,050
serviceworker is active we know we have

00:21:40,430 --> 00:21:45,350
all of these cache entries that we can

00:21:42,050 --> 00:21:46,550
now rely on and i think that's in

00:21:45,350 --> 00:21:48,470
general like a reasonable strategy

00:21:46,550 --> 00:21:50,390
because when you're downloading a

00:21:48,470 --> 00:21:52,510
serviceworker well you're doing it so

00:21:50,390 --> 00:21:55,100
you know the network is available then

00:21:52,510 --> 00:21:57,080
so this is a good moment to start

00:21:55,100 --> 00:21:59,330
caching all of the things you think you

00:21:57,080 --> 00:22:02,120
think you will need to cache if you're

00:21:59,330 --> 00:22:04,220
only caching after you're at risk of

00:22:02,120 --> 00:22:06,410
your user maybe like accessing trying to

00:22:04,220 --> 00:22:09,920
access the network only an hour after in

00:22:06,410 --> 00:22:13,610
which case the the network might not be

00:22:09,920 --> 00:22:16,220
available anymore couple caveats for

00:22:13,610 --> 00:22:19,700
service workers there are only

00:22:16,220 --> 00:22:21,049
available over HTTPS which I'm happy

00:22:19,700 --> 00:22:24,440
about it gives like an incentive for

00:22:21,049 --> 00:22:26,090
HTTPS but yeah if you're not serving

00:22:24,440 --> 00:22:27,830
your website over HTTPS that might be a

00:22:26,090 --> 00:22:30,440
problem that's not true during

00:22:27,830 --> 00:22:32,419
development so localhost is usually

00:22:30,440 --> 00:22:35,630
excluded by the browser's so that you

00:22:32,419 --> 00:22:39,100
can develop your serviceworker they

00:22:35,630 --> 00:22:42,020
don't have any access to the dumb so

00:22:39,100 --> 00:22:45,470
what in general they're they're really

00:22:42,020 --> 00:22:47,270
just function like a server and then

00:22:45,470 --> 00:22:48,950
it's your applications job to update the

00:22:47,270 --> 00:22:50,679
Dom depending on what is being returned

00:22:48,950 --> 00:22:52,880
by the Service Worker

00:22:50,679 --> 00:22:55,700
also another thing that we've seen a

00:22:52,880 --> 00:22:58,730
little bit is the scope of the Service

00:22:55,700 --> 00:23:00,590
Worker so if for example your

00:22:58,730 --> 00:23:03,830
application is leaving at example that

00:23:00,590 --> 00:23:05,450
comes slash app your service worker will

00:23:03,830 --> 00:23:08,179
the the service worker that is

00:23:05,450 --> 00:23:11,210
registered by this application will not

00:23:08,179 --> 00:23:13,669
be able to handle anything above example

00:23:11,210 --> 00:23:15,140
that comes slash app you can define it

00:23:13,669 --> 00:23:17,090
such that the scope is lower than that

00:23:15,140 --> 00:23:18,409
but not such that it's higher than that

00:23:17,090 --> 00:23:21,799
and this is something you have to keep

00:23:18,409 --> 00:23:23,840
in mind especially for cross-origin so

00:23:21,799 --> 00:23:27,169
as far as I know there is no possibility

00:23:23,840 --> 00:23:28,280
to have cross-origin service workers and

00:23:27,169 --> 00:23:30,140
then one little thing that people

00:23:28,280 --> 00:23:32,360
usually run into is that the fetch

00:23:30,140 --> 00:23:34,130
function that we used to access the

00:23:32,360 --> 00:23:35,510
network won't send your credentials by

00:23:34,130 --> 00:23:37,760
default so if you are using cookie

00:23:35,510 --> 00:23:39,110
authentication those cookies won't be

00:23:37,760 --> 00:23:41,150
sent by default you just have to pass

00:23:39,110 --> 00:23:45,710
this option that's credentials equals

00:23:41,150 --> 00:23:47,240
true I think ok so that's a there's a

00:23:45,710 --> 00:23:48,799
bunch of stuff you can do with service

00:23:47,240 --> 00:23:50,390
workers in general it can get much more

00:23:48,799 --> 00:23:52,970
complicated than this and I think you

00:23:50,390 --> 00:23:55,880
can really find a lot of examples online

00:23:52,970 --> 00:23:58,789
that will suit your needs but here's

00:23:55,880 --> 00:24:01,549
something you can do maybe today or soon

00:23:58,789 --> 00:24:03,590
that won't take you long and I think is

00:24:01,549 --> 00:24:05,390
like a significant improvement over a

00:24:03,590 --> 00:24:07,669
lot of website that are out there

00:24:05,390 --> 00:24:09,590
it's just create an offline page so

00:24:07,669 --> 00:24:12,500
instead of having you web your users

00:24:09,590 --> 00:24:14,480
seeing they're like there is no internet

00:24:12,500 --> 00:24:17,870
connection with is this little dinosaur

00:24:14,480 --> 00:24:19,490
which I don't like personally like you

00:24:17,870 --> 00:24:21,440
can just have like a branded website

00:24:19,490 --> 00:24:22,940
offline page that says oh it looks like

00:24:21,440 --> 00:24:25,789
you're offline and it looks the same as

00:24:22,940 --> 00:24:27,710
your main page and it doesn't have to

00:24:25,789 --> 00:24:30,200
show any kind of information you're just

00:24:27,710 --> 00:24:32,660
showing your offline so you have enough

00:24:30,200 --> 00:24:34,400
that HTML page and this will definitely

00:24:32,660 --> 00:24:37,130
have to precache during the installation

00:24:34,400 --> 00:24:41,060
because it'll never be accessible of in

00:24:37,130 --> 00:24:43,220
the network but yeah like and then it's

00:24:41,060 --> 00:24:45,920
as easy as this really you register a

00:24:43,220 --> 00:24:48,080
small service worker during the

00:24:45,920 --> 00:24:50,330
installation your pre-caching this K is

00:24:48,080 --> 00:24:52,160
this page and then whenever you have a

00:24:50,330 --> 00:24:54,320
fetch you're attempting to fetch over

00:24:52,160 --> 00:24:56,060
the network and that'll always succeed

00:24:54,320 --> 00:24:58,400
when the network is there and if this

00:24:56,060 --> 00:25:02,300
fails you're just serving back offline

00:24:58,400 --> 00:25:05,290
that HTML alright thank you very much I

00:25:02,300 --> 00:25:05,290

YouTube URL: https://www.youtube.com/watch?v=70L8saIq3uo


