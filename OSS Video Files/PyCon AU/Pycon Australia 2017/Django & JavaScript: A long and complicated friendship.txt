Title: Django & JavaScript: A long and complicated friendship
Publication date: 2017-08-05
Playlist: Pycon Australia 2017
Description: 
	Jen Zajac

http://2017.pycon-au.org/schedule/presentation/84/

#pyconau

This talk was given at PyCon Australia 2017 which was held from 3-8 August, 2017 in Melbourne, Victoria.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2017, we're returning to Melbourne, bringing together students, enthusiasts, and professionals with a love of Python from around Australia, and from all over the World. 

August 3-8 2017, Melbourne, Victoria

Python, PyCon, PyConAU
Captions: 
	00:00:00,030 --> 00:00:06,600
Jen um Jen is currently a JavaScript

00:00:04,680 --> 00:00:07,950
developer for catalyst in Wellington but

00:00:06,600 --> 00:00:11,460
back in the back in the back of the day

00:00:07,950 --> 00:00:15,690
like Django 1.1 she was a Django death

00:00:11,460 --> 00:00:17,730
um so she has the perfect experience to

00:00:15,690 --> 00:00:20,390
be able to tell us about the happy

00:00:17,730 --> 00:00:24,529
coexistence that is Django and

00:00:20,390 --> 00:00:34,590
JavaScript so if you're ready Jen

00:00:24,529 --> 00:00:39,809
wonderful give John a big hand alright

00:00:34,590 --> 00:00:42,930
hello everybody I'm here to talk to you

00:00:39,809 --> 00:00:45,000
today about two things I love JavaScript

00:00:42,930 --> 00:00:46,590
and Django and for those of you that

00:00:45,000 --> 00:00:48,559
aren't getting the reference that's the

00:00:46,590 --> 00:00:50,730
Django green and the JavaScript yellow

00:00:48,559 --> 00:00:54,390
beautifully harmonizing there in the

00:00:50,730 --> 00:00:56,370
corner of my slide so Who am I well

00:00:54,390 --> 00:00:58,079
Katie already covered this but that's

00:00:56,370 --> 00:00:59,699
just hit those five points again I'm the

00:00:58,079 --> 00:01:02,070
lead front-end developer at catalyst in

00:00:59,699 --> 00:01:03,840
Wellington catalyst actually do have

00:01:02,070 --> 00:01:05,939
some Australian offices we're in in

00:01:03,840 --> 00:01:09,960
Melbourne and Sydney as well but I'm

00:01:05,939 --> 00:01:11,820
come from over the ditch I describe

00:01:09,960 --> 00:01:14,070
myself as a front-end developer but I

00:01:11,820 --> 00:01:17,700
used to be full stack and I started off

00:01:14,070 --> 00:01:21,360
in PHP and moved to Django development

00:01:17,700 --> 00:01:24,900
between 2009 and 2011 so it's pretty

00:01:21,360 --> 00:01:28,590
old-school in terms of Django it was

00:01:24,900 --> 00:01:32,189
still 1.0 1.1 was what I was learning on

00:01:28,590 --> 00:01:35,130
and I still have a soft spot for it and

00:01:32,189 --> 00:01:37,500
the Python community in general and in

00:01:35,130 --> 00:01:40,049
my work as the front-end team leads at

00:01:37,500 --> 00:01:42,060
catalyst I still work on a lot of

00:01:40,049 --> 00:01:44,549
projects that are backed by Django so

00:01:42,060 --> 00:01:46,890
although I'm not the Django developer

00:01:44,549 --> 00:01:52,770
I'm working on a team that uses Django

00:01:46,890 --> 00:01:55,820
day-to-day so Django actually has a very

00:01:52,770 --> 00:01:59,280
long history with JavaScript

00:01:55,820 --> 00:02:05,280
the first JavaScript commit into the

00:01:59,280 --> 00:02:10,259
Django core code base was 1715 lines of

00:02:05,280 --> 00:02:12,270
vanilla JavaScript way back in July 2005

00:02:10,259 --> 00:02:13,920
by ADA in Halle Vaati and that was

00:02:12,270 --> 00:02:16,710
adding some interactivity

00:02:13,920 --> 00:02:18,870
into the admin section like live

00:02:16,710 --> 00:02:19,530
filtering of lists you know those sorts

00:02:18,870 --> 00:02:22,770
of things

00:02:19,530 --> 00:02:25,020
most of those original files are still

00:02:22,770 --> 00:02:27,720
there in the codebase in one form or

00:02:25,020 --> 00:02:30,030
another today so I just wanted to really

00:02:27,720 --> 00:02:33,360
highlight the fact that JavaScript has

00:02:30,030 --> 00:02:35,910
been there all along and in terms of the

00:02:33,360 --> 00:02:38,580
interfaces we're building our own custom

00:02:35,910 --> 00:02:42,660
code that we're building with Django I'm

00:02:38,580 --> 00:02:45,180
pretty sure that a lot of you will have

00:02:42,660 --> 00:02:49,650
some form of JavaScript in your front

00:02:45,180 --> 00:02:53,700
ends as well in fact the recent Stack

00:02:49,650 --> 00:02:55,260
Overflow survey said that 62% of

00:02:53,700 --> 00:02:57,660
developers are using some form of

00:02:55,260 --> 00:03:00,630
JavaScript and just to give you some

00:02:57,660 --> 00:03:04,320
context there that's more than say they

00:03:00,630 --> 00:03:10,110
use SQL and just for interest Python is

00:03:04,320 --> 00:03:13,170
at 32% so why do we want to add

00:03:10,110 --> 00:03:15,989
JavaScript to our Django websites well

00:03:13,170 --> 00:03:18,810
it's pretty straightforward reason we

00:03:15,989 --> 00:03:20,790
want interactivity we want no page loads

00:03:18,810 --> 00:03:23,820
we want immediate form validation

00:03:20,790 --> 00:03:27,329
feedback and other ways of improving the

00:03:23,820 --> 00:03:30,510
UX like modal's for are you sure type

00:03:27,329 --> 00:03:32,090
confirmations or collapsible menus that

00:03:30,510 --> 00:03:33,870
there are some slightly more

00:03:32,090 --> 00:03:39,030
questionable uses as well

00:03:33,870 --> 00:03:41,940
hello carousels but what can you do and

00:03:39,030 --> 00:03:45,900
in fact we are more commonly building

00:03:41,940 --> 00:03:48,989
web apps not websites nowadays and as a

00:03:45,900 --> 00:03:52,530
general purpose framework Django is well

00:03:48,989 --> 00:03:55,170
suited to this type of web application

00:03:52,530 --> 00:03:58,049
and the way that in which we use

00:03:55,170 --> 00:04:00,570
JavaScript with Django has changed a lot

00:03:58,049 --> 00:04:03,209
over the years and to be honest this has

00:04:00,570 --> 00:04:06,060
been driven by the massive changes to

00:04:03,209 --> 00:04:08,640
JavaScript itself both as a language and

00:04:06,060 --> 00:04:11,340
as an ecosystem so I'm going to take

00:04:08,640 --> 00:04:12,660
some time now just to sort of provide a

00:04:11,340 --> 00:04:14,959
bit of context and we're going to go

00:04:12,660 --> 00:04:17,459
back through the history of JavaScript

00:04:14,959 --> 00:04:19,950
and we're not going to start from the

00:04:17,459 --> 00:04:22,860
very beginning of JavaScript in in sort

00:04:19,950 --> 00:04:25,800
of 1995 ish and the reasons why it has

00:04:22,860 --> 00:04:28,050
that name JavaScript

00:04:25,800 --> 00:04:29,550
protect that's pretty much because of

00:04:28,050 --> 00:04:31,560
marketing reasons in the first place

00:04:29,550 --> 00:04:36,479
we're going to skip straight to 2005

00:04:31,560 --> 00:04:39,120
when Janko first came out so by 2005 we

00:04:36,479 --> 00:04:42,000
had a standard ish standard

00:04:39,120 --> 00:04:45,330
ish implementation of JavaScript across

00:04:42,000 --> 00:04:49,259
browsers and that was the Ekman script 3

00:04:45,330 --> 00:04:51,539
standard it's called the egg must and

00:04:49,259 --> 00:04:54,180
'red not the JavaScript standard because

00:04:51,539 --> 00:04:56,940
javascript is just a business name a

00:04:54,180 --> 00:04:58,650
marketing name the the actual

00:04:56,940 --> 00:05:00,870
specification is ACMA script which is

00:04:58,650 --> 00:05:03,860
the european computer Manufacturers

00:05:00,870 --> 00:05:05,789
Association and actually there are other

00:05:03,860 --> 00:05:07,830
implementations of equi script as well

00:05:05,789 --> 00:05:14,210
for example Flash's actual script is one

00:05:07,830 --> 00:05:17,669
other variants and as we come into 2005

00:05:14,210 --> 00:05:19,080
we've got script 3 and actually the

00:05:17,669 --> 00:05:21,539
committee has been working on atma

00:05:19,080 --> 00:05:24,630
script for for quite a long time quite a

00:05:21,539 --> 00:05:27,960
number of years at that point but it

00:05:24,630 --> 00:05:29,699
really got locked into committee limbo

00:05:27,960 --> 00:05:33,090
for years and years and it was

00:05:29,699 --> 00:05:34,979
ultimately abandoned in 2008 when the

00:05:33,090 --> 00:05:36,659
committee just couldn't agree and what

00:05:34,979 --> 00:05:38,280
the changes were going to be because

00:05:36,659 --> 00:05:39,960
there were fairly far-reaching changes

00:05:38,280 --> 00:05:43,740
introducing classes and some other

00:05:39,960 --> 00:05:46,830
fairly low-level things so that left

00:05:43,740 --> 00:05:48,479
JavaScript stagnant and different

00:05:46,830 --> 00:05:51,120
browser implementations still with

00:05:48,479 --> 00:05:54,690
annoying fragmentation so instead of

00:05:51,120 --> 00:05:58,259
vision for in 2009 the Standards

00:05:54,690 --> 00:06:00,870
Committee launched the ACMA scripts 3.1

00:05:58,259 --> 00:06:02,639
standard which as 3.1 suggests was just

00:06:00,870 --> 00:06:05,840
some extra little bits and pieces on top

00:06:02,639 --> 00:06:09,479
of 3 but just to keep the numbering

00:06:05,840 --> 00:06:11,039
consistent they went for a group 5 is

00:06:09,479 --> 00:06:14,460
the name of that standards and we just

00:06:11,039 --> 00:06:16,469
didn't get four at all it took most

00:06:14,460 --> 00:06:20,159
browsers a couple of years to really get

00:06:16,469 --> 00:06:21,630
their implementations launched so in

00:06:20,159 --> 00:06:23,669
that void while this was all happening

00:06:21,630 --> 00:06:27,780
we started to see the introduction of

00:06:23,669 --> 00:06:30,750
libraries and most notably in 2006 we

00:06:27,780 --> 00:06:32,639
got the launch of jQuery and that really

00:06:30,750 --> 00:06:35,219
did a huge amount to save us from

00:06:32,639 --> 00:06:37,199
browser inconsistencies and it also

00:06:35,219 --> 00:06:39,540
significantly improved ease of use for

00:06:37,199 --> 00:06:41,670
developers they were a bunch of

00:06:39,540 --> 00:06:43,890
competing toolkits things like dojo

00:06:41,670 --> 00:06:45,660
emoji kitten Yui but none of them ever

00:06:43,890 --> 00:06:51,150
reached the height of enduring

00:06:45,660 --> 00:06:53,610
popularity that jQuery get did so how do

00:06:51,150 --> 00:06:56,450
we use javascript with django during

00:06:53,610 --> 00:06:57,990
this era well I mean I'm just

00:06:56,450 --> 00:07:00,060
hypothesizing here this is a

00:06:57,990 --> 00:07:02,700
generalization but I would say probably

00:07:00,060 --> 00:07:06,720
for most of us we were probably using

00:07:02,700 --> 00:07:08,970
jQuery our JavaScript libraries probably

00:07:06,720 --> 00:07:10,860
sat in a folder called jeaious or

00:07:08,970 --> 00:07:13,950
javascript in our static files one

00:07:10,860 --> 00:07:16,650
folder alongside our custom files they

00:07:13,950 --> 00:07:18,600
were probably in the repository this was

00:07:16,650 --> 00:07:20,640
before content security policy so you

00:07:18,600 --> 00:07:24,450
might have even had inline script box

00:07:20,640 --> 00:07:26,430
you know Django templates folder or we

00:07:24,450 --> 00:07:29,190
were pulling in code from their static

00:07:26,430 --> 00:07:31,320
files folder and we probably didn't have

00:07:29,190 --> 00:07:37,170
a code minification process for our

00:07:31,320 --> 00:07:40,710
JavaScript yet so moving on for the next

00:07:37,170 --> 00:07:43,620
five years then not much changed to the

00:07:40,710 --> 00:07:46,470
language itself after all of those

00:07:43,620 --> 00:07:50,940
shenanigans the previous five years but

00:07:46,470 --> 00:07:53,760
we did see a lot of new sort of an

00:07:50,940 --> 00:07:55,830
explosion of new template libraries and

00:07:53,760 --> 00:07:58,650
the very first JavaScript frameworks as

00:07:55,830 --> 00:08:00,000
well for templating languages we're

00:07:58,650 --> 00:08:04,940
talking about things like mustache

00:08:00,000 --> 00:08:08,280
handlebars there are lots of these and

00:08:04,940 --> 00:08:11,490
they came about because writing HTML

00:08:08,280 --> 00:08:13,140
with jQuery is really a bit of a pain in

00:08:11,490 --> 00:08:18,300
the posterior to be honest

00:08:13,140 --> 00:08:20,130
and these templating languages actually

00:08:18,300 --> 00:08:22,620
I think quite a few of them were heavily

00:08:20,130 --> 00:08:26,250
inspired by the Django templating syntax

00:08:22,620 --> 00:08:28,890
which is very clean and nice to write so

00:08:26,250 --> 00:08:30,270
some of these see injuring use but for

00:08:28,890 --> 00:08:32,370
most developers they were kind of a

00:08:30,270 --> 00:08:34,530
stepping stone in interim solution with

00:08:32,370 --> 00:08:36,660
the full solution being to use a full

00:08:34,530 --> 00:08:39,710
JavaScript framework and for this I'm

00:08:36,660 --> 00:08:42,870
talking about things like backbone

00:08:39,710 --> 00:08:46,620
angularjs and Burgess and knockout

00:08:42,870 --> 00:08:48,960
jeaious and again there were loads more

00:08:46,620 --> 00:08:50,160
but these are sort of the big four at

00:08:48,960 --> 00:08:52,589
the time

00:08:50,160 --> 00:08:54,389
and these really came about because if

00:08:52,589 --> 00:08:56,639
you were writing quite a lot of

00:08:54,389 --> 00:08:59,819
JavaScript coding in jQuery or vanilla

00:08:56,639 --> 00:09:01,680
j/s it was very very easy to get

00:08:59,819 --> 00:09:03,480
yourself into a situation where you were

00:09:01,680 --> 00:09:07,170
writing lots of horrible spaghetti code

00:09:03,480 --> 00:09:08,879
and we got early test frameworks and

00:09:07,170 --> 00:09:13,759
response that and they brought in things

00:09:08,879 --> 00:09:15,930
like MVC patterns and other ways of

00:09:13,759 --> 00:09:18,329
encapsulating our codes so that it

00:09:15,930 --> 00:09:21,290
follows patterns that other developers

00:09:18,329 --> 00:09:24,420
could then come back and maintain later

00:09:21,290 --> 00:09:28,620
how do we use Jess with Django even

00:09:24,420 --> 00:09:30,600
during this area well we started to have

00:09:28,620 --> 00:09:33,449
to worry about the separation of our

00:09:30,600 --> 00:09:36,689
JavaScript templates because of syntax

00:09:33,449 --> 00:09:38,279
clashes into their own files so we ended

00:09:36,689 --> 00:09:41,339
up with some templating you know

00:09:38,279 --> 00:09:44,480
templates folder and some in our static

00:09:41,339 --> 00:09:46,920
folder we've got a bunch of tooling

00:09:44,480 --> 00:09:50,819
introduced to Django itself to help

00:09:46,920 --> 00:09:53,370
manage these front-ends processes and we

00:09:50,819 --> 00:09:57,029
started to see the beginning of API

00:09:53,370 --> 00:09:59,670
driven front ends using frameworks

00:09:57,029 --> 00:10:02,579
within plugins within janko to make that

00:09:59,670 --> 00:10:04,889
possible so the tooling that I'm talking

00:10:02,579 --> 00:10:07,139
about is things like django compressor

00:10:04,889 --> 00:10:08,699
and django quite one can you stick up

00:10:07,139 --> 00:10:11,490
your hand if you've used one of these in

00:10:08,699 --> 00:10:12,930
your projects yeah I think so there's a

00:10:11,490 --> 00:10:15,630
fair number of people in the room for

00:10:12,930 --> 00:10:17,730
who that's true now both of these tie

00:10:15,630 --> 00:10:19,889
into django VI configuration that you

00:10:17,730 --> 00:10:21,870
write into your settings dot pi usually

00:10:19,889 --> 00:10:26,339
and they provide things like

00:10:21,870 --> 00:10:28,259
pre-processing for CSS unification and

00:10:26,339 --> 00:10:31,529
bundling of your JavaScript and CSS

00:10:28,259 --> 00:10:33,990
assets as well as special template tags

00:10:31,529 --> 00:10:38,040
to using your Django projects to

00:10:33,990 --> 00:10:41,279
reference those bundle files of the two

00:10:38,040 --> 00:10:43,620
compressor is slightly less invasive to

00:10:41,279 --> 00:10:45,059
a normal front-end process but you still

00:10:43,620 --> 00:10:46,740
need to make sure that you are running

00:10:45,059 --> 00:10:48,480
things like offline compression or there

00:10:46,740 --> 00:10:50,129
can be quite a performance hit there and

00:10:48,480 --> 00:10:51,959
to be honest it's also a little bit

00:10:50,129 --> 00:10:53,699
magical if you've got a front-end

00:10:51,959 --> 00:10:56,269
developer coming into one of these

00:10:53,699 --> 00:10:58,949
projects who hasn't been familiar with

00:10:56,269 --> 00:11:00,720
Django previously I could speak for

00:10:58,949 --> 00:11:03,760
experience of mentoring junior

00:11:00,720 --> 00:11:05,320
colleagues that it is

00:11:03,760 --> 00:11:06,880
just take the middle while to understand

00:11:05,320 --> 00:11:09,670
quite what's happening

00:11:06,880 --> 00:11:13,000
how is my les magically being

00:11:09,670 --> 00:11:14,680
transformed I didn't do anything the

00:11:13,000 --> 00:11:16,570
other drawback is that you can only

00:11:14,680 --> 00:11:19,230
support processing steps that are

00:11:16,570 --> 00:11:23,910
directly supported by these two plugins

00:11:19,230 --> 00:11:26,260
and there's a whole world of front-end

00:11:23,910 --> 00:11:28,420
plugins for build processes that

00:11:26,260 --> 00:11:33,070
suddenly becomes unavailable if you're

00:11:28,420 --> 00:11:36,910
tied into one of these two API driven

00:11:33,070 --> 00:11:40,300
front ends so I've actually left one off

00:11:36,910 --> 00:11:43,720
this slide which is piston because it

00:11:40,300 --> 00:11:45,490
stopped being updated in about 2013 but

00:11:43,720 --> 00:11:47,890
that was one of the early ones and then

00:11:45,490 --> 00:11:50,500
we got tasty pie and the Django rest

00:11:47,890 --> 00:11:52,990
framework now my teams have worked with

00:11:50,500 --> 00:11:56,560
both of these and you can produce a very

00:11:52,990 --> 00:11:58,840
solid restful crud API with both of

00:11:56,560 --> 00:12:00,610
these but I would say nowadays for ease

00:11:58,840 --> 00:12:02,920
of use you definitely want to look at

00:12:00,610 --> 00:12:06,280
the Django rest framework specifically

00:12:02,920 --> 00:12:08,260
because it's pretty fantastic easy to

00:12:06,280 --> 00:12:10,330
use and it even gives you kind of an

00:12:08,260 --> 00:12:16,510
admin interface for developments as well

00:12:10,330 --> 00:12:18,640
and these these restful endpoints really

00:12:16,510 --> 00:12:21,130
give your front-ends the ability to

00:12:18,640 --> 00:12:23,140
request data from the backend as and

00:12:21,130 --> 00:12:27,910
when it's required so it's giving more

00:12:23,140 --> 00:12:32,500
power to those front ends right nearly

00:12:27,910 --> 00:12:34,830
done coming up to date now in the last

00:12:32,500 --> 00:12:37,480
couple of years we've really seen

00:12:34,830 --> 00:12:41,530
massive changes within the JavaScript

00:12:37,480 --> 00:12:43,510
world from 2015 we do start seeing

00:12:41,530 --> 00:12:47,320
changes to the language specification

00:12:43,510 --> 00:12:49,540
again and we got atmosphere it's well it

00:12:47,320 --> 00:12:52,660
should have been originally six but they

00:12:49,540 --> 00:12:58,840
decided to call it officially 2015 but

00:12:52,660 --> 00:13:02,440
most people refer to it as es6 now the

00:12:58,840 --> 00:13:05,130
thing about this is that unfortunately

00:13:02,440 --> 00:13:08,410
you know I mentioned when Egmore script

00:13:05,130 --> 00:13:10,810
five came out it took browsers a couple

00:13:08,410 --> 00:13:14,320
of years to actually implement those

00:13:10,810 --> 00:13:16,329
changes and for us to be able to use

00:13:14,320 --> 00:13:17,470
those language features we had

00:13:16,329 --> 00:13:19,449
the same problem with the new

00:13:17,470 --> 00:13:21,790
specification we had all of this cool

00:13:19,449 --> 00:13:23,649
stuff being promised and no way of

00:13:21,790 --> 00:13:25,239
actually using it and speaking as a

00:13:23,649 --> 00:13:27,519
front-end developer this is kind of a

00:13:25,239 --> 00:13:29,350
common thing but it's really frustrating

00:13:27,519 --> 00:13:31,360
to hear about something cool and go I

00:13:29,350 --> 00:13:34,959
can't actually use that for another

00:13:31,360 --> 00:13:37,329
three years yet fortunately there are

00:13:34,959 --> 00:13:39,369
some very impatient brilliant people in

00:13:37,329 --> 00:13:42,249
the community who introduced us to this

00:13:39,369 --> 00:13:44,410
idea of transformation which is just

00:13:42,249 --> 00:13:46,389
compilation really but it's specifically

00:13:44,410 --> 00:13:50,499
from one language target to another

00:13:46,389 --> 00:13:53,139
language target and that's taking we

00:13:50,499 --> 00:13:56,290
means we get to write es6 code now and

00:13:53,139 --> 00:14:00,519
then it transpires it back to the s5

00:13:56,290 --> 00:14:02,589
which runs in current browsers imagine

00:14:00,519 --> 00:14:04,839
if you could have just started writing

00:14:02,589 --> 00:14:07,389
Python 3 when it originally came

00:14:04,839 --> 00:14:09,249
available rather than waiting for every

00:14:07,389 --> 00:14:13,470
library that you depended on to support

00:14:09,249 --> 00:14:13,470
it wouldn't have that been game-changing

00:14:13,920 --> 00:14:21,009
we got new frameworks angular made a bit

00:14:19,420 --> 00:14:23,350
of a mistake they had a popularity

00:14:21,009 --> 00:14:24,220
stumble after they prematurely announced

00:14:23,350 --> 00:14:27,699
that the next version would be

00:14:24,220 --> 00:14:29,799
drastically different and that was

00:14:27,699 --> 00:14:32,889
angular 2 and more recently they've

00:14:29,799 --> 00:14:35,019
retconned history and angular 2 is now

00:14:32,889 --> 00:14:37,059
called angular and angular 1 is now

00:14:35,019 --> 00:14:38,049
called angularjs just to get that

00:14:37,059 --> 00:14:41,199
straight for everybody no

00:14:38,049 --> 00:14:43,119
misunderstanding there reiax is not a

00:14:41,199 --> 00:14:45,309
full framework in itself but it's super

00:14:43,119 --> 00:14:46,929
popular and it's teamed up with state

00:14:45,309 --> 00:14:48,220
management tools like Rideau because it

00:14:46,929 --> 00:14:51,639
can do a really good job and you can

00:14:48,220 --> 00:14:53,019
write cool stuff really quickly and view

00:14:51,639 --> 00:14:54,819
is somewhere in between the two in

00:14:53,019 --> 00:14:57,100
something of a recent up-and-comer and

00:14:54,819 --> 00:14:58,329
again there are tons more things out

00:14:57,100 --> 00:15:02,379
there but these are sort of the popular

00:14:58,329 --> 00:15:04,839
three at the minute beyond just that

00:15:02,379 --> 00:15:07,329
though we now have package management

00:15:04,839 --> 00:15:09,970
tools so Bower used to be specifically

00:15:07,329 --> 00:15:12,249
for client-side dependencies but most

00:15:09,970 --> 00:15:13,629
people are just using NPM now because if

00:15:12,249 --> 00:15:16,230
you can get away with using just one

00:15:13,629 --> 00:15:19,989
tool in place of two why wouldn't you

00:15:16,230 --> 00:15:22,929
NPM gets a lot of flack but personally

00:15:19,989 --> 00:15:25,120
I've spent way more time swearing at PIP

00:15:22,929 --> 00:15:27,740
than I ever have a NPM

00:15:25,120 --> 00:15:30,800
it's easy to use there are

00:15:27,740 --> 00:15:32,690
well-thought-out manifest files sure

00:15:30,800 --> 00:15:34,310
it's definitely got problems but most of

00:15:32,690 --> 00:15:37,100
those problems are actively being worked

00:15:34,310 --> 00:15:39,440
on we recently saw the introduction of

00:15:37,100 --> 00:15:41,170
lock files and a lot of performance

00:15:39,440 --> 00:15:43,880
increases as well

00:15:41,170 --> 00:15:46,520
yarn works on top of the NPM Kotla

00:15:43,880 --> 00:15:49,460
catalog offers a few interface and

00:15:46,520 --> 00:15:52,160
performance buffs but I would say mostly

00:15:49,460 --> 00:15:53,540
the latest NPM is caught up now and if

00:15:52,160 --> 00:15:56,330
you were just getting started with

00:15:53,540 --> 00:15:58,400
front-end dependency management then

00:15:56,330 --> 00:16:04,760
definitely NPM is probably the thing to

00:15:58,400 --> 00:16:07,310
use many new build tools specifically

00:16:04,760 --> 00:16:09,290
for front-end processes and you do see

00:16:07,310 --> 00:16:12,440
two seem to get a new one of these every

00:16:09,290 --> 00:16:16,040
six months or so but for the last while

00:16:12,440 --> 00:16:19,660
web pack has been dominant I expect this

00:16:16,040 --> 00:16:21,920
to remain a fast-moving space but

00:16:19,660 --> 00:16:23,950
despite the complexity of getting some

00:16:21,920 --> 00:16:26,810
of these set up they can provide really

00:16:23,950 --> 00:16:32,630
good experiences once they're up and

00:16:26,810 --> 00:16:33,830
running so we also see static types if

00:16:32,630 --> 00:16:35,750
you want to use them that's still very

00:16:33,830 --> 00:16:38,630
much an optional thing I see some

00:16:35,750 --> 00:16:41,300
projects using these and some not and we

00:16:38,630 --> 00:16:43,430
also start to see a bunch of influences

00:16:41,300 --> 00:16:48,200
from functional programming coming into

00:16:43,430 --> 00:16:51,860
JavaScript so I've been talking about

00:16:48,200 --> 00:16:53,570
all of this cool new stuff but can you

00:16:51,860 --> 00:16:58,040
stick a hand up for me if you've used

00:16:53,570 --> 00:17:00,320
any es6 okay so we do have about half of

00:16:58,040 --> 00:17:02,870
the people in the room who have actually

00:17:00,320 --> 00:17:04,640
written some that's really neat but just

00:17:02,870 --> 00:17:06,439
for those of you that haven't we're just

00:17:04,640 --> 00:17:07,640
going to do a few minutes of Whistlestop

00:17:06,439 --> 00:17:11,240
tour or some of those new features

00:17:07,640 --> 00:17:12,709
because it's no users putting this extra

00:17:11,240 --> 00:17:13,939
effort into all of this translation

00:17:12,709 --> 00:17:15,709
process and layers of giving some

00:17:13,939 --> 00:17:20,060
something good so we'll just whip

00:17:15,709 --> 00:17:22,040
through these quickly now so let and

00:17:20,060 --> 00:17:25,189
const instead of vine and javascript you

00:17:22,040 --> 00:17:27,290
used to have to decide define variables

00:17:25,189 --> 00:17:30,380
with that which is the last one there

00:17:27,290 --> 00:17:32,180
and if you are naughty in declare that

00:17:30,380 --> 00:17:34,730
outside a function it's got global scope

00:17:32,180 --> 00:17:36,880
which is the earth that's the technical

00:17:34,730 --> 00:17:40,660
term by the way

00:17:36,880 --> 00:17:42,790
and now we have let and Const and they

00:17:40,660 --> 00:17:45,760
have block scope instead of function

00:17:42,790 --> 00:17:48,400
scope that thought I used to have and a

00:17:45,760 --> 00:17:50,680
block is the same as well in Python it

00:17:48,400 --> 00:17:54,310
would be an indented block in JavaScript

00:17:50,680 --> 00:17:56,500
it's usually within curly braces and in

00:17:54,310 --> 00:17:58,240
the case of Const it cannot be

00:17:56,500 --> 00:18:01,120
reassigned there is a little bit of a

00:17:58,240 --> 00:18:04,150
gotcha here it is not immutable it just

00:18:01,120 --> 00:18:07,150
can't be reassigned so if you give it an

00:18:04,150 --> 00:18:10,120
object you could actually add new keys

00:18:07,150 --> 00:18:12,940
and properties to that object but still

00:18:10,120 --> 00:18:16,600
this gives us the ability to describe

00:18:12,940 --> 00:18:18,490
things as we intend them to be used we

00:18:16,600 --> 00:18:23,320
have spring interpolation finally

00:18:18,490 --> 00:18:25,870
finally so we can declare ourselves a

00:18:23,320 --> 00:18:28,870
variable here and we can put that into

00:18:25,870 --> 00:18:31,420
our string with the dollar curly brace

00:18:28,870 --> 00:18:34,780
syntax which is a wee bit ugly but does

00:18:31,420 --> 00:18:38,560
the job and we can also have multi-line

00:18:34,780 --> 00:18:40,090
strings this is heaven now and we can

00:18:38,560 --> 00:18:41,530
have things like double quotes and

00:18:40,090 --> 00:18:44,140
single quotes without needing to escape

00:18:41,530 --> 00:18:45,040
them simple stuff but it really does

00:18:44,140 --> 00:18:46,720
make a difference in your everyday

00:18:45,040 --> 00:18:49,150
day-to-day to programming

00:18:46,720 --> 00:18:50,800
we've got arrow functions instead of

00:18:49,150 --> 00:18:53,680
normal functions well actually not

00:18:50,800 --> 00:18:56,740
instead of as well as they have some

00:18:53,680 --> 00:18:58,360
deep syntactical this that I want quite

00:18:56,740 --> 00:19:00,730
copy here but this is what the syntax

00:18:58,360 --> 00:19:02,710
looks like you can pass in multiple

00:19:00,730 --> 00:19:04,330
arguments and then we use the equal sign

00:19:02,710 --> 00:19:07,110
and the angular bracket to say and

00:19:04,330 --> 00:19:10,630
here's the function that acts on these

00:19:07,110 --> 00:19:12,610
parameters you can get really to see if

00:19:10,630 --> 00:19:14,380
you want to this bottom one here is a

00:19:12,610 --> 00:19:16,060
one line and where we because we're

00:19:14,380 --> 00:19:17,620
returning something we're omitting the

00:19:16,060 --> 00:19:19,270
return and we're emitting with curly

00:19:17,620 --> 00:19:21,070
braces then because we've just got one

00:19:19,270 --> 00:19:23,590
parameter we're emitting the normal

00:19:21,070 --> 00:19:24,940
braces too I'm personally not really a

00:19:23,590 --> 00:19:28,900
big fan of that but if you'd like

00:19:24,940 --> 00:19:31,240
justice you've got options now we've got

00:19:28,900 --> 00:19:32,800
proper model imports and these are going

00:19:31,240 --> 00:19:34,240
to look very familiar to Python

00:19:32,800 --> 00:19:35,590
developers in there in the room I mean

00:19:34,240 --> 00:19:38,230
there's syntax is ever so slightly

00:19:35,590 --> 00:19:40,510
different star instead of dot but we can

00:19:38,230 --> 00:19:44,380
do things like wildcard imports specific

00:19:40,510 --> 00:19:49,360
named imports and this is really cool

00:19:44,380 --> 00:19:51,310
and it works we have classes finally

00:19:49,360 --> 00:19:52,810
unlike the classes that we're going to

00:19:51,310 --> 00:19:55,440
be introduced with atma script for

00:19:52,810 --> 00:19:58,990
they're basically just syntactic sugar

00:19:55,440 --> 00:20:00,880
but yeah we've got classes you can

00:19:58,990 --> 00:20:03,100
extend them and there are Gators and

00:20:00,880 --> 00:20:07,090
setters for them we got methods on their

00:20:03,100 --> 00:20:08,950
classes I mentioned inheritance oh I

00:20:07,090 --> 00:20:13,030
know it's not one other thing into this

00:20:08,950 --> 00:20:16,000
slide here we've got default values for

00:20:13,030 --> 00:20:19,120
undefined variables that you're passing

00:20:16,000 --> 00:20:21,400
in as well which is great there's a ton

00:20:19,120 --> 00:20:23,320
of new stuff but actually and if you

00:20:21,400 --> 00:20:25,210
were to read through the whole list like

00:20:23,320 --> 00:20:27,520
if you're like oh yeah six thing I'm not

00:20:25,210 --> 00:20:29,320
real sure about it how do I learn about

00:20:27,520 --> 00:20:31,720
it I really recommend this cheat sheet

00:20:29,320 --> 00:20:33,630
that I put a little short now filter at

00:20:31,720 --> 00:20:36,940
my link in to at the bottom they're

00:20:33,630 --> 00:20:38,470
called es6 cheat sheets and you can read

00:20:36,940 --> 00:20:39,640
through that in about half an hour and

00:20:38,470 --> 00:20:43,630
it will tell you everything you need to

00:20:39,640 --> 00:20:47,350
know right so that's what modern

00:20:43,630 --> 00:20:49,660
JavaScript is but how do we use it more

00:20:47,350 --> 00:20:53,610
specifically how do we use it with

00:20:49,660 --> 00:20:57,520
Django now oh and actually an aside

00:20:53,610 --> 00:20:59,620
regarding JavaScript fatigue I read more

00:20:57,520 --> 00:21:01,900
and more about JavaScript being

00:20:59,620 --> 00:21:04,480
off-putting because the constant pace of

00:21:01,900 --> 00:21:06,730
change and how can we possibly keep up

00:21:04,480 --> 00:21:09,280
with this and I would just like to say

00:21:06,730 --> 00:21:11,860
you don't need to try out every new

00:21:09,280 --> 00:21:14,740
thing especially for your work projects

00:21:11,860 --> 00:21:16,900
or projects with deadlines but you also

00:21:14,740 --> 00:21:19,810
can't totally cover your ears with your

00:21:16,900 --> 00:21:22,210
hands and sing lalala modern JavaScript

00:21:19,810 --> 00:21:26,830
has a reputation for being complicated

00:21:22,210 --> 00:21:29,980
it is but for good reasons we can build

00:21:26,830 --> 00:21:32,350
better things with it that initial

00:21:29,980 --> 00:21:36,160
complication fuels a really great

00:21:32,350 --> 00:21:38,260
developer experience when I've got my

00:21:36,160 --> 00:21:40,420
web pack running with my react hot

00:21:38,260 --> 00:21:41,980
reload and I make a change in my career

00:21:40,420 --> 00:21:43,600
ease and my web browser refreshes

00:21:41,980 --> 00:21:45,850
automatically with all the state still

00:21:43,600 --> 00:21:48,460
maintained that speeds up my development

00:21:45,850 --> 00:21:51,070
it's great a lot of the current

00:21:48,460 --> 00:21:53,470
complexity comes from getting rid of

00:21:51,070 --> 00:21:56,050
that multi-year cycle of waiting for

00:21:53,470 --> 00:21:58,870
browsers to release new features and I'm

00:21:56,050 --> 00:22:01,840
personally really happy to be free of

00:21:58,870 --> 00:22:04,790
that impatient wait

00:22:01,840 --> 00:22:06,620
the community is producing a lot of

00:22:04,790 --> 00:22:09,020
tooling to make initial barriers of

00:22:06,620 --> 00:22:11,540
entry lower for example in the react

00:22:09,020 --> 00:22:13,970
community there is a project called

00:22:11,540 --> 00:22:17,870
create react app it's officially

00:22:13,970 --> 00:22:19,610
maintained and what this does is when

00:22:17,870 --> 00:22:22,220
you're getting started with reacts they

00:22:19,610 --> 00:22:24,200
recently switched all of their tutorial

00:22:22,220 --> 00:22:25,790
documentation everything over to using

00:22:24,200 --> 00:22:27,590
es6 and they realized there was a

00:22:25,790 --> 00:22:30,290
barrier of entry to new members of the

00:22:27,590 --> 00:22:32,240
community because you can't have a

00:22:30,290 --> 00:22:34,280
tutorial where you have to say well

00:22:32,240 --> 00:22:36,110
first you need to install these things

00:22:34,280 --> 00:22:37,280
and do this thing and do this thing and

00:22:36,110 --> 00:22:38,120
do this thing and now you can get on

00:22:37,280 --> 00:22:40,670
with the tutorial

00:22:38,120 --> 00:22:43,370
so create react app takes all of that

00:22:40,670 --> 00:22:46,490
complexity away from those those users

00:22:43,370 --> 00:22:48,110
it builds the web pack configuration for

00:22:46,490 --> 00:22:50,030
you and it hides it all the way so you

00:22:48,110 --> 00:22:53,420
don't need to worry about it but more

00:22:50,030 --> 00:22:55,250
importantly it makes it so you can get

00:22:53,420 --> 00:22:57,500
that configuration back when you're

00:22:55,250 --> 00:22:59,870
ready to start tweaking it yourself

00:22:57,500 --> 00:23:01,760
there's an eject feature that means you

00:22:59,870 --> 00:23:04,340
can take that control as and when you

00:23:01,760 --> 00:23:08,390
outgrow the training wheels of create

00:23:04,340 --> 00:23:12,080
reactor and it's well documented too

00:23:08,390 --> 00:23:16,880
which is super important so we could be

00:23:12,080 --> 00:23:19,730
using something like that we also have a

00:23:16,880 --> 00:23:21,530
neutral for Django I only recently found

00:23:19,730 --> 00:23:25,940
out about this this is Django whip egg

00:23:21,530 --> 00:23:29,030
loader and it's a lot less invasive than

00:23:25,940 --> 00:23:32,650
compressor or pipeline in that you have

00:23:29,030 --> 00:23:36,530
your normal front-end build process and

00:23:32,650 --> 00:23:38,210
this plugin just provides you that link

00:23:36,530 --> 00:23:42,200
back to your Django templates through

00:23:38,210 --> 00:23:44,840
template tags so that you can inject

00:23:42,200 --> 00:23:46,970
those files into your template files and

00:23:44,840 --> 00:23:49,100
whenever something new comes up for a

00:23:46,970 --> 00:23:51,050
web pack we can immediately put that

00:23:49,100 --> 00:23:53,860
into a front-end build pipeline we don't

00:23:51,050 --> 00:23:55,970
need to wait if Django web pack loader

00:23:53,860 --> 00:23:57,860
supports it because we're starting to

00:23:55,970 --> 00:24:02,030
decouple our front-end and our back in

00:23:57,860 --> 00:24:04,220
dependencies and that's really good we

00:24:02,030 --> 00:24:06,260
can go further than that though we can

00:24:04,220 --> 00:24:08,930
totally decouple our front-end in our

00:24:06,260 --> 00:24:11,780
back-end we can have totally separate

00:24:08,930 --> 00:24:14,000
repositories we can sorry I hate this

00:24:11,780 --> 00:24:15,920
acronym we can have a spa front-end

00:24:14,000 --> 00:24:17,390
that's single-page application for those

00:24:15,920 --> 00:24:18,880
of you that haven't heard that before

00:24:17,390 --> 00:24:22,460
we can have a Django rest framework

00:24:18,880 --> 00:24:24,680
backends we can have maybe some

00:24:22,460 --> 00:24:26,780
automated provisioning to help us untie

00:24:24,680 --> 00:24:29,270
those two repositories back together for

00:24:26,780 --> 00:24:31,250
development environments and we

00:24:29,270 --> 00:24:35,630
basically just use a web server like

00:24:31,250 --> 00:24:38,150
Apache or nginx to proxy those two

00:24:35,630 --> 00:24:40,370
things together so that we can have a

00:24:38,150 --> 00:24:43,460
seamless warm domain with the front end

00:24:40,370 --> 00:24:47,870
and back on that back end on its working

00:24:43,460 --> 00:24:50,210
together so I want to talk about this a

00:24:47,870 --> 00:24:53,750
little bit more and to do so I'm going

00:24:50,210 --> 00:24:55,580
to show you a bit of a demo so I

00:24:53,750 --> 00:24:57,020
mentioned I work at catalyst in

00:24:55,580 --> 00:24:59,960
Wellington and one of the projects that

00:24:57,020 --> 00:25:06,170
I've been working on recently is Smart

00:24:59,960 --> 00:25:08,120
Start which is a tool provided by dia

00:25:06,170 --> 00:25:09,680
which is in New Zealand that's the

00:25:08,120 --> 00:25:13,220
Department of Internal Affairs so

00:25:09,680 --> 00:25:15,140
government agency and it's a way of

00:25:13,220 --> 00:25:17,360
pulling together all the information

00:25:15,140 --> 00:25:21,070
about what service is available to you

00:25:17,360 --> 00:25:23,480
as potential parents okay so it's about

00:25:21,070 --> 00:25:25,580
what services are available with me as

00:25:23,480 --> 00:25:26,930
I'm considering having a child so let's

00:25:25,580 --> 00:25:29,510
pull that out now just give me a wee

00:25:26,930 --> 00:25:33,860
seconds just walk this over to the

00:25:29,510 --> 00:25:39,170
correct monitor all right so this is

00:25:33,860 --> 00:25:42,340
Smart Start and it's here we go is my

00:25:39,170 --> 00:25:45,950
cursor fantastic as I say it's it's

00:25:42,340 --> 00:25:49,190
information and it provides sort of a

00:25:45,950 --> 00:25:52,190
timeline of services here so you can see

00:25:49,190 --> 00:25:55,010
pregnancy weeks 0 to 14 all of this

00:25:52,190 --> 00:25:59,500
stuff you probably don't care about that

00:25:55,010 --> 00:26:06,350
so let's talk about the technology right

00:25:59,500 --> 00:26:08,630
so the this is very API driven it's got

00:26:06,350 --> 00:26:11,570
a Django rest framework back-end and

00:26:08,630 --> 00:26:15,650
providing data for when we want to say

00:26:11,570 --> 00:26:17,150
things to our to-do list here so we can

00:26:15,650 --> 00:26:19,610
check something off and have that be

00:26:17,150 --> 00:26:23,330
saved into our persisted into our Django

00:26:19,610 --> 00:26:26,400
models we've got authentication being

00:26:23,330 --> 00:26:29,550
provided by by Jenko actually

00:26:26,400 --> 00:26:32,510
in this case fire an IDP which is the

00:26:29,550 --> 00:26:36,000
real me is sort of a government

00:26:32,510 --> 00:26:40,710
authentication ID service provided by

00:26:36,000 --> 00:26:43,230
the New Zealand government and we have a

00:26:40,710 --> 00:26:44,910
front-end that is built with reacts so

00:26:43,230 --> 00:26:47,610
I'm just going to skip right down to the

00:26:44,910 --> 00:26:50,880
bottom page here quite a lot of

00:26:47,610 --> 00:26:54,450
information on their sites these links

00:26:50,880 --> 00:26:58,559
at the bottom if I go to the privacy

00:26:54,450 --> 00:27:01,559
page you can if you watch the URL bar

00:26:58,559 --> 00:27:04,170
you'll see that we change to a different

00:27:01,559 --> 00:27:06,929
URL so you can bookmark this and have it

00:27:04,170 --> 00:27:08,610
behave normally but we didn't have a

00:27:06,929 --> 00:27:13,200
page load there this was all happening

00:27:08,610 --> 00:27:15,300
as part of a single page application and

00:27:13,200 --> 00:27:16,950
that is going to work great for

00:27:15,300 --> 00:27:19,350
applications as well where you have more

00:27:16,950 --> 00:27:24,900
complex interactions happening than you

00:27:19,350 --> 00:27:27,210
do on this website so how is that set up

00:27:24,900 --> 00:27:29,570
well it's all pretty straightforward I'm

00:27:27,210 --> 00:27:35,960
just going to pull up some code for you

00:27:29,570 --> 00:27:41,100
just find my cursor again okay

00:27:35,960 --> 00:27:45,059
resolution right so our front-end

00:27:41,100 --> 00:27:47,490
process is pretty common in the

00:27:45,059 --> 00:27:52,020
front-end world we've got a source

00:27:47,490 --> 00:27:55,440
folder that contains all of our Uncle

00:27:52,020 --> 00:27:57,990
piled on transpiled assets and we've got

00:27:55,440 --> 00:28:02,040
a dist folder where we our build process

00:27:57,990 --> 00:28:04,290
puts all of those files and that has you

00:28:02,040 --> 00:28:07,140
can see here its own templating for the

00:28:04,290 --> 00:28:10,170
initial HTML page which means that once

00:28:07,140 --> 00:28:12,840
that gets written we're writing in the

00:28:10,170 --> 00:28:14,940
link to the JavaScript dynamically with

00:28:12,840 --> 00:28:18,120
cache busting URL webpack takes care of

00:28:14,940 --> 00:28:24,059
all of that for us and then to serve

00:28:18,120 --> 00:28:29,340
that we just have nginx probably I could

00:28:24,059 --> 00:28:33,230
just pop over here there we go we have

00:28:29,340 --> 00:28:33,230
an engine X configuration

00:28:33,260 --> 00:28:39,410
for our front-end contents saying that

00:28:36,260 --> 00:28:42,620
we serve that index dot HTML file at the

00:28:39,410 --> 00:28:47,120
root of our domain and to make sure that

00:28:42,620 --> 00:28:53,419
we have our back-end stuff we namespace

00:28:47,120 --> 00:28:56,090
this API URL and that does a proxy to

00:28:53,419 --> 00:28:59,360
our Django back-end which is running on

00:28:56,090 --> 00:29:02,000
a separate water okay so that works

00:28:59,360 --> 00:29:03,679
together really nicely this is just one

00:29:02,000 --> 00:29:07,220
way of doing the configuration there are

00:29:03,679 --> 00:29:09,470
a bunch of different ways and in terms

00:29:07,220 --> 00:29:14,390
of what we're doing on the back end

00:29:09,470 --> 00:29:16,640
I mentioned that well actually I'll just

00:29:14,390 --> 00:29:19,130
take a step back for a second we've got

00:29:16,640 --> 00:29:21,740
our applications but up into different

00:29:19,130 --> 00:29:23,120
apps here that just means that we can

00:29:21,740 --> 00:29:28,309
pull those out if we want to refactor

00:29:23,120 --> 00:29:31,370
this slightly later and one of the api's

00:29:28,309 --> 00:29:33,890
is like I said Django rest framework is

00:29:31,370 --> 00:29:36,110
really easy one of our api's is as

00:29:33,890 --> 00:29:38,270
simple as that for a read-only API the

00:29:36,110 --> 00:29:40,220
ones that where you have to be able to

00:29:38,270 --> 00:29:42,410
write to them might get a little bit

00:29:40,220 --> 00:29:44,059
more interesting but and Django rest

00:29:42,410 --> 00:29:47,870
framework just make this stuff really

00:29:44,059 --> 00:29:51,980
easy one last thing I'll mention about

00:29:47,870 --> 00:29:54,320
this demo there was a lot of fudge fear

00:29:51,980 --> 00:29:56,809
uncertainty and doubt about single page

00:29:54,320 --> 00:30:00,070
web applications in terms of their

00:29:56,809 --> 00:30:03,770
indexing for search engine optimization

00:30:00,070 --> 00:30:06,140
purposes I was worried about that coming

00:30:03,770 --> 00:30:08,870
into this project I hadn't done a sbar

00:30:06,140 --> 00:30:11,330
in a while and historically some of the

00:30:08,870 --> 00:30:14,510
search engines had done a really bad job

00:30:11,330 --> 00:30:16,280
with indexing JavaScript pages and I was

00:30:14,510 --> 00:30:20,179
looking at a service called pre-rendered

00:30:16,280 --> 00:30:24,169
i/o as a way of pre-rendering the pages

00:30:20,179 --> 00:30:25,669
and serving those up to to the crawler

00:30:24,169 --> 00:30:32,240
and for search engine optimization

00:30:25,669 --> 00:30:35,090
purposes but actually it was index no

00:30:32,240 --> 00:30:37,970
problem at all and more than that you

00:30:35,090 --> 00:30:39,860
can see that separate single page

00:30:37,970 --> 00:30:42,559
application routes are also being

00:30:39,860 --> 00:30:45,870
indexed by Google I can't speak to the

00:30:42,559 --> 00:30:52,260
other search engines but really

00:30:45,870 --> 00:30:56,780
oh and that one gotcha I will mention is

00:30:52,260 --> 00:31:01,380
that if you care about having separate

00:30:56,780 --> 00:31:04,770
Facebook meta tags for different pages

00:31:01,380 --> 00:31:07,200
of your site you can't do that with a

00:31:04,770 --> 00:31:10,410
single page application if you've just

00:31:07,200 --> 00:31:13,470
got one index dot HTML because the

00:31:10,410 --> 00:31:15,360
Facebook crawler doesn't rent a

00:31:13,470 --> 00:31:18,630
JavaScript which is a little bit ironic

00:31:15,360 --> 00:31:20,550
seeing this as a react sites which is

00:31:18,630 --> 00:31:21,900
maintained by Facebook but there you go

00:31:20,550 --> 00:31:28,800
hopefully they'll make their call a

00:31:21,900 --> 00:31:30,360
better in future okay so I've talked

00:31:28,800 --> 00:31:33,390
about the fact that there are lots of

00:31:30,360 --> 00:31:37,620
different ways of doing this and I want

00:31:33,390 --> 00:31:40,290
to focus in a bit on how do you pick the

00:31:37,620 --> 00:31:42,360
right JavaScript language library

00:31:40,290 --> 00:31:44,210
framework or pattern given that there

00:31:42,360 --> 00:31:47,340
are so many and it's so fast changing

00:31:44,210 --> 00:31:50,760
well unfortunately I have to say there

00:31:47,340 --> 00:31:52,110
isn't a correct answer here it's really

00:31:50,760 --> 00:31:52,650
a sort of a how long is the piece of

00:31:52,110 --> 00:31:55,530
string

00:31:52,650 --> 00:31:59,030
kind of a thing but you can as

00:31:55,530 --> 00:32:02,580
developers ask yourself these questions

00:31:59,030 --> 00:32:05,580
are you building a website or are you

00:32:02,580 --> 00:32:07,860
building a web app if you're building a

00:32:05,580 --> 00:32:09,929
website maybe it's okay that you use

00:32:07,860 --> 00:32:12,000
Django templates and then embed

00:32:09,929 --> 00:32:14,790
JavaScript widgets into those pages as

00:32:12,000 --> 00:32:18,780
you need them it's faster in some use

00:32:14,790 --> 00:32:22,140
cases if you're building a web app there

00:32:18,780 --> 00:32:24,300
is a much stronger case to be made for

00:32:22,140 --> 00:32:26,520
building a single page application and

00:32:24,300 --> 00:32:31,580
decoupling your front-end entirely but

00:32:26,520 --> 00:32:34,440
again it does depend a wee bit is your

00:32:31,580 --> 00:32:36,780
JavaScript for decorative or functional

00:32:34,440 --> 00:32:39,420
purposes I don't mean functionalizing

00:32:36,780 --> 00:32:41,880
functional programming I mean as in does

00:32:39,420 --> 00:32:44,070
it do business stuff is it important if

00:32:41,880 --> 00:32:46,650
you're building website in the jas is

00:32:44,070 --> 00:32:49,380
just for cosmetic stuff like maybe

00:32:46,650 --> 00:32:53,220
putting some bits of text in a modal or

00:32:49,380 --> 00:32:54,810
adding an accordion or you know anything

00:32:53,220 --> 00:32:56,360
like that maybe you don't need a full

00:32:54,810 --> 00:32:58,100
JavaScript framework

00:32:56,360 --> 00:33:00,770
and just a simple library like

00:32:58,100 --> 00:33:05,110
bootstraps JavaScript or even just old

00:33:00,770 --> 00:33:08,990
good old jQuery he's going to do the job

00:33:05,110 --> 00:33:10,429
do you need to fall like MVC framework

00:33:08,990 --> 00:33:12,320
for your JavaScript do you need

00:33:10,429 --> 00:33:15,230
batteries and the kitchen sink and

00:33:12,320 --> 00:33:16,850
everything included if you're working on

00:33:15,230 --> 00:33:19,670
a really large project and you've got

00:33:16,850 --> 00:33:23,600
some front-end time to this and choosing

00:33:19,670 --> 00:33:26,120
one of these can over time save you your

00:33:23,600 --> 00:33:27,520
your team a lot of time and and give you

00:33:26,120 --> 00:33:30,049
a lot of functionality out of the box

00:33:27,520 --> 00:33:32,299
the downside is that you are going to

00:33:30,049 --> 00:33:34,220
need to respect their opinions and to

00:33:32,299 --> 00:33:35,929
get the most from them and I'm talking

00:33:34,220 --> 00:33:40,190
about things like angular ember here

00:33:35,929 --> 00:33:42,770
full MVC frameworks this one's pretty

00:33:40,190 --> 00:33:44,600
straight forwards if there is business

00:33:42,770 --> 00:33:46,880
logic in your JavaScript code

00:33:44,600 --> 00:33:50,960
full-stop you need unit tests for your

00:33:46,880 --> 00:33:53,870
JavaScript fortunately there is a good

00:33:50,960 --> 00:33:56,120
ecosystem for that now jest is my

00:33:53,870 --> 00:33:57,380
current favorites but there are tons of

00:33:56,120 --> 00:34:02,750
them out there and you can pick the

00:33:57,380 --> 00:34:06,500
tooling that best suits your team so

00:34:02,750 --> 00:34:08,810
there is one other developments one

00:34:06,500 --> 00:34:10,429
elephant in the room in the JavaScript

00:34:08,810 --> 00:34:15,889
community that we haven't touched on at

00:34:10,429 --> 00:34:21,260
all yet and that's the competition no

00:34:15,889 --> 00:34:25,609
Jess right are there any Django killer

00:34:21,260 --> 00:34:27,470
no Jess apps well fortunately you can

00:34:25,609 --> 00:34:29,149
probably breathe a sigh of relief

00:34:27,470 --> 00:34:31,820
because I have to say right now probably

00:34:29,149 --> 00:34:33,980
not really there are some good

00:34:31,820 --> 00:34:35,869
contenders though I would say these are

00:34:33,980 --> 00:34:40,040
the three of the most popular right now

00:34:35,869 --> 00:34:42,379
we've got sales Jess meteor Keystone so

00:34:40,040 --> 00:34:44,840
sales is probably the closest to Django

00:34:42,379 --> 00:34:48,770
and then it's just a server side NBC

00:34:44,840 --> 00:34:50,119
framework meteor and keystone are taking

00:34:48,770 --> 00:34:54,020
advantage of the fact that they are

00:34:50,119 --> 00:34:56,419
javascript to be full stack frameworks

00:34:54,020 --> 00:34:58,799
both client-side and server-side with

00:34:56,419 --> 00:35:02,230
one framework

00:34:58,799 --> 00:35:04,720
but I said not really why did I mean

00:35:02,230 --> 00:35:06,670
that well there is a lot of

00:35:04,720 --> 00:35:09,880
fragmentation here these are smaller

00:35:06,670 --> 00:35:12,309
communities and the project's just for

00:35:09,880 --> 00:35:15,579
dint of time at least now an honest

00:35:12,309 --> 00:35:17,559
mature so why would we consider picking

00:35:15,579 --> 00:35:19,630
a nodejs framework for our projects

00:35:17,559 --> 00:35:22,690
because a lot of people do there are

00:35:19,630 --> 00:35:25,900
people out there picking them but for

00:35:22,690 --> 00:35:29,559
most it's really tempting to be able to

00:35:25,900 --> 00:35:31,030
write just one language I could see how

00:35:29,559 --> 00:35:34,000
if you had a new team and you were

00:35:31,030 --> 00:35:35,710
getting them up to speed just saying

00:35:34,000 --> 00:35:38,650
okay you've got this one thing to learn

00:35:35,710 --> 00:35:40,390
it could be a real big advantage they

00:35:38,650 --> 00:35:43,540
also have this class support for

00:35:40,390 --> 00:35:45,430
asynchronous stuff there's the

00:35:43,540 --> 00:35:46,540
possibility of doing isomorphic render

00:35:45,430 --> 00:35:48,700
if you haven't heard that term before

00:35:46,540 --> 00:35:52,079
what it means is that if you've got

00:35:48,700 --> 00:35:54,940
client-side JavaScript pages you would

00:35:52,079 --> 00:35:57,819
render those initially on the server as

00:35:54,940 --> 00:35:59,619
a speed saving and serve those up and

00:35:57,819 --> 00:36:03,010
then everything works seamlessly after

00:35:59,619 --> 00:36:07,030
that as updates happen there's also

00:36:03,010 --> 00:36:09,790
WebSockets and this idea of making our

00:36:07,030 --> 00:36:12,400
back-end services more modular into

00:36:09,790 --> 00:36:15,839
micro services some of these javascript

00:36:12,400 --> 00:36:15,839
frameworks are quite well suited to that

00:36:16,650 --> 00:36:22,349
Django fights back well we can't compete

00:36:20,020 --> 00:36:27,220
on the one language thing we just can't

00:36:22,349 --> 00:36:29,170
but we have excellent documentation like

00:36:27,220 --> 00:36:31,180
I seriously have all of the hearts for

00:36:29,170 --> 00:36:33,670
janko's documentation it's my number one

00:36:31,180 --> 00:36:36,670
feature of the framework there's a great

00:36:33,670 --> 00:36:38,020
community and you just can't beat the

00:36:36,670 --> 00:36:41,680
maturity of the projects and the

00:36:38,020 --> 00:36:45,970
stability and the leadership some of

00:36:41,680 --> 00:36:48,430
those other features then Jenko with

00:36:45,970 --> 00:36:52,780
isomorphic render well you can either

00:36:48,430 --> 00:36:56,619
stick with your decoupled front-end and

00:36:52,780 --> 00:36:58,750
use a JavaScript service like next is I

00:36:56,619 --> 00:37:01,839
know there's one for view as well I

00:36:58,750 --> 00:37:03,309
forget the name exactly or you could

00:37:01,839 --> 00:37:04,960
look at this new library I haven't used

00:37:03,309 --> 00:37:08,079
this personally I only recently found

00:37:04,960 --> 00:37:10,059
out about it called Python react and

00:37:08,079 --> 00:37:11,460
that is going to help you still have to

00:37:10,059 --> 00:37:13,530
have a node.js

00:37:11,460 --> 00:37:15,960
server on your back in but it's going to

00:37:13,530 --> 00:37:19,160
help tie that isomorphic render back

00:37:15,960 --> 00:37:23,820
into your Jack and Django infrastructure

00:37:19,160 --> 00:37:26,030
WebSockets well channels was originally

00:37:23,820 --> 00:37:29,100
supposed to be launched as an official

00:37:26,030 --> 00:37:30,840
like go into cool Django that hasn't

00:37:29,100 --> 00:37:33,150
quite happened but it is an officially

00:37:30,840 --> 00:37:34,920
maintained power of Django now gives you

00:37:33,150 --> 00:37:37,080
that WebSockets functionality anna i

00:37:34,920 --> 00:37:39,360
time more besides and I'm really

00:37:37,080 --> 00:37:42,930
interested to find out more about it it

00:37:39,360 --> 00:37:44,370
looks really exciting if you're

00:37:42,930 --> 00:37:47,880
interested in that concept of

00:37:44,370 --> 00:37:50,070
micro-services we think of like weight

00:37:47,880 --> 00:37:52,050
and lean when we think of micro-services

00:37:50,070 --> 00:37:54,240
but I don't think that automatically

00:37:52,050 --> 00:37:55,950
rules Django out there's a taught by

00:37:54,240 --> 00:37:58,650
Paul Hallett that was given at Django

00:37:55,950 --> 00:38:01,350
con EU last year I believe there's a

00:37:58,650 --> 00:38:03,720
link to it there that talks about how

00:38:01,350 --> 00:38:12,720
they are using Django as microservices

00:38:03,720 --> 00:38:16,770
at their company right where do we go

00:38:12,720 --> 00:38:21,800
from here we've talked about what is and

00:38:16,770 --> 00:38:25,620
what was what about moving forwards

00:38:21,800 --> 00:38:30,240
browser and JavaScript functionality is

00:38:25,620 --> 00:38:33,710
going to keep on changing there is new

00:38:30,240 --> 00:38:36,120
functionality all the time

00:38:33,710 --> 00:38:36,600
progressive web apps are the next big

00:38:36,120 --> 00:38:40,920
thing

00:38:36,600 --> 00:38:44,460
there are notification API is to give

00:38:40,920 --> 00:38:48,860
push notifications to our phone we can

00:38:44,460 --> 00:38:51,540
do video and data transfer and now and

00:38:48,860 --> 00:38:53,340
there's also a talk later today that I'm

00:38:51,540 --> 00:38:55,200
really looking forward to which is the

00:38:53,340 --> 00:38:57,930
offline Django with service workers talk

00:38:55,200 --> 00:39:00,960
so I'm looking forward to that later on

00:38:57,930 --> 00:39:04,440
I think as all of these changes happen

00:39:00,960 --> 00:39:07,860
though Django and JavaScript continue to

00:39:04,440 --> 00:39:09,840
be good friends it's still an excellent

00:39:07,860 --> 00:39:11,520
partner in crime for today's modern web

00:39:09,840 --> 00:39:13,680
apps and web sites I'm still very happy

00:39:11,520 --> 00:39:15,920
to use it and I'm still very happy to be

00:39:13,680 --> 00:39:17,990
tangentially part of this community

00:39:15,920 --> 00:39:29,210
thank you very much

00:39:17,990 --> 00:39:29,210

YouTube URL: https://www.youtube.com/watch?v=BDhdlgENJu0


