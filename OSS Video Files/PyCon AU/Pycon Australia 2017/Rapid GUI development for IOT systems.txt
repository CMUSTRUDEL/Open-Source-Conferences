Title: Rapid GUI development for IOT systems
Publication date: 2017-08-05
Playlist: Pycon Australia 2017
Description: 
	David Tulloh

http://2017.pycon-au.org/schedule/presentation/71/

#pyconau

This talk was given at PyCon Australia 2017 which was held from 3-8 August, 2017 in Melbourne, Victoria.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2017, we're returning to Melbourne, bringing together students, enthusiasts, and professionals with a love of Python from around Australia, and from all over the World. 

August 3-8 2017, Melbourne, Victoria

Python, PyCon, PyConAU
Captions: 
	00:00:00,000 --> 00:00:04,500
living by the beach part and couldn't

00:00:02,340 --> 00:00:08,130
read any further out of jealousy

00:00:04,500 --> 00:00:10,410
so I'll let his speech to the talking

00:00:08,130 --> 00:00:17,580
for him so he can we all welcome David

00:00:10,410 --> 00:00:20,070
Tahoe thank you

00:00:17,580 --> 00:00:23,430
so this thank you for attending this

00:00:20,070 --> 00:00:26,430
talk is about implementing Dewey's on

00:00:23,430 --> 00:00:29,099
Internet of Things devices rapidly and a

00:00:26,430 --> 00:00:31,309
way of doing it which brings a whole

00:00:29,099 --> 00:00:35,670
bunch of unexpected benefits through the

00:00:31,309 --> 00:00:37,530
structure that you can use so because

00:00:35,670 --> 00:00:42,059
this is a Internet of Things talk I

00:00:37,530 --> 00:00:44,190
brought a thing as a crutch prop along

00:00:42,059 --> 00:00:47,090
so this is my my thing that I'm going to

00:00:44,190 --> 00:00:52,890
be talking about today we have our GUI

00:00:47,090 --> 00:00:53,910
very very basic we can we can normally

00:00:52,890 --> 00:00:56,030
of course on an Internet of Things

00:00:53,910 --> 00:00:58,079
device this would be a small touchscreen

00:00:56,030 --> 00:01:00,570
but I thought requiring everyone to

00:00:58,079 --> 00:01:03,930
bring binoculars would thin the audience

00:01:00,570 --> 00:01:06,750
a bit too much so this is my oversized

00:01:03,930 --> 00:01:12,030
screen this is my ancient finger

00:01:06,750 --> 00:01:14,970
emulation device and when you when you

00:01:12,030 --> 00:01:19,110
touch on the screen the ball changes

00:01:14,970 --> 00:01:21,930
color so the ball is my output we have

00:01:19,110 --> 00:01:24,299
we have our glowing orb and the glowing

00:01:21,930 --> 00:01:26,700
orb can switch colors it's all

00:01:24,299 --> 00:01:29,310
controlled by a little banana pie it's

00:01:26,700 --> 00:01:31,110
kind of like a raspberry pie it's not

00:01:29,310 --> 00:01:35,670
yellow but the raspberry pies aren't red

00:01:31,110 --> 00:01:38,549
so I think that's okay and and oh I've

00:01:35,670 --> 00:01:41,280
got some some arbitrary input GPIO input

00:01:38,549 --> 00:01:44,399
some big buttons for hit the red button

00:01:41,280 --> 00:01:47,780
it goes red fit the green switch it goes

00:01:44,399 --> 00:01:51,450
green and you'll see that the state is

00:01:47,780 --> 00:01:53,939
reflected through the system so if I hit

00:01:51,450 --> 00:01:58,759
the red switch here the ball goes red

00:01:53,939 --> 00:02:04,799
the GUI signifies that I've got red yeah

00:01:58,759 --> 00:02:06,659
and then we can go back and we switch

00:02:04,799 --> 00:02:08,300
the the mouse doesn't work well on the

00:02:06,659 --> 00:02:11,610
glass

00:02:08,300 --> 00:02:15,030
so the GUI that I'm using here is

00:02:11,610 --> 00:02:17,280
actually web-based you should probably

00:02:15,030 --> 00:02:21,120
get this out there pretty early on

00:02:17,280 --> 00:02:23,190
I hate gooeys I hate writing them with a

00:02:21,120 --> 00:02:25,680
passion I basically never subjected

00:02:23,190 --> 00:02:30,599
anyone who's been willing to pay me to

00:02:25,680 --> 00:02:33,750
my own GUI work using TK inter or

00:02:30,599 --> 00:02:35,760
something in Python it's it's okay for

00:02:33,750 --> 00:02:37,110
other people but but you know horrid

00:02:35,760 --> 00:02:37,980
alright just don't want to go anywhere

00:02:37,110 --> 00:02:40,620
near it

00:02:37,980 --> 00:02:44,430
so this is this is a web page it's a

00:02:40,620 --> 00:02:46,769
fairly it's a fairly basic web page on

00:02:44,430 --> 00:02:48,660
the left you can see a representation on

00:02:46,769 --> 00:02:52,890
the right that's the full HTML that's

00:02:48,660 --> 00:02:56,370
driving this web page the front half is

00:02:52,890 --> 00:02:57,959
a bit of JavaScript jQuery it's small

00:02:56,370 --> 00:03:02,010
you're not meant to read it there's a

00:02:57,959 --> 00:03:04,200
Python talk so I'm just calling a jQuery

00:03:02,010 --> 00:03:06,319
object which renders my my thing for me

00:03:04,200 --> 00:03:11,820
because I'm cheating and the second half

00:03:06,319 --> 00:03:15,420
builds a WebSocket connection I should

00:03:11,820 --> 00:03:19,170
probably say so this is this is all

00:03:15,420 --> 00:03:21,690
running the web the web browser etc is

00:03:19,170 --> 00:03:23,579
all running on a basic Linux system the

00:03:21,690 --> 00:03:25,680
web browser is a very basic embedded

00:03:23,579 --> 00:03:28,560
chromium browser

00:03:25,680 --> 00:03:32,190
it just gives us a single page you can

00:03:28,560 --> 00:03:36,150
serve this off the local filesystem if

00:03:32,190 --> 00:03:40,890
you want but it seems it seems fairly

00:03:36,150 --> 00:03:45,739
obvious that that you can extend this

00:03:40,890 --> 00:03:49,130
quite easily and have a separate client

00:03:45,739 --> 00:03:51,359
which interacts with the system so this

00:03:49,130 --> 00:03:57,630
if I break the third wall and use a

00:03:51,359 --> 00:03:59,040
mouse is that over here this is

00:03:57,630 --> 00:04:04,410
fantastic

00:03:59,040 --> 00:04:08,340
for development work you can run this

00:04:04,410 --> 00:04:09,930
off of a basic web server running on the

00:04:08,340 --> 00:04:12,720
device or you can run off the filesystem

00:04:09,930 --> 00:04:13,739
of the PC in question when you when

00:04:12,720 --> 00:04:15,440
you're doing development work or when

00:04:13,739 --> 00:04:19,220
you're doing a presentation and you're

00:04:15,440 --> 00:04:19,220
worried that things might break

00:04:19,269 --> 00:04:23,880
so this is the internet of things done

00:04:21,900 --> 00:04:31,000
tick

00:04:23,880 --> 00:04:37,300
it's internet but I know to get back to

00:04:31,000 --> 00:04:40,330
my slides so the server site consists of

00:04:37,300 --> 00:04:45,340
three classes again don't try and read

00:04:40,330 --> 00:04:47,169
this I'll zoom in a bit so the left-hand

00:04:45,340 --> 00:04:50,560
column you've got a light ball class

00:04:47,169 --> 00:04:54,400
which controls the light ball the center

00:04:50,560 --> 00:04:57,940
column is the WebSocket class which

00:04:54,400 --> 00:05:03,009
which provides all of our connection and

00:04:57,940 --> 00:05:05,080
the far side is main which which fires

00:05:03,009 --> 00:05:08,650
up tornado which is the library I'm

00:05:05,080 --> 00:05:12,490
using to drive all of this so if we zoom

00:05:08,650 --> 00:05:13,919
in this is the the light ball this is

00:05:12,490 --> 00:05:19,030
all of the code for the light ball

00:05:13,919 --> 00:05:24,699
there's a sorry I I have I have trimmed

00:05:19,030 --> 00:05:27,699
the list of colors it's just an array so

00:05:24,699 --> 00:05:31,479
so you can see we're holding a state for

00:05:27,699 --> 00:05:34,030
for the system here very simple get set

00:05:31,479 --> 00:05:37,330
and then the actual communication to the

00:05:34,030 --> 00:05:42,270
hardware ball is over infrared so I'm

00:05:37,330 --> 00:05:49,990
just calling IR send to update the color

00:05:42,270 --> 00:05:54,960
that I want to see this is the the first

00:05:49,990 --> 00:05:54,960
half of the the WebSocket handler code

00:05:55,289 --> 00:06:00,159
it's code actually is I think the most

00:05:58,719 --> 00:06:03,130
important code in the system

00:06:00,159 --> 00:06:06,190
it's the magic that makes this all work

00:06:03,130 --> 00:06:08,979
a new instance of this WebSocket handler

00:06:06,190 --> 00:06:11,830
is created for each connection and

00:06:08,979 --> 00:06:13,840
there's a global array hiding up the top

00:06:11,830 --> 00:06:16,539
there that you can see which this

00:06:13,840 --> 00:06:21,639
contains a list of all of the clients

00:06:16,539 --> 00:06:25,690
that that we're talking to so when when

00:06:21,639 --> 00:06:27,789
a connection is opened we add to that

00:06:25,690 --> 00:06:29,740
array when a connection is closed we

00:06:27,789 --> 00:06:32,710
pull out from that array and when we

00:06:29,740 --> 00:06:36,460
send a message we we take

00:06:32,710 --> 00:06:39,990
when we receive a message we take the

00:06:36,460 --> 00:06:44,230
incoming message little JSON string

00:06:39,990 --> 00:06:46,540
processor and then the updated which

00:06:44,230 --> 00:06:48,400
changes the state of the system and then

00:06:46,540 --> 00:06:53,230
the updated state is sent to every

00:06:48,400 --> 00:06:55,900
single client so there's no I think it's

00:06:53,230 --> 00:06:58,270
quite important to avoid sort of a state

00:06:55,900 --> 00:07:00,580
machine next state and stuff when you've

00:06:58,270 --> 00:07:03,790
got clients like this because you get

00:07:00,580 --> 00:07:06,930
out of sync so every client gets

00:07:03,790 --> 00:07:08,260
refreshed full state every tonic changes

00:07:06,930 --> 00:07:13,650
that's all

00:07:08,260 --> 00:07:18,870
that's five lines of code and it allows

00:07:13,650 --> 00:07:21,280
des structure this is the second half

00:07:18,870 --> 00:07:23,160
compared really it's fairly dull we do

00:07:21,280 --> 00:07:26,230
the processing and the updating here

00:07:23,160 --> 00:07:30,040
essentially and I'm just bringing in a

00:07:26,230 --> 00:07:31,930
JSON string pulling out the color and

00:07:30,040 --> 00:07:34,620
then the update rebuilds the JSON string

00:07:31,930 --> 00:07:34,620
since it again

00:07:35,950 --> 00:07:43,770
and then the the main the main code this

00:07:39,160 --> 00:07:56,130
is a basic tornado application it

00:07:43,770 --> 00:08:01,180
listens on a port for WebSockets right

00:07:56,130 --> 00:08:04,240
so we've created a WebSocket which

00:08:01,180 --> 00:08:06,520
allows communication in any help if you

00:08:04,240 --> 00:08:07,930
add documentation to that communication

00:08:06,520 --> 00:08:12,330
layer which of course you were going to

00:08:07,930 --> 00:08:15,430
do anyway I'm sure you've got an API

00:08:12,330 --> 00:08:18,340
almost any programming language supports

00:08:15,430 --> 00:08:21,400
WebSockets you publish that document and

00:08:18,340 --> 00:08:24,190
you've got a system for anyone to write

00:08:21,400 --> 00:08:27,430
any client to hook into your system get

00:08:24,190 --> 00:08:30,510
your state update your state control

00:08:27,430 --> 00:08:34,270
your thing figure out what's going on

00:08:30,510 --> 00:08:38,830
carry on that conversation further

00:08:34,270 --> 00:08:41,650
effectively no work authorization can be

00:08:38,830 --> 00:08:46,120
hooked in if you require it it's

00:08:41,650 --> 00:08:46,640
essentially a web system so any of those

00:08:46,120 --> 00:08:49,250
stand

00:08:46,640 --> 00:08:52,040
web authentication models I've

00:08:49,250 --> 00:08:55,490
implemented both to over a system like

00:08:52,040 --> 00:08:58,430
this can be done just need to to keep in

00:08:55,490 --> 00:09:06,050
mind you or your requirements for your

00:08:58,430 --> 00:09:07,700
device and and its connectivity back in

00:09:06,050 --> 00:09:11,780
clients I think this is where it gets

00:09:07,700 --> 00:09:13,190
really interesting so I've showed that

00:09:11,780 --> 00:09:15,470
you've got to hook multiple front end

00:09:13,190 --> 00:09:19,040
clients in that's fairly obvious once

00:09:15,470 --> 00:09:21,520
you start with a web system web sockets

00:09:19,040 --> 00:09:25,100
are allow extension on the back end to

00:09:21,520 --> 00:09:27,080
heavy processing or sections of code

00:09:25,100 --> 00:09:29,120
which you need to write in are you know

00:09:27,080 --> 00:09:32,720
lessor non Python language for some

00:09:29,120 --> 00:09:35,200
reason libraries or because you want you

00:09:32,720 --> 00:09:37,520
need true real time something like that

00:09:35,200 --> 00:09:39,800
all of that can be written as another

00:09:37,520 --> 00:09:43,550
program and then you link in via

00:09:39,800 --> 00:09:46,580
WebSocket the Python control code the

00:09:43,550 --> 00:09:49,430
the Python back-end is is in control of

00:09:46,580 --> 00:09:52,640
the system it maintains the state it

00:09:49,430 --> 00:09:55,490
coordinates all of the other clients and

00:09:52,640 --> 00:09:57,770
commands the system but you can you can

00:09:55,490 --> 00:10:01,220
use additional clients like this one

00:09:57,770 --> 00:10:03,350
this is a C WebSocket client this is

00:10:01,220 --> 00:10:07,160
actually running on this board to

00:10:03,350 --> 00:10:12,350
control these switches it allows me to

00:10:07,160 --> 00:10:14,000
not worry about nice things when trying

00:10:12,350 --> 00:10:15,710
to interact with the GPIOs I run a C

00:10:14,000 --> 00:10:21,380
program and I just pull the schmack out

00:10:15,710 --> 00:10:24,110
of it and then I let Linux handle you

00:10:21,380 --> 00:10:26,450
you know handle the the multi-threading

00:10:24,110 --> 00:10:30,050
type stuff for me because it's a

00:10:26,450 --> 00:10:31,580
different program it'll it'll just it's

00:10:30,050 --> 00:10:35,150
work I'm not going to go through this

00:10:31,580 --> 00:10:36,500
it's some off topic but the highlighted

00:10:35,150 --> 00:10:40,430
code is all the code that I had to

00:10:36,500 --> 00:10:44,480
actually write for their system it would

00:10:40,430 --> 00:10:49,010
have if I only had one switch but but

00:10:44,480 --> 00:10:51,110
the rest of it is basically a simple

00:10:49,010 --> 00:10:53,360
example of how to connect to a C web

00:10:51,110 --> 00:10:56,500
socket that I just downloaded off the

00:10:53,360 --> 00:11:00,160
internet and spliced in what I needed so

00:10:56,500 --> 00:11:00,160
it's easy to do

00:11:01,800 --> 00:11:07,510
distant background clients are possible

00:11:04,420 --> 00:11:10,180
as well I don't have a don't have a demo

00:11:07,510 --> 00:11:12,580
for this one unfortunately but in a

00:11:10,180 --> 00:11:16,600
complex embedded system what you tend to

00:11:12,580 --> 00:11:19,089
end up with is multiple chips so you'll

00:11:16,600 --> 00:11:20,320
have your central processor which will

00:11:19,089 --> 00:11:24,910
be a reasonable-sized

00:11:20,320 --> 00:11:29,910
arm you might have an FPGA or a cpld or

00:11:24,910 --> 00:11:32,770
little micros sort of arduino style

00:11:29,910 --> 00:11:35,620
systems around and then you you

00:11:32,770 --> 00:11:37,480
communicate generally by by serial port

00:11:35,620 --> 00:11:39,220
because it's nice and it's easy and

00:11:37,480 --> 00:11:44,980
something like Ethernet is just huge

00:11:39,220 --> 00:11:47,140
overkill on the board serial ports I'm

00:11:44,980 --> 00:11:50,170
sure every when I was a very basic you

00:11:47,140 --> 00:11:52,920
you open up pipe you just throw text

00:11:50,170 --> 00:11:54,130
data back and forth bi-directional or a

00:11:52,920 --> 00:11:57,270
WebSocket

00:11:54,130 --> 00:12:00,760
do you open a pipe you just throw data

00:11:57,270 --> 00:12:02,650
bi-directional back and forth if you

00:12:00,760 --> 00:12:08,760
needed to if you wanted to it's very

00:12:02,650 --> 00:12:12,480
very simple to create a emulation

00:12:08,760 --> 00:12:15,070
emulated WebSocket for a serial port

00:12:12,480 --> 00:12:16,810
because if you dress anything up in a

00:12:15,070 --> 00:12:22,720
duck suit you can make it look like a

00:12:16,810 --> 00:12:26,320
duck and that's that that's really

00:12:22,720 --> 00:12:30,760
powerful and it keeps again it keeps

00:12:26,320 --> 00:12:39,010
control in a very simple structure of

00:12:30,760 --> 00:12:43,600
code well there's more these days you it

00:12:39,010 --> 00:12:47,709
doesn't seem like you're properly IOT if

00:12:43,600 --> 00:12:50,020
you don't have an app it's sad but it

00:12:47,709 --> 00:12:52,630
seems to be true and you probably

00:12:50,020 --> 00:12:56,020
figured out by now I'm I mean I'm a

00:12:52,630 --> 00:12:58,089
cranky old curmudgeon I'm I'm not into

00:12:56,020 --> 00:13:01,560
writing apps it took me a couple of days

00:12:58,089 --> 00:13:06,490
to even get Android studio installed

00:13:01,560 --> 00:13:09,370
nicely on my system this is interesting

00:13:06,490 --> 00:13:12,760
new thing that Google's pushing called

00:13:09,370 --> 00:13:13,300
progressive web apps they're they bear a

00:13:12,760 --> 00:13:16,149
remark

00:13:13,300 --> 00:13:18,870
sym similarities to the Firefox OS

00:13:16,149 --> 00:13:21,760
concept of what an app would it be

00:13:18,870 --> 00:13:26,950
essentially it's a web page and it's

00:13:21,760 --> 00:13:37,300
locally cached so that you can use the

00:13:26,950 --> 00:13:43,180
system right Demming here so so this is

00:13:37,300 --> 00:13:49,480
an emulated Android system this is

00:13:43,180 --> 00:13:53,529
running connected to I think so so to

00:13:49,480 --> 00:13:56,079
build a progressive web app you need to

00:13:53,529 --> 00:13:59,079
fulfill three criteria it has to come

00:13:56,079 --> 00:14:03,690
across as SSL this is by far the hardest

00:13:59,079 --> 00:14:08,890
criteria to fulfill doing this on a

00:14:03,690 --> 00:14:11,230
embedded system is not easy and I'm I'm

00:14:08,890 --> 00:14:14,860
not going to give you the solution to

00:14:11,230 --> 00:14:17,440
that because I don't have it we need to

00:14:14,860 --> 00:14:19,750
supply a manifest file it's just a basic

00:14:17,440 --> 00:14:22,060
JSON file and we need to have a

00:14:19,750 --> 00:14:26,829
JavaScript serviceworker which is

00:14:22,060 --> 00:14:28,360
essentially a file that you download off

00:14:26,829 --> 00:14:32,770
the internet and you use stick next to

00:14:28,360 --> 00:14:37,420
your app so the JavaScript serviceworker

00:14:32,770 --> 00:14:41,190
is what does the the occasion for us so

00:14:37,420 --> 00:14:43,630
when you open this on your your phone

00:14:41,190 --> 00:14:46,660
you go to the URL and you open your own

00:14:43,630 --> 00:14:51,310
phone the second time that you go to the

00:14:46,660 --> 00:14:55,209
URL the user will be prompted to if they

00:14:51,310 --> 00:14:58,050
want to install this as an app they can

00:14:55,209 --> 00:14:58,050
at any point in time

00:14:59,790 --> 00:15:07,060
click and and so to add to homescreen

00:15:03,730 --> 00:15:10,120
and it will become as an app there is

00:15:07,060 --> 00:15:12,640
support this is Android supported by by

00:15:10,120 --> 00:15:14,680
Chrome there is support for the Apple

00:15:12,640 --> 00:15:20,260
and Microsoft operating systems a bit

00:15:14,680 --> 00:15:23,110
less but it does it does work if you go

00:15:20,260 --> 00:15:27,040
to the home screen you can see that I've

00:15:23,110 --> 00:15:32,920
installed this already click it

00:15:27,040 --> 00:15:36,190
comes up and it looks like a nap and and

00:15:32,920 --> 00:15:39,730
and this is I can't stress how easy this

00:15:36,190 --> 00:15:41,740
is to do you know someone like me can do

00:15:39,730 --> 00:15:58,360
it this morning while watching other

00:15:41,740 --> 00:16:00,850
talks okay so something it up we've got

00:15:58,360 --> 00:16:04,959
a WebSocket server that sits in the

00:16:00,850 --> 00:16:07,540
middle of its own little spiderweb you

00:16:04,959 --> 00:16:10,990
can you can have attached to it all

00:16:07,540 --> 00:16:12,670
sorts of clients you can have things

00:16:10,990 --> 00:16:15,250
like the attached screen you can have

00:16:12,670 --> 00:16:18,069
remote web clients you can have your

00:16:15,250 --> 00:16:20,920
public API your Android app all on the

00:16:18,069 --> 00:16:23,290
front end on the back end you can have

00:16:20,920 --> 00:16:26,430
long-running processors real time

00:16:23,290 --> 00:16:29,290
processors license restricted processors

00:16:26,430 --> 00:16:31,690
the the the application which is

00:16:29,290 --> 00:16:33,880
controlling my buttons for example is

00:16:31,690 --> 00:16:37,930
GPL due to the library that I'm using

00:16:33,880 --> 00:16:41,560
for that and then anything that would

00:16:37,930 --> 00:16:48,430
like an attached microcontroller can be

00:16:41,560 --> 00:16:52,839
swung in through there so I feel

00:16:48,430 --> 00:16:55,630
important to to get any questions the

00:16:52,839 --> 00:16:57,819
the source code for this the slides and

00:16:55,630 --> 00:17:00,339
the code that used is all available on

00:16:57,819 --> 00:17:02,920
github so you can go off and you can

00:17:00,339 --> 00:17:05,519
create your own glowing orb of

00:17:02,920 --> 00:17:05,519

YouTube URL: https://www.youtube.com/watch?v=_LBgIFPct-o


