Title: Harnessing the APIs you didn't know existed
Publication date: 2017-08-05
Playlist: Pycon Australia 2017
Description: 
	Katie Bell

http://2017.pycon-au.org/schedule/presentation/22/

#pyconau

This talk was given at PyCon Australia 2017 which was held from 3-8 August, 2017 in Melbourne, Victoria.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2017, we're returning to Melbourne, bringing together students, enthusiasts, and professionals with a love of Python from around Australia, and from all over the World. 

August 3-8 2017, Melbourne, Victoria

Python, PyCon, PyConAU
Captions: 
	00:00:00,000 --> 00:00:04,799
if it started next up is Katie Bell

00:00:02,460 --> 00:00:08,480
she's going to tell us about harnessing

00:00:04,799 --> 00:00:11,429
the api's we don't know that exists and

00:00:08,480 --> 00:00:14,250
well Katie is a software engineer from

00:00:11,429 --> 00:00:16,410
with passion for education she's been

00:00:14,250 --> 00:00:18,660
running the education track of Python

00:00:16,410 --> 00:00:20,970
for a couple of years now and she's

00:00:18,660 --> 00:00:23,550
currently wasting time on site projects

00:00:20,970 --> 00:00:25,980
apparently and well apparently also

00:00:23,550 --> 00:00:28,260
preparing talks so that's one thing

00:00:25,980 --> 00:00:31,529
she used well she's starting a new job

00:00:28,260 --> 00:00:34,739
in a couple of weeks and worked at croc

00:00:31,529 --> 00:00:43,379
learning before give her back up warm

00:00:34,739 --> 00:00:45,239
welcome this is a fairly beginner level

00:00:43,379 --> 00:00:47,280
talk so I apologize to anyone who's like

00:00:45,239 --> 00:00:49,350
oh I know all of this stuff already

00:00:47,280 --> 00:00:52,800
so just thought off with this talk is

00:00:49,350 --> 00:00:54,629
about api's or abstract programming

00:00:52,800 --> 00:00:56,039
interfaces this is very broad terms I'm

00:00:54,629 --> 00:00:58,379
gonna be a little bit more specific that

00:00:56,039 --> 00:00:59,910
I'm talking about web api is and if

00:00:58,379 --> 00:01:01,649
you're not familiar with what ap eyes

00:00:59,910 --> 00:01:04,019
look like that are publicly available on

00:01:01,649 --> 00:01:06,420
the web we're gonna go through an

00:01:04,019 --> 00:01:09,060
example to start off with so they have

00:01:06,420 --> 00:01:10,979
seen this site before who likes this

00:01:09,060 --> 00:01:14,430
light yeah old of all the same hands are

00:01:10,979 --> 00:01:18,270
up who has not seen this site before ok

00:01:14,430 --> 00:01:21,000
go there now we're also gonna go there

00:01:18,270 --> 00:01:24,659
now this site will tell you so it's a

00:01:21,000 --> 00:01:26,580
public database of data breaches that

00:01:24,659 --> 00:01:29,009
have occurred if a company who has a lot

00:01:26,580 --> 00:01:30,150
of billions of users and someone hacks

00:01:29,009 --> 00:01:31,860
into their system and then publicly

00:01:30,150 --> 00:01:33,630
releases usernames and passwords and

00:01:31,860 --> 00:01:36,360
details on the internet it is logged

00:01:33,630 --> 00:01:41,040
here so you can look up your own email

00:01:36,360 --> 00:01:43,259
this is not my email and it will find

00:01:41,040 --> 00:01:47,579
any data breaches that have occurred

00:01:43,259 --> 00:01:49,530
that included your details and it turns

00:01:47,579 --> 00:01:54,240
out tested example.com was involved in a

00:01:49,530 --> 00:01:57,950
lot of data breaches my own email is

00:01:54,240 --> 00:01:57,950
already in the slides so I might as open

00:02:00,890 --> 00:02:06,869
yeah lucky me

00:02:03,840 --> 00:02:09,899
ok um but say you're a company and you

00:02:06,869 --> 00:02:10,979
have 100 email addresses from people in

00:02:09,899 --> 00:02:13,230
your company you want you want to check

00:02:10,979 --> 00:02:13,860
if all of them if any of them have been

00:02:13,230 --> 00:02:15,540
involved

00:02:13,860 --> 00:02:16,800
some kind of data breach sir maybe one

00:02:15,540 --> 00:02:23,790
of your employees has had that password

00:02:16,800 --> 00:02:26,190
leaked there is this convenient API and

00:02:23,790 --> 00:02:28,740
so you can look at you know there's

00:02:26,190 --> 00:02:33,350
documentation here you can look up any

00:02:28,740 --> 00:02:36,230
breached account to see if it has been

00:02:33,350 --> 00:02:39,420
involved in some kind of data breach

00:02:36,230 --> 00:02:45,750
I've done this before and in the same

00:02:39,420 --> 00:02:47,900
way this is this is the okay the

00:02:45,750 --> 00:02:52,440
lifetime support can it go well today

00:02:47,900 --> 00:02:55,470
yes okay this is not very user friendly

00:02:52,440 --> 00:02:57,840
but this is much more friendly if you

00:02:55,470 --> 00:02:59,130
are writing a program to access this

00:02:57,840 --> 00:03:00,690
information

00:02:59,130 --> 00:03:02,850
Python makes this particularly easy

00:03:00,690 --> 00:03:05,130
since Python is very good sort of glue

00:03:02,850 --> 00:03:07,470
code for for bringing things together so

00:03:05,130 --> 00:03:09,750
using web api is through python is a

00:03:07,470 --> 00:03:15,830
really good way to access all of these

00:03:09,750 --> 00:03:18,510
tools that are out there for you sir

00:03:15,830 --> 00:03:22,470
this is how easy it is to fetch

00:03:18,510 --> 00:03:25,019
something from have I been born this is

00:03:22,470 --> 00:03:26,970
exactly the same email same URL that we

00:03:25,019 --> 00:03:29,730
went to in the browser you can fetch it

00:03:26,970 --> 00:03:32,730
using the Python requests library and

00:03:29,730 --> 00:03:34,650
then inspect the content so you know in

00:03:32,730 --> 00:03:38,640
the interest of testing the live dim

00:03:34,650 --> 00:03:39,989
regards it's one slightly different this

00:03:38,640 --> 00:03:43,680
one asks for a particular email address

00:03:39,989 --> 00:03:47,209
so I can say test add example.com it

00:03:43,680 --> 00:03:50,940
looks up and gives me again all of the

00:03:47,209 --> 00:03:53,910
pile of JSON information that is

00:03:50,940 --> 00:03:55,530
provided by have I been burned calm and

00:03:53,910 --> 00:04:01,920
I have a slightly different one here as

00:03:55,530 --> 00:04:04,860
well and we can use this in a bit of a

00:04:01,920 --> 00:04:08,480
nicer way so as an example actually

00:04:04,860 --> 00:04:08,480
that's I meant to sure

00:04:15,170 --> 00:04:25,540
if I use in this case it gives me a four

00:04:21,160 --> 00:04:25,540
this didn't happen when I was testing it

00:04:27,370 --> 00:04:35,419
now okay so normally it will give you a

00:04:33,110 --> 00:04:39,440
404 error message you know I have not

00:04:35,419 --> 00:04:43,870
could not find this page if the account

00:04:39,440 --> 00:04:43,870
was not used in any kind of data breach

00:04:44,139 --> 00:04:47,720
but in the same way we can then test

00:04:46,340 --> 00:04:49,100
that response code and say well if it

00:04:47,720 --> 00:04:51,949
wasn't found then we know the account is

00:04:49,100 --> 00:04:57,560
safe and if it was found we can use the

00:04:51,949 --> 00:04:59,750
Python built-in JSON library here to

00:04:57,560 --> 00:05:01,669
pause that response and then get all of

00:04:59,750 --> 00:05:04,490
the useful information out of it in a

00:05:01,669 --> 00:05:05,870
very very short Python program which

00:05:04,490 --> 00:05:07,760
then if you could you could imagine

00:05:05,870 --> 00:05:09,199
easily putting this in a full loop with

00:05:07,760 --> 00:05:10,400
a giant list of email addresses and

00:05:09,199 --> 00:05:12,500
you'd be able to check a whole bunch of

00:05:10,400 --> 00:05:16,780
them at the same time as long as you

00:05:12,500 --> 00:05:23,240
don't hit the rate limit as we have seen

00:05:16,780 --> 00:05:26,919
in the real world API is useful in a

00:05:23,240 --> 00:05:29,870
business context a lot you can have

00:05:26,919 --> 00:05:31,580
imagine your business and you want to

00:05:29,870 --> 00:05:33,590
publish to all of your social media at

00:05:31,580 --> 00:05:35,810
the same time almost all of the social

00:05:33,590 --> 00:05:37,820
media platforms have AP is that let you

00:05:35,810 --> 00:05:39,770
publish through the API so you can write

00:05:37,820 --> 00:05:41,060
one program to write one social media

00:05:39,770 --> 00:05:43,580
person then publish it everywhere at the

00:05:41,060 --> 00:05:45,349
same time in the same way if you're a

00:05:43,580 --> 00:05:47,780
business who's looking to capitalize on

00:05:45,349 --> 00:05:50,000
this you can make your own social media

00:05:47,780 --> 00:05:51,680
app that uses all of the api's and then

00:05:50,000 --> 00:05:54,680
you can sell that app to businesses who

00:05:51,680 --> 00:05:57,320
want to have only one app two poster so

00:05:54,680 --> 00:05:58,970
then there's like businesses who are

00:05:57,320 --> 00:05:59,990
built on top of the api's of other

00:05:58,970 --> 00:06:02,780
businesses and there's this whole

00:05:59,990 --> 00:06:05,210
ecosystem there and so generally you use

00:06:02,780 --> 00:06:06,409
ap is for automating tasks in the same

00:06:05,210 --> 00:06:07,699
way that all programs are designed to

00:06:06,409 --> 00:06:10,940
automate tasks that humans would

00:06:07,699 --> 00:06:13,520
otherwise be doing a lot of api's are

00:06:10,940 --> 00:06:15,110
providing a specialized data set that

00:06:13,520 --> 00:06:17,090
you might want to access if you're a

00:06:15,110 --> 00:06:20,240
business there are stock and Finance

00:06:17,090 --> 00:06:22,690
api's there are weather api's are a

00:06:20,240 --> 00:06:28,010
sports data API is there's a database of

00:06:22,690 --> 00:06:28,370
poetry and you can access these api's as

00:06:28,010 --> 00:06:31,040
a business

00:06:28,370 --> 00:06:34,040
some of them are paid and they will

00:06:31,040 --> 00:06:35,600
provide access to some database that is

00:06:34,040 --> 00:06:37,160
too big for you to have a copy of or

00:06:35,600 --> 00:06:38,660
it's something like the weather which is

00:06:37,160 --> 00:06:41,320
updated all at the time and so if

00:06:38,660 --> 00:06:44,030
someone is providing that as a service

00:06:41,320 --> 00:06:45,830
and the last one is a little bit more

00:06:44,030 --> 00:06:48,410
fuzzy it's generally their API is for

00:06:45,830 --> 00:06:50,060
doing some tasks that is otherwise very

00:06:48,410 --> 00:06:52,040
difficult for you as a programmer to

00:06:50,060 --> 00:06:53,330
implement so if you don't want to

00:06:52,040 --> 00:06:55,460
implement your own image recognition

00:06:53,330 --> 00:06:57,020
system there are api is where you can

00:06:55,460 --> 00:06:59,720
upload an image and it will tell you

00:06:57,020 --> 00:07:00,830
what is in that image in the same way

00:06:59,720 --> 00:07:03,139
their api is for doing machine

00:07:00,830 --> 00:07:05,780
translation of text can translate stuff

00:07:03,139 --> 00:07:10,400
there's a Klingon translation API which

00:07:05,780 --> 00:07:13,510
is actually really bad and a special

00:07:10,400 --> 00:07:17,960
notable one here is Twilio OPA api's

00:07:13,510 --> 00:07:19,850
were conveniently a sponsor they have a

00:07:17,960 --> 00:07:22,669
pis for allowing you to set up voice

00:07:19,850 --> 00:07:24,740
calls send and receive voice calls and

00:07:22,669 --> 00:07:26,389
text messages and otherwise access this

00:07:24,740 --> 00:07:27,979
whole world of like voice and text

00:07:26,389 --> 00:07:29,930
mobile communication that is otherwise

00:07:27,979 --> 00:07:33,410
very difficult to set up especially

00:07:29,930 --> 00:07:35,960
across countries so there's lots of cool

00:07:33,410 --> 00:07:37,700
api's out there but for this talk we're

00:07:35,960 --> 00:07:40,370
going to focus on just a bunch of tools

00:07:37,700 --> 00:07:42,620
that are useful for you to access these

00:07:40,370 --> 00:07:48,650
api's so we're gonna go through them

00:07:42,620 --> 00:07:50,360
fairly quickly and those tools are very

00:07:48,650 --> 00:07:52,039
useful not just for like in a business

00:07:50,360 --> 00:07:54,680
context to actually use for the real

00:07:52,039 --> 00:07:56,060
world but just to build fun things to

00:07:54,680 --> 00:07:57,470
play around with so some stuff that

00:07:56,060 --> 00:07:59,300
people have built with API is just for

00:07:57,470 --> 00:08:02,539
fun and for the learning experience

00:07:59,300 --> 00:08:05,930
presumably is things like this where

00:08:02,539 --> 00:08:08,870
accessing the IMDB API to grab 500

00:08:05,930 --> 00:08:13,370
Western titles would be very annoying on

00:08:08,870 --> 00:08:15,260
your own people have mashed up different

00:08:13,370 --> 00:08:17,120
api's together to say well if we use the

00:08:15,260 --> 00:08:19,310
Netflix API to find out what movies are

00:08:17,120 --> 00:08:21,680
on Netflix we can then rank them by the

00:08:19,310 --> 00:08:23,000
various different rating systems that

00:08:21,680 --> 00:08:24,260
are out there so we can find which ones

00:08:23,000 --> 00:08:27,650
are the best ones and which ones I can

00:08:24,260 --> 00:08:29,360
watch if you're interested in Twitter

00:08:27,650 --> 00:08:32,570
bots which are also a lot of fun I would

00:08:29,360 --> 00:08:35,779
highly recommend this talk from PyCon in

00:08:32,570 --> 00:08:37,520
the US 2016 about making Twitter BOTS

00:08:35,779 --> 00:08:38,990
it's really there's lots of fun ideas in

00:08:37,520 --> 00:08:41,390
there

00:08:38,990 --> 00:08:42,289
but so far we've only seen two of the

00:08:41,390 --> 00:08:45,199
tools that you might need

00:08:42,289 --> 00:08:48,709
to access these web api's so firstly the

00:08:45,199 --> 00:08:50,209
requests library and the JSON module for

00:08:48,709 --> 00:08:51,889
then pausing the response to these

00:08:50,209 --> 00:08:53,930
requests they're not all the api's ago

00:08:51,889 --> 00:08:58,250
to me in JSON but the vast majority of

00:08:53,930 --> 00:08:59,360
them these days are and so for the rest

00:08:58,250 --> 00:09:03,259
of the talk we're gonna go through an

00:08:59,360 --> 00:09:05,329
example app that I hacked together using

00:09:03,259 --> 00:09:09,709
an API and this is the cats versus dogs

00:09:05,329 --> 00:09:11,000
app which basically shows you you know

00:09:09,709 --> 00:09:12,529
it's just designed to determine

00:09:11,000 --> 00:09:15,620
conclusively like whether cats or dogs

00:09:12,529 --> 00:09:17,209
are cuter so of these two pictures the

00:09:15,620 --> 00:09:20,329
specific cat and the specific dog who

00:09:17,209 --> 00:09:23,180
thinks the cat is cuter yeah every

00:09:20,329 --> 00:09:24,680
thinks the dog is cuter yes all the dogs

00:09:23,180 --> 00:09:27,139
are winning a little bit but it's a

00:09:24,680 --> 00:09:29,959
little bit split and in order to do that

00:09:27,139 --> 00:09:31,940
we're gonna use the imagery API MgO is a

00:09:29,959 --> 00:09:36,560
is a great source of cat and dog

00:09:31,940 --> 00:09:39,529
pictures if you know where to look so

00:09:36,560 --> 00:09:42,589
we're gonna start with that the

00:09:39,529 --> 00:09:46,399
documentation is really good sir we're

00:09:42,589 --> 00:09:49,010
gonna look there and when you're getting

00:09:46,399 --> 00:09:50,360
started with using some new API I like

00:09:49,010 --> 00:09:53,990
to build a little Python program to

00:09:50,360 --> 00:09:56,329
access it well that's huge so we're

00:09:53,990 --> 00:09:58,490
looking for a particular gallery looking

00:09:56,329 --> 00:10:01,190
for a subreddit gallery and so we can

00:09:58,490 --> 00:10:03,350
find very quickly the URL that we want

00:10:01,190 --> 00:10:05,779
to access in order to get the

00:10:03,350 --> 00:10:08,089
information that we need and we can give

00:10:05,779 --> 00:10:13,610
a subreddit name and then so a couple of

00:10:08,089 --> 00:10:15,709
different parameters for that and so if

00:10:13,610 --> 00:10:17,060
we want the cat pictures subreddit this

00:10:15,709 --> 00:10:18,769
is basically all we have to do in order

00:10:17,060 --> 00:10:24,170
to get all of the information we need

00:10:18,769 --> 00:10:25,639
about those cat pictures or is it most

00:10:24,170 --> 00:10:28,670
api's that you'll find on the Internet

00:10:25,639 --> 00:10:30,769
have some kind of eye out identification

00:10:28,670 --> 00:10:33,529
or authentication method that you have

00:10:30,769 --> 00:10:35,089
to go through in the case of endo you

00:10:33,529 --> 00:10:37,699
have to sign up with an account and get

00:10:35,089 --> 00:10:39,709
a client ID and then use that client ID

00:10:37,699 --> 00:10:42,410
whenever you're making a request to the

00:10:39,709 --> 00:10:44,269
API and there's a lot of reasons that an

00:10:42,410 --> 00:10:46,009
API provider will do that but mostly

00:10:44,269 --> 00:10:48,829
it's because if someone is spamming the

00:10:46,009 --> 00:10:50,689
API and sending too much traffic or

00:10:48,829 --> 00:10:52,790
sending really big requests they can

00:10:50,689 --> 00:10:54,260
just block that one identifier and then

00:10:52,790 --> 00:10:56,180
the API will keep working for everybody

00:10:54,260 --> 00:10:57,770
else so that's

00:10:56,180 --> 00:10:59,810
sickly why it's there in a lot of cases

00:10:57,770 --> 00:11:02,870
it's not a super secure way of doing

00:10:59,810 --> 00:11:04,940
authentication sometimes you'll need to

00:11:02,870 --> 00:11:07,010
put it as an extra parameter to their

00:11:04,940 --> 00:11:09,050
request like that you have some API key

00:11:07,010 --> 00:11:11,360
that you put there in the case of the

00:11:09,050 --> 00:11:13,940
imager API it's an additional header

00:11:11,360 --> 00:11:15,620
that you add to the HTTP request and

00:11:13,940 --> 00:11:17,630
sometimes if it's like a post request

00:11:15,620 --> 00:11:19,970
you need to add the key to the payload

00:11:17,630 --> 00:11:22,399
that you're sending so that's not very

00:11:19,970 --> 00:11:27,380
consistent between different api's how

00:11:22,399 --> 00:11:28,700
this actually works but there's a couple

00:11:27,380 --> 00:11:31,070
of rules that you need to be careful of

00:11:28,700 --> 00:11:33,260
when you're using any kind of API key or

00:11:31,070 --> 00:11:36,470
indeed any kind of secret key is do not

00:11:33,260 --> 00:11:37,760
put the key in your source code the

00:11:36,470 --> 00:11:39,230
reason you don't want to put it in your

00:11:37,760 --> 00:11:40,760
source code is because if you put in

00:11:39,230 --> 00:11:44,029
your source code it will probably end up

00:11:40,760 --> 00:11:45,500
in your source code repository so you

00:11:44,029 --> 00:11:47,390
should also not put your keys in your

00:11:45,500 --> 00:11:49,459
source code repository because if you do

00:11:47,390 --> 00:11:51,080
that it makes it very easy to

00:11:49,459 --> 00:11:54,890
accidentally release it publicly on the

00:11:51,080 --> 00:11:56,270
internet if you look through various

00:11:54,890 --> 00:11:57,770
github repositories that are just

00:11:56,270 --> 00:11:59,060
available on the internet people have

00:11:57,770 --> 00:12:01,430
written scripts to go through and find

00:11:59,060 --> 00:12:03,350
all of the public API keys and all of

00:12:01,430 --> 00:12:04,660
the secret keys that are out there do

00:12:03,350 --> 00:12:07,670
not put them in your code

00:12:04,660 --> 00:12:10,870
this is probably the only like scary

00:12:07,670 --> 00:12:15,640
security thing that I will mention um

00:12:10,870 --> 00:12:18,050
what to do instead is to have I use the

00:12:15,640 --> 00:12:23,920
environment variable I can't highlight

00:12:18,050 --> 00:12:26,480
text on a slide the OS thought environ

00:12:23,920 --> 00:12:28,190
to get an environment variable that's

00:12:26,480 --> 00:12:29,660
set from outside the code and you can

00:12:28,190 --> 00:12:32,240
pull it in and we'll see a little bit

00:12:29,660 --> 00:12:34,760
later how to do that in the case of the

00:12:32,240 --> 00:12:36,830
imager API you then put that client ID

00:12:34,760 --> 00:12:40,480
into an extra header that you add to the

00:12:36,830 --> 00:12:43,970
request and then it should work so let's

00:12:40,480 --> 00:12:47,600
let's try that so I have here I'm gonna

00:12:43,970 --> 00:12:50,990
show everyone also you know don't put

00:12:47,600 --> 00:12:52,790
your key in a slide in a talk that's

00:12:50,990 --> 00:12:55,750
released as a public video but you know

00:12:52,790 --> 00:12:55,750
there's probably less bad

00:12:55,779 --> 00:13:08,350
sorry I will revert the chelated okay so

00:13:02,860 --> 00:13:10,089
we can fetch that API so this is yep

00:13:08,350 --> 00:13:13,660
this is exactly the code that was on the

00:13:10,089 --> 00:13:18,220
slide and it's returned to us this giant

00:13:13,660 --> 00:13:20,970
blob of JSON which is huge I wanted to

00:13:18,220 --> 00:13:25,509
get to the top here we go

00:13:20,970 --> 00:13:28,540
and it's an object with data with a list

00:13:25,509 --> 00:13:31,660
and this list contains information about

00:13:28,540 --> 00:13:36,569
each of the cat pictures that's at the

00:13:31,660 --> 00:13:39,839
top of the list so in that case we can

00:13:36,569 --> 00:13:43,300
reasonably simply change our script to

00:13:39,839 --> 00:13:45,129
pause the JSON response and use the

00:13:43,300 --> 00:13:46,809
random module to pick a random cat

00:13:45,129 --> 00:13:48,189
picture from the list of cat pictures

00:13:46,809 --> 00:13:57,040
returned and then print out just that

00:13:48,189 --> 00:14:00,759
cat picture okay and we see we have here

00:13:57,040 --> 00:14:05,680
the URL of a random cat hopefully that

00:14:00,759 --> 00:14:08,800
will learn hmm the demo gods are not

00:14:05,680 --> 00:14:14,279
happy okay um well that's learning oh

00:14:08,800 --> 00:14:14,279
here we go oh um

00:14:15,329 --> 00:14:21,689
why did my slide scare did I close my

00:14:19,449 --> 00:14:21,689
slides

00:14:32,540 --> 00:14:41,000
oh that's doesn't that's not the right

00:14:34,250 --> 00:14:43,010
slide well okay okay but if we wanted to

00:14:41,000 --> 00:14:45,200
take so we have a script that's fetching

00:14:43,010 --> 00:14:47,030
a random cat picture and we want to put

00:14:45,200 --> 00:14:48,530
this in an app that's public on the

00:14:47,030 --> 00:14:50,060
internet that then anyone can see you

00:14:48,530 --> 00:14:51,560
know cute cat and bug pictures because

00:14:50,060 --> 00:14:54,980
you know cat and dog pictures should be

00:14:51,560 --> 00:14:57,050
open to everybody if you have not

00:14:54,980 --> 00:15:01,810
already got a favorite web framework I

00:14:57,050 --> 00:15:01,810
would recommend flask probably go back

00:15:02,560 --> 00:15:06,770
plus it's pretty good it's very simple

00:15:05,090 --> 00:15:08,390
to get started with a very very simple

00:15:06,770 --> 00:15:10,790
web server so this is all the code that

00:15:08,390 --> 00:15:15,020
you need to have a web server that will

00:15:10,790 --> 00:15:17,060
learn a page that says hello world and

00:15:15,020 --> 00:15:18,410
if you don't already have a favorite way

00:15:17,060 --> 00:15:21,110
of doing this on the cloud

00:15:18,410 --> 00:15:24,680
Heroku I would recommend as the best way

00:15:21,110 --> 00:15:26,620
to get a service a web page hosted as a

00:15:24,680 --> 00:15:29,870
complete beginner they have a free tier

00:15:26,620 --> 00:15:32,270
and it is very easy very well documented

00:15:29,870 --> 00:15:36,170
and very easy to get started if you want

00:15:32,270 --> 00:15:37,820
to host a very basic flask app on Heroku

00:15:36,170 --> 00:15:40,220
these are all of the files that you need

00:15:37,820 --> 00:15:41,750
and then there's a Heroku command-line

00:15:40,220 --> 00:15:44,690
tool that you can install that then lets

00:15:41,750 --> 00:15:48,560
you deploy it very quickly so that is

00:15:44,690 --> 00:15:51,740
what I have used for the cats versus

00:15:48,560 --> 00:15:53,090
dogs site and basically if we put the

00:15:51,740 --> 00:15:56,870
code that we wrote before for fetching

00:15:53,090 --> 00:15:59,240
pictures into a separate function it's

00:15:56,870 --> 00:16:01,840
very simple to then grab that data put

00:15:59,240 --> 00:16:12,140
it into an HTML template and then have a

00:16:01,840 --> 00:16:13,700
hopefully working cats versus dogs that

00:16:12,140 --> 00:16:15,440
every time you load it it will pick a

00:16:13,700 --> 00:16:18,910
new random cat picture and a random dog

00:16:15,440 --> 00:16:21,560
picture and show them side by side

00:16:18,910 --> 00:16:25,520
fairly straightforward so this is the

00:16:21,560 --> 00:16:27,560
toolbox that we've got so far we're

00:16:25,520 --> 00:16:29,750
using the Python request library and the

00:16:27,560 --> 00:16:32,090
JSON module to send and receive messages

00:16:29,750 --> 00:16:34,280
with a public API we've learned how to

00:16:32,090 --> 00:16:35,990
handle API keys and store them in an

00:16:34,280 --> 00:16:37,310
environment variable and I probably

00:16:35,990 --> 00:16:38,810
should mention that Heroku has a really

00:16:37,310 --> 00:16:41,120
good method of you can go to the admin

00:16:38,810 --> 00:16:42,980
page and add in environment variables

00:16:41,120 --> 00:16:44,510
that are then stored in Heroku and are

00:16:42,980 --> 00:16:45,860
entirely separate from your source code

00:16:44,510 --> 00:16:46,250
so you can publish your source code on

00:16:45,860 --> 00:16:48,200
the Internet

00:16:46,250 --> 00:16:49,610
very easily and hurricanes keeping your

00:16:48,200 --> 00:16:52,310
your secret keys for use in actual

00:16:49,610 --> 00:16:56,270
production we've also had a brief look

00:16:52,310 --> 00:16:58,600
at flask and hooker and this gets us so

00:16:56,270 --> 00:17:02,990
far that we can have an app that's

00:16:58,600 --> 00:17:06,319
public on the internet and people can

00:17:02,990 --> 00:17:08,030
use it and it's fetching public data

00:17:06,319 --> 00:17:10,280
from an API using only just an

00:17:08,030 --> 00:17:13,520
Authenticator just to say this is who I

00:17:10,280 --> 00:17:15,199
am please don't block me there's a lot

00:17:13,520 --> 00:17:18,439
of api's out there that then let you

00:17:15,199 --> 00:17:20,870
access the private data of some user for

00:17:18,439 --> 00:17:24,800
example the Facebook API will let you

00:17:20,870 --> 00:17:26,360
access data on behalf of a user now it

00:17:24,800 --> 00:17:28,940
would be pretty insecure if there's API

00:17:26,360 --> 00:17:32,390
is just let you access any user that you

00:17:28,940 --> 00:17:36,440
wanted so the user has to then

00:17:32,390 --> 00:17:38,870
authenticate and say okay Facebook it's

00:17:36,440 --> 00:17:42,890
okay to give my daughter to this app

00:17:38,870 --> 00:17:47,720
okay and the way this is done is with

00:17:42,890 --> 00:17:49,640
OAuth and most of the api's that are out

00:17:47,720 --> 00:17:51,500
there that let you access data on behalf

00:17:49,640 --> 00:17:54,080
of a user for example the Spotify API

00:17:51,500 --> 00:17:55,820
will let you modify someone's playlists

00:17:54,080 --> 00:17:58,070
and play music on their behalf using

00:17:55,820 --> 00:17:59,270
their account Oh auth is the way that

00:17:58,070 --> 00:18:01,550
this is done and this is a standard

00:17:59,270 --> 00:18:05,000
protocol that's used across in fact this

00:18:01,550 --> 00:18:06,620
is auth - yeah so basically I as a user

00:18:05,000 --> 00:18:09,800
want to go to the cats and dogs app and

00:18:06,620 --> 00:18:11,480
say oh by the way this is and for this

00:18:09,800 --> 00:18:14,900
example we're gonna use slack

00:18:11,480 --> 00:18:17,270
integration to post cute pictures of

00:18:14,900 --> 00:18:19,970
cats and dogs into a slack channel on

00:18:17,270 --> 00:18:24,170
behalf of a user and since everyone is

00:18:19,970 --> 00:18:26,000
using slack from the PyCon slack channel

00:18:24,170 --> 00:18:28,640
this seemed like a good example Sarai is

00:18:26,000 --> 00:18:31,340
using me to somehow get it so that the

00:18:28,640 --> 00:18:34,570
cats and dogs API cats and dogs app can

00:18:31,340 --> 00:18:36,920
make requests to slack on my behalf

00:18:34,570 --> 00:18:40,520
so I tell so I go to cats versus dogs

00:18:36,920 --> 00:18:43,030
and the way this is done is cats versus

00:18:40,520 --> 00:18:46,010
dogs will create a special URL and

00:18:43,030 --> 00:18:48,200
redirect the user over to the slack api

00:18:46,010 --> 00:18:50,210
i Richard the slack service and then the

00:18:48,200 --> 00:18:51,980
user will see this like please

00:18:50,210 --> 00:18:53,300
authenticate we've seen one of these

00:18:51,980 --> 00:18:54,980
before where you have to like authorize

00:18:53,300 --> 00:18:57,380
an app to do something on your behalf

00:18:54,980 --> 00:18:59,990
yeah you've all seen this basically like

00:18:57,380 --> 00:19:03,110
this in the slack case

00:18:59,990 --> 00:19:05,000
looks a bit like this and the this oops

00:19:03,110 --> 00:19:09,020
I can't highlight things this URL is

00:19:05,000 --> 00:19:13,460
generated by the cats versus dogs app

00:19:09,020 --> 00:19:15,290
and we give it our secret client ID to

00:19:13,460 --> 00:19:16,490
say yes like this is well that's not

00:19:15,290 --> 00:19:20,690
actually I think it's just saying who we

00:19:16,490 --> 00:19:24,290
are we give it a URL to redirect back to

00:19:20,690 --> 00:19:26,360
on the cats vs. dogs app and the scope

00:19:24,290 --> 00:19:27,950
is defining which permissions that we

00:19:26,360 --> 00:19:29,420
want to ask for so in this case I'm

00:19:27,950 --> 00:19:31,070
asking for an incoming webhook

00:19:29,420 --> 00:19:32,390
permission there's lots of different

00:19:31,070 --> 00:19:35,030
permissions you can ask for permissions

00:19:32,390 --> 00:19:36,650
to post things on behalf of the user or

00:19:35,030 --> 00:19:38,030
read all of their channels or there's

00:19:36,650 --> 00:19:39,950
lots of very different specific

00:19:38,030 --> 00:19:42,380
permissions so that the user can see

00:19:39,950 --> 00:19:45,830
what permissions they're granting to the

00:19:42,380 --> 00:19:47,390
app in this user interface hosted by

00:19:45,830 --> 00:19:49,640
slack and so when you click the

00:19:47,390 --> 00:19:52,940
authorize button it goes back to that

00:19:49,640 --> 00:19:55,370
redirect URL that was provided in the

00:19:52,940 --> 00:19:59,240
link in the first place and slack will

00:19:55,370 --> 00:20:01,580
add a special one-time temporary card to

00:19:59,240 --> 00:20:03,590
that URL which is basically the code

00:20:01,580 --> 00:20:05,390
that says this is the code that you use

00:20:03,590 --> 00:20:07,910
to verify that the user has clicked the

00:20:05,390 --> 00:20:10,820
authorized button and what's good that

00:20:07,910 --> 00:20:12,850
was for so we make a request against mr.

00:20:10,820 --> 00:20:14,900
dogs it redirects us to slack it

00:20:12,850 --> 00:20:17,780
redirects us back to cats versus dogs

00:20:14,900 --> 00:20:19,940
with the code included and once cats

00:20:17,780 --> 00:20:22,490
versus dogs has that code it can then

00:20:19,940 --> 00:20:24,710
make a request using the Python requests

00:20:22,490 --> 00:20:27,380
module directly to slack saying this is

00:20:24,710 --> 00:20:28,910
my client ID my special client secret

00:20:27,380 --> 00:20:30,559
which again you should be very careful

00:20:28,910 --> 00:20:32,960
not to release to anyone publicly and

00:20:30,559 --> 00:20:35,690
the code that the user gave me and slack

00:20:32,960 --> 00:20:37,520
says okay I've I've verified who you are

00:20:35,690 --> 00:20:40,100
I verify that the user has authorized

00:20:37,520 --> 00:20:42,679
you here is an access token that will

00:20:40,100 --> 00:20:45,650
allow you to access that user's data on

00:20:42,679 --> 00:20:47,690
their behalf and so the cats vs. dog app

00:20:45,650 --> 00:20:50,000
needs to store that access token and

00:20:47,690 --> 00:20:52,040
they can keep it forever and use it the

00:20:50,000 --> 00:20:55,370
user can at any time revoke that access

00:20:52,040 --> 00:20:57,320
token to remove cats versus dogs as an

00:20:55,370 --> 00:20:59,780
authorized app and the access token

00:20:57,320 --> 00:21:03,800
looks something like this it's not a

00:20:59,780 --> 00:21:06,309
real access token but if this is too

00:21:03,800 --> 00:21:08,390
complicated to implement yourself

00:21:06,309 --> 00:21:09,740
conveniently there are libraries for

00:21:08,390 --> 00:21:11,540
this so it's important to understand

00:21:09,740 --> 00:21:13,460
roughly how it works but you don't need

00:21:11,540 --> 00:21:15,590
to implement all of that yourself

00:21:13,460 --> 00:21:19,360
there is a flask library that does this

00:21:15,590 --> 00:21:22,549
for you here is the setup for using

00:21:19,360 --> 00:21:25,789
slack both with the flask

00:21:22,549 --> 00:21:27,169
both lib it looks complicated but it's

00:21:25,789 --> 00:21:29,929
basically just a bunch of parameters

00:21:27,169 --> 00:21:31,460
that you shove in values for and if you

00:21:29,929 --> 00:21:33,320
want to know what values to put in you

00:21:31,460 --> 00:21:35,029
look at the slack documentation and go

00:21:33,320 --> 00:21:36,289
and this looks like an authorized URL

00:21:35,029 --> 00:21:40,190
I'm going to put it in the authorized

00:21:36,289 --> 00:21:41,750
URL field and you can reasonably easily

00:21:40,190 --> 00:21:43,279
get a worth working it will probably not

00:21:41,750 --> 00:21:49,399
work the first try but it might work on

00:21:43,279 --> 00:21:51,830
the fourth try and once you've got that

00:21:49,399 --> 00:21:54,919
Bartz it up you have you can there are

00:21:51,830 --> 00:21:57,380
these um functions in the flask orth

00:21:54,919 --> 00:22:00,860
library that let you create the redirect

00:21:57,380 --> 00:22:02,770
URL redirect to it and fetch the Turcan

00:22:00,860 --> 00:22:07,370
once the Turcan has been returned to you

00:22:02,770 --> 00:22:16,429
so that's all done for you so hopefully

00:22:07,370 --> 00:22:18,110
this this works I've added okay so this

00:22:16,429 --> 00:22:20,809
should in theory if everything works

00:22:18,110 --> 00:22:24,200
redirect me to the slack authorization

00:22:20,809 --> 00:22:26,000
page if the internet wants to work that

00:22:24,200 --> 00:22:31,279
would be good everyone stopped using the

00:22:26,000 --> 00:22:35,120
Wi-Fi I do have a back-up plan but I

00:22:31,279 --> 00:22:38,029
think it will get there eventually okay

00:22:35,120 --> 00:22:39,260
so what testing is my slack channel in

00:22:38,029 --> 00:22:41,240
this case if you have multiple slack

00:22:39,260 --> 00:22:43,789
accounts you can choose it here but I

00:22:41,240 --> 00:22:46,760
set up a bot testing channel cats versus

00:22:43,789 --> 00:22:50,539
dogs would like to post to some channel

00:22:46,760 --> 00:22:51,830
so I'm gonna push to the general channel

00:22:50,539 --> 00:22:53,870
and I'm going to authorize the cats

00:22:51,830 --> 00:22:57,919
versus dogs app specifically to post

00:22:53,870 --> 00:22:59,210
things to that channel ok and now I've

00:22:57,919 --> 00:23:03,980
come back to my cats versa to the book

00:22:59,210 --> 00:23:09,169
page and this is no it's got a hatch

00:23:03,980 --> 00:23:13,390
there okay so I can hopefully send oh I

00:23:09,169 --> 00:23:13,390
don't have slack open that might help

00:23:21,110 --> 00:23:31,429
while that's learning or not while

00:23:26,720 --> 00:23:35,360
that's loading gonna go through our tool

00:23:31,429 --> 00:23:37,220
box again sir sir

00:23:35,360 --> 00:23:38,420
the tools were recovered today we've

00:23:37,220 --> 00:23:39,559
probably covered them in enough detail

00:23:38,420 --> 00:23:41,090
that if you hadn't seen them before you

00:23:39,559 --> 00:23:42,200
would know how to use them but the

00:23:41,090 --> 00:23:45,770
documentation for all of these are

00:23:42,200 --> 00:23:47,510
really good the request library for

00:23:45,770 --> 00:23:50,150
making fetches to an API the JSON module

00:23:47,510 --> 00:23:52,120
for pausing the response handling API

00:23:50,150 --> 00:23:55,130
securely with environment variables

00:23:52,120 --> 00:23:56,960
using flask for web post and her occur

00:23:55,130 --> 00:23:58,130
for hosting an app on the Internet

00:23:56,960 --> 00:23:59,870
and we've gone through a little bit of

00:23:58,130 --> 00:24:03,200
how to use OAuth to access data on

00:23:59,870 --> 00:24:06,260
behalf of another user hopefully it's

00:24:03,200 --> 00:24:07,610
like yeah here we go um we now have a

00:24:06,260 --> 00:24:10,760
Catholic Jane I don't picture that has

00:24:07,610 --> 00:24:17,330
shown up in slack on behalf of the cats

00:24:10,760 --> 00:24:18,740
versus dogs app okay um that's why I

00:24:17,330 --> 00:24:21,080
just want to go through these are my two

00:24:18,740 --> 00:24:22,460
favorite places if you are like I want

00:24:21,080 --> 00:24:25,370
to build something using an API to

00:24:22,460 --> 00:24:30,110
develop my skills these are good places

00:24:25,370 --> 00:24:33,800
to to find that actually before I do

00:24:30,110 --> 00:24:35,210
that let's open one of these so mashape

00:24:33,800 --> 00:24:37,400
has like a marketplace a lot of these

00:24:35,210 --> 00:24:42,260
are paid but most of them are free this

00:24:37,400 --> 00:24:46,179
is it your to speak API if you go down

00:24:42,260 --> 00:24:48,940
there's another a meme generator API

00:24:46,179 --> 00:24:51,020
Netflix real real it I think it's

00:24:48,940 --> 00:24:53,510
finding something for you

00:24:51,020 --> 00:24:55,010
have a look through here I wanted to

00:24:53,510 --> 00:24:56,179
kind of pick a bunch of highlights but

00:24:55,010 --> 00:25:01,520
there were just too many things to

00:24:56,179 --> 00:25:03,110
choose from and another cool source that

00:25:01,520 --> 00:25:05,630
I found is essentially this like this

00:25:03,110 --> 00:25:10,400
guy's public github repository which is

00:25:05,630 --> 00:25:13,240
a giant list of things so if you're

00:25:10,400 --> 00:25:15,500
interested in science there's a NASA API

00:25:13,240 --> 00:25:18,440
and a sort of sunrise sunset and

00:25:15,500 --> 00:25:21,309
latitude API if you're interested in

00:25:18,440 --> 00:25:27,250
anything you will find an API for it

00:25:21,309 --> 00:25:27,250
sport you know it's it's pretty good

00:25:29,549 --> 00:25:34,600
so I highly recommend checking that out

00:25:31,899 --> 00:25:36,190
have a go even if you don't know what

00:25:34,600 --> 00:25:38,260
you want to build yet pick an API and

00:25:36,190 --> 00:25:39,700
get something working and by the time

00:25:38,260 --> 00:25:41,260
you've got it working you'll have all of

00:25:39,700 --> 00:25:42,370
these ideas for what you want to do with

00:25:41,260 --> 00:25:45,549
it

00:25:42,370 --> 00:25:47,940
so give it a shot thank you and are

00:25:45,549 --> 00:25:47,940
there any questions

00:25:51,840 --> 00:25:56,909
also the API URLs are there as well

00:25:58,230 --> 00:26:04,120
thank you for the for the talk and

00:26:01,320 --> 00:26:06,490
coffee mug for giving this talk and

00:26:04,120 --> 00:26:09,490
preparing it we have a couple of minutes

00:26:06,490 --> 00:26:13,000
for questions anybody up for questions

00:26:09,490 --> 00:26:18,330
who is from a minority or non dominant

00:26:13,000 --> 00:26:18,330
group in this audience please come up

00:26:36,130 --> 00:26:42,940
um I was just curious in your travels

00:26:40,510 --> 00:26:45,570
what's the most interesting or quirky

00:26:42,940 --> 00:26:48,190
API that you've come across Oh

00:26:45,570 --> 00:26:49,120
interesting I mean interesting in quirky

00:26:48,190 --> 00:26:50,799
it's kind of different there's lots of

00:26:49,120 --> 00:26:52,419
api's that I've looked at and gone and I

00:26:50,799 --> 00:26:54,280
want to find an excuse to use that I

00:26:52,419 --> 00:26:59,230
have not yet found an excuse for it yet

00:26:54,280 --> 00:27:00,549
I really like that there's actually the

00:26:59,230 --> 00:27:05,200
probably the weirdest one was like a

00:27:00,549 --> 00:27:06,820
cow's a API it was um you fetch and it

00:27:05,200 --> 00:27:09,130
returns you just fetch it and it returns

00:27:06,820 --> 00:27:10,960
to you an ASCII picture of a cow with an

00:27:09,130 --> 00:27:13,419
ASCII speech bubble with a random Accord

00:27:10,960 --> 00:27:17,200
in it oh yeah yeah I thought I'm

00:27:13,419 --> 00:27:19,090
actually probably the quirkiest on top

00:27:17,200 --> 00:27:22,030
of the like the euro to speak API or

00:27:19,090 --> 00:27:25,150
there's there's lots of them like a

00:27:22,030 --> 00:27:27,280
fandom for some fantasy series will have

00:27:25,150 --> 00:27:28,900
a database API where you can fetch

00:27:27,280 --> 00:27:30,100
information about the characters and

00:27:28,900 --> 00:27:31,980
they've gone to a lot of effort to like

00:27:30,100 --> 00:27:34,270
categorize things and it consists well

00:27:31,980 --> 00:27:35,470
so if you have a particular fandom that

00:27:34,270 --> 00:27:38,049
you're into you might find that there's

00:27:35,470 --> 00:27:39,940
a database of that for like computer it

00:27:38,049 --> 00:27:41,320
like there'd be a Minecraft API just for

00:27:39,940 --> 00:27:43,750
daughter about different kinds of

00:27:41,320 --> 00:27:45,490
Minecraft objects and mods bulbs and

00:27:43,750 --> 00:27:47,520
stuff yeah that makes sense cool thank

00:27:45,490 --> 00:27:47,520
you

00:27:48,240 --> 00:27:51,240
okay

00:27:57,320 --> 00:28:00,650

YouTube URL: https://www.youtube.com/watch?v=_VmgEASsPBI


