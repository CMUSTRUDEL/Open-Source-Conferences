Title: Finding Currajong - Fuzzy string searches in Python
Publication date: 2017-08-05
Playlist: Pycon Australia 2017
Description: 
	Martin Schweitzer

http://2017.pycon-au.org/schedule/presentation/91/

#pyconau

This talk was given at PyCon Australia 2017 which was held from 3-8 August, 2017 in Melbourne, Victoria.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2017, we're returning to Melbourne, bringing together students, enthusiasts, and professionals with a love of Python from around Australia, and from all over the World. 

August 3-8 2017, Melbourne, Victoria

Python, PyCon, PyConAU
Captions: 
	00:00:00,000 --> 00:00:04,020
is Martin Schweitzer Martin's a software

00:00:02,070 --> 00:00:06,089
developer tech leading is a manager at

00:00:04,020 --> 00:00:08,189
the Bureau of Meteorology he has a

00:00:06,089 --> 00:00:10,110
passion for solving complex problems on

00:00:08,189 --> 00:00:12,570
one of those I think is fuzzy string

00:00:10,110 --> 00:00:14,849
search so I'm gonna talk about finding

00:00:12,570 --> 00:00:25,699
courage on fuzzy string searches in

00:00:14,849 --> 00:00:28,500
Python Thank You Man thanks Andrea

00:00:25,699 --> 00:00:30,300
okay the earlier we had a few technical

00:00:28,500 --> 00:00:38,670
issues I hopefully there will be solved

00:00:30,300 --> 00:00:44,960
for now and we rely on some internet

00:00:38,670 --> 00:00:47,280
bandwidth so let's cross fingers okay so

00:00:44,960 --> 00:00:50,820
good software generally starts with a

00:00:47,280 --> 00:00:54,629
good user story and so we're gonna start

00:00:50,820 --> 00:00:56,160
this with a little mystery so I'm

00:00:54,629 --> 00:00:59,699
sitting out there the Sun is setting

00:00:56,160 --> 00:01:02,670
it's a nice red sunset and my mobile

00:00:59,699 --> 00:01:05,960
phone rings it's my partner who happens

00:01:02,670 --> 00:01:08,130
to be in West Australia prospecting and

00:01:05,960 --> 00:01:12,180
she says helped helped have been

00:01:08,130 --> 00:01:14,750
kidnapped I'm near Kurrajong and I've

00:01:12,180 --> 00:01:17,780
been I'm in the boot of a red car

00:01:14,750 --> 00:01:22,799
okay well time is of the essence

00:01:17,780 --> 00:01:24,330
so the first thing I do is go to the

00:01:22,799 --> 00:01:26,939
Gazette II of Australia because that's

00:01:24,330 --> 00:01:29,430
got what's it got three hundred and

00:01:26,939 --> 00:01:35,460
seventy thousand place names and I'll

00:01:29,430 --> 00:01:37,530
quickly tap in Kurrajong and hit enter

00:01:35,460 --> 00:01:41,520
this is where we hope we've got some

00:01:37,530 --> 00:01:45,380
internet connectivity and it's not the

00:01:41,520 --> 00:01:45,380
fastest search engine in the world

00:01:48,229 --> 00:01:52,939
and we see there's a whole lot of curry

00:01:50,360 --> 00:01:55,400
jobs there but none of them are in West

00:01:52,939 --> 00:01:59,590
Australia okay well what's the next

00:01:55,400 --> 00:02:05,590
thing we do we google it

00:01:59,590 --> 00:02:05,590
so that Google tap encourage um

00:02:10,500 --> 00:02:17,350
carriage on school not particularly

00:02:12,490 --> 00:02:20,170
helpful let's see anyway Google's not

00:02:17,350 --> 00:02:22,720
much help there so I do what any

00:02:20,170 --> 00:02:27,460
software developer would do I wrap my

00:02:22,720 --> 00:02:29,950
own app so I've called it message here

00:02:27,460 --> 00:02:31,540
and a sort of Martin's gazetteer

00:02:29,950 --> 00:02:39,820
download all the data from the desert

00:02:31,540 --> 00:02:41,550
here and I type in carriage on takes a

00:02:39,820 --> 00:02:45,270
few seconds

00:02:41,550 --> 00:02:45,270
fortunately I don't have that little

00:02:45,780 --> 00:02:51,250
search ok

00:02:50,170 --> 00:02:52,420
there's a whole lot of courage on

00:02:51,250 --> 00:02:55,870
through the sea but I see there is a

00:02:52,420 --> 00:02:59,920
spot in W a and it's called courage on

00:02:55,870 --> 00:03:04,150
with a K so what the rest of this talk

00:02:59,920 --> 00:03:05,590
is how do we do the kind of match where

00:03:04,150 --> 00:03:08,650
we've got names and they're not always

00:03:05,590 --> 00:03:10,420
correct somebody taps carriage on but

00:03:08,650 --> 00:03:14,110
the kind said over C E or C we instead

00:03:10,420 --> 00:03:21,430
of a K etcetera so let's have a look how

00:03:14,110 --> 00:03:23,650
we do it okay so this is what you can

00:03:21,430 --> 00:03:27,550
download the data from the gazetteer

00:03:23,650 --> 00:03:29,250
it's open data government data and as

00:03:27,550 --> 00:03:31,150
they mentioned earlier it's about

00:03:29,250 --> 00:03:33,100
370,000 place-names

00:03:31,150 --> 00:03:34,750
but if you look at something like

00:03:33,100 --> 00:03:36,790
Williamstown there's Williamstown Rock

00:03:34,750 --> 00:03:38,320
Williamstown Beach Williamstown Golf

00:03:36,790 --> 00:03:40,510
Course William Sound secondary school

00:03:38,320 --> 00:03:42,190
and so on so what I did was clean that

00:03:40,510 --> 00:03:46,810
date a bit and looked for only the

00:03:42,190 --> 00:03:51,160
places that were like place names so I

00:03:46,810 --> 00:03:55,000
got a vowel of about 80,000 place names

00:03:51,160 --> 00:03:57,880
as CSV so this all the examples we look

00:03:55,000 --> 00:04:01,900
at will be trolling through this file of

00:03:57,880 --> 00:04:06,040
80,000 names and looking for in this

00:04:01,900 --> 00:04:08,410
case carriage on and what will hope to

00:04:06,040 --> 00:04:12,400
see is carriage on with a K Plus maybe

00:04:08,410 --> 00:04:16,810
some other forms so the first technique

00:04:12,400 --> 00:04:19,030
that we use is one that a lot of sorry a

00:04:16,810 --> 00:04:22,750
lot of people know about called Hamming

00:04:19,030 --> 00:04:24,090
distance and quite simply if you've got

00:04:22,750 --> 00:04:26,290
two word

00:04:24,090 --> 00:04:28,840
you put them one on top of the other

00:04:26,290 --> 00:04:30,480
there Hamming distance is the number of

00:04:28,840 --> 00:04:33,520
differences between those two words as

00:04:30,480 --> 00:04:37,000
we compare them letter by letter

00:04:33,520 --> 00:04:38,590
so carriage on and carriage on the

00:04:37,000 --> 00:04:43,480
identicals for their Hamming distance is

00:04:38,590 --> 00:04:45,550
zero if I spell it with a K only the K

00:04:43,480 --> 00:04:49,060
is different so their Hamming distance

00:04:45,550 --> 00:04:52,330
there is one if I spent if I spelled

00:04:49,060 --> 00:04:53,830
carriage on with one R instead of two we

00:04:52,330 --> 00:04:56,290
run into okay

00:04:53,830 --> 00:04:58,480
sorry I've got courage on and Garry Wang

00:04:56,290 --> 00:05:01,900
and there we see quite clearly the

00:04:58,480 --> 00:05:05,820
Hamming distance is for the Cesar GE the

00:05:01,900 --> 00:05:10,510
use an a there is a one the jzw and

00:05:05,820 --> 00:05:12,490
finally if we leave out they are from

00:05:10,510 --> 00:05:14,950
Kurrajong suddenly we've got a distance

00:05:12,490 --> 00:05:19,270
of six because everything I shifted left

00:05:14,950 --> 00:05:23,320
one letter so from that point on however

00:05:19,270 --> 00:05:25,330
this can still be useful so it's very

00:05:23,320 --> 00:05:28,330
easy to implement which is an advantage

00:05:25,330 --> 00:05:32,500
of this algorithm what I've done day is

00:05:28,330 --> 00:05:35,440
just zip the Chi words together and then

00:05:32,500 --> 00:05:37,840
counted the number of differences using

00:05:35,440 --> 00:05:40,330
a list comprehension and return that and

00:05:37,840 --> 00:05:42,640
in this particular piece of code I've

00:05:40,330 --> 00:05:44,800
said if the distance between the words

00:05:42,640 --> 00:05:45,310
is less than three in other words zero

00:05:44,800 --> 00:05:48,790
one or two

00:05:45,310 --> 00:05:51,970
let's print that line of text so we run

00:05:48,790 --> 00:05:57,880
that using the word courage um over the

00:05:51,970 --> 00:05:59,680
GI data and we get 185 results and we

00:05:57,880 --> 00:06:04,930
get things like buried young Caracara

00:05:59,680 --> 00:06:07,270
manga career on Karawang etc and there's

00:06:04,930 --> 00:06:10,120
also quite a bit of noise one of the

00:06:07,270 --> 00:06:11,320
things about this algorithm is it's only

00:06:10,120 --> 00:06:13,990
the found if the two words are the same

00:06:11,320 --> 00:06:14,920
length so where we've got two words one

00:06:13,990 --> 00:06:17,590
is longer than the other

00:06:14,920 --> 00:06:21,640
we only compare up to the length of the

00:06:17,590 --> 00:06:24,190
shorter word however let's go to words

00:06:21,640 --> 00:06:27,820
where the Hamming distance is either 0 1

00:06:24,190 --> 00:06:29,770
and we see obviously we get fewer

00:06:27,820 --> 00:06:32,860
results because it's a subset of the

00:06:29,770 --> 00:06:35,410
first set and we get career on Karawang

00:06:32,860 --> 00:06:37,020
and we see we get the courage on with a

00:06:35,410 --> 00:06:40,190
K which is great

00:06:37,020 --> 00:06:43,319
we also get places like Mara and q CU e

00:06:40,190 --> 00:06:45,120
so it looks like an improvement but

00:06:43,319 --> 00:06:48,180
there's also noise we're getting some

00:06:45,120 --> 00:06:49,710
false positives as it were so we can

00:06:48,180 --> 00:06:54,569
improve this once again

00:06:49,710 --> 00:06:57,060
and what I've Dania is I've taken the

00:06:54,569 --> 00:06:59,789
hamming distance but that very lost LAN

00:06:57,060 --> 00:07:02,220
I've said if the word that we gave at

00:06:59,789 --> 00:07:05,400
like Q is shorter than the word we were

00:07:02,220 --> 00:07:07,979
looking for add a penalty

00:07:05,400 --> 00:07:09,780
I see people these slides will be

00:07:07,979 --> 00:07:11,400
available after the talk so if you want

00:07:09,780 --> 00:07:14,300
you can take photos but you don't have

00:07:11,400 --> 00:07:17,880
to so we've added a penalty at the end

00:07:14,300 --> 00:07:19,860
for words where their name is shorter

00:07:17,880 --> 00:07:21,720
than what we've tapped in we don't add a

00:07:19,860 --> 00:07:24,259
penalty if it's longer because we want

00:07:21,720 --> 00:07:28,050
to pick up things like courage on North

00:07:24,259 --> 00:07:30,900
when we run this improved Hamming we get

00:07:28,050 --> 00:07:32,250
barrage on camera manga career on etc we

00:07:30,900 --> 00:07:35,250
get the courage on that we're looking

00:07:32,250 --> 00:07:36,690
for which is important and we see we

00:07:35,250 --> 00:07:40,620
don't get to all those false positives

00:07:36,690 --> 00:07:43,500
like you so this is a pretty good result

00:07:40,620 --> 00:07:49,139
we've got thirty seven which is a nice

00:07:43,500 --> 00:07:51,180
size of a result set okay nice simple

00:07:49,139 --> 00:07:52,819
algorithm it's got some nice properties

00:07:51,180 --> 00:07:56,159
can we do better

00:07:52,819 --> 00:08:00,169
so the next thing I've tried is a really

00:07:56,159 --> 00:08:03,569
old algorithm called soundex sorry

00:08:00,169 --> 00:08:05,639
I'm rushing ahead of myself in this case

00:08:03,569 --> 00:08:07,080
we've looked for where we've got a

00:08:05,639 --> 00:08:09,750
distance less than two in other words

00:08:07,080 --> 00:08:12,960
zero one differences and in fact this is

00:08:09,750 --> 00:08:16,979
even better we get 21 we get the W

00:08:12,960 --> 00:08:19,680
acreage on and most of these results

00:08:16,979 --> 00:08:22,770
look pretty much like Kurrajong so in

00:08:19,680 --> 00:08:28,500
fact this is almost a benchmark for the

00:08:22,770 --> 00:08:30,569
moment okay so next algorithm we look at

00:08:28,500 --> 00:08:32,820
is called sound X and this was actually

00:08:30,569 --> 00:08:36,149
developed in the 1920s in fact before

00:08:32,820 --> 00:08:38,909
computers and what they did is they said

00:08:36,149 --> 00:08:41,880
take the first letter of the word so

00:08:38,909 --> 00:08:44,310
encourage on it would be C and then for

00:08:41,880 --> 00:08:46,800
the next three position will then remove

00:08:44,310 --> 00:08:50,010
any vowels that you have and then if

00:08:46,800 --> 00:08:53,580
you've got a B F pov

00:08:50,010 --> 00:08:58,650
replace it with a one if you've got cgj

00:08:53,580 --> 00:09:02,370
etc replace it with a 2 and re 6 etc so

00:08:58,650 --> 00:09:06,840
Kyra Jang we would have the C and then

00:09:02,370 --> 00:09:10,320
it would be adding 6 to 7 6 to 5

00:09:06,840 --> 00:09:12,450
and so what we can do is we can index

00:09:10,320 --> 00:09:15,840
every word you know did you know

00:09:12,450 --> 00:09:17,370
guess it here and we can say okay if

00:09:15,840 --> 00:09:19,290
it's equal to 6 to 5

00:09:17,370 --> 00:09:21,270
well according to this algorithm it

00:09:19,290 --> 00:09:25,620
sounds like Cara Jeong

00:09:21,270 --> 00:09:27,480
so the next algorithm is a bit more

00:09:25,620 --> 00:09:28,830
complex after this and so I look for a

00:09:27,480 --> 00:09:30,660
library that would have that algorithm

00:09:28,830 --> 00:09:33,110
so I wouldn't have to write it by hand

00:09:30,660 --> 00:09:35,400
I found this library called jellyfish

00:09:33,110 --> 00:09:37,740
fantastic library it's efficient it does

00:09:35,400 --> 00:09:40,230
exactly what you want we'll see it in a

00:09:37,740 --> 00:09:43,650
second and it also had the soundex so I

00:09:40,230 --> 00:09:47,730
decided to use the jellyfish soundex so

00:09:43,650 --> 00:09:51,270
yes my program we import jellyfish go

00:09:47,730 --> 00:09:56,580
through the gazetteer line by line we

00:09:51,270 --> 00:09:58,500
split those fields and if the soundex is

00:09:56,580 --> 00:10:01,620
the same as that value that signature we

00:09:58,500 --> 00:10:05,540
got for harijan we print that line so

00:10:01,620 --> 00:10:05,540
the code is fairly straightforward

00:10:06,800 --> 00:10:12,480
unfortunately the results aren't great

00:10:09,140 --> 00:10:15,450
so according to soundex all these words

00:10:12,480 --> 00:10:20,460
sound similar corrigan Corrigan's camp

00:10:15,450 --> 00:10:23,760
causing park crack neck point lookout so

00:10:20,460 --> 00:10:25,560
I think the advantage with sound X is

00:10:23,760 --> 00:10:27,420
almost every database has an

00:10:25,560 --> 00:10:30,510
implementation Oracle does equal lot

00:10:27,420 --> 00:10:32,040
Postgres and that comes back with it the

00:10:30,510 --> 00:10:34,190
disadvantages it's not particularly

00:10:32,040 --> 00:10:34,190
useful

00:10:36,200 --> 00:10:42,510
another one sort of advantage if it was

00:10:39,510 --> 00:10:45,060
even slightly useful is that you can pre

00:10:42,510 --> 00:10:47,610
index your list which of course we can't

00:10:45,060 --> 00:10:51,600
do with Hamming distance but once again

00:10:47,610 --> 00:10:54,330
it's not useful so somebody came up with

00:10:51,600 --> 00:10:57,020
I guess what would be thought of as an

00:10:54,330 --> 00:10:59,820
improvement to soundex called meta phone

00:10:57,020 --> 00:11:02,250
meta phone says okay drop duplicate

00:10:59,820 --> 00:11:05,670
adjacent letters except for see if the

00:11:02,250 --> 00:11:08,550
word begins with K and G and PN etc drop

00:11:05,670 --> 00:11:13,550
the first letter because things like not

00:11:08,550 --> 00:11:16,680
and new etc the first letter is silent

00:11:13,550 --> 00:11:19,110
drop B if after M at the end of the

00:11:16,680 --> 00:11:24,350
words I like um it would drop the B and

00:11:19,110 --> 00:11:29,480
it goes through 17 rules like that and

00:11:24,350 --> 00:11:32,340
comes up with a number or a transform

00:11:29,480 --> 00:11:34,410
that once again the idea is that similar

00:11:32,340 --> 00:11:39,330
words should have a similar meta phone

00:11:34,410 --> 00:11:43,380
and as I mentioned jellyfish has a meta

00:11:39,330 --> 00:11:45,180
phone function and so in fact all we've

00:11:43,380 --> 00:11:48,600
changed in this code is which function

00:11:45,180 --> 00:11:52,350
we calling before we called soundex now

00:11:48,600 --> 00:11:56,700
we calling meta phone and so let's have

00:11:52,350 --> 00:12:01,410
a look how meta phone does it doesn't do

00:11:56,700 --> 00:12:04,620
too badly it prints up Kurrajong in waa

00:12:01,410 --> 00:12:08,370
it also brings up Kara Jung and courage

00:12:04,620 --> 00:12:09,600
on which soundly enough one of the

00:12:08,370 --> 00:12:13,170
things you'll notice is that in that

00:12:09,600 --> 00:12:17,040
list it only picked up 10 results other

00:12:13,170 --> 00:12:19,950
algorithms gave us far more results one

00:12:17,040 --> 00:12:22,800
of the problems which of Sonia is that

00:12:19,950 --> 00:12:26,070
if we look for Melbourne it gives us

00:12:22,800 --> 00:12:29,870
Melbourne spelled how we'd expect and

00:12:26,070 --> 00:12:32,970
Melbourne but if we prepped Melbourne in

00:12:29,870 --> 00:12:35,460
because it here we found that there's

00:12:32,970 --> 00:12:37,410
things like no Burgin but there's also

00:12:35,460 --> 00:12:39,900
Melbourne North in Melbourne South which

00:12:37,410 --> 00:12:42,570
it didn't pick up because of the way the

00:12:39,900 --> 00:12:45,330
algorithm works so we can improve on

00:12:42,570 --> 00:12:46,800
meta phone by saying okay well if the

00:12:45,330 --> 00:12:48,149
person has given you a word eight

00:12:46,800 --> 00:12:50,399
letters long

00:12:48,149 --> 00:12:52,470
cut off the first ad letters of the word

00:12:50,399 --> 00:12:57,029
in the gazette e and compare that so

00:12:52,470 --> 00:12:59,579
that would work and so I did that and so

00:12:57,029 --> 00:13:05,459
we get our improved meta phone which has

00:12:59,579 --> 00:13:07,170
14 results and they look quite good they

00:13:05,459 --> 00:13:10,050
all sound like

00:13:07,170 --> 00:13:16,249
Kurrajong we didn't get the color one or

00:13:10,050 --> 00:13:16,249
the kuru Gong but they're reasonable

00:13:16,370 --> 00:13:26,730
okay so where do we go from yeah well we

00:13:21,540 --> 00:13:28,230
go back to the Hamming distance and we

00:13:26,730 --> 00:13:31,050
look at another algorithm called

00:13:28,230 --> 00:13:32,370
Levenstein distance so you'll remember

00:13:31,050 --> 00:13:35,550
with Hamming distance one of the

00:13:32,370 --> 00:13:38,009
problems was if a letter had been

00:13:35,550 --> 00:13:41,610
removed suddenly everything was out of

00:13:38,009 --> 00:13:44,279
whack and so with that courage on c and

00:13:41,610 --> 00:13:46,889
k we in the truck when I've left out the

00:13:44,279 --> 00:13:50,910
second R so we get distance of seven

00:13:46,889 --> 00:13:55,069
with lemonjon what it says is we will

00:13:50,910 --> 00:13:58,230
treat insertions deletions or

00:13:55,069 --> 00:14:01,230
substitutions as one let's say penalty

00:13:58,230 --> 00:14:04,100
point and so we can see that the C

00:14:01,230 --> 00:14:07,759
becoming a K because is a cost of 1 and

00:14:04,100 --> 00:14:10,410
the are being deleted is the cost of one

00:14:07,759 --> 00:14:13,730
so this algorithm Levenstein would

00:14:10,410 --> 00:14:16,350
return to when comparing those two words

00:14:13,730 --> 00:14:17,699
once again jellyfish happens to have 11

00:14:16,350 --> 00:14:21,149
stand distance which was really useful

00:14:17,699 --> 00:14:24,540
so once again the card was really easy

00:14:21,149 --> 00:14:26,160
and all we have to say is in this case

00:14:24,540 --> 00:14:28,709
if we've got a distance of less than 2

00:14:26,160 --> 00:14:33,559
in other words if there's 0-1 insertions

00:14:28,709 --> 00:14:37,259
deletions or substitutions we print this

00:14:33,559 --> 00:14:39,480
we get 28 results and we notice this

00:14:37,259 --> 00:14:42,240
will pick up things like Barragan which

00:14:39,480 --> 00:14:44,550
might have been didn't and it was they

00:14:42,240 --> 00:14:48,600
picked up carriage on this was with a

00:14:44,550 --> 00:14:51,480
distance of 2 so 0 1 or 228 results I

00:14:48,600 --> 00:14:54,449
reduced it to say okay only considered

00:14:51,480 --> 00:14:59,309
us with a distance of 0 1 and that gave

00:14:54,449 --> 00:15:01,540
us 15 results and as a test in each of

00:14:59,309 --> 00:15:04,000
these is does it pick up courage

00:15:01,540 --> 00:15:07,779
in Western Australia which clearly this

00:15:04,000 --> 00:15:11,589
one does it's also worth noting at the

00:15:07,779 --> 00:15:13,779
bottom that 0.1 seconds so most of the

00:15:11,589 --> 00:15:17,320
algorithms we've looked at so far have

00:15:13,779 --> 00:15:22,180
been between 0.1 and 0.3 to read a file

00:15:17,320 --> 00:15:26,500
of 80,000 lands pause the CSV and do

00:15:22,180 --> 00:15:29,230
whatever test so what was the algorithm

00:15:26,500 --> 00:15:34,779
I used when I did my initial message

00:15:29,230 --> 00:15:36,339
here well it's after doing a lot of

00:15:34,779 --> 00:15:38,230
reading and looking at algorithms I

00:15:36,339 --> 00:15:39,790
discovered that the patent library comes

00:15:38,230 --> 00:15:42,699
with an algorithm that returns

00:15:39,790 --> 00:15:46,750
differences between words and it's in a

00:15:42,699 --> 00:15:49,120
library called de flip and the function

00:15:46,750 --> 00:15:51,850
is Dilip doc sequence match and you give

00:15:49,120 --> 00:15:53,829
it two words and it returns a ratio if

00:15:51,850 --> 00:15:56,170
the rash I think is one it means the

00:15:53,829 --> 00:16:02,050
words are equal the less equal the words

00:15:56,170 --> 00:16:05,050
are below the ratio goes so this was my

00:16:02,050 --> 00:16:08,610
initial results it came up with 772

00:16:05,050 --> 00:16:11,470
results so I just sawed them by rank the

00:16:08,610 --> 00:16:14,860
highest ratio first it said twenty first

00:16:11,470 --> 00:16:17,380
twenty but problem yeah is looking at

00:16:14,860 --> 00:16:19,149
the timing it took more than ten times

00:16:17,380 --> 00:16:22,170
as long as any of the other algorithms

00:16:19,149 --> 00:16:24,339
or roughly ten times as long which I

00:16:22,170 --> 00:16:28,410
wasn't particularly happy with which

00:16:24,339 --> 00:16:33,579
explained my my first thing was so slow

00:16:28,410 --> 00:16:37,810
so I decided to use Levenstein but then

00:16:33,579 --> 00:16:39,399
I decided to improve it slightly and one

00:16:37,810 --> 00:16:40,720
of the good things about Levenstein that

00:16:39,399 --> 00:16:43,389
you don't get with things like meta

00:16:40,720 --> 00:16:46,540
final soundex it tells you it's he gives

00:16:43,389 --> 00:16:48,339
you a result of either 0 1 2 etc and I

00:16:46,540 --> 00:16:53,529
thought ok if they type in carriage on

00:16:48,339 --> 00:16:55,810
and there's carriage on North I'll i'm

00:16:53,529 --> 00:16:58,029
comparing only carriage on with Carrie

00:16:55,810 --> 00:16:59,740
Johnson getting 0 but because the word

00:16:58,029 --> 00:17:03,130
in the gazette here is longer allowed a

00:16:59,740 --> 00:17:04,990
penalty of 0.5 if it came up with one

00:17:03,130 --> 00:17:08,199
difference like carriage on with the c

00:17:04,990 --> 00:17:09,880
and a carriage on with a k and it came

00:17:08,199 --> 00:17:12,250
up with carriage on north that would be

00:17:09,880 --> 00:17:16,179
1.5 it would be one for the Levenstein

00:17:12,250 --> 00:17:18,699
distance plus 0.5 penalty

00:17:16,179 --> 00:17:23,079
and in the end what I did is I took the

00:17:18,699 --> 00:17:28,150
list that I had saved which said within

00:17:23,079 --> 00:17:30,340
my threshold of 2 or so on or 2.5 and I

00:17:28,150 --> 00:17:32,620
sorted it and I printed it out in order

00:17:30,340 --> 00:17:36,039
so that gave me for the word Kurrajong

00:17:32,620 --> 00:17:38,500
the first 20 results I was pretty happy

00:17:36,039 --> 00:17:40,390
with starting courage on with a C which

00:17:38,500 --> 00:17:42,789
is what we'd expect going to courage on

00:17:40,390 --> 00:17:45,490
with a K and then things like Cara Wong

00:17:42,789 --> 00:17:53,559
Beach Cara John Koerner courage on north

00:17:45,490 --> 00:17:55,809
and so on so the those are all the

00:17:53,559 --> 00:17:57,820
things that fell under what I was

00:17:55,809 --> 00:17:59,470
looking for but the other day I came

00:17:57,820 --> 00:18:00,809
across a really nice algorithm so

00:17:59,470 --> 00:18:04,150
thought I'll just share this one is a

00:18:00,809 --> 00:18:06,010
special surprise so I don't know if

00:18:04,150 --> 00:18:08,530
you've you must have come across certain

00:18:06,010 --> 00:18:11,140
search things like if you use Fame and

00:18:08,530 --> 00:18:14,409
you have used ctrl P fuzzy searches

00:18:11,140 --> 00:18:16,480
where you type something like Aurora jmg

00:18:14,409 --> 00:18:18,520
and it comes up with Kurrajong somehow

00:18:16,480 --> 00:18:23,620
magically if those letters appear in

00:18:18,520 --> 00:18:24,700
order it will find it so I came across

00:18:23,620 --> 00:18:27,360
this article and somebody had

00:18:24,700 --> 00:18:29,740
implemented a fuzzy search in Python and

00:18:27,360 --> 00:18:32,250
I'd never thought about how you do it

00:18:29,740 --> 00:18:36,309
but the method was ridiculously simple

00:18:32,250 --> 00:18:37,990
you take what the users typed in and you

00:18:36,309 --> 00:18:41,350
convert it to a regular expression with

00:18:37,990 --> 00:18:42,940
dot stars between each letter and then

00:18:41,350 --> 00:18:46,510
you search for that regular expression

00:18:42,940 --> 00:18:51,669
and we can implement that include really

00:18:46,510 --> 00:18:53,770
easily what we've done is this fuzzy

00:18:51,669 --> 00:18:57,520
founder takes the code that the person

00:18:53,770 --> 00:18:59,500
has typed in it uses dot star dot join

00:18:57,520 --> 00:19:01,150
whatever they've tapped in in other

00:18:59,500 --> 00:19:03,700
words said between each letter it will

00:19:01,150 --> 00:19:08,230
do dot star and it just uses path and

00:19:03,700 --> 00:19:13,000
standard reg X so using our RJ and G the

00:19:08,230 --> 00:19:16,860
last line inside this data we get

00:19:13,000 --> 00:19:19,030
courage wrong correct if I type C or R

00:19:16,860 --> 00:19:20,950
J&G we wouldn't have found coverage on

00:19:19,030 --> 00:19:25,120
with a k but I've been thinking about

00:19:20,950 --> 00:19:26,770
ways to get past that limitation what

00:19:25,120 --> 00:19:28,659
amazed me about this is that it's

00:19:26,770 --> 00:19:34,179
actually ridiculously fast which I

00:19:28,659 --> 00:19:36,429
expected 0.085 so this is in fact and

00:19:34,179 --> 00:19:37,539
thought to be the fastest algorithm of

00:19:36,429 --> 00:19:39,940
them all which surprised me because

00:19:37,539 --> 00:19:45,879
regular expressions can be incredibly

00:19:39,940 --> 00:19:47,440
slow so finally what do we conclude well

00:19:45,879 --> 00:19:49,419
I've said there's no single best

00:19:47,440 --> 00:19:51,279
algorithm you can't say I want to do

00:19:49,419 --> 00:19:53,679
fuzzy searches what's the bizarre rhythm

00:19:51,279 --> 00:19:56,080
it depends on your data it depends on

00:19:53,679 --> 00:20:00,789
what you consider false positives false

00:19:56,080 --> 00:20:01,989
negatives etc second one is that for

00:20:00,789 --> 00:20:04,599
each algorithm there's a trade-off

00:20:01,989 --> 00:20:08,349
between accuracy and speed as well as

00:20:04,599 --> 00:20:11,830
other things so some are more accurate a

00:20:08,349 --> 00:20:14,169
good ways actually you may find a hybrid

00:20:11,830 --> 00:20:15,849
of truth algorithms use one algorithm

00:20:14,169 --> 00:20:18,249
that gives you a wide range let's say

00:20:15,849 --> 00:20:19,840
you've got a million names you may use

00:20:18,249 --> 00:20:22,570
something like sound extra narrow that

00:20:19,840 --> 00:20:27,690
range down to a thousand 100 and then

00:20:22,570 --> 00:20:31,779
use Levenstein on that smaller set so

00:20:27,690 --> 00:20:33,519
you always there's a trade-off and then

00:20:31,779 --> 00:20:37,229
understanding how the algorithm works

00:20:33,519 --> 00:20:40,989
allows you to improve the algorithm and

00:20:37,229 --> 00:20:42,849
I added this that when I actually went

00:20:40,989 --> 00:20:46,509
back to the gazetteer about a week ago

00:20:42,849 --> 00:20:48,609
and noticed that it was doing fuzzy

00:20:46,509 --> 00:20:49,749
searches or maybe a month ago and then I

00:20:48,609 --> 00:20:52,779
went back to there and it didn't seem to

00:20:49,749 --> 00:20:55,840
be doing it again so I don't know what's

00:20:52,779 --> 00:21:00,489
happened there anyway how does our story

00:20:55,840 --> 00:21:05,320
end well it ended with me updating my

00:21:00,489 --> 00:21:08,739
algorithms I've now got its acreage on

00:21:05,320 --> 00:21:10,929
and I should get the results back a

00:21:08,739 --> 00:21:18,489
little bit faster depending on our

00:21:10,929 --> 00:21:21,869
internet ok and so now we can zoom in on

00:21:18,489 --> 00:21:26,200
this area because we want a happy ending

00:21:21,869 --> 00:21:29,009
and let's just soon we're playing CSI or

00:21:26,200 --> 00:21:29,009
one of those things

00:21:32,409 --> 00:21:46,480
ah is it little spot there so let's just

00:21:40,070 --> 00:21:46,480
zoom a bit more and we found the red car

00:21:47,289 --> 00:21:57,799
thanks very much thank you very much man

00:21:56,029 --> 00:22:00,350
for a very entertaining talk and he's a

00:21:57,799 --> 00:22:09,919
gift from the organizers do you have any

00:22:00,350 --> 00:22:11,869
questions for Martin up here yeah I was

00:22:09,919 --> 00:22:13,639
just wondering with the hamming distance

00:22:11,869 --> 00:22:15,710
did you think about differentiating

00:22:13,639 --> 00:22:19,429
between a Hamming distance that would be

00:22:15,710 --> 00:22:22,159
like C and K versus C and M because they

00:22:19,429 --> 00:22:23,720
just have seen in case similar sounds so

00:22:22,159 --> 00:22:25,429
it seems like CNM should be a 1 but

00:22:23,720 --> 00:22:26,899
maybe C in case should be 0.5 or

00:22:25,429 --> 00:22:29,720
something like that is that a

00:22:26,899 --> 00:22:32,929
consideration be okay simple answer is

00:22:29,720 --> 00:22:35,539
no I didn't consider that one of the

00:22:32,929 --> 00:22:39,139
things that Levenstein actually does

00:22:35,539 --> 00:22:41,809
offer is to give penalties to whether

00:22:39,139 --> 00:22:45,230
you inserting deleting or substitution

00:22:41,809 --> 00:22:47,749
and in the end you remember when we were

00:22:45,230 --> 00:22:51,080
looking at that fuzzy search one of the

00:22:47,749 --> 00:22:53,239
things I thought about is that where we

00:22:51,080 --> 00:22:56,659
had a C let's say we could replace it

00:22:53,239 --> 00:22:59,509
with a character class CK so it would do

00:22:56,659 --> 00:23:06,619
a fuzzy search on the character class CK

00:22:59,509 --> 00:23:09,100
star our our star in gee thanks any

00:23:06,619 --> 00:23:09,100
other questions

00:23:11,640 --> 00:23:16,860
I wanted to refer back to your comment

00:23:14,520 --> 00:23:19,140
about using different algorithms in

00:23:16,860 --> 00:23:21,929
tears you'll have filters along the way

00:23:19,140 --> 00:23:23,280
I think it'll really depend on what your

00:23:21,929 --> 00:23:25,350
definition of a false positive or

00:23:23,280 --> 00:23:28,650
negative is but have you found like is

00:23:25,350 --> 00:23:30,059
there consistently a tear that or set of

00:23:28,650 --> 00:23:32,390
hybrid methods in a particular order

00:23:30,059 --> 00:23:38,190
that really works well consistently

00:23:32,390 --> 00:23:40,500
Thanks right I haven't tried any but I

00:23:38,190 --> 00:23:42,390
guess the two broad classes of

00:23:40,500 --> 00:23:44,820
algorithms and the one is the ones that

00:23:42,390 --> 00:23:48,000
you can pre index like soundex meta

00:23:44,820 --> 00:23:50,130
finet cetera and so I think particularly

00:23:48,000 --> 00:23:52,950
if you've got something in a database so

00:23:50,130 --> 00:23:55,679
you could index on meta Ferren or

00:23:52,950 --> 00:23:58,650
there's actually an advancement on meta

00:23:55,679 --> 00:24:02,070
phone that that could work well as the

00:23:58,650 --> 00:24:04,679
first step in getting relevant or

00:24:02,070 --> 00:24:07,049
positive Possible's out of the database

00:24:04,679 --> 00:24:09,720
and then using the Python algorithm

00:24:07,049 --> 00:24:12,450
whichever one it is truthful to that

00:24:09,720 --> 00:24:15,440
list the second time but that's all I've

00:24:12,450 --> 00:24:15,440
really considered there

00:24:20,990 --> 00:24:25,880
thanks for the talk I've had good

00:24:23,480 --> 00:24:27,679
experience using a Python fuzzy matching

00:24:25,880 --> 00:24:29,650
library called fuzzy wuzzy I don't know

00:24:27,679 --> 00:24:32,510
if you came across that in your travels

00:24:29,650 --> 00:24:34,850
it is an implementation of Levenstein in

00:24:32,510 --> 00:24:36,049
distance and one of the neat things it

00:24:34,850 --> 00:24:38,720
does is automatically out-of-the-box

00:24:36,049 --> 00:24:41,840
gives you like multi token matching so

00:24:38,720 --> 00:24:44,630
for Karawang north it would do a

00:24:41,840 --> 00:24:47,600
separate test for boys tokens Karawang

00:24:44,630 --> 00:24:49,160
and north and then you found a match for

00:24:47,600 --> 00:24:51,470
every one of them then the whole two

00:24:49,160 --> 00:24:52,460
longer token would be a match so that's

00:24:51,470 --> 00:24:54,530
sort of how it gets around that problem

00:24:52,460 --> 00:24:55,880
that you alluded to so I guess that's

00:24:54,530 --> 00:24:58,910
possibly for of a comment but it's a

00:24:55,880 --> 00:25:04,820
good library for reference here yeah

00:24:58,910 --> 00:25:07,360
thanks I wasn't well faz he was he you

00:25:04,820 --> 00:25:07,360
know questions

00:25:11,540 --> 00:25:22,250
I sew just fish works on clearly works

00:25:17,060 --> 00:25:28,580
on English but have you tried like using

00:25:22,250 --> 00:25:31,900
it on other languages okay so that

00:25:28,580 --> 00:25:34,100
depends on the algorithm so for example

00:25:31,900 --> 00:25:37,490
meta fun and soundex

00:25:34,100 --> 00:25:39,860
are clearly English because they'll say

00:25:37,490 --> 00:25:42,800
okay Sienna K is a similar sound that B

00:25:39,860 --> 00:25:44,960
often M but when we get to things like

00:25:42,800 --> 00:25:46,790
Levenstein it really works only on the

00:25:44,960 --> 00:25:47,660
characters independent of what they

00:25:46,790 --> 00:25:50,600
sound like

00:25:47,660 --> 00:25:55,220
however I think yeah so in certain

00:25:50,600 --> 00:26:00,830
languages we may have things that have a

00:25:55,220 --> 00:26:02,960
longer distance but I think that from my

00:26:00,830 --> 00:26:05,900
experience the Levenstein works pretty

00:26:02,960 --> 00:26:07,610
well across languages because it doesn't

00:26:05,900 --> 00:26:10,220
care what the character represents or

00:26:07,610 --> 00:26:16,970
what sound it's only looking how many

00:26:10,220 --> 00:26:23,750
differences there are anymore if not

00:26:16,970 --> 00:26:25,070
please so I work in bone for medics and

00:26:23,750 --> 00:26:28,160
we do a lot of string matching but it's

00:26:25,070 --> 00:26:30,560
not English strings it's DNA strings and

00:26:28,160 --> 00:26:32,420
it's it's similar algorithms and one of

00:26:30,560 --> 00:26:35,120
the algorithms that gets used a lot is

00:26:32,420 --> 00:26:37,430
kind of an extension of Levenstein so

00:26:35,120 --> 00:26:38,690
11-time but with different scores for

00:26:37,430 --> 00:26:41,420
different characters if someone was just

00:26:38,690 --> 00:26:43,190
suggesting and different scores for shot

00:26:41,420 --> 00:26:44,930
gaps as opposed to long gaps

00:26:43,190 --> 00:26:47,090
I just wanted do you know if that sort

00:26:44,930 --> 00:26:48,800
of thing gets used in English string

00:26:47,090 --> 00:26:54,650
matching or are those algorithms

00:26:48,800 --> 00:26:57,200
available to you okay the simple answer

00:26:54,650 --> 00:26:59,570
is as as far as I'm aware not however

00:26:57,200 --> 00:27:01,400
there's one more algorithm that I didn't

00:26:59,570 --> 00:27:04,310
discuss which is Jerry Winkler and

00:27:01,400 --> 00:27:07,460
things like spell checkers a very common

00:27:04,310 --> 00:27:10,370
mistake also in things like snibson that

00:27:07,460 --> 00:27:11,900
is the transposition of two letters when

00:27:10,370 --> 00:27:18,560
people are typing they'll often tap

00:27:11,900 --> 00:27:20,980
friend FR ein d so gerrae Winkler will

00:27:18,560 --> 00:27:25,010
count that as a transposition as one and

00:27:20,980 --> 00:27:27,770
a insertion deletion itself as one as

00:27:25,010 --> 00:27:30,530
well so that's the only one I'm aware of

00:27:27,770 --> 00:27:33,620
I think obviously in band phonetics

00:27:30,530 --> 00:27:35,180
there's a lot more value in looking for

00:27:33,620 --> 00:27:37,550
those the strings are very long yeah

00:27:35,180 --> 00:27:47,440
yeah yeah so we have some different

00:27:37,550 --> 00:27:47,440
algorithmic last one

00:27:48,430 --> 00:27:55,010
so you mentioned sound X and meta phone

00:27:52,370 --> 00:27:57,770
as indexable phonetic structures do you

00:27:55,010 --> 00:28:00,800
know of any others I think there's one

00:27:57,770 --> 00:28:02,360
called meta fun too and I do believe

00:28:00,800 --> 00:28:03,350
that there's another one I can't think

00:28:02,360 --> 00:28:07,700
of it orphaned

00:28:03,350 --> 00:28:10,700
yeah I if he just will either google or

00:28:07,700 --> 00:28:13,730
go to Wikipedia meta phone I think I'll

00:28:10,700 --> 00:28:18,350
mention the other one which I can't

00:28:13,730 --> 00:28:19,920
think of now all right fantastic

00:28:18,350 --> 00:28:26,689
let's take Martin again

00:28:19,920 --> 00:28:26,689

YouTube URL: https://www.youtube.com/watch?v=Bn0KcWklf_4


