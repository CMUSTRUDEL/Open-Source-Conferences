Title: Teaching Object-Oriented Programming with Python
Publication date: 2017-08-05
Playlist: Pycon Australia 2017
Description: 
	Bruce Fuda

http://2017.pycon-au.org/schedule/presentation/94/

#pyconau

This talk was given at PyCon Australia 2017 which was held from 3-8 August, 2017 in Melbourne, Victoria.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2017, we're returning to Melbourne, bringing together students, enthusiasts, and professionals with a love of Python from around Australia, and from all over the World. 

August 3-8 2017, Melbourne, Victoria

Python, PyCon, PyConAU
Captions: 
	00:00:03,170 --> 00:00:12,000
okay thanks for coming back everybody up

00:00:07,109 --> 00:00:14,130
next we have Bruce futa so Bruce is now

00:00:12,000 --> 00:00:15,780
a computing education specialist at the

00:00:14,130 --> 00:00:17,940
Australian computing Academy which we

00:00:15,780 --> 00:00:20,340
heard about this morning but prior to

00:00:17,940 --> 00:00:22,400
that Bruce was acting is associate

00:00:20,340 --> 00:00:24,449
principal of Gungahlin college

00:00:22,400 --> 00:00:29,130
government school of around 1200

00:00:24,449 --> 00:00:30,599
students in year 11 and 12 and he was a

00:00:29,130 --> 00:00:33,120
writer on the Australian Curriculum

00:00:30,599 --> 00:00:34,469
technologies and he's been involved in

00:00:33,120 --> 00:00:36,360
projects across multiple Australian

00:00:34,469 --> 00:00:38,790
jurisdictions developing teacher

00:00:36,360 --> 00:00:39,750
capability and lesson resources to

00:00:38,790 --> 00:00:42,210
support the implementation and

00:00:39,750 --> 00:00:44,750
curriculum and he's here today to talk

00:00:42,210 --> 00:00:46,350
to us about introducing students to

00:00:44,750 --> 00:00:53,100
object-oriented programming

00:00:46,350 --> 00:00:55,079
thank you Bruce thanks Lee okay so what

00:00:53,100 --> 00:00:56,520
I thought I'd do today is I'd begin by

00:00:55,079 --> 00:00:57,960
giving a very quick overview of where

00:00:56,520 --> 00:00:59,850
things are in terms of the curriculum

00:00:57,960 --> 00:01:01,649
Amanda's talked a little bit about that

00:00:59,850 --> 00:01:03,300
so I won't spend too much time there

00:01:01,649 --> 00:01:05,100
then I'm gonna run you through the

00:01:03,300 --> 00:01:06,990
example we use in the classroom that we

00:01:05,100 --> 00:01:08,159
find is very accessible to students and

00:01:06,990 --> 00:01:09,689
I'll give you a quick look at some

00:01:08,159 --> 00:01:11,010
student work and I made sure that

00:01:09,689 --> 00:01:12,930
there's time for questions because I

00:01:11,010 --> 00:01:14,670
think this is a topic that some teachers

00:01:12,930 --> 00:01:17,460
find very challenging to introduce

00:01:14,670 --> 00:01:19,560
students to and I'm going to try to give

00:01:17,460 --> 00:01:23,040
you a strategy for making it accessible

00:01:19,560 --> 00:01:25,500
so a little bit more about me Nick's

00:01:23,040 --> 00:01:26,790
covered the the big stuff but basically

00:01:25,500 --> 00:01:28,409
I've been teaching in schools for about

00:01:26,790 --> 00:01:30,240
13 years I've worked with students

00:01:28,409 --> 00:01:33,780
primarily from year 6 up through to year

00:01:30,240 --> 00:01:35,549
12 and seeking year 9 through to 12 is

00:01:33,780 --> 00:01:38,189
involved teaching oh oh a lot of times

00:01:35,549 --> 00:01:40,590
so I've done it a little bit I am like I

00:01:38,189 --> 00:01:41,579
said I like my intro said I was involved

00:01:40,590 --> 00:01:42,060
in the writing of the Australian

00:01:41,579 --> 00:01:44,490
Curriculum

00:01:42,060 --> 00:01:46,140
and I also do a little bit of

00:01:44,490 --> 00:01:48,420
development on the side most of that is

00:01:46,140 --> 00:01:50,490
in the web space and it's to deal with

00:01:48,420 --> 00:01:52,140
systems in schools that are rubbish

00:01:50,490 --> 00:01:55,229
which if you're a teacher I'm sure you

00:01:52,140 --> 00:01:58,860
encounter on a daily basis so I use I

00:01:55,229 --> 00:02:03,210
use what I know to work around that so a

00:01:58,860 --> 00:02:05,640
bit about the curriculum and I want to

00:02:03,210 --> 00:02:07,799
start by just emphasizing once again the

00:02:05,640 --> 00:02:10,440
concepts that Amanda referred to in her

00:02:07,799 --> 00:02:13,020
keynote the curriculum does something

00:02:10,440 --> 00:02:14,970
very front to what other curriculum here

00:02:13,020 --> 00:02:18,090
is due in the Australian Curriculum in

00:02:14,970 --> 00:02:20,310
that it is all built on ten key concepts

00:02:18,090 --> 00:02:21,900
that have been and will continue to be

00:02:20,310 --> 00:02:24,090
true in computer science

00:02:21,900 --> 00:02:26,760
motion systems and that was intentional

00:02:24,090 --> 00:02:30,600
you can't design a curriculum in a

00:02:26,760 --> 00:02:32,880
learning area that changes so rapidly 15

00:02:30,600 --> 00:02:34,860
years ago we didn't have the iPhone we

00:02:32,880 --> 00:02:37,830
didn't have a lot of the services that

00:02:34,860 --> 00:02:39,420
we rely on daily now and given that the

00:02:37,830 --> 00:02:41,730
first students that do this curriculum

00:02:39,420 --> 00:02:44,550
officially around the country won't be

00:02:41,730 --> 00:02:47,040
in the workforce till 2036 and the

00:02:44,550 --> 00:02:49,260
curriculum was designed in 2010 that's

00:02:47,040 --> 00:02:51,540
basically dinosaurs running around on

00:02:49,260 --> 00:02:54,720
the planet in terms of where things go

00:02:51,540 --> 00:02:57,390
so what I'm going to focus on a two of

00:02:54,720 --> 00:02:59,430
these concepts but before I do that I

00:02:57,390 --> 00:03:01,350
think I'm gonna be a little bit more

00:02:59,430 --> 00:03:03,180
generous than Amanda was this morning

00:03:01,350 --> 00:03:05,010
I'm going to give an indication of where

00:03:03,180 --> 00:03:06,990
different jurisdictions around the

00:03:05,010 --> 00:03:10,380
country have committed to assessing this

00:03:06,990 --> 00:03:13,200
curriculum the good thing about Victoria

00:03:10,380 --> 00:03:15,420
is you sort of doing it already and WI

00:03:13,200 --> 00:03:17,190
have a committed and Queensland of all

00:03:15,420 --> 00:03:20,910
committed to be assessing this right now

00:03:17,190 --> 00:03:22,560
in 2017 in 2018 we'll see most of the

00:03:20,910 --> 00:03:25,620
country reporting on the curriculum

00:03:22,560 --> 00:03:27,840
formally but last year I gave a

00:03:25,620 --> 00:03:29,910
presentation and used a similar map like

00:03:27,840 --> 00:03:31,890
this to highlight that big gap in the

00:03:29,910 --> 00:03:34,410
middle we're pretty confident that by

00:03:31,890 --> 00:03:36,300
2019 New South Wales will be reporting

00:03:34,410 --> 00:03:37,680
on this too so it is something that

00:03:36,300 --> 00:03:39,720
we're going to see every student in the

00:03:37,680 --> 00:03:41,280
country exposed to and there are going

00:03:39,720 --> 00:03:43,650
to be challenges particularly in the

00:03:41,280 --> 00:03:46,020
higher year levels to introduce students

00:03:43,650 --> 00:03:49,950
to these concepts and ideas because they

00:03:46,020 --> 00:03:54,090
won't have the 11 or 10 years of prior

00:03:49,950 --> 00:03:55,770
experience when they do that so as far

00:03:54,090 --> 00:03:57,870
as programming goes in the curriculum

00:03:55,770 --> 00:03:59,280
there are a few there's a progression

00:03:57,870 --> 00:04:02,130
that I think is important to acknowledge

00:03:59,280 --> 00:04:04,170
and to be aware of in foundation to you

00:04:02,130 --> 00:04:06,270
to the early years of schooling there's

00:04:04,170 --> 00:04:08,520
actually no requirement for students to

00:04:06,270 --> 00:04:09,630
do any programming whatsoever we

00:04:08,520 --> 00:04:12,030
introduced them to the idea of

00:04:09,630 --> 00:04:14,730
algorithms and one of the best ways to

00:04:12,030 --> 00:04:16,530
introduce them to this idea and to the

00:04:14,730 --> 00:04:18,720
concepts of sequencing is through

00:04:16,530 --> 00:04:21,120
physical type activities so getting them

00:04:18,720 --> 00:04:23,370
to provide instructions to someone else

00:04:21,120 --> 00:04:25,410
to follow to to achieve something or

00:04:23,370 --> 00:04:26,730
doing something very simple with the

00:04:25,410 --> 00:04:28,380
technology like the bebo

00:04:26,730 --> 00:04:30,710
which is basically a little robot that

00:04:28,380 --> 00:04:33,030
you direct to move around the floor with

00:04:30,710 --> 00:04:35,250
instructions like forward back turn left

00:04:33,030 --> 00:04:37,470
and turn right those activities stress

00:04:35,250 --> 00:04:39,750
to students once of sequencing and

00:04:37,470 --> 00:04:41,580
understanding what that is as we move

00:04:39,750 --> 00:04:44,580
into the higher years of primary school

00:04:41,580 --> 00:04:45,930
we introduce the idea that not only

00:04:44,580 --> 00:04:47,400
should you be able to follow an

00:04:45,930 --> 00:04:49,170
algorithm but you need to be able to

00:04:47,400 --> 00:04:51,300
define a problem that an algorithm will

00:04:49,170 --> 00:04:53,670
solve design that solution and then

00:04:51,300 --> 00:04:55,320
implemented in code and we do that in

00:04:53,670 --> 00:04:57,510
the primary school through visual

00:04:55,320 --> 00:04:59,310
programming environments so scratch is

00:04:57,510 --> 00:05:01,200
probably the example most people are

00:04:59,310 --> 00:05:03,390
familiar with but it includes other

00:05:01,200 --> 00:05:05,130
other things like blockly Alice and a

00:05:03,390 --> 00:05:06,870
couple of other tools that generally get

00:05:05,130 --> 00:05:08,460
used quite extensively in schools

00:05:06,870 --> 00:05:10,500
already this is not something that's

00:05:08,460 --> 00:05:13,650
unknown but it is something that

00:05:10,500 --> 00:05:16,320
teachers in many cases haven't really

00:05:13,650 --> 00:05:18,840
had time or space in the curriculum to

00:05:16,320 --> 00:05:20,760
deliver on so by the time they hit you

00:05:18,840 --> 00:05:23,250
speaks they're doing branching they're

00:05:20,760 --> 00:05:25,170
doing iteration and they're dealing with

00:05:23,250 --> 00:05:27,260
user input and when we talk about user

00:05:25,170 --> 00:05:29,610
input in the curriculum we mean both

00:05:27,260 --> 00:05:31,800
direct user input with keyboard and

00:05:29,610 --> 00:05:33,090
mouse as well as environmental input so

00:05:31,800 --> 00:05:36,780
the kinds of things that you would get

00:05:33,090 --> 00:05:38,370
through a light sensor in robotics now

00:05:36,780 --> 00:05:40,080
when you hit gear seven and eight that's

00:05:38,370 --> 00:05:41,730
when we introduce the the text-based

00:05:40,080 --> 00:05:43,800
programming languages and we want

00:05:41,730 --> 00:05:45,540
schools to select a programming language

00:05:43,800 --> 00:05:47,730
that is general purpose not

00:05:45,540 --> 00:05:49,500
domain-specific and that's important

00:05:47,730 --> 00:05:51,570
because foundation to ouray to the

00:05:49,500 --> 00:05:53,610
compulsory years of the digital

00:05:51,570 --> 00:05:56,190
technology subject in schools and we

00:05:53,610 --> 00:05:57,690
want to equip students with a tool that

00:05:56,190 --> 00:05:59,010
will allow them to do things in other

00:05:57,690 --> 00:06:00,180
learning areas that they've never been

00:05:59,010 --> 00:06:01,950
able to do before

00:06:00,180 --> 00:06:04,020
so it's very very important that that

00:06:01,950 --> 00:06:06,450
that consideration is made when

00:06:04,020 --> 00:06:08,400
selecting a language in addition to

00:06:06,450 --> 00:06:10,170
being able to define a problem design a

00:06:08,400 --> 00:06:11,340
solution and implement it we want

00:06:10,170 --> 00:06:13,560
students to start thinking about

00:06:11,340 --> 00:06:16,260
validation and we want them to begin

00:06:13,560 --> 00:06:18,720
writing their code using functions this

00:06:16,260 --> 00:06:21,090
idea of being able to reuse things and

00:06:18,720 --> 00:06:23,340
design things that are general enough in

00:06:21,090 --> 00:06:24,930
nature to be reused is the concept that

00:06:23,340 --> 00:06:27,360
gets introduced in your 7 and 8 and

00:06:24,930 --> 00:06:30,030
that's the end of compulsory digital

00:06:27,360 --> 00:06:32,340
technologies in school so my focus today

00:06:30,030 --> 00:06:34,530
is on what is currently in the united

00:06:32,340 --> 00:06:36,510
ten elective subject and is often

00:06:34,530 --> 00:06:40,030
delivered at the moment in year 11 and

00:06:36,510 --> 00:06:41,530
12 curriculum areas if at all in schools

00:06:40,030 --> 00:06:43,300
many cases it's not until University

00:06:41,530 --> 00:06:45,070
that students get introduced to these

00:06:43,300 --> 00:06:46,990
ideas and when we're looking at

00:06:45,070 --> 00:06:48,760
object-oriented programming in addition

00:06:46,990 --> 00:06:51,520
to that we want students to be able to

00:06:48,760 --> 00:06:53,050
sort of distinguish between a program

00:06:51,520 --> 00:06:54,640
code that sits in a program and code

00:06:53,050 --> 00:06:57,610
that might live in an external module as

00:06:54,640 --> 00:06:59,710
well as being able to test their code

00:06:57,610 --> 00:07:01,690
and design test cases that will give

00:06:59,710 --> 00:07:04,470
them confidence in the correctness of

00:07:01,690 --> 00:07:08,080
the implementation of their algorithm

00:07:04,470 --> 00:07:09,430
now as far as the curriculum is

00:07:08,080 --> 00:07:11,740
concerned programming isn't the only

00:07:09,430 --> 00:07:13,870
place that object-oriented concepts live

00:07:11,740 --> 00:07:15,610
it's very important that data

00:07:13,870 --> 00:07:17,440
representation gets mentioned here as

00:07:15,610 --> 00:07:19,300
well and a pretty cool concept that's

00:07:17,440 --> 00:07:21,760
it's the at the core of the curriculum

00:07:19,300 --> 00:07:23,920
because one of the interesting things

00:07:21,760 --> 00:07:26,920
about the design part of the curriculum

00:07:23,920 --> 00:07:28,810
is that it was insisted that some things

00:07:26,920 --> 00:07:30,340
go above line in the knowledge and

00:07:28,810 --> 00:07:31,960
understanding strand and others who

00:07:30,340 --> 00:07:34,960
thinks it below in the processes and

00:07:31,960 --> 00:07:36,760
production skills and traditionally the

00:07:34,960 --> 00:07:38,410
knowledge strand has kind of been the

00:07:36,760 --> 00:07:40,000
stuff you need to know but don't

00:07:38,410 --> 00:07:42,070
actually need to do it's like you know

00:07:40,000 --> 00:07:44,140
the dates that World War two took place

00:07:42,070 --> 00:07:45,670
or who the prime minister is you don't

00:07:44,140 --> 00:07:47,380
do anything with that knowledge you just

00:07:45,670 --> 00:07:48,970
have to know it but the interesting

00:07:47,380 --> 00:07:50,350
thing about our subject is the whole

00:07:48,970 --> 00:07:51,520
thing's been designed so that it's

00:07:50,350 --> 00:07:53,380
practical that you're applying

00:07:51,520 --> 00:07:55,870
everything that you're doing there is no

00:07:53,380 --> 00:07:58,450
knowledge that sits on its own so we'll

00:07:55,870 --> 00:08:00,790
though this is a knowledge element of

00:07:58,450 --> 00:08:02,170
the curriculum one of the things we want

00:08:00,790 --> 00:08:04,060
to make sure students do is that they're

00:08:02,170 --> 00:08:06,790
doing they're using these ideas in

00:08:04,060 --> 00:08:08,260
practical contexts and object-oriented

00:08:06,790 --> 00:08:10,750
programming is a really good opportunity

00:08:08,260 --> 00:08:13,780
to explore structured representation and

00:08:10,750 --> 00:08:15,010
that's where 9 year 9 and 10 is where

00:08:13,780 --> 00:08:17,530
that kicks in in terms of the curriculum

00:08:15,010 --> 00:08:19,090
so we're taking this idea that things

00:08:17,530 --> 00:08:21,960
can be represented in different ways

00:08:19,090 --> 00:08:24,190
either as patterns or pictures or

00:08:21,960 --> 00:08:26,170
understanding the difference between the

00:08:24,190 --> 00:08:28,480
types of data that exist and we're

00:08:26,170 --> 00:08:30,190
taking it that little bit further to say

00:08:28,480 --> 00:08:32,590
that we can have these extremely complex

00:08:30,190 --> 00:08:34,780
things that we model in data and that

00:08:32,590 --> 00:08:37,360
the structure is really really important

00:08:34,780 --> 00:08:41,140
for us to be able to use that inside the

00:08:37,360 --> 00:08:43,990
programs that we write so as far as I

00:08:41,140 --> 00:08:47,050
always concerned the writers were very

00:08:43,990 --> 00:08:49,690
specific about what needs to be included

00:08:47,050 --> 00:08:52,450
for the object-oriented element of the

00:08:49,690 --> 00:08:53,700
curriculum to be addressed and I think

00:08:52,450 --> 00:08:55,980
it's really important

00:08:53,700 --> 00:08:58,080
every time we design a project that uses

00:08:55,980 --> 00:08:59,640
oh we make sure there are opportunities

00:08:58,080 --> 00:09:03,270
for students to explore these three

00:08:59,640 --> 00:09:05,070
things they are user-defined classes if

00:09:03,270 --> 00:09:06,930
they're not defining their own class if

00:09:05,070 --> 00:09:09,030
they're only using classes that exist

00:09:06,930 --> 00:09:11,550
already then they're not really being

00:09:09,030 --> 00:09:14,660
exposed to the power that an oo approach

00:09:11,550 --> 00:09:17,430
actually introduces in your applications

00:09:14,660 --> 00:09:19,200
secondly the concept of inheritance is

00:09:17,430 --> 00:09:20,670
really really important because it

00:09:19,200 --> 00:09:22,910
allows us to think about how we

00:09:20,670 --> 00:09:24,600
generalize things and how the

00:09:22,910 --> 00:09:26,460
representations that we use in our

00:09:24,600 --> 00:09:28,920
applications are designed in such a way

00:09:26,460 --> 00:09:32,250
that we can reuse code as much as

00:09:28,920 --> 00:09:33,600
possible and finally which sits with

00:09:32,250 --> 00:09:35,880
inheritance is the concept of

00:09:33,600 --> 00:09:37,770
polymorphism and again that's got to do

00:09:35,880 --> 00:09:40,080
it how we make use of the different

00:09:37,770 --> 00:09:42,810
things that exist in our code to make

00:09:40,080 --> 00:09:46,830
the applications that we develop simple

00:09:42,810 --> 00:09:48,720
and easy to follow so I want to clear

00:09:46,830 --> 00:09:50,460
something up very very quickly because

00:09:48,720 --> 00:09:52,920
this this gets thrown around a lot when

00:09:50,460 --> 00:09:55,200
we deliver at work with workshops with

00:09:52,920 --> 00:09:57,090
teachers and that is they say well

00:09:55,200 --> 00:09:59,100
scratch uses objects everywhere so I'm

00:09:57,090 --> 00:10:02,190
doing object-oriented programming now

00:09:59,100 --> 00:10:04,380
it's true scratch has objects but it's

00:10:02,190 --> 00:10:05,730
not object-oriented and that's because

00:10:04,380 --> 00:10:08,280
while they're present there are a number

00:10:05,730 --> 00:10:10,980
of things we can't do with the objects

00:10:08,280 --> 00:10:12,840
in scratch and so there is no way of

00:10:10,980 --> 00:10:14,790
defining your own class everything's a

00:10:12,840 --> 00:10:16,590
sprite or a background and you can

00:10:14,790 --> 00:10:18,510
attach things to those but you can't

00:10:16,590 --> 00:10:20,400
come up with some new data structure

00:10:18,510 --> 00:10:23,100
that allows you to do different things

00:10:20,400 --> 00:10:25,140
inside your program the other thing is

00:10:23,100 --> 00:10:27,240
there's no concept of inheritance or

00:10:25,140 --> 00:10:29,190
polymorphism there's a clone feature

00:10:27,240 --> 00:10:32,130
which allows you to make a copy of an

00:10:29,190 --> 00:10:34,920
object and rest and retain its existing

00:10:32,130 --> 00:10:36,750
state but it's not the same I mean

00:10:34,920 --> 00:10:39,330
you're basically creating a second

00:10:36,750 --> 00:10:41,790
object you're not doing anything in any

00:10:39,330 --> 00:10:45,830
way that takes advantage of the benefits

00:10:41,790 --> 00:10:47,670
of inheritance or polymorphism so what

00:10:45,830 --> 00:10:49,320
what one of the great things about

00:10:47,670 --> 00:10:51,840
Python is is that it's object-oriented

00:10:49,320 --> 00:10:53,010
but it's also a language that we can

00:10:51,840 --> 00:10:55,290
introduce earlier on as a

00:10:53,010 --> 00:10:57,330
general-purpose programming language in

00:10:55,290 --> 00:10:59,220
year seven and eight so I think one of

00:10:57,330 --> 00:11:01,920
the benefits of Python and the reason we

00:10:59,220 --> 00:11:03,900
use it extensively in our programming is

00:11:01,920 --> 00:11:05,910
that it's very very simple it's very

00:11:03,900 --> 00:11:07,110
very powerful and it does everything we

00:11:05,910 --> 00:11:09,269
need to be able to

00:11:07,110 --> 00:11:11,519
address the curriculum expectations so

00:11:09,269 --> 00:11:13,290
we have user-defined classes and what I

00:11:11,519 --> 00:11:15,149
like about the way the classes are

00:11:13,290 --> 00:11:17,370
defined in Python is that students who

00:11:15,149 --> 00:11:19,320
are seen functions before have basically

00:11:17,370 --> 00:11:21,779
seen class definition they're very

00:11:19,320 --> 00:11:23,910
similar in terms of their structure yep

00:11:21,779 --> 00:11:26,880
there is new keyword and the syntax is a

00:11:23,910 --> 00:11:29,040
little bit different but if you know and

00:11:26,880 --> 00:11:30,540
understand how function works then to

00:11:29,040 --> 00:11:34,380
make the transition to classes is a

00:11:30,540 --> 00:11:35,579
relatively easy step and it has those

00:11:34,380 --> 00:11:37,769
two concepts we were talking about

00:11:35,579 --> 00:11:39,600
before inheritance and polymorphism and

00:11:37,769 --> 00:11:42,510
what's really nice is that the way

00:11:39,600 --> 00:11:45,149
inheritance works is not crazy

00:11:42,510 --> 00:11:47,190
complicated the idea of the original

00:11:45,149 --> 00:11:49,980
object almost being a parameter for the

00:11:47,190 --> 00:11:51,480
class is something that again is very

00:11:49,980 --> 00:11:53,490
very similar to the way functions

00:11:51,480 --> 00:11:57,750
operate and it's easy to communicate and

00:11:53,490 --> 00:11:59,550
describe that to students so a little

00:11:57,750 --> 00:12:01,290
bit about the framework that we use at

00:11:59,550 --> 00:12:03,060
Gungahlin College and that I used at the

00:12:01,290 --> 00:12:05,190
previous school before that strongly hi

00:12:03,060 --> 00:12:07,620
when I was teaching this because I think

00:12:05,190 --> 00:12:10,410
it's really important that we understand

00:12:07,620 --> 00:12:12,300
what the thinking behind the approach is

00:12:10,410 --> 00:12:14,940
now there are three elements the way we

00:12:12,300 --> 00:12:16,620
deliver the first is that we draw that

00:12:14,940 --> 00:12:20,010
there are opportunities for the teacher

00:12:16,620 --> 00:12:21,600
to explicitly teach the ideas so that we

00:12:20,010 --> 00:12:23,220
can be confident that the students

00:12:21,600 --> 00:12:24,630
understand the concepts that they're

00:12:23,220 --> 00:12:27,779
going to be using in their various

00:12:24,630 --> 00:12:30,510
applications because we want this to

00:12:27,779 --> 00:12:31,769
form the basis of their understanding so

00:12:30,510 --> 00:12:33,959
that they can use it in other learning

00:12:31,769 --> 00:12:37,019
areas as well and projects beyond the

00:12:33,959 --> 00:12:39,329
digital technologies in addition to that

00:12:37,019 --> 00:12:41,519
we want students to be able to go as far

00:12:39,329 --> 00:12:43,170
as they want once they're there over

00:12:41,519 --> 00:12:46,470
answer on top of the this there's the

00:12:43,170 --> 00:12:47,670
founder foundations of our so we provide

00:12:46,470 --> 00:12:49,260
a lot of additional resources to

00:12:47,670 --> 00:12:51,510
students I'm going to show you two of

00:12:49,260 --> 00:12:54,750
those that are specific to oo that we

00:12:51,510 --> 00:12:56,100
use in class but primarily the idea is

00:12:54,750 --> 00:12:57,930
that we want to make sure everything is

00:12:56,100 --> 00:13:00,089
open enough for students to be able to

00:12:57,930 --> 00:13:02,850
take what they've learned and go in any

00:13:00,089 --> 00:13:04,470
direction they like and finally we want

00:13:02,850 --> 00:13:06,240
to make sure that those projects that we

00:13:04,470 --> 00:13:08,519
set as far as assessment are concerned

00:13:06,240 --> 00:13:10,260
and that we do in class are as practical

00:13:08,519 --> 00:13:12,449
and engaging as possible for students

00:13:10,260 --> 00:13:16,380
and we want to make sure that that same

00:13:12,449 --> 00:13:18,420
scope for exploration is present in the

00:13:16,380 --> 00:13:20,579
in the activities that they're doing for

00:13:18,420 --> 00:13:22,379
assessment as well as classwork

00:13:20,579 --> 00:13:24,269
cause it's going to keep them engaged

00:13:22,379 --> 00:13:26,040
and it's going to mean that there's more

00:13:24,269 --> 00:13:27,449
opportunity for students regardless of

00:13:26,040 --> 00:13:30,179
where they are to be able to achieve

00:13:27,449 --> 00:13:34,499
something in terms of their their output

00:13:30,179 --> 00:13:36,720
their final product so how do we teach

00:13:34,499 --> 00:13:39,089
it the first thing that I think we

00:13:36,720 --> 00:13:41,249
emphasize with students is that the idea

00:13:39,089 --> 00:13:42,839
of an object-oriented approach is to

00:13:41,249 --> 00:13:44,910
change the level of abstraction we're

00:13:42,839 --> 00:13:47,279
working with so that we have some way of

00:13:44,910 --> 00:13:49,559
modeling the objects that exist in the

00:13:47,279 --> 00:13:52,379
program in a similar way as we would

00:13:49,559 --> 00:13:56,579
model real-world objects so everything

00:13:52,379 --> 00:13:59,730
that put inside a class is describing

00:13:56,579 --> 00:14:02,639
something that is common to a group of

00:13:59,730 --> 00:14:04,980
things the idea of a class being a sort

00:14:02,639 --> 00:14:06,809
of description that contains the common

00:14:04,980 --> 00:14:08,730
properties and the common behaviors and

00:14:06,809 --> 00:14:10,679
and can be used as a blueprint for

00:14:08,730 --> 00:14:12,749
anything we create in a program he's a

00:14:10,679 --> 00:14:14,279
very very easy concept for students to

00:14:12,749 --> 00:14:16,079
understand if you give them something

00:14:14,279 --> 00:14:19,470
tangible in which they can see that

00:14:16,079 --> 00:14:21,420
apply when you move from there into the

00:14:19,470 --> 00:14:23,309
object and you start talking about the

00:14:21,420 --> 00:14:26,489
differences between them it's very easy

00:14:23,309 --> 00:14:28,709
in this particular case to be able to

00:14:26,489 --> 00:14:30,449
point to common examples in various

00:14:28,709 --> 00:14:32,069
realms the students know about they

00:14:30,449 --> 00:14:34,410
understand the difference between two

00:14:32,069 --> 00:14:36,029
characters in a game or between two cars

00:14:34,410 --> 00:14:36,540
and the car yard that are the same maker

00:14:36,029 --> 00:14:38,759
model

00:14:36,540 --> 00:14:41,999
but can be moved and manipulated

00:14:38,759 --> 00:14:45,179
independently so we can refer to them as

00:14:41,999 --> 00:14:47,819
being a group that shares some kind of

00:14:45,179 --> 00:14:49,739
common as I said before property or

00:14:47,819 --> 00:14:52,019
behavior but we can differentiate

00:14:49,739 --> 00:14:54,980
between each of them because they have a

00:14:52,019 --> 00:14:57,779
way of referring to each independently

00:14:54,980 --> 00:15:00,389
so the example that we've used primarily

00:14:57,779 --> 00:15:03,209
in teaching this is that of an inventory

00:15:00,389 --> 00:15:05,999
system in a game and that's intentional

00:15:03,209 --> 00:15:08,429
because we move from here into a project

00:15:05,999 --> 00:15:10,410
that has a significant game engine built

00:15:08,429 --> 00:15:12,179
into it and so when they understand how

00:15:10,410 --> 00:15:13,860
an inventory works it's one of the

00:15:12,179 --> 00:15:16,230
options they have to implement and

00:15:13,860 --> 00:15:19,470
extend the the properties of that game

00:15:16,230 --> 00:15:21,569
so let's say we're coming up with a pack

00:15:19,470 --> 00:15:24,600
and normally in class I would live code

00:15:21,569 --> 00:15:26,279
this as we go so every time I do this we

00:15:24,600 --> 00:15:29,039
get a slightly different version of

00:15:26,279 --> 00:15:31,230
things I've just selected one that came

00:15:29,039 --> 00:15:32,939
up before it's not the best example that

00:15:31,230 --> 00:15:34,350
we've ever produced in class but it was

00:15:32,939 --> 00:15:36,510
one that we we developed

00:15:34,350 --> 00:15:38,190
a group and I'm not going to life code

00:15:36,510 --> 00:15:40,230
it here because we end up adding a whole

00:15:38,190 --> 00:15:41,340
heap of extra bells and whistles that

00:15:40,230 --> 00:15:42,630
would just mean that we won't get

00:15:41,340 --> 00:15:43,020
through the presentation in the time

00:15:42,630 --> 00:15:45,660
we've got

00:15:43,020 --> 00:15:48,150
so all packs have the ability to store

00:15:45,660 --> 00:15:49,590
things and they have a capacity all

00:15:48,150 --> 00:15:51,600
right that if we were to sort of say

00:15:49,590 --> 00:15:54,390
what is the minimum set of requirements

00:15:51,600 --> 00:15:55,950
for a pack we'd say that and so these

00:15:54,390 --> 00:15:58,440
are the things that we'll use to define

00:15:55,950 --> 00:16:00,330
our class but the thing is that not

00:15:58,440 --> 00:16:02,340
every pack is the same we have packs of

00:16:00,330 --> 00:16:04,200
different sizes we have packs that

00:16:02,340 --> 00:16:05,730
contain know that it made of different

00:16:04,200 --> 00:16:08,370
things that are different different

00:16:05,730 --> 00:16:10,020
colors and so the differences in these

00:16:08,370 --> 00:16:12,990
are what we were reflected in the

00:16:10,020 --> 00:16:15,540
details of the object okay they're both

00:16:12,990 --> 00:16:17,100
packs but this one here is blue and

00:16:15,540 --> 00:16:18,510
black and that one over there is green

00:16:17,100 --> 00:16:21,000
and brown that one's got more pockets

00:16:18,510 --> 00:16:23,880
there are no tusen differences between

00:16:21,000 --> 00:16:29,580
the two but they belong to the same

00:16:23,880 --> 00:16:30,840
group this class of things so we would

00:16:29,580 --> 00:16:32,970
then walk through the process of

00:16:30,840 --> 00:16:35,070
developing a class definition and we

00:16:32,970 --> 00:16:37,050
would explain to students you know what

00:16:35,070 --> 00:16:40,340
we're doing each step of the way so

00:16:37,050 --> 00:16:43,320
here's an example class for our pack

00:16:40,340 --> 00:16:45,720
it's got some properties the things that

00:16:43,320 --> 00:16:48,900
every pack has and it's got its methods

00:16:45,720 --> 00:16:50,730
the things that every pack does so that

00:16:48,900 --> 00:16:53,060
distinction is relatively easy to

00:16:50,730 --> 00:16:55,350
explain to students you can draw the

00:16:53,060 --> 00:16:57,810
relationship between functions and

00:16:55,350 --> 00:17:01,160
methods based on their understanding of

00:16:57,810 --> 00:17:03,270
what those are and the idea of a a

00:17:01,160 --> 00:17:05,820
property as being something that lives

00:17:03,270 --> 00:17:07,590
within the objects scope is something

00:17:05,820 --> 00:17:12,180
that also if I'd be familiar with from

00:17:07,590 --> 00:17:14,610
their previous experience so we take our

00:17:12,180 --> 00:17:17,610
class definition and we use it some way

00:17:14,610 --> 00:17:20,010
like this and when we print that out we

00:17:17,610 --> 00:17:22,020
get this output and what does that look

00:17:20,010 --> 00:17:23,910
like in terms of the environment that

00:17:22,020 --> 00:17:26,760
the program is that the game is running

00:17:23,910 --> 00:17:28,440
in well we have these three packs all

00:17:26,760 --> 00:17:30,300
right we've got a pack that has a

00:17:28,440 --> 00:17:32,430
capacity of 20 a larger pack with a

00:17:30,300 --> 00:17:34,200
capacity of 50 and then we've got our

00:17:32,430 --> 00:17:36,750
little pack our tiny pack which has a

00:17:34,200 --> 00:17:38,370
capacity of five so three distinct

00:17:36,750 --> 00:17:42,590
things we can refer to each of them

00:17:38,370 --> 00:17:42,590
independently but they all share

00:17:42,890 --> 00:17:47,610
behavioral elements that we want to be

00:17:45,600 --> 00:17:52,240
present in our pack in our game

00:17:47,610 --> 00:17:55,420
so that's a really simple example of an

00:17:52,240 --> 00:17:56,740
object but objects alone right they need

00:17:55,420 --> 00:17:59,110
some way of interacting with other

00:17:56,740 --> 00:18:01,420
things so let's look at some items that

00:17:59,110 --> 00:18:02,710
we might put inside our pack what do

00:18:01,420 --> 00:18:04,660
they have in common well at a minimum

00:18:02,710 --> 00:18:06,370
they've got a name and a size and there

00:18:04,660 --> 00:18:08,290
are lots of different types of items so

00:18:06,370 --> 00:18:10,690
it's a good example for exploring

00:18:08,290 --> 00:18:13,000
inheritance and polymorphism now there's

00:18:10,690 --> 00:18:16,870
more variation in items than there are

00:18:13,000 --> 00:18:19,210
in packs right for example they've both

00:18:16,870 --> 00:18:22,090
have a size and a name but we swing that

00:18:19,210 --> 00:18:24,010
and we eat that and you definitely

00:18:22,090 --> 00:18:25,810
wouldn't do it the other way around I

00:18:24,010 --> 00:18:26,980
mean you could swing a steak but it's

00:18:25,810 --> 00:18:28,300
probably not going to be very menacing

00:18:26,980 --> 00:18:30,580
right

00:18:28,300 --> 00:18:31,900
and some people swallow swords but I

00:18:30,580 --> 00:18:36,880
don't think you'd count that as eating

00:18:31,900 --> 00:18:38,710
so we have our base class and that's

00:18:36,880 --> 00:18:41,170
going to be common regardless of any

00:18:38,710 --> 00:18:43,000
other weapon we create any other item we

00:18:41,170 --> 00:18:45,130
create and then we've got our weapons

00:18:43,000 --> 00:18:47,650
now weapons inherent they'll inherit

00:18:45,130 --> 00:18:49,570
elements from the item class and again

00:18:47,650 --> 00:18:52,210
this is an example where we haven't

00:18:49,570 --> 00:18:54,220
exactly chosen the best example because

00:18:52,210 --> 00:18:56,440
we're primarily just inheriting the

00:18:54,220 --> 00:18:58,500
properties here and every we're

00:18:56,440 --> 00:19:01,120
redefining the the string representation

00:18:58,500 --> 00:19:03,820
however we have created this swing

00:19:01,120 --> 00:19:06,460
method that is unique to the weapon and

00:19:03,820 --> 00:19:09,130
didn't exist in that item now in food

00:19:06,460 --> 00:19:11,050
we've got a similar thing we inherit all

00:19:09,130 --> 00:19:13,240
of the things that are in items but we

00:19:11,050 --> 00:19:18,250
can eat food and so we've defined that

00:19:13,240 --> 00:19:19,750
as well now when we use these it's

00:19:18,250 --> 00:19:21,550
important that we can see the

00:19:19,750 --> 00:19:23,590
distinction between weapons and foods

00:19:21,550 --> 00:19:26,920
and the changes that we made to that

00:19:23,590 --> 00:19:28,690
print to the string method allow us to

00:19:26,920 --> 00:19:31,420
when we run this code see that the

00:19:28,690 --> 00:19:33,430
output differs so we've created them

00:19:31,420 --> 00:19:35,470
using their constructors we print them

00:19:33,430 --> 00:19:37,630
out and we can see that swords have

00:19:35,470 --> 00:19:39,700
power or because they're weapons and

00:19:37,630 --> 00:19:42,640
weapons of power and stake has a potency

00:19:39,700 --> 00:19:46,300
right its effect on from eating that

00:19:42,640 --> 00:19:48,820
steak so we now have three things two of

00:19:46,300 --> 00:19:51,910
them however have elements in common but

00:19:48,820 --> 00:19:53,830
all three are items and we see that all

00:19:51,910 --> 00:19:59,140
three are items through our exploration

00:19:53,830 --> 00:20:00,720
of polymorphism so he's a pack and what

00:19:59,140 --> 00:20:02,429
we've decided is that all item

00:20:00,720 --> 00:20:04,350
can go in the pack regardless of their

00:20:02,429 --> 00:20:05,340
type all right you can pick up sores and

00:20:04,350 --> 00:20:06,780
you can put them in your pack you can

00:20:05,340 --> 00:20:09,990
pick up steak and you can put it in your

00:20:06,780 --> 00:20:11,370
pack so if it's not a weapon or food it

00:20:09,990 --> 00:20:13,679
shouldn't go in the pack

00:20:11,370 --> 00:20:17,429
so our sword can go in all right our

00:20:13,679 --> 00:20:19,409
saber can go in now staking it but if we

00:20:17,429 --> 00:20:21,720
try to put a string in we want to make

00:20:19,409 --> 00:20:23,250
sure that that doesn't go in there and

00:20:21,720 --> 00:20:24,570
we want to make sure that we don't let

00:20:23,250 --> 00:20:30,000
integers in there too because they're

00:20:24,570 --> 00:20:32,520
not items so we define our interactions

00:20:30,000 --> 00:20:36,150
in the superclass that we want to at all

00:20:32,520 --> 00:20:38,309
items this is a pack and in our pack

00:20:36,150 --> 00:20:40,919
what we're going to do is we're going to

00:20:38,309 --> 00:20:44,039
come up with this kind of add item

00:20:40,919 --> 00:20:46,140
method that will allow us to add an item

00:20:44,039 --> 00:20:48,480
to the pack if it's allowed to be added

00:20:46,140 --> 00:20:49,890
or will not add it if it's not so at the

00:20:48,480 --> 00:20:51,990
moment the way it's written we're

00:20:49,890 --> 00:20:53,490
checking to see if it's a weapon and if

00:20:51,990 --> 00:20:56,610
it is it could go in and if it's not

00:20:53,490 --> 00:20:58,559
then it doesn't now obviously we want to

00:20:56,610 --> 00:21:00,720
put other things in the pack so the

00:20:58,559 --> 00:21:03,360
naive implementation would be to add a

00:21:00,720 --> 00:21:05,580
check for food and that will allow the

00:21:03,360 --> 00:21:07,320
state go in but then if we want to add

00:21:05,580 --> 00:21:08,429
something else we need to keep adding

00:21:07,320 --> 00:21:12,510
more and more ORS

00:21:08,429 --> 00:21:15,419
and it becomes unwieldy so we swap

00:21:12,510 --> 00:21:17,220
weapon out we use our polymorphism to

00:21:15,419 --> 00:21:19,710
check whether it's an item of any kind

00:21:17,220 --> 00:21:22,409
and that allows us to add anything that

00:21:19,710 --> 00:21:26,720
we classify as an item as we expand the

00:21:22,409 --> 00:21:29,370
number of types of items in our game and

00:21:26,720 --> 00:21:32,400
one more time this is what it would look

00:21:29,370 --> 00:21:35,070
like you can see that we can't put the

00:21:32,400 --> 00:21:36,870
not an item string in our pack and we

00:21:35,070 --> 00:21:39,120
also check to see whether or not we have

00:21:36,870 --> 00:21:40,770
root items based on the other properties

00:21:39,120 --> 00:21:42,450
that we've developed so they're the

00:21:40,770 --> 00:21:44,730
kinds of examples we'd run through in

00:21:42,450 --> 00:21:50,010
class with students and that's the state

00:21:44,730 --> 00:21:52,440
of the program after that runs so two

00:21:50,010 --> 00:21:56,370
really useful resources that we found I

00:21:52,440 --> 00:21:58,679
haven't found a good simple explanation

00:21:56,370 --> 00:22:00,570
that sort of beats this one just Hamrick

00:21:58,679 --> 00:22:03,659
we actually presented a Pike on us I

00:22:00,570 --> 00:22:06,000
think back in about 20 like 13 or

00:22:03,659 --> 00:22:07,590
something on a different topic and she's

00:22:06,000 --> 00:22:09,929
got a blog post that runs through a

00:22:07,590 --> 00:22:11,820
really simple example using pets and I

00:22:09,929 --> 00:22:13,289
mean cats and dogs and it's really

00:22:11,820 --> 00:22:14,760
really easy for students to work through

00:22:13,289 --> 00:22:16,590
that

00:22:14,760 --> 00:22:18,540
more generally to how to think like a

00:22:16,590 --> 00:22:21,510
computer scientist resource is really

00:22:18,540 --> 00:22:24,600
good it uses points and shapes as it's

00:22:21,510 --> 00:22:27,240
example for inheritance and it's not as

00:22:24,600 --> 00:22:30,410
sort of exciting for students but it is

00:22:27,240 --> 00:22:32,970
quite clear in terms of its explanation

00:22:30,410 --> 00:22:35,220
so I'm gonna run through this really

00:22:32,970 --> 00:22:36,720
quickly but I think it's important that

00:22:35,220 --> 00:22:39,330
you've got this in front of you so that

00:22:36,720 --> 00:22:42,000
you can see what we do now as far as our

00:22:39,330 --> 00:22:43,800
task structure goes we have the idea of

00:22:42,000 --> 00:22:46,050
students documenting and improving code

00:22:43,800 --> 00:22:47,850
and then extending and redefining it and

00:22:46,050 --> 00:22:50,840
what that looks like

00:22:47,850 --> 00:22:54,690
is we provide an RPG battle engine that

00:22:50,840 --> 00:22:55,830
works but is very limited in terms of

00:22:54,690 --> 00:23:00,330
what it does and it includes no

00:22:55,830 --> 00:23:02,340
documentation whatsoever so we start out

00:23:00,330 --> 00:23:05,070
by giving them their four files the

00:23:02,340 --> 00:23:08,310
entry point a GUI a simple IO that we've

00:23:05,070 --> 00:23:10,200
created a battle class and a character

00:23:08,310 --> 00:23:12,480
class and altogether that's about eleven

00:23:10,200 --> 00:23:14,010
hundred lines of code and the idea is

00:23:12,480 --> 00:23:15,480
that you interpret what everything is

00:23:14,010 --> 00:23:17,310
doing there's a lot of repetition in

00:23:15,480 --> 00:23:18,930
there it's not the best design code in

00:23:17,310 --> 00:23:20,250
the world but it's easy to read and

00:23:18,930 --> 00:23:23,460
understand and that's the goal

00:23:20,250 --> 00:23:24,990
so they document that they then extend

00:23:23,460 --> 00:23:27,000
the functionality and we give them a

00:23:24,990 --> 00:23:28,680
list of things that they can try to do

00:23:27,000 --> 00:23:30,900
that so lots of different options

00:23:28,680 --> 00:23:33,810
designed to ensure that every student

00:23:30,900 --> 00:23:35,670
can achieve something but we provide a

00:23:33,810 --> 00:23:38,780
sort of list of the harder things that

00:23:35,670 --> 00:23:41,340
we'd like top students to do they like

00:23:38,780 --> 00:23:43,770
something that doesn't exist at all they

00:23:41,340 --> 00:23:46,020
create a map class so that they can have

00:23:43,770 --> 00:23:48,300
some work this the character can

00:23:46,020 --> 00:23:51,030
interact with outside of the battles

00:23:48,300 --> 00:23:53,220
when they take place and finally for the

00:23:51,030 --> 00:23:55,770
highest performing students we encourage

00:23:53,220 --> 00:23:57,480
them to refactor the existing code to

00:23:55,770 --> 00:24:00,180
look at ways that they can make things

00:23:57,480 --> 00:24:01,860
that are a little bit easier to write a

00:24:00,180 --> 00:24:03,780
little bit more powerful and more

00:24:01,860 --> 00:24:06,930
efficient in terms of the way that they

00:24:03,780 --> 00:24:09,210
run so I'm just gonna finish up with a

00:24:06,930 --> 00:24:12,000
very like one minute example of a couple

00:24:09,210 --> 00:24:14,940
of projects this is sort of your basic

00:24:12,000 --> 00:24:16,980
I've done everything that I needed to do

00:24:14,940 --> 00:24:18,990
and I've done it well example it's a

00:24:16,980 --> 00:24:20,460
text-based adventure game there are

00:24:18,990 --> 00:24:21,990
menus there that they have to think

00:24:20,460 --> 00:24:24,810
about in terms of when they're presented

00:24:21,990 --> 00:24:26,850
how to interact what appropriate options

00:24:24,810 --> 00:24:27,870
are and you can see that's been extended

00:24:26,850 --> 00:24:30,180
with a sort of ASCII

00:24:27,870 --> 00:24:32,820
map down the bottom there you can move

00:24:30,180 --> 00:24:35,250
around the map and when you encounter

00:24:32,820 --> 00:24:39,030
another an enemy somewhere on the map

00:24:35,250 --> 00:24:41,040
then it launches our battle class at

00:24:39,030 --> 00:24:43,860
instantiates a battle object and a

00:24:41,040 --> 00:24:46,559
battle occurs and you just go through

00:24:43,860 --> 00:24:47,970
the process of you know the battle

00:24:46,559 --> 00:24:49,500
actually happening which is the code

00:24:47,970 --> 00:24:52,980
they're provided with initially when we

00:24:49,500 --> 00:24:56,280
start off so that's a kind of simple but

00:24:52,980 --> 00:25:00,600
but well-written example of a completed

00:24:56,280 --> 00:25:04,800
project now this is what you could do if

00:25:00,600 --> 00:25:06,360
you're a little bit stronger and this

00:25:04,800 --> 00:25:07,410
student got a little bit carried away

00:25:06,360 --> 00:25:09,120
he decided that he was going to

00:25:07,410 --> 00:25:10,950
interrogate the GUI class a little bit

00:25:09,120 --> 00:25:13,200
as well and work out how we could open

00:25:10,950 --> 00:25:16,020
multiple windows not just work in the

00:25:13,200 --> 00:25:17,850
one so you've got your starting point

00:25:16,020 --> 00:25:20,910
you've got your map in the middle you

00:25:17,850 --> 00:25:23,130
move around the map you you know enter a

00:25:20,910 --> 00:25:24,900
dungeon and now you've got a dungeon map

00:25:23,130 --> 00:25:26,940
that you walk around in and then

00:25:24,900 --> 00:25:29,340
eventually when you run into an enemy

00:25:26,940 --> 00:25:31,290
not only do you have the battle taking

00:25:29,340 --> 00:25:32,910
place on the left you've got real-time

00:25:31,290 --> 00:25:35,640
statistics sitting in the right-hand

00:25:32,910 --> 00:25:38,070
window okay so all of this stuff is

00:25:35,640 --> 00:25:40,710
possible because we've provided enough

00:25:38,070 --> 00:25:42,270
flexibility for them to be um to extend

00:25:40,710 --> 00:25:45,000
what they're doing and I guess

00:25:42,270 --> 00:25:46,920
ultimately one of the things that we why

00:25:45,000 --> 00:25:48,690
we want this to be introduced to

00:25:46,920 --> 00:25:50,760
students is because oo is everywhere

00:25:48,690 --> 00:25:53,760
it's in web frameworks it's used in

00:25:50,760 --> 00:25:57,360
games you know database models rely on

00:25:53,760 --> 00:25:59,580
it and any GUI work relies on Roo as

00:25:57,360 --> 00:26:01,440
well so it provides a level of

00:25:59,580 --> 00:26:04,170
abstraction that we need to be able to

00:26:01,440 --> 00:26:06,510
understand very complex applications

00:26:04,170 --> 00:26:08,940
yeah we can't write software that is

00:26:06,510 --> 00:26:10,500
very very complicated without it and so

00:26:08,940 --> 00:26:12,960
it's really really important that

00:26:10,500 --> 00:26:15,450
students have an opportunity to explore

00:26:12,960 --> 00:26:16,770
oo in that context so that's it from me

00:26:15,450 --> 00:26:18,470
I've got a little bit of time for

00:26:16,770 --> 00:26:25,280
questions thank you

00:26:18,470 --> 00:26:27,000
[Applause]

00:26:25,280 --> 00:26:30,530
okay yep

00:26:27,000 --> 00:26:34,620
hands up and I'll bring Mike around

00:26:30,530 --> 00:26:38,309
thanks for your talk with the add to

00:26:34,620 --> 00:26:41,010
pact method there's extra work involved

00:26:38,309 --> 00:26:42,570
in dealing with the possibility of

00:26:41,010 --> 00:26:44,520
calling that with a number or a string

00:26:42,570 --> 00:26:46,110
yep so you gave the example you know we

00:26:44,520 --> 00:26:50,539
don't want to be able to add the string

00:26:46,110 --> 00:26:53,909
dog to a pack yep so why aren't we using

00:26:50,539 --> 00:26:56,970
languages and tools that would allow the

00:26:53,909 --> 00:26:57,809
students to express the operations that

00:26:56,970 --> 00:26:59,970
make sense

00:26:57,809 --> 00:27:02,789
whilst not even admitting the

00:26:59,970 --> 00:27:05,789
possibility of someone attempting to add

00:27:02,789 --> 00:27:07,799
the string dog to a pack right so he

00:27:05,789 --> 00:27:10,140
statically typed languages yeah yeah so

00:27:07,799 --> 00:27:13,020
I mean really the reason that we use

00:27:10,140 --> 00:27:15,690
Python comes down to the fact that is

00:27:13,020 --> 00:27:18,000
just easy to learn right the syntax is

00:27:15,690 --> 00:27:21,090
simple it encourages good practice with

00:27:18,000 --> 00:27:23,460
indentation and all of the like so yes

00:27:21,090 --> 00:27:25,289
we could switch languages we could look

00:27:23,460 --> 00:27:26,669
at an option that would allow us to work

00:27:25,289 --> 00:27:28,650
in a more sort of statically typed

00:27:26,669 --> 00:27:30,659
language but one of the one of the

00:27:28,650 --> 00:27:32,820
things that I think we need to keep in

00:27:30,659 --> 00:27:34,440
mind as educators especially if we've

00:27:32,820 --> 00:27:36,630
got a computer science background is

00:27:34,440 --> 00:27:38,880
that if we expose students to many

00:27:36,630 --> 00:27:41,190
languages and we ask them to go back

00:27:38,880 --> 00:27:43,289
over those same concepts and relearn the

00:27:41,190 --> 00:27:45,179
new syntax and the intricacies of

00:27:43,289 --> 00:27:46,650
working in another language they don't

00:27:45,179 --> 00:27:49,289
get the opportunity to dive into that

00:27:46,650 --> 00:27:51,240
language deeply so is it more beneficial

00:27:49,289 --> 00:27:52,559
for a student to be able to write an if

00:27:51,240 --> 00:27:54,870
statement in eight different languages

00:27:52,559 --> 00:27:57,240
or is it more beneficial for a student

00:27:54,870 --> 00:27:59,280
to really know one language well so that

00:27:57,240 --> 00:28:01,679
they can write really interesting you

00:27:59,280 --> 00:28:03,059
know complicated applications that make

00:28:01,679 --> 00:28:05,700
use of some of the other features in the

00:28:03,059 --> 00:28:08,370
language so because we use Python for

00:28:05,700 --> 00:28:10,169
everything else in the lead up to it we

00:28:08,370 --> 00:28:13,440
continue to use it and in that example

00:28:10,169 --> 00:28:15,090
we actually would explain to the so we

00:28:13,440 --> 00:28:17,039
wouldn't put that ease instance check-in

00:28:15,090 --> 00:28:19,080
in there initially we would just start

00:28:17,039 --> 00:28:20,580
and then I'd throw the string and it

00:28:19,080 --> 00:28:21,780
would go in and they'd be like hang on

00:28:20,580 --> 00:28:23,640
we're getting an error because it

00:28:21,780 --> 00:28:26,250
doesn't have a you know a name or

00:28:23,640 --> 00:28:27,990
whatever and then we talk about is

00:28:26,250 --> 00:28:29,100
instance and and one of the things you

00:28:27,990 --> 00:28:31,710
need to factor in when you're designing

00:28:29,100 --> 00:28:34,590
something using using Python so it's

00:28:31,710 --> 00:28:34,980
more of a what I think it does is it

00:28:34,590 --> 00:28:36,510
straight

00:28:34,980 --> 00:28:40,140
sister students the need to understand

00:28:36,510 --> 00:28:41,580
type because you can't rely on the

00:28:40,140 --> 00:28:44,640
compiler picking it up for you in

00:28:41,580 --> 00:28:46,380
advance and so yeah it's primarily

00:28:44,640 --> 00:28:48,210
because pedagogically it's better to

00:28:46,380 --> 00:28:52,700
dive into a language in detail than to

00:28:48,210 --> 00:28:52,700
learn lots of languages a shallow level

00:28:55,730 --> 00:28:59,340
hello

00:28:57,000 --> 00:29:00,960
good talk I just wanted to know because

00:28:59,340 --> 00:29:02,970
I see a lot of people using inheritance

00:29:00,960 --> 00:29:05,070
where it's not native

00:29:02,970 --> 00:29:07,260
is there any concept that the kids learn

00:29:05,070 --> 00:29:09,809
about class composition where a base

00:29:07,260 --> 00:29:12,630
class has a something and not do you

00:29:09,809 --> 00:29:15,900
know what I mean by that you mean when

00:29:12,630 --> 00:29:18,450
you say it has a yes so yeah so maybe

00:29:15,900 --> 00:29:20,400
your your pack would have a pocket and

00:29:18,450 --> 00:29:25,140
the pocket has a a like a yeah yeah so

00:29:20,400 --> 00:29:26,460
instead of I mean because can set with

00:29:25,140 --> 00:29:27,690
the concept is what we're trying to

00:29:26,460 --> 00:29:31,400
express here we're not necessarily

00:29:27,690 --> 00:29:34,230
trying to model a perfect pack right and

00:29:31,400 --> 00:29:35,370
yes we could go down that path and in

00:29:34,230 --> 00:29:38,010
fact some of the students that have

00:29:35,370 --> 00:29:40,500
designed more complicated applications

00:29:38,010 --> 00:29:42,600
they do identify that and so you know

00:29:40,500 --> 00:29:44,610
they might have someone might introduce

00:29:42,600 --> 00:29:47,220
clothing as another item that you can

00:29:44,610 --> 00:29:48,600
have that clothing can store things that

00:29:47,220 --> 00:29:49,500
now has things in common with a pack

00:29:48,600 --> 00:29:51,210
hang on

00:29:49,500 --> 00:29:53,010
wouldn't it make sense to create a a

00:29:51,210 --> 00:29:54,690
pocket or some other item that we could

00:29:53,010 --> 00:29:57,450
then incorporate into those two objects

00:29:54,690 --> 00:29:59,010
it can happen but for students who are

00:29:57,450 --> 00:30:00,660
maybe seeing programming for the first

00:29:59,010 --> 00:30:02,820
time this is something they do after

00:30:00,660 --> 00:30:05,370
having probe in programming for about

00:30:02,820 --> 00:30:07,350
six months for students who have sort of

00:30:05,370 --> 00:30:09,240
come from nothing to that in six months

00:30:07,350 --> 00:30:11,460
time that's a layer of complexity that's

00:30:09,240 --> 00:30:16,610
just a step too far in terms of what is

00:30:11,460 --> 00:30:20,280
necessary yeah any further questions

00:30:16,610 --> 00:30:21,690
okay I'll ask one so something we're

00:30:20,280 --> 00:30:25,260
looking at in the language design at the

00:30:21,690 --> 00:30:27,840
moment is a notion of data classes that

00:30:25,260 --> 00:30:31,280
basically get away from people having to

00:30:27,840 --> 00:30:34,230
define the dunder init and understeer

00:30:31,280 --> 00:30:36,720
manually and instead being able to just

00:30:34,230 --> 00:30:39,720
declare my class has these attributes

00:30:36,720 --> 00:30:42,030
yeah and have the language Auto define

00:30:39,720 --> 00:30:44,220
the dundas for you do you think that

00:30:42,030 --> 00:30:46,980
would actually help students or do you

00:30:44,220 --> 00:30:48,750
think would be hiding too much magic and

00:30:46,980 --> 00:30:54,780
potentially make things harder too

00:30:48,750 --> 00:30:57,990
understand so I mean I think it could do

00:30:54,780 --> 00:31:00,930
both depending on the student but I

00:30:57,990 --> 00:31:04,020
don't Vasanth it so the idea of sort of

00:31:00,930 --> 00:31:07,320
the constructor or these you know other

00:31:04,020 --> 00:31:10,170
other reserved methods that live inside

00:31:07,320 --> 00:31:13,020
a class is not something that they

00:31:10,170 --> 00:31:15,060
struggle with too much they see the

00:31:13,020 --> 00:31:17,220
value in having for example a way of

00:31:15,060 --> 00:31:18,750
defining strut so that you can just

00:31:17,220 --> 00:31:21,690
print something out you don't need some

00:31:18,750 --> 00:31:25,890
show pack method or something like that

00:31:21,690 --> 00:31:27,720
so I think we could go either way

00:31:25,890 --> 00:31:29,160
I think regardless of whether it exists

00:31:27,720 --> 00:31:32,040
or not we can work around that

00:31:29,160 --> 00:31:35,130
I don't think one of them is going to be

00:31:32,040 --> 00:31:36,420
inherently better for teaching I think

00:31:35,130 --> 00:31:38,130
it's better to make that decision based

00:31:36,420 --> 00:31:40,560
on what the developer community needs in

00:31:38,130 --> 00:31:42,210
the real world rather than sort of

00:31:40,560 --> 00:31:43,620
worrying about what we do in in school

00:31:42,210 --> 00:31:46,760
that's something we can work with either

00:31:43,620 --> 00:31:46,760
way cool thank you

00:31:53,309 --> 00:32:02,110
so you mentioned sorry I forgot the term

00:32:00,039 --> 00:32:07,119
son but basically my question is do you

00:32:02,110 --> 00:32:09,940
also teach encapsulation yes so we do

00:32:07,119 --> 00:32:12,279
it's not specifically mentioned but you

00:32:09,940 --> 00:32:14,619
kind of have to teach it anyway once you

00:32:12,279 --> 00:32:16,629
start diving in their classes because it

00:32:14,619 --> 00:32:19,149
doesn't make sense to put things outside

00:32:16,629 --> 00:32:22,720
of the class if the class needs it

00:32:19,149 --> 00:32:26,009
so as far as the curriculum is concerned

00:32:22,720 --> 00:32:29,169
you won't actually receive references to

00:32:26,009 --> 00:32:32,289
inheritance or polymorphism or anything

00:32:29,169 --> 00:32:35,109
in the curriculum document and a lot of

00:32:32,289 --> 00:32:38,320
that is because a curriculum document is

00:32:35,109 --> 00:32:41,710
you know twelve dot points that need to

00:32:38,320 --> 00:32:43,539
be understood and interpreted so I would

00:32:41,710 --> 00:32:46,690
say that you really can't teach it

00:32:43,539 --> 00:32:48,759
without it but it's not something that

00:32:46,690 --> 00:32:50,169
you'll see anywhere and I think it's

00:32:48,759 --> 00:32:52,239
important that when we do teach it we

00:32:50,169 --> 00:32:53,889
use the terminology it's actually one of

00:32:52,239 --> 00:32:55,779
the conscious decisions made by the

00:32:53,889 --> 00:32:57,100
curriculum writing teams to use the

00:32:55,779 --> 00:32:58,570
language of the discipline throughout

00:32:57,100 --> 00:33:00,100
and that's been one of the big

00:32:58,570 --> 00:33:01,359
challenges at the same time because

00:33:00,100 --> 00:33:03,190
teachers without the background I know

00:33:01,359 --> 00:33:05,139
what it means but at the same time we

00:33:03,190 --> 00:33:05,950
don't insist that maths remove the term

00:33:05,139 --> 00:33:08,350
sub attires

00:33:05,950 --> 00:33:10,539
or that you know science talk about the

00:33:08,350 --> 00:33:12,369
various things in the different fields

00:33:10,539 --> 00:33:15,309
of science without using their their

00:33:12,369 --> 00:33:16,769
formal language so if we could I think

00:33:15,309 --> 00:33:18,840
it would have been great to see

00:33:16,769 --> 00:33:22,690
encapsulation inheritance polymorphism

00:33:18,840 --> 00:33:24,429
appear in the document itself one place

00:33:22,690 --> 00:33:26,950
where it will appear is on the

00:33:24,429 --> 00:33:27,970
Australian computing Academy website the

00:33:26,950 --> 00:33:29,470
resources that we're putting together

00:33:27,970 --> 00:33:31,779
we'll make sure there's reference to all

00:33:29,470 --> 00:33:33,009
that sort of thing and a review of the

00:33:31,779 --> 00:33:34,539
curriculum that revisits the

00:33:33,009 --> 00:33:36,489
elaborations there might be an

00:33:34,539 --> 00:33:40,299
opportunity some of that stuff in there

00:33:36,489 --> 00:33:44,220
too okay that's all the time we have for

00:33:40,299 --> 00:33:44,220
questions so thank you very much Bruce

00:33:45,140 --> 00:33:47,200

YouTube URL: https://www.youtube.com/watch?v=qxOqZQ1fWNw


