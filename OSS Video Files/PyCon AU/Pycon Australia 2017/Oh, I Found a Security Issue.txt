Title: Oh, I Found a Security Issue
Publication date: 2017-08-04
Playlist: Pycon Australia 2017
Description: 
	Markus Holtermann

http://2017.pycon-au.org/schedule/presentation/53/

#pyconau

This talk was given at PyCon Australia 2017 which was held from 3-8 August, 2017 in Melbourne, Victoria.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2017, we're returning to Melbourne, bringing together students, enthusiasts, and professionals with a love of Python from around Australia, and from all over the World. 

August 3-8 2017, Melbourne, Victoria

Python, PyCon, PyConAU
Captions: 
	00:00:01,879 --> 00:00:05,940
all righty ladies and gentlemen our next

00:00:04,230 --> 00:00:07,950
speaker in this block is Marcus

00:00:05,940 --> 00:00:10,710
Halterman Marcus is a django core

00:00:07,950 --> 00:00:12,450
developer has been since early 2015 with

00:00:10,710 --> 00:00:14,630
a particular focus on the migrations

00:00:12,450 --> 00:00:16,650
framework

00:00:14,630 --> 00:00:18,840
he developed Python and Django

00:00:16,650 --> 00:00:22,170
discovered Python and Django in 2010

00:00:18,840 --> 00:00:24,180
with using Ubuntu users de Marcus

00:00:22,170 --> 00:00:26,220
currently lives in Berlin Germany and

00:00:24,180 --> 00:00:28,439
works as a back-end developer at later

00:00:26,220 --> 00:00:35,130
pay in Munich everyone please welcome

00:00:28,439 --> 00:00:38,040
Marcus to the stage thanks everybody for

00:00:35,130 --> 00:00:40,520
coming and Django Khan for having me

00:00:38,040 --> 00:00:44,070
there's not much I want to say about me

00:00:40,520 --> 00:00:46,489
beyond what Russ introduced me it later

00:00:44,070 --> 00:00:49,590
way we do a micro payment system for

00:00:46,489 --> 00:00:51,059
digital content if you want to if you

00:00:49,590 --> 00:00:53,370
want to hear more about that to talk to

00:00:51,059 --> 00:00:55,760
me I have a lot of content in my slides

00:00:53,370 --> 00:00:58,530
and that I want to get into right now

00:00:55,760 --> 00:01:02,250
can I get a show of hands who has seen

00:00:58,530 --> 00:01:06,119
an email like that over the last month's

00:01:02,250 --> 00:01:08,909
years good not all of you that's a bad

00:01:06,119 --> 00:01:11,189
thing so essentially what this is is a

00:01:08,909 --> 00:01:12,860
security announcement that triangle the

00:01:11,189 --> 00:01:16,049
triangle project release the security

00:01:12,860 --> 00:01:19,140
release of some Jenga version and that

00:01:16,049 --> 00:01:21,780
you probably should update this talk is

00:01:19,140 --> 00:01:23,549
about how the Jenga project managed to

00:01:21,780 --> 00:01:25,650
get into a stage that we can actually

00:01:23,549 --> 00:01:27,540
send those emails and all the things

00:01:25,650 --> 00:01:31,040
that happen from oh we found the

00:01:27,540 --> 00:01:33,479
security issue to here's the release

00:01:31,040 --> 00:01:35,549
first off let's start with the security

00:01:33,479 --> 00:01:38,460
policy so we can actually actually know

00:01:35,549 --> 00:01:40,200
what we're talking about and pretty much

00:01:38,460 --> 00:01:42,150
at every single point in time there are

00:01:40,200 --> 00:01:44,939
up to four releases of tango that are

00:01:42,150 --> 00:01:48,030
currently supported to some degree or

00:01:44,939 --> 00:01:49,860
that receive security issues no not a

00:01:48,030 --> 00:01:54,720
security issue the pets of patches for

00:01:49,860 --> 00:01:56,040
security issues and unsurprisingly

00:01:54,720 --> 00:01:58,259
that's the master branch where pretty

00:01:56,040 --> 00:02:00,570
much every commit goes into anyway the

00:01:58,259 --> 00:02:03,780
second one is the last stable release

00:02:00,570 --> 00:02:05,820
which is one point 11 right now then the

00:02:03,780 --> 00:02:07,829
second last stable release which is one

00:02:05,820 --> 00:02:10,700
point ten right now receives only

00:02:07,829 --> 00:02:13,830
security issues security bug fixes and

00:02:10,700 --> 00:02:16,860
the last LTS version

00:02:13,830 --> 00:02:20,880
that is around which is jungle 1.8 and 8

00:02:16,860 --> 00:02:22,920
and so we have four versions of tango we

00:02:20,880 --> 00:02:24,480
support right now that when you are you

00:02:22,920 --> 00:02:26,280
probably want to be on one of those

00:02:24,480 --> 00:02:31,530
because these are the only one we

00:02:26,280 --> 00:02:34,980
provide security bug fixes for general

00:02:31,530 --> 00:02:37,950
the general security report or and

00:02:34,980 --> 00:02:40,800
release process is a bit of a process

00:02:37,950 --> 00:02:44,520
yeah sure but this is actually what the

00:02:40,800 --> 00:02:47,340
entire the the the purpose of this talk

00:02:44,520 --> 00:02:50,670
given telling you and about this process

00:02:47,340 --> 00:02:52,950
and giving you an idea of how a security

00:02:50,670 --> 00:02:55,080
process can work if you maintain a third

00:02:52,950 --> 00:02:57,510
party package that's out there that

00:02:55,080 --> 00:03:00,120
people use I highly encourage you to

00:02:57,510 --> 00:03:02,430
come up with a security process it

00:03:00,120 --> 00:03:05,550
doesn't have to be asked complex as ours

00:03:02,430 --> 00:03:08,070
but have a security process light out

00:03:05,550 --> 00:03:10,410
written down understandable for people

00:03:08,070 --> 00:03:12,209
that use a library so that in case they

00:03:10,410 --> 00:03:14,040
find her security issue they came to

00:03:12,209 --> 00:03:16,860
report it to your other people in charge

00:03:14,040 --> 00:03:19,680
of fixing security issues and you have a

00:03:16,860 --> 00:03:25,440
way of informing people about these bug

00:03:19,680 --> 00:03:28,320
fixes the preferred way for the jenga

00:03:25,440 --> 00:03:30,510
project is emailing this report to the

00:03:28,320 --> 00:03:32,820
security at Django project comm email

00:03:30,510 --> 00:03:35,340
address there's a team of I don't know

00:03:32,820 --> 00:03:36,900
10 to 15 people that monitor this email

00:03:35,340 --> 00:03:39,239
address pretty much all of them are

00:03:36,900 --> 00:03:41,459
volunteers which means we can't

00:03:39,239 --> 00:03:44,160
guarantee a response within two hours

00:03:41,459 --> 00:03:47,459
but we are pretty good at return

00:03:44,160 --> 00:03:49,170
replying in a couple of hours depending

00:03:47,459 --> 00:03:50,910
on the severity of the report you might

00:03:49,170 --> 00:03:53,820
want to check in after two or three days

00:03:50,910 --> 00:03:56,130
if we haven't replied to you at all

00:03:53,820 --> 00:03:57,870
once you emailed this a your report

00:03:56,130 --> 00:04:00,540
there please do not discuss the report

00:03:57,870 --> 00:04:02,310
with anybody else only with via this

00:04:00,540 --> 00:04:04,769
email address and don't publishes

00:04:02,310 --> 00:04:08,190
anywhere online because we need time to

00:04:04,769 --> 00:04:09,900
like very father they D report and

00:04:08,190 --> 00:04:13,200
eventually getting out of the security

00:04:09,900 --> 00:04:15,109
release and this is essentially where

00:04:13,200 --> 00:04:18,630
the next step of this processes

00:04:15,109 --> 00:04:20,580
assessing the security report just

00:04:18,630 --> 00:04:22,470
because you think you reported a

00:04:20,580 --> 00:04:25,200
security issue doesn't necessarily mean

00:04:22,470 --> 00:04:27,660
it's a it is a security issue because

00:04:25,200 --> 00:04:30,480
there's all this

00:04:27,660 --> 00:04:32,670
Security's a huge topic we're missing

00:04:30,480 --> 00:04:36,720
one thing can render and the entire

00:04:32,670 --> 00:04:38,580
thing even invalid or valid so when you

00:04:36,720 --> 00:04:40,410
think there's a security issue even if

00:04:38,580 --> 00:04:43,230
you're not sure please talk to us please

00:04:40,410 --> 00:04:46,020
report it we are more than happy to tell

00:04:43,230 --> 00:04:47,520
you thank you for the report but that's

00:04:46,020 --> 00:04:50,880
actually not an issue that is intended

00:04:47,520 --> 00:04:52,920
because of X Y that then you going and

00:04:50,880 --> 00:04:55,470
reporting this publicly and then we're

00:04:52,920 --> 00:04:58,560
going l well that's the security issue

00:04:55,470 --> 00:05:03,840
let's find a way to fix that as soon as

00:04:58,560 --> 00:05:07,290
possible given that the security team is

00:05:03,840 --> 00:05:10,080
going to somewhat as assess the security

00:05:07,290 --> 00:05:14,490
you should devote the severity of all of

00:05:10,080 --> 00:05:16,770
all of that in that Assessor in this

00:05:14,490 --> 00:05:20,400
process of assassination we probably

00:05:16,770 --> 00:05:22,500
want to get back to you if you don't if

00:05:20,400 --> 00:05:25,830
you are not sure if what you're saying

00:05:22,500 --> 00:05:28,590
is actually what we are mustard and this

00:05:25,830 --> 00:05:30,780
is also Lee also the thing that ties in

00:05:28,590 --> 00:05:35,100
with the next step which is essentially

00:05:30,780 --> 00:05:38,580
fixing the issue and there are two ways

00:05:35,100 --> 00:05:39,990
of fixing the issue either is you with

00:05:38,580 --> 00:05:43,380
your brute power potentially provide a

00:05:39,990 --> 00:05:45,180
patch to fix the issue and this is like

00:05:43,380 --> 00:05:47,550
the best thing for us because we don't

00:05:45,180 --> 00:05:51,450
need to do the work of finding a pet for

00:05:47,550 --> 00:05:54,390
that but it's also for you a good a good

00:05:51,450 --> 00:05:56,820
thing because you are becoming more than

00:05:54,390 --> 00:05:58,920
a like a silent contributor to Jang or

00:05:56,820 --> 00:06:00,360
you'll you will get a patch into a Jango

00:05:58,920 --> 00:06:06,000
if that's something you're looking for

00:06:00,360 --> 00:06:08,190
that's a perfect way to do that and in

00:06:06,000 --> 00:06:10,490
the case of security issues there's one

00:06:08,190 --> 00:06:13,740
thing about patches that is pretty much

00:06:10,490 --> 00:06:16,380
specific to security patches every time

00:06:13,740 --> 00:06:19,110
we provide a patch for Jengo we try to

00:06:16,380 --> 00:06:21,090
keep it as bekata compatible as possible

00:06:19,110 --> 00:06:23,100
even up to the point where we go and

00:06:21,090 --> 00:06:24,840
well this is patch is not going to get

00:06:23,100 --> 00:06:28,050
into Jango unless it's going to be

00:06:24,840 --> 00:06:30,210
backwards compatible because of huge

00:06:28,050 --> 00:06:31,620
companies using us or like dozens of

00:06:30,210 --> 00:06:34,410
people and hundreds of thousands of

00:06:31,620 --> 00:06:37,110
people using Django screwing everybody

00:06:34,410 --> 00:06:39,030
over just for this tiny new feature it's

00:06:37,110 --> 00:06:41,610
kind of a bad idea not really what Rango

00:06:39,030 --> 00:06:44,220
is about however if it's about security

00:06:41,610 --> 00:06:46,590
and you go and like this is one key

00:06:44,220 --> 00:06:48,689
thing that's broken we need to fix this

00:06:46,590 --> 00:06:50,129
and the only way to actually do this is

00:06:48,689 --> 00:06:52,860
break this one other thing

00:06:50,129 --> 00:06:55,199
then we much more happy to break this

00:06:52,860 --> 00:06:58,110
and have it secure than not having it

00:06:55,199 --> 00:07:03,240
secure and but yeah having this feature

00:06:58,110 --> 00:07:05,099
in there let's say you come up with a

00:07:03,240 --> 00:07:07,050
patch then we're not just gonna

00:07:05,099 --> 00:07:09,419
committed and relieve string on there's

00:07:07,050 --> 00:07:11,819
a whole problem step of validating your

00:07:09,419 --> 00:07:13,770
patch so if you provide the patch we are

00:07:11,819 --> 00:07:16,560
going to like the security team is going

00:07:13,770 --> 00:07:18,060
to validate your patch it's doing a like

00:07:16,560 --> 00:07:20,580
a regular review and every other patch

00:07:18,060 --> 00:07:24,300
that's contributed to Jenga probably

00:07:20,580 --> 00:07:26,610
more on a security perspective involved

00:07:24,300 --> 00:07:30,030
rather than like feature or really like

00:07:26,610 --> 00:07:33,659
Docs to review or not but the point here

00:07:30,030 --> 00:07:35,250
being there's the second set of eyes or

00:07:33,659 --> 00:07:38,669
a second group of people reviewing the

00:07:35,250 --> 00:07:40,770
patch on the other hand if you didn't

00:07:38,669 --> 00:07:42,750
come up with a pet but we did we send

00:07:40,770 --> 00:07:45,270
you the patch and ask you to validate

00:07:42,750 --> 00:07:47,250
this patch as in does the patch we came

00:07:45,270 --> 00:07:50,099
up with actually fix the issue you

00:07:47,250 --> 00:07:53,340
reported and that you thought if you

00:07:50,099 --> 00:07:55,740
found or is the pet we provide just

00:07:53,340 --> 00:07:58,650
something that mimics that prevents

00:07:55,740 --> 00:08:00,169
something that mimics this issue and we

00:07:58,650 --> 00:08:03,210
actually don't fix the underlying issue

00:08:00,169 --> 00:08:06,839
so this confirmation step is probably

00:08:03,210 --> 00:08:10,580
the most the the longest time in the

00:08:06,839 --> 00:08:14,219
process there you must go back and forth

00:08:10,580 --> 00:08:16,949
now that we have confirmed and validated

00:08:14,219 --> 00:08:19,949
patch like we couldn't just commit it

00:08:16,949 --> 00:08:23,639
publicly and like here's a release we

00:08:19,949 --> 00:08:26,069
could but we don't because there's a

00:08:23,639 --> 00:08:28,289
Jenga being as mentioned Jango is being

00:08:26,069 --> 00:08:32,010
used by a whole bunch of organizations

00:08:28,289 --> 00:08:34,800
and distributors just releasing Jango

00:08:32,010 --> 00:08:40,169
into the world with a security patch

00:08:34,800 --> 00:08:42,419
it's not really nice so what we do is we

00:08:40,169 --> 00:08:45,209
have a list of pre notification email

00:08:42,419 --> 00:08:47,640
addresses that we inform about about

00:08:45,209 --> 00:08:50,970
that there's this view security release

00:08:47,640 --> 00:08:53,279
upcoming normally within the next or in

00:08:50,970 --> 00:08:54,760
seven days and what we also do is we

00:08:53,279 --> 00:08:57,640
send them

00:08:54,760 --> 00:08:59,920
this patch for pretty much every

00:08:57,640 --> 00:09:03,550
supported Jenga version so that when

00:08:59,920 --> 00:09:07,000
they provide Jenga for downstream users

00:09:03,550 --> 00:09:09,460
so if they bundle Django in Linux

00:09:07,000 --> 00:09:11,770
repositories for example if they have

00:09:09,460 --> 00:09:14,140
their own Django build they can use that

00:09:11,770 --> 00:09:17,950
patch and apply that to they are

00:09:14,140 --> 00:09:19,180
dragging us and instance and all secure

00:09:17,950 --> 00:09:21,100
at the moment they do that and deploy

00:09:19,180 --> 00:09:24,070
that and hopefully by the time we

00:09:21,100 --> 00:09:24,630
released Django they have patched their

00:09:24,070 --> 00:09:31,480
systems

00:09:24,630 --> 00:09:33,310
this list is this list is non-public we

00:09:31,480 --> 00:09:35,500
won't make it a public we won't tell you

00:09:33,310 --> 00:09:37,720
who is on there there's essentially

00:09:35,500 --> 00:09:40,990
three groups of category of three

00:09:37,720 --> 00:09:42,070
categories of people or organizations

00:09:40,990 --> 00:09:44,140
that can be on there

00:09:42,070 --> 00:09:47,350
the first thing being operating system

00:09:44,140 --> 00:09:50,530
vendors and distributors then depending

00:09:47,350 --> 00:09:53,730
on the security issue on and essentially

00:09:50,530 --> 00:09:56,410
on a case-by-case basis providers or

00:09:53,730 --> 00:09:59,230
distributors of other django packages

00:09:56,410 --> 00:10:03,070
that are highly likely or affected by

00:09:59,230 --> 00:10:06,070
the same security issue and even on also

00:10:03,070 --> 00:10:08,890
on a case-by-case basis other entities

00:10:06,070 --> 00:10:11,440
that use Django in like huge

00:10:08,890 --> 00:10:13,000
environments healthcare in front that

00:10:11,440 --> 00:10:14,620
have healthcare information behind them

00:10:13,000 --> 00:10:19,990
personal lots of personal information or

00:10:14,620 --> 00:10:23,140
whatnot what we further do is for a

00:10:19,990 --> 00:10:25,290
couple of months maybe a year to now we

00:10:23,140 --> 00:10:29,290
announced this upcoming security release

00:10:25,290 --> 00:10:32,020
that's in a week perhaps at the Django

00:10:29,290 --> 00:10:35,110
announced email address or email group

00:10:32,020 --> 00:10:38,200
or email list and this will also give

00:10:35,110 --> 00:10:40,000
you as a person who is under whom I

00:10:38,200 --> 00:10:41,650
subscribe to that or who is potentially

00:10:40,000 --> 00:10:44,590
in charge of deploying Django Peck

00:10:41,650 --> 00:10:46,150
releases at work the possibility to say

00:10:44,590 --> 00:10:49,000
okay there's a general release coming up

00:10:46,150 --> 00:10:51,580
in 7 days around that time with the

00:10:49,000 --> 00:10:53,440
severity of something we probably should

00:10:51,580 --> 00:10:56,980
have make sure that we have somebody

00:10:53,440 --> 00:10:59,800
around at that time who can like look at

00:10:56,980 --> 00:11:01,540
the release and see if you are affected

00:10:59,800 --> 00:11:06,730
and like potentially deploy the fix

00:11:01,540 --> 00:11:08,150
right away and then seven days later

00:11:06,730 --> 00:11:10,940
their stories

00:11:08,150 --> 00:11:13,970
so what we do is we commit the security

00:11:10,940 --> 00:11:17,000
page to the public repository repository

00:11:13,970 --> 00:11:20,780
and essentially the moment we posters

00:11:17,000 --> 00:11:23,330
for those fixes jangle the suti release

00:11:20,780 --> 00:11:26,720
the security issue has been disclosed

00:11:23,330 --> 00:11:30,400
and is public so from that time on

00:11:26,720 --> 00:11:32,900
there's no way back essentially

00:11:30,400 --> 00:11:35,660
following that somebody from the Jango

00:11:32,900 --> 00:11:38,180
releases team is going to provide a

00:11:35,660 --> 00:11:40,610
ability general release submitting that

00:11:38,180 --> 00:11:42,860
and free publish a book blog post about

00:11:40,610 --> 00:11:47,270
the security issue we will not provide

00:11:42,860 --> 00:11:49,400
an exploit because that's kind of not

00:11:47,270 --> 00:11:51,800
the right way to do probably because all

00:11:49,400 --> 00:11:53,540
of a sudden everybody could just use

00:11:51,800 --> 00:11:57,800
that and hack other of people outside

00:11:53,540 --> 00:11:59,750
and there's not nice so we publish the

00:11:57,800 --> 00:12:02,920
blog post here's a new security issue a

00:11:59,750 --> 00:12:06,020
release that fixes an issue down there

00:12:02,920 --> 00:12:08,150
please update if as soon as possible and

00:12:06,020 --> 00:12:09,860
what we also do is we write to a bunch

00:12:08,150 --> 00:12:11,210
of email addresses once one of them

00:12:09,860 --> 00:12:13,070
being to Jango and our email address

00:12:11,210 --> 00:12:14,450
here is a release and this is

00:12:13,070 --> 00:12:17,900
essentially the email you saw in the

00:12:14,450 --> 00:12:20,300
beginning and yeah this is the

00:12:17,900 --> 00:12:23,030
announcement part of the announcement is

00:12:20,300 --> 00:12:25,250
also that we assign so-called CVE a

00:12:23,030 --> 00:12:29,510
common vulnerability and exposure number

00:12:25,250 --> 00:12:32,600
to every issue we fix which gives you

00:12:29,510 --> 00:12:35,900
the option to see if the Jango will

00:12:32,600 --> 00:12:38,630
release you use so if you use a package

00:12:35,900 --> 00:12:42,520
single version from Ubuntu or Debian or

00:12:38,630 --> 00:12:45,220
whatever then the version that you use

00:12:42,520 --> 00:12:51,770
actually has fixed the issue that we

00:12:45,220 --> 00:12:54,350
disclose so if you use Ubuntu and don't

00:12:51,770 --> 00:12:56,690
use like a virtual environment with when

00:12:54,350 --> 00:12:58,910
you install menu pip install Jango then

00:12:56,690 --> 00:13:01,730
you want to make sure that the Jango you

00:12:58,910 --> 00:13:03,170
version you use has those issues fixed

00:13:01,730 --> 00:13:06,110
and the easiest way to do that is

00:13:03,170 --> 00:13:09,260
actually checking the Ubuntu security

00:13:06,110 --> 00:13:13,640
list and seeing as it's this CBE fixed

00:13:09,260 --> 00:13:15,950
in the triangle version I use there's

00:13:13,640 --> 00:13:19,730
another thing about coming the way of

00:13:15,950 --> 00:13:22,000
providing a fix and the the thing here

00:13:19,730 --> 00:13:24,850
being that when you provide a fix

00:13:22,000 --> 00:13:26,230
you did a whole bunch of work and Jenga

00:13:24,850 --> 00:13:28,810
is in the lucky position of being able

00:13:26,230 --> 00:13:31,660
to pay for back fix for security bug

00:13:28,810 --> 00:13:32,050
fixes well that's not quite right it's

00:13:31,660 --> 00:13:33,430
not

00:13:32,050 --> 00:13:36,580
Jenga or the Jenga Software Foundation

00:13:33,430 --> 00:13:39,610
who is paying for that it's depending on

00:13:36,580 --> 00:13:42,040
how we gotta pay out a bounty it's

00:13:39,610 --> 00:13:46,450
either Facebook or Microsoft when it's

00:13:42,040 --> 00:13:49,420
happening via the hacker one funding

00:13:46,450 --> 00:13:52,240
that we have which means if you rip

00:13:49,420 --> 00:13:54,370
report a security issue that is reported

00:13:52,240 --> 00:13:57,990
security issue and potentially even fix

00:13:54,370 --> 00:14:01,830
that security issue you have a certain

00:13:57,990 --> 00:14:05,440
credit area that we can give you as a

00:14:01,830 --> 00:14:08,920
bounty for provider providing us with a

00:14:05,440 --> 00:14:11,230
report if you fix the issue yourself

00:14:08,920 --> 00:14:13,270
then and this is being released into a

00:14:11,230 --> 00:14:17,290
jamming into a jingle version then you

00:14:13,270 --> 00:14:19,090
can also go to the Google security pet

00:14:17,290 --> 00:14:21,580
reward program and that's something

00:14:19,090 --> 00:14:23,560
that's up to you and Google that's not

00:14:21,580 --> 00:14:26,140
something Django is involved in and ask

00:14:23,560 --> 00:14:29,530
Google for a reward based on the

00:14:26,140 --> 00:14:31,920
severity of that fix but the Google

00:14:29,530 --> 00:14:35,620
Remote program also is not bound to

00:14:31,920 --> 00:14:37,330
security bug fixes if you have this new

00:14:35,620 --> 00:14:38,740
feature you want to introduce in Django

00:14:37,330 --> 00:14:41,200
which includes increases security

00:14:38,740 --> 00:14:44,110
overall provides a new security feature

00:14:41,200 --> 00:14:48,420
then you can also apply at Google for

00:14:44,110 --> 00:14:52,089
getting a button T for that new feature

00:14:48,420 --> 00:14:53,920
and depending on like the amount of

00:14:52,089 --> 00:14:56,740
money we talk about a security issue it

00:14:53,920 --> 00:14:59,560
can be like five hundred US dollar or

00:14:56,740 --> 00:15:03,100
potentially even upwards so it might be

00:14:59,560 --> 00:15:05,290
worth looking into that right enough

00:15:03,100 --> 00:15:07,420
abbas do you process let's talk about

00:15:05,290 --> 00:15:09,100
during US history and when you open the

00:15:07,420 --> 00:15:10,960
drain your website this is something you

00:15:09,100 --> 00:15:13,210
see there django take security seriously

00:15:10,960 --> 00:15:15,520
and helps developers of what many combat

00:15:13,210 --> 00:15:19,690
security mistakes and yeah Django is

00:15:15,520 --> 00:15:23,290
reassuringly secure well let's look at

00:15:19,690 --> 00:15:25,630
some numbers right numbers are fun and

00:15:23,290 --> 00:15:28,510
they lie and may not and statistics you

00:15:25,630 --> 00:15:32,080
can read whatever you want with them so

00:15:28,510 --> 00:15:34,630
I'm not a statistician these are just a

00:15:32,080 --> 00:15:36,279
bear numbers of secure of CVS we have

00:15:34,630 --> 00:15:39,129
published in these years

00:15:36,279 --> 00:15:40,839
nothing fancy about this statistic you

00:15:39,129 --> 00:15:45,790
can read whatever you want with from

00:15:40,839 --> 00:15:48,519
these diagrams one thing you could think

00:15:45,790 --> 00:15:50,920
of like Django has mostly gets more and

00:15:48,519 --> 00:15:55,449
more security issues every year well

00:15:50,920 --> 00:15:57,879
true but why potentially because they

00:15:55,449 --> 00:15:59,860
are just dozens of hundreds of thousands

00:15:57,879 --> 00:16:01,600
of more people using it and it's just

00:15:59,860 --> 00:16:05,620
the way that more people look into that

00:16:01,600 --> 00:16:08,430
and see that is it because Django gets

00:16:05,620 --> 00:16:11,740
more insecure we do stupid things and

00:16:08,430 --> 00:16:15,819
open up security issues on purpose

00:16:11,740 --> 00:16:19,870
maybe maybe not no probably not and yeah

00:16:15,819 --> 00:16:21,579
so there's not really a these are bad

00:16:19,870 --> 00:16:27,790
numbers there's a whole way of how to

00:16:21,579 --> 00:16:30,100
you could interpret them I'm positively

00:16:27,790 --> 00:16:34,680
surprised that the number for security

00:16:30,100 --> 00:16:39,389
reports for 2017 is still at I think - I

00:16:34,680 --> 00:16:39,389
hope it stays there but like who knows

00:16:39,689 --> 00:16:46,689
so that for web and web development the

00:16:43,889 --> 00:16:48,370
these numbers are or when we look a bit

00:16:46,689 --> 00:16:51,189
more into details of the security

00:16:48,370 --> 00:16:53,889
reports we had and classify those

00:16:51,189 --> 00:16:55,990
reports a bit in detail then we end up

00:16:53,889 --> 00:16:59,759
with something like this with this

00:16:55,990 --> 00:17:03,129
diagram and kind of unsurprisingly the

00:16:59,759 --> 00:17:08,439
distributed denial-of-service reports we

00:17:03,129 --> 00:17:11,169
had were the most but the interesting

00:17:08,439 --> 00:17:14,649
part is actually that the exist s

00:17:11,169 --> 00:17:18,159
reports we got are also the most like

00:17:14,649 --> 00:17:20,079
the second most reports so let's get

00:17:18,159 --> 00:17:21,909
into a bit of what those categories

00:17:20,079 --> 00:17:23,829
actually means so you have something

00:17:21,909 --> 00:17:26,350
that you can look up when you get home

00:17:23,829 --> 00:17:28,690
and look into you the projects you're

00:17:26,350 --> 00:17:30,940
working on and make sure that stuff is

00:17:28,690 --> 00:17:35,169
actually not an issue in your project

00:17:30,940 --> 00:17:38,799
and while do s is actually a common

00:17:35,169 --> 00:17:40,750
thing it's not it's also it's not

00:17:38,799 --> 00:17:44,500
necessarily the worst thing the worst

00:17:40,750 --> 00:17:47,530
thing in web development is not just

00:17:44,500 --> 00:17:48,590
probably but it's definitely cross-site

00:17:47,530 --> 00:17:52,970
scripting

00:17:48,590 --> 00:17:54,529
and when you do this in your coat then I

00:17:52,970 --> 00:17:56,360
encourage you the moment you step out of

00:17:54,529 --> 00:18:00,429
the door and go and fix this because

00:17:56,360 --> 00:18:04,370
this is wrong do not do this this is bad

00:18:00,429 --> 00:18:06,770
do this where you go and pass the data

00:18:04,370 --> 00:18:10,820
escape dresses and then use Jason's

00:18:06,770 --> 00:18:14,390
pausing to load test or put it into a

00:18:10,820 --> 00:18:17,570
data attribute in HTML and use for

00:18:14,390 --> 00:18:22,360
example J's queries doc data that would

00:18:17,570 --> 00:18:24,980
then do the JSON parsing and magic

00:18:22,360 --> 00:18:28,840
there's a ticket for like making

00:18:24,980 --> 00:18:30,950
something like this bit more useable

00:18:28,840 --> 00:18:32,570
Django sprints if you want to look into

00:18:30,950 --> 00:18:36,669
that be my guest

00:18:32,570 --> 00:18:39,429
happy to like get involved in it as well

00:18:36,669 --> 00:18:42,850
the other thing that is quite common

00:18:39,429 --> 00:18:47,480
across like request forgery issues or

00:18:42,850 --> 00:18:50,840
CSRF or xsrf and when you have like an a

00:18:47,480 --> 00:18:53,450
link to a like that's a bit of a stretch

00:18:50,840 --> 00:18:55,429
here but if you have a link again I get

00:18:53,450 --> 00:18:57,620
requests - to your bank website where

00:18:55,429 --> 00:18:59,149
you have all the information that you

00:18:57,620 --> 00:19:01,490
want to transfer money from one account

00:18:59,149 --> 00:19:03,559
to another the amount and whatnot in the

00:19:01,490 --> 00:19:06,649
get parameters then you are screwed

00:19:03,559 --> 00:19:08,330
because you can like embed this link

00:19:06,649 --> 00:19:10,669
into an image tag well there's probably

00:19:08,330 --> 00:19:12,649
not going to be an image loaded but the

00:19:10,669 --> 00:19:15,350
money is still going to be transferred

00:19:12,649 --> 00:19:19,090
so the way to protect against this is

00:19:15,350 --> 00:19:22,640
using for a post request on forms and

00:19:19,090 --> 00:19:27,559
having certain tokens that can only be

00:19:22,640 --> 00:19:29,750
set in certain constraints then I

00:19:27,559 --> 00:19:33,620
mentioned denial of service of already

00:19:29,750 --> 00:19:35,870
and they're kind of fun because whatever

00:19:33,620 --> 00:19:38,450
I do I promise you you will run into a

00:19:35,870 --> 00:19:40,370
denial of service issue yourself and you

00:19:38,450 --> 00:19:44,179
will not even notice that until it's

00:19:40,370 --> 00:19:46,279
potentially too late I'm not sure how

00:19:44,179 --> 00:19:49,250
many denial of service issues there were

00:19:46,279 --> 00:19:51,860
in Django like just below the half of

00:19:49,250 --> 00:19:55,940
them like we had 62 reports security

00:19:51,860 --> 00:20:01,399
issues since 2006 and like I think 29 of

00:19:55,940 --> 00:20:02,540
them were DOAs and the interesting one

00:20:01,399 --> 00:20:04,970
particularly interesting

00:20:02,540 --> 00:20:08,420
- we had in Django its was in tooth

00:20:04,970 --> 00:20:11,570
dangle one point for most with regards

00:20:08,420 --> 00:20:14,240
to the URL field so you know the Django

00:20:11,570 --> 00:20:16,580
URL field I can put in a domain or the

00:20:14,240 --> 00:20:21,110
entire URL that used to have an

00:20:16,580 --> 00:20:27,880
attribute verify exists guess how that

00:20:21,110 --> 00:20:27,880
could go wrong should I go into details

00:20:28,540 --> 00:20:34,070
the other thing is something from 2013

00:20:32,330 --> 00:20:36,620
which wasn't just an issue in Django but

00:20:34,070 --> 00:20:41,330
pretty much every software like from

00:20:36,620 --> 00:20:42,620
Python Ruby JavaScript Java probably PHP

00:20:41,330 --> 00:20:45,530
as well I have no idea probably

00:20:42,620 --> 00:20:47,270
everything which was called the billion

00:20:45,530 --> 00:20:52,510
laughs attack and there's an attack on

00:20:47,270 --> 00:20:52,510
XML and entity replacement in XML box

00:20:53,110 --> 00:20:58,790
it's called billion 1 billion laughs

00:20:55,760 --> 00:21:02,240
look it up on Wikipedia it's a genius

00:20:58,790 --> 00:21:04,610
idea of how to exploit how to do things

00:21:02,240 --> 00:21:06,500
wrong and what to think about what about

00:21:04,610 --> 00:21:10,690
all the things you need to think about

00:21:06,500 --> 00:21:15,820
to not screw things up and yet do that

00:21:10,690 --> 00:21:19,220
something that happens occasionally it's

00:21:15,820 --> 00:21:21,680
quite a fish in a phishing attack or

00:21:19,220 --> 00:21:24,080
easy for phishing attacks unvalidated to

00:21:21,680 --> 00:21:26,660
redirect so you have your log in page

00:21:24,080 --> 00:21:30,050
and that you know this forgot password

00:21:26,660 --> 00:21:34,460
link there let's say you managed to

00:21:30,050 --> 00:21:37,670
sneak in a different domain in the email

00:21:34,460 --> 00:21:40,070
that's sent to a user then the one the

00:21:37,670 --> 00:21:42,860
user is currently on that would mean the

00:21:40,070 --> 00:21:45,730
email the user gets has a link to a

00:21:42,860 --> 00:21:50,060
different domain for the password reset

00:21:45,730 --> 00:21:52,160
then is on your side then then the the

00:21:50,060 --> 00:21:55,250
real side which means the password reset

00:21:52,160 --> 00:21:56,630
link points to something else and all

00:21:55,250 --> 00:21:59,660
the sudden the user is in a different

00:21:56,630 --> 00:22:01,660
side and potentially manages to like you

00:21:59,660 --> 00:22:05,180
have a perfect phishing attack there and

00:22:01,660 --> 00:22:08,750
to prevent for that prevent or prevent

00:22:05,180 --> 00:22:10,550
that you need to like validate whatever

00:22:08,750 --> 00:22:13,550
you have and this next parameters or

00:22:10,550 --> 00:22:16,429
wherever you redirect to be secure and

00:22:13,550 --> 00:22:19,220
to be part of your website

00:22:16,429 --> 00:22:21,309
and this perfectly comes together with

00:22:19,220 --> 00:22:24,860
the next one which is henna poisoning

00:22:21,309 --> 00:22:26,419
essentially this domain redirect or

00:22:24,860 --> 00:22:30,289
invalid under the dated redirects

00:22:26,419 --> 00:22:32,720
happens to be an issue of the the fact

00:22:30,289 --> 00:22:35,029
that you can set a host header to

00:22:32,720 --> 00:22:37,340
something and if it's not the intended

00:22:35,029 --> 00:22:44,990
domain but another one then yeah yes

00:22:37,340 --> 00:22:49,340
good who used Django 1.4 who used string

00:22:44,990 --> 00:22:52,490
on one point four point one 2.3.4 you

00:22:49,340 --> 00:22:54,139
remember this issue with way all the

00:22:52,490 --> 00:22:55,759
sudden menu you started using Django one

00:22:54,139 --> 00:22:56,889
point four deployed it the entire site

00:22:55,759 --> 00:22:59,539
wasn't working anymore

00:22:56,889 --> 00:23:02,830
so they also think what or there is a

00:22:59,539 --> 00:23:06,169
thing since then called allowed hosts

00:23:02,830 --> 00:23:09,110
that's the back that's essentially this

00:23:06,169 --> 00:23:11,419
is the issue that led to a loud house

00:23:09,110 --> 00:23:15,230
and what I said in the beginning of

00:23:11,419 --> 00:23:18,559
let's have backwards incompatibility for

00:23:15,230 --> 00:23:23,090
security we went with let's have a loud

00:23:18,559 --> 00:23:24,769
host as opposed to this issue that

00:23:23,090 --> 00:23:26,149
couple of more I don't have too much

00:23:24,769 --> 00:23:28,279
time left there's something called

00:23:26,149 --> 00:23:30,080
remote code execution there's been one

00:23:28,279 --> 00:23:32,809
report in Jenga which was really really

00:23:30,080 --> 00:23:35,240
hard to trigger and not really well it

00:23:32,809 --> 00:23:39,519
was an issue but Nick it was very very

00:23:35,240 --> 00:23:44,649
unlikely to ever be an issue

00:23:39,519 --> 00:23:44,649
just don't use pickle use something else

00:23:45,759 --> 00:23:52,279
authentication authorization bypasses

00:23:48,559 --> 00:23:54,259
are they happen unfortunately like if

00:23:52,279 --> 00:23:56,840
you forget this login required decorator

00:23:54,259 --> 00:24:00,830
here everybody can you remove every

00:23:56,840 --> 00:24:05,629
other user which is probably not what

00:24:00,830 --> 00:24:09,110
you want directory travels are used to

00:24:05,629 --> 00:24:11,330
be a thing in in Django like ages ago

00:24:09,110 --> 00:24:13,129
the last issue and that no that level

00:24:11,330 --> 00:24:15,710
wasn't 2013 so it's a couple of years

00:24:13,129 --> 00:24:17,690
ago essentially it what it means is

00:24:15,710 --> 00:24:21,080
you've managed to access files you're

00:24:17,690 --> 00:24:23,419
not supposed to and then lastly

00:24:21,080 --> 00:24:25,309
information leakage which probably ties

00:24:23,419 --> 00:24:27,740
together with the authentication

00:24:25,309 --> 00:24:29,450
authorization they authorization bypass

00:24:27,740 --> 00:24:32,539
where you

00:24:29,450 --> 00:24:34,909
and very published information that you

00:24:32,539 --> 00:24:36,970
didn't want to and there's a whole

00:24:34,909 --> 00:24:40,700
different level of what you publish that

00:24:36,970 --> 00:24:42,620
you don't want like publishing this user

00:24:40,700 --> 00:24:44,419
exists is certainly on a different level

00:24:42,620 --> 00:24:46,700
then and here's all the information

00:24:44,419 --> 00:24:50,960
about this user like from password hash

00:24:46,700 --> 00:24:53,840
to email address to whatever all these I

00:24:50,960 --> 00:24:56,210
think about ten categories are summed up

00:24:53,840 --> 00:24:58,039
in the awaaz top ten the open web

00:24:56,210 --> 00:25:01,610
application security project I encourage

00:24:58,039 --> 00:25:04,070
you to look that up and make browse

00:25:01,610 --> 00:25:07,850
through the reports and categories there

00:25:04,070 --> 00:25:10,279
they they give a good idea and like a

00:25:07,850 --> 00:25:13,100
good summary of what you want to look

00:25:10,279 --> 00:25:15,889
into or what you want to watch out for

00:25:13,100 --> 00:25:21,710
when you write your whatever application

00:25:15,889 --> 00:25:24,080
and on that note thank you for coming

00:25:21,710 --> 00:25:25,669
thanks for being here and also thanks to

00:25:24,080 --> 00:25:29,550
Florian Apollo nough who helped me

00:25:25,669 --> 00:25:38,700
prepare this slides for a previous talk

00:25:29,550 --> 00:25:38,700

YouTube URL: https://www.youtube.com/watch?v=hsJ475EZRog


