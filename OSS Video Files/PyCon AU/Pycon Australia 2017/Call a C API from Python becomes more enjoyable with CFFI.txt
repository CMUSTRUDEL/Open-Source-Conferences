Title: Call a C API from Python becomes more enjoyable with CFFI
Publication date: 2017-08-05
Playlist: Pycon Australia 2017
Description: 
	Jean-SÃ©bastien Bevilacqua

http://2017.pycon-au.org/schedule/presentation/40/

#pyconau

This talk was given at PyCon Australia 2017 which was held from 3-8 August, 2017 in Melbourne, Victoria.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2017, we're returning to Melbourne, bringing together students, enthusiasts, and professionals with a love of Python from around Australia, and from all over the World. 

August 3-8 2017, Melbourne, Victoria

Python, PyCon, PyConAU
Captions: 
	00:00:03,049 --> 00:00:11,340
did you sing jean-sebastien Bevilaqua

00:00:07,670 --> 00:00:16,680
close I'm sorry um who has joined us

00:00:11,340 --> 00:00:19,199
from a long way away he's - guy French

00:00:16,680 --> 00:00:22,020
guy and has done quite a bit hacking in

00:00:19,199 --> 00:00:35,070
the 3d space please join me in working

00:00:22,020 --> 00:00:35,640
in him Hey ok it's working ok so ok do

00:00:35,070 --> 00:00:39,899
you hear me

00:00:35,640 --> 00:00:42,480
yes ok so welcome everyone I'm glad to

00:00:39,899 --> 00:00:44,489
be here with you today so if I give this

00:00:42,480 --> 00:00:47,370
talk it's because I truly believe in

00:00:44,489 --> 00:00:50,399
sci-fi to improve maintainability and

00:00:47,370 --> 00:00:52,199
war business of Python extension I want

00:00:50,399 --> 00:00:54,329
to share with you my experience in order

00:00:52,199 --> 00:00:56,340
to convince you to give a try to see if

00:00:54,329 --> 00:01:01,829
a file next time you need to write a

00:00:56,340 --> 00:01:04,860
Python extension ok so like you can hear

00:01:01,829 --> 00:01:07,610
from my accent I'm French and I come

00:01:04,860 --> 00:01:09,900
from Paris after one full day in plane

00:01:07,610 --> 00:01:13,409
this is not the right time you can add a

00:01:09,900 --> 00:01:15,960
trio so it's very long yet it allows me

00:01:13,409 --> 00:01:18,720
to discover your magnificent country and

00:01:15,960 --> 00:01:22,159
you Australian people so by the way you

00:01:18,720 --> 00:01:25,710
are very welcoming thank you

00:01:22,159 --> 00:01:28,950
Who am I so I'm John Sebastian Bevilaqua

00:01:25,710 --> 00:01:31,790
I write free software every day and I'm

00:01:28,950 --> 00:01:35,009
a fan of open source ecosystem and

00:01:31,790 --> 00:01:38,369
philosophy so you can find the big part

00:01:35,009 --> 00:01:40,790
of my contribution on github moreover I

00:01:38,369 --> 00:01:44,009
work at in Agora it's a French company

00:01:40,790 --> 00:01:46,320
that promotes free software and it's

00:01:44,009 --> 00:01:49,140
this company which encouraged me to give

00:01:46,320 --> 00:01:51,570
this talk so if you need support for

00:01:49,140 --> 00:01:55,920
free software just contacts list we'll

00:01:51,570 --> 00:01:58,469
be happy to do it so first why do we

00:01:55,920 --> 00:02:01,590
need python extension I'm going to tell

00:01:58,469 --> 00:02:04,640
you my use case so approximately one

00:02:01,590 --> 00:02:07,950
year ago the new VidCon API was released

00:02:04,640 --> 00:02:10,649
VidCon is a new graphic API that will

00:02:07,950 --> 00:02:12,930
replace OpenGL in the near future I

00:02:10,649 --> 00:02:17,489
don't know if you do you know of it come

00:02:12,930 --> 00:02:20,220
yes No someone okay so it's a very

00:02:17,489 --> 00:02:23,040
low-level graphic API you can create

00:02:20,220 --> 00:02:24,720
Triple A games with it and it's course

00:02:23,040 --> 00:02:28,920
compatible with Windows Linux and

00:02:24,720 --> 00:02:32,519
Android nowadays the server steam games

00:02:28,920 --> 00:02:34,409
use good calm so when you go back at

00:02:32,519 --> 00:02:37,230
this time I was enjoying OpenGL

00:02:34,409 --> 00:02:39,209
development and with Wilco I saw an

00:02:37,230 --> 00:02:42,900
opportunity to improve my 3d and

00:02:39,209 --> 00:02:45,359
low-level knowledge and of course Beaton

00:02:42,900 --> 00:02:47,459
was my languages of choice we all know

00:02:45,359 --> 00:02:52,430
why but there was no binding between

00:02:47,459 --> 00:02:55,379
Python and will come so you should use a

00:02:52,430 --> 00:02:58,799
language like C to use will come no

00:02:55,379 --> 00:03:02,250
Python but as you may know if it comes a

00:02:58,799 --> 00:03:04,409
low-level API and in order to use it you

00:03:02,250 --> 00:03:07,170
have to call low-level function like GL

00:03:04,409 --> 00:03:09,750
open and jail time so I decided to write

00:03:07,170 --> 00:03:14,639
my book on biting fro baton directly in

00:03:09,750 --> 00:03:16,470
C with the sea patency API at first as a

00:03:14,639 --> 00:03:18,269
sign that you should know that patent

00:03:16,470 --> 00:03:24,000
extension can be used to improve

00:03:18,269 --> 00:03:26,099
performance but it was not - case so

00:03:24,000 --> 00:03:29,750
sadly with C language you can have

00:03:26,099 --> 00:03:32,310
system errors like segmentation faults a

00:03:29,750 --> 00:03:35,129
marvelous Python it can be very apt to

00:03:32,310 --> 00:03:37,980
track a segmentation fault also you use

00:03:35,129 --> 00:03:40,409
variant can help you but you still a

00:03:37,980 --> 00:03:45,299
it's still a difficult task that you

00:03:40,409 --> 00:03:47,549
won't enjoy I promise so to write a bite

00:03:45,299 --> 00:03:51,060
an extension in C you have to make use

00:03:47,549 --> 00:03:53,609
of the sea Payton API it allows you to

00:03:51,060 --> 00:03:54,139
create module at function and classes in

00:03:53,609 --> 00:03:57,389
it

00:03:54,139 --> 00:04:00,269
after reading the good C Python API I

00:03:57,389 --> 00:04:02,459
starts in my C extension so it was clear

00:04:00,269 --> 00:04:05,519
and I'd felt self-confident but it's

00:04:02,459 --> 00:04:08,340
still C so we have to fight again malloc

00:04:05,519 --> 00:04:08,639
and free like usual but because it's too

00:04:08,340 --> 00:04:11,459
easy

00:04:08,639 --> 00:04:15,120
see bite an API at the reference

00:04:11,459 --> 00:04:17,310
counting and the camera API I almost

00:04:15,120 --> 00:04:20,430
give up several times due to the amount

00:04:17,310 --> 00:04:22,830
of rock we are going to see existing

00:04:20,430 --> 00:04:25,450
solution to result to live with our

00:04:22,830 --> 00:04:28,450
complexity of C extension

00:04:25,450 --> 00:04:33,370
but before that let's see API in API

00:04:28,450 --> 00:04:36,520
mode because from now I will often use

00:04:33,370 --> 00:04:39,760
ABI API words so I need to explain

00:04:36,520 --> 00:04:42,100
clearly what I mean by this terms API

00:04:39,760 --> 00:04:46,180
means application programming interface

00:04:42,100 --> 00:04:49,090
and API application binary interface so

00:04:46,180 --> 00:04:52,180
the API mud it was it what humans use

00:04:49,090 --> 00:04:54,160
you call a function you need to know the

00:04:52,180 --> 00:04:58,690
name of the function and the argument to

00:04:54,160 --> 00:05:01,840
pass so as a programming interface it's

00:04:58,690 --> 00:05:04,300
all expressed in South Scott the API is

00:05:01,840 --> 00:05:07,750
very similar think of it as a compiled

00:05:04,300 --> 00:05:11,170
version of the API to be clear when you

00:05:07,750 --> 00:05:13,350
write the program you use the human API

00:05:11,170 --> 00:05:15,790
then when your program is compiled

00:05:13,350 --> 00:05:19,000
computer will access the API of the

00:05:15,790 --> 00:05:22,030
library maybe you wonder the goal of API

00:05:19,000 --> 00:05:25,270
mode from a human point of view we could

00:05:22,030 --> 00:05:27,340
just stick with the API accessing a

00:05:25,270 --> 00:05:29,500
library with API mode allows you to

00:05:27,340 --> 00:05:31,120
dynamically link at runtime and tools

00:05:29,500 --> 00:05:34,960
can be used with an interpreted language

00:05:31,120 --> 00:05:38,230
like Python without compilation also a

00:05:34,960 --> 00:05:40,660
mod can be interesting to use you have

00:05:38,230 --> 00:05:44,680
to explicitly described the binary

00:05:40,660 --> 00:05:48,430
interfund like you will see after we see

00:05:44,680 --> 00:05:50,230
types so let's see the existing solution

00:05:48,430 --> 00:05:53,620
to easily easily write to bite an

00:05:50,230 --> 00:05:56,200
extension so like I said just before you

00:05:53,620 --> 00:05:57,390
can do it with the C Python API but it's

00:05:56,200 --> 00:06:01,600
a difficult task

00:05:57,390 --> 00:06:03,880
the first one is Satan Satan use an

00:06:01,600 --> 00:06:06,280
interesting approach it can execute

00:06:03,880 --> 00:06:10,290
directly or by Duncan and you can add

00:06:06,280 --> 00:06:13,060
new syntax these elements by iteration

00:06:10,290 --> 00:06:16,030
it's very good but when you start to add

00:06:13,060 --> 00:06:18,490
custom site and some tags like here your

00:06:16,030 --> 00:06:21,010
Python code is normal Python and so you

00:06:18,490 --> 00:06:21,670
lose possibility and Satan becomes a

00:06:21,010 --> 00:06:23,980
required

00:06:21,670 --> 00:06:26,710
dependency you should take that into

00:06:23,980 --> 00:06:29,910
account before using it such a

00:06:26,710 --> 00:06:32,740
dependency can be dangerous sometime

00:06:29,910 --> 00:06:34,750
moreover the first goal of Satan is to

00:06:32,740 --> 00:06:38,910
improve personal performance of pattern

00:06:34,750 --> 00:06:38,910
not to write rubber

00:06:40,890 --> 00:06:48,030
Satan can be compiled into supports API

00:06:44,740 --> 00:06:51,160
and hmm that's a good point

00:06:48,030 --> 00:06:54,790
another solution that everyone knows is

00:06:51,160 --> 00:06:57,490
c-types the only advantages of c-types

00:06:54,790 --> 00:06:59,560
it's because it's a built-in so it's a

00:06:57,490 --> 00:07:02,410
good point because you can be sure

00:06:59,560 --> 00:07:04,390
c-types is always available with c-types

00:07:02,410 --> 00:07:07,210
you don't need computation it works on

00:07:04,390 --> 00:07:09,970
the a bi mÃ¡t only so you didn't have a

00:07:07,210 --> 00:07:15,010
clean link at run time during the to the

00:07:09,970 --> 00:07:16,480
library so here an example of C types

00:07:15,010 --> 00:07:19,540
like if you like you can see on the

00:07:16,480 --> 00:07:23,230
screen to use C types you need to learn

00:07:19,540 --> 00:07:25,660
a new API to see types API you have to

00:07:23,230 --> 00:07:30,940
translate your C either to the C types

00:07:25,660 --> 00:07:33,640
API in this example I declare I forgot a

00:07:30,940 --> 00:07:35,650
yeah the same thing same screen here but

00:07:33,640 --> 00:07:38,680
that look here so in this example I

00:07:35,650 --> 00:07:40,680
declare open strict and get back the

00:07:38,680 --> 00:07:43,780
victor size function from the library

00:07:40,680 --> 00:07:46,660
it's error-prone and cumbersome if you

00:07:43,780 --> 00:07:49,200
were very big library like VidCon it

00:07:46,660 --> 00:07:51,460
will be painful and it could lead to

00:07:49,200 --> 00:07:58,900
segmentation fault because you can have

00:07:51,460 --> 00:08:01,390
a be a mismatch no the light 7 years ago

00:07:58,900 --> 00:08:03,610
to smart people I mean we go and match

00:08:01,390 --> 00:08:06,520
each pin Charles key created save a file

00:08:03,610 --> 00:08:09,040
maybe you know this name because I

00:08:06,520 --> 00:08:11,770
thought pi PI 2 so it's not a piece of

00:08:09,040 --> 00:08:15,669
cake for information pi PI is an

00:08:11,770 --> 00:08:18,220
alternative interpreter with a JIT edge

00:08:15,669 --> 00:08:20,410
it is a just-in-time compiler so at

00:08:18,220 --> 00:08:23,500
first cff I was an alternative to see

00:08:20,410 --> 00:08:26,979
types it was working only and the API

00:08:23,500 --> 00:08:27,940
mode later the API mode was added and

00:08:26,979 --> 00:08:30,840
revolutionist

00:08:27,940 --> 00:08:33,820
pattern ecosystem extension ecosystem

00:08:30,840 --> 00:08:37,300
before us if if I to create an API mode

00:08:33,820 --> 00:08:40,960
extension for pattern API you had to use

00:08:37,300 --> 00:08:44,140
the C Python C API or Satan which only

00:08:40,960 --> 00:08:46,990
work with see Peyton now with CF fi

00:08:44,140 --> 00:08:50,050
extensions are working with C pattern 2

00:08:46,990 --> 00:08:51,860
3 and PI pi without changing 1/9 of

00:08:50,050 --> 00:08:53,959
chocolate

00:08:51,860 --> 00:08:56,800
no you understand a billion api mod I

00:08:53,959 --> 00:09:00,019
can show you how it works with the FFA

00:08:56,800 --> 00:09:03,589
but let's introduce another concept of

00:09:00,019 --> 00:09:07,160
CF fi this one is a lot simpler than a

00:09:03,589 --> 00:09:09,890
billion a pyramid so first in the inline

00:09:07,160 --> 00:09:12,170
mode when you use the inline mode every

00:09:09,890 --> 00:09:16,610
single set up every time you import your

00:09:12,170 --> 00:09:18,260
Python cutter in the out of line mud you

00:09:16,610 --> 00:09:21,170
have a separate step of preparation and

00:09:18,260 --> 00:09:23,839
possibly compilation that produces a

00:09:21,170 --> 00:09:26,779
module which your main program can then

00:09:23,839 --> 00:09:29,990
import of course inline mode is

00:09:26,779 --> 00:09:35,390
available only for IBM word since API

00:09:29,990 --> 00:09:39,470
mud always requires competition okay so

00:09:35,390 --> 00:09:42,680
this first example show how to work with

00:09:39,470 --> 00:09:45,320
a billion in line mud it's a very

00:09:42,680 --> 00:09:48,050
classic example this is the first

00:09:45,320 --> 00:09:50,720
pictures reported by CF Fi and it's

00:09:48,050 --> 00:09:53,120
exactly what C types is done for so you

00:09:50,720 --> 00:09:55,279
can compare it with C types like you can

00:09:53,120 --> 00:09:58,190
see we say if fi you just pass the C

00:09:55,279 --> 00:10:02,329
either to see dev and open your library

00:09:58,190 --> 00:10:06,829
with GL open that's all yeah I let CF a

00:10:02,329 --> 00:10:09,440
fine no ze open function by passing the

00:10:06,829 --> 00:10:13,130
printf function by passing it to the CDF

00:10:09,440 --> 00:10:15,199
function next I create a char argument

00:10:13,130 --> 00:10:19,430
and I can pass it to the printer

00:10:15,199 --> 00:10:23,750
function so it just magic CF fi syntax

00:10:19,430 --> 00:10:25,550
is clean and intuitive if you run this

00:10:23,750 --> 00:10:29,899
example on your computer you will get

00:10:25,550 --> 00:10:33,019
this result it works very well I print

00:10:29,899 --> 00:10:34,490
with the printf function not the Python

00:10:33,019 --> 00:10:38,240
print function it's make a big

00:10:34,490 --> 00:10:40,760
difference you have your you can use all

00:10:38,240 --> 00:10:44,300
the entire scene in space with this demo

00:10:40,760 --> 00:10:46,670
I usually this did I usually do this

00:10:44,300 --> 00:10:48,709
demo in life but last time it was at

00:10:46,670 --> 00:10:54,800
over by 10 and my terminal died during

00:10:48,709 --> 00:10:57,320
the talk so I don't take the risk but

00:10:54,800 --> 00:11:00,290
chef fi goes one step further with its

00:10:57,320 --> 00:11:04,740
API mode this time we are going to use a

00:11:00,290 --> 00:11:06,509
pyramid with the PWD library so

00:11:04,740 --> 00:11:09,360
still similar but you can notice a

00:11:06,509 --> 00:11:13,259
difference we pass the code to see FF I

00:11:09,360 --> 00:11:16,949
with sets or function in the sauce we

00:11:13,259 --> 00:11:19,410
just include PWD and types in the CDF we

00:11:16,949 --> 00:11:22,290
don't need to add all PWD functions just

00:11:19,410 --> 00:11:24,660
the one we want to use so here we use

00:11:22,290 --> 00:11:28,290
only two functions and we don't need all

00:11:24,660 --> 00:11:30,149
fields of path summary district finally

00:11:28,290 --> 00:11:33,180
you just ask you see FF I to compare

00:11:30,149 --> 00:11:38,610
your mother your module okay it's pretty

00:11:33,180 --> 00:11:39,750
clear when you run the script it

00:11:38,610 --> 00:11:42,209
compares your module

00:11:39,750 --> 00:11:45,079
it's just a Python script and see if Fi

00:11:42,209 --> 00:11:47,149
and there's the compilation pad for us

00:11:45,079 --> 00:11:49,589
compilation is fully cross-platform

00:11:47,149 --> 00:11:54,199
thanks to CSV file so it works on

00:11:49,589 --> 00:11:57,300
Windows Linux Mike I think we didn't try

00:11:54,199 --> 00:12:00,000
like you can see see FF I do the

00:11:57,300 --> 00:12:01,860
compilation in three steps first it

00:12:00,000 --> 00:12:04,379
generates a sip file containing the

00:12:01,860 --> 00:12:08,100
source code and the CFI black magic

00:12:04,379 --> 00:12:10,800
secret it compiles this file into an

00:12:08,100 --> 00:12:16,680
object file and finally it generates the

00:12:10,800 --> 00:12:21,930
Python module so the Python module is is

00:12:16,680 --> 00:12:23,730
the demo tool that supplied etc with

00:12:21,930 --> 00:12:27,060
this mod your pattern extraction is

00:12:23,730 --> 00:12:29,819
robust fast and easy to maintain with

00:12:27,060 --> 00:12:32,040
this API mud you can't add segmentation

00:12:29,819 --> 00:12:34,069
fault due to a mismatch in epi you can I

00:12:32,040 --> 00:12:36,750
have a segmentation fault if you cut is

00:12:34,069 --> 00:12:41,310
that we're working but it's not due to

00:12:36,750 --> 00:12:46,009
the mismatching ABI okay let's try it

00:12:41,310 --> 00:12:49,380
now do do like it's a demo it's not bad

00:12:46,009 --> 00:12:53,550
fraternities okay on the top you can see

00:12:49,380 --> 00:12:56,610
the content of demo to run file and the

00:12:53,550 --> 00:13:00,319
result and the bottom like you can see

00:12:56,610 --> 00:13:04,319
we get root if we ask for the PID 0 and

00:13:00,319 --> 00:13:06,300
we get 1000 if you ask for my place so

00:13:04,319 --> 00:13:10,290
like you can see it very easy and

00:13:06,300 --> 00:13:13,649
intuitive to use the Lib is contained or

00:13:10,290 --> 00:13:16,559
the rapidly bridge so it's fully work

00:13:13,649 --> 00:13:19,400
and it's a real compile it's about an

00:13:16,559 --> 00:13:22,440
extension it's nice

00:13:19,400 --> 00:13:24,240
no they're interesting part so I'm

00:13:22,440 --> 00:13:26,300
currently building a 3d engine with

00:13:24,240 --> 00:13:29,910
baton and the new VidCon graphic API

00:13:26,300 --> 00:13:32,640
like I said to you I created the VidCon

00:13:29,910 --> 00:13:35,460
weapon directly in C but if I'm here

00:13:32,640 --> 00:13:38,100
today it's thanks to I mean Ringo when I

00:13:35,460 --> 00:13:41,430
show him my VidCon repair on iesson it

00:13:38,100 --> 00:13:44,220
tells me you could Wi-Fi of course you

00:13:41,430 --> 00:13:46,710
write it you then explain me advantages

00:13:44,220 --> 00:13:48,570
of CF fi it tooks Nomad to meet the new

00:13:46,710 --> 00:13:51,900
challenge right at VidCon rapper

00:13:48,570 --> 00:13:54,330
directly we certified so what I ready to

00:13:51,900 --> 00:13:56,190
lose months of work it's a decision but

00:13:54,330 --> 00:14:01,830
I definitely made the right choice I'm

00:13:56,190 --> 00:14:05,190
going to show you why so like an

00:14:01,830 --> 00:14:07,890
engineer will have statistics VidCon IPA

00:14:05,190 --> 00:14:11,310
is very huge Android app functions and

00:14:07,890 --> 00:14:15,680
read of strict and read of constant buzz

00:14:11,310 --> 00:14:15,680
and 5,000 line of code fuzzy either

00:14:17,690 --> 00:14:22,650
wrapping or this API in plain C is

00:14:20,490 --> 00:14:25,860
madness as you can see with this number

00:14:22,650 --> 00:14:29,370
it's Maya's first silver per more than

00:14:25,860 --> 00:14:32,720
60,000 line for the generated C file I'm

00:14:29,370 --> 00:14:32,720
crazy enough to have done it

00:14:32,960 --> 00:14:39,270
whereas with CF Fi it's only simple and

00:14:36,720 --> 00:14:42,720
clean Python code to give you an idea

00:14:39,270 --> 00:14:44,850
both time it took me one month and a

00:14:42,720 --> 00:14:48,450
half for the C version and only two

00:14:44,850 --> 00:14:51,180
weeks with the FFI this time is only on

00:14:48,450 --> 00:14:53,340
my on my spare time so I think it would

00:14:51,180 --> 00:14:56,150
like it would have taken only one which

00:14:53,340 --> 00:14:59,340
at full time now with chef fi very fast

00:14:56,150 --> 00:15:02,610
when I go to an open issue on github I

00:14:59,340 --> 00:15:04,140
can fix it in one hour usually because

00:15:02,610 --> 00:15:06,630
it's just Python cut there is no C

00:15:04,140 --> 00:15:10,500
involved and the C version was too

00:15:06,630 --> 00:15:14,580
difficult to maintain so I would all

00:15:10,500 --> 00:15:17,490
this up this one repair works in both in

00:15:14,580 --> 00:15:19,770
both case I use a generator Khronos

00:15:17,490 --> 00:15:23,130
group did a very good job with will come

00:15:19,770 --> 00:15:24,840
because Kronos is behind Luca all is

00:15:23,130 --> 00:15:26,040
open source and you can contribute

00:15:24,840 --> 00:15:29,250
easily on github

00:15:26,040 --> 00:15:31,590
it provides an XML file that describes

00:15:29,250 --> 00:15:33,690
the API

00:15:31,590 --> 00:15:36,450
so my generator takes this XML file as

00:15:33,690 --> 00:15:39,180
input and generates the vilkin for power

00:15:36,450 --> 00:15:41,820
by doing a generator I can obtain the

00:15:39,180 --> 00:15:43,320
rapper in 2 minutes when the new version

00:15:41,820 --> 00:15:50,850
of the API is realized

00:15:43,320 --> 00:15:53,220
so basically here are the steps first I

00:15:50,850 --> 00:15:55,670
load and pass XML definition of the

00:15:53,220 --> 00:16:01,110
Ricoh API because there is an XML file

00:15:55,670 --> 00:16:03,120
then I generate the data model next I

00:16:01,110 --> 00:16:04,920
generate the Python module with the

00:16:03,120 --> 00:16:10,170
ginger to template I think you know

00:16:04,920 --> 00:16:12,840
ginger to template engine so in the Thai

00:16:10,170 --> 00:16:14,910
now passing like I said passing is done

00:16:12,840 --> 00:16:17,670
with XML to dig package it's a good way

00:16:14,910 --> 00:16:19,950
to pass an XML file without attach it

00:16:17,670 --> 00:16:23,400
transform your XML file into a year she

00:16:19,950 --> 00:16:25,650
can Python dictionary so now that we

00:16:23,400 --> 00:16:27,360
have a good data model easy to pass we

00:16:25,650 --> 00:16:29,280
can pass it with the ginger to template

00:16:27,360 --> 00:16:31,740
and that's where as the two modules

00:16:29,280 --> 00:16:35,580
differ between the C version is severe

00:16:31,740 --> 00:16:38,490
vibration so what you see here is the

00:16:35,580 --> 00:16:40,650
folder structure of the C extension for

00:16:38,490 --> 00:16:42,660
the C extension there are too much

00:16:40,650 --> 00:16:44,760
things involved so to keep the code

00:16:42,660 --> 00:16:48,030
mental level I had to split it to split

00:16:44,760 --> 00:16:50,970
it up line of course is a line of code

00:16:48,030 --> 00:16:52,650
is a good indicator yeah but what is

00:16:50,970 --> 00:16:55,880
more important is the complexity of the

00:16:52,650 --> 00:16:58,890
cutter like you can see it's pretty huge

00:16:55,880 --> 00:17:01,020
Norva with C code you have to manage

00:16:58,890 --> 00:17:06,090
memory yourself and this is very

00:17:01,020 --> 00:17:10,050
error-prone now we see FFI okay I think

00:17:06,090 --> 00:17:12,540
it's clear despite of its despite of its

00:17:10,050 --> 00:17:15,180
looks what you see on screen means a lot

00:17:12,540 --> 00:17:17,730
we see FF i I did not mean I did not

00:17:15,180 --> 00:17:20,790
mean to think about architecture it was

00:17:17,730 --> 00:17:24,720
obvious all in one file so one more

00:17:20,790 --> 00:17:27,600
point for C Fifi you don't have to trust

00:17:24,720 --> 00:17:30,680
me once when I say CFA is better let's

00:17:27,600 --> 00:17:34,620
see it in action and you will understand

00:17:30,680 --> 00:17:38,610
so constant constant it is easier paths

00:17:34,620 --> 00:17:42,360
and both case are simple in C we just

00:17:38,610 --> 00:17:44,880
use the C Python API to add constant but

00:17:42,360 --> 00:17:48,590
we have to take care about via type the

00:17:44,880 --> 00:17:50,280
you see for int you have a special macro

00:17:48,590 --> 00:17:52,920
with Chef Fi

00:17:50,280 --> 00:17:59,040
it's just bitin it and it's dynamically

00:17:52,920 --> 00:17:59,820
tip I'll the variable only with constant

00:17:59,040 --> 00:18:01,920
you don't go far away

00:17:59,820 --> 00:18:04,800
so next step is to create binding for

00:18:01,920 --> 00:18:07,050
strips but there is no strict concept in

00:18:04,800 --> 00:18:11,300
pattern so you can use classes which is

00:18:07,050 --> 00:18:14,220
you know we see peyten

00:18:11,300 --> 00:18:17,730
see patterns capi you have to under the

00:18:14,220 --> 00:18:19,560
new dell in it and get for each member

00:18:17,730 --> 00:18:22,440
you have to use malloc to allocate

00:18:19,560 --> 00:18:24,870
memory for your objects in dell you must

00:18:22,440 --> 00:18:27,570
free your object in in it you have to

00:18:24,870 --> 00:18:30,180
pass each parameter with c python util

00:18:27,570 --> 00:18:33,660
functions and in get you have to convert

00:18:30,180 --> 00:18:36,000
your sister to a Python object so I can

00:18:33,660 --> 00:18:38,760
assure you it takes me a lot of time to

00:18:36,000 --> 00:18:40,410
figure out how to do it properly cut

00:18:38,760 --> 00:18:42,390
this term that I can't show you an

00:18:40,410 --> 00:18:45,810
example on screen but you can go and

00:18:42,390 --> 00:18:49,440
make a table if you want to see we see

00:18:45,810 --> 00:18:51,660
FF final it's 40 line see FF i unders

00:18:49,440 --> 00:18:54,930
force object allocation and deletion I

00:18:51,660 --> 00:18:57,950
just used plain Python to under all

00:18:54,930 --> 00:19:00,300
struct unionization in a generic way I

00:18:57,950 --> 00:19:03,180
repeat to be sure you understand this

00:19:00,300 --> 00:19:07,230
generic new function works for all

00:19:03,180 --> 00:19:10,020
strips of vertical we see bite an API so

00:19:07,230 --> 00:19:12,150
step I showed you just before must be

00:19:10,020 --> 00:19:14,670
done for each strict and there are

00:19:12,150 --> 00:19:16,560
Android of strict so when you realize

00:19:14,670 --> 00:19:20,880
these benefits you just print out with

00:19:16,560 --> 00:19:23,610
CF fi what I showed you

00:19:20,880 --> 00:19:26,490
until area with Viacom proper is the API

00:19:23,610 --> 00:19:29,400
mode so let's try the fast and robust

00:19:26,490 --> 00:19:30,530
API mode no we are going to wrap a

00:19:29,400 --> 00:19:34,860
syllabary

00:19:30,530 --> 00:19:39,170
with the API out of line one this mod is

00:19:34,860 --> 00:19:39,170
robust and fast but you need compilation

00:19:39,260 --> 00:19:44,880
maybe you know shirazi I don't know

00:19:42,300 --> 00:19:47,430
so we are going to wrap shadow silly

00:19:44,880 --> 00:19:49,830
webs shall see the free software done by

00:19:47,430 --> 00:19:52,680
Google guys but not directly related by

00:19:49,830 --> 00:19:55,080
to Google and gives you the ability to

00:19:52,680 --> 00:19:57,270
compel GLSL language to Spearville

00:19:55,080 --> 00:20:00,030
binary

00:19:57,270 --> 00:20:01,650
listen and spare me from Matt's I used

00:20:00,030 --> 00:20:04,770
to create program for your graphic card

00:20:01,650 --> 00:20:07,590
so you take your GLSL card you converts

00:20:04,770 --> 00:20:09,030
it with jealousy in CRV and you put this

00:20:07,590 --> 00:20:11,310
pair we cut in the graphic up to

00:20:09,030 --> 00:20:15,450
executive over so it's very very low

00:20:11,310 --> 00:20:19,890
level but this surprise is very known

00:20:15,450 --> 00:20:22,350
among the graphic developer and there is

00:20:19,890 --> 00:20:27,380
no pattern there world there is no

00:20:22,350 --> 00:20:32,370
pattern repel no there is one so when I

00:20:27,380 --> 00:20:36,000
do a CFO fire whopper I usually create a

00:20:32,370 --> 00:20:38,400
folder dedicated to cff I named chef Fi

00:20:36,000 --> 00:20:41,550
bill and I work among you to do so to

00:20:38,400 --> 00:20:46,860
keep a clean separation of concerns so

00:20:41,550 --> 00:20:49,620
Cheryl seed that edge contains share RC

00:20:46,860 --> 00:20:51,630
functions in a signatures and strict we

00:20:49,620 --> 00:20:56,940
just copy past the either provided by

00:20:51,630 --> 00:20:59,660
Google and CFA under it Paris liberal is

00:20:56,940 --> 00:21:02,250
used to generate the baton extension

00:20:59,660 --> 00:21:05,010
next we have the patience he folder

00:21:02,250 --> 00:21:06,540
containing our proper and finally we'll

00:21:05,010 --> 00:21:13,200
take a look at the setup file with a

00:21:06,540 --> 00:21:15,120
specially FFA Future so like you see we

00:21:13,200 --> 00:21:17,430
first read content of the chassis either

00:21:15,120 --> 00:21:21,090
here it is this is the script from

00:21:17,430 --> 00:21:22,920
building the developer so we first read

00:21:21,090 --> 00:21:25,380
content of jealousy there and pass it to

00:21:22,920 --> 00:21:28,260
the CDF function that's all for the

00:21:25,380 --> 00:21:30,180
definition three lines and see if I

00:21:28,260 --> 00:21:34,140
knows how to under this liberal

00:21:30,180 --> 00:21:36,090
beautiful sometimes you need to work you

00:21:34,140 --> 00:21:38,580
down but this time is the reader is

00:21:36,090 --> 00:21:42,870
clean so you don't need to rework it to

00:21:38,580 --> 00:21:45,060
refactor it now with these few lines

00:21:42,870 --> 00:21:47,640
with their CFO fight to compile the

00:21:45,060 --> 00:21:50,430
zones with statically linked library

00:21:47,640 --> 00:21:55,080
shut asleep combined and to name the

00:21:50,430 --> 00:21:56,850
extension by shall see and okay so

00:21:55,080 --> 00:21:59,400
Sharon C combined is a static library

00:21:56,850 --> 00:22:02,640
that we have to compile before running

00:21:59,400 --> 00:22:05,010
this ufffff iPads I don't show you

00:22:02,640 --> 00:22:07,710
because it's not directly related to

00:22:05,010 --> 00:22:09,210
certify you can look and Gator if you

00:22:07,710 --> 00:22:11,730
are interested in

00:22:09,210 --> 00:22:14,760
so like you can see there is no secret

00:22:11,730 --> 00:22:17,520
involved with just the FFI to open a

00:22:14,760 --> 00:22:22,590
Python bottle to the share a syllabary

00:22:17,520 --> 00:22:25,740
here again it looks like magic but

00:22:22,590 --> 00:22:28,920
currently our extension is ready but we

00:22:25,740 --> 00:22:31,380
remain dependent of CF fi for example if

00:22:28,920 --> 00:22:34,560
you want to pass a pointer a pointer to

00:22:31,380 --> 00:22:37,050
a function you have to use the FFA when

00:22:34,560 --> 00:22:39,390
using your wrapper you use your users

00:22:37,050 --> 00:22:42,180
should not mean to know CF fi it's just

00:22:39,390 --> 00:22:43,740
a dependency so we are going to write to

00:22:42,180 --> 00:22:47,580
write a small pattern cut especially

00:22:43,740 --> 00:22:49,560
project record is located in piracy in

00:22:47,580 --> 00:22:51,060
it and is loaded automatically

00:22:49,560 --> 00:22:55,680
automatically when you import your

00:22:51,060 --> 00:22:58,830
module so first this is just by Tonkin

00:22:55,680 --> 00:23:01,530
the wrapper is a unlit by safeassign now

00:22:58,830 --> 00:23:06,230
we take the the repel the lib object and

00:23:01,530 --> 00:23:09,600
we use it to to make a proper Python API

00:23:06,230 --> 00:23:12,770
so we first load our extension Bushido C

00:23:09,600 --> 00:23:15,570
which contain a few Phi and Lib modules

00:23:12,770 --> 00:23:18,750
leave contain all functions and strict

00:23:15,570 --> 00:23:21,660
related to our library defined in the

00:23:18,750 --> 00:23:25,140
seeder we need if we fight to to

00:23:21,660 --> 00:23:27,150
interface with the only bird let's

00:23:25,140 --> 00:23:30,300
examine the compiled interest PRV

00:23:27,150 --> 00:23:33,350
function remember the shutters a library

00:23:30,300 --> 00:23:36,240
allows you to complete GLSL prosperity

00:23:33,350 --> 00:23:40,770
so our function defined in our extension

00:23:36,240 --> 00:23:42,330
can be accessed through lib object if

00:23:40,770 --> 00:23:45,300
you take a look at the compiled in line

00:23:42,330 --> 00:23:48,270
we can pass pure bites and types like

00:23:45,300 --> 00:23:48,650
int of string and CFA converts its for

00:23:48,270 --> 00:23:53,220
us

00:23:48,650 --> 00:23:55,140
clean it entity like you can see not

00:23:53,220 --> 00:23:58,650
that with Python 3

00:23:55,140 --> 00:24:03,270
shrank string must be bytes I just put a

00:23:58,650 --> 00:24:06,030
bit before the main so shall see returns

00:24:03,270 --> 00:24:08,310
a pointer to us we have to tell CF fi to

00:24:06,030 --> 00:24:11,720
convert it to a byte byte an object

00:24:08,310 --> 00:24:14,520
because in in Python there is no pointer

00:24:11,720 --> 00:24:16,800
you can use but we can use byte

00:24:14,520 --> 00:24:18,720
so we first get back the pointer and the

00:24:16,800 --> 00:24:22,140
length but we can't directly copy the

00:24:18,720 --> 00:24:24,690
data to a byte in pattern because bite

00:24:22,140 --> 00:24:28,550
is immaterial so we have to copy that

00:24:24,690 --> 00:24:31,050
into a battery and pass it bites object

00:24:28,550 --> 00:24:32,910
take a look at the if you fight one man

00:24:31,050 --> 00:24:35,340
move function it's similar to the mem

00:24:32,910 --> 00:24:37,440
copy see function but directly impacted

00:24:35,340 --> 00:24:42,270
so I'm doing memory manipulation

00:24:37,440 --> 00:24:44,430
directly in beta in bonus chef fi

00:24:42,270 --> 00:24:47,790
provides provides the setup tools in the

00:24:44,430 --> 00:24:50,730
extension you just add the entry CFA

00:24:47,790 --> 00:24:55,410
five modules and your extension we will

00:24:50,730 --> 00:24:57,780
be built by support setup tools now we

00:24:55,410 --> 00:25:00,600
can enjoy the wizard let's play a simple

00:24:57,780 --> 00:25:03,480
game using vidcom wrapper and by shadow

00:25:00,600 --> 00:25:05,490
save wrapper the to verbal whistle so

00:25:03,480 --> 00:25:07,860
this simple game is right and fully with

00:25:05,490 --> 00:25:16,770
Python and make use of the new shiny

00:25:07,860 --> 00:25:27,570
Vulcano API it's a very simple so just

00:25:16,770 --> 00:25:29,550
by turning will come no secret okay but

00:25:27,570 --> 00:25:42,180
now you can do triple a game but it's

00:25:29,550 --> 00:25:44,310
your turn to work now so I hope that

00:25:42,180 --> 00:25:46,710
like me you enjoyed this talk if one day

00:25:44,310 --> 00:25:48,990
you need to reduce a syllabary or to

00:25:46,710 --> 00:25:51,660
improve performance of your code think

00:25:48,990 --> 00:26:01,020
about see if I thank you price for your

00:25:51,660 --> 00:26:03,060
attention and have a nice day we do have

00:26:01,020 --> 00:26:09,630
a few minutes for questions so if you've

00:26:03,060 --> 00:26:13,950
got one put your hand up um if you use

00:26:09,630 --> 00:26:16,890
the setup tools extension does somebody

00:26:13,950 --> 00:26:25,520
installing your application need to have

00:26:16,890 --> 00:26:26,730
a compiler installed yes and right but

00:26:25,520 --> 00:26:28,770
okay

00:26:26,730 --> 00:26:44,850
would there be any way to pre compiler

00:26:28,770 --> 00:26:48,410
and put it into a what happens if you

00:26:44,850 --> 00:26:51,360
don't delete the Python object that is

00:26:48,410 --> 00:26:53,910
representing the C object is that will

00:26:51,360 --> 00:26:57,180
it automatically be freed when it gets

00:26:53,910 --> 00:27:00,540
garbage collected and if so is there a

00:26:57,180 --> 00:27:02,490
way to attach AC finalizar to an object

00:27:00,540 --> 00:27:04,590
so you just say when you go out of scope

00:27:02,490 --> 00:27:08,970
please clean up this resource using this

00:27:04,590 --> 00:27:12,030
C function so yes if I uh if there is no

00:27:08,970 --> 00:27:18,480
reference to a see object C if if I did

00:27:12,030 --> 00:27:20,910
destroy it I have a question how does it

00:27:18,480 --> 00:27:23,040
work with other languages so if you've

00:27:20,910 --> 00:27:27,420
got your wanting to wrap something else

00:27:23,040 --> 00:27:28,980
which is a compiled language like an

00:27:27,420 --> 00:27:30,690
Internet you can find an example with

00:27:28,980 --> 00:27:33,270
with you can you can

00:27:30,690 --> 00:27:35,760
it's just exporting an API yeah you can

00:27:33,270 --> 00:27:38,310
export your wrist in there and you can

00:27:35,760 --> 00:27:44,610
use it with if FA using a brush stereo

00:27:38,310 --> 00:27:48,690
you have to rewrite a see here to blog

00:27:44,610 --> 00:27:53,160
who is the person but it just it's just

00:27:48,690 --> 00:27:54,960
first so maybe maybe you need you need

00:27:53,160 --> 00:27:59,070
to see either because if I don't know

00:27:54,960 --> 00:28:01,530
worse so yes you already see them any

00:27:59,070 --> 00:28:03,620
more questions right please join me in

00:28:01,530 --> 00:28:03,620
thanking

00:28:06,390 --> 00:28:12,030

YouTube URL: https://www.youtube.com/watch?v=P6qvhoQGaSk


