Title: Multitenant applications: how and why
Publication date: 2017-08-05
Playlist: Pycon Australia 2017
Description: 
	Filipe de Alencar Ximenes

http://2017.pycon-au.org/schedule/presentation/30/

#pyconau

This talk was given at PyCon Australia 2017 which was held from 3-8 August, 2017 in Melbourne, Victoria.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2017, we're returning to Melbourne, bringing together students, enthusiasts, and professionals with a love of Python from around Australia, and from all over the World. 

August 3-8 2017, Melbourne, Victoria

Python, PyCon, PyConAU
Captions: 
	00:00:00,329 --> 00:00:06,930
now we have Felipe who comes all the way

00:00:04,710 --> 00:00:09,379
from Brazil just to speak to us isn't

00:00:06,930 --> 00:00:09,379
that cool

00:00:09,490 --> 00:00:13,740
[Applause]

00:00:11,389 --> 00:00:15,360
he's interested in all kinds of

00:00:13,740 --> 00:00:17,970
programming languages their communities

00:00:15,360 --> 00:00:20,100
and open-source and believes that simple

00:00:17,970 --> 00:00:22,850
is better than complex and this should

00:00:20,100 --> 00:00:26,160
be a mantra for most things in life and

00:00:22,850 --> 00:00:27,810
in because simple is better than complex

00:00:26,160 --> 00:00:29,400
apparently multi-tenant applications of

00:00:27,810 --> 00:00:36,870
how and why is really simple so let's

00:00:29,400 --> 00:00:41,329
get man good afternoon

00:00:36,870 --> 00:00:44,309
so before we talk about lieutenancy

00:00:41,329 --> 00:00:47,610
this is my twitter handle if you follow

00:00:44,309 --> 00:00:50,460
me but before that I have a disclaimer

00:00:47,610 --> 00:00:55,710
so as I come from the zero it turns out

00:00:50,460 --> 00:00:58,699
I have a massive jet lag so if I pass

00:00:55,710 --> 00:01:02,460
out like any time you know what happen

00:00:58,699 --> 00:01:04,559
all right so my name is Felipe I come

00:01:02,460 --> 00:01:10,049
from Brazil which is on the Northeast of

00:01:04,559 --> 00:01:11,790
Brazil Recife Brazil and I've been in

00:01:10,049 --> 00:01:15,630
Australia for one year doing high school

00:01:11,790 --> 00:01:17,939
so and that has been a long while ago so

00:01:15,630 --> 00:01:20,700
just so you have an idea of how long has

00:01:17,939 --> 00:01:28,860
been since I'd be here this was

00:01:20,700 --> 00:01:32,070
happening yeah this will happen here all

00:01:28,860 --> 00:01:35,100
right so I'm partner and developer at

00:01:32,070 --> 00:01:37,680
Vita we have a playbook where we

00:01:35,100 --> 00:01:41,040
compiled some of our moves the way we

00:01:37,680 --> 00:01:44,490
work if you want to check out we also do

00:01:41,040 --> 00:01:47,220
a lot of open source in my one check out

00:01:44,490 --> 00:01:48,899
or boilerplate project general

00:01:47,220 --> 00:01:52,920
permissions and tapioca which are both

00:01:48,899 --> 00:01:56,159
mine projects yeah feel free to go there

00:01:52,920 --> 00:01:58,920
so let's start with a bit of context all

00:01:56,159 --> 00:02:02,000
right so I'm not sure how many of you

00:01:58,920 --> 00:02:06,509
are familiar with enterprise application

00:02:02,000 --> 00:02:09,599
but it turns out there is a big market

00:02:06,509 --> 00:02:10,660
for fidgets spinners I'm not sure if you

00:02:09,599 --> 00:02:13,630
know about this yeah

00:02:10,660 --> 00:02:16,240
so the application will be dealing here

00:02:13,630 --> 00:02:21,340
today is a cooperative gently spinning

00:02:16,240 --> 00:02:23,020
tracking and this is database schema we

00:02:21,340 --> 00:02:26,560
are going to be using so we have a

00:02:23,020 --> 00:02:28,690
customer which has users you have a

00:02:26,560 --> 00:02:30,550
spinner which is kind of like the type

00:02:28,690 --> 00:02:33,490
of the spinner and then you have user

00:02:30,550 --> 00:02:37,060
has one spinner and you can spin the

00:02:33,490 --> 00:02:39,490
spinner cheap enough all right so this

00:02:37,060 --> 00:02:42,640
is how it goes so you you want to sell

00:02:39,490 --> 00:02:45,070
your cooperative spinner software so you

00:02:42,640 --> 00:02:47,260
go to the big cooperation and you say

00:02:45,070 --> 00:02:49,690
alright I have this software you might

00:02:47,260 --> 00:02:53,200
want it and the senior will say alright

00:02:49,690 --> 00:02:55,450
I like it we do need it and he says you

00:02:53,200 --> 00:02:59,110
do not have to talk to you the head of

00:02:55,450 --> 00:03:01,750
IT and you go to the head of IT and you

00:02:59,110 --> 00:03:05,950
explain he asked a lot of questions and

00:03:01,750 --> 00:03:08,110
at some point she's going to ask you how

00:03:05,950 --> 00:03:12,150
do you protect our data because the

00:03:08,110 --> 00:03:14,350
corporation does want to leak data so

00:03:12,150 --> 00:03:15,960
that's the point where you'll be glad

00:03:14,350 --> 00:03:20,770
you know about multi-tenancy

00:03:15,960 --> 00:03:23,320
so what is mutagenesis first from

00:03:20,770 --> 00:03:25,780
Wikipedia it says it refers to a

00:03:23,320 --> 00:03:27,790
software architecture in which a single

00:03:25,780 --> 00:03:35,530
instant of software runs on a server and

00:03:27,790 --> 00:03:37,990
serves multiple tenants Co so it's a bit

00:03:35,530 --> 00:03:41,440
like not straight forward but like just

00:03:37,990 --> 00:03:43,870
sing sing resistance of software serving

00:03:41,440 --> 00:03:45,990
with potent in tenants every time I say

00:03:43,870 --> 00:03:50,430
tenant here you just just here client is

00:03:45,990 --> 00:03:54,430
for the context just saying or customers

00:03:50,430 --> 00:03:57,600
so what we want to achieve here is we

00:03:54,430 --> 00:04:00,990
want to use material C to reduce the the

00:03:57,600 --> 00:04:03,940
infrastructure costs we want to simplify

00:04:00,990 --> 00:04:06,730
software and we want to also simplifies

00:04:03,940 --> 00:04:09,840
infrastructure by having less nodes in

00:04:06,730 --> 00:04:15,000
our architecture

00:04:09,840 --> 00:04:17,980
I'm going to be going through three main

00:04:15,000 --> 00:04:20,919
structures form with these applications

00:04:17,980 --> 00:04:24,070
the first one is I'll call it I mean

00:04:20,919 --> 00:04:27,010
there is no official name for none of

00:04:24,070 --> 00:04:28,570
I'll just call I have simple name for it

00:04:27,010 --> 00:04:31,840
for each but the first one will be a

00:04:28,570 --> 00:04:34,420
single shared schema and it's pretty

00:04:31,840 --> 00:04:36,250
much what big corporations views so if

00:04:34,420 --> 00:04:39,210
you go to Salesforce they'll be

00:04:36,250 --> 00:04:43,210
something like this for example

00:04:39,210 --> 00:04:46,210
and it's sippin office one server one

00:04:43,210 --> 00:04:48,160
database and I mean you can get a little

00:04:46,210 --> 00:04:54,220
more complex with if you're a big word

00:04:48,160 --> 00:04:57,160
did the base line is that and I'm gonna

00:04:54,220 --> 00:04:59,410
be going through the code I want to show

00:04:57,160 --> 00:05:03,840
you how to do stuff and so all the

00:04:59,410 --> 00:05:08,650
examples within Django as expected so

00:05:03,840 --> 00:05:11,020
for this this approach we're going to be

00:05:08,650 --> 00:05:16,210
writing a mirror I'm using the the new

00:05:11,020 --> 00:05:17,980
style mid-rare functions and the thing

00:05:16,210 --> 00:05:23,170
we want to do is we are going to access

00:05:17,980 --> 00:05:24,580
IBM dot peanut racking cone and the

00:05:23,170 --> 00:05:27,840
first path really simple we are just

00:05:24,580 --> 00:05:30,850
getting the IBM name from the request

00:05:27,840 --> 00:05:35,080
and then we fetch the customer from the

00:05:30,850 --> 00:05:38,200
database and we set the request customer

00:05:35,080 --> 00:05:38,560
to the customer we just fetch and that's

00:05:38,200 --> 00:05:41,530
it

00:05:38,560 --> 00:05:44,860
you just run your requested for your

00:05:41,530 --> 00:05:48,310
views and ensure work when you get to

00:05:44,860 --> 00:05:51,520
the views the way you're going to worry

00:05:48,310 --> 00:05:55,420
you just use the requester customer in

00:05:51,520 --> 00:05:58,270
from our initial schema showed you'd

00:05:55,420 --> 00:06:00,220
have to do all these like all this path

00:05:58,270 --> 00:06:05,460
to you set the customer because the

00:06:00,220 --> 00:06:08,560
customer was only related to the spinner

00:06:05,460 --> 00:06:12,010
and I'm just guiding the average

00:06:08,560 --> 00:06:14,770
duration here so it can get a little

00:06:12,010 --> 00:06:17,770
easier a good idea in this situation

00:06:14,770 --> 00:06:22,000
might be just set a customer instance in

00:06:17,770 --> 00:06:24,550
every single database table and this

00:06:22,000 --> 00:06:29,200
will give you some some improvements

00:06:24,550 --> 00:06:34,210
such as it might be easier to do some

00:06:29,200 --> 00:06:36,550
sanity check so maybe and he also makes

00:06:34,210 --> 00:06:36,969
it simple to query so now that we saw

00:06:36,550 --> 00:06:40,929
that we

00:06:36,969 --> 00:06:43,809
we can filter for customer directly so

00:06:40,929 --> 00:06:46,749
as I told you this is the the situation

00:06:43,809 --> 00:06:50,289
you're gonna find in companies such as

00:06:46,749 --> 00:06:54,429
Salesforce and just for for example they

00:06:50,289 --> 00:06:59,199
do for each database they have 5,000

00:06:54,429 --> 00:07:01,959
clients so it scales quite well they

00:06:59,199 --> 00:07:04,419
don't have muffled database so like they

00:07:01,959 --> 00:07:10,869
do some some kind of rolling beyond that

00:07:04,419 --> 00:07:13,479
but it's kind of quite well so a good

00:07:10,869 --> 00:07:15,429
thing about them about being Salesforce

00:07:13,479 --> 00:07:17,860
that you are big and you have quite a

00:07:15,429 --> 00:07:21,489
few developers so you are going to run

00:07:17,860 --> 00:07:24,759
software to Shack stuff so the for every

00:07:21,489 --> 00:07:26,860
single query the one they do a checking

00:07:24,759 --> 00:07:28,779
out much checking to make sure there is

00:07:26,860 --> 00:07:31,599
no data leaking from one customer to

00:07:28,779 --> 00:07:33,819
another and this is transparent to

00:07:31,599 --> 00:07:35,559
developers so if you are so sports

00:07:33,819 --> 00:07:40,739
engineer you don't need to be worried

00:07:35,559 --> 00:07:43,899
about it the drawbacks from from this

00:07:40,739 --> 00:07:45,550
approach it's a little harder to

00:07:43,899 --> 00:07:49,779
guarantee a solution because you have to

00:07:45,550 --> 00:07:52,449
manually do the query you might might

00:07:49,779 --> 00:07:54,519
lead to a complex code base and you

00:07:52,449 --> 00:07:56,979
might have some trouble with the

00:07:54,519 --> 00:07:58,509
libraries so if you are integrative a

00:07:56,979 --> 00:08:01,479
library that doesn't give you access to

00:07:58,509 --> 00:08:05,819
the models you might not be able to add

00:08:01,479 --> 00:08:08,499
the customer to the to the table and I

00:08:05,819 --> 00:08:10,749
mean you're going to have a consistency

00:08:08,499 --> 00:08:13,929
in your the way you do query from your

00:08:10,749 --> 00:08:16,419
application the the second approach

00:08:13,929 --> 00:08:17,979
would be having multiple databases and

00:08:16,419 --> 00:08:20,499
that's like the complete opposite of

00:08:17,979 --> 00:08:23,529
what we just did we had a single error

00:08:20,499 --> 00:08:26,019
base with we managed manually the the

00:08:23,529 --> 00:08:27,489
schemas for Paris and now we are going

00:08:26,019 --> 00:08:30,399
to say all right we are not doing we are

00:08:27,489 --> 00:08:35,019
having one database for each customer so

00:08:30,399 --> 00:08:38,769
something like this and the way you do

00:08:35,019 --> 00:08:40,379
this in Jungle I think most of you know

00:08:38,769 --> 00:08:45,790
so you have the database configuration

00:08:40,379 --> 00:08:50,620
you can set the IBM database and you can

00:08:45,790 --> 00:08:53,440
just use the using query from

00:08:50,620 --> 00:08:59,440
using method from the acquire set and

00:08:53,440 --> 00:09:03,700
work from the manager but there is a

00:08:59,440 --> 00:09:06,220
better approach and I'm pretty sure I'm

00:09:03,700 --> 00:09:11,200
going to get some bad looks from the

00:09:06,220 --> 00:09:14,110
some of you by sharing this but maybe

00:09:11,200 --> 00:09:16,270
you can use threadlock oh and I'm not

00:09:14,110 --> 00:09:20,620
saying you should use I'm just saying

00:09:16,270 --> 00:09:23,650
you can use alright so it goes pretty

00:09:20,620 --> 00:09:26,290
much the same as before we we just get

00:09:23,650 --> 00:09:28,090
the subdomain we got a customer

00:09:26,290 --> 00:09:32,380
we set the customer in the request and

00:09:28,090 --> 00:09:35,260
then we used that decorator to as a cute

00:09:32,380 --> 00:09:39,400
a request through the passenger this

00:09:35,260 --> 00:09:43,540
trial local pebble which is using DB and

00:09:39,400 --> 00:09:48,120
you pass the customer name and you do a

00:09:43,540 --> 00:09:52,690
little bit of customer rosing you just

00:09:48,120 --> 00:09:54,700
so you you use the try logo again to get

00:09:52,690 --> 00:09:58,320
the instance of the amis you are you

00:09:54,700 --> 00:10:01,090
going to use or or wise default and

00:09:58,320 --> 00:10:03,790
that's it you don't need the use anymore

00:10:01,090 --> 00:10:08,740
so you're simply you can simplify a

00:10:03,790 --> 00:10:12,370
little bit so a question might ask about

00:10:08,740 --> 00:10:17,530
this is is this really multi-tenancy

00:10:12,370 --> 00:10:20,590
well it depends on how you see it if you

00:10:17,530 --> 00:10:23,050
are database engineer maybe you say no

00:10:20,590 --> 00:10:24,700
this is a multiple database but from the

00:10:23,050 --> 00:10:28,360
application point of view you are

00:10:24,700 --> 00:10:31,300
serving multiple clients through one

00:10:28,360 --> 00:10:35,260
instance of the software so it can be

00:10:31,300 --> 00:10:37,660
considered mid Tennessee the last

00:10:35,260 --> 00:10:39,690
approach I want to show is the single

00:10:37,660 --> 00:10:42,070
database the single other base with

00:10:39,690 --> 00:10:44,380
multiple schemas and that's the most

00:10:42,070 --> 00:10:48,970
interesting one because not many people

00:10:44,380 --> 00:10:51,700
know about it so the way it goes is you

00:10:48,970 --> 00:10:56,590
have a server and you have one database

00:10:51,700 --> 00:10:59,200
with multiple schemas but what I schema

00:10:56,590 --> 00:11:02,380
see in the first place and for now on

00:10:59,200 --> 00:11:04,540
every time I talk about schemas and kind

00:11:02,380 --> 00:11:08,800
of talking all about Postgres

00:11:04,540 --> 00:11:12,660
because well it supports it if you go to

00:11:08,800 --> 00:11:12,660
my sequel you want support for example

00:11:13,170 --> 00:11:21,670
alright so everyone of us we are always

00:11:18,580 --> 00:11:24,370
worried if you ever use police you have

00:11:21,670 --> 00:11:27,550
already used schemas because it but

00:11:24,370 --> 00:11:32,350
before we use the schema I think I

00:11:27,550 --> 00:11:36,220
passed yeah so actually so whenever you

00:11:32,350 --> 00:11:37,960
do select from ID name from user you are

00:11:36,220 --> 00:11:40,930
already using the default schema from

00:11:37,960 --> 00:11:43,150
prosecution the thing is you are able to

00:11:40,930 --> 00:11:46,480
create a new schema by using the create

00:11:43,150 --> 00:11:49,480
a schema comment and whenever you do

00:11:46,480 --> 00:11:52,000
this you you begin to to be able to

00:11:49,480 --> 00:11:54,310
query through that schema so we have the

00:11:52,000 --> 00:11:57,610
sidecut part before but now we're doing

00:11:54,310 --> 00:12:01,090
it through IBM so IBM the table is now

00:11:57,610 --> 00:12:06,550
called I mean user and we get the field

00:12:01,090 --> 00:12:09,600
name from IBM user dot name but there is

00:12:06,550 --> 00:12:12,460
a shortcut for this you can simplify it

00:12:09,600 --> 00:12:17,050
by setting the search by the search path

00:12:12,460 --> 00:12:20,860
and whenever you do such search path to

00:12:17,050 --> 00:12:23,740
IBM you the all the queries that go from

00:12:20,860 --> 00:12:27,370
this from from from now on in the same

00:12:23,740 --> 00:12:30,250
connection will be set to IBM dot

00:12:27,370 --> 00:12:31,240
whatever table you have there and this

00:12:30,250 --> 00:12:35,980
can help us a lot

00:12:31,240 --> 00:12:40,810
and that takes us to the library called

00:12:35,980 --> 00:12:44,080
Django teen and schemas it's it's people

00:12:40,810 --> 00:12:46,020
are it's really interesting it does a

00:12:44,080 --> 00:12:51,100
lot of stuff for you and can help a lot

00:12:46,020 --> 00:12:53,410
so we we are going back to the middle

00:12:51,100 --> 00:12:58,270
approach just like we did on all the

00:12:53,410 --> 00:12:59,800
examples before and so again this is

00:12:58,270 --> 00:13:01,810
from the source code of Django tyranny

00:12:59,800 --> 00:13:03,550
schemas and you see that's pretty much

00:13:01,810 --> 00:13:08,680
the same thing we've been doing so far

00:13:03,550 --> 00:13:12,430
so you you got a host name you get the

00:13:08,680 --> 00:13:15,730
model you get the client you set the

00:13:12,430 --> 00:13:17,320
request attendant to your client and the

00:13:15,730 --> 00:13:19,360
only thing that changed is

00:13:17,320 --> 00:13:21,010
a connection dots a tenant that that

00:13:19,360 --> 00:13:23,080
thing we didn't have before we're going

00:13:21,010 --> 00:13:25,810
to have now and I'm going to show you

00:13:23,080 --> 00:13:30,370
how it works so in your configuration

00:13:25,810 --> 00:13:33,130
you have the routing settings and you

00:13:30,370 --> 00:13:35,410
already set the determine middleware I

00:13:33,130 --> 00:13:37,150
show you and the other thing you are

00:13:35,410 --> 00:13:39,520
going to change is that you're going to

00:13:37,150 --> 00:13:43,530
set the database in giant to this custom

00:13:39,520 --> 00:13:49,780
one that comes from with channel schemas

00:13:43,530 --> 00:13:52,260
and what does underneath the hood is it

00:13:49,780 --> 00:13:56,950
will set the search path for you so

00:13:52,260 --> 00:14:01,330
automatically the - oh the the hard work

00:13:56,950 --> 00:14:04,870
for you so you don't have to worry and

00:14:01,330 --> 00:14:07,060
you see the drawing up there so it's

00:14:04,870 --> 00:14:10,080
going to put the if you're acquiring

00:14:07,060 --> 00:14:14,290
through IBM it's going to put IBM and

00:14:10,080 --> 00:14:17,890
coma Defoe so it would try first IBM if

00:14:14,290 --> 00:14:19,690
the table isn't the IBM schema then we

00:14:17,890 --> 00:14:22,450
will turn eyes from the IBM schema

00:14:19,690 --> 00:14:25,690
otherwise you just return whatever if

00:14:22,450 --> 00:14:29,110
the table will be underneath full on

00:14:25,690 --> 00:14:32,830
default schema and it's pretty cool it

00:14:29,110 --> 00:14:37,330
comes with a few comments it hours the

00:14:32,830 --> 00:14:39,880
it changed the create a user comment so

00:14:37,330 --> 00:14:41,880
you you able to pass a tenant so you can

00:14:39,880 --> 00:14:46,060
to create super user

00:14:41,880 --> 00:14:49,720
men- tenants if you like this and you

00:14:46,060 --> 00:14:52,540
pass on the tenant you're looking for it

00:14:49,720 --> 00:14:56,920
has this channel comment so you can run

00:14:52,540 --> 00:15:00,820
any other comment you already have alone

00:14:56,920 --> 00:15:07,420
on jungle automatically so what I do is

00:15:00,820 --> 00:15:09,010
we run one time for each schema and also

00:15:07,420 --> 00:15:13,300
they migrate schema so you you are able

00:15:09,010 --> 00:15:18,010
to actually migrate all the schemas at

00:15:13,300 --> 00:15:20,020
once so the query gets a lot a lot

00:15:18,010 --> 00:15:23,500
easier so when you are in your views

00:15:20,020 --> 00:15:28,090
well what happens is you just query as

00:15:23,500 --> 00:15:32,240
if it was a normal view so for for

00:15:28,090 --> 00:15:35,899
instance here we are annotating

00:15:32,240 --> 00:15:40,190
the average the regeneration for each

00:15:35,899 --> 00:15:42,949
type of off-spinner and it's going to be

00:15:40,190 --> 00:15:46,579
doing this only in the IBM schema or

00:15:42,949 --> 00:15:51,740
whatever the schema you have so it's

00:15:46,579 --> 00:15:55,430
transparent lamp to worry about this one

00:15:51,740 --> 00:15:59,480
thing we might want to do is you might

00:15:55,430 --> 00:16:01,399
want to query across schemas and that

00:15:59,480 --> 00:16:06,680
might that's a thing that actually gets

00:16:01,399 --> 00:16:08,899
a little harder so you won't be able to

00:16:06,680 --> 00:16:11,720
I mean if you can do it for Django but

00:16:08,899 --> 00:16:14,480
it's going to be a little harder you can

00:16:11,720 --> 00:16:17,300
you can do it straight for SQL using a

00:16:14,480 --> 00:16:23,089
union but then we have a problem here

00:16:17,300 --> 00:16:25,399
the thing is we are making Union from

00:16:23,089 --> 00:16:28,029
chewed this separate schemas they are

00:16:25,399 --> 00:16:33,040
controlling their own IDs on their own

00:16:28,029 --> 00:16:35,990
so you might get some clashes alright so

00:16:33,040 --> 00:16:39,440
you can do something about this and one

00:16:35,990 --> 00:16:42,470
thing you can do is instead of having an

00:16:39,440 --> 00:16:45,110
ID you can set a UID and then you should

00:16:42,470 --> 00:16:48,339
be safe you can then make queries on top

00:16:45,110 --> 00:16:53,630
of this and it should work

00:16:48,339 --> 00:16:55,130
so some upsides your what your cards

00:16:53,630 --> 00:17:00,170
will be looking just like a normal

00:16:55,130 --> 00:17:01,579
jungle query you don't have to worry new

00:17:00,170 --> 00:17:05,419
scheme us get create automatically

00:17:01,579 --> 00:17:08,660
whenever you create a customer uses in

00:17:05,419 --> 00:17:11,059
your application you already create the

00:17:08,660 --> 00:17:14,630
schema the new schema and run the

00:17:11,059 --> 00:17:16,760
migrations in those automated migration

00:17:14,630 --> 00:17:19,640
so if you're using gelatin and the

00:17:16,760 --> 00:17:22,339
schemas you already do all the migration

00:17:19,640 --> 00:17:27,669
so you and you get a simple

00:17:22,339 --> 00:17:30,500
infrastructure so you I mean you can get

00:17:27,669 --> 00:17:34,549
many clients in a single server in a

00:17:30,500 --> 00:17:38,390
single database some drug drawbacks with

00:17:34,549 --> 00:17:41,690
that that I mean I never reached a point

00:17:38,390 --> 00:17:45,100
but you might want to be careful with

00:17:41,690 --> 00:17:47,679
too many schemas I've read a little

00:17:45,100 --> 00:17:50,559
about it and it looks like you shouldn't

00:17:47,679 --> 00:17:54,730
be doing more than few thousand clients

00:17:50,559 --> 00:17:57,400
in single base your test might get some

00:17:54,730 --> 00:18:01,270
my girl is lower because of all the

00:17:57,400 --> 00:18:03,490
migrations and stuff and it's going to

00:18:01,270 --> 00:18:07,270
be hard to consolidate any data

00:18:03,490 --> 00:18:09,160
aggregate stuff because of that they are

00:18:07,270 --> 00:18:15,010
in separate schemas and you need to do

00:18:09,160 --> 00:18:21,640
the Union but the thing I want to tell

00:18:15,010 --> 00:18:23,740
you is so multi-tenancy is white I show

00:18:21,640 --> 00:18:26,679
two approaches but I'm not saying that

00:18:23,740 --> 00:18:28,720
all you can do melissamia see is a

00:18:26,679 --> 00:18:32,559
continuous spectrum you can combine

00:18:28,720 --> 00:18:34,780
those approaches you can go if only one

00:18:32,559 --> 00:18:40,000
of them you can I mean there is many

00:18:34,780 --> 00:18:42,669
ways to do it so I hope you can use that

00:18:40,000 --> 00:18:45,809
what we learned today to decide what's

00:18:42,669 --> 00:18:45,809
better for your application

00:18:46,630 --> 00:18:54,220
I have these presentations that bitly

00:18:51,010 --> 00:18:58,090
dilash general Tennessee and I also have

00:18:54,220 --> 00:19:00,850
a example general application that might

00:18:58,090 --> 00:19:04,480
get help where you can see applying now

00:19:00,850 --> 00:19:06,100
the first two examples the other one you

00:19:04,480 --> 00:19:09,789
just just go straight to general

00:19:06,100 --> 00:19:13,330
tentatively schemas and I finish a lot

00:19:09,789 --> 00:19:17,370
earlier then I was impaired for so I

00:19:13,330 --> 00:19:17,370
might be able to answer questions about

00:19:18,100 --> 00:19:29,080
[Applause]

00:19:26,610 --> 00:19:31,510
yes so we haven't used later if you want

00:19:29,080 --> 00:19:34,510
to sign up for that I also have my

00:19:31,510 --> 00:19:40,150
contacts there my github Twitter and

00:19:34,510 --> 00:19:43,740
email feel free to find me alright so if

00:19:40,150 --> 00:19:43,740
you want to ask questions come line up

00:19:45,240 --> 00:19:49,929
one of the multi-tenancy

00:19:47,320 --> 00:19:52,990
options who provide those services was

00:19:49,929 --> 00:19:54,790
having this customer ID in every pretty

00:19:52,990 --> 00:19:56,429
much every table how does that play

00:19:54,790 --> 00:19:59,440
together with doing the site's framework

00:19:56,429 --> 00:20:01,659
django congress sites framework general

00:19:59,440 --> 00:20:04,240
contractor sites is that what you're

00:20:01,659 --> 00:20:07,690
looking for there or good question I'm

00:20:04,240 --> 00:20:14,590
not sure how to answer this yeah much

00:20:07,690 --> 00:20:16,540
sorry it's there are any tools if you

00:20:14,590 --> 00:20:18,490
want to move to this system with the

00:20:16,540 --> 00:20:20,309
scheme us to go from like a single

00:20:18,490 --> 00:20:23,650
schema system to there

00:20:20,309 --> 00:20:26,530
no it's probably have to do it manually

00:20:23,650 --> 00:20:33,730
so there is no mostly new projects yeah

00:20:26,530 --> 00:20:35,470
yeah you've been talking about the

00:20:33,730 --> 00:20:38,020
technical aspects which are obviously an

00:20:35,470 --> 00:20:40,000
important part of it how do you convince

00:20:38,020 --> 00:20:43,750
your customers that the data is safe

00:20:40,000 --> 00:20:45,400
because is it is it a case of you just

00:20:43,750 --> 00:20:47,049
don't tell them that this ability to the

00:20:45,400 --> 00:20:48,400
database or what do you order you

00:20:47,049 --> 00:20:50,140
actually is there any way you can't

00:20:48,400 --> 00:20:52,090
convince them that no you're not gonna

00:20:50,140 --> 00:20:53,080
get to see your competitors data or your

00:20:52,090 --> 00:20:57,250
competitors not gonna be able to see

00:20:53,080 --> 00:20:59,500
your data well I think if your client is

00:20:57,250 --> 00:21:02,409
technical enough then like if you

00:20:59,500 --> 00:21:04,720
explain how you know the Muto's

00:21:02,409 --> 00:21:06,520
chemistry works then I guess it

00:21:04,720 --> 00:21:09,610
shouldn't be a problem I'm not really

00:21:06,520 --> 00:21:13,090
sure how to answer this but I'd say that

00:21:09,610 --> 00:21:14,649
you either you rely on your client bent

00:21:13,090 --> 00:21:19,450
n Co enough to understand how it works

00:21:14,649 --> 00:21:21,970
or you just say trust me it's safe which

00:21:19,450 --> 00:21:23,590
is pretty much why every time you do so

00:21:21,970 --> 00:21:26,490
regardless the approach where you're

00:21:23,590 --> 00:21:26,490
you're doing

00:21:48,800 --> 00:21:54,540
you mentioned that Salesforce implements

00:21:51,780 --> 00:21:57,930
some technique to safeguard at a low

00:21:54,540 --> 00:22:00,420
level the security yeah what are some

00:21:57,930 --> 00:22:02,970
implementation techniques well how do

00:22:00,420 --> 00:22:05,370
they do that I don't have to I mean I've

00:22:02,970 --> 00:22:07,680
read about it but I don't have the exact

00:22:05,370 --> 00:22:09,780
details how they do it I know it's

00:22:07,680 --> 00:22:11,640
completely transparent from from what I

00:22:09,780 --> 00:22:13,830
read again I don't have the access to

00:22:11,640 --> 00:22:18,990
the real thing I'm just telling what I

00:22:13,830 --> 00:22:21,060
read through the internet and the

00:22:18,990 --> 00:22:24,660
article said it was that and this one

00:22:21,060 --> 00:22:28,350
was actually article was a short sales

00:22:24,660 --> 00:22:31,680
presentation on YouTube and they

00:22:28,350 --> 00:22:34,020
explained it so it's some kind of

00:22:31,680 --> 00:22:37,140
mechanisms they pass through the query

00:22:34,020 --> 00:22:39,720
and they check if the customer ID is the

00:22:37,140 --> 00:22:42,110
the one they are looking for but it's

00:22:39,720 --> 00:22:44,520
transparent to the developer doing it

00:22:42,110 --> 00:22:50,640
have you implemented anything like that

00:22:44,520 --> 00:22:52,260
no I haven't questioned but how does

00:22:50,640 --> 00:22:55,860
this contrast with just having multiple

00:22:52,260 --> 00:22:59,670
databases on the same machine what is

00:22:55,860 --> 00:23:05,730
the benefit of schemas yes so for

00:22:59,670 --> 00:23:08,070
instance one thing is you don't I mean

00:23:05,730 --> 00:23:10,080
you don't have to read extension a new

00:23:08,070 --> 00:23:12,930
database you can just like create the

00:23:10,080 --> 00:23:16,620
schema from the SQL but that's not like

00:23:12,930 --> 00:23:20,390
a real good reason the other good reason

00:23:16,620 --> 00:23:23,970
would be from a point of view of

00:23:20,390 --> 00:23:26,280
maintenance it's a lot easier to do only

00:23:23,970 --> 00:23:31,650
with one instance of the thing than to

00:23:26,280 --> 00:23:33,660
have mobile stuff so the way the the

00:23:31,650 --> 00:23:35,880
reason why I use it is mostly about this

00:23:33,660 --> 00:23:39,210
so I don't want to be carrying about

00:23:35,880 --> 00:23:41,880
having multiple instances mobile nodes

00:23:39,210 --> 00:23:45,060
that might get complex as I scale the

00:23:41,880 --> 00:23:47,900
software so that's pretty much

00:23:45,060 --> 00:23:47,900
Thanks

00:23:49,020 --> 00:23:55,260
you said that you said that the you said

00:23:53,010 --> 00:23:57,630
that the library handles the migrations

00:23:55,260 --> 00:23:59,910
and stuff for you from a database

00:23:57,630 --> 00:24:02,340
perspective though if I have a hundred

00:23:59,910 --> 00:24:07,110
schemas am i running a hundred migration

00:24:02,340 --> 00:24:10,920
yes so it's a complete yeah and this is

00:24:07,110 --> 00:24:14,280
actually a point it might get dangerous

00:24:10,920 --> 00:24:17,100
because like if you mess up with one

00:24:14,280 --> 00:24:20,540
migration you might mess up with a lot

00:24:17,100 --> 00:24:24,380
of people so you have to be careful I

00:24:20,540 --> 00:24:26,930
station ambient might be a good idea

00:24:24,380 --> 00:24:32,490
yeah

00:24:26,930 --> 00:24:39,220
any other questions all right thank you

00:24:32,490 --> 00:24:45,620
[Applause]

00:24:39,220 --> 00:24:55,090
you get to get your special mug one more

00:24:45,620 --> 00:24:55,090

YouTube URL: https://www.youtube.com/watch?v=yyJonajA_jI


