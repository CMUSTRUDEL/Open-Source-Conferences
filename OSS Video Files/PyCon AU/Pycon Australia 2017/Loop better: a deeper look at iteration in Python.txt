Title: Loop better: a deeper look at iteration in Python
Publication date: 2017-08-04
Playlist: Pycon Australia 2017
Description: 
	Trey Hunner

http://2017.pycon-au.org/schedule/presentation/55/

#pyconau

This talk was given at PyCon Australia 2017 which was held from 3-8 August, 2017 in Melbourne, Victoria.

PyCon Australia is the national conference for users of the Python Programming Language. In August 2017, we're returning to Melbourne, bringing together students, enthusiasts, and professionals with a love of Python from around Australia, and from all over the World. 

August 3-8 2017, Melbourne, Victoria

Python, PyCon, PyConAU
Captions: 
	00:00:00,140 --> 00:00:03,480
alright ladies and gentlemen let's get

00:00:02,010 --> 00:00:05,549
the next session underway

00:00:03,480 --> 00:00:08,189
our first speaker of this session is

00:00:05,549 --> 00:00:09,780
Trey Hanna Trey is a Python Django

00:00:08,189 --> 00:00:10,980
teacher trainer and mentor he's a

00:00:09,780 --> 00:00:12,719
director of the Python Software

00:00:10,980 --> 00:00:14,400
Foundation a member of the Django

00:00:12,719 --> 00:00:16,020
Software Foundation and is heavily

00:00:14,400 --> 00:00:18,630
involved with his local Python meetup

00:00:16,020 --> 00:00:20,039
group in San Diego tray holds corporate

00:00:18,630 --> 00:00:22,230
training sessions on Python and Django

00:00:20,039 --> 00:00:23,550
by day hosts live online teaching

00:00:22,230 --> 00:00:25,500
sessions for Python learners during

00:00:23,550 --> 00:00:28,410
nights and weekends by night I'm

00:00:25,500 --> 00:00:29,699
guessing and is otherwise just an

00:00:28,410 --> 00:00:38,730
all-around nice guy so everyone please

00:00:29,699 --> 00:00:40,350
welcome Trey hunt so I'd like to go on a

00:00:38,730 --> 00:00:43,260
journey with you all through the land of

00:00:40,350 --> 00:00:45,809
intervals and iterators this is pretty

00:00:43,260 --> 00:00:47,760
much everything Russell just said so my

00:00:45,809 --> 00:00:48,780
name is Trey I help django teams turn

00:00:47,760 --> 00:00:50,850
their front-end developers into

00:00:48,780 --> 00:00:52,920
full-stack django developers i also host

00:00:50,850 --> 00:00:55,559
a live webcast every week on python

00:00:52,920 --> 00:00:57,870
related topics unfortunately I do

00:00:55,559 --> 00:00:59,640
usually host it at what I think is

00:00:57,870 --> 00:01:01,890
typically three in the morning Australia

00:00:59,640 --> 00:01:05,430
Eastern Standard Time so you can watch

00:01:01,890 --> 00:01:07,049
the recordings online I'm also one of

00:01:05,430 --> 00:01:08,970
the co-organizers in my local Python

00:01:07,049 --> 00:01:10,680
study group I've helped organise for

00:01:08,970 --> 00:01:13,140
Jengo girls workshops in Southern

00:01:10,680 --> 00:01:14,520
California and I'm one of the 13

00:01:13,140 --> 00:01:17,310
directors the Python Software Foundation

00:01:14,520 --> 00:01:18,720
currently all right so that's a bit

00:01:17,310 --> 00:01:21,659
about me

00:01:18,720 --> 00:01:25,860
let's talk about looping specifically

00:01:21,659 --> 00:01:29,640
looping problems so every interesting

00:01:25,860 --> 00:01:31,259
journey starts with a problem so we're

00:01:29,640 --> 00:01:32,820
gonna look at some confusing things to

00:01:31,259 --> 00:01:34,680
kind of piqued our curiosity to

00:01:32,820 --> 00:01:36,210
hopefully motivate us to learn some

00:01:34,680 --> 00:01:41,090
things about how looping works under the

00:01:36,210 --> 00:01:44,970
hood in Python so numbers here is a list

00:01:41,090 --> 00:01:47,729
squares is a generator this generator

00:01:44,970 --> 00:01:53,009
will give us squares of each of the

00:01:47,729 --> 00:01:55,680
numbers in this list generators are lazy

00:01:53,009 --> 00:01:57,960
we can't do much with squares except for

00:01:55,680 --> 00:02:00,869
loop over it we could pass it to the

00:01:57,960 --> 00:02:03,540
tuple constructor here to make a tuple

00:02:00,869 --> 00:02:05,549
out of it we could also pass it to the

00:02:03,540 --> 00:02:09,179
sum function to add up all of the

00:02:05,549 --> 00:02:10,649
squares of these numbers now you might

00:02:09,179 --> 00:02:13,910
expect that we get a large number here

00:02:10,649 --> 00:02:13,910
we get 0 instead

00:02:14,450 --> 00:02:20,370
this that generator that generator was

00:02:18,720 --> 00:02:21,450
empty by the time we looped over to

00:02:20,370 --> 00:02:23,760
second time there so we're gonna talk

00:02:21,450 --> 00:02:25,410
about what's going on there we're also

00:02:23,760 --> 00:02:27,600
going to talk about what's going on here

00:02:25,410 --> 00:02:32,520
so this when we asked nine and squares

00:02:27,600 --> 00:02:34,710
what are we going to get true when we

00:02:32,520 --> 00:02:37,020
ask nine squares again Python decides at

00:02:34,710 --> 00:02:38,610
this point it's false nine is not in

00:02:37,020 --> 00:02:40,320
squares we asked the same question two

00:02:38,610 --> 00:02:42,210
times of this object we get a different

00:02:40,320 --> 00:02:46,590
answer we'll talk about what's going on

00:02:42,210 --> 00:02:49,440
here as well this dictionary has two key

00:02:46,590 --> 00:02:52,290
value pairs if we try to unpack this

00:02:49,440 --> 00:02:54,920
dictionary you might expect that we get

00:02:52,290 --> 00:02:57,480
an error or you might expect that we get

00:02:54,920 --> 00:02:59,400
maybe key value pairs tuples of key

00:02:57,480 --> 00:03:00,600
value pairs or maybe keys and values if

00:02:59,400 --> 00:03:01,590
you're new to Python there's a lot of

00:03:00,600 --> 00:03:06,150
different answers you could possibly

00:03:01,590 --> 00:03:07,860
come up with here this doesn't work we

00:03:06,150 --> 00:03:10,920
do not get an error you can unpack

00:03:07,860 --> 00:03:14,490
dictionaries if you were expecting to

00:03:10,920 --> 00:03:16,290
get key value pairs maybe tuples you

00:03:14,490 --> 00:03:19,920
would be wrong we don't get key value

00:03:16,290 --> 00:03:22,290
pairs of tuples we get keys when you

00:03:19,920 --> 00:03:24,000
unpack a dictionary you get keys this is

00:03:22,290 --> 00:03:26,340
a strange thing to do but it does work

00:03:24,000 --> 00:03:28,350
we're gonna see what is going on here as

00:03:26,340 --> 00:03:30,180
well so by the end of this talk we're

00:03:28,350 --> 00:03:31,650
gonna recap these three things here and

00:03:30,180 --> 00:03:36,600
we'll hopefully already have answers to

00:03:31,650 --> 00:03:38,520
these because of what we've learned all

00:03:36,600 --> 00:03:39,630
right so before we dive in let's review

00:03:38,520 --> 00:03:41,370
a few things to make sure we're all on

00:03:39,630 --> 00:03:44,130
the same page we're gonna review loops

00:03:41,370 --> 00:03:45,900
intervals and sequences to make sure

00:03:44,130 --> 00:03:49,830
that we all understand how they work in

00:03:45,900 --> 00:03:52,170
Python this is not Python this is

00:03:49,830 --> 00:03:54,900
JavaScript this is a traditional C style

00:03:52,170 --> 00:03:56,880
for loop written in JavaScript in this

00:03:54,900 --> 00:03:58,680
for loop we set I to 0 we check whether

00:03:56,880 --> 00:04:00,870
I is less than the length of an array

00:03:58,680 --> 00:04:04,020
which is basically like a list in Python

00:04:00,870 --> 00:04:07,350
and we increment I by 1 each time as we

00:04:04,020 --> 00:04:09,090
loop once this condition is no longer

00:04:07,350 --> 00:04:10,590
true we'll stop looping so we end up

00:04:09,090 --> 00:04:15,390
printing out all of the numbers in this

00:04:10,590 --> 00:04:17,750
array this is a for loop Python does not

00:04:15,390 --> 00:04:20,459
have for loops

00:04:17,750 --> 00:04:22,530
Python does not have traditional C style

00:04:20,459 --> 00:04:24,800
for loops at least like we see here what

00:04:22,530 --> 00:04:26,100
we do have in Python is a for in loop

00:04:24,800 --> 00:04:27,900
our

00:04:26,100 --> 00:04:29,370
for in loop is the same as what many

00:04:27,900 --> 00:04:30,690
programming languages call a foreach

00:04:29,370 --> 00:04:33,450
loop if you look up for each on

00:04:30,690 --> 00:04:35,070
Wikipedia you'll find this loop we tend

00:04:33,450 --> 00:04:36,510
to call our for in loops just for loops

00:04:35,070 --> 00:04:38,610
because they are the closest thing that

00:04:36,510 --> 00:04:40,440
we have to traditional C style for loops

00:04:38,610 --> 00:04:42,840
they are not the same though they're

00:04:40,440 --> 00:04:44,610
very different so I'll be calling these

00:04:42,840 --> 00:04:46,050
for loops during this talk because for

00:04:44,610 --> 00:04:50,730
in loop is something no one ever says in

00:04:46,050 --> 00:04:52,410
the Python world so in this for loop

00:04:50,730 --> 00:04:56,250
we're doing the same thing as before

00:04:52,410 --> 00:04:57,570
we're looping over these items notice we

00:04:56,250 --> 00:04:59,070
don't have an index variable

00:04:57,570 --> 00:05:01,560
we're not incrementing anything we don't

00:04:59,070 --> 00:05:03,330
have any indexing at all Python does all

00:05:01,560 --> 00:05:05,040
of the work of looping force whereas

00:05:03,330 --> 00:05:08,760
before we were manually looping using an

00:05:05,040 --> 00:05:10,950
index so Python doesn't have traditional

00:05:08,760 --> 00:05:12,300
C style for loops we do have something

00:05:10,950 --> 00:05:15,600
we call a for loop it is different

00:05:12,300 --> 00:05:17,460
though alright if you can loop over

00:05:15,600 --> 00:05:20,010
something with one of these for loops in

00:05:17,460 --> 00:05:21,660
Python it is an iterable and if

00:05:20,010 --> 00:05:23,520
something is an iterable you can loop

00:05:21,660 --> 00:05:24,780
over it with a for loop in python so if

00:05:23,520 --> 00:05:25,950
you're unsure what that word iterable

00:05:24,780 --> 00:05:27,330
means if you've heard it before you're

00:05:25,950 --> 00:05:29,760
not sure of the definition that's what

00:05:27,330 --> 00:05:32,730
it means it means anything that you can

00:05:29,760 --> 00:05:34,290
iterate over that is an interval edibles

00:05:32,730 --> 00:05:37,920
can be looped over and anything that can

00:05:34,290 --> 00:05:39,420
be looped over is an interval sequences

00:05:37,920 --> 00:05:41,940
are a very common type of interval in

00:05:39,420 --> 00:05:44,150
Python lists are sequences tuples or

00:05:41,940 --> 00:05:46,260
sequences and strings or sequences

00:05:44,150 --> 00:05:48,930
sequences are intervals which can be

00:05:46,260 --> 00:05:51,110
indexed starting from 0 and ending at

00:05:48,930 --> 00:05:54,120
one less than the length of the sequence

00:05:51,110 --> 00:05:55,590
lists tuples and strings and all of the

00:05:54,120 --> 00:05:57,210
types of sequences can be indexed in

00:05:55,590 --> 00:05:58,680
this way they have other features they

00:05:57,210 --> 00:06:01,440
have lengths and slicing but I'm not

00:05:58,680 --> 00:06:03,360
going to talk about those things I want

00:06:01,440 --> 00:06:05,400
you to know that while lots of things in

00:06:03,360 --> 00:06:07,680
Python are intervals and lots of things

00:06:05,400 --> 00:06:11,100
are sequences many things in Python are

00:06:07,680 --> 00:06:13,230
iterables but not sequences sets are

00:06:11,100 --> 00:06:16,440
iterables dictionaries are intervals

00:06:13,230 --> 00:06:18,600
files are intervals and generators are

00:06:16,440 --> 00:06:20,250
intervals we even have infinitely long

00:06:18,600 --> 00:06:21,930
intervals so count in the itertools

00:06:20,250 --> 00:06:24,030
module this is an infinitely long

00:06:21,930 --> 00:06:26,700
interval none of these things here are

00:06:24,030 --> 00:06:30,180
sequences they are all iterables though

00:06:26,700 --> 00:06:32,490
we can loop over them alright so this is

00:06:30,180 --> 00:06:34,320
what we know we know that Python doesn't

00:06:32,490 --> 00:06:35,700
have traditional for loops we do have

00:06:34,320 --> 00:06:37,500
something that we call a for loop and

00:06:35,700 --> 00:06:40,020
anything that you can loop over with a

00:06:37,500 --> 00:06:41,490
for loop is an interval sequences are

00:06:40,020 --> 00:06:43,410
one type of iterable but we have many

00:06:41,490 --> 00:06:45,110
other types of intervals in Python so

00:06:43,410 --> 00:06:47,280
we're done with review at this point

00:06:45,110 --> 00:06:49,740
let's talk about how for loops work in

00:06:47,280 --> 00:06:51,479
python specifically let's talk about how

00:06:49,740 --> 00:06:54,960
we could loop over an interval without

00:06:51,479 --> 00:06:57,629
using a for loop I'm gonna pause at this

00:06:54,960 --> 00:07:00,479
point who who's using Python 2 primarily

00:06:57,629 --> 00:07:03,509
in your code alright who's using Python

00:07:00,479 --> 00:07:04,710
3 primarily in your code Wow okay that

00:07:03,509 --> 00:07:07,020
is different than it would have been a

00:07:04,710 --> 00:07:08,789
few years ago for those of you using

00:07:07,020 --> 00:07:11,849
Python 2 there are a couple slides in

00:07:08,789 --> 00:07:16,770
this presentation that our Python 3

00:07:11,849 --> 00:07:19,849
specifics so good luck finding those the

00:07:16,770 --> 00:07:21,840
next one is not one of those slides so

00:07:19,849 --> 00:07:23,340
we're gonna talk about how loops work

00:07:21,840 --> 00:07:25,349
and we're going to try to re-implement a

00:07:23,340 --> 00:07:27,750
loop without using or re-implement a for

00:07:25,349 --> 00:07:31,020
loop without using a for loop this is

00:07:27,750 --> 00:07:34,610
possible but we can't use indexes for it

00:07:31,020 --> 00:07:36,599
so if we try to set I equal to 0 and

00:07:34,610 --> 00:07:39,690
there's a bug in this code I'm supposed

00:07:36,599 --> 00:07:41,490
to have an I plus equals 1 here imagine

00:07:39,690 --> 00:07:46,259
there's an i plus equals 1 at the end of

00:07:41,490 --> 00:07:47,639
this slide this works for lists this

00:07:46,259 --> 00:07:50,819
would work for a list if there was an i

00:07:47,639 --> 00:07:52,770
plus equals 1 this does not work for any

00:07:50,819 --> 00:07:55,050
other type of interval outside of

00:07:52,770 --> 00:07:57,539
sequences sequences are the only thing

00:07:55,050 --> 00:07:59,520
this works for lists included sets which

00:07:57,539 --> 00:08:01,680
remember are not sequences this doesn't

00:07:59,520 --> 00:08:05,159
work for if we try the same thing we get

00:08:01,680 --> 00:08:06,539
an error sets cannot be indexed so at

00:08:05,159 --> 00:08:08,430
this point we could try converting this

00:08:06,539 --> 00:08:10,949
set to a list looping over it that way

00:08:08,430 --> 00:08:12,240
that would be cheating first of all also

00:08:10,949 --> 00:08:13,919
that doesn't work for an infinitely long

00:08:12,240 --> 00:08:15,389
intervals if you convert an infinitely

00:08:13,919 --> 00:08:18,900
long interval to a list you will fill up

00:08:15,389 --> 00:08:20,550
your ram and you'll be unhappy so for

00:08:18,900 --> 00:08:22,130
loops in Python are not powered by

00:08:20,550 --> 00:08:27,569
indexes they are powered by

00:08:22,130 --> 00:08:29,130
iterators iterators are the secret to

00:08:27,569 --> 00:08:30,810
looping in python every interval in

00:08:29,130 --> 00:08:32,880
python can give you an iterator and you

00:08:30,810 --> 00:08:36,839
can use that iterator to loop over your

00:08:32,880 --> 00:08:39,839
interval we have three intervals here

00:08:36,839 --> 00:08:42,839
again a list of tuple in a string we can

00:08:39,839 --> 00:08:45,570
ask each of these for an iterator using

00:08:42,839 --> 00:08:47,160
pythons built-in inner function passing

00:08:45,570 --> 00:08:48,839
an iterable to the inner function will

00:08:47,160 --> 00:08:51,899
always give us back an iterator no

00:08:48,839 --> 00:08:53,940
matter what type of iterable it is lists

00:08:51,899 --> 00:08:55,680
strings and tuples are all able

00:08:53,940 --> 00:08:57,870
and every interval will provide us with

00:08:55,680 --> 00:09:01,140
an iterator if we use the built-in eater

00:08:57,870 --> 00:09:02,370
function in Python okay so we can get

00:09:01,140 --> 00:09:05,460
iterators what's the point of these

00:09:02,370 --> 00:09:07,650
though once we have an iterator from an

00:09:05,460 --> 00:09:09,600
interval the only thing with it we can

00:09:07,650 --> 00:09:10,950
do with it is get the next item from it

00:09:09,600 --> 00:09:14,190
that is the one thing that we can do

00:09:10,950 --> 00:09:16,080
with an iterator we can use pythons

00:09:14,190 --> 00:09:19,470
built in next function to get the next

00:09:16,080 --> 00:09:21,630
item from any iterator and if you ask

00:09:19,470 --> 00:09:23,760
for the next item and there are no more

00:09:21,630 --> 00:09:26,460
next items you'll get a stop iteration

00:09:23,760 --> 00:09:33,600
exception this is the only thing you can

00:09:26,460 --> 00:09:35,850
do with iterators in Python so you can

00:09:33,600 --> 00:09:37,980
think of iterators as kind of like one

00:09:35,850 --> 00:09:40,680
directional tally counters with a broken

00:09:37,980 --> 00:09:42,060
reset button they keep track of where

00:09:40,680 --> 00:09:44,070
you are when you ask them for their next

00:09:42,060 --> 00:09:47,790
item but they can only go in one

00:09:44,070 --> 00:09:49,020
direction and they cannot be reset once

00:09:47,790 --> 00:09:50,400
you're done with the tally counter you

00:09:49,020 --> 00:09:51,960
have to throw it out so iterators are

00:09:50,400 --> 00:09:54,960
one directional tally counters without a

00:09:51,960 --> 00:09:57,510
reset button if you would like you could

00:09:54,960 --> 00:10:00,510
also think of iterate errs as like Hello

00:09:57,510 --> 00:10:02,400
Kitty Pez dispensers except that they

00:10:00,510 --> 00:10:04,200
cannot be reloaded so iterators are like

00:10:02,400 --> 00:10:06,090
Hello Kitty Pez dispensers except that

00:10:04,200 --> 00:10:07,470
once that they're empty all of the Pez

00:10:06,090 --> 00:10:08,370
are gone you have to throw them out you

00:10:07,470 --> 00:10:13,220
have to discard them

00:10:08,370 --> 00:10:13,220
you cannot reload or loop back iterators

00:10:14,180 --> 00:10:19,920
all right so now that we know what

00:10:16,410 --> 00:10:21,360
iterators are let's take a loop or let's

00:10:19,920 --> 00:10:24,300
take a loop let's take a look at this

00:10:21,360 --> 00:10:26,820
loop this for loop and turn it into a

00:10:24,300 --> 00:10:28,230
while loop so we have a for loop here

00:10:26,820 --> 00:10:31,250
this is how we normally loop in Python

00:10:28,230 --> 00:10:34,430
we can manually implement this ourselves

00:10:31,250 --> 00:10:36,570
so memorize this for loop for a moment

00:10:34,430 --> 00:10:38,280
we've got a function we've got an

00:10:36,570 --> 00:10:40,530
interval coming in an action we're doing

00:10:38,280 --> 00:10:41,640
every time as we loop this same thing

00:10:40,530 --> 00:10:45,360
this codes going to get a bit a little

00:10:41,640 --> 00:10:47,040
bit bigger is this in order to manually

00:10:45,360 --> 00:10:49,350
loop over an a table we need to get an

00:10:47,040 --> 00:10:53,550
iterator from it and then repeatedly

00:10:49,350 --> 00:10:55,320
loop and get the next item each time

00:10:53,550 --> 00:10:59,250
that we loop or asking that iterator for

00:10:55,320 --> 00:11:00,960
the next item as we loop and then once

00:10:59,250 --> 00:11:02,430
we have that item we can do whatever the

00:11:00,960 --> 00:11:04,350
body of our loop was in this case it was

00:11:02,430 --> 00:11:06,600
just one line of code while we're

00:11:04,350 --> 00:11:07,800
getting that next item if we get a stop

00:11:06,600 --> 00:11:09,749
iteration exception

00:11:07,800 --> 00:11:15,269
we know that we're done looping at that

00:11:09,749 --> 00:11:16,860
point we've just reinvented a four loop

00:11:15,269 --> 00:11:18,540
by using a while loop and what we've

00:11:16,860 --> 00:11:19,980
learned about iterators here this is how

00:11:18,540 --> 00:11:26,819
all looping works under the hood in

00:11:19,980 --> 00:11:28,610
Python all of it so these these facts

00:11:26,819 --> 00:11:32,309
that we've just learned about iterators

00:11:28,610 --> 00:11:37,079
this is part of a fancy sounding thing

00:11:32,309 --> 00:11:38,759
called the iterator protocol this is the

00:11:37,079 --> 00:11:41,220
thing that powers all iteration in

00:11:38,759 --> 00:11:42,929
Python so iterators power all iteration

00:11:41,220 --> 00:11:44,879
it's called the iterator protocol for

00:11:42,929 --> 00:11:47,129
loops rely on iterators in the iterator

00:11:44,879 --> 00:11:48,720
protocol tuple unpacking does this under

00:11:47,129 --> 00:11:52,110
the hood as well works the same way as a

00:11:48,720 --> 00:11:55,170
for loop star expressions also rely on

00:11:52,110 --> 00:11:57,059
the iterator protocol many built-in

00:11:55,170 --> 00:11:58,439
functions many third-party library

00:11:57,059 --> 00:12:00,360
functions many standard library

00:11:58,439 --> 00:12:02,610
functions rely on the iterator protocol

00:12:00,360 --> 00:12:05,160
anything that may have some form of

00:12:02,610 --> 00:12:07,649
looping uses this form of looping they

00:12:05,160 --> 00:12:09,839
all rely on iterators in python so the

00:12:07,649 --> 00:12:13,439
iterator protocol powers all forms of

00:12:09,839 --> 00:12:15,119
iteration in Python alright so at this

00:12:13,439 --> 00:12:17,670
point you might think iterator seemed

00:12:15,119 --> 00:12:19,439
cool but they also just seemed like an

00:12:17,670 --> 00:12:21,299
implementation detail why should we as

00:12:19,439 --> 00:12:22,410
Python programmers care about this you

00:12:21,299 --> 00:12:24,749
know most of us in this room are not

00:12:22,410 --> 00:12:26,399
core developers we are simply users of

00:12:24,749 --> 00:12:30,209
Python so why should we care about these

00:12:26,399 --> 00:12:33,720
iterator things so I have some news for

00:12:30,209 --> 00:12:35,189
you you have seen iterators before in

00:12:33,720 --> 00:12:36,929
fact we've already seen some iterators

00:12:35,189 --> 00:12:43,379
before I mentioned the word iterator on

00:12:36,929 --> 00:12:45,569
my slides here this is a generator this

00:12:43,379 --> 00:12:48,329
generator object is also an iterator

00:12:45,569 --> 00:12:50,879
which means that we can pass it to the

00:12:48,329 --> 00:12:52,379
next function any iterator can be passed

00:12:50,879 --> 00:13:02,579
to the next function to get its next

00:12:52,379 --> 00:13:03,779
item so generators are iterators there

00:13:02,579 --> 00:13:08,189
is something else that you can do with

00:13:03,779 --> 00:13:13,079
generators though what's the other thing

00:13:08,189 --> 00:13:14,899
that you can do with generators you can

00:13:13,079 --> 00:13:16,879
loop over them

00:13:14,899 --> 00:13:19,569
what does it mean if you can loop over

00:13:16,879 --> 00:13:22,189
something what type of thing is that an

00:13:19,569 --> 00:13:23,930
iterable so I've just said that

00:13:22,189 --> 00:13:26,209
generators are iterators but you know

00:13:23,930 --> 00:13:28,040
that generators are iterables so our

00:13:26,209 --> 00:13:30,670
generators iterators or intervals what's

00:13:28,040 --> 00:13:30,670
going on here

00:13:34,179 --> 00:13:37,850
so I haven't been telling you the truth

00:13:36,709 --> 00:13:39,769
or at least I haven't been telling you

00:13:37,850 --> 00:13:40,999
the whole truth here there is something

00:13:39,769 --> 00:13:44,869
very important that I forgot to mention

00:13:40,999 --> 00:13:48,170
about the iterator protocol iterators

00:13:44,869 --> 00:13:49,790
are also intervals all iterators are

00:13:48,170 --> 00:13:51,980
intervals what that means is that you

00:13:49,790 --> 00:13:53,839
can get an iterator from an iterator

00:13:51,980 --> 00:13:57,019
using the built-in inter function in

00:13:53,839 --> 00:14:01,100
Python just like we can with any other

00:13:57,019 --> 00:14:03,170
interval so we can call it err on an

00:14:01,100 --> 00:14:05,360
iterator to ask it for an iterator and

00:14:03,170 --> 00:14:10,730
when we do that it will always give us

00:14:05,360 --> 00:14:13,459
itself back iterators our iterables and

00:14:10,730 --> 00:14:17,240
their iterator is themselves iterators

00:14:13,459 --> 00:14:19,189
are their own iterables so at this point

00:14:17,240 --> 00:14:20,870
this is this is kind of confusing we've

00:14:19,189 --> 00:14:23,389
got the word iterator we've got the word

00:14:20,870 --> 00:14:24,709
interval you can think of iterables as

00:14:23,389 --> 00:14:27,110
something that you are able to iterate

00:14:24,709 --> 00:14:29,089
over an iterator is the thing that does

00:14:27,110 --> 00:14:33,470
the iteration it just so happens an

00:14:29,089 --> 00:14:34,819
iterator is also an iterable though so

00:14:33,470 --> 00:14:36,290
this fact that I've neglected to mention

00:14:34,819 --> 00:14:39,170
this is the last part of the iterator

00:14:36,290 --> 00:14:40,459
protocol this is the final part of the

00:14:39,170 --> 00:14:42,079
iterator protocol which I don't actually

00:14:40,459 --> 00:14:44,870
have fully on a slide here but you can

00:14:42,079 --> 00:14:46,879
look it up yourself if you ask an

00:14:44,870 --> 00:14:51,009
iterable for an iterator and it gives

00:14:46,879 --> 00:14:53,959
you itself back it must be an iterator

00:14:51,009 --> 00:14:55,850
the opposite of is true as well

00:14:53,959 --> 00:14:57,170
if an iterator always will give you

00:14:55,850 --> 00:14:59,799
itself back when you ask it for an

00:14:57,170 --> 00:15:04,610
iterator all iterators are iterables and

00:14:59,799 --> 00:15:06,709
all iterators are their own iterator so

00:15:04,610 --> 00:15:09,439
iterators are intervals but they have no

00:15:06,709 --> 00:15:12,470
idea how many items they contain unlike

00:15:09,439 --> 00:15:14,899
some types of intervals they also can't

00:15:12,470 --> 00:15:16,730
be indexed the only thing that we can

00:15:14,899 --> 00:15:19,160
reliably do with iterators is get the

00:15:16,730 --> 00:15:20,480
next item on them and loop over them

00:15:19,160 --> 00:15:23,179
those are the only two things that you

00:15:20,480 --> 00:15:25,040
can do with iterators and if we loop

00:15:23,179 --> 00:15:27,199
over an iterator a second time we'll get

00:15:25,040 --> 00:15:28,080
nothing back they're exhausted at this

00:15:27,199 --> 00:15:30,089
point

00:15:28,080 --> 00:15:31,350
iterators are lazy iterables they can

00:15:30,089 --> 00:15:36,060
only be looped over once and then

00:15:31,350 --> 00:15:38,399
they're done so iterables are not

00:15:36,060 --> 00:15:40,800
necessarily iterators but iterators are

00:15:38,399 --> 00:15:43,220
always intervals for example generators

00:15:40,800 --> 00:15:46,410
are iterators but lists are not

00:15:43,220 --> 00:15:48,180
iterators iterables are not always

00:15:46,410 --> 00:15:52,980
iterators but iterators are always

00:15:48,180 --> 00:15:56,459
iterables who's not confused at this

00:15:52,980 --> 00:16:00,029
point all right a few of you I'm

00:15:56,459 --> 00:16:01,860
surprised I'm confused so let's talk

00:16:00,029 --> 00:16:03,480
about why we should care about these

00:16:01,860 --> 00:16:04,709
iterator things we try to talk about why

00:16:03,480 --> 00:16:06,450
we should care about these and then we

00:16:04,709 --> 00:16:07,950
learned that generators are iterators

00:16:06,450 --> 00:16:09,990
and got distracted here let's go back to

00:16:07,950 --> 00:16:12,420
that here are a few reasons you should

00:16:09,990 --> 00:16:16,279
care about iterators iterators allow us

00:16:12,420 --> 00:16:18,300
to work with and create lazy iterables

00:16:16,279 --> 00:16:21,680
anytime you want something to happen

00:16:18,300 --> 00:16:23,700
lazily you could use an iterator

00:16:21,680 --> 00:16:25,800
iterators also allow us to make

00:16:23,700 --> 00:16:27,870
infinitely long intervals the iterator

00:16:25,800 --> 00:16:30,060
protocol is very very simple the

00:16:27,870 --> 00:16:32,480
simplicity of it is a problem for us

00:16:30,060 --> 00:16:36,899
occasionally but it's also a huge

00:16:32,480 --> 00:16:39,329
benefit a huge benefit in Python for us

00:16:36,899 --> 00:16:41,490
as iterable implementers and iterable

00:16:39,329 --> 00:16:43,050
users the simplicity of the iterator

00:16:41,490 --> 00:16:44,910
protocol is the reason we have a

00:16:43,050 --> 00:16:46,380
plethora of different types of intervals

00:16:44,910 --> 00:16:48,149
there are many different types of

00:16:46,380 --> 00:16:50,010
intervals because they all rely on

00:16:48,149 --> 00:16:52,529
something very simple under the hood the

00:16:50,010 --> 00:16:54,690
iterator protocol the iterators are

00:16:52,529 --> 00:16:57,860
foundational to all looping and python

00:16:54,690 --> 00:17:00,390
all looping relies on iterators okay so

00:16:57,860 --> 00:17:02,550
we've seen lots of iterators or you've

00:17:00,390 --> 00:17:04,860
already seen lots of iterators in python

00:17:02,550 --> 00:17:07,679
and i've mentioned that generators are

00:17:04,860 --> 00:17:10,829
iterators enumerate objects are also

00:17:07,679 --> 00:17:13,040
iterators zip objects are iterators as

00:17:10,829 --> 00:17:13,040
well

00:17:13,220 --> 00:17:20,400
reversed objects are iterators and files

00:17:17,910 --> 00:17:21,809
are iterators there are lots of types of

00:17:20,400 --> 00:17:24,209
iterators both in the standard library

00:17:21,809 --> 00:17:30,330
in third-party libraries and built

00:17:24,209 --> 00:17:34,620
straight into python django query sets

00:17:30,330 --> 00:17:37,350
are not iterators they are sort of lazy

00:17:34,620 --> 00:17:39,870
though django presets will not create

00:17:37,350 --> 00:17:41,790
your database until you ask them for an

00:17:39,870 --> 00:17:43,710
iterator only at

00:17:41,790 --> 00:17:45,260
point will they do a database query well

00:17:43,710 --> 00:17:47,850
a database query get executed

00:17:45,260 --> 00:17:50,100
so jinguk resets won't do any work until

00:17:47,850 --> 00:17:51,900
you start to loop over them and they

00:17:50,100 --> 00:17:56,100
cache their results so you don't need to

00:17:51,900 --> 00:17:59,730
do the same query more than once but

00:17:56,100 --> 00:18:03,870
they are not iterators kind of lazy not

00:17:59,730 --> 00:18:06,090
iterators so the fact that jinguk resets

00:18:03,870 --> 00:18:07,560
cache their results is useful but it can

00:18:06,090 --> 00:18:09,810
be problematic if you're looping over a

00:18:07,560 --> 00:18:12,150
million rows you may not necessarily

00:18:09,810 --> 00:18:14,720
want all those million rows cache and

00:18:12,150 --> 00:18:16,710
memory at once that may be a bad idea so

00:18:14,720 --> 00:18:21,110
if you don't want a million rows in

00:18:16,710 --> 00:18:24,090
memory there is a way to avoid Django's

00:18:21,110 --> 00:18:27,390
typical cash with query sets you can use

00:18:24,090 --> 00:18:28,950
the iterator method on query sets the

00:18:27,390 --> 00:18:31,080
iterator method does not give us back a

00:18:28,950 --> 00:18:34,560
query set it gives us an iterator object

00:18:31,080 --> 00:18:36,780
and just like every other iterator we

00:18:34,560 --> 00:18:39,960
can call the next function on it to loop

00:18:36,780 --> 00:18:42,000
over at once or we can loop over it all

00:18:39,960 --> 00:18:47,250
the way using lists or a for loop or any

00:18:42,000 --> 00:18:49,980
other looping constructs we'd like so

00:18:47,250 --> 00:18:52,170
once we've looped over this query set

00:18:49,980 --> 00:18:53,670
iterator it is consumed just like every

00:18:52,170 --> 00:18:55,230
other iterator so it doesn't cache

00:18:53,670 --> 00:18:57,930
things we don't get the other benefits

00:18:55,230 --> 00:18:59,730
of curry sets but it is lazy if you need

00:18:57,930 --> 00:19:02,250
something lazy you want

00:18:59,730 --> 00:19:03,660
Django's query set iterators note that

00:19:02,250 --> 00:19:05,250
this is more memory efficient this is

00:19:03,660 --> 00:19:06,960
not caching anything under the hood and

00:19:05,250 --> 00:19:08,280
at the database level it's actually

00:19:06,960 --> 00:19:09,330
doing something a little bit fancy that

00:19:08,280 --> 00:19:11,250
I'm not going to talk about that

00:19:09,330 --> 00:19:17,250
involves getting these items in an

00:19:11,250 --> 00:19:20,210
efficient way one by one ok so you can

00:19:17,250 --> 00:19:22,950
you cannot just use iterators generators

00:19:20,210 --> 00:19:24,060
enumerate zip Django's iterators there

00:19:22,950 --> 00:19:27,800
are many types of iterative out there

00:19:24,060 --> 00:19:27,800
you can use you can also make your own

00:19:28,730 --> 00:19:34,890
so if you need to make a lazy iterable

00:19:31,860 --> 00:19:37,770
you should think of iterators this here

00:19:34,890 --> 00:19:39,650
is an iterator class this class makes an

00:19:37,770 --> 00:19:42,270
iterator that accepts an iterable of

00:19:39,650 --> 00:19:45,030
numbers and it squares each of those

00:19:42,270 --> 00:19:46,740
numbers if this iterator was passed an

00:19:45,030 --> 00:19:49,470
infinitely long interval or a very long

00:19:46,740 --> 00:19:51,420
interval it will lazily Square them so

00:19:49,470 --> 00:19:55,410
only squares then when we ask it for its

00:19:51,420 --> 00:19:57,090
next item this works but you

00:19:55,410 --> 00:19:58,680
don't usually create iterators this way

00:19:57,090 --> 00:20:00,330
this is not the typical way we make

00:19:58,680 --> 00:20:02,720
iterators usually when we want to make

00:20:00,330 --> 00:20:06,480
an iterator we make a generator function

00:20:02,720 --> 00:20:08,070
because generators are iterators this

00:20:06,480 --> 00:20:10,530
generator function is equivalent to that

00:20:08,070 --> 00:20:12,840
class now if you haven't seen generator

00:20:10,530 --> 00:20:14,520
functions before that yield statement

00:20:12,840 --> 00:20:16,440
might seem magical it is a little bit

00:20:14,520 --> 00:20:18,540
magical it's not a return statement it's

00:20:16,440 --> 00:20:20,760
its own thing but it is very powerful

00:20:18,540 --> 00:20:23,700
that is the thing that allows us to put

00:20:20,760 --> 00:20:27,300
our generator on pause in between next

00:20:23,700 --> 00:20:28,590
calls another way we could implement

00:20:27,300 --> 00:20:30,780
this same thing is with a generator

00:20:28,590 --> 00:20:32,190
expression this is equivalent to that

00:20:30,780 --> 00:20:34,800
generator function which is equivalent

00:20:32,190 --> 00:20:38,490
to that iterator class this does the

00:20:34,800 --> 00:20:41,850
same thing it's syntax looks more like a

00:20:38,490 --> 00:20:43,530
list comprehension though so if you need

00:20:41,850 --> 00:20:45,450
to make a lazy interval think of

00:20:43,530 --> 00:20:49,650
iterators and reach for generator

00:20:45,450 --> 00:20:51,900
functions or generator expressions once

00:20:49,650 --> 00:20:53,370
you've embraced the idea of these lazy

00:20:51,900 --> 00:20:54,720
intervals regardless of whether you're

00:20:53,370 --> 00:20:58,530
making your own functions or using

00:20:54,720 --> 00:21:01,010
someone else's you will discover that

00:20:58,530 --> 00:21:03,240
there are lots of possibilities for

00:21:01,010 --> 00:21:04,620
writing your code in a very different

00:21:03,240 --> 00:21:06,180
way turning kind of your code on its

00:21:04,620 --> 00:21:07,530
head or inside out

00:21:06,180 --> 00:21:09,440
to write your code in a different

00:21:07,530 --> 00:21:13,230
fashion than what you could have before

00:21:09,440 --> 00:21:17,820
this is a for loop this for loop loops

00:21:13,230 --> 00:21:20,370
over a jingo query set let's say and it

00:21:17,820 --> 00:21:28,230
sums up all of the billable hours in

00:21:20,370 --> 00:21:29,790
this query set this is the same code but

00:21:28,230 --> 00:21:33,660
it's using a generate expression to

00:21:29,790 --> 00:21:36,510
lazily evaluate or lazily loop over that

00:21:33,660 --> 00:21:37,770
query set so these two blocks of code do

00:21:36,510 --> 00:21:40,670
the same thing they're written in a very

00:21:37,770 --> 00:21:42,840
different way though that first one is

00:21:40,670 --> 00:21:45,030
incrementing we have to kind of keep

00:21:42,840 --> 00:21:46,130
track of a variable there that second

00:21:45,030 --> 00:21:48,210
one we're able to use the sum function

00:21:46,130 --> 00:21:49,920
because if some function accepts an

00:21:48,210 --> 00:21:56,280
interval we happen to have a lazy

00:21:49,920 --> 00:21:57,870
interval but it is an interval this code

00:21:56,280 --> 00:22:00,140
prints out the first 10 lines of a log

00:21:57,870 --> 00:22:00,140
file

00:22:01,940 --> 00:22:07,790
notice we have an early break here this

00:22:06,230 --> 00:22:09,500
code does the same thing we're using a

00:22:07,790 --> 00:22:10,970
helper function though a helper function

00:22:09,500 --> 00:22:14,150
that's built into the standard library

00:22:10,970 --> 00:22:15,620
to grab just the first 10 lines off of

00:22:14,150 --> 00:22:19,180
this log file because we know that this

00:22:15,620 --> 00:22:22,040
log file is an iterator and iterators

00:22:19,180 --> 00:22:23,750
can be we can use the I slice function

00:22:22,040 --> 00:22:26,060
to work with iterators and grab those

00:22:23,750 --> 00:22:27,650
first 10 lines so notice we were able to

00:22:26,060 --> 00:22:30,080
name something here that we could not

00:22:27,650 --> 00:22:33,500
possibly name before we've named first

00:22:30,080 --> 00:22:34,850
10 lines naming a variable is an

00:22:33,500 --> 00:22:35,960
important thing to do if you have

00:22:34,850 --> 00:22:37,940
something important in your code you

00:22:35,960 --> 00:22:39,170
should give it a name we couldn't give

00:22:37,940 --> 00:22:41,330
it a name in the first case because

00:22:39,170 --> 00:22:43,040
there's no variable we could possibly

00:22:41,330 --> 00:22:48,080
store there that would make sense to

00:22:43,040 --> 00:22:49,340
loop over at least not a lazy one so by

00:22:48,080 --> 00:22:51,680
the way the inner tools library if you

00:22:49,340 --> 00:22:52,940
haven't looked into it definitely make

00:22:51,680 --> 00:22:55,250
sure you look up and explore it it has a

00:22:52,940 --> 00:22:57,560
bunch of helper methods for working with

00:22:55,250 --> 00:23:02,960
iterables and lazy iterators or lazy

00:22:57,560 --> 00:23:05,030
iterables in general this code makes a

00:23:02,960 --> 00:23:08,870
list of differences between consecutive

00:23:05,030 --> 00:23:10,580
values in a sequence notice that we've

00:23:08,870 --> 00:23:12,820
got to cut an extra variable that's

00:23:10,580 --> 00:23:15,020
running alongside our code here that

00:23:12,820 --> 00:23:18,820
previous variable that we have to update

00:23:15,020 --> 00:23:21,230
every time this code does the same thing

00:23:18,820 --> 00:23:22,850
does the same thing using a function

00:23:21,230 --> 00:23:24,080
that doesn't actually exist I just made

00:23:22,850 --> 00:23:27,770
it up you'll have to believe me that it

00:23:24,080 --> 00:23:29,690
works but it gives us those two values

00:23:27,770 --> 00:23:31,820
at once we no longer have something

00:23:29,690 --> 00:23:33,500
running alongside our code there's no

00:23:31,820 --> 00:23:35,150
awkward variable assignment hanging

00:23:33,500 --> 00:23:37,640
around outside of our loop and inside of

00:23:35,150 --> 00:23:39,680
our loop so this generator function here

00:23:37,640 --> 00:23:41,240
with previous allows us to write our

00:23:39,680 --> 00:23:43,370
code in a fundamentally different way

00:23:41,240 --> 00:23:45,170
once you've embraced the notion of lazy

00:23:43,370 --> 00:23:48,260
iteration Python and iterables

00:23:45,170 --> 00:23:52,250
or these lazy iterators you can write

00:23:48,260 --> 00:23:54,050
your code in a different fashion so that

00:23:52,250 --> 00:23:55,640
generator function if you're curious

00:23:54,050 --> 00:23:57,710
what it looks like this is one possible

00:23:55,640 --> 00:23:59,360
implementation of it notice that we're

00:23:57,710 --> 00:24:01,400
actually relying very heavily on the

00:23:59,360 --> 00:24:03,080
iterator protocol here we're manually

00:24:01,400 --> 00:24:05,540
grabbing an iterator from an interval

00:24:03,080 --> 00:24:08,120
we're calling next on it to grab its

00:24:05,540 --> 00:24:10,820
first item and then we're looping over

00:24:08,120 --> 00:24:14,240
to get the rest of the items this works

00:24:10,820 --> 00:24:15,650
for any interval before it only worked

00:24:14,240 --> 00:24:17,420
for sequences

00:24:15,650 --> 00:24:23,000
because we were slicing and you cannot

00:24:17,420 --> 00:24:24,530
slice iterators alright at this point

00:24:23,000 --> 00:24:26,840
we're ready to jump back to those odd

00:24:24,530 --> 00:24:31,220
examples that we saw earlier and figure

00:24:26,840 --> 00:24:32,810
out what's going on so here we have a

00:24:31,220 --> 00:24:35,690
generator object like we had before

00:24:32,810 --> 00:24:38,480
squares if we pass this generator to the

00:24:35,690 --> 00:24:41,000
tuple constructor we'll get a tuple of

00:24:38,480 --> 00:24:43,250
its items back if we then compute the

00:24:41,000 --> 00:24:47,330
sum of these numbers as we've already

00:24:43,250 --> 00:24:49,490
seen we get 0 the reason we get 0 is

00:24:47,330 --> 00:24:53,270
that this generator is empty we've

00:24:49,490 --> 00:24:55,310
exhausted this generator if we try to

00:24:53,270 --> 00:24:56,440
make a tuple out of it again we get

00:24:55,310 --> 00:24:59,180
nothing back

00:24:56,440 --> 00:25:00,950
so this lazy iterable we saw before this

00:24:59,180 --> 00:25:03,110
generator it was an iterator it's been

00:25:00,950 --> 00:25:04,850
exhausted at this point generators are a

00:25:03,110 --> 00:25:06,740
traitor's and iterators are like Hello

00:25:04,850 --> 00:25:08,270
Kitty Pez dispensers that have to be

00:25:06,740 --> 00:25:12,200
thrown out because they can't be

00:25:08,270 --> 00:25:14,710
reloaded once we run out of Pez our Pez

00:25:12,200 --> 00:25:14,710
are gone forever

00:25:16,090 --> 00:25:22,730
if we ask whether 9 is in this squares

00:25:19,520 --> 00:25:24,260
generator will get true if we ask the

00:25:22,730 --> 00:25:27,650
same question again as we already saw

00:25:24,260 --> 00:25:30,080
we'll get false the reason this happened

00:25:27,650 --> 00:25:33,620
is when we asked 9 in squares this

00:25:30,080 --> 00:25:36,020
question created or caused Python to

00:25:33,620 --> 00:25:38,510
loop over our generator and when we

00:25:36,020 --> 00:25:41,120
looped over our generator we had to

00:25:38,510 --> 00:25:43,430
partially evaluate it so the only

00:25:41,120 --> 00:25:44,630
numbers left in this squares generator

00:25:43,430 --> 00:25:50,030
if we made a list out of it where all

00:25:44,630 --> 00:25:51,800
the numbers after 9 25 and 49 iterators

00:25:50,030 --> 00:25:56,000
are like one directional tally counters

00:25:51,800 --> 00:25:57,500
with a broken reset button there is no

00:25:56,000 --> 00:25:59,060
way to know whether something is in an

00:25:57,500 --> 00:26:04,250
iterator without starting to loop over

00:25:59,060 --> 00:26:07,130
it when you loop over dictionaries you

00:26:04,250 --> 00:26:10,580
get keys looping relies on the iterator

00:26:07,130 --> 00:26:12,830
protocol iterable unpacking also relies

00:26:10,580 --> 00:26:15,140
on the iterator protocol so you get the

00:26:12,830 --> 00:26:16,580
same thing you get keys at this point

00:26:15,140 --> 00:26:17,900
this shouldn't be surprising this might

00:26:16,580 --> 00:26:19,310
have been surprising before this isn't

00:26:17,900 --> 00:26:21,290
surprising now because we know that all

00:26:19,310 --> 00:26:21,910
forms of iteration are the same in

00:26:21,290 --> 00:26:24,200
Python

00:26:21,910 --> 00:26:26,650
both of these rely on the iterator

00:26:24,200 --> 00:26:26,650
protocol

00:26:29,009 --> 00:26:34,509
iterators are the most rudimentary form

00:26:31,479 --> 00:26:36,609
of iterables when working with iterator

00:26:34,509 --> 00:26:38,139
when working with iterables try to

00:26:36,609 --> 00:26:39,639
assume that you are working with

00:26:38,139 --> 00:26:40,749
iterator so where it's possible that

00:26:39,639 --> 00:26:42,249
you're working with iterators because

00:26:40,749 --> 00:26:46,719
you very well might be working with

00:26:42,249 --> 00:26:49,299
iterators sometimes iterables

00:26:46,719 --> 00:26:51,489
cannot necessarily be indexed sequences

00:26:49,299 --> 00:26:53,829
can be indexed not all iterables are

00:26:51,489 --> 00:26:56,859
sequences it herbals do not necessarily

00:26:53,829 --> 00:26:59,199
have a length you can't make assumptions

00:26:56,859 --> 00:27:00,489
about your intervals except for one

00:26:59,199 --> 00:27:02,379
assumption the only assumption you can

00:27:00,489 --> 00:27:05,949
make about your intervals is that you

00:27:02,379 --> 00:27:07,389
can iterate over them that's it so try

00:27:05,949 --> 00:27:10,119
not to assume that your intervals have

00:27:07,389 --> 00:27:11,829
more features than just iteration and if

00:27:10,119 --> 00:27:14,289
you need to make your own lazy intervals

00:27:11,829 --> 00:27:15,519
think of iterators and more importantly

00:27:14,289 --> 00:27:18,159
think of generators and think of

00:27:15,519 --> 00:27:20,639
generator expressions and remember that

00:27:18,159 --> 00:27:23,409
if the operation that you're going to do

00:27:20,639 --> 00:27:25,690
maybe using looping or iteration under

00:27:23,409 --> 00:27:27,940
the hood the iterator protocol is being

00:27:25,690 --> 00:27:30,429
used and iterators have to get involved

00:27:27,940 --> 00:27:34,839
and there may be consequences to that

00:27:30,429 --> 00:27:35,769
fact okay so if you write down one thing

00:27:34,839 --> 00:27:38,559
now I would like you to write down

00:27:35,769 --> 00:27:39,549
generators if you write down a second

00:27:38,559 --> 00:27:41,799
thing now you should write down air

00:27:39,549 --> 00:27:42,999
tools you probably don't need to write

00:27:41,799 --> 00:27:45,150
down any more things but that's all I've

00:27:42,999 --> 00:27:49,689
got for you

00:27:45,150 --> 00:27:49,689
[Applause]

00:27:52,340 --> 00:27:54,400

YouTube URL: https://www.youtube.com/watch?v=JYuE8ZiDPl4


