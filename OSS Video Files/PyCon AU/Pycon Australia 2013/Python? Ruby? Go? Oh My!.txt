Title: Python? Ruby? Go? Oh My!
Publication date: 2013-07-11
Playlist: Pycon Australia 2013
Description: 
	Brett Wilkins
http://2013.pycon-au.org/schedule/30007/view_talk
Brett covers the things that excite him about each of Python, Ruby and Go. He covers some of cool stuff he's seen lately, some of the lessons learned from different ecosystems, and more specifically where he thinks Python could improve, or what it excels at.
PyCon Australia is the national conference for users of the Python Programming Language. In July 2013, we're returning to Hobart, bringing together students, enthusiasts, and pr
Captions: 
	00:00:01,429 --> 00:00:06,330
our next presenter is a python ruby

00:00:04,020 --> 00:00:07,710
developer originally from Wellington but

00:00:06,330 --> 00:00:09,540
who now resides in Melbourne

00:00:07,710 --> 00:00:11,130
he's the past organizer of the

00:00:09,540 --> 00:00:14,429
Wellington chapter of the New Zealand

00:00:11,130 --> 00:00:16,800
Python users group and was now who was

00:00:14,429 --> 00:00:20,039
one of the co-organizers of the Kiwi

00:00:16,800 --> 00:00:22,109
PyCon for 2011 in Wellington to share

00:00:20,039 --> 00:00:30,539
his views on python ruby and go

00:00:22,109 --> 00:00:31,769
please welcome Brett Wilkins hello thank

00:00:30,539 --> 00:00:33,540
you

00:00:31,769 --> 00:00:37,200
so I guess we should promise that off

00:00:33,540 --> 00:00:41,160
with who I am my name is Brett Rick

00:00:37,200 --> 00:00:43,739
Wilkins I am a New Zealander

00:00:41,160 --> 00:00:46,230
as you can see what most people call

00:00:43,739 --> 00:00:51,420
Australia is really just the Western

00:00:46,230 --> 00:00:54,000
Island of New Zealand I am DJ mares on

00:00:51,420 --> 00:00:57,989
Twitter if you really care and also be

00:00:54,000 --> 00:00:59,129
Wilkins on github the second link there

00:00:57,989 --> 00:01:01,340
because I'll be putting these slides

00:00:59,129 --> 00:01:06,210
online the second link there is my blog

00:01:01,340 --> 00:01:13,140
which really gets updated so why are you

00:01:06,210 --> 00:01:14,580
listening to me why really actually why

00:01:13,140 --> 00:01:18,140
you might want to listen to me there are

00:01:14,580 --> 00:01:22,040
a few reasons and I'm the extruder er of

00:01:18,140 --> 00:01:24,840
New Zealand patent user groups Society

00:01:22,040 --> 00:01:27,600
I've previously ran party new group

00:01:24,840 --> 00:01:31,759
meetings in Wellington and have been to

00:01:27,600 --> 00:01:36,020
the dark side and tried the cookies so

00:01:31,759 --> 00:01:36,020
what exactly am I talking about

00:01:37,909 --> 00:01:44,130
basically I'm trying to talk about

00:01:40,170 --> 00:01:45,750
what's cool about languages I like let's

00:01:44,130 --> 00:01:47,850
go back here and go down the way meant

00:01:45,750 --> 00:01:49,259
to go and so yeah there's suffering

00:01:47,850 --> 00:01:54,210
different languages that make me happy

00:01:49,259 --> 00:01:58,380
so really what that means is this is a

00:01:54,210 --> 00:02:00,240
language comparison I say what's so cool

00:01:58,380 --> 00:02:06,420
about Python or what do I find cool

00:02:00,240 --> 00:02:09,450
about Python all the pythons there are

00:02:06,420 --> 00:02:10,410
so many pythons you got C Python which

00:02:09,450 --> 00:02:14,730
is the standard

00:02:10,410 --> 00:02:16,980
or probably the gold standard PI Python

00:02:14,730 --> 00:02:18,410
well pi PI sorry

00:02:16,980 --> 00:02:23,100
which I've got to say is really cool

00:02:18,410 --> 00:02:27,470
some Python written and Python if you

00:02:23,100 --> 00:02:27,470
will then compiled down to see

00:02:27,530 --> 00:02:34,170
ironpython just leave this here and

00:02:32,360 --> 00:02:38,580
Jathan which is the one i actually

00:02:34,170 --> 00:02:40,650
always manage to forget about so i also

00:02:38,580 --> 00:02:43,170
think it's great that python is explicit

00:02:40,650 --> 00:02:45,390
and what I mean by that is it's plus it

00:02:43,170 --> 00:02:49,500
would namespaces and it's also explicit

00:02:45,390 --> 00:02:50,940
with functional method calls and so this

00:02:49,500 --> 00:02:52,530
is of course also sit on one of the

00:02:50,940 --> 00:02:55,500
tenets of Python according to the Xena

00:02:52,530 --> 00:02:57,690
Python explicit has better than implicit

00:02:55,500 --> 00:03:02,060
and that comes through in the language

00:02:57,690 --> 00:03:04,410
and so what I like about explicitness is

00:03:02,060 --> 00:03:06,600
you know the enabling of explicitly

00:03:04,410 --> 00:03:10,290
Python gives you is it shows or an hour

00:03:06,600 --> 00:03:13,650
which is a display of intent so good a

00:03:10,290 --> 00:03:17,850
bit of a code here which it's basically

00:03:13,650 --> 00:03:21,630
showing very intently I'm only going to

00:03:17,850 --> 00:03:25,170
use image from PIL and it shows you

00:03:21,630 --> 00:03:28,430
exactly what I'm doing and of course I

00:03:25,170 --> 00:03:31,970
ripped that code from some random place

00:03:28,430 --> 00:03:35,310
let's comprehensions God do I miss these

00:03:31,970 --> 00:03:38,520
and I'm fairly own Python and my first

00:03:35,310 --> 00:03:40,680
job I moved on to another job which

00:03:38,520 --> 00:03:42,090
required learning PHP the knowledge of

00:03:40,680 --> 00:03:45,120
which by the way I try to deny it as

00:03:42,090 --> 00:03:46,410
much as possible but once I realized

00:03:45,120 --> 00:03:49,110
that I couldn't use comprehensions in

00:03:46,410 --> 00:03:53,540
PHP I saw so many places I could use

00:03:49,110 --> 00:03:53,540
them if only I was using Python

00:03:54,709 --> 00:03:59,760
namespaces again we're back to

00:03:57,120 --> 00:04:01,260
namespaces so the way modules and

00:03:59,760 --> 00:04:02,370
namespaces operate in the language

00:04:01,260 --> 00:04:05,550
once again they lay to be very

00:04:02,370 --> 00:04:08,670
intentional for instance we have imports

00:04:05,550 --> 00:04:10,380
this we're basically saying you're going

00:04:08,670 --> 00:04:15,450
to interact with the Sicily through the

00:04:10,380 --> 00:04:17,940
sis handle then we have from PIL import

00:04:15,450 --> 00:04:19,440
image in this case we're displaying the

00:04:17,940 --> 00:04:20,430
intent that we will only use image

00:04:19,440 --> 00:04:23,280
object from

00:04:20,430 --> 00:04:26,520
the PIL module which is exactly the same

00:04:23,280 --> 00:04:31,199
as was in my one of my previous slides

00:04:26,520 --> 00:04:35,789
and then finally my or perhaps our least

00:04:31,199 --> 00:04:37,830
favorite from foo import star which is

00:04:35,789 --> 00:04:45,479
included everything from foo into the

00:04:37,830 --> 00:04:48,060
current local space or scope there's

00:04:45,479 --> 00:04:50,850
also a lot of non web stuff Python I'm a

00:04:48,060 --> 00:04:52,199
web developer so I think that's really

00:04:50,850 --> 00:04:54,150
what really interests me

00:04:52,199 --> 00:04:58,970
usually when looking at something else

00:04:54,150 --> 00:05:01,410
is not what I do for a day job and so

00:04:58,970 --> 00:05:06,570
what I'm talking about really is not

00:05:01,410 --> 00:05:09,479
that particularly mathematics and

00:05:06,570 --> 00:05:11,630
scientific Python and a small sample of

00:05:09,479 --> 00:05:19,979
what is available in the space we have

00:05:11,630 --> 00:05:23,849
numpy number Sai PI sin PI sin pi and

00:05:19,979 --> 00:05:26,970
pandas which I heard about on Friday no

00:05:23,849 --> 00:05:28,949
not there so I've got a few slides on

00:05:26,970 --> 00:05:30,030
the different on the drill down on what

00:05:28,949 --> 00:05:31,889
they are but most you probably know what

00:05:30,030 --> 00:05:33,630
they are numb pi is fundamental package

00:05:31,889 --> 00:05:35,460
for the scientific computing with Python

00:05:33,630 --> 00:05:36,780
it provides optimized scientific

00:05:35,460 --> 00:05:38,310
primitives for Python along with

00:05:36,780 --> 00:05:40,970
functionality to perform advanced

00:05:38,310 --> 00:05:42,750
calculations building on top of that

00:05:40,970 --> 00:05:45,930
down

00:05:42,750 --> 00:05:47,370
we have Syfy a library providing

00:05:45,930 --> 00:05:51,000
fundamentals for scientific computing

00:05:47,370 --> 00:05:53,280
specifically then we have some pie which

00:05:51,000 --> 00:05:55,349
is library first some symbolic

00:05:53,280 --> 00:05:57,510
mathematics I actually added the Sun

00:05:55,349 --> 00:05:59,610
with some pie just to show you what they

00:05:57,510 --> 00:06:03,690
actually are the differences simp is

00:05:59,610 --> 00:06:06,389
simulation in Python pandas

00:06:03,690 --> 00:06:08,039
I really didn't quite get what this was

00:06:06,389 --> 00:06:09,270
saying that pandas is an open-source BSD

00:06:08,039 --> 00:06:10,979
licensed library providing

00:06:09,270 --> 00:06:13,560
high-performance easy to use data

00:06:10,979 --> 00:06:17,610
structures and data analysis tools for

00:06:13,560 --> 00:06:19,919
the Python language and number which I

00:06:17,610 --> 00:06:21,389
thought was quite cool is just in time

00:06:19,919 --> 00:06:24,270
specializing compiler which compiles

00:06:21,389 --> 00:06:30,570
annotated Python and numpy code into

00:06:24,270 --> 00:06:32,100
LLVM right and also one that a lot of

00:06:30,570 --> 00:06:36,420
people might argue

00:06:32,100 --> 00:06:42,570
is that it's faster than Ruby also I've

00:06:36,420 --> 00:06:44,730
been told this is basically anecdotal or

00:06:42,570 --> 00:06:47,160
based off an anecdotal evidence but from

00:06:44,730 --> 00:06:49,470
what I have seen Python does have a

00:06:47,160 --> 00:06:52,410
long-standing steady or stable user base

00:06:49,470 --> 00:06:57,240
when compared to some others just

00:06:52,410 --> 00:06:59,370
thinking about the you know the uptake

00:06:57,240 --> 00:07:01,350
of Python boosts Ruby pythons always

00:06:59,370 --> 00:07:04,500
been sort of slow but steady

00:07:01,350 --> 00:07:06,420
whereas Ruby's since rails came out had

00:07:04,500 --> 00:07:12,540
this massive spike and then sort of

00:07:06,420 --> 00:07:14,280
petered off and all that was observation

00:07:12,540 --> 00:07:19,350
that I made before I started my own

00:07:14,280 --> 00:07:20,820
journey into Ruby itself and Hutton was

00:07:19,350 --> 00:07:22,650
actually the first programming language

00:07:20,820 --> 00:07:26,070
that I learned or dynamic programming

00:07:22,650 --> 00:07:27,210
language and for those interested you

00:07:26,070 --> 00:07:28,710
might note that I'm saying for his

00:07:27,210 --> 00:07:30,030
dynamic programming language the first

00:07:28,710 --> 00:07:33,750
actual programming language that I

00:07:30,030 --> 00:07:39,000
learned with any amount of earnest with

00:07:33,750 --> 00:07:42,920
sleepers plus I was young so that was

00:07:39,000 --> 00:07:44,870
Python how about some other languages

00:07:42,920 --> 00:07:51,360
JavaScript

00:07:44,870 --> 00:07:54,240
it has good parts but okay it actually

00:07:51,360 --> 00:08:00,150
does have good parts like package

00:07:54,240 --> 00:08:02,100
management but really we've got an it's

00:08:00,150 --> 00:08:03,990
sort of a new addition if you will in

00:08:02,100 --> 00:08:06,330
the last few years we've got transpilers

00:08:03,990 --> 00:08:07,920
in JavaScript and I'm only listed a

00:08:06,330 --> 00:08:09,930
couple here is the only ones I couldn't

00:08:07,920 --> 00:08:11,820
think of at the time we've got

00:08:09,930 --> 00:08:14,280
CoffeeScript which the language of its

00:08:11,820 --> 00:08:16,140
own they're trans pals from CoffeeScript

00:08:14,280 --> 00:08:17,580
into JavaScript in a reasonably

00:08:16,140 --> 00:08:19,550
straightforward manner so if you're

00:08:17,580 --> 00:08:22,710
going to write some coffee scripts

00:08:19,550 --> 00:08:24,810
you're you're pretty sure what's going

00:08:22,710 --> 00:08:28,620
to come out in the JavaScript at the end

00:08:24,810 --> 00:08:30,240
it just sort of gets around some of the

00:08:28,620 --> 00:08:31,950
nasty bits of JavaScript for you and

00:08:30,240 --> 00:08:38,460
sort of basically just if we go if we

00:08:31,950 --> 00:08:39,870
went back to the good parts it deals

00:08:38,460 --> 00:08:42,080
with just the top that's what it gives

00:08:39,870 --> 00:08:42,080
you

00:08:44,020 --> 00:08:50,740
and we've also got tracer which takes

00:08:47,610 --> 00:08:52,750
next generation JavaScript and makes it

00:08:50,740 --> 00:08:57,130
runnable in current generation

00:08:52,750 --> 00:08:59,080
javascript environments and of course

00:08:57,130 --> 00:09:01,030
we've got this massive explosion of

00:08:59,080 --> 00:09:05,470
front-end frameworks in the last couple

00:09:01,030 --> 00:09:06,910
of years as well in JavaScript and I've

00:09:05,470 --> 00:09:10,330
got a few examples that I mentioned here

00:09:06,910 --> 00:09:14,680
which is basically backbone ember and

00:09:10,330 --> 00:09:17,110
angular and it seems to me that angular

00:09:14,680 --> 00:09:20,230
is the most aversive end and fixtures

00:09:17,110 --> 00:09:23,110
framework of all of these everybody

00:09:20,230 --> 00:09:24,700
including myself starts to twitch when

00:09:23,110 --> 00:09:27,550
you tell them that you're putting data

00:09:24,700 --> 00:09:30,390
into the Dom but then after a while I'm

00:09:27,550 --> 00:09:32,200
using you get - oh it's okay I guess I

00:09:30,390 --> 00:09:36,970
haven't gotten part this part that's

00:09:32,200 --> 00:09:40,090
past that stage yet so we'll see and and

00:09:36,970 --> 00:09:41,890
also of course finally JavaScript has

00:09:40,090 --> 00:09:48,970
become a first-class citizen and the

00:09:41,890 --> 00:09:50,340
backend world with no js' and yeah so

00:09:48,970 --> 00:09:53,110
currently the only open source thing

00:09:50,340 --> 00:09:54,640
that I'm really contributing at the

00:09:53,110 --> 00:09:57,220
moment as a library called node cess

00:09:54,640 --> 00:10:00,550
which is a wrapper around the libsass

00:09:57,220 --> 00:10:04,530
library and which is basically me to be

00:10:00,550 --> 00:10:09,240
a see implementation of the Ruby compass

00:10:04,530 --> 00:10:13,690
which is the canonical SS or s CSS

00:10:09,240 --> 00:10:16,690
compiler so now we're on to one of my

00:10:13,690 --> 00:10:19,000
favorite languages golang the gold

00:10:16,690 --> 00:10:20,680
language is designed to be designed for

00:10:19,000 --> 00:10:28,090
readable readability and maintenance

00:10:20,680 --> 00:10:31,330
it's no fuss let's see the way you

00:10:28,090 --> 00:10:35,080
format go code is even a part of the

00:10:31,330 --> 00:10:36,310
language so they they don't let this be

00:10:35,080 --> 00:10:39,010
something that's up for discussion

00:10:36,310 --> 00:10:42,100
it's actually defined in the Lang in the

00:10:39,010 --> 00:10:44,440
language and the tool set that you know

00:10:42,100 --> 00:10:46,750
this is how you write go code and you

00:10:44,440 --> 00:10:51,510
know you put your starting bracket up on

00:10:46,750 --> 00:10:51,510
the at the end of line etc

00:10:51,590 --> 00:10:57,529
so yeah go his namespaces that's cool

00:10:54,980 --> 00:11:01,490
it's all well and good namespaces and go

00:10:57,529 --> 00:11:03,770
have purpose and are enforced I don't

00:11:01,490 --> 00:11:06,529
think you can import a single item from

00:11:03,770 --> 00:11:12,400
inside another namespace like you can in

00:11:06,529 --> 00:11:14,990
Python go also has awesome packaging

00:11:12,400 --> 00:11:16,970
basically if it's on the internet you

00:11:14,990 --> 00:11:20,690
can download install and use it directly

00:11:16,970 --> 00:11:22,460
and go the go toolset can pull code from

00:11:20,690 --> 00:11:27,890
online version control or specially

00:11:22,460 --> 00:11:29,690
formatted file and folder structures and

00:11:27,890 --> 00:11:32,330
of course go has a really simple way to

00:11:29,690 --> 00:11:33,560
discern between public and private ever

00:11:32,330 --> 00:11:36,140
starts with a capital letter

00:11:33,560 --> 00:11:41,480
then it's public otherwise it's private

00:11:36,140 --> 00:11:45,170
and there are no semicolons and here's

00:11:41,480 --> 00:11:46,970
an example that I've just included from

00:11:45,170 --> 00:11:49,510
some code that I've written this is

00:11:46,970 --> 00:11:53,000
actually an except from go

00:11:49,510 --> 00:11:56,600
implementation of pong that's really you

00:11:53,000 --> 00:12:00,680
just see this is part of the ball

00:11:56,600 --> 00:12:03,890
package I'm importing Joseph ml which is

00:12:00,680 --> 00:12:05,720
an interim to the SF namespace otherwise

00:12:03,890 --> 00:12:10,520
if I didn't call it is if it would just

00:12:05,720 --> 00:12:13,040
be called go EC female 2 I'm creating a

00:12:10,520 --> 00:12:16,280
ball which is a structure has a shape

00:12:13,040 --> 00:12:19,339
and you can see that their shape is

00:12:16,280 --> 00:12:22,280
public because it's got a capital on the

00:12:19,339 --> 00:12:24,380
name and that function new ball is also

00:12:22,280 --> 00:12:31,370
going to be public in the name space of

00:12:24,380 --> 00:12:36,110
the ball package go also has concurrency

00:12:31,370 --> 00:12:37,310
built in and this is much like Java so

00:12:36,110 --> 00:12:39,440
it has some excellent concurrency

00:12:37,310 --> 00:12:42,770
primitives and there to may pieces to

00:12:39,440 --> 00:12:47,470
this channels which had typed and the

00:12:42,770 --> 00:12:50,180
permitted parsing and go routines where

00:12:47,470 --> 00:12:55,300
any function can become a girl routine

00:12:50,180 --> 00:12:57,680
and I think I skipped a bit here we go

00:12:55,300 --> 00:12:59,240
channels so LOC before they were typed

00:12:57,680 --> 00:13:02,420
misses passing primitive here's an

00:12:59,240 --> 00:13:03,920
example of one in use of we have defined

00:13:02,420 --> 00:13:05,000
I actually wrote this out of effective

00:13:03,920 --> 00:13:08,300
go

00:13:05,000 --> 00:13:10,700
so we've got we're creating the channel

00:13:08,300 --> 00:13:13,100
which is just a unbuffered channel of

00:13:10,700 --> 00:13:16,100
events so what will happen is you put an

00:13:13,100 --> 00:13:19,910
intern to it then a functional read it

00:13:16,100 --> 00:13:29,510
out or as happens down the bottom of the

00:13:19,910 --> 00:13:31,820
line it's just written to nothing and go

00:13:29,510 --> 00:13:35,690
routines you can basically make any

00:13:31,820 --> 00:13:37,760
function to go routine and go routines

00:13:35,690 --> 00:13:40,700
yeah lightweight the so the green

00:13:37,760 --> 00:13:42,710
threads but they can be backed by OS

00:13:40,700 --> 00:13:45,230
threads by default when you're running a

00:13:42,710 --> 00:13:48,290
go application you're only going to run

00:13:45,230 --> 00:13:52,180
it in a single process form or a single

00:13:48,290 --> 00:13:54,530
threaded form but you can give it

00:13:52,180 --> 00:13:56,750
instruction to use a maximum amount of

00:13:54,530 --> 00:13:58,490
processors when running it which will

00:13:56,750 --> 00:14:03,020
basically create a thread pool and

00:13:58,490 --> 00:14:05,840
manage your threads for you and I've got

00:14:03,020 --> 00:14:08,540
another example there of basically

00:14:05,840 --> 00:14:13,970
trying to show you how cheap this go

00:14:08,540 --> 00:14:16,700
routines threads are interfaces now

00:14:13,970 --> 00:14:21,380
actually put the certain after ice or

00:14:16,700 --> 00:14:25,490
the clone talk at the Jango Minicon on

00:14:21,380 --> 00:14:27,170
Friday because I really like what

00:14:25,490 --> 00:14:28,840
interfaces are here interfaces are

00:14:27,170 --> 00:14:32,360
implicit so you will define an interface

00:14:28,840 --> 00:14:34,550
which is in this case of reader and then

00:14:32,360 --> 00:14:37,700
we've got a type foo which is only which

00:14:34,550 --> 00:14:39,370
we're only using here to define a type

00:14:37,700 --> 00:14:42,410
that will implement that interface and

00:14:39,370 --> 00:14:45,320
then down the bottom we have the

00:14:42,410 --> 00:14:51,110
function of implementation of read which

00:14:45,320 --> 00:14:53,870
acts on which is on foo so you call it

00:14:51,110 --> 00:14:57,650
you know foo don't read and because for

00:14:53,870 --> 00:14:59,420
implements the read interface of the

00:14:57,650 --> 00:15:01,670
read function in the same way that the

00:14:59,420 --> 00:15:05,090
reader interface defines it foo

00:15:01,670 --> 00:15:10,280
inherently or implicitly implements that

00:15:05,090 --> 00:15:12,080
reader interface also interfaces are

00:15:10,280 --> 00:15:13,480
composable which is actually something I

00:15:12,080 --> 00:15:18,730
only learnt

00:15:13,480 --> 00:15:21,100
while researching for this talk but as

00:15:18,730 --> 00:15:23,380
you can see and the example of given

00:15:21,100 --> 00:15:25,330
here we've got a reader interface than a

00:15:23,380 --> 00:15:26,680
writer interface and then we have a read

00:15:25,330 --> 00:15:30,220
writer interface which just by

00:15:26,680 --> 00:15:31,990
mentioning the the to read and reader

00:15:30,220 --> 00:15:38,770
and writer interfaces its composing them

00:15:31,990 --> 00:15:40,360
into itself and also just a point of

00:15:38,770 --> 00:15:44,740
interest is that go is not an

00:15:40,360 --> 00:15:47,830
object-oriented language and it is type

00:15:44,740 --> 00:15:49,180
based and it feels a lot like an

00:15:47,830 --> 00:15:50,890
object-oriented language but there is

00:15:49,180 --> 00:15:52,900
nothing in terms of inheritance

00:15:50,890 --> 00:16:00,150
you've only got these things such as

00:15:52,900 --> 00:16:02,800
composability so lastly but not leastly

00:16:00,150 --> 00:16:04,480
we're going to move on to what is my now

00:16:02,800 --> 00:16:09,190
bread and butter or would you call it a

00:16:04,480 --> 00:16:10,540
cookie Ruby and so first off would like

00:16:09,190 --> 00:16:13,180
to introduce you to the concept of mints

00:16:10,540 --> 00:16:15,610
one I'm sort of into two minds of

00:16:13,180 --> 00:16:19,960
elements one what mints one means is

00:16:15,610 --> 00:16:23,440
Maps is nice so we are nice basically

00:16:19,960 --> 00:16:26,080
don't be a dick but really why do we

00:16:23,440 --> 00:16:31,110
need somebody else to be nice first what

00:16:26,080 --> 00:16:33,640
if Matt's was a dick DHH certainly is

00:16:31,110 --> 00:16:36,610
once again the standard sound if you're

00:16:33,640 --> 00:16:39,010
very familiar and all the Rubies Ruby

00:16:36,610 --> 00:16:41,410
has a lot of different what we call

00:16:39,010 --> 00:16:44,470
Ruby's interpreters or

00:16:41,410 --> 00:16:47,440
compilers be the mess MA and so much

00:16:44,470 --> 00:16:49,450
like this is much like Python except I

00:16:47,440 --> 00:16:52,240
think in Ruby land were a lot more

00:16:49,450 --> 00:16:54,790
widely accepting of the various

00:16:52,240 --> 00:16:56,350
interpreters that are available so I'll

00:16:54,790 --> 00:16:59,080
run through these quickly we've got the

00:16:56,350 --> 00:17:04,330
MRI which is Matz's Ruby and that's what

00:16:59,080 --> 00:17:06,760
most people use and our EE or the Ruby

00:17:04,330 --> 00:17:10,810
Enterprise Edition which I hope nobody

00:17:06,760 --> 00:17:16,060
uses anymore Rubinius re-implementation

00:17:10,810 --> 00:17:19,150
of Ruby and C++ and Ruby as well JRuby

00:17:16,060 --> 00:17:23,470
which is obviously Ruby on top of the

00:17:19,150 --> 00:17:25,440
Java stack and iron Ruby which is again

00:17:23,470 --> 00:17:29,910
something I always forget about

00:17:25,440 --> 00:17:32,430
and topaz which I actually almost forgot

00:17:29,910 --> 00:17:34,620
to put in this talk but is really cool

00:17:32,430 --> 00:17:40,170
it is the dark horse it is Ruby

00:17:34,620 --> 00:17:43,050
implemented in Python so yeah topaz holy

00:17:40,170 --> 00:17:45,360
 this is awesome right ruminate on

00:17:43,050 --> 00:17:47,640
this for a second Ruby you written in

00:17:45,360 --> 00:17:51,240
Python or more precisely are Python

00:17:47,640 --> 00:17:53,130
which is your restricted Python Wow so

00:17:51,240 --> 00:18:05,940
I'm only a little bit disappointed that

00:17:53,130 --> 00:18:08,160
it's not Ruby implemented in Ruby Ruby

00:18:05,940 --> 00:18:10,790
is also something that's highly touted

00:18:08,160 --> 00:18:14,870
of it in some respects is expressiveness

00:18:10,790 --> 00:18:14,870
mainly I'm talking about poetry mode

00:18:15,770 --> 00:18:20,040
there we go so poetry mode it

00:18:18,720 --> 00:18:21,840
essentially allows you to drop brackets

00:18:20,040 --> 00:18:26,490
and as long as it doesn't make the call

00:18:21,840 --> 00:18:28,530
chain ambiguous so on the top here we've

00:18:26,490 --> 00:18:31,140
got a hash or in Python and of course

00:18:28,530 --> 00:18:32,820
that's a dictionary and we're sorting

00:18:31,140 --> 00:18:35,420
through all the keys and drawn together

00:18:32,820 --> 00:18:38,820
into a string so that can be reduced to

00:18:35,420 --> 00:18:40,920
the second line which has all the

00:18:38,820 --> 00:18:42,600
function brackets dropped off in the

00:18:40,920 --> 00:18:45,350
middle because they don't take any

00:18:42,600 --> 00:18:47,790
parameters they don't need the the

00:18:45,350 --> 00:18:50,880
parentheses and of course down on the

00:18:47,790 --> 00:18:52,080
bottom because there's nothing chaining

00:18:50,880 --> 00:18:55,220
on the end of join we don't need any

00:18:52,080 --> 00:18:59,460
parentheses down the bottom there either

00:18:55,220 --> 00:19:03,420
and while we're here the different ways

00:18:59,460 --> 00:19:05,220
you can use hashes so I'm only using

00:19:03,420 --> 00:19:08,090
hash knew here to show that we can

00:19:05,220 --> 00:19:12,030
actually drop the brackets when we're

00:19:08,090 --> 00:19:14,570
using a hash with a function so from the

00:19:12,030 --> 00:19:19,050
top we're dropping the curly braces and

00:19:14,570 --> 00:19:20,670
for the second form and then down in the

00:19:19,050 --> 00:19:22,200
third form we're dropping the

00:19:20,670 --> 00:19:25,760
parentheses and not the curly braces and

00:19:22,200 --> 00:19:28,530
in the bottom we're dropping all of them

00:19:25,760 --> 00:19:31,340
once again we can only do this because

00:19:28,530 --> 00:19:34,990
there's nothing chaining on the end of

00:19:31,340 --> 00:19:39,700
the bottom line after you've

00:19:34,990 --> 00:19:45,130
created the hash and then while we're

00:19:39,700 --> 00:19:47,700
here again the top code block here

00:19:45,130 --> 00:19:50,860
there's actually just syntactic sugar

00:19:47,700 --> 00:19:53,050
for the second or bottom code block

00:19:50,860 --> 00:19:56,559
there because who really wants to type

00:19:53,050 --> 00:20:00,550
in a hash rocket and just out of

00:19:56,559 --> 00:20:05,890
interest the top block only became valid

00:20:00,550 --> 00:20:08,140
in Ruby 1:9 and continues on Ruby 2 but

00:20:05,890 --> 00:20:10,390
a lot of people I think most of the

00:20:08,140 --> 00:20:15,640
rails code base still uses hash tags

00:20:10,390 --> 00:20:17,140
sorry hash rockets around the place so I

00:20:15,640 --> 00:20:20,850
don't have a few things left for Ruby

00:20:17,140 --> 00:20:23,920
and I am trying to keep this short and

00:20:20,850 --> 00:20:26,800
everything is an object unless it's a

00:20:23,920 --> 00:20:31,000
method but the method calls should

00:20:26,800 --> 00:20:35,860
return an object and I think symbols are

00:20:31,000 --> 00:20:38,620
cool symbols for those wondering are and

00:20:35,860 --> 00:20:40,780
get back the what's on the left left

00:20:38,620 --> 00:20:44,620
hand side of the hash there as you can

00:20:40,780 --> 00:20:48,130
see is not a string in both instances

00:20:44,620 --> 00:20:51,429
those are actually symbols but you can

00:20:48,130 --> 00:20:55,650
only you can only use a string in place

00:20:51,429 --> 00:20:59,500
of a symbol and the bottom form there

00:20:55,650 --> 00:21:02,080
can catch back up to where we are and so

00:20:59,500 --> 00:21:03,820
symbols not strings they are their own

00:21:02,080 --> 00:21:08,350
type they can't be used outside of a

00:21:03,820 --> 00:21:10,240
hash so any simply it creates that looks

00:21:08,350 --> 00:21:13,870
like another symbol I has the same name

00:21:10,240 --> 00:21:16,300
so call on foo that looks like another

00:21:13,870 --> 00:21:18,880
one called : foo they are exactly the

00:21:16,300 --> 00:21:23,650
same symbol so in other words here I

00:21:18,880 --> 00:21:27,190
didn't potent and and finally I didn't

00:21:23,650 --> 00:21:28,660
really intend for this talk to you know

00:21:27,190 --> 00:21:31,450
have a message to care away from it but

00:21:28,660 --> 00:21:35,230
if there is one that's this having a

00:21:31,450 --> 00:21:37,480
favorite language is pretty cool but

00:21:35,230 --> 00:21:40,720
being reasonably competent and many as

00:21:37,480 --> 00:21:44,679
better don't sell yourself on one area

00:21:40,720 --> 00:21:46,380
language or platform always look to

00:21:44,679 --> 00:21:47,940
expand your knowledge

00:21:46,380 --> 00:21:53,640
because there is no such thing as

00:21:47,940 --> 00:22:11,600
knowing enough there is the end of my

00:21:53,640 --> 00:22:14,760
talk any questions I think some that I

00:22:11,600 --> 00:22:18,059
think that's great advice to an

00:22:14,760 --> 00:22:19,679
individual developer to you know broaden

00:22:18,059 --> 00:22:23,150
their mind as much as possible and learn

00:22:19,679 --> 00:22:25,409
other languages what about a single

00:22:23,150 --> 00:22:28,500
development shop do you think that

00:22:25,409 --> 00:22:30,179
there's value in having multiple

00:22:28,500 --> 00:22:35,700
languages in house all you really want

00:22:30,179 --> 00:22:40,429
to focus on just one platform I see

00:22:35,700 --> 00:22:44,669
value in staying one platform for a shop

00:22:40,429 --> 00:22:48,150
basically because then everybody can

00:22:44,669 --> 00:22:49,770
sort of pitch in and you know they can

00:22:48,150 --> 00:22:51,600
collaborate because they all know what

00:22:49,770 --> 00:22:56,150
they're doing on that one platform or

00:22:51,600 --> 00:22:58,080
they should but I also see value in

00:22:56,150 --> 00:23:00,600
branching out and seeing what other

00:22:58,080 --> 00:23:04,260
options there are if there's something

00:23:00,600 --> 00:23:08,270
better suited to the job especially if

00:23:04,260 --> 00:23:10,830
you're a web yeah if you're a web shop I

00:23:08,270 --> 00:23:15,090
mean you've got your Python or your Ruby

00:23:10,830 --> 00:23:18,090
so your rails or your Django or Sinatra

00:23:15,090 --> 00:23:21,419
of flask pyramid you've got all these

00:23:18,090 --> 00:23:22,740
options for the back end but and then

00:23:21,419 --> 00:23:24,809
it's you know you can silo yourself

00:23:22,740 --> 00:23:26,760
there but then you've got a whole lot of

00:23:24,809 --> 00:23:28,950
front-end stuff to do you've got your

00:23:26,760 --> 00:23:30,600
JavaScript and you've got your CSS and

00:23:28,950 --> 00:23:33,270
you've got many ways that you can deal

00:23:30,600 --> 00:23:37,140
with that so maybe that scenario to

00:23:33,270 --> 00:23:40,440
branch out and first so you mentioned

00:23:37,140 --> 00:23:42,840
that you wrote a version of pomian go I

00:23:40,440 --> 00:23:46,289
was wondering if there are any decent

00:23:42,840 --> 00:23:47,549
graphics slash you know SDL GL and faces

00:23:46,289 --> 00:23:50,850
available for go at the moment because

00:23:47,549 --> 00:23:52,460
when I lost look there weren't any so

00:23:50,850 --> 00:23:55,799
you're asking about decent graphics

00:23:52,460 --> 00:23:57,030
interfaces for those before go yes I

00:23:55,799 --> 00:23:59,400
just saw one during what you were using

00:23:57,030 --> 00:24:04,140
to implement your pong clone right and

00:23:59,400 --> 00:24:07,049
so I used a go binding to a library

00:24:04,140 --> 00:24:10,740
called SF ml I don't know if you've

00:24:07,049 --> 00:24:12,950
heard of that Asaph ml is basically

00:24:10,740 --> 00:24:15,950
built on top of OpenGL

00:24:12,950 --> 00:24:20,300
it is implemented in C or C++ a country

00:24:15,950 --> 00:24:23,600
which to be honest but it's basically

00:24:20,300 --> 00:24:25,580
trying to be the new STL there are also

00:24:23,600 --> 00:24:27,770
go bindings to STL and directly to

00:24:25,580 --> 00:24:35,030
OpenGL as well and I think there

00:24:27,770 --> 00:24:37,730
actually multiple of each hi thanks for

00:24:35,030 --> 00:24:40,400
the talk so in Python you know we have

00:24:37,730 --> 00:24:43,400
Pepe and people mostly kind of stick to

00:24:40,400 --> 00:24:45,470
that and I guess arguments about syntax

00:24:43,400 --> 00:24:49,340
are not as common as they are in other

00:24:45,470 --> 00:24:51,410
languages which i think is good thing so

00:24:49,340 --> 00:24:53,720
in Ruby I'm curious you know having four

00:24:51,410 --> 00:24:56,690
ways to write a function that accepts a

00:24:53,720 --> 00:24:58,340
hash for example does that not just

00:24:56,690 --> 00:25:02,810
invite people arguing about trivial

00:24:58,340 --> 00:25:04,460
stuff do you think that sorry what was

00:25:02,810 --> 00:25:07,460
that like do you get a lot of those kind

00:25:04,460 --> 00:25:09,680
of arguments because you can I think

00:25:07,460 --> 00:25:13,490
things different I suppose you do get a

00:25:09,680 --> 00:25:17,210
bit a few of those arguments but it

00:25:13,490 --> 00:25:18,950
comes down at that point to deciding for

00:25:17,210 --> 00:25:23,030
yourself or for your development shop

00:25:18,950 --> 00:25:26,210
what is the best practice I think most

00:25:23,030 --> 00:25:31,190
people nowadays use the github best

00:25:26,210 --> 00:25:32,270
practice practice so github have defined

00:25:31,190 --> 00:25:35,240
somewhere on the website I can't

00:25:32,270 --> 00:25:37,850
remember where best practices for

00:25:35,240 --> 00:25:41,450
developing and Ruby such as indentation

00:25:37,850 --> 00:25:43,910
by only two spaces and would you know

00:25:41,450 --> 00:25:45,140
which way you should use a hash and you

00:25:43,910 --> 00:25:47,380
know whether or not to use brackets and

00:25:45,140 --> 00:25:47,380
what up

00:25:52,460 --> 00:25:58,370
so the the implementation of interfaces

00:25:55,040 --> 00:26:00,920
that is in Python is not used a lot it's

00:25:58,370 --> 00:26:04,210
used in twisted and it's used in Enzo

00:26:00,920 --> 00:26:06,800
do you see benefit in that being

00:26:04,210 --> 00:26:10,000
accepted into the language or do you

00:26:06,800 --> 00:26:13,910
think it's it's not really missed I

00:26:10,000 --> 00:26:16,280
think I need to read a bit more here but

00:26:13,910 --> 00:26:19,100
more about interfaces as they're used in

00:26:16,280 --> 00:26:23,000
Sopot pone before I could really give a

00:26:19,100 --> 00:26:24,410
proper answer to that it came as a brain

00:26:23,000 --> 00:26:25,760
wave to me to include interfaces into

00:26:24,410 --> 00:26:31,340
this talk after seeing I think was your

00:26:25,760 --> 00:26:32,630
talk at Gen Con but now I can't really

00:26:31,340 --> 00:26:37,400
remember what was said unfortunately I'm

00:26:32,630 --> 00:26:40,360
sorry and so I don't think I can

00:26:37,400 --> 00:26:40,360
actually answer your question very well

00:26:44,110 --> 00:26:56,390
liberal Christians but first PI corner

00:26:54,950 --> 00:26:59,630
would love to thank you for doing this

00:26:56,390 --> 00:27:01,400
talk we have a lovely coffee cup thank

00:26:59,630 --> 00:27:03,290
you and for your coffee cup we have some

00:27:01,400 --> 00:27:05,030
lovely no agent blue coffee from Richard

00:27:03,290 --> 00:27:07,330
thank you about sharply so dreamy and

00:27:05,030 --> 00:27:07,330

YouTube URL: https://www.youtube.com/watch?v=9rjTDfZqgq4


