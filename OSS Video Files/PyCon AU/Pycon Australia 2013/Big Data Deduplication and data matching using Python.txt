Title: Big Data Deduplication and data matching using Python
Publication date: 2013-07-10
Playlist: Pycon Australia 2013
Description: 
	Andrew Rowe
http://2013.pycon-au.org/schedule/30045/view_talk
Andrew Rowe will present the lessons learnt and techniques used to process very large amounts of data from the ABS Census.  The Australian Bureau of Statistics used Python to investigate data from the 2006 Australian Census.  Python is an integral part of ABS systems to determine duplicated entries and link people in the Census to other ABS collections.  You will learn about:
* Handling large data.
* Dealing with confidentiality.
*
Captions: 
	00:00:00,949 --> 00:00:05,580
hello our next presenter is a senior

00:00:03,959 --> 00:00:07,500
developer with the Australian Bureau of

00:00:05,580 --> 00:00:09,900
Statistics with more than 20 years

00:00:07,500 --> 00:00:12,540
computing experience he's presented

00:00:09,900 --> 00:00:14,370
before at PyCon Australia 2012 and he's

00:00:12,540 --> 00:00:17,670
here today to share his experiences in

00:00:14,370 --> 00:00:22,100
big data deduplication and data matching

00:00:17,670 --> 00:00:22,100
using Python please welcome Andrew roe

00:00:24,830 --> 00:00:28,619
thank you for the nice introduction

00:00:27,029 --> 00:00:30,359
first I'd like to start off a little

00:00:28,619 --> 00:00:32,040
clip which sort of shows you some of the

00:00:30,359 --> 00:00:36,170
issues we're trying to deal with here in

00:00:32,040 --> 00:00:36,170
the Stranglers statistics so where we go

00:00:38,360 --> 00:00:53,360
is this sound' ordered off because have

00:00:48,870 --> 00:00:57,170
you got the sound turned on okay hold on

00:00:53,360 --> 00:00:57,170
it's a lot funnier with a sound

00:01:03,460 --> 00:01:06,750
I got a plug Dean

00:01:11,480 --> 00:01:14,740
I can hear it on my computer

00:01:19,580 --> 00:01:29,330
Malkovich Malkovich Malkovich Malkovich

00:01:23,160 --> 00:01:29,330
Malkovich Malkovich Malkovich Malkovich

00:02:23,240 --> 00:02:27,720
all right so that's good so that's a

00:02:26,310 --> 00:02:29,430
little bit of the difficulty we have in

00:02:27,720 --> 00:02:32,700
Australia statistics of telling people

00:02:29,430 --> 00:02:33,470
apart you know from afar they will look

00:02:32,700 --> 00:02:36,020
the same

00:02:33,470 --> 00:02:38,700
all right let's skip at the presentation

00:02:36,020 --> 00:02:40,530
okay I'm going to talk about big data

00:02:38,700 --> 00:02:46,010
duplication and data matching using

00:02:40,530 --> 00:02:48,270
Python so this is where I work ABS house

00:02:46,010 --> 00:02:52,709
we have been stating the best ways to

00:02:48,270 --> 00:02:53,970
get a six-pack since 1905 and I think

00:02:52,709 --> 00:02:55,320
some of our size has shown the best way

00:02:53,970 --> 00:02:59,190
to get a six-pack for most people is

00:02:55,320 --> 00:03:01,140
texture that's not quite true actually

00:02:59,190 --> 00:03:02,459
this frame blur statistics is our

00:03:01,140 --> 00:03:04,650
national statistical agency we're

00:03:02,459 --> 00:03:06,780
responsible of sensors CPI unemployment

00:03:04,650 --> 00:03:08,070
balance of payments and so many other

00:03:06,780 --> 00:03:10,640
statistics just wouldn't believe it if

00:03:08,070 --> 00:03:13,800
you came to our site just be blown away

00:03:10,640 --> 00:03:16,920
okay so I've been working last few years

00:03:13,800 --> 00:03:19,080
on protocol census data matching in it

00:03:16,920 --> 00:03:21,540
sort of that so overview where we're

00:03:19,080 --> 00:03:24,420
taking data from the Census and linking

00:03:21,540 --> 00:03:25,890
them together with other things so we

00:03:24,420 --> 00:03:27,090
can have her like an enhanced in so

00:03:25,890 --> 00:03:29,820
we've been linking the census to

00:03:27,090 --> 00:03:31,380
indigenous deaths and we were going to

00:03:29,820 --> 00:03:33,630
do Australian cancer database but I've

00:03:31,380 --> 00:03:35,850
been told just before I left here that

00:03:33,630 --> 00:03:37,350
actually we'd worked so there's still

00:03:35,850 --> 00:03:39,000
information our websites I don't believe

00:03:37,350 --> 00:03:41,549
that you see it but we're doing other

00:03:39,000 --> 00:03:43,950
things so nothing we do is we take the

00:03:41,549 --> 00:03:46,500
data from census and then we have

00:03:43,950 --> 00:03:48,600
another survey after the census to see

00:03:46,500 --> 00:03:51,060
how accurate the census was which is

00:03:48,600 --> 00:03:53,989
called the PES or the post enumeration

00:03:51,060 --> 00:04:00,209
survey and the other part of being is

00:03:53,989 --> 00:04:01,739
detecting duplicates so just to make

00:04:00,209 --> 00:04:04,200
sure that you know that confidentiality

00:04:01,739 --> 00:04:06,600
is extremely important to distrain below

00:04:04,200 --> 00:04:08,549
statistics to ensure everyone loves

00:04:06,600 --> 00:04:11,610
filling out forms and can make sure that

00:04:08,549 --> 00:04:14,519
we don't fib and lie and tell every one

00:04:11,610 --> 00:04:16,440
of what you're doing so during the

00:04:14,519 --> 00:04:17,790
census processing it happens a certain

00:04:16,440 --> 00:04:19,769
time after the census when you've got

00:04:17,790 --> 00:04:21,959
your forms then we have your name and

00:04:19,769 --> 00:04:23,520
address and in the processing period

00:04:21,959 --> 00:04:26,760
which was just at the end of last year

00:04:23,520 --> 00:04:29,010
we take all the paper all the

00:04:26,760 --> 00:04:31,229
information all the data sets every bit

00:04:29,010 --> 00:04:33,690
of computer code every single thing

00:04:31,229 --> 00:04:36,240
which has your name and address and we

00:04:33,690 --> 00:04:39,000
pulpit paper gets popped

00:04:36,240 --> 00:04:41,400
and the data sort of gets disappeared

00:04:39,000 --> 00:04:44,130
then all the machines were used are

00:04:41,400 --> 00:04:46,979
wiped out and the data center is closed

00:04:44,130 --> 00:04:49,199
down and everything gets moved away so

00:04:46,979 --> 00:04:51,810
you can make sure that none of your name

00:04:49,199 --> 00:04:55,620
address is ever available for anyone to

00:04:51,810 --> 00:04:57,509
do anything nefarious to and that means

00:04:55,620 --> 00:04:59,280
that when we're doing things that we

00:04:57,509 --> 00:05:02,340
need to do with your name address we've

00:04:59,280 --> 00:05:04,620
only got a legislative defined period

00:05:02,340 --> 00:05:06,449
and we have to finish by that time we

00:05:04,620 --> 00:05:08,340
can't just go to like two minutes to

00:05:06,449 --> 00:05:09,720
midnight say no no no no keep it there

00:05:08,340 --> 00:05:13,580
for another couple of seconds I'm almost

00:05:09,720 --> 00:05:16,889
done it's just that it's gone

00:05:13,580 --> 00:05:19,770
so so linking since it's from the few

00:05:16,889 --> 00:05:22,320
times we have actually information every

00:05:19,770 --> 00:05:24,419
person in Australia well just about

00:05:22,320 --> 00:05:27,690
everyone there's a couple people always

00:05:24,419 --> 00:05:29,820
seen them yourself and identify is we

00:05:27,690 --> 00:05:32,400
carefully store it like I said before on

00:05:29,820 --> 00:05:34,530
a dedicated server away from the idea so

00:05:32,400 --> 00:05:36,270
there's a server down in service center

00:05:34,530 --> 00:05:39,300
down in Melbourne which is separate from

00:05:36,270 --> 00:05:40,860
our corporate infrastructure and only

00:05:39,300 --> 00:05:44,070
certain people are allowed to look at it

00:05:40,860 --> 00:05:45,659
and it's not connected to our corporate

00:05:44,070 --> 00:05:47,400
infrastructure so if you try and go to

00:05:45,659 --> 00:05:49,919
the services can't you can't copy and

00:05:47,400 --> 00:05:54,389
paste you can't connect file services so

00:05:49,919 --> 00:05:55,889
it's quite lockdown okay so what do we

00:05:54,389 --> 00:05:57,690
do with me linking why would we do that

00:05:55,889 --> 00:06:00,590
so what we want to do is one of the

00:05:57,690 --> 00:06:05,550
examples in linking is that we want to

00:06:00,590 --> 00:06:10,400
check school leavers how they're

00:06:05,550 --> 00:06:13,710
progressing so if we can sort of look at

00:06:10,400 --> 00:06:15,360
so we want to see we've got a survey of

00:06:13,710 --> 00:06:17,039
school leavers and we want to see what

00:06:15,360 --> 00:06:20,190
happened to those people in the census

00:06:17,039 --> 00:06:21,389
so what we do is we go and get the name

00:06:20,190 --> 00:06:23,729
and address from the census and an AM

00:06:21,389 --> 00:06:26,039
addressed from the school and we match

00:06:23,729 --> 00:06:27,900
them up and then we can see where that

00:06:26,039 --> 00:06:29,820
school leaver was when the sensor was

00:06:27,900 --> 00:06:33,919
taken undertaken and we can sort of make

00:06:29,820 --> 00:06:37,199
a lot of information about that okay

00:06:33,919 --> 00:06:39,949
okay so this is the interesting part did

00:06:37,199 --> 00:06:43,470
you know that pythons actually calls

00:06:39,949 --> 00:06:45,360
250,000 deaths in Australia last year

00:06:43,470 --> 00:06:47,880
I'm sure you didn't know that I thought

00:06:45,360 --> 00:06:49,229
you might have been out Redback spiders

00:06:47,880 --> 00:06:50,500
or something like that that it's

00:06:49,229 --> 00:06:53,599
actually pythons

00:06:50,500 --> 00:06:55,210
and listen because of that is because of

00:06:53,599 --> 00:06:58,879
what we call the post-enumeration survey

00:06:55,210 --> 00:07:00,860
so after the census we go back and we

00:06:58,879 --> 00:07:03,949
have another survey which is like the

00:07:00,860 --> 00:07:05,509
census but it's more intensive so we

00:07:03,949 --> 00:07:08,659
pick people who are representative or

00:07:05,509 --> 00:07:11,150
census and we survey them and then we go

00:07:08,659 --> 00:07:14,030
back and we try and match that person in

00:07:11,150 --> 00:07:16,099
this survey into the census and this

00:07:14,030 --> 00:07:19,639
gives us a good indication how accurate

00:07:16,099 --> 00:07:21,020
the census was now in previous years we

00:07:19,639 --> 00:07:24,110
haven't been very good at that because

00:07:21,020 --> 00:07:26,629
we didn't have very good tools so this

00:07:24,110 --> 00:07:28,610
census we've made a big effort with our

00:07:26,629 --> 00:07:31,370
Python tools to be able to process its

00:07:28,610 --> 00:07:34,449
information so because we did such a

00:07:31,370 --> 00:07:35,690
good job we found out there actually

00:07:34,449 --> 00:07:37,580
oops

00:07:35,690 --> 00:07:40,759
two hundred and fifty thousand people

00:07:37,580 --> 00:07:41,870
less than we thought there were so

00:07:40,759 --> 00:07:43,610
that's a bit of a shock because you just

00:07:41,870 --> 00:07:48,069
don't like a city the size of New Castle

00:07:43,610 --> 00:07:48,069
I think or Hobart MEA Hobart

00:07:48,190 --> 00:07:54,979
now no one knows so it's probably not

00:07:50,479 --> 00:07:57,710
that important okay so they were gone

00:07:54,979 --> 00:07:59,449
because we don't we just thought we'd

00:07:57,710 --> 00:08:00,830
own to Canada but we overestimated our

00:07:59,449 --> 00:08:02,150
owned account we thought we were owned

00:08:00,830 --> 00:08:03,259
the county was four hundred thousand

00:08:02,150 --> 00:08:05,270
bachelor only under counting by two

00:08:03,259 --> 00:08:06,529
hundred fifty thousand so there's two

00:08:05,270 --> 00:08:09,139
hundred thousand people in Australia

00:08:06,529 --> 00:08:11,020
missing now you might think it's unusual

00:08:09,139 --> 00:08:13,430
but why doesn't the government know

00:08:11,020 --> 00:08:16,069
where everyone is you know we you know

00:08:13,430 --> 00:08:18,229
we record bursts and deaths and arrivals

00:08:16,069 --> 00:08:20,779
and departures why don't they we know

00:08:18,229 --> 00:08:21,860
because these sort of things happen in

00:08:20,779 --> 00:08:23,900
different departments and different

00:08:21,860 --> 00:08:26,029
sections are different time periods it's

00:08:23,900 --> 00:08:28,219
difficult to know all the time what's

00:08:26,029 --> 00:08:29,599
happening which should be comforting for

00:08:28,219 --> 00:08:31,069
everyone who's worried about some the

00:08:29,599 --> 00:08:33,649
dark government known too much about it

00:08:31,069 --> 00:08:35,320
because of you that shows that we often

00:08:33,649 --> 00:08:37,070
have no idea what's going on

00:08:35,320 --> 00:08:41,810
individually or everywhere else so

00:08:37,070 --> 00:08:43,550
that's super comforting all right so how

00:08:41,810 --> 00:08:46,329
do we do it so what do we do we take the

00:08:43,550 --> 00:08:49,029
names and other identifiers name address

00:08:46,329 --> 00:08:52,880
near the date of birth where they are

00:08:49,029 --> 00:08:54,880
what they said their age was and we run

00:08:52,880 --> 00:08:58,699
it through an algorithm and that

00:08:54,880 --> 00:09:00,399
algorithm takes the name and the other

00:08:58,699 --> 00:09:03,230
person name we comparing against and

00:09:00,399 --> 00:09:04,010
adds up all the letters and it gives you

00:09:03,230 --> 00:09:07,100
a score and it's

00:09:04,010 --> 00:09:08,480
see the six and it gives out a score and

00:09:07,100 --> 00:09:10,220
then the agent gets out of school and

00:09:08,480 --> 00:09:15,560
then we run that through a giant

00:09:10,220 --> 00:09:17,750
matching process to try and work out

00:09:15,560 --> 00:09:21,350
which is the best matches so it's called

00:09:17,750 --> 00:09:23,570
the nightclub or the Lapp option SATA

00:09:21,350 --> 00:09:24,880
stations are really safe clever aren't

00:09:23,570 --> 00:09:27,970
they leg up this little funny

00:09:24,880 --> 00:09:32,780
statistical prices which are held areas

00:09:27,970 --> 00:09:34,730
no they're not okay okay so then once

00:09:32,780 --> 00:09:36,200
we've got all the numbers about how

00:09:34,730 --> 00:09:38,960
people match up we have to then route

00:09:36,200 --> 00:09:42,560
through another process which says how

00:09:38,960 --> 00:09:45,940
many hundred thousand people can we put

00:09:42,560 --> 00:09:49,490
in so we get the maximum result not just

00:09:45,940 --> 00:09:51,730
whose matches best but what combination

00:09:49,490 --> 00:09:55,130
of them gives you the highest number of

00:09:51,730 --> 00:09:57,200
matches and sometimes there are ones

00:09:55,130 --> 00:09:58,700
that we can't quite work out so then we

00:09:57,200 --> 00:10:03,650
send off to a whole pile of people

00:09:58,700 --> 00:10:05,420
sitting at computers who go and look at

00:10:03,650 --> 00:10:07,820
one record another record another record

00:10:05,420 --> 00:10:09,860
and go yes no yes no yes no it's but

00:10:07,820 --> 00:10:14,750
Homer Simpson I guess in that one we

00:10:09,860 --> 00:10:15,890
know okay so deduplication is important

00:10:14,750 --> 00:10:19,400
data matching is important because we

00:10:15,890 --> 00:10:20,960
found out there were a 250,000 people in

00:10:19,400 --> 00:10:22,910
Australia less than we thought and

00:10:20,960 --> 00:10:25,000
that's important because a lot of

00:10:22,910 --> 00:10:27,890
organizations such as Reserve Bank and

00:10:25,000 --> 00:10:30,530
other banks and finances use that

00:10:27,890 --> 00:10:32,060
information to try and calculate where

00:10:30,530 --> 00:10:33,740
the Australian economy should be going

00:10:32,060 --> 00:10:36,710
and how much economic activity that is

00:10:33,740 --> 00:10:39,290
so Reserve Bank had to revise a lot of

00:10:36,710 --> 00:10:41,180
their figures and their calculations of

00:10:39,290 --> 00:10:43,790
Australian economy because we did a

00:10:41,180 --> 00:10:45,620
better job at data matching so because

00:10:43,790 --> 00:10:47,750
of this work by Python we've actually

00:10:45,620 --> 00:10:51,890
lowered the estimation in the Australian

00:10:47,750 --> 00:10:53,510
economy how much it will grow okay so I

00:10:51,890 --> 00:11:04,150
get ready to have a rest

00:10:53,510 --> 00:11:06,650
oh yeah show me next a minute I got it

00:11:04,150 --> 00:11:08,120
this is a program I wrote to stop my get

00:11:06,650 --> 00:11:11,000
narrow sight but I've forgotten that I

00:11:08,120 --> 00:11:14,720
was running it okay

00:11:11,000 --> 00:11:16,790
okay so what is Big Data it's it's hard

00:11:14,720 --> 00:11:17,810
to define because you know in the olden

00:11:16,790 --> 00:11:19,579
days

00:11:17,810 --> 00:11:21,439
like before I said I was 20 I had 20

00:11:19,579 --> 00:11:23,720
years competing experience my first

00:11:21,439 --> 00:11:28,100
computer was a PC XT with 20 megabytes

00:11:23,720 --> 00:11:31,430
hard disk 640k ram and then big data

00:11:28,100 --> 00:11:33,019
would be probably you know half a second

00:11:31,430 --> 00:11:35,779
of our video eventually you could have

00:11:33,019 --> 00:11:37,490
you have videos back in those days but

00:11:35,779 --> 00:11:40,249
nowadays you know we've got bigger

00:11:37,490 --> 00:11:42,860
computers but the same time dad has

00:11:40,249 --> 00:11:45,559
expanded to have bigger so what big data

00:11:42,860 --> 00:11:46,939
keeps chasing us as we get more capable

00:11:45,559 --> 00:11:52,449
big data keeps getting bigger and bigger

00:11:46,939 --> 00:11:54,589
so it's just enough data that is almost

00:11:52,449 --> 00:11:56,720
impossible for existing systems to

00:11:54,589 --> 00:11:58,430
manage and that's what we found running

00:11:56,720 --> 00:12:03,559
these deduplication and data matching in

00:11:58,430 --> 00:12:05,029
the census our systems were not quite

00:12:03,559 --> 00:12:07,999
able to do it all so we had to do a lot

00:12:05,029 --> 00:12:09,589
of work to do that so let's see we had

00:12:07,999 --> 00:12:14,300
this dream population that time is 21

00:12:09,589 --> 00:12:16,220
million and that's it's not a big number

00:12:14,300 --> 00:12:18,559
but if you try and do it yourself like

00:12:16,220 --> 00:12:20,899
counting from zero to 21 that million

00:12:18,559 --> 00:12:22,970
that'll take you a long time but how

00:12:20,899 --> 00:12:24,620
about if you have to do something like

00:12:22,970 --> 00:12:28,180
we do have a project which you want to

00:12:24,620 --> 00:12:30,259
see how many people of their census died

00:12:28,180 --> 00:12:31,420
now apparently about a hundred forty

00:12:30,259 --> 00:12:34,309
thousand people die every year

00:12:31,420 --> 00:12:36,139
Australian population is 21 million we

00:12:34,309 --> 00:12:39,350
want to see which funds people in census

00:12:36,139 --> 00:12:41,750
unfortunately passed on so what we do is

00:12:39,350 --> 00:12:43,850
you go 21 million people let's look at

00:12:41,750 --> 00:12:46,399
all the other yes so that's 21 million

00:12:43,850 --> 00:12:49,670
times hundred forty thousand which

00:12:46,399 --> 00:12:53,420
equals two point nine trillion yeah

00:12:49,670 --> 00:12:55,339
that's such a big number and if you

00:12:53,420 --> 00:12:57,470
wanted to that'll take you a long time

00:12:55,339 --> 00:13:00,529
no matter what you got so we have to and

00:12:57,470 --> 00:13:02,389
deal with that so that sort of adds up

00:13:00,529 --> 00:13:05,449
to like a sixty thousand years of

00:13:02,389 --> 00:13:08,029
seconds how much was invested for the

00:13:05,449 --> 00:13:10,850
Iraq war slash liberation depending on

00:13:08,029 --> 00:13:13,100
your view but when you've got computers

00:13:10,850 --> 00:13:16,999
that how much is that so a thousand

00:13:13,100 --> 00:13:20,420
seconds of computer cycles which doesn't

00:13:16,999 --> 00:13:21,379
seem that there does it really if that

00:13:20,420 --> 00:13:22,790
was the only thing you're doing but you

00:13:21,379 --> 00:13:24,439
couldn't do lots of other things so

00:13:22,790 --> 00:13:25,819
reading that anytime that many times

00:13:24,439 --> 00:13:28,960
we'd start in a really big number of

00:13:25,819 --> 00:13:31,900
data so if we wanted to put the entire

00:13:28,960 --> 00:13:33,010
sort of calculation into memory in a

00:13:31,900 --> 00:13:35,290
Python data structure

00:13:33,010 --> 00:13:37,030
you got 64-bit numbers you got at least

00:13:35,290 --> 00:13:39,160
three of them like one record the other

00:13:37,030 --> 00:13:41,170
record of the score so that's five

00:13:39,160 --> 00:13:43,240
hundred sixty thousand trillion five

00:13:41,170 --> 00:13:44,830
hundred sixty trillion bytes I don't

00:13:43,240 --> 00:13:47,950
know how many computer systems have that

00:13:44,830 --> 00:13:49,030
much data or even just so sort of

00:13:47,950 --> 00:13:50,730
looking that you're having a bit of a

00:13:49,030 --> 00:13:54,340
problem if you have to actually do this

00:13:50,730 --> 00:13:55,870
so what would happen if we just had so

00:13:54,340 --> 00:13:58,000
much money we just didn't know what to

00:13:55,870 --> 00:14:00,940
do with it we could just buy as much

00:13:58,000 --> 00:14:02,140
memory as you wanted to now some people

00:14:00,940 --> 00:14:04,860
think the government actually has all

00:14:02,140 --> 00:14:07,960
that money we don't we're really poor

00:14:04,860 --> 00:14:10,420
and also unfortunately we have a big

00:14:07,960 --> 00:14:12,100
organization which likes to treat

00:14:10,420 --> 00:14:16,750
everyone the same so we have a

00:14:12,100 --> 00:14:18,160
standardized virtual environment and you

00:14:16,750 --> 00:14:19,780
get in the virtual server and you're not

00:14:18,160 --> 00:14:21,520
allowed to change it not allowed to put

00:14:19,780 --> 00:14:23,230
a ram disk on your letter put any more

00:14:21,520 --> 00:14:25,300
space you know letter do this no letter

00:14:23,230 --> 00:14:26,770
do that so we're really constrained so

00:14:25,300 --> 00:14:30,070
we have to use other techniques rather

00:14:26,770 --> 00:14:31,570
than money to to get things and through

00:14:30,070 --> 00:14:33,700
this approach we actually we de gauche

00:14:31,570 --> 00:14:36,370
eiated to get like a 32 course server

00:14:33,700 --> 00:14:38,800
with 128 gigabytes of memory we go

00:14:36,370 --> 00:14:40,060
beauty we all do so much stuff but

00:14:38,800 --> 00:14:42,460
that's what get in there'd ready remove

00:14:40,060 --> 00:14:44,260
it there was another project which was

00:14:42,460 --> 00:14:46,450
far more vital which took it away and

00:14:44,260 --> 00:14:49,360
that was the the pace system

00:14:46,450 --> 00:14:51,040
redevelopment so I think you all agree

00:14:49,360 --> 00:14:51,940
the getting paid is far more important

00:14:51,040 --> 00:14:57,790
than doing anything to do with the

00:14:51,940 --> 00:14:59,620
census so that got taken away so we have

00:14:57,790 --> 00:15:01,900
I usually have only our service 8 core

00:14:59,620 --> 00:15:04,600
systems with about semi two gigabytes of

00:15:01,900 --> 00:15:07,060
memory so you can churn to a lot of data

00:15:04,600 --> 00:15:08,110
but sometimes the fact that you can

00:15:07,060 --> 00:15:12,250
churn through a lot of data means you

00:15:08,110 --> 00:15:15,340
also generate a lot of data and so the

00:15:12,250 --> 00:15:17,140
good thing about generating a lot of

00:15:15,340 --> 00:15:19,750
data is that python is easy able to

00:15:17,140 --> 00:15:21,340
handle a data so it was great running

00:15:19,750 --> 00:15:25,660
through this process and looking at the

00:15:21,340 --> 00:15:27,490
memory consumption you go from like

00:15:25,660 --> 00:15:29,740
you're sitting down there 100 megabytes

00:15:27,490 --> 00:15:32,200
in the server then you start processing

00:15:29,740 --> 00:15:34,840
and then go although we have to seem you

00:15:32,200 --> 00:15:36,250
2 gigabytes in Python kaloud you to do

00:15:34,840 --> 00:15:38,980
that so that was great but you didn't

00:15:36,250 --> 00:15:40,690
have to do anything fancy like Java you

00:15:38,980 --> 00:15:42,230
have to use crazy things for like big

00:15:40,690 --> 00:15:44,150
numbers and all that sort of know

00:15:42,230 --> 00:15:46,910
since then it's that's great about

00:15:44,150 --> 00:15:48,440
Python it's built in all these tools for

00:15:46,910 --> 00:15:50,780
sorting and storing and working with

00:15:48,440 --> 00:15:53,630
gigabytes of data which just work if

00:15:50,780 --> 00:15:55,580
they have the capacity on the server it

00:15:53,630 --> 00:15:58,190
never had any bugs nothing ever broke

00:15:55,580 --> 00:15:59,510
because of Python it has built-in multi

00:15:58,190 --> 00:16:02,120
processing support which was really

00:15:59,510 --> 00:16:03,410
great once we sub to do things like I

00:16:02,120 --> 00:16:04,550
said before it understands very large

00:16:03,410 --> 00:16:06,680
numbers so you don't have to do anything

00:16:04,550 --> 00:16:08,900
specially just say it's a number and it

00:16:06,680 --> 00:16:11,510
doesn't it can have as many zeros as you

00:16:08,900 --> 00:16:12,800
feel like pretty much and the other

00:16:11,510 --> 00:16:14,960
thing about Python is because it's

00:16:12,800 --> 00:16:16,130
interpreted and it's a fairly simple our

00:16:14,960 --> 00:16:18,170
clients who wanted to write new

00:16:16,130 --> 00:16:22,220
comparators they could see if they

00:16:18,170 --> 00:16:25,160
wanted to say well we know that was a

00:16:22,220 --> 00:16:27,320
good example that you know people when

00:16:25,160 --> 00:16:29,030
they get some university education that

00:16:27,320 --> 00:16:30,980
doesn't change so we can match on that

00:16:29,030 --> 00:16:33,110
we could save you if your university

00:16:30,980 --> 00:16:34,640
educator that's a big score if you're

00:16:33,110 --> 00:16:36,200
not that's a small score and so that

00:16:34,640 --> 00:16:39,590
people don't often forget that they've

00:16:36,200 --> 00:16:41,630
been in university sometimes actually do

00:16:39,590 --> 00:16:43,400
forget which sex they are so you'd be

00:16:41,630 --> 00:16:45,410
surprised about that because the form

00:16:43,400 --> 00:16:47,230
works out like you're put in first name

00:16:45,410 --> 00:16:49,220
second name and some people put in

00:16:47,230 --> 00:16:51,380
husband-wife and then they turn the page

00:16:49,220 --> 00:16:53,390
over and it's swap over to wife/husband

00:16:51,380 --> 00:16:58,610
so unfortunately some people a bit

00:16:53,390 --> 00:17:00,080
confused about what sex they are okay so

00:16:58,610 --> 00:17:01,490
the first time we tried to do all these

00:17:00,080 --> 00:17:03,770
things we just ran out of memory even

00:17:01,490 --> 00:17:07,280
though we had 72 gigabytes so we had a

00:17:03,770 --> 00:17:09,710
more memory we used all that up and then

00:17:07,280 --> 00:17:10,790
they decided that while we don't we

00:17:09,710 --> 00:17:12,320
can't do this we'd better get a

00:17:10,790 --> 00:17:15,920
programmer to actually fix the program

00:17:12,320 --> 00:17:18,200
to work probably that was me so one of

00:17:15,920 --> 00:17:19,760
the things we can do is you can divide

00:17:18,200 --> 00:17:22,850
up the program so you can start using

00:17:19,760 --> 00:17:24,740
blocks so you can compare things so

00:17:22,850 --> 00:17:26,990
instead of comparing all the people in

00:17:24,740 --> 00:17:28,790
the world in Australia against all the

00:17:26,990 --> 00:17:31,130
people who died you can just say all the

00:17:28,790 --> 00:17:33,350
males who died against all the males in

00:17:31,130 --> 00:17:35,150
Australia Nev instantly you sort of have

00:17:33,350 --> 00:17:37,880
your sort of thing there you can take

00:17:35,150 --> 00:17:39,530
out the age range so quite possibly if

00:17:37,880 --> 00:17:41,420
you're in the sense of 70 years old

00:17:39,530 --> 00:17:43,130
you're going to probably be close to

00:17:41,420 --> 00:17:45,530
that age when you dice and it's another

00:17:43,130 --> 00:17:47,170
way you can divide up in things and the

00:17:45,530 --> 00:17:49,100
other way you can do it at most people

00:17:47,170 --> 00:17:51,380
when they're that age they don't move

00:17:49,100 --> 00:17:54,980
around a lot so we have things cloudmesh

00:17:51,380 --> 00:17:58,580
blocks which is like a little tiny block

00:17:54,980 --> 00:18:01,100
a dozen or 20 or 30 houses and we also

00:17:58,580 --> 00:18:02,690
block on that so if you do all these

00:18:01,100 --> 00:18:05,000
sort of things we can get that data down

00:18:02,690 --> 00:18:07,610
to a manageable level and do the

00:18:05,000 --> 00:18:09,710
deduplication so this is one an example

00:18:07,610 --> 00:18:11,690
of a blocking strategy so you've got the

00:18:09,710 --> 00:18:15,080
mesh block the date of birth the month

00:18:11,690 --> 00:18:17,809
of birth personal characteristic and sex

00:18:15,080 --> 00:18:19,309
and something called in it for which is

00:18:17,809 --> 00:18:22,130
such the first four initials and that's

00:18:19,309 --> 00:18:24,980
usually enough to sort of divide people

00:18:22,130 --> 00:18:27,410
up people often usually get the first

00:18:24,980 --> 00:18:30,049
four letters of the name write the rest

00:18:27,410 --> 00:18:32,299
of that you can be a bit but you know

00:18:30,049 --> 00:18:33,890
I'm not too sure about and the other one

00:18:32,299 --> 00:18:35,270
is the geographic so we can also do that

00:18:33,890 --> 00:18:37,370
as well as mesh block we can also do it

00:18:35,270 --> 00:18:39,169
on postcode so as we're going through we

00:18:37,370 --> 00:18:43,669
can eliminate people using the blocking

00:18:39,169 --> 00:18:44,990
strategy okay so another thing that we

00:18:43,669 --> 00:18:49,340
found out when we were doing digital

00:18:44,990 --> 00:18:51,350
occation is that as we're running we had

00:18:49,340 --> 00:18:53,360
a brainwave you actually do not have to

00:18:51,350 --> 00:18:55,160
compare yourself against a person you

00:18:53,360 --> 00:18:56,780
can go half way through the thing of

00:18:55,160 --> 00:18:59,630
insert okay we've already done so you

00:18:56,780 --> 00:19:04,309
can stop that that was a brainwave mean

00:18:59,630 --> 00:19:05,570
who'd have thought about and the other

00:19:04,309 --> 00:19:07,309
thing we can do is that even though

00:19:05,570 --> 00:19:08,990
you've got memory got 72 gigabytes

00:19:07,309 --> 00:19:10,640
that's you can easily use that up but

00:19:08,990 --> 00:19:14,179
what you can do is you can use your disk

00:19:10,640 --> 00:19:16,730
drives as a memory not virtual memory

00:19:14,179 --> 00:19:20,270
but just put it out to disk so what we

00:19:16,730 --> 00:19:22,070
did was we wrote a this base dictionary

00:19:20,270 --> 00:19:24,620
in normal the Python dictionaries in

00:19:22,070 --> 00:19:27,260
memory we rewrote that one so it the

00:19:24,620 --> 00:19:28,429
Disciplinary is held on disk so that way

00:19:27,260 --> 00:19:30,380
instead of having like a semi two

00:19:28,429 --> 00:19:32,840
gigabyte dictionary which is the max one

00:19:30,380 --> 00:19:35,570
could have we could have like a five

00:19:32,840 --> 00:19:39,890
terabyte dictionary it's a bit slow but

00:19:35,570 --> 00:19:41,750
folks it goes it's okay that was good

00:19:39,890 --> 00:19:43,580
now it's my first one of my first things

00:19:41,750 --> 00:19:45,610
actually using the magic double

00:19:43,580 --> 00:19:47,780
underscore things it's really cool and I

00:19:45,610 --> 00:19:49,990
don't know how much time that would

00:19:47,780 --> 00:19:51,980
happen to have to do in Java or C sharp

00:19:49,990 --> 00:19:53,419
I'm not gonna find out in case it's

00:19:51,980 --> 00:19:56,480
quicker and then Python doesn't look so

00:19:53,419 --> 00:19:57,559
good so we won't know that okay the

00:19:56,480 --> 00:19:59,540
other thing you can do as you're going

00:19:57,559 --> 00:20:01,070
along these things often crush because

00:19:59,540 --> 00:20:03,080
they run out of memory in this but you

00:20:01,070 --> 00:20:05,510
can sort of save this off as you go like

00:20:03,080 --> 00:20:08,519
a game so you have save points and save

00:20:05,510 --> 00:20:10,830
and you go along you save the data

00:20:08,519 --> 00:20:12,509
and you crash and you go oh then we

00:20:10,830 --> 00:20:14,219
better start again and you change the

00:20:12,509 --> 00:20:15,479
program make it work a bit better and

00:20:14,219 --> 00:20:17,269
you start up again from where you were

00:20:15,479 --> 00:20:20,969
before and eventually you get it going

00:20:17,269 --> 00:20:24,139
another way we worked out is that to

00:20:20,969 --> 00:20:27,539
make things faster as we were using MPI

00:20:24,139 --> 00:20:32,549
that's a multi processing interface I

00:20:27,539 --> 00:20:34,229
can't maybe some of that and we decided

00:20:32,549 --> 00:20:36,330
it you could increase the speed of

00:20:34,229 --> 00:20:39,179
things by creating a shared memory block

00:20:36,330 --> 00:20:41,729
in the server instead of been normally

00:20:39,179 --> 00:20:44,009
like an MPI you'll create maybe 20

00:20:41,729 --> 00:20:46,889
gigabytes of shared memory of memory and

00:20:44,009 --> 00:20:48,959
then you copy that memory to all the

00:20:46,889 --> 00:20:51,809
processes you have and then you've got

00:20:48,959 --> 00:20:53,579
20 times 8 and you've run out of memory

00:20:51,809 --> 00:20:54,149
so what you could also do instead of

00:20:53,579 --> 00:20:56,399
doing that

00:20:54,149 --> 00:20:57,839
create a shared memory block and then

00:20:56,399 --> 00:20:59,759
you send around a handle to the shared

00:20:57,839 --> 00:21:02,489
memory block so instead of got in 20

00:20:59,759 --> 00:21:04,649
times 8 you've just got 20 gigabytes and

00:21:02,489 --> 00:21:07,789
that's that was a way of making things a

00:21:04,649 --> 00:21:10,829
lot faster and using up less memory

00:21:07,789 --> 00:21:12,719
okay then also things sometimes you'll

00:21:10,829 --> 00:21:14,729
be given a small program which was

00:21:12,719 --> 00:21:16,859
written maybe for comparing ten thousand

00:21:14,729 --> 00:21:18,239
to ten thousand and that sometimes

00:21:16,859 --> 00:21:19,619
doesn't it doesn't matter what you do

00:21:18,239 --> 00:21:22,469
there it's going to work but if you're

00:21:19,619 --> 00:21:25,079
doing 20 million and goes 200 thousand

00:21:22,469 --> 00:21:26,759
it's a automation more complicated so

00:21:25,079 --> 00:21:30,989
you have to think about how you do

00:21:26,759 --> 00:21:33,029
things a bit better so first we when we

00:21:30,989 --> 00:21:34,169
had feble which was the software we have

00:21:33,029 --> 00:21:37,139
from they are new to do this sort of

00:21:34,169 --> 00:21:41,009
stuff is it it would generate a list of

00:21:37,139 --> 00:21:43,109
things that want to compare and generate

00:21:41,009 --> 00:21:45,089
the combinations and then we'll generate

00:21:43,109 --> 00:21:48,029
another list of the result so you got

00:21:45,089 --> 00:21:49,379
three things so so you think about it

00:21:48,029 --> 00:21:51,479
carefully when you're generating the

00:21:49,379 --> 00:21:53,249
comparisons the thing is to compare

00:21:51,479 --> 00:21:54,349
about the combinations you can also do

00:21:53,249 --> 00:21:56,759
the comparison that same time that

00:21:54,349 --> 00:21:59,009
throws out another big blob of memory

00:21:56,759 --> 00:22:01,499
and you save memory and save time so we

00:21:59,009 --> 00:22:02,759
did that as well okay the other thing we

00:22:01,499 --> 00:22:05,579
have to do when you're doing multi

00:22:02,759 --> 00:22:07,229
pressings make sure your your prices are

00:22:05,579 --> 00:22:09,389
independent so they don't rely on them

00:22:07,229 --> 00:22:10,709
so you don't have a situation where they

00:22:09,389 --> 00:22:12,450
have to keep talking to each other to

00:22:10,709 --> 00:22:14,369
keep themselves in schedule let them

00:22:12,450 --> 00:22:15,419
just run off and then when they finish

00:22:14,369 --> 00:22:18,089
then you consolidate the information

00:22:15,419 --> 00:22:21,990
otherwise you've got a lot of chatty

00:22:18,089 --> 00:22:23,480
overhead and then one other thing that's

00:22:21,990 --> 00:22:25,559
I'm very very important you're doing

00:22:23,480 --> 00:22:28,470
giant numbers of dad you have to micro

00:22:25,559 --> 00:22:30,750
optimize so you have to go through every

00:22:28,470 --> 00:22:31,890
single line of code and think does this

00:22:30,750 --> 00:22:35,000
need to be here does this need to be

00:22:31,890 --> 00:22:38,309
here bizarrely even things like comments

00:22:35,000 --> 00:22:41,270
or the number of spaces or tabs we're

00:22:38,309 --> 00:22:43,410
even something as as usual as a bracket

00:22:41,270 --> 00:22:45,420
now most people wouldn't think twice

00:22:43,410 --> 00:22:48,450
about putting back it makes it look

00:22:45,420 --> 00:22:49,770
nicer it's more logical but when the

00:22:48,450 --> 00:22:50,460
Python interpreter comes along it's

00:22:49,770 --> 00:22:54,000
gotta go

00:22:50,460 --> 00:22:55,320
mmm it's another step so after you went

00:22:54,000 --> 00:22:57,179
down through your code we should be

00:22:55,320 --> 00:23:00,510
running you know two point nine trillion

00:22:57,179 --> 00:23:03,179
times and you took just get the brackets

00:23:00,510 --> 00:23:07,620
out you save I can't even think about

00:23:03,179 --> 00:23:08,880
ten milliseconds per statement and

00:23:07,620 --> 00:23:10,740
that'll really adds up so that's the

00:23:08,880 --> 00:23:11,880
sort of things do that bizarrely if you

00:23:10,740 --> 00:23:15,240
put that around a while statement

00:23:11,880 --> 00:23:16,770
actually goes slower so so you know in

00:23:15,240 --> 00:23:18,179
the world statement have brackets if

00:23:16,770 --> 00:23:20,460
statement no brackets and you'll go a

00:23:18,179 --> 00:23:23,360
lot faster I don't know of many of

00:23:20,460 --> 00:23:25,679
you'll really notice a difference in

00:23:23,360 --> 00:23:29,850
other thing is we've got here's called

00:23:25,679 --> 00:23:31,620
delay gratification so don't log because

00:23:29,850 --> 00:23:32,970
that slows things down if you can get

00:23:31,620 --> 00:23:34,860
away with it

00:23:32,970 --> 00:23:37,380
don't put print out things on the screen

00:23:34,860 --> 00:23:39,570
because that slows things down don't

00:23:37,380 --> 00:23:41,820
talk to Outlook processes because that

00:23:39,570 --> 00:23:43,020
slows things down and pretty much the

00:23:41,820 --> 00:23:44,070
only thing you want to be doing in there

00:23:43,020 --> 00:23:45,450
is spinning around doing the

00:23:44,070 --> 00:23:48,480
calculations you don't want any output

00:23:45,450 --> 00:23:52,580
and kill your completed then you write

00:23:48,480 --> 00:23:57,200
it all out so that's what we're doing

00:23:52,580 --> 00:23:57,200
and this is the end of my talk

00:24:04,570 --> 00:24:09,529
just before you do any questions I just

00:24:07,159 --> 00:24:12,049
have a little announcement last chance

00:24:09,529 --> 00:24:13,399
for coffees during afternoon tea I feel

00:24:12,049 --> 00:24:20,600
that's really important because it's

00:24:13,399 --> 00:24:22,519
coffee and it's free so questions so

00:24:20,600 --> 00:24:23,840
regarding the record matching how are

00:24:22,519 --> 00:24:25,960
you actually doing that was it like

00:24:23,840 --> 00:24:29,450
stirring my drinkin is most proud of ha

00:24:25,960 --> 00:24:35,090
there's a number of theories about how

00:24:29,450 --> 00:24:39,080
you match people so we we sort of what

00:24:35,090 --> 00:24:43,159
it does is it calculates how similar

00:24:39,080 --> 00:24:45,139
names are by sort of their signing like

00:24:43,159 --> 00:24:47,840
if your name is Andrew next name is Erin

00:24:45,139 --> 00:24:49,039
it'll compare the first letters and

00:24:47,840 --> 00:24:53,240
letters and letters and letters and make

00:24:49,039 --> 00:24:57,559
up a a score about how likely they are

00:24:53,240 --> 00:24:59,950
to be the same as sort of a Venice one

00:24:57,559 --> 00:25:01,999
else's are doing it so if you have

00:24:59,950 --> 00:25:03,289
double letters which match you get a

00:25:01,999 --> 00:25:05,240
higher score than immerse one letter

00:25:03,289 --> 00:25:07,639
matching so it's sort of probabilistic

00:25:05,240 --> 00:25:10,580
like that and then for each sort of

00:25:07,639 --> 00:25:14,240
thing you score your data you have you

00:25:10,580 --> 00:25:16,999
can assign a like at how much wedding is

00:25:14,240 --> 00:25:18,799
it so sexes has a higher wedding than

00:25:16,999 --> 00:25:22,460
first name last name has a higher weight

00:25:18,799 --> 00:25:24,590
in the first name you're sort of month

00:25:22,460 --> 00:25:26,119
of birth has a higher wedding the date

00:25:24,590 --> 00:25:27,950
of birth because sometimes people get

00:25:26,119 --> 00:25:29,509
that wrong especially if you've got your

00:25:27,950 --> 00:25:31,279
father putting in the dataverse and

00:25:29,509 --> 00:25:32,509
you've got more than one child they're

00:25:31,279 --> 00:25:34,580
probably not going to remember what they

00:25:32,509 --> 00:25:36,440
are but they might remember what month

00:25:34,580 --> 00:25:38,749
your borning is the sort of things so we

00:25:36,440 --> 00:25:40,450
have things you get a score about how

00:25:38,749 --> 00:25:42,710
likely they are to be together and

00:25:40,450 --> 00:25:45,830
because if you're careful with the

00:25:42,710 --> 00:25:48,019
blocking we can make sure that we're

00:25:45,830 --> 00:25:50,960
pretty likely that if your name is

00:25:48,019 --> 00:25:54,259
Andrew and you're in Canberra and you

00:25:50,960 --> 00:25:55,999
live on that Street you're likely to be

00:25:54,259 --> 00:25:59,080
Angelo in Canberra who lives in that

00:25:55,999 --> 00:25:59,080
street in another survey

00:26:04,789 --> 00:26:09,690
so with the Python shared memory of you

00:26:07,410 --> 00:26:12,510
mentioned boots and that was when using

00:26:09,690 --> 00:26:15,600
MPI run it was yes where you use it and

00:26:12,510 --> 00:26:16,799
so was a sort of command the part of MPI

00:26:15,600 --> 00:26:20,760
run is being able to set up shared

00:26:16,799 --> 00:26:22,890
memory is it no because we're only

00:26:20,760 --> 00:26:25,830
running on one server we don't go across

00:26:22,890 --> 00:26:28,260
service it was Windows shared memory so

00:26:25,830 --> 00:26:31,559
what I do is I allocate a Windows shared

00:26:28,260 --> 00:26:33,960
memory I'd pick all the dictionary put

00:26:31,559 --> 00:26:36,690
it in the shared memory send a handle

00:26:33,960 --> 00:26:38,070
around to all the other processes here

00:26:36,690 --> 00:26:41,549
is the shared memory and then they would

00:26:38,070 --> 00:26:44,010
unpeople into their own thing so that

00:26:41,549 --> 00:26:46,320
way you weren't creating a block a

00:26:44,010 --> 00:26:49,169
memory in the process of lock a memory

00:26:46,320 --> 00:26:51,750
in the MPI module and a block of memory

00:26:49,169 --> 00:26:52,980
and the one you're copying it to it's

00:26:51,750 --> 00:26:55,590
depending on how you can do that you can

00:26:52,980 --> 00:26:57,090
have multiple more times of the block of

00:26:55,590 --> 00:27:01,250
memory but if you do it with the shared

00:26:57,090 --> 00:27:01,250
memory you only really have one copy

00:27:02,240 --> 00:27:06,210
yeah this one copy per core cuz I don't

00:27:04,740 --> 00:27:09,270
know how in part from you actually can

00:27:06,210 --> 00:27:12,179
you can't really say this dictionary

00:27:09,270 --> 00:27:13,590
over in this part of memory and all the

00:27:12,179 --> 00:27:15,830
other places can point to it and reuse

00:27:13,590 --> 00:27:22,700
it that's not possible

00:27:15,830 --> 00:27:22,700
Arisa which one

00:27:24,270 --> 00:27:32,410
Redis yeah maybe but the nature of

00:27:31,060 --> 00:27:35,950
govern Department is is actually very

00:27:32,410 --> 00:27:38,320
difficult to get any software inside so

00:27:35,950 --> 00:27:41,790
we had to argue a lot to get Python

00:27:38,320 --> 00:27:44,770
because apparently path is not strategic

00:27:41,790 --> 00:27:46,300
so trying to get anything else coming

00:27:44,770 --> 00:27:47,740
might sort of convinced some mages that

00:27:46,300 --> 00:27:50,400
we're trying to undermine you know the

00:27:47,740 --> 00:27:52,720
whole corporate strategy about things so

00:27:50,400 --> 00:27:53,980
unfortunately we had to do the redevelop

00:27:52,720 --> 00:27:55,140
things they are self-aware than being

00:27:53,980 --> 00:27:57,040
software in because it was just

00:27:55,140 --> 00:28:01,410
bureaucratically very difficult to do

00:27:57,040 --> 00:28:05,260
that in terms of optimization did you

00:28:01,410 --> 00:28:07,660
look at pi PI or siphon to speed things

00:28:05,260 --> 00:28:10,150
up I didn't look at PI pipe because the

00:28:07,660 --> 00:28:12,690
reason I just mentioned that was too

00:28:10,150 --> 00:28:14,530
difficult to try and sort of

00:28:12,690 --> 00:28:17,290
bureaucratically bring things in but we

00:28:14,530 --> 00:28:19,030
did I did try at insightly but it didn't

00:28:17,290 --> 00:28:21,310
make a big difference because we're

00:28:19,030 --> 00:28:23,380
doing a lot of text processing and I

00:28:21,310 --> 00:28:25,390
don't know how Python sort of really

00:28:23,380 --> 00:28:26,890
doesn't insider but it it didn't make a

00:28:25,390 --> 00:28:28,900
big difference so the things which were

00:28:26,890 --> 00:28:31,930
very very pressed for intense we did a

00:28:28,900 --> 00:28:34,030
lot I reimplemented them you see and so

00:28:31,930 --> 00:28:38,710
I made a python extension in C to do

00:28:34,030 --> 00:28:41,470
that and that's that in some ways wasn't

00:28:38,710 --> 00:28:44,260
as difficult or as problematic as as

00:28:41,470 --> 00:28:45,700
syphon because you sort of not too sure

00:28:44,260 --> 00:28:46,960
what's going to happen with syphon sort

00:28:45,700 --> 00:28:49,680
of hitting this but if you redo it and

00:28:46,960 --> 00:28:52,180
see you know exactly what's going on

00:28:49,680 --> 00:28:54,220
also allows you to show off and say you

00:28:52,180 --> 00:28:58,470
know yeah I can do it in C I made an

00:28:54,220 --> 00:28:58,470
extension there you go everyone goes Wow

00:28:59,340 --> 00:29:02,340
okay

00:29:04,050 --> 00:29:08,590
hi Kenny will you would love to thank

00:29:06,550 --> 00:29:10,750
you with this lovely coffee cup our

00:29:08,590 --> 00:29:13,740
friend some Norwegian blue coffee to go

00:29:10,750 --> 00:29:13,740

YouTube URL: https://www.youtube.com/watch?v=Z6mlvrYEYnk


