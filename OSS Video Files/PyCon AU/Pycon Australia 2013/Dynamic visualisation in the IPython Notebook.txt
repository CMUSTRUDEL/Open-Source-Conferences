Title: Dynamic visualisation in the IPython Notebook
Publication date: 2013-07-10
Playlist: Pycon Australia 2013
Description: 
	Brianna Laugher
http://2013.pycon-au.org/schedule/30041/view_talk
The IPython Notebook is a powerful web app for exploring ideas and data sets with Python. It has excellent integration with Matplotlib, giving the user highly customisable static plots with ease. But for larger data sets, a static plot may not be ideal - the ability to pan, zoom, choose dynamic layers and sample the data at particular points would be nice. This talk will demonstrate just how easy it is to integrate a Web Map Servi
Captions: 
	00:00:00,740 --> 00:00:06,420
welcome to the plenary hall our next

00:00:03,600 --> 00:00:07,649
speaker is Python developer at the

00:00:06,420 --> 00:00:08,700
Center for Australian weather and

00:00:07,649 --> 00:00:11,010
climate research at the Bureau of

00:00:08,700 --> 00:00:13,769
Meteorology she's a regular presenter at

00:00:11,010 --> 00:00:15,150
PyCon Australia and her presentation

00:00:13,769 --> 00:00:17,250
this year is on the dynamic

00:00:15,150 --> 00:00:26,039
visualization with the Python notebook

00:00:17,250 --> 00:00:29,640
please welcome Brianna law hi everyone

00:00:26,039 --> 00:00:32,430
thanks for coming along now all my

00:00:29,640 --> 00:00:35,910
slides and code are available on github

00:00:32,430 --> 00:00:40,079
if you want to download them and play

00:00:35,910 --> 00:00:42,989
along or just to save taking notes now I

00:00:40,079 --> 00:00:45,390
work in the research department of the

00:00:42,989 --> 00:00:48,570
bureau of meteorology and we have an

00:00:45,390 --> 00:00:51,510
ipad notebook set up for collaborating

00:00:48,570 --> 00:00:53,640
with the remote members of our team so

00:00:51,510 --> 00:00:54,899
we have a lot of gridded data that we

00:00:53,640 --> 00:00:57,899
need to work with that we want to

00:00:54,899 --> 00:01:00,210
explore that we want to modify in

00:00:57,899 --> 00:01:01,739
different ways and look at the result to

00:01:00,210 --> 00:01:05,220
see if we're making an improvement in

00:01:01,739 --> 00:01:06,840
some fashion so it's very easy with the

00:01:05,220 --> 00:01:09,799
ipython notebook because of its

00:01:06,840 --> 00:01:12,930
matplotlib support to plot that out and

00:01:09,799 --> 00:01:16,590
as you can see this is an example of

00:01:12,930 --> 00:01:20,540
some data which is a forecast for

00:01:16,590 --> 00:01:20,540
minimum temperature around tasmania and

00:01:21,080 --> 00:01:24,990
because it's kind of geographically

00:01:23,549 --> 00:01:27,450
based maybe we would like to take a

00:01:24,990 --> 00:01:29,670
closer look at a particular area this is

00:01:27,450 --> 00:01:33,619
a plot that's kind of zoomed in around

00:01:29,670 --> 00:01:37,829
the lat/long that represents hobart but

00:01:33,619 --> 00:01:41,040
that's not really a super ideal solution

00:01:37,829 --> 00:01:44,430
for really exploring this data in detail

00:01:41,040 --> 00:01:47,070
so we can't we can't zoom in really like

00:01:44,430 --> 00:01:50,909
us a little bit awkward we can't pan

00:01:47,070 --> 00:01:52,890
can't move side to side to have a more

00:01:50,909 --> 00:01:55,500
dynamic look at what's there and we

00:01:52,890 --> 00:01:59,670
can't easily add multiple layers to

00:01:55,500 --> 00:02:02,810
matplotlib so map hotly plots with a lot

00:01:59,670 --> 00:02:06,420
of backends so for example if you use a

00:02:02,810 --> 00:02:08,250
cute cutie i think or TK egg back end

00:02:06,420 --> 00:02:12,030
they'll actually pop up a separate

00:02:08,250 --> 00:02:13,560
window on your desktop and you can you

00:02:12,030 --> 00:02:17,099
can play with those interact

00:02:13,560 --> 00:02:18,870
but for the ones that are embedded in

00:02:17,099 --> 00:02:21,530
line in the notebook you can't really

00:02:18,870 --> 00:02:23,730
interact with them in the same way so

00:02:21,530 --> 00:02:26,550
because we're dealing with gridded data

00:02:23,730 --> 00:02:30,000
so what we what we really want is a map

00:02:26,550 --> 00:02:32,130
interface so we'd like something like

00:02:30,000 --> 00:02:33,900
this we just want to have something

00:02:32,130 --> 00:02:36,269
simple that we can pass all the relevant

00:02:33,900 --> 00:02:38,370
parameters to and have a proper actual

00:02:36,269 --> 00:02:39,840
map there you know these JavaScript

00:02:38,370 --> 00:02:41,250
people will know what they're doing

00:02:39,840 --> 00:02:45,660
they've got all the mapping stuff sorted

00:02:41,250 --> 00:02:48,120
so let's just use that so just briefly

00:02:45,660 --> 00:02:51,480
to talk about the data that I'm using in

00:02:48,120 --> 00:02:53,040
this example it's from a service that

00:02:51,480 --> 00:02:55,910
the bureau provides called the

00:02:53,040 --> 00:02:58,530
Australian digital forecast database as

00:02:55,910 --> 00:03:00,150
links to it you can download the sample

00:02:58,530 --> 00:03:01,860
grids for a bunch of different weather

00:03:00,150 --> 00:03:05,450
parameters like minimum temperature

00:03:01,860 --> 00:03:08,849
maximum temperature sea-level pressure

00:03:05,450 --> 00:03:10,650
wind speeds a percentage of

00:03:08,849 --> 00:03:14,160
precipitation these kinds of things and

00:03:10,650 --> 00:03:16,200
these grids are also these grids are the

00:03:14,160 --> 00:03:19,200
output of the project that I work on and

00:03:16,200 --> 00:03:21,480
they feed into the bureau's new web app

00:03:19,200 --> 00:03:23,760
which is called meta it's only just

00:03:21,480 --> 00:03:25,890
recently released so do have a look at

00:03:23,760 --> 00:03:27,480
it it's quite cool you can get all the

00:03:25,890 --> 00:03:31,980
different parameters on the left for

00:03:27,480 --> 00:03:33,600
your particular location and of course

00:03:31,980 --> 00:03:37,230
you can interact with it like a map

00:03:33,600 --> 00:03:39,209
which is nice so if we think about what

00:03:37,230 --> 00:03:42,170
are the things that we need to get in

00:03:39,209 --> 00:03:44,880
place to have our map in our notebook

00:03:42,170 --> 00:03:47,790
this is this is one way we can do it and

00:03:44,880 --> 00:03:50,280
what I'm going to do is talk us through

00:03:47,790 --> 00:03:52,200
each of these steps actually working

00:03:50,280 --> 00:03:53,790
backwards and we're going to see how do

00:03:52,200 --> 00:03:55,230
we need to set those up and configure

00:03:53,790 --> 00:04:00,510
those so that they can all play nice

00:03:55,230 --> 00:04:02,540
together so yeah netcdf is just a quite

00:04:00,510 --> 00:04:06,690
common data format that's used for

00:04:02,540 --> 00:04:07,680
gridded data it could be hdf5 or

00:04:06,690 --> 00:04:11,040
something like that that we're dealing

00:04:07,680 --> 00:04:13,620
with as well and that's just a common

00:04:11,040 --> 00:04:16,019
format that is quite popular in

00:04:13,620 --> 00:04:17,160
oceanography and climate ology so if

00:04:16,019 --> 00:04:18,959
you're interested in that kind of data

00:04:17,160 --> 00:04:21,200
you probably are already familiar with

00:04:18,959 --> 00:04:21,200
it

00:04:21,420 --> 00:04:25,740
so if you have been paying attention at

00:04:24,330 --> 00:04:28,020
all you've probably heard about the

00:04:25,740 --> 00:04:30,090
notebook quite a few times this weekend

00:04:28,020 --> 00:04:32,580
and I'm just going to echo what everyone

00:04:30,090 --> 00:04:36,740
else says and say that I think it's a

00:04:32,580 --> 00:04:39,150
really useful tool for working with

00:04:36,740 --> 00:04:42,480
remote people and working with people

00:04:39,150 --> 00:04:45,240
who maybe are not as comfortable as you

00:04:42,480 --> 00:04:47,970
are just opening a script in a text

00:04:45,240 --> 00:04:50,700
editor and and modifying it and I also

00:04:47,970 --> 00:04:52,920
think it's a really great tool for your

00:04:50,700 --> 00:04:56,910
own purposes when you're exploring a new

00:04:52,920 --> 00:04:59,910
API so for example matplotlib is kind of

00:04:56,910 --> 00:05:01,290
finicky and because the support from

00:04:59,910 --> 00:05:03,060
that Portland is already built into the

00:05:01,290 --> 00:05:05,130
notebook it's perfect if you need to

00:05:03,060 --> 00:05:07,890
remember or what parameter do I need to

00:05:05,130 --> 00:05:09,780
set to change this axis or change the

00:05:07,890 --> 00:05:13,200
color of this plot you can keep all your

00:05:09,780 --> 00:05:15,390
working recorded there so that when you

00:05:13,200 --> 00:05:16,890
go back later you don't you didn't you

00:05:15,390 --> 00:05:21,930
know delete that because that was just a

00:05:16,890 --> 00:05:24,180
working step you still got available so

00:05:21,930 --> 00:05:25,680
setting it up is really easy and then we

00:05:24,180 --> 00:05:27,330
run it with pylab in line so that our

00:05:25,680 --> 00:05:31,590
images are embedded in the page instead

00:05:27,330 --> 00:05:33,810
of popping up separately now I partha

00:05:31,590 --> 00:05:37,500
notebook has what's they like to call

00:05:33,810 --> 00:05:38,850
this rich display system and so you

00:05:37,500 --> 00:05:40,950
might have seen already that it can

00:05:38,850 --> 00:05:44,220
embed la tech and all these different

00:05:40,950 --> 00:05:47,250
types of images and also JSON and HTML

00:05:44,220 --> 00:05:50,280
and we're just using the HTML the

00:05:47,250 --> 00:05:53,460
current version of the notebook is only

00:05:50,280 --> 00:05:56,730
like point 13 and they have a pretty

00:05:53,460 --> 00:05:59,010
detailed road map for improving support

00:05:56,730 --> 00:06:00,120
for a lot of this and in particular they

00:05:59,010 --> 00:06:02,490
have mentioned that they want to make

00:06:00,120 --> 00:06:05,010
improvements to JavaScript so I would

00:06:02,490 --> 00:06:07,410
say watch this space and what I'm doing

00:06:05,010 --> 00:06:08,880
may not be applicable in the future

00:06:07,410 --> 00:06:12,120
there's probably going to be easier ways

00:06:08,880 --> 00:06:14,550
of doing this I would suggest but to

00:06:12,120 --> 00:06:16,650
make if you have some classes either

00:06:14,550 --> 00:06:19,290
your own code or even someone else's

00:06:16,650 --> 00:06:20,970
code but you would like to be able to

00:06:19,290 --> 00:06:23,400
inspect it more easily and have nice

00:06:20,970 --> 00:06:27,390
visualizations in the notebook all you

00:06:23,400 --> 00:06:29,040
need to do is add some kind of so2 to

00:06:27,390 --> 00:06:32,560
make it have an image add like a ping

00:06:29,040 --> 00:06:35,050
method and have it return an instance of

00:06:32,560 --> 00:06:37,660
this image which imageclass which we've

00:06:35,050 --> 00:06:39,190
imported from ipython display and then

00:06:37,660 --> 00:06:41,860
when you're in the notebook you'll be

00:06:39,190 --> 00:06:45,400
able to just do you know foo dot pinyin

00:06:41,860 --> 00:06:47,880
it will embed in the notebook so that's

00:06:45,400 --> 00:06:51,010
a really it's actually quite simple to

00:06:47,880 --> 00:06:53,350
add support to your own classes and your

00:06:51,010 --> 00:06:59,169
own code so that it will embed really

00:06:53,350 --> 00:07:01,480
nicely in the notebook as well so that's

00:06:59,169 --> 00:07:04,330
setting up the notebook next let's look

00:07:01,480 --> 00:07:07,510
at the HTML that we need to be embedding

00:07:04,330 --> 00:07:10,540
that's going to have our map in it so I

00:07:07,510 --> 00:07:13,479
in doing this I looked at um leaflet and

00:07:10,540 --> 00:07:17,080
open layers and probably very similar

00:07:13,479 --> 00:07:19,530
support for you know whatever mapping

00:07:17,080 --> 00:07:21,520
library you happen to like to use the

00:07:19,530 --> 00:07:23,229
something that's a little bit

00:07:21,520 --> 00:07:25,060
significant is generally you are

00:07:23,229 --> 00:07:28,990
specifying your layers as either tile

00:07:25,060 --> 00:07:32,620
layers or WMS web map service tile

00:07:28,990 --> 00:07:35,650
layers and and the service that we're

00:07:32,620 --> 00:07:37,300
going to be using to add our data as a

00:07:35,650 --> 00:07:40,060
layer is going to be a web map service

00:07:37,300 --> 00:07:42,130
layer and we do need to care about

00:07:40,060 --> 00:07:45,550
projections a little bit which can be a

00:07:42,130 --> 00:07:49,090
bit of a pain so a web map service is

00:07:45,550 --> 00:07:52,060
essentially just an API that anyone's

00:07:49,090 --> 00:07:54,240
app can if they match this API they can

00:07:52,060 --> 00:07:56,620
call themselves a web map service and

00:07:54,240 --> 00:07:59,110
specify a bunch of parameters and return

00:07:56,620 --> 00:08:01,660
an image that is a map tile in response

00:07:59,110 --> 00:08:06,130
and so this is what a typical request

00:08:01,660 --> 00:08:09,280
would look like the three things that

00:08:06,130 --> 00:08:12,190
are relevant to the data that we're

00:08:09,280 --> 00:08:15,370
actually asking for is this layers SRS

00:08:12,190 --> 00:08:18,570
and the bounding box be box so the SRS

00:08:15,370 --> 00:08:21,160
is the coordinate reference systems

00:08:18,570 --> 00:08:23,560
projection i'm going to say and the

00:08:21,160 --> 00:08:24,970
bounding box is just defining the top

00:08:23,560 --> 00:08:27,820
left in the bottom right-hand corner of

00:08:24,970 --> 00:08:30,039
the the image that we're asking for and

00:08:27,820 --> 00:08:32,529
the only reason really you might need to

00:08:30,039 --> 00:08:36,010
look at this is because those bounding

00:08:32,529 --> 00:08:38,260
box coordinates are defined and or need

00:08:36,010 --> 00:08:41,200
to be understood with reference to the

00:08:38,260 --> 00:08:43,030
SRS so they need to be specified the

00:08:41,200 --> 00:08:50,320
same

00:08:43,030 --> 00:08:52,540
and I thought I had some more slides

00:08:50,320 --> 00:09:04,440
about projections maybe that's coming

00:08:52,540 --> 00:09:04,440
later so let's talk about tied up and

00:09:04,980 --> 00:09:11,500
opened app is a open standard an open

00:09:09,580 --> 00:09:13,870
protocol that was developed originally

00:09:11,500 --> 00:09:17,710
in the oceanography community but has

00:09:13,870 --> 00:09:20,470
been adopted by climate scientists and

00:09:17,710 --> 00:09:24,900
NASA and whoever has this kind of data

00:09:20,470 --> 00:09:28,450
is a good way to transfer gridded data

00:09:24,900 --> 00:09:30,280
over HTTP but it has the benefit that it

00:09:28,450 --> 00:09:33,010
essentially can do kind of lazy loading

00:09:30,280 --> 00:09:34,690
and so if you only request a subset of

00:09:33,010 --> 00:09:37,990
the data it's not going to download the

00:09:34,690 --> 00:09:41,110
entire file which is very convenient

00:09:37,990 --> 00:09:42,940
with large data sets and for scientists

00:09:41,110 --> 00:09:47,950
there's a whole lot of clients that they

00:09:42,940 --> 00:09:51,030
would have that can read and render data

00:09:47,950 --> 00:09:54,010
recording to the Deaf protocol and so

00:09:51,030 --> 00:09:56,590
setting up and opened up server is a way

00:09:54,010 --> 00:10:02,530
to make your data available to those

00:09:56,590 --> 00:10:04,060
people it also means that if you are

00:10:02,530 --> 00:10:06,340
reading data from an opened episode it

00:10:04,060 --> 00:10:12,910
server you don't have to care about part

00:10:06,340 --> 00:10:16,060
of me you don't have to care about what

00:10:12,910 --> 00:10:20,830
was the original file type was it hdf5

00:10:16,060 --> 00:10:24,100
or a netcdf or something else and our

00:10:20,830 --> 00:10:27,010
pineap-- is also has the code in it to

00:10:24,100 --> 00:10:31,060
set up your own opened up server it's

00:10:27,010 --> 00:10:33,700
just a simple whiskey up and it has a

00:10:31,060 --> 00:10:35,020
bunch of handlers by default to handle

00:10:33,700 --> 00:10:38,290
different types of data and you can also

00:10:35,020 --> 00:10:41,790
install some extra ones and it has this

00:10:38,290 --> 00:10:44,890
nice proxy handler so you can actually

00:10:41,790 --> 00:10:46,000
show netcdf files as if they're on your

00:10:44,890 --> 00:10:47,230
server but really they just stored

00:10:46,000 --> 00:10:49,990
somewhere else and you're just kind of

00:10:47,230 --> 00:10:52,930
rooting them through your server and as

00:10:49,990 --> 00:10:54,730
well as this dust dds and dodd stick

00:10:52,930 --> 00:10:55,960
they kind of define the opened up

00:10:54,730 --> 00:10:58,240
protocol

00:10:55,960 --> 00:11:00,250
it will give you by default HTML and

00:10:58,240 --> 00:11:02,530
ascii and so that's nice you can just

00:11:00,250 --> 00:11:05,380
look at use your browser as a client to

00:11:02,530 --> 00:11:07,990
look at it and investigate what's there

00:11:05,380 --> 00:11:12,400
and then you can install extra responses

00:11:07,990 --> 00:11:14,440
for WMS and KML and so there the WMS is

00:11:12,400 --> 00:11:16,870
so that we can use it as a map layer and

00:11:14,440 --> 00:11:22,830
the KML is so that you could view it in

00:11:16,870 --> 00:11:25,470
something like Google Earth so this is

00:11:22,830 --> 00:11:28,840
just kind of showing the architecture of

00:11:25,470 --> 00:11:30,400
tied up and as you can see it's very

00:11:28,840 --> 00:11:34,300
modular it's actually I think it's a

00:11:30,400 --> 00:11:35,920
really nice little project and the

00:11:34,300 --> 00:11:40,360
documentation is a little sparse but

00:11:35,920 --> 00:11:45,520
it's very nicely laid out and nice and

00:11:40,360 --> 00:11:47,620
simple so installing that and getting

00:11:45,520 --> 00:11:50,770
that started to run our own server is

00:11:47,620 --> 00:11:54,520
very simple and there's a template for

00:11:50,770 --> 00:11:56,890
your own default server which you can

00:11:54,520 --> 00:11:58,540
use paste adjust to create that and then

00:11:56,890 --> 00:12:01,690
literally you just copying you netcdf

00:11:58,540 --> 00:12:04,810
file into the data directory and you're

00:12:01,690 --> 00:12:07,720
done you can look at your server with

00:12:04,810 --> 00:12:10,720
your browser and you'll see the HTML

00:12:07,720 --> 00:12:14,560
interface by default and so you'll get

00:12:10,720 --> 00:12:16,840
an index of your files this coeds NC is

00:12:14,560 --> 00:12:18,730
a kind of default one that's just

00:12:16,840 --> 00:12:20,680
included with Pied app and so if you

00:12:18,730 --> 00:12:23,970
don't have any other data to look at yet

00:12:20,680 --> 00:12:27,850
that can be one that you can explore and

00:12:23,970 --> 00:12:29,290
you can you can download the data by

00:12:27,850 --> 00:12:32,110
specifying all the things you want

00:12:29,290 --> 00:12:33,820
through the browser and that could be a

00:12:32,110 --> 00:12:36,610
good way to do that until you figure out

00:12:33,820 --> 00:12:38,200
exactly what coordinates you need to

00:12:36,610 --> 00:12:41,050
specify and then do it programmatically

00:12:38,200 --> 00:12:43,510
and it's also got this pide up tab so

00:12:41,050 --> 00:12:45,070
that you can if you're writing Python

00:12:43,510 --> 00:12:47,410
and using that as your client library

00:12:45,070 --> 00:12:51,910
you can just copy and paste it couldn't

00:12:47,410 --> 00:12:57,010
be easier okay so now we will talk about

00:12:51,910 --> 00:13:01,540
projections and soap I'd app only

00:12:57,010 --> 00:13:04,690
supports serving WMS tiles in the ESP

00:13:01,540 --> 00:13:08,260
epsg 4326 projection

00:13:04,690 --> 00:13:09,880
and and this is what is used by most of

00:13:08,260 --> 00:13:13,600
the people who are producing this kind

00:13:09,880 --> 00:13:17,710
of data in netcdf files yeast

00:13:13,600 --> 00:13:20,110
enthusiasts and the reason that that

00:13:17,710 --> 00:13:22,170
makes us a little bit unhappy is because

00:13:20,110 --> 00:13:26,010
nearly all the people who are doing

00:13:22,170 --> 00:13:28,300
commercial map services like Google Maps

00:13:26,010 --> 00:13:31,120
openstreetmap are providing them in this

00:13:28,300 --> 00:13:35,350
other one 3857 or the the Google

00:13:31,120 --> 00:13:40,540
projection and and so I was a little bit

00:13:35,350 --> 00:13:42,100
sad to discover that leaflet which I was

00:13:40,540 --> 00:13:45,970
which is what I was originally trying to

00:13:42,100 --> 00:13:49,990
use can't it doesn't have good support

00:13:45,970 --> 00:13:51,820
for 4326 for the tile layer now a lot of

00:13:49,990 --> 00:13:53,920
the commercial things are available

00:13:51,820 --> 00:13:56,650
either as a tile layer or a WMS but

00:13:53,920 --> 00:13:58,690
cloud made is only as a tile layer so

00:13:56,650 --> 00:14:01,270
you can use openstreetmap because it is

00:13:58,690 --> 00:14:04,240
available as both in leaflet or

00:14:01,270 --> 00:14:05,860
openlayers but then I don't know they

00:14:04,240 --> 00:14:07,500
look very similar do not there's

00:14:05,860 --> 00:14:12,880
practically no difference at that point

00:14:07,500 --> 00:14:14,050
um so the thing that we need to do is to

00:14:12,880 --> 00:14:16,570
have both our base layer and our

00:14:14,050 --> 00:14:19,920
overlays going into our page with the

00:14:16,570 --> 00:14:22,420
same projection and so we could either

00:14:19,920 --> 00:14:25,570
transform our whatever what's coming out

00:14:22,420 --> 00:14:28,300
of Pied app by setting up a cascading

00:14:25,570 --> 00:14:32,620
web map service and just use google maps

00:14:28,300 --> 00:14:34,390
as is or we could use a service that is

00:14:32,620 --> 00:14:37,630
going to transform google maps

00:14:34,390 --> 00:14:40,420
openstreetmap into 4326 there is one

00:14:37,630 --> 00:14:42,340
service called matakara that is in for

00:14:40,420 --> 00:14:44,290
three to six that's kind of like the

00:14:42,340 --> 00:14:47,170
default one with openlayers and its

00:14:44,290 --> 00:14:49,480
really really ugly which is why I wanted

00:14:47,170 --> 00:14:52,660
to use something else but that actually

00:14:49,480 --> 00:14:54,820
turns out to be an easier option I think

00:14:52,660 --> 00:14:57,400
because the things that you could use to

00:14:54,820 --> 00:14:59,320
set up a cascading WMS they're kind of

00:14:57,400 --> 00:15:00,970
others like oh this is getting a bit

00:14:59,320 --> 00:15:04,810
much for something I just want to tinker

00:15:00,970 --> 00:15:07,390
with on my desktop so there is this Maps

00:15:04,810 --> 00:15:09,850
not open jo dot org service that has

00:15:07,390 --> 00:15:11,680
already been set up and if you look at

00:15:09,850 --> 00:15:14,710
that this is where you can use like the

00:15:11,680 --> 00:15:17,040
get capabilities request in the WMS and

00:15:14,710 --> 00:15:19,829
it will actually tell you which

00:15:17,040 --> 00:15:21,930
projections that supports and so it has

00:15:19,829 --> 00:15:23,579
openstreetmap and nasa blue marble and

00:15:21,930 --> 00:15:29,100
they're kind of the nicer ones i think

00:15:23,579 --> 00:15:33,779
of the ones that are available so okay

00:15:29,100 --> 00:15:35,670
um that's each of our pieces now let's

00:15:33,779 --> 00:15:40,410
look at what we actually need to write

00:15:35,670 --> 00:15:42,779
to have this sitting in our in our

00:15:40,410 --> 00:15:48,569
notebook is that reasonably readable for

00:15:42,779 --> 00:15:55,230
everybody yeah um so we're going to use

00:15:48,569 --> 00:15:57,690
a gin Chi template to generate a HTML I

00:15:55,230 --> 00:15:59,880
just use genki because tied up is

00:15:57,690 --> 00:16:02,329
already using it but you can obviously

00:15:59,880 --> 00:16:07,880
use whatever templating language you

00:16:02,329 --> 00:16:11,069
favor and so this this HTML property is

00:16:07,880 --> 00:16:13,920
kind of the the only thing he is like 30

00:16:11,069 --> 00:16:17,269
lines we have this it's really simple so

00:16:13,920 --> 00:16:20,610
we generate our template and then we

00:16:17,269 --> 00:16:23,519
make an iframe that has that HTML

00:16:20,610 --> 00:16:26,550
encoded as base64 and then we return

00:16:23,519 --> 00:16:31,230
that inside the ipython display HTML

00:16:26,550 --> 00:16:35,040
object and the reason we have to base64

00:16:31,230 --> 00:16:37,680
encoded it is because at the moment the

00:16:35,040 --> 00:16:41,060
notebook doesn't really play well with

00:16:37,680 --> 00:16:44,010
all that kind of embedded JavaScript and

00:16:41,060 --> 00:16:47,779
it gets a bit confused so if you have a

00:16:44,010 --> 00:16:51,180
regular if you're referring to another

00:16:47,779 --> 00:16:52,589
like an external URL you don't need to

00:16:51,180 --> 00:16:55,290
do this you can just do source equals

00:16:52,589 --> 00:16:57,449
whatever the address is or if you have

00:16:55,290 --> 00:17:00,120
some really simple HTML that doesn't

00:16:57,449 --> 00:17:03,600
have JavaScript you don't need to base64

00:17:00,120 --> 00:17:05,760
encode it but for something like this we

00:17:03,600 --> 00:17:09,929
do need to encode it otherwise it's not

00:17:05,760 --> 00:17:12,980
going to display properly and so this is

00:17:09,929 --> 00:17:16,079
just what we have in our template

00:17:12,980 --> 00:17:18,720
literally the only interesting thing

00:17:16,079 --> 00:17:21,929
that we're doing is looping through the

00:17:18,720 --> 00:17:25,370
layers so the pie for each layer ID

00:17:21,929 --> 00:17:27,020
layer name layer index in layers and

00:17:25,370 --> 00:17:29,270
they

00:17:27,020 --> 00:17:31,400
that's what's getting passed into this

00:17:29,270 --> 00:17:36,010
object and so we can add as many layers

00:17:31,400 --> 00:17:39,650
as we need by doing that and then it's

00:17:36,010 --> 00:17:42,500
it's super straightforward and this is

00:17:39,650 --> 00:17:46,340
the openlayers example on github I have

00:17:42,500 --> 00:17:48,590
a static example as well with leaflet if

00:17:46,340 --> 00:17:50,810
you're looking to add all these things

00:17:48,590 --> 00:17:57,110
together yourself it's extremely similar

00:17:50,810 --> 00:18:01,280
API so then back to the notebook we just

00:17:57,110 --> 00:18:03,110
need to import that and specify each of

00:18:01,280 --> 00:18:07,190
the things that we need to point it to

00:18:03,110 --> 00:18:10,160
and I actually set it up so the defaults

00:18:07,190 --> 00:18:11,810
are pointing to the the Pied app test

00:18:10,160 --> 00:18:13,880
server so if you don't haven't if you

00:18:11,810 --> 00:18:17,840
haven't set up pied up yourself you can

00:18:13,880 --> 00:18:20,270
still do this and you can see the map

00:18:17,840 --> 00:18:26,060
which just has the coeds sea surface

00:18:20,270 --> 00:18:28,820
temperature on it data on it and so

00:18:26,060 --> 00:18:32,570
there we go we have a data in a map in

00:18:28,820 --> 00:18:34,850
our notebook there's a couple of things

00:18:32,570 --> 00:18:38,180
more that maybe would be nice it would

00:18:34,850 --> 00:18:41,090
be nice to have the color table on the

00:18:38,180 --> 00:18:43,550
side that explains what what rangers the

00:18:41,090 --> 00:18:44,810
colors refer to I think I had that at

00:18:43,550 --> 00:18:50,240
one point I just noticed this morning

00:18:44,810 --> 00:18:51,950
that it had disappeared and the the

00:18:50,240 --> 00:18:53,150
overlays having multiple layers doesn't

00:18:51,950 --> 00:18:55,130
really work well like they don't have

00:18:53,150 --> 00:18:57,110
any Alpha they just blot each other out

00:18:55,130 --> 00:18:58,940
so you can switch between the but you

00:18:57,110 --> 00:19:01,730
can't really see more than one at a time

00:18:58,940 --> 00:19:03,830
so maybe there's a way to specify that

00:19:01,730 --> 00:19:05,600
too to improve that a little bit but

00:19:03,830 --> 00:19:09,110
basically we have our data in a map

00:19:05,600 --> 00:19:10,970
which is what we wanted so I looked at a

00:19:09,110 --> 00:19:14,240
couple of other options to see if there

00:19:10,970 --> 00:19:16,490
was other ways to do this I had a bit of

00:19:14,240 --> 00:19:17,630
a look at geo Django because I thought

00:19:16,490 --> 00:19:19,150
there would be a lot of Django people

00:19:17,630 --> 00:19:22,900
here and maybe someone would mention it

00:19:19,150 --> 00:19:26,480
but it seemed to me that it's not quite

00:19:22,900 --> 00:19:28,940
concerned with gridded data and I

00:19:26,480 --> 00:19:31,010
couldn't really find many results that

00:19:28,940 --> 00:19:36,620
suggested it would be worth looking at

00:19:31,010 --> 00:19:38,510
so that's probably not the way to go now

00:19:36,620 --> 00:19:40,160
there is work there is some work already

00:19:38,510 --> 00:19:40,640
done I'm not sure if it's released or

00:19:40,160 --> 00:19:44,270
it's coming

00:19:40,640 --> 00:19:48,380
very soon to have a html5 back end

00:19:44,270 --> 00:19:51,500
format plot loop and this is going to be

00:19:48,380 --> 00:19:54,230
really nice because you can you would be

00:19:51,500 --> 00:19:56,810
able to interact with this graph in a

00:19:54,230 --> 00:19:58,670
way that is very similar to how you can

00:19:56,810 --> 00:20:01,370
interact with maps in turn in terms of

00:19:58,670 --> 00:20:04,700
zooming and panning so we have pretty

00:20:01,370 --> 00:20:07,130
much all the the power with a it's going

00:20:04,700 --> 00:20:10,400
to be called web egg back end that we

00:20:07,130 --> 00:20:15,170
would have with the QT egg or TK egg

00:20:10,400 --> 00:20:19,340
back end so this I'm not sure if this is

00:20:15,170 --> 00:20:21,290
going to mean that um you know you don't

00:20:19,340 --> 00:20:24,170
need to embed HTML in the way that I

00:20:21,290 --> 00:20:27,640
have although maybe that's still a nice

00:20:24,170 --> 00:20:29,660
thing to do because using a you know a

00:20:27,640 --> 00:20:34,040
JavaScript library that is really

00:20:29,660 --> 00:20:35,870
designed for um map layers is still

00:20:34,040 --> 00:20:39,020
going to give you benefits over this

00:20:35,870 --> 00:20:44,090
thing which is not by default aware that

00:20:39,020 --> 00:20:45,950
it's displaying geographic data um so

00:20:44,090 --> 00:20:50,180
this whole project kind of came up

00:20:45,950 --> 00:20:55,160
because my workmate Nathan who was also

00:20:50,180 --> 00:20:59,300
speaking yesterday and basically rolled

00:20:55,160 --> 00:21:03,830
his own to display gridded data in a map

00:20:59,300 --> 00:21:07,190
in the notebook and I was doing his own

00:21:03,830 --> 00:21:08,840
tile rendering using pi resample and I

00:21:07,190 --> 00:21:11,090
was looking at it I was thinking surely

00:21:08,840 --> 00:21:13,550
other people have have done these things

00:21:11,090 --> 00:21:15,470
already and truly with this is a bit of

00:21:13,550 --> 00:21:17,360
wheel reinventing happening here and we

00:21:15,470 --> 00:21:21,250
can do this just by plugging any

00:21:17,360 --> 00:21:23,720
existing things and it turns out we can

00:21:21,250 --> 00:21:26,180
although there's definitely you know a

00:21:23,720 --> 00:21:28,640
place for reinventing the wheel so if

00:21:26,180 --> 00:21:31,160
you're interested in looking at Python

00:21:28,640 --> 00:21:34,130
code to essentially build a web map

00:21:31,160 --> 00:21:38,570
service take a look at leaf is on github

00:21:34,130 --> 00:21:40,580
and I'm sure he would accept any pull

00:21:38,570 --> 00:21:41,870
requests there as well and thanks to

00:21:40,580 --> 00:21:45,160
some other people who helped me

00:21:41,870 --> 00:21:48,500
especially with the mapping things and

00:21:45,160 --> 00:21:50,240
that's all I have time that's all I have

00:21:48,500 --> 00:21:52,720
to say so I think we have lots of time

00:21:50,240 --> 00:21:52,720
for questions

00:22:06,870 --> 00:22:11,440
okay so thanks very much right a

00:22:09,700 --> 00:22:13,840
beginning you mentioned that there's the

00:22:11,440 --> 00:22:15,940
roadmap for I python has plans to add

00:22:13,840 --> 00:22:18,640
options other than HTML there's like

00:22:15,940 --> 00:22:19,960
king and other image format outputs was

00:22:18,640 --> 00:22:22,180
that did I interpret that correctly

00:22:19,960 --> 00:22:23,530
actually those things are already there

00:22:22,180 --> 00:22:25,090
but they're planning to add better

00:22:23,530 --> 00:22:26,350
support for JavaScript was my

00:22:25,090 --> 00:22:28,300
understanding i'm sorry so as a

00:22:26,350 --> 00:22:30,670
javascript is the addition right okay i

00:22:28,300 --> 00:22:32,710
just i know you can't speak for the ipod

00:22:30,670 --> 00:22:36,580
son team or anything but based upon your

00:22:32,710 --> 00:22:38,020
history of using notebook when they say

00:22:36,580 --> 00:22:41,170
on their roadmap what sort of time frame

00:22:38,020 --> 00:22:43,090
are we talking about i would expect a

00:22:41,170 --> 00:22:45,070
seed in the next year because they got

00:22:43,090 --> 00:22:47,260
like a bunch of money and I've seen a

00:22:45,070 --> 00:22:51,960
lot of success yeah things are happening

00:22:47,260 --> 00:22:54,250
pretty quickly and even when I was

00:22:51,960 --> 00:22:55,630
debugging there so I was complaining to

00:22:54,250 --> 00:22:58,660
one of them that the iframe thing wasn't

00:22:55,630 --> 00:23:01,390
working properly and they said oh you

00:22:58,660 --> 00:23:02,890
should be using ipython don't display

00:23:01,390 --> 00:23:05,110
dot iframe and I was like that doesn't

00:23:02,890 --> 00:23:07,870
exist and here's like oh maybe it's not

00:23:05,110 --> 00:23:09,850
released yet so I suspect that there's

00:23:07,870 --> 00:23:13,780
going to be a lot better things in the

00:23:09,850 --> 00:23:16,540
toolkit to come and I wouldn't I think

00:23:13,780 --> 00:23:18,700
nathan is already running point 14 with

00:23:16,540 --> 00:23:22,510
the notebook like a development version

00:23:18,700 --> 00:23:25,720
so I don't know when but there is a if

00:23:22,510 --> 00:23:27,640
you yeah google for ipython roadmap on

00:23:25,720 --> 00:23:29,110
github there's a document and they took

00:23:27,640 --> 00:23:32,400
there's a lot of detail about the plans

00:23:29,110 --> 00:23:36,490
and what they're hoping to do job Thanks

00:23:32,400 --> 00:23:39,670
hi Brianna Frank the i'm looking at

00:23:36,490 --> 00:23:42,429
safari all tiger server have you come

00:23:39,670 --> 00:23:47,500
across that it's a netcdf server what is

00:23:42,429 --> 00:23:49,750
it called tiger t AI GA ok no no it's

00:23:47,500 --> 00:23:52,000
not a product out of NASA it's often

00:23:49,750 --> 00:23:55,450
written in Python and essentially gives

00:23:52,000 --> 00:23:58,120
you like a file system over units EDF

00:23:55,450 --> 00:24:00,400
file system and you can again subset it

00:23:58,120 --> 00:24:04,980
as you pull the stuff out I probably

00:24:00,400 --> 00:24:04,980
worth a quick look sure make sure

00:24:12,990 --> 00:24:17,370
is I frame the preferred approach in

00:24:15,330 --> 00:24:19,740
order to get a JavaScript chart are

00:24:17,370 --> 00:24:21,780
could you do something like transform

00:24:19,740 --> 00:24:23,040
the Python listen to JavaScript place

00:24:21,780 --> 00:24:26,160
and then get something on the page right

00:24:23,040 --> 00:24:28,260
away is that approach light at all sorry

00:24:26,160 --> 00:24:30,570
can you say again in order to get an

00:24:28,260 --> 00:24:34,020
external chart like dt chart or a leaf

00:24:30,570 --> 00:24:35,670
is map is iframe a preferred approach or

00:24:34,020 --> 00:24:38,160
could he use something like passing the

00:24:35,670 --> 00:24:39,990
list in Python into a JavaScript list

00:24:38,160 --> 00:24:46,950
and then asking the browser to render

00:24:39,990 --> 00:24:48,870
that in the phone for breath ah I'm not

00:24:46,950 --> 00:24:50,550
really sure not sure I totally

00:24:48,870 --> 00:24:57,030
understand wasting so maybe we can talk

00:24:50,550 --> 00:24:59,730
about it after hi thinks the talk how is

00:24:57,030 --> 00:25:01,740
easier to kind of go from your data sets

00:24:59,730 --> 00:25:04,320
in a different format to put them into a

00:25:01,740 --> 00:25:08,460
netcdf or some kind of applicable data

00:25:04,320 --> 00:25:13,800
set to use with the DAT tools okay I to

00:25:08,460 --> 00:25:19,290
convert your data well pineapple II has

00:25:13,800 --> 00:25:22,710
a netcdf response plug-in so you could

00:25:19,290 --> 00:25:26,340
possibly use product to kind of convert

00:25:22,710 --> 00:25:30,030
it on the fly which is a little bit

00:25:26,340 --> 00:25:33,059
roundabout way of doing it I think the

00:25:30,030 --> 00:25:34,800
thing with pi doubt like it depends what

00:25:33,059 --> 00:25:37,020
your format is but because it's

00:25:34,800 --> 00:25:38,840
supporting hdf5 and it's like it's

00:25:37,020 --> 00:25:41,400
supposed to be a little bit agnostic to

00:25:38,840 --> 00:25:42,600
whatever your data format is so I would

00:25:41,400 --> 00:25:44,070
look at is there a handler for it

00:25:42,600 --> 00:25:45,360
already like do you actually need to

00:25:44,070 --> 00:25:48,600
convert it maybe you don't need to

00:25:45,360 --> 00:25:52,500
convert it and if you do need to convert

00:25:48,600 --> 00:25:54,600
it yeah you'd probably be best to help

00:25:52,500 --> 00:25:56,370
to edge schofield I think he would be

00:25:54,600 --> 00:26:02,070
the guy who knows the most about which

00:25:56,370 --> 00:26:03,840
library to use thanks Briana do you have

00:26:02,070 --> 00:26:07,190
one of these sitting on your laptop at

00:26:03,840 --> 00:26:07,190
the moment you can chose yes I do

00:26:12,820 --> 00:26:21,519
so here i have my ipods and notebooks in

00:26:18,610 --> 00:26:23,559
the bottom one are running and my pile

00:26:21,519 --> 00:26:32,730
app server in the top window is running

00:26:23,559 --> 00:26:36,580
and then this is my my pineapple over

00:26:32,730 --> 00:26:38,980
which I've just yeah have the same data

00:26:36,580 --> 00:26:42,730
on that i showed it before and so then

00:26:38,980 --> 00:26:46,360
with my notebooks i've got three

00:26:42,730 --> 00:26:48,600
different ones so if we look at reading

00:26:46,360 --> 00:26:48,600
the data

00:26:54,630 --> 00:26:58,910
come on page down maybe

00:27:00,020 --> 00:27:06,230
yeah so this is what I was talking about

00:27:02,470 --> 00:27:08,180
using notebooks to explore api's so if

00:27:06,230 --> 00:27:11,150
you just do the default I am show data

00:27:08,180 --> 00:27:13,070
you get this thing in you I can kind of

00:27:11,150 --> 00:27:16,460
see where Tasmania is there but that's

00:27:13,070 --> 00:27:17,930
not really that useful to me and then

00:27:16,460 --> 00:27:20,000
you kind of look at the options and you

00:27:17,930 --> 00:27:21,560
okay alright can set origin lower and

00:27:20,000 --> 00:27:24,950
then it's like at least up the right way

00:27:21,560 --> 00:27:28,300
and then okay i can set V mean it's like

00:27:24,950 --> 00:27:30,710
the values mean values max because the

00:27:28,300 --> 00:27:33,110
unfortunately this data set doesn't have

00:27:30,710 --> 00:27:35,360
like a proper nan value that's

00:27:33,110 --> 00:27:37,630
representing no data which is what the

00:27:35,360 --> 00:27:40,640
blue is it's got like you know minus

00:27:37,630 --> 00:27:42,830
thirty two thousand whatever that number

00:27:40,640 --> 00:27:44,030
is that's like where I think it's where

00:27:42,830 --> 00:27:47,540
you know the number where integers are

00:27:44,030 --> 00:27:49,430
all over or 32-bit inches roll over so

00:27:47,540 --> 00:27:51,940
we said V minus V Max and then we get a

00:27:49,430 --> 00:27:55,250
much more sensible range of colors and

00:27:51,940 --> 00:27:57,800
then by setting the extent we're kind of

00:27:55,250 --> 00:28:00,110
telling it about what what is the

00:27:57,800 --> 00:28:02,030
distance between each of our grid points

00:28:00,110 --> 00:28:03,770
so they may not be square which is why

00:28:02,030 --> 00:28:05,330
our data originally looks a bit squished

00:28:03,770 --> 00:28:08,240
and then when we set the extent it

00:28:05,330 --> 00:28:10,520
actually looks a bit more sensible and

00:28:08,240 --> 00:28:15,620
then we can do this zoom in but we can't

00:28:10,520 --> 00:28:20,540
really yeah interact with it apart from

00:28:15,620 --> 00:28:24,650
that and then with our embedded ones

00:28:20,540 --> 00:28:29,210
that's the simple one so like another

00:28:24,650 --> 00:28:32,150
option aside from generating the HTML

00:28:29,210 --> 00:28:36,440
and keeping it in just essentially in

00:28:32,150 --> 00:28:37,790
memory if you write files out under the

00:28:36,440 --> 00:28:39,980
same directory where your ipython

00:28:37,790 --> 00:28:41,780
notebooks were started the ipython

00:28:39,980 --> 00:28:49,660
notebook will actually serve them up

00:28:41,780 --> 00:28:52,010
under / files so if we open a new tab

00:28:49,660 --> 00:28:54,110
which is something to keep in mind like

00:28:52,010 --> 00:28:56,090
don't start your ipython notebooks under

00:28:54,110 --> 00:28:59,290
like slash home because then everything

00:28:56,090 --> 00:29:02,270
in your home directory is kind of

00:28:59,290 --> 00:29:04,490
available so well we can't just browse

00:29:02,270 --> 00:29:08,960
around but if we have if we know that

00:29:04,490 --> 00:29:11,360
nah ok I think I don't have any of that

00:29:08,960 --> 00:29:13,130
directory but if you save you can just

00:29:11,360 --> 00:29:15,320
save your file out actually in

00:29:13,130 --> 00:29:17,840
same directory and then you have this /

00:29:15,320 --> 00:29:19,880
files address and then you don't need to

00:29:17,840 --> 00:29:21,890
do the base64 encoding because you can

00:29:19,880 --> 00:29:24,710
just refer to it as a regular source

00:29:21,890 --> 00:29:29,750
directory and so this is the default one

00:29:24,710 --> 00:29:36,890
if this is the coeds data from the test

00:29:29,750 --> 00:29:38,870
product server and yeah it's really not

00:29:36,890 --> 00:29:47,650
as detailed as the other data said i was

00:29:38,870 --> 00:29:47,650
using so I liked it a bit more yeah so

00:29:49,390 --> 00:29:54,560
that's not going all the way but it is

00:29:52,580 --> 00:29:58,760
going quite a bit of the way to have

00:29:54,560 --> 00:30:01,460
nice nicer on display as are they both

00:29:58,760 --> 00:30:05,030
mean Tim yeah so you can set up you can

00:30:01,460 --> 00:30:08,830
add as many files as you need and I also

00:30:05,030 --> 00:30:12,410
found out that pineap-- has a handler

00:30:08,830 --> 00:30:16,010
called NCA which is netcdf aggregation

00:30:12,410 --> 00:30:17,570
so for example for this min temp and max

00:30:16,010 --> 00:30:19,430
temp I've actually got two separate

00:30:17,570 --> 00:30:22,060
netcdf files but it's kind of annoying

00:30:19,430 --> 00:30:24,830
I'd like to because they have the same

00:30:22,060 --> 00:30:27,260
you know lats and Long's so really I

00:30:24,830 --> 00:30:30,020
would like them to just be layers in in

00:30:27,260 --> 00:30:32,780
a single file so it has this if you

00:30:30,020 --> 00:30:34,790
install pie dog handlers NCAA it can

00:30:32,780 --> 00:30:37,520
actually you can just define like a and

00:30:34,790 --> 00:30:41,780
a dot any file that says how to

00:30:37,520 --> 00:30:44,450
aggregate them and then anybody can hit

00:30:41,780 --> 00:30:46,130
hit that address and it will act as if

00:30:44,450 --> 00:30:49,370
they were in a single file essentially

00:30:46,130 --> 00:30:50,780
so I think um yeah the pineapple so it

00:30:49,370 --> 00:30:53,660
was very helpful and I think he's

00:30:50,780 --> 00:30:55,580
actually intending to split pied up into

00:30:53,660 --> 00:30:57,770
two separate libraries one just the

00:30:55,580 --> 00:30:59,450
client and one just the server and he's

00:30:57,770 --> 00:31:01,940
going to rewrite the server as a really

00:30:59,450 --> 00:31:04,340
simple flask up and I think that'll make

00:31:01,940 --> 00:31:06,350
it really easy to extend as well when we

00:31:04,340 --> 00:31:09,580
see that and I think that's definitely

00:31:06,350 --> 00:31:13,450
my time so thank you

00:31:09,580 --> 00:31:13,450

YouTube URL: https://www.youtube.com/watch?v=YJqBGi48RAM


