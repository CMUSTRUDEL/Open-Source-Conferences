Title: Web testing for Ninjas with Splinter
Publication date: 2013-07-11
Playlist: Pycon Australia 2013
Description: 
	Dylan Lacey
http://2013.pycon-au.org/schedule/30076/view_talk
Everyone knows that Testing is Good.  But what about testing your web applications, javascript and all?  Selenium is good but can be verbose and clunky.  Kill off test bloat and make your tests elegant and deadly, with Splinter.

Splinter is a DSL for writing web app integration tests.  It wraps Selenium Webdriver or Zope Testdriver, supports Javascript and AJAX, supports css and xpath selectors and provides a clean, easily read API
Captions: 
	00:00:02,720 --> 00:00:10,440
welcome back our next presenter is from

00:00:07,200 --> 00:00:12,360
the foreign land of Ruby he's a ruby

00:00:10,440 --> 00:00:15,690
developer by trade he's working at

00:00:12,360 --> 00:00:17,520
source labs as their rub evangelist he

00:00:15,690 --> 00:00:19,529
gets to help other developers make

00:00:17,520 --> 00:00:21,750
things he's going to talk to us about

00:00:19,529 --> 00:00:29,939
web testing for ninjas please join me in

00:00:21,750 --> 00:00:34,469
welcoming Dylan Lacey thanks everyone so

00:00:29,939 --> 00:00:36,510
I have a little disclaimer first up this

00:00:34,469 --> 00:00:38,670
this is a Python talk everything in it

00:00:36,510 --> 00:00:43,170
is Python but I will be mentioning Ruby

00:00:38,670 --> 00:00:44,850
just a little bit so I'm kind of going

00:00:43,170 --> 00:00:47,879
to flip flop between some some docker

00:00:44,850 --> 00:00:49,890
some testing philosophy and some general

00:00:47,879 --> 00:00:51,239
pro tips so if you are looking for just

00:00:49,890 --> 00:00:52,820
one of those things maybe you want to

00:00:51,239 --> 00:00:55,410
just come back and read the slides later

00:00:52,820 --> 00:00:57,120
but so why am I here why is he rubios

00:00:55,410 --> 00:00:57,899
coming to talk to you about testing I

00:00:57,120 --> 00:01:00,329
mean that doesn't make so much sense

00:00:57,899 --> 00:01:03,210
right so I I am the developer evangelist

00:01:00,329 --> 00:01:05,820
of sauce labs which is kind of a roll

00:01:03,210 --> 00:01:07,530
it's a bit weird we sell a developer

00:01:05,820 --> 00:01:09,990
product so rather than having suits and

00:01:07,530 --> 00:01:11,630
marketing people we have developers who

00:01:09,990 --> 00:01:16,259
helped other developers use our stuff

00:01:11,630 --> 00:01:18,119
and so I help people get going I deal

00:01:16,259 --> 00:01:20,939
with our integration I do our support i

00:01:18,119 --> 00:01:23,729
do screencasts and sauce labs ourselves

00:01:20,939 --> 00:01:26,070
are a cloud-based product similar to

00:01:23,729 --> 00:01:30,329
Heroku but we're Haruka does application

00:01:26,070 --> 00:01:34,200
platforms we do testing platforms so we

00:01:30,329 --> 00:01:37,470
have browser OS vem combinations we have

00:01:34,200 --> 00:01:38,850
about 150 of them and what we do with

00:01:37,470 --> 00:01:41,220
those is we give them to our users so

00:01:38,850 --> 00:01:43,350
they can test things astute people will

00:01:41,220 --> 00:01:47,970
have noticed that that's the same as the

00:01:43,350 --> 00:01:49,890
original number of Pokemon so I talked

00:01:47,970 --> 00:01:52,649
to everybody at work where a Python shop

00:01:49,890 --> 00:01:54,240
and I asked them about testing because

00:01:52,649 --> 00:01:55,860
we do a lot of testing surprisingly

00:01:54,240 --> 00:01:57,299
enough we do all the browsers we do

00:01:55,860 --> 00:01:58,500
offer all the operating systems we all

00:01:57,299 --> 00:01:59,759
do all the versions and all the

00:01:58,500 --> 00:02:01,979
languages and all the tools and all the

00:01:59,759 --> 00:02:05,430
frameworks for sufficiently low values

00:02:01,979 --> 00:02:07,560
of all and I am interested in developing

00:02:05,430 --> 00:02:09,539
I'll of developing I love testing and I

00:02:07,560 --> 00:02:12,510
talked to people at work about different

00:02:09,539 --> 00:02:15,810
tools and so ruby has a thing for

00:02:12,510 --> 00:02:17,790
testing we may actually have a testing

00:02:15,810 --> 00:02:21,180
problem but it's not a problem we can

00:02:17,790 --> 00:02:22,410
stop anytime we want we love it and

00:02:21,180 --> 00:02:24,330
there's this tool in really cool

00:02:22,410 --> 00:02:25,620
capybara and so I talk to people at work

00:02:24,330 --> 00:02:27,780
and said hey there's this tool called

00:02:25,620 --> 00:02:30,420
capybara here's what it does is there a

00:02:27,780 --> 00:02:31,950
similar tool for Python and I got what

00:02:30,420 --> 00:02:33,090
seems to be a very pythonic response

00:02:31,950 --> 00:02:35,430
which is all there's a whole lot of

00:02:33,090 --> 00:02:36,510
things that do that okay what do they

00:02:35,430 --> 00:02:40,110
all like I don't know I've never used

00:02:36,510 --> 00:02:42,780
them so I investigate a 1 which is

00:02:40,110 --> 00:02:45,420
splinter splinter is also a giant rat a

00:02:42,780 --> 00:02:48,750
capybara is this huge kind of hamster

00:02:45,420 --> 00:02:50,069
fingers ridiculously big and splinter of

00:02:48,750 --> 00:02:52,349
course is the giant rat from Teenage

00:02:50,069 --> 00:02:54,810
Mutant Ninja Turtles now splinter is

00:02:52,349 --> 00:02:57,930
awesome splinter is a DSL for doing

00:02:54,810 --> 00:02:59,459
acceptance tests in browsers so it can

00:02:57,930 --> 00:03:02,670
sit on top of a whole bunch of different

00:02:59,459 --> 00:03:04,590
browser automation tools and run through

00:03:02,670 --> 00:03:06,390
a browser in a language that reads

00:03:04,590 --> 00:03:09,030
better than most of the internal tools

00:03:06,390 --> 00:03:11,190
languages do it's relatively tool

00:03:09,030 --> 00:03:12,890
agnostic it doesn't have a huge number

00:03:11,190 --> 00:03:15,269
of things that supports but it supports

00:03:12,890 --> 00:03:16,980
some integrations that are fundamentally

00:03:15,269 --> 00:03:19,260
different so what you can do is you can

00:03:16,980 --> 00:03:20,970
switch platforms underneath splinter

00:03:19,260 --> 00:03:22,769
without changing any of your tests you

00:03:20,970 --> 00:03:25,379
change your conflict or that's all you

00:03:22,769 --> 00:03:27,659
need to do it doesn't support everything

00:03:25,379 --> 00:03:29,760
obviously but you could probably write

00:03:27,659 --> 00:03:31,980
adapters for most of your favorite tools

00:03:29,760 --> 00:03:35,269
if they don't already exist it currently

00:03:31,980 --> 00:03:38,280
works with chrome firefox phantom j/s

00:03:35,269 --> 00:03:40,950
zope test browser and selenium remote

00:03:38,280 --> 00:03:43,200
browsers selenium is a fairly common

00:03:40,950 --> 00:03:45,480
browser automation tool that supports

00:03:43,200 --> 00:03:48,360
most of the major browsers zouk test is

00:03:45,480 --> 00:03:52,019
soak test phantom j/s is a headless

00:03:48,360 --> 00:03:53,370
WebKit javascript-based automation

00:03:52,019 --> 00:03:56,819
framework so you can run your browser

00:03:53,370 --> 00:03:58,290
and get a DOM and JavaScript engine

00:03:56,819 --> 00:04:02,220
without having to actually take up a

00:03:58,290 --> 00:04:03,720
monitor somewhere so when I tell people

00:04:02,220 --> 00:04:06,120
about this sometimes I get funny looks

00:04:03,720 --> 00:04:08,040
because I said it's an abstraction

00:04:06,120 --> 00:04:09,120
because it is people have problems with

00:04:08,040 --> 00:04:11,819
abstractions that people think

00:04:09,120 --> 00:04:13,680
instructions are evil because the

00:04:11,819 --> 00:04:15,239
concept of an abstraction comes paired

00:04:13,680 --> 00:04:16,859
with the concept of a leaky abstraction

00:04:15,239 --> 00:04:19,019
which is an abstraction that has a bit

00:04:16,859 --> 00:04:20,480
that's missing that either causes you

00:04:19,019 --> 00:04:23,490
problems or

00:04:20,480 --> 00:04:27,180
doesn't work properly or gets bigger

00:04:23,490 --> 00:04:29,130
over time and this is true this is a

00:04:27,180 --> 00:04:30,419
very real problem with abstractions but

00:04:29,130 --> 00:04:32,520
a lot of abstractions don't actually

00:04:30,419 --> 00:04:34,080
have this problem if they're leaky and

00:04:32,520 --> 00:04:35,550
you know where the leaks are it doesn't

00:04:34,080 --> 00:04:37,169
matter as long as you can avoid them if

00:04:35,550 --> 00:04:39,090
they're not leaky it doesn't matter at

00:04:37,169 --> 00:04:40,050
all and the reason the distractions

00:04:39,090 --> 00:04:41,100
shouldn't scare you whenever you

00:04:40,050 --> 00:04:42,449
encounter them is because all our

00:04:41,100 --> 00:04:44,370
programming languages are abstractions

00:04:42,449 --> 00:04:45,930
python is an abstraction of C which is

00:04:44,370 --> 00:04:48,060
an abstraction of machine code which is

00:04:45,930 --> 00:04:49,290
an extraction of no weight at a section

00:04:48,060 --> 00:04:50,580
of assembler which is an abstraction of

00:04:49,290 --> 00:04:53,010
machine code which is an abstraction of

00:04:50,580 --> 00:04:55,110
bits everything we do is built on

00:04:53,010 --> 00:04:57,600
abstractions don't fear them so

00:04:55,110 --> 00:05:00,270
acceptance testing is about running your

00:04:57,600 --> 00:05:02,250
tests like a user does unit testing you

00:05:00,270 --> 00:05:03,900
take a module or a method and you just

00:05:02,250 --> 00:05:05,070
make sure it works properly integration

00:05:03,900 --> 00:05:06,600
tests you make sure the bits of your

00:05:05,070 --> 00:05:09,000
framework crammed together and work

00:05:06,600 --> 00:05:11,460
properly acceptance tests should always

00:05:09,000 --> 00:05:13,440
run like a user does because if they

00:05:11,460 --> 00:05:15,090
don't you can't really guarantee that

00:05:13,440 --> 00:05:17,010
what you're doing is acceptable there

00:05:15,090 --> 00:05:18,870
there the bit that takes what the user

00:05:17,010 --> 00:05:22,320
said to you they want and make sure that

00:05:18,870 --> 00:05:25,440
that's what they're getting coding is

00:05:22,320 --> 00:05:30,260
fun i love coding i assume most of you

00:05:25,440 --> 00:05:32,340
do if you don't are you here but

00:05:30,260 --> 00:05:33,330
ultimately it's a side effect what

00:05:32,340 --> 00:05:34,500
you're doing when you're coding is

00:05:33,330 --> 00:05:36,479
you're trying to make sure your user is

00:05:34,500 --> 00:05:37,710
happy if your user is happy it's great

00:05:36,479 --> 00:05:39,300
that you managed to code but you didn't

00:05:37,710 --> 00:05:40,680
give them what they wanted you haven't

00:05:39,300 --> 00:05:44,010
achieved your goal you've just had a bit

00:05:40,680 --> 00:05:46,229
of fun in your editor so acceptance

00:05:44,010 --> 00:05:47,820
testing is really important I set up

00:05:46,229 --> 00:05:49,320
there it's just as important I don't

00:05:47,820 --> 00:05:51,360
think unit testing is anywhere near as

00:05:49,320 --> 00:05:53,310
important as acceptance testing

00:05:51,360 --> 00:05:54,570
acceptance testing is the most valuable

00:05:53,310 --> 00:05:56,099
thing you can do to make sure you

00:05:54,570 --> 00:05:59,280
deliver software that delights your

00:05:56,099 --> 00:06:00,780
users and it's where we don't put our

00:05:59,280 --> 00:06:02,070
effort we don't start at acceptance

00:06:00,780 --> 00:06:04,710
testing it's usually what you add when

00:06:02,070 --> 00:06:05,940
you have a big team or when you don't

00:06:04,710 --> 00:06:07,470
have any other test to write or when

00:06:05,940 --> 00:06:11,880
you're constantly breaking functionality

00:06:07,470 --> 00:06:13,740
over and over again so that's what makes

00:06:11,880 --> 00:06:15,539
Splinter a great tool because it sits on

00:06:13,740 --> 00:06:17,130
top of things like selenium this is one

00:06:15,539 --> 00:06:19,680
of the engineers that used to work at

00:06:17,130 --> 00:06:20,820
source labs selenium test pages it tests

00:06:19,680 --> 00:06:22,380
them by loading them and then doing

00:06:20,820 --> 00:06:24,590
stuff on them like it's a person isn't

00:06:22,380 --> 00:06:27,870
that cute selenium thinks its people

00:06:24,590 --> 00:06:29,789
people are your users it doesn't matter

00:06:27,870 --> 00:06:31,890
if you if your PI unit framework says

00:06:29,789 --> 00:06:33,480
all your unit tests pass it's not going

00:06:31,890 --> 00:06:35,580
to use your software it doesn't

00:06:33,480 --> 00:06:38,820
for can't login it doesn't care if it

00:06:35,580 --> 00:06:40,770
doesn't look pretty your users do so

00:06:38,820 --> 00:06:42,090
that's my little rant on why you should

00:06:40,770 --> 00:06:43,500
acceptance test if you want to come and

00:06:42,090 --> 00:06:44,670
tell me I'm wrong I'm happy to argue

00:06:43,500 --> 00:06:46,710
with you enduring questions or

00:06:44,670 --> 00:06:47,970
afterwards so let's get to the actual

00:06:46,710 --> 00:06:52,200
meat of the presentation which is

00:06:47,970 --> 00:06:54,270
splinter splinter only works with those

00:06:52,200 --> 00:06:56,910
versions of Python at the moment but

00:06:54,270 --> 00:06:58,260
it's pretty easy to to install I didn't

00:06:56,910 --> 00:07:01,200
have to do anything except pip install

00:06:58,260 --> 00:07:03,360
splinter all of the docks talk about the

00:07:01,200 --> 00:07:05,310
development requirements and the

00:07:03,360 --> 00:07:06,780
installation requirements and all of

00:07:05,310 --> 00:07:08,490
those are encapsulated by running pip

00:07:06,780 --> 00:07:09,690
install splinter I think they were just

00:07:08,490 --> 00:07:11,790
being a little bit thorough when they

00:07:09,690 --> 00:07:14,670
were writing things and using Splinter

00:07:11,790 --> 00:07:17,100
is just as easy create a browser and

00:07:14,670 --> 00:07:18,450
tell it to do something the great thing

00:07:17,100 --> 00:07:19,890
about splint to the reason I love it is

00:07:18,450 --> 00:07:21,630
that all of the commands you give it

00:07:19,890 --> 00:07:25,140
read like you were telling somebody what

00:07:21,630 --> 00:07:27,060
to do visit that URL in selenium you'd

00:07:25,140 --> 00:07:29,850
have to create a selenium object and go

00:07:27,060 --> 00:07:32,910
selenium navigate underscore two

00:07:29,850 --> 00:07:34,200
brackets address close brackets weight

00:07:32,910 --> 00:07:36,270
and then you would have to make sure it

00:07:34,200 --> 00:07:37,500
actually got there because if it didn't

00:07:36,270 --> 00:07:42,150
it might not throw an exception it might

00:07:37,500 --> 00:07:43,860
just sort of give up so navigation

00:07:42,150 --> 00:07:44,790
navigation is a primary part of the the

00:07:43,860 --> 00:07:47,100
things you're going to do when your

00:07:44,790 --> 00:07:49,710
acceptance testing it's really simple go

00:07:47,100 --> 00:07:50,820
forward go back reload this all of the

00:07:49,710 --> 00:07:52,910
demos are going to look like this

00:07:50,820 --> 00:07:55,860
because splinter is really easy to use

00:07:52,910 --> 00:07:57,570
lynx lynx is where it starts to get

00:07:55,860 --> 00:07:59,760
slightly more complex because with links

00:07:57,570 --> 00:08:02,790
you can do things that aren't completely

00:07:59,760 --> 00:08:05,760
specified which I always recommend doing

00:08:02,790 --> 00:08:07,890
use the least specific version of a

00:08:05,760 --> 00:08:09,600
command you can possibly use because

00:08:07,890 --> 00:08:11,820
that isolates your tests from breaking

00:08:09,600 --> 00:08:13,860
users will change the terms they use to

00:08:11,820 --> 00:08:15,180
refer to things all the time they'll

00:08:13,860 --> 00:08:16,530
make them less specific they'll make

00:08:15,180 --> 00:08:18,180
them longer your marketing department

00:08:16,530 --> 00:08:20,580
will ask you to change them if you can

00:08:18,180 --> 00:08:22,530
hook on a keyword that's important like

00:08:20,580 --> 00:08:24,300
pizza if you know whenever you click on

00:08:22,530 --> 00:08:27,230
a link it's going to be about pizza and

00:08:24,300 --> 00:08:30,110
you just use that your test will be more

00:08:27,230 --> 00:08:34,490
robust it won't break quite as often

00:08:30,110 --> 00:08:36,900
visiting versus links is a paradigm that

00:08:34,490 --> 00:08:38,610
you get with acceptance testing visiting

00:08:36,900 --> 00:08:40,229
is telling the browser to go to a

00:08:38,610 --> 00:08:42,330
certain place going to the URL bar

00:08:40,229 --> 00:08:44,010
typing in url hitting enter linking is

00:08:42,330 --> 00:08:45,779
actually clicking on a link so

00:08:44,010 --> 00:08:47,249
JavaScript events don't happen

00:08:45,779 --> 00:08:48,480
javascript events that are linked

00:08:47,249 --> 00:08:50,699
triggered don't happen by clicking on

00:08:48,480 --> 00:08:52,439
the links on by using going directly to

00:08:50,699 --> 00:08:54,810
urls they only happen by clicking on the

00:08:52,439 --> 00:08:56,430
links so once you've gotten somewhere

00:08:54,810 --> 00:08:58,199
you can check its attributes you can

00:08:56,430 --> 00:09:00,240
check the title you can affect the URL

00:08:58,199 --> 00:09:02,399
you can make sure it was a success for

00:09:00,240 --> 00:09:04,290
ponts which means the response was 200

00:09:02,399 --> 00:09:06,300
or that it just was a response at all

00:09:04,290 --> 00:09:08,160
rather than a server error and you could

00:09:06,300 --> 00:09:09,779
get the code back most of those aren't

00:09:08,160 --> 00:09:11,189
that useful because splinter will also

00:09:09,779 --> 00:09:14,249
throw exceptions if it can't do those

00:09:11,189 --> 00:09:16,050
things but here's your first pro tip

00:09:14,249 --> 00:09:18,839
speaking of what you can check don't

00:09:16,050 --> 00:09:21,029
check HTML ever there is no point

00:09:18,839 --> 00:09:22,949
checking the HTML of a file in an

00:09:21,029 --> 00:09:24,629
acceptance test because it's irrelevant

00:09:22,949 --> 00:09:26,910
what it looks like under the hood is not

00:09:24,629 --> 00:09:28,620
part of your acceptance test what it

00:09:26,910 --> 00:09:30,269
looks like once it's rendered is the

00:09:28,620 --> 00:09:31,949
important part the HTML is just the

00:09:30,269 --> 00:09:33,420
scaffolding it's like looking at a

00:09:31,949 --> 00:09:35,790
building and asking well as the concrete

00:09:33,420 --> 00:09:36,899
using rebar that's only relevant if

00:09:35,790 --> 00:09:38,309
you're worried about it falling down

00:09:36,899 --> 00:09:40,470
what you really care about is the

00:09:38,309 --> 00:09:41,999
concrete going to fall down so don't use

00:09:40,470 --> 00:09:43,769
HTML you'll just get a bunch of stuff

00:09:41,999 --> 00:09:45,959
back and even if you're checking for

00:09:43,769 --> 00:09:49,350
content inside of that HTML it really

00:09:45,959 --> 00:09:50,730
isn't a very stable test so my demo the

00:09:49,350 --> 00:09:52,589
first demo just proves that it works

00:09:50,730 --> 00:09:55,019
it's not very interesting because again

00:09:52,589 --> 00:09:56,939
acceptance tests with splinter aren't

00:09:55,019 --> 00:09:58,259
very interesting they're really prosaic

00:09:56,939 --> 00:10:00,209
that's what's great about them they're

00:09:58,259 --> 00:10:03,540
easy to understand they're easy to use

00:10:00,209 --> 00:10:07,050
they're easy to play so can everybody

00:10:03,540 --> 00:10:10,319
see that the back cool this is a basic

00:10:07,050 --> 00:10:12,569
splinter test I create a browser I tell

00:10:10,319 --> 00:10:14,579
it to go to a page I make sure it

00:10:12,569 --> 00:10:16,379
succeeds and I check that the title is

00:10:14,579 --> 00:10:20,009
ramen at wikipedia the free encyclopedia

00:10:16,379 --> 00:10:21,990
I recorded all of my demos because I

00:10:20,009 --> 00:10:24,120
didn't want them to break with not

00:10:21,990 --> 00:10:27,589
having an internet connection so i

00:10:24,120 --> 00:10:27,589
apologize if the video isn't any good

00:10:30,150 --> 00:10:33,470
you can see in the corner there that

00:10:31,830 --> 00:10:35,310
Firefox is running using webdriver

00:10:33,470 --> 00:10:37,170
Firefox has built-in support for

00:10:35,310 --> 00:10:39,890
selenium because Mozilla loves testing

00:10:37,170 --> 00:10:41,940
as well that test is finished it worked

00:10:39,890 --> 00:10:44,130
wikipedia has a title on each of its

00:10:41,940 --> 00:10:48,000
pages that mentions Wikipedia truly

00:10:44,130 --> 00:10:49,530
world-changing so being able to check

00:10:48,000 --> 00:10:51,840
the title isn't it useful being able to

00:10:49,530 --> 00:10:54,060
check the HTML is worthless basically

00:10:51,840 --> 00:10:55,560
but what you can do with salento with

00:10:54,060 --> 00:10:57,330
splinter is you can check that things

00:10:55,560 --> 00:10:59,580
are on the page you can find them by

00:10:57,330 --> 00:11:01,320
basically every sort of structure that

00:10:59,580 --> 00:11:03,840
you could use to refer to them while

00:11:01,320 --> 00:11:06,480
doing JavaScript or you know pausing

00:11:03,840 --> 00:11:09,510
with a positive they're not all

00:11:06,480 --> 00:11:11,820
necessarily that useful though so all of

00:11:09,510 --> 00:11:15,060
these finders return element lists with

00:11:11,820 --> 00:11:16,980
the exception of fine by ID fine by ID

00:11:15,060 --> 00:11:18,510
either succeeds or it doesn't because

00:11:16,980 --> 00:11:20,640
there's only ever meant to be one object

00:11:18,510 --> 00:11:25,680
with an ID on the page at any given time

00:11:20,640 --> 00:11:27,480
if you look for something and it's not

00:11:25,680 --> 00:11:30,930
on the page you'll still get an element

00:11:27,480 --> 00:11:32,910
list but it'll be empty so your second

00:11:30,930 --> 00:11:36,060
pro tip don't ever find things by X bar

00:11:32,910 --> 00:11:38,100
X path is really really brittle XPath

00:11:36,060 --> 00:11:40,320
relies on searching through your page

00:11:38,100 --> 00:11:41,940
hierarchically even with relative paths

00:11:40,320 --> 00:11:43,860
you have to be sure that you haven't

00:11:41,940 --> 00:11:46,200
inserted or removed an element somewhere

00:11:43,860 --> 00:11:48,210
relative to what you're looking for the

00:11:46,200 --> 00:11:50,130
only case the XPath is really useful is

00:11:48,210 --> 00:11:51,870
when you're trying to look back up the

00:11:50,130 --> 00:11:53,250
page for something if you know that you

00:11:51,870 --> 00:11:54,720
have a certain element that you can

00:11:53,250 --> 00:11:56,430
identify with a piece of XPath and

00:11:54,720 --> 00:11:58,260
something else we're looking for can

00:11:56,430 --> 00:12:00,300
only be found easily by relatively

00:11:58,260 --> 00:12:02,400
looking back up through the Dom then

00:12:00,300 --> 00:12:04,140
maybe use XPath but most of the time it

00:12:02,400 --> 00:12:07,340
makes your test brittle it's slower than

00:12:04,140 --> 00:12:10,590
CSS it's just generally a terrible idea

00:12:07,340 --> 00:12:13,470
also don't use CSS CSS is also

00:12:10,590 --> 00:12:15,150
hierarchical and kind of slow depending

00:12:13,470 --> 00:12:16,680
on your CSS maybe you can make sure

00:12:15,150 --> 00:12:18,180
you're looking at one specific element

00:12:16,680 --> 00:12:20,220
or the element that you want but maybe

00:12:18,180 --> 00:12:21,780
you can't maybe you add something else

00:12:20,220 --> 00:12:23,970
to the page maybe your designer alters

00:12:21,780 --> 00:12:25,980
your CSS behind your back and your tests

00:12:23,970 --> 00:12:28,470
or break the point of testing is to make

00:12:25,980 --> 00:12:31,080
your test succeed whenever the intent of

00:12:28,470 --> 00:12:33,270
the test is met and if the name of the

00:12:31,080 --> 00:12:36,150
class that makes things blink changes

00:12:33,270 --> 00:12:37,440
that shouldn't break your tests so the

00:12:36,150 --> 00:12:39,429
most reliable one of those the one

00:12:37,440 --> 00:12:43,039
that's used the most is

00:12:39,429 --> 00:12:46,220
name and tag but don't use tag either

00:12:43,039 --> 00:12:47,569
because again it relies on there only

00:12:46,220 --> 00:12:51,769
being one instance of the thing you're

00:12:47,569 --> 00:12:54,109
looking for tags by their nature can

00:12:51,769 --> 00:12:55,970
mostly be repeated in HTML it's all tags

00:12:54,109 --> 00:12:57,229
you can't look four paragraphs you can't

00:12:55,970 --> 00:12:58,489
look for headings unless you know you're

00:12:57,229 --> 00:13:00,049
only ever going to have one heading

00:12:58,489 --> 00:13:03,889
which again you're projecting your

00:13:00,049 --> 00:13:05,419
design decisions on to your app tests

00:13:03,889 --> 00:13:08,479
you don't want to do that it couples

00:13:05,419 --> 00:13:10,909
your designs to out tests so really the

00:13:08,479 --> 00:13:14,029
most useful one there is name ID and

00:13:10,909 --> 00:13:15,949
value because splinter interprets the

00:13:14,029 --> 00:13:17,949
web page holistically it looks like a

00:13:15,949 --> 00:13:20,479
user does it looks at the whole thing

00:13:17,949 --> 00:13:25,609
relative structure and assume uniqueness

00:13:20,479 --> 00:13:27,199
isn't holistic it's what's the word it's

00:13:25,609 --> 00:13:28,699
it's specific you're looking at the way

00:13:27,199 --> 00:13:30,199
you've implemented something if your

00:13:28,699 --> 00:13:31,669
implementation changes as long as you

00:13:30,199 --> 00:13:33,949
still meet your criteria for success

00:13:31,669 --> 00:13:36,939
your test shouldn't break so i said

00:13:33,949 --> 00:13:40,099
before all of those return element lists

00:13:36,939 --> 00:13:41,989
element lists our list you can refer to

00:13:40,099 --> 00:13:44,749
the first last element and index them by

00:13:41,989 --> 00:13:46,309
by integer index if you don't use a

00:13:44,749 --> 00:13:47,989
method on an element list if you don't

00:13:46,309 --> 00:13:50,329
get a specific method it proxies to the

00:13:47,989 --> 00:13:51,470
first element of that element list so if

00:13:50,329 --> 00:13:53,179
you know you're only ever going to get

00:13:51,470 --> 00:13:54,979
one instance of something and you want

00:13:53,179 --> 00:14:00,549
to assert some content on it you can

00:13:54,979 --> 00:14:00,549
just go blah fine by CSS dot whatever

00:14:01,389 --> 00:14:07,759
elements can have their class checked

00:14:04,309 --> 00:14:10,399
you can check that they are visible you

00:14:07,759 --> 00:14:13,339
can check their value you can find them

00:14:10,399 --> 00:14:15,109
by class again find by class not so

00:14:13,339 --> 00:14:16,699
useful unless you know the class you've

00:14:15,109 --> 00:14:20,779
applied or something has been applied by

00:14:16,699 --> 00:14:22,669
you for a specific purpose what you can

00:14:20,779 --> 00:14:23,989
do with them is a cert against them this

00:14:22,669 --> 00:14:25,999
is much more useful than checking the

00:14:23,989 --> 00:14:27,739
HTML and doing a regex or checking

00:14:25,999 --> 00:14:29,509
content you ask if the text is present

00:14:27,739 --> 00:14:31,549
in the page or if the text is not

00:14:29,509 --> 00:14:33,259
present in the page you can also make

00:14:31,549 --> 00:14:35,329
sure that elements just exist rather

00:14:33,259 --> 00:14:37,339
than looking them up and then checking

00:14:35,329 --> 00:14:39,649
that the list isn't empty and all of the

00:14:37,339 --> 00:14:41,659
matches that are there are present as is

00:14:39,649 --> 00:14:45,169
element present or is element not

00:14:41,659 --> 00:14:46,609
present we do a lot of clicking you can

00:14:45,169 --> 00:14:48,709
do clicking find the element called

00:14:46,609 --> 00:14:51,259
click on it clicking on a forum button

00:14:48,709 --> 00:14:53,329
will submit the form and clicking will

00:14:51,259 --> 00:14:58,729
also follow any redirects on links or

00:14:53,329 --> 00:15:00,499
forms cookies here's a bit more of the

00:14:58,729 --> 00:15:03,470
xenos of testing when you think about

00:15:00,499 --> 00:15:05,419
identifiers think about what the user is

00:15:03,470 --> 00:15:08,509
seeing so maybe you have a unique name

00:15:05,419 --> 00:15:11,089
for a link but that name isn't seen by

00:15:08,509 --> 00:15:12,889
your users the user sees the link text

00:15:11,089 --> 00:15:15,199
your acceptance tests are much more

00:15:12,889 --> 00:15:17,749
likely to say when the user clicks on

00:15:15,199 --> 00:15:19,429
the link that says blah then when the

00:15:17,749 --> 00:15:22,339
user clicks on the link identified by

00:15:19,429 --> 00:15:24,079
the name blah always think about the

00:15:22,339 --> 00:15:26,089
user when you're designing your testing

00:15:24,079 --> 00:15:27,499
anything not just splinter but because

00:15:26,089 --> 00:15:29,600
splinter is an acceptance test tool it's

00:15:27,499 --> 00:15:31,519
much more useful the really powerful

00:15:29,600 --> 00:15:33,499
thing about Splinter that I love is its

00:15:31,519 --> 00:15:35,569
form capabilities forms are the most

00:15:33,499 --> 00:15:37,069
annoying part of acceptance tests you

00:15:35,569 --> 00:15:38,179
have to find the form you have to find

00:15:37,069 --> 00:15:39,619
the elements you have to set their

00:15:38,179 --> 00:15:41,479
values and then you have make actions

00:15:39,619 --> 00:15:43,819
occur on them with splinter it's much

00:15:41,479 --> 00:15:45,439
faster and much easier the top line

00:15:43,819 --> 00:15:47,509
there Phil is fulfilling in a text field

00:15:45,439 --> 00:15:49,549
you can choose options from radio

00:15:47,509 --> 00:15:50,959
buttons you can uncheck options you can

00:15:49,549 --> 00:15:52,999
check them you can select from select

00:15:50,959 --> 00:15:55,609
boxes and you can just find the form and

00:15:52,999 --> 00:15:57,439
submit it by calling click there's a

00:15:55,609 --> 00:15:58,850
problem with selenium something if you

00:15:57,439 --> 00:16:00,859
wanted to contribute to it you could

00:15:58,850 --> 00:16:02,839
probably add to great acclaim all of

00:16:00,859 --> 00:16:05,959
those are name only you can't find

00:16:02,839 --> 00:16:08,779
elements by CSS or ID or XPath or any of

00:16:05,959 --> 00:16:10,850
the other forms on forms you have to use

00:16:08,779 --> 00:16:12,829
the name so up their browser dot fill

00:16:10,850 --> 00:16:15,979
fill in the topping filled with the

00:16:12,829 --> 00:16:18,139
value olives I can't go you know text

00:16:15,979 --> 00:16:22,189
the CSS for that text field I have to

00:16:18,139 --> 00:16:24,019
use the name forms can also take a dict

00:16:22,189 --> 00:16:25,519
to set them so if you just want to

00:16:24,019 --> 00:16:27,649
marshal a whole bunch of form data up

00:16:25,519 --> 00:16:29,329
and give it to the form as a one-line

00:16:27,649 --> 00:16:30,709
statement you can do that it's the same

00:16:29,329 --> 00:16:32,059
sort of thing name in the field and the

00:16:30,709 --> 00:16:34,549
value and then you just pass it to

00:16:32,059 --> 00:16:37,249
browser dot fill you can also upload

00:16:34,549 --> 00:16:39,499
files with a caveat if you are using

00:16:37,249 --> 00:16:42,559
Splinter remotely file uploads don't

00:16:39,499 --> 00:16:44,089
work the lower level browsers all the

00:16:42,559 --> 00:16:46,039
selenium browsers allow remote file

00:16:44,089 --> 00:16:47,839
uploads butt splinter hasn't had that

00:16:46,039 --> 00:16:49,339
change pushed upstream yet so it only

00:16:47,839 --> 00:16:51,109
works if the tests you're running are

00:16:49,339 --> 00:16:52,699
running on the same machine so if you're

00:16:51,109 --> 00:16:54,559
trying to run on your local instance

00:16:52,699 --> 00:16:56,919
against a staging server somewhere else

00:16:54,559 --> 00:17:00,019
on your network that probably won't work

00:16:56,919 --> 00:17:01,860
so my next demo splendor with forms

00:17:00,019 --> 00:17:05,640
again it's a video

00:17:01,860 --> 00:17:09,449
and I will just pause that video if I

00:17:05,640 --> 00:17:10,829
can figure out no I guess I can't pause

00:17:09,449 --> 00:17:14,429
that video when I'm presenting that's

00:17:10,829 --> 00:17:15,630
terrible I will propose to these slides

00:17:14,429 --> 00:17:19,799
online if you want to investigate them

00:17:15,630 --> 00:17:22,049
later so it's blink tov execute the form

00:17:19,799 --> 00:17:23,610
it opens firefox firefox is the default

00:17:22,049 --> 00:17:34,010
browser unless you specify something

00:17:23,610 --> 00:17:37,230
else do-do-do-do do-do-do-do do-do-do-do

00:17:34,010 --> 00:17:39,570
2222 so filled in form it fired the Java

00:17:37,230 --> 00:17:41,490
Script validation and then I

00:17:39,570 --> 00:17:43,080
deliberately stop the test from stopping

00:17:41,490 --> 00:17:45,870
because otherwise it would close the

00:17:43,080 --> 00:17:47,070
browser so that's the problem with

00:17:45,870 --> 00:17:51,270
splinter demos they're not interesting

00:17:47,070 --> 00:17:53,250
because it's really easy one of the

00:17:51,270 --> 00:17:56,040
wrinkles about testing with selenium is

00:17:53,250 --> 00:17:57,570
ajax ajax requires your JavaScript time

00:17:56,040 --> 00:17:59,940
to execute you need to give it time to

00:17:57,570 --> 00:18:01,169
do things because selenium will go

00:17:59,940 --> 00:18:02,880
through all of the commands as fast as

00:18:01,169 --> 00:18:05,190
it possibly can splinter splinter

00:18:02,880 --> 00:18:07,710
weights so splinter allows you to tell

00:18:05,190 --> 00:18:09,299
it to type into a field so rather than

00:18:07,710 --> 00:18:11,070
setting the value of field actually act

00:18:09,299 --> 00:18:13,740
like a user and type so it triggers key

00:18:11,070 --> 00:18:16,500
up key down events things like that you

00:18:13,740 --> 00:18:18,600
can plus slowly equals true and then you

00:18:16,500 --> 00:18:19,950
iterate through all of the text so that

00:18:18,600 --> 00:18:21,179
you can make sure that something happens

00:18:19,950 --> 00:18:23,549
this is great for like auto completion

00:18:21,179 --> 00:18:25,950
so here I'm saying type into the color

00:18:23,549 --> 00:18:28,530
field the value purple and each key it

00:18:25,950 --> 00:18:32,400
types it will go to the block sorry to

00:18:28,530 --> 00:18:34,799
the to the iterator and iterate through

00:18:32,400 --> 00:18:36,780
and you can do something like say has

00:18:34,799 --> 00:18:38,280
the order completion field appeared does

00:18:36,780 --> 00:18:40,650
it contain values that don't contain the

00:18:38,280 --> 00:18:44,299
amount that we've typed so far you can

00:18:40,650 --> 00:18:47,250
execute JavaScript with splinter this is

00:18:44,299 --> 00:18:49,919
both really powerful and really terrible

00:18:47,250 --> 00:18:52,110
so you can execute any JavaScript that's

00:18:49,919 --> 00:18:53,790
valid which means you could do all kinds

00:18:52,110 --> 00:18:55,860
of crazy things with jquery and make all

00:18:53,790 --> 00:18:57,390
your assertions based on jquery don't do

00:18:55,860 --> 00:18:59,250
that it makes your test fragile and

00:18:57,390 --> 00:19:01,320
again your users don't do things like

00:18:59,250 --> 00:19:03,390
that but you can do things like check

00:19:01,320 --> 00:19:04,919
that values are correct by just going

00:19:03,390 --> 00:19:07,970
evaluate script that will return the

00:19:04,919 --> 00:19:09,860
value that the JavaScript gives you

00:19:07,970 --> 00:19:11,960
you can set the wait time of things in

00:19:09,860 --> 00:19:14,210
splinter so you can give your JavaScript

00:19:11,960 --> 00:19:16,910
time to evaluate or give up a really

00:19:14,210 --> 00:19:19,550
long loading page time to load it waits

00:19:16,910 --> 00:19:21,380
for the amount of time specified or the

00:19:19,550 --> 00:19:23,540
default amount that you say when you

00:19:21,380 --> 00:19:25,190
create your browser class so it only

00:19:23,540 --> 00:19:28,490
works for the element present an element

00:19:25,190 --> 00:19:31,220
text present but its measured in seconds

00:19:28,490 --> 00:19:33,020
and you can set a default up front it's

00:19:31,220 --> 00:19:34,490
a timeout so what it does is it sits

00:19:33,020 --> 00:19:35,840
there and it spins over and over again

00:19:34,490 --> 00:19:37,670
trying to make sure that the actions

00:19:35,840 --> 00:19:43,340
you're trying to take actually occur and

00:19:37,670 --> 00:19:44,930
as soon as it's true they stop so you're

00:19:43,340 --> 00:19:46,670
not waiting until the end of the timeout

00:19:44,930 --> 00:19:49,250
you're waiting until the event you want

00:19:46,670 --> 00:19:51,770
occurs which has a coral reef if you're

00:19:49,250 --> 00:19:54,050
ever doing a negative assertion don't

00:19:51,770 --> 00:19:55,700
use a high timeout because what will

00:19:54,050 --> 00:19:57,440
happen here is that a command will

00:19:55,700 --> 00:19:59,600
always wait 20 seconds before it hits

00:19:57,440 --> 00:20:01,550
false it will return true as soon as it

00:19:59,600 --> 00:20:03,230
is and false at the end of the timeout

00:20:01,550 --> 00:20:04,910
so the better way of doing this is to

00:20:03,230 --> 00:20:08,680
flip it around so you're asserting true

00:20:04,910 --> 00:20:10,940
browser is element not present by tag

00:20:08,680 --> 00:20:13,730
you can manipulate iframes if you're

00:20:10,940 --> 00:20:16,400
stuck in the 90s you can do stuff with

00:20:13,730 --> 00:20:19,220
alerts so alerts are an interesting

00:20:16,400 --> 00:20:21,110
caveat alerts will take focus away from

00:20:19,220 --> 00:20:22,850
your browser so you go browser don't get

00:20:21,110 --> 00:20:24,950
alert and then you have to call accept

00:20:22,850 --> 00:20:27,650
or dismiss if you don't it will retain

00:20:24,950 --> 00:20:29,690
focus in your tests will break prompts

00:20:27,650 --> 00:20:31,100
are much the same except with prompts

00:20:29,690 --> 00:20:34,330
you can fill in the value that they want

00:20:31,100 --> 00:20:37,220
and then go prompt assert prompt dismiss

00:20:34,330 --> 00:20:39,530
the thing is there's a whiff form of get

00:20:37,220 --> 00:20:42,170
alert which logically you would imagine

00:20:39,530 --> 00:20:44,360
with your browser don't get alert as

00:20:42,170 --> 00:20:45,920
alert do a thing ya know that's a troll

00:20:44,360 --> 00:20:47,540
it won't actually just miss or accept

00:20:45,920 --> 00:20:48,650
the alert you'll still take focus away

00:20:47,540 --> 00:20:50,390
from your window and your test will

00:20:48,650 --> 00:20:53,240
break I don't quite know why that's

00:20:50,390 --> 00:20:54,740
there except maybe for you know feeling

00:20:53,240 --> 00:20:55,940
good about the fact that you're using is

00:20:54,740 --> 00:20:58,820
slightly more advanced language feature

00:20:55,940 --> 00:21:01,250
than assignment you can specify

00:20:58,820 --> 00:21:03,640
different browsers so chromosome test

00:21:01,250 --> 00:21:06,230
agent and it's really easy you do that

00:21:03,640 --> 00:21:08,240
you can specify user agent if you want

00:21:06,230 --> 00:21:11,480
to dick around with what your contents

00:21:08,240 --> 00:21:14,150
presented as the default is splitter

00:21:11,480 --> 00:21:15,680
it's really easy you splint off you can

00:21:14,150 --> 00:21:17,870
also use extensions and profiles

00:21:15,680 --> 00:21:21,049
profiles are all your user data like

00:21:17,870 --> 00:21:24,019
bookmarks and settings extensions are

00:21:21,049 --> 00:21:25,669
chrome extensions like firebug one of

00:21:24,019 --> 00:21:28,129
the caveats about this is if you use a

00:21:25,669 --> 00:21:29,509
profile and it has an extension it for

00:21:28,129 --> 00:21:30,679
some reason at the end of the test the

00:21:29,509 --> 00:21:32,659
extension will be removed from the

00:21:30,679 --> 00:21:34,249
profile even if you don't tell it to so

00:21:32,659 --> 00:21:36,710
if you use your real profile it will

00:21:34,249 --> 00:21:38,840
delete all the extensions from it so be

00:21:36,710 --> 00:21:40,460
careful of that chrome doesn't have any

00:21:38,840 --> 00:21:42,499
of those features but it's just as easy

00:21:40,460 --> 00:21:44,899
to use you install selenium you install

00:21:42,499 --> 00:21:47,840
the chrome driver and you use chrome fan

00:21:44,899 --> 00:21:50,419
MJS install selenium and use fan MJS

00:21:47,840 --> 00:21:52,159
zouk test browser install a slightly

00:21:50,419 --> 00:21:54,169
different version of splint off and use

00:21:52,159 --> 00:21:55,759
test browser again this isn't really

00:21:54,169 --> 00:21:57,919
interesting because it's not really hard

00:21:55,759 --> 00:21:59,269
to do and try to make sure you always

00:21:57,919 --> 00:22:01,369
quit your instances because if you don't

00:21:59,269 --> 00:22:02,809
your tests will hang and this is one

00:22:01,369 --> 00:22:04,519
where the with block actually does

00:22:02,809 --> 00:22:06,259
something if you go with browser as

00:22:04,519 --> 00:22:08,330
browser at the end of your test it'll

00:22:06,259 --> 00:22:10,279
close the browser often and continue on

00:22:08,330 --> 00:22:11,509
its merry way so there's one more thing

00:22:10,279 --> 00:22:14,419
about spoonful that's really cool

00:22:11,509 --> 00:22:15,889
splinter can use a feature of selenium

00:22:14,419 --> 00:22:19,190
that allows you to connect to a remote

00:22:15,889 --> 00:22:20,869
server so you can have a map book like I

00:22:19,190 --> 00:22:22,220
do and test on ie as long as you have a

00:22:20,869 --> 00:22:25,070
Windows machine sitting somewhere that

00:22:22,220 --> 00:22:26,539
does ie the remote server works by

00:22:25,070 --> 00:22:29,179
having a set of nodes that have a

00:22:26,539 --> 00:22:31,820
capability and your client your tests

00:22:29,179 --> 00:22:33,799
ask the selenium server for an instance

00:22:31,820 --> 00:22:34,879
of that capability so I want the browser

00:22:33,799 --> 00:22:38,259
and it will give me that middle

00:22:34,879 --> 00:22:40,309
connection there and run your tests

00:22:38,259 --> 00:22:43,009
accessing remote servers is really easy

00:22:40,309 --> 00:22:45,230
you set up a desired capabilities object

00:22:43,009 --> 00:22:47,299
which is what tells the server what

00:22:45,230 --> 00:22:50,059
capabilities you want like use Internet

00:22:47,299 --> 00:22:52,159
Explorer windows and version 7 and the

00:22:50,059 --> 00:22:55,759
URL there is the URL of the server

00:22:52,159 --> 00:22:57,470
object those are the smaller supported

00:22:55,759 --> 00:22:58,580
remote browsers that selenium has so as

00:22:57,470 --> 00:23:00,470
long as you have something that will run

00:22:58,580 --> 00:23:02,809
those browsers you can do it with remote

00:23:00,470 --> 00:23:04,609
selenium and the the only remote

00:23:02,809 --> 00:23:06,499
selenium server I had that I could get

00:23:04,609 --> 00:23:10,850
running late at night last night was

00:23:06,499 --> 00:23:11,899
source ladders so I apologize it's going

00:23:10,850 --> 00:23:14,239
to take a little while because it was

00:23:11,899 --> 00:23:15,499
going across the Internet one of the

00:23:14,239 --> 00:23:17,570
things about remote servers that's

00:23:15,499 --> 00:23:19,279
really cool is it if you paralyze your

00:23:17,570 --> 00:23:20,899
tests parallel lies your tests so I'm

00:23:19,279 --> 00:23:23,799
paralyzed your tests you can run

00:23:20,899 --> 00:23:26,600
multiple instances of them at once and

00:23:23,799 --> 00:23:28,789
say if you have enough windows boxes on

00:23:26,600 --> 00:23:30,409
your network run across every instance

00:23:28,789 --> 00:23:33,440
of windows that you have on your network

00:23:30,409 --> 00:23:34,480
all at once so you can go I want to test

00:23:33,440 --> 00:23:36,820
windows 7 through

00:23:34,480 --> 00:23:39,100
aight with every version of IE that will

00:23:36,820 --> 00:23:41,230
run all those you don't have to have VMS

00:23:39,100 --> 00:23:43,120
running and your tests take however much

00:23:41,230 --> 00:23:44,919
time it takes to execute the longest one

00:23:43,120 --> 00:23:48,250
of those instead of all of them at once

00:23:44,919 --> 00:23:50,080
so I am going to skip to the next video

00:23:48,250 --> 00:23:52,720
which has just proof that that text and

00:23:50,080 --> 00:23:55,750
test actually executed so I downloaded

00:23:52,720 --> 00:23:57,040
the video here from source labs because

00:23:55,750 --> 00:23:59,919
it ran remotely it didn't run on that

00:23:57,040 --> 00:24:02,230
machine there you'd opened up an

00:23:59,919 --> 00:24:03,700
instance by the way this is mountain

00:24:02,230 --> 00:24:05,650
view I was running this from my hotel

00:24:03,700 --> 00:24:11,049
down the road because remotes liam is

00:24:05,650 --> 00:24:13,600
awesome it opened up the pizza hut site

00:24:11,049 --> 00:24:17,549
it waited a little bit because the IE

00:24:13,600 --> 00:24:17,549
driver for selenium is remarkably slow

00:24:19,530 --> 00:24:27,370
da-da-da-da-da-da da-da-da-da-da-da

00:24:24,419 --> 00:24:42,850
da-da-da-da-da-da Donna de Python it's

00:24:27,370 --> 00:24:44,500
not like to sing yeah there we go okay

00:24:42,850 --> 00:24:45,429
we're running out of time so I'm just

00:24:44,500 --> 00:24:47,350
going to leave that running in the back

00:24:45,429 --> 00:24:49,210
row so it's going to fill in the

00:24:47,350 --> 00:24:51,580
postcode form then it's going to order

00:24:49,210 --> 00:24:52,960
complete the suburb which there was only

00:24:51,580 --> 00:24:54,160
two options of and then the video is

00:24:52,960 --> 00:24:56,220
going to end because recording your

00:24:54,160 --> 00:24:59,049
screen is a terrible way to run sessions

00:24:56,220 --> 00:25:02,110
excellent alright so that's remote

00:24:59,049 --> 00:25:03,669
selenium a couple of general points can

00:25:02,110 --> 00:25:04,809
be read off the slides because we're

00:25:03,669 --> 00:25:07,780
kind of at a time and I want to take

00:25:04,809 --> 00:25:12,040
some questions so yeah thanks very much

00:25:07,780 --> 00:25:13,299
for your time oh one more thing yeah we

00:25:12,040 --> 00:25:14,559
decided to give you some free stuff so

00:25:13,299 --> 00:25:17,260
if you sign up for source labs and use

00:25:14,559 --> 00:25:19,350
that promo code you get 1750 minutes to

00:25:17,260 --> 00:25:23,250
run your tests remotely or in parallel

00:25:19,350 --> 00:25:23,250
have fun questions

00:25:23,980 --> 00:25:28,370
so as doing several we've got a few

00:25:26,450 --> 00:25:34,540
minutes for questions I'll bring the

00:25:28,370 --> 00:25:39,650
bike could you please go back to the

00:25:34,540 --> 00:25:44,090
iframes iframe slide that you said it

00:25:39,650 --> 00:25:46,550
can also go into our frames sure so I do

00:25:44,090 --> 00:25:48,860
quite a bit of scraping of ugly SAP

00:25:46,550 --> 00:25:52,490
sites and I need to look into the source

00:25:48,860 --> 00:25:57,170
to check what the remote sorry what the

00:25:52,490 --> 00:25:58,640
random ID for the iframe has has been

00:25:57,170 --> 00:26:02,150
given and I want to check with a

00:25:58,640 --> 00:26:04,280
splinter does that search just by text

00:26:02,150 --> 00:26:08,150
and can get going to an iframe by

00:26:04,280 --> 00:26:10,850
looking into the so it takes the name of

00:26:08,150 --> 00:26:12,680
the iframe and then just switches the

00:26:10,850 --> 00:26:14,000
focus to it and you cannot do all the

00:26:12,680 --> 00:26:16,130
same operations as you could with

00:26:14,000 --> 00:26:17,390
standard splinter on that I frame as

00:26:16,130 --> 00:26:19,610
though it was a window by itself and

00:26:17,390 --> 00:26:21,920
then this form at the end will then

00:26:19,610 --> 00:26:26,230
switch focus back to the rest of the to

00:26:21,920 --> 00:26:26,230
the mainframe Nori's

00:26:31,520 --> 00:26:36,140
you're probably going to say this a

00:26:33,050 --> 00:26:38,720
terrible but selenium has the IDE which

00:26:36,140 --> 00:26:40,850
allows you to quickly generate a test by

00:26:38,720 --> 00:26:43,100
clicking on things yum today anything

00:26:40,850 --> 00:26:46,460
equivalent for splinter that you know

00:26:43,100 --> 00:26:49,310
would generate that type of stuff not

00:26:46,460 --> 00:26:51,590
that I know of it might be possible to

00:26:49,310 --> 00:26:53,270
create an assistance layer that would be

00:26:51,590 --> 00:26:55,550
fairly easy by just analyzing your

00:26:53,270 --> 00:26:57,590
selenium tests and basically abstracting

00:26:55,550 --> 00:26:59,480
that back to say in a navigate

00:26:57,590 --> 00:27:02,360
underscore to blah is equivalent to

00:26:59,480 --> 00:27:06,440
visit but there's nothing that works by

00:27:02,360 --> 00:27:08,240
default like a recorder yet there was

00:27:06,440 --> 00:27:12,430
one up the front here as well in the

00:27:08,240 --> 00:27:17,780
gentleman in blue I'm gonna run this

00:27:12,430 --> 00:27:20,330
video while I'm answering questions is

00:27:17,780 --> 00:27:23,240
there anything to take screenshots of

00:27:20,330 --> 00:27:26,030
the browser or a dump of the image of

00:27:23,240 --> 00:27:27,680
the browser village selenium itself has

00:27:26,030 --> 00:27:28,880
a screenshot capability it's not in

00:27:27,680 --> 00:27:31,910
splinter yet but it wouldn't be too hard

00:27:28,880 --> 00:27:33,710
to add it slam shameless plug when you

00:27:31,910 --> 00:27:35,210
run tests on sauce labs we take

00:27:33,710 --> 00:27:37,880
screenshots of every action and video of

00:27:35,210 --> 00:27:40,250
the whole thing it's a facility of

00:27:37,880 --> 00:27:42,850
selenium itself but again you'd have to

00:27:40,250 --> 00:27:45,860
just put that functionality in splinter

00:27:42,850 --> 00:27:47,600
um so do you have any suggestions for

00:27:45,860 --> 00:27:49,280
actually like putting this into your

00:27:47,600 --> 00:27:51,200
pipeline for developing like you know

00:27:49,280 --> 00:27:53,240
how Jengo has a test suite we just run

00:27:51,200 --> 00:27:55,160
tests what's the preferred way to do

00:27:53,240 --> 00:27:57,740
that with splinter so much separate to

00:27:55,160 --> 00:27:59,870
django tests and stuff I'm kind of new

00:27:57,740 --> 00:28:01,250
as a Python developer I started it

00:27:59,870 --> 00:28:05,660
because they were picking on me at work

00:28:01,250 --> 00:28:07,550
because I do Ruby and I guess it works

00:28:05,660 --> 00:28:09,890
with all the unit test Suites so I would

00:28:07,550 --> 00:28:11,870
if I was doing it for Ruby I would just

00:28:09,890 --> 00:28:13,730
use the standard aspect library and I

00:28:11,870 --> 00:28:17,660
would build specs like that maybe I

00:28:13,730 --> 00:28:19,510
would use cucumber or lettuce for Python

00:28:17,660 --> 00:28:21,830
on top of them I have ideological

00:28:19,510 --> 00:28:24,440
differences with the whole idea of

00:28:21,830 --> 00:28:25,790
lettuce and cucumber but there are some

00:28:24,440 --> 00:28:27,080
situations where i think it's warranted

00:28:25,790 --> 00:28:29,120
like when you have a tightly integrated

00:28:27,080 --> 00:28:30,770
QA team and a development team and you

00:28:29,120 --> 00:28:32,480
you don't do that concept of the wall

00:28:30,770 --> 00:28:34,220
where you throw software over the wall

00:28:32,480 --> 00:28:36,320
and bugs come back if you work well

00:28:34,220 --> 00:28:37,670
together then cucumber or lettuce is a

00:28:36,320 --> 00:28:39,530
great way of doing that by the

00:28:37,670 --> 00:28:43,399
developers create step definitions and

00:28:39,530 --> 00:28:44,619
the QA people create like test suites

00:28:43,399 --> 00:28:46,729
there was something I skipped over

00:28:44,619 --> 00:28:48,139
because I was running out of time called

00:28:46,729 --> 00:28:51,440
the page object model which is a

00:28:48,139 --> 00:28:53,779
selenium concept about building models

00:28:51,440 --> 00:28:55,219
of pages and providing the things that

00:28:53,779 --> 00:28:57,710
users want to do on them as methods on

00:28:55,219 --> 00:28:59,629
the page so they on your userpage it

00:28:57,710 --> 00:29:01,969
might be add friend or attempt to add

00:28:59,629 --> 00:29:03,889
friend and then you compose your tests

00:29:01,969 --> 00:29:05,659
out of calls to those methods so they've

00:29:03,889 --> 00:29:07,219
read like what a user would do and those

00:29:05,659 --> 00:29:09,589
methods themselves return other page

00:29:07,219 --> 00:29:11,330
objects so you isolate even splinter

00:29:09,589 --> 00:29:12,649
from the actual test code itself but

00:29:11,330 --> 00:29:16,749
that that's really all there is in terms

00:29:12,649 --> 00:29:19,219
of recommendations you said there was a

00:29:16,749 --> 00:29:21,710
limitation of not being able to do file

00:29:19,219 --> 00:29:24,679
uploads remote with a remote server can

00:29:21,710 --> 00:29:27,859
you work around that with sort of secure

00:29:24,679 --> 00:29:30,529
shell tunnels you could go down to the

00:29:27,859 --> 00:29:35,179
browser itself from Splinter I think and

00:29:30,529 --> 00:29:36,679
then call the set file remote method i

00:29:35,179 --> 00:29:39,169
think on Splinter allows you to remote

00:29:36,679 --> 00:29:41,839
from upload a file from one server to a

00:29:39,169 --> 00:29:43,669
remote server because otherwise the way

00:29:41,839 --> 00:29:45,259
it does file uploads is by assuming that

00:29:43,669 --> 00:29:46,729
the path you pass is relative to where

00:29:45,259 --> 00:29:48,409
the browser lives so there is a

00:29:46,729 --> 00:29:49,879
workaround but I haven't actually tested

00:29:48,409 --> 00:29:51,830
it for splinter I know it works for

00:29:49,879 --> 00:29:56,539
capybara which splinter is inspired by

00:29:51,830 --> 00:29:59,809
but that's about it sorry Dylan thanks

00:29:56,539 --> 00:30:02,809
we have a we have a roast of the

00:29:59,809 --> 00:30:06,999
Norwegian blue blend of coffee and here

00:30:02,809 --> 00:30:06,999
is a hike on a you mug for you

00:30:09,500 --> 00:30:11,560

YouTube URL: https://www.youtube.com/watch?v=ihjpKPRDlVw


