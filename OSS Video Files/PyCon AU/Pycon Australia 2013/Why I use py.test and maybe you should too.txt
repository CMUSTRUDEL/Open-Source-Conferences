Title: Why I use py.test and maybe you should too
Publication date: 2013-07-11
Playlist: Pycon Australia 2013
Description: 
	Andy Todd
http://2013.pycon-au.org/schedule/30024/view_talk
Have you tried unit testing? Always meant to add tests to your project but didn't know where to start? This presentation will provide a gentle introduction to unit testing your module, package or entire project.

The standard library comes with the unit test module but a great alternative is py.test. Py.test makes starting to test your project as easy as possible. When you need them it has a full set of tools and testing capabilities.
Captions: 
	00:00:00,030 --> 00:00:05,580
means first speaker is our first

00:00:03,480 --> 00:00:08,069
presenter has been using Python for more

00:00:05,580 --> 00:00:10,050
than 10 years to build desktop and web

00:00:08,069 --> 00:00:13,200
applications has worked in a variety of

00:00:10,050 --> 00:00:15,690
organizations and has managed to use

00:00:13,200 --> 00:00:18,600
Python in all of them that he's going to

00:00:15,690 --> 00:00:26,880
be telling us about why he use uses PI

00:00:18,600 --> 00:00:28,439
tests please welcome Andy Todd thank you

00:00:26,880 --> 00:00:32,820
very much good afternoon hope the cakes

00:00:28,439 --> 00:00:33,329
were nice so as I was introduced the

00:00:32,820 --> 00:00:35,640
talk

00:00:33,329 --> 00:00:37,770
up there says why use PI dot testing you

00:00:35,640 --> 00:00:40,410
probably should too

00:00:37,770 --> 00:00:42,629
I was going to speak about the subject

00:00:40,410 --> 00:00:43,980
I've mentioned in the talks on me but

00:00:42,629 --> 00:00:46,680
but actually it's probably a different

00:00:43,980 --> 00:00:50,250
talk what does should have said is this

00:00:46,680 --> 00:00:51,600
is how to start unit testing it kind of

00:00:50,250 --> 00:00:54,059
changes I wrote it but I think that's

00:00:51,600 --> 00:00:55,350
probably a better description those of

00:00:54,059 --> 00:00:57,329
you who are in Ryan's talking the

00:00:55,350 --> 00:00:58,320
plenary Hall in the last session if you

00:00:57,329 --> 00:00:59,850
understood what he was talking about

00:00:58,320 --> 00:01:04,769
there this probably isn't the talk for

00:00:59,850 --> 00:01:06,930
you this is for people like myself who

00:01:04,769 --> 00:01:09,210
who've heard about unit testing I think

00:01:06,930 --> 00:01:12,030
it's a fantastic thing but really when

00:01:09,210 --> 00:01:16,770
it comes down to it it's kind of hard to

00:01:12,030 --> 00:01:18,990
get started I've written code for far

00:01:16,770 --> 00:01:21,090
too many years I've written unit tests

00:01:18,990 --> 00:01:22,409
for that code for somewhat less and I

00:01:21,090 --> 00:01:24,299
probably should have done more unit

00:01:22,409 --> 00:01:26,880
testing so what I'm going to try and do

00:01:24,299 --> 00:01:28,710
today for those of you who like me so

00:01:26,880 --> 00:01:30,810
five years ago I had never written any

00:01:28,710 --> 00:01:35,670
unit test is a quick overview of what

00:01:30,810 --> 00:01:37,650
unit testing is a very quick tour

00:01:35,670 --> 00:01:39,150
through some of the libraries in Python

00:01:37,650 --> 00:01:40,170
and we will talk about PI tests because

00:01:39,150 --> 00:01:45,240
I think that's probably the best one to

00:01:40,170 --> 00:01:47,189
start with we will then probably spend

00:01:45,240 --> 00:01:48,149
half the talk talking about tips and

00:01:47,189 --> 00:01:50,360
techniques for how you can actually

00:01:48,149 --> 00:01:52,470
start adding unit testing to a new

00:01:50,360 --> 00:01:55,890
application or to an existing set of

00:01:52,470 --> 00:01:57,479
code as I said the key takeaway from

00:01:55,890 --> 00:02:00,420
this message from this tool hopefully is

00:01:57,479 --> 00:02:02,820
is some how do you start unit testing

00:02:00,420 --> 00:02:05,159
and and to help you along the way I've

00:02:02,820 --> 00:02:07,350
done the Google search for you how to

00:02:05,159 --> 00:02:09,030
start unit testing only a hundred and

00:02:07,350 --> 00:02:11,310
thirteen million hits

00:02:09,030 --> 00:02:15,540
I've read all of them so you don't have

00:02:11,310 --> 00:02:16,890
to interestingly enough from a man who

00:02:15,540 --> 00:02:18,630
works in a Microsoft shop at an

00:02:16,890 --> 00:02:20,430
insurance company there's an awful lot

00:02:18,630 --> 00:02:23,310
of stuff there for people to use C sharp

00:02:20,430 --> 00:02:24,630
and dotnet and if you like that's a

00:02:23,310 --> 00:02:26,220
cultural thing I think testing is a

00:02:24,630 --> 00:02:28,110
cultural thing if you go to the Java

00:02:26,220 --> 00:02:30,540
world testing and unit testing and

00:02:28,110 --> 00:02:31,890
automated deployment is very big in the

00:02:30,540 --> 00:02:34,230
Microsoft world I think it's still got a

00:02:31,890 --> 00:02:35,850
way to catch up luckily we're in Python

00:02:34,230 --> 00:02:41,250
so everything's much easier much simpler

00:02:35,850 --> 00:02:43,709
much better hopefully so as I said we'll

00:02:41,250 --> 00:02:45,750
just do a quick overview of some of the

00:02:43,709 --> 00:02:47,880
principles here in case there are people

00:02:45,750 --> 00:02:51,150
who haven't done unit testing yet I'm

00:02:47,880 --> 00:02:52,320
sure you all have what exactly is unit

00:02:51,150 --> 00:02:55,610
testing and there's and there's a few

00:02:52,320 --> 00:02:57,840
key principles so here's the definition

00:02:55,610 --> 00:02:59,250
that I wrote well it's actually is based

00:02:57,840 --> 00:03:02,790
on our lives based on the definition

00:02:59,250 --> 00:03:05,310
from Wikipedia and there's a few key

00:03:02,790 --> 00:03:06,750
elements in unit testing that I think

00:03:05,310 --> 00:03:10,410
are important and some of them are

00:03:06,750 --> 00:03:11,640
slightly less important the the probably

00:03:10,410 --> 00:03:15,900
the key word on that slide should be

00:03:11,640 --> 00:03:17,670
repeatable your unit tests and unit

00:03:15,900 --> 00:03:20,220
tests essentially are code that tests

00:03:17,670 --> 00:03:22,980
code sometimes people don't think of it

00:03:20,220 --> 00:03:25,560
that way particularly should be isolated

00:03:22,980 --> 00:03:29,130
and that is very important if you go to

00:03:25,560 --> 00:03:30,360
the pure unit testing zealots they'll

00:03:29,130 --> 00:03:32,100
tell you that every code should be

00:03:30,360 --> 00:03:33,510
completely independent of every test

00:03:32,100 --> 00:03:34,320
should be completely independent of

00:03:33,510 --> 00:03:37,410
every other test

00:03:34,320 --> 00:03:39,269
there should be no infection of one test

00:03:37,410 --> 00:03:43,530
to another you can't share anything

00:03:39,269 --> 00:03:46,560
between your unit tests mostly that's

00:03:43,530 --> 00:03:47,670
true and one of the reasons and you'll

00:03:46,560 --> 00:03:49,470
see this later in the talk that I

00:03:47,670 --> 00:03:50,910
recommend you use PI doc test is because

00:03:49,470 --> 00:03:54,690
sometimes that can be a pain in the bum

00:03:50,910 --> 00:03:57,150
and often it's it's preferable to share

00:03:54,690 --> 00:03:58,769
some elements for instance of your setup

00:03:57,150 --> 00:04:00,510
in your teardown between multiple unit

00:03:58,769 --> 00:04:04,400
tests just otherwise it will take far

00:04:00,510 --> 00:04:04,400
too long to run a test suite

00:04:04,470 --> 00:04:07,950
the next thing is they should be

00:04:05,790 --> 00:04:09,060
automated you can't really see it on the

00:04:07,950 --> 00:04:11,790
picture there but that's one of Google's

00:04:09,060 --> 00:04:12,750
fancy self-driving cars I'm hoping

00:04:11,790 --> 00:04:16,410
they've written some tests for that

00:04:12,750 --> 00:04:18,540
software but automation is important as

00:04:16,410 --> 00:04:20,130
well because if you have to run each

00:04:18,540 --> 00:04:21,540
test by hand you're not going to do it

00:04:20,130 --> 00:04:23,040
very often what you want to be able to

00:04:21,540 --> 00:04:24,810
do with the unit test suite is basically

00:04:23,040 --> 00:04:27,090
just kick it off and run it every every

00:04:24,810 --> 00:04:29,820
time again if you get into test-driven

00:04:27,090 --> 00:04:31,380
development and fully embrace the the

00:04:29,820 --> 00:04:33,240
methodology you'll run the tests every

00:04:31,380 --> 00:04:36,180
time you you check in a commit into your

00:04:33,240 --> 00:04:37,920
a source code repository hopefully maybe

00:04:36,180 --> 00:04:40,320
more often than that as before you check

00:04:37,920 --> 00:04:41,850
it in so automation is key here because

00:04:40,320 --> 00:04:44,970
if you can't automate your test you're

00:04:41,850 --> 00:04:47,070
never going to run them the other key

00:04:44,970 --> 00:04:53,040
component of unit testing I think is is

00:04:47,070 --> 00:04:55,560
batching each test should test one thing

00:04:53,040 --> 00:04:56,940
and one thing only but you will find as

00:04:55,560 --> 00:04:58,910
you go through and write unit tests for

00:04:56,940 --> 00:05:02,190
a piece of code or an application system

00:04:58,910 --> 00:05:03,870
you will logically want to group things

00:05:02,190 --> 00:05:05,400
together and what you generally speaking

00:05:03,870 --> 00:05:07,440
want to be able to do is if you've only

00:05:05,400 --> 00:05:09,300
changed one part of a subsystem you want

00:05:07,440 --> 00:05:10,860
the ability to run the batch of tests

00:05:09,300 --> 00:05:12,750
that effect that subsystem in your

00:05:10,860 --> 00:05:15,510
application or one module in your

00:05:12,750 --> 00:05:17,370
library you should by default run

00:05:15,510 --> 00:05:20,280
everything but sometimes again the

00:05:17,370 --> 00:05:21,720
overhead of running awful suite of unit

00:05:20,280 --> 00:05:27,180
tests can be too much and the ability to

00:05:21,720 --> 00:05:28,980
just break them up is quite good so

00:05:27,180 --> 00:05:30,150
there was your three minute introduction

00:05:28,980 --> 00:05:33,570
to unit testing I hope everyone was

00:05:30,150 --> 00:05:36,870
taking notes in Python we have a number

00:05:33,570 --> 00:05:38,820
of options to how we go about doing unit

00:05:36,870 --> 00:05:39,300
testing some of them are in the standard

00:05:38,820 --> 00:05:40,650
library

00:05:39,300 --> 00:05:42,240
we love the standard library because

00:05:40,650 --> 00:05:44,070
it's free and it comes with every

00:05:42,240 --> 00:05:46,260
installation of Python some of them are

00:05:44,070 --> 00:05:47,430
not doesn't mean they're any better or

00:05:46,260 --> 00:05:49,890
any worse it just means they're not in

00:05:47,430 --> 00:05:52,530
the standard library so the first module

00:05:49,890 --> 00:05:55,050
from the standard library is the unit

00:05:52,530 --> 00:05:57,780
test framework this has been in Python

00:05:55,050 --> 00:05:59,610
since 2.1 so if my memory serves me

00:05:57,780 --> 00:06:02,360
correctly came out somewhere around 2000

00:05:59,610 --> 00:06:05,630
so I think we can safely say it's

00:06:02,360 --> 00:06:08,600
vulnerable venerable sorry

00:06:05,630 --> 00:06:12,560
vulnerable it's very venerable module in

00:06:08,600 --> 00:06:14,120
the standard library the only downside

00:06:12,560 --> 00:06:17,810
with unit testers is based on a Java

00:06:14,120 --> 00:06:19,730
framework not well that's a bad thing

00:06:17,810 --> 00:06:22,610
but it has inherited some of those Java

00:06:19,730 --> 00:06:24,680
isms which some people like some people

00:06:22,610 --> 00:06:26,480
don't again it's not I'm not here to

00:06:24,680 --> 00:06:27,860
tell you that one library is better than

00:06:26,480 --> 00:06:30,730
another there can be different tools for

00:06:27,860 --> 00:06:34,010
different circumstances

00:06:30,730 --> 00:06:36,830
the standard library also has a module

00:06:34,010 --> 00:06:38,990
called doc test which is a different way

00:06:36,830 --> 00:06:40,820
of performing testing it's based on

00:06:38,990 --> 00:06:42,980
essentially the principles of literate

00:06:40,820 --> 00:06:45,230
programming by some bloke who wrote a

00:06:42,980 --> 00:06:47,330
couple of books called Knuth you may

00:06:45,230 --> 00:06:48,830
have heard of it but essentially what

00:06:47,330 --> 00:06:50,750
that doc test allows you to do is

00:06:48,830 --> 00:06:53,150
narrative testing so you write a story

00:06:50,750 --> 00:06:55,100
and within your story you embed bits of

00:06:53,150 --> 00:06:57,200
code and then as you run your test suite

00:06:55,100 --> 00:07:02,000
the bits of code are extracted and run

00:06:57,200 --> 00:07:03,410
against your application again it's a

00:07:02,000 --> 00:07:04,880
completely different approach you can do

00:07:03,410 --> 00:07:06,170
the same things in doctors you can do in

00:07:04,880 --> 00:07:10,600
unit tests and vice versa

00:07:06,170 --> 00:07:12,800
it really is horses for courses the one

00:07:10,600 --> 00:07:15,050
test library that I like to use is

00:07:12,800 --> 00:07:18,710
called PI test it's not been around as

00:07:15,050 --> 00:07:21,890
long as unit tests but I think it's

00:07:18,710 --> 00:07:23,420
seven eight years old I must admit I

00:07:21,890 --> 00:07:27,830
forgot to check before this talk exactly

00:07:23,420 --> 00:07:29,930
how long it's been around the key

00:07:27,830 --> 00:07:31,640
advantage of PARCC tests as opposed to

00:07:29,930 --> 00:07:33,050
unit tests and I'll show you this in

00:07:31,640 --> 00:07:35,450
some code samples in a minute

00:07:33,050 --> 00:07:37,760
is that it's very very easy to get

00:07:35,450 --> 00:07:38,570
started and that was the point as I was

00:07:37,760 --> 00:07:41,810
writing this talk I thought I should

00:07:38,570 --> 00:07:44,260
change the title that's not to say that

00:07:41,810 --> 00:07:46,340
it doesn't allow you to do all sorts of

00:07:44,260 --> 00:07:49,670
complex things as well because it has a

00:07:46,340 --> 00:07:51,170
full set of features you can see some of

00:07:49,670 --> 00:07:52,700
them listed there on the slide so I'm

00:07:51,170 --> 00:07:54,140
not going to read them out again but one

00:07:52,700 --> 00:07:56,150
of the one of the very attractive

00:07:54,140 --> 00:07:58,400
components in pilot test is the

00:07:56,150 --> 00:07:59,570
parameterization of tests so if you want

00:07:58,400 --> 00:08:03,500
to run the same test with different

00:07:59,570 --> 00:08:04,670
parameters you can do we're not going to

00:08:03,500 --> 00:08:09,230
talk about that today unless you want to

00:08:04,670 --> 00:08:10,820
catch me afterwards the key advantages

00:08:09,230 --> 00:08:13,480
as far as I'm concerned for pi doc

00:08:10,820 --> 00:08:15,730
tester on that slide

00:08:13,480 --> 00:08:16,390
I've mentioned that it's easy to get

00:08:15,730 --> 00:08:20,200
started

00:08:16,390 --> 00:08:22,270
that's the less boilerplate it has very

00:08:20,200 --> 00:08:24,040
very simple unit test discovery if you

00:08:22,270 --> 00:08:25,960
start doing lots of unit testing with

00:08:24,040 --> 00:08:30,100
the unit test library you end up having

00:08:25,960 --> 00:08:31,600
to write your own test suite functions

00:08:30,100 --> 00:08:32,800
which capture all your tests from the

00:08:31,600 --> 00:08:35,050
different files and run them together

00:08:32,800 --> 00:08:36,690
and run them as a group with PI dot test

00:08:35,050 --> 00:08:39,490
as long as you follow some simple

00:08:36,690 --> 00:08:40,870
conventions you don't have to do any of

00:08:39,490 --> 00:08:42,460
that you will just run all of your tests

00:08:40,870 --> 00:08:43,090
for you whenever you say PI dot test on

00:08:42,460 --> 00:08:45,190
the command line

00:08:43,090 --> 00:08:49,420
that's great saving me a lot of typing

00:08:45,190 --> 00:08:50,770
and I'm all for saving typing the other

00:08:49,420 --> 00:08:52,450
key thing that attracted me to PI duct

00:08:50,770 --> 00:08:53,830
test when I started using it was I was

00:08:52,450 --> 00:08:58,090
doing a lot of work with databases still

00:08:53,830 --> 00:09:00,400
do where you do strictly unit testing

00:08:58,090 --> 00:09:01,990
and you have a database that needs to be

00:09:00,400 --> 00:09:03,970
in a set state before you start your

00:09:01,990 --> 00:09:06,250
unit test you spent an awful lot of time

00:09:03,970 --> 00:09:10,030
setting up and tearing down that test

00:09:06,250 --> 00:09:11,410
state for each test that you run and if

00:09:10,030 --> 00:09:12,790
you have a common state against which

00:09:11,410 --> 00:09:14,440
you want to run a hundred tests you do

00:09:12,790 --> 00:09:18,340
100 setups 100 tear downs

00:09:14,440 --> 00:09:20,830
Carla takes a while with pilot tests you

00:09:18,340 --> 00:09:22,120
can put that set up you have control

00:09:20,830 --> 00:09:24,250
over where you put that setup and

00:09:22,120 --> 00:09:25,630
teardown code you can do it at the class

00:09:24,250 --> 00:09:27,250
level so that class will contain a

00:09:25,630 --> 00:09:28,420
number of test functions and the setup

00:09:27,250 --> 00:09:30,340
will only happen once at the beginning

00:09:28,420 --> 00:09:31,990
of run all those unit tests and then

00:09:30,340 --> 00:09:33,220
you'll run the teardown you can even do

00:09:31,990 --> 00:09:35,950
in the module so if you've got a bunch

00:09:33,220 --> 00:09:38,140
of clot test classes in your module you

00:09:35,950 --> 00:09:41,080
can do some expensive set up work at the

00:09:38,140 --> 00:09:43,360
beginning run all the classes in the

00:09:41,080 --> 00:09:46,510
module then tear it all down at the end

00:09:43,360 --> 00:09:49,470
that breaks the principle of isolation I

00:09:46,510 --> 00:09:51,550
talked about five minutes ago

00:09:49,470 --> 00:09:53,410
in the wrong hands that could be a

00:09:51,550 --> 00:09:55,720
dangerous weapon but I think given a

00:09:53,410 --> 00:09:57,010
situation where you have expensive

00:09:55,720 --> 00:09:59,470
resources and you want to use them

00:09:57,010 --> 00:10:03,610
carefully it's a great bonus to using

00:09:59,470 --> 00:10:04,870
this this library in this tool I also

00:10:03,610 --> 00:10:07,360
talked about the full feature set as

00:10:04,870 --> 00:10:09,900
well some of the more advanced things

00:10:07,360 --> 00:10:12,880
you can do PI test has a plug-in

00:10:09,900 --> 00:10:14,080
capability which is fantastic and people

00:10:12,880 --> 00:10:17,490
have done some very interesting and very

00:10:14,080 --> 00:10:17,490
strange things with that as well

00:10:17,760 --> 00:10:21,700
the other point I'm going to make is

00:10:19,870 --> 00:10:23,140
contradict myself by saying actually the

00:10:21,700 --> 00:10:25,390
unit test library is going through a bit

00:10:23,140 --> 00:10:28,990
of a renaissance at the moment and

00:10:25,390 --> 00:10:31,300
there's a a new version of unit test in

00:10:28,990 --> 00:10:32,080
Python 3 which has been back 42 Python

00:10:31,300 --> 00:10:35,650
2.7

00:10:32,080 --> 00:10:37,840
that's called unit test 2 that includes

00:10:35,650 --> 00:10:41,160
the first two bullet points up there so

00:10:37,840 --> 00:10:43,270
unit test 2 which I'll refer to as

00:10:41,160 --> 00:10:44,800
simplifies the unit test discovery based

00:10:43,270 --> 00:10:46,810
on essentially the way the PI dot test

00:10:44,800 --> 00:10:48,880
does it and it also allows you if you

00:10:46,810 --> 00:10:49,270
want to to pull out those setup and

00:10:48,880 --> 00:10:52,810
teardown

00:10:49,270 --> 00:10:56,770
code into different levels in your test

00:10:52,810 --> 00:10:58,390
code probably for the same reason that

00:10:56,770 --> 00:11:01,150
PI test does it because it makes sense

00:10:58,390 --> 00:11:04,420
in certain circumstances now hopefully

00:11:01,150 --> 00:11:06,160
we can read that that's good here is

00:11:04,420 --> 00:11:07,630
something that we are going to test so

00:11:06,160 --> 00:11:10,260
this is the point of the talk where we

00:11:07,630 --> 00:11:12,220
say well how do I start testing things

00:11:10,260 --> 00:11:14,290
here's some turret code we're going to

00:11:12,220 --> 00:11:15,930
test please do not critique the code you

00:11:14,290 --> 00:11:19,750
can come tell me off words how bad it is

00:11:15,930 --> 00:11:21,010
this is this is a place called piece of

00:11:19,750 --> 00:11:22,870
code that I've set up specifically to

00:11:21,010 --> 00:11:26,740
show you some elements of unit testing

00:11:22,870 --> 00:11:28,960
and essentially all it does is in the

00:11:26,740 --> 00:11:30,600
body of that method there it splits a

00:11:28,960 --> 00:11:34,450
string into a bunch of component parts

00:11:30,600 --> 00:11:37,240
it's actually taken from a program that

00:11:34,450 --> 00:11:39,580
I wrote that none of you can see that

00:11:37,240 --> 00:11:40,600
passes you our eyes into the various

00:11:39,580 --> 00:11:41,770
components so you can figure out which

00:11:40,600 --> 00:11:44,380
database you're connecting to it and

00:11:41,770 --> 00:11:46,690
talk to your database so what we're

00:11:44,380 --> 00:11:48,190
going to do is write some tests for this

00:11:46,690 --> 00:11:50,200
and again give you some examples of how

00:11:48,190 --> 00:11:51,880
unit tests and pot tests differ in their

00:11:50,200 --> 00:11:54,520
fundamental approaches and why I think

00:11:51,880 --> 00:11:59,890
pilot test has a better one not always

00:11:54,520 --> 00:12:01,750
sometimes so in your 10 our test module

00:11:59,890 --> 00:12:04,300
using you the unit test module from the

00:12:01,750 --> 00:12:06,280
Python standard library here we start by

00:12:04,300 --> 00:12:07,420
importing our code that we want to test

00:12:06,280 --> 00:12:10,420
because if you don't have it in the

00:12:07,420 --> 00:12:13,710
context you can't run it obviously we're

00:12:10,420 --> 00:12:13,710
importing the unit test module as well

00:12:13,800 --> 00:12:19,120
what you'll see here is some features of

00:12:16,690 --> 00:12:20,260
the unit test library which hopefully if

00:12:19,120 --> 00:12:22,230
any of you have looked in tests before

00:12:20,260 --> 00:12:25,090
you'll recognize

00:12:22,230 --> 00:12:26,590
the class that contains all our tests

00:12:25,090 --> 00:12:32,200
inherits from the unit test test case

00:12:26,590 --> 00:12:33,460
class the method that is the test starts

00:12:32,200 --> 00:12:34,660
with the word test although again that's

00:12:33,460 --> 00:12:37,600
not a convention you can call them

00:12:34,660 --> 00:12:39,250
whatever you like in unit tests but by

00:12:37,600 --> 00:12:45,430
convention people tend to start with the

00:12:39,250 --> 00:12:48,070
word test and it uses a method on the

00:12:45,430 --> 00:12:50,170
test case class called ascertain raises

00:12:48,070 --> 00:12:51,790
and what that does and this is obvious

00:12:50,170 --> 00:12:53,410
from the name is check that when you run

00:12:51,790 --> 00:12:55,390
the next bit of code it actually raises

00:12:53,410 --> 00:12:57,040
the assertion so i raises the exception

00:12:55,390 --> 00:12:59,500
that you've mentioned in the first

00:12:57,040 --> 00:13:00,940
parameter and essentially what we're

00:12:59,500 --> 00:13:02,620
trying to say here is if we pass in an

00:13:00,940 --> 00:13:06,520
invalid string to our function it should

00:13:02,620 --> 00:13:08,880
raise a value error if the code does

00:13:06,520 --> 00:13:10,960
raise a value error that test will pass

00:13:08,880 --> 00:13:12,880
if those of you who are paying attention

00:13:10,960 --> 00:13:14,320
to the last slide you'll notice that

00:13:12,880 --> 00:13:15,820
there's no error checking in that code

00:13:14,320 --> 00:13:17,500
so it won't on that test will fail

00:13:15,820 --> 00:13:18,730
that's probably a good thing because if

00:13:17,500 --> 00:13:22,570
a test fail it means we need to fix

00:13:18,730 --> 00:13:24,040
something very simple very

00:13:22,570 --> 00:13:27,880
straightforward if we want to test that

00:13:24,040 --> 00:13:29,380
our string has a colon slash slash in it

00:13:27,880 --> 00:13:33,520
you just mad at another method which

00:13:29,380 --> 00:13:35,140
goes test that again it's simple its

00:13:33,520 --> 00:13:38,050
straightforward your test code should

00:13:35,140 --> 00:13:40,420
not be very complex if it's too complex

00:13:38,050 --> 00:13:41,589
that probably means that your modules

00:13:40,420 --> 00:13:44,290
are too complex and you should brief

00:13:41,589 --> 00:13:47,200
refactoring here's the same testing PI

00:13:44,290 --> 00:13:48,640
dot test again very similar we import

00:13:47,200 --> 00:13:50,370
our code we want to test we import the

00:13:48,640 --> 00:13:53,530
library we're using to test with and

00:13:50,370 --> 00:13:55,540
then not very much else at all because

00:13:53,530 --> 00:13:58,870
pilot test does automatic test discovery

00:13:55,540 --> 00:14:01,900
it will find in any module that starts

00:13:58,870 --> 00:14:03,610
with the name test any class function or

00:14:01,900 --> 00:14:09,850
method that starts with the word test

00:14:03,610 --> 00:14:11,650
and try and run it that's all it does

00:14:09,850 --> 00:14:13,390
you don't need to have any inheritance

00:14:11,650 --> 00:14:15,010
you don't need to have any boilerplate

00:14:13,390 --> 00:14:18,160
you just put in the name test and it

00:14:15,010 --> 00:14:22,660
will be counted as a test in a similar

00:14:18,160 --> 00:14:25,330
fashion to the unit test library there's

00:14:22,660 --> 00:14:28,630
a special way to check for exceptions

00:14:25,330 --> 00:14:30,790
being raised one of the differences

00:14:28,630 --> 00:14:32,320
between PI dot test and unit test which

00:14:30,790 --> 00:14:34,320
is important to people who write PI dot

00:14:32,320 --> 00:14:36,480
test maybe not so much to you and I

00:14:34,320 --> 00:14:38,790
is that in the unit test library you

00:14:36,480 --> 00:14:40,410
have to use a special special case to

00:14:38,790 --> 00:14:45,240
search so if you just got standard

00:14:40,410 --> 00:14:47,430
assertions in your code you you can't

00:14:45,240 --> 00:14:49,920
you're your unit test code has to have

00:14:47,430 --> 00:14:51,780
the unit test assert method in it for

00:14:49,920 --> 00:14:53,400
pyro so you can just use a normal assert

00:14:51,780 --> 00:14:55,200
unless you're trying to check for an

00:14:53,400 --> 00:14:59,480
exception in which case you've got to

00:14:55,200 --> 00:15:04,680
use the PARCC test raises hope they said

00:14:59,480 --> 00:15:06,420
and that pilot test test code was I

00:15:04,680 --> 00:15:09,210
don't want to count the lines now

00:15:06,420 --> 00:15:11,760
basically four lines of code and back in

00:15:09,210 --> 00:15:14,120
unit test you've got nine lines of code

00:15:11,760 --> 00:15:16,530
it's not a huge difference but when you

00:15:14,120 --> 00:15:18,960
build that up over lots of modules and

00:15:16,530 --> 00:15:23,490
lots of components your application

00:15:18,960 --> 00:15:25,590
system it can be quite a significant

00:15:23,490 --> 00:15:27,240
amount of difference in the number of

00:15:25,590 --> 00:15:29,330
lines of code you write for your tests

00:15:27,240 --> 00:15:33,780
and I'm all for writing less code unless

00:15:29,330 --> 00:15:35,250
lines of code so I said this talk really

00:15:33,780 --> 00:15:36,480
should be how do I start unit testing so

00:15:35,250 --> 00:15:37,950
I think we've all probably been there

00:15:36,480 --> 00:15:39,630
you've got a module you've got a script

00:15:37,950 --> 00:15:41,370
you've got a library you've got a couple

00:15:39,630 --> 00:15:43,830
of classes you threw together just to do

00:15:41,370 --> 00:15:45,450
some silly tasks and you think oh I

00:15:43,830 --> 00:15:46,740
better do some tests for that because

00:15:45,450 --> 00:15:48,330
I'm going to hand it off to one of my

00:15:46,740 --> 00:15:49,830
colleagues or I'm going to start using

00:15:48,330 --> 00:15:51,600
it a bit more seriously those those

00:15:49,830 --> 00:15:53,370
classic sits admin scripts that you just

00:15:51,600 --> 00:15:57,030
write once and then end up being a key

00:15:53,370 --> 00:15:59,730
part of your system no one else is ever

00:15:57,030 --> 00:16:02,250
done that okay but how do you start

00:15:59,730 --> 00:16:04,410
testing it you get into something that

00:16:02,250 --> 00:16:07,890
that's known in the traders analysis

00:16:04,410 --> 00:16:11,310
paralysis analysis paralysis where do

00:16:07,890 --> 00:16:12,510
you start how do you you know do you sit

00:16:11,310 --> 00:16:14,310
there and work through every possible

00:16:12,510 --> 00:16:16,200
combination and permutation of the ways

00:16:14,310 --> 00:16:18,600
this code could run and ways that it

00:16:16,200 --> 00:16:19,680
could fail and people will sit there and

00:16:18,600 --> 00:16:21,930
start going through that and then

00:16:19,680 --> 00:16:25,770
eventually ask to heart I'll go to the

00:16:21,930 --> 00:16:27,300
pub instead and this is this is where I

00:16:25,770 --> 00:16:30,630
was at and this is something that I

00:16:27,300 --> 00:16:34,530
think is important so someone tell me

00:16:30,630 --> 00:16:37,950
girl just write some tests but which

00:16:34,530 --> 00:16:39,570
ones if you do sit down and try and

00:16:37,950 --> 00:16:40,980
write every possible test and I'll talk

00:16:39,570 --> 00:16:44,370
about this a bit in a minute for your

00:16:40,980 --> 00:16:45,750
code you're going to miss something so

00:16:44,370 --> 00:16:46,710
the next slide is probably the most

00:16:45,750 --> 00:16:48,779
important thing I'm going to say today

00:16:46,710 --> 00:16:51,120
and most of you some of you may know

00:16:48,779 --> 00:16:53,070
this already is what I call bug triage

00:16:51,120 --> 00:16:54,960
unit testing and this is the way I

00:16:53,070 --> 00:16:57,270
started out a unit testing to it to a

00:16:54,960 --> 00:17:00,450
library that I maintain and then

00:16:57,270 --> 00:17:02,130
occasionally publish and and I read this

00:17:00,450 --> 00:17:03,510
on the internet somewhere I apologies I

00:17:02,130 --> 00:17:06,449
can't remember the exact original source

00:17:03,510 --> 00:17:08,130
of it it's one of those common-sense

00:17:06,449 --> 00:17:11,459
statements that eventually comes into

00:17:08,130 --> 00:17:12,870
law what you do is when you have a bug

00:17:11,459 --> 00:17:14,730
reported or you find a bug in your code

00:17:12,870 --> 00:17:17,610
isn't working properly don't fix the bug

00:17:14,730 --> 00:17:19,410
write a test the test should check that

00:17:17,610 --> 00:17:21,000
the behavior is correct and and

00:17:19,410 --> 00:17:24,839
therefore when you first run it it will

00:17:21,000 --> 00:17:27,390
fail so then you change your code until

00:17:24,839 --> 00:17:30,600
the test passes and again this is unit

00:17:27,390 --> 00:17:32,670
testing the hardcore way you only change

00:17:30,600 --> 00:17:34,950
your code until the test passes you

00:17:32,670 --> 00:17:37,080
don't do anything else once that test is

00:17:34,950 --> 00:17:39,360
passed commit save deploy you're all

00:17:37,080 --> 00:17:41,550
done then you get another bug so you

00:17:39,360 --> 00:17:43,290
write another test you then get another

00:17:41,550 --> 00:17:45,750
bug unite another test and eventually

00:17:43,290 --> 00:17:47,130
because your code is well I'm sure all

00:17:45,750 --> 00:17:49,410
your code is perfect mine is full of

00:17:47,130 --> 00:17:51,000
bugs so when I get lots of bugs

00:17:49,410 --> 00:17:52,260
I write lots of tests and eventually

00:17:51,000 --> 00:17:54,390
I'll find that I've got a test suite

00:17:52,260 --> 00:17:58,280
over time that covers most of the key

00:17:54,390 --> 00:18:01,740
functions of the application sometimes

00:17:58,280 --> 00:18:04,500
you may want to add new features to your

00:18:01,740 --> 00:18:07,110
code so how do you do that you write a

00:18:04,500 --> 00:18:08,400
test that makes sure that if that new

00:18:07,110 --> 00:18:12,330
feature is working properly the test

00:18:08,400 --> 00:18:14,340
will pass you change your code until

00:18:12,330 --> 00:18:17,780
that test pass and only until that test

00:18:14,340 --> 00:18:20,220
passes and then repeat as like as as

00:18:17,780 --> 00:18:24,750
necessary you'll notice that the two

00:18:20,220 --> 00:18:26,970
slides are very similar there's a reason

00:18:24,750 --> 00:18:28,500
for that because it's quite simple and

00:18:26,970 --> 00:18:30,360
if you follow those simple rules you'll

00:18:28,500 --> 00:18:32,820
find that you will add tests your code

00:18:30,360 --> 00:18:36,420
base incrementally and over time it will

00:18:32,820 --> 00:18:41,760
build up and it will become a really

00:18:36,420 --> 00:18:43,110
useful tool in your arsenal the other

00:18:41,760 --> 00:18:44,310
place where it's useful and I'd found

00:18:43,110 --> 00:18:45,929
this the other day is in code I was

00:18:44,310 --> 00:18:48,240
trying to fix desperately because it was

00:18:45,929 --> 00:18:50,130
terrible was when you start doing

00:18:48,240 --> 00:18:51,450
refactoring and again refactoring is

00:18:50,130 --> 00:18:53,280
something that some of us do more than

00:18:51,450 --> 00:18:55,770
others I tend to repeat myself far too

00:18:53,280 --> 00:18:57,030
much so I do this a lot and you'll

00:18:55,770 --> 00:18:57,450
notice that those three lines of code

00:18:57,030 --> 00:18:58,649
there

00:18:57,450 --> 00:19:00,240
we're seeing they weren't just in two

00:18:58,649 --> 00:19:02,970
methods in my library they were in about

00:19:00,240 --> 00:19:05,610
five so rather than having to write a

00:19:02,970 --> 00:19:07,409
test for those each of those five

00:19:05,610 --> 00:19:08,789
methods I just pull that those three

00:19:07,409 --> 00:19:10,409
lines out into another method write a

00:19:08,789 --> 00:19:15,480
couple of tests for that all good

00:19:10,409 --> 00:19:17,039
sometimes it even works following on

00:19:15,480 --> 00:19:19,230
from the point about only change your

00:19:17,039 --> 00:19:20,820
code until the test passes what we're

00:19:19,230 --> 00:19:22,470
doing here is again something that I was

00:19:20,820 --> 00:19:26,580
taught at university is avoid premature

00:19:22,470 --> 00:19:28,049
optimization if you're not touching a

00:19:26,580 --> 00:19:29,220
piece of code you probably don't need to

00:19:28,049 --> 00:19:33,779
write tests for it right now

00:19:29,220 --> 00:19:36,600
unless you're NASA or buildings control

00:19:33,779 --> 00:19:38,039
software for nuclear plants chances are

00:19:36,600 --> 00:19:39,149
if you're not actively looking at a

00:19:38,039 --> 00:19:40,169
piece of code now you're not really

00:19:39,149 --> 00:19:41,299
going to understand how you should be

00:19:40,169 --> 00:19:44,100
testing it anyway

00:19:41,299 --> 00:19:46,649
plus this saves you from that analysis

00:19:44,100 --> 00:19:48,059
process I talked about earlier whereby

00:19:46,649 --> 00:19:49,529
you try and figure out every possible

00:19:48,059 --> 00:19:53,789
permutation and combination before you

00:19:49,529 --> 00:19:57,600
start and then we've got five minutes

00:19:53,789 --> 00:19:59,519
yeah so a couple of more observations so

00:19:57,600 --> 00:20:00,960
that's really if you take nothing out of

00:19:59,519 --> 00:20:04,049
this talk it was those two slides where

00:20:00,960 --> 00:20:06,149
how do I start testing find a bug

00:20:04,049 --> 00:20:07,980
write a test change your code fix it

00:20:06,149 --> 00:20:10,529
good there are some other observations

00:20:07,980 --> 00:20:12,000
that come up when you start unit testing

00:20:10,529 --> 00:20:15,000
a library or an application system or

00:20:12,000 --> 00:20:18,409
even a module and that's the code that

00:20:15,000 --> 00:20:20,610
has been tested starts to look different

00:20:18,409 --> 00:20:24,570
you end up splitting your functionality

00:20:20,610 --> 00:20:25,889
out into more composable parts and in

00:20:24,570 --> 00:20:27,899
fact there's a fantastic quote I found

00:20:25,889 --> 00:20:29,340
on Stack Exchange when I was researching

00:20:27,899 --> 00:20:31,350
this tool I'm not going to read it I'll

00:20:29,340 --> 00:20:33,929
let you read that yourself but

00:20:31,350 --> 00:20:36,840
essentially again I'm getting on a bit

00:20:33,929 --> 00:20:39,149
so when I started it was UNIX or

00:20:36,840 --> 00:20:40,980
mainframe only and I'd luckily worked in

00:20:39,149 --> 00:20:42,360
the UNIX world and and one of the things

00:20:40,980 --> 00:20:44,940
that one of the the people who told me

00:20:42,360 --> 00:20:47,669
had a write code was the UNIX philosophy

00:20:44,940 --> 00:20:48,750
have smallworld tested well executed

00:20:47,669 --> 00:20:51,090
pieces of code that you can join

00:20:48,750 --> 00:20:52,500
together and what you'll find is if you

00:20:51,090 --> 00:20:58,440
start unit testing your code that's what

00:20:52,500 --> 00:21:01,440
will happen you will end up writing lots

00:20:58,440 --> 00:21:02,669
more methods tour functions to join

00:21:01,440 --> 00:21:04,940
things together but that's not such a

00:21:02,669 --> 00:21:04,940
bad thing

00:21:05,430 --> 00:21:09,450
find a couple of points is where do you

00:21:07,110 --> 00:21:11,580
put your tests don't put your tests in

00:21:09,450 --> 00:21:15,960
the same files as your application code

00:21:11,580 --> 00:21:18,120
you can PI don't test or run them bad

00:21:15,960 --> 00:21:20,400
idea put them in separate modules put

00:21:18,120 --> 00:21:22,260
them essentially in a separate package

00:21:20,400 --> 00:21:24,810
so here's the PI dot test code

00:21:22,260 --> 00:21:27,810
repository on bitbucket they've got a

00:21:24,810 --> 00:21:32,820
separate directory where all the test

00:21:27,810 --> 00:21:35,550
files go that's a good thing do that the

00:21:32,820 --> 00:21:36,990
other thing is you can retrofit tests to

00:21:35,550 --> 00:21:38,880
a big project again I said one of the

00:21:36,990 --> 00:21:40,110
key reasons many people don't start

00:21:38,880 --> 00:21:41,400
Union testing as I go well I've got all

00:21:40,110 --> 00:21:43,560
this code and I don't want to start

00:21:41,400 --> 00:21:44,910
figuring out how to test it all there's

00:21:43,560 --> 00:21:46,260
a great paper and the links on there at

00:21:44,910 --> 00:21:48,780
the bottom it's really easy to read but

00:21:46,260 --> 00:21:50,910
I'll put these slides online about how

00:21:48,780 --> 00:21:54,870
the LibreOffice project in their 4.0

00:21:50,910 --> 00:21:56,580
release basically retrofitted tests to

00:21:54,870 --> 00:22:00,060
every virtually every part of the

00:21:56,580 --> 00:22:01,860
application code they star office and

00:22:00,060 --> 00:22:03,990
then open office basically hadn't done

00:22:01,860 --> 00:22:05,430
any testing at all and in the 4.0

00:22:03,990 --> 00:22:09,450
project for libre office they put in

00:22:05,430 --> 00:22:11,010
unit tests for everything they will

00:22:09,450 --> 00:22:12,690
admit that they're not fantastic tests

00:22:11,010 --> 00:22:13,980
but at least they have them and one of

00:22:12,690 --> 00:22:18,210
their goals in the next release is to

00:22:13,980 --> 00:22:19,350
start improving those you can do it if

00:22:18,210 --> 00:22:25,260
they can do it you can do it with your

00:22:19,350 --> 00:22:28,410
module I kind of was sitting in Ryan's

00:22:25,260 --> 00:22:29,850
talk earlier and thinking oh blimey

00:22:28,410 --> 00:22:31,350
here's the advanced testing so there's a

00:22:29,850 --> 00:22:32,520
lot of talks on testing at this PyCon

00:22:31,350 --> 00:22:33,900
which i think is a fantastic thing

00:22:32,520 --> 00:22:37,080
because we should all do more of it and

00:22:33,900 --> 00:22:38,310
I've really only just scraped the top of

00:22:37,080 --> 00:22:39,390
the iceberg which i think is sitting out

00:22:38,310 --> 00:22:41,100
in the bay at the moment cuz it's that

00:22:39,390 --> 00:22:43,470
cold outside

00:22:41,100 --> 00:22:47,760
there are lots and lots of things to

00:22:43,470 --> 00:22:49,980
talk about some of them will be taught

00:22:47,760 --> 00:22:52,020
touched on by other presenters in this

00:22:49,980 --> 00:22:54,870
Python others go out and find out about

00:22:52,020 --> 00:22:57,090
them we've got things like test fixtures

00:22:54,870 --> 00:22:59,220
how do you set up complicated stating in

00:22:57,090 --> 00:23:00,720
your application system or environment

00:22:59,220 --> 00:23:03,330
so that you can then test the

00:23:00,720 --> 00:23:05,340
functionality within it the coil concept

00:23:03,330 --> 00:23:09,120
of mocking is fan is is well supported

00:23:05,340 --> 00:23:10,530
in Python is very useful if you're

00:23:09,120 --> 00:23:13,650
writing lots of tests against things

00:23:10,530 --> 00:23:15,460
like Twitter I think was the example we

00:23:13,650 --> 00:23:17,480
used earlier

00:23:15,460 --> 00:23:18,710
how do you how do you know you've got

00:23:17,480 --> 00:23:20,179
everything tested there's a fantastic

00:23:18,710 --> 00:23:22,129
library abundant bough child are called

00:23:20,179 --> 00:23:23,000
coverage dot pie if you get a chance

00:23:22,129 --> 00:23:25,039
have a look at that

00:23:23,000 --> 00:23:26,450
it basically figures out how many tests

00:23:25,039 --> 00:23:29,240
you should have and how many tests how

00:23:26,450 --> 00:23:31,639
much of your code is covered by your

00:23:29,240 --> 00:23:33,889
unit tests and then you get into the

00:23:31,639 --> 00:23:35,179
subject which Ryan talked about in his

00:23:33,889 --> 00:23:38,419
last talk about things like continuous

00:23:35,179 --> 00:23:39,980
integration stress testing all sorts of

00:23:38,419 --> 00:23:43,669
other things there's plenty of other

00:23:39,980 --> 00:23:45,769
stuff to read one of the guys in the UK

00:23:43,669 --> 00:23:48,320
at first link there obey the testing

00:23:45,769 --> 00:23:50,210
goat is a work in progress book that's

00:23:48,320 --> 00:23:51,320
been published on the web it's fantastic

00:23:50,210 --> 00:23:54,230
it's how to do test-driven development

00:23:51,320 --> 00:23:55,820
using Django and Python really good lots

00:23:54,230 --> 00:23:58,879
of interesting stuff in there it's it's

00:23:55,820 --> 00:24:01,100
being developed in the open so you can

00:23:58,879 --> 00:24:02,570
all go and have a look at it now and the

00:24:01,100 --> 00:24:04,490
other one the next link is probably is

00:24:02,570 --> 00:24:06,259
also just as useful the Python testing

00:24:04,490 --> 00:24:07,759
dotnet site they write some very

00:24:06,259 --> 00:24:09,039
interesting stuff about how to do things

00:24:07,759 --> 00:24:10,909
in different libraries different like

00:24:09,039 --> 00:24:14,120
different approaches that kind of stuff

00:24:10,909 --> 00:24:15,769
there is a bunch of stuff I only sort of

00:24:14,120 --> 00:24:17,330
I put together a whole list of

00:24:15,769 --> 00:24:18,950
references when I was writing this talk

00:24:17,330 --> 00:24:21,289
they're going to go on my website in a

00:24:18,950 --> 00:24:22,850
bit that's just you know the first half

00:24:21,289 --> 00:24:23,960
dozen of links I just put them on the

00:24:22,850 --> 00:24:26,179
slide there is a lot of stuff out there

00:24:23,960 --> 00:24:29,350
you're not on your own there's all sorts

00:24:26,179 --> 00:24:32,450
of useful information to be found

00:24:29,350 --> 00:24:34,129
finally as I said I'll put all this on

00:24:32,450 --> 00:24:36,500
my website so that link is there

00:24:34,129 --> 00:24:42,100
hopefully there'll be a link to it if

00:24:36,500 --> 00:24:42,100
not I'll tweet it that's my

00:24:46,970 --> 00:24:51,840
we have got a minute for questions if

00:24:50,519 --> 00:24:55,919
anybody has any and there's a microphone

00:24:51,840 --> 00:24:57,809
I believe just for saunas a bit new with

00:24:55,919 --> 00:25:00,960
testing but I've just done a little bit

00:24:57,809 --> 00:25:05,129
with nose tests and some prior tests

00:25:00,960 --> 00:25:06,419
differ or house at the same thanks the

00:25:05,129 --> 00:25:08,249
cool thanks the question there there

00:25:06,419 --> 00:25:11,309
they got a different approach nose was

00:25:08,249 --> 00:25:13,110
written because of the test is a test

00:25:11,309 --> 00:25:14,940
collection libraries what knows really

00:25:13,110 --> 00:25:16,289
is and it was built because test

00:25:14,940 --> 00:25:19,259
collection in the unit test library was

00:25:16,289 --> 00:25:20,279
a bit too hard it's kind of changed

00:25:19,259 --> 00:25:21,899
since it was a really written but that

00:25:20,279 --> 00:25:24,690
was the purpose it was you knows we'll

00:25:21,899 --> 00:25:26,490
find and run your unit tests for you you

00:25:24,690 --> 00:25:27,990
can actually use it as a front end on on

00:25:26,490 --> 00:25:31,169
a number of unit testing libraries but

00:25:27,990 --> 00:25:33,210
that's really the difference one of the

00:25:31,169 --> 00:25:35,639
primary problems our testing is the data

00:25:33,210 --> 00:25:37,440
that we test against so again think that

00:25:35,639 --> 00:25:38,909
one of the primary problems when getting

00:25:37,440 --> 00:25:41,909
started we're testing is the data that

00:25:38,909 --> 00:25:44,759
it tested against so I know Phi just has

00:25:41,909 --> 00:25:46,409
fixtures but yeah is there any way in

00:25:44,759 --> 00:25:48,179
order to conveniently create fixtures of

00:25:46,409 --> 00:25:50,460
whatever you want to do and how do you

00:25:48,179 --> 00:25:52,230
go about including the particular data

00:25:50,460 --> 00:25:54,600
for the testing particularly if you

00:25:52,230 --> 00:25:56,580
don't know about you know for a

00:25:54,600 --> 00:25:58,499
particular data it is failing so how do

00:25:56,580 --> 00:26:00,509
you get that in sorry set up site I mean

00:25:58,499 --> 00:26:02,519
test fixes I guess is just a it's just a

00:26:00,509 --> 00:26:03,990
generic term for how do you set up the

00:26:02,519 --> 00:26:05,639
environments or your test run and and

00:26:03,990 --> 00:26:07,740
part of that can be including setting

00:26:05,639 --> 00:26:09,960
specific sets of data inside a database

00:26:07,740 --> 00:26:13,409
or a file store there are a number of

00:26:09,960 --> 00:26:15,419
libraries for that probably my

00:26:13,409 --> 00:26:16,649
sophisticated one I think I put it on

00:26:15,419 --> 00:26:17,820
the last slide is written by a chap

00:26:16,649 --> 00:26:21,330
called Robert Collins he's actually at

00:26:17,820 --> 00:26:25,499
the conference did I put a link to it on

00:26:21,330 --> 00:26:26,990
their test tools is Robert's package

00:26:25,499 --> 00:26:29,009
which contains a number of things

00:26:26,990 --> 00:26:31,980
specifically it's got a test fixture

00:26:29,009 --> 00:26:33,720
library in it and the one on the

00:26:31,980 --> 00:26:35,399
simplistic link called test fixtures

00:26:33,720 --> 00:26:36,659
also is very good slightly different

00:26:35,399 --> 00:26:38,850
approach but they're both very good for

00:26:36,659 --> 00:26:42,860
setting up the state so databases file

00:26:38,850 --> 00:26:42,860
stores no sequel databases that kind of

00:26:43,470 --> 00:26:54,720
okay I think we're all done thank you

00:26:45,240 --> 00:26:56,759
very much coffee it's on behalf of PyCon

00:26:54,720 --> 00:26:59,789
Australia I'd like to give you this

00:26:56,759 --> 00:27:01,679
thank you very much from ritual lovely

00:26:59,789 --> 00:27:04,610
key mark a lot of mug cheers thanks fix

00:27:01,679 --> 00:27:04,610

YouTube URL: https://www.youtube.com/watch?v=P-AhpukDIik


