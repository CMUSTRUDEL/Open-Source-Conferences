Title: Tinkering with Tkinter
Publication date: 2013-07-11
Playlist: Pycon Australia 2013
Description: 
	Russell Keith-Magee
http://2013.pycon-au.org/schedule/30033/view_talk
Tkinter - the Python wrapper to the Tk graphics library - has been part of the Python standard library since very early on. However, that inclusion hasn't translated into extensive use.

There was a very good reason for this. Tk's documentation was beyond awful. And if you managed to get over that hurdle, Tkinter apps looked awful - they had a woefully inadequate set of widgets, styled with the very best of mid 1990's open s
Captions: 
	00:00:00,000 --> 00:00:06,810
all right good afternoon everybody our

00:00:02,879 --> 00:00:08,189
last presentation in this session our

00:00:06,810 --> 00:00:09,929
next presenter is a seven year veteran

00:00:08,189 --> 00:00:12,059
of the django core team and president of

00:00:09,929 --> 00:00:13,590
the django software foundation this year

00:00:12,059 --> 00:00:14,250
he was lead organizer of django con

00:00:13,590 --> 00:00:15,509
Australia

00:00:14,250 --> 00:00:16,800
we're not contributing to django his

00:00:15,509 --> 00:00:19,560
hobbies include asking questions at

00:00:16,800 --> 00:00:21,779
conferences to speak to us about saying

00:00:19,560 --> 00:00:29,099
that isn't django please welcome dr.

00:00:21,779 --> 00:00:31,560
Russel Keith McGee okay so thank you all

00:00:29,099 --> 00:00:34,649
very much as Ben I said I'm Russell

00:00:31,560 --> 00:00:36,510
Keith McGee my day job is as CTO and

00:00:34,649 --> 00:00:38,489
co-founder of trades cloud we're a cloud

00:00:36,510 --> 00:00:40,020
provider of services software as a

00:00:38,489 --> 00:00:41,520
service to trades people doing

00:00:40,020 --> 00:00:43,070
back-office organization stuff for

00:00:41,520 --> 00:00:45,450
plumbers electricians that sort of thing

00:00:43,070 --> 00:00:47,039
if you're interested in migrating to

00:00:45,450 --> 00:00:48,719
Perth we're likely to be hiring soon so

00:00:47,039 --> 00:00:49,739
come and come and have a chat or if

00:00:48,719 --> 00:00:52,829
you're already in Perth come and have a

00:00:49,739 --> 00:00:54,570
chat to me and as Ben I said that's just

00:00:52,829 --> 00:00:56,940
my day job in my spare time I'm a core

00:00:54,570 --> 00:00:59,460
developer on the Django project have

00:00:56,940 --> 00:01:01,199
been since January 2006 president of the

00:00:59,460 --> 00:01:03,090
Django Software Foundation since 2010

00:01:01,199 --> 00:01:05,309
for those who don't know the Django

00:01:03,090 --> 00:01:07,640
Software Foundation is the IPE legal

00:01:05,309 --> 00:01:10,350
fundraising arm of the Django project

00:01:07,640 --> 00:01:13,290
but for a twist

00:01:10,350 --> 00:01:15,360
Django isn't why I'm here today I'm I

00:01:13,290 --> 00:01:16,950
got on my django juice out on Friday at

00:01:15,360 --> 00:01:19,380
the mini conference and I'm here today

00:01:16,950 --> 00:01:21,509
to introduce you or if you're old enough

00:01:19,380 --> 00:01:23,490
reintroduce you to a somewhat neglected

00:01:21,509 --> 00:01:26,490
corner of Python standard library a

00:01:23,490 --> 00:01:27,920
module called tick hunter why on earth

00:01:26,490 --> 00:01:30,390
would I want to do such a thing

00:01:27,920 --> 00:01:32,640
after all to quote the Python wiki

00:01:30,390 --> 00:01:34,500
Cameron Laird calls the yearly decision

00:01:32,640 --> 00:01:37,140
to keep TK enter as one of the minor

00:01:34,500 --> 00:01:38,700
traditions of the Python world that is

00:01:37,140 --> 00:01:40,229
to say TK entities regularly put on the

00:01:38,700 --> 00:01:42,450
executioner's block but it's saved at

00:01:40,229 --> 00:01:44,520
last minute I would like to use this

00:01:42,450 --> 00:01:46,200
opportunity to mount a defense of TK

00:01:44,520 --> 00:01:47,729
inter and more than that I'd like to

00:01:46,200 --> 00:01:51,899
suggest that we should all be using it a

00:01:47,729 --> 00:01:55,979
lot more than we currently are so what

00:01:51,899 --> 00:01:59,100
is TK inter alright TK inter is pythons

00:01:55,979 --> 00:02:00,420
interface to TK what's TK it's the

00:01:59,100 --> 00:02:02,729
graphics toolkit that came as part of

00:02:00,420 --> 00:02:04,799
tickle for the youngins in the audience

00:02:02,729 --> 00:02:06,600
tickle or the tool control language is a

00:02:04,799 --> 00:02:08,129
scripting language it's a similar sort

00:02:06,600 --> 00:02:11,280
of vintage to Python itself that was

00:02:08,129 --> 00:02:13,380
started around 1990 it was very popular

00:02:11,280 --> 00:02:15,990
in the UNIX world in the 1990s

00:02:13,380 --> 00:02:17,400
it's raison d'Ãªtre was to be a common

00:02:15,990 --> 00:02:19,260
scripting language that you could embed

00:02:17,400 --> 00:02:20,570
into other UNIX tools and UNIX was just

00:02:19,260 --> 00:02:24,420
sort of coming into its own because of

00:02:20,570 --> 00:02:27,650
well the freeing up of BSD and and Linux

00:02:24,420 --> 00:02:29,820
coming on annex windows was around and

00:02:27,650 --> 00:02:31,620
still had this idea about sort of a

00:02:29,820 --> 00:02:32,820
visual basic for UNIX essentially that

00:02:31,620 --> 00:02:35,430
we could have this common language to

00:02:32,820 --> 00:02:37,320
control all these tools now as a

00:02:35,430 --> 00:02:41,070
language it's a bit of a queer odd

00:02:37,320 --> 00:02:42,690
language but it's it has one very very

00:02:41,070 --> 00:02:44,940
interesting property every datatype

00:02:42,690 --> 00:02:47,160
including code could be manipulated as a

00:02:44,940 --> 00:02:48,840
string and this made it very very easy

00:02:47,160 --> 00:02:50,130
to integrate with other systems because

00:02:48,840 --> 00:02:51,300
you only really need to implement a

00:02:50,130 --> 00:02:52,830
string into a string processing

00:02:51,300 --> 00:02:55,050
interface to actually get that that

00:02:52,830 --> 00:02:56,190
binding happening now it's part of its

00:02:55,050 --> 00:02:57,510
you know it's designed to be easy to

00:02:56,190 --> 00:02:59,760
integrate so it was an easy to integrate

00:02:57,510 --> 00:03:02,490
language and essentially that's how tek

00:02:59,760 --> 00:03:04,640
works as an engine TK can display GUI

00:03:02,490 --> 00:03:07,530
windows dialogs buttons and so on and

00:03:04,640 --> 00:03:08,790
tickle into phases with TK using a

00:03:07,530 --> 00:03:10,740
string layer or using string interface

00:03:08,790 --> 00:03:12,120
and it's the simplicity of that

00:03:10,740 --> 00:03:13,470
interface which is what makes it

00:03:12,120 --> 00:03:15,210
interesting from our perspective as

00:03:13,470 --> 00:03:18,210
Python as Python developers because

00:03:15,210 --> 00:03:20,670
there are TK interfaces to Perl to Ruby

00:03:18,210 --> 00:03:22,440
as well as Python because it is so easy

00:03:20,670 --> 00:03:24,390
to write an interface you pass strings

00:03:22,440 --> 00:03:26,040
to the TK engine and windows appear and

00:03:24,390 --> 00:03:27,540
buttons appear and lo your brand new

00:03:26,040 --> 00:03:29,460
language has a fully functioning

00:03:27,540 --> 00:03:32,970
graphics toolkit for building user

00:03:29,460 --> 00:03:35,280
interfaces so on paper this sounds

00:03:32,970 --> 00:03:39,840
fantastic why is the Python wiki so

00:03:35,280 --> 00:03:43,650
unenthusiastic well like all software TK

00:03:39,840 --> 00:03:45,690
has evolved over time if you're of a

00:03:43,650 --> 00:03:47,520
similar sort of vintage to myself then

00:03:45,690 --> 00:03:49,800
your memory of tickle TK is probably

00:03:47,520 --> 00:03:51,900
something a little bit like this

00:03:49,800 --> 00:03:54,270
Times New Roman text regardless of what

00:03:51,900 --> 00:03:55,800
operating system you're on colors that

00:03:54,270 --> 00:03:58,350
do not even begin to remotely

00:03:55,800 --> 00:04:01,470
approximate system defaults the very

00:03:58,350 --> 00:04:04,890
best icons that X BMP icons that money

00:04:01,470 --> 00:04:07,080
can't buy extremely primitive widget

00:04:04,890 --> 00:04:10,260
sets you could get buttons and lists but

00:04:07,080 --> 00:04:12,780
no trees they were all rendered using

00:04:10,260 --> 00:04:14,220
motif widgets tiles and I don't know if

00:04:12,780 --> 00:04:17,220
any of you have actually remember using

00:04:14,220 --> 00:04:19,070
motif essentially everything in motif

00:04:17,220 --> 00:04:21,180
was a button so you would end up with

00:04:19,070 --> 00:04:23,130
when you got to things like check boxes

00:04:21,180 --> 00:04:24,930
it wasn't a box with a checkmark in it

00:04:23,130 --> 00:04:25,590
until it was on it was a box that would

00:04:24,930 --> 00:04:27,690
look like it was

00:04:25,590 --> 00:04:29,040
pressed or a box that wasn't pressed and

00:04:27,690 --> 00:04:30,810
if you had two of them next to each

00:04:29,040 --> 00:04:32,610
other and you only had two options you

00:04:30,810 --> 00:04:35,130
would be hard-pressed to tell which one

00:04:32,610 --> 00:04:36,720
was on and which one was off

00:04:35,130 --> 00:04:39,510
and so that was regardless of whether

00:04:36,720 --> 00:04:40,560
you're on OS X or Windows or gtk or QT

00:04:39,510 --> 00:04:44,790
or whatever else is your underlying

00:04:40,560 --> 00:04:46,919
which is it at the API level it had a

00:04:44,790 --> 00:04:49,169
mind-numbing Lee complex layout API

00:04:46,919 --> 00:04:51,030
using this this approach called PAC and

00:04:49,169 --> 00:04:52,590
there's a bright shiny penny to anyone

00:04:51,030 --> 00:04:55,889
who can actually explain how the hell

00:04:52,590 --> 00:04:59,100
pack works and to make matters worse the

00:04:55,889 --> 00:05:01,430
documentation was the usual mid-90s open

00:04:59,100 --> 00:05:06,419
source standard which is to say they

00:05:01,430 --> 00:05:09,419
existed so why am I being so bullish on

00:05:06,419 --> 00:05:10,800
TK inter well two things have changed

00:05:09,419 --> 00:05:14,639
two very important things have changed

00:05:10,800 --> 00:05:16,950
the first is TK 8.5 everything if the

00:05:14,639 --> 00:05:18,690
last time you saw TK inter was was in

00:05:16,950 --> 00:05:21,889
the 90s or even in the mid to mid

00:05:18,690 --> 00:05:25,320
nineties TK is not the same anymore in

00:05:21,889 --> 00:05:27,210
ticket 8.5 came out in December of 2007

00:05:25,320 --> 00:05:29,729
and introduced something called TK tile

00:05:27,210 --> 00:05:31,919
which was a new theming engine which

00:05:29,729 --> 00:05:34,080
meant that system colors system fonts

00:05:31,919 --> 00:05:35,520
system widgets now became the default

00:05:34,080 --> 00:05:37,919
style when you started laying out your

00:05:35,520 --> 00:05:40,050
is read user interfaces so as a result

00:05:37,919 --> 00:05:41,430
dialogues look like system native

00:05:40,050 --> 00:05:42,780
dialogues windows look like system

00:05:41,430 --> 00:05:44,130
native windows and in the case of the

00:05:42,780 --> 00:05:45,930
dialogues more often than not they

00:05:44,130 --> 00:05:47,610
actually are the system native dialogue

00:05:45,930 --> 00:05:49,380
so when you have a file widget or four

00:05:47,610 --> 00:05:51,090
Open File widget you're actually using

00:05:49,380 --> 00:05:53,550
your operating systems open file widget

00:05:51,090 --> 00:05:55,710
not some weird created thing that T's on

00:05:53,550 --> 00:05:59,070
some UNIX TK guide that won't be a good

00:05:55,710 --> 00:06:01,349
idea built-in motif there's also a new

00:05:59,070 --> 00:06:03,660
layout system called grid which unlike

00:06:01,349 --> 00:06:05,580
pack makes sense and there's a lot

00:06:03,660 --> 00:06:07,169
closer to the sort of lay up systems

00:06:05,580 --> 00:06:08,880
that you'd be familiar with if you've

00:06:07,169 --> 00:06:12,360
ever done any sort of GUI programming in

00:06:08,880 --> 00:06:15,570
an API like Java swing or something like

00:06:12,360 --> 00:06:17,580
that and the widget set is now a lot

00:06:15,570 --> 00:06:20,070
richer by default it's not perfect there

00:06:17,580 --> 00:06:22,560
are still some sort of summer missions

00:06:20,070 --> 00:06:24,030
that I would be useful to have but it

00:06:22,560 --> 00:06:25,530
definitely covers a lot more of the

00:06:24,030 --> 00:06:27,570
basics at the very least you have a very

00:06:25,530 --> 00:06:30,960
good canvas widget you have a very good

00:06:27,570 --> 00:06:32,580
tree widget that you can now use the

00:06:30,960 --> 00:06:35,610
second thing that's changed the docs

00:06:32,580 --> 00:06:37,469
don't suck anymore an unofficial website

00:06:35,610 --> 00:06:39,120
called TK Doc's as emerged alright

00:06:37,469 --> 00:06:44,310
someone who actually is a TK

00:06:39,120 --> 00:06:46,560
fan and it is quite frankly awesome

00:06:44,310 --> 00:06:48,930
it is both tutorial and reference and

00:06:46,560 --> 00:06:52,050
the docs don't assume it is literally

00:06:48,930 --> 00:06:55,139
tech hey Doc's not tickle Doc's about TK

00:06:52,050 --> 00:06:57,540
so all of the dot all the examples they

00:06:55,139 --> 00:07:00,050
give are cross language so every example

00:06:57,540 --> 00:07:03,030
is given in tickle Perl Ruby and Python

00:07:00,050 --> 00:07:05,250
now the Doc's aren't complete it is a

00:07:03,030 --> 00:07:07,320
work in progress especially when you get

00:07:05,250 --> 00:07:09,210
to the reference section but even in

00:07:07,320 --> 00:07:11,100
their incomplete form they're pretty

00:07:09,210 --> 00:07:13,440
good and they can give you at least

00:07:11,100 --> 00:07:15,900
enough of an indication of where in the

00:07:13,440 --> 00:07:17,010
TK official Docs you might want to look

00:07:15,900 --> 00:07:22,169
for certain of the at certain other

00:07:17,010 --> 00:07:24,510
details okay so one does not simply TK

00:07:22,169 --> 00:07:26,190
inter well yes one does let's walk

00:07:24,510 --> 00:07:27,210
through an example in this case where

00:07:26,190 --> 00:07:28,919
I'm actually going to use here the

00:07:27,210 --> 00:07:31,440
example from TK Doc's itself the first

00:07:28,919 --> 00:07:32,550
tutorial from TK Doc's it's essentially

00:07:31,440 --> 00:07:34,770
what we're going to do is build an

00:07:32,550 --> 00:07:38,010
Imperial to metric feet to meters

00:07:34,770 --> 00:07:40,320
converter so step one a man a plan

00:07:38,010 --> 00:07:41,250
cattle palermo sketch out the GUI will

00:07:40,320 --> 00:07:43,289
want to build we're going to have a

00:07:41,250 --> 00:07:45,240
single dialog it's going to pop up we're

00:07:43,289 --> 00:07:49,500
going to have a texting but your input

00:07:45,240 --> 00:07:51,570
to say X feet is equivalent to Y meters

00:07:49,500 --> 00:07:55,260
and a big calculate button you press the

00:07:51,570 --> 00:07:56,700
calculate button and magic happens we

00:07:55,260 --> 00:07:58,020
then need to sort of look at this and

00:07:56,700 --> 00:07:59,880
say okay well how can we lay this out

00:07:58,020 --> 00:08:00,990
what's the sort of the arrangement or

00:07:59,880 --> 00:08:02,820
alignment structure we want to have

00:08:00,990 --> 00:08:04,530
inside that well like a let's week and

00:08:02,820 --> 00:08:06,419
we can divide this into a grid we've got

00:08:04,530 --> 00:08:07,889
a three by three grid there we've got a

00:08:06,419 --> 00:08:09,270
line for one widget a line for the

00:08:07,889 --> 00:08:12,389
second widget a calculate is on the

00:08:09,270 --> 00:08:13,680
third third line the calculate button

00:08:12,389 --> 00:08:15,150
can probably sit in the middle of that

00:08:13,680 --> 00:08:17,190
block the feet and meters we need to

00:08:15,150 --> 00:08:19,620
stick to that side of the column there

00:08:17,190 --> 00:08:21,120
in the middle column when the window

00:08:19,620 --> 00:08:22,949
expands we want the middle column to

00:08:21,120 --> 00:08:24,510
sort of grow to absorb the additional

00:08:22,949 --> 00:08:26,820
space we don't we don't mind if that

00:08:24,510 --> 00:08:28,139
middle column gets bigger but the two to

00:08:26,820 --> 00:08:29,970
side columns you want to keep about the

00:08:28,139 --> 00:08:32,570
same size and he is equivalent to we

00:08:29,970 --> 00:08:35,070
want to stick to that side of the window

00:08:32,570 --> 00:08:36,570
okay so that grid will form the basis of

00:08:35,070 --> 00:08:37,950
our layout and actually putting this

00:08:36,570 --> 00:08:40,680
putting this whole widget to go putting

00:08:37,950 --> 00:08:42,089
this whole window together so what are

00:08:40,680 --> 00:08:44,039
we going to do now we're going to open

00:08:42,089 --> 00:08:47,430
up a a Python shell and start writing

00:08:44,039 --> 00:08:49,680
some writing some TK code now you can

00:08:47,430 --> 00:08:50,779
actually do this in a live Python ripple

00:08:49,680 --> 00:08:52,610
shell

00:08:50,779 --> 00:08:54,139
and you can watch the window get built

00:08:52,610 --> 00:08:55,639
up as you're typing these Python come

00:08:54,139 --> 00:08:57,290
out so this it won't be interactive

00:08:55,639 --> 00:08:59,029
until you actually say run the event

00:08:57,290 --> 00:09:02,060
loop but you can build the window and

00:08:59,029 --> 00:09:04,069
watch it happening so okay we import TK

00:09:02,060 --> 00:09:06,259
internally input T TK so we've got all

00:09:04,069 --> 00:09:09,079
the the widget sets the t TK is the

00:09:06,259 --> 00:09:12,050
extra native styled widget set this code

00:09:09,079 --> 00:09:14,689
is in python to python 3 there is a

00:09:12,050 --> 00:09:16,790
subtle change the naming of the the

00:09:14,689 --> 00:09:19,309
input so again the TK docks are actually

00:09:16,790 --> 00:09:21,740
in python 3 by default so if you want to

00:09:19,309 --> 00:09:23,120
see the changes want them down first

00:09:21,740 --> 00:09:25,309
step we need to initialize our wrote

00:09:23,120 --> 00:09:27,350
window we create our rigged window TK

00:09:25,309 --> 00:09:29,629
and we set its title so we now have at

00:09:27,350 --> 00:09:33,709
the end of this a window with a title on

00:09:29,629 --> 00:09:36,079
it next step we set up our main frame

00:09:33,709 --> 00:09:38,540
that root window is essentially an empty

00:09:36,079 --> 00:09:40,069
a container with nothing in it and by

00:09:38,540 --> 00:09:43,970
default it doesn't have any style it's

00:09:40,069 --> 00:09:45,800
just a white window if we want the

00:09:43,970 --> 00:09:47,449
window to look like a window on our

00:09:45,800 --> 00:09:49,519
operating system we need to stick into

00:09:47,449 --> 00:09:51,740
it a frame went to which we can then put

00:09:49,519 --> 00:09:54,139
additional content so we define

00:09:51,740 --> 00:09:56,120
ourselves a main frame every wind jet

00:09:54,139 --> 00:09:58,009
widget has a parent so the frame its

00:09:56,120 --> 00:09:59,389
parent is the root window and we're

00:09:58,009 --> 00:10:01,100
going to say okay around the out Soler's

00:09:59,389 --> 00:10:01,850
around the inside of that frame we want

00:10:01,100 --> 00:10:03,559
to have some padding

00:10:01,850 --> 00:10:06,410
north-south-east-west same as you would

00:10:03,559 --> 00:10:09,439
for HTML or padding we're then going to

00:10:06,410 --> 00:10:11,059
say ok this main frame is in a grid it's

00:10:09,439 --> 00:10:13,370
on its route but on the route windows

00:10:11,059 --> 00:10:15,800
grid and it's going to be in column 0

00:10:13,370 --> 00:10:18,589
column 0 row 0 and it's sticky to all

00:10:15,800 --> 00:10:21,939
four edges so that means that the main

00:10:18,589 --> 00:10:25,759
route window is a grid of one square and

00:10:21,939 --> 00:10:27,079
when it expands and contracts this main

00:10:25,759 --> 00:10:28,699
frame is going to stick to all four

00:10:27,079 --> 00:10:30,079
sides so essentially this main frame is

00:10:28,699 --> 00:10:33,410
going to end up being exactly the same

00:10:30,079 --> 00:10:35,449
size of the root window always and

00:10:33,410 --> 00:10:39,740
lastly we configure the root windows

00:10:35,449 --> 00:10:41,329
grid to say column 0 has a weight of 1

00:10:39,740 --> 00:10:42,620
row 0 has a weight of 1

00:10:41,329 --> 00:10:45,319
what does weight mean it means where

00:10:42,620 --> 00:10:46,490
does the expansion go when the window

00:10:45,319 --> 00:10:48,439
when the window grows

00:10:46,490 --> 00:10:49,759
ok so weight 1 essentially the weights

00:10:48,439 --> 00:10:50,959
are then distributed if you've got

00:10:49,759 --> 00:10:52,249
multiple columns the weights are

00:10:50,959 --> 00:10:54,649
distributed amongst those columns if

00:10:52,249 --> 00:10:56,629
you've got one column that has twice the

00:10:54,649 --> 00:10:58,370
weight of another column then when the

00:10:56,629 --> 00:10:59,449
window expands twice the expansion will

00:10:58,370 --> 00:10:59,670
happen on that side as will happen on

00:10:59,449 --> 00:11:03,390
that

00:10:59,670 --> 00:11:04,650
on the second one we'll see a better

00:11:03,390 --> 00:11:06,800
example of that in when we start

00:11:04,650 --> 00:11:09,480
configuring the second grid later on

00:11:06,800 --> 00:11:10,380
next step we need some input okay so

00:11:09,480 --> 00:11:12,930
what we're going to do is define a

00:11:10,380 --> 00:11:14,970
string var which is a darker sort of

00:11:12,930 --> 00:11:16,830
data placeholder it's like the model in

00:11:14,970 --> 00:11:19,080
a Model View controller and it's where

00:11:16,830 --> 00:11:20,910
the view which is the widget itself gets

00:11:19,080 --> 00:11:22,830
its information from if you change the

00:11:20,910 --> 00:11:24,570
widget the string var will change and if

00:11:22,830 --> 00:11:27,600
you change the string var the widget

00:11:24,570 --> 00:11:29,910
will change we then define ourselves an

00:11:27,600 --> 00:11:32,040
entry widget which is a TK Tico's

00:11:29,910 --> 00:11:34,200
version of a simple text field and bind

00:11:32,040 --> 00:11:35,490
it to the string var and we say okay

00:11:34,200 --> 00:11:36,600
this this text input is going to have a

00:11:35,490 --> 00:11:37,740
width of seven so that's you know how

00:11:36,600 --> 00:11:39,780
many how many characters we all allow

00:11:37,740 --> 00:11:41,940
this is widget to have bounds to the

00:11:39,780 --> 00:11:43,530
feet string VAR and we stick it on a

00:11:41,940 --> 00:11:44,820
grid because we know our original grid

00:11:43,530 --> 00:11:47,100
position this is going to be in column

00:11:44,820 --> 00:11:49,080
one row zero so on them in the middle on

00:11:47,100 --> 00:11:50,550
the first row and it's sticky to the

00:11:49,080 --> 00:11:51,780
west in the east so it will stick itself

00:11:50,550 --> 00:11:53,820
to the left and right side of the window

00:11:51,780 --> 00:11:55,620
as it expands but it won't on the north

00:11:53,820 --> 00:11:59,040
and south it'll stick in the middle

00:11:55,620 --> 00:12:00,180
essentially will stay in the middle next

00:11:59,040 --> 00:12:01,530
we need somewhere to put the results

00:12:00,180 --> 00:12:02,820
okay so we're going to do the same thing

00:12:01,530 --> 00:12:04,440
here as we did to cap your input but

00:12:02,820 --> 00:12:05,760
this time we don't use an entry we just

00:12:04,440 --> 00:12:10,770
put a label so we're just going to print

00:12:05,760 --> 00:12:13,140
the output of the of the calculation the

00:12:10,770 --> 00:12:15,480
label is just a piece of text it's bound

00:12:13,140 --> 00:12:17,070
to the meters string var so when you

00:12:15,480 --> 00:12:19,680
change the value of the meter string via

00:12:17,070 --> 00:12:21,120
the label will change as well and we're

00:12:19,680 --> 00:12:23,970
going to stick it in column one row one

00:12:21,120 --> 00:12:25,820
so it's going to be in the middle of our

00:12:23,970 --> 00:12:28,500
three by three grid that we have on our

00:12:25,820 --> 00:12:31,040
main window and again it is sticky to

00:12:28,500 --> 00:12:31,040
the west in the east

00:12:31,220 --> 00:12:35,310
we then have a bits of decoration and

00:12:33,780 --> 00:12:37,410
around the outside three other labels

00:12:35,310 --> 00:12:38,850
these ones aren't bound to text files

00:12:37,410 --> 00:12:41,190
because we actually just wanted to have

00:12:38,850 --> 00:12:42,870
a piece of text that says feet or says

00:12:41,190 --> 00:12:46,050
it's equivalent to or says meters

00:12:42,870 --> 00:12:48,330
they're stuck in column two row zero so

00:12:46,050 --> 00:12:50,250
it's the top right square of our grid

00:12:48,330 --> 00:12:53,070
sticky to the west so it's going to

00:12:50,250 --> 00:12:55,620
stick to the inside is equivalent to is

00:12:53,070 --> 00:12:59,370
column zero row one so one row down on

00:12:55,620 --> 00:13:02,550
the on the left hand side and sticky to

00:12:59,370 --> 00:13:04,080
the east and meters column twos on the

00:13:02,550 --> 00:13:09,780
far right on the right hand side one row

00:13:04,080 --> 00:13:11,220
down sticky to the west and then we do

00:13:09,780 --> 00:13:13,110
the heavy lifting we say okay we've got

00:13:11,220 --> 00:13:13,290
a function that actually does our feet

00:13:13,110 --> 00:13:15,630
too

00:13:13,290 --> 00:13:16,680
meters calculation now I'm being a

00:13:15,630 --> 00:13:18,870
little bit lazy here

00:13:16,680 --> 00:13:23,310
feet yet and meters dot set is

00:13:18,870 --> 00:13:25,500
manipulating the the feet text var and

00:13:23,310 --> 00:13:29,670
the meters text bar they are being used

00:13:25,500 --> 00:13:31,230
here as Global's which is a bit lazy if

00:13:29,670 --> 00:13:32,759
we were doing this for a serious app and

00:13:31,230 --> 00:13:34,050
not just a hey let's demo this quickly

00:13:32,759 --> 00:13:35,550
we would all this stuff would be wrapped

00:13:34,050 --> 00:13:37,589
up into a broader class and we'd be

00:13:35,550 --> 00:13:40,110
using self dot feet or self dot meters

00:13:37,589 --> 00:13:41,699
or we could use func tools dot partial

00:13:40,110 --> 00:13:43,170
to bind to feet and meters object into

00:13:41,699 --> 00:13:44,130
the function call the important thing to

00:13:43,170 --> 00:13:46,019
basically note here though is that

00:13:44,130 --> 00:13:48,389
calculate is just a function it is a

00:13:46,019 --> 00:13:50,880
callable and the callable is what is

00:13:48,389 --> 00:13:53,100
going to get get vote when we hit the Go

00:13:50,880 --> 00:13:55,380
button we're going to put a button ttk

00:13:53,100 --> 00:13:57,209
button in the main frame it's button is

00:13:55,380 --> 00:13:59,250
text we'll say calculate and when it is

00:13:57,209 --> 00:14:02,160
pressed call calculate call the

00:13:59,250 --> 00:14:03,990
calculate method when you stick it in

00:14:02,160 --> 00:14:06,480
the grid bottom right and it's going to

00:14:03,990 --> 00:14:07,769
be sticky to that site we're also just

00:14:06,480 --> 00:14:09,839
to make everything nice and easy we're

00:14:07,769 --> 00:14:12,420
going to bind a keystroke to it as well

00:14:09,839 --> 00:14:14,459
so when the root window senses that

00:14:12,420 --> 00:14:16,170
Enter or return has been pressed that

00:14:14,459 --> 00:14:17,430
will also call the calculate button so

00:14:16,170 --> 00:14:19,769
regardless of whether you click on the

00:14:17,430 --> 00:14:22,319
button or you press Enter the calculate

00:14:19,769 --> 00:14:24,839
methods going to get invoked and at this

00:14:22,319 --> 00:14:26,430
point we can basically that a rip we do

00:14:24,839 --> 00:14:29,339
some last little bits of setup we can

00:14:26,430 --> 00:14:31,199
the the the widget tree has a sort of

00:14:29,339 --> 00:14:32,550
self reflective property so you can say

00:14:31,199 --> 00:14:34,589
okay let's have a look at all the

00:14:32,550 --> 00:14:35,699
children in the mainframe and configure

00:14:34,589 --> 00:14:38,130
them to have the same amount of padding

00:14:35,699 --> 00:14:39,959
so an x and y amount of padding going to

00:14:38,130 --> 00:14:42,389
be on all of them we can specifically

00:14:39,959 --> 00:14:43,350
say give the feet entry box focus so the

00:14:42,389 --> 00:14:45,660
cursor is going to be stuck to that

00:14:43,350 --> 00:14:47,699
window initially and we're going to

00:14:45,660 --> 00:14:51,240
configure our weights now here we're

00:14:47,699 --> 00:14:54,240
going to modify the the weight of column

00:14:51,240 --> 00:14:55,649
one to be one so all of the weight will

00:14:54,240 --> 00:14:57,510
be stuck to the middle column when you

00:14:55,649 --> 00:14:59,220
expand the window it means that of your

00:14:57,510 --> 00:15:00,839
three columns all of the expansion will

00:14:59,220 --> 00:15:02,399
happen in the middle the outside two

00:15:00,839 --> 00:15:04,620
columns will basically stay exactly the

00:15:02,399 --> 00:15:06,420
same width and then you run the main

00:15:04,620 --> 00:15:08,779
loop and off you go you will have a

00:15:06,420 --> 00:15:12,829
running application on your desktop

00:15:08,779 --> 00:15:14,550
that's doing the calculations yep a

00:15:12,829 --> 00:15:16,860
little thing to note there that is a

00:15:14,550 --> 00:15:18,620
blocking call okay so your GUI won't

00:15:16,860 --> 00:15:20,670
repaint unless it's in the main loop

00:15:18,620 --> 00:15:21,540
sorry your GUI won't repay unless it's

00:15:20,670 --> 00:15:23,370
actually running through the main loop

00:15:21,540 --> 00:15:25,380
so if you have an expensive calculation

00:15:23,370 --> 00:15:26,500
you kind of need to tight you need to

00:15:25,380 --> 00:15:28,030
slice it up into smaller

00:15:26,500 --> 00:15:29,680
so that your window will actually real

00:15:28,030 --> 00:15:31,600
will repaint or you've got to put that

00:15:29,680 --> 00:15:33,160
operation into a separate thread so that

00:15:31,600 --> 00:15:35,110
the GUI can actually paint itself that's

00:15:33,160 --> 00:15:36,880
not particularly unusual in GUI stuff if

00:15:35,110 --> 00:15:39,310
you've ever done like swing for example

00:15:36,880 --> 00:15:41,140
and the result you actually get

00:15:39,310 --> 00:15:44,410
something that on OS X looks like an OS

00:15:41,140 --> 00:15:48,400
X dialog box it looks like an OS X

00:15:44,410 --> 00:15:49,660
application okay so there's a whole lot

00:15:48,400 --> 00:15:51,280
more this is that's a blinding

00:15:49,660 --> 00:15:52,720
introduction you can go to TK Docs if

00:15:51,280 --> 00:15:54,100
you want to see a lot more of a tutorial

00:15:52,720 --> 00:15:57,070
you can see a lot more of a sort of

00:15:54,100 --> 00:15:58,600
widgets you have access to there's a lot

00:15:57,070 --> 00:16:00,310
more in the box there are you can you

00:15:58,600 --> 00:16:01,960
can have all sorts of dialogues using

00:16:00,310 --> 00:16:03,310
system dialogues there are menus you can

00:16:01,960 --> 00:16:04,810
interact with your menus and actually

00:16:03,310 --> 00:16:06,970
make it interact like the video your

00:16:04,810 --> 00:16:08,320
math menu can be up there there are a

00:16:06,970 --> 00:16:10,690
whole lot of more a lot more widgets

00:16:08,320 --> 00:16:13,030
including an extremely rich text widget

00:16:10,690 --> 00:16:14,710
how rich should you say it takes you

00:16:13,030 --> 00:16:17,460
about five lines of code to get full

00:16:14,710 --> 00:16:20,920
syntax highlighting in a text widget

00:16:17,460 --> 00:16:22,450
there is a really really rich canvas

00:16:20,920 --> 00:16:24,100
widget as well which is you sort of you

00:16:22,450 --> 00:16:25,420
drawing drawing boxes and interacting

00:16:24,100 --> 00:16:27,040
with boxes on a screen or int go with

00:16:25,420 --> 00:16:31,330
graphics a vector graphics on the screen

00:16:27,040 --> 00:16:32,650
and if at the end of the day you find

00:16:31,330 --> 00:16:34,300
that something in Python doesn't exist

00:16:32,650 --> 00:16:36,130
you can actually get down to the raw TK

00:16:34,300 --> 00:16:38,170
level you actually have access to the

00:16:36,130 --> 00:16:40,030
raw bindings to poke what you need to

00:16:38,170 --> 00:16:42,010
poke and the thing that's worth

00:16:40,030 --> 00:16:43,630
reiterating here is that it's all in the

00:16:42,010 --> 00:16:45,310
standard library if you haven't if you

00:16:43,630 --> 00:16:46,630
have got a Mac you've basically got this

00:16:45,310 --> 00:16:48,520
sitting there in this in the standard

00:16:46,630 --> 00:16:50,290
system system Python if you've installed

00:16:48,520 --> 00:16:51,940
Python from from other library from

00:16:50,290 --> 00:16:53,860
other other operating systems it's there

00:16:51,940 --> 00:16:55,750
in the standard library it's a battery

00:16:53,860 --> 00:16:58,000
that is there in the box for Python 2

00:16:55,750 --> 00:16:59,350
and python 3 no dependencies no binary

00:16:58,000 --> 00:17:05,610
compilation nothing confusing to do

00:16:59,350 --> 00:17:09,010
there ok so what well I've got a theory

00:17:05,610 --> 00:17:10,600
and to explain my theory I want to walk

00:17:09,010 --> 00:17:14,620
down memory lane or at least my memory

00:17:10,600 --> 00:17:16,840
lane a little bit in 1988 my 4 so my

00:17:14,620 --> 00:17:19,180
first computer was a Commodore 64 but I

00:17:16,840 --> 00:17:20,980
really just some way ok here we go I

00:17:19,180 --> 00:17:22,810
really cut my teeth programming in the

00:17:20,980 --> 00:17:25,150
late 80s using the ball and sweet so

00:17:22,810 --> 00:17:26,740
turbo Pascal ball and C++ languages

00:17:25,150 --> 00:17:28,510
languages like that and there were two

00:17:26,740 --> 00:17:30,580
very notable properties of these tools

00:17:28,510 --> 00:17:32,290
they both they had really really fast

00:17:30,580 --> 00:17:33,970
compilers that sort of how how ball and

00:17:32,290 --> 00:17:35,710
made us money was with really fast

00:17:33,970 --> 00:17:37,630
compilers and they had a very

00:17:35,710 --> 00:17:39,880
distinctive user interface it

00:17:37,630 --> 00:17:41,890
was an 80 by 25 full-color cursors

00:17:39,880 --> 00:17:43,810
interface which sounds primitive now but

00:17:41,890 --> 00:17:45,670
at the time that was cutting-edge it was

00:17:43,810 --> 00:17:49,990
really pushing the limits of your your

00:17:45,670 --> 00:17:51,220
CGA four colors monitor and it was

00:17:49,990 --> 00:17:53,140
really really pushing the hardware in

00:17:51,220 --> 00:17:55,450
terms of what you could do it was a full

00:17:53,140 --> 00:17:57,760
IDE in that sense but a really good

00:17:55,450 --> 00:17:58,810
compiler and a really good interactive

00:17:57,760 --> 00:18:01,510
debugger search you could see what the

00:17:58,810 --> 00:18:04,330
hell was going on with your code in

00:18:01,510 --> 00:18:06,790
about 1994 I discovered UNIX and the

00:18:04,330 --> 00:18:10,600
good neutral Shane GCC another really

00:18:06,790 --> 00:18:14,440
fast really good compiler and gdb exists

00:18:10,600 --> 00:18:17,200
it has almost no user interface at all

00:18:14,440 --> 00:18:19,720
it is an extraordinarily powerful

00:18:17,200 --> 00:18:21,520
debugger but almost toxic from a user

00:18:19,720 --> 00:18:22,900
interface point of view there is one

00:18:21,520 --> 00:18:25,030
line of context every time you talk

00:18:22,900 --> 00:18:26,560
write a line of code and incredibly

00:18:25,030 --> 00:18:30,760
arcane syntax for setting breakpoints

00:18:26,560 --> 00:18:32,140
into into a piece of code around 2000 it

00:18:30,760 --> 00:18:35,590
was where I basically started taking

00:18:32,140 --> 00:18:36,820
Python somewhat seriously and Python

00:18:35,590 --> 00:18:38,560
took everything it could from the UNIX

00:18:36,820 --> 00:18:40,090
world under the hood it's got a really

00:18:38,560 --> 00:18:41,590
powerful debugger pdb is an

00:18:40,090 --> 00:18:43,600
extraordinarily powerful piece of a

00:18:41,590 --> 00:18:45,850
piece of piece of kit but it's got the

00:18:43,600 --> 00:18:49,570
same glistening user interfaces gdb if

00:18:45,850 --> 00:18:56,910
anything made worse because in order to

00:18:49,570 --> 00:18:59,980
debug my code I have to deface it what

00:18:56,910 --> 00:19:03,220
and okay we go through to twenty twenty

00:18:59,980 --> 00:19:04,300
thirteen i p DB p DB plus plus make

00:19:03,220 --> 00:19:06,190
things a little bit better they give you

00:19:04,300 --> 00:19:07,690
a bit of context on the screen pu DB is

00:19:06,190 --> 00:19:09,700
trying to resurrect a cursor style user

00:19:07,690 --> 00:19:11,110
interface when PT b exists but you've

00:19:09,700 --> 00:19:12,280
got to get WX windows working and

00:19:11,110 --> 00:19:14,320
there's another bright shiny penny for

00:19:12,280 --> 00:19:16,030
anyone who can get that happening or you

00:19:14,320 --> 00:19:17,950
have your fully fledged ideas like

00:19:16,030 --> 00:19:20,440
visual studio or apply charm and

00:19:17,950 --> 00:19:23,230
languages like that my theory is that

00:19:20,440 --> 00:19:25,480
Cobblers children have no shoes

00:19:23,230 --> 00:19:27,100
25 years after i learnt to program with

00:19:25,480 --> 00:19:28,690
the cursors based debugger i'm actually

00:19:27,100 --> 00:19:30,100
telling people as part of professional

00:19:28,690 --> 00:19:32,910
practice to just put some print

00:19:30,100 --> 00:19:34,750
statements in to help you debug this and

00:19:32,910 --> 00:19:36,250
there's n there's all the other things

00:19:34,750 --> 00:19:37,870
that i'm doing on a daily basis testing

00:19:36,250 --> 00:19:39,550
profiling coverage things that I wasn't

00:19:37,870 --> 00:19:42,160
doing 25 years ago but for which I don't

00:19:39,550 --> 00:19:44,920
have any kind of user interface so over

00:19:42,160 --> 00:19:46,480
the last 25 years the quality of the

00:19:44,920 --> 00:19:47,950
development tools especially in the UNIX

00:19:46,480 --> 00:19:49,390
open source space essentially haven't

00:19:47,950 --> 00:19:50,220
improved and if anything they've got a

00:19:49,390 --> 00:19:52,140
little bit

00:19:50,220 --> 00:19:53,880
despite the river development of retina

00:19:52,140 --> 00:19:55,440
displays window graphic systems and a

00:19:53,880 --> 00:19:57,000
deeper understanding of user interface

00:19:55,440 --> 00:19:58,860
and user experience the effects that a

00:19:57,000 --> 00:19:59,460
humane Eden user interface can have on

00:19:58,860 --> 00:20:01,200
productivity

00:19:59,460 --> 00:20:05,150
we're playing or applying almost none of

00:20:01,200 --> 00:20:07,260
that to our own tools so why is that

00:20:05,150 --> 00:20:08,520
some of it I think comes down to a

00:20:07,260 --> 00:20:11,280
misinterpretation of UNIX philosophy

00:20:08,520 --> 00:20:14,040
UNIX tells us to do one thing and do it

00:20:11,280 --> 00:20:15,660
well which is a fine philosophy GCC

00:20:14,040 --> 00:20:17,820
compiles it just compiles and it does a

00:20:15,660 --> 00:20:19,920
very good job gdb just D bugs and does a

00:20:17,820 --> 00:20:22,440
very good job grep and said do just one

00:20:19,920 --> 00:20:24,240
thing but the UNIX philosophy doesn't

00:20:22,440 --> 00:20:27,000
say that your user interface has to suck

00:20:24,240 --> 00:20:29,550
as well if you're dealing with grep and

00:20:27,000 --> 00:20:31,410
said or even GCC for that matter yes a

00:20:29,550 --> 00:20:32,910
command line interface probably is the

00:20:31,410 --> 00:20:34,980
most appropriate user interface or at

00:20:32,910 --> 00:20:37,410
least one of several appropriate user

00:20:34,980 --> 00:20:41,250
interfaces why is a single line of text

00:20:37,410 --> 00:20:43,860
the natural interface for a debugger my

00:20:41,250 --> 00:20:46,110
theory we can fix this we have the

00:20:43,860 --> 00:20:48,390
technology or more specifically we have

00:20:46,110 --> 00:20:50,220
tech enter if you've got Python

00:20:48,390 --> 00:20:52,470
installed on your laptop you have at

00:20:50,220 --> 00:20:54,330
your disposal a rich cross-platform set

00:20:52,470 --> 00:20:56,790
of GUI tools with a clean pythonic

00:20:54,330 --> 00:20:58,140
interface and better still and this is

00:20:56,790 --> 00:21:00,360
where I think it really gets powerful if

00:20:58,140 --> 00:21:02,550
you've got a GUI tool installed in your

00:21:00,360 --> 00:21:04,410
virtual environment it's it's easy to

00:21:02,550 --> 00:21:06,780
install as a pip install my tool and

00:21:04,410 --> 00:21:08,490
that tool will run in your virtual

00:21:06,780 --> 00:21:10,290
environment you don't have to Splunk

00:21:08,490 --> 00:21:12,360
around with configuration settings

00:21:10,290 --> 00:21:14,370
dialogs in your in your IDE to try and

00:21:12,360 --> 00:21:16,020
work out how your IDE is deciding to run

00:21:14,370 --> 00:21:17,940
your code in a particular way you just

00:21:16,020 --> 00:21:20,760
use the same user environment that

00:21:17,940 --> 00:21:24,150
you're using for everything else now

00:21:20,760 --> 00:21:24,480
it's not just the theory ah to prove my

00:21:24,150 --> 00:21:25,920
point

00:21:24,480 --> 00:21:27,660
I'd like to publicly announce here

00:21:25,920 --> 00:21:32,580
something that I've been to Kin Turing

00:21:27,660 --> 00:21:34,200
with for a little while testing anyone

00:21:32,580 --> 00:21:36,300
might talk at Jango con the other day

00:21:34,200 --> 00:21:37,890
was a testing was about testing it has

00:21:36,300 --> 00:21:39,210
been something that I've been passionate

00:21:37,890 --> 00:21:41,730
about ever since essentially I left

00:21:39,210 --> 00:21:43,110
University and discovered testing by

00:21:41,730 --> 00:21:46,500
being thrown headfirst into it at my

00:21:43,110 --> 00:21:49,230
first job here is the user interface you

00:21:46,500 --> 00:21:51,270
currently have for testing you run your

00:21:49,230 --> 00:21:52,890
test suite and you get the lots of

00:21:51,270 --> 00:21:54,750
little happy dots going along there and

00:21:52,890 --> 00:21:56,010
I'm running my tests we hear questions

00:21:54,750 --> 00:21:57,750
for you how long is this test suite

00:21:56,010 --> 00:21:59,940
going to run for how long's left to run

00:21:57,750 --> 00:22:02,220
how long did which one of those tests

00:21:59,940 --> 00:22:03,730
was the slow test when it ran that F

00:22:02,220 --> 00:22:05,290
that's in there

00:22:03,730 --> 00:22:07,540
sort of about the fourth line down what

00:22:05,290 --> 00:22:09,010
was the cause of that the X that's three

00:22:07,540 --> 00:22:10,930
or three oh I have a better inch along

00:22:09,010 --> 00:22:12,070
from it what was the cause of that was

00:22:10,930 --> 00:22:13,960
is there something we need to be worried

00:22:12,070 --> 00:22:15,520
about The Grates longer skips there is

00:22:13,960 --> 00:22:17,650
that because I've gotten to install the

00:22:15,520 --> 00:22:19,680
dependency these tests that have

00:22:17,650 --> 00:22:24,040
generated warning in the middle of them

00:22:19,680 --> 00:22:25,600
which test cause that this is not a

00:22:24,040 --> 00:22:30,030
helpful user interface for running a

00:22:25,600 --> 00:22:32,410
test so I'd like to introduce cricket

00:22:30,030 --> 00:22:34,540
cricket is a graphical tool to help you

00:22:32,410 --> 00:22:35,770
run tests wits it's called cricket why

00:22:34,540 --> 00:22:38,530
is it called cricket well because Test

00:22:35,770 --> 00:22:42,090
cricket is a very long game and you need

00:22:38,530 --> 00:22:42,090
all the help you can to make a variable

00:22:43,800 --> 00:22:47,500
how do you install it well at k you go

00:22:46,570 --> 00:22:48,970
and you get open up your virtual

00:22:47,500 --> 00:22:50,890
environment you say pip install cricket

00:22:48,970 --> 00:22:53,170
and then you say Python - M cricket

00:22:50,890 --> 00:22:55,810
Django and it will run your Django unit

00:22:53,170 --> 00:22:58,300
test suite I will discover your test

00:22:55,810 --> 00:22:59,400
suite and then well what's in your test

00:22:58,300 --> 00:23:01,870
suite and then it will let you run it

00:22:59,400 --> 00:23:03,820
notable features down the left-hand side

00:23:01,870 --> 00:23:04,300
you've got a tree full of your full test

00:23:03,820 --> 00:23:05,950
suite

00:23:04,300 --> 00:23:07,360
it has discovered everything that your

00:23:05,950 --> 00:23:09,370
normal Django test Runner would discover

00:23:07,360 --> 00:23:11,170
across the top you've got buttons to run

00:23:09,370 --> 00:23:12,700
the full suite only the selected tests

00:23:11,170 --> 00:23:14,200
or the tests that have failed so you can

00:23:12,700 --> 00:23:15,400
select items in the tree and say I want

00:23:14,200 --> 00:23:18,220
to run that one that one and that one

00:23:15,400 --> 00:23:19,660
and that whole test case class along the

00:23:18,220 --> 00:23:20,500
bottom this test suite is actually

00:23:19,660 --> 00:23:22,510
running at the moment we've got a

00:23:20,500 --> 00:23:24,250
progress bar telling us how long how far

00:23:22,510 --> 00:23:26,140
along progress we are we've got a time

00:23:24,250 --> 00:23:28,780
estimate about 48 seconds remaining on

00:23:26,140 --> 00:23:32,110
this a summary of with passed 389 failed

00:23:28,780 --> 00:23:34,630
1 1 expected failure skipped 155 tests

00:23:32,110 --> 00:23:36,340
there's actually two trees there on all

00:23:34,630 --> 00:23:38,050
tests tree and a problems tree if you

00:23:36,340 --> 00:23:39,670
tap over to that second tab you'll see

00:23:38,050 --> 00:23:41,650
the subset of those tests that actually

00:23:39,670 --> 00:23:44,680
have failed like tests non-default cache

00:23:41,650 --> 00:23:46,780
this test suite is currently running so

00:23:44,680 --> 00:23:49,120
I can select the test that has failed

00:23:46,780 --> 00:23:51,040
and I can see the error trace back for

00:23:49,120 --> 00:23:53,470
that test whilst the test suite is

00:23:51,040 --> 00:23:55,300
actually still running I can see from

00:23:53,470 --> 00:23:58,570
the tree of up there it's a fail big red

00:23:55,300 --> 00:24:00,880
F it's a red big red item in the tree as

00:23:58,570 --> 00:24:02,680
well all the greens have passed the Blue

00:24:00,880 --> 00:24:04,720
has been skipped I can select all those

00:24:02,680 --> 00:24:09,520
and see the state of the run tests while

00:24:04,720 --> 00:24:10,840
the test suite is still going so it

00:24:09,520 --> 00:24:12,910
makes it very very easy to see patterns

00:24:10,840 --> 00:24:14,980
of failure it's easy to rerun just the

00:24:12,910 --> 00:24:16,540
fail tests it's easy to rerun

00:24:14,980 --> 00:24:17,530
just the test from a second module or

00:24:16,540 --> 00:24:19,390
every second test

00:24:17,530 --> 00:24:20,590
or run all the tests for disable that

00:24:19,390 --> 00:24:22,030
one in particular if you double-click on

00:24:20,590 --> 00:24:24,640
our test entry it'll take it out of the

00:24:22,030 --> 00:24:26,260
list of tests that are executed so it

00:24:24,640 --> 00:24:27,880
makes it very easy to run your test wait

00:24:26,260 --> 00:24:31,060
and see what's going on while your test

00:24:27,880 --> 00:24:34,240
suite is executing now ok it is early

00:24:31,060 --> 00:24:37,000
days um it is it does one thing but does

00:24:34,240 --> 00:24:38,980
one thing very well it runs Jango test

00:24:37,000 --> 00:24:41,050
Suites it has been released as a version

00:24:38,980 --> 00:24:43,780
point 1 it at the moment doesn't run on

00:24:41,050 --> 00:24:46,840
Python 3 it only runs Jango test Suites

00:24:43,780 --> 00:24:48,580
supporting both the pre 1.6 and 1.6 test

00:24:46,840 --> 00:24:50,380
discovery modes but it does have a

00:24:48,580 --> 00:24:52,330
back-end API that would allow you to put

00:24:50,380 --> 00:24:54,810
in anyone elses test discovery mechanism

00:24:52,330 --> 00:24:58,770
or anyone elses test running mechanism I

00:24:54,810 --> 00:25:01,150
have been using this in production for

00:24:58,770 --> 00:25:02,410
about sort of two to three months at

00:25:01,150 --> 00:25:04,270
this point just using on a day-to-day

00:25:02,410 --> 00:25:05,410
basis to deceive line out the edges and

00:25:04,270 --> 00:25:06,940
see what's to see what's a whether

00:25:05,410 --> 00:25:07,900
whether my theory actually worked and my

00:25:06,940 --> 00:25:08,980
experience has been that it's made

00:25:07,900 --> 00:25:11,680
running my test suite a whole lot easier

00:25:08,980 --> 00:25:12,970
there are some some crusty edges that

00:25:11,680 --> 00:25:15,490
still need to be taken out of it but as

00:25:12,970 --> 00:25:16,930
a principle I think I've demonstrate to

00:25:15,490 --> 00:25:22,000
myself I've satisfied myself that this

00:25:16,930 --> 00:25:23,290
can actually work so at this point

00:25:22,000 --> 00:25:24,760
whether the command line I'm sure there

00:25:23,290 --> 00:25:25,960
at least two people in the audience it

00:25:24,760 --> 00:25:28,030
seemed to yell out one of them wants to

00:25:25,960 --> 00:25:30,010
yell pycharm to say well if you want

00:25:28,030 --> 00:25:32,320
this risk on user an IDE no yes

00:25:30,010 --> 00:25:34,300
IDs do have test runners but my

00:25:32,320 --> 00:25:35,560
experience is that IDs are a different

00:25:34,300 --> 00:25:37,030
sort of philosophy to building they're

00:25:35,560 --> 00:25:38,020
about having one great big tool that

00:25:37,030 --> 00:25:39,280
does everything and they've got to be

00:25:38,020 --> 00:25:41,350
configured to do in the right way I

00:25:39,280 --> 00:25:43,630
actually do like the UNIX philosophy

00:25:41,350 --> 00:25:45,280
what I don't like is the UNIX user

00:25:43,630 --> 00:25:48,880
interface of everything needs to be done

00:25:45,280 --> 00:25:51,190
at the command line I like using really

00:25:48,880 --> 00:25:53,230
rich editors and most ideas that I found

00:25:51,190 --> 00:25:55,120
don't have rich editors they've got okay

00:25:53,230 --> 00:25:56,380
editors but not fantastic ones and I'd

00:25:55,120 --> 00:25:57,730
like to keep using the editor that I

00:25:56,380 --> 00:26:00,430
like using and I want to be on a pick

00:25:57,730 --> 00:26:01,630
the test runner that I want to run the

00:26:00,430 --> 00:26:03,790
other person in the room wants to run

00:26:01,630 --> 00:26:05,320
something like Python test and yes pilot

00:26:03,790 --> 00:26:07,330
test does expose a much nicer

00:26:05,320 --> 00:26:09,040
command-line experience better rendering

00:26:07,330 --> 00:26:11,020
of exceptions and things like that but

00:26:09,040 --> 00:26:12,040
again it's still command liner you don't

00:26:11,020 --> 00:26:14,130
get to see all the stuff that's

00:26:12,040 --> 00:26:16,330
happening whilst a test suite is running

00:26:14,130 --> 00:26:19,480
this problem in the room wants to yell

00:26:16,330 --> 00:26:20,830
Emacs but we'll just ignore them my

00:26:19,480 --> 00:26:21,970
point here is the UNIX philosophy is

00:26:20,830 --> 00:26:23,860
right but it doesn't mean we have to be

00:26:21,970 --> 00:26:25,540
constrained the text console there are

00:26:23,860 --> 00:26:27,460
good reasons to have command-line tools

00:26:25,540 --> 00:26:28,960
compilers compilers make sense as

00:26:27,460 --> 00:26:30,750
command-line tools anything that's

00:26:28,960 --> 00:26:33,000
fetching and processing like

00:26:30,750 --> 00:26:35,040
grep orc said curl they make sense as

00:26:33,000 --> 00:26:36,210
command-line tools and it makes sense to

00:26:35,040 --> 00:26:38,280
have command-line tools as a fallback

00:26:36,210 --> 00:26:39,750
when you're operating remotely but this

00:26:38,280 --> 00:26:41,310
doesn't mean that everything needs to be

00:26:39,750 --> 00:26:44,130
stuffed into a command-line tool we can

00:26:41,310 --> 00:26:45,660
have humane user interfaces and humane

00:26:44,130 --> 00:26:48,150
interfaces for things like test runners

00:26:45,660 --> 00:26:50,610
debuggers coverage tools profiling tools

00:26:48,150 --> 00:26:52,500
we can have them cross-platform and we

00:26:50,610 --> 00:26:55,200
can have them out of the box easily

00:26:52,500 --> 00:26:57,480
installable into virtual environments so

00:26:55,200 --> 00:27:00,300
that's my pitch that's my theory and

00:26:57,480 --> 00:27:02,520
cricket is my attempt to demonstrate the

00:27:00,300 --> 00:27:03,990
theory isn't completely abstract I'd

00:27:02,520 --> 00:27:11,610
like to at this point open up for

00:27:03,990 --> 00:27:16,020
questions does Russell have a question

00:27:11,610 --> 00:27:19,290
for Russell no sorry Richard and is it

00:27:16,020 --> 00:27:23,040
on it's on excellent yep

00:27:19,290 --> 00:27:25,710
excellent I love it do you have any idea

00:27:23,040 --> 00:27:29,850
of that you said is like back-end stuff

00:27:25,710 --> 00:27:31,830
for other tests discovery yep so I am a

00:27:29,850 --> 00:27:34,110
heavy user of noes and I also use it

00:27:31,830 --> 00:27:35,430
with twisted bits to do my twisted

00:27:34,110 --> 00:27:37,950
testing it's not pretty

00:27:35,430 --> 00:27:40,860
yeah um do you have any idea of the

00:27:37,950 --> 00:27:42,960
effort I'll need to expend to have that

00:27:40,860 --> 00:27:45,150
being run or if it's possible to run

00:27:42,960 --> 00:27:46,800
that stuff with cricket okay Shh the I

00:27:45,150 --> 00:27:48,570
don't know knows well enough to better

00:27:46,800 --> 00:27:52,080
answer canonically but I suspect not a

00:27:48,570 --> 00:27:53,640
great deal the the Django wrapper is on

00:27:52,080 --> 00:27:56,130
the order of about 50 lines of code I

00:27:53,640 --> 00:27:58,410
think and it's mostly essentially saying

00:27:56,130 --> 00:28:00,660
you need to have two commands one which

00:27:58,410 --> 00:28:01,470
X echoes to the command line at the

00:28:00,660 --> 00:28:04,350
command line level

00:28:01,470 --> 00:28:05,700
echo echo a string Goddard string

00:28:04,350 --> 00:28:06,780
version of all the module names that are

00:28:05,700 --> 00:28:09,540
actually going to be tested that can be

00:28:06,780 --> 00:28:12,000
identified as targets and then a runner

00:28:09,540 --> 00:28:15,510
that can take a list of targets and

00:28:12,000 --> 00:28:16,650
execute them so it's not a huge job I

00:28:15,510 --> 00:28:18,600
can walk you so I can show you the code

00:28:16,650 --> 00:28:20,790
for the Django Runner or what codes up

00:28:18,600 --> 00:28:23,070
the Django Runner its expiry its ort of

00:28:20,790 --> 00:28:24,750
it does back off a little bit of what

00:28:23,070 --> 00:28:26,550
Django's test Runner does it sort of

00:28:24,750 --> 00:28:27,780
it's made easier by Django's test runner

00:28:26,550 --> 00:28:28,950
cuz django is just runner you

00:28:27,780 --> 00:28:31,740
potentially what i've done is take it

00:28:28,950 --> 00:28:33,120
subclass it and say for command a do

00:28:31,740 --> 00:28:35,160
everything but just don't run the test

00:28:33,120 --> 00:28:37,200
print them and the second one run all

00:28:35,160 --> 00:28:39,600
the tests as they're given to so

00:28:37,200 --> 00:28:41,399
I suspect the answer is not a lot of

00:28:39,600 --> 00:28:43,260
work I have not actually done it though

00:28:41,399 --> 00:28:43,860
so you know anything between theory and

00:28:43,260 --> 00:28:46,559
practice

00:28:43,860 --> 00:28:48,899
yeah it's a supplementary question

00:28:46,559 --> 00:28:51,000
yesterday so in the tree Ridge of the

00:28:48,899 --> 00:28:53,309
side I can like double-click a test just

00:28:51,000 --> 00:28:54,360
to run that one test I double click like

00:28:53,309 --> 00:28:56,399
she turn it off but you can click it and

00:28:54,360 --> 00:28:59,010
say run selected no I have no keyboard

00:28:56,399 --> 00:29:01,080
bindings on this at the moment okay I I

00:28:59,010 --> 00:29:02,519
do not profess that it is the best user

00:29:01,080 --> 00:29:03,630
interface I think they're probably a lot

00:29:02,519 --> 00:29:05,130
of work that could be done it is the

00:29:03,630 --> 00:29:06,539
user interface that I've built to test

00:29:05,130 --> 00:29:08,250
around with it and I'm certainly open to

00:29:06,539 --> 00:29:09,720
suggestions about whether whether ENTER

00:29:08,250 --> 00:29:11,760
should be the run binding or the turn

00:29:09,720 --> 00:29:17,130
off binding or you know whatever I think

00:29:11,760 --> 00:29:18,929
it's awesome things hi I'm a PI test

00:29:17,130 --> 00:29:20,309
user but I think I would be super

00:29:18,929 --> 00:29:22,649
interested in seeing that work with PI

00:29:20,309 --> 00:29:25,799
test and this might be kind of the same

00:29:22,649 --> 00:29:29,279
as asking about twisted but do you think

00:29:25,799 --> 00:29:31,289
that's gonna work ok with tests being

00:29:29,279 --> 00:29:33,750
farmed out and parallelized in terms of

00:29:31,289 --> 00:29:35,850
seeing the what do you call it the

00:29:33,750 --> 00:29:37,049
absolute from it being the interface

00:29:35,850 --> 00:29:40,200
that and the reason why this actually

00:29:37,049 --> 00:29:41,850
works as a you know it runs in your

00:29:40,200 --> 00:29:43,529
virtual environment is essentially what

00:29:41,850 --> 00:29:44,970
it is is a Python script that starts in

00:29:43,529 --> 00:29:47,100
your virtual environment that then

00:29:44,970 --> 00:29:49,559
starts sub processes which inherit the

00:29:47,100 --> 00:29:52,799
same plasma environment where's the same

00:29:49,559 --> 00:29:54,799
UNIX environment essentially that then

00:29:52,799 --> 00:29:57,720
do things and there's there's a there's

00:29:54,799 --> 00:29:59,429
a pipe back channel which reports this

00:29:57,720 --> 00:30:01,019
test has passed this test has failed

00:29:59,429 --> 00:30:02,429
this test has got this warning in it and

00:30:01,019 --> 00:30:04,080
there's a protocol for passing that

00:30:02,429 --> 00:30:06,779
information back so as long as your

00:30:04,080 --> 00:30:09,799
Runner or you can run your tests in such

00:30:06,779 --> 00:30:12,269
a way that the output to the screen is

00:30:09,799 --> 00:30:13,860
essentially in a JSON text adjacent

00:30:12,269 --> 00:30:17,940
strings described in a particular format

00:30:13,860 --> 00:30:19,889
then you can integrate it it's whether

00:30:17,940 --> 00:30:21,149
that is easy or hard depends more upon

00:30:19,889 --> 00:30:22,950
the test tool you're running it with if

00:30:21,149 --> 00:30:24,600
it if that if you are farming out of

00:30:22,950 --> 00:30:26,279
somewhere else that shouldn't matter as

00:30:24,600 --> 00:30:27,600
far as I understand as long as your

00:30:26,279 --> 00:30:29,429
runner is able to get that information

00:30:27,600 --> 00:30:31,169
from whatever remotely it's running and

00:30:29,429 --> 00:30:35,370
pass it back to the GUI through through

00:30:31,169 --> 00:30:38,580
that back channel thanks for the talk

00:30:35,370 --> 00:30:40,860
and the turbo Pascal screenshot lots of

00:30:38,580 --> 00:30:43,019
memories for yes exactly so having

00:30:40,860 --> 00:30:45,899
written the app now in a modern version

00:30:43,019 --> 00:30:47,700
of TK into what sort of dark corners or

00:30:45,899 --> 00:30:50,060
gotchas did you find along the way that

00:30:47,700 --> 00:30:53,720
we should be aware of and

00:30:50,060 --> 00:30:55,700
the dark corners that I hit are okay so

00:30:53,720 --> 00:30:57,800
there there are a couple of refresh

00:30:55,700 --> 00:30:59,420
issues that it has some interesting

00:30:57,800 --> 00:31:00,980
refresh behaviors in some places I

00:30:59,420 --> 00:31:02,960
suspect that is sort of more on the

00:31:00,980 --> 00:31:04,790
lines of a bug with tkinter rather than

00:31:02,960 --> 00:31:07,340
actually better bug with TK rather than

00:31:04,790 --> 00:31:09,670
being an inherent problem with TK as an

00:31:07,340 --> 00:31:14,090
approach one I mean I can actually show

00:31:09,670 --> 00:31:16,550
close this out I can bring it over here

00:31:14,090 --> 00:31:19,190
is a test suite there isn't so for

00:31:16,550 --> 00:31:21,860
example there isn't a widget for a panel

00:31:19,190 --> 00:31:23,210
separator or there is but it's kind of

00:31:21,860 --> 00:31:24,980
it doesn't have a visualization that's

00:31:23,210 --> 00:31:28,070
there and it does some interesting

00:31:24,980 --> 00:31:29,720
things with dragging it's now it's not

00:31:28,070 --> 00:31:34,730
there to go so if you if you drag hard

00:31:29,720 --> 00:31:36,620
enough you can you can lose it's not

00:31:34,730 --> 00:31:38,090
going to do it familiy go it's possible

00:31:36,620 --> 00:31:41,150
to lose the handle which you shouldn't

00:31:38,090 --> 00:31:42,620
be able to do yes the the biggest one

00:31:41,150 --> 00:31:44,240
that I hit rovers is literally the same

00:31:42,620 --> 00:31:46,520
thing you get on any user interface

00:31:44,240 --> 00:31:48,230
stuff is that your your event loop must

00:31:46,520 --> 00:31:49,640
do lots and lots of very very small

00:31:48,230 --> 00:31:51,770
things you can't do anything complicated

00:31:49,640 --> 00:31:53,000
your event loop and that requires a bit

00:31:51,770 --> 00:31:54,440
of mental bending but it requires mental

00:31:53,000 --> 00:31:55,850
bending on any user interface toolkit

00:31:54,440 --> 00:31:57,260
essentially so you you take your heavy

00:31:55,850 --> 00:31:59,120
lifting you move it into our separate

00:31:57,260 --> 00:32:00,290
thread or separate process and then you

00:31:59,120 --> 00:32:01,520
have a communications back-channel it

00:32:00,290 --> 00:32:06,400
says turn on the widget and that's all

00:32:01,520 --> 00:32:09,200
it does the other area is there are some

00:32:06,400 --> 00:32:11,750
if you hit the edge of if you need a

00:32:09,200 --> 00:32:12,740
widget that does something that isn't

00:32:11,750 --> 00:32:15,200
out of the box

00:32:12,740 --> 00:32:19,400
you kind of have to hit TK natively

00:32:15,200 --> 00:32:22,220
pretty quickly so I have been tinkering

00:32:19,400 --> 00:32:23,990
with a graphical debugger as well so

00:32:22,220 --> 00:32:26,450
this was this was let's prove I can do

00:32:23,990 --> 00:32:27,770
it in TK at all okay my real goal is I

00:32:26,450 --> 00:32:29,180
want to build a debugger that's that

00:32:27,770 --> 00:32:30,020
actually debug his code rather than

00:32:29,180 --> 00:32:34,150
doing one line at a time

00:32:30,020 --> 00:32:36,260
and to do that you need a line count

00:32:34,150 --> 00:32:38,480
rich text widget with syntax

00:32:36,260 --> 00:32:42,350
highlighting that isn't editable and the

00:32:38,480 --> 00:32:44,600
rich text widget that TK gives you is

00:32:42,350 --> 00:32:46,430
editable by default and can't be made

00:32:44,600 --> 00:32:48,860
uneditable you actually have to get into

00:32:46,430 --> 00:32:51,170
a fairly low level TK level to eat the

00:32:48,860 --> 00:32:53,540
editing messages that are coming through

00:32:51,170 --> 00:32:56,300
it can be done in about 15 lines of TK

00:32:53,540 --> 00:32:59,270
the secret is finding the 15 lines DK

00:32:56,300 --> 00:33:00,890
and I'm not enough of a TK expert yet to

00:32:59,270 --> 00:33:02,630
make that sort of really natural

00:33:00,890 --> 00:33:09,350
so that would be probably the only two

00:33:02,630 --> 00:33:10,940
things I really flag there Thanks let's

00:33:09,350 --> 00:33:13,970
just good today yeah well the last time

00:33:10,940 --> 00:33:16,309
I used to quartic hours back in 1996 and

00:33:13,970 --> 00:33:18,590
I well I actually enjoyed the pack

00:33:16,309 --> 00:33:20,000
layout oh okay okay so you can explain

00:33:18,590 --> 00:33:21,140
it to me cellophane had to be great I

00:33:20,000 --> 00:33:23,179
can't actually remember but I just

00:33:21,140 --> 00:33:25,220
remember back at the time it kind of fit

00:33:23,179 --> 00:33:26,570
my mind well and that says about me but

00:33:25,220 --> 00:33:30,110
oh the context the question I was going

00:33:26,570 --> 00:33:32,270
to ask is how did you find TK as just a

00:33:30,110 --> 00:33:34,540
general API I mean my memory of that was

00:33:32,270 --> 00:33:36,799
that it had just a very low kind of

00:33:34,540 --> 00:33:39,200
mental overhead to sort of get things

00:33:36,799 --> 00:33:41,179
done yeah okay so you think hey yeah so

00:33:39,200 --> 00:33:42,500
TK I can't really comment because I've

00:33:41,179 --> 00:33:45,650
only really been using it through TK

00:33:42,500 --> 00:33:48,470
inter but it is a very it is a very

00:33:45,650 --> 00:33:50,450
pythonic interface in the sense that you

00:33:48,470 --> 00:33:51,830
know what you've got a button I want to

00:33:50,450 --> 00:33:53,419
put a button on the screen I want to put

00:33:51,830 --> 00:33:54,799
it there I want to put in there in a

00:33:53,419 --> 00:33:57,500
grid and when you press it call this

00:33:54,799 --> 00:33:59,030
function that's what I want my interface

00:33:57,500 --> 00:34:00,650
to be like you know yeah and like I said

00:33:59,030 --> 00:34:03,620
you can do that in a ripple shell and

00:34:00,650 --> 00:34:07,100
just bind the Korbel in to the method

00:34:03,620 --> 00:34:10,750
and if it goes so yeah it was a very

00:34:07,100 --> 00:34:12,950
natural interface to get into so yeah I

00:34:10,750 --> 00:34:14,240
have quite enjoyed you see and I've done

00:34:12,950 --> 00:34:16,369
plenty of GUI programming in the past

00:34:14,240 --> 00:34:18,710
with swing and a QT and stuff like that

00:34:16,369 --> 00:34:20,000
and this is probably the fastest UI code

00:34:18,710 --> 00:34:21,590
I've ever been able to just get off the

00:34:20,000 --> 00:34:23,389
ground with a running product by virtue

00:34:21,590 --> 00:34:24,919
of it being in a language I like that

00:34:23,389 --> 00:34:31,700
you can rapidly turnaround you know etc

00:34:24,919 --> 00:34:34,369
so really simple one visual designer hey

00:34:31,700 --> 00:34:38,480
yeah I don't have one I as well once

00:34:34,369 --> 00:34:39,830
sorry does one exists for T gained I TK

00:34:38,480 --> 00:34:43,399
into I don't know I think there are some

00:34:39,830 --> 00:34:44,659
40k but I'm not sure not that I've just

00:34:43,399 --> 00:34:46,850
not not that I've actually actually

00:34:44,659 --> 00:34:47,780
actively gone looking for certainly

00:34:46,850 --> 00:34:48,980
would be interesting seeing if there was

00:34:47,780 --> 00:34:50,960
one and you know that in itself would be

00:34:48,980 --> 00:34:55,280
an interesting TK project to sort of met

00:34:50,960 --> 00:34:56,510
oh right if there isn't one so is it

00:34:55,280 --> 00:34:59,080
like a active state Komodo has one

00:34:56,510 --> 00:34:59,080

YouTube URL: https://www.youtube.com/watch?v=yI7NYgP54sw


