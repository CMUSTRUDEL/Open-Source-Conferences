Title: The life of a web request - techniques for measuring and improving Django application performance
Publication date: 2013-07-11
Playlist: Pycon Australia 2013
Description: 
	Roger Barnes
http://2013.pycon-au.org/schedule/30053/view_talk
The connection between sub-second web application performance and revenue is becoming more and more apparent with established companies regularly reporting the benefits of reducing page load times.

This talk will cover:
* Designing for performance
* Approaches to instrumenting and measuring application performance
* Areas of focus for both front-end and back-end improvement
* Techniques, tools and modules available in Django-l
Captions: 
	00:00:00,000 --> 00:00:05,040
okay ladies and gentlemen our next

00:00:02,550 --> 00:00:06,569
speaker is Roger Barnes Roger is an

00:00:05,040 --> 00:00:08,010
experienced cross-functional software

00:00:06,569 --> 00:00:09,389
developers specializing in web

00:00:08,010 --> 00:00:11,010
application development and deployment

00:00:09,389 --> 00:00:13,230
across the entire application lifecycle

00:00:11,010 --> 00:00:15,360
he has run a web development business

00:00:13,230 --> 00:00:16,680
been a key driver of internal enterprise

00:00:15,360 --> 00:00:18,630
deployments at a large enterprise

00:00:16,680 --> 00:00:19,859
software vendor co-founded a sec startup

00:00:18,630 --> 00:00:22,260
in the travel industry and is currently

00:00:19,859 --> 00:00:23,609
doing platen specific contract work to

00:00:22,260 --> 00:00:25,350
talk to us about measuring and improving

00:00:23,609 --> 00:00:31,949
Django application performance please

00:00:25,350 --> 00:00:34,200
welcome Roger Barnes thanks everyone hi

00:00:31,949 --> 00:00:35,790
and thanks for coming to my talk as

00:00:34,200 --> 00:00:38,700
Russell said I'm going to talk about the

00:00:35,790 --> 00:00:41,850
life of a web request and how that works

00:00:38,700 --> 00:00:43,680
in terms of web performance my name is

00:00:41,850 --> 00:00:46,289
Raja you can find me on Twitter email

00:00:43,680 --> 00:00:48,450
and the slides will go up on SlideShare

00:00:46,289 --> 00:00:50,460
after this at some point there's a

00:00:48,450 --> 00:00:52,230
couple of slides full of resources so

00:00:50,460 --> 00:00:53,820
feel free if you don't want to take

00:00:52,230 --> 00:00:57,059
photos of slides that will be available

00:00:53,820 --> 00:01:00,780
later so hopefully you're here to hear

00:00:57,059 --> 00:01:04,170
about that I skip a slide aspects of

00:01:00,780 --> 00:01:06,479
site performance basically measuring

00:01:04,170 --> 00:01:08,520
everything a very important factor of

00:01:06,479 --> 00:01:11,010
all this web performance stuff is it's

00:01:08,520 --> 00:01:12,210
very easy to fix the wrong thing or

00:01:11,010 --> 00:01:13,470
think you've improved the site

00:01:12,210 --> 00:01:16,439
performance and you've completely missed

00:01:13,470 --> 00:01:18,240
some other factor and I'm going to cover

00:01:16,439 --> 00:01:19,439
a little bit of how to do this i'm going

00:01:18,240 --> 00:01:20,909
to start very high level and i'm

00:01:19,439 --> 00:01:22,229
probably not going to go as deep as

00:01:20,909 --> 00:01:23,970
everyone might want all the way through

00:01:22,229 --> 00:01:25,140
so please keep in mind that i'm not

00:01:23,970 --> 00:01:27,060
going to cover everything on web

00:01:25,140 --> 00:01:30,329
performance because 20 minutes is not

00:01:27,060 --> 00:01:31,380
very long to do that in particular i'm

00:01:30,329 --> 00:01:34,290
going to focus more on the user

00:01:31,380 --> 00:01:36,780
perspective of web performance so rather

00:01:34,290 --> 00:01:38,700
than looking at say load testing I'm

00:01:36,780 --> 00:01:40,409
sorry I'm not covering that things like

00:01:38,700 --> 00:01:42,360
users / several requests per second i'm

00:01:40,409 --> 00:01:43,979
looking more at the user perspective how

00:01:42,360 --> 00:01:46,320
the performance of a website looks to

00:01:43,979 --> 00:01:47,939
them how long it takes in terms of

00:01:46,320 --> 00:01:51,689
seconds per request rather than the

00:01:47,939 --> 00:01:55,320
other way around so about me i am i'm

00:01:51,689 --> 00:01:57,600
not a psychologist from victoria I'm not

00:01:55,320 --> 00:02:00,270
an actor I'm not that guy a footballer

00:01:57,600 --> 00:02:02,450
and that's not my mug shot I'm also not

00:02:00,270 --> 00:02:05,100
a medical marijuana doctor from Pasadena

00:02:02,450 --> 00:02:06,689
but I am a web developer a software

00:02:05,100 --> 00:02:09,869
developer I've been doing this for a

00:02:06,689 --> 00:02:13,100
long time and I've always been a full

00:02:09,869 --> 00:02:15,470
stack in that I've been from conception

00:02:13,100 --> 00:02:17,210
to delivery of this stuff which i think

00:02:15,470 --> 00:02:19,220
is very important and often in bigger

00:02:17,210 --> 00:02:20,960
organizations if you're the web

00:02:19,220 --> 00:02:22,910
developer and you have a designer and

00:02:20,960 --> 00:02:25,070
someone else doing infrastructure it's

00:02:22,910 --> 00:02:26,480
very easy to forget about the aspects of

00:02:25,070 --> 00:02:31,130
performance that actually go across all

00:02:26,480 --> 00:02:32,780
three so why should we care well it's

00:02:31,130 --> 00:02:34,160
actually been shown quite consistently

00:02:32,780 --> 00:02:36,920
over the last few years and I excuse

00:02:34,160 --> 00:02:38,750
these badly scaled infographics

00:02:36,920 --> 00:02:41,050
basically the performance can affect

00:02:38,750 --> 00:02:43,550
things like engagement bounce rate

00:02:41,050 --> 00:02:46,550
conversion and abandoned and abandonment

00:02:43,550 --> 00:02:48,860
rates search engine ranking can even be

00:02:46,550 --> 00:02:51,260
affected that's now used as a signal in

00:02:48,860 --> 00:02:52,640
Google search results and most

00:02:51,260 --> 00:02:54,230
importantly the bottom line of all this

00:02:52,640 --> 00:02:57,560
that is important for a lot of people is

00:02:54,230 --> 00:02:59,360
of course revenue amazon I think at one

00:02:57,560 --> 00:03:01,700
point had something like a hundred

00:02:59,360 --> 00:03:04,790
thousand dollar revenue difference 4.1

00:03:01,700 --> 00:03:05,900
of a second per day like you have to

00:03:04,790 --> 00:03:09,800
look up the numbers I'm sorry I'm I

00:03:05,900 --> 00:03:11,360
think I got that wrong on top of that at

00:03:09,800 --> 00:03:13,430
the same time websites and web

00:03:11,360 --> 00:03:16,700
applications are getting much larger and

00:03:13,430 --> 00:03:18,440
much more complex there's more requests

00:03:16,700 --> 00:03:19,760
there's more data flying around there's

00:03:18,440 --> 00:03:21,680
retina displays so there's more

00:03:19,760 --> 00:03:23,450
bandwidth being used for things all that

00:03:21,680 --> 00:03:24,710
sort of stuff adds up and that flies in

00:03:23,450 --> 00:03:29,150
the face of what we're trying to make

00:03:24,710 --> 00:03:30,440
faster for example HTTP archive actually

00:03:29,150 --> 00:03:32,750
keeps track of a lot of this stuff and

00:03:30,440 --> 00:03:35,150
as a couple of weeks ago the average web

00:03:32,750 --> 00:03:36,620
page request measured through their

00:03:35,150 --> 00:03:38,990
system which actually tracks a whole lot

00:03:36,620 --> 00:03:42,370
of different websites was a 1.3 mega

00:03:38,990 --> 00:03:44,900
bytes and 85 requests for one web page

00:03:42,370 --> 00:03:47,420
now some things to keep in mind here is

00:03:44,900 --> 00:03:50,150
that might be okay if you only have

00:03:47,420 --> 00:03:51,200
desktop users and they're only local so

00:03:50,150 --> 00:03:52,850
you're in Sydney you're selling to

00:03:51,200 --> 00:03:55,610
people in Sydney and you're hosted in

00:03:52,850 --> 00:03:57,380
Sydney that might be okay so sometimes

00:03:55,610 --> 00:04:01,430
you need to take into account what that

00:03:57,380 --> 00:04:04,190
actually means for your users users are

00:04:01,430 --> 00:04:06,020
also increasingly mobile so now people

00:04:04,190 --> 00:04:09,050
have devices that aren't as capable as

00:04:06,020 --> 00:04:10,640
the desktop they have terrible

00:04:09,050 --> 00:04:12,620
connections relative to a wired

00:04:10,640 --> 00:04:14,720
connection their expectations at the

00:04:12,620 --> 00:04:16,820
same time are also higher so instead of

00:04:14,720 --> 00:04:19,040
you know two or three seconds being okay

00:04:16,820 --> 00:04:21,890
sub second is the kind of thing that

00:04:19,040 --> 00:04:22,970
people often expect these days and at

00:04:21,890 --> 00:04:25,250
the same time we've got this whole

00:04:22,970 --> 00:04:26,370
dichotomy of mobile versus desktop

00:04:25,250 --> 00:04:28,650
editions a website

00:04:26,370 --> 00:04:31,199
and those that are responsive some of

00:04:28,650 --> 00:04:32,820
those might look better on those mobile

00:04:31,199 --> 00:04:34,110
devices but they're actually downloading

00:04:32,820 --> 00:04:36,270
the same amount of information and that

00:04:34,110 --> 00:04:37,470
can be a huge performance hit in terms

00:04:36,270 --> 00:04:40,290
of the actual time it takes for it to

00:04:37,470 --> 00:04:42,810
appear on the screen so let's have a

00:04:40,290 --> 00:04:45,360
look at a web request I've picked at

00:04:42,810 --> 00:04:48,290
random we're not good random I I know

00:04:45,360 --> 00:04:50,220
that there's a django site in australia

00:04:48,290 --> 00:04:51,660
the person who write it might be in the

00:04:50,220 --> 00:04:56,190
room i'm not going to say who it is just

00:04:51,660 --> 00:04:58,470
in case and i did this waterfall graph

00:04:56,190 --> 00:04:59,910
of it and i came back another two

00:04:58,470 --> 00:05:01,289
hundred and two milliseconds for the the

00:04:59,910 --> 00:05:03,720
primary request that's pretty good it's

00:05:01,289 --> 00:05:08,639
fast maybe it's cached somewhere I don't

00:05:03,720 --> 00:05:10,800
know but in that first of all there was

00:05:08,639 --> 00:05:14,070
a redirect so I put in the domain name

00:05:10,800 --> 00:05:15,090
it said you need to go to WWE name so

00:05:14,070 --> 00:05:18,479
straightaway we've added a little bit of

00:05:15,090 --> 00:05:21,090
time then of course we've got some CSS

00:05:18,479 --> 00:05:22,770
so we're pulling down some stuff one of

00:05:21,090 --> 00:05:24,270
those is particularly big and for the

00:05:22,770 --> 00:05:27,330
homepage chances are you don't need all

00:05:24,270 --> 00:05:30,300
of that stuff now let's get some

00:05:27,330 --> 00:05:32,490
JavaScript and some images and 1.6

00:05:30,300 --> 00:05:34,110
seconds which is about five or six times

00:05:32,490 --> 00:05:37,020
this well more than six times the size

00:05:34,110 --> 00:05:39,240
of our initial little payload we're

00:05:37,020 --> 00:05:40,380
actually starting to render the page now

00:05:39,240 --> 00:05:41,639
if you've got enough to render the page

00:05:40,380 --> 00:05:43,080
really quickly at this point then you

00:05:41,639 --> 00:05:46,620
might come in under two seconds and

00:05:43,080 --> 00:05:50,010
you're okay in this case we're actually

00:05:46,620 --> 00:05:52,410
not done the whole document took 8.6

00:05:50,010 --> 00:05:55,500
seconds was fully loaded with a bit of

00:05:52,410 --> 00:05:58,520
extra JavaScript shenanigans at nine 177

00:05:55,500 --> 00:06:01,440
requests and 2.6 megabytes of data and

00:05:58,520 --> 00:06:02,639
this was on a good connection this is at

00:06:01,440 --> 00:06:03,840
one of those situations where if you

00:06:02,639 --> 00:06:05,070
were on a mobile device on the other

00:06:03,840 --> 00:06:07,440
side of the world with latency and

00:06:05,070 --> 00:06:09,720
everything else it can take up to 20

00:06:07,440 --> 00:06:11,190
seconds for this page to load which

00:06:09,720 --> 00:06:13,080
brings me to my first sort of key point

00:06:11,190 --> 00:06:15,030
you might be doing Django web

00:06:13,080 --> 00:06:16,889
development Neal in your part of the

00:06:15,030 --> 00:06:19,139
world but the performance golden rule is

00:06:16,889 --> 00:06:20,520
coined by Steve shooters is that eighty

00:06:19,139 --> 00:06:22,560
to ninety percent of your end user

00:06:20,520 --> 00:06:24,000
response time is going to be spent on

00:06:22,560 --> 00:06:25,470
the front end and that's probably not

00:06:24,000 --> 00:06:27,300
going to go away based on all the talk

00:06:25,470 --> 00:06:29,400
that we've had especially yesterday

00:06:27,300 --> 00:06:31,050
Jengo con about the changing nature of

00:06:29,400 --> 00:06:34,440
web applications there's a lot more

00:06:31,050 --> 00:06:35,610
going on on the front end so what that

00:06:34,440 --> 00:06:37,140
means is we have all these other

00:06:35,610 --> 00:06:39,330
considerations that aren't necessarily

00:06:37,140 --> 00:06:42,120
even related to your back

00:06:39,330 --> 00:06:47,250
development there's latency in database

00:06:42,120 --> 00:06:49,469
all kinds of things so first as I said

00:06:47,250 --> 00:06:51,000
you've got to start measuring there's a

00:06:49,469 --> 00:06:53,039
few ways you can do measurement the

00:06:51,000 --> 00:06:54,990
first of which are actually real user

00:06:53,039 --> 00:06:56,669
monitoring type of applications where

00:06:54,990 --> 00:06:58,800
you are measuring what your users are

00:06:56,669 --> 00:07:00,330
experiencing so for that there's things

00:06:58,800 --> 00:07:02,520
like Google Analytics will give you some

00:07:00,330 --> 00:07:04,469
basic timing metrics out of the box you

00:07:02,520 --> 00:07:06,840
can also instrument little bits of your

00:07:04,469 --> 00:07:08,659
front-end to actually measure that stuff

00:07:06,840 --> 00:07:10,710
in your your analytics account as well

00:07:08,659 --> 00:07:12,330
there's also the commercial offering

00:07:10,710 --> 00:07:13,919
from New Relic and there's a free plan

00:07:12,330 --> 00:07:15,270
as well you can check out which will

00:07:13,919 --> 00:07:16,800
give you that and on top of that you'll

00:07:15,270 --> 00:07:20,219
see some backend stuff if you instrument

00:07:16,800 --> 00:07:21,860
your actual application aside from real

00:07:20,219 --> 00:07:23,729
user measurement you've got that idea of

00:07:21,860 --> 00:07:25,860
synthetic testing where you're actually

00:07:23,729 --> 00:07:26,909
running your own tests you're hitting

00:07:25,860 --> 00:07:28,469
the web server yourself and you're

00:07:26,909 --> 00:07:30,060
looking at what's happening there's

00:07:28,469 --> 00:07:31,169
heaps of tools available for this but

00:07:30,060 --> 00:07:34,139
three in particular that I mentioned

00:07:31,169 --> 00:07:38,189
chrome developer tools also Firebug and

00:07:34,139 --> 00:07:41,069
alike and Firefox itself they give you

00:07:38,189 --> 00:07:42,599
things like network waterfall graphs you

00:07:41,069 --> 00:07:44,430
can look at the timeline of events in

00:07:42,599 --> 00:07:47,069
the browser you can even profile it look

00:07:44,430 --> 00:07:48,569
at memory usage this audit tab just

00:07:47,069 --> 00:07:50,580
gives you a list of stuff that you might

00:07:48,569 --> 00:07:51,719
want to think about so from that point

00:07:50,580 --> 00:07:54,930
of view it's certainly good place to

00:07:51,719 --> 00:07:57,810
start and keep an eye on another really

00:07:54,930 --> 00:08:00,150
good tool is webpagetest org this is

00:07:57,810 --> 00:08:01,409
basically a free service it's hosted in

00:08:00,150 --> 00:08:03,599
different mirrors around the world and

00:08:01,409 --> 00:08:06,539
you can point it at your website or

00:08:03,599 --> 00:08:07,979
someone else's website like I did from

00:08:06,539 --> 00:08:10,800
different locations with different

00:08:07,979 --> 00:08:12,839
browsers and it will run that test from

00:08:10,800 --> 00:08:15,089
that location with those parameters and

00:08:12,839 --> 00:08:16,800
you can see how it's working you get a

00:08:15,089 --> 00:08:19,710
waterfall chart of the first request of

00:08:16,800 --> 00:08:20,940
a follow-up request to see how caching

00:08:19,710 --> 00:08:23,219
and compression that sort of thing are

00:08:20,940 --> 00:08:25,919
working and even the most basic level

00:08:23,219 --> 00:08:27,180
you get a report card which you know you

00:08:25,919 --> 00:08:30,440
may or may not care about some of these

00:08:27,180 --> 00:08:33,060
things but at least you get some idea

00:08:30,440 --> 00:08:35,370
the third synthetic testing tool you can

00:08:33,060 --> 00:08:40,169
use is in modern browsers now there's a

00:08:35,370 --> 00:08:43,219
browser navigation timing object in the

00:08:40,169 --> 00:08:45,570
document object model or in JavaScript

00:08:43,219 --> 00:08:48,390
now that's accessible through the

00:08:45,570 --> 00:08:50,610
console if you dig around more recently

00:08:48,390 --> 00:08:52,020
I got this patch put into Jango debug

00:08:50,610 --> 00:08:52,540
tool bar which will actually pull that

00:08:52,020 --> 00:08:54,519
data

00:08:52,540 --> 00:08:56,709
and it will on the client side add it

00:08:54,519 --> 00:08:58,899
into the timing panel of the debug tool

00:08:56,709 --> 00:09:01,600
bar so you can get a nice set of

00:08:58,899 --> 00:09:03,120
snapshot and this is a contrived example

00:09:01,600 --> 00:09:05,829
but you can see how much time is spent

00:09:03,120 --> 00:09:08,019
relatively I'm back in in front end work

00:09:05,829 --> 00:09:10,029
it's not in pi PI yet because it hasn't

00:09:08,019 --> 00:09:11,800
been a debug tool bar release in a while

00:09:10,029 --> 00:09:16,089
but it is in github now it's actually

00:09:11,800 --> 00:09:17,339
been put into the main line so the main

00:09:16,089 --> 00:09:19,839
front end defenders we usually find

00:09:17,339 --> 00:09:21,430
static resources just the size and

00:09:19,839 --> 00:09:23,529
number as we saw in that waterfall huge

00:09:21,430 --> 00:09:25,029
number of resources being loaded now the

00:09:23,529 --> 00:09:26,680
way that browsers pipeline means that

00:09:25,029 --> 00:09:30,130
that stuff can get queued up and that's

00:09:26,680 --> 00:09:32,110
what takes time the lack of caching and

00:09:30,130 --> 00:09:33,540
compression this is very much a web

00:09:32,110 --> 00:09:35,680
server setting side of things

00:09:33,540 --> 00:09:37,000
third-party resources all those like

00:09:35,680 --> 00:09:39,910
buttons and all that other stuff that

00:09:37,000 --> 00:09:41,110
people put on their websites now as it's

00:09:39,910 --> 00:09:42,819
usually pretty good in that it's

00:09:41,110 --> 00:09:44,050
deferred but it is worth looking at

00:09:42,819 --> 00:09:45,970
whether that is actually slowing down

00:09:44,050 --> 00:09:48,100
your users experience especially on

00:09:45,970 --> 00:09:50,829
obscure browsers that might actually not

00:09:48,100 --> 00:09:52,120
defer when you think it is and finally

00:09:50,829 --> 00:09:54,220
over downloading if you do have a

00:09:52,120 --> 00:09:55,750
responsive site or a tab that doesn't

00:09:54,220 --> 00:09:57,310
actually get shown up initially and

00:09:55,750 --> 00:09:58,810
you're loading that every time even

00:09:57,310 --> 00:10:00,069
though most people don't look at it then

00:09:58,810 --> 00:10:03,430
you're really just using up time and

00:10:00,069 --> 00:10:06,250
bandwidth that you don't need so ways to

00:10:03,430 --> 00:10:07,600
fix static resources minification and

00:10:06,250 --> 00:10:10,120
combination of your JavaScript and CSS

00:10:07,600 --> 00:10:11,680
in Django land until yesterday I thought

00:10:10,120 --> 00:10:13,149
it was Django compressor apparently now

00:10:11,680 --> 00:10:16,779
Django pipeline is the place to look for

00:10:13,149 --> 00:10:18,639
that in terms of images this is all web

00:10:16,779 --> 00:10:20,699
development 101 stuff choosing an

00:10:18,639 --> 00:10:22,959
appropriate format and compression level

00:10:20,699 --> 00:10:24,160
one little hack that i came across last

00:10:22,959 --> 00:10:25,779
year that i didn't even thought about is

00:10:24,160 --> 00:10:27,850
if you've got lots of little thumbnails

00:10:25,779 --> 00:10:29,769
and that your thumbnail is actually

00:10:27,850 --> 00:10:30,760
putting metadata into every image then

00:10:29,769 --> 00:10:32,949
there's probably a lot of wasted space

00:10:30,760 --> 00:10:35,949
in there as well so you can even eke out

00:10:32,949 --> 00:10:37,630
a little bit of safe space there by just

00:10:35,949 --> 00:10:38,829
trimming out you know EXIF metadata and

00:10:37,630 --> 00:10:40,990
things like that that your tools might

00:10:38,829 --> 00:10:44,529
put in and finally sprites or something

00:10:40,990 --> 00:10:45,910
to consider as well furthermore you can

00:10:44,529 --> 00:10:47,319
look at your web server in your

00:10:45,910 --> 00:10:48,850
accelerator if you're using something

00:10:47,319 --> 00:10:50,769
like varnish you probably already

00:10:48,850 --> 00:10:52,029
thinking about performance so you can

00:10:50,769 --> 00:10:55,120
always look at the configuration of that

00:10:52,029 --> 00:10:57,040
there's a whole world of information out

00:10:55,120 --> 00:10:59,199
there about caching compression headers

00:10:57,040 --> 00:11:00,579
and that sort of stuff I don't have time

00:10:59,199 --> 00:11:02,290
to go through it all today but if you do

00:11:00,579 --> 00:11:04,810
want some tips or advice let me know and

00:11:02,290 --> 00:11:06,180
I'm happy to help out content

00:11:04,810 --> 00:11:08,650
distribution networks can help

00:11:06,180 --> 00:11:10,000
there were some measurements that showed

00:11:08,650 --> 00:11:12,460
that they don't necessarily help a lot

00:11:10,000 --> 00:11:15,840
and in the case of that example earlier

00:11:12,460 --> 00:11:18,700
they were using s3 as a as the CDN and

00:11:15,840 --> 00:11:22,480
it was not using any edge point in

00:11:18,700 --> 00:11:23,820
Sydney so it was actually slower you can

00:11:22,480 --> 00:11:26,050
do things like deferred loading and

00:11:23,820 --> 00:11:27,520
there are these other modules called

00:11:26,050 --> 00:11:29,980
PageSpeed which will actually work at

00:11:27,520 --> 00:11:30,880
your web server level and try and grab

00:11:29,980 --> 00:11:33,330
whatever you send out of your

00:11:30,880 --> 00:11:35,860
application and mash it all up for you

00:11:33,330 --> 00:11:37,980
it might be a bit of a silver bullet but

00:11:35,860 --> 00:11:40,510
it might be worth a try for you as well

00:11:37,980 --> 00:11:42,310
so supposing you've now mashed together

00:11:40,510 --> 00:11:43,570
all that front end information you've

00:11:42,310 --> 00:11:45,730
actually got it down to a handful of

00:11:43,570 --> 00:11:47,260
small CSS JavaScript and image requests

00:11:45,730 --> 00:11:50,530
and you do want to look at the back end

00:11:47,260 --> 00:11:52,480
measurement again in terms of

00:11:50,530 --> 00:11:54,400
measurement you've got options like real

00:11:52,480 --> 00:11:56,440
user monitoring in New Relic you can

00:11:54,400 --> 00:11:59,380
instrument very specific parts of your

00:11:56,440 --> 00:12:00,490
application using that similar tentative

00:11:59,380 --> 00:12:03,460
you can do yourself for things like

00:12:00,490 --> 00:12:04,990
Django stats d feeding into graphite you

00:12:03,460 --> 00:12:06,400
can instrument very specific parts of

00:12:04,990 --> 00:12:08,160
your application and see real

00:12:06,400 --> 00:12:10,480
performance of requests as they happen

00:12:08,160 --> 00:12:15,090
you can graph it you can trend it you

00:12:10,480 --> 00:12:18,340
can keep an eye on it in terms of

00:12:15,090 --> 00:12:21,010
external individual testing Django debug

00:12:18,340 --> 00:12:23,980
tool bar it's not it's one of the most

00:12:21,010 --> 00:12:25,180
popular Django third-party add-ons for a

00:12:23,980 --> 00:12:28,480
reason it does give you really good

00:12:25,180 --> 00:12:30,010
information so in addition to timing you

00:12:28,480 --> 00:12:31,510
can look at things like SQL queries that

00:12:30,010 --> 00:12:33,790
it runs you can dig really deep with

00:12:31,510 --> 00:12:35,470
that you can look at what templates it's

00:12:33,790 --> 00:12:37,870
using there may be some inefficiency

00:12:35,470 --> 00:12:40,510
there potentially although arguably you

00:12:37,870 --> 00:12:42,070
shouldn't be looking there firstly and

00:12:40,510 --> 00:12:44,260
even signals it's very important to

00:12:42,070 --> 00:12:45,670
remember that signals run within that

00:12:44,260 --> 00:12:47,500
response process it's not some

00:12:45,670 --> 00:12:50,170
asynchronous thing so if you have a post

00:12:47,500 --> 00:12:52,090
saved signal that's taking a while it

00:12:50,170 --> 00:12:55,840
could actually be the the villain that's

00:12:52,090 --> 00:12:57,520
slowing down your website if you want to

00:12:55,840 --> 00:12:59,350
get really deep into stuff there are

00:12:57,520 --> 00:13:01,870
various ways to profile Python the one

00:12:59,350 --> 00:13:04,030
that I found the most useful is Django

00:13:01,870 --> 00:13:06,520
extensions has a run profile server

00:13:04,030 --> 00:13:10,690
which is basically run server that

00:13:06,520 --> 00:13:13,260
creates a profile a see profile capture

00:13:10,690 --> 00:13:16,690
for every request and you can give it a

00:13:13,260 --> 00:13:18,040
key case grind option which will save it

00:13:16,690 --> 00:13:19,150
straight into a format that's compatible

00:13:18,040 --> 00:13:20,980
with cake ice cream

00:13:19,150 --> 00:13:23,680
round which then lets you load this up

00:13:20,980 --> 00:13:25,600
and you can explore and it's I found

00:13:23,680 --> 00:13:27,100
even with a basic understanding of

00:13:25,600 --> 00:13:29,770
profiling it's very quick to figure out

00:13:27,100 --> 00:13:35,200
if you have a specific profiling problem

00:13:29,770 --> 00:13:36,430
where the problem lies so now let's have

00:13:35,200 --> 00:13:40,060
a little bit more of a look at django

00:13:36,430 --> 00:13:42,790
itself your typical Django request comes

00:13:40,060 --> 00:13:45,250
in through the web server through your

00:13:42,790 --> 00:13:46,630
whiskey layer initializes a request I do

00:13:45,250 --> 00:13:48,880
apologize many quarters if I've

00:13:46,630 --> 00:13:50,830
oversimplified this I think it's

00:13:48,880 --> 00:13:53,650
actually a reasonably good sort of

00:13:50,830 --> 00:13:58,150
coverage basically if you look at at

00:13:53,650 --> 00:13:59,800
djangos base handler it it does this URL

00:13:58,150 --> 00:14:01,540
resolution then you're hitting these

00:13:59,800 --> 00:14:04,180
bottom layers of middleware goes three

00:14:01,540 --> 00:14:06,670
of you and your template rendering this

00:14:04,180 --> 00:14:08,230
is a typical situation hitting one or

00:14:06,670 --> 00:14:10,510
more or none in terms of back-end

00:14:08,230 --> 00:14:12,010
services before going back out through

00:14:10,510 --> 00:14:15,150
the outbound middleware that apply so

00:14:12,010 --> 00:14:17,200
template response in response middleware

00:14:15,150 --> 00:14:19,360
so it's good to keep that in mind when

00:14:17,200 --> 00:14:20,830
you are profiling where things might go

00:14:19,360 --> 00:14:23,350
wrong and usually it's these bottom

00:14:20,830 --> 00:14:27,310
three things here at the top Django is

00:14:23,350 --> 00:14:29,800
used and you know excuse me used by a

00:14:27,310 --> 00:14:30,940
lot of people that stuff is probably as

00:14:29,800 --> 00:14:35,710
performant as it's going to get unless

00:14:30,940 --> 00:14:37,930
you really want to really dig into it so

00:14:35,710 --> 00:14:39,940
priority number one or certainly a

00:14:37,930 --> 00:14:42,670
option number one if it's not the

00:14:39,940 --> 00:14:44,230
priority is to look at caching you can

00:14:42,670 --> 00:14:46,330
get some easy wins you might not even

00:14:44,230 --> 00:14:48,280
have to optimize that weird SQL query if

00:14:46,330 --> 00:14:51,490
it's something that happens on your home

00:14:48,280 --> 00:14:53,430
page and everyone gets the same one you

00:14:51,490 --> 00:14:56,380
can you can case that at various levels

00:14:53,430 --> 00:14:57,970
the main thing to be careful of here in

00:14:56,380 --> 00:14:59,440
fact Tom's talk estate was really good

00:14:57,970 --> 00:15:01,990
about this it talked about it all sorts

00:14:59,440 --> 00:15:05,410
of caching and headers and various ways

00:15:01,990 --> 00:15:07,180
you can do that etags expires headers

00:15:05,410 --> 00:15:08,650
all that sort of stuff is relevant not

00:15:07,180 --> 00:15:12,250
only at the staticresource level but

00:15:08,650 --> 00:15:14,110
also for dynamic content and I've got a

00:15:12,250 --> 00:15:16,510
list here basically my recommendation is

00:15:14,110 --> 00:15:18,190
to read and know the casing

00:15:16,510 --> 00:15:21,850
documentation on the Django project

00:15:18,190 --> 00:15:24,460
website it's really good and here's the

00:15:21,850 --> 00:15:26,070
visual representation of it in one sense

00:15:24,460 --> 00:15:28,300
I like to put this up here because

00:15:26,070 --> 00:15:31,390
sometimes you can avoid the request even

00:15:28,300 --> 00:15:32,440
hitting the browser if you have a static

00:15:31,390 --> 00:15:33,790
resource or if

00:15:32,440 --> 00:15:35,440
actively a static resource that's coming

00:15:33,790 --> 00:15:37,420
out of your Django application you can

00:15:35,440 --> 00:15:39,310
tell browsers this isn't going to change

00:15:37,420 --> 00:15:43,930
and it will never even come back and ask

00:15:39,310 --> 00:15:45,520
for it again then compressions another

00:15:43,930 --> 00:15:47,140
factor I talked about this earlier with

00:15:45,520 --> 00:15:48,540
the static resources the same pretty

00:15:47,140 --> 00:15:50,920
much applies with your dynamic stuff

00:15:48,540 --> 00:15:53,680
there is a jeezy middleware option here

00:15:50,920 --> 00:15:55,360
in Django itself I feel that it's not

00:15:53,680 --> 00:15:57,850
the job of your application server to be

00:15:55,360 --> 00:16:00,220
doing that it's easy doing everything

00:15:57,850 --> 00:16:01,570
else and your web server you know it's

00:16:00,220 --> 00:16:05,770
there for a reason give it that job to

00:16:01,570 --> 00:16:08,290
do some really basic stuff about query

00:16:05,770 --> 00:16:10,330
performance if you are hitting certain

00:16:08,290 --> 00:16:12,790
query issues again that debug tool bar

00:16:10,330 --> 00:16:14,680
will show you where your you're doing n

00:16:12,790 --> 00:16:16,690
plus 1 queries for things where you're

00:16:14,680 --> 00:16:19,540
iterating over lists and creating an SQL

00:16:16,690 --> 00:16:20,890
for each one where you're perhaps

00:16:19,540 --> 00:16:22,210
checking for the existence of something

00:16:20,890 --> 00:16:24,700
and then you're going and fetching it

00:16:22,210 --> 00:16:27,250
again in a separate query set those

00:16:24,700 --> 00:16:29,050
sorts of things can catch you up so

00:16:27,250 --> 00:16:33,160
select related and prefetch related

00:16:29,050 --> 00:16:35,920
which is since 1.5 I think 1.4 it's

00:16:33,160 --> 00:16:37,360
available now anyway that will affect

00:16:35,920 --> 00:16:41,560
your collections for you so if you are

00:16:37,360 --> 00:16:43,390
doing a list of something attached to an

00:16:41,560 --> 00:16:48,010
object you can make sure that you get

00:16:43,390 --> 00:16:49,210
those as well finally again going back

00:16:48,010 --> 00:16:51,630
to that idea of a signal that might be

00:16:49,210 --> 00:16:54,250
running slowly you can defer workloads

00:16:51,630 --> 00:16:55,390
so in your views or your signals or if

00:16:54,250 --> 00:16:56,740
you're getting fancy with middleware

00:16:55,390 --> 00:16:58,210
there may be some work that it's doing

00:16:56,740 --> 00:17:01,000
that actually doesn't affect the user

00:16:58,210 --> 00:17:03,130
whatsoever and its really simple using

00:17:01,000 --> 00:17:05,740
things like celery for example so you're

00:17:03,130 --> 00:17:07,180
running a swimming club and your your

00:17:05,740 --> 00:17:08,380
users of logged in and you need to

00:17:07,180 --> 00:17:11,470
upload to the National Swimming

00:17:08,380 --> 00:17:13,120
Association some information you can

00:17:11,470 --> 00:17:18,520
delay that work because the user doesn't

00:17:13,120 --> 00:17:20,199
need to know about it okay so I've

00:17:18,520 --> 00:17:22,000
touched on a little bit of performance

00:17:20,199 --> 00:17:23,920
issues that you can cover with the back

00:17:22,000 --> 00:17:25,290
end and I'm guessing most seasoned

00:17:23,920 --> 00:17:28,180
Django developers are familiar with that

00:17:25,290 --> 00:17:30,130
I started digging around a little bit

00:17:28,180 --> 00:17:32,880
and looking at how Django works a little

00:17:30,130 --> 00:17:35,800
bit more underneath the covers and

00:17:32,880 --> 00:17:38,020
basically one thing I found quite

00:17:35,800 --> 00:17:40,240
interesting is Django basically does all

00:17:38,020 --> 00:17:42,460
of its work it goes through that whole

00:17:40,240 --> 00:17:44,200
loop and then it responds with a big

00:17:42,460 --> 00:17:45,030
payload at that string that is the

00:17:44,200 --> 00:17:47,710
response

00:17:45,030 --> 00:17:49,480
and you can see in the timing metrics

00:17:47,710 --> 00:17:50,890
here the back end does its work and this

00:17:49,480 --> 00:17:52,600
is running on my desktop so the response

00:17:50,890 --> 00:17:55,120
time is quick the response then just

00:17:52,600 --> 00:17:56,200
flies back out so that time to first

00:17:55,120 --> 00:17:57,820
byte and which is really the first

00:17:56,200 --> 00:18:00,610
opportunity the browser gets to do

00:17:57,820 --> 00:18:02,260
anything is delayed by all of the work

00:18:00,610 --> 00:18:05,140
that gets done through the views and all

00:18:02,260 --> 00:18:08,110
the middleware so things we can do about

00:18:05,140 --> 00:18:10,840
that there is a streaming HTTP response

00:18:08,110 --> 00:18:13,570
in Django 15 and onwards it's designed

00:18:10,840 --> 00:18:15,490
for things like if you're streaming say

00:18:13,570 --> 00:18:16,750
CSV files back and you want to keep

00:18:15,490 --> 00:18:17,950
giving it out to the user as you're

00:18:16,750 --> 00:18:21,130
continuing to query it out of the

00:18:17,950 --> 00:18:24,490
database and I thought why don't we

00:18:21,130 --> 00:18:26,650
apply this to to our templates we could

00:18:24,490 --> 00:18:27,970
actually render any response in a

00:18:26,650 --> 00:18:30,910
streaming matter it's just the generator

00:18:27,970 --> 00:18:32,410
as opposed to a string it turns out that

00:18:30,910 --> 00:18:34,620
someone else had that same idea and they

00:18:32,410 --> 00:18:37,630
wrote a pretty good patch that adds

00:18:34,620 --> 00:18:38,950
template streaming to django I've

00:18:37,630 --> 00:18:40,750
cleaned that up and put it into the

00:18:38,950 --> 00:18:44,080
ticket which I'm hoping to get put in

00:18:40,750 --> 00:18:46,870
soon which would actually allow for any

00:18:44,080 --> 00:18:48,910
template response to be streamed there

00:18:46,870 --> 00:18:50,920
are some caveats there your middleware

00:18:48,910 --> 00:18:52,090
layers might not expect a generator

00:18:50,920 --> 00:18:53,590
instead of a string so if you're looking

00:18:52,090 --> 00:18:56,110
at response type content it's going to

00:18:53,590 --> 00:18:57,670
blow up on you if an exception handles

00:18:56,110 --> 00:19:00,820
in the midst of streaming you can't just

00:18:57,670 --> 00:19:02,380
suddenly throw a HTTP exception type of

00:19:00,820 --> 00:19:04,000
response you're already you've already

00:19:02,380 --> 00:19:06,160
sent stuff back so how you handle that's

00:19:04,000 --> 00:19:09,130
a bit tricky and arguably you're not

00:19:06,160 --> 00:19:10,810
going to need this if your sites that

00:19:09,130 --> 00:19:11,860
slow that you need to stream stuff back

00:19:10,810 --> 00:19:14,770
you're probably solving the wrong

00:19:11,860 --> 00:19:16,150
problem but if this can be solved in a

00:19:14,770 --> 00:19:17,440
neat way it might be something that

00:19:16,150 --> 00:19:19,300
actually is useful to everybody by

00:19:17,440 --> 00:19:22,920
default and we can scrape a little bit

00:19:19,300 --> 00:19:26,110
of performance improvement for everybody

00:19:22,920 --> 00:19:28,420
and then I got a bit more crazy and I

00:19:26,110 --> 00:19:29,800
thought what about eager streaming and I

00:19:28,420 --> 00:19:32,740
came up with this little view middleware

00:19:29,800 --> 00:19:34,150
that basically shortcuts hitting the

00:19:32,740 --> 00:19:37,540
view function and it actually streams

00:19:34,150 --> 00:19:39,940
back the top of a web page ideally a

00:19:37,540 --> 00:19:41,860
static piece of the web page before even

00:19:39,940 --> 00:19:43,810
calling the view function so the web

00:19:41,860 --> 00:19:45,610
browsers already received something to

00:19:43,810 --> 00:19:47,860
chew on like some CSS files to download

00:19:45,610 --> 00:19:49,930
maybe some images before we've even

00:19:47,860 --> 00:19:51,850
called our view function I put this into

00:19:49,930 --> 00:19:54,160
a little proof of concepts and it does

00:19:51,850 --> 00:19:56,230
make use of both the timing tweaks in

00:19:54,160 --> 00:19:57,370
the debug tool bar and the streaming

00:19:56,230 --> 00:19:58,000
template stuff so you're going to need a

00:19:57,370 --> 00:20:00,040
couple of other bit

00:19:58,000 --> 00:20:01,960
if you want to run it but basically the

00:20:00,040 --> 00:20:03,400
way that worked out is and I admit this

00:20:01,960 --> 00:20:05,440
is a very contrived example that

00:20:03,400 --> 00:20:07,110
deliberately builds one-second delay is

00:20:05,440 --> 00:20:09,760
all over the place instead of having

00:20:07,110 --> 00:20:12,910
four seconds and then sending back the

00:20:09,760 --> 00:20:15,280
payload you can actually send back some

00:20:12,910 --> 00:20:18,280
streaming content which will bring

00:20:15,280 --> 00:20:19,750
forward the request for that CSS or the

00:20:18,280 --> 00:20:21,460
eager streaming which sends back the

00:20:19,750 --> 00:20:23,260
header before even calling the view and

00:20:21,460 --> 00:20:24,760
admittedly my view had a one-second

00:20:23,260 --> 00:20:27,970
delay in it which is just to prove that

00:20:24,760 --> 00:20:29,350
this happens means that the browser's

00:20:27,970 --> 00:20:31,240
actually requesting CSS while you're

00:20:29,350 --> 00:20:33,610
still doing work so I think that's an

00:20:31,240 --> 00:20:34,810
interesting idea and in some respects

00:20:33,610 --> 00:20:37,480
this might be enough just to fake

00:20:34,810 --> 00:20:39,220
performance for users this is a bit hard

00:20:37,480 --> 00:20:40,540
to see but the the top one is the eager

00:20:39,220 --> 00:20:43,870
streaming and it's actually got the top

00:20:40,540 --> 00:20:46,420
better of the page back in in half a

00:20:43,870 --> 00:20:48,670
second I think there's another delay

00:20:46,420 --> 00:20:50,260
that I put in before that the streaming

00:20:48,670 --> 00:20:51,850
version you can see is rendered the

00:20:50,260 --> 00:20:54,700
original one which does all the work

00:20:51,850 --> 00:20:58,750
first is way back towards the edge of

00:20:54,700 --> 00:21:00,970
the room over there somewhere so I

00:20:58,750 --> 00:21:02,650
thought that was an interesting idea in

00:21:00,970 --> 00:21:04,330
terms of future context this came up

00:21:02,650 --> 00:21:06,670
repeatedly yesterday from the keynote

00:21:04,330 --> 00:21:08,260
onwards the future is not exactly clear

00:21:06,670 --> 00:21:10,360
in terms of web application development

00:21:08,260 --> 00:21:13,180
there's API is there's WebSockets

00:21:10,360 --> 00:21:15,580
there's lots more JavaScript how this

00:21:13,180 --> 00:21:17,200
impacts on all of this isn't clear it

00:21:15,580 --> 00:21:20,700
might be that we need to be focusing our

00:21:17,200 --> 00:21:23,350
attentions on writing performant ap is

00:21:20,700 --> 00:21:25,120
things like speedy protocol I looked

00:21:23,350 --> 00:21:27,400
into this a bit more for now it doesn't

00:21:25,120 --> 00:21:29,440
seem to have a particularly clear impact

00:21:27,400 --> 00:21:32,320
basically you get security and you get

00:21:29,440 --> 00:21:33,670
better tcp level performance but it

00:21:32,320 --> 00:21:36,090
doesn't affect your actual application

00:21:33,670 --> 00:21:38,530
in a in a material way at the moment

00:21:36,090 --> 00:21:40,660
things like mobile I touched on it let

00:21:38,530 --> 00:21:42,060
the whole whole crazy kettle of fish in

00:21:40,660 --> 00:21:45,070
terms of what's happening there as well

00:21:42,060 --> 00:21:46,210
and as I alluded to earlier that idea of

00:21:45,070 --> 00:21:49,450
full stack ownership or at least

00:21:46,210 --> 00:21:50,950
somebody in your team noticing and

00:21:49,450 --> 00:21:52,540
taking care of that whole application

00:21:50,950 --> 00:21:56,230
performance side of things is very

00:21:52,540 --> 00:21:58,180
important so to sum up measure

00:21:56,230 --> 00:21:59,770
everything measure measure measure don't

00:21:58,180 --> 00:22:03,610
fix something you haven't proven is bad

00:21:59,770 --> 00:22:05,620
first don't ignore the front end there

00:22:03,610 --> 00:22:07,270
is diminishing returns potentially as

00:22:05,620 --> 00:22:09,070
you start eating out more performance

00:22:07,270 --> 00:22:10,290
you will get less and less little gains

00:22:09,070 --> 00:22:11,820
as you go

00:22:10,290 --> 00:22:14,040
and finally the technology is changing

00:22:11,820 --> 00:22:16,620
so we all need to be mindful of that as

00:22:14,040 --> 00:22:18,300
we go forward as promised there are a

00:22:16,620 --> 00:22:21,540
couple of resources there which will go

00:22:18,300 --> 00:22:34,080
into the SlideShare site and I have a

00:22:21,540 --> 00:22:35,460
few minutes for questions thank you okay

00:22:34,080 --> 00:22:37,440
so we'll take questions at the two

00:22:35,460 --> 00:22:39,900
microphones and try to alternate between

00:22:37,440 --> 00:22:47,520
them please come and cue the bottom of

00:22:39,900 --> 00:22:48,870
the stairs I am you mentioned Django

00:22:47,520 --> 00:22:51,480
debug tool bar a bunch of times that I

00:22:48,870 --> 00:22:52,800
just was wondering i love django debug

00:22:51,480 --> 00:22:54,540
tool bar but i ended up turning it off

00:22:52,800 --> 00:22:56,460
pretty early on and development because

00:22:54,540 --> 00:22:58,590
the act of using it slows everything

00:22:56,460 --> 00:23:01,140
down a lot so i thought it might be

00:22:58,590 --> 00:23:03,330
worth just pointing out that if your

00:23:01,140 --> 00:23:05,790
site seems slow try it with debug off

00:23:03,330 --> 00:23:08,010
and the toolbar off and make sure that

00:23:05,790 --> 00:23:10,290
that matches what you're expecting as

00:23:08,010 --> 00:23:14,280
well that's a very good statement

00:23:10,290 --> 00:23:17,250
question and i agree i should point that

00:23:14,280 --> 00:23:19,050
out in particular that the templates

00:23:17,250 --> 00:23:20,640
panel can blow up on older versions of

00:23:19,050 --> 00:23:22,620
django and possibly even newer ones and

00:23:20,640 --> 00:23:24,570
the profiling one tends to run things

00:23:22,620 --> 00:23:26,250
twice so both of those can three or four

00:23:24,570 --> 00:23:27,450
six and you're right really if you're

00:23:26,250 --> 00:23:31,230
looking at this you should turn it on

00:23:27,450 --> 00:23:32,460
when you want it and then off for the

00:23:31,230 --> 00:23:33,750
rest of your development certainly

00:23:32,460 --> 00:23:37,040
there's cycles of development where you

00:23:33,750 --> 00:23:40,500
might want to not let it get in the way

00:23:37,040 --> 00:23:42,960
the idea of them catching the headers in

00:23:40,500 --> 00:23:44,550
and having that come first is really

00:23:42,960 --> 00:23:45,900
interesting the problem with that is

00:23:44,550 --> 00:23:47,010
that if there's an exception or

00:23:45,900 --> 00:23:48,570
something that happens during the

00:23:47,010 --> 00:23:52,710
transaction you suddenly want to abort

00:23:48,570 --> 00:23:54,420
it and return a you know a 404 or a 301

00:23:52,710 --> 00:23:55,980
or something how do you how do you solve

00:23:54,420 --> 00:23:58,560
that problem that's that was one of the

00:23:55,980 --> 00:24:00,840
points on on that slide is that if there

00:23:58,560 --> 00:24:02,880
is an exception your best bet you'll be

00:24:00,840 --> 00:24:05,370
able to spit out a bit of HTML that says

00:24:02,880 --> 00:24:07,170
well hang on we've got to stop now and

00:24:05,370 --> 00:24:08,460
really that's where the the you ain't

00:24:07,170 --> 00:24:10,230
gonna need it part comes up as well

00:24:08,460 --> 00:24:12,030
maybe you should actually be writing

00:24:10,230 --> 00:24:14,400
your single page app kind of idea where

00:24:12,030 --> 00:24:18,120
the outlet the outside of your page is

00:24:14,400 --> 00:24:20,310
is static and instead of doing full HTTP

00:24:18,120 --> 00:24:22,080
requests you're doing Ajax calls for

00:24:20,310 --> 00:24:23,530
pieces of the page or that sort of thing

00:24:22,080 --> 00:24:24,810
and then you can probably

00:24:23,530 --> 00:24:28,180
exceptions because you're not doing this

00:24:24,810 --> 00:24:34,090
this bit of acrobatics with the arm with

00:24:28,180 --> 00:24:38,050
the request I'll throw one more in here

00:24:34,090 --> 00:24:40,330
um okay so Jenga core dev here time for

00:24:38,050 --> 00:24:41,740
ponies and a no a no comment from

00:24:40,330 --> 00:24:42,820
someone who obviously has a question for

00:24:41,740 --> 00:24:46,020
someone who has probably paid a lot of

00:24:42,820 --> 00:24:48,250
attention to this full stack picture

00:24:46,020 --> 00:24:50,680
django gets slagged occasionally as

00:24:48,250 --> 00:24:54,340
being too heavy weight too big to too

00:24:50,680 --> 00:24:56,260
complex in your experienced is that

00:24:54,340 --> 00:24:58,080
actually is is there an area in Django

00:24:56,260 --> 00:25:01,510
score that actually could do with tuning

00:24:58,080 --> 00:25:02,890
that is worth further analysis beyond

00:25:01,510 --> 00:25:04,090
obviously the ticket you've got

00:25:02,890 --> 00:25:08,680
interview that you want someone to take

00:25:04,090 --> 00:25:10,720
a look at my experience it there's

00:25:08,680 --> 00:25:12,670
nothing particularly slow if there's a

00:25:10,720 --> 00:25:15,370
if there's a problem with the lrm layer

00:25:12,670 --> 00:25:17,890
it's usually well known or if there's a

00:25:15,370 --> 00:25:19,450
problem with template rendering then

00:25:17,890 --> 00:25:21,130
it's well known and it might be a little

00:25:19,450 --> 00:25:22,390
bit acknowledged and in some cases it

00:25:21,130 --> 00:25:23,950
might be overblown in my personal

00:25:22,390 --> 00:25:26,440
experience I haven't found any of it to

00:25:23,950 --> 00:25:28,060
be a problem partly because you have

00:25:26,440 --> 00:25:31,020
caching at your disposal and quite often

00:25:28,060 --> 00:25:34,300
that's that's a good way around things

00:25:31,020 --> 00:25:35,950
you know if this chunk of template takes

00:25:34,300 --> 00:25:38,650
a while to render and it's always the

00:25:35,950 --> 00:25:39,970
same you can catch it if it's not and

00:25:38,650 --> 00:25:41,710
you're still getting performance

00:25:39,970 --> 00:25:43,060
problems admittedly I haven't run into

00:25:41,710 --> 00:25:51,040
it but there's other ways around that as

00:25:43,060 --> 00:25:54,070
well Django debug tool bar renders HTML

00:25:51,040 --> 00:25:57,250
to the screen yeah um but that's no good

00:25:54,070 --> 00:26:00,820
if you're using an API or an ajax

00:25:57,250 --> 00:26:03,700
requests is there something that maybe

00:26:00,820 --> 00:26:05,860
renders it to a file or it's a what do

00:26:03,700 --> 00:26:07,600
you do if you want it because you like

00:26:05,860 --> 00:26:10,270
Django debug tool bar but you want to

00:26:07,600 --> 00:26:11,950
use it on an API or Ajax requests I

00:26:10,270 --> 00:26:13,660
guess it depends which bits of the

00:26:11,950 --> 00:26:16,510
toolbar you want so if you want timing

00:26:13,660 --> 00:26:19,300
then your stats d or even just logging

00:26:16,510 --> 00:26:21,820
if you're doing individual requests will

00:26:19,300 --> 00:26:25,210
give you that information um similarly

00:26:21,820 --> 00:26:26,290
with your queries I mean you're not

00:26:25,210 --> 00:26:29,200
gonna get that you're never going to get

00:26:26,290 --> 00:26:31,290
nice pretty little foreground yes some

00:26:29,200 --> 00:26:33,600
way you can try that I think

00:26:31,290 --> 00:26:35,280
the room service no it might be

00:26:33,600 --> 00:26:37,140
something coming in Django debug tool by

00:26:35,280 --> 00:26:38,430
and I you to be completely wrong where

00:26:37,140 --> 00:26:40,080
it will actually record all that

00:26:38,430 --> 00:26:41,400
information and hang onto it and then in

00:26:40,080 --> 00:26:43,320
a separate requests you can ask you nor

00:26:41,400 --> 00:26:45,390
it I don't know what the status is that

00:26:43,320 --> 00:26:48,870
is button that would be the one way to

00:26:45,390 --> 00:26:50,070
look at it yeah still got some more time

00:26:48,870 --> 00:26:53,310
for questions if you want to come to the

00:26:50,070 --> 00:26:56,010
microphones I'll use my privileges to

00:26:53,310 --> 00:26:58,730
ask a question to what extent can these

00:26:56,010 --> 00:27:02,520
performance measuring and reporting

00:26:58,730 --> 00:27:05,340
strategies for Django be part of an

00:27:02,520 --> 00:27:07,770
automated integration testing and

00:27:05,340 --> 00:27:13,950
reporting system how how much would you

00:27:07,770 --> 00:27:16,620
do that what are the pitfalls one way

00:27:13,950 --> 00:27:19,350
you could do that is webpagetest org as

00:27:16,620 --> 00:27:20,850
a website is quite useful it also is

00:27:19,350 --> 00:27:22,830
open source so you can download it

00:27:20,850 --> 00:27:25,590
install your own instance of it and

00:27:22,830 --> 00:27:28,230
perhaps as part of your your integration

00:27:25,590 --> 00:27:30,660
testing stage do some of that waterfall

00:27:28,230 --> 00:27:33,210
diagram type of stuff and it has an API

00:27:30,660 --> 00:27:35,940
as well as command line tools and all

00:27:33,210 --> 00:27:37,380
sorts of things so that sort of thing in

00:27:35,940 --> 00:27:39,060
addition there are other performance and

00:27:37,380 --> 00:27:41,310
load testing tools around there that

00:27:39,060 --> 00:27:44,520
aren't so much about the waterfall that

00:27:41,310 --> 00:27:46,140
comes out of a web request but I'd say

00:27:44,520 --> 00:27:48,060
webpagetest little might be something

00:27:46,140 --> 00:27:51,290
that could be fit into that and it's not

00:27:48,060 --> 00:27:51,290
even Django specific really

00:27:54,419 --> 00:28:02,759
okay then so thank you very much run yes

00:27:59,759 --> 00:28:02,759

YouTube URL: https://www.youtube.com/watch?v=uI39nXHLVj8


