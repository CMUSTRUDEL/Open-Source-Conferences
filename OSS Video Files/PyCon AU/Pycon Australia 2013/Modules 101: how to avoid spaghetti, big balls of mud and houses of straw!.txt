Title: Modules 101: how to avoid spaghetti, big balls of mud and houses of straw!
Publication date: 2013-07-11
Playlist: Pycon Australia 2013
Description: 
	Graeme Cross
http://2013.pycon-au.org/schedule/30090/view_talk
This introductory tutorial will teach you how to effectively use modules and packages so your code is easier to read, test, package, deploy, reuse and maintain.

We will cover the basics of structuring your code with modules and packages, ways of using the import statement, how to document modules and packages, and a number of tips to ensure your code is less likely to end up a tangled mess that collapses when you need to modify or
Captions: 
	00:00:00,000 --> 00:00:03,149
we just avoided the introduce the

00:00:01,770 --> 00:00:04,799
speaker if you really want to know more

00:00:03,149 --> 00:00:07,049
about me it's just going to have a look

00:00:04,799 --> 00:00:10,559
at the summary of the talk that's on the

00:00:07,049 --> 00:00:12,360
the website for pike on a you this talk

00:00:10,559 --> 00:00:15,269
is all about modules what you need to

00:00:12,360 --> 00:00:17,609
know about modules to help you design

00:00:15,269 --> 00:00:20,580
good code so we're going to cover a few

00:00:17,609 --> 00:00:22,680
things really briefly today and please

00:00:20,580 --> 00:00:23,970
don't stress if you don't get all of

00:00:22,680 --> 00:00:25,500
this written down or anything like that

00:00:23,970 --> 00:00:28,289
hey I'm going to make the slides

00:00:25,500 --> 00:00:30,510
available and the slides are fairly word

00:00:28,289 --> 00:00:32,550
heavy because I've designed these to be

00:00:30,510 --> 00:00:35,130
sort of more takeaway notes that you can

00:00:32,550 --> 00:00:37,170
use as a future reference rather than

00:00:35,130 --> 00:00:40,350
just a few pithy sayings that I speak to

00:00:37,170 --> 00:00:41,809
over the next 20 minutes or so but by

00:00:40,350 --> 00:00:44,550
the end of this I hope you understand

00:00:41,809 --> 00:00:48,450
good practices with using modules and

00:00:44,550 --> 00:00:50,789
packages how it helps your code and I'm

00:00:48,450 --> 00:00:51,750
going to list a number of advanced

00:00:50,789 --> 00:00:54,030
topics that we're just not going to

00:00:51,750 --> 00:00:56,070
touch on today this is a big area but

00:00:54,030 --> 00:00:58,350
what I want to do is give you the seeds

00:00:56,070 --> 00:00:59,910
of information that you will need to

00:00:58,350 --> 00:01:03,030
know as you advance as Python

00:00:59,910 --> 00:01:06,409
programmers so that you know where to go

00:01:03,030 --> 00:01:08,880
next to look for more information and

00:01:06,409 --> 00:01:11,189
for this conversation I'm going to talk

00:01:08,880 --> 00:01:13,320
about building software and we always

00:01:11,189 --> 00:01:16,140
talk about building software as if it's

00:01:13,320 --> 00:01:18,770
talking about real buildings you know we

00:01:16,140 --> 00:01:22,320
architects things we construct we make

00:01:18,770 --> 00:01:24,720
we have software architects we rip off

00:01:22,320 --> 00:01:26,670
design patterns from real architects you

00:01:24,720 --> 00:01:29,430
know Christopher Alexander was a real

00:01:26,670 --> 00:01:31,860
architect who developed design patterns

00:01:29,430 --> 00:01:34,860
for architecture and we came along went

00:01:31,860 --> 00:01:36,689
geez that's a great idea and pinched it

00:01:34,860 --> 00:01:38,549
we have frameworks structures

00:01:36,689 --> 00:01:41,729
foundations all sorts of things like

00:01:38,549 --> 00:01:44,579
that the key message I want to give you

00:01:41,729 --> 00:01:47,340
is while it's a flawed metaphor a lot of

00:01:44,579 --> 00:01:49,470
it does apply to software that different

00:01:47,340 --> 00:01:52,200
buildings do require different skills

00:01:49,470 --> 00:01:54,390
and different approaches to planning and

00:01:52,200 --> 00:01:56,549
design so if you're building a teepee

00:01:54,390 --> 00:01:59,579
and in software land that's you know a

00:01:56,549 --> 00:02:01,640
two-line awk script or a little bit of

00:01:59,579 --> 00:02:04,979
quick Python to just do a one-off job

00:02:01,640 --> 00:02:06,719
anyone with the ounce of intelligence

00:02:04,979 --> 00:02:08,550
can do that that's really easy and if it

00:02:06,719 --> 00:02:11,459
falls down later in the forest does

00:02:08,550 --> 00:02:13,530
anyone hear it does anyone care when you

00:02:11,459 --> 00:02:15,690
get to your cubby house though you

00:02:13,530 --> 00:02:17,700
you got to put in a bit of effort you

00:02:15,690 --> 00:02:20,040
need a saw you need a hammer you need

00:02:17,700 --> 00:02:22,410
nails you need to actually stop and

00:02:20,040 --> 00:02:25,440
think about whereabouts in the tree am I

00:02:22,410 --> 00:02:27,240
going to put this and no one's going to

00:02:25,440 --> 00:02:29,940
come and talk about planning permits at

00:02:27,240 --> 00:02:31,920
least not in my counsel for this no

00:02:29,940 --> 00:02:33,750
one's going to live in this forever but

00:02:31,920 --> 00:02:36,330
it still does require a bit of skill

00:02:33,750 --> 00:02:38,850
this might be you know the script that

00:02:36,330 --> 00:02:40,500
assisted administrator runs that check

00:02:38,850 --> 00:02:44,130
some log files every night through a

00:02:40,500 --> 00:02:46,170
cron job it's a 10 line Python script it

00:02:44,130 --> 00:02:47,580
doesn't go into production anywhere but

00:02:46,170 --> 00:02:50,940
it's still got you know a bit of

00:02:47,580 --> 00:02:53,160
structure to it by the time we've got

00:02:50,940 --> 00:02:55,410
two houses we are actually starting to

00:02:53,160 --> 00:02:57,480
talk about some serious skill you've had

00:02:55,410 --> 00:03:00,120
an architect designed this there's

00:02:57,480 --> 00:03:02,400
planning there's permits you've got your

00:03:00,120 --> 00:03:05,550
plumber your electrician your painter

00:03:02,400 --> 00:03:07,680
your carpenter your Tyler they come

00:03:05,550 --> 00:03:09,239
together and if you're actually going to

00:03:07,680 --> 00:03:11,670
build a house that's going to last a

00:03:09,239 --> 00:03:13,260
long period of time and get approval and

00:03:11,670 --> 00:03:14,910
that you'll actually be able to put on

00:03:13,260 --> 00:03:17,850
the market that people want to live in

00:03:14,910 --> 00:03:20,459
that can be easily renovated or extended

00:03:17,850 --> 00:03:23,010
when more kids come along or something

00:03:20,459 --> 00:03:27,720
like that you are starting to talk about

00:03:23,010 --> 00:03:30,390
some serious skill and experience this

00:03:27,720 --> 00:03:34,049
is your jet fighter software your

00:03:30,390 --> 00:03:36,590
cochlear implant firmware your Mikey

00:03:34,049 --> 00:03:40,380
ticket system if you live in Melbourne

00:03:36,590 --> 00:03:43,170
it's it's the stuff that requires a lot

00:03:40,380 --> 00:03:45,510
of expertise to make sure that a you

00:03:43,170 --> 00:03:47,910
build it right and be it doesn't fall

00:03:45,510 --> 00:03:49,500
down around you not only taking you out

00:03:47,910 --> 00:03:52,530
but everyone else within a ten-block

00:03:49,500 --> 00:03:54,780
radius this is the the pinnacle of a

00:03:52,530 --> 00:03:58,079
building but also software engineering

00:03:54,780 --> 00:03:59,579
and hopefully you can see the

00:03:58,079 --> 00:04:02,609
progression and the demands that you

00:03:59,579 --> 00:04:05,700
have in terms of architecture structural

00:04:02,609 --> 00:04:07,500
engineering planning approvals the sheer

00:04:05,700 --> 00:04:11,070
size of the team and different skill

00:04:07,500 --> 00:04:15,299
sets required for a job like this versus

00:04:11,070 --> 00:04:17,100
your TP in the forest so obviously

00:04:15,299 --> 00:04:19,320
getting the design right is critical and

00:04:17,100 --> 00:04:21,090
the larger your software project the

00:04:19,320 --> 00:04:23,220
more important it is how easy can you

00:04:21,090 --> 00:04:25,500
get in there to fix bugs how easy is it

00:04:23,220 --> 00:04:27,150
to test can you actually go back and

00:04:25,500 --> 00:04:28,830
read the code the next day

00:04:27,150 --> 00:04:30,449
put your hands up if you've ever

00:04:28,830 --> 00:04:33,660
programmed in pearl and that's my one

00:04:30,449 --> 00:04:35,070
cheap shot for the week can you go back

00:04:33,660 --> 00:04:36,539
and understand it in two years and I've

00:04:35,070 --> 00:04:38,100
certainly written Cobra I've gone back

00:04:36,539 --> 00:04:41,520
two years later and gone who wrote this

00:04:38,100 --> 00:04:43,320
this is shocking code picking up code

00:04:41,520 --> 00:04:46,320
that you've got to maintain that someone

00:04:43,320 --> 00:04:48,449
else has written how do you wrap your

00:04:46,320 --> 00:04:51,570
head around it if it's one file of a

00:04:48,449 --> 00:04:53,310
thousand lines where people haven't used

00:04:51,570 --> 00:04:54,570
functions they've just started at the

00:04:53,310 --> 00:04:57,539
top and just written it all the way to

00:04:54,570 --> 00:04:59,639
the bottom how do you untangle that sort

00:04:57,539 --> 00:05:01,800
of mess versus something that's been

00:04:59,639 --> 00:05:04,350
really cleanly partitioned well-designed

00:05:01,800 --> 00:05:09,479
small parts you can easily wrap your

00:05:04,350 --> 00:05:12,360
head around Frank Lloyd Wright probably

00:05:09,479 --> 00:05:14,520
the 20th century's most famous American

00:05:12,360 --> 00:05:16,560
architect this is the waterfall house

00:05:14,520 --> 00:05:20,940
it's just a stunning piece of

00:05:16,560 --> 00:05:23,520
architecture inside and outside it fits

00:05:20,940 --> 00:05:27,090
within its elements it is one of these

00:05:23,520 --> 00:05:29,340
masterpieces of architecture and while

00:05:27,090 --> 00:05:31,260
all of the software we write may not

00:05:29,340 --> 00:05:33,570
live on in perpetuity like this and

00:05:31,260 --> 00:05:35,550
grace the front covers of housing

00:05:33,570 --> 00:05:37,289
magazines and that we would like people

00:05:35,550 --> 00:05:39,780
to think about our software as

00:05:37,289 --> 00:05:41,940
beautifully written aesthetically

00:05:39,780 --> 00:05:45,180
pleasing fits within its environment

00:05:41,940 --> 00:05:47,370
really well this on the other hand as

00:05:45,180 --> 00:05:49,050
the customer i can see you tried to do

00:05:47,370 --> 00:05:50,940
the right thing yes you built me a house

00:05:49,050 --> 00:05:53,699
I asked for a house and yes you built it

00:05:50,940 --> 00:05:58,080
but I'm get a stroll to actually live in

00:05:53,699 --> 00:06:00,389
that house and this it may be a house

00:05:58,080 --> 00:06:03,740
and I can see how it started and I can

00:06:00,389 --> 00:06:06,180
see how you've bolted things on and yes

00:06:03,740 --> 00:06:07,650
maybe people could still live in it but

00:06:06,180 --> 00:06:12,630
I wouldn't I'm worried it's going to

00:06:07,650 --> 00:06:14,150
fall down around my ears any day so how

00:06:12,630 --> 00:06:16,710
do we avoid those sorts of scenarios

00:06:14,150 --> 00:06:18,930
there's a range of basic design

00:06:16,710 --> 00:06:20,340
principles that people who particularly

00:06:18,930 --> 00:06:22,139
if you've come out of an object-oriented

00:06:20,340 --> 00:06:24,449
background or a functional programming

00:06:22,139 --> 00:06:26,820
background will talk about things like

00:06:24,449 --> 00:06:28,789
separations of concerns don't lump

00:06:26,820 --> 00:06:31,949
everything in together understand

00:06:28,789 --> 00:06:34,760
responsibilities interfaces keep them

00:06:31,949 --> 00:06:36,810
separated really well defined

00:06:34,760 --> 00:06:40,000
abstraction don't repeat yourself

00:06:36,810 --> 00:06:41,740
wherever you can do not repeat yourself

00:06:40,000 --> 00:06:45,400
so do you just do not repeat yourself

00:06:41,740 --> 00:06:47,680
okay composition understand how to

00:06:45,400 --> 00:06:50,320
actually compose your components so that

00:06:47,680 --> 00:06:52,060
they work well together and that they're

00:06:50,320 --> 00:06:53,760
loosely coupled you don't want

00:06:52,060 --> 00:06:55,630
components that are so tightly

00:06:53,760 --> 00:06:57,040
interweaved that you can't actually

00:06:55,630 --> 00:06:59,200
separate them and they're really not

00:06:57,040 --> 00:07:01,060
components they're just a some sort of a

00:06:59,200 --> 00:07:03,730
blancmange of components that have all

00:07:01,060 --> 00:07:05,760
melded into each other and have a

00:07:03,730 --> 00:07:08,140
functional programming things like and

00:07:05,760 --> 00:07:10,680
the concept that a function always

00:07:08,140 --> 00:07:15,030
returns the same value makes testing and

00:07:10,680 --> 00:07:17,230
proving your code so much easier and

00:07:15,030 --> 00:07:19,030
minimizing or eliminating state will

00:07:17,230 --> 00:07:20,770
come back to how that gets you time and

00:07:19,030 --> 00:07:24,310
time again with Python modules in a

00:07:20,770 --> 00:07:25,990
minute and I'm the thing that we really

00:07:24,310 --> 00:07:29,350
want to avoid is people talking about

00:07:25,990 --> 00:07:32,410
our code as duct tape together sprawling

00:07:29,350 --> 00:07:35,860
sloppy spaghetti code and if you ever

00:07:32,410 --> 00:07:37,630
want to read a classic paper about how

00:07:35,860 --> 00:07:40,240
you end up with that sort of code the

00:07:37,630 --> 00:07:43,150
big ball of mud paper is a classic on

00:07:40,240 --> 00:07:45,700
that and I'm we've all written code like

00:07:43,150 --> 00:07:47,830
this I I'm being presumptuous here i

00:07:45,700 --> 00:07:50,710
have written code like this the aim is

00:07:47,830 --> 00:07:53,530
to not be writing code like that so you

00:07:50,710 --> 00:07:55,840
use modules and packages to give

00:07:53,530 --> 00:07:58,570
yourself smaller pieces that are

00:07:55,840 --> 00:08:00,820
logically grouped together if necessary

00:07:58,570 --> 00:08:03,520
in hierarchies that are really easy to

00:08:00,820 --> 00:08:06,160
understand they're designed for reuse

00:08:03,520 --> 00:08:08,590
they're designed for testing they have

00:08:06,160 --> 00:08:11,830
well-defined interfaces that allow you

00:08:08,590 --> 00:08:15,550
to use them to deploy them document them

00:08:11,830 --> 00:08:17,410
test them really easily and looking at

00:08:15,550 --> 00:08:19,390
something like that is just far more

00:08:17,410 --> 00:08:21,250
pleasing to the eye you know you can

00:08:19,390 --> 00:08:23,380
pull out even if you hate UML you can

00:08:21,250 --> 00:08:25,330
pull out a diagram and actually wrap

00:08:23,380 --> 00:08:27,850
your head around how all of these files

00:08:25,330 --> 00:08:29,620
or how functions and classes fit into

00:08:27,850 --> 00:08:31,510
files that are modules that fit into

00:08:29,620 --> 00:08:36,039
packages that have a certain

00:08:31,510 --> 00:08:37,900
responsibility so what's a module i'm

00:08:36,039 --> 00:08:39,400
going to start fairly basic here given

00:08:37,900 --> 00:08:41,050
that i know there's quite a few

00:08:39,400 --> 00:08:44,530
beginners here i'm just going to run

00:08:41,050 --> 00:08:46,750
quickly through the basics at its

00:08:44,530 --> 00:08:49,480
simplest level a module is a python file

00:08:46,750 --> 00:08:52,140
that contains definitions for things

00:08:49,480 --> 00:08:53,200
like your functions and your classes and

00:08:52,140 --> 00:08:56,170
when

00:08:53,200 --> 00:08:58,660
you import that module into your code

00:08:56,170 --> 00:09:02,620
it's executed it's executed once at

00:08:58,660 --> 00:09:04,780
input it has its own namespace which is

00:09:02,620 --> 00:09:06,430
essentially a symbol table where it has

00:09:04,780 --> 00:09:08,650
an understanding of everything it's

00:09:06,430 --> 00:09:11,230
responsible for its functions its global

00:09:08,650 --> 00:09:14,470
variables its document strings classes

00:09:11,230 --> 00:09:17,560
etc and because each module has its own

00:09:14,470 --> 00:09:19,270
namespace that allows you to call

00:09:17,560 --> 00:09:21,820
functions what you want and they will

00:09:19,270 --> 00:09:24,790
not clash with other identically named

00:09:21,820 --> 00:09:26,320
functions elsewhere in your code and it

00:09:24,790 --> 00:09:28,240
means that you can think really

00:09:26,320 --> 00:09:30,160
logically about how your code is broken

00:09:28,240 --> 00:09:32,920
down rather than just having one massive

00:09:30,160 --> 00:09:35,890
global scope with all of your variables

00:09:32,920 --> 00:09:37,660
thrown in there it's the fundamental

00:09:35,890 --> 00:09:39,250
building block for libraries in Python

00:09:37,660 --> 00:09:41,200
you need to understand this to use the

00:09:39,250 --> 00:09:43,930
standard library any of your third-party

00:09:41,200 --> 00:09:46,390
libraries and especially the large

00:09:43,930 --> 00:09:49,090
frameworks those for example who were at

00:09:46,390 --> 00:09:51,160
the Django conference yesterday Django

00:09:49,090 --> 00:09:54,760
as a framework heavily or completely

00:09:51,160 --> 00:09:57,640
relies on modules and packages normally

00:09:54,760 --> 00:09:59,290
has a dot py extension any Python

00:09:57,640 --> 00:10:01,510
program you're right doesn't have to

00:09:59,290 --> 00:10:04,210
have a dot py extension by convention it

00:10:01,510 --> 00:10:07,180
usually does your python module does and

00:10:04,210 --> 00:10:09,910
the name of the module is just the file

00:10:07,180 --> 00:10:11,380
names based name and we'll come to that

00:10:09,910 --> 00:10:12,790
in a minute because we want to talk

00:10:11,380 --> 00:10:15,400
about how you import and that's

00:10:12,790 --> 00:10:17,710
important part of it how does Python

00:10:15,400 --> 00:10:19,660
find these modules it scans through a

00:10:17,710 --> 00:10:22,300
set of directories it's really simple

00:10:19,660 --> 00:10:24,610
there's four things that looks for it

00:10:22,300 --> 00:10:26,830
looks for the module by name in the

00:10:24,610 --> 00:10:29,440
working directory of your program did it

00:10:26,830 --> 00:10:31,090
find it there none it then looks if

00:10:29,440 --> 00:10:33,790
you've got the Python path environment

00:10:31,090 --> 00:10:36,160
variable set did it find it there no

00:10:33,790 --> 00:10:38,050
okay it looks in the Python standard

00:10:36,160 --> 00:10:40,840
library directories that were defined

00:10:38,050 --> 00:10:42,880
when you installed Python there's also

00:10:40,840 --> 00:10:45,490
some path files which you can look in

00:10:42,880 --> 00:10:48,610
I'm going to skip over that that's a

00:10:45,490 --> 00:10:52,240
separate talk and then when Python runs

00:10:48,610 --> 00:10:54,940
you can look at the sista variable and

00:10:52,240 --> 00:11:00,460
it has its essential e a list of all of

00:10:54,940 --> 00:11:02,950
these directories strung together I've

00:11:00,460 --> 00:11:05,200
really talked about most of this let's

00:11:02,950 --> 00:11:07,150
keep moving interested time import so

00:11:05,200 --> 00:11:08,560
import as a keyword is the

00:11:07,150 --> 00:11:11,590
most important thing you need to know

00:11:08,560 --> 00:11:13,720
about how to work with modules it is the

00:11:11,590 --> 00:11:15,850
way to bring a module into your program

00:11:13,720 --> 00:11:19,630
and get access to all of the attributes

00:11:15,850 --> 00:11:21,790
within a module when you use the import

00:11:19,630 --> 00:11:23,380
what it does is it goes and finds the

00:11:21,790 --> 00:11:26,320
module like we just talked about with

00:11:23,380 --> 00:11:30,040
directories it bite compiles it and it

00:11:26,320 --> 00:11:32,560
executes sit so it's different to the

00:11:30,040 --> 00:11:35,680
hash include in C and C++ for example

00:11:32,560 --> 00:11:39,250
objective-c languages like that where

00:11:35,680 --> 00:11:41,470
it's a function of compilation this is

00:11:39,250 --> 00:11:43,390
actually not just brought into your

00:11:41,470 --> 00:11:46,720
program but it's actually executed at

00:11:43,390 --> 00:11:49,180
import time as well and if you had a

00:11:46,720 --> 00:11:51,670
module called math py that was the file

00:11:49,180 --> 00:11:56,650
name to import it you just say import

00:11:51,670 --> 00:11:57,940
math not import math py what happens if

00:11:56,650 --> 00:12:00,100
you've got a really long module name

00:11:57,940 --> 00:12:02,620
that you get sick of typing you can use

00:12:00,100 --> 00:12:04,300
as to alias it so if you've got

00:12:02,620 --> 00:12:07,000
something like my very long module name

00:12:04,300 --> 00:12:10,480
and Java programmers in no more cheap

00:12:07,000 --> 00:12:13,090
shot sorry some languages do love to

00:12:10,480 --> 00:12:15,670
have very very very long package names

00:12:13,090 --> 00:12:17,020
and this is just a very good way of

00:12:15,670 --> 00:12:19,510
working around especially if you're

00:12:17,020 --> 00:12:24,840
using language a Python variants that

00:12:19,510 --> 00:12:27,340
work with those languages like Java from

00:12:24,840 --> 00:12:29,170
from is a really convenient way of

00:12:27,340 --> 00:12:30,850
sucking everything from a module in

00:12:29,170 --> 00:12:33,430
without having to reference the module

00:12:30,850 --> 00:12:35,590
name again so you can do for example

00:12:33,430 --> 00:12:37,980
from module import star and it just

00:12:35,590 --> 00:12:41,410
sucks everything in so for example

00:12:37,980 --> 00:12:44,800
instead of doing import math and then

00:12:41,410 --> 00:12:47,590
having to do math sign math cosine math

00:12:44,800 --> 00:12:50,260
10 you can just say from module from

00:12:47,590 --> 00:12:52,300
math import star boom everything comes

00:12:50,260 --> 00:12:54,940
in you can then just talk about sine cos

00:12:52,300 --> 00:12:58,540
tan what you've done is you've brought

00:12:54,940 --> 00:13:01,000
all of the attributes of the module into

00:12:58,540 --> 00:13:02,830
the global scope that's really

00:13:01,000 --> 00:13:06,100
convenient it saves you having to type a

00:13:02,830 --> 00:13:08,620
bit but it causes lots of problems if

00:13:06,100 --> 00:13:10,330
you're not careful the main thing is is

00:13:08,620 --> 00:13:14,200
what it's doing is it's it's copying

00:13:10,330 --> 00:13:16,330
names over and I'll show you an example

00:13:14,200 --> 00:13:19,990
in a minute of how that can cause real

00:13:16,330 --> 00:13:21,070
problems because if you do from math

00:13:19,990 --> 00:13:23,350
import star

00:13:21,070 --> 00:13:26,520
and then somewhere else you do import

00:13:23,350 --> 00:13:30,010
math you've actually got two different

00:13:26,520 --> 00:13:32,230
references to your math module working

00:13:30,010 --> 00:13:34,810
in tandem and that may not cause you

00:13:32,230 --> 00:13:37,420
problems except if you modify a global

00:13:34,810 --> 00:13:39,430
variable out of your module it won't

00:13:37,420 --> 00:13:41,680
because it's a copy it actually won't

00:13:39,430 --> 00:13:43,630
change the behavior inside the module so

00:13:41,680 --> 00:13:49,060
you need to be very careful with those

00:13:43,630 --> 00:13:53,590
sorts of things let's just quickly fire

00:13:49,060 --> 00:13:58,540
up am a Python interpreter so I'm just

00:13:53,590 --> 00:14:01,240
going to use them ipython here so if we

00:13:58,540 --> 00:14:05,260
import math if you want to see what's in

00:14:01,240 --> 00:14:07,390
the math directory you can do dir and it

00:14:05,260 --> 00:14:09,880
will just give you a whole list of every

00:14:07,390 --> 00:14:12,300
function in fact every attribute of it

00:14:09,880 --> 00:14:15,070
and if you say help and the module name

00:14:12,300 --> 00:14:17,850
it will print out all of the information

00:14:15,070 --> 00:14:21,130
that's in the doc strings in the module

00:14:17,850 --> 00:14:23,500
so very useful and it's a very good

00:14:21,130 --> 00:14:25,390
reason to ensure that you always write

00:14:23,500 --> 00:14:27,430
good document strings for your module

00:14:25,390 --> 00:14:29,020
and everything inside your module so

00:14:27,430 --> 00:14:32,590
that people can easily reference them

00:14:29,020 --> 00:14:35,710
like this there's also a a really nice

00:14:32,590 --> 00:14:40,720
module called see that you can import

00:14:35,710 --> 00:14:44,980
from pie pie and I'm really struggling

00:14:40,720 --> 00:14:47,800
with not having a screen in front of me

00:14:44,980 --> 00:14:49,360
if you do so you know when I did dir

00:14:47,800 --> 00:14:51,850
mouth it just all went whoosh off the

00:14:49,360 --> 00:14:54,610
screen see is just a bit more nicely

00:14:51,850 --> 00:14:56,110
formatted and so what it does is it

00:14:54,610 --> 00:14:57,400
actually spreads it out across the

00:14:56,110 --> 00:14:59,830
screen that's bit not more nicely

00:14:57,400 --> 00:15:01,840
formatted and you can see quite easily

00:14:59,830 --> 00:15:04,150
what's a function versus what's a

00:15:01,840 --> 00:15:06,550
variable so as you'd expect with a math

00:15:04,150 --> 00:15:09,640
function your transcendental numbers

00:15:06,550 --> 00:15:15,730
like II and PI are just variables

00:15:09,640 --> 00:15:17,320
everything else is a function so just to

00:15:15,730 --> 00:15:18,280
go back over this because I really do

00:15:17,320 --> 00:15:22,720
want to make sure you get the message

00:15:18,280 --> 00:15:25,030
clear try to avoid using from unless

00:15:22,720 --> 00:15:27,880
it's just very convenient for one

00:15:25,030 --> 00:15:30,670
specific thing if you use from to import

00:15:27,880 --> 00:15:33,300
every module into your code base you're

00:15:30,670 --> 00:15:34,870
going to end up with name clashes

00:15:33,300 --> 00:15:36,880
unexpected side of

00:15:34,870 --> 00:15:40,029
when you modify global variables out of

00:15:36,880 --> 00:15:43,950
a module so it's much much better to use

00:15:40,029 --> 00:15:43,950
the import keyword rather than from

00:15:44,220 --> 00:15:51,250
reload reload is useful if you are

00:15:48,820 --> 00:15:53,320
running with an interpreter and you've

00:15:51,250 --> 00:15:55,270
got your text editor open and you're

00:15:53,320 --> 00:15:57,640
making changes and you want to be able

00:15:55,270 --> 00:16:00,970
to as the name says reload the module on

00:15:57,640 --> 00:16:03,190
the fly to bring in the changes very

00:16:00,970 --> 00:16:05,950
useful in a number of circumstances

00:16:03,190 --> 00:16:09,100
where you've got software running you

00:16:05,950 --> 00:16:10,750
have a high service level agreement you

00:16:09,100 --> 00:16:13,180
don't want to bring your software down

00:16:10,750 --> 00:16:15,610
all you want to do is fix a bug in a

00:16:13,180 --> 00:16:17,920
module reload that module dynamically

00:16:15,610 --> 00:16:22,360
inside the software so it picks up the

00:16:17,920 --> 00:16:25,690
changes and it keeps running really

00:16:22,360 --> 00:16:28,089
useful very very useful and also very

00:16:25,690 --> 00:16:30,779
very dangerous because depending on how

00:16:28,089 --> 00:16:35,440
your module that you're reloading has

00:16:30,779 --> 00:16:37,690
made changes to variables how it imports

00:16:35,440 --> 00:16:39,550
other modules in that the reloading may

00:16:37,690 --> 00:16:42,820
not have all of the effects that you

00:16:39,550 --> 00:16:44,770
expect so what I would say is make sure

00:16:42,820 --> 00:16:47,230
if you do use it and you're relying on

00:16:44,770 --> 00:16:50,080
it for mission-critical code that you

00:16:47,230 --> 00:16:51,730
understand how you're using it it's well

00:16:50,080 --> 00:16:54,760
worth reading the documentation to make

00:16:51,730 --> 00:16:57,430
sure you crystal clear on it and another

00:16:54,760 --> 00:17:00,970
thing is reload works like that in 2.7

00:16:57,430 --> 00:17:03,370
in Python 3 reload isn't a built-in it's

00:17:00,970 --> 00:17:06,160
a function and you have to import the

00:17:03,370 --> 00:17:10,540
IMP module and it's a function of the

00:17:06,160 --> 00:17:13,569
IMP module a few other things I just

00:17:10,540 --> 00:17:15,850
want to let you know if you're going to

00:17:13,569 --> 00:17:18,280
write a module don't give it the name of

00:17:15,850 --> 00:17:20,890
a module in the standard library and

00:17:18,280 --> 00:17:22,839
that may seem really obvious but if you

00:17:20,890 --> 00:17:24,309
don't know all of the names of modules

00:17:22,839 --> 00:17:26,709
in the standard library it can be easy

00:17:24,309 --> 00:17:29,530
to do and you can bang your head at the

00:17:26,709 --> 00:17:31,000
debugger going but I can see my module I

00:17:29,530 --> 00:17:34,870
can see that function why isn't it

00:17:31,000 --> 00:17:36,730
importing and that's that's just a catch

00:17:34,870 --> 00:17:39,160
for beginners that also catches out

00:17:36,730 --> 00:17:43,390
advanced people quite often and the

00:17:39,160 --> 00:17:48,020
other thing is um not keywords so if

00:17:43,390 --> 00:17:52,200
else think of all of the Python keywords

00:17:48,020 --> 00:17:56,700
Python will not like you importing a

00:17:52,200 --> 00:17:58,620
module with the name of a keyword try

00:17:56,700 --> 00:18:00,390
avoid global variables importing global

00:17:58,620 --> 00:18:04,440
variables other modules causes problems

00:18:00,390 --> 00:18:07,799
just avoid them if you can executing if

00:18:04,440 --> 00:18:09,390
your module at the bottom has this line

00:18:07,799 --> 00:18:10,830
at the top that says if underscore

00:18:09,390 --> 00:18:13,770
underscore name equals underscore

00:18:10,830 --> 00:18:16,170
underscore name then if you run the

00:18:13,770 --> 00:18:17,880
module from the command line where

00:18:16,170 --> 00:18:21,299
you're actually executing it as a script

00:18:17,880 --> 00:18:23,940
then it will go away and call the code

00:18:21,299 --> 00:18:26,510
that's in the block underneath it this

00:18:23,940 --> 00:18:28,919
is used a lot for command line tools and

00:18:26,510 --> 00:18:31,200
also for running unit tests so you can

00:18:28,919 --> 00:18:33,480
write your module and then have all of

00:18:31,200 --> 00:18:35,429
your unit tests executed whenever you

00:18:33,480 --> 00:18:40,130
run your module from the command line

00:18:35,429 --> 00:18:40,130
and there's a whole bunch of really nice

00:18:41,000 --> 00:18:48,840
examples of one-liners and command tools

00:18:45,350 --> 00:18:50,070
sorry I'll just um let's clear this some

00:18:48,840 --> 00:18:53,660
people at the back can see what I'm

00:18:50,070 --> 00:18:56,160
typing so all I'm going to type here is

00:18:53,660 --> 00:18:57,870
so that's a bit blowing up but that's

00:18:56,160 --> 00:19:00,360
this year's calendar and although type 2

00:18:57,870 --> 00:19:02,190
as Python minus M calendar and you can

00:19:00,360 --> 00:19:03,720
do things like you know what's next

00:19:02,190 --> 00:19:10,049
year's calendar and it will print that

00:19:03,720 --> 00:19:11,820
up there's a whole bunch of those and

00:19:10,049 --> 00:19:16,470
we'll come back to a couple in a little

00:19:11,820 --> 00:19:19,320
while and documenting modules you can

00:19:16,470 --> 00:19:22,350
put docstrings so you know three quote

00:19:19,320 --> 00:19:23,850
marks your text three quote marks at the

00:19:22,350 --> 00:19:27,750
top of a module and that will document

00:19:23,850 --> 00:19:31,559
the module in the same way as a function

00:19:27,750 --> 00:19:33,870
or a class really good for an overview

00:19:31,559 --> 00:19:36,450
and if you want to have a look at some

00:19:33,870 --> 00:19:37,740
examples just dive into the code in the

00:19:36,450 --> 00:19:39,510
standard library it's one of the really

00:19:37,740 --> 00:19:42,510
nice things about python is you get all

00:19:39,510 --> 00:19:44,910
the code to your standard library and in

00:19:42,510 --> 00:19:47,820
particular have a look at heap q heap q

00:19:44,910 --> 00:19:51,120
has this beautiful lecture about how to

00:19:47,820 --> 00:19:52,980
design heap queues that's just a little

00:19:51,120 --> 00:19:57,780
computer science lecture rolled up

00:19:52,980 --> 00:20:00,510
inside your module packages so a module

00:19:57,780 --> 00:20:01,290
is where you turn a file into a python

00:20:00,510 --> 00:20:04,080
namespace

00:20:01,290 --> 00:20:06,300
a package is a directory that becomes a

00:20:04,080 --> 00:20:09,150
Python namespace it's a way of grouping

00:20:06,300 --> 00:20:12,210
up modules in a directory so that they

00:20:09,150 --> 00:20:13,710
are collectively inside a namespace so

00:20:12,210 --> 00:20:15,720
you've grabbed your functions in your

00:20:13,710 --> 00:20:18,060
classes you've put them into a file to

00:20:15,720 --> 00:20:19,980
give you a reusable module you've now

00:20:18,060 --> 00:20:22,260
got all these modules you can start

00:20:19,980 --> 00:20:24,870
organizing them into packages so that

00:20:22,260 --> 00:20:28,260
you have just a beautiful hierarchy to

00:20:24,870 --> 00:20:30,810
organize your code how do you know to do

00:20:28,260 --> 00:20:33,330
that as soon as you've got modules for a

00:20:30,810 --> 00:20:36,030
project that have for example different

00:20:33,330 --> 00:20:39,360
functions you know this is GUI code this

00:20:36,030 --> 00:20:42,300
is code for the file system this is code

00:20:39,360 --> 00:20:44,160
that handles the serial interface then

00:20:42,300 --> 00:20:45,510
you can start putting those into

00:20:44,160 --> 00:20:49,070
separate packages because they've got

00:20:45,510 --> 00:20:51,900
quite different responsibilities and

00:20:49,070 --> 00:20:54,630
basically the way it works is as you can

00:20:51,900 --> 00:20:59,100
see here whatever your directory name is

00:20:54,630 --> 00:21:01,950
that's the package name and a dot then

00:20:59,100 --> 00:21:05,130
separates it from the module or a sub

00:21:01,950 --> 00:21:07,200
package and the only caveat is is that

00:21:05,130 --> 00:21:10,850
your package directory has to be in the

00:21:07,200 --> 00:21:14,040
Python search path just like modules in

00:21:10,850 --> 00:21:16,410
Python 2 there's one little bit of

00:21:14,040 --> 00:21:18,600
secret sauce you need to know about you

00:21:16,410 --> 00:21:21,060
can't just have a directory with modules

00:21:18,600 --> 00:21:22,740
in it you have to put a special python

00:21:21,060 --> 00:21:25,560
file called underscore underscore in it

00:21:22,740 --> 00:21:28,410
underscore underscore and in Python to

00:21:25,560 --> 00:21:30,870
that says to Python hello I'm a

00:21:28,410 --> 00:21:34,230
directory I've got modules I'm actually

00:21:30,870 --> 00:21:36,570
a package and it can be empty it just

00:21:34,230 --> 00:21:38,550
has to exist but given that it's there

00:21:36,570 --> 00:21:40,860
you can actually put executable code in

00:21:38,550 --> 00:21:42,420
there so if you wanted to do some code

00:21:40,860 --> 00:21:45,390
that had to be done on the

00:21:42,420 --> 00:21:47,370
initialization for your modules you know

00:21:45,390 --> 00:21:49,200
I know connecting to a database or

00:21:47,370 --> 00:21:51,150
initializing some hardware or something

00:21:49,200 --> 00:21:54,480
starting up your logging you could do it

00:21:51,150 --> 00:21:56,580
there likewise you can control which

00:21:54,480 --> 00:21:59,730
modules actually get exported out and

00:21:56,580 --> 00:22:03,330
how in place in 3.3 it's optional you

00:21:59,730 --> 00:22:05,580
don't need it packages as you'd expect

00:22:03,330 --> 00:22:07,860
you can layer them down as far as you

00:22:05,580 --> 00:22:11,700
want directories upon directories

00:22:07,860 --> 00:22:13,080
packages upon packages if you find

00:22:11,700 --> 00:22:14,820
you've got too many packages and it's

00:22:13,080 --> 00:22:18,559
just getting our wieldy to type

00:22:14,820 --> 00:22:21,240
use the as keyword again to alias it and

00:22:18,559 --> 00:22:22,860
and why I think we've covered this

00:22:21,240 --> 00:22:24,870
really useful if you're working in a

00:22:22,860 --> 00:22:27,509
company and you've got lots of different

00:22:24,870 --> 00:22:29,789
Python program programmers working on

00:22:27,509 --> 00:22:31,470
different things but lots of reuse file

00:22:29,789 --> 00:22:32,870
it all into packages especially if

00:22:31,470 --> 00:22:37,049
they're sharing that code across

00:22:32,870 --> 00:22:39,690
projects if you want to have a bit of

00:22:37,049 --> 00:22:42,419
fun import anti-gravity if you're an

00:22:39,690 --> 00:22:44,370
XKCD fan just type that into a Python

00:22:42,419 --> 00:22:45,870
prompt if you don't think anything

00:22:44,370 --> 00:22:48,480
happened go have a look at what happened

00:22:45,870 --> 00:22:50,220
in your web browser behind the scenes if

00:22:48,480 --> 00:22:53,480
you want to understand the Zen of Python

00:22:50,220 --> 00:22:56,129
import this it will show you pep eight

00:22:53,480 --> 00:22:58,710
if you want to know why there's no

00:22:56,129 --> 00:23:01,710
braces in Python and never will be just

00:22:58,710 --> 00:23:05,360
type from future import braces and I've

00:23:01,710 --> 00:23:07,590
already mentioned the heap q CS lecture

00:23:05,360 --> 00:23:10,919
we've talked about the modules as

00:23:07,590 --> 00:23:12,809
command line tools I did a presentation

00:23:10,919 --> 00:23:14,789
at the Melbourne python user group a

00:23:12,809 --> 00:23:16,649
couple of months ago just going through

00:23:14,789 --> 00:23:18,779
a range of different one liners with

00:23:16,649 --> 00:23:23,730
Python so have a look at that blog

00:23:18,779 --> 00:23:26,399
posting because the talks there lots of

00:23:23,730 --> 00:23:29,759
things we didn't cover in 20-something

00:23:26,399 --> 00:23:32,909
minutes how you can control packages and

00:23:29,759 --> 00:23:34,500
modules with the all variable basically

00:23:32,909 --> 00:23:36,720
it's a way of saying you know what I've

00:23:34,500 --> 00:23:38,460
got methods I sorry I've got functions

00:23:36,720 --> 00:23:40,049
or classes inside my module or my

00:23:38,460 --> 00:23:44,039
package that I don't want the rest of

00:23:40,049 --> 00:23:45,570
the world to see by default and you can

00:23:44,039 --> 00:23:47,039
control it with this variable you

00:23:45,570 --> 00:23:50,399
basically say these are the only

00:23:47,039 --> 00:23:52,889
functions I want to be exported out of

00:23:50,399 --> 00:23:56,009
my module if someone uses are from my

00:23:52,889 --> 00:23:57,659
module import star lots of other things

00:23:56,009 --> 00:23:59,429
you don't have to have a directory for a

00:23:57,659 --> 00:24:02,460
package you can have a zip file really

00:23:59,429 --> 00:24:04,169
good way to ship software we've not

00:24:02,460 --> 00:24:06,240
talked about how to import packages that

00:24:04,169 --> 00:24:08,179
are zip files from futures really

00:24:06,240 --> 00:24:11,070
important lots of other things there if

00:24:08,179 --> 00:24:13,799
you're on top of everything I've talked

00:24:11,070 --> 00:24:17,789
about today this set of bullet points is

00:24:13,799 --> 00:24:19,320
the next set of things to learn if you

00:24:17,789 --> 00:24:21,240
want to learn more if you think I've

00:24:19,320 --> 00:24:23,760
whizzed through this way too fast and I

00:24:21,240 --> 00:24:25,799
have this is where you would go if you

00:24:23,760 --> 00:24:28,740
asked me to find out more the online

00:24:25,799 --> 00:24:30,360
documentation has a really good coverage

00:24:28,740 --> 00:24:34,110
from beginners right through to advanced

00:24:30,360 --> 00:24:35,940
people on how to work with modules The

00:24:34,110 --> 00:24:38,160
Hitchhiker's Guide to python is a

00:24:35,940 --> 00:24:41,670
wonderful and opinionated and proudly

00:24:38,160 --> 00:24:43,320
opinionated guide to python and Zed

00:24:41,670 --> 00:24:46,110
Shores learn python the hard way he's

00:24:43,320 --> 00:24:48,120
got some good coverage as well I'm a big

00:24:46,110 --> 00:24:50,790
fan of learning python which i think is

00:24:48,120 --> 00:24:54,150
either about two or just has come out in

00:24:50,790 --> 00:24:58,429
a new addition anthony briggs who's a

00:24:54,150 --> 00:25:00,570
local python esta and in terms of

00:24:58,429 --> 00:25:02,070
beautiful code how do you know when

00:25:00,570 --> 00:25:05,220
you've got beautiful code there is a

00:25:02,070 --> 00:25:07,410
wonderful book curated by andy orem and

00:25:05,220 --> 00:25:09,660
greg wilson from o'reilly called

00:25:07,410 --> 00:25:11,670
beautiful code talking to a bunch of

00:25:09,660 --> 00:25:14,850
leading people in the open source

00:25:11,670 --> 00:25:20,490
community about software that they think

00:25:14,850 --> 00:25:22,710
is beautiful and why i haven't uploaded

00:25:20,490 --> 00:25:25,140
the notes yet but they will be available

00:25:22,710 --> 00:25:28,080
on SlideShare and they'll also be

00:25:25,140 --> 00:25:30,240
available on my blog so I've whizzed

00:25:28,080 --> 00:25:32,790
through this and there's a few small

00:25:30,240 --> 00:25:35,040
source code examples as well as notes

00:25:32,790 --> 00:25:37,410
that feed into the slides I've shown it

00:25:35,040 --> 00:25:39,570
will all be up on the blog if you want

00:25:37,410 --> 00:25:41,010
to download it i'm here until tuesday

00:25:39,570 --> 00:25:43,650
afternoon so if you want to grab me and

00:25:41,010 --> 00:25:45,860
ask questions please feel welcome thanks

00:25:43,650 --> 00:25:45,860

YouTube URL: https://www.youtube.com/watch?v=72lahT9Umtg


