Title: Nobody Expects the Python Packaging Authority
Publication date: 2013-07-11
Playlist: Pycon Australia 2013
Description: 
	Nick Coghlan
http://2013.pycon-au.org/schedule/30030/view_talk
These are interesting times for the Python packaging ecosystem, with the Python Packaging Authority (creators of the popular pip and virtualenv tools) emerging as the umbrella brand for a suite of related tools that will bring support for updated packaging standards to both the upcoming Python 3.4 and to existing versions of Python.

This talk will cover some of the history of Python's packaging tools and systems, where we are now,
Captions: 
	00:00:00,000 --> 00:00:03,780
nick is a cpython core developer and a

00:00:02,550 --> 00:00:05,970
nominated member of the pipes and

00:00:03,780 --> 00:00:08,099
software foundation he is the author or

00:00:05,970 --> 00:00:10,230
co-author of several accepted Python

00:00:08,099 --> 00:00:11,969
enhancement protocols including pep 343

00:00:10,230 --> 00:00:13,380
which added the win statement and

00:00:11,969 --> 00:00:15,780
context managers to the language

00:00:13,380 --> 00:00:18,300
he's also accepted a number of pips on

00:00:15,780 --> 00:00:20,189
ghido van Rossum's behalf since June

00:00:18,300 --> 00:00:21,600
2011 after more than 12 years in the

00:00:20,189 --> 00:00:23,189
aerospace and defense sector nick has

00:00:21,600 --> 00:00:24,930
been working on internal tools for Red

00:00:23,189 --> 00:00:26,880
Hat and is now the development lead for

00:00:24,930 --> 00:00:29,250
Baker a full-stack software integration

00:00:26,880 --> 00:00:31,650
and testing system Nick is here today to

00:00:29,250 --> 00:00:33,480
tell us that nobody expects the Python

00:00:31,650 --> 00:00:40,079
packaging Authority wien please give it

00:00:33,480 --> 00:00:45,140
up for Nick Coughlin nobody expects it

00:00:40,079 --> 00:00:51,090
except people who read the schedule oops

00:00:45,140 --> 00:00:54,570
so Keith wrote it yeah Russell already

00:00:51,090 --> 00:00:56,579
went through most of this so I'm also

00:00:54,570 --> 00:00:58,530
the media fell delegate for packaging

00:00:56,579 --> 00:01:02,010
related pets which we'll get into more

00:00:58,530 --> 00:01:05,430
about what that means later so Python

00:01:02,010 --> 00:01:07,830
packaging is fine Python packaging is

00:01:05,430 --> 00:01:17,119
wonderful these are probably not the

00:01:07,830 --> 00:01:19,320
words most people would use oops so we

00:01:17,119 --> 00:01:21,570
we actually get quite a common feedback

00:01:19,320 --> 00:01:23,040
on new people who are new to Python

00:01:21,570 --> 00:01:26,220
particularly coming from other languages

00:01:23,040 --> 00:01:30,060
and your languages like nodejs like

00:01:26,220 --> 00:01:31,500
going why is packaging so bad it would

00:01:30,060 --> 00:01:33,420
be easy to get defensive and saying oh

00:01:31,500 --> 00:01:34,979
it's fine it's fine it's fine the

00:01:33,420 --> 00:01:37,320
problem is they're not wrong there's

00:01:34,979 --> 00:01:38,970
lots of things that are fundamentally

00:01:37,320 --> 00:01:43,380
broken in the way we do packaging in the

00:01:38,970 --> 00:01:45,329
Python community and so instead of

00:01:43,380 --> 00:01:48,420
saying oh no no no it's all fine we

00:01:45,329 --> 00:01:50,490
don't need to fix anything instead what

00:01:48,420 --> 00:01:53,970
we realized it was important to do was

00:01:50,490 --> 00:01:57,420
say okay where are we now where do we

00:01:53,970 --> 00:01:59,790
really want to be what's stopping us for

00:01:57,420 --> 00:02:04,079
actually being being there and what can

00:01:59,790 --> 00:02:05,130
we do about it and so a lot of the

00:02:04,079 --> 00:02:09,110
things that are wrong in Python

00:02:05,130 --> 00:02:11,550
packaging just a legacy of it being old

00:02:09,110 --> 00:02:13,800
the the core of the current packaging

00:02:11,550 --> 00:02:15,420
system was lay was laid when the

00:02:13,800 --> 00:02:18,960
dis utils commit was made in December

00:02:15,420 --> 00:02:23,460
1998 Google Inc was incorporated in

00:02:18,960 --> 00:02:25,850
September 1998 so our packaging system

00:02:23,460 --> 00:02:29,160
is almost predates Google

00:02:25,850 --> 00:02:30,570
oddly enough the software world has

00:02:29,160 --> 00:02:35,550
learned a lot about software

00:02:30,570 --> 00:02:37,230
distribution in the last 15 years and we

00:02:35,550 --> 00:02:41,160
haven't really taken advantage of a lot

00:02:37,230 --> 00:02:44,640
of that setup tools an easy install of

00:02:41,160 --> 00:02:47,520
dates from around 2004 which improves a

00:02:44,640 --> 00:02:51,080
lot of things but again still a couple

00:02:47,520 --> 00:02:55,170
of years before Jason was standardized

00:02:51,080 --> 00:02:59,550
and pip distribute virtual anvil things

00:02:55,170 --> 00:03:02,160
from around 2007 to 2009 and again they

00:02:59,550 --> 00:03:04,380
improved a lot of things but still dis

00:03:02,160 --> 00:03:07,350
utils is there at the core still 15

00:03:04,380 --> 00:03:10,470
years old still limiting us in a lot of

00:03:07,350 --> 00:03:13,890
ways still causing a lot of problems and

00:03:10,470 --> 00:03:16,290
so the question then becomes that's the

00:03:13,890 --> 00:03:19,290
history that's how we got here so where

00:03:16,290 --> 00:03:21,420
do we want to go just because we've been

00:03:19,290 --> 00:03:25,020
doing it for 15 years doesn't make it a

00:03:21,420 --> 00:03:27,390
good idea and so where we'd really like

00:03:25,020 --> 00:03:28,890
to get to we'd like newcomers to pass

00:03:27,390 --> 00:03:31,739
then to have a really clear packaging

00:03:28,890 --> 00:03:33,000
story easy to understand easy for them

00:03:31,739 --> 00:03:35,730
to get to started

00:03:33,000 --> 00:03:38,070
easy to know for them easy for them to

00:03:35,730 --> 00:03:39,930
know what they should be doing and then

00:03:38,070 --> 00:03:41,489
have more advanced options as things

00:03:39,930 --> 00:03:44,390
they can explore later if they hit the

00:03:41,489 --> 00:03:47,160
limits eight of the of the basic stuff

00:03:44,390 --> 00:03:49,590
so we want it to be so we want it really

00:03:47,160 --> 00:03:52,590
clear what's the best advice we want it

00:03:49,590 --> 00:03:54,410
to be easy to get started we want the

00:03:52,590 --> 00:03:57,360
tools themselves to be fast reliable

00:03:54,410 --> 00:04:00,360
reasonably secure and I'll get more into

00:03:57,360 --> 00:04:03,239
that qualifier later but the other thing

00:04:00,360 --> 00:04:05,850
we want is we don't want what we do to

00:04:03,239 --> 00:04:07,560
be a Python silo we want to be able to

00:04:05,850 --> 00:04:09,090
play well with others we want to

00:04:07,560 --> 00:04:10,320
integrate with the Linux distributions

00:04:09,090 --> 00:04:13,830
we want to integrate well with other

00:04:10,320 --> 00:04:14,850
backing new systems and so what I'll be

00:04:13,830 --> 00:04:17,820
doing today is I'll just be going

00:04:14,850 --> 00:04:20,280
through how we want to how what we're

00:04:17,820 --> 00:04:21,349
doing to try and get to where we want to

00:04:20,280 --> 00:04:24,199
be

00:04:21,349 --> 00:04:28,250
so their first call clear authority of

00:04:24,199 --> 00:04:34,039
guidelines what is preventing us giving

00:04:28,250 --> 00:04:35,360
those guidelines today and this is

00:04:34,039 --> 00:04:39,919
actually one of the most complex things

00:04:35,360 --> 00:04:41,930
because it's a people problem it some

00:04:39,919 --> 00:04:43,699
aspects of it relate specifically

00:04:41,930 --> 00:04:46,270
related to tools but predominantly

00:04:43,699 --> 00:04:49,490
related to people related to politics

00:04:46,270 --> 00:04:51,740
and the question of who gets to decide

00:04:49,490 --> 00:04:54,439
what those guidelines say what tools

00:04:51,740 --> 00:04:56,900
will they recommend where will they be

00:04:54,439 --> 00:04:59,150
documented and how to users figure out

00:04:56,900 --> 00:05:04,250
that these actually are the official

00:04:59,150 --> 00:05:06,469
guidelines and so the core of the people

00:05:04,250 --> 00:05:09,319
problem was who can actually say yes to

00:05:06,469 --> 00:05:11,419
this stuff we had people wanting to do

00:05:09,319 --> 00:05:13,189
the work people want to say hey I have

00:05:11,419 --> 00:05:16,279
these ideas for how to make things

00:05:13,189 --> 00:05:20,900
better can somebody please tell me how

00:05:16,279 --> 00:05:23,360
to make it official and so pison has a

00:05:20,900 --> 00:05:25,069
mechanism in place for the core language

00:05:23,360 --> 00:05:27,169
that is deciding this kind of thing

00:05:25,069 --> 00:05:30,229
which is the pious enhancement proposal

00:05:27,169 --> 00:05:34,520
process and that basically is the way

00:05:30,229 --> 00:05:37,339
guido van rossum says yes to things now

00:05:34,520 --> 00:05:39,370
the problem with that is if it's a

00:05:37,339 --> 00:05:42,379
problem that Guido doesn't care about

00:05:39,370 --> 00:05:44,539
then it's really hard to getting

00:05:42,379 --> 00:05:46,190
interested and sometimes he'll say yes

00:05:44,539 --> 00:05:50,509
just so people stop bothering him about

00:05:46,190 --> 00:05:53,629
it and that's the way packaging has

00:05:50,509 --> 00:05:55,819
historically gone because Guido just

00:05:53,629 --> 00:05:57,500
wanted the problem to go away the rest

00:05:55,819 --> 00:05:59,330
of the core developers me included just

00:05:57,500 --> 00:06:01,939
one of the problem to go away and so we

00:05:59,330 --> 00:06:03,529
said yes to things that we probably

00:06:01,939 --> 00:06:07,400
shouldn't have said yes to because they

00:06:03,529 --> 00:06:12,039
just didn't work and so what was changed

00:06:07,400 --> 00:06:14,120
this time is I'm basically a lot more

00:06:12,039 --> 00:06:15,319
directly involved because I've had a lot

00:06:14,120 --> 00:06:16,490
more to do with packaging in the last

00:06:15,319 --> 00:06:19,129
couple of years since starting at Red

00:06:16,490 --> 00:06:21,129
Hat and I'm one of the ones now going

00:06:19,129 --> 00:06:23,509
hey this is broken we need to do better

00:06:21,129 --> 00:06:25,939
and we had a couple of people coming in

00:06:23,509 --> 00:06:28,279
daniel health and donald stuffed wanting

00:06:25,939 --> 00:06:30,050
to work on a lot of stuff and the people

00:06:28,279 --> 00:06:31,909
developers and the setup tools

00:06:30,050 --> 00:06:34,409
developers again wanting to get involved

00:06:31,909 --> 00:06:36,979
and work on stuff and

00:06:34,409 --> 00:06:39,569
I basically volunteered to say hey

00:06:36,979 --> 00:06:41,969
that's right let's have another go at

00:06:39,569 --> 00:06:43,589
this and I'll volunteer to be the one to

00:06:41,969 --> 00:06:45,239
say hey yes let's do that

00:06:43,589 --> 00:06:47,159
so these other guys are doing all the

00:06:45,239 --> 00:06:48,719
work

00:06:47,159 --> 00:06:52,969
the only thing I'm actually doing myself

00:06:48,719 --> 00:06:55,949
is writing one metadata standard and

00:06:52,969 --> 00:06:57,809
that then becomes the linchpin that lets

00:06:55,949 --> 00:07:00,019
all the new tool the new versions of the

00:06:57,809 --> 00:07:04,619
tools interoperate on different things

00:07:00,019 --> 00:07:10,050
and so that basically gives us the power

00:07:04,619 --> 00:07:11,489
to say yes and makes lets lets us

00:07:10,050 --> 00:07:13,679
channel the energy of all the people

00:07:11,489 --> 00:07:16,110
involved in productive directions such

00:07:13,679 --> 00:07:18,479
that will actually improve the ecosystem

00:07:16,110 --> 00:07:20,159
as a whole rather than people going off

00:07:18,479 --> 00:07:22,979
their separate ways and just creating

00:07:20,159 --> 00:07:27,360
more fractured communities and then

00:07:22,979 --> 00:07:28,889
Bridget Jones has also stepped up to to

00:07:27,360 --> 00:07:30,599
be the final decision-maker for the

00:07:28,889 --> 00:07:32,699
stuff specifically related to the Python

00:07:30,599 --> 00:07:34,289
package index and that's employed us

00:07:32,699 --> 00:07:38,300
make some substantial improvements there

00:07:34,289 --> 00:07:40,769
that of that we'll get more into later

00:07:38,300 --> 00:07:45,050
one of the other key changes though is

00:07:40,769 --> 00:07:48,119
that the Python enhancement process

00:07:45,050 --> 00:07:49,919
- enhancement proposal process has

00:07:48,119 --> 00:07:53,219
historically been targeted solely at the

00:07:49,919 --> 00:07:55,619
standard library and so every pep had to

00:07:53,219 --> 00:07:57,269
have had to be making a proposal about

00:07:55,619 --> 00:07:59,939
hey this is going to be in the standard

00:07:57,269 --> 00:08:02,279
library at some point and it turns out

00:07:59,939 --> 00:08:05,059
that's a fundamentally broken away of

00:08:02,279 --> 00:08:07,860
approaching packaging problems because

00:08:05,059 --> 00:08:11,879
Python 2.7 is still the most widely used

00:08:07,860 --> 00:08:15,899
Python version Python 3.3 is catching up

00:08:11,879 --> 00:08:17,999
but it's not there yet and both of them

00:08:15,899 --> 00:08:22,259
are obviously far more heavily used then

00:08:17,999 --> 00:08:24,989
the not yet released Python 3.4 so a pep

00:08:22,259 --> 00:08:28,169
proposing changes to Python 3.4 isn't

00:08:24,989 --> 00:08:29,849
really very interesting because nobody's

00:08:28,169 --> 00:08:31,709
using it so a packaging tool that only

00:08:29,849 --> 00:08:35,550
works with Python 3.4 which doesn't

00:08:31,709 --> 00:08:37,620
exist what's the point and historically

00:08:35,550 --> 00:08:40,019
we have tried to do packaging peps that

00:08:37,620 --> 00:08:43,139
way targeting the next version of python

00:08:40,019 --> 00:08:46,199
and it just doesn't work so what we've

00:08:43,139 --> 00:08:48,120
changed this time is the pips are not

00:08:46,199 --> 00:08:50,550
being discussed on Python dev there are

00:08:48,120 --> 00:08:53,100
you tell sig and this you tell sig is

00:08:50,550 --> 00:08:54,690
all about current tools it is all about

00:08:53,100 --> 00:08:58,350
tools that will work with versions of

00:08:54,690 --> 00:09:01,110
Python at least as far back as 2.6 and

00:08:58,350 --> 00:09:05,070
the other interesting thing is that if

00:09:01,110 --> 00:09:09,270
we do this right people that are already

00:09:05,070 --> 00:09:11,190
using the relevant tools should not

00:09:09,270 --> 00:09:13,220
notice any difference on the back end

00:09:11,190 --> 00:09:15,570
for the stuff they are doing right now

00:09:13,220 --> 00:09:16,560
what they should notice is that the

00:09:15,570 --> 00:09:18,270
tools that they are already using

00:09:16,560 --> 00:09:20,160
actually grow a few more options and

00:09:18,270 --> 00:09:24,660
become a bit more allowable and a bit

00:09:20,160 --> 00:09:27,089
faster but in theory we are trying to

00:09:24,660 --> 00:09:28,920
avoid disrupting what end-users actually

00:09:27,089 --> 00:09:30,440
do which again is a significant

00:09:28,920 --> 00:09:33,720
difference from the last attempt at this

00:09:30,440 --> 00:09:35,100
which suffered the uptake problem of it

00:09:33,720 --> 00:09:41,300
required users to change what they were

00:09:35,100 --> 00:09:43,620
doing so that's one of the big changes

00:09:41,300 --> 00:09:48,360
one of the other big blockers two things

00:09:43,620 --> 00:09:50,070
being clear or what what a what prevents

00:09:48,360 --> 00:09:52,160
things being clear was hey should I use

00:09:50,070 --> 00:09:55,890
setup tools or should I use distribute

00:09:52,160 --> 00:09:58,200
and so distribute was a set up tools for

00:09:55,890 --> 00:10:00,740
that came about due to a combination of

00:09:58,200 --> 00:10:02,820
technical issues and governance issues

00:10:00,740 --> 00:10:06,510
the important thing from a user's point

00:10:02,820 --> 00:10:07,860
of view the distribute fork is over the

00:10:06,510 --> 00:10:11,010
distribute fork has been merged back

00:10:07,860 --> 00:10:13,620
into setup tools setup tool 0.7 was the

00:10:11,010 --> 00:10:15,720
first one release under the lead

00:10:13,620 --> 00:10:18,240
maintenance of Jason Coombs who's the

00:10:15,720 --> 00:10:21,089
former lead maintainer of distribute and

00:10:18,240 --> 00:10:25,709
it's now maintained in a mercurial repo

00:10:21,089 --> 00:10:29,089
on bit bucket and so that that merger

00:10:25,709 --> 00:10:32,400
happened first and said up till 0-7 and

00:10:29,089 --> 00:10:34,110
so the answer now that unfortunately had

00:10:32,400 --> 00:10:39,120
some kind of compatibility hiccups and

00:10:34,110 --> 00:10:41,730
so setup tools 0.8 is the use setup

00:10:39,120 --> 00:10:44,459
tools 0 today Jason has turned this

00:10:41,730 --> 00:10:49,680
slide into a lie jeredy 8 was released

00:10:44,459 --> 00:10:51,060
this morning so so yes so in terms of

00:10:49,680 --> 00:10:54,209
should I use distribute or setup tools

00:10:51,060 --> 00:10:57,690
the answer is now you set up till 0.8 or

00:10:54,209 --> 00:11:00,630
later and that's that's basically the

00:10:57,690 --> 00:11:02,070
recommended default build system is grab

00:11:00,630 --> 00:11:05,970
setup tools off pi PI

00:11:02,070 --> 00:11:07,680
use that and that's in preference to dis

00:11:05,970 --> 00:11:09,320
utils as well so don't use the

00:11:07,680 --> 00:11:13,560
standard-issue tills it's really limited

00:11:09,320 --> 00:11:14,880
and so a lot of the issues with setup

00:11:13,560 --> 00:11:17,490
tools have been fixed through the

00:11:14,880 --> 00:11:19,620
distribute fork and it's it still has a

00:11:17,490 --> 00:11:24,300
few quirks but it's still better than

00:11:19,620 --> 00:11:26,940
the students see yes so that that is

00:11:24,300 --> 00:11:30,029
will now be clear Pitt versus easy

00:11:26,940 --> 00:11:31,860
install so again this was a case where

00:11:30,029 --> 00:11:34,079
easy install had a lot of problematic

00:11:31,860 --> 00:11:37,440
defaults sis admins hate it with a

00:11:34,079 --> 00:11:40,680
passion and they have good reason to pip

00:11:37,440 --> 00:11:43,410
was kind of designed to be a non broken

00:11:40,680 --> 00:11:44,790
easy install and in particular you can

00:11:43,410 --> 00:11:49,709
actually uninstall stuff that the

00:11:44,790 --> 00:11:51,600
installs however one of the interesting

00:11:49,709 --> 00:11:56,220
things an easy install that pip didn't

00:11:51,600 --> 00:11:57,899
adopt is the binary egg format there's a

00:11:56,220 --> 00:12:00,600
bunch of complex reasons for why that

00:11:57,899 --> 00:12:02,069
was a good idea on the other hand egg

00:12:00,600 --> 00:12:05,880
solved a real problem of binary

00:12:02,069 --> 00:12:07,440
distribution particularly lack of binary

00:12:05,880 --> 00:12:10,199
support on Windows can be a serious

00:12:07,440 --> 00:12:15,000
hassle just because building stuff from

00:12:10,199 --> 00:12:17,040
source is so painful there and it also

00:12:15,000 --> 00:12:21,930
the build step slows things down an

00:12:17,040 --> 00:12:26,579
awful lot so what Daniel Hoth did was he

00:12:21,930 --> 00:12:28,620
created a new format as he puts it he

00:12:26,579 --> 00:12:33,060
called it wheel because new egg was

00:12:28,620 --> 00:12:35,550
taken and basically what what that is is

00:12:33,060 --> 00:12:39,060
it's a revamped version of the egg

00:12:35,550 --> 00:12:41,660
format that pretty much fixes all the

00:12:39,060 --> 00:12:43,589
reasons why people didn't like eggs and

00:12:41,660 --> 00:12:46,079
integrates better with platform packages

00:12:43,589 --> 00:12:48,529
so you can take a wheel tear it apart

00:12:46,079 --> 00:12:53,339
turn it into an RPM that kind of thing

00:12:48,529 --> 00:12:56,550
and what that means is that the upcoming

00:12:53,339 --> 00:12:58,439
pip 1.4 and this one is still coming

00:12:56,550 --> 00:13:00,540
soon they didn't publish this one this

00:12:58,439 --> 00:13:03,630
morning you can't download the betas

00:13:00,540 --> 00:13:07,470
though and what it basically does is it

00:13:03,630 --> 00:13:12,540
adds the wheel support to tip it and

00:13:07,470 --> 00:13:16,269
that will eventually replace the the

00:13:12,540 --> 00:13:17,620
it makes pip a much better replacement

00:13:16,269 --> 00:13:19,959
for easy install at this point because

00:13:17,620 --> 00:13:21,610
it does have some level of binary

00:13:19,959 --> 00:13:22,990
distribution support now and that you

00:13:21,610 --> 00:13:25,620
can do build caching with it and all

00:13:22,990 --> 00:13:25,620
that kind of good stuff

00:13:25,750 --> 00:13:31,240
and then the final final link in the

00:13:29,290 --> 00:13:34,600
thing of how what's preventing us from

00:13:31,240 --> 00:13:37,630
doing clear Authority guidelines is who

00:13:34,600 --> 00:13:39,220
do you believe because there's there's

00:13:37,630 --> 00:13:40,870
basically some rough history there

00:13:39,220 --> 00:13:42,850
between different developers fighting

00:13:40,870 --> 00:13:44,560
with each other as to which direction

00:13:42,850 --> 00:13:47,740
they thought the packaging invite

00:13:44,560 --> 00:13:50,649
ecosystem should go there's a lot of the

00:13:47,740 --> 00:13:52,060
remnants of that online and so when you

00:13:50,649 --> 00:13:53,560
try to search for pipe and packaging

00:13:52,060 --> 00:13:55,180
you'll get a lot of conflicting advice

00:13:53,560 --> 00:13:57,100
you'll get a lot of vitriol directed

00:13:55,180 --> 00:14:00,459
between different groups of developers

00:13:57,100 --> 00:14:02,709
and from point of view of beginner

00:14:00,459 --> 00:14:03,100
trying to get started it's like what do

00:14:02,709 --> 00:14:06,010
I do

00:14:03,100 --> 00:14:07,570
who do I believe the standard libraries

00:14:06,010 --> 00:14:12,700
no help because it's still or disutility

00:14:07,570 --> 00:14:16,060
stand basically pretty much packaging

00:14:12,700 --> 00:14:18,519
packaging packaging advice that was if

00:14:16,060 --> 00:14:25,449
it was still 2003 would probably be good

00:14:18,519 --> 00:14:26,500
advice not so useful in 2013 and so who

00:14:25,449 --> 00:14:29,860
should you believe you should believe

00:14:26,500 --> 00:14:31,870
the Python packaging Authority and this

00:14:29,860 --> 00:14:33,730
was a name that was originally chosen by

00:14:31,870 --> 00:14:37,000
the Pippin virtual and developers a few

00:14:33,730 --> 00:14:41,860
years ago that they were mostly just

00:14:37,000 --> 00:14:44,290
thought it was amusing and I kind of

00:14:41,860 --> 00:14:47,380
co-opted it a bit and said hey you know

00:14:44,290 --> 00:14:48,040
what you guys have a pretty cool group

00:14:47,380 --> 00:14:50,860
name there

00:14:48,040 --> 00:14:53,949
would you like mind becoming the hosts

00:14:50,860 --> 00:14:55,510
of all the other tools as well and so

00:14:53,949 --> 00:14:57,490
basically that's what we have now Pippin

00:14:55,510 --> 00:15:01,839
virtualenv is still on the PI P a github

00:14:57,490 --> 00:15:03,880
account but set up tools the Python

00:15:01,839 --> 00:15:06,550
package index source code and a new

00:15:03,880 --> 00:15:10,120
support library called disk Lib all live

00:15:06,550 --> 00:15:11,470
under the PI PA account on bitbucket the

00:15:10,120 --> 00:15:15,360
and another project that we're working

00:15:11,470 --> 00:15:18,250
on is the Python package and user guide

00:15:15,360 --> 00:15:19,630
and it's not stable yet because we've

00:15:18,250 --> 00:15:24,060
been waiting for the pieces of setup

00:15:19,630 --> 00:15:25,640
tools 0.8 and pick 1.4 to get into place

00:15:24,060 --> 00:15:27,649
but now that

00:15:25,640 --> 00:15:29,180
they're either published or very close

00:15:27,649 --> 00:15:30,709
to publish we'll be able to give clear

00:15:29,180 --> 00:15:34,029
guidelines in the packaging user guide

00:15:30,709 --> 00:15:37,250
to say get setup tools 0-8 or later

00:15:34,029 --> 00:15:38,870
grab pip 1.4 or later and you'll

00:15:37,250 --> 00:15:43,579
basically have the state-of-the-art in

00:15:38,870 --> 00:15:46,100
Python packaging tools and essentially

00:15:43,579 --> 00:15:48,589
once that document is ready we'll go

00:15:46,100 --> 00:15:50,510
into the distributing software

00:15:48,589 --> 00:15:54,560
guidelines on five-cent org and

00:15:50,510 --> 00:15:56,690
basically not entirely sure yet how much

00:15:54,560 --> 00:15:59,690
of that we're gonna kill probably a lot

00:15:56,690 --> 00:16:01,300
of it and will redirect readers over to

00:15:59,690 --> 00:16:04,540
the Python packaging user guide instead

00:16:01,300 --> 00:16:06,260
and then that way people will get the

00:16:04,540 --> 00:16:08,000
newcomers to pass and we'll go to

00:16:06,260 --> 00:16:10,490
python.org and get the Clery directions

00:16:08,000 --> 00:16:12,529
say hey this info over here is authority

00:16:10,490 --> 00:16:15,440
of this is the best way to get started

00:16:12,529 --> 00:16:18,350
with python packaging and so fingers

00:16:15,440 --> 00:16:21,399
crossed we will lose the some of the

00:16:18,350 --> 00:16:23,570
lament of our what should I be doing

00:16:21,399 --> 00:16:24,980
there's all this conflicting advice on

00:16:23,570 --> 00:16:26,600
the internet which should I follow and

00:16:24,980 --> 00:16:29,510
we're hoping that the delegation from

00:16:26,600 --> 00:16:34,850
python.org will will hopefully make that

00:16:29,510 --> 00:16:37,010
easier so that's the documentation side

00:16:34,850 --> 00:16:39,260
of things and the government side of

00:16:37,010 --> 00:16:40,910
things but still there's the thing of

00:16:39,260 --> 00:16:44,720
how do you actually get bootstrapped

00:16:40,910 --> 00:16:47,630
into this ecosystem how do you what does

00:16:44,720 --> 00:16:51,680
the guide tell users to do to actually

00:16:47,630 --> 00:16:52,640
get these tools so well people in the

00:16:51,680 --> 00:16:54,920
standard library have been an

00:16:52,640 --> 00:16:57,440
interesting question wouldn't it and so

00:16:54,920 --> 00:17:01,550
that's basically what we're gonna do

00:16:57,440 --> 00:17:03,380
Richards written a pep-pep 4:39 and what

00:17:01,550 --> 00:17:06,589
we're not adding the full pip source

00:17:03,380 --> 00:17:08,689
code to the center that I read just

00:17:06,589 --> 00:17:09,919
because that makes updates a bit too

00:17:08,689 --> 00:17:13,100
painful

00:17:09,919 --> 00:17:15,470
what Python 3.4 will be able to do

00:17:13,100 --> 00:17:18,079
though is actually bootstrap it into its

00:17:15,470 --> 00:17:21,319
own installation and so the Linux

00:17:18,079 --> 00:17:22,970
distributions we expect will just either

00:17:21,319 --> 00:17:25,459
pre bootstrap that or just provider as a

00:17:22,970 --> 00:17:28,610
normal system package but the big big

00:17:25,459 --> 00:17:30,669
advantages on Windows where you'll be

00:17:28,610 --> 00:17:32,660
and possibly Mac OSX

00:17:30,669 --> 00:17:35,530
where you'll basically be able to

00:17:32,660 --> 00:17:38,160
bootstrap it in yourself easily enough

00:17:35,530 --> 00:17:39,960
and

00:17:38,160 --> 00:17:42,510
one of the things that that will

00:17:39,960 --> 00:17:45,390
probably enable is there's another

00:17:42,510 --> 00:17:47,220
pep-pep 431 which is about improving the

00:17:45,390 --> 00:17:49,290
time zone support in the standard

00:17:47,220 --> 00:17:50,640
library and one of the problems there

00:17:49,290 --> 00:17:53,220
has always been about how do we do

00:17:50,640 --> 00:17:55,830
database updates when the Olson database

00:17:53,220 --> 00:17:57,600
changes and by having food stripped from

00:17:55,830 --> 00:17:58,920
the standard library then that becomes

00:17:57,600 --> 00:18:01,440
easy we just published enough to add a

00:17:58,920 --> 00:18:04,140
package on PI bi that you can download

00:18:01,440 --> 00:18:07,140
and you'll override those and so that'll

00:18:04,140 --> 00:18:11,870
enable a lot of cool things will it will

00:18:07,140 --> 00:18:11,870
lower the barrier to entry to actually

00:18:12,350 --> 00:18:20,240
there'll be it'll it'll be a lot easier

00:18:14,430 --> 00:18:20,240
to have things on pi PI as hey don't get

00:18:20,390 --> 00:18:23,760
lessen the pressure to get things into

00:18:22,320 --> 00:18:24,840
the standard library because there's a

00:18:23,760 --> 00:18:26,340
lot of things where it'd be your more

00:18:24,840 --> 00:18:28,020
anonymously convenient to have them

00:18:26,340 --> 00:18:32,280
there but they're not really stable

00:18:28,020 --> 00:18:33,840
enough yet and so see ya and so that's

00:18:32,280 --> 00:18:37,950
will be hopefully an exciting addition

00:18:33,840 --> 00:18:39,510
in Python 3 4 but that's it I was saying

00:18:37,950 --> 00:18:42,840
earlier that we want to do this all

00:18:39,510 --> 00:18:46,230
ecosystem first and a change for Python

00:18:42,840 --> 00:18:47,520
3.4 doesn't help people now and so the

00:18:46,230 --> 00:18:51,300
big thing we're going to do there is

00:18:47,520 --> 00:18:54,090
that at the moment it's not really that

00:18:51,300 --> 00:18:56,850
clear how official the bootstrap

00:18:54,090 --> 00:19:00,300
mechanisms for setup tools and pipa and

00:18:56,850 --> 00:19:02,180
4 to 7 + 3 3 and similar releases we

00:19:00,300 --> 00:19:04,470
need a story better story on that front

00:19:02,180 --> 00:19:05,910
and what we're probably going to do is

00:19:04,470 --> 00:19:07,770
we're probably going to give the scripts

00:19:05,910 --> 00:19:11,790
that you need to bootstrap those things

00:19:07,770 --> 00:19:13,050
a home on the Python package index and

00:19:11,790 --> 00:19:14,970
so people will actually be able to get

00:19:13,050 --> 00:19:17,250
them from pi PI and PI P I'll be saying

00:19:14,970 --> 00:19:19,500
hey look this is how you get

00:19:17,250 --> 00:19:22,590
bootstrapped and the user guide will be

00:19:19,500 --> 00:19:24,030
able to reference that so the exact

00:19:22,590 --> 00:19:26,370
details of how that's going to work are

00:19:24,030 --> 00:19:30,630
still in flux but we'll do something to

00:19:26,370 --> 00:19:32,160
make it more obviously official so

00:19:30,630 --> 00:19:34,170
that's that's kind of the newcomer

00:19:32,160 --> 00:19:35,310
experience that that's what we want to

00:19:34,170 --> 00:19:39,030
do to make things easier for people

00:19:35,310 --> 00:19:40,200
coming into Python so but what about

00:19:39,030 --> 00:19:44,310
once you're actually in you're using

00:19:40,200 --> 00:19:47,850
these tools how do we want them to work

00:19:44,310 --> 00:19:50,269
that and the goal there is fast reliable

00:19:47,850 --> 00:19:52,219
and reasonably secure

00:19:50,269 --> 00:19:54,139
and there's a reason that last one has

00:19:52,219 --> 00:19:57,799
to be qualified but we'll get to that

00:19:54,139 --> 00:20:00,559
later so what then is currently

00:19:57,799 --> 00:20:03,499
preventing fast distribution

00:20:00,559 --> 00:20:05,419
the mirroring system for pi pi is quite

00:20:03,499 --> 00:20:10,759
complex it's really hard to run a mirror

00:20:05,419 --> 00:20:12,499
correctly and the mirrors are tricky

00:20:10,759 --> 00:20:13,759
enough that most of the tools don't use

00:20:12,499 --> 00:20:17,809
them by default you have to explicitly

00:20:13,759 --> 00:20:23,539
request them we have this crazy crazy

00:20:17,809 --> 00:20:27,489
system where one of the things that a

00:20:23,539 --> 00:20:29,749
link can get from the index server is a

00:20:27,489 --> 00:20:31,820
reference to another page and it will

00:20:29,749 --> 00:20:36,469
then go look at the other page for more

00:20:31,820 --> 00:20:37,579
links and it will scrape the HTML

00:20:36,469 --> 00:20:43,729
looking for things that look like

00:20:37,579 --> 00:20:45,789
releases this is crazy and not only is

00:20:43,729 --> 00:20:48,919
it crazy but it's also incredibly slow

00:20:45,789 --> 00:20:51,139
so we're making some changes to deal

00:20:48,919 --> 00:20:54,859
with that and then the other thing is

00:20:51,139 --> 00:20:56,779
that the metadata for the dependencies

00:20:54,859 --> 00:20:58,999
between packages is not AG actually

00:20:56,779 --> 00:21:00,529
published by the packaged index you have

00:20:58,999 --> 00:21:01,969
to download the entire distribution

00:21:00,529 --> 00:21:04,899
before you can see what its dependencies

00:21:01,969 --> 00:21:08,869
are which is again a little strange so

00:21:04,899 --> 00:21:12,669
things that have changed recently pipe

00:21:08,869 --> 00:21:15,469
Ida python.org is now behind the fastly

00:21:12,669 --> 00:21:17,589
content delivery network which Vasiliev

00:21:15,469 --> 00:21:20,659
actually donated that to the PSF

00:21:17,589 --> 00:21:21,979
including their logging access so that

00:21:20,659 --> 00:21:24,109
we can actually maintain the download

00:21:21,979 --> 00:21:29,599
counts that they were switched off

00:21:24,109 --> 00:21:31,759
bolete briefly but in our back and the

00:21:29,599 --> 00:21:33,320
advantage of this is though so reduces

00:21:31,759 --> 00:21:37,219
the load on master Python package index

00:21:33,320 --> 00:21:38,749
server it's used automatically so the

00:21:37,219 --> 00:21:42,649
tools don't need to opt in or anything

00:21:38,749 --> 00:21:44,089
it just happens and then as you get the

00:21:42,649 --> 00:21:46,190
whole point of a CDN is you get the G

00:21:44,089 --> 00:21:48,979
about geographic distribution benefits

00:21:46,190 --> 00:21:50,450
at the endpoints so you'll get faster

00:21:48,979 --> 00:21:53,329
link at faster ping times faster

00:21:50,450 --> 00:21:55,820
downloads assuming that all and that

00:21:53,329 --> 00:21:58,279
seems to be working pretty well and as I

00:21:55,820 --> 00:22:00,190
said while we briefly lost the download

00:21:58,279 --> 00:22:03,190
counts from by pi we

00:22:00,190 --> 00:22:07,630
with working with fastly we have that

00:22:03,190 --> 00:22:11,050
back the other one is so yet another pep

00:22:07,630 --> 00:22:13,120
there's complex there's lots of peps 438

00:22:11,050 --> 00:22:19,990
is about trying to kill off the scanning

00:22:13,120 --> 00:22:21,850
of external links because basically yeah

00:22:19,990 --> 00:22:25,720
it kind of sort of made sense at

00:22:21,850 --> 00:22:28,450
different times in the in the evolution

00:22:25,720 --> 00:22:30,160
of the ecosystem but at the moment it's

00:22:28,450 --> 00:22:33,760
just slowing things down for no good

00:22:30,160 --> 00:22:36,280
reason and so all new projects

00:22:33,760 --> 00:22:38,470
registered with PAP I now have link

00:22:36,280 --> 00:22:43,510
scanning turned off they will just look

00:22:38,470 --> 00:22:47,230
for releases on paper I don't stuff has

00:22:43,510 --> 00:22:50,230
gone through and basically stand all of

00:22:47,230 --> 00:22:51,910
the packages on the index to say which

00:22:50,230 --> 00:22:54,010
ones actually needed the link scanning

00:22:51,910 --> 00:22:56,650
and any of the ones that we could

00:22:54,010 --> 00:22:59,700
determine definitely didn't need it the

00:22:56,650 --> 00:23:03,010
link scanning has been turned off which

00:22:59,700 --> 00:23:05,080
and then project authors also have the

00:23:03,010 --> 00:23:06,550
option to go in and say no no I really

00:23:05,080 --> 00:23:10,780
don't need it you can turn it off that's

00:23:06,550 --> 00:23:13,600
fine and then to supplement that there's

00:23:10,780 --> 00:23:15,640
the ability to specify specific external

00:23:13,600 --> 00:23:17,200
links which is still not great but a

00:23:15,640 --> 00:23:21,040
heck of a lot faster than the old link

00:23:17,200 --> 00:23:23,050
scanning approach and so yeah the effect

00:23:21,040 --> 00:23:26,470
of this is unfortunately I meant to look

00:23:23,050 --> 00:23:28,390
up the statistics on some downloads but

00:23:26,470 --> 00:23:30,100
yeah things like installs that used to

00:23:28,390 --> 00:23:33,370
take twenty to thirty minutes down to

00:23:30,100 --> 00:23:35,710
like two or three and with all of that

00:23:33,370 --> 00:23:38,430
mostly be down download time because

00:23:35,710 --> 00:23:41,620
yeah the link scanning was just adding

00:23:38,430 --> 00:23:44,380
ridiculous numbers of additional URL

00:23:41,620 --> 00:23:45,940
fetches and some of the servers that it

00:23:44,380 --> 00:23:48,690
was hitting were just slow

00:23:45,940 --> 00:23:51,340
non-responsive if they responded at all

00:23:48,690 --> 00:23:53,620
so yeah it was causing a lot of speed

00:23:51,340 --> 00:23:56,500
problems so killing that off is a very

00:23:53,620 --> 00:23:57,940
very good thing and yeah we're just

00:23:56,500 --> 00:24:00,550
having to be careful because there are

00:23:57,940 --> 00:24:02,260
still some projects that that is the the

00:24:00,550 --> 00:24:04,840
external sites is the only way to

00:24:02,260 --> 00:24:06,880
download them and so if we just turned

00:24:04,840 --> 00:24:09,100
it off completely we'd break the Python

00:24:06,880 --> 00:24:10,780
ecosystem so yeah we're trying to be

00:24:09,100 --> 00:24:12,770
careful with a lot of this stuff we

00:24:10,780 --> 00:24:16,340
still make mistakes but

00:24:12,770 --> 00:24:18,289
I think the the longest disruption was

00:24:16,340 --> 00:24:22,090
the loss of the download counts and I

00:24:18,289 --> 00:24:22,090
think that was only a couple of weeks

00:24:22,179 --> 00:24:29,929
for anyone that has a project on pi PI

00:24:25,970 --> 00:24:31,669
and wants to check that they're there

00:24:29,929 --> 00:24:35,390
external links have been turned off

00:24:31,669 --> 00:24:40,100
properly there's a website at five p i--

00:24:35,390 --> 00:24:41,240
- externals doc cam at i/o and i should

00:24:40,100 --> 00:24:46,730
have put the link in the slides but

00:24:41,240 --> 00:24:49,370
that's right so yes basically you can go

00:24:46,730 --> 00:24:52,480
to that and it'll tell you what packages

00:24:49,370 --> 00:24:55,640
still have lots of external dependencies

00:24:52,480 --> 00:24:58,190
and then the other speed fact another

00:24:55,640 --> 00:25:01,100
speed factor was the binary distribution

00:24:58,190 --> 00:25:02,809
with pip because one of the things you

00:25:01,100 --> 00:25:08,690
can do when you have a binary format you

00:25:02,809 --> 00:25:12,770
can case you built and so pip 1.4 I can

00:25:08,690 --> 00:25:15,860
do the build casing with wheels and then

00:25:12,770 --> 00:25:18,529
back on the point of the index not

00:25:15,860 --> 00:25:20,360
publishing metadata this is kind of the

00:25:18,529 --> 00:25:22,970
focus of the matter but metadata 2.0

00:25:20,360 --> 00:25:25,010
peps we really really want to get to the

00:25:22,970 --> 00:25:27,950
index publishing sensible metadata that

00:25:25,010 --> 00:25:30,350
the tools can consume and just basically

00:25:27,950 --> 00:25:33,110
speed up a lot of stuff as I was saying

00:25:30,350 --> 00:25:34,549
earlier the idea is that we will be able

00:25:33,110 --> 00:25:37,340
to adjust setup tools to generate this

00:25:34,549 --> 00:25:38,720
format and pip to consume it and end

00:25:37,340 --> 00:25:40,039
users shouldn't notice any difference

00:25:38,720 --> 00:25:41,270
except for getting some more

00:25:40,039 --> 00:25:49,610
capabilities that they didn't have

00:25:41,270 --> 00:25:52,100
before but yes so 15 minutes so what

00:25:49,610 --> 00:25:53,799
prevents reliable distribution the pi PI

00:25:52,100 --> 00:25:56,270
server itself used to be quite unstable

00:25:53,799 --> 00:25:57,500
now the external hosting adding more

00:25:56,270 --> 00:26:00,470
points of failure and the complex

00:25:57,500 --> 00:26:04,580
mirroring system so I figure I got

00:26:00,470 --> 00:26:07,390
migrated several months ago now much

00:26:04,580 --> 00:26:10,100
much better systems much better hosting

00:26:07,390 --> 00:26:12,260
the removal of the external link

00:26:10,100 --> 00:26:14,690
scanning is not only faster detection

00:26:12,260 --> 00:26:17,000
more reliable because it used to be that

00:26:14,690 --> 00:26:19,190
if any dependency that you had had an

00:26:17,000 --> 00:26:21,980
external host and any one of those

00:26:19,190 --> 00:26:24,049
external hosts was down your install

00:26:21,980 --> 00:26:26,060
would fail if you weren't using occasion

00:26:24,049 --> 00:26:28,490
proxy

00:26:26,060 --> 00:26:29,810
and so yeah so the CDN is configured so

00:26:28,490 --> 00:26:32,660
that even if the master server goes down

00:26:29,810 --> 00:26:37,280
the CDN should keep surfing which is a

00:26:32,660 --> 00:26:39,770
nice improvement so what about the

00:26:37,280 --> 00:26:42,830
mirrors so for a very long time the

00:26:39,770 --> 00:26:44,300
mirrors did help that they they helped

00:26:42,830 --> 00:26:46,130
with a lot of things

00:26:44,300 --> 00:26:47,930
however the problem more recently is

00:26:46,130 --> 00:26:51,080
that we've been running into problems

00:26:47,930 --> 00:26:54,620
with the mirrors getting stale which is

00:26:51,080 --> 00:26:55,910
a problem in its own right so the

00:26:54,620 --> 00:26:58,220
recommendation at the moment is actually

00:26:55,910 --> 00:27:00,620
to turn the mirrors off turn the public

00:26:58,220 --> 00:27:02,960
mirrors off running your own caching

00:27:00,620 --> 00:27:05,000
mirror is still an excellent idea if you

00:27:02,960 --> 00:27:07,090
cannot if you cannot afford to have pass

00:27:05,000 --> 00:27:11,390
the Python package index go down on you

00:27:07,090 --> 00:27:12,770
then you need need to remember that

00:27:11,390 --> 00:27:18,530
there's no service level agreement for

00:27:12,770 --> 00:27:21,050
pi PI it's it's we try to keep it up and

00:27:18,530 --> 00:27:23,990
make it as reliable as we can but

00:27:21,050 --> 00:27:27,350
ultimately running your own caching

00:27:23,990 --> 00:27:32,180
proxy is is the thing to do if you can't

00:27:27,350 --> 00:27:34,280
afford to lose that service now on to

00:27:32,180 --> 00:27:35,480
some of the security stuff which I

00:27:34,280 --> 00:27:36,620
probably got to have to skip through

00:27:35,480 --> 00:27:40,430
some of it a bit quicker than I

00:27:36,620 --> 00:27:43,270
originally planned yes so what prevents

00:27:40,430 --> 00:27:45,110
reasonably secure distribution

00:27:43,270 --> 00:27:48,350
historically a lot of this was running

00:27:45,110 --> 00:27:49,910
over HTTP which made it ridiculously

00:27:48,350 --> 00:27:52,640
easy to do man-in-the-middle attacks on

00:27:49,910 --> 00:27:55,460
it and basically it was a problem that

00:27:52,640 --> 00:27:58,270
we just the world kind of ignored it for

00:27:55,460 --> 00:28:00,710
a long time and relying on the fact that

00:27:58,270 --> 00:28:02,000
in terms of attack targets in the

00:28:00,710 --> 00:28:04,640
software world there are far more

00:28:02,000 --> 00:28:06,860
interesting things to attack than the

00:28:04,640 --> 00:28:13,300
pass an ecosystem such as Windows

00:28:06,860 --> 00:28:15,710
Android OS iOS yeah there's that said

00:28:13,300 --> 00:28:17,600
rubygems that I'll compromise shows that

00:28:15,710 --> 00:28:19,070
people aren't unaware of the

00:28:17,600 --> 00:28:22,420
effectiveness of attacking some of these

00:28:19,070 --> 00:28:24,980
things so we need to take it seriously

00:28:22,420 --> 00:28:28,670
and there are a few other issues with

00:28:24,980 --> 00:28:30,470
the way I feel I was configured a few

00:28:28,670 --> 00:28:31,850
issues with mirroring system and we

00:28:30,470 --> 00:28:34,340
place a lot of trust in the integrity of

00:28:31,850 --> 00:28:36,170
five-year itself so the things we've

00:28:34,340 --> 00:28:39,919
changed on pi PI now runs with highest

00:28:36,170 --> 00:28:42,380
surance SSL cert courtesy of the PSF

00:28:39,919 --> 00:28:44,510
for everything where we could without

00:28:42,380 --> 00:28:50,590
breaking backwards compatibility it now

00:28:44,510 --> 00:28:53,090
forces SSL unfortunately some of the old

00:28:50,590 --> 00:28:54,860
some of the old API is we couldn't force

00:28:53,090 --> 00:28:59,679
SSL on them because it would break all

00:28:54,860 --> 00:29:03,830
the existing clients and so we're the

00:28:59,679 --> 00:29:08,480
set up tool zero 8 and pit 1.4 both use

00:29:03,830 --> 00:29:13,100
SSL connections up to two pi PI as well

00:29:08,480 --> 00:29:15,049
which is another big reason for the fit

00:29:13,100 --> 00:29:18,559
to wanna which switched the new versions

00:29:15,049 --> 00:29:20,510
as soon as possible for some domain

00:29:18,559 --> 00:29:22,640
issues we've moved all the docs hosting

00:29:20,510 --> 00:29:27,320
away from the PI P idle dog domain on to

00:29:22,640 --> 00:29:29,270
python hosted dog and eventually all of

00:29:27,320 --> 00:29:31,730
python.org will be switched to forced

00:29:29,270 --> 00:29:33,250
HTTPS so there's technical limitations

00:29:31,730 --> 00:29:35,750
prevent us from doing that at the moment

00:29:33,250 --> 00:29:39,049
if you go look at preview dot python.org

00:29:35,750 --> 00:29:41,720
once that goes live will do the forced

00:29:39,049 --> 00:29:45,620
HTTPS switch at the same time and that's

00:29:41,720 --> 00:29:47,540
just basically just arcane reasons that

00:29:45,620 --> 00:29:52,010
that's important for securing pi pi

00:29:47,540 --> 00:29:53,840
itself so quiet security improvements

00:29:52,010 --> 00:29:57,380
will be they'll all be using spera fide

00:29:53,840 --> 00:29:58,520
SSL so the interesting question from the

00:29:57,380 --> 00:30:00,530
security point of view is can you trust

00:29:58,520 --> 00:30:03,770
the mirrors if the mirror is serving

00:30:00,530 --> 00:30:06,020
over HTTP no you cannot trust anything

00:30:03,770 --> 00:30:09,320
so if over HTTP it's just too easy to do

00:30:06,020 --> 00:30:13,520
a man-in-the-middle attack on it mirrors

00:30:09,320 --> 00:30:15,710
that are on HTTPS you can mostly trust

00:30:13,520 --> 00:30:20,419
your main issue there is whether they're

00:30:15,710 --> 00:30:22,730
serving your stale data and that's yet

00:30:20,419 --> 00:30:23,929
so basically the simplest trust chain

00:30:22,730 --> 00:30:26,990
these days if you're getting stuff from

00:30:23,929 --> 00:30:28,700
pi pi is to trust pi via itself the

00:30:26,990 --> 00:30:33,880
firstly CDN and then run your own

00:30:28,700 --> 00:30:36,230
caching proxy using the public mirrors

00:30:33,880 --> 00:30:38,150
while they've given us good service over

00:30:36,230 --> 00:30:41,360
the years it's probably not the best

00:30:38,150 --> 00:30:43,040
option anymore and definitely don't

00:30:41,360 --> 00:30:47,120
trust the ones if they're only serving

00:30:43,040 --> 00:30:51,860
HTTP that brings the into question of

00:30:47,120 --> 00:30:53,990
should you trust pi PI itself yes the

00:30:51,860 --> 00:30:57,450
short answer is No

00:30:53,990 --> 00:30:58,770
so so there's a couple of reasons why

00:30:57,450 --> 00:31:01,170
not

00:30:58,770 --> 00:31:03,480
so using SSL places a lot of trust in

00:31:01,170 --> 00:31:05,760
the integrity of pipe I it does not give

00:31:03,480 --> 00:31:08,820
the sin to end integrity of the data

00:31:05,760 --> 00:31:11,250
path so you are trusting that what is on

00:31:08,820 --> 00:31:14,130
PI API is what was originally uploaded

00:31:11,250 --> 00:31:16,380
by the provider of the software you are

00:31:14,130 --> 00:31:17,670
trusting that what the was originally

00:31:16,380 --> 00:31:22,080
uploaded by the provider of the software

00:31:17,670 --> 00:31:23,310
is not malicious your and you're

00:31:22,080 --> 00:31:27,480
trusting that our server hasn't been

00:31:23,310 --> 00:31:29,940
compromised that's a lot of trust if you

00:31:27,480 --> 00:31:31,260
can afford it what you really want to do

00:31:29,940 --> 00:31:33,150
is you want to set up a private mirror

00:31:31,260 --> 00:31:35,960
and you want to do a security audit on

00:31:33,150 --> 00:31:38,070
all of your packages that's not cheap

00:31:35,960 --> 00:31:40,620
it's one of the reasons why the Linux

00:31:38,070 --> 00:31:44,540
vendors get paid because that's kind of

00:31:40,620 --> 00:31:44,540
what we do on behalf of our users so

00:31:44,870 --> 00:31:54,440
yeah it's the case of yes it is probably

00:31:49,950 --> 00:31:57,900
okay to trust PI API up to a point that

00:31:54,440 --> 00:32:01,530
point is where betrayal of that trust

00:31:57,900 --> 00:32:04,620
would destroy your business and that's

00:32:01,530 --> 00:32:06,000
probably and so yeah there's technical

00:32:04,620 --> 00:32:07,860
things we're looking at to try and

00:32:06,000 --> 00:32:09,380
improve that trust model the update

00:32:07,860 --> 00:32:12,780
framework looks particularly interesting

00:32:09,380 --> 00:32:14,970
however trusted distribution of software

00:32:12,780 --> 00:32:17,340
is a really really really hard unsolved

00:32:14,970 --> 00:32:20,670
problem Linux distributions haven't

00:32:17,340 --> 00:32:24,810
solved it properly they have solved it

00:32:20,670 --> 00:32:28,020
better than most but yeah it is a really

00:32:24,810 --> 00:32:30,180
hard problem and we're basically taking

00:32:28,020 --> 00:32:33,780
a calculated risk with the amount of

00:32:30,180 --> 00:32:34,950
trust we placed in pi PI is that

00:32:33,780 --> 00:32:40,050
calculated risk worth it

00:32:34,950 --> 00:32:41,820
I think so but it's still a risk and

00:32:40,050 --> 00:32:43,860
then the final goal that I mentioned

00:32:41,820 --> 00:32:48,240
earlier is interoperating with the

00:32:43,860 --> 00:32:50,490
platform spanner and so if you ask most

00:32:48,240 --> 00:32:52,560
language developers hey cross-platform

00:32:50,490 --> 00:32:54,300
tools are awesome and give my users of

00:32:52,560 --> 00:32:55,650
the same commands on Linux Mac OS X

00:32:54,300 --> 00:32:57,270
Windows I don't need to care what

00:32:55,650 --> 00:33:00,600
operating system they're running my

00:32:57,270 --> 00:33:03,120
instructions and can stay the same if

00:33:00,600 --> 00:33:04,830
you talk to a system integrator I think

00:33:03,120 --> 00:33:06,899
those language specific tools suck and

00:33:04,830 --> 00:33:08,909
we want language neutral tools because

00:33:06,899 --> 00:33:11,309
awesome I don't need to care whether

00:33:08,909 --> 00:33:14,099
it's C C++ Java Python Perl Ruby

00:33:11,309 --> 00:33:17,609
JavaScript Haskell Erlang Rosco yum

00:33:14,099 --> 00:33:19,440
install whatever and the other problem

00:33:17,609 --> 00:33:22,440
from a system integrator point of view

00:33:19,440 --> 00:33:24,269
is every new distribution framework you

00:33:22,440 --> 00:33:27,450
support oh look more security

00:33:24,269 --> 00:33:30,200
vulnerabilities more security audits all

00:33:27,450 --> 00:33:33,719
sorts of fun interesting problems and

00:33:30,200 --> 00:33:36,659
auditing certifications still matter

00:33:33,719 --> 00:33:38,249
so as the designers of the ecosystem in

00:33:36,659 --> 00:33:42,629
the middle we actually want to support

00:33:38,249 --> 00:33:44,129
both pythons specific tools need to be

00:33:42,629 --> 00:33:46,440
the default options so that we can give

00:33:44,129 --> 00:33:48,629
beginners and newcomers easy

00:33:46,440 --> 00:33:54,080
instructions to say hey this is what you

00:33:48,629 --> 00:33:56,580
do to get in get involved and then the

00:33:54,080 --> 00:33:58,399
what we then is off what we can then

00:33:56,580 --> 00:34:03,749
offer is if our metadata is rich enough

00:33:58,399 --> 00:34:05,549
then the translation to the platform

00:34:03,749 --> 00:34:07,679
specific tools can be automated far more

00:34:05,549 --> 00:34:09,839
easily that can now so at the moment

00:34:07,679 --> 00:34:11,490
that is true the platform tools they

00:34:09,839 --> 00:34:13,230
need to do a lot of careful unpacking to

00:34:11,490 --> 00:34:14,750
try and figure out what the dependencies

00:34:13,230 --> 00:34:18,990
are and how to map them to platform

00:34:14,750 --> 00:34:21,299
dependencies and so one of the things

00:34:18,990 --> 00:34:22,859
we're looking at and metadata 2.0 is

00:34:21,299 --> 00:34:25,919
including a lot of things to make that

00:34:22,859 --> 00:34:29,940
easy to automate and to provide the

00:34:25,919 --> 00:34:32,069
ability for for us to put platform

00:34:29,940 --> 00:34:35,609
specific hints in the metadata without

00:34:32,069 --> 00:34:38,460
messing with everything else and then

00:34:35,609 --> 00:34:41,970
hopefully we can make it so that the

00:34:38,460 --> 00:34:44,159
Python ecosystem is one that itself you

00:34:41,970 --> 00:34:46,289
can use it self-contained and just to

00:34:44,159 --> 00:34:48,679
live in a few passing world manage all

00:34:46,289 --> 00:34:51,720
your dependencies with the Python tools

00:34:48,679 --> 00:34:53,609
but if you want to interoperate with a

00:34:51,720 --> 00:34:55,159
different packaging ecosystem then we

00:34:53,609 --> 00:34:59,450
have the support there for that as well

00:34:55,159 --> 00:35:02,460
and so that tools like pip2 RPM and

00:34:59,450 --> 00:35:03,770
whatever the deep in one is the name

00:35:02,460 --> 00:35:07,529
escapes me at the moment

00:35:03,770 --> 00:35:10,500
and basically that those tools will be

00:35:07,529 --> 00:35:13,440
able to use the new metadata to produce

00:35:10,500 --> 00:35:19,770
far produce platform specific tools far

00:35:13,440 --> 00:35:20,730
more easily and yes so that is all tied

00:35:19,770 --> 00:35:22,980
into

00:35:20,730 --> 00:35:26,640
pet four to six which is the new

00:35:22,980 --> 00:35:28,880
metadata standard and pet 440 which is

00:35:26,640 --> 00:35:34,049
just the supporting versioning standard

00:35:28,880 --> 00:35:44,730
um I'm actually done so if we have extra

00:35:34,049 --> 00:35:46,319
time for questions thank you very much

00:35:44,730 --> 00:35:47,700
Nick yes if anyone does have questions

00:35:46,319 --> 00:35:50,010
please come down form a queue at the

00:35:47,700 --> 00:35:55,799
mics and we'll we'll move Q up just to

00:35:50,010 --> 00:35:56,970
get the room started you you've

00:35:55,799 --> 00:35:59,730
obviously there's been lots of movements

00:35:56,970 --> 00:36:01,200
made two changes made to speed up you

00:35:59,730 --> 00:36:03,660
know the installation process putting in

00:36:01,200 --> 00:36:05,040
CD ends putting in removing the

00:36:03,660 --> 00:36:08,010
downloading process and sort and so on

00:36:05,040 --> 00:36:10,980
from a perspective of an end user who

00:36:08,010 --> 00:36:13,049
uses packaging there's one huge speed-up

00:36:10,980 --> 00:36:14,549
that I can see that isn't obviously

00:36:13,049 --> 00:36:16,290
there or if it is it seems like the

00:36:14,549 --> 00:36:18,990
solution is install your own local cache

00:36:16,290 --> 00:36:20,130
it's on Monday we're going to start

00:36:18,990 --> 00:36:21,240
running tutorials in the room and I'm

00:36:20,130 --> 00:36:22,950
gonna spool up three virtual

00:36:21,240 --> 00:36:24,630
environments to test it to teach various

00:36:22,950 --> 00:36:26,099
people things or test various things and

00:36:24,630 --> 00:36:27,690
every single one of them is going to

00:36:26,099 --> 00:36:30,990
have to download pip and download

00:36:27,690 --> 00:36:32,549
ipython from the internet not from the

00:36:30,990 --> 00:36:36,089
fact that I've downloaded them 40 times

00:36:32,549 --> 00:36:38,520
in the last month local I I don't know

00:36:36,089 --> 00:36:39,740
if is is there any is there surprises

00:36:38,520 --> 00:36:43,710
actually a problem is that something

00:36:39,740 --> 00:36:46,710
lives at one for it either uses a local

00:36:43,710 --> 00:36:48,750
cache by default or you just have to

00:36:46,710 --> 00:36:51,780
point it at a directory to say cache the

00:36:48,750 --> 00:36:53,940
wheels here and it will do a local cache

00:36:51,780 --> 00:36:55,799
for you okay so that's a one point for

00:36:53,940 --> 00:36:58,680
relatively recent addition to the whole

00:36:55,799 --> 00:37:01,140
yeah well because it's dependent on

00:36:58,680 --> 00:37:05,119
having the wheel format as the caching

00:37:01,140 --> 00:37:09,359
format okay so so yes so one point for

00:37:05,119 --> 00:37:11,670
fader is out now and I'm not sure of the

00:37:09,359 --> 00:37:16,829
timing for one point for itself but not

00:37:11,670 --> 00:37:19,410
too far away um so Debian have been

00:37:16,829 --> 00:37:21,480
doing sign packages for a long time and

00:37:19,410 --> 00:37:23,880
everybody was kind of ignoring them and

00:37:21,480 --> 00:37:26,609
then the package servers got compromised

00:37:23,880 --> 00:37:29,609
and they're able to show that like

00:37:26,609 --> 00:37:33,380
nobody actually compromised any of the

00:37:29,609 --> 00:37:36,980
packages are you going to follow

00:37:33,380 --> 00:37:38,840
they're out of using like GPG and stuff

00:37:36,980 --> 00:37:43,280
like that because they seem to have like

00:37:38,840 --> 00:37:45,110
solve this problem calling the Red Hat

00:37:43,280 --> 00:37:48,080
and deviance solution solved is an

00:37:45,110 --> 00:37:49,010
interesting definition of salt better

00:37:48,080 --> 00:37:51,290
than nothing

00:37:49,010 --> 00:37:54,770
yes substantially better than what

00:37:51,290 --> 00:37:57,710
everybody else does I will grant there's

00:37:54,770 --> 00:37:59,930
there's interesting challenges with key

00:37:57,710 --> 00:38:02,240
management for the way debian and Red

00:37:59,930 --> 00:38:05,990
Hat do things yeah and the problem we

00:38:02,240 --> 00:38:10,670
suffer the problem we suffer for pie pie

00:38:05,990 --> 00:38:15,230
is that the core server itself isn't

00:38:10,670 --> 00:38:18,680
audited and the other problem is that we

00:38:15,230 --> 00:38:20,680
want the barrier to experimental

00:38:18,680 --> 00:38:24,110
distribution to be extraordinarily low

00:38:20,680 --> 00:38:27,710
and saying you must learn to manage DPG

00:38:24,110 --> 00:38:29,150
keys as a as a requirement for being

00:38:27,710 --> 00:38:30,530
allowed to distribute software through

00:38:29,150 --> 00:38:34,460
our infrastructure we're not sure that's

00:38:30,530 --> 00:38:38,000
a step we prepared to take that said the

00:38:34,460 --> 00:38:40,460
update framework is basically a research

00:38:38,000 --> 00:38:43,580
project that was aimed at systematically

00:38:40,460 --> 00:38:47,870
solving the software distribution

00:38:43,580 --> 00:38:49,370
problem and their research is good they

00:38:47,870 --> 00:38:52,160
found a bunch of vulnerabilities in the

00:38:49,370 --> 00:38:55,220
way Red Hat and Debian did things which

00:38:52,160 --> 00:38:58,640
I believe have since been addressed and

00:38:55,220 --> 00:39:01,520
so what we're likely to do is at some

00:38:58,640 --> 00:39:03,680
point in the future adopt that model and

00:39:01,520 --> 00:39:07,190
figure out something on the upload end

00:39:03,680 --> 00:39:10,130
whereby people can trust pie pie design

00:39:07,190 --> 00:39:13,340
on their behalf and then at that point

00:39:10,130 --> 00:39:16,190
we think we'll be able to solve the

00:39:13,340 --> 00:39:18,200
entry problem whereby people can get

00:39:16,190 --> 00:39:22,430
started easily by trusting 5vi to sign

00:39:18,200 --> 00:39:25,520
for them and then bought larger projects

00:39:22,430 --> 00:39:26,990
like Django and OpenStack and what have

00:39:25,520 --> 00:39:31,910
you be able to take responsibility for

00:39:26,990 --> 00:39:34,059
their own signing keys and thank you for

00:39:31,910 --> 00:39:37,309
telling me no no

00:39:34,059 --> 00:39:38,750
we don't want that but yes so the update

00:39:37,309 --> 00:39:40,910
framework is a really really nice trust

00:39:38,750 --> 00:39:46,010
model a really really good way of doing

00:39:40,910 --> 00:39:48,109
an twin signing it's just a ways down

00:39:46,010 --> 00:39:49,760
the to-do list at the moment because at

00:39:48,109 --> 00:39:52,730
the moment you couldn't even trust the

00:39:49,760 --> 00:39:54,980
link from PI API to the installers and

00:39:52,730 --> 00:39:57,020
so once we get the pipe idol installer

00:39:54,980 --> 00:39:59,869
links sorted then we'll probably start

00:39:57,020 --> 00:40:02,210
looking more seriously at the at the

00:39:59,869 --> 00:40:03,529
end-to-end trust from the developer

00:40:02,210 --> 00:40:03,940
through to all the way through the end

00:40:03,529 --> 00:40:06,589
user

00:40:03,940 --> 00:40:09,279
they include looking at the stuff that

00:40:06,589 --> 00:40:13,520
Linus kernel is doing with their signed

00:40:09,279 --> 00:40:14,869
like releases on sources or haven't

00:40:13,520 --> 00:40:18,260
looked at the Linux kernel stuff in

00:40:14,869 --> 00:40:20,359
particular but okay yes there's a lot of

00:40:18,260 --> 00:40:21,859
what one of the reasons one of the

00:40:20,359 --> 00:40:23,150
reasons we've put off dealing with that

00:40:21,859 --> 00:40:26,710
problem is there's a bunch of research

00:40:23,150 --> 00:40:31,579
we need to do before we can solve it and

00:40:26,710 --> 00:40:33,319
using SSL as a stopgap basically would

00:40:31,579 --> 00:40:36,650
was just a solution that didn't require

00:40:33,319 --> 00:40:45,380
a lot of research so definitely a

00:40:36,650 --> 00:40:49,400
stopgap at the moment for Python - I

00:40:45,380 --> 00:40:52,460
know there's PI VM for Python 3 yep do

00:40:49,400 --> 00:40:54,680
you know much about if they should work

00:40:52,460 --> 00:40:57,680
together or if you like people to move

00:40:54,680 --> 00:40:59,900
over to a little OC and eventually or

00:40:57,680 --> 00:41:02,569
how they're supposed to cooperate people

00:40:59,900 --> 00:41:05,900
are virtual em should work on Python 3

00:41:02,569 --> 00:41:08,180
as well and basically virtualenv on

00:41:05,900 --> 00:41:12,710
Python 2 has to do some nasty hacks to

00:41:08,180 --> 00:41:15,230
try and make itself work and the core

00:41:12,710 --> 00:41:17,359
infrastructure we added in Python 3 3 is

00:41:15,230 --> 00:41:20,839
basically designed to replace those

00:41:17,359 --> 00:41:22,910
nasty hacks and so virtual end of itself

00:41:20,839 --> 00:41:26,839
you should be able to just keep using it

00:41:22,910 --> 00:41:30,260
pi VN just gives you a basic equivalent

00:41:26,839 --> 00:41:31,520
out-of-the-box but really you're

00:41:30,260 --> 00:41:33,529
probably just better off driving virtual

00:41:31,520 --> 00:41:35,779
end but does a lot of does a few extra

00:41:33,529 --> 00:41:40,520
things that are nicer than what PI the

00:41:35,779 --> 00:41:44,440
ends does so mainly because it gives you

00:41:40,520 --> 00:41:44,440
pip and setup tools automatically

00:41:44,920 --> 00:41:48,799
all right so I'm well so first off I

00:41:47,599 --> 00:41:49,999
want to thank you for your work in your

00:41:48,799 --> 00:41:51,739
leadership in this area I've been

00:41:49,999 --> 00:41:53,059
complaining about Python packaging for

00:41:51,739 --> 00:41:55,400
as long as I've been using Python and

00:41:53,059 --> 00:41:57,140
I'm actually optimistic now it's just

00:41:55,400 --> 00:42:01,640
kind of a new feeling and it's

00:41:57,140 --> 00:42:04,670
surprising so my question is it's a

00:42:01,640 --> 00:42:06,140
little bit in advance of the talk I'm

00:42:04,670 --> 00:42:07,699
going to give next is about the the

00:42:06,140 --> 00:42:11,029
OWASP top 10 and how it applies to

00:42:07,699 --> 00:42:12,529
python and there their point number 9 on

00:42:11,029 --> 00:42:15,680
sort of the biggest security

00:42:12,529 --> 00:42:17,539
vulnerabilities is outdated dependencies

00:42:15,680 --> 00:42:19,609
and as I was sort of sitting there

00:42:17,539 --> 00:42:22,069
trying to think what Python has to offer

00:42:19,609 --> 00:42:25,579
here I basically came up with nothing

00:42:22,069 --> 00:42:28,339
you have no way of knowing that you know

00:42:25,579 --> 00:42:29,930
you're using Django 1 4 and there's a

00:42:28,339 --> 00:42:31,759
security problem and it's and it's out

00:42:29,930 --> 00:42:33,890
there so I'm wondering about your

00:42:31,759 --> 00:42:35,869
thoughts about what you think Python and

00:42:33,890 --> 00:42:38,180
pi PI can do to help users understand

00:42:35,869 --> 00:42:39,199
that this you need to upgrade this is

00:42:38,180 --> 00:42:41,059
why we're looking at the update

00:42:39,199 --> 00:42:44,989
framework because the thing about the

00:42:41,059 --> 00:42:46,880
update framework is that each it is

00:42:44,989 --> 00:42:50,119
deliberately designed to protect against

00:42:46,880 --> 00:42:53,959
the stale dependencies problem and so

00:42:50,119 --> 00:42:55,400
basically yeah it delivers a timestamp

00:42:53,959 --> 00:42:59,209
file and that should be getting

00:42:55,400 --> 00:43:01,940
refreshed every 15 minutes and if so if

00:42:59,209 --> 00:43:04,009
our client cannot get to that file or

00:43:01,940 --> 00:43:05,869
cannot get a sufficiently recent version

00:43:04,009 --> 00:43:08,119
of that file then it will throw up its

00:43:05,869 --> 00:43:12,259
hands and say hey something screwy is

00:43:08,119 --> 00:43:13,579
going on and yeah and that's the other

00:43:12,259 --> 00:43:15,890
reason we want to get the index server

00:43:13,579 --> 00:43:17,479
actually publishing the metadata because

00:43:15,890 --> 00:43:19,789
once you are publishing the metadata

00:43:17,479 --> 00:43:21,559
properly particularly in gzip form then

00:43:19,789 --> 00:43:23,630
you can just go grab the metadata for

00:43:21,559 --> 00:43:25,849
your dependencies and check hey are they

00:43:23,630 --> 00:43:28,069
all fresh whereas at the moment that's

00:43:25,849 --> 00:43:29,809
just way too expensive because the only

00:43:28,069 --> 00:43:31,759
way to check is to go download them all

00:43:29,809 --> 00:43:33,170
again and that's and that's just too

00:43:31,759 --> 00:43:35,749
costly for people to do as a matter of

00:43:33,170 --> 00:43:36,890
course but yes that's that's one of the

00:43:35,749 --> 00:43:39,680
reasons why we want to get to the

00:43:36,890 --> 00:43:42,969
metadata and and also why the update

00:43:39,680 --> 00:43:42,969
framework is so interesting because

00:43:44,200 --> 00:43:49,089
okay we'll have to cut it this I thank

00:43:46,549 --> 00:43:49,089

YouTube URL: https://www.youtube.com/watch?v=8Xrdt3-YVz4


