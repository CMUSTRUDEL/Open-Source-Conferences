Title: Build your infrastructure - with Python!
Publication date: 2013-07-10
Playlist: Pycon Australia 2013
Description: 
	Ed Leafe
http://2013.pycon-au.org/schedule/30028/view_talk
Cloud computing is changing the way that businesses think about their computing requirements. Instead of ordering hardware, waiting for delivery, allocating space in a data center, installing and wiring it up, and then configuring each piece of the system, you can now do the equivalent with a few clicks on a control panel, but that gets tedious. What's much more interesting is to do all of this programmatically, using our favorite langua
Captions: 
	00:00:00,000 --> 00:00:04,799
our next presenter has been a

00:00:02,490 --> 00:00:06,660
development for over 20 years he is one

00:00:04,799 --> 00:00:09,210
of the original developers involved with

00:00:06,660 --> 00:00:12,059
OpenStack and after leaving the

00:00:09,210 --> 00:00:14,460
proprietary software world over a decade

00:00:12,059 --> 00:00:16,619
ago he has been private primarily a

00:00:14,460 --> 00:00:18,810
Python developer he has spoken at

00:00:16,619 --> 00:00:20,970
several u.s. pi cons his main focus

00:00:18,810 --> 00:00:22,650
these days is with free and open

00:00:20,970 --> 00:00:24,269
software and it's going to teach us how

00:00:22,650 --> 00:00:26,099
to build our own infrastructure with

00:00:24,269 --> 00:00:32,579
Python please join me in welcoming ed

00:00:26,099 --> 00:00:34,290
leaf thank you that was very nice

00:00:32,579 --> 00:00:37,020
welcome and I also just want to start by

00:00:34,290 --> 00:00:39,210
saying that um I've been to 10 u.s. pi

00:00:37,020 --> 00:00:41,280
cons have spoken at a few of them and

00:00:39,210 --> 00:00:43,020
I've always gone back because that's

00:00:41,280 --> 00:00:45,300
been like the highlight of my year this

00:00:43,020 --> 00:00:47,850
scent not just the technical content but

00:00:45,300 --> 00:00:50,449
the sense of community you get sharing

00:00:47,850 --> 00:00:52,829
ideas and things with people is

00:00:50,449 --> 00:00:55,620
unparalleled and this is my first time

00:00:52,829 --> 00:00:57,930
both in Australia and at PyCon a you and

00:00:55,620 --> 00:01:00,270
I got to say I've had a great time it

00:00:57,930 --> 00:01:02,579
totally rivals everything in the u.s.

00:01:00,270 --> 00:01:05,909
PyCon so thank you guys for having me

00:01:02,579 --> 00:01:08,220
here all right so I just want to start

00:01:05,909 --> 00:01:10,790
he gave me a little introduction but I

00:01:08,220 --> 00:01:14,159
guess this isn't going to work oh well

00:01:10,790 --> 00:01:17,070
who I am and why I'm standing up here

00:01:14,159 --> 00:01:18,720
talking to you I work for rackspace I've

00:01:17,070 --> 00:01:20,460
been a Python developer there for about

00:01:18,720 --> 00:01:22,830
five and a half years worked on a

00:01:20,460 --> 00:01:25,560
variety of things but one thing I was

00:01:22,830 --> 00:01:29,340
most fortunate to work on was OpenStack

00:01:25,560 --> 00:01:31,670
and I have the bag to prove it it's one

00:01:29,340 --> 00:01:35,070
of my favorite pieces of tech swag it's

00:01:31,670 --> 00:01:37,170
OpenStack founder and that's actually a

00:01:35,070 --> 00:01:39,570
little inaccurate I actually worked on

00:01:37,170 --> 00:01:41,460
OpenStack before OpenStack existed

00:01:39,570 --> 00:01:43,200
because i was on the Swift team before

00:01:41,460 --> 00:01:46,229
while it was still a proprietary

00:01:43,200 --> 00:01:48,740
Rackspace internal project that we then

00:01:46,229 --> 00:01:54,060
open source when we created OpenStack

00:01:48,740 --> 00:01:57,270
and currently I maintain the pyrex SDK

00:01:54,060 --> 00:02:00,509
for OpenStack clouds it did start out as

00:01:57,270 --> 00:02:03,670
a rackspace specific SDK and hence the

00:02:00,509 --> 00:02:07,770
name with the racks in there

00:02:03,670 --> 00:02:10,599
it works fine with all of OpenStack so

00:02:07,770 --> 00:02:12,730
so here's the situation that all

00:02:10,599 --> 00:02:14,290
developers seem to find themselves in at

00:02:12,730 --> 00:02:17,739
some point you know you have this great

00:02:14,290 --> 00:02:19,630
idea and you grab your software you

00:02:17,739 --> 00:02:22,780
start pounding away and you come up with

00:02:19,630 --> 00:02:26,080
this awesome idea this awesome app for

00:02:22,780 --> 00:02:28,390
that idea but now you're you have to get

00:02:26,080 --> 00:02:31,030
it out there you have to deploy it you

00:02:28,390 --> 00:02:35,500
have to set up an infrastructure so that

00:02:31,030 --> 00:02:37,840
people can come and use your app so this

00:02:35,500 --> 00:02:39,459
is the part that I don't like to do I

00:02:37,840 --> 00:02:41,890
love writing software I hate dealing

00:02:39,459 --> 00:02:43,630
with hardware you know do you know how

00:02:41,890 --> 00:02:47,080
many software developers it takes to

00:02:43,630 --> 00:02:53,560
change a lightbulb none it's a hardware

00:02:47,080 --> 00:02:55,060
problem but anyway at some point you're

00:02:53,560 --> 00:02:57,880
going to have to do this you're going to

00:02:55,060 --> 00:02:59,950
have to set up an app server and maybe a

00:02:57,880 --> 00:03:02,110
database for your app to talk to or

00:02:59,950 --> 00:03:05,040
whatever and all the internet can now

00:03:02,110 --> 00:03:08,049
come and use your amazing application

00:03:05,040 --> 00:03:10,299
and since it is amazing pretty soon

00:03:08,049 --> 00:03:14,290
you're going to start pushing that

00:03:10,299 --> 00:03:16,329
server to its limits so you come up with

00:03:14,290 --> 00:03:18,609
something a little more robust with a

00:03:16,329 --> 00:03:22,060
throw a load balancer and a couple of

00:03:18,609 --> 00:03:23,769
server instances there and you know

00:03:22,060 --> 00:03:25,660
again it keeps growing getting

00:03:23,769 --> 00:03:28,450
successful so you do the horizontal

00:03:25,660 --> 00:03:30,549
scaling there and this works great

00:03:28,450 --> 00:03:34,810
except that every time you do this you

00:03:30,549 --> 00:03:37,600
need to buy another server racket cable

00:03:34,810 --> 00:03:39,910
it install the software install all the

00:03:37,600 --> 00:03:42,370
updates install your applications to all

00:03:39,910 --> 00:03:44,950
all its dependencies so you end up doing

00:03:42,370 --> 00:03:47,260
something where you either mirror the

00:03:44,950 --> 00:03:49,299
disk image or I've done it with rsync

00:03:47,260 --> 00:03:51,940
you know to kind of keep these all

00:03:49,299 --> 00:03:54,670
together and you also have the

00:03:51,940 --> 00:03:57,040
the issue that when your app is updated

00:03:54,670 --> 00:04:01,930
that you have to now update all these

00:03:57,040 --> 00:04:03,160
servers to keep them all in sync and you

00:04:01,930 --> 00:04:08,530
know you may have state-of-the-art

00:04:03,160 --> 00:04:10,240
hardware like this but but what happens

00:04:08,530 --> 00:04:11,800
is that you know you do have to connect

00:04:10,240 --> 00:04:14,230
it all together and so you have this

00:04:11,800 --> 00:04:17,140
dream of you know this perfect set up

00:04:14,230 --> 00:04:18,820
with all this beautiful cable but after

00:04:17,140 --> 00:04:22,960
you've had to make a few changes you

00:04:18,820 --> 00:04:24,790
know and I do have to say this was not

00:04:22,960 --> 00:04:28,750
taken at rackspace with our datacenter

00:04:24,790 --> 00:04:30,280
don't look like that okay so this is

00:04:28,750 --> 00:04:33,040
where the cloud comes in this is where

00:04:30,280 --> 00:04:35,950
you know the power the attraction of the

00:04:33,040 --> 00:04:39,390
cloud is is that you can you don't have

00:04:35,950 --> 00:04:41,800
to do all of that stuff you know you can

00:04:39,390 --> 00:04:43,930
the you or your if you have your own

00:04:41,800 --> 00:04:47,290
data center or server closet or whatever

00:04:43,930 --> 00:04:49,150
or your provider gets the hardware gets

00:04:47,290 --> 00:04:52,180
a bunch of it and configures it in

00:04:49,150 --> 00:04:56,530
advance installs OpenStack on it so that

00:04:52,180 --> 00:04:58,360
it can work as a cloud and now when you

00:04:56,530 --> 00:05:01,000
need new resources you can provision

00:04:58,360 --> 00:05:03,400
them dynamically and as it grows you can

00:05:01,000 --> 00:05:05,470
add the hot more hardware to it more

00:05:03,400 --> 00:05:08,260
compute nodes more storage more whatever

00:05:05,470 --> 00:05:10,150
but that's isolated from the developer

00:05:08,260 --> 00:05:13,780
you don't care you just have this cloud

00:05:10,150 --> 00:05:15,430
that you're talking to and I know

00:05:13,780 --> 00:05:18,010
Tristan did a thing at the OpenStack

00:05:15,430 --> 00:05:19,900
mini comp the other day where he

00:05:18,010 --> 00:05:22,450
provisioned a network very similar to

00:05:19,900 --> 00:05:24,340
what I just showed you by you know using

00:05:22,450 --> 00:05:26,350
the control panel and creating a network

00:05:24,340 --> 00:05:28,720
and some servers and connecting them all

00:05:26,350 --> 00:05:30,400
together but I think what the real power

00:05:28,720 --> 00:05:33,220
of it is that you can do it

00:05:30,400 --> 00:05:36,610
programmatically and since this is PyCon

00:05:33,220 --> 00:05:42,190
we're going to do it with Python so this

00:05:36,610 --> 00:05:43,690
is to me is the big thing for that you

00:05:42,190 --> 00:05:46,120
know being able to work with the cloud

00:05:43,690 --> 00:05:49,800
programmatically provides and all due to

00:05:46,120 --> 00:05:52,800
api's api's are the lifeblood of any any

00:05:49,800 --> 00:05:52,800
system

00:05:53,070 --> 00:05:58,530
so they but the thing is that they're

00:05:56,460 --> 00:06:23,070
very low level they're the least common

00:05:58,530 --> 00:06:25,620
denominator that you identify yourself

00:06:23,070 --> 00:06:27,420
to your provider you have to be able to

00:06:25,620 --> 00:06:29,550
cash all this because you can't keep

00:06:27,420 --> 00:06:31,830
making authentication calls before every

00:06:29,550 --> 00:06:34,710
request you have to be able to recover

00:06:31,830 --> 00:06:37,020
from errors you have to format your

00:06:34,710 --> 00:06:39,000
request properly with the exact headers

00:06:37,020 --> 00:06:42,090
in the exact format that the service

00:06:39,000 --> 00:06:44,760
requires you have to be able to tell

00:06:42,090 --> 00:06:46,680
with some errors which ones you can

00:06:44,760 --> 00:06:50,820
recover from which ones you have to just

00:06:46,680 --> 00:06:55,320
give up and bail out well sorry I don't

00:06:50,820 --> 00:06:57,060
have any audio visual so this is and

00:06:55,320 --> 00:06:59,370
then when you get the result back you

00:06:57,060 --> 00:07:01,500
know it's something basic like Jason and

00:06:59,370 --> 00:07:04,500
then you have to parse that and then

00:07:01,500 --> 00:07:07,710
create objects that you can then use

00:07:04,500 --> 00:07:08,700
inside of your application so it's a lot

00:07:07,710 --> 00:07:10,860
of what and this is for everything

00:07:08,700 --> 00:07:12,720
everything you do you have to do that so

00:07:10,860 --> 00:07:15,060
most people when they have to start

00:07:12,720 --> 00:07:16,950
working with an API right all that

00:07:15,060 --> 00:07:19,200
scaffolding that they have to do make

00:07:16,950 --> 00:07:21,000
their call and then do all their parsing

00:07:19,200 --> 00:07:23,040
there you know the resultant they yeah I

00:07:21,000 --> 00:07:25,920
got it to work and then it go to make

00:07:23,040 --> 00:07:27,390
another call and they go off I don't

00:07:25,920 --> 00:07:29,490
want to have to write all that again I

00:07:27,390 --> 00:07:32,220
know I'll refactor so they refactor that

00:07:29,490 --> 00:07:34,980
out into some abstract API calling

00:07:32,220 --> 00:07:37,500
method and then the individual methods

00:07:34,980 --> 00:07:40,370
just figure out what data they need to

00:07:37,500 --> 00:07:44,370
send or what you are I they need to hit

00:07:40,370 --> 00:07:48,300
and now you're kind of building an SDK

00:07:44,370 --> 00:07:50,070
yourself so here's the thing that kind

00:07:48,300 --> 00:07:52,860
of is a temptation a lot of programmers

00:07:50,070 --> 00:07:54,920
fall into is reinventing the wheel so

00:07:52,860 --> 00:07:57,840
here you're using something like an SDK

00:07:54,920 --> 00:08:00,210
that has been tested and used by lots

00:07:57,840 --> 00:08:01,260
and lots of people and you think that

00:08:00,210 --> 00:08:03,750
you're going to write something that's

00:08:01,260 --> 00:08:05,060
going to be as good or as robust or as

00:08:03,750 --> 00:08:09,110
stable

00:08:05,060 --> 00:08:11,060
that you know good luck so that's why I

00:08:09,110 --> 00:08:17,030
think you know using an SDK to do this

00:08:11,060 --> 00:08:19,630
stuff is the way to go and this is where

00:08:17,030 --> 00:08:23,150
pyrex comes in it's the Python SDK for

00:08:19,630 --> 00:08:25,460
OpenStack clouds it not only has the

00:08:23,150 --> 00:08:28,810
python module for talking to all the

00:08:25,460 --> 00:08:31,669
cloud services but it also contains

00:08:28,810 --> 00:08:33,700
documentation sample code all that good

00:08:31,669 --> 00:08:36,650
stuff because I mean it's great to have

00:08:33,700 --> 00:08:39,260
api's and documentation documenting

00:08:36,650 --> 00:08:41,870
every single call but you ever start a

00:08:39,260 --> 00:08:45,200
project you know like what do i do first

00:08:41,870 --> 00:08:47,660
how do i how do i do am i doing this the

00:08:45,200 --> 00:08:49,850
best way is this the ideal way or am i

00:08:47,660 --> 00:08:52,279
doing in some really obtuse roundabout

00:08:49,850 --> 00:08:54,529
way that you know makes me look silly to

00:08:52,279 --> 00:08:57,250
anybody else so at least get you started

00:08:54,529 --> 00:09:02,720
with sample code and things like that

00:08:57,250 --> 00:09:04,400
and of course it's up on github and you

00:09:02,720 --> 00:09:07,300
can go there and love to have pull

00:09:04,400 --> 00:09:10,610
requests and the other thing is that

00:09:07,300 --> 00:09:14,120
this is pretty much I've been the main

00:09:10,610 --> 00:09:17,210
developer on pyrex but if I were to get

00:09:14,120 --> 00:09:19,220
hit by a bus or marry some rich woman

00:09:17,210 --> 00:09:21,320
who wants to just take care of me or

00:09:19,220 --> 00:09:23,930
something like that where I decide that

00:09:21,320 --> 00:09:26,180
spending my days working on pyrex isn't

00:09:23,930 --> 00:09:28,100
the best use of my time you're not going

00:09:26,180 --> 00:09:31,190
to be stuck with some orphaned software

00:09:28,100 --> 00:09:33,110
we have dedicated to supporting this

00:09:31,190 --> 00:09:38,180
this is an integral part of our business

00:09:33,110 --> 00:09:41,089
so that's in a good reason to go with

00:09:38,180 --> 00:09:42,500
something like that now one of the

00:09:41,089 --> 00:09:43,910
things I hate going to a technical

00:09:42,500 --> 00:09:47,300
conference and it's just some guy

00:09:43,910 --> 00:09:49,100
talking or some girl talking that you

00:09:47,300 --> 00:09:54,640
know we're developers we want to see

00:09:49,100 --> 00:09:57,290
some code so I'm going to switch over

00:09:54,640 --> 00:09:58,880
now here's I have the code here but I'm

00:09:57,290 --> 00:09:59,870
not going to go through it now what I'm

00:09:58,880 --> 00:10:01,820
going to do is I'm going to run the

00:09:59,870 --> 00:10:04,880
script and have a script written that's

00:10:01,820 --> 00:10:07,670
going to go out it's going to basically

00:10:04,880 --> 00:10:12,200
create that little diagram that I have a

00:10:07,670 --> 00:10:14,420
database to application servers behind a

00:10:12,200 --> 00:10:15,400
load balancer and configured with DNS

00:10:14,420 --> 00:10:18,370
now the

00:10:15,400 --> 00:10:20,500
that building this of the the images

00:10:18,370 --> 00:10:22,390
that we use take time to build into an

00:10:20,500 --> 00:10:25,150
active state so I'm going to start this

00:10:22,390 --> 00:10:29,650
then I'm going to go on with the talk so

00:10:25,150 --> 00:10:30,880
let me just get that going and I just

00:10:29,650 --> 00:10:32,890
want to watch it for a second because

00:10:30,880 --> 00:10:35,290
every once in a while network hiccups

00:10:32,890 --> 00:10:38,650
I've gotten burned before so I just want

00:10:35,290 --> 00:10:41,170
to make sure it's running the other

00:10:38,650 --> 00:10:43,660
thing I wanted to mention is that when

00:10:41,170 --> 00:10:45,160
you create your first cloud server and

00:10:43,660 --> 00:10:46,930
you get it configured and you get your

00:10:45,160 --> 00:10:50,140
application and its dependencies

00:10:46,930 --> 00:10:52,810
installed the nice thing is is that then

00:10:50,140 --> 00:10:55,570
you can take a snapshot of that so it's

00:10:52,810 --> 00:10:57,370
called in the server image and then when

00:10:55,570 --> 00:10:59,560
you build new servers you can build it

00:10:57,370 --> 00:11:01,690
off that image so when they're finished

00:10:59,560 --> 00:11:03,160
building they're in the exact state you

00:11:01,690 --> 00:11:05,140
need you don't need to do the

00:11:03,160 --> 00:11:11,350
installation you don't need to write I

00:11:05,140 --> 00:11:16,500
knew it what did it want yep of 400 we

00:11:11,350 --> 00:11:16,500
make sure that i have a working internet

00:11:18,270 --> 00:11:28,390
of course it worked yet yeah that's

00:11:20,380 --> 00:11:33,070
working ok let's try that again the demo

00:11:28,390 --> 00:11:35,080
gods aren't always on my side all right

00:11:33,070 --> 00:11:37,390
so anyway what I was saying was that you

00:11:35,080 --> 00:11:39,790
can have an image and then you can as

00:11:37,390 --> 00:11:41,680
you need to expand out horizontally you

00:11:39,790 --> 00:11:43,900
can create new instances based on that

00:11:41,680 --> 00:11:47,350
image and that's great but what's also

00:11:43,900 --> 00:11:48,700
kind of cool is your app is going to

00:11:47,350 --> 00:11:50,590
need to be upgraded some time you're

00:11:48,700 --> 00:11:52,480
going to add new cool stuff to it or

00:11:50,590 --> 00:11:55,600
whatever and how do you go about

00:11:52,480 --> 00:11:58,420
updating your system well what you can

00:11:55,600 --> 00:12:01,540
do is take your existing image make a

00:11:58,420 --> 00:12:04,300
instance of it that's offline apply your

00:12:01,540 --> 00:12:06,490
patches to it test it make sure it's

00:12:04,300 --> 00:12:07,990
working and then start building

00:12:06,490 --> 00:12:11,440
instances adding them to the load

00:12:07,990 --> 00:12:13,030
balancer from that new image and if

00:12:11,440 --> 00:12:15,640
you're smart you'll name your images

00:12:13,030 --> 00:12:17,950
based on your release numbering system

00:12:15,640 --> 00:12:19,390
so you know which one is which and then

00:12:17,950 --> 00:12:21,880
you can start seeing some of the traffic

00:12:19,390 --> 00:12:23,590
hit those and if you can keep an eye on

00:12:21,880 --> 00:12:25,990
them if there's any errors or whatever

00:12:23,590 --> 00:12:28,540
you can just delete those instances

00:12:25,990 --> 00:12:30,610
and just leave the old version there if

00:12:28,540 --> 00:12:32,500
it does work right though then you could

00:12:30,610 --> 00:12:34,660
just delete the old version instances

00:12:32,500 --> 00:12:36,820
and fire up new ones of your updated

00:12:34,660 --> 00:12:39,399
version and so you have zero downtime

00:12:36,820 --> 00:12:41,860
you don't have any disruption and it's

00:12:39,399 --> 00:12:44,320
really great if you're doing continuous

00:12:41,860 --> 00:12:46,839
deployment because that way you can do a

00:12:44,320 --> 00:12:48,880
quick test start deploying if for some

00:12:46,839 --> 00:12:52,320
reason you get it out there and there's

00:12:48,880 --> 00:12:57,010
a major bug okay it's building now good

00:12:52,320 --> 00:13:01,870
I don't like having to vamp up here well

00:12:57,010 --> 00:13:04,000
my computer decides not to behave but

00:13:01,870 --> 00:13:06,610
anyway so these images are a powerful

00:13:04,000 --> 00:13:08,350
way to install not only to install your

00:13:06,610 --> 00:13:12,000
application but to update it and

00:13:08,350 --> 00:13:14,470
maintain it so this is the code that

00:13:12,000 --> 00:13:17,800
will be at the top of your script just

00:13:14,470 --> 00:13:19,540
the import statements and then the first

00:13:17,800 --> 00:13:22,510
line is where you do your authentication

00:13:19,540 --> 00:13:24,339
and just method key ring off if you're

00:13:22,510 --> 00:13:27,250
not familiar with key ring it's an

00:13:24,339 --> 00:13:30,370
operating system level way of storing

00:13:27,250 --> 00:13:32,529
encrypted passwords so that only the

00:13:30,370 --> 00:13:34,690
currently logged in user can access

00:13:32,529 --> 00:13:37,300
those passwords it's probably the safest

00:13:34,690 --> 00:13:41,079
way to store credentials and stuff like

00:13:37,300 --> 00:13:43,480
that on your system so I have it stored

00:13:41,079 --> 00:13:45,880
up so that's what I use you can also

00:13:43,480 --> 00:13:48,490
keep them in a credential file if you

00:13:45,880 --> 00:13:51,399
choose if you're on a secure place and

00:13:48,490 --> 00:13:54,640
all that and you just call set

00:13:51,399 --> 00:13:56,260
credential file and with the path or if

00:13:54,640 --> 00:13:58,089
you're doing interactive you can just

00:13:56,260 --> 00:14:00,610
say set credentials and pass your

00:13:58,089 --> 00:14:03,010
username and password these all do the

00:14:00,610 --> 00:14:04,920
exact same thing what they do is they go

00:14:03,010 --> 00:14:07,870
out to your identity service

00:14:04,920 --> 00:14:10,360
authenticate get back the token store

00:14:07,870 --> 00:14:12,399
all that information get the Service

00:14:10,360 --> 00:14:14,290
Catalog which gives you the end points

00:14:12,399 --> 00:14:17,230
for all the available services on the

00:14:14,290 --> 00:14:21,820
cloud and then creates Python clients

00:14:17,230 --> 00:14:23,320
for every one of those services and the

00:14:21,820 --> 00:14:25,600
credential file just looks like that

00:14:23,320 --> 00:14:28,360
right now built-in we have support for

00:14:25,600 --> 00:14:33,160
standard OpenStack authentication key

00:14:28,360 --> 00:14:35,320
stone or Rackspace cloud one of the nice

00:14:33,160 --> 00:14:37,060
things about OpenStack is you can plug

00:14:35,320 --> 00:14:38,860
in your own authentication system you

00:14:37,060 --> 00:14:39,520
don't have to use the built-in one so if

00:14:38,860 --> 00:14:41,650
you have

00:14:39,520 --> 00:14:44,410
an existing system like we had our own

00:14:41,650 --> 00:14:46,600
global off system some people might have

00:14:44,410 --> 00:14:48,670
an LDAP or either or something like that

00:14:46,600 --> 00:14:53,160
that they can tie into that and use that

00:14:48,670 --> 00:14:53,160
for authentication and it works great

00:14:53,340 --> 00:14:57,790
this is the main configuration file you

00:14:56,020 --> 00:14:59,560
can set all this programmatically I just

00:14:57,790 --> 00:15:01,930
find it so much easier to create a

00:14:59,560 --> 00:15:03,700
configuration because I would have to

00:15:01,930 --> 00:15:06,270
work with multiple systems my test

00:15:03,700 --> 00:15:09,130
environment my production environment

00:15:06,270 --> 00:15:10,720
I've worked with some devstack thing and

00:15:09,130 --> 00:15:13,120
make sure it works with that I have my

00:15:10,720 --> 00:15:16,720
personal account not my Rackspace test

00:15:13,120 --> 00:15:18,340
account so this you know standard

00:15:16,720 --> 00:15:20,980
configuration file you can define

00:15:18,340 --> 00:15:23,740
different environments and if you notice

00:15:20,980 --> 00:15:26,700
the third line in the default section

00:15:23,740 --> 00:15:29,020
says region and what it does is the

00:15:26,700 --> 00:15:30,580
OpenStack has this notion of data

00:15:29,020 --> 00:15:34,420
centers that are grouped together are

00:15:30,580 --> 00:15:36,580
called a region and Rackspace uses the

00:15:34,420 --> 00:15:38,500
airport code of closest to where the

00:15:36,580 --> 00:15:41,170
data center is so this one is set up to

00:15:38,500 --> 00:15:43,840
use our dallas data center dfw is Dallas

00:15:41,170 --> 00:15:51,250
Fort Worth but for you guys I'm going to

00:15:43,840 --> 00:15:53,380
make a little change here much better as

00:15:51,250 --> 00:15:57,670
of last month we now have a data center

00:15:53,380 --> 00:15:59,950
in Sydney with a full cloud capability

00:15:57,670 --> 00:16:01,840
and I did some timing when I first got

00:15:59,950 --> 00:16:03,970
down here and it's a lot faster than

00:16:01,840 --> 00:16:07,810
having to do everything hit in the

00:16:03,970 --> 00:16:09,010
States so all right and if you look at

00:16:07,810 --> 00:16:11,080
the code you're going to see a bunch of

00:16:09,010 --> 00:16:12,400
abbreviations I just I get tired of

00:16:11,080 --> 00:16:14,620
typing long things even with

00:16:12,400 --> 00:16:16,120
auto-completion i like having short

00:16:14,620 --> 00:16:18,040
little things so when you see these

00:16:16,120 --> 00:16:20,710
things when you see clb that's cloud

00:16:18,040 --> 00:16:22,510
load balancers and these are the clients

00:16:20,710 --> 00:16:27,280
that you use to talk to the different

00:16:22,510 --> 00:16:28,870
services so the first thing you do just

00:16:27,280 --> 00:16:32,050
to create a database you have cloud

00:16:28,870 --> 00:16:36,160
database create pretty simple you pass a

00:16:32,050 --> 00:16:40,060
name a flavor is a ram configuration and

00:16:36,160 --> 00:16:41,950
a volume of two gigabytes and so that

00:16:40,060 --> 00:16:44,340
will create an instance right now

00:16:41,950 --> 00:16:49,540
they're my sequel instances we have

00:16:44,340 --> 00:16:51,400
postgres and mongodb in the works now

00:16:49,540 --> 00:16:53,680
this next one is

00:16:51,400 --> 00:16:55,420
you'll see this a lot wait for build

00:16:53,680 --> 00:16:57,730
what it does is this a very common thing

00:16:55,420 --> 00:17:00,670
is you create it and it goes out and say

00:16:57,730 --> 00:17:02,560
synchronous so the server exists or the

00:17:00,670 --> 00:17:04,480
database instance exists but it's being

00:17:02,560 --> 00:17:07,450
built right now it'll have a status if

00:17:04,480 --> 00:17:09,400
you query it of build so you want to

00:17:07,450 --> 00:17:11,020
wait until the thing is ready before you

00:17:09,400 --> 00:17:14,470
start acting on it you can't interact

00:17:11,020 --> 00:17:16,240
with it when it's still building so you

00:17:14,470 --> 00:17:19,270
pass in the instance and whether or not

00:17:16,240 --> 00:17:24,940
you want to print out the status that's

00:17:19,270 --> 00:17:27,459
what you sing in ah crap well let me

00:17:24,940 --> 00:17:31,200
scroll up alright see the up at the top

00:17:27,459 --> 00:17:37,870
here that's what the wait for is doing

00:17:31,200 --> 00:17:40,060
got to the app servers and it built it

00:17:37,870 --> 00:17:44,410
was in build and then it just craft I

00:17:40,060 --> 00:17:46,570
don't know then we only have 10 minutes

00:17:44,410 --> 00:17:49,300
and it takes almost that long to run so

00:17:46,570 --> 00:17:54,730
I do have a nice little cleanup script

00:17:49,300 --> 00:17:57,460
because this does happen a lot where was

00:17:54,730 --> 00:17:59,760
all the weight the other thing is is you

00:17:57,460 --> 00:18:03,070
get a little block until it reaches the

00:17:59,760 --> 00:18:04,930
the build is complete there's also a

00:18:03,070 --> 00:18:06,580
non-blocking version you just pass in a

00:18:04,930 --> 00:18:09,880
callback function and then it will

00:18:06,580 --> 00:18:11,500
continue on unblocking and then call

00:18:09,880 --> 00:18:13,660
that call back when the build finally

00:18:11,500 --> 00:18:16,000
completes so depends on what your need

00:18:13,660 --> 00:18:18,550
is all right I'm gonna give this one

00:18:16,000 --> 00:18:22,330
last try if not you can you know throw

00:18:18,550 --> 00:18:25,740
rotten fruit at me or whatever just make

00:18:22,330 --> 00:18:25,740
sure okay that's starting

00:18:27,769 --> 00:18:32,609
alright so once the the database

00:18:30,869 --> 00:18:35,729
instance is there you create a database

00:18:32,609 --> 00:18:38,399
in there and a user who has access to

00:18:35,729 --> 00:18:40,709
that database so the code is pretty

00:18:38,399 --> 00:18:43,589
readable I mean it just tells you what

00:18:40,709 --> 00:18:45,599
you're doing this is how you create an

00:18:43,589 --> 00:18:48,959
isolated network so if you want to have

00:18:45,599 --> 00:18:53,539
a local land that's private among your

00:18:48,959 --> 00:18:56,789
instances you just define a name cidr

00:18:53,539 --> 00:18:59,129
address range and call cloud networks

00:18:56,789 --> 00:19:03,479
create passing in that information and

00:18:59,129 --> 00:19:07,159
you have yourself a private network you

00:19:03,479 --> 00:19:09,719
can also store public keys in there and

00:19:07,159 --> 00:19:11,909
name them so that then when you create

00:19:09,719 --> 00:19:13,919
your servers those keys will be

00:19:11,909 --> 00:19:16,919
installed on there so you can show into

00:19:13,919 --> 00:19:20,249
them directly and so it's just cloud

00:19:16,919 --> 00:19:24,959
servers key pairs create passing in a

00:19:20,249 --> 00:19:27,149
name and your your key so this is the

00:19:24,959 --> 00:19:29,519
code that actually creates the server

00:19:27,149 --> 00:19:32,849
you can see the hard-coded uuid of the

00:19:29,519 --> 00:19:35,219
image that i created the the app that it

00:19:32,849 --> 00:19:38,450
has is just a simple flask application

00:19:35,219 --> 00:19:42,179
that when you hit it will give off the

00:19:38,450 --> 00:19:44,159
IP address of the server and the current

00:19:42,179 --> 00:19:48,269
time just so you can tell which one is

00:19:44,159 --> 00:19:51,089
being hit and here's how you create a

00:19:48,269 --> 00:19:55,559
server you just give it a name the image

00:19:51,089 --> 00:19:57,629
flavor is a ramdisk combination the key

00:19:55,559 --> 00:19:59,999
name and which networks you want to

00:19:57,629 --> 00:20:02,639
install and I just had the service net

00:19:59,999 --> 00:20:04,469
the local one and the same thing for a

00:20:02,639 --> 00:20:11,669
server two and then you wait for those

00:20:04,469 --> 00:20:13,109
to build now you once they're built you

00:20:11,669 --> 00:20:15,269
can query their their network

00:20:13,109 --> 00:20:17,519
information including their IP addresses

00:20:15,269 --> 00:20:19,769
so once I get those now I can define a

00:20:17,519 --> 00:20:23,009
couple of nodes for the load balancer

00:20:19,769 --> 00:20:25,079
and I want them to listen on port 80 I

00:20:23,009 --> 00:20:28,379
can also give them a weight so if I have

00:20:25,079 --> 00:20:29,500
different different size resources I can

00:20:28,379 --> 00:20:32,470
give one

00:20:29,500 --> 00:20:34,090
more to one if I have a test system i

00:20:32,470 --> 00:20:38,200
might want to give it a higher weight so

00:20:34,090 --> 00:20:42,160
that it will get hit more often and i

00:20:38,200 --> 00:20:45,070
can see the results better then i create

00:20:42,160 --> 00:20:47,140
a virtual IP instance and most of the

00:20:45,070 --> 00:20:51,280
time this is all you need if you're just

00:20:47,140 --> 00:20:53,880
setting up a public load balancer there

00:20:51,280 --> 00:20:56,830
is provisions for doing them behind

00:20:53,880 --> 00:20:58,060
private lands and it's all documented if

00:20:56,830 --> 00:21:00,280
you're interested you can look at that

00:20:58,060 --> 00:21:02,650
but it's not really what we care about

00:21:00,280 --> 00:21:04,480
right now here's where you create the

00:21:02,650 --> 00:21:08,110
load balancer you just again give it a

00:21:04,480 --> 00:21:09,910
name specify the port and protocol the

00:21:08,110 --> 00:21:13,140
nodes you want to have the virtual IP

00:21:09,910 --> 00:21:16,440
that it's going to use and the algorithm

00:21:13,140 --> 00:21:19,120
weighted round robin is just allocates

00:21:16,440 --> 00:21:22,240
to all the different nodes based on

00:21:19,120 --> 00:21:24,430
their weight so and again we wait for

00:21:22,240 --> 00:21:26,680
that to build and then we grab its

00:21:24,430 --> 00:21:30,130
address and that's the public IP address

00:21:26,680 --> 00:21:33,220
that people are going to use to reach

00:21:30,130 --> 00:21:36,430
our application now I actually have the

00:21:33,220 --> 00:21:38,200
domain name Pyrex demo com so what I'm

00:21:36,430 --> 00:21:43,230
going to do is I can create a domain

00:21:38,200 --> 00:21:48,120
using our dns and give it a time to live

00:21:43,230 --> 00:21:51,820
was that five minutes plus 15 minutes

00:21:48,120 --> 00:21:54,790
create an a record with that domain name

00:21:51,820 --> 00:21:58,210
and add that record to the domain and I

00:21:54,790 --> 00:22:01,510
got dns and that's basically it that's

00:21:58,210 --> 00:22:03,100
that I just created that now because I'm

00:22:01,510 --> 00:22:05,620
talking and explaining and took longer

00:22:03,100 --> 00:22:08,110
to explain it than it did to run if the

00:22:05,620 --> 00:22:10,270
thing would run oh it's still going this

00:22:08,110 --> 00:22:12,670
is going to take probably a few more

00:22:10,270 --> 00:22:14,800
minutes to build when it's done it will

00:22:12,670 --> 00:22:16,930
print out the IP address and you'll be

00:22:14,800 --> 00:22:18,940
able if you have a browser available

00:22:16,930 --> 00:22:23,470
you'll be able to hit that and and see

00:22:18,940 --> 00:22:25,540
that it's actually working and it'll

00:22:23,470 --> 00:22:28,120
take a while for the DNS to propagate so

00:22:25,540 --> 00:22:30,760
maybe like in 10 minutes or something

00:22:28,120 --> 00:22:33,190
hit Pyrex demo calm and you should be

00:22:30,760 --> 00:22:35,080
able to hit that all right while that's

00:22:33,190 --> 00:22:40,269
running then that's what I have

00:22:35,080 --> 00:22:43,779
and let me I just have adding another

00:22:40,269 --> 00:22:45,580
node we can skip that take questions now

00:22:43,779 --> 00:22:47,799
but before I just wanted to point out

00:22:45,580 --> 00:22:51,090
you can reach me either at a dot leaf at

00:22:47,799 --> 00:22:56,200
rackspace or just edit openstack org and

00:22:51,090 --> 00:22:59,080
i'm on google and twitter and just my

00:22:56,200 --> 00:23:02,880
name so so we have a fair amount of time

00:22:59,080 --> 00:23:02,880
for questions so let's see some hands

00:23:07,230 --> 00:23:17,409
thanks very much for those hands now

00:23:09,250 --> 00:23:21,250
let's see the answer questions sure does

00:23:17,409 --> 00:23:24,010
pyrox have methods for like actually

00:23:21,250 --> 00:23:28,000
installing the software i got sorry i

00:23:24,010 --> 00:23:31,630
have to apply hearing and this is kind

00:23:28,000 --> 00:23:35,080
of an echo a room so maybe I'll come to

00:23:31,630 --> 00:23:36,850
you all right what was that what methods

00:23:35,080 --> 00:23:40,149
are therefore actually installing

00:23:36,850 --> 00:23:43,000
software and customizing your instance

00:23:40,149 --> 00:23:45,159
within pyrex all right um there's

00:23:43,000 --> 00:23:47,860
there's two things that you can do one

00:23:45,159 --> 00:23:50,019
you can specify files that are uploaded

00:23:47,860 --> 00:23:51,549
but they're they're fairly limited in

00:23:50,019 --> 00:23:55,240
what you can do a lot of them they use

00:23:51,549 --> 00:23:57,639
it for like in / Etsy or something some

00:23:55,240 --> 00:23:59,919
configuration in there you can't install

00:23:57,639 --> 00:24:01,929
huge amounts of software but once those

00:23:59,919 --> 00:24:03,850
servers are created they're just like

00:24:01,929 --> 00:24:06,730
any other server you can shell into them

00:24:03,850 --> 00:24:12,519
and open up a terminal session and you

00:24:06,730 --> 00:24:14,529
know thank you um my company the one

00:24:12,519 --> 00:24:15,730
where I work we're already customers

00:24:14,529 --> 00:24:18,010
with you and this looks so much like

00:24:15,730 --> 00:24:19,990
what would do that I feel you know like

00:24:18,010 --> 00:24:22,750
I'm doing the right thing but I have the

00:24:19,990 --> 00:24:24,970
question that we actually build generic

00:24:22,750 --> 00:24:26,980
Linux machines and then run around mysql

00:24:24,970 --> 00:24:30,130
instances on them what are the

00:24:26,980 --> 00:24:31,600
advantages of creating DB instances of

00:24:30,130 --> 00:24:34,320
rackspace what is it that you give us

00:24:31,600 --> 00:24:37,510
that we don't then have to do it by hand

00:24:34,320 --> 00:24:38,950
okay well with the cloud databases

00:24:37,510 --> 00:24:40,600
there's a couple of things one there in

00:24:38,950 --> 00:24:42,119
the data center right next to your cloud

00:24:40,600 --> 00:24:45,989
instance so the

00:24:42,119 --> 00:24:49,589
latency between them is very short too

00:24:45,989 --> 00:24:51,419
they just finally and I can criticize

00:24:49,589 --> 00:24:53,789
them because it's my company finally got

00:24:51,419 --> 00:24:55,829
cloud backup installed in there so you

00:24:53,789 --> 00:24:58,169
also have the backup built in and the

00:24:55,829 --> 00:25:00,689
backups go automatically into Swift

00:24:58,169 --> 00:25:04,259
which is the object storage so you have

00:25:00,689 --> 00:25:06,839
the redundancy and all that in there the

00:25:04,259 --> 00:25:09,179
other thing is that if you have a

00:25:06,839 --> 00:25:11,369
database there and you start to run out

00:25:09,179 --> 00:25:14,279
of disk space you can just resize that

00:25:11,369 --> 00:25:16,829
instance and presto you got more disk

00:25:14,279 --> 00:25:23,389
space you have those are some of the

00:25:16,829 --> 00:25:26,419
advantages thanks you mentioned the

00:25:23,389 --> 00:25:30,329
post-crisis on the way have you got any

00:25:26,419 --> 00:25:35,129
projection say it again I'm sorry first

00:25:30,329 --> 00:25:37,289
Chris on the y buenas no I really don't

00:25:35,129 --> 00:25:40,319
i'm not working directly with that team

00:25:37,289 --> 00:25:42,689
i expect it to be within the next two

00:25:40,319 --> 00:25:46,499
months but don't hold me to that all

00:25:42,689 --> 00:25:49,619
right i just know that the general cycle

00:25:46,499 --> 00:25:54,059
and I'm just kind of guessing educated

00:25:49,619 --> 00:25:57,449
guessing okay all right pyrex looks

00:25:54,059 --> 00:25:59,969
really good I'm using some of the other

00:25:57,449 --> 00:26:02,729
cloud providers which don't have a nice

00:25:59,969 --> 00:26:06,779
OpenStack interface is there anything

00:26:02,729 --> 00:26:10,619
that kind of strikes away we've been

00:26:06,779 --> 00:26:14,369
stacked versus ec2 versus compute engine

00:26:10,619 --> 00:26:16,739
vs yeah like other so yeah so if you're

00:26:14,369 --> 00:26:19,439
using amazon or one of the other

00:26:16,739 --> 00:26:20,909
providers that are not open by the way i

00:26:19,439 --> 00:26:24,749
don't know if you saw on my t-shirt

00:26:20,909 --> 00:26:26,559
OpenStack free as in beer speech and

00:26:24,749 --> 00:26:28,749
love

00:26:26,559 --> 00:26:31,570
okay um yeah we made a conscious

00:26:28,749 --> 00:26:33,820
decision to to work with OpenStack

00:26:31,570 --> 00:26:35,259
because we think that's the future we

00:26:33,820 --> 00:26:38,139
think that's where things are going we

00:26:35,259 --> 00:26:40,960
do recognize that other people are using

00:26:38,139 --> 00:26:43,029
other things we do have a product called

00:26:40,960 --> 00:26:45,970
lib cloud that we maintain its another

00:26:43,029 --> 00:26:48,009
python library that is cross provider so

00:26:45,970 --> 00:26:51,519
it works with Amazon it'll work with

00:26:48,009 --> 00:26:54,549
rackspace it'll work with HP you know so

00:26:51,519 --> 00:26:57,580
though that that's an option to lib

00:26:54,549 --> 00:27:00,460
cloud is not as finely tuned to

00:26:57,580 --> 00:27:02,470
OpenStack based systems though it's more

00:27:00,460 --> 00:27:04,299
of a least common denominator approach

00:27:02,470 --> 00:27:07,299
so it's really great for firing up

00:27:04,299 --> 00:27:13,330
instances and and you know storing

00:27:07,299 --> 00:27:15,460
objects but you know okay so if i wanted

00:27:13,330 --> 00:27:18,009
to have an H a system and I wanted to

00:27:15,460 --> 00:27:21,149
have the backup data center can I use my

00:27:18,009 --> 00:27:24,610
racks to just passing like a flag saying

00:27:21,149 --> 00:27:28,389
creating a che for me so creative I

00:27:24,610 --> 00:27:30,009
missed high availability with like let's

00:27:28,389 --> 00:27:32,350
say I'm creating a data center using pi

00:27:30,009 --> 00:27:34,990
racks and I want to create a backup data

00:27:32,350 --> 00:27:37,330
center somewhere else in a backup oh

00:27:34,990 --> 00:27:39,100
yeah so you can there's some methods

00:27:37,330 --> 00:27:41,440
that I didn't show called connect to

00:27:39,100 --> 00:27:44,019
whatever cloud files connect to cloud

00:27:41,440 --> 00:27:45,789
servers and you can pass in a region so

00:27:44,019 --> 00:27:47,350
you can work with multiple regions at

00:27:45,789 --> 00:27:49,539
the same time so you can move between

00:27:47,350 --> 00:27:52,139
them and all for this I just figured one

00:27:49,539 --> 00:27:54,639
is enough so how did this thing already

00:27:52,139 --> 00:27:58,029
disconnect it's one to see if it

00:27:54,639 --> 00:28:03,549
actually finished oh I see it went to

00:27:58,029 --> 00:28:05,379
sleep sorry now craft oh well you're

00:28:03,549 --> 00:28:09,129
gigging you can throw the rotten fruit

00:28:05,379 --> 00:28:12,210
now come on doesn't have rotten fruit oh

00:28:09,129 --> 00:28:12,210
there we go there's a question

00:28:14,110 --> 00:28:20,480
sorry for putting us about it do we just

00:28:18,040 --> 00:28:24,320
carry on my rocker also but do we have

00:28:20,480 --> 00:28:26,480
any plans to extend fire axe either with

00:28:24,320 --> 00:28:27,770
heat from OpenStack or the deployment

00:28:26,480 --> 00:28:30,919
stuff that was recently announced

00:28:27,770 --> 00:28:32,480
alright so I have to keep apologizing it

00:28:30,919 --> 00:28:34,220
sucks when you know too much loud rock

00:28:32,480 --> 00:28:37,220
and roll over the years but what was

00:28:34,220 --> 00:28:40,220
that do we keep thinking iraq's will be

00:28:37,220 --> 00:28:42,559
extended to work with heat or any of the

00:28:40,220 --> 00:28:44,780
deployments stuff that wrecks that we

00:28:42,559 --> 00:28:49,910
recently announced yo yeah and there are

00:28:44,780 --> 00:28:53,380
definitely plans for that oh okay yeah

00:28:49,910 --> 00:28:56,210
no it's definitely a work in progress I

00:28:53,380 --> 00:28:59,570
just put the finishing touches on cloud

00:28:56,210 --> 00:29:01,520
monitoring and I just have to write all

00:28:59,570 --> 00:29:03,530
the documentation you know and all that

00:29:01,520 --> 00:29:05,929
so it's one of those things that it

00:29:03,530 --> 00:29:09,590
forces you to write documentation which

00:29:05,929 --> 00:29:10,850
is not my most comfortable thing but um

00:29:09,590 --> 00:29:12,860
it's one of those things it's like

00:29:10,850 --> 00:29:15,350
exercise it's good for you and anything

00:29:12,860 --> 00:29:17,870
that makes encourage you to do it is a

00:29:15,350 --> 00:29:25,250
good thing so time for a couple more

00:29:17,870 --> 00:29:30,910
questions off system nah no worries I

00:29:25,250 --> 00:29:35,780
have no idea why it's doing that oh well

00:29:30,910 --> 00:29:38,960
well as demo compensation here is a

00:29:35,780 --> 00:29:41,809
blend of Norwegian blue coffee for the

00:29:38,960 --> 00:29:43,549
conference and the icon are you like to

00:29:41,809 --> 00:29:46,240
drink it in please join me in thanking

00:29:43,549 --> 00:29:46,240
edge leaf

00:29:50,040 --> 00:29:53,120

YouTube URL: https://www.youtube.com/watch?v=ohmAT6hpqaQ


