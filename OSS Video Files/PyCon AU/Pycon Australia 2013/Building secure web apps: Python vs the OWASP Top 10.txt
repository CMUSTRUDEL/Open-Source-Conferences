Title: Building secure web apps: Python vs the OWASP Top 10
Publication date: 2013-07-10
Playlist: Pycon Australia 2013
Description: 
	Jacob Kaplan-Moss
http://2013.pycon-au.org/schedule/30081/view_talk
The web is a scary place, and building secure web applications is difficult. Luckily, you've got Python! The Python web community tends to take security seriously, so most popular Python web frameworks have defenses available. This talk looks at the list of the top 10 security vulnerabilities, as ranked by The Open Web Application Security Project (OWASP). We'll talk about what each attack is, and look at how to defend against t
Captions: 
	00:00:00,089 --> 00:00:05,160
ladies and gentlemen our next speaker is

00:00:02,399 --> 00:00:06,839
jacob kaplan moss koch btfl of Django

00:00:05,160 --> 00:00:09,150
previously worked at world online where

00:00:06,839 --> 00:00:11,040
Django was invented he's noted speaker

00:00:09,150 --> 00:00:13,710
on Django having keynoter Django con US

00:00:11,040 --> 00:00:15,540
and Europe and has presented at parson

00:00:13,710 --> 00:00:16,800
conferences around the world today he's

00:00:15,540 --> 00:00:18,600
going to be talking about how to protect

00:00:16,800 --> 00:00:20,460
Python and web applications against the

00:00:18,600 --> 00:00:29,449
OWASP top 10 attacks please welcome

00:00:20,460 --> 00:00:33,480
Jacob Kaplan Moss all right hi everybody

00:00:29,449 --> 00:00:36,809
so just very briefly about me

00:00:33,480 --> 00:00:38,550
so you know who I am and that I'm at

00:00:36,809 --> 00:00:42,780
least minimally qualified to talk about

00:00:38,550 --> 00:00:45,239
web security so I am the Coby DFL of

00:00:42,780 --> 00:00:46,559
Django I was one of the people who

00:00:45,239 --> 00:00:50,250
worked at the journal world where Django

00:00:46,559 --> 00:00:54,300
was invented and I've been involved in

00:00:50,250 --> 00:00:56,280
the project ever since and lately I've

00:00:54,300 --> 00:01:01,020
taken a new job as the director of

00:00:56,280 --> 00:01:03,510
security at Heroku so if you are a

00:01:01,020 --> 00:01:05,489
Heroku user or want to talk about Heroku

00:01:03,510 --> 00:01:07,770
come come talk to me and that's pretty

00:01:05,489 --> 00:01:13,799
much the last I'm gonna say about my day

00:01:07,770 --> 00:01:20,060
job so let's talk about the web the web

00:01:13,799 --> 00:01:22,080
is is really really scary unfortunately

00:01:20,060 --> 00:01:24,540
unfortunately when when you talk about

00:01:22,080 --> 00:01:27,259
security engineering the most basic

00:01:24,540 --> 00:01:30,509
mistakes can end up being catastrophic

00:01:27,259 --> 00:01:34,650
someone likened it to if you were

00:01:30,509 --> 00:01:36,540
building a bridge and the choice of a

00:01:34,650 --> 00:01:38,640
bolt if you used a bolt that was a few

00:01:36,540 --> 00:01:41,130
centimeters too short could cause the

00:01:38,640 --> 00:01:42,750
entire bridge to collapse that's often

00:01:41,130 --> 00:01:44,189
what security engineering can feel like

00:01:42,750 --> 00:01:47,070
and and that's rather that's rather

00:01:44,189 --> 00:01:50,250
terrible it makes developing web

00:01:47,070 --> 00:01:52,740
applications scary as you learn more

00:01:50,250 --> 00:01:55,380
about just how insecure and just how

00:01:52,740 --> 00:01:58,229
terrible the web is for keeping your

00:01:55,380 --> 00:02:03,990
stuff protected it it can be really it

00:01:58,229 --> 00:02:05,369
can be really frightening luckily we

00:02:03,990 --> 00:02:08,160
have Python

00:02:05,369 --> 00:02:11,489
and in particular we have some fantastic

00:02:08,160 --> 00:02:13,560
Python web frameworks I'm gonna talk

00:02:11,489 --> 00:02:15,720
about what I think of as sort of the

00:02:13,560 --> 00:02:19,110
primary Python web frameworks right now

00:02:15,720 --> 00:02:20,580
pyramid flask and Django I think most

00:02:19,110 --> 00:02:22,050
people doing web development in Python

00:02:20,580 --> 00:02:25,019
are using one of these frameworks and if

00:02:22,050 --> 00:02:27,620
you're not I think you should obviously

00:02:25,019 --> 00:02:31,380
I know the most about Django because I'm

00:02:27,620 --> 00:02:33,390
deep most deeply involved in it I know

00:02:31,380 --> 00:02:36,599
the second most about flask I use it

00:02:33,390 --> 00:02:38,370
fairly regularly I know the least about

00:02:36,599 --> 00:02:40,410
pyramid most of what I'm presenting

00:02:38,370 --> 00:02:41,940
about pyramid comes from reading

00:02:40,410 --> 00:02:44,880
documentation and trying things out

00:02:41,940 --> 00:02:46,860
although I've never built a through to

00:02:44,880 --> 00:02:49,049
production application and Pyramid only

00:02:46,860 --> 00:02:52,769
toys so that'll give you an idea of

00:02:49,049 --> 00:02:55,349
where my where my knowledge holes might

00:02:52,769 --> 00:02:57,239
be I think I've gotten everything right

00:02:55,349 --> 00:03:01,620
and I've run it by a few people to check

00:02:57,239 --> 00:03:03,330
but if I am wrong please correct me okay

00:03:01,620 --> 00:03:08,280
so so what is this Oh wasp

00:03:03,330 --> 00:03:11,519
top-10 the title mentioned so the OWASP

00:03:08,280 --> 00:03:16,590
is the open web application security

00:03:11,519 --> 00:03:17,820
program it's a consortium of security

00:03:16,590 --> 00:03:20,720
professionals of web security

00:03:17,820 --> 00:03:26,310
professionals who work to put together

00:03:20,720 --> 00:03:27,810
open free in both senses information

00:03:26,310 --> 00:03:31,970
about web security and they publish a

00:03:27,810 --> 00:03:34,950
number of documents and resources from

00:03:31,970 --> 00:03:36,870
from penetration testing tutorial which

00:03:34,950 --> 00:03:40,769
is actually really fun and great to work

00:03:36,870 --> 00:03:42,930
through to methodologies and resources

00:03:40,769 --> 00:03:45,299
you can use to evaluate your own

00:03:42,930 --> 00:03:49,950
applications and and your own security

00:03:45,299 --> 00:03:53,850
issues to this which is what they call

00:03:49,950 --> 00:03:55,709
the top ten they do a roughly bi-yearly

00:03:53,850 --> 00:03:58,620
survey every couple of years they do a

00:03:55,709 --> 00:04:00,000
survey of web vulnerabilities of

00:03:58,620 --> 00:04:02,579
reported vulnerabilities and web

00:04:00,000 --> 00:04:07,639
applications and try to look at what the

00:04:02,579 --> 00:04:10,079
most common issues are and and rank them

00:04:07,639 --> 00:04:12,720
now like every one of these sort of top

00:04:10,079 --> 00:04:14,549
ten lists there are there are quibbles

00:04:12,720 --> 00:04:17,290
people who do this for a living might

00:04:14,549 --> 00:04:21,100
say oh I would really put CSRF a lot

00:04:17,290 --> 00:04:25,360
number eight or you know I'm not sure I

00:04:21,100 --> 00:04:28,780
would include insecure direct object

00:04:25,360 --> 00:04:30,640
references so hi that's that's fine that

00:04:28,780 --> 00:04:32,830
you know we reasonable people can

00:04:30,640 --> 00:04:34,300
disagree about the top ten ah I find

00:04:32,830 --> 00:04:38,620
this as a good launching point for

00:04:34,300 --> 00:04:41,470
trying to evaluate where we are where

00:04:38,620 --> 00:04:42,430
our tools are so the goal of this talk

00:04:41,470 --> 00:04:44,980
is twofold

00:04:42,430 --> 00:04:47,050
for those who are new to web security I

00:04:44,980 --> 00:04:49,390
want to introduce briefly what each of

00:04:47,050 --> 00:04:51,700
these points are explained in the

00:04:49,390 --> 00:04:55,120
broadest strokes what each of them is

00:04:51,700 --> 00:04:57,930
and and what a vulnerability looks like

00:04:55,120 --> 00:05:01,030
and what the results would be and

00:04:57,930 --> 00:05:03,310
explain to you how you can use one of

00:05:01,030 --> 00:05:06,550
these great frameworks to protect

00:05:03,310 --> 00:05:08,290
against this vulnerability for those who

00:05:06,550 --> 00:05:10,930
are a little more experienced with

00:05:08,290 --> 00:05:15,100
Python or may be contributors to

00:05:10,930 --> 00:05:17,410
frameworks I want to kind of use this

00:05:15,100 --> 00:05:21,160
talk as a way of giving us collectively

00:05:17,410 --> 00:05:23,080
a scorecard not not Jango specifically

00:05:21,160 --> 00:05:25,660
not flask specifically but but the

00:05:23,080 --> 00:05:28,690
Python web world how do we the Python

00:05:25,660 --> 00:05:30,250
community do against this top ten I'm

00:05:28,690 --> 00:05:32,770
gonna come back at the end and kind of

00:05:30,250 --> 00:05:34,210
look at everything we've seen and and

00:05:32,770 --> 00:05:36,160
give us a scorecard and I think it

00:05:34,210 --> 00:05:38,980
identifies some areas that we have to

00:05:36,160 --> 00:05:40,570
work so I'm speaking to two different

00:05:38,980 --> 00:05:42,940
audiences here if you're new to this

00:05:40,570 --> 00:05:44,110
stuff I hope to give you some practical

00:05:42,940 --> 00:05:46,840
advice to make sure that the

00:05:44,110 --> 00:05:50,200
applications you develop are as secure

00:05:46,840 --> 00:05:52,750
as you can I hope to show you what will

00:05:50,200 --> 00:05:54,880
be easy and what will be hard and for

00:05:52,750 --> 00:05:56,770
those of you who actually work on these

00:05:54,880 --> 00:05:58,420
tools I want you to pay a special

00:05:56,770 --> 00:05:59,590
attention where I talk about what's hard

00:05:58,420 --> 00:06:01,060
because that's where we should be

00:05:59,590 --> 00:06:04,360
focusing our effort and that's where we

00:06:01,060 --> 00:06:08,230
should be trying to do better so let's

00:06:04,360 --> 00:06:10,810
dive in so the top vulnerability and it

00:06:08,230 --> 00:06:15,100
has been every year that a wasp has

00:06:10,810 --> 00:06:16,660
published their list is injection if

00:06:15,100 --> 00:06:20,290
you're an xkcd fan you're probably

00:06:16,660 --> 00:06:22,870
familiar with little Bobbie tables and

00:06:20,290 --> 00:06:23,830
what what sequel injection is so if

00:06:22,870 --> 00:06:27,370
you're if your last thing now you

00:06:23,830 --> 00:06:29,230
understand this bug but for those who

00:06:27,370 --> 00:06:29,889
don't I'll try to explain it a little

00:06:29,230 --> 00:06:32,349
bit

00:06:29,889 --> 00:06:34,719
all of my slides all my examples use

00:06:32,349 --> 00:06:36,759
flasks because it's the smallest it's

00:06:34,719 --> 00:06:38,289
the easiest to to fit on the slide

00:06:36,759 --> 00:06:39,819
there's a very specific type of

00:06:38,289 --> 00:06:41,469
development slide driven development

00:06:39,819 --> 00:06:43,960
where you need to write code that's

00:06:41,469 --> 00:06:48,099
small enough to fit on a conference

00:06:43,960 --> 00:06:51,340
slides flask is perfect for slide driven

00:06:48,099 --> 00:06:53,469
development so let's imagine we were

00:06:51,340 --> 00:06:56,740
writing a banking site and we want to

00:06:53,469 --> 00:06:58,270
display a list of transactions of your

00:06:56,740 --> 00:07:04,240
transaction so we might write a view

00:06:58,270 --> 00:07:07,360
like this we get the we get the user

00:07:04,240 --> 00:07:11,050
name from a get variable we do a sequel

00:07:07,360 --> 00:07:12,819
statement and we render the transactions

00:07:11,050 --> 00:07:14,379
that we get from the sequel statement so

00:07:12,819 --> 00:07:17,199
let's think about what this might do

00:07:14,379 --> 00:07:21,099
let's walk through how how this this

00:07:17,199 --> 00:07:23,770
might work so I could I could visit a

00:07:21,099 --> 00:07:26,229
URL in my browser life get transactions

00:07:23,770 --> 00:07:27,189
question mark user equals Jacob right

00:07:26,229 --> 00:07:28,629
and then we could imagine the

00:07:27,189 --> 00:07:30,370
application would generate this URL

00:07:28,629 --> 00:07:34,439
would just be like your transactions I'd

00:07:30,370 --> 00:07:37,449
click on it so if that happens it gets

00:07:34,439 --> 00:07:39,729
interpolated into the string and so we

00:07:37,449 --> 00:07:41,830
get a nice sequel statement select from

00:07:39,729 --> 00:07:44,639
transactions where user equals Jacob no

00:07:41,830 --> 00:07:47,589
problem there are all my transactions

00:07:44,639 --> 00:07:50,020
okay but what if I pass in an argument

00:07:47,589 --> 00:07:52,120
like this and that's some gobbledygook

00:07:50,020 --> 00:07:55,899
there because of URL encoding but that's

00:07:52,120 --> 00:08:00,490
basically the string quote or one equals

00:07:55,899 --> 00:08:03,279
one so if I pass that in when at once I

00:08:00,490 --> 00:08:04,810
do the string interpolation my sequel

00:08:03,279 --> 00:08:07,270
statement ends up like this select from

00:08:04,810 --> 00:08:10,149
transactions where user equals blank or

00:08:07,270 --> 00:08:12,339
one equals one and since one always

00:08:10,149 --> 00:08:14,589
equals one I get every single

00:08:12,339 --> 00:08:16,839
transaction so now all of a sudden

00:08:14,589 --> 00:08:18,189
instead of logged in users just seeing

00:08:16,839 --> 00:08:20,770
their transactions now they see

00:08:18,189 --> 00:08:25,300
everyone's transaction so this is data

00:08:20,770 --> 00:08:26,860
leakage via sequel injection so that's

00:08:25,300 --> 00:08:29,169
that's bad right

00:08:26,860 --> 00:08:33,789
everyone's transactions everyone's

00:08:29,169 --> 00:08:35,349
private data but it gets worse if I pass

00:08:33,789 --> 00:08:37,120
in a string like this and I'll let you

00:08:35,349 --> 00:08:40,360
figure out exactly how the encoding is

00:08:37,120 --> 00:08:42,459
going on there I end up with a sequel

00:08:40,360 --> 00:08:42,740
statement that looks like select star

00:08:42,459 --> 00:08:44,540
from

00:08:42,740 --> 00:08:48,370
actions where user equals empty string

00:08:44,540 --> 00:08:51,440
semicolon delete from transactions

00:08:48,370 --> 00:08:54,770
that's really not good there's an

00:08:51,440 --> 00:08:56,360
interesting type of attack that that

00:08:54,770 --> 00:09:00,529
black hats have started doing lately

00:08:56,360 --> 00:09:02,149
well they will they will discover a data

00:09:00,529 --> 00:09:04,790
leakage vulnerability and they will

00:09:02,149 --> 00:09:06,410
download all of your data and then they

00:09:04,790 --> 00:09:07,940
will use that same vulnerability to

00:09:06,410 --> 00:09:10,010
delete all your data and essentially

00:09:07,940 --> 00:09:13,730
hold your data hostage they'll ask you

00:09:10,010 --> 00:09:16,070
for $50,000 in return for returning your

00:09:13,730 --> 00:09:18,290
own data to you and if you didn't have

00:09:16,070 --> 00:09:19,760
good backups and let's face it if you

00:09:18,290 --> 00:09:21,200
are writing an application that's

00:09:19,760 --> 00:09:22,850
vulnerable to sequel injection the

00:09:21,200 --> 00:09:25,610
chances that you also don't have good

00:09:22,850 --> 00:09:26,930
backups are reasonably high you end up

00:09:25,610 --> 00:09:29,720
having to shell out money to the very

00:09:26,930 --> 00:09:33,200
people who broke into your systems not

00:09:29,720 --> 00:09:34,940
not fun now this is sort of the most

00:09:33,200 --> 00:09:36,560
simple form of sequel injection we're

00:09:34,940 --> 00:09:38,450
using it we're using a get header here

00:09:36,560 --> 00:09:41,720
it's clear that the data is coming from

00:09:38,450 --> 00:09:44,720
the user you know that this is the very

00:09:41,720 --> 00:09:47,060
basic in practice something like this

00:09:44,720 --> 00:09:49,220
wouldn't necessarily have to come

00:09:47,060 --> 00:09:51,140
necessarily from direct data from the

00:09:49,220 --> 00:09:52,850
browser a lot of times sequel injection

00:09:51,140 --> 00:09:55,490
comes from what's called stored

00:09:52,850 --> 00:09:57,950
injection so when you signup for the

00:09:55,490 --> 00:10:01,130
bank and it asks for your user name

00:09:57,950 --> 00:10:01,700
that's where you might put quote or one

00:10:01,130 --> 00:10:05,390
equals one

00:10:01,700 --> 00:10:07,610
hence little Bobbie tables so we you

00:10:05,390 --> 00:10:09,430
might think oh the user name is safe

00:10:07,610 --> 00:10:11,839
because it comes from my own database

00:10:09,430 --> 00:10:13,550
but you have to actually trace back

00:10:11,839 --> 00:10:19,220
through the string of where the data

00:10:13,550 --> 00:10:20,750
comes from so again broad strokes if you

00:10:19,220 --> 00:10:22,790
want to know more there's lots of

00:10:20,750 --> 00:10:24,500
resources out there starting with OWASP

00:10:22,790 --> 00:10:27,160
about sequel injection but let's move on

00:10:24,500 --> 00:10:29,480
to what you can do about this because

00:10:27,160 --> 00:10:32,290
although this is the most dangerous

00:10:29,480 --> 00:10:35,029
vulnerability the one most likely to

00:10:32,290 --> 00:10:37,100
really really hurt if you've got it it's

00:10:35,029 --> 00:10:40,430
also the easiest to defend against in

00:10:37,100 --> 00:10:42,920
Python basically if you're using Python

00:10:40,430 --> 00:10:45,140
and you're using web stuff please use an

00:10:42,920 --> 00:10:46,910
ORM I know that this is somewhat

00:10:45,140 --> 00:10:48,829
controversial there's this whole like

00:10:46,910 --> 00:10:51,560
what's what's the line oh RMS or the

00:10:48,829 --> 00:10:53,510
Vietnam of computer science and and

00:10:51,560 --> 00:10:56,120
there there are good reasons to use Ross

00:10:53,510 --> 00:10:58,520
sequel but for most of your data

00:10:56,120 --> 00:10:59,930
work if you use an ORM you're among the

00:10:58,520 --> 00:11:01,700
other benefits you get you are

00:10:59,930 --> 00:11:04,580
completely protected against these

00:11:01,700 --> 00:11:06,320
problems so Django has the Django DB

00:11:04,580 --> 00:11:09,290
models the model backend and in both

00:11:06,320 --> 00:11:10,760
flask and pyramid the default seems to

00:11:09,290 --> 00:11:14,150
be sequel alchemy there are a few other

00:11:10,760 --> 00:11:15,920
ORM s in the in the Python world

00:11:14,150 --> 00:11:18,110
pee-wee is one written by a friend of

00:11:15,920 --> 00:11:19,820
mine there's storm out of canonical all

00:11:18,110 --> 00:11:21,440
of the ones I've looked at have a really

00:11:19,820 --> 00:11:23,360
good story around sequel injection they

00:11:21,440 --> 00:11:25,279
properly escape all their parameters

00:11:23,360 --> 00:11:27,380
they use what are called bind parameters

00:11:25,279 --> 00:11:30,680
in the database the story here is really

00:11:27,380 --> 00:11:34,640
really good for us as a community if you

00:11:30,680 --> 00:11:36,740
must write sequel by hand there's one

00:11:34,640 --> 00:11:38,720
rule you you have to know it's

00:11:36,740 --> 00:11:43,760
absolutely critical and that's never

00:11:38,720 --> 00:11:46,760
treat your sequel query as a string the

00:11:43,760 --> 00:11:50,120
database API takes two parameters a

00:11:46,760 --> 00:11:52,400
query and a list of parameters as long

00:11:50,120 --> 00:11:55,180
as you always pass in your parameters in

00:11:52,400 --> 00:11:57,380
that second item as a second argument

00:11:55,180 --> 00:11:58,880
you'll be safe because that will use

00:11:57,380 --> 00:12:01,160
what are called bind parameters they'll

00:11:58,880 --> 00:12:02,570
be sent to the database separately your

00:12:01,160 --> 00:12:04,190
query won't be dealt with as a string

00:12:02,570 --> 00:12:07,790
and you won't be vulnerable to this if

00:12:04,190 --> 00:12:11,050
you ever see code like this where you're

00:12:07,790 --> 00:12:13,400
using string interpolation or the

00:12:11,050 --> 00:12:15,279
addition operator to add strings

00:12:13,400 --> 00:12:18,050
together if you ever see code like that

00:12:15,279 --> 00:12:20,480
that's probably a point where you have a

00:12:18,050 --> 00:12:23,320
sequel injection vulnerability so a

00:12:20,480 --> 00:12:26,240
really good rule of thumb is anytime you

00:12:23,320 --> 00:12:28,310
have to use raw sequel anywhere in your

00:12:26,240 --> 00:12:29,540
web code to look at that code really

00:12:28,310 --> 00:12:31,190
carefully and make sure you're using

00:12:29,540 --> 00:12:33,440
bind parameters if you follow that

00:12:31,190 --> 00:12:35,900
simple rule and if you use an ORM where

00:12:33,440 --> 00:12:40,250
possible you will be protected against

00:12:35,900 --> 00:12:41,630
this attack which is nice now the last

00:12:40,250 --> 00:12:43,400
time I gave this talk

00:12:41,630 --> 00:12:45,260
the first question someone asked was

00:12:43,400 --> 00:12:47,209
well I'm using no sequel so I'm safe

00:12:45,260 --> 00:12:50,450
right I don't have to worry about sequel

00:12:47,209 --> 00:12:52,160
injection because I'm safe well this guy

00:12:50,450 --> 00:12:53,959
in particular is using so I went

00:12:52,160 --> 00:12:55,700
looked at how them at the DB

00:12:53,959 --> 00:12:58,490
documentation and it says if you're

00:12:55,700 --> 00:13:00,200
using any of these operations you must

00:12:58,490 --> 00:13:02,779
exercise care to prevent users from

00:13:00,200 --> 00:13:04,280
submitting malicious JavaScript so if

00:13:02,779 --> 00:13:06,170
you're using you don't need where

00:13:04,280 --> 00:13:09,700
clauses right I mean clearly that's not

00:13:06,170 --> 00:13:11,140
a something you use yeah unfortunately

00:13:09,700 --> 00:13:13,900
you're safe from sequel injection

00:13:11,140 --> 00:13:17,290
because the of the no sequel but you're

00:13:13,900 --> 00:13:19,240
not safe from from JavaScript injection

00:13:17,290 --> 00:13:23,400
so again if you're using something like

00:13:19,240 --> 00:13:26,710
MongoDB you probably want to be using a

00:13:23,400 --> 00:13:29,350
not an ORM but with a Khalid a a ODM

00:13:26,710 --> 00:13:31,390
object document mapper there are several

00:13:29,350 --> 00:13:33,250
good ones for Python the ones I've

00:13:31,390 --> 00:13:35,980
evaluated seem to be pretty good I would

00:13:33,250 --> 00:13:37,540
imagine that the other no sequel

00:13:35,980 --> 00:13:39,880
frameworks have similar tools that

00:13:37,540 --> 00:13:44,890
protect you against this as a general

00:13:39,880 --> 00:13:47,170
rule this phrase you must exercise care

00:13:44,890 --> 00:13:50,500
that's like a red flag to security

00:13:47,170 --> 00:13:52,210
professionals because history has told

00:13:50,500 --> 00:13:55,660
us that no matter how smart you think

00:13:52,210 --> 00:13:57,430
you are matter how smart I think I am no

00:13:55,660 --> 00:14:00,160
matter how much I know about this no

00:13:57,430 --> 00:14:02,380
matter how good I'm supposed to be at

00:14:00,160 --> 00:14:06,040
these things I'm going to get it wrong

00:14:02,380 --> 00:14:08,560
if you if if the the approaches security

00:14:06,040 --> 00:14:11,890
is you must exercise care you will

00:14:08,560 --> 00:14:14,080
forget one one time so the real rule

00:14:11,890 --> 00:14:15,400
about almost all of this the the theme

00:14:14,080 --> 00:14:17,050
that's gonna be running through these is

00:14:15,400 --> 00:14:19,390
you have to have a system if you have a

00:14:17,050 --> 00:14:22,120
systematic way of solving these instead

00:14:19,390 --> 00:14:30,190
of get it right every single time you'll

00:14:22,120 --> 00:14:32,020
do okay all right injection number two

00:14:30,190 --> 00:14:33,640
broken authentication and session

00:14:32,020 --> 00:14:37,720
management this is actually an umbrella

00:14:33,640 --> 00:14:39,630
for really a ton of a ton of different

00:14:37,720 --> 00:14:42,070
types of vulnerabilities ranging from

00:14:39,630 --> 00:14:43,300
improper storage of credentials which

00:14:42,070 --> 00:14:47,820
I'll talk about actually in a later

00:14:43,300 --> 00:14:51,480
point to bad password recovery functions

00:14:47,820 --> 00:14:53,770
to various forms of session security

00:14:51,480 --> 00:14:56,950
there's all sorts of different attacks

00:14:53,770 --> 00:14:59,890
on sessions from phishing attacks to

00:14:56,950 --> 00:15:01,870
stealing people sessions to session

00:14:59,890 --> 00:15:03,550
forging the session fixation there's

00:15:01,870 --> 00:15:06,010
just this whole class of vulnerabilities

00:15:03,550 --> 00:15:09,160
that basically resolve around revolve

00:15:06,010 --> 00:15:11,200
around hijacking someone else's session

00:15:09,160 --> 00:15:12,910
so even though you don't have their

00:15:11,200 --> 00:15:16,210
password you can still sort of be logged

00:15:12,910 --> 00:15:20,190
in it is them if you saw the buzz about

00:15:16,210 --> 00:15:21,800
Firesheep Firesheep is a form of

00:15:20,190 --> 00:15:24,980
obsession

00:15:21,800 --> 00:15:26,450
a session attack and for a long time the

00:15:24,980 --> 00:15:30,920
response from a lot of people about

00:15:26,450 --> 00:15:34,100
session attacks where animation fail

00:15:30,920 --> 00:15:35,540
where Oh login well what this says is

00:15:34,100 --> 00:15:38,540
this is someone at Dropbox a number of

00:15:35,540 --> 00:15:39,980
years ago saying logins over SSL so

00:15:38,540 --> 00:15:41,899
we're not vulnerable to session issues

00:15:39,980 --> 00:15:44,480
raise your hand if you think that's true

00:15:41,899 --> 00:15:46,190
if you if you put your login page over

00:15:44,480 --> 00:15:48,860
SSL you're not vulnerable to session

00:15:46,190 --> 00:15:51,980
stealing anyone believe this yes we're

00:15:48,860 --> 00:15:53,769
doing our job good yeah unfortunately

00:15:51,980 --> 00:15:56,690
that's not true

00:15:53,769 --> 00:15:59,540
there's no excuse your entire site

00:15:56,690 --> 00:16:02,329
should be behind SSL if it's public it

00:15:59,540 --> 00:16:04,730
should be SSL but you yes this costs

00:16:02,329 --> 00:16:06,769
more SSL termination is CPU intensive

00:16:04,730 --> 00:16:11,950
and you're going to require more

00:16:06,769 --> 00:16:16,790
resources but what are the costs of

00:16:11,950 --> 00:16:18,500
having your site compromised there

00:16:16,790 --> 00:16:20,810
really isn't an excuse for making sure

00:16:18,500 --> 00:16:24,110
that your entire site is owned is SSL

00:16:20,810 --> 00:16:26,089
only flask and Jango both have tools to

00:16:24,110 --> 00:16:28,850
actually enforce this there's something

00:16:26,089 --> 00:16:31,579
called flask SSL of five which will

00:16:28,850 --> 00:16:33,700
force your site to use us SSL and also

00:16:31,579 --> 00:16:36,440
use something called HSTs which is a

00:16:33,700 --> 00:16:37,930
extension to SSL to provide an

00:16:36,440 --> 00:16:40,190
additional layer of security there

00:16:37,930 --> 00:16:42,709
Django has a tool called Django secure

00:16:40,190 --> 00:16:44,959
which I believe will be built into

00:16:42,709 --> 00:16:47,240
Django circa 1:7 which I'm pretty

00:16:44,959 --> 00:16:49,610
excited about I was unable to find an

00:16:47,240 --> 00:16:52,490
equivalent for pyramid so this is one of

00:16:49,610 --> 00:16:53,959
those points where either someone needs

00:16:52,490 --> 00:16:58,130
to tell me that I'm wrong or someone

00:16:53,959 --> 00:16:59,899
needs to build this both of these tools

00:16:58,130 --> 00:17:01,490
are really easy to use you basically put

00:16:59,899 --> 00:17:03,680
a couple of lines of configuration and

00:17:01,490 --> 00:17:08,030
now your entire site will be forced or

00:17:03,680 --> 00:17:13,669
only served over SSL they are good use

00:17:08,030 --> 00:17:15,530
them the other component of this is once

00:17:13,669 --> 00:17:17,689
your once your site is secured behind

00:17:15,530 --> 00:17:19,760
SSL and man in the middle attacks aren't

00:17:17,689 --> 00:17:22,250
feasible you also have to make sure that

00:17:19,760 --> 00:17:23,419
your sessions themselves are secure and

00:17:22,250 --> 00:17:25,370
there's actually quite a lot of

00:17:23,419 --> 00:17:30,429
complexity around session security

00:17:25,370 --> 00:17:32,870
django had a bug for a long time on on

00:17:30,429 --> 00:17:35,390
around generation of the session key

00:17:32,870 --> 00:17:37,520
where if you you could basically predict

00:17:35,390 --> 00:17:39,470
someone session key if you knew roughly

00:17:37,520 --> 00:17:42,470
when they were about to login you could

00:17:39,470 --> 00:17:43,850
actually log in within about a second

00:17:42,470 --> 00:17:47,570
window of when they logged in and get

00:17:43,850 --> 00:17:49,460
the same session key which was a related

00:17:47,570 --> 00:17:53,840
to us using an incorrect random number

00:17:49,460 --> 00:17:56,390
function on Windows so this stuff the

00:17:53,840 --> 00:17:57,980
the tendrils of session security

00:17:56,390 --> 00:18:00,500
extended a bunch of interesting

00:17:57,980 --> 00:18:02,680
directions so the the rule is basically

00:18:00,500 --> 00:18:04,730
you probably want to use an existing

00:18:02,680 --> 00:18:07,070
component an existing framework that's

00:18:04,730 --> 00:18:09,020
thought about these things flask has

00:18:07,070 --> 00:18:10,760
this built in as flask about session

00:18:09,020 --> 00:18:13,790
Django has it built in as Django

00:18:10,760 --> 00:18:15,560
contribs sessions pyramid has a built in

00:18:13,790 --> 00:18:17,660
session framework which you should not

00:18:15,560 --> 00:18:19,790
use it is not secure the documentation

00:18:17,660 --> 00:18:21,290
calls this out and tells you to use

00:18:19,790 --> 00:18:24,940
beaker instead and you should pay

00:18:21,290 --> 00:18:24,940
attention to what the documentation said

00:18:26,590 --> 00:18:31,820
you should generally not store data in

00:18:29,360 --> 00:18:35,630
cookies directly rather prefer to store

00:18:31,820 --> 00:18:38,420
them in the session and if you do so all

00:18:35,630 --> 00:18:40,490
of these frameworks basically require a

00:18:38,420 --> 00:18:43,400
secret key to ensure that the session

00:18:40,490 --> 00:18:46,760
hasn't been tampered with in any way if

00:18:43,400 --> 00:18:48,290
you leak that secret key you know you

00:18:46,760 --> 00:18:50,960
put it in a config file and check it

00:18:48,290 --> 00:18:54,800
into github if you leak that secret key

00:18:50,960 --> 00:19:01,370
your sessions are basically should be

00:18:54,800 --> 00:19:06,410
considered insecure so ya don't put your

00:19:01,370 --> 00:19:08,090
secret key on github and finally even

00:19:06,410 --> 00:19:10,850
though your secret key even though your

00:19:08,090 --> 00:19:14,090
sessions are signed and secure if you

00:19:10,850 --> 00:19:18,470
use one of these tools you should

00:19:14,090 --> 00:19:20,660
probably consider the data to be to be

00:19:18,470 --> 00:19:23,150
user generated and hence be really

00:19:20,660 --> 00:19:25,600
careful about you know where you use it

00:19:23,150 --> 00:19:28,010
be it in sequel queries or in templates

00:19:25,600 --> 00:19:30,830
it's not always session data can come

00:19:28,010 --> 00:19:32,300
from a variety of sources but generally

00:19:30,830 --> 00:19:33,740
when you're writing a web app session

00:19:32,300 --> 00:19:36,770
data has something to do with the user

00:19:33,740 --> 00:19:38,270
and it's often influenceable by the

00:19:36,770 --> 00:19:40,250
logged in user so as a good rule of

00:19:38,270 --> 00:19:43,460
thumb assuming that session data is

00:19:40,250 --> 00:19:46,420
dangerous it might not be but doesn't

00:19:43,460 --> 00:19:46,420
hurt you to assume so

00:19:47,789 --> 00:19:53,530
so again the theme we see is you know

00:19:50,620 --> 00:19:56,470
used use a tool don't don't reinvent

00:19:53,530 --> 00:19:58,690
this stuff and we'll see that again as

00:19:56,470 --> 00:20:00,159
we talk about cross-site scripting so

00:19:58,690 --> 00:20:02,080
cross-site scripting is basically like

00:20:00,159 --> 00:20:04,960
the front end of version of sequel

00:20:02,080 --> 00:20:07,750
injection it's all about sticking your

00:20:04,960 --> 00:20:11,320
arbitrary code into this time a web page

00:20:07,750 --> 00:20:14,260
not a not a sequel query so we might

00:20:11,320 --> 00:20:17,650
imagine a view that looks like this that

00:20:14,260 --> 00:20:21,159
says hello to a user so if you visit say

00:20:17,650 --> 00:20:22,570
hi slash Jacob it'll say hello Jacob so

00:20:21,159 --> 00:20:25,390
again let's think about what might

00:20:22,570 --> 00:20:28,480
happen here if we ask for say hi Jacob

00:20:25,390 --> 00:20:30,460
we get it's fine hello Jacob great our

00:20:28,480 --> 00:20:33,850
HTML comes through there but what if we

00:20:30,460 --> 00:20:37,299
visit say hi and then a bunch of

00:20:33,850 --> 00:20:39,880
interesting data there well then we get

00:20:37,299 --> 00:20:42,730
to us hello and a script tag and that

00:20:39,880 --> 00:20:45,760
script tag will run and could do

00:20:42,730 --> 00:20:47,890
anything from stealing your cookies to

00:20:45,760 --> 00:20:50,200
automatically friending people to

00:20:47,890 --> 00:20:54,370
etcetera etc it was a well-publicized

00:20:50,200 --> 00:20:56,080
XSS attack against myspace years ago

00:20:54,370 --> 00:21:01,570
although I said myspace know that

00:20:56,080 --> 00:21:05,049
implied years ago samia's worm someone

00:21:01,570 --> 00:21:07,539
by the name of Sammy found a XSS attack

00:21:05,049 --> 00:21:09,100
in myspace that let him put a little bit

00:21:07,539 --> 00:21:11,620
of code on his profile page and if you

00:21:09,100 --> 00:21:14,710
visited his profile page that code would

00:21:11,620 --> 00:21:16,809
run in your browser logged in as you and

00:21:14,710 --> 00:21:20,039
would add that same with friend Sammy

00:21:16,809 --> 00:21:22,330
and then add that same code to your

00:21:20,039 --> 00:21:24,760
profile page so if anyone visited your

00:21:22,330 --> 00:21:26,380
profile page they would friend Sammy and

00:21:24,760 --> 00:21:29,409
then add the code to their page and I

00:21:26,380 --> 00:21:31,690
think he managed to friend like 90% of

00:21:29,409 --> 00:21:35,110
myspace users they actually found the

00:21:31,690 --> 00:21:37,270
bug because their their friendship

00:21:35,110 --> 00:21:38,950
system slowed down as you friended more

00:21:37,270 --> 00:21:40,120
people and he actually managed to bring

00:21:38,950 --> 00:21:43,480
their servers to their knees because he

00:21:40,120 --> 00:21:45,220
friended too many people so that's

00:21:43,480 --> 00:21:49,510
that's what an XSS attack looks like in

00:21:45,220 --> 00:21:51,220
practice again just like sequel

00:21:49,510 --> 00:21:53,140
injection although this attack can be

00:21:51,220 --> 00:21:54,970
pretty bad it's easy to defend against

00:21:53,140 --> 00:21:56,730
just use the template language that

00:21:54,970 --> 00:21:59,600
escapes HTML

00:21:56,730 --> 00:22:03,000
Django's template language does this and

00:21:59,600 --> 00:22:04,340
the quasi the quasi standard in the

00:22:03,000 --> 00:22:09,630
flask pyramid world

00:22:04,340 --> 00:22:11,880
Jinja does this as well there Python has

00:22:09,630 --> 00:22:14,040
many other template languages those that

00:22:11,880 --> 00:22:16,980
do not escape HTML are not suitable for

00:22:14,040 --> 00:22:19,230
you to use on the web and don't use them

00:22:16,980 --> 00:22:21,920
there are other ones that are useful for

00:22:19,230 --> 00:22:24,660
other types of tasks but if they don't

00:22:21,920 --> 00:22:26,970
automatically escaping HTML is a

00:22:24,660 --> 00:22:29,520
prerequisite and I know this because

00:22:26,970 --> 00:22:33,480
Django's template language originally

00:22:29,520 --> 00:22:36,450
didn't and I resisted for over a year

00:22:33,480 --> 00:22:37,980
while people argued that secure by

00:22:36,450 --> 00:22:41,280
default was the only way to go and I was

00:22:37,980 --> 00:22:44,480
finally convinced when when Malcolm

00:22:41,280 --> 00:22:47,280
TRADOC proceeded to systematically

00:22:44,480 --> 00:22:48,930
discover XSS attacks in every single

00:22:47,280 --> 00:22:51,270
site that I was responsible for and

00:22:48,930 --> 00:22:52,590
sending me an email that had a

00:22:51,270 --> 00:22:55,320
description and then now are you

00:22:52,590 --> 00:22:57,360
convinced by about one a day for a week

00:22:55,320 --> 00:23:05,220
until I threw up my hands and said ok ok

00:22:57,360 --> 00:23:07,170
I get the point so if you use a template

00:23:05,220 --> 00:23:09,060
language if we rewrite our application

00:23:07,170 --> 00:23:12,060
to use a template language now our

00:23:09,060 --> 00:23:14,870
template will automatically escape all

00:23:12,060 --> 00:23:18,210
of our script tags and we'll just see

00:23:14,870 --> 00:23:23,070
that someone tried to XSS us but without

00:23:18,210 --> 00:23:24,900
actually seeing the problem so OS has

00:23:23,070 --> 00:23:27,270
this weird thing at number four in

00:23:24,900 --> 00:23:28,350
direct direct object references so

00:23:27,270 --> 00:23:29,460
actually took me a while to figure what

00:23:28,350 --> 00:23:31,290
they meant by this

00:23:29,460 --> 00:23:32,820
so I actually kind of they mean a bunch

00:23:31,290 --> 00:23:34,020
of things again this is an umbrella term

00:23:32,820 --> 00:23:36,450
but I'm gonna hijack it for one

00:23:34,020 --> 00:23:39,870
particular thing and pretend that this

00:23:36,450 --> 00:23:41,760
is about bad URLs so let's imagine we

00:23:39,870 --> 00:23:45,810
have an app that lets people apply for a

00:23:41,760 --> 00:23:49,080
job and we have a job application object

00:23:45,810 --> 00:23:51,000
and we and we we store it in a database

00:23:49,080 --> 00:23:52,980
and we've got a we've got a page that

00:23:51,000 --> 00:23:54,540
users can go to to like edit their job

00:23:52,980 --> 00:23:57,270
application you know preview it whatever

00:23:54,540 --> 00:23:58,410
so after you apply for a job it might

00:23:57,270 --> 00:24:00,450
send you an email that says you know

00:23:58,410 --> 00:24:02,070
thanks for applying if you need to make

00:24:00,450 --> 00:24:04,680
changes here's a link to your

00:24:02,070 --> 00:24:08,640
application so I don't know about you

00:24:04,680 --> 00:24:11,029
when I get a link like this I Modi what

00:24:08,640 --> 00:24:13,590
do you want to do when you see that link

00:24:11,029 --> 00:24:15,720
we're all programmers we know like we

00:24:13,590 --> 00:24:17,009
see that's that's it that's an idea we

00:24:15,720 --> 00:24:20,940
know what that is and we want to know

00:24:17,009 --> 00:24:22,440
what what's next this is what OS means

00:24:20,940 --> 00:24:24,059
when they say insecure direct object

00:24:22,440 --> 00:24:26,159
references you're using a direct

00:24:24,059 --> 00:24:28,409
reference to an object something that's

00:24:26,159 --> 00:24:30,059
a transparent way of accessing that

00:24:28,409 --> 00:24:32,909
object and we're not securing it in it

00:24:30,059 --> 00:24:36,480
in any way so there's a variety of ways

00:24:32,909 --> 00:24:38,669
that you might that you might solve this

00:24:36,480 --> 00:24:41,370
one of the best ones is to basically use

00:24:38,669 --> 00:24:44,279
throwaway identifiers so on the web we

00:24:41,370 --> 00:24:46,440
often call these slugs it's sort of a

00:24:44,279 --> 00:24:48,659
little bit of an identifier in a URL and

00:24:46,440 --> 00:24:50,279
so instead that might end up generating

00:24:48,659 --> 00:24:51,509
if we use the slug we might end up

00:24:50,279 --> 00:24:55,590
generating a link that looks something

00:24:51,509 --> 00:24:59,340
like this you know Jacob Kaplan lost

00:24:55,590 --> 00:25:02,999
2013 so even this might not be the best

00:24:59,340 --> 00:25:04,769
approach right because if I if I wanted

00:25:02,999 --> 00:25:07,460
to know if I knew that you were applying

00:25:04,769 --> 00:25:11,100
for a job I might be able to still guess

00:25:07,460 --> 00:25:12,869
what a link like this might look like so

00:25:11,100 --> 00:25:15,149
this still might not be this might be

00:25:12,869 --> 00:25:16,139
better but this might not be perfect you

00:25:15,149 --> 00:25:19,619
might want to think about using

00:25:16,139 --> 00:25:24,090
something like a hash or a random number

00:25:19,619 --> 00:25:26,129
or some form of more opaque identifier

00:25:24,090 --> 00:25:31,399
anytime you're including it in a URL

00:25:26,129 --> 00:25:31,399
presuming that URL needs to be private

00:25:31,610 --> 00:25:35,789
and we'll come back to this example in a

00:25:34,470 --> 00:25:37,619
little bit because there's more we could

00:25:35,789 --> 00:25:41,929
be we could and should be doing around

00:25:37,619 --> 00:25:45,720
this type of this type of application

00:25:41,929 --> 00:25:47,730
all right so at number 500 US has

00:25:45,720 --> 00:25:51,480
security Miss configuration and by that

00:25:47,730 --> 00:25:53,549
they mean like you put you know insecure

00:25:51,480 --> 00:25:55,070
equals true in your settings file left

00:25:53,549 --> 00:25:57,210
debug mode on

00:25:55,070 --> 00:25:59,639
unfortunately there's kind of no silver

00:25:57,210 --> 00:26:01,230
bullet here right like if you if you

00:25:59,639 --> 00:26:02,909
have the switches turned in the wrong

00:26:01,230 --> 00:26:05,369
direction they're kind of isn't a lot

00:26:02,909 --> 00:26:07,710
that framework authors can do to make

00:26:05,369 --> 00:26:09,330
sure that that you are that you are

00:26:07,710 --> 00:26:12,139
secure I mean we can offer secure

00:26:09,330 --> 00:26:14,909
defaults we can offer documentation but

00:26:12,139 --> 00:26:16,590
unfortunately for you as developers this

00:26:14,909 --> 00:26:18,200
is kind of one of the areas where we we

00:26:16,590 --> 00:26:21,040
fall down a little bit there's no

00:26:18,200 --> 00:26:23,110
there's not really a good way

00:26:21,040 --> 00:26:26,110
of making sure that when you're ready

00:26:23,110 --> 00:26:29,890
for production all your all your knobs

00:26:26,110 --> 00:26:31,840
are turned to the right settings there's

00:26:29,890 --> 00:26:34,300
been a little bit of you know work

00:26:31,840 --> 00:26:35,860
around documenting this both flask and

00:26:34,300 --> 00:26:38,680
Django have pretty good security

00:26:35,860 --> 00:26:40,450
checklists I wasn't able to find one for

00:26:38,680 --> 00:26:41,920
pyramid unfortunately there wasn't a

00:26:40,450 --> 00:26:43,690
really good like these are the things to

00:26:41,920 --> 00:26:48,010
do before you go into production that I

00:26:43,690 --> 00:26:51,280
was able to find the aforementioned

00:26:48,010 --> 00:26:53,790
Django secure actually goes a little bit

00:26:51,280 --> 00:26:56,560
farther and has a command you can run

00:26:53,790 --> 00:26:58,420
currently called check secure that will

00:26:56,560 --> 00:27:00,130
look for some common mistakes that you

00:26:58,420 --> 00:27:01,930
might might have made in your

00:27:00,130 --> 00:27:03,580
application it will check that your SSL

00:27:01,930 --> 00:27:06,190
only it will check that you're using a

00:27:03,580 --> 00:27:08,740
proper session storage it'll check that

00:27:06,190 --> 00:27:12,190
you've got HSTs enabled it'll kind of do

00:27:08,740 --> 00:27:14,770
a bunch of checklist things we like this

00:27:12,190 --> 00:27:18,130
idea so much were expanding it and

00:27:14,770 --> 00:27:19,990
including it in Django hopefully this

00:27:18,130 --> 00:27:23,950
doesn't exist for flask or pyramid so uh

00:27:19,990 --> 00:27:27,010
you know Sprint's starting Monday we

00:27:23,950 --> 00:27:28,750
would be I would be thrilled django

00:27:27,010 --> 00:27:30,250
secured is not my code it's Karl's code

00:27:28,750 --> 00:27:31,570
but I would be thrilled that I'm pretty

00:27:30,250 --> 00:27:34,780
sure he'd be thrilled to if you ripped

00:27:31,570 --> 00:27:38,920
it off and and I stole it for one of

00:27:34,780 --> 00:27:42,420
these other frameworks just one other

00:27:38,920 --> 00:27:45,100
thing please please turn off debug mode

00:27:42,420 --> 00:27:46,720
Django serves a very specific string at

00:27:45,100 --> 00:27:49,300
the bottom of debug pages you're seeing

00:27:46,720 --> 00:27:50,770
this page because debug equals true if

00:27:49,300 --> 00:27:56,020
you do a Google search for that exact

00:27:50,770 --> 00:27:59,080
string he finds so much stuff when are

00:27:56,020 --> 00:28:01,900
do launched they the day they launch and

00:27:59,080 --> 00:28:05,260
announced on TechCrunch and etc they had

00:28:01,900 --> 00:28:06,910
debug turned on and so if you managed to

00:28:05,260 --> 00:28:08,710
find an error in their site you could

00:28:06,910 --> 00:28:10,690
see all of their configuration settings

00:28:08,710 --> 00:28:16,630
and their database connections string

00:28:10,690 --> 00:28:19,330
and yeah so um turn stuff off in flash

00:28:16,630 --> 00:28:21,970
gets at that debug in Django it's in the

00:28:19,330 --> 00:28:24,550
settings file debug pyramid has actually

00:28:21,970 --> 00:28:26,440
a few different debug settings there's a

00:28:24,550 --> 00:28:29,560
debug all which is probably the one that

00:28:26,440 --> 00:28:31,720
you want to turn off but if you've

00:28:29,560 --> 00:28:33,280
turned individual flags on and off then

00:28:31,720 --> 00:28:35,490
you have to turn those individual flags

00:28:33,280 --> 00:28:35,490
off

00:28:35,929 --> 00:28:43,890
alright sensitive data exposure this is

00:28:39,779 --> 00:28:45,570
all about not not exposing not exposing

00:28:43,890 --> 00:28:49,169
data that needs to be sensitive so

00:28:45,570 --> 00:28:52,080
freaking mailman every month century is

00:28:49,169 --> 00:28:54,419
your password to you in plain text over

00:28:52,080 --> 00:28:55,770
email and this this of course means that

00:28:54,419 --> 00:28:57,779
they're storing your password in plain

00:28:55,770 --> 00:28:59,340
text so if anyone manages to get access

00:28:57,779 --> 00:29:01,830
to a mailman installation

00:28:59,340 --> 00:29:05,610
there's your password I hope you didn't

00:29:01,830 --> 00:29:07,110
use it on any other sites the biggest

00:29:05,610 --> 00:29:08,730
thing to talk about from when we talked

00:29:07,110 --> 00:29:14,940
about sensitive data is is password

00:29:08,730 --> 00:29:15,990
storage use bcrypt use bcrypt anyone

00:29:14,940 --> 00:29:17,090
think you should use that anything else

00:29:15,990 --> 00:29:20,370
then bcrypt

00:29:17,090 --> 00:29:22,289
you're wrong use be crimped if you are

00:29:20,370 --> 00:29:23,730
enough of an expert to be able to

00:29:22,289 --> 00:29:24,899
explain what the difference is between

00:29:23,730 --> 00:29:27,870
Beach bcrypt

00:29:24,899 --> 00:29:29,940
and PD KDF to our if you could implement

00:29:27,870 --> 00:29:31,529
either of these algorithms then you may

00:29:29,940 --> 00:29:33,899
choose a different algorithm otherwise

00:29:31,529 --> 00:29:35,880
you should use be crimped and I'm not

00:29:33,899 --> 00:29:38,460
and I don't be crypt is what I use

00:29:35,880 --> 00:29:41,190
luckily it's very easy and all in in all

00:29:38,460 --> 00:29:42,929
of our frameworks Django has sort of

00:29:41,190 --> 00:29:45,419
quasi support for bcrypt but you have to

00:29:42,929 --> 00:29:46,799
install Python decrypt and in flask and

00:29:45,419 --> 00:29:50,309
pyramid you can use a library called

00:29:46,799 --> 00:29:51,600
Pass Lib to do this correctly it's

00:29:50,309 --> 00:29:53,340
important to note that even if you

00:29:51,600 --> 00:29:55,909
follow these instructions you should

00:29:53,340 --> 00:29:58,470
still assume that your passwords are

00:29:55,909 --> 00:30:00,679
crackable given enough determination and

00:29:58,470 --> 00:30:03,860
enough resources and enough time so

00:30:00,679 --> 00:30:06,270
properly stored passwords are not a

00:30:03,860 --> 00:30:08,490
panacea you still need to make sure that

00:30:06,270 --> 00:30:10,559
your database is as secure as you can

00:30:08,490 --> 00:30:12,870
make it and not publicly accessible and

00:30:10,559 --> 00:30:17,669
not open to sequel injection and etc etc

00:30:12,870 --> 00:30:19,770
but if you use bcrypt you'll at least be

00:30:17,669 --> 00:30:24,320
you know head-and-shoulders among above

00:30:19,770 --> 00:30:28,740
mailman ok

00:30:24,320 --> 00:30:30,570
missing access control the access

00:30:28,740 --> 00:30:32,340
controls really hard right like it when

00:30:30,570 --> 00:30:33,779
you have complicated security rules

00:30:32,340 --> 00:30:37,559
they're very hard to make sure that

00:30:33,779 --> 00:30:39,779
they're applied directly remember our

00:30:37,559 --> 00:30:40,110
our job application from a few slides

00:30:39,779 --> 00:30:42,480
ago

00:30:40,110 --> 00:30:45,240
well there was kind of still a problem

00:30:42,480 --> 00:30:47,460
with this because even if I if I could

00:30:45,240 --> 00:30:49,680
guess that number or that slug or that

00:30:47,460 --> 00:30:51,630
identifier I could access someone else's

00:30:49,680 --> 00:30:53,940
application and this is a you know this

00:30:51,630 --> 00:30:55,680
is a reasonably common thing right we we

00:30:53,940 --> 00:30:58,370
think that we've got a URL and we say

00:30:55,680 --> 00:31:00,960
okay this URL is you know unguessable

00:30:58,370 --> 00:31:03,600
and then turns out we're wrong django

00:31:00,960 --> 00:31:07,440
had a vulnerability a while back around

00:31:03,600 --> 00:31:10,020
the password reset the the password

00:31:07,440 --> 00:31:13,080
reset view it would generate a link in

00:31:10,020 --> 00:31:14,700
an email that had sort of a hash and the

00:31:13,080 --> 00:31:17,490
assumption was that hash wasn't

00:31:14,700 --> 00:31:19,320
guessable so that you couldn't sort of

00:31:17,490 --> 00:31:22,500
construct a reset link for someone

00:31:19,320 --> 00:31:24,140
else's password yeah as it turned out we

00:31:22,500 --> 00:31:27,360
were wrong about it not being guessable

00:31:24,140 --> 00:31:29,790
so we probably you know we needed some

00:31:27,360 --> 00:31:31,640
other forms of control around there in

00:31:29,790 --> 00:31:33,960
that particular case we couldn't add

00:31:31,640 --> 00:31:36,150
login around it because the person had

00:31:33,960 --> 00:31:37,620
forgotten their password but for

00:31:36,150 --> 00:31:40,830
something like this you know you

00:31:37,620 --> 00:31:43,410
probably need to be adding login on top

00:31:40,830 --> 00:31:45,090
of it so for example you might check

00:31:43,410 --> 00:31:47,940
that the applicant on this application

00:31:45,090 --> 00:31:49,500
is the same as the current user browsing

00:31:47,940 --> 00:31:57,930
the site make sure that users can only

00:31:49,500 --> 00:31:59,370
view their their own applications access

00:31:57,930 --> 00:32:02,010
control is kind of one of those things

00:31:59,370 --> 00:32:04,350
that none of these frameworks can can

00:32:02,010 --> 00:32:07,710
kind of do out of the box for you

00:32:04,350 --> 00:32:09,480
Dillons keynote at django con au

00:32:07,710 --> 00:32:10,950
yesterday was really interesting you

00:32:09,480 --> 00:32:13,380
talked about one of the big benefits of

00:32:10,950 --> 00:32:15,510
CMS is over frameworks is that CMS has

00:32:13,380 --> 00:32:18,920
actually do really handle access control

00:32:15,510 --> 00:32:21,210
in a sort of careful and holistic way

00:32:18,920 --> 00:32:23,240
frameworks kind of leave it up to you to

00:32:21,210 --> 00:32:26,760
write it yourself

00:32:23,240 --> 00:32:29,010
all of these libraries provide you to

00:32:26,760 --> 00:32:30,570
build the these frameworks provide you

00:32:29,010 --> 00:32:33,720
the the building blocks you need to

00:32:30,570 --> 00:32:35,640
implement secure to implement access

00:32:33,720 --> 00:32:37,290
control but it's really a good idea to

00:32:35,640 --> 00:32:39,660
sort of have your own access control

00:32:37,290 --> 00:32:41,460
layer that you build on top of whatever

00:32:39,660 --> 00:32:43,260
the framework provides for you so that

00:32:41,460 --> 00:32:46,130
you can reason about your access control

00:32:43,260 --> 00:32:49,050
a little more a little more holistically

00:32:46,130 --> 00:32:50,670
most successful applications I've seen

00:32:49,050 --> 00:32:52,200
end up with some sort for mum

00:32:50,670 --> 00:32:56,430
abstraction that comes down to a

00:32:52,200 --> 00:32:58,800
function that says does does user X

00:32:56,430 --> 00:33:01,980
have access to resource why and then

00:32:58,800 --> 00:33:03,630
occasionally to perform actions II you

00:33:01,980 --> 00:33:06,300
usually come down to that's those sorts

00:33:03,630 --> 00:33:16,050
of questions about users and access and

00:33:06,300 --> 00:33:18,420
occasionally actions yeah CSRs

00:33:16,050 --> 00:33:20,490
cross-site request forgery this one's a

00:33:18,420 --> 00:33:22,290
little bit hard to explain although it's

00:33:20,490 --> 00:33:23,790
actually I'm surprised to see it all the

00:33:22,290 --> 00:33:27,840
way down at eight because I see it in

00:33:23,790 --> 00:33:29,940
real world applications all the time so

00:33:27,840 --> 00:33:33,030
let's imagine that you've got us a stock

00:33:29,940 --> 00:33:34,770
trading site and you've got a list of

00:33:33,030 --> 00:33:35,970
you know a table of stocks and next to

00:33:34,770 --> 00:33:38,250
each one you want to have a little link

00:33:35,970 --> 00:33:40,170
to sell the stock right so you click

00:33:38,250 --> 00:33:42,090
sell and then the Sox the stock gets

00:33:40,170 --> 00:33:45,870
sold and some money comes back into your

00:33:42,090 --> 00:33:49,260
account well if you built a site like

00:33:45,870 --> 00:33:52,170
this I might send out an email to people

00:33:49,260 --> 00:33:53,820
that I suspect of having a account on

00:33:52,170 --> 00:33:55,290
your on your site that looks something

00:33:53,820 --> 00:33:58,140
like this hey look you've won an iPad

00:33:55,290 --> 00:33:59,940
click here to claim your iPad will

00:33:58,140 --> 00:34:03,090
notice that link it goes to your server

00:33:59,940 --> 00:34:06,420
comm slash stock slash sell well that's

00:34:03,090 --> 00:34:08,429
the same as where this link where this

00:34:06,420 --> 00:34:10,140
form goes to and now anyone who clicks

00:34:08,429 --> 00:34:12,330
on this link to try to get their free

00:34:10,140 --> 00:34:18,830
ipad actually ends up selling their

00:34:12,330 --> 00:34:21,060
stock or deleting their account or

00:34:18,830 --> 00:34:24,240
launching nuclear weapons whatever that

00:34:21,060 --> 00:34:25,380
link happened to be so you might you

00:34:24,240 --> 00:34:27,330
might be saying at this point yeah yeah

00:34:25,380 --> 00:34:30,419
but I you know I'm a web developer I

00:34:27,330 --> 00:34:32,220
know that debt is meant to be an

00:34:30,419 --> 00:34:35,580
impotent and that I should be using post

00:34:32,220 --> 00:34:38,610
for all of my all of my forms I'm

00:34:35,580 --> 00:34:40,860
protected right I can use post yeah not

00:34:38,610 --> 00:34:42,179
so much I can still send out a link that

00:34:40,860 --> 00:34:45,090
looks something like this where I just

00:34:42,179 --> 00:34:46,710
use a forum and a button and CSS will

00:34:45,090 --> 00:34:50,010
let me style this however I want this

00:34:46,710 --> 00:34:51,810
can still look like a link there's even

00:34:50,010 --> 00:34:53,640
another insidious as a more insidious

00:34:51,810 --> 00:34:56,429
form of an attack like this called

00:34:53,640 --> 00:34:59,400
clickjacking where you actually style

00:34:56,429 --> 00:35:02,700
this form button to be invisible and

00:34:59,400 --> 00:35:04,770
position it over a flash game so when

00:35:02,700 --> 00:35:06,600
someone clicks to play the game it

00:35:04,770 --> 00:35:08,310
actually triggers a link a form

00:35:06,600 --> 00:35:09,690
submission on to the other site so this

00:35:08,310 --> 00:35:12,289
is the cross-site

00:35:09,690 --> 00:35:15,630
of cross-site request forgery we are

00:35:12,289 --> 00:35:17,520
tricking a user into performing an

00:35:15,630 --> 00:35:21,210
action as if they were on someone else's

00:35:17,520 --> 00:35:23,130
site and your site can't tell the

00:35:21,210 --> 00:35:26,849
difference between this form submission

00:35:23,130 --> 00:35:28,200
because HTTP is stateless we have no way

00:35:26,849 --> 00:35:30,510
of knowing whether that user was

00:35:28,200 --> 00:35:32,130
previously on the site so I've just

00:35:30,510 --> 00:35:34,589
hinted at the solution right we have to

00:35:32,130 --> 00:35:37,020
introduce some concept of state we have

00:35:34,589 --> 00:35:39,660
to make sure that we know that this user

00:35:37,020 --> 00:35:41,609
this form submission is actually from

00:35:39,660 --> 00:35:44,579
the form we served you could think about

00:35:41,609 --> 00:35:47,760
this and fit in a physical and physical

00:35:44,579 --> 00:35:49,920
analogy as when we when we scan someone

00:35:47,760 --> 00:35:51,990
a form to fill out we make a note of the

00:35:49,920 --> 00:35:54,030
of the identify D number on that form

00:35:51,990 --> 00:35:56,579
and we get the form back from the the

00:35:54,030 --> 00:35:58,260
user we we check that the ID number

00:35:56,579 --> 00:35:59,549
matches what we gave out to them and

00:35:58,260 --> 00:36:01,440
that way we know that they're returning

00:35:59,549 --> 00:36:05,970
the actual document that we handed to

00:36:01,440 --> 00:36:09,750
them we can do the same in HTTP we can

00:36:05,970 --> 00:36:12,990
have an input in our form some arbitrary

00:36:09,750 --> 00:36:15,450
token containing some some value some

00:36:12,990 --> 00:36:17,609
particular string and we can check on

00:36:15,450 --> 00:36:19,770
each form submission that the token that

00:36:17,609 --> 00:36:22,380
comes back is the same as the token that

00:36:19,770 --> 00:36:25,049
went out now the details of generating

00:36:22,380 --> 00:36:28,349
this token are quite subtle

00:36:25,049 --> 00:36:30,869
I believe Django I believe we iterated

00:36:28,349 --> 00:36:33,839
three times on our CSRF framework before

00:36:30,869 --> 00:36:36,539
we got it right was a four three to four

00:36:33,839 --> 00:36:39,720
times it's quite subtle it's difficult

00:36:36,539 --> 00:36:41,250
to do we we Illustrated that why you

00:36:39,720 --> 00:36:42,599
kind of want to use someone else's

00:36:41,250 --> 00:36:49,190
implementation rather than inventing

00:36:42,599 --> 00:36:51,960
your own so yeah that's the that's the

00:36:49,190 --> 00:36:53,970
answer basically in your own application

00:36:51,960 --> 00:36:55,920
is let someone else do the heavy lifting

00:36:53,970 --> 00:36:58,380
for you flasks actually is a couple of

00:36:55,920 --> 00:37:01,470
good options there's there's flasks CSRF

00:36:58,380 --> 00:37:04,380
which just implements the CSRF parts but

00:37:01,470 --> 00:37:06,839
if you're using WF WTF forms which most

00:37:04,380 --> 00:37:09,510
people seem to do there's actually an

00:37:06,839 --> 00:37:12,529
extension that combines both WTF forms

00:37:09,510 --> 00:37:15,119
and flask and flask CSRF to give you

00:37:12,529 --> 00:37:16,349
CSRF protected forms in flask which is

00:37:15,119 --> 00:37:18,539
the best thing to use that that's what I

00:37:16,349 --> 00:37:21,390
use I think it's great this is built

00:37:18,539 --> 00:37:22,860
into Django you can't turn it off it's

00:37:21,390 --> 00:37:24,300
sort of built into pyramid

00:37:22,860 --> 00:37:26,370
but it's not on you have to sort of

00:37:24,300 --> 00:37:27,210
manually turn it on and like do some

00:37:26,370 --> 00:37:28,590
things yourself

00:37:27,210 --> 00:37:29,850
so if using pyramid see the

00:37:28,590 --> 00:37:30,600
documentation and follow the

00:37:29,850 --> 00:37:33,170
instructions

00:37:30,600 --> 00:37:36,000
make sure you've turned this on and just

00:37:33,170 --> 00:37:38,850
like with sessions the security of your

00:37:36,000 --> 00:37:40,200
CSRF token depends on your secret key so

00:37:38,850 --> 00:37:43,050
if you leak your secret key you're now

00:37:40,200 --> 00:37:47,940
open to CSRF attacks so guard that key

00:37:43,050 --> 00:37:49,560
guard that key with your life so if you

00:37:47,940 --> 00:37:51,150
were here for the previous talk you

00:37:49,560 --> 00:37:55,880
heard me ask a question based around

00:37:51,150 --> 00:37:58,560
this this this point wasp identifies

00:37:55,880 --> 00:38:00,960
using components with vulnerabilities at

00:37:58,560 --> 00:38:03,330
number nine and this is a big problem

00:38:00,960 --> 00:38:05,970
this is probably the place where we fall

00:38:03,330 --> 00:38:07,950
down the hardest so you can ask a pip

00:38:05,970 --> 00:38:10,770
you can say hey pip what's outdated pip

00:38:07,950 --> 00:38:13,170
list - - outdated and it'll tell me I'm

00:38:10,770 --> 00:38:14,900
using Django 1:5 then there is one v one

00:38:13,170 --> 00:38:17,460
available and it'll tell me I'm using

00:38:14,900 --> 00:38:20,180
Raven one four six and there's a 333

00:38:17,460 --> 00:38:24,390
available it'll tell me all these things

00:38:20,180 --> 00:38:28,020
which of these represent compatible bug

00:38:24,390 --> 00:38:31,680
fixes incompatible bug fixes security

00:38:28,020 --> 00:38:34,080
releases big major sky is falling

00:38:31,680 --> 00:38:36,510
security releases you know for all you

00:38:34,080 --> 00:38:38,610
know Jango one five one might have fixed

00:38:36,510 --> 00:38:40,470
a sequel injection attack this gives you

00:38:38,610 --> 00:38:43,590
nothing this tells you stuffs out of

00:38:40,470 --> 00:38:45,660
date but then it basically says yeah

00:38:43,590 --> 00:38:47,610
good luck with that

00:38:45,660 --> 00:38:49,680
this is really a big problem staying

00:38:47,610 --> 00:38:51,420
up-to-date as things change is really

00:38:49,680 --> 00:38:54,120
really hard we don't have the

00:38:51,420 --> 00:38:59,060
infrastructure we don't have the bits

00:38:54,120 --> 00:38:59,060
the bits in place to make this easy you

00:38:59,270 --> 00:39:04,290
all of these answers are not very good

00:39:02,220 --> 00:39:06,120
you need a good test suite so that you

00:39:04,290 --> 00:39:09,420
can update your dependencies often and

00:39:06,120 --> 00:39:11,070
test them when I really get my act

00:39:09,420 --> 00:39:14,340
together what I like to do is have a CI

00:39:11,070 --> 00:39:16,110
server that every time it runs updates

00:39:14,340 --> 00:39:18,240
to the latest version of everything so

00:39:16,110 --> 00:39:20,520
I'm basically continuously integrating

00:39:18,240 --> 00:39:22,050
my test suite against newer versions of

00:39:20,520 --> 00:39:24,420
my dependencies and what I have pinned

00:39:22,050 --> 00:39:26,190
in production but the problem is people

00:39:24,420 --> 00:39:29,670
release backwards incompatible stuff all

00:39:26,190 --> 00:39:31,020
the time and then things fail and having

00:39:29,670 --> 00:39:33,030
a schedule and knowing what it's a

00:39:31,020 --> 00:39:36,100
security issue versus not it's really

00:39:33,030 --> 00:39:38,020
really hard you can follow mailing lists

00:39:36,100 --> 00:39:40,240
there's a service called bundle Scout

00:39:38,020 --> 00:39:42,130
which you've got to pay for and they

00:39:40,240 --> 00:39:43,780
supposedly will tell you about security

00:39:42,130 --> 00:39:46,590
releases but they seem they seem to not

00:39:43,780 --> 00:39:49,180
do a good job telling the difference so

00:39:46,590 --> 00:39:53,860
watch this space this is one of the

00:39:49,180 --> 00:39:55,210
reasons I took a job at Herodians all

00:39:53,860 --> 00:39:57,580
right the last issue is about

00:39:55,210 --> 00:40:00,460
unvalidated redirects and this is

00:39:57,580 --> 00:40:02,110
basically a rather esoteric issue this

00:40:00,460 --> 00:40:04,480
was the the topic of our most recent

00:40:02,110 --> 00:40:06,160
security release and basically under

00:40:04,480 --> 00:40:10,570
certain circumstances you could fake a

00:40:06,160 --> 00:40:12,580
host header and force a email to come

00:40:10,570 --> 00:40:14,350
out that looks like it comes from your

00:40:12,580 --> 00:40:15,880
site in fact it does come from your site

00:40:14,350 --> 00:40:17,890
sorry it actually comes from your site

00:40:15,880 --> 00:40:22,120
but it links over to someone else's site

00:40:17,890 --> 00:40:23,620
this is a component of a of a form of

00:40:22,120 --> 00:40:24,990
phishing attack a targeted phishing

00:40:23,620 --> 00:40:29,020
attack sometimes called spear phishing

00:40:24,990 --> 00:40:30,730
and unfortunately we all fail here all

00:40:29,020 --> 00:40:32,680
of our frameworks built-in redirect

00:40:30,730 --> 00:40:34,180
functions have no facility for checking

00:40:32,680 --> 00:40:37,360
that the redirects are safe that is that

00:40:34,180 --> 00:40:39,370
they redirect back to our site or a site

00:40:37,360 --> 00:40:43,300
under our control rather than someone

00:40:39,370 --> 00:40:45,280
else's site so let's um let's sum up how

00:40:43,300 --> 00:40:49,660
did we do

00:40:45,280 --> 00:40:51,130
Injection nailed it authentication and

00:40:49,660 --> 00:40:52,870
session management we're doing pretty a

00:40:51,130 --> 00:40:54,730
pretty good job there's a bit of work

00:40:52,870 --> 00:40:56,020
you have to do individually but but the

00:40:54,730 --> 00:40:58,590
frameworks give you all the things you

00:40:56,020 --> 00:41:01,720
need XSS nailed it

00:40:58,590 --> 00:41:03,280
direct object references it's kind of up

00:41:01,720 --> 00:41:04,690
to you the frameworks give you good

00:41:03,280 --> 00:41:06,340
routing tools so you should be able to

00:41:04,690 --> 00:41:10,500
do a good job but we don't do that great

00:41:06,340 --> 00:41:14,190
a job telling you to do that so mixed

00:41:10,500 --> 00:41:16,090
not-so-good about security configuration

00:41:14,190 --> 00:41:19,690
pretty good about sensitive data

00:41:16,090 --> 00:41:20,830
exposure of access control this is a lot

00:41:19,690 --> 00:41:23,980
of work I don't know that it will ever

00:41:20,830 --> 00:41:26,380
be able to do an excellent job here CSRF

00:41:23,980 --> 00:41:29,710
nailed it components with

00:41:26,380 --> 00:41:31,570
vulnerabilities total fail absolute fail

00:41:29,710 --> 00:41:34,360
here we are not doing a good job and

00:41:31,570 --> 00:41:37,480
redirects fail as well so here's our

00:41:34,360 --> 00:41:39,850
report card here's how Python is doing I

00:41:37,480 --> 00:41:42,930
think I've identified it some areas that

00:41:39,850 --> 00:41:45,420
we might need to be work to work on

00:41:42,930 --> 00:41:47,819
I would say overall were somewhere

00:41:45,420 --> 00:41:51,270
around a be pretty solid be you know

00:41:47,819 --> 00:41:53,730
we're passing we're doing okay yeah but

00:41:51,270 --> 00:41:56,849
we could be doing a lot better and

00:41:53,730 --> 00:42:00,920
hopefully you will join me and helping

00:41:56,849 --> 00:42:00,920
us do better so thank you very much

00:42:06,160 --> 00:42:09,560
thank you very much Jacob again if

00:42:08,240 --> 00:42:11,930
you've got questions please form an

00:42:09,560 --> 00:42:14,270
orderly rabble behind the two mics to

00:42:11,930 --> 00:42:16,100
get get the rent started again

00:42:14,270 --> 00:42:19,520
okay so Security's hard let's go

00:42:16,100 --> 00:42:21,500
shopping there are many people out there

00:42:19,520 --> 00:42:23,270
who I've been selling security audit

00:42:21,500 --> 00:42:25,130
services and security analysis services

00:42:23,270 --> 00:42:26,300
and whatnot but I'm also aware you've

00:42:25,130 --> 00:42:27,770
got people like Bri sterling around

00:42:26,300 --> 00:42:31,160
they're saying security is a process not

00:42:27,770 --> 00:42:33,200
a product ah the security services worth

00:42:31,160 --> 00:42:34,340
the paper they're printed on or are they

00:42:33,200 --> 00:42:36,890
just a really wonderful way of

00:42:34,340 --> 00:42:38,540
exploiting public fear and doubt about

00:42:36,890 --> 00:42:40,760
things like this list and am i doing it

00:42:38,540 --> 00:42:41,990
properly and so on right well let's so

00:42:40,760 --> 00:42:42,920
let's leave a crew let's leave aside the

00:42:41,990 --> 00:42:44,480
snake-oil set

00:42:42,920 --> 00:42:46,640
oil salesman right there are people out

00:42:44,480 --> 00:42:47,600
there selling security services who

00:42:46,640 --> 00:42:49,460
don't know what they're doing let's

00:42:47,600 --> 00:42:51,290
let's leave them aside because you know

00:42:49,460 --> 00:42:52,430
scammers gonna scam right let's assume

00:42:51,290 --> 00:42:53,780
we're talking about people who actually

00:42:52,430 --> 00:42:56,120
know it know what they're doing

00:42:53,780 --> 00:42:57,620
companies like Madison o that do that do

00:42:56,120 --> 00:43:02,450
security audits and do penetration

00:42:57,620 --> 00:43:04,340
testing those are valuable in some cases

00:43:02,450 --> 00:43:06,710
if you're getting ready to launch a

00:43:04,340 --> 00:43:08,660
product and you've got something fixed

00:43:06,710 --> 00:43:11,270
they can do a really good job because

00:43:08,660 --> 00:43:12,590
they can evaluate like a thing right you

00:43:11,270 --> 00:43:15,020
can think of it as like trying to break

00:43:12,590 --> 00:43:16,760
into a bank the banks not in the process

00:43:15,020 --> 00:43:19,070
of being constructed it's there and you

00:43:16,760 --> 00:43:20,690
can be audited it can be successfully

00:43:19,070 --> 00:43:22,100
looked at so if you're forgetting ready

00:43:20,690 --> 00:43:26,360
to launch a product you've got something

00:43:22,100 --> 00:43:27,560
concrete to be audited these firms these

00:43:26,360 --> 00:43:28,970
firms can be worth their weight in gold

00:43:27,560 --> 00:43:31,220
they can reveal stuff that you simply

00:43:28,970 --> 00:43:33,560
won't be able to won't be able to find

00:43:31,220 --> 00:43:36,370
internally unless you've got these these

00:43:33,560 --> 00:43:39,770
types of brains working for your company

00:43:36,370 --> 00:43:46,160
however if you ask one of these firms to

00:43:39,770 --> 00:43:48,410
audit software that's in process yeah I

00:43:46,160 --> 00:43:49,820
mean you'll get something and you'll get

00:43:48,410 --> 00:43:53,030
something that you might be able to fix

00:43:49,820 --> 00:43:54,380
but there's no telling that you'll you

00:43:53,030 --> 00:43:59,540
won't just you know introduce something

00:43:54,380 --> 00:44:01,280
later on so in and unfortunately most

00:43:59,540 --> 00:44:03,410
web products are the latter right like

00:44:01,280 --> 00:44:04,580
most of what we build isn't is it done

00:44:03,410 --> 00:44:06,730
you know when was the last time you

00:44:04,580 --> 00:44:10,760
wrote a website or like done with that

00:44:06,730 --> 00:44:13,640
so yeah unfortunately for most things

00:44:10,760 --> 00:44:14,870
that we develop if you were to engage

00:44:13,640 --> 00:44:16,790
one of these companies I would suggest

00:44:14,870 --> 00:44:18,350
you do it to have them help you come up

00:44:16,790 --> 00:44:20,060
with a security process

00:44:18,350 --> 00:44:22,700
on the field that's called an SD Alice

00:44:20,060 --> 00:44:24,350
secure development lifecycle and these

00:44:22,700 --> 00:44:25,730
can be really heavy weight or they can

00:44:24,350 --> 00:44:27,650
be pretty lightweight but they basically

00:44:25,730 --> 00:44:29,180
to give you some framework about

00:44:27,650 --> 00:44:31,160
thinking about your development process

00:44:29,180 --> 00:44:33,320
and how you apply it to security and for

00:44:31,160 --> 00:44:35,060
most web developers that's probably a

00:44:33,320 --> 00:44:42,800
better use of your your time and money

00:44:35,060 --> 00:44:45,860
is to look at it as a process hi thanks

00:44:42,800 --> 00:44:47,260
for a really clear overview of what's

00:44:45,860 --> 00:44:50,420
available and what we should be doing

00:44:47,260 --> 00:44:53,420
with regards to number four and your

00:44:50,420 --> 00:44:56,480
example with the application slash six

00:44:53,420 --> 00:44:59,510
four seven eight or whatever when it

00:44:56,480 --> 00:45:01,220
comes to designing web apps one of the

00:44:59,510 --> 00:45:04,490
thing that it things that is super nice

00:45:01,220 --> 00:45:07,400
is having really nice URLs that are you

00:45:04,490 --> 00:45:09,860
know meaningful so is it enough to add

00:45:07,400 --> 00:45:12,280
you know login required to those types

00:45:09,860 --> 00:45:15,080
of views or should we still be having

00:45:12,280 --> 00:45:17,180
URLs that are kind of obfuscated or have

00:45:15,080 --> 00:45:19,010
a hash or something in them it so it

00:45:17,180 --> 00:45:21,500
depends on your requirements right so if

00:45:19,010 --> 00:45:23,440
if you're only really concerned about

00:45:21,500 --> 00:45:25,790
being able to see these job applications

00:45:23,440 --> 00:45:28,670
for example then then log in required

00:45:25,790 --> 00:45:30,350
will be enough however that will still

00:45:28,670 --> 00:45:34,070
leak a little bit of information if I

00:45:30,350 --> 00:45:36,290
hit one two three four and get a 404 I

00:45:34,070 --> 00:45:39,110
know that that object doesn't exist if I

00:45:36,290 --> 00:45:42,320
get a 401 I know that it does but I'm

00:45:39,110 --> 00:45:44,150
not authorized so you have to determine

00:45:42,320 --> 00:45:46,730
whether that's you know whether that's

00:45:44,150 --> 00:45:50,420
important right like do you care if I

00:45:46,730 --> 00:45:53,300
can determine the shape of your you know

00:45:50,420 --> 00:45:54,980
of your application are you do you not

00:45:53,300 --> 00:45:56,240
want people to know how rapidly your

00:45:54,980 --> 00:45:57,830
applications are being filled for

00:45:56,240 --> 00:45:59,330
example so that's a that's an

00:45:57,830 --> 00:46:03,230
application level concern I would

00:45:59,330 --> 00:46:04,940
generally err on on the side of not

00:46:03,230 --> 00:46:07,460
leaking information sort of as a matter

00:46:04,940 --> 00:46:13,040
of principle but sometimes it's not that

00:46:07,460 --> 00:46:15,260
big a deal in practice do things like

00:46:13,040 --> 00:46:17,990
the same origin policy provide any

00:46:15,260 --> 00:46:20,770
meaningful protection against CSRF

00:46:17,990 --> 00:46:20,770
attacks No

00:46:21,789 --> 00:46:30,730
there is what's it called there's a new

00:46:26,510 --> 00:46:34,190
there's a new thing around restricting

00:46:30,730 --> 00:46:35,960
blanking on the name what no that's

00:46:34,190 --> 00:46:39,109
cross-origin stuff no there's a new pot

00:46:35,960 --> 00:46:40,490
there's a new thing about a basically

00:46:39,109 --> 00:46:42,470
has some headers you can set that

00:46:40,490 --> 00:46:43,910
restrict what the browser is allowed to

00:46:42,470 --> 00:46:46,670
execute in terms of whether it can

00:46:43,910 --> 00:46:49,519
execute Java JavaScript only from what's

00:46:46,670 --> 00:46:51,529
at CSP thank you yeah

00:46:49,519 --> 00:46:53,150
and there's this thing called CSP which

00:46:51,529 --> 00:46:54,950
basically lets you determine a policy

00:46:53,150 --> 00:46:57,140
for your page that says you can only

00:46:54,950 --> 00:46:59,059
execute JavaScript if it's served from

00:46:57,140 --> 00:47:01,130
this particular page and you can only

00:46:59,059 --> 00:47:02,990
load images from these domains and you

00:47:01,130 --> 00:47:05,329
can kind of more restrict what the

00:47:02,990 --> 00:47:09,829
browser does but this is um it's not

00:47:05,329 --> 00:47:11,690
widely supported just yet and it's new

00:47:09,829 --> 00:47:13,849
enough that I'd like it sounds like a

00:47:11,690 --> 00:47:16,160
really good idea but I don't know that

00:47:13,849 --> 00:47:17,359
it's you know we have it's new enough

00:47:16,160 --> 00:47:34,250
that we haven't found the problems with

00:47:17,359 --> 00:47:36,349
it yet how do you feel about doesn't

00:47:34,250 --> 00:47:38,960
only have one is that something that

00:47:36,349 --> 00:47:41,000
should be looked into so I think the

00:47:38,960 --> 00:47:43,789
general consensus on taint mode is that

00:47:41,000 --> 00:47:45,529
it doesn't really work in practice it

00:47:43,789 --> 00:47:47,599
was really there was a Perl taint mode

00:47:45,529 --> 00:47:49,990
many many years ago and I seem to recall

00:47:47,599 --> 00:47:54,980
it just being a massive pain in the butt

00:47:49,990 --> 00:47:58,329
that said I think that if I got to if I

00:47:54,980 --> 00:48:01,160
got this like right Django over again I

00:47:58,329 --> 00:48:02,480
would that I've seen a couple of

00:48:01,160 --> 00:48:06,410
frameworks that require you to

00:48:02,480 --> 00:48:07,910
explicitly type every every bit of data

00:48:06,410 --> 00:48:11,150
that comes from the browser so instead

00:48:07,910 --> 00:48:13,960
of saying you know request dot post key

00:48:11,150 --> 00:48:18,619
us a like request that post key as

00:48:13,960 --> 00:48:20,299
integer or as string or as you know

00:48:18,619 --> 00:48:22,640
username or something and you actually

00:48:20,299 --> 00:48:24,950
have validation that run in order to

00:48:22,640 --> 00:48:26,569
pull something out of request data you

00:48:24,950 --> 00:48:30,500
actually have to validate it at that

00:48:26,569 --> 00:48:32,569
point Simon came up with this idea

00:48:30,500 --> 00:48:33,840
Simon Williston came up this idea before

00:48:32,569 --> 00:48:35,970
Django is open-source

00:48:33,840 --> 00:48:37,560
we basically determined that it was too

00:48:35,970 --> 00:48:39,450
much working we were lazy and I wish we

00:48:37,560 --> 00:48:41,070
had made the other the other choice

00:48:39,450 --> 00:48:42,720
there so I think that that that's

00:48:41,070 --> 00:48:44,640
probably a good middle ground between

00:48:42,720 --> 00:48:46,740
tainting which can be really complicated

00:48:44,640 --> 00:48:49,710
and and sort of hard to deal with and

00:48:46,740 --> 00:48:52,250
and just like yeah go to town so that's

00:48:49,710 --> 00:48:55,110
what I'd like to do thank you yeah

00:48:52,250 --> 00:48:56,700
more questions about how um if you have

00:48:55,110 --> 00:48:59,040
a login on the site the whole story

00:48:56,700 --> 00:49:01,950
booster QR and there's a setting for

00:48:59,040 --> 00:49:05,670
only doing our sessions on secure sites

00:49:01,950 --> 00:49:07,950
is that a valid way so you can have them

00:49:05,670 --> 00:49:10,650
you know a fast you know public site

00:49:07,950 --> 00:49:11,790
we've the backend secure or is that too

00:49:10,650 --> 00:49:16,530
much risk that you're going to leak

00:49:11,790 --> 00:49:19,410
information and actually so it can be

00:49:16,530 --> 00:49:22,110
done right you you you know technically

00:49:19,410 --> 00:49:24,090
it is possible to have a site that is

00:49:22,110 --> 00:49:26,580
available say to anonymous users over

00:49:24,090 --> 00:49:30,150
HTTP and then make sure that once you're

00:49:26,580 --> 00:49:32,430
logged in everything's SSL only the odds

00:49:30,150 --> 00:49:35,430
the odds that an average developer will

00:49:32,430 --> 00:49:37,170
actually get that right no judgment on

00:49:35,430 --> 00:49:38,580
your intellect is based on historical

00:49:37,170 --> 00:49:41,190
date or historical data says you will

00:49:38,580 --> 00:49:43,710
fail right path past results do not

00:49:41,190 --> 00:49:45,840
predict future performance but yeah I

00:49:43,710 --> 00:49:48,720
mean it's possible but I I would still

00:49:45,840 --> 00:49:50,640
at this point processors are powerful

00:49:48,720 --> 00:49:51,810
enough that the added cost of doing SSL

00:49:50,640 --> 00:49:54,390
termination and just making everything

00:49:51,810 --> 00:49:55,950
SSL it feels to me I would just rather

00:49:54,390 --> 00:50:00,210
pay that cost and not worry about this

00:49:55,950 --> 00:50:03,360
stuff the other way around that could be

00:50:00,210 --> 00:50:04,680
a different domain for the SSL well yeah

00:50:03,360 --> 00:50:06,420
you could do a different domain but make

00:50:04,680 --> 00:50:08,580
sure it's actually a different TLD you

00:50:06,420 --> 00:50:10,800
can't do like secure dot and unsecure

00:50:08,580 --> 00:50:13,860
dot because now you have cookie issues

00:50:10,800 --> 00:50:14,910
and yeah okay we've all got time for two

00:50:13,860 --> 00:50:19,230
more questions so one more from each

00:50:14,910 --> 00:50:20,600
Mike you mentioned having your packages

00:50:19,230 --> 00:50:22,560
not be able to tell which are those

00:50:20,600 --> 00:50:24,480
security updates and which of them are

00:50:22,560 --> 00:50:26,610
and I was just wondering with the Python

00:50:24,480 --> 00:50:27,810
package index whether there's you have

00:50:26,610 --> 00:50:29,550
any thoughts about if there's anything

00:50:27,810 --> 00:50:34,160
that can be done there to say hey this

00:50:29,550 --> 00:50:36,839
is a security update yes I have but

00:50:34,160 --> 00:50:38,130
yeah so there's been a lot of people

00:50:36,839 --> 00:50:39,450
thinking about this there's a project

00:50:38,130 --> 00:50:42,869
right now called Ruby sack which is

00:50:39,450 --> 00:50:45,359
trying to provide structured metadata

00:50:42,869 --> 00:50:49,770
around ruby gems so that you can say you

00:50:45,359 --> 00:50:53,099
know you know rails 3 dot whatever

00:50:49,770 --> 00:50:56,309
whatever is a security release fixing of

00:50:53,099 --> 00:50:59,339
fixing CVE whatever which is severity

00:50:56,309 --> 00:51:00,450
medium and and the bug was in these

00:50:59,339 --> 00:51:03,750
versions like I'll actually a lot of

00:51:00,450 --> 00:51:06,240
metadata and I think that the there's

00:51:03,750 --> 00:51:07,800
this new dist utils that whatever the

00:51:06,240 --> 00:51:11,130
new version of the disk details metadata

00:51:07,800 --> 00:51:13,530
has an extensions format and I would

00:51:11,130 --> 00:51:15,180
would think that we could kind of bum

00:51:13,530 --> 00:51:16,800
that information into the dist utils

00:51:15,180 --> 00:51:18,599
metadata and then hopefully if pi PI

00:51:16,800 --> 00:51:20,670
exposes that metadata we can then start

00:51:18,599 --> 00:51:22,079
to get at it so I think that the the

00:51:20,670 --> 00:51:25,730
tooling is starting to fall into place

00:51:22,079 --> 00:51:25,730
around this area it's just not there yet

00:51:25,849 --> 00:51:31,829
thanks for the talk you mentioned the

00:51:28,740 --> 00:51:33,780
basis of pyramid was in skill by default

00:51:31,829 --> 00:51:36,240
which was really surprising oh sorry no

00:51:33,780 --> 00:51:39,119
I that was where I I must have misspoken

00:51:36,240 --> 00:51:41,040
um pyramid has a built in sessions tool

00:51:39,119 --> 00:51:43,589
which is not Beeker it's just built into

00:51:41,040 --> 00:51:46,049
pyramid and that's insecure okay yes

00:51:43,589 --> 00:51:47,760
very secure yogi yeah probably might

00:51:46,049 --> 00:51:49,500
misinterpret yeah yeah yeah that it was

00:51:47,760 --> 00:51:51,270
insecure by default was was surprising

00:51:49,500 --> 00:51:52,980
across the board pyramid seemed really

00:51:51,270 --> 00:51:54,030
but you did like the fact that you

00:51:52,980 --> 00:51:55,500
weren't familiar with it

00:51:54,030 --> 00:51:56,970
in your personal experience have you

00:51:55,500 --> 00:51:58,500
shied away from pyramid because of

00:51:56,970 --> 00:52:01,680
security considerations or is this just

00:51:58,500 --> 00:52:03,180
you don't know no no and I wouldn't I I

00:52:01,680 --> 00:52:04,740
don't want to give you the impressed I

00:52:03,180 --> 00:52:06,030
think all of these frameworks do a

00:52:04,740 --> 00:52:08,609
really good job the couple of places

00:52:06,030 --> 00:52:10,349
where I sort of called that pyramid for

00:52:08,609 --> 00:52:13,619
missing things are in the scheme of

00:52:10,349 --> 00:52:14,760
things pretty minor right I think that

00:52:13,619 --> 00:52:16,500
all these frameworks do a really good

00:52:14,760 --> 00:52:21,119
job and we all cross pollinate quite a

00:52:16,500 --> 00:52:23,010
bit you know I would I would not make

00:52:21,119 --> 00:52:25,109
security a distinction a reason to

00:52:23,010 --> 00:52:26,520
choose any framework that the only

00:52:25,109 --> 00:52:28,799
reason I don't do that much with pyramid

00:52:26,520 --> 00:52:30,660
is like I know Django really well I also

00:52:28,799 --> 00:52:32,010
like flask that's like it's like two

00:52:30,660 --> 00:52:33,930
frameworks deep in my mind I don't

00:52:32,010 --> 00:52:35,670
neither like wedge a third one in there

00:52:33,930 --> 00:52:37,470
but I think pyramid is grain and I would

00:52:35,670 --> 00:52:39,420
recommend anyone use it there's nothing

00:52:37,470 --> 00:52:41,560
that would stop people from using it

00:52:39,420 --> 00:52:43,990
thanks very much yeah

00:52:41,560 --> 00:52:45,610
okay we've run out of time so if you do

00:52:43,990 --> 00:52:48,730
have additional questions go and track

00:52:45,610 --> 00:52:49,750
Jacob down and get him to ask in the IVA

00:52:48,730 --> 00:52:51,610
lunch which we're about to break for now

00:52:49,750 --> 00:52:52,900
or over the course of the rest of the

00:52:51,610 --> 00:52:55,290
weekend so everyone thanks very much

00:52:52,900 --> 00:52:55,290

YouTube URL: https://www.youtube.com/watch?v=sra9x44lXgU


