Title: Buildbots Rollout!
Publication date: 2013-07-10
Playlist: Pycon Australia 2013
Description: 
	Mark Lakewood
http://2013.pycon-au.org/schedule/30015/view_talk
A Continuous Integration (CI) server is an essential tool for any developer, but with so many different servers out there its hard to choose which one to use. Buildbot has a pretty steep learning curve, but rewards with a very light footprint and amazing flexibility and configurability. In this talk I will walk through the build(ing) blocks and concepts required to put together a simple CI server based upon buildbot, and also sugges
Captions: 
	00:00:00,290 --> 00:00:05,940
okay welcome to the final session our

00:00:03,149 --> 00:00:08,160
next presenter is a senior developer at

00:00:05,940 --> 00:00:09,929
sign IQ a leading supply of shelf edge

00:00:08,160 --> 00:00:11,759
labels in the retail environment he

00:00:09,929 --> 00:00:13,679
loves Python for simplicity and restful

00:00:11,759 --> 00:00:17,390
api for their beauty to teach us about

00:00:13,679 --> 00:00:22,529
build bots please welcome mark lakewood

00:00:17,390 --> 00:00:25,830
hi everyone so just a few questions to

00:00:22,529 --> 00:00:29,010
start up with so who doesn't use

00:00:25,830 --> 00:00:31,859
continuous integration at the moment I'm

00:00:29,010 --> 00:00:36,300
sorry that you don't get to use it it's

00:00:31,859 --> 00:00:41,690
really really really good and also who

00:00:36,300 --> 00:00:44,399
has tried using and installing buildbot

00:00:41,690 --> 00:00:47,670
right I'm sorry for you guys as well

00:00:44,399 --> 00:00:50,640
you've had to go through that and also

00:00:47,670 --> 00:00:53,460
who came here because they like

00:00:50,640 --> 00:00:57,030
transformers and they got the reference

00:00:53,460 --> 00:01:00,120
in the title right yeah I'm sorry about

00:00:57,030 --> 00:01:02,430
that as well that was a shameless kind

00:01:00,120 --> 00:01:05,010
of reference for me I have no idea about

00:01:02,430 --> 00:01:09,180
transformers but I've tried to put a few

00:01:05,010 --> 00:01:11,220
references throughout so so see if you

00:01:09,180 --> 00:01:14,030
can spot them alright cool

00:01:11,220 --> 00:01:18,420
Who am I I'm mark Lakewood developer

00:01:14,030 --> 00:01:20,100
under plank on Twitter if you've got

00:01:18,420 --> 00:01:22,530
questions or whatever just gives you on

00:01:20,100 --> 00:01:26,280
Twitter I currently work at Sonic you in

00:01:22,530 --> 00:01:28,799
Perth as we've said we're an industry

00:01:26,280 --> 00:01:30,810
leader in self shellfish marketing it

00:01:28,799 --> 00:01:32,790
basically means the little tickets when

00:01:30,810 --> 00:01:34,860
you're going to Woolworths on that tell

00:01:32,790 --> 00:01:37,670
you the price we make the software that

00:01:34,860 --> 00:01:41,310
prints those which is a little bit crazy

00:01:37,670 --> 00:01:44,869
this talk and also a full kind of

00:01:41,310 --> 00:01:49,820
template version of a build bot config

00:01:44,869 --> 00:01:51,930
is all on github at that URL and

00:01:49,820 --> 00:01:53,610
potentially if you've got a laptop and

00:01:51,930 --> 00:01:55,649
you've want to have a look at it while

00:01:53,610 --> 00:01:57,899
it's going on it might make it a little

00:01:55,649 --> 00:02:01,619
bit easier to follow the code snippets

00:01:57,899 --> 00:02:03,329
and stuff and as you know it's on github

00:02:01,619 --> 00:02:05,399
it's there for you guys to use so if you

00:02:03,329 --> 00:02:09,179
need a kind of getting started template

00:02:05,399 --> 00:02:12,510
of how a bill bot config probably should

00:02:09,179 --> 00:02:16,629
look like then don't have a look at

00:02:12,510 --> 00:02:18,910
cool so she needs a continuous

00:02:16,629 --> 00:02:21,640
integration server she is a developer

00:02:18,910 --> 00:02:25,239
he's worked out that he's you know needs

00:02:21,640 --> 00:02:26,230
a continuous integration server why bill

00:02:25,239 --> 00:02:27,970
bot

00:02:26,230 --> 00:02:31,030
one of the advantages of built bot is

00:02:27,970 --> 00:02:33,250
unlike something like Jenkins which is

00:02:31,030 --> 00:02:35,830
like a jar file that you run and then

00:02:33,250 --> 00:02:39,870
you configure in it's a server but

00:02:35,830 --> 00:02:44,459
what's kind of more like a library so

00:02:39,870 --> 00:02:48,220
you you you know you import all of the

00:02:44,459 --> 00:02:52,209
building shion's and classes and put it

00:02:48,220 --> 00:02:54,099
together build it possibly and you get a

00:02:52,209 --> 00:02:56,290
continuous integration server it's also

00:02:54,099 --> 00:02:58,930
just a twisted server so if you're used

00:02:56,290 --> 00:03:01,150
to twisted that makes it really easy to

00:02:58,930 --> 00:03:03,280
kind of know your way around it

00:03:01,150 --> 00:03:06,610
and it's really really configurable

00:03:03,280 --> 00:03:09,730
because it's all just Python files like

00:03:06,610 --> 00:03:13,090
it's just Python functions and stuff why

00:03:09,730 --> 00:03:17,130
wouldn't you choose buildbot well we've

00:03:13,090 --> 00:03:20,769
configurability comes no structure

00:03:17,130 --> 00:03:22,299
generally speaking so because it is just

00:03:20,769 --> 00:03:24,970
a bunch of functions that you put

00:03:22,299 --> 00:03:28,980
together and wire it all together and

00:03:24,970 --> 00:03:31,739
there's not any kind of structure like

00:03:28,980 --> 00:03:34,630
jenkins hats or something like that

00:03:31,739 --> 00:03:36,670
that's kind of a good thing and it's

00:03:34,630 --> 00:03:38,349
also a really really bad thing and the

00:03:36,670 --> 00:03:39,790
problem is that everybody kind of

00:03:38,349 --> 00:03:42,760
configures they build bought a different

00:03:39,790 --> 00:03:44,200
way and generally the public versions of

00:03:42,760 --> 00:03:47,019
bill block configurations like the

00:03:44,200 --> 00:03:50,290
django public one it's very specific

00:03:47,019 --> 00:03:53,260
specific for django and is awfully

00:03:50,290 --> 00:03:56,019
complicated if you're basically running

00:03:53,260 --> 00:04:00,340
your own product tests on it because

00:03:56,019 --> 00:04:03,730
django needs to run on everything so

00:04:00,340 --> 00:04:07,870
yeah also the documentation is really

00:04:03,730 --> 00:04:11,380
really good for like at an api level

00:04:07,870 --> 00:04:13,750
it's not very good at kind of

00:04:11,380 --> 00:04:16,180
foundational concepts and there's a

00:04:13,750 --> 00:04:18,519
couple of foundational concepts in build

00:04:16,180 --> 00:04:20,260
bot that you need to know otherwise all

00:04:18,519 --> 00:04:23,020
the api documentation in the world

00:04:20,260 --> 00:04:24,420
doesn't help you at all because you have

00:04:23,020 --> 00:04:26,330
no idea

00:04:24,420 --> 00:04:29,280
actually put it together which if

00:04:26,330 --> 00:04:32,420
anybody that's tried and failed was like

00:04:29,280 --> 00:04:33,660
me that was the thing that I was missing

00:04:32,420 --> 00:04:37,470
cool

00:04:33,660 --> 00:04:39,870
so yes you can't just simply build a

00:04:37,470 --> 00:04:42,960
robot so this is kind of what bill bot

00:04:39,870 --> 00:04:45,840
looks like um this is from zero point

00:04:42,960 --> 00:04:48,210
seven point five and I couldn't actually

00:04:45,840 --> 00:04:50,490
find it in a later version buildbot is

00:04:48,210 --> 00:04:54,270
now up to zero point eight point seven I

00:04:50,490 --> 00:04:55,920
think but it's pretty much exactly the

00:04:54,270 --> 00:04:58,290
same you have this concept of a build

00:04:55,920 --> 00:05:02,880
master that get chain gets changes from

00:04:58,290 --> 00:05:06,570
a version control system it can push out

00:05:02,880 --> 00:05:07,980
status of builds to browse a email IRC

00:05:06,570 --> 00:05:13,860
whatever and it has a bunch of build

00:05:07,980 --> 00:05:16,200
slaves that it tells to do things so

00:05:13,860 --> 00:05:19,560
these is installation tips from sheer

00:05:16,200 --> 00:05:24,390
that he hit along the way obviously use

00:05:19,560 --> 00:05:26,640
a virtual in if you're not use one has

00:05:24,390 --> 00:05:29,310
the latest version of buildbot as I said

00:05:26,640 --> 00:05:33,600
I think it's 0.8 0.7 has a little bit of

00:05:29,310 --> 00:05:37,860
a quirk which is that it requires SQL

00:05:33,600 --> 00:05:40,080
alchemy and SQL alchemy migrate but it

00:05:37,860 --> 00:05:43,470
installs by default through a people

00:05:40,080 --> 00:05:47,130
install SQL alchemy 8 and SQL alchemy

00:05:43,470 --> 00:05:50,970
migrate doesn't work with SQL alchemy 8

00:05:47,130 --> 00:05:55,860
so you basically just need to kind of go

00:05:50,970 --> 00:05:57,180
back a version and yeah I'm not sure

00:05:55,860 --> 00:06:01,920
what they're doing about that but it's

00:05:57,180 --> 00:06:03,600
it's a fairly minor thing cool so this

00:06:01,920 --> 00:06:06,990
is the this is kind of the file

00:06:03,600 --> 00:06:08,850
structure I I set up and I like having

00:06:06,990 --> 00:06:11,960
things in separate files unlike having

00:06:08,850 --> 00:06:14,610
separate concepts in separate files and

00:06:11,960 --> 00:06:17,480
it makes a lot clearer some of these are

00:06:14,610 --> 00:06:20,670
literally like two or three lines long

00:06:17,480 --> 00:06:22,830
but it means they're all in separate

00:06:20,670 --> 00:06:26,460
modules and you know all that kind of

00:06:22,830 --> 00:06:29,490
stuff this whole structure is on that on

00:06:26,460 --> 00:06:31,620
that github repo and it's fully filled

00:06:29,490 --> 00:06:33,420
out so you can use it and extend it and

00:06:31,620 --> 00:06:34,659
build on it and do whatever the hell you

00:06:33,420 --> 00:06:37,930
want with it

00:06:34,659 --> 00:06:40,539
and these so the builders build steps

00:06:37,930 --> 00:06:42,099
change source schedulers slaves and

00:06:40,539 --> 00:06:43,659
status all kind of map to those

00:06:42,099 --> 00:06:46,719
foundational concepts that I were

00:06:43,659 --> 00:06:48,580
talking it was talking about and so as

00:06:46,719 --> 00:06:50,620
we go through basically I'm just going

00:06:48,580 --> 00:06:52,360
to explain what each of those ones are

00:06:50,620 --> 00:06:54,099
and then put it all together at the end

00:06:52,360 --> 00:06:57,159
and you should have enough to kind of

00:06:54,099 --> 00:07:03,699
understand what you need to do to get

00:06:57,159 --> 00:07:06,280
the buildbot working cool so you say

00:07:03,699 --> 00:07:12,669
transform it down the bottom it's a

00:07:06,280 --> 00:07:15,430
robot right so it's a transformer so

00:07:12,669 --> 00:07:18,759
build steps these are probably what you

00:07:15,430 --> 00:07:20,319
think of when you think of continuous

00:07:18,759 --> 00:07:24,699
integration server these are the things

00:07:20,319 --> 00:07:28,210
that it does so that's tests pilant you

00:07:24,699 --> 00:07:32,349
do have automated tests right Pyland

00:07:28,210 --> 00:07:33,909
static analysis coverage jeaious lint

00:07:32,349 --> 00:07:36,099
which if you've got any JavaScript

00:07:33,909 --> 00:07:41,379
please dear God Ron jslint on it

00:07:36,099 --> 00:07:44,199
whenever you can and pretty much you're

00:07:41,379 --> 00:07:45,580
just looking at like buildbot has this

00:07:44,199 --> 00:07:48,729
thing called a shell command which is

00:07:45,580 --> 00:07:50,110
literally just executing some kind of

00:07:48,729 --> 00:07:52,509
shell command it has some other fancy

00:07:50,110 --> 00:07:54,190
things in there so for example pilant

00:07:52,509 --> 00:07:56,139
has its own class that you can run which

00:07:54,190 --> 00:07:59,199
does nice highlighting and stuff like

00:07:56,139 --> 00:08:00,610
that of the error output but essentially

00:07:59,199 --> 00:08:01,990
what you need to do is you need to get a

00:08:00,610 --> 00:08:05,490
list of the commands you want to run

00:08:01,990 --> 00:08:08,319
every single time a commit happens and

00:08:05,490 --> 00:08:10,529
put those into these shell commands and

00:08:08,319 --> 00:08:13,930
it's that kind of Python exactly the

00:08:10,529 --> 00:08:19,120
thing where you get a command and split

00:08:13,930 --> 00:08:23,319
into a list and pass it in so typical

00:08:19,120 --> 00:08:25,900
steps you need a source step which is a

00:08:23,319 --> 00:08:28,360
particular type of build step which you

00:08:25,900 --> 00:08:30,190
know a class that you instantiate are to

00:08:28,360 --> 00:08:31,659
check out your code because you kinda

00:08:30,190 --> 00:08:35,949
need your code to run these kind of

00:08:31,659 --> 00:08:37,870
things clean up your resources so you

00:08:35,949 --> 00:08:40,120
know for every build you're gonna build

00:08:37,870 --> 00:08:42,550
resources you want to build it into a

00:08:40,120 --> 00:08:45,730
virtual and envy you want to install all

00:08:42,550 --> 00:08:47,960
of your packages and you know do other

00:08:45,730 --> 00:08:50,540
things potentially and

00:08:47,960 --> 00:08:52,850
and you need to then clean it up ready

00:08:50,540 --> 00:08:54,260
for the next build or just clean it up

00:08:52,850 --> 00:08:57,470
at the start and build it at the start

00:08:54,260 --> 00:08:59,960
whichever order you feel like doing run

00:08:57,470 --> 00:09:02,600
your automated tests run your pilant run

00:08:59,960 --> 00:09:04,670
your JavaScript tests and then run your

00:09:02,600 --> 00:09:09,070
jslint so that's a typical thing that

00:09:04,670 --> 00:09:13,220
you can do anything you want with it

00:09:09,070 --> 00:09:15,500
so builders these are the kind of

00:09:13,220 --> 00:09:16,970
different type different builds that are

00:09:15,500 --> 00:09:19,420
that a buildbot

00:09:16,970 --> 00:09:21,530
master can run so these could

00:09:19,420 --> 00:09:23,360
potentially be completely different

00:09:21,530 --> 00:09:26,480
software stacks you can have a buildbot

00:09:23,360 --> 00:09:28,340
master build all kinds of different

00:09:26,480 --> 00:09:29,660
software if you've got six or seven

00:09:28,340 --> 00:09:31,670
different products you could have one

00:09:29,660 --> 00:09:33,410
buildbot master running all of the

00:09:31,670 --> 00:09:35,870
different ones and they could be

00:09:33,410 --> 00:09:39,440
different builders they could also

00:09:35,870 --> 00:09:41,720
potentially be just different different

00:09:39,440 --> 00:09:44,420
branches of your repository so you have

00:09:41,720 --> 00:09:48,050
a sprint branch you have a development

00:09:44,420 --> 00:09:49,940
branch you have a master branch in git

00:09:48,050 --> 00:09:52,340
or whatever and each one of these maps

00:09:49,940 --> 00:09:57,020
to one of those so when a commit comes

00:09:52,340 --> 00:10:01,390
in on one of those this builder gets run

00:09:57,020 --> 00:10:04,280
that's this code there is basically the

00:10:01,390 --> 00:10:06,470
thing to make a builder so you give it a

00:10:04,280 --> 00:10:10,490
name you tell it which slave you want to

00:10:06,470 --> 00:10:14,060
run it on you tell it which directory in

00:10:10,490 --> 00:10:18,220
the slave you want to run it on and you

00:10:14,060 --> 00:10:22,370
get the build steps from the previous

00:10:18,220 --> 00:10:24,320
slide or the previous file so get build

00:10:22,370 --> 00:10:27,920
steps is actually just a function that

00:10:24,320 --> 00:10:29,240
returns all of the build steps and they

00:10:27,920 --> 00:10:31,160
get passed the Builder and the Builder

00:10:29,240 --> 00:10:40,060
goes oh okay I'm gonna go off and build

00:10:31,160 --> 00:10:43,790
that on that slave change sources so

00:10:40,060 --> 00:10:48,560
it's kind of self-explanatory but it's

00:10:43,790 --> 00:10:51,470
it's which defines which repository will

00:10:48,560 --> 00:10:53,810
trigger the build so in this case any

00:10:51,470 --> 00:10:54,540
change that happens to build bot rollout

00:10:53,810 --> 00:11:00,090
will

00:10:54,540 --> 00:11:03,720
which is the github repo will cause a

00:11:00,090 --> 00:11:05,760
change event basically which then

00:11:03,720 --> 00:11:10,140
filters through to the builders and all

00:11:05,760 --> 00:11:12,420
the way through and it supports all the

00:11:10,140 --> 00:11:14,850
VCS all of them

00:11:12,420 --> 00:11:18,120
this is git but does SVN and everything

00:11:14,850 --> 00:11:21,270
else cool

00:11:18,120 --> 00:11:24,090
so a scheduler so you've got your you've

00:11:21,270 --> 00:11:28,830
got your change that's come in you've

00:11:24,090 --> 00:11:30,120
allocated it to a builder and you've got

00:11:28,830 --> 00:11:33,420
a set of build steps that the Builder

00:11:30,120 --> 00:11:36,450
needs to run what this scheduler

00:11:33,420 --> 00:11:38,730
basically does is go it joins a change

00:11:36,450 --> 00:11:41,940
that comes in to the builders and

00:11:38,730 --> 00:11:45,630
therefore the build steps so in this

00:11:41,940 --> 00:11:49,040
case we're just building a single branch

00:11:45,630 --> 00:11:51,540
and it's the master you know the and the

00:11:49,040 --> 00:11:53,940
tree stable timer so the tree stable

00:11:51,540 --> 00:11:55,440
timer is there so if you do a single

00:11:53,940 --> 00:11:56,880
change and it triggers a build and then

00:11:55,440 --> 00:11:58,200
you go all and really need to change

00:11:56,880 --> 00:11:59,460
that and you change one more and one

00:11:58,200 --> 00:12:00,930
more and one more then you've got three

00:11:59,460 --> 00:12:03,840
kids coming in with three potential

00:12:00,930 --> 00:12:05,940
builds and banked up the tree stable

00:12:03,840 --> 00:12:09,090
timer and that happens reasonably often

00:12:05,940 --> 00:12:10,110
actually the tree stable timer basically

00:12:09,090 --> 00:12:13,650
just goes well I'm just gonna wait for

00:12:10,110 --> 00:12:15,510
sixty seconds until you have finished

00:12:13,650 --> 00:12:19,650
and everything's settled down and then

00:12:15,510 --> 00:12:22,100
I'll do a build and you can actually

00:12:19,650 --> 00:12:25,110
have this scheduled more than one build

00:12:22,100 --> 00:12:27,920
builder so you could go off and build a

00:12:25,110 --> 00:12:27,920
whole bunch of different stuff

00:12:28,970 --> 00:12:36,120
okay so slaves do all the work don't

00:12:32,040 --> 00:12:38,070
they always so this is just a separate

00:12:36,120 --> 00:12:40,740
twisted daemon running so this can be on

00:12:38,070 --> 00:12:43,350
the same machine an hour buildbot at

00:12:40,740 --> 00:12:47,160
work at where I work at soniku we have

00:12:43,350 --> 00:12:48,210
it all on the same machine because we

00:12:47,160 --> 00:12:51,630
don't need to put it anywhere else

00:12:48,210 --> 00:12:53,490
basically and it's just a separate

00:12:51,630 --> 00:12:58,950
little twisted demon that kind of

00:12:53,490 --> 00:13:02,970
registers in this case it the past as a

00:12:58,950 --> 00:13:05,970
password called pass and it says I'm

00:13:02,970 --> 00:13:08,060
slave now you could have slave one slave

00:13:05,970 --> 00:13:10,280
to say three and say four and that's how

00:13:08,060 --> 00:13:14,150
you connect the builders with the slaves

00:13:10,280 --> 00:13:17,450
based on the name slave name and

00:13:14,150 --> 00:13:19,940
password for authentication and this is

00:13:17,450 --> 00:13:22,850
configured on the slave in the build

00:13:19,940 --> 00:13:24,830
back file so if you haven't used twisted

00:13:22,850 --> 00:13:27,770
before tack files are kind of like the

00:13:24,830 --> 00:13:29,960
way they configure things and that's all

00:13:27,770 --> 00:13:34,970
kind of created when you create the

00:13:29,960 --> 00:13:37,880
slave status this is what you really

00:13:34,970 --> 00:13:40,060
want to know because otherwise you don't

00:13:37,880 --> 00:13:45,050
know what the hell you build BOTS doing

00:13:40,060 --> 00:13:48,130
the top line is a web page and the

00:13:45,050 --> 00:13:50,930
bottom line of the bottom section is

00:13:48,130 --> 00:13:53,000
male notifier so whenever anything

00:13:50,930 --> 00:13:55,120
happens basically it just sends an email

00:13:53,000 --> 00:13:59,810
out notification to all of those things

00:13:55,120 --> 00:14:06,200
and can be notified by email JSON API or

00:13:59,810 --> 00:14:08,000
web based thing website and you know

00:14:06,200 --> 00:14:09,680
it's really important to kind of bubble

00:14:08,000 --> 00:14:11,270
this information up as much as you can

00:14:09,680 --> 00:14:14,240
to all the development teams because

00:14:11,270 --> 00:14:15,470
everybody needs to know what's going on

00:14:14,240 --> 00:14:16,580
because otherwise you could just check

00:14:15,470 --> 00:14:19,550
something in and everything could fail

00:14:16,580 --> 00:14:22,640
and then you like well you know it's not

00:14:19,550 --> 00:14:26,570
much point then this is the default

00:14:22,640 --> 00:14:29,770
front end for buildbot and so when you

00:14:26,570 --> 00:14:31,970
do the previous web notification Oh

00:14:29,770 --> 00:14:34,040
notification this is what you get

00:14:31,970 --> 00:14:35,540
there's also a JSON API you can have a

00:14:34,040 --> 00:14:38,570
look up in the right-hand corner and

00:14:35,540 --> 00:14:40,970
that's really really good for triggering

00:14:38,570 --> 00:14:43,970
things and gathering data and all kinds

00:14:40,970 --> 00:14:47,690
of stuff so in this case I check

00:14:43,970 --> 00:14:50,390
something in on the rollout build and

00:14:47,690 --> 00:14:52,130
all of those tests passed and we're all

00:14:50,390 --> 00:14:55,940
good and there's lots of different ways

00:14:52,130 --> 00:14:57,800
you can view that data and do all kinds

00:14:55,940 --> 00:15:01,130
of stuff so this is where it really

00:14:57,800 --> 00:15:04,490
comes all together so you have a master

00:15:01,130 --> 00:15:07,130
dot CFG file in your build bot server

00:15:04,490 --> 00:15:11,420
directory that you create using google

00:15:07,130 --> 00:15:13,730
bot create and it's just a dictionary

00:15:11,420 --> 00:15:17,510
that's all that requires a dictionary

00:15:13,730 --> 00:15:19,760
with these keys in it and you pass all

00:15:17,510 --> 00:15:21,740
of the data back from the other

00:15:19,760 --> 00:15:23,630
all of the objects and lists of objects

00:15:21,740 --> 00:15:28,820
and stuff back from all of the other

00:15:23,630 --> 00:15:30,800
files so the slaves is just all of the

00:15:28,820 --> 00:15:32,480
slaves schedulers and the schedule as we

00:15:30,800 --> 00:15:34,670
defined the builders are all the

00:15:32,480 --> 00:15:38,390
builders we defined statuses or the

00:15:34,670 --> 00:15:40,970
status what we're the slave port number

00:15:38,390 --> 00:15:43,370
is where the slaves connect to change

00:15:40,970 --> 00:15:47,120
sources change source title buildbot URL

00:15:43,370 --> 00:15:49,100
and the DV URL you can put that in a

00:15:47,120 --> 00:15:51,200
Postgres database if you like it's not a

00:15:49,100 --> 00:15:53,270
hell of a lot of data if you really want

00:15:51,200 --> 00:15:55,130
to kind of do a lot of analysis about

00:15:53,270 --> 00:15:56,990
test failures and all of that kind of

00:15:55,130 --> 00:15:59,900
stuff it might be helpful otherwise it

00:15:56,990 --> 00:16:07,960
just all the build information just sits

00:15:59,900 --> 00:16:11,330
in a less secure SQLite database cool so

00:16:07,960 --> 00:16:12,890
to create the two directories that have

00:16:11,330 --> 00:16:18,170
all of these files in it

00:16:12,890 --> 00:16:20,030
they're the master you just do build bot

00:16:18,170 --> 00:16:22,880
create and give it a directory name and

00:16:20,030 --> 00:16:26,990
lay down all the files it needs and then

00:16:22,880 --> 00:16:29,330
you and the and where you want to put

00:16:26,990 --> 00:16:33,460
the build slave you just again put that

00:16:29,330 --> 00:16:37,910
in another directory and then if you

00:16:33,460 --> 00:16:39,350
pull down write copy all that

00:16:37,910 --> 00:16:42,260
configuration files into the master

00:16:39,350 --> 00:16:45,560
directory so that big list of files that

00:16:42,260 --> 00:16:47,150
is unlike is on the github repo and that

00:16:45,560 --> 00:16:51,140
I mentioned at the start you just copy

00:16:47,150 --> 00:16:53,000
all of that in to roll-out master and so

00:16:51,140 --> 00:16:55,220
the master dot CFG file needs to be in

00:16:53,000 --> 00:16:57,430
the root of that folder and there's a

00:16:55,220 --> 00:17:01,060
few configuration things you need to do

00:16:57,430 --> 00:17:04,220
to make the buildbot tack point at that

00:17:01,060 --> 00:17:07,420
but once you've done that you start it

00:17:04,220 --> 00:17:10,250
up and then start the build slave and

00:17:07,420 --> 00:17:13,510
troubleshoot because there probably will

00:17:10,250 --> 00:17:13,510
be some troubleshooting along the way

00:17:15,730 --> 00:17:23,900
there we go

00:17:17,230 --> 00:17:25,910
cool so the idea behind this talk wasn't

00:17:23,900 --> 00:17:28,520
necessarily to tell you exactly what you

00:17:25,910 --> 00:17:30,040
needed to do to set up a build bot or

00:17:28,520 --> 00:17:32,230
give you all the code

00:17:30,040 --> 00:17:35,770
all the codis on the github repo but the

00:17:32,230 --> 00:17:38,620
idea was to kind of place out those kind

00:17:35,770 --> 00:17:40,090
of foundational concepts that you kind

00:17:38,620 --> 00:17:42,490
of need to get in your head and then

00:17:40,090 --> 00:17:45,250
that becomes really easy to set

00:17:42,490 --> 00:17:48,820
everything else up so it's got lots of

00:17:45,250 --> 00:17:51,220
advanced features as well you can do an

00:17:48,820 --> 00:17:53,020
IRC but it's got latent build slov so

00:17:51,220 --> 00:17:53,560
what that means is you can actually get

00:17:53,020 --> 00:17:58,090
buildbot

00:17:53,560 --> 00:17:59,830
to spin up build slaves on ec2 and which

00:17:58,090 --> 00:18:02,380
if you've got a really big testing

00:17:59,830 --> 00:18:04,630
environment or you know you need to do

00:18:02,380 --> 00:18:07,630
parallel builds and stuff like that it's

00:18:04,630 --> 00:18:09,520
really helpful you can request the

00:18:07,630 --> 00:18:11,710
status of build through the JSON API so

00:18:09,520 --> 00:18:13,810
for example in your configuration

00:18:11,710 --> 00:18:16,600
management or deployment process you

00:18:13,810 --> 00:18:18,460
could actually request and find out if

00:18:16,600 --> 00:18:23,830
the last build passed and if it didn't

00:18:18,460 --> 00:18:25,270
don't deploy if did go ahead and the

00:18:23,830 --> 00:18:27,460
best thing about the whole thing is it's

00:18:25,270 --> 00:18:29,110
all in Python it is really just a bunch

00:18:27,460 --> 00:18:33,700
of paths and files so you can do

00:18:29,110 --> 00:18:38,980
anything you want to do in it in Python

00:18:33,700 --> 00:18:42,030
and it's completely configurable cool

00:18:38,980 --> 00:18:42,030
any questions

00:18:54,380 --> 00:18:59,850
it seems like it's very Python oriented

00:18:57,930 --> 00:19:01,800
which is great I have other things that

00:18:59,850 --> 00:19:05,010
I need to build like C and a derp and

00:19:01,800 --> 00:19:07,320
Java mmm works well for that too yeah

00:19:05,010 --> 00:19:10,920
and as I say the the the to do all of

00:19:07,320 --> 00:19:13,590
that your it's in the build steps that

00:19:10,920 --> 00:19:16,320
that concept there and the build steps

00:19:13,590 --> 00:19:18,750
are really just shell commands so if you

00:19:16,320 --> 00:19:20,760
can build whatever your if you can do

00:19:18,750 --> 00:19:24,150
whatever you want to do on a command

00:19:20,760 --> 00:19:25,950
line you can trigger it through this I

00:19:24,150 --> 00:19:28,980
don't know if you've kind of used

00:19:25,950 --> 00:19:32,070
sub-process or any of the kind of

00:19:28,980 --> 00:19:33,960
standard Python standard library Python

00:19:32,070 --> 00:19:36,390
functions that kind of run commands on a

00:19:33,960 --> 00:19:38,850
command line it's pretty much exactly

00:19:36,390 --> 00:19:41,010
the same way you do that you can pass

00:19:38,850 --> 00:19:43,080
kind of environment variables in for

00:19:41,010 --> 00:19:44,910
that command and do all of that kind of

00:19:43,080 --> 00:19:46,710
stuff so you know it's kind of

00:19:44,910 --> 00:19:48,810
preparation for this probably what you

00:19:46,710 --> 00:19:51,840
want to do is go get the commands you

00:19:48,810 --> 00:19:55,410
would run for your full kind of build

00:19:51,840 --> 00:19:57,210
whatever that is and write them down and

00:19:55,410 --> 00:20:02,990
then you can just convert them straight

00:19:57,210 --> 00:20:05,790
into into the the commands in there and

00:20:02,990 --> 00:20:08,130
as I said it's Kylie makes a lot more

00:20:05,790 --> 00:20:12,870
sense looking at the source code that's

00:20:08,130 --> 00:20:14,790
in github but I couldn't fit that I

00:20:12,870 --> 00:20:17,430
couldn't fit all the code in these

00:20:14,790 --> 00:20:20,550
slides so I tried to kind of give

00:20:17,430 --> 00:20:22,500
examples of what it was but all of the

00:20:20,550 --> 00:20:26,040
code is in github and it's fully working

00:20:22,500 --> 00:20:27,510
you know kind of test environment so

00:20:26,040 --> 00:20:29,490
have a look at those and it'll probably

00:20:27,510 --> 00:20:31,710
make a lot more sense about you know

00:20:29,490 --> 00:20:37,340
what you can do in it and once you've

00:20:31,710 --> 00:20:37,340
seen those oh yeah sure

00:20:37,590 --> 00:20:42,240
the build slaves can I add them

00:20:40,080 --> 00:20:43,620
dynamically or that's a static thing you

00:20:42,240 --> 00:20:47,600
think you shut down the master and

00:20:43,620 --> 00:20:50,460
started up again for adding new slaves I

00:20:47,600 --> 00:20:51,660
think by default the way that it was

00:20:50,460 --> 00:20:57,240
certainly the way that I've configured

00:20:51,660 --> 00:21:00,060
it it's static although saying that it

00:20:57,240 --> 00:21:02,760
is all just kind of Python so there

00:21:00,060 --> 00:21:05,880
might be a way to do it as I said that

00:21:02,760 --> 00:21:07,289
the API documentation is pretty

00:21:05,880 --> 00:21:09,960
extensive

00:21:07,289 --> 00:21:14,779
it's just very specific so you need to

00:21:09,960 --> 00:21:17,130
kind of know what you're looking for so

00:21:14,779 --> 00:21:19,139
but saying that starting and stopping

00:21:17,130 --> 00:21:21,440
the bill but slave buildbot master and

00:21:19,139 --> 00:21:27,659
build build but slave is true commands

00:21:21,440 --> 00:21:34,289
so it's pretty well self-contained so

00:21:27,659 --> 00:21:35,610
that was I don't know sorry all right

00:21:34,289 --> 00:21:37,860
there you go you can just very very

00:21:35,610 --> 00:21:43,950
reread the config file and and it'll

00:21:37,860 --> 00:21:47,279
it'll it'll bring new ones in I really

00:21:43,950 --> 00:21:50,340
like the the Travis CI configuration

00:21:47,279 --> 00:21:51,840
file it makes everything you know it's

00:21:50,340 --> 00:21:54,149
very very simple to understand

00:21:51,840 --> 00:21:57,840
is anyone built something that would

00:21:54,149 --> 00:22:03,990
allow you to use the Travis UML file

00:21:57,840 --> 00:22:06,090
with Bill bot not that I know of it

00:22:03,990 --> 00:22:08,340
probably wouldn't be that that difficult

00:22:06,090 --> 00:22:11,309
I don't actually I've I haven't used

00:22:08,340 --> 00:22:13,649
Travis CI so I'm not sure what the

00:22:11,309 --> 00:22:18,179
configuration file looks like I believe

00:22:13,649 --> 00:22:20,100
it's a yam all file is that right yeah

00:22:18,179 --> 00:22:23,370
I think one of the differences with

00:22:20,100 --> 00:22:25,080
Travis II is that it uses virtual

00:22:23,370 --> 00:22:26,519
environments so you always virtual

00:22:25,080 --> 00:22:29,789
machines it always starts with a kind of

00:22:26,519 --> 00:22:31,230
a blank virtual machine so yeah I don't

00:22:29,789 --> 00:22:33,840
know if that would fit with help bill

00:22:31,230 --> 00:22:35,880
bot does things what Bill bot does have

00:22:33,840 --> 00:22:38,130
the concept of lightning slaves so you

00:22:35,880 --> 00:22:42,450
can basically do that do the same thing

00:22:38,130 --> 00:22:45,029
you can you know put any ec2 credentials

00:22:42,450 --> 00:22:48,570
and it'll spin up late and slaves when

00:22:45,029 --> 00:22:51,299
it needs to there are just virtual

00:22:48,570 --> 00:22:53,970
machines and and I think it also has

00:22:51,299 --> 00:22:56,010
hooks into like live vert and and things

00:22:53,970 --> 00:22:58,470
like that which gives you some pretty

00:22:56,010 --> 00:23:02,460
good flexibility so I'm not sure about

00:22:58,470 --> 00:23:04,350
the configuration file but then again in

00:23:02,460 --> 00:23:06,360
my experience though the amount of

00:23:04,350 --> 00:23:09,059
commands you need to do is probably not

00:23:06,360 --> 00:23:10,590
that great though if you are kind of at

00:23:09,059 --> 00:23:12,419
getting a lot of stuff then you would

00:23:10,590 --> 00:23:14,549
probably need to do that in there though

00:23:12,419 --> 00:23:16,679
saying that you should probably be in

00:23:14,549 --> 00:23:19,090
your deployment script which could be

00:23:16,679 --> 00:23:30,460
part of your bill bot setup

00:23:19,090 --> 00:23:33,820
so you know it's the testing all based

00:23:30,460 --> 00:23:35,860
on return values from the commands that

00:23:33,820 --> 00:23:39,820
are run or is it based on the output or

00:23:35,860 --> 00:23:42,549
how does it so the shell command is is

00:23:39,820 --> 00:23:45,340
like return zero you're all good non

00:23:42,549 --> 00:23:47,529
return zero something broke

00:23:45,340 --> 00:23:50,049
but there are as I said there's like I

00:23:47,529 --> 00:23:52,629
specialized there's a there's quite a

00:23:50,049 --> 00:23:54,999
few specialized shell commands not shell

00:23:52,629 --> 00:23:57,940
commands build steps that you can run so

00:23:54,999 --> 00:24:01,330
for example pilant will there's a

00:23:57,940 --> 00:24:03,249
special pilant build step that all kind

00:24:01,330 --> 00:24:07,480
of pars there is a little bit benefit

00:24:03,249 --> 00:24:08,769
for pilot and I would assume there's

00:24:07,480 --> 00:24:11,619
quite a few other ones that I haven't

00:24:08,769 --> 00:24:13,179
looked at into that myself because you

00:24:11,619 --> 00:24:15,639
know we have six things we need to do

00:24:13,179 --> 00:24:19,149
and if they don't return zero then it's

00:24:15,639 --> 00:24:20,590
broken so and also the other advantage

00:24:19,149 --> 00:24:22,509
of having something like that is that

00:24:20,590 --> 00:24:24,009
then those kind of build commands

00:24:22,509 --> 00:24:25,419
directly map to something you're going

00:24:24,009 --> 00:24:27,429
to do in the terminal anyway and if

00:24:25,419 --> 00:24:30,490
that's a non zero then something's

00:24:27,429 --> 00:24:32,860
failed so just to follow up does it save

00:24:30,490 --> 00:24:36,490
the output from the builds of the test

00:24:32,860 --> 00:24:39,850
yes yeah it does so our that's what that

00:24:36,490 --> 00:24:41,559
the SQLite file is so it puts it in

00:24:39,850 --> 00:24:44,679
there by default but as I said that can

00:24:41,559 --> 00:24:47,860
be any any database and it does SQL

00:24:44,679 --> 00:24:52,200
migrate sq alchemy migrate and all of

00:24:47,860 --> 00:24:52,200
that kind of stuff so yeah

00:24:56,330 --> 00:25:02,570
I've got a billboard installation I'm

00:24:59,610 --> 00:25:05,549
not sure what version it is but I

00:25:02,570 --> 00:25:08,840
cheated and pulled the configuration

00:25:05,549 --> 00:25:11,780
files across from a previous machine and

00:25:08,840 --> 00:25:14,429
eventually got half going well it goes

00:25:11,780 --> 00:25:16,860
actually goes double it doesn't matter

00:25:14,429 --> 00:25:21,270
where I commit which branch I commit to

00:25:16,860 --> 00:25:26,330
it always kicks off a build would your

00:25:21,270 --> 00:25:30,630
would your configuration files on github

00:25:26,330 --> 00:25:37,250
would it be safe enough to just replace

00:25:30,630 --> 00:25:37,250
those and start again potentially

00:25:37,820 --> 00:25:44,100
configuration to are using git or SVN

00:25:40,590 --> 00:25:47,970
those for you SVN right we've just moved

00:25:44,100 --> 00:25:51,780
from so that configuration that I've got

00:25:47,970 --> 00:25:54,630
on github is for is forget but we were

00:25:51,780 --> 00:25:57,090
just on SVN and I did have a function

00:25:54,630 --> 00:25:58,799
that was a bit of a hack that worked out

00:25:57,090 --> 00:26:01,890
which branch then built and match it to

00:25:58,799 --> 00:26:04,890
the right thing so if you want I can I

00:26:01,890 --> 00:26:07,650
can send you that code that's that

00:26:04,890 --> 00:26:10,350
portion and you can have a look at it

00:26:07,650 --> 00:26:11,549
and see where it needs to go and so yeah

00:26:10,350 --> 00:26:13,500
come and talk to me afterwards and I'll

00:26:11,549 --> 00:26:16,070
lift and I'll yeah I've heard of that

00:26:13,500 --> 00:26:16,070
thank you

00:26:18,500 --> 00:26:23,970
and I've following up on the Travis

00:26:20,730 --> 00:26:28,080
question regardless of the format Travis

00:26:23,970 --> 00:26:30,809
config is in my repository can I store

00:26:28,080 --> 00:26:32,549
all the build what config in the

00:26:30,809 --> 00:26:39,419
repository I want to build

00:26:32,549 --> 00:26:41,030
thank you yeah so well it depends what

00:26:39,419 --> 00:26:44,250
you want to do with that configuration

00:26:41,030 --> 00:26:46,950
so Bill bot is a server so it's it's a

00:26:44,250 --> 00:26:49,049
separate deployment we do have our bill

00:26:46,950 --> 00:26:50,820
bot configuration in our source code

00:26:49,049 --> 00:26:51,299
repository because that's the best place

00:26:50,820 --> 00:26:54,750
to do it

00:26:51,299 --> 00:26:59,250
that's not going to necessarily well I

00:26:54,750 --> 00:27:02,880
doubt it would be able to well you could

00:26:59,250 --> 00:27:05,190
do a reload and a remap and you could do

00:27:02,880 --> 00:27:06,450
some you might be able to do some stuff

00:27:05,190 --> 00:27:10,830
that

00:27:06,450 --> 00:27:13,950
at checkout time it might configure your

00:27:10,830 --> 00:27:17,490
buildbot configuration from the one that

00:27:13,950 --> 00:27:21,300
you just checked out I think that's

00:27:17,490 --> 00:27:23,760
probably more work than is useful I

00:27:21,300 --> 00:27:25,800
would see Bill BOTS as a kind of a

00:27:23,760 --> 00:27:27,510
deployment and when you need to update

00:27:25,800 --> 00:27:36,330
that deployment you update that

00:27:27,510 --> 00:27:39,450
deployment okay

00:27:36,330 --> 00:27:40,890
we run Jenkins and one thing that

00:27:39,450 --> 00:27:42,900
impressed me with Jenkins was it was so

00:27:40,890 --> 00:27:44,900
easy to get going yep

00:27:42,900 --> 00:27:48,750
so I guess there's two questions one is

00:27:44,900 --> 00:27:51,810
when if ever would you want to start

00:27:48,750 --> 00:27:55,500
with build bottom and when would you

00:27:51,810 --> 00:27:59,130
want to replace something like Jenkins

00:27:55,500 --> 00:28:04,890
with build pod mm-hmm cool it's a good

00:27:59,130 --> 00:28:07,080
question you know I think sometimes

00:28:04,890 --> 00:28:09,780
choices in which piece of software you

00:28:07,080 --> 00:28:12,510
use come down to a preference or some

00:28:09,780 --> 00:28:14,250
guy just making a decision or some

00:28:12,510 --> 00:28:17,880
person sorry just making your decision

00:28:14,250 --> 00:28:21,660
at some point we chose bill bot because

00:28:17,880 --> 00:28:22,920
it's very lightweight we know exactly

00:28:21,660 --> 00:28:25,970
what's going on

00:28:22,920 --> 00:28:28,380
it's very explicit about what it's doing

00:28:25,970 --> 00:28:30,360
well it's not that's very explicit about

00:28:28,380 --> 00:28:34,230
but you can be very explicit about what

00:28:30,360 --> 00:28:36,390
it's doing I've used Jenkins once or

00:28:34,230 --> 00:28:41,310
twice before but not as much as I've

00:28:36,390 --> 00:28:42,780
used bill bot I think in most cases if

00:28:41,310 --> 00:28:44,370
you if you knew what you were doing with

00:28:42,780 --> 00:28:45,900
Bill Bolling you knew you what what you

00:28:44,370 --> 00:28:49,770
were doing with Jenkins it would be a

00:28:45,900 --> 00:28:52,320
50/50 if you needed something that was

00:28:49,770 --> 00:28:56,100
Buber configurable like you have

00:28:52,320 --> 00:28:57,810
something potentially like Jango that is

00:28:56,100 --> 00:28:59,390
running on a whole bunch of different

00:28:57,810 --> 00:29:01,770
stuff and you have to do some weird

00:28:59,390 --> 00:29:05,160
configurations and stuff like that and

00:29:01,770 --> 00:29:06,870
you are a Python developer then bill bot

00:29:05,160 --> 00:29:09,560
would give you a lot of configurability

00:29:06,870 --> 00:29:12,240
that you wouldn't be able to get from

00:29:09,560 --> 00:29:14,670
that I don't know that you can get from

00:29:12,240 --> 00:29:16,200
Jenkins that's not to say you can't get

00:29:14,670 --> 00:29:16,930
it from Jenkins I just haven't used it

00:29:16,200 --> 00:29:20,710
enough

00:29:16,930 --> 00:29:25,090
so were there any more questions we've

00:29:20,710 --> 00:29:27,790
got probably time for one more so if

00:29:25,090 --> 00:29:29,530
you've got a successful build can you

00:29:27,790 --> 00:29:31,960
then trigger to like push to a

00:29:29,530 --> 00:29:33,510
deployment or a staging server and is

00:29:31,960 --> 00:29:36,400
that a good idea

00:29:33,510 --> 00:29:40,120
yeah well it's Python all the way down

00:29:36,400 --> 00:29:41,620
so if you can push from Python like if

00:29:40,120 --> 00:29:43,780
you've got a fab file or something like

00:29:41,620 --> 00:29:47,260
that or even you've just got a command

00:29:43,780 --> 00:29:50,950
you can you can totally do that is it a

00:29:47,260 --> 00:29:52,090
good idea well having continuous

00:29:50,950 --> 00:29:54,550
integration and continuous deployment

00:29:52,090 --> 00:29:56,530
are two different things I've done

00:29:54,550 --> 00:29:59,050
continuous into all I do practice

00:29:56,530 --> 00:30:02,620
continuing integration I don't yet

00:29:59,050 --> 00:30:04,720
practice continuous deployment so I

00:30:02,620 --> 00:30:05,920
don't have I don't have the answer on

00:30:04,720 --> 00:30:08,560
that there are a lot of successful

00:30:05,920 --> 00:30:12,660
companies that have a lot of developers

00:30:08,560 --> 00:30:16,150
that do do continuous deployment Netflix

00:30:12,660 --> 00:30:19,090
Etsy you know all of these big companies

00:30:16,150 --> 00:30:22,150
I don't have the experience to to say

00:30:19,090 --> 00:30:25,740
yes or no for us we prefer to have the

00:30:22,150 --> 00:30:28,210
control over what we deploy when because

00:30:25,740 --> 00:30:29,530
you know potentially we could commit

00:30:28,210 --> 00:30:33,160
something in all the builds paths and a

00:30:29,530 --> 00:30:35,800
feature isn't actually finished so yeah

00:30:33,160 --> 00:30:37,600
right to say thank you it's um quite a

00:30:35,800 --> 00:30:39,490
lot in Australian coffee and the bug and

00:30:37,600 --> 00:30:43,170
just join me in thanking mark again for

00:30:39,490 --> 00:30:43,170

YouTube URL: https://www.youtube.com/watch?v=7HLtPKU0-vE


