Title: Testing for Graceful Failure with Vaurien and Marteau
Publication date: 2013-07-11
Playlist: Pycon Australia 2013
Description: 
	Ryan Kelly
http://2013.pycon-au.org/schedule/30056/view_talk
So you've built an awesome webapp, put it through its paces, and assured yourself that it does what it's supposed to do.  Great!  Now how does it behave when things start to go wrong?

This talk will demonstrate how the Mozilla Services team tests for failure scenarios in our web services, focusing on two key python-based tools:  Marteau, a web-based frontend for easily running load-tests and analyzing the results, and Vaurien, a mis
Captions: 
	00:00:01,010 --> 00:00:06,089
now we have Ryan Kelly the speaker is

00:00:04,319 --> 00:00:07,740
one of the certified evil geniuses of

00:00:06,089 --> 00:00:09,840
the Australian Australian Python

00:00:07,740 --> 00:00:11,910
community he's currently working on

00:00:09,840 --> 00:00:14,460
building high-performance web ad is for

00:00:11,910 --> 00:00:16,170
the Mozilla services team and he's going

00:00:14,460 --> 00:00:21,890
to talk to us about testing for graceful

00:00:16,170 --> 00:00:24,750
failure please welcome Ryan Kelly cool

00:00:21,890 --> 00:00:27,859
place for coming out everyone yes I am

00:00:24,750 --> 00:00:30,750
here to talk about testing now it is

00:00:27,859 --> 00:00:32,610
2013 so I hope I don't need to stand up

00:00:30,750 --> 00:00:36,320
here and try and tell you all about the

00:00:32,610 --> 00:00:39,480
virtues of testing your code right

00:00:36,320 --> 00:00:41,790
testing and automated testing one of the

00:00:39,480 --> 00:00:43,739
best and possibly one of the only ways

00:00:41,790 --> 00:00:46,590
as professionals that we can build

00:00:43,739 --> 00:00:48,510
software that works reliably but the

00:00:46,590 --> 00:00:50,730
funny thing about testing is that no

00:00:48,510 --> 00:00:54,329
matter how much of it you do it's never

00:00:50,730 --> 00:00:56,309
quiet enough all right you can have huge

00:00:54,329 --> 00:00:58,620
volumes of unit tests and a hundred

00:00:56,309 --> 00:01:00,239
percent branch coverage and a great

00:00:58,620 --> 00:01:02,370
chunk of integration and functional

00:01:00,239 --> 00:01:03,660
tests and you put your cold out there in

00:01:02,370 --> 00:01:05,820
the world where it has to interact with

00:01:03,660 --> 00:01:09,090
other things and stuff will still go

00:01:05,820 --> 00:01:11,970
wrong so I'm kind of here to talk about

00:01:09,090 --> 00:01:13,830
how we can poke at the things that go

00:01:11,970 --> 00:01:17,040
wrong and figure out how our code will

00:01:13,830 --> 00:01:18,000
cope when they inevitably do so I'm

00:01:17,040 --> 00:01:20,430
going to assume that we're actually

00:01:18,000 --> 00:01:23,189
starting from a very happy place I

00:01:20,430 --> 00:01:25,080
assume you have a web application which

00:01:23,189 --> 00:01:27,090
is what I do and you're actually

00:01:25,080 --> 00:01:29,070
confident that this thing works you know

00:01:27,090 --> 00:01:31,829
you have tests it does what it's

00:01:29,070 --> 00:01:34,079
supposed to do and you've also figured

00:01:31,829 --> 00:01:35,670
out how you're going to deploy this

00:01:34,079 --> 00:01:37,020
application into the world how you're

00:01:35,670 --> 00:01:39,900
going to check on it to make sure it's

00:01:37,020 --> 00:01:42,450
still behaving as you intend now for a

00:01:39,900 --> 00:01:44,549
for a web project this is a very happy

00:01:42,450 --> 00:01:46,170
place to be like a lot of a lot of

00:01:44,549 --> 00:01:50,430
projects won't even get to this point

00:01:46,170 --> 00:01:52,020
yeah nonetheless if your application is

00:01:50,430 --> 00:01:54,840
really good and you make the front page

00:01:52,020 --> 00:01:57,000
of reddit or hacker news or something or

00:01:54,840 --> 00:01:58,710
if you're being cool and deploying into

00:01:57,000 --> 00:02:00,869
the cloud and your cloud vendor has some

00:01:58,710 --> 00:02:02,729
sort of network outage your database

00:02:00,869 --> 00:02:05,189
goes down it starts dropping packets to

00:02:02,729 --> 00:02:07,489
you know to your medications and stuff

00:02:05,189 --> 00:02:09,479
like that you're going to take it hit

00:02:07,489 --> 00:02:11,069
your application is going to start

00:02:09,479 --> 00:02:13,469
failing

00:02:11,069 --> 00:02:15,510
now the question is how gracefully can

00:02:13,469 --> 00:02:17,040
you cope with these kinds of failures if

00:02:15,510 --> 00:02:18,870
you're a really super important code

00:02:17,040 --> 00:02:21,090
maybe you want to be sure that your code

00:02:18,870 --> 00:02:23,040
can stay standing and keep operating

00:02:21,090 --> 00:02:25,469
even in the face of failures in its

00:02:23,040 --> 00:02:28,170
environment if it's less important maybe

00:02:25,469 --> 00:02:29,760
you just want to check on that it can do

00:02:28,170 --> 00:02:32,790
as good a job as it can and maybe take a

00:02:29,760 --> 00:02:35,010
small hit rather than a big hit so I

00:02:32,790 --> 00:02:37,620
come to this field from the Mozilla

00:02:35,010 --> 00:02:39,180
services team where I work with a lot of

00:02:37,620 --> 00:02:41,700
people who know a great deal more about

00:02:39,180 --> 00:02:43,319
this stuff than me we're responsible for

00:02:41,700 --> 00:02:46,859
running things like the servers behind

00:02:43,319 --> 00:02:48,780
Firefox Sync the marketplace app that's

00:02:46,859 --> 00:02:50,879
going to support the new firefox phone

00:02:48,780 --> 00:02:53,400
and making sure that these services will

00:02:50,879 --> 00:02:54,870
stay standing in the event of failure so

00:02:53,400 --> 00:02:56,669
I'm going to give you a little bit of a

00:02:54,870 --> 00:02:58,290
demo of some of the processes and

00:02:56,669 --> 00:03:00,359
tooling that we've built up around doing

00:02:58,290 --> 00:03:02,159
this it's not a tutorial if you're

00:03:00,359 --> 00:03:03,719
interested in this stuff in more detail

00:03:02,159 --> 00:03:04,949
you'll have to read the docs or I'll

00:03:03,719 --> 00:03:07,019
come and find me afterwards and we'll

00:03:04,949 --> 00:03:08,760
chat but I want to give you an idea of

00:03:07,019 --> 00:03:11,129
the sort of failures I'm interested in

00:03:08,760 --> 00:03:13,049
this is a very simplified diagram of the

00:03:11,129 --> 00:03:16,079
firefox sync server right it's a little

00:03:13,049 --> 00:03:18,269
wsgi application it takes some data in

00:03:16,079 --> 00:03:21,419
from from Firefox and it dumps it into

00:03:18,269 --> 00:03:23,310
mysql because we have a fairly large

00:03:21,419 --> 00:03:25,169
user base it actually does some app

00:03:23,310 --> 00:03:27,030
level sharding right each user is

00:03:25,169 --> 00:03:28,769
assigned to a particular database and

00:03:27,030 --> 00:03:31,799
the web app is responsible for sending

00:03:28,769 --> 00:03:33,629
data to the correct place if one of

00:03:31,799 --> 00:03:35,790
these databases starts having a problem

00:03:33,629 --> 00:03:37,859
or the network goes down and packets

00:03:35,790 --> 00:03:40,349
aren't getting through now according to

00:03:37,859 --> 00:03:42,329
this diagram what should happen is that

00:03:40,349 --> 00:03:44,310
users destined for this particular

00:03:42,329 --> 00:03:45,900
unhealthy database will get an error

00:03:44,310 --> 00:03:48,209
well they might turn out or something

00:03:45,900 --> 00:03:49,799
users destined for these other databases

00:03:48,209 --> 00:03:51,209
they should be fine right there's no

00:03:49,799 --> 00:03:53,340
problem now we should be able to keep

00:03:51,209 --> 00:03:56,099
going even in the event of this partial

00:03:53,340 --> 00:03:57,689
failure unfortunately the real world is

00:03:56,099 --> 00:03:59,849
never as simple as the diagrams would

00:03:57,689 --> 00:04:02,040
have you believe and what actually

00:03:59,849 --> 00:04:03,989
happens is that your web server has this

00:04:02,040 --> 00:04:05,969
little pool of worker processes inside

00:04:03,989 --> 00:04:07,590
it every time one of these worker

00:04:05,969 --> 00:04:09,599
processes goes to talk to the database

00:04:07,590 --> 00:04:12,209
that's having problems it doesn't come

00:04:09,599 --> 00:04:13,859
back if you have high enough traffic

00:04:12,209 --> 00:04:15,180
going on all at once and these requests

00:04:13,859 --> 00:04:18,389
are taking long enough on the backend

00:04:15,180 --> 00:04:21,060
you start discovering that all of your

00:04:18,389 --> 00:04:22,260
workers are disappearing and eventually

00:04:21,060 --> 00:04:24,070
the whole system comes crashing down

00:04:22,260 --> 00:04:27,550
this actually happened to our

00:04:24,070 --> 00:04:29,110
to our servers that's bad I wouldn't

00:04:27,550 --> 00:04:30,820
call that a graceful failure we haven't

00:04:29,110 --> 00:04:36,390
done the best that we could do under the

00:04:30,820 --> 00:04:36,390
circumstances the thing is though like

00:05:11,460 --> 00:05:16,330
as I say is actually stand up your

00:05:14,020 --> 00:05:18,210
system in a state that approximates what

00:05:16,330 --> 00:05:21,070
it's going to look like in production

00:05:18,210 --> 00:05:22,660
you deploy it in a state that it kind of

00:05:21,070 --> 00:05:24,460
looks like in production put it under

00:05:22,660 --> 00:05:26,800
the kinds of stresses and loads that

00:05:24,460 --> 00:05:28,680
it's going to be experiencing in

00:05:26,800 --> 00:05:30,730
production and then try and break stuff

00:05:28,680 --> 00:05:32,140
make the environment around your

00:05:30,730 --> 00:05:34,390
application fail let's see what happens

00:05:32,140 --> 00:05:37,900
see if you can figure out how it's going

00:05:34,390 --> 00:05:42,340
to handle those failures the rest is up

00:05:37,900 --> 00:05:44,320
to you so step one deploy it and this is

00:05:42,340 --> 00:05:46,480
going to depend heavily on you know your

00:05:44,320 --> 00:05:51,040
own setup you might be deploying into

00:05:46,480 --> 00:05:52,780
the cloud for Firefox Sync we have some

00:05:51,040 --> 00:05:54,460
actual physical staging hardware that we

00:05:52,780 --> 00:05:55,930
deploy our stuff on for the purpose of

00:05:54,460 --> 00:05:57,430
this talk I've stood up a little demo

00:05:55,930 --> 00:05:59,620
server and i'll just show you real quick

00:05:57,430 --> 00:06:01,030
how it how it looks using requests

00:05:59,620 --> 00:06:04,390
because everybody should be using

00:06:01,030 --> 00:06:07,420
requests and i'll put in my actual user

00:06:04,390 --> 00:06:10,330
name and password here so be kind don't

00:06:07,420 --> 00:06:14,830
hack me so I have you know pike on a

00:06:10,330 --> 00:06:16,150
unit services that mozilla com i can go

00:06:14,830 --> 00:06:17,920
ahead and have a look at the data that

00:06:16,150 --> 00:06:20,980
I've got synced there so I have a couple

00:06:17,920 --> 00:06:23,410
of sinks collections I've got my history

00:06:20,980 --> 00:06:26,740
my bookmarks and so forth you know I can

00:06:23,410 --> 00:06:28,510
make requests to this system and get it

00:06:26,740 --> 00:06:30,340
all of my sync data that's our starting

00:06:28,510 --> 00:06:33,820
point we have a system standing up that

00:06:30,340 --> 00:06:37,940
works now what are we going to do

00:06:33,820 --> 00:06:39,910
let's stress it out our go-to tool for

00:06:37,940 --> 00:06:42,320
this has been a tool called funk load

00:06:39,910 --> 00:06:44,240
which is basically a functional and load

00:06:42,320 --> 00:06:46,520
testing tool and has some nice

00:06:44,240 --> 00:06:47,840
facilities for writing your test it has

00:06:46,520 --> 00:06:50,540
some nice facilities for generating

00:06:47,840 --> 00:06:51,770
reports it's a little bit clunky to be

00:06:50,540 --> 00:06:53,600
honest which you might get a sense of

00:06:51,770 --> 00:06:55,280
when I show you in a minute but it gets

00:06:53,600 --> 00:06:57,500
the job done with a minimum of fuss

00:06:55,280 --> 00:06:59,150
which is why I'm happy to kind of show

00:06:57,500 --> 00:07:01,880
it and recommend that as a good place to

00:06:59,150 --> 00:07:03,740
start it looks a little bit like this so

00:07:01,880 --> 00:07:07,220
the idea is that you create something

00:07:03,740 --> 00:07:09,110
that looks a lot like a unit test but it

00:07:07,220 --> 00:07:12,650
inherits from this funk load test case

00:07:09,110 --> 00:07:15,530
class you do the usual routine of

00:07:12,650 --> 00:07:17,060
setting up and establishing you know

00:07:15,530 --> 00:07:19,850
some sort of common parameters for each

00:07:17,060 --> 00:07:21,950
test here we go get the URL and then

00:07:19,850 --> 00:07:24,530
basically you write a test case that

00:07:21,950 --> 00:07:26,720
exercises your server in whatever way

00:07:24,530 --> 00:07:28,250
you know you you're likely to see in

00:07:26,720 --> 00:07:31,610
production so I'm going to do the same

00:07:28,250 --> 00:07:32,870
thing that I did in request before but a

00:07:31,610 --> 00:07:34,820
little bit more of a mostly because

00:07:32,870 --> 00:07:36,590
Funko has its own special way of

00:07:34,820 --> 00:07:40,850
specifying how you should interact with

00:07:36,590 --> 00:07:42,890
a Web API so I have to say this is the

00:07:40,850 --> 00:07:45,500
return code I'm expecting and I'm going

00:07:42,890 --> 00:07:47,000
to make this get requests I'm going to

00:07:45,500 --> 00:07:49,850
poke around in the response to that and

00:07:47,000 --> 00:07:51,680
make sure it's okay i'm going to pick in

00:07:49,850 --> 00:07:53,450
this case a random collection out of

00:07:51,680 --> 00:07:55,130
what i got back and i'm going to make

00:07:53,450 --> 00:07:56,690
another request so you can imagine me

00:07:55,130 --> 00:07:58,850
filling this out with a much more furro

00:07:56,690 --> 00:08:01,550
simulation of the kind of user behavior

00:07:58,850 --> 00:08:03,770
that we actually expect in production as

00:08:01,550 --> 00:08:05,330
you can tell i do a four year degree in

00:08:03,770 --> 00:08:13,580
speed typing at the University of

00:08:05,330 --> 00:08:15,169
Melbourne this is fake yeah now i'm

00:08:13,580 --> 00:08:17,240
going to configure basically how fun

00:08:15,169 --> 00:08:19,220
global run this thing so i give it some

00:08:17,240 --> 00:08:21,410
metadata i give it the URL of the server

00:08:19,220 --> 00:08:23,750
I want to test I say right I want three

00:08:21,410 --> 00:08:25,550
load test cycles ten concurrent users 20

00:08:23,750 --> 00:08:27,440
concurrent users 30 concurrent users I

00:08:25,550 --> 00:08:29,630
want each cycle to run for a whopping

00:08:27,440 --> 00:08:32,390
five seconds because this is a

00:08:29,630 --> 00:08:34,099
demonstration and not a real test and I

00:08:32,390 --> 00:08:36,289
can configure a bunch of stuff about how

00:08:34,099 --> 00:08:39,039
it does its login and so forth and

00:08:36,289 --> 00:08:41,839
that's it that little test I can now run

00:08:39,039 --> 00:08:44,590
with FL run bench and I can put my demo

00:08:41,839 --> 00:08:47,890
server under some serious load

00:08:44,590 --> 00:08:49,510
like so in the real world for the

00:08:47,890 --> 00:08:51,490
firefox sync server for example we would

00:08:49,510 --> 00:08:53,200
run a set of load like this for 24 hours

00:08:51,490 --> 00:08:55,780
before pushing anything else of

00:08:53,200 --> 00:08:57,460
production so you can uncover kinds of

00:08:55,780 --> 00:08:59,860
effects that only show up you know I've

00:08:57,460 --> 00:09:01,750
run out of open file descriptors you

00:08:59,860 --> 00:09:03,040
know things like that that only show up

00:09:01,750 --> 00:09:05,380
after you've been running for a long

00:09:03,040 --> 00:09:07,030
time but what this is doing is basically

00:09:05,380 --> 00:09:08,440
playing that test case over and over

00:09:07,030 --> 00:09:10,360
again in a bunch of concurrent threads

00:09:08,440 --> 00:09:12,250
it's collecting all of the statistics

00:09:10,360 --> 00:09:20,860
and I can ask it to build it up into a

00:09:12,250 --> 00:09:23,590
nice little report okay so and I'll get

00:09:20,860 --> 00:09:26,350
something like this funk load bench

00:09:23,590 --> 00:09:27,940
report for park on a you and we can

00:09:26,350 --> 00:09:29,770
already see I haven't actually done

00:09:27,940 --> 00:09:31,630
anything Bad's my application but it's

00:09:29,770 --> 00:09:34,270
not looking very healthy once i get up

00:09:31,630 --> 00:09:36,550
around 50 concurrent users that's okay

00:09:34,270 --> 00:09:37,810
it's only a demo server but this will

00:09:36,550 --> 00:09:39,660
tell us things like oh this is the

00:09:37,810 --> 00:09:42,280
number of successful tests per second

00:09:39,660 --> 00:09:43,780
this is the number of successful pages

00:09:42,280 --> 00:09:46,600
per second which actually looks quite

00:09:43,780 --> 00:09:49,450
good this is the latency per request

00:09:46,600 --> 00:09:51,190
which actually looks quite bad so even

00:09:49,450 --> 00:09:52,960
here I can see actually my application

00:09:51,190 --> 00:09:55,480
is not handling this cloud very well

00:09:52,960 --> 00:09:56,920
like the latency is going right up this

00:09:55,480 --> 00:09:59,230
could be an indication of some sort of

00:09:56,920 --> 00:10:00,970
problem and in fact it's an indication

00:09:59,230 --> 00:10:03,130
of the sort of problem I showed you in

00:10:00,970 --> 00:10:05,140
the firefox sync server where latency

00:10:03,130 --> 00:10:08,020
gets too big your workers start to get

00:10:05,140 --> 00:10:09,520
packed up and bad things happen ideally

00:10:08,020 --> 00:10:12,160
you'd be combining this with some sort

00:10:09,520 --> 00:10:14,080
of server-side monitoring now but this

00:10:12,160 --> 00:10:15,550
this is a good starting point for for

00:10:14,080 --> 00:10:18,880
seeing how your application behaves

00:10:15,550 --> 00:10:20,110
under load funcle' it has a bunch of

00:10:18,880 --> 00:10:21,880
other cool stuff like it can run

00:10:20,110 --> 00:10:24,250
distributed tests from multiple nodes

00:10:21,880 --> 00:10:27,370
and generate differential reports all

00:10:24,250 --> 00:10:29,590
this stuff but it's kind of clunky like

00:10:27,370 --> 00:10:31,420
the language is very verbose you have to

00:10:29,590 --> 00:10:32,890
run it from the command line and

00:10:31,420 --> 00:10:35,010
automatically manage a bunch of things

00:10:32,890 --> 00:10:37,660
so we created this thing called motto

00:10:35,010 --> 00:10:40,690
motto is basically a hosted web

00:10:37,660 --> 00:10:42,490
front-end for running your load tests it

00:10:40,690 --> 00:10:44,320
uses what I just showed you in funk load

00:10:42,490 --> 00:10:46,030
on the back end but it's got a nice

00:10:44,320 --> 00:10:48,580
interface it does things like

00:10:46,030 --> 00:10:50,680
automatically spinning up worker nodes

00:10:48,580 --> 00:10:53,800
in AWS so you don't have to manage a

00:10:50,680 --> 00:10:55,480
farm of low generating nodes it has a

00:10:53,800 --> 00:10:56,770
job queue so that you don't have six

00:10:55,480 --> 00:10:58,410
people trying to run a different load

00:10:56,770 --> 00:11:01,000
test on one system at the same

00:10:58,410 --> 00:11:03,040
it can generate reports and save them

00:11:01,000 --> 00:11:04,660
for you and so forth it's French for

00:11:03,040 --> 00:11:06,160
hammer because the guys that are kind of

00:11:04,660 --> 00:11:09,310
responsible for these projects are all

00:11:06,160 --> 00:11:12,460
French so it's cool they have an easy

00:11:09,310 --> 00:11:14,770
job making names for things has anyone

00:11:12,460 --> 00:11:17,200
used the continuous integration service

00:11:14,770 --> 00:11:19,000
Travis there's a couple field trip

00:11:17,200 --> 00:11:20,920
Travis is this really great hosted

00:11:19,000 --> 00:11:22,810
continuous integration service where you

00:11:20,920 --> 00:11:25,480
basically create a dot Travis file in

00:11:22,810 --> 00:11:27,940
your github repo and it uses that to

00:11:25,480 --> 00:11:29,230
detect where your unit tests figure out

00:11:27,940 --> 00:11:31,240
how to run them and run them for you

00:11:29,230 --> 00:11:33,730
automatically my toe is basically the

00:11:31,240 --> 00:11:35,380
same idea applied to your load tests so

00:11:33,730 --> 00:11:37,530
you create this dot my todo young will

00:11:35,380 --> 00:11:40,330
file you fill it out with some

00:11:37,530 --> 00:11:42,280
information like this is my name this is

00:11:40,330 --> 00:11:45,340
where the tests live this is the

00:11:42,280 --> 00:11:47,380
particular test I want you to run I want

00:11:45,340 --> 00:11:49,030
you to run it concurrently on five nodes

00:11:47,380 --> 00:11:51,190
so that I can generate a little bit more

00:11:49,030 --> 00:11:55,630
load and when it's all done I want you

00:11:51,190 --> 00:12:00,010
to email the report to me here commute

00:11:55,630 --> 00:12:06,160
that into your github repo go into the

00:12:00,010 --> 00:12:08,050
fancy hopefully loads and I took the

00:12:06,160 --> 00:12:09,430
clever move of caching this locally but

00:12:08,050 --> 00:12:12,640
it still wants to load a bunch of fonts

00:12:09,430 --> 00:12:14,650
and stuff go on to your hosted web you

00:12:12,640 --> 00:12:18,490
know load testing service put in the URL

00:12:14,650 --> 00:12:20,980
of your repo here and hit go and it'll

00:12:18,490 --> 00:12:22,150
spin up and run your load if you want to

00:12:20,980 --> 00:12:25,030
get a little bit more fancy you can

00:12:22,150 --> 00:12:27,010
click through and set all now I'll run a

00:12:25,030 --> 00:12:28,840
longer or shorter test I'll run it with

00:12:27,010 --> 00:12:32,680
more nodes and this sort of thing the

00:12:28,840 --> 00:12:34,390
idea being to make stressing out your

00:12:32,680 --> 00:12:36,130
application putting as much loaded on as

00:12:34,390 --> 00:12:38,110
you can kind of click a button and off

00:12:36,130 --> 00:12:41,200
you go to make that something that's

00:12:38,110 --> 00:12:43,270
really easy to do on a continuous basis

00:12:41,200 --> 00:12:44,800
against experimental branches go

00:12:43,270 --> 00:12:48,310
wherever you need to investigate your

00:12:44,800 --> 00:12:49,810
code and yeah it'll keep a log of the

00:12:48,310 --> 00:12:52,360
things it's done it'll let you have a

00:12:49,810 --> 00:12:54,160
look at the reports and go back and

00:12:52,360 --> 00:12:59,770
track how your applications been going

00:12:54,160 --> 00:13:02,710
and things like that so that's that's a

00:12:59,770 --> 00:13:03,880
pyramid app and getting it up and

00:13:02,710 --> 00:13:06,190
running can be a little bit fiddly

00:13:03,880 --> 00:13:08,200
because it uses like Redis and a couple

00:13:06,190 --> 00:13:09,760
of back-end services so I'm not going to

00:13:08,200 --> 00:13:11,140
go in the details of that you can ask me

00:13:09,760 --> 00:13:11,640
about it afterwards we'll just you know

00:13:11,140 --> 00:13:17,060
catch

00:13:11,640 --> 00:13:20,100
on the docks or online so at this point

00:13:17,060 --> 00:13:21,810
yeah we've basically got our application

00:13:20,100 --> 00:13:24,300
in a position where we can see what it's

00:13:21,810 --> 00:13:26,190
going to look like live in production

00:13:24,300 --> 00:13:27,750
the third step and I think the most

00:13:26,190 --> 00:13:30,450
interesting step is to try and break it

00:13:27,750 --> 00:13:32,430
now you will probably unless you're very

00:13:30,450 --> 00:13:38,430
very good at your job get this step for

00:13:32,430 --> 00:13:39,960
free by the time you know you'll find

00:13:38,430 --> 00:13:41,340
you're not closing some resources

00:13:39,960 --> 00:13:43,920
properly or you haven't changed your

00:13:41,340 --> 00:13:45,600
database properly or some thing that

00:13:43,920 --> 00:13:46,920
means actually your application isn't

00:13:45,600 --> 00:13:49,290
going to stand up to the kinds of loads

00:13:46,920 --> 00:13:51,360
you thought it would now once you've got

00:13:49,290 --> 00:13:52,950
those bugs shaken out you can start to

00:13:51,360 --> 00:13:54,330
get a little bit more creative and i

00:13:52,950 --> 00:13:55,740
recommend the very first thing you do

00:13:54,330 --> 00:13:57,360
once you you're satisfied with your

00:13:55,740 --> 00:13:59,280
application that's passing a load test

00:13:57,360 --> 00:14:02,220
restart your database in the middle of

00:13:59,280 --> 00:14:04,830
it when we tried that on the firefox

00:14:02,220 --> 00:14:07,980
sync server what we expected to happen

00:14:04,830 --> 00:14:09,120
was yeah you restart the database you

00:14:07,980 --> 00:14:11,160
get a bunch of errors because your

00:14:09,120 --> 00:14:12,810
database has gone down that's fine the

00:14:11,160 --> 00:14:15,120
advice comes back up and the errors stop

00:14:12,810 --> 00:14:17,160
what we actually saw was we've got a

00:14:15,120 --> 00:14:19,710
bunch of errors the database came back

00:14:17,160 --> 00:14:22,410
up the number of errors reduced but they

00:14:19,710 --> 00:14:24,060
didn't go back to zero and we actually

00:14:22,410 --> 00:14:26,820
tracked it all the way down to a bug in

00:14:24,060 --> 00:14:29,130
the SQL alchemy connection pooling logic

00:14:26,820 --> 00:14:32,190
where if there was a you know just a

00:14:29,130 --> 00:14:33,420
precisely weird series of errors meant

00:14:32,190 --> 00:14:36,600
that it would leak a connection from the

00:14:33,420 --> 00:14:38,820
pool and if you had enough load going on

00:14:36,600 --> 00:14:40,590
your side at the time when you restarted

00:14:38,820 --> 00:14:42,360
your database it would lose a bunch of

00:14:40,590 --> 00:14:45,240
connections from its pool you'd be left

00:14:42,360 --> 00:14:46,470
operating at a reduced capacity and you

00:14:45,240 --> 00:14:48,090
would see failures where you weren't

00:14:46,470 --> 00:14:49,320
expecting to see any so that's the sort

00:14:48,090 --> 00:14:52,260
of thing that we're interested in in

00:14:49,320 --> 00:14:53,520
looking at once you get a bit of a feel

00:14:52,260 --> 00:14:54,960
for this sort of thing it's nice to be

00:14:53,520 --> 00:14:58,170
able to be a little bit more deliberate

00:14:54,960 --> 00:15:00,210
about it and at that stage you want

00:14:58,170 --> 00:15:02,490
something that lets you reach into your

00:15:00,210 --> 00:15:04,410
environment and make it fail in very

00:15:02,490 --> 00:15:07,080
controlled in interesting ways so that's

00:15:04,410 --> 00:15:10,500
why we built this to a called borean and

00:15:07,080 --> 00:15:12,660
brian is essentially a TCP proxy right

00:15:10,500 --> 00:15:14,760
it sits in between your application and

00:15:12,660 --> 00:15:16,950
some back-end service like MySQL it

00:15:14,760 --> 00:15:18,960
takes your data in it proxies your data

00:15:16,950 --> 00:15:20,490
back and sends it before what makes very

00:15:18,960 --> 00:15:24,030
own special is that it's kind of a joke

00:15:20,490 --> 00:15:25,320
about it you can configure it to do

00:15:24,030 --> 00:15:27,870
interesting things like

00:15:25,320 --> 00:15:29,820
you know insert a delay in between you

00:15:27,870 --> 00:15:31,110
know connecting to the to the socket and

00:15:29,820 --> 00:15:33,900
when it hits the back end when it comes

00:15:31,110 --> 00:15:35,610
back you can tell it to just accept your

00:15:33,900 --> 00:15:37,830
connection and then forget about you and

00:15:35,610 --> 00:15:40,740
walk away you can tell it to inject

00:15:37,830 --> 00:15:44,820
various kinds of error we've implemented

00:15:40,740 --> 00:15:47,160
a number of different protocols so it

00:15:44,820 --> 00:15:49,140
can speak HTTP and it can look like a

00:15:47,160 --> 00:15:50,910
really badly behaved HTTP server it can

00:15:49,140 --> 00:15:53,610
speak a little bit of MySQL and look

00:15:50,910 --> 00:15:55,170
like a badly behaved mysql server and

00:15:53,610 --> 00:15:57,330
the important thing is that it's easily

00:15:55,170 --> 00:15:58,890
extensible so behaviors and protocols

00:15:57,330 --> 00:15:59,910
are pluggable so if you've got reddest

00:15:58,890 --> 00:16:01,890
or something you know i'll implement

00:15:59,910 --> 00:16:03,630
some specific error behaviour for

00:16:01,890 --> 00:16:06,030
ruidoso implement some specific protocol

00:16:03,630 --> 00:16:08,790
handling paredes again this French for

00:16:06,030 --> 00:16:10,650
rapscallion because it misbehaves and

00:16:08,790 --> 00:16:12,390
you use it something like this so I'm

00:16:10,650 --> 00:16:15,480
going to do the same thing I showed you

00:16:12,390 --> 00:16:18,660
before with requests and with my demo

00:16:15,480 --> 00:16:22,140
server but instead of connecting

00:16:18,660 --> 00:16:24,390
directly to the server that I'm running

00:16:22,140 --> 00:16:26,670
I'm going to start of Orion I'm going to

00:16:24,390 --> 00:16:28,500
tell it to listen locally on port 8000

00:16:26,670 --> 00:16:30,750
I'm going to tell it to proxy that to

00:16:28,500 --> 00:16:32,550
our demo server by Cano use services

00:16:30,750 --> 00:16:36,390
mozilla.org I'm going to tell it to

00:16:32,550 --> 00:16:37,860
speak HTTP initially everything looks

00:16:36,390 --> 00:16:41,160
the same right I can connect to that as

00:16:37,860 --> 00:16:42,990
if it were the live service I can do the

00:16:41,160 --> 00:16:44,420
same requests I was doing before and

00:16:42,990 --> 00:16:47,340
i'll get the same results that's fine

00:16:44,420 --> 00:16:50,520
where it gets interesting as I tell them

00:16:47,340 --> 00:16:52,410
instead right insert this behavior for

00:16:50,520 --> 00:16:55,140
fifty percent of all your requests I

00:16:52,410 --> 00:16:57,900
want you to insert a delay okay and

00:16:55,140 --> 00:17:00,210
we'll see it inserts a delay in to some

00:16:57,900 --> 00:17:04,980
of your request not all of them but some

00:17:00,210 --> 00:17:06,689
of them I might ask it to insert an

00:17:04,980 --> 00:17:08,400
error into their quests and because it

00:17:06,689 --> 00:17:11,400
knows it's speaking hey CDP it'll give

00:17:08,400 --> 00:17:18,500
you a 502 right or a 501 or some sort of

00:17:11,400 --> 00:17:18,500
HTTP related error like okay like that

00:17:18,800 --> 00:17:22,320
this is my one of my favorite ones as I

00:17:21,060 --> 00:17:24,959
can just say write one hundred percent

00:17:22,320 --> 00:17:28,260
of your requests just hang them don't do

00:17:24,959 --> 00:17:32,010
anything and it will obligingly accept

00:17:28,260 --> 00:17:33,660
your connection and do nothing I can

00:17:32,010 --> 00:17:35,010
wait for that to timeout this is a good

00:17:33,660 --> 00:17:36,570
way to test two things whether you're

00:17:35,010 --> 00:17:38,190
accidentally catching weird exceptions

00:17:36,570 --> 00:17:39,450
and you'd be amazing number of things

00:17:38,190 --> 00:17:40,980
that you can't interrupt with a keyboard

00:17:39,450 --> 00:17:43,470
interrupt if they hang on our open

00:17:40,980 --> 00:17:45,030
socket it's also good for checking if

00:17:43,470 --> 00:17:47,610
your timeouts are working correctly and

00:17:45,030 --> 00:17:48,960
fortunately for Kenneth request does a

00:17:47,610 --> 00:17:52,470
very good job of handing these things

00:17:48,960 --> 00:17:54,240
correctly so that's one way to use

00:17:52,470 --> 00:17:56,250
Vorian you can get this kind of you know

00:17:54,240 --> 00:17:58,050
static behavior on a certain percentage

00:17:56,250 --> 00:18:00,090
of your requests I think it's more

00:17:58,050 --> 00:18:01,800
interesting and to actually take control

00:18:00,090 --> 00:18:04,380
of it on the fly so I'm going to tell it

00:18:01,800 --> 00:18:05,340
instead just listen on a HTTP port and

00:18:04,380 --> 00:18:10,770
you'll see it's now listening on port

00:18:05,340 --> 00:18:14,700
8080 no behavior is enabled by default

00:18:10,770 --> 00:18:16,560
but I can put a request to that local

00:18:14,700 --> 00:18:18,510
port and say hey switch on the error

00:18:16,560 --> 00:18:22,950
behavior and it'll start giving me

00:18:18,510 --> 00:18:24,600
errors I can say hey and I get up to

00:18:22,950 --> 00:18:27,660
typing it yeah switch on your hanging

00:18:24,600 --> 00:18:30,600
behavior and it'll start hanging all

00:18:27,660 --> 00:18:32,850
right so this gives you the ability to

00:18:30,600 --> 00:18:34,500
switch on and off particular areas of

00:18:32,850 --> 00:18:38,550
interest and kind of script test cases

00:18:34,500 --> 00:18:39,720
around them if you need to switch them

00:18:38,550 --> 00:18:41,490
back off again you can surf into this

00:18:39,720 --> 00:18:42,870
dummy behavior that does nothing now the

00:18:41,490 --> 00:18:44,820
demo server I've got running they're

00:18:42,870 --> 00:18:51,090
actually in between it and the database

00:18:44,820 --> 00:18:55,670
I have an instance of Orion running on a

00:18:51,090 --> 00:18:58,920
separate port here and currently see

00:18:55,670 --> 00:19:00,960
it's not doing anything if I switch on

00:18:58,920 --> 00:19:03,770
the error handle there it will give me

00:19:00,960 --> 00:19:05,400
like a MySQL wire protocol level error

00:19:03,770 --> 00:19:06,810
that's the I don't know gets that

00:19:05,400 --> 00:19:08,190
sophisticated it currently just gives

00:19:06,810 --> 00:19:11,310
you gibberish but you could put in a

00:19:08,190 --> 00:19:12,840
mysql protocol level error if I then try

00:19:11,310 --> 00:19:14,670
and interact with my web baton will see

00:19:12,840 --> 00:19:16,560
two things one is it it takes a long

00:19:14,670 --> 00:19:18,150
time because the stink servers trying to

00:19:16,560 --> 00:19:19,200
retry in the face of this error and so

00:19:18,150 --> 00:19:21,810
will actually the database is

00:19:19,200 --> 00:19:23,580
misbehaving I'll try again when that

00:19:21,810 --> 00:19:25,080
comes back we'll see oops there was a

00:19:23,580 --> 00:19:27,360
server-side error and if I have a look

00:19:25,080 --> 00:19:30,210
inside there I'll see yep I just forced

00:19:27,360 --> 00:19:31,860
my application to generate a crash so I

00:19:30,210 --> 00:19:34,250
can then go into my server logs and have

00:19:31,860 --> 00:19:37,680
a look at exactly how that was behaving

00:19:34,250 --> 00:19:39,120
so I think that's pretty cool and there

00:19:37,680 --> 00:19:41,790
are two ways that you can go about using

00:19:39,120 --> 00:19:43,950
this functionality the first is to

00:19:41,790 --> 00:19:44,700
basically just switch it on like I was

00:19:43,950 --> 00:19:46,140
saying

00:19:44,700 --> 00:19:48,240
run a bunch of load against it and see

00:19:46,140 --> 00:19:49,890
what happens all right switch on a five

00:19:48,240 --> 00:19:51,540
percent error rate in your database

00:19:49,890 --> 00:19:53,100
connection and have a look at the error

00:19:51,540 --> 00:19:56,040
rate coming back from your application

00:19:53,100 --> 00:19:59,190
is it five percent yeah is it roughly

00:19:56,040 --> 00:20:00,990
five percent is it fifty percent try and

00:19:59,190 --> 00:20:03,210
figure out ways that this is misbehaving

00:20:00,990 --> 00:20:06,840
that gives you a clue to what you can go

00:20:03,210 --> 00:20:08,580
in and have a bit of a poke at to see

00:20:06,840 --> 00:20:09,870
where things are going wrong where you

00:20:08,580 --> 00:20:11,550
could be handling these errors a little

00:20:09,870 --> 00:20:13,410
bit more gracefully once you've found

00:20:11,550 --> 00:20:17,010
those things you can turn this into a

00:20:13,410 --> 00:20:19,020
functional tests alright you can spin up

00:20:17,010 --> 00:20:21,000
your servers you can very carefully

00:20:19,020 --> 00:20:23,070
switch Vorian on to a specific behavior

00:20:21,000 --> 00:20:25,080
that you want to test run a specific set

00:20:23,070 --> 00:20:27,000
of behaviors in your API and make sure

00:20:25,080 --> 00:20:29,610
that it is now handling that correctly

00:20:27,000 --> 00:20:31,050
and I think I have an example of that

00:20:29,610 --> 00:20:33,240
from the Vorian docks here which is

00:20:31,050 --> 00:20:34,860
quite a thing you start the proxy in

00:20:33,240 --> 00:20:36,690
your tests just a look enable this

00:20:34,860 --> 00:20:38,160
behavior do a bunch of tests against

00:20:36,690 --> 00:20:41,990
your API switch the behavior back off

00:20:38,160 --> 00:20:41,990
check that it was doing everything okay

00:20:43,880 --> 00:20:50,010
so that's kind of that's where we're at

00:20:46,400 --> 00:20:53,700
and I want to do to kind of take home

00:20:50,010 --> 00:20:56,400
messages from here the first is a kind

00:20:53,700 --> 00:20:57,900
of if this stuff seems new to you and

00:20:56,400 --> 00:20:59,940
that will encourage you to come at it

00:20:57,900 --> 00:21:01,500
from from this perspective basically

00:20:59,940 --> 00:21:03,210
think about how your application is

00:21:01,500 --> 00:21:04,710
interacting with the outside world now

00:21:03,210 --> 00:21:07,710
that might be a database it might be a

00:21:04,710 --> 00:21:09,870
cache might be whatever other services

00:21:07,710 --> 00:21:11,520
it's relying on that outside world

00:21:09,870 --> 00:21:14,280
sooner or later will start to misbehave

00:21:11,520 --> 00:21:17,190
on you how does your application deal

00:21:14,280 --> 00:21:18,900
with that misbehavior and could it be

00:21:17,190 --> 00:21:20,370
dealing with it better and doesn't

00:21:18,900 --> 00:21:21,450
matter I mean this is a lot of mucking

00:21:20,370 --> 00:21:23,010
around maybe you don't care your

00:21:21,450 --> 00:21:24,930
database guys down application goes down

00:21:23,010 --> 00:21:26,400
fine but you should be thinking about it

00:21:24,930 --> 00:21:27,720
and thinking about what the best

00:21:26,400 --> 00:21:30,570
trade-off and choices for your

00:21:27,720 --> 00:21:32,130
application if you decide that you could

00:21:30,570 --> 00:21:33,540
be doing that better try to think about

00:21:32,130 --> 00:21:35,910
how you can simulate those failures

00:21:33,540 --> 00:21:37,350
under controlled conditions and this

00:21:35,910 --> 00:21:39,810
this sort of thing seems like something

00:21:37,350 --> 00:21:41,670
that you're interested in doing come

00:21:39,810 --> 00:21:43,830
back with us on it well as I said this

00:21:41,670 --> 00:21:45,570
is part of our kind of organic process

00:21:43,830 --> 00:21:47,610
for building applications that don't

00:21:45,570 --> 00:21:48,810
fall down we're still learning we're

00:21:47,610 --> 00:21:50,610
still trying new things and we're still

00:21:48,810 --> 00:21:52,140
building new things the vision that

00:21:50,610 --> 00:21:54,810
we're trying to work towards with these

00:21:52,140 --> 00:21:56,790
hosted front ends and various tools that

00:21:54,810 --> 00:21:58,040
you know allow you to interact with them

00:21:56,790 --> 00:22:00,530
in real time

00:21:58,040 --> 00:22:03,320
kind of a CI or a Travis Torah Jenkins

00:22:00,530 --> 00:22:05,450
for stress testing so that you can have

00:22:03,320 --> 00:22:07,580
a setup where your application is always

00:22:05,450 --> 00:22:09,560
ready to be stress tested always ready

00:22:07,580 --> 00:22:11,870
to to figure out how it's going to

00:22:09,560 --> 00:22:14,300
respond to values so if that sounds

00:22:11,870 --> 00:22:15,620
exciting to you get in touch with me I'm

00:22:14,300 --> 00:22:17,060
kind of get in touch with the other guys

00:22:15,620 --> 00:22:19,340
at Mozilla who are working on this stuff

00:22:17,060 --> 00:22:22,040
and we'll keep driving forward we try

00:22:19,340 --> 00:22:23,510
and make that happen there is one more

00:22:22,040 --> 00:22:27,260
thing I want to talk about and that's

00:22:23,510 --> 00:22:28,610
funk load you may have heard me on

00:22:27,260 --> 00:22:30,080
several occasions if you've been to a

00:22:28,610 --> 00:22:31,910
few of my talks express my

00:22:30,080 --> 00:22:33,920
dissatisfaction with funk load and its

00:22:31,910 --> 00:22:36,050
API it gets the job done like it's not a

00:22:33,920 --> 00:22:39,230
bad tool but it has a lot of rough edges

00:22:36,050 --> 00:22:41,090
it's kind of hard to do all of the

00:22:39,230 --> 00:22:43,120
things that we want to do with it so

00:22:41,090 --> 00:22:46,970
going forward at Mozilla funk load out

00:22:43,120 --> 00:22:48,620
loads in loads is a new tool that we're

00:22:46,970 --> 00:22:51,500
working on to be kind of a better funk

00:22:48,620 --> 00:22:52,820
load easier to write tests so you want

00:22:51,500 --> 00:22:55,310
to you want to write tests you just use

00:22:52,820 --> 00:22:56,570
a request library right everybody uses a

00:22:55,310 --> 00:22:58,220
request like before making requests

00:22:56,570 --> 00:23:00,170
we'll use that for writing our tests and

00:22:58,220 --> 00:23:02,360
loads will instrument that to figure out

00:23:00,170 --> 00:23:03,410
all the things that needs to know it's

00:23:02,360 --> 00:23:05,480
much better at getting a lot more

00:23:03,410 --> 00:23:07,040
concurrency out of a single machine and

00:23:05,480 --> 00:23:08,570
funk load as being it's much better at

00:23:07,040 --> 00:23:10,370
telling you about what's going on and

00:23:08,570 --> 00:23:12,440
when so one of the things we want to do

00:23:10,370 --> 00:23:14,120
is generate real time graphs of the

00:23:12,440 --> 00:23:16,520
output of your stress test as it's in

00:23:14,120 --> 00:23:17,960
motion find clothes not particularly

00:23:16,520 --> 00:23:19,970
well suited for that so we're building a

00:23:17,960 --> 00:23:21,800
new thing to to make it happen it's not

00:23:19,970 --> 00:23:23,120
ready yet but it's it's chugging along

00:23:21,800 --> 00:23:25,250
and there are people being paid to work

00:23:23,120 --> 00:23:26,780
on this unfortunately I don't think it's

00:23:25,250 --> 00:23:31,700
French for anything so we're kind of

00:23:26,780 --> 00:23:33,470
ruining the the theme so thank you a

00:23:31,700 --> 00:23:35,240
particular thank you to my colleagues

00:23:33,470 --> 00:23:38,120
Tarek and Alexei who are kind of the the

00:23:35,240 --> 00:23:40,340
guys really driving these tools James is

00:23:38,120 --> 00:23:42,350
a long-suffering QA guy for the services

00:23:40,340 --> 00:23:43,490
team and he makes sure they're actually

00:23:42,350 --> 00:23:45,530
using these things and they're actually

00:23:43,490 --> 00:23:47,090
breaking stuff and he has a remarkable

00:23:45,530 --> 00:23:49,820
talent for causing things to break when

00:23:47,090 --> 00:23:51,590
you think they're fine if you're

00:23:49,820 --> 00:23:53,840
interested in in any more on these tools

00:23:51,590 --> 00:23:55,520
these are the docs or email me here and

00:23:53,840 --> 00:23:58,810
I guess I have some time for questions

00:23:55,520 --> 00:23:58,810
so thank you very much

00:24:02,440 --> 00:24:07,100
we have two microphones please cue at

00:24:05,060 --> 00:24:08,210
the base of the stairs of whichever ones

00:24:07,100 --> 00:24:18,530
closest to you and well we've got

00:24:08,210 --> 00:24:20,570
several minutes for questions I just had

00:24:18,530 --> 00:24:24,320
a question so you talked about proxying

00:24:20,570 --> 00:24:26,660
particular protocols using for Ian could

00:24:24,320 --> 00:24:28,600
you use this to front anything that you

00:24:26,660 --> 00:24:31,910
haven't already actually written

00:24:28,600 --> 00:24:34,340
proxying stuff for so just a generic so

00:24:31,910 --> 00:24:37,790
so it is be prepared by default it will

00:24:34,340 --> 00:24:39,460
just be a TCP proxy I think the the way

00:24:37,790 --> 00:24:41,570
that works currently is not terribly

00:24:39,460 --> 00:24:46,040
elegant because it expects you to be

00:24:41,570 --> 00:24:47,210
kind of request reply but that you know

00:24:46,040 --> 00:24:48,860
this shouldn't be too hard to make it do

00:24:47,210 --> 00:24:50,690
something more clever there so the idea

00:24:48,860 --> 00:24:52,070
is that by default it will just talk TCP

00:24:50,690 --> 00:24:54,560
you ask it for an error it will just

00:24:52,070 --> 00:24:56,000
write gibberish into your TCP stream and

00:24:54,560 --> 00:24:57,710
then if you want to get a little bit

00:24:56,000 --> 00:24:59,450
more particular about the kinds of

00:24:57,710 --> 00:25:01,700
errors you're likely to see then you can

00:24:59,450 --> 00:25:03,320
implement a specific protocol yeah so

00:25:01,700 --> 00:25:05,360
you know mysql lost connection to the

00:25:03,320 --> 00:25:08,060
database error put that in at a separate

00:25:05,360 --> 00:25:10,280
layer the idea is that you can you can

00:25:08,060 --> 00:25:11,540
write those as plugins and enable them

00:25:10,280 --> 00:25:13,220
in your configuration so something

00:25:11,540 --> 00:25:16,160
specific that you haven't got one poster

00:25:13,220 --> 00:25:17,150
is you yeah yeah so you probably still

00:25:16,160 --> 00:25:18,590
get a lot of mileage out of just

00:25:17,150 --> 00:25:26,720
standing that up and asking for delays

00:25:18,590 --> 00:25:30,410
and errors and stuff cool thanks hey as

00:25:26,720 --> 00:25:32,480
always your talk in austin last last

00:25:30,410 --> 00:25:35,690
year it was great and she was even

00:25:32,480 --> 00:25:38,330
better thanks um what I was thinking so

00:25:35,690 --> 00:25:41,270
we have we have a restful api where I

00:25:38,330 --> 00:25:43,400
work and we don't we have a lot of

00:25:41,270 --> 00:25:46,460
different requests coming in like I

00:25:43,400 --> 00:25:50,180
guess most api's do and sometimes it

00:25:46,460 --> 00:25:52,400
fails sometimes other stuff and I was

00:25:50,180 --> 00:25:55,460
wondering if there was a tool that we

00:25:52,400 --> 00:25:58,520
could use to basically I capture all

00:25:55,460 --> 00:26:00,560
like a production work load and then

00:25:58,520 --> 00:26:03,110
replay that back into one of these test

00:26:00,560 --> 00:26:07,270
tools because to construct the amount of

00:26:03,110 --> 00:26:08,400
kind of variability of data that we need

00:26:07,270 --> 00:26:10,800
to

00:26:08,400 --> 00:26:13,470
actively do a load test because all our

00:26:10,800 --> 00:26:14,970
endpoints are different being able to do

00:26:13,470 --> 00:26:16,710
that would mean that we could just you

00:26:14,970 --> 00:26:19,710
know write out a 5 gigabyte file

00:26:16,710 --> 00:26:23,280
somewhere and then replay that back in

00:26:19,710 --> 00:26:25,020
under extreme load yeah I have a vague

00:26:23,280 --> 00:26:26,670
feeling that I've seen something like

00:26:25,020 --> 00:26:28,320
that before but I can't remember what it

00:26:26,670 --> 00:26:31,080
is so I might go home and have a look

00:26:28,320 --> 00:26:32,280
for it that sounds fantastic yeah and it

00:26:31,080 --> 00:26:34,110
feeds into a question we had in this

00:26:32,280 --> 00:26:36,510
room earlier about I don't want to do

00:26:34,110 --> 00:26:37,980
some load testing you know where do I

00:26:36,510 --> 00:26:40,020
start what sort of load do i generate

00:26:37,980 --> 00:26:41,700
what parameters on it and if you're in

00:26:40,020 --> 00:26:43,440
the position where you have a system and

00:26:41,700 --> 00:26:45,150
you have you know some production data

00:26:43,440 --> 00:26:46,800
to be able to just capture that and

00:26:45,150 --> 00:26:49,140
replay it as part of a load test would

00:26:46,800 --> 00:26:51,750
be awesome if that tool does not exist I

00:26:49,140 --> 00:26:54,300
want to help you build it yeah sorry cuz

00:26:51,750 --> 00:26:57,300
given that Vorian like i wonder if you

00:26:54,300 --> 00:26:59,250
could plug into the Vorian proxy and

00:26:57,300 --> 00:27:01,530
just go you know all the exporting the

00:26:59,250 --> 00:27:05,840
next hour just dump everything to a file

00:27:01,530 --> 00:27:08,370
and then somehow reload that back in

00:27:05,840 --> 00:27:16,790
that needs to exist you're quite right I

00:27:08,370 --> 00:27:19,980
think it's great idea damn it sorry um

00:27:16,790 --> 00:27:21,660
so with fuckload the last time I used it

00:27:19,980 --> 00:27:24,200
I assume it hasn't changed these workers

00:27:21,660 --> 00:27:26,880
they're simple there are synchronous and

00:27:24,200 --> 00:27:28,950
they can get backed up and you can't

00:27:26,880 --> 00:27:31,890
actually rely on getting a certain hit

00:27:28,950 --> 00:27:34,290
rate when you'll serve up so then the

00:27:31,890 --> 00:27:35,880
actual hit rate becomes a metric that

00:27:34,290 --> 00:27:38,100
you're measuring rather than actually

00:27:35,880 --> 00:27:39,990
trying to recreate a certain requests

00:27:38,100 --> 00:27:41,970
weight that you would expect or expect

00:27:39,990 --> 00:27:45,930
in the future you know give them certain

00:27:41,970 --> 00:27:48,510
expectations so do you think it's

00:27:45,930 --> 00:27:49,980
actually important to I mean like does

00:27:48,510 --> 00:27:53,310
does that matter should you actually be

00:27:49,980 --> 00:27:54,780
aiming to create a realistic I mean like

00:27:53,310 --> 00:27:57,360
as far as you can gather you know which

00:27:54,780 --> 00:27:58,650
would lose that question as well I mean

00:27:57,360 --> 00:28:00,660
like should that be something that

00:27:58,650 --> 00:28:04,320
you're aiming for is actually getting a

00:28:00,660 --> 00:28:06,120
certain like realistic requests requests

00:28:04,320 --> 00:28:08,370
rate on your server and then like

00:28:06,120 --> 00:28:10,140
extrapolating that and then and then and

00:28:08,370 --> 00:28:11,460
then taking measurements from that like

00:28:10,140 --> 00:28:13,260
how you're

00:28:11,460 --> 00:28:16,200
your server handles under those loads or

00:28:13,260 --> 00:28:22,470
is the actual metric of the response

00:28:16,200 --> 00:28:24,510
rate of the UM hit rate fine there are

00:28:22,470 --> 00:28:25,789
but that's an exceptional question I

00:28:24,510 --> 00:28:27,750
think there's probably three or four

00:28:25,789 --> 00:28:28,980
different answers in there that I want

00:28:27,750 --> 00:28:32,640
to give so i'll try and unpack it as

00:28:28,980 --> 00:28:34,110
best I can you're right about funk load

00:28:32,640 --> 00:28:36,929
and that's one of the reasons why we

00:28:34,110 --> 00:28:38,399
started loads is that you know you it's

00:28:36,929 --> 00:28:40,370
not always clear whether you're testing

00:28:38,399 --> 00:28:42,929
the limits of your server or your client

00:28:40,370 --> 00:28:44,190
generating a level of load so what I

00:28:42,929 --> 00:28:47,130
didn't show in this talk was the

00:28:44,190 --> 00:28:48,779
server-side monitoring and if you're

00:28:47,130 --> 00:28:50,820
doing a load test you really should have

00:28:48,779 --> 00:28:51,750
metrics set up on your server to see

00:28:50,820 --> 00:28:54,659
what sort of load you're actually

00:28:51,750 --> 00:28:56,490
generating rather than listening to what

00:28:54,659 --> 00:28:57,750
to what your client sites always telling

00:28:56,490 --> 00:29:01,070
you because that can be interfered with

00:28:57,750 --> 00:29:03,990
by by overloading the client itself I

00:29:01,070 --> 00:29:06,539
think the the notion of getting a

00:29:03,990 --> 00:29:09,210
realistic kind of load profile on your

00:29:06,539 --> 00:29:11,070
server is very important certainly in

00:29:09,210 --> 00:29:12,779
for Firefox Sync like we've we've had

00:29:11,070 --> 00:29:15,299
outages where she's like all the server

00:29:12,779 --> 00:29:17,130
can't handle this load because the

00:29:15,299 --> 00:29:19,649
clients are posting bodies that are much

00:29:17,130 --> 00:29:21,480
bigger than we thought so our load tests

00:29:19,649 --> 00:29:22,590
you know was not indicative of the kind

00:29:21,480 --> 00:29:26,159
of loads that we would have in

00:29:22,590 --> 00:29:28,200
production at the same time there's

00:29:26,159 --> 00:29:30,600
still a lot of value in just thumping

00:29:28,200 --> 00:29:31,919
you know I'll get thousands of requests

00:29:30,600 --> 00:29:33,960
per second on this server just dump it

00:29:31,919 --> 00:29:36,659
and see what happens so I think there's

00:29:33,960 --> 00:29:38,190
two kind of different modes of testing

00:29:36,659 --> 00:29:40,460
in there that ideally you would be doing

00:29:38,190 --> 00:29:43,230
both of them one of them more carefully

00:29:40,460 --> 00:29:44,370
to try and measure exactly how your

00:29:43,230 --> 00:29:46,460
system is going to stand up and the

00:29:44,370 --> 00:29:50,520
other more experiment experimentally

00:29:46,460 --> 00:29:53,909
just to see what happens throw

00:29:50,520 --> 00:29:55,200
everything out and sister yeah we'll

00:29:53,909 --> 00:29:56,909
make this next one the last question

00:29:55,200 --> 00:30:00,179
please all right

00:29:56,909 --> 00:30:03,330
okay great talk Vorian seems really

00:30:00,179 --> 00:30:07,499
interesting I work with a protocol it's

00:30:03,330 --> 00:30:10,289
asynchronous and I was wondering how it

00:30:07,499 --> 00:30:12,929
would lend itself to introducing errors

00:30:10,289 --> 00:30:14,970
in an asynchronous protocol where the i

00:30:12,929 --> 00:30:18,570
would like to delay the responses or not

00:30:14,970 --> 00:30:21,409
return responses or sorry send responses

00:30:18,570 --> 00:30:25,830
back in that a synchronous manner

00:30:21,409 --> 00:30:29,759
probably not super well currently but

00:30:25,830 --> 00:30:30,899
i'd like it to do that so i mean you can

00:30:29,759 --> 00:30:34,649
write a plug-in that does whatever you

00:30:30,899 --> 00:30:36,149
like in in the the kind of base protocol

00:30:34,649 --> 00:30:37,169
implementation in borean is just so

00:30:36,149 --> 00:30:38,700
here's a thing that has a call back

00:30:37,169 --> 00:30:40,499
thats gets called whenever whenever

00:30:38,700 --> 00:30:42,029
there's data is a little select lee that

00:30:40,499 --> 00:30:43,710
says this sockets ready to sender this

00:30:42,029 --> 00:30:45,659
socket do whatever you want to do with

00:30:43,710 --> 00:30:47,639
it most of the current implementations

00:30:45,659 --> 00:30:49,739
are very request-response oriented and

00:30:47,639 --> 00:30:52,889
so you could probably implement what you

00:30:49,739 --> 00:30:56,149
want but you might have to dig down a

00:30:52,889 --> 00:30:58,769
little bit deeper all right have a look

00:30:56,149 --> 00:31:02,879
it definitely should be made to make

00:30:58,769 --> 00:31:05,369
that easier right and appreciation I

00:31:02,879 --> 00:31:08,039
would like to give you a packet of these

00:31:05,369 --> 00:31:10,470
special Norwegian blue blend of the

00:31:08,039 --> 00:31:12,659
coffee for this invasion and of course a

00:31:10,470 --> 00:31:16,460
PI calm Australia coughing my deposit

00:31:12,659 --> 00:31:16,460

YouTube URL: https://www.youtube.com/watch?v=DH94wksQFPM


