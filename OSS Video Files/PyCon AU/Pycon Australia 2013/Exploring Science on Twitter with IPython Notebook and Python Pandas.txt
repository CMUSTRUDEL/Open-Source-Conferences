Title: Exploring Science on Twitter with IPython Notebook and Python Pandas
Publication date: 2013-07-10
Playlist: Pycon Australia 2013
Description: 
	Brenda Moon
http://2013.pycon-au.org/schedule/30059/view_talk
Starting with 13.5 million tweets from 2011 containing the word science: How I've explored the way people use 'science' on Twitter. The IPython notebook (http://ipython.org/notebook.html) is a great tool for research, allowing me to keep notes about my research interleaved with the python code. In addition, the Pandas python data analysis library (http://pandas.pydata.org/) supports working with large data tables with excellent suppor
Captions: 
	00:00:00,050 --> 00:00:11,179
hello welcome to afternoon tea onwards

00:00:07,340 --> 00:00:14,309
our first presenter we have Brenda moon

00:00:11,179 --> 00:00:16,650
she is a PhD candidate in science

00:00:14,309 --> 00:00:18,510
communication at the ANU where she is

00:00:16,650 --> 00:00:20,310
using data mining on social media to

00:00:18,510 --> 00:00:22,590
understand public attitudes towards

00:00:20,310 --> 00:00:24,660
science and technology she is a keen

00:00:22,590 --> 00:00:26,939
supporter of open source open hardware

00:00:24,660 --> 00:00:28,590
in open science to talk to us about

00:00:26,939 --> 00:00:31,109
exploring science on twitter with

00:00:28,590 --> 00:00:40,500
ipython notebook and python pandas

00:00:31,109 --> 00:00:42,270
please welcome Brenda moon hello I'm

00:00:40,500 --> 00:00:44,570
Brenda moon and I'm doing my PhD

00:00:42,270 --> 00:00:46,950
insights communication at a and you

00:00:44,570 --> 00:00:50,160
looking at how people were used the word

00:00:46,950 --> 00:00:53,129
science on Twitter my initial data

00:00:50,160 --> 00:00:55,020
collection was done using Java but after

00:00:53,129 --> 00:00:57,539
trying a few different options for data

00:00:55,020 --> 00:01:00,750
analysis i settled on pie I Python

00:00:57,539 --> 00:01:03,899
notebook and Python pandas as my main

00:01:00,750 --> 00:01:05,939
tools today I'm going to give you a

00:01:03,899 --> 00:01:09,420
quick overview of how I've set up my

00:01:05,939 --> 00:01:11,939
research environment and then show how I

00:01:09,420 --> 00:01:15,000
play third notebook and pandas help my

00:01:11,939 --> 00:01:16,619
research I'm fairly new to python so I'd

00:01:15,000 --> 00:01:21,600
really appreciate any feedback about

00:01:16,619 --> 00:01:23,820
ways i could be doing things better for

00:01:21,600 --> 00:01:25,860
research being able to go back to

00:01:23,820 --> 00:01:28,619
something you've done a year ago run it

00:01:25,860 --> 00:01:32,790
and get the same result is really really

00:01:28,619 --> 00:01:35,460
important but the tools i'm using are

00:01:32,790 --> 00:01:36,900
improving very quickly and i'd like to

00:01:35,460 --> 00:01:40,439
be able to take advantage of these

00:01:36,900 --> 00:01:42,119
improvements i use python virtual

00:01:40,439 --> 00:01:45,840
environments to help me achieve these

00:01:42,119 --> 00:01:47,630
goals virtually inflicts you have a

00:01:45,840 --> 00:01:49,950
virtual environment on python and

00:01:47,630 --> 00:01:52,530
probably a lot of you have already heard

00:01:49,950 --> 00:01:54,420
of it but i've always been surprised at

00:01:52,530 --> 00:01:57,299
how many people are not using them when

00:01:54,420 --> 00:01:59,880
they're so easy to use virtual in

00:01:57,299 --> 00:02:02,430
forever makes virtual end easier to use

00:01:59,880 --> 00:02:04,950
and using virtual in forever has made

00:02:02,430 --> 00:02:08,250
trying out different python modules much

00:02:04,950 --> 00:02:10,020
easier and it lets me take advantage of

00:02:08,250 --> 00:02:12,259
the rapid development of the tools that

00:02:10,020 --> 00:02:12,259
i'm using

00:02:12,460 --> 00:02:17,680
without worrying about my coat stopping

00:02:14,740 --> 00:02:19,930
working I make a note of which virtual

00:02:17,680 --> 00:02:22,390
environment i'm using at the top of each

00:02:19,930 --> 00:02:25,960
ipython notebook so that when I go back

00:02:22,390 --> 00:02:27,670
later on I can know if it stopped

00:02:25,960 --> 00:02:29,740
working in my new environment that I'm

00:02:27,670 --> 00:02:32,650
now using I can know which one to go

00:02:29,740 --> 00:02:34,240
back to to run it again and then perhaps

00:02:32,650 --> 00:02:37,420
bring it up to date or if I'm just

00:02:34,240 --> 00:02:40,780
checking something just run it in the

00:02:37,420 --> 00:02:42,910
old environment and part of doing that

00:02:40,780 --> 00:02:45,550
is that copy virtual environment lets

00:02:42,910 --> 00:02:48,220
you copy your current environment to a

00:02:45,550 --> 00:02:51,730
new environment before you install any

00:02:48,220 --> 00:02:54,010
new software or update any software so

00:02:51,730 --> 00:02:57,460
that way you can revert to your early

00:02:54,010 --> 00:02:59,320
environment environment if the latest

00:02:57,460 --> 00:03:01,120
bleeding-edge version of pirate pandas

00:02:59,320 --> 00:03:03,820
or at least when I was preparing this

00:03:01,120 --> 00:03:06,700
talk the latest bleeding-edge version of

00:03:03,820 --> 00:03:09,060
ipython wasn't able to start an I Python

00:03:06,700 --> 00:03:11,110
notebook there was just one little bug

00:03:09,060 --> 00:03:14,410
and you can revert to your previous

00:03:11,110 --> 00:03:15,700
environment without you know having to

00:03:14,410 --> 00:03:19,570
go through a lot of work and even just

00:03:15,700 --> 00:03:21,310
delete the one that was broken another

00:03:19,570 --> 00:03:24,190
useful command set virtual end of

00:03:21,310 --> 00:03:26,260
project lets you set the virtual lets

00:03:24,190 --> 00:03:28,720
you set the directory to be used within

00:03:26,260 --> 00:03:31,570
the particular virtual end so that means

00:03:28,720 --> 00:03:33,580
then when you activate that virtual

00:03:31,570 --> 00:03:35,380
environment it automatically changes to

00:03:33,580 --> 00:03:37,980
the right directory for that project and

00:03:35,380 --> 00:03:44,170
I find that really just a useful extra

00:03:37,980 --> 00:03:45,790
time saving thing as well the next part

00:03:44,170 --> 00:03:48,580
of my research tool chain I'd like to

00:03:45,790 --> 00:03:49,960
introduce is ipython notebook I was

00:03:48,580 --> 00:03:53,530
wondering how many of you have seen

00:03:49,960 --> 00:03:56,560
ipython notebook and how many of you are

00:03:53,530 --> 00:03:59,910
using it right so quite a few have seen

00:03:56,560 --> 00:04:02,680
it but not a lot of using it yet ok so

00:03:59,910 --> 00:04:05,080
I'll lips next I'll start up ipython

00:04:02,680 --> 00:04:08,340
notebook and have a look at the parts of

00:04:05,080 --> 00:04:11,170
it that I find useful for a research

00:04:08,340 --> 00:04:13,630
ipython notebook is started at the

00:04:11,170 --> 00:04:17,440
command line I hope that's visible up

00:04:13,630 --> 00:04:19,600
there first I activate the project's

00:04:17,440 --> 00:04:21,760
virtual environment we're using the work

00:04:19,600 --> 00:04:23,620
on command and

00:04:21,760 --> 00:04:26,830
that also navigate to the project

00:04:23,620 --> 00:04:29,590
directory as I said before the next

00:04:26,830 --> 00:04:31,870
command shows how I start ipython the

00:04:29,590 --> 00:04:35,230
pilot parameter tells it to load pylab

00:04:31,870 --> 00:04:38,380
support and in line makes it show the

00:04:35,230 --> 00:04:43,240
matlab metal plot lib graphs on the web

00:04:38,380 --> 00:04:45,400
page here's what the ipython notebook

00:04:43,240 --> 00:04:47,140
service had died up looks like in the

00:04:45,400 --> 00:04:49,090
terminal window I've zoomed in a little

00:04:47,140 --> 00:04:53,830
bit just so you can see the detail on

00:04:49,090 --> 00:04:55,780
the projector once it started it opens

00:04:53,830 --> 00:04:58,030
the notebook index page in your default

00:04:55,780 --> 00:04:59,710
browser so i just wanted to show that so

00:04:58,030 --> 00:05:01,540
you sort of realize that it's not all

00:04:59,710 --> 00:05:03,880
happening in the browser there is this

00:05:01,540 --> 00:05:07,330
back end part that you're running that's

00:05:03,880 --> 00:05:11,260
then starting up the front end part oops

00:05:07,330 --> 00:05:13,180
wrong button the first page it loads is

00:05:11,260 --> 00:05:16,890
an index of the notebooks in the current

00:05:13,180 --> 00:05:19,510
directory we can create a new notebook

00:05:16,890 --> 00:05:22,600
drag an existing notebook onto the

00:05:19,510 --> 00:05:25,600
window or open one that is already in

00:05:22,600 --> 00:05:27,640
the directory in this case the shutdown

00:05:25,600 --> 00:05:30,460
button shows that the example notebook

00:05:27,640 --> 00:05:36,280
is open and has a connection to the back

00:05:30,460 --> 00:05:40,030
end notebook server this is what a

00:05:36,280 --> 00:05:41,980
notebook looks like in this example I'm

00:05:40,030 --> 00:05:43,960
typing in the main heading so you can

00:05:41,980 --> 00:05:47,230
see that the current cell type is set to

00:05:43,960 --> 00:05:48,700
heading 1 a notebook consists of cells

00:05:47,230 --> 00:05:51,940
and each cell can have a different

00:05:48,700 --> 00:05:55,480
content type available types at the

00:05:51,940 --> 00:05:58,990
moment a code markdown raw text or

00:05:55,480 --> 00:06:01,840
various heavy heading levels the very

00:05:58,990 --> 00:06:06,790
new cell toolbar option on this page at

00:06:01,840 --> 00:06:08,650
the right is um let's is a new option

00:06:06,790 --> 00:06:10,240
that lets you make slide presentations

00:06:08,650 --> 00:06:12,550
in a notebook and I think the person who

00:06:10,240 --> 00:06:14,530
developed it used it at sify last week

00:06:12,550 --> 00:06:19,960
to you to do one but I wasn't brave

00:06:14,530 --> 00:06:21,820
enough to try to do that today when I

00:06:19,960 --> 00:06:23,290
press shift enter the focus shifts to

00:06:21,820 --> 00:06:26,680
the next cell and the heading is

00:06:23,290 --> 00:06:30,190
displayed this is the page layout I've

00:06:26,680 --> 00:06:32,110
used with a heading giving the what the

00:06:30,190 --> 00:06:35,050
topic of the pages and then a markdown

00:06:32,110 --> 00:06:36,520
site cell with the name of the

00:06:35,050 --> 00:06:39,310
chill environment that was used to

00:06:36,520 --> 00:06:41,620
develop that page and I you also used

00:06:39,310 --> 00:06:43,389
eight headings on the page because often

00:06:41,620 --> 00:06:44,770
with my research i'll have an idea i'll

00:06:43,389 --> 00:06:46,389
sort of pursue it to a certain point

00:06:44,770 --> 00:06:48,879
then i'll put it aside while i work on

00:06:46,389 --> 00:06:50,680
some other things so a page might even

00:06:48,879 --> 00:06:52,090
have different dates on it months apart

00:06:50,680 --> 00:06:58,030
because I've come back to something

00:06:52,090 --> 00:06:59,860
later another thing about ipython that

00:06:58,030 --> 00:07:03,629
I've found really great as a relative

00:06:59,860 --> 00:07:07,150
beginner to python is its help facility

00:07:03,629 --> 00:07:11,080
there's two types of help a tooltip

00:07:07,150 --> 00:07:13,509
style tab activated help where you just

00:07:11,080 --> 00:07:15,400
when you activate tab completion it can

00:07:13,509 --> 00:07:18,310
bring up some a tooltip of help about

00:07:15,400 --> 00:07:21,490
that function that you're using and a

00:07:18,310 --> 00:07:23,979
pager area for more detailed help when

00:07:21,490 --> 00:07:26,199
using the tab activated help pressing

00:07:23,979 --> 00:07:28,000
tab a second time will bring will bring

00:07:26,199 --> 00:07:31,810
up the more detailed help in the pager

00:07:28,000 --> 00:07:33,940
area here I'm showing another type of

00:07:31,810 --> 00:07:37,479
help activated by putting a question

00:07:33,940 --> 00:07:39,279
mark after the app after the thing you

00:07:37,479 --> 00:07:44,560
want help with and then running the cell

00:07:39,279 --> 00:07:46,630
that loads in the pager area I've also

00:07:44,560 --> 00:07:47,740
made the pager area look just in case

00:07:46,630 --> 00:07:49,419
you're worried that you don't get much

00:07:47,740 --> 00:07:51,520
coding room I've actually made the pager

00:07:49,419 --> 00:07:56,380
area larger so that you could see the

00:07:51,520 --> 00:07:59,650
type of help that was providing using a

00:07:56,380 --> 00:08:01,599
second ? and then running the cell will

00:07:59,650 --> 00:08:03,699
actually load the source code in the

00:08:01,599 --> 00:08:05,409
pager area instead of the help text for

00:08:03,699 --> 00:08:07,659
that function in the pager area and

00:08:05,409 --> 00:08:08,979
that's been really great as a way of

00:08:07,659 --> 00:08:13,000
understanding what some of the

00:08:08,979 --> 00:08:14,830
underlying libraries i'm using sorry how

00:08:13,000 --> 00:08:16,240
they're working and getting more detail

00:08:14,830 --> 00:08:20,669
about how to run things than what

00:08:16,240 --> 00:08:23,289
perhaps the built-in help text gives you

00:08:20,669 --> 00:08:25,629
the last thing about ipython I want to

00:08:23,289 --> 00:08:27,490
mention is its magic functions which

00:08:25,629 --> 00:08:30,750
provided utility features such as

00:08:27,490 --> 00:08:33,849
loading saving and running external code

00:08:30,750 --> 00:08:36,880
these can either work on a on a single

00:08:33,849 --> 00:08:38,500
line or on a whole cell and I'll quickly

00:08:36,880 --> 00:08:42,070
introduce the four that I've used the

00:08:38,500 --> 00:08:45,370
most the first one I found really useful

00:08:42,070 --> 00:08:48,370
is time it for timing the execution of a

00:08:45,370 --> 00:08:51,130
cell so that lets you profile house

00:08:48,370 --> 00:08:52,450
whether how you can whether you're

00:08:51,130 --> 00:08:54,250
improving the thing that you're trying

00:08:52,450 --> 00:08:59,350
to improve or not in a quick and easy

00:08:54,250 --> 00:09:01,120
way in the notebook paste in for sharing

00:08:59,350 --> 00:09:02,680
code as a gist on github when you're

00:09:01,120 --> 00:09:08,620
trying to get help from people in IRC

00:09:02,680 --> 00:09:10,810
very useful save for saving a cell or

00:09:08,620 --> 00:09:13,779
cells to a PI file and the matching load

00:09:10,810 --> 00:09:17,140
function load magic for loading a file

00:09:13,779 --> 00:09:20,020
into a cell and finally the run magic to

00:09:17,140 --> 00:09:21,850
run a Python script by default this

00:09:20,020 --> 00:09:25,630
loads all the variables in the script

00:09:21,850 --> 00:09:27,339
into your interactive namespace and I've

00:09:25,630 --> 00:09:28,990
found that very useful for loading the

00:09:27,339 --> 00:09:31,150
appearance settings for my matplotlib

00:09:28,990 --> 00:09:36,029
graphs to make them consistent across

00:09:31,150 --> 00:09:36,029
all my different versions and over time

00:09:37,170 --> 00:09:42,610
having had a quick intro to ipython

00:09:39,460 --> 00:09:46,480
notebook here is an even quicker one two

00:09:42,610 --> 00:09:49,930
pandas pandas provides data structures

00:09:46,480 --> 00:09:52,690
and tools for data analysis the two main

00:09:49,930 --> 00:09:55,300
structures I've used our series which is

00:09:52,690 --> 00:09:58,690
a single column of data and data frame

00:09:55,300 --> 00:10:00,730
which is a table of data I'll be showing

00:09:58,690 --> 00:10:04,900
you the strong support for time to based

00:10:00,730 --> 00:10:11,980
indexing that pandas provides are any of

00:10:04,900 --> 00:10:13,420
you using pandas yep so few so now let's

00:10:11,980 --> 00:10:15,040
move on to some examples from my

00:10:13,420 --> 00:10:19,209
research so that's just a quick rundown

00:10:15,040 --> 00:10:21,160
of how the toolchain I'm using but it's

00:10:19,209 --> 00:10:26,529
I think easier to see how it's useful by

00:10:21,160 --> 00:10:28,240
looking at a couple examples for my

00:10:26,529 --> 00:10:29,950
science communication research I've

00:10:28,240 --> 00:10:32,440
collected tweets using the Twitter

00:10:29,950 --> 00:10:36,820
streaming API with science related

00:10:32,440 --> 00:10:39,750
keywords in 2011 the key word science

00:10:36,820 --> 00:10:43,000
collected about 13 million tweets and

00:10:39,750 --> 00:10:44,830
I've since filtered out some spam and

00:10:43,000 --> 00:10:46,900
some non-english tweets so now there's

00:10:44,830 --> 00:10:50,320
about 12 million tweets left in my data

00:10:46,900 --> 00:10:53,410
set although tweets only have a short

00:10:50,320 --> 00:10:54,790
text they also have a lot of metadata so

00:10:53,410 --> 00:10:57,670
there's lots of different things you can

00:10:54,790 --> 00:10:59,680
choose to look at and for this talk I'm

00:10:57,670 --> 00:11:00,840
just using the number of tweets per day

00:10:59,680 --> 00:11:05,130
as the

00:11:00,840 --> 00:11:08,910
example the first step is to get the

00:11:05,130 --> 00:11:11,370
tweets per day data into pandas using

00:11:08,910 --> 00:11:13,380
tweets per day for the particularly for

00:11:11,370 --> 00:11:16,710
this demo it gets the 12 million suites

00:11:13,380 --> 00:11:18,360
down to a single record per day in 2011

00:11:16,710 --> 00:11:22,020
so it's not a longer really big data

00:11:18,360 --> 00:11:23,550
once you've done that and so you just

00:11:22,020 --> 00:11:27,960
end up with the number of tweets for

00:11:23,550 --> 00:11:30,960
each day so my collective science tweets

00:11:27,960 --> 00:11:35,090
are stored in a couchdb database so I

00:11:30,960 --> 00:11:35,090
run a query to load the tweets per day

00:11:35,690 --> 00:11:41,400
using the list returned from couchdb I

00:11:38,610 --> 00:11:44,430
create two new lists a date list with

00:11:41,400 --> 00:11:46,260
pandas date times and a data list with

00:11:44,430 --> 00:11:49,680
the number of tweets put out for each

00:11:46,260 --> 00:11:52,830
day the date list is then converted into

00:11:49,680 --> 00:12:00,330
a date time index and the science tweet

00:11:52,830 --> 00:12:02,280
series is created my data collection

00:12:00,330 --> 00:12:05,130
failed by running out of disk space on

00:12:02,280 --> 00:12:08,520
April Fool's Day on the third which is

00:12:05,130 --> 00:12:10,320
the 31st of May UTC and because it was

00:12:08,520 --> 00:12:11,970
April Fool's Day it couldn't send me an

00:12:10,320 --> 00:12:13,410
email because it couldn't create it

00:12:11,970 --> 00:12:16,290
because it didn't have disk space to

00:12:13,410 --> 00:12:18,600
tell me to run out of disk space so I

00:12:16,290 --> 00:12:19,980
didn't notice for a week or so and then

00:12:18,600 --> 00:12:21,090
once it had been a week I thought well

00:12:19,980 --> 00:12:22,740
I'm going to have to deal with that in

00:12:21,090 --> 00:12:24,180
my analysis so I waited until the

00:12:22,740 --> 00:12:27,030
university could pay for a new hard

00:12:24,180 --> 00:12:30,450
drive instead of me buying one so it got

00:12:27,030 --> 00:12:32,520
fixed on the twelfth of April so from

00:12:30,450 --> 00:12:35,130
the 30 but first of may and the twelfth

00:12:32,520 --> 00:12:38,550
of April I have both partial days of

00:12:35,130 --> 00:12:41,670
data and the days in between don't have

00:12:38,550 --> 00:12:43,710
data and need to be excluded by

00:12:41,670 --> 00:12:47,010
converting the quit tweets per day from

00:12:43,710 --> 00:12:49,470
energy to float I can then use pay under

00:12:47,010 --> 00:12:52,020
support for missing data to exclude the

00:12:49,470 --> 00:12:54,810
outage by setting them to numpy not a

00:12:52,020 --> 00:12:56,460
number and that's really handy because

00:12:54,810 --> 00:12:58,020
otherwise you've got the zeros and

00:12:56,460 --> 00:13:00,300
you're not quite sure whether they're a

00:12:58,020 --> 00:13:02,010
zero because nobody mentioned science on

00:13:00,300 --> 00:13:04,340
that day or there are 0 because of

00:13:02,010 --> 00:13:04,340
missing data

00:13:06,310 --> 00:13:10,730
working in ipython notebook and other

00:13:09,110 --> 00:13:13,010
advantage is that it's really easy to

00:13:10,730 --> 00:13:15,560
check that things have worked properly

00:13:13,010 --> 00:13:18,020
and to work interact sort of iterative

00:13:15,560 --> 00:13:19,820
Leon things here I check that my start

00:13:18,020 --> 00:13:22,070
and end date are what I expected and

00:13:19,820 --> 00:13:25,279
that the masking of the missing data has

00:13:22,070 --> 00:13:28,190
worked the ability to quickly plot a

00:13:25,279 --> 00:13:30,080
plat pandas dataframe or series is one

00:13:28,190 --> 00:13:33,950
of the features i find really useful to

00:13:30,080 --> 00:13:36,500
just be able to say data frame or series

00:13:33,950 --> 00:13:38,930
dot plot and see and see that the mask

00:13:36,500 --> 00:13:40,880
data isn't appearing on the graph is a

00:13:38,930 --> 00:13:45,350
really quick way of confirming that it's

00:13:40,880 --> 00:13:48,200
worked in the previous example i use

00:13:45,350 --> 00:13:50,630
sites tweets first 1d to see the first

00:13:48,200 --> 00:13:53,570
item in the series there are many ways

00:13:50,630 --> 00:13:55,970
to access the first or last items in a

00:13:53,570 --> 00:13:58,250
series or data frame and some are shown

00:13:55,970 --> 00:14:01,760
here including using a date string to

00:13:58,250 --> 00:14:04,250
access a particular day the last example

00:14:01,760 --> 00:14:06,230
is looking at the first week in 2011 so

00:14:04,250 --> 00:14:09,050
panis has all these powerful sort of

00:14:06,230 --> 00:14:10,310
date time options of ways of looking at

00:14:09,050 --> 00:14:12,800
and I just wanted to give you a quick

00:14:10,310 --> 00:14:15,320
glimpse of those notice that there are

00:14:12,800 --> 00:14:16,700
only two days in the first week of 2011

00:14:15,320 --> 00:14:18,589
so it's not a mistake that there's only

00:14:16,700 --> 00:14:22,010
two things i actually went and checked a

00:14:18,589 --> 00:14:25,370
calendar there is only from the pandas

00:14:22,010 --> 00:14:31,430
week is from monday to sunday so Monday

00:14:25,370 --> 00:14:35,959
and Tuesday were the first week of 2011

00:14:31,430 --> 00:14:38,570
I keep all my pandas dates as UTC so I

00:14:35,959 --> 00:14:40,430
have fewer times own problems but I've

00:14:38,570 --> 00:14:42,890
still have I've still being caught out

00:14:40,430 --> 00:14:45,760
by the way so much software defaults to

00:14:42,890 --> 00:14:50,029
expecting month first date strings and

00:14:45,760 --> 00:14:52,190
so I tend to use the longer pandas or

00:14:50,029 --> 00:14:53,899
datetime function to specify dates to

00:14:52,190 --> 00:14:55,670
make sure I get the date I expect

00:14:53,899 --> 00:14:57,440
because that function expects you to

00:14:55,670 --> 00:14:58,670
give it a year and then comma like it's

00:14:57,440 --> 00:15:00,500
not a string format you're actually

00:14:58,670 --> 00:15:03,470
passing it the date you want to make

00:15:00,500 --> 00:15:05,630
sure you get what you get panda's has

00:15:03,470 --> 00:15:08,260
added a day first parameter date parsing

00:15:05,630 --> 00:15:10,220
function so that might be another way of

00:15:08,260 --> 00:15:14,870
telling it what you're actually doing

00:15:10,220 --> 00:15:17,839
with your dates yeah sorry

00:15:14,870 --> 00:15:19,970
I can zoom in on the earlier graph by

00:15:17,839 --> 00:15:22,700
using a date range or a dating did

00:15:19,970 --> 00:15:25,460
endings sorry or a date range or an

00:15:22,700 --> 00:15:27,680
index range doing this letter to see

00:15:25,460 --> 00:15:29,060
what seems to be a weekly pattern in the

00:15:27,680 --> 00:15:32,960
number of tweets containing the word

00:15:29,060 --> 00:15:35,330
science the semicolon after plot is

00:15:32,960 --> 00:15:37,130
there so that it suppresses the output

00:15:35,330 --> 00:15:38,980
of plot to the notebook so we just get

00:15:37,130 --> 00:15:41,900
the graph we don't get any matplotlib

00:15:38,980 --> 00:15:45,410
sort of conversational stuff that it

00:15:41,900 --> 00:15:48,380
might tell us on the way so is the

00:15:45,410 --> 00:15:50,360
pattern weekly and if it is which our

00:15:48,380 --> 00:15:53,230
days are the peaks and troughs we can't

00:15:50,360 --> 00:15:56,660
tell that from that graph yet quite

00:15:53,230 --> 00:15:59,839
let's zoom in further and add labels on

00:15:56,660 --> 00:16:02,180
Tuesdays and Saturdays I didn't just use

00:15:59,839 --> 00:16:05,089
the matplotlib dates function to format

00:16:02,180 --> 00:16:07,520
the date tick labels because matplotlib

00:16:05,089 --> 00:16:10,370
doesn't understand painless date times

00:16:07,520 --> 00:16:12,380
datetime objects and gives very strange

00:16:10,370 --> 00:16:15,380
results if you try to pass pandas

00:16:12,380 --> 00:16:17,690
datetime objects to it the code shows

00:16:15,380 --> 00:16:21,040
you how to fix the problem by passing

00:16:17,690 --> 00:16:25,130
the pandas data to matplotlib instead of

00:16:21,040 --> 00:16:28,490
using the quick pandas plot option on

00:16:25,130 --> 00:16:31,339
line three the 2 pi date time function

00:16:28,490 --> 00:16:35,120
converts the pandas date x back to

00:16:31,339 --> 00:16:37,790
Python date times so now on this graph

00:16:35,120 --> 00:16:39,260
we can see that the peaks are in the

00:16:37,790 --> 00:16:41,390
middle of the week and the dips are on

00:16:39,260 --> 00:16:44,029
weekends showing that people use this

00:16:41,390 --> 00:16:45,820
word science on Twitter more in the

00:16:44,029 --> 00:16:48,560
middle of the week that on weekends and

00:16:45,820 --> 00:16:50,180
this actually matches a broader pattern

00:16:48,560 --> 00:16:52,370
of Twitter use that other people have

00:16:50,180 --> 00:16:54,950
reported where people generally use

00:16:52,370 --> 00:17:00,589
Twitter more at work or at school than

00:16:54,950 --> 00:17:03,110
at home another thing that pandas makes

00:17:00,589 --> 00:17:06,290
much much easier is resampling for

00:17:03,110 --> 00:17:09,410
different time periods so here I decide

00:17:06,290 --> 00:17:13,550
that my daily frequency I'd rather be

00:17:09,410 --> 00:17:14,750
looking at monthly frequency instead of

00:17:13,550 --> 00:17:16,970
sorry i was looking whether I did it

00:17:14,750 --> 00:17:18,980
weekly or monthly monthly frequency and

00:17:16,970 --> 00:17:21,140
so I resampled bimonthly frequency

00:17:18,980 --> 00:17:23,329
saying that the way I'd like to do that

00:17:21,140 --> 00:17:25,220
is by the mean number of tweets in that

00:17:23,329 --> 00:17:28,030
month and I can choose lots of different

00:17:25,220 --> 00:17:30,340
ways of doing that in that function

00:17:28,030 --> 00:17:32,020
I've plotted then the monthly tweets in

00:17:30,340 --> 00:17:34,390
black so you can see that smooths out

00:17:32,020 --> 00:17:38,680
all the variation and the daily tweets

00:17:34,390 --> 00:17:40,990
in blue on the same graph pandas also

00:17:38,680 --> 00:17:43,510
provides a range of analysis options for

00:17:40,990 --> 00:17:45,790
both series and data frames the

00:17:43,510 --> 00:17:48,310
described function gives the summary of

00:17:45,790 --> 00:17:49,870
the statistics as shown and just gives

00:17:48,310 --> 00:17:52,630
you a bit of a glimpse of the sorts of

00:17:49,870 --> 00:17:54,400
things available it's also easy to use

00:17:52,630 --> 00:18:00,610
pandas with other tools like stats

00:17:54,400 --> 00:18:02,980
models for more advanced analysis a data

00:18:00,610 --> 00:18:04,780
frame can be made by combining series a

00:18:02,980 --> 00:18:07,390
feature of pandas is it automatically

00:18:04,780 --> 00:18:09,790
aligns the data even if the series are

00:18:07,390 --> 00:18:11,920
of different light lengths when working

00:18:09,790 --> 00:18:13,990
with time series data with other

00:18:11,920 --> 00:18:17,050
software this is often really hard to do

00:18:13,990 --> 00:18:19,330
in this case combining the daily tweets

00:18:17,050 --> 00:18:22,840
with the resampled monthly tweets

00:18:19,330 --> 00:18:25,900
results in the in most of the tweets per

00:18:22,840 --> 00:18:28,690
month values being set to missing and

00:18:25,900 --> 00:18:31,000
that's what the not a number are in the

00:18:28,690 --> 00:18:32,710
table it also shows the nice default

00:18:31,000 --> 00:18:36,790
output for a data frame if we don't

00:18:32,710 --> 00:18:40,510
print it if we just have it as the last

00:18:36,790 --> 00:18:44,530
object in our window in ipython it

00:18:40,510 --> 00:18:46,660
displays it in this nice way if it makes

00:18:44,530 --> 00:18:49,500
sense for your data you can also fill

00:18:46,660 --> 00:18:52,030
the not a number values in various ways

00:18:49,500 --> 00:18:54,700
adding columns to a data frame is also

00:18:52,030 --> 00:18:57,460
very easy the first line creates the

00:18:54,700 --> 00:19:00,940
cumulative sum using pandas build in

00:18:57,460 --> 00:19:03,670
cuum sum function built in cumulative

00:19:00,940 --> 00:19:05,620
sum function the second uses the tweets

00:19:03,670 --> 00:19:07,840
per day column to calculate the daily

00:19:05,620 --> 00:19:10,000
percentage of the year's tweets the

00:19:07,840 --> 00:19:14,050
third line uses the data frame index and

00:19:10,000 --> 00:19:16,120
then gets the days of the week and then

00:19:14,050 --> 00:19:18,700
the group by function lets you group the

00:19:16,120 --> 00:19:20,140
data frame in different ways so if we

00:19:18,700 --> 00:19:22,660
wanted to see the number of tweets

00:19:20,140 --> 00:19:24,990
received on each day of the week we

00:19:22,660 --> 00:19:27,610
could you do that like in this group by

00:19:24,990 --> 00:19:29,830
but the but you do have to think about

00:19:27,610 --> 00:19:32,680
what your columns represent because in

00:19:29,830 --> 00:19:34,720
this case the tweets per month and the

00:19:32,680 --> 00:19:39,760
cumulative columns have both become

00:19:34,720 --> 00:19:41,210
rubbish when we've done them as by day

00:19:39,760 --> 00:19:44,179
of week they just don't

00:19:41,210 --> 00:19:46,190
sense anymore so it's easy to exclude

00:19:44,179 --> 00:19:48,049
them by using pandas column selection

00:19:46,190 --> 00:19:50,120
method of double square brackets so we

00:19:48,049 --> 00:19:54,289
just drop them out of the what we're

00:19:50,120 --> 00:19:56,360
working on from then on as I said

00:19:54,289 --> 00:19:58,940
earlier ipython notebook makes checking

00:19:56,360 --> 00:20:00,649
the numbers make sense easy here I check

00:19:58,940 --> 00:20:03,919
that the percentages add to a hundred

00:20:00,649 --> 00:20:06,440
and the sum of tweets per week day is

00:20:03,919 --> 00:20:08,480
the same as the tweets per day so that I

00:20:06,440 --> 00:20:11,659
haven't sort of the group by hasn't done

00:20:08,480 --> 00:20:13,190
something unexpected and the last

00:20:11,659 --> 00:20:15,500
feature of pandas I'd like to show you

00:20:13,190 --> 00:20:18,440
is how easy it is to export a data frame

00:20:15,500 --> 00:20:20,059
to lay tech in the tool a tech method

00:20:18,440 --> 00:20:21,940
I've specified the columns I want

00:20:20,059 --> 00:20:24,740
included and there's lots of other

00:20:21,940 --> 00:20:27,200
parameters you can use to customize

00:20:24,740 --> 00:20:28,730
early heck output if you've worked with

00:20:27,200 --> 00:20:30,529
other software and you're working in

00:20:28,730 --> 00:20:32,929
latex you may have had to do some of the

00:20:30,529 --> 00:20:35,659
painful sort of cutting and pasting that

00:20:32,929 --> 00:20:44,260
this are now avoids to get tables into

00:20:35,659 --> 00:20:44,260
your latex document so any questions

00:20:49,240 --> 00:20:55,390
if anybody's got any questions as usual

00:20:51,890 --> 00:21:02,240
come down to the microphones in front

00:20:55,390 --> 00:21:05,090
Thanks you mentioned if I understand

00:21:02,240 --> 00:21:07,340
correctly that when you start up ipython

00:21:05,090 --> 00:21:09,320
there's some environment that's kind of

00:21:07,340 --> 00:21:12,260
configured into it so that it's like a

00:21:09,320 --> 00:21:14,720
known environment for your plotting yes

00:21:12,260 --> 00:21:16,670
how complex is that to set up um its

00:21:14,720 --> 00:21:19,040
built-in you just put those two lines

00:21:16,670 --> 00:21:22,040
onto the command line and it will

00:21:19,040 --> 00:21:24,740
automatically load so I'm not a hundred

00:21:22,040 --> 00:21:27,110
percent clear on what the pylab includes

00:21:24,740 --> 00:21:29,780
but I know it includes it means it's

00:21:27,110 --> 00:21:31,850
already included numpy and all sort of

00:21:29,780 --> 00:21:33,740
all the things I end up using I don't

00:21:31,850 --> 00:21:37,040
have to include them in my I don't have

00:21:33,740 --> 00:21:39,950
to import them because they're already

00:21:37,040 --> 00:21:42,020
there to be used so I have a bit of an

00:21:39,950 --> 00:21:45,080
ipad some lube side yeah that's fine no

00:21:42,020 --> 00:21:47,060
I was just that so I know that it I mean

00:21:45,080 --> 00:21:49,670
so then I could in my code i could do n

00:21:47,060 --> 00:21:51,560
P dot without having done import numpy

00:21:49,670 --> 00:21:55,370
as NP so it's giving me quite a few of

00:21:51,560 --> 00:21:58,280
those sciency libraries there just by

00:21:55,370 --> 00:22:01,070
default thanks and the pylab in line is

00:21:58,280 --> 00:22:03,290
just stopping the papaya matplotlib

00:22:01,070 --> 00:22:09,950
graphs from popping up into a different

00:22:03,290 --> 00:22:11,900
window hi thanks for a really clear talk

00:22:09,950 --> 00:22:14,030
and that's showing all the steps of what

00:22:11,900 --> 00:22:17,540
you're going through I was wondering if

00:22:14,030 --> 00:22:20,840
you what's the future you see in terms

00:22:17,540 --> 00:22:22,880
of maybe sharing or publishing your

00:22:20,840 --> 00:22:25,190
notebooks actually as part of your

00:22:22,880 --> 00:22:27,320
research or is it just simply for your

00:22:25,190 --> 00:22:29,750
own benefit that you are using them in

00:22:27,320 --> 00:22:31,220
this way yeah that's a great question I

00:22:29,750 --> 00:22:34,550
think that's one of the things I really

00:22:31,220 --> 00:22:38,000
I'm really excited about this I have got

00:22:34,550 --> 00:22:41,270
a one of my notebooks open the one that

00:22:38,000 --> 00:22:45,650
I've just been working i'll put that up

00:22:41,270 --> 00:22:47,690
so the notebook as it's used during the

00:22:45,650 --> 00:22:51,380
research probably wouldn't be published

00:22:47,690 --> 00:22:52,940
so i'll just this one has you know I

00:22:51,380 --> 00:22:55,280
first of all I just tried to do a

00:22:52,940 --> 00:22:57,770
Fourier transform I'll just whiz down

00:22:55,280 --> 00:23:00,800
not looking at any of the code then I'll

00:22:57,770 --> 00:23:02,820
sorry it hasn't gone up there sorry oh I

00:23:00,800 --> 00:23:06,000
will do won't do that

00:23:02,820 --> 00:23:08,880
basically there's now a notebook NB

00:23:06,000 --> 00:23:10,919
viewer is available to let you publish

00:23:08,880 --> 00:23:12,480
notebooks as read-only but then people

00:23:10,919 --> 00:23:13,740
can also download the notebook and it

00:23:12,480 --> 00:23:16,679
becomes runnable again when they've

00:23:13,740 --> 00:23:17,759
downloaded it so yes I think I Python

00:23:16,679 --> 00:23:19,830
notebook is going to be a really

00:23:17,759 --> 00:23:22,019
valuable tool for open science because

00:23:19,830 --> 00:23:23,460
it lets you already lots of people are

00:23:22,019 --> 00:23:28,019
publishing their notebooks through this

00:23:23,460 --> 00:23:29,700
Envy viewer option and it will be I

00:23:28,019 --> 00:23:31,500
think it will be a way that you will it

00:23:29,700 --> 00:23:33,899
because you can include latex and all

00:23:31,500 --> 00:23:36,600
sorts of other stuff our math stuff into

00:23:33,899 --> 00:23:38,009
your ipython notebook you'll be able to

00:23:36,600 --> 00:23:40,830
actually write your whole paper in

00:23:38,009 --> 00:23:43,980
ipython notebook and publish it with the

00:23:40,830 --> 00:23:46,289
data and the code sort of in it which

00:23:43,980 --> 00:23:48,779
will be really an interesting step

00:23:46,289 --> 00:23:50,399
forward I guess my question was are you

00:23:48,779 --> 00:23:52,919
actually intending to do that with your

00:23:50,399 --> 00:23:55,259
research I'm hoping to do that it will

00:23:52,919 --> 00:23:59,029
be a bit of extra work because of having

00:23:55,259 --> 00:24:02,279
to I wouldn't want to put publish all my

00:23:59,029 --> 00:24:04,470
sort of intermediate steps but I do

00:24:02,279 --> 00:24:07,620
think it's worth I do tend to for each

00:24:04,470 --> 00:24:10,169
chapter that I'm writing condense all

00:24:07,620 --> 00:24:13,139
the things that create the final tables

00:24:10,169 --> 00:24:15,750
and graphs into a couple files and my

00:24:13,139 --> 00:24:17,340
intention is when I finish the PhD to go

00:24:15,750 --> 00:24:18,929
back through those and maybe clean them

00:24:17,340 --> 00:24:20,789
have a little bit more and then publish

00:24:18,929 --> 00:24:22,559
all of those so that people can repeat

00:24:20,789 --> 00:24:24,179
what I've done the problem with Twitter

00:24:22,559 --> 00:24:25,649
data is I'm not allowed to publish the

00:24:24,179 --> 00:24:28,019
Twitter data Twitter's put really big

00:24:25,649 --> 00:24:30,539
restrictions on researchers so what I

00:24:28,019 --> 00:24:33,960
have to also do I can publish the Python

00:24:30,539 --> 00:24:36,870
code and all the record error ideas for

00:24:33,960 --> 00:24:38,399
you to re extract all its pasta but for

00:24:36,870 --> 00:24:44,429
12 million records you might have to

00:24:38,399 --> 00:24:46,529
wait a little while this might not be a

00:24:44,429 --> 00:24:47,789
map i think question and if we don't

00:24:46,529 --> 00:24:49,649
have time it might not be worth

00:24:47,789 --> 00:24:53,610
discussing but i'm in your original

00:24:49,649 --> 00:24:58,440
Twitter data set how did you handle the

00:24:53,610 --> 00:24:59,879
term science for science versus science

00:24:58,440 --> 00:25:01,949
fiction say or

00:24:59,879 --> 00:25:04,679
all other uses of the word and were you

00:25:01,949 --> 00:25:07,199
looking at that and did you use Python

00:25:04,679 --> 00:25:11,639
to filter that said at all or anything

00:25:07,199 --> 00:25:14,099
like that the filtering I've done is has

00:25:11,639 --> 00:25:15,959
been using Python and because that's

00:25:14,099 --> 00:25:17,759
been part of the analysis so the

00:25:15,959 --> 00:25:21,599
original collection just collects every

00:25:17,759 --> 00:25:23,459
tweet with the word science and so it

00:25:21,599 --> 00:25:25,829
does turn out that I've got well part of

00:25:23,459 --> 00:25:27,509
my foreign language to filtering was

00:25:25,829 --> 00:25:30,569
because I have a problem with my data

00:25:27,509 --> 00:25:32,969
that science fiction is actually a use

00:25:30,569 --> 00:25:34,589
word in lots of foreign languages so you

00:25:32,969 --> 00:25:38,609
do pick up a lot of foreign language

00:25:34,589 --> 00:25:41,849
tweets using science so but that

00:25:38,609 --> 00:25:50,099
filtering was done in Python yes for

00:25:41,849 --> 00:25:52,559
that does that answer thanks for a great

00:25:50,099 --> 00:25:53,789
talk I hadn't actually seen some of

00:25:52,559 --> 00:25:58,549
those virtual environment stuff and

00:25:53,789 --> 00:26:01,159
that's very exciting so my question is

00:25:58,549 --> 00:26:03,719
brain like yep oh yeah revision control

00:26:01,159 --> 00:26:07,289
so I'm I'm a software engineer i work in

00:26:03,719 --> 00:26:09,509
industry i'm just wondering how much do

00:26:07,289 --> 00:26:10,829
you use revision and control and is it

00:26:09,509 --> 00:26:13,799
possible to use it with i passed the

00:26:10,829 --> 00:26:15,569
notebook and yeah ipython notebook is

00:26:13,799 --> 00:26:18,989
i'm going to get this wrong but i think

00:26:15,569 --> 00:26:21,449
it's a json format so it is it's a you

00:26:18,989 --> 00:26:23,639
know because it can have images in it

00:26:21,449 --> 00:26:26,129
they'll also be saved in the JSON file

00:26:23,639 --> 00:26:28,049
so they can get bit bulky and not ideal

00:26:26,129 --> 00:26:31,409
for version control like because you've

00:26:28,049 --> 00:26:34,259
got text mixed in with data but it works

00:26:31,409 --> 00:26:37,289
and I do use version control and big fan

00:26:34,259 --> 00:26:39,809
of get and I've noticed in the latest

00:26:37,289 --> 00:26:41,879
version of ipython notebook that they

00:26:39,809 --> 00:26:43,319
now have checkpointing so I think

00:26:41,879 --> 00:26:45,389
they're moving towards is great

00:26:43,319 --> 00:26:47,279
integrating with version control within

00:26:45,389 --> 00:26:49,349
the notebook so they have autosave is

00:26:47,279 --> 00:26:52,709
just the one that came out last week now

00:26:49,349 --> 00:26:55,769
has auto save and then when you save it

00:26:52,709 --> 00:26:57,149
says checkpoint set so they're doing

00:26:55,769 --> 00:26:59,509
some sort of version control anything

00:26:57,149 --> 00:26:59,509
now too

00:27:01,770 --> 00:27:08,620
cool thanks a lot Brenda for your

00:27:05,170 --> 00:27:13,680
troubles there is some Norwegian blue

00:27:08,620 --> 00:27:13,680

YouTube URL: https://www.youtube.com/watch?v=xoFZPCziIac


