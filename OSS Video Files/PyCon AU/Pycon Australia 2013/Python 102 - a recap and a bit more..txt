Title: Python 102 - a recap and a bit more.
Publication date: 2013-07-11
Playlist: Pycon Australia 2013
Description: 
	Peter Lovett
http://2013.pycon-au.org/schedule/30088/view_talk
Self taught in Python? Think you missed a bit? This 90 minutes will fix everything. From a really quick recap of the bare-bones essentials, you'll get a good grasp and the core of Python. Want to know more about classes, objects and more? This is for you. Also suitable for beginners who need a quick start.
* Recap of the essentials
* Understanding the object model
* Everything you've ever wanted to know about dictionaries
* Build
Captions: 
	00:00:01,439 --> 00:00:04,319
thank you thank you thank you very much

00:00:02,800 --> 00:00:06,640
thank you thank you very much

00:00:04,319 --> 00:00:07,440
welcome to python 102 and uh to the

00:00:06,640 --> 00:00:10,559
first uh

00:00:07,440 --> 00:00:11,759
session of uh pycon after the keynote

00:00:10,559 --> 00:00:13,599
great to see you all here thanks for

00:00:11,759 --> 00:00:16,320
coming um

00:00:13,599 --> 00:00:17,600
this is python 102. so this is a

00:00:16,320 --> 00:00:19,920
introductory

00:00:17,600 --> 00:00:21,680
level or it's a it's a slightly above

00:00:19,920 --> 00:00:23,680
the introductory level

00:00:21,680 --> 00:00:26,000
particularly aimed at those that are

00:00:23,680 --> 00:00:27,199
self-taught in python

00:00:26,000 --> 00:00:28,720
i'm going to make sure that you know all

00:00:27,199 --> 00:00:29,279
the essential stuff that you really need

00:00:28,720 --> 00:00:31,199
to know

00:00:29,279 --> 00:00:32,320
that will help make a lot of the rest of

00:00:31,199 --> 00:00:34,880
the

00:00:32,320 --> 00:00:36,320
these sessions go well so that you'll

00:00:34,880 --> 00:00:38,800
understand them

00:00:36,320 --> 00:00:39,520
um a little bit about me i am peter

00:00:38,800 --> 00:00:42,640
lovett

00:00:39,520 --> 00:00:45,680
second generation programmer and um

00:00:42,640 --> 00:00:47,520
my father was a programmer i've been

00:00:45,680 --> 00:00:48,800
programming being paid to program since

00:00:47,520 --> 00:00:53,199
1982.

00:00:48,800 --> 00:00:53,199
anyone here born after 82

00:00:53,840 --> 00:00:58,079
excellent i've been programming longer

00:00:57,680 --> 00:01:01,120
than

00:00:58,079 --> 00:01:05,600
longer than that 31 years i

00:01:01,120 --> 00:01:08,720
am i'm also curiously 31 in 31 years old

00:01:05,600 --> 00:01:11,920
that is in hexadecimal or

00:01:08,720 --> 00:01:13,280
23 base 23 which is a curious bit of

00:01:11,920 --> 00:01:15,520
curiosity

00:01:13,280 --> 00:01:17,360
um i professionally run training courses

00:01:15,520 --> 00:01:20,960
so i've worked as a programmer

00:01:17,360 --> 00:01:21,840
since 1982 these days about half of my

00:01:20,960 --> 00:01:24,080
time is

00:01:21,840 --> 00:01:24,960
working as a trainer so i go to

00:01:24,080 --> 00:01:27,439
corporations

00:01:24,960 --> 00:01:28,640
and run courses in a variety of

00:01:27,439 --> 00:01:32,320
languages c c

00:01:28,640 --> 00:01:36,320
plus pearl python java xml sql

00:01:32,320 --> 00:01:37,520
powershell etc unix shell script

00:01:36,320 --> 00:01:40,079
that's what i do and i've been running

00:01:37,520 --> 00:01:42,960
training courses since 1985 running

00:01:40,079 --> 00:01:45,920
python training courses since 2007

00:01:42,960 --> 00:01:47,759
and i love programming anyone else here

00:01:45,920 --> 00:01:49,759
love programming

00:01:47,759 --> 00:01:52,240
it's a joy i love what alex said about

00:01:49,759 --> 00:01:53,759
the art i just love that aspect

00:01:52,240 --> 00:01:55,200
of programming and that's one of the

00:01:53,759 --> 00:01:56,640
things that i love about python is that

00:01:55,200 --> 00:01:57,520
it gives us the ability to be very

00:01:56,640 --> 00:01:59,840
expressive

00:01:57,520 --> 00:02:00,960
in an artistic way if i cannot be too

00:01:59,840 --> 00:02:04,079
weird

00:02:00,960 --> 00:02:05,600
um and i love python python is just one

00:02:04,079 --> 00:02:07,040
of those very few languages of the

00:02:05,600 --> 00:02:08,720
languages that i use

00:02:07,040 --> 00:02:10,560
that gives us an enormous breadth of

00:02:08,720 --> 00:02:12,640
scope from very beginners

00:02:10,560 --> 00:02:14,800
that it still works as much better

00:02:12,640 --> 00:02:17,440
learning language than basic or pascal

00:02:14,800 --> 00:02:21,200
or one of those sorts of

00:02:17,440 --> 00:02:23,680
i could not swear this is being recorded

00:02:21,200 --> 00:02:25,040
one of those less lovely languages

00:02:23,680 --> 00:02:27,680
visual basic

00:02:25,040 --> 00:02:28,319
um and it's a lot easier than c plus or

00:02:27,680 --> 00:02:30,239
java

00:02:28,319 --> 00:02:32,000
or those nasty languages that are full

00:02:30,239 --> 00:02:35,360
of uh challenge

00:02:32,000 --> 00:02:38,800
i do still do a lot of work in c plus

00:02:35,360 --> 00:02:42,160
and other languages um i'm here

00:02:38,800 --> 00:02:45,440
as hello

00:02:42,160 --> 00:02:47,360
uh on behalf of my company plus plus

00:02:45,440 --> 00:02:49,120
um and as i said i've been running

00:02:47,360 --> 00:02:52,319
training courses since 85 in

00:02:49,120 --> 00:02:53,920
a variety of languages and if you want

00:02:52,319 --> 00:02:56,959
to contact me after the

00:02:53,920 --> 00:02:58,760
after the course the best place to get

00:02:56,959 --> 00:03:01,519
me is through my website

00:02:58,760 --> 00:03:03,280
plusplus.com.edu

00:03:01,519 --> 00:03:05,040
and i will just make a quick mention

00:03:03,280 --> 00:03:07,280
that i am doing a special

00:03:05,040 --> 00:03:08,560
so if any of you go like what you learn

00:03:07,280 --> 00:03:10,800
here and get back to your

00:03:08,560 --> 00:03:11,680
company and go we need to learn a whole

00:03:10,800 --> 00:03:14,560
lot more

00:03:11,680 --> 00:03:15,280
um i'm very open to coming to your

00:03:14,560 --> 00:03:17,120
company and

00:03:15,280 --> 00:03:18,959
running a training course and i will

00:03:17,120 --> 00:03:21,599
give you a special discount

00:03:18,959 --> 00:03:24,640
for any new on-site bookings if you say

00:03:21,599 --> 00:03:28,080
i saw you at pycon

00:03:24,640 --> 00:03:29,360
and say that you loved me so

00:03:28,080 --> 00:03:31,200
an overview of what we're going to cover

00:03:29,360 --> 00:03:33,040
this morning now this is the classroom

00:03:31,200 --> 00:03:35,360
track so this is a

00:03:33,040 --> 00:03:36,720
a lot of a lot of actual hands-on stuff

00:03:35,360 --> 00:03:38,720
if you've got a laptop this is a great

00:03:36,720 --> 00:03:39,120
time to whip it out get it going fire up

00:03:38,720 --> 00:03:40,879
your

00:03:39,120 --> 00:03:42,480
your python interpreter get your editor

00:03:40,879 --> 00:03:42,959
going because there's going to be a lot

00:03:42,480 --> 00:03:47,280
of

00:03:42,959 --> 00:03:48,799
opportunity for you to do hands-on stuff

00:03:47,280 --> 00:03:51,599
if you don't have a laptop take lots of

00:03:48,799 --> 00:03:53,120
notes in fact what i'll do if you don't

00:03:51,599 --> 00:03:56,000
have a laptop

00:03:53,120 --> 00:03:57,280
even if you do have a laptop everyone

00:03:56,000 --> 00:04:01,840
wins a free pen

00:03:57,280 --> 00:04:01,840
so take a pen and pass the box along

00:04:02,799 --> 00:04:07,040
so take lots of notes as far as the aim

00:04:06,080 --> 00:04:10,400
here i'm

00:04:07,040 --> 00:04:11,439
i'm starting i'm predominantly targeting

00:04:10,400 --> 00:04:13,040
two point

00:04:11,439 --> 00:04:14,560
most of my clients are still running two

00:04:13,040 --> 00:04:18,479
point something

00:04:14,560 --> 00:04:20,720
i've got a few still on 2.4 any 2.4s

00:04:18,479 --> 00:04:23,919
here

00:04:20,720 --> 00:04:25,280
good 2.5 is much better i'll be running

00:04:23,919 --> 00:04:26,880
2.7

00:04:25,280 --> 00:04:28,240
but i'm going to throw a bit of 3 in

00:04:26,880 --> 00:04:29,280
there as well i've got a couple of

00:04:28,240 --> 00:04:32,000
clients that are now

00:04:29,280 --> 00:04:34,320
um commercially using three so three is

00:04:32,000 --> 00:04:37,440
at a stage now where it's useful to work

00:04:34,320 --> 00:04:39,120
um in so i'll be throwing a few

00:04:37,440 --> 00:04:42,400
bits of three in there there's

00:04:39,120 --> 00:04:45,759
permission to ask questions such as

00:04:42,400 --> 00:04:45,759
what have the romans ever done for us

00:04:46,160 --> 00:04:50,600
what have they done for us anyone the

00:04:49,120 --> 00:04:54,800
roads

00:04:50,600 --> 00:04:57,120
sanitation education

00:04:54,800 --> 00:04:58,240
yes but apart from the roads education

00:04:57,120 --> 00:05:01,280
sanitation

00:04:58,240 --> 00:05:03,120
and peace can't forget peace

00:05:01,280 --> 00:05:05,199
uh just a reminder that python of course

00:05:03,120 --> 00:05:05,759
is not named after the animal that can

00:05:05,199 --> 00:05:08,880
kill

00:05:05,759 --> 00:05:12,000
but rather is named after monty python

00:05:08,880 --> 00:05:15,440
the english comedy troupe and so

00:05:12,000 --> 00:05:16,800
in um in deference to them i will be

00:05:15,440 --> 00:05:20,240
continuing the very

00:05:16,800 --> 00:05:23,600
uh low standard of jokes and

00:05:20,240 --> 00:05:25,520
apologies in advance for all of that

00:05:23,600 --> 00:05:26,639
my aim for you at the end of this is to

00:05:25,520 --> 00:05:27,919
get you to a level where

00:05:26,639 --> 00:05:30,400
the rest of the conference makes more

00:05:27,919 --> 00:05:32,320
sense so that you can solidify your

00:05:30,400 --> 00:05:35,360
knowledge and understanding of python

00:05:32,320 --> 00:05:36,000
and then use that as a as a launching

00:05:35,360 --> 00:05:40,080
pad for

00:05:36,000 --> 00:05:41,360
other sessions the target audience is as

00:05:40,080 --> 00:05:45,039
i said for beginner

00:05:41,360 --> 00:05:46,880
to intermediate happy person

00:05:45,039 --> 00:05:48,400
so the topics that we're going to cover

00:05:46,880 --> 00:05:48,800
uh we're going to start off with just a

00:05:48,400 --> 00:05:51,199
very

00:05:48,800 --> 00:05:52,639
very quick recap of the ground level

00:05:51,199 --> 00:05:56,000
essentials

00:05:52,639 --> 00:05:58,080
so um maybe i should

00:05:56,000 --> 00:06:00,240
check there about you that's a bit about

00:05:58,080 --> 00:06:02,240
me this is a bit about the core

00:06:00,240 --> 00:06:03,440
about the about the session i need to

00:06:02,240 --> 00:06:07,199
find out a bit about you

00:06:03,440 --> 00:06:09,680
so who would classify themselves as

00:06:07,199 --> 00:06:10,800
a regular user of python you would use

00:06:09,680 --> 00:06:14,639
it okay

00:06:10,800 --> 00:06:17,600
okay yep who's never seen python

00:06:14,639 --> 00:06:19,520
no okay yeah that's fine if you've never

00:06:17,600 --> 00:06:20,319
seen or you've only dabbled a little bit

00:06:19,520 --> 00:06:22,319
in python

00:06:20,319 --> 00:06:23,600
who's just sort of dabbled in python

00:06:22,319 --> 00:06:26,880
python's uh

00:06:23,600 --> 00:06:29,039
good and i need to get a bit of a

00:06:26,880 --> 00:06:30,960
background on other languages so who's

00:06:29,039 --> 00:06:35,199
familiar with other languages

00:06:30,960 --> 00:06:38,880
say c c plus plus okay lovely

00:06:35,199 --> 00:06:41,919
um java people boo

00:06:38,880 --> 00:06:44,000
visual basic ah they're even admitting

00:06:41,919 --> 00:06:44,000
it

00:06:44,479 --> 00:06:48,560
well done you are brave uh what else we

00:06:46,639 --> 00:06:52,960
got ruby

00:06:48,560 --> 00:06:56,720
um esoteric languages lua haskell

00:06:52,960 --> 00:07:01,039
okay what else did i mean cobol

00:06:56,720 --> 00:07:04,479
oh right awesome fortran

00:07:01,039 --> 00:07:06,319
nice okay good thank you oh how could i

00:07:04,479 --> 00:07:09,120
forget

00:07:06,319 --> 00:07:11,520
uh i've i've got a bit of a fondness

00:07:09,120 --> 00:07:13,120
around pearl i used pearl extensively

00:07:11,520 --> 00:07:15,599
before i got to python

00:07:13,120 --> 00:07:17,280
um and i do still actually support a few

00:07:15,599 --> 00:07:18,560
things that run pearl my website still

00:07:17,280 --> 00:07:23,120
runs pearl

00:07:18,560 --> 00:07:24,800
pearl programmers yes okay just a couple

00:07:23,120 --> 00:07:27,759
don't bother for those that don't know

00:07:24,800 --> 00:07:29,840
pearl just stay with python

00:07:27,759 --> 00:07:30,960
and i'd like to get a little bit of

00:07:29,840 --> 00:07:34,000
information about your

00:07:30,960 --> 00:07:35,840
uh your target so who's using

00:07:34,000 --> 00:07:37,199
python or intends to use python for

00:07:35,840 --> 00:07:39,440
web-based stuff

00:07:37,199 --> 00:07:40,240
coming for okay okay quite a lot of you

00:07:39,440 --> 00:07:41,759
yep

00:07:40,240 --> 00:07:43,680
as it turns out i actually don't do a

00:07:41,759 --> 00:07:45,520
lot of python web stuff

00:07:43,680 --> 00:07:48,400
getting into that a bit more now are

00:07:45,520 --> 00:07:50,800
using python for sysadmin sort of tasks

00:07:48,400 --> 00:07:51,919
yup might get rid of bash get rid of

00:07:50,800 --> 00:07:55,919
those sorts of things

00:07:51,919 --> 00:07:59,280
good um scientific mathematical

00:07:55,919 --> 00:08:02,479
simulations okay quite a few of you good

00:07:59,280 --> 00:08:03,360
and uh and um for using um python for

00:08:02,479 --> 00:08:06,720
build process

00:08:03,360 --> 00:08:08,560
testing creating other systems yep okay

00:08:06,720 --> 00:08:10,560
i actually use python extensively for my

00:08:08,560 --> 00:08:12,560
c plus plus build process

00:08:10,560 --> 00:08:13,599
it's just a very nice tool to use for

00:08:12,560 --> 00:08:16,800
that as well

00:08:13,599 --> 00:08:19,039
good thanks for that um

00:08:16,800 --> 00:08:20,319
now i'm also quite happy to tell you

00:08:19,039 --> 00:08:21,919
about the structure here is that we've

00:08:20,319 --> 00:08:24,240
got 90 minutes so there'll be two

00:08:21,919 --> 00:08:25,680
45-minute sessions and we'll be having a

00:08:24,240 --> 00:08:27,919
break in the middle

00:08:25,680 --> 00:08:29,440
for some of you you might go after the

00:08:27,919 --> 00:08:31,199
first half oh i've got enough i

00:08:29,440 --> 00:08:32,880
understand what i need to know i'm happy

00:08:31,199 --> 00:08:36,240
for you to leave then

00:08:32,880 --> 00:08:37,680
if everyone leaves maybe if you could

00:08:36,240 --> 00:08:39,599
tell me

00:08:37,680 --> 00:08:41,200
before then that you need more so i'll

00:08:39,599 --> 00:08:42,159
be giving you lots of opportunities to

00:08:41,200 --> 00:08:45,360
ask questions

00:08:42,159 --> 00:08:47,600
and um while i'm aiming at a

00:08:45,360 --> 00:08:49,839
beginner intermediate level i'm quite

00:08:47,600 --> 00:08:50,320
happy to go to the benja noodle sort of

00:08:49,839 --> 00:08:51,839
end

00:08:50,320 --> 00:08:54,720
for those of you that want to go down

00:08:51,839 --> 00:08:58,000
that uh down that path

00:08:54,720 --> 00:09:00,160
i thought that's not my um my primary

00:08:58,000 --> 00:09:01,760
focus so we're going to do a recap of

00:09:00,160 --> 00:09:04,160
the essentials for those that aren't

00:09:01,760 --> 00:09:05,440
terribly familiar with the the

00:09:04,160 --> 00:09:06,959
essentials

00:09:05,440 --> 00:09:08,480
understanding the object model is a

00:09:06,959 --> 00:09:10,320
crucial aspect of

00:09:08,480 --> 00:09:12,000
python lots of people that have come

00:09:10,320 --> 00:09:15,680
from other languages don't quite

00:09:12,000 --> 00:09:19,200
get how python's objects work and even

00:09:15,680 --> 00:09:20,320
how variables work and i don't even like

00:09:19,200 --> 00:09:22,480
to talk about

00:09:20,320 --> 00:09:24,000
variables in python i don't think that's

00:09:22,480 --> 00:09:27,760
a helpful uh

00:09:24,000 --> 00:09:30,080
con concept or context um

00:09:27,760 --> 00:09:32,399
we're going to do a bit on objects uh

00:09:30,080 --> 00:09:34,480
the joy of dictionaries

00:09:32,399 --> 00:09:35,440
you can't be a python programmer and not

00:09:34,480 --> 00:09:38,480
have an intimate

00:09:35,440 --> 00:09:41,040
love for dictionaries dictionaries are

00:09:38,480 --> 00:09:41,600
part of the heart and soul of python

00:09:41,040 --> 00:09:43,920
i've heard

00:09:41,600 --> 00:09:45,600
some i haven't actually verified this

00:09:43,920 --> 00:09:48,080
but i heard someone say that the

00:09:45,600 --> 00:09:48,880
code that is in core python for handling

00:09:48,080 --> 00:09:52,080
dictionaries

00:09:48,880 --> 00:09:53,920
is the most optimized code in the world

00:09:52,080 --> 00:09:55,360
i don't have any benchmark for

00:09:53,920 --> 00:09:57,040
establishing that but

00:09:55,360 --> 00:09:58,560
it's really really good and therefore

00:09:57,040 --> 00:09:59,600
it's really really fast and it's really

00:09:58,560 --> 00:10:02,079
really efficient

00:09:59,600 --> 00:10:03,519
and it's a great thing to use a lot of

00:10:02,079 --> 00:10:05,680
so if you're coming from the c

00:10:03,519 --> 00:10:08,000
c plus plus background you're probably

00:10:05,680 --> 00:10:10,880
not doing a lot of dictionary stuff

00:10:08,000 --> 00:10:12,000
and it's a lovely thing to get used to

00:10:10,880 --> 00:10:13,200
we're going to do quite a bit of stuff

00:10:12,000 --> 00:10:14,640
on building on type so

00:10:13,200 --> 00:10:17,040
aggregating types we'll start off with

00:10:14,640 --> 00:10:19,360
the simple types in strings

00:10:17,040 --> 00:10:21,040
maybe a bit on longs floats and then

00:10:19,360 --> 00:10:22,800
we'll get into lists tuples

00:10:21,040 --> 00:10:24,720
and then build on those what if i need a

00:10:22,800 --> 00:10:25,920
list of lists lists of tuples two

00:10:24,720 --> 00:10:28,720
dimensional lists how

00:10:25,920 --> 00:10:30,959
they work how do they how do they work

00:10:28,720 --> 00:10:32,800
we're going to create our own types

00:10:30,959 --> 00:10:34,079
object-oriented programming is something

00:10:32,800 --> 00:10:37,120
that's innate to

00:10:34,079 --> 00:10:39,040
python programmers because well

00:10:37,120 --> 00:10:40,399
everything's an object that's the way it

00:10:39,040 --> 00:10:43,279
works in python

00:10:40,399 --> 00:10:47,200
everything is an object and when i say

00:10:43,279 --> 00:10:50,240
everything's an object what i mean is um

00:10:47,200 --> 00:10:53,440
everything is an object that is uh

00:10:50,240 --> 00:10:56,160
insert objects functions are objects

00:10:53,440 --> 00:10:57,920
modules are objects and therefore can be

00:10:56,160 --> 00:10:59,120
passed around we can take references to

00:10:57,920 --> 00:11:01,920
them

00:10:59,120 --> 00:11:04,000
and near the end i'll give you a quick

00:11:01,920 --> 00:11:05,519
tour of the standard library

00:11:04,000 --> 00:11:07,600
as most of you are familiar the

00:11:05,519 --> 00:11:10,399
batteries are included

00:11:07,600 --> 00:11:12,240
which is uh that is you can arrive i can

00:11:10,399 --> 00:11:12,880
go to a client and if they've got python

00:11:12,240 --> 00:11:16,720
on there

00:11:12,880 --> 00:11:18,320
i know i can do my job i know i've got a

00:11:16,720 --> 00:11:20,959
i've got all the stuff i need to do web

00:11:18,320 --> 00:11:23,200
connections i can pull stuff down i can

00:11:20,959 --> 00:11:24,240
mung data i can work with csv files i

00:11:23,200 --> 00:11:26,480
can do everything

00:11:24,240 --> 00:11:28,000
if i've got python on there i might not

00:11:26,480 --> 00:11:30,880
have every single module that i

00:11:28,000 --> 00:11:31,839
want um some of my clients have some

00:11:30,880 --> 00:11:34,079
great challenges

00:11:31,839 --> 00:11:35,360
in getting stuff installed on their

00:11:34,079 --> 00:11:36,720
production servers

00:11:35,360 --> 00:11:38,560
you may work in that sort of an

00:11:36,720 --> 00:11:41,120
environment so if you've got python well

00:11:38,560 --> 00:11:44,480
at least you can do your essential work

00:11:41,120 --> 00:11:48,160
without too much too much drama

00:11:44,480 --> 00:11:48,160
so that's the

00:11:48,800 --> 00:11:52,480
that's the overview step one um if you

00:11:51,360 --> 00:11:54,560
haven't got python

00:11:52,480 --> 00:11:56,639
you can probably even pull it down now

00:11:54,560 --> 00:11:58,079
if you're on anything except windows

00:11:56,639 --> 00:12:01,760
you've probably already got it

00:11:58,079 --> 00:12:03,440
yay actually i should

00:12:01,760 --> 00:12:06,000
i should just do a quick check about um

00:12:03,440 --> 00:12:06,560
platforms who predominantly develops on

00:12:06,000 --> 00:12:10,480
um

00:12:06,560 --> 00:12:15,120
say os x max okay

00:12:10,480 --> 00:12:17,760
ubuntu other linux

00:12:15,120 --> 00:12:17,760
windows

00:12:18,240 --> 00:12:23,279
not too bad good thank you i'm actually

00:12:21,920 --> 00:12:24,800
running windows here

00:12:23,279 --> 00:12:26,519
a lot of my corporate clients run

00:12:24,800 --> 00:12:27,680
windows if you haven't got

00:12:26,519 --> 00:12:29,040
pythonpython.org

00:12:27,680 --> 00:12:31,200
is where you can get it if you're on

00:12:29,040 --> 00:12:33,920
windows the active state

00:12:31,200 --> 00:12:36,000
active python is just python but it does

00:12:33,920 --> 00:12:39,519
come with a couple of very good

00:12:36,000 --> 00:12:41,519
extensions the win32 api modules means

00:12:39,519 --> 00:12:42,959
that i can get at the registry i can do

00:12:41,519 --> 00:12:44,720
all of that sort of stuff

00:12:42,959 --> 00:12:46,639
and that actually is pre-installed with

00:12:44,720 --> 00:12:47,839
active python

00:12:46,639 --> 00:12:51,519
pick your version whichever you're going

00:12:47,839 --> 00:12:51,519
to use two point or three

00:12:51,680 --> 00:12:54,320
the other challenge that we've got

00:12:52,880 --> 00:12:55,839
particularly on some platforms is

00:12:54,320 --> 00:12:56,880
whether you're going for 32-bit or

00:12:55,839 --> 00:12:59,120
64-bit

00:12:56,880 --> 00:13:00,240
you need to make that decision i'm

00:12:59,120 --> 00:13:03,120
running uh

00:13:00,240 --> 00:13:04,079
i'm running a 64-bit operating system as

00:13:03,120 --> 00:13:06,639
we almost all

00:13:04,079 --> 00:13:07,680
are but python 32-bit is a little better

00:13:06,639 --> 00:13:10,480
sorted for

00:13:07,680 --> 00:13:11,839
uh some external modules particularly

00:13:10,480 --> 00:13:14,959
things like pie game

00:13:11,839 --> 00:13:16,880
on things like that and

00:13:14,959 --> 00:13:18,399
choose your tools now intentionally for

00:13:16,880 --> 00:13:19,760
this particular session i'm going with

00:13:18,399 --> 00:13:21,920
the real bare bones

00:13:19,760 --> 00:13:23,279
i'm not using any ides i've got a couple

00:13:21,920 --> 00:13:26,560
that i particularly like i might give

00:13:23,279 --> 00:13:26,560
you some demos of some of those

00:13:27,760 --> 00:13:32,079
eclipse pie dev pie charm is a lovely

00:13:31,200 --> 00:13:34,959
one

00:13:32,079 --> 00:13:36,079
from jet brains for my java friends that

00:13:34,959 --> 00:13:39,199
have used

00:13:36,079 --> 00:13:40,160
intellij lovely lovely excellent ide

00:13:39,199 --> 00:13:42,800
komodo from

00:13:40,160 --> 00:13:45,040
active state is a cross platform as as

00:13:42,800 --> 00:13:47,760
are those other two as well

00:13:45,040 --> 00:13:48,800
ides for this for this session i'm just

00:13:47,760 --> 00:13:50,480
going to stick with some

00:13:48,800 --> 00:13:54,320
some real basics i'm just going to use

00:13:50,480 --> 00:13:54,320
notepad and uh command window

00:13:54,800 --> 00:13:58,480
so the essentials

00:14:00,839 --> 00:14:08,240
okay let's get going

00:14:05,600 --> 00:14:09,760
so what a python programmer always has

00:14:08,240 --> 00:14:11,920
is a python shell

00:14:09,760 --> 00:14:13,199
without you just you just have that up

00:14:11,920 --> 00:14:15,360
and running always

00:14:13,199 --> 00:14:16,800
it's like i can't program in python if i

00:14:15,360 --> 00:14:18,560
don't have a

00:14:16,800 --> 00:14:20,320
python shell just sitting there running

00:14:18,560 --> 00:14:22,000
how does that work oh i don't know

00:14:20,320 --> 00:14:24,079
jump over to the shell ah that's what

00:14:22,000 --> 00:14:24,639
that does what are the methods that oh i

00:14:24,079 --> 00:14:28,320
can just

00:14:24,639 --> 00:14:31,519
hammer it in there's my answer

00:14:28,320 --> 00:14:32,959
i'll just bend that out a little so as

00:14:31,519 --> 00:14:36,959
most of you know

00:14:32,959 --> 00:14:39,279
you can um you can do a print in python

00:14:36,959 --> 00:14:44,480
and you enclose strings in um what is it

00:14:39,279 --> 00:14:47,760
double quotes or single quotes

00:14:44,480 --> 00:14:50,399
and the answer is what do you use

00:14:47,760 --> 00:14:51,760
doubles if you're a c programmer you're

00:14:50,399 --> 00:14:53,199
probably still using doubles just

00:14:51,760 --> 00:14:55,760
because that's what you do

00:14:53,199 --> 00:14:56,639
um python people tend to use single

00:14:55,760 --> 00:14:59,920
quotes

00:14:56,639 --> 00:15:02,560
reason for that is um it uses um

00:14:59,920 --> 00:15:02,959
less toner when you go to print it it's

00:15:02,560 --> 00:15:05,680
very

00:15:02,959 --> 00:15:07,199
very good for the greenies it uses a

00:15:05,680 --> 00:15:11,120
less electricity

00:15:07,199 --> 00:15:13,760
on the um on the overhead on the screen

00:15:11,120 --> 00:15:16,000
and also you don't need your shift key i

00:15:13,760 --> 00:15:18,720
can prove that python likes

00:15:16,000 --> 00:15:20,480
single quotes because if i did a string

00:15:18,720 --> 00:15:23,279
of hello

00:15:20,480 --> 00:15:26,320
and then i had a look at the string

00:15:23,279 --> 00:15:27,680
python comes back with single quotes

00:15:26,320 --> 00:15:29,360
the quick thing to remember is that

00:15:27,680 --> 00:15:30,480
there's actually no difference at all

00:15:29,360 --> 00:15:31,680
just whatever you start with you've got

00:15:30,480 --> 00:15:33,440
to finish with

00:15:31,680 --> 00:15:34,800
um i tend to use single quotes for

00:15:33,440 --> 00:15:36,560
everything except for

00:15:34,800 --> 00:15:38,000
when i'm doing comparisons to empty

00:15:36,560 --> 00:15:39,839
strings

00:15:38,000 --> 00:15:42,079
two single quotes looks like one double

00:15:39,839 --> 00:15:43,759
quote so i'll use double double quotes

00:15:42,079 --> 00:15:45,440
to make it really obvious that that's an

00:15:43,759 --> 00:15:47,440
empty string if i was doing something

00:15:45,440 --> 00:15:49,519
like that and the other place of course

00:15:47,440 --> 00:15:53,680
is um

00:15:49,519 --> 00:15:56,880
if i was doing ga day

00:15:53,680 --> 00:15:58,639
then of course that's broken

00:15:56,880 --> 00:16:00,959
because you can't have an embedded

00:15:58,639 --> 00:16:02,800
apostrophe i guess i could always escape

00:16:00,959 --> 00:16:06,079
it

00:16:02,800 --> 00:16:06,880
that's looking ugly but what would be

00:16:06,079 --> 00:16:10,399
simpler

00:16:06,880 --> 00:16:10,399
would be to use the double quotes

00:16:11,120 --> 00:16:14,560
and that way i don't need to escape my

00:16:12,959 --> 00:16:16,160
apostrophe

00:16:14,560 --> 00:16:17,839
curiously that's what the interpreter

00:16:16,160 --> 00:16:22,320
does as well um

00:16:17,839 --> 00:16:25,759
i can do as i'm saying i can print hello

00:16:22,320 --> 00:16:28,160
i can print some arithmetic one plus two

00:16:25,759 --> 00:16:30,720
any one

00:16:28,160 --> 00:16:32,480
three excellent in the interactive shell

00:16:30,720 --> 00:16:35,279
you don't even need the print

00:16:32,480 --> 00:16:35,600
so you can one plus two oops and you can

00:16:35,279 --> 00:16:39,440
hit

00:16:35,600 --> 00:16:39,440
uh backslash for line continuation

00:16:39,759 --> 00:16:44,399
uh you can multiply two times three

00:16:42,000 --> 00:16:48,399
getting up there now

00:16:44,399 --> 00:16:50,320
any one six awesome

00:16:48,399 --> 00:16:52,000
it's probably a little too easy for you

00:16:50,320 --> 00:16:55,360
let me bump it up what's 5

00:16:52,000 --> 00:16:55,360
to the power of 2

00:16:55,519 --> 00:16:58,560
25 i can still see that some of you are

00:16:57,839 --> 00:17:00,880
still

00:16:58,560 --> 00:17:02,399
beyond this so let me bump it up a bit

00:17:00,880 --> 00:17:02,800
uh what's one two three five six seven

00:17:02,399 --> 00:17:06,559
eight

00:17:02,800 --> 00:17:06,559
nine to the power of a hundred

00:17:08,880 --> 00:17:12,079
some la now there could be some options

00:17:11,360 --> 00:17:15,839
here my c

00:17:12,079 --> 00:17:15,839
programmers oh it's obvious overflow

00:17:16,400 --> 00:17:21,839
this isn't c though my friends

00:17:19,439 --> 00:17:22,640
that's the answer and if it's not

00:17:21,839 --> 00:17:24,880
obvious

00:17:22,640 --> 00:17:26,400
it chucks an l on the end just to remind

00:17:24,880 --> 00:17:30,840
you that this is a long

00:17:26,400 --> 00:17:33,600
int one oh really that's a long one

00:17:30,840 --> 00:17:36,240
um that's a big number by the way

00:17:33,600 --> 00:17:36,240
so is that

00:17:37,200 --> 00:17:39,840
so is that

00:17:40,480 --> 00:17:44,960
there will be a point it's probably

00:17:43,120 --> 00:17:46,720
there

00:17:44,960 --> 00:17:49,039
i haven't actually broken it it's still

00:17:46,720 --> 00:17:50,799
going

00:17:49,039 --> 00:17:53,280
a bit of steam coming out of the back

00:17:50,799 --> 00:17:55,039
there but that's perfectly fine that's

00:17:53,280 --> 00:17:56,720
way bigger than any of you maths people

00:17:55,039 --> 00:17:58,400
are ever going to be dealing with

00:17:56,720 --> 00:18:00,240
one of the differences there between

00:17:58,400 --> 00:18:02,080
python 2 and python 3

00:18:00,240 --> 00:18:05,039
is that python 3 doesn't have the long

00:18:02,080 --> 00:18:06,400
type ins are automatically internalized

00:18:05,039 --> 00:18:08,880
they're still ins they just get

00:18:06,400 --> 00:18:12,080
internally represented as longer ones

00:18:08,880 --> 00:18:15,120
here that in python 2 there is a

00:18:12,080 --> 00:18:18,400
small but not really significant

00:18:15,120 --> 00:18:20,559
difference between the long and the um

00:18:18,400 --> 00:18:22,640
the int i'm going to let that just run

00:18:20,559 --> 00:18:26,320
there while it

00:18:22,640 --> 00:18:29,840
might just crash it um

00:18:26,320 --> 00:18:32,080
okay so let me uh leave that

00:18:29,840 --> 00:18:33,200
running and go and grab i want to do

00:18:32,080 --> 00:18:36,960
some programming so

00:18:33,200 --> 00:18:43,840
let me go and grab say i want a program

00:18:36,960 --> 00:18:43,840
that will let me just grab another

00:18:47,360 --> 00:18:51,120
that should have been set up before

00:18:49,200 --> 00:18:55,120
sorry

00:18:51,120 --> 00:18:57,520
to something like that and i've got that

00:18:55,120 --> 00:18:58,320
just as a side note here using windows

00:18:57,520 --> 00:19:01,760
powershell

00:18:58,320 --> 00:19:04,480
much better than um the ordinary shell

00:19:01,760 --> 00:19:04,960
if you on windows you owe it to yourself

00:19:04,480 --> 00:19:07,200
to

00:19:04,960 --> 00:19:09,280
get get used to the windows powershell

00:19:07,200 --> 00:19:14,000
it's lovely for my unix people

00:19:09,280 --> 00:19:14,000
you've got tab completion

00:19:14,240 --> 00:19:19,679
you've got ls you've got

00:19:17,360 --> 00:19:19,679
cat

00:19:23,200 --> 00:19:28,960
um and here i will run my python script

00:19:26,000 --> 00:19:28,960
by just running

00:19:29,200 --> 00:19:38,559
the one that i wanted enter a car model

00:19:33,360 --> 00:19:43,840
anyone what's a good car model bmw

00:19:38,559 --> 00:19:43,840
small w cost 1 000

00:19:44,400 --> 00:19:48,000
and there's the output so simple little

00:19:46,880 --> 00:19:50,080
program there

00:19:48,000 --> 00:19:52,000
good practice even on windows use your

00:19:50,080 --> 00:19:54,240
hashbang here i'm using user

00:19:52,000 --> 00:19:55,600
bin python the alternative would be to

00:19:54,240 --> 00:19:57,280
env it

00:19:55,600 --> 00:19:59,280
the advantage there is if your python's

00:19:57,280 --> 00:20:01,039
not in the right spot on windows that

00:19:59,280 --> 00:20:01,919
will be completely ignored so i can just

00:20:01,039 --> 00:20:04,799
leave it there

00:20:01,919 --> 00:20:07,200
triple quoted verbatim block can be used

00:20:04,799 --> 00:20:10,880
anywhere but has a special meaning

00:20:07,200 --> 00:20:12,400
as the first thing inside a anything

00:20:10,880 --> 00:20:13,919
first thing inside a module first thing

00:20:12,400 --> 00:20:14,480
inside a function first thing inside a

00:20:13,919 --> 00:20:17,600
class

00:20:14,480 --> 00:20:18,880
gives me the documentation for that best

00:20:17,600 --> 00:20:20,720
practice

00:20:18,880 --> 00:20:22,000
uh the use of the blank line there is

00:20:20,720 --> 00:20:23,679
optional and even i

00:20:22,000 --> 00:20:26,480
i could even pop it on just one line

00:20:23,679 --> 00:20:28,000
would also be fine

00:20:26,480 --> 00:20:30,400
it doesn't matter getting some input

00:20:28,000 --> 00:20:31,919
here using raw input

00:20:30,400 --> 00:20:34,000
i'm sure you've used raw input for

00:20:31,919 --> 00:20:37,760
getting input has anyone ever used

00:20:34,000 --> 00:20:39,440
input to get input accidentally

00:20:37,760 --> 00:20:42,159
if there's a raw input there also must

00:20:39,440 --> 00:20:42,159
be an input

00:20:43,200 --> 00:20:47,600
that's that that's my this that's my

00:20:45,679 --> 00:20:49,679
that's my attempt at logic

00:20:47,600 --> 00:20:51,200
if there's a raw input there must be a

00:20:49,679 --> 00:20:54,320
cooked input

00:20:51,200 --> 00:20:55,679
don't ever use the cooked input

00:20:54,320 --> 00:20:58,799
if you're not familiar with what cooked

00:20:55,679 --> 00:21:02,720
input is i can do an input

00:20:58,799 --> 00:21:05,600
and say please enter something

00:21:02,720 --> 00:21:05,840
please enter something i type in 23 and

00:21:05,600 --> 00:21:10,000
a

00:21:05,840 --> 00:21:12,720
is now 23. okay so why don't we use

00:21:10,000 --> 00:21:17,039
input all the time well if i said please

00:21:12,720 --> 00:21:20,159
enter one plus two

00:21:17,039 --> 00:21:23,840
it actually evolves the entry

00:21:20,159 --> 00:21:25,440
equals horrifically bad

00:21:23,840 --> 00:21:28,960
means if i said please enter something

00:21:25,440 --> 00:21:31,120
and i typed in my name peter

00:21:28,960 --> 00:21:33,280
it's actually trying to get the variable

00:21:31,120 --> 00:21:36,559
called peter

00:21:33,280 --> 00:21:39,200
bad tip never use input

00:21:36,559 --> 00:21:39,760
always use raw input except in python 3

00:21:39,200 --> 00:21:42,480
where

00:21:39,760 --> 00:21:43,760
input gets thrown away and raw input

00:21:42,480 --> 00:21:46,159
gets turned into

00:21:43,760 --> 00:21:46,159
input

00:21:47,200 --> 00:21:50,880
eval is a great security hole getting

00:21:50,480 --> 00:21:52,720
some

00:21:50,880 --> 00:21:54,240
variables converting it there with the

00:21:52,720 --> 00:21:56,880
convert it to an int

00:21:54,240 --> 00:21:58,080
printing the output easy way to print is

00:21:56,880 --> 00:21:59,520
to always use the comma

00:21:58,080 --> 00:22:01,760
because you don't need to worry about

00:21:59,520 --> 00:22:03,280
the types of your arguments there

00:22:01,760 --> 00:22:05,840
well that's a simple program but i've

00:22:03,280 --> 00:22:08,559
got more than one car so i'll need to uh

00:22:05,840 --> 00:22:10,640
to bump it up here's some options

00:22:08,559 --> 00:22:13,520
while if you're a c programmer you could

00:22:10,640 --> 00:22:16,799
always go and wrap your tests in parens

00:22:13,520 --> 00:22:16,799
but this isn't c

00:22:17,840 --> 00:22:21,120
python requires indenting the standard

00:22:20,559 --> 00:22:23,760
indent

00:22:21,120 --> 00:22:23,760
is always

00:22:24,960 --> 00:22:28,720
four spaces always always always always

00:22:28,159 --> 00:22:31,280
always

00:22:28,720 --> 00:22:34,159
tabs are evil never use tabs see me

00:22:31,280 --> 00:22:36,880
afterwards if you want to use tabs

00:22:34,159 --> 00:22:37,919
if you if you if you want to use tabs i

00:22:36,880 --> 00:22:41,200
must address

00:22:37,919 --> 00:22:43,600
pep 8 um if you're not familiar with pep

00:22:41,200 --> 00:22:45,200
8 you must be familiar with pep8 so for

00:22:43,600 --> 00:22:49,760
those who've used python before

00:22:45,200 --> 00:22:52,799
pep 8 says use four spaces

00:22:49,760 --> 00:22:53,520
never mix tabs and spaces and all new

00:22:52,799 --> 00:22:56,640
projects

00:22:53,520 --> 00:22:59,280
strongly recommend use spaces so

00:22:56,640 --> 00:22:59,679
that's the python way it you don't have

00:22:59,280 --> 00:23:03,600
to tr

00:22:59,679 --> 00:23:06,480
you don't have to believe me but you do

00:23:03,600 --> 00:23:08,240
owe something to follow greater van

00:23:06,480 --> 00:23:09,760
rossum the author of python the

00:23:08,240 --> 00:23:12,799
benevolent dictator for

00:23:09,760 --> 00:23:14,240
life so if you're using an editor you

00:23:12,799 --> 00:23:14,960
always just want to go and set your

00:23:14,240 --> 00:23:17,520
settings

00:23:14,960 --> 00:23:20,240
so that not that setting you want to set

00:23:17,520 --> 00:23:20,240
your settings

00:23:21,840 --> 00:23:26,480
tab settings just use spaces get it to

00:23:24,640 --> 00:23:29,840
hit the tab key gives me spaces

00:23:26,480 --> 00:23:31,760
you'll have less trouble um

00:23:29,840 --> 00:23:33,679
the problem with a true loop capital t

00:23:31,760 --> 00:23:35,520
for true capital f for false

00:23:33,679 --> 00:23:36,799
the problem with the true loop is that

00:23:35,520 --> 00:23:38,880
it'll loop forever

00:23:36,799 --> 00:23:41,120
if i want to get out the easiest way not

00:23:38,880 --> 00:23:43,679
necessarily saying this is the best way

00:23:41,120 --> 00:23:44,559
but the easiest way would be to compare

00:23:43,679 --> 00:23:47,360
that against an

00:23:44,559 --> 00:23:50,240
empty string and if that's nothing then

00:23:47,360 --> 00:23:53,679
leave the loop

00:23:50,240 --> 00:23:56,480
so when that program runs enter a model

00:23:53,679 --> 00:23:57,120
a one there it is enter another one b

00:23:56,480 --> 00:23:59,360
two

00:23:57,120 --> 00:24:01,279
and that will keep on looping of course

00:23:59,360 --> 00:24:02,720
it's not actually printing them

00:24:01,279 --> 00:24:04,080
because i'm not actually storing them

00:24:02,720 --> 00:24:06,480
anywhere so where am i going to store

00:24:04,080 --> 00:24:08,400
them i'm glad you asked

00:24:06,480 --> 00:24:10,000
the nicest easiest place to store them

00:24:08,400 --> 00:24:11,919
would be in a list lists

00:24:10,000 --> 00:24:13,039
lists are lovely i love lists lists are

00:24:11,919 --> 00:24:15,279
good

00:24:13,039 --> 00:24:17,520
coming from a c programmers background

00:24:15,279 --> 00:24:20,640
we're writing a

00:24:17,520 --> 00:24:21,039
linked list is part of the joy of being

00:24:20,640 --> 00:24:24,240
a c

00:24:21,039 --> 00:24:25,440
programmer oh new program new client

00:24:24,240 --> 00:24:27,520
can't bring my tools in

00:24:25,440 --> 00:24:28,880
great i'll write a link list program

00:24:27,520 --> 00:24:31,520
again

00:24:28,880 --> 00:24:33,520
um c plus programmers yeah good good

00:24:31,520 --> 00:24:35,039
luck with the stl there that's that's

00:24:33,520 --> 00:24:36,960
it's better than writing it yourself but

00:24:35,039 --> 00:24:40,640
there's got its own challenges

00:24:36,960 --> 00:24:43,279
java people have vectors

00:24:40,640 --> 00:24:44,159
and other other options but what i

00:24:43,279 --> 00:24:46,799
really want to hear

00:24:44,159 --> 00:24:48,320
is uh have myself a list so i've got the

00:24:46,799 --> 00:24:49,840
model of a car so

00:24:48,320 --> 00:24:51,600
this is not the best option but i'll see

00:24:49,840 --> 00:24:54,880
where i can go with this i'll have

00:24:51,600 --> 00:24:56,559
a list quite common best practice is the

00:24:54,880 --> 00:25:00,159
individual is the singular

00:24:56,559 --> 00:25:03,360
and the container is the plural

00:25:00,159 --> 00:25:07,279
so i'll get a model if it's empty i'll

00:25:03,360 --> 00:25:10,559
leave and if it's not empty

00:25:07,279 --> 00:25:13,760
i will get the cost of the car and

00:25:10,559 --> 00:25:16,880
then i will

00:25:13,760 --> 00:25:19,200
go and append i love append append is

00:25:16,880 --> 00:25:20,440
very handy now what i'm ending up with

00:25:19,200 --> 00:25:24,480
here is a

00:25:20,440 --> 00:25:29,760
coordinated list i'll have the costs

00:25:24,480 --> 00:25:33,440
append the cost what have i forgotten

00:25:29,760 --> 00:25:35,760
probably need a list up there

00:25:33,440 --> 00:25:37,919
empty one ps that's not a declaration

00:25:35,760 --> 00:25:39,679
i'm not declaring the variable python

00:25:37,919 --> 00:25:42,640
doesn't have

00:25:39,679 --> 00:25:42,960
variables it's just a name but i need to

00:25:42,640 --> 00:25:45,039
have

00:25:42,960 --> 00:25:46,240
something that's got an append to which

00:25:45,039 --> 00:25:49,360
i can

00:25:46,240 --> 00:25:52,080
append and lists have the append

00:25:49,360 --> 00:25:53,600
method and i probably want to go and

00:25:52,080 --> 00:25:56,559
plonk some of that stuff

00:25:53,600 --> 00:25:57,200
before i go and store it get do the

00:25:56,559 --> 00:26:00,080
stuff

00:25:57,200 --> 00:26:02,080
add it in printing it out then will be

00:26:00,080 --> 00:26:05,600
another loop

00:26:02,080 --> 00:26:06,000
now what what could i do here i'll just

00:26:05,600 --> 00:26:10,080
to

00:26:06,000 --> 00:26:13,279
start with make it awful

00:26:10,080 --> 00:26:16,559
and print all of the models

00:26:13,279 --> 00:26:18,159
and print all of the costs

00:26:16,559 --> 00:26:20,480
and of course i think some of you will

00:26:18,159 --> 00:26:23,520
know oh yeah that's going to look lovely

00:26:20,480 --> 00:26:26,559
p.s for testing doing this a

00:26:23,520 --> 00:26:28,640
b business i see people doing is just

00:26:26,559 --> 00:26:30,720
not a great idea in fact i see people

00:26:28,640 --> 00:26:32,960
test their mathematical programs

00:26:30,720 --> 00:26:34,159
an average program they type in like

00:26:32,960 --> 00:26:37,200
type in some numbers one

00:26:34,159 --> 00:26:40,720
one one one oh the average is one good

00:26:37,200 --> 00:26:43,679
tests pass i think we can come up with

00:26:40,720 --> 00:26:46,880
better tests than that

00:26:43,679 --> 00:26:49,760
here i've actually already got myself

00:26:46,880 --> 00:26:52,000
a text file which i would call a

00:26:49,760 --> 00:26:54,400
response file

00:26:52,000 --> 00:26:55,919
and even on windows even if you're not

00:26:54,400 --> 00:26:59,279
using a powershell

00:26:55,919 --> 00:27:01,440
you can pipe stuff and

00:26:59,279 --> 00:27:03,360
i can pipe it into you can't use the

00:27:01,440 --> 00:27:07,360
association of the file

00:27:03,360 --> 00:27:11,520
but i can do car

00:27:07,360 --> 00:27:14,559
one i can pipe it that way

00:27:11,520 --> 00:27:18,399
and i

00:27:14,559 --> 00:27:21,120
am missing a extra blank one on the end

00:27:18,399 --> 00:27:22,640
this is the response file types in types

00:27:21,120 --> 00:27:25,200
and presses enter

00:27:22,640 --> 00:27:25,760
types in presses enter types in presses

00:27:25,200 --> 00:27:28,880
enter

00:27:25,760 --> 00:27:30,960
i need the blank one on the end

00:27:28,880 --> 00:27:32,559
so that it's got something to give us

00:27:30,960 --> 00:27:34,960
the terminating list

00:27:32,559 --> 00:27:36,880
it's not real pretty as far as the input

00:27:34,960 --> 00:27:38,399
goes but anything that you can do that

00:27:36,880 --> 00:27:39,840
will help your testing

00:27:38,399 --> 00:27:41,600
is awesome i'm actually not going to

00:27:39,840 --> 00:27:43,120
talk a lot about um

00:27:41,600 --> 00:27:44,240
methodologies and test driven

00:27:43,120 --> 00:27:46,159
development and all that sort of stuff

00:27:44,240 --> 00:27:48,159
but

00:27:46,159 --> 00:27:49,679
and there's the pleasant the model the

00:27:48,159 --> 00:27:52,240
cost and then

00:27:49,679 --> 00:27:54,799
there's the list of models and there's

00:27:52,240 --> 00:27:57,120
the list of costs

00:27:54,799 --> 00:27:58,320
but i it doesn't really quite show me

00:27:57,120 --> 00:28:01,200
which one is which

00:27:58,320 --> 00:28:02,240
although lists are ordered they first

00:28:01,200 --> 00:28:05,919
one is first one

00:28:02,240 --> 00:28:08,960
always so what i could do

00:28:05,919 --> 00:28:12,399
is heck i'm a c programmer let me go

00:28:08,960 --> 00:28:14,000
and use a loop

00:28:12,399 --> 00:28:15,520
so if you're a c programmer you will

00:28:14,000 --> 00:28:17,360
have a counter and the counter would be

00:28:15,520 --> 00:28:23,120
called

00:28:17,360 --> 00:28:26,480
i awesome and i would keep on looping

00:28:23,120 --> 00:28:31,120
while the counter is less than

00:28:26,480 --> 00:28:34,240
the length of the list

00:28:31,120 --> 00:28:37,360
and then i would print models

00:28:34,240 --> 00:28:40,320
subscript i and costs

00:28:37,360 --> 00:28:40,720
subscript i to get the ith element of

00:28:40,320 --> 00:28:44,000
course

00:28:40,720 --> 00:28:45,760
counting begins at zero

00:28:44,000 --> 00:28:47,600
might even just print them out following

00:28:45,760 --> 00:28:50,799
each other and that way they will appear

00:28:47,600 --> 00:28:54,480
nicely next to each other

00:28:50,799 --> 00:28:58,559
anything i've forgotten increment i

00:28:54,480 --> 00:29:01,760
thank you

00:28:58,559 --> 00:29:01,760
plus plus good

00:29:02,240 --> 00:29:05,760
i'm looking for a no peter don't no

00:29:05,200 --> 00:29:07,919
llama

00:29:05,760 --> 00:29:07,919
no

00:29:09,840 --> 00:29:14,159
plus plus does that work i've actually

00:29:13,120 --> 00:29:15,520
got a

00:29:14,159 --> 00:29:17,600
lightning talk i'm going to do on this

00:29:15,520 --> 00:29:21,279
tonight but just

00:29:17,600 --> 00:29:25,679
just to make it plea plain i

00:29:21,279 --> 00:29:29,840
gets 5 plus plus i

00:29:25,679 --> 00:29:29,840
good i now has a value of

00:29:30,240 --> 00:29:34,720
oh come on i'm after a bit of

00:29:34,799 --> 00:29:43,440
is it six no llama

00:29:41,760 --> 00:29:46,000
python does not have a plus plus

00:29:43,440 --> 00:29:46,000
operator

00:29:47,520 --> 00:29:51,679
to make a pl plane what's the negative

00:29:49,360 --> 00:29:54,159
of i what's the negative of the negative

00:29:51,679 --> 00:29:56,240
of i

00:29:54,159 --> 00:29:57,840
the negative of what's the negative of a

00:29:56,240 --> 00:29:58,799
negative over the negative of a negative

00:29:57,840 --> 00:30:03,120
of

00:29:58,799 --> 00:30:03,120
i five

00:30:04,640 --> 00:30:08,480
very good i'm happy with that um i i do

00:30:07,440 --> 00:30:10,480
this demo all the time

00:30:08,480 --> 00:30:12,240
50 of the time i get it right you know

00:30:10,480 --> 00:30:16,640
so i look like a god

00:30:12,240 --> 00:30:19,760
and i'm not but i just got lucky today

00:30:16,640 --> 00:30:21,600
um therefore plus plus is syntactically

00:30:19,760 --> 00:30:24,559
valid but does nothing

00:30:21,600 --> 00:30:28,960
so don't get caught you plus of course

00:30:24,559 --> 00:30:28,960
post increment is syntactically invalid

00:30:29,360 --> 00:30:32,640
so where was i don't forget your plus

00:30:31,200 --> 00:30:34,840
plus that's not how you do it

00:30:32,640 --> 00:30:36,880
you could do i gets i plus one if you've

00:30:34,840 --> 00:30:42,480
been never programmed

00:30:36,880 --> 00:30:42,480
much at all use the shorthand operator

00:30:43,600 --> 00:30:50,399
and that then gives me the result of

00:30:47,360 --> 00:30:51,919
alpha zonda maserati

00:30:50,399 --> 00:30:53,760
but i've got to tell you i've got to

00:30:51,919 --> 00:30:54,640
tell you that's just if you're writing

00:30:53,760 --> 00:30:57,760
code like that

00:30:54,640 --> 00:31:00,480
i'm you're in the right course

00:30:57,760 --> 00:31:01,279
because that is awful code that is awful

00:31:00,480 --> 00:31:03,200
python

00:31:01,279 --> 00:31:04,480
that's not really python at all that's

00:31:03,200 --> 00:31:08,240
just c

00:31:04,480 --> 00:31:09,840
or cobol even done using python syntax

00:31:08,240 --> 00:31:12,159
so if you're doing that you shouldn't be

00:31:09,840 --> 00:31:14,640
doing that instead

00:31:12,159 --> 00:31:16,080
well at least give me a for loop now

00:31:14,640 --> 00:31:20,320
just a reminder that the

00:31:16,080 --> 00:31:22,399
for loop in python is not a for loop

00:31:20,320 --> 00:31:23,840
the for loop in python is really a four

00:31:22,399 --> 00:31:27,279
each for each

00:31:23,840 --> 00:31:29,360
item in a container

00:31:27,279 --> 00:31:31,600
so a typical container if you want

00:31:29,360 --> 00:31:35,120
numbers could be something like

00:31:31,600 --> 00:31:38,159
that for each

00:31:35,120 --> 00:31:39,600
count or i in the range and of course

00:31:38,159 --> 00:31:40,799
the lovely thing is is that you don't

00:31:39,600 --> 00:31:44,559
have to remember to

00:31:40,799 --> 00:31:44,559
not forget the plus equals

00:31:45,200 --> 00:31:51,679
range is used to create a list

00:31:48,960 --> 00:31:53,360
um it takes a start and an end but

00:31:51,679 --> 00:31:54,960
everyone counts from zero

00:31:53,360 --> 00:31:56,480
programmers always count from zero i

00:31:54,960 --> 00:32:00,399
have three kids numbered

00:31:56,480 --> 00:32:02,000
zero one and two um

00:32:00,399 --> 00:32:04,480
that's the way that you would count from

00:32:02,000 --> 00:32:06,399
there to there and then i get the right

00:32:04,480 --> 00:32:08,320
result

00:32:06,399 --> 00:32:09,840
well that's one option but if you're

00:32:08,320 --> 00:32:12,679
thinking like that you're still

00:32:09,840 --> 00:32:14,159
thinking a bit too much like a c

00:32:12,679 --> 00:32:15,679
programmer so

00:32:14,159 --> 00:32:18,240
an alternative would be to have

00:32:15,679 --> 00:32:22,399
something like for each model

00:32:18,240 --> 00:32:26,840
in models and then i can just print

00:32:22,399 --> 00:32:29,279
the model let me take those two out

00:32:26,840 --> 00:32:31,679
whoops a dollar sign for my pearl

00:32:29,279 --> 00:32:31,679
friends

00:32:32,960 --> 00:32:38,559
and whoops for each models in models

00:32:36,640 --> 00:32:42,000
that doesn't make any sense

00:32:38,559 --> 00:32:45,760
that's better ah but i didn't

00:32:42,000 --> 00:32:47,360
get my um costs

00:32:45,760 --> 00:32:48,960
now as it turns out it's actually not a

00:32:47,360 --> 00:32:51,519
really pretty thing to do

00:32:48,960 --> 00:32:53,039
so i'm going to leave that bit there and

00:32:51,519 --> 00:32:54,480
come back to it when i've

00:32:53,039 --> 00:32:56,559
those of you with more experience should

00:32:54,480 --> 00:32:57,760
be thinking oh maybe a list of tuples

00:32:56,559 --> 00:33:00,720
would be nice

00:32:57,760 --> 00:33:03,120
maybe a dictionary could help maybe a

00:33:00,720 --> 00:33:06,000
list of dictionaries would be nice

00:33:03,120 --> 00:33:08,399
maybe a list of objects of class car

00:33:06,000 --> 00:33:11,840
would be a sweet solution

00:33:08,399 --> 00:33:14,080
but i'm going to leave that for now

00:33:11,840 --> 00:33:14,080
so

00:33:14,960 --> 00:33:19,760
where was it that was a lot that's the

00:33:16,480 --> 00:33:22,159
essentials we looked at in strings lists

00:33:19,760 --> 00:33:24,480
tests loops oh i didn't do a function

00:33:22,159 --> 00:33:28,880
but if you wanted a function

00:33:24,480 --> 00:33:32,320
pop your function up there depreciate

00:33:28,880 --> 00:33:36,320
takes the cost that it was

00:33:32,320 --> 00:33:40,080
and returns

00:33:36,320 --> 00:33:42,640
the cost times whatever 0.9 oops

00:33:40,080 --> 00:33:42,640
0.9

00:33:43,360 --> 00:33:46,720
and of course if you're doing that you

00:33:44,960 --> 00:33:50,480
of course of course would put

00:33:46,720 --> 00:33:53,760
a comment in yes of course we would

00:33:50,480 --> 00:33:56,159
good idea pete and it always goes as the

00:33:53,760 --> 00:33:59,279
first thing and it must also be indented

00:33:56,159 --> 00:34:04,159
depreciate the cost past

00:33:59,279 --> 00:34:08,639
to it or something like that

00:34:04,159 --> 00:34:10,560
um now i should uh that's functions

00:34:08,639 --> 00:34:12,320
file handling i might come back to file

00:34:10,560 --> 00:34:14,320
handling because what i'm going to do

00:34:12,320 --> 00:34:15,359
now is we need to look at the object

00:34:14,320 --> 00:34:18,879
model

00:34:15,359 --> 00:34:21,280
i'm i've sort of been saying declare

00:34:18,879 --> 00:34:23,839
it's not really a variable how does this

00:34:21,280 --> 00:34:24,560
stuff work a python people need to know

00:34:23,839 --> 00:34:27,839
this

00:34:24,560 --> 00:34:30,079
so let's go back to our shell

00:34:27,839 --> 00:34:31,119
and see what we can come up with here in

00:34:30,079 --> 00:34:34,399
the interactive

00:34:31,119 --> 00:34:38,079
shell if i set a to a list

00:34:34,399 --> 00:34:40,960
say a list of numbers one two three

00:34:38,079 --> 00:34:40,960
a looks like that

00:34:42,320 --> 00:34:46,079
let me set b to a

00:34:46,639 --> 00:34:50,079
if we have a look at a it looks like

00:34:47,839 --> 00:34:52,720
that we look at b looks like that

00:34:50,079 --> 00:34:54,720
let me go and mutate or change a by

00:34:52,720 --> 00:34:59,040
appending a 4 to it say

00:34:54,720 --> 00:35:03,119
a looks like that the big question is

00:34:59,040 --> 00:35:06,560
what is b

00:35:03,119 --> 00:35:09,599
one two three who's for one two three

00:35:06,560 --> 00:35:12,800
one two three one two three four

00:35:09,599 --> 00:35:15,280
not terribly certain anyone two three

00:35:12,800 --> 00:35:15,280
five

00:35:15,440 --> 00:35:19,839
this is a crucial thing to know you must

00:35:18,079 --> 00:35:22,720
get this right

00:35:19,839 --> 00:35:23,359
and to explain it maybe i would say what

00:35:22,720 --> 00:35:26,800
does that

00:35:23,359 --> 00:35:30,560
do well that is the bit that actually

00:35:26,800 --> 00:35:34,480
creates the list this populates the uh

00:35:30,560 --> 00:35:37,520
the symbol table with a name called a

00:35:34,480 --> 00:35:38,640
and name points at for my c c plus plus

00:35:37,520 --> 00:35:41,920
programmers

00:35:38,640 --> 00:35:45,760
for c plus java friends a is a reference

00:35:41,920 --> 00:35:49,040
to that list

00:35:45,760 --> 00:35:52,000
i could even do it like this so

00:35:49,040 --> 00:35:52,000
if i was to

00:35:53,680 --> 00:35:58,560
huh where'd you go i won't do it yes i

00:35:56,480 --> 00:36:01,839
might just

00:35:58,560 --> 00:36:05,599
sorry pop it over to here

00:36:01,839 --> 00:36:09,040
and have a look at him so a

00:36:05,599 --> 00:36:12,320
is a shall we say pointer at the

00:36:09,040 --> 00:36:14,800
list when i do b gets a what it does

00:36:12,320 --> 00:36:14,800
is that

00:36:17,200 --> 00:36:21,599
if i mutate a that's what i get

00:36:23,520 --> 00:36:28,240
and if i come back to my

00:36:28,320 --> 00:36:33,680
list b has

00:36:31,440 --> 00:36:35,520
changed but it's probably wrong for me

00:36:33,680 --> 00:36:38,079
to even say b has changed b

00:36:35,520 --> 00:36:40,160
didn't change in the same way that a

00:36:38,079 --> 00:36:44,000
didn't really change a

00:36:40,160 --> 00:36:46,320
a a is b

00:36:44,000 --> 00:36:48,079
and i can prove that by doing um by

00:36:46,320 --> 00:36:51,040
using say the id function

00:36:48,079 --> 00:36:53,119
to get the id of the object that's it's

00:36:51,040 --> 00:36:55,119
guide it's globally unique identifier

00:36:53,119 --> 00:36:56,400
it's not quite globally unique but it's

00:36:55,119 --> 00:36:59,040
unique enough b

00:36:56,400 --> 00:37:00,560
has the same id if it's got the same id

00:36:59,040 --> 00:37:02,160
it's the same object

00:37:00,560 --> 00:37:03,680
a lovely thing to know about which

00:37:02,160 --> 00:37:06,480
python people should know about

00:37:03,680 --> 00:37:08,640
is the is statement is is just a

00:37:06,480 --> 00:37:09,599
glorious operator it tells me whether

00:37:08,640 --> 00:37:11,760
this operator

00:37:09,599 --> 00:37:14,400
with this object or this reference

00:37:11,760 --> 00:37:17,280
points at the same object as the other

00:37:14,400 --> 00:37:20,320
pointer is is something to know about i

00:37:17,280 --> 00:37:22,320
don't use it a lot in real code

00:37:20,320 --> 00:37:23,920
but because it's not used for equal

00:37:22,320 --> 00:37:25,680
equal it's not used for equivalence it's

00:37:23,920 --> 00:37:27,200
used to see is this object the same

00:37:25,680 --> 00:37:29,440
object as that object

00:37:27,200 --> 00:37:31,200
is they pointing at the same and yes

00:37:29,440 --> 00:37:34,400
they is pointing at the same

00:37:31,200 --> 00:37:38,160
object compare and contrast

00:37:34,400 --> 00:37:40,000
to if i well now i realize that that

00:37:38,160 --> 00:37:43,599
doesn't create a copy

00:37:40,000 --> 00:37:46,880
how do i make a copy i'm glad you asked

00:37:43,599 --> 00:37:48,640
i guess i could make a copy by c is a

00:37:46,880 --> 00:37:52,079
new list

00:37:48,640 --> 00:37:55,040
made of the first element of a and the

00:37:52,079 --> 00:37:55,920
second element of a and the third

00:37:55,040 --> 00:37:57,760
element of a

00:37:55,920 --> 00:38:00,640
and just because just for the fun of it

00:37:57,760 --> 00:38:02,480
the last element of a

00:38:00,640 --> 00:38:04,160
minus one for the last element minus two

00:38:02,480 --> 00:38:07,280
for the second last element

00:38:04,160 --> 00:38:08,160
and c looks like that it looks like the

00:38:07,280 --> 00:38:12,079
same that's

00:38:08,160 --> 00:38:13,920
a is c no they are different objects

00:38:12,079 --> 00:38:15,119
uh ps even though they're different

00:38:13,920 --> 00:38:18,480
objects they are

00:38:15,119 --> 00:38:20,240
value-wise equivalent

00:38:18,480 --> 00:38:22,079
as i said i don't use is very much in

00:38:20,240 --> 00:38:23,040
real code but it's nice when we use it

00:38:22,079 --> 00:38:25,040
against a

00:38:23,040 --> 00:38:26,320
type that would call a singleton object

00:38:25,040 --> 00:38:28,400
so for example the none

00:38:26,320 --> 00:38:30,240
object that some functions return is a

00:38:28,400 --> 00:38:33,520
singleton there's only one

00:38:30,240 --> 00:38:35,280
none object so i wouldn't use equal

00:38:33,520 --> 00:38:35,920
equal for testing against none i'd use

00:38:35,280 --> 00:38:38,079
is

00:38:35,920 --> 00:38:41,040
for testing against none if you've got

00:38:38,079 --> 00:38:43,839
the singleton type

00:38:41,040 --> 00:38:45,119
uh so that's how you can make a copy no

00:38:43,839 --> 00:38:47,119
llama

00:38:45,119 --> 00:38:49,119
how else could i make a copy well i

00:38:47,119 --> 00:38:53,520
could go and um

00:38:49,119 --> 00:38:58,079
have a counter no peter

00:38:53,520 --> 00:39:01,359
and create an empty list and then um

00:38:58,079 --> 00:39:04,560
a while loop while i is

00:39:01,359 --> 00:39:08,240
less than the length of a

00:39:04,560 --> 00:39:11,599
uh um d go and

00:39:08,240 --> 00:39:15,119
append the ith element

00:39:11,599 --> 00:39:19,119
of a and then increment

00:39:15,119 --> 00:39:20,800
i increment i

00:39:19,119 --> 00:39:22,560
p s in the interactive shell you can

00:39:20,800 --> 00:39:23,359
even do loops you can declare functions

00:39:22,560 --> 00:39:24,880
classes

00:39:23,359 --> 00:39:26,560
everything right there inside the

00:39:24,880 --> 00:39:28,240
interactive shell half the time you

00:39:26,560 --> 00:39:30,640
don't even need to write a program

00:39:28,240 --> 00:39:32,000
for particularly for cis admin stuff so

00:39:30,640 --> 00:39:35,119
d looks like that

00:39:32,000 --> 00:39:37,920
d um d looks like that but d

00:39:35,119 --> 00:39:39,599
is a no it's a different object it would

00:39:37,920 --> 00:39:42,400
make much more sense to

00:39:39,599 --> 00:39:43,200
have an empty list and then use my

00:39:42,400 --> 00:39:48,320
friend for each

00:39:43,200 --> 00:39:50,720
item in that list

00:39:48,320 --> 00:39:51,680
go and append that item i don't need to

00:39:50,720 --> 00:39:55,040
worry about

00:39:51,680 --> 00:39:56,000
indexes get away from indexes and then e

00:39:55,040 --> 00:39:59,200
looks like that but

00:39:56,000 --> 00:40:03,280
e is a no um

00:39:59,200 --> 00:40:05,200
that's okay a nicer way a much nicer way

00:40:03,280 --> 00:40:07,200
would be for me to take a step back and

00:40:05,200 --> 00:40:10,240
say if i've got a integer

00:40:07,200 --> 00:40:10,240
if i print

00:40:13,440 --> 00:40:19,680
variable or i is

00:40:16,560 --> 00:40:20,560
i that puts a space in comma always puts

00:40:19,680 --> 00:40:22,480
spaces in

00:40:20,560 --> 00:40:24,160
yum if you don't want a space you do

00:40:22,480 --> 00:40:27,680
string concatenation

00:40:24,160 --> 00:40:27,680
concatenate with eye

00:40:27,839 --> 00:40:35,520
i can try but you cannot concatenate

00:40:32,880 --> 00:40:37,359
string objects and into objects because

00:40:35,520 --> 00:40:40,560
it doesn't know whether to do arithmetic

00:40:37,359 --> 00:40:41,119
or string concatenation so instead i'll

00:40:40,560 --> 00:40:44,880
use the

00:40:41,119 --> 00:40:47,040
str function to take the

00:40:44,880 --> 00:40:48,319
argument the int and turn it into a

00:40:47,040 --> 00:40:51,599
string which i'm then

00:40:48,319 --> 00:40:55,280
able to do concatenations of

00:40:51,599 --> 00:40:57,680
so if you make a new string using str

00:40:55,280 --> 00:41:00,160
if i happen to have a string that looks

00:40:57,680 --> 00:41:02,319
like a number but which is actually

00:41:00,160 --> 00:41:03,839
type function is not a number is a

00:41:02,319 --> 00:41:07,200
string

00:41:03,839 --> 00:41:10,640
to do some arithmetic print

00:41:07,200 --> 00:41:10,640
three times s

00:41:13,839 --> 00:41:16,880
of course you've got to spell print

00:41:18,839 --> 00:41:24,000
right

00:41:20,160 --> 00:41:26,480
what well multiplication works fine for

00:41:24,000 --> 00:41:26,480
numbers

00:41:26,720 --> 00:41:30,319
um i use that extensively when i'm now

00:41:28,800 --> 00:41:34,240
putting some um i want

00:41:30,319 --> 00:41:36,160
uh 30 dashes away you go

00:41:34,240 --> 00:41:37,760
but that's not what i wanted i wanted to

00:41:36,160 --> 00:41:40,880
do arithmetic with

00:41:37,760 --> 00:41:41,680
s if i want to do arithmetic with s i'll

00:41:40,880 --> 00:41:45,040
need to turn

00:41:41,680 --> 00:41:47,119
s into its int form or its long form or

00:41:45,040 --> 00:41:50,160
its float form which i can do

00:41:47,119 --> 00:41:54,640
with that so if i use str

00:41:50,160 --> 00:41:56,480
to make a new string

00:41:54,640 --> 00:41:57,920
ps i call that the str function and

00:41:56,480 --> 00:42:01,760
that's totally wrong

00:41:57,920 --> 00:42:05,520
str is the constructor for the class str

00:42:01,760 --> 00:42:08,560
and builds uh for my java friends new

00:42:05,520 --> 00:42:10,640
string object store object

00:42:08,560 --> 00:42:12,560
if stir makes a new string if in makes a

00:42:10,640 --> 00:42:16,160
new int how do i make

00:42:12,560 --> 00:42:18,720
a new list

00:42:16,160 --> 00:42:21,520
anyone how do i make a new list the

00:42:18,720 --> 00:42:24,720
easiest way to make a list is

00:42:21,520 --> 00:42:27,920
list f gets a new

00:42:24,720 --> 00:42:30,160
list made from an existing list

00:42:27,920 --> 00:42:31,920
actually a new iterable anything through

00:42:30,160 --> 00:42:33,599
which you can iterate which includes

00:42:31,920 --> 00:42:36,960
lists tuples dictionaries

00:42:33,599 --> 00:42:41,359
even strings f looks like that but

00:42:36,960 --> 00:42:45,839
f is i no it's a different object

00:42:41,359 --> 00:42:45,839
wow he's getting lots of applause

00:42:48,079 --> 00:42:53,839
thank you thank you very much so

00:42:52,000 --> 00:42:55,440
that's how i can do a list and that's a

00:42:53,839 --> 00:42:57,839
little bit about

00:42:55,440 --> 00:42:58,480
objects oh let me throw some curly ones

00:42:57,839 --> 00:43:01,920
at you

00:42:58,480 --> 00:43:05,200
if i is five and j gets i

00:43:01,920 --> 00:43:09,440
j is five if i increment

00:43:05,200 --> 00:43:13,839
i i is now six

00:43:09,440 --> 00:43:13,839
what is j

00:43:16,319 --> 00:43:21,119
hmm five six

00:43:22,000 --> 00:43:28,880
five i've got a few for five

00:43:25,280 --> 00:43:32,720
one two three four five

00:43:28,880 --> 00:43:34,800
six oh my friends

00:43:32,720 --> 00:43:36,560
the big difference here which is very

00:43:34,800 --> 00:43:38,839
different to what i did before is what

00:43:36,560 --> 00:43:40,720
does this line

00:43:38,839 --> 00:43:44,400
do i gets

00:43:40,720 --> 00:43:48,240
i plus plus equals 1 1 is really

00:43:44,400 --> 00:43:48,240
i gets i plus 1

00:43:48,720 --> 00:43:55,680
which is really i gets a shall we say

00:43:52,319 --> 00:43:58,960
nu int

00:43:55,680 --> 00:43:58,960
made of that calculation

00:44:00,400 --> 00:44:06,400
that is i gets three or five or whatever

00:44:04,720 --> 00:44:10,000
j points at it good they're the same

00:44:06,400 --> 00:44:14,480
object but unlike before

00:44:10,000 --> 00:44:15,760
i am not mutating i i is not a mutatable

00:44:14,480 --> 00:44:20,079
object

00:44:15,760 --> 00:44:22,960
that is it's not mutatable uh immutable

00:44:20,079 --> 00:44:24,319
ins in python are immutable you can't

00:44:22,960 --> 00:44:27,920
change them

00:44:24,319 --> 00:44:31,920
you cannot add one to an int

00:44:27,920 --> 00:44:31,920
you can make a new int with a new value

00:44:32,480 --> 00:44:35,760
and if you do that what you end up with

00:44:35,280 --> 00:44:37,839
is

00:44:35,760 --> 00:44:37,839
that

00:44:39,599 --> 00:44:45,760
because you cannot mutate an int

00:44:43,599 --> 00:44:47,359
inter-immutable what are the other

00:44:45,760 --> 00:44:50,560
immutable types

00:44:47,359 --> 00:44:52,960
core types in python inc

00:44:50,560 --> 00:44:55,119
floats the same longs if you're on

00:44:52,960 --> 00:44:58,720
python 2.

00:44:55,119 --> 00:45:01,520
tuples tuples tuples tuple whatever

00:44:58,720 --> 00:45:02,480
are immutable and the other core type

00:45:01,520 --> 00:45:05,760
would be a

00:45:02,480 --> 00:45:08,400
frozen set all of the in fact we've

00:45:05,760 --> 00:45:10,720
hardly got any mutable types

00:45:08,400 --> 00:45:11,520
most of the types most of the things in

00:45:10,720 --> 00:45:13,440
core python

00:45:11,520 --> 00:45:14,720
can't be changed that the only thing or

00:45:13,440 --> 00:45:16,079
the only thing i've shown you so far is

00:45:14,720 --> 00:45:18,480
a list

00:45:16,079 --> 00:45:20,720
you can't change a string therefore

00:45:18,480 --> 00:45:21,520
string concatenation is really slow in

00:45:20,720 --> 00:45:22,720
python

00:45:21,520 --> 00:45:24,960
if you've got a lot of strings to

00:45:22,720 --> 00:45:25,839
concatenate don't concatenate a whole

00:45:24,960 --> 00:45:28,160
lot of strings

00:45:25,839 --> 00:45:29,520
append it into a list and join it at the

00:45:28,160 --> 00:45:32,400
end

00:45:29,520 --> 00:45:33,440
uh 20 times faster if you've got lots of

00:45:32,400 --> 00:45:35,280
strings too

00:45:33,440 --> 00:45:36,480
because strings if you concatenate

00:45:35,280 --> 00:45:39,599
strings it has to

00:45:36,480 --> 00:45:39,599
build a new string

00:45:39,680 --> 00:45:46,400
so all of that was to say the few

00:45:42,960 --> 00:45:50,160
who went for for

00:45:46,400 --> 00:45:53,599
my j j is still

00:45:50,160 --> 00:45:56,079
pointing at the old value of 5.

00:45:53,599 --> 00:45:58,319
now this is this is like crucial i mean

00:45:56,079 --> 00:46:00,240
this is the 102 but that's 101 stuff

00:45:58,319 --> 00:46:02,400
you've got to get that

00:46:00,240 --> 00:46:03,520
which is why a python person always has

00:46:02,400 --> 00:46:06,720
a interactive shell

00:46:03,520 --> 00:46:10,319
what does that do and use things like

00:46:06,720 --> 00:46:13,119
id the id function the is operator

00:46:10,319 --> 00:46:14,800
have i got the right thing the same the

00:46:13,119 --> 00:46:16,000
same difference the same issue applies

00:46:14,800 --> 00:46:17,599
when you're passing arguments to

00:46:16,000 --> 00:46:18,560
functions if you're passing an argument

00:46:17,599 --> 00:46:20,960
to a function

00:46:18,560 --> 00:46:22,720
in python it's always always always

00:46:20,960 --> 00:46:25,440
always no other choice but

00:46:22,720 --> 00:46:26,800
pass by shall we say pass by reference

00:46:25,440 --> 00:46:30,000
it's a biref

00:46:26,800 --> 00:46:31,920
pass it's passing a reference to that

00:46:30,000 --> 00:46:34,079
so if you pass a mutable type like a

00:46:31,920 --> 00:46:36,240
list to a function

00:46:34,079 --> 00:46:39,040
it can change it see programmers

00:46:36,240 --> 00:46:40,560
everything's by pointers

00:46:39,040 --> 00:46:42,480
there's some argument behind the scenes

00:46:40,560 --> 00:46:43,680
about whether a reference in python is

00:46:42,480 --> 00:46:46,079
the same as a reference in

00:46:43,680 --> 00:46:47,440
other languages but the effect is it's

00:46:46,079 --> 00:46:51,200
all by ref

00:46:47,440 --> 00:46:52,960
and everything's a name it's just a name

00:46:51,200 --> 00:46:54,880
so if it's let me let me have a little

00:46:52,960 --> 00:46:58,480
bit of fun i need a bit of fun

00:46:54,880 --> 00:47:02,079
sure yeah yeah oh right

00:46:58,480 --> 00:47:05,920
well now if i rebind so if i do j

00:47:02,079 --> 00:47:06,720
is i they're different objects the id of

00:47:05,920 --> 00:47:08,640
j

00:47:06,720 --> 00:47:10,560
it's still pointing at the thing that it

00:47:08,640 --> 00:47:13,599
used to point at but i

00:47:10,560 --> 00:47:14,640
points at a new object

00:47:13,599 --> 00:47:17,480
which has a different idea it's a

00:47:14,640 --> 00:47:21,359
different object if i then went and

00:47:17,480 --> 00:47:23,040
rebound the name j to point at

00:47:21,359 --> 00:47:24,880
or be a reference to the same object

00:47:23,040 --> 00:47:26,720
that i is pointing at

00:47:24,880 --> 00:47:28,480
well then we're pointing at the same

00:47:26,720 --> 00:47:31,839
object now and we

00:47:28,480 --> 00:47:31,839
we is the same object

00:47:32,160 --> 00:47:35,359
and therefore but the thing to the

00:47:33,839 --> 00:47:37,920
crucial thing to note

00:47:35,359 --> 00:47:39,040
is that you can't change an int

00:47:37,920 --> 00:47:41,920
therefore

00:47:39,040 --> 00:47:44,400
i plus equals one is really slow in

00:47:41,920 --> 00:47:44,400
python

00:47:44,960 --> 00:47:48,400
but then python people that are writing

00:47:46,720 --> 00:47:50,800
python like python should be written

00:47:48,400 --> 00:47:51,440
with a for loop and without using

00:47:50,800 --> 00:47:55,520
counters

00:47:51,440 --> 00:47:57,760
don't worry about about that because

00:47:55,520 --> 00:47:59,440
actually i don't write i plus equals one

00:47:57,760 --> 00:48:01,520
very much in python

00:47:59,440 --> 00:48:03,359
if you're writing a lot of i plus equals

00:48:01,520 --> 00:48:04,880
one yeah you're doing it right

00:48:03,359 --> 00:48:06,960
i don't think so i think you're thinking

00:48:04,880 --> 00:48:10,559
like a seed programmer

00:48:06,960 --> 00:48:10,559
that sounded like an insult but

00:48:11,599 --> 00:48:18,160
there we go that's the ids

00:48:14,720 --> 00:48:21,200
um let's see how we going for time good

00:48:18,160 --> 00:48:21,839
so if we're doing that then maybe i

00:48:21,200 --> 00:48:23,839
should

00:48:21,839 --> 00:48:25,119
go and have a little excursion off into

00:48:23,839 --> 00:48:28,400
dictionary land

00:48:25,119 --> 00:48:31,920
square brackets make a list

00:48:28,400 --> 00:48:35,040
parens make a

00:48:31,920 --> 00:48:38,400
tuple d is a type

00:48:35,040 --> 00:48:43,760
tuple sweet and the big difference with

00:48:38,400 --> 00:48:46,480
a tuple is if i try to append a 4 to it

00:48:43,760 --> 00:48:47,359
the attribute error tuple object has no

00:48:46,480 --> 00:48:50,480
attribute

00:48:47,359 --> 00:48:52,480
append you can't append to a tuple

00:48:50,480 --> 00:48:53,839
i could prove that by doing a directory

00:48:52,480 --> 00:48:56,800
list of a

00:48:53,839 --> 00:48:58,559
tuple and it gives me a list of all of

00:48:56,800 --> 00:49:00,240
the methods and attributes

00:48:58,559 --> 00:49:01,680
in fact really in python we just talk

00:49:00,240 --> 00:49:04,160
about attributes

00:49:01,680 --> 00:49:04,960
so it's that's the list as strings of

00:49:04,160 --> 00:49:08,319
all of the

00:49:04,960 --> 00:49:11,359
functions things inside the tuple

00:49:08,319 --> 00:49:12,319
compare to uh the directory list of

00:49:11,359 --> 00:49:15,760
everything in

00:49:12,319 --> 00:49:16,160
a list and you'll see that lists have

00:49:15,760 --> 00:49:19,440
more

00:49:16,160 --> 00:49:23,359
stuff including um

00:49:19,440 --> 00:49:26,880
off the side of the screen somewhere

00:49:23,359 --> 00:49:30,240
uh where's here ah

00:49:26,880 --> 00:49:34,319
penned um insert

00:49:30,240 --> 00:49:37,760
index count pop to remove an item

00:49:34,319 --> 00:49:40,000
um tuples conversely

00:49:37,760 --> 00:49:41,599
have basically nothing ps all this

00:49:40,000 --> 00:49:43,520
underscore underscore stuff is all the

00:49:41,599 --> 00:49:45,520
special stuff

00:49:43,520 --> 00:49:48,319
that means it's got something special

00:49:45,520 --> 00:49:51,280
that actually tells me that i can add or

00:49:48,319 --> 00:49:52,880
concatenate two lists you can add

00:49:51,280 --> 00:49:55,040
strings you can add ins

00:49:52,880 --> 00:49:57,680
you can add one tuple to another tuple

00:49:55,040 --> 00:50:00,960
and it'll give you a new tuple

00:49:57,680 --> 00:50:04,640
you can add that is plus two lists

00:50:00,960 --> 00:50:05,119
dir another crucial bit of python that i

00:50:04,640 --> 00:50:06,880
use

00:50:05,119 --> 00:50:09,119
i get a new module i'll import the

00:50:06,880 --> 00:50:12,640
module what's in there

00:50:09,119 --> 00:50:16,000
do a dir i'll import math

00:50:12,640 --> 00:50:17,040
yeah or import math i'll import the math

00:50:16,000 --> 00:50:19,920
library hmm

00:50:17,040 --> 00:50:19,920
what's in math

00:50:20,640 --> 00:50:26,319
that's what's in math dir is just a tiny

00:50:24,319 --> 00:50:29,839
little simple little function that

00:50:26,319 --> 00:50:32,720
i use all the time it's not as good as

00:50:29,839 --> 00:50:32,720
uh help

00:50:33,760 --> 00:50:37,680
which gives you an alphabetized list

00:50:35,520 --> 00:50:40,800
with descriptions about everything

00:50:37,680 --> 00:50:45,280
or um

00:50:40,800 --> 00:50:47,280
help on math dot squirt for example

00:50:45,280 --> 00:50:49,440
but dir is the quick and dirty if you

00:50:47,280 --> 00:50:51,520
know what sort of what you're doing

00:50:49,440 --> 00:50:53,040
the first thing that you do is dir and

00:50:51,520 --> 00:50:56,720
that'll give you a list of

00:50:53,040 --> 00:50:57,839
what have i got here so that was all to

00:50:56,720 --> 00:51:00,960
say that dictionaries

00:50:57,839 --> 00:51:02,480
can be created tuples

00:51:00,960 --> 00:51:03,920
oh the other thing about tuples is that

00:51:02,480 --> 00:51:04,480
you can't change them did i tell you

00:51:03,920 --> 00:51:06,319
that

00:51:04,480 --> 00:51:08,000
tuples are immutable change the first

00:51:06,319 --> 00:51:11,599
one to 11. i'm afraid

00:51:08,000 --> 00:51:13,520
not it does not support item assignment

00:51:11,599 --> 00:51:15,760
well what i want though is a dictionary

00:51:13,520 --> 00:51:16,640
now dictionaries are created with square

00:51:15,760 --> 00:51:19,040
brackets

00:51:16,640 --> 00:51:20,559
sorry curly brackets and they'll have a

00:51:19,040 --> 00:51:24,240
key

00:51:20,559 --> 00:51:27,280
peter is 21.

00:51:24,240 --> 00:51:30,960
james is 22

00:51:27,280 --> 00:51:34,160
and john is 20

00:51:30,960 --> 00:51:37,440
make him different 19.

00:51:34,160 --> 00:51:39,839
there's my dictionary now

00:51:37,440 --> 00:51:41,280
that's interesting the first thing to

00:51:39,839 --> 00:51:44,319
note about a dictionary

00:51:41,280 --> 00:51:45,119
is that they are not i'll say they're

00:51:44,319 --> 00:51:46,480
not ordered

00:51:45,119 --> 00:51:48,400
because they're not really ordered they

00:51:46,480 --> 00:51:49,599
do have an internal order that they will

00:51:48,400 --> 00:51:51,760
respond to

00:51:49,599 --> 00:51:52,720
they're actually ordered by the hash of

00:51:51,760 --> 00:51:54,800
the key

00:51:52,720 --> 00:51:57,200
the key must be an immutable type that

00:51:54,800 --> 00:51:59,680
is a string typically

00:51:57,200 --> 00:52:00,400
joy of dictionaries so we've got strings

00:51:59,680 --> 00:52:02,839
we've got

00:52:00,400 --> 00:52:05,040
keys and values keys and values keys and

00:52:02,839 --> 00:52:07,280
values

00:52:05,040 --> 00:52:08,640
but the order is not necessarily

00:52:07,280 --> 00:52:11,359
alphabetic as that

00:52:08,640 --> 00:52:12,720
shows you and ps that order can change

00:52:11,359 --> 00:52:14,400
from different versions of python

00:52:12,720 --> 00:52:15,920
different implementations of python use

00:52:14,400 --> 00:52:16,960
different hashing algorithms different

00:52:15,920 --> 00:52:18,800
keyed orders

00:52:16,960 --> 00:52:21,359
you don't use a dictionary if you want

00:52:18,800 --> 00:52:24,400
it in order

00:52:21,359 --> 00:52:27,359
although i can go and extract the

00:52:24,400 --> 00:52:31,040
keys of the dictionary with the dear

00:52:27,359 --> 00:52:33,839
dictionary give me a list of keys

00:52:31,040 --> 00:52:34,400
if i've got a list of keys i could have

00:52:33,839 --> 00:52:37,680
uh

00:52:34,400 --> 00:52:40,880
i could even go and throw that into a

00:52:37,680 --> 00:52:44,559
list k is a list k go

00:52:40,880 --> 00:52:47,200
sort yourself if i sort the

00:52:44,559 --> 00:52:48,880
list of keys now i've got a sorted list

00:52:47,200 --> 00:52:51,359
of keys

00:52:48,880 --> 00:52:52,079
i could iterate through the ordered list

00:52:51,359 --> 00:52:53,599
of keys

00:52:52,079 --> 00:52:55,280
and extract the items out of the

00:52:53,599 --> 00:52:57,839
dictionary

00:52:55,280 --> 00:52:57,839
in order

00:52:58,319 --> 00:53:01,440
so how do i extract an item out of a

00:52:59,920 --> 00:53:03,599
dictionary i use

00:53:01,440 --> 00:53:04,559
square brackets you create them with

00:53:03,599 --> 00:53:07,119
curlies but

00:53:04,559 --> 00:53:10,160
with both lists tuples dictionaries you

00:53:07,119 --> 00:53:13,280
use square brackets

00:53:10,160 --> 00:53:17,119
and it is case sensitive to

00:53:13,280 --> 00:53:18,960
extract the data so the nice thing going

00:53:17,119 --> 00:53:19,839
back to where i was a long time ago is

00:53:18,960 --> 00:53:22,960
that

00:53:19,839 --> 00:53:25,200
two independent coordinated lists makes

00:53:22,960 --> 00:53:27,040
extracting the data really mucky really

00:53:25,200 --> 00:53:29,760
hard not pretty

00:53:27,040 --> 00:53:30,720
but it would be much better to go and

00:53:29,760 --> 00:53:34,000
create a

00:53:30,720 --> 00:53:37,520
dictionary of cars

00:53:34,000 --> 00:53:40,559
just make it an empty one to start

00:53:37,520 --> 00:53:43,280
get the model get the cost

00:53:40,559 --> 00:53:44,240
and then here i can't append but what i

00:53:43,280 --> 00:53:47,760
can do

00:53:44,240 --> 00:53:51,200
is dictionary

00:53:47,760 --> 00:53:57,119
key of the car

00:53:51,200 --> 00:54:01,280
type or the car name value

00:53:57,119 --> 00:54:04,640
the value oh dear what am i doing there

00:54:01,280 --> 00:54:06,079
value the value and one of the most

00:54:04,640 --> 00:54:07,680
beautiful things i reckon at a

00:54:06,079 --> 00:54:10,800
beginner's

00:54:07,680 --> 00:54:11,359
perspective on python is the ability

00:54:10,800 --> 00:54:14,720
just to

00:54:11,359 --> 00:54:16,800
dump an object pretty print it just dump

00:54:14,720 --> 00:54:19,119
it and you'll get something useful

00:54:16,800 --> 00:54:20,960
so if i come back to where i was and run

00:54:19,119 --> 00:54:24,880
it

00:54:20,960 --> 00:54:27,760
if i that sorry should have been model

00:54:24,880 --> 00:54:30,559
and there we go there's the dictionary

00:54:27,760 --> 00:54:34,079
the fact they're alphabetized

00:54:30,559 --> 00:54:36,000
just lucky i guess if you wanted it a

00:54:34,079 --> 00:54:39,119
little prettier than that

00:54:36,000 --> 00:54:40,640
um i could go and get the uh get the

00:54:39,119 --> 00:54:43,680
keys of the car

00:54:40,640 --> 00:54:47,280
names dictionary dot

00:54:43,680 --> 00:54:49,440
get the keys if you're in the mood for

00:54:47,280 --> 00:54:53,520
it you could names go and sort

00:54:49,440 --> 00:54:54,000
the list of keys and then i could loop

00:54:53,520 --> 00:54:57,760
through

00:54:54,000 --> 00:55:01,319
for each car name in the list of

00:54:57,760 --> 00:55:06,240
names go and print

00:55:01,319 --> 00:55:09,760
cars go and print the name of the car

00:55:06,240 --> 00:55:10,160
and the cars and use that key to look

00:55:09,760 --> 00:55:13,440
back

00:55:10,160 --> 00:55:13,440
into the dictionary

00:55:13,760 --> 00:55:18,400
i think i got that right and there we go

00:55:18,720 --> 00:55:22,079
different lines there obviously because

00:55:20,880 --> 00:55:23,599
um it's print

00:55:22,079 --> 00:55:25,599
if you wanted the same line at a

00:55:23,599 --> 00:55:27,520
trailing comma

00:55:25,599 --> 00:55:29,520
stays on the same line um i could

00:55:27,520 --> 00:55:30,319
abbreviate that the saw ted function

00:55:29,520 --> 00:55:32,240
would be nice

00:55:30,319 --> 00:55:34,160
in there big difference between sort and

00:55:32,240 --> 00:55:36,240
saw ted

00:55:34,160 --> 00:55:38,000
great great mistake for people to make

00:55:36,240 --> 00:55:39,200
this is a this is a top mistake

00:55:38,000 --> 00:55:41,040
if you want to if you want a good

00:55:39,200 --> 00:55:44,559
mistake here's a

00:55:41,040 --> 00:55:48,480
here's a good one um

00:55:44,559 --> 00:55:50,079
names gets names.sort

00:55:48,480 --> 00:55:52,319
that's a brilliant piece of mistake

00:55:50,079 --> 00:55:55,760
right there

00:55:52,319 --> 00:56:03,839
none type object is not iterable ah

00:55:55,760 --> 00:56:03,839
yeah good what's wrong with that

00:56:03,920 --> 00:56:08,000
names dot re sort does not return

00:56:06,240 --> 00:56:09,359
anything well actually it does because

00:56:08,000 --> 00:56:12,400
everything has to

00:56:09,359 --> 00:56:13,839
so it returns the none object it returns

00:56:12,400 --> 00:56:16,960
the none object to say

00:56:13,839 --> 00:56:19,839
don't do this it sorts in place it

00:56:16,960 --> 00:56:22,880
mutates the list

00:56:19,839 --> 00:56:24,480
um there we go so that is a

00:56:22,880 --> 00:56:25,839
dictionary joy of dictionaries why

00:56:24,480 --> 00:56:27,359
they're so good and they're highly

00:56:25,839 --> 00:56:30,559
efficient

00:56:27,359 --> 00:56:32,319
now i've actually run long for my break

00:56:30,559 --> 00:56:34,640
so i think now is probably a good place

00:56:32,319 --> 00:56:37,200
to break

00:56:34,640 --> 00:56:37,680
take a deep breath let's take a break

00:56:37,200 --> 00:56:40,720
for

00:56:37,680 --> 00:56:43,119
say 10 minutes

00:56:40,720 --> 00:56:59,839
and when we come back i think we need to

00:56:43,119 --> 00:56:59,839
make our own classes make our own types

01:00:38,960 --> 01:00:43,839
how's that better there's the models

01:00:44,559 --> 01:00:47,760
i could also create accessors to get

01:00:46,960 --> 01:00:49,119
cost get

01:00:47,760 --> 01:00:51,920
and i shouldn't i could also have

01:00:49,119 --> 01:00:51,920
setters

01:00:54,880 --> 01:00:58,720
however what i'd actually do i'm

01:00:56,559 --> 01:01:01,839
actually going to change this so

01:00:58,720 --> 01:01:04,079
print hey you convert yourself to a

01:01:01,839 --> 01:01:06,319
string

01:01:04,079 --> 01:01:07,200
and another one of the pretty special

01:01:06,319 --> 01:01:11,280
methods

01:01:07,200 --> 01:01:11,680
of a class is the here's what i look

01:01:11,280 --> 01:01:14,799
like

01:01:11,680 --> 01:01:14,799
as a string

01:01:14,960 --> 01:01:22,400
it must repeat must return a string

01:01:18,799 --> 01:01:25,359
so i could return my self

01:01:22,400 --> 01:01:26,799
model concatenated with a space

01:01:25,359 --> 01:01:29,040
concatenated with the

01:01:26,799 --> 01:01:30,160
this is what it looks like as a string

01:01:29,040 --> 01:01:35,599
the self's

01:01:30,160 --> 01:01:39,839
cost and there my friends

01:01:35,599 --> 01:01:39,839
is a sweet bit of sweetness

01:01:41,760 --> 01:01:46,240
so now i've got a class in real life i

01:01:44,240 --> 01:01:50,240
would put this class

01:01:46,240 --> 01:01:53,599
class this class in its own file from

01:01:50,240 --> 01:01:55,039
cars import car um

01:01:53,599 --> 01:01:56,799
and to get it out of here into a

01:01:55,039 --> 01:01:57,920
multiple source file or i'd give it to

01:01:56,799 --> 01:02:00,319
somebody else i say

01:01:57,920 --> 01:02:01,760
you you go and write for me this class

01:02:00,319 --> 01:02:02,640
that takes these arguments in its

01:02:01,760 --> 01:02:05,760
constructor

01:02:02,640 --> 01:02:06,880
stores the data however you feel like it

01:02:05,760 --> 01:02:10,319
and returns a

01:02:06,880 --> 01:02:11,839
whatever so now this is probably the

01:02:10,319 --> 01:02:14,319
best solution that i've got

01:02:11,839 --> 01:02:15,520
for this uh this i've got a um i've got

01:02:14,319 --> 01:02:18,880
a list

01:02:15,520 --> 01:02:20,960
of objects of class car

01:02:18,880 --> 01:02:22,960
and oh by the way i don't even have to

01:02:20,960 --> 01:02:26,160
there's an implicit call to stir

01:02:22,960 --> 01:02:26,559
on print so what i can in fact do is

01:02:26,160 --> 01:02:30,880
print

01:02:26,559 --> 01:02:33,119
car and that's better

01:02:30,880 --> 01:02:35,599
the concept of object orientation is to

01:02:33,119 --> 01:02:39,119
bury the complexity down into the class

01:02:35,599 --> 01:02:42,480
it should be look after its own self

01:02:39,119 --> 01:02:44,559
which is what that does so i that's why

01:02:42,480 --> 01:02:45,200
i would want to make my own type some

01:02:44,559 --> 01:02:46,720
simple

01:02:45,200 --> 01:02:49,359
examples so i've got a list of

01:02:46,720 --> 01:02:52,640
dictionaries there i did need to

01:02:49,359 --> 01:02:55,760
mention um on

01:02:52,640 --> 01:02:56,880
classes and lists i've got a list there

01:02:55,760 --> 01:03:00,400
i've got a list

01:02:56,880 --> 01:03:00,400
this is a list of what

01:03:01,440 --> 01:03:06,720
ince yep but really behind the scenes

01:03:04,319 --> 01:03:08,880
it's a list of objects

01:03:06,720 --> 01:03:11,119
so a list is a list of objects it's a

01:03:08,880 --> 01:03:13,599
list of anything because in python

01:03:11,119 --> 01:03:14,319
everything's an object if everything's

01:03:13,599 --> 01:03:17,200
an object

01:03:14,319 --> 01:03:19,359
then i could have another list which is

01:03:17,200 --> 01:03:23,680
a list of

01:03:19,359 --> 01:03:23,680
a list of one two three

01:03:24,240 --> 01:03:29,440
four five six that'll do

01:03:27,520 --> 01:03:32,160
if i had a look at the len of b what's

01:03:29,440 --> 01:03:32,160
the len of b

01:03:32,400 --> 01:03:34,640
two

01:03:35,440 --> 01:03:40,880
there are two items in b b zero and b

01:03:38,640 --> 01:03:42,000
one i'm really upset with the abc for

01:03:40,880 --> 01:03:44,640
their terrible

01:03:42,000 --> 01:03:46,960
misconceptions that they're giving kids

01:03:44,640 --> 01:03:50,240
it should be b0 and b1

01:03:46,960 --> 01:03:52,880
not b1 and b2 that's a

01:03:50,240 --> 01:03:55,039
and therefore now i could call this a

01:03:52,880 --> 01:03:57,599
two dimensional list

01:03:55,039 --> 01:03:59,119
but in reality python doesn't have

01:03:57,599 --> 01:04:02,160
two-dimensional lists

01:03:59,119 --> 01:04:03,920
it's just got a list of objects and each

01:04:02,160 --> 01:04:05,359
of those objects could be a list

01:04:03,920 --> 01:04:07,599
and each of those lists could be a list

01:04:05,359 --> 01:04:09,280
and each of those could be a dictionary

01:04:07,599 --> 01:04:11,599
with a key of a string and a value of a

01:04:09,280 --> 01:04:14,640
tuple which has

01:04:11,599 --> 01:04:17,280
all the way down what is b12 for a

01:04:14,640 --> 01:04:20,799
t-shirt

01:04:17,280 --> 01:04:23,200
yes at the back six i should check

01:04:20,799 --> 01:04:23,200
shouldn't i

01:04:25,359 --> 01:04:29,359
six cody can you take that to the man in

01:04:28,240 --> 01:04:33,039
the

01:04:29,359 --> 01:04:33,039
plaid shirt at the back

01:04:33,119 --> 01:04:36,559
um list of lists

01:04:37,359 --> 01:04:41,119
so i've kind of been just scooting

01:04:40,319 --> 01:04:45,039
through

01:04:41,119 --> 01:04:46,720
this and we saw creating our own types

01:04:45,039 --> 01:04:48,799
the special methods underscore

01:04:46,720 --> 01:04:49,760
underscore knit underscore underscore

01:04:48,799 --> 01:04:52,000
stir

01:04:49,760 --> 01:04:53,039
some more complex examples there

01:04:52,000 --> 01:04:56,799
inheritance

01:04:53,039 --> 01:04:58,000
is what's happening here

01:04:56,799 --> 01:05:00,559
but there's nothing to stop me

01:04:58,000 --> 01:05:04,319
inheriting from some different type

01:05:00,559 --> 01:05:08,000
like i could have a class

01:05:04,319 --> 01:05:11,280
vehicle which it derives from

01:05:08,000 --> 01:05:14,559
object and does whatever

01:05:11,280 --> 01:05:19,440
or nothing and then

01:05:14,559 --> 01:05:19,440
car would inherit from vehicle

01:05:20,799 --> 01:05:24,880
and that way i can build on types

01:05:27,280 --> 01:05:31,359
um i should cover some of the standard

01:05:30,000 --> 01:05:33,520
library

01:05:31,359 --> 01:05:34,480
we're running uh we're running close to

01:05:33,520 --> 01:05:36,559
the wire

01:05:34,480 --> 01:05:38,559
so let me give you the best resource

01:05:36,559 --> 01:05:41,039
which is the help now while i'm a bit of

01:05:38,559 --> 01:05:43,680
a unfan of windows

01:05:41,039 --> 01:05:45,440
sorry microsoft the help that comes with

01:05:43,680 --> 01:05:47,599
active python is actually quite nice

01:05:45,440 --> 01:05:49,760
because it gives us the python standard

01:05:47,599 --> 01:05:52,319
library

01:05:49,760 --> 01:05:56,640
i can just run it here you also find all

01:05:52,319 --> 01:05:59,760
the documentation at python.org

01:05:56,640 --> 01:06:03,680
and here we have the the built-in

01:05:59,760 --> 01:06:06,240
types such as

01:06:03,680 --> 01:06:07,359
all of the types boolean types of truth

01:06:06,240 --> 01:06:09,920
etc

01:06:07,359 --> 01:06:12,000
we have strings we have numeric and

01:06:09,920 --> 01:06:15,599
mathematical modules such as

01:06:12,000 --> 01:06:19,119
math for my mathematicians complex math

01:06:15,599 --> 01:06:22,160
um etc file and directory access with

01:06:19,119 --> 01:06:24,880
os os.path etc

01:06:22,160 --> 01:06:25,839
data persistence store the data for next

01:06:24,880 --> 01:06:29,359
day

01:06:25,839 --> 01:06:32,240
including sql data compression

01:06:29,359 --> 01:06:32,799
yay zip tar all of that sort of stuff

01:06:32,240 --> 01:06:36,400
built in

01:06:32,799 --> 01:06:40,480
the batteries are included file formats

01:06:36,400 --> 01:06:42,079
csvs etc the crypt support is actually

01:06:40,480 --> 01:06:44,720
not great but we have the hashing

01:06:42,079 --> 01:06:44,720
algorithms

01:06:45,200 --> 01:06:49,599
operating system services internet data

01:06:47,920 --> 01:06:54,240
data handling emails

01:06:49,599 --> 01:06:56,400
json you name it base64 conversions all

01:06:54,240 --> 01:06:58,720
of that's all built in

01:06:56,400 --> 01:06:59,680
internet i can suck stuff down from the

01:06:58,720 --> 01:07:02,720
web

01:06:59,680 --> 01:07:04,960
push stuff off in fact python even comes

01:07:02,720 --> 01:07:06,640
out of the box with a web server so i've

01:07:04,960 --> 01:07:10,640
got everything i need to

01:07:06,640 --> 01:07:14,319
really do stuff right right from here

01:07:10,640 --> 01:07:16,000
and even guise so if you're uh

01:07:14,319 --> 01:07:17,520
if you're creating a web front end you

01:07:16,000 --> 01:07:19,119
wouldn't use that

01:07:17,520 --> 01:07:20,880
but if you're doing a little app for

01:07:19,119 --> 01:07:23,680
somebody to use the

01:07:20,880 --> 01:07:25,599
tk inter module so russell's actually

01:07:23,680 --> 01:07:26,720
doing a good talk on that tomorrow so

01:07:25,599 --> 01:07:27,680
i'd encourage you if you want to know

01:07:26,720 --> 01:07:30,240
more about guis

01:07:27,680 --> 01:07:32,880
have a look at that all built in all

01:07:30,240 --> 01:07:36,400
comes out of the box

01:07:32,880 --> 01:07:36,400
so that brings me

01:07:36,480 --> 01:07:43,839
to question time are there any questions

01:07:39,039 --> 01:07:43,839
at the very back

01:07:45,440 --> 01:07:51,839
sure the output loop for my car program

01:07:49,280 --> 01:07:53,359
has oh yeah sorry the question was he

01:07:51,839 --> 01:07:54,720
wanted to see the output loop for the

01:07:53,359 --> 01:07:58,880
program

01:07:54,720 --> 01:08:00,319
um there are cars plural is the list of

01:07:58,880 --> 01:08:02,400
dictionaries

01:08:00,319 --> 01:08:04,079
but p.s it's actually just a from my

01:08:02,400 --> 01:08:04,799
perspective looking at that it's just an

01:08:04,079 --> 01:08:06,160
iterable

01:08:04,799 --> 01:08:08,400
that is it's something that i can

01:08:06,160 --> 01:08:09,760
iterate through that is it's something i

01:08:08,400 --> 01:08:13,039
can for each item

01:08:09,760 --> 01:08:16,960
in the container for each car

01:08:13,039 --> 01:08:20,239
in the iterable line 45

01:08:16,960 --> 01:08:20,560
car go print yourself that is it'll call

01:08:20,239 --> 01:08:25,199
the

01:08:20,560 --> 01:08:26,480
implicit st sorry for my bad english

01:08:25,199 --> 01:08:28,719
but that's really what it does in the

01:08:26,480 --> 01:08:30,640
object world car go print yourself that

01:08:28,719 --> 01:08:34,719
is called the stir method on the

01:08:30,640 --> 01:08:38,560
car object away we go

01:08:34,719 --> 01:08:42,000
at the front

01:08:38,560 --> 01:08:43,520
ah why wouldn't you

01:08:42,000 --> 01:08:45,279
good point no there might be many other

01:08:43,520 --> 01:08:48,400
things that's where you would make

01:08:45,279 --> 01:08:52,239
accessors what we would call getters

01:08:48,400 --> 01:08:56,560
like get model um get uh

01:08:52,239 --> 01:08:59,679
and other getters so i could get model

01:08:56,560 --> 01:09:03,199
and i could uh get cost

01:08:59,679 --> 01:09:06,080
and it would return the cost

01:09:03,199 --> 01:09:08,239
maybe it'll return the depreciated value

01:09:06,080 --> 01:09:10,880
of the cost

01:09:08,239 --> 01:09:12,319
using a global function previously

01:09:10,880 --> 01:09:16,560
created

01:09:12,319 --> 01:09:21,440
and then i could say print car

01:09:16,560 --> 01:09:25,120
module sorry get model

01:09:21,440 --> 01:09:27,520
get model is now

01:09:25,120 --> 01:09:27,520
worth

01:09:28,960 --> 01:09:35,839
car dot get cost

01:09:36,960 --> 01:09:43,600
ah and i missed a

01:09:40,560 --> 01:09:43,600
semicolon there

01:09:46,000 --> 01:09:51,679
now worth only ninety thousand point

01:09:48,640 --> 01:09:51,679
zero because it's a float

01:09:59,120 --> 01:10:03,840
um you can't so

01:10:05,679 --> 01:10:11,280
no no and python 2 is a bit

01:10:08,719 --> 01:10:12,239
hampered with print as others have said

01:10:11,280 --> 01:10:14,159
print

01:10:12,239 --> 01:10:15,679
print is a keyword but it should really

01:10:14,159 --> 01:10:17,920
be a function

01:10:15,679 --> 01:10:19,920
because we can't really do good stuff

01:10:17,920 --> 01:10:21,280
with it i can't easily say i'll print

01:10:19,920 --> 01:10:24,320
this to a file

01:10:21,280 --> 01:10:27,360
i could do it using redirection at the

01:10:24,320 --> 01:10:28,880
operating system level but yes i in

01:10:27,360 --> 01:10:30,239
which case i probably wouldn't use print

01:10:28,880 --> 01:10:30,800
and in a lot of my real-life ones i've

01:10:30,239 --> 01:10:33,440
got um

01:10:30,800 --> 01:10:34,480
print it which is my function which

01:10:33,440 --> 01:10:36,239
would normally print it

01:10:34,480 --> 01:10:39,760
but sometimes prints it and writes it to

01:10:36,239 --> 01:10:44,400
a log file or does something else

01:10:39,760 --> 01:10:45,840
in the stripy jumper

01:10:44,400 --> 01:10:47,679
ah thank you thank you that's really

01:10:45,840 --> 01:10:48,800
nice of you um

01:10:47,679 --> 01:10:50,480
i was just wondering if you could maybe

01:10:48,800 --> 01:10:50,880
explain a little bit about self and like

01:10:50,480 --> 01:10:53,360
the thing

01:10:50,880 --> 01:10:55,199
ah the self how it works well what

01:10:53,360 --> 01:10:58,560
happened was that god created us

01:10:55,199 --> 01:10:59,760
and now the the most valuable thing that

01:10:58,560 --> 01:11:01,760
we have

01:10:59,760 --> 01:11:03,840
is our consciousness our awareness and

01:11:01,760 --> 01:11:06,239
our choice the fact that we can make

01:11:03,840 --> 01:11:07,840
choices sorry that probably wasn't what

01:11:06,239 --> 01:11:10,000
you were asking

01:11:07,840 --> 01:11:11,040
i'm happy to talk about that afterwards

01:11:10,000 --> 01:11:14,080
um the

01:11:11,040 --> 01:11:17,840
self is the reference to the current

01:11:14,080 --> 01:11:20,800
object so that is it's me

01:11:17,840 --> 01:11:22,880
so it's how i get to my data that's

01:11:20,800 --> 01:11:26,400
stored in

01:11:22,880 --> 01:11:29,520
in me so in other languages

01:11:26,400 --> 01:11:31,360
like java and c plus plus in

01:11:29,520 --> 01:11:33,679
java you've got how do you get the

01:11:31,360 --> 01:11:36,320
reference to the self

01:11:33,679 --> 01:11:39,040
it's the this reference and in c plus

01:11:36,320 --> 01:11:39,040
plus it's the

01:11:39,280 --> 01:11:43,199
it's also called this but it's a pointer

01:11:41,360 --> 01:11:44,560
to the self but they're hidden they're

01:11:43,199 --> 01:11:46,640
not shown

01:11:44,560 --> 01:11:48,239
we're running a little tight there but

01:11:46,640 --> 01:11:50,239
um what i would mention

01:11:48,239 --> 01:11:51,840
to you is very important that you're all

01:11:50,239 --> 01:11:55,760
familiar with the zen

01:11:51,840 --> 01:11:58,960
you all familiar with the zen yes oh yes

01:11:55,760 --> 01:11:58,960
you've all imported this

01:12:00,400 --> 01:12:06,480
anyone ever import this it's this is the

01:12:03,600 --> 01:12:09,440
easter egg that we've got

01:12:06,480 --> 01:12:10,560
also known as the zen of python the

01:12:09,440 --> 01:12:12,239
first one my favorite

01:12:10,560 --> 01:12:14,320
beautiful is better than ugly why i

01:12:12,239 --> 01:12:16,560
married my wife not sure why she married

01:12:14,320 --> 01:12:16,560
me

01:12:16,880 --> 01:12:20,000
but the second one is what i want to

01:12:18,400 --> 01:12:21,280
draw your attention to to answer this

01:12:20,000 --> 01:12:23,520
question which is in

01:12:21,280 --> 01:12:24,640
java and c plus plus the reference to

01:12:23,520 --> 01:12:27,440
the self is hidden

01:12:24,640 --> 01:12:29,360
it is there but it's not shown in python

01:12:27,440 --> 01:12:31,760
to follow that zen

01:12:29,360 --> 01:12:32,719
to follow that shall we say rule or

01:12:31,760 --> 01:12:35,120
philosophy

01:12:32,719 --> 01:12:37,840
we have that explicit is better than

01:12:35,120 --> 01:12:37,840
implicit

01:12:39,360 --> 01:12:43,679
question at the front

01:12:42,400 --> 01:12:45,199
would you be able to say something about

01:12:43,679 --> 01:12:46,239
memory allocation obviously the way that

01:12:45,199 --> 01:12:50,080
it translates ah

01:12:46,239 --> 01:12:52,719
memory allocation i can't remember

01:12:50,080 --> 01:12:53,920
yes good question excellent question if

01:12:52,719 --> 01:12:56,719
i had a look

01:12:53,920 --> 01:12:56,719
at um

01:13:00,640 --> 01:13:05,679
if i had a look at if i had a brain

01:13:03,600 --> 01:13:09,280
sorry i won't singing singing's extra

01:13:05,679 --> 01:13:09,280
that's in the deluxe course

01:13:11,520 --> 01:13:14,960
i don't get a lot of call for that

01:13:12,800 --> 01:13:15,520
around here uh this situation i points

01:13:14,960 --> 01:13:18,080
at that

01:13:15,520 --> 01:13:19,760
b points at that so there's no extra

01:13:18,080 --> 01:13:23,280
memory allocated

01:13:19,760 --> 01:13:25,040
when i make a append there'll be a bit

01:13:23,280 --> 01:13:28,719
more memory allocated there

01:13:25,040 --> 01:13:32,239
for the what's really a linked list

01:13:28,719 --> 01:13:36,080
um b points at that

01:13:32,239 --> 01:13:38,960
when in this scenario

01:13:36,080 --> 01:13:39,280
j is still pointing at the number three

01:13:38,960 --> 01:13:41,360
so

01:13:39,280 --> 01:13:43,280
its memory hasn't been deallocated so i

01:13:41,360 --> 01:13:43,840
haven't actually had any releasing

01:13:43,280 --> 01:13:49,199
happen

01:13:43,840 --> 01:13:52,320
yet in python what happens

01:13:49,199 --> 01:13:52,320
there's the zen

01:13:52,560 --> 01:13:56,719
if i've got i gets 3 here's the

01:13:55,600 --> 01:14:01,040
replication of that

01:13:56,719 --> 01:14:04,159
j gets i pointing at the same object

01:14:01,040 --> 01:14:06,880
i points at a new object j

01:14:04,159 --> 01:14:07,920
there's been no memory released yet here

01:14:06,880 --> 01:14:11,360
though if i now

01:14:07,920 --> 01:14:13,199
make j point at something else

01:14:11,360 --> 01:14:15,440
then the pointer back to the number

01:14:13,199 --> 01:14:18,719
three the number three object is now

01:14:15,440 --> 01:14:22,159
no longer needed uh no references

01:14:18,719 --> 01:14:22,719
pointing at it and therefore python uses

01:14:22,159 --> 01:14:26,000
a

01:14:22,719 --> 01:14:27,760
not terribly sophisticated from

01:14:26,000 --> 01:14:30,400
other languages perspective memory

01:14:27,760 --> 01:14:32,719
allocation reference counter

01:14:30,400 --> 01:14:35,120
and it says oh i can't reach that the

01:14:32,719 --> 01:14:37,679
reference count is reduced to zero

01:14:35,120 --> 01:14:39,040
and now that object is eligible for

01:14:37,679 --> 01:14:41,440
garbage collection

01:14:39,040 --> 01:14:42,640
like java there's a background task that

01:14:41,440 --> 01:14:45,679
runs all the time

01:14:42,640 --> 01:14:48,400
cleaning up you can import gc

01:14:45,679 --> 01:14:50,560
and do i can't remember gc dot verbose

01:14:48,400 --> 01:14:51,920
or something to get

01:14:50,560 --> 01:14:57,280
more information about what the garbage

01:14:51,920 --> 01:14:59,920
collector is doing

01:14:57,280 --> 01:15:02,080
yes so the the the the um the

01:14:59,920 --> 01:15:04,080
philosophical answer to the question is

01:15:02,080 --> 01:15:06,000
firstly python programmers go i don't

01:15:04,080 --> 01:15:07,199
care about memory it's just

01:15:06,000 --> 01:15:09,120
if you're running out of memory you just

01:15:07,199 --> 01:15:10,880
buy more

01:15:09,120 --> 01:15:12,239
memory is cheap programmers are

01:15:10,880 --> 01:15:14,320
expensive

01:15:12,239 --> 01:15:16,159
if program if python's running too slow

01:15:14,320 --> 01:15:18,239
you just get a faster computer it's much

01:15:16,159 --> 01:15:20,480
faster much easier much cheaper to get a

01:15:18,239 --> 01:15:23,600
faster computer than get a

01:15:20,480 --> 01:15:24,640
rewrite it in c plus plus one python

01:15:23,600 --> 01:15:26,560
programmer can do

01:15:24,640 --> 01:15:29,280
in six months what two c plus plus

01:15:26,560 --> 01:15:32,239
programmers can't do in a year

01:15:29,280 --> 01:15:33,520
um however i i'm being a little

01:15:32,239 --> 01:15:36,480
facetious there

01:15:33,520 --> 01:15:38,560
if this was something rather large like

01:15:36,480 --> 01:15:41,360
the range of numbers from one to some

01:15:38,560 --> 01:15:41,360
large number

01:15:41,440 --> 01:15:45,040
then there's actually been a fair bit of

01:15:43,360 --> 01:15:47,520
memory allocated for my c

01:15:45,040 --> 01:15:48,320
programmers typically c python two point

01:15:47,520 --> 01:15:51,679
something um

01:15:48,320 --> 01:15:53,199
is about 20 bytes for uh on 32-bit for

01:15:51,679 --> 01:15:55,840
an inch

01:15:53,199 --> 01:15:57,760
ouch so if i go and allocate whatever

01:15:55,840 --> 01:16:00,800
that was 100 million

01:15:57,760 --> 01:16:04,080
that's a lot of bytes so if you

01:16:00,800 --> 01:16:06,960
are wanting to release early which is a

01:16:04,080 --> 01:16:08,800
noble thing to do then you could do that

01:16:06,960 --> 01:16:10,159
the simplest way the most obvious way is

01:16:08,800 --> 01:16:11,920
to point to the object that we've always

01:16:10,159 --> 01:16:16,480
got access to which is the none

01:16:11,920 --> 01:16:16,480
object and then that says

01:16:16,719 --> 01:16:24,080
nobody is now pointing at that unnamed

01:16:20,320 --> 01:16:27,760
uh large list of integers

01:16:24,080 --> 01:16:27,760
and now i'm releasing my memory

01:16:28,719 --> 01:16:32,719
questions in the white and brown stripy

01:16:31,760 --> 01:16:34,880
shirt

01:16:32,719 --> 01:16:36,560
i often find myself writing a lot of

01:16:34,880 --> 01:16:38,320
functions and wondering when i should

01:16:36,560 --> 01:16:39,679
use a class instead and kind of vice

01:16:38,320 --> 01:16:40,560
versa and i was wondering if you had any

01:16:39,679 --> 01:16:44,080
comments on that

01:16:40,560 --> 01:16:44,080
yes um

01:16:45,120 --> 01:16:50,239
global function so what i would call

01:16:48,320 --> 01:16:51,679
so the question is about um when would i

01:16:50,239 --> 01:16:53,760
write functions when would i write

01:16:51,679 --> 01:16:56,480
classes

01:16:53,760 --> 01:16:57,280
this is what one might call a global

01:16:56,480 --> 01:17:02,080
function

01:16:57,280 --> 01:17:05,679
it belongs to the globe or the module

01:17:02,080 --> 01:17:07,760
in one sense in one sense we don't

01:17:05,679 --> 01:17:08,560
actually even have global functions in

01:17:07,760 --> 01:17:11,600
python

01:17:08,560 --> 01:17:12,960
a function is a member of a it's not a

01:17:11,600 --> 01:17:14,239
member of a class it's a member of a

01:17:12,960 --> 01:17:16,800
module

01:17:14,239 --> 01:17:18,239
and modules actually look a lot like

01:17:16,800 --> 01:17:19,920
classes

01:17:18,239 --> 01:17:21,679
in fact there's really it's a little

01:17:19,920 --> 01:17:22,320
blurry when i start looking at it

01:17:21,679 --> 01:17:26,560
because

01:17:22,320 --> 01:17:30,080
the standard declaration when i

01:17:26,560 --> 01:17:33,679
do um you know if i import the math

01:17:30,080 --> 01:17:36,719
module math dot square root

01:17:33,679 --> 01:17:40,560
looks a lot like

01:17:36,719 --> 01:17:43,360
object dot method so in one sense

01:17:40,560 --> 01:17:44,000
that method is in that function is a

01:17:43,360 --> 01:17:48,080
method of

01:17:44,000 --> 01:17:48,080
the module as opposed to a class

01:17:48,159 --> 01:17:51,600
but to take it back a bit the thing

01:17:50,480 --> 01:17:54,400
about classes

01:17:51,600 --> 01:17:56,840
is that you'll you you need to start

01:17:54,400 --> 01:17:58,159
thinking about classes before you start

01:17:56,840 --> 01:17:59,920
coding

01:17:58,159 --> 01:18:01,920
no i've done this exercise before so i

01:17:59,920 --> 01:18:03,840
sort of knew where i was going

01:18:01,920 --> 01:18:06,640
but when you start examining your

01:18:03,840 --> 01:18:06,640
real-life

01:18:08,080 --> 01:18:14,080
system or the real life system

01:18:11,120 --> 01:18:15,120
um scenario that's when you start going

01:18:14,080 --> 01:18:17,199
oh well where are the

01:18:15,120 --> 01:18:19,440
where are the class what are the types

01:18:17,199 --> 01:18:22,480
of things that i'm dealing with

01:18:19,440 --> 01:18:24,640
oh i've got a amorphous

01:18:22,480 --> 01:18:26,800
car thing which has things that it can

01:18:24,640 --> 01:18:28,159
do and things that it stores and stuff i

01:18:26,800 --> 01:18:30,480
can pull out of it

01:18:28,159 --> 01:18:31,360
and that's my in the internet world

01:18:30,480 --> 01:18:34,560
we've got a

01:18:31,360 --> 01:18:36,480
packet and a packet is a thing that has

01:18:34,560 --> 01:18:38,800
things in it and a source ip and a

01:18:36,480 --> 01:18:42,159
destination ip and it has a

01:18:38,800 --> 01:18:45,280
body and a crc and uh that's in

01:18:42,159 --> 01:18:46,719
the that's the thing so

01:18:45,280 --> 01:18:49,600
i should really be thinking about

01:18:46,719 --> 01:18:52,880
classes a lot before i start coding

01:18:49,600 --> 01:18:56,480
and going what are the types in my

01:18:52,880 --> 01:18:56,480
system that i need to do

01:18:57,040 --> 01:19:03,920
questions in the white shirt

01:19:01,199 --> 01:19:05,600
sometimes it seems as though a class

01:19:03,920 --> 01:19:09,040
should have other classes in it

01:19:05,600 --> 01:19:10,080
yes yes absolutely absolutely absolutely

01:19:09,040 --> 01:19:12,800
and definitely

01:19:10,080 --> 01:19:14,000
so what um i'm this is a very simple

01:19:12,800 --> 01:19:16,080
class although i do have some

01:19:14,000 --> 01:19:19,960
inheritance happening

01:19:16,080 --> 01:19:22,960
um i'm inheriting oh this is a

01:19:19,960 --> 01:19:24,640
specialized class of this other class

01:19:22,960 --> 01:19:27,920
which is a more generic

01:19:24,640 --> 01:19:32,480
base class so vehicle is a generic

01:19:27,920 --> 01:19:34,880
class and car is a specialized form

01:19:32,480 --> 01:19:36,719
of that now that relationship between

01:19:34,880 --> 01:19:40,320
car and vehicle is known as a

01:19:36,719 --> 01:19:44,400
is a relationship so a car

01:19:40,320 --> 01:19:45,600
is a vehicle or is a specialized type of

01:19:44,400 --> 01:19:48,320
a specialized example

01:19:45,600 --> 01:19:48,880
of a specialized one-off however the

01:19:48,320 --> 01:19:51,840
model

01:19:48,880 --> 01:19:52,960
and the cost is an example of the hazard

01:19:51,840 --> 01:19:56,000
relationship

01:19:52,960 --> 01:19:59,280
a car has a model a car

01:19:56,000 --> 01:19:59,280
has a cost

01:19:59,440 --> 01:20:06,480
sorry i said that wrong a car

01:20:02,960 --> 01:20:10,000
is a model and a car breathe

01:20:06,480 --> 01:20:13,679
a car has a model and a car has a

01:20:10,000 --> 01:20:15,600
cost model and cost are just objects

01:20:13,679 --> 01:20:20,159
though

01:20:15,600 --> 01:20:23,440
so a car could have a ecu

01:20:20,159 --> 01:20:23,440
and that ecu is a

01:20:23,840 --> 01:20:31,120
object of a class

01:20:26,880 --> 01:20:33,920
control computer so

01:20:31,120 --> 01:20:36,159
the only difference between an int and a

01:20:33,920 --> 01:20:38,560
object of class

01:20:36,159 --> 01:20:40,480
control computer is well really nothing

01:20:38,560 --> 01:20:42,400
they're both objects

01:20:40,480 --> 01:20:43,840
of a certain class it's just that ins

01:20:42,400 --> 01:20:46,800
come with python

01:20:43,840 --> 01:20:48,560
and control computer does not come with

01:20:46,800 --> 01:20:51,280
python

01:20:48,560 --> 01:20:52,560
earlier i said that car is a vehicle

01:20:51,280 --> 01:20:55,440
it's not a car

01:20:52,560 --> 01:20:56,239
is leica vehicle so what i should have

01:20:55,440 --> 01:20:59,520
said was that

01:20:56,239 --> 01:21:03,280
the car class is leica

01:20:59,520 --> 01:21:06,880
and follows the isliker relationship

01:21:03,280 --> 01:21:10,000
my car cars

01:21:06,880 --> 01:21:13,280
zero my car

01:21:10,000 --> 01:21:15,840
that is a object of class

01:21:13,280 --> 01:21:15,840
car

01:21:16,960 --> 01:21:20,560
at the front probably the last question

01:21:19,360 --> 01:21:22,800
i think

01:21:20,560 --> 01:21:24,480
okay quick question um when i create a

01:21:22,800 --> 01:21:28,080
class and instantiate the object

01:21:24,480 --> 01:21:30,719
yes um it looks like it's uh

01:21:28,080 --> 01:21:31,280
mutable so if i make changes to that

01:21:30,719 --> 01:21:33,679
object

01:21:31,280 --> 01:21:34,719
uh references to that object it's still

01:21:33,679 --> 01:21:38,080
the same object

01:21:34,719 --> 01:21:39,440
yes um how do i make it immutable and

01:21:38,080 --> 01:21:42,000
what are the benefits of having an

01:21:39,440 --> 01:21:43,920
immutable ah good question excellent

01:21:42,000 --> 01:21:45,520
so the question has to do with the

01:21:43,920 --> 01:21:49,040
mutability of my

01:21:45,520 --> 01:21:52,960
objects um and to answer that let me

01:21:49,040 --> 01:21:55,120
examine the car class that i've created

01:21:52,960 --> 01:21:56,080
and so the question looking at that is

01:21:55,120 --> 01:21:59,600
is the car

01:21:56,080 --> 01:21:59,600
class mutable

01:22:00,080 --> 01:22:04,960
or immutable at this stage it would look

01:22:04,400 --> 01:22:06,639
like

01:22:04,960 --> 01:22:08,560
and it would be reasonable to say that

01:22:06,639 --> 01:22:11,040
it's an immutable class

01:22:08,560 --> 01:22:12,159
because there's no methods like dot

01:22:11,040 --> 01:22:15,600
append

01:22:12,159 --> 01:22:19,040
dot sort dot reverse that would actually

01:22:15,600 --> 01:22:22,080
be able to change this notice that i

01:22:19,040 --> 01:22:23,679
cannot change any of the data in this

01:22:22,080 --> 01:22:27,040
class

01:22:23,679 --> 01:22:30,400
it gets set in the constructor i have no

01:22:27,040 --> 01:22:31,199
setters i've got a get cost but i don't

01:22:30,400 --> 01:22:33,600
have a set

01:22:31,199 --> 01:22:33,600
cost

01:22:34,320 --> 01:22:41,120
yeah yeah

01:22:38,719 --> 01:22:42,560
exactly exactly now the thing about

01:22:41,120 --> 01:22:44,239
these is that

01:22:42,560 --> 01:22:45,920
i'm i'm saying at first appearance it

01:22:44,239 --> 01:22:46,800
looks like this is an immutable class

01:22:45,920 --> 01:22:49,600
and it can't be

01:22:46,800 --> 01:22:50,239
changed however particularly for my java

01:22:49,600 --> 01:22:53,199
and c

01:22:50,239 --> 01:22:54,000
plus friends we don't really have

01:22:53,199 --> 01:22:57,360
private

01:22:54,000 --> 01:23:01,920
public kind of thing happening in python

01:22:57,360 --> 01:23:04,560
so i can even create classes on the fly

01:23:01,920 --> 01:23:05,199
so i could go and create a class called

01:23:04,560 --> 01:23:09,600
c

01:23:05,199 --> 01:23:12,719
with the contents of i say nothing

01:23:09,600 --> 01:23:15,199
i can now instantiate that class c looks

01:23:12,719 --> 01:23:15,199
like that

01:23:15,440 --> 01:23:20,560
but i can in fact even go and create

01:23:19,840 --> 01:23:25,199
properties

01:23:20,560 --> 01:23:25,199
that is attributes on the fly

01:23:28,000 --> 01:23:32,960
c dot age equals 21.

01:23:31,120 --> 01:23:34,639
doesn't actually change how it looks i

01:23:32,960 --> 01:23:36,960
could go and throw in a new

01:23:34,639 --> 01:23:38,639
i'd have to use a lambda function make a

01:23:36,960 --> 01:23:39,840
new method in there that would be a

01:23:38,639 --> 01:23:43,360
little bit

01:23:39,840 --> 01:23:47,280
gnarly but that object is

01:23:43,360 --> 01:23:50,159
mutable i can change it on the fly

01:23:47,280 --> 01:23:51,199
um to the second part of your question

01:23:50,159 --> 01:23:53,360
is it worthwhile doing

01:23:51,199 --> 01:23:54,480
probably yes because why are tuples

01:23:53,360 --> 01:23:58,320
immutable because they

01:23:54,480 --> 01:23:58,320
just it's just you can't reckon then

01:23:58,639 --> 01:24:03,199
and sometimes they give rise to

01:24:01,440 --> 01:24:05,840
efficiencies that might not be possible

01:24:03,199 --> 01:24:05,840
in other ways

01:24:08,159 --> 01:24:12,400
the best way to do it is probably not

01:24:10,239 --> 01:24:14,800
like this you can hack around with the

01:24:12,400 --> 01:24:17,040
get atta and the get attribute methods

01:24:14,800 --> 01:24:18,080
this underscore underscore set attribute

01:24:17,040 --> 01:24:20,080
method

01:24:18,080 --> 01:24:21,280
that's a bit mucky the best way to do be

01:24:20,080 --> 01:24:23,920
to inherit from something that's

01:24:21,280 --> 01:24:28,000
immutable like

01:24:23,920 --> 01:24:30,239
tuple or

01:24:28,000 --> 01:24:31,040
further research for you uh post course

01:24:30,239 --> 01:24:34,800
look into the

01:24:31,040 --> 01:24:37,199
abc module the abstract based class

01:24:34,800 --> 01:24:38,480
the abstract base class core class since

01:24:37,199 --> 01:24:42,800
uh 2.5

01:24:38,480 --> 01:24:44,320
i think it would be the best place to

01:24:42,800 --> 01:24:48,400
start looking to

01:24:44,320 --> 01:24:50,960
good answers to that okay last question

01:24:48,400 --> 01:24:53,199
actually not last question unless it's

01:24:50,960 --> 01:24:53,199
quick

01:24:53,440 --> 01:24:58,880
ah cloneanobject.clone that's how you do

01:24:56,480 --> 01:25:01,360
it in java

01:24:58,880 --> 01:25:02,560
we don't really have such things as dot

01:25:01,360 --> 01:25:05,760
clone we don't

01:25:02,560 --> 01:25:08,960
really have such things like

01:25:05,760 --> 01:25:10,960
copy constructors but you can

01:25:08,960 --> 01:25:12,639
we don't have overloading of operators

01:25:10,960 --> 01:25:14,560
sorry overloading of methods

01:25:12,639 --> 01:25:16,960
so you can't overload based on type so i

01:25:14,560 --> 01:25:18,560
can only have one constructor

01:25:16,960 --> 01:25:20,000
but you could look you could do a bit of

01:25:18,560 --> 01:25:22,159
fudgy stuff with

01:25:20,000 --> 01:25:24,239
the constructor to build a new object

01:25:22,159 --> 01:25:26,719
from an existing object

01:25:24,239 --> 01:25:28,400
by looking at did i get an argument

01:25:26,719 --> 01:25:31,120
default arguments is something to look

01:25:28,400 --> 01:25:34,800
at in that as well

01:25:31,120 --> 01:25:35,360
thank you okay um well oh thank me oh

01:25:34,800 --> 01:25:37,840
thank me

01:25:35,360 --> 01:25:41,840
also join me in thanking peter for his

01:25:37,840 --> 01:25:41,840

YouTube URL: https://www.youtube.com/watch?v=yyzX_7lR7Mk


