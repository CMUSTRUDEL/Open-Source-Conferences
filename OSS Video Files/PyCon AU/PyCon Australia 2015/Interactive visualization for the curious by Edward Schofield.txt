Title: Interactive visualization for the curious by Edward Schofield
Publication date: 2015-08-04
Playlist: PyCon Australia 2015
Description: 
	The workhorse plotting tool in Python for most of this century has been Matplotlib. It is stable, powerful, and comprehensive. But the plots it produces are (mostly) lifeless.

The web is now emerging as a superior visualization platform to traditional GUI backends, thanks to SVG, HTML5 Canvas, and WebGL, the speed and quality of modern browsers, and an explosion of high-quality visualization libraries in JavaScript. But what is the Python developer to do? Can we drive these browser-based capabilities from Python?

Thankfully, several recent Python projects are making progress toward this goal -- including MPLd3, Bokeh, and VisPy. These each have different goals and make different design decisions, but all three offer obvious advantages: being able to publish visualizations that users can interact with to extract more meaning from data.

This talk will give shiny demos and review these newer projects thoroughly vis-a-vis other libraries to help you decide whether, or when, to adopt one of them as your go-to visualization library. We will answer these questions: How does the performance compare? Would you need to rewrite all your plotting code? What would it take to integrate Bokeh or VisPy well with the current ecosystem of Python plotting libraries and data analysis tools? What is on the horizon for the different projects? Where do the Jupyter project's interactive widgets fit into this picture?

Come to hear a critical review about the past, present, and future of interactive visualization in Python.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:09,850 --> 00:00:16,390
okay hi I

00:00:12,700 --> 00:00:18,670
I'd like to show you some kind of shiny

00:00:16,390 --> 00:00:19,510
demos of some different visualization

00:00:18,670 --> 00:00:21,550
tools

00:00:19,510 --> 00:00:25,779
I think visualization is a field that's

00:00:21,550 --> 00:00:28,060
really moving and advancing recently so

00:00:25,779 --> 00:00:31,000
I like to sort of give you a bit of a

00:00:28,060 --> 00:00:33,670
history of of that in the Python context

00:00:31,000 --> 00:00:35,829
and then show you the some some projects

00:00:33,670 --> 00:00:38,260
that nowadays are a sort of out there

00:00:35,829 --> 00:00:45,040
and available to to Jerusalem quite

00:00:38,260 --> 00:00:49,720
interesting things now I suppose since

00:00:45,040 --> 00:00:53,020
about 2002 we've had matplotlib and it's

00:00:49,720 --> 00:00:54,910
been it's been developed over a long

00:00:53,020 --> 00:00:58,030
period of time it's it's stable mature

00:00:54,910 --> 00:01:01,540
it's got great documentation 2,600 pages

00:00:58,030 --> 00:01:03,190
of documentation last time I checked it

00:01:01,540 --> 00:01:06,729
support lots of different file formats

00:01:03,190 --> 00:01:07,930
for export it supports several different

00:01:06,729 --> 00:01:10,570
platforms and different windowing and

00:01:07,930 --> 00:01:13,470
toolkits on different platforms okay but

00:01:10,570 --> 00:01:16,439
it's not really for interactive plots

00:01:13,470 --> 00:01:19,240
now I'd like to show you the kinds of

00:01:16,439 --> 00:01:24,700
interactivity you can achieve with

00:01:19,240 --> 00:01:28,479
matplotlib and what that might be useful

00:01:24,700 --> 00:01:35,439
for first of all so I'll flick over to

00:01:28,479 --> 00:01:38,740
to this now so so here's a very simple

00:01:35,439 --> 00:01:44,590
example this was a long time ago by Eli

00:01:38,740 --> 00:01:48,999
bender ski it's just a basic QT kind of

00:01:44,590 --> 00:01:51,130
a cute interface with with the ability

00:01:48,999 --> 00:01:53,439
to you know move this slider to increase

00:01:51,130 --> 00:01:56,469
the width of the bars and you can sort

00:01:53,439 --> 00:01:59,289
of add add numbers and so on and and the

00:01:56,469 --> 00:02:01,689
plot updates okay that's a very minimal

00:01:59,289 --> 00:02:04,509
level of interactivity but it can be

00:02:01,689 --> 00:02:07,899
useful for some applications of course

00:02:04,509 --> 00:02:10,869
this is a design for a desktop so it

00:02:07,899 --> 00:02:13,450
can't be shared on the web but this is

00:02:10,869 --> 00:02:15,400
the matplotlib interface can I have a

00:02:13,450 --> 00:02:17,709
show of hands please um who who's used

00:02:15,400 --> 00:02:20,170
matplotlib before okay so you'll be

00:02:17,709 --> 00:02:22,720
familiar with this and how you can you

00:02:20,170 --> 00:02:24,280
can pan around you can zoom and you can

00:02:22,720 --> 00:02:28,600
save in different file formats and

00:02:24,280 --> 00:02:32,620
okay so that's a very simple example of

00:02:28,600 --> 00:02:34,420
interactivity it's just refreshing this

00:02:32,620 --> 00:02:40,209
is canvas which is embedded inside the

00:02:34,420 --> 00:02:42,520
application now there are some other

00:02:40,209 --> 00:02:45,250
things that can be done I'd like to show

00:02:42,520 --> 00:02:47,500
you this one in particular this was

00:02:45,250 --> 00:02:50,739
written by Jatin vanderplatt

00:02:47,500 --> 00:02:53,800
as a demo of what's possible a couple of

00:02:50,739 --> 00:02:55,450
years ago so this is kind of frivolous

00:02:53,800 --> 00:02:56,980
you just turn and move around the

00:02:55,450 --> 00:02:59,260
Rubik's Cube and you can you know play

00:02:56,980 --> 00:03:03,300
with it and things like that so this is

00:02:59,260 --> 00:03:05,320
all done using using matplotlib it's a

00:03:03,300 --> 00:03:07,840
there's some quite interesting maths

00:03:05,320 --> 00:03:11,380
behind this involving quaternion to

00:03:07,840 --> 00:03:15,910
actually display this as cube it's it's

00:03:11,380 --> 00:03:16,870
not trivial it's not simple code so but

00:03:15,910 --> 00:03:20,769
it's possible what's quite interesting

00:03:16,870 --> 00:03:23,019
and it's the most interesting sort of 3d

00:03:20,769 --> 00:03:27,610
kind of visualization I've seen him in

00:03:23,019 --> 00:03:31,060
in matplotlib in some ways so so that's

00:03:27,610 --> 00:03:36,040
matplotlib it's been around for a long

00:03:31,060 --> 00:03:37,900
time and it does the job it's great for

00:03:36,040 --> 00:03:41,200
publication quality plots so that's what

00:03:37,900 --> 00:03:44,019
it was originally designed for I know I

00:03:41,200 --> 00:03:46,269
wrote my thesis plots with it and a lot

00:03:44,019 --> 00:03:50,260
of other people do admit it's kind of

00:03:46,269 --> 00:03:53,769
useful in various contexts yes so now

00:03:50,260 --> 00:03:58,299
there was a set of tools written by in

00:03:53,769 --> 00:03:59,799
thought I think about probably 10 years

00:03:58,299 --> 00:04:02,890
ago or started development with them

00:03:59,799 --> 00:04:06,340
with Chaco I'd like to show you and some

00:04:02,890 --> 00:04:09,220
demos of Chaco maybe a show of hands

00:04:06,340 --> 00:04:13,510
who's seen Chaco before it's a somewhat

00:04:09,220 --> 00:04:18,430
older package it doesn't support Python

00:04:13,510 --> 00:04:21,250
3 it's um it may never will see it's um

00:04:18,430 --> 00:04:23,130
it does the job though it's here's a

00:04:21,250 --> 00:04:25,840
nice little example of the kind of an

00:04:23,130 --> 00:04:28,539
interactivity that that maybe you may be

00:04:25,840 --> 00:04:31,180
useful for some some some cases I see

00:04:28,539 --> 00:04:33,610
there the way these sort of colors and

00:04:31,180 --> 00:04:35,650
they've sort of contours move as you as

00:04:33,610 --> 00:04:37,300
you move the mouse around this

00:04:35,650 --> 00:04:39,729
this kind of a contour map quite

00:04:37,300 --> 00:04:41,800
interesting so there are a whole lot of

00:04:39,729 --> 00:04:43,090
really interesting demos here so if you

00:04:41,800 --> 00:04:46,139
haven't seen choco it may be worth just

00:04:43,090 --> 00:04:49,840
browsing the demos to get a sense of the

00:04:46,139 --> 00:04:52,470
sorts of options you've got available so

00:04:49,840 --> 00:04:54,610
this is an older package it's it's um

00:04:52,470 --> 00:04:56,889
seems to have languished a bit in

00:04:54,610 --> 00:04:58,810
development recently this is the sort of

00:04:56,889 --> 00:05:02,350
that the one I found most interesting

00:04:58,810 --> 00:05:06,430
initially um this is something of a kind

00:05:02,350 --> 00:05:07,990
of a meme I suppose out sort of side pie

00:05:06,430 --> 00:05:12,070
conferences giving sort of spectrogram

00:05:07,990 --> 00:05:13,389
demos this is um yeah so anyway it's

00:05:12,070 --> 00:05:16,960
reading it's sampling for the mic at

00:05:13,389 --> 00:05:21,090
eleven kilohertz and and and doing free

00:05:16,960 --> 00:05:23,590
analysis and just playing that so yeah

00:05:21,090 --> 00:05:26,770
so yes the resolution is not terrific

00:05:23,590 --> 00:05:28,060
but it's um it's okay it's not it's not

00:05:26,770 --> 00:05:31,090
bad and I'm just doing that together

00:05:28,060 --> 00:05:32,560
with the visualization as well so I

00:05:31,090 --> 00:05:35,229
guess there are various kinds of

00:05:32,560 --> 00:05:37,030
applications of interactivity here's

00:05:35,229 --> 00:05:39,610
another example this might be data

00:05:37,030 --> 00:05:41,550
coming in from some sensor or some kind

00:05:39,610 --> 00:05:44,680
of whatever is there any real-time data

00:05:41,550 --> 00:05:48,190
making just sort of be plotted and sort

00:05:44,680 --> 00:05:50,169
of updated and so on okay but first of

00:05:48,190 --> 00:05:54,669
all um I guess I'd like to swap back to

00:05:50,169 --> 00:05:57,810
this and show you Makai map of the world

00:05:54,669 --> 00:06:02,590
so David Makai is a physics professor at

00:05:57,810 --> 00:06:04,180
Cambridge University and he's written a

00:06:02,590 --> 00:06:08,490
book called sustainable energy without

00:06:04,180 --> 00:06:13,389
the hot air it's a really good book and

00:06:08,490 --> 00:06:16,690
he's got this map this sort of chart

00:06:13,389 --> 00:06:20,860
where he shows it's um see if I can zoom

00:06:16,690 --> 00:06:24,760
in a little bit bigger yes so we've got

00:06:20,860 --> 00:06:28,900
different countries with this land area

00:06:24,760 --> 00:06:31,150
and there what's should move the axes

00:06:28,900 --> 00:06:33,520
we've got energy consumption per person

00:06:31,150 --> 00:06:36,250
on the vertical axis and we've got

00:06:33,520 --> 00:06:38,680
population density there and the idea is

00:06:36,250 --> 00:06:40,180
that different countries have driven

00:06:38,680 --> 00:06:43,620
profiles and this sort of makes them

00:06:40,180 --> 00:06:43,620
makes it possible to have

00:06:44,490 --> 00:06:50,490
different kinds of our production of

00:06:47,460 --> 00:06:53,490
energy with renewable sources okay so

00:06:50,490 --> 00:06:56,370
this is a log-log scale and these these

00:06:53,490 --> 00:06:58,949
lines indicate if the entire surface

00:06:56,370 --> 00:07:01,770
area of the the countries were covered

00:06:58,949 --> 00:07:03,509
in reasonable solar panels how much

00:07:01,770 --> 00:07:04,889
energy could be produced per person

00:07:03,509 --> 00:07:06,419
given the number of people who are in

00:07:04,889 --> 00:07:07,979
that country so it's a really

00:07:06,419 --> 00:07:09,419
interesting way of visualizing the

00:07:07,979 --> 00:07:12,440
opportunities different countries have

00:07:09,419 --> 00:07:14,340
for for renewable resource usage and so

00:07:12,440 --> 00:07:16,289
example the Australia's over here is

00:07:14,340 --> 00:07:18,120
it's easier for us than for just about

00:07:16,289 --> 00:07:20,220
any other country to to make use of

00:07:18,120 --> 00:07:23,009
renewables because we've got lots of

00:07:20,220 --> 00:07:26,250
land and not many people and lots of

00:07:23,009 --> 00:07:27,780
sunlight so so that's interesting now

00:07:26,250 --> 00:07:29,849
one thing about this is that it's a

00:07:27,780 --> 00:07:31,680
static plot so it was made for his book

00:07:29,849 --> 00:07:35,250
but he's got all sorts of different

00:07:31,680 --> 00:07:38,360
versions look so in this case he's got

00:07:35,250 --> 00:07:40,889
one here with with sort of yeah it's

00:07:38,360 --> 00:07:43,310
sort of slight slight variant they're

00:07:40,889 --> 00:07:46,110
showing something different and and this

00:07:43,310 --> 00:07:49,349
okay so and all these other versions as

00:07:46,110 --> 00:07:52,800
well so and this is just crying out for

00:07:49,349 --> 00:07:56,250
interactivity so lots and lots of static

00:07:52,800 --> 00:07:57,509
plots and yeah this is the the kind of

00:07:56,250 --> 00:08:01,740
thing that can be done really well with

00:07:57,509 --> 00:08:09,990
an interactive interface so like to show

00:08:01,740 --> 00:08:12,389
you now this so d3 Gapminder Hans

00:08:09,990 --> 00:08:14,180
Rosling is a demographer who gave a talk

00:08:12,389 --> 00:08:17,630
on a TED talk a few years ago which was

00:08:14,180 --> 00:08:20,550
very popular and well-received and he

00:08:17,630 --> 00:08:23,969
looked at something a little bit

00:08:20,550 --> 00:08:28,080
different to this he looked at how

00:08:23,969 --> 00:08:31,020
population tapers off as life as as

00:08:28,080 --> 00:08:32,520
countries come out of poverty and had

00:08:31,020 --> 00:08:35,329
this chart of all these countries sort

00:08:32,520 --> 00:08:37,860
of moving up here this is a similar one

00:08:35,329 --> 00:08:39,360
with some other other variables here so

00:08:37,860 --> 00:08:42,570
we've got income per capita on the

00:08:39,360 --> 00:08:44,339
horizontal axis and we've got a life

00:08:42,570 --> 00:08:48,029
expectancy on the vertical axis over

00:08:44,339 --> 00:08:52,589
time so you can see as a history see

00:08:48,029 --> 00:08:53,840
this huge ones China this is India the

00:08:52,589 --> 00:08:57,650
USA and

00:08:53,840 --> 00:08:59,660
this UK and Germany and France I think

00:08:57,650 --> 00:09:05,300
this the brown little brown one there's

00:08:59,660 --> 00:09:06,740
us I think so so yeah over time you can

00:09:05,300 --> 00:09:08,570
you can see how how that moves and

00:09:06,740 --> 00:09:10,160
that's quite quite interesting as a way

00:09:08,570 --> 00:09:12,080
of visualizing our data set and getting

00:09:10,160 --> 00:09:16,310
a sense of of how its evolved over time

00:09:12,080 --> 00:09:19,430
so this is a demo put together button by

00:09:16,310 --> 00:09:22,040
Mike Bostock the author of d3 and this

00:09:19,430 --> 00:09:22,640
is using the d3 JavaScript visualization

00:09:22,040 --> 00:09:28,010
engine

00:09:22,640 --> 00:09:30,320
it's um so it's it's it uses the the Dom

00:09:28,010 --> 00:09:36,220
manipulation of the Dom so with SVG

00:09:30,320 --> 00:09:39,770
elements okay that's the way d3 works

00:09:36,220 --> 00:09:47,120
now there are other opportunities for

00:09:39,770 --> 00:09:50,960
this too so there's a I suppose in in

00:09:47,120 --> 00:09:52,310
more recent yeah in in in the last

00:09:50,960 --> 00:09:54,740
couple of years there's been this

00:09:52,310 --> 00:09:56,900
package bouquet which which continuum

00:09:54,740 --> 00:09:58,760
analytics has been sponsoring and

00:09:56,900 --> 00:10:01,930
pushing forward and they've done a great

00:09:58,760 --> 00:10:04,340
job in doing this and the idea is that

00:10:01,930 --> 00:10:05,930
there are all these visualization

00:10:04,340 --> 00:10:09,830
libraries in JavaScript now which can do

00:10:05,930 --> 00:10:11,840
quite amazing things and and yet there's

00:10:09,830 --> 00:10:16,790
in JavaScript so how do we get access to

00:10:11,840 --> 00:10:19,040
them from Python so so the idea one of

00:10:16,790 --> 00:10:22,460
the goals of bouquet is to to make it

00:10:19,040 --> 00:10:26,030
possible to to create visualizations and

00:10:22,460 --> 00:10:29,120
interactive without the need to write

00:10:26,030 --> 00:10:30,740
JavaScript so that's a nice nice goal at

00:10:29,120 --> 00:10:34,130
the moment for some kinds of

00:10:30,740 --> 00:10:35,930
interactivity it really does still

00:10:34,130 --> 00:10:38,720
require a little bit of JavaScript

00:10:35,930 --> 00:10:40,310
tinkering but I think as time goes by

00:10:38,720 --> 00:10:42,710
more and more widgets are going to be

00:10:40,310 --> 00:10:44,510
pre-built which allow you to do more and

00:10:42,710 --> 00:10:48,290
more in terms of visualization of data

00:10:44,510 --> 00:10:53,090
without without using javascript so I'll

00:10:48,290 --> 00:10:55,610
give you some some demos of this and one

00:10:53,090 --> 00:10:58,040
in particular is is very recent it's

00:10:55,610 --> 00:11:02,720
it's it's a very similar one to what I

00:10:58,040 --> 00:11:04,130
just showed you this is it's just only

00:11:02,720 --> 00:11:06,350
in the last couple of weeks being

00:11:04,130 --> 00:11:08,390
available in as a bouquet

00:11:06,350 --> 00:11:10,130
most repository examples so this is

00:11:08,390 --> 00:11:16,390
using bouquet

00:11:10,130 --> 00:11:16,390
instead of d3 now I'm trying to make

00:11:22,920 --> 00:11:28,130
hmm all right let's try that again

00:11:29,240 --> 00:11:37,380
okay seem to have some four hours of

00:11:35,160 --> 00:11:39,870
challenges there we go okay so there's a

00:11:37,380 --> 00:11:43,440
degree of interactivity here so we've

00:11:39,870 --> 00:11:44,579
got a slider it's updating the data on

00:11:43,440 --> 00:11:48,990
this is canvas

00:11:44,579 --> 00:11:51,899
this is using html5 canvas so they're

00:11:48,990 --> 00:11:55,610
the new canvas element so it's a it's a

00:11:51,899 --> 00:11:58,949
different technology to to SVG it's some

00:11:55,610 --> 00:12:02,670
in theory we can do or whether it can be

00:11:58,949 --> 00:12:05,579
faster because SVG is about objects and

00:12:02,670 --> 00:12:08,519
manipulating objects this is a sort of a

00:12:05,579 --> 00:12:12,240
raster a canvas that we can draw

00:12:08,519 --> 00:12:15,079
okay so anyway that's um it's it's

00:12:12,240 --> 00:12:17,370
pretty good that even that's possible

00:12:15,079 --> 00:12:19,860
yeah and this wasn't possible until

00:12:17,370 --> 00:12:21,720
quite recently and so this is a Python

00:12:19,860 --> 00:12:24,389
traveling package which actually has a

00:12:21,720 --> 00:12:28,740
map public interface as well as

00:12:24,389 --> 00:12:32,160
interfaces to a seaborne it's a water

00:12:28,740 --> 00:12:37,050
based on that plot it but yeah so so I

00:12:32,160 --> 00:12:39,480
mean yeah the continuum has been doing a

00:12:37,050 --> 00:12:41,699
good job with this this package in

00:12:39,480 --> 00:12:45,899
particular it's um that there are lots

00:12:41,699 --> 00:12:51,480
of examples which are worth seeing I'll

00:12:45,899 --> 00:12:53,670
just maybe go to the up here's give you

00:12:51,480 --> 00:12:56,040
a sense of it here we go

00:12:53,670 --> 00:13:00,839
so the kinds of things you can do with

00:12:56,040 --> 00:13:03,449
it out of the box so here's a an example

00:13:00,839 --> 00:13:06,209
of okay to two plots and they just move

00:13:03,449 --> 00:13:07,260
around so if any of you views D through

00:13:06,209 --> 00:13:09,930
you'll know it's quite a low-level

00:13:07,260 --> 00:13:12,089
library so it doesn't even sort of give

00:13:09,930 --> 00:13:14,279
you zooming functionality for example

00:13:12,089 --> 00:13:17,120
into into plots

00:13:14,279 --> 00:13:19,050
it's something that you really rise

00:13:17,120 --> 00:13:22,380
doing that yourself and it's fairly

00:13:19,050 --> 00:13:24,690
straightforward if you're a you know

00:13:22,380 --> 00:13:27,449
comfortable with that but um it's it

00:13:24,690 --> 00:13:28,949
does require a bit of code so anyway

00:13:27,449 --> 00:13:30,870
this is I'm possible without any

00:13:28,949 --> 00:13:33,240
JavaScript and just Python code just

00:13:30,870 --> 00:13:34,980
plotting plotting this data

00:13:33,240 --> 00:13:37,980
and there are there are several

00:13:34,980 --> 00:13:39,929
different layers to the interface sort

00:13:37,980 --> 00:13:42,209
of low-level layer and those top level

00:13:39,929 --> 00:13:44,309
there's a charts layer which is designed

00:13:42,209 --> 00:13:45,929
to be and I suppose them and have an

00:13:44,309 --> 00:13:50,189
interface um based on the grammar of

00:13:45,929 --> 00:13:52,439
graphics which is the sort of philosophy

00:13:50,189 --> 00:13:55,199
that's behind an are plotting like be

00:13:52,439 --> 00:13:58,290
called ggplot2 which is being very

00:13:55,199 --> 00:14:02,910
popular now i'm yeah so it's a quite a

00:13:58,290 --> 00:14:06,929
nice way to construct plots so so with

00:14:02,910 --> 00:14:11,069
all of these this is our now our studio

00:14:06,929 --> 00:14:12,949
so I don't do very much in our but I do

00:14:11,069 --> 00:14:16,290
have a bit of our NV when it comes to

00:14:12,949 --> 00:14:19,290
visualization so there are various

00:14:16,290 --> 00:14:22,439
packages like this one 3j s you can just

00:14:19,290 --> 00:14:23,850
install it in one line and flick it up

00:14:22,439 --> 00:14:24,920
and hit I guess there's a different one

00:14:23,850 --> 00:14:27,899
so

00:14:24,920 --> 00:14:31,470
yeah I'm sort of visualization of a data

00:14:27,899 --> 00:14:32,970
table now with the one I want to show

00:14:31,470 --> 00:14:36,029
you oh yeah okay we want various kinds

00:14:32,970 --> 00:14:40,999
of options from different sorts of 3d

00:14:36,029 --> 00:14:40,999
plotting as well so I'll think over to

00:14:42,920 --> 00:14:49,470
Joe's anyway so this is a she's come up

00:14:46,679 --> 00:14:51,509
in a sort of an webby kind of canvas and

00:14:49,470 --> 00:14:53,879
just with a couple of lines it can be

00:14:51,509 --> 00:14:57,059
it's using this there's very small text

00:14:53,879 --> 00:15:02,339
but it's using this sort of scatter plot

00:14:57,059 --> 00:15:03,899
3d j/s library which is is available for

00:15:02,339 --> 00:15:07,350
our wishes wraps our corresponding

00:15:03,899 --> 00:15:10,679
javascript library so it's possible to

00:15:07,350 --> 00:15:13,740
do this and and yet in python there

00:15:10,679 --> 00:15:16,649
isn't a lot arm yet that allows us to do

00:15:13,740 --> 00:15:18,480
some that is there could be so many more

00:15:16,649 --> 00:15:19,679
packages which just wrap all sorts of

00:15:18,480 --> 00:15:22,379
weird and wonderful JavaScript

00:15:19,679 --> 00:15:25,259
visualization libraries that the scope

00:15:22,379 --> 00:15:26,610
is there so if there's a if there's a

00:15:25,259 --> 00:15:28,740
project you'll be looking to sink your

00:15:26,610 --> 00:15:31,529
teeth in and open source contribution

00:15:28,740 --> 00:15:33,660
you've been looking to make I'd say this

00:15:31,529 --> 00:15:37,589
is a kind of an area that's really ripe

00:15:33,660 --> 00:15:40,019
that that it's it's not too difficult to

00:15:37,589 --> 00:15:41,850
to just wrap JavaScript libraries and

00:15:40,019 --> 00:15:43,089
provide an interface from Python and and

00:15:41,850 --> 00:15:47,259
it's

00:15:43,089 --> 00:15:51,490
it's quite quite interesting sir so in

00:15:47,259 --> 00:15:55,300
particular I suppose it's our studios

00:15:51,490 --> 00:15:57,939
are a company and they've got leaflet

00:15:55,300 --> 00:16:03,999
jas and that they were sponsoring

00:15:57,939 --> 00:16:05,680
various bits of development with with

00:16:03,999 --> 00:16:10,360
this for example so this is a nice one

00:16:05,680 --> 00:16:13,029
involving mapping okay so we've got our

00:16:10,360 --> 00:16:14,589
map using the Open Street Map we can

00:16:13,029 --> 00:16:16,240
just zoom in and out here and pan around

00:16:14,589 --> 00:16:18,759
and so on okay

00:16:16,240 --> 00:16:21,040
and that's just made using this bar code

00:16:18,759 --> 00:16:22,899
now our is is no better than Python as a

00:16:21,040 --> 00:16:26,800
programming language it's it's a lot ton

00:16:22,899 --> 00:16:29,439
of no it's it's yeah it's it's um not

00:16:26,800 --> 00:16:32,410
you really use that size statistics but

00:16:29,439 --> 00:16:37,449
the our developers have made made that

00:16:32,410 --> 00:16:39,040
available and we can do do the same kind

00:16:37,449 --> 00:16:42,939
of thing for Python to now but at the

00:16:39,040 --> 00:16:44,769
moment it is in its infancy so but

00:16:42,939 --> 00:16:45,819
there's a lot of opportunity there

00:16:44,769 --> 00:16:52,089
because there are lots of JavaScript

00:16:45,819 --> 00:16:53,709
libraries these days so alright so so a

00:16:52,089 --> 00:17:01,240
couple of other things I'd like to show

00:16:53,709 --> 00:17:04,419
you yeah in just in the last few months

00:17:01,240 --> 00:17:06,189
there's well it's probably been about a

00:17:04,419 --> 00:17:07,360
year in the making but it's really the

00:17:06,189 --> 00:17:10,089
last few months has got going that

00:17:07,360 --> 00:17:11,860
there's a weather it's become visible a

00:17:10,089 --> 00:17:14,199
practical visit I which is a

00:17:11,860 --> 00:17:18,339
collaboration between what were three

00:17:14,199 --> 00:17:20,110
three or perhaps four developers who are

00:17:18,339 --> 00:17:23,049
working on separate visualization

00:17:20,110 --> 00:17:25,630
libraries and this is quite interesting

00:17:23,049 --> 00:17:31,149
this one actually uses OpenGL so I'd

00:17:25,630 --> 00:17:32,950
like to show you some demos here so

00:17:31,149 --> 00:17:35,409
let's see if that works ok there we go

00:17:32,950 --> 00:17:36,789
alright so we've got the this is using

00:17:35,409 --> 00:17:41,529
this visit by library it's one of their

00:17:36,789 --> 00:17:43,419
canned examples it's a brain structure I

00:17:41,529 --> 00:17:47,200
don't know if coloring makes sense or if

00:17:43,419 --> 00:17:49,690
it's or what but it's especially

00:17:47,200 --> 00:17:53,289
interesting as a way of visualizing the

00:17:49,690 --> 00:17:55,360
structure in in some and some 3d data so

00:17:53,289 --> 00:17:56,620
in this case there's no interactivity

00:17:55,360 --> 00:17:59,909
aside from that

00:17:56,620 --> 00:18:02,679
but yeah we can zoom in and out I'm so

00:17:59,909 --> 00:18:05,710
we've got various other interesting ones

00:18:02,679 --> 00:18:11,169
as well some of these have a sort of

00:18:05,710 --> 00:18:14,440
science focus here's a yeah parent

00:18:11,169 --> 00:18:17,049
attorney molecule anyway you can sort of

00:18:14,440 --> 00:18:21,399
zoom in there and you see because it's

00:18:17,049 --> 00:18:22,929
using the graphics card and what is

00:18:21,399 --> 00:18:25,899
they're quite fast but they were all

00:18:22,929 --> 00:18:27,999
individually sort of that shaded they've

00:18:25,899 --> 00:18:30,940
got their own light sources and so on so

00:18:27,999 --> 00:18:32,799
it's quite quite interesting and I

00:18:30,940 --> 00:18:35,379
suppose OpenGL is being traditionally

00:18:32,799 --> 00:18:37,889
used primarily for gaming and but and

00:18:35,379 --> 00:18:46,179
for some kinds of hired computer-aided

00:18:37,889 --> 00:18:48,190
fabrics from engineering so most of our

00:18:46,179 --> 00:19:00,009
show you here this is really interesting

00:18:48,190 --> 00:19:04,869
this is I think it's 100 anyway each of

00:19:00,009 --> 00:19:12,070
these little signals is you can zoom in

00:19:04,869 --> 00:19:15,820
there is it's got these is like its own

00:19:12,070 --> 00:19:17,379
real-time data source so it's just

00:19:15,820 --> 00:19:19,749
random noise in this case but it just

00:19:17,379 --> 00:19:23,080
shows this sort of a speed you can have

00:19:19,749 --> 00:19:28,889
visualization of so yeah this package

00:19:23,080 --> 00:19:31,950
was designed originally for for neuro

00:19:28,889 --> 00:19:36,159
Neuroscience and you were imaging and

00:19:31,950 --> 00:19:38,200
and the the charting packages that were

00:19:36,159 --> 00:19:42,340
available weren't weren't good enough at

00:19:38,200 --> 00:19:45,039
the time so the you know how am i doing

00:19:42,340 --> 00:19:48,490
alright yeah now a couple other things

00:19:45,039 --> 00:19:50,289
I'm I'd like to show you now are about

00:19:48,490 --> 00:19:57,360
how this can potentially interact with

00:19:50,289 --> 00:20:00,909
the ipython notebook so here yeah

00:19:57,360 --> 00:20:06,570
alright so so the ipython notebook has

00:20:00,909 --> 00:20:09,130
these nice rich display elements and and

00:20:06,570 --> 00:20:11,920
widgets for interactivity

00:20:09,130 --> 00:20:16,150
and recently so that allows us to do

00:20:11,920 --> 00:20:17,980
some interesting things and but also so

00:20:16,150 --> 00:20:20,800
I'll come back to that also than that

00:20:17,980 --> 00:20:26,140
this pie is is Pok it's possible to use

00:20:20,800 --> 00:20:29,790
visit I to to write to WebGL elements so

00:20:26,140 --> 00:20:32,730
so the the three main technologies for

00:20:29,790 --> 00:20:36,850
visualization in in browsers are SVG

00:20:32,730 --> 00:20:39,820
html5 canvas and WebGL and WebGL is

00:20:36,850 --> 00:20:42,280
really an extension of the canvas and I

00:20:39,820 --> 00:20:43,870
think one of the the goals of the visit

00:20:42,280 --> 00:20:47,920
I project is to bring more of these

00:20:43,870 --> 00:20:50,080
kinds of plots to to the browser this is

00:20:47,920 --> 00:20:54,460
the only one that seems to be working at

00:20:50,080 --> 00:20:59,460
the moment so OpenGL code is it has to

00:20:54,460 --> 00:21:04,440
look like this very see like involving

00:20:59,460 --> 00:21:14,350
writing vertices and shaders and so on

00:21:04,440 --> 00:21:19,360
but no here's an example of no I'll

00:21:14,350 --> 00:21:21,370
restart the Capitol okay so there's that

00:21:19,360 --> 00:21:23,340
example running within the ipython

00:21:21,370 --> 00:21:26,560
notebook and this is zoomable as well

00:21:23,340 --> 00:21:28,350
okay so it's it's pretty responsive it's

00:21:26,560 --> 00:21:33,570
pretty good so there's been some amazing

00:21:28,350 --> 00:21:36,940
work going on doing on here so the

00:21:33,570 --> 00:21:39,040
that's um there was a great talk about

00:21:36,940 --> 00:21:42,610
vis by introducing it at the sci-fi

00:21:39,040 --> 00:21:45,130
conference in Austin Texas just recently

00:21:42,610 --> 00:21:46,690
so this visit I project has really come

00:21:45,130 --> 00:21:49,030
from nowhere in the last few months run

00:21:46,690 --> 00:21:51,310
from what I can see to and and it's he's

00:21:49,030 --> 00:21:55,110
got quite ambitious goals and it's sort

00:21:51,310 --> 00:21:58,180
of going places and website is also new

00:21:55,110 --> 00:21:59,350
so this yeah it's interesting and this

00:21:58,180 --> 00:22:02,920
is a nice gallery too

00:21:59,350 --> 00:22:06,940
this is all pretty recent so yeah and

00:22:02,920 --> 00:22:08,380
these are the the kinds of demos that

00:22:06,940 --> 00:22:12,940
are there in the sparse repository

00:22:08,380 --> 00:22:14,410
alright so um yeah the the page I was

00:22:12,940 --> 00:22:17,440
looking for the name of the postman

00:22:14,410 --> 00:22:19,670
who's who gave that it was terrific

00:22:17,440 --> 00:22:24,010
it was pi syuh

00:22:19,670 --> 00:22:26,330
fifteen it's worth watching yeah Luke

00:22:24,010 --> 00:22:29,630
Campagnolo was one of the developers you

00:22:26,330 --> 00:22:35,470
can doing an amazing job with this yes

00:22:29,630 --> 00:22:42,800
so now the clothes that I suppose the

00:22:35,470 --> 00:22:45,470
next thing I'd like to show you is is

00:22:42,800 --> 00:22:47,150
around what else can be done with the

00:22:45,470 --> 00:22:50,270
ipython notebook because there's the

00:22:47,150 --> 00:22:53,840
opportunity to to to kind of make use of

00:22:50,270 --> 00:22:56,090
these widgets and so on that are offered

00:22:53,840 --> 00:23:02,150
now come to do interesting things and

00:22:56,090 --> 00:23:07,000
I'd like to show you one around pandas

00:23:02,150 --> 00:23:07,000
dataframes I'll make a new one

00:23:22,140 --> 00:23:25,680
right that's one

00:23:28,080 --> 00:23:39,140
all right

00:23:30,580 --> 00:23:42,530
so um in every show of hands who's used

00:23:39,140 --> 00:23:44,690
pandas and who's seen the other Pam's in

00:23:42,530 --> 00:23:47,960
an ipython notebook with the HTML output

00:23:44,690 --> 00:23:51,170
for the dative ring yeah so so that's

00:23:47,960 --> 00:23:52,700
that's an example of the rich display

00:23:51,170 --> 00:23:55,280
that ipython has but it can get a lot

00:23:52,700 --> 00:23:56,900
richer so here's an example of wrapping

00:23:55,280 --> 00:24:00,610
a JavaScript package we'll slick grid

00:23:56,900 --> 00:24:05,090
which displays you know tables of data

00:24:00,610 --> 00:24:06,380
and in an interactive way you can sort

00:24:05,090 --> 00:24:08,720
the columns and things like that

00:24:06,380 --> 00:24:10,430
and there's a nice little Python

00:24:08,720 --> 00:24:12,590
multiple cue grid which is made by a

00:24:10,430 --> 00:24:15,140
company called quant opium which which

00:24:12,590 --> 00:24:17,330
isn't version or point one point one or

00:24:15,140 --> 00:24:20,150
something at the moment but it it seems

00:24:17,330 --> 00:24:25,430
to do the job so what-what I was able to

00:24:20,150 --> 00:24:29,480
do was to use this use this package and

00:24:25,430 --> 00:24:30,920
just just to patch pandas so this this

00:24:29,480 --> 00:24:35,090
you'll be familiar with this is the

00:24:30,920 --> 00:24:40,130
usual pandas dataframe output it looks

00:24:35,090 --> 00:24:42,290
like that with with this little patch to

00:24:40,130 --> 00:24:44,600
Japan just to use this cue grid module

00:24:42,290 --> 00:24:46,610
it comes out like that instead and

00:24:44,600 --> 00:24:50,330
notice that was really fast but this is

00:24:46,610 --> 00:24:54,680
all data for daily Apple stock prices

00:24:50,330 --> 00:24:56,780
from 2000 I think to 2012 or so so it's

00:24:54,680 --> 00:24:59,720
quite a lot of data maybe about I don't

00:24:56,780 --> 00:25:01,190
know yeah I guess we're about four

00:24:59,720 --> 00:25:04,970
thousand data points or something let's

00:25:01,190 --> 00:25:07,190
have a look okay three thousand three

00:25:04,970 --> 00:25:10,580
hundred yeah so anyway come up game out

00:25:07,190 --> 00:25:13,460
pretty instantly did the this one also

00:25:10,580 --> 00:25:13,990
takes a a while a question or why about

00:25:13,460 --> 00:25:17,300
anyway

00:25:13,990 --> 00:25:18,620
so we can sort you can just change this

00:25:17,300 --> 00:25:23,320
world order we can sort on these other

00:25:18,620 --> 00:25:26,480
criteria like the the prices we can

00:25:23,320 --> 00:25:28,250
filters as well look at this take range

00:25:26,480 --> 00:25:37,760
filter so let's say okay let's go from

00:25:28,250 --> 00:25:39,860
2005 instead okay it can filter the

00:25:37,760 --> 00:25:41,570
prices let's say we're on prices in that

00:25:39,860 --> 00:25:44,420
rent and look at the number of rows is

00:25:41,570 --> 00:25:48,950
decreasing so if you if the field is

00:25:44,420 --> 00:25:50,390
small enough it's um yeah there we go

00:25:48,950 --> 00:25:53,570
that's it that's the total number of

00:25:50,390 --> 00:25:55,580
rows left after selection so this let me

00:25:53,570 --> 00:26:03,590
show you the patch you need to make this

00:25:55,580 --> 00:26:05,990
so that's it okay so it's um overriding

00:26:03,590 --> 00:26:11,090
this ipython display method on the

00:26:05,990 --> 00:26:15,429
pandas dataframe and so yeah to just

00:26:11,090 --> 00:26:17,960
call this the corresponding method

00:26:15,429 --> 00:26:20,330
returned by this show grid function from

00:26:17,960 --> 00:26:22,900
queuing okay so this is the kind of

00:26:20,330 --> 00:26:26,150
thing that can be done with with pandas

00:26:22,900 --> 00:26:27,830
this is just only actually doing this if

00:26:26,150 --> 00:26:30,340
it's installed otherwise it just falls

00:26:27,830 --> 00:26:33,050
back gracefully to the regular output so

00:26:30,340 --> 00:26:36,470
now that's also possible to use pivot

00:26:33,050 --> 00:26:40,670
tables excel style pivot tables for

00:26:36,470 --> 00:26:43,640
interactivity yeah so but I'm out of

00:26:40,670 --> 00:26:45,020
time so I can't show you that but there

00:26:43,640 --> 00:26:48,010
are quite a lot of opportunities and

00:26:45,020 --> 00:26:50,890
it's a really interesting dynamically

00:26:48,010 --> 00:26:55,220
dynamic field and it's removing fast so

00:26:50,890 --> 00:26:57,710
it's it now's a great time to to get

00:26:55,220 --> 00:26:59,030
involved with with this visualization as

00:26:57,710 --> 00:27:01,870
a topic if you're interested in that

00:26:59,030 --> 00:27:01,870
okay thanks

00:27:08,540 --> 00:27:12,990
thank you very much and it breaks pretty

00:27:10,890 --> 00:27:16,440
hard to try and stop you had that for

00:27:12,990 --> 00:27:30,450
showing so many excellent things really

00:27:16,440 --> 00:27:32,430
thank you by the way I'm um any any hard

00:27:30,450 --> 00:27:36,270
questions I'm gonna defer them on to

00:27:32,430 --> 00:27:39,630
Ryan Kelly hi there thanks for the

00:27:36,270 --> 00:27:42,690
presentation okay welcome thanks for the

00:27:39,630 --> 00:27:48,150
presentation forgive me if I missed but

00:27:42,690 --> 00:27:52,410
what about mapping real-time data into

00:27:48,150 --> 00:27:55,860
the 3d platforms like Maya or 3ds Max

00:27:52,410 --> 00:28:00,150
and and such you know software's to

00:27:55,860 --> 00:28:01,650
create models what they call mesh okay

00:28:00,150 --> 00:28:02,670
yeah I don't have a lot to say about

00:28:01,650 --> 00:28:05,970
that

00:28:02,670 --> 00:28:09,240
you've ended with the my AVI package in

00:28:05,970 --> 00:28:11,400
Python so that's that it's been it's

00:28:09,240 --> 00:28:14,610
quite a quite an old package for for

00:28:11,400 --> 00:28:16,770
visualization with butBut yeah I don't

00:28:14,610 --> 00:28:21,810
have a lot to say about that right can

00:28:16,770 --> 00:28:25,700
anyone else answer that question okay

00:28:21,810 --> 00:28:25,700
anyone else want to come up

00:28:28,450 --> 00:28:32,890
I think my all overwhelmed by all those

00:28:30,640 --> 00:28:34,330
graphics there are my shiny J well none

00:28:32,890 --> 00:28:36,870
of them of my work I'm just staring out

00:28:34,330 --> 00:28:36,870
with his right

00:28:56,809 --> 00:28:58,870

YouTube URL: https://www.youtube.com/watch?v=kr85Jytwy0s


