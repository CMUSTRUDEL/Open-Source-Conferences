Title: Swagger driven REST API development with the Falcon web server by Andrew Stuart
Publication date: 2015-08-04
Playlist: PyCon Australia 2015
Description: 
	Swagger is a JSON format for defining and documenting REST API's. Falcon is a lightweight Python web server designed specifically for building REST web services.

This presentation shows you how to combine Swagger API specifications with the Falcon web server to make REST API development incredibly fast and easy.



PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:13,050 --> 00:00:17,800
thank you

00:00:14,500 --> 00:00:19,360
now there many people still in lunch or

00:00:17,800 --> 00:00:22,110
is this too just got a topic that's

00:00:19,360 --> 00:00:27,450
grabbing people a little quiet in here

00:00:22,110 --> 00:00:32,140
whatever can you hear me okay all right

00:00:27,450 --> 00:00:34,690
just out of interest before we start put

00:00:32,140 --> 00:00:40,090
your hand up if Python three is your

00:00:34,690 --> 00:00:43,440
primary development language it's that

00:00:40,090 --> 00:00:51,059
too and how many for Python -

00:00:43,440 --> 00:00:51,059
interesting okay fair enough all right

00:00:52,080 --> 00:00:58,239
okay so as just mentioned I'm Andrew

00:00:55,210 --> 00:01:00,280
Stewart I'm from Melbourne I do Python

00:00:58,239 --> 00:01:05,110
development I'm a contributor to the

00:01:00,280 --> 00:01:10,840
mailman 3 project for which I wrote the

00:01:05,110 --> 00:01:12,610
authenticating proxy server and the

00:01:10,840 --> 00:01:14,410
stuff that's in this presentation is

00:01:12,610 --> 00:01:17,320
largely derived from the work that I did

00:01:14,410 --> 00:01:20,590
on the mailman 3 or feta coding proxy

00:01:17,320 --> 00:01:21,100
server so I had some questions for the

00:01:20,590 --> 00:01:26,020
audience

00:01:21,100 --> 00:01:32,200
um who here has heard of swagger okay

00:01:26,020 --> 00:01:33,670
and how many have heard of Falcon and

00:01:32,200 --> 00:01:38,700
how many people have written a rest

00:01:33,670 --> 00:01:41,380
back-end a substantial number ok and

00:01:38,700 --> 00:01:43,270
interfaced to a wrist back in probably

00:01:41,380 --> 00:01:46,720
everyone ok

00:01:43,270 --> 00:01:51,130
alright so to give you an understanding

00:01:46,720 --> 00:01:53,980
of where this has come from I worked on

00:01:51,130 --> 00:01:57,100
a project about a year ago called single

00:01:53,980 --> 00:02:00,130
page guru with a friend of mine and I

00:01:57,100 --> 00:02:02,740
developed the Python back-end and he

00:02:00,130 --> 00:02:06,460
developed the JavaScript front-end and

00:02:02,740 --> 00:02:10,840
the API was kind of evolving as it went

00:02:06,460 --> 00:02:12,459
and it was fairly poorly defined along

00:02:10,840 --> 00:02:16,420
the way and that led to a lot of

00:02:12,459 --> 00:02:18,990
frustration bugs and wasted time so my

00:02:16,420 --> 00:02:21,480
friend and I

00:02:18,990 --> 00:02:23,340
had a few tense moments as we had to

00:02:21,480 --> 00:02:25,560
deal with the fact that he kept on

00:02:23,340 --> 00:02:27,180
having questions about the API which

00:02:25,560 --> 00:02:29,220
seemed to be changing and it wasn't

00:02:27,180 --> 00:02:30,540
clear exactly what was in the API and

00:02:29,220 --> 00:02:32,190
how it was working wasn't clear to him

00:02:30,540 --> 00:02:38,490
it wasn't clear to me what was in the

00:02:32,190 --> 00:02:39,810
API that I was so when the next project

00:02:38,490 --> 00:02:43,980
came along that I wanted to work on

00:02:39,810 --> 00:02:45,810
which was mailman three I had a look at

00:02:43,980 --> 00:02:48,990
my oh man three and moment three has

00:02:45,810 --> 00:02:50,900
risked API at the back end but the rest

00:02:48,990 --> 00:02:54,300
api is only intended to be used

00:02:50,900 --> 00:02:56,000
internally it's not meant for client

00:02:54,300 --> 00:02:59,490
browsers to attach to it's meant for

00:02:56,000 --> 00:03:01,350
other servers to attach to so I wanted

00:02:59,490 --> 00:03:04,110
to do some client oriented development

00:03:01,350 --> 00:03:05,670
talking to the mailman REST API so in

00:03:04,110 --> 00:03:07,200
order to do that I thought well the

00:03:05,670 --> 00:03:09,710
first thing I have to do is write and

00:03:07,200 --> 00:03:12,480
authenticating proxy server so write an

00:03:09,710 --> 00:03:15,930
API proxy server that can sit in front

00:03:12,480 --> 00:03:18,480
of them um and I thought why I'm damned

00:03:15,930 --> 00:03:20,940
if I'm going back into the undefined API

00:03:18,480 --> 00:03:23,280
hell that I had on single page guru I

00:03:20,940 --> 00:03:27,660
thought the the place that I need to

00:03:23,280 --> 00:03:30,960
start is to is to document the API such

00:03:27,660 --> 00:03:33,600
that I know exactly what's going on and

00:03:30,960 --> 00:03:35,220
I had heard of a tool called swagger and

00:03:33,600 --> 00:03:40,940
it looked like a great tool for the job

00:03:35,220 --> 00:03:44,360
for documenting a REST API so without

00:03:40,940 --> 00:03:48,600
without documentation of your REST API

00:03:44,360 --> 00:03:51,510
you know you're in the dark if you've

00:03:48,600 --> 00:03:53,150
got documentation of your REST API then

00:03:51,510 --> 00:03:56,130
you're going to save the time of

00:03:53,150 --> 00:03:58,470
developers testers and bas who are all

00:03:56,130 --> 00:04:00,480
trying to find how the API works if

00:03:58,470 --> 00:04:03,090
you've worked on a rest project that

00:04:00,480 --> 00:04:07,010
uses a REST API at all yes go on

00:04:03,090 --> 00:04:07,010
oh is it

00:04:21,049 --> 00:04:26,880
so if when you work on any project that

00:04:24,900 --> 00:04:29,340
involves a REST API it's really critical

00:04:26,880 --> 00:04:30,740
to understand what's in it and how does

00:04:29,340 --> 00:04:34,440
it work and what are the available

00:04:30,740 --> 00:04:35,730
routes and methods available if you

00:04:34,440 --> 00:04:37,350
don't have that or where does the

00:04:35,730 --> 00:04:39,150
information come from I don't know you

00:04:37,350 --> 00:04:40,560
have to go in every time you want to do

00:04:39,150 --> 00:04:42,170
something with the API you have to go

00:04:40,560 --> 00:04:44,610
and dig the information out of

00:04:42,170 --> 00:04:46,410
documentation or source or whatever so

00:04:44,610 --> 00:04:47,520
it's a nightmare so you really if you

00:04:46,410 --> 00:04:49,890
want to be effective you need to

00:04:47,520 --> 00:04:51,810
document your REST API and once you're

00:04:49,890 --> 00:04:57,570
documented it becomes the central point

00:04:51,810 --> 00:05:00,630
of authority for for the project if you

00:04:57,570 --> 00:05:04,440
document a REST API into a JSON document

00:05:00,630 --> 00:05:06,780
then you can use that to create clients

00:05:04,440 --> 00:05:09,420
you can use that JSON API adopt to

00:05:06,780 --> 00:05:12,090
create servers and you can also use it

00:05:09,420 --> 00:05:14,100
to create tests so the old way of

00:05:12,090 --> 00:05:16,530
building a REST API is you would build

00:05:14,100 --> 00:05:17,760
the routes directly into the code so if

00:05:16,530 --> 00:05:20,190
you've got a you know a flask

00:05:17,760 --> 00:05:22,770
application or whatever then you start

00:05:20,190 --> 00:05:24,270
off by having a route defined and then

00:05:22,770 --> 00:05:26,490
underneath that you've got a function

00:05:24,270 --> 00:05:28,830
that responds to the route so that's the

00:05:26,490 --> 00:05:31,590
old way of doing it in which you build

00:05:28,830 --> 00:05:33,720
that route directly into the code if

00:05:31,590 --> 00:05:35,790
you've got the out of the the route

00:05:33,720 --> 00:05:37,590
inside a JSON document you've got the

00:05:35,790 --> 00:05:40,580
opportunity to programmatically use that

00:05:37,590 --> 00:05:40,580
for a whole range of purposes

00:05:42,770 --> 00:05:49,440
so swagger swagger is a specification

00:05:47,280 --> 00:05:53,730
designed specifically for documenting

00:05:49,440 --> 00:05:56,490
REST API and it can work in one of two

00:05:53,730 --> 00:05:59,700
primary ways most people seem to use

00:05:56,490 --> 00:06:03,660
swagger to automatically dynamically

00:05:59,700 --> 00:06:05,640
pull REST API documentation out of code

00:06:03,660 --> 00:06:07,860
so they kind of build the documentation

00:06:05,640 --> 00:06:11,160
into the code and that seems to me

00:06:07,860 --> 00:06:15,060
pretty complex and problematic

00:06:11,160 --> 00:06:17,760
I took the alternative approach which is

00:06:15,060 --> 00:06:18,990
that you just define your REST API in

00:06:17,760 --> 00:06:22,830
adjacent a state

00:06:18,990 --> 00:06:24,720
Jason document and that takes a lot of

00:06:22,830 --> 00:06:25,979
the complexity out of the equation and

00:06:24,720 --> 00:06:27,630
swagger seems to have the market

00:06:25,979 --> 00:06:32,250
momentum so that's the one that I went

00:06:27,630 --> 00:06:35,370
with so the first part of my task in

00:06:32,250 --> 00:06:41,520
working with mailman was to document the

00:06:35,370 --> 00:06:43,710
mailman API in swagger the mailman API

00:06:41,520 --> 00:06:46,139
is documented well but the documentation

00:06:43,710 --> 00:06:47,789
was all over the place it was in written

00:06:46,139 --> 00:06:50,970
documents that was in the source code

00:06:47,789 --> 00:06:53,910
and it was a big exercise to go through

00:06:50,970 --> 00:06:56,699
all of the documentation find each route

00:06:53,910 --> 00:07:00,900
find the structure of the route and put

00:06:56,699 --> 00:07:02,789
it into the swagger document it took me

00:07:00,900 --> 00:07:05,430
a few months part time to get it done

00:07:02,789 --> 00:07:12,330
but once it was done the development

00:07:05,430 --> 00:07:15,900
could start and once you've got your

00:07:12,330 --> 00:07:20,009
REST API into a swagger document then

00:07:15,900 --> 00:07:25,470
you get to to look at your REST API via

00:07:20,009 --> 00:07:27,419
the swagger REST API browser that they

00:07:25,470 --> 00:07:28,919
pretend that they provide and I'll give

00:07:27,419 --> 00:07:32,000
you a look at this live I've got a

00:07:28,919 --> 00:07:32,000
couple of screenshots but

00:07:45,750 --> 00:07:52,540
so if we open this out you can see that

00:07:50,530 --> 00:07:55,750
in the mailman REST API there's a

00:07:52,540 --> 00:08:00,040
category of routes that are the

00:07:55,750 --> 00:08:01,960
addresses and swagger documents the

00:08:00,040 --> 00:08:03,940
available methods so you can see on the

00:08:01,960 --> 00:08:05,890
left in the various colors the methods

00:08:03,940 --> 00:08:07,840
that are available the structure of the

00:08:05,890 --> 00:08:10,840
route the parameters that are within the

00:08:07,840 --> 00:08:12,520
route and when I looked at this I

00:08:10,840 --> 00:08:14,320
thought fantastic this makes it

00:08:12,520 --> 00:08:16,090
extremely clear to anyone who's going to

00:08:14,320 --> 00:08:17,680
be working on this what routes are

00:08:16,090 --> 00:08:21,790
available and how to get access to them

00:08:17,680 --> 00:08:26,530
and how to use them you can dig further

00:08:21,790 --> 00:08:29,500
into a given into a given route and it

00:08:26,530 --> 00:08:32,940
will give you you can also document the

00:08:29,500 --> 00:08:35,170
parameters before that route and

00:08:32,940 --> 00:08:38,170
depending on the type of route that

00:08:35,170 --> 00:08:41,590
you've defined using the swagger API

00:08:38,170 --> 00:08:46,690
browser you can actually put in calls to

00:08:41,590 --> 00:08:50,970
that to that route as well so swag is a

00:08:46,690 --> 00:08:57,820
very effective way to actually do that

00:08:50,970 --> 00:09:01,870
documentation they're just having a look

00:08:57,820 --> 00:09:05,200
at the structure of a swagger API

00:09:01,870 --> 00:09:06,640
document I won't go into great technical

00:09:05,200 --> 00:09:09,100
detail because there's an awful lot of

00:09:06,640 --> 00:09:11,670
info there but the main things to take

00:09:09,100 --> 00:09:16,620
note of is that within the swagger doc

00:09:11,670 --> 00:09:16,620
you identify the paths in your API

00:09:24,020 --> 00:09:28,460
and the other thing to take note of so

00:09:26,720 --> 00:09:30,740
you can see at the top there we've got a

00:09:28,460 --> 00:09:32,480
slash users route and then the next

00:09:30,740 --> 00:09:35,060
thing down is that we identify the

00:09:32,480 --> 00:09:36,920
methods available on that route and the

00:09:35,060 --> 00:09:39,140
other critical thing to notice is that

00:09:36,920 --> 00:09:40,880
Swagger provides the ability to give a

00:09:39,140 --> 00:09:44,300
route and a method a particular

00:09:40,880 --> 00:09:48,080
operation I do and this is central

00:09:44,300 --> 00:09:49,880
concept to because it means that you've

00:09:48,080 --> 00:09:53,089
got a unique way of identifying the

00:09:49,880 --> 00:10:04,100
combination of the route and the methods

00:09:53,089 --> 00:10:06,560
available for calling that round I'm

00:10:04,100 --> 00:10:10,550
using Windows 10 here which I installed

00:10:06,560 --> 00:10:16,190
a day or two ago I've got no idea what

00:10:10,550 --> 00:10:19,970
it's doing here unlike what USB we do

00:10:16,190 --> 00:10:23,570
plugged in okay so Falken Falken is a

00:10:19,970 --> 00:10:25,130
Python web server I was introduced to it

00:10:23,570 --> 00:10:28,250
again through the mailman project

00:10:25,130 --> 00:10:29,900
because my oh man uses Falcon as its as

00:10:28,250 --> 00:10:32,060
the web server for its back-end

00:10:29,900 --> 00:10:34,160
REST API so I thought I'll use the same

00:10:32,060 --> 00:10:35,750
technology when I got in there and had a

00:10:34,160 --> 00:10:39,260
look at it I found that I really liked

00:10:35,750 --> 00:10:41,600
it it's it's got a really minimalist

00:10:39,260 --> 00:10:43,339
philosophy and what I mean by that is

00:10:41,600 --> 00:10:45,890
that it is designed primarily for

00:10:43,339 --> 00:10:48,440
building rest api's and if you look at

00:10:45,890 --> 00:10:56,360
other Python web application servers

00:10:48,440 --> 00:10:58,970
like flask or whatever or they've got a

00:10:56,360 --> 00:11:00,890
whole bunch of other stuff in there that

00:10:58,970 --> 00:11:03,680
is just not needed if all you're doing

00:11:00,890 --> 00:11:05,600
is building a REST API so the good thing

00:11:03,680 --> 00:11:09,130
about Falcon is that it doesn't have all

00:11:05,600 --> 00:11:11,510
that extra info I guess that make that

00:11:09,130 --> 00:11:15,230
complicates things if all you want to do

00:11:11,510 --> 00:11:17,270
is get a REST API build and it's quite

00:11:15,230 --> 00:11:20,420
fast if you care about that sort of

00:11:17,270 --> 00:11:21,510
thing is a chart that I grabbed from

00:11:20,420 --> 00:11:23,160
some random

00:11:21,510 --> 00:11:28,650
on the internet that seems to indicate

00:11:23,160 --> 00:11:31,080
that Falcon is the fastest of the web

00:11:28,650 --> 00:11:33,540
servers by quite a bit and suggesting

00:11:31,080 --> 00:11:36,630
there that it's for whatever test

00:11:33,540 --> 00:11:38,550
they're doing which is to return a Jason

00:11:36,630 --> 00:11:41,340
document you're getting 20,000 requests

00:11:38,550 --> 00:11:44,550
a second I don't care so much about the

00:11:41,340 --> 00:11:46,740
performance I'm primarily interested in

00:11:44,550 --> 00:11:48,600
the fact that it's easy to program and I

00:11:46,740 --> 00:11:54,090
thought some people might like this some

00:11:48,600 --> 00:11:56,640
people care about okay so once you've

00:11:54,090 --> 00:11:58,590
written all those routes into your JSON

00:11:56,640 --> 00:11:59,760
document you've spent however long doing

00:11:58,590 --> 00:12:01,340
it digging through the source code

00:11:59,760 --> 00:12:08,220
digging through the documentation

00:12:01,340 --> 00:12:09,810
plugging it all into the process the

00:12:08,220 --> 00:12:11,970
thing that occurred to me is well why

00:12:09,810 --> 00:12:13,860
would I go and hard code all those

00:12:11,970 --> 00:12:15,270
routes then into the source code of the

00:12:13,860 --> 00:12:16,800
application that I need to build I've

00:12:15,270 --> 00:12:19,110
already stuck them into the Jason why do

00:12:16,800 --> 00:12:20,670
I need to read you know and what do they

00:12:19,110 --> 00:12:23,040
say don't repeat yourself why do I need

00:12:20,670 --> 00:12:24,870
to go repeat myself by writing all of

00:12:23,040 --> 00:12:25,620
the routes back into the code so I

00:12:24,870 --> 00:12:28,620
thought what I'll do I'll

00:12:25,620 --> 00:12:32,220
programmatically pull all the rounds out

00:12:28,620 --> 00:12:33,690
of the Swaggart Jason document and then

00:12:32,220 --> 00:12:36,630
within Python

00:12:33,690 --> 00:12:39,000
I'll map the my Python functions to the

00:12:36,630 --> 00:12:41,840
routes so if you remember the I pointed

00:12:39,000 --> 00:12:44,700
out the operation I do swagga documents

00:12:41,840 --> 00:12:46,410
they have a route they then have the

00:12:44,700 --> 00:12:49,080
methods available for that route and you

00:12:46,410 --> 00:12:50,910
can give each individual method a unique

00:12:49,080 --> 00:12:52,320
operation I do and that's what we're

00:12:50,910 --> 00:12:54,060
going to do we're going to say okay for

00:12:52,320 --> 00:12:56,790
the combination of a route and a method

00:12:54,060 --> 00:12:58,470
so for example users get will give that

00:12:56,790 --> 00:13:01,190
a unique ID and then we're going to

00:12:58,470 --> 00:13:06,870
connect that up with a Python function

00:13:01,190 --> 00:13:09,120
so you get an instant REST API so just

00:13:06,870 --> 00:13:13,550
to show you how easy this all is once

00:13:09,120 --> 00:13:18,330
you tie it together I'll show you a a

00:13:13,550 --> 00:13:20,340
quick demo all right I'll just give you

00:13:18,330 --> 00:13:22,850
a quick tour of some of the code of how

00:13:20,340 --> 00:13:22,850
this works

00:13:24,220 --> 00:13:31,180
remember how we switch tasks Mac person

00:13:28,940 --> 00:13:31,180
huh

00:13:51,500 --> 00:13:56,550
okay so what I've done I've extracted

00:13:54,240 --> 00:13:59,010
the code from the Mohan project into a

00:13:56,550 --> 00:14:02,100
very small I suppose you'd call a

00:13:59,010 --> 00:14:04,440
library that allows you to take a

00:14:02,100 --> 00:14:06,960
swagger document and very rapidly you

00:14:04,440 --> 00:14:09,500
connect it up into it into a working API

00:14:06,960 --> 00:14:19,110
so I've got a couple of example

00:14:09,500 --> 00:14:21,600
functions here you can see oh let me

00:14:19,110 --> 00:14:23,790
take a step back if you go to the - the

00:14:21,600 --> 00:14:26,570
swagger website they've got a sample

00:14:23,790 --> 00:14:30,960
REST API up there called pet store and

00:14:26,570 --> 00:14:34,110
what I've done is I've built an API here

00:14:30,960 --> 00:14:38,160
that implements all of the functionality

00:14:34,110 --> 00:14:43,770
of the pet store within 57 lines of code

00:14:38,160 --> 00:14:45,570
so we've got these are request handlers

00:14:43,770 --> 00:14:47,990
each of these functions is a request

00:14:45,570 --> 00:14:47,990
handler

00:14:53,890 --> 00:15:02,829
so we've got a small number of request

00:14:56,079 --> 00:15:04,810
handlers and what we do here is we just

00:15:02,829 --> 00:15:07,240
provide a dictionary called operation

00:15:04,810 --> 00:15:10,000
handlers and the operation handlers

00:15:07,240 --> 00:15:12,550
dictionary connects up the operation IDs

00:15:10,000 --> 00:15:15,820
that I drew your attention to earlier to

00:15:12,550 --> 00:15:18,130
Python functions so when a request comes

00:15:15,820 --> 00:15:19,839
in from the client

00:15:18,130 --> 00:15:23,860
it'll be matched up to the appropriate

00:15:19,839 --> 00:15:34,060
operation ID and then sent to the Python

00:15:23,860 --> 00:15:39,640
function and then finally those few

00:15:34,060 --> 00:15:41,769
lines of code set up the server and and

00:15:39,640 --> 00:15:46,480
that is that's a complete implementation

00:15:41,769 --> 00:15:49,570
of a REST API server based on a swagger

00:15:46,480 --> 00:15:53,370
document so as you can see there's not

00:15:49,570 --> 00:15:56,800
much code in there at all obviously I

00:15:53,370 --> 00:16:00,430
haven't implemented every function but

00:15:56,800 --> 00:16:02,829
the one thing to pay particular

00:16:00,430 --> 00:16:04,690
attention to here is within the

00:16:02,829 --> 00:16:10,149
operation handlers so if that's the

00:16:04,690 --> 00:16:13,360
operation ID we've got the Opera we've

00:16:10,149 --> 00:16:16,720
got the opportunity to pass each each

00:16:13,360 --> 00:16:20,829
inbound request gets passed not just to

00:16:16,720 --> 00:16:24,399
one Python function but we actually pass

00:16:20,829 --> 00:16:27,220
it through as many functions as you want

00:16:24,399 --> 00:16:29,440
to provide so and that gives you the

00:16:27,220 --> 00:16:32,890
chance to do some tricky stuff for

00:16:29,440 --> 00:16:35,170
example here when a request comes in we

00:16:32,890 --> 00:16:39,670
first pass it to the JSON web token

00:16:35,170 --> 00:16:41,350
validation and if that passes we then

00:16:39,670 --> 00:16:45,730
pass it into another function that

00:16:41,350 --> 00:16:48,040
refreshes the JSON web token and if it

00:16:45,730 --> 00:16:50,320
passes that it then gets passed to a

00:16:48,040 --> 00:16:52,870
couple of authorization functions that

00:16:50,320 --> 00:16:54,279
check to make sure that the user who's

00:16:52,870 --> 00:16:56,649
requesting this has the appropriate

00:16:54,279 --> 00:16:59,140
level of access and assuming it gets

00:16:56,649 --> 00:17:01,280
through all of those functions then it

00:16:59,140 --> 00:17:04,220
executes the final

00:17:01,280 --> 00:17:10,550
the final function and this indicates

00:17:04,220 --> 00:17:14,060
how easy it is to chain together the

00:17:10,550 --> 00:17:16,100
response or rather chain together the

00:17:14,060 --> 00:17:17,810
request handle is that a response that I

00:17:16,100 --> 00:17:20,380
request is passed through when it comes

00:17:17,810 --> 00:17:20,380
into the server

00:17:29,870 --> 00:17:36,770
and that's it so what I wanted to bring

00:17:33,710 --> 00:17:39,200
across is the idea that a REST API is

00:17:36,770 --> 00:17:41,900
worth documenting an effective way to

00:17:39,200 --> 00:17:44,179
document it is in Jason using the

00:17:41,900 --> 00:17:46,730
swagger specification once you've got it

00:17:44,179 --> 00:17:50,390
into JSON format that becomes the

00:17:46,730 --> 00:17:53,779
authoritative source of information that

00:17:50,390 --> 00:17:58,900
defines your methods request parameters

00:17:53,779 --> 00:18:01,970
etc and it is then possible to

00:17:58,900 --> 00:18:06,919
programmatically connect up your jason

00:18:01,970 --> 00:18:11,840
rest your jason swagger document into a

00:18:06,919 --> 00:18:20,679
very easy to implement Python

00:18:11,840 --> 00:18:20,679
application sir okay any questions

00:18:32,310 --> 00:18:36,030
any questions guys

00:18:38,510 --> 00:18:44,820
sorry I might have come in after you

00:18:41,870 --> 00:18:47,850
talk through it but how does this all

00:18:44,820 --> 00:18:50,940
sort of plug into the authentication

00:18:47,850 --> 00:18:53,640
like it's it's a lot of a lot of time

00:18:50,940 --> 00:18:56,100
you see examples of like he is building

00:18:53,640 --> 00:18:59,130
a REST API it's wonderful but then it's

00:18:56,100 --> 00:19:01,590
available to everybody so what's the

00:18:59,130 --> 00:19:05,070
sort of the next steps in securing this

00:19:01,590 --> 00:19:08,669
and making it sort of authentication

00:19:05,070 --> 00:19:10,830
authorization there's a lot of ways that

00:19:08,669 --> 00:19:14,130
you can do authentication and

00:19:10,830 --> 00:19:16,679
authorization and they can get complex

00:19:14,130 --> 00:19:19,049
pretty quickly and I've had a look at a

00:19:16,679 --> 00:19:21,330
lot of them and wasted a lot of time

00:19:19,049 --> 00:19:25,470
trying to grasp how a lot of them work

00:19:21,330 --> 00:19:27,659
and implementing them and the one that

00:19:25,470 --> 00:19:32,280
made sense to me in the end is JSON web

00:19:27,659 --> 00:19:36,929
token JWT are you familiar with JWT just

00:19:32,280 --> 00:19:40,620
web token is a very easy way to

00:19:36,929 --> 00:19:43,590
implement authentication and I think

00:19:40,620 --> 00:19:44,970
it's really sort of becoming probably

00:19:43,590 --> 00:19:48,270
the predominant way that people are

00:19:44,970 --> 00:19:53,130
doing it these days the core of the way

00:19:48,270 --> 00:19:56,940
it works is that a bit of information is

00:19:53,130 --> 00:19:58,950
encoded into some JSON and signed by the

00:19:56,940 --> 00:20:02,880
backend the back-end send it to the

00:19:58,950 --> 00:20:04,500
client and then the client each time it

00:20:02,880 --> 00:20:06,480
wants to request something sends it back

00:20:04,500 --> 00:20:08,400
to the server and the server checks the

00:20:06,480 --> 00:20:10,740
signature and says well is this the

00:20:08,400 --> 00:20:13,890
information that I sent you and if it is

00:20:10,740 --> 00:20:16,919
it responds and that's really

00:20:13,890 --> 00:20:19,289
straightforward I think I mean most

00:20:16,919 --> 00:20:21,570
authentic ations schemes take a lot more

00:20:19,289 --> 00:20:23,970
explaining than that but that's really

00:20:21,570 --> 00:20:27,390
what JSON web token boils down to the

00:20:23,970 --> 00:20:29,100
service is here's some info I'm going to

00:20:27,390 --> 00:20:31,620
sign it and you need to give it back to

00:20:29,100 --> 00:20:35,160
me with the correct signature and

00:20:31,620 --> 00:20:40,100
I implemented

00:20:35,160 --> 00:20:40,100
JSON web token here so all you need to

00:20:43,430 --> 00:20:52,290
do if you wanted to put authentication

00:20:49,800 --> 00:20:57,180
on to every route then you would just

00:20:52,290 --> 00:20:58,680
start off every route validation so the

00:20:57,180 --> 00:21:00,870
very first thing that happens when a

00:20:58,680 --> 00:21:04,020
request comes in is that it gets piped

00:21:00,870 --> 00:21:07,980
into JWT dot validate JWT dot validate

00:21:04,020 --> 00:21:10,800
checks the JSON web token and if the web

00:21:07,980 --> 00:21:14,280
token is good then it passes it on to

00:21:10,800 --> 00:21:16,380
the next function which is a JWT refresh

00:21:14,280 --> 00:21:21,750
and what that would do is it would

00:21:16,380 --> 00:21:24,870
refresh the token and update it and the

00:21:21,750 --> 00:21:27,540
next is authorization so authentication

00:21:24,870 --> 00:21:31,800
and authorization some two different

00:21:27,540 --> 00:21:34,080
things of course authorization is the

00:21:31,800 --> 00:21:35,970
task of saying okay well authentication

00:21:34,080 --> 00:21:38,880
is the task of saying who is this user

00:21:35,970 --> 00:21:41,370
authorization is the task of saying well

00:21:38,880 --> 00:21:43,860
is this user now that we've identified

00:21:41,370 --> 00:21:47,270
the user are they allowed to get access

00:21:43,860 --> 00:21:47,270
to the resource that they've asked for

00:21:50,230 --> 00:21:55,900
they require the manager and requires

00:21:52,270 --> 00:21:58,690
admin so the inbound request has been

00:21:55,900 --> 00:22:00,040
found through the JWT validation it's

00:21:58,690 --> 00:22:02,590
been funneled through there

00:22:00,040 --> 00:22:06,250
refresh it now gets funneled through the

00:22:02,590 --> 00:22:10,809
authorization check okay is this user a

00:22:06,250 --> 00:22:13,480
manager or are they and it says okay

00:22:10,809 --> 00:22:16,600
good we will now funnel it out onto the

00:22:13,480 --> 00:22:18,490
next Python function which is actually

00:22:16,600 --> 00:22:21,549
doing the job of executing it the fine

00:22:18,490 --> 00:22:23,610
pets by status does that answer your

00:22:21,549 --> 00:22:23,610
question

00:22:25,450 --> 00:22:29,290
coots I could be any useful in a

00:22:27,580 --> 00:22:32,410
classical micro service architecture

00:22:29,290 --> 00:22:34,860
we've got a few micro services each

00:22:32,410 --> 00:22:39,299
heaven one maybe a maximum two endpoints

00:22:34,860 --> 00:22:44,640
but they are independent of each other

00:22:39,299 --> 00:22:47,110
yeah yes I think yes is the short answer

00:22:44,640 --> 00:22:49,600
so in that context you would have a REST

00:22:47,110 --> 00:22:51,190
API because obviously the REST API is

00:22:49,600 --> 00:22:54,520
going to be unified isn't it it's not

00:22:51,190 --> 00:22:57,250
going to the the micro service

00:22:54,520 --> 00:22:59,500
architecture is is going to be behind

00:22:57,250 --> 00:23:00,850
the scenes effectively isn't it the

00:22:59,500 --> 00:23:03,820
client is not going to be aware that

00:23:00,850 --> 00:23:07,179
they're talking to a micro services

00:23:03,820 --> 00:23:10,200
architecture and what you would do with

00:23:07,179 --> 00:23:14,890
this and indeed what I've done is that

00:23:10,200 --> 00:23:18,130
the when the rest of when the request

00:23:14,890 --> 00:23:20,950
comes in it goes to the route goes to

00:23:18,130 --> 00:23:23,220
the operation and then this function

00:23:20,950 --> 00:23:25,840
here your target parts of the function

00:23:23,220 --> 00:23:29,500
just proxies it off to whatever your

00:23:25,840 --> 00:23:31,690
back-end it is so instead of providing

00:23:29,500 --> 00:23:33,960
individual function Python functions

00:23:31,690 --> 00:23:36,549
that actually do the task for example of

00:23:33,960 --> 00:23:38,740
getting inventory or uploading a file

00:23:36,549 --> 00:23:41,620
all you do is you proxy it off to

00:23:38,740 --> 00:23:44,169
whatever back-end micro service you want

00:23:41,620 --> 00:23:45,880
to do the job and then the response

00:23:44,169 --> 00:23:49,299
comes back in here and it gets sent back

00:23:45,880 --> 00:23:51,910
so effectively it turns this into a

00:23:49,299 --> 00:23:54,929
proxy server with micro services behind

00:23:51,910 --> 00:23:54,929
it and that would work

00:23:55,240 --> 00:24:03,970
there any other questions okay well

00:24:00,800 --> 00:24:03,970
thanks very much for coming on

00:24:10,220 --> 00:24:12,280

YouTube URL: https://www.youtube.com/watch?v=6oeXeX0NrFM


