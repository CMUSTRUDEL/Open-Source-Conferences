Title: Docker + Python by Tim Butler
Publication date: 2015-08-04
Playlist: PyCon Australia 2015
Description: 
	Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications. This allows for rapidly deployable apps, which will run on any docker environment with the ability to rapidly scale.

As Docker is based on Linux containers, these are very lightweight and allow resource isolation. With added tools to provide workflow automation and image management, Docker can provide a complete toolset to manage your application environment.

Aimed at newcomers to the technology, this talk will cover the basics of what Docker is, how it compares to other technologies and with why it's useful for Python applications. There will be practical demos and examples of real world Python deployments included.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:09,679 --> 00:00:13,459
so up first we have Tim Butler from

00:00:12,320 --> 00:00:17,500
connects and he'll be talking about

00:00:13,459 --> 00:00:17,500
docker and Python please welcome him

00:00:21,099 --> 00:00:25,460
okay thank you everyone for turning up

00:00:23,270 --> 00:00:28,759
to my talk so just to start things off

00:00:25,460 --> 00:00:32,360
just wanted to get a rough idea of who's

00:00:28,759 --> 00:00:34,820
heard of docker okay pretty much

00:00:32,360 --> 00:00:39,230
everybody and who's actually use docker

00:00:34,820 --> 00:00:41,000
before okay probably about 50% and the

00:00:39,230 --> 00:00:47,570
magic question who's actually used

00:00:41,000 --> 00:00:49,699
docker in production just a couple okay

00:00:47,570 --> 00:00:51,710
for those that don't know me name's Tim

00:00:49,699 --> 00:00:54,799
Butler concurrent inner Enterprise

00:00:51,710 --> 00:00:56,839
Manager for kinetics kinetics is a web

00:00:54,799 --> 00:00:59,330
hosting and application hosting company

00:00:56,839 --> 00:01:02,299
and we've been specializing in container

00:00:59,330 --> 00:01:04,430
based hosting for about 10 years now

00:01:02,299 --> 00:01:07,460
I've been working with Linux containers

00:01:04,430 --> 00:01:09,320
for 10 years as well and been playing

00:01:07,460 --> 00:01:12,439
around Python for about eight years

00:01:09,320 --> 00:01:14,630
I've got now sort of 18 months docker

00:01:12,439 --> 00:01:18,620
experience and been focusing on it quite

00:01:14,630 --> 00:01:21,350
heavily over the last six months so

00:01:18,620 --> 00:01:23,540
kinetics we're actually developing a new

00:01:21,350 --> 00:01:26,900
product at the moment so we're combining

00:01:23,540 --> 00:01:28,880
and working with Linux containers and

00:01:26,900 --> 00:01:30,530
docker within those Linux containers so

00:01:28,880 --> 00:01:31,850
we're working on a new feature and a new

00:01:30,530 --> 00:01:36,650
hosting product for the Australian

00:01:31,850 --> 00:01:38,659
market with that so just in this talk

00:01:36,650 --> 00:01:40,610
I've aim this talk at newcomers to the

00:01:38,659 --> 00:01:42,110
technology so just enough to get you

00:01:40,610 --> 00:01:43,310
started get up and running see what

00:01:42,110 --> 00:01:45,830
doctors are be out and see if it's a

00:01:43,310 --> 00:01:48,860
good fit for you so cover just what is

00:01:45,830 --> 00:01:52,220
docker water containers go through a few

00:01:48,860 --> 00:01:54,560
practical examples with Python go

00:01:52,220 --> 00:01:56,330
through the downsides of docker and also

00:01:54,560 --> 00:01:58,460
some of the extra services that you may

00:01:56,330 --> 00:02:03,920
need may use and where doc is heading in

00:01:58,460 --> 00:02:06,110
the future so what is docker the

00:02:03,920 --> 00:02:08,420
official definition is an open platform

00:02:06,110 --> 00:02:10,640
for distributed applications for

00:02:08,420 --> 00:02:13,940
developers and sucide means essentially

00:02:10,640 --> 00:02:16,010
their motto is build ship run so this is

00:02:13,940 --> 00:02:19,629
why I think to think of this is docker

00:02:16,010 --> 00:02:19,629
is application containers

00:02:19,980 --> 00:02:27,459
so what are containers containers are

00:02:23,950 --> 00:02:29,110
essentially an isolated virtualization

00:02:27,459 --> 00:02:31,180
layer that's a software level

00:02:29,110 --> 00:02:33,879
virtualization so it uses a common

00:02:31,180 --> 00:02:37,569
kernel in this case of the Linux kernel

00:02:33,879 --> 00:02:40,660
and provide you a set of tools to help

00:02:37,569 --> 00:02:43,480
manage it so like a VM you can still

00:02:40,660 --> 00:02:45,190
stop start containers you can set

00:02:43,480 --> 00:02:47,680
networking on containers you can set

00:02:45,190 --> 00:02:49,950
resource limitations and constraints on

00:02:47,680 --> 00:02:52,840
containers as well

00:02:49,950 --> 00:02:55,239
so essentially docker is yet another

00:02:52,840 --> 00:02:58,150
layer of abstraction from standard

00:02:55,239 --> 00:03:01,360
containers docker focuses very heavily

00:02:58,150 --> 00:03:04,120
on the application layer so the goal of

00:03:01,360 --> 00:03:07,500
docker is essentially to reduce that to

00:03:04,120 --> 00:03:10,480
a one process one application container

00:03:07,500 --> 00:03:13,739
so the advantages that this is because

00:03:10,480 --> 00:03:19,110
it's very tightly defined you get a nice

00:03:13,739 --> 00:03:19,110
nice easy repeatable deployment from it

00:03:20,010 --> 00:03:26,380
so containers as Tom sort of talked

00:03:24,100 --> 00:03:28,660
about in his presentation yesterday with

00:03:26,380 --> 00:03:31,380
the django con you want production to be

00:03:28,660 --> 00:03:33,730
boring you want it to be safe

00:03:31,380 --> 00:03:35,290
well what about containers are they the

00:03:33,730 --> 00:03:40,930
latest fad is that this the new

00:03:35,290 --> 00:03:43,540
technology they've in fact introduced 15

00:03:40,930 --> 00:03:45,099
years ago into Linux so there's been

00:03:43,540 --> 00:03:47,620
quite a lot of work that's been going on

00:03:45,099 --> 00:03:50,739
with the Linux kernel development and it

00:03:47,620 --> 00:03:53,079
started back in the 2.4 kernel era so

00:03:50,739 --> 00:03:57,480
for those that remember that's back in

00:03:53,079 --> 00:03:57,480
the Pentium 2 Pentium threes so today's

00:03:58,590 --> 00:04:04,060
and one stat that I always think stands

00:04:01,660 --> 00:04:07,150
out is Google now launched over 2

00:04:04,060 --> 00:04:09,669
billion containers each week so they

00:04:07,150 --> 00:04:11,620
spin up spin down containers for all

00:04:09,669 --> 00:04:14,200
their services and they're launching two

00:04:11,620 --> 00:04:16,900
billion each week so from a production

00:04:14,200 --> 00:04:19,599
ready point of view certainly containers

00:04:16,900 --> 00:04:21,780
are there and docker is 99% there as

00:04:19,599 --> 00:04:21,780
well

00:04:23,830 --> 00:04:30,710
so why docker what advantages does it

00:04:26,780 --> 00:04:32,500
offer it's fast docker runs at native

00:04:30,710 --> 00:04:34,610
speed because it's a software level

00:04:32,500 --> 00:04:36,500
virtualization you're running at raw

00:04:34,610 --> 00:04:41,990
server speed so you're not getting any

00:04:36,500 --> 00:04:44,930
hypervisor performance hits it launches

00:04:41,990 --> 00:04:46,910
in sub second time so docker literally

00:04:44,930 --> 00:04:51,650
can launch can create and launch a

00:04:46,910 --> 00:04:54,260
container within 50 milliseconds it's

00:04:51,650 --> 00:04:56,270
lightweight you can have a full Python

00:04:54,260 --> 00:04:58,669
environment and it's less than 200

00:04:56,270 --> 00:05:02,860
megabytes of storage on the disk but it

00:04:58,669 --> 00:05:05,360
gets better than that docker uses a

00:05:02,860 --> 00:05:06,520
layered approach to its file system so

00:05:05,360 --> 00:05:09,919
uses a copy-on-write

00:05:06,520 --> 00:05:11,720
overlay filesystem by default what this

00:05:09,919 --> 00:05:13,610
means is the more instances you spin up

00:05:11,720 --> 00:05:16,370
doesn't necessarily take up more disk

00:05:13,610 --> 00:05:22,610
space there was a company called hip

00:05:16,370 --> 00:05:25,250
riot that presented at the 2015 docker

00:05:22,610 --> 00:05:28,910
Kong and one of the challenges that they

00:05:25,250 --> 00:05:32,320
put up was they had 250 running docker

00:05:28,910 --> 00:05:36,050
containers with a HTTP demon inside on a

00:05:32,320 --> 00:05:42,620
Raspberry Pi and if you think that's

00:05:36,050 --> 00:05:44,120
impressive their aim is a thousand so it

00:05:42,620 --> 00:05:48,169
gives you a great little level of

00:05:44,120 --> 00:05:50,389
isolation obviously the focus if you're

00:05:48,169 --> 00:05:52,280
working with micro services you want to

00:05:50,389 --> 00:05:56,450
be able to contain those within their

00:05:52,280 --> 00:05:58,490
own special environment so for this you

00:05:56,450 --> 00:06:00,710
can limit CPU you can limit memory you

00:05:58,490 --> 00:06:02,539
can limit what that system can do and

00:06:00,710 --> 00:06:04,880
because it's contained in its own

00:06:02,539 --> 00:06:07,000
namespace it can't access the processes

00:06:04,880 --> 00:06:11,300
from other containers that are running

00:06:07,000 --> 00:06:13,760
and docker makes things easy most of the

00:06:11,300 --> 00:06:15,530
commands are a single command line it's

00:06:13,760 --> 00:06:17,690
got a nice REST API that you can also

00:06:15,530 --> 00:06:23,570
call and there's quite a number of tools

00:06:17,690 --> 00:06:26,440
that already integrate with it so is it

00:06:23,570 --> 00:06:26,440
all rainbows and unicorns

00:06:26,830 --> 00:06:30,099
not quite

00:06:31,110 --> 00:06:36,850
so what are the downsides of docker or

00:06:33,840 --> 00:06:38,530
as I like to sort of refer to they're

00:06:36,850 --> 00:06:43,660
just things you have to be aware of of

00:06:38,530 --> 00:06:45,520
how docker actually works the first one

00:06:43,660 --> 00:06:47,020
and most of these are both positives and

00:06:45,520 --> 00:06:48,790
negatives but the first one is a

00:06:47,020 --> 00:06:51,400
positive and negative it's a rapidly

00:06:48,790 --> 00:06:53,050
changing platform so the good thing is

00:06:51,400 --> 00:06:54,820
they're adding new features all the time

00:06:53,050 --> 00:06:57,970
and improving some of the services that

00:06:54,820 --> 00:07:00,190
it provides the downside is you can't

00:06:57,970 --> 00:07:04,540
just learn docker once and forever have

00:07:00,190 --> 00:07:06,280
that knowledge in turn that means best

00:07:04,540 --> 00:07:08,170
practices can go out of date very

00:07:06,280 --> 00:07:10,000
quickly something that was written 18

00:07:08,170 --> 00:07:12,070
months ago as the best practice for

00:07:10,000 --> 00:07:13,630
docker may not necessarily be relevant

00:07:12,070 --> 00:07:14,980
today so you've got to do your homework

00:07:13,630 --> 00:07:17,130
to make sure that you're actually

00:07:14,980 --> 00:07:19,540
following what the best practices are

00:07:17,130 --> 00:07:21,280
docker themselves have been working very

00:07:19,540 --> 00:07:22,630
heavily on their documentation and

00:07:21,280 --> 00:07:24,880
recently relaunched all their

00:07:22,630 --> 00:07:27,040
documentation suite so they're making

00:07:24,880 --> 00:07:30,670
good inroads but still have a way to go

00:07:27,040 --> 00:07:33,490
there as well docker containers are

00:07:30,670 --> 00:07:35,500
immutable so the moment you spin it up

00:07:33,490 --> 00:07:36,250
you can make changes but as soon as you

00:07:35,500 --> 00:07:39,190
shut it down

00:07:36,250 --> 00:07:41,110
you lose all of those changes so it

00:07:39,190 --> 00:07:42,990
takes a bit of thinking sometimes to

00:07:41,110 --> 00:07:44,950
work out how your services work

00:07:42,990 --> 00:07:46,840
thankfully they've covered that as well

00:07:44,950 --> 00:07:48,700
and they have a concept of data

00:07:46,840 --> 00:07:50,350
containers where essentially your data

00:07:48,700 --> 00:07:53,500
can sit on a separate container to the

00:07:50,350 --> 00:07:54,700
actual running instance for example our

00:07:53,500 --> 00:07:57,370
database server you can have your

00:07:54,700 --> 00:07:59,440
database running running in a container

00:07:57,370 --> 00:08:05,140
and have a data container for the actual

00:07:59,440 --> 00:08:06,910
database files themselves multi hosts

00:08:05,140 --> 00:08:09,970
deployment so at the moment dock is

00:08:06,910 --> 00:08:12,330
really good at focusing on one VM or one

00:08:09,970 --> 00:08:15,490
host node and spinning up the containers

00:08:12,330 --> 00:08:16,990
the tools still aren't quite mature yet

00:08:15,490 --> 00:08:18,520
for running it in multi host

00:08:16,990 --> 00:08:20,410
environments where you've got multiple

00:08:18,520 --> 00:08:23,020
different VMs multiple different cloud

00:08:20,410 --> 00:08:28,030
hosting platforms but they're working on

00:08:23,020 --> 00:08:31,480
it in security this is one that a lot of

00:08:28,030 --> 00:08:34,720
people get confused on and because

00:08:31,480 --> 00:08:37,870
docker runs in a different way see this

00:08:34,720 --> 00:08:39,640
as an issue essentially because you fire

00:08:37,870 --> 00:08:41,740
up your container and it becomes

00:08:39,640 --> 00:08:43,340
immutable so for example like the

00:08:41,740 --> 00:08:45,470
OpenSSL bug

00:08:43,340 --> 00:08:47,180
there was panic because they've got open

00:08:45,470 --> 00:08:50,170
SSL installed in their container how do

00:08:47,180 --> 00:08:53,270
I update it we'll the answer

00:08:50,170 --> 00:08:54,770
mostly with docker is that you stop and

00:08:53,270 --> 00:08:56,990
start the instance so you can pull down

00:08:54,770 --> 00:08:59,450
the latest image sock and starter and

00:08:56,990 --> 00:09:02,990
you're a few hundred milliseconds at

00:08:59,450 --> 00:09:05,090
most to restart that service so with the

00:09:02,990 --> 00:09:07,880
open SSL bug you had to restart your

00:09:05,090 --> 00:09:09,560
engine X or Apache daemon any way to

00:09:07,880 --> 00:09:11,420
pull in the latest changes so it's not

00:09:09,560 --> 00:09:14,680
really that much different you just got

00:09:11,420 --> 00:09:14,680
to think about it in a different manner

00:09:17,050 --> 00:09:22,280
so what are the alternatives to docker

00:09:19,450 --> 00:09:23,930
in the Python well obviously the virtual

00:09:22,280 --> 00:09:25,370
environment so virtual end is a great

00:09:23,930 --> 00:09:27,530
little tool to run multiple different

00:09:25,370 --> 00:09:30,080
versions of libraries and not pollute

00:09:27,530 --> 00:09:34,460
your dev or production environment with

00:09:30,080 --> 00:09:36,470
conflicting versions in fact one one

00:09:34,460 --> 00:09:39,850
Python Easter I did see described docker

00:09:36,470 --> 00:09:42,980
as virtualenv on crack

00:09:39,850 --> 00:09:45,020
so the downsides to virtual end is it's

00:09:42,980 --> 00:09:47,210
heavily reliant on the underlying system

00:09:45,020 --> 00:09:50,090
still so it still needs Python installed

00:09:47,210 --> 00:09:52,310
on the system and it's Python only so

00:09:50,090 --> 00:09:54,440
when it comes to binary or external

00:09:52,310 --> 00:09:56,180
modules like when you've got my sequel

00:09:54,440 --> 00:09:59,240
and you need some sort of external

00:09:56,180 --> 00:10:00,650
library to compile you can run into some

00:09:59,240 --> 00:10:05,570
issues there so you can still face

00:10:00,650 --> 00:10:08,330
deployment issues existing

00:10:05,570 --> 00:10:11,030
virtualization so obviously everybody

00:10:08,330 --> 00:10:12,760
these days is running virtualized system

00:10:11,030 --> 00:10:14,930
which is great

00:10:12,760 --> 00:10:16,730
docker doesn't isn't a direct

00:10:14,930 --> 00:10:19,580
replacement for this in fact you can

00:10:16,730 --> 00:10:21,410
augment your vm deployment because now

00:10:19,580 --> 00:10:23,210
you can quite easily and quite

00:10:21,410 --> 00:10:25,220
efficiently spin up multiple containers

00:10:23,210 --> 00:10:27,470
within your virtualized environment or

00:10:25,220 --> 00:10:30,470
virtual machine you can make full use of

00:10:27,470 --> 00:10:31,790
your hardware and you you still get all

00:10:30,470 --> 00:10:39,230
the isolation you still get the ability

00:10:31,790 --> 00:10:42,380
to restart so existing orchestration

00:10:39,230 --> 00:10:44,360
systems obviously the more tightly

00:10:42,380 --> 00:10:46,280
coupled docker is the more it gives you

00:10:44,360 --> 00:10:48,350
in terms of configuration management

00:10:46,280 --> 00:10:50,150
repeatability and the orchestration side

00:10:48,350 --> 00:10:52,600
of things again

00:10:50,150 --> 00:10:55,310
daka's not a direct replacement for this

00:10:52,600 --> 00:10:56,050
it's integrated now into most of the

00:10:55,310 --> 00:10:57,940
modern

00:10:56,050 --> 00:11:00,370
see em systems so you can actually use

00:10:57,940 --> 00:11:04,450
docker still with your existing systems

00:11:00,370 --> 00:11:07,600
as well and just plain Linux containers

00:11:04,450 --> 00:11:10,740
themselves like Linux containers LXE and

00:11:07,600 --> 00:11:13,930
virtuozzo which is a product way is

00:11:10,740 --> 00:11:16,120
again docker isn't a direct replacement

00:11:13,930 --> 00:11:19,480
for this docker focuses just on the

00:11:16,120 --> 00:11:21,520
application side of things so in fact

00:11:19,480 --> 00:11:23,560
you can run docker within an existing

00:11:21,520 --> 00:11:26,440
container as well so you can have this

00:11:23,560 --> 00:11:32,560
multi-layered system with high levels of

00:11:26,440 --> 00:11:34,180
efficiency so how do we use it for

00:11:32,560 --> 00:11:36,970
Python and what uses are there for

00:11:34,180 --> 00:11:38,800
Python micro-services obviously

00:11:36,970 --> 00:11:40,930
everybody would love to be able to

00:11:38,800 --> 00:11:43,060
decouple their dependency libraries for

00:11:40,930 --> 00:11:45,700
their service into their own little

00:11:43,060 --> 00:11:47,470
environment that's great if you've got

00:11:45,700 --> 00:11:50,400
lots of VMs you can spin up and manage

00:11:47,470 --> 00:11:53,080
and bits and pieces but docker makes it

00:11:50,400 --> 00:11:55,030
really trivial to spin up containers and

00:11:53,080 --> 00:11:58,900
isolate each of those services in there

00:11:55,030 --> 00:12:01,410
if you're using the 12 factor app

00:11:58,900 --> 00:12:04,180
philosophy or sort of following its

00:12:01,410 --> 00:12:08,800
guidance docker is an extremely good fit

00:12:04,180 --> 00:12:11,020
for this as well so the configuration

00:12:08,800 --> 00:12:13,450
management side of things the troubles

00:12:11,020 --> 00:12:16,089
that you have between production and

00:12:13,450 --> 00:12:18,220
development environments so because

00:12:16,089 --> 00:12:21,400
docker is very tightly coupled with your

00:12:18,220 --> 00:12:23,430
service you get some configuration

00:12:21,400 --> 00:12:26,500
management benefits out of this as well

00:12:23,430 --> 00:12:29,080
if you've ever had it's works for me or

00:12:26,500 --> 00:12:30,460
it worked in dev type problem and didn't

00:12:29,080 --> 00:12:31,930
realize that you had one little library

00:12:30,460 --> 00:12:34,300
different between your development

00:12:31,930 --> 00:12:38,020
production environment again docker

00:12:34,300 --> 00:12:40,270
eliminates this for you which leads on

00:12:38,020 --> 00:12:41,380
to repeatability deploying docker

00:12:40,270 --> 00:12:44,260
anywhere should give you the same

00:12:41,380 --> 00:12:46,260
experience so the underlying whether

00:12:44,260 --> 00:12:50,110
you're running in a bun to the CentOS

00:12:46,260 --> 00:12:55,030
running on Azure running on AWS it

00:12:50,110 --> 00:12:56,710
shouldn't matter and one of the benefits

00:12:55,030 --> 00:12:58,930
that I've certainly used heavily is

00:12:56,710 --> 00:13:01,480
essentially used once containers so you

00:12:58,930 --> 00:13:03,550
can spin up a container spin up as I'll

00:13:01,480 --> 00:13:05,980
show you shortly a Python environment

00:13:03,550 --> 00:13:07,520
and you can even have it destroy itself

00:13:05,980 --> 00:13:09,800
as you shut it down

00:13:07,520 --> 00:13:11,890
so the overheads to spin up these

00:13:09,800 --> 00:13:14,540
different environments is extremely low

00:13:11,890 --> 00:13:16,010
it's also great for testing you can run

00:13:14,540 --> 00:13:18,470
multiple different test environments

00:13:16,010 --> 00:13:23,420
spin up the containers run your tests

00:13:18,470 --> 00:13:25,940
and destroy them afterwards so if you

00:13:23,420 --> 00:13:30,760
run a runner one of the good things

00:13:25,940 --> 00:13:33,740
about docker is it's not like OpenStack

00:13:30,760 --> 00:13:34,279
it's not a complex install to get

00:13:33,740 --> 00:13:36,410
started

00:13:34,279 --> 00:13:39,920
so for abun - it's just a very simple

00:13:36,410 --> 00:13:43,690
one-liner and same again with the CentOS

00:13:39,920 --> 00:13:46,250
Fedora well if you're running OSX or

00:13:43,690 --> 00:13:48,040
running Windows you can use a product

00:13:46,250 --> 00:13:50,899
called boot - docker which essentially

00:13:48,040 --> 00:13:52,820
again is a one-line script sets up a

00:13:50,899 --> 00:13:55,610
virtual environment for you using

00:13:52,820 --> 00:13:58,430
VirtualBox on your machine so it takes

00:13:55,610 --> 00:14:00,589
less than 15 seconds to boot on a modern

00:13:58,430 --> 00:14:03,709
system and you can get started right

00:14:00,589 --> 00:14:05,930
away docker also recently bought out the

00:14:03,709 --> 00:14:07,640
company that produced kite Matic which

00:14:05,930 --> 00:14:14,510
essentially gives a nice GUI interface

00:14:07,640 --> 00:14:16,579
to managing your containers so how do

00:14:14,510 --> 00:14:19,339
you use docker it's got a very simple

00:14:16,579 --> 00:14:22,040
command structure so just as a few

00:14:19,339 --> 00:14:23,630
examples you can go run a container so

00:14:22,040 --> 00:14:25,790
you go docker run and give it a name

00:14:23,630 --> 00:14:28,930
each name if you want to restart an

00:14:25,790 --> 00:14:32,270
instance you go docker restart container

00:14:28,930 --> 00:14:34,250
listing containers docker PS viewing the

00:14:32,270 --> 00:14:36,740
log files within your container docker

00:14:34,250 --> 00:14:40,779
logs and then the container ID so it's a

00:14:36,740 --> 00:14:40,779
very simple system to get started with

00:14:42,520 --> 00:14:47,950
so let's create a basic little container

00:14:48,100 --> 00:14:52,700
obviously we're at PyCon so I've got a

00:14:50,630 --> 00:14:57,200
nice Python one here

00:14:52,700 --> 00:15:03,410
so for 2.7 we go a docker run - t - i

00:14:57,200 --> 00:15:06,860
python : 2.7 and for 3.4 we simply just

00:15:03,410 --> 00:15:12,160
specify the version so how this actually

00:15:06,860 --> 00:15:14,870
works - T essentially means terminal and

00:15:12,160 --> 00:15:17,270
- I makes it interactive means we can

00:15:14,870 --> 00:15:18,980
type and use it and I must apologize for

00:15:17,270 --> 00:15:19,660
some of these I've had to take videos of

00:15:18,980 --> 00:15:21,610
the

00:15:19,660 --> 00:15:24,130
of the demos I was going to give my

00:15:21,610 --> 00:15:29,260
original MacBook decided to die 2 days

00:15:24,130 --> 00:15:31,810
before this event and lastly we specify

00:15:29,260 --> 00:15:38,140
the image and a tag so generally the

00:15:31,810 --> 00:15:41,350
tags are used as versioning so if we run

00:15:38,140 --> 00:15:45,190
a quick little demo to stock a run - t -

00:15:41,350 --> 00:15:47,620
i python 2.7 and you can see we're

00:15:45,190 --> 00:15:54,310
straight into a Python shell and we can

00:15:47,620 --> 00:15:57,730
see it started straightaway and again to

00:15:54,310 --> 00:15:59,320
run a 3.4 shell this installs and

00:15:57,730 --> 00:16:07,600
creates a container in the background

00:15:59,320 --> 00:16:11,680
and stores Python in it so let's just

00:16:07,600 --> 00:16:13,780
look at a little simple app over to line

00:16:11,680 --> 00:16:16,150
of Python because pythons nice and

00:16:13,780 --> 00:16:18,610
simple and basically all we're going to

00:16:16,150 --> 00:16:20,920
do is say hello pike on Australia and

00:16:18,610 --> 00:16:24,010
spitting up the version number so to

00:16:20,920 --> 00:16:26,940
turn my Python file into a dock or

00:16:24,010 --> 00:16:30,190
container there's two steps I need to do

00:16:26,940 --> 00:16:32,260
the first of that is to create a docker

00:16:30,190 --> 00:16:35,950
file so docker file is a very simple

00:16:32,260 --> 00:16:37,270
text driven configuration file that

00:16:35,950 --> 00:16:39,580
essentially you need to specify

00:16:37,270 --> 00:16:42,850
everything that needs - it needs to do

00:16:39,580 --> 00:16:44,650
to start and create the image so for

00:16:42,850 --> 00:16:46,540
this one because docker gives us the

00:16:44,650 --> 00:16:50,710
layered ability I just start with the

00:16:46,540 --> 00:16:53,620
Python 2.7 image already I copy

00:16:50,710 --> 00:16:56,070
I hope icon file just into the root

00:16:53,620 --> 00:17:01,660
directory and finally I run the command

00:16:56,070 --> 00:17:03,370
Python hello Python hi so now that we've

00:17:01,660 --> 00:17:06,100
created the docker file the next step we

00:17:03,370 --> 00:17:07,390
have to do is build the image for this

00:17:06,100 --> 00:17:10,540
doing it locally we're just going to

00:17:07,390 --> 00:17:12,840
specify a tag with the - T just so we

00:17:10,540 --> 00:17:15,250
have an image to reference and we

00:17:12,840 --> 00:17:16,480
specify that it's in that directory so

00:17:15,250 --> 00:17:19,950
literally in that directory it was just

00:17:16,480 --> 00:17:22,720
a docker file and the hello PyCon file

00:17:19,950 --> 00:17:28,650
once it's built then all we need to do

00:17:22,720 --> 00:17:28,650
is docker run PyCon au / hello

00:17:28,750 --> 00:17:40,370
and there should have been the example

00:17:32,150 --> 00:17:45,320
of it actually running so to give a

00:17:40,370 --> 00:17:48,050
quick flask example this is sort of more

00:17:45,320 --> 00:17:49,070
like what what it'll be used in the in a

00:17:48,050 --> 00:17:52,010
real world or in a production

00:17:49,070 --> 00:17:55,100
environment so again it's a simple

00:17:52,010 --> 00:17:58,100
command structure except this time we're

00:17:55,100 --> 00:18:00,590
going to set it to run as a daemon then

00:17:58,100 --> 00:18:02,030
we're going to use - key to map port 80

00:18:00,590 --> 00:18:03,650
to port 5000

00:18:02,030 --> 00:18:05,660
so essentially port 80 will be on the

00:18:03,650 --> 00:18:09,320
host and it will nap that to the

00:18:05,660 --> 00:18:14,230
Container on port 5000 and we're using

00:18:09,320 --> 00:18:14,230
the Dockers training web app for this

00:18:20,470 --> 00:18:24,340
so just to see it run for this one I

00:18:22,900 --> 00:18:25,870
didn't actually pull in the images just

00:18:24,340 --> 00:18:27,310
so you could see the process run from

00:18:25,870 --> 00:18:29,920
scratch

00:18:27,310 --> 00:18:31,780
unfortunately I rented at home on my

00:18:29,920 --> 00:18:35,170
Optus cable connection and managed to

00:18:31,780 --> 00:18:37,210
pick their peak time to do it so it was

00:18:35,170 --> 00:18:40,090
unable to find a copy of the training

00:18:37,210 --> 00:18:41,830
app locally and as you can see it's

00:18:40,090 --> 00:18:43,630
going and downloading automatically all

00:18:41,830 --> 00:18:48,340
the layers that it needs to to run this

00:18:43,630 --> 00:18:50,890
application this particular one is in a

00:18:48,340 --> 00:18:52,300
bun to baste image so it's downloading

00:18:50,890 --> 00:18:58,570
the multiple different layers for that

00:18:52,300 --> 00:19:02,050
as well the good thing about docker is

00:18:58,570 --> 00:19:03,610
once you've pulled this in if I had all

00:19:02,050 --> 00:19:05,290
of those layers except for the last one

00:19:03,610 --> 00:19:07,800
all it would need to download is that

00:19:05,290 --> 00:19:07,800
last layer

00:19:15,360 --> 00:19:18,660
so if we just skip through it quickly

00:19:17,190 --> 00:19:21,000
extracts that because it's a

00:19:18,660 --> 00:19:22,350
copy-on-write overlay file system it

00:19:21,000 --> 00:19:27,720
takes care of all that work in the

00:19:22,350 --> 00:19:35,880
background for you and starts up the

00:19:27,720 --> 00:19:37,980
application so course we can then go to

00:19:35,880 --> 00:19:42,990
a web browser and see our magical hello

00:19:37,980 --> 00:19:44,820
world application we can also have a

00:19:42,990 --> 00:19:46,530
look at the log files so gain if you

00:19:44,820 --> 00:19:48,390
used to running flask or similar systems

00:19:46,530 --> 00:19:57,870
you can see the log e output from that

00:19:48,390 --> 00:19:59,370
container the docker file for this one

00:19:57,870 --> 00:20:01,410
so this one was a little bit more

00:19:59,370 --> 00:20:03,210
complex than my simple example but just

00:20:01,410 --> 00:20:05,280
to run through it quickly they using

00:20:03,210 --> 00:20:07,590
Ubuntu image they came through grab

00:20:05,280 --> 00:20:08,280
Python all installed pip install the

00:20:07,590 --> 00:20:10,200
requirements

00:20:08,280 --> 00:20:13,470
oh sorry copied the requirement sought

00:20:10,200 --> 00:20:15,450
over install the requirements exposed

00:20:13,470 --> 00:20:17,310
port 5,000 so this allowed the host

00:20:15,450 --> 00:20:21,930
container to map a connection to it and

00:20:17,310 --> 00:20:23,880
we ran our application and just for

00:20:21,930 --> 00:20:25,950
completeness that was the flask app that

00:20:23,880 --> 00:20:27,690
it ran so you can see the port 5,000

00:20:25,950 --> 00:20:29,160
this is where it came into it so the

00:20:27,690 --> 00:20:30,960
ports that it starts up in your

00:20:29,160 --> 00:20:33,030
application here that's what you need to

00:20:30,960 --> 00:20:35,340
expose to have have the ability to

00:20:33,030 --> 00:20:39,960
access it from a host or from an

00:20:35,340 --> 00:20:42,270
external source so the good thing about

00:20:39,960 --> 00:20:46,200
docker is it comes with everything

00:20:42,270 --> 00:20:48,330
including the kitchen sink once you

00:20:46,200 --> 00:20:49,650
start to get into more complex docker

00:20:48,330 --> 00:20:51,450
scenarios and when you're running

00:20:49,650 --> 00:20:54,450
multiple containers they have docker

00:20:51,450 --> 00:20:56,700
compose so docker compose gives you

00:20:54,450 --> 00:20:58,710
controls for multi container deployments

00:20:56,700 --> 00:21:01,800
it's a very simple yeah more based

00:20:58,710 --> 00:21:03,570
format and again like everything docker

00:21:01,800 --> 00:21:09,900
it reduces everything down to a single

00:21:03,570 --> 00:21:11,490
command line to run docker swarm this is

00:21:09,900 --> 00:21:13,170
their cluster in component so this is

00:21:11,490 --> 00:21:16,170
where they're trying to work work on and

00:21:13,170 --> 00:21:17,790
simplify the host level deployment it's

00:21:16,170 --> 00:21:19,500
currently still in beta so there's quite

00:21:17,790 --> 00:21:24,000
a bit of flux in terms of how it works

00:21:19,500 --> 00:21:26,010
and the feature sets that it has docker

00:21:24,000 --> 00:21:28,679
machine again docker wants to make

00:21:26,010 --> 00:21:30,809
everything easy for you so docker have

00:21:28,679 --> 00:21:32,909
a machine that will create the house for

00:21:30,809 --> 00:21:36,210
you so this can directly interact with

00:21:32,909 --> 00:21:38,610
AWS and actually spin up the instances

00:21:36,210 --> 00:21:41,210
for you as well as a number of other

00:21:38,610 --> 00:21:41,210
cloud providers

00:21:42,080 --> 00:21:46,679
so where's doctor going in the future

00:21:44,960 --> 00:21:48,749
obviously it's a rapidly growing

00:21:46,679 --> 00:21:51,119
technology but two of the next bits that

00:21:48,749 --> 00:21:53,490
it's working on to push here is a volume

00:21:51,119 --> 00:21:55,080
plug-in which is now made it into the

00:21:53,490 --> 00:21:57,690
mainline code but it gives you a

00:21:55,080 --> 00:22:00,389
pluggable storage so by this it can

00:21:57,690 --> 00:22:03,389
interface with systems like currently

00:22:00,389 --> 00:22:05,399
they've got the demos for NFS EMC filers

00:22:03,389 --> 00:22:07,049
Gloucester and similar so you can have

00:22:05,399 --> 00:22:09,889
your data stored on an external source

00:22:07,049 --> 00:22:12,240
and reference from within the container

00:22:09,889 --> 00:22:14,549
they're working on a new network system

00:22:12,240 --> 00:22:16,409
so obviously the the current one works

00:22:14,549 --> 00:22:17,759
well for simple host environments but it

00:22:16,409 --> 00:22:19,860
doesn't work well when you get to bigger

00:22:17,759 --> 00:22:21,299
scale so they're using VX land

00:22:19,860 --> 00:22:23,820
essentially to be able to bridge between

00:22:21,299 --> 00:22:25,470
the multiple different hosts and they're

00:22:23,820 --> 00:22:27,389
turning it into a services based model

00:22:25,470 --> 00:22:29,100
so rather than specifying ports you'll

00:22:27,389 --> 00:22:37,919
be able to specify a network specify

00:22:29,100 --> 00:22:39,960
services so in conclusion go try it no

00:22:37,919 --> 00:22:42,749
really go go try docker it's quite

00:22:39,960 --> 00:22:46,980
simple to get started it allows you to

00:22:42,749 --> 00:22:49,619
embrace the microservices philosophy and

00:22:46,980 --> 00:22:50,879
enjoy pushes to production because your

00:22:49,619 --> 00:22:52,980
dev environment running containers

00:22:50,879 --> 00:22:54,509
running docker containers is exactly the

00:22:52,980 --> 00:22:58,639
same as your production environment you

00:22:54,509 --> 00:22:58,639
eliminate all those hassles in between

00:23:02,450 --> 00:23:06,539
okay if you want further reading I've

00:23:04,440 --> 00:23:07,850
got my slides up here and also linked a

00:23:06,539 --> 00:23:09,690
number of tutorials that I've written

00:23:07,850 --> 00:23:12,330
there was also a really good

00:23:09,690 --> 00:23:15,149
presentation at PyCon this year that

00:23:12,330 --> 00:23:17,279
gave a good overview of docker and of

00:23:15,149 --> 00:23:23,070
course the official docker documentation

00:23:17,279 --> 00:23:25,429
itself and with that we got any

00:23:23,070 --> 00:23:25,429
questions

00:23:30,880 --> 00:23:36,590
all right you said a docker locally

00:23:33,710 --> 00:23:39,590
Katia's container images is there a way

00:23:36,590 --> 00:23:45,559
of caching images on your network for

00:23:39,590 --> 00:23:47,299
multiple hosts not that I know of

00:23:45,559 --> 00:23:48,620
I haven't actually sort of delved into

00:23:47,299 --> 00:23:51,770
that so there may be a tool actually

00:23:48,620 --> 00:23:53,990
available for that but it allows it an

00:23:51,770 --> 00:23:56,059
easy just docker pull to pull later or

00:23:53,990 --> 00:24:01,100
data down per container or per house

00:23:56,059 --> 00:24:02,630
sorry hi thanks for the talk I briefly

00:24:01,100 --> 00:24:06,710
played with docker like a year ago and

00:24:02,630 --> 00:24:11,110
haven't actually touched it since two

00:24:06,710 --> 00:24:13,340
questions one is so my work we're using

00:24:11,110 --> 00:24:15,620
salt stack for our configuration

00:24:13,340 --> 00:24:19,330
management which you're abusing Ruby

00:24:15,620 --> 00:24:22,159
your chef full of ants for the octaves

00:24:19,330 --> 00:24:23,899
how did the two playing together because

00:24:22,159 --> 00:24:25,460
you look at the docker files and I was

00:24:23,899 --> 00:24:29,120
like oh now we're going back to a bash

00:24:25,460 --> 00:24:32,870
script - any tips on how you get those

00:24:29,120 --> 00:24:34,520
two working well together and my second

00:24:32,870 --> 00:24:36,649
question is that I'm using vagrant for

00:24:34,520 --> 00:24:39,500
our dev builds if I start using you

00:24:36,649 --> 00:24:42,409
doctor I just throw that away and spin

00:24:39,500 --> 00:24:44,690
up a docker image or whatever the

00:24:42,409 --> 00:24:47,029
terminology is yeah no I'm good question

00:24:44,690 --> 00:24:49,429
so that salt snack is actually

00:24:47,029 --> 00:24:51,590
integrated a docker module so salt snack

00:24:49,429 --> 00:24:53,450
itself can outtalk natively to your

00:24:51,590 --> 00:24:55,760
docker instances I haven't played with

00:24:53,450 --> 00:24:57,860
that I've just seen it available so I'm

00:24:55,760 --> 00:25:00,470
not sure exactly how that component

00:24:57,860 --> 00:25:02,120
works in terms of vagrant I was using

00:25:00,470 --> 00:25:05,149
vagrant and now I'm just using docker

00:25:02,120 --> 00:25:07,669
containers so essentially I've got my

00:25:05,149 --> 00:25:09,380
using docker compose and I spin up the

00:25:07,669 --> 00:25:14,809
multiple different containers everything

00:25:09,380 --> 00:25:16,159
running ready to develop absolutely yeah

00:25:14,809 --> 00:25:17,480
yeah if I've got all the layers in there

00:25:16,159 --> 00:25:20,799
I can spin up my development environment

00:25:17,480 --> 00:25:20,799
within a few seconds

00:25:24,480 --> 00:25:29,470
hi great Olaf thank you is Daka viable

00:25:27,760 --> 00:25:31,720
as a sandbox for running untrusted code

00:25:29,470 --> 00:25:33,430
what do you have to do to it or is that

00:25:31,720 --> 00:25:36,040
the wrong approach to go completely

00:25:33,430 --> 00:25:38,890
absolutely in fact a couple of people

00:25:36,040 --> 00:25:40,690
have demoed a number of instances all

00:25:38,890 --> 00:25:43,720
the one-liner scripts that you see out

00:25:40,690 --> 00:25:44,980
in the web to install the service like

00:25:43,720 --> 00:25:47,290
you know when you normally see you know

00:25:44,980 --> 00:25:47,970
pipe this curl command in DES bash and

00:25:47,290 --> 00:25:50,170
run it

00:25:47,970 --> 00:25:52,510
anybody that security-conscious of

00:25:50,170 --> 00:25:54,820
course wants to figure out what exactly

00:25:52,510 --> 00:25:56,800
that script is doing docker actually

00:25:54,820 --> 00:25:59,830
have a docker diff command so you can do

00:25:56,800 --> 00:26:03,220
it against a standard container run that

00:25:59,830 --> 00:26:05,140
curl script like download it run it and

00:26:03,220 --> 00:26:06,610
it'll actually then give you an output

00:26:05,140 --> 00:26:08,380
of what files have changed and where

00:26:06,610 --> 00:26:15,160
they've changed so you can use it for

00:26:08,380 --> 00:26:17,470
that sandbox testing as well absolutely

00:26:15,160 --> 00:26:19,630
and I've got docker kindly sent me some

00:26:17,470 --> 00:26:21,040
shirts and bits and pieces so I'll put

00:26:19,630 --> 00:26:26,040
some of them out the table but come see

00:26:21,040 --> 00:26:26,040
me yeah and get some buckets of swag

00:26:38,909 --> 00:26:40,970

YouTube URL: https://www.youtube.com/watch?v=Fxsq3BciYdo


