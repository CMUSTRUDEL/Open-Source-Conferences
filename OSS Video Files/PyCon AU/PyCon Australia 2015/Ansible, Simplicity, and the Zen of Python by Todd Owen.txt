Title: Ansible, Simplicity, and the Zen of Python by Todd Owen
Publication date: 2015-08-04
Playlist: PyCon Australia 2015
Description: 
	Ansible is a configuration management tool, written in Python, that has taken the world of IT automation by storm. Its most remarkable quality is simplicity.

The Zen of Python is a set of aphorisms which capture the design philosophy of the Python language, one being "Simple is better than complex".

In this talk, weâ€™ll look at some of the concrete ways that Ansible embodies the Zen of Python, in an attempt to unravel the true meaning of the sometimes cryptic aphorisms. Along the way we will consider why simplicity is a such good thing, yet tantalisingly out of reach in most software projects.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:11,560 --> 00:00:16,270
alright welcome so our next speaker is

00:00:13,480 --> 00:00:17,800
Toto and he spent four years I'm working

00:00:16,270 --> 00:00:19,869
for the WA Health Department doing

00:00:17,800 --> 00:00:23,170
Python development and administration

00:00:19,869 --> 00:00:25,119
and working with an ansible so as of

00:00:23,170 --> 00:00:28,419
this year his start at the commonwealth

00:00:25,119 --> 00:00:31,869
bank with working on big data analytics

00:00:28,419 --> 00:00:33,700
and today his talk is called ansible

00:00:31,869 --> 00:00:42,130
simplicity and the Zen of python please

00:00:33,700 --> 00:00:44,770
welcome him hi it's great to see such a

00:00:42,130 --> 00:00:47,200
huge develop tracks in this develop

00:00:44,770 --> 00:00:48,880
track in this year's PyCon starting with

00:00:47,200 --> 00:00:50,800
Marcus and I ran in the morning and even

00:00:48,880 --> 00:00:53,470
going through in this room into the

00:00:50,800 --> 00:00:56,110
sessions after lunch as well if you are

00:00:53,470 --> 00:00:57,970
into that kind of thing you might like

00:00:56,110 --> 00:00:59,590
to know that we're hiring in the

00:00:57,970 --> 00:01:01,360
analytics and information team at

00:00:59,590 --> 00:01:02,980
Commonwealth Bank we've got a couple of

00:01:01,360 --> 00:01:04,809
Hadoop clusters that need some love and

00:01:02,980 --> 00:01:06,670
care so if you'd like to find out more

00:01:04,809 --> 00:01:08,619
just grabbed me by the arm or by email

00:01:06,670 --> 00:01:13,900
my address will be on the last slide

00:01:08,619 --> 00:01:16,060
today let's start with a colon in a far

00:01:13,900 --> 00:01:17,289
away land build the temple on top of a

00:01:16,060 --> 00:01:20,020
mountain running a number of Linux

00:01:17,289 --> 00:01:21,460
servers one day the master approached

00:01:20,020 --> 00:01:23,890
one of the novices and asked him to

00:01:21,460 --> 00:01:26,320
uninstall some rarely used packages such

00:01:23,890 --> 00:01:27,909
as Python 2.8 for the monks in their

00:01:26,320 --> 00:01:33,340
wisdom had already ported their scripts

00:01:27,909 --> 00:01:36,249
to Python 3 on the first day the novice

00:01:33,340 --> 00:01:38,799
read all about puppet on the second day

00:01:36,249 --> 00:01:41,079
he installed the puppet master on the

00:01:38,799 --> 00:01:43,719
control machine and the the agent

00:01:41,079 --> 00:01:45,939
services on the managed hosts on the

00:01:43,719 --> 00:01:47,469
third day he set up ssl certificate so

00:01:45,939 --> 00:01:49,539
that the agents could communicate with

00:01:47,469 --> 00:01:51,729
the master and on the fourth day he

00:01:49,539 --> 00:01:54,639
wrote a puppet manifest specifying the

00:01:51,729 --> 00:01:57,819
removal of the unwanted software on the

00:01:54,639 --> 00:01:59,649
on the fifth day he said oh wise master

00:01:57,819 --> 00:02:01,630
is it not awesome that modern tools can

00:01:59,649 --> 00:02:04,109
automate a laborious manual process in

00:02:01,630 --> 00:02:04,109
just four days

00:02:06,670 --> 00:02:11,780
by way of reply the master type the

00:02:09,289 --> 00:02:15,590
following into a bash prompt oh this

00:02:11,780 --> 00:02:18,140
means for loop over list of hosts coming

00:02:15,590 --> 00:02:21,020
from this file temple hosts for each one

00:02:18,140 --> 00:02:22,989
connected by a ssh if this is set up

00:02:21,020 --> 00:02:26,630
properly we won't need a password

00:02:22,989 --> 00:02:29,510
executors the superuser a command to

00:02:26,630 --> 00:02:31,940
tell the apt package manager to

00:02:29,510 --> 00:02:38,269
uninstall puppet and all of its

00:02:31,940 --> 00:02:42,500
configuration endloop suddenly the

00:02:38,269 --> 00:02:44,720
novice was enlightened this short shell

00:02:42,500 --> 00:02:48,950
script basically does what he spent four

00:02:44,720 --> 00:02:50,720
days sitting up so yay for bash but what

00:02:48,950 --> 00:02:51,920
was the title of my talk again you may

00:02:50,720 --> 00:02:53,930
be wondering when I'm going to tell you

00:02:51,920 --> 00:02:56,810
about ansible or this mysterious stand

00:02:53,930 --> 00:03:02,920
of Python while my next slide contains

00:02:56,810 --> 00:03:06,590
my first references to both it's a cow

00:03:02,920 --> 00:03:08,209
the cow isn't is an ansible joke it's

00:03:06,590 --> 00:03:11,060
not particularly profound I won't

00:03:08,209 --> 00:03:12,799
explain it here the Zen of Python on the

00:03:11,060 --> 00:03:15,829
other hand is either profoundly

00:03:12,799 --> 00:03:18,049
meaningful or just a comical easter egg

00:03:15,829 --> 00:03:20,260
depending on your taste the easter egg

00:03:18,049 --> 00:03:25,100
being that if you type import this into

00:03:20,260 --> 00:03:27,410
python then it will reveal the Zen this

00:03:25,100 --> 00:03:31,250
is line 3 of the zen simple is better

00:03:27,410 --> 00:03:33,140
than complete complex and i'll just

00:03:31,250 --> 00:03:36,010
clarify what simple means in the context

00:03:33,140 --> 00:03:39,230
of the story that i was just telling a

00:03:36,010 --> 00:03:40,760
sysadmin running a script that connects

00:03:39,230 --> 00:03:43,100
to other servers and execute some

00:03:40,760 --> 00:03:48,160
commands there is an example of a push

00:03:43,100 --> 00:03:51,290
model puppet is the reverse the agents

00:03:48,160 --> 00:03:52,640
call back to the master every 30 minutes

00:03:51,290 --> 00:03:55,070
by default to check whether their

00:03:52,640 --> 00:03:57,739
configuration manifest has changed so

00:03:55,070 --> 00:03:59,630
that's an example of a pull model now

00:03:57,739 --> 00:04:02,720
for some problems in computer science

00:03:59,630 --> 00:04:05,180
the poor model may turn out to be

00:04:02,720 --> 00:04:07,100
superior and more simple than push but

00:04:05,180 --> 00:04:10,190
in this particular scenario I think it's

00:04:07,100 --> 00:04:12,889
clear that the push model is the simpler

00:04:10,190 --> 00:04:14,780
one I mean some of the added complexity

00:04:12,889 --> 00:04:17,250
with the pool

00:04:14,780 --> 00:04:19,739
managing the services on all these hosts

00:04:17,250 --> 00:04:21,810
are scheduling pool events and also

00:04:19,739 --> 00:04:27,120
monitoring errors in a distributed

00:04:21,810 --> 00:04:29,880
system now finally it's only taken me

00:04:27,120 --> 00:04:33,270
eight slides to get here what is ansible

00:04:29,880 --> 00:04:35,900
well it's an IT automation tool so it

00:04:33,270 --> 00:04:41,420
competes with the likes of puppet and

00:04:35,900 --> 00:04:43,860
chef and CF engine and salt and fabric

00:04:41,420 --> 00:04:47,730
you may wonder did the world really need

00:04:43,860 --> 00:04:50,550
another one well barely three years old

00:04:47,730 --> 00:04:53,940
ansible is the newest kid on the block I

00:04:50,550 --> 00:04:59,550
believed is slightly new an insult but

00:04:53,940 --> 00:05:02,430
it is seeing a phenomenal growth open

00:04:59,550 --> 00:05:04,710
source com open source com called it one

00:05:02,430 --> 00:05:07,590
of the top ten open source projects of

00:05:04,710 --> 00:05:10,710
2014 and the thought works technology

00:05:07,590 --> 00:05:13,020
radar promoted it to the adopt circle

00:05:10,710 --> 00:05:14,490
mid last year making it the first tool

00:05:13,020 --> 00:05:18,210
in its class to reach the inner circle

00:05:14,490 --> 00:05:22,110
of the radar oh and it's written in

00:05:18,210 --> 00:05:24,800
Python ansibles most remarkable feature

00:05:22,110 --> 00:05:24,800
is its simplicity

00:05:28,080 --> 00:05:33,730
for a start it adopts the same push

00:05:30,790 --> 00:05:35,200
model that I just described there are no

00:05:33,730 --> 00:05:36,790
services to configure on any of the

00:05:35,200 --> 00:05:39,720
hosts and no software to install

00:05:36,790 --> 00:05:42,640
anywhere except on the control machine

00:05:39,720 --> 00:05:46,690
the sysadmin writes an ansible playbook

00:05:42,640 --> 00:05:49,410
and runs it using ansible ansible

00:05:46,690 --> 00:05:54,630
connects to the other hosts via ssh and

00:05:49,410 --> 00:05:58,240
execute the tasks from the playbook and

00:05:54,630 --> 00:06:00,880
the building blocks of play books and

00:05:58,240 --> 00:06:02,620
tasks are answerable modules so for

00:06:00,880 --> 00:06:04,720
example there was a module called apt

00:06:02,620 --> 00:06:09,130
for managing packages on a Debian I

00:06:04,720 --> 00:06:10,510
system so the shell script that we just

00:06:09,130 --> 00:06:15,220
saw earlier would look something like

00:06:10,510 --> 00:06:17,350
this with ansible hosts all sudu yes and

00:06:15,220 --> 00:06:20,050
then under tasks we provide a list of

00:06:17,350 --> 00:06:22,720
modules with parameters so here we're

00:06:20,050 --> 00:06:24,850
calling the apt module passing at the

00:06:22,720 --> 00:06:28,150
name of a package puppet and a target

00:06:24,850 --> 00:06:30,490
state absent I think it's pretty

00:06:28,150 --> 00:06:32,350
self-explanatory you might just wonder

00:06:30,490 --> 00:06:35,200
how it knows which hosts to connect to

00:06:32,350 --> 00:06:37,810
the answer is that it ansible requires a

00:06:35,200 --> 00:06:40,300
separate file called an inventory but at

00:06:37,810 --> 00:06:43,060
its simplest that is nothing but a list

00:06:40,300 --> 00:06:45,610
of host names one on each lime just like

00:06:43,060 --> 00:06:47,740
the file that the shell script read

00:06:45,610 --> 00:06:50,110
earlier there was a file temple host and

00:06:47,740 --> 00:06:52,330
we can in fact reuse that file directly

00:06:50,110 --> 00:06:56,290
by just passing minus I option to

00:06:52,330 --> 00:06:57,820
ansible so the format obviously of a

00:06:56,290 --> 00:07:02,080
playbook is very different to a shell

00:06:57,820 --> 00:07:04,900
script but they contain essentially the

00:07:02,080 --> 00:07:06,880
same information there's no compared to

00:07:04,900 --> 00:07:09,070
that vanilla bash script there's there's

00:07:06,880 --> 00:07:15,160
no added complexity here which is why I

00:07:09,070 --> 00:07:18,250
say that ansible is simple now this is

00:07:15,160 --> 00:07:20,200
Pikkon and i don't want to just drone on

00:07:18,250 --> 00:07:22,300
about the Zen of Python without talking

00:07:20,200 --> 00:07:25,900
about Python the language as well it's

00:07:22,300 --> 00:07:28,390
pythons simple well let's as a

00:07:25,900 --> 00:07:33,160
counterpoint start with a HelloWorld in

00:07:28,390 --> 00:07:36,540
Java compared to this Python eliminates

00:07:33,160 --> 00:07:39,600
visibility modifiers type annotations

00:07:36,540 --> 00:07:41,389
compulsory classes for functions even

00:07:39,600 --> 00:07:43,979
compulsory functions

00:07:41,389 --> 00:07:45,030
those things are really orthogonal to

00:07:43,979 --> 00:07:47,880
the actual purpose of a hello world

00:07:45,030 --> 00:07:50,070
program if we took all of that out of

00:07:47,880 --> 00:07:52,590
Java then what we're left with is almost

00:07:50,070 --> 00:07:57,360
as simple as the canonical hello world

00:07:52,590 --> 00:07:59,699
in Python that was referred to in the

00:07:57,360 --> 00:08:01,500
keynote this morning in fact a simple

00:07:59,699 --> 00:08:06,419
hello world so Python really is very

00:08:01,500 --> 00:08:09,780
simple now just getting back to where we

00:08:06,419 --> 00:08:12,570
started what did we just do we took a

00:08:09,780 --> 00:08:15,720
line from the zone of Python we saw how

00:08:12,570 --> 00:08:17,970
that is embodied in ansible and then

00:08:15,720 --> 00:08:21,900
related this wisdom back to Python

00:08:17,970 --> 00:08:24,479
itself now today I'm not going to cover

00:08:21,900 --> 00:08:25,830
all of the that pattern is one that I'm

00:08:24,479 --> 00:08:27,300
going to repeat several times but I'm

00:08:25,830 --> 00:08:30,120
not going to cover all of the 19

00:08:27,300 --> 00:08:31,710
aphorisms one after another I'm going to

00:08:30,120 --> 00:08:34,370
touch one maybe a third of them I'm not

00:08:31,710 --> 00:08:38,159
going to do them in a given order either

00:08:34,370 --> 00:08:39,960
but some do need to be read in pairs and

00:08:38,159 --> 00:08:43,229
the line that comes after simple is

00:08:39,960 --> 00:08:49,800
better than complex is complex is better

00:08:43,229 --> 00:08:51,630
than complicated now hang on doesn't

00:08:49,800 --> 00:08:55,020
complex and complicated mean the same

00:08:51,630 --> 00:08:56,400
thing well if you ever meet Tim Peters

00:08:55,020 --> 00:09:00,480
who wrote the Zen of pipe and then you

00:08:56,400 --> 00:09:04,310
can ask him but my opinion of this is

00:09:00,480 --> 00:09:08,820
that it's an expression of Occam's razor

00:09:04,310 --> 00:09:12,420
where a complex system is one that has

00:09:08,820 --> 00:09:19,890
many elements but those elements are all

00:09:12,420 --> 00:09:23,490
necessary because it's the the problem

00:09:19,890 --> 00:09:26,130
being solved is complex so in relation

00:09:23,490 --> 00:09:28,470
to that problem these elements are

00:09:26,130 --> 00:09:32,459
necessary I think the word complicated

00:09:28,470 --> 00:09:35,300
here is meant to imply the introduction

00:09:32,459 --> 00:09:37,529
of unnecessary elements into the system

00:09:35,300 --> 00:09:40,890
so let's just turn back to answer ball

00:09:37,529 --> 00:09:43,380
for an example and we'll look at how

00:09:40,890 --> 00:09:45,959
ansible I hope that's all that's not

00:09:43,380 --> 00:09:48,120
very clear I haven't got too much blue

00:09:45,959 --> 00:09:50,220
writing don't worry we'll look at how

00:09:48,120 --> 00:09:52,680
ansible interfaces with the package

00:09:50,220 --> 00:09:54,180
manager we just touched a couple of

00:09:52,680 --> 00:09:58,180
times on apt

00:09:54,180 --> 00:10:00,580
now the apt module in ansible is pretty

00:09:58,180 --> 00:10:01,540
much a thin wrapper around the apt

00:10:00,580 --> 00:10:06,220
libraries provided by the operating

00:10:01,540 --> 00:10:08,410
system and that's the package manager

00:10:06,220 --> 00:10:11,080
used on debian like linux distributions

00:10:08,410 --> 00:10:13,990
but other systems use different package

00:10:11,080 --> 00:10:19,110
managers for example young and in

00:10:13,990 --> 00:10:21,520
ansible yum is just a different module

00:10:19,110 --> 00:10:23,440
apt and young are themselves both

00:10:21,520 --> 00:10:24,940
complex systems and when you're writing

00:10:23,440 --> 00:10:29,010
an ansible playbook you really should

00:10:24,940 --> 00:10:31,090
know exactly what you're dealing with

00:10:29,010 --> 00:10:33,190
but puppet on the other hand has a

00:10:31,090 --> 00:10:36,610
different approach it has a single

00:10:33,190 --> 00:10:38,170
resource type called package and apt oh

00:10:36,610 --> 00:10:40,810
yum are different backends called

00:10:38,170 --> 00:10:45,370
providers they in turn interface with

00:10:40,810 --> 00:10:47,650
the native tools so under the covers it

00:10:45,370 --> 00:10:51,100
will still be calling some apt command

00:10:47,650 --> 00:10:55,630
but as a puppet adds this extra layer of

00:10:51,100 --> 00:10:56,950
abstraction now I sense that some people

00:10:55,630 --> 00:10:59,020
in the room may be starting to get

00:10:56,950 --> 00:11:01,150
uncomfortable here and that's okay

00:10:59,020 --> 00:11:03,340
because I was too because when i put on

00:11:01,150 --> 00:11:05,590
my software engineer hat and i look at

00:11:03,340 --> 00:11:09,130
these two diagrams which one is more

00:11:05,590 --> 00:11:11,710
elegant and more extensible just more

00:11:09,130 --> 00:11:14,440
intellectually satisfying admittedly

00:11:11,710 --> 00:11:18,310
it's the one on the right but the Zen of

00:11:14,440 --> 00:11:20,740
python says no that one has more moving

00:11:18,310 --> 00:11:24,100
pieces more plumbing more layers

00:11:20,740 --> 00:11:27,970
therefore it's not merely complex it's

00:11:24,100 --> 00:11:30,610
complicated now i'm not saying that

00:11:27,970 --> 00:11:32,560
abstraction is a bad idea in general but

00:11:30,610 --> 00:11:34,990
i think the test should be does it

00:11:32,560 --> 00:11:38,980
simplify the design and use of the

00:11:34,990 --> 00:11:43,470
system and in this case i don't think it

00:11:38,980 --> 00:11:46,030
does at the very least different

00:11:43,470 --> 00:11:47,680
distributions different systems have

00:11:46,030 --> 00:11:51,400
different naming conventions for their

00:11:47,680 --> 00:11:53,260
packages so as a user of puppet i would

00:11:51,400 --> 00:11:55,720
still need to understand these platform

00:11:53,260 --> 00:11:58,230
specific differences it's a leaky

00:11:55,720 --> 00:11:58,230
abstraction

00:11:58,769 --> 00:12:02,199
now ansibles more straightforward

00:12:00,940 --> 00:12:04,300
approach to platform specific

00:12:02,199 --> 00:12:06,100
differences has a direct parallel in the

00:12:04,300 --> 00:12:09,040
Python standard library where there are

00:12:06,100 --> 00:12:10,810
whole modules to give access to platform

00:12:09,040 --> 00:12:14,980
specific features such as the UNIX

00:12:10,810 --> 00:12:18,190
groups or the windows registry Java on

00:12:14,980 --> 00:12:20,800
the other of actually guido van rossum

00:12:18,190 --> 00:12:22,329
writing about the origins of python has

00:12:20,800 --> 00:12:23,980
explained that one of his goals was to

00:12:22,329 --> 00:12:27,670
support and encourage platform

00:12:23,980 --> 00:12:29,529
independent user code but don't cut off

00:12:27,670 --> 00:12:32,730
access to platform capabilities or

00:12:29,529 --> 00:12:35,079
properties now comparing that to Java

00:12:32,730 --> 00:12:38,050
job tries much harder to be kept on

00:12:35,079 --> 00:12:40,750
platform agnostic astonishingly versions

00:12:38,050 --> 00:12:43,029
of Java released between 2000 and 2004

00:12:40,750 --> 00:12:45,490
did not allow programs to read

00:12:43,029 --> 00:12:49,740
environment variables because Sun

00:12:45,490 --> 00:12:54,790
considered those to be system dependent

00:12:49,740 --> 00:12:57,670
they did cave in and caved in to popular

00:12:54,790 --> 00:13:06,490
demand really and reenabled that feature

00:12:57,670 --> 00:13:08,589
in Java 5 go on to a novice sent the

00:13:06,490 --> 00:13:11,709
master a zip file containing his source

00:13:08,589 --> 00:13:14,110
code the master emailed back asking the

00:13:11,709 --> 00:13:15,430
novice to meet him in the chamber behind

00:13:14,110 --> 00:13:17,680
the room at the end of the corridor

00:13:15,430 --> 00:13:20,439
through the wooden door west of the

00:13:17,680 --> 00:13:21,880
cypress tree in front of the hall the

00:13:20,439 --> 00:13:23,649
novice of course didn't know which

00:13:21,880 --> 00:13:25,959
chamber the master was referring to so

00:13:23,649 --> 00:13:28,750
he quickly ran out to the hall found the

00:13:25,959 --> 00:13:30,880
cypress tree went west to a door through

00:13:28,750 --> 00:13:33,639
the door down a corridor across a room

00:13:30,880 --> 00:13:39,519
and found himself in the Masters office

00:13:33,639 --> 00:13:40,930
o wise master he said panting why didn't

00:13:39,519 --> 00:13:42,610
you just tell me to meet you in your

00:13:40,930 --> 00:13:46,660
office instead of sending me to five

00:13:42,610 --> 00:13:47,829
other places first the master asked him

00:13:46,660 --> 00:13:49,959
if he knew the significance of the

00:13:47,829 --> 00:13:52,899
number five the novice shook his head

00:13:49,959 --> 00:13:54,370
the master said five is the depth of

00:13:52,899 --> 00:13:57,509
meaningless sub-directories I had to

00:13:54,370 --> 00:13:57,509
navigate in your zip file

00:13:58,270 --> 00:14:07,780
suddenly the novice was enlightened flat

00:14:04,510 --> 00:14:09,850
is better than nested this principle

00:14:07,780 --> 00:14:11,500
refers to naming things for example

00:14:09,850 --> 00:14:14,830
ansible modules are not organized

00:14:11,500 --> 00:14:17,020
hierarchically the module to extract

00:14:14,830 --> 00:14:18,790
files from an archive is simply called

00:14:17,020 --> 00:14:20,170
an archive and if you looked at the

00:14:18,790 --> 00:14:21,940
source code for that which of course is

00:14:20,170 --> 00:14:23,560
written in Python you'd see that in it

00:14:21,940 --> 00:14:27,640
imports a Python module from the

00:14:23,560 --> 00:14:29,260
standard library called zip file if we

00:14:27,640 --> 00:14:31,560
compare this to the dotnet platform

00:14:29,260 --> 00:14:35,260
you'll find similar functionality in

00:14:31,560 --> 00:14:37,150
system I or compression under the

00:14:35,260 --> 00:14:39,700
cypress tree in front of the hall so

00:14:37,150 --> 00:14:48,520
that's an example of nested as opposed

00:14:39,700 --> 00:14:50,260
to the first two which are flat now I'm

00:14:48,520 --> 00:14:52,420
actually glossing Overland interesting

00:14:50,260 --> 00:14:53,890
technicality here which is that when you

00:14:52,420 --> 00:14:57,480
call an archive it does actually do

00:14:53,890 --> 00:14:59,890
something the other two are really

00:14:57,480 --> 00:15:01,870
namespaces so when you import the zip

00:14:59,890 --> 00:15:03,760
file module you don't expect that to do

00:15:01,870 --> 00:15:08,140
anything you just want to get access to

00:15:03,760 --> 00:15:10,870
what's inside of it and they're the real

00:15:08,140 --> 00:15:13,530
functionality is in a class inside zip

00:15:10,870 --> 00:15:16,330
file also called zip file mixed case and

00:15:13,530 --> 00:15:19,720
similarly in system geoduck compression

00:15:16,330 --> 00:15:21,430
there's a zip archive class now I wonder

00:15:19,720 --> 00:15:24,730
what the Zen of python has to say about

00:15:21,430 --> 00:15:26,710
namespaces it says namespaces are one

00:15:24,730 --> 00:15:29,950
honking great idea let's do more of

00:15:26,710 --> 00:15:32,920
those so by all means if you have lots

00:15:29,950 --> 00:15:35,920
of names put them into namespaces but

00:15:32,920 --> 00:15:39,010
just don't nest spaces inside of spaces

00:15:35,920 --> 00:15:42,400
inside of spaces now ansible uses

00:15:39,010 --> 00:15:43,270
namespaces but only very judiciously the

00:15:42,400 --> 00:15:46,300
only place where they're really

00:15:43,270 --> 00:15:49,210
compulsory is for roles that are shared

00:15:46,300 --> 00:15:50,950
via ansible galaxy which is like the

00:15:49,210 --> 00:15:56,110
equivalent of the python package index

00:15:50,950 --> 00:15:58,810
for ansible roles here the user name of

00:15:56,110 --> 00:16:01,300
the author becomes a compulsory prefix

00:15:58,810 --> 00:16:04,180
for the role so it serves the purpose of

00:16:01,300 --> 00:16:07,990
a namespace last time I checked there

00:16:04,180 --> 00:16:10,220
were three roles on namespace on galaxy

00:16:07,990 --> 00:16:12,890
named Jango

00:16:10,220 --> 00:16:14,660
but this namespace makes them unique and

00:16:12,890 --> 00:16:16,550
are no ambiguous so I think that in this

00:16:14,660 --> 00:16:23,480
particular context a namespace really

00:16:16,550 --> 00:16:25,190
makes a lot of sense co m three the

00:16:23,480 --> 00:16:26,840
master was comparing two similar

00:16:25,190 --> 00:16:29,180
programs written by two different

00:16:26,840 --> 00:16:32,030
novices both of them expected

00:16:29,180 --> 00:16:35,140
tab-delimited input files but the

00:16:32,030 --> 00:16:38,510
Masters data was separated for commas

00:16:35,140 --> 00:16:40,550
the master said a wise program bands

00:16:38,510 --> 00:16:43,520
like the bamboo adapting to new input

00:16:40,550 --> 00:16:45,560
formats the first program is flexible

00:16:43,520 --> 00:16:48,140
because it accepts the delimiting

00:16:45,560 --> 00:16:50,060
character as a parameter whereas the

00:16:48,140 --> 00:16:52,610
second program only splits on white

00:16:50,060 --> 00:16:54,290
space the novice who had written a

00:16:52,610 --> 00:16:57,500
second program left to defend his script

00:16:54,290 --> 00:16:59,600
or not at all wise master he said my

00:16:57,500 --> 00:17:01,640
script uses the venerable ifs

00:16:59,600 --> 00:17:03,770
environment variable the same one that

00:17:01,640 --> 00:17:07,130
all UNIX shells use to determine the

00:17:03,770 --> 00:17:09,680
internal field separator did you not

00:17:07,130 --> 00:17:12,890
notice the readme file which explains

00:17:09,680 --> 00:17:15,250
this all clearly and with use cases yes

00:17:12,890 --> 00:17:19,510
said the master I did notice the readme

00:17:15,250 --> 00:17:19,510
but I did not trouble to read it

00:17:19,620 --> 00:17:26,640
suddenly the novice was enlightened can

00:17:23,350 --> 00:17:30,190
you guess what the lesson here is

00:17:26,640 --> 00:17:31,780
explicit is better than implicit for the

00:17:30,190 --> 00:17:35,260
engineer inside of me this is another

00:17:31,780 --> 00:17:38,679
confronting statement we often think

00:17:35,260 --> 00:17:40,240
that concise code is beautiful so we're

00:17:38,679 --> 00:17:43,150
always looking for ways to reduce the

00:17:40,240 --> 00:17:44,590
number of calls we have to make or cut

00:17:43,150 --> 00:17:51,429
down the number of parameters to a

00:17:44,590 --> 00:17:53,080
function making things implicit means

00:17:51,429 --> 00:17:55,600
they become invisible at least at the

00:17:53,080 --> 00:17:57,280
point where you invoke the operation so

00:17:55,600 --> 00:18:00,220
it's a tempting way to sweep some of the

00:17:57,280 --> 00:18:03,190
clutter under the rug but do be careful

00:18:00,220 --> 00:18:04,570
because that more toast code can be more

00:18:03,190 --> 00:18:07,990
difficult to understand and more

00:18:04,570 --> 00:18:11,740
difficult to refactor simple does not

00:18:07,990 --> 00:18:14,140
necessarily mean shorter let's have a

00:18:11,740 --> 00:18:16,960
look at how ansible favors explicit /

00:18:14,140 --> 00:18:18,850
implicit here we're writing a task we're

00:18:16,960 --> 00:18:21,700
giving it a descriptive name which is

00:18:18,850 --> 00:18:24,070
optional but a good practice verified

00:18:21,700 --> 00:18:26,350
Python 3 point X is the default the

00:18:24,070 --> 00:18:28,330
actual ansible module that we're calling

00:18:26,350 --> 00:18:29,860
is called command it runs an arbitrary

00:18:28,330 --> 00:18:32,230
command in this case Python dash dash

00:18:29,860 --> 00:18:37,059
version which prints the Python version

00:18:32,230 --> 00:18:40,360
to standard error now usually if the

00:18:37,059 --> 00:18:42,549
programme succeeds then this task passes

00:18:40,360 --> 00:18:44,950
but we would like to change that so that

00:18:42,549 --> 00:18:48,340
if the version is not patient Python

00:18:44,950 --> 00:18:51,190
than 3 point X then we fail the task to

00:18:48,340 --> 00:18:53,730
do that we need to use a register

00:18:51,190 --> 00:18:57,820
register isn't another option for a task

00:18:53,730 --> 00:19:00,130
which assigns the result of the module

00:18:57,820 --> 00:19:02,679
to a variable and then we can write some

00:19:00,130 --> 00:19:06,789
custom logic for the failed when option

00:19:02,679 --> 00:19:08,110
like this so we've got one line to

00:19:06,789 --> 00:19:10,960
assign a variable that we're just using

00:19:08,110 --> 00:19:13,539
the next line two lines to check a

00:19:10,960 --> 00:19:16,570
relatively simple condition it does seem

00:19:13,539 --> 00:19:17,860
a bit verbose especially if you find

00:19:16,570 --> 00:19:21,340
yourself doing this a few times in a

00:19:17,860 --> 00:19:25,630
playbook what are the alternatives to

00:19:21,340 --> 00:19:28,750
this what if hypothetically ansible had

00:19:25,630 --> 00:19:30,280
some magic variable by that I mean a

00:19:28,750 --> 00:19:32,200
variable whose value is set

00:19:30,280 --> 00:19:34,210
automatically as a side effect of an

00:19:32,200 --> 00:19:37,179
ocean let's call this hypothetical

00:19:34,210 --> 00:19:39,010
variable res so now we wouldn't need the

00:19:37,179 --> 00:19:41,830
register option at all we just refers

00:19:39,010 --> 00:19:44,350
directly to res dot standard error that

00:19:41,830 --> 00:19:48,130
seems to make it a bit simpler right but

00:19:44,350 --> 00:19:50,559
does it really what if we also wanted to

00:19:48,130 --> 00:19:53,500
take this version number and copy it to

00:19:50,559 --> 00:19:56,980
a file we'd have to add another task to

00:19:53,500 --> 00:19:58,630
do that and then this rares the second

00:19:56,980 --> 00:20:01,450
res does it refer to the result of the

00:19:58,630 --> 00:20:03,820
first module or the second module so you

00:20:01,450 --> 00:20:07,269
see ansibles approach of requiring this

00:20:03,820 --> 00:20:09,370
very explicit register option eliminates

00:20:07,269 --> 00:20:16,990
these sorts of edge cases overall it's

00:20:09,370 --> 00:20:18,779
more consistent Python itself doesn't

00:20:16,990 --> 00:20:21,429
have any magic variables that

00:20:18,779 --> 00:20:24,309
distinguishes it from a number of other

00:20:21,429 --> 00:20:32,230
scripting languages including pearl Ruby

00:20:24,309 --> 00:20:33,610
and of course the UNIX shells and now

00:20:32,230 --> 00:20:34,630
we've come to a turning point in my talk

00:20:33,610 --> 00:20:37,419
where I want to get a little bit more

00:20:34,630 --> 00:20:39,639
philosophical the inspiration for my

00:20:37,419 --> 00:20:41,230
talk today was the realization that

00:20:39,639 --> 00:20:44,610
ansible and Python share a similar

00:20:41,230 --> 00:20:47,409
design philosophy they're both simple

00:20:44,610 --> 00:20:49,659
consistent and I think almost as a

00:20:47,409 --> 00:20:53,799
corollary of the Zen of Python also easy

00:20:49,659 --> 00:20:55,690
to learn and I think that the recent

00:20:53,799 --> 00:20:57,279
popularity of ansible as well as the

00:20:55,690 --> 00:20:58,659
vitality of Python as a language are

00:20:57,279 --> 00:21:02,889
doing a large part to these

00:20:58,659 --> 00:21:05,380
characteristics so how did answer will

00:21:02,889 --> 00:21:09,760
come to be simple was it just some happy

00:21:05,380 --> 00:21:11,409
coincidence I don't think so Michael

00:21:09,760 --> 00:21:14,019
behind is the lead developer available

00:21:11,409 --> 00:21:17,980
and effectively its benevolent dictator

00:21:14,019 --> 00:21:19,389
for life this is his github avatar some

00:21:17,980 --> 00:21:23,429
of the worst he's used to describe the

00:21:19,389 --> 00:21:25,960
vision for ansible radically simple

00:21:23,429 --> 00:21:29,799
easiest config management system to use

00:21:25,960 --> 00:21:33,519
ever and I lifted these directly from

00:21:29,799 --> 00:21:35,860
the readme from version 001 of ansible

00:21:33,519 --> 00:21:39,279
so you can see it's not just an

00:21:35,860 --> 00:21:41,590
afterthought you may have encountered

00:21:39,279 --> 00:21:44,730
the paradox before that simple is

00:21:41,590 --> 00:21:46,799
actually really difficult to achieve and

00:21:44,730 --> 00:21:48,840
I think that if you don't make that a

00:21:46,799 --> 00:21:53,100
top priority right from the outset then

00:21:48,840 --> 00:21:54,990
you don't have a chance frankly I don't

00:21:53,100 --> 00:21:58,020
think a lot of software projects

00:21:54,990 --> 00:22:01,260
actually do that it does certainly help

00:21:58,020 --> 00:22:03,480
if you have a leader who has a very

00:22:01,260 --> 00:22:05,870
clear vision and the determination to

00:22:03,480 --> 00:22:09,179
see it through in the case of Michael

00:22:05,870 --> 00:22:10,740
I've read some of the posts that he's

00:22:09,179 --> 00:22:12,960
written on the mailing list and on

00:22:10,740 --> 00:22:14,309
github issues and his commitment of

00:22:12,960 --> 00:22:18,240
simplicity really comes through quite

00:22:14,309 --> 00:22:20,640
strongly his response to new feature

00:22:18,240 --> 00:22:23,820
requests is often to point out a simpler

00:22:20,640 --> 00:22:26,130
way to achieve the same outcome and he

00:22:23,820 --> 00:22:28,620
said a few times that while the ansible

00:22:26,130 --> 00:22:31,350
project is keen to accept contributions

00:22:28,620 --> 00:22:33,059
they also reserve the right to turn down

00:22:31,350 --> 00:22:37,320
pull requests that don't fit with the

00:22:33,059 --> 00:22:38,610
ansible vision now intuitively that's a

00:22:37,320 --> 00:22:39,990
good thing right because if you want

00:22:38,610 --> 00:22:43,860
something to be simple you'd better not

00:22:39,990 --> 00:22:47,490
add too many features to it that's an

00:22:43,860 --> 00:22:51,660
easy conclusion to jump to but it's

00:22:47,490 --> 00:22:54,570
wrong I don't have time to really go

00:22:51,660 --> 00:22:56,490
into death as to why this is but if I

00:22:54,570 --> 00:22:58,169
did I just be rehashing some of the

00:22:56,490 --> 00:23:01,350
arguments put forward by people like

00:22:58,169 --> 00:23:06,720
stackoverflow co-founder del bosque and

00:23:01,350 --> 00:23:08,280
former apple VP Don Norman they say that

00:23:06,720 --> 00:23:11,880
this choice between simple and features

00:23:08,280 --> 00:23:13,980
is really a false dichotomy features are

00:23:11,880 --> 00:23:15,600
not your enemy indeed if you stop

00:23:13,980 --> 00:23:20,880
shipping new features then your product

00:23:15,600 --> 00:23:23,010
is pretty much going to die simplicity

00:23:20,880 --> 00:23:24,990
really means that the new features

00:23:23,010 --> 00:23:28,740
you're adding fit into a consistent

00:23:24,990 --> 00:23:32,160
mental model for your users in the words

00:23:28,740 --> 00:23:35,580
of the zenifi Fionn special cases aren't

00:23:32,160 --> 00:23:36,960
special enough to break the rules so by

00:23:35,580 --> 00:23:39,299
all means listen to your customers and

00:23:36,960 --> 00:23:43,830
your stakeholders but don't let their

00:23:39,299 --> 00:23:46,140
specific demands dictate the actual

00:23:43,830 --> 00:23:48,210
overall design of your software you know

00:23:46,140 --> 00:23:51,059
because they don't care about the big

00:23:48,210 --> 00:23:53,070
feature I don't blame them for that they

00:23:51,059 --> 00:23:55,280
just care about their particular use

00:23:53,070 --> 00:23:55,280
case

00:23:55,870 --> 00:24:01,750
and I'm sure my idea of simplicity is

00:23:59,890 --> 00:24:03,309
not a whole bunch of different peoples

00:24:01,750 --> 00:24:06,640
special cases kind of joined together

00:24:03,309 --> 00:24:09,850
with duct tape that may be an accurate

00:24:06,640 --> 00:24:14,200
get kind of description of a lot of

00:24:09,850 --> 00:24:17,340
business software as the founder of

00:24:14,200 --> 00:24:19,150
ansible michael DeHaan knows that

00:24:17,340 --> 00:24:22,240
simplicity is not the norm in our

00:24:19,150 --> 00:24:25,390
industry he has said of the ansible

00:24:22,240 --> 00:24:27,580
project where simplifies we're seeking a

00:24:25,390 --> 00:24:30,360
whole new technical aesthetic where much

00:24:27,580 --> 00:24:33,580
of the software industry has been adrift

00:24:30,360 --> 00:24:36,160
and what is aesthetics but a definition

00:24:33,580 --> 00:24:38,080
for beauty so I'd like to end this talk

00:24:36,160 --> 00:24:43,929
with the first line from the Zen of

00:24:38,080 --> 00:24:46,900
Python beautiful is better than ugly now

00:24:43,929 --> 00:24:48,940
beauty is hard to define and subjective

00:24:46,900 --> 00:24:51,270
but i believe that programming language

00:24:48,940 --> 00:24:54,640
communities such as the Python community

00:24:51,270 --> 00:24:59,170
converge on a shared set of aesthetic

00:24:54,640 --> 00:25:02,800
values in the case of Python we value

00:24:59,170 --> 00:25:06,730
simplicity minimalism and pragmatism and

00:25:02,800 --> 00:25:11,010
that in my humble opinion is the Zen of

00:25:06,730 --> 00:25:11,010
Python thank you for listening

00:25:17,970 --> 00:25:29,440
thank you very much Todd questions high

00:25:27,250 --> 00:25:33,460
time I most of the examples that you

00:25:29,440 --> 00:25:35,620
gave um of ansible in use were they seem

00:25:33,460 --> 00:25:37,150
to involve on state transitions like

00:25:35,620 --> 00:25:38,410
saying this bit you need to follow these

00:25:37,150 --> 00:25:40,690
steps to get to the system to a

00:25:38,410 --> 00:25:43,570
particular the state that we desire does

00:25:40,690 --> 00:25:45,340
answer will have a facility to say this

00:25:43,570 --> 00:25:48,040
is what assistance should look like take

00:25:45,340 --> 00:25:49,360
care of it or is it all these are the

00:25:48,040 --> 00:25:50,730
sort of the recipes that you need to

00:25:49,360 --> 00:25:52,690
fire to get to where we want to go oh

00:25:50,730 --> 00:25:55,090
thank you that's really an excellent

00:25:52,690 --> 00:25:58,630
question it's something that I thought

00:25:55,090 --> 00:26:02,440
about a bit because in my new job we're

00:25:58,630 --> 00:26:05,250
actually working a lot in Scala which is

00:26:02,440 --> 00:26:07,330
a functional language and obviously

00:26:05,250 --> 00:26:09,670
python is in the example of an

00:26:07,330 --> 00:26:11,309
imperative language so there's kind of

00:26:09,670 --> 00:26:14,320
this rift between functional and

00:26:11,309 --> 00:26:19,420
imperative where functional is the more

00:26:14,320 --> 00:26:21,309
declarative sort of approach no answer

00:26:19,420 --> 00:26:24,190
bull doesn't support that kind of

00:26:21,309 --> 00:26:28,780
declarative configuration management and

00:26:24,190 --> 00:26:31,720
I think that that is in fact in line

00:26:28,780 --> 00:26:34,420
with the zone of Python and simplicity

00:26:31,720 --> 00:26:37,450
because you know just as when you like

00:26:34,420 --> 00:26:42,490
when you ask a person how should we set

00:26:37,450 --> 00:26:45,340
up this this box they don't go and kind

00:26:42,490 --> 00:26:47,440
of write a sort of mathematical formula

00:26:45,340 --> 00:26:49,240
for how it should be if you ask just an

00:26:47,440 --> 00:26:52,059
ordinary person I mean they give you the

00:26:49,240 --> 00:26:54,070
steps you know we should install this

00:26:52,059 --> 00:26:56,350
and then we should do that actually

00:26:54,070 --> 00:26:58,300
maybe servers on a good example but but

00:26:56,350 --> 00:27:00,970
when you ask an ordinary person how do I

00:26:58,300 --> 00:27:02,290
get to the bus stop then they're not

00:27:00,970 --> 00:27:03,850
going to give you a declarative answer

00:27:02,290 --> 00:27:09,610
they're going to give you a step-by-step

00:27:03,850 --> 00:27:12,840
answer and so I think that Python itself

00:27:09,610 --> 00:27:17,290
has chosen the simpler route of an

00:27:12,840 --> 00:27:19,960
imperative programming language but

00:27:17,290 --> 00:27:22,630
where does a kind of a declarative

00:27:19,960 --> 00:27:24,280
nature come in in Python you can see it

00:27:22,630 --> 00:27:25,809
in things like list comprehensions which

00:27:24,280 --> 00:27:28,780
are quite declarative in nature and they

00:27:25,809 --> 00:27:29,260
they tie in very strongly whether with a

00:27:28,780 --> 00:27:31,780
functional

00:27:29,260 --> 00:27:36,190
approach and in ansible when you look at

00:27:31,780 --> 00:27:38,220
the actual tasks like the tasks

00:27:36,190 --> 00:27:40,510
themselves they're quite declarative way

00:27:38,220 --> 00:27:43,120
instead of like in the shell script

00:27:40,510 --> 00:27:46,300
where you have the apt-get command line

00:27:43,120 --> 00:27:49,480
you have a module where you're telling

00:27:46,300 --> 00:27:52,540
it you know the state equals absent or

00:27:49,480 --> 00:27:55,180
study cause present and you know this is

00:27:52,540 --> 00:27:59,730
the name of the package and at that much

00:27:55,180 --> 00:27:59,730
lower level I think it's declarative

00:28:03,060 --> 00:28:07,630
I've got a few kind of random machines

00:28:05,680 --> 00:28:08,950
at work that I administer because

00:28:07,630 --> 00:28:10,810
there's kind of no one else to do them

00:28:08,950 --> 00:28:13,420
on the order of like five or something

00:28:10,810 --> 00:28:15,250
like that and they don't have any kind

00:28:13,420 --> 00:28:18,130
of conflict management thing in there at

00:28:15,250 --> 00:28:19,780
all yet a lot of the tools I've seen

00:28:18,130 --> 00:28:22,000
kind of rely on building them up from

00:28:19,780 --> 00:28:24,070
scratch using that tool can I just roll

00:28:22,000 --> 00:28:25,810
ansible in over the top of my existing

00:28:24,070 --> 00:28:27,640
setup or do I need to start those

00:28:25,810 --> 00:28:30,760
machines from scratch oh you can

00:28:27,640 --> 00:28:34,120
definitely just pick some something that

00:28:30,760 --> 00:28:36,880
you want to do and where where you might

00:28:34,120 --> 00:28:39,070
have previously had a checklist of

00:28:36,880 --> 00:28:41,080
things to do or a bash script it's very

00:28:39,070 --> 00:28:44,080
easy to translate into that into a

00:28:41,080 --> 00:28:47,110
playbook which kind of goes back to what

00:28:44,080 --> 00:28:51,730
was just being said that ansible is very

00:28:47,110 --> 00:28:55,750
much it's an IT automation tool it's not

00:28:51,730 --> 00:28:57,940
here is the the formal specification for

00:28:55,750 --> 00:29:02,080
what my system should look like it's

00:28:57,940 --> 00:29:04,540
about automating things yeah and so it's

00:29:02,080 --> 00:29:06,460
very easy to to make that transition and

00:29:04,540 --> 00:29:08,140
this is where answer boards very easy to

00:29:06,460 --> 00:29:12,070
learn it's very easy to make that

00:29:08,140 --> 00:29:16,200
transition from manual steps to say

00:29:12,070 --> 00:29:18,120
scripting to an ansible playbook

00:29:16,200 --> 00:29:19,649
thanks very much for you talk I noticed

00:29:18,120 --> 00:29:23,250
that you read the readme I'd well at the

00:29:19,649 --> 00:29:24,510
end so well done with that so you talked

00:29:23,250 --> 00:29:26,220
about the Zen of Python and obviously

00:29:24,510 --> 00:29:28,260
the Zen advance of all as a consequence

00:29:26,220 --> 00:29:29,580
what issues of you encountered with it

00:29:28,260 --> 00:29:34,019
anything that you would change or

00:29:29,580 --> 00:29:35,820
everything's perfect with sorry with you

00:29:34,019 --> 00:29:38,399
and answer then all the ansible in

00:29:35,820 --> 00:29:39,929
particular any any major issues or it's

00:29:38,399 --> 00:29:47,639
all just perfect no issues on the bug

00:29:39,929 --> 00:29:49,320
tracker oh so one thing that this is

00:29:47,639 --> 00:29:52,080
actually in a sense reinforcing the

00:29:49,320 --> 00:29:54,690
point of the Zen of Python but I think

00:29:52,080 --> 00:29:56,250
that one of the things that really

00:29:54,690 --> 00:29:59,070
should have a lot more signs and

00:29:56,250 --> 00:30:01,019
warnings around it roll dependencies

00:29:59,070 --> 00:30:03,779
actually didn't talk anything about

00:30:01,019 --> 00:30:05,730
roles in the context of ants well

00:30:03,779 --> 00:30:07,590
they're sort of a step on from playbooks

00:30:05,730 --> 00:30:12,260
where you want to modular eyes things a

00:30:07,590 --> 00:30:15,000
bit our role is like a sort of reusable

00:30:12,260 --> 00:30:17,899
snippet of a playbook or something but

00:30:15,000 --> 00:30:20,399
ansible inversion like maybe 1.2 or 1.3

00:30:17,899 --> 00:30:24,149
introduced role dependencies where you

00:30:20,399 --> 00:30:25,620
can say this role requires this other

00:30:24,149 --> 00:30:27,149
role to have been run first and then in

00:30:25,620 --> 00:30:29,820
your PlayBook you just put down roll a

00:30:27,149 --> 00:30:33,179
and when you run it it goes off and runs

00:30:29,820 --> 00:30:37,139
this other prerequisite roll first

00:30:33,179 --> 00:30:40,889
before roll a and like a lot of people

00:30:37,139 --> 00:30:42,210
asking for that and I went down the

00:30:40,889 --> 00:30:45,870
route of trying to use that because it's

00:30:42,210 --> 00:30:50,010
it is the the thing that we software

00:30:45,870 --> 00:30:53,309
engineers kind of like and I had a lot

00:30:50,010 --> 00:30:56,850
of headaches with that and I actually

00:30:53,309 --> 00:30:59,490
later on I saw a post by Michael to hang

00:30:56,850 --> 00:31:00,960
himself who was saying he thinks people

00:30:59,490 --> 00:31:02,580
use these are all dependencies a lot

00:31:00,960 --> 00:31:04,500
more than they ought to and that in a

00:31:02,580 --> 00:31:07,230
lot of the consulting work they do they

00:31:04,500 --> 00:31:08,820
don't use role dependencies at all so I

00:31:07,230 --> 00:31:12,299
just think that that should be much

00:31:08,820 --> 00:31:14,250
better much more like there should be

00:31:12,299 --> 00:31:18,090
warnings about where it's appropriate to

00:31:14,250 --> 00:31:20,519
use them and where it's not being on the

00:31:18,090 --> 00:31:23,730
back of the salt talk there are obvious

00:31:20,519 --> 00:31:27,200
juxtapositions and just one it sounds to

00:31:23,730 --> 00:31:29,159
me like as well does a reasonable job of

00:31:27,200 --> 00:31:31,619
taking a sequential

00:31:29,159 --> 00:31:33,239
cereal list of instructions and wraps it

00:31:31,619 --> 00:31:35,129
up in Python makes it perhaps a little

00:31:33,239 --> 00:31:36,629
bit more expressive a little bit of

00:31:35,129 --> 00:31:40,649
abstraction but basically it's just

00:31:36,629 --> 00:31:43,349
running that sequence it felt like salts

00:31:40,649 --> 00:31:45,509
gives you more opportunity to respond to

00:31:43,349 --> 00:31:47,099
changes in state from what's happening

00:31:45,509 --> 00:31:50,820
outside for example to bring up a

00:31:47,099 --> 00:31:54,029
collection of web servers or a multi

00:31:50,820 --> 00:31:56,090
master database wait till it's up when

00:31:54,029 --> 00:31:59,070
that's up then progressed to further

00:31:56,090 --> 00:32:02,159
modifications of the system sounds like

00:31:59,070 --> 00:32:05,549
that's deemed too complex to warrant

00:32:02,159 --> 00:32:07,679
being supported by ansible so it's just

00:32:05,549 --> 00:32:10,220
my impression yeah okay yeah that's

00:32:07,679 --> 00:32:14,700
another challenging question thanks um

00:32:10,220 --> 00:32:17,849
I'll start with your first statement

00:32:14,700 --> 00:32:20,519
that it's just like running a set of

00:32:17,849 --> 00:32:22,320
steps it is a bit more than that it

00:32:20,519 --> 00:32:27,499
certainly has a strong notion of item

00:32:22,320 --> 00:32:30,059
potency if you know it knows whether

00:32:27,499 --> 00:32:31,979
something has to be run again or whether

00:32:30,059 --> 00:32:33,690
it's already configured so you can run a

00:32:31,979 --> 00:32:35,999
playbook a second time and it should go

00:32:33,690 --> 00:32:37,889
through and and say you know everything

00:32:35,999 --> 00:32:40,409
is already like this nothing has changed

00:32:37,889 --> 00:32:43,049
and on top of that you can add what are

00:32:40,409 --> 00:32:44,639
called notifiers which are like if this

00:32:43,049 --> 00:32:47,220
has changed then how to do this other

00:32:44,639 --> 00:32:48,989
thing like if I've changed my apache

00:32:47,220 --> 00:32:52,379
config then i have to restart the apache

00:32:48,989 --> 00:32:54,960
server or something like that but that

00:32:52,379 --> 00:32:57,509
kind of orchestration that you're

00:32:54,960 --> 00:33:00,239
talking about where you wait for some

00:32:57,509 --> 00:33:03,960
some service to come up and then respond

00:33:00,239 --> 00:33:06,229
to it yeah that's it's not really

00:33:03,960 --> 00:33:12,149
obvious how you would encode that

00:33:06,229 --> 00:33:14,279
announce table I was going to say it's

00:33:12,149 --> 00:33:18,090
not really obvious but you can do it and

00:33:14,279 --> 00:33:20,460
it's really quite effective when

00:33:18,090 --> 00:33:23,639
bringing up services waiting for you

00:33:20,460 --> 00:33:27,869
know import waiting for ports to open

00:33:23,639 --> 00:33:30,359
etc before continuing on so it's

00:33:27,869 --> 00:33:32,100
definitely something that you can you

00:33:30,359 --> 00:33:35,039
can research and

00:33:32,100 --> 00:33:38,610
right right yeah so that's kind of the

00:33:35,039 --> 00:33:40,980
simpler the simple way of doing it is if

00:33:38,610 --> 00:33:42,870
you need to wait for some server to come

00:33:40,980 --> 00:33:45,600
up then yeah you just there is a module

00:33:42,870 --> 00:33:47,640
called wait for you just basically

00:33:45,600 --> 00:33:49,890
stopped in your PlayBook and wait for

00:33:47,640 --> 00:33:52,260
that to happen and you might think oh

00:33:49,890 --> 00:33:53,669
but that's inefficient I could be going

00:33:52,260 --> 00:33:57,630
off and doing something else at the same

00:33:53,669 --> 00:34:00,750
time it does work over multiple servers

00:33:57,630 --> 00:34:02,370
in parallel so they will all stop you

00:34:00,750 --> 00:34:04,500
know if you're setting up 10 servers and

00:34:02,370 --> 00:34:06,210
you get to the point where you've you

00:34:04,500 --> 00:34:08,550
you're standing off the web server and

00:34:06,210 --> 00:34:10,350
then you can wait for all of them to

00:34:08,550 --> 00:34:12,869
come up and so you've still got this

00:34:10,350 --> 00:34:16,520
step-by-step notion but you can have

00:34:12,869 --> 00:34:18,830
some degree of you know that's sort of

00:34:16,520 --> 00:34:20,940
it's not really orchestration but yeah

00:34:18,830 --> 00:34:25,560
that's very effective for the sort of

00:34:20,940 --> 00:34:30,740
eighty percent cases yeah so my question

00:34:25,560 --> 00:34:35,520
was more probably to do with simplicity

00:34:30,740 --> 00:34:40,379
complexity so when you're stepping in to

00:34:35,520 --> 00:34:44,520
roll deeper into roles that crossover

00:34:40,379 --> 00:34:50,030
between creating a complex role with

00:34:44,520 --> 00:34:53,700
many steps and then creation of a module

00:34:50,030 --> 00:34:57,350
is there is there a point that you could

00:34:53,700 --> 00:35:01,470
define as the point where you move from

00:34:57,350 --> 00:35:06,480
roll into rider module to do the same

00:35:01,470 --> 00:35:07,980
function it's it's a good question

00:35:06,480 --> 00:35:09,600
because I just there were a lot of

00:35:07,980 --> 00:35:13,619
modules I would have liked to write and

00:35:09,600 --> 00:35:16,590
because of time constraints I didn't

00:35:13,619 --> 00:35:22,230
write any modules it's much easier to

00:35:16,590 --> 00:35:24,080
write a roll but i guess i would say if

00:35:22,230 --> 00:35:28,230
you think other people would find it

00:35:24,080 --> 00:35:30,300
find your module useful then you know

00:35:28,230 --> 00:35:33,359
and you have the the motivation and the

00:35:30,300 --> 00:35:36,510
time to do that then that it can be in a

00:35:33,359 --> 00:35:39,030
really useful i I guess I don't have any

00:35:36,510 --> 00:35:42,250
specific guidelines on that cross eyed

00:35:39,030 --> 00:35:44,210
the point alrighty thanks

00:35:42,250 --> 00:35:47,360
I'm afraid that's all we have time for

00:35:44,210 --> 00:35:49,630
I'm shaking swamp Todd over lunch thank

00:35:47,360 --> 00:35:49,630
you very much

00:35:59,000 --> 00:36:01,060

YouTube URL: https://www.youtube.com/watch?v=JlrkizEBjXk


