Title: Realtime websites with Django and Meteor by Tyson Clugg
Publication date: 2015-08-04
Playlist: PyCon Australia 2015
Description: 
	Create real-time websites and mobile apps that scale using Django and the Meteor JavaScript framework.  Push data changes in real-time from your servers to browsers and app users simultaneously without adding overly complex infrastructure to support the real-time updates.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:13,530 --> 00:00:20,890
have you got a timer good afternoon

00:00:17,680 --> 00:00:24,610
everyone I'll just wait all of about 10

00:00:20,890 --> 00:00:27,610
seconds for everyone to sit down hi my

00:00:24,610 --> 00:00:29,910
name's Tyson ah I'm from Melbourne crew

00:00:27,610 --> 00:00:34,060
called common code we're in abbotsford

00:00:29,910 --> 00:00:36,489
we do all sorts of cool things and I've

00:00:34,060 --> 00:00:39,340
been a bit blessed that I got the chance

00:00:36,489 --> 00:00:41,620
to work on a project that got released

00:00:39,340 --> 00:00:45,719
as open source and now I get to show you

00:00:41,620 --> 00:00:49,690
guys so we're going to talk about this

00:00:45,719 --> 00:00:51,940
so a little bit about me I support the

00:00:49,690 --> 00:00:54,070
planet using public transport and living

00:00:51,940 --> 00:00:56,649
within reasonable means and I hope you

00:00:54,070 --> 00:00:58,510
all do the same I support humanity by

00:00:56,649 --> 00:01:02,980
funding the United Nations refugee

00:00:58,510 --> 00:01:07,870
agency on to the tech side I started

00:01:02,980 --> 00:01:09,820
using postgresql back in 1999 and i've

00:01:07,870 --> 00:01:12,100
been using Jengo since working with

00:01:09,820 --> 00:01:15,460
Curtis Maloney or funky Bob one of the

00:01:12,100 --> 00:01:16,630
core contributors in January 2007 so

00:01:15,460 --> 00:01:21,640
I've been the Django game for a little

00:01:16,630 --> 00:01:24,160
while so what's this project what am I

00:01:21,640 --> 00:01:27,040
trying to do well meteor I don't know

00:01:24,160 --> 00:01:28,800
how many have heard of medial quite a

00:01:27,040 --> 00:01:32,740
few of you it's becoming quite popular

00:01:28,800 --> 00:01:34,360
it's real time and some of you go or

00:01:32,740 --> 00:01:37,480
what does that really mean we'll get to

00:01:34,360 --> 00:01:41,770
that in a minute but it's not Python hmm

00:01:37,480 --> 00:01:44,680
I quite like Python media uses MongoDB

00:01:41,770 --> 00:01:47,770
and that I really don't like we'll get

00:01:44,680 --> 00:01:49,390
to that in a minute too but it does have

00:01:47,770 --> 00:01:51,460
this cool thing called latency

00:01:49,390 --> 00:01:53,080
compensation and if you're trying to

00:01:51,460 --> 00:01:55,600
build an app or if you're trying to

00:01:53,080 --> 00:01:57,700
build a website that's nice and light as

00:01:55,600 --> 00:02:02,110
a nice user experience latency

00:01:57,700 --> 00:02:04,270
compensation is awesome midi or can be

00:02:02,110 --> 00:02:07,000
used to write iOS and Android apps as

00:02:04,270 --> 00:02:10,959
well it's a nice feature so you can go

00:02:07,000 --> 00:02:12,970
and deploy your code and you know send

00:02:10,959 --> 00:02:16,840
off the App Store send it off to google

00:02:12,970 --> 00:02:18,160
play store that's pretty cool food all

00:02:16,840 --> 00:02:21,130
right what don't I like about scheme

00:02:18,160 --> 00:02:23,519
Willis well there's no schemer that

00:02:21,130 --> 00:02:27,069
means no consistency resulting in but

00:02:23,519 --> 00:02:30,310
bugs are bad right no referential

00:02:27,069 --> 00:02:33,459
integrity results in more bugs that

00:02:30,310 --> 00:02:34,959
really sucks no transactions across

00:02:33,459 --> 00:02:37,420
collections I'm talking specifically

00:02:34,959 --> 00:02:40,900
about MongoDB here which results in even

00:02:37,420 --> 00:02:43,299
more bugs so why would you choose to use

00:02:40,900 --> 00:02:44,829
something like media if you're almost

00:02:43,299 --> 00:02:48,790
guaranteed you're going to hit one of

00:02:44,829 --> 00:02:51,340
these bugs well postgresql provide

00:02:48,790 --> 00:02:56,470
schemas anyway so what was the point of

00:02:51,340 --> 00:03:00,459
using MongoDB in the first place so

00:02:56,470 --> 00:03:06,090
people say I'll bet mom goes fast well

00:03:00,459 --> 00:03:11,700
no it's not and it uses more space and

00:03:06,090 --> 00:03:15,310
well you get the idea postgresql is king

00:03:11,700 --> 00:03:18,519
meteor what is it up here we get a nice

00:03:15,310 --> 00:03:20,500
little diagram that shows us essentially

00:03:18,519 --> 00:03:25,180
it's split into two halves client and

00:03:20,500 --> 00:03:27,940
server and it uses this DDP protocol to

00:03:25,180 --> 00:03:30,669
have the to communicate so you have your

00:03:27,940 --> 00:03:35,349
data store recently SQL and other

00:03:30,669 --> 00:03:37,540
sources were added to meteor so this

00:03:35,349 --> 00:03:40,090
diagram has been updated but when I

00:03:37,540 --> 00:03:44,829
started this back in February it was

00:03:40,090 --> 00:03:46,900
really only having MongoDB so you've got

00:03:44,829 --> 00:03:51,060
collections with documents inside your

00:03:46,900 --> 00:03:56,139
 data store and you've got a way of

00:03:51,060 --> 00:03:59,470
publishing information and then a client

00:03:56,139 --> 00:04:02,019
data cache that resides you know in

00:03:59,470 --> 00:04:06,430
JavaScript on the browser or in your app

00:04:02,019 --> 00:04:09,849
that has a local copy of data that can

00:04:06,430 --> 00:04:11,199
be queried by your JavaScript code and

00:04:09,849 --> 00:04:13,000
then you've got templating libraries and

00:04:11,199 --> 00:04:15,699
all sorts of things on top of that that

00:04:13,000 --> 00:04:17,560
handle the dynamic nature of your data

00:04:15,699 --> 00:04:19,060
and saying all right if the new objects

00:04:17,560 --> 00:04:20,470
if new document gets added to the

00:04:19,060 --> 00:04:24,550
collection then it needs to get rendered

00:04:20,470 --> 00:04:26,560
for example and then we've got all of

00:04:24,550 --> 00:04:29,080
your component logic in here for the

00:04:26,560 --> 00:04:30,520
front end and then you've got you know

00:04:29,080 --> 00:04:32,349
how are you actually deploying it as a

00:04:30,520 --> 00:04:36,610
website or perhaps you're deploying to

00:04:32,349 --> 00:04:38,620
mobile so you know I

00:04:36,610 --> 00:04:40,120
like what media does that on the client

00:04:38,620 --> 00:04:43,629
side but on the server side well it

00:04:40,120 --> 00:04:45,939
really sucks django d DP this is what

00:04:43,629 --> 00:04:48,610
we're talking about today lets you use

00:04:45,939 --> 00:04:53,889
Django below the line between client and

00:04:48,610 --> 00:04:57,330
server this is awesome so the basics it

00:04:53,889 --> 00:04:59,949
implements a DDP server like media does

00:04:57,330 --> 00:05:02,530
but it replaces the media server so no

00:04:59,949 --> 00:05:08,199
longer running node J s on your server

00:05:02,530 --> 00:05:10,360
hooray we're back into Python it allows

00:05:08,199 --> 00:05:15,279
clients the browser's or apps to

00:05:10,360 --> 00:05:17,949
subscribe to publications and it pushes

00:05:15,279 --> 00:05:21,129
Django model updates in real time via

00:05:17,949 --> 00:05:23,259
web sockets ooh real time web sockets

00:05:21,129 --> 00:05:27,340
but hang on a second Django doesn't do

00:05:23,259 --> 00:05:29,199
that does it latency compensated RPC

00:05:27,340 --> 00:05:33,789
method calls and responses will touch on

00:05:29,199 --> 00:05:35,979
latency compensation shortly too so it's

00:05:33,789 --> 00:05:39,580
got some limitations at the moment it's

00:05:35,979 --> 00:05:41,919
relatively immature the live query work

00:05:39,580 --> 00:05:47,979
in particular is work in progress it

00:05:41,919 --> 00:05:50,319
works but it's in flux it's postgresql

00:05:47,979 --> 00:05:52,900
only it's because of one of the

00:05:50,319 --> 00:05:56,830
technology decisions that I made and

00:05:52,900 --> 00:05:59,620
this is a good thing really it relies on

00:05:56,830 --> 00:06:02,550
django signals there's nothing stopping

00:05:59,620 --> 00:06:05,589
you from putting support in to use

00:06:02,550 --> 00:06:07,300
postgresql triggers if you want to avoid

00:06:05,589 --> 00:06:10,300
that or possibly doing some other things

00:06:07,300 --> 00:06:13,719
but for the moment it's a limitation

00:06:10,300 --> 00:06:15,520
django d DP has it used to be that it

00:06:13,719 --> 00:06:20,889
didn't serve medial client files now it

00:06:15,520 --> 00:06:23,800
does this is pretty cool so real time

00:06:20,889 --> 00:06:26,529
and latency compensation okay so a

00:06:23,800 --> 00:06:28,870
client view will update we're talking

00:06:26,529 --> 00:06:30,819
about the browser side within

00:06:28,870 --> 00:06:32,500
milliseconds after data is updated and

00:06:30,819 --> 00:06:34,569
subsequently dispatched from the server

00:06:32,500 --> 00:06:36,879
oh that's the whole point of this right

00:06:34,569 --> 00:06:39,849
we want it to be really fast we don't

00:06:36,879 --> 00:06:42,159
want to have to poll every 10 seconds

00:06:39,849 --> 00:06:44,740
and then figure out I hang on you know

00:06:42,159 --> 00:06:46,539
the data changed no eight seconds ago

00:06:44,740 --> 00:06:50,130
we're kind of getting this a bit late

00:06:46,539 --> 00:06:50,130
needs to be really quick

00:06:50,230 --> 00:06:55,010
immediately the data will be well the

00:06:53,480 --> 00:06:57,590
quiet view will be updated as client

00:06:55,010 --> 00:07:00,410
interactions take place when I say

00:06:57,590 --> 00:07:03,830
immediately I mean before the data is

00:07:00,410 --> 00:07:05,450
even sent off to the server this has

00:07:03,830 --> 00:07:08,210
some huge benefits and you might be

00:07:05,450 --> 00:07:09,950
wondering or hang on a second what if

00:07:08,210 --> 00:07:12,200
the server doesn't like what you're

00:07:09,950 --> 00:07:16,490
trying to do well the short answer is

00:07:12,200 --> 00:07:18,860
that meaty or the client-side will just

00:07:16,490 --> 00:07:21,140
roll back your views day if it sees that

00:07:18,860 --> 00:07:27,230
the update to the server came back with

00:07:21,140 --> 00:07:30,380
a different response so Python side how

00:07:27,230 --> 00:07:32,110
do we make Python do these neat tricks

00:07:30,380 --> 00:07:35,660
make it fast and all the other things

00:07:32,110 --> 00:07:38,060
well we use G event for concurrency G

00:07:35,660 --> 00:07:39,980
events pretty cool and now it's got

00:07:38,060 --> 00:07:41,690
Python 3 support so it sounds like I've

00:07:39,980 --> 00:07:45,950
got some work to do in making sure that

00:07:41,690 --> 00:07:48,740
django d DP supports Python 3 it uses a

00:07:45,950 --> 00:07:51,160
fast event loop based on Libby V it

00:07:48,740 --> 00:07:53,990
monkey patches the standard library to

00:07:51,160 --> 00:07:56,600
change all of the blocking calls for

00:07:53,990 --> 00:08:00,080
example a DNS lookup or reading from a

00:07:56,600 --> 00:08:03,410
file to as instead make them non

00:08:00,080 --> 00:08:06,800
blocking and return back to the lib EV

00:08:03,410 --> 00:08:09,710
event loop which is pretty cool so you

00:08:06,800 --> 00:08:14,300
get lightweight execution units based on

00:08:09,710 --> 00:08:18,200
Greenland and green threads no callbacks

00:08:14,300 --> 00:08:20,030
promises or other fluff I mean twisted

00:08:18,200 --> 00:08:22,250
for example when you want to write

00:08:20,030 --> 00:08:24,140
callbacks you've got this extra layer in

00:08:22,250 --> 00:08:26,300
between you can't just write the Python

00:08:24,140 --> 00:08:28,850
code you used to all right you have to

00:08:26,300 --> 00:08:30,140
go and use callbacks well that means

00:08:28,850 --> 00:08:32,270
that you're going to have to write a new

00:08:30,140 --> 00:08:34,550
function declaration and other things

00:08:32,270 --> 00:08:36,140
and you're essentially writing more red

00:08:34,550 --> 00:08:39,040
code I don't know how many of you are

00:08:36,140 --> 00:08:41,420
aware of what red coat and green code is

00:08:39,040 --> 00:08:43,880
green code is the code that your

00:08:41,420 --> 00:08:46,730
application absolutely has to run to do

00:08:43,880 --> 00:08:50,840
the work it needs to do red code is all

00:08:46,730 --> 00:08:52,550
of the extra baggage to make your code

00:08:50,840 --> 00:08:55,610
work with the framework that you're

00:08:52,550 --> 00:08:58,070
trying to use all right I don't like red

00:08:55,610 --> 00:09:01,280
code the API is the desert that are

00:08:58,070 --> 00:09:02,540
designed in django d DP promote a lots

00:09:01,280 --> 00:09:07,670
of green code

00:09:02,540 --> 00:09:13,220
much read code at all and did I mention

00:09:07,670 --> 00:09:16,210
it's really fast well I thought I'd make

00:09:13,220 --> 00:09:21,320
sure that the DDP implementations of

00:09:16,210 --> 00:09:23,870
meets with DDPs test suite that someone

00:09:21,320 --> 00:09:27,410
has published online so testing a gate

00:09:23,870 --> 00:09:31,040
some people we lost a wheel there we go

00:09:27,410 --> 00:09:33,140
testing against medial I managed to see

00:09:31,040 --> 00:09:35,540
that their service running on nodejs on

00:09:33,140 --> 00:09:38,420
my local machine which is a pretty fast

00:09:35,540 --> 00:09:41,060
machine took one point 12 seconds and

00:09:38,420 --> 00:09:47,120
then Jing that was the average over

00:09:41,060 --> 00:09:49,250
three runs and then django d DP 1.1

00:09:47,120 --> 00:09:53,890
seconds so hang on a second wasn't no

00:09:49,250 --> 00:09:58,490
jus meant to be really fast oh well so

00:09:53,890 --> 00:10:01,940
how am I routing messages I'm using

00:09:58,490 --> 00:10:03,910
asynchronous notification it's already

00:10:01,940 --> 00:10:06,980
part of the Django postgresql stack

00:10:03,910 --> 00:10:09,590
because postgres has it built in by

00:10:06,980 --> 00:10:12,320
default and Django has support for

00:10:09,590 --> 00:10:16,970
postgres and more importantly for psycho

00:10:12,320 --> 00:10:20,990
PG 2 which supports green thread you

00:10:16,970 --> 00:10:24,710
know it supports jus pen unless of

00:10:20,990 --> 00:10:26,510
course you're a MySQL weenie but here's

00:10:24,710 --> 00:10:30,490
a really cool thing so no new services

00:10:26,510 --> 00:10:34,630
our infrastructure to be deployed what

00:10:30,490 --> 00:10:37,610
did you hear that no new infrastructure

00:10:34,630 --> 00:10:41,470
so many WebSocket applications these

00:10:37,610 --> 00:10:45,230
days require something like cross bar or

00:10:41,470 --> 00:10:47,710
Redis quite frankly I'm sick of it we

00:10:45,230 --> 00:10:50,690
don't need it you're adding all new

00:10:47,710 --> 00:10:53,510
infrastructure when you've already got a

00:10:50,690 --> 00:10:57,520
back end that is across all of your

00:10:53,510 --> 00:11:00,440
front end web servers and it's postgres

00:10:57,520 --> 00:11:02,030
postgres is your unified connection

00:11:00,440 --> 00:11:06,260
between all of your front-end web

00:11:02,030 --> 00:11:11,300
servers so we're just using Django and

00:11:06,260 --> 00:11:15,500
postgresql array so how do we do it we

00:11:11,300 --> 00:11:16,430
use listen and notify its extended SQL

00:11:15,500 --> 00:11:17,839
syntax

00:11:16,430 --> 00:11:20,750
it seems to be pretty unique to

00:11:17,839 --> 00:11:25,670
postgresql I haven't seen the equivalent

00:11:20,750 --> 00:11:27,770
in mysql i believe that microsoft sequel

00:11:25,670 --> 00:11:30,230
server has something like it and oracle

00:11:27,770 --> 00:11:33,410
may have something like it too but not

00:11:30,230 --> 00:11:35,720
many other database engines have it I've

00:11:33,410 --> 00:11:39,320
been speaking with Facebook and

00:11:35,720 --> 00:11:41,779
supposedly they've got some open source

00:11:39,320 --> 00:11:44,839
published version of MySQL that does

00:11:41,779 --> 00:11:47,029
support asynchronous connections I don't

00:11:44,839 --> 00:11:48,910
know if they've got the equivalent so

00:11:47,029 --> 00:11:52,339
how does the postgres won't work anyway

00:11:48,910 --> 00:11:54,950
what's really simple you notify on a

00:11:52,339 --> 00:11:56,959
channel which is just a string and with

00:11:54,950 --> 00:12:02,450
an optional payload up to 8 kilobyte of

00:11:56,959 --> 00:12:05,180
just string data so then anyone who has

00:12:02,450 --> 00:12:07,760
done listen on that particular channel

00:12:05,180 --> 00:12:12,890
will then get this asynchronous hey

00:12:07,760 --> 00:12:14,779
you've got some data nice and easy so

00:12:12,890 --> 00:12:16,760
the beauty of notify there's some other

00:12:14,779 --> 00:12:21,050
cool things about it it works with

00:12:16,760 --> 00:12:23,450
transactions so notifications are only

00:12:21,050 --> 00:12:26,330
sent after your transaction is

00:12:23,450 --> 00:12:29,150
successfully committed hey let's go and

00:12:26,330 --> 00:12:34,279
make this change and did it all go ok

00:12:29,150 --> 00:12:36,260
good if there is a problem and you have

00:12:34,279 --> 00:12:39,920
to roll back the notifications are

00:12:36,260 --> 00:12:41,959
discarded which means you don't have to

00:12:39,920 --> 00:12:44,060
do any gymnastics to handle error

00:12:41,959 --> 00:12:46,160
conditions you don't have to go and

00:12:44,060 --> 00:12:51,820
publisher whoops sorry didn't mean to

00:12:46,160 --> 00:12:55,010
send that message afterwards demo time

00:12:51,820 --> 00:12:57,279
there was gonna be fun can take all

00:12:55,010 --> 00:12:57,279
right

00:12:58,910 --> 00:13:11,990
so what we've got we have a very very

00:13:07,950 --> 00:13:16,920
simple little app I'll show you the code

00:13:11,990 --> 00:13:21,120
so front end we've got a few things in

00:13:16,920 --> 00:13:26,070
here importantly this is actually using

00:13:21,120 --> 00:13:28,800
react as well so let's see what we've

00:13:26,070 --> 00:13:32,760
got might just reduce the font size of

00:13:28,800 --> 00:13:40,200
it so you can see it better that's de

00:13:32,760 --> 00:13:43,470
leche ball at the back yep react only

00:13:40,200 --> 00:13:45,270
very recently added support for using I

00:13:43,470 --> 00:13:48,680
sorry media or just added support for

00:13:45,270 --> 00:13:53,460
using react and here we have a react

00:13:48,680 --> 00:13:56,040
class with the medial mixing and that

00:13:53,460 --> 00:13:58,710
lets us use this get media data thing

00:13:56,040 --> 00:14:02,810
and say alright I want to subscribe to

00:13:58,710 --> 00:14:05,010
presentations this is on client side and

00:14:02,810 --> 00:14:06,150
I'm actually going to assign it to a

00:14:05,010 --> 00:14:07,800
variable that I can go and play with

00:14:06,150 --> 00:14:11,420
later because I like to debug things

00:14:07,800 --> 00:14:14,700
otherwise that scoping is all wrong and

00:14:11,420 --> 00:14:20,250
return a dictionary with presentations

00:14:14,700 --> 00:14:26,880
set to all of the presentations sorted

00:14:20,250 --> 00:14:30,480
by title when I render then I'm going to

00:14:26,880 --> 00:14:32,340
render a set of list items the

00:14:30,480 --> 00:14:37,710
presentation night or the presentation

00:14:32,340 --> 00:14:39,690
title and subtitle and that's

00:14:37,710 --> 00:14:44,610
essentially what's doing so that's the

00:14:39,690 --> 00:14:47,610
client site and what we're going to do

00:14:44,610 --> 00:14:49,950
now is show you the back end so I've got

00:14:47,610 --> 00:14:51,780
some way to complex Django models here I

00:14:49,950 --> 00:14:53,820
was hoping that I've actually be able to

00:14:51,780 --> 00:14:58,110
present this using this particular tool

00:14:53,820 --> 00:15:00,960
that obviously hasn't happened but here

00:14:58,110 --> 00:15:07,670
we go so we've got presentation it's got

00:15:00,960 --> 00:15:07,670
a title and subtitle and now

00:15:08,060 --> 00:15:15,600
DDP it looks a bit like the admin with

00:15:12,480 --> 00:15:18,439
autodiscover so you go and register

00:15:15,600 --> 00:15:22,319
which things you want to be seen by your

00:15:18,439 --> 00:15:24,509
DDP connection and I've registered a

00:15:22,319 --> 00:15:26,730
collection and I've registered a

00:15:24,509 --> 00:15:29,519
publication a collection is essentially

00:15:26,730 --> 00:15:31,910
a one to one on a model and I can see

00:15:29,519 --> 00:15:34,079
there that you know there is my

00:15:31,910 --> 00:15:36,269
association between the presentation

00:15:34,079 --> 00:15:40,980
collection and which model it represents

00:15:36,269 --> 00:15:43,529
and a publication which says all right

00:15:40,980 --> 00:15:46,110
given that you want to subscribe to

00:15:43,529 --> 00:15:47,430
something how do I go and get them so

00:15:46,110 --> 00:15:49,050
here's a really simple example it says

00:15:47,430 --> 00:15:51,990
just give me all the presentations I

00:15:49,050 --> 00:15:56,999
don't care obviously you can put some

00:15:51,990 --> 00:16:00,269
filters in there as well so now assuming

00:15:56,999 --> 00:16:06,720
it's running it is indeed let's go back

00:16:00,269 --> 00:16:09,709
to hear I'm going to split window now

00:16:06,720 --> 00:16:14,009
the messages that we've seen here

00:16:09,709 --> 00:16:16,079
websocket frames so web sockets for

00:16:14,009 --> 00:16:18,959
those that don't know send frames

00:16:16,079 --> 00:16:23,610
between client and server and server and

00:16:18,959 --> 00:16:27,180
client and those frames for medial are

00:16:23,610 --> 00:16:29,370
in an extended JSON format so it's JSON

00:16:27,180 --> 00:16:37,500
format but with support for date times

00:16:29,370 --> 00:16:40,800
which is really nice and don't know if

00:16:37,500 --> 00:16:43,110
you noticed Jengo DDP also supports SSL

00:16:40,800 --> 00:16:45,120
I've got a self-signed suit here so it's

00:16:43,110 --> 00:16:49,199
throwing lots of warnings but there it

00:16:45,120 --> 00:16:54,139
is running with ssl out of the box let's

00:16:49,199 --> 00:17:05,760
add a presentation so jingo DDP is or

00:16:54,139 --> 00:17:07,169
some subtitle so is common code common

00:17:05,760 --> 00:17:09,569
coder and awesome crew they host the

00:17:07,169 --> 00:17:12,299
milk django meetings in melbourne and

00:17:09,569 --> 00:17:16,500
they do some really cool stuff so i'm

00:17:12,299 --> 00:17:19,679
now going to save it there we go I don't

00:17:16,500 --> 00:17:20,750
know if any of you notice but it was so

00:17:19,679 --> 00:17:23,810
quick

00:17:20,750 --> 00:17:28,480
that the medial side over here on the

00:17:23,810 --> 00:17:34,520
Left actually returned quicker than the

00:17:28,480 --> 00:17:37,810
admin on the right there's lots of good

00:17:34,520 --> 00:17:40,640
reasons for that actually so Django to

00:17:37,810 --> 00:17:41,960
render this view had to go and do

00:17:40,640 --> 00:17:43,430
database queries and things and

00:17:41,960 --> 00:17:46,010
essentially go and get all of the data

00:17:43,430 --> 00:17:48,470
again but of course at the time that the

00:17:46,010 --> 00:17:51,800
data was being saved Jenga already had

00:17:48,470 --> 00:17:54,410
the data at hand at the time of the post

00:17:51,800 --> 00:17:57,410
so of course it does a post redirect and

00:17:54,410 --> 00:18:00,200
get at the time that the post occurs if

00:17:57,410 --> 00:18:02,900
you've got all the data at hand you can

00:18:00,200 --> 00:18:05,150
then send that notify signal to your

00:18:02,900 --> 00:18:07,430
database all of your web front end

00:18:05,150 --> 00:18:09,170
servers can then receive their

00:18:07,430 --> 00:18:12,290
information and then just dispatch it

00:18:09,170 --> 00:18:14,870
via a WebSocket connection and then of

00:18:12,290 --> 00:18:17,630
course you get the redirect and it goes

00:18:14,870 --> 00:18:19,040
I hang on we've got to go over here so

00:18:17,630 --> 00:18:20,900
that's the response coming back and then

00:18:19,040 --> 00:18:22,490
of course it does it get and then goes

00:18:20,900 --> 00:18:24,110
oh hang on a second I don't know

00:18:22,490 --> 00:18:26,540
anything about the context of this

00:18:24,110 --> 00:18:28,910
request so I'm going to go and get all

00:18:26,540 --> 00:18:31,880
the information again so it does a fresh

00:18:28,910 --> 00:18:35,030
database query that really sucks for

00:18:31,880 --> 00:18:37,880
Django breaking out of the request

00:18:35,030 --> 00:18:41,900
response cycle and using WebSockets has

00:18:37,880 --> 00:18:44,120
allowed us to go way quicker in fact now

00:18:41,900 --> 00:18:46,550
that that data is already there on the

00:18:44,120 --> 00:18:49,370
client side if I weren't at another one

00:18:46,550 --> 00:18:51,530
of course does it need to go and query

00:18:49,370 --> 00:18:54,440
from the data base I would make another

00:18:51,530 --> 00:18:56,500
request to get that first information

00:18:54,440 --> 00:19:00,190
again no it's already there it's cached

00:18:56,500 --> 00:19:01,940
so it makes things really fast I

00:19:00,190 --> 00:19:03,620
mentioned I like to take public

00:19:01,940 --> 00:19:05,990
transport it's because I care for the

00:19:03,620 --> 00:19:09,580
environment this sort of thing means

00:19:05,990 --> 00:19:12,740
that your server is under less load

00:19:09,580 --> 00:19:14,450
because rather than every client saying

00:19:12,740 --> 00:19:17,770
hey give me the updated copy of all of

00:19:14,450 --> 00:19:20,090
the data it's only been emitted once

00:19:17,770 --> 00:19:22,880
which means that your servers are under

00:19:20,090 --> 00:19:25,010
less load which means you can use less

00:19:22,880 --> 00:19:28,280
infrastructure which means we're using

00:19:25,010 --> 00:19:30,940
less power and manufacturing less

00:19:28,280 --> 00:19:34,489
computers this is great

00:19:30,940 --> 00:19:36,980
so latency compensation this also helps

00:19:34,489 --> 00:19:42,320
in a great deal as well so if I were to

00:19:36,980 --> 00:19:47,480
put in a method that did some updates

00:19:42,320 --> 00:19:50,960
from the client we would have then got

00:19:47,480 --> 00:19:53,749
the ability to get instant feedback like

00:19:50,960 --> 00:19:55,909
the client will go and insert into its

00:19:53,749 --> 00:19:58,220
local cached version the copy of the

00:19:55,909 --> 00:20:00,350
data that you went to change all right

00:19:58,220 --> 00:20:03,139
it will go and update the view

00:20:00,350 --> 00:20:04,429
immediately you get snappy response and

00:20:03,139 --> 00:20:06,649
then it can go after your back-end

00:20:04,429 --> 00:20:09,499
server and if your back-end server takes

00:20:06,649 --> 00:20:13,070
three seconds to respond it doesn't

00:20:09,499 --> 00:20:15,200
really matter I you've got three seconds

00:20:13,070 --> 00:20:18,649
and you then just dispatched it to all

00:20:15,200 --> 00:20:20,899
of your clients that's really cool this

00:20:18,649 --> 00:20:23,299
scales out because your front end

00:20:20,899 --> 00:20:25,190
servers whichever front end server it is

00:20:23,299 --> 00:20:29,359
that happens to receive the request is

00:20:25,190 --> 00:20:32,840
going to do the processing locally omit

00:20:29,359 --> 00:20:36,200
the notify message commit the

00:20:32,840 --> 00:20:38,779
transaction and then as the transaction

00:20:36,200 --> 00:20:40,909
is committed the notification we've

00:20:38,779 --> 00:20:43,730
pushed out to all of the other front end

00:20:40,909 --> 00:20:46,489
servers who will then update all the

00:20:43,730 --> 00:20:50,539
clients the notification include all of

00:20:46,489 --> 00:20:51,919
the data they need to push the data out

00:20:50,539 --> 00:20:55,009
they don't have to do another data base

00:20:51,919 --> 00:20:56,629
hit to go and say oh I saw that notify

00:20:55,009 --> 00:21:01,759
now I need to go and get the data it was

00:20:56,629 --> 00:21:03,559
all in that at kilobyte packet so we've

00:21:01,759 --> 00:21:07,129
just saved the environment a little bit

00:21:03,559 --> 00:21:09,970
by having a lot less demand on our

00:21:07,129 --> 00:21:13,480
infrastructure to get timely response

00:21:09,970 --> 00:21:13,480
this is really cool

00:21:26,830 --> 00:21:32,330
don't know how we're going for time I

00:21:29,150 --> 00:21:34,100
can't see a timer in front of me but i

00:21:32,330 --> 00:21:35,420
suppose i can let you go early for

00:21:34,100 --> 00:21:39,080
afternoon tea and you can get first

00:21:35,420 --> 00:21:40,490
picks key learnings from Ed or the

00:21:39,080 --> 00:21:42,140
synchronized document idea that they've

00:21:40,490 --> 00:21:44,690
got is awesome because it allows for

00:21:42,140 --> 00:21:46,100
latency compensation latency

00:21:44,690 --> 00:21:49,460
compensation is we've seen is really

00:21:46,100 --> 00:21:52,429
awesome midi or password hashing sucked

00:21:49,460 --> 00:21:55,370
I've addressed it by releasing a package

00:21:52,429 --> 00:21:57,140
I'm trying to work with the medial

00:21:55,370 --> 00:22:00,130
community to try and get their system

00:21:57,140 --> 00:22:03,320
updated essentially they tried to use

00:22:00,130 --> 00:22:05,630
bit crypt and then sort of stopped using

00:22:03,320 --> 00:22:08,360
it and now essentially they're just

00:22:05,630 --> 00:22:10,370
doing an sha of a password and every

00:22:08,360 --> 00:22:12,200
time you update the hash mechanism on

00:22:10,370 --> 00:22:14,500
the server they have to update the

00:22:12,200 --> 00:22:17,300
client and all sort of funny things so

00:22:14,500 --> 00:22:21,950
don't do that just use account secure

00:22:17,300 --> 00:22:23,630
it'll work and meat-eor helps you shoot

00:22:21,950 --> 00:22:25,490
yourself in the foot it defaults to

00:22:23,630 --> 00:22:29,030
insecure because it all it publishes

00:22:25,490 --> 00:22:32,260
absolutely everything and it lets

00:22:29,030 --> 00:22:36,050
everyone modify everything by default

00:22:32,260 --> 00:22:37,880
that really sucks if you see any media

00:22:36,050 --> 00:22:39,620
laps you can probably go and have a poke

00:22:37,880 --> 00:22:43,850
around and see what's going on django d

00:22:39,620 --> 00:22:47,030
DP is not doing that of course it's very

00:22:43,850 --> 00:22:49,100
explicit about things key learnings

00:22:47,030 --> 00:22:51,020
about python and django so spending a

00:22:49,100 --> 00:22:53,900
bit of time in the media world has

00:22:51,020 --> 00:22:56,360
taught me a couple of things WebSockets

00:22:53,900 --> 00:22:59,090
support in Django is absolutely woeful

00:22:56,360 --> 00:23:01,940
i'm using g event WebSocket and

00:22:59,090 --> 00:23:04,400
essentially sidestepping django there is

00:23:01,940 --> 00:23:06,470
some work afoot on breaking out of the

00:23:04,400 --> 00:23:10,910
request response cycle using channels

00:23:06,470 --> 00:23:13,670
that looks really promising so I welcome

00:23:10,910 --> 00:23:16,880
the chance to use that the channels

00:23:13,670 --> 00:23:20,030
implementation they've set some lofty

00:23:16,880 --> 00:23:23,559
goals of essentially saying to support

00:23:20,030 --> 00:23:25,190
Jengo channels your back-end

00:23:23,559 --> 00:23:27,830
notification system whether it be

00:23:25,190 --> 00:23:30,260
crossbar io or otherwise needs to

00:23:27,830 --> 00:23:31,810
support different channel names and up

00:23:30,260 --> 00:23:34,390
to five megabytes eh

00:23:31,810 --> 00:23:37,050
mode so django d DP might end up having

00:23:34,390 --> 00:23:43,870
to resort to dumping data into a table

00:23:37,050 --> 00:23:45,820
to get that five megabytes in and adding

00:23:43,870 --> 00:23:47,500
packages to django projects sucks

00:23:45,820 --> 00:23:50,950
because there's nothing like medial add

00:23:47,500 --> 00:23:54,670
food or medial add tyson clogged colon

00:23:50,950 --> 00:23:57,730
accounts hyphen secure perhaps we can

00:23:54,670 --> 00:23:59,740
work towards improving the ecosystem

00:23:57,730 --> 00:24:02,860
somewhat it does make it very easy for

00:23:59,740 --> 00:24:06,720
new developers to go and you know plug

00:24:02,860 --> 00:24:11,470
in new components into their system

00:24:06,720 --> 00:24:14,320
acknowledgments meerkat they've just had

00:24:11,470 --> 00:24:19,840
their piece of software released

00:24:14,320 --> 00:24:21,940
yesterday that clip MVP and they've

00:24:19,840 --> 00:24:23,410
essentially funded this work and we're

00:24:21,940 --> 00:24:28,090
very thankful for letting them release

00:24:23,410 --> 00:24:30,310
this is open source who else David bills

00:24:28,090 --> 00:24:33,580
expert guidance on how dead EP works in

00:24:30,310 --> 00:24:35,110
medial Brenton cleveland for discussions

00:24:33,580 --> 00:24:38,110
on the security model for publications

00:24:35,110 --> 00:24:42,340
and mohammed tenish for the DDP test

00:24:38,110 --> 00:24:45,160
suite and Darryl at the frontier is the

00:24:42,340 --> 00:24:47,230
director of common code for essentially

00:24:45,160 --> 00:24:50,050
providing the motivation and the support

00:24:47,230 --> 00:24:52,570
to let this happen as well common codes

00:24:50,050 --> 00:24:54,970
an awesome place to work will support

00:24:52,570 --> 00:24:56,560
you in doing this sort of thing if you

00:24:54,970 --> 00:25:00,100
are in Melbourne come and check us out

00:24:56,560 --> 00:25:10,840
we host the milk Jengo meetings question

00:25:00,100 --> 00:25:13,750
time hello um question so say you have

00:25:10,840 --> 00:25:18,190
multiple servers each running django d

00:25:13,750 --> 00:25:20,520
DP and client a is connected to survey

00:25:18,190 --> 00:25:24,480
and client be is connected to server be

00:25:20,520 --> 00:25:27,430
my understanding of the django arm

00:25:24,480 --> 00:25:29,500
signals signals is that it actually

00:25:27,430 --> 00:25:33,250
happens in process and it happens on the

00:25:29,500 --> 00:25:36,330
server so if client if client a inclined

00:25:33,250 --> 00:25:40,300
be with the set with the same server are

00:25:36,330 --> 00:25:42,430
doing viewing the same page and in you

00:25:40,300 --> 00:25:44,380
update it and then that sense that will

00:25:42,430 --> 00:25:45,610
client be actually get the notification

00:25:44,380 --> 00:25:46,720
because it won't know

00:25:45,610 --> 00:25:49,210
all of the clients are actually

00:25:46,720 --> 00:25:52,059
connected to it through through server

00:25:49,210 --> 00:25:54,429
so the signals are only used for the pre

00:25:52,059 --> 00:25:57,850
save and post save on the model which

00:25:54,429 --> 00:26:01,299
then gets translated a post save into

00:25:57,850 --> 00:26:03,250
the notifier call which gets pushed all

00:26:01,299 --> 00:26:07,030
the way back out to the database and

00:26:03,250 --> 00:26:10,150
then comes back in so that you then see

00:26:07,030 --> 00:26:13,179
the notification and they all of the

00:26:10,150 --> 00:26:15,970
servers react from the notification

00:26:13,179 --> 00:26:20,169
coming in right so there's three

00:26:15,970 --> 00:26:22,870
Donnelly skills so it will be a has

00:26:20,169 --> 00:26:26,320
signal for pre save and post a post save

00:26:22,870 --> 00:26:28,299
occurs yep notify happens yep not that's

00:26:26,320 --> 00:26:30,910
as much as django d DP needs to do and

00:26:28,299 --> 00:26:32,559
in fact you can plug django d DP in just

00:26:30,910 --> 00:26:34,690
using that alone you don't have to do

00:26:32,559 --> 00:26:38,290
the web sockets you can do that much and

00:26:34,690 --> 00:26:41,559
then say alright we're going to use that

00:26:38,290 --> 00:26:44,049
for our you know big django d DP like

00:26:41,559 --> 00:26:46,690
our main django project and not use g

00:26:44,049 --> 00:26:49,750
event and web sockets in that thing and

00:26:46,690 --> 00:26:52,570
then connect the same database your new

00:26:49,750 --> 00:26:55,450
django d DP project and have it do the

00:26:52,570 --> 00:26:57,970
special stuff so you don't actually have

00:26:55,450 --> 00:27:00,309
to do much if you can just support the

00:26:57,970 --> 00:27:02,320
signals in your existing django app then

00:27:00,309 --> 00:27:04,540
you can leave that essentially unchanged

00:27:02,320 --> 00:27:06,400
you put django d DP into the installed

00:27:04,540 --> 00:27:08,770
apps and that's it it'll start emitting

00:27:06,400 --> 00:27:10,360
those notify events for you and then of

00:27:08,770 --> 00:27:12,910
course yeah when you've got something

00:27:10,360 --> 00:27:14,740
listening for naked DDP set for itself

00:27:12,910 --> 00:27:17,790
then it will be able to do the

00:27:14,740 --> 00:27:20,260
publications and such for you cool

00:27:17,790 --> 00:27:23,110
thanks Greg talk and is there any

00:27:20,260 --> 00:27:25,540
already any front-end editing part

00:27:23,110 --> 00:27:28,750
integrated that you don't have to reload

00:27:25,540 --> 00:27:32,380
the page on the right side so media has

00:27:28,750 --> 00:27:35,799
what they call hot code push and django

00:27:32,380 --> 00:27:37,360
d DP doesn't support that yet there's no

00:27:35,799 --> 00:27:39,370
particular reason why we couldn't accept

00:27:37,360 --> 00:27:42,220
that I've been focused on production

00:27:39,370 --> 00:27:44,679
deployments in which case there hasn't

00:27:42,220 --> 00:27:47,500
necessarily been the need for it but

00:27:44,679 --> 00:27:51,490
certainly pull requests are welcome i

00:27:47,500 --> 00:27:54,610
love to see a separate g event thread

00:27:51,490 --> 00:27:57,280
watching the directory structure and

00:27:54,610 --> 00:27:58,210
pushing out the the client updates as

00:27:57,280 --> 00:28:02,410
they occur

00:27:58,210 --> 00:28:04,540
Thanks thanks very much for the talk two

00:28:02,410 --> 00:28:06,460
questions one has you ever seen whether

00:28:04,540 --> 00:28:09,400
it's possible to use multiple DDP

00:28:06,460 --> 00:28:13,840
servers with them with the media front

00:28:09,400 --> 00:28:18,180
end or it's just one per you can so with

00:28:13,840 --> 00:28:21,040
meaty or you can create a new connection

00:28:18,180 --> 00:28:24,360
to multiple servers and then essentially

00:28:21,040 --> 00:28:27,250
when you define your collection of data

00:28:24,360 --> 00:28:30,760
you specify which connection it belongs

00:28:27,250 --> 00:28:32,560
to so absolutely yes that's possible ok

00:28:30,760 --> 00:28:35,260
cool yeah you just thought you could mix

00:28:32,560 --> 00:28:36,520
front you know mix say Django and the

00:28:35,260 --> 00:28:39,370
node and stuff like that as well without

00:28:36,520 --> 00:28:41,920
yes you certainly can also there are

00:28:39,370 --> 00:28:43,780
lots of DDP client implementations out

00:28:41,920 --> 00:28:45,580
there I'm not aware of any other server

00:28:43,780 --> 00:28:49,600
implementations aside from media or

00:28:45,580 --> 00:28:50,770
itself so there's bindings for lots of

00:28:49,600 --> 00:28:53,440
different languages if you want to

00:28:50,770 --> 00:28:54,940
integrate this into something else cool

00:28:53,440 --> 00:28:56,950
my second question was some you're

00:28:54,940 --> 00:28:58,390
talking about potentially using it in in

00:28:56,950 --> 00:29:00,310
production from your point of view I've

00:28:58,390 --> 00:29:01,870
played around a bit with media it's been

00:29:00,310 --> 00:29:04,030
a rough around the edges both client and

00:29:01,870 --> 00:29:06,040
server side how are you guys finding it

00:29:04,030 --> 00:29:09,310
especially when you say bolting Django

00:29:06,040 --> 00:29:11,740
at the back end we found it surprisingly

00:29:09,310 --> 00:29:13,450
easy the media development essentially

00:29:11,740 --> 00:29:16,930
happens as it normally would except that

00:29:13,450 --> 00:29:21,820
they're not dealing with the server-side

00:29:16,930 --> 00:29:23,920
code leaves your django devs to you know

00:29:21,820 --> 00:29:26,740
work on the implementation of API calls

00:29:23,920 --> 00:29:28,690
and such the medial side seems to work

00:29:26,740 --> 00:29:31,330
rather well and in fact comments from

00:29:28,690 --> 00:29:33,940
David bills rather strong in the medial

00:29:31,330 --> 00:29:35,260
community seems to be that django d DP

00:29:33,940 --> 00:29:36,910
doesn't have a lot of the issues that

00:29:35,260 --> 00:29:47,140
media has on the back end in particular

00:29:36,910 --> 00:29:49,990
with security thanks as far as so as far

00:29:47,140 --> 00:29:55,090
as django d DP how it uses g event for

00:29:49,990 --> 00:29:58,240
its web sockets what sort of what sort

00:29:55,090 --> 00:30:03,930
of what would the reasons for not using

00:29:58,240 --> 00:30:07,390
a actual event loop such as twisted with

00:30:03,930 --> 00:30:10,390
autobahn to run it side by side rather

00:30:07,390 --> 00:30:13,940
than running the whole thing in

00:30:10,390 --> 00:30:16,730
micro threads so the primary reason is

00:30:13,940 --> 00:30:18,260
that I'm I've produced this something

00:30:16,730 --> 00:30:20,150
that can be plugged into a project and

00:30:18,260 --> 00:30:23,120
that you can write lots of green code

00:30:20,150 --> 00:30:24,950
right I don't like the idea of having to

00:30:23,120 --> 00:30:29,630
write some special way of dealing with

00:30:24,950 --> 00:30:32,570
things so I'd much rather that the

00:30:29,630 --> 00:30:34,280
implementation that you know the devs

00:30:32,570 --> 00:30:38,770
you guys use if you're going to use this

00:30:34,280 --> 00:30:40,970
is very very clean and callbacks can be

00:30:38,770 --> 00:30:42,740
there are definitely a departure from

00:30:40,970 --> 00:30:46,370
what happens in the Python standard

00:30:42,740 --> 00:30:49,160
library they're very new for things like

00:30:46,370 --> 00:30:53,480
the tulip library so to speak in Python

00:30:49,160 --> 00:30:56,600
3 but twisted there seems to be some

00:30:53,480 --> 00:30:58,970
sentiment that it is overly complex and

00:30:56,600 --> 00:31:02,150
I wanted to avoid that complexity okay

00:30:58,970 --> 00:31:06,560
um and as far as called mad the red

00:31:02,150 --> 00:31:09,860
green code would would not wrapping it

00:31:06,560 --> 00:31:12,860
in using crochet which has twisted in a

00:31:09,860 --> 00:31:14,660
thread with the call through Fred which

00:31:12,860 --> 00:31:17,390
lets you do block a synchronous

00:31:14,660 --> 00:31:21,490
operations in a locking thing so there's

00:31:17,390 --> 00:31:24,530
that very little of that red green code

00:31:21,490 --> 00:31:29,030
would something like that be interesting

00:31:24,530 --> 00:31:30,950
to the project certainly so the G event

00:31:29,030 --> 00:31:32,570
WebSocket back end I can't see any

00:31:30,950 --> 00:31:37,880
reason why it couldn't be abstracted out

00:31:32,570 --> 00:31:40,490
and essentially try and work around some

00:31:37,880 --> 00:31:43,520
of these things but the monkey patching

00:31:40,490 --> 00:31:47,480
the standard library means that the

00:31:43,520 --> 00:31:49,970
Django side of code just works you know

00:31:47,480 --> 00:31:53,120
it can deal with the multiple

00:31:49,970 --> 00:31:56,980
simultaneous concurrent queries and such

00:31:53,120 --> 00:31:56,980
it just works cool

00:31:59,220 --> 00:32:06,760
thanks Tyson um I'm interested in

00:32:03,549 --> 00:32:10,240
learning a little bit about say there's

00:32:06,760 --> 00:32:13,360
the goals of DDP and then wamp just sort

00:32:10,240 --> 00:32:16,600
of a website of protocols implemented in

00:32:13,360 --> 00:32:18,820
multiple languages Sean wondering if she

00:32:16,600 --> 00:32:22,120
could make a comment about say the

00:32:18,820 --> 00:32:24,790
ubiquity of DDP in what this meteor and

00:32:22,120 --> 00:32:27,940
Django combination might offer versus

00:32:24,790 --> 00:32:29,440
autoblog crossbar so the requirements

00:32:27,940 --> 00:32:30,970
for this particular project that this

00:32:29,440 --> 00:32:33,790
was created for was to essentially

00:32:30,970 --> 00:32:35,770
integrate with meteor media doesn't use

00:32:33,790 --> 00:32:38,950
wamp which is essentially heading

00:32:35,770 --> 00:32:42,370
towards standardization but it's really

00:32:38,950 --> 00:32:46,750
quite simple I mean JSON on the wire

00:32:42,370 --> 00:32:49,360
makes sense an RPC method where you can

00:32:46,750 --> 00:32:52,500
go and call a method make mythical get

00:32:49,360 --> 00:32:57,640
responses and then publish and

00:32:52,500 --> 00:33:00,100
subscribing to changes DDP is actually

00:32:57,640 --> 00:33:03,580
quite a clean implementation of all of

00:33:00,100 --> 00:33:06,010
that including the latency compensation

00:33:03,580 --> 00:33:08,230
as a factor which went doesn't seem to

00:33:06,010 --> 00:33:09,910
address although in theory you could add

00:33:08,230 --> 00:33:13,570
it to any method call that you wanted to

00:33:09,910 --> 00:33:18,540
so but it would be an afterthought as

00:33:13,570 --> 00:33:21,700
opposed to a there from the start and

00:33:18,540 --> 00:33:25,900
would you place a bet on which we go

00:33:21,700 --> 00:33:28,210
forward well django d DP really could

00:33:25,900 --> 00:33:31,090
have been called Jango real time because

00:33:28,210 --> 00:33:34,660
I guess there wouldn't be too much

00:33:31,090 --> 00:33:37,540
involved in making it do wamp as well it

00:33:34,660 --> 00:33:39,520
would be a bit of a bit of work to get

00:33:37,540 --> 00:33:41,049
that happen but I could see that it

00:33:39,520 --> 00:33:44,440
could easily be adapted to do precisely

00:33:41,049 --> 00:33:46,419
that so yeah Django real time is you

00:33:44,440 --> 00:33:51,400
want to call up that but its current

00:33:46,419 --> 00:33:55,110
name is Django DDP okay thank you very

00:33:51,400 --> 00:33:55,110
much Tyson thank you

00:33:57,750 --> 00:34:00,750
ok

00:34:06,669 --> 00:34:08,730

YouTube URL: https://www.youtube.com/watch?v=N9OvbRP5W0g


