Title: Testing ain't hard, even for SysAdmins by Geoff Crompton
Publication date: 2015-08-04
Playlist: PyCon Australia 2015
Description: 
	While fabric is a great tool for systems automation, saltstack is better. When Geoff decided to re-work the procedure at Trinity College for doing their regular package installs using salt, he ended up writing his own script that interacted with salt. He learned to love how testing improved his ability to debug this script without breaking his production environment, and wants to share what he learned with you.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:10,670 --> 00:00:15,500
alright

00:00:12,470 --> 00:00:17,450
thank you all for coming so next speaker

00:00:15,500 --> 00:00:19,640
is Jeff Crumpton and here's an

00:00:17,450 --> 00:00:21,200
experienced Lexus administrator working

00:00:19,640 --> 00:00:23,060
with the Trinity College in Melbourne a

00:00:21,200 --> 00:00:35,630
stock is called testing ain't hard even

00:00:23,060 --> 00:00:37,730
for suicide mins please welcome him so

00:00:35,630 --> 00:00:39,560
who needs testing I'm a system

00:00:37,730 --> 00:00:42,680
administrator or not really a programmer

00:00:39,560 --> 00:00:45,170
when I write scripts typically they're

00:00:42,680 --> 00:00:47,930
not very big I don't split them up into

00:00:45,170 --> 00:00:49,910
modules so I don't find that I really

00:00:47,930 --> 00:00:51,470
need to go to the effort of testing it's

00:00:49,910 --> 00:00:53,300
normally good enough for me to put in

00:00:51,470 --> 00:00:55,490
print statements to see what's happening

00:00:53,300 --> 00:00:57,380
and then when I'm finished remove those

00:00:55,490 --> 00:00:59,420
print statements if I'm feeling really

00:00:57,380 --> 00:01:01,790
sophisticated then i'll use the logging

00:00:59,420 --> 00:01:09,310
module so that I aren't using print on

00:01:01,790 --> 00:01:12,439
using logging um but I actually got into

00:01:09,310 --> 00:01:15,259
testing because i use saltstack at work

00:01:12,439 --> 00:01:17,420
and i started to write a script to use

00:01:15,259 --> 00:01:19,700
the saltstack infrastructure and that's

00:01:17,420 --> 00:01:22,159
what i'm going to talk about today so

00:01:19,700 --> 00:01:23,960
what is saltstack we've already had a

00:01:22,159 --> 00:01:27,530
talk earlier today about what salt stick

00:01:23,960 --> 00:01:30,500
is but it's um it's quite a lot of

00:01:27,530 --> 00:01:32,840
things it's pretty cool software I think

00:01:30,500 --> 00:01:34,880
it started in about twenty eleven it

00:01:32,840 --> 00:01:37,070
lets you manage your infrastructure

00:01:34,880 --> 00:01:40,820
amazing lots of servers in a variety of

00:01:37,070 --> 00:01:42,650
ways it's open source software it's got

00:01:40,820 --> 00:01:44,420
really nice readable code it's got

00:01:42,650 --> 00:01:46,940
fairly good documentation it's got a

00:01:44,420 --> 00:01:49,990
good community around it and it lets you

00:01:46,940 --> 00:01:51,799
do a variety of things such as

00:01:49,990 --> 00:01:53,600
configuration management which has

00:01:51,799 --> 00:01:56,510
already been talked about a lot in this

00:01:53,600 --> 00:01:58,040
room today but just to rehash that

00:01:56,510 --> 00:02:00,350
briefly if you haven't been here for

00:01:58,040 --> 00:02:02,960
those talks the idea of configuration

00:02:00,350 --> 00:02:05,000
management is to make sure your servers

00:02:02,960 --> 00:02:07,820
are in a particular way so you might say

00:02:05,000 --> 00:02:10,129
I want sudo to be installed on all of my

00:02:07,820 --> 00:02:12,860
servers and I want the pseudo rules to

00:02:10,129 --> 00:02:14,629
look like a particular thing in

00:02:12,860 --> 00:02:18,890
saltstack that's called doing a high

00:02:14,629 --> 00:02:20,480
state run insult stack there are masters

00:02:18,890 --> 00:02:23,000
and minions in a small environment

00:02:20,480 --> 00:02:25,040
you'll have one master the controls many

00:02:23,000 --> 00:02:28,519
minions

00:02:25,040 --> 00:02:30,680
and with your high state runs you would

00:02:28,519 --> 00:02:32,510
do that you have an option of when you

00:02:30,680 --> 00:02:35,120
do that you could choose to do that

00:02:32,510 --> 00:02:36,489
occasionally when you want to change

00:02:35,120 --> 00:02:38,930
your production environment because

00:02:36,489 --> 00:02:41,030
you're doing something in particular but

00:02:38,930 --> 00:02:43,099
most people will tend to you do their

00:02:41,030 --> 00:02:47,569
high state runs on a regular schedule

00:02:43,099 --> 00:02:49,250
say every 20 to 30 minutes and so

00:02:47,569 --> 00:02:51,739
another idea of configuration management

00:02:49,250 --> 00:02:53,810
is a correct configuration for you if

00:02:51,739 --> 00:02:57,470
someone else has had altered the pseudo

00:02:53,810 --> 00:03:00,620
was file then salt will drive it back to

00:02:57,470 --> 00:03:03,169
the way that you're wanting it to be um

00:03:00,620 --> 00:03:06,109
to be expressed and this is an idea of

00:03:03,169 --> 00:03:08,450
infrastructure as code you write your

00:03:06,109 --> 00:03:11,659
code to specify how the infrastructure

00:03:08,450 --> 00:03:13,790
should look I will note that I don't

00:03:11,659 --> 00:03:15,919
actually use salt for configuration

00:03:13,790 --> 00:03:17,900
management because I got started with

00:03:15,919 --> 00:03:20,409
configuration management back in 2008

00:03:17,900 --> 00:03:23,299
before thought existed so we use puppet

00:03:20,409 --> 00:03:25,090
it gives you other things it gives you

00:03:23,299 --> 00:03:28,189
an idea of loosely coupled

00:03:25,090 --> 00:03:32,599
infrastructure coordination salt has an

00:03:28,189 --> 00:03:35,720
event bus you can trigger events on

00:03:32,599 --> 00:03:38,030
minions and they get reacted to on the

00:03:35,720 --> 00:03:40,340
salt master by the salt reactor system

00:03:38,030 --> 00:03:43,190
an example of that is you might have a

00:03:40,340 --> 00:03:45,620
website where a user is trying to create

00:03:43,190 --> 00:03:46,729
an account in your environment you could

00:03:45,620 --> 00:03:49,370
trigger an event that this has happened

00:03:46,729 --> 00:03:50,720
and the reactor could then create a home

00:03:49,370 --> 00:03:53,299
directory for them on the file server

00:03:50,720 --> 00:03:55,699
will create a mail account on your zimra

00:03:53,299 --> 00:03:58,549
mail cluster and the nice thing about

00:03:55,699 --> 00:04:00,290
this is that it's all very decoupled if

00:03:58,549 --> 00:04:02,510
you change your web application you

00:04:00,290 --> 00:04:05,949
don't have to change anything in that if

00:04:02,510 --> 00:04:08,840
you also change your mail environment

00:04:05,949 --> 00:04:10,819
this all sounds excellent to me and I

00:04:08,840 --> 00:04:16,310
hope one day I will actually implement

00:04:10,819 --> 00:04:19,989
this at Trinity one of the other things

00:04:16,310 --> 00:04:22,070
that i use for salt is remote execution

00:04:19,989 --> 00:04:25,669
salt comes with a command-line tool

00:04:22,070 --> 00:04:27,470
called salt and it lets you do stuff on

00:04:25,669 --> 00:04:29,900
collections of servers and we've already

00:04:27,470 --> 00:04:33,229
seen examples of that in previous talks

00:04:29,900 --> 00:04:34,880
today so you can do remote execution

00:04:33,229 --> 00:04:37,480
which I'm talking about and here's an

00:04:34,880 --> 00:04:39,190
example of doing that

00:04:37,480 --> 00:04:42,310
as you can see the first argument is

00:04:39,190 --> 00:04:45,450
what I'm targeting and I'm going to use

00:04:42,310 --> 00:04:47,950
a shadow module to set the root password

00:04:45,450 --> 00:04:49,690
and as you can see it returns map.put

00:04:47,950 --> 00:04:51,730
saying what's true and if you are happy

00:04:49,690 --> 00:04:54,220
with the result of that you can go on

00:04:51,730 --> 00:04:56,080
and target more minions you can see I've

00:04:54,220 --> 00:04:57,610
got the minus G there this is a

00:04:56,080 --> 00:04:59,230
different way of targeting it's using

00:04:57,610 --> 00:05:01,600
the grain system to target all the

00:04:59,230 --> 00:05:03,850
Debbie and like systems and so you know

00:05:01,600 --> 00:05:06,250
once i'm happy that it worked on test 01

00:05:03,850 --> 00:05:08,500
i go and do it on lots of other servers

00:05:06,250 --> 00:05:10,210
hopefully you check these things before

00:05:08,500 --> 00:05:12,790
you go because with great power comes

00:05:10,210 --> 00:05:15,550
great responsibility and that hash does

00:05:12,790 --> 00:05:18,520
not bear any resemblance to you know the

00:05:15,550 --> 00:05:20,200
right hash with the grains you don't

00:05:18,520 --> 00:05:22,990
just have to use you know the family

00:05:20,200 --> 00:05:25,360
there's a variety of grains like CPU

00:05:22,990 --> 00:05:28,060
Information Network Information memory

00:05:25,360 --> 00:05:32,440
sizes and you can write your own grains

00:05:28,060 --> 00:05:35,110
not too difficult you can discover

00:05:32,440 --> 00:05:38,860
things with salt or rather you can

00:05:35,110 --> 00:05:40,690
relearn things so I might sometimes use

00:05:38,860 --> 00:05:43,420
this just to remind myself of how many

00:05:40,690 --> 00:05:46,420
minions I've got at the moment or i

00:05:43,420 --> 00:05:49,180
could relearn or he's an example of that

00:05:46,420 --> 00:05:50,740
or i could relearn what versions of

00:05:49,180 --> 00:05:52,420
openssl I've got running on those

00:05:50,740 --> 00:05:55,450
minions and as you can see with this

00:05:52,420 --> 00:05:59,530
minion is mocked up example it's very

00:05:55,450 --> 00:06:01,120
old and needs to be updated there is

00:05:59,530 --> 00:06:03,490
lots of other things that saltstack

00:06:01,120 --> 00:06:05,980
gives you there's lots of execution

00:06:03,490 --> 00:06:08,080
modules I was trying to count them I was

00:06:05,980 --> 00:06:10,720
going through an alphabetical list I got

00:06:08,080 --> 00:06:13,300
to a I was already up to 60 so I didn't

00:06:10,720 --> 00:06:15,880
bother keeping on counting you can write

00:06:13,300 --> 00:06:17,350
your own execution modules it's Python

00:06:15,880 --> 00:06:20,170
code if you're here you're probably

00:06:17,350 --> 00:06:21,850
quite familiar with Python you can store

00:06:20,170 --> 00:06:24,730
the results that you get from these

00:06:21,850 --> 00:06:26,830
executions not just on your screen on

00:06:24,730 --> 00:06:29,350
your console you can store those results

00:06:26,830 --> 00:06:31,750
somewhere else like in a database or in

00:06:29,350 --> 00:06:34,210
a an ngon SQL database which is also a

00:06:31,750 --> 00:06:36,690
database um or you can write your own

00:06:34,210 --> 00:06:40,060
returner to do something else with them

00:06:36,690 --> 00:06:44,110
to react to them that's a silly idea

00:06:40,060 --> 00:06:46,510
there's a reactor you can scale out salt

00:06:44,110 --> 00:06:48,570
quite well I haven't done this but you

00:06:46,510 --> 00:06:51,040
can have multiple masters you can

00:06:48,570 --> 00:06:53,980
control tens of thousands of men

00:06:51,040 --> 00:06:56,320
according to what they tell you you can

00:06:53,980 --> 00:06:58,060
do p communications between minions

00:06:56,320 --> 00:06:59,920
earlier I talked about the event bus

00:06:58,060 --> 00:07:02,230
that's communications from a minion to

00:06:59,920 --> 00:07:04,960
the master you can apparently do

00:07:02,230 --> 00:07:08,680
communications between minions I haven't

00:07:04,960 --> 00:07:12,130
you can control non salt minions both

00:07:08,680 --> 00:07:13,480
through salt SSH so you know unique see

00:07:12,130 --> 00:07:15,790
environments that you don't have sold in

00:07:13,480 --> 00:07:18,910
store but also through a salt proxy

00:07:15,790 --> 00:07:22,060
technique which I haven't used but you

00:07:18,910 --> 00:07:23,770
know if you've got raspberry pi devices

00:07:22,060 --> 00:07:25,210
where you don't want the memory

00:07:23,770 --> 00:07:27,220
footprint of salt running on it you can

00:07:25,210 --> 00:07:30,310
still control them with some effort

00:07:27,220 --> 00:07:33,190
through salt and one thing you can do

00:07:30,310 --> 00:07:35,170
with salt is a package updates so they

00:07:33,190 --> 00:07:37,360
have execution modules for doing package

00:07:35,170 --> 00:07:39,820
updates and in fact that's why I was

00:07:37,360 --> 00:07:41,500
interested in salt I was doing roughly

00:07:39,820 --> 00:07:45,330
monthly package updates and i've been

00:07:41,500 --> 00:07:47,860
using a tool called fabric to to do that

00:07:45,330 --> 00:07:49,810
once I got started with saltstack I

00:07:47,860 --> 00:07:53,560
decided it would be a much better tool

00:07:49,810 --> 00:07:57,640
for doing this job so there's package

00:07:53,560 --> 00:07:59,770
modules it lets you easily say to

00:07:57,640 --> 00:08:01,810
whatever selection of minions that you

00:07:59,770 --> 00:08:03,880
want that you want to update their

00:08:01,810 --> 00:08:05,650
package lists you want to upgrade the

00:08:03,880 --> 00:08:08,830
packages on them and you want to reboot

00:08:05,650 --> 00:08:10,750
them to get you know the the colonel

00:08:08,830 --> 00:08:12,640
package installed and running so this is

00:08:10,750 --> 00:08:15,490
an example of how you might do that you

00:08:12,640 --> 00:08:18,460
might do a targeting all of your minions

00:08:15,490 --> 00:08:20,170
a package refresh a package upgrade and

00:08:18,460 --> 00:08:22,720
a reboot the first one is like doing an

00:08:20,170 --> 00:08:25,240
apt get update the second one is like

00:08:22,720 --> 00:08:27,190
doing a nap get dist-upgrade and sis

00:08:25,240 --> 00:08:30,970
reboot is like doing shut down minus are

00:08:27,190 --> 00:08:33,970
now however this might not be a good

00:08:30,970 --> 00:08:36,280
idea I wouldn't do this you've probably

00:08:33,970 --> 00:08:38,800
got assault minion running on your sword

00:08:36,280 --> 00:08:41,890
master and if there's an update needed

00:08:38,800 --> 00:08:43,660
for that salt menu the salt master is

00:08:41,890 --> 00:08:46,180
probably going to get restarted halfway

00:08:43,660 --> 00:08:47,950
through this so it becomes or at least

00:08:46,180 --> 00:08:49,960
in my mind a little bit undefined about

00:08:47,950 --> 00:08:51,880
what happens to all of your minions I

00:08:49,960 --> 00:08:53,980
certainly haven't tried this but I

00:08:51,880 --> 00:08:55,480
wonder what would happen if once you run

00:08:53,980 --> 00:08:58,120
that second command and there's all

00:08:55,480 --> 00:08:59,440
these output that's scroll past it might

00:08:58,120 --> 00:09:01,380
not include all the output because some

00:08:59,440 --> 00:09:04,220
of those minions might have restarted

00:09:01,380 --> 00:09:05,540
they will reconnect to the master

00:09:04,220 --> 00:09:07,670
but there are things that are in fly at

00:09:05,540 --> 00:09:10,820
the moment may not get returned to your

00:09:07,670 --> 00:09:12,320
running sock command so you get this

00:09:10,820 --> 00:09:13,820
output that's pages long you might not

00:09:12,320 --> 00:09:16,180
notice that half of them aren't there

00:09:13,820 --> 00:09:19,850
and if you continue you might reboot an

00:09:16,180 --> 00:09:21,560
undefined set of minions of course

00:09:19,850 --> 00:09:25,280
rebooting your entire infrastructure is

00:09:21,560 --> 00:09:27,470
not a great idea because it turns out

00:09:25,280 --> 00:09:30,950
that servers have dependencies as well

00:09:27,470 --> 00:09:33,410
my zimbra hosts our mail infrastructure

00:09:30,950 --> 00:09:35,270
is much happier if the male hosts the

00:09:33,410 --> 00:09:38,450
back end hosts aren't rebooted at the

00:09:35,270 --> 00:09:41,090
same time as the front end hosts it's

00:09:38,450 --> 00:09:42,800
probably best if my apt Keysha hopes

00:09:41,090 --> 00:09:45,170
that Katia's my package downloads

00:09:42,800 --> 00:09:47,030
doesn't get rebooted at the same time

00:09:45,170 --> 00:09:50,450
the lots of other minions are trying to

00:09:47,030 --> 00:09:52,760
do you know package updates as well so

00:09:50,450 --> 00:09:54,890
in my environment I wanted some control

00:09:52,760 --> 00:09:57,590
over the ordering of this this work that

00:09:54,890 --> 00:09:59,630
I had to do every month after a bit of

00:09:57,590 --> 00:10:01,600
experimenting around I decided that I

00:09:59,630 --> 00:10:03,620
would solve this by writing a script and

00:10:01,600 --> 00:10:06,320
that would interact with the salt

00:10:03,620 --> 00:10:09,350
infrastructure that would let me do this

00:10:06,320 --> 00:10:11,330
in a more managed way the script does a

00:10:09,350 --> 00:10:13,790
test stop ping to discover what minions

00:10:11,330 --> 00:10:15,920
are around it looks at a configuration

00:10:13,790 --> 00:10:17,810
file to get informed about some of the

00:10:15,920 --> 00:10:19,670
decisions i've made about ordering

00:10:17,810 --> 00:10:23,720
things and then it goes through and does

00:10:19,670 --> 00:10:26,000
the the updates and the reboots and in a

00:10:23,720 --> 00:10:28,100
script like this what i said earlier

00:10:26,000 --> 00:10:29,630
about how i do programming doesn't

00:10:28,100 --> 00:10:33,370
really work print statements don't

00:10:29,630 --> 00:10:36,050
really cutter it's quite annoying if

00:10:33,370 --> 00:10:37,430
once you've gone through the script and

00:10:36,050 --> 00:10:39,200
you've worked out you're not a perfect

00:10:37,430 --> 00:10:40,790
programming you need to you know develop

00:10:39,200 --> 00:10:42,890
it more that you have to downgrade

00:10:40,790 --> 00:10:45,820
packages on servers so that you can run

00:10:42,890 --> 00:10:49,850
your script again to see what happens

00:10:45,820 --> 00:10:51,290
it's also very slow to do that and most

00:10:49,850 --> 00:10:52,790
of you probably can't afford to do that

00:10:51,290 --> 00:10:57,590
to your production environments neither

00:10:52,790 --> 00:10:59,510
can I so it turns out that I need

00:10:57,590 --> 00:11:02,300
testing which is really what this talk

00:10:59,510 --> 00:11:05,840
is meant to be about the basics of

00:11:02,300 --> 00:11:08,030
testing so this is a Python script so

00:11:05,840 --> 00:11:10,340
when I started down this path it's like

00:11:08,030 --> 00:11:13,130
well I k what's the basics of testing in

00:11:10,340 --> 00:11:17,150
Python so I'm going to go through a unit

00:11:13,130 --> 00:11:17,990
test 101 unit test was added in Python

00:11:17,150 --> 00:11:20,300
2.1

00:11:17,990 --> 00:11:22,459
so it's probably available to you I

00:11:20,300 --> 00:11:25,130
found that there's three main components

00:11:22,459 --> 00:11:27,980
that I needed for this kind of testing

00:11:25,130 --> 00:11:31,430
and those are you know test test case

00:11:27,980 --> 00:11:35,089
various assert methods and the unit test

00:11:31,430 --> 00:11:36,860
domain when I'm learning about something

00:11:35,089 --> 00:11:39,260
new I like to start off with very simple

00:11:36,860 --> 00:11:41,959
yeah starting point so the hello world

00:11:39,260 --> 00:11:44,930
of tests and how you might do this is by

00:11:41,959 --> 00:11:47,570
creating a test directory adding a file

00:11:44,930 --> 00:11:49,880
called testify and putting something

00:11:47,570 --> 00:11:52,760
very simple in it such as what you see

00:11:49,880 --> 00:11:53,839
here so you can see I've got all those

00:11:52,760 --> 00:11:55,820
three things that I mentioned earlier

00:11:53,839 --> 00:11:58,760
I've got the unit test test case at my

00:11:55,820 --> 00:12:00,620
class inherits from I've got a cert and

00:11:58,760 --> 00:12:03,560
a certain method for doing a test and

00:12:00,620 --> 00:12:06,740
i'm using unit test main in my you know

00:12:03,560 --> 00:12:09,040
under main to run the script and here's

00:12:06,740 --> 00:12:11,330
what it looks like when you run that as

00:12:09,040 --> 00:12:14,390
you can see we live in a world where

00:12:11,330 --> 00:12:16,790
python doesn't think that one equals 1

00:12:14,390 --> 00:12:19,850
i'm sure that we're all glad for that so

00:12:16,790 --> 00:12:21,920
the test fails if i was to change the

00:12:19,850 --> 00:12:23,660
script to make so we're asserting that

00:12:21,920 --> 00:12:25,490
one equals one then it would look quite

00:12:23,660 --> 00:12:27,110
different it would look like this which

00:12:25,490 --> 00:12:28,370
is much less alarming and that's really

00:12:27,110 --> 00:12:31,010
what you want when you run all your

00:12:28,370 --> 00:12:32,600
tests you want it to look simple and if

00:12:31,010 --> 00:12:36,680
there's something failing you get the

00:12:32,600 --> 00:12:41,060
information that you need as I'm using

00:12:36,680 --> 00:12:43,430
unit test dot main I can ask it to run

00:12:41,060 --> 00:12:45,350
more than I can be a more specific about

00:12:43,430 --> 00:12:46,910
what I'm asking it to run so here's an

00:12:45,350 --> 00:12:49,579
example of asking it to run the test

00:12:46,910 --> 00:12:52,310
things class you might have tests that

00:12:49,579 --> 00:12:53,450
have multiple class in your file and you

00:12:52,310 --> 00:12:55,760
don't have to run them all in fact you

00:12:53,450 --> 00:12:58,279
can even drill down into the test method

00:12:55,760 --> 00:13:01,370
that you want to run and if you've got

00:12:58,279 --> 00:13:03,680
multiple circles inside that test method

00:13:01,370 --> 00:13:06,980
because you're using unit test domain

00:13:03,680 --> 00:13:08,779
you can even get it to run all of those

00:13:06,980 --> 00:13:12,160
assert calls there's no real surprises

00:13:08,779 --> 00:13:12,160
here you've got to run the whole method

00:13:12,370 --> 00:13:16,850
but you probably don't just want to have

00:13:15,110 --> 00:13:18,560
one test file with one test class you

00:13:16,850 --> 00:13:20,480
probably want lots test classes and lots

00:13:18,560 --> 00:13:23,480
of test methods spread across multiple

00:13:20,480 --> 00:13:26,420
files but how do you run them all and my

00:13:23,480 --> 00:13:28,220
answer for that was nose tests from the

00:13:26,420 --> 00:13:30,050
nose test documentation nose extends

00:13:28,220 --> 00:13:32,060
unit tests to make it easier to run

00:13:30,050 --> 00:13:33,980
multiple tests so here's an example

00:13:32,060 --> 00:13:37,250
running nose test in my very simple case

00:13:33,980 --> 00:13:40,070
where it just explores the test

00:13:37,250 --> 00:13:42,020
directory finds all my test files opens

00:13:40,070 --> 00:13:46,040
them up finds all the test classes and

00:13:42,020 --> 00:13:50,990
runs all the test methods so now we get

00:13:46,040 --> 00:13:52,820
to how do we test my script this is an

00:13:50,990 --> 00:13:55,070
extract of what my script looks like

00:13:52,820 --> 00:13:56,780
some salient points are that you know

00:13:55,070 --> 00:13:59,060
there's a main method there's a run

00:13:56,780 --> 00:14:01,850
there's an object that I'm instantiate

00:13:59,060 --> 00:14:03,470
in and here we can see the test stopping

00:14:01,850 --> 00:14:06,800
that I was talking about to discover

00:14:03,470 --> 00:14:09,350
what minions are alive so if I'm testing

00:14:06,800 --> 00:14:12,710
that I don't want it to actually talk to

00:14:09,350 --> 00:14:14,630
salt in fact when if I'm testing that

00:14:12,710 --> 00:14:16,700
before i get to salt I've got to be able

00:14:14,630 --> 00:14:19,130
to test it how do I test my script it's

00:14:16,700 --> 00:14:22,100
not a module this is the way I test my

00:14:19,130 --> 00:14:24,500
script i use the imp model too low that

00:14:22,100 --> 00:14:27,980
script into an object and then inside my

00:14:24,500 --> 00:14:31,850
test case I can you know interact with

00:14:27,980 --> 00:14:33,020
that object to run it so now let's get

00:14:31,850 --> 00:14:35,030
back to that point I mentioned just

00:14:33,020 --> 00:14:38,150
before how do I stop at talking to a

00:14:35,030 --> 00:14:41,420
real salt master and the solution for

00:14:38,150 --> 00:14:44,360
that these days is locked hatch mock is

00:14:41,420 --> 00:14:47,390
available I in pie pie if you're not

00:14:44,360 --> 00:14:50,840
running Python 3.3 or newer it's been

00:14:47,390 --> 00:14:54,200
included in place and 3.3 mock patch

00:14:50,840 --> 00:14:56,840
lets me replace the salt client local

00:14:54,200 --> 00:14:58,910
client which is part of the API I'm

00:14:56,840 --> 00:15:00,520
using to talk to salt and replace it

00:14:58,910 --> 00:15:05,690
with something else that I've created

00:15:00,520 --> 00:15:07,730
and he's an example of doing that you

00:15:05,690 --> 00:15:10,850
can see I've created a local client

00:15:07,730 --> 00:15:13,210
object it has a command method and

00:15:10,850 --> 00:15:17,990
that's something that my script pulls

00:15:13,210 --> 00:15:20,330
repeatedly my command method I haven't

00:15:17,990 --> 00:15:21,740
shown how I implemented here but when i

00:15:20,330 --> 00:15:24,590
call it i'm calling it multiple times

00:15:21,740 --> 00:15:27,110
with different job arguments you know a

00:15:24,590 --> 00:15:29,510
test stop peeing and then later a system

00:15:27,110 --> 00:15:31,460
reboot so you know there's got to be a

00:15:29,510 --> 00:15:36,920
bit of work in there to make it behave

00:15:31,460 --> 00:15:39,800
the correct way so once I'm able to stop

00:15:36,920 --> 00:15:42,140
my script talking to salt how do I know

00:15:39,800 --> 00:15:44,330
what happens inside my script like I've

00:15:42,140 --> 00:15:45,640
said before it's not modular I'm testing

00:15:44,330 --> 00:15:48,880
the whole thing at once

00:15:45,640 --> 00:15:50,680
and it doesn't the run method doesn't

00:15:48,880 --> 00:15:53,350
return a value and that wouldn't really

00:15:50,680 --> 00:15:56,200
make sense anyway because I'm going to

00:15:53,350 --> 00:15:57,790
test lots of different things and one

00:15:56,200 --> 00:15:59,500
return value isn't going to express

00:15:57,790 --> 00:16:03,250
enough information about what happens in

00:15:59,500 --> 00:16:06,030
the internals of the script so the

00:16:03,250 --> 00:16:09,250
answer for that is Mach dot magic mock

00:16:06,030 --> 00:16:10,900
this lets you reach deep within the

00:16:09,250 --> 00:16:13,990
bowels of the thing that you're testing

00:16:10,900 --> 00:16:17,830
and to find out what happened at that

00:16:13,990 --> 00:16:19,330
point to me that sounds like magic so

00:16:17,830 --> 00:16:23,050
you know of course that's why it's

00:16:19,330 --> 00:16:27,570
called mock magic mock but let me show

00:16:23,050 --> 00:16:30,820
you some examples so here's one example

00:16:27,570 --> 00:16:32,890
you can see the mock here it's you know

00:16:30,820 --> 00:16:35,440
down here I'm doing a magic mock I've

00:16:32,890 --> 00:16:40,050
got a side effect I'm going to capture

00:16:35,440 --> 00:16:43,270
some output when I run the script and

00:16:40,050 --> 00:16:49,060
you can see I'm patching out more

00:16:43,270 --> 00:16:50,500
important so when i run this i guess the

00:16:49,060 --> 00:16:53,340
important thing to note here is the side

00:16:50,500 --> 00:16:56,950
effect the side effect is an exception

00:16:53,340 --> 00:16:59,680
what I want to know is in this case do I

00:16:56,950 --> 00:17:02,560
get prompted by the script early on the

00:16:59,680 --> 00:17:04,420
script so if i replace raw input with a

00:17:02,560 --> 00:17:06,699
mock that has a side effect of throwing

00:17:04,420 --> 00:17:10,030
an exception then i can check if that

00:17:06,699 --> 00:17:11,740
exception gets thrown and 1 i'm checking

00:17:10,030 --> 00:17:14,589
I've got up ahead up the top you've got

00:17:11,740 --> 00:17:16,390
an argument skip skip check so if this

00:17:14,589 --> 00:17:18,970
is present then I should get an

00:17:16,390 --> 00:17:21,220
exception and elsewhere I'll check if

00:17:18,970 --> 00:17:24,160
it's not present then I shouldn't get an

00:17:21,220 --> 00:17:26,650
exception and not only am i checking if

00:17:24,160 --> 00:17:29,350
raw input is called I'm also gathering

00:17:26,650 --> 00:17:32,530
the output and checking that the output

00:17:29,350 --> 00:17:33,970
is what I expect it to be this is

00:17:32,530 --> 00:17:37,710
probably one of the first test that i

00:17:33,970 --> 00:17:37,710
implement it on this particular project

00:17:38,460 --> 00:17:49,050
there's other ways of using mock you can

00:17:45,250 --> 00:17:51,610
look at how the mock object was called

00:17:49,050 --> 00:17:53,980
here on you know throwing another side

00:17:51,610 --> 00:17:56,230
effect but i'm not looking at the output

00:17:53,980 --> 00:17:59,110
i'm just looking at the mock call args

00:17:56,230 --> 00:18:01,660
to see if the way the mock was cool

00:17:59,110 --> 00:18:05,350
all invoked is the way I expected it so

00:18:01,660 --> 00:18:07,210
in this case do updates have I done an

00:18:05,350 --> 00:18:11,679
update on the minion that I expect to be

00:18:07,210 --> 00:18:13,540
updated there's a variety of ways of

00:18:11,679 --> 00:18:16,600
using magic mock you don't have to throw

00:18:13,540 --> 00:18:19,750
an exception so here's an example of not

00:18:16,600 --> 00:18:22,600
throwing an exception once again I'm

00:18:19,750 --> 00:18:24,910
doing stuff and I'm asserting that it's

00:18:22,600 --> 00:18:28,179
being called in the way that I expect so

00:18:24,910 --> 00:18:32,290
my D do reboots is kind of happening

00:18:28,179 --> 00:18:34,540
later on in the script and here I'm just

00:18:32,290 --> 00:18:37,799
checking if the final call of de rue

00:18:34,540 --> 00:18:40,299
boots was the local minion I want my

00:18:37,799 --> 00:18:42,340
salt master which I'm assuming this is

00:18:40,299 --> 00:18:44,200
running on to be the very final thing to

00:18:42,340 --> 00:18:49,030
be rebooted I don't want to reboot

00:18:44,200 --> 00:18:50,700
halfway through the whole process one

00:18:49,030 --> 00:18:53,110
thing to note that was conceptually

00:18:50,700 --> 00:18:55,870
difficult as I was getting into this is

00:18:53,110 --> 00:18:57,460
that patch replaces functionality it

00:18:55,870 --> 00:19:00,520
doesn't wrap it it's not a decorator

00:18:57,460 --> 00:19:02,169
which wraps functionality it stubbs it

00:19:00,520 --> 00:19:04,450
out and replaces it with something else

00:19:02,169 --> 00:19:08,440
so the code that you're replacing is no

00:19:04,450 --> 00:19:11,110
longer run at all in my case that's okay

00:19:08,440 --> 00:19:13,750
if I'm stubbing out the do updates

00:19:11,110 --> 00:19:15,309
method call that's fine my script

00:19:13,750 --> 00:19:17,470
actually depends on the results of that

00:19:15,309 --> 00:19:19,510
to determine what to reboot later if

00:19:17,470 --> 00:19:21,700
there's no return value then it won't

00:19:19,510 --> 00:19:23,890
reboot anything later but in my test I'm

00:19:21,700 --> 00:19:25,419
only checking at that point when the

00:19:23,890 --> 00:19:26,890
updates are called what happens it

00:19:25,419 --> 00:19:29,860
doesn't matter what happens later in the

00:19:26,890 --> 00:19:31,929
script but for you it might be important

00:19:29,860 --> 00:19:35,020
if you're testing something to do with

00:19:31,929 --> 00:19:37,179
say in SQL database and you do an insert

00:19:35,020 --> 00:19:39,190
and your code depends on that later if

00:19:37,179 --> 00:19:41,230
you kind of stub that out that insert

00:19:39,190 --> 00:19:44,230
won't occur so it's important in your

00:19:41,230 --> 00:19:47,830
environment to think about what you're

00:19:44,230 --> 00:19:50,620
kind of removing you can have your mocs

00:19:47,830 --> 00:19:54,220
return a value so you can work around

00:19:50,620 --> 00:19:56,020
that in some instances and hopefully

00:19:54,220 --> 00:19:59,620
your tests are small enough that it

00:19:56,020 --> 00:20:02,490
doesn't really matter anyway so here's

00:19:59,620 --> 00:20:04,870
another example of using a mock and

00:20:02,490 --> 00:20:07,360
inspecting what happens there's some

00:20:04,870 --> 00:20:09,240
complicated stuff here about filtering

00:20:07,360 --> 00:20:12,029
out things that I wasn't expecting

00:20:09,240 --> 00:20:13,830
that's because i'm using mock

00:20:12,029 --> 00:20:17,940
balls to look at how it was called

00:20:13,830 --> 00:20:20,909
earlier i was looking at mach call args

00:20:17,940 --> 00:20:23,369
list in the end my takeaway if you're

00:20:20,909 --> 00:20:25,529
using boxes just look at call args least

00:20:23,369 --> 00:20:27,659
don't look at mach calls it because it's

00:20:25,529 --> 00:20:33,629
simple you don't have to worry about non

00:20:27,659 --> 00:20:35,399
zero and land things i mentioned earlier

00:20:33,629 --> 00:20:37,229
how there's my script looks at a

00:20:35,399 --> 00:20:39,479
configuration file to work out the

00:20:37,229 --> 00:20:42,210
ordering so in my testing I need to

00:20:39,479 --> 00:20:44,759
check how the script behaves when I do

00:20:42,210 --> 00:20:45,899
specify a configuration file and how /

00:20:44,759 --> 00:20:50,190
Hayes when I don't specify a

00:20:45,899 --> 00:20:52,139
configuration file so this is another

00:20:50,190 --> 00:20:56,429
view of my script that I'm testing as

00:20:52,139 --> 00:21:01,049
you can see it does amyl load open on an

00:20:56,429 --> 00:21:02,989
argument to find this sequences file so

00:21:01,049 --> 00:21:06,419
the question is in my tests how do i

00:21:02,989 --> 00:21:07,889
arrange that to happen unit test has a

00:21:06,419 --> 00:21:09,929
way of doing that it's called the setup

00:21:07,889 --> 00:21:14,249
and the 10-hour methods so in the setup

00:21:09,929 --> 00:21:17,219
you can create this file and then tear

00:21:14,249 --> 00:21:20,580
down you can remove that file he's an

00:21:17,219 --> 00:21:23,580
example of doing that I also learnt

00:21:20,580 --> 00:21:26,639
later on that you can do it on a class

00:21:23,580 --> 00:21:28,710
kind of approaches a setup class which

00:21:26,639 --> 00:21:31,259
for some reason I don't remember I

00:21:28,710 --> 00:21:32,460
needed to do to specify the arguments

00:21:31,259 --> 00:21:46,230
for the test to say where there was a

00:21:32,460 --> 00:21:50,370
sequences amo file in my code I'm okay

00:21:46,230 --> 00:21:52,860
in my code I do an open of the etsy salt

00:21:50,370 --> 00:21:54,660
minion ID file and when I was starting

00:21:52,860 --> 00:21:56,130
to write this talk on was riding on a

00:21:54,660 --> 00:21:57,870
laptop this laptop that doesn't have

00:21:56,130 --> 00:22:00,330
solving stalled and suddenly all my

00:21:57,870 --> 00:22:04,080
tests were blowing up because there is

00:22:00,330 --> 00:22:05,640
no salt minion ID file so I need to work

00:22:04,080 --> 00:22:07,290
out how I was going to deal with that

00:22:05,640 --> 00:22:08,790
and I came up with a solution which is

00:22:07,290 --> 00:22:12,840
the wrong solution and I'll show you

00:22:08,790 --> 00:22:17,010
that this is the wrong solution this is

00:22:12,840 --> 00:22:20,010
a replacing built-ins open so that when

00:22:17,010 --> 00:22:23,700
you open that particular path it returns

00:22:20,010 --> 00:22:25,770
you know a file object that has the

00:22:23,700 --> 00:22:28,200
information that I wanted it and

00:22:25,770 --> 00:22:32,490
otherwise it just you know uses the

00:22:28,200 --> 00:22:34,350
default open and that works but it's not

00:22:32,490 --> 00:22:36,000
the right answer the right answer is to

00:22:34,350 --> 00:22:38,100
refactor the script that you have

00:22:36,000 --> 00:22:39,780
control of so it's easy to stub that

00:22:38,100 --> 00:22:41,190
functionality out instead of in the

00:22:39,780 --> 00:22:45,380
scriptures doing open it should call a

00:22:41,190 --> 00:22:48,660
method that I can you know I can patch

00:22:45,380 --> 00:22:51,179
and that leads me to a general principle

00:22:48,660 --> 00:22:53,220
that I I imagine people who have done

00:22:51,179 --> 00:22:54,840
testing before have or you discovered

00:22:53,220 --> 00:22:57,330
this but for me the idea is that you

00:22:54,840 --> 00:22:59,790
should patch as high as you can you

00:22:57,330 --> 00:23:01,169
probably don't need to test the soldiers

00:22:59,790 --> 00:23:02,610
environment because someone else is

00:23:01,169 --> 00:23:04,020
testing that if you're doing database

00:23:02,610 --> 00:23:05,850
calls you probably don't need to test

00:23:04,020 --> 00:23:07,890
the database worse because someone else

00:23:05,850 --> 00:23:10,710
is hopefully testing that you only need

00:23:07,890 --> 00:23:13,919
to test your code so it doesn't make

00:23:10,710 --> 00:23:15,870
sense for me to test or to stub get into

00:23:13,919 --> 00:23:18,210
reaching into buildings open I should

00:23:15,870 --> 00:23:19,919
test my code I should make my code

00:23:18,210 --> 00:23:23,150
testable which is something that other

00:23:19,919 --> 00:23:23,150
people have been talking about a lot

00:23:26,909 --> 00:23:33,690
I'll run a little bit early have we got

00:23:29,190 --> 00:23:35,909
questions I have prepared some questions

00:23:33,690 --> 00:23:38,489
already just in case there was no

00:23:35,909 --> 00:23:48,210
questions so there's some answers

00:23:38,489 --> 00:23:50,159
already and the answer to the last

00:23:48,210 --> 00:23:52,049
question unfortunately has fallen off

00:23:50,159 --> 00:24:00,779
the end of the slide so that'll just

00:23:52,049 --> 00:24:05,029
have to go unanswered thank you oh we

00:24:00,779 --> 00:24:07,289
have a question thanks of that talk

00:24:05,029 --> 00:24:09,330
obviously with Russell Keys McGee

00:24:07,289 --> 00:24:10,799
talking next door somebody else has to

00:24:09,330 --> 00:24:13,739
step in to provide question so I'm glad

00:24:10,799 --> 00:24:17,989
you took the initiative um I used to

00:24:13,739 --> 00:24:20,249
work with Jeff so question does the

00:24:17,989 --> 00:24:24,720
script that upgrades all our lettings

00:24:20,249 --> 00:24:26,759
boxes work yet as he as here as in with

00:24:24,720 --> 00:24:28,379
this testing have you been able to

00:24:26,759 --> 00:24:31,649
achieve what you set out to achieve

00:24:28,379 --> 00:24:37,289
which was to make a reliable script to

00:24:31,649 --> 00:24:39,509
do that task well not quite and so when

00:24:37,289 --> 00:24:40,950
the problems Tim saw was that we get

00:24:39,509 --> 00:24:43,379
halfway through the script and things

00:24:40,950 --> 00:24:45,419
would disappear and i think i found that

00:24:43,379 --> 00:24:48,720
was due to a salt bug in earlier

00:24:45,419 --> 00:24:50,639
versions so that problems gone away but

00:24:48,720 --> 00:24:53,460
every time I run the script in

00:24:50,639 --> 00:24:55,739
production on not quite a monthly basis

00:24:53,460 --> 00:24:57,419
I learned more about the environment so

00:24:55,739 --> 00:25:00,419
I can't say that I am confident though

00:24:57,419 --> 00:25:03,179
yet at the point where i can say yeah

00:25:00,419 --> 00:25:05,519
this works reliably foolproof the same

00:25:03,179 --> 00:25:07,799
every time it turns out that our testing

00:25:05,519 --> 00:25:12,559
is good but you learn different things

00:25:07,799 --> 00:25:12,559
in production than you do from testing

00:25:12,950 --> 00:25:19,440
follow-up question if nobody else has

00:25:15,210 --> 00:25:22,320
questions testing is often done in

00:25:19,440 --> 00:25:24,149
conjunction with coverage analysis to

00:25:22,320 --> 00:25:26,729
make sure you've got tests that cover

00:25:24,149 --> 00:25:28,710
all the code yep but that's still

00:25:26,729 --> 00:25:30,720
different from covering all the possible

00:25:28,710 --> 00:25:32,669
paths through the code which reflect

00:25:30,720 --> 00:25:34,169
things that happen in the real world

00:25:32,669 --> 00:25:36,889
outside your code that are affecting

00:25:34,169 --> 00:25:36,889
their code

00:25:37,380 --> 00:25:42,240
is there do you have a sense of how much

00:25:39,780 --> 00:25:45,900
testing how much coverage of code you've

00:25:42,240 --> 00:25:48,120
gone out with tests not in this case but

00:25:45,900 --> 00:25:53,340
i was looking at testing in some other

00:25:48,120 --> 00:25:54,960
scripts that we use at work yeah i can't

00:25:53,340 --> 00:25:56,130
remember exactly what that code was but

00:25:54,960 --> 00:25:58,470
that was the first time i looked at the

00:25:56,130 --> 00:26:00,180
code coverage kind of tooling and in

00:25:58,470 --> 00:26:02,580
that case i did fire it up and get

00:26:00,180 --> 00:26:03,690
working and it seemed to have some

00:26:02,580 --> 00:26:07,440
numbers that were a hundred percent in

00:26:03,690 --> 00:26:10,200
some numbers that weren't so so in this

00:26:07,440 --> 00:26:12,930
case no i don't have coverage kind of

00:26:10,200 --> 00:26:15,420
results of it but now i do know how to

00:26:12,930 --> 00:26:19,080
sew yeah that would be one of the next

00:26:15,420 --> 00:26:25,620
steps apart from just giving it a go you

00:26:19,080 --> 00:26:29,990
know next month have you added tests all

00:26:25,620 --> 00:26:29,990
your existing parking scripts um

00:26:30,090 --> 00:26:36,059
no I haven't gone on retrofitted test to

00:26:33,150 --> 00:26:38,370
all my existing Python scripts but that

00:26:36,059 --> 00:26:40,110
does sound like a good idea for a talk

00:26:38,370 --> 00:26:41,640
for next year you know the story of what

00:26:40,110 --> 00:26:43,679
happened when I went oh well I should

00:26:41,640 --> 00:26:48,570
have tests on everything let's do that

00:26:43,679 --> 00:26:51,630
actually shouldn't take too long any

00:26:48,570 --> 00:26:53,990
other questions all right thank you very

00:26:51,630 --> 00:26:53,990
much

00:27:03,590 --> 00:27:05,650

YouTube URL: https://www.youtube.com/watch?v=eteKEpoV8Lk


