Title: Learn You a Flask by Lachlan Blackhall
Publication date: 2015-08-04
Playlist: PyCon Australia 2015
Description: 
	Flask is a Python web framework that is both lightweight and powerful. With an active community, and a diverse and versatile choice of plugins, Flask allows you to scale from simple single-URL websites through to highly complex website architectures. 

In this talk we will begin by setting up a simple Flask powered website and get it running on the Heroku PaaS. We will then demonstrate how to integrate Flask and SQLAlchemy (a powerful ORM) to allow database access and get this uploaded and working on Heroku as well.

Finally we will discuss some more advanced concepts and review a number of the Flask plugins to get you started on the path to building great web-based projects.


PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:09,950 --> 00:00:14,480
so next up art first up I guess we have

00:00:12,889 --> 00:00:17,390
Lachlan back well here's the co-founder

00:00:14,480 --> 00:00:24,830
and CTO of repositories called learn you

00:00:17,390 --> 00:00:26,509
a flask please welcome him good morning

00:00:24,830 --> 00:00:27,649
everyone I hope you've enjoyed the

00:00:26,509 --> 00:00:31,910
conference thus far and I hope you have

00:00:27,649 --> 00:00:33,950
a productive day today so I've blatantly

00:00:31,910 --> 00:00:35,750
stolen the wording of the title from the

00:00:33,950 --> 00:00:37,790
Haskell things I think it's an awesome i

00:00:35,750 --> 00:00:39,410
love their tutorial but Sonny nothing

00:00:37,790 --> 00:00:41,629
actually has got related this talk it's

00:00:39,410 --> 00:00:44,090
going to strictly stick two flasks and

00:00:41,629 --> 00:00:45,800
hopefully some of you may one day get

00:00:44,090 --> 00:00:47,210
wisdom and wealth from using flask but

00:00:45,800 --> 00:00:51,740
for the time being I found that not to

00:00:47,210 --> 00:00:55,579
be the case so just to give you a little

00:00:51,740 --> 00:00:57,020
background I'm a co-founder of a company

00:00:55,579 --> 00:01:00,050
called deposit power web based in the

00:00:57,020 --> 00:01:02,660
acct we write software to control energy

00:01:00,050 --> 00:01:04,070
storage in the grid so we don't build

00:01:02,660 --> 00:01:05,659
batteries but we build the software that

00:01:04,070 --> 00:01:08,570
tells them what to do intelligently and

00:01:05,659 --> 00:01:10,700
trade software in the market so you can

00:01:08,570 --> 00:01:12,110
see why the battery that's under our

00:01:10,700 --> 00:01:14,299
control and some of our customers and

00:01:12,110 --> 00:01:16,819
this is an active one of the apps that

00:01:14,299 --> 00:01:20,840
we have so I show I show you this only

00:01:16,819 --> 00:01:23,109
to demonstrate the fact that we have we

00:01:20,840 --> 00:01:25,969
used flask a lot in our infrastructure

00:01:23,109 --> 00:01:28,310
so sort of perhaps contrary to popular

00:01:25,969 --> 00:01:29,929
opinion sometimes flask is actually

00:01:28,310 --> 00:01:31,749
production ready and it's really you

00:01:29,929 --> 00:01:34,399
know for us it's really quite useful

00:01:31,749 --> 00:01:39,529
very very simple to get started with so

00:01:34,399 --> 00:01:42,229
uh so anyone who's come across flash

00:01:39,529 --> 00:01:45,429
before you're probably probably seen

00:01:42,229 --> 00:01:47,869
this get on to the to the flask website

00:01:45,429 --> 00:01:51,740
and it tells you it's just a meter micro

00:01:47,869 --> 00:01:53,479
framework for Python now the thing is

00:01:51,740 --> 00:01:55,069
that there's this you I feel that

00:01:53,479 --> 00:01:57,139
there's this huge animosity between the

00:01:55,069 --> 00:01:59,990
flask community and the Django community

00:01:57,139 --> 00:02:01,459
and i suppose what i'd like to say is

00:01:59,990 --> 00:02:04,429
it's absolutely no reason for that to

00:02:01,459 --> 00:02:06,340
exist at all so we actually use both

00:02:04,429 --> 00:02:09,140
flask and django in our infrastructure

00:02:06,340 --> 00:02:12,830
and they're useful for very very

00:02:09,140 --> 00:02:14,840
different things so this talk is not

00:02:12,830 --> 00:02:17,450
about trying to migrate people away from

00:02:14,840 --> 00:02:18,980
Django it's basically to give you an

00:02:17,450 --> 00:02:22,970
introduction to how you can do things

00:02:18,980 --> 00:02:23,840
with flask so this is the this is the

00:02:22,970 --> 00:02:27,260
typical hello

00:02:23,840 --> 00:02:29,890
example that flask provides you and I

00:02:27,260 --> 00:02:33,769
find in general it's not a criticism of

00:02:29,890 --> 00:02:36,290
documentation or a flask but typically

00:02:33,769 --> 00:02:38,629
you see this and then they always

00:02:36,290 --> 00:02:40,610
basically say from this you can build

00:02:38,629 --> 00:02:44,090
anything you want but that's left as an

00:02:40,610 --> 00:02:46,280
exercise for the reader and to be honest

00:02:44,090 --> 00:02:47,690
when I first when I first sort of saw

00:02:46,280 --> 00:02:49,610
flask and you get this up and running

00:02:47,690 --> 00:02:51,200
you're like a cool this amazing I can

00:02:49,610 --> 00:02:52,879
get something working in 30 seconds

00:02:51,200 --> 00:02:55,220
think how much I'm gonna be able to get

00:02:52,879 --> 00:02:56,750
working after that and then you run into

00:02:55,220 --> 00:02:59,090
that wall all of a sudden we're like ahh

00:02:56,750 --> 00:03:01,400
well this is awesome like I've got this

00:02:59,090 --> 00:03:02,209
really you know capable tool and it's

00:03:01,400 --> 00:03:03,920
going to be able to do all these things

00:03:02,209 --> 00:03:05,360
for me but I actually don't know how

00:03:03,920 --> 00:03:09,829
it's going to do any of these things for

00:03:05,360 --> 00:03:12,410
me so the talk today is really to give

00:03:09,829 --> 00:03:15,379
you to walk you through a very simple

00:03:12,410 --> 00:03:18,890
application that I built precisely for

00:03:15,379 --> 00:03:20,720
the conference so i should say i'm not a

00:03:18,890 --> 00:03:23,480
front end designer so the actual UI

00:03:20,720 --> 00:03:24,890
component is absolutely terrible I'll

00:03:23,480 --> 00:03:28,130
leave you to judge whether the back end

00:03:24,890 --> 00:03:30,260
components also terrible but but really

00:03:28,130 --> 00:03:32,359
the the goal list at the end of the day

00:03:30,260 --> 00:03:35,090
you can walk away understanding not only

00:03:32,359 --> 00:03:36,920
how flask works in the first 30 seconds

00:03:35,090 --> 00:03:39,769
you touch it but what you can actually

00:03:36,920 --> 00:03:41,510
do with some of the other extensions and

00:03:39,769 --> 00:03:42,769
plugins that are available for it and

00:03:41,510 --> 00:03:46,989
how you might use that to actually

00:03:42,769 --> 00:03:49,299
scaffold a nap of reasonable size and

00:03:46,989 --> 00:03:51,980
it's probably also worth noting that

00:03:49,299 --> 00:03:53,930
flask is actually you know it's gone

00:03:51,980 --> 00:03:56,780
from being what was actually a practical

00:03:53,930 --> 00:03:59,599
joke initially it was supposed to be a

00:03:56,780 --> 00:04:01,819
practical joke play on bottle and flask

00:03:59,599 --> 00:04:03,560
was the what they called it but it's

00:04:01,819 --> 00:04:05,930
actually growing into a community where

00:04:03,560 --> 00:04:08,720
you're actually getting capabilities to

00:04:05,930 --> 00:04:10,340
build much much bigger apps so it's

00:04:08,720 --> 00:04:12,410
heading towards offering some of them

00:04:10,340 --> 00:04:15,109
wore some of the you know the features

00:04:12,410 --> 00:04:16,820
that Django's more well known for and

00:04:15,109 --> 00:04:18,289
anecdotally what I've found is that you

00:04:16,820 --> 00:04:19,459
tend to start building with flask and

00:04:18,289 --> 00:04:20,750
all the sudden you're like oh I wish I

00:04:19,459 --> 00:04:22,820
had this capability so you build out a

00:04:20,750 --> 00:04:24,349
module for this and it rapidly starts to

00:04:22,820 --> 00:04:27,789
look like a lot like what's already been

00:04:24,349 --> 00:04:27,789
built in the Django community so

00:04:28,720 --> 00:04:32,479
so what we're going to do today I'm

00:04:31,250 --> 00:04:34,039
going to talk about flask I'm going to

00:04:32,479 --> 00:04:37,190
talk about the plugins and extensions

00:04:34,039 --> 00:04:39,919
that are available I've built this

00:04:37,190 --> 00:04:42,800
awesome app which is beautiful in its

00:04:39,919 --> 00:04:46,039
monochrome glory and it's actually it's

00:04:42,800 --> 00:04:47,419
up and running at the moment and I'm

00:04:46,039 --> 00:04:50,659
going to just sort of walk you through

00:04:47,419 --> 00:04:52,580
the code show you what plugins there are

00:04:50,659 --> 00:04:53,810
how you integrate them how you build an

00:04:52,580 --> 00:04:56,210
app around it and then finally how you

00:04:53,810 --> 00:04:57,770
put it on to Heroku I'm going to resist

00:04:56,210 --> 00:05:00,860
the temptation to do this all as a live

00:04:57,770 --> 00:05:02,449
demo however I'd be quite happy to walk

00:05:00,860 --> 00:05:03,770
anyone through it and if you jump on

00:05:02,449 --> 00:05:05,150
github the code is already there and

00:05:03,770 --> 00:05:06,319
there's full instructions so you should

00:05:05,150 --> 00:05:12,380
actually be able to spin it up by

00:05:06,319 --> 00:05:13,759
following those instructions I hope so

00:05:12,380 --> 00:05:17,120
the thing that probably differentiates

00:05:13,759 --> 00:05:19,490
flask from from Django not that they

00:05:17,120 --> 00:05:21,860
need to be compared is that flask in its

00:05:19,490 --> 00:05:24,110
core the core repository actually

00:05:21,860 --> 00:05:27,530
doesn't provide many capabilities simply

00:05:24,110 --> 00:05:28,969
beyond serving requests which is awesome

00:05:27,530 --> 00:05:30,229
for lots of reasons because when you

00:05:28,969 --> 00:05:31,520
start it makes it really easy to

00:05:30,229 --> 00:05:34,009
understand what the server is actually

00:05:31,520 --> 00:05:36,289
doing so you can see what HTTP verbs are

00:05:34,009 --> 00:05:39,889
coming in and then you can respond

00:05:36,289 --> 00:05:41,870
appropriately so that's awesome when

00:05:39,889 --> 00:05:43,520
you're first starting off but pretty

00:05:41,870 --> 00:05:44,690
rapidly to actually do anything useful

00:05:43,520 --> 00:05:46,849
with it you want to start using some of

00:05:44,690 --> 00:05:48,229
the plugins so the plugins that are

00:05:46,849 --> 00:05:50,389
available or available on is flask

00:05:48,229 --> 00:05:54,770
extensions page you can see up there

00:05:50,389 --> 00:05:57,110
there's probably hundreds I'd say now of

00:05:54,770 --> 00:05:59,240
those hundreds there's probably half a

00:05:57,110 --> 00:06:03,289
dozen to a dozen that sort of broadly

00:05:59,240 --> 00:06:05,630
considered to be core plugins that are

00:06:03,289 --> 00:06:08,029
well tested against so the ones that

00:06:05,630 --> 00:06:11,750
we're going to look at today are Flast

00:06:08,029 --> 00:06:14,330
SQL alchemy flask admin flask storm path

00:06:11,750 --> 00:06:16,279
which is a commercial provider but it

00:06:14,330 --> 00:06:19,190
basically wraps flask logging which is a

00:06:16,279 --> 00:06:23,509
community extension and flask what the

00:06:19,190 --> 00:06:24,590
form for forms so the plug-in page is an

00:06:23,509 --> 00:06:25,909
awesome place to start though if you're

00:06:24,590 --> 00:06:28,599
actually looking for capabilities to

00:06:25,909 --> 00:06:28,599
including your app

00:06:30,240 --> 00:06:36,940
so the first thing I suppose would like

00:06:34,090 --> 00:06:40,630
to say that flask is that the fact that

00:06:36,940 --> 00:06:42,250
you can make a nap in a single code in a

00:06:40,630 --> 00:06:44,140
single piece of code does not mean you

00:06:42,250 --> 00:06:46,690
should make a nap in a single piece of

00:06:44,140 --> 00:06:49,060
code I just really I find it really

00:06:46,690 --> 00:06:50,590
amusing how often people got called is

00:06:49,060 --> 00:06:52,630
really simple library therefore I can

00:06:50,590 --> 00:06:55,690
build humongously large apps in a single

00:06:52,630 --> 00:06:58,270
page because I can and my strong advice

00:06:55,690 --> 00:06:59,740
would be not to move down that path if

00:06:58,270 --> 00:07:01,900
you want to do a hello world it's fine

00:06:59,740 --> 00:07:05,740
to have everything in one in one in one

00:07:01,900 --> 00:07:07,990
file but here flasks and programs more

00:07:05,740 --> 00:07:09,520
generally can learn a lot from how MVC

00:07:07,990 --> 00:07:12,040
frameworks do things by actually

00:07:09,520 --> 00:07:13,210
structuring your code well because

00:07:12,040 --> 00:07:15,460
you'll find that the clarity that comes

00:07:13,210 --> 00:07:17,200
from structuring it well actually means

00:07:15,460 --> 00:07:21,610
you can build much much larger project

00:07:17,200 --> 00:07:24,250
projects and keep track of it so I'm

00:07:21,610 --> 00:07:26,460
going to now switch across to the

00:07:24,250 --> 00:07:26,460
cottage

00:07:36,249 --> 00:07:40,580
so I apologize for the resolution here

00:07:39,110 --> 00:07:43,639
the code will be flying I'll just

00:07:40,580 --> 00:07:45,199
quickly walk you through the structure

00:07:43,639 --> 00:07:46,279
which is going to be timing and I'm

00:07:45,199 --> 00:07:50,659
sorry I don't think I can make it any

00:07:46,279 --> 00:07:54,740
bigger so this is the exact structures

00:07:50,659 --> 00:07:58,309
in the code on github so I tend to like

00:07:54,740 --> 00:08:00,139
you have a top-level folder for your for

00:07:58,309 --> 00:08:03,139
your app underneath that I tend to like

00:08:00,139 --> 00:08:06,229
to break it up into models for your data

00:08:03,139 --> 00:08:10,279
controllers for your controllers and

00:08:06,229 --> 00:08:13,550
typically your will templates for your

00:08:10,279 --> 00:08:15,499
views so the templates are in templates

00:08:13,550 --> 00:08:18,309
so the views are in templates and then a

00:08:15,499 --> 00:08:20,389
whole bunch of static files in static

00:08:18,309 --> 00:08:22,399
underneath that there's typically an in

00:08:20,389 --> 00:08:24,199
it which is this file here and I'll walk

00:08:22,399 --> 00:08:25,550
you through this the in it tends to be

00:08:24,199 --> 00:08:27,639
the easiest way to set up all of your

00:08:25,550 --> 00:08:33,829
plugins and actually provided grounding

00:08:27,639 --> 00:08:35,930
for the app separate settings file there

00:08:33,829 --> 00:08:37,490
is an SQLite database here but it

00:08:35,930 --> 00:08:39,289
actually uses postgres in production and

00:08:37,490 --> 00:08:40,909
i'll show you how you can use you can

00:08:39,289 --> 00:08:42,680
use SQLite for local development and

00:08:40,909 --> 00:08:45,319
then postgres seamlessly for production

00:08:42,680 --> 00:08:46,550
which is actually really cool and then I

00:08:45,319 --> 00:08:48,079
tend to have a separate scripts folder

00:08:46,550 --> 00:08:51,259
which actually makes it easier to get

00:08:48,079 --> 00:08:53,000
across in to Heroku because at some

00:08:51,259 --> 00:08:55,939
point you need to expose the scripts

00:08:53,000 --> 00:08:57,470
that actually get run there so there's a

00:08:55,939 --> 00:08:58,759
the innodb should be pretty

00:08:57,470 --> 00:09:01,130
self-explanatory it actually creates

00:08:58,759 --> 00:09:04,670
your database for the first time and

00:09:01,130 --> 00:09:07,279
then a run flask app for running locally

00:09:04,670 --> 00:09:11,300
and then the proc file that's there is

00:09:07,279 --> 00:09:15,050
the definition for a roku so first

00:09:11,300 --> 00:09:16,880
things first actually setting up it

00:09:15,050 --> 00:09:19,029
really is as simple setting it up is as

00:09:16,880 --> 00:09:21,620
simple as they they say on the web page

00:09:19,029 --> 00:09:25,189
you're importing it you're setting up

00:09:21,620 --> 00:09:27,889
your last name one thing that they don't

00:09:25,189 --> 00:09:28,970
tend to really push as much as they

00:09:27,889 --> 00:09:32,509
probably shoot is that you actually

00:09:28,970 --> 00:09:34,240
really do need a secret key for setting

00:09:32,509 --> 00:09:36,769
it up if you want to do anything with

00:09:34,240 --> 00:09:38,690
forms and to get you know CSRF

00:09:36,769 --> 00:09:40,670
protection and things like that you

00:09:38,690 --> 00:09:43,400
have to do this so I would always

00:09:40,670 --> 00:09:47,120
encourage you to do this all the we're

00:09:43,400 --> 00:09:48,710
importing is just an OS random string to

00:09:47,120 --> 00:09:50,090
do it so it's really easy to set up but

00:09:48,710 --> 00:09:52,730
it's a really important part of setting

00:09:50,090 --> 00:09:55,100
up early I tend to make sure that we've

00:09:52,730 --> 00:09:57,580
got logging you do actually have logging

00:09:55,100 --> 00:10:02,360
within flask if you want to use it there

00:09:57,580 --> 00:10:04,310
once you've set up flask I think it's

00:10:02,360 --> 00:10:06,110
the best way to actually structure the

00:10:04,310 --> 00:10:08,420
app is just to bring in all of your

00:10:06,110 --> 00:10:11,420
extensions here now you actually don't

00:10:08,420 --> 00:10:13,100
need to use the specific flask

00:10:11,420 --> 00:10:15,140
extensions for a lot of these so you can

00:10:13,100 --> 00:10:18,890
actually bring in SQL alchemy which is a

00:10:15,140 --> 00:10:20,270
beautiful ORM as SQL alchemy the beauty

00:10:18,890 --> 00:10:21,350
of using the extensions is that

00:10:20,270 --> 00:10:23,540
somebody's actually put the time and

00:10:21,350 --> 00:10:26,720
effort into getting those extensions to

00:10:23,540 --> 00:10:30,650
play nicely in a web based environment

00:10:26,720 --> 00:10:32,900
so particularly SQL alchemy the way they

00:10:30,650 --> 00:10:36,050
handle the scope of the connections and

00:10:32,900 --> 00:10:37,850
things like that in the sessions someone

00:10:36,050 --> 00:10:39,500
spent a lot of time thinking about it

00:10:37,850 --> 00:10:41,660
and they've got it right so just just

00:10:39,500 --> 00:10:44,050
use flask its thrill alchemy don't

00:10:41,660 --> 00:10:48,890
actually try and roll it yourself so

00:10:44,050 --> 00:10:51,050
setting up the database so setting up

00:10:48,890 --> 00:10:55,160
access to the database is what's what we

00:10:51,050 --> 00:10:58,250
do first so flask use is a really simple

00:10:55,160 --> 00:11:00,650
config structure and so app config is a

00:10:58,250 --> 00:11:05,240
dictionary and it just contains keys and

00:11:00,650 --> 00:11:07,250
values and every extension writes its

00:11:05,240 --> 00:11:08,570
values there and reads from its reads

00:11:07,250 --> 00:11:10,370
from the configuration there so it's

00:11:08,570 --> 00:11:11,960
nice and easy typically well-documented

00:11:10,370 --> 00:11:14,750
for all of the extensions and for flask

00:11:11,960 --> 00:11:18,770
itself so here we're just going to bring

00:11:14,750 --> 00:11:23,860
in scroll across we're going to bring in

00:11:18,770 --> 00:11:23,860
the database URL from settings

00:11:26,710 --> 00:11:35,000
so the way I tend to do the database RL

00:11:30,740 --> 00:11:37,670
is this so using environment variables

00:11:35,000 --> 00:11:40,160
is obviously a hugely useful way to do

00:11:37,670 --> 00:11:42,350
config but for something like actually

00:11:40,160 --> 00:11:45,410
migrating it on to Heroku eventually

00:11:42,350 --> 00:11:47,750
it's a necessity because your invite

00:11:45,410 --> 00:11:49,580
your production database will end up

00:11:47,750 --> 00:11:52,010
being exposed through this parameter

00:11:49,580 --> 00:11:53,840
that said I don't want to set up

00:11:52,010 --> 00:11:56,660
postgres on my local machine to do

00:11:53,840 --> 00:11:57,680
testing in fact one huge downside of

00:11:56,660 --> 00:11:59,150
running a Mac is that setting up

00:11:57,680 --> 00:12:01,400
postgres on your Mac is actually

00:11:59,150 --> 00:12:06,410
nightmarishly difficult for what for

00:12:01,400 --> 00:12:09,530
what it is so I tend to just create a

00:12:06,410 --> 00:12:12,110
basic SQLite database that I use locally

00:12:09,530 --> 00:12:14,810
so you get most of the features you need

00:12:12,110 --> 00:12:15,860
it's really really easy to test but you

00:12:14,810 --> 00:12:18,470
don't have to worry about anything

00:12:15,860 --> 00:12:19,550
beyond that I'll come back to these in a

00:12:18,470 --> 00:12:28,610
minute but they're related to

00:12:19,550 --> 00:12:32,380
authentication so we set up the

00:12:28,610 --> 00:12:35,360
extension we initialize the DB object

00:12:32,380 --> 00:12:38,810
and for historical reasons myself I tend

00:12:35,360 --> 00:12:40,580
to put into a DB session so that's your

00:12:38,810 --> 00:12:43,490
session objects that you can now use for

00:12:40,580 --> 00:12:46,280
all of your database access throughout

00:12:43,490 --> 00:12:48,800
your app so I've heard a couple of talks

00:12:46,280 --> 00:12:51,260
where people have sort of noted the

00:12:48,800 --> 00:12:54,860
difficulty of dealing with database

00:12:51,260 --> 00:12:58,310
access in flask and more generally I

00:12:54,860 --> 00:13:00,800
can't I can't emphasize how good SQL

00:12:58,310 --> 00:13:02,450
alchemy is some of my colleagues are

00:13:00,800 --> 00:13:05,300
here and they've heard me rant about it

00:13:02,450 --> 00:13:06,770
before it work but SQL alchemy has a it

00:13:05,300 --> 00:13:10,070
has a slightly steeper learning curve

00:13:06,770 --> 00:13:12,200
than many things it's this like

00:13:10,070 --> 00:13:13,850
incredible piece of software that's been

00:13:12,200 --> 00:13:16,700
built up over the last ten years and

00:13:13,850 --> 00:13:19,370
they've actually just got to version one

00:13:16,700 --> 00:13:22,340
so they now just consider release ready

00:13:19,370 --> 00:13:24,530
but it's phenomenal in what it can do it

00:13:22,340 --> 00:13:26,420
works with all the database engines you

00:13:24,530 --> 00:13:28,160
would expect it to work with it's really

00:13:26,420 --> 00:13:29,900
really simple to set up models just show

00:13:28,160 --> 00:13:31,610
you in a minute but that initial

00:13:29,900 --> 00:13:32,510
learning curve steers people away from

00:13:31,610 --> 00:13:34,280
it to the point where they're like

00:13:32,510 --> 00:13:36,150
that's fine i'm just going to use r or

00:13:34,280 --> 00:13:39,540
SQL to access the database

00:13:36,150 --> 00:13:42,840
do not you there is no excuse for using

00:13:39,540 --> 00:13:44,580
r or SQL with Python programmers we like

00:13:42,840 --> 00:13:46,350
working high up the stack which should

00:13:44,580 --> 00:13:49,920
access our databases way up the stack

00:13:46,350 --> 00:13:51,360
and do it through an l RM so learn SQL

00:13:49,920 --> 00:13:53,550
alchemy if you want to access the

00:13:51,360 --> 00:13:56,340
database because it's in my opinion the

00:13:53,550 --> 00:13:57,780
one true path to accessing databases if

00:13:56,340 --> 00:13:59,280
you don't like it there are other RM s

00:13:57,780 --> 00:14:01,770
available but please don't resort to

00:13:59,280 --> 00:14:05,940
using raw or SQL it's just far more

00:14:01,770 --> 00:14:08,730
painful than it should be the next thing

00:14:05,940 --> 00:14:11,120
we're going to do is it's nice to have a

00:14:08,730 --> 00:14:13,800
bit of a crud access to your database

00:14:11,120 --> 00:14:17,730
especially when you're tinkering Flass

00:14:13,800 --> 00:14:20,010
cuz it's really nice admin plugin that

00:14:17,730 --> 00:14:21,930
actually works with SQL arca me so you

00:14:20,010 --> 00:14:23,990
can actually define your models and then

00:14:21,930 --> 00:14:26,520
you can go and you can go and add and

00:14:23,990 --> 00:14:28,500
you know add delete at a data in your

00:14:26,520 --> 00:14:30,150
database it's kind of cool and you can

00:14:28,500 --> 00:14:33,330
actually visualize it from your app

00:14:30,150 --> 00:14:35,550
which is even better the next thing

00:14:33,330 --> 00:14:38,820
we're adding is authentication and user

00:14:35,550 --> 00:14:40,500
management I'm not promoting I I'm not

00:14:38,820 --> 00:14:43,950
promoting using commercial products you

00:14:40,500 --> 00:14:46,220
don't need to but my view is that user

00:14:43,950 --> 00:14:48,720
security is hugely important and often

00:14:46,220 --> 00:14:50,460
i'd prefer somebody who was doing that

00:14:48,720 --> 00:14:53,940
as a full time job or managing those

00:14:50,460 --> 00:14:55,560
problems so flask storm path is an

00:14:53,940 --> 00:14:56,970
extension that allows you to use the

00:14:55,560 --> 00:14:58,860
storm path service it's free to get

00:14:56,970 --> 00:14:59,760
started on but obviously they've Pina

00:14:58,860 --> 00:15:01,920
they've worked out how to make their

00:14:59,760 --> 00:15:04,290
pound of flesh so but it does work

00:15:01,920 --> 00:15:07,350
really really well and actually these

00:15:04,290 --> 00:15:10,620
four lines of configuration get you not

00:15:07,350 --> 00:15:12,510
just integration into the inter stomper

00:15:10,620 --> 00:15:14,340
but also all of your login screens for

00:15:12,510 --> 00:15:15,480
free which i think is kind of cool to

00:15:14,340 --> 00:15:17,580
get started with you don't have to worry

00:15:15,480 --> 00:15:21,480
about any of that it's based on the

00:15:17,580 --> 00:15:25,740
flask logging plugin which itself is

00:15:21,480 --> 00:15:29,700
actually really really useful so I'd

00:15:25,740 --> 00:15:32,100
encourage checking it out so that's how

00:15:29,700 --> 00:15:34,680
we set up that's how I typically set up

00:15:32,100 --> 00:15:36,960
an application it keeps it nice and so

00:15:34,680 --> 00:15:38,550
well structured and then the last thing

00:15:36,960 --> 00:15:41,580
you do in the initial unit is you

00:15:38,550 --> 00:15:42,990
actually import the the roots and so

00:15:41,580 --> 00:15:45,150
these are just the endpoints that you're

00:15:42,990 --> 00:15:46,449
actually response to which for those of

00:15:45,150 --> 00:15:49,569
you know flask

00:15:46,449 --> 00:15:52,149
you can define elsewhere so this is

00:15:49,569 --> 00:15:57,730
naughty I know but it's convenient

00:15:52,149 --> 00:15:58,839
shorthand so once you've um so once

00:15:57,730 --> 00:16:01,389
you've sort of set up your up like that

00:15:58,839 --> 00:16:02,859
you're good to go you can start working

00:16:01,389 --> 00:16:04,929
with your database and defining your

00:16:02,859 --> 00:16:06,759
roots everything else so the first thing

00:16:04,929 --> 00:16:09,639
I'd like to just just show you briefly

00:16:06,759 --> 00:16:13,449
to re-emphasize why you should use SQL

00:16:09,639 --> 00:16:21,279
alchemy is how you actually set up your

00:16:13,449 --> 00:16:22,419
database so SQL alchemy defines all of

00:16:21,279 --> 00:16:24,720
the things that you're going to need in

00:16:22,419 --> 00:16:31,179
your database and allows you to define

00:16:24,720 --> 00:16:33,850
your objects declaratively so I tend to

00:16:31,179 --> 00:16:35,649
just pull out the these mappings here

00:16:33,850 --> 00:16:37,809
but only just for clarity's sake you

00:16:35,649 --> 00:16:38,889
don't obviously need to but let's

00:16:37,809 --> 00:16:42,040
actually have a look at the data model

00:16:38,889 --> 00:16:45,369
that we're going to use here so we have

00:16:42,040 --> 00:16:47,499
some users I'll have an ID in the

00:16:45,369 --> 00:16:52,389
database a remote ID which corresponds

00:16:47,499 --> 00:16:54,669
to the unique account in storm path I'll

00:16:52,389 --> 00:16:57,160
explain why I do this because it's not

00:16:54,669 --> 00:16:58,929
strictly required but it I find it makes

00:16:57,160 --> 00:17:01,259
relational access it easier on your

00:16:58,929 --> 00:17:03,539
device and you're telling your project

00:17:01,259 --> 00:17:06,370
this is a slightly more advanced

00:17:03,539 --> 00:17:09,279
capability of SQL out for me but you can

00:17:06,370 --> 00:17:11,860
add mix-ins to your data models so for

00:17:09,279 --> 00:17:13,600
doing authorization of what you're

00:17:11,860 --> 00:17:18,069
actually allowed to do having a has

00:17:13,600 --> 00:17:20,079
author mixing means that you can now

00:17:18,069 --> 00:17:22,419
actually say who owns record quite

00:17:20,079 --> 00:17:26,919
easily so this is how you set it up the

00:17:22,419 --> 00:17:31,899
the decorator declared atra is it just

00:17:26,919 --> 00:17:35,139
delays actually setting the sort of

00:17:31,899 --> 00:17:37,870
setting these attributes in the class

00:17:35,139 --> 00:17:39,909
until runtime so it's really just the

00:17:37,870 --> 00:17:42,070
way that s locking sets up the model

00:17:39,909 --> 00:17:43,360
isn't particularly amenable to adding

00:17:42,070 --> 00:17:46,000
things dynamically and this is how you

00:17:43,360 --> 00:17:48,700
add things dynamically so whenever we

00:17:46,000 --> 00:17:53,080
use the hassle author model mixing sorry

00:17:48,700 --> 00:17:55,299
as in to do so to do has author so in

00:17:53,080 --> 00:17:57,220
the to do you'll have to do itself a

00:17:55,299 --> 00:17:58,740
description of the to do and then you'll

00:17:57,220 --> 00:18:00,090
also actually map

00:17:58,740 --> 00:18:01,800
to an author as well so you'll have

00:18:00,090 --> 00:18:04,650
you'll know who owns it so when we

00:18:01,800 --> 00:18:06,570
actually get into two doing permissions

00:18:04,650 --> 00:18:10,740
we've actually got something we can do

00:18:06,570 --> 00:18:12,090
permissions against so for this reason

00:18:10,740 --> 00:18:13,440
and this is I think this is actually

00:18:12,090 --> 00:18:15,809
pretty simple for this reason this is

00:18:13,440 --> 00:18:17,220
why I like using SQL alchemy right it's

00:18:15,809 --> 00:18:19,110
very very clear what your models are

00:18:17,220 --> 00:18:22,230
you've got full control of it in here

00:18:19,110 --> 00:18:23,429
and within your app I haven't done it in

00:18:22,230 --> 00:18:27,570
this up but there's another awesome

00:18:23,429 --> 00:18:30,179
extension called flask migrate so flask

00:18:27,570 --> 00:18:32,730
my great wraps alembic which is a

00:18:30,179 --> 00:18:36,179
database migration tool and it is

00:18:32,730 --> 00:18:38,670
phenomenal it allows you to you know

00:18:36,179 --> 00:18:40,350
keep track of what's going on in your

00:18:38,670 --> 00:18:43,770
database and as you change your model

00:18:40,350 --> 00:18:45,540
you can update the database my one gripe

00:18:43,770 --> 00:18:47,630
with it is that Olympic still doesn't

00:18:45,540 --> 00:18:51,270
understand how to do enums in Postgres

00:18:47,630 --> 00:18:53,040
and so if you are trying to do an enum

00:18:51,270 --> 00:18:54,360
in your database model you have to add a

00:18:53,040 --> 00:18:56,160
few lines of code and if you ever run

00:18:54,360 --> 00:18:58,020
into the problem please feel free to

00:18:56,160 --> 00:18:59,850
contact me because I finally worked out

00:18:58,020 --> 00:19:01,500
how to do it and so I now know the

00:18:59,850 --> 00:19:06,540
actual recipe for it but apart from that

00:19:01,500 --> 00:19:09,420
flask migraines really really cool so

00:19:06,540 --> 00:19:11,160
the other thing I tend to do in terms of

00:19:09,420 --> 00:19:15,300
sort of scaffolding up a project is that

00:19:11,160 --> 00:19:17,040
you've now got your objects for your for

00:19:15,300 --> 00:19:20,130
your model so your database models fine

00:19:17,040 --> 00:19:21,809
but typically you want to you know like

00:19:20,130 --> 00:19:23,460
the beauty of having access to a

00:19:21,809 --> 00:19:26,220
database is that you get transactions

00:19:23,460 --> 00:19:28,260
and things like that I tend to find that

00:19:26,220 --> 00:19:31,260
you actually want to wrap accessing the

00:19:28,260 --> 00:19:38,250
database through some other services so

00:19:31,260 --> 00:19:40,650
I have written a very very simple data

00:19:38,250 --> 00:19:45,090
service model that allows you to create

00:19:40,650 --> 00:19:48,090
objects edit objects allows you to

00:19:45,090 --> 00:19:51,780
delete them check if they exist get one

00:19:48,090 --> 00:19:53,490
and get many there's nothing there's no

00:19:51,780 --> 00:19:56,460
this is probably the longest file in the

00:19:53,490 --> 00:19:58,620
entire app I'm not saying that you

00:19:56,460 --> 00:20:00,330
should always do it this way but I find

00:19:58,620 --> 00:20:03,630
that if you want to access your database

00:20:00,330 --> 00:20:05,429
cleanly wrapping everything in like you

00:20:03,630 --> 00:20:07,160
know these things like rollbacks if you

00:20:05,429 --> 00:20:09,179
have exceptions when you're trying to do

00:20:07,160 --> 00:20:11,460
inserts and updates just keeps

00:20:09,179 --> 00:20:12,250
everything nice and clean so I find this

00:20:11,460 --> 00:20:16,750
is a

00:20:12,250 --> 00:20:18,460
convenient way to to keep track of you

00:20:16,750 --> 00:20:20,260
know to actually to actually access your

00:20:18,460 --> 00:20:23,200
data the other thing I've put in here is

00:20:20,260 --> 00:20:25,540
very very simple permission access to

00:20:23,200 --> 00:20:27,640
the data so you can actually you can

00:20:25,540 --> 00:20:30,760
based on the author which we put in the

00:20:27,640 --> 00:20:32,500
model you can determine whether someone

00:20:30,760 --> 00:20:36,810
actually has the right to access the

00:20:32,500 --> 00:20:36,810
data to delete it to edit out etc etc so

00:20:36,930 --> 00:20:42,250
that's basically the database so sq

00:20:41,440 --> 00:20:44,430
Larkin takes care of all your

00:20:42,250 --> 00:20:46,060
connections based on your database URL

00:20:44,430 --> 00:20:47,590
you don't have to worry about that

00:20:46,060 --> 00:20:48,880
anymore you have these services which

00:20:47,590 --> 00:20:55,840
can instantiate it when you need to

00:20:48,880 --> 00:20:57,280
access data so the the next the thing

00:20:55,840 --> 00:20:58,750
that you throw a flask admin which I

00:20:57,280 --> 00:21:00,760
talked about actually then allows you to

00:20:58,750 --> 00:21:02,620
see what your data looks like so I'm

00:21:00,760 --> 00:21:07,830
sorry to the videographers I'm going to

00:21:02,620 --> 00:21:07,830
switch again actually show you this app

00:21:09,480 --> 00:21:14,620
so this is the app actually running on

00:21:13,000 --> 00:21:16,270
Heroku so as I said it's an awesome

00:21:14,620 --> 00:21:21,180
to-do app it allows a foot to do's and

00:21:16,270 --> 00:21:26,160
descriptions in it has login and whatnot

00:21:21,180 --> 00:21:26,160
but it has admin as well

00:21:33,280 --> 00:21:39,460
just while it's spinning up all right so

00:21:36,730 --> 00:21:42,310
flash guide me now gives you access to

00:21:39,460 --> 00:21:43,510
your database just to do crud stuff so

00:21:42,310 --> 00:21:46,360
you can actually see what's in there so

00:21:43,510 --> 00:21:49,150
you you can see that to do is that are

00:21:46,360 --> 00:21:52,570
there you can see the users that are

00:21:49,150 --> 00:21:55,450
registered etc etc so this is currently

00:21:52,570 --> 00:21:57,010
unsecured so don't have a put admin on a

00:21:55,450 --> 00:21:59,680
server and don't put it behind

00:21:57,010 --> 00:22:01,750
authentication I'm showing you how to do

00:21:59,680 --> 00:22:02,770
this but don't yeah please don't ever do

00:22:01,750 --> 00:22:04,210
this in production it would be insane

00:22:02,770 --> 00:22:06,940
because there's no permissions at all on

00:22:04,210 --> 00:22:09,040
this I find admin it's just a really

00:22:06,940 --> 00:22:10,120
cool way to be able to see when you're

00:22:09,040 --> 00:22:12,160
you know when you're programmatically

00:22:10,120 --> 00:22:14,260
adding data through your through your

00:22:12,160 --> 00:22:22,780
app it's a really cool way to see what

00:22:14,260 --> 00:22:24,310
data is actually getting in there so I'm

00:22:22,780 --> 00:22:31,530
now going to talk about the routes that

00:22:24,310 --> 00:22:31,530
we have in the in the model so

00:22:34,190 --> 00:22:38,090
so there's a few little things I do

00:22:36,200 --> 00:22:41,179
which is just more convenience for flask

00:22:38,090 --> 00:22:42,590
rather than anything else I've got this

00:22:41,179 --> 00:22:44,750
notifications object which just allows

00:22:42,590 --> 00:22:47,120
you to add messages which come up on the

00:22:44,750 --> 00:22:48,289
app and encourage you to have a look at

00:22:47,120 --> 00:22:49,850
it it's not particularly amazing

00:22:48,289 --> 00:22:51,590
practice to do it but it does make it

00:22:49,850 --> 00:22:54,590
easy to pass notifications in and then

00:22:51,590 --> 00:22:57,320
use them within the templates I have a

00:22:54,590 --> 00:23:01,070
simple index page so this is just

00:22:57,320 --> 00:23:02,740
directly serving up a template but then

00:23:01,070 --> 00:23:05,870
we start to get into the more

00:23:02,740 --> 00:23:08,960
interesting aspect I think where we are

00:23:05,870 --> 00:23:12,620
doing things with the data so we have a

00:23:08,960 --> 00:23:17,289
route / to do and this basically just

00:23:12,620 --> 00:23:17,289
brings up a list of the to do's so

00:23:27,450 --> 00:23:31,390
so the interesting thing you saw there

00:23:29,620 --> 00:23:33,490
is you saw that I had to log in all

00:23:31,390 --> 00:23:35,320
right so this is the to do right this is

00:23:33,490 --> 00:23:37,360
the the list view that that we're

00:23:35,320 --> 00:23:38,770
talking about but you saw how to log in

00:23:37,360 --> 00:23:40,090
when I get there and the reason I had to

00:23:38,770 --> 00:23:43,330
log in is because of this app login

00:23:40,090 --> 00:23:45,400
required decorator at login required is

00:23:43,330 --> 00:23:48,040
provided by flask login so it's provided

00:23:45,400 --> 00:23:51,670
by flask SQL out I so by flask storm

00:23:48,040 --> 00:23:54,400
path that's all you have to do that's

00:23:51,670 --> 00:23:56,260
the only addition you have to make in

00:23:54,400 --> 00:23:57,880
your flask code to get authentication

00:23:56,260 --> 00:23:59,140
once you once you've added the plug-in

00:23:57,880 --> 00:24:00,340
and that's that's awesome like the

00:23:59,140 --> 00:24:02,890
capabilities there you know I think

00:24:00,340 --> 00:24:05,560
you're fantastic in the to do list

00:24:02,890 --> 00:24:08,770
there's nothing we we do that's really

00:24:05,560 --> 00:24:09,910
special we use one of the to do this to

00:24:08,770 --> 00:24:11,620
do service which is just the data

00:24:09,910 --> 00:24:13,000
service i showed you before we get many

00:24:11,620 --> 00:24:14,320
with permissions which basically means

00:24:13,000 --> 00:24:17,370
we're just getting the stuff that you're

00:24:14,320 --> 00:24:21,160
able to get and then we send it through

00:24:17,370 --> 00:24:24,130
to the render template all right and

00:24:21,160 --> 00:24:25,510
then the templates just use so i'm not

00:24:24,130 --> 00:24:27,580
going to walk you through ginger 2 which

00:24:25,510 --> 00:24:29,070
is the templating language you can grab

00:24:27,580 --> 00:24:32,740
the code and have a look at it yourself

00:24:29,070 --> 00:24:34,060
but to do is just you know you passing

00:24:32,740 --> 00:24:35,590
variables and then jeans you can use

00:24:34,060 --> 00:24:39,640
them to generate HTML before it sends

00:24:35,590 --> 00:24:48,490
them back to users the other routes we

00:24:39,640 --> 00:24:51,280
have add edit delete etc again they

00:24:48,490 --> 00:24:52,780
don't do anything particularly amazing

00:24:51,280 --> 00:24:54,280
but I think they give a good

00:24:52,780 --> 00:24:57,340
demonstration of how you can actually

00:24:54,280 --> 00:25:00,810
use flask to get data from your database

00:24:57,340 --> 00:25:03,010
and send it back to your own to users

00:25:00,810 --> 00:25:09,540
the one thing that's worth pointing out

00:25:03,010 --> 00:25:11,950
here and I'll do it just above is that

00:25:09,540 --> 00:25:13,510
forms are always a challenging one and

00:25:11,950 --> 00:25:15,640
there's lots of different packages out

00:25:13,510 --> 00:25:17,680
there that do them for flask that the de

00:25:15,640 --> 00:25:20,440
facto approach you see something called

00:25:17,680 --> 00:25:23,050
what the form so what the form allows

00:25:20,440 --> 00:25:28,890
you to define define really really

00:25:23,050 --> 00:25:32,370
simple models sorry simple forms like so

00:25:28,890 --> 00:25:35,890
and then you can instantiate them and

00:25:32,370 --> 00:25:39,010
send them on to your templates all right

00:25:35,890 --> 00:25:41,210
so the nice thing about here is you get

00:25:39,010 --> 00:25:44,660
structured way to actually generate the

00:25:41,210 --> 00:25:47,600
forms and perhaps the more useful part

00:25:44,660 --> 00:25:51,590
is that when you're when you're actually

00:25:47,600 --> 00:25:55,309
editing something you can actually load

00:25:51,590 --> 00:25:57,440
an object from your database and insert

00:25:55,309 --> 00:25:59,809
it into the form so that when the form

00:25:57,440 --> 00:26:01,580
renders on the web page it contains all

00:25:59,809 --> 00:26:03,890
of the data from the database that

00:26:01,580 --> 00:26:06,470
you're editing so it pre populates forms

00:26:03,890 --> 00:26:13,220
as one line it's really really simple to

00:26:06,470 --> 00:26:17,750
do I'm going to close so area so this

00:26:13,220 --> 00:26:19,010
allows you to to get data to process it

00:26:17,750 --> 00:26:21,670
to put it into a template and then

00:26:19,010 --> 00:26:25,309
obviously the render it to your users

00:26:21,670 --> 00:26:28,850
the the last thing I just like to run to

00:26:25,309 --> 00:26:33,140
show you quickly is the part about

00:26:28,850 --> 00:26:34,790
getting it on to Heroku so Heroku itself

00:26:33,140 --> 00:26:36,620
used to be more awesome than it

00:26:34,790 --> 00:26:38,150
currently is I find they've just changed

00:26:36,620 --> 00:26:39,830
their pricing structure and you used to

00:26:38,150 --> 00:26:42,140
be able to get a free Dino permanently

00:26:39,830 --> 00:26:44,660
they now have these hobby dinos which

00:26:42,140 --> 00:26:49,070
are which are hobbled so you can they

00:26:44,660 --> 00:26:51,440
give you 16 hours of run time each day

00:26:49,070 --> 00:26:52,730
but then they sleep so they used to be

00:26:51,440 --> 00:26:54,320
awesome for having long-running worker

00:26:52,730 --> 00:26:57,050
processes but you can no longer do that

00:26:54,320 --> 00:26:58,760
which is a shame but that said I still

00:26:57,050 --> 00:27:01,220
like Heroku because it really is really

00:26:58,760 --> 00:27:05,320
really simple to interact with so the

00:27:01,220 --> 00:27:08,870
proc file for Heroku is as simple as it

00:27:05,320 --> 00:27:11,809
as simple as this and what this says is

00:27:08,870 --> 00:27:14,570
that you're going to have a web worker

00:27:11,809 --> 00:27:17,390
which is going to run this command going

00:27:14,570 --> 00:27:20,660
to call flask app which is a whiskey app

00:27:17,390 --> 00:27:22,370
running unicorn running unicorn the

00:27:20,660 --> 00:27:25,000
other one we define is this unit DB

00:27:22,370 --> 00:27:27,830
script so it basically allows you to

00:27:25,000 --> 00:27:31,340
easily run that to actually create your

00:27:27,830 --> 00:27:33,530
database perhaps more useful if you

00:27:31,340 --> 00:27:36,170
actually want to use this repo to

00:27:33,530 --> 00:27:39,380
actually get something up and running is

00:27:36,170 --> 00:27:40,400
I've actually written I read me which my

00:27:39,380 --> 00:27:44,179
colleagues will now is actually quite

00:27:40,400 --> 00:27:45,559
rare for me so these are the

00:27:44,179 --> 00:27:47,950
instructions you'll need to deploy

00:27:45,559 --> 00:27:50,850
locally and these are step-by-step

00:27:47,950 --> 00:27:53,880
instructions for deploying to Heroku

00:27:50,850 --> 00:27:56,220
alright so I'd encourage you I've tested

00:27:53,880 --> 00:27:57,450
this a number of times so until heroku

00:27:56,220 --> 00:27:59,520
changes the command structure again

00:27:57,450 --> 00:28:01,770
which they periodically do this will

00:27:59,520 --> 00:28:05,370
work it's actually really really quite

00:28:01,770 --> 00:28:06,960
simple to upload to Heroku the

00:28:05,370 --> 00:28:09,510
complexities just sometimes just

00:28:06,960 --> 00:28:12,420
defining the proc file the last thing

00:28:09,510 --> 00:28:16,050
I'd like to just warn you about this

00:28:12,420 --> 00:28:18,090
fund was a hard hard one lesson in your

00:28:16,050 --> 00:28:21,480
requirements.our text which you need

00:28:18,090 --> 00:28:22,890
when you upload you don't need to you

00:28:21,480 --> 00:28:24,540
know you need to define the packages

00:28:22,890 --> 00:28:29,190
that you're using and it's pretty simple

00:28:24,540 --> 00:28:31,680
flask class guardian etc etc flask has

00:28:29,190 --> 00:28:33,540
signaling which you'll see if you look

00:28:31,680 --> 00:28:35,310
at how the authentication is done and

00:28:33,540 --> 00:28:37,020
nowhere does it tell you you actually

00:28:35,310 --> 00:28:40,920
need to install blinker it alludes to it

00:28:37,020 --> 00:28:45,020
but just install blinker it's a nap it's

00:28:40,920 --> 00:28:48,150
a package those operating system level

00:28:45,020 --> 00:28:49,590
messaging you just need to install it or

00:28:48,150 --> 00:28:52,950
you can't get any of the signal handling

00:28:49,590 --> 00:28:55,470
that flask provides the bottom two you

00:28:52,950 --> 00:29:01,320
need specifically for running on Heroku

00:28:55,470 --> 00:29:03,210
cycle g2's the driver for postgresql and

00:29:01,320 --> 00:29:05,310
obviously if your proc file defines

00:29:03,210 --> 00:29:07,680
unicorn you actually need to have

00:29:05,310 --> 00:29:10,230
uniform so that you can actually run it

00:29:07,680 --> 00:29:11,820
I spent a fair amount of time actually

00:29:10,230 --> 00:29:16,080
trying to figure that one out the first

00:29:11,820 --> 00:29:19,400
time I ever used to Heroku sorry just

00:29:16,080 --> 00:29:19,400
I'm winding up a sweat

00:29:26,019 --> 00:29:30,829
in the slides which I'll make available

00:29:28,519 --> 00:29:32,690
after the talk I've added a couple of

00:29:30,829 --> 00:29:36,289
other resources this is the main flask

00:29:32,690 --> 00:29:40,070
homepage it's really good there's a

00:29:36,289 --> 00:29:42,409
really great mega tutorial by Miguel

00:29:40,070 --> 00:29:44,659
Greenberg I'd recommend checking it out

00:29:42,409 --> 00:29:45,919
the only challenge with it is that when

00:29:44,659 --> 00:29:47,809
it was it was accurate at the time of

00:29:45,919 --> 00:29:50,419
writing but some of the homo Heroku

00:29:47,809 --> 00:29:52,249
commands have changed in the interim so

00:29:50,419 --> 00:29:54,259
I would recommend using the readme that

00:29:52,249 --> 00:29:58,009
I provided this as the current way of

00:29:54,259 --> 00:30:03,309
interacting with Heroku but it's still a

00:29:58,009 --> 00:30:03,309
great tutorial thank you very much

00:30:13,970 --> 00:30:16,030

YouTube URL: https://www.youtube.com/watch?v=4_m-sm_DfMs


