Title: Python for less than $7 by Graeme Cross
Publication date: 2015-08-04
Playlist: PyCon Australia 2015
Description: 
	You can now run Python 3.4 on microcontrollers that cost less than a cup of coffee (in a up-market Parisian restaurant :)

MicroPython (http://www.micropython.org/) is a very active port of Python 3 to low-end microcontrollers with minimal RAM (eg. 192k RAM, yes: "k", as in kilobytes) but lots of useful I/O.

Learn how to set up a very cheap microcontroller with wifi and a range of I/O and then program it with MicroPython.

The live demos are guaranteed to fail in spectacular ways as all live demos do, but will hopefully show enough blinking lights to tempt you to leave your i7 hyperthreaded clusters and join the cute but very practical world of cheap, embedded Python.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:12,460 --> 00:00:17,440
hi guys I hope you had a good afternoon

00:00:14,590 --> 00:00:19,240
tea we've got a really awesome session

00:00:17,440 --> 00:00:20,890
for you coming up now we've got Graham

00:00:19,240 --> 00:00:23,140
Cross Graham

00:00:20,890 --> 00:00:25,450
describes himself as half scientist half

00:00:23,140 --> 00:00:28,450
engineer and he's been using Python

00:00:25,450 --> 00:00:30,220
since one point two who else has been

00:00:28,450 --> 00:00:32,349
using Python since one point to anyone

00:00:30,220 --> 00:00:35,080
there we go yeah it's a bit rare these

00:00:32,349 --> 00:00:43,960
days all right guys let's give it up for

00:00:35,080 --> 00:00:46,590
Graham so this talk is about how to do

00:00:43,960 --> 00:00:49,570
Python on the cheap it embedded hardware

00:00:46,590 --> 00:00:53,020
particularly about micro Python and how

00:00:49,570 --> 00:00:56,620
low you can push it so micro Python done

00:00:53,020 --> 00:00:59,920
dirt cheap or how low can we really go

00:00:56,620 --> 00:01:02,590
and firstly I want to start off with a

00:00:59,920 --> 00:01:06,130
note that I am going to talk about a lot

00:01:02,590 --> 00:01:08,830
of limitations but this is not in any

00:01:06,130 --> 00:01:11,350
way shape or form criticism what you're

00:01:08,830 --> 00:01:14,500
gonna see what people have done to cram

00:01:11,350 --> 00:01:15,789
Python into tiny little spaces is just

00:01:14,500 --> 00:01:18,970
amazing it is some of the most

00:01:15,789 --> 00:01:21,340
interesting and exciting work I've seen

00:01:18,970 --> 00:01:24,130
in Python in a while certainly in the

00:01:21,340 --> 00:01:25,720
embedded space and there's lots and lots

00:01:24,130 --> 00:01:27,790
of tough decisions when you take a

00:01:25,720 --> 00:01:30,909
language that was never designed for the

00:01:27,790 --> 00:01:34,119
embedded space and cram it down into

00:01:30,909 --> 00:01:35,680
tiny little places so no black hats in

00:01:34,119 --> 00:01:37,720
this talk I wanna be really clear it is

00:01:35,680 --> 00:01:40,659
all about golden crowns to the team

00:01:37,720 --> 00:01:42,430
because watching what they have done and

00:01:40,659 --> 00:01:44,530
I should stay I have no affiliation with

00:01:42,430 --> 00:01:47,170
the project I'm not the author not part

00:01:44,530 --> 00:01:50,650
of the core team just a user what they

00:01:47,170 --> 00:01:52,360
have done is amazing and also a

00:01:50,650 --> 00:01:57,220
disclaimer I said seven dollars I want

00:01:52,360 --> 00:01:58,930
to be clear seven dollars us what I

00:01:57,220 --> 00:02:00,970
could have bought for seven dollars us

00:01:58,930 --> 00:02:03,369
was about seven dollars Australian when

00:02:00,970 --> 00:02:04,540
you know a year ago when I submitted the

00:02:03,369 --> 00:02:06,640
abstract it was probably about eight

00:02:04,540 --> 00:02:08,140
dollars if you look back on these slides

00:02:06,640 --> 00:02:12,130
in a year's time probably more like

00:02:08,140 --> 00:02:14,650
fourteen twenty dollars Australian so

00:02:12,130 --> 00:02:17,380
let's not dwell on that let's jump back

00:02:14,650 --> 00:02:19,060
to 1949 if you've been to the basement

00:02:17,380 --> 00:02:21,549
of Melbourne Museum you will have seen

00:02:19,060 --> 00:02:23,160
this this is SCI rack this is depending

00:02:21,549 --> 00:02:24,880
on how you count it the fourth or fifth

00:02:23,160 --> 00:02:26,890
electronic computer do

00:02:24,880 --> 00:02:30,070
in the world the first one in Australia

00:02:26,890 --> 00:02:35,530
it's the only remaining first generation

00:02:30,070 --> 00:02:36,730
computer in the world 1949 until 1964

00:02:35,530 --> 00:02:38,500
those of you from the Bureau of

00:02:36,730 --> 00:02:40,750
Meteorology you should know that the

00:02:38,500 --> 00:02:45,160
first computer model weather predictions

00:02:40,750 --> 00:02:47,860
in Australia on this computer before the

00:02:45,160 --> 00:02:53,020
upgrade 500 Hertz they clocked it up to

00:02:47,860 --> 00:02:57,280
a kilohertz 2,000 bytes of of RAM two

00:02:53,020 --> 00:02:58,990
and a half ton 30 kilowatts of power

00:02:57,280 --> 00:03:01,900
I reckon Melbourne probably dimmed every

00:02:58,990 --> 00:03:04,690
time they switched it on but this this

00:03:01,900 --> 00:03:06,130
was the state of computing and if you're

00:03:04,690 --> 00:03:07,630
ever in Melbourne and you're doing a bit

00:03:06,130 --> 00:03:09,400
of a geek tour of Melbourne drop down

00:03:07,630 --> 00:03:10,960
into the basement it's free to go down

00:03:09,400 --> 00:03:14,950
there and have a look and it is really

00:03:10,960 --> 00:03:17,110
impressive let's jump to 65 and the

00:03:14,950 --> 00:03:19,030
journal electronics published a paper by

00:03:17,110 --> 00:03:21,460
the R&D director at Fairchild

00:03:19,030 --> 00:03:24,790
Semiconductor highly controversial paper

00:03:21,460 --> 00:03:28,510
for its time he went back in 75 to

00:03:24,790 --> 00:03:30,310
revise what he had unclaimed and even

00:03:28,510 --> 00:03:32,890
today we still talk about Moore's law

00:03:30,310 --> 00:03:35,320
and what he was talking about at that

00:03:32,890 --> 00:03:37,420
time in terms of the doubling of

00:03:35,320 --> 00:03:39,400
capacity every year and then he said

00:03:37,420 --> 00:03:41,500
every two years has proven to be a

00:03:39,400 --> 00:03:43,030
reasonably good thumbs certainly when

00:03:41,500 --> 00:03:45,910
you look at predictions of computing

00:03:43,030 --> 00:03:47,770
back in 65 there's not many that have

00:03:45,910 --> 00:03:53,050
stood the test of time like this

00:03:47,770 --> 00:03:55,480
so the Intel 4004 in 1971 had 2,300

00:03:53,050 --> 00:03:57,040
transistors or so by the mid 90s with

00:03:55,480 --> 00:03:59,920
Pentium we were up to around three

00:03:57,040 --> 00:04:01,990
million transistors your typical core i5

00:03:59,920 --> 00:04:05,310
in say a broad wheel architecture you're

00:04:01,990 --> 00:04:08,560
talking roughly two billion transistors

00:04:05,310 --> 00:04:09,880
so we've seen that climb but if you have

00:04:08,560 --> 00:04:11,680
a look at the cost of an integrated

00:04:09,880 --> 00:04:15,160
circuit transistor so a single

00:04:11,680 --> 00:04:18,850
transistor in 65 Moore was looking at

00:04:15,160 --> 00:04:22,300
about $30 u.s. in today's dollars today

00:04:18,850 --> 00:04:25,930
it's about a nano dollar we've dropped

00:04:22,300 --> 00:04:28,570
from you know up in the micron Ferb's

00:04:25,930 --> 00:04:31,570
down into a hundred nano Ferb's down to

00:04:28,570 --> 00:04:34,419
about 20 nanometer fab by BM I think a

00:04:31,570 --> 00:04:38,020
down exploring commercial 7 nanometer

00:04:34,419 --> 00:04:38,639
it's really impressive the interesting

00:04:38,020 --> 00:04:41,699
thing for me

00:04:38,639 --> 00:04:43,979
not how many transistors we've packed on

00:04:41,699 --> 00:04:47,039
two large computers it's what's happened

00:04:43,979 --> 00:04:49,020
to microcontrollers because if we jump

00:04:47,039 --> 00:04:51,479
forty years to today we've seen

00:04:49,020 --> 00:04:55,319
processing power climb we've seen core

00:04:51,479 --> 00:04:57,870
count climb io options RAM storage

00:04:55,319 --> 00:04:59,310
options storage capacity at the same

00:04:57,870 --> 00:05:01,770
time that power consumption has dropped

00:04:59,310 --> 00:05:03,689
dramatically price has dropped

00:05:01,770 --> 00:05:06,240
astronomically as you've seen and the

00:05:03,689 --> 00:05:10,770
footprint of what you can do has also

00:05:06,240 --> 00:05:13,770
dropped and so if you're if you're a

00:05:10,770 --> 00:05:16,379
hacker and maker if you're a an engineer

00:05:13,770 --> 00:05:19,560
designing commercial products you now

00:05:16,379 --> 00:05:21,900
have a wealth of choice in the

00:05:19,560 --> 00:05:24,029
microcontroller market so we have things

00:05:21,900 --> 00:05:26,159
today like the Raspberry Pi the

00:05:24,029 --> 00:05:28,949
BeagleBone black the Arduino the teensy

00:05:26,159 --> 00:05:30,779
the PI board what was called the SPARC

00:05:28,949 --> 00:05:33,120
Corbitt is now the particle core for

00:05:30,779 --> 00:05:35,219
legal reasons the chip which claims to

00:05:33,120 --> 00:05:37,110
be the first $9 Linux computer and is

00:05:35,219 --> 00:05:40,020
currently going through Kickstarter or

00:05:37,110 --> 00:05:42,750
IndieGoGo there are lots and lots of

00:05:40,020 --> 00:05:45,089
options and you have options not just in

00:05:42,750 --> 00:05:48,000
where you buy it from but is it just

00:05:45,089 --> 00:05:50,669
running bare metal single application

00:05:48,000 --> 00:05:52,529
running no operating system is it a

00:05:50,669 --> 00:05:55,319
real-time operating system does it have

00:05:52,529 --> 00:05:56,520
Linux or some other operating system on

00:05:55,319 --> 00:05:58,710
board networking

00:05:56,520 --> 00:06:03,180
what sort of CPU family you know you're

00:05:58,710 --> 00:06:04,050
dealing with an atmega CPU is that Intel

00:06:03,180 --> 00:06:06,449
is it arm

00:06:04,050 --> 00:06:07,500
what sort of arm is it does it have

00:06:06,449 --> 00:06:10,620
graphics on board

00:06:07,500 --> 00:06:13,610
what sort of i/o you know GPIO analog

00:06:10,620 --> 00:06:16,080
can I to see SPI

00:06:13,610 --> 00:06:17,909
does it have expansion options if so

00:06:16,080 --> 00:06:19,710
what sort of expansion options can you

00:06:17,909 --> 00:06:22,979
plug an Arduino shield into it for

00:06:19,710 --> 00:06:25,919
example if I'm in high school and I want

00:06:22,979 --> 00:06:28,229
to actually fire up my Raspberry Pi and

00:06:25,919 --> 00:06:30,509
do something interesting with it how

00:06:28,229 --> 00:06:33,479
hard is it to actually hook some LEDs in

00:06:30,509 --> 00:06:36,000
and make them blink or switch a nut plug

00:06:33,479 --> 00:06:38,189
a relay in so I can switch on and off my

00:06:36,000 --> 00:06:41,639
home brewing system that my parents

00:06:38,189 --> 00:06:43,589
don't know I have yet and I could keep

00:06:41,639 --> 00:06:44,969
on going but there's also apart from

00:06:43,589 --> 00:06:46,469
what you actually see up there in terms

00:06:44,969 --> 00:06:48,330
of a board there are some other things

00:06:46,469 --> 00:06:50,580
to consider like what are the

00:06:48,330 --> 00:06:52,379
development tools like what sort of

00:06:50,580 --> 00:06:54,660
programming languages are of a

00:06:52,379 --> 00:06:57,389
if I choose a certain board am i forced

00:06:54,660 --> 00:06:59,160
to use a certain language in the old

00:06:57,389 --> 00:07:02,240
days it was all assembler then you know

00:06:59,160 --> 00:07:04,620
C C++ fourth some other options

00:07:02,240 --> 00:07:06,050
interpreters really didn't tend to run

00:07:04,620 --> 00:07:08,789
on systems like this

00:07:06,050 --> 00:07:09,960
what's the community like what sort of

00:07:08,789 --> 00:07:12,750
support can I get what's the

00:07:09,960 --> 00:07:14,970
documentation like if I'm going to buy

00:07:12,750 --> 00:07:17,419
these and actually commercialize this am

00:07:14,970 --> 00:07:20,069
i dealing with a single source supplier

00:07:17,419 --> 00:07:21,900
what happens if that supplier obsoletes

00:07:20,069 --> 00:07:25,020
this board or components on the board am

00:07:21,900 --> 00:07:26,639
I stuck can I buy commercial volumes

00:07:25,020 --> 00:07:29,069
what are the supply agreements look like

00:07:26,639 --> 00:07:31,020
is the design open source am I actually

00:07:29,069 --> 00:07:34,050
able to take this design and modify it

00:07:31,020 --> 00:07:36,210
myself if I want and so it brings us to

00:07:34,050 --> 00:07:38,520
what I'd say is the prototyping sweet

00:07:36,210 --> 00:07:40,110
spot and you may not be able to see this

00:07:38,520 --> 00:07:42,060
all of the points in this but there's

00:07:40,110 --> 00:07:45,659
really four key parts to this Venn

00:07:42,060 --> 00:07:48,719
diagram the cost of goods the ease of

00:07:45,659 --> 00:07:52,250
use the performance and all of the

00:07:48,719 --> 00:07:54,930
interfacing options and between those

00:07:52,250 --> 00:07:57,719
for most of the work that I do in the

00:07:54,930 --> 00:08:01,710
biomedical space they're the ones that

00:07:57,719 --> 00:08:04,530
are the most interest so somewhere in

00:08:01,710 --> 00:08:06,690
all of that is there lies an answer and

00:08:04,530 --> 00:08:08,039
the answer for me is going to be

00:08:06,690 --> 00:08:09,599
different to the answer to you depending

00:08:08,039 --> 00:08:11,279
on what sort of products you're trying

00:08:09,599 --> 00:08:15,960
to develop or what sort of problem

00:08:11,279 --> 00:08:18,990
you're trying to solve so it brings us

00:08:15,960 --> 00:08:21,060
to why consider Python on a micro it's

00:08:18,990 --> 00:08:22,949
easy to learn and it's easy to teach

00:08:21,060 --> 00:08:26,430
certainly compared to languages like C

00:08:22,949 --> 00:08:30,240
C++ if I'm trying to teach an engineer

00:08:26,430 --> 00:08:32,130
how to use Python to control a robot or

00:08:30,240 --> 00:08:33,959
something like that or I'm trying to

00:08:32,130 --> 00:08:36,329
teach a high school student how to blink

00:08:33,959 --> 00:08:38,969
LEDs I don't have to be teaching them

00:08:36,329 --> 00:08:41,610
about pointers and you know manual

00:08:38,969 --> 00:08:44,279
memory allocation and release for

00:08:41,610 --> 00:08:46,649
example it has the ripple so I can just

00:08:44,279 --> 00:08:48,959
fire up a prompt and I can interactively

00:08:46,649 --> 00:08:51,120
type away in experiment I don't have to

00:08:48,959 --> 00:08:54,000
go through that compile cycle so I have

00:08:51,120 --> 00:08:55,890
a much faster development time if I've

00:08:54,000 --> 00:08:59,040
got engineers who already know how to

00:08:55,890 --> 00:09:01,040
use Python on a PC because they've been

00:08:59,040 --> 00:09:03,870
doing data crunching or they've been

00:09:01,040 --> 00:09:06,000
automating test scripts to drive robots

00:09:03,870 --> 00:09:09,180
or query some sort

00:09:06,000 --> 00:09:11,250
analyzer then being able to transfer

00:09:09,180 --> 00:09:13,829
that knowledge down into micros really

00:09:11,250 --> 00:09:15,660
helps it has a good standard library

00:09:13,829 --> 00:09:16,550
when it's available on the micro we'll

00:09:15,660 --> 00:09:19,319
come back to that

00:09:16,550 --> 00:09:22,439
excellent ecosystem and a really

00:09:19,319 --> 00:09:27,209
fantastic community it's not all rosy

00:09:22,439 --> 00:09:29,610
though performance most of the time is

00:09:27,209 --> 00:09:33,000
significantly slower than your assembler

00:09:29,610 --> 00:09:34,800
or your C C++ options your memory

00:09:33,000 --> 00:09:37,379
footprint is always going to be larger

00:09:34,800 --> 00:09:39,600
than those options as well and you do

00:09:37,379 --> 00:09:42,060
have to worry about garbage collection

00:09:39,600 --> 00:09:44,699
and if you're really concerned about a

00:09:42,060 --> 00:09:50,449
high performance real time target

00:09:44,699 --> 00:09:52,259
whether that's going to work for you so

00:09:50,449 --> 00:09:57,720
2013 there was a Kickstarter campaign

00:09:52,259 --> 00:10:00,629
for micro Python and the pi board the

00:09:57,720 --> 00:10:03,740
intention was to port Python 3 down on

00:10:00,629 --> 00:10:09,199
to a microcontroller called the pi board

00:10:03,740 --> 00:10:11,490
and what we've got today is Python 3.4

00:10:09,199 --> 00:10:14,480
implemented not just for the pi board

00:10:11,490 --> 00:10:18,870
but for a range of hardware platforms a

00:10:14,480 --> 00:10:22,889
memory footprint of 75 to 260 kilobytes

00:10:18,870 --> 00:10:24,990
at the moment it can run in 8k of RAM it

00:10:22,889 --> 00:10:28,079
has the ability to work with just

00:10:24,990 --> 00:10:31,250
standard Python there's a range of what

00:10:28,079 --> 00:10:34,230
they call emitter detectors direct

00:10:31,250 --> 00:10:36,750
decorators and got that out which allow

00:10:34,230 --> 00:10:39,019
you to do things like embed assembler

00:10:36,750 --> 00:10:41,850
into your Python code if you want to

00:10:39,019 --> 00:10:44,670
it has good documentation it's got a

00:10:41,850 --> 00:10:46,319
really active community and it's alive

00:10:44,670 --> 00:10:50,220
and kicking with plenty of opportunities

00:10:46,319 --> 00:10:51,990
to contribute back into it I mentioned

00:10:50,220 --> 00:10:54,420
libraries earlier one of the things to

00:10:51,990 --> 00:10:56,879
be aware of is that micro Python doesn't

00:10:54,420 --> 00:10:59,459
come with a normal Python standard

00:10:56,879 --> 00:11:03,029
library the batteries are not really all

00:10:59,459 --> 00:11:06,480
included there is a micro Python Lib

00:11:03,029 --> 00:11:08,519
which is on PI pi you can use pip to

00:11:06,480 --> 00:11:10,620
bring across the parts of the library

00:11:08,519 --> 00:11:12,420
you want so that you're not using up

00:11:10,620 --> 00:11:16,079
what is a precious commodity in embedded

00:11:12,420 --> 00:11:18,230
environments storage space it is a non

00:11:16,079 --> 00:11:20,790
monolithic standard library

00:11:18,230 --> 00:11:22,590
the library also isn't bytecode

00:11:20,790 --> 00:11:26,040
compatible with cpython you can't just

00:11:22,590 --> 00:11:28,080
pull a pyc file off of your pc and drop

00:11:26,040 --> 00:11:32,010
it into a micro Python environment and

00:11:28,080 --> 00:11:35,420
expect it to work it does come with some

00:11:32,010 --> 00:11:38,040
micro Python and boards support packages

00:11:35,420 --> 00:11:40,920
and people are working on what they call

00:11:38,040 --> 00:11:42,990
you pip which is a micro Python specific

00:11:40,920 --> 00:11:45,960
version of PIP that you can host on your

00:11:42,990 --> 00:11:48,780
micro Python system to actually install

00:11:45,960 --> 00:11:51,420
packages directly if you've got user

00:11:48,780 --> 00:11:53,070
writable storage and that's one of the

00:11:51,420 --> 00:11:55,140
caches that I want to mention is that if

00:11:53,070 --> 00:11:58,410
your hardware target doesn't have some

00:11:55,140 --> 00:12:01,320
form of user storable use a writable

00:11:58,410 --> 00:12:03,630
storage so it doesn't have writable

00:12:01,320 --> 00:12:07,200
flash it doesn't have a USB mass storage

00:12:03,630 --> 00:12:09,000
device or SD card then you have to build

00:12:07,200 --> 00:12:11,610
the libraries into the firmware before

00:12:09,000 --> 00:12:14,310
you install the firmware and so you're

00:12:11,610 --> 00:12:17,460
back to the old days of compiling C C++

00:12:14,310 --> 00:12:19,230
code and bundling in some Python which

00:12:17,460 --> 00:12:24,180
really hurts your rapid prototyping

00:12:19,230 --> 00:12:25,590
turnaround while we're talking about

00:12:24,180 --> 00:12:28,920
libraries and limitations let's talk

00:12:25,590 --> 00:12:30,720
about some broader ones I've mentioned

00:12:28,920 --> 00:12:33,240
that it's not 100% compatible with C

00:12:30,720 --> 00:12:35,070
Python in terms of byte code but just in

00:12:33,240 --> 00:12:37,530
terms of the language itself there are

00:12:35,070 --> 00:12:41,640
some limitations and some deliberate

00:12:37,530 --> 00:12:44,400
decisions where it is different and most

00:12:41,640 --> 00:12:47,100
of them wouldn't bite the average

00:12:44,400 --> 00:12:50,640
engineer who is just wanting to do

00:12:47,100 --> 00:12:52,350
fairly standard Python but if they're

00:12:50,640 --> 00:12:53,940
wanting to do something in terms of

00:12:52,350 --> 00:12:55,560
multiple inheritance with class

00:12:53,940 --> 00:12:58,200
structures they may find themselves

00:12:55,560 --> 00:13:00,990
getting caught and there's a number of

00:12:58,200 --> 00:13:03,330
those and I've put up there the URL for

00:13:00,990 --> 00:13:05,840
the wiki which has a really good list of

00:13:03,330 --> 00:13:07,980
all of the Nowlan differences

00:13:05,840 --> 00:13:11,490
limitations and bugs and what's

00:13:07,980 --> 00:13:14,070
happening with them it's a subset of the

00:13:11,490 --> 00:13:16,500
object model so if you're doing funny

00:13:14,070 --> 00:13:17,970
things with new and Dell for example you

00:13:16,500 --> 00:13:20,580
may get caught out it's worth reading

00:13:17,970 --> 00:13:23,780
the documentation there's only a subset

00:13:20,580 --> 00:13:26,280
of the introspection features and

00:13:23,780 --> 00:13:27,780
unicode if you were at Nick's talk and

00:13:26,280 --> 00:13:30,450
thought that unicode was a work in

00:13:27,780 --> 00:13:31,340
progress generally in Python 3 even more

00:13:30,450 --> 00:13:35,630
so in micro

00:13:31,340 --> 00:13:37,820
- if you're trying to code in kanji on a

00:13:35,630 --> 00:13:40,090
micro Python horse you have your work

00:13:37,820 --> 00:13:43,010
cut out for you at the moment I

00:13:40,090 --> 00:13:45,020
mentioned the pi board there's a range

00:13:43,010 --> 00:13:47,630
of ports now available in differing

00:13:45,020 --> 00:13:49,190
stages of maturity if you I just want to

00:13:47,630 --> 00:13:53,150
talk about the pi board briefly because

00:13:49,190 --> 00:13:55,760
that's where it began it's an STM 32 CPU

00:13:53,150 --> 00:14:00,470
it's running at 168 megahertz

00:13:55,760 --> 00:14:02,600
on a cortex m4 192k of ram a megabyte of

00:14:00,470 --> 00:14:07,450
ROM and you can happily run Python on

00:14:02,600 --> 00:14:10,790
that it's got 29 GPIO pins 3 ADC to DAC

00:14:07,450 --> 00:14:13,190
for LEDs it's got two switches it's got

00:14:10,790 --> 00:14:15,680
a three axis accelerometer real-time

00:14:13,190 --> 00:14:19,730
clock microSD you can mount it through a

00:14:15,680 --> 00:14:22,400
micro USB port to do mass storage

00:14:19,730 --> 00:14:25,610
it's got DFU for a really easy firmware

00:14:22,400 --> 00:14:27,980
uploading it can support what they call

00:14:25,610 --> 00:14:30,230
skins which are the expansion boards for

00:14:27,980 --> 00:14:33,590
the PI board for things like a touch LCD

00:14:30,230 --> 00:14:35,930
and and other expansion options but it

00:14:33,590 --> 00:14:36,770
doesn't have any inbuilt Wi-Fi that's

00:14:35,930 --> 00:14:40,730
one catch

00:14:36,770 --> 00:14:41,810
also it's $45 u.s. that's one off price

00:14:40,730 --> 00:14:43,460
through later fruit

00:14:41,810 --> 00:14:45,560
so you're talking about something that

00:14:43,460 --> 00:14:47,540
is quite a bit more expensive than a

00:14:45,560 --> 00:14:48,800
basic R as perhaps not a lot more

00:14:47,540 --> 00:14:50,660
expensive but it is definitely more

00:14:48,800 --> 00:14:52,670
expensive than a Raspberry Pi but it's

00:14:50,660 --> 00:14:55,040
also quite a bit smaller and it's

00:14:52,670 --> 00:14:57,550
simpler if you just want to get a Python

00:14:55,040 --> 00:14:59,540
system up and running in embedded land

00:14:57,550 --> 00:15:01,160
there's then a number of others they've

00:14:59,540 --> 00:15:03,650
got listed up there things like the team

00:15:01,160 --> 00:15:06,500
seat I think it's only teensy 3.1

00:15:03,650 --> 00:15:09,260
there's a family of them there's a

00:15:06,500 --> 00:15:12,410
limited version for 16-bit peak some of

00:15:09,260 --> 00:15:14,960
the Ti and other STM systems there is a

00:15:12,410 --> 00:15:17,660
port to what they call bear arm for

00:15:14,960 --> 00:15:20,450
people that want to port this to new arm

00:15:17,660 --> 00:15:22,430
systems there's a version for UNIX for

00:15:20,450 --> 00:15:25,390
people that want to experiment just on

00:15:22,430 --> 00:15:27,380
their standard Linux box for example and

00:15:25,390 --> 00:15:32,720
what the rest of this talk is about

00:15:27,380 --> 00:15:36,740
which is the esp8266 this is a really

00:15:32,720 --> 00:15:38,960
low cost Wi-Fi system on chip board I'm

00:15:36,740 --> 00:15:41,180
not going to dwell on all of the fine

00:15:38,960 --> 00:15:42,890
points what I did was I put that up

00:15:41,180 --> 00:15:44,660
there not expecting you to read it but

00:15:42,890 --> 00:15:45,170
just to be aware that this isn't just a

00:15:44,660 --> 00:15:47,500
system

00:15:45,170 --> 00:15:53,120
that can turn on and off a single LED

00:15:47,500 --> 00:15:56,180
it's got Wi-Fi capabilities it's only

00:15:53,120 --> 00:15:59,690
got 64 K of RAM it's only got an 80

00:15:56,180 --> 00:16:02,389
megahertz clock running on a RISC CPU

00:15:59,690 --> 00:16:05,389
but again it's still enough to run micro

00:16:02,389 --> 00:16:08,620
Pythian the fact that it's got inbuilt

00:16:05,389 --> 00:16:12,709
Wi-Fi there's really quite impressive

00:16:08,620 --> 00:16:16,550
300 meter range with the you might be

00:16:12,709 --> 00:16:18,019
able to see the little antennae printed

00:16:16,550 --> 00:16:21,170
on to the board there we're talking

00:16:18,019 --> 00:16:22,880
postage size 300 meter Wi-Fi range if

00:16:21,170 --> 00:16:24,769
you connect an antenna you can get about

00:16:22,880 --> 00:16:28,190
4 kilometres I've been told I haven't

00:16:24,769 --> 00:16:29,810
tried that you can use it and it was

00:16:28,190 --> 00:16:31,550
originally really designed as a Wi-Fi

00:16:29,810 --> 00:16:32,029
module that you just talk to via the

00:16:31,550 --> 00:16:33,800
UART

00:16:32,029 --> 00:16:35,930
if you had another microcontroller

00:16:33,800 --> 00:16:38,029
system and wanted smart Wi-Fi so you

00:16:35,930 --> 00:16:40,970
hook this up to your Raspberry Pi or

00:16:38,029 --> 00:16:43,550
your Arduino system but when espress the

00:16:40,970 --> 00:16:45,050
manufacturers released their SDK it

00:16:43,550 --> 00:16:47,540
allowed people to start actually using

00:16:45,050 --> 00:16:50,870
it as its own standalone microcontroller

00:16:47,540 --> 00:16:52,220
that's where the fun began so if you hop

00:16:50,870 --> 00:16:55,040
on eBay

00:16:52,220 --> 00:16:59,810
any of those sorts of sites you can pick

00:16:55,040 --> 00:17:01,790
these up for well under $3 US one off to

00:16:59,810 --> 00:17:04,459
use this sort you need to plug in your

00:17:01,790 --> 00:17:06,620
own FTDI USB adapter it doesn't come

00:17:04,459 --> 00:17:08,949
with USB inbuilt but that's all you

00:17:06,620 --> 00:17:12,319
really need to get up and running

00:17:08,949 --> 00:17:15,140
there's a range of these for example a I

00:17:12,319 --> 00:17:18,220
think errs do the ESP oh one up to the

00:17:15,140 --> 00:17:20,870
ESP 12 I've got a 12 here if you want to

00:17:18,220 --> 00:17:25,520
have a look that's this little beast

00:17:20,870 --> 00:17:27,559
here and then there is the node MCU and

00:17:25,520 --> 00:17:29,780
the nice thing about the node MCU which

00:17:27,559 --> 00:17:31,790
is the one here plugged into the USB

00:17:29,780 --> 00:17:34,340
connection is it gives you everything

00:17:31,790 --> 00:17:38,080
you need to talk to a computer

00:17:34,340 --> 00:17:41,120
fire up the interpreter and play with it

00:17:38,080 --> 00:17:43,370
it's basically a complete hardware

00:17:41,120 --> 00:17:44,870
package with pins soldered on ready to

00:17:43,370 --> 00:17:48,650
plug into a breadboard you start

00:17:44,870 --> 00:17:51,740
prototyping 1295 so that is definitely

00:17:48,650 --> 00:17:56,620
more than the US $7 but that is for a

00:17:51,740 --> 00:17:56,620
complete system versus the $2 95 one

00:17:57,159 --> 00:18:03,909
it doesn't have as much I owe as the pie

00:18:00,849 --> 00:18:05,909
board it comes with a Lua interpreter if

00:18:03,909 --> 00:18:09,909
you're not familiar with Lua it's

00:18:05,909 --> 00:18:13,419
Brazilian interpreted scripting language

00:18:09,909 --> 00:18:15,279
quite similar to Python it's a very

00:18:13,419 --> 00:18:17,229
small very well-suited to embedded

00:18:15,279 --> 00:18:18,999
applications it has an inbuilt

00:18:17,229 --> 00:18:19,960
networking library and so you can do a

00:18:18,999 --> 00:18:23,979
lot with it

00:18:19,960 --> 00:18:25,629
out of the box the Arduino IDE supports

00:18:23,979 --> 00:18:28,690
this system if you want to program in C

00:18:25,629 --> 00:18:31,330
C++ on it and micro pythons being ported

00:18:28,690 --> 00:18:32,559
to it if you couldn't see when I held it

00:18:31,330 --> 00:18:35,859
up that should hopefully give you an

00:18:32,559 --> 00:18:38,200
idea on sizes that's a dollar coin there

00:18:35,859 --> 00:18:39,729
and gives you a bit of a feel for what

00:18:38,200 --> 00:18:42,039
we're talking about these are small

00:18:39,729 --> 00:18:44,619
small systems with extremely low power

00:18:42,039 --> 00:18:46,359
consumption but with Wi-Fi on board and

00:18:44,619 --> 00:18:49,210
enough IO to actually do meaningful

00:18:46,359 --> 00:18:51,249
things so if you're for example working

00:18:49,210 --> 00:18:53,169
in the connected health space and you

00:18:51,249 --> 00:18:57,309
want to have a point-of-care analyzer

00:18:53,169 --> 00:18:59,710
that can process blood strips take the

00:18:57,309 --> 00:19:01,989
reading transmit it wirelessly and last

00:18:59,710 --> 00:19:03,519
a full day on the battery systems like

00:19:01,989 --> 00:19:05,619
this are really interesting to prototype

00:19:03,519 --> 00:19:07,570
which is why at Planet innovation we've

00:19:05,619 --> 00:19:10,029
been exploring a range of embedded

00:19:07,570 --> 00:19:12,970
platforms like this to find that sweet

00:19:10,029 --> 00:19:16,200
spot between cast size power consumption

00:19:12,970 --> 00:19:19,179
interface flexibility but also

00:19:16,200 --> 00:19:21,479
prototyping capabilities as well as

00:19:19,179 --> 00:19:24,820
final development and commercialization

00:19:21,479 --> 00:19:27,039
capabilities if you're into the Internet

00:19:24,820 --> 00:19:28,539
of Things these open up all sorts of

00:19:27,039 --> 00:19:31,359
options you know when we're talking

00:19:28,539 --> 00:19:34,090
little postage size devices with

00:19:31,359 --> 00:19:36,970
Wireless built in the options for where

00:19:34,090 --> 00:19:38,679
you can embed those are either really

00:19:36,970 --> 00:19:43,960
exciting or really scary depending on

00:19:38,679 --> 00:19:46,090
your perspective so the node MCU and

00:19:43,960 --> 00:19:47,710
micro Python at the very end of this

00:19:46,090 --> 00:19:51,639
talk I've got a link to these slides

00:19:47,710 --> 00:19:52,989
with a set of resources so please don't

00:19:51,639 --> 00:19:54,279
feel like you need to copy all this down

00:19:52,989 --> 00:19:56,019
there's a lot of information that I've

00:19:54,279 --> 00:19:58,299
left out of this you just kept in the

00:19:56,019 --> 00:19:59,470
resources but if you want to do anything

00:19:58,299 --> 00:20:01,960
useful with this board

00:19:59,470 --> 00:20:03,220
you're not just firing it up with Python

00:20:01,960 --> 00:20:06,549
you actually need the full development

00:20:03,220 --> 00:20:09,330
tool chain so GCC and all of the the

00:20:06,549 --> 00:20:10,860
build tools that go with it and that's

00:20:09,330 --> 00:20:14,340
GCC

00:20:10,860 --> 00:20:16,080
recently for the esp8266 you need a

00:20:14,340 --> 00:20:18,179
firmware install tool and there's some

00:20:16,080 --> 00:20:20,400
good ones out there there's one that's

00:20:18,179 --> 00:20:23,100
python-based using PI serial that works

00:20:20,400 --> 00:20:25,410
really well and you need to have strong

00:20:23,100 --> 00:20:27,540
Google food you need to read document

00:20:25,410 --> 00:20:29,760
source code especially since circuit

00:20:27,540 --> 00:20:32,730
diagrams and that's certainly one thing

00:20:29,760 --> 00:20:34,520
where we're planning to do to contribute

00:20:32,730 --> 00:20:37,110
back is to improve the documentation

00:20:34,520 --> 00:20:39,690
around this as well as some patches for

00:20:37,110 --> 00:20:41,460
issues we found to help just build up

00:20:39,690 --> 00:20:45,330
this ecosystem and make it a bit more

00:20:41,460 --> 00:20:47,730
usable there's a little command there

00:20:45,330 --> 00:20:50,520
for how you build firmware and it's got

00:20:47,730 --> 00:20:53,010
one command line part to it one argument

00:20:50,520 --> 00:20:57,419
which is not documented anywhere I found

00:20:53,010 --> 00:20:59,220
before I bricked my um node MCU and when

00:20:57,419 --> 00:21:00,960
I sat down and just read lots of source

00:20:59,220 --> 00:21:02,970
code and finally found the magic little

00:21:00,960 --> 00:21:05,100
word that made me go huh what's that for

00:21:02,970 --> 00:21:06,780
and started digging back and then

00:21:05,100 --> 00:21:09,419
started googling knowing what word I was

00:21:06,780 --> 00:21:10,799
meant to be looking for I discovered

00:21:09,419 --> 00:21:13,770
that there was a very good reason why

00:21:10,799 --> 00:21:19,470
bricked my node MCU it now works life's

00:21:13,770 --> 00:21:22,320
good it's that it no it's the DAO the

00:21:19,470 --> 00:21:23,940
flash mode Dao part and that's one of

00:21:22,320 --> 00:21:26,549
the problems with this board which I'll

00:21:23,940 --> 00:21:28,500
come to is just because you bought it

00:21:26,549 --> 00:21:29,669
doesn't mean that if you go out and buy

00:21:28,500 --> 00:21:31,710
it we've got the same hardware

00:21:29,669 --> 00:21:34,049
configuration it does seem to vary a

00:21:31,710 --> 00:21:36,540
little bit and sometimes in subtle ways

00:21:34,049 --> 00:21:40,530
that mean you can render them inoperable

00:21:36,540 --> 00:21:45,630
yeah fun for the whole family as some

00:21:40,530 --> 00:21:47,610
limitations around the ESP system on the

00:21:45,630 --> 00:21:50,130
ESP you've got no mountable flash system

00:21:47,610 --> 00:21:53,160
so when you fire it up you do work you

00:21:50,130 --> 00:21:55,530
disconnect the power it's all gone if

00:21:53,160 --> 00:21:57,419
you want to have a startup script your

00:21:55,530 --> 00:22:00,419
own libraries things like that you need

00:21:57,419 --> 00:22:03,390
to build them into the firmware which is

00:22:00,419 --> 00:22:06,080
why you need the full tool chain it's a

00:22:03,390 --> 00:22:09,570
really bare-bones Wi-Fi implementation

00:22:06,080 --> 00:22:11,280
you can scan for access points you can

00:22:09,570 --> 00:22:14,850
connect to an access point with a

00:22:11,280 --> 00:22:17,240
password up to wpa2 anything more fancy

00:22:14,850 --> 00:22:19,470
than that you're you're out of luck

00:22:17,240 --> 00:22:21,900
minimal standard library support at the

00:22:19,470 --> 00:22:23,970
moment and documentation is pretty

00:22:21,900 --> 00:22:25,920
limited as well there's no floating

00:22:23,970 --> 00:22:28,620
point

00:22:25,920 --> 00:22:31,830
and that in summary for as far as the

00:22:28,620 --> 00:22:33,780
esp8266 we've kind of pushed it to a

00:22:31,830 --> 00:22:36,510
point where we do really now know how

00:22:33,780 --> 00:22:38,970
low we can go we can do some basic work

00:22:36,510 --> 00:22:42,300
with it but if we want engineers to just

00:22:38,970 --> 00:22:47,480
pick up a board and start playing the

00:22:42,300 --> 00:22:50,600
options are that they can use this and

00:22:47,480 --> 00:22:53,490
it will kind of work in frustrating ways

00:22:50,600 --> 00:22:55,050
or they could just stick with what was

00:22:53,490 --> 00:22:57,330
on there with the lure interface and

00:22:55,050 --> 00:22:59,940
have definitely more capabilities than

00:22:57,330 --> 00:23:01,650
they have today with it so it's good in

00:22:59,940 --> 00:23:04,350
terms of it's really easy to be

00:23:01,650 --> 00:23:06,290
prototyping all of the hardware all of

00:23:04,350 --> 00:23:09,080
the firmware is completely open source

00:23:06,290 --> 00:23:12,600
most of the tool chain is not all of it

00:23:09,080 --> 00:23:14,400
and it's dirt cheap but there are some

00:23:12,600 --> 00:23:16,620
varying hardware configurations and

00:23:14,400 --> 00:23:19,410
micro Python today is just a little bit

00:23:16,620 --> 00:23:23,520
too limited on this particular family of

00:23:19,410 --> 00:23:25,140
CPUs I'm running over I might come back

00:23:23,520 --> 00:23:27,060
to the demo at the end it's basically

00:23:25,140 --> 00:23:29,010
just fire up a ripple and show you that

00:23:27,060 --> 00:23:32,330
yes you really can run Python on it I

00:23:29,010 --> 00:23:35,310
just want to make a couple of points

00:23:32,330 --> 00:23:37,650
this board has lots of potential micro

00:23:35,310 --> 00:23:40,950
path in general has an awful lot of

00:23:37,650 --> 00:23:44,400
potential if you really really need to

00:23:40,950 --> 00:23:47,640
use a low low low cost microcontroller

00:23:44,400 --> 00:23:50,270
with Python today it's worth considering

00:23:47,640 --> 00:23:53,040
as long as you understand the drawbacks

00:23:50,270 --> 00:23:58,080
there are some other boards in between

00:23:53,040 --> 00:23:59,970
the PI board and the esp8266 family such

00:23:58,080 --> 00:24:02,520
as the discovery board are listed there

00:23:59,970 --> 00:24:04,980
it's $19 it's more powerful it's got

00:24:02,520 --> 00:24:06,810
onboard storage it doesn't have Wi-Fi so

00:24:04,980 --> 00:24:10,260
again we're back to really understanding

00:24:06,810 --> 00:24:13,860
what your needs are and the PI board

00:24:10,260 --> 00:24:17,250
it's good it's expensive relative to

00:24:13,860 --> 00:24:19,520
these so where is the sweet spot you

00:24:17,250 --> 00:24:22,410
really need to think about cost

00:24:19,520 --> 00:24:25,200
usability speed form-factor boot time

00:24:22,410 --> 00:24:27,510
networking IO to understand what you

00:24:25,200 --> 00:24:30,030
really need if you really want a Python

00:24:27,510 --> 00:24:32,940
specific embedded solution that is got

00:24:30,030 --> 00:24:35,190
you know instant boot time no operating

00:24:32,940 --> 00:24:38,010
system complicating things it just runs

00:24:35,190 --> 00:24:38,580
a single Python app for you the pi board

00:24:38,010 --> 00:24:41,789
is well

00:24:38,580 --> 00:24:44,269
looking at the additional cost of the

00:24:41,789 --> 00:24:47,190
hardware is probably well and truly out

00:24:44,269 --> 00:24:49,200
weighed by the development time you

00:24:47,190 --> 00:24:51,240
would waste trying to get micro Python

00:24:49,200 --> 00:24:54,210
up and running to the same point on an

00:24:51,240 --> 00:24:56,789
esp8266 if you want a flexible

00:24:54,210 --> 00:24:58,380
all-singing all-dancing option Raspberry

00:24:56,789 --> 00:25:01,710
Pi I think is still the way to go today

00:24:58,380 --> 00:25:02,940
as long as you understand 40 second boot

00:25:01,710 --> 00:25:04,380
time give or take

00:25:02,940 --> 00:25:06,120
they have to learn Linux they have to

00:25:04,380 --> 00:25:08,309
figure out how to write in an it script

00:25:06,120 --> 00:25:11,760
to get their app up and running all of

00:25:08,309 --> 00:25:14,279
those issues lowest cost hacking

00:25:11,760 --> 00:25:16,799
challenge esp8266 is definitely the way

00:25:14,279 --> 00:25:18,809
to go today so the good thing is I can't

00:25:16,799 --> 00:25:20,820
tell you what the solution is for you

00:25:18,809 --> 00:25:23,070
but there are plenty of solutions out

00:25:20,820 --> 00:25:24,840
there today and this space just

00:25:23,070 --> 00:25:26,580
continues to get more and more exciting

00:25:24,840 --> 00:25:30,240
if you look at where we were two years

00:25:26,580 --> 00:25:32,639
ago microp - really did not exist a year

00:25:30,240 --> 00:25:34,559
ago it was running on the pi board today

00:25:32,639 --> 00:25:38,519
it's running on a whole stack of boards

00:25:34,559 --> 00:25:40,260
and for me that is really exciting so if

00:25:38,519 --> 00:25:40,710
you want to actually pick this up and

00:25:40,260 --> 00:25:43,470
run with it

00:25:40,710 --> 00:25:46,289
here are some resources I've listed the

00:25:43,470 --> 00:25:48,950
resources for micro Python the forum for

00:25:46,289 --> 00:25:51,539
esp8266 which is full of information

00:25:48,950 --> 00:25:53,570
QuickStart guide including the Adafruit

00:25:51,539 --> 00:25:57,090
tutorial which is really really useful

00:25:53,570 --> 00:25:58,710
and also some information on note MCU it

00:25:57,090 --> 00:26:00,690
comes out of China it's fully open

00:25:58,710 --> 00:26:02,789
sourced both at hardware and firmware

00:26:00,690 --> 00:26:04,230
levels and they have actually done a

00:26:02,789 --> 00:26:11,279
really good job of trying to make this

00:26:04,230 --> 00:26:14,909
platform - to hack away on lastly if you

00:26:11,279 --> 00:26:17,010
want these slides that's the URL and a

00:26:14,909 --> 00:26:19,409
QR code to grab it otherwise I'm here

00:26:17,010 --> 00:26:22,490
until Tuesday afternoon come and grab me

00:26:19,409 --> 00:26:22,490
thank you

00:26:25,480 --> 00:26:27,540
you

00:26:34,830 --> 00:26:36,890

YouTube URL: https://www.youtube.com/watch?v=7BGAHFsnDXA


