Title: Talking to Browsers with CORS by Michael Krotscheck
Publication date: 2015-08-04
Playlist: PyCon Australia 2015
Description: 
	This session will demonstrate how to break the browser's single origin policy, and permit true separability between a Python API and a browser-based client.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:09,730 --> 00:00:14,469
next up we have Michael crow check he

00:00:11,860 --> 00:00:16,420
works on OpenStack on behalf of HP and

00:00:14,469 --> 00:00:22,960
the talk is called talking to browsers

00:00:16,420 --> 00:00:25,150
with cause please welcome him hi

00:00:22,960 --> 00:00:26,949
everyone as I said as she said my name

00:00:25,150 --> 00:00:29,080
is Michael crow Trek I currently work

00:00:26,949 --> 00:00:30,490
for Hewlett Packard Enterprise this is

00:00:29,080 --> 00:00:33,070
probably one of the first presentations

00:00:30,490 --> 00:00:34,510
you'll see with our new branding I'm not

00:00:33,070 --> 00:00:38,610
entirely certain I'm allowed to use it

00:00:34,510 --> 00:00:41,440
but I don't care I and he'll the Packard

00:00:38,610 --> 00:00:42,520
keeps me working on OpenStack and to

00:00:41,440 --> 00:00:45,250
those of you who are familiar with it

00:00:42,520 --> 00:00:46,510
it's a the the topology of the of the

00:00:45,250 --> 00:00:48,309
ecosystem is you if we have all these

00:00:46,510 --> 00:00:50,649
different various different services and

00:00:48,309 --> 00:00:53,680
the thing I do inside of OpenStack is I

00:00:50,649 --> 00:00:54,940
write a lot of JavaScript and I actually

00:00:53,680 --> 00:00:56,289
don't really like writing that much

00:00:54,940 --> 00:00:59,050
Python because I like things that are

00:00:56,289 --> 00:01:01,449
pretty and I'm sure that the majority of

00:00:59,050 --> 00:01:03,579
you people here don't really like HTML

00:01:01,449 --> 00:01:05,830
and JavaScript which is what this entire

00:01:03,579 --> 00:01:07,660
talk is all about it's about you guys

00:01:05,830 --> 00:01:09,700
can do all your Python things and I can

00:01:07,660 --> 00:01:10,990
do my JavaScript things and we can talk

00:01:09,700 --> 00:01:14,500
in a way that doesn't make either one of

00:01:10,990 --> 00:01:16,030
us crazy now for those of you who want

00:01:14,500 --> 00:01:18,420
to follow along with the presentation

00:01:16,030 --> 00:01:21,970
this is currently published up on github

00:01:18,420 --> 00:01:24,300
the URL in the bottom left there also

00:01:21,970 --> 00:01:27,280
includes it so you guys can follow along

00:01:24,300 --> 00:01:28,720
and the overview is I'm basically going

00:01:27,280 --> 00:01:31,239
to talk about the history of the same

00:01:28,720 --> 00:01:33,640
origin policy and xml httprequest the

00:01:31,239 --> 00:01:35,890
way that browser applications generally

00:01:33,640 --> 00:01:37,690
talk to a server back-end I'm going to

00:01:35,890 --> 00:01:39,849
talk about how in the past we've had to

00:01:37,690 --> 00:01:41,770
break this single origin policy the same

00:01:39,849 --> 00:01:44,380
origin policy I'm going to go through

00:01:41,770 --> 00:01:45,970
the core specification show you an

00:01:44,380 --> 00:01:49,590
example implementation then actually

00:01:45,970 --> 00:01:52,149
show you the whole thing working

00:01:49,590 --> 00:01:56,289
hopefully if if I actually have time at

00:01:52,149 --> 00:01:59,470
the end if not I can share that code so

00:01:56,289 --> 00:02:01,509
to begin the same origin policy it came

00:01:59,470 --> 00:02:04,209
out in 1995 now think about that that's

00:02:01,509 --> 00:02:05,830
20 years ago when Netscape to first

00:02:04,209 --> 00:02:09,550
introduced at the JavaScript engine and

00:02:05,830 --> 00:02:12,069
the point is that if you have a script

00:02:09,550 --> 00:02:14,230
inside of an HTML page you're allowed to

00:02:12,069 --> 00:02:17,650
access the content of other pages as

00:02:14,230 --> 00:02:19,900
long as the origin is the same now what

00:02:17,650 --> 00:02:22,810
does that actually mean it means that a

00:02:19,900 --> 00:02:23,090
combination of you re uri scheme host

00:02:22,810 --> 00:02:26,330
name

00:02:23,090 --> 00:02:30,110
port so if you have this script this can

00:02:26,330 --> 00:02:32,420
read inside of an iframe can read this

00:02:30,110 --> 00:02:34,489
so this HTML page inside of an iframe

00:02:32,420 --> 00:02:36,620
but it cannot rely on one of those three

00:02:34,489 --> 00:02:40,819
and the reason for this is though that

00:02:36,620 --> 00:02:42,500
you know you can't do this so you know

00:02:40,819 --> 00:02:44,599
somebody creates a full screen i frame

00:02:42,500 --> 00:02:45,830
and loads up all your credit card

00:02:44,599 --> 00:02:49,489
information and then has a keystroke

00:02:45,830 --> 00:02:52,370
logger that that would be bad right so

00:02:49,489 --> 00:02:54,010
so this the the same origin policy kind

00:02:52,370 --> 00:02:57,890
of makes sense under the circumstances

00:02:54,010 --> 00:02:59,569
and there are some exceptions because of

00:02:57,890 --> 00:03:01,910
legacy and if you think about that's a

00:02:59,569 --> 00:03:04,940
1995 we already had legacy exceptions

00:03:01,910 --> 00:03:06,620
and at that point in time the one that

00:03:04,940 --> 00:03:08,959
is really important is the fact that you

00:03:06,620 --> 00:03:10,370
can include JavaScript from any other

00:03:08,959 --> 00:03:12,890
domain and it will run inside of your

00:03:10,370 --> 00:03:15,590
page with full privileges the forum post

00:03:12,890 --> 00:03:17,150
is relatively irrelevant for this

00:03:15,590 --> 00:03:20,329
particular presentation but I'm

00:03:17,150 --> 00:03:22,579
including it for completeness second

00:03:20,329 --> 00:03:23,900
part of this is the xmlhttprequest which

00:03:22,579 --> 00:03:26,629
has absolutely nothing to do with it

00:03:23,900 --> 00:03:28,370
with XML this quote from alex hoffman

00:03:26,629 --> 00:03:31,130
who was actually working on internet

00:03:28,370 --> 00:03:33,709
explorer 5 is that he actually attached

00:03:31,130 --> 00:03:36,620
XML to the name so that he could ship it

00:03:33,709 --> 00:03:38,630
inside of Microsoft XML lib which then

00:03:36,620 --> 00:03:41,900
sort of got ported into internet

00:03:38,630 --> 00:03:44,269
explorer five in 1999 so that he could

00:03:41,900 --> 00:03:47,560
build outlook web access which we all

00:03:44,269 --> 00:03:51,590
love right we all love exchange services

00:03:47,560 --> 00:03:54,889
but this so this is the origin of this

00:03:51,590 --> 00:03:57,169
guy and what it basically lets you do is

00:03:54,889 --> 00:03:59,030
issue HTTP requests directly from inside

00:03:57,169 --> 00:04:00,799
of the JavaScript engine so there's top

00:03:59,030 --> 00:04:02,750
one like if you're coming from my apt

00:04:00,799 --> 00:04:05,060
example com you can issue a get you can

00:04:02,750 --> 00:04:08,120
issue post requests and you'll get you

00:04:05,060 --> 00:04:11,780
know reasonable HTTP requests coming out

00:04:08,120 --> 00:04:14,209
of that but then they applied the same

00:04:11,780 --> 00:04:16,970
origin policy so now all of a sudden you

00:04:14,209 --> 00:04:20,090
if you're coming from my apt example com

00:04:16,970 --> 00:04:23,090
you can't go to a separate API host you

00:04:20,090 --> 00:04:26,510
cannot include a third-party service

00:04:23,090 --> 00:04:28,550
like square or a different use case if

00:04:26,510 --> 00:04:29,990
you have a mobile application or and a

00:04:28,550 --> 00:04:31,880
tablet application sitting on different

00:04:29,990 --> 00:04:34,180
hosts you cannot access a centralized

00:04:31,880 --> 00:04:34,180
API

00:04:35,480 --> 00:04:40,140
so we've had to hack and work around and

00:04:38,700 --> 00:04:41,520
we've done some terrible terrible things

00:04:40,140 --> 00:04:43,350
to try to work around this particular

00:04:41,520 --> 00:04:46,140
thing the first one of these is proxies

00:04:43,350 --> 00:04:48,420
of course where you'd basically set up a

00:04:46,140 --> 00:04:51,840
server that takes you know you issue

00:04:48,420 --> 00:04:53,550
your your HTTP request to the host that

00:04:51,840 --> 00:04:56,040
your application is currently running on

00:04:53,550 --> 00:04:58,250
and it then redirects it to some other

00:04:56,040 --> 00:05:01,230
host or domain and so forth which works

00:04:58,250 --> 00:05:04,470
but it's it's processing overhead

00:05:01,230 --> 00:05:06,420
because you now have to do this and the

00:05:04,470 --> 00:05:07,650
namespaces get really confused very very

00:05:06,420 --> 00:05:10,920
quickly let's say you have more than one

00:05:07,650 --> 00:05:13,590
in this case square account how do you

00:05:10,920 --> 00:05:15,750
handle that and then the other issue is

00:05:13,590 --> 00:05:18,600
what if the thing that you're consuming

00:05:15,750 --> 00:05:21,420
is truly restful and returns all of its

00:05:18,600 --> 00:05:23,550
references as fully qualified your eyes

00:05:21,420 --> 00:05:25,890
which means that now all of a sudden

00:05:23,550 --> 00:05:28,110
your proxy has to rewrite every single

00:05:25,890 --> 00:05:30,720
request as it comes through so that adds

00:05:28,110 --> 00:05:33,780
additional overhead and I mean this is

00:05:30,720 --> 00:05:36,090
something you could do but it's a hack

00:05:33,780 --> 00:05:37,230
right second thing that people started

00:05:36,090 --> 00:05:40,200
doing is this thing called document

00:05:37,230 --> 00:05:42,600
domain now this was specified in 2003 in

00:05:40,200 --> 00:05:44,850
the HTML Dom 2 point 0 specification as

00:05:42,600 --> 00:05:49,140
a read-only property it was never

00:05:44,850 --> 00:05:51,470
implemented as read-only and the reason

00:05:49,140 --> 00:05:53,460
this works is because xmlhttprequest

00:05:51,470 --> 00:05:56,580
accesses this to determine whether or

00:05:53,460 --> 00:06:00,990
not it's sitting on the same domain so

00:05:56,580 --> 00:06:03,600
if you have two iframes sittin on sittin

00:06:00,990 --> 00:06:05,520
in your web page from you know these two

00:06:03,600 --> 00:06:08,820
different api's these two can issue

00:06:05,520 --> 00:06:12,750
privileged HTTP requests to those

00:06:08,820 --> 00:06:16,370
domains and then if the encapsulating

00:06:12,750 --> 00:06:19,950
HTML and each one of those themselves

00:06:16,370 --> 00:06:24,630
set this document domain probe property

00:06:19,950 --> 00:06:26,820
to the parent domain to the TLD that

00:06:24,630 --> 00:06:28,440
will actually work at that point every

00:06:26,820 --> 00:06:31,140
one of those pages thinks that they are

00:06:28,440 --> 00:06:33,240
living on example.com rather than sub

00:06:31,140 --> 00:06:35,940
domain example.com and you can reach

00:06:33,240 --> 00:06:37,620
into the iframe and talk with that which

00:06:35,940 --> 00:06:40,260
is a little bit of a security hole if

00:06:37,620 --> 00:06:41,850
you kind of think about it right so so

00:06:40,260 --> 00:06:45,000
that's something we did started doing in

00:06:41,850 --> 00:06:48,590
2003 and then people said you know what

00:06:45,000 --> 00:06:51,680
let's formalize this formalize I

00:06:48,590 --> 00:06:53,570
no I was entirely wrong then they

00:06:51,680 --> 00:06:56,360
decided wait a second there's this

00:06:53,570 --> 00:06:58,940
legacy exception in xmlhttprequest where

00:06:56,360 --> 00:07:00,740
we can actually include we can make Dom

00:06:58,940 --> 00:07:02,420
manipulations and include JavaScript

00:07:00,740 --> 00:07:05,260
directly in our page and then removing

00:07:02,420 --> 00:07:08,570
so what you would do is you would

00:07:05,260 --> 00:07:11,330
manipulate the Dom to issue your get

00:07:08,570 --> 00:07:13,130
request and then add this callback on

00:07:11,330 --> 00:07:15,740
the end and said all right when you come

00:07:13,130 --> 00:07:18,040
back I want you to wrap the response the

00:07:15,740 --> 00:07:22,250
thing that I asked for in JavaScript

00:07:18,040 --> 00:07:23,330
because that makes sense right but now

00:07:22,250 --> 00:07:24,980
you have all these crazy Dom

00:07:23,330 --> 00:07:29,960
manipulations and what happens if things

00:07:24,980 --> 00:07:33,500
time out and so this is also a bit of a

00:07:29,960 --> 00:07:35,510
hack but you know what let's formalize

00:07:33,500 --> 00:07:37,330
this hack let's formalize it and let's

00:07:35,510 --> 00:07:40,220
call it cross document messaging and

00:07:37,330 --> 00:07:43,430
this was the what we G or this came

00:07:40,220 --> 00:07:46,750
along in 2008 and what they decided to

00:07:43,430 --> 00:07:48,980
do is instead of explicitly saying hey

00:07:46,750 --> 00:07:51,380
give me a call back they said we're

00:07:48,980 --> 00:07:53,720
going to create an event broadcasting

00:07:51,380 --> 00:07:55,010
mechanism between iframes and between

00:07:53,720 --> 00:07:57,430
different frames so in this case what

00:07:55,010 --> 00:08:01,160
you're seeing is the child I frame is

00:07:57,430 --> 00:08:03,470
adding an event listener and then the

00:08:01,160 --> 00:08:06,170
parent the parent that includes this

00:08:03,470 --> 00:08:08,420
iframe inside of it broadcast posts a

00:08:06,170 --> 00:08:10,330
message to the the child i frame and the

00:08:08,420 --> 00:08:13,790
child iframe can then receive that and

00:08:10,330 --> 00:08:17,270
there's some suggestions about oh you'll

00:08:13,790 --> 00:08:19,670
see this property here that's the domain

00:08:17,270 --> 00:08:20,690
property and you're supposed to validate

00:08:19,670 --> 00:08:23,390
that but there's nothing actually

00:08:20,690 --> 00:08:25,610
enforcing that you do that right so now

00:08:23,390 --> 00:08:27,020
this is a specification and we've taken

00:08:25,610 --> 00:08:29,750
something that was a hack to begin and

00:08:27,020 --> 00:08:32,000
we've we've set it in stone and then

00:08:29,750 --> 00:08:33,200
WebSockets came along and they finally

00:08:32,000 --> 00:08:35,140
said you know what this is all optional

00:08:33,200 --> 00:08:37,880
we don't care single origin is dumb

00:08:35,140 --> 00:08:39,410
because websockets don't even validate

00:08:37,880 --> 00:08:41,330
this kind of stuff we're just like we're

00:08:39,410 --> 00:08:43,250
just going to create a socket you should

00:08:41,330 --> 00:08:45,410
include the origin the server might

00:08:43,250 --> 00:08:49,970
validate on that but in reality we don't

00:08:45,410 --> 00:08:54,170
really care anymore and this isn't 2011

00:08:49,970 --> 00:08:56,060
so now in 2014 now this was approved in

00:08:54,170 --> 00:08:57,650
2014 it's been implemented for a few

00:08:56,060 --> 00:09:00,410
years before that in various different

00:08:57,650 --> 00:09:02,180
browsers this thing called cross-origin

00:09:00,410 --> 00:09:04,790
resource sharing came along

00:09:02,180 --> 00:09:06,800
where they finally decided yeah we're

00:09:04,790 --> 00:09:11,270
going to fix this and we're going to fix

00:09:06,800 --> 00:09:14,210
all these legacy concerns and the

00:09:11,270 --> 00:09:16,880
protocol basically has two parts in it

00:09:14,210 --> 00:09:19,940
it's it's an HTTP protocol so it works

00:09:16,880 --> 00:09:21,110
entirely with HTTP headers and the first

00:09:19,940 --> 00:09:22,839
thing that happens is you have this

00:09:21,110 --> 00:09:25,850
pre-flight check and this is your

00:09:22,839 --> 00:09:28,130
JavaScript application asking mother may

00:09:25,850 --> 00:09:30,980
I I want to do this thing am I allowed

00:09:28,130 --> 00:09:32,390
to do this and the services then we'll

00:09:30,980 --> 00:09:34,459
will respond in a way that either

00:09:32,390 --> 00:09:36,740
indicates yes or no and then the

00:09:34,459 --> 00:09:38,420
follow-up to that is the actual HTTP

00:09:36,740 --> 00:09:42,140
request which also needs to be validated

00:09:38,420 --> 00:09:44,720
so if the server comes back and says

00:09:42,140 --> 00:09:46,790
yeah you're allowed to do this but then

00:09:44,720 --> 00:09:51,560
it doesn't actually allow you to do this

00:09:46,790 --> 00:09:54,500
then it will still fail right this

00:09:51,560 --> 00:09:56,480
pre-flight check looks basically like

00:09:54,500 --> 00:09:57,920
this and this is implemented in all

00:09:56,480 --> 00:10:01,310
modern browsers you don't even have to

00:09:57,920 --> 00:10:03,950
worry about it anymore it's an options

00:10:01,310 --> 00:10:06,470
request let's say I'm making an HTTP

00:10:03,950 --> 00:10:09,170
call on against options billing cards

00:10:06,470 --> 00:10:12,350
and the thing that the browser adds is

00:10:09,170 --> 00:10:15,620
this origin and it's saying I live on

00:10:12,350 --> 00:10:18,290
this domain and it's saying I want to

00:10:15,620 --> 00:10:19,880
perform a get request and I want to send

00:10:18,290 --> 00:10:21,140
you these two custom headers I want to

00:10:19,880 --> 00:10:23,630
send accept and I want to send this

00:10:21,140 --> 00:10:27,350
custom header called X client and then

00:10:23,630 --> 00:10:29,750
the servers it's a service response will

00:10:27,350 --> 00:10:32,810
say yes you're allowed to do it by

00:10:29,750 --> 00:10:34,250
telling you this is the allowed origin

00:10:32,810 --> 00:10:35,480
and this is a comma separated list you

00:10:34,250 --> 00:10:40,400
can have an arbitrary number of domains

00:10:35,480 --> 00:10:42,260
in here wild cards don't work you're

00:10:40,400 --> 00:10:45,470
allowed to do a get request again comma

00:10:42,260 --> 00:10:47,570
separated list and these are the headers

00:10:45,470 --> 00:10:49,520
I'm allowing and some additional

00:10:47,570 --> 00:10:51,890
information this allow credential says

00:10:49,520 --> 00:10:54,350
you're allowed to send authentication

00:10:51,890 --> 00:10:56,060
credentials various authors and the last

00:10:54,350 --> 00:10:59,540
one is interesting because that

00:10:56,060 --> 00:11:01,850
indicates caching so this pre-flight

00:10:59,540 --> 00:11:03,050
request this mother mae-eye is cacheable

00:11:01,850 --> 00:11:09,020
for a certain amount of time so that

00:11:03,050 --> 00:11:10,820
you're not you're not flooding your your

00:11:09,020 --> 00:11:12,320
API with double the amount of requests

00:11:10,820 --> 00:11:15,459
because you don't really want to have an

00:11:12,320 --> 00:11:16,600
options and a regular request forever

00:11:15,459 --> 00:11:19,660
single thing that you're trying to do

00:11:16,600 --> 00:11:22,689
which is why you want to cash this and

00:11:19,660 --> 00:11:24,220
then the real exchange when you're

00:11:22,689 --> 00:11:27,429
actually performing in this case a get

00:11:24,220 --> 00:11:28,839
request again includes the origin and

00:11:27,429 --> 00:11:31,509
includes those two headers that you

00:11:28,839 --> 00:11:36,910
referenced earlier and then the response

00:11:31,509 --> 00:11:38,980
is I mean it's basic HTTP response and

00:11:36,910 --> 00:11:41,170
again it has the allow origin it has the

00:11:38,980 --> 00:11:43,749
allow credentials and it has this last

00:11:41,170 --> 00:11:45,220
one this exposed headers which is by the

00:11:43,749 --> 00:11:47,379
way I'm also sending a whole bunch of

00:11:45,220 --> 00:11:51,279
headers and you are allowed to read this

00:11:47,379 --> 00:11:53,139
list so you can kind of see like at the

00:11:51,279 --> 00:11:57,189
end there's content language expires

00:11:53,139 --> 00:12:00,459
last modified pragma if your API sends

00:11:57,189 --> 00:12:02,619
out custom headers say API version

00:12:00,459 --> 00:12:04,420
headers you would want to include that

00:12:02,619 --> 00:12:09,399
in this list so that your client can do

00:12:04,420 --> 00:12:12,189
API version notification there's one

00:12:09,399 --> 00:12:14,559
wild card available inside of the core

00:12:12,189 --> 00:12:19,149
specification and that is the single

00:12:14,559 --> 00:12:21,339
star and if the access control allow

00:12:19,149 --> 00:12:24,339
origin header comes with a single star

00:12:21,339 --> 00:12:26,019
any domain any browser it's are any

00:12:24,339 --> 00:12:28,499
application on any domain is allowed to

00:12:26,019 --> 00:12:32,740
access this particular resource which

00:12:28,499 --> 00:12:35,619
would be nice it's nice if you want to

00:12:32,740 --> 00:12:37,619
provide an API to everybody and you

00:12:35,619 --> 00:12:40,360
don't really care who signs up right

00:12:37,619 --> 00:12:42,249
it's not so nice if you want to keep

00:12:40,360 --> 00:12:46,869
tight control over who's making what

00:12:42,249 --> 00:12:49,779
requests from where so personally I try

00:12:46,869 --> 00:12:52,869
to not use it openstax recommendation is

00:12:49,779 --> 00:12:55,059
that you don't because it can be very

00:12:52,869 --> 00:12:57,220
easily abused let's say you're building

00:12:55,059 --> 00:13:00,429
a client application that's JavaScript

00:12:57,220 --> 00:13:02,649
and HTML and some malicious individual

00:13:00,429 --> 00:13:04,540
copies it attaches a keystroke logger

00:13:02,649 --> 00:13:06,790
puts it on to a compromise domain and

00:13:04,540 --> 00:13:08,679
then somehow manages to redirect you to

00:13:06,790 --> 00:13:10,029
that all of a sudden they are getting

00:13:08,679 --> 00:13:12,420
everything and they're allowed to access

00:13:10,029 --> 00:13:14,110
your API and make it look like a fully

00:13:12,420 --> 00:13:15,970
functional application because

00:13:14,110 --> 00:13:18,519
everything works but they're also

00:13:15,970 --> 00:13:20,860
listening in on the entire on the entire

00:13:18,519 --> 00:13:23,379
exchange so not having that star in

00:13:20,860 --> 00:13:25,089
there is something I personally

00:13:23,379 --> 00:13:30,910
recommend

00:13:25,089 --> 00:13:32,379
a implementing course now that now that

00:13:30,910 --> 00:13:34,809
we've kind of gone over the protocol

00:13:32,379 --> 00:13:37,059
there's I mean the very very quick way

00:13:34,809 --> 00:13:39,249
of implementing it is just add the

00:13:37,059 --> 00:13:40,660
headers with your web server Apache has

00:13:39,249 --> 00:13:43,569
mod headers and gangs has add headers

00:13:40,660 --> 00:13:44,829
whatever I'm sure that every single web

00:13:43,569 --> 00:13:48,579
server you might use out there has a

00:13:44,829 --> 00:13:50,559
similar extension that will allow you

00:13:48,579 --> 00:13:51,910
just add the header statically and then

00:13:50,559 --> 00:13:54,339
they will come back with every single

00:13:51,910 --> 00:13:56,499
request but if you want something a

00:13:54,339 --> 00:13:58,029
little bit more customized there's a

00:13:56,499 --> 00:14:02,290
whole bunch of different Python packages

00:13:58,029 --> 00:14:04,689
that support this this is just a really

00:14:02,290 --> 00:14:06,639
quick search on pi PI for what's

00:14:04,689 --> 00:14:08,110
available out there personally I'm

00:14:06,639 --> 00:14:10,149
personally invested in Ozil middleware

00:14:08,110 --> 00:14:11,680
because I actually wrote that that

00:14:10,149 --> 00:14:13,809
particular piece of middleware but that

00:14:11,680 --> 00:14:16,269
is in use inside of OpenStack proper and

00:14:13,809 --> 00:14:18,519
it has some dependencies on the also

00:14:16,269 --> 00:14:21,399
configuration that you know you might

00:14:18,519 --> 00:14:23,769
not want to have in your application but

00:14:21,399 --> 00:14:26,860
then the the one I'm not covering here

00:14:23,769 --> 00:14:28,749
is that if your application registers

00:14:26,860 --> 00:14:31,509
domains from which applications are

00:14:28,749 --> 00:14:34,449
allowed to make requests you'll probably

00:14:31,509 --> 00:14:36,970
want to copy whatever logic is in any

00:14:34,449 --> 00:14:39,579
one of these and add your own database

00:14:36,970 --> 00:14:44,230
back-end that has registered origins and

00:14:39,579 --> 00:14:45,459
all this other stuff right just to give

00:14:44,230 --> 00:14:46,990
you an idea of what this looks like this

00:14:45,459 --> 00:14:49,360
is Oslo middleware there's a link here

00:14:46,990 --> 00:14:54,519
you guys can look directly at what that

00:14:49,360 --> 00:14:56,199
code does if you're really curious about

00:14:54,519 --> 00:14:58,929
the implementation itself you can

00:14:56,199 --> 00:15:00,579
actually documentation talk about this

00:14:58,929 --> 00:15:02,050
comes from the core specification six

00:15:00,579 --> 00:15:04,029
point one point one and so on so forth

00:15:02,050 --> 00:15:05,879
feel free to copy that verbatim into

00:15:04,029 --> 00:15:10,179
your own code if you were so inclined

00:15:05,879 --> 00:15:12,220
it's Apache licensed so I mean use and

00:15:10,179 --> 00:15:15,819
reuse and do all the happy open-source

00:15:12,220 --> 00:15:17,589
things right so I'm going to try a demo

00:15:15,819 --> 00:15:19,149
and I'm gonna do something a little bit

00:15:17,589 --> 00:15:22,689
crazy on this demo because I'm gonna go

00:15:19,149 --> 00:15:24,670
to a website that is hosted on github is

00:15:22,689 --> 00:15:27,009
currently hosted on github it's crow

00:15:24,670 --> 00:15:28,449
chick github do / ironic web client and

00:15:27,009 --> 00:15:31,269
it's for a project inside of OpenStack

00:15:28,449 --> 00:15:35,019
called ironic and as you can see right

00:15:31,269 --> 00:15:36,490
now it doesn't know where to go at this

00:15:35,019 --> 00:15:38,470
point it doesn't have a configured API

00:15:36,490 --> 00:15:38,710
so I can say I've got this running on

00:15:38,470 --> 00:15:42,850
local

00:15:38,710 --> 00:15:49,180
host which actually don't I'm going to

00:15:42,850 --> 00:15:50,470
go localhost and 6385 and you'll see

00:15:49,180 --> 00:15:52,930
it's making a whole bunch of connection

00:15:50,470 --> 00:15:54,700
you know connection refused it's

00:15:52,930 --> 00:15:57,100
attempting to detect it it's not

00:15:54,700 --> 00:16:01,720
succeeding very well so i'm going to go

00:15:57,100 --> 00:16:09,730
ahead and start up the API there we go

00:16:01,720 --> 00:16:10,930
and I'm going to try this again 85 there

00:16:09,730 --> 00:16:13,660
you go and now what you're seeing here

00:16:10,930 --> 00:16:15,340
is no access control allowed origin

00:16:13,660 --> 00:16:17,950
header is present so it's already trying

00:16:15,340 --> 00:16:20,680
to make this XML age this this course

00:16:17,950 --> 00:16:22,060
request if you go a little bit more into

00:16:20,680 --> 00:16:25,090
a little bit more detail you can kind of

00:16:22,060 --> 00:16:26,500
see this this this 405 failed you can

00:16:25,090 --> 00:16:28,060
look at the headers and say all right we

00:16:26,500 --> 00:16:29,590
have get we don't have origin headers

00:16:28,060 --> 00:16:31,860
and so forth you'll notice the origin

00:16:29,590 --> 00:16:36,430
header is actually sent by the browser

00:16:31,860 --> 00:16:37,870
that's down here right and that's

00:16:36,430 --> 00:16:39,910
because I didn't actually activate the

00:16:37,870 --> 00:16:43,300
middleware now the Middle where I'm

00:16:39,910 --> 00:16:44,860
going to use as I said is this thing

00:16:43,300 --> 00:16:46,630
called course middleware i'm going to go

00:16:44,860 --> 00:16:50,920
ahead and activate it i'm going to add a

00:16:46,630 --> 00:16:53,440
domain or add a permitted origin croce

00:16:50,920 --> 00:16:56,590
kept github do and i'm going to permit

00:16:53,440 --> 00:16:58,360
credentials and basically all add the

00:16:56,590 --> 00:17:01,420
configuration options is necessary to

00:16:58,360 --> 00:17:06,400
make this actually work and then just

00:17:01,420 --> 00:17:13,930
going to go and restart the server there

00:17:06,400 --> 00:17:17,980
we go and if i try 85 it just passed you

00:17:13,930 --> 00:17:20,560
see there's the options request there's

00:17:17,980 --> 00:17:21,760
all of our allow credentials headers the

00:17:20,560 --> 00:17:24,190
browser has acknowledged that this

00:17:21,760 --> 00:17:28,680
request is allowed to cross this same

00:17:24,190 --> 00:17:28,680
origin policy i'm going to save and

00:17:28,740 --> 00:17:35,350
there's our UI and as you can see we are

00:17:33,130 --> 00:17:38,320
starting to load data from an API that

00:17:35,350 --> 00:17:40,830
is running on my localhost but the

00:17:38,320 --> 00:17:43,840
application itself lives out on github

00:17:40,830 --> 00:17:46,990
this might seem a little bit strange to

00:17:43,840 --> 00:17:49,060
you but now if you think about it in in

00:17:46,990 --> 00:17:50,380
the cloud world what if you have two

00:17:49,060 --> 00:17:50,970
different clouds that you are trying to

00:17:50,380 --> 00:17:53,460
manage

00:17:50,970 --> 00:17:55,559
I have one ironic client and I have my

00:17:53,460 --> 00:17:57,059
internal cloud and as my external cloud

00:17:55,559 --> 00:18:00,780
and I've got instances across both of

00:17:57,059 --> 00:18:02,669
them well being able to break that

00:18:00,780 --> 00:18:04,110
sandbox and talk to both of them in one

00:18:02,669 --> 00:18:06,120
single user interface is a pretty

00:18:04,110 --> 00:18:07,590
powerful statement because you don't

00:18:06,120 --> 00:18:10,650
have to deploy more than one app and

00:18:07,590 --> 00:18:12,900
then you can you know add another one if

00:18:10,650 --> 00:18:17,760
you really wanted to you know yet

00:18:12,900 --> 00:18:20,400
another cloud and this doesn't I tried

00:18:17,760 --> 00:18:22,799
using this against a an internal version

00:18:20,400 --> 00:18:26,250
of ironic their versions are sorry HP

00:18:22,799 --> 00:18:27,480
version of ironic and the versions are

00:18:26,250 --> 00:18:28,530
out of date so this particular client

00:18:27,480 --> 00:18:32,330
doesn't know how to talk to it but

00:18:28,530 --> 00:18:34,770
otherwise you would be able to do that

00:18:32,330 --> 00:18:37,350
so I can do that again and now we have

00:18:34,770 --> 00:18:41,370
you know two and then we go and we

00:18:37,350 --> 00:18:44,549
launch it and switch between them if you

00:18:41,370 --> 00:18:48,150
really want to so so that's cores in a

00:18:44,549 --> 00:18:49,740
nutshell that's the demo really not much

00:18:48,150 --> 00:18:51,090
to it it's a fairly straightforward

00:18:49,740 --> 00:18:55,080
protocol and headers and it does work

00:18:51,090 --> 00:18:58,400
and this is how I as a JavaScript

00:18:55,080 --> 00:19:02,490
developer would really love you guys to

00:18:58,400 --> 00:19:03,960
implement or I want this support on the

00:19:02,490 --> 00:19:06,539
API so I can build all kinds of crazy

00:19:03,960 --> 00:19:10,230
applications without having to talk to

00:19:06,539 --> 00:19:13,770
you and without actually having to look

00:19:10,230 --> 00:19:16,380
at your code well no I mean think about

00:19:13,770 --> 00:19:17,970
it's friction right it is it is a

00:19:16,380 --> 00:19:19,830
cognitive friction to have to go adopt

00:19:17,970 --> 00:19:27,090
as which switch context to another

00:19:19,830 --> 00:19:36,390
language questions no wait we have a

00:19:27,090 --> 00:19:38,789
question you might have mentioned this

00:19:36,390 --> 00:19:40,799
and I missed it but you expose that

00:19:38,789 --> 00:19:46,320
cause information once on the route or

00:19:40,799 --> 00:19:48,960
you expose that / path kors information

00:19:46,320 --> 00:19:51,390
so Oh in the options in the application

00:19:48,960 --> 00:19:54,120
itself so I mean options had all of the

00:19:51,390 --> 00:19:55,409
allowed methods yes you do that once on

00:19:54,120 --> 00:19:57,090
the route and you just assume that

00:19:55,409 --> 00:19:59,130
covers everything or you're supposed to

00:19:57,090 --> 00:20:02,480
expose that like this specific path

00:19:59,130 --> 00:20:06,200
takes post and get it's one part once

00:20:02,480 --> 00:20:07,640
her path every single request will every

00:20:06,200 --> 00:20:10,850
single path every single request will do

00:20:07,640 --> 00:20:14,120
that now the original if i can let me

00:20:10,850 --> 00:20:17,929
switch back to the the headers real

00:20:14,120 --> 00:20:21,320
quick that what you can do is when this

00:20:17,929 --> 00:20:23,929
thing comes back this can be a comma

00:20:21,320 --> 00:20:26,150
separated list so you can batch the

00:20:23,929 --> 00:20:28,040
methods on a particular path and you can

00:20:26,150 --> 00:20:30,320
batch the domains on a particular path i

00:20:28,040 --> 00:20:32,720
recommend you set up this very origin up

00:20:30,320 --> 00:20:34,549
here because that will cause the

00:20:32,720 --> 00:20:38,720
internal caching mechanism of a browser

00:20:34,549 --> 00:20:40,520
to change if you're looking for a if

00:20:38,720 --> 00:20:45,500
you're using the same API from two

00:20:40,520 --> 00:20:51,830
different applications right any other

00:20:45,500 --> 00:20:55,520
questions you Joe Gusev response but you

00:20:51,830 --> 00:20:59,929
don't show a response where no you can't

00:20:55,520 --> 00:21:02,510
do that is it of 006 is it a 403 well it

00:20:59,929 --> 00:21:04,010
doesn't matter what kind of HTTP

00:21:02,510 --> 00:21:05,870
response you get it if the headers

00:21:04,010 --> 00:21:09,590
aren't there the browser won't even let

00:21:05,870 --> 00:21:11,510
you at it I can actually demonstrate

00:21:09,590 --> 00:21:14,690
that since we've got plenty of time here

00:21:11,510 --> 00:21:21,220
let's say I do not want to allow the

00:21:14,690 --> 00:21:21,220
accept header and let me restart this

00:21:21,429 --> 00:21:26,380
all right and we are now

00:21:32,750 --> 00:21:40,970
we're just a moment close all these

00:21:50,080 --> 00:21:55,280
and and you'll see that's failing even

00:21:52,910 --> 00:21:56,480
though it's coming back as a 200 the

00:21:55,280 --> 00:21:58,160
response headers doesn't include

00:21:56,480 --> 00:22:00,380
anything and this is specimen this is

00:21:58,160 --> 00:22:03,020
actually in the specification there's a

00:22:00,380 --> 00:22:05,240
whole series of steps it's like if this

00:22:03,020 --> 00:22:07,910
is a registered domain if this is not a

00:22:05,240 --> 00:22:10,160
register domain fail and every single

00:22:07,910 --> 00:22:14,930
failure condition is basically do not

00:22:10,160 --> 00:22:16,670
include the cores headers and exit yeah

00:22:14,930 --> 00:22:18,140
yeah it's still returning a 200 there's

00:22:16,670 --> 00:22:20,870
one dangerous thing to do with this if

00:22:18,140 --> 00:22:23,210
you're doing it via middle where the

00:22:20,870 --> 00:22:27,380
action will still occur so if you're

00:22:23,210 --> 00:22:30,020
issuing a post request against you know

00:22:27,380 --> 00:22:31,220
and the middleware will say ok well im

00:22:30,020 --> 00:22:33,620
just gonna pass this through to the

00:22:31,220 --> 00:22:34,940
application and then comes back and well

00:22:33,620 --> 00:22:35,960
i guess i'm not allowed to attach any

00:22:34,940 --> 00:22:38,050
course header so i'm just going to let

00:22:35,960 --> 00:22:41,000
it through but the action still happened

00:22:38,050 --> 00:22:43,880
there's nothing nothing in the core

00:22:41,000 --> 00:22:47,690
specification that prevents the request

00:22:43,880 --> 00:22:49,430
from doing anything it just says when it

00:22:47,690 --> 00:22:51,350
returns and it's permitted to break this

00:22:49,430 --> 00:22:56,840
box attach these headers that's all it

00:22:51,350 --> 00:22:58,280
does another question yeah I'm I'll

00:22:56,840 --> 00:22:59,630
perfect this by saying I didn't really

00:22:58,280 --> 00:23:04,310
know much about course before coming

00:22:59,630 --> 00:23:06,590
here but is this for instance if you

00:23:04,310 --> 00:23:09,440
sign off the using the dropbox api you

00:23:06,590 --> 00:23:11,540
say i'm going to be using dropbox from

00:23:09,440 --> 00:23:15,020
this domain is this what it relates to

00:23:11,540 --> 00:23:17,420
is that adding this course header or is

00:23:15,020 --> 00:23:19,520
it something else that's two things i

00:23:17,420 --> 00:23:20,720
believe it's adding the course header so

00:23:19,520 --> 00:23:23,090
that they know where you're going to be

00:23:20,720 --> 00:23:25,220
coming from but it is also part of the

00:23:23,090 --> 00:23:27,350
other do auth or the open ID

00:23:25,220 --> 00:23:31,280
specification because that requires an

00:23:27,350 --> 00:23:34,100
additional domain key it requires the

00:23:31,280 --> 00:23:36,950
the response referral domain so that you

00:23:34,100 --> 00:23:40,370
can get a an off-key right and the

00:23:36,950 --> 00:23:42,800
second question is if what's the actual

00:23:40,370 --> 00:23:44,690
procedure when you say this Kate this is

00:23:42,800 --> 00:23:48,410
case for one hour but if you lose access

00:23:44,690 --> 00:23:50,660
to it with in that case period and they

00:23:48,410 --> 00:23:54,020
were just going to fail then the

00:23:50,660 --> 00:23:56,750
response request itself so not this guy

00:23:54,020 --> 00:23:59,600
so this one's cached but this one should

00:23:56,750 --> 00:24:01,220
not include the headers the response

00:23:59,600 --> 00:24:03,740
headers and then you will no longer have

00:24:01,220 --> 00:24:09,900
access to that

00:24:03,740 --> 00:24:13,560
I'm when some more relating to that with

00:24:09,900 --> 00:24:15,390
the github situation does that mean like

00:24:13,560 --> 00:24:18,420
in that situation if you had a whole

00:24:15,390 --> 00:24:20,010
bunch of sites pointing at github if you

00:24:18,420 --> 00:24:21,540
do the COS request you would get back a

00:24:20,010 --> 00:24:24,420
list of all domains that are allowed to

00:24:21,540 --> 00:24:27,390
access that is that correct because

00:24:24,420 --> 00:24:29,550
that's a kind of a leakage of here's

00:24:27,390 --> 00:24:31,680
everything that's allowed accesses and

00:24:29,550 --> 00:24:33,840
he's a bunch that aren't me that I now

00:24:31,680 --> 00:24:35,670
know about right so that depends on the

00:24:33,840 --> 00:24:37,140
implementation of the middleware or

00:24:35,670 --> 00:24:39,120
whatever you have that's responding the

00:24:37,140 --> 00:24:40,860
naive ria the naive implementation of

00:24:39,120 --> 00:24:42,240
just using mod headers you can add as

00:24:40,860 --> 00:24:43,650
many domains and yeah that would be a

00:24:42,240 --> 00:24:47,010
little bit Lykke right that's gonna

00:24:43,650 --> 00:24:49,470
expose customer data the middleware that

00:24:47,010 --> 00:24:51,360
I just showed you only returns of the

00:24:49,470 --> 00:24:53,340
domain that you requested it from

00:24:51,360 --> 00:25:00,090
assuming that it is permitted otherwise

00:24:53,340 --> 00:25:01,650
it doesn't let you know anything I guess

00:25:00,090 --> 00:25:03,780
it kind of falls up a little bit and

00:25:01,650 --> 00:25:05,580
what confuses me still is like we've

00:25:03,780 --> 00:25:08,250
been told not to really believe anything

00:25:05,580 --> 00:25:12,150
from the HTTP headers so in what way do

00:25:08,250 --> 00:25:14,220
like what security really does the whole

00:25:12,150 --> 00:25:16,560
this is my the way domain where I come

00:25:14,220 --> 00:25:20,700
from really brings especially someone

00:25:16,560 --> 00:25:23,070
like just does a w gate or whatever to

00:25:20,700 --> 00:25:25,080
that i would say that as a javascript

00:25:23,070 --> 00:25:30,390
engineer we assume that nothing is

00:25:25,080 --> 00:25:32,520
secure because nothing is especially if

00:25:30,390 --> 00:25:35,160
you are on the other side of the Great

00:25:32,520 --> 00:25:36,660
Firewall I mean every single request

00:25:35,160 --> 00:25:38,460
that you make is likely to be

00:25:36,660 --> 00:25:39,960
compromised I live in the United States

00:25:38,460 --> 00:25:44,600
the NSA is listening to everything that

00:25:39,960 --> 00:25:48,390
I do so is there a chance that these

00:25:44,600 --> 00:25:49,980
headers are legit yeah it's a chance

00:25:48,390 --> 00:25:51,720
that they're not legit I there's nothing

00:25:49,980 --> 00:25:52,740
you can really do about that the only

00:25:51,720 --> 00:25:57,000
thing you can really do is make sure

00:25:52,740 --> 00:25:59,310
that when the request hits your server

00:25:57,000 --> 00:26:01,290
you do all the necessary validation make

00:25:59,310 --> 00:26:02,640
sure that you know assuming this is a

00:26:01,290 --> 00:26:05,220
proper request it all those through

00:26:02,640 --> 00:26:10,140
right now that's input data validation

00:26:05,220 --> 00:26:12,210
so anything else all right thank you

00:26:10,140 --> 00:26:14,270
very much everybody thank you

00:26:12,210 --> 00:26:14,270
you

00:26:21,520 --> 00:26:23,580

YouTube URL: https://www.youtube.com/watch?v=a9ze1XilXSI


