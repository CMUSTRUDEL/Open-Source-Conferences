Title: Python on the move: The state of mobile Python by Russell Keith-Magee
Publication date: 2015-08-04
Playlist: PyCon Australia 2015
Description: 
	Over the last 5-10 years, the "desktop/server" split that dominated computing in the 80s, 90s and early 2000s has been joined by a third player - mobile devices such as phones and tablets.

So, what is the story for running Python on these devices? Although there hasn't been much to say in the past, the good news is that over the last year, there's been some signficant changes in the landscape, and Python on Mobile is now teetering on the brink of being a genuine reality.

In this talk, Russell Keith-Magee will survey the current state of using Python on mobile devices, the work that is currently being done, areas where more work is requried, and the prospects for the future.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:10,300 --> 00:00:16,219
well good afternoon our final speaker

00:00:12,620 --> 00:00:19,369
for today before afternoon tea is dr.

00:00:16,219 --> 00:00:21,320
Russell Keith McGee and for those of you

00:00:19,369 --> 00:00:23,779
with the Django yesterday the president

00:00:21,320 --> 00:00:25,699
the Django Association and I know God

00:00:23,779 --> 00:00:27,380
knows everything else it sir he's a man

00:00:25,699 --> 00:00:34,699
the things a man put your hands together

00:00:27,380 --> 00:00:36,920
for him please well thank you very much

00:00:34,699 --> 00:00:38,059
okay so as I said my name is Russell

00:00:36,920 --> 00:00:39,800
Keith you haven't met me already

00:00:38,059 --> 00:00:41,180
if you have heard of me before it's

00:00:39,800 --> 00:00:42,800
probably because of my work on the

00:00:41,180 --> 00:00:44,170
Django project I've been a court team

00:00:42,800 --> 00:00:45,860
member there for almost ten years

00:00:44,170 --> 00:00:49,100
president of the Django software

00:00:45,860 --> 00:00:50,899
foundation since 2011 my day job is as

00:00:49,100 --> 00:00:52,700
CTO and co-founder of a company called

00:00:50,899 --> 00:00:54,170
trades cloud we're an australian-based

00:00:52,700 --> 00:00:55,789
software as a service for trades people

00:00:54,170 --> 00:00:58,309
plumbers electricians carpenters and the

00:00:55,789 --> 00:01:00,110
like trades cloud is a django site but

00:00:58,309 --> 00:01:02,480
it also has a mobile component at the

00:01:00,110 --> 00:01:04,339
moment we're using phonegap and I'm not

00:01:02,480 --> 00:01:06,410
really happy with it and so for that

00:01:04,339 --> 00:01:09,560
reason I've got an interest in mobile as

00:01:06,410 --> 00:01:11,899
a platform I've also got past experience

00:01:09,560 --> 00:01:13,850
developing for mobile impact jobs i did

00:01:11,899 --> 00:01:15,740
some iOS native development it was part

00:01:13,850 --> 00:01:18,380
of a small brisbane-based team that

00:01:15,740 --> 00:01:19,640
extra myspace is first ipad app for

00:01:18,380 --> 00:01:22,310
example just after the x up that came

00:01:19,640 --> 00:01:24,229
out completely aside from any commercial

00:01:22,310 --> 00:01:26,119
interest my reading of the tea leaves

00:01:24,229 --> 00:01:27,740
says that mobile as a platform is

00:01:26,119 --> 00:01:29,600
currently and will continue to be an

00:01:27,740 --> 00:01:31,580
area of growth in our industry so I

00:01:29,600 --> 00:01:34,750
think it behooves us to understand what

00:01:31,580 --> 00:01:37,280
pythons story is on these new platforms

00:01:34,750 --> 00:01:39,259
I've also got a declared interest in GUI

00:01:37,280 --> 00:01:41,240
my issues especially as they relate to

00:01:39,259 --> 00:01:43,250
developer tools I've given presentations

00:01:41,240 --> 00:01:45,530
about Python about that and last year I

00:01:43,250 --> 00:01:47,509
gave a lightning talk where I announced

00:01:45,530 --> 00:01:50,270
a project called toga tiger is a

00:01:47,509 --> 00:01:52,549
cross-platform 100% system native Python

00:01:50,270 --> 00:01:55,220
native widget toolkit install wall using

00:01:52,549 --> 00:01:57,170
pip install toga one of the features of

00:01:55,220 --> 00:02:00,409
toga is that it can be used on mobile

00:01:57,170 --> 00:02:01,759
platforms but in all of course for in

00:02:00,409 --> 00:02:04,159
order for toga to work on mobile

00:02:01,759 --> 00:02:06,320
platforms Python needs to work on mobile

00:02:04,159 --> 00:02:08,179
black and over the last year I've been

00:02:06,320 --> 00:02:10,160
doing lots of work on that foundation on

00:02:08,179 --> 00:02:12,260
getting Python working well on mobile

00:02:10,160 --> 00:02:16,220
and purposes this talk is to give you

00:02:12,260 --> 00:02:18,140
the state of the union of that work so

00:02:16,220 --> 00:02:19,910
okay first off what exactly is mobile

00:02:18,140 --> 00:02:22,430
Python what am i referring to when I say

00:02:19,910 --> 00:02:23,270
mobile Python well essentially Python

00:02:22,430 --> 00:02:26,030
outer term

00:02:23,270 --> 00:02:28,040
mobile devices don't have a shell prompt

00:02:26,030 --> 00:02:30,050
do generally have a standard out a

00:02:28,040 --> 00:02:32,750
standard error but it's a debugging tool

00:02:30,050 --> 00:02:33,620
it isn't surface to the edge it also

00:02:32,750 --> 00:02:35,360
means you've got to deal with

00:02:33,620 --> 00:02:37,190
alternative input mechanisms touch

00:02:35,360 --> 00:02:39,590
screens keyboard recording isn't a good

00:02:37,190 --> 00:02:43,040
option or input mechanisms like gamepads

00:02:39,590 --> 00:02:46,730
so mobile Python can't be about the

00:02:43,040 --> 00:02:48,290
vanilla Python prompt mobile devices

00:02:46,730 --> 00:02:51,980
also changed the way punk now he is

00:02:48,290 --> 00:02:54,710
delivered the quantum book but is the

00:02:51,980 --> 00:02:56,120
app with some notable exceptions every

00:02:54,710 --> 00:02:58,490
app is expected to be basically

00:02:56,120 --> 00:03:00,680
self-contained you don't liver a common

00:02:58,490 --> 00:03:04,220
system service like lib python that

00:03:00,680 --> 00:03:05,990
other reason applications use my

00:03:04,220 --> 00:03:07,700
personal opinion and there's some

00:03:05,990 --> 00:03:09,560
evidence that the core team is broadly

00:03:07,700 --> 00:03:12,350
on board with this is that mobile python

00:03:09,560 --> 00:03:14,150
effectively made it only Python we

00:03:12,350 --> 00:03:16,490
shouldn't be trying to deliver the UNIX

00:03:14,150 --> 00:03:18,650
Python experience for iPhone because it

00:03:16,490 --> 00:03:20,270
just doesn't make any sense now that's

00:03:18,650 --> 00:03:23,120
not to say that there isn't a market for

00:03:20,270 --> 00:03:25,340
idle on iphone or a COC python prompt on

00:03:23,120 --> 00:03:28,070
iphone but i don't think that's Python

00:03:25,340 --> 00:03:29,990
cause bailiwick I think the focus should

00:03:28,070 --> 00:03:32,390
be on delivering a Python that can be

00:03:29,990 --> 00:03:34,130
embedded as a library and used either to

00:03:32,390 --> 00:03:35,720
provide scripting functionality to a

00:03:34,130 --> 00:03:38,300
native application data provide

00:03:35,720 --> 00:03:40,220
customizable behavior for a game or to

00:03:38,300 --> 00:03:42,290
embed the entire application so that you

00:03:40,220 --> 00:03:44,000
can develop an entire native application

00:03:42,290 --> 00:03:45,709
bridging the system libraries but with

00:03:44,000 --> 00:03:49,040
the core application logic being written

00:03:45,709 --> 00:03:50,270
in Python now one of the core features

00:03:49,040 --> 00:03:52,070
of python is its ability to run

00:03:50,270 --> 00:03:53,330
cross-platform the mobile space that

00:03:52,070 --> 00:03:54,860
means two things independence of

00:03:53,330 --> 00:03:57,140
operating systems and independence of

00:03:54,860 --> 00:03:58,580
hardware architecture for the purposes

00:03:57,140 --> 00:04:00,470
of this talk i'm going to focus on the

00:03:58,580 --> 00:04:01,550
big to ios and android now I'm not

00:04:00,470 --> 00:04:04,220
saying that other platforms aren't

00:04:01,550 --> 00:04:05,780
important but these two hold by far the

00:04:04,220 --> 00:04:07,430
bulk of the smartphone market and buy no

00:04:05,780 --> 00:04:09,110
small coincidence it's where the bulk of

00:04:07,430 --> 00:04:11,330
the effort over the mobile mobile Python

00:04:09,110 --> 00:04:13,850
community has been spent at the last

00:04:11,330 --> 00:04:14,990
year or so so let's have a look at those

00:04:13,850 --> 00:04:17,060
two platforms with a night of the

00:04:14,990 --> 00:04:19,310
problems they pose to a mobile python if

00:04:17,060 --> 00:04:20,989
you're developing for iOS depending upon

00:04:19,310 --> 00:04:22,790
what devices you're targeting you're

00:04:20,989 --> 00:04:26,080
dealing with at least three possibly

00:04:22,790 --> 00:04:28,810
more hardware platforms Xcode 5 point

00:04:26,080 --> 00:04:32,000
strood to that we're up to at the moment

00:04:28,810 --> 00:04:36,830
possibly as a currently builds for arm

00:04:32,000 --> 00:04:38,750
v7 I'm 64 and x86 64 physical devices

00:04:36,830 --> 00:04:41,780
all use arm chips recent physical

00:04:38,750 --> 00:04:43,730
devices all use am 64 but for local

00:04:41,780 --> 00:04:45,590
testing apple provides a simulator which

00:04:43,730 --> 00:04:48,260
reproduces all of the api's on the

00:04:45,590 --> 00:04:52,250
mobile platform but compiled against an

00:04:48,260 --> 00:04:56,360
I 386 chipset compilation uses clang

00:04:52,250 --> 00:04:58,670
which is GCC I'm up to update it what's

00:04:56,360 --> 00:05:00,560
called a fat binary that's a single

00:04:58,670 --> 00:05:03,290
library or executable the internally

00:05:00,560 --> 00:05:04,760
contains all the library simple each of

00:05:03,290 --> 00:05:07,520
the supported platforms effectively a

00:05:04,760 --> 00:05:10,030
big ball of mud that contains arm v7 and

00:05:07,520 --> 00:05:12,230
I'm 64 and I 386 symbols all in one

00:05:10,030 --> 00:05:14,690
unfortunately you can't do this in a

00:05:12,230 --> 00:05:16,990
sink called GCC the system libraries for

00:05:14,690 --> 00:05:20,270
the simulator and each platform of

00:05:16,990 --> 00:05:27,590
friend you have to compile each target

00:05:20,270 --> 00:05:29,420
separately and then they use a result of

00:05:27,590 --> 00:05:31,340
libraries are provided in Objective C

00:05:29,420 --> 00:05:33,620
which is a quirky little language but

00:05:31,340 --> 00:05:36,020
good news is that objective c is a very

00:05:33,620 --> 00:05:38,720
thin layer over the top of native see

00:05:36,020 --> 00:05:40,730
rossi thin enough that anything you can

00:05:38,720 --> 00:05:43,520
do an objective sneak and achieved with

00:05:40,730 --> 00:05:45,920
Rossi calls the quirky Objective C

00:05:43,520 --> 00:05:49,220
syntax is literally just a translation

00:05:45,920 --> 00:05:51,260
to those C API calls aperture Olympus

00:05:49,220 --> 00:05:55,340
spanner in the works last year with new

00:05:51,260 --> 00:05:59,860
language or Swift the good news in here

00:05:55,340 --> 00:06:03,500
at the moment from pythons perspective

00:05:59,860 --> 00:06:06,400
to my it is the nice set of syntactic

00:06:03,500 --> 00:06:08,330
sugars around the objective-c runtime

00:06:06,400 --> 00:06:10,280
replacing the quirks of Objective C

00:06:08,330 --> 00:06:11,480
syntax with some dynamic conventions

00:06:10,280 --> 00:06:13,090
that are slightly easy to work with and

00:06:11,480 --> 00:06:15,680
would be familiar to Python developers

00:06:13,090 --> 00:06:18,320
there aren't any signs that objective c

00:06:15,680 --> 00:06:20,000
is going away and even if it did swift

00:06:18,320 --> 00:06:21,740
is built on top of the clang tool chain

00:06:20,000 --> 00:06:24,860
so there's probably going to be a way in

00:06:21,740 --> 00:06:27,140
at a very low level the one big

00:06:24,860 --> 00:06:28,430
restriction that exists in on

00:06:27,140 --> 00:06:30,380
compilation is that you can't use

00:06:28,430 --> 00:06:33,080
dynamic linking now that's a big problem

00:06:30,380 --> 00:06:34,460
for Python binary modules if you need to

00:06:33,080 --> 00:06:36,650
use a binary module on a mobile platform

00:06:34,460 --> 00:06:38,450
you need to get it as a fat static

00:06:36,650 --> 00:06:41,270
binary and then link it into your

00:06:38,450 --> 00:06:44,240
executable or ship it as code and link

00:06:41,270 --> 00:06:45,860
it to your main project the elephant in

00:06:44,240 --> 00:06:47,330
the room is the app store apple is a

00:06:45,860 --> 00:06:49,550
gatekeeper and everything that goes on

00:06:47,330 --> 00:06:49,729
to iOS devices this means that the apt

00:06:49,550 --> 00:06:51,259
of

00:06:49,729 --> 00:06:53,719
Papa is at the mercy of your app

00:06:51,259 --> 00:06:55,879
reviewer the app store reviews the rules

00:06:53,719 --> 00:06:58,069
as a actual review rules require that

00:06:55,879 --> 00:07:00,319
apps are written in objective-c and/or

00:06:58,069 --> 00:07:02,330
Swift but there is an explicit allowance

00:07:00,319 --> 00:07:04,249
for scripting languages provided that

00:07:02,330 --> 00:07:06,439
all the scripts that are executing in

00:07:04,249 --> 00:07:08,809
the app either with the device or are

00:07:06,439 --> 00:07:10,490
entered by the user you can't download

00:07:08,809 --> 00:07:15,409
code from the internet and run them on

00:07:10,490 --> 00:07:17,029
your device this is slightly untested

00:07:15,409 --> 00:07:18,409
territory though there are apps written

00:07:17,029 --> 00:07:20,419
in python that are on the app store

00:07:18,409 --> 00:07:22,309
using kevy and i'll come give you in a

00:07:20,419 --> 00:07:24,229
bit but there's evidence to support the

00:07:22,309 --> 00:07:26,210
fact that apple won't reject apps that

00:07:24,229 --> 00:07:27,770
are built using Python now that's

00:07:26,210 --> 00:07:29,089
nothing to say that Apple won't change

00:07:27,770 --> 00:07:30,710
the rules tomorrow and retrospectively

00:07:29,089 --> 00:07:34,580
reject a whole bunch of apps but such is

00:07:30,710 --> 00:07:36,409
the pleasure of building for Apple this

00:07:34,580 --> 00:07:37,969
does lead to one suggestion why don't

00:07:36,409 --> 00:07:39,169
you just jailbreak your phone and that's

00:07:37,969 --> 00:07:41,330
fine if you want to go down that path

00:07:39,169 --> 00:07:42,710
but for my money if you want to claim

00:07:41,330 --> 00:07:44,089
you've got Python running on your phone

00:07:42,710 --> 00:07:46,430
the conversation doesn't start with

00:07:44,089 --> 00:07:47,659
voiding your warranty it's fine if

00:07:46,430 --> 00:07:49,729
you're willing to do that and I'm not

00:07:47,659 --> 00:07:53,599
going to stop restricting my own

00:07:49,729 --> 00:07:54,620
worldview to exclude jailbreaking okay

00:07:53,599 --> 00:07:56,449
so the other side of the motor ball

00:07:54,620 --> 00:07:57,860
python coin is Android if you're on

00:07:56,449 --> 00:07:59,599
Android the hardware platforms are

00:07:57,860 --> 00:08:02,180
similar to those for iOS Android can

00:07:59,599 --> 00:08:04,370
support arm x86 it also supports MIPS

00:08:02,180 --> 00:08:06,319
but the most common hardware devices at

00:08:04,370 --> 00:08:07,909
the moment are all using arm however

00:08:06,319 --> 00:08:09,709
that's where the similarities end a

00:08:07,909 --> 00:08:12,770
testing environment when you're running

00:08:09,709 --> 00:08:14,569
Android code on your laptop is an awful

00:08:12,770 --> 00:08:16,550
emulator so the full arm CPU

00:08:14,569 --> 00:08:18,559
architecture is being emulated on your

00:08:16,550 --> 00:08:21,529
laptop not simulated throughout through

00:08:18,559 --> 00:08:24,259
a compatibility library the compilation

00:08:21,529 --> 00:08:28,459
toolchain is java although after the

00:08:24,259 --> 00:08:30,110
recent US Supreme Court case no but very

00:08:28,459 --> 00:08:32,360
importantly it's not the Sun Oracle VM

00:08:30,110 --> 00:08:34,430
it's java bytecode that is then compiled

00:08:32,360 --> 00:08:36,349
to a native format that's that's

00:08:34,430 --> 00:08:39,490
actually executed on on data on twice

00:08:36,349 --> 00:08:42,199
you can still call system native code

00:08:39,490 --> 00:08:45,800
Java provides Jay and I and J and I

00:08:42,199 --> 00:08:49,250
exists on on on Android however there is

00:08:45,800 --> 00:08:51,529
a very big caveat on that on desktop J&I

00:08:49,250 --> 00:08:54,470
is pretty efficient and it doesn't have

00:08:51,529 --> 00:08:56,089
any serious constraints on Android

00:08:54,470 --> 00:08:57,410
there's a hard limit of two thousand

00:08:56,089 --> 00:08:59,569
object references and you need a

00:08:57,410 --> 00:09:02,300
reference for every data type every

00:08:59,569 --> 00:09:02,960
method name every object class every

00:09:02,300 --> 00:09:05,060
object in

00:09:02,960 --> 00:09:07,220
students that you use as you write your

00:09:05,060 --> 00:09:09,410
application run your application as a

00:09:07,220 --> 00:09:11,750
guide the minimum possible hello world

00:09:09,410 --> 00:09:15,200
app needs almost 4000 references to get

00:09:11,750 --> 00:09:17,030
going sorry have to do a lot of

00:09:15,200 --> 00:09:18,470
reference caching and recycling and that

00:09:17,030 --> 00:09:22,280
means a lot of repeated lookups which

00:09:18,470 --> 00:09:25,250
means that it is low slow enough that

00:09:22,280 --> 00:09:28,190
i'd almost question whether it's really

00:09:25,250 --> 00:09:29,780
viable when you do get to the point of

00:09:28,190 --> 00:09:31,730
distributing that's what you distribute

00:09:29,780 --> 00:09:33,410
is a different binary for each hardware

00:09:31,730 --> 00:09:35,960
platform that you want to support so you

00:09:33,410 --> 00:09:37,430
compile an r34 version and that will

00:09:35,960 --> 00:09:38,960
make your binary available for devices

00:09:37,430 --> 00:09:40,670
that support that architecture the App

00:09:38,960 --> 00:09:42,260
Store Google Play by default but there

00:09:40,670 --> 00:09:44,810
are other options including distributing

00:09:42,260 --> 00:09:46,400
without an app store and speaking of the

00:09:44,810 --> 00:09:47,930
Play Store it's the exact opposite of

00:09:46,400 --> 00:09:49,550
Apple your app pretty much has to set

00:09:47,930 --> 00:09:51,920
the user's phone on fire before it get

00:09:49,550 --> 00:09:55,160
banned from the Play Store so there's no

00:09:51,920 --> 00:09:56,990
distribution problem okay so that's what

00:09:55,160 --> 00:09:58,640
we're targeting how viable is Python

00:09:56,990 --> 00:10:01,880
mobile well the answer is yes it's very

00:09:58,640 --> 00:10:03,560
very viable as of today there is an open

00:10:01,880 --> 00:10:06,020
ticket on the Python ticket tracker 23

00:10:03,560 --> 00:10:07,940
670 with a patch that adds iOS support

00:10:06,020 --> 00:10:09,560
to build pythons build system if you

00:10:07,940 --> 00:10:11,930
download the three point four point two

00:10:09,560 --> 00:10:14,000
source tarball apply that patch CD iOS

00:10:11,930 --> 00:10:15,830
and bake wait 10 minutes you will have a

00:10:14,000 --> 00:10:18,560
Python doc framework you can drop into

00:10:15,830 --> 00:10:20,210
an Xcode project there's also a sample

00:10:18,560 --> 00:10:21,830
project in that iOS directory to show

00:10:20,210 --> 00:10:23,090
you how to hook up plastic not framework

00:10:21,830 --> 00:10:30,680
but I'll come back to that in a little

00:10:23,090 --> 00:10:32,480
bit it's also bug-free the fully passes

00:10:30,680 --> 00:10:35,240
the test suite they're like the Python

00:10:32,480 --> 00:10:37,730
core test suite simulator havier that

00:10:35,240 --> 00:10:39,800
many of the tests aren't appropriate for

00:10:37,730 --> 00:10:41,810
an embedded mobile python there are

00:10:39,800 --> 00:10:44,930
obvious ones TK enter doesn't work

00:10:41,810 --> 00:10:46,910
because TK isn't available on iOS Audio

00:10:44,930 --> 00:10:48,350
API don't work because mobile platforms

00:10:46,910 --> 00:10:51,800
have very complex audio relationships

00:10:48,350 --> 00:10:53,510
out of the box ssl doesn't work because

00:10:51,800 --> 00:10:57,380
it has a downstream dependency an open

00:10:53,510 --> 00:11:01,460
SSL there's also api differences iOS is

00:10:57,380 --> 00:11:05,300
if you squint hard enough a POSIX and it

00:11:01,460 --> 00:11:07,790
has a fork and a spawn but they're

00:11:05,300 --> 00:11:09,650
blocking so you can't create a

00:11:07,790 --> 00:11:12,230
subprocess and that means

00:11:09,650 --> 00:11:15,620
multiprocessing won't work fork based

00:11:12,230 --> 00:11:16,680
servers won't work and so on there are

00:11:15,620 --> 00:11:18,510
also some problems with unit

00:11:16,680 --> 00:11:20,279
sot unique sockets anything that relies

00:11:18,510 --> 00:11:22,050
upon arbitrary file system access or

00:11:20,279 --> 00:11:24,210
needs lots of disk or memory to run and

00:11:22,050 --> 00:11:25,529
so on so yeah there are limitations the

00:11:24,210 --> 00:11:27,360
catch is they're mostly in areas where

00:11:25,529 --> 00:11:29,910
on a mobile device you probably don't

00:11:27,360 --> 00:11:32,370
care you don't want to run a web server

00:11:29,910 --> 00:11:34,230
on your phone anything purely data based

00:11:32,370 --> 00:11:36,089
works exactly as expected you can zip

00:11:34,230 --> 00:11:37,649
compress translate whatever you want to

00:11:36,089 --> 00:11:39,540
do it all works fine and it'll know that

00:11:37,649 --> 00:11:43,020
networking things like HTTP lib they

00:11:39,540 --> 00:11:44,430
work fine as well now lastly there are

00:11:43,020 --> 00:11:46,620
some bugs that need to get worked out

00:11:44,430 --> 00:11:48,660
all the bugs at arm 64 are related to

00:11:46,620 --> 00:11:49,830
see types on arm v7 a couple of

00:11:48,660 --> 00:11:52,620
floating-point issues that need to be

00:11:49,830 --> 00:11:53,760
dealt with as well but what needs to be

00:11:52,620 --> 00:11:55,020
done well there's essentially three

00:11:53,760 --> 00:11:56,420
problems that need to be solved before

00:11:55,020 --> 00:12:00,810
we have a fully armed and operational

00:11:56,420 --> 00:12:03,149
Python on iOS firstly in the Python 3.5

00:12:00,810 --> 00:12:05,190
source tree actually was made to the

00:12:03,149 --> 00:12:08,370
base build system to fix a problem with

00:12:05,190 --> 00:12:10,980
running pythons builds in parallel but

00:12:08,370 --> 00:12:13,649
that broke the ability to do any cross

00:12:10,980 --> 00:12:16,589
platform built now this is logged it's

00:12:13,649 --> 00:12:18,660
Python issue 22 625 it's conceptually a

00:12:16,589 --> 00:12:21,029
really simple bug and it's really easy

00:12:18,660 --> 00:12:23,220
to explain but to fix it you've got to

00:12:21,029 --> 00:12:26,880
wrestle the Python build system and all

00:12:23,220 --> 00:12:28,680
I can't from all right secondly there

00:12:26,880 --> 00:12:30,660
are problems with live ffi now so the

00:12:28,680 --> 00:12:32,490
ctypes is the library that we use the

00:12:30,660 --> 00:12:34,230
access to a native library with that I

00:12:32,490 --> 00:12:35,880
mean policy native extensions you just

00:12:34,230 --> 00:12:38,580
have a calling convention and in Trent

00:12:35,880 --> 00:12:40,920
into the sea calling convention that

00:12:38,580 --> 00:12:42,180
failing ctypes tests are all due to the

00:12:40,920 --> 00:12:44,640
underlying library that makes that

00:12:42,180 --> 00:12:46,440
possible which is called lib fi FF eyes

00:12:44,640 --> 00:12:47,790
foreign function interface lib fi is a

00:12:46,440 --> 00:12:49,680
third-party library that allows you to

00:12:47,790 --> 00:12:51,209
coordinate directly from Python and it's

00:12:49,680 --> 00:12:53,760
the library that underpin see types and

00:12:51,209 --> 00:12:55,589
see ffi as a third-party project why do

00:12:53,760 --> 00:12:58,050
we need it well if you want to invoke

00:12:55,589 --> 00:13:00,180
system native calls from Python say to

00:12:58,050 --> 00:13:01,470
anything on the screen or responder

00:13:00,180 --> 00:13:02,970
touches you need to be able to interface

00:13:01,470 --> 00:13:05,970
with native API is and that means

00:13:02,970 --> 00:13:08,959
calling native api's through live fo lib

00:13:05,970 --> 00:13:11,279
FFA is a wonderful library when it works

00:13:08,959 --> 00:13:15,420
unfortunately the last stable release of

00:13:11,279 --> 00:13:17,490
FF I doesn't work on 64 it segfaults are

00:13:15,420 --> 00:13:20,010
basically every every possible call the

00:13:17,490 --> 00:13:22,529
trunk version mostly works it has some

00:13:20,010 --> 00:13:25,170
bugs but it mostly works but the trunk

00:13:22,529 --> 00:13:26,370
version currently breaks arm v7 support

00:13:25,170 --> 00:13:29,579
to the point where it doesn't even

00:13:26,370 --> 00:13:30,600
compile and unfortunately the response

00:13:29,579 --> 00:13:32,899
of the FFI project

00:13:30,600 --> 00:13:34,829
this point has been well you fix it and

00:13:32,899 --> 00:13:37,019
there doesn't appear to be anyone who's

00:13:34,829 --> 00:13:40,170
actively maintaining lib ffi for iOS

00:13:37,019 --> 00:13:42,060
which is obviously a problem so if

00:13:40,170 --> 00:13:43,649
you're comfortable with arm assembly or

00:13:42,060 --> 00:13:46,440
you'd like to become familiar with

00:13:43,649 --> 00:13:48,750
amazon assembly this is a problem that

00:13:46,440 --> 00:13:50,160
needs solving there's also an issue that

00:13:48,750 --> 00:13:51,720
someone for the core team needs to take

00:13:50,160 --> 00:13:53,819
tart charge or the broader issue and

00:13:51,720 --> 00:13:55,410
Shepherd it in the trunk at PyCon us

00:13:53,819 --> 00:13:56,490
this year there was a volunteer has

00:13:55,410 --> 00:13:58,529
stepped up but I haven't had a lot of

00:13:56,490 --> 00:14:00,980
feedback from him so what we need some

00:13:58,529 --> 00:14:03,870
prodding more broadly in the community

00:14:00,980 --> 00:14:06,360
look on Android isn't quite so far along

00:14:03,870 --> 00:14:08,459
there is a separate ticket 23 496 it

00:14:06,360 --> 00:14:10,290
also has a patch for 3.4 point to it

00:14:08,459 --> 00:14:12,839
quite at the point where it's a simple

00:14:10,290 --> 00:14:15,899
patch and compile there's still pie

00:14:12,839 --> 00:14:17,519
configure h after the compile step some

00:14:15,899 --> 00:14:21,720
configuration and compiler issues being

00:14:17,519 --> 00:14:24,480
sorted out and Kivi provides a Python

00:14:21,720 --> 00:14:26,009
2.7 point 6 build so it can be done it's

00:14:24,480 --> 00:14:29,970
just a matter of sorting out all the

00:14:26,009 --> 00:14:31,800
little issues then we need to get it

00:14:29,970 --> 00:14:33,810
working problem I thought on android

00:14:31,800 --> 00:14:35,819
based same through problems no I OS

00:14:33,810 --> 00:14:39,569
cross-platform build support and live

00:14:35,819 --> 00:14:44,089
ffi but like i said earlier J&I on

00:14:39,569 --> 00:14:48,149
android is slow and has limitations and

00:14:44,089 --> 00:14:51,329
really want you to use java so why don't

00:14:48,149 --> 00:14:54,120
we why don't we just use jython well it

00:14:51,329 --> 00:14:57,240
took that know java on android really

00:14:54,120 --> 00:15:00,500
isn't java jason is a one hundred

00:14:57,240 --> 00:15:05,069
percent pure java implementation of

00:15:00,500 --> 00:15:06,990
python it won't compile on android the

00:15:05,069 --> 00:15:09,360
java standard library on android doesn't

00:15:06,990 --> 00:15:10,800
contain a big chunk of java niño all the

00:15:09,360 --> 00:15:11,639
stuff for dealing with files directories

00:15:10,800 --> 00:15:13,139
file attributes in a

00:15:11,639 --> 00:15:14,939
platform-independent way and it has a

00:15:13,139 --> 00:15:16,410
bunch of dependencies things like antler

00:15:14,939 --> 00:15:17,850
and Xerces and nettie and a bunch of

00:15:16,410 --> 00:15:21,360
others that are pure java but won't

00:15:17,850 --> 00:15:22,970
compile on android another issue is that

00:15:21,360 --> 00:15:24,569
Jason only just hit Python 2.7

00:15:22,970 --> 00:15:26,370
compatibility a couple of months back

00:15:24,569 --> 00:15:28,319
Python 3 support is a bit of a pipe

00:15:26,370 --> 00:15:30,689
dream at this point if we're looking at

00:15:28,319 --> 00:15:32,130
Python for a new hardware platform it

00:15:30,689 --> 00:15:34,139
seems weird to me they'd be focusing on

00:15:32,130 --> 00:15:37,259
a flavor of the language that's his only

00:15:34,139 --> 00:15:38,880
mode at this point now at PyCon us Jim

00:15:37,259 --> 00:15:40,319
Baker gave a presentation about the

00:15:38,880 --> 00:15:41,279
state of Jason and he hinted that he

00:15:40,319 --> 00:15:43,709
thought we can't

00:15:41,279 --> 00:15:44,999
ability was achievable and sure that

00:15:43,709 --> 00:15:46,499
Jonathan will eventually get the Python

00:15:44,999 --> 00:15:48,360
3 support it really is just a matter of

00:15:46,499 --> 00:15:50,850
like everything in open-source resources

00:15:48,360 --> 00:15:52,470
but I'm also not completely convinced

00:15:50,850 --> 00:15:54,420
that Jason is necessarily the right

00:15:52,470 --> 00:15:56,519
solution either or one of the

00:15:54,420 --> 00:15:59,339
dependencies of Jason is antler it's an

00:15:56,519 --> 00:16:01,139
LR parser library for Java it needs this

00:15:59,339 --> 00:16:04,709
because Jason is a full implementation

00:16:01,139 --> 00:16:07,680
of Python including the compiler but for

00:16:04,709 --> 00:16:09,629
an embedded mobile Python you don't want

00:16:07,680 --> 00:16:11,790
that you don't want it to be compiling

00:16:09,629 --> 00:16:13,680
code on device necessarily you know you

00:16:11,790 --> 00:16:15,449
want to ship precompiled code that's

00:16:13,680 --> 00:16:18,300
going to go to the device and run and in

00:16:15,449 --> 00:16:19,949
Java that means Christ files once upon a

00:16:18,300 --> 00:16:21,959
time Jason did contain a tool called

00:16:19,949 --> 00:16:23,699
jars and see which would compile Python

00:16:21,959 --> 00:16:25,019
to java class files that tool was

00:16:23,699 --> 00:16:27,779
deprecated some architectural reasons

00:16:25,019 --> 00:16:30,959
and the replacement lamp is in the very

00:16:27,779 --> 00:16:32,399
early stages of development so is there

00:16:30,959 --> 00:16:33,990
anything else we can use I've taken a

00:16:32,399 --> 00:16:37,110
look at Jason enough to say that it

00:16:33,990 --> 00:16:38,730
isn't a quick fix getting compiled

00:16:37,110 --> 00:16:40,319
Python script code running on Android

00:16:38,730 --> 00:16:42,509
through java on a through java using

00:16:40,319 --> 00:16:44,009
jython isn't going to be simple it's

00:16:42,509 --> 00:16:45,360
definitely an approach worse than to

00:16:44,009 --> 00:16:46,980
write some sideration and you want to

00:16:45,360 --> 00:16:50,189
try it out you'll certainly go it go

00:16:46,980 --> 00:16:53,670
right they worth doing but I think there

00:16:50,189 --> 00:16:56,819
might be an easier way Python uses a

00:16:53,670 --> 00:16:59,879
stack-based black code language and so

00:16:56,819 --> 00:17:01,290
does java now there isn't complete

00:16:59,879 --> 00:17:03,269
one-to-one correspondence between the

00:17:01,290 --> 00:17:05,549
two languages but they are remarkably

00:17:03,269 --> 00:17:07,169
close I've done a little bit of

00:17:05,549 --> 00:17:09,510
tinkering here but based upon what I've

00:17:07,169 --> 00:17:12,959
seen I think it would be possible to

00:17:09,510 --> 00:17:18,419
compile Python bytecode directly to java

00:17:12,959 --> 00:17:21,169
bytecode without that much effort and if

00:17:18,419 --> 00:17:24,539
you think I'm completely bat guano crazy

00:17:21,169 --> 00:17:26,039
will you write but okay take a look at

00:17:24,539 --> 00:17:28,010
that bat net batch elders right run

00:17:26,039 --> 00:17:30,630
project it's a pure python

00:17:28,010 --> 00:17:33,510
implementation of a python bytecode

00:17:30,630 --> 00:17:36,210
machine it's about two thousand lines of

00:17:33,510 --> 00:17:38,789
code and it demonstrates that in order

00:17:36,210 --> 00:17:41,490
to run python bytecode all you really

00:17:38,789 --> 00:17:44,880
need is a some implementation of a list

00:17:41,490 --> 00:17:47,250
a dictionary a stack and an object which

00:17:44,880 --> 00:17:50,580
are the data types in Python and Java

00:17:47,250 --> 00:17:52,929
has really good implementations of those

00:17:50,580 --> 00:17:54,940
now I don't want to undersell it there

00:17:52,929 --> 00:17:58,240
are still obviously a lot that needs to

00:17:54,940 --> 00:17:59,649
be done to make this variable but you

00:17:58,240 --> 00:18:01,179
still need any so you still need to put

00:17:59,649 --> 00:18:03,220
the native of aput of the Python

00:18:01,179 --> 00:18:05,830
standard library to Jason native api's

00:18:03,220 --> 00:18:07,360
but I think it's worth exploring I've

00:18:05,830 --> 00:18:09,539
done enough exploration to convince

00:18:07,360 --> 00:18:12,039
myself that it's at least plausible and

00:18:09,539 --> 00:18:14,259
possibly less effort than getting jathan

00:18:12,039 --> 00:18:16,269
running if you've got an interest in

00:18:14,259 --> 00:18:18,039
android and java doesn't make you too

00:18:16,269 --> 00:18:19,600
sick and you're looking for something to

00:18:18,039 --> 00:18:21,340
tinker with in the sprints come and have

00:18:19,600 --> 00:18:23,159
a chat with me because i would like to

00:18:21,340 --> 00:18:25,840
see someone take a decent swing at this

00:18:23,159 --> 00:18:30,490
my yaks contain multitudes I've already

00:18:25,840 --> 00:18:31,960
got Q but wait getting Python actually

00:18:30,490 --> 00:18:33,070
working is only the start of story yes

00:18:31,960 --> 00:18:34,419
if we address all the problems I've

00:18:33,070 --> 00:18:35,769
discussed so far you'll have an embedded

00:18:34,419 --> 00:18:36,940
library that can run Python code but

00:18:35,769 --> 00:18:38,559
that's all it does it runs code

00:18:36,940 --> 00:18:41,440
outputting to the standard login console

00:18:38,559 --> 00:18:42,460
at the end user can't see so if you want

00:18:41,440 --> 00:18:44,710
to do something meaningful you have to

00:18:42,460 --> 00:18:46,090
breach the system native libraries you

00:18:44,710 --> 00:18:48,100
have a couple of options pi objective-c

00:18:46,090 --> 00:18:49,690
is the oldest it's a pure pais library

00:18:48,100 --> 00:18:51,129
users ctypes to provide a python like

00:18:49,690 --> 00:18:53,139
interface to system libraries it's

00:18:51,129 --> 00:18:54,940
focused in OSX it done almost no work on

00:18:53,139 --> 00:18:56,590
iOS so there's a lot of weight you're

00:18:54,940 --> 00:18:58,690
carrying around you can't use but it

00:18:56,590 --> 00:19:00,789
does wrap the Iowa it can be used to

00:18:58,690 --> 00:19:02,529
wrap the OS libraries a feeling

00:19:00,789 --> 00:19:04,419
capabilities and love and attention it

00:19:02,529 --> 00:19:06,159
might be usable I've used a similar

00:19:04,419 --> 00:19:08,799
approach on a library that I've written

00:19:06,159 --> 00:19:10,269
called Rubicon the let library doesn't

00:19:08,799 --> 00:19:11,590
try to wrap everything it just provides

00:19:10,269 --> 00:19:13,539
you the tools to rack what you need as

00:19:11,590 --> 00:19:15,129
you do it makes it very easy to wrap

00:19:13,539 --> 00:19:19,509
specific classes can give a pythonic

00:19:15,129 --> 00:19:21,070
interface objective-c object pi objects

00:19:19,509 --> 00:19:23,289
is the library killer users for

00:19:21,070 --> 00:19:25,330
cross-platform it uses siphon to purdue

00:19:23,289 --> 00:19:26,830
its native bridging i can't speak for

00:19:25,330 --> 00:19:27,940
anyone elses experience but i've always

00:19:26,830 --> 00:19:29,889
found siphoned to be a little bit

00:19:27,940 --> 00:19:31,600
twitchy the last time i used it which

00:19:29,889 --> 00:19:33,159
was to compile kiddies tools the most

00:19:31,600 --> 00:19:34,809
recent stable releases sites and had

00:19:33,159 --> 00:19:38,409
bugs that prevented biologists from even

00:19:34,809 --> 00:19:39,580
compiling so gimme uses it but with

00:19:38,409 --> 00:19:41,710
enough tinkering it cubby could be made

00:19:39,580 --> 00:19:43,360
to work on Android you've also got a

00:19:41,710 --> 00:19:45,369
choice rubicon Java is a library I've

00:19:43,360 --> 00:19:47,080
written using ctypes virginia's is from

00:19:45,369 --> 00:19:48,940
heavy users siphon again it's pretty

00:19:47,080 --> 00:19:50,649
much exactly the same q caveat citizens

00:19:48,940 --> 00:19:53,110
issed on iOS but of course this is all

00:19:50,649 --> 00:19:55,059
using c pi thing not a native Java

00:19:53,110 --> 00:19:57,279
interface ison library built using

00:19:55,059 --> 00:19:59,710
jython or Russell's crazy java yak

00:19:57,279 --> 00:20:01,500
wouldn't the bridge or at least it would

00:19:59,710 --> 00:20:04,330
need a different type of bridge

00:20:01,500 --> 00:20:05,470
and once you've got that bridge then

00:20:04,330 --> 00:20:06,880
you've got nothing you've got to use

00:20:05,470 --> 00:20:08,620
that bridge at this point you've got

00:20:06,880 --> 00:20:10,539
three options the first option is to go

00:20:08,620 --> 00:20:11,980
completely native you can if you've got

00:20:10,539 --> 00:20:13,360
a bridge you can instantiate native

00:20:11,980 --> 00:20:15,130
classes you can sub class in its

00:20:13,360 --> 00:20:17,200
application you can add an android

00:20:15,130 --> 00:20:18,399
widget button to a linear layer all

00:20:17,200 --> 00:20:20,679
you're doing is changing the language

00:20:18,399 --> 00:20:22,630
that you're writing it in second option

00:20:20,679 --> 00:20:24,370
is kitty kitty has been pretty much the

00:20:22,630 --> 00:20:26,500
only real answer for I thought I mobile

00:20:24,370 --> 00:20:28,120
up until about a year ago now i have to

00:20:26,500 --> 00:20:29,649
give full credit to kitty their code is

00:20:28,120 --> 00:20:30,820
very was very useful when I got started

00:20:29,649 --> 00:20:33,429
and trying to work out what the hell is

00:20:30,820 --> 00:20:35,649
going on here but personally I'm not a

00:20:33,429 --> 00:20:37,899
fan of Kiev either project and a couple

00:20:35,649 --> 00:20:39,760
of reasons first for lots of loot mature

00:20:37,899 --> 00:20:41,409
project documentation is a bit hitting

00:20:39,760 --> 00:20:43,750
this I had a lot of trouble getting

00:20:41,409 --> 00:20:44,950
started secondly they've taken the

00:20:43,750 --> 00:20:47,230
native nowhere approach to GUI

00:20:44,950 --> 00:20:48,640
development they don't use system native

00:20:47,230 --> 00:20:50,289
widgets in their applications they've

00:20:48,640 --> 00:20:52,179
come up with their own GUI layer which

00:20:50,289 --> 00:20:54,070
they then port to every platform so they

00:20:52,179 --> 00:20:55,600
draw TV style buttons and Kivi style

00:20:54,070 --> 00:20:57,010
checkboxes and so on and that's fine

00:20:55,600 --> 00:20:59,350
it's an approach and it definitely works

00:20:57,010 --> 00:21:02,169
but it's not my preferred option I like

00:20:59,350 --> 00:21:03,730
system native widgets third they've

00:21:02,169 --> 00:21:05,649
convolved all the pieces of the puzzle

00:21:03,730 --> 00:21:06,820
into a single project the core Python

00:21:05,649 --> 00:21:08,140
library that breached the system

00:21:06,820 --> 00:21:10,029
libraries the cross platform api

00:21:08,140 --> 00:21:13,570
providing gooeys are all blurred into

00:21:10,029 --> 00:21:15,909
this single kivi thing tvs developer

00:21:13,570 --> 00:21:17,409
tools mean you have to build all of kivi

00:21:15,909 --> 00:21:21,100
and because there's no dynamic linking

00:21:17,409 --> 00:21:23,110
you get all of kivi not just the python

00:21:21,100 --> 00:21:25,419
not just the printing bits you can't opt

00:21:23,110 --> 00:21:27,309
out of the bits you don't want now

00:21:25,419 --> 00:21:28,840
that's intitle spend their energy is

00:21:27,309 --> 00:21:30,399
making their own project as strong and

00:21:28,840 --> 00:21:31,840
consistent and whatever built they want

00:21:30,399 --> 00:21:33,549
to have but the approach they've taken

00:21:31,840 --> 00:21:34,899
hasn't really encouraged ricky's and the

00:21:33,549 --> 00:21:36,250
proof of this is that nobody on the

00:21:34,899 --> 00:21:37,809
giving team has been working with the

00:21:36,250 --> 00:21:40,149
python team to get that fixes and

00:21:37,809 --> 00:21:41,890
patches into pipe and call kibby's been

00:21:40,149 --> 00:21:44,799
around for years python mobile SI gan he

00:21:41,890 --> 00:21:46,179
started in the last year now they also

00:21:44,799 --> 00:21:48,309
appear to have completely missed out

00:21:46,179 --> 00:21:49,690
some really easy wins in a developer

00:21:48,309 --> 00:21:51,570
story one of the nice things about

00:21:49,690 --> 00:21:54,070
mobile development is that they are very

00:21:51,570 --> 00:21:56,500
consistent binary platforms you are a

00:21:54,070 --> 00:21:59,860
library for arm v7 iOS and it works on

00:21:56,500 --> 00:22:02,950
any arm v7 iOS device that means you can

00:21:59,860 --> 00:22:05,679
ship binaries but for some reason kivi

00:22:02,950 --> 00:22:06,820
doesn't do that now I haven't had a

00:22:05,679 --> 00:22:08,169
chance to talk with anyone at the QB

00:22:06,820 --> 00:22:11,740
project about that decision but I can

00:22:08,169 --> 00:22:13,360
pretty clearly damage to do that if you

00:22:11,740 --> 00:22:14,570
can ship binaries for all the Python

00:22:13,360 --> 00:22:17,330
bits it makes it much

00:22:14,570 --> 00:22:18,889
for newcomers to get started now again

00:22:17,330 --> 00:22:21,649
all that's it I don't badmouth the

00:22:18,889 --> 00:22:23,899
project key ductwork it is reasonably

00:22:21,649 --> 00:22:25,100
mature there are actual key the apps in

00:22:23,899 --> 00:22:27,139
the App Store which is something that I

00:22:25,100 --> 00:22:28,880
cannot claim so if you need to do

00:22:27,139 --> 00:22:32,240
something now it's definitely worth the

00:22:28,880 --> 00:22:33,409
exploration option three toga now tiger

00:22:32,240 --> 00:22:36,049
it's the cross white platform widget

00:22:33,409 --> 00:22:37,669
I've written it uses system native

00:22:36,049 --> 00:22:39,529
widgets sew a button on iOS he's a

00:22:37,669 --> 00:22:42,110
uibutton and Android it's an Android doc

00:22:39,529 --> 00:22:43,880
we just a button that said Tiger is not

00:22:42,110 --> 00:22:46,299
very mature at all it's missing a lot of

00:22:43,880 --> 00:22:48,740
widgets which is to say most of them

00:22:46,299 --> 00:22:50,330
since I announced last year I've been

00:22:48,740 --> 00:22:53,389
very much distracted by the base level

00:22:50,330 --> 00:22:55,070
getting Python working problem along

00:22:53,389 --> 00:22:57,289
with all the other Django and yaks and

00:22:55,070 --> 00:22:58,700
whatnot that I've got in my life I've

00:22:57,289 --> 00:23:00,049
been spending a bunch of time making

00:22:58,700 --> 00:23:01,610
some pretty fundamental changes

00:23:00,049 --> 00:23:05,029
reworking the way widgets like it laid

00:23:01,610 --> 00:23:06,049
out again my ex contain altitudes but

00:23:05,029 --> 00:23:07,580
part of the reason I've been so

00:23:06,049 --> 00:23:09,200
distracted is that I've been focusing on

00:23:07,580 --> 00:23:11,360
making the developer story really clean

00:23:09,200 --> 00:23:13,159
at the moment the process looks like

00:23:11,360 --> 00:23:14,899
this you get cooked cutter it's a

00:23:13,159 --> 00:23:17,090
project from Audrey and Danny Roy

00:23:14,899 --> 00:23:19,129
Greenfield to generate a template

00:23:17,090 --> 00:23:20,659
project you download and unpacks and

00:23:19,129 --> 00:23:22,009
binary support libraries and then if

00:23:20,659 --> 00:23:24,200
you've got a running Python project with

00:23:22,009 --> 00:23:25,580
a main why entry point the support tab

00:23:24,200 --> 00:23:27,710
all includes some of the downstream

00:23:25,580 --> 00:23:29,679
dependencies like openssl so you can do

00:23:27,710 --> 00:23:33,110
https connections out of the box and

00:23:29,679 --> 00:23:36,169
android exactly the same story except

00:23:33,110 --> 00:23:40,340
it's Python 2.7 using C Python but it

00:23:36,169 --> 00:23:41,600
works but by way of an announcement I've

00:23:40,340 --> 00:23:43,250
also been working in a way to make this

00:23:41,600 --> 00:23:45,440
even easier I've just released a couple

00:23:43,250 --> 00:23:46,669
days ago a tool called briefcase for

00:23:45,440 --> 00:23:49,850
those you are following and asking for

00:23:46,669 --> 00:23:51,559
my naming hints I've so briefcase is a

00:23:49,850 --> 00:23:54,110
dist utils extension that will convert

00:23:51,559 --> 00:23:56,299
any project with a setup pi into a

00:23:54,110 --> 00:23:57,799
working native mobile project including

00:23:56,299 --> 00:24:00,230
installing all the library dependencies

00:23:57,799 --> 00:24:02,210
all the Python dependencies although

00:24:00,230 --> 00:24:04,330
everything you need to get going to just

00:24:02,210 --> 00:24:07,639
open up an Xcode and hit the Run button

00:24:04,330 --> 00:24:10,159
I have got stubbed their for Android

00:24:07,639 --> 00:24:11,750
they don't work and just quietly it also

00:24:10,159 --> 00:24:13,340
works on OSX as well so you can spit out

00:24:11,750 --> 00:24:16,059
a native OS X application that is

00:24:13,340 --> 00:24:16,059
completely standalone

00:24:20,270 --> 00:24:23,880
so what does the future hold well

00:24:22,650 --> 00:24:25,170
there's a lot of work still to be done I

00:24:23,880 --> 00:24:26,520
can't speak for Kivi and I'm sure

00:24:25,170 --> 00:24:27,660
they'll continue to evolve their api's

00:24:26,520 --> 00:24:29,670
and platform and I wish them all the

00:24:27,660 --> 00:24:31,500
best as for Togo I'm going to keep

00:24:29,670 --> 00:24:33,810
working on it my ex didn't need that

00:24:31,500 --> 00:24:35,850
shaven if for no other reason that I

00:24:33,810 --> 00:24:38,220
want to put phonegap in a box put that

00:24:35,850 --> 00:24:41,970
box into a bigger box put that box into

00:24:38,220 --> 00:24:44,720
a rocket and fire it into the Sun I'd

00:24:41,970 --> 00:24:47,640
appreciate any help there's plenty to do

00:24:44,720 --> 00:24:50,370
and for my part it might all be at

00:24:47,640 --> 00:24:53,460
fool's errand I'm pretty good full I

00:24:50,370 --> 00:24:55,050
don't think it is I think that as a

00:24:53,460 --> 00:24:56,700
community we've got a huge threat on our

00:24:55,050 --> 00:24:58,350
hands mobile is a platform is starting

00:24:56,700 --> 00:24:59,820
to become really important part of the

00:24:58,350 --> 00:25:02,040
development landscape and if Python

00:24:59,820 --> 00:25:03,710
doesn't have a good story on mobile we

00:25:02,040 --> 00:25:06,210
run the risk of being left behind and

00:25:03,710 --> 00:25:07,560
that would make me really sad because we

00:25:06,210 --> 00:25:09,330
as a community have built something

00:25:07,560 --> 00:25:11,400
really great here it's a language that

00:25:09,330 --> 00:25:13,080
is accessible to newcomers but robust

00:25:11,400 --> 00:25:16,110
enough to professionals useful in

00:25:13,080 --> 00:25:18,180
multiple domains but the threat is also

00:25:16,110 --> 00:25:19,710
a huge opportunity it gives the Python

00:25:18,180 --> 00:25:21,450
community an opportunity to build some

00:25:19,710 --> 00:25:24,630
excitement where it's needed around

00:25:21,450 --> 00:25:26,040
python3 one criticism of Python 3 says

00:25:24,630 --> 00:25:28,050
there's no compelling reason to move off

00:25:26,040 --> 00:25:29,640
Python 2 now I disagree with a sip of

00:25:28,050 --> 00:25:31,320
the assessment but mobile python is just

00:25:29,640 --> 00:25:33,300
getting started this could be the thing

00:25:31,320 --> 00:25:36,900
that convinces people to get onto Python

00:25:33,300 --> 00:25:38,880
3 and many of the areas where pot has

00:25:36,900 --> 00:25:40,830
gained traction Science in Education the

00:25:38,880 --> 00:25:43,560
areas where mobile has the potential to

00:25:40,830 --> 00:25:45,120
make a huge impact imagine world where

00:25:43,560 --> 00:25:46,800
scientists with very little programming

00:25:45,120 --> 00:25:48,150
experience can knock together a quick

00:25:46,800 --> 00:25:49,380
user interface that put in the hands of

00:25:48,150 --> 00:25:51,240
their field experiment is gathering

00:25:49,380 --> 00:25:52,920
information imagine a world where you

00:25:51,240 --> 00:25:54,300
can get kids excited in programming

00:25:52,920 --> 00:25:57,060
because they can build something that

00:25:54,300 --> 00:25:58,920
can build their pygame zero running on

00:25:57,060 --> 00:26:03,930
their phone and play with their friends

00:25:58,920 --> 00:26:05,910
in short the potential and potential

00:26:03,930 --> 00:26:07,920
audience for a mobile python i think is

00:26:05,910 --> 00:26:10,080
huge and we're only at the start of the

00:26:07,920 --> 00:26:11,490
journey python mobile sigma is only a

00:26:10,080 --> 00:26:14,070
few months old there's still plenty of

00:26:11,490 --> 00:26:15,210
photography and I'd like as many of you

00:26:14,070 --> 00:26:18,660
as possible to come join me on this

00:26:15,210 --> 00:26:19,950
adventure oh we've possibly got time for

00:26:18,660 --> 00:26:22,320
questions I don't know if I helped will

00:26:19,950 --> 00:26:23,550
help run a bit long but if I even if we

00:26:22,320 --> 00:26:24,570
don't come and grab me over the next

00:26:23,550 --> 00:26:27,680
couple days I'm here to the end of the

00:26:24,570 --> 00:26:27,680
sprints thank you very much

00:26:37,919 --> 00:26:47,049
mikus Mike Ross yo to hang on hang on

00:26:41,230 --> 00:26:48,700
I'll get there this may turn out

00:26:47,049 --> 00:26:51,309
actually to be a question for somebody

00:26:48,700 --> 00:26:54,100
else but is there any kind of C Python

00:26:51,309 --> 00:26:57,549
core development group response to

00:26:54,100 --> 00:27:00,220
questions about compiling to mobile okay

00:26:57,549 --> 00:27:02,830
yes I invited us at the Python my voice

00:27:00,220 --> 00:27:04,990
Python language summit at PyCon us this

00:27:02,830 --> 00:27:06,880
year and i gave a 10 minute version of

00:27:04,990 --> 00:27:09,250
this presentation by video to them

00:27:06,880 --> 00:27:11,500
because i couldn't make it to montreal

00:27:09,250 --> 00:27:13,240
the feedback that I've got from that is

00:27:11,500 --> 00:27:18,250
that broadly it's yes let's make that

00:27:13,240 --> 00:27:20,409
happen make that happen please so yeah

00:27:18,250 --> 00:27:21,909
that the the the the whole sticking

00:27:20,409 --> 00:27:23,169
point that is kind of the shepherding

00:27:21,909 --> 00:27:25,240
process there are a couple of things

00:27:23,169 --> 00:27:27,070
that need to get changed that I have

00:27:25,240 --> 00:27:29,200
made some decisions because I needed to

00:27:27,070 --> 00:27:30,520
make a decision I don't know if they're

00:27:29,200 --> 00:27:31,929
necessarily the right decisions there

00:27:30,520 --> 00:27:34,120
are a bunch of issues to resolve about

00:27:31,929 --> 00:27:35,529
exactly how you configure this the best

00:27:34,120 --> 00:27:36,909
way to make sure you've got the binary

00:27:35,529 --> 00:27:38,500
modules you have to have in a static

00:27:36,909 --> 00:27:40,480
binary we can go into those great day

00:27:38,500 --> 00:27:42,929
but those decisions need to be vetted

00:27:40,480 --> 00:27:46,919
the decisions can be done in other ways

00:27:42,929 --> 00:27:46,919
the patch currently does it in a way

00:27:48,240 --> 00:28:02,070
I'll repeat can't say so can you compile

00:27:58,960 --> 00:28:04,690
it can you take a pipe ijs compile

00:28:02,070 --> 00:28:12,520
Python to JavaScript to run nodejs on

00:28:04,690 --> 00:28:13,390
the phone yeah that yeah that rocket is

00:28:12,520 --> 00:28:14,860
going to need to get a bit i'm gonna

00:28:13,390 --> 00:28:17,049
room for second box in the rocket yeah

00:28:14,860 --> 00:28:18,309
and probably yeah I mean it's a euro

00:28:17,049 --> 00:28:20,169
Django con someone acting pitching the

00:28:18,309 --> 00:28:22,899
idea of saying okay well let's go put a

00:28:20,169 --> 00:28:25,000
django server running on the app running

00:28:22,899 --> 00:28:27,190
on a nap with a webview that just serves

00:28:25,000 --> 00:28:28,330
its own internal content so that then

00:28:27,190 --> 00:28:30,010
you can just take your web application

00:28:28,330 --> 00:28:32,140
and stick it on mobile and it is a

00:28:30,010 --> 00:28:33,760
mobile app which again you could do as a

00:28:32,140 --> 00:28:37,539
one as a one page over you know keeping

00:28:33,760 --> 00:28:41,380
a briefcase thing so yeah and that

00:28:37,539 --> 00:28:44,380
follows in with my question the extra

00:28:41,380 --> 00:28:46,360
threat from the node side is meteor and

00:28:44,380 --> 00:28:48,370
it having the back

00:28:46,360 --> 00:28:50,500
and then the front end I've tried to

00:28:48,370 --> 00:28:52,810
eliminate half of the threat by taking

00:28:50,500 --> 00:28:55,720
out the server side component and hence

00:28:52,810 --> 00:28:57,690
we have django d DP but the reality is

00:28:55,720 --> 00:29:00,340
we need to move quickly on this or

00:28:57,690 --> 00:29:02,920
python is going to be the cobol of the

00:29:00,340 --> 00:29:08,320
web world is that a question or a

00:29:02,920 --> 00:29:10,090
comment so your emphasis has been mostly

00:29:08,320 --> 00:29:12,280
on C Python and a bit on Jason what

00:29:10,090 --> 00:29:14,380
about pi PI it's been mentioned a new

00:29:12,280 --> 00:29:19,720
backend for pi PI that would compile to

00:29:14,380 --> 00:29:21,700
iOS or to Android ok a there's a couple

00:29:19,720 --> 00:29:24,340
of complications there pipe i require

00:29:21,700 --> 00:29:26,200
requires you to have ability to rewrite

00:29:24,340 --> 00:29:28,120
certain symbol tables dynamically as the

00:29:26,200 --> 00:29:29,740
application runs and ajith's so I'm

00:29:28,120 --> 00:29:30,760
given to believe I haven't done the

00:29:29,740 --> 00:29:33,730
experimentation myself but I've been

00:29:30,760 --> 00:29:35,710
told that pipe I won't work on Android I

00:29:33,730 --> 00:29:37,720
sorry on iOS might work on Android oh no

00:29:35,710 --> 00:29:41,070
because of limitations of what they will

00:29:37,720 --> 00:29:43,690
let you do with a running application

00:29:41,070 --> 00:29:48,160
targeting it to a different back-end to

00:29:43,690 --> 00:29:52,450
spit out effectively native code good

00:29:48,160 --> 00:29:56,350
question I don't know maybe I know there

00:29:52,450 --> 00:30:00,610
was at some point a java java backend

00:29:56,350 --> 00:30:03,130
for pi PI I think I can't remember so I

00:30:00,610 --> 00:30:05,050
don't know I know enough to be Dave by

00:30:03,130 --> 00:30:06,190
not enough to really be out of comments

00:30:05,050 --> 00:30:07,300
so you might want to take that out with

00:30:06,190 --> 00:30:09,490
the platform but it's certainly you know

00:30:07,300 --> 00:30:15,640
it sounds on principle it's possibly

00:30:09,490 --> 00:30:18,570
worth looking at maybe I just thought

00:30:15,640 --> 00:30:21,070
amber had a question out there is it

00:30:18,570 --> 00:30:27,159
Joe way to pop see the microphone here

00:30:21,070 --> 00:30:30,340
god this forever know the jet would ever

00:30:27,159 --> 00:30:32,320
work on mobile basically because of that

00:30:30,340 --> 00:30:33,820
rewriting thing but you can use PI paid

00:30:32,320 --> 00:30:36,009
without the deity it's just horrendously

00:30:33,820 --> 00:30:38,649
slow yeah so if you would like your

00:30:36,009 --> 00:30:39,970
phone to catch on fire and I don't get

00:30:38,649 --> 00:30:41,169
anything you sleep down and that's

00:30:39,970 --> 00:30:44,860
really Android App Store that'll be fine

00:30:41,169 --> 00:30:54,029
yeah yeah yeah it's a full point forward

00:30:44,860 --> 00:30:54,029
above yeah okay well thank you very much

00:30:58,830 --> 00:31:00,890

YouTube URL: https://www.youtube.com/watch?v=Cbkcr3ofBmk


