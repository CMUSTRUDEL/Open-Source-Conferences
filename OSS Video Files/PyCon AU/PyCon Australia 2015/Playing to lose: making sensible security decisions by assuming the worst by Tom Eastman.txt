Title: Playing to lose: making sensible security decisions by assuming the worst by Tom Eastman
Publication date: 2015-08-04
Playlist: PyCon Australia 2015
Description: 
	The unfortunate truth about networked applications is that an attacker only needs to know one thing you didn't know to get past your defenses. You need to know everything, they don't.

The odds aren't in your favour. You're eventually going to get hacked.

That's the bad news. But if you stop thinking about a security compromise as that thing you close your eyes and hope never happens", and instead start thinking about it as an inevitability, then you can start making better security decisions.

"If they compromise my web servers, how do I protect my application servers?"

"If they break my application server code, how can I prevent them from gaining a foothold on my infrastructure?"

"If they poison my web-site with cross-site scripting, how do I find out before my users get hurt?"

In short: "If I’m going to get hacked, how do I make it hurt less?"

This is a talk about defense in depth.

Building a secure system isn’t about luck, it’s about planning.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:11,099 --> 00:00:16,150
alright welcome so annex beaker tom

00:00:14,019 --> 00:00:20,039
eastman is leaking sonnets safe stuck

00:00:16,150 --> 00:00:28,570
and the talk is called playing to lose

00:00:20,039 --> 00:00:29,859
please welcome him hey so if you don't

00:00:28,570 --> 00:00:33,160
know me a tiny little bit of background

00:00:29,859 --> 00:00:36,160
I'm a Python dev a very heavy Django

00:00:33,160 --> 00:00:37,809
user and security consultant for safe

00:00:36,160 --> 00:00:39,070
stack IO as of a couple months ago so

00:00:37,809 --> 00:00:41,110
it's kind of a fresh roll and it's an

00:00:39,070 --> 00:00:43,449
interesting new set of challenges i'm

00:00:41,110 --> 00:00:45,789
here today to talk about the scary world

00:00:43,449 --> 00:00:47,469
we live in and how to find ways to make

00:00:45,789 --> 00:00:50,050
it feel a little less scary if you

00:00:47,469 --> 00:00:51,910
possibly can who in this room actually

00:00:50,050 --> 00:00:54,070
does do web application development

00:00:51,910 --> 00:00:55,359
either on the public internet or like a

00:00:54,070 --> 00:00:58,960
private Internet you know for your

00:00:55,359 --> 00:01:01,300
company yep so cool so hypothetical

00:00:58,960 --> 00:01:02,769
question you get back from pike ona you

00:01:01,300 --> 00:01:06,820
and you are told that while you were

00:01:02,769 --> 00:01:10,390
here your website was hacked into so on

00:01:06,820 --> 00:01:14,380
a scale of one to many and lots how

00:01:10,390 --> 00:01:18,970
panicked are you to hear that I'll take

00:01:14,380 --> 00:01:21,280
that bet too many right yep so cool so

00:01:18,970 --> 00:01:22,950
what if when you got back you were told

00:01:21,280 --> 00:01:27,009
that you were hacked into six months ago

00:01:22,950 --> 00:01:31,630
and you only just found out right so

00:01:27,009 --> 00:01:33,970
that causes a lot of panic and people

00:01:31,630 --> 00:01:36,640
are usually scared because they haven't

00:01:33,970 --> 00:01:40,929
thought about this it's not so much oh

00:01:36,640 --> 00:01:41,979
no what will we do it's it this has

00:01:40,929 --> 00:01:46,390
never even occurred to me that this

00:01:41,979 --> 00:01:47,739
might happen yeah so you your your

00:01:46,390 --> 00:01:50,800
thought process on this usually isn't

00:01:47,739 --> 00:01:52,720
much more than please no I don't really

00:01:50,800 --> 00:01:54,340
want that to happen there is actually a

00:01:52,720 --> 00:01:55,780
correct answer to this question to the

00:01:54,340 --> 00:01:58,300
question how would you feel have you

00:01:55,780 --> 00:02:02,340
been hacked the answer is well it

00:01:58,300 --> 00:02:05,200
depends why is that the right answer

00:02:02,340 --> 00:02:06,700
because it doesn't include panic for one

00:02:05,200 --> 00:02:10,270
thing but it also shows that you've

00:02:06,700 --> 00:02:12,010
thought about the problem it depends

00:02:10,270 --> 00:02:15,010
means that at least you realize that

00:02:12,010 --> 00:02:18,069
there's levels of how bad this could

00:02:15,010 --> 00:02:19,599
have been what I'm doing today is just

00:02:18,069 --> 00:02:23,019
leading you down this thought experiment

00:02:19,599 --> 00:02:23,610
of thinking these scary thoughts and

00:02:23,019 --> 00:02:25,320
imagining

00:02:23,610 --> 00:02:26,930
how you'll get hacked is the only way to

00:02:25,320 --> 00:02:29,220
protect yourself from getting hat

00:02:26,930 --> 00:02:31,140
thinking about getting hacked is not an

00:02:29,220 --> 00:02:32,550
exercise in masochism it's absolutely

00:02:31,140 --> 00:02:34,860
critical for the safety of your

00:02:32,550 --> 00:02:35,850
application and so that's what we're

00:02:34,860 --> 00:02:37,680
going to do today we're going to look at

00:02:35,850 --> 00:02:40,590
an imaginary web stack and we're going

00:02:37,680 --> 00:02:43,050
to think about the different layers of

00:02:40,590 --> 00:02:44,730
security that could be added based on a

00:02:43,050 --> 00:02:47,820
thought experiment of what could go

00:02:44,730 --> 00:02:49,380
wrong the most important thing to

00:02:47,820 --> 00:02:52,590
realize about security is that it's not

00:02:49,380 --> 00:02:55,740
any one thing there's no single security

00:02:52,590 --> 00:02:58,530
mechanism that stops all attacks from

00:02:55,740 --> 00:03:02,430
all attackers I haven't read the f5

00:02:58,530 --> 00:03:04,290
marketing material but your firewall

00:03:02,430 --> 00:03:07,470
can't do that your firewall can't save

00:03:04,290 --> 00:03:09,060
you from everything one thing can I'm

00:03:07,470 --> 00:03:10,500
plugging the server melting it down to

00:03:09,060 --> 00:03:13,350
the slag and throwing the slag into the

00:03:10,500 --> 00:03:14,790
Mariana Trench but even then the

00:03:13,350 --> 00:03:16,080
attacker will still nab the database

00:03:14,790 --> 00:03:20,160
backup that you left behind on your

00:03:16,080 --> 00:03:22,830
workstation home directory which none of

00:03:20,160 --> 00:03:24,300
you have done right there's more than

00:03:22,830 --> 00:03:25,500
one kind of attack and so you have to

00:03:24,300 --> 00:03:29,220
think about more than one kind of

00:03:25,500 --> 00:03:32,850
defense a secure system relies on many

00:03:29,220 --> 00:03:34,620
defenses in many places you have to

00:03:32,850 --> 00:03:38,340
think about who the bad guys are you

00:03:34,620 --> 00:03:41,880
have to start imagining to yourself my

00:03:38,340 --> 00:03:45,000
site is on the internet who cares and

00:03:41,880 --> 00:03:47,130
why do they want to hurt me and there's

00:03:45,000 --> 00:03:48,959
some pretty structured ways that you can

00:03:47,130 --> 00:03:51,269
go about thinking about this sort of

00:03:48,959 --> 00:03:53,190
thing and you want to consider any

00:03:51,269 --> 00:03:55,350
hypothetical person what their

00:03:53,190 --> 00:03:57,299
motivation might be what is driving this

00:03:55,350 --> 00:03:59,100
individual or group to act what

00:03:57,299 --> 00:04:03,269
resources they might have including

00:03:59,100 --> 00:04:06,540
money or access to people or systems and

00:04:03,269 --> 00:04:09,799
what is their skill level so just as a

00:04:06,540 --> 00:04:12,060
really simple example set of examples

00:04:09,799 --> 00:04:14,640
opportunistic script kiddies anyone

00:04:12,060 --> 00:04:16,739
who's running a website online probably

00:04:14,640 --> 00:04:20,070
just sees a million automated scans a

00:04:16,739 --> 00:04:21,419
lot of attacks these are the people who

00:04:20,070 --> 00:04:22,830
are trolling the internet for low

00:04:21,419 --> 00:04:24,830
hanging fruit something that they can

00:04:22,830 --> 00:04:28,620
get into an unpatched wordpress a

00:04:24,830 --> 00:04:30,120
whatever there you can make some

00:04:28,620 --> 00:04:32,220
generalizations they're probably pretty

00:04:30,120 --> 00:04:34,169
unlikely to use financial resources to

00:04:32,220 --> 00:04:36,970
attack you they probably don't care that

00:04:34,169 --> 00:04:39,040
but they're dangerous because they have

00:04:36,970 --> 00:04:42,460
all the time in the world they're doing

00:04:39,040 --> 00:04:45,430
it for fun they're hypothetically just

00:04:42,460 --> 00:04:48,610
in it for the lulz which is a technical

00:04:45,430 --> 00:04:50,380
security term I believe but they're in

00:04:48,610 --> 00:04:53,139
it to make a name for themselves so

00:04:50,380 --> 00:04:54,790
that's a fairly specific class of threat

00:04:53,139 --> 00:04:58,540
that you have to think about then you've

00:04:54,790 --> 00:05:00,280
got organized criminals these people are

00:04:58,540 --> 00:05:03,250
usually specifically out for some kind

00:05:00,280 --> 00:05:05,110
of financial gain they're skilled they

00:05:03,250 --> 00:05:07,030
may have financial resources that they

00:05:05,110 --> 00:05:10,090
will expend on attacking you if they are

00:05:07,030 --> 00:05:12,280
organized and their motivations are

00:05:10,090 --> 00:05:15,610
usually financial as well so they could

00:05:12,280 --> 00:05:17,020
be after extortion they could be after

00:05:15,610 --> 00:05:18,880
credit card numbers if you're an

00:05:17,020 --> 00:05:21,750
e-commerce site of any description they

00:05:18,880 --> 00:05:25,630
could be after a database leaked for

00:05:21,750 --> 00:05:28,510
using your account information to get

00:05:25,630 --> 00:05:32,130
into other systems they could just be in

00:05:28,510 --> 00:05:32,130
it to Doss your site for blackmail

00:05:32,280 --> 00:05:40,240
disgruntled former employees I want to

00:05:38,110 --> 00:05:43,180
emphasize that this can happen even if

00:05:40,240 --> 00:05:45,490
you are a lovely place to work so

00:05:43,180 --> 00:05:47,560
disgruntled former employees their

00:05:45,490 --> 00:05:52,450
motivation is well they're disgruntled

00:05:47,560 --> 00:05:53,770
it's right there the thing but they have

00:05:52,450 --> 00:05:56,080
an intimate knowledge of the system that

00:05:53,770 --> 00:05:58,660
you built they may well still have

00:05:56,080 --> 00:06:01,330
credentials they may stay may well have

00:05:58,660 --> 00:06:05,229
left themselves a back door so this is a

00:06:01,330 --> 00:06:07,660
really dangerous threat and you have to

00:06:05,229 --> 00:06:09,550
at least consider what is the worst

00:06:07,660 --> 00:06:11,320
thing that can happen you've got

00:06:09,550 --> 00:06:13,389
hacktivists they might be after making a

00:06:11,320 --> 00:06:17,410
political point and you might have

00:06:13,389 --> 00:06:18,940
nation state actors they have infinite

00:06:17,410 --> 00:06:21,729
resources they've been in the news a lot

00:06:18,940 --> 00:06:24,280
lately and they probably don't have any

00:06:21,729 --> 00:06:28,660
motivation but it really depends on your

00:06:24,280 --> 00:06:31,090
use case doesn't it you can and should

00:06:28,660 --> 00:06:33,430
formalize the process of thinking about

00:06:31,090 --> 00:06:35,289
these experimental people if you're

00:06:33,430 --> 00:06:37,930
familiar with the idea of personas in

00:06:35,289 --> 00:06:40,900
agile development where you create an

00:06:37,930 --> 00:06:42,940
imaginary user and that imaginary user

00:06:40,900 --> 00:06:45,880
might be going to your company's website

00:06:42,940 --> 00:06:47,610
to look for careers or going to your

00:06:45,880 --> 00:06:50,260
company's website too

00:06:47,610 --> 00:06:51,700
try to purchase your company's services

00:06:50,260 --> 00:06:53,050
or something like that you invent these

00:06:51,700 --> 00:06:56,440
personas you give them names and

00:06:53,050 --> 00:06:59,620
motivations and skill levels you should

00:06:56,440 --> 00:07:01,420
do personas for bad people too it

00:06:59,620 --> 00:07:03,550
doesn't come up very often but you

00:07:01,420 --> 00:07:06,570
should have in your thought process when

00:07:03,550 --> 00:07:06,570
you're thinking about your application

00:07:06,600 --> 00:07:13,780
people who very specifically are at your

00:07:09,880 --> 00:07:15,670
website to do harm so a few for the last

00:07:13,780 --> 00:07:17,260
few years I've been building a web

00:07:15,670 --> 00:07:18,930
application for teachers on behalf of

00:07:17,260 --> 00:07:21,310
the New Zealand Ministry of Education

00:07:18,930 --> 00:07:23,110
the attitudes towards the tool that I

00:07:21,310 --> 00:07:25,480
was building were quite polarized the

00:07:23,110 --> 00:07:30,450
relationship between the teachers in New

00:07:25,480 --> 00:07:32,770
Zealand and the Ministry is fraught

00:07:30,450 --> 00:07:34,270
there could be political reasons why

00:07:32,770 --> 00:07:35,940
someone might want to attack the system

00:07:34,270 --> 00:07:37,630
it's a govorit was a government

00:07:35,940 --> 00:07:40,300
application it was a government website

00:07:37,630 --> 00:07:41,800
so there's always a lot of people who

00:07:40,300 --> 00:07:44,410
were just want to embarrass the

00:07:41,800 --> 00:07:45,460
government this being a tool for

00:07:44,410 --> 00:07:46,600
teachers though probably one of the

00:07:45,460 --> 00:07:49,570
number one threats i would have to face

00:07:46,600 --> 00:07:51,730
is just the boring old threat of teacher

00:07:49,570 --> 00:07:53,890
walks out of the room student leans over

00:07:51,730 --> 00:07:55,419
and and the teachers left themselves

00:07:53,890 --> 00:07:56,640
logged into the system what what damage

00:07:55,419 --> 00:07:58,480
could have student do if they just

00:07:56,640 --> 00:08:02,919
commandeer the credentials for five

00:07:58,480 --> 00:08:04,120
minutes that's an example of the sort of

00:08:02,919 --> 00:08:05,830
persona that I needed to think about

00:08:04,120 --> 00:08:07,330
while I was constructing this but for

00:08:05,830 --> 00:08:11,910
each of your applications you'll have

00:08:07,330 --> 00:08:17,440
something similar so beyond the people

00:08:11,910 --> 00:08:19,780
you want to think about the scope of the

00:08:17,440 --> 00:08:21,370
attack surface of your system I'm just

00:08:19,780 --> 00:08:23,830
going to read the Wikipedia definition

00:08:21,370 --> 00:08:25,450
of attack surface verbatim here the

00:08:23,830 --> 00:08:27,910
attack surface of a software environment

00:08:25,450 --> 00:08:30,370
is the sum of the different points the

00:08:27,910 --> 00:08:33,400
attack vectors where an unauthorized

00:08:30,370 --> 00:08:35,740
user the attacker can try to enter data

00:08:33,400 --> 00:08:41,219
to or extract date or extract data from

00:08:35,740 --> 00:08:43,390
an environment the the TLDR of that is

00:08:41,219 --> 00:08:45,010
every single place where there could be

00:08:43,390 --> 00:08:47,560
an interaction that the user could

00:08:45,010 --> 00:08:49,480
affect is a part of the attack service

00:08:47,560 --> 00:08:51,460
and you have to think about all of those

00:08:49,480 --> 00:08:56,290
parts and work out what damage could be

00:08:51,460 --> 00:08:58,750
done at any one of those spots what I am

00:08:56,290 --> 00:08:59,459
going to do is go through a bit of a

00:08:58,750 --> 00:09:04,290
tour

00:08:59,459 --> 00:09:07,170
through a typical web stack and think

00:09:04,290 --> 00:09:09,360
about the consequences of a hack

00:09:07,170 --> 00:09:12,540
happening there how it could happen what

00:09:09,360 --> 00:09:15,779
the consequences could be how you could

00:09:12,540 --> 00:09:18,660
have reduced that attack surface and how

00:09:15,779 --> 00:09:20,129
you end up mitigating it if it does

00:09:18,660 --> 00:09:25,379
happen things you could have done to

00:09:20,129 --> 00:09:28,829
mitigate that sort of attack like I was

00:09:25,379 --> 00:09:31,139
saying before the firewall solution

00:09:28,829 --> 00:09:33,149
simply doesn't work if you think about

00:09:31,139 --> 00:09:37,410
only protecting the outermost layer it's

00:09:33,149 --> 00:09:40,589
it's devastating because it all goes

00:09:37,410 --> 00:09:42,769
downhill from there so how might a layer

00:09:40,589 --> 00:09:52,170
of the stack get compromised and by whom

00:09:42,769 --> 00:09:53,220
consequences ya see what will I wish i

00:09:52,170 --> 00:09:55,379
had done back when I had the chance

00:09:53,220 --> 00:09:56,730
that's the key reason why you actually

00:09:55,379 --> 00:09:59,420
need to go through this thought

00:09:56,730 --> 00:10:03,329
experiment because once it has happened

00:09:59,420 --> 00:10:07,529
all that hindsight it won't make you

00:10:03,329 --> 00:10:09,899
feel any better let's talk about the web

00:10:07,529 --> 00:10:12,389
server for a second so your web server

00:10:09,899 --> 00:10:14,519
is probably some combination of Apache

00:10:12,389 --> 00:10:16,019
or engine X both have very large

00:10:14,519 --> 00:10:19,319
communities behind them both are mature

00:10:16,019 --> 00:10:20,699
and well tested pieces of software but

00:10:19,319 --> 00:10:22,679
it's also pretty obviously the most

00:10:20,699 --> 00:10:23,910
exposed part of your infrastructure in a

00:10:22,679 --> 00:10:28,470
web application it's the thing that

00:10:23,910 --> 00:10:30,689
everything's going to hit any bugs

00:10:28,470 --> 00:10:32,399
discovered in apache or nginx will be

00:10:30,689 --> 00:10:35,519
automated and exploited quickly if

00:10:32,399 --> 00:10:39,920
someone finds a code bug in engine X and

00:10:35,519 --> 00:10:43,309
0 de or Apache preauth something happens

00:10:39,920 --> 00:10:45,360
those things will be automated by

00:10:43,309 --> 00:10:47,249
attackers very quickly and they'll just

00:10:45,360 --> 00:10:51,299
scan the internet as quickly as possible

00:10:47,249 --> 00:10:55,319
for anyone that they can take advantage

00:10:51,299 --> 00:10:56,639
of with that vulnerability both of these

00:10:55,319 --> 00:10:58,589
pieces of software are pretty mature

00:10:56,639 --> 00:11:01,199
that's actually not necessarily the

00:10:58,589 --> 00:11:03,299
biggest threat however what we have seen

00:11:01,199 --> 00:11:05,279
is things like SSL bugs heartbleed

00:11:03,299 --> 00:11:07,410
poodle stuff like that right so there's

00:11:05,279 --> 00:11:10,230
definitely scope for issues at this

00:11:07,410 --> 00:11:13,020
layer how do you minimize the attack

00:11:10,230 --> 00:11:16,740
surface of your

00:11:13,020 --> 00:11:18,990
web server itself the number one thing

00:11:16,740 --> 00:11:21,450
to do is always keep it fully up-to-date

00:11:18,990 --> 00:11:24,390
fully patched on a preferably a

00:11:21,450 --> 00:11:26,610
supported operating system disabled all

00:11:24,390 --> 00:11:29,760
of the unused modules and configuration

00:11:26,610 --> 00:11:30,810
that you might have in my experience

00:11:29,760 --> 00:11:32,160
that's a lot easier with engine X

00:11:30,810 --> 00:11:33,930
because it kind of starts with a really

00:11:32,160 --> 00:11:37,770
minimal configuration than you enable

00:11:33,930 --> 00:11:40,650
stuff but a lot of Apache a lot of

00:11:37,770 --> 00:11:42,150
distribution Apache versions tend to

00:11:40,650 --> 00:11:43,650
come with a lot of modules enabled was a

00:11:42,150 --> 00:11:44,850
lot of functionality already turned on a

00:11:43,650 --> 00:11:48,650
lot of that stuff you might not realize

00:11:44,850 --> 00:11:51,060
is on you might not even need it and

00:11:48,650 --> 00:11:53,640
this piece of advice is really just if

00:11:51,060 --> 00:11:58,290
you're not if you're not a crypto nerd

00:11:53,640 --> 00:12:00,810
or a highly experienced sysadmin find

00:11:58,290 --> 00:12:02,130
someone else to tell you what your SSL

00:12:00,810 --> 00:12:04,710
configuration should look like don't

00:12:02,130 --> 00:12:10,440
actually rely on you know this there's a

00:12:04,710 --> 00:12:12,900
million options of ciphers and hashing

00:12:10,440 --> 00:12:15,000
algorithms and versions that you can use

00:12:12,900 --> 00:12:17,400
and there are tools like this Mozilla

00:12:15,000 --> 00:12:20,040
one which give you a pretty decent

00:12:17,400 --> 00:12:23,010
default configuration you go to that

00:12:20,040 --> 00:12:26,100
website and it'll say do you need to

00:12:23,010 --> 00:12:27,180
support ie6 in which case you have to

00:12:26,100 --> 00:12:29,040
leave some stuff enabled that you'd

00:12:27,180 --> 00:12:30,840
rather have disabled do you are you

00:12:29,040 --> 00:12:33,360
writing your configuration for engine X

00:12:30,840 --> 00:12:34,680
or Apache or Apache version 2.2 or 2.4

00:12:33,360 --> 00:12:36,420
it'll give you a snippet of

00:12:34,680 --> 00:12:39,180
configuration that's a reasonable

00:12:36,420 --> 00:12:41,250
default some segments that I work with

00:12:39,180 --> 00:12:44,160
lock it down a little further than that

00:12:41,250 --> 00:12:45,690
they have their reasons but in the

00:12:44,160 --> 00:12:48,450
absence of other information that's a

00:12:45,690 --> 00:12:50,220
pretty good place to start how would you

00:12:48,450 --> 00:12:51,780
mitigate a web server breach if it

00:12:50,220 --> 00:12:57,450
happened let's say a zero-day actually

00:12:51,780 --> 00:12:59,490
happens someone got in they now have

00:12:57,450 --> 00:13:02,040
because it's probably a C application

00:12:59,490 --> 00:13:05,490
they probably have code execution on

00:13:02,040 --> 00:13:08,640
your web server that's scary thought but

00:13:05,490 --> 00:13:11,280
if your application server is not

00:13:08,640 --> 00:13:12,810
running on your web server then that

00:13:11,280 --> 00:13:14,430
hasn't gotten them as far as it might

00:13:12,810 --> 00:13:16,920
otherwise have who came to my talk

00:13:14,430 --> 00:13:18,900
yesterday on Jango deployment so this is

00:13:16,920 --> 00:13:21,780
one of the main reasons why I am now a

00:13:18,900 --> 00:13:23,310
very firm believer in keeping your

00:13:21,780 --> 00:13:25,160
application server on a completely

00:13:23,310 --> 00:13:27,379
different vm or container

00:13:25,160 --> 00:13:30,740
or some fully different level of

00:13:27,379 --> 00:13:32,930
segregation the next step that you

00:13:30,740 --> 00:13:35,060
always want to think about is there are

00:13:32,930 --> 00:13:37,879
techniques for operating system level

00:13:35,060 --> 00:13:41,420
lockdown I'm a big fan of that barmer

00:13:37,879 --> 00:13:45,620
who knows that a farmer is a parmer is a

00:13:41,420 --> 00:13:48,500
I think still a bun to only know Debian

00:13:45,620 --> 00:13:53,899
has it Rob can you tell me debian app

00:13:48,500 --> 00:13:56,779
armor okay app armor is a declarative

00:13:53,899 --> 00:13:58,459
language that you can that applies a lot

00:13:56,779 --> 00:14:01,250
of operating system level checks in

00:13:58,459 --> 00:14:04,610
place you can say the Apache process is

00:14:01,250 --> 00:14:08,629
not allowed to run bash right the Apache

00:14:04,610 --> 00:14:11,000
process is not allowed to access make

00:14:08,629 --> 00:14:12,649
external connections the Apache process

00:14:11,000 --> 00:14:14,449
or any process that you want you can set

00:14:12,649 --> 00:14:17,170
up a profile saying it's not allowed to

00:14:14,449 --> 00:14:20,029
do this stuff if someone's already got

00:14:17,170 --> 00:14:21,889
code execution on the Apache server that

00:14:20,029 --> 00:14:22,910
will very quickly limit what they can do

00:14:21,889 --> 00:14:24,439
from there because the first thing

00:14:22,910 --> 00:14:26,000
they'll want to do is get shell

00:14:24,439 --> 00:14:27,139
execution then they have full access to

00:14:26,000 --> 00:14:29,660
your operating system can do whatever

00:14:27,139 --> 00:14:32,540
they want if you can be alerted to that

00:14:29,660 --> 00:14:35,120
by an appt armor rule saying hey Apache

00:14:32,540 --> 00:14:36,920
doesn't usually try to run bash we

00:14:35,120 --> 00:14:38,750
should email someone about that then

00:14:36,920 --> 00:14:44,269
you'll find out before they manage to do

00:14:38,750 --> 00:14:45,589
damage as long as they couldn't get

00:14:44,269 --> 00:14:49,699
immediate leader application server

00:14:45,589 --> 00:14:55,360
you'll also want strict firewalling from

00:14:49,699 --> 00:14:59,660
that server it surprises me how often

00:14:55,360 --> 00:15:02,209
outgoing firewalls remain disabled but

00:14:59,660 --> 00:15:04,519
your web server does not need to talk to

00:15:02,209 --> 00:15:05,839
the Internet your web server needs to

00:15:04,519 --> 00:15:07,550
receive connections from the internet

00:15:05,839 --> 00:15:10,309
your web server needs to be able to make

00:15:07,550 --> 00:15:15,589
outgoing connections to your application

00:15:10,309 --> 00:15:19,069
server you're logging server and the

00:15:15,589 --> 00:15:21,920
security updates and nothing else why

00:15:19,069 --> 00:15:23,000
would you let it go anywhere else you

00:15:21,920 --> 00:15:25,750
certainly don't want it to be able to

00:15:23,000 --> 00:15:25,750
ssh anywhere

00:15:28,370 --> 00:15:33,480
so let's talk about your application

00:15:30,390 --> 00:15:34,740
server for a second application servers

00:15:33,480 --> 00:15:39,300
are usually written in a high-level

00:15:34,740 --> 00:15:40,500
programming language like Python and so

00:15:39,300 --> 00:15:42,990
at least generally you don't have to

00:15:40,500 --> 00:15:46,260
worry about buffer overrun or C style

00:15:42,990 --> 00:15:48,390
attacks hopefully but the attacker could

00:15:46,260 --> 00:15:50,310
achieve arbitrary code execution through

00:15:48,390 --> 00:15:52,380
your application server still depending

00:15:50,310 --> 00:15:54,230
on what you've done in your code a

00:15:52,380 --> 00:15:56,280
common way that they might do this is

00:15:54,230 --> 00:15:57,990
compromising any system commands your

00:15:56,280 --> 00:16:01,440
application server runs so for example

00:15:57,990 --> 00:16:03,540
if you are doing image manipulation in

00:16:01,440 --> 00:16:05,430
your app server running Python maybe

00:16:03,540 --> 00:16:08,010
you're shelling out too imagemagick

00:16:05,430 --> 00:16:11,340
you're using some sort of external tool

00:16:08,010 --> 00:16:13,200
for that that's often a mechanism where

00:16:11,340 --> 00:16:16,350
if you don't very carefully control the

00:16:13,200 --> 00:16:20,700
execution if you've uploaded a file and

00:16:16,350 --> 00:16:23,370
the attacker can control the file name

00:16:20,700 --> 00:16:26,340
and then the file name is passed to the

00:16:23,370 --> 00:16:28,110
shell execution that could actually

00:16:26,340 --> 00:16:31,470
result in them being able to inject

00:16:28,110 --> 00:16:35,250
commands into the shell so it is

00:16:31,470 --> 00:16:37,260
possible for a reasonably simple mistake

00:16:35,250 --> 00:16:41,160
in your application server code to lead

00:16:37,260 --> 00:16:42,480
to shell execution the more likely

00:16:41,160 --> 00:16:44,700
attack against your application server

00:16:42,480 --> 00:16:48,930
code probably involves compromise login

00:16:44,700 --> 00:16:50,550
credentials so someone being able to do

00:16:48,930 --> 00:16:51,960
a session attack or a session fixation

00:16:50,550 --> 00:16:52,980
attack or somehow getting ahold of

00:16:51,960 --> 00:16:56,850
credentials through man-in-the-middle

00:16:52,980 --> 00:16:58,980
attack in order to get the user get

00:16:56,850 --> 00:17:01,890
account credentials for someone who

00:16:58,980 --> 00:17:04,199
ought not have it or more scary an admin

00:17:01,890 --> 00:17:05,250
if they can get admin credentials then

00:17:04,199 --> 00:17:07,350
you've got a real problem right

00:17:05,250 --> 00:17:09,300
especially like I do a lot of work in

00:17:07,350 --> 00:17:14,310
Django what can't you do if you have a

00:17:09,300 --> 00:17:16,490
Django admin account they could also use

00:17:14,310 --> 00:17:18,480
the application server to inject

00:17:16,490 --> 00:17:21,060
cross-site scripting attacks but we'll

00:17:18,480 --> 00:17:22,709
be talking about that a little later so

00:17:21,060 --> 00:17:24,120
how would you mitigate a code execution

00:17:22,709 --> 00:17:28,380
attack if it was launched against your

00:17:24,120 --> 00:17:33,690
application server the same apparmor

00:17:28,380 --> 00:17:35,730
rule applies you also want to make sure

00:17:33,690 --> 00:17:37,890
that your application server in general

00:17:35,730 --> 00:17:40,410
can't do any more than it needs to do if

00:17:37,890 --> 00:17:41,740
you don't actually have to do file

00:17:40,410 --> 00:17:43,240
manipulation

00:17:41,740 --> 00:17:45,840
if you aren't uploading if you aren't

00:17:43,240 --> 00:17:48,070
receiving files in your web app then

00:17:45,840 --> 00:17:50,080
ideally your application server wouldn't

00:17:48,070 --> 00:17:52,809
even have write access to any files on

00:17:50,080 --> 00:17:55,179
your entire operating system a django

00:17:52,809 --> 00:17:57,520
app if it's been set up properly can run

00:17:55,179 --> 00:17:59,080
as a user with no privileges it only

00:17:57,520 --> 00:18:01,960
needs to be able to receive connections

00:17:59,080 --> 00:18:03,400
from the web server and make connections

00:18:01,960 --> 00:18:06,250
to the database server make connections

00:18:03,400 --> 00:18:08,830
to your case server make outgoing

00:18:06,250 --> 00:18:10,020
connections to your logging server it

00:18:08,830 --> 00:18:15,790
doesn't need to touch the file system

00:18:10,020 --> 00:18:17,980
that can help a lot again whitelist

00:18:15,790 --> 00:18:20,290
egress firewalling is critical because

00:18:17,980 --> 00:18:25,360
you need to see if something else is

00:18:20,290 --> 00:18:27,010
going on going out there and yeah I'm a

00:18:25,360 --> 00:18:29,260
big fan of that barmer at least once the

00:18:27,010 --> 00:18:32,610
app arm is the last line of defense if

00:18:29,260 --> 00:18:34,600
they've already gotten into something

00:18:32,610 --> 00:18:36,190
mitigating a credential theft attack

00:18:34,600 --> 00:18:38,500
it's a little harder if they've already

00:18:36,190 --> 00:18:40,000
got the credentials IP address

00:18:38,500 --> 00:18:41,500
restriction on admin accounts is one

00:18:40,000 --> 00:18:42,970
option that you could have done

00:18:41,500 --> 00:18:43,900
beforehand that meant if they got the

00:18:42,970 --> 00:18:46,240
credentials they couldn't do anything

00:18:43,900 --> 00:18:50,980
two-factor authentication in general is

00:18:46,240 --> 00:18:53,500
a wonderful thing it's probably critical

00:18:50,980 --> 00:18:56,679
protection if you have a lot of

00:18:53,500 --> 00:18:58,150
information available from an admin

00:18:56,679 --> 00:19:00,910
credential and you if you actually need

00:18:58,150 --> 00:19:02,860
that to be accessible from off site or

00:19:00,910 --> 00:19:05,280
off or from any IP address then you

00:19:02,860 --> 00:19:07,330
really want to think of some other layer

00:19:05,280 --> 00:19:09,690
so the consequences of an application

00:19:07,330 --> 00:19:11,800
server breach are pretty scary because

00:19:09,690 --> 00:19:12,970
that you have to assume that the data

00:19:11,800 --> 00:19:14,559
store has been compromised the

00:19:12,970 --> 00:19:17,470
application server usually has full

00:19:14,559 --> 00:19:18,940
access to the database customer

00:19:17,470 --> 00:19:21,520
information may also have been lost or

00:19:18,940 --> 00:19:22,750
tampered with and incident response and

00:19:21,520 --> 00:19:24,910
forensics will become critical you'll

00:19:22,750 --> 00:19:26,440
really need to be able to have some way

00:19:24,910 --> 00:19:30,160
of retracing the timeline of what

00:19:26,440 --> 00:19:33,250
happened so let's thinking of the

00:19:30,160 --> 00:19:34,450
database as you get deeper it starts to

00:19:33,250 --> 00:19:38,020
get a little bit scary you kind of hope

00:19:34,450 --> 00:19:39,490
they wouldn't get this far but how would

00:19:38,020 --> 00:19:42,100
attackers get as far as your database

00:19:39,490 --> 00:19:46,740
server how can they do it without even

00:19:42,100 --> 00:19:46,740
having to compromise any application

00:19:48,450 --> 00:19:52,570
either that or they came in from

00:19:50,590 --> 00:19:57,760
somewhere else in your office that one's

00:19:52,570 --> 00:19:59,200
pretty easy sequel injection okay sequel

00:19:57,760 --> 00:20:01,300
injection means that your app out your

00:19:59,200 --> 00:20:02,410
application server isn't doing what it

00:20:01,300 --> 00:20:05,560
ought to have done it should have

00:20:02,410 --> 00:20:07,240
protected against this but this bypasses

00:20:05,560 --> 00:20:09,400
the application server entirely and

00:20:07,240 --> 00:20:14,470
gives someone full command access to the

00:20:09,400 --> 00:20:16,570
database server this is the number one

00:20:14,470 --> 00:20:20,380
threat in the OWASP top 10 it still is

00:20:16,570 --> 00:20:23,110
it has been for years but there's other

00:20:20,380 --> 00:20:27,130
less obvious but certainly devastating

00:20:23,110 --> 00:20:28,480
attacks to your database server as we

00:20:27,130 --> 00:20:29,410
mentioned it could have been lateral

00:20:28,480 --> 00:20:31,900
movement through one of the other

00:20:29,410 --> 00:20:33,310
servers if you had the ability to ssh

00:20:31,900 --> 00:20:34,480
from the application server to the

00:20:33,310 --> 00:20:36,850
database server me that just goes

00:20:34,480 --> 00:20:38,200
straight in assuming they had gotten

00:20:36,850 --> 00:20:42,160
into the application server or the web

00:20:38,200 --> 00:20:43,450
server but actually database backups

00:20:42,160 --> 00:20:45,700
could be compromised where your database

00:20:43,450 --> 00:20:47,800
backups go do they just go to s3 do they

00:20:45,700 --> 00:20:49,990
go somewhere else are they sitting on a

00:20:47,800 --> 00:20:52,600
development or staging server do you use

00:20:49,990 --> 00:20:54,180
your production data in your pre prod

00:20:52,600 --> 00:20:57,040
servers or during your tests because

00:20:54,180 --> 00:20:58,330
those might be in your internal network

00:20:57,040 --> 00:21:00,280
but they're usually a little bit less

00:20:58,330 --> 00:21:02,130
protected and you might have database

00:21:00,280 --> 00:21:11,200
dumps sitting in your home directory I

00:21:02,130 --> 00:21:13,240
do if they've gotten as far as command

00:21:11,200 --> 00:21:14,560
execution into the database you've got a

00:21:13,240 --> 00:21:18,670
real problem you've lost the database

00:21:14,560 --> 00:21:20,710
again you can reduce the privileges of

00:21:18,670 --> 00:21:22,330
the account used by the application

00:21:20,710 --> 00:21:24,490
server to reduce the amount of damage

00:21:22,330 --> 00:21:27,000
they might be able to do Django expects

00:21:24,490 --> 00:21:29,080
the ability to create tables though

00:21:27,000 --> 00:21:30,430
which means that it usually has the

00:21:29,080 --> 00:21:32,190
ability to drop tables hopefully doesn't

00:21:30,430 --> 00:21:35,160
have the ability to create databases and

00:21:32,190 --> 00:21:39,040
hopefully you haven't let it use an

00:21:35,160 --> 00:21:40,570
admin level account to talk to the

00:21:39,040 --> 00:21:42,940
database server so for example if you're

00:21:40,570 --> 00:21:48,700
using MySQL and Django is talking to

00:21:42,940 --> 00:21:51,190
MySQL as root then the root user in

00:21:48,700 --> 00:21:53,230
MySQL it's a very quick jump from there

00:21:51,190 --> 00:21:55,240
to shell access the root user can do all

00:21:53,230 --> 00:21:57,490
kinds of things like run SQL statements

00:21:55,240 --> 00:21:59,020
that will spawn shell accounts post the

00:21:57,490 --> 00:21:59,960
postgres user in Postgres can do the

00:21:59,020 --> 00:22:03,050
same thing

00:21:59,960 --> 00:22:06,680
postgres user can the admin user in

00:22:03,050 --> 00:22:07,850
Postgres can enable untrusted languages

00:22:06,680 --> 00:22:09,910
like Python and then you can just run

00:22:07,850 --> 00:22:13,700
Python code on the database server as

00:22:09,910 --> 00:22:15,170
postgres and that's always bad the

00:22:13,700 --> 00:22:17,780
number one way of minimizing this attack

00:22:15,170 --> 00:22:19,580
surface though is never ever allow code

00:22:17,780 --> 00:22:20,990
even with the potential for SQL

00:22:19,580 --> 00:22:23,840
injection into the application server

00:22:20,990 --> 00:22:26,420
you have no excuse anymore every frame

00:22:23,840 --> 00:22:29,270
work that you do any development in in

00:22:26,420 --> 00:22:32,950
the modern world allows you to make

00:22:29,270 --> 00:22:35,270
parameterised queries or query binding

00:22:32,950 --> 00:22:37,610
SQL injection is infuriating because

00:22:35,270 --> 00:22:40,340
it's it's the closest of all these

00:22:37,610 --> 00:22:41,990
problems to completely solvable you can

00:22:40,340 --> 00:22:44,510
absolutely protect your application from

00:22:41,990 --> 00:22:46,670
SQL injection I'm not actually going to

00:22:44,510 --> 00:22:49,220
go into detail on SQL injection today

00:22:46,670 --> 00:22:50,390
but if you don't know about it then talk

00:22:49,220 --> 00:22:52,880
to someone who does talk to me

00:22:50,390 --> 00:22:57,440
afterwards I'm happy to explain it it's

00:22:52,880 --> 00:22:59,150
a very valuable thing to learn and find

00:22:57,440 --> 00:23:03,440
a way to not use production data or

00:22:59,150 --> 00:23:07,220
production databases on your debt

00:23:03,440 --> 00:23:08,480
servers if you treat your dev servers a

00:23:07,220 --> 00:23:09,680
little bit more casually which you might

00:23:08,480 --> 00:23:10,850
be able to do what you might do because

00:23:09,680 --> 00:23:13,250
you're running them on vagrant on your

00:23:10,850 --> 00:23:15,350
laptop or something I really hope you're

00:23:13,250 --> 00:23:18,590
not using real live data on that same

00:23:15,350 --> 00:23:24,860
circumstance always know exactly where

00:23:18,590 --> 00:23:26,510
all your database dump files are the

00:23:24,860 --> 00:23:27,890
data has been breached unless you have

00:23:26,510 --> 00:23:29,030
some kind of sharding architecture you

00:23:27,890 --> 00:23:30,110
probably have to assume that all of your

00:23:29,030 --> 00:23:31,160
data could have been accessed I don't

00:23:30,110 --> 00:23:36,890
know if a sharding architecture would

00:23:31,160 --> 00:23:40,970
even save you from that and yeah it

00:23:36,890 --> 00:23:42,890
probably means shell access or worse to

00:23:40,970 --> 00:23:46,400
the database to the machines running the

00:23:42,890 --> 00:23:47,540
database server okay so let's change

00:23:46,400 --> 00:23:51,800
tack a little bit and let's talk about

00:23:47,540 --> 00:23:53,270
the web browser layer so who has a

00:23:51,800 --> 00:23:54,560
passing familiarity with cross-site

00:23:53,270 --> 00:23:56,440
scripting attacks and what they

00:23:54,560 --> 00:23:58,880
basically mean okay that's really handy

00:23:56,440 --> 00:24:01,730
the canonical example for a cross-site

00:23:58,880 --> 00:24:03,860
scripting attack is someone adds

00:24:01,730 --> 00:24:05,540
javascript to a comment field and then

00:24:03,860 --> 00:24:07,010
that post that comment to your site and

00:24:05,540 --> 00:24:09,220
then when a web browser goes to that

00:24:07,010 --> 00:24:12,650
site it actually runs that JavaScript

00:24:09,220 --> 00:24:13,490
this can be used to launch attacks on

00:24:12,650 --> 00:24:15,350
other people who go to you

00:24:13,490 --> 00:24:18,380
site but the more insidious kind of

00:24:15,350 --> 00:24:20,750
attack is your admin who's logged in as

00:24:18,380 --> 00:24:22,130
admin goes to the site to go Oh people

00:24:20,750 --> 00:24:24,679
are saying this page is misbehaving and

00:24:22,130 --> 00:24:26,960
it's got a cross-site scripting attack

00:24:24,679 --> 00:24:28,550
in there that then execute as the admin

00:24:26,960 --> 00:24:30,350
who's logged in as admin on the site and

00:24:28,550 --> 00:24:33,290
then if you're in Django you just

00:24:30,350 --> 00:24:35,000
quickly send a request to have a new

00:24:33,290 --> 00:24:37,040
admin account created with credentials

00:24:35,000 --> 00:24:40,460
of your choosing and then bad things

00:24:37,040 --> 00:24:42,950
happen so what are the consequences it

00:24:40,460 --> 00:24:44,660
could be website defacement it could be

00:24:42,950 --> 00:24:46,100
used to attack users of your site

00:24:44,660 --> 00:24:47,780
compromising their accounts like I was

00:24:46,100 --> 00:24:52,750
just saying you could attack the admins

00:24:47,780 --> 00:24:54,950
of the site it's it's a rough problem

00:24:52,750 --> 00:24:57,350
how do you minimize the attack surface

00:24:54,950 --> 00:24:59,720
this is unlike injection this one's

00:24:57,350 --> 00:25:02,150
solve a bull but there's no one solution

00:24:59,720 --> 00:25:03,980
to cross-site scripting the most

00:25:02,150 --> 00:25:06,500
important thing you can do is do

00:25:03,980 --> 00:25:10,429
whitelist input validation on all user

00:25:06,500 --> 00:25:11,690
generated input and I want you to read

00:25:10,429 --> 00:25:13,250
that line again because that's actually

00:25:11,690 --> 00:25:14,960
pretty much the golden rule of all web

00:25:13,250 --> 00:25:16,340
security and maybe all security in

00:25:14,960 --> 00:25:18,740
general like if you take nothing else

00:25:16,340 --> 00:25:22,070
from this talk if you take that if you

00:25:18,740 --> 00:25:23,510
say the user is sent me some data let's

00:25:22,070 --> 00:25:26,270
make sure that it only conforms to the

00:25:23,510 --> 00:25:30,440
things that I'm expecting that's about

00:25:26,270 --> 00:25:31,790
as well protected as yeah that's the

00:25:30,440 --> 00:25:34,730
golden rule if you start there

00:25:31,790 --> 00:25:36,440
everything else is gravy on top you need

00:25:34,730 --> 00:25:40,730
to escape old data appropriately for the

00:25:36,440 --> 00:25:42,320
display so that's the protection on the

00:25:40,730 --> 00:25:44,750
way out of the database back onto the

00:25:42,320 --> 00:25:46,220
site to make sure that that script tag

00:25:44,750 --> 00:25:47,360
that someone embedded in a comment is

00:25:46,220 --> 00:25:50,890
escaped so it can't actually be

00:25:47,360 --> 00:25:56,420
interpreted as JavaScript on onside

00:25:50,890 --> 00:25:59,570
sorry yeah who's familiar with content

00:25:56,420 --> 00:26:02,360
security policy excellent not enough

00:25:59,570 --> 00:26:05,320
people this is one of the coolest tricks

00:26:02,360 --> 00:26:07,850
in modern web browser security

00:26:05,320 --> 00:26:10,910
cross-site yeah sorry content security

00:26:07,850 --> 00:26:13,370
policy is an HTTP response header and it

00:26:10,910 --> 00:26:15,980
lets the browser know where it is

00:26:13,370 --> 00:26:18,800
allowed to load JavaScript from and the

00:26:15,980 --> 00:26:22,400
one of the first key default settings of

00:26:18,800 --> 00:26:24,169
content security policy is by default it

00:26:22,400 --> 00:26:26,870
will not allow javascript to be run

00:26:24,169 --> 00:26:29,960
inside the HTML so if you have

00:26:26,870 --> 00:26:31,550
HTML and you have a script tag in it and

00:26:29,960 --> 00:26:34,610
that script tag has some JavaScript in

00:26:31,550 --> 00:26:37,850
it it won't run on that browser so there

00:26:34,610 --> 00:26:39,820
is no way for anyone to inject a

00:26:37,850 --> 00:26:42,920
cross-site scripting attack in there you

00:26:39,820 --> 00:26:44,540
whitelist content security policy black

00:26:42,920 --> 00:26:46,430
lists everything and then you whitelist

00:26:44,540 --> 00:26:48,230
that you want it to be allowed to

00:26:46,430 --> 00:26:50,780
download JavaScript files from the

00:26:48,230 --> 00:26:52,370
originating server or maybe from the CDN

00:26:50,780 --> 00:26:54,770
where you're getting jQuery from and

00:26:52,370 --> 00:26:57,890
then nowhere else and then it won't

00:26:54,770 --> 00:26:59,900
allow you to run JavaScript that was

00:26:57,890 --> 00:27:02,660
injected into the page or from any other

00:26:59,900 --> 00:27:08,600
third party and it's the same sort of

00:27:02,660 --> 00:27:10,250
thing for fonts and images and basically

00:27:08,600 --> 00:27:14,600
any other kind of object that might be

00:27:10,250 --> 00:27:17,270
loadable into your page so this is an

00:27:14,600 --> 00:27:19,370
incredibly powerful tool that really

00:27:17,270 --> 00:27:23,750
does shield people from cross-site

00:27:19,370 --> 00:27:26,000
scripting it's hard to set up because if

00:27:23,750 --> 00:27:29,000
you have a legacy project that already

00:27:26,000 --> 00:27:31,490
relies on a lot of javascript in your in

00:27:29,000 --> 00:27:32,900
your HTML itself you have script tags in

00:27:31,490 --> 00:27:35,690
there and that's just a part of how your

00:27:32,900 --> 00:27:37,940
HTML has been written then either you

00:27:35,690 --> 00:27:39,590
have to allow that rule which means that

00:27:37,940 --> 00:27:41,000
you lose one of the key protections or

00:27:39,590 --> 00:27:43,400
you have to spend a lot of time doing

00:27:41,000 --> 00:27:44,630
refactoring but if you have any green

00:27:43,400 --> 00:27:46,610
fields project that you're starting

00:27:44,630 --> 00:27:48,410
start with cross-site scripting fully

00:27:46,610 --> 00:27:51,470
fully on and only whitelist what you

00:27:48,410 --> 00:27:53,150
need you will be far better off the bad

00:27:51,470 --> 00:27:55,400
news is that it's only a mitigation not

00:27:53,150 --> 00:27:57,260
a cure content security policy only

00:27:55,400 --> 00:27:59,570
protects people using recent browsers if

00:27:57,260 --> 00:28:01,040
you're running Chrome and Firefox you're

00:27:59,570 --> 00:28:03,980
in great shape if you're running

00:28:01,040 --> 00:28:06,200
internet explorer or 10 or 11 I think

00:28:03,980 --> 00:28:07,760
it's still considered experimental and

00:28:06,200 --> 00:28:09,320
you have to use a header with a

00:28:07,760 --> 00:28:10,580
different name it's like x content

00:28:09,320 --> 00:28:14,780
security policy instead of content

00:28:10,580 --> 00:28:15,980
security policy so it's not a security

00:28:14,780 --> 00:28:17,690
solution on its own but it's an

00:28:15,980 --> 00:28:20,300
excellent layer of defense in depth and

00:28:17,690 --> 00:28:21,710
it has one other incredibly handy bonus

00:28:20,300 --> 00:28:23,900
feature which you definitely want to

00:28:21,710 --> 00:28:26,030
know about which is content security

00:28:23,900 --> 00:28:27,350
policy violation reports of the people

00:28:26,030 --> 00:28:31,160
who had their hands up before who's ever

00:28:27,350 --> 00:28:34,220
used this this is so cool so content

00:28:31,160 --> 00:28:36,260
security policy normally silently blocks

00:28:34,220 --> 00:28:39,950
execution or loading of any Content that

00:28:36,260 --> 00:28:40,669
violates the policy but this includes an

00:28:39,950 --> 00:28:43,309
option we

00:28:40,669 --> 00:28:44,840
which will force the browser to send a

00:28:43,309 --> 00:28:48,340
violation report as a little bit of

00:28:44,840 --> 00:28:50,600
Jason to an end point of your choosing

00:28:48,340 --> 00:28:52,999
suddenly your customers web browsers

00:28:50,600 --> 00:28:55,129
become your allies if someone actually

00:28:52,999 --> 00:28:59,059
injected a cross-site scripting attack

00:28:55,129 --> 00:29:00,710
into your application you'll have an

00:28:59,059 --> 00:29:03,559
early warning system because as soon as

00:29:00,710 --> 00:29:05,899
one of your customers or viewers with a

00:29:03,559 --> 00:29:13,129
modern browsers and sees that you'll get

00:29:05,899 --> 00:29:14,570
an alert on your website so we're what

00:29:13,129 --> 00:29:16,249
we're doing here is we're just throwing

00:29:14,570 --> 00:29:17,659
out ideas of what's the worst thing

00:29:16,249 --> 00:29:19,759
could that could happen and how could we

00:29:17,659 --> 00:29:22,519
make sure that it couldn't have gotten

00:29:19,759 --> 00:29:24,109
as bad as yeah let's talk about

00:29:22,519 --> 00:29:24,619
something a little scarier what if

00:29:24,109 --> 00:29:27,549
someone got your

00:29:24,619 --> 00:29:27,549
infrastructure-as-a-service keys

00:29:32,820 --> 00:29:43,620
how could this possibly happen that's a

00:29:39,250 --> 00:29:46,900
pretty dangerous one yep thank you

00:29:43,620 --> 00:29:49,210
people okay accidentally committing AWS

00:29:46,900 --> 00:29:50,740
keys to a github repository I'm not

00:29:49,210 --> 00:29:53,200
going to ask anyone to put their hands

00:29:50,740 --> 00:29:57,430
up if they've done this but I happen to

00:29:53,200 --> 00:30:00,580
know that someone in the room has if

00:29:57,430 --> 00:30:03,430
they're fast enough I don't know if it's

00:30:00,580 --> 00:30:05,920
a pre-commit hook yet but um this

00:30:03,430 --> 00:30:08,080
happens all the time this is really bad

00:30:05,920 --> 00:30:09,430
news automated scanners are constantly

00:30:08,080 --> 00:30:11,590
searching public repositories that

00:30:09,430 --> 00:30:15,370
constantly searching paste bins and

00:30:11,590 --> 00:30:17,470
github and anywhere stack exchange is a

00:30:15,370 --> 00:30:18,910
great one they're all scanning those

00:30:17,470 --> 00:30:21,370
they're looking for key words like begin

00:30:18,910 --> 00:30:23,260
private key and AWS secret and any of a

00:30:21,370 --> 00:30:26,320
hundred other different key phrases and

00:30:23,260 --> 00:30:28,540
it's gotten so bad that um amazon have

00:30:26,320 --> 00:30:32,590
their own bots constantly scanning paste

00:30:28,540 --> 00:30:34,090
bins and github and and looking for keys

00:30:32,590 --> 00:30:36,640
so that they can immediately lock them

00:30:34,090 --> 00:30:40,690
down and email the owner saying hey stop

00:30:36,640 --> 00:30:43,240
it um and and so do you know for a fact

00:30:40,690 --> 00:30:45,670
that github itself is doing that yeah

00:30:43,240 --> 00:30:48,310
yeah so I've heard that Amazon does its

00:30:45,670 --> 00:30:49,870
own scanning and I've I I feel like

00:30:48,310 --> 00:30:51,220
github must be doing something but I've

00:30:49,870 --> 00:30:52,960
heard no confirmation of that and I

00:30:51,220 --> 00:30:54,970
would love to know for sure if anyone if

00:30:52,960 --> 00:30:58,240
anyone knows so what are the

00:30:54,970 --> 00:31:00,670
consequences it could be absolutely

00:30:58,240 --> 00:31:02,230
catastrophic right do you want someone

00:31:00,670 --> 00:31:03,910
to be able to delete your entire data

00:31:02,230 --> 00:31:06,190
center in one go this is this is the

00:31:03,910 --> 00:31:08,590
culmination of cloud functionality you

00:31:06,190 --> 00:31:12,730
can you can go actually I don't like

00:31:08,590 --> 00:31:14,410
this data center link it must be a

00:31:12,730 --> 00:31:15,850
gigantic relief then that most of the

00:31:14,410 --> 00:31:17,500
times that this happens actually all

00:31:15,850 --> 00:31:18,880
they do is spin up a hundred VMs on your

00:31:17,500 --> 00:31:22,210
machine and mine bitcoins until they get

00:31:18,880 --> 00:31:24,490
caught so so this is one of those cases

00:31:22,210 --> 00:31:27,090
where it's like the worst possible thing

00:31:24,490 --> 00:31:29,650
that you could ever allow to happen and

00:31:27,090 --> 00:31:31,180
usually what happens this Amazon will

00:31:29,650 --> 00:31:32,440
call you the next day and go hey are you

00:31:31,180 --> 00:31:33,790
aware that your bill is jumped by five

00:31:32,440 --> 00:31:36,040
thousand dollars in the last 12 hours

00:31:33,790 --> 00:31:38,140
and also if I understand correctly

00:31:36,040 --> 00:31:39,840
Amazon will usually give you one free

00:31:38,140 --> 00:31:41,820
pass they'll like the like oh okay

00:31:39,840 --> 00:31:43,679
no but then the next time you need them

00:31:41,820 --> 00:31:46,710
that's like you you need to look after

00:31:43,679 --> 00:31:52,679
that yourself how do you minimize your

00:31:46,710 --> 00:31:54,659
attack surface sorry that's a good start

00:31:52,679 --> 00:31:56,970
but you can't do a get ignore for a

00:31:54,659 --> 00:31:58,200
great a regular expression can you you

00:31:56,970 --> 00:32:00,330
could put in a pre-commit hook but

00:31:58,200 --> 00:32:02,130
anyone anyone who's put in a pre-commit

00:32:00,330 --> 00:32:03,990
hook to look for an amazon key being

00:32:02,130 --> 00:32:05,250
committed to a git repo is already aware

00:32:03,990 --> 00:32:09,539
enough of the problem that they're not

00:32:05,250 --> 00:32:13,110
going to do it anyway you can you can

00:32:09,539 --> 00:32:14,340
reduce the exposure by creating sub sub

00:32:13,110 --> 00:32:18,360
credentials I don't know the terminology

00:32:14,340 --> 00:32:20,309
with Amazon but you can create you can

00:32:18,360 --> 00:32:23,340
create access keys that have limited

00:32:20,309 --> 00:32:25,190
privileges and you should especially if

00:32:23,340 --> 00:32:27,299
you're doing anything clever with

00:32:25,190 --> 00:32:28,679
continuous integration or something that

00:32:27,299 --> 00:32:30,059
like spins up servers run tests and

00:32:28,679 --> 00:32:31,289
spins them down again you want to make

00:32:30,059 --> 00:32:32,610
sure that whatever credential is using

00:32:31,289 --> 00:32:34,529
that sitting in some Jenkins box

00:32:32,610 --> 00:32:36,450
somewhere can only do that and can't do

00:32:34,529 --> 00:32:38,220
anything more dangerous like delete your

00:32:36,450 --> 00:32:41,159
entire s3 bucket that had all of your

00:32:38,220 --> 00:32:46,710
company backups in it how do you

00:32:41,159 --> 00:32:48,419
mitigate this if it did happen I mean

00:32:46,710 --> 00:32:52,200
this is this is some worst-case scenario

00:32:48,419 --> 00:32:53,850
stuff right but just make sure that it's

00:32:52,200 --> 00:32:55,980
not all there like if your if your

00:32:53,850 --> 00:32:58,710
business continuity relies on restoring

00:32:55,980 --> 00:33:00,990
your backups from s3 back to your ec2

00:32:58,710 --> 00:33:02,700
instance and it's all in Amazon then it

00:33:00,990 --> 00:33:05,760
all could not be in Amazon at the push

00:33:02,700 --> 00:33:07,799
of the wrong button ok so I'm almost

00:33:05,760 --> 00:33:09,390
done with this kind of morbid thought

00:33:07,799 --> 00:33:11,029
experiment right that I hope I hope what

00:33:09,390 --> 00:33:14,600
you're realizing out of this is that

00:33:11,029 --> 00:33:16,679
there's things that you can have done

00:33:14,600 --> 00:33:18,360
beforehand that would have that would

00:33:16,679 --> 00:33:20,340
have saved you and it's up to you to

00:33:18,360 --> 00:33:23,399
sort of assess which ones are worth

00:33:20,340 --> 00:33:24,630
doing for your circumstance and some of

00:33:23,399 --> 00:33:25,710
them are easy enough that you just want

00:33:24,630 --> 00:33:28,320
to do them if you starting any new

00:33:25,710 --> 00:33:29,850
project use content security policy look

00:33:28,320 --> 00:33:32,520
into it about whether it's worth doing

00:33:29,850 --> 00:33:34,440
otherwise and if you're not using Django

00:33:32,520 --> 00:33:35,880
forums to do your whitelist validation

00:33:34,440 --> 00:33:39,120
and you're running a jenga project then

00:33:35,880 --> 00:33:41,669
you've got problems as well but what

00:33:39,120 --> 00:33:44,880
other things in if the worst thing

00:33:41,669 --> 00:33:49,110
happens will you wish you had done back

00:33:44,880 --> 00:33:50,800
when you had the chance you'll wish

00:33:49,110 --> 00:33:52,600
you'd had better logging

00:33:50,800 --> 00:33:55,540
finding out you've been compromised is

00:33:52,600 --> 00:33:57,100
pretty horrible but far worse is finding

00:33:55,540 --> 00:34:00,130
out you were compromised a month ago or

00:33:57,100 --> 00:34:01,720
three months ago or six right your

00:34:00,130 --> 00:34:04,570
default logrotate how long is that

00:34:01,720 --> 00:34:06,700
keeping those apache logs around in a

00:34:04,570 --> 00:34:08,770
bun to the default one is I think weekly

00:34:06,700 --> 00:34:10,870
logs for a year all sitting in VAR log

00:34:08,770 --> 00:34:12,250
but it doesn't matter because if they've

00:34:10,870 --> 00:34:15,910
compromised that web server they've

00:34:12,250 --> 00:34:17,140
compromised your logs the most important

00:34:15,910 --> 00:34:18,370
thing that you can do after a compromise

00:34:17,140 --> 00:34:19,660
is reconstruct the timeline of what

00:34:18,370 --> 00:34:20,980
happened and if you can't trust your

00:34:19,660 --> 00:34:24,730
logs or if you don't have your logs

00:34:20,980 --> 00:34:26,350
anymore then you then you've got nothing

00:34:24,730 --> 00:34:29,950
right you just have to rebuild

00:34:26,350 --> 00:34:35,890
everything and hope that you caught

00:34:29,950 --> 00:34:37,360
whatever however they got in so one

00:34:35,890 --> 00:34:39,790
thing that I would highly recommend is

00:34:37,360 --> 00:34:41,679
that you attend the talk on the elk

00:34:39,790 --> 00:34:43,120
stack which you can't do because you're

00:34:41,679 --> 00:34:46,450
in this room and he's giving it next

00:34:43,120 --> 00:34:48,250
door but some tool that ships your logs

00:34:46,450 --> 00:34:49,600
somewhere else where they are hard to

00:34:48,250 --> 00:34:51,070
see and then you keep them for a

00:34:49,600 --> 00:34:54,780
ridiculously long time because they're

00:34:51,070 --> 00:34:57,130
just logs and they are zipa bull and and

00:34:54,780 --> 00:35:01,330
you'll wish you had tested your backups

00:34:57,130 --> 00:35:04,120
I want you all to assume that your

00:35:01,330 --> 00:35:08,200
backups have not worked since last time

00:35:04,120 --> 00:35:17,260
you tested a full restore when is the

00:35:08,200 --> 00:35:18,370
last time no I'm not even gonna ask but

00:35:17,260 --> 00:35:19,630
does that mean that you sell haven't

00:35:18,370 --> 00:35:27,790
bothered fixing and retesting in the

00:35:19,630 --> 00:35:30,420
last three months yeah possibly worth of

00:35:27,790 --> 00:35:32,830
light up light query in that direction

00:35:30,420 --> 00:35:34,150
modern cloud orchestration has had kind

00:35:32,830 --> 00:35:35,380
of a profound benefit in this case

00:35:34,150 --> 00:35:37,960
because it means that we're much more

00:35:35,380 --> 00:35:39,970
likely to actually use either our

00:35:37,960 --> 00:35:42,280
backups or if you're designing your

00:35:39,970 --> 00:35:44,410
cloud infrastructure correctly then

00:35:42,280 --> 00:35:46,030
hopefully that means that it's designed

00:35:44,410 --> 00:35:47,290
so that you can pull the plug on servers

00:35:46,030 --> 00:35:49,810
and rebuild servers and you have your

00:35:47,290 --> 00:35:51,790
data back in some way if you if you're

00:35:49,810 --> 00:35:54,220
living in that mindset then maybe it's a

00:35:51,790 --> 00:35:55,930
bit more consistent but but where does

00:35:54,220 --> 00:35:58,990
your core data live and how do you get

00:35:55,930 --> 00:36:00,250
it back in a real tragedy your backups

00:35:58,990 --> 00:36:01,790
are only as good as your last test

00:36:00,250 --> 00:36:05,900
restore don't let anyone tell you other

00:36:01,790 --> 00:36:07,190
I I feel like the word backup should

00:36:05,900 --> 00:36:08,630
never have been used it should have been

00:36:07,190 --> 00:36:09,680
like restore points or something and

00:36:08,630 --> 00:36:11,830
then all the backup software would

00:36:09,680 --> 00:36:14,450
actually have to make the point of

00:36:11,830 --> 00:36:18,530
knowing that it was restore a bowl

00:36:14,450 --> 00:36:20,780
somehow so to prevent the worst you have

00:36:18,530 --> 00:36:22,280
to actually plan for it you have to go

00:36:20,780 --> 00:36:24,310
down this thought experiment you have to

00:36:22,280 --> 00:36:26,980
be as paranoid as you can and then go

00:36:24,310 --> 00:36:31,010
actually if that happened we would just

00:36:26,980 --> 00:36:33,440
reboot the application server or think

00:36:31,010 --> 00:36:35,720
about you know how important any of

00:36:33,440 --> 00:36:39,350
these mitigation czar to you in your

00:36:35,720 --> 00:36:41,000
case I have large government websites

00:36:39,350 --> 00:36:43,250
where it's pretty critical I have a

00:36:41,000 --> 00:36:45,110
little website that just shows pictures

00:36:43,250 --> 00:36:46,580
of kittens it's a little less important

00:36:45,110 --> 00:36:49,490
right but you just have to know where

00:36:46,580 --> 00:36:52,100
you're going to put that investment of

00:36:49,490 --> 00:36:54,220
protection thank you very much for your

00:36:52,100 --> 00:36:54,220
time

00:37:02,070 --> 00:37:07,090
and what do you think of the idea of

00:37:04,450 --> 00:37:08,260
using micro services to split out that

00:37:07,090 --> 00:37:09,640
sort of I of ulnar ability you're

00:37:08,260 --> 00:37:11,530
talking about Django and don't talk to

00:37:09,640 --> 00:37:14,800
the file system and they should storing

00:37:11,530 --> 00:37:16,510
files what if it's spat out to a

00:37:14,800 --> 00:37:18,190
separate service that spoke the fastest

00:37:16,510 --> 00:37:19,390
is the user can never actually speak to

00:37:18,190 --> 00:37:21,820
the thing that speaks with file system

00:37:19,390 --> 00:37:23,410
ever it's good separate it's good

00:37:21,820 --> 00:37:24,880
separation but it's also a huge

00:37:23,410 --> 00:37:27,640
investment right so that's that's of

00:37:24,880 --> 00:37:30,790
course a gigantic architect possibly a

00:37:27,640 --> 00:37:34,870
gigantic architectural shift i would say

00:37:30,790 --> 00:37:37,180
i would say it's one of the benefits of

00:37:34,870 --> 00:37:40,240
using a micro services architecture

00:37:37,180 --> 00:37:42,790
perhaps but not you wouldn't want to

00:37:40,240 --> 00:37:46,810
have to re architect everything just for

00:37:42,790 --> 00:37:49,840
that benefit you need to if you were if

00:37:46,810 --> 00:37:51,400
you attended the yelp talk one of the

00:37:49,840 --> 00:37:53,110
one of the things it's just a massive

00:37:51,400 --> 00:37:56,050
investment to implement that in the

00:37:53,110 --> 00:37:57,790
first place so that possibly a good

00:37:56,050 --> 00:37:58,780
layer of protection but also it's a it's

00:37:57,790 --> 00:38:00,040
one of those things where it's like do

00:37:58,780 --> 00:38:01,270
we have enough money to throw it that

00:38:00,040 --> 00:38:05,460
sort of problem for that sort of

00:38:01,270 --> 00:38:08,020
mitigation that was a really good talk

00:38:05,460 --> 00:38:10,240
what about you talked about setting up

00:38:08,020 --> 00:38:12,640
engine X or Apache correctly and then

00:38:10,240 --> 00:38:15,750
having a separate app server what about

00:38:12,640 --> 00:38:18,250
the whiskey server or say you're running

00:38:15,750 --> 00:38:21,190
engine X and then behind that you're

00:38:18,250 --> 00:38:24,970
running twisted web to run your

00:38:21,190 --> 00:38:26,440
application is their problems there and

00:38:24,970 --> 00:38:29,680
how do you mitigate that because i'm not

00:38:26,440 --> 00:38:33,160
sure that twisted web have what they do

00:38:29,680 --> 00:38:35,050
from a security perspective if you don't

00:38:33,160 --> 00:38:36,490
know what they do then you better assume

00:38:35,050 --> 00:38:37,780
the worst and you better hope that a lot

00:38:36,490 --> 00:38:40,480
of your protection is coming from the

00:38:37,780 --> 00:38:42,340
engine X or whatever your front end is I

00:38:40,480 --> 00:38:44,200
don't know about twisted and I don't

00:38:42,340 --> 00:38:45,850
know a lot about you whiskey either I

00:38:44,200 --> 00:38:47,380
know that green unicorn and their

00:38:45,850 --> 00:38:50,710
documentation makes it very clear that

00:38:47,380 --> 00:38:53,710
they're not providing a security layer

00:38:50,710 --> 00:38:56,230
from a lot of attacks they in green

00:38:53,710 --> 00:38:57,700
unicorn they talk about slow loris

00:38:56,230 --> 00:38:59,440
attacks which is that typical thing

00:38:57,700 --> 00:39:00,640
where you might make a connection to a

00:38:59,440 --> 00:39:02,200
website and then just never bother

00:39:00,640 --> 00:39:04,540
making a request and try and saturate

00:39:02,200 --> 00:39:05,710
all the TCP connections green unicorn

00:39:04,540 --> 00:39:07,240
very specifically states in its

00:39:05,710 --> 00:39:09,730
documentation it doesn't protect you

00:39:07,240 --> 00:39:12,330
from that green unicorn relies on engine

00:39:09,730 --> 00:39:15,450
X receiving the full request and then

00:39:12,330 --> 00:39:17,040
sing it on to green unicorn when it has

00:39:15,450 --> 00:39:20,280
the request green unicorn will send the

00:39:17,040 --> 00:39:21,870
response back and and so hopefully

00:39:20,280 --> 00:39:25,220
they're being honest with you about what

00:39:21,870 --> 00:39:30,000
they do and don't do in that sense and

00:39:25,220 --> 00:39:31,290
hopefully bugs get patched quickly go

00:39:30,000 --> 00:39:32,760
with one that you didn't know as well

00:39:31,290 --> 00:39:33,900
maintained because it is an important

00:39:32,760 --> 00:39:35,880
piece of your infrastructure someone's

00:39:33,900 --> 00:39:37,820
got to be responsible for that code if

00:39:35,880 --> 00:39:40,740
you can't rely on the upstream to make a

00:39:37,820 --> 00:39:44,280
security patch then maybe you need to

00:39:40,740 --> 00:39:48,210
think about the risk of that Tom thanks

00:39:44,280 --> 00:39:49,890
that's a great talk just you touched on

00:39:48,210 --> 00:39:52,860
two-factor or just to kind of have a

00:39:49,890 --> 00:39:55,170
comment and a question yeah just for

00:39:52,860 --> 00:39:56,790
that the AWS credentials yeah like you

00:39:55,170 --> 00:39:59,070
said lock it down to whatever but

00:39:56,790 --> 00:40:01,260
obviously the admin credentials that can

00:39:59,070 --> 00:40:02,970
create those obviously needs to factor

00:40:01,260 --> 00:40:04,980
so that you know you kind of protect

00:40:02,970 --> 00:40:06,390
yourself that way but for Django

00:40:04,980 --> 00:40:09,000
specifically and since you do a lot of

00:40:06,390 --> 00:40:10,830
Django work have you used or can you

00:40:09,000 --> 00:40:14,430
recommend anything for like locking down

00:40:10,830 --> 00:40:16,920
admin do factor ish you know it's got to

00:40:14,430 --> 00:40:20,040
exist but no I haven't used a tool for

00:40:16,920 --> 00:40:21,990
that so in in in a couple of my cases i

00:40:20,040 --> 00:40:23,190
had an additional piece of middleware

00:40:21,990 --> 00:40:25,340
that I just written which was white

00:40:23,190 --> 00:40:29,370
listing on IP address for admin users

00:40:25,340 --> 00:40:42,960
and that was the second factor enough

00:40:29,370 --> 00:40:46,710
for my needs at the time sorry I'm going

00:40:42,960 --> 00:40:48,060
to assume yes but if someone could if

00:40:46,710 --> 00:40:49,830
someone who has used one of those like

00:40:48,060 --> 00:40:52,800
that sort of thing is basically an

00:40:49,830 --> 00:40:55,500
authentication a Django authentication

00:40:52,800 --> 00:40:57,240
back-end and maybe an app on on the

00:40:55,500 --> 00:40:59,640
Python package index away so I can't

00:40:57,240 --> 00:41:01,740
point you at one but I'll bet it exists

00:40:59,640 --> 00:41:03,240
because the Django infrastructure ango

00:41:01,740 --> 00:41:06,600
architecture makes it very easy to write

00:41:03,240 --> 00:41:09,420
pluggable authentication backends hi Tom

00:41:06,600 --> 00:41:12,900
hey where'd that come from thank you

00:41:09,420 --> 00:41:15,030
so um yes it would be scary to have my

00:41:12,900 --> 00:41:16,859
website hacked it would be far more

00:41:15,030 --> 00:41:19,740
scary to have it hacked six months ago

00:41:16,859 --> 00:41:21,540
you talked about having forensics there

00:41:19,740 --> 00:41:24,780
and having the logs off site so we can

00:41:21,540 --> 00:41:26,400
follow that path but what is there

00:41:24,780 --> 00:41:28,799
anything else we can do like Canaries or

00:41:26,400 --> 00:41:31,799
something like that to find that along

00:41:28,799 --> 00:41:34,230
the way or hopefully like if I was

00:41:31,799 --> 00:41:36,530
hacked when I just launched a site and

00:41:34,230 --> 00:41:39,299
someone's just mining my data forever

00:41:36,530 --> 00:41:42,150
like what can we do to prevent that sort

00:41:39,299 --> 00:41:45,329
of lack it's a difficult situation but

00:41:42,150 --> 00:41:49,890
as can we go back and do recommend

00:41:45,329 --> 00:41:51,540
audits as you go it depends a lot on the

00:41:49,890 --> 00:41:53,910
resources you've got you know if it's a

00:41:51,540 --> 00:41:55,950
if it's a pet project some my pet

00:41:53,910 --> 00:41:58,859
projects sit on servers and I kind of

00:41:55,950 --> 00:42:00,480
just hope they're okay um and that's the

00:41:58,859 --> 00:42:04,980
investment that I'm prepared to put into

00:42:00,480 --> 00:42:07,280
them being alerted about the right

00:42:04,980 --> 00:42:11,339
things like it might be as simple as

00:42:07,280 --> 00:42:12,839
what is it watch lugs or watch dog or

00:42:11,339 --> 00:42:15,210
something where it's just looking for

00:42:12,839 --> 00:42:17,130
interesting reg X's in in the logs that

00:42:15,210 --> 00:42:18,059
you do have that's that's a cheap and

00:42:17,130 --> 00:42:19,290
dirty way of doing it if you're not

00:42:18,059 --> 00:42:20,400
actually gonna bother shipping your logs

00:42:19,290 --> 00:42:24,450
to somewhere else if you're just running

00:42:20,400 --> 00:42:28,530
like one vm somewhere there's basically

00:42:24,450 --> 00:42:30,030
there's there's solutions from the from

00:42:28,530 --> 00:42:31,530
the really quick and dirty and cheap way

00:42:30,030 --> 00:42:32,700
of just sort of being emailed if

00:42:31,530 --> 00:42:37,049
something showed up in the logs that

00:42:32,700 --> 00:42:38,730
worries you or worries or regex all the

00:42:37,049 --> 00:42:41,250
way up to you know the splunk and the

00:42:38,730 --> 00:42:43,020
elk and the the really high end log

00:42:41,250 --> 00:42:44,339
monitoring stuff that costs five hundred

00:42:43,020 --> 00:42:45,540
thousand dollars a month but you

00:42:44,339 --> 00:42:51,420
probably don't want to do on your on

00:42:45,540 --> 00:42:55,260
your kitten's website so you had this

00:42:51,420 --> 00:42:57,610
many HTTP here this mail happen these

00:42:55,260 --> 00:43:00,860
people looking virus is introduced

00:42:57,610 --> 00:43:02,870
yeah that's a good start and if it's

00:43:00,860 --> 00:43:04,130
being emailed you if it's being emailed

00:43:02,870 --> 00:43:08,330
to you whenever something weird happens

00:43:04,130 --> 00:43:10,880
like oh this person used sudo you know

00:43:08,330 --> 00:43:12,770
if it was you and you'd certainly go

00:43:10,880 --> 00:43:13,970
whoa wait what if it wasn't you right if

00:43:12,770 --> 00:43:17,180
it's a if it's a one-person operation

00:43:13,970 --> 00:43:19,040
then that sort of thing becomes pretty

00:43:17,180 --> 00:43:20,150
easy to know something unusual is

00:43:19,040 --> 00:43:22,910
happening if you're just if you're

00:43:20,150 --> 00:43:24,800
looking but the temptation is to not

00:43:22,910 --> 00:43:26,000
look the temptation is to just you only

00:43:24,800 --> 00:43:27,380
look at your access logs when

00:43:26,000 --> 00:43:28,880
something's broken you only look at your

00:43:27,380 --> 00:43:32,560
arrow log in Apache if your apache

00:43:28,880 --> 00:43:32,560
server is not responding for some reason

00:43:34,630 --> 00:43:41,540
hi two things so there's Django two

00:43:38,720 --> 00:43:44,200
factor auth as a django package that

00:43:41,540 --> 00:43:47,360
does Google Authenticator cool and

00:43:44,200 --> 00:43:52,160
secondly CSP can be run in report only

00:43:47,360 --> 00:43:54,530
mode so if you have an old site you

00:43:52,160 --> 00:43:57,320
whitelist the things you think quickly

00:43:54,530 --> 00:43:59,750
and then just run it and report only so

00:43:57,320 --> 00:44:01,190
your users won't see a failing sight but

00:43:59,750 --> 00:44:04,880
you'll get reports about the things you

00:44:01,190 --> 00:44:09,640
forgot so you can build up your kind of

00:44:04,880 --> 00:44:12,320
white list based on activity without

00:44:09,640 --> 00:44:13,640
harming you users the only thing that I

00:44:12,320 --> 00:44:15,050
would add to that though is that you

00:44:13,640 --> 00:44:17,600
don't want to just turn that on off the

00:44:15,050 --> 00:44:19,970
bat because each one of those reports is

00:44:17,600 --> 00:44:21,950
at least when I was last using it was a

00:44:19,970 --> 00:44:24,950
Jason Cole on its own and so if you

00:44:21,950 --> 00:44:26,270
actually have a couple hundred cells in

00:44:24,950 --> 00:44:27,410
a table where each one is running a

00:44:26,270 --> 00:44:30,380
little bit of JavaScript because of your

00:44:27,410 --> 00:44:32,090
legacy app those 200 connections outside

00:44:30,380 --> 00:44:33,980
that your web page is suddenly trying to

00:44:32,090 --> 00:44:39,500
do to your server is bad for its browser

00:44:33,980 --> 00:44:41,720
and you I hear you mentioned that you're

00:44:39,500 --> 00:44:43,760
a fan of a Palmer is there any

00:44:41,720 --> 00:44:47,840
particular reason you would suggest that

00:44:43,760 --> 00:44:49,100
over SI linux mmm honestly because all

00:44:47,840 --> 00:44:51,590
of my infrastructure has been on a bun

00:44:49,100 --> 00:44:53,540
too so that I really should have I meant

00:44:51,590 --> 00:44:55,070
to mention selinux selinux is the

00:44:53,540 --> 00:44:57,230
natural alternative if you're using

00:44:55,070 --> 00:45:00,770
redhead a fedora that's the one that the

00:44:57,230 --> 00:45:02,180
Red Hat sort of ecosystem has has gone

00:45:00,770 --> 00:45:05,210
that's the road they've gone down a

00:45:02,180 --> 00:45:09,010
parmer was a canonical initiative I

00:45:05,210 --> 00:45:09,010
believe that is now adopted by Debian

00:45:10,570 --> 00:45:17,839
okay but yes so selinux is exactly in

00:45:14,420 --> 00:45:19,280
that same space as a farmer I haven't

00:45:17,839 --> 00:45:21,079
used it in the scuttlebutt is that it

00:45:19,280 --> 00:45:23,450
arm is a lot easier to configure but

00:45:21,079 --> 00:45:27,500
those are those are equivalent sort of

00:45:23,450 --> 00:45:30,140
layers of security unfortunately he beat

00:45:27,500 --> 00:45:32,510
me to the point about selinux but there

00:45:30,140 --> 00:45:34,609
are some very neat modules with selinux

00:45:32,510 --> 00:45:38,000
and apache where you can actually have

00:45:34,609 --> 00:45:40,190
per URL context so you can have it so

00:45:38,000 --> 00:45:41,750
that certain pages run in different

00:45:40,190 --> 00:45:45,650
process confinement which means that

00:45:41,750 --> 00:45:47,420
they saw a file upload only that one URL

00:45:45,650 --> 00:45:49,640
has access to write your file system and

00:45:47,420 --> 00:45:51,410
every other URL does not so you can

00:45:49,640 --> 00:45:54,050
actually do per page confinement within

00:45:51,410 --> 00:45:55,849
selinux so maybe that's something as

00:45:54,050 --> 00:45:58,040
well to investigate and have a look down

00:45:55,849 --> 00:45:59,900
because that's really powerful you can

00:45:58,040 --> 00:46:01,730
also do per page database access

00:45:59,900 --> 00:46:03,650
controls and things of that with it so

00:46:01,730 --> 00:46:05,510
cool you know that's just a bit more

00:46:03,650 --> 00:46:07,160
commenting unfortunately I was beaten to

00:46:05,510 --> 00:46:08,540
the punch though the other the other

00:46:07,160 --> 00:46:11,990
thing I'll say about our parmer as well

00:46:08,540 --> 00:46:13,760
as um on a modern up into a lot of

00:46:11,990 --> 00:46:16,819
packages come with our parmer profiles

00:46:13,760 --> 00:46:18,560
but they're reasonably permissive if you

00:46:16,819 --> 00:46:20,420
have a look at the a farmer profiles in

00:46:18,560 --> 00:46:22,700
the etsy apparmor whatever a directory

00:46:20,420 --> 00:46:24,619
you might see a lot of extra things that

00:46:22,700 --> 00:46:26,030
you can uncomment to lock it down

00:46:24,619 --> 00:46:28,609
further maybe some of those are just

00:46:26,030 --> 00:46:31,310
things that you can uncomment lock it

00:46:28,609 --> 00:46:34,430
down and have better security right off

00:46:31,310 --> 00:46:36,200
the bat Fraser yeah you mentioned that

00:46:34,430 --> 00:46:38,780
you weren't sure where the github would

00:46:36,200 --> 00:46:41,450
allow you to push and private keys and

00:46:38,780 --> 00:46:43,460
whatnot oh did you just try yeah and it

00:46:41,450 --> 00:46:46,430
led me so sweet yeah that was a payment

00:46:43,460 --> 00:46:48,170
code at RSA private key but if it lets

00:46:46,430 --> 00:46:50,119
me do that then you let you do probably

00:46:48,170 --> 00:46:52,040
any other sort of key as well so yeah

00:46:50,119 --> 00:46:53,030
beware SSH keys or one that they always

00:46:52,040 --> 00:46:55,480
search for us well that's always very

00:46:53,030 --> 00:46:55,480
useful

00:47:17,250 --> 00:47:21,520
you mentioned lots of script kiddies

00:47:19,630 --> 00:47:23,799
being out there trying to search for low

00:47:21,520 --> 00:47:27,069
hanging fruit sure I know that there's a

00:47:23,799 --> 00:47:31,960
couple of firewall implementations that

00:47:27,069 --> 00:47:34,359
do specific active known bad IP address

00:47:31,960 --> 00:47:35,890
lists oh by chance i just stumbled

00:47:34,359 --> 00:47:37,990
across pfsense and they see baphu

00:47:35,890 --> 00:47:40,990
blocking module that blocks the top 20

00:47:37,990 --> 00:47:43,119
from whatever but i haven't read up too

00:47:40,990 --> 00:47:46,720
much on it do you happen to know how

00:47:43,119 --> 00:47:49,690
effective these are are they even worth

00:47:46,720 --> 00:47:52,030
looking at or no I better not I better

00:47:49,690 --> 00:47:54,490
not pretend to know for sure but my gut

00:47:52,030 --> 00:47:56,440
feeling would be you could take out the

00:47:54,490 --> 00:47:59,710
top twenty or twenty thousand IP

00:47:56,440 --> 00:48:01,119
addresses but they'll be constantly

00:47:59,710 --> 00:48:03,160
finding people who they have attacked

00:48:01,119 --> 00:48:05,829
and then we'll be just mounting attacks

00:48:03,160 --> 00:48:07,270
from there right so the majority of ssh

00:48:05,829 --> 00:48:08,319
login attacks they're just looking for

00:48:07,270 --> 00:48:12,730
another machine from which they can

00:48:08,319 --> 00:48:14,200
proxy further attacks from so again this

00:48:12,730 --> 00:48:15,970
the whole point of this talk is every

00:48:14,200 --> 00:48:17,890
layer that you can add and afford to add

00:48:15,970 --> 00:48:19,809
the better off you'll be I certainly

00:48:17,890 --> 00:48:22,569
wouldn't rely on that on its own though

00:48:19,809 --> 00:48:25,990
because it's just yeah you'd be reducing

00:48:22,569 --> 00:48:29,490
the noise but you wouldn't be shielded

00:48:25,990 --> 00:48:29,490
from everything fair enough

00:48:34,090 --> 00:48:40,950
I was wondering if you had just a couple

00:48:38,680 --> 00:48:44,590
of comments about how you do the

00:48:40,950 --> 00:48:48,450
management to keep your very very

00:48:44,590 --> 00:48:53,350
important credentials safe in your work

00:48:48,450 --> 00:48:57,550
we use LastPass and that's actually you

00:48:53,350 --> 00:48:59,710
know the fact that it's cloudy aside

00:48:57,550 --> 00:49:01,780
it's pretty good security and they

00:48:59,710 --> 00:49:04,630
handled they had a breach recently and

00:49:01,780 --> 00:49:08,680
it was a worrying breach and they

00:49:04,630 --> 00:49:10,960
handled it seemingly pretty maturely and

00:49:08,680 --> 00:49:20,620
you change your master key and your

00:49:10,960 --> 00:49:23,620
master key is hopefully huge but not to

00:49:20,620 --> 00:49:26,470
promote any specific tool the key thing

00:49:23,620 --> 00:49:29,620
is just knowing where it is everywhere

00:49:26,470 --> 00:49:31,810
so all of my passwords I have a couple

00:49:29,620 --> 00:49:33,460
in LastPass might like my work stuff but

00:49:31,810 --> 00:49:36,370
most of mine are in keepass and I know

00:49:33,460 --> 00:49:38,710
where that is if you know where all that

00:49:36,370 --> 00:49:40,090
stuff is then you can make an objective

00:49:38,710 --> 00:49:41,890
assessment about whether it's in a safe

00:49:40,090 --> 00:49:43,960
place but the first question you

00:49:41,890 --> 00:49:46,180
probably do ask yourself is do I even

00:49:43,960 --> 00:49:47,860
know where all of my passwords are saved

00:49:46,180 --> 00:49:51,670
are some of them could they be saved and

00:49:47,860 --> 00:49:53,200
browsers over here does do half the

00:49:51,670 --> 00:49:54,340
people in my organization actually know

00:49:53,200 --> 00:49:55,840
the domain controller password because

00:49:54,340 --> 00:49:56,800
they needed to install software at some

00:49:55,840 --> 00:50:01,270
point they just hold someone the

00:49:56,800 --> 00:50:04,090
password the first the first thing I

00:50:01,270 --> 00:50:07,150
would do is try and audit where those

00:50:04,090 --> 00:50:09,400
credentials are in real life and then

00:50:07,150 --> 00:50:13,090
work out where they ought to be in a

00:50:09,400 --> 00:50:15,820
perfect world we might wrap it up there

00:50:13,090 --> 00:50:17,940
cool so thank you very much tom thank

00:50:15,820 --> 00:50:17,940
you

00:50:27,640 --> 00:50:29,700

YouTube URL: https://www.youtube.com/watch?v=EQVaNTRqIjY


