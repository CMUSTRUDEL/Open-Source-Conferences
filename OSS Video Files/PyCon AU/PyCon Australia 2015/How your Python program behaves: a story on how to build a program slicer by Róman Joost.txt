Title: How your Python program behaves: a story on how to build a program slicer by RÃ³man Joost
Publication date: 2015-08-04
Playlist: PyCon Australia 2015
Description: 
	Understanding the control flows in programs can be simple but increasingly difficult once the program becomes more complex. Debugging these programs can become problematic even worse with a meager amount of test coverage. So what to do? Increasing test coverage can cost you quite a lot of time and may not necessarily yield better results.

Using slicing as a technique for debugging programs aids to understand control flow better. A slice is a subset of the program which affects the values of the point of interest, also known as a slicing criterion. Using program slicing, reasoning about your code will become much quicker and easier as you can safely ignore any not relevant parts of the program.

This talk is about building a slicing tool for Python and the journey to this solution.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:09,550 --> 00:00:16,230
all right guys up next we have Roman

00:00:12,980 --> 00:00:18,720
Yost who currently works for Red Hat

00:00:16,230 --> 00:00:22,420
here to tell us on how to build a

00:00:18,720 --> 00:00:24,480
program slicer Roman

00:00:22,420 --> 00:00:24,480
you

00:00:27,239 --> 00:00:34,239
thanks a lot and thank you for listening

00:00:30,939 --> 00:00:38,290
to my talk so this is the story about

00:00:34,239 --> 00:00:40,989
how to build a program slicer perhaps

00:00:38,290 --> 00:00:43,860
just quickly about me I couldn't get

00:00:40,989 --> 00:00:47,260
work at right at our formerly it was

00:00:43,860 --> 00:00:49,570
dabbling in the web apps sphere in

00:00:47,260 --> 00:00:53,979
Python building web apps with joke

00:00:49,570 --> 00:00:58,360
implode yeah and also contributed to

00:00:53,979 --> 00:01:00,699
gift so the hope and graphics scene was

00:00:58,360 --> 00:01:03,000
a little bit and no scene was a bit of

00:01:00,699 --> 00:01:03,000
my home

00:01:03,400 --> 00:01:12,440
so this talk is leading words towards

00:01:08,210 --> 00:01:14,180
more the how to get their story rather

00:01:12,440 --> 00:01:18,470
than the technical aspects even though I

00:01:14,180 --> 00:01:22,400
can have something to show for so the

00:01:18,470 --> 00:01:26,690
the the talk is about educational

00:01:22,400 --> 00:01:31,690
projects and and how to get to something

00:01:26,690 --> 00:01:35,300
where you actually have no idea of and

00:01:31,690 --> 00:01:37,280
for educational projects obviously the

00:01:35,300 --> 00:01:39,650
primary purpose is the learning

00:01:37,280 --> 00:01:41,330
experience and the great thing is with

00:01:39,650 --> 00:01:46,580
learning experiences there are no ship

00:01:41,330 --> 00:01:49,550
dates so from my talk I thought we

00:01:46,580 --> 00:01:52,390
quickly come to the takeaways and that

00:01:49,550 --> 00:01:55,430
is first and foremost finest idea topic

00:01:52,390 --> 00:02:00,430
build a tool for built a tool to help

00:01:55,430 --> 00:02:00,430
yourself and keep a diary

00:02:01,840 --> 00:02:08,869
so do the first find a study topic and

00:02:05,470 --> 00:02:11,900
perhaps a little disclaimer i come to

00:02:08,869 --> 00:02:15,470
the intricacies of what program slicing

00:02:11,900 --> 00:02:19,430
is and what it does throw it in my talk

00:02:15,470 --> 00:02:21,230
so please be with me let's talk about

00:02:19,430 --> 00:02:22,819
the study topic so the study topic

00:02:21,230 --> 00:02:26,959
should be something which is out of your

00:02:22,819 --> 00:02:29,239
comfort zone so picking if you're a

00:02:26,959 --> 00:02:31,790
Python programmer may be picking Ruby as

00:02:29,239 --> 00:02:35,269
your study topic might not yield a lot

00:02:31,790 --> 00:02:38,209
of an educational game since they are

00:02:35,269 --> 00:02:41,870
almost similar so pick something we have

00:02:38,209 --> 00:02:45,739
never heard of and you're you find

00:02:41,870 --> 00:02:47,900
interesting the tricky part is so watch

00:02:45,739 --> 00:02:50,060
out you can easily get sidetracked with

00:02:47,900 --> 00:02:52,790
that so once you explore a different

00:02:50,060 --> 00:02:55,940
problem space you will find lots of

00:02:52,790 --> 00:03:01,239
tools who also tried something like that

00:02:55,940 --> 00:03:04,040
and exploring them might get you into

00:03:01,239 --> 00:03:06,540
down into the rabbit hole where you

00:03:04,040 --> 00:03:09,360
might never come out of

00:03:06,540 --> 00:03:12,450
so for me the study topic was something

00:03:09,360 --> 00:03:14,310
I didn't sort of she think about it and

00:03:12,450 --> 00:03:18,420
in the shower and I thought like hey

00:03:14,310 --> 00:03:21,000
let's build a program slice on and the

00:03:18,420 --> 00:03:25,140
previous company I was working with a

00:03:21,000 --> 00:03:27,090
lot of junior programmers and some of

00:03:25,140 --> 00:03:30,140
the things I was standing over his was

00:03:27,090 --> 00:03:33,349
this book so I already spoke and

00:03:30,140 --> 00:03:36,359
basically read it and in the book was

00:03:33,349 --> 00:03:39,799
that the book basically gives you an

00:03:36,359 --> 00:03:44,489
overview of how you can debug

00:03:39,799 --> 00:03:46,260
systematically programs and one chapter

00:03:44,489 --> 00:03:49,109
is about static analysis and how you can

00:03:46,260 --> 00:03:53,040
reason about programs just by yeah

00:03:49,109 --> 00:03:59,450
basically looking at the code and in

00:03:53,040 --> 00:04:02,870
there the author was also introducing

00:03:59,450 --> 00:04:02,870
program slicing

00:04:04,360 --> 00:04:10,240
and which brings me to the motivation

00:04:07,840 --> 00:04:11,650
basically what is program classing and

00:04:10,240 --> 00:04:15,520
why would you want to use program

00:04:11,650 --> 00:04:19,450
slicing and things like that so when I

00:04:15,520 --> 00:04:21,489
talk about reasoning then in a way we

00:04:19,450 --> 00:04:22,900
all do it as engineers because we have

00:04:21,489 --> 00:04:24,760
to understand the code we are working

00:04:22,900 --> 00:04:26,560
with right but when I talk about

00:04:24,760 --> 00:04:28,810
reasoning I'm not talking about Sherlock

00:04:26,560 --> 00:04:30,910
Holmes reasoning it's more like you know

00:04:28,810 --> 00:04:33,690
looking at the code and try to

00:04:30,910 --> 00:04:36,580
understand still what what what states

00:04:33,690 --> 00:04:43,510
the different statements are in and when

00:04:36,580 --> 00:04:48,100
and what it does so as an example i'm

00:04:43,510 --> 00:04:50,500
not i'm not referring here about

00:04:48,100 --> 00:04:54,160
correctness of the algorithm here it's

00:04:50,500 --> 00:04:56,380
just the source code fragment so people

00:04:54,160 --> 00:04:58,780
who have implemented prime number

00:04:56,380 --> 00:05:02,760
generators might see that the code is

00:04:58,780 --> 00:05:05,740
wrong but anyway what I'm getting at is

00:05:02,760 --> 00:05:10,270
these are a few lines of code and if you

00:05:05,740 --> 00:05:12,610
want to if you want to reason about for

00:05:10,270 --> 00:05:16,090
example the primes variable it's a list

00:05:12,610 --> 00:05:19,740
right so it gets a pen or two and gets

00:05:16,090 --> 00:05:19,740
returned at the end function

00:05:20,219 --> 00:05:25,900
another example but this one is a bit

00:05:23,680 --> 00:05:28,900
it's more inferior to the previous

00:05:25,900 --> 00:05:31,150
example so now looking at what Prime's

00:05:28,900 --> 00:05:33,370
does some potential stars and all these

00:05:31,150 --> 00:05:37,330
lists and they're going to a while loop

00:05:33,370 --> 00:05:39,729
and then mix and match so now figuring

00:05:37,330 --> 00:05:43,659
out what primes and potentials are doing

00:05:39,729 --> 00:05:47,319
is probably a bit more difficult another

00:05:43,659 --> 00:05:51,729
example took it out of the internet but

00:05:47,319 --> 00:05:54,340
the point here is the more complex the

00:05:51,729 --> 00:05:56,169
program's get and the functions get the

00:05:54,340 --> 00:06:01,469
harder it actually is to reason about

00:05:56,169 --> 00:06:04,569
them to figure out which statements are

00:06:01,469 --> 00:06:09,270
interfering with each other and which

00:06:04,569 --> 00:06:09,270
statements you can basically ignore

00:06:09,889 --> 00:06:14,990
so if I quickly go back to the examples

00:06:12,770 --> 00:06:16,870
I just showed you it would be much

00:06:14,990 --> 00:06:23,719
easier if we could sort of highlight

00:06:16,870 --> 00:06:26,749
what depends on each other if you guys

00:06:23,719 --> 00:06:29,060
know them or your favorite editor you

00:06:26,749 --> 00:06:33,169
can probably highlight all the same

00:06:29,060 --> 00:06:36,560
variables but highlighting what is

00:06:33,169 --> 00:06:40,999
dependent to these variables would be

00:06:36,560 --> 00:06:45,409
really cool so they are the example

00:06:40,999 --> 00:06:48,919
again with highlighted variables

00:06:45,409 --> 00:06:51,439
dependent to each other that's way

00:06:48,919 --> 00:06:55,759
easier to figure out what's happening

00:06:51,439 --> 00:06:57,939
here then just by looking at the code

00:06:55,759 --> 00:06:57,939
itself

00:06:58,440 --> 00:07:03,270
so that's kind of the formal definition

00:07:00,180 --> 00:07:06,560
of what programs lies with us but what

00:07:03,270 --> 00:07:09,110
it really basically comes down to is

00:07:06,560 --> 00:07:15,140
just highlight or show me everything

00:07:09,110 --> 00:07:19,670
what I need to know and which depends on

00:07:15,140 --> 00:07:19,670
on a statement I'm interested in

00:07:19,849 --> 00:07:26,029
and now that brings me to build two for

00:07:23,479 --> 00:07:28,189
yourself so understanding what provo

00:07:26,029 --> 00:07:30,589
slicing is and what can do for you

00:07:28,189 --> 00:07:33,319
that's a cool thing so I thought when I

00:07:30,589 --> 00:07:35,689
was going to slice of Python code and I

00:07:33,319 --> 00:07:39,800
had to think about what the hell's going

00:07:35,689 --> 00:07:42,619
on there I thought gee that is quite a

00:07:39,800 --> 00:07:44,719
tedious task now when i discovered

00:07:42,619 --> 00:07:48,020
program slicing i thought that's a

00:07:44,719 --> 00:07:52,899
really cool thing I want that turns out

00:07:48,020 --> 00:07:56,809
that for Python for dynamic languages

00:07:52,899 --> 00:07:59,500
this tool doesn't really exist so I had

00:07:56,809 --> 00:08:02,110
to build one for myself

00:07:59,500 --> 00:08:05,130
and one of the things I usually do is I

00:08:02,110 --> 00:08:07,990
do some homework and figure out if if

00:08:05,130 --> 00:08:11,170
tools in that problem space already

00:08:07,990 --> 00:08:15,190
exists and if they exist what what

00:08:11,170 --> 00:08:17,110
problem do they solve so one of the

00:08:15,190 --> 00:08:19,000
things is always good to figure out if

00:08:17,110 --> 00:08:21,550
the problems if the tools are going to

00:08:19,000 --> 00:08:24,070
already exists and and fix a specific

00:08:21,550 --> 00:08:26,560
problem because you don't want to

00:08:24,070 --> 00:08:28,300
reinvent the wheel and if you reinvent

00:08:26,560 --> 00:08:30,580
the wheel you want to know why you're

00:08:28,300 --> 00:08:34,080
really reinventing with the wheel to

00:08:30,580 --> 00:08:38,500
solve let's say a different problem and

00:08:34,080 --> 00:08:41,320
yeah what problem does it solve so that

00:08:38,500 --> 00:08:45,370
basically brings us when we talk about

00:08:41,320 --> 00:08:47,680
an unknown problem space building little

00:08:45,370 --> 00:08:50,590
prototypes to explore different

00:08:47,680 --> 00:08:53,230
directions into that problem space it's

00:08:50,590 --> 00:08:58,210
a really good thing to get sort of

00:08:53,230 --> 00:09:03,310
started and a little sort of success

00:08:58,210 --> 00:09:05,589
story into it because when i looked at

00:09:03,310 --> 00:09:08,740
the official definition of how to

00:09:05,589 --> 00:09:10,330
programs like how to program slice it

00:09:08,740 --> 00:09:12,730
talks about control flow graphs and

00:09:10,330 --> 00:09:15,100
dependency graphs and even though i had

00:09:12,730 --> 00:09:19,300
a formula understanding of what graphs

00:09:15,100 --> 00:09:21,250
are creating control flow graphs and

00:09:19,300 --> 00:09:23,170
data flow analysis and stuff like that

00:09:21,250 --> 00:09:28,309
then we'll then never done that before

00:09:23,170 --> 00:09:31,319
so i thought crap how do i do this now

00:09:28,309 --> 00:09:34,229
so that bait that brought me basically

00:09:31,319 --> 00:09:37,649
to a first pison program on my first

00:09:34,229 --> 00:09:39,119
implementation and with my limited

00:09:37,649 --> 00:09:43,739
understanding of a graph what I

00:09:39,119 --> 00:09:47,569
basically did I tracked names and

00:09:43,739 --> 00:09:51,600
variable names among the source code and

00:09:47,569 --> 00:09:56,639
I know it's really small but I show a

00:09:51,600 --> 00:09:59,789
quick demo in a few minutes basically

00:09:56,639 --> 00:10:01,799
what it did in your favorite editor you

00:09:59,789 --> 00:10:05,970
just press a button and it highlights

00:10:01,799 --> 00:10:11,999
all the additional source code lines but

00:10:05,970 --> 00:10:14,609
that was highly dependent on the code i

00:10:11,999 --> 00:10:19,459
was looking at so i couldn't sort of

00:10:14,609 --> 00:10:21,720
slice methods or classes or whatever so

00:10:19,459 --> 00:10:24,779
the interesting thing though that it

00:10:21,720 --> 00:10:28,759
gave me already an instant tool to

00:10:24,779 --> 00:10:28,759
employ when it worked

00:10:29,670 --> 00:10:36,630
but it obviously had problems so I

00:10:34,110 --> 00:10:39,690
didn't create a control flow graph to

00:10:36,630 --> 00:10:41,820
sort of systematically map that over

00:10:39,690 --> 00:10:44,820
source code and source code fragments

00:10:41,820 --> 00:10:49,830
which would have been yielding better

00:10:44,820 --> 00:10:52,110
results and the motivation to improve

00:10:49,830 --> 00:10:55,230
that program due to the fact that it

00:10:52,110 --> 00:10:58,320
sort of gave me an already in a quick

00:10:55,230 --> 00:11:01,080
quick benefit sort of what's going on

00:10:58,320 --> 00:11:06,870
and I actually looked didn't look at the

00:11:01,080 --> 00:11:09,510
tool for over two years so back at kiva

00:11:06,870 --> 00:11:12,060
PyCon last year I think I had a bit of

00:11:09,510 --> 00:11:16,770
time at my hands and I sort of looked at

00:11:12,060 --> 00:11:19,100
second attempt of hacking it and this

00:11:16,770 --> 00:11:24,150
time I try to improve the graph itself

00:11:19,100 --> 00:11:27,410
let me give you a quick demonstration of

00:11:24,150 --> 00:11:33,839
what it actually does

00:11:27,410 --> 00:11:37,890
so basically what you can do is you can

00:11:33,839 --> 00:11:41,279
now see what variables are depending on

00:11:37,890 --> 00:11:44,930
a I mean that's sort of almost obvious

00:11:41,279 --> 00:11:48,500
here in this example but maybe let's

00:11:44,930 --> 00:11:48,500
take this example

00:11:57,260 --> 00:11:59,860
so

00:12:00,080 --> 00:12:08,160
so that that kind of works as in it

00:12:04,980 --> 00:12:11,190
doesn't it doesn't crash what it doesn't

00:12:08,160 --> 00:12:13,670
fall down but there are obviously

00:12:11,190 --> 00:12:13,670
problems

00:12:20,720 --> 00:12:24,740
so I'm still not contracting

00:12:22,310 --> 00:12:26,540
constructing a control flow graph I'm

00:12:24,740 --> 00:12:29,389
still not doing any data dependency

00:12:26,540 --> 00:12:34,879
analysis anything it only works with

00:12:29,389 --> 00:12:38,709
Python and if you want to slice anything

00:12:34,879 --> 00:12:42,350
more complex and sometimes doesn't work

00:12:38,709 --> 00:12:44,540
yields false results so it's it's kind

00:12:42,350 --> 00:12:47,209
of if you would think of it as a product

00:12:44,540 --> 00:12:52,660
it's not suitable at all it might work

00:12:47,209 --> 00:12:52,660
for me but probably not for anyone else

00:12:53,310 --> 00:12:59,710
which brings me basically to the next

00:12:55,900 --> 00:13:06,880
topic so I had the ability or the chance

00:12:59,710 --> 00:13:10,060
to learn more about graphs on a Coursera

00:13:06,880 --> 00:13:11,800
course so now when you are right there

00:13:10,060 --> 00:13:14,680
was something with graphs so they are

00:13:11,800 --> 00:13:17,740
directly grass there are undirected

00:13:14,680 --> 00:13:19,600
graphs there I cyclocross etc etc and

00:13:17,740 --> 00:13:23,680
they're obviously there are implications

00:13:19,600 --> 00:13:27,640
to how you want to represent your source

00:13:23,680 --> 00:13:30,760
code etc etc the other thing was also i

00:13:27,640 --> 00:13:33,070
studied started to study high school in

00:13:30,760 --> 00:13:38,620
Haskell brought in a new paradigm of

00:13:33,070 --> 00:13:40,840
thinking and when I studied Haskell and

00:13:38,620 --> 00:13:42,610
I thought the tricky thing with learning

00:13:40,840 --> 00:13:46,140
in your language is basically you need

00:13:42,610 --> 00:13:48,730
to employ it you need to apply it and

00:13:46,140 --> 00:13:52,000
with the functional language it is

00:13:48,730 --> 00:13:56,160
really hard to get directed acyclic

00:13:52,000 --> 00:13:58,600
graphs right so here I went into

00:13:56,160 --> 00:14:01,480
basically employing a library which is

00:13:58,600 --> 00:14:03,610
being used in the compilers for data

00:14:01,480 --> 00:14:06,580
flow analysis and creating controls on

00:14:03,610 --> 00:14:09,480
graphs so I thought if I if I might not

00:14:06,580 --> 00:14:12,820
get the graph correctly represented

00:14:09,480 --> 00:14:15,480
better to use a a library and go from

00:14:12,820 --> 00:14:15,480
there basically

00:14:17,540 --> 00:14:21,649
and when I looked into that compilers

00:14:20,060 --> 00:14:23,750
right there was something I thought

00:14:21,649 --> 00:14:27,079
because compilers need to do that all

00:14:23,750 --> 00:14:31,959
the time so colleagues actually gave me

00:14:27,079 --> 00:14:34,190
an idea of looking into llvm maybe

00:14:31,959 --> 00:14:36,800
someone has solved the problem already

00:14:34,190 --> 00:14:39,290
so I could basically save the time and

00:14:36,800 --> 00:14:42,410
just use a different tool but

00:14:39,290 --> 00:14:46,610
unfortunately from what I've so far

00:14:42,410 --> 00:14:48,740
discovered is that the motivation for

00:14:46,610 --> 00:14:51,290
all these tools to create control flow

00:14:48,740 --> 00:14:52,880
graphs and do program analysis is

00:14:51,290 --> 00:14:55,310
because they are transforming your

00:14:52,880 --> 00:14:57,259
source code into an intermediate

00:14:55,310 --> 00:15:01,329
representation into a low source code

00:14:57,259 --> 00:15:04,880
and doing all this analysis is basically

00:15:01,329 --> 00:15:06,380
how you want to eliminate unwanted

00:15:04,880 --> 00:15:08,480
statement and stuff like that so it

00:15:06,380 --> 00:15:10,610
actually that's the right thing but it

00:15:08,480 --> 00:15:14,420
doesn't work on your source code so it

00:15:10,610 --> 00:15:16,779
works on on something down the line to

00:15:14,420 --> 00:15:16,779
machine code

00:15:17,480 --> 00:15:19,600
um

00:15:21,830 --> 00:15:28,910
and here comes the other thing when I

00:15:24,920 --> 00:15:30,650
used Haskell the tricky thing is i felt

00:15:28,910 --> 00:15:32,840
i'm really going down the rabbit hole

00:15:30,650 --> 00:15:34,490
here with with different languages and

00:15:32,840 --> 00:15:38,000
stuff like that how do I measure

00:15:34,490 --> 00:15:42,440
progress and that's basically point we

00:15:38,000 --> 00:15:44,660
keep a diary the thing with Diaries

00:15:42,440 --> 00:15:47,390
though it feels a bit like if you read

00:15:44,660 --> 00:15:50,000
your own diary and in order to distill

00:15:47,390 --> 00:15:52,450
the progress out of the Diary is a bit

00:15:50,000 --> 00:15:56,510
tricky it feels a bit like you know

00:15:52,450 --> 00:16:00,530
playing with yourself so that's but

00:15:56,510 --> 00:16:03,440
that's one aspect for diary one benefit

00:16:00,530 --> 00:16:06,490
for died but the other thing was a diary

00:16:03,440 --> 00:16:08,990
it is actually a really cool rubber duck

00:16:06,490 --> 00:16:13,790
who of you guys know what rubber duck

00:16:08,990 --> 00:16:16,730
the bugging is so just to quickly

00:16:13,790 --> 00:16:19,280
explain it you probably all were in

00:16:16,730 --> 00:16:22,280
situations where you basically for

00:16:19,280 --> 00:16:25,160
problem you hit the wall with the

00:16:22,280 --> 00:16:27,440
solution right and you couldn't really

00:16:25,160 --> 00:16:30,050
figure out how to go from the eyes that

00:16:27,440 --> 00:16:33,800
you've searched all possibilities and

00:16:30,050 --> 00:16:35,330
nothing seems to be working and what you

00:16:33,800 --> 00:16:37,130
do usually is you you say to your

00:16:35,330 --> 00:16:39,050
colleague hey come over here can you

00:16:37,130 --> 00:16:41,270
help me with that so what you do is to

00:16:39,050 --> 00:16:42,860
your colleague you explain look this

00:16:41,270 --> 00:16:45,080
doesn't work and I've done this and this

00:16:42,860 --> 00:16:48,100
and you basically explained what you've

00:16:45,080 --> 00:16:51,170
already tried and by explaining to him

00:16:48,100 --> 00:16:57,320
you come to the realization hang on a

00:16:51,170 --> 00:16:58,940
minute I haven't tried XYZ so your

00:16:57,320 --> 00:17:00,820
colleague is basically the rubber duck

00:16:58,940 --> 00:17:04,000
because he didn't help you at all

00:17:00,820 --> 00:17:06,740
finding the other possible solutions and

00:17:04,000 --> 00:17:08,330
you could also do that to a rubber duck

00:17:06,740 --> 00:17:10,040
right because you don't really need

00:17:08,330 --> 00:17:13,880
someone to stand there all you need to

00:17:10,040 --> 00:17:17,480
do is explain what you've done and with

00:17:13,880 --> 00:17:19,880
the diary it basically accesses as the

00:17:17,480 --> 00:17:21,470
same thing but it just looks less

00:17:19,880 --> 00:17:22,620
ridiculous because you don't have to

00:17:21,470 --> 00:17:25,620
talk to yourself

00:17:22,620 --> 00:17:25,620
um

00:17:26,000 --> 00:17:29,690
and the other thing is also that you

00:17:28,130 --> 00:17:32,900
could write down what you want to focus

00:17:29,690 --> 00:17:35,810
next I have a family and I can't employ

00:17:32,900 --> 00:17:38,570
much time on that so usually it acts

00:17:35,810 --> 00:17:41,770
like a good way of a stack so you put

00:17:38,570 --> 00:17:46,470
down okay next time when I work on this

00:17:41,770 --> 00:17:50,970
focus on this particular thing

00:17:46,470 --> 00:17:54,059
future plans so as I said with

00:17:50,970 --> 00:17:56,970
educational program projects you really

00:17:54,059 --> 00:17:58,679
don't have the aim to produce a product

00:17:56,970 --> 00:18:02,970
but you want the tool which helps

00:17:58,679 --> 00:18:05,429
yourself so it's still for me if the

00:18:02,970 --> 00:18:07,620
motivation is there to sort of X enhance

00:18:05,429 --> 00:18:11,250
it further and maybe build a product out

00:18:07,620 --> 00:18:13,980
of it maybe language-independent would

00:18:11,250 --> 00:18:15,840
be cool thing at Red Hat I'm not only

00:18:13,980 --> 00:18:19,110
working on Python code on also other

00:18:15,840 --> 00:18:21,600
languages so having something in

00:18:19,110 --> 00:18:24,900
language independent that's a net would

00:18:21,600 --> 00:18:26,940
be a nice thing and kinky i'm working on

00:18:24,900 --> 00:18:28,919
basically implementing the proper

00:18:26,940 --> 00:18:30,630
slicing model of creating control flow

00:18:28,919 --> 00:18:32,990
graphs doing data flow analysis and

00:18:30,630 --> 00:18:32,990
stuff like that

00:18:33,500 --> 00:18:39,590
that is almost about it people who are

00:18:37,700 --> 00:18:41,870
interested please come to me people who

00:18:39,590 --> 00:18:44,450
might know python tools or other tools

00:18:41,870 --> 00:18:47,780
who already do that please come to me i

00:18:44,450 --> 00:18:50,660
want to i want to know about it you can

00:18:47,780 --> 00:18:55,550
most likely find me on the nic

00:18:50,660 --> 00:19:04,010
romanovsky on the internet and thank you

00:18:55,550 --> 00:19:06,650
for your attention one thing what I

00:19:04,010 --> 00:19:10,880
wanted to say redhead Brisbane is hiring

00:19:06,650 --> 00:19:12,770
and who is interested in the Python

00:19:10,880 --> 00:19:15,470
software engineering position please

00:19:12,770 --> 00:19:18,820
talk to me thank you very much oh we

00:19:15,470 --> 00:19:18,820
have some time for questions if

00:19:22,730 --> 00:19:28,490
have you looked into s sa based

00:19:24,620 --> 00:19:31,320
approaches for your program slicing

00:19:28,490 --> 00:19:34,100
ok s sa based

00:19:31,320 --> 00:19:34,100
coolio

00:19:38,169 --> 00:19:43,749
okay yep maybe we should have a chat

00:19:40,720 --> 00:19:46,080
about it sounds cool want to know more

00:19:43,749 --> 00:19:47,950
about it

00:19:46,080 --> 00:19:50,010
anyone else

00:19:47,950 --> 00:19:50,010
Oh

00:19:56,600 --> 00:20:02,870
thanks for a great talk I'm just

00:19:59,540 --> 00:20:06,230
wondering the plug-in that you have

00:20:02,870 --> 00:20:08,570
written is that just for them yes well

00:20:06,230 --> 00:20:11,350
it's sort of really a prototype since I

00:20:08,570 --> 00:20:14,150
spent more time on the Python program oh

00:20:11,350 --> 00:20:15,890
it's only for one even though I'm sort

00:20:14,150 --> 00:20:19,789
of switching back and forth between

00:20:15,890 --> 00:20:21,859
editors but cool now I think

00:20:19,789 --> 00:20:24,619
look at that you know someone who

00:20:21,859 --> 00:20:28,340
doesn't code very you know a great deal

00:20:24,619 --> 00:20:31,609
of my work time I think that's a really

00:20:28,340 --> 00:20:34,220
good process to get into to be able to

00:20:31,609 --> 00:20:37,210
actually quickly look over code so you

00:20:34,220 --> 00:20:39,499
what's related to their another because

00:20:37,210 --> 00:20:43,789
we obviously do spend a lot of time

00:20:39,499 --> 00:20:45,979
looking through code and looking through

00:20:43,789 --> 00:20:49,039
code that we don't actually write

00:20:45,979 --> 00:20:51,340
ourselves so it's good to really cool

00:20:49,039 --> 00:20:51,340
thing

00:20:54,870 --> 00:20:58,800
have you looked at any of the tools that

00:20:56,730 --> 00:21:01,230
pipe i could give you in terms of

00:20:58,800 --> 00:21:03,210
language understanding yes so i looked

00:21:01,230 --> 00:21:06,300
at my pipe for example i looked at

00:21:03,210 --> 00:21:09,270
thailand me cago helped me there to give

00:21:06,300 --> 00:21:12,410
me a few pointers they helped me in

00:21:09,270 --> 00:21:15,570
terms of understanding how other people

00:21:12,410 --> 00:21:18,510
other people soft building control flow

00:21:15,570 --> 00:21:20,070
graphs as i said the tricky thing is

00:21:18,510 --> 00:21:21,990
that they usually do that in a

00:21:20,070 --> 00:21:25,020
transformation of the source code so

00:21:21,990 --> 00:21:28,200
matting that back into your original

00:21:25,020 --> 00:21:31,410
source code that's a tricky thing we

00:21:28,200 --> 00:21:33,030
would that apply to the underlying llvm

00:21:31,410 --> 00:21:35,760
and then you get the cross language

00:21:33,030 --> 00:21:37,920
support yeah I look at that yeah they I

00:21:35,760 --> 00:21:41,940
looked at that that's that's exactly the

00:21:37,920 --> 00:21:44,400
problem i faced basically if you end up

00:21:41,940 --> 00:21:45,660
on at least that's my understanding if

00:21:44,400 --> 00:21:50,429
you end up with the intermediate

00:21:45,660 --> 00:21:52,920
representation then I saw you could map

00:21:50,429 --> 00:21:57,030
it back into Python code but that not

00:21:52,920 --> 00:21:59,160
necessarily is the same so we should

00:21:57,030 --> 00:22:01,120
have done if I bills

00:21:59,160 --> 00:22:04,080
you

00:22:01,120 --> 00:22:04,080
sorry

00:22:04,930 --> 00:22:09,520
you can store the lines of your original

00:22:07,270 --> 00:22:10,990
source coding you in the nodes of your

00:22:09,520 --> 00:22:13,120
tree and then you can just recompile

00:22:10,990 --> 00:22:15,790
from there all right so that's not

00:22:13,120 --> 00:22:18,750
really a problem okay well let's let's

00:22:15,790 --> 00:22:18,750
have a chat after work

00:22:19,240 --> 00:22:25,410
right thank you everyone here come to me

00:22:22,750 --> 00:22:25,410
just

00:22:27,950 --> 00:22:32,400
hey thanks for the chat panel talk as

00:22:31,110 --> 00:22:33,780
someone who works with embedded systems

00:22:32,400 --> 00:22:36,480
and things like that as an engineer

00:22:33,780 --> 00:22:38,400
issue any idea of this could work with

00:22:36,480 --> 00:22:40,700
interrupt ribbon like environments and

00:22:38,400 --> 00:22:40,700
things like that

00:22:40,860 --> 00:22:47,570
no yes yeah that sounds interesting yeah

00:22:44,790 --> 00:22:47,570
cool

00:22:48,070 --> 00:22:52,380
alright Thank You Ramon thank you very

00:22:50,230 --> 00:22:52,380
much

00:23:01,510 --> 00:23:03,570

YouTube URL: https://www.youtube.com/watch?v=S1Nx3zSkd40


