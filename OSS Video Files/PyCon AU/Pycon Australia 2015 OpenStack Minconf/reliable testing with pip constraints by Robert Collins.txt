Title: reliable testing with pip constraints by Robert Collins
Publication date: 2015-08-06
Playlist: Pycon Australia 2015 OpenStack Minconf
Description: 
	pip freeze files and similar techniques like buildout have been used for reliable testing and reliable deployments for some time. But they are not flexible enough to deal with situations like OpenStack where there are dozens of separate codebases, evolving independently, which still need the same rigour and reliability.

Enter pip constraints, new in 7.1.0. I will cover their use, design, and how we're using them in devstack (and thus OpenStack CI) - and how you can (and should) use them in your local projects.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:11,370 --> 00:00:15,900
alright well resume next up we have

00:00:13,799 --> 00:00:19,200
robert collins talking about reliable

00:00:15,900 --> 00:00:21,450
testing with pip he works for HP and

00:00:19,200 --> 00:00:23,130
he's also helped organize this mini comp

00:00:21,450 --> 00:00:30,840
so please make him feel even more of

00:00:23,130 --> 00:00:40,500
them and today i learned how to turn the

00:00:30,840 --> 00:00:46,460
microphone on so um mouse on the right

00:00:40,500 --> 00:00:48,690
window right so got the problem and

00:00:46,460 --> 00:00:51,870
that's interesting alright okay good

00:00:48,690 --> 00:00:53,249
good so you want to do some testing of

00:00:51,870 --> 00:00:55,140
your code you probably want to put it in

00:00:53,249 --> 00:00:56,909
CI you want to be able to have it be run

00:00:55,140 --> 00:00:59,370
by a robot that will do it right and

00:00:56,909 --> 00:01:03,149
accurately and make it work every single

00:00:59,370 --> 00:01:04,290
time but as soon as you've done that

00:01:03,149 --> 00:01:06,630
you're going to want to deploy it

00:01:04,290 --> 00:01:09,240
somewhere so although this title of this

00:01:06,630 --> 00:01:11,390
talk is about reliable testing really

00:01:09,240 --> 00:01:13,020
it's talking about reliable deployments

00:01:11,390 --> 00:01:17,940
because you want to know that that's

00:01:13,020 --> 00:01:20,520
going to work and well the story is

00:01:17,940 --> 00:01:21,900
frankly horrible it's not this isn't a

00:01:20,520 --> 00:01:22,980
talk about docker by the way just to be

00:01:21,900 --> 00:01:25,260
clear we're not going to go down their

00:01:22,980 --> 00:01:29,460
path I love docker but this is not that

00:01:25,260 --> 00:01:32,430
talk if your packages are coming out of

00:01:29,460 --> 00:01:34,050
Linux any Linux about ancient of Python

00:01:32,430 --> 00:01:35,310
specific packages it's a Python

00:01:34,050 --> 00:01:38,400
conference we're talking about Python

00:01:35,310 --> 00:01:40,110
code and when I say ancient they might

00:01:38,400 --> 00:01:41,970
be last month or there might be last

00:01:40,110 --> 00:01:44,400
decade but either way they're not going

00:01:41,970 --> 00:01:46,380
to be the versions that the maintainer

00:01:44,400 --> 00:01:47,610
have put up on pipeline to published for

00:01:46,380 --> 00:01:49,890
you to use they don't have the latest

00:01:47,610 --> 00:01:51,810
security fixes until someone says

00:01:49,890 --> 00:01:54,720
actually that package is used by more

00:01:51,810 --> 00:01:58,350
than three people in Upper Canada and

00:01:54,720 --> 00:02:00,000
really does need these cve number

00:01:58,350 --> 00:02:01,800
allocated and pushed out into the

00:02:00,000 --> 00:02:04,110
destroyers and then yes it is big enough

00:02:01,800 --> 00:02:06,950
to put into rail and it's just a

00:02:04,110 --> 00:02:10,709
nightmare so let's not talk about linux

00:02:06,950 --> 00:02:12,420
docker great but you're going to either

00:02:10,709 --> 00:02:13,319
be talking about all the other stuff I'm

00:02:12,420 --> 00:02:14,790
talking about all you're going to be

00:02:13,319 --> 00:02:16,200
using district packages with in Dhaka

00:02:14,790 --> 00:02:18,599
and it's going to have exactly the same

00:02:16,200 --> 00:02:20,010
narrative you do an update before you

00:02:18,599 --> 00:02:23,380
build your image you've got some

00:02:20,010 --> 00:02:26,630
deployment stuff it doesn't help

00:02:23,380 --> 00:02:29,900
so perp gets you the latest code it's

00:02:26,630 --> 00:02:32,599
got all of the security fixes there's

00:02:29,900 --> 00:02:37,550
one big caveat there it's the latest

00:02:32,599 --> 00:02:39,830
code and updates break the world the

00:02:37,550 --> 00:02:44,840
more dependencies you've got the worse

00:02:39,830 --> 00:02:46,790
the skits so your problem really isn't

00:02:44,840 --> 00:02:49,610
about testing your code or deploying it

00:02:46,790 --> 00:02:51,650
the problem is other projects we don't

00:02:49,610 --> 00:02:55,250
want them we don't want to loose

00:02:51,650 --> 00:02:57,890
coupling but actually we do it's a

00:02:55,250 --> 00:02:59,269
valuable thing so we need to acknowledge

00:02:57,890 --> 00:03:01,069
the people will make mistakes other

00:02:59,269 --> 00:03:02,360
projects will meet in the sex will make

00:03:01,069 --> 00:03:05,030
mistakes in the way we use other

00:03:02,360 --> 00:03:06,860
people's code and major version

00:03:05,030 --> 00:03:08,299
boundaries kind of interesting because

00:03:06,860 --> 00:03:10,280
that's when they signal that they have

00:03:08,299 --> 00:03:12,110
deliberately broken something and you've

00:03:10,280 --> 00:03:14,989
got to choose between having the latest

00:03:12,110 --> 00:03:21,110
most secure and fastest code or being

00:03:14,989 --> 00:03:24,799
broken so there are a bunch of existing

00:03:21,110 --> 00:03:29,930
solutions in this space and some of them

00:03:24,799 --> 00:03:32,450
are pretty good I like this one don't

00:03:29,930 --> 00:03:34,190
use any other code at all it's all in

00:03:32,450 --> 00:03:38,150
your tree you can't be broken by anyone

00:03:34,190 --> 00:03:39,530
else it's fantastic some people might

00:03:38,150 --> 00:03:41,720
say that this is kind of bad on

00:03:39,530 --> 00:03:43,640
collaboration on you know repeating

00:03:41,720 --> 00:03:47,840
yourself in the ecosystem but you know

00:03:43,640 --> 00:03:48,980
what do they know another option people

00:03:47,840 --> 00:03:50,420
today because they say we'll build

00:03:48,980 --> 00:03:52,130
everything in to destroy packages

00:03:50,420 --> 00:03:54,290
because destroy peckers can express

00:03:52,130 --> 00:03:55,579
extremely complex dependencies and they

00:03:54,290 --> 00:03:57,470
can say what they will break and what

00:03:55,579 --> 00:04:00,019
they won't break and we get completely

00:03:57,470 --> 00:04:02,600
consistent deploys and it's a huge

00:04:00,019 --> 00:04:04,250
amount of work and you don't gain a lot

00:04:02,600 --> 00:04:07,130
you gain a little bit but you don't gain

00:04:04,250 --> 00:04:09,290
a lot but you end up running an entirely

00:04:07,130 --> 00:04:11,630
parallel tool chain you can't use any of

00:04:09,290 --> 00:04:14,690
the talling that's been built up in the

00:04:11,630 --> 00:04:17,900
Python ecosystem for example talks and

00:04:14,690 --> 00:04:19,639
div pi and things like that and you also

00:04:17,900 --> 00:04:21,350
get into conflicts with your distro

00:04:19,639 --> 00:04:23,240
vendor you have to fork their packages

00:04:21,350 --> 00:04:24,590
however they've been packaged to do an

00:04:23,240 --> 00:04:27,710
update to something that is in the

00:04:24,590 --> 00:04:29,419
distro I don't recommend it as a path

00:04:27,710 --> 00:04:31,310
I've seen lots of people go down it and

00:04:29,419 --> 00:04:32,720
build very sophisticated things that

00:04:31,310 --> 00:04:35,830
work but it's a lot more effort than

00:04:32,720 --> 00:04:35,830
just being kind of low-key

00:04:36,279 --> 00:04:42,139
you can run a manual pi Pomeroy I know a

00:04:40,129 --> 00:04:49,089
organization openstack confront that did

00:04:42,139 --> 00:04:51,349
that for a while hurts I know it wasn't

00:04:49,089 --> 00:04:52,939
yeah Monty said he thought it was fun

00:04:51,349 --> 00:04:59,839
what he meant was he spend a lot of time

00:04:52,939 --> 00:05:02,899
drinking so what happens is that when

00:04:59,839 --> 00:05:04,759
the mirror gets an update from pi PI it

00:05:02,899 --> 00:05:07,580
gets in a feeling non-deterministic

00:05:04,759 --> 00:05:09,769
fashion if you're running Bandersnatch

00:05:07,580 --> 00:05:11,419
it is quite deterministic but the amount

00:05:09,769 --> 00:05:14,029
but when something goes wrong you might

00:05:11,419 --> 00:05:15,589
skip a particular package because the

00:05:14,029 --> 00:05:17,479
mirrors down for a second or something

00:05:15,589 --> 00:05:20,059
and then you get an error and your

00:05:17,479 --> 00:05:22,099
mirror is an inconsistent State there's

00:05:20,059 --> 00:05:24,019
no way to guarantee that what you'd let

00:05:22,099 --> 00:05:25,819
in through that mirror push is actually

00:05:24,019 --> 00:05:26,929
compatible so you have to run two

00:05:25,819 --> 00:05:28,490
mirrors and then you have to pivot

00:05:26,929 --> 00:05:30,289
between them to say is this one still

00:05:28,490 --> 00:05:32,509
working or did it break something and I

00:05:30,289 --> 00:05:34,009
can't turn it on and then when the

00:05:32,509 --> 00:05:35,749
package you really care about has an

00:05:34,009 --> 00:05:37,039
update but that came in right after a

00:05:35,749 --> 00:05:38,779
package that you didn't care about that

00:05:37,039 --> 00:05:41,029
broke something you haven't actually

00:05:38,779 --> 00:05:42,829
gained in I think versus figure out some

00:05:41,029 --> 00:05:43,969
other way of solving it because you

00:05:42,829 --> 00:05:45,709
still are in the position where you've

00:05:43,969 --> 00:05:48,439
got a fire drill to get that update you

00:05:45,709 --> 00:05:52,389
need you have to solve your problem with

00:05:48,439 --> 00:05:58,069
the package you didn't really care about

00:05:52,389 --> 00:06:01,429
and another route is to put really tight

00:05:58,069 --> 00:06:04,909
bounds in your set up top I dependencies

00:06:01,429 --> 00:06:07,009
to say hey I'm going to work on any of

00:06:04,909 --> 00:06:10,879
the Python after awhile for guys an

00:06:07,009 --> 00:06:14,929
example the lxml 3.4 releases really

00:06:10,879 --> 00:06:16,849
really tight balance now this kind of

00:06:14,929 --> 00:06:18,919
works as long as known accidentally

00:06:16,849 --> 00:06:22,599
break something in the point release or

00:06:18,919 --> 00:06:25,189
a patch release which does happen and

00:06:22,599 --> 00:06:28,249
it's got a really bad side effect when

00:06:25,189 --> 00:06:32,240
you cut a release from your project like

00:06:28,249 --> 00:06:35,089
this you really bind the dependency

00:06:32,240 --> 00:06:39,559
resolver input which is somewhat crude

00:06:35,089 --> 00:06:40,879
today to just that version of lxml now

00:06:39,559 --> 00:06:42,409
if you've got another project that comes

00:06:40,879 --> 00:06:43,819
along but you're interacting with that

00:06:42,409 --> 00:06:46,130
says they don't work with that version

00:06:43,819 --> 00:06:48,570
of lxml in one be needing your verge

00:06:46,130 --> 00:06:50,699
one of two things will happen you'll

00:06:48,570 --> 00:06:53,100
either have your boundaries ignored

00:06:50,699 --> 00:06:55,680
which means they weren't really offering

00:06:53,100 --> 00:06:57,150
you anything in the first place or you

00:06:55,680 --> 00:06:58,800
won't install the vision of lxml above

00:06:57,150 --> 00:07:00,180
Arabic thing you depend on needs and

00:06:58,800 --> 00:07:06,509
everything is going to go up in flames

00:07:00,180 --> 00:07:08,160
you can vendor everything you can take a

00:07:06,509 --> 00:07:10,770
copy of all your dependencies put them

00:07:08,160 --> 00:07:12,660
in your code base and then when you want

00:07:10,770 --> 00:07:13,889
to update them you take a copy of the

00:07:12,660 --> 00:07:16,199
updated thing you put it in your code

00:07:13,889 --> 00:07:19,080
base and you commit it now this is

00:07:16,199 --> 00:07:23,490
actually really really good for some

00:07:19,080 --> 00:07:25,590
special cases but it breaks when you've

00:07:23,490 --> 00:07:28,470
got multiple projects so if I've got to

00:07:25,590 --> 00:07:30,570
code trees say I'm in the micro services

00:07:28,470 --> 00:07:32,130
architecture and I've got one service

00:07:30,570 --> 00:07:33,720
that you know knows how to talk about

00:07:32,130 --> 00:07:36,090
users and other service that talks about

00:07:33,720 --> 00:07:39,479
projects or something they won't

00:07:36,090 --> 00:07:41,490
necessarily agree on the code and those

00:07:39,479 --> 00:07:43,530
treats now microservices are actually

00:07:41,490 --> 00:07:45,210
relatively fine we're talking over the

00:07:43,530 --> 00:07:47,099
web between them or maybe we've been

00:07:45,210 --> 00:07:48,690
doing the kind of client talks to one

00:07:47,099 --> 00:07:51,090
client talk to the other hand shake and

00:07:48,690 --> 00:07:52,590
nothing's ever really mingling but if I

00:07:51,090 --> 00:07:56,039
tried to run those in one whiskey

00:07:52,590 --> 00:07:58,470
container as microservices but deploy

00:07:56,039 --> 00:08:02,430
them to the same virtually run one was

00:07:58,470 --> 00:08:05,130
can contain around them both boom not

00:08:02,430 --> 00:08:06,659
going to play nicely if you there's two

00:08:05,130 --> 00:08:09,020
different ways of entering one is that

00:08:06,659 --> 00:08:11,370
you put everything into a namespace so

00:08:09,020 --> 00:08:12,930
like the you know and the vendor

00:08:11,370 --> 00:08:14,099
namespace the other one is you put it in

00:08:12,930 --> 00:08:17,490
the name of space you but you do an

00:08:14,099 --> 00:08:20,280
import hook so say you had lxml vended

00:08:17,490 --> 00:08:25,710
you'll end up having it at the root lxml

00:08:20,280 --> 00:08:27,419
in do a python memory so system module

00:08:25,710 --> 00:08:29,250
square bracket quad lxml will be the one

00:08:27,419 --> 00:08:30,360
that came from you of in de tree how's

00:08:29,250 --> 00:08:31,800
that going to work when you've got two

00:08:30,360 --> 00:08:37,200
different projects trying to vendor the

00:08:31,800 --> 00:08:39,329
same thing it doesn't is the answer now

00:08:37,200 --> 00:08:43,529
requirements files who here doesn't

00:08:39,329 --> 00:08:44,960
order pizza follows right I think I got

00:08:43,529 --> 00:08:49,340
that auditorium

00:08:44,960 --> 00:08:51,770
so that actually pretty cool all right

00:08:49,340 --> 00:08:55,460
you say I need this exact version this

00:08:51,770 --> 00:08:57,140
is the version I know works test with

00:08:55,460 --> 00:09:01,280
that to play with that everything is

00:08:57,140 --> 00:09:03,890
predictable it's wonderful solves all

00:09:01,280 --> 00:09:05,750
problems with mirrors because doesn't

00:09:03,890 --> 00:09:07,670
matter how far the mirror moves ahead

00:09:05,750 --> 00:09:09,680
you've still got the version you know

00:09:07,670 --> 00:09:13,840
works that you last successfully tested

00:09:09,680 --> 00:09:16,850
with in place it's got some downsides

00:09:13,840 --> 00:09:19,190
the first is it described a deployment

00:09:16,850 --> 00:09:21,890
so it describes every single thing

00:09:19,190 --> 00:09:23,270
you're going to install or you could

00:09:21,890 --> 00:09:27,050
describe a subset of them but that's not

00:09:23,270 --> 00:09:28,550
generally that useful but it installs

00:09:27,050 --> 00:09:30,080
everything that's referenced if you have

00:09:28,550 --> 00:09:32,120
something that you sometimes install and

00:09:30,080 --> 00:09:33,440
sometimes don't you have a choice you

00:09:32,120 --> 00:09:34,910
either put it in your requirements file

00:09:33,440 --> 00:09:36,560
and it's always installed or you don't

00:09:34,910 --> 00:09:38,300
put in their promise file and when it is

00:09:36,560 --> 00:09:39,410
installed it just flips all over the

00:09:38,300 --> 00:09:41,840
place and takes whatever the latest

00:09:39,410 --> 00:09:44,000
version and the mirrors or the latest

00:09:41,840 --> 00:09:47,930
version described by your dependencies

00:09:44,000 --> 00:09:52,640
in your see them to PI so it's almost

00:09:47,930 --> 00:09:54,590
what we want now there's a thing called

00:09:52,640 --> 00:09:56,380
build out build out as wonderful it's

00:09:54,590 --> 00:10:00,940
exactly the same as a requirements file

00:09:56,380 --> 00:10:00,940
it uses easy install

00:10:01,700 --> 00:10:05,490
and it's got the same issue with

00:10:03,810 --> 00:10:07,100
multiple projects the vin during dozen

00:10:05,490 --> 00:10:09,810
requirements has this as well by the way

00:10:07,100 --> 00:10:13,470
if i have to separate microservices i

00:10:09,810 --> 00:10:14,640
have to separate requirements files they

00:10:13,470 --> 00:10:16,740
can have different values in them I'm

00:10:14,640 --> 00:10:18,870
now incompatible or I have one

00:10:16,740 --> 00:10:20,970
requirements file that I'm using to

00:10:18,870 --> 00:10:23,940
describe a deployment of those two micro

00:10:20,970 --> 00:10:25,530
services but now I am coupling my

00:10:23,940 --> 00:10:27,060
testing and my deployment much more

00:10:25,530 --> 00:10:29,430
closely than I want to because sometimes

00:10:27,060 --> 00:10:31,080
I want to be able to deploy reliably but

00:10:29,430 --> 00:10:33,810
I don't necessarily want to have my test

00:10:31,080 --> 00:10:35,190
environment exactly match all the other

00:10:33,810 --> 00:10:36,960
users of this who might want to deploy

00:10:35,190 --> 00:10:38,370
it differently when they do the plot I

00:10:36,960 --> 00:10:43,230
wonder night will work these are

00:10:38,370 --> 00:10:44,790
slightly different things so we came up

00:10:43,230 --> 00:10:48,630
this thing that I'm going to call the

00:10:44,790 --> 00:10:52,110
new shiny and it's aimed at solving this

00:10:48,630 --> 00:10:53,550
problem so a better name for it is

00:10:52,110 --> 00:10:55,320
constraints files so the difference

00:10:53,550 --> 00:10:57,030
between the constraint in a requirement

00:10:55,320 --> 00:10:59,760
is a requirement is something you need

00:10:57,030 --> 00:11:03,050
the constraint is a rule about when you

00:10:59,760 --> 00:11:03,050
have something what it has to look like

00:11:04,010 --> 00:11:12,690
the syntax may be familiar to you it's a

00:11:08,640 --> 00:11:15,990
requirements file and you use it by

00:11:12,690 --> 00:11:17,790
saying perp installed SC my constraints

00:11:15,990 --> 00:11:19,320
or text and you know any other things

00:11:17,790 --> 00:11:21,150
you want to install and this is the

00:11:19,320 --> 00:11:22,770
important but you still have to specify

00:11:21,150 --> 00:11:24,570
what you're installing when you use a

00:11:22,770 --> 00:11:26,430
constraints file because it doesn't

00:11:24,570 --> 00:11:28,800
actually trigger the installation of

00:11:26,430 --> 00:11:31,230
anything and it doesn't describe a

00:11:28,800 --> 00:11:34,380
deployment it describes a consistent

00:11:31,230 --> 00:11:39,720
universe of packages so you put all of

00:11:34,380 --> 00:11:42,030
the things in there for your project if

00:11:39,720 --> 00:11:43,589
they get installed for some reason the

00:11:42,030 --> 00:11:44,610
version specified and the constraints

00:11:43,589 --> 00:11:48,960
file is the version that will be

00:11:44,610 --> 00:11:51,710
installed when you've got multiple

00:11:48,960 --> 00:11:54,540
projects you have a constraints file /

00:11:51,710 --> 00:11:57,960
thing is one way of running up if you're

00:11:54,540 --> 00:11:59,550
um and you can merge them together by

00:11:57,960 --> 00:12:01,500
you know just pulling them in and

00:11:59,550 --> 00:12:03,690
checking the lines are compatible and

00:12:01,500 --> 00:12:05,520
outputting a single unified file you can

00:12:03,690 --> 00:12:07,230
give put multiple constraints files on

00:12:05,520 --> 00:12:09,330
the command line you can use the

00:12:07,230 --> 00:12:10,560
includes feature that requirements files

00:12:09,330 --> 00:12:13,470
heads you can use that with constraints

00:12:10,560 --> 00:12:14,910
files as well another thing you can do

00:12:13,470 --> 00:12:16,470
those you can say look if we're why

00:12:14,910 --> 00:12:19,170
organization we're producing multiple

00:12:16,470 --> 00:12:20,310
microservices we just want one set of

00:12:19,170 --> 00:12:21,630
constraints we want to know that

00:12:20,310 --> 00:12:23,880
everybody is running the same

00:12:21,630 --> 00:12:25,170
dependencies everywhere and when we go

00:12:23,880 --> 00:12:26,310
and move something forward we want to

00:12:25,170 --> 00:12:28,500
know it works with all of our services

00:12:26,310 --> 00:12:30,570
before we roll it forward so you

00:12:28,500 --> 00:12:32,190
describe all of the dependencies across

00:12:30,570 --> 00:12:33,960
all of your projects and one big

00:12:32,190 --> 00:12:37,530
constraints file put their hand separate

00:12:33,960 --> 00:12:39,240
repo and make changes to it go through a

00:12:37,530 --> 00:12:47,010
CI process that make sure everything

00:12:39,240 --> 00:12:48,990
else can run their tests so I think you

00:12:47,010 --> 00:12:50,700
should use this all the time because I

00:12:48,990 --> 00:12:52,500
like it I think it's really actually

00:12:50,700 --> 00:12:54,300
kind of finally pulled together and out

00:12:52,500 --> 00:13:01,520
so that works and will work and hauled

00:12:54,300 --> 00:13:01,520
scenarios I can think of however a

00:13:02,120 --> 00:13:05,780
really prescriptive checklist would be

00:13:04,170 --> 00:13:09,210
to say if you've got multiple projects

00:13:05,780 --> 00:13:10,860
or you've got optional dependencies then

00:13:09,210 --> 00:13:12,150
as far as a no and the Python will

00:13:10,860 --> 00:13:14,640
constraints files are really the only

00:13:12,150 --> 00:13:16,050
answer that will address those if you

00:13:14,640 --> 00:13:18,660
don't have multiple projects and you

00:13:16,050 --> 00:13:21,210
don't have optional dependencies any one

00:13:18,660 --> 00:13:28,950
of the other ones is actually quite a

00:13:21,210 --> 00:13:31,350
reasonable alternative now all of the

00:13:28,950 --> 00:13:35,970
options i talked about before when

00:13:31,350 --> 00:13:38,130
should use them single project you know

00:13:35,970 --> 00:13:41,880
these kind of the inverses of the two

00:13:38,130 --> 00:13:43,440
things I've seen before and there's the

00:13:41,880 --> 00:13:49,490
special cases we should talk about the

00:13:43,440 --> 00:13:49,490
special cases that kind of fun but first

00:13:51,509 --> 00:14:00,189
you're not the special case unless your

00:13:56,379 --> 00:14:01,839
name is Donald or Jason these guys are

00:14:00,189 --> 00:14:04,470
the primary authors of Pippin setuptools

00:14:01,839 --> 00:14:06,670
by the way and purple set up tools and

00:14:04,470 --> 00:14:08,860
virtual image to a degree which is also

00:14:06,670 --> 00:14:12,879
maintained by Donald and the special

00:14:08,860 --> 00:14:14,230
cases and other special cases because

00:14:12,879 --> 00:14:20,319
they are the things that know how to

00:14:14,230 --> 00:14:22,420
install things if you don't vendor in

00:14:20,319 --> 00:14:23,709
that situation then it's not possible to

00:14:22,420 --> 00:14:25,120
bring in the things they needed to

00:14:23,709 --> 00:14:27,160
install the thing that installs things

00:14:25,120 --> 00:14:31,300
so you have to bundle everything

00:14:27,160 --> 00:14:33,249
together other than that no one should

00:14:31,300 --> 00:14:41,110
ever vendor anything ever and I am

00:14:33,249 --> 00:14:42,579
looking at requests caveat so I think

00:14:41,110 --> 00:14:44,199
there are things we can do that will

00:14:42,579 --> 00:14:46,540
make life better than constraints files

00:14:44,199 --> 00:14:49,439
can make it and these Cavett's kind of

00:14:46,540 --> 00:14:54,790
talk to wear those limitations are today

00:14:49,439 --> 00:14:57,579
so the first thing is pep compile pep

00:14:54,790 --> 00:14:58,929
compile is really cool it essentially

00:14:57,579 --> 00:15:02,679
does everything pip does but doesn't

00:14:58,929 --> 00:15:05,110
install stuff and it does recursive

00:15:02,679 --> 00:15:07,829
resolving to try and figure out actual

00:15:05,110 --> 00:15:10,509
versions that are needed so one of the

00:15:07,829 --> 00:15:13,660
hidden secrets of pip is that if you

00:15:10,509 --> 00:15:16,720
have a requirements file that says I

00:15:13,660 --> 00:15:18,429
need to install lxml and lxml proc and

00:15:16,720 --> 00:15:21,279
if you've got something you're

00:15:18,429 --> 00:15:24,309
installing that depends on a different

00:15:21,279 --> 00:15:25,679
version of Alex ml proc for example the

00:15:24,309 --> 00:15:27,550
version you specified in your

00:15:25,679 --> 00:15:29,559
requirements file as the version they'll

00:15:27,550 --> 00:15:32,769
get installed and the same applies to

00:15:29,559 --> 00:15:33,939
constraints files but this isn't because

00:15:32,769 --> 00:15:35,949
there's something special about

00:15:33,939 --> 00:15:37,629
requirements processing requirements

00:15:35,949 --> 00:15:39,610
file processing or constraints files

00:15:37,629 --> 00:15:41,379
processing it's that perp is incapable

00:15:39,610 --> 00:15:44,019
of reasoning about multiple versions of

00:15:41,379 --> 00:15:46,300
a single package so it's this really

00:15:44,019 --> 00:15:48,910
simple right down to the plumbing it

00:15:46,300 --> 00:15:50,589
can't do it the first time it gets told

00:15:48,910 --> 00:15:52,660
hey this package is something I might

00:15:50,589 --> 00:15:55,059
need and here are the versions I care

00:15:52,660 --> 00:15:57,009
about that at that point it figures out

00:15:55,059 --> 00:15:58,720
a version that satisfies those rules and

00:15:57,009 --> 00:16:00,060
that's the version that runs with for

00:15:58,720 --> 00:16:04,180
the rest of that command

00:16:00,060 --> 00:16:08,590
and this leads to really poor behavior

00:16:04,180 --> 00:16:10,600
when you have two projects depending on

00:16:08,590 --> 00:16:12,250
the same thing because of one of them

00:16:10,600 --> 00:16:14,800
changes their requirements in a way

00:16:12,250 --> 00:16:16,300
that's not compatible with the other one

00:16:14,800 --> 00:16:18,190
that also depends on that common element

00:16:16,300 --> 00:16:21,880
then the version of the common element

00:16:18,190 --> 00:16:24,070
that's chosen is going to break perp

00:16:21,880 --> 00:16:26,460
compiler voids that for kind of the

00:16:24,070 --> 00:16:28,390
common cases it goes away and chews on a

00:16:26,460 --> 00:16:30,850
requirements file and comes back with a

00:16:28,390 --> 00:16:33,750
set of versions nicely annotator that

00:16:30,850 --> 00:16:36,160
will work for you except when it doesn't

00:16:33,750 --> 00:16:38,800
and the reason it doesn't sometimes is

00:16:36,160 --> 00:16:41,920
that this is actually a non polynomial

00:16:38,800 --> 00:16:44,910
complete problem so it is as hard as

00:16:41,920 --> 00:16:47,380
anything we know how to solve it all

00:16:44,910 --> 00:16:49,840
there's some work going on upstream and

00:16:47,380 --> 00:16:51,220
pep to try and get a kind of optimized

00:16:49,840 --> 00:16:58,510
version of this built into pip install

00:16:51,220 --> 00:17:00,040
but today use pop compile oh I didn't

00:16:58,510 --> 00:17:04,209
mention constraints files came in and

00:17:00,040 --> 00:17:09,310
7.1 so you need to have a pep release

00:17:04,209 --> 00:17:11,740
this year to to use it and you should

00:17:09,310 --> 00:17:13,990
put put pip compile or whatever you're

00:17:11,740 --> 00:17:16,930
using to assemble your requirements and

00:17:13,990 --> 00:17:19,420
constraints files in cron you want to

00:17:16,930 --> 00:17:21,430
know when that security release of a

00:17:19,420 --> 00:17:22,930
package comes out the flipside of having

00:17:21,430 --> 00:17:24,579
everything really reliable because it's

00:17:22,930 --> 00:17:26,170
completely repeatable is that you're in

00:17:24,579 --> 00:17:28,240
stasis and nothing's changing so you've

00:17:26,170 --> 00:17:30,310
got to have some pressure on you some

00:17:28,240 --> 00:17:32,590
process and automate it Soviet it's not

00:17:30,310 --> 00:17:35,890
a manual process for finding out hate is

00:17:32,590 --> 00:17:37,360
something new and it works then you

00:17:35,890 --> 00:17:40,540
should pull it in and you start should

00:17:37,360 --> 00:17:41,800
start running with that you might say

00:17:40,540 --> 00:17:43,210
hey we should run with the oldest

00:17:41,800 --> 00:17:45,490
version we can because we're using the

00:17:43,210 --> 00:17:47,740
distro packages and as I said they're

00:17:45,490 --> 00:17:50,830
ancient and unless your ins kind of the

00:17:47,740 --> 00:17:52,060
top 10% of the package universe where

00:17:50,830 --> 00:17:54,280
you're going to get security updates

00:17:52,060 --> 00:17:56,440
it's actually more dangerous to do that

00:17:54,280 --> 00:17:58,930
than to be running off of pie pie with a

00:17:56,440 --> 00:18:01,680
vendor or authors are actually putting

00:17:58,930 --> 00:18:01,680
their releases up

00:18:01,880 --> 00:18:05,900
the ten percent is a wild ass guess I

00:18:04,340 --> 00:18:07,730
don't know the actual figures but you

00:18:05,900 --> 00:18:09,440
know there's a very steep power-law

00:18:07,730 --> 00:18:12,020
curve when you look at how many packages

00:18:09,440 --> 00:18:18,230
are in pi PI that are maintained versus

00:18:12,020 --> 00:18:21,110
the ones that are in the distress mixed

00:18:18,230 --> 00:18:23,210
Python version so what I mean here is

00:18:21,110 --> 00:18:24,980
the divide got a piece of Python

00:18:23,210 --> 00:18:30,200
software and I'm releasing it for 2.7

00:18:24,980 --> 00:18:32,870
and 3.4 and 3.5 and 3.6 the dependencies

00:18:30,200 --> 00:18:35,510
as people slowly drop support for older

00:18:32,870 --> 00:18:37,310
releases of Python may start breaking

00:18:35,510 --> 00:18:38,720
and so you have a choice you can either

00:18:37,310 --> 00:18:40,210
say well I'm not going to release for

00:18:38,720 --> 00:18:43,760
those little diversions in more either

00:18:40,210 --> 00:18:46,810
or you can say well I need a different

00:18:43,760 --> 00:18:48,800
version on Python 3.3 then on 3.4

00:18:46,810 --> 00:18:50,780
because there's a version of the

00:18:48,800 --> 00:18:53,060
dependency I've got that works on 33 and

00:18:50,780 --> 00:18:55,430
not on 34 but I want the latest version

00:18:53,060 --> 00:18:56,750
when I'm deploying in my modern 3.4

00:18:55,430 --> 00:19:00,620
environment so I want that latest

00:18:56,750 --> 00:19:02,990
version then pip four to six markers

00:19:00,620 --> 00:19:04,460
which is now good ecosystem support for

00:19:02,990 --> 00:19:06,500
will let you express that in the

00:19:04,460 --> 00:19:09,050
requirements file I didn't think to put

00:19:06,500 --> 00:19:10,460
an example in here I'm sorry but the way

00:19:09,050 --> 00:19:13,460
you'd write it in the requirements files

00:19:10,460 --> 00:19:17,390
you put a semicolon Python underscore

00:19:13,460 --> 00:19:19,930
version equals quote 2.7 quote and that

00:19:17,390 --> 00:19:25,190
would say hey this line only applies to

00:19:19,930 --> 00:19:27,170
python 2.7 so we wrote this tool in

00:19:25,190 --> 00:19:29,300
OpenStack called generate constraints

00:19:27,170 --> 00:19:30,770
which installs a requirements file into

00:19:29,300 --> 00:19:32,300
a virtual length with a particular

00:19:30,770 --> 00:19:34,250
version of Python and then it does the

00:19:32,300 --> 00:19:35,930
game with another version of python that

00:19:34,250 --> 00:19:38,060
compares the results and their versions

00:19:35,930 --> 00:19:39,440
and if they're the same it writes out a

00:19:38,060 --> 00:19:41,570
normal requirements file but where they

00:19:39,440 --> 00:19:43,040
differ that uses markers to say this

00:19:41,570 --> 00:19:46,190
applied to this one or the supply to

00:19:43,040 --> 00:19:47,990
that one and so you run it it chews it

00:19:46,190 --> 00:19:50,870
comes back you've got a requirements

00:19:47,990 --> 00:19:52,880
file that you can use to describe all of

00:19:50,870 --> 00:19:54,560
the different environments and because

00:19:52,880 --> 00:19:56,660
requirements files are constraints files

00:19:54,560 --> 00:20:00,680
are requirements files you can use that

00:19:56,660 --> 00:20:05,020
to go away and do your deployments your

00:20:00,680 --> 00:20:08,230
test deployments with constraints and

00:20:05,020 --> 00:20:10,120
loosen your dependencies so I breathe

00:20:08,230 --> 00:20:11,740
path having really tight dependencies in

00:20:10,120 --> 00:20:13,900
your set of the pie and how that works

00:20:11,740 --> 00:20:15,700
badly when you release something and it

00:20:13,900 --> 00:20:18,330
interacts with other things that have

00:20:15,700 --> 00:20:23,440
constraints now I've mentioned how

00:20:18,330 --> 00:20:24,700
primitive the pip resolvers today you

00:20:23,440 --> 00:20:27,120
can see why that's going to be a problem

00:20:24,700 --> 00:20:29,740
so make sure your dependencies are loose

00:20:27,120 --> 00:20:31,660
rule of thumb you should record the

00:20:29,740 --> 00:20:34,300
things you know I know that this version

00:20:31,660 --> 00:20:36,160
is bad for me either it's buggy or it

00:20:34,300 --> 00:20:39,460
doesn't have a below this version

00:20:36,160 --> 00:20:41,710
doesn't have features on ear and this

00:20:39,460 --> 00:20:43,660
particular version broke me temporarily

00:20:41,710 --> 00:20:46,990
and I'm going to fix it in the future

00:20:43,660 --> 00:20:48,760
but right now that versions bad don't

00:20:46,990 --> 00:20:50,290
guess that's a new version will be bad

00:20:48,760 --> 00:20:52,120
that's where you get into the problem

00:20:50,290 --> 00:20:54,610
where you start putting less than you

00:20:52,120 --> 00:20:58,590
know tight Rangers you do a release and

00:20:54,610 --> 00:20:58,590
you regret that for the next six months

00:20:58,800 --> 00:21:06,880
did i ah yes and the other final

00:21:03,460 --> 00:21:08,140
constraint caveat is that if a

00:21:06,880 --> 00:21:10,750
dependency is not listed in the

00:21:08,140 --> 00:21:12,250
constraints file its unconstrained the

00:21:10,750 --> 00:21:14,110
first reference to it from somewhere is

00:21:12,250 --> 00:21:15,850
going to go and grab the latest version

00:21:14,110 --> 00:21:19,420
or the whatever version matches that

00:21:15,850 --> 00:21:20,980
reference off of your mirror so you can

00:21:19,420 --> 00:21:23,710
potentially install any version of

00:21:20,980 --> 00:21:25,210
something in that situation so I think

00:21:23,710 --> 00:21:27,820
the best thing to do is to make sure

00:21:25,210 --> 00:21:32,080
that all of your dependencies are in the

00:21:27,820 --> 00:21:34,060
constraints file and compile out using

00:21:32,080 --> 00:21:35,800
something like generate constraints the

00:21:34,060 --> 00:21:37,410
transitive dependencies from those and

00:21:35,800 --> 00:21:39,730
then you've got everything locked down

00:21:37,410 --> 00:21:41,050
so that's the other thing I didn't

00:21:39,730 --> 00:21:43,300
really touch them before is that if you

00:21:41,050 --> 00:21:45,040
depend on X and X depends on why why is

00:21:43,300 --> 00:21:47,200
changing can still break you so you

00:21:45,040 --> 00:21:49,090
really need to pin down everything you

00:21:47,200 --> 00:21:50,650
don't need to depend directly on Y in

00:21:49,090 --> 00:21:53,820
your project but you want your

00:21:50,650 --> 00:21:53,820
constraints file to list why

00:21:56,070 --> 00:22:03,310
okay so pips got some really interesting

00:22:00,490 --> 00:22:05,320
code in it it's what's known as

00:22:03,310 --> 00:22:07,420
apostle's tar pit there's a huge set of

00:22:05,320 --> 00:22:09,430
things that packages package

00:22:07,420 --> 00:22:13,000
installations from Python have to do

00:22:09,430 --> 00:22:15,520
there's a lot of years people write in

00:22:13,000 --> 00:22:18,760
set up pies that do utterly utterly

00:22:15,520 --> 00:22:21,910
utterly crazy things and we have to be

00:22:18,760 --> 00:22:23,410
able to install any of them all people

00:22:21,910 --> 00:22:25,360
complain they said pips broken they

00:22:23,410 --> 00:22:27,520
don't say this thing that was written 15

00:22:25,360 --> 00:22:29,980
years ago and isn't Python 3.4

00:22:27,520 --> 00:22:32,560
compatible and never will be is broken

00:22:29,980 --> 00:22:34,330
they say tips broken so we've got all

00:22:32,560 --> 00:22:35,560
these corner cases we've got a bunch of

00:22:34,330 --> 00:22:37,990
legacy code and I'm going to be talking

00:22:35,560 --> 00:22:41,890
about this in some more horrific detail

00:22:37,990 --> 00:22:48,520
on Sunday first thing so please come and

00:22:41,890 --> 00:22:51,280
see that the impact that this has on

00:22:48,520 --> 00:22:54,190
rican straints is that we actually

00:22:51,280 --> 00:22:56,680
implemented constraints by injecting a

00:22:54,190 --> 00:22:59,200
requirement inside perps internals and

00:22:56,680 --> 00:23:02,080
then saying adding a flavor says we're

00:22:59,200 --> 00:23:04,270
not going to install this this isn't

00:23:02,080 --> 00:23:06,250
quite what you want what you want to say

00:23:04,270 --> 00:23:07,870
is here is a rule to a check when

00:23:06,250 --> 00:23:11,380
someone asks for a thing to be installed

00:23:07,870 --> 00:23:16,240
and it would be cleaner but you know it

00:23:11,380 --> 00:23:18,490
works I just said that so I'm not going

00:23:16,240 --> 00:23:21,040
to go over there side again so in

00:23:18,490 --> 00:23:24,460
OpenStack we had this fun problem we've

00:23:21,040 --> 00:23:28,270
got nearly 300 dependencies across all

00:23:24,460 --> 00:23:29,830
of OpenStack and if you think that each

00:23:28,270 --> 00:23:34,030
dependency probably does will release a

00:23:29,830 --> 00:23:36,340
year and there's only so many working

00:23:34,030 --> 00:23:38,530
days in the year how many mistakes does

00:23:36,340 --> 00:23:40,030
it make either on open sex part on the

00:23:38,530 --> 00:23:42,040
way we view something or an upstream

00:23:40,030 --> 00:23:44,950
when they do the release before we have

00:23:42,040 --> 00:23:48,970
a break in our see our system every

00:23:44,950 --> 00:23:51,790
single workday not not actually a very

00:23:48,970 --> 00:23:55,720
high failure rate is needed to achieve

00:23:51,790 --> 00:23:59,580
that one one mistake a year per project

00:23:55,720 --> 00:24:01,900
and we are in a hellish environment so

00:23:59,580 --> 00:24:02,980
that's what prompted building out this

00:24:01,900 --> 00:24:04,690
constraints thing in the first place

00:24:02,980 --> 00:24:08,060
because there's this project called

00:24:04,690 --> 00:24:10,100
dipstick and devstack runs pep

00:24:08,060 --> 00:24:11,840
dozens of times it runs it for every

00:24:10,100 --> 00:24:13,790
single separate library in the OpenStack

00:24:11,840 --> 00:24:15,830
ecosystem to OpenStack itself develops

00:24:13,790 --> 00:24:17,810
and it runs it for each of the OpenStack

00:24:15,830 --> 00:24:22,520
servers and it might run a few more

00:24:17,810 --> 00:24:24,260
times just in case and we were breaking

00:24:22,520 --> 00:24:26,090
left right and center we were breaking

00:24:24,260 --> 00:24:28,010
when we release things that we've tested

00:24:26,090 --> 00:24:29,630
with ourselves that we were sure worked

00:24:28,010 --> 00:24:34,400
and found out that we hadn't actually

00:24:29,630 --> 00:24:36,740
tested corner cases so if you are using

00:24:34,400 --> 00:24:38,990
devstack it's dead easy you export use

00:24:36,740 --> 00:24:40,670
constraints equals true and under the

00:24:38,990 --> 00:24:43,070
hood that checks out the right

00:24:40,670 --> 00:24:45,200
repository passes the dash C flag and

00:24:43,070 --> 00:24:47,090
the path to requirements file and the

00:24:45,200 --> 00:24:49,880
requirements file has been vetted by

00:24:47,090 --> 00:24:52,550
going through CI itself so we've made

00:24:49,880 --> 00:24:55,340
the changes to it by putting up a new

00:24:52,550 --> 00:24:58,190
version compile to generate constraints

00:24:55,340 --> 00:25:00,320
and run devstack tests against it so we

00:24:58,190 --> 00:25:02,120
know that it worked now we don't have

00:25:00,320 --> 00:25:03,860
all of the different combinations of

00:25:02,120 --> 00:25:06,080
devs that running backwards against it

00:25:03,860 --> 00:25:07,610
yet but that's something we're kind of

00:25:06,080 --> 00:25:10,190
trying to find a good balance on because

00:25:07,610 --> 00:25:13,370
some of the div tats devis step tests

00:25:10,190 --> 00:25:15,170
are flaky so we don't want to reject

00:25:13,370 --> 00:25:16,430
things that actually would work on the

00:25:15,170 --> 00:25:18,590
other hand if we don't test something

00:25:16,430 --> 00:25:23,900
and it breaks it's kind of not

00:25:18,590 --> 00:25:25,280
surprising for talks and unit tests we

00:25:23,900 --> 00:25:27,620
don't have any protection yet there's

00:25:25,280 --> 00:25:29,900
some draft patches up to user and this

00:25:27,620 --> 00:25:34,090
is actually really really clever can you

00:25:29,900 --> 00:25:38,630
guys read that is that terrible okay so

00:25:34,090 --> 00:25:40,250
you need tox 1.8 to do this but Sachi

00:25:38,630 --> 00:25:42,650
who's been doing this bit of the work

00:25:40,250 --> 00:25:46,310
has found that you can specify a custom

00:25:42,650 --> 00:25:47,810
purp install command / environment

00:25:46,310 --> 00:25:51,260
increasing a sort of an environment on

00:25:47,810 --> 00:25:55,090
the fly by doing this constraints colon

00:25:51,260 --> 00:25:57,290
but here and then pip install and

00:25:55,090 --> 00:25:58,910
there's a bunch of stuff there it's

00:25:57,290 --> 00:26:00,260
exactly the same as the normal install

00:25:58,910 --> 00:26:04,490
command that this project is going to

00:26:00,260 --> 00:26:05,840
use and then dash C and you pick up an

00:26:04,490 --> 00:26:08,750
environment variable which will let

00:26:05,840 --> 00:26:11,480
people put the requirements father using

00:26:08,750 --> 00:26:13,220
anywhere they want to and it's got

00:26:11,480 --> 00:26:15,560
default value there for the case where

00:26:13,220 --> 00:26:18,980
someone's running NCI and we've got all

00:26:15,560 --> 00:26:21,080
the bits assembled just so and you use

00:26:18,980 --> 00:26:21,860
that by going you know tox that sheep I

00:26:21,080 --> 00:26:24,260
00:26:21,860 --> 00:26:26,120
ash constraints and the dash constraints

00:26:24,260 --> 00:26:29,510
is inferred by talks to mean use this

00:26:26,120 --> 00:26:30,920
different command it's very very pithy

00:26:29,510 --> 00:26:32,330
you don't need to go through and change

00:26:30,920 --> 00:26:36,590
all of the different test environments

00:26:32,330 --> 00:26:37,580
and so on and I really like it you need

00:26:36,590 --> 00:26:39,770
to check out the constraints file

00:26:37,580 --> 00:26:41,510
separately in the CI system and

00:26:39,770 --> 00:26:42,950
OpenStack obviously we've got the glue

00:26:41,510 --> 00:26:45,230
to do that but local developers that

00:26:42,950 --> 00:26:46,400
want to use this will need to do it and

00:26:45,230 --> 00:26:48,170
the reason the local developer would

00:26:46,400 --> 00:26:49,610
want to do this is this means they're

00:26:48,170 --> 00:26:52,929
running the same stuff CI is going to

00:26:49,610 --> 00:26:52,929
run so they won't get surprises

00:26:55,860 --> 00:27:00,669
gaveston's or is everyone just going oh

00:26:59,650 --> 00:27:06,940
my god there was a talk about

00:27:00,669 --> 00:27:08,200
dependencies I want to kill myself well

00:27:06,940 --> 00:27:12,789
there's the cultural thing at the moment

00:27:08,200 --> 00:27:15,190
doesn't do you have any idea how far

00:27:12,789 --> 00:27:18,750
away keep getting proper dependency

00:27:15,190 --> 00:27:22,299
resolution is I have a working branch

00:27:18,750 --> 00:27:30,100
has there been discussion yesterday so

00:27:22,299 --> 00:27:32,140
so yeah so I have a branch there pip has

00:27:30,100 --> 00:27:33,520
a lot of legacy code there's a lot of

00:27:32,140 --> 00:27:34,809
assumptions and they're like we're only

00:27:33,520 --> 00:27:36,909
going to deal with one version of a

00:27:34,809 --> 00:27:38,440
dependency during a run at all so

00:27:36,909 --> 00:27:40,029
there's a whole bunch of code in my

00:27:38,440 --> 00:27:41,260
branch that changes there's assumption

00:27:40,029 --> 00:27:43,899
and gets rid of it and then steer that

00:27:41,260 --> 00:27:46,299
can build a case of you know Alex and

00:27:43,899 --> 00:27:48,340
I'll 1.0 XML 1.1 else and at one point

00:27:46,299 --> 00:27:49,750
two and and all of that and chicks and

00:27:48,340 --> 00:27:52,419
our lenders can use all your disk space

00:27:49,750 --> 00:27:54,130
until the world explodes then there's

00:27:52,419 --> 00:27:56,710
the second half of it which is about 15

00:27:54,130 --> 00:28:00,039
lines which is the recursive resolver so

00:27:56,710 --> 00:28:01,510
to get the patch in that big chunk

00:28:00,039 --> 00:28:03,700
actually is where most of the reviewers

00:28:01,510 --> 00:28:05,169
going to need to take place I need to

00:28:03,700 --> 00:28:06,820
update my branch and get it back up for

00:28:05,169 --> 00:28:09,130
Donald and reviewing it but he is very

00:28:06,820 --> 00:28:11,409
interested in having this there's also a

00:28:09,130 --> 00:28:13,179
UI thing which is at the moment because

00:28:11,409 --> 00:28:14,470
of the fact that there is no resolver we

00:28:13,179 --> 00:28:16,690
just take the first thing we're given

00:28:14,470 --> 00:28:18,610
when you want to override something when

00:28:16,690 --> 00:28:20,529
you as a developer or deployer know

00:28:18,610 --> 00:28:22,029
better it's very easy you just put it as

00:28:20,529 --> 00:28:23,770
the first line in your requirements or

00:28:22,029 --> 00:28:26,350
txt file that's order sensitive you've

00:28:23,770 --> 00:28:28,179
won when we have a resolver which will

00:28:26,350 --> 00:28:31,210
detect that something down in the bowels

00:28:28,179 --> 00:28:32,500
of your dependency tree actually claims

00:28:31,210 --> 00:28:34,870
to be incompatible with this thing

00:28:32,500 --> 00:28:37,059
you've chosen pip will no longer be over

00:28:34,870 --> 00:28:40,600
rideable in that fashion so we have to

00:28:37,059 --> 00:28:43,700
come up with some UI way like maybe four

00:28:40,600 --> 00:28:47,210
equal signs in a row to say

00:28:43,700 --> 00:28:50,330
I actually mean it so 3 is tight so 2

00:28:47,210 --> 00:28:51,440
means the same three means the same even

00:28:50,330 --> 00:28:53,690
if the version number is not a

00:28:51,440 --> 00:28:57,370
legitimate version number so we can't

00:28:53,690 --> 00:29:04,309
use 3 equals so 4 equals might been I

00:28:57,370 --> 00:29:05,510
choose you so look potentially like you

00:29:04,309 --> 00:29:07,399
know if I didn't have anything else to

00:29:05,510 --> 00:29:10,669
do next week if you wanted to take it

00:29:07,399 --> 00:29:17,389
over next week it's all there it's just

00:29:10,669 --> 00:29:22,220
it's so close it's frustrating is that !

00:29:17,389 --> 00:29:24,049
will be ang um look I don't know but I

00:29:22,220 --> 00:29:26,210
mean this is basically seen an email to

00:29:24,049 --> 00:29:28,340
just util surg and say I know this is

00:29:26,210 --> 00:29:30,889
coming up and this is my land claim over

00:29:28,340 --> 00:29:39,529
what it's going to be i'm thinking like

00:29:30,889 --> 00:29:44,210
less than three two towers we can use

00:29:39,529 --> 00:29:48,919
you to your fate right snowman yeah time

00:29:44,210 --> 00:29:51,970
for one more quick question no all right

00:29:48,919 --> 00:29:51,970
they can be much of it

00:30:01,860 --> 00:30:03,920

YouTube URL: https://www.youtube.com/watch?v=aZ_y_U6rZRM


