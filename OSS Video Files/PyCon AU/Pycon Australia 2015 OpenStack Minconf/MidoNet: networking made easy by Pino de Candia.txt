Title: MidoNet: networking made easy by Pino de Candia
Publication date: 2015-08-06
Playlist: Pycon Australia 2015 OpenStack Minconf
Description: 
	MidoNet is a Software Defined Networking solution that's currently integrated with OpenStack, Eucalyptus and Docker. We open sourced in November last year and we’re working hard to build a strong community around it.

This presentation will cover MidoNet's core concepts, what distinguishes it from other SDN solutions, its core design and why you would choose it for your project/business. Or not. I'll also discuss some of the cool features that we're currently working on, especially around Multi-site Federation.

You’ll be introduced to concepts like Topology Aware Switches and JIT Datapath flow computation as well as our distributed agent model. You’ll learn why we strongly believe in having intelligent switches and how this impacts the overlay topology definition as well as the Network Function Virtualization implementation.

Most importantly, we hope you'll head over to midonet.org and take it for a spin.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:10,380 --> 00:00:15,040
okay so it's time

00:00:12,550 --> 00:00:18,100
started up the next talk I'm very happy

00:00:15,040 --> 00:00:22,779
to have Tama HECO here from mid akira to

00:00:18,100 --> 00:00:28,689
talk about me to name hello I'm tomohiko

00:00:22,779 --> 00:00:31,710
so okay ladies so I today so I'm going

00:00:28,689 --> 00:00:40,239
to talk about you know basic OpenStack

00:00:31,710 --> 00:00:42,940
Newton internet talk yeah it's so so

00:00:40,239 --> 00:00:58,260
start let me ask you how many of you

00:00:42,940 --> 00:01:02,440
develop or maintain about Newton okay

00:00:58,260 --> 00:01:05,710
well it's a little bit about me so as I

00:01:02,440 --> 00:01:09,430
join me toca in two years ago so now

00:01:05,710 --> 00:01:11,320
working on like a network state database

00:01:09,430 --> 00:01:12,670
teams of developing you know

00:01:11,320 --> 00:01:17,130
communication channel between Newton

00:01:12,670 --> 00:01:20,680
plugging and to the middle agent so

00:01:17,130 --> 00:01:22,900
before that I worked at Google for five

00:01:20,680 --> 00:01:26,860
years but i was on a web search team so

00:01:22,900 --> 00:01:30,250
I did quite a career change I used to

00:01:26,860 --> 00:01:32,620
write Python to generate data for search

00:01:30,250 --> 00:01:35,830
ranking there now right you know python

00:01:32,620 --> 00:01:39,760
for the plugins anyway in my spare time

00:01:35,830 --> 00:01:42,760
I do salsa so I hope to catch some salsa

00:01:39,760 --> 00:01:49,390
tomorrow but anyway so sorry little

00:01:42,760 --> 00:01:52,320
digression so so first I can you know do

00:01:49,390 --> 00:01:54,670
a quick review on you know what never

00:01:52,320 --> 00:01:58,120
networking challenges that we face now

00:01:54,670 --> 00:02:01,080
then talk about how OpenStack a neutron

00:01:58,120 --> 00:02:04,960
source that and approaches that then

00:02:01,080 --> 00:02:07,210
opens then finally I you explain how you

00:02:04,960 --> 00:02:09,789
know Newton combined with Madonna can

00:02:07,210 --> 00:02:15,250
better approach the problem so I don't

00:02:09,789 --> 00:02:17,590
know it's so so okay so we live in the

00:02:15,250 --> 00:02:19,380
twenty-first centuries so you know more

00:02:17,590 --> 00:02:21,750
devices than ever I'll connect

00:02:19,380 --> 00:02:23,930
to networking on every kid's as tablets

00:02:21,750 --> 00:02:29,670
maybe you know 20 mostly

00:02:23,930 --> 00:02:33,360
internet-enabled hardware's and with it

00:02:29,670 --> 00:02:36,660
Internet of Things and ipv6 you know

00:02:33,360 --> 00:02:39,240
number of IP addresses are soaring as a

00:02:36,660 --> 00:02:42,560
result so you know more increasingly

00:02:39,240 --> 00:02:46,110
complex routing configurations you know

00:02:42,560 --> 00:02:48,240
well you know we most of the houses will

00:02:46,110 --> 00:02:51,780
have some smart grids and also you know

00:02:48,240 --> 00:02:54,420
kids are downloading YouTube on this but

00:02:51,780 --> 00:02:57,060
I guess we want to have a separate on

00:02:54,420 --> 00:03:00,690
routing for smart grid than the internet

00:02:57,060 --> 00:03:05,100
then you know the network that kids use

00:03:00,690 --> 00:03:08,010
for internet and stuff and more security

00:03:05,100 --> 00:03:13,320
of course we need better and more finer

00:03:08,010 --> 00:03:18,360
grain and more flexible security so what

00:03:13,320 --> 00:03:20,580
Sdn network virtualization but we want

00:03:18,360 --> 00:03:23,640
is you know that's first of all it's

00:03:20,580 --> 00:03:26,490
gotta be simple in a simple easy to use

00:03:23,640 --> 00:03:30,750
easy to operate easy to maintain you

00:03:26,490 --> 00:03:35,070
know sdn virtualization then it's gotta

00:03:30,750 --> 00:03:38,490
be scalable you know you know it's good

00:03:35,070 --> 00:03:41,100
that's sdn is in fast but you know it's

00:03:38,490 --> 00:03:45,930
gotta be scalable flexible you know

00:03:41,100 --> 00:03:49,180
dynamically last agree in you know need

00:03:45,930 --> 00:03:53,079
to cope with you know traffic's

00:03:49,180 --> 00:03:55,900
and it's gotta be four times so you know

00:03:53,079 --> 00:03:58,060
of course network is a bound to break so

00:03:55,900 --> 00:04:02,319
even if you know a couple notes may go

00:03:58,060 --> 00:04:09,090
down but we still need us the network

00:04:02,319 --> 00:04:11,920
need to function as a normal then-sen

00:04:09,090 --> 00:04:14,769
nope virtualization it's gotta be API

00:04:11,920 --> 00:04:17,739
driven so it's gotta we gotta be able to

00:04:14,769 --> 00:04:20,859
program programmatically you know define

00:04:17,739 --> 00:04:24,520
and control the behavior of network so

00:04:20,859 --> 00:04:29,590
it should provide you know clear clearly

00:04:24,520 --> 00:04:31,870
defined API and I don't want to go to

00:04:29,590 --> 00:04:36,759
each router and servers to do it in

00:04:31,870 --> 00:04:39,639
manual configurations and of course you

00:04:36,759 --> 00:04:42,039
know it's good that we have I know it's

00:04:39,639 --> 00:04:44,680
good that you know sdn on network

00:04:42,039 --> 00:04:46,780
virtualization it does smart stuff but

00:04:44,680 --> 00:04:49,270
if it's you know if we add too much

00:04:46,780 --> 00:04:51,430
overhead and slow you know nobody's

00:04:49,270 --> 00:04:54,130
going to use it I guess that's why I

00:04:51,430 --> 00:04:57,610
guess most of the data centers and Cal

00:04:54,130 --> 00:05:04,720
you know careers are still using not so

00:04:57,610 --> 00:05:07,599
eager to move on to ACN so I guess

00:05:04,720 --> 00:05:10,930
that's enough for the introduction so

00:05:07,599 --> 00:05:14,590
first let's look at how OpenStack or

00:05:10,930 --> 00:05:16,889
neutron you know salt program so i guess

00:05:14,590 --> 00:05:19,150
most of you know that OpenStack is a

00:05:16,889 --> 00:05:23,979
infrastructure as a service project and

00:05:19,150 --> 00:05:26,260
newton is one of them you know those sub

00:05:23,979 --> 00:05:29,620
for sub trucks

00:05:26,260 --> 00:05:32,980
so it provides networking services more

00:05:29,620 --> 00:05:38,170
specifically net newton provides

00:05:32,980 --> 00:05:40,600
northbound API and so it consists of

00:05:38,170 --> 00:05:42,520
northbound API and bunch of you know

00:05:40,600 --> 00:05:50,500
software-defined networking vendor

00:05:42,520 --> 00:05:52,630
clients including millions so let's look

00:05:50,500 --> 00:05:55,780
at the reference implementation that

00:05:52,630 --> 00:05:58,410
Neutron provides it consists of Newton

00:05:55,780 --> 00:06:04,150
come together with apurva switch as

00:05:58,410 --> 00:06:06,910
known as obvious so I guess there are

00:06:04,150 --> 00:06:09,100
five basic elements that whatever no

00:06:06,910 --> 00:06:11,710
matter what it is you know you know all

00:06:09,100 --> 00:06:14,290
the networking service needs to provide

00:06:11,710 --> 00:06:17,170
you know basically LTE connectivity and

00:06:14,290 --> 00:06:21,010
l3 connectivity together with routing

00:06:17,170 --> 00:06:25,080
and you know Ethne gateway stuff and

00:06:21,010 --> 00:06:28,410
floating IP or web oh it's not then

00:06:25,080 --> 00:06:32,410
security groups or security controls so

00:06:28,410 --> 00:06:35,200
because Neutron you the reference

00:06:32,410 --> 00:06:37,480
implementation uses obvious obvious you

00:06:35,200 --> 00:06:40,600
know naturally provides the LTE

00:06:37,480 --> 00:06:43,300
connectivity so you know we compute

00:06:40,600 --> 00:06:46,660
whatever you know whatever necessary and

00:06:43,300 --> 00:06:51,220
you know compute data paths and flows

00:06:46,660 --> 00:06:54,060
and we install it and obvious in a

00:06:51,220 --> 00:06:54,060
condom and

00:06:55,500 --> 00:07:02,040
so it does the the basic LTE

00:06:59,760 --> 00:07:04,440
connectivity stuff for the LTE

00:07:02,040 --> 00:07:08,450
connectivity so we use native they use

00:07:04,440 --> 00:07:11,280
namespace together with line uxbridge

00:07:08,450 --> 00:07:14,400
and why we need the next bridge because

00:07:11,280 --> 00:07:19,710
you know nutone security is based on

00:07:14,400 --> 00:07:21,870
like IP addresses so but obvious doesn't

00:07:19,710 --> 00:07:24,210
natively integrate with iptables so

00:07:21,870 --> 00:07:27,750
that's why we need a name space together

00:07:24,210 --> 00:07:31,320
with you know the Knox bridge and also

00:07:27,750 --> 00:07:36,930
them so that's the left hand side right

00:07:31,320 --> 00:07:38,910
hand side the network node so so you

00:07:36,930 --> 00:07:43,620
know so all the rest of the linode

00:07:38,910 --> 00:07:47,310
routing like all security controls and s

00:07:43,620 --> 00:07:51,090
not gateway staff if we you know is

00:07:47,310 --> 00:07:58,980
taken care by the those network nodes so

00:07:51,090 --> 00:08:01,500
what good the advantages of reference

00:07:58,980 --> 00:08:03,630
implementations is that you know first

00:08:01,500 --> 00:08:07,770
of all it's all open source you know

00:08:03,630 --> 00:08:09,419
obvious next bridge namespaces you know

00:08:07,770 --> 00:08:12,780
those are you know commonly available

00:08:09,419 --> 00:08:15,240
you know you know you know everyday

00:08:12,780 --> 00:08:19,200
tools that all the UNIX developers use

00:08:15,240 --> 00:08:22,310
so everybody loves linux so it's good

00:08:19,200 --> 00:08:27,050
but at the same time

00:08:22,310 --> 00:08:30,740
so the challenge is that this you know

00:08:27,050 --> 00:08:33,080
basic reference frame implementation

00:08:30,740 --> 00:08:35,840
apologies is that you know debate first

00:08:33,080 --> 00:08:39,410
of all like all the traffic needs to go

00:08:35,840 --> 00:08:44,720
through that you know central network

00:08:39,410 --> 00:08:48,020
node so that because that so its uses a

00:08:44,720 --> 00:08:50,390
centralized control model so and order

00:08:48,020 --> 00:08:54,470
you know every routing is done at the

00:08:50,390 --> 00:08:56,510
network node so and that central network

00:08:54,470 --> 00:09:00,230
not naturally becomes a traffic

00:08:56,510 --> 00:09:02,710
bottlenecks so as a result you know it's

00:09:00,230 --> 00:09:05,930
accessible to traffic you know trombone

00:09:02,710 --> 00:09:09,020
meaning that you know the same different

00:09:05,930 --> 00:09:12,440
VMs so when EMS communicate to each

00:09:09,020 --> 00:09:14,900
other you know even if they are hanging

00:09:12,440 --> 00:09:17,030
down the same bridge you know the

00:09:14,900 --> 00:09:20,420
packets will still need to go up to the

00:09:17,030 --> 00:09:23,090
innocent drone network node so just to

00:09:20,420 --> 00:09:27,350
get you know sent back to the same

00:09:23,090 --> 00:09:28,730
break-ins and to the packet p.m. so that

00:09:27,350 --> 00:09:31,880
means like in a single point of failure

00:09:28,730 --> 00:09:33,110
so so this net central network node

00:09:31,880 --> 00:09:35,960
becomes a you know single point of

00:09:33,110 --> 00:09:39,710
failure then of course the Newton

00:09:35,960 --> 00:09:43,480
provides a solution but for that we need

00:09:39,710 --> 00:09:47,030
a virtual routing redundancy protocol so

00:09:43,480 --> 00:09:49,040
wishing with they think that the basic

00:09:47,030 --> 00:09:52,670
you know implementation is already

00:09:49,040 --> 00:09:55,250
complex and big hockey and adding brrt

00:09:52,670 --> 00:09:56,690
on top of that is kind of you know I

00:09:55,250 --> 00:10:00,680
just adding complexity

00:09:56,690 --> 00:10:05,210
and of course Newton provides solution

00:10:00,680 --> 00:10:11,870
to this which is you know distributed

00:10:05,210 --> 00:10:14,780
virtual router proposal so so now with

00:10:11,870 --> 00:10:17,600
this model that you know routing is

00:10:14,780 --> 00:10:22,130
pushed down to the compute node but

00:10:17,600 --> 00:10:25,730
again there's still a problem because s

00:10:22,130 --> 00:10:26,990
not is not implemented with DVR yet I

00:10:25,730 --> 00:10:29,170
think I'm sure it's going to be

00:10:26,990 --> 00:10:31,850
implemented but we are three possible

00:10:29,170 --> 00:10:34,760
discussing how to do that correctly and

00:10:31,850 --> 00:10:39,170
because of that you know we still it

00:10:34,760 --> 00:10:43,730
still requires center network nervous so

00:10:39,170 --> 00:10:46,670
I don't know although people miracle

00:10:43,730 --> 00:10:51,410
think that it's been still big hockey

00:10:46,670 --> 00:10:57,079
and kind of hot scale so I think

00:10:51,410 --> 00:11:00,709
set this let's take a look how meet an

00:10:57,079 --> 00:11:06,290
end together with OpenStack approaches

00:11:00,709 --> 00:11:08,300
the program so middle net us is so one

00:11:06,290 --> 00:11:11,720
of the open-source 10 Newton plugging

00:11:08,300 --> 00:11:14,269
and it is important we open sourced

00:11:11,720 --> 00:11:17,089
middle net and its source code in last

00:11:14,269 --> 00:11:19,310
year in November 2014 Lindsay it's

00:11:17,089 --> 00:11:23,180
important that I repeat so we open

00:11:19,310 --> 00:11:25,220
sourced it so that thank you because

00:11:23,180 --> 00:11:33,740
still nobody are not nobody but many of

00:11:25,220 --> 00:11:37,329
many people don't know that song so Mira

00:11:33,740 --> 00:11:41,060
net is a you know network virtualization

00:11:37,329 --> 00:11:43,759
overlain solution so Adam it's hard to

00:11:41,060 --> 00:11:47,360
see but so what do you mean by network

00:11:43,759 --> 00:11:50,899
of all a so-so below is a physical

00:11:47,360 --> 00:11:54,139
Network so you know to the internet

00:11:50,899 --> 00:11:57,889
private IP network connected to the

00:11:54,139 --> 00:12:00,769
three you know a bunch of you know host

00:11:57,889 --> 00:12:03,380
and you know the end on top of it so

00:12:00,769 --> 00:12:06,350
these are the naturally the gateway nose

00:12:03,380 --> 00:12:08,329
and connected to the internet with you

00:12:06,350 --> 00:12:12,069
know multiple up links so these are

00:12:08,329 --> 00:12:15,649
physical world the on top that it builds

00:12:12,069 --> 00:12:18,410
virtual network as an abstract layer of

00:12:15,649 --> 00:12:22,399
logical topology or logical networks so

00:12:18,410 --> 00:12:27,199
basically so those uplinks uplink ports

00:12:22,399 --> 00:12:29,840
on map to virtual port to this abstract

00:12:27,199 --> 00:12:34,010
provider virtual router

00:12:29,840 --> 00:12:37,190
and below that you know so we sort of

00:12:34,010 --> 00:12:39,140
logically create tenon rudder under

00:12:37,190 --> 00:12:43,610
which you know we can have multiple more

00:12:39,140 --> 00:12:45,680
routers mean hanging down each week each

00:12:43,610 --> 00:12:50,380
of those make respond to some department

00:12:45,680 --> 00:12:55,310
or whatever logical unit then to those

00:12:50,380 --> 00:12:58,280
virtual router so we assign the network

00:12:55,310 --> 00:13:03,250
and virtual port and those poor are

00:12:58,280 --> 00:13:10,220
mapped on to vm hosted on some machines

00:13:03,250 --> 00:13:12,320
anyways so basically you know in the

00:13:10,220 --> 00:13:15,320
physical world it might be just a simple

00:13:12,320 --> 00:13:18,380
leaf on spying in a typical data tintern

00:13:15,320 --> 00:13:22,310
layout and we don't really care on top

00:13:18,380 --> 00:13:26,000
that you know middle net allows to build

00:13:22,310 --> 00:13:29,330
virtual layout so basically you know

00:13:26,000 --> 00:13:32,590
just simply internet and some provider

00:13:29,330 --> 00:13:36,410
network and some logical channel

00:13:32,590 --> 00:13:38,900
relatives and networks so it's so could

00:13:36,410 --> 00:13:40,610
the clear separation between so it

00:13:38,900 --> 00:13:45,830
allows clear separation between physical

00:13:40,610 --> 00:13:48,200
and logical words so so what's important

00:13:45,830 --> 00:13:54,620
here is that we separate virtual war

00:13:48,200 --> 00:13:57,020
from physical role oh this this picture

00:13:54,620 --> 00:13:59,390
you know kind of scares me because you

00:13:57,020 --> 00:14:01,550
know now people go Wi-Fi but still

00:13:59,390 --> 00:14:09,020
machines of course in the data center

00:14:01,550 --> 00:14:11,360
the connected by cables and so ideally I

00:14:09,020 --> 00:14:13,910
mean because of this separation of

00:14:11,360 --> 00:14:16,280
fiscal from the virtual world you know

00:14:13,910 --> 00:14:19,330
virtual network changes don't require of

00:14:16,280 --> 00:14:22,970
course the changes in you know cable

00:14:19,330 --> 00:14:26,970
connection between physical Network

00:14:22,970 --> 00:14:29,400
and because of that you know if it's God

00:14:26,970 --> 00:14:33,480
networks also can get simpler you know

00:14:29,400 --> 00:14:41,820
the leaf on spying l 3 plus B CMPD the

00:14:33,480 --> 00:14:43,920
good design and color to that is well so

00:14:41,820 --> 00:14:45,720
you know we can you cheap white box hard

00:14:43,920 --> 00:14:48,900
words for you know relatives and stuff

00:14:45,720 --> 00:14:51,960
you know doesn't have to be open for

00:14:48,900 --> 00:14:55,260
enabled or Eugenie's commodity servers

00:14:51,960 --> 00:14:58,770
and the karate to that is you know

00:14:55,260 --> 00:15:04,410
virtual network also can become flexible

00:14:58,770 --> 00:15:06,540
and bit more easier so that a feature of

00:15:04,410 --> 00:15:09,480
the mint Annette is that it's highly

00:15:06,540 --> 00:15:16,560
distributed so we don't require no

00:15:09,480 --> 00:15:21,750
central controls so we do processing at

00:15:16,560 --> 00:15:24,540
the edge so everything is because if we

00:15:21,750 --> 00:15:27,720
don't do you know processing attached so

00:15:24,540 --> 00:15:29,700
that means that the packets we need to

00:15:27,720 --> 00:15:32,130
send packets Midway's to like some

00:15:29,700 --> 00:15:35,220
service nodes such as like for middle

00:15:32,130 --> 00:15:37,590
earth to do to providers such as like

00:15:35,220 --> 00:15:43,580
you know floating IP or you know

00:15:37,590 --> 00:15:46,370
security operations or not and stuff

00:15:43,580 --> 00:15:48,440
by the way it's a picture of Bandar

00:15:46,370 --> 00:15:51,020
quick it's supposed to be somewhere in

00:15:48,440 --> 00:15:53,960
Australia it looks like a end of the

00:15:51,020 --> 00:15:56,710
world so anyway I wish I could go do

00:15:53,960 --> 00:15:58,880
something but anyway so because we do

00:15:56,710 --> 00:16:01,670
processing at the edge there's no and

00:15:58,880 --> 00:16:04,640
because we don't require any no central

00:16:01,670 --> 00:16:09,830
controller no single point of failure

00:16:04,640 --> 00:16:13,460
and because of that so it's more fault

00:16:09,830 --> 00:16:19,160
tolerant and I guess I quickly go over

00:16:13,460 --> 00:16:23,120
how we handle packets in distributed

00:16:19,160 --> 00:16:26,660
manner so so there is a state

00:16:23,120 --> 00:16:28,610
information for network and two types of

00:16:26,660 --> 00:16:31,010
network you know state one is you know

00:16:28,610 --> 00:16:33,230
more static information is like virtual

00:16:31,010 --> 00:16:34,400
topology information how many rattles

00:16:33,230 --> 00:16:38,300
how many bridges how they are connected

00:16:34,400 --> 00:16:41,960
you know on which page which vm is

00:16:38,300 --> 00:16:44,780
connected and how which port corresponds

00:16:41,960 --> 00:16:47,600
that back and stuff and also dynamic

00:16:44,780 --> 00:16:49,760
state information you know up table

00:16:47,600 --> 00:16:53,030
entries marking trees mark IV mapping

00:16:49,760 --> 00:16:55,250
and some routes like including bgp

00:16:53,030 --> 00:16:59,690
routes and those in a static dynamic

00:16:55,250 --> 00:17:02,200
information those are stored in networks

00:16:59,690 --> 00:17:05,810
database right now we use the keeper and

00:17:02,200 --> 00:17:07,730
because of that you know this network

00:17:05,810 --> 00:17:11,439
state database is not a single point of

00:17:07,730 --> 00:17:13,870
failure it can you know just

00:17:11,439 --> 00:17:17,139
it also can be distributed and enfold

00:17:13,870 --> 00:17:24,029
trend by adding more you know zookeeper

00:17:17,139 --> 00:17:28,870
instances and those information is

00:17:24,029 --> 00:17:34,509
asynchronously and on-demand sent to our

00:17:28,870 --> 00:17:38,100
agent that lives on each host host

00:17:34,509 --> 00:17:42,009
machines and for that communication we

00:17:38,100 --> 00:17:45,039
recently used began using reactive

00:17:42,009 --> 00:17:47,889
framework so these are passed as a kind

00:17:45,039 --> 00:17:51,490
of observable of a pretty job subbable

00:17:47,889 --> 00:17:54,100
ports and stuff agent receives all the

00:17:51,490 --> 00:18:00,690
information is synchronously and build

00:17:54,100 --> 00:18:04,360
back up the model or bridging stuff so

00:18:00,690 --> 00:18:07,120
then all the simulation is done locally

00:18:04,360 --> 00:18:09,070
so we don't make any you know blocking

00:18:07,120 --> 00:18:12,820
calls to the central network state

00:18:09,070 --> 00:18:16,450
database node so all the simulation is

00:18:12,820 --> 00:18:19,240
done locally and because the all the

00:18:16,450 --> 00:18:23,190
state information such as bridges and

00:18:19,240 --> 00:18:25,600
also up tables of cached locally and

00:18:23,190 --> 00:18:26,769
because that we don't have in a package

00:18:25,600 --> 00:18:29,169
don't need to go through that in a

00:18:26,769 --> 00:18:32,289
central traffic network node in no

00:18:29,169 --> 00:18:35,529
traffic trombone and of course the all

00:18:32,289 --> 00:18:39,389
the information is you know they're you

00:18:35,529 --> 00:18:39,389
know computations fast

00:18:41,260 --> 00:18:47,320
so don't know how much time I have but

00:18:48,250 --> 00:18:57,590
ok so well quickly I go through so you

00:18:52,700 --> 00:18:59,870
know sent oh I know sorry so network

00:18:57,590 --> 00:19:02,720
state database teens you know state

00:18:59,870 --> 00:19:05,390
information that's propagated to the

00:19:02,720 --> 00:19:11,750
agent that live on the edge on a horse

00:19:05,390 --> 00:19:14,539
machine so so BMC will be M stands first

00:19:11,750 --> 00:19:18,620
packets you know if you look up the

00:19:14,539 --> 00:19:20,480
linux kernel and if the database is past

00:19:18,620 --> 00:19:24,650
is there you know there's no need to

00:19:20,480 --> 00:19:30,470
anything but if it doesn't then did the

00:19:24,650 --> 00:19:33,950
net lead go to the mid net and so then

00:19:30,470 --> 00:19:36,230
agent locally processes packets and do

00:19:33,950 --> 00:19:42,530
some simulations install water flows

00:19:36,230 --> 00:19:45,230
through the data path and seals for the

00:19:42,530 --> 00:19:49,490
yeah i think i forgot to mention but so

00:19:45,230 --> 00:19:51,640
and so after the you know simulation is

00:19:49,490 --> 00:19:55,940
done do we create the tunnel between the

00:19:51,640 --> 00:19:58,280
source to source and target and so

00:19:55,940 --> 00:20:01,010
packets are tunnels through to the pier

00:19:58,280 --> 00:20:07,900
host you know too that tunnel and you

00:20:01,010 --> 00:20:17,440
know d 2 d kappa grip

00:20:07,900 --> 00:20:19,800
so for me anyway so top immediate agent

00:20:17,440 --> 00:20:22,510
on a target horse maps cannot you to the

00:20:19,800 --> 00:20:28,360
kind of data passport and install

00:20:22,510 --> 00:20:30,250
sportful then the subsequent packets

00:20:28,360 --> 00:20:34,590
don't need to do don't need any

00:20:30,250 --> 00:20:40,360
simulation it just sent via tunnels and

00:20:34,590 --> 00:20:42,130
no no overhead is it me the net adds a

00:20:40,360 --> 00:20:46,900
small amount of overhead for the first

00:20:42,130 --> 00:20:48,640
packet that that's it and still a snot

00:20:46,900 --> 00:20:50,740
then security good require some

00:20:48,640 --> 00:20:52,510
connection tracking because you know

00:20:50,740 --> 00:20:55,750
they'll be done packets may not come

00:20:52,510 --> 00:20:57,990
through the same gateways but boy those

00:20:55,750 --> 00:21:04,600
state information we used to use

00:20:57,990 --> 00:21:06,580
Cassandra but we add that that a data

00:21:04,600 --> 00:21:09,310
blocking call then that add some vino

00:21:06,580 --> 00:21:13,330
overhead so we ditched that model and

00:21:09,310 --> 00:21:16,030
now agent you know passage those date

00:21:13,330 --> 00:21:19,030
information for a snapped and security

00:21:16,030 --> 00:21:20,860
group by RBC between you know so it's a

00:21:19,030 --> 00:21:23,730
no peer to peer communication basically

00:21:20,860 --> 00:21:23,730
so

00:21:23,950 --> 00:21:29,380
because of this yeah there's no blocking

00:21:27,549 --> 00:21:32,549
close to like it zookeeper and or

00:21:29,380 --> 00:21:37,090
whatever so everything is down locally

00:21:32,549 --> 00:21:40,380
so guess I gotta wrap up so summary you

00:21:37,090 --> 00:21:45,429
know I guess because of this you know

00:21:40,380 --> 00:21:48,220
using the overlay approach allows us to

00:21:45,429 --> 00:21:50,380
separate in physical world virtual so I

00:21:48,220 --> 00:21:53,529
guess that simplifies a lot and I guess

00:21:50,380 --> 00:21:57,940
virtual nib overlays I think it's easier

00:21:53,529 --> 00:21:59,470
to debug and also maintained then it's

00:21:57,940 --> 00:22:03,460
scalable because no single point of

00:21:59,470 --> 00:22:05,529
failure scale out if we can easily scale

00:22:03,460 --> 00:22:10,690
out by adding more servers and hardware

00:22:05,529 --> 00:22:14,350
and stuff then its fourth planet so you

00:22:10,690 --> 00:22:17,440
know if one aging Gowda goes down yeah

00:22:14,350 --> 00:22:19,450
that machine will go down but then the

00:22:17,440 --> 00:22:21,899
in the network will not go down so

00:22:19,450 --> 00:22:26,380
there's no single point of failures and

00:22:21,899 --> 00:22:28,029
the president even if a node goes on the

00:22:26,380 --> 00:22:33,220
rest of the network still function

00:22:28,029 --> 00:22:35,830
normally and fast packet processing we

00:22:33,220 --> 00:22:38,139
did we came a long way about this so

00:22:35,830 --> 00:22:43,330
guess midnight agent used to add a lot

00:22:38,139 --> 00:22:45,880
of overhead but then we did we cast or

00:22:43,330 --> 00:22:50,320
no the data locally and we ditched

00:22:45,880 --> 00:22:53,549
Cassandra and doing our pcs and so now

00:22:50,320 --> 00:22:55,929
the overhead the middle agent else for

00:22:53,549 --> 00:22:59,679
you know processing packet this is a

00:22:55,929 --> 00:23:02,470
very small so it allows in unlike

00:22:59,679 --> 00:23:06,850
central you know control node model we

00:23:02,470 --> 00:23:09,250
don't need any you know you don't cry

00:23:06,850 --> 00:23:14,590
you know communication with the central

00:23:09,250 --> 00:23:18,370
node so it's pretty fast about packet

00:23:14,590 --> 00:23:23,100
processing so I guess that's it so thank

00:23:18,370 --> 00:23:23,100
you any questions yes

00:23:25,369 --> 00:23:32,729
to get a sort of east-west traffic do

00:23:30,119 --> 00:23:35,579
you need to use open V switch for that

00:23:32,729 --> 00:23:40,679
or can it be encapsulated by sort of VX

00:23:35,579 --> 00:23:46,399
Lena something else so we have we also

00:23:40,679 --> 00:23:52,259
have integrated with a V tip so so yeah

00:23:46,399 --> 00:23:54,829
we can the bx on and GRE tunnels can be

00:23:52,259 --> 00:23:54,829
used

00:24:02,970 --> 00:24:07,720
so you mentioned you used zookeeper

00:24:06,340 --> 00:24:13,090
right like what the purpose of see

00:24:07,720 --> 00:24:15,100
zookeeper there I know that's okay the

00:24:13,090 --> 00:24:18,340
question is why and for what we use to

00:24:15,100 --> 00:24:22,120
keeper I guess the keeper is usually

00:24:18,340 --> 00:24:24,730
used for consensus but we use it for

00:24:22,120 --> 00:24:27,640
well first of all storing virtual

00:24:24,730 --> 00:24:30,190
topology information and also the app

00:24:27,640 --> 00:24:32,289
table entries and stuff and why we want

00:24:30,190 --> 00:24:35,820
it to use zookeeper because it provides

00:24:32,289 --> 00:24:38,500
a water mechanism so suppose it's a

00:24:35,820 --> 00:24:41,830
virtual topology layout is stored in the

00:24:38,500 --> 00:24:45,909
zookeeper I suppose port is added to the

00:24:41,830 --> 00:24:49,150
bridge then that you know we so agent

00:24:45,909 --> 00:24:53,409
first subscribe for the information for

00:24:49,150 --> 00:24:55,480
bridge for that is we install water so

00:24:53,409 --> 00:24:58,299
zookeeper provided water mechanism then

00:24:55,480 --> 00:25:01,059
whenever the update to the Reno topology

00:24:58,299 --> 00:25:05,020
then zookeeper notified their water

00:25:01,059 --> 00:25:10,049
mechanism to subscribing agent so those

00:25:05,020 --> 00:25:14,370
subs updates ascent over RX java as a

00:25:10,049 --> 00:25:18,150
suburb or so and those are you know sent

00:25:14,370 --> 00:25:19,940
asynchronously and build back up into

00:25:18,150 --> 00:25:25,169
you know

00:25:19,940 --> 00:25:28,380
agent side view of bridging after the

00:25:25,169 --> 00:25:29,880
cross to some extent similarly do you

00:25:28,380 --> 00:25:39,020
have integration with the Apache

00:25:29,880 --> 00:25:39,020
CloudStack Apache CloudStack I used to

00:25:43,730 --> 00:25:47,450
there any other questions

00:25:49,240 --> 00:25:53,500
thank you very much thank you

00:25:58,240 --> 00:26:00,300

YouTube URL: https://www.youtube.com/watch?v=YienqSky-c0


