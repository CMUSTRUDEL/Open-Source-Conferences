Title: The Future of Identity (Keystone) in OpenStack by Morgan Fainberg
Publication date: 2015-08-06
Playlist: Pycon Australia 2015 OpenStack Minconf
Description: 
	Since the Essex release, the OpenStack Identity Project (Keystone) has seen significant numbers of improvements. Some of these improvement include the addition of the V3 API, PKI Tokens, Trusts, Federated Identity, Non-Persistent Tokens, etc.

This talk will discuss the most recent developments for Keystone and what is being planned for Identity during Liberty and beyond.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:09,660 --> 00:00:15,800
all right well hi welcome back

00:00:12,240 --> 00:00:18,200
i I'm Morgan van Berg

00:00:15,800 --> 00:00:20,360
stone and I won't be talking about

00:00:18,200 --> 00:00:22,790
Shakespeare in this one I mean if you

00:00:20,360 --> 00:00:25,060
saw Monty I definitely do not want to

00:00:22,790 --> 00:00:27,020
talk about Shakespeare here so sorry

00:00:25,060 --> 00:00:30,800
yeah we're not doing Shakespeare this

00:00:27,020 --> 00:00:33,110
time around anyway so I'm gonna try and

00:00:30,800 --> 00:00:34,850
cover some of the just general future

00:00:33,110 --> 00:00:37,550
looking things within Keystone where

00:00:34,850 --> 00:00:41,540
we're going that type of stuff at any

00:00:37,550 --> 00:00:45,410
point feel free to ask aio ask questions

00:00:41,540 --> 00:00:46,940
I'm happy to answer them but you know

00:00:45,410 --> 00:00:49,129
what where are we going what's the

00:00:46,940 --> 00:00:53,090
future direction well like I said it's

00:00:49,129 --> 00:00:54,559
definitely not Shakespeare but it is but

00:00:53,090 --> 00:00:56,120
we're really looking at especially in

00:00:54,559 --> 00:00:58,190
this site focusing on mostly technical

00:00:56,120 --> 00:01:01,070
debt paydown making it easier for

00:00:58,190 --> 00:01:02,780
everybody to consume open sac

00:01:01,070 --> 00:01:05,170
specifically through identity whether

00:01:02,780 --> 00:01:08,060
that's through you know Federation

00:01:05,170 --> 00:01:10,430
getting all the getting getting the tool

00:01:08,060 --> 00:01:12,680
chains a little bit a little bit cinched

00:01:10,430 --> 00:01:15,260
up so you have better access through the

00:01:12,680 --> 00:01:16,880
CLI clients more protocol so it's not

00:01:15,260 --> 00:01:19,220
just sam'l to I know everybody must

00:01:16,880 --> 00:01:23,990
absolutely love salmon and the XML base

00:01:19,220 --> 00:01:26,750
yeah I see that nice nice nobody has

00:01:23,990 --> 00:01:29,510
come to me and said well I mean nobody

00:01:26,750 --> 00:01:31,660
ever has said can i use you know

00:01:29,510 --> 00:01:34,400
something else well now I take it back

00:01:31,660 --> 00:01:35,990
but we'll have open ID connect really

00:01:34,400 --> 00:01:38,360
well we're really well supported it's

00:01:35,990 --> 00:01:40,160
currently supported but we get that

00:01:38,360 --> 00:01:42,050
short up we'll probably be looking at a

00:01:40,160 --> 00:01:44,180
few of the other technologies so you

00:01:42,050 --> 00:01:46,010
have a little bit more little smoother

00:01:44,180 --> 00:01:48,770
transition from web SSO especially with

00:01:46,010 --> 00:01:50,810
browser through horizon get Kerberos

00:01:48,770 --> 00:01:53,480
short up I know there's lots and lots of

00:01:50,810 --> 00:01:55,070
people who want Kerberos solidly working

00:01:53,480 --> 00:01:57,110
but they're not going to tell you that

00:01:55,070 --> 00:01:58,790
because it usually requires that they've

00:01:57,110 --> 00:02:01,250
usually talking about using a Windows

00:01:58,790 --> 00:02:04,970
environment there clean up clean up and

00:02:01,250 --> 00:02:11,140
focus on both a DFS and then directive

00:02:04,970 --> 00:02:11,140
app access yeah what's question

00:02:17,180 --> 00:02:25,140
it's not working which I don't hear that

00:02:22,680 --> 00:02:26,790
works so when you talk about the

00:02:25,140 --> 00:02:30,360
Federation yeah things like open ID

00:02:26,790 --> 00:02:32,040
connected gasp things I would imagine

00:02:30,360 --> 00:02:36,150
there's two sides of that one would be

00:02:32,040 --> 00:02:38,640
as a I use open ID connect to connect to

00:02:36,150 --> 00:02:42,120
Keystone and then there's the Keystone

00:02:38,640 --> 00:02:44,640
wants to to authenticate to a source of

00:02:42,120 --> 00:02:49,220
the backside which witch is which or

00:02:44,640 --> 00:02:49,220
which of those is that where the both or

00:02:50,870 --> 00:02:56,670
this is means for Keystone to have a

00:02:53,280 --> 00:02:58,740
connect so the question is what does it

00:02:56,670 --> 00:03:01,080
mean to be using open ID connect or or

00:02:58,740 --> 00:03:04,100
any of the sso technologies out there

00:03:01,080 --> 00:03:06,780
well whether its back-end Keystone

00:03:04,100 --> 00:03:09,000
talking to something else or whether

00:03:06,780 --> 00:03:11,760
it's the client doing the little dance

00:03:09,000 --> 00:03:13,590
to get a saml token to redirect the

00:03:11,760 --> 00:03:14,880
whole redirect magic that happens in

00:03:13,590 --> 00:03:16,350
there and really when we're talking

00:03:14,880 --> 00:03:19,260
about Federation Keystone we're talking

00:03:16,350 --> 00:03:22,470
about the identity federation focus and

00:03:19,260 --> 00:03:23,959
focusing on the user to service user to

00:03:22,470 --> 00:03:26,310
Keystone for authentication purposes

00:03:23,959 --> 00:03:29,330
we're not talking about how does

00:03:26,310 --> 00:03:33,570
Keystone talk to your Active Directory

00:03:29,330 --> 00:03:36,350
back end via a DFS to do magical other

00:03:33,570 --> 00:03:40,140
things it's really about the user to the

00:03:36,350 --> 00:03:42,900
22 to Keystone to get the token rather

00:03:40,140 --> 00:03:45,390
than then you know all the stuff in the

00:03:42,900 --> 00:03:47,489
background we are looking at also

00:03:45,390 --> 00:03:50,940
supporting the concept of using x509

00:03:47,489 --> 00:03:53,670
client certs directly and long long term

00:03:50,940 --> 00:03:55,230
way in the future hopefully getting rid

00:03:53,670 --> 00:03:57,299
of bearer tokens altogether I mean

00:03:55,230 --> 00:04:00,150
hopefully there's a resounding cheer

00:03:57,299 --> 00:04:02,730
somewhere in the world for that because

00:04:00,150 --> 00:04:05,130
we all love bearer tokens they're great

00:04:02,730 --> 00:04:06,690
no security problems whatsoever there at

00:04:05,130 --> 00:04:09,510
least they're known they're known

00:04:06,690 --> 00:04:12,000
quantity with x509 you'll be able to

00:04:09,510 --> 00:04:13,980
your client certs will be Liberty cycle

00:04:12,000 --> 00:04:15,480
you'll definitely be able to work

00:04:13,980 --> 00:04:18,239
directly with Keystone without having to

00:04:15,480 --> 00:04:20,609
get a token first this is great I'm sure

00:04:18,239 --> 00:04:22,109
will love it as well as anything you do

00:04:20,609 --> 00:04:24,540
with the credit interfaces as well as

00:04:22,109 --> 00:04:26,400
being able to get a token to

00:04:24,540 --> 00:04:29,010
with the client cert as well so you'll

00:04:26,400 --> 00:04:32,970
be able to do both direct Keystone crud

00:04:29,010 --> 00:04:36,450
actions and get a token to talk to nova

00:04:32,970 --> 00:04:38,310
or Sydnor etc and all that is going to

00:04:36,450 --> 00:04:40,980
be based around the technology that was

00:04:38,310 --> 00:04:42,240
driven and was written for our current

00:04:40,980 --> 00:04:44,550
Federation stuff the stuff you saw on

00:04:42,240 --> 00:04:47,730
stage and Vancouver the stuff that

00:04:44,550 --> 00:04:49,680
certain uses to make sure that tons and

00:04:47,730 --> 00:04:51,390
tons of tons and tons of institutions

00:04:49,680 --> 00:04:54,660
can all access the data and work them in

00:04:51,390 --> 00:04:57,180
right so I'm the topic there well what

00:04:54,660 --> 00:04:59,130
do we do until we can get rid of bearer

00:04:57,180 --> 00:05:02,100
tokens but we have fernet tokens

00:04:59,130 --> 00:05:03,270
Burnett's pretty new besides being named

00:05:02,100 --> 00:05:06,840
after in my opinion absolutely

00:05:03,270 --> 00:05:08,190
disgusting alcohol and if you haven't

00:05:06,840 --> 00:05:09,300
tried it you should totally showed what

00:05:08,190 --> 00:05:14,340
you may need to set your mouth on fire

00:05:09,300 --> 00:05:16,350
afterwards but fernet tokens are taking

00:05:14,340 --> 00:05:19,590
the best pieces of pki tokens and you

00:05:16,350 --> 00:05:22,620
you a uuid tokens we learned a lot

00:05:19,590 --> 00:05:24,030
moving from moving away from you you ID

00:05:22,620 --> 00:05:25,950
token speak add tokens if you're not

00:05:24,030 --> 00:05:27,510
familiar with it what what happens here

00:05:25,950 --> 00:05:29,130
Keystone you get a token this token

00:05:27,510 --> 00:05:31,740
provides your authorization talking to

00:05:29,130 --> 00:05:38,550
anything else in OpenStack and sometimes

00:05:31,740 --> 00:05:40,470
Swift it's true it's only sometimes with

00:05:38,550 --> 00:05:42,090
don't get me wrong I really do like the

00:05:40,470 --> 00:05:47,130
Swift guys there they produce something

00:05:42,090 --> 00:05:48,540
good anyway the these tokens have had

00:05:47,130 --> 00:05:51,240
three or four different formats at this

00:05:48,540 --> 00:05:54,680
point uuid it was an opaque spring 32

00:05:51,240 --> 00:05:57,750
bytes you hand that you hand that off to

00:05:54,680 --> 00:06:00,120
Nova Nova then we'll talk to Keystone

00:05:57,750 --> 00:06:02,340
and verify that it is valid hasn't

00:06:00,120 --> 00:06:04,320
expired etc get a whole bunch of bundle

00:06:02,340 --> 00:06:05,850
that refutes back and be able act on it

00:06:04,320 --> 00:06:08,340
you know tell you what project you're

00:06:05,850 --> 00:06:11,460
working in what your service catalog is

00:06:08,340 --> 00:06:14,640
which that was a bad idea but we have it

00:06:11,460 --> 00:06:18,000
and a few other things pki tokens was

00:06:14,640 --> 00:06:20,940
great well we have uuid we have this

00:06:18,000 --> 00:06:23,280
opaque string we can turn that into this

00:06:20,940 --> 00:06:24,990
great sign document because you know

00:06:23,280 --> 00:06:26,370
cryptography is awesome let's you know

00:06:24,990 --> 00:06:27,330
let's use cryptographer every for

00:06:26,370 --> 00:06:31,680
everything it solves all our problems

00:06:27,330 --> 00:06:35,240
right so we'll use pki well specifically

00:06:31,680 --> 00:06:36,830
we'll use s my more or CMS depending on

00:06:35,240 --> 00:06:39,410
you ask what the what the name of it is

00:06:36,830 --> 00:06:41,360
so you take a symmetric keys sign this

00:06:39,410 --> 00:06:44,090
document great thing is document

00:06:41,360 --> 00:06:47,210
contains everything you need to be able

00:06:44,090 --> 00:06:49,639
to do your token authentication without

00:06:47,210 --> 00:06:53,900
having to talk to Keystone again except

00:06:49,639 --> 00:06:55,520
for when you revoke a token or if you

00:06:53,900 --> 00:06:57,530
want to you know use something that's

00:06:55,520 --> 00:06:58,849
less than eight to forty kilobytes in

00:06:57,530 --> 00:07:00,620
size that you're trying to cram into a

00:06:58,849 --> 00:07:02,900
hdb header that doesn't break the

00:07:00,620 --> 00:07:05,000
internet contrary to popular belief that

00:07:02,900 --> 00:07:06,860
will not break your inner the internet

00:07:05,000 --> 00:07:09,370
it will break patchy and most of the web

00:07:06,860 --> 00:07:14,949
servers but doesn't break the internet

00:07:09,370 --> 00:07:19,520
so problem is you know pki tokens their

00:07:14,949 --> 00:07:21,409
giant solution well let's compress it ok

00:07:19,520 --> 00:07:23,120
we can compress it but what's the

00:07:21,409 --> 00:07:26,750
overhead what's the real life overhead

00:07:23,120 --> 00:07:30,380
of doing a signed document it's about

00:07:26,750 --> 00:07:32,150
one kilobyte in size well how much data

00:07:30,380 --> 00:07:34,039
are you really transmitting to anything

00:07:32,150 --> 00:07:36,050
in keystone except for when you're

00:07:34,039 --> 00:07:38,900
uploading like images to glance or some

00:07:36,050 --> 00:07:41,990
objects with and even then you know a

00:07:38,900 --> 00:07:45,409
couple bites worth of JSON so I'm going

00:07:41,990 --> 00:07:49,310
to have 1k to 8k of data and every

00:07:45,409 --> 00:07:52,520
request I'm going to now send 20 bytes

00:07:49,310 --> 00:07:55,370
she took the seemed silly so moving on

00:07:52,520 --> 00:07:59,199
we said great fernet tokens will solve

00:07:55,370 --> 00:08:03,530
this why fernet is a Heroku based spec

00:07:59,199 --> 00:08:05,479
fernet is taking very minimal data so we

00:08:03,530 --> 00:08:07,430
can reconstruct the tokens lightweight

00:08:05,479 --> 00:08:08,539
so you don't have to store anything in

00:08:07,430 --> 00:08:11,060
the database that was the big problem

00:08:08,539 --> 00:08:13,669
with uuid tokens unbounded datasets that

00:08:11,060 --> 00:08:15,169
get stored in my sequel nobody and then

00:08:13,669 --> 00:08:17,150
having problems of deleting them because

00:08:15,169 --> 00:08:20,409
somebody issues 10,000 hundred thousand

00:08:17,150 --> 00:08:23,630
a second for certain networking related

00:08:20,409 --> 00:08:26,840
projects that's already remain nameless

00:08:23,630 --> 00:08:28,370
but they're so what do we want to do we

00:08:26,840 --> 00:08:30,409
want to eliminate the sequel back-end

00:08:28,370 --> 00:08:32,089
the endless amount of things getting

00:08:30,409 --> 00:08:34,219
stored there we want to still have

00:08:32,089 --> 00:08:36,860
benefit of pki tokens where most of the

00:08:34,219 --> 00:08:38,209
data is held in the body but and a

00:08:36,860 --> 00:08:40,760
little bit okay you know a little bit

00:08:38,209 --> 00:08:42,260
opaque and we want to be able to say

00:08:40,760 --> 00:08:46,490
that the tokens don't exceed oh I don't

00:08:42,260 --> 00:08:49,010
know 255 bites that seems reasonable 8k

00:08:46,490 --> 00:08:53,350
40k on the high end

00:08:49,010 --> 00:08:55,040
32 bytes 255 fits in most everybody's

00:08:53,350 --> 00:08:57,230
databases where they're storing them

00:08:55,040 --> 00:09:00,260
because they use for card to 55 or

00:08:57,230 --> 00:09:03,680
something like that great well it's

00:09:00,260 --> 00:09:08,360
based on so fernet has 22 encryption

00:09:03,680 --> 00:09:12,500
keys and they have an aes encrypted

00:09:08,360 --> 00:09:18,350
payload and then an H Mac 250 sha-256

00:09:12,500 --> 00:09:19,760
signed sick I signed like the whole the

00:09:18,350 --> 00:09:21,110
whole body with a creation time and that

00:09:19,760 --> 00:09:23,660
you know it covers most of everything we

00:09:21,110 --> 00:09:25,340
need for the token we've you'll see if

00:09:23,660 --> 00:09:26,930
you dig into it you'll see presentations

00:09:25,340 --> 00:09:29,930
from Dolph and a few other people in

00:09:26,930 --> 00:09:31,250
keystone land that have done more

00:09:29,930 --> 00:09:34,370
in-depth stuff than I really want to go

00:09:31,250 --> 00:09:36,770
into here because I mean we're trying to

00:09:34,370 --> 00:09:38,630
keep things for looking at future and

00:09:36,770 --> 00:09:39,860
forward-looking here rather than what

00:09:38,630 --> 00:09:41,900
have we already implemented well for

00:09:39,860 --> 00:09:43,880
Nets available today we're trying to

00:09:41,900 --> 00:09:46,340
make it the default in devstack and

00:09:43,880 --> 00:09:48,170
everywhere else we really do want to get

00:09:46,340 --> 00:09:50,420
rid of pki we really do want to get rid

00:09:48,170 --> 00:09:52,300
of uuid in the long term there are a few

00:09:50,420 --> 00:09:55,640
things a few things that are problematic

00:09:52,300 --> 00:09:58,490
the way we revoke tokens it's a little

00:09:55,640 --> 00:10:01,580
bit slow known problem but we're working

00:09:58,490 --> 00:10:03,950
on that and the making sure that we have

00:10:01,580 --> 00:10:05,540
full out full support of all the aldi

00:10:03,950 --> 00:10:07,820
token types all the token features that

00:10:05,540 --> 00:10:09,620
came with uuid and pki there are few

00:10:07,820 --> 00:10:11,600
that are missing for the most part

00:10:09,620 --> 00:10:13,160
though we've hit them all most the ones

00:10:11,600 --> 00:10:15,890
that are missing like the concept of

00:10:13,160 --> 00:10:18,560
token binds token bind is where you can

00:10:15,890 --> 00:10:21,380
do something clever like force the force

00:10:18,560 --> 00:10:23,150
the user to provide an x.509 clients or

00:10:21,380 --> 00:10:25,040
as well as the keystone token when

00:10:23,150 --> 00:10:27,710
talking to an end point just next or

00:10:25,040 --> 00:10:32,270
multi-factor authentication type thing

00:10:27,710 --> 00:10:34,400
so for net everywhere we want Frenette

00:10:32,270 --> 00:10:35,780
tokens we're working on making them

00:10:34,400 --> 00:10:38,270
better please let us know if you run

00:10:35,780 --> 00:10:40,100
into problems with them what would love

00:10:38,270 --> 00:10:44,480
to have a more collaboration on making

00:10:40,100 --> 00:10:46,220
them really a dick so we have tons of

00:10:44,480 --> 00:10:49,550
technical data you may have seen the v2

00:10:46,220 --> 00:10:50,990
API and what about two cycles ago three

00:10:49,550 --> 00:10:52,760
cycles ago we tried deprecated and then

00:10:50,990 --> 00:10:54,620
got the whole whoa don't do that from

00:10:52,760 --> 00:10:57,920
the community because everybody still

00:10:54,620 --> 00:10:59,120
use the v2 API froth well we made a

00:10:57,920 --> 00:11:02,960
mistake

00:10:59,120 --> 00:11:05,839
we used the tweed we used cruddy API

00:11:02,960 --> 00:11:08,000
versions and v10 and authentication

00:11:05,839 --> 00:11:09,680
versions mixed together well great we

00:11:08,000 --> 00:11:12,080
now have something on our backlog to

00:11:09,680 --> 00:11:15,710
clean up but long long story short we

00:11:12,080 --> 00:11:19,070
have a ton of technical debt part of it

00:11:15,710 --> 00:11:22,490
is the whiskey model we wrote our own

00:11:19,070 --> 00:11:24,710
whiskey code like much spoken stack

00:11:22,490 --> 00:11:27,260
looking over a look at cinder look at

00:11:24,710 --> 00:11:30,200
all of them well some people move to

00:11:27,260 --> 00:11:32,390
pecan comes great if you're using Wiz me

00:11:30,200 --> 00:11:33,980
or a few of the other things a lot of it

00:11:32,390 --> 00:11:37,100
doesn't work for Keystone at the moment

00:11:33,980 --> 00:11:38,480
we also really do like flask we're going

00:11:37,100 --> 00:11:42,290
to move to flask from that standpoint

00:11:38,480 --> 00:11:44,450
it's Python friendly pecan flask it's

00:11:42,290 --> 00:11:45,800
all just take your pick of what take

00:11:44,450 --> 00:11:48,800
compete the pic of what you like but

00:11:45,800 --> 00:11:50,420
we're moving that direction going to

00:11:48,800 --> 00:11:52,100
continue with keeping everything in

00:11:50,420 --> 00:11:55,610
Apache rather than amendment mental it's

00:11:52,100 --> 00:11:58,160
going away along well those types of

00:11:55,610 --> 00:12:01,130
that type of cleanup simplify the code

00:11:58,160 --> 00:12:03,709
get rid of custom horrible things that

00:12:01,130 --> 00:12:05,630
we're carrying ourselves move to things

00:12:03,709 --> 00:12:08,770
that people can get wrap their head

00:12:05,630 --> 00:12:11,089
around or may have already worked with

00:12:08,770 --> 00:12:14,180
we're working on something really really

00:12:11,089 --> 00:12:16,100
cool to get rid of the need for Keystone

00:12:14,180 --> 00:12:18,410
client to be used for everything for

00:12:16,100 --> 00:12:19,430
every client for all the servers we're

00:12:18,410 --> 00:12:22,370
going to move to a library that

00:12:19,430 --> 00:12:25,940
encompasses the very basic minimums in

00:12:22,370 --> 00:12:28,430
Python talk to indicate i think shade is

00:12:25,940 --> 00:12:30,700
the first thing really looking at using

00:12:28,430 --> 00:12:30,700
that

00:12:33,010 --> 00:12:40,230
great yes so shade something a wonderful

00:12:38,380 --> 00:12:44,020
tool saying that infra is working on for

00:12:40,230 --> 00:12:47,320
everything to help with many many clouds

00:12:44,020 --> 00:12:49,300
the differences between clouds like you

00:12:47,320 --> 00:12:51,670
know well how do you make a network

00:12:49,300 --> 00:12:53,170
simple things like that anyway Keystone

00:12:51,670 --> 00:12:55,450
auth is going to simplify your life

00:12:53,170 --> 00:12:57,280
along those lines for the most part it's

00:12:55,450 --> 00:12:59,530
going to mean that you have one library

00:12:57,280 --> 00:13:01,720
to work with stable interfaces both in

00:12:59,530 --> 00:13:05,080
OpenStack count-outs we're not relying a

00:13:01,720 --> 00:13:06,430
lot of the OpenStack specific like

00:13:05,080 --> 00:13:08,050
config options we're not gonna be using

00:13:06,430 --> 00:13:09,970
mazel config we're not using Ozil series

00:13:08,050 --> 00:13:11,770
ation right using any of those crazy

00:13:09,970 --> 00:13:13,660
things that people kind of roll their

00:13:11,770 --> 00:13:17,170
eyes and say yeah well yes it's an

00:13:13,660 --> 00:13:18,580
OpenStack thing yes it's good but well I

00:13:17,170 --> 00:13:20,770
don't want to load all those in if I'm

00:13:18,580 --> 00:13:24,340
not doing openstax except it's designed

00:13:20,770 --> 00:13:26,470
for SDK consumption third-party library

00:13:24,340 --> 00:13:33,430
consumption everything else right now

00:13:26,470 --> 00:13:35,620
it's a 0.4 I think release no we're not

00:13:33,430 --> 00:13:38,020
ready we will be cutting 1 point 0 as

00:13:35,620 --> 00:13:40,510
soon as I can Corner Jamie over here and

00:13:38,020 --> 00:13:42,250
and and get him to help me get the last

00:13:40,510 --> 00:13:43,900
few patches taking care but we will have

00:13:42,250 --> 00:13:45,820
one point oh very soon as soon as that

00:13:43,900 --> 00:13:47,980
happens we'll get it into the

00:13:45,820 --> 00:13:50,530
requirements will get a vailable for

00:13:47,980 --> 00:13:53,490
everybody and start converting clients

00:13:50,530 --> 00:13:53,490
and everything else over

00:13:55,570 --> 00:14:03,589
and yes b3 Keystone API no we really do

00:14:01,520 --> 00:14:10,010
mean everywhere we want to get rid of

00:14:03,589 --> 00:14:14,450
the v2 API yes well you'll see why I

00:14:10,010 --> 00:14:16,490
know v3 this but you are including in

00:14:14,450 --> 00:14:20,930
the Keystone client yes yes we do want

00:14:16,490 --> 00:14:23,120
to get rid of the V the v2 API for

00:14:20,930 --> 00:14:24,980
Keystone everywhere not because we want

00:14:23,120 --> 00:14:27,260
because the v2 API was a terrible idea

00:14:24,980 --> 00:14:29,120
but because we've made enough changes

00:14:27,260 --> 00:14:31,880
invested enough time at this point that

00:14:29,120 --> 00:14:34,339
v3 really has seen enough development

00:14:31,880 --> 00:14:36,140
that it's very hard to do everything you

00:14:34,339 --> 00:14:39,290
need to do and b2 and retrofitting all

00:14:36,140 --> 00:14:41,930
that back into v2 isn't isn't a great

00:14:39,290 --> 00:14:43,040
idea we probably can do it but it's

00:14:41,930 --> 00:14:45,709
going to cause all sorts of headaches

00:14:43,040 --> 00:14:49,279
and problems for everybody ideally we

00:14:45,709 --> 00:14:50,930
should never ever remove a an API

00:14:49,279 --> 00:14:52,610
version I mean I'm going to go out and

00:14:50,930 --> 00:14:54,589
say I'm different than probably most of

00:14:52,610 --> 00:14:57,440
OpenStack getting rid of API version

00:14:54,589 --> 00:14:59,720
sucks for the users this is a case where

00:14:57,440 --> 00:15:01,310
unfortunately we kind of made our bed

00:14:59,720 --> 00:15:03,200
and may have to get rid of an API

00:15:01,310 --> 00:15:04,370
version but going forward we shouldn't

00:15:03,200 --> 00:15:11,060
do that you know if we ever have it

00:15:04,370 --> 00:15:12,649
before no vivo but but v3 everywhere is

00:15:11,060 --> 00:15:15,440
really important that's a big piece of

00:15:12,649 --> 00:15:17,089
our technical debt along with that we

00:15:15,440 --> 00:15:18,410
also have some issues with the Service

00:15:17,089 --> 00:15:19,940
Catalog that we're trying to clean up

00:15:18,410 --> 00:15:22,040
and that's very much related to the

00:15:19,940 --> 00:15:24,770
differences between v2 and v3 and

00:15:22,040 --> 00:15:26,750
service catalog and some specifications

00:15:24,770 --> 00:15:30,320
on how people deploy and some just bad

00:15:26,750 --> 00:15:33,190
habits that we've said was we're okay

00:15:30,320 --> 00:15:37,670
based upon how dense that deploys things

00:15:33,190 --> 00:15:39,350
it's unfortunate but how things go so

00:15:37,670 --> 00:15:41,149
here's what we're doing with Keystone

00:15:39,350 --> 00:15:43,279
client well I already said Keystone

00:15:41,149 --> 00:15:46,250
client is no longer going to be doing

00:15:43,279 --> 00:15:47,720
this session code the authentication

00:15:46,250 --> 00:15:50,329
code all the stuff that everybody uses

00:15:47,720 --> 00:15:52,220
why are you you know when you talk two

00:15:50,329 --> 00:15:54,110
neutron do you when you use Neutron

00:15:52,220 --> 00:15:55,790
client do you load Nova client for

00:15:54,110 --> 00:15:57,770
everything I mean do you log load sender

00:15:55,790 --> 00:16:00,840
client it's really silly 20 load

00:15:57,770 --> 00:16:02,850
Keystone client to talk to Nova

00:16:00,840 --> 00:16:04,500
why would you do it so let's let's

00:16:02,850 --> 00:16:05,970
simplify that out so we're doing that

00:16:04,500 --> 00:16:08,130
the second piece that's happening this

00:16:05,970 --> 00:16:11,340
cycle is there will be no Keystone

00:16:08,130 --> 00:16:15,060
client CLI we're done we haven't put any

00:16:11,340 --> 00:16:19,770
effort into it for Jamie how many cycles

00:16:15,060 --> 00:16:22,680
for ya for two years the zero effort has

00:16:19,770 --> 00:16:25,020
gone into that see live via barring

00:16:22,680 --> 00:16:27,780
major major critical bugs that we're

00:16:25,020 --> 00:16:29,880
like high level leaking date all over

00:16:27,780 --> 00:16:32,970
which since the client really didn't

00:16:29,880 --> 00:16:35,670
happen so we will be getting rid of it

00:16:32,970 --> 00:16:39,390
use opens that client it's way better it

00:16:35,670 --> 00:16:41,220
works with me 3v3 it does everything you

00:16:39,390 --> 00:16:42,660
need to do in fact you may like it

00:16:41,220 --> 00:16:45,930
better if you've been talking to Nova

00:16:42,660 --> 00:16:48,420
but that's your choice also a lot of the

00:16:45,930 --> 00:16:50,780
old code that was ready to middleware

00:16:48,420 --> 00:16:53,850
what we had they you know unfortunate

00:16:50,780 --> 00:16:55,260
unfortunate combining Keystone

00:16:53,850 --> 00:16:58,500
middleware and keys don't line into one

00:16:55,260 --> 00:17:00,540
package everywhere that has been that'll

00:16:58,500 --> 00:17:02,610
be removed and a lot of the cleanup

00:17:00,540 --> 00:17:06,240
around moving to the Keystone off

00:17:02,610 --> 00:17:07,680
library will be will be will also occur

00:17:06,240 --> 00:17:09,360
here and it's just going to generally

00:17:07,680 --> 00:17:11,640
make keystone client a better library

00:17:09,360 --> 00:17:15,720
with fewer concerns less that you need

00:17:11,640 --> 00:17:18,959
to worry about so then there's

00:17:15,720 --> 00:17:20,880
everything else I mean we have a lot of

00:17:18,959 --> 00:17:23,370
things that we've we've implemented in

00:17:20,880 --> 00:17:26,340
the last couple cycles you may have seen

00:17:23,370 --> 00:17:28,620
the hierarchical multi-tenancy be able

00:17:26,340 --> 00:17:33,320
the ability to take a project or tenant

00:17:28,620 --> 00:17:36,320
if you like me to parlance and then

00:17:33,320 --> 00:17:36,320
thanks

00:17:36,650 --> 00:17:42,110
I did I did I did see save III of her

00:17:39,890 --> 00:17:43,820
but we like the week if you like the v2

00:17:42,110 --> 00:17:46,250
paralyzed tenant's project same thing

00:17:43,820 --> 00:17:48,320
but the ability to take a project and

00:17:46,250 --> 00:17:50,420
put it inside another project and make

00:17:48,320 --> 00:17:52,100
it look a lot like the like they're all

00:17:50,420 --> 00:17:55,760
turtles and it just keeps going all the

00:17:52,100 --> 00:17:58,070
way down but we want to move to we want

00:17:55,760 --> 00:18:00,320
to move to that being kind of a better

00:17:58,070 --> 00:18:01,910
support will have a reseller mode which

00:18:00,320 --> 00:18:03,260
that's the idea where you can say i'm

00:18:01,910 --> 00:18:06,320
going to reset i'm going to set up a

00:18:03,260 --> 00:18:07,820
account where it's managed by a managed

00:18:06,320 --> 00:18:09,440
by one of your customers they will then

00:18:07,820 --> 00:18:10,820
be able to resell resources as

00:18:09,440 --> 00:18:13,790
appropriate if you want to allow that

00:18:10,820 --> 00:18:17,680
and the limit of access from the top

00:18:13,790 --> 00:18:20,390
down to make that a reality we also have

00:18:17,680 --> 00:18:22,610
adjustments to how to make how config

00:18:20,390 --> 00:18:24,790
files are handled for the multi domain

00:18:22,610 --> 00:18:27,020
backends we're trying to move that into

00:18:24,790 --> 00:18:30,020
something that is Hema be a crud

00:18:27,020 --> 00:18:32,690
interfaces rather than needing to have

00:18:30,020 --> 00:18:34,340
your CMS deploy config files on disk and

00:18:32,690 --> 00:18:36,980
then go restart Keystone every time you

00:18:34,340 --> 00:18:39,320
want to add a new back-end seems kind of

00:18:36,980 --> 00:18:41,240
silly same problem same thing we're

00:18:39,320 --> 00:18:44,870
working on trying to address some of the

00:18:41,240 --> 00:18:47,600
policy gaps make sure that policy is had

00:18:44,870 --> 00:18:50,780
some real eyes on it a little bit more

00:18:47,600 --> 00:18:52,070
dynamic ending upon some talks that are

00:18:50,780 --> 00:18:55,010
happening now may be distributed

00:18:52,070 --> 00:18:59,000
centrally may not be improving the rule

00:18:55,010 --> 00:19:00,970
set I mean who's ever edited policy JSON

00:18:59,000 --> 00:19:05,300
I mean who's ever looked at it besides

00:19:00,970 --> 00:19:08,420
but yeah let's look at one what we do we

00:19:05,300 --> 00:19:10,460
have to to all right we have two people

00:19:08,420 --> 00:19:12,410
here who have really taken a hard look

00:19:10,460 --> 00:19:14,980
at policy to JSON that's generally what

00:19:12,410 --> 00:19:18,110
we found nobody really looks hard at it

00:19:14,980 --> 00:19:19,400
everybody wants to be better but it's a

00:19:18,110 --> 00:19:21,050
real pain the change and it's not

00:19:19,400 --> 00:19:22,690
straightforward and you get all sorts of

00:19:21,050 --> 00:19:24,710
weird problems when you change them so

00:19:22,690 --> 00:19:26,090
spend your so instead of doing that

00:19:24,710 --> 00:19:27,920
we're trying to make that a little bit

00:19:26,090 --> 00:19:29,690
easier but there's a lot of conversation

00:19:27,920 --> 00:19:33,290
happening with that highly recommend

00:19:29,690 --> 00:19:34,380
talking to to adam young on IRC if you

00:19:33,290 --> 00:19:40,890
want to get

00:19:34,380 --> 00:19:43,230
an earful on dynamic policy we're also

00:19:40,890 --> 00:19:45,240
we're also looking at moving away from

00:19:43,230 --> 00:19:47,910
extensions there are no there's no more

00:19:45,240 --> 00:19:51,840
concept of extensions in keystone can't

00:19:47,910 --> 00:19:54,690
just rip out the piece of the API you've

00:19:51,840 --> 00:19:55,800
looked at the paste a to paste IRS you

00:19:54,690 --> 00:19:58,440
know what they you know how they work

00:19:55,800 --> 00:19:59,640
and sometimes you say oh we should the

00:19:58,440 --> 00:20:01,410
instructions to turn it on and say

00:19:59,640 --> 00:20:03,060
install this and turn put this in the

00:20:01,410 --> 00:20:05,370
paste I&I and go restart Keystone well

00:20:03,060 --> 00:20:06,900
that's again that's not really good for

00:20:05,370 --> 00:20:08,760
the end user so we want to move away

00:20:06,900 --> 00:20:10,710
from that everything's being moved into

00:20:08,760 --> 00:20:13,380
the core of Keystone with the idea that

00:20:10,710 --> 00:20:14,940
if you want to disable it you're going

00:20:13,380 --> 00:20:17,610
to use policy disable it or you're going

00:20:14,940 --> 00:20:19,620
to use not provide roles to access it or

00:20:17,610 --> 00:20:22,980
you will use it you may use a load

00:20:19,620 --> 00:20:25,500
balancer 2401 403 that type of stuff you

00:20:22,980 --> 00:20:26,880
have some layer 7 magic the idea is that

00:20:25,500 --> 00:20:30,410
Keystone should be you should not have

00:20:26,880 --> 00:20:30,410
to edit Keystone's can fix for that

00:20:31,760 --> 00:20:36,150
mostly this mostly what's coming up here

00:20:34,170 --> 00:20:38,700
tech that paid out that something along

00:20:36,150 --> 00:20:41,220
the short of it some cool stuff as much

00:20:38,700 --> 00:20:44,150
as I know Monty would love me to rename

00:20:41,220 --> 00:20:46,440
domains two realms or something else or

00:20:44,150 --> 00:20:48,240
you know get rid of domains completely

00:20:46,440 --> 00:20:51,240
because they're silly and confused

00:20:48,240 --> 00:20:54,510
people since what's a domain or DNS is

00:20:51,240 --> 00:20:55,740
it dns no no it's nothing this that's

00:20:54,510 --> 00:20:57,060
the questions that give up all the time

00:20:55,740 --> 00:20:59,190
so you don't want you don't want those

00:20:57,060 --> 00:21:00,540
types of things happening you want it to

00:20:59,190 --> 00:21:02,340
be clear you want the namespaces and

00:21:00,540 --> 00:21:05,580
what they are to be straightforward well

00:21:02,340 --> 00:21:08,040
we were living with it we ever ever do

00:21:05,580 --> 00:21:10,170
another API will do that but we'll

00:21:08,040 --> 00:21:13,650
change that naming construct or make it

00:21:10,170 --> 00:21:15,720
better and the last thing is that we're

00:21:13,650 --> 00:21:17,850
just trying to we're just trying to to

00:21:15,720 --> 00:21:20,220
instead of land another set a big

00:21:17,850 --> 00:21:21,890
picture big features from a reiterate

00:21:20,220 --> 00:21:25,430
just again that we're really focused on

00:21:21,890 --> 00:21:28,170
the tech debt paydown ease of use

00:21:25,430 --> 00:21:30,390
stability and performance at this point

00:21:28,170 --> 00:21:32,460
maybe and a couple of cycles will be

00:21:30,390 --> 00:21:34,290
back to land another giant feature

00:21:32,460 --> 00:21:36,300
hopefully we'll hopefully those giant

00:21:34,290 --> 00:21:38,550
features will be easier to easier to use

00:21:36,300 --> 00:21:42,090
in and better for all the other stuff

00:21:38,550 --> 00:21:43,470
that we're doing at this point questions

00:21:42,090 --> 00:21:44,510
that I mean on anything feel free to ask

00:21:43,470 --> 00:21:47,970
I'm happy to

00:21:44,510 --> 00:21:54,120
yes please speak up so I can repeat and

00:21:47,970 --> 00:21:58,680
I'll repeat it it's not a plan to get it

00:21:54,120 --> 00:22:00,780
perfect never plan yeah how do you put

00:21:58,680 --> 00:22:03,810
how does planning to get the API perfect

00:22:00,780 --> 00:22:07,700
a viable strategy well it's not we can

00:22:03,810 --> 00:22:07,700
make we can make changes

00:22:13,130 --> 00:22:15,190

YouTube URL: https://www.youtube.com/watch?v=BiFUDT4aGFk


