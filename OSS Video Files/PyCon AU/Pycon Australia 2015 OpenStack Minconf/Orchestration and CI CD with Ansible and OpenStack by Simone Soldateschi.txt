Title: Orchestration and CI CD with Ansible and OpenStack by Simone Soldateschi
Publication date: 2015-08-06
Playlist: Pycon Australia 2015 OpenStack Minconf
Description: 
	This project will demonstrate how to leverage CI/CD pipelines, to deploy and rollback applications in the Openstack Cloud. Best-practices allow to automate tasks and achieve high-degree of repeatability and robustness.

Jenkins will be used to implement continuous integration and continuous delivery jobs and pipelines. Packer will create images of disposable systems, being containers and Cloud servers.
Ansible will be used to both create images with Packer, and eventually orchestrate provisioning of systems in staging and production environments in a blue-green fashion.

Deep knowledge of deployment and workflow allows to continuously refine the process, adapt it to custom requirements, and make it smoother.

The following technologies will be presented:

- Ansible
- Docker on CoreOS cluster
- Git repository
- Jenkins
- Openstack
- Packer
- Vagrant

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:09,519 --> 00:00:15,530
hi everyone and wake up to my talk on

00:00:13,370 --> 00:00:22,400
orchestration in the open

00:00:15,530 --> 00:00:27,320
loud my name is a sorry I think it

00:00:22,400 --> 00:00:29,000
doesn't work okay my name is Simone so

00:00:27,320 --> 00:00:33,350
that s key i'm a senior devops engineer

00:00:29,000 --> 00:00:35,480
in in sydney i work at rackspace i've

00:00:33,350 --> 00:00:38,630
been working as a software engineer than

00:00:35,480 --> 00:00:45,050
systems engineer and then merge all

00:00:38,630 --> 00:00:48,199
those things in a DevOps roller what do

00:00:45,050 --> 00:00:51,530
I do essentially I work with the

00:00:48,199 --> 00:00:55,579
developers mainly Python and Ruby

00:00:51,530 --> 00:00:58,940
developers I dig into the source code of

00:00:55,579 --> 00:01:01,190
their application and I work on task

00:00:58,940 --> 00:01:07,070
automation in the openstack cloud that

00:01:01,190 --> 00:01:10,670
we use at a track space that is what we

00:01:07,070 --> 00:01:14,930
are going to to cover today we are going

00:01:10,670 --> 00:01:18,170
to discuss pipelines to be containers if

00:01:14,930 --> 00:01:21,530
we stuck we will see a full stack to run

00:01:18,170 --> 00:01:26,810
all the things we will discuss how to

00:01:21,530 --> 00:01:33,549
orchestrate all every component and to

00:01:26,810 --> 00:01:33,549
do service discovery to to go lie

00:01:34,539 --> 00:01:39,640
usually what we when you think of

00:01:37,869 --> 00:01:43,280
developing and deploying applications

00:01:39,640 --> 00:01:46,729
you develop your tester you run uat QC

00:01:43,280 --> 00:01:50,439
and then you hand it over to someone who

00:01:46,729 --> 00:01:53,930
provision and deploy your application on

00:01:50,439 --> 00:01:57,259
staging and live environments and that

00:01:53,930 --> 00:02:02,920
is the part that I'm mainly concerned

00:01:57,259 --> 00:02:06,049
about question is why the point is that

00:02:02,920 --> 00:02:10,009
all our configuration management systems

00:02:06,049 --> 00:02:12,800
tell us that we need to write code to

00:02:10,009 --> 00:02:15,890
tell systems hot manage themselves which

00:02:12,800 --> 00:02:20,420
is defining the desired state of systems

00:02:15,890 --> 00:02:24,879
and unfortunately that is not always

00:02:20,420 --> 00:02:28,370
true let me give you a trivial example

00:02:24,879 --> 00:02:29,300
let's discuss a trivial issue let's say

00:02:28,370 --> 00:02:32,900
that

00:02:29,300 --> 00:02:36,440
our cookbook playbook or wherever we

00:02:32,900 --> 00:02:40,310
define a full user that user has to

00:02:36,440 --> 00:02:43,280
exist on notes that we manage then we

00:02:40,310 --> 00:02:46,610
run our automation and the full user

00:02:43,280 --> 00:02:49,850
gets created on managed nodes okay

00:02:46,610 --> 00:02:52,550
that's great it works then we realize

00:02:49,850 --> 00:02:56,480
that we don't want the full user anymore

00:02:52,550 --> 00:02:58,400
we want a bar user so we comment a few

00:02:56,480 --> 00:03:01,190
user we remove it from our configuration

00:02:58,400 --> 00:03:04,460
we run a chef client and civil puppet

00:03:01,190 --> 00:03:06,920
whatever you want on systems and what

00:03:04,460 --> 00:03:10,550
you get is that you get food and bar on

00:03:06,920 --> 00:03:12,890
one note sir so wait a second we define

00:03:10,550 --> 00:03:15,620
the desire state we don't have that

00:03:12,890 --> 00:03:18,530
desire state on one system that we

00:03:15,620 --> 00:03:21,260
manage so this is just a very trivial

00:03:18,530 --> 00:03:25,940
example there are many ways a many

00:03:21,260 --> 00:03:30,170
simple hug that we can do to two prime

00:03:25,940 --> 00:03:32,630
rate from happening but even though that

00:03:30,170 --> 00:03:37,100
is mostly due to complexity of systems

00:03:32,630 --> 00:03:39,560
that we manager to the development

00:03:37,100 --> 00:03:44,200
workflow and most importantly I'd

00:03:39,560 --> 00:03:44,200
important see that is not always honored

00:03:44,410 --> 00:03:51,410
ideally things should be simple

00:03:47,050 --> 00:03:55,850
repeatable and versioned if we get there

00:03:51,410 --> 00:04:01,400
we all done so let's see how we can we

00:03:55,850 --> 00:04:07,750
can do it first of all you need to pick

00:04:01,400 --> 00:04:10,989
up a linux distro to to run softball

00:04:07,750 --> 00:04:15,380
although coalesce is not my favorite

00:04:10,989 --> 00:04:19,700
distro it's really easy to to to set up

00:04:15,380 --> 00:04:21,620
a cornered in the cloud it's really easy

00:04:19,700 --> 00:04:25,190
especially if you want to run a caress

00:04:21,620 --> 00:04:29,450
cluster hey I available caress classroom

00:04:25,190 --> 00:04:31,400
it's really easy to run in the cloud you

00:04:29,450 --> 00:04:35,540
just need to provision three cloud

00:04:31,400 --> 00:04:39,110
servers and you're almost done all that

00:04:35,540 --> 00:04:40,740
you need to do is to to beware that the

00:04:39,110 --> 00:04:44,910
a need a CD

00:04:40,740 --> 00:04:48,360
demon is running on every chorus post

00:04:44,910 --> 00:04:51,690
and that allows you to type all things

00:04:48,360 --> 00:04:55,259
together in chorus cluster essentially

00:04:51,690 --> 00:04:57,660
you just need to run car on the common

00:04:55,259 --> 00:05:01,199
line get it open pass the token to

00:04:57,660 --> 00:05:03,720
caress nodes and you know to participate

00:05:01,199 --> 00:05:06,330
in the chorus class so it's really is if

00:05:03,720 --> 00:05:09,870
you want to scale up scale down maybe

00:05:06,330 --> 00:05:17,490
using a scanning group you can do it's

00:05:09,870 --> 00:05:21,539
really simple as that if you run caressa

00:05:17,490 --> 00:05:23,610
obviously you won't run docker and the

00:05:21,539 --> 00:05:26,340
first thing that you need to know about

00:05:23,610 --> 00:05:29,520
doha and particular all of you already

00:05:26,340 --> 00:05:35,370
know is that in a docker container you

00:05:29,520 --> 00:05:37,289
should run one process only I've heard

00:05:35,370 --> 00:05:39,720
many systems administrator asking how

00:05:37,289 --> 00:05:42,330
can I say gently docker container it's

00:05:39,720 --> 00:05:44,820
not virtual machine it's a container you

00:05:42,330 --> 00:05:50,550
cannot ssh into it unless it's in open

00:05:44,820 --> 00:05:54,840
ssh server obviously how can you be the

00:05:50,550 --> 00:05:57,360
container you could use a daughter file

00:05:54,840 --> 00:05:59,909
it occupy wars creator it's really easy

00:05:57,360 --> 00:06:02,880
to understand anybody is able to

00:05:59,909 --> 00:06:06,419
understand what it does it's it's just a

00:06:02,880 --> 00:06:08,990
script it's it works perfectly it's it

00:06:06,419 --> 00:06:12,389
provisions all the things in a container

00:06:08,990 --> 00:06:16,199
but with a second didn't we say that

00:06:12,389 --> 00:06:18,319
scripts are evil we are supposed to use

00:06:16,199 --> 00:06:22,680
configuration management systems because

00:06:18,319 --> 00:06:24,690
ansible puppet chef provides you with an

00:06:22,680 --> 00:06:27,930
abstraction layer you don't need to hear

00:06:24,690 --> 00:06:31,889
if you are managing in ubuntu debian

00:06:27,930 --> 00:06:33,750
based machine instead of a reddit if you

00:06:31,889 --> 00:06:36,330
manage your reddit machine you need to

00:06:33,750 --> 00:06:41,069
replace up get with young or whatever

00:06:36,330 --> 00:06:47,969
you want so it's good is very simple but

00:06:41,069 --> 00:06:51,750
you just did a setback ah that is

00:06:47,969 --> 00:06:53,220
obviously a suboptimal solution how can

00:06:51,750 --> 00:06:57,210
we improve that

00:06:53,220 --> 00:06:59,160
creation essentially let's say that you

00:06:57,210 --> 00:07:02,400
are able to write a JSON file which

00:06:59,160 --> 00:07:04,920
describes many tasks that you need to

00:07:02,400 --> 00:07:11,100
perform in order to build a container

00:07:04,920 --> 00:07:13,410
and after that you want to run say some

00:07:11,100 --> 00:07:16,020
plates maybe you are very fluent in

00:07:13,410 --> 00:07:21,950
writing automation with ansible so you

00:07:16,020 --> 00:07:25,070
write playbooks you can upload upstream

00:07:21,950 --> 00:07:30,030
json in play books on a git repository

00:07:25,070 --> 00:07:32,820
Ben Jenkins kicks in and the Jenkins

00:07:30,030 --> 00:07:38,100
fetch researchers on snippet from from

00:07:32,820 --> 00:07:40,170
github and it feeds Parker Parker is is

00:07:38,100 --> 00:07:42,600
able to understand what you wanted to do

00:07:40,170 --> 00:07:45,810
by parsing the Jason Smith better in

00:07:42,600 --> 00:07:50,180
that case I specified that I want to be

00:07:45,810 --> 00:07:50,180
the daughter container based on a debian

00:07:50,480 --> 00:07:59,640
ISO image packard download the ISO image

00:07:55,919 --> 00:08:03,590
any start the Debian installer for me

00:07:59,640 --> 00:08:07,010
any types in the Debian installer

00:08:03,590 --> 00:08:11,150
commands and select things on my behalf

00:08:07,010 --> 00:08:17,220
that's great at very end when I'm done

00:08:11,150 --> 00:08:20,460
executing all JSON tasks Parker is able

00:08:17,220 --> 00:08:22,979
to to run ansible and to run all play

00:08:20,460 --> 00:08:26,400
books that I upload it on my git

00:08:22,979 --> 00:08:28,169
repository the skreet I've just created

00:08:26,400 --> 00:08:33,750
a daughter imagery docker container

00:08:28,169 --> 00:08:35,940
which is portable it's it leverages

00:08:33,750 --> 00:08:37,589
ansible so you have an abstraction layer

00:08:35,940 --> 00:08:41,520
on top of it you don't need to use

00:08:37,589 --> 00:08:44,430
docker file anymore and you just mix

00:08:41,520 --> 00:08:48,030
then use the a few interesting tools

00:08:44,430 --> 00:08:49,740
that are already available ok that's

00:08:48,030 --> 00:08:52,890
great you have the container now you

00:08:49,740 --> 00:08:55,110
need to to share it you can store it on

00:08:52,890 --> 00:08:59,010
public hablar if there are no secret

00:08:55,110 --> 00:09:01,570
there oh you could run a private

00:08:59,010 --> 00:09:05,530
registry which is a

00:09:01,570 --> 00:09:08,380
dog repository that you can run guess

00:09:05,530 --> 00:09:10,090
we're in a container it's really easy

00:09:08,380 --> 00:09:12,970
just one command you just need to run a

00:09:10,090 --> 00:09:16,680
dog have run registry and specify the

00:09:12,970 --> 00:09:20,740
pole day the registry has reason on

00:09:16,680 --> 00:09:23,890
that's it let's discuss about the food

00:09:20,740 --> 00:09:27,130
stock that allows you to run all these

00:09:23,890 --> 00:09:29,680
things you need to help obviously bare

00:09:27,130 --> 00:09:32,740
metal servers then you can run open

00:09:29,680 --> 00:09:35,860
stock on top of that chorus cluster is

00:09:32,740 --> 00:09:39,700
really easy to provision a cluster there

00:09:35,860 --> 00:09:43,390
and you had containers for free with a

00:09:39,700 --> 00:09:47,050
chorus cluster how you do you provision

00:09:43,390 --> 00:09:49,090
all these things actually for bare metal

00:09:47,050 --> 00:09:52,320
servers and after faith they exist I

00:09:49,090 --> 00:09:55,780
work at Rackspace they exist somewhere I

00:09:52,320 --> 00:09:58,090
need to provision in OpenStack layer on

00:09:55,780 --> 00:10:00,820
top of data open stock and spoil

00:09:58,090 --> 00:10:06,490
deployment is really a smooth way to

00:10:00,820 --> 00:10:08,770
deploy OpenStack on on servers you can

00:10:06,490 --> 00:10:11,860
use the vagrant on your laptop for

00:10:08,770 --> 00:10:15,040
development purpose or heat if you are

00:10:11,860 --> 00:10:17,980
managing the openstack cloud and then

00:10:15,040 --> 00:10:24,280
now you can orchestrate the containers

00:10:17,980 --> 00:10:27,370
on chorus cluster let's discuss briefly

00:10:24,280 --> 00:10:31,720
how you can orchestrate all the things

00:10:27,370 --> 00:10:33,790
together for the provision chorus

00:10:31,720 --> 00:10:38,440
cluster as I said you can use either

00:10:33,790 --> 00:10:42,990
vagrant or heater and you get the NHL

00:10:38,440 --> 00:10:46,270
available cluster if you want to

00:10:42,990 --> 00:10:47,950
orchestrate all the things in the

00:10:46,270 --> 00:10:50,710
Congress cluster you could leverage

00:10:47,950 --> 00:10:52,810
docker composer you might be familiar

00:10:50,710 --> 00:10:56,980
with the figure which is the old name

00:10:52,810 --> 00:11:00,450
for dr. composer and what you need to do

00:10:56,980 --> 00:11:03,340
is just to write a yeah Mel file which

00:11:00,450 --> 00:11:07,130
describe what you want to achieve what

00:11:03,340 --> 00:11:12,540
you want to get in your

00:11:07,130 --> 00:11:14,640
in your closet you define your

00:11:12,540 --> 00:11:17,850
infrastructure and you define that if

00:11:14,640 --> 00:11:21,390
the desire state of what you want to get

00:11:17,850 --> 00:11:26,970
you don't care where a load balancer the

00:11:21,390 --> 00:11:29,070
database web node is running on you just

00:11:26,970 --> 00:11:31,650
state that you want a load balancer a

00:11:29,070 --> 00:11:35,520
database web server running in the

00:11:31,650 --> 00:11:38,910
cluster that's it it runs somewhere if

00:11:35,520 --> 00:11:42,000
you delete if you destroy if you nuke

00:11:38,910 --> 00:11:45,090
the colorways oster on which are the

00:11:42,000 --> 00:11:47,700
container is running it's really easy to

00:11:45,090 --> 00:11:51,630
to move play destroyed container

00:11:47,700 --> 00:11:53,880
somewhere else now you need service

00:11:51,630 --> 00:11:56,430
discovery why do you need service

00:11:53,880 --> 00:11:59,490
discovery because the first question

00:11:56,430 --> 00:12:02,580
that arises when you're managing the

00:11:59,490 --> 00:12:06,600
dynamic environment is a question like

00:12:02,580 --> 00:12:09,540
web server is span Appa and it asks

00:12:06,600 --> 00:12:14,970
where easily be server for this specific

00:12:09,540 --> 00:12:20,150
environment or in a tree proxy might ask

00:12:14,970 --> 00:12:25,680
where are the notes for this environment

00:12:20,150 --> 00:12:28,050
you might leverage say chef server but

00:12:25,680 --> 00:12:30,000
think a little about data if you

00:12:28,050 --> 00:12:33,800
leverage chef server you get all

00:12:30,000 --> 00:12:37,580
information because chef server knows

00:12:33,800 --> 00:12:42,870
what's running in your infrastructure

00:12:37,580 --> 00:12:45,690
because it get it got information from

00:12:42,870 --> 00:12:48,390
chef client and shaft line train and

00:12:45,690 --> 00:12:53,190
maybe 30 minutes ago so you have

00:12:48,390 --> 00:12:57,270
information that are 30 minutes older if

00:12:53,190 --> 00:13:01,590
you leverage a say etcd which comes for

00:12:57,270 --> 00:13:06,990
free in a chorus class you get fresh

00:13:01,590 --> 00:13:10,920
information so you provision a web node

00:13:06,990 --> 00:13:14,670
that know the reducer a key value pair

00:13:10,920 --> 00:13:15,670
in etcd you can think of etcd as a

00:13:14,670 --> 00:13:17,560
dictionary

00:13:15,670 --> 00:13:22,660
essentially it's just a set of key value

00:13:17,560 --> 00:13:26,560
pairs and when a load balancer wants to

00:13:22,660 --> 00:13:30,670
know where where are its nodes just high

00:13:26,560 --> 00:13:34,090
22 query etcd and get the value for that

00:13:30,670 --> 00:13:36,640
key and do some stuff it just need to

00:13:34,090 --> 00:13:38,800
write the configuration file check if

00:13:36,640 --> 00:13:44,980
syntax is correct and reload

00:13:38,800 --> 00:13:47,290
configuration dynamically okay we are

00:13:44,980 --> 00:13:51,040
almost there let's discuss about the

00:13:47,290 --> 00:13:54,970
last bit being the cic deeper pipeline

00:13:51,040 --> 00:13:57,280
which allows you to go from a

00:13:54,970 --> 00:13:59,890
development environment to staging and

00:13:57,280 --> 00:14:02,320
then life you have a developer which

00:13:59,890 --> 00:14:06,550
runs vagrant coalescing containers to

00:14:02,320 --> 00:14:11,800
run all the things when the developer is

00:14:06,550 --> 00:14:17,080
happy he pushes upstream the source code

00:14:11,800 --> 00:14:20,400
another developer clone the repository

00:14:17,080 --> 00:14:23,290
and run all the things to be sure that

00:14:20,400 --> 00:14:29,230
everything is running correctly with the

00:14:23,290 --> 00:14:31,630
what is working on when all developers

00:14:29,230 --> 00:14:33,610
are happy with the new feature branch

00:14:31,630 --> 00:14:38,260
they might want to merge the feature

00:14:33,610 --> 00:14:42,370
branch back to master and push a master

00:14:38,260 --> 00:14:47,260
branch to upstream so the Jenkins can

00:14:42,370 --> 00:14:49,000
kicks in run integration tests maybe in

00:14:47,260 --> 00:14:50,680
the in the cloud so we are completely

00:14:49,000 --> 00:14:53,260
sure that we are going to run on a

00:14:50,680 --> 00:14:58,020
stager environment and live what is

00:14:53,260 --> 00:14:58,020
going to effectively run correctly

00:14:58,800 --> 00:15:05,260
Jenkins create containers based on the

00:15:03,400 --> 00:15:10,870
pipeline's that we discussed previously

00:15:05,260 --> 00:15:14,680
and it uploads containers in the public

00:15:10,870 --> 00:15:17,320
or private registry it deems version of

00:15:14,680 --> 00:15:21,220
images in

00:15:17,320 --> 00:15:24,700
in the repositories and in that way it's

00:15:21,220 --> 00:15:29,410
possible to differentiate what image is

00:15:24,700 --> 00:15:33,130
running in development or staging run

00:15:29,410 --> 00:15:36,880
tests and containers are promoted to the

00:15:33,130 --> 00:15:42,070
next environment until they eat

00:15:36,880 --> 00:15:45,250
eventually life so let's look at what we

00:15:42,070 --> 00:15:47,470
have seen first of all what I've learned

00:15:45,250 --> 00:15:53,220
is that all configuration management

00:15:47,470 --> 00:15:53,220
system suck an ansible such useless

00:15:53,400 --> 00:16:01,840
caressa is very easy to use and two run

00:15:56,440 --> 00:16:04,120
HR vailable pluses a pipeline to build a

00:16:01,840 --> 00:16:06,610
container it's extremely useful because

00:16:04,120 --> 00:16:12,130
it allows you to run repeatable tasks

00:16:06,610 --> 00:16:15,400
and jobs you can specify how to run

00:16:12,130 --> 00:16:19,540
services as desired with the darker

00:16:15,400 --> 00:16:22,360
composer and with service discovery you

00:16:19,540 --> 00:16:24,760
can really run they're easily systems in

00:16:22,360 --> 00:16:29,860
all environments that you want to manage

00:16:24,760 --> 00:16:32,160
and that is all that I want help thank

00:16:29,860 --> 00:16:32,160
you very much

00:16:34,949 --> 00:16:47,589
any questions thanks for the

00:16:44,740 --> 00:16:51,699
presentation nice one so I had a

00:16:47,589 --> 00:16:52,990
question about Packer with one of the

00:16:51,699 --> 00:16:55,540
things that you find with the docker

00:16:52,990 --> 00:16:58,630
file is that it saves intermediate steps

00:16:55,540 --> 00:17:02,130
so it relies on cash so building

00:16:58,630 --> 00:17:05,289
rebuilding the same image is much faster

00:17:02,130 --> 00:17:08,620
with packer because you're relying on

00:17:05,289 --> 00:17:13,289
ansible or sun provisioner the entire

00:17:08,620 --> 00:17:18,610
building process takes a lot longer and

00:17:13,289 --> 00:17:20,740
it doesn't support nested building as in

00:17:18,610 --> 00:17:24,309
if you look at dr. Campos you can say

00:17:20,740 --> 00:17:26,049
that I linked against the other service

00:17:24,309 --> 00:17:29,770
so build that so it will build that

00:17:26,049 --> 00:17:32,740
service first and then builds the builds

00:17:29,770 --> 00:17:34,960
the dependent services so have you found

00:17:32,740 --> 00:17:37,419
any solution to solve that in paccar

00:17:34,960 --> 00:17:39,429
where you have a list of services which

00:17:37,419 --> 00:17:43,419
needs to be topologically sorted and

00:17:39,429 --> 00:17:45,789
then built I would could you come in on

00:17:43,419 --> 00:17:47,710
that yeah actually that is a very good

00:17:45,789 --> 00:17:50,890
question because when you start playing

00:17:47,710 --> 00:17:53,710
with docker it with Parker sorry you

00:17:50,890 --> 00:17:57,190
realize that it takes really long time

00:17:53,710 --> 00:18:02,350
to converge to get the results to get

00:17:57,190 --> 00:18:06,070
your artifact and this only solution

00:18:02,350 --> 00:18:10,600
that a I came up with is to break the

00:18:06,070 --> 00:18:14,020
process down into smaller JSON snippet

00:18:10,600 --> 00:18:18,190
so essentially i create intermediate

00:18:14,020 --> 00:18:21,159
imagery sir so if something goes wrong I

00:18:18,190 --> 00:18:24,390
can restart from in an intermediate step

00:18:21,159 --> 00:18:27,700
that is what I what I'm doing right now

00:18:24,390 --> 00:18:33,600
not right anybody knows a better way

00:18:27,700 --> 00:18:33,600
more than happy to to improve thank you

00:18:33,630 --> 00:18:45,070
anyone else yeah so my question is this

00:18:41,080 --> 00:18:46,690
that basically so all of this involves a

00:18:45,070 --> 00:18:48,280
lot of scripting basically we write a

00:18:46,690 --> 00:18:51,790
lot of puppet scripts and this and that

00:18:48,280 --> 00:18:54,850
and you know it's like even Jenkins has

00:18:51,790 --> 00:18:58,120
a lot of scripts inside it and the thing

00:18:54,850 --> 00:18:59,890
is this that these things can be pruned

00:18:58,120 --> 00:19:03,280
pull out of bugs specially if you want

00:18:59,890 --> 00:19:06,940
to add add more capacity into a running

00:19:03,280 --> 00:19:10,900
system or you know upscaling and

00:19:06,940 --> 00:19:12,960
downscaling systems as well so how do

00:19:10,900 --> 00:19:15,370
you apply all of this to all of this

00:19:12,960 --> 00:19:18,160
basically because because this software

00:19:15,370 --> 00:19:20,620
in itself so you could end up with a

00:19:18,160 --> 00:19:25,120
recursive problem because you need to be

00:19:20,620 --> 00:19:30,010
able to contain rise and do all of this

00:19:25,120 --> 00:19:33,520
stuff to your CI system itself as well

00:19:30,010 --> 00:19:36,480
right ah not so I forgot your pressure

00:19:33,520 --> 00:19:42,400
on correctly are you asking how can I

00:19:36,480 --> 00:19:44,800
scale that so my question is is that how

00:19:42,400 --> 00:19:52,780
can you apply continuous integration do

00:19:44,800 --> 00:19:55,480
your continuous integration system the

00:19:52,780 --> 00:20:02,890
same interesting why not try if I can

00:19:55,480 --> 00:20:05,230
respond proficient I think that we need

00:20:02,890 --> 00:20:07,210
to discuss it offline because I need to

00:20:05,230 --> 00:20:13,080
get better and the saying what you

00:20:07,210 --> 00:20:13,080
really want to achieve yeah

00:20:18,500 --> 00:20:25,590
so I just wanted to ask your opinion in

00:20:22,020 --> 00:20:28,110
terms of the saltstack stands and how we

00:20:25,590 --> 00:20:32,550
can use how saltstack compares again

00:20:28,110 --> 00:20:35,040
sensible and in your infrastructure that

00:20:32,550 --> 00:20:38,370
you explain so I've never used the

00:20:35,040 --> 00:20:41,910
source doc I know that many people who

00:20:38,370 --> 00:20:44,220
are currently using ansible like so

00:20:41,910 --> 00:20:48,750
short stock because it allows you to

00:20:44,220 --> 00:20:52,410
scale to a very I 0 degree then interval

00:20:48,750 --> 00:20:55,260
allows you to do so I have no personal

00:20:52,410 --> 00:21:00,480
experience with the sorcerer I know that

00:20:55,260 --> 00:21:03,140
the it perform they read 30 thanks and

00:21:00,480 --> 00:21:03,140
it's Python be

00:21:10,169 --> 00:21:17,169
so one of the things that I had against

00:21:15,370 --> 00:21:19,809
the continuous deployment using

00:21:17,169 --> 00:21:23,320
containers was that one of the arguments

00:21:19,809 --> 00:21:26,559
I got against that was that patching the

00:21:23,320 --> 00:21:29,440
server's becomes a lot difficult so if

00:21:26,559 --> 00:21:31,690
you have a services running on a let's

00:21:29,440 --> 00:21:34,240
say a vm and have multiple services

00:21:31,690 --> 00:21:36,370
running there especially applying

00:21:34,240 --> 00:21:37,870
security patches to the server becomes

00:21:36,370 --> 00:21:40,870
easier because you just have to pass the

00:21:37,870 --> 00:21:42,580
host and everything is patched how do

00:21:40,870 --> 00:21:47,799
you solve that in the controller

00:21:42,580 --> 00:21:50,350
containerized environment so yeah there

00:21:47,799 --> 00:21:55,200
are obviously a couple of approach that

00:21:50,350 --> 00:22:00,850
you can adopt either you can store

00:21:55,200 --> 00:22:04,240
imagery in private registry if but even

00:22:00,850 --> 00:22:07,870
though you are storing a credential in

00:22:04,240 --> 00:22:11,529
in an image which is not a very good

00:22:07,870 --> 00:22:17,049
idea from a security perspective you can

00:22:11,529 --> 00:22:20,950
adopt services like both etc which

00:22:17,049 --> 00:22:25,440
allows you to store potentials in a much

00:22:20,950 --> 00:22:30,789
safer way so that they are not so on

00:22:25,440 --> 00:22:35,940
containers yeah time for one last

00:22:30,789 --> 00:22:39,029
question no right thank you very much

00:22:35,940 --> 00:22:39,029
thank you

00:22:46,290 --> 00:22:48,350

YouTube URL: https://www.youtube.com/watch?v=QFPtArm4Wc0


