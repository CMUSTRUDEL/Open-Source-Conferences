Title: OpenStack Works, so now what? by Monty Taylor
Publication date: 2015-08-06
Playlist: Pycon Australia 2015 OpenStack Minconf
Description: 
	While we've made a great big hoopla over the last few years about deploying OpenStack and what our development process is and other fascinating topics, it turns out that a cloud is not particularly interesting in and of itself. A cloud is a thing that you use to, well, DO something.

The OpenStack Infra team DO something with OpenStack clouds every day. It turns out it is related to both developing and deploying OpenStack, but let's forget about that for now. What we really are is a giant machine for manipulating OpenStacks, and we've gotten rather good at it. As a result of that ... we've been good little hackers and have produced a library, called shade, which is the embodiment of the knowledge we've gathered in trying to do useful things. shade is at the heart of our nodepool project, as well as the basis of the latest set of Ansible modules for OpenStack.

So - Let's talk about shade. And let's talk about Ansible. And let's talk about using clouds to actually perform work.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:09,930 --> 00:00:13,890
Monty is going to give us another tour

00:00:11,910 --> 00:00:15,910
so now what so hopefully this is

00:00:13,890 --> 00:00:18,820
teachers thank you much

00:00:15,910 --> 00:00:22,660
oh hello so for any of you who might

00:00:18,820 --> 00:00:24,400
have been in here earlier today I I will

00:00:22,660 --> 00:00:26,320
make some forward-looking statements

00:00:24,400 --> 00:00:30,460
that there will be less references to

00:00:26,320 --> 00:00:33,040
Shakespeare or Russian acting teachers

00:00:30,460 --> 00:00:36,420
that you've never heard of I'm not going

00:00:33,040 --> 00:00:42,370
to say zero but but I think I think less

00:00:36,420 --> 00:00:44,440
less for sure so so as with before all

00:00:42,370 --> 00:00:47,860
of these slides are on the Internet

00:00:44,440 --> 00:00:49,239
these are actually on the internet so

00:00:47,860 --> 00:00:51,460
you can actually go to these right now

00:00:49,239 --> 00:00:55,300
and they're there and you can clone

00:00:51,460 --> 00:00:58,420
these from that repo right now again as

00:00:55,300 --> 00:01:01,870
with earlier i have i'm not really sure

00:00:58,420 --> 00:01:04,030
why you want to but you know I just you

00:01:01,870 --> 00:01:09,460
do what you want to do and it's not for

00:01:04,030 --> 00:01:11,320
me to judge great so so I will actually

00:01:09,460 --> 00:01:14,140
go through this and I'm going to try to

00:01:11,320 --> 00:01:17,460
not talk too much about meta about what

00:01:14,140 --> 00:01:19,959
I'm talking about so so I work for a

00:01:17,460 --> 00:01:25,720
Silicon Valley startup company that you

00:01:19,959 --> 00:01:28,959
may or may not have heard of it will the

00:01:25,720 --> 00:01:31,090
the various specifics of this well

00:01:28,959 --> 00:01:36,069
tomorrow instead of that thing there

00:01:31,090 --> 00:01:39,039
will be a nice green rectangle tomorrow

00:01:36,069 --> 00:01:40,990
yeah and other than that we won't say

00:01:39,039 --> 00:01:42,220
other things um so distinguished

00:01:40,990 --> 00:01:47,410
technologists in the in the cloud

00:01:42,220 --> 00:01:49,030
business unit you know we do cloud we're

00:01:47,410 --> 00:01:52,810
kind of big into the OpenStack thing

00:01:49,030 --> 00:01:54,489
which brings me to I I spend most of my

00:01:52,810 --> 00:01:58,119
time I'm walking around saying gourd

00:01:54,489 --> 00:02:00,039
OpenStack just open sac open Sacketts we

00:01:58,119 --> 00:02:03,509
need to make up being John OpenStack

00:02:00,039 --> 00:02:06,310
movie that would be the worst movie ever

00:02:03,509 --> 00:02:08,489
God jeez anyway so I said in the

00:02:06,310 --> 00:02:10,630
technical committee a board of directors

00:02:08,489 --> 00:02:14,440
we should had a lovely Board of

00:02:10,630 --> 00:02:16,360
Directors meeting Tuesday us time so

00:02:14,440 --> 00:02:18,940
wednesday this time or maybe it was

00:02:16,360 --> 00:02:21,400
split a little bit i can't keep possibly

00:02:18,940 --> 00:02:23,020
up with my head it was in austin and we

00:02:21,400 --> 00:02:24,580
discussed I think we discussed

00:02:23,020 --> 00:02:26,500
discussing things most of the time and

00:02:24,580 --> 00:02:28,390
we might have discussed the process for

00:02:26,500 --> 00:02:29,010
discussing things it was tons of fun you

00:02:28,390 --> 00:02:29,970
should've been there

00:02:29,010 --> 00:02:31,530
there's also a lot of drinking

00:02:29,970 --> 00:02:35,750
afterwards which was actually a lot of

00:02:31,530 --> 00:02:39,030
fun and with with Josh I work on the

00:02:35,750 --> 00:02:40,500
open Zach infrastructure core team which

00:02:39,030 --> 00:02:42,780
we'll talk about a little bit in this

00:02:40,500 --> 00:02:45,000
because it helps me to talk about me

00:02:42,780 --> 00:02:47,459
which is my favorite subject as Anita

00:02:45,000 --> 00:02:51,390
points out I'm a Leo and that means that

00:02:47,459 --> 00:02:52,650
I I particularly like myself so so we

00:02:51,390 --> 00:02:55,560
are going to talk about OpenStack in

00:02:52,650 --> 00:02:57,890
this one you have to find me at the bar

00:02:55,560 --> 00:03:00,090
if you want to talk more about acting

00:02:57,890 --> 00:03:02,579
talk about OpenStack we're going to talk

00:03:00,090 --> 00:03:04,319
about my application in OpenStack I

00:03:02,579 --> 00:03:08,099
consider myself to be one of the world's

00:03:04,319 --> 00:03:09,810
largest OpenStack users and I happy to

00:03:08,099 --> 00:03:13,470
go toe-to-toe with anybody who thinks

00:03:09,810 --> 00:03:15,599
they have a larger exact application it

00:03:13,470 --> 00:03:18,780
helps that I have free public clouds to

00:03:15,599 --> 00:03:21,930
run mine on so I don't have to do that

00:03:18,780 --> 00:03:23,569
then we if we if we get to it we'll talk

00:03:21,930 --> 00:03:27,750
about your applications and how it might

00:03:23,569 --> 00:03:29,489
be relevant to you but this is a 30

00:03:27,750 --> 00:03:31,709
minute talks lot and this is normally a

00:03:29,489 --> 00:03:35,099
40 minute talk and I normally go over so

00:03:31,709 --> 00:03:39,120
so we'll see where we get and what not

00:03:35,099 --> 00:03:42,510
um so OpenStack it's open source bad

00:03:39,120 --> 00:03:44,519
software yeah it provides you compute

00:03:42,510 --> 00:03:47,879
Network and storage and actually sort of

00:03:44,519 --> 00:03:51,209
a poorly sized image for for this slide

00:03:47,879 --> 00:03:53,519
I'm sorry it's also a little bit light

00:03:51,209 --> 00:03:55,980
there what you you really certainly

00:03:53,519 --> 00:03:57,299
can't read very well is the is the top

00:03:55,980 --> 00:03:59,160
little bar so it's you know openstax

00:03:57,299 --> 00:04:01,049
giving an abstraction layer for compute

00:03:59,160 --> 00:04:03,750
Network and storage resources on top of

00:04:01,049 --> 00:04:05,940
some hardware and up there there's this

00:04:03,750 --> 00:04:09,629
little sort of you know let's hide it in

00:04:05,940 --> 00:04:12,449
the corner your application and and I

00:04:09,629 --> 00:04:14,159
think this is this is actually way

00:04:12,449 --> 00:04:15,780
better graphic design than anything I

00:04:14,159 --> 00:04:19,349
would I would draw so thanks to the

00:04:15,780 --> 00:04:21,359
person who drew this image I think if

00:04:19,349 --> 00:04:22,710
I'd drawn this well there's a couple of

00:04:21,359 --> 00:04:25,409
slides later where I drew something and

00:04:22,710 --> 00:04:27,389
you'll you'll see what the differences I

00:04:25,409 --> 00:04:28,560
think that your applications needs to be

00:04:27,389 --> 00:04:30,000
a little bit more prominent because it

00:04:28,560 --> 00:04:31,289
turns out that a cloud without your

00:04:30,000 --> 00:04:33,930
applications on it is completely and

00:04:31,289 --> 00:04:37,770
utterly useless well I possibly will sit

00:04:33,930 --> 00:04:39,900
there generating a lot of heat to

00:04:37,770 --> 00:04:41,900
contribute to the eventual heat death of

00:04:39,900 --> 00:04:43,550
the universe but but

00:04:41,900 --> 00:04:46,610
that is not something you did not a

00:04:43,550 --> 00:04:49,340
thing you you just use you don't just

00:04:46,610 --> 00:04:50,990
cloud something like it sits there to do

00:04:49,340 --> 00:04:52,729
something it's there to to run your

00:04:50,990 --> 00:04:55,460
applications and if it's not doing that

00:04:52,729 --> 00:04:57,560
then it's kind of a waste of its kind of

00:04:55,460 --> 00:04:59,449
voice time so um to be a little bit

00:04:57,560 --> 00:05:00,860
clearer about the year applications part

00:04:59,449 --> 00:05:02,600
of that I thought it would be useful to

00:05:00,860 --> 00:05:05,509
to look at a couple of specific use

00:05:02,600 --> 00:05:07,699
cases I have a couple and if you have

00:05:05,509 --> 00:05:11,780
different ones that's tough because I'm

00:05:07,699 --> 00:05:13,910
up here so so mine mine are these as

00:05:11,780 --> 00:05:15,610
application developer I want to deploy

00:05:13,910 --> 00:05:17,960
and run an application on the internet

00:05:15,610 --> 00:05:18,830
so that customers all over the world can

00:05:17,960 --> 00:05:20,570
consume it turns out there's this

00:05:18,830 --> 00:05:23,780
wonderful piece of technology called the

00:05:20,570 --> 00:05:26,930
Internet if you haven't heard of it it's

00:05:23,780 --> 00:05:29,300
it's really cool it connects people all

00:05:26,930 --> 00:05:30,949
over the world to each other and so I

00:05:29,300 --> 00:05:32,870
want funding to deploy an application I

00:05:30,949 --> 00:05:36,740
kind of like it to be able to take

00:05:32,870 --> 00:05:40,759
advantage of such a lovely technological

00:05:36,740 --> 00:05:42,410
invention did might that might seem like

00:05:40,759 --> 00:05:43,820
it's an obvious thing but but it turns

00:05:42,410 --> 00:05:46,280
out you can sort of has to have to point

00:05:43,820 --> 00:05:48,560
that out and then they're more

00:05:46,280 --> 00:05:49,729
appropriately to me as an application

00:05:48,560 --> 00:05:52,639
developer I want to deploy my

00:05:49,729 --> 00:05:55,160
applications across multiple clouds so

00:05:52,639 --> 00:05:57,080
that my service survives it turns out

00:05:55,160 --> 00:05:59,990
that my users don't care if one of my

00:05:57,080 --> 00:06:01,490
clouds if my service goes down because

00:05:59,990 --> 00:06:03,740
one of my clouds has a problem and goes

00:06:01,490 --> 00:06:05,930
down my users don't really care about

00:06:03,740 --> 00:06:08,030
why my service is down they just care

00:06:05,930 --> 00:06:10,580
that my service is down and so I would

00:06:08,030 --> 00:06:15,820
like to be as resilient as possible you

00:06:10,580 --> 00:06:18,470
know within reason to not just micro

00:06:15,820 --> 00:06:21,349
outages but also also macro things

00:06:18,470 --> 00:06:24,320
things happen like entire clouds losing

00:06:21,349 --> 00:06:25,639
the ability to resolve DNS not that

00:06:24,320 --> 00:06:28,669
that's ever happened before to any of

00:06:25,639 --> 00:06:30,409
our public cloud providers but but it

00:06:28,669 --> 00:06:32,240
happens and then of course you learn

00:06:30,409 --> 00:06:34,580
from that and you you start not using

00:06:32,240 --> 00:06:36,970
your club providers DNS but that's you

00:06:34,580 --> 00:06:40,010
know thank you google for providing

00:06:36,970 --> 00:06:41,000
worldwide dns services god i'm turning

00:06:40,010 --> 00:06:43,909
so i'm going to do those I want to do

00:06:41,000 --> 00:06:45,409
those things um and and hopefully those

00:06:43,909 --> 00:06:47,419
things don't sound too outrageous

00:06:45,409 --> 00:06:49,370
because it turns out their work this is

00:06:47,419 --> 00:06:51,860
a this is a nice graph that has some

00:06:49,370 --> 00:06:53,330
numbers and some lines on it

00:06:51,860 --> 00:06:56,330
and and what this graph tells you is

00:06:53,330 --> 00:06:59,780
that stuff is happening what it actually

00:06:56,330 --> 00:07:02,449
is is it's a graph of of the activity of

00:06:59,780 --> 00:07:06,530
our node pool that spends up in tears

00:07:02,449 --> 00:07:09,080
down nodes across this is across three

00:07:06,530 --> 00:07:11,210
different clouds but we treat them all

00:07:09,080 --> 00:07:12,830
as one thing so we we spent up and tear

00:07:11,210 --> 00:07:15,610
down between ten and twenty thousand vm

00:07:12,830 --> 00:07:19,520
zadeh in the application that we work on

00:07:15,610 --> 00:07:23,509
this is a across three soon to be six

00:07:19,520 --> 00:07:24,979
clouds which i think is pretty cool the

00:07:23,509 --> 00:07:26,419
more clouds we have in a better because

00:07:24,979 --> 00:07:28,849
that means we can lose more things and

00:07:26,419 --> 00:07:32,330
and still provide service to our users

00:07:28,849 --> 00:07:34,639
and we do this only using opens a kpi's

00:07:32,330 --> 00:07:37,069
we absolutely categorically refuse to

00:07:34,639 --> 00:07:38,900
use any vendor specific anything or

00:07:37,069 --> 00:07:40,550
anything that isn't the opens a KPI or

00:07:38,900 --> 00:07:43,819
anything that isn't just using bog

00:07:40,550 --> 00:07:44,779
standard Python star client stuff I mean

00:07:43,819 --> 00:07:46,099
other than the wrapper that I'm going to

00:07:44,779 --> 00:07:48,050
talk about in a couple minutes but um

00:07:46,099 --> 00:07:49,939
but it's all it's all opens a KP eyes

00:07:48,050 --> 00:07:52,909
there's nothing special there's nothing

00:07:49,939 --> 00:07:53,900
extra it's just OpenStack and we've been

00:07:52,909 --> 00:07:56,719
doing this in production for a couple

00:07:53,900 --> 00:07:58,490
years so I mean this is this is the sort

00:07:56,719 --> 00:08:03,259
of first part of title it works it's

00:07:58,490 --> 00:08:05,240
working this is this works great as a as

00:08:03,259 --> 00:08:06,529
a little bit more information that the

00:08:05,240 --> 00:08:09,110
application I'm talking about here is

00:08:06,529 --> 00:08:11,300
the open Zac infosystems it's the it's

00:08:09,110 --> 00:08:15,620
the developer infrastructure for the

00:08:11,300 --> 00:08:16,819
OpenStack project we have we have a lot

00:08:15,620 --> 00:08:19,789
of developers we've been a very

00:08:16,819 --> 00:08:23,330
successful open source project as as you

00:08:19,789 --> 00:08:24,830
probably know because you're here or

00:08:23,330 --> 00:08:25,729
maybe you just randomly walked in from

00:08:24,830 --> 00:08:28,699
the street you have no idea what I'm

00:08:25,729 --> 00:08:32,360
talking about in which case what a weird

00:08:28,699 --> 00:08:35,959
day for you in any case so we have we

00:08:32,360 --> 00:08:38,449
have a lot of developers and and as much

00:08:35,959 --> 00:08:40,279
as that's great lots of developers have

00:08:38,449 --> 00:08:45,440
this annoying tendency to produce lots

00:08:40,279 --> 00:08:46,329
of lots of patches we couple that with

00:08:45,440 --> 00:08:49,100
the fact that we've decided

00:08:46,329 --> 00:08:52,699
organizationally to do this thing we

00:08:49,100 --> 00:08:54,620
refer to as gated commits which is that

00:08:52,699 --> 00:08:57,050
we run full amounts of integration

00:08:54,620 --> 00:08:58,490
testing on on every single patch and

00:08:57,050 --> 00:09:00,350
every single revision of a patch that

00:08:58,490 --> 00:09:02,600
anybody uploads into our system twice

00:09:00,350 --> 00:09:04,100
because we we run them when they upload

00:09:02,600 --> 00:09:06,769
them and we also run them again

00:09:04,100 --> 00:09:10,220
right before landing and this is all non

00:09:06,769 --> 00:09:14,089
by possible and runs a lot so if you can

00:09:10,220 --> 00:09:15,680
imagine how many patches that is each

00:09:14,089 --> 00:09:17,240
one of these tests that we run we run on

00:09:15,680 --> 00:09:19,550
a single use crowds life because

00:09:17,240 --> 00:09:23,000
integration tests for us is install a

00:09:19,550 --> 00:09:24,889
cloud and so although I'm sure it's

00:09:23,000 --> 00:09:28,279
possible what you probably don't want to

00:09:24,889 --> 00:09:29,720
do is to reuse a node between from one

00:09:28,279 --> 00:09:32,600
test to the next test that you

00:09:29,720 --> 00:09:34,310
previously installed a cloud on I guess

00:09:32,600 --> 00:09:35,750
we could clean that up but I've got a

00:09:34,310 --> 00:09:38,120
cloud so I just delete them in and

00:09:35,750 --> 00:09:39,259
create new ones and this is this is

00:09:38,120 --> 00:09:41,720
where we get some really nice cloud

00:09:39,259 --> 00:09:43,759
scale-out cloud native kind of kind of

00:09:41,720 --> 00:09:46,310
application stuff going on so this comes

00:09:43,759 --> 00:09:47,569
out to this is probably a slightly old

00:09:46,310 --> 00:09:49,069
number because the number is always

00:09:47,569 --> 00:09:51,579
increasing and I can't keep up with it

00:09:49,069 --> 00:09:54,920
but last time I counted it was around

00:09:51,579 --> 00:09:57,199
1.7 million tests jobs in six months

00:09:54,920 --> 00:10:01,430
which comes out to about 15 million

00:09:57,199 --> 00:10:03,709
tests run in a month and this in

00:10:01,430 --> 00:10:05,720
addition to that generates about 18

00:10:03,709 --> 00:10:07,699
terabytes of log data in every six

00:10:05,720 --> 00:10:10,189
months because we don't just test grab

00:10:07,699 --> 00:10:11,930
the logs from the from the test but we

00:10:10,189 --> 00:10:13,130
have to grab all of the operational logs

00:10:11,930 --> 00:10:16,430
of the cloud that we just deployed

00:10:13,130 --> 00:10:18,529
because if you want to analyze what went

00:10:16,430 --> 00:10:21,319
wrong in your change that you push up as

00:10:18,529 --> 00:10:22,339
a developer it's entirely likely that

00:10:21,319 --> 00:10:24,139
you need to look through the operation

00:10:22,339 --> 00:10:25,279
logs over the of the running of the

00:10:24,139 --> 00:10:26,810
cloud that was running when the test

00:10:25,279 --> 00:10:30,319
failed so that you can figure out what

00:10:26,810 --> 00:10:32,029
the heck went wrong with it um and and

00:10:30,319 --> 00:10:33,589
additionally I think what's really cool

00:10:32,029 --> 00:10:36,589
about this other than the fact that it

00:10:33,589 --> 00:10:37,910
works at all is that we don't have any

00:10:36,589 --> 00:10:40,339
servers now that's a slight lie we

00:10:37,910 --> 00:10:41,269
actually have we have some servers that

00:10:40,339 --> 00:10:42,860
we're about to start doing something

00:10:41,269 --> 00:10:46,339
with but as of right now in production

00:10:42,860 --> 00:10:48,170
we have no physical servers this runs

00:10:46,339 --> 00:10:52,250
completely and totally across HP and

00:10:48,170 --> 00:10:55,000
rackspace's public routes which is which

00:10:52,250 --> 00:10:58,009
is kind of a kind of a neat thing um so

00:10:55,000 --> 00:10:59,500
as opposed to the lovely thing drawn by

00:10:58,009 --> 00:11:01,730
a marketing person from earlier this is

00:10:59,500 --> 00:11:06,110
this is what happens when I try and draw

00:11:01,730 --> 00:11:10,009
diagrams so sorry then I've got this up

00:11:06,110 --> 00:11:11,930
for a sort of a reason not because I

00:11:10,009 --> 00:11:14,029
want to go through how all of our boxes

00:11:11,930 --> 00:11:15,829
and lines work and there's things left

00:11:14,029 --> 00:11:17,480
off of this for simplicity if you can

00:11:15,829 --> 00:11:18,800
believe that but there

00:11:17,480 --> 00:11:20,300
is there so there's sort of a couple of

00:11:18,800 --> 00:11:22,190
different types of things going on here

00:11:20,300 --> 00:11:24,399
all interrelated to produce an

00:11:22,190 --> 00:11:27,440
application a service for our users

00:11:24,399 --> 00:11:29,990
we've got a couple of things Garrett

00:11:27,440 --> 00:11:31,370
zool node pool are each and they're sort

00:11:29,990 --> 00:11:33,740
of larger boxes you might even be able

00:11:31,370 --> 00:11:35,480
to read the word in them they're they're

00:11:33,740 --> 00:11:38,649
single snowflake things they sit there

00:11:35,480 --> 00:11:41,089
as a single sort of more traditional app

00:11:38,649 --> 00:11:42,589
they're also very nice single points of

00:11:41,089 --> 00:11:45,949
failure but that's a whole other other

00:11:42,589 --> 00:11:47,779
conversation we also have some things

00:11:45,949 --> 00:11:49,399
like this pile of Jenkins servers over

00:11:47,779 --> 00:11:50,959
here that are that are a little bit more

00:11:49,399 --> 00:11:53,209
traditional scale-out we they're not

00:11:50,959 --> 00:11:55,070
dynamic we don't have Jenkins masters is

00:11:53,209 --> 00:11:58,070
just spinning up and tearing down based

00:11:55,070 --> 00:12:00,380
on load we have done capacity planning

00:11:58,070 --> 00:12:02,570
we know that a Jenkins master can handle

00:12:00,380 --> 00:12:04,070
about a hundred slaves before it falls

00:12:02,570 --> 00:12:08,540
over and dies under the weight of Java

00:12:04,070 --> 00:12:10,820
mutexes and and so we we know what our

00:12:08,540 --> 00:12:12,110
capacity is in our dynamic pool and so

00:12:10,820 --> 00:12:14,570
we have the appropriate number of

00:12:12,110 --> 00:12:16,130
Jenkins masters's to handle the max

00:12:14,570 --> 00:12:19,130
capacity of what we might dynamically

00:12:16,130 --> 00:12:21,110
spin up and if we increased our total

00:12:19,130 --> 00:12:22,850
aggregate capacity we would think we'd

00:12:21,110 --> 00:12:24,050
add a couple more masters it wouldn't

00:12:22,850 --> 00:12:25,339
you know would be that big of a deal and

00:12:24,050 --> 00:12:27,470
then in the middle I've got this sort of

00:12:25,339 --> 00:12:28,610
couple clouds they're smaller than

00:12:27,470 --> 00:12:30,350
everything else which is amusing because

00:12:28,610 --> 00:12:33,769
they're actually quite large but you

00:12:30,350 --> 00:12:37,490
know graphic design so and that's that's

00:12:33,769 --> 00:12:40,970
a fully dynamic load driven automatic

00:12:37,490 --> 00:12:42,889
scaling system and all of all three

00:12:40,970 --> 00:12:46,040
types of those things work together in

00:12:42,889 --> 00:12:48,199
concert to produce a service for our for

00:12:46,040 --> 00:12:49,910
our users so I mentioned Garrett it's

00:12:48,199 --> 00:12:52,760
sort of one of the one of the

00:12:49,910 --> 00:12:54,110
ringleaders of this bad boy it's a

00:12:52,760 --> 00:12:56,240
traditional enterprise java application

00:12:54,110 --> 00:12:58,160
it's terrible terrible terrible terrible

00:12:56,240 --> 00:13:01,519
enterprise job application like it's

00:12:58,160 --> 00:13:03,319
it's exactly if you if you wanted to

00:13:01,519 --> 00:13:05,060
describe what's the worst thing you

00:13:03,319 --> 00:13:06,800
could run on a cloud right like if you

00:13:05,060 --> 00:13:08,839
want to go like you know let's talk in

00:13:06,800 --> 00:13:11,540
air quotes about clouds this would be it

00:13:08,839 --> 00:13:13,279
it's like war file and it like stores a

00:13:11,540 --> 00:13:14,690
whole bunch stuff on local disk and a

00:13:13,279 --> 00:13:17,269
whole bunch stuff in local database and

00:13:14,690 --> 00:13:19,910
it has no scale out no Federation

00:13:17,269 --> 00:13:22,399
capabilities whatsoever it's just sort

00:13:19,910 --> 00:13:25,370
of their runs great we run in a single

00:13:22,399 --> 00:13:30,470
dova vm a single nova vm with a sender

00:13:25,370 --> 00:13:32,330
volume and it's did that

00:13:30,470 --> 00:13:36,350
fact of the architecture has never been

00:13:32,330 --> 00:13:39,590
a problem it's working fine there's I'm

00:13:36,350 --> 00:13:41,750
sure at some point we could completely

00:13:39,590 --> 00:13:43,670
rewrite it to make it sort of more cloud

00:13:41,750 --> 00:13:45,170
native but it's working fine we don't

00:13:43,670 --> 00:13:47,570
have probably have other problems to

00:13:45,170 --> 00:13:49,820
solve right so this is stickin in a vm

00:13:47,570 --> 00:13:51,560
it's fine we do have a scale out form of

00:13:49,820 --> 00:13:52,910
get replicas because we have two

00:13:51,560 --> 00:13:54,800
thousand developers so if two thousand

00:13:52,910 --> 00:13:57,230
people hit the j get get server on this

00:13:54,800 --> 00:13:58,820
for all of their cloning purposes i

00:13:57,230 --> 00:14:00,920
don't think it would actually handle

00:13:58,820 --> 00:14:03,410
that scaling but get actually has good

00:14:00,920 --> 00:14:05,750
replication capabilities so we have

00:14:03,410 --> 00:14:07,760
people hit a replica farm which is a

00:14:05,750 --> 00:14:10,790
surprisingly hard thing to run by the

00:14:07,760 --> 00:14:12,890
way leggett get distributes really well

00:14:10,790 --> 00:14:14,870
i mean it's it's really a cpu intensive

00:14:12,890 --> 00:14:17,450
it when you have 2,000 developers

00:14:14,870 --> 00:14:20,630
hitting a get farm that you learned some

00:14:17,450 --> 00:14:23,240
things about about surfing get em anyway

00:14:20,630 --> 00:14:24,620
so this is a this is a graph in and of

00:14:23,240 --> 00:14:26,660
itself it's not that interesting it's a

00:14:24,620 --> 00:14:29,570
blue line with a green line and a red

00:14:26,660 --> 00:14:32,090
line but this is sort of a graph of on

00:14:29,570 --> 00:14:33,410
that single VM all of the all of the

00:14:32,090 --> 00:14:35,450
events that come in so this is somebody

00:14:33,410 --> 00:14:37,850
uploads a new patch set and it makes a

00:14:35,450 --> 00:14:42,020
comment mergers a change any of those

00:14:37,850 --> 00:14:44,510
sorts of things per hour and we're were

00:14:42,020 --> 00:14:47,600
you know it's it's I don't know this out

00:14:44,510 --> 00:14:48,800
of context if anybody else is is really

00:14:47,600 --> 00:14:50,420
more about trend lines and I'll

00:14:48,800 --> 00:14:54,230
associate this with something in a

00:14:50,420 --> 00:14:59,050
second but we are I believe the largest

00:14:54,230 --> 00:15:00,740
Garrett in the world so that's something

00:14:59,050 --> 00:15:03,980
there's something like that but it's

00:15:00,740 --> 00:15:05,960
that's all in a single nova vm so so a

00:15:03,980 --> 00:15:09,490
few more numbers just because I like

00:15:05,960 --> 00:15:12,530
numbers so we we get somewhere about

00:15:09,490 --> 00:15:16,100
2500 changes every week which means that

00:15:12,530 --> 00:15:18,020
we get about 5 15 thousand change

00:15:16,100 --> 00:15:19,310
revisions every week because it changed

00:15:18,020 --> 00:15:20,750
as a patch somebody wants to wrote run

00:15:19,310 --> 00:15:22,580
but they get code reviewed so they got

00:15:20,750 --> 00:15:26,330
iterate on the on the patch before it

00:15:22,580 --> 00:15:29,450
goes in and the last time we tracked it

00:15:26,330 --> 00:15:32,570
and I should probably go beg Sean to do

00:15:29,450 --> 00:15:34,010
the math to check this again but last

00:15:32,570 --> 00:15:36,590
time we tracted it was we were we were

00:15:34,010 --> 00:15:39,050
landing about 10,000 new changes every

00:15:36,590 --> 00:15:40,820
42 days so it's a it's a very active

00:15:39,050 --> 00:15:43,190
very active thing to deal with with all

00:15:40,820 --> 00:15:44,150
that scaling so when somebody proposes

00:15:43,190 --> 00:15:46,460
to change

00:15:44,150 --> 00:15:48,950
ten thousand changes 15,000 change

00:15:46,460 --> 00:15:50,450
revisions to sort of give you context of

00:15:48,950 --> 00:15:52,100
what we're doing in there every time

00:15:50,450 --> 00:15:53,360
somebody proposes to change we we do all

00:15:52,100 --> 00:15:55,550
these things we have some things that

00:15:53,360 --> 00:15:58,700
just run some style checks we spent up a

00:15:55,550 --> 00:16:01,010
bunch of devstack instances each on

00:15:58,700 --> 00:16:02,960
their own thing and then inside of those

00:16:01,010 --> 00:16:06,200
there's there's a whole bunch of second

00:16:02,960 --> 00:16:09,500
level guests to get they get spun up so

00:16:06,200 --> 00:16:11,390
to help us manage that so we got this we

00:16:09,500 --> 00:16:14,720
got this Garrett people upload changes

00:16:11,390 --> 00:16:17,840
into it it spews an event stream out the

00:16:14,720 --> 00:16:21,200
back end and we need to then if we're

00:16:17,840 --> 00:16:22,940
going to run tests on single-use nodes

00:16:21,200 --> 00:16:26,000
we need to be able to spend up and tear

00:16:22,940 --> 00:16:28,490
down nodes in a cloud turns out that the

00:16:26,000 --> 00:16:30,650
way to do that is not to spin up the

00:16:28,490 --> 00:16:32,300
nodes on demand because if you're

00:16:30,650 --> 00:16:35,960
spending up and tearing down ten to

00:16:32,300 --> 00:16:38,300
20,000 nodes day if you want to spin

00:16:35,960 --> 00:16:40,250
them up when they're requested you're

00:16:38,300 --> 00:16:42,410
going to have you're going to have sort

00:16:40,250 --> 00:16:44,120
of a lead time and and ultimately you

00:16:42,410 --> 00:16:47,620
don't want developers sitting there

00:16:44,120 --> 00:16:50,630
waiting for an hour on a vm to spin up

00:16:47,620 --> 00:16:54,080
and if you think that an hour for a vm

00:16:50,630 --> 00:16:56,480
to spin up is a long time i do too but

00:16:54,080 --> 00:16:57,740
you know things happen and so you don't

00:16:56,480 --> 00:16:59,000
really want the developers you want the

00:16:57,740 --> 00:17:00,100
developer to get feedback as quickly as

00:16:59,000 --> 00:17:02,180
possible because you got a lot of them

00:17:00,100 --> 00:17:05,300
so this is sort of a cloud native we

00:17:02,180 --> 00:17:07,010
wrote this is all in Python it's it's

00:17:05,300 --> 00:17:08,720
not the most inventive name of a thing

00:17:07,010 --> 00:17:11,000
that we've ever written but it's

00:17:08,720 --> 00:17:14,300
basically a demon that is custom built

00:17:11,000 --> 00:17:18,140
for us and and keeps a ready set of

00:17:14,300 --> 00:17:20,930
nodes so it keeps keeps minimums and

00:17:18,140 --> 00:17:23,300
then sort of has some some ability to

00:17:20,930 --> 00:17:25,160
understand that we need to delete nodes

00:17:23,300 --> 00:17:27,530
and we're done with them and please spin

00:17:25,160 --> 00:17:28,580
up new ones for us um the cool part

00:17:27,530 --> 00:17:32,270
about though is that it's multi-cloud

00:17:28,580 --> 00:17:33,950
right it's yet this isn't a service this

00:17:32,270 --> 00:17:36,380
is an assert this doesn't run like like

00:17:33,950 --> 00:17:37,700
heat does in one cloud with some auto

00:17:36,380 --> 00:17:40,040
scaling features right that would be

00:17:37,700 --> 00:17:41,930
that's cool and that's great but we have

00:17:40,040 --> 00:17:43,520
multiple clouds and we want we want to

00:17:41,930 --> 00:17:45,620
keep an aggregate pool across them

00:17:43,520 --> 00:17:47,240
because ultimately the workload doesn't

00:17:45,620 --> 00:17:49,760
care if it's running in rackspace RHP

00:17:47,240 --> 00:17:51,320
couldn't care at all in fact if we

00:17:49,760 --> 00:17:52,820
started to grow workloads that cared

00:17:51,320 --> 00:17:54,560
which cloud they're running in we would

00:17:52,820 --> 00:17:57,370
consider that a problem because then our

00:17:54,560 --> 00:17:59,410
multiple clouds wouldn't be giving us

00:17:57,370 --> 00:18:02,020
a more resiliency they would they would

00:17:59,410 --> 00:18:06,820
be actually increasing our surface for

00:18:02,020 --> 00:18:08,440
for failure right and i think as i

00:18:06,820 --> 00:18:11,620
mentioned already this is fully elastic

00:18:08,440 --> 00:18:13,870
so we don't operate this we it sits

00:18:11,620 --> 00:18:15,550
there and runs as a team and it attracts

00:18:13,870 --> 00:18:17,350
what's coming in in the system and it

00:18:15,550 --> 00:18:19,090
and it spends up things as as we need

00:18:17,350 --> 00:18:21,970
them so it's it's kind of a it's the

00:18:19,090 --> 00:18:24,910
other end of the spectrum from from the

00:18:21,970 --> 00:18:26,710
from the garret thing so this is the

00:18:24,910 --> 00:18:28,920
this is their original garrett event

00:18:26,710 --> 00:18:31,420
stream graph that i showed you earlier

00:18:28,920 --> 00:18:33,670
and this is for the same corresponding

00:18:31,420 --> 00:18:35,530
time period a graph of the nodes that

00:18:33,670 --> 00:18:37,840
are in our in our node pool so you can

00:18:35,530 --> 00:18:40,330
sort of see the at the very least the

00:18:37,840 --> 00:18:43,240
sort of demand curves are matching

00:18:40,330 --> 00:18:46,480
they're basically as people interact

00:18:43,240 --> 00:18:49,450
with our code review system we we spent

00:18:46,480 --> 00:18:51,040
up and and release nodes in the pool but

00:18:49,450 --> 00:18:53,710
you can also see we sort of keep a

00:18:51,040 --> 00:18:56,110
constant baseline down here because we

00:18:53,710 --> 00:18:59,980
want to always have enough capacity to

00:18:56,110 --> 00:19:02,530
be able to respond when we need it so

00:18:59,980 --> 00:19:04,179
yeah so this is my this is my sort of

00:19:02,530 --> 00:19:07,350
exhortation that OpenStack OpenStack

00:19:04,179 --> 00:19:10,540
works yay we're done nothing else to do

00:19:07,350 --> 00:19:13,720
we can all go home everything is is

00:19:10,540 --> 00:19:15,850
happy but uh I promise to what's next

00:19:13,720 --> 00:19:19,780
and I think the answer to what's next is

00:19:15,850 --> 00:19:22,690
clearly Shakespeare but but by that I I

00:19:19,780 --> 00:19:24,520
may make it easier because all of this

00:19:22,690 --> 00:19:27,010
works but we have a dedicated team of

00:19:24,520 --> 00:19:30,640
full-time people working on making this

00:19:27,010 --> 00:19:33,400
work constantly and and actually at this

00:19:30,640 --> 00:19:35,920
point rather hefty team of really smart

00:19:33,400 --> 00:19:41,320
people um and and maybe it shouldn't be

00:19:35,920 --> 00:19:43,840
as hard as as as it is it's fenton that

00:19:41,320 --> 00:19:45,760
it works at all is amazing right and and

00:19:43,840 --> 00:19:48,760
go back a few years ago and this wasn't

00:19:45,760 --> 00:19:51,640
even a possibility so I mean thumbs up

00:19:48,760 --> 00:19:53,230
that it works now now let's sort of make

00:19:51,640 --> 00:19:54,850
this a little bit easier so I want to

00:19:53,230 --> 00:19:56,620
break down a couple use cases of things

00:19:54,850 --> 00:19:58,480
that that you want to do in order to

00:19:56,620 --> 00:20:00,400
make this work and some of these might

00:19:58,480 --> 00:20:03,309
seem a little bit ludicrously basic but

00:20:00,400 --> 00:20:05,530
I promise you they're not you you need

00:20:03,309 --> 00:20:07,179
to have if you're going to run a

00:20:05,530 --> 00:20:10,150
workload in a cloud you you must have a

00:20:07,179 --> 00:20:11,620
base image that you're going to boot so

00:20:10,150 --> 00:20:13,810
it's completely required you can't get

00:20:11,620 --> 00:20:16,540
around it you've got to make one or find

00:20:13,810 --> 00:20:19,150
one or get someone with and you need it

00:20:16,540 --> 00:20:21,400
in your cloud your image being on your

00:20:19,150 --> 00:20:24,880
local laptop doesn't help you need the

00:20:21,400 --> 00:20:28,300
image needs to be in the cloud you need

00:20:24,880 --> 00:20:29,830
to boot a vm it may sound silly to say

00:20:28,300 --> 00:20:31,450
that in order to run a workload in a

00:20:29,830 --> 00:20:34,000
cloud uni be able to boot a vm on the

00:20:31,450 --> 00:20:35,140
cloud but you know it's just trying to

00:20:34,000 --> 00:20:37,750
pick this down and as simple as possible

00:20:35,140 --> 00:20:38,890
it needs to be on the internet if it's

00:20:37,750 --> 00:20:43,360
not on the internet it's not very useful

00:20:38,890 --> 00:20:44,680
to me and and this apart we're just get

00:20:43,360 --> 00:20:47,050
ranked on things we've made this harder

00:20:44,680 --> 00:20:48,550
than it should be and last time I gave

00:20:47,050 --> 00:20:51,070
with this plot vo is in the in the

00:20:48,550 --> 00:20:53,800
audience easy you love it it's great

00:20:51,070 --> 00:20:55,690
heavy so get a base image there's a few

00:20:53,800 --> 00:20:58,210
ways you can do this I particularly like

00:20:55,690 --> 00:20:59,800
open sacks disk image builder tool it

00:20:58,210 --> 00:21:02,170
resonates with me and how I like to

00:20:59,800 --> 00:21:04,630
think about things it allows you a bunch

00:21:02,170 --> 00:21:06,480
of flexibility and you can you can

00:21:04,630 --> 00:21:08,410
compose a whole bunch of different

00:21:06,480 --> 00:21:11,830
content that you'd like to stitch

00:21:08,410 --> 00:21:13,780
together in different ways and and so

00:21:11,830 --> 00:21:16,480
I'm a really big fan of it and I use it

00:21:13,780 --> 00:21:17,860
for my stuff and infra is moving more

00:21:16,480 --> 00:21:20,320
and more towards using it to build all

00:21:17,860 --> 00:21:22,120
of our base images there's other tools

00:21:20,320 --> 00:21:24,400
from other people some people like

00:21:22,120 --> 00:21:25,680
Packer if you like Packer awesome that's

00:21:24,400 --> 00:21:28,300
that's really great you should use it

00:21:25,680 --> 00:21:30,880
you can also download pre pre built

00:21:28,300 --> 00:21:33,310
images from people like ubuntu a red hat

00:21:30,880 --> 00:21:34,720
or suz I you know get them right off

00:21:33,310 --> 00:21:36,160
their website and download them and

00:21:34,720 --> 00:21:38,770
upload them to your cloud and you're

00:21:36,160 --> 00:21:41,560
good to go right that would be so great

00:21:38,770 --> 00:21:43,810
if that was true so the first problem

00:21:41,560 --> 00:21:46,780
that you run into and interacting with

00:21:43,810 --> 00:21:48,040
very basic things in open set clouds has

00:21:46,780 --> 00:21:50,530
it with hypervisor image pal format

00:21:48,040 --> 00:21:52,270
we've we've got this really cool thing

00:21:50,530 --> 00:21:53,710
where opens a clouds can run on a

00:21:52,270 --> 00:21:56,770
multitude of hypervisors which is

00:21:53,710 --> 00:21:59,110
fantastic unfortunately we expose that

00:21:56,770 --> 00:22:03,280
that that implementation detail to the

00:21:59,110 --> 00:22:05,110
end users of that cloud so as for

00:22:03,280 --> 00:22:07,150
instance Rackspace requires you to

00:22:05,110 --> 00:22:12,250
upload images in VHD format because they

00:22:07,150 --> 00:22:14,860
use then HP uses cute uses kvm so you

00:22:12,250 --> 00:22:19,090
you upload images in QQ to format a

00:22:14,860 --> 00:22:21,190
dream host uses a SEF behind its kvm

00:22:19,090 --> 00:22:23,740
thing and so they want you to upload the

00:22:21,190 --> 00:22:26,830
images in raw format so they can do

00:22:23,740 --> 00:22:28,360
beyond right boots of the of the VMS so

00:22:26,830 --> 00:22:30,010
if those are the three clouds you're

00:22:28,360 --> 00:22:31,240
going to be dealing with you've got to

00:22:30,010 --> 00:22:32,590
get your image and translate it into

00:22:31,240 --> 00:22:34,179
three formats I'd also like to pick on

00:22:32,590 --> 00:22:36,580
rackspace really quickly for the fact

00:22:34,179 --> 00:22:39,190
that the utility that you have to use to

00:22:36,580 --> 00:22:41,290
make a VHD file format you can upload

00:22:39,190 --> 00:22:42,730
the Rackspace cloud is not installable

00:22:41,290 --> 00:22:44,950
from anywhere other than you get the

00:22:42,730 --> 00:22:46,360
source code to zen and you patch it with

00:22:44,950 --> 00:22:47,950
this patch such is floating around on

00:22:46,360 --> 00:22:50,290
the internet that Debian won't accept

00:22:47,950 --> 00:22:52,080
into it debian packaging patch format

00:22:50,290 --> 00:22:54,370
patch cube because it's such a bad patch

00:22:52,080 --> 00:22:55,960
but you you can patch it with that and

00:22:54,370 --> 00:22:57,790
then compile it locally I've got a

00:22:55,960 --> 00:23:02,230
docker container containing this in it

00:22:57,790 --> 00:23:03,250
just because your God so so that's the

00:23:02,230 --> 00:23:05,020
silly thing and that's the thing that I

00:23:03,250 --> 00:23:06,850
think that um should really be there's

00:23:05,020 --> 00:23:10,150
there's some some initial work in the

00:23:06,850 --> 00:23:11,530
glance tree oh my god there's a mr. and

00:23:10,150 --> 00:23:13,020
it should work in the glans tree to make

00:23:11,530 --> 00:23:15,190
this better so that there's automatic

00:23:13,020 --> 00:23:17,320
conversions which is good because that

00:23:15,190 --> 00:23:19,390
way it's on the it's on the cloud

00:23:17,320 --> 00:23:21,429
deployer to to handle that and if rec

00:23:19,390 --> 00:23:22,840
space wants to run a thing that needs

00:23:21,429 --> 00:23:24,220
and actually if you actually have a full

00:23:22,840 --> 00:23:27,220
Zen installation it's actually easier to

00:23:24,220 --> 00:23:28,929
get up at tooling so image API version

00:23:27,220 --> 00:23:34,330
I'll blow through this a little bit HP

00:23:28,929 --> 00:23:35,890
uses v1 vexos happens you use v2 but

00:23:34,330 --> 00:23:42,520
we've made we've made some plans around

00:23:35,890 --> 00:23:44,470
this at the summit um the the fun part

00:23:42,520 --> 00:23:46,030
about this is that that you have to know

00:23:44,470 --> 00:23:49,179
ahead of time that these are the

00:23:46,030 --> 00:23:51,429
versions it's not discoverable so

00:23:49,179 --> 00:23:53,590
there's also if you're using glance v2

00:23:51,429 --> 00:23:55,240
there's two completely different API

00:23:53,590 --> 00:23:57,160
forms that you can use to upload your

00:23:55,240 --> 00:24:00,580
image to the cloud one of them if you

00:23:57,160 --> 00:24:02,410
want to use the the command line you you

00:24:00,580 --> 00:24:05,260
you do this first you have to upload it

00:24:02,410 --> 00:24:08,200
to Swift and then you create a task and

00:24:05,260 --> 00:24:11,230
you pass this JSON blob to the command

00:24:08,200 --> 00:24:13,809
line program to tell it to import the

00:24:11,230 --> 00:24:15,610
thing from Swift or you can just do

00:24:13,809 --> 00:24:17,140
glance image create with the the local

00:24:15,610 --> 00:24:18,580
image file name again this isn't

00:24:17,140 --> 00:24:20,620
discoverable you just have to know

00:24:18,580 --> 00:24:22,570
things about which one of these your

00:24:20,620 --> 00:24:26,080
cloud provider decided they would like

00:24:22,570 --> 00:24:27,550
to do I'm musingly enough unamusing Lee

00:24:26,080 --> 00:24:29,350
enough one of these formats doesn't work

00:24:27,550 --> 00:24:31,330
in the upstream code base but I won't

00:24:29,350 --> 00:24:32,290
pick on people too much for having

00:24:31,330 --> 00:24:34,990
deployed things that are completely

00:24:32,290 --> 00:24:36,460
broken upstream because I've already

00:24:34,990 --> 00:24:36,890
picked in the once in this talk and it

00:24:36,460 --> 00:24:38,840
through

00:24:36,890 --> 00:24:40,790
so you got to ensure this on the

00:24:38,840 --> 00:24:42,470
internet so there's five different ways

00:24:40,790 --> 00:24:44,000
that you can do this the cloud can

00:24:42,470 --> 00:24:45,530
automatically get an externally routable

00:24:44,000 --> 00:24:47,960
IP address from Neutron when you boot it

00:24:45,530 --> 00:24:49,280
run above an OVH clouds do this the

00:24:47,960 --> 00:24:52,250
cloud can have an externally routable IP

00:24:49,280 --> 00:24:54,260
from Neutron and all salut optionally

00:24:52,250 --> 00:24:56,030
support private tenant networks vex host

00:24:54,260 --> 00:24:57,380
is in this boat the file kind of a

00:24:56,030 --> 00:24:59,720
private tenant network provided by

00:24:57,380 --> 00:25:01,970
neutron and require floating IP this is

00:24:59,720 --> 00:25:03,980
HP and dream hosts model the cloud can

00:25:01,970 --> 00:25:05,720
have a private tenant network provided

00:25:03,980 --> 00:25:07,460
by know of a network and require

00:25:05,720 --> 00:25:09,620
floating IP for external routing this is

00:25:07,460 --> 00:25:11,600
how oro works and the cloud can have an

00:25:09,620 --> 00:25:13,310
externally routable IP from Neutron but

00:25:11,600 --> 00:25:18,110
no Neutron API is exposed in that's

00:25:13,310 --> 00:25:20,660
Rackspace so and as with many things the

00:25:18,110 --> 00:25:22,850
choices that the the vendors have made

00:25:20,660 --> 00:25:26,330
as to which one of these insane

00:25:22,850 --> 00:25:27,440
combinations of choices exists is not

00:25:26,330 --> 00:25:29,120
discoverable in any way shape or form

00:25:27,440 --> 00:25:32,170
and you just sort of have to know ahead

00:25:29,120 --> 00:25:34,910
of time that that's what your cloud does

00:25:32,170 --> 00:25:38,060
in case you would like to see that last

00:25:34,910 --> 00:25:40,490
slide in code this is the this is the

00:25:38,060 --> 00:25:44,660
logic in Python for what is the external

00:25:40,490 --> 00:25:47,780
IP address for your for your server yeah

00:25:44,660 --> 00:25:50,150
actually this is old and buggy that's

00:25:47,780 --> 00:25:51,290
been updated a couple of times we find a

00:25:50,150 --> 00:25:55,280
couple new ways in which it can be

00:25:51,290 --> 00:25:57,770
broken I think we can do better than

00:25:55,280 --> 00:26:01,250
that myself I think that's patently

00:25:57,770 --> 00:26:03,680
absurd so so I've been working on some

00:26:01,250 --> 00:26:06,080
things to try and help out with that one

00:26:03,680 --> 00:26:09,380
of them is the OS client config library

00:26:06,080 --> 00:26:11,540
which is integrated both the shade

00:26:09,380 --> 00:26:14,060
library about in a second and also with

00:26:11,540 --> 00:26:16,160
the Python OpenStack client the unified

00:26:14,060 --> 00:26:18,230
command line client is using this as

00:26:16,160 --> 00:26:19,790
well now in addition to just being a

00:26:18,230 --> 00:26:23,660
library to handle some config file for

00:26:19,790 --> 00:26:26,210
for clients um we just gave up and it

00:26:23,660 --> 00:26:27,770
encodes all of the the pre-existing

00:26:26,210 --> 00:26:31,880
vendor differences that you need to know

00:26:27,770 --> 00:26:33,310
ahead of time so that I've gone and

00:26:31,880 --> 00:26:35,840
figured them out and you don't have to

00:26:33,310 --> 00:26:38,240
so so you can reference something so

00:26:35,840 --> 00:26:39,440
this is an example a client config file

00:26:38,240 --> 00:26:41,390
and you'll see that I'm actually

00:26:39,440 --> 00:26:42,950
referencing HP and dreamhost in these

00:26:41,390 --> 00:26:44,510
two different accounts and so then all

00:26:42,950 --> 00:26:46,790
of the idiosyncrasies about HP and

00:26:44,510 --> 00:26:48,990
dreamhost are encoded in the OS client

00:26:46,790 --> 00:26:52,030
config library and you can just use the

00:26:48,990 --> 00:26:54,610
which is I think what we should be doing

00:26:52,030 --> 00:26:57,010
in the first place also been working on

00:26:54,610 --> 00:26:58,690
a library called shade as part of infra

00:26:57,010 --> 00:27:01,600
where we're starting to use this in our

00:26:58,690 --> 00:27:04,810
in our node pool project it's also now

00:27:01,600 --> 00:27:06,340
the the backline library basis for the

00:27:04,810 --> 00:27:09,930
new OpenStack modules that will be an

00:27:06,340 --> 00:27:12,160
ansible v2 and it gives you some Python

00:27:09,930 --> 00:27:15,670
some Python API things that look like

00:27:12,160 --> 00:27:17,380
this create image that create server

00:27:15,670 --> 00:27:19,300
that and we'll do all of the crazy

00:27:17,380 --> 00:27:20,950
things like create images actually like

00:27:19,300 --> 00:27:23,230
four hundred lines of Python code

00:27:20,950 --> 00:27:25,120
because of all of the various logical

00:27:23,230 --> 00:27:27,670
differences that it takes to upload an

00:27:25,120 --> 00:27:29,980
image into a cloud you probably don't

00:27:27,670 --> 00:27:32,790
care about most of them and you bloody

00:27:29,980 --> 00:27:36,100
well shouldn't so anyway so to do that

00:27:32,790 --> 00:27:37,630
as i mentioned we're basing that stuff

00:27:36,100 --> 00:27:39,610
we've we've injected that stuff into

00:27:37,630 --> 00:27:42,700
ansible so in the 20 release we'll have

00:27:39,610 --> 00:27:44,410
a whole new set of of modules there that

00:27:42,700 --> 00:27:45,940
are based on that library so they know

00:27:44,410 --> 00:27:47,410
how to talk all the different clouds so

00:27:45,940 --> 00:27:49,300
you can just refer to named clouds and

00:27:47,410 --> 00:27:51,490
then do sort of standard things like hey

00:27:49,300 --> 00:27:52,870
please put this key pair in the in the

00:27:51,490 --> 00:27:54,190
cloud and also this image in them would

00:27:52,870 --> 00:27:56,350
you please boot a server based on that

00:27:54,190 --> 00:27:59,830
image so that's actually a mostly

00:27:56,350 --> 00:28:02,440
working playbook right there and should

00:27:59,830 --> 00:28:04,570
mostly work if you had to have a boon to

00:28:02,440 --> 00:28:08,470
that VHD file I've got a disk image

00:28:04,570 --> 00:28:10,590
building a role coming up as well it

00:28:08,470 --> 00:28:14,860
also supports multi clouds so there's a

00:28:10,590 --> 00:28:16,240
there's a because of this because we've

00:28:14,860 --> 00:28:19,000
got configuration with all these clouds

00:28:16,240 --> 00:28:20,350
this is a way that you can say hey I'd

00:28:19,000 --> 00:28:23,920
like this key pair on all my clouds

00:28:20,350 --> 00:28:25,690
please because you probably do so so

00:28:23,920 --> 00:28:26,800
largely and I'm a time that's great

00:28:25,690 --> 00:28:29,350
because this is basically the summit of

00:28:26,800 --> 00:28:30,670
summary slide aha sorry for everybody

00:28:29,350 --> 00:28:31,960
who thinks I talk too fast so I think we

00:28:30,670 --> 00:28:33,820
need to get back to basics I think that

00:28:31,960 --> 00:28:34,990
shades existence is about right it's

00:28:33,820 --> 00:28:37,300
it's working around a whole lot of

00:28:34,990 --> 00:28:38,470
things but none of those things should

00:28:37,300 --> 00:28:40,360
be things that are encoded just in a

00:28:38,470 --> 00:28:42,220
Python library because all of that logic

00:28:40,360 --> 00:28:44,980
is now not accessible to anybody doing

00:28:42,220 --> 00:28:46,900
JavaScript or Ruby or Java or.net or

00:28:44,980 --> 00:28:49,240
haskell or you know whatever it is that

00:28:46,900 --> 00:28:50,530
people are wanting to do I think this

00:28:49,240 --> 00:28:52,390
means we have to make many more

00:28:50,530 --> 00:28:53,500
decisions about the divergences at the

00:28:52,390 --> 00:28:55,390
basic levels it's great that we're

00:28:53,500 --> 00:28:57,220
giving the deployers the freedom to

00:28:55,390 --> 00:28:58,990
install whatever the heck they want to

00:28:57,220 --> 00:29:00,540
install but maybe some of those freedoms

00:28:58,990 --> 00:29:01,700
are not very useful to our users and

00:29:00,540 --> 00:29:04,279
maybe

00:29:01,700 --> 00:29:05,899
we need to give up or stop doing it I

00:29:04,279 --> 00:29:08,120
think that also means that we have to

00:29:05,899 --> 00:29:09,860
take stands at times against the various

00:29:08,120 --> 00:29:11,389
product management just because a

00:29:09,860 --> 00:29:13,100
product manager says somebody wants it

00:29:11,389 --> 00:29:16,279
doesn't mean it's a good idea now just

00:29:13,100 --> 00:29:17,899
because they say it doesn't mean it's a

00:29:16,279 --> 00:29:18,950
bad idea product managers you have lots

00:29:17,899 --> 00:29:20,539
of really good input and we should

00:29:18,950 --> 00:29:22,820
listen to them talk to them but it needs

00:29:20,539 --> 00:29:24,460
to be a dialogue and then ultimately

00:29:22,820 --> 00:29:26,960
ensure that the simple things are simple

00:29:24,460 --> 00:29:28,610
anyway I I managed to squeeze that in in

00:29:26,960 --> 00:29:31,600
30 minutes I'm very excited about that

00:29:28,610 --> 00:29:31,600
great thank you very much

00:29:40,240 --> 00:29:42,300

YouTube URL: https://www.youtube.com/watch?v=G971S1UT0Kw


