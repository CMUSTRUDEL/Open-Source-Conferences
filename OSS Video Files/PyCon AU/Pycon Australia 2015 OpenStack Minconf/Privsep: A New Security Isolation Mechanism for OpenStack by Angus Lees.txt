Title: Privsep: A New Security Isolation Mechanism for OpenStack by Angus Lees
Publication date: 2015-08-16
Playlist: Pycon Australia 2015 OpenStack Minconf
Description: 
	OpenStack listens to requests over the network, and (when appropriate) performs operations on the host that require root superpowers.  Following best-practice design, most of the code runs as an unprivileged user and only the code that needs additional powers runs as root using a tool called "rootwrap".

This talk discusses the evolution that led to the current rootwrap design, why it has proven to be completely inadequate in practice, and presents a new "privsep" alternative currently being worked on within Oslo.

PyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. 

July 31-August 4, Brisbane, Queensland, Australia
Captions: 
	00:00:10,610 --> 00:00:15,199
yup all right next up we have Angus

00:00:12,860 --> 00:00:17,900
talking about proof set a new security

00:00:15,199 --> 00:00:24,529
isolation mechanism for OpenStack please

00:00:17,900 --> 00:00:31,399
make them feel welcome right yes that's

00:00:24,529 --> 00:00:34,930
me don't told myself I'm Angus I work as

00:00:31,399 --> 00:00:37,520
an OpenStack developer for rackspace

00:00:34,930 --> 00:00:40,870
work and upstream OpenStack usually on

00:00:37,520 --> 00:00:40,870
Neutron but bits and pieces everywhere

00:00:41,079 --> 00:00:46,940
right now I'm talking about a new

00:00:43,160 --> 00:00:49,030
project which we're working through the

00:00:46,940 --> 00:00:51,310
Oslo process to get it made up now and

00:00:49,030 --> 00:00:54,020
it's a new privilege separation

00:00:51,310 --> 00:00:55,489
framework so I was going to talk a

00:00:54,020 --> 00:00:56,870
little bit about the history what the

00:00:55,489 --> 00:01:00,280
background what is privilege separation

00:00:56,870 --> 00:01:03,110
what's the problem we're trying to solve

00:01:00,280 --> 00:01:04,129
this is an evolution of rude wraps I'm

00:01:03,110 --> 00:01:07,280
going to talk about the road rope

00:01:04,129 --> 00:01:09,820
history and how we got here and they'll

00:01:07,280 --> 00:01:17,140
talk a little bit about the new thing

00:01:09,820 --> 00:01:19,159
basically so here's the problem we have

00:01:17,140 --> 00:01:21,650
when you're designing a service you've

00:01:19,159 --> 00:01:25,070
got your actual service in most cases

00:01:21,650 --> 00:01:27,320
particularly OpenStack that's kind of a

00:01:25,070 --> 00:01:29,180
bastion between the users out there on

00:01:27,320 --> 00:01:30,650
the internet somewhere and they talk to

00:01:29,180 --> 00:01:32,060
your service over the internet and then

00:01:30,650 --> 00:01:34,580
the whole purpose of them talking to you

00:01:32,060 --> 00:01:37,430
is that eventually your service will do

00:01:34,580 --> 00:01:40,280
stuff and it's going to do things

00:01:37,430 --> 00:01:42,409
typically creating virtual machines

00:01:40,280 --> 00:01:44,689
reading certain protected files on

00:01:42,409 --> 00:01:46,340
whatever on that machine that the user

00:01:44,689 --> 00:01:50,060
themselves can't do because they're out

00:01:46,340 --> 00:01:52,159
on the internet somewhere that's

00:01:50,060 --> 00:01:53,420
obviously the architectural of you has

00:01:52,159 --> 00:01:54,950
the software developer says if you're a

00:01:53,420 --> 00:01:58,320
security person you look at it more like

00:01:54,950 --> 00:02:01,000
this so

00:01:58,320 --> 00:02:03,610
you have to assume that your piece of

00:02:01,000 --> 00:02:08,500
software has some bugs somewhere in it

00:02:03,610 --> 00:02:15,569
that you don't know about yet and the

00:02:08,500 --> 00:02:17,650
challenge here is that we're trying to

00:02:15,569 --> 00:02:19,090
design a defense we're trying to design

00:02:17,650 --> 00:02:21,100
with the idea that there are bugs there

00:02:19,090 --> 00:02:23,470
but how do we reduce the impact of those

00:02:21,100 --> 00:02:26,860
how do we make it so that fewer of those

00:02:23,470 --> 00:02:30,010
bugs actually turn into exploiting

00:02:26,860 --> 00:02:34,360
access to the stuff that matters all

00:02:30,010 --> 00:02:37,150
right the basic principle with privilege

00:02:34,360 --> 00:02:40,000
separation is that you minimize the

00:02:37,150 --> 00:02:42,430
amount of code which can actually get to

00:02:40,000 --> 00:02:43,870
the stuff that matters so you're going

00:02:42,430 --> 00:02:45,730
to have bugs there somewhere because you

00:02:43,870 --> 00:02:48,280
have fewer code for a fewer amount of

00:02:45,730 --> 00:02:51,790
code that can actually get to the

00:02:48,280 --> 00:02:53,260
privileged data whatever it is there's

00:02:51,790 --> 00:02:54,700
more there's less likely to be

00:02:53,260 --> 00:02:56,769
interesting bugs in it too small amount

00:02:54,700 --> 00:02:58,360
of code smaller bugs also you can focus

00:02:56,769 --> 00:02:59,650
your reviewing attention on there so you

00:02:58,360 --> 00:03:02,350
can look at that bit more carefully

00:02:59,650 --> 00:03:05,290
while the bulk of your code you can be a

00:03:02,350 --> 00:03:09,100
little more relaxed about so then to

00:03:05,290 --> 00:03:12,670
break in to hear your bad person needs

00:03:09,100 --> 00:03:14,260
to first of all subvert your main

00:03:12,670 --> 00:03:15,549
service they have to make your main

00:03:14,260 --> 00:03:18,450
service do something that wasn't going

00:03:15,549 --> 00:03:21,850
to do normally you know buffer overrun

00:03:18,450 --> 00:03:23,049
whatever simply reading a file that it

00:03:21,850 --> 00:03:25,570
wasn't meant to read whatever you can do

00:03:23,049 --> 00:03:27,040
to make it behave differently and then

00:03:25,570 --> 00:03:30,250
they have to turn that into an exploit

00:03:27,040 --> 00:03:32,200
against the privileged portion of that

00:03:30,250 --> 00:03:34,269
code the privilege boundary be in this

00:03:32,200 --> 00:03:36,370
case so they need to basically have two

00:03:34,269 --> 00:03:41,799
exploits in order to get to the stuff

00:03:36,370 --> 00:03:43,269
that matters and hopefully that's a lot

00:03:41,799 --> 00:03:47,140
harder than just getting the one exploit

00:03:43,269 --> 00:03:48,609
I you have to assume which is a little C

00:03:47,140 --> 00:03:49,959
programs or moist of thinking about this

00:03:48,609 --> 00:03:51,180
because when you get a buffer overrun

00:03:49,959 --> 00:03:54,190
you pretty much owned that whole process

00:03:51,180 --> 00:03:58,359
the same bug still exists in Python if

00:03:54,190 --> 00:04:00,760
there is if you're calling into numpy or

00:03:58,359 --> 00:04:02,709
something there's still a chunk of C

00:04:00,760 --> 00:04:04,480
code there that wasn't part of the core

00:04:02,709 --> 00:04:05,709
Python string routines there's still the

00:04:04,480 --> 00:04:07,090
opportunity for there to be buffer

00:04:05,709 --> 00:04:10,000
exploits in there just as there would be

00:04:07,090 --> 00:04:11,500
in other languages so you have to assume

00:04:10,000 --> 00:04:14,560
that when someone has exploited

00:04:11,500 --> 00:04:17,739
your program they can do anything that

00:04:14,560 --> 00:04:19,329
your program can do they can remake your

00:04:17,739 --> 00:04:21,340
program behave differently they can take

00:04:19,329 --> 00:04:22,240
over ownership of that program and it

00:04:21,340 --> 00:04:24,670
can make it to anything that that

00:04:22,240 --> 00:04:27,220
program itself was able to do so if this

00:04:24,670 --> 00:04:31,570
was say Nova compute then whatever your

00:04:27,220 --> 00:04:34,630
Nova compute process can do an evil user

00:04:31,570 --> 00:04:36,400
who's taken over that can also do so

00:04:34,630 --> 00:04:39,340
yeah privilege separation we using the

00:04:36,400 --> 00:04:40,900
colonel primitives to limit what's

00:04:39,340 --> 00:04:42,370
possible to put a boundary around that

00:04:40,900 --> 00:04:47,140
and say well that's gay you've taken

00:04:42,370 --> 00:04:49,690
over user ID Nova service by that user

00:04:47,140 --> 00:04:51,460
still can't read etc shadow that they're

00:04:49,690 --> 00:04:55,600
still can't reformat the hard disk they

00:04:51,460 --> 00:04:57,370
still can't do whatever I hope so is the

00:04:55,600 --> 00:05:02,740
idea privilege separation we preach a

00:04:57,370 --> 00:05:05,290
separate piece previously in OpenStack

00:05:02,740 --> 00:05:06,430
originally this was run by your regular

00:05:05,290 --> 00:05:08,080
service would run as a normal

00:05:06,430 --> 00:05:12,540
unprivileged user with no special

00:05:08,080 --> 00:05:14,980
privileges except for it has the one

00:05:12,540 --> 00:05:18,220
ability to be able to run sudo for

00:05:14,980 --> 00:05:20,020
certain commands so your privilege

00:05:18,220 --> 00:05:23,200
separation if you like becomes the

00:05:20,020 --> 00:05:29,880
regular Nova process and then the pseudo

00:05:23,200 --> 00:05:32,080
mechanism to run some things as root and

00:05:29,880 --> 00:05:33,460
originally you would slowly build up

00:05:32,080 --> 00:05:37,270
more and more commands here that that

00:05:33,460 --> 00:05:40,570
user was allowed to run as root and this

00:05:37,270 --> 00:05:41,919
works fine it's it's obviously an

00:05:40,570 --> 00:05:44,370
obvious extension of what you would do

00:05:41,919 --> 00:05:46,690
as you know a script or something that a

00:05:44,370 --> 00:05:48,940
assistive min might do pseudos are very

00:05:46,690 --> 00:05:54,100
easy to understand familiar tool for for

00:05:48,940 --> 00:05:55,570
this sort of problem the problem that

00:05:54,100 --> 00:05:57,940
this approach ran into was eventually

00:05:55,570 --> 00:06:01,810
sudoers became really long and hard to

00:05:57,940 --> 00:06:03,700
manage you can drop in little files into

00:06:01,810 --> 00:06:05,890
most destroys they have a pseudo SD

00:06:03,700 --> 00:06:09,640
directory but by and large it's a fairly

00:06:05,890 --> 00:06:13,870
awkward thing to have to maintain for a

00:06:09,640 --> 00:06:17,710
large list of things so the second

00:06:13,870 --> 00:06:19,120
attempt was to add root rep and I hope

00:06:17,710 --> 00:06:21,780
doesn't really matter if it's not light

00:06:19,120 --> 00:06:24,430
enough to see but

00:06:21,780 --> 00:06:31,840
we added a new intermediate command

00:06:24,430 --> 00:06:33,759
quadro wrap this so you would run sudo

00:06:31,840 --> 00:06:36,610
and then root wrap and then the command

00:06:33,759 --> 00:06:38,440
you actually wanted to run so you now

00:06:36,610 --> 00:06:41,889
heard only one entry in the sudoers file

00:06:38,440 --> 00:06:45,509
that is let me run regret and then rude

00:06:41,889 --> 00:06:47,560
wrap itself had a more expressive

00:06:45,509 --> 00:06:49,060
configuration file that was more under

00:06:47,560 --> 00:06:52,320
the control of the OpenStack developers

00:06:49,060 --> 00:06:54,250
and they could use that to describe

00:06:52,320 --> 00:06:56,020
gather commands you're allowed to run

00:06:54,250 --> 00:06:58,539
and they could hopefully be a little

00:06:56,020 --> 00:06:59,770
more suited to the sorts of commands and

00:06:58,539 --> 00:07:02,229
the sorts of security checks that

00:06:59,770 --> 00:07:05,009
OpenStack wanted to run and here's two

00:07:02,229 --> 00:07:08,380
examples that I've pulled off the Nova

00:07:05,009 --> 00:07:11,199
default regret filters the first one is

00:07:08,380 --> 00:07:15,190
simply let me run mounts as root the

00:07:11,199 --> 00:07:17,320
syntax is a little quirky it's a simple

00:07:15,190 --> 00:07:20,289
a string that just identifies this line

00:07:17,320 --> 00:07:22,960
for no reason this is the sort of filter

00:07:20,289 --> 00:07:24,849
you want to run this is a particular

00:07:22,960 --> 00:07:27,490
Python object that enforces the check

00:07:24,849 --> 00:07:29,020
this is the most common one this is the

00:07:27,490 --> 00:07:31,000
command you want to run and this is the

00:07:29,020 --> 00:07:33,190
or you want to allow to be able to be

00:07:31,000 --> 00:07:35,530
run and this is the user you want to run

00:07:33,190 --> 00:07:37,990
it as almost all of them are route to

00:07:35,530 --> 00:07:40,720
this few cases where you want to run as

00:07:37,990 --> 00:07:43,360
a different user and here's a more

00:07:40,720 --> 00:07:44,949
advanced filter regex filter so this

00:07:43,360 --> 00:07:47,800
will let you run this command as this

00:07:44,949 --> 00:07:52,210
user provided it matches the arguments

00:07:47,800 --> 00:07:54,130
match let's ugh v1 and this argument

00:07:52,210 --> 00:07:57,970
matches this regex filter in this case

00:07:54,130 --> 00:07:59,169
that's a slightly unusual command most

00:07:57,970 --> 00:08:01,659
of them are more like this form here

00:07:59,169 --> 00:08:03,639
which is pretty simple there's a few

00:08:01,659 --> 00:08:06,130
other filters is like a kill filter let

00:08:03,639 --> 00:08:10,570
me kill certain process IDs that are

00:08:06,130 --> 00:08:12,669
running as certain users there's a few

00:08:10,570 --> 00:08:15,669
special ones for running IP commands let

00:08:12,669 --> 00:08:18,400
me run an IP command but not a net NS

00:08:15,669 --> 00:08:21,460
exec and there's the reverse let me run

00:08:18,400 --> 00:08:23,080
just IP nat NS exec subcommands and of

00:08:21,460 --> 00:08:25,449
course you can add new ones if you

00:08:23,080 --> 00:08:28,110
wanted to so this is the real rap

00:08:25,449 --> 00:08:28,110
extension um

00:08:28,690 --> 00:08:33,770
this has worked pretty well for a number

00:08:32,090 --> 00:08:39,350
of years this has been the state of the

00:08:33,770 --> 00:08:41,720
art and OpenStack it recently

00:08:39,350 --> 00:08:43,910
particularly with Neutron which is where

00:08:41,720 --> 00:08:46,820
I sort of started thinking about this

00:08:43,910 --> 00:08:49,730
problem a lot of what Neutron does is

00:08:46,820 --> 00:08:50,990
running one-liner IP commands a lot of

00:08:49,730 --> 00:08:53,540
the things Neutron needs to do is

00:08:50,990 --> 00:08:56,570
trivial little network configuration so

00:08:53,540 --> 00:08:59,180
it's running an IP and IP route one line

00:08:56,570 --> 00:09:03,260
of command and it might run it many

00:08:59,180 --> 00:09:06,950
times so this becomes expensive you're

00:09:03,260 --> 00:09:08,270
firing off sudo you're firing off route

00:09:06,950 --> 00:09:09,590
wrap which is a whole place in program

00:09:08,270 --> 00:09:12,050
that has to start up place and has quite

00:09:09,590 --> 00:09:13,400
a slow start up costs while it slips in

00:09:12,050 --> 00:09:18,050
all these different files and things I

00:09:13,400 --> 00:09:19,420
then and then you're running your real

00:09:18,050 --> 00:09:22,130
command that you actually wanted to run

00:09:19,420 --> 00:09:23,720
this is quite expensive so so a new

00:09:22,130 --> 00:09:28,460
thing that's come around sort of in the

00:09:23,720 --> 00:09:31,670
last cycle is wrapped demon and the idea

00:09:28,460 --> 00:09:34,280
here is we use sudo to start root rep

00:09:31,670 --> 00:09:36,350
demon and in route grab demon hangs

00:09:34,280 --> 00:09:38,540
around so it has a connection channel

00:09:36,350 --> 00:09:41,120
back to the original process and it will

00:09:38,540 --> 00:09:44,660
just exact commands repeatedly and demon

00:09:41,120 --> 00:09:46,280
itself is only started up once so this

00:09:44,660 --> 00:09:47,960
actually works pretty well it's a very

00:09:46,280 --> 00:09:49,040
simple change very easy migration you

00:09:47,960 --> 00:09:54,650
just run this instead of your regular

00:09:49,040 --> 00:09:59,150
rude wrap command and then the magic is

00:09:54,650 --> 00:10:00,710
all hidden in the the Python library you

00:09:59,150 --> 00:10:02,660
used to actually take advantage of this

00:10:00,710 --> 00:10:08,900
but then it understand exactly the same

00:10:02,660 --> 00:10:10,690
filters for easy to migrate to this the

00:10:08,900 --> 00:10:13,460
original just to give you an idea the

00:10:10,690 --> 00:10:15,440
spec that proposes has some benchmarks

00:10:13,460 --> 00:10:19,240
and they were getting a 10 time speed up

00:10:15,440 --> 00:10:21,950
over simply running pseudo rap IPA

00:10:19,240 --> 00:10:25,700
running it through IPA through this

00:10:21,950 --> 00:10:27,940
mechanism was ten times faster which is

00:10:25,700 --> 00:10:27,940
pretty good

00:10:31,160 --> 00:10:36,589
this is a little complicated so here's

00:10:34,579 --> 00:10:38,839
this is I think of these things as

00:10:36,589 --> 00:10:40,310
diagram so it's trying to described as

00:10:38,839 --> 00:10:43,250
visual as well here's our main process

00:10:40,310 --> 00:10:45,079
and we've started River abdomen we do

00:10:43,250 --> 00:10:47,000
that once somewhere early on like the

00:10:45,079 --> 00:10:50,779
first time we try to invoke upon these

00:10:47,000 --> 00:10:53,990
commands rear abdomen rights a randomly

00:10:50,779 --> 00:10:56,389
generated token to stand it out okay so

00:10:53,990 --> 00:11:00,670
the main process can read that standard

00:10:56,389 --> 00:11:03,949
out it now knows this this magic token

00:11:00,670 --> 00:11:07,310
later on it connects to a particular

00:11:03,949 --> 00:11:10,490
well-known unix socket and it uses that

00:11:07,310 --> 00:11:14,420
token to say I'm who you think I am I

00:11:10,490 --> 00:11:16,519
should be able to talk to you it then

00:11:14,420 --> 00:11:21,430
sends the command line it wants to run

00:11:16,519 --> 00:11:21,430
down the socket serialized using JSON

00:11:22,149 --> 00:11:26,569
rude grab demon then goes off and

00:11:24,199 --> 00:11:28,490
execute the command when it returns it

00:11:26,569 --> 00:11:30,110
gets its standard out standard error but

00:11:28,490 --> 00:11:31,699
came from this command and the actual

00:11:30,110 --> 00:11:35,750
exit code and sends them back down the

00:11:31,699 --> 00:11:37,160
unix socket fairly straightforward

00:11:35,750 --> 00:11:38,449
there's number of steps there the actual

00:11:37,160 --> 00:11:40,310
mechanisms fairly straightforward and

00:11:38,449 --> 00:11:43,279
then this bottom part repeats every

00:11:40,310 --> 00:11:44,720
every new command you want to run now it

00:11:43,279 --> 00:11:46,130
actually uses the multiprocessing

00:11:44,720 --> 00:11:48,529
library place the multiprocessing

00:11:46,130 --> 00:11:52,670
library which is a little unusual but it

00:11:48,529 --> 00:11:56,209
uses multiprocessing multiprocessing

00:11:52,670 --> 00:11:58,040
normally has a client and the server

00:11:56,209 --> 00:11:59,779
sort of part the server part Forks off

00:11:58,040 --> 00:12:01,759
lots of different workers that's the

00:11:59,779 --> 00:12:03,500
whole point of multiprocessing and then

00:12:01,759 --> 00:12:05,240
you send commands it's basically a queue

00:12:03,500 --> 00:12:06,709
and the commands get run and then

00:12:05,240 --> 00:12:08,240
returns result that uses that same

00:12:06,709 --> 00:12:10,069
mechanism here you can see that same

00:12:08,240 --> 00:12:10,970
shape here at sending commands they're

00:12:10,069 --> 00:12:13,220
running here so this is a

00:12:10,970 --> 00:12:16,430
multiprocessing multiple processors and

00:12:13,220 --> 00:12:17,870
in the same back responses and a little

00:12:16,430 --> 00:12:20,000
bit when you go look at the code fruit

00:12:17,870 --> 00:12:21,889
web demon a little bit of the quirky

00:12:20,000 --> 00:12:23,389
bits in the code is because it's working

00:12:21,889 --> 00:12:24,920
in and around multiprocessing the

00:12:23,389 --> 00:12:26,630
multiprocessing does also give it a lot

00:12:24,920 --> 00:12:33,199
of things for free which is what it

00:12:26,630 --> 00:12:35,120
wants it not to burn this is pretty good

00:12:33,199 --> 00:12:36,649
I'd like to call that particularly

00:12:35,120 --> 00:12:37,910
because they will come up later on just

00:12:36,649 --> 00:12:40,519
here somewhere there's a little bit of

00:12:37,910 --> 00:12:42,079
uncertainty in route Reb demon ruger

00:12:40,519 --> 00:12:43,670
demon has started up it's written its

00:12:42,079 --> 00:12:47,090
token to stand it out

00:12:43,670 --> 00:12:51,890
and now it hangs around how long does it

00:12:47,090 --> 00:12:53,890
hang around for when should it exit so

00:12:51,890 --> 00:12:57,650
there's a little bit of ambiguity here

00:12:53,890 --> 00:12:59,000
and eventually this this has a some code

00:12:57,650 --> 00:13:02,420
that kills this process when it's

00:12:59,000 --> 00:13:04,160
finished with it but there's if this

00:13:02,420 --> 00:13:06,020
died really hard it wouldn't be able to

00:13:04,160 --> 00:13:08,510
send a kill signal to hear so this could

00:13:06,020 --> 00:13:09,980
hang around for too long there's there's

00:13:08,510 --> 00:13:15,110
different most cases where this can get

00:13:09,980 --> 00:13:16,760
leaked and likewise this little first

00:13:15,110 --> 00:13:18,500
start part there it's also hanging

00:13:16,760 --> 00:13:20,750
around maybe something has gone horribly

00:13:18,500 --> 00:13:23,000
wrong in the main process how long do we

00:13:20,750 --> 00:13:25,790
hang around we don't really know so

00:13:23,000 --> 00:13:34,910
that's one issue with that communication

00:13:25,790 --> 00:13:37,640
method the other thing is when you're

00:13:34,910 --> 00:13:39,530
running commands there's no real you

00:13:37,640 --> 00:13:41,570
don't have enough context okay you're

00:13:39,530 --> 00:13:45,170
asking me to trim out a file why you

00:13:41,570 --> 00:13:48,440
asking me is it appropriate that I allow

00:13:45,170 --> 00:13:50,930
you to trim all this file right now and

00:13:48,440 --> 00:13:53,870
these are real ones these are real lines

00:13:50,930 --> 00:13:55,430
from compute filters in Nova I'm not

00:13:53,870 --> 00:13:57,350
sure if you can work out but can you if

00:13:55,430 --> 00:13:58,610
you did take over control of the Nova

00:13:57,350 --> 00:14:01,060
process do you think you could find a

00:13:58,610 --> 00:14:04,730
way to subvert these two then get root

00:14:01,060 --> 00:14:06,970
you can run DD with any arguments you

00:14:04,730 --> 00:14:09,230
can run CP with any arguments as root if

00:14:06,970 --> 00:14:13,270
you can't get root with these commands

00:14:09,230 --> 00:14:15,470
you're not trying very hard so basically

00:14:13,270 --> 00:14:17,720
unfortunately despite all this mechanism

00:14:15,470 --> 00:14:20,630
we've basically meant that anyone who

00:14:17,720 --> 00:14:23,270
exploits our Nova compute service has

00:14:20,630 --> 00:14:25,340
route anyway this really isn't a barrier

00:14:23,270 --> 00:14:26,420
it's just an annoyance when you actually

00:14:25,340 --> 00:14:28,490
were in the code it doesn't actually

00:14:26,420 --> 00:14:30,620
provide that much security it would be

00:14:28,490 --> 00:14:32,990
possible to go through here and say CP

00:14:30,620 --> 00:14:34,970
with filenames matching this regex DD

00:14:32,990 --> 00:14:36,080
with arguments matching this reg ex but

00:14:34,970 --> 00:14:38,660
no one's done that because that's really

00:14:36,080 --> 00:14:41,210
hard and it's not going to adapt

00:14:38,660 --> 00:14:44,030
properly when someone installs compute

00:14:41,210 --> 00:14:47,260
nova compute with a non-standard prefix

00:14:44,030 --> 00:14:49,580
directory if your images are stored in

00:14:47,260 --> 00:14:51,230
home foo something you didn't think

00:14:49,580 --> 00:14:52,370
about that's probably not going to match

00:14:51,230 --> 00:14:53,690
the regex in which case you're going to

00:14:52,370 --> 00:14:54,710
have to go back here and rewrite all of

00:14:53,690 --> 00:14:55,529
these it's not going to change

00:14:54,710 --> 00:14:59,519
automatically

00:14:55,529 --> 00:15:01,199
based on your configuration and for

00:14:59,519 --> 00:15:02,850
something's like jomon it's really hard

00:15:01,199 --> 00:15:06,149
at such a low level command it's really

00:15:02,850 --> 00:15:10,589
hard to say you want to change this file

00:15:06,149 --> 00:15:12,149
to this permissions is that appropriate

00:15:10,589 --> 00:15:14,699
now what's the bigger picture what are

00:15:12,149 --> 00:15:16,649
you actually trying to do so there's not

00:15:14,699 --> 00:15:25,170
enough context here to make a proper

00:15:16,649 --> 00:15:26,550
security decision also often these are

00:15:25,170 --> 00:15:28,589
command lines the interface to the

00:15:26,550 --> 00:15:30,660
command line wasn't meant to be the

00:15:28,589 --> 00:15:32,999
security boundary the actual command

00:15:30,660 --> 00:15:34,589
line itself so the command lines don't

00:15:32,999 --> 00:15:36,660
have the sorts of things you would want

00:15:34,589 --> 00:15:39,540
if that was going to be your security

00:15:36,660 --> 00:15:41,309
entry point so a good example is IP IP

00:15:39,540 --> 00:15:42,509
is a wonderfully powerful command let

00:15:41,309 --> 00:15:46,259
you do all sorts of things with

00:15:42,509 --> 00:15:47,970
networking but it's really hard to say I

00:15:46,259 --> 00:15:50,100
only want you to do these certain things

00:15:47,970 --> 00:15:51,839
with networking or only for this user or

00:15:50,100 --> 00:15:53,490
only dealing with this particular type

00:15:51,839 --> 00:15:54,749
of interface and you simply can't

00:15:53,490 --> 00:15:56,069
describe those things on the command

00:15:54,749 --> 00:16:04,410
line it was never meant to be used like

00:15:56,069 --> 00:16:05,610
that and as a further wonder it's it's

00:16:04,410 --> 00:16:06,839
clumsy your own in command so you

00:16:05,610 --> 00:16:08,610
haven't good generate command lines and

00:16:06,839 --> 00:16:11,160
you're having the regex pars output to

00:16:08,610 --> 00:16:13,860
give you an idea the IP lib wrapper is

00:16:11,160 --> 00:16:16,529
800 modern it's like 830 lines or so of

00:16:13,860 --> 00:16:21,329
Python code just to generate IP command

00:16:16,529 --> 00:16:23,459
lines and regex pars the results and

00:16:21,329 --> 00:16:24,569
there's also because the output changes

00:16:23,459 --> 00:16:27,509
it's meant to be human readable not

00:16:24,569 --> 00:16:31,199
machine readable even with a relatively

00:16:27,509 --> 00:16:32,490
low level command like IP there's still

00:16:31,199 --> 00:16:34,500
coding air that has to deal with

00:16:32,490 --> 00:16:36,209
different versions and recognizing

00:16:34,500 --> 00:16:37,350
different output as it's changed

00:16:36,209 --> 00:16:40,259
slightly over the years for the IP

00:16:37,350 --> 00:16:41,399
command which is all just a bit clumsy

00:16:40,259 --> 00:16:44,420
it'd be much better if there was a

00:16:41,399 --> 00:16:46,470
programmatic interface for these things

00:16:44,420 --> 00:16:48,379
another said earlier yeah a lot of what

00:16:46,470 --> 00:16:51,070
Neutron does is single line IP commands

00:16:48,379 --> 00:16:54,280
this is running

00:16:51,070 --> 00:16:56,410
sudo rude rap or even in the robe demon

00:16:54,280 --> 00:16:59,680
case you're still exacting a fresh IP

00:16:56,410 --> 00:17:03,010
command to run what is fundamentally a

00:16:59,680 --> 00:17:04,420
single net linksys call which is a lot

00:17:03,010 --> 00:17:11,199
of overhead compared to what it could be

00:17:04,420 --> 00:17:12,220
in some other world even in Python

00:17:11,199 --> 00:17:18,160
there's not actually a lot of code

00:17:12,220 --> 00:17:25,030
between you and running a Cisco so the

00:17:18,160 --> 00:17:26,260
overhead is noticeable so this is the

00:17:25,030 --> 00:17:28,380
new thing that's being worked on in Oslo

00:17:26,260 --> 00:17:32,890
and I'm one of many people pushing this

00:17:28,380 --> 00:17:35,320
it is what I'm trying to do is change

00:17:32,890 --> 00:17:36,910
the API instead of talking about command

00:17:35,320 --> 00:17:40,330
lines we're going to talk about Python

00:17:36,910 --> 00:17:43,660
function calls and so I want to run a

00:17:40,330 --> 00:17:48,520
platen function call as a privileged

00:17:43,660 --> 00:17:50,320
user so i can now write some Python that

00:17:48,520 --> 00:17:52,890
catch so it's a little bit more of what

00:17:50,320 --> 00:17:56,380
I want it instead of cha mod it's now

00:17:52,890 --> 00:17:59,140
changed the owner change this file that

00:17:56,380 --> 00:18:02,110
came from this VM to the user that I'm

00:17:59,140 --> 00:18:03,730
running over as for example there's a

00:18:02,110 --> 00:18:05,790
lot more context there you know that

00:18:03,730 --> 00:18:08,230
you're doing what you should be doing

00:18:05,790 --> 00:18:10,240
you can see you can automatically look

00:18:08,230 --> 00:18:11,740
up the configuration know the sub

00:18:10,240 --> 00:18:13,480
directory that has files belonging to

00:18:11,740 --> 00:18:15,160
the virtual machine you know the user

00:18:13,480 --> 00:18:17,530
Nova is running as so you can do just

00:18:15,160 --> 00:18:18,970
that operation without having to worry

00:18:17,530 --> 00:18:23,170
about is this the right to mod call or

00:18:18,970 --> 00:18:25,090
not also as you can see with the

00:18:23,170 --> 00:18:26,500
previous ones people weren't really the

00:18:25,090 --> 00:18:28,450
idea was you would develop more and more

00:18:26,500 --> 00:18:30,640
rude wrap filters over time to better

00:18:28,450 --> 00:18:31,660
express what it is you wanted but of

00:18:30,640 --> 00:18:33,250
course that's not what happened everyone

00:18:31,660 --> 00:18:35,380
just uses command filter because it's

00:18:33,250 --> 00:18:37,500
hard to write a new filter so it must be

00:18:35,380 --> 00:18:42,160
easy for people to use securely

00:18:37,500 --> 00:18:44,110
otherwise they're not going to and while

00:18:42,160 --> 00:18:46,330
we're at it we may as well take

00:18:44,110 --> 00:18:48,580
advantage of some newer Linux kernel

00:18:46,330 --> 00:18:50,260
features like capabilities in particular

00:18:48,580 --> 00:18:52,540
but selinux and whatever else comes

00:18:50,260 --> 00:18:55,120
along it would be nice if we could use

00:18:52,540 --> 00:18:56,860
these things while we're using sudo it's

00:18:55,120 --> 00:18:58,450
a little bit hard because whatever you

00:18:56,860 --> 00:19:00,070
thought you had sudo kind of punches a

00:18:58,450 --> 00:19:03,030
hole through that and says okay now

00:19:00,070 --> 00:19:03,030
we're back to full root privileges

00:19:05,260 --> 00:19:13,400
so here's what we've got on the adding a

00:19:11,929 --> 00:19:15,320
new function should be as easy as adding

00:19:13,400 --> 00:19:17,630
a function make it really is you make it

00:19:15,320 --> 00:19:20,840
really normal so on the privileged side

00:19:17,630 --> 00:19:22,549
this is this respect still discussion

00:19:20,840 --> 00:19:24,740
the actual syntax of this changed

00:19:22,549 --> 00:19:28,940
earlier this week I said this is the new

00:19:24,740 --> 00:19:30,679
version but this is still evolving so on

00:19:28,940 --> 00:19:33,710
the privileged side we have some sort of

00:19:30,679 --> 00:19:37,340
top level directory top level package in

00:19:33,710 --> 00:19:38,929
this example Neutron privileged and you

00:19:37,340 --> 00:19:42,049
would just create place and modules

00:19:38,929 --> 00:19:45,110
below that just to make it easier to

00:19:42,049 --> 00:19:46,340
audit the privileged functions have to

00:19:45,110 --> 00:19:48,440
live below this sort of particular

00:19:46,340 --> 00:19:51,080
prefix particular directory prefix

00:19:48,440 --> 00:19:52,370
particular Python package prefix just so

00:19:51,080 --> 00:19:58,100
you can look in one place to find all

00:19:52,370 --> 00:20:00,350
the privileged code in here you import

00:19:58,100 --> 00:20:02,000
this Neutron privileged there's a magic

00:20:00,350 --> 00:20:04,159
under under in it which I'll get to on

00:20:02,000 --> 00:20:05,510
the next slide and then you decorate

00:20:04,159 --> 00:20:07,640
your function that you want to be your

00:20:05,510 --> 00:20:09,980
entry point so you can have regular

00:20:07,640 --> 00:20:12,620
functions here they can't be called from

00:20:09,980 --> 00:20:15,440
the down privileged code anything you

00:20:12,620 --> 00:20:16,520
decorate with this can be called across

00:20:15,440 --> 00:20:19,640
the privileged boundaries so this is

00:20:16,520 --> 00:20:22,159
your kind of entry point on the

00:20:19,640 --> 00:20:23,600
unprivileged side just like normal you

00:20:22,159 --> 00:20:25,730
just import it as if it was a regular

00:20:23,600 --> 00:20:26,929
module place in module and you just call

00:20:25,730 --> 00:20:30,650
it as if it was a regular place in

00:20:26,929 --> 00:20:34,520
function ok all the magic is in this

00:20:30,650 --> 00:20:36,830
decorator so it looks nice and normal

00:20:34,520 --> 00:20:41,720
static analysis tools should be ok with

00:20:36,830 --> 00:20:44,630
it very easy to extend these are both in

00:20:41,720 --> 00:20:46,669
the same git repository so there's no

00:20:44,630 --> 00:20:48,679
kind of release management issues if you

00:20:46,669 --> 00:20:50,030
want to add a new feature here you can

00:20:48,679 --> 00:20:54,220
take advantage of it here immediately

00:20:50,030 --> 00:20:54,220
within the same get change

00:20:56,880 --> 00:21:03,610
now here's the magic once per project

00:21:00,660 --> 00:21:06,059
someone types out this and you have this

00:21:03,610 --> 00:21:11,710
under under a net file and this import

00:21:06,059 --> 00:21:13,600
from the Oslo project and it declares

00:21:11,710 --> 00:21:16,630
the decorator like this so it runs a

00:21:13,600 --> 00:21:18,180
thing sets of decorator this same

00:21:16,630 --> 00:21:21,550
decorator visiting elsewhere so this is

00:21:18,180 --> 00:21:23,350
the configuration section which the

00:21:21,550 --> 00:21:26,200
various bits of config should appear

00:21:23,350 --> 00:21:27,580
under this is allowing for it's possible

00:21:26,200 --> 00:21:29,320
to have more than one decorator in your

00:21:27,580 --> 00:21:31,570
program for some reasons I get to later

00:21:29,320 --> 00:21:33,610
but normally if you only had one you

00:21:31,570 --> 00:21:36,150
wouldn't need to change that and then we

00:21:33,610 --> 00:21:39,160
have the default capabilities so if the

00:21:36,150 --> 00:21:40,390
operator if the deployer doesn't

00:21:39,160 --> 00:21:42,940
override this these are the capabilities

00:21:40,390 --> 00:21:44,320
that the privileged demon will the

00:21:42,940 --> 00:21:49,179
privileged portion of your code will run

00:21:44,320 --> 00:21:51,580
with so in this case most of neutron

00:21:49,179 --> 00:21:53,640
like eighty ninety percent of neutron

00:21:51,580 --> 00:21:55,510
can get by with just kept near admin and

00:21:53,640 --> 00:21:58,290
unfortunately we need to cap sysadmin

00:21:55,510 --> 00:22:01,990
just to enter the network namespace

00:21:58,290 --> 00:22:05,820
which has been unfortunate that's the

00:22:01,990 --> 00:22:09,190
way the latest kernel works right so

00:22:05,820 --> 00:22:14,530
it's all pretty straightforward how does

00:22:09,190 --> 00:22:15,610
it work so here's compare this with that

00:22:14,530 --> 00:22:17,200
version we had earlier for it wrapped

00:22:15,610 --> 00:22:18,640
demon you can see immediately there's

00:22:17,200 --> 00:22:20,760
fewer exchanges here it's much more

00:22:18,640 --> 00:22:23,830
straightforward I'm not having to work

00:22:20,760 --> 00:22:25,690
within the multiprocessing existing

00:22:23,830 --> 00:22:28,929
designs so I'm free to come up with some

00:22:25,690 --> 00:22:32,740
different ways to communicate we start

00:22:28,929 --> 00:22:35,770
the proof step helper once on first use

00:22:32,740 --> 00:22:39,130
and i'm using root wrap to do so there's

00:22:35,770 --> 00:22:41,260
other mechanisms in described in the

00:22:39,130 --> 00:22:42,760
spec and in implemented in the code but

00:22:41,260 --> 00:22:44,110
this is the most compatible version so

00:22:42,760 --> 00:22:46,360
this is expected to be the normal way

00:22:44,110 --> 00:22:50,950
it's used for at least the next few

00:22:46,360 --> 00:22:53,800
cycles so once its startup we fire off

00:22:50,950 --> 00:22:55,480
proof set helper proof step helper

00:22:53,800 --> 00:22:59,010
starts as root because it's run through

00:22:55,480 --> 00:23:01,030
sudo it immediately goes and finds the

00:22:59,010 --> 00:23:02,590
configuration reads a configuration says

00:23:01,030 --> 00:23:05,410
okay who should I be running is and with

00:23:02,590 --> 00:23:07,300
what capabilities and so it keeps those

00:23:05,410 --> 00:23:08,920
capabilities drops all the others and

00:23:07,300 --> 00:23:11,590
st. change this user

00:23:08,920 --> 00:23:13,770
i D away from root so we're no longer

00:23:11,590 --> 00:23:17,170
actually running as root to you id0 I

00:23:13,770 --> 00:23:21,090
can't read it cetera shadow or things

00:23:17,170 --> 00:23:23,980
other things that need you id0 I can't

00:23:21,090 --> 00:23:26,010
do things that need other capabilities

00:23:23,980 --> 00:23:30,460
so for example I might be able to load

00:23:26,010 --> 00:23:35,860
kernel modules or mount file systems or

00:23:30,460 --> 00:23:37,200
something but I can still do whatever

00:23:35,860 --> 00:23:38,890
the capabilities allow me to do so

00:23:37,200 --> 00:23:44,080
reconfigure networking in the case of

00:23:38,890 --> 00:23:45,700
net admin now over that same standard in

00:23:44,080 --> 00:23:47,350
standard our channel there's no need to

00:23:45,700 --> 00:23:49,170
negotiate anything else same standard in

00:23:47,350 --> 00:23:53,530
standard out we just sent through

00:23:49,170 --> 00:23:55,330
function args keyword uggs serialize the

00:23:53,530 --> 00:23:58,360
name of the function and the arguments I

00:23:55,330 --> 00:23:59,980
want to pass on this side he just checks

00:23:58,360 --> 00:24:03,370
that yes that function was appropriately

00:23:59,980 --> 00:24:05,890
decorated in the code and it was below

00:24:03,370 --> 00:24:08,410
the the configured prefix Neutron

00:24:05,890 --> 00:24:10,870
privileged in my other example and then

00:24:08,410 --> 00:24:13,120
it just calls a function gets the result

00:24:10,870 --> 00:24:17,460
see realises the result back across good

00:24:13,120 --> 00:24:20,770
connection yeah yes I send back either

00:24:17,460 --> 00:24:24,790
the result serialized or the exception

00:24:20,770 --> 00:24:26,320
object serialized in somewhere these are

00:24:24,790 --> 00:24:28,150
very deliberately very dumb the idea is

00:24:26,320 --> 00:24:31,000
to make it easy to audit this boundary

00:24:28,150 --> 00:24:33,670
is where all these security happens so

00:24:31,000 --> 00:24:37,930
this should be simple easy without

00:24:33,670 --> 00:24:39,430
features in particular I don't allow

00:24:37,930 --> 00:24:41,530
magic objects to go through here there's

00:24:39,430 --> 00:24:42,580
no you can't make up a new object and

00:24:41,530 --> 00:24:44,470
have it go through here and have it

00:24:42,580 --> 00:24:47,380
automatically created on this side using

00:24:44,470 --> 00:24:50,710
some Python dynamic magic these are very

00:24:47,380 --> 00:24:55,020
deliberately dumb simple data types so

00:24:50,710 --> 00:25:01,800
they're all the sort of JSON style lists

00:24:55,020 --> 00:25:01,800
dictionaries simple strings integers

00:25:02,040 --> 00:25:07,660
there are a few extra objects because

00:25:04,240 --> 00:25:09,730
i'm using Oslo's serialization which has

00:25:07,660 --> 00:25:12,520
a few extra data types it's got a date

00:25:09,730 --> 00:25:14,740
time type and a uuid type is a very

00:25:12,520 --> 00:25:17,320
small set of extra ones but they're all

00:25:14,740 --> 00:25:18,310
basic dumb objects a point and the same

00:25:17,320 --> 00:25:19,980
with the results you're passing back

00:25:18,310 --> 00:25:23,290
basic dumb objects

00:25:19,980 --> 00:25:25,570
is the wife for me Jason it is suggested

00:25:23,290 --> 00:25:30,190
to be currently my initial version used

00:25:25,570 --> 00:25:32,380
message pack during the spec discussion

00:25:30,190 --> 00:25:34,090
that got too controversial so I've gone

00:25:32,380 --> 00:25:36,220
back to basic JSON is less controversial

00:25:34,090 --> 00:25:39,870
but I fully expect to go back to message

00:25:36,220 --> 00:25:39,870
pack as a separate conversation later

00:25:42,480 --> 00:25:45,480
yep

00:25:49,130 --> 00:25:52,520
is it confusing so the question was in

00:25:51,260 --> 00:25:54,410
the code it looks like a regular place

00:25:52,520 --> 00:25:55,940
in function call is it confusing that

00:25:54,410 --> 00:25:57,980
you won't be able to access variables

00:25:55,940 --> 00:25:59,600
outside that present one channel again

00:25:57,980 --> 00:26:01,310
yes sir probably would be I'm expecting

00:25:59,600 --> 00:26:03,320
that someone including this is aware of

00:26:01,310 --> 00:26:05,660
this mechanism and the separation and

00:26:03,320 --> 00:26:06,830
yet they are separate processes so if

00:26:05,660 --> 00:26:09,320
you mess with Global's from the

00:26:06,830 --> 00:26:10,790
unprivileged side that change won't be

00:26:09,320 --> 00:26:13,430
reflected on the privileged side because

00:26:10,790 --> 00:26:14,360
early on the two separate process they

00:26:13,430 --> 00:26:24,050
just look like they're in the same

00:26:14,360 --> 00:26:25,790
process yeah can run multiple Proof Set

00:26:24,050 --> 00:26:27,050
processes yes absolutely and that was

00:26:25,790 --> 00:26:29,740
the reason earlier on for having the

00:26:27,050 --> 00:26:32,930
configuration section in the decorator

00:26:29,740 --> 00:26:34,910
instantiation yes so one of the things

00:26:32,930 --> 00:26:36,560
particularly with capabilities you have

00:26:34,910 --> 00:26:38,990
a particular set of capabilities what if

00:26:36,560 --> 00:26:41,330
I want to do something as actual

00:26:38,990 --> 00:26:42,770
honest-to-goodness you id0 or something

00:26:41,330 --> 00:26:45,230
like that if I Nephites something I need

00:26:42,770 --> 00:26:47,210
to do in the neutron case creating and

00:26:45,230 --> 00:26:48,530
destroying namespaces needs Network

00:26:47,210 --> 00:26:50,810
namespaces needs a different set of

00:26:48,530 --> 00:26:52,850
permissions to simply entering them due

00:26:50,810 --> 00:26:54,530
to an unfortunate thing with the way IP

00:26:52,850 --> 00:26:55,910
route if you want to be compatible with

00:26:54,530 --> 00:27:03,350
what IP route does with network name

00:26:55,910 --> 00:27:06,080
spaces so we could have to privilege

00:27:03,350 --> 00:27:09,860
separation demons one that has more

00:27:06,080 --> 00:27:13,100
powers but has a different presumably

00:27:09,860 --> 00:27:15,950
smaller set of code associated with it

00:27:13,100 --> 00:27:17,930
and another proven separation demon the

00:27:15,950 --> 00:27:20,540
runs as net admin and has the bulk of

00:27:17,930 --> 00:27:24,230
the privileged code with C yes that's

00:27:20,540 --> 00:27:26,870
what the possible to do that now as an

00:27:24,230 --> 00:27:28,340
example when I did some simple

00:27:26,870 --> 00:27:30,770
benchmarks with this using message

00:27:28,340 --> 00:27:34,100
Packers my serialization and I was doing

00:27:30,770 --> 00:27:37,010
the equivalent of IPA so on this side

00:27:34,100 --> 00:27:38,420
this is just Python and it's a

00:27:37,010 --> 00:27:39,830
persistent Python process it's not a

00:27:38,420 --> 00:27:41,600
short-lived one so you can do just

00:27:39,830 --> 00:27:44,020
regular python library things so in my

00:27:41,600 --> 00:27:47,960
case I was using a pirate too which is a

00:27:44,020 --> 00:27:50,090
quite comprehensive python library to

00:27:47,960 --> 00:27:52,220
make netlink calls and i was doing the

00:27:50,090 --> 00:27:54,230
net link all that is give me the

00:27:52,220 --> 00:27:56,160
addresses so it's the equivalent of IPA

00:27:54,230 --> 00:27:59,880
Donna's actual

00:27:56,160 --> 00:28:02,820
winkel and if i compare simply exacting

00:27:59,880 --> 00:28:04,740
IPA versus using this whole mechanism to

00:28:02,820 --> 00:28:07,320
communicate across here call pirate to

00:28:04,740 --> 00:28:10,410
to do the same come back there i was 20

00:28:07,320 --> 00:28:12,390
times faster which just to put that into

00:28:10,410 --> 00:28:17,370
perspective makes me four hundred times

00:28:12,390 --> 00:28:21,660
faster than regret and and about 20

00:28:17,370 --> 00:28:31,680
times 40 times faster than rude wrapped

00:28:21,660 --> 00:28:33,090
via rear up demon yes TIFF oh when do i

00:28:31,680 --> 00:28:34,560
exit yeah good question so when does

00:28:33,090 --> 00:28:38,430
this wind is my food separation process

00:28:34,560 --> 00:28:40,800
exit i deliberately i do fate sharing

00:28:38,430 --> 00:28:47,430
between these two so when this

00:28:40,800 --> 00:28:48,810
connection is closed this exits so right

00:28:47,430 --> 00:28:52,950
to the very beginning it has down didn't

00:28:48,810 --> 00:28:54,750
stand it out if anything kills this even

00:28:52,950 --> 00:28:56,280
if it exits unclean lee do to you know

00:28:54,750 --> 00:28:58,380
out of memory by the kernel or something

00:28:56,280 --> 00:29:00,990
it'll still close the sort of close that

00:28:58,380 --> 00:29:02,160
standard in pipe this guy will still

00:29:00,990 --> 00:29:04,770
know about it this caller still exit

00:29:02,160 --> 00:29:07,440
there's no ambiguity here and vice versa

00:29:04,770 --> 00:29:10,050
if this exits for some reason i make no

00:29:07,440 --> 00:29:11,790
attempt to restart it the Assumption

00:29:10,050 --> 00:29:12,990
here is apart from making the code

00:29:11,790 --> 00:29:14,220
simpler the assumption is the only

00:29:12,990 --> 00:29:17,310
reason this would exit is because

00:29:14,220 --> 00:29:19,890
something scary is happening and you

00:29:17,310 --> 00:29:22,710
probably don't want to keep respawning

00:29:19,890 --> 00:29:25,950
it and give the attacker a free hit

00:29:22,710 --> 00:29:27,600
again a free kick again right the

00:29:25,950 --> 00:29:29,670
downside is that if this does exit

00:29:27,600 --> 00:29:32,640
you've got a partially misfunctioning

00:29:29,670 --> 00:29:33,690
server now so you you want that to be

00:29:32,640 --> 00:29:35,640
loud you want to fail catastrophically

00:29:33,690 --> 00:29:38,480
you want to be fairly talk about that

00:29:35,640 --> 00:29:38,480
yep

00:29:41,340 --> 00:29:45,460
why standard in standard out versus

00:29:43,540 --> 00:29:47,890
socket perilous yes I agree absolutely

00:29:45,460 --> 00:29:50,850
so this is mostly to work within the

00:29:47,890 --> 00:29:53,110
existing route rapid deployment approach

00:29:50,850 --> 00:29:55,120
so originally I had three versions

00:29:53,110 --> 00:29:56,620
implanted and you could choose which one

00:29:55,120 --> 00:29:57,760
you wanted the end result is all the

00:29:56,620 --> 00:29:59,530
same you end up with the privilege

00:29:57,760 --> 00:30:03,130
process running with a communication

00:29:59,530 --> 00:30:05,200
channel that wasn't for words so this

00:30:03,130 --> 00:30:09,010
one's nice and simple pseudo standard in

00:30:05,200 --> 00:30:11,850
standard um I had a second one which has

00:30:09,010 --> 00:30:15,910
since been dropped as being unnecessary

00:30:11,850 --> 00:30:17,710
where I passed a eunuch socket path on

00:30:15,910 --> 00:30:19,630
the command line and then immediately

00:30:17,710 --> 00:30:22,240
connected back to that and had the

00:30:19,630 --> 00:30:23,620
connection open that I implemented that

00:30:22,240 --> 00:30:26,380
originally so that this could work on

00:30:23,620 --> 00:30:28,210
the rap demon which has constraints that

00:30:26,380 --> 00:30:30,550
the command it runs must be short-lived

00:30:28,210 --> 00:30:33,400
and can't use can't stream of a stand

00:30:30,550 --> 00:30:34,450
against standard out so I negotiated

00:30:33,400 --> 00:30:36,220
second channel to actually do the

00:30:34,450 --> 00:30:38,590
communication and once that was set up

00:30:36,220 --> 00:30:42,280
my command forked and exited so the

00:30:38,590 --> 00:30:44,260
original command could exit quickly in

00:30:42,280 --> 00:30:47,410
discussion over the spec it turned out

00:30:44,260 --> 00:30:50,650
that this wasn't important enough to

00:30:47,410 --> 00:30:52,660
keep as a version versus all the

00:30:50,650 --> 00:30:54,220
complexity that it rose and concerns

00:30:52,660 --> 00:30:55,390
over how the eunuch socket was

00:30:54,220 --> 00:30:59,800
negotiated and how that might be

00:30:55,390 --> 00:31:04,660
attacked the third version third

00:30:59,800 --> 00:31:06,910
alternative is much more like what a

00:31:04,660 --> 00:31:09,220
regular UNIX process does so in this one

00:31:06,910 --> 00:31:12,930
I simply assume I'm started with all the

00:31:09,220 --> 00:31:17,080
privileges I need so when you start sshd

00:31:12,930 --> 00:31:19,800
it started by systemd or whatever its

00:31:17,080 --> 00:31:23,320
run already with lots of privileges and

00:31:19,800 --> 00:31:24,640
the first thing it does is what after

00:31:23,320 --> 00:31:26,290
it's finished its setup it drops its

00:31:24,640 --> 00:31:27,760
privileges to run as an unprivileged

00:31:26,290 --> 00:31:30,070
user that's the normal way things work

00:31:27,760 --> 00:31:31,930
on UNIX and so in this way you would

00:31:30,070 --> 00:31:34,090
start with full privileges you would

00:31:31,930 --> 00:31:36,640
immediately fork off the privileged

00:31:34,090 --> 00:31:39,940
worker so I create a socket pair for

00:31:36,640 --> 00:31:42,280
cough from the the privileged worker and

00:31:39,940 --> 00:31:44,920
then the unprivileged guy would drop all

00:31:42,280 --> 00:31:46,840
of his privileges so you would end up in

00:31:44,920 --> 00:31:49,660
the same situation but at no point did

00:31:46,840 --> 00:31:52,620
you use sudo this would be more like the

00:31:49,660 --> 00:31:54,600
normal unix diamond

00:31:52,620 --> 00:31:56,190
the way to do this is still in the code

00:31:54,600 --> 00:31:58,170
and it's very easy simply if that is

00:31:56,190 --> 00:32:00,270
invoked first of all and it'll continue

00:31:58,170 --> 00:32:05,100
to work like that and if it's not then

00:32:00,270 --> 00:32:06,330
it'll use this on the first axis I don't

00:32:05,100 --> 00:32:07,680
want to push that right now because

00:32:06,330 --> 00:32:10,260
that's a much bigger change particularly

00:32:07,680 --> 00:32:11,880
to deployment and documentation and not

00:32:10,260 --> 00:32:14,700
something I want to overcomplicate the

00:32:11,880 --> 00:32:18,600
discussion with right now is the reason

00:32:14,700 --> 00:32:27,270
why I'm not sure how are you good to

00:32:18,600 --> 00:32:28,890
take up on that will be 0 at the end

00:32:27,270 --> 00:32:31,980
result of all of these is the same you

00:32:28,890 --> 00:32:33,570
have either a unix pipe or a UNIX socket

00:32:31,980 --> 00:32:38,790
but they're basically the same speed to

00:32:33,570 --> 00:32:41,250
send a message down so there's no real

00:32:38,790 --> 00:32:42,179
difference in setup you only pay to set

00:32:41,250 --> 00:32:45,809
up once want to set up there's no

00:32:42,179 --> 00:32:47,100
difference in speed the end result yeah

00:32:45,809 --> 00:32:48,840
mostly because you're using a proper

00:32:47,100 --> 00:32:53,429
library here and you're using a native

00:32:48,840 --> 00:32:54,690
colonel native method to talk to the

00:32:53,429 --> 00:32:55,920
colonel rather than exacting command

00:32:54,690 --> 00:32:57,990
lines that's where the speed benefit

00:32:55,920 --> 00:32:59,460
comes from and simply the overhead of

00:32:57,990 --> 00:33:00,960
running IPA even though it's a sea

00:32:59,460 --> 00:33:02,790
command and all the rest was much more

00:33:00,960 --> 00:33:05,520
than simply just the single net link all

00:33:02,790 --> 00:33:14,220
and that was about 20 times faster in my

00:33:05,520 --> 00:33:16,440
own simple benchmark yeah also the other

00:33:14,220 --> 00:33:17,700
thing here is there's no you'll also

00:33:16,440 --> 00:33:20,340
notice that there's no communication

00:33:17,700 --> 00:33:21,540
channel exposed to this command there's

00:33:20,340 --> 00:33:24,780
no entry point into the privileged

00:33:21,540 --> 00:33:26,040
process that's exposed in the file

00:33:24,780 --> 00:33:27,270
system there's no unique socket that's

00:33:26,040 --> 00:33:28,830
waiting for connects there's no having

00:33:27,270 --> 00:33:30,270
the checker password it's simply

00:33:28,830 --> 00:33:33,059
standing standard out which no one else

00:33:30,270 --> 00:33:35,240
can ever look at can it can attack from

00:33:33,059 --> 00:33:35,240
the outside

00:33:37,620 --> 00:33:42,910
yes this was the fork and soccer player

00:33:39,970 --> 00:33:44,559
version so broadly similar except

00:33:42,910 --> 00:33:46,270
they're using a eunuch socket now which

00:33:44,559 --> 00:33:49,330
is created by the soccer pair and your

00:33:46,270 --> 00:33:58,450
fork to created early on system other

00:33:49,330 --> 00:34:01,080
alternative version yes yeah from the

00:33:58,450 --> 00:34:04,570
operators point of view not much changes

00:34:01,080 --> 00:34:06,760
you need a new rude wrap filter using

00:34:04,570 --> 00:34:08,200
the pseudo rude wrap approach to start

00:34:06,760 --> 00:34:10,929
this is just another command here that

00:34:08,200 --> 00:34:12,700
it's going to be wrong we get this new

00:34:10,929 --> 00:34:15,040
configuration section the name of this

00:34:12,700 --> 00:34:19,690
is what was in the decorator constructor

00:34:15,040 --> 00:34:20,770
my way every time alright the user you

00:34:19,690 --> 00:34:22,619
want to run our grip you want to run as

00:34:20,770 --> 00:34:25,840
the capabilities you want to run it as

00:34:22,619 --> 00:34:27,580
these default to route but in the most

00:34:25,840 --> 00:34:30,490
paranoid setup you would create a new

00:34:27,580 --> 00:34:32,830
user ID that was different to the

00:34:30,490 --> 00:34:35,080
regular unprivileged user ID and was not

00:34:32,830 --> 00:34:39,609
rooted and you would run your privilege

00:34:35,080 --> 00:34:41,830
demon as that and if you're having

00:34:39,609 --> 00:34:43,179
multiple proofs of demons you have one

00:34:41,830 --> 00:34:44,710
of these for each one and then run as a

00:34:43,179 --> 00:34:46,540
different unique user so this doesn't

00:34:44,710 --> 00:34:50,280
scale very well to lots of users but

00:34:46,540 --> 00:34:50,280
will scale to two or three just fine

00:34:51,810 --> 00:34:57,630
status as a working prototype was

00:34:54,310 --> 00:35:02,800
written as a change against Neutron and

00:34:57,630 --> 00:35:05,520
the spec is in review I went to a

00:35:02,800 --> 00:35:08,619
session in Vancouver where there was

00:35:05,520 --> 00:35:13,840
remarkably little disagreement with the

00:35:08,619 --> 00:35:15,520
approach us and we're in the moment in

00:35:13,840 --> 00:35:18,520
process at the moment of creating the

00:35:15,520 --> 00:35:20,710
onslow project to employers it can

00:35:18,520 --> 00:35:22,619
coexist with rap so the migration is

00:35:20,710 --> 00:35:25,090
actually pretty straightforward you have

00:35:22,619 --> 00:35:26,920
create a new set of code using this

00:35:25,090 --> 00:35:28,650
mechanism and then you slowly migrated

00:35:26,920 --> 00:35:31,030
the callers across from using root wrap

00:35:28,650 --> 00:35:33,190
to using the new flourish mechanism and

00:35:31,030 --> 00:35:35,290
then eventually remove your root rep

00:35:33,190 --> 00:35:39,010
filters rules and whatever else you no

00:35:35,290 --> 00:35:40,030
longer need since pretty boring we've

00:35:39,010 --> 00:35:42,280
already had much questions in a way over

00:35:40,030 --> 00:35:44,380
time but if there are any left can we

00:35:42,280 --> 00:35:47,640
know otherwise look me up later time for

00:35:44,380 --> 00:35:47,640
a quick question if someone has one

00:35:47,890 --> 00:35:51,700
excellent all right let's thanking us

00:36:00,980 --> 00:36:03,040

YouTube URL: https://www.youtube.com/watch?v=0FOQB4PZVe0


