Title: Nadia Odunayo - The case of the missing method — a Ruby mystery story
Publication date: 2018-08-24
Playlist: EuRuKo 2018
Description: 
	Up Next: Pitch the next EuRuKo's location https://www.youtube.com/watch?v=YXe9OoQW8lc

See below for all videos!

######################
### \o/ EuRuKo 2018 \o/ ###
######################

###   Day 1  ###

Yukihiro Matsumoto - Keynote https://www.youtube.com/watch?v=cs0s5lZAUwc
Chris Salzberg - Metaprogramming for generalists https://www.youtube.com/watch?v=1fIlcnrJHxs
Joannah Nanjekye - Ruby in containers https://www.youtube.com/watch?v=qPNkOPvjecs
Damir Zekić - Tool belt of a seasoned bug hunter 
https://www.youtube.com/watch?v=ObB0dzX_rBs
Igor Morozov - Ducks and monads: wonders of Ruby types https://www.youtube.com/watch?v=v-H9nK8hqfE
Brad Urani - Rails anti-patterns: how not to design your database https://www.youtube.com/watch?v=zo3iRBPzscU
Coraline Ada Ehmke - The broken promise of Open Source https://www.youtube.com/watch?v=5ByUPh_uPqQ
Louisa Barrett - Ruby not red: color theory for the rest of us https://www.youtube.com/watch?v=OgO1EIFDgPU

###  Day 2  ###

Welcome https://www.youtube.com/watch?v=OlOA0aGxud0
Nadia Odunayo - The case of the missing method — a Ruby mystery story https://www.youtube.com/watch?v=OlOA0aGxud0
Pitch the next EuRuKo's location https://www.youtube.com/watch?v=YXe9OoQW8lc
Ana María Martínez Gómez - Let’s refactor some Ruby code https://www.youtube.com/watch?v=jUc8InwoA-E
Pan Thomakos - Debugging adventures in Rack-land https://www.youtube.com/watch?v=5o4krwjJbOI
Lightning talks https://www.youtube.com/watch?v=zSeaNPjwnnA
Kerstin Puschke - Scaling a monolith isn't scaling microservices https://www.youtube.com/watch?v=tA8gGd_Rl7E
Amr Abdelwahab - An empathy exercise: contextualising the question of privilege https://www.youtube.com/watch?v=6CqmGYvFwAQ
Wrap up & announcing the next EuRuKo's location https://www.youtube.com/watch?v=wMggsShGTzk
Captions: 
	00:00:00,000 --> 00:00:05,490
join me given the party last night today

00:00:03,030 --> 00:00:08,790
I'm gonna tell you a story but first I

00:00:05,490 --> 00:00:12,179
have a question for you do you have a

00:00:08,790 --> 00:00:16,260
side gig you know something that brings

00:00:12,179 --> 00:00:18,300
in a little extra each month I do by day

00:00:16,260 --> 00:00:22,439
I'm a product manager for a software

00:00:18,300 --> 00:00:24,150
team in a bank but by night I'm a

00:00:22,439 --> 00:00:29,090
private investigator

00:00:24,150 --> 00:00:32,430
and what is it I investigate Ruby crimes

00:00:29,090 --> 00:00:36,149
not jewel theft the programming language

00:00:32,430 --> 00:00:39,180
and why did I decide to go into private

00:00:36,149 --> 00:00:41,610
investigating well there's been rumors

00:00:39,180 --> 00:00:43,170
of a shady mastermind causing havoc and

00:00:41,610 --> 00:00:45,570
confusion amongst the Ruby developers

00:00:43,170 --> 00:00:48,989
worldwide with his constant meddling in

00:00:45,570 --> 00:00:51,960
the source code and I wanted to help put

00:00:48,989 --> 00:00:55,469
a stop to it but I couldn't do this

00:00:51,960 --> 00:00:59,609
under my real name I needed to protect

00:00:55,469 --> 00:01:02,940
my identity and so I chose Deirdre buck

00:00:59,609 --> 00:01:07,530
D for short and why did I choose this

00:01:02,940 --> 00:01:12,060
name well for the sole purpose of making

00:01:07,530 --> 00:01:15,299
this joke and today I want to tell you

00:01:12,060 --> 00:01:19,460
about one of my more memorable cases the

00:01:15,299 --> 00:01:22,950
case of the missing method chapter one

00:01:19,460 --> 00:01:27,119
so I'm sitting alone bored in my office

00:01:22,950 --> 00:01:30,020
my flat when the doorbell rings and it

00:01:27,119 --> 00:01:33,270
was Mike and he didn't look too happy

00:01:30,020 --> 00:01:34,350
let me tell you about more about Mike so

00:01:33,270 --> 00:01:36,270
he was an acquaintance of mine

00:01:34,350 --> 00:01:38,759
we had some mutual friends we saw each

00:01:36,270 --> 00:01:42,060
other now and again he was 24 years old

00:01:38,759 --> 00:01:43,380
a junior junior ruby developer and he

00:01:42,060 --> 00:01:46,860
got excited about test-driven

00:01:43,380 --> 00:01:49,020
development and he'd been applying for

00:01:46,860 --> 00:01:52,590
an apprenticeship at the prestigious

00:01:49,020 --> 00:01:54,119
ruby institute of professionals and he

00:01:52,590 --> 00:01:56,009
managed to get through all of the stages

00:01:54,119 --> 00:01:57,750
beating hundreds of applicants to the

00:01:56,009 --> 00:02:00,450
final stage and this was happening in

00:01:57,750 --> 00:02:03,960
two days and there were two people left

00:02:00,450 --> 00:02:07,560
fighting for the last spot himself and a

00:02:03,960 --> 00:02:10,349
woman named Jenny so jenny was 27 years

00:02:07,560 --> 00:02:13,080
old she was also a junior ruby developer

00:02:10,349 --> 00:02:16,040
and she loved all things rails

00:02:13,080 --> 00:02:18,900
she also was Mike's best friend and

00:02:16,040 --> 00:02:21,180
housemate so they had quit their

00:02:18,900 --> 00:02:23,100
consulting jobs together to enter at the

00:02:21,180 --> 00:02:26,040
world of tech and not long after they

00:02:23,100 --> 00:02:27,960
also decided to live together and so for

00:02:26,040 --> 00:02:30,000
the interview they'd agreed to work

00:02:27,960 --> 00:02:32,820
together to prepare so that each of them

00:02:30,000 --> 00:02:36,480
had the best shot may the best person

00:02:32,820 --> 00:02:37,920
win they'd said so they've been asked to

00:02:36,480 --> 00:02:39,450
research a series of topics that they

00:02:37,920 --> 00:02:42,780
were going to be grilled on in the final

00:02:39,450 --> 00:02:44,750
stage and one of them was method lookup

00:02:42,780 --> 00:02:46,950
and this had been assigned to Jenny and

00:02:44,750 --> 00:02:50,040
here was the reason that Mike had come

00:02:46,950 --> 00:02:53,880
to me something doesn't add up in

00:02:50,040 --> 00:02:56,010
Jenny's notes he said so Johnny's been

00:02:53,880 --> 00:02:58,380
so stressed and panicked though while

00:02:56,010 --> 00:03:01,200
that uncharacteristically but she won't

00:02:58,380 --> 00:03:02,580
hear me out he continued and she's

00:03:01,200 --> 00:03:05,760
convinced that she's right and that they

00:03:02,580 --> 00:03:07,470
don't have time for Mike's doubts and he

00:03:05,760 --> 00:03:09,480
says that if I can help him find the

00:03:07,470 --> 00:03:11,340
answer to this mystery then he'll have

00:03:09,480 --> 00:03:13,770
what he needs to confidently correct

00:03:11,340 --> 00:03:16,440
Jenny and save them both from Interview

00:03:13,770 --> 00:03:18,600
failure so he reaches into this at all

00:03:16,440 --> 00:03:21,300
and he draws up some sheets of paper and

00:03:18,600 --> 00:03:22,980
there Jenny's supposedly flawed notes

00:03:21,300 --> 00:03:26,310
and I asked him to walk me through them

00:03:22,980 --> 00:03:29,340
so Jenny had these boxes to represent

00:03:26,310 --> 00:03:31,470
the concept of a ruby object and all of

00:03:29,340 --> 00:03:34,260
the objects had a label called class and

00:03:31,470 --> 00:03:37,500
this acted as a reference to the parent

00:03:34,260 --> 00:03:40,230
class of the object in question so some

00:03:37,500 --> 00:03:42,510
objects are instance objects and the

00:03:40,230 --> 00:03:47,280
class label for them refers to another

00:03:42,510 --> 00:03:48,959
Ruby object of type class all objects of

00:03:47,280 --> 00:03:52,260
type class also have their own class

00:03:48,959 --> 00:03:54,900
label and they also had some something

00:03:52,260 --> 00:03:56,760
called a methods label and this pointed

00:03:54,900 --> 00:04:00,660
to a table of all the methods that

00:03:56,760 --> 00:04:02,550
instances of that class could call and

00:04:00,660 --> 00:04:05,400
then there were some handwritten notes

00:04:02,550 --> 00:04:07,560
beside the diagram that said any class

00:04:05,400 --> 00:04:11,190
that you define is an instance of a

00:04:07,560 --> 00:04:13,739
class object called class so if we were

00:04:11,190 --> 00:04:15,799
to write class cake in our code we're

00:04:13,739 --> 00:04:18,930
creating a class object named cake and

00:04:15,799 --> 00:04:23,430
it's an instance of another class object

00:04:18,930 --> 00:04:26,380
which has the name class so all classes

00:04:23,430 --> 00:04:29,290
are of type class with a capital C

00:04:26,380 --> 00:04:32,450
and then she had this code in her notes

00:04:29,290 --> 00:04:35,780
so we had class cake and we had two

00:04:32,450 --> 00:04:38,930
methods an instance method called tasty

00:04:35,780 --> 00:04:41,360
which returned true if the flavor of the

00:04:38,930 --> 00:04:44,180
instance was carrot and that made sense

00:04:41,360 --> 00:04:48,190
to me and then we had a class method

00:04:44,180 --> 00:04:50,630
called edible which always returned true

00:04:48,190 --> 00:04:53,000
and then she wrote imagine we had a cake

00:04:50,630 --> 00:04:55,340
instance called carrot so Cara equals

00:04:53,000 --> 00:04:56,720
cake dummy and then she said this is

00:04:55,340 --> 00:04:58,670
what the method lookup chain would look

00:04:56,720 --> 00:05:01,160
like and so this was the diagram that I

00:04:58,670 --> 00:05:05,030
saw she had one of her orange boxes

00:05:01,160 --> 00:05:06,920
labeled carrot it had a class label that

00:05:05,030 --> 00:05:10,430
pointed to another orange box labeled

00:05:06,920 --> 00:05:12,620
cake it also had a class label it also

00:05:10,430 --> 00:05:16,250
had a methods label that pointed to a

00:05:12,620 --> 00:05:18,560
table which had the entry tasty and then

00:05:16,250 --> 00:05:20,540
the class label here pointed to another

00:05:18,560 --> 00:05:23,810
box labeled class with a capital C and

00:05:20,540 --> 00:05:26,780
that had its own methods label put into

00:05:23,810 --> 00:05:28,300
a table with the entry edible and then

00:05:26,780 --> 00:05:30,680
she'd written beside the diagram a

00:05:28,300 --> 00:05:33,680
method definition always comes from an

00:05:30,680 --> 00:05:35,870
object's class and at this point Mike

00:05:33,680 --> 00:05:38,150
shook his head in frustration and he

00:05:35,870 --> 00:05:40,040
said it cannot be that the edible method

00:05:38,150 --> 00:05:42,410
lives on the parent class for all

00:05:40,040 --> 00:05:44,000
classes he asks if he can show me

00:05:42,410 --> 00:05:47,450
something and if he can jump from my

00:05:44,000 --> 00:05:50,090
computer so I agree he goes over to my

00:05:47,450 --> 00:05:52,490
desk opens up a terminal gets into pry

00:05:50,090 --> 00:05:55,400
and loads in the cake class from Jenny's

00:05:52,490 --> 00:05:57,200
notes so the first thing he does it

00:05:55,400 --> 00:05:59,390
shows me that the class of cake is

00:05:57,200 --> 00:06:01,400
indeed class and then he searches for

00:05:59,390 --> 00:06:06,070
the edible method in all of the instance

00:06:01,400 --> 00:06:09,890
methods for class and it wasn't there

00:06:06,070 --> 00:06:11,480
what a mystery and I'm stumped I'm

00:06:09,890 --> 00:06:14,470
really not sure how to proceed with this

00:06:11,480 --> 00:06:16,940
one but I think that if anyone can do it

00:06:14,470 --> 00:06:19,640
debug can do it because she loves a

00:06:16,940 --> 00:06:21,230
challenge and besides this meant a lot

00:06:19,640 --> 00:06:23,840
to Mike he was prepared to pay me

00:06:21,230 --> 00:06:28,550
handsomely and so I agreed to take on

00:06:23,840 --> 00:06:31,520
the case chapter two ever heard of

00:06:28,550 --> 00:06:34,850
Google maybe if you care more about

00:06:31,520 --> 00:06:37,580
privacy y'all about duck duck go well

00:06:34,850 --> 00:06:38,330
when I'm Dee I don't believe in these

00:06:37,580 --> 00:06:40,520
tools

00:06:38,330 --> 00:06:42,080
I don't trust them and there's no

00:06:40,520 --> 00:06:44,090
coincidence that with this approach I've

00:06:42,080 --> 00:06:46,909
become the best Ruby pie that the

00:06:44,090 --> 00:06:51,020
industry has to offer but without search

00:06:46,909 --> 00:06:54,289
engine tools what did I have books books

00:06:51,020 --> 00:06:56,569
books and more books and I spent a whole

00:06:54,289 --> 00:06:59,569
day quickly skimming a load of books but

00:06:56,569 --> 00:07:01,819
I couldn't find anything useful so I

00:06:59,569 --> 00:07:04,669
decided to form a hypothesis and go from

00:07:01,819 --> 00:07:07,580
there so I said well the Edible method

00:07:04,669 --> 00:07:08,860
while not in cake must be somewhere in

00:07:07,580 --> 00:07:11,569
the ancestry tree

00:07:08,860 --> 00:07:13,610
what's the ancestry tree well it shows

00:07:11,569 --> 00:07:15,740
all of the classes of modules that a

00:07:13,610 --> 00:07:18,879
class inherits from so all the possible

00:07:15,740 --> 00:07:21,800
places that our method here come from

00:07:18,879 --> 00:07:25,219
and then I created this where' method

00:07:21,800 --> 00:07:28,430
and it took two parameters an object and

00:07:25,219 --> 00:07:31,490
a method and this would help me search

00:07:28,430 --> 00:07:34,550
the tree so it looked through all of an

00:07:31,490 --> 00:07:38,029
object's classes in ancestors trying to

00:07:34,550 --> 00:07:40,750
find a class where the instance methods

00:07:38,029 --> 00:07:43,389
of that class and only that class

00:07:40,750 --> 00:07:45,650
included the method we were looking for

00:07:43,389 --> 00:07:47,629
so I thought let me check it's working I

00:07:45,650 --> 00:07:48,650
created an instance of cake and check

00:07:47,629 --> 00:07:56,479
that I could find

00:07:48,650 --> 00:07:57,710
taystee on the cake class and now it was

00:07:56,479 --> 00:08:03,529
time for the moment of truth

00:07:57,710 --> 00:08:08,089
the Edible method must be somewhere but

00:08:03,529 --> 00:08:10,610
it was nowhere nowhere at all what a

00:08:08,089 --> 00:08:12,889
mystery and so at this point I'm

00:08:10,610 --> 00:08:14,360
confused so I thought let me take some

00:08:12,889 --> 00:08:16,699
fresh air let me have a change of

00:08:14,360 --> 00:08:19,550
scenery so I decided to head to my

00:08:16,699 --> 00:08:21,620
favorite co-working space and here I

00:08:19,550 --> 00:08:24,409
feel at home I'm surrounded by people

00:08:21,620 --> 00:08:27,560
hacking away and I quietly settle down

00:08:24,409 --> 00:08:30,650
at one desk but given my naturally

00:08:27,560 --> 00:08:32,510
inquisitive nature my eyes couldn't help

00:08:30,650 --> 00:08:35,300
but stray to the screen of the guy next

00:08:32,510 --> 00:08:36,649
to me and I saw that he was messing

00:08:35,300 --> 00:08:38,779
around an IRB was something called

00:08:36,649 --> 00:08:41,329
object space so I said what's that cuz

00:08:38,779 --> 00:08:42,800
it looked interesting and he said well

00:08:41,329 --> 00:08:44,870
it's a way that you can interact with

00:08:42,800 --> 00:08:47,600
all of the live objects within a ruby

00:08:44,870 --> 00:08:49,579
session for example here's how you can

00:08:47,600 --> 00:08:51,380
count all of the lives live class

00:08:49,579 --> 00:08:53,600
objects that you have in

00:08:51,380 --> 00:08:54,980
recession so I thought maybe was time I

00:08:53,600 --> 00:08:58,340
should take a break and I decided to

00:08:54,980 --> 00:09:00,620
have a little play by myself so I went

00:08:58,340 --> 00:09:01,880
into IRB and I counted all the class

00:09:00,620 --> 00:09:09,110
objects that were in the session I just

00:09:01,880 --> 00:09:10,610
started so I thought 936 let me create a

00:09:09,110 --> 00:09:18,170
class and see that that number goes up

00:09:10,610 --> 00:09:21,850
by one 938 that was strange I thought

00:09:18,170 --> 00:09:21,850
maybe I'm seeing things let me try again

00:09:26,050 --> 00:09:33,860
940 what a mystery two objects but I

00:09:32,570 --> 00:09:35,750
couldn't spend too long thinking about

00:09:33,860 --> 00:09:37,790
this because just then the phone rang

00:09:35,750 --> 00:09:40,910
and it was my friend wondering where I

00:09:37,790 --> 00:09:42,860
was I'd completely forgotten that I was

00:09:40,910 --> 00:09:45,290
meant to go to a tech lecture with her

00:09:42,860 --> 00:09:47,600
and I was anxious that I didn't have

00:09:45,290 --> 00:09:49,760
much time to complete the case for Mike

00:09:47,600 --> 00:09:51,890
but I'd also been canceling a lot on

00:09:49,760 --> 00:09:54,080
this friend lately putting my PID T's

00:09:51,890 --> 00:09:55,940
first so I thought that on this occasion

00:09:54,080 --> 00:10:00,650
I should make a bit of time for her and

00:09:55,940 --> 00:10:01,910
I rushed out of the door chapter 3 so I

00:10:00,650 --> 00:10:04,670
remember that I turned up just in time

00:10:01,910 --> 00:10:06,520
for the start of the lecture and it was

00:10:04,670 --> 00:10:09,140
about a language called small talk I

00:10:06,520 --> 00:10:10,850
wasn't interested in at all I only care

00:10:09,140 --> 00:10:14,120
about Ruby but I was there for my friend

00:10:10,850 --> 00:10:16,580
and I remember that the lecture said the

00:10:14,120 --> 00:10:18,560
small talk had been created in 1970 and

00:10:16,580 --> 00:10:21,890
that it had led to the birth of

00:10:18,560 --> 00:10:23,450
object-oriented programming but I could

00:10:21,890 --> 00:10:25,310
have concentrate for much longer I

00:10:23,450 --> 00:10:28,820
couldn't stop thinking about my play

00:10:25,310 --> 00:10:31,460
with objects spaced each time I'd

00:10:28,820 --> 00:10:34,280
created one class but yet two new

00:10:31,460 --> 00:10:36,620
objects were created in the session just

00:10:34,280 --> 00:10:40,010
pay attention my friend said and Lodging

00:10:36,620 --> 00:10:42,500
me so I did and I looked up to see the

00:10:40,010 --> 00:10:45,560
lecturer asking what is the class of a

00:10:42,500 --> 00:10:46,850
class in small talk and he had this code

00:10:45,560 --> 00:10:48,620
on the screen and I hadn't quite been

00:10:46,850 --> 00:10:50,600
paying attention but I could see that

00:10:48,620 --> 00:10:52,700
she'd printed out this polygon object

00:10:50,600 --> 00:10:54,470
and then she'd asked what was the class

00:10:52,700 --> 00:10:56,930
of the polygon object and that had

00:10:54,470 --> 00:10:58,880
returned polygon class and then she

00:10:56,930 --> 00:11:00,400
asked the system what was the class of

00:10:58,880 --> 00:11:03,600
the polygon class

00:11:00,400 --> 00:11:06,670
class and that had returned a meta class

00:11:03,600 --> 00:11:07,630
and then she said the the class of a

00:11:06,670 --> 00:11:10,180
class is mortal

00:11:07,630 --> 00:11:12,190
is called a meta class and she went on

00:11:10,180 --> 00:11:14,230
to say that in fact all of the languages

00:11:12,190 --> 00:11:16,060
that had been inspired by small talk had

00:11:14,230 --> 00:11:19,210
their own concept of the meta classes

00:11:16,060 --> 00:11:24,460
and that included objective-c Java

00:11:19,210 --> 00:11:28,930
Python and Ruby something clicked one

00:11:24,460 --> 00:11:31,570
class two objects so I made my apologies

00:11:28,930 --> 00:11:33,660
to my soon to be no longer friend and I

00:11:31,570 --> 00:11:39,850
rushed out of the door and ran home I

00:11:33,660 --> 00:11:40,690
thought I'd try my luck but of course

00:11:39,850 --> 00:11:42,580
that would be too easy

00:11:40,690 --> 00:11:45,040
and so I thought let me see all the

00:11:42,580 --> 00:11:47,950
methods that exist on the cake class um

00:11:45,040 --> 00:11:50,529
I found that pretty overwhelming so I

00:11:47,950 --> 00:11:59,050
decided to filter it down to all of the

00:11:50,529 --> 00:12:01,750
methods that included the word class and

00:11:59,050 --> 00:12:03,970
so this was much better and two of these

00:12:01,750 --> 00:12:07,240
stood out for me one of them was super

00:12:03,970 --> 00:12:10,240
class and the other one was a singleton

00:12:07,240 --> 00:12:12,339
class so the first thing I thought was

00:12:10,240 --> 00:12:16,660
let me remind myself of the ancestry

00:12:12,339 --> 00:12:18,100
tree for cake and I knew that these were

00:12:16,660 --> 00:12:21,160
all of the objects were edible wasn't

00:12:18,100 --> 00:12:24,279
hiding and then I said let's see what

00:12:21,160 --> 00:12:25,150
superclass returns so I immediately knew

00:12:24,279 --> 00:12:27,940
it wasn't the answer

00:12:25,150 --> 00:12:29,620
because object was already in the

00:12:27,940 --> 00:12:30,760
ancestry tree that I'd already searched

00:12:29,620 --> 00:12:33,790
so it was just providing me with a

00:12:30,760 --> 00:12:37,450
subset so I thought let me try a

00:12:33,790 --> 00:12:40,029
singleton class this was something I

00:12:37,450 --> 00:12:42,790
hadn't seen before and when I checked

00:12:40,029 --> 00:12:46,500
the answer to tree there were a few new

00:12:42,790 --> 00:12:46,500
things that I hadn't seen before

00:12:50,410 --> 00:12:55,839
so at this point I was excited and I

00:12:52,860 --> 00:12:57,759
went back to my where method and I

00:12:55,839 --> 00:13:00,519
changed it so that instead of looking at

00:12:57,759 --> 00:13:02,470
the ancestors of an object's class we

00:13:00,519 --> 00:13:04,899
looked at the ancestors of an object's

00:13:02,470 --> 00:13:07,000
singleton class so that way I could

00:13:04,899 --> 00:13:11,279
search the three new things that I found

00:13:07,000 --> 00:13:11,279
and then it was the moment of truth

00:13:14,759 --> 00:13:20,529
result and I thought let me just quickly

00:13:17,829 --> 00:13:22,269
double check what's happening and in my

00:13:20,529 --> 00:13:25,240
excitement I forgot how to type

00:13:22,269 --> 00:13:28,720
momentarily but I got there eventually

00:13:25,240 --> 00:13:32,069
and I confirmed that the Edible method

00:13:28,720 --> 00:13:34,620
was hiding on cake's singleton class

00:13:32,069 --> 00:13:38,259
case closed

00:13:34,620 --> 00:13:40,870
chapter four so at this point I'm

00:13:38,259 --> 00:13:43,089
delighted and I'm super excited to share

00:13:40,870 --> 00:13:44,889
the news with Mike and I also took a

00:13:43,089 --> 00:13:47,199
moment to wonder whether I should retire

00:13:44,889 --> 00:13:49,060
because this would prove to be one of

00:13:47,199 --> 00:13:50,680
the biggest successes of my career and

00:13:49,060 --> 00:13:53,199
they also always say that you should

00:13:50,680 --> 00:13:56,410
quit while you're ahead but anyway I

00:13:53,199 --> 00:13:58,509
picked up the phone gave Mike a call the

00:13:56,410 --> 00:14:00,759
phone rang for what seemed like forever

00:13:58,509 --> 00:14:03,819
and I was worried that I would never

00:14:00,759 --> 00:14:05,439
reach him but finally he answered and I

00:14:03,819 --> 00:14:07,720
said I've solved the case can I come

00:14:05,439 --> 00:14:09,970
round and he was excited he said of

00:14:07,720 --> 00:14:13,959
course come round I have the loads ready

00:14:09,970 --> 00:14:16,720
and waiting for you but although the

00:14:13,959 --> 00:14:20,230
case will solve for Mike I still wasn't

00:14:16,720 --> 00:14:21,970
satisfied I just discovered a whole new

00:14:20,230 --> 00:14:23,339
concept in the language that I hadn't

00:14:21,970 --> 00:14:27,670
heard of before

00:14:23,339 --> 00:14:29,769
what are singleton classes so instead of

00:14:27,670 --> 00:14:32,730
going directly to Mike's I decided to

00:14:29,769 --> 00:14:35,829
take a detour to visit a friend of mine

00:14:32,730 --> 00:14:37,930
her name was Ellen she was 43 a

00:14:35,829 --> 00:14:41,339
freelance developer and she regularly

00:14:37,930 --> 00:14:43,389
contributed to the Ruby code base I

00:14:41,339 --> 00:14:47,350
proceeded to tell Ellen all about the

00:14:43,389 --> 00:14:49,240
case and when I'm done I asked her so

00:14:47,350 --> 00:14:52,420
what are these singleton class is all

00:14:49,240 --> 00:14:54,610
about and she says well they're hidden

00:14:52,420 --> 00:14:57,250
classes created internally behind the

00:14:54,610 --> 00:14:58,990
scenes in Ruby and they're there to hold

00:14:57,250 --> 00:15:01,569
methods defined only for one particular

00:14:58,990 --> 00:15:02,089
object so you take your instance camera

00:15:01,569 --> 00:15:04,579
of the

00:15:02,089 --> 00:15:07,339
glass it's singleton class would hold

00:15:04,579 --> 00:15:09,050
methods specific to karat only and not

00:15:07,339 --> 00:15:11,899
to any other instance say if you had one

00:15:09,050 --> 00:15:13,819
called chocolate or red velvet and I

00:15:11,899 --> 00:15:16,430
said okay well given that they're

00:15:13,819 --> 00:15:19,370
working away behind the scenes when does

00:15:16,430 --> 00:15:20,959
knowing about them become useful and

00:15:19,370 --> 00:15:23,139
then thought for a while and then she

00:15:20,959 --> 00:15:26,269
told me about one of her recent clients

00:15:23,139 --> 00:15:28,579
they were called budgeting Inc and they

00:15:26,269 --> 00:15:31,129
were a clever artificial intelligence

00:15:28,579 --> 00:15:33,439
machine learning personal finance tool

00:15:31,129 --> 00:15:35,540
for small business owners and they were

00:15:33,439 --> 00:15:37,490
expanding globally and they needed to

00:15:35,540 --> 00:15:39,290
roll out slightly unique versions of

00:15:37,490 --> 00:15:42,139
their software for each new city that

00:15:39,290 --> 00:15:43,879
they entered so Ellen told me how when

00:15:42,139 --> 00:15:46,610
she first looks at the code base she was

00:15:43,879 --> 00:15:48,230
horrified because different developers

00:15:46,610 --> 00:15:50,420
had been responsible for each new city

00:15:48,230 --> 00:15:52,100
and it looked like they were trying a

00:15:50,420 --> 00:15:54,439
new approach for each thing whether that

00:15:52,100 --> 00:15:56,269
was naming things testing things and so

00:15:54,439 --> 00:15:57,470
there was a lot of duplication but

00:15:56,269 --> 00:15:59,589
sometimes it was obvious where things

00:15:57,470 --> 00:16:01,699
were repeated and sometimes it wasn't

00:15:59,589 --> 00:16:03,379
but this meant that there was lots of

00:16:01,699 --> 00:16:05,089
wasted time on development because

00:16:03,379 --> 00:16:08,300
people were reinventing the wheel and

00:16:05,089 --> 00:16:10,490
often doing a bad job and so there were

00:16:08,300 --> 00:16:12,740
lots of bugs some things were hastily

00:16:10,490 --> 00:16:14,660
copied some things were left out and it

00:16:12,740 --> 00:16:16,879
was difficult to see what was important

00:16:14,660 --> 00:16:18,470
and so the developers were unhappy

00:16:16,879 --> 00:16:21,259
because they had a lot of tiresome work

00:16:18,470 --> 00:16:23,089
the cognitive load was high and the

00:16:21,259 --> 00:16:25,910
product owner was also unhappy because

00:16:23,089 --> 00:16:28,480
delivery was either slow or things were

00:16:25,910 --> 00:16:30,740
spun up very quickly and were bug-ridden

00:16:28,480 --> 00:16:33,230
so and I wasn't quite sure what to do

00:16:30,740 --> 00:16:36,740
and then she said she decided to create

00:16:33,230 --> 00:16:38,660
a DSL a domain-specific language and she

00:16:36,740 --> 00:16:42,019
asked me if I knew what she was talking

00:16:38,660 --> 00:16:45,199
about it's a mystery to me Ellen I said

00:16:42,019 --> 00:16:46,850
you'll have to explain so she said she

00:16:45,199 --> 00:16:48,529
reckoned me over to a computer and she

00:16:46,850 --> 00:16:51,620
said let me show you a basic version of

00:16:48,529 --> 00:16:54,499
a DSL so she opened up a prize session

00:16:51,620 --> 00:16:57,589
and input this class so it was cool city

00:16:54,499 --> 00:17:00,920
instance it had a class method called

00:16:57,589 --> 00:17:02,899
construct which took a block it set up a

00:17:00,920 --> 00:17:06,230
city variable which cool to initialize

00:17:02,899 --> 00:17:08,179
via the new keyword and then we called a

00:17:06,230 --> 00:17:10,069
method called instance of our on the

00:17:08,179 --> 00:17:12,140
city and passed in the block that we'd

00:17:10,069 --> 00:17:13,189
passed into the method and Ellen said I

00:17:12,140 --> 00:17:15,030
should pay attention to this line

00:17:13,189 --> 00:17:18,320
because it would prove to be

00:17:15,030 --> 00:17:21,060
important later and then we return city

00:17:18,320 --> 00:17:24,270
then we set an attribute reader up coold

00:17:21,060 --> 00:17:26,970
taxes we had the initialized method

00:17:24,270 --> 00:17:30,150
which set up a taxes collection instance

00:17:26,970 --> 00:17:32,370
variable as an empty array we had a

00:17:30,150 --> 00:17:35,370
method called tax which took a name and

00:17:32,370 --> 00:17:38,160
that pushed the tax on to the taxes

00:17:35,370 --> 00:17:42,120
collection so that was time to give it a

00:17:38,160 --> 00:17:54,960
go so she created a city called New York

00:17:42,120 --> 00:18:00,030
and added some taxes and then she

00:17:54,960 --> 00:18:03,060
printed the taxes out and there we have

00:18:00,030 --> 00:18:04,890
it Ellen said a very simple dsl and we

00:18:03,060 --> 00:18:07,170
can quickly spin up these lightweight

00:18:04,890 --> 00:18:08,730
city objects and then she said well

00:18:07,170 --> 00:18:11,930
imagine if we had other properties like

00:18:08,730 --> 00:18:13,950
list of banks and finance schemes or

00:18:11,930 --> 00:18:16,680
imagine if we had a bit more information

00:18:13,950 --> 00:18:18,570
about each of the properties so we've

00:18:16,680 --> 00:18:20,910
only used the name of attacks but what

00:18:18,570 --> 00:18:23,760
if we had other information about rates

00:18:20,910 --> 00:18:25,950
or thresholds we're using this simple

00:18:23,760 --> 00:18:28,580
starting point it wouldn't be hard to

00:18:25,950 --> 00:18:31,820
extend the city instance class to create

00:18:28,580 --> 00:18:33,780
incrementally more complex city objects

00:18:31,820 --> 00:18:37,230
when imagine taking that to the next

00:18:33,780 --> 00:18:38,730
level Ellen said she said imagine

00:18:37,230 --> 00:18:40,500
interacting with the same city in first

00:18:38,730 --> 00:18:42,690
class in the same way on the command

00:18:40,500 --> 00:18:44,820
line but instead of just creating

00:18:42,690 --> 00:18:47,280
variables in a price session we're

00:18:44,820 --> 00:18:49,470
spitting up new subclasses of City than

00:18:47,280 --> 00:18:52,200
other related models like tax scheme

00:18:49,470 --> 00:18:53,490
banks and so she explained to me that

00:18:52,200 --> 00:18:56,610
this was the sort of thing that she had

00:18:53,490 --> 00:18:57,870
produced for budgeting Inc a DSL that

00:18:56,610 --> 00:18:59,910
had allowed for quick and easy

00:18:57,870 --> 00:19:03,690
scaffolding of each new city and the

00:18:59,910 --> 00:19:05,760
related subclasses so now we know how to

00:19:03,690 --> 00:19:08,010
spin up identical city instances with

00:19:05,760 --> 00:19:11,190
different names and different taxes but

00:19:08,010 --> 00:19:12,780
what about if one city had a quirk so he

00:19:11,190 --> 00:19:14,880
asked me to think of a place in the UK

00:19:12,780 --> 00:19:16,680
because that's where I'm from and so I

00:19:14,880 --> 00:19:20,010
suggested bath because that had been the

00:19:16,680 --> 00:19:24,860
scene of my last investigation and so

00:19:20,010 --> 00:19:24,860
she set up baths and added attacks

00:19:26,640 --> 00:19:29,670
and then she asked me to think about

00:19:28,230 --> 00:19:33,870
something that made people in the UK

00:19:29,670 --> 00:19:35,309
unhappy but she didn't like my

00:19:33,870 --> 00:19:37,080
suggestion she thought it was a bit

00:19:35,309 --> 00:19:39,510
controversial so she went for the fact

00:19:37,080 --> 00:19:41,549
that it rained all the time and she said

00:19:39,510 --> 00:19:43,140
that when it does the government calls

00:19:41,549 --> 00:19:49,340
an amnesty and gets rid of everyone's

00:19:43,140 --> 00:19:51,960
taxes so we picked it out pass taxes and

00:19:49,340 --> 00:19:59,400
then it rained and so the government

00:19:51,960 --> 00:19:59,790
called an amnesty and all the taxes are

00:19:59,400 --> 00:20:03,059
gone

00:19:59,790 --> 00:20:05,030
and she said remember our friends in New

00:20:03,059 --> 00:20:07,410
York

00:20:05,030 --> 00:20:10,290
so they've heard about this rainy day

00:20:07,410 --> 00:20:15,750
amnesty and they won't want to so the

00:20:10,290 --> 00:20:18,090
next time it rains they caught one but

00:20:15,750 --> 00:20:20,490
it doesn't work undefined method rainy

00:20:18,090 --> 00:20:21,900
day amnesty for city instance and there

00:20:20,490 --> 00:20:23,580
were a load of letters and numbers and

00:20:21,900 --> 00:20:26,730
Ellen said well let me show you what

00:20:23,580 --> 00:20:32,250
that is and she called singleton class

00:20:26,730 --> 00:20:35,190
on New York and she showed that they

00:20:32,250 --> 00:20:37,110
were the same thing so she said that

00:20:35,190 --> 00:20:38,700
when we enter the realm of dear cells

00:20:37,110 --> 00:20:40,860
and we start calling methods like

00:20:38,700 --> 00:20:43,470
innocence of our we're leveraging the

00:20:40,860 --> 00:20:45,660
existence of singles and classes because

00:20:43,470 --> 00:20:48,059
what instance of our does is it stores

00:20:45,660 --> 00:20:50,520
any method declarations passed in via

00:20:48,059 --> 00:20:53,160
the block on the relevant objects

00:20:50,520 --> 00:20:54,780
singleton class but she said holding to

00:20:53,160 --> 00:20:56,750
that thought we'll come back to it but

00:20:54,780 --> 00:21:00,210
let's take a step back to the high level

00:20:56,750 --> 00:21:02,190
so by creating a dsl like this it

00:21:00,210 --> 00:21:05,610
enabled the developers to spin up each

00:21:02,190 --> 00:21:07,590
new instance of a city effortlessly so

00:21:05,610 --> 00:21:09,000
she explains how she had now managed to

00:21:07,590 --> 00:21:11,910
abstract out all of the key similarities

00:21:09,000 --> 00:21:13,799
between any city and that the developers

00:21:11,910 --> 00:21:15,570
had a frictionless way via the command

00:21:13,799 --> 00:21:18,000
line or spinning up the foundation that

00:21:15,570 --> 00:21:19,980
they needed and the whole code base was

00:21:18,000 --> 00:21:21,720
better maintained because all of that

00:21:19,980 --> 00:21:24,059
scaffolding had been well tested and

00:21:21,720 --> 00:21:25,650
then had done that once and none of the

00:21:24,059 --> 00:21:28,500
other developers had to worry about it

00:21:25,650 --> 00:21:30,030
now they could now focus on the

00:21:28,500 --> 00:21:32,220
interesting bits which was the

00:21:30,030 --> 00:21:36,120
customization required for each new city

00:21:32,220 --> 00:21:37,559
so the scope was much more refined so

00:21:36,120 --> 00:21:39,950
now the developers were happy because

00:21:37,559 --> 00:21:41,899
interacting with the system was so much

00:21:39,950 --> 00:21:43,610
but uh and it was much easier to have a

00:21:41,899 --> 00:21:45,350
high-level overview of the whole domain

00:21:43,610 --> 00:21:49,010
in the head just by reading the

00:21:45,350 --> 00:21:50,630
documentation of the DSL and the product

00:21:49,010 --> 00:21:53,149
owner was delighted also because there

00:21:50,630 --> 00:21:55,100
were far fewer bugs delivery was faster

00:21:53,149 --> 00:21:57,080
and she could also speak in the same

00:21:55,100 --> 00:21:59,750
language that the developers were using

00:21:57,080 --> 00:22:03,649
by expressing new requirements in the

00:21:59,750 --> 00:22:05,600
terminology of the DSL but let's go back

00:22:03,649 --> 00:22:09,139
to singleton classes and them said so

00:22:05,600 --> 00:22:10,909
why is knowing about them useful well

00:22:09,139 --> 00:22:12,049
she says that one of the main reasons

00:22:10,909 --> 00:22:14,360
that she was able to complete the

00:22:12,049 --> 00:22:15,980
project to a high standard was because

00:22:14,360 --> 00:22:17,860
she always understood exactly where she

00:22:15,980 --> 00:22:20,750
was defining methods at any given time

00:22:17,860 --> 00:22:22,490
because once you start entering the

00:22:20,750 --> 00:22:24,889
realm of dynamically creating classes

00:22:22,490 --> 00:22:27,139
and methods and Singleton's the class

00:22:24,889 --> 00:22:29,360
hierarchy and method lookups gets far

00:22:27,139 --> 00:22:31,250
more interesting and you'll be getting

00:22:29,360 --> 00:22:33,230
error messages like the undefined method

00:22:31,250 --> 00:22:35,870
one we just saw and you need to be able

00:22:33,230 --> 00:22:37,460
to sportwear singleton methods and

00:22:35,870 --> 00:22:38,870
classes are involved and where they're

00:22:37,460 --> 00:22:41,690
hiding because it can save you from a

00:22:38,870 --> 00:22:43,760
lot of headache so then Ellen turned to

00:22:41,690 --> 00:22:46,610
me and she said well do you know what

00:22:43,760 --> 00:22:48,860
the class of a singleton class is and I

00:22:46,610 --> 00:22:50,630
said to get another mystery Ellen and so

00:22:48,860 --> 00:22:52,850
she told me to go and investigate that

00:22:50,630 --> 00:22:54,230
as homework I still haven't got round to

00:22:52,850 --> 00:22:57,919
it yet maybe one of you could help me

00:22:54,230 --> 00:22:59,510
later anyway Ellen said but beware I've

00:22:57,919 --> 00:23:01,909
been going on about dear cells but

00:22:59,510 --> 00:23:04,130
they're not the answer to everything so

00:23:01,909 --> 00:23:06,740
if you have complex repleted business

00:23:04,130 --> 00:23:09,769
rules and you need to customize behavior

00:23:06,740 --> 00:23:11,809
in some certain cases then consider deer

00:23:09,769 --> 00:23:15,799
cells as an option but even then

00:23:11,809 --> 00:23:17,720
approach them with caution but and you

00:23:15,799 --> 00:23:18,889
don't even need to be writing them for

00:23:17,720 --> 00:23:20,570
it to be beneficial for you to

00:23:18,889 --> 00:23:23,690
understand the basics of how they work

00:23:20,570 --> 00:23:25,610
for example if you're using rails you're

00:23:23,690 --> 00:23:27,980
seeing deer cells every single day and

00:23:25,610 --> 00:23:29,630
she went to the rails guides website and

00:23:27,980 --> 00:23:32,179
showed me that active record migrate

00:23:29,630 --> 00:23:33,679
migrations were carried out via a DSL so

00:23:32,179 --> 00:23:35,960
that's what happens when we write create

00:23:33,679 --> 00:23:38,960
table teto string and specify the format

00:23:35,960 --> 00:23:41,510
of our columns and when we specify how

00:23:38,960 --> 00:23:44,929
our rails app handles HTTP requests

00:23:41,510 --> 00:23:46,159
that's also done via a DSL and it

00:23:44,929 --> 00:23:48,200
occurred to me that I'd always just for

00:23:46,159 --> 00:23:49,159
doing this stuff by row and I hadn't

00:23:48,200 --> 00:23:51,289
stopped to think about what was

00:23:49,159 --> 00:23:53,670
happening behind the scenes every time

00:23:51,289 --> 00:23:56,880
time I typed the resources keyword

00:23:53,670 --> 00:23:58,710
to my roots RB file and there's more of

00:23:56,880 --> 00:24:01,440
these Adam said and she said that when

00:23:58,710 --> 00:24:03,960
people talk about rails magic it's not

00:24:01,440 --> 00:24:07,260
really magic it's just a collection of

00:24:03,960 --> 00:24:09,540
walrus into yourselves and then Ellen

00:24:07,260 --> 00:24:11,730
said to me I hope your TDD all of the

00:24:09,540 --> 00:24:12,270
time and I said of course what do you

00:24:11,730 --> 00:24:15,600
take me for

00:24:12,270 --> 00:24:17,910
and he said well a spec with its

00:24:15,600 --> 00:24:20,340
describe concepts and it blocks are all

00:24:17,910 --> 00:24:21,930
deer cells as well and so with all of

00:24:20,340 --> 00:24:24,350
these rails and aspect Deer cells

00:24:21,930 --> 00:24:27,090
knowing about singleton classes can help

00:24:24,350 --> 00:24:29,070
because you might find yourself in a

00:24:27,090 --> 00:24:30,330
tricky problem and you can't make head

00:24:29,070 --> 00:24:32,180
or tail of it particularly if you

00:24:30,330 --> 00:24:34,920
inherit a codebase from somebody else

00:24:32,180 --> 00:24:36,720
and he said if you're seeing a funny bug

00:24:34,920 --> 00:24:39,420
to do with methods you never know

00:24:36,720 --> 00:24:41,130
singleton classes might be involved and

00:24:39,420 --> 00:24:43,440
so if you have them as part of your

00:24:41,130 --> 00:24:46,740
suite of debugging tools it can be very

00:24:43,440 --> 00:24:47,940
useful and so I was feeling really

00:24:46,740 --> 00:24:50,250
levelled up by the end of this

00:24:47,940 --> 00:24:52,220
conversation and so armed with this new

00:24:50,250 --> 00:24:55,680
knowledge I headed over to Mike's house

00:24:52,220 --> 00:24:57,810
but when I arrived I found a Mike you

00:24:55,680 --> 00:25:00,990
had tears in his eyes he'd obviously

00:24:57,810 --> 00:25:03,510
been recently crying and he had compote

00:25:00,990 --> 00:25:05,490
pieces of paper in his hand and he

00:25:03,510 --> 00:25:08,640
raised his arm towards me offering me

00:25:05,490 --> 00:25:10,290
the papers and I looked at them and they

00:25:08,640 --> 00:25:11,850
seemed exactly the same as the method

00:25:10,290 --> 00:25:15,690
Licata notes of Jenny's that he had

00:25:11,850 --> 00:25:17,970
brought me the day before so I could see

00:25:15,690 --> 00:25:20,670
what was wrong we had the carrot box

00:25:17,970 --> 00:25:23,190
they rolled with carrot and that has the

00:25:20,670 --> 00:25:25,440
class label which pointed to another

00:25:23,190 --> 00:25:28,080
ruby object called cake

00:25:25,440 --> 00:25:30,810
it had its class label and it also had

00:25:28,080 --> 00:25:33,420
its methods label with the tasty entry

00:25:30,810 --> 00:25:36,630
and then we had the class box with its

00:25:33,420 --> 00:25:39,870
method label pointing to edible the

00:25:36,630 --> 00:25:43,200
weight it didn't say class this time it

00:25:39,870 --> 00:25:45,150
said cake singleton and as Mike saw me

00:25:43,200 --> 00:25:48,330
noticed this difference he fell to his

00:25:45,150 --> 00:25:51,210
knees and broke down in tears Jenny knew

00:25:48,330 --> 00:25:54,060
about singleton classes all along he

00:25:51,210 --> 00:25:55,920
cried he'd gone into her room to find

00:25:54,060 --> 00:25:59,400
the notes in advance of me coming and

00:25:55,920 --> 00:26:01,470
this was the copy that he'd found Danny

00:25:59,400 --> 00:26:03,390
was so desperate to secure the job for

00:26:01,470 --> 00:26:05,940
herself that she set out to

00:26:03,390 --> 00:26:07,410
intentionally mislead Mike in the hope

00:26:05,940 --> 00:26:09,000
that he would fail a whole set

00:26:07,410 --> 00:26:12,810
she loved the interview and therefore

00:26:09,000 --> 00:26:15,600
look underprepared I for one was

00:26:12,810 --> 00:26:17,490
disappointed in myself because I felt so

00:26:15,600 --> 00:26:19,740
focused on the main villain the shady

00:26:17,490 --> 00:26:23,040
mastermind that I'd failed to spot a

00:26:19,740 --> 00:26:25,500
villain right under my nose my best

00:26:23,040 --> 00:26:27,570
friend tried to sabotage me and this

00:26:25,500 --> 00:26:29,340
point Mike started whaling again saying

00:26:27,570 --> 00:26:31,980
he wasn't gonna go to the RIT interview

00:26:29,340 --> 00:26:35,220
and I said nonsense you can't give up

00:26:31,980 --> 00:26:37,080
now i sat down next to him I gave him a

00:26:35,220 --> 00:26:39,630
comforting pat and I said you can do

00:26:37,080 --> 00:26:41,670
this and I have just the thing to set

00:26:39,630 --> 00:26:44,430
you apart from Jenny so he looked up

00:26:41,670 --> 00:26:47,310
hopeful have you heard of do yourself I

00:26:44,430 --> 00:26:48,750
asked him and I proceeded to tell him

00:26:47,310 --> 00:26:51,930
everything that Ellen had just shared

00:26:48,750 --> 00:26:54,540
with me and although Mike still looked

00:26:51,930 --> 00:26:56,370
devastated as I left him I had

00:26:54,540 --> 00:26:57,900
confidence that I had inspired him with

00:26:56,370 --> 00:26:59,880
the knowledge and power of singleton

00:26:57,900 --> 00:27:02,490
classes that he'd pull himself together

00:26:59,880 --> 00:27:08,970
and go and secure the r.i.p internship

00:27:02,490 --> 00:27:10,560
for himself so it's 2 months later and I

00:27:08,970 --> 00:27:13,500
managed to drag myself to Ruby hack

00:27:10,560 --> 00:27:15,180
night and when I arrived and milling

00:27:13,500 --> 00:27:16,770
about enjoying the free food and drink

00:27:15,180 --> 00:27:19,650
what I hear a couple of people

00:27:16,770 --> 00:27:21,900
whispering in the corner would be famous

00:27:19,650 --> 00:27:25,590
one of them says and I look across the

00:27:21,900 --> 00:27:27,330
room at who do I see Ellen so I walk

00:27:25,590 --> 00:27:28,710
over we catch up and I tell her I've

00:27:27,330 --> 00:27:30,810
been reflecting on the case of the

00:27:28,710 --> 00:27:33,210
missing method and my takeaways

00:27:30,810 --> 00:27:35,130
so singleton classes are there to hold

00:27:33,210 --> 00:27:37,920
methods to find form particular object

00:27:35,130 --> 00:27:39,990
and when you understand them it opens up

00:27:37,920 --> 00:27:42,030
a whole new world of Ruby dynamically

00:27:39,990 --> 00:27:44,430
creating classes or methods on the fly

00:27:42,030 --> 00:27:47,580
in more complex applications using

00:27:44,430 --> 00:27:49,200
things like dia cells but I said I still

00:27:47,580 --> 00:27:52,740
feel like I can get by day to day

00:27:49,200 --> 00:27:56,250
ignoring them so do I really have to

00:27:52,740 --> 00:27:58,620
care about them I asked her not really

00:27:56,250 --> 00:28:00,570
Alan said like you say if you are

00:27:58,620 --> 00:28:02,130
writing to yourselves and definitely do

00:28:00,570 --> 00:28:03,870
know what you're doing and they do

00:28:02,130 --> 00:28:07,230
underpin popular frameworks like rails

00:28:03,870 --> 00:28:10,230
but day to day you can get by however

00:28:07,230 --> 00:28:12,030
she said understanding why Singleton's

00:28:10,230 --> 00:28:15,210
are there I think is super interesting

00:28:12,030 --> 00:28:17,550
and empowering so think of the Ruby core

00:28:15,210 --> 00:28:19,050
team they wants to keep things as

00:28:17,550 --> 00:28:21,330
straightforward and simple as possible

00:28:19,050 --> 00:28:23,489
and by simple

00:28:21,330 --> 00:28:25,409
she said they wanted to minimize special

00:28:23,489 --> 00:28:26,759
cases so aim for having one way one

00:28:25,409 --> 00:28:30,239
pattern for explaining how anything

00:28:26,759 --> 00:28:31,619
worked how consistent can we get things

00:28:30,239 --> 00:28:34,110
there's something that they continually

00:28:31,619 --> 00:28:35,730
asked and so if we think about

00:28:34,110 --> 00:28:38,669
consistency and apply that to the realm

00:28:35,730 --> 00:28:40,999
of Ruby methods well all methods in Ruby

00:28:38,669 --> 00:28:44,220
are defined in only one of two places a

00:28:40,999 --> 00:28:48,059
normal class object or a singleton class

00:28:44,220 --> 00:28:50,789
and really every method in Ruby is an

00:28:48,059 --> 00:28:53,519
instance method a method lookup always

00:28:50,789 --> 00:28:54,480
starts with a singleton class and class

00:28:53,519 --> 00:28:56,159
methods don't really have any

00:28:54,480 --> 00:28:59,159
fundamentally different way a behavior

00:28:56,159 --> 00:29:01,559
to other methods what we call class

00:28:59,159 --> 00:29:03,809
methods are really instance methods

00:29:01,559 --> 00:29:06,210
where the object in question is a class

00:29:03,809 --> 00:29:09,899
and the method is stored on the classes

00:29:06,210 --> 00:29:11,639
singleton so ya signal token classes are

00:29:09,899 --> 00:29:14,429
invisible she said but they're

00:29:11,639 --> 00:29:18,179
everywhere they're a fundamental part to

00:29:14,429 --> 00:29:19,879
how Ruby and its method lookup works so

00:29:18,179 --> 00:29:22,799
I left the hack neck deep in thought

00:29:19,879 --> 00:29:24,419
Ellen had inspired me to explore more of

00:29:22,799 --> 00:29:26,519
Ruby behind the scenes because there was

00:29:24,419 --> 00:29:28,919
so much that I didn't know and I had

00:29:26,519 --> 00:29:30,840
only scratched the surface and I'd

00:29:28,919 --> 00:29:33,059
always been a general Ruby PI and had

00:29:30,840 --> 00:29:35,309
been very successful but I thought

00:29:33,059 --> 00:29:39,049
perhaps I was fine too time to find a

00:29:35,309 --> 00:29:39,049
niche and reach the next level

00:30:06,820 --> 00:30:24,579
[Applause]

00:30:16,950 --> 00:30:24,579
[Music]

00:30:28,110 --> 00:30:34,440
okay hi everyone we're it's time now for

00:30:31,029 --> 00:30:37,419
the bits of the next location so we have

00:30:34,440 --> 00:30:39,880
three contestants I'm doing that because

00:30:37,419 --> 00:30:43,720
Lord will also be pitting and you know

00:30:39,880 --> 00:30:47,320
conflict of interest yeah so maybe

00:30:43,720 --> 00:30:50,679
everyone who submitted the bits can like

00:30:47,320 --> 00:30:53,100
start sitting in the front of the so

00:30:50,679 --> 00:31:00,960
we'll start first-come first-served so

00:30:53,100 --> 00:31:00,960

YouTube URL: https://www.youtube.com/watch?v=wkz-B1w2GVM


