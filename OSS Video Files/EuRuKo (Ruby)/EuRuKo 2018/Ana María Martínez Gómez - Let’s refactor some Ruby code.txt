Title: Ana María Martínez Gómez - Let’s refactor some Ruby code
Publication date: 2018-08-22
Playlist: EuRuKo 2018
Description: 
	Up Next: Pan Thomakos - Debugging adventures in Rack-land https://www.youtube.com/watch?v=5o4krwjJbOI

See below for all videos!

######################
### \o/ EuRuKo 2018 \o/ ###
######################

###   Day 1  ###

Yukihiro Matsumoto - Keynote https://www.youtube.com/watch?v=cs0s5lZAUwc
Chris Salzberg - Metaprogramming for generalists https://www.youtube.com/watch?v=1fIlcnrJHxs
Joannah Nanjekye - Ruby in containers https://www.youtube.com/watch?v=qPNkOPvjecs
Damir Zekić - Tool belt of a seasoned bug hunter 
https://www.youtube.com/watch?v=ObB0dzX_rBs
Igor Morozov - Ducks and monads: wonders of Ruby types https://www.youtube.com/watch?v=v-H9nK8hqfE
Brad Urani - Rails anti-patterns: how not to design your database https://www.youtube.com/watch?v=zo3iRBPzscU
Coraline Ada Ehmke - The broken promise of Open Source https://www.youtube.com/watch?v=5ByUPh_uPqQ
Louisa Barrett - Ruby not red: color theory for the rest of us https://www.youtube.com/watch?v=OgO1EIFDgPU

###  Day 2  ###

Welcome https://www.youtube.com/watch?v=OlOA0aGxud0
Nadia Odunayo - The case of the missing method — a Ruby mystery story https://www.youtube.com/watch?v=OlOA0aGxud0
Pitch the next EuRuKo's location https://www.youtube.com/watch?v=YXe9OoQW8lc
Ana María Martínez Gómez - Let’s refactor some Ruby code https://www.youtube.com/watch?v=jUc8InwoA-E
Pan Thomakos - Debugging adventures in Rack-land https://www.youtube.com/watch?v=5o4krwjJbOI
Lightning talks https://www.youtube.com/watch?v=zSeaNPjwnnA
Kerstin Puschke - Scaling a monolith isn't scaling microservices https://www.youtube.com/watch?v=tA8gGd_Rl7E
Amr Abdelwahab - An empathy exercise: contextualising the question of privilege https://www.youtube.com/watch?v=6CqmGYvFwAQ
Wrap up & announcing the next EuRuKo's location https://www.youtube.com/watch?v=wMggsShGTzk
Captions: 
	00:00:21,579 --> 00:00:26,539
so welcome back

00:00:23,570 --> 00:00:31,579
lunch is officially over I hope you all

00:00:26,539 --> 00:00:33,230
casted your votes for Rotom or another

00:00:31,579 --> 00:00:36,110
city of course doesn't doesn't matter

00:00:33,230 --> 00:00:37,430
really doesn't really matter um I have a

00:00:36,110 --> 00:00:44,449
couple of announcements to make before

00:00:37,430 --> 00:00:47,570
we get started so please thank you

00:00:44,449 --> 00:00:50,479
there have been care packages taken from

00:00:47,570 --> 00:00:52,670
the men's room and maybe you thought

00:00:50,479 --> 00:00:54,619
they were better put to use in the

00:00:52,670 --> 00:00:57,170
ladies room they're put there with a

00:00:54,619 --> 00:00:59,799
reason so please let them there thank

00:00:57,170 --> 00:01:03,369
you and also some of the care packages

00:00:59,799 --> 00:01:07,610
baskets were taken away entirely so

00:01:03,369 --> 00:01:10,310
return them please a couple of things

00:01:07,610 --> 00:01:12,409
for tonight if you don't know where to

00:01:10,310 --> 00:01:15,860
have dinner yet the hotel gives you a

00:01:12,409 --> 00:01:18,890
20% discount on in their restaurant and

00:01:15,860 --> 00:01:21,440
you get discount at the registration of

00:01:18,890 --> 00:01:24,110
the hotel tonight

00:01:21,440 --> 00:01:25,520
Ramon there's two unofficial after

00:01:24,110 --> 00:01:27,740
parties but maybe you've made yourself

00:01:25,520 --> 00:01:29,930
some arrangements as well so feel free

00:01:27,740 --> 00:01:32,000
to tweet it and we might retreat that as

00:01:29,930 --> 00:01:34,549
well so that people can join you but

00:01:32,000 --> 00:01:37,370
Ramon so one of the organizers has

00:01:34,549 --> 00:01:39,560
reserved 20 places in a karaoke place if

00:01:37,370 --> 00:01:41,270
that's something you're up up for so

00:01:39,560 --> 00:01:43,460
then just come to the front later or

00:01:41,270 --> 00:01:47,590
find Ramon and sign up it's first come

00:01:43,460 --> 00:01:51,710
first serve and Danielle Danielle wave

00:01:47,590 --> 00:01:53,240
reserved 20 places at back to ha which

00:01:51,710 --> 00:01:55,130
is a nice hipstery place in the 5th

00:01:53,240 --> 00:01:56,540
districts can highly recommend that as

00:01:55,130 --> 00:01:58,580
well

00:01:56,540 --> 00:01:59,869
it's Aaron in the room so I can do the

00:01:58,580 --> 00:02:02,420
announcement one more time that he's

00:01:59,869 --> 00:02:04,369
doing a tour no okay then I do this

00:02:02,420 --> 00:02:06,260
later anything else yes

00:02:04,369 --> 00:02:08,929
glass bottles please don't put them in

00:02:06,260 --> 00:02:10,970
the bins there's crates next to the

00:02:08,929 --> 00:02:13,610
fridges so please put them in there so

00:02:10,970 --> 00:02:17,360
that can be recycled anything else yes

00:02:13,610 --> 00:02:19,099
we'll have to talks now and after the

00:02:17,360 --> 00:02:21,620
two talks there's a tiny little break

00:02:19,099 --> 00:02:24,140
and I would love for everyone that has

00:02:21,620 --> 00:02:26,029
ever coached at a rails girls or

00:02:24,140 --> 00:02:27,620
organized the rails girls he fans to

00:02:26,029 --> 00:02:30,209
come to the front and so we can make a

00:02:27,620 --> 00:02:32,700
nice rails girls II picture

00:02:30,209 --> 00:02:35,280
so that's four that's everything for all

00:02:32,700 --> 00:02:36,209
of the announcements now Anna will take

00:02:35,280 --> 00:02:39,680
the stage

00:02:36,209 --> 00:02:41,340
she started with rails in 2015 she

00:02:39,680 --> 00:02:43,950
contributed to an open government

00:02:41,340 --> 00:02:46,439
project fell in love with rails and

00:02:43,950 --> 00:02:50,030
never looked back and will take us on a

00:02:46,439 --> 00:02:50,030
refactoring journey

00:02:51,580 --> 00:02:54,869
[Music]

00:02:56,180 --> 00:03:03,239
hi everybody I'm Anna I'm going to speak

00:02:59,819 --> 00:03:12,060
about refactoring improving this year

00:03:03,239 --> 00:03:13,950
Ruby and I are turning 25 although I

00:03:12,060 --> 00:03:16,859
think I have changed more than Ruby a

00:03:13,950 --> 00:03:21,060
lot of great Ruby code has been written

00:03:16,859 --> 00:03:25,349
in these 25 years and Ruby code that was

00:03:21,060 --> 00:03:27,389
not that great but the purpose of my

00:03:25,349 --> 00:03:29,849
talk is not to criticize any horrible

00:03:27,389 --> 00:03:32,760
code is also not to show you the most

00:03:29,849 --> 00:03:35,040
impressive refactoring ever but more to

00:03:32,760 --> 00:03:36,359
speak about my experience and what I

00:03:35,040 --> 00:03:40,139
learned while refactoring so in Ruby

00:03:36,359 --> 00:03:41,730
code so before going to concrete

00:03:40,139 --> 00:03:42,959
examples allow me to introduce the

00:03:41,730 --> 00:03:46,049
preheating which I'm working where I

00:03:42,959 --> 00:03:48,299
took most of the examples of it is a

00:03:46,049 --> 00:03:50,790
really really really all race

00:03:48,299 --> 00:03:55,799
applications so all that it was started

00:03:50,790 --> 00:03:57,629
in 2005 before the first red release so

00:03:55,799 --> 00:03:59,879
just to give you an idea how old the

00:03:57,629 --> 00:04:03,000
period is this is how I used to look

00:03:59,879 --> 00:04:05,190
like at that point and from when I was

00:04:03,000 --> 00:04:07,319
12 my parents only took Pitzer from me

00:04:05,190 --> 00:04:09,959
if I was dressed up so I could just

00:04:07,319 --> 00:04:13,530
choose between the clock and the cooker

00:04:09,959 --> 00:04:14,669
I will better change this life before

00:04:13,530 --> 00:04:16,919
you start making pictures

00:04:14,669 --> 00:04:19,109
so the preheating which I'm working is

00:04:16,919 --> 00:04:23,159
called open bill service commonly

00:04:19,109 --> 00:04:25,500
abbreviated as obvious so from now on

00:04:23,159 --> 00:04:28,650
I'm going to speak a lot about oh yes so

00:04:25,500 --> 00:04:32,580
oh yes is assistant to will and

00:04:28,650 --> 00:04:34,800
distribute packages from sources so they

00:04:32,580 --> 00:04:37,110
it is a open source project so basically

00:04:34,800 --> 00:04:39,270
they open say packages are builder but

00:04:37,110 --> 00:04:41,039
it can also be used for distributions it

00:04:39,270 --> 00:04:44,550
is open source so you have in the middle

00:04:41,039 --> 00:04:47,039
of the slide the URL to github you also

00:04:44,550 --> 00:04:49,949
have the URL to the sternal instance

00:04:47,039 --> 00:04:51,120
bill dot opens orc so you can give you

00:04:49,949 --> 00:04:54,270
the try that you feel like it's

00:04:51,120 --> 00:04:55,740
completely free and open and now that

00:04:54,270 --> 00:04:58,500
everybody's up to date let's refactor

00:04:55,740 --> 00:05:01,409
some Ruby code so the first example is

00:04:58,500 --> 00:05:05,210
what I like to call the scary comment so

00:05:01,409 --> 00:05:05,210
this is real code for an obvious

00:05:05,349 --> 00:05:11,389
introduced it in 2011 the note class and

00:05:09,770 --> 00:05:14,619
as you are laughing you already discover

00:05:11,389 --> 00:05:16,729
the scurry comment I stay away from this

00:05:14,619 --> 00:05:20,449
that was me in the office when I read

00:05:16,729 --> 00:05:24,889
the comment really funny day but yeah

00:05:20,449 --> 00:05:26,479
now seriously what is stay away from

00:05:24,889 --> 00:05:28,639
this supposed to mean

00:05:26,479 --> 00:05:30,379
that was what my call it's beyond asked

00:05:28,639 --> 00:05:33,379
what I also asked myself maybe you as

00:05:30,379 --> 00:05:35,869
well so let's take a closer look we have

00:05:33,379 --> 00:05:37,669
here this no dog so I had no idea what

00:05:35,869 --> 00:05:40,729
that was but according to the

00:05:37,669 --> 00:05:42,169
documentation is used for public methods

00:05:40,729 --> 00:05:44,629
that are not supposed to be for public

00:05:42,169 --> 00:05:46,509
consumption so it's just not so it's not

00:05:44,629 --> 00:05:48,949
only a common it is having a side effect

00:05:46,509 --> 00:05:51,619
basically it is hiding the method from

00:05:48,949 --> 00:05:53,990
the documentation so taking into account

00:05:51,619 --> 00:05:56,300
a scary comment the no dog and that it

00:05:53,990 --> 00:06:00,319
was not use outside the file my Fergus

00:05:56,300 --> 00:06:03,259
was this may be private but actually not

00:06:00,319 --> 00:06:05,019
it was used in the equal method and here

00:06:03,259 --> 00:06:07,399
we have all the dot internal data

00:06:05,019 --> 00:06:11,180
private methods to Nala was defined the

00:06:07,399 --> 00:06:13,610
receiver so it was not private but that

00:06:11,180 --> 00:06:16,159
is exactly what protected was made for

00:06:13,610 --> 00:06:18,889
so protected allow us to define the

00:06:16,159 --> 00:06:20,719
receiver always that it is an instance

00:06:18,889 --> 00:06:24,319
of the defining class or a subclass of

00:06:20,719 --> 00:06:25,909
it so you read anything about protected

00:06:24,319 --> 00:06:28,309
this will be the example book you will

00:06:25,909 --> 00:06:29,119
find so refactoring was quite a

00:06:28,309 --> 00:06:31,519
straightaway

00:06:29,119 --> 00:06:33,919
yes removing the scary comment the no

00:06:31,519 --> 00:06:35,899
dog I make the comment birthday method

00:06:33,919 --> 00:06:37,039
protected and that is what you have in

00:06:35,899 --> 00:06:37,929
the pull requests in the botton of the

00:06:37,039 --> 00:06:41,629
slide

00:06:37,929 --> 00:06:42,829
so what did I learn from all this so I

00:06:41,629 --> 00:06:45,919
think the most important thing I learned

00:06:42,829 --> 00:06:48,529
is that comments are a bad idea

00:06:45,919 --> 00:06:51,319
and don't take me literally of course

00:06:48,529 --> 00:06:53,089
sometimes comments are needed but I

00:06:51,319 --> 00:06:54,919
think many times comment could be safe

00:06:53,089 --> 00:06:58,339
we will have written the code in a

00:06:54,919 --> 00:07:00,229
better way I also ran what no dog is I

00:06:58,339 --> 00:07:02,389
had no idea what it was before I have

00:07:00,229 --> 00:07:04,669
only seen it once after in the rails

00:07:02,389 --> 00:07:05,899
code for some methods that are actually

00:07:04,669 --> 00:07:07,819
public but they don't want the user to

00:07:05,899 --> 00:07:09,379
rely on them so that they can send the

00:07:07,819 --> 00:07:12,169
specification from one release to

00:07:09,379 --> 00:07:13,699
another and of course after the scary

00:07:12,169 --> 00:07:17,329
comment I will never forget was

00:07:13,699 --> 00:07:18,810
protected exactly for now let us speak

00:07:17,329 --> 00:07:21,900
about how we are using

00:07:18,810 --> 00:07:24,090
reusing code in obvious so let's say we

00:07:21,900 --> 00:07:27,180
have some code to be reused which uses

00:07:24,090 --> 00:07:29,580
two parameters and let's say we want to

00:07:27,180 --> 00:07:31,410
call it twice once for the parameters in

00:07:29,580 --> 00:07:33,690
the first line and a second time for the

00:07:31,410 --> 00:07:36,180
parameters in the second line I would

00:07:33,690 --> 00:07:37,200
say reasonable way to do this would be

00:07:36,180 --> 00:07:39,360
the final method

00:07:37,200 --> 00:07:42,180
I'm calling it twice I think that is

00:07:39,360 --> 00:07:46,050
reasonable for everybody but we also

00:07:42,180 --> 00:07:48,540
have they obviously much more fun so

00:07:46,050 --> 00:07:50,639
that was what we had before in obvious

00:07:48,540 --> 00:07:54,080
we will define a hash with the first

00:07:50,639 --> 00:07:58,050
parameter asking and the second as value

00:07:54,080 --> 00:08:01,590
we will iterate over the haas and put

00:07:58,050 --> 00:08:03,300
the code to be reused inside that is

00:08:01,590 --> 00:08:06,600
already of us getting the code a little

00:08:03,300 --> 00:08:10,220
bit but I got more we could also change

00:08:06,600 --> 00:08:14,310
the strings in the keys by symbols and

00:08:10,220 --> 00:08:15,570
Cumberland twisting afterwards but I

00:08:14,310 --> 00:08:19,560
have more

00:08:15,570 --> 00:08:23,400
we could also don't get the symbols and

00:08:19,560 --> 00:08:26,400
capital size then inside iteration and

00:08:23,400 --> 00:08:29,370
now we have the obvious way you made

00:08:26,400 --> 00:08:32,130
things I'm joking but I'm suddenly not

00:08:29,370 --> 00:08:34,349
this is real code for no yes it was also

00:08:32,130 --> 00:08:36,390
not a court introduce it to eat ten

00:08:34,349 --> 00:08:38,479
years ago it was introduced like last

00:08:36,390 --> 00:08:42,419
October by the thing where I'm working

00:08:38,479 --> 00:08:43,800
it is the keeping image model and in the

00:08:42,419 --> 00:08:45,960
pull request you have in the botton of

00:08:43,800 --> 00:08:47,490
the slide I just wanted to refactor the

00:08:45,960 --> 00:08:49,410
code as I explained it so removing this

00:08:47,490 --> 00:08:52,860
strength has iteration and defining a

00:08:49,410 --> 00:08:56,010
method but I was not the only one

00:08:52,860 --> 00:08:57,870
thinking about refractor in this code my

00:08:56,010 --> 00:09:00,210
college is college a one who look

00:08:57,870 --> 00:09:02,130
exactly as in the picture yeah I

00:09:00,210 --> 00:09:05,250
decorated him a little bit just to get

00:09:02,130 --> 00:09:07,020
an idea how impressive he is so he also

00:09:05,250 --> 00:09:09,900
wanted to refactor the code and kill it

00:09:07,020 --> 00:09:11,490
in a much better way I had in mind so

00:09:09,900 --> 00:09:14,670
you take a look what this code is doing

00:09:11,490 --> 00:09:17,580
it is useful validations and basically

00:09:14,670 --> 00:09:20,040
the Kiwi image has missed it obvious it

00:09:17,580 --> 00:09:22,589
has repositories and packages and we

00:09:20,040 --> 00:09:24,750
want that the key behemoth is invalid if

00:09:22,589 --> 00:09:27,930
any of the nested all rest objects is

00:09:24,750 --> 00:09:30,570
also invalid so what my college even did

00:09:27,930 --> 00:09:32,680
was to move all the code related to the

00:09:30,570 --> 00:09:35,260
validation to the nested validations

00:09:32,680 --> 00:09:37,600
where else make it generic and reducible

00:09:35,260 --> 00:09:40,630
and in the kibbutz he left last this

00:09:37,600 --> 00:09:42,820
code next arrows for packets group

00:09:40,630 --> 00:09:44,470
packages so basically any packets in any

00:09:42,820 --> 00:09:46,089
packet group that belongs to the

00:09:44,470 --> 00:09:48,220
community is invalid the equipment's

00:09:46,089 --> 00:09:51,040
will be invalid as well and this error

00:09:48,220 --> 00:09:52,959
for repositories so if any repository

00:09:51,040 --> 00:09:57,750
that belongs to the kibbutz is invalid

00:09:52,959 --> 00:10:00,010
the Kiwi mates will also be invalid and

00:09:57,750 --> 00:10:02,649
then I learned something really valuable

00:10:00,010 --> 00:10:04,930
from this sometimes it's not worthwhile

00:10:02,649 --> 00:10:06,490
to focus on really tiny details and

00:10:04,930 --> 00:10:08,110
something really small and it's much

00:10:06,490 --> 00:10:09,610
better to go for something much more

00:10:08,110 --> 00:10:11,050
ambitious that actually makes a

00:10:09,610 --> 00:10:13,839
difference in your code and how you are

00:10:11,050 --> 00:10:15,760
developing your app and the pull request

00:10:13,839 --> 00:10:16,930
in the bottom of the slide I really

00:10:15,760 --> 00:10:18,370
encourage you to take a look because

00:10:16,930 --> 00:10:21,250
it's a really good pool request to learn

00:10:18,370 --> 00:10:24,779
from and now let's speak about logical

00:10:21,250 --> 00:10:27,459
conditions so again some obvious code

00:10:24,779 --> 00:10:30,100
errors so we are adding some errors and

00:10:27,459 --> 00:10:32,910
we have here some logical conditions so

00:10:30,100 --> 00:10:36,310
in the first line we say at an error if

00:10:32,910 --> 00:10:38,860
both Rohit Neil and pockets nil are true

00:10:36,310 --> 00:10:43,470
and in the second one as an error

00:10:38,860 --> 00:10:46,810
instead if at least pray it Neil I'm

00:10:43,470 --> 00:10:48,250
packets nail art room so basically in

00:10:46,810 --> 00:10:51,070
the second line we say that we want at

00:10:48,250 --> 00:10:52,510
least one of them to be true I mean the

00:10:51,070 --> 00:10:55,029
first one that we don't want both of

00:10:52,510 --> 00:10:58,510
them to be true so then what we exactly

00:10:55,029 --> 00:11:01,330
want is that only one of them is true

00:10:58,510 --> 00:11:04,029
and that is exclusive or or it is

00:11:01,330 --> 00:11:06,070
sometime called in hardware logic a

00:11:04,029 --> 00:11:08,860
mathematic the XOR so basically it's

00:11:06,070 --> 00:11:11,170
return true if only both of them is true

00:11:08,860 --> 00:11:12,330
and false if both of them are false or

00:11:11,170 --> 00:11:14,589
both of the not true

00:11:12,330 --> 00:11:16,720
the refractoriness was quite a

00:11:14,589 --> 00:11:20,320
straightforward the exclusive or

00:11:16,720 --> 00:11:23,800
operator in Ruby is that one and now the

00:11:20,320 --> 00:11:26,650
code is not only more readable and short

00:11:23,800 --> 00:11:30,370
so it's not only short also it's more

00:11:26,650 --> 00:11:34,390
readable so now if we really did say at

00:11:30,370 --> 00:11:36,040
an error except if only private name and

00:11:34,390 --> 00:11:38,770
packets in it so if only one of

00:11:36,040 --> 00:11:42,279
pre-eternal and package nil is true in

00:11:38,770 --> 00:11:45,490
other words as an error except if only

00:11:42,279 --> 00:11:46,510
pro yet or packets only one of them is

00:11:45,490 --> 00:11:47,740
nil

00:11:46,510 --> 00:11:50,230
and that is exactly what we wanted to

00:11:47,740 --> 00:11:52,720
say so then the code is really easy to

00:11:50,230 --> 00:11:53,950
understand and that is what you have was

00:11:52,720 --> 00:11:57,400
in the pull request in the botton of the

00:11:53,950 --> 00:11:59,020
slide and I was not the only one that

00:11:57,400 --> 00:12:02,850
phoned is really smart also Michael it's

00:11:59,020 --> 00:12:02,850
Christian so it was something like this

00:12:02,880 --> 00:12:08,500
but I have to say my college Christian

00:12:05,770 --> 00:12:11,650
did not always agree with me and that

00:12:08,500 --> 00:12:14,580
takes me to my next example concat plus

00:12:11,650 --> 00:12:16,840
unique so again some cost for no BS and

00:12:14,580 --> 00:12:18,130
before going to the concat plus unique

00:12:16,840 --> 00:12:19,960
i'm going to simplify the code a little

00:12:18,130 --> 00:12:24,580
with so we have here this if list

00:12:19,960 --> 00:12:26,290
packets and it is needed because as you

00:12:24,580 --> 00:12:29,730
see on the top of the slide we have

00:12:26,290 --> 00:12:32,860
define it the list as it has with a

00:12:29,730 --> 00:12:34,540
curly bracket and then if you are faced

00:12:32,860 --> 00:12:36,490
an element that is not in the house it

00:12:34,540 --> 00:12:38,290
will be mean and concurrent with Neil

00:12:36,490 --> 00:12:40,750
will break so that's why we needed Dave

00:12:38,290 --> 00:12:42,730
but we could also define it like us so

00:12:40,750 --> 00:12:45,100
in this case you access an element that

00:12:42,730 --> 00:12:49,210
is not in the house define it it will

00:12:45,100 --> 00:12:51,900
return an empty all right so now we can

00:12:49,210 --> 00:12:54,250
focus on the concat plus unique so

00:12:51,900 --> 00:12:56,200
architecture that can cut these packets

00:12:54,250 --> 00:12:58,990
and afterwards architecture taught

00:12:56,200 --> 00:13:01,720
unique so basically in the first line we

00:12:58,990 --> 00:13:04,510
are adding the elements of the second or

00:13:01,720 --> 00:13:06,730
I to the first even if they were already

00:13:04,510 --> 00:13:09,280
there and in the second line we are

00:13:06,730 --> 00:13:11,320
removing repetitions so actually what we

00:13:09,280 --> 00:13:13,930
wanted to do is add the elements of the

00:13:11,320 --> 00:13:16,840
second all right to the first except if

00:13:13,930 --> 00:13:20,640
they were already there and that is a

00:13:16,840 --> 00:13:23,500
union in groovy the pipe operator and

00:13:20,640 --> 00:13:24,760
now this only add the elements of the

00:13:23,500 --> 00:13:28,330
second all right to the first they are

00:13:24,760 --> 00:13:30,100
not ready there and that is what I

00:13:28,330 --> 00:13:31,690
wanted to refactor in the pull request

00:13:30,100 --> 00:13:33,550
you have in the botton of the slide and

00:13:31,690 --> 00:13:35,710
I thought it was the best refactor I

00:13:33,550 --> 00:13:38,700
have ever done so it was even better

00:13:35,710 --> 00:13:40,960
than before so it turns in again until

00:13:38,700 --> 00:13:44,530
my college Christian review if we

00:13:40,960 --> 00:13:46,000
request so in a poor request I was

00:13:44,530 --> 00:13:47,770
actually implementing something else and

00:13:46,000 --> 00:13:51,670
I did refactoring because it helped me

00:13:47,770 --> 00:13:53,560
for the implementation and my college

00:13:51,670 --> 00:13:56,770
Christian said why not live in the

00:13:53,560 --> 00:14:00,420
Concord I find this pipe operator harder

00:13:56,770 --> 00:14:08,380
to understand than a Concord

00:14:00,420 --> 00:14:13,540
party was over why is it difficult to

00:14:08,380 --> 00:14:16,150
understand and this comment took us to a

00:14:13,540 --> 00:14:18,460
really long and not very nice

00:14:16,150 --> 00:14:21,370
discussions in both the pull request and

00:14:18,460 --> 00:14:28,029
in person and I have to admit at some

00:14:21,370 --> 00:14:31,150
point I got angry yeah but after that I

00:14:28,029 --> 00:14:34,150
started thinking if my college Christian

00:14:31,150 --> 00:14:36,400
who has been great written ruby code

00:14:34,150 --> 00:14:39,779
much longer than me says this is not

00:14:36,400 --> 00:14:42,790
clear maybe it is because it's not clear

00:14:39,779 --> 00:14:43,240
so I let the horrible concat plus unique

00:14:42,790 --> 00:14:46,240
there

00:14:43,240 --> 00:14:52,860
I didn't refactor the code but I kept

00:14:46,240 --> 00:14:55,210
thinking in Ruby we have a plus operator

00:14:52,860 --> 00:14:56,470
it's basically the same as the concat

00:14:55,210 --> 00:14:58,440
method with the only different that

00:14:56,470 --> 00:15:01,120
conquered is assigning the result to a a

00:14:58,440 --> 00:15:04,540
but in my case I didn't care if it was a

00:15:01,120 --> 00:15:06,250
sign or not so we have a concussed

00:15:04,540 --> 00:15:09,070
method that is more readable than plus

00:15:06,250 --> 00:15:11,920
it is also more efficient in the case of

00:15:09,070 --> 00:15:14,290
three or more elements because plus is a

00:15:11,920 --> 00:15:17,110
binary operator so basically you write a

00:15:14,290 --> 00:15:19,960
plus B plus C it will do a plus B and

00:15:17,110 --> 00:15:21,730
after that result plus sing while

00:15:19,960 --> 00:15:25,660
Concord can concatenate everything at

00:15:21,730 --> 00:15:30,700
once so then what will be the problem of

00:15:25,660 --> 00:15:31,990
having a pipe operator so if we have

00:15:30,700 --> 00:15:34,150
already a pipe operator what would be

00:15:31,990 --> 00:15:37,050
the preneur having a union method in

00:15:34,150 --> 00:15:40,330
Ruby that will be more readable than a

00:15:37,050 --> 00:15:42,130
pipe operator and in the case of two

00:15:40,330 --> 00:15:43,990
three or more elements it will also be

00:15:42,130 --> 00:15:46,030
more efficient and not only that it will

00:15:43,990 --> 00:15:50,100
be consistent with the radius system

00:15:46,030 --> 00:15:53,170
method concat in the Ruby I write class

00:15:50,100 --> 00:15:54,670
so then I went to the root core and

00:15:53,170 --> 00:15:56,410
after a while to find out whether they

00:15:54,670 --> 00:15:58,660
track the issues I open a feature

00:15:56,410 --> 00:16:03,459
request at Union and different methods

00:15:58,660 --> 00:16:05,470
to arrive and before continuing some of

00:16:03,459 --> 00:16:09,070
you are falling asleep I guess the party

00:16:05,470 --> 00:16:11,560
was great yesterday so I will ask you to

00:16:09,070 --> 00:16:13,060
please stand up everybody the necess

00:16:11,560 --> 00:16:13,840
beaker will get angry if i delay too

00:16:13,060 --> 00:16:17,080
much so

00:16:13,840 --> 00:16:20,860
please stand up everybody they want

00:16:17,080 --> 00:16:22,720
sleeping on the back also thanks

00:16:20,860 --> 00:16:23,980
so it's good for your body I'm going to

00:16:22,720 --> 00:16:27,010
be really fast so please keep in a

00:16:23,980 --> 00:16:29,860
standing up so we have three options to

00:16:27,010 --> 00:16:31,390
make the union of our I won all right -

00:16:29,860 --> 00:16:33,670
and I write three and assign the result

00:16:31,390 --> 00:16:35,890
to our right one although Union it was

00:16:33,670 --> 00:16:39,040
not clear if we will need a bank or not

00:16:35,890 --> 00:16:41,050
but discussing for another moment so we

00:16:39,040 --> 00:16:43,480
have three options to do this the first

00:16:41,050 --> 00:16:45,460
one is using concat plus unique remember

00:16:43,480 --> 00:16:47,740
Concord will do the concatenation of the

00:16:45,460 --> 00:16:50,350
three arise at the same time and then we

00:16:47,740 --> 00:16:52,000
need to do the unique afterwards the

00:16:50,350 --> 00:16:54,340
second option is a binary operator the

00:16:52,000 --> 00:16:56,110
pipe so it will do the Union but first

00:16:54,340 --> 00:16:58,990
for array one and I write - and after

00:16:56,110 --> 00:17:02,380
that for our I 3 and the last method the

00:16:58,990 --> 00:17:04,180
Union method a will manage to do the

00:17:02,380 --> 00:17:05,860
union of everything at the same times

00:17:04,180 --> 00:17:08,790
with the most efficient of the three and

00:17:05,860 --> 00:17:11,050
I'm going to ask you to vote taking both

00:17:08,790 --> 00:17:13,480
efficiency and reliability into account

00:17:11,050 --> 00:17:15,070
so if you think that the Concord Plus

00:17:13,480 --> 00:17:20,200
unique is the best of you know cs3

00:17:15,070 --> 00:17:23,080
please sit down now okay I saw only one

00:17:20,200 --> 00:17:24,970
person sitting down you think that

00:17:23,080 --> 00:17:29,350
option two is the best of of the another

00:17:24,970 --> 00:17:33,250
three please sit down now some of you

00:17:29,350 --> 00:17:35,500
are with me okay so that's me not all

00:17:33,250 --> 00:17:37,600
the people that is standing up I agree

00:17:35,500 --> 00:17:39,100
that a union will be the best option so

00:17:37,600 --> 00:17:42,480
keep a stunning I'm going to take a

00:17:39,100 --> 00:17:42,480
picture maybe

00:17:43,530 --> 00:17:51,359
[Applause]

00:17:53,720 --> 00:17:58,370
yeah so I will add it to the issue later

00:18:00,950 --> 00:18:13,470
so thanks you can now sit down again

00:18:03,630 --> 00:18:15,960
keifa sleeping so now that I have some

00:18:13,470 --> 00:18:17,310
support let's come back to my story so I

00:18:15,960 --> 00:18:21,180
opened the feature request

00:18:17,310 --> 00:18:24,270
but I thought the record they are really

00:18:21,180 --> 00:18:27,420
busy people so I also sent an apple

00:18:24,270 --> 00:18:28,470
request and of course it was horrible at

00:18:27,420 --> 00:18:31,050
the beginning they criticized everything

00:18:28,470 --> 00:18:33,000
but I made the changes they said and at

00:18:31,050 --> 00:18:35,610
some point I thought this is now great

00:18:33,000 --> 00:18:38,490
it's really too much but they didn't

00:18:35,610 --> 00:18:40,890
answer but again the Ruby core they are

00:18:38,490 --> 00:18:45,120
busy so I thought ok I just have to wait

00:18:40,890 --> 00:18:50,490
I waited and waited and I missed it

00:18:45,120 --> 00:18:51,810
waiting yeah so then why am i speaking

00:18:50,490 --> 00:18:54,300
about this because my talk was about

00:18:51,810 --> 00:18:57,180
refactoring code in Ruby but I didn't

00:18:54,300 --> 00:19:01,040
refactor any code I also didn't

00:18:57,180 --> 00:19:04,530
introduce any method in Ruby that's true

00:19:01,040 --> 00:19:09,330
but in a way I discovered what Jack

00:19:04,530 --> 00:19:11,940
saving is so Jack saving is any

00:19:09,330 --> 00:19:13,920
apparently useless activity which by

00:19:11,940 --> 00:19:15,900
allowing you to overcome intermediate

00:19:13,920 --> 00:19:19,950
difficulties allow you to solve a larger

00:19:15,900 --> 00:19:22,920
problem so I wanted to refactor obvious

00:19:19,950 --> 00:19:25,920
horrible code but my college Christian

00:19:22,920 --> 00:19:28,980
didn't like the idea I wanted to add

00:19:25,920 --> 00:19:30,540
some new methods to ruin but that is

00:19:28,980 --> 00:19:33,270
probably not going to happen in the

00:19:30,540 --> 00:19:34,500
closed feature but in the meanwhile when

00:19:33,270 --> 00:19:36,210
I was implementing this method I

00:19:34,500 --> 00:19:38,130
realized that efficient of the Minos

00:19:36,210 --> 00:19:39,540
operator in Ruby could be improved and

00:19:38,130 --> 00:19:42,870
I'm speaking about this pull request

00:19:39,540 --> 00:19:45,230
improve our I - operator efficiency and

00:19:42,870 --> 00:19:47,880
this push request is already merged

00:19:45,230 --> 00:19:49,740
including the last row we released 2.5

00:19:47,880 --> 00:19:51,750
maintained in the release notes and so

00:19:49,740 --> 00:19:53,550
on so I didn't refactor any code I

00:19:51,750 --> 00:19:55,500
didn't include any method in Ruby but

00:19:53,550 --> 00:19:58,340
now all of us has a more efficient -

00:19:55,500 --> 00:19:58,340
operator in Ruby

00:20:00,360 --> 00:20:03,580
[Music]

00:20:04,570 --> 00:20:12,380
so it was not that bad and who knows if

00:20:08,870 --> 00:20:14,540
I keep waiting maybe they multiple

00:20:12,380 --> 00:20:19,900
requests but what did I learn with all

00:20:14,540 --> 00:20:19,900
this well Ruby is using subversion

00:20:22,690 --> 00:20:28,130
subversion is really all but wait

00:20:26,720 --> 00:20:33,250
because I must call a screwy

00:20:28,130 --> 00:20:36,710
maybe I'm also getting old no seriously

00:20:33,250 --> 00:20:38,720
what did I learn with all these so we

00:20:36,710 --> 00:20:40,280
were with people and I'm saying this

00:20:38,720 --> 00:20:42,290
because the last poor request you said

00:20:40,280 --> 00:20:45,650
the one that was mad was actually not

00:20:42,290 --> 00:20:47,450
immediately merged so after three months

00:20:45,650 --> 00:20:49,190
I think after creating the poor request

00:20:47,450 --> 00:20:50,929
I wrote one of the record man tennis and

00:20:49,190 --> 00:20:54,530
I said what is the problem with my

00:20:50,929 --> 00:20:56,360
request why was this not murder I didn't

00:20:54,530 --> 00:20:58,970
realize this was there and even attend a

00:20:56,360 --> 00:21:00,620
discussion I'll merge it so probably if

00:20:58,970 --> 00:21:02,360
I would have written him three months

00:21:00,620 --> 00:21:04,970
before it would have been merged three

00:21:02,360 --> 00:21:06,470
months before so we were with people

00:21:04,970 --> 00:21:08,090
nobody knows everything

00:21:06,470 --> 00:21:09,700
nobody is aware of everything going on

00:21:08,090 --> 00:21:14,450
and we have to take this into account

00:21:09,700 --> 00:21:16,190
also everything works differently so the

00:21:14,450 --> 00:21:19,010
Ruby core were really really different

00:21:16,190 --> 00:21:20,929
as openSUSE we work in openSUSE and in

00:21:19,010 --> 00:21:24,740
every in some others open-source spirit

00:21:20,929 --> 00:21:26,900
I contribute to but if I'm the one that

00:21:24,740 --> 00:21:28,610
approach then I want to add some new

00:21:26,900 --> 00:21:30,919
methods I cannot fit in that they change

00:21:28,610 --> 00:21:32,960
how they work just because I want to

00:21:30,919 --> 00:21:35,179
answer methods so it's me the one who

00:21:32,960 --> 00:21:38,299
has to change the work and working the

00:21:35,179 --> 00:21:40,070
way I'm working and that's the way they

00:21:38,299 --> 00:21:42,770
are doing it and I think it's a good

00:21:40,070 --> 00:21:45,140
lesson to learn and I also learned that

00:21:42,770 --> 00:21:47,000
I need to be more patty and that is one

00:21:45,140 --> 00:21:49,580
of the common in one of the river Ruby

00:21:47,000 --> 00:21:50,419
issues I will say yes more patent for

00:21:49,580 --> 00:21:53,450
you Anna

00:21:50,419 --> 00:21:54,799
he was right if you ask any of the

00:21:53,450 --> 00:21:56,150
people who know me well they will say I

00:21:54,799 --> 00:21:57,919
didn't learn anything and I'm asking

00:21:56,150 --> 00:22:03,049
patty not before but I think I learned

00:21:57,919 --> 00:22:04,760
something so let's say and and who knows

00:22:03,049 --> 00:22:06,500
if I keep waiting maybe the image

00:22:04,760 --> 00:22:08,360
my poor request and we have some new

00:22:06,500 --> 00:22:09,980
Union method I think all of you will be

00:22:08,360 --> 00:22:14,030
now really happy because you support my

00:22:09,980 --> 00:22:15,980
idea most of you but you are not the

00:22:14,030 --> 00:22:17,779
only ones I asked about my Union method

00:22:15,980 --> 00:22:21,259
in this conference

00:22:17,779 --> 00:22:23,479
firstly we have the speaker dinner and I

00:22:21,259 --> 00:22:26,899
was with math who is by the way really

00:22:23,479 --> 00:22:28,159
nice as everybody says and I thought he

00:22:26,899 --> 00:22:29,479
was just having dinner so he has some

00:22:28,159 --> 00:22:41,359
free time to discuss about my poor

00:22:29,479 --> 00:22:43,489
request yeah so he was really my issue

00:22:41,359 --> 00:22:46,099
my pull request I was explaining what

00:22:43,489 --> 00:22:52,159
the idea was and he said that now it

00:22:46,099 --> 00:22:55,309
looks like a reasonable proposal so it

00:22:52,159 --> 00:23:01,039
is not a yes not yet but I think it's

00:22:55,309 --> 00:23:03,049
again a reason to dance so and of course

00:23:01,039 --> 00:23:04,639
all of you are welcome even if I will

00:23:03,049 --> 00:23:06,080
put the picture to enter in the issue

00:23:04,639 --> 00:23:08,089
and support my idea

00:23:06,080 --> 00:23:16,849
I see now in time so you can take a

00:23:08,089 --> 00:23:18,589
picture okay then now that time is

00:23:16,849 --> 00:23:21,200
speaking about upstream contributions I

00:23:18,589 --> 00:23:23,839
will end with race helpers so last few

00:23:21,200 --> 00:23:26,299
weeks ago I found this code in reviewing

00:23:23,839 --> 00:23:29,299
one poor request in obvious say select

00:23:26,299 --> 00:23:32,539
tax so it's a critical planet say we

00:23:29,299 --> 00:23:35,479
have options from sale for select so we

00:23:32,539 --> 00:23:37,399
have here maintainer twice once capital

00:23:35,479 --> 00:23:39,379
decides and Guangdong case and also book

00:23:37,399 --> 00:23:41,509
owner once capitalize on Guangdong case

00:23:39,379 --> 00:23:43,639
we are doing this because we want in the

00:23:41,509 --> 00:23:46,219
select interview to have the option for

00:23:43,639 --> 00:23:49,719
the user capital size but inside we want

00:23:46,219 --> 00:23:53,450
the value to be down case but that means

00:23:49,719 --> 00:23:55,940
that instead of two elements I will have

00:23:53,450 --> 00:23:58,789
let's say 15 then I will have to write

00:23:55,940 --> 00:24:00,830
this and if at some point I change one

00:23:58,789 --> 00:24:02,419
of the values I will have to change it

00:24:00,830 --> 00:24:05,779
or many of them I will have to change

00:24:02,419 --> 00:24:07,339
twice for all of them so even if I only

00:24:05,779 --> 00:24:09,820
had two elements I didn't like it and I

00:24:07,339 --> 00:24:12,979
was wondering can I improve this code

00:24:09,820 --> 00:24:15,529
and that is what I found instead of

00:24:12,979 --> 00:24:18,320
using options for select I will use a

00:24:15,529 --> 00:24:20,749
different trades helper options for own

00:24:18,320 --> 00:24:24,049
collection for select if it is not that

00:24:20,749 --> 00:24:26,330
common price helper so it actually

00:24:24,049 --> 00:24:27,979
affect a collection so they are I am

00:24:26,330 --> 00:24:30,820
giving now maintainer and book owner

00:24:27,979 --> 00:24:30,820
only once

00:24:30,909 --> 00:24:37,539
a method for the value and a method for

00:24:34,090 --> 00:24:38,679
the test so basically for the test what

00:24:37,539 --> 00:24:41,470
we are rendering we want to capitalize

00:24:38,679 --> 00:24:43,029
itis and further with the other one for

00:24:41,470 --> 00:24:44,649
the internal thing we just want to leave

00:24:43,029 --> 00:24:48,479
it at its walls so I don't know you note

00:24:44,649 --> 00:24:51,580
itself is basically returning itself so

00:24:48,479 --> 00:24:54,210
what did I learn so first I find it to

00:24:51,580 --> 00:24:54,210
create the refactoring

00:24:54,399 --> 00:24:58,179
I also learned what Oxygen's from

00:24:56,859 --> 00:24:59,919
collecting for select was because I

00:24:58,179 --> 00:25:01,769
think it's not really a common read

00:24:59,919 --> 00:25:05,349
helper and I have never seen it before

00:25:01,769 --> 00:25:08,309
nothing cool I was truly amazed by

00:25:05,349 --> 00:25:10,570
itself I have never used this method and

00:25:08,309 --> 00:25:13,029
I'm even thinking about writing a blog

00:25:10,570 --> 00:25:16,539
post this employers Ruby method you

00:25:13,029 --> 00:25:20,979
never heard about and exactly really

00:25:16,539 --> 00:25:23,440
cool because it has some practical uses

00:25:20,979 --> 00:25:27,220
so for example it can be using a group

00:25:23,440 --> 00:25:29,080
right to group by the element itself and

00:25:27,220 --> 00:25:31,239
it can also be used for change

00:25:29,080 --> 00:25:33,940
methods so it is also is to define it in

00:25:31,239 --> 00:25:36,340
GUI but also in rails so I found it

00:25:33,940 --> 00:25:42,509
amazing just in itself method that

00:25:36,340 --> 00:25:45,220
returns itself and but that's not all

00:25:42,509 --> 00:25:47,379
well I was thinking what to put there

00:25:45,220 --> 00:25:48,789
because I didn't know that itself method

00:25:47,379 --> 00:25:50,559
and then I mean of course I could have

00:25:48,789 --> 00:25:52,389
put to a string but I didn't want to

00:25:50,559 --> 00:25:53,830
convert it to a string so contact really

00:25:52,389 --> 00:25:56,320
what I wanted to do is leave it at this

00:25:53,830 --> 00:25:58,749
was so when I was thinking what I can

00:25:56,320 --> 00:26:01,210
put here how I can make this cool and

00:25:58,749 --> 00:26:03,009
then I took a look to the right code and

00:26:01,210 --> 00:26:05,799
then I realize of something you could

00:26:03,009 --> 00:26:09,460
put a private method here so let me

00:26:05,799 --> 00:26:11,649
elaborate let's say we have a happy

00:26:09,460 --> 00:26:16,570
class and we have a private method that

00:26:11,649 --> 00:26:17,889
has some super private information and

00:26:16,570 --> 00:26:20,470
now they say we use option from

00:26:17,889 --> 00:26:22,299
collection for select but actually it

00:26:20,470 --> 00:26:25,059
will happen if you use all the rights

00:26:22,299 --> 00:26:29,139
helper and then we put here the private

00:26:25,059 --> 00:26:31,779
method raise one complain and we'll show

00:26:29,139 --> 00:26:34,570
this so it will expose interview your

00:26:31,779 --> 00:26:37,179
super private information so raise

00:26:34,570 --> 00:26:39,220
helpers are as posting private methods

00:26:37,179 --> 00:26:42,549
in the view and that is what I reported

00:26:39,220 --> 00:26:44,120
in the Asian you have up of course I

00:26:42,549 --> 00:26:45,590
also send any requests

00:26:44,120 --> 00:26:47,600
is what actually release it to solve

00:26:45,590 --> 00:26:49,280
because they were just using sense you

00:26:47,600 --> 00:26:50,630
just seen it by public sense it is not

00:26:49,280 --> 00:26:53,150
allowed anymore

00:26:50,630 --> 00:26:54,950
they decided that it was better to the

00:26:53,150 --> 00:26:58,010
pre-k the methods instead of removing so

00:26:54,950 --> 00:26:59,840
I don't know that was Martin you stay

00:26:58,010 --> 00:27:01,640
off Wednesday I guess they didn't

00:26:59,840 --> 00:27:03,050
release a new version of rails yet but

00:27:01,640 --> 00:27:06,980
whenever the new version will be there

00:27:03,050 --> 00:27:11,210
you keep using private methods in pews

00:27:06,980 --> 00:27:13,880
praise will give you a warning and so

00:27:11,210 --> 00:27:14,390
this time there is no angry cat or

00:27:13,880 --> 00:27:17,540
something

00:27:14,390 --> 00:27:19,390
that was much work pretty well and I

00:27:17,540 --> 00:27:22,700
would like to finish my presentation

00:27:19,390 --> 00:27:26,180
encourage you to get involved upstream

00:27:22,700 --> 00:27:27,740
and I'm speaking about Ruby although it

00:27:26,180 --> 00:27:29,950
was really really difficult to try to

00:27:27,740 --> 00:27:32,420
get involved in the Ruby development I

00:27:29,950 --> 00:27:34,310
think it's really important that Ruby

00:27:32,420 --> 00:27:37,070
developers get involved in the Ruby

00:27:34,310 --> 00:27:40,190
development because the Ruby core team

00:27:37,070 --> 00:27:42,140
is really really amazingly technically

00:27:40,190 --> 00:27:44,450
good so they are really really good they

00:27:42,140 --> 00:27:46,820
are also working really fast but I think

00:27:44,450 --> 00:27:50,030
there are some concerns that only Ruby

00:27:46,820 --> 00:27:52,640
developers can trace I also would like

00:27:50,030 --> 00:27:54,440
to encourage to get involved in the ruby

00:27:52,640 --> 00:27:56,420
gems and all the Ruby prayer that we

00:27:54,440 --> 00:27:59,510
have out there because it is something

00:27:56,420 --> 00:28:04,520
great about Ruby is the community of

00:27:59,510 --> 00:28:07,010
Ruby users and everybody is always

00:28:04,520 --> 00:28:08,750
really nice and welcoming and really

00:28:07,010 --> 00:28:11,600
happy that you get involved in their

00:28:08,750 --> 00:28:17,330
projects so I'm speaking about gems like

00:28:11,600 --> 00:28:19,610
Grails Rubik Oh bunny but also about

00:28:17,330 --> 00:28:21,080
traits like jackals so whenever I got

00:28:19,610 --> 00:28:22,660
involved in anything everybody was

00:28:21,080 --> 00:28:26,470
really happy I was doing something there

00:28:22,660 --> 00:28:28,970
so get involved I'm pretty sure

00:28:26,470 --> 00:28:30,290
everybody will be happy with it you will

00:28:28,970 --> 00:28:33,900
have a lot of fun and you will learn a

00:28:30,290 --> 00:28:35,050
lot so thank you

00:28:33,900 --> 00:28:38,350
[Applause]

00:28:35,050 --> 00:28:41,510
[Music]

00:28:38,350 --> 00:28:41,510
[Applause]

00:28:41,770 --> 00:28:53,080
I just got whispered in my ear

00:28:49,090 --> 00:28:55,150
say something alright I can do that so

00:28:53,080 --> 00:28:58,420
we have one more talk then we have a

00:28:55,150 --> 00:29:01,660
little break and Nhu Beck 1/4 plus 3/4

00:28:58,420 --> 00:29:05,050
lightning Sox anyone who's doing a

00:29:01,660 --> 00:29:07,059
lightning talk please please be here a

00:29:05,050 --> 00:29:09,220
tiny bit earlier so that we know that

00:29:07,059 --> 00:29:11,290
you're here somewhere in the front we

00:29:09,220 --> 00:29:12,880
can do the whole switcheroo pretty

00:29:11,290 --> 00:29:15,910
quickly that would be really really

00:29:12,880 --> 00:29:19,020
great reminder everyone who has coached

00:29:15,910 --> 00:29:19,020

YouTube URL: https://www.youtube.com/watch?v=jUc8InwoA-E


