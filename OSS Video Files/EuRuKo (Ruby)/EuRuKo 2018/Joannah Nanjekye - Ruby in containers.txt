Title: Joannah Nanjekye - Ruby in containers
Publication date: 2018-08-22
Playlist: EuRuKo 2018
Description: 
	Up Next: Damir Zekić - Tool belt of a seasoned bug hunter 
https://www.youtube.com/watch?v=ObB0dzX_rBs

######################
### \o/ EuRuKo 2018 \o/ ###
######################

###   Day 1  ###

Yukihiro Matsumoto - Keynote https://www.youtube.com/watch?v=cs0s5lZAUwc
Chris Salzberg - Metaprogramming for generalists https://www.youtube.com/watch?v=1fIlcnrJHxs
Joannah Nanjekye - Ruby in containers https://www.youtube.com/watch?v=qPNkOPvjecs
Damir Zekić - Tool belt of a seasoned bug hunter 
https://www.youtube.com/watch?v=ObB0dzX_rBs
Igor Morozov - Ducks and monads: wonders of Ruby types https://www.youtube.com/watch?v=v-H9nK8hqfE
Brad Urani - Rails anti-patterns: how not to design your database https://www.youtube.com/watch?v=zo3iRBPzscU
Coraline Ada Ehmke - The broken promise of Open Source https://www.youtube.com/watch?v=5ByUPh_uPqQ
Louisa Barrett - Ruby not red: color theory for the rest of us https://www.youtube.com/watch?v=OgO1EIFDgPU

###  Day 2  ###

Nadia Odunayo - The case of the missing method — a Ruby mystery story https://www.youtube.com/watch?v=OlOA0aGxud0
Pitch the next EuRuKo's location https://www.youtube.com/watch?v=YXe9OoQW8lc
Ana María Martínez Gómez - Let’s refactor some Ruby code https://www.youtube.com/watch?v=jUc8InwoA-E
Pan Thomakos - Debugging adventures in Rack-land https://www.youtube.com/watch?v=5o4krwjJbOI
Lightning talks https://www.youtube.com/watch?v=zSeaNPjwnnA
Kerstin Puschke - Scaling a monolith isn't scaling microservices https://www.youtube.com/watch?v=tA8gGd_Rl7E
Amr Abdelwahab - An empathy exercise: contextualising the question of privilege https://www.youtube.com/watch?v=6CqmGYvFwAQ
Wrap up & announcing the next EuRuKo's location https://www.youtube.com/watch?v=wMggsShGTzk
Captions: 
	00:00:00,000 --> 00:00:06,509
[Applause]

00:00:04,910 --> 00:00:10,260
thank you

00:00:06,509 --> 00:00:12,509
Chris a couple of things were probably

00:00:10,260 --> 00:00:14,519
sticking to the ends time of the lunch

00:00:12,509 --> 00:00:16,890
but probably not to the beginning time

00:00:14,519 --> 00:00:20,570
of lunch so I will be cut but it will

00:00:16,890 --> 00:00:24,630
look like it's not cut I guess

00:00:20,570 --> 00:00:26,430
all right I want to repeat that the DMS

00:00:24,630 --> 00:00:28,080
of my DMS are open so if you have

00:00:26,430 --> 00:00:32,399
anything to say to the crowd you can say

00:00:28,080 --> 00:00:34,079
through by proxy me I have there were

00:00:32,399 --> 00:00:36,210
some people that reached out to me that

00:00:34,079 --> 00:00:38,489
they didn't like my singing earlier I

00:00:36,210 --> 00:00:44,010
take feedback really seriously so I will

00:00:38,489 --> 00:00:45,260
not be singing anymore oh this is really

00:00:44,010 --> 00:00:49,320
nice

00:00:45,260 --> 00:00:52,559
okay announcing our new speaker she is a

00:00:49,320 --> 00:00:56,329
real girls organizer and a ruby friend

00:00:52,559 --> 00:01:00,149
and open source enthusiast from Uganda

00:00:56,329 --> 00:01:03,539
she is the author of Python two and

00:01:00,149 --> 00:01:05,460
three compatibility book and she came

00:01:03,539 --> 00:01:07,740
out of the rails girls Summer of Code

00:01:05,460 --> 00:01:10,380
program in 2016 and now works at

00:01:07,740 --> 00:01:12,840
outreach she and will tell us about the

00:01:10,380 --> 00:01:16,020
magic of containers and how we can all

00:01:12,840 --> 00:01:20,870
deploy our Ruby apps a lot better or

00:01:16,020 --> 00:01:22,650
Buster better so Joanna please

00:01:20,870 --> 00:01:23,680
[Applause]

00:01:22,650 --> 00:01:30,200
[Music]

00:01:23,680 --> 00:01:35,160
[Applause]

00:01:30,200 --> 00:01:36,870
thank you very much like she said my

00:01:35,160 --> 00:01:40,500
name is Johanna I want introduce play

00:01:36,870 --> 00:01:43,740
softball I but I would just say that I'm

00:01:40,500 --> 00:01:45,450
a friend of the Ruby community because I

00:01:43,740 --> 00:01:47,610
learned to program from a real house

00:01:45,450 --> 00:01:57,990
meet up and that's that was my first

00:01:47,610 --> 00:02:00,330
language so I love being here today we

00:01:57,990 --> 00:02:03,150
just need to talk about containers in

00:02:00,330 --> 00:02:04,560
the context of Ruby containers are hot

00:02:03,150 --> 00:02:07,140
but you're not talking about them

00:02:04,560 --> 00:02:09,720
because they are hot we are talking

00:02:07,140 --> 00:02:12,810
about them because of their benefits

00:02:09,720 --> 00:02:16,260
they have for our applications so we'll

00:02:12,810 --> 00:02:18,390
talk about the why the what and the best

00:02:16,260 --> 00:02:21,239
practices so that you use containers the

00:02:18,390 --> 00:02:24,630
good way without bad manners being nice

00:02:21,239 --> 00:02:26,580
instead so we start by water containers

00:02:24,630 --> 00:02:28,770
how do we continue right every

00:02:26,580 --> 00:02:31,380
application I'm sorry for the people

00:02:28,770 --> 00:02:32,880
that are already experts we'll go

00:02:31,380 --> 00:02:35,130
through a little background for the

00:02:32,880 --> 00:02:38,160
people that do not yet know and then

00:02:35,130 --> 00:02:40,200
I'll bet I'll put a lot of emphasis so

00:02:38,160 --> 00:02:42,720
now we create small images because in a

00:02:40,200 --> 00:02:44,310
good practices of working with

00:02:42,720 --> 00:02:47,459
containers it's good that we have small

00:02:44,310 --> 00:02:51,780
images and then I'll have a hint about

00:02:47,459 --> 00:02:56,400
how do we ensure we have testable

00:02:51,780 --> 00:03:00,450
containers so just to take you a little

00:02:56,400 --> 00:03:01,799
a little back when you think about when

00:03:00,450 --> 00:03:04,200
we think about deploying Ruby

00:03:01,799 --> 00:03:07,350
applications we usually have three

00:03:04,200 --> 00:03:09,930
things in our mind it's either if

00:03:07,350 --> 00:03:12,570
thinking about a physical machine that's

00:03:09,930 --> 00:03:17,340
that's at its core a sava or something

00:03:12,570 --> 00:03:20,400
or you think about a virtual machine ow

00:03:17,340 --> 00:03:24,239
in this era you think about containers

00:03:20,400 --> 00:03:25,709
so let's review first in that era there

00:03:24,239 --> 00:03:31,769
was a time when deploying applications

00:03:25,709 --> 00:03:37,260
was literally an event it was a ceremony

00:03:31,769 --> 00:03:39,780
in shorts so we we basically deployed

00:03:37,260 --> 00:03:44,100
applications on a machine

00:03:39,780 --> 00:03:46,069
and we issue at that a single host that

00:03:44,100 --> 00:03:49,350
we had we are sure at one application

00:03:46,069 --> 00:03:52,170
physical host so that nothing went wrong

00:03:49,350 --> 00:03:55,140
because it was an event and we wanted to

00:03:52,170 --> 00:03:57,360
ensure I think stayed as they are in

00:03:55,140 --> 00:03:59,910
other words if we had a good deployment

00:03:57,360 --> 00:04:05,370
we wanted to ensure that nothing breaks

00:03:59,910 --> 00:04:08,970
after that but if you noticed so

00:04:05,370 --> 00:04:12,480
regardless of how how big your machine I

00:04:08,970 --> 00:04:15,900
was or how great the features the host

00:04:12,480 --> 00:04:18,359
had it ruin one application which was

00:04:15,900 --> 00:04:21,090
not good for the expensive computing

00:04:18,359 --> 00:04:25,530
resources we have we had all we have on

00:04:21,090 --> 00:04:29,370
that one machine so we needed a way to

00:04:25,530 --> 00:04:33,720
have multiple applications run on the

00:04:29,370 --> 00:04:36,419
same physical expensive resources on the

00:04:33,720 --> 00:04:40,530
machine so that we were able to utilize

00:04:36,419 --> 00:04:43,830
all of them so later we adopted

00:04:40,530 --> 00:04:46,350
something called a virtual machine so

00:04:43,830 --> 00:04:50,630
with virtual machines were able to well

00:04:46,350 --> 00:04:53,510
use the same hardware the same host and

00:04:50,630 --> 00:04:56,490
run multiple applications on it

00:04:53,510 --> 00:04:59,160
separated with guest a guest OS so we

00:04:56,490 --> 00:05:04,320
would have other guest operating systems

00:04:59,160 --> 00:05:08,940
running on the same host and we would be

00:05:04,320 --> 00:05:10,740
able to run multiple applications so in

00:05:08,940 --> 00:05:12,960
this case we were actually able to

00:05:10,740 --> 00:05:15,419
virtualize the hardware and utilize all

00:05:12,960 --> 00:05:18,479
the resources we had which was good

00:05:15,419 --> 00:05:23,970
until they noticed that virtual machines

00:05:18,479 --> 00:05:27,680
took years to boot up so we needed

00:05:23,970 --> 00:05:31,680
another way we needed a way around

00:05:27,680 --> 00:05:37,590
around that how would we insure our

00:05:31,680 --> 00:05:39,510
application booted really fast so the

00:05:37,590 --> 00:05:42,450
solution was containers so what are

00:05:39,510 --> 00:05:45,090
containers and it's call containers in

00:05:42,450 --> 00:05:47,370
no more languages they are just storages

00:05:45,090 --> 00:05:50,099
for something barroso in software

00:05:47,370 --> 00:05:52,390
development containers hold the same

00:05:50,099 --> 00:05:56,140
meaning

00:05:52,390 --> 00:05:59,680
basically packaging or assign books for

00:05:56,140 --> 00:06:02,560
up application processes so we logically

00:05:59,680 --> 00:06:04,120
packaged applications to obstruct them

00:06:02,560 --> 00:06:07,600
from the environment in which they

00:06:04,120 --> 00:06:09,850
running so the architecture in the

00:06:07,600 --> 00:06:13,330
container world is we basically

00:06:09,850 --> 00:06:15,760
virtualize the operating system so we

00:06:13,330 --> 00:06:17,050
have the same desk OS and then we run

00:06:15,760 --> 00:06:19,120
something like called

00:06:17,050 --> 00:06:21,760
a container engine and then all our

00:06:19,120 --> 00:06:22,360
applications run on top of the container

00:06:21,760 --> 00:06:25,930
engine

00:06:22,360 --> 00:06:28,860
there are many container engines you you

00:06:25,930 --> 00:06:33,760
can use I'll just be talking about

00:06:28,860 --> 00:06:37,660
docker because I mean that the variety

00:06:33,760 --> 00:06:40,450
you can do is choose whatever you want

00:06:37,660 --> 00:06:42,130
but somebody told me it's not a good

00:06:40,450 --> 00:06:45,550
idea to finish a technical talk without

00:06:42,130 --> 00:06:46,660
mentioning goecart so we'll talk about

00:06:45,550 --> 00:06:48,760
dock at bay

00:06:46,660 --> 00:06:50,800
I do not want to give the impression

00:06:48,760 --> 00:06:55,000
that containers are going solve every

00:06:50,800 --> 00:06:57,610
problem we have and there's still a

00:06:55,000 --> 00:07:00,580
place where virtual machines will always

00:06:57,610 --> 00:07:04,120
play their role and like I pointed out a

00:07:00,580 --> 00:07:06,520
few differences with virtual machines we

00:07:04,120 --> 00:07:09,400
are basically virtualizing the hardware

00:07:06,520 --> 00:07:11,710
we're running a guest OS on top of our

00:07:09,400 --> 00:07:14,430
host OS and then we're running

00:07:11,710 --> 00:07:16,900
applications there and with a container

00:07:14,430 --> 00:07:19,150
we just run something for the container

00:07:16,900 --> 00:07:21,670
engine on top of our host operating

00:07:19,150 --> 00:07:24,700
system and we do not need any guest

00:07:21,670 --> 00:07:27,550
operating system on top so why don't we

00:07:24,700 --> 00:07:30,190
get with containers we get we able to

00:07:27,550 --> 00:07:33,760
boot or stat applications faster than

00:07:30,190 --> 00:07:35,980
its counterparts than in virtual

00:07:33,760 --> 00:07:41,110
machines I would say virtual machines

00:07:35,980 --> 00:07:44,440
still have a role to play in system out

00:07:41,110 --> 00:07:46,710
say 50 separation containers still have

00:07:44,440 --> 00:07:49,570
a role to play with application

00:07:46,710 --> 00:07:51,910
separation so I wouldn't say that every

00:07:49,570 --> 00:07:54,550
every everything used virtual machines

00:07:51,910 --> 00:07:56,620
for maybe we can use for containers it

00:07:54,550 --> 00:08:01,150
should be used with care right with

00:07:56,620 --> 00:08:04,420
performance if you take if we take a

00:08:01,150 --> 00:08:06,190
minute to start a container we may take

00:08:04,420 --> 00:08:08,500
to set a virtual machine that's

00:08:06,190 --> 00:08:12,190
exaggerated but yeah we get a bit of

00:08:08,500 --> 00:08:16,060
performance so why should you even care

00:08:12,190 --> 00:08:20,370
about containers well I just give a bit

00:08:16,060 --> 00:08:22,930
of performance but they I think three

00:08:20,370 --> 00:08:26,380
big benefits that come with containers

00:08:22,930 --> 00:08:28,900
first is possibility diplomate was a

00:08:26,380 --> 00:08:31,660
ceremony before because we needed to

00:08:28,900 --> 00:08:34,570
ensure our reliability in production

00:08:31,660 --> 00:08:38,170
because software moves environments it

00:08:34,570 --> 00:08:41,080
moves from our laptops and goes to

00:08:38,170 --> 00:08:44,470
production so that's movement but how do

00:08:41,080 --> 00:08:47,590
we ensure that there is consistency even

00:08:44,470 --> 00:08:52,320
when we move environment we also needed

00:08:47,590 --> 00:08:57,670
to scale now containers in themselves

00:08:52,320 --> 00:09:00,340
may not be able to scale but this is my

00:08:57,670 --> 00:09:04,300
belief they give us all the ingredients

00:09:00,340 --> 00:09:09,550
to scale if you have your micro services

00:09:04,300 --> 00:09:12,130
and they're in containers somewhere we

00:09:09,550 --> 00:09:13,030
are able to if we think about scaling we

00:09:12,130 --> 00:09:15,640
are in a good way

00:09:13,030 --> 00:09:18,040
now if you talk about containers I'll

00:09:15,640 --> 00:09:20,830
talk about that noble benefits of why we

00:09:18,040 --> 00:09:23,080
need to use containers and Kelsey

00:09:20,830 --> 00:09:25,900
Hightower has many dubious been other

00:09:23,080 --> 00:09:28,210
dubious reasons that she can't give you

00:09:25,900 --> 00:09:29,860
he's talked about containers but I think

00:09:28,210 --> 00:09:32,470
I agree with his statement and he's

00:09:29,860 --> 00:09:35,890
always right by the way ok most most

00:09:32,470 --> 00:09:37,920
times right that container the container

00:09:35,890 --> 00:09:41,260
we made is just a packaging concept

00:09:37,920 --> 00:09:44,440
think of them as a price of admission to

00:09:41,260 --> 00:09:47,140
modern platforms such as kubernetes I

00:09:44,440 --> 00:09:50,500
think I share the same view containers

00:09:47,140 --> 00:09:53,290
give us ingredients to scale when we

00:09:50,500 --> 00:09:58,120
container as applications we are able to

00:09:53,290 --> 00:10:00,990
use or make use of other good platforms

00:09:58,120 --> 00:10:04,140
like kubernetes to be able to manage or

00:10:00,990 --> 00:10:06,550
scale better or manage better

00:10:04,140 --> 00:10:10,090
applications so the whole concept of

00:10:06,550 --> 00:10:12,010
containers was it come up with such good

00:10:10,090 --> 00:10:13,300
ingredients that would be able to later

00:10:12,010 --> 00:10:16,930
cluster very well

00:10:13,300 --> 00:10:22,410
later scale and a lake

00:10:16,930 --> 00:10:25,360
okay so what is containerization in Ruby

00:10:22,410 --> 00:10:28,180
the three steps you'll follow with dhoka

00:10:25,360 --> 00:10:31,420
to containerize your application

00:10:28,180 --> 00:10:33,339
so the first thing you'll do if you have

00:10:31,420 --> 00:10:36,269
a ruby application it could be Sinatra

00:10:33,339 --> 00:10:39,339
or anything is your greater dockerfile

00:10:36,269 --> 00:10:43,540
so a docker file clip contains our

00:10:39,339 --> 00:10:46,540
instructions for for create for the our

00:10:43,540 --> 00:10:49,480
instruction for the to use for creating

00:10:46,540 --> 00:10:52,949
our container will be a container Ruby

00:10:49,480 --> 00:10:57,910
application will specify how to execute

00:10:52,949 --> 00:11:00,249
how to execute our application and alike

00:10:57,910 --> 00:11:03,490
and then from that docker file we'll

00:11:00,249 --> 00:11:07,660
create an image so think about an image

00:11:03,490 --> 00:11:11,589
as a template from which will create

00:11:07,660 --> 00:11:16,029
many other instances of containers of

00:11:11,589 --> 00:11:19,449
our application so a container is a

00:11:16,029 --> 00:11:22,720
given instance of an image of our

00:11:19,449 --> 00:11:25,120
application which image we'll build from

00:11:22,720 --> 00:11:28,559
that docker file from that instruction

00:11:25,120 --> 00:11:31,629
to specify in the docker file so yeah

00:11:28,559 --> 00:11:34,149
that's a clip very simple three steps

00:11:31,629 --> 00:11:36,339
you can always find details about how

00:11:34,149 --> 00:11:39,309
you can create a docker file there very

00:11:36,339 --> 00:11:42,129
many examples all over the Internet to

00:11:39,309 --> 00:11:44,160
do the same so given such an example

00:11:42,129 --> 00:11:47,139
this is a HelloWorld Sinatra application

00:11:44,160 --> 00:11:50,439
just printing hello world and its

00:11:47,139 --> 00:11:52,749
respective gem file the first thing you

00:11:50,439 --> 00:11:56,980
need to do is create a docker file you

00:11:52,749 --> 00:11:59,199
specify a few commands the first thing

00:11:56,980 --> 00:12:01,929
we need to do is specify our base image

00:11:59,199 --> 00:12:05,769
in this case we are using Ruby 2 point 3

00:12:01,929 --> 00:12:08,679
slim as our best image you could use you

00:12:05,769 --> 00:12:11,079
could you could use your animal or

00:12:08,679 --> 00:12:13,389
operating system like Ubuntu as your

00:12:11,079 --> 00:12:16,119
best image however later you may need to

00:12:13,389 --> 00:12:19,629
install room it's off and other things

00:12:16,119 --> 00:12:22,119
we can use the other there are many

00:12:19,629 --> 00:12:24,069
other commands we can use in a docker

00:12:22,119 --> 00:12:26,680
file I think that's not a scope for

00:12:24,069 --> 00:12:29,619
today there's great information on

00:12:26,680 --> 00:12:31,509
that dhoka dhoka website on how to go

00:12:29,619 --> 00:12:34,509
about this but we are basically

00:12:31,509 --> 00:12:39,610
specifying instructions on how to handle

00:12:34,509 --> 00:12:41,319
our application and execute it so after

00:12:39,610 --> 00:12:44,170
creating the docker file you have to

00:12:41,319 --> 00:12:48,910
build an image from the docker file and

00:12:44,170 --> 00:12:51,249
then run your container and we basically

00:12:48,910 --> 00:12:53,670
use two steps you just need to install

00:12:51,249 --> 00:12:55,329
the Dokic layer to be able to run both

00:12:53,670 --> 00:12:58,449
those commands

00:12:55,329 --> 00:13:01,439
so in summary containers I'll packaging

00:12:58,449 --> 00:13:05,290
for application they give us portability

00:13:01,439 --> 00:13:08,110
increase productivity and give us a way

00:13:05,290 --> 00:13:11,439
to scale very fast the ingredients to

00:13:08,110 --> 00:13:13,240
scale and to create a container given a

00:13:11,439 --> 00:13:15,490
ruby application you need to just create

00:13:13,240 --> 00:13:19,209
a docker file specify our instructions

00:13:15,490 --> 00:13:21,279
build that image using a command that we

00:13:19,209 --> 00:13:23,499
will the image basing on the docker file

00:13:21,279 --> 00:13:27,970
we created earlier and you start your

00:13:23,499 --> 00:13:30,129
container now that's a very like that's

00:13:27,970 --> 00:13:32,199
a summary of how you container is a ruby

00:13:30,129 --> 00:13:34,600
application and I think we had actually

00:13:32,199 --> 00:13:36,850
you could actually be doing it right now

00:13:34,600 --> 00:13:38,800
like in five minutes if you hide you can

00:13:36,850 --> 00:13:40,529
actually go through these steps however

00:13:38,800 --> 00:13:43,569
that's not all

00:13:40,529 --> 00:13:46,329
that's something but that's not all I

00:13:43,569 --> 00:13:48,730
mean you can containerize up like an

00:13:46,329 --> 00:13:50,379
application inertia type I think there

00:13:48,730 --> 00:13:55,660
are many other things we need to think

00:13:50,379 --> 00:13:58,629
about and the most like the most

00:13:55,660 --> 00:14:00,399
important two things I just singled out

00:13:58,629 --> 00:14:02,679
that we need to think about when dealing

00:14:00,399 --> 00:14:07,749
with containers is performance and

00:14:02,679 --> 00:14:10,899
security performance because not because

00:14:07,749 --> 00:14:12,850
you have somebody on your team that

00:14:10,899 --> 00:14:15,220
checks performance but things need to be

00:14:12,850 --> 00:14:17,769
to move faster we also need to think

00:14:15,220 --> 00:14:20,350
about security because there's a

00:14:17,769 --> 00:14:23,139
security engineer anyway he has a bug

00:14:20,350 --> 00:14:25,240
whether you fix it it's a problem he has

00:14:23,139 --> 00:14:27,339
a very even if you don't fix it it's

00:14:25,240 --> 00:14:29,110
usually a problem so we also need to

00:14:27,339 --> 00:14:32,589
ensure that our application the secure

00:14:29,110 --> 00:14:35,980
and so how do we ensure performance and

00:14:32,589 --> 00:14:39,089
security for containerized application

00:14:35,980 --> 00:14:41,189
so the secret is Debbie

00:14:39,089 --> 00:14:44,009
secret there may be other secrets but a

00:14:41,189 --> 00:14:47,509
biggest secret is to ensure that to

00:14:44,009 --> 00:14:51,449
reduce the size of the resulting image I

00:14:47,509 --> 00:14:53,519
already pointed out that we basically do

00:14:51,449 --> 00:14:55,379
installations and any other thing that I

00:14:53,519 --> 00:14:56,009
needed to run a ruby application in the

00:14:55,379 --> 00:14:58,410
dockerfile

00:14:56,009 --> 00:15:01,350
so depending on the steps you do there

00:14:58,410 --> 00:15:03,839
they contribute to the resulting size of

00:15:01,350 --> 00:15:07,170
the image you create and how does the

00:15:03,839 --> 00:15:10,170
size of the image so one with

00:15:07,170 --> 00:15:13,769
performance the first thing you need to

00:15:10,170 --> 00:15:14,519
do is build the image and if your image

00:15:13,769 --> 00:15:17,910
is big

00:15:14,519 --> 00:15:20,999
we'll take Londe we also push our images

00:15:17,910 --> 00:15:24,180
to like an image registry you could use

00:15:20,999 --> 00:15:27,990
docker hub or the google image registry

00:15:24,180 --> 00:15:31,350
so we push in images and pulling images

00:15:27,990 --> 00:15:33,300
and if your image is big performance

00:15:31,350 --> 00:15:36,600
wise it would be tapped a longer

00:15:33,300 --> 00:15:39,689
depending on the size in the operations

00:15:36,600 --> 00:15:42,689
of pulling and pushing images then for

00:15:39,689 --> 00:15:46,470
security big images become become an

00:15:42,689 --> 00:15:49,670
issue because there is a bigger surface

00:15:46,470 --> 00:15:53,120
area for attack so the bigger the image

00:15:49,670 --> 00:15:56,220
the bigger the possibility of how of

00:15:53,120 --> 00:15:58,279
being able to be attacked I think you

00:15:56,220 --> 00:16:02,550
can you can just do a small exercise

00:15:58,279 --> 00:16:05,069
that tools I think Google and get doc I

00:16:02,550 --> 00:16:08,189
think docker hub has a feature where you

00:16:05,069 --> 00:16:13,110
can compare just give give it two images

00:16:08,189 --> 00:16:15,689
and stand for security vulnerability so

00:16:13,110 --> 00:16:20,670
a bigger image will usually have more

00:16:15,689 --> 00:16:23,009
cases for for attack so since the

00:16:20,670 --> 00:16:25,860
solution is quite a small image let's

00:16:23,009 --> 00:16:27,899
explore some of the ways to create a

00:16:25,860 --> 00:16:30,449
small image when working with containers

00:16:27,899 --> 00:16:34,199
that's first thing there are very many

00:16:30,449 --> 00:16:36,089
tricks I will just give a few like a few

00:16:34,199 --> 00:16:38,279
a few tricks and then you can always

00:16:36,089 --> 00:16:40,589
explore others so the first thing you

00:16:38,279 --> 00:16:43,110
need to do is issue I use a small

00:16:40,589 --> 00:16:46,410
best image Oh we'll talk about later

00:16:43,110 --> 00:16:48,899
later that later but also install what

00:16:46,410 --> 00:16:51,029
you need only what you need so that you

00:16:48,899 --> 00:16:51,400
don't have a lot of junk that you know

00:16:51,029 --> 00:16:54,160
too

00:16:51,400 --> 00:16:57,280
than they're using up space so here

00:16:54,160 --> 00:17:00,130
you're saving space but also you're

00:16:57,280 --> 00:17:03,370
ensuring that your container will run

00:17:00,130 --> 00:17:06,180
faster so I just want to take you a

00:17:03,370 --> 00:17:11,020
little bit back this is at the sample

00:17:06,180 --> 00:17:13,420
docker file and I have am using that

00:17:11,020 --> 00:17:16,030
boon to the latest version of Ubuntu as

00:17:13,420 --> 00:17:18,880
my best image and then I have other

00:17:16,030 --> 00:17:21,130
instructions to install Ruby create some

00:17:18,880 --> 00:17:24,400
working directories and execute some

00:17:21,130 --> 00:17:28,000
commands this docker file works as five

00:17:24,400 --> 00:17:30,580
however when we compare the sizes of

00:17:28,000 --> 00:17:33,400
that best available options you have

00:17:30,580 --> 00:17:36,750
four best images you have like four if

00:17:33,400 --> 00:17:39,340
you're working with Ruby you could use

00:17:36,750 --> 00:17:43,540
you could work with that bone tool or

00:17:39,340 --> 00:17:48,130
any other Linux OS you have however the

00:17:43,540 --> 00:17:50,740
size is like 187 megabytes and if you

00:17:48,130 --> 00:17:54,010
chose the Ruby Alpine it would be like

00:17:50,740 --> 00:17:56,350
55 megabyte which is an improvement and

00:17:54,010 --> 00:18:01,060
if you use standard Ruby as your best

00:17:56,350 --> 00:18:03,910
image it's like 863 megabytes and then

00:18:01,060 --> 00:18:09,060
if you use Linux Alpine it's like five

00:18:03,910 --> 00:18:13,180
point two four nine megabytes so from

00:18:09,060 --> 00:18:15,760
dokkum from this analysis you see the

00:18:13,180 --> 00:18:18,940
smaller the best image you have the

00:18:15,760 --> 00:18:24,340
smaller your resulting container so I

00:18:18,940 --> 00:18:29,170
would say to improve this docker file we

00:18:24,340 --> 00:18:32,460
can the bad way is to use the Ubuntu the

00:18:29,170 --> 00:18:37,030
better way is maybe use the Ruby Alpine

00:18:32,460 --> 00:18:38,920
used because it's smaller but even

00:18:37,030 --> 00:18:44,170
better you can improve the docker file

00:18:38,920 --> 00:18:47,470
by using Linux Alpine as your best image

00:18:44,170 --> 00:18:50,440
because just imagine how many megabytes

00:18:47,470 --> 00:18:53,620
you will have saved yourself from okay

00:18:50,440 --> 00:18:56,920
the biggest is rubies is around 863 then

00:18:53,620 --> 00:19:01,470
you come down to 5 which is significant

00:18:56,920 --> 00:19:03,780
improvement now let Excel fine

00:19:01,470 --> 00:19:06,720
is just gives you enough to run your

00:19:03,780 --> 00:19:09,210
application but it's not good in all

00:19:06,720 --> 00:19:11,600
cases there are times when it will

00:19:09,210 --> 00:19:14,190
require more development work because

00:19:11,600 --> 00:19:17,610
you don't have maybe all the libraries

00:19:14,190 --> 00:19:21,690
you need and also Linux Alpine has

00:19:17,610 --> 00:19:24,270
problems standards and security we may

00:19:21,690 --> 00:19:27,929
never try so in some of these cases you

00:19:24,270 --> 00:19:30,840
may choose to go with the the standard

00:19:27,929 --> 00:19:34,500
Ubuntu version but if you do not care

00:19:30,840 --> 00:19:36,780
for that tool you may still I think it's

00:19:34,500 --> 00:19:42,750
better to based on the smallest image

00:19:36,780 --> 00:19:47,850
the smallest best image okay then there

00:19:42,750 --> 00:19:50,159
you can there's a command called run in

00:19:47,850 --> 00:19:53,250
that docker file and we use it to do

00:19:50,159 --> 00:19:56,309
very different tasks like updating stuff

00:19:53,250 --> 00:19:59,299
or installing software and you can use

00:19:56,309 --> 00:20:02,460
you can choose to have as many run

00:19:59,299 --> 00:20:05,580
statements in your docker file as you

00:20:02,460 --> 00:20:10,710
can however this also include increases

00:20:05,580 --> 00:20:14,039
the layers you have an intern in int I

00:20:10,710 --> 00:20:17,010
in turn increases the size of the image

00:20:14,039 --> 00:20:20,400
you usually have so the best thing to do

00:20:17,010 --> 00:20:23,460
is the bad way is house different run

00:20:20,400 --> 00:20:24,179
commands the better way is chain your

00:20:23,460 --> 00:20:28,890
and commands

00:20:24,179 --> 00:20:32,010
it also has significant significant

00:20:28,890 --> 00:20:37,140
gains to us to reducing the size of the

00:20:32,010 --> 00:20:41,880
image so then also install just what you

00:20:37,140 --> 00:20:43,950
need in Ubuntu when you when you install

00:20:41,880 --> 00:20:48,059
things you can you have you're given an

00:20:43,950 --> 00:20:50,580
option for - no install recommends so

00:20:48,059 --> 00:20:54,270
that you just install exactly the things

00:20:50,580 --> 00:20:56,460
you need for your container rather than

00:20:54,270 --> 00:20:59,010
getting all the junk or rather all the

00:20:56,460 --> 00:21:01,289
libraries that you actually some that

00:20:59,010 --> 00:21:02,909
you actually don't need so you can also

00:21:01,289 --> 00:21:07,440
make use of that so that you just

00:21:02,909 --> 00:21:12,059
install what you need and leave out what

00:21:07,440 --> 00:21:14,320
you do not need so another trick also is

00:21:12,059 --> 00:21:17,860
to clean up after yourself

00:21:14,320 --> 00:21:22,000
so after installing whatever libraries

00:21:17,860 --> 00:21:25,120
you need you can always clean up clean

00:21:22,000 --> 00:21:27,400
up some of the directories so that you

00:21:25,120 --> 00:21:31,060
clean up your container and this also

00:21:27,400 --> 00:21:34,000
has significant significant gains in

00:21:31,060 --> 00:21:38,860
regards to the resulting size of the

00:21:34,000 --> 00:21:41,500
image you have so these are just a few

00:21:38,860 --> 00:21:44,230
tricks that I've just shared and if you

00:21:41,500 --> 00:21:47,440
want to to know more about how to create

00:21:44,230 --> 00:21:49,780
more effective containers I before I

00:21:47,440 --> 00:21:52,570
stopped at Dhaka on 2017

00:21:49,780 --> 00:21:55,660
she actually create gives you gap goes

00:21:52,570 --> 00:21:58,470
very in-depth about the different even

00:21:55,660 --> 00:22:01,390
more tricks upon how to create a small

00:21:58,470 --> 00:22:05,460
container so you can look out for her

00:22:01,390 --> 00:22:07,990
talk then the last thing to do is

00:22:05,460 --> 00:22:11,110
containers need to be tested just like

00:22:07,990 --> 00:22:14,530
they do TDD or test-driven development

00:22:11,110 --> 00:22:16,900
for our code we also need to test drive

00:22:14,530 --> 00:22:20,500
the interaction the interaction of our

00:22:16,900 --> 00:22:23,050
containers so first there are three

00:22:20,500 --> 00:22:25,180
domains basic domains in how we can

00:22:23,050 --> 00:22:27,880
approach testing for containers we can't

00:22:25,180 --> 00:22:31,120
test that we can run some commands

00:22:27,880 --> 00:22:33,490
inside the container to see how to see

00:22:31,120 --> 00:22:36,460
if they actually outputs the required

00:22:33,490 --> 00:22:39,330
output to expect from them or we can

00:22:36,460 --> 00:22:43,150
also check for existed existence of

00:22:39,330 --> 00:22:45,550
specific files if they're in the given

00:22:43,150 --> 00:22:48,190
locations we can also actually check for

00:22:45,550 --> 00:22:50,890
contents of a file and in the file

00:22:48,190 --> 00:22:54,760
systems in the container itself and we

00:22:50,890 --> 00:22:56,530
can also do metadata testing and the

00:22:54,760 --> 00:22:59,680
good thing is that there are truths all

00:22:56,530 --> 00:23:01,690
over that can we can use to do that I've

00:22:59,680 --> 00:23:04,020
used the container testing chroma from

00:23:01,690 --> 00:23:09,520
Google I know there are other options

00:23:04,020 --> 00:23:13,240
again it's a matter of choice and just

00:23:09,520 --> 00:23:14,920
to wrap containers give us benefits in

00:23:13,240 --> 00:23:17,980
portability because we need to move

00:23:14,920 --> 00:23:21,610
environments they give us ingredients to

00:23:17,980 --> 00:23:24,820
scale in themselves there may be we may

00:23:21,610 --> 00:23:25,809
not be able to scale so perfectly but

00:23:24,820 --> 00:23:29,139
they

00:23:25,809 --> 00:23:31,749
us into using better platforms like

00:23:29,139 --> 00:23:34,090
kubernetes to help us do scaling and

00:23:31,749 --> 00:23:36,820
other things and then creating a small

00:23:34,090 --> 00:23:40,479
image gives us benefits in performance

00:23:36,820 --> 00:23:43,629
and security then just like unit test

00:23:40,479 --> 00:23:45,669
your code containers also need to be

00:23:43,629 --> 00:23:48,540
tested thank you

00:23:45,669 --> 00:24:03,960
these are the resources you can do

00:23:48,540 --> 00:24:03,960
[Applause]

00:24:09,210 --> 00:24:12,649
it works now great

00:24:13,470 --> 00:24:16,940
well yeah yes

00:24:18,900 --> 00:24:24,930
so we have one hour 15 minutes for lunch

00:24:23,790 --> 00:24:25,860
it doesn't matter they're getting up

00:24:24,930 --> 00:24:29,100
anyway it's fine

00:24:25,860 --> 00:24:31,500
it's just for you guys um that means we

00:24:29,100 --> 00:24:32,250
want you back at half past one here

00:24:31,500 --> 00:24:35,280
please

00:24:32,250 --> 00:24:37,320
yes okay some people you can still get

00:24:35,280 --> 00:24:39,210
lunch at the hotel you just have to go

00:24:37,320 --> 00:24:41,510
to the registration of the hotel to get

00:24:39,210 --> 00:24:41,510

YouTube URL: https://www.youtube.com/watch?v=qPNkOPvjecs


