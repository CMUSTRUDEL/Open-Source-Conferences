Title: Damir Zekić - Tool belt of a seasoned bug hunter
Publication date: 2018-08-22
Playlist: EuRuKo 2018
Description: 
	Up Next: Igor Morozov - Ducks and monads: wonders of Ruby types https://www.youtube.com/watch?v=v-H9nK8hqfE

######################
### \o/ EuRuKo 2018 \o/ ###
######################

###   Day 1  ###

Yukihiro Matsumoto - Keynote https://www.youtube.com/watch?v=cs0s5lZAUwc
Chris Salzberg - Metaprogramming for generalists https://www.youtube.com/watch?v=1fIlcnrJHxs
Joannah Nanjekye - Ruby in containers https://www.youtube.com/watch?v=qPNkOPvjecs
Damir Zekić - Tool belt of a seasoned bug hunter 
https://www.youtube.com/watch?v=ObB0dzX_rBs
Igor Morozov - Ducks and monads: wonders of Ruby types https://www.youtube.com/watch?v=v-H9nK8hqfE
Brad Urani - Rails anti-patterns: how not to design your database https://www.youtube.com/watch?v=zo3iRBPzscU
Coraline Ada Ehmke - The broken promise of Open Source https://www.youtube.com/watch?v=5ByUPh_uPqQ
Louisa Barrett - Ruby not red: color theory for the rest of us https://www.youtube.com/watch?v=OgO1EIFDgPU

###  Day 2  ###

Nadia Odunayo - The case of the missing method — a Ruby mystery story https://www.youtube.com/watch?v=OlOA0aGxud0
Pitch the next EuRuKo's location https://www.youtube.com/watch?v=YXe9OoQW8lc
Ana María Martínez Gómez - Let’s refactor some Ruby code https://www.youtube.com/watch?v=jUc8InwoA-E
Pan Thomakos - Debugging adventures in Rack-land https://www.youtube.com/watch?v=5o4krwjJbOI
Lightning talks https://www.youtube.com/watch?v=zSeaNPjwnnA
Kerstin Puschke - Scaling a monolith isn't scaling microservices https://www.youtube.com/watch?v=tA8gGd_Rl7E
Amr Abdelwahab - An empathy exercise: contextualising the question of privilege https://www.youtube.com/watch?v=6CqmGYvFwAQ
Wrap up & announcing the next EuRuKo's location https://www.youtube.com/watch?v=wMggsShGTzk
Captions: 
	00:02:24,590 --> 00:02:27,590
so

00:02:29,159 --> 00:02:33,819
while people are still working in we

00:02:31,569 --> 00:02:36,159
might as well do something a little bit

00:02:33,819 --> 00:02:38,470
chaotic we're going to do a Friday hug

00:02:36,159 --> 00:02:45,129
who is not familiar with what a Friday

00:02:38,470 --> 00:02:48,129
hug is okay you'll you're lying I see it

00:02:45,129 --> 00:02:50,560
and a Friday hug is where you stand with

00:02:48,129 --> 00:02:52,510
your arms like wide like you're about to

00:02:50,560 --> 00:02:54,909
approach someone and give them a big hug

00:02:52,510 --> 00:02:57,640
you are all facing me while you do that

00:02:54,909 --> 00:02:59,709
and we'll have a photographer here and a

00:02:57,640 --> 00:03:01,239
photographer here we'll take a picture

00:02:59,709 --> 00:03:03,700
of it where's my photographer here

00:03:01,239 --> 00:03:09,430
there's my photographer here okay so

00:03:03,700 --> 00:03:14,290
we're all getting up doing yeah with

00:03:09,430 --> 00:03:25,299
getting up I mean stand up yeah I know

00:03:14,290 --> 00:03:28,530
it was just lunch but hey yeah one two

00:03:25,299 --> 00:03:28,530
three hugging

00:03:39,570 --> 00:03:47,160
[Applause]

00:03:43,500 --> 00:03:47,160
thank you so much

00:03:53,210 --> 00:03:57,990
as you are coming in still I want to

00:03:55,830 --> 00:04:01,200
remind you that if you want to do a

00:03:57,990 --> 00:04:05,490
lightning talk tomorrow you have to sign

00:04:01,200 --> 00:04:07,440
up before midnight today you do that by

00:04:05,490 --> 00:04:09,030
sending an email to the gmail address

00:04:07,440 --> 00:04:12,120
that was up earlier if you don't

00:04:09,030 --> 00:04:15,630
remember come and ask me later or maybe

00:04:12,120 --> 00:04:17,489
we can tweet it out once more we don't

00:04:15,630 --> 00:04:20,430
have that many yet so there is still a

00:04:17,489 --> 00:04:22,590
good chance that you get in also for the

00:04:20,430 --> 00:04:25,290
location pitches we only have one

00:04:22,590 --> 00:04:28,650
location pitched so far I mean we can do

00:04:25,290 --> 00:04:30,450
better than that again until midnight

00:04:28,650 --> 00:04:33,510
send us the city that you would like to

00:04:30,450 --> 00:04:34,830
to host the next year okay in not just

00:04:33,510 --> 00:04:36,360
that you want to go there but you

00:04:34,830 --> 00:04:45,180
actually have to actually organize it

00:04:36,360 --> 00:04:47,220
yeah and send it slide deck tell the

00:04:45,180 --> 00:04:50,550
people to stop talking yeah that's

00:04:47,220 --> 00:04:53,280
that's a lot easier said than done

00:04:50,550 --> 00:04:56,700
all right um I'm gonna go all flight

00:04:53,280 --> 00:04:59,940
attendant on you there is flyers in your

00:04:56,700 --> 00:05:02,070
goodie bags that tell you about two

00:04:59,940 --> 00:05:03,750
beautiful challenges that nicer laps is

00:05:02,070 --> 00:05:05,610
doing so one of them is a coding

00:05:03,750 --> 00:05:07,710
challenge and you can win actual cash

00:05:05,610 --> 00:05:09,840
that's kind of nice and the other one is

00:05:07,710 --> 00:05:12,630
that you make a mind map of one of the

00:05:09,840 --> 00:05:14,160
talks that is about to come up and you

00:05:12,630 --> 00:05:17,460
share them with them and you get a free

00:05:14,160 --> 00:05:19,230
t-shirt there's another it's not a

00:05:17,460 --> 00:05:22,050
challenge it's another it's another like

00:05:19,230 --> 00:05:23,970
sponsor thing github is has they're both

00:05:22,050 --> 00:05:25,890
upstairs and they are looking for people

00:05:23,970 --> 00:05:28,110
to interview about their open-source

00:05:25,890 --> 00:05:29,490
projects so if you have our open sourced

00:05:28,110 --> 00:05:31,170
something and you want to share it with

00:05:29,490 --> 00:05:34,500
the rest of the world they will do like

00:05:31,170 --> 00:05:35,940
like audio recording video recording so

00:05:34,500 --> 00:05:37,800
you don't have to like interview

00:05:35,940 --> 00:05:41,390
interview but it will be really nice to

00:05:37,800 --> 00:05:47,790
share your stories of open source

00:05:41,390 --> 00:05:49,260
alright as you're not silent with me I

00:05:47,790 --> 00:05:52,410
hope that you're silent with her our

00:05:49,260 --> 00:05:55,620
next speaker hi Damir is a software

00:05:52,410 --> 00:05:59,180
engineer who loves teaching he's also a

00:05:55,620 --> 00:06:02,280
remote worker as I guess so many of us

00:05:59,180 --> 00:06:04,380
and he will try to get to the bottom of

00:06:02,280 --> 00:06:06,090
a performance issue with us and it's

00:06:04,380 --> 00:06:08,419
based on a true story so that's the

00:06:06,090 --> 00:06:08,419
citing

00:06:10,480 --> 00:06:20,470
[Applause]

00:06:17,370 --> 00:06:21,970
well thank you all hope you have all

00:06:20,470 --> 00:06:24,160
enjoyed your lunch

00:06:21,970 --> 00:06:26,830
my name is dimer and today I want to

00:06:24,160 --> 00:06:28,750
show you what tie a set of tools that I

00:06:26,830 --> 00:06:31,660
believe should be a part of every

00:06:28,750 --> 00:06:33,430
developers every debuggers tool belt but

00:06:31,660 --> 00:06:37,510
before we start let me introduce you to

00:06:33,430 --> 00:06:40,810
MIDI metering is my / programming /

00:06:37,510 --> 00:06:43,540
debugging partner Scheepers I program or

00:06:40,810 --> 00:06:45,750
debug and we've been per program in

00:06:43,540 --> 00:06:50,290
Perth bugging for quite a while and

00:06:45,750 --> 00:06:53,800
naturally she has heard a lot of horror

00:06:50,290 --> 00:06:56,350
stories to hers and she has seen some of

00:06:53,800 --> 00:06:58,690
them like mismatched parenthesis that's

00:06:56,350 --> 00:07:01,419
you know pretty bad but there are worse

00:06:58,690 --> 00:07:03,250
things than that for example by the bugs

00:07:01,419 --> 00:07:06,040
you know those that keep you up at night

00:07:03,250 --> 00:07:07,450
those that wake you up that destroy your

00:07:06,040 --> 00:07:08,800
production server destroy your

00:07:07,450 --> 00:07:11,229
production database when you don't have

00:07:08,800 --> 00:07:15,580
a backup but we will not speak about

00:07:11,229 --> 00:07:17,860
those there are also bugs that are not

00:07:15,580 --> 00:07:20,110
so bad in the grand scheme of things

00:07:17,860 --> 00:07:21,820
they make you a bit embarrassed that you

00:07:20,110 --> 00:07:23,890
made them you didn't do all due

00:07:21,820 --> 00:07:26,340
diligence but you know no one is hurt

00:07:23,890 --> 00:07:30,130
everything is well we can move forward

00:07:26,340 --> 00:07:32,289
there are also bugs that are very loud

00:07:30,130 --> 00:07:35,020
you know like you call a method on mail

00:07:32,289 --> 00:07:36,729
and it it looks like everything has

00:07:35,020 --> 00:07:39,039
exploded but it's fine

00:07:36,729 --> 00:07:41,229
you know it tells you where you you need

00:07:39,039 --> 00:07:44,350
to look at to fix the problem and that's

00:07:41,229 --> 00:07:46,539
okay there are also silent bugs they are

00:07:44,350 --> 00:07:49,090
worse right because they do their damage

00:07:46,539 --> 00:07:51,280
over time you're not they don't tell you

00:07:49,090 --> 00:07:53,620
there they are there and you get to know

00:07:51,280 --> 00:07:55,930
that only when it is really really late

00:07:53,620 --> 00:07:59,740
when things have already got pretty bad

00:07:55,930 --> 00:08:04,389
so this this will be a story of a hunt

00:07:59,740 --> 00:08:10,830
for one such bug and I like to call this

00:08:04,389 --> 00:08:14,410
story 2016 at the bugging Odyssey so

00:08:10,830 --> 00:08:17,200
this Odyssey begins with my CTO coming

00:08:14,410 --> 00:08:21,280
to a team Channel and asking us to look

00:08:17,200 --> 00:08:23,440
at a problem that has somehow caused our

00:08:21,280 --> 00:08:24,790
specs to start running tremendously slow

00:08:23,440 --> 00:08:27,580
so sorry

00:08:24,790 --> 00:08:29,650
aspects are not trying to say slow but

00:08:27,580 --> 00:08:32,500
it takes tremendous huge amount of time

00:08:29,650 --> 00:08:34,750
for them to start at all so that's not

00:08:32,500 --> 00:08:38,020
great you know it's lowering down specs

00:08:34,750 --> 00:08:40,750
obviously as well and if we can fix that

00:08:38,020 --> 00:08:44,260
then we will save hours and tons of

00:08:40,750 --> 00:08:47,590
nurse for everyone now every day and you

00:08:44,260 --> 00:08:51,880
know every debugging story beat walking

00:08:47,590 --> 00:08:53,560
up parkour Justin Justin Odyssey begins

00:08:51,880 --> 00:08:55,480
with trying to reproduce the problem

00:08:53,560 --> 00:08:57,970
being able to see it by yourself

00:08:55,480 --> 00:09:01,180
so naturally I just start my application

00:08:57,970 --> 00:09:04,630
I try to run tests and they start

00:09:01,180 --> 00:09:07,570
quickly I'm using spring so naturally no

00:09:04,630 --> 00:09:09,820
rails application sets in in memory you

00:09:07,570 --> 00:09:12,010
start tests real application for exploit

00:09:09,820 --> 00:09:14,680
another process which is very quick

00:09:12,010 --> 00:09:17,110
typically and that starts so that's fine

00:09:14,680 --> 00:09:18,940
and I can't just go to my CTO and say

00:09:17,110 --> 00:09:24,310
well there's no bug you're crazy because

00:09:18,940 --> 00:09:26,320
I know he's not so I try again and yeah

00:09:24,310 --> 00:09:29,650
still pretty quick I try to change some

00:09:26,320 --> 00:09:31,720
code try again and there is something

00:09:29,650 --> 00:09:35,370
you know something is happening so I

00:09:31,720 --> 00:09:39,970
basically just go wait up go to town as

00:09:35,370 --> 00:09:42,460
would a basic program mercy and continue

00:09:39,970 --> 00:09:44,320
this loop modify some code start tests

00:09:42,460 --> 00:09:46,090
and see if there's something else and

00:09:44,320 --> 00:09:48,880
then after six or seven a time

00:09:46,090 --> 00:09:52,180
suddenly it takes about 20 to 30 seconds

00:09:48,880 --> 00:09:55,240
for realz application to fork and for

00:09:52,180 --> 00:09:57,220
tests to start so ok my CTO is not crazy

00:09:55,240 --> 00:09:59,860
there is definitely something there and

00:09:57,220 --> 00:10:02,200
I feel a rush of adrenaline because I

00:09:59,860 --> 00:10:04,390
sold something I reproduce the issue

00:10:02,200 --> 00:10:08,200
there is something to fix so yeah

00:10:04,390 --> 00:10:09,820
that's great but what it actual

00:10:08,200 --> 00:10:12,280
introduced the issue where did it come

00:10:09,820 --> 00:10:14,560
from because if I try the same steps on

00:10:12,280 --> 00:10:16,650
a small rails application there's no

00:10:14,560 --> 00:10:19,750
problem there like it runs very quickly

00:10:16,650 --> 00:10:21,490
so I want to find us one commit that

00:10:19,750 --> 00:10:25,030
introduced the issue into the codebase

00:10:21,490 --> 00:10:26,800
and understand then how it happened so I

00:10:25,030 --> 00:10:29,650
reached for my for one of my favorite

00:10:26,800 --> 00:10:31,840
tools for that get bisect get bisect

00:10:29,650 --> 00:10:35,710
uses the magic of binary search to

00:10:31,840 --> 00:10:37,230
quickly in a very small number of steps

00:10:35,710 --> 00:10:41,010
identify a problematic

00:10:37,230 --> 00:10:44,160
commit so I started sure all I need to

00:10:41,010 --> 00:10:47,490
do is tell get where where the bug is

00:10:44,160 --> 00:10:49,860
and where there where I'm sure that

00:10:47,490 --> 00:10:52,560
there is no bug so I marked one commit

00:10:49,860 --> 00:10:56,150
as bad and mark the other commit as good

00:10:52,560 --> 00:10:58,860
so let's now let now get to do its job

00:10:56,150 --> 00:11:00,660
Get Well check out the committee in the

00:10:58,860 --> 00:11:03,870
middle between those two in this case

00:11:00,660 --> 00:11:06,480
this e e and will ask me to tell it

00:11:03,870 --> 00:11:08,490
whether it's good or bad so I ran tests

00:11:06,480 --> 00:11:10,680
I see that commit is bad

00:11:08,490 --> 00:11:12,330
so get marks it as such and we know

00:11:10,680 --> 00:11:16,710
automatically that all comments that

00:11:12,330 --> 00:11:18,540
follow ET de sir are also balanced so it

00:11:16,710 --> 00:11:20,880
repeats now it selects another middle

00:11:18,540 --> 00:11:22,620
commit and it asks me for status it

00:11:20,880 --> 00:11:25,380
builds fine soul commits before that are

00:11:22,620 --> 00:11:27,840
fine as well and now we just have this

00:11:25,380 --> 00:11:30,990
final commit to test for and we will

00:11:27,840 --> 00:11:35,370
know where the problem is so you know I

00:11:30,990 --> 00:11:37,050
leave you with a cliffhanger but the

00:11:35,370 --> 00:11:39,660
problem with git bisect is that you know

00:11:37,050 --> 00:11:42,570
which commit was good so you have to

00:11:39,660 --> 00:11:45,210
identify that first but because my sect

00:11:42,570 --> 00:11:47,520
is using binary search we don't have to

00:11:45,210 --> 00:11:49,380
care that much right because to identify

00:11:47,520 --> 00:11:52,530
one bad commit among thousands of them

00:11:49,380 --> 00:11:54,500
we just need 13 stops so we can just

00:11:52,530 --> 00:11:58,530
take something written centuries ago and

00:11:54,500 --> 00:12:00,780
rely on get to do the magic so that's

00:11:58,530 --> 00:12:02,940
that's what I try to do so I write a

00:12:00,780 --> 00:12:04,940
small script that will tell me is this

00:12:02,940 --> 00:12:08,310
you presently this commit or not is

00:12:04,940 --> 00:12:12,330
getting slower and slower to start and I

00:12:08,310 --> 00:12:14,310
go to sleep I wiki I run the script go

00:12:12,330 --> 00:12:16,350
to sleep wake up in the morning have a

00:12:14,310 --> 00:12:18,530
cup of coffee and eagerly look into the

00:12:16,350 --> 00:12:22,730
results of the script and I find that

00:12:18,530 --> 00:12:26,280
script has crashed of course a bit why

00:12:22,730 --> 00:12:28,710
well I went long enough back into the

00:12:26,280 --> 00:12:31,140
history that I don't have gems installed

00:12:28,710 --> 00:12:33,780
that I had long time ago so you know I

00:12:31,140 --> 00:12:36,450
had to install gems as I'm checking out

00:12:33,780 --> 00:12:39,030
old versions of the code base yeah fine

00:12:36,450 --> 00:12:40,830
normally okay so I had the line bundle

00:12:39,030 --> 00:12:44,400
install to the script

00:12:40,830 --> 00:12:46,950
I let do another job I go to bed I'm

00:12:44,400 --> 00:12:47,910
very excited I twist and turn and in the

00:12:46,950 --> 00:12:52,320
morning

00:12:47,910 --> 00:12:54,420
oh of course another crash why oh I

00:12:52,320 --> 00:12:56,250
forgot about the database you know code

00:12:54,420 --> 00:12:58,670
and database also go out of sync as you

00:12:56,250 --> 00:13:02,520
check out old commits so yeah okay

00:12:58,670 --> 00:13:04,650
Rick TV reset whatever let's go to sleep

00:13:02,520 --> 00:13:07,290
or maybe not maybe just stay awake which

00:13:04,650 --> 00:13:08,310
will be quicker because about it we'll

00:13:07,290 --> 00:13:11,610
crash again right

00:13:08,310 --> 00:13:12,480
that's debugging why well funny story

00:13:11,610 --> 00:13:14,190
really

00:13:12,480 --> 00:13:16,500
there was this guy who introduced a

00:13:14,190 --> 00:13:20,150
dependency into the our primary product

00:13:16,500 --> 00:13:22,590
onto his private repository on github

00:13:20,150 --> 00:13:25,680
sometimes we do things like that yeah

00:13:22,590 --> 00:13:27,810
and eventually that dependency was

00:13:25,680 --> 00:13:29,940
Nestor anymore we were removed from jam

00:13:27,810 --> 00:13:32,100
file he cleaned up his get repository

00:13:29,940 --> 00:13:33,750
remove the wrap up but you know now

00:13:32,100 --> 00:13:36,530
there is a hard line I cannot check out

00:13:33,750 --> 00:13:39,480
the previous code and make it work so

00:13:36,530 --> 00:13:42,600
there is a lesson here expressing words

00:13:39,480 --> 00:13:47,130
of great general Maximus what we commit

00:13:42,600 --> 00:13:50,160
in life echoes in eternity so you know

00:13:47,130 --> 00:13:52,710
try to always aim for making every

00:13:50,160 --> 00:13:55,050
commit to be stable to be able so that

00:13:52,710 --> 00:13:57,120
you can draw check it out in future and

00:13:55,050 --> 00:14:00,750
run your application or your test

00:13:57,120 --> 00:14:03,660
against one other debugging problem is

00:14:00,750 --> 00:14:05,670
that issue was getting more and more

00:14:03,660 --> 00:14:07,890
pronounced with time so when we got

00:14:05,670 --> 00:14:10,770
closer to the source it was becoming

00:14:07,890 --> 00:14:13,140
harder to identify you know the signal

00:14:10,770 --> 00:14:15,600
versus the noise but somehow we got

00:14:13,140 --> 00:14:18,470
around it and I got an indication about

00:14:15,600 --> 00:14:21,510
where the problem finally could be and

00:14:18,470 --> 00:14:25,800
it could yes from the picture behind me

00:14:21,510 --> 00:14:27,690
it's in mono it well my nose is actually

00:14:25,800 --> 00:14:31,050
or was a framework that we built

00:14:27,690 --> 00:14:34,080
internally to to help us write

00:14:31,050 --> 00:14:38,220
monolithic rails application actually it

00:14:34,080 --> 00:14:40,560
would allow us to mount classes a units

00:14:38,220 --> 00:14:43,410
of business logic directly onto race

00:14:40,560 --> 00:14:45,600
rock rails as routes so you know it

00:14:43,410 --> 00:14:48,270
would encapsulate controller logic and

00:14:45,600 --> 00:14:50,100
some operations together and it would

00:14:48,270 --> 00:14:53,760
work its magic it was actually it is

00:14:50,100 --> 00:14:55,500
actually pretty next work with but that

00:14:53,760 --> 00:14:57,300
is not the comments of hundred lines of

00:14:55,500 --> 00:14:59,370
code that I hoped I would find I just

00:14:57,300 --> 00:15:01,080
found one merge committed and uses a

00:14:59,370 --> 00:15:03,560
whole new technology

00:15:01,080 --> 00:15:06,240
Changez tens of thousands of code so

00:15:03,560 --> 00:15:07,920
finding what probably introduced it

00:15:06,240 --> 00:15:10,740
doesn't really help me too much

00:15:07,920 --> 00:15:12,930
but what helped me was to know that if

00:15:10,740 --> 00:15:14,400
this was an issue it explains why it was

00:15:12,930 --> 00:15:16,410
getting worse and worse with time

00:15:14,400 --> 00:15:21,360
because we were gradually adopting it

00:15:16,410 --> 00:15:22,950
right so I can we can assume for now

00:15:21,360 --> 00:15:24,270
that it has something to do with this

00:15:22,950 --> 00:15:28,770
new framework with this new technology

00:15:24,270 --> 00:15:31,320
but it doesn't help us fix anything so I

00:15:28,770 --> 00:15:33,440
was discussing this with people you know

00:15:31,320 --> 00:15:36,360
their programming

00:15:33,440 --> 00:15:40,620
rubber duck debugging Matauri debugging

00:15:36,360 --> 00:15:42,690
and a lot of people ask me is it maybe a

00:15:40,620 --> 00:15:46,770
memory leak that could explain something

00:15:42,690 --> 00:15:49,650
so there is an approach to test remember

00:15:46,770 --> 00:15:51,360
Alex one is just to look at the memory

00:15:49,650 --> 00:15:54,000
footprint of your application a memory

00:15:51,360 --> 00:15:56,820
profile so if it is wibbly-wobbly but

00:15:54,000 --> 00:15:58,340
always returns to some baseline well we

00:15:56,820 --> 00:16:02,460
can assume that there is no memory leak

00:15:58,340 --> 00:16:06,390
but if your memory profile reminds you

00:16:02,460 --> 00:16:09,990
of you see involved then we are pretty

00:16:06,390 --> 00:16:11,280
confident there is a memory things are

00:16:09,990 --> 00:16:12,870
not so easy

00:16:11,280 --> 00:16:15,810
robell and that's why I called it named

00:16:12,870 --> 00:16:17,700
approach right because Ruby takes memory

00:16:15,810 --> 00:16:19,380
as it allocates it but it doesn't give

00:16:17,700 --> 00:16:23,550
it back to the operating system I mean

00:16:19,380 --> 00:16:25,860
it does but very very slowly so memory

00:16:23,550 --> 00:16:26,910
profile of most Ruby applications will

00:16:25,860 --> 00:16:29,370
look like this

00:16:26,910 --> 00:16:31,050
it's allocate memory but only slowly

00:16:29,370 --> 00:16:32,820
release it to memory systems eventually

00:16:31,050 --> 00:16:35,670
there is some top line and just memory

00:16:32,820 --> 00:16:38,850
doesn't go much below that and we call

00:16:35,670 --> 00:16:41,280
that memory board memory bloat is not

00:16:38,850 --> 00:16:43,320
bad it's just Ruby process that took a

00:16:41,280 --> 00:16:45,180
lot of memory but there was nothing that

00:16:43,320 --> 00:16:48,090
memory so Ruby is not really concerned

00:16:45,180 --> 00:16:51,750
too much with it so we have to actually

00:16:48,090 --> 00:16:53,280
look for what is in the memory and if we

00:16:51,750 --> 00:16:55,410
can find what is in memory and how long

00:16:53,280 --> 00:16:58,320
it has been there then we can say there

00:16:55,410 --> 00:17:00,660
is a memory leak or not and Ruby

00:16:58,320 --> 00:17:03,570
luckily provides two very easy methods

00:17:00,660 --> 00:17:06,270
to help us do that so they're visiting

00:17:03,570 --> 00:17:08,220
object space one of them is traced

00:17:06,270 --> 00:17:11,670
object allocation starts with basically

00:17:08,220 --> 00:17:13,860
just starts collecting information about

00:17:11,670 --> 00:17:17,820
what should be in memory what Ruby

00:17:13,860 --> 00:17:20,310
allocates and the other line is dump all

00:17:17,820 --> 00:17:22,290
which will take everything that is in

00:17:20,310 --> 00:17:24,600
Ruby's dynamic memory and heat memory

00:17:22,290 --> 00:17:28,020
and dump it to a single file and that

00:17:24,600 --> 00:17:29,940
file will contain many lines and lists

00:17:28,020 --> 00:17:32,520
every single line will be adjacent

00:17:29,940 --> 00:17:34,380
object that you can easily inspect there

00:17:32,520 --> 00:17:35,940
are many interesting attributes but for

00:17:34,380 --> 00:17:39,840
now I really want to focus on this one

00:17:35,940 --> 00:17:42,750
generation generation means what is the

00:17:39,840 --> 00:17:44,670
garbage collector generation in which

00:17:42,750 --> 00:17:48,840
the subject was initialized it tells us

00:17:44,670 --> 00:17:50,400
how old the object is in the memory no

00:17:48,840 --> 00:17:52,530
it's really hard to see something in

00:17:50,400 --> 00:17:57,120
this file because it has just for this

00:17:52,530 --> 00:17:59,220
example of printing help hello world we

00:17:57,120 --> 00:18:02,310
have 20 more than 20,000 objects

00:17:59,220 --> 00:18:04,410
generated in heap so you know good good

00:18:02,310 --> 00:18:06,000
luck just scrolling through it but we

00:18:04,410 --> 00:18:08,640
have tools we have tools like hippie

00:18:06,000 --> 00:18:12,570
hippie is a really nice tool that gets

00:18:08,640 --> 00:18:14,070
you a condensed summary of what is what

00:18:12,570 --> 00:18:16,410
is in there basically it gives you a

00:18:14,070 --> 00:18:17,790
demographic statistics well you have 15

00:18:16,410 --> 00:18:19,800
objects the help that have been

00:18:17,790 --> 00:18:22,740
allocated in the element garbage

00:18:19,800 --> 00:18:25,290
collector generation and 20,000 have

00:18:22,740 --> 00:18:27,420
been generated before we started tracing

00:18:25,290 --> 00:18:30,000
so you don't probably care about them

00:18:27,420 --> 00:18:32,330
but and you know this is just for a

00:18:30,000 --> 00:18:34,800
simple program so we had only one GC

00:18:32,330 --> 00:18:37,200
generation but typically we would have

00:18:34,800 --> 00:18:39,450
many of them and we could inspect every

00:18:37,200 --> 00:18:41,940
one of them individually and see where

00:18:39,450 --> 00:18:43,500
those objects actually got created so in

00:18:41,940 --> 00:18:44,910
this example this is a separate example

00:18:43,500 --> 00:18:48,000
obviously because we have much more

00:18:44,910 --> 00:18:49,710
objects and more generations we have the

00:18:48,000 --> 00:18:52,230
most objects being generated in the

00:18:49,710 --> 00:18:54,300
signatory so you know that can

00:18:52,230 --> 00:18:56,850
potentially give you some so I was

00:18:54,300 --> 00:19:02,700
exploring this hippy report for my

00:18:56,850 --> 00:19:07,770
application really really many classes

00:19:02,700 --> 00:19:11,340
yourself objects so I'm hearing hard

00:19:07,770 --> 00:19:12,810
time to injure interpret that I just

00:19:11,340 --> 00:19:16,170
don't understand what what could it mean

00:19:12,810 --> 00:19:20,640
like why would I have so many classes of

00:19:16,170 --> 00:19:22,740
objects so I just make mark this as

00:19:20,640 --> 00:19:23,720
plausible theory there could be a memory

00:19:22,740 --> 00:19:28,370
leak but

00:19:23,720 --> 00:19:31,330
let's let's keep exploring so I've been

00:19:28,370 --> 00:19:34,610
kind of going around I have looked for

00:19:31,330 --> 00:19:37,309
what introduced the problem I looked at

00:19:34,610 --> 00:19:39,710
memory profile but I didn't actually

00:19:37,309 --> 00:19:40,610
look at why it was slow but what was

00:19:39,710 --> 00:19:42,500
being slow

00:19:40,610 --> 00:19:45,950
was there one method that was running

00:19:42,500 --> 00:19:47,120
longer than necessary so there was

00:19:45,950 --> 00:19:51,409
another approach I could try I could

00:19:47,120 --> 00:19:53,600
just take a look at how call stack

00:19:51,409 --> 00:19:55,490
changes through time tracing call stack

00:19:53,600 --> 00:19:57,080
so let me just quickly explain what I

00:19:55,490 --> 00:19:59,750
mean by looking at this simple program

00:19:57,080 --> 00:20:04,130
so basically we have main method main

00:19:59,750 --> 00:20:05,780
method calls to other methods and main

00:20:04,130 --> 00:20:07,460
calls say hello and say bye say hello

00:20:05,780 --> 00:20:09,320
calls to other methods we don't care

00:20:07,460 --> 00:20:12,919
about them I just remove them here for

00:20:09,320 --> 00:20:15,350
brevity reasons but when we start

00:20:12,919 --> 00:20:17,150
running this program this is what call

00:20:15,350 --> 00:20:18,919
psych actually looks like we have main

00:20:17,150 --> 00:20:20,900
method on the bottom which means it's

00:20:18,919 --> 00:20:22,100
calling methods on top of it right it's

00:20:20,900 --> 00:20:24,620
on the bottom of the call stack

00:20:22,100 --> 00:20:25,549
it's called it called say hello so say

00:20:24,620 --> 00:20:27,890
hello is above it

00:20:25,549 --> 00:20:29,659
say hello call three name and ring name

00:20:27,890 --> 00:20:34,850
would be on top of the call stack and

00:20:29,659 --> 00:20:39,710
this is zero right T 0 so in next time

00:20:34,850 --> 00:20:43,940
instance next CPU cycle we call greeting

00:20:39,710 --> 00:20:46,610
from say hello and now we present that

00:20:43,940 --> 00:20:49,880
in the call stack as well so in next

00:20:46,610 --> 00:20:53,260
time instance we moved from state hello

00:20:49,880 --> 00:20:55,820
to say bye and now our call stack will

00:20:53,260 --> 00:20:58,730
represent that but as we were doing this

00:20:55,820 --> 00:21:00,500
we were keeping all other or all

00:20:58,730 --> 00:21:03,500
previous versions of the call stack on

00:21:00,500 --> 00:21:04,909
this image so that we can easily see how

00:21:03,500 --> 00:21:08,600
the contact was changing through time

00:21:04,909 --> 00:21:12,020
and what we can see here is that main is

00:21:08,600 --> 00:21:14,390
the widest block so that means it was

00:21:12,020 --> 00:21:17,539
also the longest time on the call stack

00:21:14,390 --> 00:21:19,520
and so the wider our bar is the longer

00:21:17,539 --> 00:21:21,500
it is on the call stack mean which means

00:21:19,520 --> 00:21:25,400
that longer that method has been running

00:21:21,500 --> 00:21:26,870
so longer means worse more probably I

00:21:25,400 --> 00:21:29,150
mean everything on the bottom will be

00:21:26,870 --> 00:21:31,190
long of course but if there is something

00:21:29,150 --> 00:21:33,559
very wrong on top that that will be an

00:21:31,190 --> 00:21:35,900
indication first so this this

00:21:33,559 --> 00:21:39,500
visualization this call stack traces

00:21:35,900 --> 00:21:41,300
called a fling craft and we can use we

00:21:39,500 --> 00:21:43,370
can render flame crafts very easily with

00:21:41,300 --> 00:21:46,010
Ruby there is a gem called flame trap

00:21:43,370 --> 00:21:47,960
you install it and you can just invoke

00:21:46,010 --> 00:21:51,680
one method on it and it twelve render an

00:21:47,960 --> 00:21:53,570
SVG file for you that has all these nice

00:21:51,680 --> 00:21:55,850
shapes bar that you can inspect what

00:21:53,570 --> 00:21:59,930
what what method is which and how long

00:21:55,850 --> 00:22:02,630
it has been run okay so great let's just

00:21:59,930 --> 00:22:05,510
put plane graph somewhere in the rails

00:22:02,630 --> 00:22:09,440
application initialization and we'll see

00:22:05,510 --> 00:22:11,750
something so I do that I generate SVG I

00:22:09,440 --> 00:22:14,090
double click on it it opens in Chrome

00:22:11,750 --> 00:22:17,090
that was my default browser three years

00:22:14,090 --> 00:22:21,590
ago and I don't see a picture I see

00:22:17,090 --> 00:22:23,330
browser crashing I mean you can just

00:22:21,590 --> 00:22:25,460
imagine how many methods are called in

00:22:23,330 --> 00:22:27,440
the rails application start start at

00:22:25,460 --> 00:22:30,140
initialization process that browser

00:22:27,440 --> 00:22:31,670
simply Confederate funnily enough Safari

00:22:30,140 --> 00:22:35,930
handled it and since then I'm using

00:22:31,670 --> 00:22:40,360
Safari as my primary browser and this is

00:22:35,930 --> 00:22:43,100
what the octane graph was rendering like

00:22:40,360 --> 00:22:47,060
so looking at just one plane graph is

00:22:43,100 --> 00:22:49,490
really hard you don't have a feeling for

00:22:47,060 --> 00:22:52,070
units of measure unless you know what

00:22:49,490 --> 00:22:55,130
you're looking for I mean if you know

00:22:52,070 --> 00:22:56,390
that you can look for Peaks vertical

00:22:55,130 --> 00:22:57,680
picks as well because that means you

00:22:56,390 --> 00:23:00,050
know there are lots there are lots of

00:22:57,680 --> 00:23:02,090
methods calling one one one another

00:23:00,050 --> 00:23:03,260
there is autumn on call stack but that

00:23:02,090 --> 00:23:07,490
doesn't necessarily always imply

00:23:03,260 --> 00:23:10,310
slowness so because my application was

00:23:07,490 --> 00:23:12,440
getting slower through time all I had to

00:23:10,310 --> 00:23:14,930
do was rendered three or more clean

00:23:12,440 --> 00:23:17,300
graphs and compare them like killing

00:23:14,930 --> 00:23:19,400
Safari can three segs with flame graphs

00:23:17,300 --> 00:23:20,750
open in three different bar tabs I was

00:23:19,400 --> 00:23:24,770
really impressed with the browser at

00:23:20,750 --> 00:23:27,020
this point so in my first step I have a

00:23:24,770 --> 00:23:28,450
very simplified plane craft that looks

00:23:27,020 --> 00:23:31,310
something like this

00:23:28,450 --> 00:23:34,250
it seems okay but then I quickly

00:23:31,310 --> 00:23:36,680
switched to another tab and it changes

00:23:34,250 --> 00:23:40,460
something there changes then I switched

00:23:36,680 --> 00:23:42,200
to third that and it changes again so at

00:23:40,460 --> 00:23:43,490
this point I think it's really obvious

00:23:42,200 --> 00:23:46,190
that there is one method that's simply

00:23:43,490 --> 00:23:48,170
taking more time then in third attempt

00:23:46,190 --> 00:23:48,720
in third iteration and it was in first

00:23:48,170 --> 00:23:50,550
two

00:23:48,720 --> 00:23:51,930
so great I finally found something I

00:23:50,550 --> 00:23:53,550
found the source of the slowness like

00:23:51,930 --> 00:23:57,080
let's not think this method and of

00:23:53,550 --> 00:23:57,080
course this method belongs to Rails so

00:23:57,770 --> 00:24:05,880
yeah good luck with that it's real swag

00:24:00,390 --> 00:24:08,970
like me report no no first off I mean it

00:24:05,880 --> 00:24:10,290
is a password in rails and all about you

00:24:08,970 --> 00:24:12,240
don't actually see in the planar because

00:24:10,290 --> 00:24:16,590
there are no methods written in in

00:24:12,240 --> 00:24:18,210
bubala in C but but let's not care much

00:24:16,590 --> 00:24:21,240
about Ruby hopefully Ruby's not slow

00:24:18,210 --> 00:24:23,310
easy so let's first look at trails and

00:24:21,240 --> 00:24:26,220
obviously it's not really just rails is

00:24:23,310 --> 00:24:28,440
problem because empty rails application

00:24:26,220 --> 00:24:32,250
and that's also must also be something

00:24:28,440 --> 00:24:33,660
from us so that that one one block was

00:24:32,250 --> 00:24:36,300
actually a method that is sitting in

00:24:33,660 --> 00:24:38,940
action packed laid action dispatched

00:24:36,300 --> 00:24:42,920
routing route set and the method was

00:24:38,940 --> 00:24:45,240
called clear this is slightly simplified

00:24:42,920 --> 00:24:49,290
listening of that method and I want you

00:24:45,240 --> 00:24:53,070
to focus on these six lines what we have

00:24:49,290 --> 00:24:56,090
here are two loops one is iterate both

00:24:53,070 --> 00:25:00,470
of them iterate through some enumerable

00:24:56,090 --> 00:25:03,480
that presumably contains method names

00:25:00,470 --> 00:25:06,390
both of them are added to this a block

00:25:03,480 --> 00:25:10,470
argument helper and then those methods

00:25:06,390 --> 00:25:19,230
are removed from D from some module they

00:25:10,470 --> 00:25:22,200
wait so we so let's actually what does

00:25:19,230 --> 00:25:24,420
some modules are and those modules have

00:25:22,200 --> 00:25:27,330
some further inspection I realized our

00:25:24,420 --> 00:25:30,690
modules that contain methods that trails

00:25:27,330 --> 00:25:34,320
generates for us to generate URLs or

00:25:30,690 --> 00:25:36,590
paths that we use in our in our code

00:25:34,320 --> 00:25:39,060
base in our controller so in our views

00:25:36,590 --> 00:25:42,180
basically path helpers contains all

00:25:39,060 --> 00:25:43,920
methods that generates paths and your

00:25:42,180 --> 00:25:48,810
helpers contains all methods that

00:25:43,920 --> 00:25:50,510
generate URLs basically what happens

00:25:48,810 --> 00:25:52,410
whenever you change code in rails and

00:25:50,510 --> 00:25:54,630
whether you are in development

00:25:52,410 --> 00:25:56,490
environment or starting the application

00:25:54,630 --> 00:25:58,380
with spring when when there is a long

00:25:56,490 --> 00:26:01,140
link wheels process you change the code

00:25:58,380 --> 00:26:01,800
rails will actually try will have to

00:26:01,140 --> 00:26:04,440
reload

00:26:01,800 --> 00:26:08,700
and volectro loads routes files it has

00:26:04,440 --> 00:26:11,700
to reload also these two modules so it

00:26:08,700 --> 00:26:13,500
will go through every method from every

00:26:11,700 --> 00:26:15,330
from each of those two modules and

00:26:13,500 --> 00:26:19,200
remove all methods from them and then

00:26:15,330 --> 00:26:23,460
added those methods again it happens in

00:26:19,200 --> 00:26:25,830
a different place so now I'm getting

00:26:23,460 --> 00:26:27,270
somewhere is actually removing a method

00:26:25,830 --> 00:26:31,050
from a module swollen groovy

00:26:27,270 --> 00:26:35,040
so I decided to do a small benchmark I

00:26:31,050 --> 00:26:37,170
create this small script it creates tens

00:26:35,040 --> 00:26:38,730
of thousands of objects it creates one

00:26:37,170 --> 00:26:41,040
module includes that module into those

00:26:38,730 --> 00:26:42,750
tens of thousands of objects and then

00:26:41,040 --> 00:26:45,660
add thousands of methods and remove

00:26:42,750 --> 00:26:48,570
thousands of methods so normally I would

00:26:45,660 --> 00:26:52,440
expect some linear time because I'm just

00:26:48,570 --> 00:26:55,350
removing I'm removing methods from one

00:26:52,440 --> 00:27:00,660
module and adding them back there so I'm

00:26:55,350 --> 00:27:02,310
hoping for for constant time we could

00:27:00,660 --> 00:27:04,170
also expect maybe a linear time because

00:27:02,310 --> 00:27:07,830
we are increasing the number of objects

00:27:04,170 --> 00:27:09,660
right so that has to mean something but

00:27:07,830 --> 00:27:13,230
what happens in Ruby is unfortunately

00:27:09,660 --> 00:27:15,630
this I don't want to even try to guess

00:27:13,230 --> 00:27:17,820
which function this is it it's not

00:27:15,630 --> 00:27:19,530
really important but obviously it's slow

00:27:17,820 --> 00:27:22,830
it's slower than we expect

00:27:19,530 --> 00:27:23,940
so problem is rotten rails let's go

00:27:22,830 --> 00:27:26,520
deeper

00:27:23,940 --> 00:27:31,020
let's dig deeper let's dig into ruby in

00:27:26,520 --> 00:27:35,210
vm method see that this you know nice

00:27:31,020 --> 00:27:39,900
little seacoast or after lunch right

00:27:35,210 --> 00:27:41,490
let's zoom in a bit so this is a more

00:27:39,900 --> 00:27:45,060
important part but actually just focus

00:27:41,490 --> 00:27:47,880
on this one line here that shows us that

00:27:45,060 --> 00:27:50,100
whenever Ruby and defines a method from

00:27:47,880 --> 00:27:52,700
a class for a module it actually defines

00:27:50,100 --> 00:27:56,940
that method again but with this marker

00:27:52,700 --> 00:27:59,880
undefined and that so we actually define

00:27:56,940 --> 00:28:02,310
those methods will be internally defines

00:27:59,880 --> 00:28:04,170
those methods how's Ruby process not to

00:28:02,310 --> 00:28:10,260
look for them here again that they don't

00:28:04,170 --> 00:28:11,970
exist okay so if this is a slow part of

00:28:10,260 --> 00:28:13,410
removing a method the question is is

00:28:11,970 --> 00:28:17,700
adding a method to Ruby's

00:28:13,410 --> 00:28:20,610
and yes I guess it is half of the time

00:28:17,700 --> 00:28:23,310
or adding a method is actually spent

00:28:20,610 --> 00:28:26,730
clearing method cache on all objects and

00:28:23,310 --> 00:28:29,790
in the movie so potentially there is an

00:28:26,730 --> 00:28:33,780
improvement there but this is a

00:28:29,790 --> 00:28:36,240
situation currently so if you have one

00:28:33,780 --> 00:28:37,680
map if you have one module in a bunch of

00:28:36,240 --> 00:28:39,690
controllers or if you have bunch of

00:28:37,680 --> 00:28:42,060
objects that you want to remove single

00:28:39,690 --> 00:28:44,970
method from well you have to keep in

00:28:42,060 --> 00:28:47,610
mind it's not fast it's not terribly

00:28:44,970 --> 00:28:49,770
slow but it will probably be a

00:28:47,610 --> 00:28:52,770
bottleneck for you but you know just in

00:28:49,770 --> 00:28:55,560
case so yeah now we finally know what is

00:28:52,770 --> 00:28:59,670
slow and we are getting to the bottom of

00:28:55,560 --> 00:29:01,860
this but okay but not yet how is

00:28:59,670 --> 00:29:05,280
actually our application affecting Ruby

00:29:01,860 --> 00:29:08,100
to show off that slowness to present it

00:29:05,280 --> 00:29:10,290
to us so let's just see what we already

00:29:08,100 --> 00:29:12,360
know git bisect told us that we

00:29:10,290 --> 00:29:15,210
introduced this whole new framework that

00:29:12,360 --> 00:29:22,050
actually mounts objects onto rails as

00:29:15,210 --> 00:29:24,600
routes he P told us that we are maybe

00:29:22,050 --> 00:29:27,390
leaking memory and object that we are

00:29:24,600 --> 00:29:29,520
leaking could be classes maybe because

00:29:27,390 --> 00:29:34,800
we are leaking a lot of class dsl object

00:29:29,520 --> 00:29:36,420
and flame graph told us that what this

00:29:34,800 --> 00:29:38,850
low is the fact that we have so many

00:29:36,420 --> 00:29:43,530
controllers that it is slow to remove

00:29:38,850 --> 00:29:46,560
methods from them so if if we now look

00:29:43,530 --> 00:29:50,100
at the monolith this library and how it

00:29:46,560 --> 00:29:52,440
works you would see that to mount an

00:29:50,100 --> 00:29:54,300
object in rails route actually has to

00:29:52,440 --> 00:29:58,680
create a generate controller for a of

00:29:54,300 --> 00:29:59,280
the full rails is routing so could that

00:29:58,680 --> 00:30:01,620
be a problem

00:29:59,280 --> 00:30:08,520
could it be that our app is actually

00:30:01,620 --> 00:30:10,470
leaking controllers so well yes if it is

00:30:08,520 --> 00:30:13,530
the case a wrap was generating anonymous

00:30:10,470 --> 00:30:16,140
controllers and it was generating them

00:30:13,530 --> 00:30:18,240
eagerly which means every time so RB was

00:30:16,140 --> 00:30:20,160
parsed we would generate a new

00:30:18,240 --> 00:30:22,890
controller we would mount it onto a row

00:30:20,160 --> 00:30:25,280
and that controller would be delegating

00:30:22,890 --> 00:30:31,340
work to our business logic objects

00:30:25,280 --> 00:30:32,120
and that wasn't great so but now we know

00:30:31,340 --> 00:30:35,240
what to do

00:30:32,120 --> 00:30:38,450
so we finally found the source and all

00:30:35,240 --> 00:30:40,640
we have to do is fix it so how do we fax

00:30:38,450 --> 00:30:42,620
how do we fix something that is slow

00:30:40,640 --> 00:30:43,130
because it's very eager oh we make it

00:30:42,620 --> 00:30:46,039
lazy

00:30:43,130 --> 00:30:48,409
so whenever a route is requested

00:30:46,039 --> 00:30:50,419
we actually just go and only then

00:30:48,409 --> 00:30:52,100
generate a controller and if you

00:30:50,419 --> 00:30:53,690
remember I was speaking about spring

00:30:52,100 --> 00:30:57,140
earlier and that the problem was that

00:30:53,690 --> 00:31:00,140
our master process master rails process

00:30:57,140 --> 00:31:02,210
was getting bigger and bigger so it was

00:31:00,140 --> 00:31:04,370
slower and slower to reel routes from it

00:31:02,210 --> 00:31:06,020
and only then it would work but with

00:31:04,370 --> 00:31:07,640
making this lazy

00:31:06,020 --> 00:31:10,250
we're actually keeping that process as

00:31:07,640 --> 00:31:11,840
is with work only then we actually

00:31:10,250 --> 00:31:13,850
create those controllers so we don't

00:31:11,840 --> 00:31:14,450
actually care if they're leaking or not

00:31:13,850 --> 00:31:18,470
anymore

00:31:14,450 --> 00:31:23,000
because that process lives quickly so

00:31:18,470 --> 00:31:28,240
that was a success we could actually now

00:31:23,000 --> 00:31:32,150
go forward and run tests very easily so

00:31:28,240 --> 00:31:37,669
what what is actually to take away from

00:31:32,150 --> 00:31:41,659
here what what is the lesson well in my

00:31:37,669 --> 00:31:43,010
opinion the lesson here is that when

00:31:41,659 --> 00:31:45,440
debugging you need to know your

00:31:43,010 --> 00:31:47,030
application and your application is not

00:31:45,440 --> 00:31:50,059
just the code that you would it's not

00:31:47,030 --> 00:31:51,380
just code that your team wrote it's also

00:31:50,059 --> 00:31:53,120
code that you poured into your

00:31:51,380 --> 00:31:55,520
application it's your library

00:31:53,120 --> 00:31:58,190
it's your framework it's all of your

00:31:55,520 --> 00:32:00,470
gems it's it's your programming language

00:31:58,190 --> 00:32:02,419
as well so when you're debugging you

00:32:00,470 --> 00:32:04,100
need to be ready to go wide with your

00:32:02,419 --> 00:32:07,010
assumptions you need to assume that

00:32:04,100 --> 00:32:08,900
everything or anything can be broken and

00:32:07,010 --> 00:32:10,610
you also need to go very deep when

00:32:08,900 --> 00:32:13,010
you're doing a research because you

00:32:10,610 --> 00:32:15,620
never know on what levels the things are

00:32:13,010 --> 00:32:20,299
actually broken and how it effects

00:32:15,620 --> 00:32:23,090
abstraction is very wrong so go by do a

00:32:20,299 --> 00:32:25,669
deep research and choose your

00:32:23,090 --> 00:32:27,470
dependencies carefully because they can

00:32:25,669 --> 00:32:29,690
really make or break your application

00:32:27,470 --> 00:32:31,610
thank you very much I will be around

00:32:29,690 --> 00:32:33,020
both days and if you have any cool

00:32:31,610 --> 00:32:34,549
debugging stories that you would like to

00:32:33,020 --> 00:32:37,320
share for me please tell me I will

00:32:34,549 --> 00:32:54,090
report them back to me buddy she won't

00:32:37,320 --> 00:32:58,980
happy to hear them thank you thank you

00:32:54,090 --> 00:33:04,940
there's no Q&A you've been told so you

00:32:58,980 --> 00:33:08,549
know that was harsh thank you so much

00:33:04,940 --> 00:33:12,389
I've been told that you people should be

00:33:08,549 --> 00:33:14,129
told that please do not use those doors

00:33:12,389 --> 00:33:16,259
and decide if you want to get out but

00:33:14,129 --> 00:33:17,970
use the doors in the back because the

00:33:16,259 --> 00:33:20,399
sponsors are there and it's kind of loud

00:33:17,970 --> 00:33:22,529
and then it interrupts a talk and nobody

00:33:20,399 --> 00:33:24,360
wants that so please don't use the doors

00:33:22,529 --> 00:33:26,879
there if you want to go out if you want

00:33:24,360 --> 00:33:31,200
to go to the bathroom use the doors in

00:33:26,879 --> 00:33:33,440
the back good that being said we're

00:33:31,200 --> 00:33:33,440

YouTube URL: https://www.youtube.com/watch?v=ObB0dzX_rBs


