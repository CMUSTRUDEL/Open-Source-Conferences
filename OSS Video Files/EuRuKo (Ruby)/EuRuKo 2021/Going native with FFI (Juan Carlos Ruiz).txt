Title: Going native with FFI (Juan Carlos Ruiz)
Publication date: 2021-06-03
Playlist: Euruko 2021 - Day 1
Description: 
	Ruby is a flexible language that allows us to write expressive and maintainable code. However, sometimes it could be necessary to work with a low-level language, looking for better performance. In this talk, Iâ€™m going to show you how to use Ruby to create an interface for compiled languages like C.
Captions: 
	00:00:00,480 --> 00:00:05,759
juan carlos ruiz is a software engineer

00:00:03,040 --> 00:00:08,960
community leader and mentor that loves

00:00:05,759 --> 00:00:09,760
knowledge sharing and teamwork he is a

00:00:08,960 --> 00:00:12,160
part of

00:00:09,760 --> 00:00:13,920
easy broker product team a multiple

00:00:12,160 --> 00:00:17,039
listing service that helps

00:00:13,920 --> 00:00:18,880
real estate agents to provide the best

00:00:17,039 --> 00:00:21,160
experience finding a home

00:00:18,880 --> 00:00:23,119
he has been participating in different

00:00:21,160 --> 00:00:25,599
technological communities

00:00:23,119 --> 00:00:26,800
trying to help others to accelerate

00:00:25,599 --> 00:00:30,080
their careers

00:00:26,800 --> 00:00:33,399
in engineering and software development

00:00:30,080 --> 00:00:37,920
he has participated as a mentor in the

00:00:33,399 --> 00:00:41,520
international ruby me 2019 program

00:00:37,920 --> 00:00:42,320
helping others to build a professional

00:00:41,520 --> 00:00:46,320
development

00:00:42,320 --> 00:00:50,800
experience working on uh on

00:00:46,320 --> 00:00:53,199
an open source break a truly good guy

00:00:50,800 --> 00:00:53,920
ruby is a flexible language that allows

00:00:53,199 --> 00:00:57,039
us to write

00:00:53,920 --> 00:01:00,160
expressive and maintainable code

00:00:57,039 --> 00:01:01,120
however sometimes it could be necessary

00:01:00,160 --> 00:01:03,359
to work

00:01:01,120 --> 00:01:04,239
with a low-level language looking for

00:01:03,359 --> 00:01:07,840
better

00:01:04,239 --> 00:01:09,119
performance in this talk juan carlos is

00:01:07,840 --> 00:01:12,560
going to show

00:01:09,119 --> 00:01:16,400
us how to use ruby to create

00:01:12,560 --> 00:01:19,520
an interface for compiled languages

00:01:16,400 --> 00:01:22,159
like c and if you have any questions

00:01:19,520 --> 00:01:22,720
please open the stream on the left side

00:01:22,159 --> 00:01:26,080
panel

00:01:22,720 --> 00:01:28,479
and leave them to the stream chat

00:01:26,080 --> 00:01:29,520
and we'll get back to you later juan

00:01:28,479 --> 00:01:32,799
carlos please

00:01:29,520 --> 00:01:35,600
it's your turn thank you

00:01:32,799 --> 00:01:38,479
okay first of all hi everyone welcome to

00:01:35,600 --> 00:01:41,920
my dog donated with ffi

00:01:38,479 --> 00:01:43,840
uh give me a second uh

00:01:41,920 --> 00:01:45,920
my name is juan carlo rice and i'm super

00:01:43,840 --> 00:01:48,560
excited to be here this is my first talk

00:01:45,920 --> 00:01:49,680
in english so i'm also i'm a little bit

00:01:48,560 --> 00:01:52,159
nervous

00:01:49,680 --> 00:01:54,079
uh currently i'm working an easy broker

00:01:52,159 --> 00:01:57,439
and

00:01:54,079 --> 00:02:00,159
i'm working remotely from 2013

00:01:57,439 --> 00:02:02,079
so i started before it got cool you know

00:02:00,159 --> 00:02:03,920
and i love the open source i really like

00:02:02,079 --> 00:02:06,240
to contribute to the communities and

00:02:03,920 --> 00:02:09,200
create new features for

00:02:06,240 --> 00:02:11,120
for all i'm presenting this talk from

00:02:09,200 --> 00:02:13,520
guanajuato mexico this is a picture from

00:02:11,120 --> 00:02:17,040
one of the monuments on my city

00:02:13,520 --> 00:02:20,959
and today i'm going to talk to you about

00:02:17,040 --> 00:02:23,280
how ruby can work with c language

00:02:20,959 --> 00:02:25,280
and i feel a little bit like milhouse

00:02:23,280 --> 00:02:26,160
trying to show his emotion about the old

00:02:25,280 --> 00:02:28,480
fox

00:02:26,160 --> 00:02:29,840
the reason for this is because c was the

00:02:28,480 --> 00:02:32,640
first language that i learned

00:02:29,840 --> 00:02:34,840
in college about 12 years ago and

00:02:32,640 --> 00:02:36,480
although currently i'm not using unique

00:02:34,840 --> 00:02:38,080
professional

00:02:36,480 --> 00:02:41,120
this language gave me fundamentals to

00:02:38,080 --> 00:02:42,879
advance in my professional career

00:02:41,120 --> 00:02:45,040
now what are the options we have to

00:02:42,879 --> 00:02:48,879
manage native covenant ruby

00:02:45,040 --> 00:02:51,599
the first option is mkmf

00:02:48,879 --> 00:02:52,879
mkmf is used by ruby c extensions to

00:02:51,599 --> 00:02:54,720
generate a make file

00:02:52,879 --> 00:02:56,400
which will correctly compile and link

00:02:54,720 --> 00:02:58,560
the c extension to ruby

00:02:56,400 --> 00:02:59,920
and at your party library and how is

00:02:58,560 --> 00:03:03,440
this

00:02:59,920 --> 00:03:05,599
having a c library and wrapping it with

00:03:03,440 --> 00:03:06,959
more zip codes

00:03:05,599 --> 00:03:09,519
and a little ruby to generate the

00:03:06,959 --> 00:03:09,519
makefile

00:03:09,920 --> 00:03:12,959
we get a bundle file

00:03:13,120 --> 00:03:17,680
and we can use this bundle inside a ruby

00:03:15,760 --> 00:03:21,440
model

00:03:17,680 --> 00:03:21,440
let's jump to the console to try this

00:03:21,680 --> 00:03:28,000
i have here a little project created

00:03:25,599 --> 00:03:28,720
with a c extension let's see what is

00:03:28,000 --> 00:03:32,799
inside the c

00:03:28,720 --> 00:03:36,319
extension i'm going to open bim text

00:03:32,799 --> 00:03:40,319
and inside x i'm going to open

00:03:36,319 --> 00:03:43,440
very edge and

00:03:40,319 --> 00:03:43,440
already see

00:03:44,080 --> 00:03:47,840
as you can see the this library is very

00:03:47,120 --> 00:03:50,720
little

00:03:47,840 --> 00:03:52,640
uh these are two super simple functions

00:03:50,720 --> 00:03:55,519
the free functional hello front library

00:03:52,640 --> 00:03:57,840
takes a name variable and only prints

00:03:55,519 --> 00:03:58,879
hello and the variable and the second

00:03:57,840 --> 00:04:02,319
method

00:03:58,879 --> 00:04:03,920
takes a number and it returns the square

00:04:02,319 --> 00:04:07,680
of this number

00:04:03,920 --> 00:04:12,560
now let's see how to grab this

00:04:07,680 --> 00:04:16,000
this library and the code is inside

00:04:12,560 --> 00:04:18,639
next and my ruby xc

00:04:16,000 --> 00:04:19,120
okay as you can see here this is the

00:04:18,639 --> 00:04:21,519
code

00:04:19,120 --> 00:04:23,520
that we need to use to grab the

00:04:21,519 --> 00:04:24,800
extension we need to import the ruby

00:04:23,520 --> 00:04:27,440
edge library

00:04:24,800 --> 00:04:29,840
and create new functions to grab the

00:04:27,440 --> 00:04:34,000
existing functions in the library

00:04:29,840 --> 00:04:36,320
if we compare the code to grab the

00:04:34,000 --> 00:04:37,759
the extension is more than the real

00:04:36,320 --> 00:04:43,840
extensions

00:04:37,759 --> 00:04:43,840
and if we talk about the ruby code

00:04:46,880 --> 00:04:50,880
this is all the ruby code that we need

00:04:48,639 --> 00:04:55,040
to create extension

00:04:50,880 --> 00:04:58,800
and after compile it we have

00:04:55,040 --> 00:05:02,320
a little bundle file and this file

00:04:58,800 --> 00:05:04,720
can be used inside a ruby model

00:05:02,320 --> 00:05:06,639
we can call my helpers that is the

00:05:04,720 --> 00:05:10,320
namespace that i define it in the

00:05:06,639 --> 00:05:13,520
c library in the c wrap and

00:05:10,320 --> 00:05:16,000
the method c hello and c-square and

00:05:13,520 --> 00:05:18,160
i'm wrapping all i'm working again these

00:05:16,000 --> 00:05:21,919
methods inside the model with

00:05:18,160 --> 00:05:21,919
self-hello and self-square

00:05:23,919 --> 00:05:28,479
let's open the admin console to test

00:05:26,160 --> 00:05:28,479
this

00:05:28,880 --> 00:05:36,240
inside this console i can use my

00:05:33,479 --> 00:05:40,479
rubyx.hello and send

00:05:36,240 --> 00:05:43,759
a parameter and a string in my case

00:05:40,479 --> 00:05:46,160
let's see 1g90

00:05:43,759 --> 00:05:47,440
and we can see hello and the parameter

00:05:46,160 --> 00:05:50,840
that i sent

00:05:47,440 --> 00:05:54,160
also if i call my ruby x dot

00:05:50,840 --> 00:05:56,639
square and a number

00:05:54,160 --> 00:05:58,080
i can get the result and but functions

00:05:56,639 --> 00:06:02,880
were called from dc

00:05:58,080 --> 00:06:02,880
library let's back to the presentation

00:06:05,440 --> 00:06:09,520
uh the pros of this approach are we can

00:06:08,080 --> 00:06:12,479
use c functions in a

00:06:09,520 --> 00:06:14,639
in ruby code and we take advantage

00:06:12,479 --> 00:06:16,240
object of the existing ruby edge library

00:06:14,639 --> 00:06:18,720
to create the extension

00:06:16,240 --> 00:06:20,400
and the cons are we need to ask extra c

00:06:18,720 --> 00:06:24,080
code to create the bindings and this

00:06:20,400 --> 00:06:26,479
solution only works on mri

00:06:24,080 --> 00:06:28,479
the other option that we have is to use

00:06:26,479 --> 00:06:31,120
ffi

00:06:28,479 --> 00:06:31,840
ffi stands for foreign function

00:06:31,120 --> 00:06:34,479
interface

00:06:31,840 --> 00:06:35,039
and is a mechanism by which a program

00:06:34,479 --> 00:06:36,720
written

00:06:35,039 --> 00:06:39,199
in one programming language can call

00:06:36,720 --> 00:06:40,160
routines or make use of services greater

00:06:39,199 --> 00:06:43,840
than another

00:06:40,160 --> 00:06:46,000
how is this this is an example taken

00:06:43,840 --> 00:06:47,919
from the ffigm documentation

00:06:46,000 --> 00:06:49,680
and as you can see here you only need to

00:06:47,919 --> 00:06:52,560
import the ffi gem

00:06:49,680 --> 00:06:54,960
extend your model with ffi library

00:06:52,560 --> 00:06:56,639
import the library that you want to use

00:06:54,960 --> 00:06:58,000
in this case we are importing the

00:06:56,639 --> 00:07:01,280
standard c library

00:06:58,000 --> 00:07:03,280
is this ffi live c

00:07:01,280 --> 00:07:05,599
we need attach the function that that we

00:07:03,280 --> 00:07:07,039
want to port in this case is puts this

00:07:05,599 --> 00:07:10,080
is the puts from the c

00:07:07,039 --> 00:07:12,639
code and finally in the last line

00:07:10,080 --> 00:07:14,479
we can see how the method is used i'm

00:07:12,639 --> 00:07:15,360
calling my leap that is the model that

00:07:14,479 --> 00:07:18,639
grabs the

00:07:15,360 --> 00:07:20,639
dc extension puts and the

00:07:18,639 --> 00:07:23,360
the method the parameter that i've sent

00:07:20,639 --> 00:07:23,360
to bots

00:07:24,400 --> 00:07:27,759
the pros of this approach are we now

00:07:26,319 --> 00:07:30,639
need to add additional c

00:07:27,759 --> 00:07:31,440
code at an ffi extension is muted

00:07:30,639 --> 00:07:33,919
multi-platform

00:07:31,440 --> 00:07:36,400
and multi-implementation the cons are

00:07:33,919 --> 00:07:38,240
complex macros are difficult to maintain

00:07:36,400 --> 00:07:39,599
although simple constants can't be

00:07:38,240 --> 00:07:41,599
redefined in ruby

00:07:39,599 --> 00:07:43,199
more elaborate and more elaborate macros

00:07:41,599 --> 00:07:44,560
could be counterproductive to pour them

00:07:43,199 --> 00:07:48,400
from language

00:07:44,560 --> 00:07:48,400
and the same case for callback functions

00:07:49,039 --> 00:07:54,080
and well from here i want to show you an

00:07:51,039 --> 00:07:56,639
example about how to use the ffi gem to

00:07:54,080 --> 00:07:58,479
encapsulate a c library for this i

00:07:56,639 --> 00:08:01,599
decided to make a very simple

00:07:58,479 --> 00:08:04,800
implementation with pgm images

00:08:01,599 --> 00:08:07,280
in summary a pgm image is a grayscale

00:08:04,800 --> 00:08:09,360
image commonly stored in a plain text

00:08:07,280 --> 00:08:11,520
destructor is the following

00:08:09,360 --> 00:08:14,560
a magic number for identifying the file

00:08:11,520 --> 00:08:18,160
type in this case is p2

00:08:14,560 --> 00:08:20,240
the width and height in this case 24 and

00:08:18,160 --> 00:08:22,720
00:08:20,240 --> 00:08:24,840
the maximum grade value for this example

00:08:22,720 --> 00:08:29,120
the maximum grade value is

00:08:24,840 --> 00:08:31,120
15. and 15 represents

00:08:29,120 --> 00:08:33,279
represents white and zero represents

00:08:31,120 --> 00:08:36,560
black

00:08:33,279 --> 00:08:38,640
and everything between other gray scales

00:08:36,560 --> 00:08:40,159
and finally the next lines represent the

00:08:38,640 --> 00:08:43,120
image pixels

00:08:40,159 --> 00:08:44,720
for example here this is the plain text

00:08:43,120 --> 00:08:45,680
value of the image and this is the

00:08:44,720 --> 00:08:48,800
result

00:08:45,680 --> 00:08:51,120
obviously it's a very little image i'm

00:08:48,800 --> 00:08:51,839
uh i meant that i meant the scale of the

00:08:51,120 --> 00:08:56,080
image to

00:08:51,839 --> 00:08:58,959
for the presentation but it's is the

00:08:56,080 --> 00:08:58,959
all right this is the

00:08:59,200 --> 00:09:01,920
destructor

00:09:03,279 --> 00:09:06,399
now this is the content of the pgm

00:09:05,839 --> 00:09:08,800
header

00:09:06,399 --> 00:09:10,240
implemented in c the file has the

00:09:08,800 --> 00:09:10,959
structure that represents the file

00:09:10,240 --> 00:09:13,040
content

00:09:10,959 --> 00:09:14,320
and four methods which passed past the

00:09:13,040 --> 00:09:16,000
database reference

00:09:14,320 --> 00:09:18,720
here is this track that represents the

00:09:16,000 --> 00:09:21,680
image and we have four methods here load

00:09:18,720 --> 00:09:22,399
pgms fpga free pgm and invert colors

00:09:21,680 --> 00:09:23,680
that is the

00:09:22,399 --> 00:09:26,399
method that we'll show in this

00:09:23,680 --> 00:09:26,399
presentation

00:09:28,320 --> 00:09:32,000
once we have the library implementation

00:09:30,080 --> 00:09:34,880
we need to compile it to get the shared

00:09:32,000 --> 00:09:35,440
the shared library the shared library

00:09:34,880 --> 00:09:39,519
has the

00:09:35,440 --> 00:09:43,040
so extension and now that we have this

00:09:39,519 --> 00:09:44,640
so library discharge library we are able

00:09:43,040 --> 00:09:47,200
to

00:09:44,640 --> 00:09:48,000
to add the the path in our model that

00:09:47,200 --> 00:09:50,959
extends from

00:09:48,000 --> 00:09:52,240
ffi librarian in this case i have base

00:09:50,959 --> 00:09:54,880
ffilip

00:09:52,240 --> 00:09:56,800
and the leappad that i define it here

00:09:54,880 --> 00:10:00,480
it's a little bit

00:09:56,800 --> 00:10:00,480
long but it works

00:10:01,120 --> 00:10:04,640
also we need to add a pgm class that

00:10:03,680 --> 00:10:07,600
inherits from

00:10:04,640 --> 00:10:09,519
ffi extract and this class is in charge

00:10:07,600 --> 00:10:12,480
to map the image struct defined

00:10:09,519 --> 00:10:13,440
in the c library and here is a

00:10:12,480 --> 00:10:16,800
comparison

00:10:13,440 --> 00:10:18,880
as you can see its data type is

00:10:16,800 --> 00:10:20,800
data type defined in cs track is now

00:10:18,880 --> 00:10:23,120
represented in the ruby class

00:10:20,800 --> 00:10:23,839
we move the chart the chart pointer

00:10:23,120 --> 00:10:26,560
magic number

00:10:23,839 --> 00:10:28,000
to a string the integers are also

00:10:26,560 --> 00:10:30,959
defined in the class

00:10:28,000 --> 00:10:33,839
and this double pointer image is not an

00:10:30,959 --> 00:10:33,839
image pointer

00:10:34,800 --> 00:10:38,560
in the same way we need to do the

00:10:36,720 --> 00:10:40,399
function attachment each function that

00:10:38,560 --> 00:10:42,560
you want to use from dc library

00:10:40,399 --> 00:10:45,440
should be called using the ffi attach

00:10:42,560 --> 00:10:47,279
function is this

00:10:45,440 --> 00:10:49,279
and the first parameter is the name of

00:10:47,279 --> 00:10:51,360
the function in ruby

00:10:49,279 --> 00:10:53,600
the second parameter is the name of the

00:10:51,360 --> 00:10:55,440
function in this library

00:10:53,600 --> 00:10:57,839
the third parameter is an array with the

00:10:55,440 --> 00:10:59,760
parameters that we need to send to the

00:10:57,839 --> 00:11:01,200
to the function and finally the fourth

00:10:59,760 --> 00:11:03,440
parameter is

00:11:01,200 --> 00:11:04,399
what our function going to return in

00:11:03,440 --> 00:11:07,200
this case

00:11:04,399 --> 00:11:07,519
all the functions return byte because

00:11:07,200 --> 00:11:10,079
the

00:11:07,519 --> 00:11:11,120
i'm passing by reference the the image

00:11:10,079 --> 00:11:14,240
so i'm going to

00:11:11,120 --> 00:11:15,600
update the values inside the in the same

00:11:14,240 --> 00:11:18,320
variable that i send in

00:11:15,600 --> 00:11:18,320
as parameter

00:11:19,120 --> 00:11:21,920
here you can you can see the difference

00:11:20,959 --> 00:11:23,519
between the original function

00:11:21,920 --> 00:11:26,839
declarations versus the function

00:11:23,519 --> 00:11:28,640
touch attachment in ruby it's pretty

00:11:26,839 --> 00:11:30,480
simple

00:11:28,640 --> 00:11:32,959
and let's see how this works on my

00:11:30,480 --> 00:11:32,959
console

00:11:36,720 --> 00:11:45,519
open example

00:11:42,480 --> 00:11:49,920
in my example folder i have this image

00:11:45,519 --> 00:11:53,040
is a photo from saturn i guess

00:11:49,920 --> 00:11:57,519
and if i open this

00:11:53,040 --> 00:12:01,200
file you can see that it's plain text

00:11:57,519 --> 00:12:01,200
it's the same like the fifth example

00:12:05,279 --> 00:12:12,000
now let's open a bin console

00:12:08,880 --> 00:12:14,079
with the reloaded

00:12:12,000 --> 00:12:15,760
and the first thing that i am going to

00:12:14,079 --> 00:12:18,079
do is to

00:12:15,760 --> 00:12:19,519
create two instances one for the in

00:12:18,079 --> 00:12:22,560
image and one from the

00:12:19,519 --> 00:12:26,320
for the old image so i'm going to do

00:12:22,560 --> 00:12:30,720
pgm equal ptm

00:12:26,320 --> 00:12:30,720
bindings structs

00:12:31,040 --> 00:12:38,720
pgm dot new and

00:12:34,160 --> 00:12:43,200
an instance for the out image pgm out

00:12:38,720 --> 00:12:47,519
equal pgm bindings

00:12:43,200 --> 00:12:47,519
structs pdm

00:12:50,839 --> 00:12:54,480
new

00:12:52,240 --> 00:12:54,480
and

00:12:55,440 --> 00:12:58,560
now we need to load the image on the pgm

00:12:57,839 --> 00:13:00,639
instance

00:12:58,560 --> 00:13:02,320
for this we need to call the load pgn

00:13:00,639 --> 00:13:06,480
method

00:13:02,320 --> 00:13:10,480
i'm going to do pgm

00:13:06,480 --> 00:13:10,880
dot loads pgm and the first parameter is

00:13:10,480 --> 00:13:14,240
the

00:13:10,880 --> 00:13:17,279
pgm instance that i'm going to use to

00:13:14,240 --> 00:13:20,560
to save the the machine memory

00:13:17,279 --> 00:13:21,120
and the path to the image in this case

00:13:20,560 --> 00:13:24,399
it's dot

00:13:21,120 --> 00:13:27,600
slash example slash

00:13:24,399 --> 00:13:30,320
in dot pgm

00:13:27,600 --> 00:13:32,000
and it's loaded now to apply the color

00:13:30,320 --> 00:13:36,079
inverting

00:13:32,000 --> 00:13:36,079
one moment sorry oh no

00:13:38,320 --> 00:13:42,240
to apply the color inverting i'm going

00:13:41,360 --> 00:13:44,959
to call

00:13:42,240 --> 00:13:46,839
the inverse colors function for this i'm

00:13:44,959 --> 00:13:50,720
going to do

00:13:46,839 --> 00:13:54,000
pgm functions

00:13:50,720 --> 00:13:58,000
invert colors pm

00:13:54,000 --> 00:13:58,000
and pgm out

00:13:58,880 --> 00:14:02,160
and we need to save in this the the

00:14:01,279 --> 00:14:07,279
output

00:14:02,160 --> 00:14:07,279
for this we will kill p we call pgm

00:14:10,320 --> 00:14:17,920
functions dot say pgm and

00:14:13,920 --> 00:14:21,279
we will send pgm out

00:14:17,920 --> 00:14:27,120
plus the output path in this case

00:14:21,279 --> 00:14:27,120
example slash o dot pgm

00:14:27,519 --> 00:14:34,720
and let's see in our disk

00:14:32,079 --> 00:14:36,320
here is the output image as you can see

00:14:34,720 --> 00:14:39,199
we are using the

00:14:36,320 --> 00:14:40,240
seal array that we define it the

00:14:39,199 --> 00:14:45,120
implementation

00:14:40,240 --> 00:14:48,320
is inside the it's a directory

00:14:45,120 --> 00:14:49,120
similar to the mk implementation and

00:14:48,320 --> 00:14:52,720
here we have

00:14:49,120 --> 00:14:53,839
a pgm include and the implementation of

00:14:52,720 --> 00:14:56,480
the code

00:14:53,839 --> 00:14:57,519
this code is the dc coding in charge to

00:14:56,480 --> 00:15:00,079
perform the

00:14:57,519 --> 00:15:03,680
invert colors and load the image and we

00:15:00,079 --> 00:15:07,360
are using it inside

00:15:03,680 --> 00:15:09,199
clip in the models

00:15:07,360 --> 00:15:10,720
defined at hearing bindings and

00:15:09,199 --> 00:15:13,279
functions here

00:15:10,720 --> 00:15:15,199
in functions in the function model we

00:15:13,279 --> 00:15:17,839
have the attachments

00:15:15,199 --> 00:15:19,600
in this trucks model we have the stroke

00:15:17,839 --> 00:15:23,199
the stroke mapping

00:15:19,600 --> 00:15:25,199
and we can and we have seen how this

00:15:23,199 --> 00:15:28,880
works

00:15:25,199 --> 00:15:30,800
uh let's continue and that's it

00:15:28,880 --> 00:15:34,000
we have successfully used our compiled

00:15:30,800 --> 00:15:36,880
pgmc library in a ruby code

00:15:34,000 --> 00:15:38,399
in conclusion use mkmf when you need

00:15:36,880 --> 00:15:40,560
total control of your c

00:15:38,399 --> 00:15:42,320
code you are wrapping a little library

00:15:40,560 --> 00:15:43,279
or you don't need to target other ruby

00:15:42,320 --> 00:15:46,720
versions besides

00:15:43,279 --> 00:15:47,199
mri or use ffi if you don't want to

00:15:46,720 --> 00:15:49,759
write c

00:15:47,199 --> 00:15:51,600
code to create the bindings you have a c

00:15:49,759 --> 00:15:52,320
project in another repository or you

00:15:51,600 --> 00:15:55,120
want to

00:15:52,320 --> 00:15:57,199
use a temporary library and also this

00:15:55,120 --> 00:15:59,360
approach is useful if you want to target

00:15:57,199 --> 00:16:02,959
other ruby versions

00:15:59,360 --> 00:16:04,720
besides samurai if you want to play with

00:16:02,959 --> 00:16:08,320
this example the code is available in my

00:16:04,720 --> 00:16:11,120
github account

00:16:08,320 --> 00:16:11,920
and that's it i hope you enjoy it thanks

00:16:11,120 --> 00:16:14,000
for watching

00:16:11,920 --> 00:16:17,440
if you want to chat you can find me as

00:16:14,000 --> 00:16:23,839
juan crg90 in social networks

00:16:17,440 --> 00:16:23,839
and thanks

00:16:26,240 --> 00:16:31,040
thank you juan carlos let's see what we

00:16:30,399 --> 00:16:34,079
have

00:16:31,040 --> 00:16:37,600
in our chat just

00:16:34,079 --> 00:16:41,600
a moment what we can

00:16:37,600 --> 00:16:41,600
see here

00:16:41,839 --> 00:16:48,880
um yes the audience have

00:16:45,199 --> 00:16:52,800
had a little bit problems with the uh

00:16:48,880 --> 00:16:54,240
with the text so don't worry about that

00:16:52,800 --> 00:16:57,519
we are going to send

00:16:54,240 --> 00:17:01,199
the recording of this talk as

00:16:57,519 --> 00:17:04,559
any other talks probably next week or

00:17:01,199 --> 00:17:07,679
week after that so you can see the whole

00:17:04,559 --> 00:17:13,199
whole presentation again a little bit

00:17:07,679 --> 00:17:13,199
uh closer the screen

00:17:14,079 --> 00:17:18,079
oh there's a lots of lots of can you see

00:17:17,439 --> 00:17:21,039
the

00:17:18,079 --> 00:17:23,039
chat yourself there's a lots of uploads

00:17:21,039 --> 00:17:26,880
going on you and thank yous

00:17:23,039 --> 00:17:30,400
for you thank you it was a wonderful

00:17:26,880 --> 00:17:30,400
demo and presentation

00:17:31,200 --> 00:17:36,480
and there's also a little conversation

00:17:34,400 --> 00:17:40,320
about the

00:17:36,480 --> 00:17:45,840
leo and vito is having a

00:17:40,320 --> 00:17:49,120
good comments on that

00:17:45,840 --> 00:17:51,760
yes now

00:17:49,120 --> 00:17:52,320
how often do you need to write code

00:17:51,760 --> 00:17:57,280
using

00:17:52,320 --> 00:17:59,200
ffi yourself in your day job

00:17:57,280 --> 00:18:01,840
uh currently i'm not using it in my day

00:17:59,200 --> 00:18:05,200
job this i started to

00:18:01,840 --> 00:18:08,880
experiment with these kind of libraries

00:18:05,200 --> 00:18:10,799
for hobby i started to to play with ffi

00:18:08,880 --> 00:18:11,520
and after that i moved to webassembly

00:18:10,799 --> 00:18:13,600
that

00:18:11,520 --> 00:18:15,360
started to get some impact in the

00:18:13,600 --> 00:18:18,240
community about

00:18:15,360 --> 00:18:19,679
three years ago but currently i haven't

00:18:18,240 --> 00:18:22,080
had the opportunity to

00:18:19,679 --> 00:18:22,720
to use this in my day-to-day job i'm

00:18:22,080 --> 00:18:25,840
still

00:18:22,720 --> 00:18:28,480
looking for the opportunity

00:18:25,840 --> 00:18:30,240
i'm really interested about this your

00:18:28,480 --> 00:18:34,320
community

00:18:30,240 --> 00:18:35,039
uh work is this something that we can

00:18:34,320 --> 00:18:37,360
shortly

00:18:35,039 --> 00:18:39,039
talk about would you like to tell about

00:18:37,360 --> 00:18:43,440
what your community does

00:18:39,039 --> 00:18:46,480
and why you do the community work and

00:18:43,440 --> 00:18:48,640
feel free to tell us and be an inspiring

00:18:46,480 --> 00:18:51,919
example

00:18:48,640 --> 00:18:53,600
sure uh currently i have a little

00:18:51,919 --> 00:18:54,240
community with some friends here in

00:18:53,600 --> 00:18:57,200
mexico

00:18:54,240 --> 00:18:58,080
called calzada code and we currently

00:18:57,200 --> 00:19:01,360
with the pandemic

00:18:58,080 --> 00:19:01,919
we are we are only making some online

00:19:01,360 --> 00:19:04,960
events

00:19:01,919 --> 00:19:07,280
uh to present some talks and

00:19:04,960 --> 00:19:09,280
about general topics uh related with

00:19:07,280 --> 00:19:12,880
tech not only ruby

00:19:09,280 --> 00:19:16,000
before that we used to to mate

00:19:12,880 --> 00:19:17,039
to make the meaty meet up in in a little

00:19:16,000 --> 00:19:20,400
bar in the city

00:19:17,039 --> 00:19:24,080
with you know people got a human

00:19:20,400 --> 00:19:27,039
human contact but now it's all online

00:19:24,080 --> 00:19:28,880
uh before that i participated in other

00:19:27,039 --> 00:19:31,840
communities also local

00:19:28,880 --> 00:19:33,520
and i had entered in 2019 the

00:19:31,840 --> 00:19:37,360
opportunity to participate in

00:19:33,520 --> 00:19:40,799
in ruby may and ruby me by ruby together

00:19:37,360 --> 00:19:43,200
helping a mentee

00:19:40,799 --> 00:19:43,919
to to learn more about the open source

00:19:43,200 --> 00:19:46,960
create

00:19:43,919 --> 00:19:48,480
taking some some issues from open source

00:19:46,960 --> 00:19:50,400
projects and sending some

00:19:48,480 --> 00:19:52,240
requests and creating new features for

00:19:50,400 --> 00:19:55,600
this for these

00:19:52,240 --> 00:19:57,919
projects and also i

00:19:55,600 --> 00:19:59,039
i love to have the local hacktons that

00:19:57,919 --> 00:20:01,760
we have

00:19:59,039 --> 00:20:02,559
uh here in mexico the the the tech

00:20:01,760 --> 00:20:04,880
ecosystem

00:20:02,559 --> 00:20:06,320
it's still in developing it's still

00:20:04,880 --> 00:20:08,720
growing so

00:20:06,320 --> 00:20:10,640
it's very important for me that the new

00:20:08,720 --> 00:20:12,320
generations learn more about how they

00:20:10,640 --> 00:20:14,480
came to contribute to the

00:20:12,320 --> 00:20:17,679
global community and they learned that

00:20:14,480 --> 00:20:20,000
this this kind of

00:20:17,679 --> 00:20:22,320
this kind of communities are so

00:20:20,000 --> 00:20:26,000
important for them and they can to

00:20:22,320 --> 00:20:28,559
contribute an impact level yeah

00:20:26,000 --> 00:20:29,840
so this should be an example to

00:20:28,559 --> 00:20:33,200
everybody since

00:20:29,840 --> 00:20:36,320
as my work i also see how great

00:20:33,200 --> 00:20:37,840
impact leaders like juan carlos in

00:20:36,320 --> 00:20:40,559
community makes

00:20:37,840 --> 00:20:41,440
into people's life so this is a really

00:20:40,559 --> 00:20:43,840
important work

00:20:41,440 --> 00:20:46,640
and i'd like to thank you for all your

00:20:43,840 --> 00:20:49,280
community work that you are doing

00:20:46,640 --> 00:20:50,159
we are having uh one new question here

00:20:49,280 --> 00:20:53,360
if you are

00:20:50,159 --> 00:20:57,440
using ffyi in your

00:20:53,360 --> 00:20:57,440
gem should you bundle this

00:20:57,600 --> 00:21:05,039
source library in the gem

00:21:01,280 --> 00:21:07,440
um in my in my test i have

00:21:05,039 --> 00:21:08,159
bundled the source uh currently i

00:21:07,440 --> 00:21:10,559
haven't tried

00:21:08,159 --> 00:21:11,520
to to get the this sort from another

00:21:10,559 --> 00:21:14,320
place but it

00:21:11,520 --> 00:21:16,080
this should be valid you could use a

00:21:14,320 --> 00:21:20,159
gitsub model maybe

00:21:16,080 --> 00:21:22,559
and get the and get this model and

00:21:20,159 --> 00:21:24,159
and get this model with a ruby command

00:21:22,559 --> 00:21:25,919
or maybe a bash command before

00:21:24,159 --> 00:21:27,760
start to compile it you need to compile

00:21:25,919 --> 00:21:28,240
the extension to the architecture of

00:21:27,760 --> 00:21:30,720
your

00:21:28,240 --> 00:21:31,520
computer so it's important to get the

00:21:30,720 --> 00:21:33,600
source code the

00:21:31,520 --> 00:21:36,559
c source code in your your machine

00:21:33,600 --> 00:21:40,000
before start to use it

00:21:36,559 --> 00:21:43,120
there's one comment in in stream chat

00:21:40,000 --> 00:21:45,919
oh sure ffi as a

00:21:43,120 --> 00:21:46,880
hobby juan carlos is making us lesser

00:21:45,919 --> 00:21:50,080
ones look

00:21:46,880 --> 00:21:53,600
lazy thank you for the

00:21:50,080 --> 00:21:57,200
talk and obvious precious also uh

00:21:53,600 --> 00:22:00,799
one question here also a long time ago

00:21:57,200 --> 00:22:01,919
i heard that using c objects in ruby

00:22:00,799 --> 00:22:04,960
might lead to

00:22:01,919 --> 00:22:07,679
gc not being able to raise

00:22:04,960 --> 00:22:08,559
release them is it the problem with the

00:22:07,679 --> 00:22:12,000
ffi

00:22:08,559 --> 00:22:15,039
or mkmf are there some ways

00:22:12,000 --> 00:22:15,039
to avoid it

00:22:15,840 --> 00:22:19,760
i have understand that in the case of

00:22:18,400 --> 00:22:23,200
mkmf you need to

00:22:19,760 --> 00:22:26,880
handle of the memory by by your hand

00:22:23,200 --> 00:22:30,000
and your in c graph of ffi

00:22:26,880 --> 00:22:32,320
i read something about that you

00:22:30,000 --> 00:22:33,919
that if i helped you to with the garbage

00:22:32,320 --> 00:22:35,520
collection but i'm not totally sure what

00:22:33,919 --> 00:22:40,159
is the level of the

00:22:35,520 --> 00:22:43,039
of the i'm not sure how to say it

00:22:40,159 --> 00:22:43,919
what is the level that ffi helps in this

00:22:43,039 --> 00:22:46,960
in this task

00:22:43,919 --> 00:22:48,480
i'm not sure if with uh with memory

00:22:46,960 --> 00:22:51,760
leaks you need to do

00:22:48,480 --> 00:22:55,120
do something additional when i start to

00:22:51,760 --> 00:22:56,000
to practicing with this i met my first

00:22:55,120 --> 00:22:59,120
concern was

00:22:56,000 --> 00:23:01,360
i i'm not using the free free free pgm

00:22:59,120 --> 00:23:02,320
image in my code that i need to use it

00:23:01,360 --> 00:23:05,840
directly when i

00:23:02,320 --> 00:23:07,280
i'm working with c so i maybe i need to

00:23:05,840 --> 00:23:09,919
investigate a little bit more but

00:23:07,280 --> 00:23:11,440
i understand that ffi makes makes more

00:23:09,919 --> 00:23:16,320
of the work

00:23:11,440 --> 00:23:19,520
yeah thank you

00:23:16,320 --> 00:23:22,080
thank you juan carlos and as said you

00:23:19,520 --> 00:23:24,720
are going to receive all the recordings

00:23:22,080 --> 00:23:27,760
on next week or maybe after that

00:23:24,720 --> 00:23:31,120
so hope to see you juan carlos in stream

00:23:27,760 --> 00:23:32,159
chat or discord later also so we can

00:23:31,120 --> 00:23:36,400
continue the

00:23:32,159 --> 00:23:36,400

YouTube URL: https://www.youtube.com/watch?v=75bAbaUu5jI


