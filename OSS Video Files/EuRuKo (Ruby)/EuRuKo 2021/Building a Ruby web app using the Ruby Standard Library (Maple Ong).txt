Title: Building a Ruby web app using the Ruby Standard Library (Maple Ong)
Publication date: 2021-06-03
Playlist: Euruko 2021 - Day 2
Description: 
	Do you want to understand how a web application works without Rails magic? Let’s go back to the basics of a web application and build one from the ground up using Ruby Standard Library. After this session, you’ll appreciate Rails that much more.
Captions: 
	00:00:00,799 --> 00:00:06,799
our next speaker is

00:00:03,120 --> 00:00:07,919
mabel ong and the topic is building a

00:00:06,799 --> 00:00:11,759
ruby web app

00:00:07,919 --> 00:00:14,240
using the ruby standard library

00:00:11,759 --> 00:00:15,759
do you want to understand how a web

00:00:14,240 --> 00:00:18,960
application works

00:00:15,759 --> 00:00:21,359
without braille's magic let's go back

00:00:18,960 --> 00:00:24,320
to the basics of the web application and

00:00:21,359 --> 00:00:26,240
build one from the ground up using ruby

00:00:24,320 --> 00:00:28,840
standard library

00:00:26,240 --> 00:00:30,000
after this session you'll appreciate

00:00:28,840 --> 00:00:34,640
rails

00:00:30,000 --> 00:00:37,440
that much more and about our speaker

00:00:34,640 --> 00:00:38,000
mabel is yet another software developer

00:00:37,440 --> 00:00:41,040
who made

00:00:38,000 --> 00:00:44,480
it without a formal education

00:00:41,040 --> 00:00:47,760
in cs she currently works

00:00:44,480 --> 00:00:53,039
at the truffle ruby team at shopify

00:00:47,760 --> 00:00:53,039
where speedy roof gold isn't a fantasy

00:00:53,120 --> 00:00:56,960
previously maple worked on backwork a

00:00:56,000 --> 00:00:59,879
ruby gem

00:00:56,960 --> 00:01:01,840
to enforce modularity in rails

00:00:59,879 --> 00:01:05,519
applications

00:01:01,840 --> 00:01:09,040
you will find our lovely speaker

00:01:05,519 --> 00:01:12,479
at twitter by from handel using handle

00:01:09,040 --> 00:01:18,400
on mabel but we drop this to

00:01:12,479 --> 00:01:18,400
stream chat mabel the floor is yours

00:01:23,119 --> 00:01:29,439
oh hello there hi everyone

00:01:26,640 --> 00:01:29,920
welcome to the talk uh today we'll be

00:01:29,439 --> 00:01:32,640
building

00:01:29,920 --> 00:01:34,240
a web app using ruby i was just kidding

00:01:32,640 --> 00:01:35,280
about that i would not you know look at

00:01:34,240 --> 00:01:38,640
my phone in real life

00:01:35,280 --> 00:01:42,159
so so

00:01:38,640 --> 00:01:43,119
just to be clear uh this talk is uh not

00:01:42,159 --> 00:01:45,119
how to build

00:01:43,119 --> 00:01:47,920
a web app for your startup you can just

00:01:45,119 --> 00:01:50,479
use rails they have awesome guides

00:01:47,920 --> 00:01:52,640
this is also not a tutorial on how to

00:01:50,479 --> 00:01:54,880
write ruby code because i'm gonna assume

00:01:52,640 --> 00:01:57,439
that you have some experience

00:01:54,880 --> 00:01:59,840
reading and writing ruby code already

00:01:57,439 --> 00:02:02,560
and lastly we're not going to go into

00:01:59,840 --> 00:02:04,399
complex web application concepts this is

00:02:02,560 --> 00:02:08,080
going to be a foundational

00:02:04,399 --> 00:02:10,399
talk so with that being said

00:02:08,080 --> 00:02:12,640
we'll learn about networking protocols

00:02:10,399 --> 00:02:15,280
so ip and tcp

00:02:12,640 --> 00:02:17,040
http messaging and data store and

00:02:15,280 --> 00:02:19,280
persistency

00:02:17,040 --> 00:02:20,720
so just a quick introduction to me my

00:02:19,280 --> 00:02:23,440
name is maple

00:02:20,720 --> 00:02:24,239
um this is the picture that we have off

00:02:23,440 --> 00:02:25,760
on the site

00:02:24,239 --> 00:02:28,160
i'm actually not that serious in real

00:02:25,760 --> 00:02:31,280
life um right now i live

00:02:28,160 --> 00:02:35,040
in waterloo ontario canada

00:02:31,280 --> 00:02:37,599
it's around an hour away from toronto

00:02:35,040 --> 00:02:38,800
um so i don't have a cs degree i

00:02:37,599 --> 00:02:40,480
actually went to school

00:02:38,800 --> 00:02:42,800
for health sciences and only learned

00:02:40,480 --> 00:02:45,920
programming in my last year of undergrad

00:02:42,800 --> 00:02:47,840
uh but i currently work uh on the code

00:02:45,920 --> 00:02:50,000
foundations team at shopify which

00:02:47,840 --> 00:02:52,800
with a bunch of cool people more

00:02:50,000 --> 00:02:54,560
specifically i work on shuffle ruby

00:02:52,800 --> 00:02:57,519
truffle ruby if you didn't know is a

00:02:54,560 --> 00:03:00,080
high performance ruby implementation

00:02:57,519 --> 00:03:02,640
very much like mri or jruby

00:03:00,080 --> 00:03:03,599
it's built on the truffle language

00:03:02,640 --> 00:03:06,800
implementation

00:03:03,599 --> 00:03:08,239
and framework and growl vm essentially

00:03:06,800 --> 00:03:10,080
what we're trying to do is

00:03:08,239 --> 00:03:12,480
optimize it on production level code

00:03:10,080 --> 00:03:14,720
which is pretty fun

00:03:12,480 --> 00:03:16,239
outside of work i really enjoy working

00:03:14,720 --> 00:03:18,720
on training

00:03:16,239 --> 00:03:19,280
which is why i chose our web hub today

00:03:18,720 --> 00:03:22,319
to be

00:03:19,280 --> 00:03:23,360
a step tracker so this is what we'll be

00:03:22,319 --> 00:03:25,519
building today

00:03:23,360 --> 00:03:26,400
if you're a fitness enthusiast like me

00:03:25,519 --> 00:03:27,920
you will know that

00:03:26,400 --> 00:03:29,680
tracking your daily steps is a good way

00:03:27,920 --> 00:03:30,000
to do informal cardio especially if you

00:03:29,680 --> 00:03:33,040
don't

00:03:30,000 --> 00:03:36,480
enjoy cardio very much i also team

00:03:33,040 --> 00:03:39,440
10 000 steps a day at least um

00:03:36,480 --> 00:03:40,239
you can find me walking on my under desk

00:03:39,440 --> 00:03:44,080
treadmill

00:03:40,239 --> 00:03:46,239
during meetings um so obviously i'm no

00:03:44,080 --> 00:03:48,080
designer but the point of this is to

00:03:46,239 --> 00:03:49,760
keep it super simple and we're gonna try

00:03:48,080 --> 00:03:53,360
to focus on the concepts of

00:03:49,760 --> 00:03:54,879
um web applications and keep it simple

00:03:53,360 --> 00:03:57,120
silly

00:03:54,879 --> 00:03:58,080
so what we want our web up to do is to

00:03:57,120 --> 00:04:00,319
record the

00:03:58,080 --> 00:04:02,480
date and the amount of steps per day and

00:04:00,319 --> 00:04:06,799
display it on the main page for

00:04:02,480 --> 00:04:08,879
everyone to see so right before we begin

00:04:06,799 --> 00:04:10,640
quick disclaimer uh i won't be able to

00:04:08,879 --> 00:04:13,040
cover every single detail in this talk

00:04:10,640 --> 00:04:15,519
however i highly encourage you

00:04:13,040 --> 00:04:16,079
to dig into documentation and source

00:04:15,519 --> 00:04:18,799
code

00:04:16,079 --> 00:04:19,359
by yourself if you're curious about any

00:04:18,799 --> 00:04:21,919
detail

00:04:19,359 --> 00:04:23,199
i've mentioned i will also be sharing

00:04:21,919 --> 00:04:25,440
the link to this

00:04:23,199 --> 00:04:26,880
link to the slides and the slides will

00:04:25,440 --> 00:04:28,800
contain

00:04:26,880 --> 00:04:31,360
you know links i found helpful when i

00:04:28,800 --> 00:04:34,960
was writing this talk

00:04:31,360 --> 00:04:37,919
so let's get started and start down low

00:04:34,960 --> 00:04:38,240
how applications communicate so just

00:04:37,919 --> 00:04:40,960
like

00:04:38,240 --> 00:04:43,120
humans use languages to speak computers

00:04:40,960 --> 00:04:46,560
do the same just using various

00:04:43,120 --> 00:04:49,520
levels of communications protocol

00:04:46,560 --> 00:04:50,160
so at the lower end of the networking

00:04:49,520 --> 00:04:52,479
stack

00:04:50,160 --> 00:04:56,720
we have the internet protocol which is

00:04:52,479 --> 00:04:58,639
within the network layer we have tcp

00:04:56,720 --> 00:05:01,280
within the transport layer and on top of

00:04:58,639 --> 00:05:03,520
that we have http

00:05:01,280 --> 00:05:05,039
within the application layer so we'll be

00:05:03,520 --> 00:05:07,680
talking about all three layers

00:05:05,039 --> 00:05:07,680
in this talk

00:05:08,720 --> 00:05:13,120
so within the ip level or the internet

00:05:11,759 --> 00:05:15,039
protocol level

00:05:13,120 --> 00:05:17,680
little packets are delivered from the

00:05:15,039 --> 00:05:19,360
source to the destination your computer

00:05:17,680 --> 00:05:21,919
and that's basically how you get the

00:05:19,360 --> 00:05:24,000
internet that's a while right

00:05:21,919 --> 00:05:26,000
iv packet delivery is generally

00:05:24,000 --> 00:05:28,240
unreliable though because it might take

00:05:26,000 --> 00:05:29,120
different network routes to get to the

00:05:28,240 --> 00:05:31,199
destination

00:05:29,120 --> 00:05:32,400
and even then packets might arrive out

00:05:31,199 --> 00:05:35,360
of order

00:05:32,400 --> 00:05:37,120
so to overcome this unreliability issue

00:05:35,360 --> 00:05:39,440
two protocols were created and one of

00:05:37,120 --> 00:05:41,759
them was tcp

00:05:39,440 --> 00:05:43,759
in order to create a more stable and

00:05:41,759 --> 00:05:45,680
reliable network

00:05:43,759 --> 00:05:47,919
uh the other one is udp but for this

00:05:45,680 --> 00:05:49,360
talk we'll focus on tcp because that's

00:05:47,919 --> 00:05:51,759
how our web application server

00:05:49,360 --> 00:05:55,440
communicates with the client

00:05:51,759 --> 00:05:57,680
the tcp provides a layer of instructions

00:05:55,440 --> 00:05:59,520
on top of ip to be more reliable as i

00:05:57,680 --> 00:06:02,319
mentioned and for example

00:05:59,520 --> 00:06:03,360
the sender can add an incrementing

00:06:02,319 --> 00:06:06,319
number with each

00:06:03,360 --> 00:06:08,639
ip packet and the packets are then

00:06:06,319 --> 00:06:12,479
reassembled in order once they arrive

00:06:08,639 --> 00:06:14,000
at the destination tcp uh also provides

00:06:12,479 --> 00:06:16,800
a level of error control

00:06:14,000 --> 00:06:17,600
where a mandatory field is sent and then

00:06:16,800 --> 00:06:20,800
checked for

00:06:17,600 --> 00:06:22,720
corruption at its destination the

00:06:20,800 --> 00:06:24,720
protocol then is able to throw out any

00:06:22,720 --> 00:06:27,680
packets if it's corrupted so that

00:06:24,720 --> 00:06:28,800
you know we or the web application won't

00:06:27,680 --> 00:06:32,000
have to worry about

00:06:28,800 --> 00:06:35,199
handling any corrupted data

00:06:32,000 --> 00:06:36,400
so in order to use tcp uh we have to

00:06:35,199 --> 00:06:39,600
first establish

00:06:36,400 --> 00:06:41,759
a connection between the host and the

00:06:39,600 --> 00:06:44,319
client through a port

00:06:41,759 --> 00:06:44,880
there's actually a directory of port

00:06:44,319 --> 00:06:46,479
numbers

00:06:44,880 --> 00:06:49,120
for different types of applications so

00:06:46,479 --> 00:06:50,880
for example the port number for simple

00:06:49,120 --> 00:06:54,800
mail transfer protocol

00:06:50,880 --> 00:06:57,440
smtp is 25 so that is the port number

00:06:54,800 --> 00:06:59,120
used to connect to an email server

00:06:57,440 --> 00:07:00,840
there's actually a link to the directory

00:06:59,120 --> 00:07:02,240
and the slides if you're curious about

00:07:00,840 --> 00:07:04,319
that

00:07:02,240 --> 00:07:06,160
so in order for a tcp connection to

00:07:04,319 --> 00:07:07,199
occur between the web application which

00:07:06,160 --> 00:07:09,759
is your backend

00:07:07,199 --> 00:07:11,840
and then the client which is the browser

00:07:09,759 --> 00:07:13,440
a socket must be created

00:07:11,840 --> 00:07:15,360
and that's how a server listens for

00:07:13,440 --> 00:07:16,960
incoming connections so once a

00:07:15,360 --> 00:07:17,840
connection is established between the

00:07:16,960 --> 00:07:20,639
server and client

00:07:17,840 --> 00:07:22,400
the socket turns into a client socket a

00:07:20,639 --> 00:07:23,840
client socket is then how the server can

00:07:22,400 --> 00:07:26,240
share information with the client and

00:07:23,840 --> 00:07:28,160
vice versa

00:07:26,240 --> 00:07:29,360
so let's try writing this in ruby so

00:07:28,160 --> 00:07:32,319
thankfully

00:07:29,360 --> 00:07:34,240
a ruby library called socket exists uh

00:07:32,319 --> 00:07:34,880
socket is the library that talks to the

00:07:34,240 --> 00:07:37,520
tcp

00:07:34,880 --> 00:07:38,240
implementation built into the operating

00:07:37,520 --> 00:07:39,919
system

00:07:38,240 --> 00:07:41,520
and provides us with a good api to

00:07:39,919 --> 00:07:44,319
create sockets

00:07:41,520 --> 00:07:45,840
so let's take a look at our first code

00:07:44,319 --> 00:07:48,479
example

00:07:45,840 --> 00:07:51,199
the goal is to write a service that

00:07:48,479 --> 00:07:54,400
returns the same information

00:07:51,199 --> 00:07:57,599
as the input to the client but louder

00:07:54,400 --> 00:07:58,319
so let's walk through it first we'll

00:07:57,599 --> 00:08:02,240
require

00:07:58,319 --> 00:08:02,240
uh the ruby library socket

00:08:02,319 --> 00:08:06,879
and we'll use the tcp tcp server class

00:08:05,360 --> 00:08:10,479
to create a tcp server

00:08:06,879 --> 00:08:12,720
at port 9999 in a loop

00:08:10,479 --> 00:08:14,240
we'll accept any connections to the

00:08:12,720 --> 00:08:17,280
server

00:08:14,240 --> 00:08:20,080
and once the connection is established

00:08:17,280 --> 00:08:22,560
um it's assigned to the client variable

00:08:20,080 --> 00:08:24,479
which represents a client socket

00:08:22,560 --> 00:08:25,840
so after that we'll create another while

00:08:24,479 --> 00:08:27,199
loop that

00:08:25,840 --> 00:08:29,759
takes in any lines of text from the

00:08:27,199 --> 00:08:31,840
socket and through the get method

00:08:29,759 --> 00:08:33,599
and add some exclamation points to it

00:08:31,840 --> 00:08:34,080
and then spit it back to the client with

00:08:33,599 --> 00:08:36,399
a

00:08:34,080 --> 00:08:38,159
put statement and then after that we

00:08:36,399 --> 00:08:41,440
close the client socket

00:08:38,159 --> 00:08:42,479
and that's the end of the loop so let's

00:08:41,440 --> 00:08:46,240
try to

00:08:42,479 --> 00:08:49,279
run let's run this and then use netcat

00:08:46,240 --> 00:08:53,519
to connect to it so uh

00:08:49,279 --> 00:08:55,600
netcat is a command line tool um

00:08:53,519 --> 00:08:57,360
it's a commanding tool for tcp client

00:08:55,600 --> 00:08:58,080
and we can create tcp connections using

00:08:57,360 --> 00:09:00,320
netcat

00:08:58,080 --> 00:09:01,519
just from uh the terminal so we're going

00:09:00,320 --> 00:09:05,519
to use uh

00:09:01,519 --> 00:09:07,680
netcat or nc uh to connect to the server

00:09:05,519 --> 00:09:08,800
so you can see here i'm just running the

00:09:07,680 --> 00:09:10,480
file

00:09:08,800 --> 00:09:12,320
with the code that we just wrote and

00:09:10,480 --> 00:09:13,839
here we're connecting using netcat to

00:09:12,320 --> 00:09:14,720
the localhost which is where the server

00:09:13,839 --> 00:09:17,040
is hosted

00:09:14,720 --> 00:09:18,399
and then the port number and then we're

00:09:17,040 --> 00:09:22,240
just going to enter

00:09:18,399 --> 00:09:22,640
some text and you can see it returns

00:09:22,240 --> 00:09:25,519
with

00:09:22,640 --> 00:09:25,519
exclamation points

00:09:28,160 --> 00:09:31,120
um so

00:09:32,720 --> 00:09:36,080
now that we have a way of communicating

00:09:34,640 --> 00:09:37,519
with the rest of the world let's go a

00:09:36,080 --> 00:09:40,160
level higher

00:09:37,519 --> 00:09:41,680
so just for the record again uh we're

00:09:40,160 --> 00:09:42,399
sending messages to the client socket

00:09:41,680 --> 00:09:45,680
but it's not

00:09:42,399 --> 00:09:46,959
really a web client or a browser so

00:09:45,680 --> 00:09:48,720
let's see how we can actually send

00:09:46,959 --> 00:09:50,640
messages to a browser this time

00:09:48,720 --> 00:09:52,560
so think about what we have right now

00:09:50,640 --> 00:09:55,680
you can essentially send and receive

00:09:52,560 --> 00:09:58,080
streams of informations or bytes between

00:09:55,680 --> 00:09:58,959
the server and the client but since that

00:09:58,080 --> 00:10:01,279
information can

00:09:58,959 --> 00:10:03,040
literally be anything you can see that

00:10:01,279 --> 00:10:04,720
there might be an incompatibility

00:10:03,040 --> 00:10:06,720
problem so

00:10:04,720 --> 00:10:08,480
we can have a browser client read and

00:10:06,720 --> 00:10:11,519
write information to the server

00:10:08,480 --> 00:10:13,440
but if other servers all deliver

00:10:11,519 --> 00:10:15,839
their information in a different

00:10:13,440 --> 00:10:16,959
structure or way

00:10:15,839 --> 00:10:18,880
we're going to have a problem because

00:10:16,959 --> 00:10:19,360
now the browser doesn't how would a

00:10:18,880 --> 00:10:22,240
browser

00:10:19,360 --> 00:10:24,000
communicate with all those other servers

00:10:22,240 --> 00:10:25,519
there has to be a standardized way of

00:10:24,000 --> 00:10:27,360
sending and receiving

00:10:25,519 --> 00:10:29,279
information we can't just stream the

00:10:27,360 --> 00:10:31,040
packets to tcp there must be a way to

00:10:29,279 --> 00:10:35,279
structure that information

00:10:31,040 --> 00:10:38,320
and that's where http was born

00:10:35,279 --> 00:10:41,440
http or hypertext

00:10:38,320 --> 00:10:44,399
transfer protocol is yet another layer

00:10:41,440 --> 00:10:46,079
on top of our network stack in fact

00:10:44,399 --> 00:10:47,920
we're now in the application layer

00:10:46,079 --> 00:10:49,279
and it's called the application layer

00:10:47,920 --> 00:10:52,079
because http

00:10:49,279 --> 00:10:54,240
messages come directly to and from the

00:10:52,079 --> 00:10:57,839
application

00:10:54,240 --> 00:11:00,399
um the http protocol is built on top of

00:10:57,839 --> 00:11:01,760
application agnostic tcp meaning that

00:11:00,399 --> 00:11:03,440
tcp can be used

00:11:01,760 --> 00:11:05,040
in any type of application and not just

00:11:03,440 --> 00:11:07,040
the web

00:11:05,040 --> 00:11:08,959
tcp is also implemented in the operating

00:11:07,040 --> 00:11:10,240
system as i mentioned before but we can

00:11:08,959 --> 00:11:13,920
actually implement

00:11:10,240 --> 00:11:15,120
http in ruby and just for the record

00:11:13,920 --> 00:11:17,200
there are definitely

00:11:15,120 --> 00:11:18,399
ruby libraries out there such as nat

00:11:17,200 --> 00:11:20,480
http

00:11:18,399 --> 00:11:21,920
uh we can use to implement http but

00:11:20,480 --> 00:11:23,680
we're just doing it ourselves

00:11:21,920 --> 00:11:25,839
because we're gonna learn about it and

00:11:23,680 --> 00:11:27,760
we're gonna like learning about it

00:11:25,839 --> 00:11:30,880
um one important note that really helped

00:11:27,760 --> 00:11:32,320
me understand uh what http was

00:11:30,880 --> 00:11:34,320
and cleared up a lot of confusion when i

00:11:32,320 --> 00:11:36,560
was learning it is that http actually

00:11:34,320 --> 00:11:39,200
does not represent any physical code

00:11:36,560 --> 00:11:41,200
instead it's just a description of the

00:11:39,200 --> 00:11:43,440
structure of the message that everyone

00:11:41,200 --> 00:11:46,320
agreed to use as a standard

00:11:43,440 --> 00:11:47,519
http is a specification and we use the

00:11:46,320 --> 00:11:49,360
code to parse

00:11:47,519 --> 00:11:50,560
and structure the message according to

00:11:49,360 --> 00:11:53,360
the specifications

00:11:50,560 --> 00:11:53,360
of the protocol

00:11:53,600 --> 00:11:58,000
so http communication can be broken down

00:11:56,800 --> 00:12:01,680
into two types so

00:11:58,000 --> 00:12:02,560
requests and responses a client can make

00:12:01,680 --> 00:12:04,399
a request

00:12:02,560 --> 00:12:05,680
to the server and then the server can

00:12:04,399 --> 00:12:10,320
return with

00:12:05,680 --> 00:12:12,880
a response but every single http message

00:12:10,320 --> 00:12:14,639
has the same structure so it starts with

00:12:12,880 --> 00:12:17,279
a start line

00:12:14,639 --> 00:12:17,760
header fields it can be zero more a

00:12:17,279 --> 00:12:20,240
blank

00:12:17,760 --> 00:12:21,839
line and then an optional message body

00:12:20,240 --> 00:12:25,600
that usually contains

00:12:21,839 --> 00:12:28,480
the html code so um

00:12:25,600 --> 00:12:28,959
i guess i really want to explain why

00:12:28,480 --> 00:12:31,200
there's an

00:12:28,959 --> 00:12:32,560
alien being there but i mean after i

00:12:31,200 --> 00:12:35,360
talked about the structure

00:12:32,560 --> 00:12:36,880
maybe you can see why i drew that alien

00:12:35,360 --> 00:12:40,000
there

00:12:36,880 --> 00:12:41,920
um so the difference between the

00:12:40,000 --> 00:12:43,519
uh request and response message is

00:12:41,920 --> 00:12:44,399
actually at the start line so the first

00:12:43,519 --> 00:12:46,560
line

00:12:44,399 --> 00:12:47,920
um the start line for requests is called

00:12:46,560 --> 00:12:49,120
the request line

00:12:47,920 --> 00:12:53,440
and then the start line for the

00:12:49,120 --> 00:12:55,680
responses are called the status line

00:12:53,440 --> 00:12:57,279
so here we have an example of the start

00:12:55,680 --> 00:12:59,839
line for both

00:12:57,279 --> 00:13:02,160
requests and responses the request line

00:12:59,839 --> 00:13:03,920
for http can be broken down into the

00:13:02,160 --> 00:13:06,320
method token

00:13:03,920 --> 00:13:07,200
the request path and the http version

00:13:06,320 --> 00:13:09,440
version

00:13:07,200 --> 00:13:11,120
so in this example you can see that the

00:13:09,440 --> 00:13:12,959
method token is get

00:13:11,120 --> 00:13:15,200
the request path is hello there and an

00:13:12,959 --> 00:13:17,680
http version is 1.1

00:13:15,200 --> 00:13:20,639
so there are several types of method

00:13:17,680 --> 00:13:22,320
tokens or what we call request methods

00:13:20,639 --> 00:13:23,680
the ones we'll be using in this talk is

00:13:22,320 --> 00:13:25,839
get and post

00:13:23,680 --> 00:13:27,440
a get request is when an information is

00:13:25,839 --> 00:13:29,920
requested from the server

00:13:27,440 --> 00:13:32,240
while a post request is when information

00:13:29,920 --> 00:13:33,440
is sent back to server or posted to the

00:13:32,240 --> 00:13:36,160
server

00:13:33,440 --> 00:13:37,519
and somehow maybe modifies the database

00:13:36,160 --> 00:13:40,560
there are also other types of methods

00:13:37,519 --> 00:13:40,560
such as put and delete

00:13:40,639 --> 00:13:47,519
so go moving to http response

00:13:44,240 --> 00:13:49,040
the status line in http response can be

00:13:47,519 --> 00:13:51,440
broken down into

00:13:49,040 --> 00:13:54,000
the version number of http that somehow

00:13:51,440 --> 00:13:54,000
comes first

00:13:54,240 --> 00:13:58,880
the numeric status code in this case is

00:13:57,680 --> 00:14:02,160
200 and then

00:13:58,880 --> 00:14:04,240
the status description which is okay

00:14:02,160 --> 00:14:05,839
so there are other status codes as well

00:14:04,240 --> 00:14:09,839
the most common

00:14:05,839 --> 00:14:11,120
common one is 404 error or 404 page not

00:14:09,839 --> 00:14:12,560
found

00:14:11,120 --> 00:14:14,959
you probably remember it because it's

00:14:12,560 --> 00:14:17,440
very frustrating to see it

00:14:14,959 --> 00:14:18,959
the number itself actually categorizes

00:14:17,440 --> 00:14:22,079
the type of statuses

00:14:18,959 --> 00:14:25,360
so for example status codes 200

00:14:22,079 --> 00:14:27,360
larger indicates a success 300 or larger

00:14:25,360 --> 00:14:30,000
indicates a redirection

00:14:27,360 --> 00:14:32,079
to perhaps a different page 400 or

00:14:30,000 --> 00:14:34,800
larger indicates a client side error

00:14:32,079 --> 00:14:36,880
and lastly 500 or larger indicates a

00:14:34,800 --> 00:14:40,320
server side error

00:14:36,880 --> 00:14:43,199
like a server timeout so let's take a

00:14:40,320 --> 00:14:47,199
look at a real example of

00:14:43,199 --> 00:14:50,480
an http request um so we can get this

00:14:47,199 --> 00:14:51,360
by using netcat again with the l flag to

00:14:50,480 --> 00:14:54,639
listen for

00:14:51,360 --> 00:14:56,079
uh any incoming connections so in this

00:14:54,639 --> 00:14:57,519
case we're look we're listening on

00:14:56,079 --> 00:15:00,800
localhost at port

00:14:57,519 --> 00:15:03,839
nine nine nine nine

00:15:00,800 --> 00:15:06,240
okay so so this is

00:15:03,839 --> 00:15:07,600
a request and you can see the first line

00:15:06,240 --> 00:15:10,720
uh it's a post request

00:15:07,600 --> 00:15:13,040
to the target path uh add data and then

00:15:10,720 --> 00:15:14,639
the http version is 1.1

00:15:13,040 --> 00:15:16,399
and then you see a bunch of header

00:15:14,639 --> 00:15:17,440
fields that look very familiar

00:15:16,399 --> 00:15:20,160
structurally

00:15:17,440 --> 00:15:20,720
you can see that it's the header name

00:15:20,160 --> 00:15:22,800
colon

00:15:20,720 --> 00:15:25,680
space and then the value of the header

00:15:22,800 --> 00:15:29,120
it's very much like a ruby hash

00:15:25,680 --> 00:15:32,320
and lastly we have a blank line

00:15:29,120 --> 00:15:36,079
and then a message body so

00:15:32,320 --> 00:15:38,560
let's move on to our next code sample

00:15:36,079 --> 00:15:39,759
we'll try to receive and send simple

00:15:38,560 --> 00:15:43,360
html

00:15:39,759 --> 00:15:45,360
so html is another way to describe a

00:15:43,360 --> 00:15:46,959
formatted and interactive document using

00:15:45,360 --> 00:15:50,000
plain text

00:15:46,959 --> 00:15:52,959
just like the browser knows how to use

00:15:50,000 --> 00:15:54,000
the http protocol it also knows how to

00:15:52,959 --> 00:15:57,440
parse and display

00:15:54,000 --> 00:16:00,480
html to the users

00:15:57,440 --> 00:16:02,000
let's um take a look so

00:16:00,480 --> 00:16:04,560
don't feel overwhelmed we're going to go

00:16:02,000 --> 00:16:05,839
through it but the goal as i said before

00:16:04,560 --> 00:16:07,360
is to accept and parse

00:16:05,839 --> 00:16:11,199
a request and then send it back to the

00:16:07,360 --> 00:16:14,000
browser to display the simple html

00:16:11,199 --> 00:16:14,800
so the first thing we want to do is

00:16:14,000 --> 00:16:17,839
instead of just

00:16:14,800 --> 00:16:20,079
reading the client

00:16:17,839 --> 00:16:21,519
input we're actually going to take it

00:16:20,079 --> 00:16:25,199
because we know it's coming from a

00:16:21,519 --> 00:16:27,680
browser now and split it up into our

00:16:25,199 --> 00:16:29,360
three items for the start line so that's

00:16:27,680 --> 00:16:33,920
the method token

00:16:29,360 --> 00:16:33,920
the target and the http version number

00:16:34,839 --> 00:16:40,240
oopsie okay next

00:16:38,240 --> 00:16:42,000
uh we're gonna decide what to do with it

00:16:40,240 --> 00:16:42,959
because now we have the method token a

00:16:42,000 --> 00:16:45,600
target

00:16:42,959 --> 00:16:46,959
um so in the case where the method token

00:16:45,600 --> 00:16:48,959
is a get request

00:16:46,959 --> 00:16:50,720
and the target is show data which is

00:16:48,959 --> 00:16:53,040
going to be our main page

00:16:50,720 --> 00:16:56,320
we are going to craft the respond

00:16:53,040 --> 00:17:00,800
response message to say hello world

00:16:56,320 --> 00:17:03,360
in html header1 and for any other

00:17:00,800 --> 00:17:04,000
combination of method token and target

00:17:03,360 --> 00:17:07,919
we're going to say

00:17:04,000 --> 00:17:07,919
it didn't hit any endpoints and shrug

00:17:08,400 --> 00:17:13,280
and we're going to put together

00:17:11,439 --> 00:17:15,439
the http response because now we know

00:17:13,280 --> 00:17:17,280
what the response message is going to be

00:17:15,439 --> 00:17:18,480
so you can see here it's exactly the

00:17:17,280 --> 00:17:20,640
same structure as

00:17:18,480 --> 00:17:23,600
we've seen before the first line is the

00:17:20,640 --> 00:17:27,520
status line which is http 1.1

00:17:23,600 --> 00:17:28,160
status code 200 okay the content type is

00:17:27,520 --> 00:17:30,240
text

00:17:28,160 --> 00:17:31,840
html there are dif other different

00:17:30,240 --> 00:17:33,919
content types and

00:17:31,840 --> 00:17:35,840
also header fields that you can attach

00:17:33,919 --> 00:17:37,440
with your http response but we're not

00:17:35,840 --> 00:17:39,440
going to go into it

00:17:37,440 --> 00:17:42,559
and lastly we have a blank line and then

00:17:39,440 --> 00:17:42,559
the response message

00:17:42,799 --> 00:17:46,720
so oh and we're also going to return it

00:17:45,919 --> 00:17:49,760
to the client

00:17:46,720 --> 00:17:52,080
and then closing the socket so

00:17:49,760 --> 00:17:53,760
here we have uh the demo for this code

00:17:52,080 --> 00:17:54,880
after it's run so we're going to go to

00:17:53,760 --> 00:17:56,799
localhost

00:17:54,880 --> 00:17:58,320
just the port number without any path

00:17:56,799 --> 00:17:59,360
and we'll see didn't hit any endpoints

00:17:58,320 --> 00:18:02,080
because it wasn't

00:17:59,360 --> 00:18:03,520
the one that we wanted we're gonna try

00:18:02,080 --> 00:18:05,520
an actual path

00:18:03,520 --> 00:18:07,440
still nothing and then we're gonna try

00:18:05,520 --> 00:18:10,720
show data with which is our main page

00:18:07,440 --> 00:18:10,720
and then you'll see hello world

00:18:11,039 --> 00:18:14,559
so now that we have a structure for our

00:18:13,200 --> 00:18:17,600
app let's allow

00:18:14,559 --> 00:18:19,919
users to input some data

00:18:17,600 --> 00:18:20,880
more specifically some steps and dates

00:18:19,919 --> 00:18:23,760
and the date

00:18:20,880 --> 00:18:24,400
and then display it on the site but how

00:18:23,760 --> 00:18:26,240
can we

00:18:24,400 --> 00:18:28,320
allow users to input data and send it to

00:18:26,240 --> 00:18:32,000
the backend the most simple way

00:18:28,320 --> 00:18:32,400
is to use an html form we won't be going

00:18:32,000 --> 00:18:34,240
to

00:18:32,400 --> 00:18:35,840
details about how the form emblem

00:18:34,240 --> 00:18:38,080
element looks like and how

00:18:35,840 --> 00:18:39,919
it works but as mentioned previously

00:18:38,080 --> 00:18:42,080
i've linked the resources for you to dig

00:18:39,919 --> 00:18:45,120
into

00:18:42,080 --> 00:18:46,880
so first before we go into it let's take

00:18:45,120 --> 00:18:48,000
a step back and see how the flow would

00:18:46,880 --> 00:18:49,840
look like

00:18:48,000 --> 00:18:51,039
so when the user first goes on the

00:18:49,840 --> 00:18:52,480
website

00:18:51,039 --> 00:18:55,440
let's say the main page where the

00:18:52,480 --> 00:18:57,840
information is requested

00:18:55,440 --> 00:18:59,200
with a get request to the server the

00:18:57,840 --> 00:19:02,160
server then responds

00:18:59,200 --> 00:19:03,039
with a form for the browser to display

00:19:02,160 --> 00:19:05,679
the user then

00:19:03,039 --> 00:19:07,039
in inputs uh new user information and

00:19:05,679 --> 00:19:08,480
then it's sent back to the server with a

00:19:07,039 --> 00:19:10,720
post request

00:19:08,480 --> 00:19:12,880
and then lastly the server responds with

00:19:10,720 --> 00:19:16,320
an updated browser page

00:19:12,880 --> 00:19:20,160
uh containing the new data

00:19:16,320 --> 00:19:20,160
let's walk through the code sample now

00:19:20,640 --> 00:19:24,240
all right so now we're actually going to

00:19:23,600 --> 00:19:26,960
create

00:19:24,240 --> 00:19:28,960
some default data in a variable called

00:19:26,960 --> 00:19:32,640
all data it's going to be an array

00:19:28,960 --> 00:19:35,360
of hashes and the hashes will contain

00:19:32,640 --> 00:19:36,799
the date and the step count as keys and

00:19:35,360 --> 00:19:38,320
we're also going to define a method

00:19:36,799 --> 00:19:41,440
called daily steps form

00:19:38,320 --> 00:19:43,679
which is basically the html for the form

00:19:41,440 --> 00:19:44,480
the form action which it will be the

00:19:43,679 --> 00:19:46,480
target path

00:19:44,480 --> 00:19:49,280
in this case is add data when the

00:19:46,480 --> 00:19:49,280
request is made

00:19:49,360 --> 00:19:54,400
and the method is a post request and

00:19:52,480 --> 00:19:56,320
lastly the encoding type is how the form

00:19:54,400 --> 00:19:57,679
data is going to be encoded when it's

00:19:56,320 --> 00:19:59,679
sent to the server

00:19:57,679 --> 00:20:02,000
in the request so in this case we're

00:19:59,679 --> 00:20:06,960
going to use www

00:20:02,000 --> 00:20:08,880
form url encoded so moving on

00:20:06,960 --> 00:20:10,960
now that we have a variable storing all

00:20:08,880 --> 00:20:11,440
the data at the top now we can display

00:20:10,960 --> 00:20:13,600
it

00:20:11,440 --> 00:20:14,640
when a get request is made what we're

00:20:13,600 --> 00:20:16,320
doing here is

00:20:14,640 --> 00:20:17,919
taking all data which is a variable

00:20:16,320 --> 00:20:21,679
containing all our data

00:20:17,919 --> 00:20:25,600
and parsing the array uh and create

00:20:21,679 --> 00:20:28,799
a response message with uh with the data

00:20:25,600 --> 00:20:29,840
and organize it as an html unordered

00:20:28,799 --> 00:20:32,240
list

00:20:29,840 --> 00:20:32,960
so essentially we're just displaying the

00:20:32,240 --> 00:20:37,520
data

00:20:32,960 --> 00:20:37,520
saved within the all data variable

00:20:38,080 --> 00:20:43,600
so this is new here we are creating

00:20:41,440 --> 00:20:45,200
a new endpoint which is going to be a

00:20:43,600 --> 00:20:48,559
post request

00:20:45,200 --> 00:20:51,600
at at the target

00:20:48,559 --> 00:20:54,240
uh add data and here we'll

00:20:51,600 --> 00:20:56,000
also set the status code to 303c other

00:20:54,240 --> 00:20:57,520
because we want to redirect the page

00:20:56,000 --> 00:21:00,559
back to the main page

00:20:57,520 --> 00:21:04,799
uh once once the user um

00:21:00,559 --> 00:21:07,280
enters new information um excuse me

00:21:04,799 --> 00:21:09,600
so what we want to do now is parse the

00:21:07,280 --> 00:21:13,280
header fields from the request

00:21:09,600 --> 00:21:16,000
and put it within a hash called headers

00:21:13,280 --> 00:21:16,559
the most relevant part of this headers

00:21:16,000 --> 00:21:19,520
hash

00:21:16,559 --> 00:21:20,320
for us right now is the content length

00:21:19,520 --> 00:21:22,640
key

00:21:20,320 --> 00:21:25,039
which represents the size of the request

00:21:22,640 --> 00:21:27,120
message body in bytes

00:21:25,039 --> 00:21:28,559
let's quickly refer back to our http

00:21:27,120 --> 00:21:30,240
request example here

00:21:28,559 --> 00:21:32,480
you can see that the content length

00:21:30,240 --> 00:21:34,880
header is 34 bytes

00:21:32,480 --> 00:21:36,559
and the message body below is 34 bytes

00:21:34,880 --> 00:21:39,120
long so you can pause the video to count

00:21:36,559 --> 00:21:40,960
it but you can also take my word for it

00:21:39,120 --> 00:21:42,320
the reason why we care about this

00:21:40,960 --> 00:21:43,679
content length header

00:21:42,320 --> 00:21:46,400
is so that the application can

00:21:43,679 --> 00:21:48,159
accurately know the size of the body and

00:21:46,400 --> 00:21:51,679
stop receiving the request

00:21:48,159 --> 00:21:54,480
once we've gotten the entire message

00:21:51,679 --> 00:21:56,080
so also i want to point you towards the

00:21:54,480 --> 00:22:00,480
structure of the

00:21:56,080 --> 00:22:02,480
message body here it's in the www

00:22:00,480 --> 00:22:03,919
form encoding we've previously set the

00:22:02,480 --> 00:22:06,480
form to

00:22:03,919 --> 00:22:09,200
the variables here are separated by an

00:22:06,480 --> 00:22:09,200
ampersand sign

00:22:09,600 --> 00:22:16,640
right so back to our post

00:22:13,280 --> 00:22:19,039
endpoint so once we're able to uh

00:22:16,640 --> 00:22:20,080
get the message body using the contact

00:22:19,039 --> 00:22:23,600
length header

00:22:20,080 --> 00:22:25,760
we have to decode the message so um

00:22:23,600 --> 00:22:28,240
the method we're using here is from the

00:22:25,760 --> 00:22:31,480
uri ruby library

00:22:28,240 --> 00:22:32,640
and the method is decode www form

00:22:31,480 --> 00:22:34,720
[Music]

00:22:32,640 --> 00:22:36,320
which conveniently decodes the message

00:22:34,720 --> 00:22:39,200
for us into an array of

00:22:36,320 --> 00:22:39,200
key values

00:22:39,440 --> 00:22:43,520
so after we get got the decoded message

00:22:42,080 --> 00:22:47,440
we're just going to store it in

00:22:43,520 --> 00:22:49,760
the all data variable that we have

00:22:47,440 --> 00:22:52,080
and lastly um we're going to hard code

00:22:49,760 --> 00:22:52,720
the location header into our http

00:22:52,080 --> 00:22:55,360
response

00:22:52,720 --> 00:22:56,960
for simplicity it's just it just means

00:22:55,360 --> 00:22:57,600
that we're going to redirect to the main

00:22:56,960 --> 00:23:01,120
page

00:22:57,600 --> 00:23:04,480
after every single http response

00:23:01,120 --> 00:23:06,559
so now let's run the code

00:23:04,480 --> 00:23:07,679
you can see that i'm running the code

00:23:06,559 --> 00:23:09,280
that we uh

00:23:07,679 --> 00:23:11,600
just wrote and then going to the main

00:23:09,280 --> 00:23:14,159
page show data

00:23:11,600 --> 00:23:15,440
we now can see the html form we're going

00:23:14,159 --> 00:23:17,440
to enter a date

00:23:15,440 --> 00:23:18,960
and then a step count you got zero steps

00:23:17,440 --> 00:23:22,799
today that's cool

00:23:18,960 --> 00:23:25,200
and that's it um so our app works

00:23:22,799 --> 00:23:26,000
but let's see what happens in this new

00:23:25,200 --> 00:23:27,520
gif

00:23:26,000 --> 00:23:29,200
so you can see here there's a bunch of

00:23:27,520 --> 00:23:30,640
entries already i'm going to stop the

00:23:29,200 --> 00:23:33,120
server

00:23:30,640 --> 00:23:34,720
refresh to make sure it's soft run the

00:23:33,120 --> 00:23:36,559
server again

00:23:34,720 --> 00:23:40,400
and then refresh the browser and you can

00:23:36,559 --> 00:23:42,720
see that the steps are gone

00:23:40,400 --> 00:23:43,679
um probably not the best idea to run

00:23:42,720 --> 00:23:47,200
this in production

00:23:43,679 --> 00:23:50,320
obviously so

00:23:47,200 --> 00:23:52,400
why though this is because

00:23:50,320 --> 00:23:53,679
we are just only storing the data memory

00:23:52,400 --> 00:23:55,679
and that's not persistent

00:23:53,679 --> 00:23:57,919
so where can we store the data then a

00:23:55,679 --> 00:24:00,000
database that's way too hard

00:23:57,919 --> 00:24:02,159
and complicated let's store it in

00:24:00,000 --> 00:24:03,679
everyone's favorite file type a yaml

00:24:02,159 --> 00:24:07,039
file

00:24:03,679 --> 00:24:09,840
only if you're a human though um

00:24:07,039 --> 00:24:11,360
so i mean we could use a plain text file

00:24:09,840 --> 00:24:12,080
instead of a yellow but then we'll have

00:24:11,360 --> 00:24:14,480
to implement

00:24:12,080 --> 00:24:15,840
our own way of representing ruby data

00:24:14,480 --> 00:24:17,760
items in plain text

00:24:15,840 --> 00:24:19,200
and we want to keep it simple silly so

00:24:17,760 --> 00:24:23,440
we're just going to use

00:24:19,200 --> 00:24:25,760
yaml store um which is a ruby library

00:24:23,440 --> 00:24:28,720
that helps us serialize and deserialize

00:24:25,760 --> 00:24:30,720
ruby objects to and from the yaml files

00:24:28,720 --> 00:24:32,640
so let's dive into the code this is

00:24:30,720 --> 00:24:35,919
going to be a short one

00:24:32,640 --> 00:24:39,360
um all we have to do create a yaml store

00:24:35,919 --> 00:24:40,400
uh and um create a new file called

00:24:39,360 --> 00:24:43,039
store.yaml

00:24:40,400 --> 00:24:44,799
that contains our previous default step

00:24:43,039 --> 00:24:47,039
count entry

00:24:44,799 --> 00:24:49,039
so under the get endpoint um what we

00:24:47,039 --> 00:24:50,720
want to do is read from the file so

00:24:49,039 --> 00:24:52,799
we'll create a transaction

00:24:50,720 --> 00:24:54,720
using the store and attain the step data

00:24:52,799 --> 00:24:56,159
from the file and store it within the

00:24:54,720 --> 00:24:58,720
all data variable

00:24:56,159 --> 00:24:59,520
so by the way transaction a transaction

00:24:58,720 --> 00:25:02,159
is just how we

00:24:59,520 --> 00:25:05,200
read and write data um to the yaml store

00:25:02,159 --> 00:25:08,320
and as part of the api

00:25:05,200 --> 00:25:10,720
so for our post endpoint we want to

00:25:08,320 --> 00:25:12,480
write to the yaml file so we create

00:25:10,720 --> 00:25:13,039
another transaction and just shove all

00:25:12,480 --> 00:25:15,120
the user

00:25:13,039 --> 00:25:16,960
the new user input into the daily steps

00:25:15,120 --> 00:25:19,039
hash from the file

00:25:16,960 --> 00:25:20,640
and the store will update the file

00:25:19,039 --> 00:25:24,320
accordingly

00:25:20,640 --> 00:25:27,440
and voila we're done we've created

00:25:24,320 --> 00:25:29,279
a basic web application using ruby and

00:25:27,440 --> 00:25:31,760
only ruby libraries

00:25:29,279 --> 00:25:33,679
um any user input data now will be

00:25:31,760 --> 00:25:37,200
persistent because it is stored

00:25:33,679 --> 00:25:39,039
within the yammer file and if you want

00:25:37,200 --> 00:25:41,360
to read any data we'll also be reading

00:25:39,039 --> 00:25:44,880
it from the ml file so everything is

00:25:41,360 --> 00:25:48,240
good so

00:25:44,880 --> 00:25:50,320
today we've learned about tcp sockets

00:25:48,240 --> 00:25:52,240
and how to form connections between

00:25:50,320 --> 00:25:55,120
client server

00:25:52,240 --> 00:25:56,799
receiving http requests and sending http

00:25:55,120 --> 00:25:58,880
responses

00:25:56,799 --> 00:26:00,080
and how to store data persistently in a

00:25:58,880 --> 00:26:02,000
file

00:26:00,080 --> 00:26:03,520
i feel like these are all fundamental

00:26:02,000 --> 00:26:05,760
concepts that you'll see

00:26:03,520 --> 00:26:08,159
at a higher level abstract of

00:26:05,760 --> 00:26:09,760
abstraction when working day-to-day

00:26:08,159 --> 00:26:11,919
so for example when you're working on

00:26:09,760 --> 00:26:13,520
rails

00:26:11,919 --> 00:26:15,520
and plus these concepts can be applied

00:26:13,520 --> 00:26:17,919
to other programming languages

00:26:15,520 --> 00:26:20,080
and web frameworks as well and not just

00:26:17,919 --> 00:26:22,240
ruby and rails

00:26:20,080 --> 00:26:23,120
so as you can tell from the code i've

00:26:22,240 --> 00:26:26,159
shared

00:26:23,120 --> 00:26:29,120
um writing out everything manually is a

00:26:26,159 --> 00:26:31,919
huge pain in the back end

00:26:29,120 --> 00:26:33,760
if you don't believe me try writing a

00:26:31,919 --> 00:26:36,799
legit web application

00:26:33,760 --> 00:26:38,559
maybe you know a blog only using

00:26:36,799 --> 00:26:40,640
ruby libraries and tag me in it because

00:26:38,559 --> 00:26:42,480
i would love to take a look

00:26:40,640 --> 00:26:45,039
it's a really great educational

00:26:42,480 --> 00:26:46,559
experience though so

00:26:45,039 --> 00:26:48,080
what's next though there's a spoiler

00:26:46,559 --> 00:26:49,600
alert uh

00:26:48,080 --> 00:26:51,919
there are more layers to the ruby

00:26:49,600 --> 00:26:53,200
ecosystem that will help you build your

00:26:51,919 --> 00:26:55,600
web application

00:26:53,200 --> 00:26:56,799
so for example you can refactor your web

00:26:55,600 --> 00:27:00,320
application to be

00:26:56,799 --> 00:27:03,120
a rack application rack is a web

00:27:00,320 --> 00:27:05,600
server interface on top of http and very

00:27:03,120 --> 00:27:09,600
similar to http because it's just a set

00:27:05,600 --> 00:27:12,080
of specifications so rack the interface

00:27:09,600 --> 00:27:14,320
rack is the interface for web servers

00:27:12,080 --> 00:27:16,640
such as puma and unicorn

00:27:14,320 --> 00:27:18,559
so once you've refactored the app to be

00:27:16,640 --> 00:27:22,559
a rack application you can hand

00:27:18,559 --> 00:27:25,919
off the http logic to the web servers

00:27:22,559 --> 00:27:28,000
so you don't have to write them yourself

00:27:25,919 --> 00:27:29,440
so you can also use an actual database

00:27:28,000 --> 00:27:33,600
such as sql lite

00:27:29,440 --> 00:27:35,520
if or mysql instead of storing data in a

00:27:33,600 --> 00:27:37,679
yama file

00:27:35,520 --> 00:27:39,679
if you're going to do this as a learning

00:27:37,679 --> 00:27:41,120
experience i highly recommend using sql

00:27:39,679 --> 00:27:43,919
lite because it's much simpler and

00:27:41,120 --> 00:27:46,880
there's a rubygem for it

00:27:43,919 --> 00:27:48,559
so using a database will provide you

00:27:46,880 --> 00:27:49,760
with the read and write optimizations

00:27:48,559 --> 00:27:50,960
for when you're dealing with a large

00:27:49,760 --> 00:27:52,399
amount of data

00:27:50,960 --> 00:27:54,960
and obviously lastly we have ruby on

00:27:52,399 --> 00:27:56,320
rails which contains the all-in-one

00:27:54,960 --> 00:27:58,000
framework to build a ruby web

00:27:56,320 --> 00:28:00,080
application

00:27:58,000 --> 00:28:01,039
so if you use rails you won't have to

00:28:00,080 --> 00:28:03,200
worry about

00:28:01,039 --> 00:28:05,760
rack or database because it's all built

00:28:03,200 --> 00:28:09,279
into rails

00:28:05,760 --> 00:28:10,000
so very quickly this is the code that

00:28:09,279 --> 00:28:11,840
we've written

00:28:10,000 --> 00:28:13,679
just like or maybe half of it and i'd

00:28:11,840 --> 00:28:17,120
like to show you

00:28:13,679 --> 00:28:20,480
what rails library would be replaced

00:28:17,120 --> 00:28:23,440
with our current code so um

00:28:20,480 --> 00:28:25,039
first of all the daily steps form can be

00:28:23,440 --> 00:28:26,640
replaced by action view

00:28:25,039 --> 00:28:28,720
action view is the rails library that

00:28:26,640 --> 00:28:31,200
works closely with action controller

00:28:28,720 --> 00:28:33,200
to handle uh view template rendering so

00:28:31,200 --> 00:28:35,440
this html code won't even be in the same

00:28:33,200 --> 00:28:37,600
file

00:28:35,440 --> 00:28:39,360
racks application servers like puma will

00:28:37,600 --> 00:28:41,919
do the job of parsing http

00:28:39,360 --> 00:28:44,080
the http request and you're creating the

00:28:41,919 --> 00:28:46,159
http responses

00:28:44,080 --> 00:28:47,919
action dispatch will parse the http

00:28:46,159 --> 00:28:51,279
request and route it to

00:28:47,919 --> 00:28:53,360
route each request to our endpoints um

00:28:51,279 --> 00:28:54,880
action dispatch is the rails framework

00:28:53,360 --> 00:28:58,080
that is created to hand

00:28:54,880 --> 00:29:00,640
to extend the features of rack

00:28:58,080 --> 00:29:03,360
and it handles the routing of endpoints

00:29:00,640 --> 00:29:06,399
to controllers

00:29:03,360 --> 00:29:09,200
action controller very familiar

00:29:06,399 --> 00:29:10,159
class would handle what we call the

00:29:09,200 --> 00:29:12,320
business logic

00:29:10,159 --> 00:29:13,200
within the endpoint in this example it

00:29:12,320 --> 00:29:16,159
would be

00:29:13,200 --> 00:29:19,279
the get action where we get the correct

00:29:16,159 --> 00:29:22,080
objects to be displayed on our page

00:29:19,279 --> 00:29:22,880
and lastly we have active record which

00:29:22,080 --> 00:29:24,720
is

00:29:22,880 --> 00:29:26,000
the rails library that implements the

00:29:24,720 --> 00:29:29,440
object relational

00:29:26,000 --> 00:29:32,159
mapping framework or orm

00:29:29,440 --> 00:29:33,200
essentially active record allows us to

00:29:32,159 --> 00:29:35,840
handle any

00:29:33,200 --> 00:29:38,840
database interactions and map it to a

00:29:35,840 --> 00:29:40,080
ruby object so that it can be used or

00:29:38,840 --> 00:29:43,360
modified

00:29:40,080 --> 00:29:45,440
but yes this is it thank you so much for

00:29:43,360 --> 00:29:48,480
listening i hope this was really useful

00:29:45,440 --> 00:29:51,679
to you um you can find me on twitter

00:29:48,480 --> 00:29:55,679
uh at ong maple thank you

00:29:51,679 --> 00:29:59,840
and bye

00:29:55,679 --> 00:30:02,640
hello thank you we were discussing

00:29:59,840 --> 00:30:03,600
on the backstage about your twitter

00:30:02,640 --> 00:30:08,880
handle

00:30:03,600 --> 00:30:08,880
it should be oh my god mabel not that

00:30:09,039 --> 00:30:16,080
because you are such amazing

00:30:12,320 --> 00:30:19,120
amazing creature we have a chat full

00:30:16,080 --> 00:30:22,159
of comments like let me read this

00:30:19,120 --> 00:30:25,919
out loud mabel's talk is better

00:30:22,159 --> 00:30:26,720
than probably 99 of all university

00:30:25,919 --> 00:30:29,840
courses

00:30:26,720 --> 00:30:31,919
as an intro to the web i

00:30:29,840 --> 00:30:32,880
really like these kind of talks that

00:30:31,919 --> 00:30:35,440
explains

00:30:32,880 --> 00:30:36,480
fundamental things in a very practical

00:30:35,440 --> 00:30:39,679
way

00:30:36,480 --> 00:30:41,039
best presentation award goes to mabel

00:30:39,679 --> 00:30:44,720
today

00:30:41,039 --> 00:30:45,840
uh very nice illustrations explanarity

00:30:44,720 --> 00:30:49,679
slides

00:30:45,840 --> 00:30:51,919
good presentation and

00:30:49,679 --> 00:30:52,960
for your next talk will you be

00:30:51,919 --> 00:30:57,039
implementing

00:30:52,960 --> 00:31:00,480
an email server from scratch

00:30:57,039 --> 00:31:04,320
you are truly amazing they're

00:31:00,480 --> 00:31:07,919
they're actually

00:31:04,320 --> 00:31:12,159
so we we hold you accountable of that

00:31:07,919 --> 00:31:15,519
uh actually there us

00:31:12,159 --> 00:31:18,559
yes we book you there

00:31:15,519 --> 00:31:21,519
uh actually there's a so much

00:31:18,559 --> 00:31:22,480
these praise comments that we have only

00:31:21,519 --> 00:31:25,840
one

00:31:22,480 --> 00:31:25,840
question for you

00:31:26,159 --> 00:31:33,200
so how much of this technique

00:31:29,519 --> 00:31:33,919
technique how much of these techniques

00:31:33,200 --> 00:31:36,159
you use

00:31:33,919 --> 00:31:38,960
on your daily work like building

00:31:36,159 --> 00:31:43,039
something from scratch to understand

00:31:38,960 --> 00:31:44,840
how it should work oh that's such a good

00:31:43,039 --> 00:31:48,399
question

00:31:44,840 --> 00:31:50,320
um so i would say that this type of

00:31:48,399 --> 00:31:51,360
knowledge was really helpful for me to

00:31:50,320 --> 00:31:53,279
understand

00:31:51,360 --> 00:31:54,480
the entire system as a whole so for

00:31:53,279 --> 00:31:56,399
example when

00:31:54,480 --> 00:31:58,720
we're working on rails it's good to

00:31:56,399 --> 00:32:02,399
understand what really goes

00:31:58,720 --> 00:32:04,720
um goes on underneath um so for example

00:32:02,399 --> 00:32:06,000
something that i learned working on this

00:32:04,720 --> 00:32:08,559
is like

00:32:06,000 --> 00:32:10,559
rack middleware and uh on my in my work

00:32:08,559 --> 00:32:12,399
in truffle ruby we try to benchmark

00:32:10,559 --> 00:32:15,440
middlewares in like

00:32:12,399 --> 00:32:17,760
a production code and understanding uh

00:32:15,440 --> 00:32:19,440
why we need middlewares and how it gets

00:32:17,760 --> 00:32:22,720
hooked up to the application

00:32:19,440 --> 00:32:23,440
is um something that i found really

00:32:22,720 --> 00:32:26,080
helpful

00:32:23,440 --> 00:32:26,840
um after learning after doing uh this

00:32:26,080 --> 00:32:29,840
project

00:32:26,840 --> 00:32:29,840
so

00:32:30,080 --> 00:32:34,559
oh now we have a little bit more

00:32:32,640 --> 00:32:38,000
questions we are not letting you go

00:32:34,559 --> 00:32:41,120
yet what would it look like

00:32:38,000 --> 00:32:44,960
using rectors have you

00:32:41,120 --> 00:32:46,960
it that no i haven't

00:32:44,960 --> 00:32:48,559
um that's actually probably a good idea

00:32:46,960 --> 00:32:51,360
to uh

00:32:48,559 --> 00:32:52,080
to learn about as a follow-up to this uh

00:32:51,360 --> 00:32:55,600
project

00:32:52,080 --> 00:33:00,480
but i haven't tried it yet now

00:32:55,600 --> 00:33:03,679
so if you try that remember to share the

00:33:00,480 --> 00:33:06,799
the results with us

00:33:03,679 --> 00:33:07,559
there's also a request can you share a

00:33:06,799 --> 00:33:10,880
link to

00:33:07,559 --> 00:33:14,720
repository or quizzed with soul

00:33:10,880 --> 00:33:18,399
score code code

00:33:14,720 --> 00:33:19,360
yeah yeah so i actually thought about

00:33:18,399 --> 00:33:22,480
this so

00:33:19,360 --> 00:33:25,760
um i thought about sharing the code but

00:33:22,480 --> 00:33:28,480
i feel like that would be kind of

00:33:25,760 --> 00:33:29,840
against the spirit of it because i would

00:33:28,480 --> 00:33:32,480
love for you to actually

00:33:29,840 --> 00:33:32,960
write it out yourself after learning

00:33:32,480 --> 00:33:34,880
what i

00:33:32,960 --> 00:33:36,080
i mean after hearing what i have to say

00:33:34,880 --> 00:33:36,640
i think it would be really cool if you

00:33:36,080 --> 00:33:39,519
could like

00:33:36,640 --> 00:33:40,080
try it out yourselves um but i do have a

00:33:39,519 --> 00:33:43,200
version

00:33:40,080 --> 00:33:44,480
of this uh um web application or mini

00:33:43,200 --> 00:33:48,159
web application

00:33:44,480 --> 00:33:48,720
um linked with a blog post that a

00:33:48,159 --> 00:33:50,880
similar

00:33:48,720 --> 00:33:52,320
blog post that i wrote and i can share

00:33:50,880 --> 00:33:55,360
that but i don't have

00:33:52,320 --> 00:33:58,399
the link to the quote that i

00:33:55,360 --> 00:34:01,360
uh used in this talk

00:33:58,399 --> 00:34:02,080
but this is the opportunity to ask to

00:34:01,360 --> 00:34:07,600
create

00:34:02,080 --> 00:34:12,240
euroco 2021 challenge

00:34:07,600 --> 00:34:15,359
oh yes yes so europe 2020

00:34:12,240 --> 00:34:18,879
21 right um

00:34:15,359 --> 00:34:20,079
a ruby web app just using using ruby

00:34:18,879 --> 00:34:22,560
libraries nothing else

00:34:20,079 --> 00:34:24,560
and and see and see how far we can get

00:34:22,560 --> 00:34:27,760
with that and how complicated

00:34:24,560 --> 00:34:29,280
it would be and how long the code would

00:34:27,760 --> 00:34:30,960
potentially be

00:34:29,280 --> 00:34:32,800
that would be super fun i would

00:34:30,960 --> 00:34:33,359
definitely be interested as i said in

00:34:32,800 --> 00:34:34,960
the talk

00:34:33,359 --> 00:34:36,960
feel free to tag me i would love to take

00:34:34,960 --> 00:34:39,599
a look that's good

00:34:36,960 --> 00:34:40,480
that's really good so we can discuss

00:34:39,599 --> 00:34:44,240
about this

00:34:40,480 --> 00:34:46,399
challenge idea in discord are you ready

00:34:44,240 --> 00:34:47,599
for that discussion are you ready to

00:34:46,399 --> 00:34:50,240
jump in

00:34:47,599 --> 00:34:51,839
to this challenge i hope we can get you

00:34:50,240 --> 00:34:54,480
maple also

00:34:51,839 --> 00:34:55,760
to the discord if you are not already

00:34:54,480 --> 00:34:59,040
there

00:34:55,760 --> 00:35:02,079
and just one question here

00:34:59,040 --> 00:35:05,520
will the code of this simple app be

00:35:02,079 --> 00:35:06,560
shared on this we just discussed it also

00:35:05,520 --> 00:35:09,119
this

00:35:06,560 --> 00:35:11,280
it was a question about the sharing the

00:35:09,119 --> 00:35:14,160
code of the simple app but did

00:35:11,280 --> 00:35:14,800
we discuss it and we decided to do the

00:35:14,160 --> 00:35:17,440
challenge

00:35:14,800 --> 00:35:18,400
and you may share something but you need

00:35:17,440 --> 00:35:23,040
to build your

00:35:18,400 --> 00:35:26,079
build your own app amazing

00:35:23,040 --> 00:35:28,320
amazing i can share the slides for sure

00:35:26,079 --> 00:35:30,480
um i have the slides uh the link to the

00:35:28,320 --> 00:35:34,800
slides and i'll share it on discord

00:35:30,480 --> 00:35:38,240
that's enough yes that's nice okay

00:35:34,800 --> 00:35:41,599
and yes we have more comments on

00:35:38,240 --> 00:35:43,040
stream chat mabel you have the best

00:35:41,599 --> 00:35:46,640
t-shirt

00:35:43,040 --> 00:35:50,000
so far oh thank you

00:35:46,640 --> 00:35:51,920
i really like it i think we all all

00:35:50,000 --> 00:35:54,320
agree that led zeppelin is a one of a

00:35:51,920 --> 00:35:57,280
kind of of the bands

00:35:54,320 --> 00:35:58,320
okay thank you mabel and we will see you

00:35:57,280 --> 00:36:01,280
on discord

00:35:58,320 --> 00:36:02,320
later thank you so much for this it was

00:36:01,280 --> 00:36:08,720
a really truly

00:36:02,320 --> 00:36:08,720

YouTube URL: https://www.youtube.com/watch?v=lxczDssLYKA


