Title: IDE development with Ruby (Soutaro Matsumoto)
Publication date: 2021-06-03
Playlist: Euruko 2021 - Day 2
Description: 
	Integrated development environment (IDE) is one of the most frequently used tools for programming. Itâ€™s a kind of text editor where you type and read the code, but it does more for you. On-the-fly error reporting, completion, go-to-definition, and more. These features help you writing and reading the code and make the tools more valuable than simple text editors.

I have been working for IDE development to support Ruby programming with a static type checker. It is based on the Language Server Protocol (LSP) and implemented in Ruby.

I want to share my experience. What is the protocol? How can the LSP features be implemented? You will get to know the under-the-hood of IDEs, and the tools will become more familiar to you.
Captions: 
	00:00:00,240 --> 00:00:06,399
it is time to introduce our next speaker

00:00:04,080 --> 00:00:08,400
and our next speaker is so taro

00:00:06,399 --> 00:00:11,599
matsumoto

00:00:08,400 --> 00:00:14,480
sotaro is a lead ruby engineer at square

00:00:11,599 --> 00:00:18,080
working on static typing for ruby

00:00:14,480 --> 00:00:21,119
he is co core ruby committer designed

00:00:18,080 --> 00:00:25,279
and implemented a rbs

00:00:21,119 --> 00:00:29,119
for rupee 3. he also developed steep

00:00:25,279 --> 00:00:32,399
a static type checker for ruby

00:00:29,119 --> 00:00:35,600
and the description of this talk is

00:00:32,399 --> 00:00:39,440
the integrated development environment

00:00:35,600 --> 00:00:40,559
or ide is one of the most frequently

00:00:39,440 --> 00:00:43,920
used tool

00:00:40,559 --> 00:00:44,559
for programming it's a kind of text

00:00:43,920 --> 00:00:47,039
editor

00:00:44,559 --> 00:00:48,320
where you type and read the code but it

00:00:47,039 --> 00:00:51,440
does more

00:00:48,320 --> 00:00:54,879
for you on the fly

00:00:51,440 --> 00:00:58,480
error reporting complex completion

00:00:54,879 --> 00:01:00,640
go to definition and more sotaro has

00:00:58,480 --> 00:01:03,760
been working for ide

00:01:00,640 --> 00:01:07,200
development to support ruby programming

00:01:03,760 --> 00:01:10,159
with the static type checker it is

00:01:07,200 --> 00:01:11,439
based on the language server protocol

00:01:10,159 --> 00:01:15,439
and implemented

00:01:11,439 --> 00:01:18,720
in ruby all the questions please

00:01:15,439 --> 00:01:21,520
to stream chat and so taro

00:01:18,720 --> 00:01:21,520
is your turn

00:01:23,840 --> 00:01:29,360
okay so kill me here i'm social

00:01:29,840 --> 00:01:34,159
in fact this is my first time to attend

00:01:33,040 --> 00:01:37,040
euroko

00:01:34,159 --> 00:01:37,840
and i'm very very excited to have a

00:01:37,040 --> 00:01:41,200
presentation

00:01:37,840 --> 00:01:44,240
here today i think that

00:01:41,200 --> 00:01:47,680
you may notice that my family name

00:01:44,240 --> 00:01:48,720
is same with math his name is yukihiro

00:01:47,680 --> 00:01:51,360
matsumoto

00:01:48,720 --> 00:01:51,920
and i'm also the romance model so you

00:01:51,360 --> 00:01:55,520
may be

00:01:51,920 --> 00:01:58,399
wondering if we are some relatives or

00:01:55,520 --> 00:01:59,439
yeah brother who are like that but in

00:01:58,399 --> 00:02:02,240
fact there is not

00:01:59,439 --> 00:02:02,560
we have no relations uh it is because

00:02:02,240 --> 00:02:06,840
that

00:02:02,560 --> 00:02:08,879
matsumoto is a really common quality in

00:02:06,840 --> 00:02:12,080
japan

00:02:08,879 --> 00:02:15,200
so let me introduce myself a bit

00:02:12,080 --> 00:02:18,800
so i'm working first we're from tokyo

00:02:15,200 --> 00:02:22,640
i live in tokyo japan and

00:02:18,800 --> 00:02:25,840
yeah i'm also one of uh to be

00:02:22,640 --> 00:02:29,120
committed so he said uh

00:02:25,840 --> 00:02:29,760
i'm ruby committees and i have been

00:02:29,120 --> 00:02:32,879
working

00:02:29,760 --> 00:02:36,000
for the type checking things and

00:02:32,879 --> 00:02:39,120
yeah it was released as rbs

00:02:36,000 --> 00:02:42,560
last year and yeah

00:02:39,120 --> 00:02:43,360
i also developed a static type checker

00:02:42,560 --> 00:02:46,800
it is called

00:02:43,360 --> 00:02:49,840
steep it is based on rds

00:02:46,800 --> 00:02:51,680
and it will statically type uh b

00:02:49,840 --> 00:02:54,800
programs

00:02:51,680 --> 00:02:58,400
so uh my talk today is

00:02:54,800 --> 00:03:01,440
no directory about the rbs or sd

00:02:58,400 --> 00:03:02,239
but it will be more focused on the

00:03:01,440 --> 00:03:05,360
development

00:03:02,239 --> 00:03:08,080
of ide but before

00:03:05,360 --> 00:03:11,440
starting my talk i want to really

00:03:08,080 --> 00:03:11,440
quickly introduce deep

00:03:11,760 --> 00:03:18,879
so it is uncommon drawing to

00:03:14,800 --> 00:03:22,080
implement it in ruby you can install

00:03:18,879 --> 00:03:26,000
the tool using the rubygem or buncher

00:03:22,080 --> 00:03:28,640
right the gem installs the excel

00:03:26,000 --> 00:03:30,159
so it was originally developed as a

00:03:28,640 --> 00:03:33,519
command drive tool

00:03:30,159 --> 00:03:34,560
so it sticks with a sd command and you

00:03:33,519 --> 00:03:37,840
can type check

00:03:34,560 --> 00:03:41,040
ulp project like that the steve

00:03:37,840 --> 00:03:44,640
check and it will lead all the

00:03:41,040 --> 00:03:47,200
ruby program will be source code and

00:03:44,640 --> 00:03:48,080
it does some type checking and it may

00:03:47,200 --> 00:03:51,120
report

00:03:48,080 --> 00:03:54,159
some type of errors to the console

00:03:51,120 --> 00:03:57,760
but as you know this is uh not

00:03:54,159 --> 00:04:00,720
a very good experience you edit

00:03:57,760 --> 00:04:02,239
some of your b cord in text editor you

00:04:00,720 --> 00:04:05,280
switch to tamiya

00:04:02,239 --> 00:04:05,840
run the stiff check and you see some

00:04:05,280 --> 00:04:09,120
errors

00:04:05,840 --> 00:04:11,599
and then you edit you are taking your

00:04:09,120 --> 00:04:12,319
uh your ruby source code in your data

00:04:11,599 --> 00:04:16,479
again

00:04:12,319 --> 00:04:19,680
so it's not very good experience

00:04:16,479 --> 00:04:22,320
so then yeah

00:04:19,680 --> 00:04:23,120
i think that it's natural so we

00:04:22,320 --> 00:04:29,199
developed

00:04:23,120 --> 00:04:32,800
an ide park in it is uh blocked by steep

00:04:29,199 --> 00:04:35,840
so i developed an steep

00:04:32,800 --> 00:04:38,960
app actually that ide support for steve

00:04:35,840 --> 00:04:41,840
and uh vs code extension so you can

00:04:38,960 --> 00:04:43,040
install the bs called extension from the

00:04:41,840 --> 00:04:46,400
marketplace

00:04:43,040 --> 00:04:47,280
and yeah it will help you reading and

00:04:46,400 --> 00:04:51,199
writing that

00:04:47,280 --> 00:04:55,040
record by doing the

00:04:51,199 --> 00:04:58,639
on the right diagnostics reporting

00:04:55,040 --> 00:05:00,720
or it helps the completion

00:04:58,639 --> 00:05:02,080
or rehearse navigation between them

00:05:00,720 --> 00:05:06,720
because or

00:05:02,080 --> 00:05:06,720
exact sir

00:05:07,039 --> 00:05:13,520
this talk is about ide so

00:05:10,479 --> 00:05:17,840
what what is ide we

00:05:13,520 --> 00:05:20,800
yeah i think that we have to think about

00:05:17,840 --> 00:05:22,240
how the features how is the features

00:05:20,800 --> 00:05:26,160
they provide

00:05:22,240 --> 00:05:29,600
so uh i think that visual basic

00:05:26,160 --> 00:05:33,199
visual studio is a very ancient uh

00:05:29,600 --> 00:05:34,600
ide because uh before the it was about

00:05:33,199 --> 00:05:37,280
the

00:05:34,600 --> 00:05:40,400
1995 also uh

00:05:37,280 --> 00:05:42,639
in fact visual basic was

00:05:40,400 --> 00:05:44,160
my first programming language i lost

00:05:42,639 --> 00:05:47,199
some code on the

00:05:44,160 --> 00:05:50,400
windows on the ide

00:05:47,199 --> 00:05:53,680
and do some debugging like that

00:05:50,400 --> 00:05:56,560
and yeah of course i know that the uh

00:05:53,680 --> 00:05:57,199
one of the most popular idea each day is

00:05:56,560 --> 00:06:01,680
bs

00:05:57,199 --> 00:06:02,240
card or i have been used a crypto

00:06:01,680 --> 00:06:06,160
support

00:06:02,240 --> 00:06:10,240
writing android application 10 years ago

00:06:06,160 --> 00:06:13,840
and yeah we need to

00:06:10,240 --> 00:06:18,000
mention the really great

00:06:13,840 --> 00:06:20,160
ide products released from jetbrains

00:06:18,000 --> 00:06:21,759
i really love to be mine and it is one

00:06:20,160 --> 00:06:24,319
of my primary

00:06:21,759 --> 00:06:26,560
uh development environment older v

00:06:24,319 --> 00:06:29,919
programs

00:06:26,560 --> 00:06:32,960
xcode it is for iphone ios

00:06:29,919 --> 00:06:35,919
and maybe mac os app

00:06:32,960 --> 00:06:38,160
and yeah android studio is for android

00:06:35,919 --> 00:06:41,520
development

00:06:38,160 --> 00:06:44,319
you may say that emacs is an ide

00:06:41,520 --> 00:06:46,479
yeah i know we can leave email or yeah

00:06:44,319 --> 00:06:49,520
we can do everything from emacs

00:06:46,479 --> 00:06:52,639
and yeah i found the funny phrase

00:06:49,520 --> 00:06:55,199
in the website of bim

00:06:52,639 --> 00:06:56,639
so this is an uh screenshot from the

00:06:55,199 --> 00:06:59,919
website of bim

00:06:56,639 --> 00:07:03,120
and i found it says oh

00:06:59,919 --> 00:07:06,720
many consider it an entire ide so then

00:07:03,120 --> 00:07:06,720
excel says it's ide

00:07:06,880 --> 00:07:14,880
and yeah it means that i found that

00:07:10,319 --> 00:07:18,080
uh it it might be dangerous to discuss

00:07:14,880 --> 00:07:21,599
which one is better ide so

00:07:18,080 --> 00:07:25,199
it may cause some kind of the wall

00:07:21,599 --> 00:07:25,199
and better ide

00:07:25,680 --> 00:07:32,800
so yeah everything is better ide

00:07:29,280 --> 00:07:34,960
good idea so there are a lot of features

00:07:32,800 --> 00:07:36,080
they allow you to read and write

00:07:34,960 --> 00:07:39,199
techniques

00:07:36,080 --> 00:07:40,080
uh it helps you compiling your

00:07:39,199 --> 00:07:43,039
applications

00:07:40,080 --> 00:07:44,240
or configuring something or running the

00:07:43,039 --> 00:07:46,879
your tests

00:07:44,240 --> 00:07:47,919
or they have some debugger it's not

00:07:46,879 --> 00:07:51,520
there by back

00:07:47,919 --> 00:07:53,680
but yeah by by itself has some kind of

00:07:51,520 --> 00:07:56,960
the controlling interface but

00:07:53,680 --> 00:08:00,319
yeah it helps uh using the debuggers

00:07:56,960 --> 00:08:03,440
in graphical user interface

00:08:00,319 --> 00:08:05,840
and they also have some test runners

00:08:03,440 --> 00:08:06,560
to let you write some of the unique

00:08:05,840 --> 00:08:09,759
tests

00:08:06,560 --> 00:08:10,720
with that and some ideas have some ui

00:08:09,759 --> 00:08:13,759
builders

00:08:10,720 --> 00:08:17,199
to yeah to to put some potential

00:08:13,759 --> 00:08:20,000
experience here like that but

00:08:17,199 --> 00:08:22,960
in this talk uh i focus on the text

00:08:20,000 --> 00:08:22,960
editing features

00:08:23,120 --> 00:08:28,160
so they have some syntax highlighting

00:08:25,840 --> 00:08:30,319
folding diagnostic reporting hardware

00:08:28,160 --> 00:08:32,479
navigation completion refactoring

00:08:30,319 --> 00:08:35,039
they have a lot of features on text

00:08:32,479 --> 00:08:35,039
editors

00:08:35,919 --> 00:08:42,560
so this is a screenshot of the

00:08:39,279 --> 00:08:44,320
bs card and yeah i'm trying to show you

00:08:42,560 --> 00:08:47,760
the syntax highlighting and

00:08:44,320 --> 00:08:50,320
folding so you find

00:08:47,760 --> 00:08:51,040
some symbols at the left column of the

00:08:50,320 --> 00:08:54,160
editor

00:08:51,040 --> 00:08:57,760
and we can fold and crops

00:08:54,160 --> 00:09:01,200
the samosa ranges of the lobby code

00:08:57,760 --> 00:09:02,320
then yeah it's based on the structure of

00:09:01,200 --> 00:09:05,120
zdb program

00:09:02,320 --> 00:09:05,360
and you can focus on the some some areas

00:09:05,120 --> 00:09:10,399
of

00:09:05,360 --> 00:09:13,519
urdu called diagnostic reporting is also

00:09:10,399 --> 00:09:17,040
important so when you edit usb

00:09:13,519 --> 00:09:20,000
card and the ide does some kind of the

00:09:17,040 --> 00:09:21,040
program analysis automatically in the

00:09:20,000 --> 00:09:24,080
background

00:09:21,040 --> 00:09:24,880
and if some problems detected it will be

00:09:24,080 --> 00:09:29,200
reported

00:09:24,880 --> 00:09:29,200
in the editor automatically

00:09:29,680 --> 00:09:36,080
hover is a feature to help you

00:09:33,360 --> 00:09:37,440
investigating some of the part of the

00:09:36,080 --> 00:09:39,920
urb code

00:09:37,440 --> 00:09:41,600
so this is a feature of this yeah

00:09:39,920 --> 00:09:44,640
implemented by steve

00:09:41,600 --> 00:09:47,920
so when when

00:09:44,640 --> 00:09:51,200
your mouse pointer points some

00:09:47,920 --> 00:09:54,160
variable or method calls in zb code

00:09:51,200 --> 00:09:57,600
it shows some documentations or it shows

00:09:54,160 --> 00:09:57,600
the type of the variable

00:09:58,480 --> 00:10:05,279
this is also implemented in steve and

00:10:02,399 --> 00:10:08,240
yeah navigations i want to explain that

00:10:05,279 --> 00:10:11,120
go to definition features

00:10:08,240 --> 00:10:12,399
so we click there's some part of the

00:10:11,120 --> 00:10:15,839
adobe program

00:10:12,399 --> 00:10:18,720
and if it is a message definitely

00:10:15,839 --> 00:10:21,200
if it is a message called it allows to

00:10:18,720 --> 00:10:24,320
jump to the definition of the method

00:10:21,200 --> 00:10:27,920
or adjust to the it jumps to

00:10:24,320 --> 00:10:32,079
some of the definition of the types

00:10:27,920 --> 00:10:36,079
in rds files

00:10:32,079 --> 00:10:38,720
so completion is another one you

00:10:36,079 --> 00:10:39,600
yeah i think that you really love that

00:10:38,720 --> 00:10:42,800
so it

00:10:39,600 --> 00:10:43,839
uh so yeah this is also the screencast

00:10:42,800 --> 00:10:47,839
of steve

00:10:43,839 --> 00:10:48,720
so if you yeah when you are typing

00:10:47,839 --> 00:10:52,079
something

00:10:48,720 --> 00:10:55,120
then it will show the some uh

00:10:52,079 --> 00:10:57,920
some completion candidates

00:10:55,120 --> 00:10:58,240
and yeah you don't have to type all of

00:10:57,920 --> 00:11:01,680
the

00:10:58,240 --> 00:11:04,000
message names for all of the variable

00:11:01,680 --> 00:11:04,000
names

00:11:04,720 --> 00:11:11,760
so this is our screenshot from the bmi

00:11:08,399 --> 00:11:14,959
it is yeah some ide

00:11:11,760 --> 00:11:17,839
supports during refactoring it allows to

00:11:14,959 --> 00:11:19,760
renaming some methods or it helps to

00:11:17,839 --> 00:11:22,880
define a new method

00:11:19,760 --> 00:11:25,279
by extracting some of cbp code so this

00:11:22,880 --> 00:11:27,360
is a screenshot of the bmi

00:11:25,279 --> 00:11:28,800
because that steve doesn't support

00:11:27,360 --> 00:11:31,360
departure yet

00:11:28,800 --> 00:11:31,360
so yeah

00:11:32,160 --> 00:11:38,880
so we see some of the ide features

00:11:35,519 --> 00:11:41,440
and we can find that ide

00:11:38,880 --> 00:11:42,000
features widely depends on the knowledge

00:11:41,440 --> 00:11:45,839
of the

00:11:42,000 --> 00:11:48,399
language so for example we have some

00:11:45,839 --> 00:11:48,959
syntax highlighting or folding feature

00:11:48,399 --> 00:11:52,160
but

00:11:48,959 --> 00:11:54,639
they need to know the grammar the

00:11:52,160 --> 00:11:56,480
syntax of the programming language so

00:11:54,639 --> 00:11:57,440
that's high writing for adobe doesn't

00:11:56,480 --> 00:12:00,399
work for java

00:11:57,440 --> 00:12:01,120
for folding for type script doesn't work

00:12:00,399 --> 00:12:04,320
well for

00:12:01,120 --> 00:12:07,839
the big programs for the

00:12:04,320 --> 00:12:10,639
some more advanced features like the

00:12:07,839 --> 00:12:12,560
error reporting navigation departuring

00:12:10,639 --> 00:12:14,800
they have to be

00:12:12,560 --> 00:12:16,240
they have to be built on top of the

00:12:14,800 --> 00:12:19,360
program analysis

00:12:16,240 --> 00:12:19,360
including checking

00:12:20,560 --> 00:12:27,600
so before continuing the my talk that

00:12:23,839 --> 00:12:29,680
i want to quickly uh define

00:12:27,600 --> 00:12:33,360
uh quickly and explain some of the

00:12:29,680 --> 00:12:33,360
levels of program analysis

00:12:33,440 --> 00:12:37,360
so some program analysis are really

00:12:36,320 --> 00:12:40,320
complicated but

00:12:37,360 --> 00:12:41,440
some of the program analysis are really

00:12:40,320 --> 00:12:44,800
trivial or

00:12:41,440 --> 00:12:45,120
it's easy so the one of the most trivial

00:12:44,800 --> 00:12:48,720
one

00:12:45,120 --> 00:12:52,160
is the text-based analysis i go here so

00:12:48,720 --> 00:12:55,440
in that case that we see the input is

00:12:52,160 --> 00:12:58,320
an uh sequence of characters so

00:12:55,440 --> 00:12:58,880
running equal io dot get s it means that

00:12:58,320 --> 00:13:02,000
uh

00:12:58,880 --> 00:13:05,600
the sequence of l and i at n and e

00:13:02,000 --> 00:13:08,560
and yeah like that so this analysis

00:13:05,600 --> 00:13:09,440
is not very strong so we can do

00:13:08,560 --> 00:13:13,040
something like that

00:13:09,440 --> 00:13:17,360
lying is too long or uh some

00:13:13,040 --> 00:13:20,480
uh you shouldn't uh you it's

00:13:17,360 --> 00:13:24,800
uh writing some non-ascii characters in

00:13:20,480 --> 00:13:24,800
the code is prohibited world like that

00:13:24,880 --> 00:13:30,720
so we can uh you can think of the

00:13:28,480 --> 00:13:33,360
some a bit advanced variable the

00:13:30,720 --> 00:13:37,680
syntactic analysis cycle here

00:13:33,360 --> 00:13:40,800
so in this case the program analyzer

00:13:37,680 --> 00:13:42,720
knows that the input is a syntax tree of

00:13:40,800 --> 00:13:46,560
ruby programs

00:13:42,720 --> 00:13:49,360
so running equal io.gets they know that

00:13:46,560 --> 00:13:50,480
it is an assignment to a local variable

00:13:49,360 --> 00:13:52,320
called rhyme

00:13:50,480 --> 00:13:54,000
and the right hand side of the

00:13:52,320 --> 00:13:57,360
assignment is methodical

00:13:54,000 --> 00:14:01,199
and the receiver is a local variable

00:13:57,360 --> 00:14:04,720
but yeah but that's it from the

00:14:01,199 --> 00:14:08,240
syntax we know so

00:14:04,720 --> 00:14:10,079
uh it can be

00:14:08,240 --> 00:14:11,279
used to implement some kind of the

00:14:10,079 --> 00:14:14,399
syntax highlighting

00:14:11,279 --> 00:14:15,199
or folding or you may know that the

00:14:14,399 --> 00:14:19,279
vocab

00:14:15,199 --> 00:14:22,959
is basically at this level so it can

00:14:19,279 --> 00:14:26,079
produce some of the ranging uh

00:14:22,959 --> 00:14:29,120
linking diagnostics

00:14:26,079 --> 00:14:32,399
so in this case we can see that

00:14:29,120 --> 00:14:34,959
uh there is a message called and

00:14:32,399 --> 00:14:36,399
there is no argument and there is some

00:14:34,959 --> 00:14:39,040
parenthesis

00:14:36,399 --> 00:14:40,480
so that workout may say uh we can

00:14:39,040 --> 00:14:43,920
develop some binges

00:14:40,480 --> 00:14:44,800
to say that we we can omit the

00:14:43,920 --> 00:14:48,000
parenthesis

00:14:44,800 --> 00:14:49,279
in ruby uh if there is no argument given

00:14:48,000 --> 00:14:52,010
for the method called

00:14:49,279 --> 00:14:54,399
or maybe the opposite word exactly

00:14:52,010 --> 00:14:57,440
[Music]

00:14:54,399 --> 00:15:01,040
the most complicated one in the groups

00:14:57,440 --> 00:15:03,920
are the semantic analysis

00:15:01,040 --> 00:15:05,120
so it is something like the type

00:15:03,920 --> 00:15:08,399
checkers or

00:15:05,120 --> 00:15:11,920
the more uh smart other

00:15:08,399 --> 00:15:15,360
analyzers knows so

00:15:11,920 --> 00:15:18,160
we know that the every will be

00:15:15,360 --> 00:15:18,880
called in the project and we can do some

00:15:18,160 --> 00:15:22,560
listening

00:15:18,880 --> 00:15:25,120
much more uh smarter

00:15:22,560 --> 00:15:26,320
so they may know that type of variable

00:15:25,120 --> 00:15:29,680
is that

00:15:26,320 --> 00:15:32,959
the type of the io local variable is io

00:15:29,680 --> 00:15:35,279
and it may it has a get message

00:15:32,959 --> 00:15:36,560
and may be changed in one year for

00:15:35,279 --> 00:15:40,079
example

00:15:36,560 --> 00:15:42,800
so the some of the advanced

00:15:40,079 --> 00:15:44,639
language features by the navigations or

00:15:42,800 --> 00:15:46,959
completions refactoring

00:15:44,639 --> 00:15:48,880
these features needs discovery of

00:15:46,959 --> 00:15:52,240
analysis

00:15:48,880 --> 00:15:55,440
and it is really complicated to

00:15:52,240 --> 00:15:59,440
implement the analysis

00:15:55,440 --> 00:16:03,440
so it means that the ide development is

00:15:59,440 --> 00:16:06,320
super difficult because the ide products

00:16:03,440 --> 00:16:07,199
need own program analyzers and because

00:16:06,320 --> 00:16:10,160
that they have

00:16:07,199 --> 00:16:12,320
a different set of apis or they are

00:16:10,160 --> 00:16:15,759
implemented in different technology

00:16:12,320 --> 00:16:18,399
different languages we need to provide

00:16:15,759 --> 00:16:20,240
the we need to make a lot of the

00:16:18,399 --> 00:16:23,519
analyzer implementations

00:16:20,240 --> 00:16:25,680
and the first thing is uh they provide

00:16:23,519 --> 00:16:26,639
essentially the same set of features we

00:16:25,680 --> 00:16:28,959
need to

00:16:26,639 --> 00:16:29,759
develop an analyzer board we might we

00:16:28,959 --> 00:16:32,079
need to

00:16:29,759 --> 00:16:33,440
develop another analyzer for general

00:16:32,079 --> 00:16:36,800
studio code

00:16:33,440 --> 00:16:39,920
for it is for being so yeah it's a

00:16:36,800 --> 00:16:39,920
very bad situation

00:16:40,320 --> 00:16:46,720
so yeah then it's

00:16:43,600 --> 00:16:52,399
it's clear that what we should do

00:16:46,720 --> 00:16:53,839
next uh we want to extract the analysis

00:16:52,399 --> 00:16:56,079
so we want to extract some

00:16:53,839 --> 00:16:58,560
spanish-specific ide features

00:16:56,079 --> 00:17:00,399
and yeah we make some separation from

00:16:58,560 --> 00:17:03,440
the ide front-ends

00:17:00,399 --> 00:17:04,079
and the program analysis and we can

00:17:03,440 --> 00:17:07,199
share

00:17:04,079 --> 00:17:11,360
the program analysis analyzer engines

00:17:07,199 --> 00:17:15,679
uh between the ide front ends

00:17:11,360 --> 00:17:18,880
and yeah it is the protocol called rlsp

00:17:15,679 --> 00:17:22,959
it is designed by microsoft and

00:17:18,880 --> 00:17:26,559
it's it's released five years ago

00:17:22,959 --> 00:17:28,960
so this is an text from the rsp website

00:17:26,559 --> 00:17:31,039
a running server is meant to provide to

00:17:28,960 --> 00:17:32,559
run it specific smart and communicate

00:17:31,039 --> 00:17:34,880
with development tools

00:17:32,559 --> 00:17:37,919
over a protocol that enables intel

00:17:34,880 --> 00:17:41,520
process communication

00:17:37,919 --> 00:17:43,280
the yeah so

00:17:41,520 --> 00:17:46,160
it means that intel process

00:17:43,280 --> 00:17:49,200
communication it means that

00:17:46,160 --> 00:17:51,120
they don't have any assumption of the

00:17:49,200 --> 00:17:53,919
implementation technology of the

00:17:51,120 --> 00:17:57,200
language servers

00:17:53,919 --> 00:17:59,120
i mean that we can implement just

00:17:57,200 --> 00:18:03,039
language servers in the lead

00:17:59,120 --> 00:18:05,440
and yeah so we did that

00:18:03,039 --> 00:18:07,200
and yeah i want you to know that uh the

00:18:05,440 --> 00:18:10,960
rsp is supported by

00:18:07,200 --> 00:18:13,440
vs code and many a lot of text edges

00:18:10,960 --> 00:18:16,559
including image beams sublime text

00:18:13,440 --> 00:18:19,679
yeah so it's very popular

00:18:16,559 --> 00:18:19,679
technology today

00:18:20,400 --> 00:18:29,039
so then the ide development is

00:18:25,120 --> 00:18:30,720
clearly improved so we need to

00:18:29,039 --> 00:18:33,039
implement some language specific

00:18:30,720 --> 00:18:36,640
features based on lsb

00:18:33,039 --> 00:18:37,200
and the ide front and right bs called

00:18:36,640 --> 00:18:40,320
email

00:18:37,200 --> 00:18:42,960
being they can use the analyzer the

00:18:40,320 --> 00:18:44,000
one analyzer and they communicate

00:18:42,960 --> 00:18:46,400
between

00:18:44,000 --> 00:18:47,360
uh that documentation between the ieee

00:18:46,400 --> 00:18:50,880
front end

00:18:47,360 --> 00:18:56,160
and fundraiser uh defined on lsp

00:18:50,880 --> 00:18:59,600
so yeah it is that yeah it is a great

00:18:56,160 --> 00:18:59,600
outcome of the lsp

00:18:59,919 --> 00:19:04,160
there are several outlandish servers for

00:19:02,720 --> 00:19:06,559
ruby

00:19:04,160 --> 00:19:07,760
steve has along with server and

00:19:06,559 --> 00:19:10,799
stratograph has

00:19:07,760 --> 00:19:14,000
star graph is around server and

00:19:10,799 --> 00:19:14,720
yeah strobe it is an uh static type

00:19:14,000 --> 00:19:17,120
checker by

00:19:14,720 --> 00:19:19,679
strike they are implemented in c plus

00:19:17,120 --> 00:19:23,600
plus but they also support the

00:19:19,679 --> 00:19:26,559
luggage server and and

00:19:23,600 --> 00:19:28,320
one of the most popular vs code

00:19:26,559 --> 00:19:31,520
extension for adobe programming

00:19:28,320 --> 00:19:32,640
is that we escort ub and it has its own

00:19:31,520 --> 00:19:35,760
language server

00:19:32,640 --> 00:19:38,960
and it is implemented in typescript

00:19:35,760 --> 00:19:42,240
but yeah in this talk i focus on

00:19:38,960 --> 00:19:43,919
steve and yeah i want to explain how the

00:19:42,240 --> 00:19:46,960
language server

00:19:43,919 --> 00:19:48,320
implementation will be and then i want

00:19:46,960 --> 00:19:52,240
to share some of the

00:19:48,320 --> 00:19:54,720
uh tricks i found i implemented for

00:19:52,240 --> 00:19:56,320
achievement to make the better

00:19:54,720 --> 00:19:59,039
implementation

00:19:56,320 --> 00:19:59,039
in the bee

00:20:00,799 --> 00:20:06,799
so this is a dialogue diagram of the

00:20:04,720 --> 00:20:10,080
architecture of steep

00:20:06,799 --> 00:20:14,720
so there are some ide front end at the

00:20:10,080 --> 00:20:18,080
left and the step is at the right

00:20:14,720 --> 00:20:19,679
so ide front-end it means that vs code

00:20:18,080 --> 00:20:22,799
for e-max or

00:20:19,679 --> 00:20:26,880
some hdls they start they

00:20:22,799 --> 00:20:31,280
inbox steve's process and

00:20:26,880 --> 00:20:35,679
they have some communication on pipes

00:20:31,280 --> 00:20:39,039
it is the std ios std input output

00:20:35,679 --> 00:20:42,400
instead so the usb message

00:20:39,039 --> 00:20:43,520
lsp events are sent from ide front end

00:20:42,400 --> 00:20:46,720
to steve

00:20:43,520 --> 00:20:50,080
and the language server component in the

00:20:46,720 --> 00:20:52,960
perceived side and they found some

00:20:50,080 --> 00:20:53,600
uh yeah they found something they should

00:20:52,960 --> 00:20:56,400
know

00:20:53,600 --> 00:20:58,400
and they should there will be some

00:20:56,400 --> 00:20:59,520
communication between rugged server and

00:20:58,400 --> 00:21:02,799
package

00:20:59,520 --> 00:21:06,880
and finally the runway server sense

00:21:02,799 --> 00:21:06,880
the response to ide fronting

00:21:07,520 --> 00:21:12,720
let's see more a bit more detail of the

00:21:10,000 --> 00:21:15,760
lsp communications

00:21:12,720 --> 00:21:16,400
assume you you are writing in some

00:21:15,760 --> 00:21:20,159
editor

00:21:16,400 --> 00:21:22,880
and you type a new character a

00:21:20,159 --> 00:21:24,159
then uh did change text document

00:21:22,880 --> 00:21:27,200
notification

00:21:24,159 --> 00:21:30,880
will be sent from the ide front end to

00:21:27,200 --> 00:21:35,200
steve it is a json object

00:21:30,880 --> 00:21:38,320
and it has method and some parameters

00:21:35,200 --> 00:21:42,080
and it contains some information that uh

00:21:38,320 --> 00:21:45,840
which chain which file was changed and

00:21:42,080 --> 00:21:45,840
how that change is

00:21:46,320 --> 00:21:49,360
and the varnish server component

00:21:48,799 --> 00:21:52,880
obviously

00:21:49,360 --> 00:21:55,360
perceives the events and they know that

00:21:52,880 --> 00:21:58,159
okay this file is changed so we need to

00:21:55,360 --> 00:22:02,320
update the source code in the server

00:21:58,159 --> 00:22:02,320
and then it starts type checking

00:22:04,000 --> 00:22:09,919
so after the type checking uh steep

00:22:06,960 --> 00:22:13,600
deducts attack error

00:22:09,919 --> 00:22:15,919
then it will send another notification

00:22:13,600 --> 00:22:18,880
from the star value client it's a

00:22:15,919 --> 00:22:22,799
published diagnostics notification

00:22:18,880 --> 00:22:26,320
and it is also a json object like this

00:22:22,799 --> 00:22:29,840
and it has message and some parameters

00:22:26,320 --> 00:22:33,360
the file is this and there are some

00:22:29,840 --> 00:22:36,559
diagnostics at the bench is this

00:22:33,360 --> 00:22:37,360
and the message is that a type io does

00:22:36,559 --> 00:22:41,280
not have

00:22:37,360 --> 00:22:44,400
method like that

00:22:41,280 --> 00:22:45,360
and the ide front end receives the

00:22:44,400 --> 00:22:48,480
notification

00:22:45,360 --> 00:22:50,720
and it will detect that oh there should

00:22:48,480 --> 00:22:54,240
be some kind of the error message

00:22:50,720 --> 00:22:56,000
and it shows some uh indicator in this

00:22:54,240 --> 00:22:58,960
case that it prints uh

00:22:56,000 --> 00:22:59,840
it it shows a red underlying under the

00:22:58,960 --> 00:23:02,159
text

00:22:59,840 --> 00:23:05,360
and yeah you will find that oh there is

00:23:02,159 --> 00:23:05,360
something like error here

00:23:05,440 --> 00:23:10,960
so this is a very quick demonstration of

00:23:08,159 --> 00:23:10,960
the how the

00:23:11,039 --> 00:23:17,200
how the ide front ends and language

00:23:14,159 --> 00:23:19,760
server communicates

00:23:17,200 --> 00:23:20,880
there are a lot of lsp events some of

00:23:19,760 --> 00:23:24,000
them

00:23:20,880 --> 00:23:25,200
about that text files are changed for

00:23:24,000 --> 00:23:28,400
some of the

00:23:25,200 --> 00:23:31,840
uh events uh completion definition

00:23:28,400 --> 00:23:32,640
name they are used to tell the language

00:23:31,840 --> 00:23:36,320
server that

00:23:32,640 --> 00:23:39,679
user is trying to complete something

00:23:36,320 --> 00:23:41,600
or they want to go to definition or they

00:23:39,679 --> 00:23:44,080
are trying to rename something for

00:23:41,600 --> 00:23:46,320
example

00:23:44,080 --> 00:23:48,159
the server and client the relationship

00:23:46,320 --> 00:23:50,559
of the example and clients should be

00:23:48,159 --> 00:23:51,760
something similar to web server and web

00:23:50,559 --> 00:23:54,880
browser but

00:23:51,760 --> 00:23:58,080
there is a difference that lsp allows

00:23:54,880 --> 00:24:01,200
sending the message from

00:23:58,080 --> 00:24:02,159
server to the ide front end publish

00:24:01,200 --> 00:24:05,360
diagnostics

00:24:02,159 --> 00:24:08,720
is that one one of the examples and

00:24:05,360 --> 00:24:13,120
there are some other events

00:24:08,720 --> 00:24:13,120
which is sent from savage client

00:24:13,919 --> 00:24:16,960
and yeah this is the simplified source

00:24:16,159 --> 00:24:20,080
code of the

00:24:16,960 --> 00:24:23,279
implementation of the language server

00:24:20,080 --> 00:24:26,640
there is a main group it receives

00:24:23,279 --> 00:24:29,760
some events from the client and then

00:24:26,640 --> 00:24:33,039
we see the method of the event if

00:24:29,760 --> 00:24:33,760
it is text document this change so it

00:24:33,039 --> 00:24:36,880
means that

00:24:33,760 --> 00:24:38,240
user type some code and the text code is

00:24:36,880 --> 00:24:41,440
changed

00:24:38,240 --> 00:24:44,480
then yeah it tries to update

00:24:41,440 --> 00:24:47,679
the big source code in the

00:24:44,480 --> 00:24:48,559
steep and yeah detects some type of

00:24:47,679 --> 00:24:52,799
errors and

00:24:48,559 --> 00:24:55,200
reports to the ide content

00:24:52,799 --> 00:24:56,000
that's it yeah this is a very simplified

00:24:55,200 --> 00:24:57,919
version but

00:24:56,000 --> 00:25:00,480
if we do something like that there is

00:24:57,919 --> 00:25:03,760
some problem

00:25:00,480 --> 00:25:07,039
so that if it runs it starts

00:25:03,760 --> 00:25:09,760
type checking on every single key h

00:25:07,039 --> 00:25:10,080
and it will block the user's interaction

00:25:09,760 --> 00:25:13,840
so

00:25:10,080 --> 00:25:17,200
the first you you type key

00:25:13,840 --> 00:25:17,600
json message will be sent and steve will

00:25:17,200 --> 00:25:20,240
start

00:25:17,600 --> 00:25:21,200
checking but then you continue typing

00:25:20,240 --> 00:25:25,360
the next key is

00:25:21,200 --> 00:25:28,559
s next json but it's still type checking

00:25:25,360 --> 00:25:29,919
you type a json will be sent but it's

00:25:28,559 --> 00:25:33,520
still type checking

00:25:29,919 --> 00:25:38,559
so you type your b code

00:25:33,520 --> 00:25:43,039
but uh just keep checking this prompt

00:25:38,559 --> 00:25:46,960
so this is a problem of responsiveness

00:25:43,039 --> 00:25:48,320
so we want to make the language server

00:25:46,960 --> 00:25:50,960
responsive

00:25:48,320 --> 00:25:53,120
to return the response quickly to the

00:25:50,960 --> 00:25:56,960
user's interaction

00:25:53,120 --> 00:26:00,440
but yeah if we did the implementation

00:25:56,960 --> 00:26:03,840
naively it will be really bad for

00:26:00,440 --> 00:26:06,400
responsiveness so i did some i

00:26:03,840 --> 00:26:09,600
implemented some tricks to make steep

00:26:06,400 --> 00:26:11,360
analysis more responsive

00:26:09,600 --> 00:26:14,799
and yeah i want to share some of the

00:26:11,360 --> 00:26:14,799
tricks uh today

00:26:16,960 --> 00:26:22,000
one of the most important one is

00:26:19,120 --> 00:26:25,200
incremental diet checking

00:26:22,000 --> 00:26:28,320
so it is very simple

00:26:25,200 --> 00:26:32,320
that uh we type check the b code

00:26:28,320 --> 00:26:35,360
it is affected by the change

00:26:32,320 --> 00:26:38,400
it will finish much faster because

00:26:35,360 --> 00:26:39,279
if there are 100 ruby files in the

00:26:38,400 --> 00:26:42,640
project

00:26:39,279 --> 00:26:46,640
but that if you change adobe code

00:26:42,640 --> 00:26:51,120
only one file is changed and the

00:26:46,640 --> 00:26:54,480
99 files are not changed at all

00:26:51,120 --> 00:26:58,720
so we can skip type checking the 99

00:26:54,480 --> 00:27:02,159
files but we need to type only one file

00:26:58,720 --> 00:27:05,520
it will be a really big

00:27:02,159 --> 00:27:08,960
improvement but then yeah

00:27:05,520 --> 00:27:11,840
so uh we say that uh we

00:27:08,960 --> 00:27:12,960
we have the fast pass and pro pass the

00:27:11,840 --> 00:27:16,320
first pass is that

00:27:12,960 --> 00:27:20,240
when you change rdb file so it takes

00:27:16,320 --> 00:27:22,399
checks the only the file and it will be

00:27:20,240 --> 00:27:23,279
fast enough because that type of

00:27:22,399 --> 00:27:27,360
checking the v

00:27:23,279 --> 00:27:30,640
file takes 500 milliseconds to

00:27:27,360 --> 00:27:31,840
one second uh of course it depends on

00:27:30,640 --> 00:27:35,200
the number of the

00:27:31,840 --> 00:27:38,480
v5 but yeah

00:27:35,200 --> 00:27:41,360
it cannot be super slow

00:27:38,480 --> 00:27:42,960
it will be in yeah it will finish in one

00:27:41,360 --> 00:27:45,520
second

00:27:42,960 --> 00:27:45,520
like that

00:27:46,159 --> 00:27:50,080
so this is pass and the slow pass is

00:27:48,640 --> 00:27:54,080
that when you change

00:27:50,080 --> 00:27:57,120
some of the rbs files so

00:27:54,080 --> 00:28:00,559
uh rbs file defines the

00:27:57,120 --> 00:28:03,840
types and interfaces of your

00:28:00,559 --> 00:28:08,159
usb program is something like the uh

00:28:03,840 --> 00:28:11,440
d dot ts of the type script or the

00:28:08,159 --> 00:28:15,440
from the uh you may think of that

00:28:11,440 --> 00:28:18,799
it's a some header file in c programming

00:28:15,440 --> 00:28:20,880
so the dot c file editing is uh not very

00:28:18,799 --> 00:28:24,080
slow because that it only

00:28:20,880 --> 00:28:27,360
compiles the the

00:28:24,080 --> 00:28:30,880
the source code file but that if you

00:28:27,360 --> 00:28:34,320
change the header part it will be

00:28:30,880 --> 00:28:36,159
that many decompilation will happen

00:28:34,320 --> 00:28:37,600
so the same thing is happening to the

00:28:36,159 --> 00:28:40,880
rbs files

00:28:37,600 --> 00:28:41,200
so it is slow it requires type checking

00:28:40,880 --> 00:28:43,600
all

00:28:41,200 --> 00:28:44,240
offset to be called and it might take

00:28:43,600 --> 00:28:45,919
minutes

00:28:44,240 --> 00:28:49,679
one minute to meet three minutes

00:28:45,919 --> 00:28:49,679
depending on the project size

00:28:51,440 --> 00:28:57,520
so to

00:28:54,480 --> 00:29:01,440
improve that bad experience

00:28:57,520 --> 00:29:04,720
i tried to introduce a new strategy

00:29:01,440 --> 00:29:07,679
that often quite fast

00:29:04,720 --> 00:29:08,000
so this is based on the observation of

00:29:07,679 --> 00:29:11,840
the

00:29:08,000 --> 00:29:12,720
how you are writing some programs so

00:29:11,840 --> 00:29:15,840
this is the

00:29:12,720 --> 00:29:18,640
example the the left uh

00:29:15,840 --> 00:29:20,799
the left is to be called it is in the

00:29:18,640 --> 00:29:24,240
text editor and you open that

00:29:20,799 --> 00:29:26,640
the second one is that rbs file and

00:29:24,240 --> 00:29:27,279
you have a lot of the files but it's not

00:29:26,640 --> 00:29:30,960
open

00:29:27,279 --> 00:29:31,520
in your editors so what will happen is

00:29:30,960 --> 00:29:34,399
that

00:29:31,520 --> 00:29:35,520
uh there are some twitter url method but

00:29:34,399 --> 00:29:38,640
it says that

00:29:35,520 --> 00:29:39,200
there is no twitter url method so you

00:29:38,640 --> 00:29:42,480
add some

00:29:39,200 --> 00:29:45,120
implementation and you add the result

00:29:42,480 --> 00:29:48,799
definition to rds file

00:29:45,120 --> 00:29:52,399
and the type check will happen again

00:29:48,799 --> 00:29:56,880
and the yeah the error is reported on

00:29:52,399 --> 00:30:00,240
the twitter url will disappear

00:29:56,880 --> 00:30:03,200
so and this is the uh

00:30:00,240 --> 00:30:04,080
the typical use case of the ide and text

00:30:03,200 --> 00:30:07,520
editing

00:30:04,080 --> 00:30:08,559
and the open files fast strategy will

00:30:07,520 --> 00:30:12,960
help to

00:30:08,559 --> 00:30:17,440
improve the responsiveness it tries to

00:30:12,960 --> 00:30:20,399
uh type check the open files

00:30:17,440 --> 00:30:21,919
so the open files have priority in the

00:30:20,399 --> 00:30:25,039
type checking

00:30:21,919 --> 00:30:28,240
and you will find the

00:30:25,039 --> 00:30:29,840
feedback on the editing and the files

00:30:28,240 --> 00:30:33,600
you are editing

00:30:29,840 --> 00:30:33,600
quickly so yeah

00:30:34,399 --> 00:30:38,000
i want to share the last tweak i

00:30:36,880 --> 00:30:41,200
implemented that's

00:30:38,000 --> 00:30:43,520
dropping the undulated code

00:30:41,200 --> 00:30:44,799
so the completion is that one of the

00:30:43,520 --> 00:30:47,840
most uh

00:30:44,799 --> 00:30:51,679
problematic ones because it should

00:30:47,840 --> 00:30:53,760
it needs more responsiveness

00:30:51,679 --> 00:30:55,440
so the completion is a problem that

00:30:53,760 --> 00:30:58,720
because that users

00:30:55,440 --> 00:31:01,679
have to wait for compilation candidates

00:30:58,720 --> 00:31:04,799
when they try to use completion so

00:31:01,679 --> 00:31:07,919
completion that uh

00:31:04,799 --> 00:31:09,200
you you need to wait the list of the

00:31:07,919 --> 00:31:12,399
completion items

00:31:09,200 --> 00:31:15,440
or you can just type the method names

00:31:12,399 --> 00:31:20,240
and the ide will

00:31:15,440 --> 00:31:20,240
make no sense so

00:31:21,120 --> 00:31:26,159
completion is that the responsiveness of

00:31:23,840 --> 00:31:27,600
the completion item generation is very

00:31:26,159 --> 00:31:30,960
important

00:31:27,600 --> 00:31:33,200
and one idea is that to drop the

00:31:30,960 --> 00:31:36,399
unrelated method definition

00:31:33,200 --> 00:31:37,919
from zdb source code so assume that you

00:31:36,399 --> 00:31:40,159
are trying to

00:31:37,919 --> 00:31:42,720
do some completion from the edius

00:31:40,159 --> 00:31:45,919
question method implementation

00:31:42,720 --> 00:31:46,320
then that means that we don't need to

00:31:45,919 --> 00:31:48,720
type

00:31:46,320 --> 00:31:49,679
information of the other method

00:31:48,720 --> 00:31:51,760
definitions

00:31:49,679 --> 00:31:52,799
because that it's clear that you are

00:31:51,760 --> 00:31:56,320
focusing on the

00:31:52,799 --> 00:31:56,799
edius question method so yeah it makes

00:31:56,320 --> 00:31:59,039
the

00:31:56,799 --> 00:32:01,039
type checking much faster and the

00:31:59,039 --> 00:32:04,399
completion item generation

00:32:01,039 --> 00:32:04,399
are very responsive

00:32:04,559 --> 00:32:10,480
so perhaps yeah i have seen the

00:32:08,159 --> 00:32:11,840
first version of this the architecture

00:32:10,480 --> 00:32:14,159
but this is the

00:32:11,840 --> 00:32:15,840
some of the updated version we

00:32:14,159 --> 00:32:18,080
implemented many tricks

00:32:15,840 --> 00:32:19,360
for responsiveness in the tactical

00:32:18,080 --> 00:32:21,200
implementation too

00:32:19,360 --> 00:32:22,559
it's not only the language server

00:32:21,200 --> 00:32:25,760
implementation but in

00:32:22,559 --> 00:32:28,000
typical implementation so today

00:32:25,760 --> 00:32:29,360
there is no clear boundary between the

00:32:28,000 --> 00:32:32,399
language server component

00:32:29,360 --> 00:32:35,519
and the typical components in the

00:32:32,399 --> 00:32:37,919
in the implementation of steep it's a

00:32:35,519 --> 00:32:38,880
bad thing of course from the perspective

00:32:37,919 --> 00:32:41,919
of the

00:32:38,880 --> 00:32:42,880
how can we structure the to be called

00:32:41,919 --> 00:32:44,960
but

00:32:42,880 --> 00:32:46,080
yeah the responsiveness is more

00:32:44,960 --> 00:32:47,360
important

00:32:46,080 --> 00:32:50,720
[Music]

00:32:47,360 --> 00:32:54,000
so this is the conclusion

00:32:50,720 --> 00:32:56,720
so i've introduced i have explained some

00:32:54,000 --> 00:32:58,880
ide features need the advanced program

00:32:56,720 --> 00:33:01,279
analysis practice checking

00:32:58,880 --> 00:33:02,720
and the new protocol running server

00:33:01,279 --> 00:33:06,480
protocol arrows

00:33:02,720 --> 00:33:09,679
that you develop the ide

00:33:06,480 --> 00:33:10,240
in any set to develop some of the ide

00:33:09,679 --> 00:33:13,360
features

00:33:10,240 --> 00:33:16,080
in any language including the wii

00:33:13,360 --> 00:33:17,440
and that have been working for steve it

00:33:16,080 --> 00:33:20,000
is a static type checker

00:33:17,440 --> 00:33:20,559
and it's implemented in ruby and it

00:33:20,000 --> 00:33:24,000
supports

00:33:20,559 --> 00:33:26,720
usb features and yeah i have shared

00:33:24,000 --> 00:33:29,279
some of the experience and i found that

00:33:26,720 --> 00:33:32,799
responsiveness is that key requirement

00:33:29,279 --> 00:33:35,760
of a logical aspect of the yeah features

00:33:32,799 --> 00:33:38,480
and i have shared some tricks i made to

00:33:35,760 --> 00:33:53,840
make steve more responsive

00:33:38,480 --> 00:33:53,840
so yeah that's it that's it so thank you

00:34:04,240 --> 00:34:10,800
oh the joys of the live event as

00:34:07,360 --> 00:34:14,639
you said euruko 2021

00:34:10,800 --> 00:34:16,399
is on fire actually we are not on fire

00:34:14,639 --> 00:34:20,480
but yes we are on fire and

00:34:16,399 --> 00:34:24,399
also also our speaker obviously

00:34:20,480 --> 00:34:28,159
we're of fire we are

00:34:24,399 --> 00:34:28,639
safe nothing happened fire department is

00:34:28,159 --> 00:34:31,839
there

00:34:28,639 --> 00:34:34,000
resolving a problem on the other side of

00:34:31,839 --> 00:34:37,359
the complex so we are safe and we

00:34:34,000 --> 00:34:37,760
can continue here but this truly has

00:34:37,359 --> 00:34:42,720
been

00:34:37,760 --> 00:34:45,599
a different kind of event

00:34:42,720 --> 00:34:47,359
i'm not sure what is gonna happen

00:34:45,599 --> 00:34:49,919
happened during this day and i'm

00:34:47,359 --> 00:34:53,119
starting to be a little bit scared

00:34:49,919 --> 00:34:56,000
but there's a lot of good

00:34:53,119 --> 00:34:57,920
jokes on discord and there's also a

00:34:56,000 --> 00:35:01,040
couple of pictures

00:34:57,920 --> 00:35:04,800
pictures about what happened

00:35:01,040 --> 00:35:08,240
just so you

00:35:04,800 --> 00:35:10,960
thank you i wasn't able to follow your

00:35:08,240 --> 00:35:11,839
speech i am so sorry because i had a

00:35:10,960 --> 00:35:15,280
situation

00:35:11,839 --> 00:35:18,240
on the outside but but

00:35:15,280 --> 00:35:20,880
i can see from the stream chat that

00:35:18,240 --> 00:35:24,560
there are lots of thanks and

00:35:20,880 --> 00:35:27,680
comments like this talk is fantastic

00:35:24,560 --> 00:35:30,640
and there's also at least one question

00:35:27,680 --> 00:35:31,599
which language server would you recom

00:35:30,640 --> 00:35:37,040
recommend

00:35:31,599 --> 00:35:37,040
for vs code users at the moment

00:35:38,160 --> 00:35:45,359
okay so i mean that

00:35:42,320 --> 00:35:48,640
my recommendation it depends at uh

00:35:45,359 --> 00:35:51,280
the solutions you are trying to use

00:35:48,640 --> 00:35:53,359
if you uh solve it you are using solved

00:35:51,280 --> 00:35:56,480
as a survey provides

00:35:53,359 --> 00:35:59,599
some features for for

00:35:56,480 --> 00:36:02,720
ide users if you are trying to skip

00:35:59,599 --> 00:36:06,720
it's a steep lsp would be a good option

00:36:02,720 --> 00:36:09,839
and yeah otherwise the solar graph might

00:36:06,720 --> 00:36:13,280
be the option and

00:36:09,839 --> 00:36:16,880
and yeah i i really loved using the

00:36:13,280 --> 00:36:20,000
steve because i'm i'm developing

00:36:16,880 --> 00:36:23,680
i'm using steep usb server for

00:36:20,000 --> 00:36:27,440
the development rds gem and i also

00:36:23,680 --> 00:36:28,640
use the vs code to be built in language

00:36:27,440 --> 00:36:31,839
server

00:36:28,640 --> 00:36:32,640
so it is oh i mean that yeah it's

00:36:31,839 --> 00:36:36,240
difficult that

00:36:32,640 --> 00:36:37,760
i'm using for type checking and i also

00:36:36,240 --> 00:36:40,480
use the steep vs called

00:36:37,760 --> 00:36:41,839
language server for syntax high writing

00:36:40,480 --> 00:36:44,240
and they're folding

00:36:41,839 --> 00:36:45,359
some of the document symbol get some of

00:36:44,240 --> 00:36:48,400
the feature

00:36:45,359 --> 00:36:51,359
uh yeah steve doesn't

00:36:48,400 --> 00:36:54,000
uh provide some features and yeah vs

00:36:51,359 --> 00:36:54,000
code to be

00:36:56,800 --> 00:37:00,800
and we have some more comments and

00:36:59,119 --> 00:37:05,280
questions also

00:37:00,800 --> 00:37:06,240
uh somebody told uh commented on stream

00:37:05,280 --> 00:37:09,760
chats

00:37:06,240 --> 00:37:12,800
several times heard about lsp but this

00:37:09,760 --> 00:37:14,560
talk make me fallen for it with the

00:37:12,800 --> 00:37:17,839
heart emoji

00:37:14,560 --> 00:37:19,760
thank you and the questions does having

00:37:17,839 --> 00:37:22,240
to make steam

00:37:19,760 --> 00:37:23,520
interact closely with the lsp

00:37:22,240 --> 00:37:26,960
communication code

00:37:23,520 --> 00:37:27,680
also mean having to change the steep

00:37:26,960 --> 00:37:31,599
core

00:37:27,680 --> 00:37:34,839
code in ways you would prefer not to

00:37:31,599 --> 00:37:38,480
if steep was just a standalone type

00:37:34,839 --> 00:37:41,680
checker uh

00:37:38,480 --> 00:37:45,040
yes yeah oh yes

00:37:41,680 --> 00:37:48,079
so so when it was a stand

00:37:45,040 --> 00:37:51,200
around command line two the code was

00:37:48,079 --> 00:37:52,240
a bit more simpler but that you support

00:37:51,200 --> 00:37:54,960
some of the

00:37:52,240 --> 00:37:55,440
tricks for the responsiveness it's

00:37:54,960 --> 00:37:57,760
getting

00:37:55,440 --> 00:37:59,040
more complicated getting more and more

00:37:57,760 --> 00:38:02,560
complicated

00:37:59,040 --> 00:38:06,400
so yeah it's a experience

00:38:02,560 --> 00:38:08,960
yes yes and one question

00:38:06,400 --> 00:38:10,079
which language server would you rec uh

00:38:08,960 --> 00:38:13,680
did i ask this

00:38:10,079 --> 00:38:17,040
yes i had asked this but i'm gonna ask

00:38:13,680 --> 00:38:19,839
are you using a gem for implementing the

00:38:17,040 --> 00:38:19,839
lsp layer

00:38:20,320 --> 00:38:27,839
oh yes uh yeah uh in fact i'm using

00:38:24,320 --> 00:38:28,480
uh oh i'm sorry forget the exact names

00:38:27,839 --> 00:38:31,839
but uh

00:38:28,480 --> 00:38:34,960
language server to be gem was but

00:38:31,839 --> 00:38:37,040
it's a really simple laptop for

00:38:34,960 --> 00:38:38,000
some of the constants or some of the

00:38:37,040 --> 00:38:41,440
interfaces

00:38:38,000 --> 00:38:42,320
and yeah i think that it's totally up to

00:38:41,440 --> 00:38:45,440
you you can

00:38:42,320 --> 00:38:48,640
easily implement everything on yourself

00:38:45,440 --> 00:38:52,079
yeah and let's see there's

00:38:48,640 --> 00:38:53,440
uh also more comments like enlightening

00:38:52,079 --> 00:38:57,839
talk so that all

00:38:53,440 --> 00:38:59,040
thanks great insight into steep and lsp

00:38:57,839 --> 00:39:01,680
thank you

00:38:59,040 --> 00:39:04,040
great talk so that your work on gradual

00:39:01,680 --> 00:39:07,040
typing in ruby is much

00:39:04,040 --> 00:39:09,040
appreciated so thank you so much for

00:39:07,040 --> 00:39:11,760
coming here tonight

00:39:09,040 --> 00:39:14,640
today and and being a part of this

00:39:11,760 --> 00:39:16,000
amazing community now and hope to see

00:39:14,640 --> 00:39:19,119
you on discord

00:39:16,000 --> 00:39:22,000
discussions or at the stream

00:39:19,119 --> 00:39:22,960
chat there might be new questions later

00:39:22,000 --> 00:39:26,000
for you

00:39:22,960 --> 00:39:26,000

YouTube URL: https://www.youtube.com/watch?v=l_G4_qTqrGQ


