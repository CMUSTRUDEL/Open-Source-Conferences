Title: Lightning talk: Adding byebug to the Professional Puts Debugger Tool Set (Zhi Ren Guoy)
Publication date: 2021-06-03
Playlist: Euruko 2021 - Day 1
Description: 
	A crash course on getting started with the ‘byebug’ debugger.
Captions: 
	00:00:00,080 --> 00:00:04,960
and now it's time to learn some buy back

00:00:03,120 --> 00:00:08,720
tricks in this lightning talk

00:00:04,960 --> 00:00:09,599
by shiren way adding buyback to the

00:00:08,720 --> 00:00:13,120
professional

00:00:09,599 --> 00:00:14,080
potsday booker tool set is the topic of

00:00:13,120 --> 00:00:17,680
this

00:00:14,080 --> 00:00:18,240
speech quay is a software engineer at

00:00:17,680 --> 00:00:21,680
fave

00:00:18,240 --> 00:00:22,400
where he usually nerds alt using ruby on

00:00:21,680 --> 00:00:25,039
rails

00:00:22,400 --> 00:00:27,599
he is an agilist at heart keen on

00:00:25,039 --> 00:00:31,359
exploring ways to work better by

00:00:27,599 --> 00:00:34,120
adopting a lean and agile mindset

00:00:31,359 --> 00:00:35,440
he also tinkers with operations and

00:00:34,120 --> 00:00:38,000
infrastructure

00:00:35,440 --> 00:00:38,960
with the focus on improving continuous

00:00:38,000 --> 00:00:42,079
integration

00:00:38,960 --> 00:00:44,800
and deployment and now

00:00:42,079 --> 00:00:46,480
we will have a 15-minute crash course on

00:00:44,800 --> 00:00:49,840
getting started with

00:00:46,480 --> 00:00:53,840
the buy back depoker

00:00:49,840 --> 00:00:56,399
shiren please floor is yours

00:00:53,840 --> 00:00:56,960
hello gamers i'm gwe and my talk title

00:00:56,399 --> 00:00:58,879
today is

00:00:56,960 --> 00:01:01,840
adding buyback to the professional puts

00:00:58,879 --> 00:01:01,840
debugger 2 set

00:01:01,920 --> 00:01:05,280
before i start i'd like to give a quick

00:01:03,760 --> 00:01:06,080
shout out to everyone involved in

00:01:05,280 --> 00:01:09,280
organizing

00:01:06,080 --> 00:01:09,680
euro code 2021 thank you for all the

00:01:09,280 --> 00:01:11,200
time

00:01:09,680 --> 00:01:13,600
effort and work that went into this

00:01:11,200 --> 00:01:15,759
event also everyone general reminder to

00:01:13,600 --> 00:01:17,840
follow the code of conduct

00:01:15,759 --> 00:01:19,119
a bit about myself i'm currently a ruby

00:01:17,840 --> 00:01:21,520
on rails engineer

00:01:19,119 --> 00:01:23,040
i make terrible memes and bad puns don't

00:01:21,520 --> 00:01:23,920
worry you'll see some of them in this

00:01:23,040 --> 00:01:25,920
talk

00:01:23,920 --> 00:01:27,840
i co-host copy overflow a monthly

00:01:25,920 --> 00:01:30,079
podcast about software development

00:01:27,840 --> 00:01:31,759
and i mostly appear as ghost eat human

00:01:30,079 --> 00:01:33,840
on social media

00:01:31,759 --> 00:01:36,400
it's a pun on my name i don't actually

00:01:33,840 --> 00:01:36,400
eat people

00:01:36,560 --> 00:01:41,600
so i will assume most of us here in our

00:01:38,799 --> 00:01:43,600
day-to-day job ship working bugs

00:01:41,600 --> 00:01:44,720
oh sorry i meant features working

00:01:43,600 --> 00:01:46,640
features

00:01:44,720 --> 00:01:47,840
as part of that we write tests to ensure

00:01:46,640 --> 00:01:49,680
our code is working

00:01:47,840 --> 00:01:51,280
however what do we do when we find

00:01:49,680 --> 00:01:54,320
something wrong with the program

00:01:51,280 --> 00:01:55,439
and can't really pinpoint it well we

00:01:54,320 --> 00:01:57,920
usually read the code

00:01:55,439 --> 00:01:59,600
line by line going through the logic and

00:01:57,920 --> 00:02:00,880
trying to decipher why the code isn't

00:01:59,600 --> 00:02:02,560
working

00:02:00,880 --> 00:02:05,200
maybe we can find out what's the issue

00:02:02,560 --> 00:02:06,479
just by reading the code

00:02:05,200 --> 00:02:08,239
if you can't fix the issue just by

00:02:06,479 --> 00:02:10,879
reading the code alone we didn't upgrade

00:02:08,239 --> 00:02:13,520
to become professional puts debugger

00:02:10,879 --> 00:02:14,720
you know how it is puts here puts there

00:02:13,520 --> 00:02:16,239
puts everywhere

00:02:14,720 --> 00:02:17,840
and hopefully we can find out where the

00:02:16,239 --> 00:02:20,800
bug occurs

00:02:17,840 --> 00:02:22,879
but what if puts is not enough another

00:02:20,800 --> 00:02:24,640
way would be to use a debugger

00:02:22,879 --> 00:02:26,239
which is an application that allows us

00:02:24,640 --> 00:02:28,800
to run the program under control

00:02:26,239 --> 00:02:28,800
conditions

00:02:29,120 --> 00:02:32,560
let's take a look at this terrible

00:02:30,480 --> 00:02:34,000
example it's a function that takes a

00:02:32,560 --> 00:02:36,560
user id and a hash call

00:02:34,000 --> 00:02:37,440
referred if it's the first time a user

00:02:36,560 --> 00:02:38,879
gets referred

00:02:37,440 --> 00:02:40,800
they are not in the hash they get a

00:02:38,879 --> 00:02:42,640
discount if they have been referred

00:02:40,800 --> 00:02:44,640
before

00:02:42,640 --> 00:02:46,879
and already in the referred hash they

00:02:44,640 --> 00:02:48,720
don't get a discount

00:02:46,879 --> 00:02:50,319
look like naming things i had a hard

00:02:48,720 --> 00:02:52,080
time thinking of an example

00:02:50,319 --> 00:02:53,360
this code is deliberately bad for a

00:02:52,080 --> 00:02:55,040
reason

00:02:53,360 --> 00:02:56,959
so at the end of this program i sent a

00:02:55,040 --> 00:02:58,080
message for the user id1 and an empty

00:02:56,959 --> 00:03:00,319
hash

00:02:58,080 --> 00:03:03,599
i was expecting to get a discount

00:03:00,319 --> 00:03:05,040
however when you run it it returned zero

00:03:03,599 --> 00:03:07,440
let's take a look at the professional

00:03:05,040 --> 00:03:08,879
push debugger way to see it features a

00:03:07,440 --> 00:03:11,680
certain line of code we use

00:03:08,879 --> 00:03:13,440
puts to help mark the execution path as

00:03:11,680 --> 00:03:15,040
we didn't see any similar puts in the

00:03:13,440 --> 00:03:17,200
output we know that the code did not

00:03:15,040 --> 00:03:19,360
pass through there

00:03:17,200 --> 00:03:20,800
let's take a look at buyback it's a ruby

00:03:19,360 --> 00:03:23,920
debugger gem

00:03:20,800 --> 00:03:25,519
and supports mri 2.5 and above it does

00:03:23,920 --> 00:03:28,879
not support other implementations like

00:03:25,519 --> 00:03:30,319
jruby and truffle ruby

00:03:28,879 --> 00:03:32,080
we can run by about from the command

00:03:30,319 --> 00:03:33,360
line to debug a ruby program without

00:03:32,080 --> 00:03:34,879
editing it

00:03:33,360 --> 00:03:37,040
running by bug on the program shows the

00:03:34,879 --> 00:03:38,480
file content and on the left playback

00:03:37,040 --> 00:03:40,000
will show the number of lines and which

00:03:38,480 --> 00:03:42,000
line of debugger is currently at

00:03:40,000 --> 00:03:44,959
with an arrow at the bottom there will

00:03:42,000 --> 00:03:46,560
be a prompt where we can key in commands

00:03:44,959 --> 00:03:48,239
first thing to know is what commands we

00:03:46,560 --> 00:03:49,840
can input and what better way to find

00:03:48,239 --> 00:03:51,519
out than the call for help

00:03:49,840 --> 00:03:53,280
the help command will show all available

00:03:51,519 --> 00:03:53,599
commands don't worry if you don't see

00:03:53,280 --> 00:03:56,959
this

00:03:53,599 --> 00:03:58,640
we'll go through some of them quick note

00:03:56,959 --> 00:04:00,560
quitting by bug is much easier than

00:03:58,640 --> 00:04:02,400
quitting veeam

00:04:00,560 --> 00:04:03,760
let's take a look at the list command

00:04:02,400 --> 00:04:05,439
using the list command

00:04:03,760 --> 00:04:06,720
we'll show all the lines of source code

00:04:05,439 --> 00:04:08,159
and we'll also show the line of code

00:04:06,720 --> 00:04:11,439
you're currently pointing at

00:04:08,159 --> 00:04:13,439
in this case it's line 1. let's talk

00:04:11,439 --> 00:04:15,200
about the break and continue command

00:04:13,439 --> 00:04:16,799
the break command sets breakpoints in

00:04:15,200 --> 00:04:19,280
the source code and by but will stop

00:04:16,799 --> 00:04:21,040
execution when it reaches a breakpoint

00:04:19,280 --> 00:04:22,639
the continue command continues to

00:04:21,040 --> 00:04:23,360
program execution until the next

00:04:22,639 --> 00:04:28,080
breakpoint

00:04:23,360 --> 00:04:29,680
or at the end of the program

00:04:28,080 --> 00:04:31,360
let's take a look at the usage of break

00:04:29,680 --> 00:04:33,040
and continue

00:04:31,360 --> 00:04:36,320
based on the code logic the program

00:04:33,040 --> 00:04:36,320
ought to stop at line five

00:04:37,520 --> 00:04:40,960
so we want to stop at line five and to

00:04:39,360 --> 00:04:42,080
do that we need to set a breakpoint

00:04:40,960 --> 00:04:43,680
there

00:04:42,080 --> 00:04:45,120
the continue command will then execute

00:04:43,680 --> 00:04:46,240
until the next breakpoint on the end of

00:04:45,120 --> 00:04:48,080
the program

00:04:46,240 --> 00:04:49,680
we can see that the execution returns 0

00:04:48,080 --> 00:04:52,400
at line 3 rather than stop at the

00:04:49,680 --> 00:04:54,160
breakpoint and line 5.

00:04:52,400 --> 00:04:56,320
the next command is like the continue

00:04:54,160 --> 00:04:56,720
command except it proceeds to the next

00:04:56,320 --> 00:04:58,880
line

00:04:56,720 --> 00:05:01,199
instead of the next debug point or at

00:04:58,880 --> 00:05:02,800
the end of the software

00:05:01,199 --> 00:05:04,560
we know that the program returns at line

00:05:02,800 --> 00:05:06,160
three and we can confirm that by using

00:05:04,560 --> 00:05:08,000
the next command by performing a line by

00:05:06,160 --> 00:05:09,600
line execution

00:05:08,000 --> 00:05:11,919
buybar also supports conditional

00:05:09,600 --> 00:05:12,560
breakpoints we can get by bug to create

00:05:11,919 --> 00:05:15,120
breakpoints

00:05:12,560 --> 00:05:17,440
when specific conditions are met as an

00:05:15,120 --> 00:05:20,880
example i can set a breakpoint at line 3

00:05:17,440 --> 00:05:22,560
if user has been referred before

00:05:20,880 --> 00:05:24,160
let's say we are interested to know the

00:05:22,560 --> 00:05:26,080
values of variables

00:05:24,160 --> 00:05:27,520
being a professional push debugger we

00:05:26,080 --> 00:05:29,840
will put the variables to print the

00:05:27,520 --> 00:05:31,840
value out

00:05:29,840 --> 00:05:33,199
in buyback we can type the variable on

00:05:31,840 --> 00:05:34,800
the console and it will show us the

00:05:33,199 --> 00:05:35,759
value at the variable at the line it is

00:05:34,800 --> 00:05:38,160
at

00:05:35,759 --> 00:05:40,560
here we can see that line 3 user id has

00:05:38,160 --> 00:05:42,400
a value of 1.

00:05:40,560 --> 00:05:43,840
using bybach we can also mutate

00:05:42,400 --> 00:05:45,919
variables on the fly

00:05:43,840 --> 00:05:47,680
here it's another example program that

00:05:45,919 --> 00:05:50,720
prints the value of a

00:05:47,680 --> 00:05:52,000
in line 1 a is set to 1 and we use next

00:05:50,720 --> 00:05:54,880
to move the code execution

00:05:52,000 --> 00:05:55,680
to the next line we can then set a to be

00:05:54,880 --> 00:05:57,919
00:05:55,680 --> 00:06:00,639
and then at end of the program a has the

00:05:57,919 --> 00:06:02,240
value of 42.

00:06:00,639 --> 00:06:03,840
we can also use buyback to find out the

00:06:02,240 --> 00:06:05,360
scoping of variables

00:06:03,840 --> 00:06:07,360
we can use this to know which variables

00:06:05,360 --> 00:06:08,800
have global instance and even local

00:06:07,360 --> 00:06:10,240
scoping

00:06:08,800 --> 00:06:12,720
here's an example showing local

00:06:10,240 --> 00:06:14,240
variables

00:06:12,720 --> 00:06:16,880
there are times when we want to know

00:06:14,240 --> 00:06:18,560
when the value of a variable changes

00:06:16,880 --> 00:06:20,080
for the professional pus debugger this

00:06:18,560 --> 00:06:21,840
is where we have puts

00:06:20,080 --> 00:06:24,000
everywhere to track the values of a

00:06:21,840 --> 00:06:26,319
variable

00:06:24,000 --> 00:06:27,840
buyback provides another option we can

00:06:26,319 --> 00:06:28,400
use the display command to show the

00:06:27,840 --> 00:06:30,160
value of

00:06:28,400 --> 00:06:32,880
the variables every time the debugger

00:06:30,160 --> 00:06:34,400
stops the set command modifies by bug

00:06:32,880 --> 00:06:36,319
settings here

00:06:34,400 --> 00:06:38,000
setting line trays allow us to enable

00:06:36,319 --> 00:06:39,600
line execution tracing

00:06:38,000 --> 00:06:41,680
with these two commands we can see the

00:06:39,600 --> 00:06:43,280
value of referred after the execution of

00:06:41,680 --> 00:06:44,880
every line

00:06:43,280 --> 00:06:47,120
well it seems like we found out where

00:06:44,880 --> 00:06:49,280
the issue is

00:06:47,120 --> 00:06:50,240
the thing is we all write programs that

00:06:49,280 --> 00:06:52,080
rely on gems

00:06:50,240 --> 00:06:53,680
and this is where i feel that we're

00:06:52,080 --> 00:06:55,360
finally hitting the limits of being a

00:06:53,680 --> 00:06:58,240
professional puts debugger

00:06:55,360 --> 00:06:58,880
let's say we're using a third party jam

00:06:58,240 --> 00:07:01,039
in this case

00:06:58,880 --> 00:07:02,319
it's our qr code a gem to generate qr

00:07:01,039 --> 00:07:04,479
code

00:07:02,319 --> 00:07:06,000
there's no way you can use puts to debug

00:07:04,479 --> 00:07:06,960
unless we have access to the source code

00:07:06,000 --> 00:07:09,520
itself

00:07:06,960 --> 00:07:10,160
even if we do it's a hassle to clone the

00:07:09,520 --> 00:07:13,759
ripple

00:07:10,160 --> 00:07:15,919
at all the puts here and there etc etc

00:07:13,759 --> 00:07:18,720
in this case we can use buyback step

00:07:15,919 --> 00:07:20,639
command to get into gem methods

00:07:18,720 --> 00:07:21,759
here we can see that by bugs stepped

00:07:20,639 --> 00:07:24,400
into the code

00:07:21,759 --> 00:07:24,400
in the gem

00:07:24,880 --> 00:07:27,840
let's say we are stepping into all these

00:07:26,240 --> 00:07:29,360
methods in the gem just trying to find

00:07:27,840 --> 00:07:31,360
out where the issue is and we realize we

00:07:29,360 --> 00:07:33,759
are lost in the rabbit hole of code

00:07:31,360 --> 00:07:35,520
we can just ask where we are and it will

00:07:33,759 --> 00:07:37,360
show us where in the execution path we

00:07:35,520 --> 00:07:40,400
are at

00:07:37,360 --> 00:07:42,160
lastly using buy bug in rails

00:07:40,400 --> 00:07:44,479
the buyback jam is included in rails by

00:07:42,160 --> 00:07:46,879
default since rails 4.2

00:07:44,479 --> 00:07:48,319
in the code call the web method to debug

00:07:46,879 --> 00:07:51,039
the debugging will start at the line

00:07:48,319 --> 00:07:52,800
below the bypass method

00:07:51,039 --> 00:07:54,960
and here are all the references i used

00:07:52,800 --> 00:07:57,840
to prepare for this talk

00:07:54,960 --> 00:07:58,800
and that is all i hope you all learned

00:07:57,840 --> 00:08:02,960
something today

00:07:58,800 --> 00:08:02,960

YouTube URL: https://www.youtube.com/watch?v=YibyXazjnII


