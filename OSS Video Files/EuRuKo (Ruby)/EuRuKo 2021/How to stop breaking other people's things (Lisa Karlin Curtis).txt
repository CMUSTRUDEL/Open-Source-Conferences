Title: How to stop breaking other people's things (Lisa Karlin Curtis)
Publication date: 2021-06-03
Playlist: Euruko 2021 - Day 1
Description: 
	Breaking changes are sad. We’ve all been there; someone else changes their API in a way you weren’t expecting, and now you have a live-ops incident you need to fix urgently to get your software working again. Of course, many of us are on the other side too: we build APIs that other people’s software relies on.
Captions: 
	00:00:00,560 --> 00:00:08,720
are we ready to move on on our next

00:00:04,560 --> 00:00:11,759
speaker our next speaker

00:00:08,720 --> 00:00:15,200
is lisa carlin curtis and

00:00:11,759 --> 00:00:18,800
she is going to talk about how to stop

00:00:15,200 --> 00:00:21,520
breaking other people's things

00:00:18,800 --> 00:00:22,720
lisa is a full stack developer at

00:00:21,520 --> 00:00:25,519
gocardless

00:00:22,720 --> 00:00:26,760
she started out as a consultant working

00:00:25,519 --> 00:00:30,000
with the

00:00:26,760 --> 00:00:33,440
hmlc and then smart meters before

00:00:30,000 --> 00:00:36,320
accidentally becoming a developer

00:00:33,440 --> 00:00:38,879
i would like to hear more about that she

00:00:36,320 --> 00:00:40,480
she works mainly on a rails app with

00:00:38,879 --> 00:00:44,280
some forays in the gs

00:00:40,480 --> 00:00:47,360
front and and legacy

00:00:44,280 --> 00:00:49,600
php application

00:00:47,360 --> 00:00:50,879
she loves building stuff but is also

00:00:49,600 --> 00:00:53,760
really interested

00:00:50,879 --> 00:00:55,680
in how people interact with each other

00:00:53,760 --> 00:00:59,280
in a work environment

00:00:55,680 --> 00:01:03,520
particularly in software engineering

00:00:59,280 --> 00:01:06,560
having seen the old way at accenture

00:01:03,520 --> 00:01:09,119
large scale waterfall project she

00:01:06,560 --> 00:01:10,240
is now looking at taking the lessons

00:01:09,119 --> 00:01:13,760
from the

00:01:10,240 --> 00:01:17,680
from that environment to the startup

00:01:13,760 --> 00:01:21,600
scene and about the talk

00:01:17,680 --> 00:01:23,439
breaking changes changes are sad we have

00:01:21,600 --> 00:01:24,880
all been there someone else changes

00:01:23,439 --> 00:01:27,360
their ipa

00:01:24,880 --> 00:01:28,159
in a way you weren't expecting and now

00:01:27,360 --> 00:01:31,759
you have

00:01:28,159 --> 00:01:34,560
a live ops incident you need to fix

00:01:31,759 --> 00:01:35,920
urgently to get your software working

00:01:34,560 --> 00:01:38,400
again

00:01:35,920 --> 00:01:40,079
of course many of us are on the other

00:01:38,400 --> 00:01:43,840
side too

00:01:40,079 --> 00:01:47,759
we build aps that other people's

00:01:43,840 --> 00:01:49,920
software relies on all the discussions

00:01:47,759 --> 00:01:53,200
and later on questions

00:01:49,920 --> 00:01:56,240
to lisa you can put

00:01:53,200 --> 00:01:59,439
to the stream chat so

00:01:56,240 --> 00:02:03,520
please lisa flores yours

00:01:59,439 --> 00:02:03,520
you can start your presentation

00:02:04,320 --> 00:02:08,800
hi um thanks so much to have for having

00:02:07,439 --> 00:02:12,560
me you're okay

00:02:08,800 --> 00:02:13,680
this is really cool um so yeah i'm lisa

00:02:12,560 --> 00:02:16,080
carlin curtis

00:02:13,680 --> 00:02:18,319
uh born and bred in london england and

00:02:16,080 --> 00:02:20,080
i'm a software engineer at gocardless

00:02:18,319 --> 00:02:21,280
working in our financial orchestration

00:02:20,080 --> 00:02:23,440
team

00:02:21,280 --> 00:02:25,520
so we're a payments company and we focus

00:02:23,440 --> 00:02:27,280
on recurring payments

00:02:25,520 --> 00:02:28,879
and i'm going to be talking today about

00:02:27,280 --> 00:02:31,200
how to stop breaking other people's

00:02:28,879 --> 00:02:31,200
things

00:02:31,280 --> 00:02:35,360
we're going to start with a sad story a

00:02:33,920 --> 00:02:37,200
developer notices that they have an

00:02:35,360 --> 00:02:39,200
endpoint that has a really high latency

00:02:37,200 --> 00:02:40,800
compared to what they'd expect

00:02:39,200 --> 00:02:43,120
they find a performance issue with the

00:02:40,800 --> 00:02:44,560
code which is essentially an exacerbated

00:02:43,120 --> 00:02:47,200
m plus one problem

00:02:44,560 --> 00:02:49,519
and they deploy a fix the latency on the

00:02:47,200 --> 00:02:51,280
endpoint goes down by a half

00:02:49,519 --> 00:02:53,200
the developer stares at the beautiful

00:02:51,280 --> 00:02:54,800
graph with a lovely cliff shape

00:02:53,200 --> 00:02:56,720
right you know really high and nicely

00:02:54,800 --> 00:02:57,519
dropping and they feel really good about

00:02:56,720 --> 00:03:00,800
themselves

00:02:57,519 --> 00:03:02,640
pat themselves on the back and move on

00:03:00,800 --> 00:03:04,480
somewhere else in the world another

00:03:02,640 --> 00:03:07,200
developer gets paged

00:03:04,480 --> 00:03:08,959
their database cpu has spiked and it's

00:03:07,200 --> 00:03:10,159
struggling to handle the load

00:03:08,959 --> 00:03:12,640
and they've got a bit of a service

00:03:10,159 --> 00:03:15,519
degradation so

00:03:12,640 --> 00:03:16,640
what happened here they start

00:03:15,519 --> 00:03:19,200
investigating

00:03:16,640 --> 00:03:20,480
there's no obvious cause no recent

00:03:19,200 --> 00:03:22,080
changes were deployed

00:03:20,480 --> 00:03:24,560
the request volume is pretty much what

00:03:22,080 --> 00:03:26,319
they'd expect they start scaling down

00:03:24,560 --> 00:03:28,000
their cues to relieve the pressure

00:03:26,319 --> 00:03:29,680
which seems to solve the problem the

00:03:28,000 --> 00:03:32,159
database recovers

00:03:29,680 --> 00:03:34,000
and then they notice something strange

00:03:32,159 --> 00:03:34,400
they've suddenly started processing web

00:03:34,000 --> 00:03:37,840
hooks

00:03:34,400 --> 00:03:39,840
much more quickly than they used to

00:03:37,840 --> 00:03:41,280
so it turns out that our integrator

00:03:39,840 --> 00:03:41,920
which is on the right hand side of this

00:03:41,280 --> 00:03:43,920
slide

00:03:41,920 --> 00:03:45,120
had a webhook handler that would receive

00:03:43,920 --> 00:03:46,879
a web hook from us

00:03:45,120 --> 00:03:49,040
and then it would make a request back to

00:03:46,879 --> 00:03:50,480
find the status of the resource

00:03:49,040 --> 00:03:52,080
and the reason that they needed to do

00:03:50,480 --> 00:03:53,360
that was that the events could be

00:03:52,080 --> 00:03:54,720
delivered out of order

00:03:53,360 --> 00:03:56,480
and so they wanted to make sure that

00:03:54,720 --> 00:03:58,159
their status reflected what was in our

00:03:56,480 --> 00:03:59,599
database

00:03:58,159 --> 00:04:02,159
and this was actually the end point that

00:03:59,599 --> 00:04:03,840
we fixed earlier that day

00:04:02,159 --> 00:04:06,080
i'm going to use the word integrator a

00:04:03,840 --> 00:04:08,239
lot and what i mean is people who are

00:04:06,080 --> 00:04:09,360
integrating against the api that you are

00:04:08,239 --> 00:04:10,879
maintaining

00:04:09,360 --> 00:04:12,959
sometimes that will be inside your

00:04:10,879 --> 00:04:14,959
company like another team or sometimes

00:04:12,959 --> 00:04:17,680
it might be a customer

00:04:14,959 --> 00:04:18,400
so back to our story that webhook

00:04:17,680 --> 00:04:20,400
handler

00:04:18,400 --> 00:04:23,120
spent most of its time waiting for our

00:04:20,400 --> 00:04:24,479
response it was very i o bound right

00:04:23,120 --> 00:04:26,240
and then it would update its own

00:04:24,479 --> 00:04:28,240
database so the slow

00:04:26,240 --> 00:04:30,000
end point was basically rate limiting

00:04:28,240 --> 00:04:31,840
the web hook handler's interaction with

00:04:30,000 --> 00:04:34,479
its own database

00:04:31,840 --> 00:04:35,919
and it's worth noting that at gc our web

00:04:34,479 --> 00:04:36,720
hooks are often a result of batch

00:04:35,919 --> 00:04:38,479
processes

00:04:36,720 --> 00:04:40,320
so that means they're really spiky we

00:04:38,479 --> 00:04:41,280
send big sets of them a couple of times

00:04:40,320 --> 00:04:43,440
a day

00:04:41,280 --> 00:04:44,479
so as the endpoint got faster during

00:04:43,440 --> 00:04:46,320
those spikes

00:04:44,479 --> 00:04:48,320
the webhook handler started to apply

00:04:46,320 --> 00:04:50,160
more load to the database than normal

00:04:48,320 --> 00:04:53,199
to such an extent that an engineer got

00:04:50,160 --> 00:04:55,440
paged to resolve a service degradation

00:04:53,199 --> 00:04:57,280
the fix here is fairly simple scale down

00:04:55,440 --> 00:04:59,120
those web hook handlers so they process

00:04:57,280 --> 00:05:00,639
fewer web hooks and the database usage

00:04:59,120 --> 00:05:03,440
returns to normal

00:05:00,639 --> 00:05:05,520
or alternatively beef up your database

00:05:03,440 --> 00:05:07,840
but it shows us just how easy it is to

00:05:05,520 --> 00:05:09,280
accidentally break someone else's stuff

00:05:07,840 --> 00:05:12,080
even if you're trying to do right by

00:05:09,280 --> 00:05:12,080
your integrators

00:05:12,160 --> 00:05:15,440
so to set the scene here are some

00:05:13,759 --> 00:05:17,680
examples of changes that have broken

00:05:15,440 --> 00:05:20,400
code in the past

00:05:17,680 --> 00:05:22,800
traditional api changes right adding a

00:05:20,400 --> 00:05:24,240
mandatory field removing an endpoint or

00:05:22,800 --> 00:05:25,600
changing validation logic

00:05:24,240 --> 00:05:28,720
i think we're all comfortable with this

00:05:25,600 --> 00:05:30,479
stuff and why it could break things

00:05:28,720 --> 00:05:32,560
introducing a rate limit or even

00:05:30,479 --> 00:05:34,479
changing your rate limiting logic

00:05:32,560 --> 00:05:35,840
docker did this reasonably recently and

00:05:34,479 --> 00:05:37,039
i think they communicated it very

00:05:35,840 --> 00:05:39,520
clearly but it obviously

00:05:37,039 --> 00:05:40,960
impacted lots of integrators they also

00:05:39,520 --> 00:05:42,800
worked hard to provide tooling for

00:05:40,960 --> 00:05:44,080
integrators to self-serve and understand

00:05:42,800 --> 00:05:46,240
their impact which i thought was really

00:05:44,080 --> 00:05:49,280
cool

00:05:46,240 --> 00:05:50,240
changing an error response string so ago

00:05:49,280 --> 00:05:52,400
cardless

00:05:50,240 --> 00:05:54,400
we had an issue where we basically found

00:05:52,400 --> 00:05:56,080
a bug in our own code

00:05:54,400 --> 00:05:57,600
where we weren't respecting the except

00:05:56,080 --> 00:05:58,720
language header on a few of our

00:05:57,600 --> 00:06:00,720
endpoints

00:05:58,720 --> 00:06:02,479
so somebody would request us being like

00:06:00,720 --> 00:06:03,919
accept language fr

00:06:02,479 --> 00:06:06,000
and we would be like here is your

00:06:03,919 --> 00:06:07,440
english error and obviously

00:06:06,000 --> 00:06:09,759
you know we noticed this we were like

00:06:07,440 --> 00:06:12,319
this is bad we should fix this

00:06:09,759 --> 00:06:13,440
so we fixed it and then we got a call

00:06:12,319 --> 00:06:15,280
from an integrator

00:06:13,440 --> 00:06:16,880
being like you've broken my stuff and

00:06:15,280 --> 00:06:19,120
we're kind of looking around being like

00:06:16,880 --> 00:06:20,639
how have we broken your stuff and it

00:06:19,120 --> 00:06:21,919
turned out that they were relying on the

00:06:20,639 --> 00:06:24,000
previous behavior

00:06:21,919 --> 00:06:25,840
that on that particular endpoint we

00:06:24,000 --> 00:06:27,520
would ignore their accept language

00:06:25,840 --> 00:06:28,479
header and always respond with an

00:06:27,520 --> 00:06:30,240
english error

00:06:28,479 --> 00:06:32,240
and so they were then using that english

00:06:30,240 --> 00:06:33,919
error matching it against a string

00:06:32,240 --> 00:06:36,400
translating it and displaying something

00:06:33,919 --> 00:06:36,400
in the ui

00:06:37,039 --> 00:06:41,600
breaking apart a database transaction so

00:06:39,680 --> 00:06:43,680
this might seem obvious in some ways

00:06:41,600 --> 00:06:45,120
when we think about our own systems

00:06:43,680 --> 00:06:47,199
i think we all know that internal

00:06:45,120 --> 00:06:48,880
consistency is really important

00:06:47,199 --> 00:06:50,800
but it's relevant for your integrators

00:06:48,880 --> 00:06:52,160
too for example

00:06:50,800 --> 00:06:54,240
let's say you have a resource that can

00:06:52,160 --> 00:06:56,639
be either active or inactive

00:06:54,240 --> 00:06:58,319
and when it gets deactivated you create

00:06:56,639 --> 00:07:00,240
a row in an events table

00:06:58,319 --> 00:07:01,759
which has some narrative explaining why

00:07:00,240 --> 00:07:03,199
that's happened

00:07:01,759 --> 00:07:05,440
it would be quite natural for an

00:07:03,199 --> 00:07:07,520
integrator to build a ui that explains

00:07:05,440 --> 00:07:09,680
why this resource was deactivated

00:07:07,520 --> 00:07:11,680
using that event so that the user can

00:07:09,680 --> 00:07:13,520
understand what happened

00:07:11,680 --> 00:07:14,960
let's say in the past that event was

00:07:13,520 --> 00:07:17,759
created inside a database

00:07:14,960 --> 00:07:20,319
transaction with the status change and

00:07:17,759 --> 00:07:22,319
we want to break apart that transaction

00:07:20,319 --> 00:07:23,599
so there's now a new possibility for the

00:07:22,319 --> 00:07:25,680
integrator to handle

00:07:23,599 --> 00:07:27,599
where the resource can be inactive but

00:07:25,680 --> 00:07:28,800
there's no corresponding event to tell

00:07:27,599 --> 00:07:30,319
them why

00:07:28,800 --> 00:07:32,000
and it's entirely possible that the

00:07:30,319 --> 00:07:33,039
integrator has assumed that this just

00:07:32,000 --> 00:07:35,360
won't ever happen

00:07:33,039 --> 00:07:36,720
because it never has and so their ui

00:07:35,360 --> 00:07:39,680
will error if they can't find the

00:07:36,720 --> 00:07:39,680
corresponding event

00:07:40,160 --> 00:07:44,000
changing the timing of your batch

00:07:41,440 --> 00:07:46,160
processing so as i mentioned

00:07:44,000 --> 00:07:47,840
gocardless we're a payments company and

00:07:46,160 --> 00:07:50,160
we have a daily batch process which

00:07:47,840 --> 00:07:51,759
submits instructions to the banks

00:07:50,160 --> 00:07:53,440
and we can see from our logs that

00:07:51,759 --> 00:07:55,199
certain integrators create lots of

00:07:53,440 --> 00:07:57,599
payments just in time

00:07:55,199 --> 00:07:59,440
so just before our daily payment run and

00:07:57,599 --> 00:08:01,520
so we know that if we were to change our

00:07:59,440 --> 00:08:03,360
timings without communicating with them

00:08:01,520 --> 00:08:06,240
it would cause significant issues as a

00:08:03,360 --> 00:08:07,759
lot of their payments might be delayed

00:08:06,240 --> 00:08:10,479
and then the last example here is

00:08:07,759 --> 00:08:12,000
reducing the latency on an api call

00:08:10,479 --> 00:08:13,599
which is kind of what we discussed in

00:08:12,000 --> 00:08:15,599
that first example right

00:08:13,599 --> 00:08:18,960
probably a good thing overall but can

00:08:15,599 --> 00:08:18,960
have some negative side effects

00:08:19,440 --> 00:08:23,919
so today i'm going to define a breaking

00:08:21,759 --> 00:08:24,639
change as something where i as the api

00:08:23,919 --> 00:08:27,280
developer

00:08:24,639 --> 00:08:28,479
do a thing and someone's integration

00:08:27,280 --> 00:08:30,319
breaks

00:08:28,479 --> 00:08:32,000
and that happens fundamentally because

00:08:30,319 --> 00:08:32,880
an assumption that's been made by that

00:08:32,000 --> 00:08:36,479
integrator

00:08:32,880 --> 00:08:38,240
is no longer correct when this happens

00:08:36,479 --> 00:08:40,479
it's really easy to criticize the

00:08:38,240 --> 00:08:41,760
engineer who's made that assumption

00:08:40,479 --> 00:08:44,159
but i don't think that's particularly

00:08:41,760 --> 00:08:46,800
productive for a couple of reasons

00:08:44,159 --> 00:08:48,720
firstly assumptions are inevitable as a

00:08:46,800 --> 00:08:49,440
developer you really can't get anywhere

00:08:48,720 --> 00:08:51,279
without them

00:08:49,440 --> 00:08:53,440
so if you want people to write code

00:08:51,279 --> 00:08:56,160
they're going to make assumptions

00:08:53,440 --> 00:08:58,480
and secondly even if it's their fault

00:08:56,160 --> 00:09:00,399
it's often your problem

00:08:58,480 --> 00:09:02,880
possibly not if you're a google or an

00:09:00,399 --> 00:09:04,320
aws but for most companies if your

00:09:02,880 --> 00:09:06,000
integrators are feeling pain

00:09:04,320 --> 00:09:07,600
then you'll feel it too either

00:09:06,000 --> 00:09:11,120
immediately or in the long term when

00:09:07,600 --> 00:09:11,120
you're trying to renew contracts

00:09:11,279 --> 00:09:15,360
so how do these assumptions actually

00:09:13,200 --> 00:09:16,480
develop we can think of these in two

00:09:15,360 --> 00:09:19,680
categories as sort of

00:09:16,480 --> 00:09:21,600
explicit and implicit so these

00:09:19,680 --> 00:09:23,440
explicit assumptions are like an

00:09:21,600 --> 00:09:25,360
integrator asking a question

00:09:23,440 --> 00:09:28,080
getting an answer and then building

00:09:25,360 --> 00:09:30,560
their system based on that answer

00:09:28,080 --> 00:09:31,440
so your first step if you're building an

00:09:30,560 --> 00:09:33,839
integration

00:09:31,440 --> 00:09:35,200
is to look at the documentation it's

00:09:33,839 --> 00:09:37,200
worth noting here that

00:09:35,200 --> 00:09:39,279
people are quite lazy and they often

00:09:37,200 --> 00:09:40,880
skip to the examples and don't actually

00:09:39,279 --> 00:09:42,160
read any of the narrative texts that

00:09:40,880 --> 00:09:43,440
you've slaved over

00:09:42,160 --> 00:09:45,200
so you need to make sure that your

00:09:43,440 --> 00:09:47,519
snippets are super representative

00:09:45,200 --> 00:09:49,200
of how your like system is going to

00:09:47,519 --> 00:09:51,120
behave

00:09:49,200 --> 00:09:52,640
they might also look at support articles

00:09:51,120 --> 00:09:54,320
or blog posts

00:09:52,640 --> 00:09:56,000
perhaps stuff that you've published or

00:09:54,320 --> 00:09:57,360
maybe something that a third party's put

00:09:56,000 --> 00:09:59,279
online

00:09:57,360 --> 00:10:00,560
and then you have ad hoc communication

00:09:59,279 --> 00:10:03,279
and what i mean by this

00:10:00,560 --> 00:10:05,040
is random emails or phone calls maybe

00:10:03,279 --> 00:10:06,480
with like a pre-sales team or your

00:10:05,040 --> 00:10:08,079
solutions engineers

00:10:06,480 --> 00:10:09,519
it might be a conversation that gets had

00:10:08,079 --> 00:10:11,120
on a support ticket

00:10:09,519 --> 00:10:13,680
or emailing the friend that you have

00:10:11,120 --> 00:10:15,519
that used to work at the company

00:10:13,680 --> 00:10:17,120
all that kind of ad hoc communication is

00:10:15,519 --> 00:10:18,000
still driving the assumptions that

00:10:17,120 --> 00:10:19,360
integrator makes

00:10:18,000 --> 00:10:21,680
about how your software is going to

00:10:19,360 --> 00:10:23,920
behave

00:10:21,680 --> 00:10:25,680
other assumptions are more implicit

00:10:23,920 --> 00:10:26,320
industry standards are quite interesting

00:10:25,680 --> 00:10:27,920
here

00:10:26,320 --> 00:10:30,320
you send me a json response you're going

00:10:27,920 --> 00:10:32,880
to give me an application json header

00:10:30,320 --> 00:10:34,399
so i don't need my http client to tell

00:10:32,880 --> 00:10:36,240
me that it's going to be json

00:10:34,399 --> 00:10:37,920
because it can work it out for itself

00:10:36,240 --> 00:10:40,079
i'm going to assume as an integrator

00:10:37,920 --> 00:10:42,240
that that never changes

00:10:40,079 --> 00:10:43,360
similarly i assume that you will keep my

00:10:42,240 --> 00:10:45,279
secrets safe

00:10:43,360 --> 00:10:46,720
so if you tell me my access token was

00:10:45,279 --> 00:10:50,399
used to create something

00:10:46,720 --> 00:10:52,640
i'll assume it was probably me generally

00:10:50,399 --> 00:10:53,920
this is fine but in some cases you can

00:10:52,640 --> 00:10:56,320
find yourself in trouble

00:10:53,920 --> 00:10:57,760
particularly if these standards change

00:10:56,320 --> 00:10:58,560
we had a really bad incident at

00:10:57,760 --> 00:11:00,800
gocardless

00:10:58,560 --> 00:11:02,560
where we upgraded our ha proxy version

00:11:00,800 --> 00:11:03,519
which was observing the new industry

00:11:02,560 --> 00:11:05,920
standard

00:11:03,519 --> 00:11:07,120
of down casing all of our outgoing http

00:11:05,920 --> 00:11:09,200
headers

00:11:07,120 --> 00:11:11,040
now according to the official textbook

00:11:09,200 --> 00:11:12,560
http response headers should not be

00:11:11,040 --> 00:11:14,240
treated as case sensitive

00:11:12,560 --> 00:11:16,240
but a couple of key integrators have

00:11:14,240 --> 00:11:18,800
been relying on the previous behavior

00:11:16,240 --> 00:11:20,560
and had a significant outage and that

00:11:18,800 --> 00:11:22,240
outage was actually exacerbated by the

00:11:20,560 --> 00:11:23,040
fact that their requests were being

00:11:22,240 --> 00:11:24,480
processed

00:11:23,040 --> 00:11:26,399
but they weren't processing our

00:11:24,480 --> 00:11:27,920
responses and that meant that we had two

00:11:26,399 --> 00:11:30,480
systems that were out of sync in a

00:11:27,920 --> 00:11:32,240
really unfortunate way

00:11:30,480 --> 00:11:33,839
so finally let's talk about observed

00:11:32,240 --> 00:11:35,839
behavior

00:11:33,839 --> 00:11:37,680
as an integrator you want the engineers

00:11:35,839 --> 00:11:39,279
who run the services you use

00:11:37,680 --> 00:11:41,279
to be constantly improving them and

00:11:39,279 --> 00:11:43,279
adding features but in a way

00:11:41,279 --> 00:11:44,880
you also want them to not touch it so

00:11:43,279 --> 00:11:46,560
that you can be sure that its behavior

00:11:44,880 --> 00:11:48,640
won't change

00:11:46,560 --> 00:11:50,320
as soon as a developer sees something

00:11:48,640 --> 00:11:51,839
whether that's an undocumented header or

00:11:50,320 --> 00:11:53,519
an http response

00:11:51,839 --> 00:11:55,680
a batch process that happens at the same

00:11:53,519 --> 00:11:56,639
time each day or a particular api

00:11:55,680 --> 00:11:58,480
latency

00:11:56,639 --> 00:12:00,959
they assume it's reliable and they build

00:11:58,480 --> 00:12:02,959
their systems accordingly

00:12:00,959 --> 00:12:05,279
humans also patent match really really

00:12:02,959 --> 00:12:06,639
aggressively not just in software but in

00:12:05,279 --> 00:12:08,000
all walks of life

00:12:06,639 --> 00:12:10,000
you can see this in like the theory of

00:12:08,000 --> 00:12:11,839
language acquisition we find

00:12:10,000 --> 00:12:14,480
it really easy to convince ourselves

00:12:11,839 --> 00:12:16,079
that correlation equals causation

00:12:14,480 --> 00:12:17,600
and that means particularly if we can

00:12:16,079 --> 00:12:20,320
come up with an explanation

00:12:17,600 --> 00:12:21,279
of why a always means b however

00:12:20,320 --> 00:12:23,120
far-fetched

00:12:21,279 --> 00:12:24,959
we're really quick to accept and rely on

00:12:23,120 --> 00:12:27,519
it

00:12:24,959 --> 00:12:29,120
and when you stop to think about it this

00:12:27,519 --> 00:12:31,839
is quite bizarre

00:12:29,120 --> 00:12:33,839
given that we are all developers we're

00:12:31,839 --> 00:12:34,560
all employed to make changes to our own

00:12:33,839 --> 00:12:35,920
systems

00:12:34,560 --> 00:12:37,680
we should understand that they are

00:12:35,920 --> 00:12:39,760
constantly in flux

00:12:37,680 --> 00:12:40,959
we also all encounter interesting edge

00:12:39,760 --> 00:12:42,560
cases every day

00:12:40,959 --> 00:12:44,560
where someone has hit some incredibly

00:12:42,560 --> 00:12:46,160
unlikely scenario that causes your code

00:12:44,560 --> 00:12:48,160
to misbehave

00:12:46,160 --> 00:12:49,279
but somehow we all assume that everybody

00:12:48,160 --> 00:12:51,360
else's code

00:12:49,279 --> 00:12:53,839
will behave consistently and stay the

00:12:51,360 --> 00:12:53,839
same forever

00:12:54,880 --> 00:12:59,279
none of this stuff is new um so a great

00:12:57,360 --> 00:13:01,519
example of this if a bit retro

00:12:59,279 --> 00:13:04,079
is ms-dos which is obviously an old

00:13:01,519 --> 00:13:05,760
operating system from microsoft

00:13:04,079 --> 00:13:07,120
ms-dos was released with a number of

00:13:05,760 --> 00:13:09,440
documented interrupts

00:13:07,120 --> 00:13:10,240
calls hooks you know all that retro

00:13:09,440 --> 00:13:12,079
stuff

00:13:10,240 --> 00:13:13,519
but early application developers found

00:13:12,079 --> 00:13:15,839
that they weren't able to achieve

00:13:13,519 --> 00:13:17,680
everything that they wanted and this was

00:13:15,839 --> 00:13:20,240
made worse because microsoft would use

00:13:17,680 --> 00:13:22,240
undocumented calls in their own software

00:13:20,240 --> 00:13:24,959
so it became impossible to compete using

00:13:22,240 --> 00:13:28,480
what was only in the documentation

00:13:24,959 --> 00:13:30,320
so like all good engineers they started

00:13:28,480 --> 00:13:31,600
decompiling the operating system

00:13:30,320 --> 00:13:33,360
and they wrote these lists of

00:13:31,600 --> 00:13:34,880
undocumented information

00:13:33,360 --> 00:13:37,519
the most famous of which is probably

00:13:34,880 --> 00:13:39,440
ralph brown's interrupt list

00:13:37,519 --> 00:13:40,560
and this information was shared very

00:13:39,440 --> 00:13:43,120
very widely

00:13:40,560 --> 00:13:45,440
and so using these undocumented features

00:13:43,120 --> 00:13:46,880
became so widespread that microsoft

00:13:45,440 --> 00:13:48,160
couldn't change anything

00:13:46,880 --> 00:13:50,320
without breaking all of these

00:13:48,160 --> 00:13:51,440
applications that you people used every

00:13:50,320 --> 00:13:53,279
day

00:13:51,440 --> 00:13:55,199
particularly as an operating system

00:13:53,279 --> 00:13:56,560
these applications were a core part of

00:13:55,199 --> 00:13:58,160
their value proposition

00:13:56,560 --> 00:13:59,839
so breaking them clearly wasn't an

00:13:58,160 --> 00:14:01,519
option

00:13:59,839 --> 00:14:03,279
we can think of the interrupt list being

00:14:01,519 --> 00:14:03,839
analogous to someone writing a blog on

00:14:03,279 --> 00:14:05,519
medium

00:14:03,839 --> 00:14:08,079
called 10 things you didn't know that

00:14:05,519 --> 00:14:09,920
so-and-so's api could do

00:14:08,079 --> 00:14:13,760
you know it seems innocuous at first but

00:14:09,920 --> 00:14:13,760
it can cause you problems down the line

00:14:14,160 --> 00:14:17,519
some of these assumptions are also

00:14:15,839 --> 00:14:20,160
totally unconscious

00:14:17,519 --> 00:14:21,839
so once something is stable for a while

00:14:20,160 --> 00:14:23,440
we sort of just assume it will never

00:14:21,839 --> 00:14:25,360
break

00:14:23,440 --> 00:14:27,279
this is particularly obvious when it

00:14:25,360 --> 00:14:27,839
comes to resourcing choices by which i

00:14:27,279 --> 00:14:30,240
mean like

00:14:27,839 --> 00:14:32,399
how much cpu or memory to allocate to

00:14:30,240 --> 00:14:34,320
say a particular pod

00:14:32,399 --> 00:14:35,920
because the napkin math is always pretty

00:14:34,320 --> 00:14:37,760
haphazard

00:14:35,920 --> 00:14:40,399
so if we're all being honest what we do

00:14:37,760 --> 00:14:42,000
is we pick some numbers out of thin air

00:14:40,399 --> 00:14:44,160
watch it for a bit and then kind of

00:14:42,000 --> 00:14:46,000
change it until it seems happy

00:14:44,160 --> 00:14:48,000
and that works fine as long as what that

00:14:46,000 --> 00:14:49,600
pod is being asked to do is reasonably

00:14:48,000 --> 00:14:51,680
consistent over time

00:14:49,600 --> 00:14:52,720
but as we've discussed that might not be

00:14:51,680 --> 00:14:54,240
true

00:14:52,720 --> 00:14:56,000
we can think about this in our first

00:14:54,240 --> 00:14:59,839
story the database had plenty of

00:14:56,000 --> 00:15:01,360
resource until our endpoint got faster

00:14:59,839 --> 00:15:03,680
so if we want to stop breaking other

00:15:01,360 --> 00:15:07,360
people's things we need to help our

00:15:03,680 --> 00:15:09,839
integrators stop making bad assumptions

00:15:07,360 --> 00:15:10,720
when it comes to your docs document edge

00:15:09,839 --> 00:15:12,880
cases

00:15:10,720 --> 00:15:14,800
discoverability is also really important

00:15:12,880 --> 00:15:16,240
so think about seo so that's search

00:15:14,800 --> 00:15:18,880
engine optimization

00:15:16,240 --> 00:15:21,040
and also the search within your doc site

00:15:18,880 --> 00:15:21,519
and don't ever deliberately not document

00:15:21,040 --> 00:15:23,279
something

00:15:21,519 --> 00:15:24,639
if it's subject to change just call it

00:15:23,279 --> 00:15:25,600
out really clearly so there's no

00:15:24,639 --> 00:15:27,279
ambiguity

00:15:25,600 --> 00:15:30,240
it just gives the integrators the best

00:15:27,279 --> 00:15:32,320
chance of making a good choice

00:15:30,240 --> 00:15:34,079
support articles and blog posts keep

00:15:32,320 --> 00:15:34,480
your own religiously up to date and

00:15:34,079 --> 00:15:35,519
again

00:15:34,480 --> 00:15:38,160
try and make sure they're quite

00:15:35,519 --> 00:15:40,320
searchable if you do come across

00:15:38,160 --> 00:15:42,160
third-party blocks that are incorrect

00:15:40,320 --> 00:15:43,759
try contacting the author or commenting

00:15:42,160 --> 00:15:44,480
with the fix needed to make the guide

00:15:43,759 --> 00:15:46,160
work

00:15:44,480 --> 00:15:48,079
or even just point them at an equivalent

00:15:46,160 --> 00:15:50,000
page on your own doc site

00:15:48,079 --> 00:15:52,240
if you get unlucky that third party blog

00:15:50,000 --> 00:15:54,480
content can become the equivalent of

00:15:52,240 --> 00:15:56,079
ralph brown's interrupt list and can fix

00:15:54,480 --> 00:15:58,880
you to contracts that you really don't

00:15:56,079 --> 00:16:00,800
want to be fixed to

00:15:58,880 --> 00:16:03,040
when it comes to ad hoc communication

00:16:00,800 --> 00:16:04,720
consistency is key

00:16:03,040 --> 00:16:06,560
if a developer wants to understand what

00:16:04,720 --> 00:16:08,399
might break someone else's stuff

00:16:06,560 --> 00:16:10,720
they need to know what communication is

00:16:08,399 --> 00:16:11,440
going out ideally in a super searchable

00:16:10,720 --> 00:16:13,440
format

00:16:11,440 --> 00:16:15,440
so they can understand what assumptions

00:16:13,440 --> 00:16:17,600
might have been made as a result

00:16:15,440 --> 00:16:18,639
and in my experience lots of b2b

00:16:17,600 --> 00:16:20,880
software companies

00:16:18,639 --> 00:16:22,320
end up just sort of like emailing random

00:16:20,880 --> 00:16:24,639
pdfs around

00:16:22,320 --> 00:16:26,320
creating shared slack channels and at

00:16:24,639 --> 00:16:28,160
that point as an engineer you don't

00:16:26,320 --> 00:16:29,680
really stand a chance of knowing what

00:16:28,160 --> 00:16:31,920
assumptions might have been made as a

00:16:29,680 --> 00:16:33,279
result of all of that communication

00:16:31,920 --> 00:16:35,600
so if you're able to have a central

00:16:33,279 --> 00:16:37,360
repository of those kinds of materials

00:16:35,600 --> 00:16:38,880
you know it doesn't have to be public

00:16:37,360 --> 00:16:40,480
but something where you're repeatedly

00:16:38,880 --> 00:16:41,759
sharing the same information

00:16:40,480 --> 00:16:43,839
and ideally something where that

00:16:41,759 --> 00:16:45,759
information is not static so there's an

00:16:43,839 --> 00:16:47,360
expectation from your integrators that

00:16:45,759 --> 00:16:50,240
you might update that as your software

00:16:47,360 --> 00:16:52,320
changes over time

00:16:50,240 --> 00:16:54,160
when it comes to industry standards just

00:16:52,320 --> 00:16:56,160
follow them wherever you possibly can

00:16:54,160 --> 00:16:58,320
and flag really really loudly if you

00:16:56,160 --> 00:17:00,480
can't or where the industry hasn't yet

00:16:58,320 --> 00:17:01,920
settled

00:17:00,480 --> 00:17:03,600
and there's a lot to think about with

00:17:01,920 --> 00:17:05,280
observed behavior so we're going to give

00:17:03,600 --> 00:17:07,839
it its own slide here

00:17:05,280 --> 00:17:09,199
naming is really important particularly

00:17:07,839 --> 00:17:10,880
because developers don't read the

00:17:09,199 --> 00:17:12,400
narrative docs and just look at the

00:17:10,880 --> 00:17:14,400
examples

00:17:12,400 --> 00:17:16,480
one example is numbers that begin with

00:17:14,400 --> 00:17:18,559
zeros that often get truncated like

00:17:16,480 --> 00:17:20,640
company registration numbers

00:17:18,559 --> 00:17:22,880
um we've also we've got a field in our

00:17:20,640 --> 00:17:24,959
api called account number ending

00:17:22,880 --> 00:17:26,400
and unfortunately in australia some

00:17:24,959 --> 00:17:26,959
account numbers have letters in them

00:17:26,400 --> 00:17:29,679
which is

00:17:26,959 --> 00:17:31,520
you know just generally quite sad um but

00:17:29,679 --> 00:17:32,960
that does obviously trip integrators up

00:17:31,520 --> 00:17:34,640
even though that's a string

00:17:32,960 --> 00:17:36,799
you know we try and call that out really

00:17:34,640 --> 00:17:38,480
clearly in our docs by maybe have an

00:17:36,799 --> 00:17:39,520
example which has that edge case you

00:17:38,480 --> 00:17:41,039
know has the

00:17:39,520 --> 00:17:42,400
zero at the beginning of the string or

00:17:41,039 --> 00:17:43,919
has the letter if you're not going to

00:17:42,400 --> 00:17:46,080
expect it

00:17:43,919 --> 00:17:47,760
um you also want to use your

00:17:46,080 --> 00:17:49,600
documentation and communication to

00:17:47,760 --> 00:17:51,520
combat pattern matching

00:17:49,600 --> 00:17:53,679
if you know you could change your your

00:17:51,520 --> 00:17:55,919
batch timings call that out in the docs

00:17:53,679 --> 00:17:58,720
like we currently won this run this once

00:17:55,919 --> 00:18:00,720
a day at 11 am but it's likely to change

00:17:58,720 --> 00:18:01,840
and then expose information on your api

00:18:00,720 --> 00:18:03,120
that you might want to change

00:18:01,840 --> 00:18:05,039
even if in the back end it's just

00:18:03,120 --> 00:18:07,200
pointing at a string somewhere it's just

00:18:05,039 --> 00:18:09,840
a good flag for an integrator to be like

00:18:07,200 --> 00:18:12,000
hey this might not always be true

00:18:09,840 --> 00:18:13,360
and then restrict your own behavior both

00:18:12,000 --> 00:18:15,200
by documenting a limit

00:18:13,360 --> 00:18:17,600
and then implementing it in the code to

00:18:15,200 --> 00:18:19,600
ensure you keep to that commitment

00:18:17,600 --> 00:18:21,440
so we had an issue at gocardless where

00:18:19,600 --> 00:18:23,360
someone that we integrate with

00:18:21,440 --> 00:18:24,480
started adding a load of extra events to

00:18:23,360 --> 00:18:26,080
their web hooks

00:18:24,480 --> 00:18:27,600
and our workbook handlers basically rang

00:18:26,080 --> 00:18:29,840
out ran out of memory because they were

00:18:27,600 --> 00:18:32,000
trying to load way too much data

00:18:29,840 --> 00:18:33,840
so that's an example where if we'd known

00:18:32,000 --> 00:18:35,600
that there was a particular limit on the

00:18:33,840 --> 00:18:37,200
number of items in a web hook

00:18:35,600 --> 00:18:38,559
we could have tested against that limit

00:18:37,200 --> 00:18:42,000
and made sure that our pods were

00:18:38,559 --> 00:18:44,320
resourced appropriately

00:18:42,000 --> 00:18:45,919
complex products it's very unlikely that

00:18:44,320 --> 00:18:47,200
all your integrators will have avoided

00:18:45,919 --> 00:18:48,799
bad assumptions

00:18:47,200 --> 00:18:52,000
so we need to find strategies to

00:18:48,799 --> 00:18:53,760
mitigate the impact of our changes

00:18:52,000 --> 00:18:56,000
the first thing to remember is that a

00:18:53,760 --> 00:18:57,520
change isn't either breaking or not i i

00:18:56,000 --> 00:18:59,039
just think this is a completely false

00:18:57,520 --> 00:19:00,480
binary if

00:18:59,039 --> 00:19:02,720
if an integrator has done something

00:19:00,480 --> 00:19:05,120
strange enough almost anything can be

00:19:02,720 --> 00:19:05,120
breaking

00:19:05,520 --> 00:19:09,600
this binary is historically used to

00:19:07,360 --> 00:19:10,000
assign blame right if it's not breaking

00:19:09,600 --> 00:19:12,160
then

00:19:10,000 --> 00:19:13,440
it's the integrator's fault but as we

00:19:12,160 --> 00:19:15,760
discussed earlier

00:19:13,440 --> 00:19:17,679
it may not be technically your fault but

00:19:15,760 --> 00:19:19,360
it's probably still your problem

00:19:17,679 --> 00:19:21,280
if your biggest customers integration

00:19:19,360 --> 00:19:23,039
breaks the fact that you didn't break

00:19:21,280 --> 00:19:24,559
the rules will be little consolation to

00:19:23,039 --> 00:19:26,320
the engineers who are up all night

00:19:24,559 --> 00:19:28,080
trying to resolve it

00:19:26,320 --> 00:19:30,080
so instead of thinking about it as a yes

00:19:28,080 --> 00:19:31,520
no question we should think about it in

00:19:30,080 --> 00:19:33,280
terms of probabilities

00:19:31,520 --> 00:19:35,360
how likely is it that someone has made

00:19:33,280 --> 00:19:36,880
this assumption how likely is it that

00:19:35,360 --> 00:19:38,960
this is going to cause an issue

00:19:36,880 --> 00:19:40,880
how severe do we think that issue might

00:19:38,960 --> 00:19:43,440
be

00:19:40,880 --> 00:19:44,720
not all breaking changes are equal some

00:19:43,440 --> 00:19:46,880
changes are 100

00:19:44,720 --> 00:19:48,080
breaking you know killing an endpoint

00:19:46,880 --> 00:19:49,120
you're going to have a lot of unhappy

00:19:48,080 --> 00:19:52,480
integrators

00:19:49,120 --> 00:19:54,240
but many are neither 0 nor a hundred

00:19:52,480 --> 00:19:55,679
try to empathize with your integrators

00:19:54,240 --> 00:19:56,400
about what assumptions they might have

00:19:55,679 --> 00:19:58,160
made

00:19:56,400 --> 00:19:59,760
use people in your organization who are

00:19:58,160 --> 00:20:01,679
less familiar with the specifics than

00:19:59,760 --> 00:20:03,840
you are as rubber ducks

00:20:01,679 --> 00:20:05,600
and if possible just try and talk to

00:20:03,840 --> 00:20:07,280
them you know the more you talk to your

00:20:05,600 --> 00:20:08,880
integrators the more you'll understand

00:20:07,280 --> 00:20:10,480
the kinds of mistakes that they might

00:20:08,880 --> 00:20:12,799
have made

00:20:10,480 --> 00:20:15,039
if you can find ways to dog food your

00:20:12,799 --> 00:20:16,400
apis to find tripwires

00:20:15,039 --> 00:20:18,640
this is particularly good as an

00:20:16,400 --> 00:20:20,400
onboarding exercise right so

00:20:18,640 --> 00:20:21,679
we ask our new joiners to build an

00:20:20,400 --> 00:20:24,159
integration against

00:20:21,679 --> 00:20:25,679
our api and it helps them immediately

00:20:24,159 --> 00:20:26,799
put themselves into the shoes of your

00:20:25,679 --> 00:20:28,400
integrators

00:20:26,799 --> 00:20:30,559
it also helps you keep your docs and

00:20:28,400 --> 00:20:32,000
guides super up-to-date and introduces

00:20:30,559 --> 00:20:34,159
them to your product in quite an

00:20:32,000 --> 00:20:36,559
accessible way

00:20:34,159 --> 00:20:38,559
sometimes you could even measure this

00:20:36,559 --> 00:20:40,080
add observability to help you look for

00:20:38,559 --> 00:20:41,919
people that might be relying on this

00:20:40,080 --> 00:20:44,159
undocumented behavior

00:20:41,919 --> 00:20:46,159
for example as i discussed earlier we

00:20:44,159 --> 00:20:47,919
can see a spike in those payment create

00:20:46,159 --> 00:20:49,280
requests every day just before our

00:20:47,919 --> 00:20:50,799
payment run

00:20:49,280 --> 00:20:52,640
and this kind of approach can also help

00:20:50,799 --> 00:20:54,400
you identify which integrators are going

00:20:52,640 --> 00:20:57,679
to be impacted so that you can maybe

00:20:54,400 --> 00:20:58,960
reach out to them specifically

00:20:57,679 --> 00:21:02,080
some of you may be shouting at the

00:20:58,960 --> 00:21:03,200
screen by now what about semver now

00:21:02,080 --> 00:21:05,760
don't get me wrong

00:21:03,200 --> 00:21:07,039
semantic versioning is awesome provided

00:21:05,760 --> 00:21:08,720
it's used appropriately

00:21:07,039 --> 00:21:11,360
so the identification of the release

00:21:08,720 --> 00:21:13,760
type is correct this is a great way to

00:21:11,360 --> 00:21:16,080
release potentially breaking changes

00:21:13,760 --> 00:21:18,159
we should use this not just for packages

00:21:16,080 --> 00:21:19,919
but also apis and web hooks wherever

00:21:18,159 --> 00:21:21,840
possible

00:21:19,919 --> 00:21:23,840
this solves some of our problems but not

00:21:21,840 --> 00:21:24,799
all of them as someone who maintains a

00:21:23,840 --> 00:21:26,640
public api

00:21:24,799 --> 00:21:28,240
there are lots of changes that can't be

00:21:26,640 --> 00:21:29,919
applied in this way

00:21:28,240 --> 00:21:31,520
an obvious example of this might be the

00:21:29,919 --> 00:21:33,600
timing of our batch processing or

00:21:31,520 --> 00:21:35,360
reducing the latency on an endpoint

00:21:33,600 --> 00:21:37,520
not everything can be applied on a kind

00:21:35,360 --> 00:21:40,000
of opt-in basis at an in you know at a

00:21:37,520 --> 00:21:42,080
merchant by merchant level

00:21:40,000 --> 00:21:43,919
additionally every new version that you

00:21:42,080 --> 00:21:44,559
support increases the complexity of your

00:21:43,919 --> 00:21:46,799
system

00:21:44,559 --> 00:21:48,559
and complexity leads to risk it makes it

00:21:46,799 --> 00:21:50,320
harder to debug things

00:21:48,559 --> 00:21:53,280
and that can cause other issues so

00:21:50,320 --> 00:21:55,039
there's a trade-off to make

00:21:53,280 --> 00:21:57,200
if a major version doesn't work for your

00:21:55,039 --> 00:21:58,000
use case i recommend that you scale your

00:21:57,200 --> 00:21:59,679
release approach

00:21:58,000 --> 00:22:02,000
depending on how many integrators you

00:21:59,679 --> 00:22:03,679
think have made the bad assumption

00:22:02,000 --> 00:22:05,919
and also what impact do you think it

00:22:03,679 --> 00:22:08,240
might have we want to have different

00:22:05,919 --> 00:22:10,400
strategies to employ at different levels

00:22:08,240 --> 00:22:12,159
if we over communicate we get into a boy

00:22:10,400 --> 00:22:13,679
who cried wolf situation

00:22:12,159 --> 00:22:15,440
where no one reads anything that you

00:22:13,679 --> 00:22:16,799
send them and their stuff ends up

00:22:15,440 --> 00:22:19,039
breaking anyway

00:22:16,799 --> 00:22:19,919
and strangely the email in their inbox

00:22:19,039 --> 00:22:21,280
that they didn't read

00:22:19,919 --> 00:22:24,080
doesn't seem to make them feel any

00:22:21,280 --> 00:22:26,720
better start up pull comms

00:22:24,080 --> 00:22:28,159
updating your docs or a change log this

00:22:26,720 --> 00:22:30,000
is particularly useful to help

00:22:28,159 --> 00:22:31,280
integrators recover after they've found

00:22:30,000 --> 00:22:33,200
an issue

00:22:31,280 --> 00:22:36,159
and you can then upgrade to push comms

00:22:33,200 --> 00:22:38,240
perhaps like a newsletter or an email

00:22:36,159 --> 00:22:40,480
this is where it gets tough we all

00:22:38,240 --> 00:22:42,080
ignore emails every day so try and make

00:22:40,480 --> 00:22:43,200
sure the content is as relevant as

00:22:42,080 --> 00:22:45,039
possible

00:22:43,200 --> 00:22:46,480
don't tell integrators about changes to

00:22:45,039 --> 00:22:48,159
features that they don't use

00:22:46,480 --> 00:22:50,559
and try really hard to resist the

00:22:48,159 --> 00:22:53,760
temptation to include marketing content

00:22:50,559 --> 00:22:55,360
in that developer oriented cons and then

00:22:53,760 --> 00:22:57,600
if you're really worried you can use

00:22:55,360 --> 00:22:59,280
explicitly acknowledged comms

00:22:57,600 --> 00:23:01,200
and that works really well if you have a

00:22:59,280 --> 00:23:02,799
few key integrators

00:23:01,200 --> 00:23:04,960
that you want to check in with before

00:23:02,799 --> 00:23:06,720
pulling the trigger perhaps you know

00:23:04,960 --> 00:23:08,720
there are only a handful of people who

00:23:06,720 --> 00:23:10,080
are relying on this functionality

00:23:08,720 --> 00:23:11,760
or maybe there are just a couple of

00:23:10,080 --> 00:23:12,720
particularly important integrators to

00:23:11,760 --> 00:23:14,159
your business

00:23:12,720 --> 00:23:16,480
and you just want to make doubly sure

00:23:14,159 --> 00:23:17,919
that they're going to be okay

00:23:16,480 --> 00:23:19,600
it's really important to make these

00:23:17,919 --> 00:23:21,679
kinds of changes often

00:23:19,600 --> 00:23:23,600
it's a muscle that you need to practice

00:23:21,679 --> 00:23:24,400
otherwise both you and your integrators

00:23:23,600 --> 00:23:26,080
get scared

00:23:24,400 --> 00:23:27,919
and you forget how or lose the

00:23:26,080 --> 00:23:29,360
infrastructure to do so

00:23:27,919 --> 00:23:31,520
and if you're really unlucky the

00:23:29,360 --> 00:23:32,240
cultural incentive becomes to argue that

00:23:31,520 --> 00:23:34,400
a change

00:23:32,240 --> 00:23:36,080
isn't really breaking and release things

00:23:34,400 --> 00:23:39,280
without as much rigor or care

00:23:36,080 --> 00:23:41,120
as your integrators deserve

00:23:39,280 --> 00:23:43,120
we can also mitigate the impact of a

00:23:41,120 --> 00:23:44,640
breaking change by thinking about how we

00:23:43,120 --> 00:23:46,559
release it

00:23:44,640 --> 00:23:48,320
if at all possible you want to try and

00:23:46,559 --> 00:23:50,159
make the changes incrementally

00:23:48,320 --> 00:23:51,679
to try and give early warning signs to

00:23:50,159 --> 00:23:53,919
your integrators

00:23:51,679 --> 00:23:55,840
for example apply the new behavior to a

00:23:53,919 --> 00:23:57,600
percentage of requests

00:23:55,840 --> 00:23:59,360
that will help integrators avoid

00:23:57,600 --> 00:24:01,360
performance cliffs and could turn a

00:23:59,360 --> 00:24:02,880
potential outage into a minor service

00:24:01,360 --> 00:24:04,480
degradation

00:24:02,880 --> 00:24:06,480
many integrators will have near-miss

00:24:04,480 --> 00:24:09,520
alerting to help them identify problems

00:24:06,480 --> 00:24:11,039
before they cause significant damage

00:24:09,520 --> 00:24:12,559
if you've got a test or a sandbox

00:24:11,039 --> 00:24:13,520
environment that's also a great

00:24:12,559 --> 00:24:15,200
candidate

00:24:13,520 --> 00:24:17,360
making changes there as long as

00:24:15,200 --> 00:24:17,679
integrators are actively using it using

00:24:17,360 --> 00:24:20,159
it

00:24:17,679 --> 00:24:22,000
can act as the canary in the coal mine

00:24:20,159 --> 00:24:23,360
to help flag that something that maybe

00:24:22,000 --> 00:24:24,799
you didn't think was dangerous

00:24:23,360 --> 00:24:26,559
might be a little bit more tricky than

00:24:24,799 --> 00:24:28,000
you thought

00:24:26,559 --> 00:24:30,400
and the final point here is about

00:24:28,000 --> 00:24:31,200
rolling back if your biggest integrator

00:24:30,400 --> 00:24:32,960
phones you

00:24:31,200 --> 00:24:34,320
and tells you that you've broken broken

00:24:32,960 --> 00:24:35,840
their integration

00:24:34,320 --> 00:24:38,240
it's really nice to have a kill switch

00:24:35,840 --> 00:24:40,159
in your back pocket to stop the bleeding

00:24:38,240 --> 00:24:41,760
now that's obviously not always possible

00:24:40,159 --> 00:24:42,720
because it totally depends on the nature

00:24:41,760 --> 00:24:44,240
of the change

00:24:42,720 --> 00:24:46,000
but it's worth knowing what the kill

00:24:44,240 --> 00:24:48,240
switches are and being really

00:24:46,000 --> 00:24:49,440
clear internally about when that is and

00:24:48,240 --> 00:24:51,200
is not possible

00:24:49,440 --> 00:24:52,640
so that as soon as that call comes in

00:24:51,200 --> 00:24:56,080
you know what your options are

00:24:52,640 --> 00:24:56,080
and can react really quickly

00:24:56,799 --> 00:25:00,400
the only way to truly avoid breaking

00:24:58,640 --> 00:25:01,520
other people's things is not to change

00:25:00,400 --> 00:25:05,120
anything at all

00:25:01,520 --> 00:25:08,159
and often even that is not possible also

00:25:05,120 --> 00:25:10,720
we'd all be out of a job so instead we

00:25:08,159 --> 00:25:12,480
should think in terms of managing risk

00:25:10,720 --> 00:25:14,240
we've talked about ways of preventing

00:25:12,480 --> 00:25:16,240
these issues by helping your integrators

00:25:14,240 --> 00:25:18,000
make good assumptions in the first place

00:25:16,240 --> 00:25:19,679
and how important it is to build and

00:25:18,000 --> 00:25:21,600
maintain a capability

00:25:19,679 --> 00:25:23,200
to communicate when you are making those

00:25:21,600 --> 00:25:25,600
potentially breaking changes

00:25:23,200 --> 00:25:26,799
to help mitigate the impact but you

00:25:25,600 --> 00:25:28,559
aren't a mind reader

00:25:26,799 --> 00:25:31,039
and integrators are sometimes careless

00:25:28,559 --> 00:25:33,120
and under pressure just like you

00:25:31,039 --> 00:25:34,559
so be cautious assume that your

00:25:33,120 --> 00:25:35,600
integrators didn't read the docs

00:25:34,559 --> 00:25:38,960
perfectly

00:25:35,600 --> 00:25:40,559
or maybe at all and may have cut corners

00:25:38,960 --> 00:25:42,320
they may not have the observability of

00:25:40,559 --> 00:25:43,760
their systems that you might hope or

00:25:42,320 --> 00:25:45,200
expect

00:25:43,760 --> 00:25:46,880
you need to find the balance between

00:25:45,200 --> 00:25:49,039
caution and product delivery that's

00:25:46,880 --> 00:25:51,120
right for your organization

00:25:49,039 --> 00:25:52,159
for all of the modern talk of move fast

00:25:51,120 --> 00:25:54,480
and break things

00:25:52,159 --> 00:25:56,480
it is still painful when stuff breaks

00:25:54,480 --> 00:25:58,159
and it can take a lot of time and energy

00:25:56,480 --> 00:25:59,919
to recover

00:25:58,159 --> 00:26:02,159
building trust with your integrators is

00:25:59,919 --> 00:26:05,200
critical to the success of a product

00:26:02,159 --> 00:26:06,799
but so is delivering features we may not

00:26:05,200 --> 00:26:08,799
be able to completely stop

00:26:06,799 --> 00:26:11,039
breaking other people's things but we

00:26:08,799 --> 00:26:13,279
can definitely make it much less likely

00:26:11,039 --> 00:26:15,279
and much less bad if we put the effort

00:26:13,279 --> 00:26:16,960
in

00:26:15,279 --> 00:26:18,720
i really hope you've enjoyed the talk

00:26:16,960 --> 00:26:20,640
thank you so much for listening

00:26:18,720 --> 00:26:21,760
please find me on twitter at patrick

00:26:20,640 --> 00:26:23,600
edge if you'd like to chat about

00:26:21,760 --> 00:26:27,039
anything that we've covered today

00:26:23,600 --> 00:26:27,039
and i hope you all have a great day

00:26:29,679 --> 00:26:35,840
thank you lisa a lot

00:26:33,200 --> 00:26:38,000
i know it's really hard to speak or

00:26:35,840 --> 00:26:42,320
deliver or speak without seeing the

00:26:38,000 --> 00:26:43,039
audience so let me read some feedback

00:26:42,320 --> 00:26:46,480
for you

00:26:43,039 --> 00:26:50,480
just tune up on this what happened

00:26:46,480 --> 00:26:50,960
during your speech i'm really enjoying

00:26:50,480 --> 00:26:54,000
this

00:26:50,960 --> 00:26:56,799
talk such a great talk

00:26:54,000 --> 00:26:57,520
wow that's the best talk of the day so

00:26:56,799 --> 00:27:01,120
far

00:26:57,520 --> 00:27:04,480
such a great talk i do felt caught

00:27:01,120 --> 00:27:06,480
a lot of times so thank you our audience

00:27:04,480 --> 00:27:10,240
really enjoyed your

00:27:06,480 --> 00:27:12,320
your speak so are we ready to go to the

00:27:10,240 --> 00:27:16,320
questions

00:27:12,320 --> 00:27:18,960
yes let's go

00:27:16,320 --> 00:27:20,799
what about decisions how should we

00:27:18,960 --> 00:27:25,600
document the past

00:27:20,799 --> 00:27:27,440
decisions like why did we do that

00:27:25,600 --> 00:27:29,039
um i think this is really interesting

00:27:27,440 --> 00:27:32,320
and there's like an internal and an

00:27:29,039 --> 00:27:33,679
external kind of side to this right so

00:27:32,320 --> 00:27:35,360
internally i think the best

00:27:33,679 --> 00:27:36,159
documentation is always going to be in

00:27:35,360 --> 00:27:38,320
git

00:27:36,159 --> 00:27:39,760
um because it just sticks around for

00:27:38,320 --> 00:27:42,080
longer and it's the easiest

00:27:39,760 --> 00:27:43,679
way to make stuff discoverable so you

00:27:42,080 --> 00:27:44,799
know there are a whole bunch of talks

00:27:43,679 --> 00:27:46,320
about this but like

00:27:44,799 --> 00:27:47,840
include the why and you'll get commit

00:27:46,320 --> 00:27:49,520
messages try and make your commit

00:27:47,840 --> 00:27:51,360
messages atomic you know all of that

00:27:49,520 --> 00:27:53,520
good stuff that we all we all learn

00:27:51,360 --> 00:27:54,720
um in our first few few years of being a

00:27:53,520 --> 00:27:56,720
developer

00:27:54,720 --> 00:27:58,399
um but then when it comes to sort of

00:27:56,720 --> 00:28:00,640
bigger decisions particularly if those

00:27:58,399 --> 00:28:02,399
decisions are impacting your integrators

00:28:00,640 --> 00:28:04,399
you do probably want to be pushing stuff

00:28:02,399 --> 00:28:06,080
out and i'd suggest like a blog is a

00:28:04,399 --> 00:28:08,320
really good way of doing that

00:28:06,080 --> 00:28:09,440
so it's not that integrators need to

00:28:08,320 --> 00:28:11,279
understand that

00:28:09,440 --> 00:28:13,600
forever but it is really good as like a

00:28:11,279 --> 00:28:15,360
point in time communication of like

00:28:13,600 --> 00:28:16,640
this is why we're doing this and it

00:28:15,360 --> 00:28:17,919
helps buy people in

00:28:16,640 --> 00:28:19,919
right if they're going to have to make a

00:28:17,919 --> 00:28:20,480
change in order to mirror what you've

00:28:19,919 --> 00:28:21,919
done

00:28:20,480 --> 00:28:23,360
you want to be like hey we're doing this

00:28:21,919 --> 00:28:24,240
for you right we're doing this we have a

00:28:23,360 --> 00:28:25,600
good reason

00:28:24,240 --> 00:28:27,520
this is the benefits it's going to bring

00:28:25,600 --> 00:28:29,120
you sorry about the pain

00:28:27,520 --> 00:28:30,640
and i think a blog is a really good way

00:28:29,120 --> 00:28:32,559
of distinguishing that kind of point in

00:28:30,640 --> 00:28:33,120
time communication from your docs which

00:28:32,559 --> 00:28:34,559
should be

00:28:33,120 --> 00:28:36,559
a kind of like static forever

00:28:34,559 --> 00:28:40,240
documentation yeah

00:28:36,559 --> 00:28:44,080
thank you thank you for the good idea

00:28:40,240 --> 00:28:46,559
then the next question

00:28:44,080 --> 00:28:47,679
can you apply the insights from this

00:28:46,559 --> 00:28:50,640
talk to

00:28:47,679 --> 00:28:52,640
user experience probably users are often

00:28:50,640 --> 00:28:53,679
surprised by sudden changes on the

00:28:52,640 --> 00:28:57,039
website or

00:28:53,679 --> 00:28:57,600
app at least the question maker knows

00:28:57,039 --> 00:29:01,440
that

00:28:57,600 --> 00:29:03,279
he is um yeah i think so

00:29:01,440 --> 00:29:04,559
i mean i don't have so much experience

00:29:03,279 --> 00:29:06,799
in that area of course

00:29:04,559 --> 00:29:08,240
um i think that one of the things that

00:29:06,799 --> 00:29:09,919
is very good definitely is like

00:29:08,240 --> 00:29:11,760
obviously a b testing and rolling things

00:29:09,919 --> 00:29:13,120
out to a percentage of your users

00:29:11,760 --> 00:29:15,120
it's really useful particularly if you

00:29:13,120 --> 00:29:16,640
have a big user base just to get some

00:29:15,120 --> 00:29:18,399
early warning signs about that

00:29:16,640 --> 00:29:19,760
something's not quite right or that you

00:29:18,399 --> 00:29:21,919
know it's impeding people's

00:29:19,760 --> 00:29:23,520
people's use of the system and then

00:29:21,919 --> 00:29:24,960
obviously when it comes to ux the best

00:29:23,520 --> 00:29:26,960
thing that you can do as

00:29:24,960 --> 00:29:28,399
horrifying as it is is to just watch

00:29:26,960 --> 00:29:30,159
people using your tool

00:29:28,399 --> 00:29:31,360
and you know it's incredibly painful

00:29:30,159 --> 00:29:32,159
there are some great memes about this

00:29:31,360 --> 00:29:34,080
online

00:29:32,159 --> 00:29:35,760
um but it is the just the best way to

00:29:34,080 --> 00:29:36,799
learn about what people expect about

00:29:35,760 --> 00:29:39,760
your system

00:29:36,799 --> 00:29:40,320
please do share the best memes of these

00:29:39,760 --> 00:29:42,720
two

00:29:40,320 --> 00:29:45,039
to our chat or discord or later on

00:29:42,720 --> 00:29:46,720
twitter we would like to see those

00:29:45,039 --> 00:29:48,320
we are jumping around with these

00:29:46,720 --> 00:29:51,200
different kind of questions

00:29:48,320 --> 00:29:54,000
and let's go to the naming how do you

00:29:51,200 --> 00:29:56,960
convince people that naming is critical

00:29:54,000 --> 00:29:59,200
it obvious it's obvious to me but i've

00:29:56,960 --> 00:30:00,480
struggled time and time again convincing

00:29:59,200 --> 00:30:03,919
others that naming

00:30:00,480 --> 00:30:04,320
is okay i think this comes down to the

00:30:03,919 --> 00:30:06,240
fact

00:30:04,320 --> 00:30:08,320
that it's kind of this observed behavior

00:30:06,240 --> 00:30:09,520
point right so developers do not read

00:30:08,320 --> 00:30:11,440
documentation

00:30:09,520 --> 00:30:13,120
they just they're just they're lazy they

00:30:11,440 --> 00:30:14,720
read the smallest possible number of

00:30:13,120 --> 00:30:16,640
words to get their stuff working

00:30:14,720 --> 00:30:18,080
and we're all guilty of it and so when

00:30:16,640 --> 00:30:19,520
you explain that to developers everybody

00:30:18,080 --> 00:30:21,200
sort of internally goes oh

00:30:19,520 --> 00:30:23,440
yeah i guess that is also what i do

00:30:21,200 --> 00:30:24,480
right so if you start there and you

00:30:23,440 --> 00:30:26,720
frame it in that way

00:30:24,480 --> 00:30:29,520
and you're like it if you started the

00:30:26,720 --> 00:30:30,320
example all you see in that http snippet

00:30:29,520 --> 00:30:32,240
is the name

00:30:30,320 --> 00:30:33,600
and that is the first and most like

00:30:32,240 --> 00:30:35,600
front and center bit of information

00:30:33,600 --> 00:30:38,159
that's telling you what that field means

00:30:35,600 --> 00:30:39,039
and if you get that wrong and we have in

00:30:38,159 --> 00:30:40,720
the past

00:30:39,039 --> 00:30:42,240
you will spend like the rest of your

00:30:40,720 --> 00:30:44,320
life having to like try and put

00:30:42,240 --> 00:30:46,000
signposts and flags everywhere

00:30:44,320 --> 00:30:47,600
to tell people that the name is slightly

00:30:46,000 --> 00:30:49,679
misleading and please you know don't do

00:30:47,600 --> 00:30:51,279
this stupid thing

00:30:49,679 --> 00:30:52,960
and i think if you frame it like that in

00:30:51,279 --> 00:30:54,240
terms of the fact that like that's the

00:30:52,960 --> 00:30:55,440
first thing it's often the only thing

00:30:54,240 --> 00:30:57,039
that people really read

00:30:55,440 --> 00:30:58,799
and that you can't miss it's the only

00:30:57,039 --> 00:31:00,000
bit of information that a developer has

00:30:58,799 --> 00:31:01,760
to internalize

00:31:00,000 --> 00:31:03,120
um i think that that kind of helps get

00:31:01,760 --> 00:31:04,480
the ball rolling

00:31:03,120 --> 00:31:06,480
you can also just use some horror

00:31:04,480 --> 00:31:08,240
stories right you know

00:31:06,480 --> 00:31:09,519
for example australian account numbers

00:31:08,240 --> 00:31:12,080
have letters in them

00:31:09,519 --> 00:31:12,559
that really threw me gonna be honest um

00:31:12,080 --> 00:31:14,000
you know

00:31:12,559 --> 00:31:16,000
stuff like that right it's just those

00:31:14,000 --> 00:31:16,840
kind of anecdotes which help free people

00:31:16,000 --> 00:31:20,640
up

00:31:16,840 --> 00:31:25,039
yeah good examples really good examples

00:31:20,640 --> 00:31:25,039
let's see what we have here um

00:31:25,440 --> 00:31:31,519
how about versioning aps i mean

00:31:29,120 --> 00:31:32,880
breaking changes cannot be in the same

00:31:31,519 --> 00:31:35,679
version of the ap

00:31:32,880 --> 00:31:36,640
right i think that is where versioning

00:31:35,679 --> 00:31:40,159
of aps

00:31:36,640 --> 00:31:41,679
come in absolutely yeah

00:31:40,159 --> 00:31:43,679
um i think that i don't know whether

00:31:41,679 --> 00:31:45,519
this was uh before or after i started

00:31:43,679 --> 00:31:47,279
talking about them but um

00:31:45,519 --> 00:31:49,120
if you there are obviously certain kinds

00:31:47,279 --> 00:31:51,279
of change that you can use an api

00:31:49,120 --> 00:31:52,880
version for and you absolutely should

00:31:51,279 --> 00:31:54,480
um one other thing here that is a bit

00:31:52,880 --> 00:31:55,760
less common is you absolutely should

00:31:54,480 --> 00:31:57,200
version your web hooks

00:31:55,760 --> 00:31:58,880
so when someone creates a web hook

00:31:57,200 --> 00:32:00,880
endpoint in your system

00:31:58,880 --> 00:32:02,480
get them to to pick a version then that

00:32:00,880 --> 00:32:04,000
means they can opt in to changes to

00:32:02,480 --> 00:32:04,640
their web hooks as well which is just as

00:32:04,000 --> 00:32:08,240
important

00:32:04,640 --> 00:32:09,919
to many systems as their api calls um

00:32:08,240 --> 00:32:11,279
i guess for me that's kind of the solved

00:32:09,919 --> 00:32:12,960
part of this problem

00:32:11,279 --> 00:32:14,799
um but there are just so many other

00:32:12,960 --> 00:32:16,080
kinds of changes that you just can't do

00:32:14,799 --> 00:32:17,200
that with particularly

00:32:16,080 --> 00:32:18,720
if you don't you know if you have a

00:32:17,200 --> 00:32:20,000
single deployment rather than like

00:32:18,720 --> 00:32:22,880
multiple deployments per

00:32:20,000 --> 00:32:25,279
integrator then inevitably changes that

00:32:22,880 --> 00:32:26,880
you make just will impact everybody

00:32:25,279 --> 00:32:28,399
at the same time and so it's really

00:32:26,880 --> 00:32:29,039
important to understand how to deal with

00:32:28,399 --> 00:32:31,360
those things

00:32:29,039 --> 00:32:32,640
and i think in the past what we've done

00:32:31,360 --> 00:32:33,200
is just say all those aren't breaking

00:32:32,640 --> 00:32:35,679
changes

00:32:33,200 --> 00:32:36,880
you know my api schema hasn't changed

00:32:35,679 --> 00:32:38,240
not my problem

00:32:36,880 --> 00:32:39,840
uh and that's kind of what i'm trying to

00:32:38,240 --> 00:32:41,440
get us away from so rather than this

00:32:39,840 --> 00:32:42,960
binary where it's either like

00:32:41,440 --> 00:32:45,200
you know either we've added a mandatory

00:32:42,960 --> 00:32:47,279
field and you need a new api version

00:32:45,200 --> 00:32:48,399
or it's just like oh we're just making

00:32:47,279 --> 00:32:49,760
some changes to the way that our back

00:32:48,399 --> 00:32:50,640
end works and that's got nothing to do

00:32:49,760 --> 00:32:52,159
with you

00:32:50,640 --> 00:32:53,679
and there's just this huge middle ground

00:32:52,159 --> 00:32:57,600
that i think it would be really cool

00:32:53,679 --> 00:33:00,960
if people explored more yeah

00:32:57,600 --> 00:33:03,760
so next one how or have you

00:33:00,960 --> 00:33:04,240
implemented any automated testing

00:33:03,760 --> 00:33:07,760
between

00:33:04,240 --> 00:33:12,000
ap and integrators packed

00:33:07,760 --> 00:33:15,360
slash contract testing for example

00:33:12,000 --> 00:33:17,120
um so we're quite lucky in the well when

00:33:15,360 --> 00:33:17,360
i first joined gocardless i was working

00:33:17,120 --> 00:33:20,880
on

00:33:17,360 --> 00:33:22,399
a we have like an in-house partner

00:33:20,880 --> 00:33:23,840
which we sort of ended up with by

00:33:22,399 --> 00:33:24,960
accident but i'd actually massively

00:33:23,840 --> 00:33:26,399
recommend it because

00:33:24,960 --> 00:33:28,000
that that point about kind of dog

00:33:26,399 --> 00:33:30,000
fooding your own api

00:33:28,000 --> 00:33:31,760
but it also means that you can have

00:33:30,000 --> 00:33:34,080
those kind of integration tests so you

00:33:31,760 --> 00:33:36,159
can run some tests through in staging

00:33:34,080 --> 00:33:38,559
so as an example when we were releasing

00:33:36,159 --> 00:33:41,120
our fx product um

00:33:38,559 --> 00:33:42,640
nearly a couple of years ago now um we

00:33:41,120 --> 00:33:44,880
did a lot of testing with our

00:33:42,640 --> 00:33:46,399
internal integrated integration

00:33:44,880 --> 00:33:47,919
basically just to kind of pipe clean the

00:33:46,399 --> 00:33:50,080
whole thing and get a feel for what it

00:33:47,919 --> 00:33:52,000
would feel like to an integrator

00:33:50,080 --> 00:33:53,679
and that's like a really useful thing

00:33:52,000 --> 00:33:56,159
obviously if you can automate that

00:33:53,679 --> 00:33:56,720
that's even better um and i'd really

00:33:56,159 --> 00:33:59,120
recommend

00:33:56,720 --> 00:34:01,120
having some kind of up-to-date like

00:33:59,120 --> 00:34:02,240
integration against your api even if

00:34:01,120 --> 00:34:04,000
it's quite simple

00:34:02,240 --> 00:34:06,080
that just like goes through the really

00:34:04,000 --> 00:34:07,760
core flows kind of like a smoke

00:34:06,080 --> 00:34:09,760
test almost or a bit like you can use

00:34:07,760 --> 00:34:11,040
like ping dom to do something similar

00:34:09,760 --> 00:34:13,040
right to a website

00:34:11,040 --> 00:34:14,159
um i think that stuff is really useful i

00:34:13,040 --> 00:34:14,960
think there's a lot more that we could

00:34:14,159 --> 00:34:16,720
do there

00:34:14,960 --> 00:34:18,399
um we know that we also so we have a

00:34:16,720 --> 00:34:19,839
sandbox environment and we know that

00:34:18,399 --> 00:34:20,879
there are integrators that run their

00:34:19,839 --> 00:34:22,800
integration tests

00:34:20,879 --> 00:34:24,560
on that environment every day so we know

00:34:22,800 --> 00:34:26,079
that we can release stuff there early

00:34:24,560 --> 00:34:27,679
and that will like get us a little bit

00:34:26,079 --> 00:34:28,320
of more of that early warning signal as

00:34:27,679 --> 00:34:29,760
well

00:34:28,320 --> 00:34:31,599
uh and particularly if you've got some

00:34:29,760 --> 00:34:32,560
like really important integrators who

00:34:31,599 --> 00:34:35,040
have that kind of

00:34:32,560 --> 00:34:36,399
kind of capacity to build that stuff

00:34:35,040 --> 00:34:37,440
it's a really really valuable thing for

00:34:36,399 --> 00:34:41,599
them as well

00:34:37,440 --> 00:34:45,119
yeah the questions keep flowing in

00:34:41,599 --> 00:34:46,159
are we can we still continue are you

00:34:45,119 --> 00:34:49,599
ready to

00:34:46,159 --> 00:34:52,480
answer yes let's go good would you

00:34:49,599 --> 00:34:56,000
consider adding new attributes to

00:34:52,480 --> 00:34:59,440
a json ip breaking change

00:34:56,000 --> 00:35:00,000
i'd normally not i always considered

00:34:59,440 --> 00:35:03,680
adding

00:35:00,000 --> 00:35:07,119
new attributes non-breaking chains until

00:35:03,680 --> 00:35:08,800
the day a client broke go because they

00:35:07,119 --> 00:35:11,920
got unexpected

00:35:08,800 --> 00:35:15,680
antibiotics whose fault it

00:35:11,920 --> 00:35:18,160
is in this case in your opinion

00:35:15,680 --> 00:35:20,000
um i don't think that knowing whose

00:35:18,160 --> 00:35:21,920
fault it is is a useful question and i

00:35:20,000 --> 00:35:24,640
would really recommend us to not

00:35:21,920 --> 00:35:26,000
not ask that question very much um i

00:35:24,640 --> 00:35:28,000
think that the industry standard

00:35:26,000 --> 00:35:29,839
increasingly absolutely is that adding

00:35:28,000 --> 00:35:30,880
fields should not be a breaking change

00:35:29,839 --> 00:35:32,960
and so you should

00:35:30,880 --> 00:35:35,599
build your client such that you discard

00:35:32,960 --> 00:35:38,079
unexpected keys in a json response right

00:35:35,599 --> 00:35:39,760
and i think that that is like reasonably

00:35:38,079 --> 00:35:40,480
kind of well understood as an industry

00:35:39,760 --> 00:35:41,920
standard

00:35:40,480 --> 00:35:43,599
now obviously particularly if you're

00:35:41,920 --> 00:35:45,040
using a typed language it's quite easy

00:35:43,599 --> 00:35:47,119
to fall foul of that

00:35:45,040 --> 00:35:48,480
um so what i would probably do is just

00:35:47,119 --> 00:35:50,000
try and make sure that in your docs

00:35:48,480 --> 00:35:51,040
you're really you kind of signpost that

00:35:50,000 --> 00:35:51,760
you're like we're following this

00:35:51,040 --> 00:35:54,160
standard

00:35:51,760 --> 00:35:56,160
and in this standard we do sometimes add

00:35:54,160 --> 00:35:57,280
fields to our api without telling you

00:35:56,160 --> 00:35:59,280
and that's something that you should

00:35:57,280 --> 00:35:59,920
make sure that you handle yeah um the

00:35:59,280 --> 00:36:01,920
other thing is

00:35:59,920 --> 00:36:04,000
obviously lots of people now if you're

00:36:01,920 --> 00:36:05,040
using like open api or swagger you'll be

00:36:04,000 --> 00:36:07,839
auto-generating

00:36:05,040 --> 00:36:09,920
uh clients for your integrators to use

00:36:07,839 --> 00:36:11,280
and that's a really good way of kind of

00:36:09,920 --> 00:36:12,320
understanding what assumptions they've

00:36:11,280 --> 00:36:13,920
made because obviously you have a lot

00:36:12,320 --> 00:36:15,760
more control in that point

00:36:13,920 --> 00:36:17,839
and also just making sure that those

00:36:15,760 --> 00:36:19,920
libraries are doing what you expect

00:36:17,839 --> 00:36:21,839
so if you if you can provide client

00:36:19,920 --> 00:36:23,040
libraries which as i say if you can use

00:36:21,839 --> 00:36:24,480
like open api

00:36:23,040 --> 00:36:26,000
is now really really straightforward to

00:36:24,480 --> 00:36:27,359
do i'd really recommend doing that

00:36:26,000 --> 00:36:29,200
because it helps protect you against

00:36:27,359 --> 00:36:32,240
those kind of bugs as well

00:36:29,200 --> 00:36:34,720
yeah about the assumptions there's one

00:36:32,240 --> 00:36:37,760
question you said that assumptions

00:36:34,720 --> 00:36:40,079
are unavoidable and also recommended not

00:36:37,760 --> 00:36:42,640
to over communicate the changes

00:36:40,079 --> 00:36:45,440
to keep the emails readable and not

00:36:42,640 --> 00:36:46,880
scare people away by the amount so this

00:36:45,440 --> 00:36:50,320
leads to the question

00:36:46,880 --> 00:36:55,440
what would you leave out still assumed

00:36:50,320 --> 00:36:58,079
in the documentation and communications

00:36:55,440 --> 00:36:59,520
um i mean you know it's a trade-off and

00:36:58,079 --> 00:37:00,800
it's it's kind of difficult to give a

00:36:59,520 --> 00:37:02,720
generic answer here

00:37:00,800 --> 00:37:03,920
um i think my point about communication

00:37:02,720 --> 00:37:05,839
is really

00:37:03,920 --> 00:37:08,400
it's this boy who cried wolf thing is

00:37:05,839 --> 00:37:10,160
that like if you imagine how many emails

00:37:08,400 --> 00:37:10,880
you have to receive that you didn't need

00:37:10,160 --> 00:37:12,320
to read

00:37:10,880 --> 00:37:14,240
before you just stopped reading any of

00:37:12,320 --> 00:37:15,680
them yeah and it's like two

00:37:14,240 --> 00:37:17,760
you know it's really really small like

00:37:15,680 --> 00:37:19,119
you receive a couple of emails from some

00:37:17,760 --> 00:37:20,880
service that you use that are like

00:37:19,119 --> 00:37:22,400
inviting you to a webinar that you're

00:37:20,880 --> 00:37:23,920
not interested in and then you don't

00:37:22,400 --> 00:37:24,800
read any email they ever send you ever

00:37:23,920 --> 00:37:26,960
again

00:37:24,800 --> 00:37:29,040
um so push comms are quite dangerous for

00:37:26,960 --> 00:37:30,800
that particularly because we are so

00:37:29,040 --> 00:37:32,880
kind of bombarded with like particularly

00:37:30,800 --> 00:37:35,839
a lot of marketing communication

00:37:32,880 --> 00:37:37,200
um in terms of like what changes the

00:37:35,839 --> 00:37:38,800
other thing that you can do is

00:37:37,200 --> 00:37:40,640
just work really hard to like narrow

00:37:38,800 --> 00:37:42,240
your audience so rather than telling

00:37:40,640 --> 00:37:43,760
everybody about everything

00:37:42,240 --> 00:37:45,440
if if you have the kind of product that

00:37:43,760 --> 00:37:47,280
has quite a wide surface area then you

00:37:45,440 --> 00:37:48,160
just tell the people who use that bit of

00:37:47,280 --> 00:37:49,920
the product

00:37:48,160 --> 00:37:51,440
um that's like a really good way of kind

00:37:49,920 --> 00:37:52,800
of decreasing the number of

00:37:51,440 --> 00:37:54,640
communications

00:37:52,800 --> 00:37:56,000
um i think that there will always be

00:37:54,640 --> 00:37:57,200
assumptions that you don't document

00:37:56,000 --> 00:37:59,359
because you can't document them

00:37:57,200 --> 00:38:00,880
explicitly and also as we've discussed

00:37:59,359 --> 00:38:02,560
no one really reads the documentation

00:38:00,880 --> 00:38:05,200
anyway uh or at least

00:38:02,560 --> 00:38:06,720
lots of people don't um but i think you

00:38:05,200 --> 00:38:08,160
just want to document the most important

00:38:06,720 --> 00:38:08,800
stuff and also the stuff that's going to

00:38:08,160 --> 00:38:10,560
have the biggest

00:38:08,800 --> 00:38:12,720
impact right so if somebody gets

00:38:10,560 --> 00:38:14,400
something wrong and that results in them

00:38:12,720 --> 00:38:16,160
double creating a payment like that's

00:38:14,400 --> 00:38:17,440
one of our sort of worst case scenario

00:38:16,160 --> 00:38:19,760
go cardless right is that you double

00:38:17,440 --> 00:38:21,599
charge a customer so if if that's the

00:38:19,760 --> 00:38:22,960
potential kind of problem here

00:38:21,599 --> 00:38:24,960
then we want to be really really clear

00:38:22,960 --> 00:38:27,359
about that assumption however

00:38:24,960 --> 00:38:29,200
if the worst case scenario is like

00:38:27,359 --> 00:38:30,960
somebody displays a string to a user

00:38:29,200 --> 00:38:32,079
that isn't quite right

00:38:30,960 --> 00:38:33,920
that's something that you can be a bit

00:38:32,079 --> 00:38:35,359
more relaxed about because it's not

00:38:33,920 --> 00:38:36,800
something that's gonna in our you know

00:38:35,359 --> 00:38:38,000
in our case it's not gonna move money in

00:38:36,800 --> 00:38:39,760
the wrong place

00:38:38,000 --> 00:38:40,960
and so you kind of need to manage that

00:38:39,760 --> 00:38:42,560
as well as the likelihood that

00:38:40,960 --> 00:38:44,160
somebody's made that assumption

00:38:42,560 --> 00:38:46,079
to think about like what is the possible

00:38:44,160 --> 00:38:48,000
impact and you really need to empathize

00:38:46,079 --> 00:38:51,119
with your integrators to do that

00:38:48,000 --> 00:38:55,760
yeah we have two questions

00:38:51,119 --> 00:38:58,880
still to go do you ever skip doing

00:38:55,760 --> 00:38:59,440
nice changes just just because you know

00:38:58,880 --> 00:39:03,200
this will

00:38:59,440 --> 00:39:04,000
result into so much work to communicate

00:39:03,200 --> 00:39:06,480
the change

00:39:04,000 --> 00:39:07,359
or even ship a change without too much

00:39:06,480 --> 00:39:09,440
analysis

00:39:07,359 --> 00:39:10,560
even though you think it might cause a

00:39:09,440 --> 00:39:12,800
little noise

00:39:10,560 --> 00:39:13,599
because communication and analysis would

00:39:12,800 --> 00:39:18,079
be so

00:39:13,599 --> 00:39:19,839
hard of course i would never do that

00:39:18,079 --> 00:39:20,880
i'm really really glad you asked this

00:39:19,839 --> 00:39:22,320
question because this is actually a

00:39:20,880 --> 00:39:24,240
point that ended up getting cut from the

00:39:22,320 --> 00:39:27,440
talk because i didn't have time

00:39:24,240 --> 00:39:30,640
um so yes 100

00:39:27,440 --> 00:39:31,680
yes and everybody has done this and the

00:39:30,640 --> 00:39:33,599
the problem

00:39:31,680 --> 00:39:35,760
basically yeah one of two things happens

00:39:33,599 --> 00:39:36,640
either they just don't change it because

00:39:35,760 --> 00:39:38,160
they're like oh

00:39:36,640 --> 00:39:40,000
it's hard to change it it might break

00:39:38,160 --> 00:39:44,079
someone's stuff i'm just gonna sort of

00:39:40,000 --> 00:39:46,240
walk away or they do change it

00:39:44,079 --> 00:39:48,160
but they don't tell anybody and they're

00:39:46,240 --> 00:39:48,800
just like oh well oop sorry didn't think

00:39:48,160 --> 00:39:50,560
about it

00:39:48,800 --> 00:39:52,160
um and then someone's stuff breaks and

00:39:50,560 --> 00:39:53,760
that's this kind of cultural incentives

00:39:52,160 --> 00:39:56,000
point and it's really really important

00:39:53,760 --> 00:39:58,000
that you try and keep those incentives

00:39:56,000 --> 00:39:59,520
to be you know we have a value at gocard

00:39:58,000 --> 00:40:00,800
it's called act with integrity

00:39:59,520 --> 00:40:02,880
and you know you really want to treat

00:40:00,800 --> 00:40:04,240
your your integrators with that kind of

00:40:02,880 --> 00:40:06,160
respect and care

00:40:04,240 --> 00:40:07,599
and the way to do that is to reduce

00:40:06,160 --> 00:40:09,280
friction right it's the same as like

00:40:07,599 --> 00:40:10,560
shipping code or tests right if you make

00:40:09,280 --> 00:40:12,720
it really really hard to test

00:40:10,560 --> 00:40:14,319
people just don't test and we know that

00:40:12,720 --> 00:40:15,680
it's exactly the same here so

00:40:14,319 --> 00:40:17,280
you want to build tooling to make it

00:40:15,680 --> 00:40:19,040
really really easy to communicate get

00:40:17,280 --> 00:40:21,280
that communication reviewed

00:40:19,040 --> 00:40:22,079
you know have style guides one of the

00:40:21,280 --> 00:40:24,000
things that i've

00:40:22,079 --> 00:40:25,920
found is like it's not really clear who

00:40:24,000 --> 00:40:27,440
is responsible for like deciding whether

00:40:25,920 --> 00:40:29,040
we should communicate or not

00:40:27,440 --> 00:40:30,960
yeah and that can be quite challenging

00:40:29,040 --> 00:40:33,040
so making sure that you have both like

00:40:30,960 --> 00:40:35,359
the tooling in terms of in your code

00:40:33,040 --> 00:40:36,480
and also you have like processes in

00:40:35,359 --> 00:40:38,800
place at your company

00:40:36,480 --> 00:40:40,240
to try and reduce that friction that's

00:40:38,800 --> 00:40:41,440
kind of the only fix for this problem

00:40:40,240 --> 00:40:43,040
that i've ever seen because otherwise

00:40:41,440 --> 00:40:44,720
you end up going one of those two ways

00:40:43,040 --> 00:40:45,839
and either the integrators end up with a

00:40:44,720 --> 00:40:47,520
worse service

00:40:45,839 --> 00:40:49,200
because you haven't fixed those things

00:40:47,520 --> 00:40:50,400
or the integrators end up sad because

00:40:49,200 --> 00:40:52,800
you've broken their stuff without

00:40:50,400 --> 00:40:54,000
telling them and you know neither of

00:40:52,800 --> 00:40:55,920
those is really what we're aiming for

00:40:54,000 --> 00:41:00,480
here

00:40:55,920 --> 00:41:04,040
yes and one one question we have here

00:41:00,480 --> 00:41:08,400
left how long should we keep deeper

00:41:04,040 --> 00:41:12,560
deprecated feels forward in the crater

00:41:08,400 --> 00:41:14,800
sorry i'm so sorry for our integrators

00:41:12,560 --> 00:41:16,640
if they are actually only internal i

00:41:14,800 --> 00:41:19,280
have the feeling we are always keeping

00:41:16,640 --> 00:41:21,440
them forever

00:41:19,280 --> 00:41:23,760
yes i've definitely experienced this i

00:41:21,440 --> 00:41:25,280
think even internal or external

00:41:23,760 --> 00:41:27,680
your policy about stuff that you

00:41:25,280 --> 00:41:30,319
deprecate has to be it trades off

00:41:27,680 --> 00:41:31,359
the like cost to the person of making

00:41:30,319 --> 00:41:33,280
the change

00:41:31,359 --> 00:41:34,960
versus the risk and complexity that

00:41:33,280 --> 00:41:35,920
you're carrying by having the multiple

00:41:34,960 --> 00:41:37,520
versions

00:41:35,920 --> 00:41:40,800
and i think sometimes people forget that

00:41:37,520 --> 00:41:42,000
second part so they're just like oh well

00:41:40,800 --> 00:41:43,680
you know it's a lot of effort for them

00:41:42,000 --> 00:41:44,720
to make that change and so we'll just

00:41:43,680 --> 00:41:45,760
leave it there because it's not really

00:41:44,720 --> 00:41:47,760
hurting anybody

00:41:45,760 --> 00:41:49,200
and that's not true as soon as you have

00:41:47,760 --> 00:41:50,880
like two different versions running in

00:41:49,200 --> 00:41:52,480
parallel that's complexity

00:41:50,880 --> 00:41:53,760
that complexity means if something goes

00:41:52,480 --> 00:41:55,200
wrong and you're trying to debug or

00:41:53,760 --> 00:41:55,920
reason about that system it's going to

00:41:55,200 --> 00:41:57,119
be harder

00:41:55,920 --> 00:41:58,720
and you're more likely to like

00:41:57,119 --> 00:41:59,839
exacerbate the problem or cause new

00:41:58,720 --> 00:42:01,280
problems

00:41:59,839 --> 00:42:03,200
and so anything that you can do to

00:42:01,280 --> 00:42:03,599
reduce complexity is always a positive

00:42:03,200 --> 00:42:04,960
thing

00:42:03,599 --> 00:42:07,119
and that includes like killing

00:42:04,960 --> 00:42:08,640
deprecated stuff yeah so i recommend you

00:42:07,119 --> 00:42:10,240
try and have a really hard line

00:42:08,640 --> 00:42:12,079
and you you try and like set an

00:42:10,240 --> 00:42:12,960
arbitrary day yeah and if that is if

00:42:12,079 --> 00:42:14,960
that's a culture

00:42:12,960 --> 00:42:16,079
inside your company that like this is

00:42:14,960 --> 00:42:17,920
the day it will go away

00:42:16,079 --> 00:42:19,920
you need to have fixed it before then

00:42:17,920 --> 00:42:22,079
unless the world is on fire

00:42:19,920 --> 00:42:23,680
it's going to go away so please make

00:42:22,079 --> 00:42:25,440
sure that you have dealt with it

00:42:23,680 --> 00:42:27,359
and you know that can come across as

00:42:25,440 --> 00:42:29,119
being like a jerk but actually it's the

00:42:27,359 --> 00:42:30,480
only way to keep your system healthy

00:42:29,119 --> 00:42:32,400
and it's really really important that

00:42:30,480 --> 00:42:33,760
everybody and every team feels empowered

00:42:32,400 --> 00:42:34,960
to make that call

00:42:33,760 --> 00:42:36,640
and so you need to keep the kind of

00:42:34,960 --> 00:42:38,079
power balances between the teams right

00:42:36,640 --> 00:42:40,079
so you don't have one team that's like

00:42:38,079 --> 00:42:41,200
oh our life you know we're really busy

00:42:40,079 --> 00:42:42,400
we can't possibly do this

00:42:41,200 --> 00:42:44,160
you're gonna have to put up with it

00:42:42,400 --> 00:42:45,520
right that's really dangerous kind of

00:42:44,160 --> 00:42:47,119
practice that i think we've probably all

00:42:45,520 --> 00:42:49,359
seen

00:42:47,119 --> 00:42:50,319
that is a great advice so please

00:42:49,359 --> 00:42:53,839
remember

00:42:50,319 --> 00:42:57,839
deadline and then just get it off

00:42:53,839 --> 00:43:00,960
thank you lisa you are truly

00:42:57,839 --> 00:43:03,599
talent and we have enjoyed your your

00:43:00,960 --> 00:43:06,800
speak and audiences still talking about

00:43:03,599 --> 00:43:07,839
the details of this topic on our stream

00:43:06,800 --> 00:43:10,160
chat so

00:43:07,839 --> 00:43:11,359
huge thanks to you and let's hope to see

00:43:10,160 --> 00:43:14,640
you on the chat but

00:43:11,359 --> 00:43:18,160
otherwise you can find lisa on twitter

00:43:14,640 --> 00:43:21,640
we can drop the link on the stream chat

00:43:18,160 --> 00:43:24,640
thank you and we will move on

00:43:21,640 --> 00:43:24,640

YouTube URL: https://www.youtube.com/watch?v=eEFcS_cmusQ


