Title: Bozhidar Batsov- Ruby 4.0: To Infinity and Beyond @ EuRuKo2017
Publication date: 2017-12-21
Playlist: EuRuKo 2017
Description: 
	
Captions: 
	00:00:09,510 --> 00:00:17,200
everyone it is really interesting to be

00:00:13,660 --> 00:00:19,930
the final speaker at any conference from

00:00:17,200 --> 00:00:23,200
one side I'm kind of up because

00:00:19,930 --> 00:00:25,449
everybody before me was so amazing that

00:00:23,200 --> 00:00:28,330
the bar is really high and I'm really

00:00:25,449 --> 00:00:31,290
bad speaker so we're going to kind of

00:00:28,330 --> 00:00:34,390
realize this on the other hand if I

00:00:31,290 --> 00:00:37,570
slightly mistimed my two hundred and

00:00:34,390 --> 00:00:40,120
sixty slides there is nobody after me so

00:00:37,570 --> 00:00:41,049
I guess nobody is going to complain at

00:00:40,120 --> 00:00:44,170
least I hope so

00:00:41,049 --> 00:00:47,769
so that's my name the majority of you

00:00:44,170 --> 00:00:49,690
probably cannot really read it so it has

00:00:47,769 --> 00:00:52,690
a different version which the majority

00:00:49,690 --> 00:00:54,879
of you probably cannot pronounce my

00:00:52,690 --> 00:00:57,400
friends call me like this but you

00:00:54,879 --> 00:01:00,070
probably can't read it and it has

00:00:57,400 --> 00:01:05,890
another version that most of you

00:01:00,070 --> 00:01:10,930
pronounced as bozo I really hope I'm not

00:01:05,890 --> 00:01:12,969
a bozo so my really good friends call me

00:01:10,930 --> 00:01:15,490
buck and they have been calling me but

00:01:12,969 --> 00:01:18,159
for many many years long before I became

00:01:15,490 --> 00:01:20,049
a software engineer so presumably this

00:01:18,159 --> 00:01:23,920
has nothing to do with the quality of my

00:01:20,049 --> 00:01:25,990
work if you look at the issue trackers

00:01:23,920 --> 00:01:29,109
of my open-source projects maybe that's

00:01:25,990 --> 00:01:32,499
not kind of true yeah I know that I

00:01:29,109 --> 00:01:35,140
sound like a Russian hitman but I'm

00:01:32,499 --> 00:01:37,899
actually from Sofia Bulgaria so if you

00:01:35,140 --> 00:01:40,689
ever want to obtain this kind of Russian

00:01:37,899 --> 00:01:43,090
accent just live for 33 years in this

00:01:40,689 --> 00:01:45,429
magical city which maybe some of you

00:01:43,090 --> 00:01:47,560
remember from last year Scirocco I know

00:01:45,429 --> 00:01:50,200
that many of you are depressed that

00:01:47,560 --> 00:01:51,759
Yuriko is sending and I hope that many

00:01:50,200 --> 00:01:54,189
of you have fond memories from your time

00:01:51,759 --> 00:01:56,280
in Sofia so I like this opportunity to

00:01:54,189 --> 00:02:00,130
announce a brand new ruby conference

00:01:56,280 --> 00:02:03,219
Ruby might be dying but the familial

00:02:00,130 --> 00:02:04,869
phobic communities is growing the very

00:02:03,219 --> 00:02:06,700
same team that brought you Europe who

00:02:04,869 --> 00:02:09,220
last year in Sofia is starting a new

00:02:06,700 --> 00:02:12,010
conference Bach and Ruby it is going to

00:02:09,220 --> 00:02:15,250
be travelling conference on the Balkan

00:02:12,010 --> 00:02:17,989
Peninsula we don't have just Wars

00:02:15,250 --> 00:02:20,970
there's and kidnappings and

00:02:17,989 --> 00:02:24,300
mafia and so on we also hear through be

00:02:20,970 --> 00:02:26,280
developers so join us again in Sofia

00:02:24,300 --> 00:02:28,920
next year it's going to be a lot of fun

00:02:26,280 --> 00:02:30,420
and we have a lot of work here and a lot

00:02:28,920 --> 00:02:32,940
of Bulgarian Grill

00:02:30,420 --> 00:02:35,160
so it's going to be very very awesome a

00:02:32,940 --> 00:02:38,220
deep and profound experience if you will

00:02:35,160 --> 00:02:41,390
I work at opto and for us it is an honor

00:02:38,220 --> 00:02:46,190
to be supporting the event once again

00:02:41,390 --> 00:02:49,530
Toto is built on ruby we we have been

00:02:46,190 --> 00:02:51,180
very very grateful to much to the core

00:02:49,530 --> 00:02:53,730
team to all the open source contributors

00:02:51,180 --> 00:02:56,880
because they made it possible for us to

00:02:53,730 --> 00:02:58,560
build successful useful business and we

00:02:56,880 --> 00:03:03,420
are very glad to be able to give back to

00:02:58,560 --> 00:03:06,450
the community and I'm very really proud

00:03:03,420 --> 00:03:08,250
to call this man who was the best

00:03:06,450 --> 00:03:10,920
speaker at the conference a colleague

00:03:08,250 --> 00:03:13,349
Victor was so so awesome that I am

00:03:10,920 --> 00:03:15,360
really really nervous right now I plan

00:03:13,349 --> 00:03:17,670
to do like him but the problem is that

00:03:15,360 --> 00:03:22,920
if I'm silent for 40 minutes probably

00:03:17,670 --> 00:03:24,630
it's going to look a bit weird okay I do

00:03:22,920 --> 00:03:28,859
open source maybe you know this maybe

00:03:24,630 --> 00:03:31,500
not I'm very obsessed with writing good

00:03:28,859 --> 00:03:34,920
Ruby code go through go through be on

00:03:31,500 --> 00:03:37,609
Rails applications even though I kind of

00:03:34,920 --> 00:03:41,010
despise Rails but I love the language I

00:03:37,609 --> 00:03:44,060
wrote a very evil tool and I know that a

00:03:41,010 --> 00:03:44,060
lot of people hate me

00:03:46,810 --> 00:03:52,420
I'm on Team extreme and I'd like to

00:03:49,870 --> 00:03:54,310
remind you the Emacs is the one true

00:03:52,420 --> 00:03:57,220
editor that is going to bring balance to

00:03:54,310 --> 00:04:00,100
the source and is going to appease the

00:03:57,220 --> 00:04:02,500
ever complaining crew bo kaap I wrote

00:04:00,100 --> 00:04:04,990
another project for another conference

00:04:02,500 --> 00:04:06,700
but as doesn't matter what matters is

00:04:04,990 --> 00:04:09,760
that I'm really really excited to be

00:04:06,700 --> 00:04:12,970
here for a multiple for a multitude of

00:04:09,760 --> 00:04:15,220
reasons number one being that last year

00:04:12,970 --> 00:04:18,120
I was also supposed to be here but ended

00:04:15,220 --> 00:04:20,320
up there this is a Bulgarian hospital I

00:04:18,120 --> 00:04:22,870
got very sick on the day of the

00:04:20,320 --> 00:04:25,840
conference so sick that I was about to

00:04:22,870 --> 00:04:28,690
die literally they told me sign this

00:04:25,840 --> 00:04:33,160
paper for an emergency surgery or you'll

00:04:28,690 --> 00:04:36,570
die I asked do I have the option not to

00:04:33,160 --> 00:04:36,570
sign well if you want to die

00:04:37,330 --> 00:04:43,240
so ya did this year the organizers were

00:04:40,990 --> 00:04:44,860
kind enough to invite me again so I

00:04:43,240 --> 00:04:49,840
could share with you what I was supposed

00:04:44,860 --> 00:04:52,210
to share last year and we what happened

00:04:49,840 --> 00:04:56,440
to me in the past now we are going to

00:04:52,210 --> 00:05:01,750
talk about the future the future of Ruby

00:04:56,440 --> 00:05:05,440
Wow sounds good right and I know some of

00:05:01,750 --> 00:05:08,460
you are thinking what is this guy going

00:05:05,440 --> 00:05:11,680
to tell me about the future of Ruby

00:05:08,460 --> 00:05:14,200
after all he's not on Ruby's core team

00:05:11,680 --> 00:05:18,150
he's not on the rails core team as a

00:05:14,200 --> 00:05:21,610
matter of fact he's not on any core team

00:05:18,150 --> 00:05:22,960
doesn't seem very competent to be

00:05:21,610 --> 00:05:25,210
talking about the future of Ruby

00:05:22,960 --> 00:05:27,729
actually at the speaker dinner somebody

00:05:25,210 --> 00:05:29,950
told me you look kind of young I

00:05:27,729 --> 00:05:31,780
expected that you would be Odin twice

00:05:29,950 --> 00:05:34,780
because you're going to speak about the

00:05:31,780 --> 00:05:38,310
future of Ruby and then I decided not to

00:05:34,780 --> 00:05:38,310
shave until the conference

00:05:40,220 --> 00:05:44,069
[Applause]

00:05:44,789 --> 00:05:50,019
so I have been really really interested

00:05:48,580 --> 00:05:52,149
in the future of Ruby because as I told

00:05:50,019 --> 00:05:53,339
you I I love the language and I wanted

00:05:52,149 --> 00:05:57,059
to have a future

00:05:53,339 --> 00:05:59,649
so at several conferences math says that

00:05:57,059 --> 00:06:03,459
the the target date

00:05:59,649 --> 00:06:05,589
DTA for Ruby 3.0 are the Summer Olympic

00:06:03,459 --> 00:06:08,379
Games in Tokyo in 2020

00:06:05,589 --> 00:06:11,409
afterwards he revised this estimate is

00:06:08,379 --> 00:06:13,360
overly optimistic so I believe that

00:06:11,409 --> 00:06:15,639
right now nobody knows when Ruby 3 is

00:06:13,360 --> 00:06:17,169
going to happen but one one thing is

00:06:15,639 --> 00:06:21,579
certain it's not going to happen anytime

00:06:17,169 --> 00:06:24,099
soon on the on the conferences recently

00:06:21,579 --> 00:06:27,369
must has been saying things like rubies

00:06:24,099 --> 00:06:30,249
now mature which is great he has been

00:06:27,369 --> 00:06:33,119
saying that he and the core team are

00:06:30,249 --> 00:06:35,919
aware of all the mistakes they have done

00:06:33,119 --> 00:06:39,009
but because compatibility is very

00:06:35,919 --> 00:06:43,149
important which is true it's very hard

00:06:39,009 --> 00:06:45,219
to fix those mistakes which sucks he has

00:06:43,149 --> 00:06:49,569
been saying things like ruby has

00:06:45,219 --> 00:06:51,909
survived for 24 years which from 1-2

00:06:49,569 --> 00:06:54,729
months I'd sounds kind of good but

00:06:51,909 --> 00:06:57,639
survived is a word with a very negative

00:06:54,729 --> 00:07:00,849
connotation it seems that right now

00:06:57,639 --> 00:07:03,339
Ruby's only aim is to survive and I

00:07:00,849 --> 00:07:06,069
really want the word that Mars is using

00:07:03,339 --> 00:07:08,619
to beat rife ruby has strived for 24

00:07:06,069 --> 00:07:11,679
years and is going to try for many many

00:07:08,619 --> 00:07:13,539
more years max also said that there are

00:07:11,679 --> 00:07:15,069
very few tools that have survived so

00:07:13,539 --> 00:07:16,779
long so you should bet on them and I

00:07:15,069 --> 00:07:19,509
believe he he was trying to tell you

00:07:16,779 --> 00:07:22,959
that the only editors were fusing and

00:07:19,509 --> 00:07:24,699
women Tomas but that's just my

00:07:22,959 --> 00:07:28,659
interpretation of his words I might be

00:07:24,699 --> 00:07:30,669
mistaken but he's also been saying

00:07:28,659 --> 00:07:32,979
things like people are still making a

00:07:30,669 --> 00:07:34,509
living with Ruby so probably they

00:07:32,979 --> 00:07:36,849
shouldn't be complaining if something

00:07:34,509 --> 00:07:40,069
sucks but I can tell you that people are

00:07:36,849 --> 00:07:44,069
still making living with Cabo

00:07:40,069 --> 00:07:45,869
and you know what it pays really well to

00:07:44,069 --> 00:07:48,889
be a COBOL developer because nobody

00:07:45,869 --> 00:07:48,889
wants to touch this

00:07:54,530 --> 00:08:00,390
mas has also been saying some other very

00:07:57,660 --> 00:08:03,300
inspirational things like we need to

00:08:00,390 --> 00:08:05,280
build the things your users need meaning

00:08:03,300 --> 00:08:09,000
his users instead of the things they

00:08:05,280 --> 00:08:11,640
want and of course he quotes he and a

00:08:09,000 --> 00:08:14,760
fourth just like anybody else you know

00:08:11,640 --> 00:08:18,090
this quote but I believe that when

00:08:14,760 --> 00:08:20,820
you're making such bold claims with

00:08:18,090 --> 00:08:22,650
which I disagree in principle you also

00:08:20,820 --> 00:08:25,200
have to have a proven track record of

00:08:22,650 --> 00:08:28,200
innovation you really have to have

00:08:25,200 --> 00:08:31,230
delivered to us the things we need it

00:08:28,200 --> 00:08:33,750
but didn't know we need so let's see the

00:08:31,230 --> 00:08:36,419
track referee review the track record of

00:08:33,750 --> 00:08:40,470
recent ruby innovation I'll start with

00:08:36,419 --> 00:08:42,630
Ruby version 2 and buy a ruby I mean the

00:08:40,470 --> 00:08:44,310
language that the the language that we

00:08:42,630 --> 00:08:48,620
all fell in love because of its

00:08:44,310 --> 00:08:51,330
simplicity Beauty the ability to express

00:08:48,620 --> 00:08:53,610
our thoughts into something that is

00:08:51,330 --> 00:08:56,640
breathable unlike Java as somebody

00:08:53,610 --> 00:08:59,820
mentioned earlier so for me this is the

00:08:56,640 --> 00:09:01,380
essence of Ruby MRI that's that's

00:08:59,820 --> 00:09:04,710
something in the background whether it's

00:09:01,380 --> 00:09:07,260
fast slow we want it fast but I don't

00:09:04,710 --> 00:09:08,850
really care that much I care about the

00:09:07,260 --> 00:09:12,000
language because for me this is what

00:09:08,850 --> 00:09:12,750
Ruby's so let's see Ruby talk what

00:09:12,000 --> 00:09:15,870
happened there

00:09:12,750 --> 00:09:17,970
the innovation keyword arguments this

00:09:15,870 --> 00:09:23,160
was very useful although it was at least

00:09:17,970 --> 00:09:26,700
seven years overdue literal syntax for

00:09:23,160 --> 00:09:28,830
an array of symbols I really don't know

00:09:26,700 --> 00:09:32,340
who comes up with those features I

00:09:28,830 --> 00:09:34,800
really don't but I believe that at least

00:09:32,340 --> 00:09:39,980
somebody on the core team really wanted

00:09:34,800 --> 00:09:44,310
to see this happen UT fossum utf-8 sorry

00:09:39,980 --> 00:09:47,700
bulgarian leakage utf-8 is now the

00:09:44,310 --> 00:09:50,400
default source encoding great change 12

00:09:47,700 --> 00:09:52,950
years overdue refinements an

00:09:50,400 --> 00:09:56,310
experimental feature which nobody really

00:09:52,950 --> 00:10:00,570
wanted nobody asked for but it seems we

00:09:56,310 --> 00:10:03,150
really needed it Ruby 2.1 rational and

00:10:00,570 --> 00:10:05,379
complex literal syntax kind of useful

00:10:03,150 --> 00:10:06,939
but nineteen nine

00:10:05,379 --> 00:10:10,749
point seven percent of the people don't

00:10:06,939 --> 00:10:13,929
really use this devs now return a value

00:10:10,749 --> 00:10:15,609
very very useful refinements are no

00:10:13,929 --> 00:10:19,539
longer an experimental feature well

00:10:15,609 --> 00:10:24,329
still nobody cares about them so it'll

00:10:19,539 --> 00:10:24,329
be two point two absolutely nothing

00:10:24,689 --> 00:10:30,959
Ruby 2 point three frozen strings

00:10:28,569 --> 00:10:34,929
literal pragma very important addition

00:10:30,959 --> 00:10:36,970
our way two strings string literals and

00:10:34,929 --> 00:10:39,759
I hope strings becoming immutable down

00:10:36,970 --> 00:10:41,919
the road safe navigation operator highly

00:10:39,759 --> 00:10:44,169
controversial feature that really

00:10:41,919 --> 00:10:48,069
promotes writing code that nobody

00:10:44,169 --> 00:10:50,679
understands squiggly here dogs that's

00:10:48,069 --> 00:10:52,899
one of my favorite traditions in Ruby in

00:10:50,679 --> 00:10:55,239
recent years and this wasn't even

00:10:52,899 --> 00:10:57,309
mentioned in the release announcement I

00:10:55,239 --> 00:11:00,519
accidentally found out about it

00:10:57,309 --> 00:11:03,309
so the Ruby team really needs somebody

00:11:00,519 --> 00:11:06,999
to write proper release announcements

00:11:03,309 --> 00:11:08,979
Ruby 2 point for unified fix them and

00:11:06,999 --> 00:11:10,689
bignum into integer most people probably

00:11:08,979 --> 00:11:13,209
wouldn't notice this although it's a

00:11:10,689 --> 00:11:18,059
nice change support Unicode case

00:11:13,209 --> 00:11:21,429
mappings eight years overdue very useful

00:11:18,059 --> 00:11:24,579
would be two point five when I was

00:11:21,429 --> 00:11:26,409
working on this talk I asked myself what

00:11:24,579 --> 00:11:28,509
do I know about Ruby 2 point 5 the

00:11:26,409 --> 00:11:31,029
answer was nothing so I opened the

00:11:28,509 --> 00:11:33,579
changelog and I just copied that the

00:11:31,029 --> 00:11:36,639
language changes from their top level

00:11:33,579 --> 00:11:39,129
constant lookup is removed seems kind of

00:11:36,639 --> 00:11:41,649
vague I know what this is but I don't

00:11:39,129 --> 00:11:44,109
think you can understand it some other

00:11:41,649 --> 00:11:46,119
somewhat useful features like rescue

00:11:44,109 --> 00:11:48,909
ensure are allowed inside doing blocks

00:11:46,119 --> 00:11:50,799
this pretty cool refinements take place

00:11:48,909 --> 00:11:53,249
in string interpolations still nobody

00:11:50,799 --> 00:11:53,249
cares

00:11:54,089 --> 00:12:02,770
I'm deeply convinced that at this point

00:11:57,790 --> 00:12:04,630
Java innovates more than Ruby and that's

00:12:02,770 --> 00:12:07,089
not an empty statement if you take a

00:12:04,630 --> 00:12:11,230
look at the epic changes that happened

00:12:07,089 --> 00:12:14,140
in Java nine just three days ago they're

00:12:11,230 --> 00:12:16,390
a project that suffers from way more

00:12:14,140 --> 00:12:19,660
compatibility constraints than Ruby and

00:12:16,390 --> 00:12:21,880
they still find ways to address some

00:12:19,660 --> 00:12:24,670
issues from the past to push forward and

00:12:21,880 --> 00:12:27,370
to push it a really rapid pace Java

00:12:24,670 --> 00:12:29,110
announced that starting from three days

00:12:27,370 --> 00:12:32,290
ago they are going to release a new

00:12:29,110 --> 00:12:34,180
major version every six months and this

00:12:32,290 --> 00:12:36,430
is supposedly the most enterprising

00:12:34,180 --> 00:12:41,140
project in existence but they can do it

00:12:36,430 --> 00:12:46,029
somehow and the other thing that really

00:12:41,140 --> 00:12:49,120
bothers me is that Ruby is so so

00:12:46,029 --> 00:12:52,720
dominated by rails let us take a look at

00:12:49,120 --> 00:12:55,089
the changelog for Ruby 2.2 and count the

00:12:52,720 --> 00:12:58,959
numbers the number of times rails

00:12:55,089 --> 00:13:02,890
appears there once twice three times

00:12:58,959 --> 00:13:04,959
four times five times is this normal it

00:13:02,890 --> 00:13:07,990
seems that everything that happens in

00:13:04,959 --> 00:13:10,390
Ruby happens for the sake of a web

00:13:07,990 --> 00:13:12,640
application framework I know that

00:13:10,390 --> 00:13:14,350
probably all of us here are real

00:13:12,640 --> 00:13:17,290
developer x' but I really do believe

00:13:14,350 --> 00:13:19,329
that it's not normal for a single

00:13:17,290 --> 00:13:22,410
framework to be controlling the fate of

00:13:19,329 --> 00:13:22,410
a programming language

00:13:22,630 --> 00:13:31,519
[Applause]

00:13:28,639 --> 00:13:33,499
and I'd really like to encourage

00:13:31,519 --> 00:13:36,379
everybody to take a look at Trailblazer

00:13:33,499 --> 00:13:41,119
hanami there are alternatives people

00:13:36,379 --> 00:13:43,790
look around there but what about tip the

00:13:41,119 --> 00:13:45,489
Ruby 3.0 the future I promise that this

00:13:43,790 --> 00:13:48,399
talk is actually going to feature

00:13:45,489 --> 00:13:52,309
programming code I know that it's very

00:13:48,399 --> 00:13:56,269
uncommon for Ruby conferences but brace

00:13:52,309 --> 00:13:58,059
yourself so what do we know we don't

00:13:56,269 --> 00:14:00,829
know anything

00:13:58,059 --> 00:14:03,379
at least we don't know anything concrete

00:14:00,829 --> 00:14:05,239
for instance for a while the devil's

00:14:03,379 --> 00:14:09,079
talk that Ruby tree was going to feature

00:14:05,239 --> 00:14:11,629
optional static typing this has has been

00:14:09,079 --> 00:14:13,699
officially rejected now there has been

00:14:11,629 --> 00:14:15,110
some talk about duck inference I won't

00:14:13,699 --> 00:14:17,179
go into any details about this because

00:14:15,110 --> 00:14:19,579
muds made some really good talks on the

00:14:17,179 --> 00:14:21,499
subject I think that this is a really

00:14:19,579 --> 00:14:23,959
good idea but at some point somebody

00:14:21,499 --> 00:14:26,660
should tell us is this happening or it's

00:14:23,959 --> 00:14:28,939
going to be rejected in two years better

00:14:26,660 --> 00:14:31,489
support for concurrent and parallel

00:14:28,939 --> 00:14:34,279
programming for a while it was really

00:14:31,489 --> 00:14:37,309
unclear what's happening there lately it

00:14:34,279 --> 00:14:41,329
seems that guilds are that the way to go

00:14:37,309 --> 00:14:42,980
I am I'm really divided when it comes to

00:14:41,329 --> 00:14:44,899
guilds I'm not going to say much about

00:14:42,980 --> 00:14:48,919
them basically that's a way for us to

00:14:44,899 --> 00:14:52,999
get real parallelism and not remove the

00:14:48,919 --> 00:14:56,029
Geo so it's it's a compromise to make

00:14:52,999 --> 00:14:57,829
progress which is okay that there are

00:14:56,029 --> 00:15:00,709
many excellent talks on the subject

00:14:57,829 --> 00:15:02,540
take a look you decide whether this is

00:15:00,709 --> 00:15:05,179
the approach that the good approach or

00:15:02,540 --> 00:15:08,029
not three times faster performance until

00:15:05,179 --> 00:15:11,269
yesterday I had absolutely no idea how

00:15:08,029 --> 00:15:13,579
this was going to happen because every

00:15:11,269 --> 00:15:17,079
time Matt's just mentioned it and

00:15:13,579 --> 00:15:18,960
pressed next on the other slight remote

00:15:17,079 --> 00:15:21,000
so

00:15:18,960 --> 00:15:24,300
I just assumed that he has it under

00:15:21,000 --> 00:15:26,970
control so mg it seems to be the way

00:15:24,300 --> 00:15:31,350
there are presentations about this idea

00:15:26,970 --> 00:15:33,510
I guess everybody masses he also

00:15:31,350 --> 00:15:35,580
mentioned that we are getting creative

00:15:33,510 --> 00:15:38,850
some quirky language features but he

00:15:35,580 --> 00:15:42,450
never mentioned which exactly and I have

00:15:38,850 --> 00:15:44,010
some ideas and he many times said that

00:15:42,450 --> 00:15:47,060
we should not be repeating the mistakes

00:15:44,010 --> 00:15:50,280
which patently made the mistakes that

00:15:47,060 --> 00:15:55,080
JavaScript formate and PHP 6 made

00:15:50,280 --> 00:15:57,300
although comparing crew B to JavaScript

00:15:55,080 --> 00:16:04,140
and PHP something really who listened to

00:15:57,300 --> 00:16:06,750
me but I'm not now a nicer person so I'm

00:16:04,140 --> 00:16:08,550
not going to push this further

00:16:06,750 --> 00:16:10,620
anyways I do remember some other

00:16:08,550 --> 00:16:13,260
mistakes that are not really discussed

00:16:10,620 --> 00:16:16,230
like the development of Peru 6 which

00:16:13,260 --> 00:16:18,660
took so many years that by the time that

00:16:16,230 --> 00:16:20,520
/ 6 was announced there weren't Peru

00:16:18,660 --> 00:16:27,930
developers around to be excited about

00:16:20,520 --> 00:16:31,770
the release and so just some food for

00:16:27,930 --> 00:16:34,440
thought nothing more mats also asked who

00:16:31,770 --> 00:16:36,870
said that ruby is dead well just two

00:16:34,440 --> 00:16:40,710
days ago I was at another conference and

00:16:36,870 --> 00:16:42,510
the key notice ruby is dead by the

00:16:40,710 --> 00:16:44,100
prominent and very deep and profound

00:16:42,510 --> 00:16:48,240
gentlemen Nick cetera

00:16:44,100 --> 00:16:49,860
after Glaser fame Nico's so certain

00:16:48,240 --> 00:16:53,880
about this that he even to do this on

00:16:49,860 --> 00:16:57,440
his neck and started selling t-shirts to

00:16:53,880 --> 00:16:57,440
fund the development of trailblazer

00:16:59,079 --> 00:17:06,500
just sayin matzah

00:17:01,870 --> 00:17:08,540
III felt obliged to answer and now I'm

00:17:06,500 --> 00:17:10,429
going to do the one thing that everybody

00:17:08,540 --> 00:17:11,990
teaches you about the presentation that

00:17:10,429 --> 00:17:13,970
is the worst thing and the worst

00:17:11,990 --> 00:17:17,089
presenters do it because I'm one of them

00:17:13,970 --> 00:17:20,240
put a lot of text on a slide and 3ds

00:17:17,089 --> 00:17:22,400
slowly to the audience I believe that

00:17:20,240 --> 00:17:24,860
it's okay if this is something written

00:17:22,400 --> 00:17:26,660
by Zack Tellman and it is deep and

00:17:24,860 --> 00:17:29,330
profound because everything deep and

00:17:26,660 --> 00:17:31,640
profound goes there has been a

00:17:29,330 --> 00:17:33,980
consistent migratory pattern from Ruby

00:17:31,640 --> 00:17:36,200
to know GS to go to rest until akhira at

00:17:33,980 --> 00:17:38,540
first each community is defined by its

00:17:36,200 --> 00:17:40,700
potential but as the potential is

00:17:38,540 --> 00:17:43,400
realized the community begins to be

00:17:40,700 --> 00:17:45,950
defined by its compromises the change is

00:17:43,400 --> 00:17:48,169
felt most keenly by the people who are

00:17:45,950 --> 00:17:51,500
there first who remember what it was

00:17:48,169 --> 00:17:54,230
when anything seemed possible they feel

00:17:51,500 --> 00:17:56,720
fenced in and so they move on in search

00:17:54,230 --> 00:17:58,640
of their golden city I don't know about

00:17:56,720 --> 00:18:01,070
you but it seems to me that this

00:17:58,640 --> 00:18:03,410
describes the situation in Ruby so

00:18:01,070 --> 00:18:05,299
perfectly in recent years and don't get

00:18:03,410 --> 00:18:08,570
me wrong I know that the stewardship of

00:18:05,299 --> 00:18:11,600
a major project like ruby is very very

00:18:08,570 --> 00:18:14,540
hard there are a lot of trade-offs a lot

00:18:11,600 --> 00:18:16,520
of considerations to be made I heartily

00:18:14,540 --> 00:18:19,010
recommend to everybody to watch the talk

00:18:16,520 --> 00:18:21,710
stewardship the sobering parts by the

00:18:19,010 --> 00:18:23,419
chief architect of Java that's one of

00:18:21,710 --> 00:18:25,850
the best talks that I have ever seen in

00:18:23,419 --> 00:18:29,030
my entire life and it really sheds a lot

00:18:25,850 --> 00:18:31,549
of light on how hard it is to make

00:18:29,030 --> 00:18:33,559
decisions to evolve a very mature

00:18:31,549 --> 00:18:36,500
project and how many people are going to

00:18:33,559 --> 00:18:38,990
be upset by any decision so you know

00:18:36,500 --> 00:18:40,090
your tenth if you do you're damned if

00:18:38,990 --> 00:18:44,110
you don't

00:18:40,090 --> 00:18:48,320
it's it's tough but that being said

00:18:44,110 --> 00:18:50,780
let's make Ruby great again I'm starting

00:18:48,320 --> 00:18:52,280
my show presentation now in the typical

00:18:50,780 --> 00:18:56,240
style of Ruben

00:18:52,280 --> 00:18:56,240
[Applause]

00:18:57,920 --> 00:19:03,780
I'd like to introduce a new concept for

00:19:01,530 --> 00:19:06,560
the future of Ruby because I don't think

00:19:03,780 --> 00:19:10,620
that Ruby tree is adequate for our needs

00:19:06,560 --> 00:19:13,400
so let's assume that there is a secret

00:19:10,620 --> 00:19:16,920
team of highly skilled developers

00:19:13,400 --> 00:19:20,490
working on this project that actually

00:19:16,920 --> 00:19:22,920
has a cool codename bus because you know

00:19:20,490 --> 00:19:26,580
Buzz Lightyear can take us to infinity

00:19:22,920 --> 00:19:30,690
and beyond and let's let's say that they

00:19:26,580 --> 00:19:33,480
even have a very concrete idea about

00:19:30,690 --> 00:19:37,970
what this future version of Ruby should

00:19:33,480 --> 00:19:37,970
be first of all

00:19:44,720 --> 00:19:50,489
yes Ruby for is going to be four times

00:19:47,850 --> 00:19:52,559
faster than Ruby tree which means it is

00:19:50,489 --> 00:19:55,110
going to be 12 times faster than Ruby

00:19:52,559 --> 00:19:58,289
tour which means that through before is

00:19:55,110 --> 00:20:00,299
finally going to be fast enough although

00:19:58,289 --> 00:20:07,619
it is probably still going to be slower

00:20:00,299 --> 00:20:11,460
than JRuby so adopt JRuby today now

00:20:07,619 --> 00:20:13,889
let's focus on the language or the

00:20:11,460 --> 00:20:16,590
language and its standard library if we

00:20:13,889 --> 00:20:19,499
have time for it we are guided by

00:20:16,590 --> 00:20:21,149
several design principles because every

00:20:19,499 --> 00:20:22,009
good language designer should have

00:20:21,149 --> 00:20:24,359
principles

00:20:22,009 --> 00:20:27,419
ideally more than one and they should

00:20:24,359 --> 00:20:29,389
ideally follow those principles and you

00:20:27,419 --> 00:20:32,340
saw the team highly skilled people

00:20:29,389 --> 00:20:35,249
continue to optimize for happiness so

00:20:32,340 --> 00:20:37,859
this means in practice add some useful

00:20:35,249 --> 00:20:38,460
new features to the language we have a

00:20:37,859 --> 00:20:40,980
few ideas

00:20:38,460 --> 00:20:43,440
number one immutable data structures

00:20:40,980 --> 00:20:46,049
that are very well integrated in the

00:20:43,440 --> 00:20:47,759
language we are going to have vector

00:20:46,049 --> 00:20:49,769
which is basically an immutable version

00:20:47,759 --> 00:20:51,989
of array it is going to have the

00:20:49,769 --> 00:20:55,440
following immutable syntax and there is

00:20:51,989 --> 00:20:57,210
going to be an API to seamlessly go back

00:20:55,440 --> 00:21:02,279
and forward between arrays and vectors

00:20:57,210 --> 00:21:04,139
so there will be no real breakages you

00:21:02,279 --> 00:21:07,379
just get more stuff we are going to get

00:21:04,139 --> 00:21:09,600
immutable hashes they're going to look

00:21:07,379 --> 00:21:13,309
like this in their literal syntax form

00:21:09,600 --> 00:21:16,259
we're going to get immutable sets and

00:21:13,309 --> 00:21:18,600
maybe more importantly we are finally

00:21:16,259 --> 00:21:20,850
going to promote sets to a first-class

00:21:18,600 --> 00:21:23,460
data structure in Ruby right now they're

00:21:20,850 --> 00:21:25,980
just part of the standard library so

00:21:23,460 --> 00:21:29,159
that's why nobody in Ruby uses sets and

00:21:25,980 --> 00:21:31,379
people are doing using arrays for what

00:21:29,159 --> 00:21:34,049
is a perfect use case of set more

00:21:31,379 --> 00:21:36,509
arithmetic so I believe that by

00:21:34,049 --> 00:21:37,859
promoting sets to a first-class data

00:21:36,509 --> 00:21:40,320
structure as in most programming

00:21:37,859 --> 00:21:43,440
languages we are finally going to show

00:21:40,320 --> 00:21:44,039
many people delight this is going to be

00:21:43,440 --> 00:21:47,129
awesome

00:21:44,039 --> 00:21:49,830
more details incoming static typing and

00:21:47,129 --> 00:21:52,950
runtime contracts without breaking

00:21:49,830 --> 00:21:54,980
anything that there is a little known

00:21:52,950 --> 00:21:58,370
project RDL

00:21:54,980 --> 00:22:00,740
which is really cool and we we believe

00:21:58,370 --> 00:22:03,740
that they're on the right path to solve

00:22:00,740 --> 00:22:06,140
our problems with Ruby we are going to

00:22:03,740 --> 00:22:08,270
introduce type annotations for methods

00:22:06,140 --> 00:22:10,820
which look like this you're basically

00:22:08,270 --> 00:22:13,520
going to be able to specify the types of

00:22:10,820 --> 00:22:16,010
the parameters and the type of the

00:22:13,520 --> 00:22:19,610
result this is something that you can

00:22:16,010 --> 00:22:22,370
add or you can you can note that this is

00:22:19,610 --> 00:22:25,970
something that can be disabled globally

00:22:22,370 --> 00:22:28,160
in the runtime so if you disable it no

00:22:25,970 --> 00:22:31,340
overhead at all usually you would want

00:22:28,160 --> 00:22:33,050
to use this in Ableton development and a

00:22:31,340 --> 00:22:35,180
staging environment but you would want

00:22:33,050 --> 00:22:38,330
it completely completely disabled in

00:22:35,180 --> 00:22:40,730
production it supports some really fancy

00:22:38,330 --> 00:22:46,060
things like precondition post conditions

00:22:40,730 --> 00:22:48,980
it supports very complex very complex

00:22:46,060 --> 00:22:51,170
definitions for the inputs and outputs

00:22:48,980 --> 00:22:52,880
of a method for instance you can say

00:22:51,170 --> 00:22:55,220
that something is a float and it's a

00:22:52,880 --> 00:22:57,350
positive number and that the output is

00:22:55,220 --> 00:22:59,420
also a float it's a positive number and

00:22:57,350 --> 00:23:02,050
I believe that this is pretty cool and

00:22:59,420 --> 00:23:04,940
adds a ton of value to your code

00:23:02,050 --> 00:23:08,360
completely backwards compatible doesn't

00:23:04,940 --> 00:23:11,300
doesn't break anything better

00:23:08,360 --> 00:23:13,430
concurrency api's yes we can do

00:23:11,300 --> 00:23:16,550
something like goats but I really don't

00:23:13,430 --> 00:23:19,010
think that our issue is performance most

00:23:16,550 --> 00:23:22,280
of the time as matt said himself threads

00:23:19,010 --> 00:23:25,490
are very hard to use in general so what

00:23:22,280 --> 00:23:28,130
we need is a better API to deal with

00:23:25,490 --> 00:23:30,530
concurrency over overall and we don't

00:23:28,130 --> 00:23:32,170
need to come up with something new that

00:23:30,530 --> 00:23:34,400
there has been many languages

00:23:32,170 --> 00:23:36,740
experimenting with this for many years I

00:23:34,400 --> 00:23:40,760
said let's just pick some of the best

00:23:36,740 --> 00:23:43,040
ideas around um we we have this project

00:23:40,760 --> 00:23:46,100
concurrent Ruby even today they provide

00:23:43,040 --> 00:23:49,340
a lot of concurrency primitives for Ruby

00:23:46,100 --> 00:23:51,290
and I believe that probably the best

00:23:49,340 --> 00:23:53,930
approach that we can adopt today is

00:23:51,290 --> 00:23:56,030
communicating sequential processes made

00:23:53,930 --> 00:23:58,040
really popular by goal that then

00:23:56,030 --> 00:24:02,090
promoted even further but closure and

00:23:58,040 --> 00:24:04,330
friends so we are going to add to Ruby

00:24:02,090 --> 00:24:06,970
and API looking more or less like this

00:24:04,330 --> 00:24:08,500
unfortunately due to time constraints I

00:24:06,970 --> 00:24:10,510
not going to many details but you can

00:24:08,500 --> 00:24:14,169
just check out the awesome documentation

00:24:10,510 --> 00:24:17,320
of concurrent Ruby I I believe that we

00:24:14,169 --> 00:24:19,210
really just have to follow up with

00:24:17,320 --> 00:24:21,970
things that we know are good that people

00:24:19,210 --> 00:24:24,809
like and that are practical useful and

00:24:21,970 --> 00:24:27,850
proven no need to experiment further and

00:24:24,809 --> 00:24:31,600
because Charlie challenged me to come up

00:24:27,850 --> 00:24:33,250
with more new features through before we

00:24:31,600 --> 00:24:35,919
are going to add something which I call

00:24:33,250 --> 00:24:41,250
namespaces and this is the biggest

00:24:35,919 --> 00:24:43,960
change to the language since iPhone 7 so

00:24:41,250 --> 00:24:45,520
instead of writing imagine this

00:24:43,960 --> 00:24:47,640
situation you hear two nested classes

00:24:45,520 --> 00:24:50,140
you want to nest a module inside

00:24:47,640 --> 00:24:53,919
normally you would do it like this but

00:24:50,140 --> 00:24:57,309
it looks kind of kind of strange you can

00:24:53,919 --> 00:24:59,520
do it like this but it also looks kind

00:24:57,309 --> 00:25:03,309
of strange what if there was some

00:24:59,520 --> 00:25:06,490
magical syntax that didn't really care

00:25:03,309 --> 00:25:09,070
if a and B were classes modules whatever

00:25:06,490 --> 00:25:11,289
that allows you to nest perfectly and

00:25:09,070 --> 00:25:15,909
just did the right thing well that's

00:25:11,289 --> 00:25:19,380
namespaces for you available November

00:25:15,909 --> 00:25:21,940
the 3rd you can pre-order them today

00:25:19,380 --> 00:25:25,270
better matching yes we're going to hear

00:25:21,940 --> 00:25:28,120
this because all the elixir developers

00:25:25,270 --> 00:25:30,220
are bragging about this and we cannot

00:25:28,120 --> 00:25:33,520
stand it anymore Ruby this verse better

00:25:30,220 --> 00:25:35,799
matching but the API is still to be

00:25:33,520 --> 00:25:38,380
decided upon and because I've noticed

00:25:35,799 --> 00:25:42,789
that Ruby developers never deprecated

00:25:38,380 --> 00:25:45,520
anything especially in Ruby core we are

00:25:42,789 --> 00:25:47,980
going to add a duplication API to make

00:25:45,520 --> 00:25:50,440
it really easy for them to move progress

00:25:47,980 --> 00:25:53,200
forward the duplication API is going to

00:25:50,440 --> 00:25:55,030
look more or less like this right now

00:25:53,200 --> 00:25:57,370
the most common way to duplicate

00:25:55,030 --> 00:26:00,610
something is to use gems deprecated the

00:25:57,370 --> 00:26:02,740
module and the deprecated method that

00:26:00,610 --> 00:26:06,760
comes from this module we are going to

00:26:02,740 --> 00:26:09,039
just promote this to module itself so we

00:26:06,760 --> 00:26:12,210
are going to be able to use something

00:26:09,039 --> 00:26:14,110
like an annotation if you want

00:26:12,210 --> 00:26:15,880
deprecated the replacement method

00:26:14,110 --> 00:26:19,659
version whatever there are going to be

00:26:15,880 --> 00:26:22,419
many supported parameters this is going

00:26:19,659 --> 00:26:24,640
to issue beautiful messages that prompt

00:26:22,419 --> 00:26:28,750
developers to swiftly update their code

00:26:24,640 --> 00:26:30,520
and go forward to the future and because

00:26:28,750 --> 00:26:32,590
from time to time we make really epic

00:26:30,520 --> 00:26:34,659
mistakes and we want to deprecate entire

00:26:32,590 --> 00:26:37,950
classes while we are going to support

00:26:34,659 --> 00:26:40,780
this as well really really cool feature

00:26:37,950 --> 00:26:43,510
we have more design principles

00:26:40,780 --> 00:26:45,970
design principle number two simplicity

00:26:43,510 --> 00:26:48,820
because simplicity is the ultimate

00:26:45,970 --> 00:26:55,630
sophistication and saying this makes me

00:26:48,820 --> 00:26:59,620
sound very sophisticated also every a

00:26:55,630 --> 00:27:02,260
view user of Unix a forest and so on

00:26:59,620 --> 00:27:05,320
knows that less is more and Master Yoda

00:27:02,260 --> 00:27:08,950
keeps telling us that simplicity leads

00:27:05,320 --> 00:27:11,799
to happiness or something like this

00:27:08,950 --> 00:27:13,570
am I your voice really sucks sorry about

00:27:11,799 --> 00:27:16,330
this

00:27:13,570 --> 00:27:18,940
so in the spirit of simplicity we are

00:27:16,330 --> 00:27:20,620
going to drop some stuff I'm going to

00:27:18,940 --> 00:27:22,659
say drop right now but because we are

00:27:20,620 --> 00:27:24,610
very careful and responsible team first

00:27:22,659 --> 00:27:26,440
we are going to duplicate them and then

00:27:24,610 --> 00:27:28,840
we are going to drop them so there are

00:27:26,440 --> 00:27:31,690
going to be no immediate backwards in

00:27:28,840 --> 00:27:34,330
code incompatibilities because believe

00:27:31,690 --> 00:27:36,610
it or not we can just gradually phase

00:27:34,330 --> 00:27:39,880
out things we don't need to do it

00:27:36,610 --> 00:27:41,830
suddenly so let's start with the removal

00:27:39,880 --> 00:27:44,409
process first we are going to remove the

00:27:41,830 --> 00:27:45,780
absolutely useless bits of Ruby for

00:27:44,409 --> 00:27:49,780
loops

00:27:45,780 --> 00:27:52,000
have you written code like this nobody

00:27:49,780 --> 00:27:56,289
admits right we are killing them because

00:27:52,000 --> 00:27:58,570
everybody uses each out a lot I believe

00:27:56,289 --> 00:28:01,480
that nobody has used auto loads for at

00:27:58,570 --> 00:28:03,760
least 11 years now so we are finally

00:28:01,480 --> 00:28:05,620
removing them from the language begin

00:28:03,760 --> 00:28:07,630
intent the majority of you don't know

00:28:05,620 --> 00:28:10,809
what this does but basically it's allows

00:28:07,630 --> 00:28:14,070
you it allows you to write code that

00:28:10,809 --> 00:28:19,380
doesn't have nature of flow of control

00:28:14,070 --> 00:28:22,350
I know I know

00:28:19,380 --> 00:28:23,090
it's a felt right we can write it like

00:28:22,350 --> 00:28:26,850
this

00:28:23,090 --> 00:28:30,180
bye-bye begin intent we hardly knew you

00:28:26,850 --> 00:28:32,700
we don't really miss you and yes we have

00:28:30,180 --> 00:28:34,800
a colonel at Exit Quebec in case you

00:28:32,700 --> 00:28:39,330
really want to register something at

00:28:34,800 --> 00:28:43,770
exit flip-flops everybody's favorite

00:28:39,330 --> 00:28:47,790
feature I have noticed that the only use

00:28:43,770 --> 00:28:50,730
case of flip-flops usage in the world is

00:28:47,790 --> 00:28:54,120
direct copy/paste of an example of their

00:28:50,730 --> 00:28:56,220
usage from the pick X book which looks

00:28:54,120 --> 00:29:00,570
like this because I copy pasted it

00:28:56,220 --> 00:29:02,700
myself I don't believe that one use case

00:29:00,570 --> 00:29:05,760
warrants or special support in the

00:29:02,700 --> 00:29:08,850
language so we are we are finally saying

00:29:05,760 --> 00:29:11,310
them goodbye block comments a feature

00:29:08,850 --> 00:29:14,010
that you've probably never heard of but

00:29:11,310 --> 00:29:16,890
there is a second way to write comments

00:29:14,010 --> 00:29:19,290
in Ruby it looks like this and it is

00:29:16,890 --> 00:29:21,630
very cool in theory if it wasn't

00:29:19,290 --> 00:29:25,410
implemented in the worst possible manner

00:29:21,630 --> 00:29:27,210
for the most obscure reasons so they

00:29:25,410 --> 00:29:29,430
must be placed at the very beginning of

00:29:27,210 --> 00:29:31,230
a line which means that if you write

00:29:29,430 --> 00:29:33,420
code like this this is going to be a

00:29:31,230 --> 00:29:36,060
compilation error if you write it like

00:29:33,420 --> 00:29:38,490
this it looks ridiculous lately so

00:29:36,060 --> 00:29:42,300
nobody uses them they are completely

00:29:38,490 --> 00:29:44,640
forgotten and I believe it is 5:00 time

00:29:42,300 --> 00:29:46,290
to part ways with them as well I know

00:29:44,640 --> 00:29:48,780
that the talk is getting very very

00:29:46,290 --> 00:29:51,120
depressing but I'm certain that a good

00:29:48,780 --> 00:29:53,990
amount of Ruby karaoke afterwards is

00:29:51,120 --> 00:29:56,400
going to cheer us up character literals

00:29:53,990 --> 00:29:59,580
they used to be something useful before

00:29:56,400 --> 00:30:03,720
ruby 1.9 but now they're just basically

00:29:59,580 --> 00:30:05,490
an alias for single character strings so

00:30:03,720 --> 00:30:09,330
we are just removing them because we can

00:30:05,490 --> 00:30:12,780
write single character strings safety

00:30:09,330 --> 00:30:14,640
levels that's a that's a tough subject

00:30:12,780 --> 00:30:18,000
because I know that none of you probably

00:30:14,640 --> 00:30:20,040
ever use them but it makes it really

00:30:18,000 --> 00:30:22,710
easy for me to tell you that this is a

00:30:20,040 --> 00:30:24,010
feature that never functions property a

00:30:22,710 --> 00:30:27,340
properly

00:30:24,010 --> 00:30:30,460
it's complicated the VM and I really

00:30:27,340 --> 00:30:33,160
like removing useless complicated

00:30:30,460 --> 00:30:35,440
features that there is a lot you can

00:30:33,160 --> 00:30:37,690
read about safety levels and twice a

00:30:35,440 --> 00:30:41,320
better idea to use them why it's a good

00:30:37,690 --> 00:30:44,740
idea to delete this from memory and from

00:30:41,320 --> 00:30:47,260
your minds in general charlie is the

00:30:44,740 --> 00:30:49,090
world's foremost expert on this if you

00:30:47,260 --> 00:30:51,880
buy him a beer he is going to tell you

00:30:49,090 --> 00:30:55,500
all the nitty gritty details refinements

00:30:51,880 --> 00:30:55,500
we are removing them yes

00:30:55,600 --> 00:31:00,790
[Applause]

00:30:56,760 --> 00:31:03,910
now let's not stop this was just the

00:31:00,790 --> 00:31:06,820
truly useless stuff but we've got more

00:31:03,910 --> 00:31:10,030
more ground to cover now we are starting

00:31:06,820 --> 00:31:12,730
to remove the redundant stuff because I

00:31:10,030 --> 00:31:14,740
believe that there are way too many ways

00:31:12,730 --> 00:31:19,240
to do some things in Ruby and I'll show

00:31:14,740 --> 00:31:22,090
you a few examples I did not know I

00:31:19,240 --> 00:31:24,580
wrote so many slides let's start with

00:31:22,090 --> 00:31:29,200
some core library method aliases

00:31:24,580 --> 00:31:32,050
basically we have an alias for all of

00:31:29,200 --> 00:31:35,140
the collection methods and an alias for

00:31:32,050 --> 00:31:37,150
race as well and this causes so much

00:31:35,140 --> 00:31:39,040
confusion because many newcomers to the

00:31:37,150 --> 00:31:40,540
language are convinced that those are

00:31:39,040 --> 00:31:43,860
different methods and there is some

00:31:40,540 --> 00:31:46,630
subtle nuance to their usage that is

00:31:43,860 --> 00:31:49,780
privy just to the Masters of through way

00:31:46,630 --> 00:31:52,900
they know it the others don't there are

00:31:49,780 --> 00:31:55,900
historical reasons for this in which I

00:31:52,900 --> 00:31:58,510
won't go into but I really do believe

00:31:55,900 --> 00:32:00,310
that we need to settle down on something

00:31:58,510 --> 00:32:04,450
and I really wonder we have so many

00:32:00,310 --> 00:32:06,490
aliases but select which is filtering

00:32:04,450 --> 00:32:09,520
nine out of ten programming languages

00:32:06,490 --> 00:32:14,470
except Ruby here is find all kind of

00:32:09,520 --> 00:32:17,020
strange so we are going to settle down

00:32:14,470 --> 00:32:19,450
on this Map Reduce find filter format

00:32:17,020 --> 00:32:21,670
length phrase for the benefit of the

00:32:19,450 --> 00:32:24,130
humankind and Ruby in particular rubies

00:32:21,670 --> 00:32:26,620
in particular yes

00:32:24,130 --> 00:32:29,880
this means farewell to fail because in

00:32:26,620 --> 00:32:29,880
Ruby we do not tolerate failure

00:32:30,820 --> 00:32:38,420
Brock's another favorite subject of mine

00:32:34,570 --> 00:32:41,960
do you know that Brock's do not have RIT

00:32:38,420 --> 00:32:44,120
checks do not have Flaco returns if you

00:32:41,960 --> 00:32:46,250
return from the body of a Brock you're

00:32:44,120 --> 00:32:49,190
actually returning from the outer scope

00:32:46,250 --> 00:32:53,060
unlike in London which have parity

00:32:49,190 --> 00:32:54,920
checks returned from the scope and I've

00:32:53,060 --> 00:32:58,400
always wondered do we really need them

00:32:54,920 --> 00:33:00,520
because every other language has just

00:32:58,400 --> 00:33:02,870
lambdas and they're getting by just fine

00:33:00,520 --> 00:33:05,120
I've also watched many series of

00:33:02,870 --> 00:33:06,140
Highlander and I've learned that there

00:33:05,120 --> 00:33:12,820
can be only one

00:33:06,140 --> 00:33:16,730
so yes rocks are gone lambdas for ever

00:33:12,820 --> 00:33:19,160
single quoted string literals this is

00:33:16,730 --> 00:33:21,530
everybody's favorite topic for

00:33:19,160 --> 00:33:24,590
discussion you know at conferences I

00:33:21,530 --> 00:33:27,080
usually hide from people and I stay

00:33:24,590 --> 00:33:29,450
under fake name because everybody comes

00:33:27,080 --> 00:33:31,880
to me and says how do you feel about

00:33:29,450 --> 00:33:34,010
single versus double quoted string

00:33:31,880 --> 00:33:36,310
literals and honestly I don't give a

00:33:34,010 --> 00:33:36,310


00:33:36,800 --> 00:33:42,350
but people truly believe that they do

00:33:39,650 --> 00:33:44,150
and they make arguments for single

00:33:42,350 --> 00:33:47,059
quotes tangled rows for double string

00:33:44,150 --> 00:33:50,270
literals I get it people but I believe

00:33:47,059 --> 00:33:52,130
that there was a design mistake in the

00:33:50,270 --> 00:33:54,080
language to include the two of them so

00:33:52,130 --> 00:33:57,050
I'll just remove ones preferably the

00:33:54,080 --> 00:33:59,179
single quoted string literals just

00:33:57,050 --> 00:34:03,080
because we've wasted so much time by

00:33:59,179 --> 00:34:05,840
sharing I believe that we would be at

00:34:03,080 --> 00:34:07,820
version 7 of the language if we do not

00:34:05,840 --> 00:34:09,080
have single quoted string literals and

00:34:07,820 --> 00:34:12,950
we didn't spend so much time talking

00:34:09,080 --> 00:34:15,260
about them I truly do I also think that

00:34:12,950 --> 00:34:21,200
we overdid it from the percents nothing

00:34:15,260 --> 00:34:23,389
literals which nobody knows so I have

00:34:21,200 --> 00:34:27,490
been programming in Ruby for about 12

00:34:23,389 --> 00:34:30,139
years and I've never used % s % x i

00:34:27,490 --> 00:34:32,750
fused the others infrequently I really

00:34:30,139 --> 00:34:35,600
don't understand why you need a literal

00:34:32,750 --> 00:34:38,510
syntax for an array of word or array of

00:34:35,600 --> 00:34:41,869
symbols I honestly don't it's not so

00:34:38,510 --> 00:34:46,070
confusing and strange I I think that the

00:34:41,869 --> 00:34:49,700
only that are useful are % r % q small

00:34:46,070 --> 00:34:53,540
upper you tell me what they mean if you

00:34:49,700 --> 00:34:55,790
know but I think that we can simplify it

00:34:53,540 --> 00:34:57,680
here and now I'm going to show you why

00:34:55,790 --> 00:34:58,880
in the beginning I told you I'm very

00:34:57,680 --> 00:35:02,750
excited to be here

00:34:58,880 --> 00:35:04,900
and as any programmer I do not have

00:35:02,750 --> 00:35:04,900
emotions

00:35:05,340 --> 00:35:12,410
I have just caught so I decided to show

00:35:09,060 --> 00:35:12,410
you my emotions fur coat

00:35:24,930 --> 00:35:27,930
yes

00:35:29,800 --> 00:35:35,870
this diversity that we have in Ruben

00:35:32,780 --> 00:35:38,920
forces us to make many many decisions

00:35:35,870 --> 00:35:41,120
every day every hour every moment and

00:35:38,920 --> 00:35:44,600
decision making is very hard I don't

00:35:41,120 --> 00:35:46,780
know about you but yesterday I was

00:35:44,600 --> 00:35:50,090
struggling for one hour when I was

00:35:46,780 --> 00:35:53,990
wondering whether I want palinka or

00:35:50,090 --> 00:35:55,520
whiskey and this is a simple simple

00:35:53,990 --> 00:35:57,320
choice compared to any programming

00:35:55,520 --> 00:35:59,330
decision you have to make so if you can

00:35:57,320 --> 00:36:00,800
delete some of the programming decisions

00:35:59,330 --> 00:36:02,960
and simplify your life

00:36:00,800 --> 00:36:05,270
why not do it and all of those options

00:36:02,960 --> 00:36:08,150
really worth our while I don't believe

00:36:05,270 --> 00:36:08,870
so let's stop the bike sharing and focus

00:36:08,150 --> 00:36:15,200
on what matters

00:36:08,870 --> 00:36:18,920
I mean we are not done we through before

00:36:15,200 --> 00:36:21,740
we have more ideas we actually plan to

00:36:18,920 --> 00:36:24,350
fix some broken stuff in Ruby like for

00:36:21,740 --> 00:36:27,290
instance some really odd things you know

00:36:24,350 --> 00:36:29,950
that ampersand ampersand and pipe pipe

00:36:27,290 --> 00:36:33,950
we have different levels of precedence

00:36:29,950 --> 00:36:36,380
ampersand ampersand binds stronger than

00:36:33,950 --> 00:36:38,570
PI pipe which is pretty much what you

00:36:36,380 --> 00:36:43,930
have in any programming language but end

00:36:38,570 --> 00:36:46,880
and or give the same precedence why

00:36:43,930 --> 00:36:49,940
there are also so many Neel news

00:36:46,880 --> 00:36:54,640
floating around in Ruby api's my

00:36:49,940 --> 00:36:56,720
favorite example you up case a string

00:36:54,640 --> 00:37:00,500
non-destructively you get the string

00:36:56,720 --> 00:37:03,170
results you up case it destructively

00:37:00,500 --> 00:37:05,870
if there are no modifications if the

00:37:03,170 --> 00:37:09,620
string is already up case you get a new

00:37:05,870 --> 00:37:13,910
why do I really care that no changes

00:37:09,620 --> 00:37:16,400
were applied and when is returning neo

00:37:13,910 --> 00:37:18,170
ever a good idea that that's why we need

00:37:16,400 --> 00:37:21,940
crazy operators like safe navigation

00:37:18,170 --> 00:37:24,340
because we're all so many bet api's and

00:37:21,940 --> 00:37:28,100
operators like the safe navigation

00:37:24,340 --> 00:37:29,750
proliferate the creation of more bad

00:37:28,100 --> 00:37:31,640
api's I think that we should really

00:37:29,750 --> 00:37:33,980
stand up to the mistakes we made and

00:37:31,640 --> 00:37:36,890
just delete the safe navigation operator

00:37:33,980 --> 00:37:39,300
and fix the bet IPS but they're just me

00:37:36,890 --> 00:37:42,480
just me

00:37:39,300 --> 00:37:45,210
another favorite example of mine the

00:37:42,480 --> 00:37:50,540
zero method returns true and false the

00:37:45,210 --> 00:37:50,540
nonzero returns zero and nil Antoine I

00:37:52,640 --> 00:38:00,480
have to tell you that my work on Robocop

00:37:56,369 --> 00:38:02,090
physics expose me to every quirk work

00:38:00,480 --> 00:38:05,490
and EDC

00:38:02,090 --> 00:38:07,440
idiosyncrasy in Rubin and probably am

00:38:05,490 --> 00:38:10,200
the most depressed developer in the

00:38:07,440 --> 00:38:13,560
entire Ruby community that's why I drink

00:38:10,200 --> 00:38:15,300
so much and Terrence so much but if you

00:38:13,560 --> 00:38:16,619
receive the complaints that I receive

00:38:15,300 --> 00:38:20,119
you would understand me

00:38:16,619 --> 00:38:24,020
so why let's fix this muted those things

00:38:20,119 --> 00:38:27,090
even JavaScript got this right seriously

00:38:24,020 --> 00:38:29,670
it's clearly a better idea reassign

00:38:27,090 --> 00:38:33,140
about constants let me spell this out

00:38:29,670 --> 00:38:43,760
for you reassign a ball Constance

00:38:33,140 --> 00:38:43,760
it's absurd she agrees

00:38:44,120 --> 00:38:52,430
Plus variables a feature that you learn

00:38:48,980 --> 00:38:58,010
about in a book in a blog post something

00:38:52,430 --> 00:39:00,410
and then they tell you never use this so

00:38:58,010 --> 00:39:02,030
I believe that we should either fix this

00:39:00,410 --> 00:39:04,670
or remove it

00:39:02,030 --> 00:39:08,540
preferably remove it pour in named

00:39:04,670 --> 00:39:10,880
methods so we have aliases for so many

00:39:08,540 --> 00:39:13,010
things that are completely pointless but

00:39:10,880 --> 00:39:15,380
why not fix something meaningful for

00:39:13,010 --> 00:39:17,780
instance I have always wondered why the

00:39:15,380 --> 00:39:20,060
method which prints something to

00:39:17,780 --> 00:39:22,850
standard out with a new line is named

00:39:20,060 --> 00:39:25,370
puts when the counter fight method is

00:39:22,850 --> 00:39:28,630
named print but there is no print line

00:39:25,370 --> 00:39:32,450
we have puts and print no print line

00:39:28,630 --> 00:39:35,360
right I do son Elias here cause

00:39:32,450 --> 00:39:37,490
something print line deprecated the

00:39:35,360 --> 00:39:39,710
other thing not break absolutely

00:39:37,490 --> 00:39:43,610
anything in the process and advance

00:39:39,710 --> 00:39:45,920
humanity forward there just may defined

00:39:43,610 --> 00:39:47,990
something that looks like a boolean

00:39:45,920 --> 00:39:52,130
method and maybe returns true and false

00:39:47,990 --> 00:39:56,210
but actually returns either a string or

00:39:52,130 --> 00:39:59,630
a nil but never never a boolean kind of

00:39:56,210 --> 00:40:08,480
strange yeah she agrees she's an expert

00:39:59,630 --> 00:40:09,080
ruby developer enumerable include so I

00:40:08,480 --> 00:40:11,330
don't know

00:40:09,080 --> 00:40:14,410
Bulgarian is my native language and I

00:40:11,330 --> 00:40:14,410
don't know English very well

00:40:16,220 --> 00:40:24,520
[Applause]

00:40:22,500 --> 00:40:27,880
somebody would say that this is an

00:40:24,520 --> 00:40:30,990
excellent opportunity to alias a method

00:40:27,880 --> 00:40:34,210
but I don't know

00:40:30,990 --> 00:40:37,270
Colonel percent a method with a very

00:40:34,210 --> 00:40:40,170
intention revealing name how many of you

00:40:37,270 --> 00:40:40,170
know this does Oh

00:40:40,210 --> 00:40:51,010
so many so basically this is a way to

00:40:46,320 --> 00:40:53,950
format a string but you can do it like

00:40:51,010 --> 00:40:57,940
this which is another name that I don't

00:40:53,950 --> 00:41:00,610
like you can do it like this which is

00:40:57,940 --> 00:41:02,710
kind of nicer and little-known fact in

00:41:00,610 --> 00:41:04,840
Ruby there is sexually method format at

00:41:02,710 --> 00:41:09,370
least it was little known before Robocop

00:41:04,840 --> 00:41:11,920
started complaining about it but yeah I

00:41:09,370 --> 00:41:14,140
tell me in what universe would you

00:41:11,920 --> 00:41:17,020
prefer Colonel percent over colonel

00:41:14,140 --> 00:41:20,920
format that that's a great opportunity

00:41:17,020 --> 00:41:24,570
to deprecated some aliases move humanity

00:41:20,920 --> 00:41:30,700
and troubiesome forward maybe just maybe

00:41:24,570 --> 00:41:33,880
put a style global variables oh I don't

00:41:30,700 --> 00:41:40,150
know this means buttload pot means

00:41:33,880 --> 00:41:42,700
something what is this no idea I'm

00:41:40,150 --> 00:41:45,340
trying to contrast right now the default

00:41:42,700 --> 00:41:48,310
names of some peroxide global variables

00:41:45,340 --> 00:41:50,980
in Ruby with their human readable names

00:41:48,310 --> 00:41:52,960
defined in the English library JRuby

00:41:50,980 --> 00:41:55,240
defines the English library are aliases

00:41:52,960 --> 00:41:57,070
by default because they they value your

00:41:55,240 --> 00:41:59,680
sanity and so does the team behind

00:41:57,070 --> 00:42:02,920
through before so we are going to do it

00:41:59,680 --> 00:42:04,540
as well and we are not going to break

00:42:02,920 --> 00:42:08,040
any backward compatibility in the

00:42:04,540 --> 00:42:08,040
progress in the process Oh

00:42:08,320 --> 00:42:12,120
we'll be has global variables

00:42:12,869 --> 00:42:20,910
that sounds bad because even Java

00:42:15,660 --> 00:42:22,259
doesn't have global variables that

00:42:20,910 --> 00:42:25,650
things don't look good

00:42:22,259 --> 00:42:27,869
they really don't but it seems we have

00:42:25,650 --> 00:42:30,660
some time to talk about the future of

00:42:27,869 --> 00:42:32,700
the standard library and I hope that's a

00:42:30,660 --> 00:42:37,019
very bright future let's see what we

00:42:32,700 --> 00:42:40,109
know there the Ruby standard library is

00:42:37,019 --> 00:42:44,549
a ghetto and article by a famous ruby

00:42:40,109 --> 00:42:47,640
developer the creator of sidekick let's

00:42:44,549 --> 00:42:50,190
take a look according to Mike param the

00:42:47,640 --> 00:42:52,950
Ruby standard library is plagued by a

00:42:50,190 --> 00:42:57,329
ton of legacy code often last updated

00:42:52,950 --> 00:43:01,319
between 2000 and 2003 I wasn't the best

00:42:57,329 --> 00:43:05,670
school best mathematician but I think

00:43:01,319 --> 00:43:06,960
this is 17 14 years rather long he

00:43:05,670 --> 00:43:12,680
claims that there are some horrible

00:43:06,960 --> 00:43:12,680
api's in Ruby and he has an example

00:43:12,890 --> 00:43:18,890
there are really a ton of libraries that

00:43:15,960 --> 00:43:27,059
I don't know where in Ruby to begin with

00:43:18,890 --> 00:43:34,529
dear beer XML RSS reader why break XML

00:43:27,059 --> 00:43:36,900
leap XML I think that just relying on

00:43:34,529 --> 00:43:39,180
his opinion wouldn't be fair so I

00:43:36,900 --> 00:43:41,130
decided to ask some people who follow me

00:43:39,180 --> 00:43:42,989
on Twitter what are the parts of the

00:43:41,130 --> 00:43:45,420
standard library that they dislike and

00:43:42,989 --> 00:43:49,799
why and I got surprisingly some

00:43:45,420 --> 00:43:52,499
responses severe nuria from the rails

00:43:49,799 --> 00:43:56,700
core team doesn't like net HTTP nothing

00:43:52,499 --> 00:44:00,799
new our own Cruz the leader of the VNA

00:43:56,700 --> 00:44:04,349
Ruby hackers doesn't like net HTTP hmm I

00:44:00,799 --> 00:44:06,509
sense a pattern here Beliveau doesn't

00:44:04,349 --> 00:44:11,750
like time outer be because it's a

00:44:06,509 --> 00:44:15,150
brokenness such a British gentleman

00:44:11,750 --> 00:44:20,070
Eric Michael's over seems to dislike

00:44:15,150 --> 00:44:22,230
many things I'll just mention one so

00:44:20,070 --> 00:44:24,540
some new features get introduced to the

00:44:22,230 --> 00:44:27,510
language like keyword arguments which

00:44:24,540 --> 00:44:29,970
are really awesome but the internal ruby

00:44:27,510 --> 00:44:33,030
library is rarely updated to leverage

00:44:29,970 --> 00:44:35,580
those features and even this causes

00:44:33,030 --> 00:44:36,930
slight compatibility issue you have to

00:44:35,580 --> 00:44:38,940
have a conditional check when you're

00:44:36,930 --> 00:44:41,100
invoking some methods or you can just

00:44:38,940 --> 00:44:44,820
write a wrapper in your library I think

00:44:41,100 --> 00:44:48,750
that if ruby itself doesn't show people

00:44:44,820 --> 00:44:51,090
proper Ruby code design we are never

00:44:48,750 --> 00:44:54,690
going to learn at least a vast majority

00:44:51,090 --> 00:44:56,660
of us because for many people that the

00:44:54,690 --> 00:45:01,410
things that are in the Ruby core are

00:44:56,660 --> 00:45:05,910
like the the word of God the word of

00:45:01,410 --> 00:45:07,380
Matz it's the same thing right there are

00:45:05,910 --> 00:45:11,580
many improvements that you can mean it

00:45:07,380 --> 00:45:13,380
yeah Eric is very bitter so he complains

00:45:11,580 --> 00:45:16,620
about a lot of stuff for good reasons

00:45:13,380 --> 00:45:19,260
and more you should treat this when I

00:45:16,620 --> 00:45:21,630
share the slides but the important

00:45:19,260 --> 00:45:24,330
takeaways is that in Ruby 4 we are going

00:45:21,630 --> 00:45:26,250
to adopt the following strategy we are

00:45:24,330 --> 00:45:29,040
going to move everything that we

00:45:26,250 --> 00:45:31,710
consider important super important like

00:45:29,040 --> 00:45:33,630
set and so on to the core library I

00:45:31,710 --> 00:45:35,460
don't know how many people differentiate

00:45:33,630 --> 00:45:38,190
between the core and the standard

00:45:35,460 --> 00:45:39,810
library one is the thing that does the

00:45:38,190 --> 00:45:42,750
things you get without requiring

00:45:39,810 --> 00:45:44,880
anything the other you have to require

00:45:42,750 --> 00:45:47,460
some of them ship with Ruby's summer

00:45:44,880 --> 00:45:49,320
Jemma fight it's really a mess so we are

00:45:47,460 --> 00:45:51,480
going to clean it up we are going to

00:45:49,320 --> 00:45:54,090
remove absolutely everything that we are

00:45:51,480 --> 00:45:57,810
quite certain it's not used and this is

00:45:54,090 --> 00:45:59,760
going to be some third-party gems and we

00:45:57,810 --> 00:46:03,540
are going to modernize absolutely

00:45:59,760 --> 00:46:06,360
everything else and you know codes the

00:46:03,540 --> 00:46:10,140
one true standard library that's truly

00:46:06,360 --> 00:46:12,450
awesome and deep and profound but wait

00:46:10,140 --> 00:46:17,250
there's more

00:46:12,450 --> 00:46:19,430
or you don't want more so we are going

00:46:17,250 --> 00:46:22,230
to also announce a formal language

00:46:19,430 --> 00:46:26,570
specification and official compatibility

00:46:22,230 --> 00:46:29,550
test suite which everybody who wants to

00:46:26,570 --> 00:46:31,920
develop another Ruby is going to be able

00:46:29,550 --> 00:46:35,490
to run and we are going to relinquish

00:46:31,920 --> 00:46:38,640
the rights to call Ruby the one through

00:46:35,490 --> 00:46:42,050
runtime Ruby is just a language a

00:46:38,640 --> 00:46:48,300
runtime is just a runtime i I don't want

00:46:42,050 --> 00:46:54,150
some runtime to be favor eyes what is

00:46:48,300 --> 00:46:56,400
the word help me out yes there shouldn't

00:46:54,150 --> 00:46:59,880
be a canonical runtime there should be

00:46:56,400 --> 00:47:02,640
many Ruby runtimes that behave exactly

00:46:59,880 --> 00:47:05,580
the same we are going to have a very

00:47:02,640 --> 00:47:08,120
open collaboration with JRuby Rubinius

00:47:05,580 --> 00:47:10,980
everybody who is running who is running

00:47:08,120 --> 00:47:13,050
an alternative Ruby implementation we

00:47:10,980 --> 00:47:15,180
are going to decide on the features

00:47:13,050 --> 00:47:16,680
together and we would never accept a

00:47:15,180 --> 00:47:18,960
feature which we know is going to be

00:47:16,680 --> 00:47:20,640
problematic for other runtimes because

00:47:18,960 --> 00:47:23,910
we really care about the broader

00:47:20,640 --> 00:47:25,830
community and we are actually going to

00:47:23,910 --> 00:47:28,380
start announcing roadmaps for the

00:47:25,830 --> 00:47:31,410
development of Ruby M right now you're

00:47:28,380 --> 00:47:33,450
getting surprised random commits unless

00:47:31,410 --> 00:47:36,180
you're following the development super

00:47:33,450 --> 00:47:39,630
super closely but now we are going to

00:47:36,180 --> 00:47:41,340
try to do more do it better share with

00:47:39,630 --> 00:47:44,670
the community in advance what we plan to

00:47:41,340 --> 00:47:47,850
work on get some initial input we plan

00:47:44,670 --> 00:47:49,410
to run yearly surveys the state of the

00:47:47,850 --> 00:47:52,560
Ruby community where there will be

00:47:49,410 --> 00:47:54,030
questions like what are the top three

00:47:52,560 --> 00:47:56,040
features that you want to see in the

00:47:54,030 --> 00:47:58,100
next release of Ruby and I promise that

00:47:56,040 --> 00:48:02,870
we are going to listen to you because

00:47:58,100 --> 00:48:05,160
Ruby is not for me it's for you and I

00:48:02,870 --> 00:48:08,440
believe that it's time to wrap it up

00:48:05,160 --> 00:48:12,279
because I'm near the end of the time box

00:48:08,440 --> 00:48:14,349
I believe you probably wonder when this

00:48:12,279 --> 00:48:18,640
amazing crew before is going to be

00:48:14,349 --> 00:48:20,619
released I have a sad news with you to

00:48:18,640 --> 00:48:22,749
share with you rue before will likely

00:48:20,619 --> 00:48:26,880
never happen and this makes me feel sad

00:48:22,749 --> 00:48:29,650
maybe some of you but there is an upside

00:48:26,880 --> 00:48:33,809
rue before is probably going to happen

00:48:29,650 --> 00:48:39,369
around 2048 because such a round here

00:48:33,809 --> 00:48:41,829
deserves a new ruby release right and I

00:48:39,369 --> 00:48:45,220
also like to share my personal belief

00:48:41,829 --> 00:48:49,569
that rue before is in a way here even

00:48:45,220 --> 00:48:51,700
now I think that JRuby embodies the

00:48:49,569 --> 00:48:55,479
spirit of through before I think that

00:48:51,700 --> 00:48:59,529
opal that crazy ruby to JavaScript

00:48:55,479 --> 00:49:02,319
compiler embodies this as well yes there

00:48:59,529 --> 00:49:04,029
is a way to get rid of JavaScript to get

00:49:02,319 --> 00:49:06,819
rid of CoffeeScript and to be truly

00:49:04,029 --> 00:49:08,440
happy and and I think writing could be

00:49:06,819 --> 00:49:10,839
everywhere but many people don't know

00:49:08,440 --> 00:49:13,410
about this project I believe that Ruby

00:49:10,839 --> 00:49:16,299
motion is part of the future of Ruby a

00:49:13,410 --> 00:49:18,489
way to write native Android and iOS

00:49:16,299 --> 00:49:23,499
applications in the language that you

00:49:18,489 --> 00:49:28,359
love and enjoy at people are Reyes Reyes

00:49:23,499 --> 00:49:31,719
Reyes okay okay

00:49:28,359 --> 00:49:36,609
I believe that other languages also

00:49:31,719 --> 00:49:39,219
embody the spirit of Ruby crystal was an

00:49:36,609 --> 00:49:42,910
effort to preserve the beauty of the

00:49:39,219 --> 00:49:45,729
language adding some of the widely

00:49:42,910 --> 00:49:48,609
widely requested features and tackling

00:49:45,729 --> 00:49:51,430
the the speed issue I believe that

00:49:48,609 --> 00:49:53,410
closure is one of the most exciting and

00:49:51,430 --> 00:49:55,779
interesting languages and even if you

00:49:53,410 --> 00:49:58,269
never write any closure code in

00:49:55,779 --> 00:50:00,339
production spending some time with it is

00:49:58,269 --> 00:50:01,660
really going to broaden your horizons

00:50:00,339 --> 00:50:03,910
and make you better Ruby developers

00:50:01,660 --> 00:50:06,549
overall the same applies for other

00:50:03,910 --> 00:50:10,680
languages like elixir of course like

00:50:06,549 --> 00:50:10,680
scour if you feel masochistic

00:50:11,190 --> 00:50:18,369
and I'd like to wrap it up with a few

00:50:15,640 --> 00:50:19,479
more clothes you know a favorite writer

00:50:18,369 --> 00:50:21,880
of mine

00:50:19,479 --> 00:50:25,869
William Gibson and I've never read any

00:50:21,880 --> 00:50:28,720
of his books by the way famously said

00:50:25,869 --> 00:50:31,989
this the future is already here it just

00:50:28,720 --> 00:50:35,799
not evenly distributed so that's pretty

00:50:31,989 --> 00:50:39,430
much all from me or was it just give me

00:50:35,799 --> 00:50:43,269
a moment to remember sometimes I have

00:50:39,430 --> 00:50:46,390
one more thing to share I know that's

00:50:43,269 --> 00:50:49,059
cheesy but much yesterday said that ruby

00:50:46,390 --> 00:50:51,789
is no longer my project it's the Ruby

00:50:49,059 --> 00:50:54,430
communities project and I really want to

00:50:51,789 --> 00:50:56,769
see becoming a reality because him just

00:50:54,430 --> 00:50:59,589
saying it doesn't mean much right but

00:50:56,769 --> 00:51:02,739
you can make it through five tickets

00:50:59,589 --> 00:51:06,430
send patches block about the issues

00:51:02,739 --> 00:51:09,220
speak about the issues only together we

00:51:06,430 --> 00:51:11,769
can make Ruby the language that we want

00:51:09,220 --> 00:51:15,299
it that we want the language that we

00:51:11,769 --> 00:51:15,299
need the language that we deserve

00:51:15,749 --> 00:51:18,749
otherwise

00:51:23,300 --> 00:51:30,949
[Applause]

00:51:34,900 --> 00:51:38,909
[Music]

00:51:37,019 --> 00:51:41,099
I should really learn something about

00:51:38,909 --> 00:51:43,169
Photoshop I know I know that's that's

00:51:41,099 --> 00:51:47,069
all from me it was an honor to be here

00:51:43,169 --> 00:51:51,809
enjoy the rest of the conference ha

00:51:47,069 --> 00:51:53,170
enjoy the after-party thanks thanks a

00:51:51,809 --> 00:51:58,389
lot

00:51:53,170 --> 00:51:58,389

YouTube URL: https://www.youtube.com/watch?v=aFSuXUXRySc


