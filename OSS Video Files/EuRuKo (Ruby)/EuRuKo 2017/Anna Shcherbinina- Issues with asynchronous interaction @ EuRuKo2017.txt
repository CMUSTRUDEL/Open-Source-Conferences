Title: Anna Shcherbinina- Issues with asynchronous interaction @ EuRuKo2017
Publication date: 2017-12-21
Playlist: EuRuKo 2017
Description: 
	
Captions: 
	00:00:12,250 --> 00:00:19,689
hello my name is Anna and as I am

00:00:17,270 --> 00:00:24,290
learning Luxembourgish language

00:00:19,689 --> 00:00:27,910
education Donna today we are gonna talk

00:00:24,290 --> 00:00:30,649
about issues related to a synchronous

00:00:27,910 --> 00:00:40,820
interaction between client and server

00:00:30,649 --> 00:00:45,589
and/or between servers as for me I work

00:00:40,820 --> 00:00:50,690
in the company our tech 3d I'm a winner

00:00:45,589 --> 00:00:54,109
I'm back-end developer and I like

00:00:50,690 --> 00:00:59,359
playing with other languages because

00:00:54,109 --> 00:01:02,179
it's it can be interesting last language

00:00:59,359 --> 00:01:06,260
that I was trying to learn is c-sharp

00:01:02,179 --> 00:01:11,020
and actually there are a lot of things

00:01:06,260 --> 00:01:18,049
there that I missed in Ruby for example

00:01:11,020 --> 00:01:21,140
methods of loading or interfaces in our

00:01:18,049 --> 00:01:24,229
company attack 3d year every back-end

00:01:21,140 --> 00:01:28,180
developer is responsible for a part of

00:01:24,229 --> 00:01:33,950
our infrastructure because we don't have

00:01:28,180 --> 00:01:36,799
the boobs or ass ER e engineers it can

00:01:33,950 --> 00:01:41,259
be tricky because when you are talking

00:01:36,799 --> 00:01:45,049
about when you are responsible about

00:01:41,259 --> 00:01:49,789
server infrastructure you can just be

00:01:45,049 --> 00:01:53,840
just developer you have to have to have

00:01:49,789 --> 00:01:57,320
other skills from different area I

00:01:53,840 --> 00:01:59,090
suppose it can be two or three different

00:01:57,320 --> 00:02:03,770
it should be two or three different

00:01:59,090 --> 00:02:07,999
persons but in our reality it's it's

00:02:03,770 --> 00:02:12,310
only our back-end team so but it has

00:02:07,999 --> 00:02:12,310
great benefits because you can

00:02:14,069 --> 00:02:20,680
because you can think about a feature

00:02:17,620 --> 00:02:29,469
not just on the code level but on the

00:02:20,680 --> 00:02:33,719
infrastructure level to six years ago we

00:02:29,469 --> 00:02:37,109
started the project code view shape it's

00:02:33,719 --> 00:02:40,989
3d scanning related project which is

00:02:37,109 --> 00:02:45,879
made for for our clients to be able to

00:02:40,989 --> 00:02:51,209
abort their 3d models and so to share it

00:02:45,879 --> 00:02:54,579
to rotate it and this is Stoneman fox

00:02:51,209 --> 00:02:55,599
several years ago we hosted on heroic

00:02:54,579 --> 00:03:00,489
ooh

00:02:55,599 --> 00:03:03,129
we had one dyno for free and we were

00:03:00,489 --> 00:03:08,169
happy with our small application and not

00:03:03,129 --> 00:03:11,349
many clients but then we scanned these

00:03:08,169 --> 00:03:17,229
donut folks so Wow its creator

00:03:11,349 --> 00:03:22,479
Adelle Morse was in Russia and a lot of

00:03:17,229 --> 00:03:26,049
news agencies posted post posted news

00:03:22,479 --> 00:03:30,159
about this model because it was quite

00:03:26,049 --> 00:03:32,530
popular me back at the time and we were

00:03:30,159 --> 00:03:35,409
down we were totally down because we

00:03:32,530 --> 00:03:39,900
were not ready for this capacity we

00:03:35,409 --> 00:03:45,400
started to raise lots of dinners and and

00:03:39,900 --> 00:03:52,000
we silver down for several days after

00:03:45,400 --> 00:03:54,009
that we we received a bill in the end of

00:03:52,000 --> 00:03:55,810
the month and then then we thought okay

00:03:54,009 --> 00:04:00,669
we must do something with our

00:03:55,810 --> 00:04:06,629
infrastructure so guys I want to ask you

00:04:00,669 --> 00:04:09,780
have you ever have downtime last year oh

00:04:06,629 --> 00:04:15,120
my gosh I love you

00:04:09,780 --> 00:04:15,120
okay last month

00:04:16,579 --> 00:04:22,380
last week

00:04:19,820 --> 00:04:29,090
okay Co not me

00:04:22,380 --> 00:04:31,710
I think I didn't have a down time yeah

00:04:29,090 --> 00:04:47,900
did you say you have a downturn right

00:04:31,710 --> 00:04:53,000
now I think down times are okay because

00:04:47,900 --> 00:04:57,000
you never know what what kind of

00:04:53,000 --> 00:05:03,889
capacity will you get and sometimes we

00:04:57,000 --> 00:05:09,389
you may have your capacity may grows

00:05:03,889 --> 00:05:14,220
grow in unpredictable way so let's talk

00:05:09,389 --> 00:05:19,620
about interaction patterns and how they

00:05:14,220 --> 00:05:24,710
can help you to avoid down times let's

00:05:19,620 --> 00:05:30,210
talk about it in perspective of requests

00:05:24,710 --> 00:05:34,080
so when when a small application starts

00:05:30,210 --> 00:05:39,560
it often begins with synchronous

00:05:34,080 --> 00:05:43,169
requests and reply a little bit after it

00:05:39,560 --> 00:05:47,639
it can evolve and has some asynchronous

00:05:43,169 --> 00:05:50,599
interaction but there are a lot of

00:05:47,639 --> 00:05:53,820
patterns that are much more wide than

00:05:50,599 --> 00:05:55,650
these two terms for example a

00:05:53,820 --> 00:05:59,190
synchronous interaction with time out

00:05:55,650 --> 00:06:05,150
when your application receives when the

00:05:59,190 --> 00:06:09,770
clients and the requester server then it

00:06:05,150 --> 00:06:09,770
waits for some time it receives

00:06:10,340 --> 00:06:24,470
a response or time error or timeout

00:06:18,910 --> 00:06:28,760
arrives so but after timeout application

00:06:24,470 --> 00:06:32,270
doesn't went wait for response it can be

00:06:28,760 --> 00:06:38,510
quite useful when you when you need to

00:06:32,270 --> 00:06:41,960
do your to implement part of a part of

00:06:38,510 --> 00:06:44,990
your feature that has its time limits

00:06:41,960 --> 00:06:49,040
but for example when you're trying to

00:06:44,990 --> 00:06:54,290
order flight so to book a file you need

00:06:49,040 --> 00:06:58,630
to you need to receive information about

00:06:54,290 --> 00:07:01,789
available flights in 30 seconds because

00:06:58,630 --> 00:07:08,660
after me at 2 minutes 3 minutes

00:07:01,789 --> 00:07:12,440
it can't be not relevant anymore the

00:07:08,660 --> 00:07:16,220
next pattern is asynchronous requests

00:07:12,440 --> 00:07:21,130
reply with a notification timer it also

00:07:16,220 --> 00:07:28,220
can be useful for example your client

00:07:21,130 --> 00:07:31,910
send a request you server process some

00:07:28,220 --> 00:07:38,090
process this request and then on the

00:07:31,910 --> 00:07:45,680
client it started a timer and when and

00:07:38,090 --> 00:07:50,780
client waits until timer timer expired

00:07:45,680 --> 00:07:54,370
or until a request or reply reply arise

00:07:50,780 --> 00:07:54,370
so whatever come first

00:07:54,880 --> 00:08:07,039
another one is one request and multiple

00:08:02,410 --> 00:08:10,510
response mandatory response and optional

00:08:07,039 --> 00:08:14,180
response you

00:08:10,510 --> 00:08:20,960
your clients and the requestor server

00:08:14,180 --> 00:08:24,490
then it receives and response in Kronos

00:08:20,960 --> 00:08:27,340
and then it can receive several

00:08:24,490 --> 00:08:31,910
notifications or several requests

00:08:27,340 --> 00:08:36,409
responses in a synchronous way for

00:08:31,910 --> 00:08:41,210
example you are booking you are ordering

00:08:36,409 --> 00:08:44,540
something and sell you create an order

00:08:41,210 --> 00:08:46,550
and then several checks if it is

00:08:44,540 --> 00:08:49,880
available or you should to wait

00:08:46,550 --> 00:08:53,230
sometimes so you can your order is

00:08:49,880 --> 00:08:56,560
created but it then you can receive some

00:08:53,230 --> 00:08:56,560
valuable information

00:08:56,870 --> 00:09:03,080
another one is one requests mandatory

00:09:00,290 --> 00:09:06,950
response and optional response its

00:09:03,080 --> 00:09:11,150
cleanse the same your your client send

00:09:06,950 --> 00:09:17,990
the request and gain mandatory response

00:09:11,150 --> 00:09:24,520
and after and after it can receive other

00:09:17,990 --> 00:09:29,180
information there is another one pattern

00:09:24,520 --> 00:09:30,920
is called unsolicited notification it is

00:09:29,180 --> 00:09:35,720
when your client doesn't wait for

00:09:30,920 --> 00:09:39,459
anything and then receives updates for

00:09:35,720 --> 00:09:41,779
example everybody uses who uses

00:09:39,459 --> 00:09:44,080
application but Bank applications

00:09:41,779 --> 00:09:47,390
receive the information about oh hey

00:09:44,080 --> 00:09:50,980
credit is available for you so you can

00:09:47,390 --> 00:09:50,980
do this although that

00:09:55,589 --> 00:10:06,370
so let's go back for 20-25 years when

00:10:02,130 --> 00:10:09,670
requests was worse in erroneous a little

00:10:06,370 --> 00:10:14,680
bit uh synchronous and it often says

00:10:09,670 --> 00:10:17,170
that scaling up is failing up so and

00:10:14,680 --> 00:10:23,560
back in the time of most applications

00:10:17,170 --> 00:10:27,399
were monolithic and the only option they

00:10:23,560 --> 00:10:30,490
had is to buy biggest hardware but when

00:10:27,399 --> 00:10:34,029
you are planning to scale only with the

00:10:30,490 --> 00:10:37,660
hardware it happened that you have

00:10:34,029 --> 00:10:41,500
already buy the biggest hardware

00:10:37,660 --> 00:10:43,360
available for you and you can just scale

00:10:41,500 --> 00:10:47,019
up and then it's time to think about

00:10:43,360 --> 00:10:52,870
your infrastructure by the way exactly

00:10:47,019 --> 00:10:58,540
these hurt Bay in 1999 it was 20 years

00:10:52,870 --> 00:11:03,569
ago almost 20 but now we still see this

00:10:58,540 --> 00:11:06,639
situation in many companies so it is

00:11:03,569 --> 00:11:13,980
important not to scale up not only to

00:11:06,639 --> 00:11:16,389
scale up but to scale scale out I want

00:11:13,980 --> 00:11:21,699
your application to be ready for

00:11:16,389 --> 00:11:29,110
capacity so let's take a look or how how

00:11:21,699 --> 00:11:32,519
can we scale let's go through a little

00:11:29,110 --> 00:11:36,730
bit theoretical aspects of scaling so

00:11:32,519 --> 00:11:39,140
there is a three axis of scale it's very

00:11:36,730 --> 00:11:42,540
simple scale

00:11:39,140 --> 00:11:45,810
vertical scale and z-axis scale

00:11:42,540 --> 00:11:48,030
gorizontal scale and it is duplication

00:11:45,810 --> 00:11:53,300
when you duplicate for example front

00:11:48,030 --> 00:11:56,850
center versus behind one balancer

00:11:53,300 --> 00:12:00,500
vertical scale is quite different when

00:11:56,850 --> 00:12:04,680
you split your application but by

00:12:00,500 --> 00:12:07,190
resources or by objects and you can

00:12:04,680 --> 00:12:10,140
scale part of your application

00:12:07,190 --> 00:12:15,000
separately it can be quite convenient

00:12:10,140 --> 00:12:17,700
because when your application is it's

00:12:15,000 --> 00:12:20,040
hosted for example on one server and one

00:12:17,700 --> 00:12:22,350
server you have a database your code

00:12:20,040 --> 00:12:25,590
base your background workers your cache

00:12:22,350 --> 00:12:29,400
storage your filesystem and static

00:12:25,590 --> 00:12:32,220
storage you can guarantee that when you

00:12:29,400 --> 00:12:38,550
need to increase the file system for

00:12:32,220 --> 00:12:41,520
example for static storage it doesn't it

00:12:38,550 --> 00:12:47,820
wouldn't be used for example for a

00:12:41,520 --> 00:12:53,430
database so you can you can not reach

00:12:47,820 --> 00:12:55,560
your goal but if you're if parts of your

00:12:53,430 --> 00:12:59,130
application are separated on its

00:12:55,560 --> 00:13:03,690
different hardware you are you are able

00:12:59,130 --> 00:13:09,660
to scale it independently by the way we

00:13:03,690 --> 00:13:12,180
have hidden benefit here because you can

00:13:09,660 --> 00:13:14,330
just replace a part of your application

00:13:12,180 --> 00:13:18,600
with a different language different

00:13:14,330 --> 00:13:23,000
operations is some different different

00:13:18,600 --> 00:13:23,000
paradigm of praticing

00:13:24,630 --> 00:13:32,320
zxs scale in it's about Charlie

00:13:28,029 --> 00:13:41,580
it's about splitting your data by any

00:13:32,320 --> 00:13:44,320
case for example you have online store a

00:13:41,580 --> 00:13:48,390
platform for online sales and then you

00:13:44,320 --> 00:13:52,200
think you have a lot of small shops

00:13:48,390 --> 00:13:57,490
working with your application and then

00:13:52,200 --> 00:14:01,899
one of your application starts starts

00:13:57,490 --> 00:14:05,399
sale much more than others and and I

00:14:01,899 --> 00:14:08,649
think it is convenient to to split

00:14:05,399 --> 00:14:12,640
hardware that required for this one

00:14:08,649 --> 00:14:19,660
online store and allow it to use its own

00:14:12,640 --> 00:14:29,080
resources but what prevents us from

00:14:19,660 --> 00:14:33,850
scaling I think you can scale on y axis

00:14:29,080 --> 00:14:35,950
and x axis when you're when parts of

00:14:33,850 --> 00:14:40,240
your application are at the same

00:14:35,950 --> 00:14:43,270
hardware for example you can just set up

00:14:40,240 --> 00:14:45,279
the second second instance of front

00:14:43,270 --> 00:14:48,459
server behind one the answer

00:14:45,279 --> 00:14:49,470
while your database is on the same

00:14:48,459 --> 00:14:53,440
server

00:14:49,470 --> 00:14:57,520
so for splited for splitting efficiently

00:14:53,440 --> 00:14:59,650
you should put away your database on its

00:14:57,520 --> 00:15:05,860
own hardware and then you will be able

00:14:59,650 --> 00:15:08,800
to to scale horizontally also it is not

00:15:05,860 --> 00:15:13,480
only about database it is about cache

00:15:08,800 --> 00:15:19,020
storage background workers file system

00:15:13,480 --> 00:15:22,020
static content and so on so the key is

00:15:19,020 --> 00:15:22,020
separation

00:15:24,600 --> 00:15:32,600
and there is another one point you can

00:15:27,389 --> 00:15:36,810
just your application should be ready to

00:15:32,600 --> 00:15:40,350
to be your instance of your application

00:15:36,810 --> 00:15:43,940
should be ready to scale down so you

00:15:40,350 --> 00:15:46,529
don't have to have a big state between

00:15:43,940 --> 00:15:49,670
between requests stayed between

00:15:46,529 --> 00:15:52,589
background workers stand between

00:15:49,670 --> 00:15:54,510
requests and background workers for

00:15:52,589 --> 00:15:57,570
example if you are applauded in a big

00:15:54,510 --> 00:16:00,769
file and then you protest it with the

00:15:57,570 --> 00:16:04,760
ground worker you should think of it and

00:16:00,769 --> 00:16:09,480
consider to store your temporary

00:16:04,760 --> 00:16:14,130
temporary content somewhere away of away

00:16:09,480 --> 00:16:17,160
from instance where it is placed and

00:16:14,130 --> 00:16:19,709
also I want I want your application to

00:16:17,160 --> 00:16:23,010
be ready for failure because failure is

00:16:19,709 --> 00:16:27,990
an avoid but unavoidable part of our

00:16:23,010 --> 00:16:33,810
life we are all developers and everybody

00:16:27,990 --> 00:16:39,209
has bugs in their code but but there is

00:16:33,810 --> 00:16:45,410
things that are not that are not made by

00:16:39,209 --> 00:16:49,529
us for example server data center can be

00:16:45,410 --> 00:16:52,170
distracted somehow you can can have a

00:16:49,529 --> 00:16:55,560
connection between can have problems

00:16:52,170 --> 00:16:59,430
with connection between servers it's not

00:16:55,560 --> 00:17:06,990
about it is not always about developers

00:16:59,430 --> 00:17:10,140
fault but but its developer it is

00:17:06,990 --> 00:17:14,390
developers who can do it veteran and can

00:17:10,140 --> 00:17:14,390
prepare your application to be ready

00:17:15,799 --> 00:17:22,640
there are several steps for let's start

00:17:19,740 --> 00:17:28,940
from monitoring you should use

00:17:22,640 --> 00:17:32,159
monitoring for your ap calls for your

00:17:28,940 --> 00:17:39,090
hardware state for example CPU a memory

00:17:32,159 --> 00:17:43,470
usage you should use monitoring to to

00:17:39,090 --> 00:17:48,020
see the backup status monitoring can

00:17:43,470 --> 00:17:48,020
show you bottlenecks on your application

00:17:48,950 --> 00:17:55,679
let's let's assume that your you can't

00:17:53,600 --> 00:17:58,710
experience troubles with your

00:17:55,679 --> 00:18:02,669
application he asks support team for

00:17:58,710 --> 00:18:04,950
help support him motels business owners

00:18:02,669 --> 00:18:08,159
about the trouble business owners cause

00:18:04,950 --> 00:18:11,880
he a boss and you are drinking third

00:18:08,159 --> 00:18:15,390
beer on the after party I think it's it

00:18:11,880 --> 00:18:23,130
is not cool and monitoring tools can

00:18:15,390 --> 00:18:28,169
help you to avoid this case you should

00:18:23,130 --> 00:18:30,299
use monitoring for for everything so if

00:18:28,169 --> 00:18:34,679
there is something you can count on your

00:18:30,299 --> 00:18:40,890
application it is good habit to to me to

00:18:34,679 --> 00:18:43,559
be able to visualize it somewhere there

00:18:40,890 --> 00:18:46,370
is another good practice is log log

00:18:43,559 --> 00:18:50,669
aggregation when we are talking about

00:18:46,370 --> 00:18:54,059
horizontal scaling for example you need

00:18:50,669 --> 00:18:55,049
to be able to see your logs your current

00:18:54,059 --> 00:18:58,409
state of logs

00:18:55,049 --> 00:19:00,750
somewhere and when I say somewhere it is

00:18:58,409 --> 00:19:03,299
somewhere away from your application

00:19:00,750 --> 00:19:07,350
because when you have for example three

00:19:03,299 --> 00:19:10,919
or four instances of front workers you

00:19:07,350 --> 00:19:14,470
see you just cannot predict which server

00:19:10,919 --> 00:19:20,740
will proceed the request from client

00:19:14,470 --> 00:19:24,010
a log aggregation helps you to helps you

00:19:20,740 --> 00:19:26,230
with troubleshooting guys who has log

00:19:24,010 --> 00:19:33,750
regression who doesn't store walk on

00:19:26,230 --> 00:19:36,870
your server oh really okay

00:19:33,750 --> 00:19:39,460
there is another good practice called

00:19:36,870 --> 00:19:43,270
distributed tracing it is helpful when

00:19:39,460 --> 00:19:48,400
we are talking about micro services and

00:19:43,270 --> 00:19:52,630
then when your your request from your

00:19:48,400 --> 00:19:57,490
client can can affect several parts of

00:19:52,630 --> 00:19:59,650
your application to be able to read your

00:19:57,490 --> 00:20:02,860
logs to be able to understand what's

00:19:59,650 --> 00:20:06,580
going on within this particular request

00:20:02,860 --> 00:20:09,520
you you can assigned some kind of

00:20:06,580 --> 00:20:18,400
identification number to your request

00:20:09,520 --> 00:20:22,830
and take it with with every part is is

00:20:18,400 --> 00:20:26,409
inside of the process of the request so

00:20:22,830 --> 00:20:30,460
when you are when you will walk in your

00:20:26,409 --> 00:20:33,250
logs you will see hey this request was

00:20:30,460 --> 00:20:37,559
proceeded by front server then it

00:20:33,250 --> 00:20:41,200
creates a background job and then it was

00:20:37,559 --> 00:20:44,080
proceeded by another back back-end

00:20:41,200 --> 00:20:46,380
server and then response goes back to

00:20:44,080 --> 00:20:46,380
the client

00:20:48,950 --> 00:20:58,350
there is another good habit is exception

00:20:53,039 --> 00:21:03,419
tracking it can be it can be okay when

00:20:58,350 --> 00:21:06,830
you doesn't use cool tools for exception

00:21:03,419 --> 00:21:10,259
tracking when it can be okay if you use

00:21:06,830 --> 00:21:15,289
email notification for example for your

00:21:10,259 --> 00:21:20,309
email tracking who uses Game Jam

00:21:15,289 --> 00:21:23,850
exception notification okay so guys it

00:21:20,309 --> 00:21:30,929
is okay but it is okay only unless you

00:21:23,850 --> 00:21:35,039
have a lot of a lot of users per day per

00:21:30,929 --> 00:21:39,240
paper period because if you failed if

00:21:35,039 --> 00:21:44,600
there is a bag bug in your code you you

00:21:39,240 --> 00:21:47,490
just be flooded by your emails and

00:21:44,600 --> 00:21:51,179
exception can be general so it can

00:21:47,490 --> 00:21:53,580
affect every person I think the same is

00:21:51,179 --> 00:21:57,990
relevant for slack notification or

00:21:53,580 --> 00:22:00,570
something so there is good tools there

00:21:57,990 --> 00:22:02,700
are good tools that helps you to

00:22:00,570 --> 00:22:05,309
aggregate information about your

00:22:02,700 --> 00:22:09,720
exception for example you can go there

00:22:05,309 --> 00:22:14,159
and see okay this exception effects 1000

00:22:09,720 --> 00:22:17,940
your users and you see and it happens

00:22:14,159 --> 00:22:19,440
every 10 seconds and it is really want

00:22:17,940 --> 00:22:21,590
and useful information for

00:22:19,440 --> 00:22:21,590
troubleshooting

00:22:24,950 --> 00:22:33,230
I want I want you to be able not just

00:22:29,900 --> 00:22:34,880
only to solve your problems solve

00:22:33,230 --> 00:22:38,120
problems with a code with your

00:22:34,880 --> 00:22:43,730
infrastructure but to learn from every

00:22:38,120 --> 00:22:46,370
year favor discuss problems and

00:22:43,730 --> 00:22:48,860
solutions with your teammates with your

00:22:46,370 --> 00:22:54,140
team leader with your junior developers

00:22:48,860 --> 00:22:59,410
because it is always about sharing

00:22:54,140 --> 00:23:03,170
information if you just fix your problem

00:22:59,410 --> 00:23:07,310
it can affect your your application next

00:23:03,170 --> 00:23:10,940
time and you are not be there so another

00:23:07,310 --> 00:23:14,900
guy can spend much more time just to dig

00:23:10,940 --> 00:23:20,050
to the problem and of course it is

00:23:14,900 --> 00:23:24,890
useful to inter share share knowledge

00:23:20,050 --> 00:23:28,780
inside your comment who has kind of

00:23:24,890 --> 00:23:32,450
meetups in your company where you can

00:23:28,780 --> 00:23:36,760
have a talk and share something you you

00:23:32,450 --> 00:23:39,760
have discovered or created recently Oh

00:23:36,760 --> 00:23:39,760
excellent

00:23:40,610 --> 00:23:50,240
and a little bit about QA who has QA

00:23:45,789 --> 00:23:54,740
somewhere who has QA team or QA guy or

00:23:50,240 --> 00:24:00,669
you adjust back end and QA in one in in

00:23:54,740 --> 00:24:00,669
one person who has QA in your process so

00:24:00,789 --> 00:24:07,700
I wanted to tell you that QA doesn't

00:24:04,039 --> 00:24:12,169
increase quality of your application QA

00:24:07,700 --> 00:24:14,330
only decrease risks it is you developers

00:24:12,169 --> 00:24:18,110
who can increase the quality of your

00:24:14,330 --> 00:24:22,690
application not QA team QA team is

00:24:18,110 --> 00:24:31,250
creating helps you to minimize risks and

00:24:22,690 --> 00:24:38,960
help helps to helps to track repetitive

00:24:31,250 --> 00:24:41,990
problems what about backups guys who

00:24:38,960 --> 00:24:46,429
checked your pick up soon for last month

00:24:41,990 --> 00:24:50,450
for example oh really what about the

00:24:46,429 --> 00:24:53,179
others guys are you sure that your

00:24:50,450 --> 00:24:56,210
backup is that your that database or

00:24:53,179 --> 00:24:58,669
static or something else is backup are

00:24:56,210 --> 00:25:03,039
you really sure I've seen several times

00:24:58,669 --> 00:25:06,710
that instead of backup there was a

00:25:03,039 --> 00:25:10,399
ticket and in ticket tracker that says

00:25:06,710 --> 00:25:17,139
oh yeah we need to set up backups so go

00:25:10,399 --> 00:25:20,139
and check your backups about deployment

00:25:17,139 --> 00:25:20,139
little

00:25:20,300 --> 00:25:31,100
I think everybody must set up the porn

00:25:26,330 --> 00:25:35,720
process to be ready to roll back to be

00:25:31,100 --> 00:25:38,330
ready to roll back in every moment it is

00:25:35,720 --> 00:25:40,910
better when it is set up automatically

00:25:38,330 --> 00:25:44,390
so for example you have some metrics

00:25:40,910 --> 00:25:46,940
from your application that says oh yeah

00:25:44,390 --> 00:25:50,720
something went wrong after multiple so

00:25:46,940 --> 00:25:53,570
let's roll back a use Parcher deploy

00:25:50,720 --> 00:25:58,360
when you deploy your code on only on

00:25:53,570 --> 00:26:03,170
several presence of your hardware or of

00:25:58,360 --> 00:26:05,800
your users and then you can see that you

00:26:03,170 --> 00:26:10,000
can see there's something that you

00:26:05,800 --> 00:26:12,920
didn't see on a QA stage or on

00:26:10,000 --> 00:26:16,040
development stage for example there can

00:26:12,920 --> 00:26:23,270
be requests so that performs much more

00:26:16,040 --> 00:26:25,340
time than then in on your well then when

00:26:23,270 --> 00:26:29,810
you practice on your development

00:26:25,340 --> 00:26:32,150
database so it's your code can behavior

00:26:29,810 --> 00:26:37,480
differently on production so be ready

00:26:32,150 --> 00:26:42,020
for it mmm about our scaling let's go

00:26:37,480 --> 00:26:43,850
through steps that necessary when you

00:26:42,020 --> 00:26:46,880
are set when you are setting up your

00:26:43,850 --> 00:26:49,660
outer scaling process first of all of

00:26:46,880 --> 00:26:53,080
the scaling helps you to save money and

00:26:49,660 --> 00:26:56,080
give you confidence in your production

00:26:53,080 --> 00:26:56,080
stability

00:26:59,059 --> 00:27:05,999
monitoring again monitoring is the key

00:27:03,119 --> 00:27:09,269
feature of autoscale it is unavoidable

00:27:05,999 --> 00:27:13,049
part because without monitoring you can

00:27:09,269 --> 00:27:17,549
just know what what is the right time to

00:27:13,049 --> 00:27:22,049
scale up or to scale down so the first

00:27:17,549 --> 00:27:25,769
thing you should do is monitoring also

00:27:22,049 --> 00:27:31,259
it is it is useful to have dashboards

00:27:25,769 --> 00:27:34,739
when you wait when you can see is

00:27:31,259 --> 00:27:38,609
something that you can see in in your

00:27:34,739 --> 00:27:40,710
monitoring that birds are always the

00:27:38,609 --> 00:27:42,869
next step

00:27:40,710 --> 00:27:46,679
by the way dashboards can be useful

00:27:42,869 --> 00:27:48,869
while you are setting up your your auto

00:27:46,679 --> 00:27:52,589
scale in you when you configure your

00:27:48,869 --> 00:27:55,710
metrics when you are trying to find when

00:27:52,589 --> 00:28:00,889
is the best time to scale up or to scale

00:27:55,710 --> 00:28:00,889
down so it's

00:28:11,340 --> 00:28:21,390
and do not forget to scale down because

00:28:17,380 --> 00:28:24,640
it helps you to avoid money wars and

00:28:21,390 --> 00:28:28,720
should empty resources when you don't

00:28:24,640 --> 00:28:29,410
need it anymore what about single points

00:28:28,720 --> 00:28:33,250
of favor

00:28:29,410 --> 00:28:38,020
I think we should minimize single points

00:28:33,250 --> 00:28:40,570
of failure but it is it is not always

00:28:38,020 --> 00:28:44,850
easy for example that a base can be

00:28:40,570 --> 00:28:48,070
single points of failure because

00:28:44,850 --> 00:28:54,160
replication master master is hard to set

00:28:48,070 --> 00:28:57,460
up and had to to proceed to do with to

00:28:54,160 --> 00:29:00,850
deal with the conflicts but there are

00:28:57,460 --> 00:29:06,640
good practices as a master slave with a

00:29:00,850 --> 00:29:09,610
hot switching also load balancer often

00:29:06,640 --> 00:29:13,000
kind of single points of failure

00:29:09,610 --> 00:29:14,530
I think single points of failure when we

00:29:13,000 --> 00:29:16,420
are talking about single points of

00:29:14,530 --> 00:29:22,690
failure we should minimize business

00:29:16,420 --> 00:29:26,260
logic and on the on the part that is

00:29:22,690 --> 00:29:28,930
responsible for it for example when we

00:29:26,260 --> 00:29:31,240
are talking about odd bonds a lot

00:29:28,930 --> 00:29:35,260
balances should do only balancing

00:29:31,240 --> 00:29:43,120
nothing else so it must be as easy as as

00:29:35,260 --> 00:29:48,760
it possible to minimize effects of bags

00:29:43,120 --> 00:29:53,880
of code of of everything I want your

00:29:48,760 --> 00:29:53,880
application to evolve in a chiral way

00:29:55,530 --> 00:30:01,510
for example to set up you can your your

00:29:59,920 --> 00:30:05,200
other skin in process

00:30:01,510 --> 00:30:07,270
you can't just avoid monitoring because

00:30:05,200 --> 00:30:12,280
you didn't know where to scale up or

00:30:07,270 --> 00:30:17,920
weight were to scale down you can't you

00:30:12,280 --> 00:30:25,000
can't avoid dashboards with information

00:30:17,920 --> 00:30:27,610
about your servers because because it's

00:30:25,000 --> 00:30:29,890
only a place where you can see if you

00:30:27,610 --> 00:30:41,020
set up your at auto scaling process

00:30:29,890 --> 00:30:44,560
properly when you are moving towards

00:30:41,020 --> 00:30:48,090
auto scaling step by step it is really

00:30:44,560 --> 00:30:53,560
easy and I think it's it can be much

00:30:48,090 --> 00:30:57,370
cheaper than use use hardware that that

00:30:53,560 --> 00:31:00,790
that can scale you can be the cool guy

00:30:57,370 --> 00:31:04,330
who prepare your company for capacity

00:31:00,790 --> 00:31:10,950
and the same cool guy who saves a lot of

00:31:04,330 --> 00:31:16,570
money let's get back to requests I think

00:31:10,950 --> 00:31:17,410
we have worked through interaction part

00:31:16,570 --> 00:31:21,210
patterns

00:31:17,410 --> 00:31:24,040
it was synchronous asynchronous lots of

00:31:21,210 --> 00:31:29,820
subclasses of us asynchronous requests

00:31:24,040 --> 00:31:36,240
but I think we forget about one one more

00:31:29,820 --> 00:31:38,950
it is one way messages what does it mean

00:31:36,240 --> 00:31:41,320
it is it means that your application

00:31:38,950 --> 00:31:45,520
must do

00:31:41,320 --> 00:31:50,200
its main goal even without internet for

00:31:45,520 --> 00:31:53,410
example your Twitter your you must

00:31:50,200 --> 00:31:57,520
create tweets you must create lights you

00:31:53,410 --> 00:32:00,070
must create shares that's okay if there

00:31:57,520 --> 00:32:03,280
is no internet connection on your web

00:32:00,070 --> 00:32:05,770
page right now you just can send your

00:32:03,280 --> 00:32:07,780
requests later I think it's really cool

00:32:05,770 --> 00:32:09,940
when your application doesn't scream at

00:32:07,780 --> 00:32:12,760
you zero oh yeah no internet connection

00:32:09,940 --> 00:32:15,760
what should we do and then just sit

00:32:12,760 --> 00:32:19,230
quietly and wait while wait for Internet

00:32:15,760 --> 00:32:27,790
connection to be to be back again

00:32:19,230 --> 00:32:31,450
so I hope all our application in in some

00:32:27,790 --> 00:32:34,330
time will become much more stable and

00:32:31,450 --> 00:32:38,740
much more user friendly in perspective

00:32:34,330 --> 00:32:46,060
of stability I want to be sure to be

00:32:38,740 --> 00:32:50,080
competent lean learn every lesson have a

00:32:46,060 --> 00:32:55,420
take out from every every failure that

00:32:50,080 --> 00:32:57,460
you had in your past read a lot of books

00:32:55,420 --> 00:33:02,950
talk to each other talk to the

00:32:57,460 --> 00:33:06,130
conference criticize idea argue idea and

00:33:02,950 --> 00:33:10,680
think about solutions it helps you to be

00:33:06,130 --> 00:33:10,680
happy so thank you

00:33:13,380 --> 00:33:15,440

YouTube URL: https://www.youtube.com/watch?v=m3QwxkfhhYg


