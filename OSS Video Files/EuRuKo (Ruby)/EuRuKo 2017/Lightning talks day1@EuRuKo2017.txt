Title: Lightning talks day1@EuRuKo2017
Publication date: 2018-01-04
Playlist: EuRuKo 2017
Description: 
	
Captions: 
	00:00:08,830 --> 00:00:16,520
my name is Manuel Morales and I am

00:00:12,290 --> 00:00:20,270
addicted to health checks there is like

00:00:16,520 --> 00:00:24,140
a lame addiction to have but it's kind

00:00:20,270 --> 00:00:26,450
of happened so when you have a system

00:00:24,140 --> 00:00:29,329
that grows in complexity doesn't matter

00:00:26,450 --> 00:00:31,910
if it's a monolith of microcell business

00:00:29,329 --> 00:00:33,680
architecture eventually you end up with

00:00:31,910 --> 00:00:36,440
many many things that can go wrong

00:00:33,680 --> 00:00:38,710
are those micro-services life and

00:00:36,440 --> 00:00:42,550
capable of talking to each other is

00:00:38,710 --> 00:00:48,500
MongoDB taking very very long to respond

00:00:42,550 --> 00:00:50,179
did your AWS Keys expire randomly did

00:00:48,500 --> 00:00:51,890
you forget to write that the right

00:00:50,179 --> 00:00:54,350
password in that configuration yeah no

00:00:51,890 --> 00:00:57,140
file or you forgot the random

00:00:54,350 --> 00:00:59,089
aggressions or the most ironic of them

00:00:57,140 --> 00:01:05,089
did you forget to configure your error

00:00:59,089 --> 00:01:08,260
notification properly for that reason we

00:01:05,089 --> 00:01:11,000
started resorting to health checks and

00:01:08,260 --> 00:01:13,160
health check is a very simple thing we

00:01:11,000 --> 00:01:16,190
implemented it's a single endpoint in

00:01:13,160 --> 00:01:18,740
which that endpoint will make all those

00:01:16,190 --> 00:01:21,260
checks and return 200 is everything

00:01:18,740 --> 00:01:24,350
going well and a 500 if one of those

00:01:21,260 --> 00:01:26,300
went wrong and hopefully it also gives

00:01:24,350 --> 00:01:30,610
you some information of what went wrong

00:01:26,300 --> 00:01:34,670
and when you have all of these things

00:01:30,610 --> 00:01:37,250
causing you stress having one single

00:01:34,670 --> 00:01:41,060
endpoint that you can query to see if

00:01:37,250 --> 00:01:46,200
they are well or not it's a nice warm

00:01:41,060 --> 00:01:49,439
feeling that you get addicted to

00:01:46,200 --> 00:01:51,899
when do we use them well we use them in

00:01:49,439 --> 00:01:53,909
several scenarios we use thing every

00:01:51,899 --> 00:01:55,619
time we deploy a new version of a micro

00:01:53,909 --> 00:01:57,329
service because you can't forget the

00:01:55,619 --> 00:02:01,049
migration so you forgot to update the

00:01:57,329 --> 00:02:02,609
config file or you we also when you

00:02:01,049 --> 00:02:04,619
configure that service for the first

00:02:02,609 --> 00:02:06,119
time not only on when you deploy it but

00:02:04,619 --> 00:02:08,129
also when you are configuring your local

00:02:06,119 --> 00:02:09,509
machine you put one of those services

00:02:08,129 --> 00:02:11,549
for the first time first thing you do

00:02:09,509 --> 00:02:14,790
you go to the health check you can test

00:02:11,549 --> 00:02:16,230
that everything is ok our monitoring

00:02:14,790 --> 00:02:18,329
tools are polling the health just

00:02:16,230 --> 00:02:21,599
constantly to make sure that everything

00:02:18,329 --> 00:02:25,319
is ok and we also they're also useful in

00:02:21,599 --> 00:02:27,209
troubleshooting something goes wrong the

00:02:25,319 --> 00:02:28,620
monitoring tools show that everything's

00:02:27,209 --> 00:02:30,660
in fire

00:02:28,620 --> 00:02:32,340
you just go to one of the health checks

00:02:30,660 --> 00:02:34,650
and they will start pointing to each

00:02:32,340 --> 00:02:39,780
other until you find the original

00:02:34,650 --> 00:02:41,160
culprit because we were implementing

00:02:39,780 --> 00:02:42,810
this thing over and over again in

00:02:41,160 --> 00:02:45,060
different micro services of course we

00:02:42,810 --> 00:02:48,090
built a library for that it's open

00:02:45,060 --> 00:02:52,560
source is in front of a gym it's called

00:02:48,090 --> 00:02:57,690
mini check very easy to implement you

00:02:52,560 --> 00:02:59,760
just build a new health check and you

00:02:57,690 --> 00:03:01,470
say it's a rock application which you

00:02:59,760 --> 00:03:04,380
can say which in point do you want to

00:03:01,470 --> 00:03:05,880
post it and you start registering the

00:03:04,380 --> 00:03:08,970
different checks that you want to check

00:03:05,880 --> 00:03:13,109
the database connection the Redis client

00:03:08,970 --> 00:03:18,600
all of those and you mounted one more

00:03:13,109 --> 00:03:21,300
Rock middleware rails Rock anything

00:03:18,600 --> 00:03:24,690
funny story be careful of what are you

00:03:21,300 --> 00:03:26,880
testing here is not a good idea in order

00:03:24,690 --> 00:03:27,410
to check if micro-services come talk to

00:03:26,880 --> 00:03:31,140
each other

00:03:27,410 --> 00:03:33,930
that micro-services all each other's

00:03:31,140 --> 00:03:36,690
health check because if one of the

00:03:33,930 --> 00:03:38,460
services is calling the other service

00:03:36,690 --> 00:03:41,340
health check and for any reason that

00:03:38,460 --> 00:03:43,260
service depends on the original one but

00:03:41,340 --> 00:03:45,270
the same by the way they will start

00:03:43,260 --> 00:03:48,120
making requests to each other in an

00:03:45,270 --> 00:03:53,300
endless loop that will break down both

00:03:48,120 --> 00:03:53,300
services a friend told me

00:03:53,900 --> 00:03:59,840
when you query the endpoint that you

00:03:56,760 --> 00:04:03,120
configure before you get the the two

00:03:59,840 --> 00:04:07,250
checks and how long they took to run and

00:04:03,120 --> 00:04:10,500
if they are healthy if they fail you get

00:04:07,250 --> 00:04:12,750
the arrow the exception and the stack

00:04:10,500 --> 00:04:15,180
trace notice how this is information

00:04:12,750 --> 00:04:17,459
disclosure careful with these if you're

00:04:15,180 --> 00:04:18,859
running this in production hide these

00:04:17,459 --> 00:04:21,570
endpoints behind

00:04:18,859 --> 00:04:24,720
Apache or something you don't want

00:04:21,570 --> 00:04:27,750
hackers to know to get this kind of

00:04:24,720 --> 00:04:30,810
information from your services we not

00:04:27,750 --> 00:04:32,090
also do ruby we also do Alex here for

00:04:30,810 --> 00:04:34,800
that reason

00:04:32,090 --> 00:04:36,979
manual Alejandro who is here and

00:04:34,800 --> 00:04:40,650
Roberto's pijo who couldn't come today

00:04:36,979 --> 00:04:44,669
they built the elixir equivalent one and

00:04:40,650 --> 00:04:49,680
there is a example project which name

00:04:44,669 --> 00:04:52,260
you will never know it's called Gondor I

00:04:49,680 --> 00:04:55,250
can tell I can tell you they're better

00:04:52,260 --> 00:04:59,130
than I am giving names to libraries and

00:04:55,250 --> 00:05:00,660
of course every other technical company

00:04:59,130 --> 00:05:04,169
that is in this room we are of course

00:05:00,660 --> 00:05:06,690
hiding we have offices in London and we

00:05:04,169 --> 00:05:10,070
are about to open offices in Barcelona

00:05:06,690 --> 00:05:19,490
next month thank you very much

00:05:10,070 --> 00:05:19,490
[Applause]

00:05:39,650 --> 00:05:44,270
hello so I'm here to talk to you about

00:05:41,870 --> 00:05:47,900
warm blanket which is a jam to get rid

00:05:44,270 --> 00:05:50,210
of goodbye to get rid of crappy after

00:05:47,900 --> 00:05:52,760
good performance so what do I mean about

00:05:50,210 --> 00:05:56,090
crappy after good performance so the

00:05:52,760 --> 00:05:58,370
problem is its usual for our web

00:05:56,090 --> 00:06:01,070
services to syrup and have in

00:05:58,370 --> 00:06:04,430
predictable latency on the first request

00:06:01,070 --> 00:06:07,010
so that happens because you might have

00:06:04,430 --> 00:06:09,110
lazy code loading so the first request

00:06:07,010 --> 00:06:10,700
hits some code paths and you have auto

00:06:09,110 --> 00:06:13,000
load and you are going to start loading

00:06:10,700 --> 00:06:15,860
jams and classes and code and

00:06:13,000 --> 00:06:18,590
initializing Singleton's and all that so

00:06:15,860 --> 00:06:20,960
that's going to take some time maybe you

00:06:18,590 --> 00:06:22,760
have lazy database connection so the

00:06:20,960 --> 00:06:24,260
first request is the one that pays all

00:06:22,760 --> 00:06:26,750
the round trips to start all the

00:06:24,260 --> 00:06:29,330
database connections all the logging bla

00:06:26,750 --> 00:06:32,360
bla bla or maybe you're using a

00:06:29,330 --> 00:06:35,840
just-in-time compilation version of Ruby

00:06:32,360 --> 00:06:38,210
which is you're using mg toward JRuby or

00:06:35,840 --> 00:06:42,050
TOEFL Ruby and you know that the first

00:06:38,210 --> 00:06:44,300
few requests or first tens or hundreds

00:06:42,050 --> 00:06:47,140
of requests will pay a lot in latency

00:06:44,300 --> 00:06:50,120
and you'll have a problem there because

00:06:47,140 --> 00:06:51,890
that means that when you restart your

00:06:50,120 --> 00:06:54,920
service when you deploy your service

00:06:51,890 --> 00:06:56,990
your users will be like this and they

00:06:54,920 --> 00:06:59,990
will not be very happy because your app

00:06:56,990 --> 00:07:02,060
will be randomly slowed at random times

00:06:59,990 --> 00:07:05,080
and if you have multiple servers then it

00:07:02,060 --> 00:07:09,800
means that someone's going to get lucky

00:07:05,080 --> 00:07:12,560
all the time basically so we had this

00:07:09,800 --> 00:07:15,200
problem a talk desk and the solution is

00:07:12,560 --> 00:07:17,870
the warm blanket gem which basically

00:07:15,200 --> 00:07:20,240
takes care of it so the idea is that

00:07:17,870 --> 00:07:22,850
warm blanket warms up your web service

00:07:20,240 --> 00:07:25,520
and by looping over a configurable

00:07:22,850 --> 00:07:28,610
number of HTTP requests OU's you

00:07:25,520 --> 00:07:30,950
configure some HTTP requests that you

00:07:28,610 --> 00:07:33,380
believe are representative of the usual

00:07:30,950 --> 00:07:35,720
workload of your application and when

00:07:33,380 --> 00:07:37,520
your application starts warm blanket

00:07:35,720 --> 00:07:39,410
connects to a web server to the web

00:07:37,520 --> 00:07:42,020
service and starts doing those requests

00:07:39,410 --> 00:07:44,090
in a loop so that all of your outer

00:07:42,020 --> 00:07:47,780
loads databases

00:07:44,090 --> 00:07:49,300
 start warming up and the idea is

00:07:47,780 --> 00:07:52,400
that you if you're using

00:07:49,300 --> 00:07:55,130
Oroku you can use pre-boot which gives

00:07:52,400 --> 00:07:58,760
you three to three minutes until your

00:07:55,130 --> 00:08:00,470
Dino is put into production so on the on

00:07:58,760 --> 00:08:03,139
those three minutes you can warm up your

00:08:00,470 --> 00:08:05,660
application if you are kubernetes you

00:08:03,139 --> 00:08:08,720
can do something similar you can tell

00:08:05,660 --> 00:08:10,550
kubernetes wait for a bit while my

00:08:08,720 --> 00:08:12,620
application is doing something and that

00:08:10,550 --> 00:08:15,580
something is priming up the G it's

00:08:12,620 --> 00:08:18,410
starting up everything so your

00:08:15,580 --> 00:08:20,990
performance is always awesome so that

00:08:18,410 --> 00:08:22,700
means that with warmed blanket you get

00:08:20,990 --> 00:08:25,010
consistent highs performance from the

00:08:22,700 --> 00:08:28,729
first request at least as users see it

00:08:25,010 --> 00:08:31,729
so I'm if when I blog about Ruby and J

00:08:28,729 --> 00:08:34,230
Ruby and stuff so that is my blog and

00:08:31,729 --> 00:08:35,210
find me on Twitter thank you

00:08:34,230 --> 00:08:38,379
[Applause]

00:08:35,210 --> 00:08:38,379
[Music]

00:08:54,900 --> 00:09:04,920
hi I'm John Ellis from Berlin and I

00:09:01,670 --> 00:09:08,670
can't change it thank you so in my free

00:09:04,920 --> 00:09:17,220
time I like to explore Ruby for crazy

00:09:08,670 --> 00:09:21,930
stuff and then that's right okay alright

00:09:17,220 --> 00:09:25,950
so and then I write about this stuff on

00:09:21,930 --> 00:09:28,680
my Ruby blog check it out the other day

00:09:25,950 --> 00:09:32,490
I was documenting the Ruby standard

00:09:28,680 --> 00:09:38,880
library and I noticed that it will be

00:09:32,490 --> 00:09:41,580
gamified which is a great thing I say so

00:09:38,880 --> 00:09:44,940
every standard library will become a gem

00:09:41,580 --> 00:09:47,580
that's the goal and it should be

00:09:44,940 --> 00:09:52,110
completed in one of the next Ruby

00:09:47,580 --> 00:09:54,480
versions and it's done by I hope I have

00:09:52,110 --> 00:09:56,880
the order correct by here uh she she bad

00:09:54,480 --> 00:10:04,110
who is actually at you Roku I've heard

00:09:56,880 --> 00:10:07,230
and there's a difference between what a

00:10:04,110 --> 00:10:10,230
standard library becomes so there are

00:10:07,230 --> 00:10:14,459
two kinds of standard gems Verity for

00:10:10,230 --> 00:10:17,850
gems and pandal gems and two for gems

00:10:14,459 --> 00:10:21,870
it's like a current standard library so

00:10:17,850 --> 00:10:24,360
you can require it without loading

00:10:21,870 --> 00:10:27,000
anything you can just require it because

00:10:24,360 --> 00:10:30,420
it's part of your Ruby source it also

00:10:27,000 --> 00:10:33,650
cannot be removed and it's maintained by

00:10:30,420 --> 00:10:36,930
the Ruby core examples are open SSL

00:10:33,650 --> 00:10:40,740
Jason are dark and also starting with

00:10:36,930 --> 00:10:44,399
Ruby 2.5 bundler will be part of the

00:10:40,740 --> 00:10:48,160
standard library as addy fortune

00:10:44,399 --> 00:10:52,810
the other thing our banjo gems they are

00:10:48,160 --> 00:10:54,639
pretty similar to normal gems but you

00:10:52,810 --> 00:10:57,490
don't need to install them because they

00:10:54,639 --> 00:10:59,200
are already installed and you also don't

00:10:57,490 --> 00:11:03,839
need a network connection when you fire

00:10:59,200 --> 00:11:03,839
Ruby because they come with Ruby and

00:11:04,079 --> 00:11:10,990
they are maintained externally not in

00:11:07,089 --> 00:11:15,579
Ruby core and examples you might know

00:11:10,990 --> 00:11:18,899
our mini test rake did you mean or power

00:11:15,579 --> 00:11:22,209
assert check check it on your laptop

00:11:18,899 --> 00:11:25,720
list all gems and you will see a gem

00:11:22,209 --> 00:11:30,820
called power suit it's among them so

00:11:25,720 --> 00:11:34,510
right ooh do this so I think the main

00:11:30,820 --> 00:11:37,570
reason is a gem can be updated and

00:11:34,510 --> 00:11:40,240
developed outside of the usual Ruby

00:11:37,570 --> 00:11:44,920
release cycles which is a really good

00:11:40,240 --> 00:11:46,720
thing I'd say and also it will become

00:11:44,920 --> 00:11:50,709
easier for different Ruby

00:11:46,720 --> 00:11:55,209
implementations to maintain the standard

00:11:50,709 --> 00:12:00,100
library for example JRuby has a set of

00:11:55,209 --> 00:12:03,310
patches that it applies to the standard

00:12:00,100 --> 00:12:05,170
library which might be a thing of

00:12:03,310 --> 00:12:11,279
history

00:12:05,170 --> 00:12:15,459
so but what could be possibly cons and

00:12:11,279 --> 00:12:18,579
I'd say maybe it will become really

00:12:15,459 --> 00:12:22,019
unclear rich ruby version comes with a

00:12:18,579 --> 00:12:25,209
rich version of which default gem and

00:12:22,019 --> 00:12:27,790
also where should I direct my pull

00:12:25,209 --> 00:12:30,369
request to is it's the Ruby core or is

00:12:27,790 --> 00:12:35,859
it is it - gem repository there's still

00:12:30,369 --> 00:12:37,689
some room for misunderstandings but yeah

00:12:35,859 --> 00:12:40,720
that is one of the reasons why I put up

00:12:37,689 --> 00:12:42,549
standard gems to orc bliss like every

00:12:40,720 --> 00:12:48,879
week standard gem for every ruby version

00:12:42,549 --> 00:12:53,160
and yeah check it out but in the end is

00:12:48,879 --> 00:12:57,639
it a good thing is it a bad thing and I

00:12:53,160 --> 00:13:00,160
it's progress it also means a lot of a

00:12:57,639 --> 00:13:04,299
huge parts of the or huge portions of

00:13:00,160 --> 00:13:08,709
the standard library not so maintained

00:13:04,299 --> 00:13:13,110
and I think this is a good point where

00:13:08,709 --> 00:13:15,730
they get some attention and maybe maybe

00:13:13,110 --> 00:13:18,429
they will be maintained again because

00:13:15,730 --> 00:13:20,559
someone feels more like maintaining a

00:13:18,429 --> 00:13:24,160
gem which I mean a lot of people are

00:13:20,559 --> 00:13:26,259
maintaining gems so it's not so

00:13:24,160 --> 00:13:29,019
complicated anymore to maintain maybe a

00:13:26,259 --> 00:13:31,959
standard library gem or maybe some even

00:13:29,019 --> 00:13:35,309
get removed or replaced by alternatives

00:13:31,959 --> 00:13:35,309
that do similar things

00:13:35,420 --> 00:13:46,029
and that's all I hope you have a great

00:13:39,709 --> 00:13:46,029
party in two hours and a heavy day too

00:13:50,420 --> 00:13:57,100
thank you so we are looking for Victor

00:13:54,290 --> 00:13:57,100
Shep Elif

00:14:27,860 --> 00:14:35,399
hello let Jim I am planningto talking

00:14:32,459 --> 00:14:37,860
about I already did one attempt a year

00:14:35,399 --> 00:14:41,309
ago at previous Yoriko at the same

00:14:37,860 --> 00:14:50,519
lightning talks maybe some of you have

00:14:41,309 --> 00:14:53,610
seen it the thing is the gem unlike the

00:14:50,519 --> 00:14:56,100
previous shown today is a bit of

00:14:53,610 --> 00:14:59,129
materialistic work and I tried to

00:14:56,100 --> 00:15:01,680
present it in a right way and started

00:14:59,129 --> 00:15:04,529
with a great introduction and that

00:15:01,680 --> 00:15:08,209
introduction took 5 minutes and half of

00:15:04,529 --> 00:15:10,860
a minute and then I get to real work and

00:15:08,209 --> 00:15:15,779
gem expected that internet would be on

00:15:10,860 --> 00:15:21,629
and it was off so and today I'll try to

00:15:15,779 --> 00:15:25,559
avoid avoid all the sellers I'll prepare

00:15:21,629 --> 00:15:27,839
the code before hands to show and I will

00:15:25,559 --> 00:15:31,639
not talk at all

00:15:27,839 --> 00:15:33,380
I hope the code will speak for itself so

00:15:31,639 --> 00:15:37,600
let's start

00:15:33,380 --> 00:15:37,600
[Applause]

00:15:38,380 --> 00:15:47,310
I hope it is huge enough but if it is

00:15:43,150 --> 00:15:47,310
not mmm it's too late to fix

00:17:17,130 --> 00:17:19,880
that's it

00:17:20,140 --> 00:17:37,109
[Applause]

00:17:47,980 --> 00:17:51,429
hello everybody

00:17:51,830 --> 00:17:58,660
my presentation is going to be a little

00:17:54,050 --> 00:18:02,480
more low-tech and something more basic

00:17:58,660 --> 00:18:07,280
my question is one who here wants to be

00:18:02,480 --> 00:18:13,220
really fast at fixing bugs and extending

00:18:07,280 --> 00:18:17,210
functionality anybody I hope I hope for

00:18:13,220 --> 00:18:24,410
more takers who here wants to be really

00:18:17,210 --> 00:18:28,820
happy coding a little more takers and

00:18:24,410 --> 00:18:33,500
for that I find that having good names

00:18:28,820 --> 00:18:35,360
in your coat counts a lot and I don't

00:18:33,500 --> 00:18:39,890
know if you remember your university

00:18:35,360 --> 00:18:42,920
days but the kind of code examples you

00:18:39,890 --> 00:18:48,170
used to get usually started with a and

00:18:42,920 --> 00:18:51,650
finished with Z or Y and it was really

00:18:48,170 --> 00:18:54,200
messy really hard to find out what is

00:18:51,650 --> 00:18:58,220
happening there what's the logic it took

00:18:54,200 --> 00:19:00,490
a whole bunch of time and this is

00:18:58,220 --> 00:19:03,350
something that I stress a lot with my

00:19:00,490 --> 00:19:05,450
juniors and the developers the team of

00:19:03,350 --> 00:19:08,330
developers that I'm working on with is

00:19:05,450 --> 00:19:12,860
that good names is basically half the

00:19:08,330 --> 00:19:16,580
battle if not more because good code in

00:19:12,860 --> 00:19:20,510
my opinion should read like a piece of

00:19:16,580 --> 00:19:24,770
prose or literature and you basically

00:19:20,510 --> 00:19:29,260
see exactly what the intention is what

00:19:24,770 --> 00:19:31,790
the programmer wanted to achieve and

00:19:29,260 --> 00:19:34,790
what's happening there what's the logic

00:19:31,790 --> 00:19:42,020
basically what's the algorithm behind it

00:19:34,790 --> 00:19:45,830
all so I have another question who here

00:19:42,020 --> 00:19:48,650
was like stopped or had like major

00:19:45,830 --> 00:19:51,860
problems in solving a problem because

00:19:48,650 --> 00:19:58,340
they found like some ugly code that they

00:19:51,860 --> 00:20:03,920
had to work on only proved on ah getting

00:19:58,340 --> 00:20:07,670
better and actually I I stress the need

00:20:03,920 --> 00:20:10,100
to write better code not just better

00:20:07,670 --> 00:20:12,830
code just give it good names you can be

00:20:10,100 --> 00:20:18,230
crappy code but if you have good names

00:20:12,830 --> 00:20:21,200
for it you can follow the logic and and

00:20:18,230 --> 00:20:23,810
I want you to do it for yourself because

00:20:21,200 --> 00:20:26,930
usually you work on a feature you finish

00:20:23,810 --> 00:20:29,390
it goes to production six months later

00:20:26,930 --> 00:20:33,170
the boss comes in in one of those long

00:20:29,390 --> 00:20:35,750
meetings hit oh we want this other stuff

00:20:33,170 --> 00:20:39,110
took me down there and then you go to

00:20:35,750 --> 00:20:43,940
your code and it's like what was I

00:20:39,110 --> 00:20:46,310
thinking what is going on it could be

00:20:43,940 --> 00:20:50,120
like the code that somebody else wrote

00:20:46,310 --> 00:20:50,840
and you basically have to start from

00:20:50,120 --> 00:20:55,370
scratch

00:20:50,840 --> 00:20:57,580
and also if you if you get good if you

00:20:55,370 --> 00:21:00,590
get if you give good names

00:20:57,580 --> 00:21:02,510
you're going to be happy yourself when

00:21:00,590 --> 00:21:05,480
you have to work and your colleagues are

00:21:02,510 --> 00:21:08,870
going to love you when they have to work

00:21:05,480 --> 00:21:11,120
on your code some of them I maybe

00:21:08,870 --> 00:21:14,450
they'll start fighting to work like okay

00:21:11,120 --> 00:21:20,870
who wrote that feature okay I want to

00:21:14,450 --> 00:21:23,510
extend it to see exactly and one thing

00:21:20,870 --> 00:21:26,510
that you can you that I would like you

00:21:23,510 --> 00:21:29,960
to try out is when we have the main

00:21:26,510 --> 00:21:33,080
method that you're doing the work on

00:21:29,960 --> 00:21:36,170
don't have their everything like with

00:21:33,080 --> 00:21:38,780
loops and everything just extract all

00:21:36,170 --> 00:21:40,070
those parts in smaller methods private

00:21:38,780 --> 00:21:43,910
methods give

00:21:40,070 --> 00:21:47,480
them really great names and that way

00:21:43,910 --> 00:21:49,850
when you read the the code that the

00:21:47,480 --> 00:21:51,830
method you know exactly we have to do

00:21:49,850 --> 00:21:55,100
the changes so for example if you have

00:21:51,830 --> 00:21:58,160
like a user signup instead of having all

00:21:55,100 --> 00:22:02,750
the logic shop then just have something

00:21:58,160 --> 00:22:07,700
that says ok create the user email the

00:22:02,750 --> 00:22:10,910
user his password add him on social

00:22:07,700 --> 00:22:14,060
media so all the steps so if somebody

00:22:10,910 --> 00:22:17,030
gets a request that says we would like

00:22:14,060 --> 00:22:18,910
to change when the email get sent when

00:22:17,030 --> 00:22:22,070
that developer gets there to that method

00:22:18,910 --> 00:22:24,260
knows exactly where they have to make

00:22:22,070 --> 00:22:28,250
the change because it's written right

00:22:24,260 --> 00:22:30,620
there and as an ending thought if you

00:22:28,250 --> 00:22:32,840
ever think you should write the comment

00:22:30,620 --> 00:22:36,440
to explain in your code

00:22:32,840 --> 00:22:46,069
you're not giving good names

00:22:36,440 --> 00:22:46,069
[Applause]

00:23:36,050 --> 00:23:42,450
okay hello hello everyone I'm gonna

00:23:40,280 --> 00:23:45,600
hello everyone I'm going to talk today

00:23:42,450 --> 00:23:48,930
about a project or set of projects are

00:23:45,600 --> 00:23:51,440
created which is called TTY they help

00:23:48,930 --> 00:23:54,480
you create terminal applications in Ruby

00:23:51,440 --> 00:23:56,490
because there's one observation Ruby's

00:23:54,480 --> 00:23:58,860
not web frameworks there's a lot of

00:23:56,490 --> 00:24:01,260
stuff that can be built outside of web

00:23:58,860 --> 00:24:04,170
and I also want to help people to kick

00:24:01,260 --> 00:24:06,540
bash habit which I get successful myself

00:24:04,170 --> 00:24:09,270
so where you can find the project

00:24:06,540 --> 00:24:13,170
there's a website you can see all the

00:24:09,270 --> 00:24:15,440
packages built in and you can find the

00:24:13,170 --> 00:24:19,740
source on github Google is your friend

00:24:15,440 --> 00:24:21,390
so currently I've got 15 components I'm

00:24:19,740 --> 00:24:23,520
not going to show you all of them I'm

00:24:21,390 --> 00:24:26,400
going to show you a couple of them so

00:24:23,520 --> 00:24:28,800
first one is TTY prompt which this year

00:24:26,400 --> 00:24:33,780
one Fukuoka rubia word GMO palpable

00:24:28,800 --> 00:24:35,460
which is not approved so how you might

00:24:33,780 --> 00:24:37,680
use this component obviously you

00:24:35,460 --> 00:24:39,660
required and then you instantiate your

00:24:37,680 --> 00:24:42,740
prompt and then hopefully this is a

00:24:39,660 --> 00:24:47,720
choice of drinks at the after party and

00:24:42,740 --> 00:24:47,720
then how that's how it looks in terminal

00:24:49,910 --> 00:24:54,640
right so this is another type of prom

00:24:52,910 --> 00:24:57,110
this many of them so if you're building

00:24:54,640 --> 00:25:00,230
terminal applications I'm sure you will

00:24:57,110 --> 00:25:04,490
find something useful another component

00:25:00,230 --> 00:25:06,200
is called t2 I progress bar recently I

00:25:04,490 --> 00:25:09,020
was working with puppet labs to

00:25:06,200 --> 00:25:12,470
introduce some multi rendering so for

00:25:09,020 --> 00:25:15,140
instance you create multi progress bar

00:25:12,470 --> 00:25:17,960
then you register a few bars with it and

00:25:15,140 --> 00:25:22,090
then LED them off to run in different

00:25:17,960 --> 00:25:24,620
thread and that could be your result

00:25:22,090 --> 00:25:28,270
similarly when you've got unknown

00:25:24,620 --> 00:25:31,670
progress thank you very much

00:25:28,270 --> 00:25:33,590
when you've got unknown progress for

00:25:31,670 --> 00:25:37,340
instance this is a dummy downloading of

00:25:33,590 --> 00:25:39,530
files you create multi spinner register

00:25:37,340 --> 00:25:42,650
spinners registered you the jobs and

00:25:39,530 --> 00:25:46,520
then call also spin and that's the

00:25:42,650 --> 00:25:50,210
result so this is used by puppet labs in

00:25:46,520 --> 00:25:52,580
there too tooling and so you might be

00:25:50,210 --> 00:25:54,500
wondering okay this is oldest components

00:25:52,580 --> 00:25:58,010
and I don't don't really know how to

00:25:54,500 --> 00:26:00,470
build and terminal applications I've got

00:25:58,010 --> 00:26:03,380
you covered as well so I started working

00:26:00,470 --> 00:26:06,020
on this executive or call teletype

00:26:03,380 --> 00:26:09,650
because I don't give you extra points

00:26:06,020 --> 00:26:12,830
for figuring why I can't call TTY this

00:26:09,650 --> 00:26:17,000
executive executive of tqi and he works

00:26:12,830 --> 00:26:18,920
on top of bundler because I just feel

00:26:17,000 --> 00:26:21,280
it's a good practice to start creating

00:26:18,920 --> 00:26:23,930
things as gems even if you don't want to

00:26:21,280 --> 00:26:25,790
publish it you might want to reuse it in

00:26:23,930 --> 00:26:31,010
your company with on other to developers

00:26:25,790 --> 00:26:33,380
so so that's how the terminal toolkit

00:26:31,010 --> 00:26:35,330
looks and because I'm from Eastern

00:26:33,380 --> 00:26:37,570
Europe there's Eastern European flavor

00:26:35,330 --> 00:26:39,820
in there

00:26:37,570 --> 00:26:41,830
this really two commands that you should

00:26:39,820 --> 00:26:45,730
pay attention to which is add a new a

00:26:41,830 --> 00:26:49,830
new essentially piggybacks on bundler

00:26:45,730 --> 00:26:52,870
with a lot of extra stuff in it and and

00:26:49,830 --> 00:26:55,510
there's another command call ad which

00:26:52,870 --> 00:26:59,230
basically adds command there's extra few

00:26:55,510 --> 00:27:05,000
flags I'm not gonna bore you with this

00:26:59,230 --> 00:27:15,700
is where you can find me and thank you

00:27:05,000 --> 00:27:15,700
[Applause]

00:27:33,970 --> 00:27:40,100
hi I'm Yan I'm from depth foo if you

00:27:38,510 --> 00:27:42,370
don't know what Deb foo is we are a

00:27:40,100 --> 00:27:44,840
service to help you keep your

00:27:42,370 --> 00:27:48,590
dependencies up to date we send pull

00:27:44,840 --> 00:27:50,360
requests to your project as soon as an

00:27:48,590 --> 00:27:52,669
update comes in but this is not what I'm

00:27:50,360 --> 00:27:55,399
going to talk about I'm going to talk

00:27:52,669 --> 00:27:57,470
about a part of bundler 2.0 which is

00:27:55,399 --> 00:27:59,120
coming soon

00:27:57,470 --> 00:28:01,789
we've written a blog post about this

00:27:59,120 --> 00:28:05,409
just out of curiosity and out of vanity

00:28:01,789 --> 00:28:10,520
how many of you have read that blog post

00:28:05,409 --> 00:28:12,649
nice thank you okay it's good so the

00:28:10,520 --> 00:28:15,529
part I want to talk about is that

00:28:12,649 --> 00:28:17,990
bundler 2.0 will change a few defaults

00:28:15,529 --> 00:28:21,490
and one of the most important one is

00:28:17,990 --> 00:28:24,620
that the files where you actually

00:28:21,490 --> 00:28:26,360
declare your dependencies are going the

00:28:24,620 --> 00:28:27,640
file names are going to change change

00:28:26,360 --> 00:28:31,669
looks like this

00:28:27,640 --> 00:28:34,250
so gem file is turning into gems Darby

00:28:31,669 --> 00:28:39,490
and the gem file lock is turning into

00:28:34,250 --> 00:28:39,490
gems that locked why

00:28:40,019 --> 00:28:49,269
well you see let's start with the gem

00:28:43,899 --> 00:28:50,799
file first of all the capitalization at

00:28:49,269 --> 00:28:53,620
the beginning is a bit weird

00:28:50,799 --> 00:28:55,240
eh I mean it's coming from make file I

00:28:53,620 --> 00:28:58,809
guess and proc file and all of these

00:28:55,240 --> 00:29:01,779
things but I mean what why and it's so

00:28:58,809 --> 00:29:06,460
different from everything else the next

00:29:01,779 --> 00:29:10,029
thing is gem file that's why these files

00:29:06,460 --> 00:29:11,799
are also called file files so it's kind

00:29:10,029 --> 00:29:14,169
of superfluous if you think about it I

00:29:11,799 --> 00:29:16,539
mean you don't call the app folder in

00:29:14,169 --> 00:29:19,419
your rails app app folder you call it

00:29:16,539 --> 00:29:23,619
app right because it's a folder we kind

00:29:19,419 --> 00:29:26,379
of know that and the last thing is so it

00:29:23,619 --> 00:29:28,360
doesn't have an extension and so you see

00:29:26,379 --> 00:29:29,830
this file for the first time and you

00:29:28,360 --> 00:29:33,070
don't know what's inside of it and

00:29:29,830 --> 00:29:36,129
that's kind of mm-hmm not so nice it's

00:29:33,070 --> 00:29:38,619
probably okay for humans it's a bit more

00:29:36,129 --> 00:29:42,009
complicated for things like editors and

00:29:38,619 --> 00:29:44,320
tools and stuff and so that's why it's

00:29:42,009 --> 00:29:47,320
probably a good idea to add an extension

00:29:44,320 --> 00:29:49,080
to that with gem file lock the thing is

00:29:47,320 --> 00:29:53,320
a little bit easier

00:29:49,080 --> 00:29:56,830
basically that lock is somewhat of a

00:29:53,320 --> 00:29:59,649
reserved extension for files on UNIX

00:29:56,830 --> 00:30:03,159
systems because you use them for locks

00:29:59,649 --> 00:30:06,509
actual locks on resources and they are

00:30:03,159 --> 00:30:11,080
usually treated as temporary things so

00:30:06,509 --> 00:30:13,600
if you have a script on your UNIX server

00:30:11,080 --> 00:30:16,240
that on boot-up clears all lock files

00:30:13,600 --> 00:30:19,230
because it's just a you know newly

00:30:16,240 --> 00:30:21,669
booted up system you may accidentally

00:30:19,230 --> 00:30:25,929
delete a gem file lock which is probably

00:30:21,669 --> 00:30:29,590
not a good idea and interestingly this

00:30:25,929 --> 00:30:32,529
bark this bug has been reported in 2010

00:30:29,590 --> 00:30:37,779
just to give you an idea how all this

00:30:32,529 --> 00:30:41,070
issue is how how we are going to do the

00:30:37,779 --> 00:30:41,070
migration well duh

00:30:49,840 --> 00:30:53,899
the interesting thing and I did not know

00:30:52,309 --> 00:30:57,080
that I had to look it up

00:30:53,899 --> 00:30:58,549
it works since one low 1.8 that must

00:30:57,080 --> 00:31:01,639
have been like I don't know 20 years ago

00:30:58,549 --> 00:31:08,239
so well actually it was somewhere in

00:31:01,639 --> 00:31:10,789
2015 so we're done right yeah almost so

00:31:08,239 --> 00:31:13,190
you see the problem is not our own

00:31:10,789 --> 00:31:15,859
projects and running it in development

00:31:13,190 --> 00:31:18,109
mode are probably the problem is more

00:31:15,859 --> 00:31:20,989
like your code does not exist in

00:31:18,109 --> 00:31:24,229
isolation so you have all these things

00:31:20,989 --> 00:31:26,899
that have assumptions about file

00:31:24,229 --> 00:31:30,080
structure and you know sometimes they

00:31:26,899 --> 00:31:31,220
use gem files to actually detect a ruby

00:31:30,080 --> 00:31:33,259
project for us

00:31:31,220 --> 00:31:36,409
for example Travis and Errol could do

00:31:33,259 --> 00:31:38,749
that and so suddenly the gem file is no

00:31:36,409 --> 00:31:41,450
longer there and then you deploy

00:31:38,749 --> 00:31:44,559
something to Heroku and actually nothing

00:31:41,450 --> 00:31:47,869
really happens it's kind of a bummer so

00:31:44,559 --> 00:31:51,649
what we're going what we need to do is

00:31:47,869 --> 00:31:54,859
get all of these infrastructure things

00:31:51,649 --> 00:31:57,229
to recognize the new files and that

00:31:54,859 --> 00:31:59,840
needs to happen soon because let's talk

00:31:57,229 --> 00:32:03,289
about timing in the last 40 seconds

00:31:59,840 --> 00:32:07,700
bundler ships bundled with Ruby 2 point

00:32:03,289 --> 00:32:10,159
5 and that will possibly be bundler 2.0

00:32:07,700 --> 00:32:14,229
if everything goes right one load 2.0

00:32:10,159 --> 00:32:17,239
will ship in standalone after bundler 2

00:32:14,229 --> 00:32:19,159
1.16 one point 16 is the next release as

00:32:17,239 --> 00:32:22,009
you all know because every time you do a

00:32:19,159 --> 00:32:27,229
bundle install it tries to tell you that

00:32:22,009 --> 00:32:29,029
pre-release and bundler 2.0 will still

00:32:27,229 --> 00:32:32,409
work with gem file gem file lock so you

00:32:29,029 --> 00:32:35,509
don't actually have to rename the files

00:32:32,409 --> 00:32:37,099
bundler 3.0 will not work with gem file

00:32:35,509 --> 00:32:42,440
gem for looks that's what I've written

00:32:37,099 --> 00:32:45,649
in the article well actually it will it

00:32:42,440 --> 00:32:47,320
is interesting because 14 days ago and

00:32:45,649 --> 00:32:50,490
that was after we published the article

00:32:47,320 --> 00:32:53,800
this happened

00:32:50,490 --> 00:32:57,250
so it got removed from the RFC that

00:32:53,800 --> 00:33:02,380
described bundler 2.0 and I think that's

00:32:57,250 --> 00:33:02,770
a good thing so is this is this good or

00:33:02,380 --> 00:33:05,290
bad

00:33:02,770 --> 00:33:08,880
I don't know really anyway check out

00:33:05,290 --> 00:33:08,880
that food comm thank you very much

00:33:10,400 --> 00:33:17,720
[Music]

00:33:13,650 --> 00:33:20,940
oh what a day thank you for our amazing

00:33:17,720 --> 00:33:24,150
lightning talk speakers today I think

00:33:20,940 --> 00:33:31,890
all of them were really interesting so

00:33:24,150 --> 00:33:34,230
just a few last announcements take I

00:33:31,890 --> 00:33:37,410
will go home please don't forget it you

00:33:34,230 --> 00:33:43,470
can still send your proposals too high

00:33:37,410 --> 00:33:45,929
at Oroku 2017 dot org okay and also we

00:33:43,470 --> 00:33:48,570
read the blog posts please we published

00:33:45,929 --> 00:33:51,210
several blog post during the past few

00:33:48,570 --> 00:33:56,429
days so please read them there are a lot

00:33:51,210 --> 00:33:58,710
of details there party party at 8 a.m.

00:33:56,429 --> 00:34:01,320
at uncapped please don't forget your

00:33:58,710 --> 00:34:03,690
page because we will let you in only if

00:34:01,320 --> 00:34:06,690
you have the batch I hope you had a

00:34:03,690 --> 00:34:08,800
great time I had a great time see you at

00:34:06,690 --> 00:34:12,479
the party and see you tomorrow thank you

00:34:08,800 --> 00:34:12,479

YouTube URL: https://www.youtube.com/watch?v=NEnZViT581o


