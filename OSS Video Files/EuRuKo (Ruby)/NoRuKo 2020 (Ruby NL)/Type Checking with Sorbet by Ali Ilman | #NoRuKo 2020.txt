Title: Type Checking with Sorbet by Ali Ilman | #NoRuKo 2020
Publication date: 2020-09-11
Playlist: #NoRuKo 2020
Description: 
	If you enjoy building projects using TypeScript, you probably wish you could build Ruby projects with a type checker. I've been in that boat! Recently, I stumbled upon Sorbet, a well-maintained type checker for Ruby. In this talk, we'll take a look at how we can use Sorbet. 

Ali Ilman is a software engineer from Malaysia. He works for Suria Labs as a full-stack developer. He writes Ruby and JavaScript and other than these technologies, he's getting his hands dirty with Docker and Kubernetes. He loves TDD and service objects. In his free time, he tends to have his head buried in a book.

Welcome to the #NoRuKo conference. A virtual unconference organized by Stichting Ruby NL.

#NoRuKo playlist with all talks and panels: https://www.youtube.com/playlist?list=PL9_A7olkztLlmJIAc567KQgKcMi7-qnjg

Recorded 21th of August, 2020.
NoRuKo website: https://noruko.org/
Stichting Ruby NL website: https://rubynl.org/
Captions: 
	00:00:00,160 --> 00:00:06,160
uh ali is here to talk about

00:00:03,120 --> 00:00:07,919
type checking something uh well go

00:00:06,160 --> 00:00:08,480
developers already somewhat on board

00:00:07,919 --> 00:00:10,639
with

00:00:08,480 --> 00:00:11,599
that's nice um but for ruby developers

00:00:10,639 --> 00:00:14,240
this is a

00:00:11,599 --> 00:00:16,240
new an amazing product and uh ali is a

00:00:14,240 --> 00:00:19,680
software engineer from malaysia malaysia

00:00:16,240 --> 00:00:19,680
and he's been working

00:00:20,080 --> 00:00:25,199
and well he came across this fantastic

00:00:22,640 --> 00:00:28,240
thing called sorbet

00:00:25,199 --> 00:00:30,960
he's writing ruby in javascript at

00:00:28,240 --> 00:00:31,920
surya labs and uh some some some other

00:00:30,960 --> 00:00:33,520
technologies but

00:00:31,920 --> 00:00:36,559
most of it he's like likes to get his

00:00:33,520 --> 00:00:40,480
hand jersey on uh docker and kubernetes

00:00:36,559 --> 00:00:43,200
kubernetes case whatever

00:00:40,480 --> 00:00:44,399
i like to say and he loves td and he

00:00:43,200 --> 00:00:47,120
lost his service objects

00:00:44,399 --> 00:00:47,760
and in his free time he tends to have

00:00:47,120 --> 00:00:50,879
his head

00:00:47,760 --> 00:00:53,600
buried in a book ali

00:00:50,879 --> 00:00:53,600
i think this is you

00:00:54,160 --> 00:01:01,520
all right

00:00:58,480 --> 00:01:01,840
hey everyone so i'm going to be talking

00:01:01,520 --> 00:01:04,960
about

00:01:01,840 --> 00:01:08,400
high tech with storybay will be

00:01:04,960 --> 00:01:09,439
first of all male 1 after finding from

00:01:08,400 --> 00:01:12,720
malaysia

00:01:09,439 --> 00:01:15,840
looking for a tnc cultural we

00:01:12,720 --> 00:01:19,040
are specializing in web depend and

00:01:15,840 --> 00:01:19,759
more development that is my email right

00:01:19,040 --> 00:01:22,080
there

00:01:19,759 --> 00:01:23,200
and on social media you can find me at

00:01:22,080 --> 00:01:27,520
the ill moms

00:01:23,200 --> 00:01:30,880
and you can find me a little month

00:01:27,520 --> 00:01:34,079
but so the content of this talk

00:01:30,880 --> 00:01:35,280
while it's torbay also they caught my

00:01:34,079 --> 00:01:38,720
attention

00:01:35,280 --> 00:01:40,880
that is the interesting story to tell

00:01:38,720 --> 00:01:42,000
and ruby3 come to his rvs and tuck it

00:01:40,880 --> 00:01:45,040
into language

00:01:42,000 --> 00:01:48,320
this is uh something that max

00:01:45,040 --> 00:01:50,880
mentioned during his uh keynote

00:01:48,320 --> 00:01:52,079
so we'll get into that it's brief

00:01:50,880 --> 00:01:55,280
information because it's

00:01:52,079 --> 00:01:57,680
recently uh fields the public

00:01:55,280 --> 00:01:58,719
and should you consider adding toy to a

00:01:57,680 --> 00:02:02,719
running production

00:01:58,719 --> 00:02:06,640
app and demo

00:02:02,719 --> 00:02:08,080
right what is sorbet it is a gradual

00:02:06,640 --> 00:02:11,680
type checker

00:02:08,080 --> 00:02:14,319
meaning you don't need to add

00:02:11,680 --> 00:02:16,160
type text throughout your code base it

00:02:14,319 --> 00:02:17,360
doesn't matter if it's a small code base

00:02:16,160 --> 00:02:21,120
or logical case

00:02:17,360 --> 00:02:24,720
you can add in those types one by one

00:02:21,120 --> 00:02:27,040
in one by one file it allows us to write

00:02:24,720 --> 00:02:30,560
type checks in ruby syntax so it's not

00:02:27,040 --> 00:02:34,480
a superset of like it's not like type

00:02:30,560 --> 00:02:36,879
tributed superset of javascript it's

00:02:34,480 --> 00:02:37,840
written ruby it's not subset of super

00:02:36,879 --> 00:02:40,239
sets

00:02:37,840 --> 00:02:44,239
and it is built by engineers as tribe

00:02:40,239 --> 00:02:44,239
with contributions from the community

00:02:45,200 --> 00:02:52,480
so how did sorbet catch

00:02:48,319 --> 00:02:55,920
my so

00:02:52,480 --> 00:02:59,840
previously i had no interest in in

00:02:55,920 --> 00:03:01,200
writing type checks uh especially with

00:02:59,840 --> 00:03:04,000
typescript

00:03:01,200 --> 00:03:04,959
cryptic to me but then i was working on

00:03:04,000 --> 00:03:08,159
a

00:03:04,959 --> 00:03:09,360
project that used typescript and i was

00:03:08,159 --> 00:03:12,239
born away with how

00:03:09,360 --> 00:03:12,959
helpful it is having type checks it just

00:03:12,239 --> 00:03:16,159
removes the

00:03:12,959 --> 00:03:16,720
extra time in your brain for you to

00:03:16,159 --> 00:03:19,440
think

00:03:16,720 --> 00:03:20,080
what does his method do so at that time

00:03:19,440 --> 00:03:23,519
i had

00:03:20,080 --> 00:03:26,159
no idea about the presence of survey

00:03:23,519 --> 00:03:28,239
and after building two projects to react

00:03:26,159 --> 00:03:31,440
projects with starscript

00:03:28,239 --> 00:03:33,280
i thought let's search for one and i

00:03:31,440 --> 00:03:36,519
stumbled upon sorbet

00:03:33,280 --> 00:03:38,239
and what attracted me is the

00:03:36,519 --> 00:03:41,840
well-maintained

00:03:38,239 --> 00:03:44,159
it is maintained by strike a massive

00:03:41,840 --> 00:03:45,440
company and it has an ever-growing

00:03:44,159 --> 00:03:48,480
community

00:03:45,440 --> 00:03:53,040
also the documentation the documentation

00:03:48,480 --> 00:03:53,040
is very easy to understand

00:03:54,959 --> 00:04:00,720
so ruby 3 comes with rbs the type

00:03:58,400 --> 00:04:04,239
signature language

00:04:00,720 --> 00:04:04,720
what happened to survey so the engineers

00:04:04,239 --> 00:04:08,080
over

00:04:04,720 --> 00:04:08,959
strong will incorporate obvious as a way

00:04:08,080 --> 00:04:10,959
to specify

00:04:08,959 --> 00:04:12,640
type annotations in addition to the

00:04:10,959 --> 00:04:15,840
existing syntax

00:04:12,640 --> 00:04:18,400
parts so as let's mention earlier in his

00:04:15,840 --> 00:04:18,400
keynote

00:04:18,479 --> 00:04:27,199
the survey team will build uh

00:04:22,880 --> 00:04:30,160
the the with this sorbet with

00:04:27,199 --> 00:04:30,639
we're supporting both rbs and rbi which

00:04:30,160 --> 00:04:33,360
is

00:04:30,639 --> 00:04:33,759
which stands for ruby interface which is

00:04:33,360 --> 00:04:38,240
the

00:04:33,759 --> 00:04:38,240
type signature language that sorbet uses

00:04:38,320 --> 00:04:41,759
and justice or exactly it was released

00:04:41,120 --> 00:04:44,880
uh

00:04:41,759 --> 00:04:47,280
two or three weeks ago

00:04:44,880 --> 00:04:48,880
so so you can see that adding software

00:04:47,280 --> 00:04:52,479
to a running production

00:04:48,880 --> 00:04:53,280
app disclaimer you're solving running

00:04:52,479 --> 00:04:56,720
production apps

00:04:53,280 --> 00:05:01,840
i want to use them in ruby playgrounds

00:04:56,720 --> 00:05:05,680
and small code base so nothing

00:05:01,840 --> 00:05:09,600
large scale and i think

00:05:05,680 --> 00:05:14,160
you should although the support for

00:05:09,600 --> 00:05:17,280
rails and other major gems in the

00:05:14,160 --> 00:05:19,840
ecosystem are somewhat lacking

00:05:17,280 --> 00:05:20,960
which is expected because they are new

00:05:19,840 --> 00:05:24,960
so

00:05:20,960 --> 00:05:26,720
when it comes to type checking

00:05:24,960 --> 00:05:28,720
uh there will be some issues and

00:05:26,720 --> 00:05:31,759
something missing

00:05:28,720 --> 00:05:32,720
but you can see this coming handy if you

00:05:31,759 --> 00:05:36,840
use the right like

00:05:32,720 --> 00:05:41,759
certain objects yes i love this object

00:05:36,840 --> 00:05:44,560
and i can't think of other

00:05:41,759 --> 00:05:45,520
reasons why you shouldn't use strawberry

00:05:44,560 --> 00:05:49,520
in the

00:05:45,520 --> 00:05:53,280
victory ecosystem since i said

00:05:49,520 --> 00:05:57,840
recently you was released to the public

00:05:53,280 --> 00:05:57,840
uh last year

00:05:58,240 --> 00:06:06,560
so demo time i have a small

00:06:02,880 --> 00:06:10,160
ruby file with a couple of

00:06:06,560 --> 00:06:12,240
classes so

00:06:10,160 --> 00:06:13,440
as we can see in this playground rb

00:06:12,240 --> 00:06:16,639
there are

00:06:13,440 --> 00:06:20,000
some syntax that you might have seen

00:06:16,639 --> 00:06:24,000
that have typed true seek written

00:06:20,000 --> 00:06:27,520
string so we'll go through that

00:06:24,000 --> 00:06:30,800
so if you survey there are

00:06:27,520 --> 00:06:34,080
four or five types of

00:06:30,800 --> 00:06:34,800
types that you can specify so true

00:06:34,080 --> 00:06:38,639
meaning

00:06:34,800 --> 00:06:39,520
sorbet will check your file and see

00:06:38,639 --> 00:06:43,520
whether there is

00:06:39,520 --> 00:06:48,400
a method that is returning

00:06:43,520 --> 00:06:51,039
uh incorrect data type let's say this is

00:06:48,400 --> 00:06:52,800
this message within your string which

00:06:51,039 --> 00:06:54,880
you need to

00:06:52,800 --> 00:06:56,960
expect it to written integer it will

00:06:54,880 --> 00:07:00,000
throw an error

00:06:56,960 --> 00:07:00,880
there is also type false the type false

00:07:00,000 --> 00:07:03,520
will

00:07:00,880 --> 00:07:04,479
will be ignored by survey it won't check

00:07:03,520 --> 00:07:07,919
the file

00:07:04,479 --> 00:07:10,639
other than syntax errors

00:07:07,919 --> 00:07:12,720
let's also type ignore this entirely

00:07:10,639 --> 00:07:15,680
ignored but

00:07:12,720 --> 00:07:16,080
ignore if the code is being used in

00:07:15,680 --> 00:07:20,319
other

00:07:16,080 --> 00:07:23,360
files then it could potentially

00:07:20,319 --> 00:07:26,319
raise a certain top errors

00:07:23,360 --> 00:07:27,840
if you cannot find methods for example

00:07:26,319 --> 00:07:31,360
or if the methods are returning

00:07:27,840 --> 00:07:33,919
unexpected data type

00:07:31,360 --> 00:07:35,759
so moving on from that required stop by

00:07:33,919 --> 00:07:38,240
runtime so firmware runtime

00:07:35,759 --> 00:07:38,240
is the

00:07:39,360 --> 00:07:46,160
is the package the dam that is

00:07:42,560 --> 00:07:47,280
required to to run to write the

00:07:46,160 --> 00:07:50,800
signature

00:07:47,280 --> 00:07:55,520
in the code so

00:07:50,800 --> 00:07:59,360
you can see that there's xmt6 this will

00:07:55,520 --> 00:08:01,680
give the hello class the sick method

00:07:59,360 --> 00:08:02,720
which is then used to expect that say

00:08:01,680 --> 00:08:06,080
hello world

00:08:02,720 --> 00:08:09,039
to written integer and

00:08:06,080 --> 00:08:10,479
without forbidden runtime you are unable

00:08:09,039 --> 00:08:14,479
to

00:08:10,479 --> 00:08:16,639
run the code at one time only

00:08:14,479 --> 00:08:17,220
if we disable uh if we remove software

00:08:16,639 --> 00:08:18,800
runtime

00:08:17,220 --> 00:08:23,039
[Music]

00:08:18,800 --> 00:08:23,039
and we run srp

00:08:23,599 --> 00:08:32,320
express india srb is a cli

00:08:28,400 --> 00:08:35,760
for survey so we can run it

00:08:32,320 --> 00:08:38,000
this is for initializing a ruby project

00:08:35,760 --> 00:08:39,519
uh initializing survey for ruby projects

00:08:38,000 --> 00:08:43,039
and since i've already done that

00:08:39,519 --> 00:08:44,800
i am not going to do it again and

00:08:43,039 --> 00:08:47,920
actually it should make any difference

00:08:44,800 --> 00:08:47,920
because it's tomorrow

00:08:52,839 --> 00:08:55,839
based

00:08:56,160 --> 00:09:00,640
running srb in it will create a folder

00:08:59,120 --> 00:09:03,680
called starbay

00:09:00,640 --> 00:09:04,320
and in there in survey folder it will

00:09:03,680 --> 00:09:08,080
consist

00:09:04,320 --> 00:09:09,519
of rbi files are these files are

00:09:08,080 --> 00:09:15,120
basically

00:09:09,519 --> 00:09:15,120
uh rbi

00:09:17,920 --> 00:09:22,720
decorations uh found within terms that

00:09:22,000 --> 00:09:25,200
we use

00:09:22,720 --> 00:09:28,360
but strawberry cannot see because right

00:09:25,200 --> 00:09:30,640
now sorbet can only see

00:09:28,360 --> 00:09:31,519
playground.rt you cannot see that we're

00:09:30,640 --> 00:09:35,040
using

00:09:31,519 --> 00:09:38,480
ruby or active support so

00:09:35,040 --> 00:09:41,680
we will go through our games

00:09:38,480 --> 00:09:45,120
and create this story folder with all

00:09:41,680 --> 00:09:45,600
the type tags if it's possible to be

00:09:45,120 --> 00:09:49,519
done

00:09:45,600 --> 00:09:52,880
because the ecosystem is still maturing

00:09:49,519 --> 00:09:52,880
there's no dumbbells here

00:09:55,839 --> 00:09:59,839
the file actually two thousand eight

00:09:57,600 --> 00:10:03,600
hundred lines

00:09:59,839 --> 00:10:04,160
uh to do rbi um i have not explored this

00:10:03,600 --> 00:10:07,760
yet

00:10:04,160 --> 00:10:12,320
errors constant name

00:10:07,760 --> 00:10:12,320
couldn't find out why this is happening

00:10:12,720 --> 00:10:19,680
anyway so let me show what happens

00:10:16,560 --> 00:10:23,440
if we run this file

00:10:19,680 --> 00:10:23,440
without requiring soviet runner

00:10:24,720 --> 00:10:27,920
it was already initialized constant

00:10:27,120 --> 00:10:32,880
error

00:10:27,920 --> 00:10:36,320
because t6 is only

00:10:32,880 --> 00:10:40,079
is it's given by top runtime

00:10:36,320 --> 00:10:42,550
so let me uncomment it

00:10:40,079 --> 00:10:43,760
click on the rb oh

00:10:42,550 --> 00:10:47,120
[Music]

00:10:43,760 --> 00:10:47,120
it's an arrow here recent

00:10:49,519 --> 00:10:53,680
so this one is the one that we did

00:10:52,480 --> 00:10:57,839
earlier

00:10:53,680 --> 00:11:01,760
okay to string and it should pass

00:10:57,839 --> 00:11:01,760
there we go um

00:11:01,920 --> 00:11:05,839
let's access the irb and play around

00:11:04,560 --> 00:11:15,120
with the code

00:11:05,839 --> 00:11:19,200
i'm going to show some speed tags

00:11:15,120 --> 00:11:19,200
and that is true i like tweets literally

00:11:19,440 --> 00:11:28,160
all right so uh we have seen that we can

00:11:24,320 --> 00:11:32,399
uh declare type text for types for

00:11:28,160 --> 00:11:35,440
for methods like this index right here

00:11:32,399 --> 00:11:37,120
say return string above the method so

00:11:35,440 --> 00:11:39,519
how do we

00:11:37,120 --> 00:11:40,480
declare the types for a variable let's

00:11:39,519 --> 00:11:45,120
say

00:11:40,480 --> 00:11:45,120
we have a name called

00:11:48,000 --> 00:11:57,279
install bay it has four uh

00:11:52,000 --> 00:12:01,839
type sessions if i'm not mistaken

00:11:57,279 --> 00:12:04,959
so we can use a one that is used for uh

00:12:01,839 --> 00:12:08,720
giving the expression

00:12:04,959 --> 00:12:10,880
a type could be that

00:12:08,720 --> 00:12:13,040
the first argument is the value and the

00:12:10,880 --> 00:12:15,440
second is the data type or we're giving

00:12:13,040 --> 00:12:18,560
a string

00:12:15,440 --> 00:12:22,839
so how do we check whether

00:12:18,560 --> 00:12:25,200
how we retrieve the data type of this

00:12:22,839 --> 00:12:29,040
name

00:12:25,200 --> 00:12:32,480
okay retrieve type oh wait

00:12:29,040 --> 00:12:32,480
reveal type like that

00:12:33,600 --> 00:12:39,839
oh it doesn't reveal here interesting

00:12:40,320 --> 00:12:45,360
okay it's not working

00:12:49,920 --> 00:12:55,409
let's see what happens

00:12:52,190 --> 00:12:55,409
[Music]

00:12:57,200 --> 00:13:00,560
he must names

00:13:00,639 --> 00:13:02,959
okay

00:13:04,639 --> 00:13:11,040
so t mask is a way to

00:13:07,839 --> 00:13:14,639
execute code and create an error

00:13:11,040 --> 00:13:14,959
if the value is nil the value here must

00:13:14,639 --> 00:13:18,880
be

00:13:14,959 --> 00:13:21,839
in non-nail challenge so it's

00:13:18,880 --> 00:13:21,839
three

00:13:22,000 --> 00:13:29,040
so if we have a method let's say f

00:13:25,200 --> 00:13:33,920
uh say something

00:13:29,040 --> 00:13:33,920
and we have name

00:13:33,960 --> 00:13:37,059
[Music]

00:13:47,199 --> 00:13:49,839
h

00:13:51,680 --> 00:13:58,000
and we want to print put

00:13:54,959 --> 00:14:03,839
user is

00:13:58,000 --> 00:14:03,839
yes say something

00:14:04,000 --> 00:14:08,160
then it will show an error because h is

00:14:06,880 --> 00:14:11,360
nil

00:14:08,160 --> 00:14:14,639
and one of the things i like about

00:14:11,360 --> 00:14:15,519
sorbet that it removes the need for you

00:14:14,639 --> 00:14:18,320
to raise

00:14:15,519 --> 00:14:19,360
argument error which you might have done

00:14:18,320 --> 00:14:23,279
many times before

00:14:19,360 --> 00:14:23,279
so for example death

00:14:23,519 --> 00:14:29,600
add user id to

00:14:26,639 --> 00:14:29,600
let's say a project

00:14:42,839 --> 00:14:47,760
h

00:14:45,120 --> 00:14:47,760
project

00:14:50,950 --> 00:14:54,029
[Music]

00:14:55,160 --> 00:14:59,839
is a project

00:15:01,279 --> 00:15:06,240
so if it is a hash

00:15:06,560 --> 00:15:13,419
oh no i missed the question mark

00:15:10,330 --> 00:15:13,419
[Music]

00:15:24,720 --> 00:15:29,199
yeah this is what we usually do i

00:15:27,839 --> 00:15:33,120
usually do

00:15:29,199 --> 00:15:36,560
and if we start there instead

00:15:33,120 --> 00:15:41,839
uh let's create a class

00:15:36,560 --> 00:15:41,839
uh oh actually

00:15:46,240 --> 00:15:52,959
requiring the run time in the

00:15:49,759 --> 00:15:56,000
top level the route uh

00:15:52,959 --> 00:15:59,600
yeah sorry i'm done

00:15:56,000 --> 00:16:02,720
so we need to um

00:15:59,600 --> 00:16:04,720
declare the types for methods when the

00:16:02,720 --> 00:16:08,639
methods are sitting within the class or

00:16:04,720 --> 00:16:11,440
model we cannot do that in top level

00:16:08,639 --> 00:16:11,440
at the moment

00:16:11,839 --> 00:16:15,759
so class

00:16:17,040 --> 00:16:23,839
let's call it food

00:16:34,839 --> 00:16:40,959
strength

00:16:37,199 --> 00:16:51,440
yeah order

00:16:40,959 --> 00:16:54,489
hit name

00:16:51,440 --> 00:16:54,489
[Music]

00:17:02,110 --> 00:17:18,480
[Music]

00:17:03,440 --> 00:17:22,079
the curly brackets

00:17:18,480 --> 00:17:33,840
it's not here oh i forgot to extend the

00:17:22,079 --> 00:17:33,840
d6 okay

00:17:37,600 --> 00:17:46,240
now all the food

00:17:40,960 --> 00:17:49,919
with the pasta in let's say burgers

00:17:46,240 --> 00:17:53,360
oh what's this name

00:17:49,919 --> 00:17:56,160
string return string type

00:17:53,360 --> 00:17:56,160
nail class

00:17:58,480 --> 00:18:03,200
oh this is because we are

00:18:03,520 --> 00:18:07,760
using inputs and when we use put it will

00:18:06,720 --> 00:18:11,440
be considered as

00:18:07,760 --> 00:18:15,840
for it so what we need to do is

00:18:11,440 --> 00:18:15,840
replay it again

00:18:19,850 --> 00:18:23,010
[Music]

00:18:24,240 --> 00:18:28,320
so if it's not returning anything from

00:18:27,360 --> 00:18:30,160
the function

00:18:28,320 --> 00:18:31,760
we have to use point we cannot use

00:18:30,160 --> 00:18:35,200
pretend it's a

00:18:31,760 --> 00:18:40,799
uh design requirement

00:18:35,200 --> 00:18:40,799
it is one of the uh design decisions in

00:18:40,840 --> 00:18:43,840
survey

00:18:54,840 --> 00:18:57,840
or

00:19:09,440 --> 00:19:14,000
so what happens if we pass instead a

00:19:12,310 --> 00:19:16,960
[Music]

00:19:14,000 --> 00:19:17,760
cache and it will try an error so just

00:19:16,960 --> 00:19:21,520
like the first

00:19:17,760 --> 00:19:24,880
example here oh it's no longer here

00:19:21,520 --> 00:19:26,160
it's gone so instead of using the red

00:19:24,880 --> 00:19:29,280
argument error to

00:19:26,160 --> 00:19:33,440
check whether the argument given to

00:19:29,280 --> 00:19:36,880
a method is a valid data type

00:19:33,440 --> 00:19:39,840
like hat or a string we could use

00:19:36,880 --> 00:19:39,840
signatures

00:19:40,400 --> 00:19:45,679
access it type check so no more red

00:19:43,440 --> 00:19:48,799
document arrays required

00:19:45,679 --> 00:19:53,840
and i believe that all

00:19:48,799 --> 00:19:53,840
i have to do yeah

00:19:54,799 --> 00:19:57,440
all right

00:19:58,960 --> 00:20:04,640
i i saw your demo slides going

00:20:02,799 --> 00:20:06,559
out and i thought you were continuing

00:20:04,640 --> 00:20:08,559
your presentation again but you aren't

00:20:06,559 --> 00:20:09,760
so let's see if we have any questions

00:20:08,559 --> 00:20:11,679
from the audience

00:20:09,760 --> 00:20:12,799
um one second i'll i'll get my book

00:20:11,679 --> 00:20:16,240
because i made my

00:20:12,799 --> 00:20:19,679
one second yes again um

00:20:16,240 --> 00:20:22,240
so only asked um well uh

00:20:19,679 --> 00:20:24,720
we'd like to do auto-complete uh nvs

00:20:22,240 --> 00:20:26,240
codes based on uh survey type signatures

00:20:24,720 --> 00:20:28,000
and there was a reaction by someone else

00:20:26,240 --> 00:20:29,520
while there because there's no um

00:20:28,000 --> 00:20:31,120
there's no official extension

00:20:29,520 --> 00:20:33,440
there camera reaction that there is a

00:20:31,120 --> 00:20:35,760
third party uh extension

00:20:33,440 --> 00:20:36,559
a third parties to a tool called sorbet

00:20:35,760 --> 00:20:38,400
lsp

00:20:36,559 --> 00:20:40,559
is that what you're using in uh visual

00:20:38,400 --> 00:20:44,400
studio code ali

00:20:40,559 --> 00:20:47,600
uh i'll try something absorb a lsp but

00:20:44,400 --> 00:20:48,559
it couldn't work or something it kept

00:20:47,600 --> 00:20:51,280
crashing

00:20:48,559 --> 00:20:52,960
even though i followed the instructions

00:20:51,280 --> 00:20:56,960
um

00:20:52,960 --> 00:21:00,559
and at the moment they uh strike our

00:20:56,960 --> 00:21:01,260
team over there they are using

00:21:00,559 --> 00:21:04,299
a

00:21:01,260 --> 00:21:04,299
[Music]

00:21:14,960 --> 00:21:22,880
uh yeah okay

00:21:19,120 --> 00:21:23,280
um another i had who said in your talk

00:21:22,880 --> 00:21:24,720
that you

00:21:23,280 --> 00:21:27,280
well that you're sorry that you're not

00:21:24,720 --> 00:21:29,760
using in a production environment yet

00:21:27,280 --> 00:21:30,960
you have no code with that you did

00:21:29,760 --> 00:21:34,159
running production

00:21:30,960 --> 00:21:36,559
is that correct correct

00:21:34,159 --> 00:21:38,400
so what would be a project that you

00:21:36,559 --> 00:21:42,080
would really look forward to

00:21:38,400 --> 00:21:45,679
to get in production

00:21:42,080 --> 00:21:49,200
that survey type checks

00:21:45,679 --> 00:21:54,159
in production projects are booked on

00:21:49,200 --> 00:21:56,720
or anything

00:21:54,159 --> 00:21:57,280
well what what are you working on that

00:21:56,720 --> 00:21:59,840
you would be

00:21:57,280 --> 00:22:00,400
really happy to have x for and put in

00:21:59,840 --> 00:22:03,760
production

00:22:00,400 --> 00:22:07,280
um i'm working on the uh

00:22:03,760 --> 00:22:11,280
background for a uh an app that

00:22:07,280 --> 00:22:13,280
has big armor and all that so

00:22:11,280 --> 00:22:15,280
having type text would certainly come in

00:22:13,280 --> 00:22:17,760
handy in certain parts of the codebase

00:22:15,280 --> 00:22:17,760
features

00:22:18,480 --> 00:22:24,159
especially the payroll module and i feel

00:22:22,080 --> 00:22:26,799
that having type checks for

00:22:24,159 --> 00:22:29,280
such a module that is complicated like

00:22:26,799 --> 00:22:29,280
airports

00:22:30,720 --> 00:22:32,960
okay

00:22:34,240 --> 00:22:38,799
and then i have another question because

00:22:36,960 --> 00:22:40,000
well

00:22:38,799 --> 00:22:42,480
clearly we can write our own

00:22:40,000 --> 00:22:44,080
documentation we can even write

00:22:42,480 --> 00:22:45,120
well tests because well that's what

00:22:44,080 --> 00:22:46,400
they're there for so you know how your

00:22:45,120 --> 00:22:48,799
code works but

00:22:46,400 --> 00:22:55,840
how do you see a possibility to generate

00:22:48,799 --> 00:23:00,000
your documentation from your typings

00:22:55,840 --> 00:23:04,320
i've not explored that um

00:23:00,000 --> 00:23:07,200
i've seen uh yard documentation

00:23:04,320 --> 00:23:08,960
being mentioned in one of the community

00:23:07,200 --> 00:23:10,960
pages on survey

00:23:08,960 --> 00:23:12,559
but i have not explored i've not

00:23:10,960 --> 00:23:16,320
explored creating

00:23:12,559 --> 00:23:21,360
uh tests or documentation from

00:23:16,320 --> 00:23:23,760
i've checked with them uh on saturday uh

00:23:21,360 --> 00:23:26,159
okay we are plugging into parts of the

00:23:23,760 --> 00:23:26,159
signatures

00:23:31,760 --> 00:23:36,400
okay well um i'd like to thank you for

00:23:33,919 --> 00:23:39,039
your time for your presentation

00:23:36,400 --> 00:23:39,840
um and i'm very happy with what you told

00:23:39,039 --> 00:23:42,799
us how you

00:23:39,840 --> 00:23:43,360
revealed it uh to us that was very

00:23:42,799 --> 00:23:45,360
helpful

00:23:43,360 --> 00:23:46,960
uh something i am looking forward to uh

00:23:45,360 --> 00:23:47,360
survey something i'm looking forward to

00:23:46,960 --> 00:23:51,279
to

00:23:47,360 --> 00:23:54,799
using my uh well own systems

00:23:51,279 --> 00:23:54,799

YouTube URL: https://www.youtube.com/watch?v=tsxip-zexJY


