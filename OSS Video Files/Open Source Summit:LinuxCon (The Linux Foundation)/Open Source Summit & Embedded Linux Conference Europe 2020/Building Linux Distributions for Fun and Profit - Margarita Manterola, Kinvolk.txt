Title: Building Linux Distributions for Fun and Profit - Margarita Manterola, Kinvolk
Publication date: 2020-11-13
Playlist: Open Source Summit & Embedded Linux Conference Europe 2020
Description: 
	Building Linux Distributions for Fun and Profit - Margarita Manterola, Kinvolk
Captions: 
	00:00:06,879 --> 00:00:09,840
hello there

00:00:08,000 --> 00:00:11,920
i'm delighted to be giving this talk at

00:00:09,840 --> 00:00:13,759
the open source summit today

00:00:11,920 --> 00:00:15,759
i will be sharing my experience on

00:00:13,759 --> 00:00:16,240
building linux distributions and i will

00:00:15,759 --> 00:00:18,480
discuss

00:00:16,240 --> 00:00:20,240
a little bit about the future of linux

00:00:18,480 --> 00:00:22,160
as the os

00:00:20,240 --> 00:00:24,160
before jumping into the contents of the

00:00:22,160 --> 00:00:26,160
talk let me introduce myself

00:00:24,160 --> 00:00:28,240
my name is margaret monterella i'm a

00:00:26,160 --> 00:00:30,400
long time open source developer

00:00:28,240 --> 00:00:32,640
i work at kinfolk a startup company

00:00:30,400 --> 00:00:35,040
based in berlin that focuses on linux

00:00:32,640 --> 00:00:36,719
and kubernetes

00:00:35,040 --> 00:00:38,719
this talk is a collection of my

00:00:36,719 --> 00:00:40,399
experiences working with linux over the

00:00:38,719 --> 00:00:42,239
past 20 years

00:00:40,399 --> 00:00:44,000
it's been an interesting and exciting

00:00:42,239 --> 00:00:47,120
journey and i'm thrilled to be sharing

00:00:44,000 --> 00:00:49,360
it with you today i will first tell you

00:00:47,120 --> 00:00:51,440
about how my career with linux developed

00:00:49,360 --> 00:00:53,600
working at small and big companies as

00:00:51,440 --> 00:00:54,640
well as being a deviant developer for 15

00:00:53,600 --> 00:00:57,039
years

00:00:54,640 --> 00:00:59,840
then i will try to summarize the lessons

00:00:57,039 --> 00:01:02,160
i've learned throughout this time

00:00:59,840 --> 00:01:03,680
these are my experiences and my opinions

00:01:02,160 --> 00:01:04,960
but i'm sharing them with you

00:01:03,680 --> 00:01:06,880
hoping that you will find them

00:01:04,960 --> 00:01:08,400
interesting and perhaps learn something

00:01:06,880 --> 00:01:10,880
new

00:01:08,400 --> 00:01:12,880
so let's start at the beginning i grew

00:01:10,880 --> 00:01:14,880
up in buenos aires argentina where i

00:01:12,880 --> 00:01:16,960
studied electronic engineering

00:01:14,880 --> 00:01:18,799
but i never really worked in electronics

00:01:16,960 --> 00:01:21,280
i've always worked in i.t

00:01:18,799 --> 00:01:22,159
my very first job was as an i.t support

00:01:21,280 --> 00:01:24,479
technician

00:01:22,159 --> 00:01:26,479
i then move on to software engineering

00:01:24,479 --> 00:01:29,280
system administration and eventually

00:01:26,479 --> 00:01:31,520
site reliability engineering

00:01:29,280 --> 00:01:33,280
i installed my first linux distro back

00:01:31,520 --> 00:01:35,680
in the year 2000

00:01:33,280 --> 00:01:37,360
this was a mandrake installation a linux

00:01:35,680 --> 00:01:38,560
distribution that hasn't existed for a

00:01:37,360 --> 00:01:40,640
long time

00:01:38,560 --> 00:01:42,399
a couple of months later i replaced it

00:01:40,640 --> 00:01:45,200
with deviant potato

00:01:42,399 --> 00:01:47,119
and i've stuck with debian since then

00:01:45,200 --> 00:01:48,880
while at university i was quite

00:01:47,119 --> 00:01:51,200
actively involved in the local linux

00:01:48,880 --> 00:01:53,280
user group working with this group

00:01:51,200 --> 00:01:55,439
i delivered a bunch of linux courses

00:01:53,280 --> 00:01:56,799
helped organize a few conferences and

00:01:55,439 --> 00:01:58,799
tried to expand the use of

00:01:56,799 --> 00:02:00,960
open source software throughout our

00:01:58,799 --> 00:02:03,439
university classes

00:02:00,960 --> 00:02:05,040
we love it for professors to not require

00:02:03,439 --> 00:02:06,000
proprietary software for their

00:02:05,040 --> 00:02:08,239
coursework

00:02:06,000 --> 00:02:11,280
and rather allow students to use open

00:02:08,239 --> 00:02:14,160
source alternatives when they existed

00:02:11,280 --> 00:02:15,280
this sounds kind of obvious today but 20

00:02:14,160 --> 00:02:17,200
years ago

00:02:15,280 --> 00:02:19,440
most teachers were skeptical about the

00:02:17,200 --> 00:02:21,360
whole idea of open source software

00:02:19,440 --> 00:02:23,520
they didn't expect the tools to be good

00:02:21,360 --> 00:02:25,760
enough to use in their classes

00:02:23,520 --> 00:02:27,520
still little by little we managed to

00:02:25,760 --> 00:02:30,080
convince more and more people that this

00:02:27,520 --> 00:02:32,640
was a viable alternative

00:02:30,080 --> 00:02:34,959
for a couple of years i worked as a java

00:02:32,640 --> 00:02:37,519
developer at a consulting company

00:02:34,959 --> 00:02:38,800
i was already running linux on all my

00:02:37,519 --> 00:02:40,959
home computers so

00:02:38,800 --> 00:02:43,360
after a while i managed to convince my

00:02:40,959 --> 00:02:44,480
boss to also let me run linux on my

00:02:43,360 --> 00:02:46,400
workstation

00:02:44,480 --> 00:02:48,840
but i was still working mostly with

00:02:46,400 --> 00:02:50,160
proprietary software and this made me

00:02:48,840 --> 00:02:53,120
unhappy

00:02:50,160 --> 00:02:56,000
so in 2003 i quit the show and joined

00:02:53,120 --> 00:02:58,879
the it department at my family's company

00:02:56,000 --> 00:03:01,040
this was my first job doing linux at

00:02:58,879 --> 00:03:02,720
this company we were deploying linux

00:03:01,040 --> 00:03:05,599
installations to all users

00:03:02,720 --> 00:03:08,000
replacing legacy proprietary software

00:03:05,599 --> 00:03:10,560
with open source software

00:03:08,000 --> 00:03:12,800
our budget was pretty tight so we had to

00:03:10,560 --> 00:03:14,640
make sure we spent as little as possible

00:03:12,800 --> 00:03:16,480
on new hardware

00:03:14,640 --> 00:03:18,400
the computers we deployed on the network

00:03:16,480 --> 00:03:20,800
were mostly thin clients

00:03:18,400 --> 00:03:21,519
these were old use machines that would

00:03:20,800 --> 00:03:24,239
be considered

00:03:21,519 --> 00:03:25,920
useless by most people but we gave them

00:03:24,239 --> 00:03:28,080
a new life by running a

00:03:25,920 --> 00:03:29,200
very small linux image on them that

00:03:28,080 --> 00:03:31,680
would just control

00:03:29,200 --> 00:03:33,920
mouse keyboard video and network and run

00:03:31,680 --> 00:03:36,080
a local x server

00:03:33,920 --> 00:03:37,760
this x server then connected to another

00:03:36,080 --> 00:03:40,480
machine where all the x client

00:03:37,760 --> 00:03:42,640
applications were actually running

00:03:40,480 --> 00:03:44,959
that way we needed one powerful machine

00:03:42,640 --> 00:03:46,879
per ten or thousand clients

00:03:44,959 --> 00:03:48,480
this allowed us to deploy computers to

00:03:46,879 --> 00:03:50,720
many more users that would have been

00:03:48,480 --> 00:03:52,400
possible with standalone workstations on

00:03:50,720 --> 00:03:54,319
our tight budget

00:03:52,400 --> 00:03:58,080
and we were able to quickly expand our

00:03:54,319 --> 00:03:59,519
deployment to more and more machines

00:03:58,080 --> 00:04:01,040
some of the people that were getting

00:03:59,519 --> 00:04:03,360
these thin clients hadn't had a

00:04:01,040 --> 00:04:05,840
workstation assigned to them before

00:04:03,360 --> 00:04:06,879
in fact i recall one person telling me

00:04:05,840 --> 00:04:08,959
with pride

00:04:06,879 --> 00:04:10,319
that they had never used a computer

00:04:08,959 --> 00:04:13,200
before like

00:04:10,319 --> 00:04:14,000
at all the upside of that was that

00:04:13,200 --> 00:04:16,239
people didn't care

00:04:14,000 --> 00:04:18,000
about linux or windows we taught them

00:04:16,239 --> 00:04:18,479
how to use the system to do what they

00:04:18,000 --> 00:04:21,359
needed

00:04:18,479 --> 00:04:23,199
and that was it the downside was that

00:04:21,359 --> 00:04:25,440
when something went wrong the reports

00:04:23,199 --> 00:04:27,600
were usually not very helpful

00:04:25,440 --> 00:04:29,840
one typical complaint was it doesn't

00:04:27,600 --> 00:04:32,240
give me access

00:04:29,840 --> 00:04:34,160
this expression could mean anything

00:04:32,240 --> 00:04:35,040
maybe the keyboard or mouse weren't

00:04:34,160 --> 00:04:36,880
working

00:04:35,040 --> 00:04:39,120
maybe the network was down and so the

00:04:36,880 --> 00:04:41,199
connection to the x client had failed

00:04:39,120 --> 00:04:42,880
maybe the login screen told them that

00:04:41,199 --> 00:04:46,240
the password was wrong

00:04:42,880 --> 00:04:47,680
really it could be anything anyway we

00:04:46,240 --> 00:04:49,919
kept deploying more and more thin

00:04:47,680 --> 00:04:51,520
clients and some standalone workstations

00:04:49,919 --> 00:04:54,479
as well when the users needed

00:04:51,520 --> 00:04:56,800
some dedicated processing power after a

00:04:54,479 --> 00:04:59,919
few years of this we had deployed

00:04:56,800 --> 00:05:01,600
some 350 computers and at the time this

00:04:59,919 --> 00:05:03,919
felt like a lot to me

00:05:01,600 --> 00:05:06,720
i was really proud of how i was adding

00:05:03,919 --> 00:05:08,960
more linux users to the world

00:05:06,720 --> 00:05:10,720
i didn't feel like we had our own debian

00:05:08,960 --> 00:05:14,000
distribution we were just using

00:05:10,720 --> 00:05:16,080
debian but looking back we had basically

00:05:14,000 --> 00:05:19,680
all the traits of a debian derivative

00:05:16,080 --> 00:05:21,600
except for a cool name we had our own

00:05:19,680 --> 00:05:23,120
internal repo where we kept additional

00:05:21,600 --> 00:05:25,120
packages that we needed

00:05:23,120 --> 00:05:27,600
this could be packages that were not yet

00:05:25,120 --> 00:05:29,199
in deviant or four packages with special

00:05:27,600 --> 00:05:30,960
patches applied to them

00:05:29,199 --> 00:05:33,120
or packages that we had developed

00:05:30,960 --> 00:05:34,800
specifically for our needs

00:05:33,120 --> 00:05:36,720
we also maintained the configuration of

00:05:34,800 --> 00:05:39,600
the machines in the fleet using puppet

00:05:36,720 --> 00:05:41,039
keeping our customizations in stink so

00:05:39,600 --> 00:05:43,120
yeah i think we basically were

00:05:41,039 --> 00:05:44,880
maintaining a derivative but it's a bit

00:05:43,120 --> 00:05:46,639
of a philosophical question

00:05:44,880 --> 00:05:48,560
where does the customized deployment of

00:05:46,639 --> 00:05:50,400
debian end and a debian derivative

00:05:48,560 --> 00:05:52,320
distribution begin

00:05:50,400 --> 00:05:54,639
anyway not really the subject of this

00:05:52,320 --> 00:05:56,479
talk so let's move on

00:05:54,639 --> 00:05:58,800
i mentioned deviant a few times i

00:05:56,479 --> 00:06:00,639
already said that i'm a debian developer

00:05:58,800 --> 00:06:03,199
so you can imagine deviant has played an

00:06:00,639 --> 00:06:05,440
important role in my journey

00:06:03,199 --> 00:06:07,199
as i called out earlier my first steps

00:06:05,440 --> 00:06:08,319
with deviant were at the end of the year

00:06:07,199 --> 00:06:10,479
00:06:08,319 --> 00:06:12,319
and as the years passed i became more

00:06:10,479 --> 00:06:15,440
involved with the distro

00:06:12,319 --> 00:06:16,400
by 2003 i consider myself a debian back

00:06:15,440 --> 00:06:18,880
reporter

00:06:16,400 --> 00:06:20,560
i took great pride in creating good back

00:06:18,880 --> 00:06:21,440
reports with clear reproduction

00:06:20,560 --> 00:06:25,039
instructions

00:06:21,440 --> 00:06:26,319
log etc and for a while that was enough

00:06:25,039 --> 00:06:28,800
for me

00:06:26,319 --> 00:06:30,960
but this changed in 2004 when i attended

00:06:28,800 --> 00:06:32,960
the debian conference in brazil

00:06:30,960 --> 00:06:34,800
up until this devcon4 i considered

00:06:32,960 --> 00:06:36,080
deviant developers to be some sort of

00:06:34,800 --> 00:06:39,039
elite geeks

00:06:36,080 --> 00:06:40,240
that were kind of super human completely

00:06:39,039 --> 00:06:42,160
out of my league

00:06:40,240 --> 00:06:44,160
i felt that maintaining packages was

00:06:42,160 --> 00:06:46,560
such a difficult and complicated task

00:06:44,160 --> 00:06:48,800
that i wouldn't be able to do it

00:06:46,560 --> 00:06:50,960
i was already sending patches to bugs

00:06:48,800 --> 00:06:53,599
but i felt that that was the maximum

00:06:50,960 --> 00:06:55,199
of what i could do for debian but then i

00:06:53,599 --> 00:06:57,520
met all these awesome people

00:06:55,199 --> 00:06:59,520
they made me feel welcome they valued my

00:06:57,520 --> 00:07:00,960
input they explained how things were not

00:06:59,520 --> 00:07:03,520
so complicated

00:07:00,960 --> 00:07:04,240
they became my friends and so when i

00:07:03,520 --> 00:07:06,240
came home

00:07:04,240 --> 00:07:08,080
i was a different person i wanted to

00:07:06,240 --> 00:07:10,319
become a deviant developer and i no

00:07:08,080 --> 00:07:13,440
longer thought that maintaining packages

00:07:10,319 --> 00:07:15,280
was reserved for elite hackers

00:07:13,440 --> 00:07:17,120
so a few months later i started

00:07:15,280 --> 00:07:18,880
maintaining my first deviant package

00:07:17,120 --> 00:07:20,800
and the following year i officially

00:07:18,880 --> 00:07:22,880
became a debian developer

00:07:20,800 --> 00:07:25,280
i didn't do this on my own of course i

00:07:22,880 --> 00:07:27,360
had the help of the deviant community

00:07:25,280 --> 00:07:29,360
that welcomed me and encouraged me to

00:07:27,360 --> 00:07:31,360
keep learning keep growing

00:07:29,360 --> 00:07:33,520
once i was a little bit more subtle i

00:07:31,360 --> 00:07:36,160
helped others get started as well which

00:07:33,520 --> 00:07:38,160
was also very satisfying

00:07:36,160 --> 00:07:39,840
throughout the years i've done a lot of

00:07:38,160 --> 00:07:41,440
different things for debian not just

00:07:39,840 --> 00:07:44,000
maintaining packages

00:07:41,440 --> 00:07:46,000
i particularly enjoy fixing bugs so for

00:07:44,000 --> 00:07:47,039
a while i spent a significant amount of

00:07:46,000 --> 00:07:49,199
my free time

00:07:47,039 --> 00:07:51,199
fixing release critical bugs on other

00:07:49,199 --> 00:07:54,080
people's packages

00:07:51,199 --> 00:07:56,400
i also helped organize a few devcomps in

00:07:54,080 --> 00:07:57,039
particular i was part of the main orga

00:07:56,400 --> 00:07:59,919
team for

00:07:57,039 --> 00:08:01,199
devconf8 in argentina and webcom15 in

00:07:59,919 --> 00:08:03,039
germany

00:08:01,199 --> 00:08:05,039
i'm currently the chair of the deviant

00:08:03,039 --> 00:08:07,280
technical committee the body that helps

00:08:05,039 --> 00:08:10,560
resolve conflicts among developers when

00:08:07,280 --> 00:08:12,800
they can't agree on their own

00:08:10,560 --> 00:08:14,639
sometimes i think back to those days

00:08:12,800 --> 00:08:17,280
back at my first depth conf

00:08:14,639 --> 00:08:19,199
when i felt like the only human among

00:08:17,280 --> 00:08:22,400
among a bunch of superheroes and it's

00:08:19,199 --> 00:08:25,440
pretty amazing how my journey has been

00:08:22,400 --> 00:08:26,000
anyway back to my professional life i

00:08:25,440 --> 00:08:29,120
worked at my

00:08:26,000 --> 00:08:31,280
family's company in argentina until 2012

00:08:29,120 --> 00:08:33,039
when i moved to munich to work for the

00:08:31,280 --> 00:08:35,519
team that maintains the internal linux

00:08:33,039 --> 00:08:37,919
distribution used at google

00:08:35,519 --> 00:08:40,640
there's actually more than one internal

00:08:37,919 --> 00:08:42,719
linux distribution at google my team was

00:08:40,640 --> 00:08:45,120
in charge of the one used by humans in

00:08:42,719 --> 00:08:46,320
their workstations not by containers

00:08:45,120 --> 00:08:49,839
running in servers

00:08:46,320 --> 00:08:51,120
in data center obviously moving to

00:08:49,839 --> 00:08:54,080
google was a huge

00:08:51,120 --> 00:08:56,000
change one thing that was very different

00:08:54,080 --> 00:08:57,040
was that the new hardware was not an

00:08:56,000 --> 00:08:58,880
issue

00:08:57,040 --> 00:09:00,320
all our linux users got beefy

00:08:58,880 --> 00:09:02,480
workstations

00:09:00,320 --> 00:09:03,600
and they could even refresh them after a

00:09:02,480 --> 00:09:05,680
few years

00:09:03,600 --> 00:09:08,560
even if they were working fine just

00:09:05,680 --> 00:09:12,000
because the hardware was old it took me

00:09:08,560 --> 00:09:13,920
a while to get over the shock from this

00:09:12,000 --> 00:09:15,279
to be fair lots of googlers are

00:09:13,920 --> 00:09:17,040
conscious about waste

00:09:15,279 --> 00:09:18,720
and won't really upgrade their hardware

00:09:17,040 --> 00:09:20,800
until they actually need it

00:09:18,720 --> 00:09:22,000
but still the fact that people could

00:09:20,800 --> 00:09:24,000
replace a perfectly

00:09:22,000 --> 00:09:25,440
working machine just because it was a

00:09:24,000 --> 00:09:29,360
few years old

00:09:25,440 --> 00:09:31,440
it was bonkers to me more mind-blowing

00:09:29,360 --> 00:09:33,440
was the size difference

00:09:31,440 --> 00:09:35,920
in my previous show we started with a

00:09:33,440 --> 00:09:38,720
team of two people which had grown up to

00:09:35,920 --> 00:09:40,399
five of us by the time i left

00:09:38,720 --> 00:09:44,480
and as i said we were in charge of

00:09:40,399 --> 00:09:46,959
something like 300 to 350 computers

00:09:44,480 --> 00:09:48,320
so we had less than 100 computers per

00:09:46,959 --> 00:09:50,800
team member

00:09:48,320 --> 00:09:52,959
after nine years working there i knew

00:09:50,800 --> 00:09:55,839
all these computers by name

00:09:52,959 --> 00:09:57,920
i knew who used which host which type of

00:09:55,839 --> 00:10:00,000
keyboard was connected to it

00:09:57,920 --> 00:10:01,120
if the mouse had had issues in the past

00:10:00,000 --> 00:10:03,120
few months

00:10:01,120 --> 00:10:04,240
and i even knew the internal ip

00:10:03,120 --> 00:10:08,560
addresses of

00:10:04,240 --> 00:10:10,399
most of them at google my team of 12

00:10:08,560 --> 00:10:12,240
people was in charge of tens of

00:10:10,399 --> 00:10:14,480
thousands of computers

00:10:12,240 --> 00:10:16,880
and while the team grew a bit over time

00:10:14,480 --> 00:10:18,480
the amount of hosts in our fleet grew a

00:10:16,880 --> 00:10:21,040
lot faster

00:10:18,480 --> 00:10:23,279
at any point in time we had more than 5

00:10:21,040 --> 00:10:24,320
000 computers per team member to care

00:10:23,279 --> 00:10:26,079
for

00:10:24,320 --> 00:10:28,320
this meant that it was no longer

00:10:26,079 --> 00:10:30,399
possible to know the hosts by name

00:10:28,320 --> 00:10:32,640
and more importantly that everything

00:10:30,399 --> 00:10:34,560
needed to be automated

00:10:32,640 --> 00:10:36,000
not just the obvious like managing

00:10:34,560 --> 00:10:38,000
configuration with puppet

00:10:36,000 --> 00:10:39,360
and automatically upgrading packages to

00:10:38,000 --> 00:10:41,839
their latest version

00:10:39,360 --> 00:10:43,360
but also other things like automatically

00:10:41,839 --> 00:10:45,680
checking the health of the machines and

00:10:43,360 --> 00:10:47,920
reporting back when there were problems

00:10:45,680 --> 00:10:49,760
or automatically creating backups for

00:10:47,920 --> 00:10:52,560
our users and giving them tools to

00:10:49,760 --> 00:10:54,640
restore data when they needed it

00:10:52,560 --> 00:10:56,720
as our team couldn't possibly deal with

00:10:54,640 --> 00:10:58,399
all incoming user requests

00:10:56,720 --> 00:11:00,800
we provided a bunch of tools and

00:10:58,399 --> 00:11:02,240
documentation to help users deal with

00:11:00,800 --> 00:11:04,959
issues themselves

00:11:02,240 --> 00:11:06,880
without the need to contact us including

00:11:04,959 --> 00:11:08,079
being able to reinstall their computer

00:11:06,880 --> 00:11:12,000
without having to fill

00:11:08,079 --> 00:11:14,640
a single prompt some of this automation

00:11:12,000 --> 00:11:17,680
was already in place before i arrived

00:11:14,640 --> 00:11:19,760
some of it i helped build myself part of

00:11:17,680 --> 00:11:21,680
what my team did was keep on top of

00:11:19,760 --> 00:11:24,959
developing new automation tools

00:11:21,680 --> 00:11:27,040
as needed and of course automation is

00:11:24,959 --> 00:11:28,000
not enough if it's not complemented with

00:11:27,040 --> 00:11:30,800
robust and thorough

00:11:28,000 --> 00:11:33,200
testing in my team we had developed a

00:11:30,800 --> 00:11:35,279
pretty thorough test suit that verified

00:11:33,200 --> 00:11:36,640
that a lot of different use cases worked

00:11:35,279 --> 00:11:38,480
as expected

00:11:36,640 --> 00:11:40,399
this allowed us to push changes to the

00:11:38,480 --> 00:11:41,839
fleet on a weekly cadence without

00:11:40,399 --> 00:11:44,320
panicking that we would break

00:11:41,839 --> 00:11:44,320
everything

00:11:46,560 --> 00:11:50,639
of course not all of the possible

00:11:48,560 --> 00:11:52,480
problems were caught by our tests

00:11:50,639 --> 00:11:54,720
but whenever a bag slipped through we

00:11:52,480 --> 00:11:57,120
would make sure we added any necessary

00:11:54,720 --> 00:12:00,480
test cases do not let this happen again

00:11:57,120 --> 00:12:02,240
in the future at google there are a lot

00:12:00,480 --> 00:12:03,200
of teams maintaining different parts of

00:12:02,240 --> 00:12:05,360
the stack

00:12:03,200 --> 00:12:07,120
as i've said my team was in charge of

00:12:05,360 --> 00:12:08,880
the linux platform

00:12:07,120 --> 00:12:11,279
but there were a lot of other teams

00:12:08,880 --> 00:12:13,680
providing software on that platform

00:12:11,279 --> 00:12:15,680
and an important part of what we did was

00:12:13,680 --> 00:12:17,760
enabling them to do that

00:12:15,680 --> 00:12:20,000
this meant that some changes need to be

00:12:17,760 --> 00:12:23,040
coordinated across many different people

00:12:20,000 --> 00:12:25,279
across many different time zones

00:12:23,040 --> 00:12:26,399
i'll admit this could sometimes be quite

00:12:25,279 --> 00:12:28,880
challenging

00:12:26,399 --> 00:12:29,680
finding agreement across stakeholders is

00:12:28,880 --> 00:12:32,320
not always

00:12:29,680 --> 00:12:35,040
easy but what helped was remembering

00:12:32,320 --> 00:12:36,839
that everyone was a capable engineer

00:12:35,040 --> 00:12:38,480
looking to find the best possible

00:12:36,839 --> 00:12:40,240
solution

00:12:38,480 --> 00:12:41,920
one difference that i really enjoyed

00:12:40,240 --> 00:12:44,880
compared to my previous job

00:12:41,920 --> 00:12:46,240
was that our users were technical people

00:12:44,880 --> 00:12:49,440
many of them were also

00:12:46,240 --> 00:12:51,600
using linux at home this meant that back

00:12:49,440 --> 00:12:53,839
reports were usually pretty good

00:12:51,600 --> 00:12:54,800
including good reproduction cases and

00:12:53,839 --> 00:12:58,480
sometimes even

00:12:54,800 --> 00:12:58,480
a patch to fix the issue at hand

00:12:59,200 --> 00:13:02,399
no more it doesn't give me access but

00:13:01,360 --> 00:13:05,839
rather good

00:13:02,399 --> 00:13:06,639
technical reports this could sometimes

00:13:05,839 --> 00:13:08,720
backfire

00:13:06,639 --> 00:13:10,399
like say someone wanting us to change

00:13:08,720 --> 00:13:12,160
the global settings to match their

00:13:10,399 --> 00:13:14,079
personal preferences

00:13:12,160 --> 00:13:15,760
but most of our users actually

00:13:14,079 --> 00:13:17,519
understood the challenges of building a

00:13:15,760 --> 00:13:19,440
distribution that would need to satisfy

00:13:17,519 --> 00:13:22,639
the needs of tens of thousands

00:13:19,440 --> 00:13:24,560
not just their individual taste putting

00:13:22,639 --> 00:13:26,800
aside these differences there were many

00:13:24,560 --> 00:13:28,639
things that were the same

00:13:26,800 --> 00:13:30,800
when asked what i did before working at

00:13:28,639 --> 00:13:31,440
google i would reply that mostly the

00:13:30,800 --> 00:13:34,800
same

00:13:31,440 --> 00:13:36,880
just at a much much smaller scale

00:13:34,800 --> 00:13:38,880
in both cases we were keeping a report

00:13:36,880 --> 00:13:39,920
of packages on top of what the distro

00:13:38,880 --> 00:13:42,320
provided

00:13:39,920 --> 00:13:43,839
managing the configuration with puppet

00:13:42,320 --> 00:13:45,680
keeping all our changes

00:13:43,839 --> 00:13:48,320
changes and configurations in version

00:13:45,680 --> 00:13:50,880
control with the goal of enabling our

00:13:48,320 --> 00:13:52,800
users to do their jobs

00:13:50,880 --> 00:13:54,480
and all of this using a distribution

00:13:52,800 --> 00:13:58,880
that was based on debian

00:13:54,480 --> 00:13:59,519
well sort of the team i joined in 2012

00:13:58,880 --> 00:14:01,839
was called

00:13:59,519 --> 00:14:03,920
gubuntu it was a linux distribution

00:14:01,839 --> 00:14:06,399
based on ubuntu that followed the

00:14:03,920 --> 00:14:08,320
long-term support releases

00:14:06,399 --> 00:14:09,920
right when i joined my team was going

00:14:08,320 --> 00:14:10,959
through the migration from lucid to

00:14:09,920 --> 00:14:13,120
precise

00:14:10,959 --> 00:14:16,160
a couple of years later i led the

00:14:13,120 --> 00:14:18,399
migration from precise to trustee

00:14:16,160 --> 00:14:20,399
i mentioned our fleet had tens of

00:14:18,399 --> 00:14:22,639
thousands of computers so you might

00:14:20,399 --> 00:14:25,600
imagine how big an effort it was to

00:14:22,639 --> 00:14:27,519
migrate such a large fleet from one lts

00:14:25,600 --> 00:14:29,199
to the next

00:14:27,519 --> 00:14:30,560
through several iterations we had

00:14:29,199 --> 00:14:33,120
developed tools

00:14:30,560 --> 00:14:34,399
to help us with that but even then it

00:14:33,120 --> 00:14:36,880
was painful

00:14:34,399 --> 00:14:38,880
those two-year shams meant that too many

00:14:36,880 --> 00:14:40,800
things had changed in between

00:14:38,880 --> 00:14:42,399
lots and lots of issues needed to be

00:14:40,800 --> 00:14:44,160
fixed before we could get the new

00:14:42,399 --> 00:14:46,240
release out

00:14:44,160 --> 00:14:47,760
we spent so much effort getting the

00:14:46,240 --> 00:14:50,079
fleet updated

00:14:47,760 --> 00:14:51,920
only to have to do the whole thing again

00:14:50,079 --> 00:14:53,920
two years later

00:14:51,920 --> 00:14:55,519
so after going through this painful

00:14:53,920 --> 00:14:57,680
migration twice

00:14:55,519 --> 00:14:59,600
i convinced my teammates and other

00:14:57,680 --> 00:15:00,639
interested parties that we didn't want

00:14:59,600 --> 00:15:04,160
to keep doing that

00:15:00,639 --> 00:15:06,000
anymore instead

00:15:04,160 --> 00:15:08,079
we should switch to a rolling release

00:15:06,000 --> 00:15:10,560
model where packages got updated

00:15:08,079 --> 00:15:11,519
progressively we would no longer have a

00:15:10,560 --> 00:15:13,839
huge jump

00:15:11,519 --> 00:15:14,720
every two years but rather small

00:15:13,839 --> 00:15:17,600
increases

00:15:14,720 --> 00:15:20,560
every week and what better target to

00:15:17,600 --> 00:15:22,560
follow than deviant testing

00:15:20,560 --> 00:15:24,240
well i don't know other people might

00:15:22,560 --> 00:15:26,399
disagree with that last part

00:15:24,240 --> 00:15:27,760
but i convinced the powers that b that

00:15:26,399 --> 00:15:30,399
this was a good idea

00:15:27,760 --> 00:15:33,040
we decided to stop tracking ubuntu lts

00:15:30,399 --> 00:15:36,320
and track deviant testing instead

00:15:33,040 --> 00:15:39,279
so in 2017 we renamed our team

00:15:36,320 --> 00:15:41,680
and our product to g-linux we migrated

00:15:39,279 --> 00:15:42,399
the fleet from ubuntu trustee to what

00:15:41,680 --> 00:15:44,959
was then

00:15:42,399 --> 00:15:45,440
deviant stretch or a kind of stretch

00:15:44,959 --> 00:15:47,519
because

00:15:45,440 --> 00:15:49,279
as we were working on it stretch got

00:15:47,519 --> 00:15:51,600
released as stable

00:15:49,279 --> 00:15:52,720
and testing became faster and we kept

00:15:51,600 --> 00:15:56,480
tracking testing

00:15:52,720 --> 00:15:59,199
as it kept changing and i'm not going to

00:15:56,480 --> 00:16:02,639
lie there was a lot of work involved

00:15:59,199 --> 00:16:04,800
and not all of it was easy or fun but

00:16:02,639 --> 00:16:07,440
in the end when buster got released as

00:16:04,800 --> 00:16:08,000
stable g-linux users at google had

00:16:07,440 --> 00:16:10,480
received the

00:16:08,000 --> 00:16:11,199
updates progressively without having to

00:16:10,480 --> 00:16:14,000
actually do

00:16:11,199 --> 00:16:15,839
any manual action whatsoever just as

00:16:14,000 --> 00:16:17,360
part of the normal weekly release

00:16:15,839 --> 00:16:19,440
process

00:16:17,360 --> 00:16:21,600
all of this was pretty awesome and i

00:16:19,440 --> 00:16:22,079
learned a lot and i grew a lot in the

00:16:21,600 --> 00:16:24,720
almost

00:16:22,079 --> 00:16:27,440
eight years that i worked at google but

00:16:24,720 --> 00:16:29,680
eventually it was time for a change

00:16:27,440 --> 00:16:31,360
so earlier this year i took on a

00:16:29,680 --> 00:16:33,440
position at kinfolk

00:16:31,360 --> 00:16:34,639
as i mentioned kim folk is a startup

00:16:33,440 --> 00:16:36,560
based in berlin

00:16:34,639 --> 00:16:38,480
it's a small company dedicated to

00:16:36,560 --> 00:16:41,120
working with open source software

00:16:38,480 --> 00:16:43,199
with a special focus on linux kubernetes

00:16:41,120 --> 00:16:45,360
and containers

00:16:43,199 --> 00:16:47,040
in my case i've been spending most of my

00:16:45,360 --> 00:16:48,639
time on the development of flatcar

00:16:47,040 --> 00:16:52,160
container linux

00:16:48,639 --> 00:16:54,800
flatcar is a container optimized os

00:16:52,160 --> 00:16:57,120
based on the now deprecated core os

00:16:54,800 --> 00:16:58,079
which was the first container optimized

00:16:57,120 --> 00:17:00,880
os

00:16:58,079 --> 00:17:01,440
chorus was itself based on chrome os

00:17:00,880 --> 00:17:05,039
which

00:17:01,440 --> 00:17:07,199
is based on gen2 so yeah currently i'm

00:17:05,039 --> 00:17:10,400
not working on a deviant derivative

00:17:07,199 --> 00:17:12,799
for now moving to kinfolk was again

00:17:10,400 --> 00:17:14,640
a big change for me the thing that

00:17:12,799 --> 00:17:15,439
impressed me the most was the speed at

00:17:14,640 --> 00:17:18,000
which

00:17:15,439 --> 00:17:20,000
one could get things done at google

00:17:18,000 --> 00:17:21,679
whenever i started the new project there

00:17:20,000 --> 00:17:23,760
was a long ramp up time

00:17:21,679 --> 00:17:25,919
of getting used to new technologies

00:17:23,760 --> 00:17:28,400
putting all the complex pieces together

00:17:25,919 --> 00:17:29,440
getting buy-in from all stakeholders and

00:17:28,400 --> 00:17:31,679
so on

00:17:29,440 --> 00:17:34,640
a medium-sized project could easily take

00:17:31,679 --> 00:17:36,640
a year to get launched

00:17:34,640 --> 00:17:37,840
working at the startup there's a lot

00:17:36,640 --> 00:17:39,919
less red tape

00:17:37,840 --> 00:17:41,200
less complexity less stakeholders to

00:17:39,919 --> 00:17:43,919
consider so

00:17:41,200 --> 00:17:46,160
things just move faster projects usually

00:17:43,919 --> 00:17:47,679
take a number of weeks maybe a couple of

00:17:46,160 --> 00:17:50,000
months if they are large

00:17:47,679 --> 00:17:52,320
and sure timelines might slip a bit but

00:17:50,000 --> 00:17:54,240
everything just goes faster

00:17:52,320 --> 00:17:55,840
the other big change was that while i

00:17:54,240 --> 00:17:58,160
was still doing linux

00:17:55,840 --> 00:17:59,280
i moved from working on a distro used by

00:17:58,160 --> 00:18:02,080
humans to a

00:17:59,280 --> 00:18:03,120
used by containers there are a lot of

00:18:02,080 --> 00:18:05,919
difference there

00:18:03,120 --> 00:18:07,360
a big one is how security weighs against

00:18:05,919 --> 00:18:09,360
usability

00:18:07,360 --> 00:18:11,440
with any software out there there's

00:18:09,360 --> 00:18:12,320
usually a struggle between security and

00:18:11,440 --> 00:18:14,720
usability

00:18:12,320 --> 00:18:15,440
you need things as locked down as

00:18:14,720 --> 00:18:17,600
possible

00:18:15,440 --> 00:18:20,559
while still allowing you to get things

00:18:17,600 --> 00:18:23,120
done in a reasonable amount of time

00:18:20,559 --> 00:18:25,440
and when security and usability clash

00:18:23,120 --> 00:18:27,440
you need to make some hard choices

00:18:25,440 --> 00:18:29,440
i found that the choices made for g

00:18:27,440 --> 00:18:31,280
linux were different than the ones made

00:18:29,440 --> 00:18:33,440
for flatcar

00:18:31,280 --> 00:18:34,960
one example of this is the read-only

00:18:33,440 --> 00:18:38,160
user partition

00:18:34,960 --> 00:18:39,840
in flatcar as in coreos and chrome os

00:18:38,160 --> 00:18:42,480
the slash user partition

00:18:39,840 --> 00:18:43,679
is read-only you can't install new

00:18:42,480 --> 00:18:46,160
software on it

00:18:43,679 --> 00:18:47,200
there's no package management system of

00:18:46,160 --> 00:18:50,000
any kind

00:18:47,200 --> 00:18:50,799
the os image stays exactly as it was

00:18:50,000 --> 00:18:53,200
shipped

00:18:50,799 --> 00:18:55,520
you can still customize things in etsy

00:18:53,200 --> 00:18:57,840
and site load software via containers

00:18:55,520 --> 00:18:59,039
but you can't install new programs in

00:18:57,840 --> 00:19:00,799
slash user

00:18:59,039 --> 00:19:03,280
nor can you tamper with the programs

00:19:00,799 --> 00:19:05,600
that are already installed

00:19:03,280 --> 00:19:06,559
for a human user this might be really

00:19:05,600 --> 00:19:08,640
limiting

00:19:06,559 --> 00:19:10,080
but for an os that's used to run

00:19:08,640 --> 00:19:12,320
containers on it

00:19:10,080 --> 00:19:14,160
as long as it has the necessary tools to

00:19:12,320 --> 00:19:16,720
run these containers this might be

00:19:14,160 --> 00:19:19,760
exactly what you want

00:19:16,720 --> 00:19:22,000
alright so here we are i've taken you on

00:19:19,760 --> 00:19:23,440
a quick journey through my career as a

00:19:22,000 --> 00:19:25,679
linux engineer

00:19:23,440 --> 00:19:27,840
i started as a young inexperienced

00:19:25,679 --> 00:19:28,480
techie and through time and effort i

00:19:27,840 --> 00:19:32,240
became an

00:19:28,480 --> 00:19:34,240
old timer now my goal with this talk was

00:19:32,240 --> 00:19:36,080
not to admit how old i am

00:19:34,240 --> 00:19:37,280
but to share some of the lessons that

00:19:36,080 --> 00:19:39,840
i've learned through

00:19:37,280 --> 00:19:41,280
all of this with you and also to look

00:19:39,840 --> 00:19:43,919
into the future

00:19:41,280 --> 00:19:45,120
and see what it might bring so let's get

00:19:43,919 --> 00:19:47,760
to that

00:19:45,120 --> 00:19:49,200
let's start by talking about automation

00:19:47,760 --> 00:19:51,039
as a software engineer

00:19:49,200 --> 00:19:52,480
system administrator and site

00:19:51,039 --> 00:19:55,919
reliability engineer

00:19:52,480 --> 00:19:56,480
i love automation automation is what

00:19:55,919 --> 00:19:58,720
enables

00:19:56,480 --> 00:19:59,600
us to do interesting things with our

00:19:58,720 --> 00:20:01,840
time

00:19:59,600 --> 00:20:04,000
we automate the boring stuff and move on

00:20:01,840 --> 00:20:07,919
to do things that are more challenging

00:20:04,000 --> 00:20:11,360
and more fun but there is such thing

00:20:07,919 --> 00:20:13,520
as too much automation how can we tell

00:20:11,360 --> 00:20:15,440
say it takes you five minutes to write a

00:20:13,520 --> 00:20:16,559
script that will save you one minute of

00:20:15,440 --> 00:20:18,480
manual work

00:20:16,559 --> 00:20:20,320
in this case it makes sense to write the

00:20:18,480 --> 00:20:22,880
script if you are going to do this task

00:20:20,320 --> 00:20:23,360
more than five times what if it takes

00:20:22,880 --> 00:20:25,360
you

00:20:23,360 --> 00:20:27,600
two hours to write the same script that

00:20:25,360 --> 00:20:30,000
will save one minute of manual work

00:20:27,600 --> 00:20:30,640
the math is simple it only makes sense

00:20:30,000 --> 00:20:35,120
to do it

00:20:30,640 --> 00:20:38,320
if you will apply it more than 120 times

00:20:35,120 --> 00:20:40,880
this example is pretty obvious i know

00:20:38,320 --> 00:20:42,880
unfortunately in real life we typically

00:20:40,880 --> 00:20:44,320
don't know how long it will take us to

00:20:42,880 --> 00:20:46,880
write the automation

00:20:44,320 --> 00:20:49,360
nor how many times we will execute it

00:20:46,880 --> 00:20:51,600
until it becomes obsolete

00:20:49,360 --> 00:20:53,280
still we can try to use some rough

00:20:51,600 --> 00:20:55,280
estimates knowing that they won't

00:20:53,280 --> 00:20:57,360
necessarily be accurate

00:20:55,280 --> 00:20:58,960
but they can help us decide how we spend

00:20:57,360 --> 00:21:01,600
our time

00:20:58,960 --> 00:21:03,840
when faced with a boring task some of us

00:21:01,600 --> 00:21:04,720
will start thinking how to automate it

00:21:03,840 --> 00:21:07,600
before we

00:21:04,720 --> 00:21:08,880
complete even the first manual run so if

00:21:07,600 --> 00:21:11,200
you are in that comp

00:21:08,880 --> 00:21:12,320
it's a good idea to ask yourself how

00:21:11,200 --> 00:21:15,440
long do i think

00:21:12,320 --> 00:21:18,080
it will take me to roughly write

00:21:15,440 --> 00:21:18,720
and debug the script that will automate

00:21:18,080 --> 00:21:21,200
this

00:21:18,720 --> 00:21:24,080
how much time will it save and how many

00:21:21,200 --> 00:21:28,080
times will i use it before it's obsolete

00:21:24,080 --> 00:21:30,240
and i need to rewrite it from scratch

00:21:28,080 --> 00:21:32,480
if after asking yourself all these

00:21:30,240 --> 00:21:34,720
questions the math tells you that you

00:21:32,480 --> 00:21:37,039
should spend time writing the automation

00:21:34,720 --> 00:21:40,400
then by all means go for it

00:21:37,039 --> 00:21:42,559
automation is indeed awesome now let's

00:21:40,400 --> 00:21:44,480
illustrate this with an example from my

00:21:42,559 --> 00:21:47,520
linux experience

00:21:44,480 --> 00:21:50,320
handling upgrades is a challenging task

00:21:47,520 --> 00:21:52,400
that i had to deal in each of my jobs

00:21:50,320 --> 00:21:54,720
the kind of automation applied

00:21:52,400 --> 00:21:56,240
differ with the operations and sizes

00:21:54,720 --> 00:21:58,400
involved

00:21:56,240 --> 00:22:00,400
at the small company in argentina we

00:21:58,400 --> 00:22:02,240
were tracking debian's table

00:22:00,400 --> 00:22:04,559
so whenever there was a new stable

00:22:02,240 --> 00:22:07,280
release we would start by upgrading an

00:22:04,559 --> 00:22:09,200
unused test machine followed probably by

00:22:07,280 --> 00:22:11,360
our own workstations followed by the

00:22:09,200 --> 00:22:12,080
computers of people that for some reason

00:22:11,360 --> 00:22:15,120
needed the new

00:22:12,080 --> 00:22:16,000
tools first throughout this process we

00:22:15,120 --> 00:22:18,559
would document

00:22:16,000 --> 00:22:20,159
any issues that we run into creating a

00:22:18,559 --> 00:22:21,280
script that took care of most of the

00:22:20,159 --> 00:22:23,360
work

00:22:21,280 --> 00:22:25,600
and then we would move on to applying

00:22:23,360 --> 00:22:27,520
this script to say the workstations of

00:22:25,600 --> 00:22:29,520
people that were on vacation

00:22:27,520 --> 00:22:32,000
which would help us find and fix some

00:22:29,520 --> 00:22:34,400
bugs and finally we would spend

00:22:32,000 --> 00:22:36,400
a weekend or two upgrading all the other

00:22:34,400 --> 00:22:38,480
machines

00:22:36,400 --> 00:22:40,559
so the script i mentioned automated the

00:22:38,480 --> 00:22:43,440
most common basic steps

00:22:40,559 --> 00:22:45,440
but it was a very optimistic script if

00:22:43,440 --> 00:22:47,360
while upgrading anything broke

00:22:45,440 --> 00:22:50,000
it was up to the person doing the

00:22:47,360 --> 00:22:51,919
upgrade to figure out how to fix it

00:22:50,000 --> 00:22:53,840
it just wasn't worth it having the

00:22:51,919 --> 00:22:54,880
script take care of all possible

00:22:53,840 --> 00:22:56,960
problems

00:22:54,880 --> 00:22:59,280
handling each and every problem through

00:22:56,960 --> 00:23:01,120
code would have taken way longer than

00:22:59,280 --> 00:23:03,600
the amount of manual worked

00:23:01,120 --> 00:23:05,600
involved multiplied by the time those

00:23:03,600 --> 00:23:07,600
problems appeared

00:23:05,600 --> 00:23:08,640
at my job at google this of course

00:23:07,600 --> 00:23:10,640
wouldn't work

00:23:08,640 --> 00:23:12,400
there wouldn't be enough weekends in the

00:23:10,640 --> 00:23:14,880
year for my team to go manually

00:23:12,400 --> 00:23:17,280
upgrading the machines in the fleet

00:23:14,880 --> 00:23:18,640
back when i joined in 2012 the main way

00:23:17,280 --> 00:23:22,080
of upgrading from

00:23:18,640 --> 00:23:25,520
lts to lts was to reinstall and it was

00:23:22,080 --> 00:23:25,520
done by the users themselves

00:23:26,559 --> 00:23:30,480
as i mentioned earlier the install

00:23:28,559 --> 00:23:33,039
itself was fully automated

00:23:30,480 --> 00:23:35,520
the user just decided when to do it and

00:23:33,039 --> 00:23:37,440
the machine could get re-imaged

00:23:35,520 --> 00:23:39,840
users would be asked to reinstall their

00:23:37,440 --> 00:23:40,720
machine with the new lts during a window

00:23:39,840 --> 00:23:42,559
of time

00:23:40,720 --> 00:23:44,320
and if they failed to do it before the

00:23:42,559 --> 00:23:46,720
deadline they would lose access to the

00:23:44,320 --> 00:23:48,799
network resources

00:23:46,720 --> 00:23:51,360
but reinstalling their workstations each

00:23:48,799 --> 00:23:52,960
time an lts came around was not popular

00:23:51,360 --> 00:23:56,320
among our users

00:23:52,960 --> 00:23:56,960
so during the transition from lucid to

00:23:56,320 --> 00:23:59,120
precise

00:23:56,960 --> 00:24:01,120
one of my teammates started a project to

00:23:59,120 --> 00:24:04,400
develop an in-place upgrade that would

00:24:01,120 --> 00:24:06,559
let users upgrade without reinstalling

00:24:04,400 --> 00:24:07,919
this was an experimental tool so not

00:24:06,559 --> 00:24:11,200
everybody used it

00:24:07,919 --> 00:24:13,279
but it did get some traction when the

00:24:11,200 --> 00:24:15,919
migration to trusty came around

00:24:13,279 --> 00:24:18,080
this script got improved we released it

00:24:15,919 --> 00:24:20,320
as an official way to upgrade

00:24:18,080 --> 00:24:21,840
and plenty of users used it it got

00:24:20,320 --> 00:24:23,760
around 95

00:24:21,840 --> 00:24:25,760
success rates in upgrading machines

00:24:23,760 --> 00:24:28,159
without any manual intervention

00:24:25,760 --> 00:24:29,919
which is quite good given how diverse

00:24:28,159 --> 00:24:31,840
our fleet was

00:24:29,919 --> 00:24:33,760
finally when we moved to our rolling

00:24:31,840 --> 00:24:35,919
release based on deviant testing

00:24:33,760 --> 00:24:36,960
the in-place upgrade tool got improved

00:24:35,919 --> 00:24:39,039
even more

00:24:36,960 --> 00:24:41,600
and it was able to handle the migration

00:24:39,039 --> 00:24:43,520
from ubuntu trustee to a moving target

00:24:41,600 --> 00:24:47,039
of stretch ambassador

00:24:43,520 --> 00:24:49,840
also with more than 95 success rate

00:24:47,039 --> 00:24:52,000
this was three years later so not only

00:24:49,840 --> 00:24:52,799
was it a bigger jump in the software

00:24:52,000 --> 00:24:56,640
stack

00:24:52,799 --> 00:24:58,799
the fleet had also grown significantly

00:24:56,640 --> 00:25:00,000
and this with a fleet of machines where

00:24:58,799 --> 00:25:02,799
users were allowed to

00:25:00,000 --> 00:25:05,039
install all kinds of different software

00:25:02,799 --> 00:25:08,159
so yeah it was no easy fit to get to

00:25:05,039 --> 00:25:10,000
that 95 plus percent success rate

00:25:08,159 --> 00:25:12,400
it was possible thanks to the script

00:25:10,000 --> 00:25:15,200
being extremely pessimistic

00:25:12,400 --> 00:25:15,679
it expected that any actions could fail

00:25:15,200 --> 00:25:17,600
and had

00:25:15,679 --> 00:25:19,760
ways to recover from these possible

00:25:17,600 --> 00:25:21,039
failures it included code to fix the

00:25:19,760 --> 00:25:23,120
most common problems

00:25:21,039 --> 00:25:24,880
and when an unknown error was

00:25:23,120 --> 00:25:26,320
encountered it had a bunch of different

00:25:24,880 --> 00:25:28,720
healing techniques

00:25:26,320 --> 00:25:30,240
to attempt to get the machine back into

00:25:28,720 --> 00:25:33,440
a working state

00:25:30,240 --> 00:25:35,440
kind of like a broad spectrum antibiotic

00:25:33,440 --> 00:25:36,880
and it was not just this extremely

00:25:35,440 --> 00:25:38,240
pessimistic coding

00:25:36,880 --> 00:25:40,240
it wouldn't have been possible to

00:25:38,240 --> 00:25:41,760
achieve this high success rates without

00:25:40,240 --> 00:25:44,400
a ton of testing

00:25:41,760 --> 00:25:46,559
we had a battery of automatic tests that

00:25:44,400 --> 00:25:48,240
run the in-place upgrade from different

00:25:46,559 --> 00:25:49,919
initial trustee states

00:25:48,240 --> 00:25:51,600
to whatever the current state of the

00:25:49,919 --> 00:25:53,840
rolling release was

00:25:51,600 --> 00:25:56,000
so that if something that had worked in

00:25:53,840 --> 00:25:59,440
the past stopped working we could detect

00:25:56,000 --> 00:26:01,840
it before it reached any users

00:25:59,440 --> 00:26:04,159
and finally the tool included automatic

00:26:01,840 --> 00:26:06,480
reporting of what it had done

00:26:04,159 --> 00:26:07,760
this allowed us to investigate any

00:26:06,480 --> 00:26:10,000
unsolved failures

00:26:07,760 --> 00:26:12,240
and add whichever solution we found for

00:26:10,000 --> 00:26:13,520
them to the battery of fixes that it

00:26:12,240 --> 00:26:15,120
applied

00:26:13,520 --> 00:26:17,279
every morning we could look at the

00:26:15,120 --> 00:26:17,919
dashboard of updates done the previous

00:26:17,279 --> 00:26:20,159
day

00:26:17,919 --> 00:26:21,279
and check if any of them had ended in

00:26:20,159 --> 00:26:23,039
failure

00:26:21,279 --> 00:26:25,039
looking at the logs and information

00:26:23,039 --> 00:26:25,440
collected by the tool we could try to

00:26:25,039 --> 00:26:27,840
solve

00:26:25,440 --> 00:26:30,000
issues like weird dependency problems

00:26:27,840 --> 00:26:32,240
file collisions or whatever

00:26:30,000 --> 00:26:35,279
and these fixes would get incorporated

00:26:32,240 --> 00:26:37,279
into the next version of the tool

00:26:35,279 --> 00:26:38,960
unless the package management system was

00:26:37,279 --> 00:26:40,960
completely out of commission

00:26:38,960 --> 00:26:42,720
the affected users would then be able to

00:26:40,960 --> 00:26:44,000
update to the latest version of the

00:26:42,720 --> 00:26:46,559
employees upgrade tool

00:26:44,000 --> 00:26:48,559
and re-run it the tool was able to

00:26:46,559 --> 00:26:50,840
restart from where it had left off

00:26:48,559 --> 00:26:52,000
and get the machine successfully

00:26:50,840 --> 00:26:54,400
upgraded

00:26:52,000 --> 00:26:55,520
of course developing this tool took

00:26:54,400 --> 00:26:58,240
quite some time

00:26:55,520 --> 00:26:59,440
a few years of different engineers in

00:26:58,240 --> 00:27:01,679
the team

00:26:59,440 --> 00:27:03,840
and as i mentioned it took three

00:27:01,679 --> 00:27:06,080
iterations to get there

00:27:03,840 --> 00:27:07,039
but by allowing users to upgrade their

00:27:06,080 --> 00:27:09,039
machines in place

00:27:07,039 --> 00:27:10,799
my team saved these users the type they

00:27:09,039 --> 00:27:13,039
would have spent reinstalling their

00:27:10,799 --> 00:27:13,840
applications and reapplying their custom

00:27:13,039 --> 00:27:17,440
settings

00:27:13,840 --> 00:27:17,440
if they had started from scratch

00:27:18,000 --> 00:27:21,600
given the sheer number of users even if

00:27:20,799 --> 00:27:24,159
you estimate

00:27:21,600 --> 00:27:26,399
only a couple of hours saved per user

00:27:24,159 --> 00:27:29,520
the total amount of hours saved is

00:27:26,399 --> 00:27:31,120
huge i don't have the numbers but one of

00:27:29,520 --> 00:27:33,120
my colleagues had calculated

00:27:31,120 --> 00:27:35,200
roughly how much had been saved and it

00:27:33,120 --> 00:27:37,520
was significantly more

00:27:35,200 --> 00:27:39,279
than had this day spent developing the

00:27:37,520 --> 00:27:41,520
tool

00:27:39,279 --> 00:27:43,679
my point with this long story is to show

00:27:41,520 --> 00:27:46,640
how the effort spent on automation

00:27:43,679 --> 00:27:48,000
pays off when the numbers are big enough

00:27:46,640 --> 00:27:50,640
when the fleet i was in charge

00:27:48,000 --> 00:27:51,440
of was 300 computers it made sense to

00:27:50,640 --> 00:27:54,000
have a simple

00:27:51,440 --> 00:27:54,960
optimistic script that would save us

00:27:54,000 --> 00:27:56,799
most of the work

00:27:54,960 --> 00:27:58,960
and then we don't have to fix any one of

00:27:56,799 --> 00:28:00,880
problems manually

00:27:58,960 --> 00:28:03,440
with a fleet two orders of magnitude

00:28:00,880 --> 00:28:06,000
larger it made a lot more sense to spend

00:28:03,440 --> 00:28:08,399
time developing robust automation

00:28:06,000 --> 00:28:11,279
because the time saved got multiplied by

00:28:08,399 --> 00:28:13,279
a much larger factor

00:28:11,279 --> 00:28:15,200
now the case of flat car is a pretty

00:28:13,279 --> 00:28:17,440
different story

00:28:15,200 --> 00:28:19,600
as i mentioned earlier flatcar uses one

00:28:17,440 --> 00:28:22,880
of the main ideas behind chrome os

00:28:19,600 --> 00:28:23,600
which is a read-only user partition not

00:28:22,880 --> 00:28:26,720
only that

00:28:23,600 --> 00:28:27,039
it actually has two user partitions user

00:28:26,720 --> 00:28:29,600
a

00:28:27,039 --> 00:28:30,159
and user b when a new release comes

00:28:29,600 --> 00:28:31,840
around

00:28:30,159 --> 00:28:33,679
it's deployed on the partition that's

00:28:31,840 --> 00:28:35,679
not currently being used

00:28:33,679 --> 00:28:38,399
when the machine reboots it boots into

00:28:35,679 --> 00:28:40,640
the new version

00:28:38,399 --> 00:28:42,080
if for some reason this new version

00:28:40,640 --> 00:28:44,080
fails the system

00:28:42,080 --> 00:28:45,919
automatically falls back to the previous

00:28:44,080 --> 00:28:48,320
partition the one that was known to be

00:28:45,919 --> 00:28:50,159
working before the reboot

00:28:48,320 --> 00:28:51,760
so it's not like there are never

00:28:50,159 --> 00:28:53,760
problems with upgrades but

00:28:51,760 --> 00:28:55,679
whenever there is a problem the machine

00:28:53,760 --> 00:28:58,000
keeps working by reverting to the

00:28:55,679 --> 00:28:59,840
previous version automatically

00:28:58,000 --> 00:29:02,960
this minimizes breakage and is

00:28:59,840 --> 00:29:04,880
completely transparent for the user

00:29:02,960 --> 00:29:07,039
i don't know how many hours were spent

00:29:04,880 --> 00:29:08,720
by chrome os and korres engineers

00:29:07,039 --> 00:29:10,880
developing this mechanism

00:29:08,720 --> 00:29:12,640
although i'm sure it was several months

00:29:10,880 --> 00:29:15,039
of quite a few people

00:29:12,640 --> 00:29:17,279
what i know is that this has saved time

00:29:15,039 --> 00:29:18,960
for tons of people because the users of

00:29:17,279 --> 00:29:20,880
these operating systems

00:29:18,960 --> 00:29:23,039
don't have to spend hours trying to

00:29:20,880 --> 00:29:24,399
recover from a bad upgrade that break

00:29:23,039 --> 00:29:27,919
their machines

00:29:24,399 --> 00:29:29,600
this just doesn't happen so i've

00:29:27,919 --> 00:29:31,440
mentioned a couple of times that we need

00:29:29,600 --> 00:29:34,240
to decide how we spend our time

00:29:31,440 --> 00:29:35,600
whether spending time in automation is

00:29:34,240 --> 00:29:37,760
worth it or not

00:29:35,600 --> 00:29:40,240
this is one of the most important skills

00:29:37,760 --> 00:29:42,720
people in it need in general

00:29:40,240 --> 00:29:44,159
managing priorities let's talk more

00:29:42,720 --> 00:29:45,760
about that

00:29:44,159 --> 00:29:48,000
one thing that i've learned in my

00:29:45,760 --> 00:29:48,799
different jobs is that there's always

00:29:48,000 --> 00:29:51,679
more to do

00:29:48,799 --> 00:29:53,679
than time allows you're never going to

00:29:51,679 --> 00:29:54,080
get to the bottom of the backlog because

00:29:53,679 --> 00:29:56,559
new

00:29:54,080 --> 00:29:58,799
things have more priority will come

00:29:56,559 --> 00:30:02,559
around before you have time to do the

00:29:58,799 --> 00:30:04,880
other things i mean i've heard a small

00:30:02,559 --> 00:30:07,200
number of people claiming to be idle

00:30:04,880 --> 00:30:08,159
and bored in their jobs with nothing to

00:30:07,200 --> 00:30:10,240
do but

00:30:08,159 --> 00:30:11,760
my experience and the experience of

00:30:10,240 --> 00:30:14,480
others working in the it

00:30:11,760 --> 00:30:15,919
industry that i know is that this mostly

00:30:14,480 --> 00:30:18,000
doesn't happen

00:30:15,919 --> 00:30:19,200
there's just too much stuff to do too

00:30:18,000 --> 00:30:22,480
many bugs to fix

00:30:19,200 --> 00:30:25,600
too many new features to add so

00:30:22,480 --> 00:30:27,679
we need to learn to prioritize in a

00:30:25,600 --> 00:30:29,600
business that's trying to make a profit

00:30:27,679 --> 00:30:32,480
the priorities are generally going to be

00:30:29,600 --> 00:30:34,559
driven by whatever brings in the money

00:30:32,480 --> 00:30:36,640
back at my job in argentina the first

00:30:34,559 --> 00:30:37,120
priority was to have the invoicing

00:30:36,640 --> 00:30:40,000
system

00:30:37,120 --> 00:30:42,559
online if invoicing wasn't working

00:30:40,000 --> 00:30:44,640
anything else had lower priority

00:30:42,559 --> 00:30:46,000
if there was a new government regulation

00:30:44,640 --> 00:30:48,480
that needed to be in place

00:30:46,000 --> 00:30:51,440
in order to generate invoices and this

00:30:48,480 --> 00:30:53,520
being argentina it wasn't a rare thing

00:30:51,440 --> 00:30:54,720
we would drop everything and make sure

00:30:53,520 --> 00:30:57,679
that worked

00:30:54,720 --> 00:30:58,640
and after invoicing bug fixes and

00:30:57,679 --> 00:31:00,880
features

00:30:58,640 --> 00:31:02,840
were generally prioritized according to

00:31:00,880 --> 00:31:04,159
how much they would influence the bottom

00:31:02,840 --> 00:31:06,799
line

00:31:04,159 --> 00:31:09,279
as myit team was in charge of anything

00:31:06,799 --> 00:31:11,360
i.t related we had to do this balancing

00:31:09,279 --> 00:31:13,360
act of setting priorities

00:31:11,360 --> 00:31:15,279
for everything related to system

00:31:13,360 --> 00:31:18,799
administration software engineering

00:31:15,279 --> 00:31:21,760
and user support at my shop at google

00:31:18,799 --> 00:31:22,159
i was thankfully removed from invoicing

00:31:21,760 --> 00:31:23,919
but

00:31:22,159 --> 00:31:26,720
still we needed to deal with a huge

00:31:23,919 --> 00:31:28,880
backlog and struggle with priorities

00:31:26,720 --> 00:31:30,720
in that team usually the criteria for

00:31:28,880 --> 00:31:33,120
what priority to give to different

00:31:30,720 --> 00:31:35,039
issues was related to how many people

00:31:33,120 --> 00:31:37,760
the issue was affecting

00:31:35,039 --> 00:31:38,559
was it one percent of the fleet five

00:31:37,760 --> 00:31:42,000
percent

00:31:38,559 --> 00:31:43,279
the wall fleet of course it was not the

00:31:42,000 --> 00:31:45,360
only criteria

00:31:43,279 --> 00:31:47,200
if the issue was making a team of 10

00:31:45,360 --> 00:31:49,360
people completely unable to work

00:31:47,200 --> 00:31:51,919
it would have a higher priority than if

00:31:49,360 --> 00:31:55,039
it was only mildly inconveniencing

00:31:51,919 --> 00:31:56,640
a hundred or even a thousand people one

00:31:55,039 --> 00:31:59,840
thing that we struggled with was

00:31:56,640 --> 00:32:01,840
laptop related issues if you dealt with

00:31:59,840 --> 00:32:03,360
laptops running linux in the past you

00:32:01,840 --> 00:32:06,240
probably know that they can have

00:32:03,360 --> 00:32:08,799
a myriad of different hardware issues

00:32:06,240 --> 00:32:11,360
maybe the wi-fi driver doesn't work

00:32:08,799 --> 00:32:12,640
maybe the fancy touchpad doesn't respond

00:32:11,360 --> 00:32:15,039
correctly

00:32:12,640 --> 00:32:17,679
maybe the laptop drains the battery at a

00:32:15,039 --> 00:32:20,559
high speed while it's suspended

00:32:17,679 --> 00:32:21,200
or worst of all maybe it comes with this

00:32:20,559 --> 00:32:24,240
horrible

00:32:21,200 --> 00:32:25,519
2500 display that's higher than hd but

00:32:24,240 --> 00:32:28,080
smaller than 4k

00:32:25,519 --> 00:32:29,279
and so looks horrible when running gtk

00:32:28,080 --> 00:32:31,440
applications

00:32:29,279 --> 00:32:33,919
no matter if you set them in single or

00:32:31,440 --> 00:32:36,000
double scaling

00:32:33,919 --> 00:32:37,840
and if you're wondering yes those were

00:32:36,000 --> 00:32:39,039
all issues that we had to fix throughout

00:32:37,840 --> 00:32:40,960
the years

00:32:39,039 --> 00:32:42,799
fixing these issues takes time and

00:32:40,960 --> 00:32:44,640
expertise and sometimes

00:32:42,799 --> 00:32:45,919
you're not even sure that you will be

00:32:44,640 --> 00:32:49,039
able to fix them

00:32:45,919 --> 00:32:50,880
which can be really frustrating in our

00:32:49,039 --> 00:32:51,840
case laptops were a small part of the

00:32:50,880 --> 00:32:54,559
fleet and so

00:32:51,840 --> 00:32:56,240
sometimes it felt like a bad investment

00:32:54,559 --> 00:32:58,799
of our resources

00:32:56,240 --> 00:33:00,880
but we had taken the explicit decision

00:32:58,799 --> 00:33:02,799
of supporting these linux laptops

00:33:00,880 --> 00:33:04,480
and that meant that they were a priority

00:33:02,799 --> 00:33:07,919
regardless of the relative

00:33:04,480 --> 00:33:09,600
relatively small fleet size working with

00:33:07,919 --> 00:33:10,480
the flat card team now the issues that

00:33:09,600 --> 00:33:13,039
we deal with

00:33:10,480 --> 00:33:14,320
are pretty different but as usual

00:33:13,039 --> 00:33:16,720
there's too much to do

00:33:14,320 --> 00:33:19,039
and too little time to do it so we need

00:33:16,720 --> 00:33:20,080
to find a way to prioritize what to work

00:33:19,039 --> 00:33:22,640
on

00:33:20,080 --> 00:33:23,440
as flatcar is container oriented most of

00:33:22,640 --> 00:33:25,760
our work

00:33:23,440 --> 00:33:27,679
is focused on enabling users to run

00:33:25,760 --> 00:33:30,880
their containerized workflows

00:33:27,679 --> 00:33:33,519
and supporting more cloud platforms

00:33:30,880 --> 00:33:34,559
and because we are security oriented

00:33:33,519 --> 00:33:36,640
keeping the system

00:33:34,559 --> 00:33:39,519
as secure as possible takes the highest

00:33:36,640 --> 00:33:42,960
priority of all

00:33:39,519 --> 00:33:44,480
so what happens when you just can't get

00:33:42,960 --> 00:33:47,600
to do something because

00:33:44,480 --> 00:33:48,960
other things have higher priority one

00:33:47,600 --> 00:33:51,039
thing that i learned throughout my

00:33:48,960 --> 00:33:53,039
journey was that even if i agree with

00:33:51,039 --> 00:33:53,679
the person reporting the issue that it's

00:33:53,039 --> 00:33:55,919
a bug

00:33:53,679 --> 00:33:58,000
and it should be fixed it's better if

00:33:55,919 --> 00:34:01,200
i'm upfront about the fact that i

00:33:58,000 --> 00:34:02,559
just won't get to it if someone files a

00:34:01,200 --> 00:34:05,279
bug about a problem

00:34:02,559 --> 00:34:07,360
they encounter it and i respond yeah

00:34:05,279 --> 00:34:08,960
this is a bug we should fix it

00:34:07,360 --> 00:34:11,040
but then put it at the bottom of the

00:34:08,960 --> 00:34:12,960
backlog and never get to it

00:34:11,040 --> 00:34:14,240
that someone isn't going to be very

00:34:12,960 --> 00:34:16,960
happy

00:34:14,240 --> 00:34:19,119
if instead i tell them that it's totally

00:34:16,960 --> 00:34:19,760
a bug and i understand their frustration

00:34:19,119 --> 00:34:22,159
but i

00:34:19,760 --> 00:34:23,119
unfortunately i won't have the time to

00:34:22,159 --> 00:34:24,639
solve it

00:34:23,119 --> 00:34:26,159
because there are other things that are

00:34:24,639 --> 00:34:28,800
higher priority it's

00:34:26,159 --> 00:34:29,599
almost certain that they will understand

00:34:28,800 --> 00:34:32,639
and thank me

00:34:29,599 --> 00:34:35,839
for my honesty the user can then figure

00:34:32,639 --> 00:34:37,760
out how to solve the problem themselves

00:34:35,839 --> 00:34:39,839
without waiting for a fix that will

00:34:37,760 --> 00:34:41,440
never come

00:34:39,839 --> 00:34:44,240
this is a skill that takes time to

00:34:41,440 --> 00:34:45,440
master or at least it took me time to

00:34:44,240 --> 00:34:47,280
master

00:34:45,440 --> 00:34:49,119
admitting that i won't be able to do

00:34:47,280 --> 00:34:50,480
something feels like i'm admitting i'm

00:34:49,119 --> 00:34:52,480
not good enough

00:34:50,480 --> 00:34:54,639
when it's just recognizing that there's

00:34:52,480 --> 00:34:55,839
only so many hours in the day and so

00:34:54,639 --> 00:34:58,720
much that can be done

00:34:55,839 --> 00:34:59,040
in that time some people summarize this

00:34:58,720 --> 00:35:02,160
as

00:34:59,040 --> 00:35:04,320
patch's welcome which kind of works but

00:35:02,160 --> 00:35:06,640
is short and it might be misunderstood

00:35:04,320 --> 00:35:08,720
as passive aggressive maybe because

00:35:06,640 --> 00:35:09,680
it has been used in that way by some

00:35:08,720 --> 00:35:11,760
people

00:35:09,680 --> 00:35:13,359
i prefer to be a bit more verbose and

00:35:11,760 --> 00:35:16,240
make sure the other party

00:35:13,359 --> 00:35:18,320
understands what i'm trying to say this

00:35:16,240 --> 00:35:19,680
touches on yet another lesson that i've

00:35:18,320 --> 00:35:22,160
learned with time

00:35:19,680 --> 00:35:23,440
empathy and human connection go a long

00:35:22,160 --> 00:35:25,280
way

00:35:23,440 --> 00:35:27,119
when the person that you're interacting

00:35:25,280 --> 00:35:29,599
with is just a nickname

00:35:27,119 --> 00:35:31,440
a handle on your screen it's very easy

00:35:29,599 --> 00:35:34,240
to dismiss their ideas

00:35:31,440 --> 00:35:36,079
treat them as bots rather than humans

00:35:34,240 --> 00:35:37,839
when you've met them in person this

00:35:36,079 --> 00:35:39,839
changes a lot

00:35:37,839 --> 00:35:40,960
you know what they look like how they

00:35:39,839 --> 00:35:43,680
sound but more

00:35:40,960 --> 00:35:44,000
importantly you've shared time together

00:35:43,680 --> 00:35:45,760
doing

00:35:44,000 --> 00:35:48,400
something different than typing on a

00:35:45,760 --> 00:35:49,920
computer this creates a bond that is

00:35:48,400 --> 00:35:52,480
very hard to replicate

00:35:49,920 --> 00:35:54,480
remotely yes you can have a video

00:35:52,480 --> 00:35:55,119
conversation see their faces hear their

00:35:54,480 --> 00:35:57,680
voices

00:35:55,119 --> 00:35:59,839
it is better than nothing but it's not

00:35:57,680 --> 00:36:02,160
the same as sharing a meal

00:35:59,839 --> 00:36:04,000
talking about hobbies visiting a museum

00:36:02,160 --> 00:36:06,320
or playing a game together

00:36:04,000 --> 00:36:07,440
that's when other developers become

00:36:06,320 --> 00:36:09,599
important people

00:36:07,440 --> 00:36:11,040
in our lives rather than names on a

00:36:09,599 --> 00:36:12,720
screen

00:36:11,040 --> 00:36:14,720
and so when we don't have the

00:36:12,720 --> 00:36:15,440
opportunity of flying around the world

00:36:14,720 --> 00:36:17,920
to meet them

00:36:15,440 --> 00:36:19,839
we need to make a conscious effort of

00:36:17,920 --> 00:36:22,240
creating these social bonds

00:36:19,839 --> 00:36:23,599
humanizing our fellow developers as well

00:36:22,240 --> 00:36:26,240
as our users

00:36:23,599 --> 00:36:29,119
this takes work but it will lead us to

00:36:26,240 --> 00:36:31,760
much better results in the end

00:36:29,119 --> 00:36:33,760
all right i've shared my journey and a

00:36:31,760 --> 00:36:35,119
few nuggets of wisdom that i've acquired

00:36:33,760 --> 00:36:37,520
through my time

00:36:35,119 --> 00:36:38,800
let us now look into the future of linux

00:36:37,520 --> 00:36:42,480
as the os

00:36:38,800 --> 00:36:44,400
and think about what's to come of course

00:36:42,480 --> 00:36:46,160
i'm not a fortune teller i don't really

00:36:44,400 --> 00:36:48,320
know what the future will bring

00:36:46,160 --> 00:36:51,200
but there are tendencies and we can talk

00:36:48,320 --> 00:36:53,359
about those tendencies

00:36:51,200 --> 00:36:55,599
i hope this doesn't come as a surprise

00:36:53,359 --> 00:36:57,839
to you the tendency is that linux

00:36:55,599 --> 00:36:59,200
distributions are becoming less and less

00:36:57,839 --> 00:37:01,599
important

00:36:59,200 --> 00:37:03,920
over the past 10 years or so installing

00:37:01,599 --> 00:37:05,359
libraries and modules outside the main

00:37:03,920 --> 00:37:08,320
os became the norm

00:37:05,359 --> 00:37:08,800
rather than the exception python has pi

00:37:08,320 --> 00:37:11,520
pi

00:37:08,800 --> 00:37:11,920
ruby has the gems distribution node.js

00:37:11,520 --> 00:37:14,240
should

00:37:11,920 --> 00:37:16,720
separate packages for everything

00:37:14,240 --> 00:37:18,480
including to check if a number is even

00:37:16,720 --> 00:37:20,480
and it's not just about programming

00:37:18,480 --> 00:37:22,000
languages this tendency to ignore the

00:37:20,480 --> 00:37:24,640
underlying distro means that

00:37:22,000 --> 00:37:26,800
a growing number of programs come with

00:37:24,640 --> 00:37:30,320
their own package management system

00:37:26,800 --> 00:37:32,240
for extensions and plugins this includes

00:37:30,320 --> 00:37:35,280
a wide array of programs like

00:37:32,240 --> 00:37:37,200
firefox cinnamon and even beam which has

00:37:35,280 --> 00:37:39,280
like four of them

00:37:37,200 --> 00:37:41,760
including their own way of installing

00:37:39,280 --> 00:37:44,160
addons has two main advantage

00:37:41,760 --> 00:37:45,760
advantages it avoids the bottleneck of

00:37:44,160 --> 00:37:46,640
packages getting ingested by the

00:37:45,760 --> 00:37:48,960
distribution

00:37:46,640 --> 00:37:51,680
and it abstracts installing these addons

00:37:48,960 --> 00:37:53,920
from the underlying distribution

00:37:51,680 --> 00:37:55,839
of course there's a reason why linux

00:37:53,920 --> 00:37:57,119
distributions exist in the first place

00:37:55,839 --> 00:38:00,480
so bypassing them

00:37:57,119 --> 00:38:03,440
also comes with disadvantages less or no

00:38:00,480 --> 00:38:04,000
quality control less or no security

00:38:03,440 --> 00:38:07,119
updates

00:38:04,000 --> 00:38:08,880
in particular for stable version and

00:38:07,119 --> 00:38:10,720
no integration with the rest of the

00:38:08,880 --> 00:38:12,880
system

00:38:10,720 --> 00:38:15,119
in other words by making it super easy

00:38:12,880 --> 00:38:15,760
for users to install the latest flashy

00:38:15,119 --> 00:38:18,079
thing

00:38:15,760 --> 00:38:19,599
it also makes it super easy for them to

00:38:18,079 --> 00:38:22,720
install random buggy

00:38:19,599 --> 00:38:25,200
insecure or even malicious software

00:38:22,720 --> 00:38:27,839
but users want the flashy thing so they

00:38:25,200 --> 00:38:29,520
will mostly ignore these concerns

00:38:27,839 --> 00:38:31,359
the next step on these trends that were

00:38:29,520 --> 00:38:32,000
making the distributions less and less

00:38:31,359 --> 00:38:34,000
important

00:38:32,000 --> 00:38:35,839
is running some form of contained

00:38:34,000 --> 00:38:38,720
applications on top of a thin

00:38:35,839 --> 00:38:40,320
layer of os the contained applications

00:38:38,720 --> 00:38:43,520
could be docker containers

00:38:40,320 --> 00:38:46,560
snaps flat facts or what have you

00:38:43,520 --> 00:38:48,560
i remember back in 2015 i attended a

00:38:46,560 --> 00:38:49,760
talk by a docker developer who showed

00:38:48,560 --> 00:38:51,920
how she ran

00:38:49,760 --> 00:38:54,079
each of her graphical applications

00:38:51,920 --> 00:38:56,320
inside a separate container

00:38:54,079 --> 00:38:58,960
back then this sounded rather over the

00:38:56,320 --> 00:39:01,280
top today this sounds normal

00:38:58,960 --> 00:39:03,520
i do this myself for applications that i

00:39:01,280 --> 00:39:05,520
don't trust

00:39:03,520 --> 00:39:08,079
running everything inside containers

00:39:05,520 --> 00:39:10,960
also comes with some bad consequences

00:39:08,079 --> 00:39:12,720
which could probably feel its own talk

00:39:10,960 --> 00:39:14,880
personally the thing that worries me the

00:39:12,720 --> 00:39:16,400
most is security because many people

00:39:14,880 --> 00:39:18,640
forget to ensure

00:39:16,400 --> 00:39:20,960
that all the software inside those boxes

00:39:18,640 --> 00:39:23,760
needs to be up to date

00:39:20,960 --> 00:39:25,359
so in this world what's even the meaning

00:39:23,760 --> 00:39:27,200
of a linux distribution

00:39:25,359 --> 00:39:28,800
will distribution still matter in a

00:39:27,200 --> 00:39:31,520
couple of years

00:39:28,800 --> 00:39:33,920
for desktop and laptops probably yes but

00:39:31,520 --> 00:39:36,160
less and less so on servers

00:39:33,920 --> 00:39:39,440
if you are running containers on a vm or

00:39:36,160 --> 00:39:41,680
a kubernetes cluster on a bunch of nodes

00:39:39,440 --> 00:39:43,599
you care very little about which destroy

00:39:41,680 --> 00:39:45,760
is running on these machines

00:39:43,599 --> 00:39:48,240
what you do care about is that this

00:39:45,760 --> 00:39:50,320
destroys as secure as possible and that

00:39:48,240 --> 00:39:52,240
it allows you to run your workloads on

00:39:50,320 --> 00:39:54,079
top

00:39:52,240 --> 00:39:56,000
the less software you have running in

00:39:54,079 --> 00:39:59,599
the base os the less you will have to

00:39:56,000 --> 00:40:01,599
worry about possible security issues

00:39:59,599 --> 00:40:03,440
on top of that the less you have to

00:40:01,599 --> 00:40:04,480
worry about keeping it up to date the

00:40:03,440 --> 00:40:06,240
better

00:40:04,480 --> 00:40:08,480
so distributions with a minimal

00:40:06,240 --> 00:40:11,119
footprint on automatic upgrades are

00:40:08,480 --> 00:40:13,359
clearly going to be favored

00:40:11,119 --> 00:40:15,599
of course we will still need to get the

00:40:13,359 --> 00:40:17,520
software installed on those containers

00:40:15,599 --> 00:40:20,079
so it's not like distributions will stop

00:40:17,520 --> 00:40:21,119
existing at least not in the immediate

00:40:20,079 --> 00:40:23,839
future

00:40:21,119 --> 00:40:24,160
but as more workloads become containers

00:40:23,839 --> 00:40:25,920
or

00:40:24,160 --> 00:40:29,520
containerized applications the

00:40:25,920 --> 00:40:32,240
underlying os will matter less and less

00:40:29,520 --> 00:40:34,400
in summary for server side applications

00:40:32,240 --> 00:40:36,800
distributions will either be a minimal

00:40:34,400 --> 00:40:39,119
layer to run containers on top

00:40:36,800 --> 00:40:42,160
or a repository of packages to create

00:40:39,119 --> 00:40:44,480
the content of those containers

00:40:42,160 --> 00:40:46,160
what about desktops and laptops for the

00:40:44,480 --> 00:40:48,640
sas and laptops the general purpose

00:40:46,160 --> 00:40:50,720
distribution still makes sense today

00:40:48,640 --> 00:40:52,000
as we don't yet have the tooling to make

00:40:50,720 --> 00:40:54,480
sense of running

00:40:52,000 --> 00:40:55,119
each application in its own container

00:40:54,480 --> 00:40:57,200
avoid

00:40:55,119 --> 00:40:59,359
wasting tons of bandwidth and disk space

00:40:57,200 --> 00:40:59,920
or redone loading the same applications

00:40:59,359 --> 00:41:01,040
for

00:40:59,920 --> 00:41:03,200
the same things for different

00:41:01,040 --> 00:41:05,040
applications

00:41:03,200 --> 00:41:06,880
the tooling that will be the most

00:41:05,040 --> 00:41:08,640
relevant coming up will be the one that

00:41:06,880 --> 00:41:10,800
helps us make sense of all these

00:41:08,640 --> 00:41:12,960
different origins of source code

00:41:10,800 --> 00:41:14,000
things like keeping our pi pi packages

00:41:12,960 --> 00:41:16,960
up to date

00:41:14,000 --> 00:41:18,640
managing our all our node.js libraries

00:41:16,960 --> 00:41:19,200
understanding what's installed in the

00:41:18,640 --> 00:41:22,240
system

00:41:19,200 --> 00:41:24,720
and was shipped by a container

00:41:22,240 --> 00:41:26,240
ensuring that our containers have their

00:41:24,720 --> 00:41:29,839
security issues patched

00:41:26,240 --> 00:41:31,359
and so on some of these utilities are

00:41:29,839 --> 00:41:34,079
being built today

00:41:31,359 --> 00:41:35,200
others are yet to come when these tools

00:41:34,079 --> 00:41:37,200
are mature enough

00:41:35,200 --> 00:41:39,440
it's likely that even desktop and laptop

00:41:37,200 --> 00:41:41,599
distro will stop being relevant

00:41:39,440 --> 00:41:44,640
they will become a thin layer on top of

00:41:41,599 --> 00:41:46,160
which we will run containers

00:41:44,640 --> 00:41:47,839
if you're part of a community that's

00:41:46,160 --> 00:41:49,680
building a distribution you might not

00:41:47,839 --> 00:41:52,240
like this perspective

00:41:49,680 --> 00:41:53,200
i understand as a deviant developer i'm

00:41:52,240 --> 00:41:55,200
not a fun

00:41:53,200 --> 00:41:56,240
but i don't believe that closing our

00:41:55,200 --> 00:41:59,520
eyes to reality

00:41:56,240 --> 00:42:01,200
is the way to go instead we need to

00:41:59,520 --> 00:42:02,000
accept that the world of linux

00:42:01,200 --> 00:42:04,960
distributions

00:42:02,000 --> 00:42:05,440
has changed and build the tools that we

00:42:04,960 --> 00:42:08,800
need

00:42:05,440 --> 00:42:10,560
to make sense of this brand new world

00:42:08,800 --> 00:42:12,960
i invite you to be part of this

00:42:10,560 --> 00:42:12,960
challenge

00:42:13,280 --> 00:42:18,800
and with that we come to the end

00:42:16,800 --> 00:42:20,960
this was my presentation on building

00:42:18,800 --> 00:42:22,720
linux distributions for fun and profit

00:42:20,960 --> 00:42:24,319
i hope you enjoyed it and that you

00:42:22,720 --> 00:42:31,200
learned something new

00:42:24,319 --> 00:42:31,200

YouTube URL: https://www.youtube.com/watch?v=x_WAhUzEPsY


