Title: Are You Wise in the Ways of Open Source Compliance? Taxonomy and the Tools of Open Source Compliance
Publication date: 2020-11-17
Playlist: Open Source Summit & Embedded Linux Conference Europe 2020
Description: 
	Are You Wise in the Ways of Open Source Compliance? Taxonomy and the Tools of Open Source Compliance - Gergely Csatari, Nokia & Yann Jorelle, Nokia/Aalto University
Captions: 
	00:00:00,080 --> 00:00:06,480
hello welcome everybody uh you know talk

00:00:03,040 --> 00:00:08,960
about uh the wise ways

00:00:06,480 --> 00:00:09,920
in open source compliance text taxonomy

00:00:08,960 --> 00:00:13,280
and the tools of

00:00:09,920 --> 00:00:15,040
open source compliance let us introduce

00:00:13,280 --> 00:00:16,640
ourselves

00:00:15,040 --> 00:00:18,320
my name is greg echattari and i'm

00:00:16,640 --> 00:00:19,760
working as a senior open source

00:00:18,320 --> 00:00:22,240
specialist in the

00:00:19,760 --> 00:00:24,720
nokia open source program office and my

00:00:22,240 --> 00:00:27,840
colleague here is

00:00:24,720 --> 00:00:30,640
yeah i am jan jorel i'm a student at

00:00:27,840 --> 00:00:32,239
alto university and i worked this summer

00:00:30,640 --> 00:00:35,920
as a summer trainee at

00:00:32,239 --> 00:00:38,960
nokia's open source program office also

00:00:35,920 --> 00:00:42,399
and in this talk we will discuss

00:00:38,960 --> 00:00:44,239
um a bit of a taxonomy of the open

00:00:42,399 --> 00:00:45,680
source compliance check because we think

00:00:44,239 --> 00:00:48,960
that it's very important that

00:00:45,680 --> 00:00:53,360
that we have a well-defined

00:00:48,960 --> 00:00:53,360
um set of of uh

00:00:53,440 --> 00:00:57,120
actions what we are doing in the in the

00:00:55,840 --> 00:01:00,160
compliance check

00:00:57,120 --> 00:01:03,359
and we will cover a bit which tools

00:01:00,160 --> 00:01:04,000
are covering which part of these uh this

00:01:03,359 --> 00:01:08,159
process but

00:01:04,000 --> 00:01:11,360
let's start from the um from the really

00:01:08,159 --> 00:01:12,000
beginning so what is the the target of

00:01:11,360 --> 00:01:14,320
of

00:01:12,000 --> 00:01:16,720
open source compliance check the target

00:01:14,320 --> 00:01:20,159
of of open source compliance check

00:01:16,720 --> 00:01:22,720
is to follow the license obligations uh

00:01:20,159 --> 00:01:24,320
of the used open source software in the

00:01:22,720 --> 00:01:27,680
product which means that

00:01:24,320 --> 00:01:30,960
that we have to

00:01:27,680 --> 00:01:33,119
know what is the uh list of open source

00:01:30,960 --> 00:01:36,479
software used in the product

00:01:33,119 --> 00:01:37,200
uh we have to know what is the license

00:01:36,479 --> 00:01:39,280
of these

00:01:37,200 --> 00:01:40,560
open source software components and we

00:01:39,280 --> 00:01:42,320
have to know

00:01:40,560 --> 00:01:44,799
what are the different obligations in

00:01:42,320 --> 00:01:48,479
these licenses and we have to

00:01:44,799 --> 00:01:51,520
act uh according to them so

00:01:48,479 --> 00:01:54,799
uh for this the first step

00:01:51,520 --> 00:01:58,320
uh is to get the list of

00:01:54,799 --> 00:02:01,680
uh of uh open source software

00:01:58,320 --> 00:02:05,040
uh what is used in a product which is

00:02:01,680 --> 00:02:08,720
creating the so-called bill of material

00:02:05,040 --> 00:02:11,760
uh and the very difficult part of this

00:02:08,720 --> 00:02:14,160
is to get all the dependencies

00:02:11,760 --> 00:02:16,000
and all the dependencies of dependencies

00:02:14,160 --> 00:02:19,840
i will discuss this a bit

00:02:16,000 --> 00:02:22,879
a bit uh later and then there is a

00:02:19,840 --> 00:02:23,599
there is a second uh step which is

00:02:22,879 --> 00:02:27,200
basically a

00:02:23,599 --> 00:02:29,360
decision to decide if they if the usage

00:02:27,200 --> 00:02:33,200
of the open source component

00:02:29,360 --> 00:02:34,640
uh in the given product is okay or not

00:02:33,200 --> 00:02:36,080
different companies have different

00:02:34,640 --> 00:02:39,760
policies on

00:02:36,080 --> 00:02:42,800
on on the usage of open source

00:02:39,760 --> 00:02:44,640
based on uh their internal uh business

00:02:42,800 --> 00:02:45,680
processes but still a decision have to

00:02:44,640 --> 00:02:48,319
be made

00:02:45,680 --> 00:02:51,040
uh if the open source component can be

00:02:48,319 --> 00:02:53,440
used or not and then the third

00:02:51,040 --> 00:02:56,000
third check is to fulfill the

00:02:53,440 --> 00:02:59,200
obligations of the of the license

00:02:56,000 --> 00:03:04,159
or licenses so let's see these in

00:02:59,200 --> 00:03:07,280
in detail uh so the first step is to get

00:03:04,159 --> 00:03:09,760
the list of the used open source uh

00:03:07,280 --> 00:03:10,720
components and their licenses and this

00:03:09,760 --> 00:03:13,840
is a

00:03:10,720 --> 00:03:17,040
very complex uh

00:03:13,840 --> 00:03:19,519
step to create this full so-called bill

00:03:17,040 --> 00:03:22,959
of material

00:03:19,519 --> 00:03:24,799
and i collected all the steps which are

00:03:22,959 --> 00:03:29,040
needed for a let's say a full

00:03:24,799 --> 00:03:29,040
analysis and for for

00:03:29,200 --> 00:03:33,360
each of them i i describe a bit what

00:03:31,519 --> 00:03:36,640
what do i mean on them

00:03:33,360 --> 00:03:40,480
them so the first step is

00:03:36,640 --> 00:03:44,239
is uh do a container content resolution

00:03:40,480 --> 00:03:47,760
which means that if we are using uh

00:03:44,239 --> 00:03:50,720
continuous and container images um

00:03:47,760 --> 00:03:51,200
we need to unpack the content of these

00:03:50,720 --> 00:03:54,000
uh

00:03:51,200 --> 00:03:55,040
these containers so we are able to to

00:03:54,000 --> 00:03:59,120
analyze

00:03:55,040 --> 00:03:59,599
um the content of the container images

00:03:59,120 --> 00:04:01,280
with

00:03:59,599 --> 00:04:03,360
images which means that we have to get

00:04:01,280 --> 00:04:07,280
access to us all files

00:04:03,360 --> 00:04:10,799
stored in the in the content images

00:04:07,280 --> 00:04:12,560
uh there is an interesting um

00:04:10,799 --> 00:04:14,720
fact about counterimage is that that

00:04:12,560 --> 00:04:16,400
they are using these layers

00:04:14,720 --> 00:04:18,000
in the file system so in total it's

00:04:16,400 --> 00:04:20,639
possible to have hidden

00:04:18,000 --> 00:04:22,320
content in the in the container images

00:04:20,639 --> 00:04:22,960
and some tools are discovering these

00:04:22,320 --> 00:04:25,680
hidden files

00:04:22,960 --> 00:04:27,440
some tools do not discover these these

00:04:25,680 --> 00:04:30,560
hidden files but still we need this

00:04:27,440 --> 00:04:31,520
step to to unpack the containers and

00:04:30,560 --> 00:04:34,560
then

00:04:31,520 --> 00:04:36,960
we need to um resolve

00:04:34,560 --> 00:04:38,240
the dependencies and this can happen in

00:04:36,960 --> 00:04:41,280
in in

00:04:38,240 --> 00:04:44,320
two levels um there is a level

00:04:41,280 --> 00:04:47,759
what i call the operating system level

00:04:44,320 --> 00:04:50,400
package dependency which means that that

00:04:47,759 --> 00:04:51,280
we use the tools what the operating

00:04:50,400 --> 00:04:54,960
systems are

00:04:51,280 --> 00:04:57,120
are using so we are using uh rpms ept

00:04:54,960 --> 00:04:58,960
you more whatever the operating system

00:04:57,120 --> 00:05:03,680
has so these tools

00:04:58,960 --> 00:05:03,680
to discover what packages are installed

00:05:05,440 --> 00:05:08,880
to the product what we would like to

00:05:08,000 --> 00:05:11,919
ship

00:05:08,880 --> 00:05:14,800
the other layer of uh

00:05:11,919 --> 00:05:16,160
of the dependency resolving is the is

00:05:14,800 --> 00:05:20,560
the technology level

00:05:16,160 --> 00:05:23,680
uh uh package dependency dissolving

00:05:20,560 --> 00:05:25,120
which means that that we use uh language

00:05:23,680 --> 00:05:28,960
specific tools

00:05:25,120 --> 00:05:29,680
like peep or npm or godapp or something

00:05:28,960 --> 00:05:32,320
like that

00:05:29,680 --> 00:05:33,840
to discover what kind of dependencies

00:05:32,320 --> 00:05:37,120
the given

00:05:33,840 --> 00:05:40,080
source code that they are producing uh

00:05:37,120 --> 00:05:40,400
are using so for example in case of uh

00:05:40,080 --> 00:05:43,520
of

00:05:40,400 --> 00:05:46,560
of golong um this

00:05:43,520 --> 00:05:48,479
this is the discovery of all the

00:05:46,560 --> 00:05:50,720
all the included go modules and all the

00:05:48,479 --> 00:05:54,160
transient dependencies of all these

00:05:50,720 --> 00:05:57,520
these um go modules but still

00:05:54,160 --> 00:05:58,080
uh until this step we just uh or only

00:05:57,520 --> 00:06:01,199
have

00:05:58,080 --> 00:06:04,639
the list of the open source components

00:06:01,199 --> 00:06:06,400
we do not have uh the source code of

00:06:04,639 --> 00:06:08,080
this or we do not have any information

00:06:06,400 --> 00:06:11,440
about the license

00:06:08,080 --> 00:06:14,240
or or the copyright information of these

00:06:11,440 --> 00:06:17,280
so we need to get

00:06:14,240 --> 00:06:19,280
the source code to run a full analysis

00:06:17,280 --> 00:06:20,880
and for this we need the source code

00:06:19,280 --> 00:06:23,039
downloader which which basically

00:06:20,880 --> 00:06:25,199
downloads based on this information

00:06:23,039 --> 00:06:27,039
get from these different sources it

00:06:25,199 --> 00:06:29,680
downloads the source code of the

00:06:27,039 --> 00:06:30,639
open source components and then there is

00:06:29,680 --> 00:06:33,440
a need

00:06:30,639 --> 00:06:35,120
um to scan for the copyrights and

00:06:33,440 --> 00:06:39,840
license information

00:06:35,120 --> 00:06:43,520
so it's uh it's a it's a tool

00:06:39,840 --> 00:06:45,199
which which goes through the source code

00:06:43,520 --> 00:06:48,639
and that tax licenses and

00:06:45,199 --> 00:06:53,440
and copyrights information

00:06:48,639 --> 00:06:55,039
this step can be bypassed by a by a

00:06:53,440 --> 00:06:58,240
different step which is the

00:06:55,039 --> 00:07:01,039
the online license checking so there are

00:06:58,240 --> 00:07:02,000
there are or actually there is a

00:07:01,039 --> 00:07:03,680
database

00:07:02,000 --> 00:07:06,240
called clearly defined which is

00:07:03,680 --> 00:07:09,280
accessible by everybody online

00:07:06,240 --> 00:07:11,199
and this uh contains the the license and

00:07:09,280 --> 00:07:11,680
copyright information of different open

00:07:11,199 --> 00:07:14,479
source

00:07:11,680 --> 00:07:17,280
components so instead of scanning it is

00:07:14,479 --> 00:07:20,319
possible to to get this information from

00:07:17,280 --> 00:07:23,440
completely defined um

00:07:20,319 --> 00:07:26,000
uh and there is also another optional

00:07:23,440 --> 00:07:28,560
step which is the the binauralizer

00:07:26,000 --> 00:07:30,400
so it it it can happen that we do not

00:07:28,560 --> 00:07:33,680
have access to the source code of

00:07:30,400 --> 00:07:37,039
of uh of the different uh components

00:07:33,680 --> 00:07:41,039
um in the product so in this case

00:07:37,039 --> 00:07:41,840
um binary arises is needed then when we

00:07:41,039 --> 00:07:45,520
analyze

00:07:41,840 --> 00:07:50,639
the binary artifact of

00:07:45,520 --> 00:07:53,680
of a bigger process and as a last step

00:07:50,639 --> 00:07:55,440
there is a need for for what is called

00:07:53,680 --> 00:07:58,080
forensics caudalysis

00:07:55,440 --> 00:07:59,120
which means that that we scan the source

00:07:58,080 --> 00:08:02,160
code again

00:07:59,120 --> 00:08:05,039
for different code snippets um

00:08:02,160 --> 00:08:05,599
uh copied from other places like from

00:08:05,039 --> 00:08:09,520
other

00:08:05,599 --> 00:08:12,560
uh or from any open source uh

00:08:09,520 --> 00:08:13,520
projects or from stack overflow and

00:08:12,560 --> 00:08:15,360
places

00:08:13,520 --> 00:08:17,120
like that so all of these steps are

00:08:15,360 --> 00:08:20,319
needed uh

00:08:17,120 --> 00:08:21,360
to get the full list of of open source

00:08:20,319 --> 00:08:24,720
components

00:08:21,360 --> 00:08:28,240
uh their licenses and their uh

00:08:24,720 --> 00:08:31,759
copyright information but then uh

00:08:28,240 --> 00:08:35,120
in step two which is a bit more simple

00:08:31,759 --> 00:08:37,919
we need to make a decision

00:08:35,120 --> 00:08:38,320
if the usage of the open source project

00:08:37,919 --> 00:08:40,959
is

00:08:38,320 --> 00:08:41,599
is okay or not and for this we need

00:08:40,959 --> 00:08:43,200
basically

00:08:41,599 --> 00:08:45,440
two steps so first of all we need the

00:08:43,200 --> 00:08:45,920
software structure analyzer which means

00:08:45,440 --> 00:08:50,720
that

00:08:45,920 --> 00:08:50,720
we need to be able to get a

00:08:52,160 --> 00:08:55,360
information about how the open source

00:08:53,760 --> 00:08:56,720
software is communicating with other

00:08:55,360 --> 00:08:57,920
parts of the software because some

00:08:56,720 --> 00:09:01,120
licenses

00:08:57,920 --> 00:09:04,560
have different um obligations

00:09:01,120 --> 00:09:08,640
for open source software

00:09:04,560 --> 00:09:11,600
um statically linked to other software

00:09:08,640 --> 00:09:12,480
um or dynamically links so that's that

00:09:11,600 --> 00:09:15,519
depends on these

00:09:12,480 --> 00:09:17,600
these uh these uh

00:09:15,519 --> 00:09:18,720
these architectural decisions and we

00:09:17,600 --> 00:09:21,680
need to analyze

00:09:18,720 --> 00:09:23,920
uh that structure and then we need uh

00:09:21,680 --> 00:09:27,839
basically a policy engine

00:09:23,920 --> 00:09:31,519
uh which makes a decision

00:09:27,839 --> 00:09:31,519
based on all of these information

00:09:32,320 --> 00:09:37,760
and then the next and last step is to

00:09:35,760 --> 00:09:38,720
fulfill the obligations therefore these

00:09:37,760 --> 00:09:40,560
we need basically

00:09:38,720 --> 00:09:42,160
two things we need an obligation

00:09:40,560 --> 00:09:44,480
database which means that

00:09:42,160 --> 00:09:45,680
that we need information about what

00:09:44,480 --> 00:09:49,279
license

00:09:45,680 --> 00:09:52,399
uh i have what obligations

00:09:49,279 --> 00:09:55,680
and and practically how to fulfill these

00:09:52,399 --> 00:09:55,680
and then we need uh

00:09:56,080 --> 00:10:00,399
some kind of a compliance bundle which

00:09:58,240 --> 00:10:00,720
fulfills all the obligations this can be

00:10:00,399 --> 00:10:04,480
like

00:10:00,720 --> 00:10:05,360
uh i don't know list of the copyright

00:10:04,480 --> 00:10:08,880
holders

00:10:05,360 --> 00:10:11,440
uh in the law documentation or

00:10:08,880 --> 00:10:12,560
or including the license text to the

00:10:11,440 --> 00:10:16,240
documentation

00:10:12,560 --> 00:10:19,839
or packaging code for

00:10:16,240 --> 00:10:19,839
for distribution this kind of things

00:10:20,000 --> 00:10:27,279
um and this all of these

00:10:23,120 --> 00:10:31,040
steps can happen in in different

00:10:27,279 --> 00:10:34,640
phases and different places in a in a

00:10:31,040 --> 00:10:38,160
a build pipeline so in the first case

00:10:34,640 --> 00:10:40,800
um this is happening in a

00:10:38,160 --> 00:10:41,920
in a totally distributed way so each of

00:10:40,800 --> 00:10:45,440
the builds

00:10:41,920 --> 00:10:47,760
uh execute these steps um

00:10:45,440 --> 00:10:48,640
in the scope of the of the specific

00:10:47,760 --> 00:10:51,760
build

00:10:48,640 --> 00:10:52,560
and uh i represented compliance and

00:10:51,760 --> 00:10:56,320
legal

00:10:52,560 --> 00:11:00,000
uh experts here with um

00:10:56,320 --> 00:11:02,720
with this small figure uh

00:11:00,000 --> 00:11:04,800
these information is injected to the

00:11:02,720 --> 00:11:08,079
somehow to the software artifacts

00:11:04,800 --> 00:11:10,000
uh as part of the of the code tree or

00:11:08,079 --> 00:11:12,000
or or something like that which is like

00:11:10,000 --> 00:11:14,480
in the context of the given

00:11:12,000 --> 00:11:15,920
uh build pipeline and every step is

00:11:14,480 --> 00:11:18,240
executed

00:11:15,920 --> 00:11:19,920
there and all the decisions are made

00:11:18,240 --> 00:11:23,680
based on these uh

00:11:19,920 --> 00:11:26,959
these policies um which are basically

00:11:23,680 --> 00:11:28,800
part of the of the source code the other

00:11:26,959 --> 00:11:32,000
uh

00:11:28,800 --> 00:11:35,120
architecture possibility is uh

00:11:32,000 --> 00:11:37,440
is to do everything uh

00:11:35,120 --> 00:11:39,680
in a centralized manner meaning that

00:11:37,440 --> 00:11:42,560
there is centralized set of tools

00:11:39,680 --> 00:11:43,920
which execute all of these steps and the

00:11:42,560 --> 00:11:47,200
build pipeline

00:11:43,920 --> 00:11:50,639
just feeds uh information to these

00:11:47,200 --> 00:11:53,120
these centralized tools and and get

00:11:50,639 --> 00:11:54,000
basically a decision and the compliance

00:11:53,120 --> 00:11:57,839
bundle

00:11:54,000 --> 00:12:00,959
at the end of the of the handling of

00:11:57,839 --> 00:12:02,399
of uh of the compliance and the the

00:12:00,959 --> 00:12:04,399
illegal and compliancy

00:12:02,399 --> 00:12:05,760
persons are are interacting with these

00:12:04,399 --> 00:12:08,079
uh

00:12:05,760 --> 00:12:10,639
these uh centralized tools and there is

00:12:08,079 --> 00:12:13,279
a of course a hybrid

00:12:10,639 --> 00:12:14,720
way when when some parts of of this

00:12:13,279 --> 00:12:17,519
process like the

00:12:14,720 --> 00:12:19,040
uh the composition analysis is done as a

00:12:17,519 --> 00:12:22,480
part of the pipeline

00:12:19,040 --> 00:12:24,240
and other ways uh are

00:12:22,480 --> 00:12:26,320
are done like the decision making and

00:12:24,240 --> 00:12:28,720
the bundle generation

00:12:26,320 --> 00:12:31,279
uh are done in the centralized tools and

00:12:28,720 --> 00:12:34,480
and uh in nokia we are using this third

00:12:31,279 --> 00:12:36,880
uh hybrid solution so all

00:12:34,480 --> 00:12:38,079
products are doing the compositionalizes

00:12:36,880 --> 00:12:39,760
themselves based on the

00:12:38,079 --> 00:12:41,440
the specific technologies that they are

00:12:39,760 --> 00:12:44,240
using and they are

00:12:41,440 --> 00:12:45,680
uh uploading all the data to a

00:12:44,240 --> 00:12:47,760
centralized tool

00:12:45,680 --> 00:12:51,600
and our legal and compliance colleagues

00:12:47,760 --> 00:12:53,600
are are doing their work

00:12:51,600 --> 00:12:54,800
interacting with centralized in with the

00:12:53,600 --> 00:12:57,040
centralized tool

00:12:54,800 --> 00:12:59,440
and the centralized tool is providing a

00:12:57,040 --> 00:13:02,560
result to the build pipeline and the

00:12:59,440 --> 00:13:05,040
and the compliance bundle so

00:13:02,560 --> 00:13:06,320
uh we are using this hybrid way of

00:13:05,040 --> 00:13:10,079
course it's possible to

00:13:06,320 --> 00:13:11,920
to to do any combinations uh like having

00:13:10,079 --> 00:13:13,440
only the decision in centralized place

00:13:11,920 --> 00:13:15,519
and moving down the

00:13:13,440 --> 00:13:17,040
the bundle duration to the pipeline it's

00:13:15,519 --> 00:13:20,560
up to the decision of

00:13:17,040 --> 00:13:23,920
of each company

00:13:20,560 --> 00:13:27,279
okay that was the um

00:13:23,920 --> 00:13:28,639
the part of the of the let's say the

00:13:27,279 --> 00:13:31,440
paperwork and let's

00:13:28,639 --> 00:13:35,040
uh hear about the the actual tools which

00:13:31,440 --> 00:13:37,440
are covering these steps

00:13:35,040 --> 00:13:38,399
yeah okay so i will talk a bit about uh

00:13:37,440 --> 00:13:40,720
some different

00:13:38,399 --> 00:13:42,000
compliance tools that we tested mostly

00:13:40,720 --> 00:13:45,279
during the summer

00:13:42,000 --> 00:13:46,880
and uh a bit uh what the

00:13:45,279 --> 00:13:50,160
features they bring and if they're

00:13:46,880 --> 00:13:52,880
actually any good uh to use

00:13:50,160 --> 00:13:53,600
okay but before uh i talked about that

00:13:52,880 --> 00:13:56,959
uh

00:13:53,600 --> 00:13:58,880
i want to briefly mention uh uh

00:13:56,959 --> 00:14:00,639
some things that we looked at when

00:13:58,880 --> 00:14:02,079
selecting uh which tools we were gonna

00:14:00,639 --> 00:14:04,639
investigate so

00:14:02,079 --> 00:14:06,079
firstly we wanted them to be open source

00:14:04,639 --> 00:14:08,639
and

00:14:06,079 --> 00:14:09,760
secondly we wanted them to be

00:14:08,639 --> 00:14:12,320
installable within

00:14:09,760 --> 00:14:13,519
a reasonable amount of time so maybe

00:14:12,320 --> 00:14:17,040
like a couple of days

00:14:13,519 --> 00:14:18,880
max okay let's dive into

00:14:17,040 --> 00:14:20,160
the tools so the first tool that we

00:14:18,880 --> 00:14:24,160
tested

00:14:20,160 --> 00:14:25,279
uh was the oss review toolkit or ort for

00:14:24,160 --> 00:14:28,000
short

00:14:25,279 --> 00:14:28,880
and uh it's an open source tool uh

00:14:28,000 --> 00:14:32,480
developed by

00:14:28,880 --> 00:14:34,320
here technologies and it has

00:14:32,480 --> 00:14:35,680
it's a toolkit consisting of different

00:14:34,320 --> 00:14:39,839
subtools

00:14:35,680 --> 00:14:42,959
so it has an analyzer tool which

00:14:39,839 --> 00:14:44,880
can do this dependency analysis and

00:14:42,959 --> 00:14:46,480
based on source code find all the

00:14:44,880 --> 00:14:49,040
dependencies

00:14:46,480 --> 00:14:50,320
and it works by using uh the different

00:14:49,040 --> 00:14:52,880
technology specific

00:14:50,320 --> 00:14:54,959
package manager so for example if it's a

00:14:52,880 --> 00:14:58,639
node.js project it will use

00:14:54,959 --> 00:15:01,920
npm to figure out all the dependencies

00:14:58,639 --> 00:15:05,519
and so on and

00:15:01,920 --> 00:15:09,199
yeah then it has a downloader tool

00:15:05,519 --> 00:15:12,079
which uses the analyzer results to

00:15:09,199 --> 00:15:13,760
to download the source code for each of

00:15:12,079 --> 00:15:16,880
the dependencies

00:15:13,760 --> 00:15:17,360
and uh it's quite sophisticated it can

00:15:16,880 --> 00:15:20,639
use

00:15:17,360 --> 00:15:21,279
also different version control tools

00:15:20,639 --> 00:15:25,040
like it

00:15:21,279 --> 00:15:30,160
to clone specific like

00:15:25,040 --> 00:15:32,800
uh versions of the softwares

00:15:30,160 --> 00:15:34,720
and then uh there's the scanner tool

00:15:32,800 --> 00:15:38,320
which

00:15:34,720 --> 00:15:39,519
does this as a static scanning of all

00:15:38,320 --> 00:15:42,639
the source code

00:15:39,519 --> 00:15:46,959
and for this by default it's using

00:15:42,639 --> 00:15:51,040
the scan code toolkit which is another

00:15:46,959 --> 00:15:55,199
static license and copyright

00:15:51,040 --> 00:15:58,480
analyzer and so yeah it uses that to

00:15:55,199 --> 00:16:00,720
to scan all of the components and uh

00:15:58,480 --> 00:16:02,880
figure out uh or find the licenses and

00:16:00,720 --> 00:16:06,320
copyright notices

00:16:02,880 --> 00:16:07,199
and uh after this there's an evaluator

00:16:06,320 --> 00:16:12,240
tool

00:16:07,199 --> 00:16:15,440
which can look at the scan results and

00:16:12,240 --> 00:16:19,600
and and apply some

00:16:15,440 --> 00:16:25,040
custom rules to basically decide if it's

00:16:19,600 --> 00:16:25,040
okay to use use the the the software so

00:16:25,120 --> 00:16:28,480
it has to be implemented in a kotlin

00:16:28,079 --> 00:16:30,079
based

00:16:28,480 --> 00:16:32,720
domain specific language so you can

00:16:30,079 --> 00:16:34,560
write the scripts

00:16:32,720 --> 00:16:35,759
that specify these rules so for example

00:16:34,560 --> 00:16:38,320
you could

00:16:35,759 --> 00:16:39,120
you could disallow using uh some

00:16:38,320 --> 00:16:42,639
copyleft

00:16:39,120 --> 00:16:44,399
licenses or something like that

00:16:42,639 --> 00:16:46,240
there's the reporter tool which can

00:16:44,399 --> 00:16:48,160
generate reports in

00:16:46,240 --> 00:16:51,759
good looking human readable formats for

00:16:48,160 --> 00:16:54,480
example html and pdf and and so on

00:16:51,759 --> 00:16:56,320
and yeah each of these tools uh like

00:16:54,480 --> 00:16:59,839
depend on the previous one for

00:16:56,320 --> 00:17:04,079
for uh input files so they can be run in

00:16:59,839 --> 00:17:06,160
this kind of pipeline way and uh

00:17:04,079 --> 00:17:07,520
yeah i think i didn't mention it's uh

00:17:06,160 --> 00:17:11,039
it's a cli tool so

00:17:07,520 --> 00:17:14,319
um it can be run in scripts or or

00:17:11,039 --> 00:17:19,039
on some cicd services or or whatever

00:17:14,319 --> 00:17:22,160
okay up next is turn which is a tool uh

00:17:19,039 --> 00:17:25,280
developed by vmware which is focused on

00:17:22,160 --> 00:17:27,199
container analysis and finding uh the

00:17:25,280 --> 00:17:30,960
bill of materials for for

00:17:27,199 --> 00:17:34,240
container images and

00:17:30,960 --> 00:17:36,720
it works it's like a dynamic uh

00:17:34,240 --> 00:17:37,360
analysis so it works by mounting the

00:17:36,720 --> 00:17:40,080
different

00:17:37,360 --> 00:17:40,480
layers of the image and then running

00:17:40,080 --> 00:17:42,799
some

00:17:40,480 --> 00:17:44,000
shell scripts inside of them to find

00:17:42,799 --> 00:17:48,559
find uh

00:17:44,000 --> 00:17:52,320
find out the installed packages uh

00:17:48,559 --> 00:17:55,440
and uh yeah it can also use

00:17:52,320 --> 00:17:56,640
uh as extensions this this scan code

00:17:55,440 --> 00:17:59,679
toolkit

00:17:56,640 --> 00:18:01,440
for uh static analysis of all the files

00:17:59,679 --> 00:18:04,640
in the container

00:18:01,440 --> 00:18:07,679
and also this cve binary tool

00:18:04,640 --> 00:18:09,919
for vulnerability scanning so it can

00:18:07,679 --> 00:18:13,039
detect if there's some

00:18:09,919 --> 00:18:15,679
some package that has known

00:18:13,039 --> 00:18:18,559
vulnerability

00:18:15,679 --> 00:18:19,520
and yeah it can also it generates

00:18:18,559 --> 00:18:22,640
reports in different

00:18:19,520 --> 00:18:26,640
formats like html and also

00:18:22,640 --> 00:18:29,760
spdx yeah

00:18:26,640 --> 00:18:30,640
okay uh the next tool is licensed it's a

00:18:29,760 --> 00:18:35,440
tool developed by

00:18:30,640 --> 00:18:38,000
github and uh it's

00:18:35,440 --> 00:18:39,280
quite similar to to the ort in its

00:18:38,000 --> 00:18:42,960
features or

00:18:39,280 --> 00:18:45,840
but so it can do a dependency analysis

00:18:42,960 --> 00:18:47,679
based on source code and also using

00:18:45,840 --> 00:18:50,799
these different uh

00:18:47,679 --> 00:18:54,559
technology specific package managers

00:18:50,799 --> 00:18:58,480
and uh but it can't uh download

00:18:54,559 --> 00:19:01,120
the source code so but instead it has a

00:18:58,480 --> 00:19:03,200
feature to fetch the licenses for each

00:19:01,120 --> 00:19:07,039
dependency

00:19:03,200 --> 00:19:07,039
and based on that

00:19:07,360 --> 00:19:11,840
you can write in a config file a list of

00:19:10,160 --> 00:19:13,679
allowed licenses and

00:19:11,840 --> 00:19:15,600
so it can check against that list if

00:19:13,679 --> 00:19:16,240
there are any licenses that are not

00:19:15,600 --> 00:19:19,520
allowed

00:19:16,240 --> 00:19:22,240
and then it can generate some

00:19:19,520 --> 00:19:23,520
reports for each component of the of the

00:19:22,240 --> 00:19:27,120
project

00:19:23,520 --> 00:19:27,120
in this notice format

00:19:28,000 --> 00:19:34,799
okay up next is this fosa cli

00:19:31,760 --> 00:19:38,000
which is uh very similar to licensed i

00:19:34,799 --> 00:19:41,200
think in its features

00:19:38,000 --> 00:19:41,520
so it can also uh do in a similar way

00:19:41,200 --> 00:19:44,799
this

00:19:41,520 --> 00:19:46,799
dependency analysis uh

00:19:44,799 --> 00:19:48,480
but unfortunately that's the only

00:19:46,799 --> 00:19:50,160
feature that uh

00:19:48,480 --> 00:19:52,080
or the rest of the features require you

00:19:50,160 --> 00:19:55,280
to to set up an

00:19:52,080 --> 00:19:55,919
api key with fosa.com so you have to

00:19:55,280 --> 00:19:59,360
sign up to

00:19:55,919 --> 00:20:01,760
their services so

00:19:59,360 --> 00:20:02,799
yeah the the dependency analysis part is

00:20:01,760 --> 00:20:06,400
like the only

00:20:02,799 --> 00:20:10,159
part that can be run without this setup

00:20:06,400 --> 00:20:13,200
so but it has uh features to

00:20:10,159 --> 00:20:17,120
check for also uh

00:20:13,200 --> 00:20:20,640
license policy violations that

00:20:17,120 --> 00:20:24,080
on fossa.com and also generate reports

00:20:20,640 --> 00:20:24,080
and and things like that

00:20:24,320 --> 00:20:31,600
okay up next is fossology which is

00:20:27,520 --> 00:20:34,480
a linux foundation project uh

00:20:31,600 --> 00:20:35,039
which it's mainly focused on on scanning

00:20:34,480 --> 00:20:38,720
and

00:20:35,039 --> 00:20:42,159
reviewing so it can't do this dependency

00:20:38,720 --> 00:20:47,039
analysis but

00:20:42,159 --> 00:20:47,039
you can upload a

00:20:47,440 --> 00:20:53,840
uh to

00:20:50,559 --> 00:20:56,400
their database using this web ui and

00:20:53,840 --> 00:20:58,480
it has two different license and

00:20:56,400 --> 00:21:03,039
copyright scanners

00:20:58,480 --> 00:21:07,440
and which try to complement each other

00:21:03,039 --> 00:21:09,919
and then based on the results you can

00:21:07,440 --> 00:21:13,120
do some manual uh clearing or and

00:21:09,919 --> 00:21:13,120
reviewing so you can uh

00:21:13,840 --> 00:21:18,080
look at all the licenses found and and

00:21:16,400 --> 00:21:21,760
even correct if there's something that

00:21:18,080 --> 00:21:25,360
you think is wrong and uh and uh

00:21:21,760 --> 00:21:25,679
yeah and uh yeah so it's a it's a web ui

00:21:25,360 --> 00:21:28,000
but

00:21:25,679 --> 00:21:28,880
the web ui looks a bit outdated in my

00:21:28,000 --> 00:21:31,039
opinion

00:21:28,880 --> 00:21:34,320
and finally it can generate the reports

00:21:31,039 --> 00:21:34,320
in different different formats

00:21:34,880 --> 00:21:38,880
okay up next is software 360 antenna

00:21:37,840 --> 00:21:43,200
which is a

00:21:38,880 --> 00:21:46,720
tool developed by eclipse and

00:21:43,200 --> 00:21:50,640
it can do dependency analysis using this

00:21:46,720 --> 00:21:53,200
maven dependency tree or firstly uh

00:21:50,640 --> 00:21:54,559
i can mention that it can be like

00:21:53,200 --> 00:21:58,799
installed as a maven

00:21:54,559 --> 00:22:02,159
or a gradle plugin so if you're

00:21:58,799 --> 00:22:03,840
using maven or radal you can use it as a

00:22:02,159 --> 00:22:06,400
plugin so that's quite neat

00:22:03,840 --> 00:22:08,080
you can include it like in in a build

00:22:06,400 --> 00:22:10,960
step

00:22:08,080 --> 00:22:12,080
okay but anyway so it can do dependency

00:22:10,960 --> 00:22:15,520
analysis using this

00:22:12,080 --> 00:22:18,720
maven dependency 3 analyzer but

00:22:15,520 --> 00:22:21,760
that's primarily for java projects

00:22:18,720 --> 00:22:23,120
so if it's another type of project you

00:22:21,760 --> 00:22:27,120
can

00:22:23,120 --> 00:22:29,840
feed it ort analyzer results instead

00:22:27,120 --> 00:22:31,120
and it can do download source code and

00:22:29,840 --> 00:22:34,320
licenses using this

00:22:31,120 --> 00:22:36,880
maven artifact resolver but again that's

00:22:34,320 --> 00:22:38,720
primarily for for java projects so

00:22:36,880 --> 00:22:41,840
but if it's another type of project you

00:22:38,720 --> 00:22:44,000
can use the ort downloader

00:22:41,840 --> 00:22:45,600
it's like included so you can use that

00:22:44,000 --> 00:22:48,720
to download

00:22:45,600 --> 00:22:48,720
the source code and

00:22:49,600 --> 00:22:57,280
it can check for forbidden licenses also

00:22:54,000 --> 00:22:59,200
uh as configured in your config file

00:22:57,280 --> 00:23:01,039
and uh you can generate reports in

00:22:59,200 --> 00:23:01,600
different formats like most of the other

00:23:01,039 --> 00:23:05,840
tools and

00:23:01,600 --> 00:23:08,880
uh but it can also be integrated into

00:23:05,840 --> 00:23:09,280
eclipse's software 360 platform which is

00:23:08,880 --> 00:23:12,650
an

00:23:09,280 --> 00:23:13,840
open source software catalog app

00:23:12,650 --> 00:23:16,559
[Music]

00:23:13,840 --> 00:23:18,799
so you can view later your results there

00:23:16,559 --> 00:23:23,120
in like a web interface and

00:23:18,799 --> 00:23:25,360
and things like that okay

00:23:23,120 --> 00:23:27,919
yeah the last tool that we looked at was

00:23:25,360 --> 00:23:31,840
this go licenses tool which is a

00:23:27,919 --> 00:23:31,840
tool developed by google which is uh

00:23:32,480 --> 00:23:35,340
it can detect dependencies for go

00:23:34,640 --> 00:23:38,400
projects

00:23:35,340 --> 00:23:41,840
[Music]

00:23:38,400 --> 00:23:45,039
but no we noticed that it doesn't detect

00:23:41,840 --> 00:23:48,080
versions so that's a bit of a downside

00:23:45,039 --> 00:23:50,480
and it can

00:23:48,080 --> 00:23:51,840
it has a feature to collect all the

00:23:50,480 --> 00:23:55,039
artifacts needed for

00:23:51,840 --> 00:23:55,039
license complaints so

00:23:55,679 --> 00:23:59,200
it can figure out the licenses of all

00:23:57,520 --> 00:24:00,960
the dependencies and

00:23:59,200 --> 00:24:02,320
based on those it can collect the

00:24:00,960 --> 00:24:04,320
license text and

00:24:02,320 --> 00:24:06,320
and copyright notices and even source

00:24:04,320 --> 00:24:08,960
code for licenses that

00:24:06,320 --> 00:24:11,200
require it and collect all of that into

00:24:08,960 --> 00:24:16,080
a single folder so that's quite

00:24:11,200 --> 00:24:19,120
neat and it can also check for forbidden

00:24:16,080 --> 00:24:22,159
licenses according to google's

00:24:19,120 --> 00:24:25,279
license classifier and generate

00:24:22,159 --> 00:24:25,279
csv reports

00:24:27,760 --> 00:24:32,080
okay finally i've made this comparison

00:24:30,799 --> 00:24:35,440
table to

00:24:32,080 --> 00:24:39,360
kind of compare all of the tools so

00:24:35,440 --> 00:24:39,360
uh up top we have the tools and

00:24:39,520 --> 00:24:45,679
some steps in in compliance

00:24:42,640 --> 00:24:47,520
so yeah from this we can see that

00:24:45,679 --> 00:24:49,360
there's no no tool that can uh

00:24:47,520 --> 00:24:50,799
perform all of these these steps

00:24:49,360 --> 00:24:52,960
perfectly

00:24:50,799 --> 00:24:54,240
and some are are of course overlapping

00:24:52,960 --> 00:24:57,360
in their their features

00:24:54,240 --> 00:24:57,360
but yeah

00:24:58,840 --> 00:25:02,960
um

00:25:01,360 --> 00:25:05,679
and with this village the end of our

00:25:02,960 --> 00:25:08,400
presentation uh

00:25:05,679 --> 00:25:09,919
thank you for uh for listening to us and

00:25:08,400 --> 00:25:13,840
if you have any questions please

00:25:09,919 --> 00:25:14,320
use the conference platform to contact

00:25:13,840 --> 00:25:17,200
to us

00:25:14,320 --> 00:25:18,720
or you can just use your or contact

00:25:17,200 --> 00:25:21,840
information

00:25:18,720 --> 00:25:28,159
with this we would like to thank you and

00:25:21,840 --> 00:25:30,240
have a nice conference

00:25:28,159 --> 00:25:30,240

YouTube URL: https://www.youtube.com/watch?v=tO1sVvo2n4s


