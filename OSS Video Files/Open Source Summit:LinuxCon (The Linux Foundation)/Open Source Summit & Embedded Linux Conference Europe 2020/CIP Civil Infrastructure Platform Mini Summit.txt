Title: CIP Civil Infrastructure Platform Mini Summit
Publication date: 2020-10-30
Playlist: Open Source Summit & Embedded Linux Conference Europe 2020
Description: 
	CIP Civil Infrastructure Platform Mini Summit
Captions: 
	00:00:00,880 --> 00:00:04,400
thank you very much for joining us cip

00:00:02,800 --> 00:00:07,839
mini summit europe

00:00:04,400 --> 00:00:10,960
uh this is assad mini summit

00:00:07,839 --> 00:00:17,920
uh we are very uh pleased to have

00:00:10,960 --> 00:00:17,920
this uh yeah mini summit for this time

00:00:18,480 --> 00:00:21,520
oh sorry

00:00:24,080 --> 00:00:31,840
yeah maybe i i need to mute

00:00:48,000 --> 00:00:53,360
uh so the first uh presentation

00:00:51,360 --> 00:00:55,120
uh will be a state of civil

00:00:53,360 --> 00:00:57,760
infrastructure platform

00:00:55,120 --> 00:00:59,440
by russ graham from siemens and yosaki

00:00:57,760 --> 00:01:04,000
quest from toshiba

00:00:59,440 --> 00:01:04,000
so else please start your presentation

00:01:07,119 --> 00:01:13,600
ok thank you yoshi

00:01:10,479 --> 00:01:14,720
yes uh as always we start for the people

00:01:13,600 --> 00:01:16,799
who are new

00:01:14,720 --> 00:01:18,640
uh to this topic uh with a short

00:01:16,799 --> 00:01:20,880
introduction what is a civil

00:01:18,640 --> 00:01:23,920
infrastructure platform

00:01:20,880 --> 00:01:25,840
and um yeah maybe

00:01:23,920 --> 00:01:28,880
yoshi can you go to the next slide or

00:01:25,840 --> 00:01:31,920
should i take over sharing

00:01:28,880 --> 00:01:35,200
okay um

00:01:31,920 --> 00:01:37,439
yeah we have some trends in industry

00:01:35,200 --> 00:01:39,840
and also in what we call civil

00:01:37,439 --> 00:01:42,560
infrastructure which is all the systems

00:01:39,840 --> 00:01:42,560
keeping our

00:01:43,680 --> 00:01:49,920
systems for life our civil systems like

00:01:46,720 --> 00:01:53,040
power and water and transportation

00:01:49,920 --> 00:01:55,840
up and running and

00:01:53,040 --> 00:01:55,840
can you move on

00:01:56,399 --> 00:02:03,280
next slide so uh what what we see

00:02:00,000 --> 00:02:04,560
around us it uh that things get smarter

00:02:03,280 --> 00:02:07,040
that means they get

00:02:04,560 --> 00:02:08,479
processes integrated but also they get

00:02:07,040 --> 00:02:11,520
connected

00:02:08,479 --> 00:02:13,440
and they are connected among each other

00:02:11,520 --> 00:02:15,599
and connected to the internet

00:02:13,440 --> 00:02:17,680
and that's not only in this obvious

00:02:15,599 --> 00:02:20,160
cases like the connected cars if you

00:02:17,680 --> 00:02:23,360
look at car sharing

00:02:20,160 --> 00:02:26,400
offers uh it's also in systems which

00:02:23,360 --> 00:02:30,239
are not so visible so in the

00:02:26,400 --> 00:02:33,440
production of factories and and

00:02:30,239 --> 00:02:37,360
also in systems uh

00:02:33,440 --> 00:02:39,680
who make our cities smart that means

00:02:37,360 --> 00:02:40,640
we make the traffic control more

00:02:39,680 --> 00:02:43,920
intelligence

00:02:40,640 --> 00:02:46,800
we have new transportation

00:02:43,920 --> 00:02:48,959
ideas which are possible with this

00:02:46,800 --> 00:02:50,239
energy management is optimized and so

00:02:48,959 --> 00:02:52,959
forth

00:02:50,239 --> 00:02:52,959
next slide

00:02:54,959 --> 00:02:58,720
yeah and maybe just click through the

00:02:57,519 --> 00:03:00,959
animation so

00:02:58,720 --> 00:03:02,879
this is just a few examples of the

00:03:00,959 --> 00:03:06,000
systems we don't see

00:03:02,879 --> 00:03:09,360
every day and they

00:03:06,000 --> 00:03:10,319
are really running 24 7 for the whole

00:03:09,360 --> 00:03:13,360
year

00:03:10,319 --> 00:03:16,720
and some of these systems are really

00:03:13,360 --> 00:03:19,920
at critical places so we need to ensure

00:03:16,720 --> 00:03:23,130
that they are up and running and

00:03:19,920 --> 00:03:25,920
yeah because of this special

00:03:23,130 --> 00:03:28,959
[Music]

00:03:25,920 --> 00:03:30,720
purpose of these systems um we have some

00:03:28,959 --> 00:03:33,519
certain requirements

00:03:30,720 --> 00:03:36,080
if if we compare this to the home

00:03:33,519 --> 00:03:38,319
automation and more consumer oriented

00:03:36,080 --> 00:03:41,599
systems

00:03:38,319 --> 00:03:43,519
these systems have uh differences

00:03:41,599 --> 00:03:46,560
compared to that world

00:03:43,519 --> 00:03:50,640
on the next slide we see then uh

00:03:46,560 --> 00:03:55,120
that just just open the

00:03:50,640 --> 00:03:58,400
the next animation so one more click um

00:03:55,120 --> 00:04:01,840
that things get much more complex in

00:03:58,400 --> 00:04:04,480
in in this area so if if you look

00:04:01,840 --> 00:04:06,799
what we know so we know our smartphones

00:04:04,480 --> 00:04:10,000
and we know our home automation

00:04:06,799 --> 00:04:12,000
things which are basically uh one-to-one

00:04:10,000 --> 00:04:13,280
connections of one device to cloud

00:04:12,000 --> 00:04:15,920
services

00:04:13,280 --> 00:04:16,479
um in in the systems we are talking

00:04:15,920 --> 00:04:19,040
about

00:04:16,479 --> 00:04:19,519
uh we have much more systems interacting

00:04:19,040 --> 00:04:23,680
we have

00:04:19,519 --> 00:04:25,520
uh higher hierarchies of of systems

00:04:23,680 --> 00:04:26,880
and as as i already mentioned these

00:04:25,520 --> 00:04:29,360
systems have to uh

00:04:26,880 --> 00:04:30,479
have to be robust and up and running all

00:04:29,360 --> 00:04:32,320
the time

00:04:30,479 --> 00:04:33,680
and we have other non-functional

00:04:32,320 --> 00:04:35,680
requirements like

00:04:33,680 --> 00:04:37,600
real-time requirements for example we

00:04:35,680 --> 00:04:40,240
need guaranteed latencies for

00:04:37,600 --> 00:04:41,520
some tasks we have guarantees of

00:04:40,240 --> 00:04:46,639
throughput and

00:04:41,520 --> 00:04:46,639
responsiveness and so

00:04:47,520 --> 00:04:52,240
that's why companies like the companies

00:04:50,080 --> 00:04:55,919
who are running cip

00:04:52,240 --> 00:04:56,479
um are really interested in focusing on

00:04:55,919 --> 00:04:58,800
that

00:04:56,479 --> 00:04:59,520
topics which are not addressed by the

00:04:58,800 --> 00:05:02,800
typical

00:04:59,520 --> 00:05:06,240
commodity and consumer

00:05:02,800 --> 00:05:07,199
technologies at the moment let's go to

00:05:06,240 --> 00:05:11,360
the next slide

00:05:07,199 --> 00:05:14,320
so that we see that one of these aspects

00:05:11,360 --> 00:05:15,280
is that these systems live really long

00:05:14,320 --> 00:05:17,919
so this is

00:05:15,280 --> 00:05:18,880
maybe an extreme example but the power

00:05:17,919 --> 00:05:22,160
plant

00:05:18,880 --> 00:05:24,960
runs for 25 to 60 years

00:05:22,160 --> 00:05:25,440
and has to be maintained for that time

00:05:24,960 --> 00:05:29,199
so

00:05:25,440 --> 00:05:32,560
uh and uh

00:05:29,199 --> 00:05:35,759
a special um thing in this

00:05:32,560 --> 00:05:38,800
platforms is that we cannot

00:05:35,759 --> 00:05:40,800
update things and always run the latest

00:05:38,800 --> 00:05:44,479
and greatest

00:05:40,800 --> 00:05:46,800
software version so

00:05:44,479 --> 00:05:47,840
because there is certification behind

00:05:46,800 --> 00:05:50,840
and there's a

00:05:47,840 --> 00:05:52,240
huge amount of tests and and

00:05:50,840 --> 00:05:55,440
verifications

00:05:52,240 --> 00:05:56,960
done to to guarantee the robustness of

00:05:55,440 --> 00:06:00,400
these systems

00:05:56,960 --> 00:06:01,680
so that means that people running this

00:06:00,400 --> 00:06:04,720
system

00:06:01,680 --> 00:06:08,240
and now we are coming back to um

00:06:04,720 --> 00:06:10,800
to our basic uh

00:06:08,240 --> 00:06:12,000
topic which is linux as an operating

00:06:10,800 --> 00:06:15,360
system

00:06:12,000 --> 00:06:18,000
uh they cannot uh

00:06:15,360 --> 00:06:19,280
update the operating system every every

00:06:18,000 --> 00:06:22,319
few years

00:06:19,280 --> 00:06:25,280
so they want to run a certain

00:06:22,319 --> 00:06:26,000
version as long as possible this means

00:06:25,280 --> 00:06:28,160
this version

00:06:26,000 --> 00:06:29,280
has to be maintained for quite a long

00:06:28,160 --> 00:06:32,319
time

00:06:29,280 --> 00:06:34,639
maybe not for 25 and not for 60 years

00:06:32,319 --> 00:06:36,479
but we are definitely not changing the

00:06:34,639 --> 00:06:39,600
operating systems

00:06:36,479 --> 00:06:41,520
uh every two three four years in these

00:06:39,600 --> 00:06:44,479
kinds of systems

00:06:41,520 --> 00:06:44,479
next slide please

00:06:45,600 --> 00:06:49,840
yes i said everything gets connected uh

00:06:48,479 --> 00:06:54,000
this imposes new

00:06:49,840 --> 00:06:56,560
um risks in terms of security

00:06:54,000 --> 00:06:58,639
so um we have to ensure that all our

00:06:56,560 --> 00:07:02,080
devices are secure

00:06:58,639 --> 00:07:05,919
and this in most cases means

00:07:02,080 --> 00:07:09,120
that we have to be able to

00:07:05,919 --> 00:07:12,880
update things online and

00:07:09,120 --> 00:07:15,120
um so we we have to maintain these

00:07:12,880 --> 00:07:18,560
security holes

00:07:15,120 --> 00:07:21,840
because these systems are reachable now

00:07:18,560 --> 00:07:23,840
and we have to be able to

00:07:21,840 --> 00:07:25,039
do the firmware updates of all these

00:07:23,840 --> 00:07:28,720
devices

00:07:25,039 --> 00:07:31,120
and this in older systems

00:07:28,720 --> 00:07:33,520
was just not a topic because there was

00:07:31,120 --> 00:07:35,360
no network connection so the only way to

00:07:33,520 --> 00:07:38,080
access the system was to drive

00:07:35,360 --> 00:07:39,120
by and to have physical access to the

00:07:38,080 --> 00:07:42,080
system

00:07:39,120 --> 00:07:42,080
next slide please

00:07:43,360 --> 00:07:49,919
yes and this summary is uh

00:07:46,479 --> 00:07:52,400
the special requirements of of the

00:07:49,919 --> 00:07:54,479
products uh we have in our company

00:07:52,400 --> 00:07:56,400
so they are industrial grade this means

00:07:54,479 --> 00:07:58,479
we have non-functional requirements like

00:07:56,400 --> 00:08:00,240
reliability functional safety real-time

00:07:58,479 --> 00:08:03,759
capabilities

00:08:00,240 --> 00:08:06,400
we have these long-running systems so

00:08:03,759 --> 00:08:08,319
we need to guarantee the maintenance for

00:08:06,400 --> 00:08:10,479
the whole lifetime

00:08:08,319 --> 00:08:12,080
and connected to this we have to ensure

00:08:10,479 --> 00:08:13,599
that these systems are secure

00:08:12,080 --> 00:08:15,360
especially if they are placed at

00:08:13,599 --> 00:08:19,680
critical

00:08:15,360 --> 00:08:22,639
spots in our infrastructure and

00:08:19,680 --> 00:08:22,639
next slide please

00:08:24,319 --> 00:08:31,599
now the question is how to solve this uh

00:08:28,319 --> 00:08:35,919
and uh there's another trend going on

00:08:31,599 --> 00:08:39,039
and uh even in those companies uh

00:08:35,919 --> 00:08:42,080
we are using a lot

00:08:39,039 --> 00:08:42,800
more commodity software as a couple of

00:08:42,080 --> 00:08:45,920
years

00:08:42,800 --> 00:08:46,959
ago and we are focusing basically on the

00:08:45,920 --> 00:08:49,279
domain specific

00:08:46,959 --> 00:08:50,000
applications on top but the software

00:08:49,279 --> 00:08:53,440
stack

00:08:50,000 --> 00:08:57,279
underneath gets bigger and bigger and

00:08:53,440 --> 00:09:01,440
most of it is open source today

00:08:57,279 --> 00:09:04,560
and as i said at the beginning

00:09:01,440 --> 00:09:08,080
the many projects do not address

00:09:04,560 --> 00:09:11,200
these civil infrastructure needs

00:09:08,080 --> 00:09:12,160
and industrial needs to to the extent we

00:09:11,200 --> 00:09:14,560
needed

00:09:12,160 --> 00:09:15,519
and that's why we said it makes sense to

00:09:14,560 --> 00:09:18,160
team up

00:09:15,519 --> 00:09:18,560
and address several character challenges

00:09:18,160 --> 00:09:22,560
in

00:09:18,560 --> 00:09:26,480
in this area next slide

00:09:22,560 --> 00:09:28,560
so we have more and more devices

00:09:26,480 --> 00:09:29,920
they are connected we have similar

00:09:28,560 --> 00:09:31,360
software components and

00:09:29,920 --> 00:09:34,959
we have these industrial iot

00:09:31,360 --> 00:09:37,760
requirements and

00:09:34,959 --> 00:09:38,320
we started from a world where we really

00:09:37,760 --> 00:09:41,440
have

00:09:38,320 --> 00:09:44,560
a lot of different flavors and uh

00:09:41,440 --> 00:09:48,000
versions uh of the operating system

00:09:44,560 --> 00:09:51,839
out there so every company and it was

00:09:48,000 --> 00:09:55,279
actually even worse every every unit in

00:09:51,839 --> 00:10:00,320
a company was maintaining their own

00:09:55,279 --> 00:10:03,440
uh linux flavor and

00:10:00,320 --> 00:10:05,600
this of course increased the maintenance

00:10:03,440 --> 00:10:08,560
effort a lot

00:10:05,600 --> 00:10:10,480
and so that's why we said we need a

00:10:08,560 --> 00:10:12,399
common solution for these base building

00:10:10,480 --> 00:10:15,760
blocks team up to achieve a better

00:10:12,399 --> 00:10:19,680
quality a better sustainability

00:10:15,760 --> 00:10:21,440
and also of course to to share the costs

00:10:19,680 --> 00:10:24,880
of doing this

00:10:21,440 --> 00:10:24,880
so the next slide please

00:10:26,480 --> 00:10:29,680
yeah that's why we said we need a base

00:10:28,880 --> 00:10:31,600
layer

00:10:29,680 --> 00:10:32,720
uh and we start with the operating

00:10:31,600 --> 00:10:36,079
system and

00:10:32,720 --> 00:10:36,640
uh in more detail we started actually

00:10:36,079 --> 00:10:40,320
with

00:10:36,640 --> 00:10:42,880
with a linux kernel and on top of this

00:10:40,320 --> 00:10:44,560
we want to build our own flavors of

00:10:42,880 --> 00:10:46,640
course there are still flavors for the

00:10:44,560 --> 00:10:49,680
different domains but the

00:10:46,640 --> 00:10:52,399
common parts are getting more and more

00:10:49,680 --> 00:10:52,399
next slide

00:10:53,360 --> 00:10:57,360
so how does this look like so we have a

00:10:55,360 --> 00:11:01,519
typical linux

00:10:57,360 --> 00:11:04,640
distribution of hundreds of packages and

00:11:01,519 --> 00:11:07,920
we started with the linux code

00:11:04,640 --> 00:11:10,959
because that's also something we

00:11:07,920 --> 00:11:14,560
can handle in the setup and

00:11:10,959 --> 00:11:17,839
we are extending step by step

00:11:14,560 --> 00:11:18,480
to add some more packages which are kind

00:11:17,839 --> 00:11:21,120
of the

00:11:18,480 --> 00:11:23,279
least common denominator of what

00:11:21,120 --> 00:11:25,920
everybody needs to build a company

00:11:23,279 --> 00:11:25,920
specific

00:11:26,320 --> 00:11:32,399
operating system plus extensions

00:11:29,760 --> 00:11:32,399
next slide

00:11:34,320 --> 00:11:37,920
okay and if we zoom out it looks

00:11:36,880 --> 00:11:41,040
basically like

00:11:37,920 --> 00:11:42,880
this so we have the open source world on

00:11:41,040 --> 00:11:46,560
the left

00:11:42,880 --> 00:11:51,040
and the company world on the right side

00:11:46,560 --> 00:11:53,040
so we we have cip as a base

00:11:51,040 --> 00:11:54,079
uh have the domain specific and

00:11:53,040 --> 00:11:56,800
companies

00:11:54,079 --> 00:11:58,399
specific extensions on top and that's

00:11:56,800 --> 00:12:02,000
what we would call

00:11:58,399 --> 00:12:06,320
an internal distribution and um

00:12:02,000 --> 00:12:09,440
by doing this uh we achieve also um

00:12:06,320 --> 00:12:12,079
a harmonization inside the companies to

00:12:09,440 --> 00:12:14,079
to build on the same software stack to

00:12:12,079 --> 00:12:14,880
use the same tools to use the same

00:12:14,079 --> 00:12:18,000
software

00:12:14,880 --> 00:12:19,440
testing infrastructure but yoshi will

00:12:18,000 --> 00:12:22,839
come to this

00:12:19,440 --> 00:12:26,240
later okay

00:12:22,839 --> 00:12:29,120
so looking at the timeline uh

00:12:26,240 --> 00:12:29,760
we said we are at the moment targeting

00:12:29,120 --> 00:12:33,519
the

00:12:29,760 --> 00:12:37,120
10 years plus a scope

00:12:33,519 --> 00:12:38,560
so um this shows a little bit already

00:12:37,120 --> 00:12:41,519
how we do this

00:12:38,560 --> 00:12:44,160
so we are closely aligned to debian uh

00:12:41,519 --> 00:12:46,480
and the debian long-term support

00:12:44,160 --> 00:12:47,200
uh what we are adding is the hardware

00:12:46,480 --> 00:12:49,920
support

00:12:47,200 --> 00:12:51,680
uh for for for the embedded platforms we

00:12:49,920 --> 00:12:53,680
need to support

00:12:51,680 --> 00:12:55,519
that's basically decided by the member

00:12:53,680 --> 00:12:58,880
companies

00:12:55,519 --> 00:13:02,240
and so we

00:12:58,880 --> 00:13:03,600
continue to do the security fixes and to

00:13:02,240 --> 00:13:06,720
a certain extent

00:13:03,600 --> 00:13:08,800
back parts of new features we'll come to

00:13:06,720 --> 00:13:12,639
that later

00:13:08,800 --> 00:13:13,839
next slide so for those of you who are

00:13:12,639 --> 00:13:18,320
not familiar to

00:13:13,839 --> 00:13:21,760
how open source efforts are organized

00:13:18,320 --> 00:13:24,560
just a rough overview so we have a

00:13:21,760 --> 00:13:25,680
bunch of companies on the top so uh here

00:13:24,560 --> 00:13:29,120
you see

00:13:25,680 --> 00:13:32,480
also who is already um

00:13:29,120 --> 00:13:36,160
participating here and

00:13:32,480 --> 00:13:38,320
these companies uh provide uh

00:13:36,160 --> 00:13:40,800
of course people who are driving this

00:13:38,320 --> 00:13:44,000
otherwise it's not working

00:13:40,800 --> 00:13:48,320
and they are also providing a budget

00:13:44,000 --> 00:13:51,120
and uh with this budget we can then

00:13:48,320 --> 00:13:51,680
fund additional people so to ensure

00:13:51,120 --> 00:13:54,800
really

00:13:51,680 --> 00:13:58,160
the the the sustainable of the

00:13:54,800 --> 00:13:58,560
development team itself but what we also

00:13:58,160 --> 00:14:00,800
do

00:13:58,560 --> 00:14:02,399
and um yoshi will talk about the

00:14:00,800 --> 00:14:05,600
upstream first

00:14:02,399 --> 00:14:09,040
strategy also um we

00:14:05,600 --> 00:14:10,160
are also pushing activities or funding

00:14:09,040 --> 00:14:12,959
activities in

00:14:10,160 --> 00:14:15,120
other open source projects which are

00:14:12,959 --> 00:14:19,519
part of our software stack at the end

00:14:15,120 --> 00:14:23,440
so we try to not reinvent the wheel

00:14:19,519 --> 00:14:24,720
and we we try to wherever possible to

00:14:23,440 --> 00:14:28,639
build on existing

00:14:24,720 --> 00:14:32,160
open source activities and extend them

00:14:28,639 --> 00:14:35,920
by the needs of civil infrastructure

00:14:32,160 --> 00:14:38,560
products and industry products

00:14:35,920 --> 00:14:38,560
next slide

00:14:42,800 --> 00:14:50,160
so from now on uh i'd like to uh

00:14:46,720 --> 00:14:53,279
yeah ex explain uh how we

00:14:50,160 --> 00:14:56,480
are working for

00:14:53,279 --> 00:15:01,199
ensuring the cip base layer

00:14:56,480 --> 00:15:04,399
to establish the sustainable products

00:15:01,199 --> 00:15:07,680
and this is our scope of activities

00:15:04,399 --> 00:15:10,720
so each box shows some

00:15:07,680 --> 00:15:13,040
technical topics

00:15:10,720 --> 00:15:15,360
and there are as you can see here there

00:15:13,040 --> 00:15:18,720
are a lot of topics that we need to

00:15:15,360 --> 00:15:21,760
uh ensuring to make a

00:15:18,720 --> 00:15:25,040
sustainable product and

00:15:21,760 --> 00:15:28,240
as we have limited a

00:15:25,040 --> 00:15:31,759
number of companies we decided to

00:15:28,240 --> 00:15:33,279
define some priorities for each

00:15:31,759 --> 00:15:35,839
technical topic

00:15:33,279 --> 00:15:37,440
and our first and most important

00:15:35,839 --> 00:15:40,959
technical topic was

00:15:37,440 --> 00:15:44,000
super long-term supported colors and so

00:15:40,959 --> 00:15:47,360
because we our first focus is uh

00:15:44,000 --> 00:15:51,040
yeah we have to uh establish

00:15:47,360 --> 00:15:54,480
our base layer and in the bottom

00:15:51,040 --> 00:15:56,480
uh linux kernel is there that's why we

00:15:54,480 --> 00:16:01,040
started from the super long-term support

00:15:56,480 --> 00:16:05,120
corners then we extend our activities

00:16:01,040 --> 00:16:09,279
to real-time and cip core and testing

00:16:05,120 --> 00:16:13,120
and security and so on

00:16:09,279 --> 00:16:14,399
so and this is a cip governance

00:16:13,120 --> 00:16:17,920
structure

00:16:14,399 --> 00:16:22,639
we have a governing board members

00:16:17,920 --> 00:16:26,000
to decide some strategies for cip and

00:16:22,639 --> 00:16:27,519
on under the governing board we have a

00:16:26,000 --> 00:16:32,399
steering committee

00:16:27,519 --> 00:16:35,440
so steering technical steering committee

00:16:32,399 --> 00:16:39,120
decides some technical directions

00:16:35,440 --> 00:16:42,320
for to ensure our crp base layer

00:16:39,120 --> 00:16:45,839
so this is why now we have

00:16:42,320 --> 00:16:50,079
six activities and the first one

00:16:45,839 --> 00:16:52,880
is uh khan team so

00:16:50,079 --> 00:16:54,320
the slts kind of team ensuring the

00:16:52,880 --> 00:16:57,360
maintenance for the

00:16:54,320 --> 00:16:58,320
super long-term supported corners for 10

00:16:57,360 --> 00:17:02,000
years

00:16:58,320 --> 00:17:05,120
and adding some embedded requirements

00:17:02,000 --> 00:17:07,679
to support for example some hardware

00:17:05,120 --> 00:17:09,679
packages and also uh some

00:17:07,679 --> 00:17:12,799
functionalities

00:17:09,679 --> 00:17:15,039
for the security and so on

00:17:12,799 --> 00:17:18,240
and the next one is real time real time

00:17:15,039 --> 00:17:20,319
is also related to the corner activities

00:17:18,240 --> 00:17:21,439
jail time patch is currently not

00:17:20,319 --> 00:17:24,720
upstreamed

00:17:21,439 --> 00:17:28,000
so we joined the real time linux project

00:17:24,720 --> 00:17:31,120
and also work together to ensuring

00:17:28,000 --> 00:17:33,280
the real-time patch to be upstreamed the

00:17:31,120 --> 00:17:37,520
third one is cip core

00:17:33,280 --> 00:17:41,039
a cip core is uh focusing on

00:17:37,520 --> 00:17:45,280
to establish our

00:17:41,039 --> 00:17:48,720
base layer for the user and

00:17:45,280 --> 00:17:52,799
and the fourth one is testing so testing

00:17:48,720 --> 00:17:56,480
is important because um without testing

00:17:52,799 --> 00:17:59,600
no one trusts our base layer

00:17:56,480 --> 00:18:03,280
is okay or not

00:17:59,600 --> 00:18:06,000
so we developed a continuously

00:18:03,280 --> 00:18:10,240
integration testing environment

00:18:06,000 --> 00:18:11,120
and uh we also open up the all test

00:18:10,240 --> 00:18:14,160
results

00:18:11,120 --> 00:18:15,039
to the public so activity is also

00:18:14,160 --> 00:18:18,160
working with

00:18:15,039 --> 00:18:21,039
khan fci as an upstream project

00:18:18,160 --> 00:18:22,480
and fifth one is security working group

00:18:21,039 --> 00:18:25,520
a security working group

00:18:22,480 --> 00:18:25,520
uh tried to

00:18:26,320 --> 00:18:29,679
they're working on the security

00:18:28,160 --> 00:18:31,840
extensions

00:18:29,679 --> 00:18:33,200
to meet some industrial technical

00:18:31,840 --> 00:18:35,919
requirement

00:18:33,200 --> 00:18:37,360
and currently we are working on the

00:18:35,919 --> 00:18:41,039
security standard

00:18:37,360 --> 00:18:43,840
iec 62443

00:18:41,039 --> 00:18:46,400
this is a one most important security

00:18:43,840 --> 00:18:48,000
standard

00:18:46,400 --> 00:18:49,440
and the last one is software update

00:18:48,000 --> 00:18:52,559
working group

00:18:49,440 --> 00:18:54,720
so this parking group also uh working

00:18:52,559 --> 00:18:58,240
for the uh

00:18:54,720 --> 00:19:01,360
um a connected

00:18:58,240 --> 00:19:05,120
world now industry

00:19:01,360 --> 00:19:09,039
devices are connected uh to

00:19:05,120 --> 00:19:13,760
provide some features for the

00:19:09,039 --> 00:19:17,039
infrastructures and if we cannot update

00:19:13,760 --> 00:19:20,160
the software on the devices

00:19:17,039 --> 00:19:22,000
that cause a serious effect serious

00:19:20,160 --> 00:19:25,520
problem

00:19:22,000 --> 00:19:29,200
for our life so soft update

00:19:25,520 --> 00:19:32,640
is also quite important topics for us

00:19:29,200 --> 00:19:35,919
and today we have uh

00:19:32,640 --> 00:19:36,799
you know two presentations from uh cip

00:19:35,919 --> 00:19:40,080
current team

00:19:36,799 --> 00:19:42,160
and testing team and

00:19:40,080 --> 00:19:43,200
and also the other presentations

00:19:42,160 --> 00:19:46,480
presented through the

00:19:43,200 --> 00:19:50,320
cip security working group activity

00:19:46,480 --> 00:19:53,440
so our principal is absolutely fast

00:19:50,320 --> 00:19:57,760
so we uh once we

00:19:53,440 --> 00:20:00,880
decide to start some technical topics

00:19:57,760 --> 00:20:04,000
we at first we try to find some

00:20:00,880 --> 00:20:07,360
upstream project and once we have

00:20:04,000 --> 00:20:11,280
uh same project we decide

00:20:07,360 --> 00:20:14,799
to contribute fast to the upstream

00:20:11,280 --> 00:20:16,080
then i use up some code inside the cip

00:20:14,799 --> 00:20:19,520
project

00:20:16,080 --> 00:20:22,960
this is how we are ensuring as the cip

00:20:19,520 --> 00:20:22,960
open source space layer

00:20:23,200 --> 00:20:27,120
and and i'd like to skip some of this

00:20:26,480 --> 00:20:30,640
right

00:20:27,120 --> 00:20:34,799
but yeah i really directly mentioned

00:20:30,640 --> 00:20:38,000
about the cip connect team so now uh cip

00:20:34,799 --> 00:20:42,000
have a cip card team to

00:20:38,000 --> 00:20:43,360
ensure the cfp's super long time stable

00:20:42,000 --> 00:20:46,960
corner

00:20:43,360 --> 00:20:50,640
and our team is quite great performance

00:20:46,960 --> 00:20:54,480
and people and also experienced peoples

00:20:50,640 --> 00:20:58,720
are joined and working with uh

00:20:54,480 --> 00:21:02,400
upstream and also upstream stable uh

00:20:58,720 --> 00:21:05,760
carnitine so this is how

00:21:02,400 --> 00:21:08,960
we uh work together

00:21:05,760 --> 00:21:08,960
with upstream project

00:21:09,520 --> 00:21:16,159
and currently uh there are four corners

00:21:13,360 --> 00:21:18,480
and the details will be presented by

00:21:16,159 --> 00:21:21,919
kudosan

00:21:18,480 --> 00:21:23,840
and for the cip core is a yeah implement

00:21:21,919 --> 00:21:24,960
difference implementation for the base

00:21:23,840 --> 00:21:29,200
layer

00:21:24,960 --> 00:21:32,240
and now we have two profiles and

00:21:29,200 --> 00:21:34,720
tiny profile and generic profile so tiny

00:21:32,240 --> 00:21:38,080
profile using for the

00:21:34,720 --> 00:21:41,600
cip base layer for small iot devices

00:21:38,080 --> 00:21:45,440
and generic profile are used for the

00:21:41,600 --> 00:21:47,440
iot gateways that that will have more

00:21:45,440 --> 00:21:50,640
functionality on it

00:21:47,440 --> 00:21:54,080
so we collaborated with debian

00:21:50,640 --> 00:21:57,360
to ensure the cip core

00:21:54,080 --> 00:21:59,520
reference implementations because

00:21:57,360 --> 00:22:00,480
debian also have a long-term support

00:21:59,520 --> 00:22:02,880
project

00:22:00,480 --> 00:22:04,159
and also extended long-term support

00:22:02,880 --> 00:22:06,720
project

00:22:04,159 --> 00:22:08,320
so at the beginning we started to join

00:22:06,720 --> 00:22:11,360
lts project

00:22:08,320 --> 00:22:14,240
and then uh extended

00:22:11,360 --> 00:22:15,440
to join to the debian extended lts

00:22:14,240 --> 00:22:18,240
project

00:22:15,440 --> 00:22:18,240
from this year

00:22:19,039 --> 00:22:23,600
and currently uh cip core also working a

00:22:22,400 --> 00:22:26,720
lot

00:22:23,600 --> 00:22:29,919
to enhance our cfp core

00:22:26,720 --> 00:22:32,559
packages on and also functionalities

00:22:29,919 --> 00:22:34,159
for the genetic profile we have either

00:22:32,559 --> 00:22:37,600
cip core

00:22:34,159 --> 00:22:41,039
and we currently focusing on to create

00:22:37,600 --> 00:22:44,320
a testing

00:22:41,039 --> 00:22:47,600
environment and we

00:22:44,320 --> 00:22:50,720
can recently added itp to the layer

00:22:47,600 --> 00:22:54,880
that makes more easy to test a

00:22:50,720 --> 00:22:57,919
card with ltp and for tiny profile

00:22:54,880 --> 00:23:01,520
we added new boards we actually have

00:22:57,919 --> 00:23:03,440
some reference board but this new board

00:23:01,520 --> 00:23:04,960
not only includes different spots but

00:23:03,440 --> 00:23:09,120
also reversible

00:23:04,960 --> 00:23:12,559
candidates so we developed a lot

00:23:09,120 --> 00:23:15,280
in this area and for security

00:23:12,559 --> 00:23:17,440
uh we also developed a security layer

00:23:15,280 --> 00:23:20,400
for either cip core

00:23:17,440 --> 00:23:20,880
and during these implementations we find

00:23:20,400 --> 00:23:24,080
some

00:23:20,880 --> 00:23:26,400
issues for the lava and lava

00:23:24,080 --> 00:23:27,760
is also a upstream project for our

00:23:26,400 --> 00:23:30,799
testing activities

00:23:27,760 --> 00:23:34,799
so we decided to observe this kind of

00:23:30,799 --> 00:23:38,480
patches so this is how we

00:23:34,799 --> 00:23:42,240
are working on the crp core

00:23:38,480 --> 00:23:45,120
and cip testing will be present soon

00:23:42,240 --> 00:23:45,760
and security working group also uh

00:23:45,120 --> 00:23:50,880
present

00:23:45,760 --> 00:23:54,720
in this mini summit so

00:23:50,880 --> 00:23:57,120
yeah for software update um

00:23:54,720 --> 00:23:59,840
this code incorporates a common solution

00:23:57,120 --> 00:24:04,080
for software update into cip core

00:23:59,840 --> 00:24:06,400
so that means uh this software update uh

00:24:04,080 --> 00:24:07,440
try to working with our cip core

00:24:06,400 --> 00:24:10,240
packages

00:24:07,440 --> 00:24:10,240
to deploy

00:24:10,799 --> 00:24:17,360
basically images and also to act

00:24:14,159 --> 00:24:18,640
a safe update and we created some

00:24:17,360 --> 00:24:21,840
demonstrations

00:24:18,640 --> 00:24:25,440
uh recently uh to show

00:24:21,840 --> 00:24:30,320
how uh cip vega

00:24:25,440 --> 00:24:33,120
update uh more secure and more safe

00:24:30,320 --> 00:24:34,240
all source code is now available on

00:24:33,120 --> 00:24:37,679
gitlab

00:24:34,240 --> 00:24:41,200
so you can find these implementations

00:24:37,679 --> 00:24:43,679
on uh the cfp get ref

00:24:41,200 --> 00:24:46,880
and also information available on the

00:24:43,679 --> 00:24:50,559
cip website

00:24:46,880 --> 00:24:54,799
so let me summarize our presentations

00:24:50,559 --> 00:24:54,799
we provide to

00:24:55,679 --> 00:24:59,440
for the cip base layer and we are

00:24:58,720 --> 00:25:02,559
currently

00:24:59,440 --> 00:25:05,039
working with six working groups

00:25:02,559 --> 00:25:06,640
and each working group focusing on the

00:25:05,039 --> 00:25:09,840
uh

00:25:06,640 --> 00:25:13,039
our key issues

00:25:09,840 --> 00:25:14,240
for the security sustainability and so

00:25:13,039 --> 00:25:16,480
on

00:25:14,240 --> 00:25:16,480
so

00:25:18,480 --> 00:25:23,039
to conclude that these are presentations

00:25:21,520 --> 00:25:26,080
our civilizations need

00:25:23,039 --> 00:25:30,480
open source space layer so

00:25:26,080 --> 00:25:35,440
cip will provide this using linux

00:25:30,480 --> 00:25:39,440
and everyone if everyone using linux

00:25:35,440 --> 00:25:40,840
gip is one of the most important

00:25:39,440 --> 00:25:43,760
candidates to

00:25:40,840 --> 00:25:47,200
use it on the

00:25:43,760 --> 00:25:51,360
on your embedded systems and we

00:25:47,200 --> 00:25:55,440
make sure to uh

00:25:51,360 --> 00:26:00,080
yeah to ensure the sustainability

00:25:55,440 --> 00:26:03,600
uh by not only using uh

00:26:00,080 --> 00:26:07,120
open source code we also

00:26:03,600 --> 00:26:09,600
are providing some contributions to

00:26:07,120 --> 00:26:13,279
upstream project

00:26:09,600 --> 00:26:15,360
to realize our open space layer

00:26:13,279 --> 00:26:17,679
which means a contribution and

00:26:15,360 --> 00:26:21,919
collaboration with upstream

00:26:17,679 --> 00:26:24,880
is key activities for cip

00:26:21,919 --> 00:26:27,840
so let me switch to earth for the rest

00:26:24,880 --> 00:26:27,840
of presentations

00:26:34,480 --> 00:26:42,480
i heard

00:26:38,320 --> 00:26:42,480
sorry oh second new phone

00:26:42,799 --> 00:26:49,360
thanks for handing over um and

00:26:46,000 --> 00:26:52,559
um yeah we hope you have a good overview

00:26:49,360 --> 00:26:55,600
uh what what is going on at the moment

00:26:52,559 --> 00:26:58,240
you see uh we have a list of respectable

00:26:55,600 --> 00:27:01,760
uh hardware and software companies

00:26:58,240 --> 00:27:06,080
already backing cip

00:27:01,760 --> 00:27:08,559
and if you have products that

00:27:06,080 --> 00:27:09,760
have to be maintained for quite a long

00:27:08,559 --> 00:27:13,360
which have

00:27:09,760 --> 00:27:14,400
requirements like real-time requirements

00:27:13,360 --> 00:27:17,760
or

00:27:14,400 --> 00:27:20,720
you just need

00:27:17,760 --> 00:27:23,279
robust a robust operating system in

00:27:20,720 --> 00:27:26,799
industrial grade linux

00:27:23,279 --> 00:27:29,600
you should have a closer look at cip

00:27:26,799 --> 00:27:30,399
and we would be happy of course if other

00:27:29,600 --> 00:27:34,159
companies

00:27:30,399 --> 00:27:37,200
are joining this effort so contact us

00:27:34,159 --> 00:27:38,640
uh could you switch to the next slide so

00:27:37,200 --> 00:27:41,520
we have uh

00:27:38,640 --> 00:27:42,320
different ways so you can contact us

00:27:41,520 --> 00:27:44,559
directly

00:27:42,320 --> 00:27:46,880
uh it's even better to go via the

00:27:44,559 --> 00:27:48,240
mailing list the cip mailing list is

00:27:46,880 --> 00:27:51,520
mainly the

00:27:48,240 --> 00:27:54,080
technical mailing list

00:27:51,520 --> 00:27:56,240
we have a twitter feed we have a website

00:27:54,080 --> 00:27:57,600
we also have a wiki which summarizes

00:27:56,240 --> 00:28:00,480
some of the latest

00:27:57,600 --> 00:28:02,000
informations and of course you it's an

00:28:00,480 --> 00:28:05,840
open source project you can look

00:28:02,000 --> 00:28:10,000
at the code so go to gitlab uh for

00:28:05,840 --> 00:28:11,360
cip project and the kernel actually is

00:28:10,000 --> 00:28:14,840
hosted

00:28:11,360 --> 00:28:18,640
on on kernel.org you see the urls on the

00:28:14,840 --> 00:28:18,640
slides so thank you

00:28:21,360 --> 00:28:25,200
yes i don't know how we handle the

00:28:23,120 --> 00:28:27,760
questions

00:28:25,200 --> 00:28:27,760
just look

00:28:28,840 --> 00:28:35,039
maybe uh

00:28:31,760 --> 00:28:37,360
you just post it or is it possible to

00:28:35,039 --> 00:28:45,679
speak up on that platform

00:28:37,360 --> 00:28:48,159
do we have questions

00:28:45,679 --> 00:28:49,600
so maybe not if if you have questions

00:28:48,159 --> 00:28:52,799
and don't want to ask

00:28:49,600 --> 00:28:53,919
at the moment just contact us and ask

00:28:52,799 --> 00:28:58,080
later during this

00:28:53,919 --> 00:29:01,760
event thank you very much

00:28:58,080 --> 00:29:05,360
thank you so

00:29:01,760 --> 00:29:09,360
um the next speaker is

00:29:05,360 --> 00:29:12,960
uh danish kumar

00:29:09,360 --> 00:29:16,559
from toshiba and kentucky electronics

00:29:12,960 --> 00:29:19,360
and to speak crp security towards

00:29:16,559 --> 00:29:22,720
achieving industry-grade security so

00:29:19,360 --> 00:29:25,600
please start your presentations

00:29:22,720 --> 00:29:27,840
okay let me share in the screen yeah

00:29:25,600 --> 00:29:27,840
please

00:29:37,919 --> 00:29:43,039
so thank you for attending this session

00:29:40,720 --> 00:29:44,320
i'm ken duster from lunas electronics

00:29:43,039 --> 00:29:46,320
corporation

00:29:44,320 --> 00:29:47,440
i'm in charge of first part of this

00:29:46,320 --> 00:29:50,960
session and

00:29:47,440 --> 00:29:54,399
dinesh from toshiba software india will

00:29:50,960 --> 00:29:56,960
talk at second part of this session

00:29:54,399 --> 00:29:59,360
we once explained our activities at the

00:29:56,960 --> 00:30:02,399
last cfp me summit at oss

00:29:59,360 --> 00:30:02,720
north america and then security working

00:30:02,399 --> 00:30:05,919
group

00:30:02,720 --> 00:30:09,120
are continuing activities to achieve

00:30:05,919 --> 00:30:11,279
industrial grade security today

00:30:09,120 --> 00:30:12,240
we will explain an update about

00:30:11,279 --> 00:30:16,080
activities

00:30:12,240 --> 00:30:16,080
we've done over these four months

00:30:18,720 --> 00:30:22,080
in first session i'll explain about the

00:30:21,279 --> 00:30:24,240
progress of

00:30:22,080 --> 00:30:26,480
our assessment with the certification

00:30:24,240 --> 00:30:28,640
body accredited by isis secure

00:30:26,480 --> 00:30:31,120
certification program

00:30:28,640 --> 00:30:33,520
in second session dinesh will explain

00:30:31,120 --> 00:30:36,320
about details of our development

00:30:33,520 --> 00:30:37,679
and testing environment in addition what

00:30:36,320 --> 00:30:41,120
we are actually doing

00:30:37,679 --> 00:30:41,120
to meet the requirements

00:30:41,679 --> 00:30:46,559
to repeat for those who are listening

00:30:44,159 --> 00:30:48,880
our presentation at the first time

00:30:46,559 --> 00:30:49,679
security working group's mission is to

00:30:48,880 --> 00:30:51,919
provide

00:30:49,679 --> 00:30:54,080
open source based layer needed for

00:30:51,919 --> 00:30:57,039
developing products compliant with

00:30:54,080 --> 00:30:59,279
iec 6443 certification security

00:30:57,039 --> 00:31:02,159
requirements

00:30:59,279 --> 00:31:02,960
to achieve an industrial grade security

00:31:02,159 --> 00:31:06,399
we focus

00:31:02,960 --> 00:31:08,559
on iec 643 certification as an

00:31:06,399 --> 00:31:12,159
international standard for industrial

00:31:08,559 --> 00:31:15,279
automation and control system

00:31:12,159 --> 00:31:18,399
more products priors who develop using

00:31:15,279 --> 00:31:21,519
linux and package software acting on it

00:31:18,399 --> 00:31:23,760
will take advantage of our solutions and

00:31:21,519 --> 00:31:27,760
get ihg6443 certification

00:31:23,760 --> 00:31:27,760
to make industry more secure

00:31:29,080 --> 00:31:35,679
ihc643 was born by integrating the

00:31:32,399 --> 00:31:38,720
standards of measure industries

00:31:35,679 --> 00:31:39,440
in addition ieee 643 is a standard

00:31:38,720 --> 00:31:42,960
series

00:31:39,440 --> 00:31:45,760
for all control system players

00:31:42,960 --> 00:31:46,159
for operators building a secure supply

00:31:45,760 --> 00:31:48,559
chain

00:31:46,159 --> 00:31:50,159
with reliable equipment is very

00:31:48,559 --> 00:31:53,039
important

00:31:50,159 --> 00:31:53,679
to keep their control system secure

00:31:53,039 --> 00:31:56,080
system

00:31:53,679 --> 00:31:56,960
and components that built in a control

00:31:56,080 --> 00:31:59,679
system

00:31:56,960 --> 00:32:01,760
need to be implemented with secure

00:31:59,679 --> 00:32:04,480
development process

00:32:01,760 --> 00:32:06,559
and of course its security features

00:32:04,480 --> 00:32:09,200
should be measured by latest cyber

00:32:06,559 --> 00:32:09,200
security

00:32:09,399 --> 00:32:13,200
ic643 series is an international

00:32:12,240 --> 00:32:15,600
standard

00:32:13,200 --> 00:32:16,399
based on a certification program to

00:32:15,600 --> 00:32:19,120
ensure that

00:32:16,399 --> 00:32:20,960
industrial security is constantly

00:32:19,120 --> 00:32:25,440
updated

00:32:20,960 --> 00:32:28,000
considered by iec and ice as well

00:32:25,440 --> 00:32:31,519
this is the reason why we focus this

00:32:28,000 --> 00:32:31,519
certification and standard

00:32:32,240 --> 00:32:36,000
as you know linux is running on many

00:32:34,960 --> 00:32:38,640
components for

00:32:36,000 --> 00:32:40,320
industrial automation and control system

00:32:38,640 --> 00:32:44,480
field

00:32:40,320 --> 00:32:47,519
in 643 requirements for components

00:32:44,480 --> 00:32:50,720
and their suppliers are defined defined

00:32:47,519 --> 00:32:53,679
in part four it means folders one

00:32:50,720 --> 00:32:54,559
requirements for development process and

00:32:53,679 --> 00:32:56,559
forge two

00:32:54,559 --> 00:33:00,720
requirements for security features of

00:32:56,559 --> 00:33:00,720
the component products for isgs

00:33:00,799 --> 00:33:04,320
among them the scope we are trying to

00:33:03,760 --> 00:33:08,559
cover

00:33:04,320 --> 00:33:11,039
its embedded devices and network devices

00:33:08,559 --> 00:33:12,320
since these devices are required to

00:33:11,039 --> 00:33:15,679
realize specific

00:33:12,320 --> 00:33:17,120
functions with a small amount amount of

00:33:15,679 --> 00:33:19,519
resources

00:33:17,120 --> 00:33:20,320
software optimized optimization is

00:33:19,519 --> 00:33:24,200
always an

00:33:20,320 --> 00:33:26,960
important consideration however

00:33:24,200 --> 00:33:29,919
ic64443 part 4 is a

00:33:26,960 --> 00:33:31,200
product level certification and does not

00:33:29,919 --> 00:33:34,080
specify

00:33:31,200 --> 00:33:37,120
platform requirements or commonly used

00:33:34,080 --> 00:33:37,120
open source rules

00:33:37,760 --> 00:33:41,600
now we are about half position in our

00:33:40,240 --> 00:33:44,799
milestone

00:33:41,600 --> 00:33:46,000
so far we have internally investigated

00:33:44,799 --> 00:33:48,559
the standards

00:33:46,000 --> 00:33:50,880
selected about 20 packages that are

00:33:48,559 --> 00:33:54,399
essential to meet the standard

00:33:50,880 --> 00:33:56,960
and how much gip can achieve for the

00:33:54,399 --> 00:33:58,720
items required as a secure development

00:33:56,960 --> 00:34:02,159
process

00:33:58,720 --> 00:34:04,320
and contract it with exceeder which is

00:34:02,159 --> 00:34:07,519
one of the accredited certification body

00:34:04,320 --> 00:34:10,240
for isa secure certification program

00:34:07,519 --> 00:34:13,919
then proceeded that gap assessment of

00:34:10,240 --> 00:34:13,919
cip capabilities against

00:34:13,960 --> 00:34:19,200
ic643-4-1 and

00:34:15,560 --> 00:34:21,720
dash4-2 this month

00:34:19,200 --> 00:34:24,240
we completed the gap assessment for

00:34:21,720 --> 00:34:26,560
development process requirements

00:34:24,240 --> 00:34:29,440
and started the gap assessment for

00:34:26,560 --> 00:34:31,839
security feature requirements

00:34:29,440 --> 00:34:34,159
the gap assessment defines how our

00:34:31,839 --> 00:34:36,079
project should address the challenges

00:34:34,159 --> 00:34:38,320
that should be addressed to meet

00:34:36,079 --> 00:34:41,359
requirements before the actual

00:34:38,320 --> 00:34:41,359
final certification

00:34:42,480 --> 00:34:48,480
as you can imagine of course it will be

00:34:46,000 --> 00:34:51,040
difficult for open source development

00:34:48,480 --> 00:34:51,760
to meet all of the secure development

00:34:51,040 --> 00:34:54,960
process

00:34:51,760 --> 00:34:57,920
requirements for certification

00:34:54,960 --> 00:34:59,040
this is a general development lifecycle

00:34:57,920 --> 00:35:05,280
to be considered

00:34:59,040 --> 00:35:07,440
when we get certified for ic6443-1

00:35:05,280 --> 00:35:08,720
we should define roles and

00:35:07,440 --> 00:35:11,359
identification

00:35:08,720 --> 00:35:13,200
of responsibilities for whom relevant

00:35:11,359 --> 00:35:16,400
with each development phase

00:35:13,200 --> 00:35:17,280
before starting development need to

00:35:16,400 --> 00:35:19,440
consider

00:35:17,280 --> 00:35:20,320
which environment shall be used for

00:35:19,440 --> 00:35:22,800
development

00:35:20,320 --> 00:35:24,320
and if that environment ensure

00:35:22,800 --> 00:35:28,160
protection from tampering

00:35:24,320 --> 00:35:31,200
or authorized use even

00:35:28,160 --> 00:35:35,599
in the other phases various challenges

00:35:31,200 --> 00:35:37,520
are required in requirement definition

00:35:35,599 --> 00:35:39,359
what threats are assumed for the

00:35:37,520 --> 00:35:42,400
security features

00:35:39,359 --> 00:35:45,680
in design where the product places

00:35:42,400 --> 00:35:48,640
press it how does it provide defense

00:35:45,680 --> 00:35:50,720
in depth and what is best practice for

00:35:48,640 --> 00:35:50,720
it

00:35:51,839 --> 00:35:56,960
in implementation all challenges of

00:35:54,240 --> 00:36:01,359
source code are reviewed by foo

00:35:56,960 --> 00:36:04,240
or analyzed using static analysis tool

00:36:01,359 --> 00:36:07,839
is it conducted a test to ensure

00:36:04,240 --> 00:36:10,960
mitigating the specifically threats

00:36:07,839 --> 00:36:13,760
how about a fat or a penetration test

00:36:10,960 --> 00:36:15,200
did anyone other than the designer run

00:36:13,760 --> 00:36:17,839
those tests

00:36:15,200 --> 00:36:19,599
in addition those measures are improved

00:36:17,839 --> 00:36:24,000
continuously

00:36:19,599 --> 00:36:26,400
finally those definitions are documented

00:36:24,000 --> 00:36:28,880
although open source is designed with

00:36:26,400 --> 00:36:31,200
sufficient security in mind

00:36:28,880 --> 00:36:32,400
there are many process challenges that

00:36:31,200 --> 00:36:34,480
open source project

00:36:32,400 --> 00:36:37,119
does not address that need to be

00:36:34,480 --> 00:36:40,720
considered to minimize risk

00:36:37,119 --> 00:36:42,640
but among them there are some tasks

00:36:40,720 --> 00:36:45,040
that can be addressed by open source

00:36:42,640 --> 00:36:48,400
development project

00:36:45,040 --> 00:36:50,000
the key point is how product suppliers

00:36:48,400 --> 00:36:52,839
control those tasks

00:36:50,000 --> 00:36:54,000
and mitigate the risk of the final

00:36:52,839 --> 00:36:56,880
product

00:36:54,000 --> 00:36:58,560
for that we should show how far the

00:36:56,880 --> 00:37:01,760
platform can address those

00:36:58,560 --> 00:37:05,599
works and what the user must

00:37:01,760 --> 00:37:05,599
deal with concretely

00:37:06,240 --> 00:37:12,480
for example by defining a snapshot

00:37:09,680 --> 00:37:13,839
of stable version package lists and

00:37:12,480 --> 00:37:17,920
controlling version of

00:37:13,839 --> 00:37:20,079
it and if we conduct vulnerability and

00:37:17,920 --> 00:37:23,359
risk assessment of them

00:37:20,079 --> 00:37:25,920
users will be able to reuse them or

00:37:23,359 --> 00:37:28,400
easily manage the configuration changes

00:37:25,920 --> 00:37:31,440
based on them

00:37:28,400 --> 00:37:33,040
thread modeling depends on use case so

00:37:31,440 --> 00:37:36,560
it's difficult to define

00:37:33,040 --> 00:37:39,040
all of them but at least we can create a

00:37:36,560 --> 00:37:43,280
threat model for generic requirements

00:37:39,040 --> 00:37:45,760
and then users can reuse it as basis

00:37:43,280 --> 00:37:47,680
by defining the features that the

00:37:45,760 --> 00:37:49,440
security package considered by sharp

00:37:47,680 --> 00:37:52,640
security working group

00:37:49,440 --> 00:37:56,320
the features that must be implemented by

00:37:52,640 --> 00:37:59,200
the user application will be clear

00:37:56,320 --> 00:38:01,599
by defining the open interfaces

00:37:59,200 --> 00:38:03,760
implemented in the security packages

00:38:01,599 --> 00:38:04,880
and the appropriate configuration

00:38:03,760 --> 00:38:08,560
example

00:38:04,880 --> 00:38:11,359
it is useful as a generic use case

00:38:08,560 --> 00:38:13,200
when integration of security packages as

00:38:11,359 --> 00:38:16,160
a reference design

00:38:13,200 --> 00:38:18,480
we can apply static analysis tool and

00:38:16,160 --> 00:38:21,040
report its results

00:38:18,480 --> 00:38:21,920
and its reference design should be

00:38:21,040 --> 00:38:25,119
tested

00:38:21,920 --> 00:38:28,720
periodically and we can check

00:38:25,119 --> 00:38:31,280
its vulnerabilities at cyclic periods

00:38:28,720 --> 00:38:33,599
users can use the report as a starting

00:38:31,280 --> 00:38:37,280
point to consider additional tests

00:38:33,599 --> 00:38:37,280
such as faults or penetration

00:38:38,480 --> 00:38:45,280
those definitions should be documented

00:38:42,160 --> 00:38:49,200
so here is the document list that are

00:38:45,280 --> 00:38:52,320
we are preparing to meet ihc6401

00:38:49,200 --> 00:38:54,720
secure development process before

00:38:52,320 --> 00:38:57,440
conducting a final certification

00:38:54,720 --> 00:38:59,680
we need to complete to create documents

00:38:57,440 --> 00:39:02,079
listed here

00:38:59,680 --> 00:39:06,079
those documents will be published on the

00:39:02,079 --> 00:39:09,119
gitlab repository on the jp project

00:39:06,079 --> 00:39:10,079
after completion this activity users can

00:39:09,119 --> 00:39:12,000
reuse

00:39:10,079 --> 00:39:14,000
those documents for user certification

00:39:12,000 --> 00:39:16,480
as well because

00:39:14,000 --> 00:39:18,160
those documents are required also user

00:39:16,480 --> 00:39:20,880
certification

00:39:18,160 --> 00:39:23,920
we believe it may accelerate this

00:39:20,880 --> 00:39:23,920
certification program

00:39:24,320 --> 00:39:27,599
in parallel with rule definition and

00:39:26,160 --> 00:39:30,240
documentation

00:39:27,599 --> 00:39:32,240
we currently are working on the gap

00:39:30,240 --> 00:39:38,640
assessment for security functions

00:39:32,240 --> 00:39:41,359
of essential packages using iec 643-4-2

00:39:38,640 --> 00:39:44,160
about 20 packages we selected will be

00:39:41,359 --> 00:39:47,640
effective for many requirements

00:39:44,160 --> 00:39:50,400
hold the entire requirement of iec

00:39:47,640 --> 00:39:52,800
6443-2

00:39:50,400 --> 00:39:53,680
the challenges that user applications

00:39:52,800 --> 00:39:56,480
need to be

00:39:53,680 --> 00:39:59,359
addressed are clarified by the

00:39:56,480 --> 00:40:02,240
subjugation result

00:39:59,359 --> 00:40:04,560
in addition how to use the package is

00:40:02,240 --> 00:40:07,040
very important to keep secure the

00:40:04,560 --> 00:40:10,079
products

00:40:07,040 --> 00:40:13,280
appropriate configuration of the package

00:40:10,079 --> 00:40:16,960
should also be defined and documented

00:40:13,280 --> 00:40:19,760
documented through this certification

00:40:16,960 --> 00:40:20,079
and of course our certification results

00:40:19,760 --> 00:40:23,599
and

00:40:20,079 --> 00:40:28,480
evidences such as a assessment report

00:40:23,599 --> 00:40:28,480
can also be reused by users

00:40:29,040 --> 00:40:33,680
this slide shows the flow how security

00:40:32,000 --> 00:40:36,720
packages are suggested

00:40:33,680 --> 00:40:39,359
implemented and tested

00:40:36,720 --> 00:40:40,800
the security packages are considered by

00:40:39,359 --> 00:40:42,960
the security working group

00:40:40,800 --> 00:40:44,960
and then the security working group

00:40:42,960 --> 00:40:46,880
suggests those packages to share be

00:40:44,960 --> 00:40:49,119
quality

00:40:46,880 --> 00:40:50,240
should be quoting familiar with the

00:40:49,119 --> 00:40:53,040
package software

00:40:50,240 --> 00:40:56,319
just double check of package selection

00:40:53,040 --> 00:40:58,560
it's carried out here

00:40:56,319 --> 00:41:00,800
the software reference design just

00:40:58,560 --> 00:41:03,119
implemented in combination with the

00:41:00,800 --> 00:41:04,000
super long term support kernel is

00:41:03,119 --> 00:41:06,560
implemented

00:41:04,000 --> 00:41:10,079
on the ship reference hardware and

00:41:06,560 --> 00:41:10,079
validated on lava lab

00:41:10,920 --> 00:41:15,200
ic643-2 has

00:41:13,040 --> 00:41:16,079
also security requirements that the

00:41:15,200 --> 00:41:18,160
hardware

00:41:16,079 --> 00:41:20,560
must meet in order to comply with

00:41:18,160 --> 00:41:23,520
security level 3

00:41:20,560 --> 00:41:24,480
the target of the assessment that we are

00:41:23,520 --> 00:41:27,680
working on

00:41:24,480 --> 00:41:30,480
now is software

00:41:27,680 --> 00:41:31,359
and the compliance of those hardware

00:41:30,480 --> 00:41:33,280
requirements

00:41:31,359 --> 00:41:35,839
should be handled by each reference

00:41:33,280 --> 00:41:39,440
hardware provider

00:41:35,839 --> 00:41:42,160
in this way if the hardware corner

00:41:39,440 --> 00:41:43,760
and even the core packages that runs in

00:41:42,160 --> 00:41:46,800
the user space

00:41:43,760 --> 00:41:49,240
user space confirm to meet security

00:41:46,800 --> 00:41:52,240
requirements for iec

00:41:49,240 --> 00:41:55,119
6443-2 it can be said

00:41:52,240 --> 00:41:55,760
that it is the best platform for user

00:41:55,119 --> 00:41:59,599
product

00:41:55,760 --> 00:41:59,599
development to meet certification

00:41:59,680 --> 00:42:04,480
so thank you for listening my talk from

00:42:02,160 --> 00:42:05,440
here dinesh will report more detailed

00:42:04,480 --> 00:42:08,880
implementation

00:42:05,440 --> 00:42:11,680
and testing progress i'll stop

00:42:08,880 --> 00:42:13,920
sharing a screen and pass to danish then

00:42:11,680 --> 00:42:18,160
please share your screen

00:42:13,920 --> 00:42:18,160
so thank you let me share my screen

00:42:29,359 --> 00:42:37,040
okay uh so uh now onwards i will explain

00:42:33,839 --> 00:42:37,520
about the status of activities as part

00:42:37,040 --> 00:42:40,720
of

00:42:37,520 --> 00:42:44,240
security work group we are doing so

00:42:40,720 --> 00:42:46,839
as uh explained why can't

00:42:44,240 --> 00:42:48,000
there are certain requirements from iec

00:42:46,839 --> 00:42:51,839
00:42:48,000 --> 00:42:53,040
rs 4s2 which is in terms of technical

00:42:51,839 --> 00:42:56,319
requirements to

00:42:53,040 --> 00:42:58,079
add the technical security capabilities

00:42:56,319 --> 00:43:00,720
in the products

00:42:58,079 --> 00:43:02,480
so first of all the main requirement

00:43:00,720 --> 00:43:03,440
which we understood from certification

00:43:02,480 --> 00:43:06,720
body was to

00:43:03,440 --> 00:43:09,839
define the security requirements

00:43:06,720 --> 00:43:13,119
so after having internal discussion

00:43:09,839 --> 00:43:16,960
we decided that as of now we will

00:43:13,119 --> 00:43:19,680
take the reference of iec 6243

00:43:16,960 --> 00:43:20,480
dashford has two security requirements

00:43:19,680 --> 00:43:22,880
and

00:43:20,480 --> 00:43:24,319
on top of that we will define cip

00:43:22,880 --> 00:43:27,520
security requirements

00:43:24,319 --> 00:43:30,560
so recently we have completed defining

00:43:27,520 --> 00:43:32,720
a draft security requirements for cip

00:43:30,560 --> 00:43:34,079
and they have been documented and

00:43:32,720 --> 00:43:37,280
published

00:43:34,079 --> 00:43:38,160
and kept in cip of documents public

00:43:37,280 --> 00:43:41,200
repository

00:43:38,160 --> 00:43:43,040
and anyone can access this security

00:43:41,200 --> 00:43:46,240
requirements

00:43:43,040 --> 00:43:48,240
so as we can see here we

00:43:46,240 --> 00:43:50,960
have defined the security requirements

00:43:48,240 --> 00:43:54,640
and each requirement has one id

00:43:50,960 --> 00:43:58,400
which will be used for uh mapping

00:43:54,640 --> 00:44:01,359
uh requirements like for each test case

00:43:58,400 --> 00:44:04,079
or how like which package is used to

00:44:01,359 --> 00:44:06,640
meet that requirement

00:44:04,079 --> 00:44:07,359
so for meeting these requirements

00:44:06,640 --> 00:44:10,560
basically

00:44:07,359 --> 00:44:12,000
we identified and investigated few

00:44:10,560 --> 00:44:14,240
debian packages

00:44:12,000 --> 00:44:15,920
and we have already added those demon

00:44:14,240 --> 00:44:18,880
packages we will see the detail

00:44:15,920 --> 00:44:18,880
in further slides

00:44:19,760 --> 00:44:24,400
so this is the security layer added in

00:44:22,560 --> 00:44:27,359
cip core user

00:44:24,400 --> 00:44:28,480
also called generic profile so here as

00:44:27,359 --> 00:44:32,240
you can see

00:44:28,480 --> 00:44:35,280
we have added a security layer

00:44:32,240 --> 00:44:39,599
and as part of the security layer

00:44:35,280 --> 00:44:42,400
there have been there we have added the

00:44:39,599 --> 00:44:43,839
recipe which includes all the security

00:44:42,400 --> 00:44:46,880
packages

00:44:43,839 --> 00:44:49,599
and also in addition to that

00:44:46,880 --> 00:44:50,480
we have added the security conflicts

00:44:49,599 --> 00:44:53,839
such as

00:44:50,480 --> 00:44:55,119
customizing or configs like password

00:44:53,839 --> 00:44:57,599
strength

00:44:55,119 --> 00:44:58,640
or other security measures which can be

00:44:57,599 --> 00:45:01,839
further

00:44:58,640 --> 00:45:02,640
modified so this has been already

00:45:01,839 --> 00:45:05,760
completed

00:45:02,640 --> 00:45:06,319
and integrated in cip code user main

00:45:05,760 --> 00:45:09,599
branch

00:45:06,319 --> 00:45:12,640
and it's already available in the jitlab

00:45:09,599 --> 00:45:14,880
so anyone can have a look on the

00:45:12,640 --> 00:45:16,240
security packages which have been added

00:45:14,880 --> 00:45:19,839
as part of

00:45:16,240 --> 00:45:19,839
cip security requirements

00:45:20,800 --> 00:45:25,520
uh similarly we have added security

00:45:22,960 --> 00:45:28,480
layer in our tiny profile

00:45:25,520 --> 00:45:29,520
where you can see we have added another

00:45:28,480 --> 00:45:32,720
meta layer for

00:45:29,520 --> 00:45:34,960
cip security which adds all the security

00:45:32,720 --> 00:45:37,280
packages which we have identified

00:45:34,960 --> 00:45:38,640
while investigating foreign

00:45:37,280 --> 00:45:41,920
specification

00:45:38,640 --> 00:45:44,960
and you can see here in debbie there is

00:45:41,920 --> 00:45:46,880
a slightly different way of doing the

00:45:44,960 --> 00:45:49,599
security conflict changes

00:45:46,880 --> 00:45:51,119
so here you can see for each package

00:45:49,599 --> 00:45:54,079
there is one folder

00:45:51,119 --> 00:45:55,280
and inside that folder there is one file

00:45:54,079 --> 00:45:59,040
which can be

00:45:55,280 --> 00:46:02,160
used to modify the default configuration

00:45:59,040 --> 00:46:02,880
so in both profiles tiny and generic

00:46:02,160 --> 00:46:04,720
profile

00:46:02,880 --> 00:46:06,480
the addition of security layer is

00:46:04,720 --> 00:46:08,960
completed as of now

00:46:06,480 --> 00:46:10,240
and currently as we are also reviewing

00:46:08,960 --> 00:46:13,280
our folders to

00:46:10,240 --> 00:46:15,359
specification with exeter so

00:46:13,280 --> 00:46:17,680
there are few comments and we may have

00:46:15,359 --> 00:46:19,920
to slightly make some changes

00:46:17,680 --> 00:46:24,160
in order to completely meet the

00:46:19,920 --> 00:46:24,160
requirements based on acceda commands

00:46:24,640 --> 00:46:30,560
and while adding the security packages

00:46:28,000 --> 00:46:32,800
as of now we have defined certain

00:46:30,560 --> 00:46:35,599
default security configs

00:46:32,800 --> 00:46:37,280
like enforcing a strong password

00:46:35,599 --> 00:46:37,599
currently we have taken the reference

00:46:37,280 --> 00:46:41,119
from

00:46:37,599 --> 00:46:42,240
nist uh how to define the password

00:46:41,119 --> 00:46:44,640
strength similarly

00:46:42,240 --> 00:46:47,359
lock user accounts after configured of

00:46:44,640 --> 00:46:50,400
failed login attempts

00:46:47,359 --> 00:46:53,200
so this default security configs

00:46:50,400 --> 00:46:55,440
can be changed as i already explained in

00:46:53,200 --> 00:46:58,560
previous slides

00:46:55,440 --> 00:47:01,920
so let's see

00:46:58,560 --> 00:47:04,960
next so how the uh

00:47:01,920 --> 00:47:05,920
cip or security test images can be

00:47:04,960 --> 00:47:09,760
created for

00:47:05,920 --> 00:47:12,880
user and debi profile so this is the way

00:47:09,760 --> 00:47:16,079
all the source code is already available

00:47:12,880 --> 00:47:18,800
in git lab so we already tested

00:47:16,079 --> 00:47:19,520
our security packages and their test

00:47:18,800 --> 00:47:22,720
cases

00:47:19,520 --> 00:47:26,400
already verified we'll see the

00:47:22,720 --> 00:47:30,559
results in further slides

00:47:26,400 --> 00:47:32,720
this is about rcip debi where

00:47:30,559 --> 00:47:35,760
we have also completed adding all the

00:47:32,720 --> 00:47:35,760
security packages

00:47:37,119 --> 00:47:40,480
so after adding all the security

00:47:38,880 --> 00:47:43,839
packages uh we

00:47:40,480 --> 00:47:47,200
developed uh lava test definitions and

00:47:43,839 --> 00:47:48,640
by automating all the lava touch

00:47:47,200 --> 00:47:52,319
definitions we have

00:47:48,640 --> 00:47:53,680
verified how our security requirement

00:47:52,319 --> 00:47:56,880
tests are passing

00:47:53,680 --> 00:47:58,720
so first we did a local lava setup as

00:47:56,880 --> 00:48:01,119
part of the setup

00:47:58,720 --> 00:48:01,839
we have to keep our lava test definition

00:48:01,119 --> 00:48:05,520
somewhere in

00:48:01,839 --> 00:48:06,079
object server and we are keeping cip

00:48:05,520 --> 00:48:09,280
images

00:48:06,079 --> 00:48:12,400
as of now in aws so

00:48:09,280 --> 00:48:14,800
uh these lava scripts

00:48:12,400 --> 00:48:15,920
take lava test definitions and cip

00:48:14,800 --> 00:48:18,079
images

00:48:15,920 --> 00:48:18,960
and automate this process of doing the

00:48:18,079 --> 00:48:20,640
testing

00:48:18,960 --> 00:48:23,680
and publishing the result and the

00:48:20,640 --> 00:48:26,240
results can be seen in the ui

00:48:23,680 --> 00:48:28,559
so even though this image depicts the

00:48:26,240 --> 00:48:29,599
setup for local setup but we have also

00:48:28,559 --> 00:48:33,040
completed

00:48:29,599 --> 00:48:36,319
this activity in cip lava infrastructure

00:48:33,040 --> 00:48:39,359
and we faced some difficult issues

00:48:36,319 --> 00:48:42,480
which took a lot of time while doing

00:48:39,359 --> 00:48:44,559
our multi-node test and as part of

00:48:42,480 --> 00:48:45,839
our investigation we found some issues

00:48:44,559 --> 00:48:48,480
uh the patch for those

00:48:45,839 --> 00:48:50,319
issues already submitted to la lava

00:48:48,480 --> 00:48:53,359
upstream

00:48:50,319 --> 00:48:55,119
and once it is accepted it will be

00:48:53,359 --> 00:48:57,760
again available in cip lava

00:48:55,119 --> 00:48:57,760
infrastructure

00:48:58,800 --> 00:49:04,319
so here we can see our test results

00:49:02,160 --> 00:49:05,520
when we executed our lava test

00:49:04,319 --> 00:49:09,040
definition

00:49:05,520 --> 00:49:09,680
on single node test so all the test

00:49:09,040 --> 00:49:12,559
cases

00:49:09,680 --> 00:49:13,280
which we have developed to meet the isis

00:49:12,559 --> 00:49:15,520
affordable

00:49:13,280 --> 00:49:16,319
requirements all the test cases are

00:49:15,520 --> 00:49:19,359
passed

00:49:16,319 --> 00:49:22,880
and these are test gels are available

00:49:19,359 --> 00:49:26,480
as part of lava

00:49:22,880 --> 00:49:31,359
jobs so anyone can see the test yields

00:49:26,480 --> 00:49:34,000
and the detail of all the logs

00:49:31,359 --> 00:49:35,280
the test results for lava multi node

00:49:34,000 --> 00:49:39,280
also available

00:49:35,280 --> 00:49:43,280
and as you can see on each

00:49:39,280 --> 00:49:46,800
id like tc underscore cr1.11

00:49:43,280 --> 00:49:49,200
so it this id belongs to one security

00:49:46,800 --> 00:49:49,920
requirements in iec six two double four

00:49:49,200 --> 00:49:52,160
three

00:49:49,920 --> 00:49:53,040
and s four s two one security

00:49:52,160 --> 00:49:55,119
requirements

00:49:53,040 --> 00:49:56,240
so for each security requirement there

00:49:55,119 --> 00:49:59,359
are either one

00:49:56,240 --> 00:50:00,960
or more than one test cases to test the

00:49:59,359 --> 00:50:03,440
security requirement

00:50:00,960 --> 00:50:04,960
so all the test cases in multi-node dock

00:50:03,440 --> 00:50:06,559
is also passed

00:50:04,960 --> 00:50:08,480
and this entire thing is already

00:50:06,559 --> 00:50:11,119
available as part of cip lab

00:50:08,480 --> 00:50:11,119
infrastructure

00:50:11,520 --> 00:50:17,599
next to meet certain requirements in iec

00:50:14,880 --> 00:50:20,160
standards uh there are requirements

00:50:17,599 --> 00:50:21,920
like before making product releases

00:50:20,160 --> 00:50:24,079
critical security fixes should be

00:50:21,920 --> 00:50:25,040
incorporated and made available to end

00:50:24,079 --> 00:50:26,960
user

00:50:25,040 --> 00:50:28,880
receiving notifications for security

00:50:26,960 --> 00:50:30,880
related issues so

00:50:28,880 --> 00:50:32,079
these are the requirements from ic

00:50:30,880 --> 00:50:34,640
standards and

00:50:32,079 --> 00:50:36,640
we have to meet these requirements to

00:50:34,640 --> 00:50:40,319
meet these requirements

00:50:36,640 --> 00:50:43,839
in cip core which is user applications

00:50:40,319 --> 00:50:48,079
recently we have started working on this

00:50:43,839 --> 00:50:51,440
and we have developed a cip core sec

00:50:48,079 --> 00:50:54,559
as uh it has a set of

00:50:51,440 --> 00:50:58,400
scripts on top of debian's a

00:50:54,559 --> 00:51:01,680
tool for cv tracking cvs

00:50:58,400 --> 00:51:05,599
so this tool will help us to track

00:51:01,680 --> 00:51:09,280
cbh and integrate the fixes in cip core

00:51:05,599 --> 00:51:09,760
and in the future it this entire process

00:51:09,280 --> 00:51:13,040
will be

00:51:09,760 --> 00:51:14,960
automated and we can then we can say

00:51:13,040 --> 00:51:19,040
that we are meeting this requirement

00:51:14,960 --> 00:51:19,040
by tracking all the cvs

00:51:21,680 --> 00:51:28,000
i think in uh next session you will see

00:51:25,440 --> 00:51:30,240
how cvs are being tracked in cip kernel

00:51:28,000 --> 00:51:34,240
so i will skip the slide

00:51:30,240 --> 00:51:34,640
so we can say in both cip kernel and cip

00:51:34,240 --> 00:51:37,920
core

00:51:34,640 --> 00:51:41,119
now we are tracking cvs and

00:51:37,920 --> 00:51:41,839
it has been automated okay so this slide

00:51:41,119 --> 00:51:44,480
explains

00:51:41,839 --> 00:51:45,680
about our recent activity which we have

00:51:44,480 --> 00:51:47,839
started

00:51:45,680 --> 00:51:48,960
doing threat modeling for cip as a

00:51:47,839 --> 00:51:51,200
system

00:51:48,960 --> 00:51:53,440
so there has been very detailed uh

00:51:51,200 --> 00:51:56,079
discussion with certification body

00:51:53,440 --> 00:51:56,880
how should we do that modeling for cip

00:51:56,079 --> 00:52:00,400
since it

00:51:56,880 --> 00:52:03,680
has many uh debian packages

00:52:00,400 --> 00:52:07,440
and entire thing is open

00:52:03,680 --> 00:52:10,880
so how should we identify the points

00:52:07,440 --> 00:52:13,839
from where threads are may emerge

00:52:10,880 --> 00:52:14,960
so we found the input from certification

00:52:13,839 --> 00:52:17,359
body that

00:52:14,960 --> 00:52:18,079
the threat modeling we can be done

00:52:17,359 --> 00:52:21,440
considering

00:52:18,079 --> 00:52:22,640
cip as a system and we can do the

00:52:21,440 --> 00:52:26,000
analysis

00:52:22,640 --> 00:52:27,200
of how external entities are interacting

00:52:26,000 --> 00:52:30,079
with cip

00:52:27,200 --> 00:52:30,880
what kind of data flows happening so

00:52:30,079 --> 00:52:34,240
considering

00:52:30,880 --> 00:52:38,400
general huge case we

00:52:34,240 --> 00:52:40,240
recently we had a dedicated session on

00:52:38,400 --> 00:52:42,480
threat modeling for cip

00:52:40,240 --> 00:52:45,119
where we explained about how are we

00:52:42,480 --> 00:52:48,400
approaching threat modeling for cip

00:52:45,119 --> 00:52:50,800
and what kind of activities we are doing

00:52:48,400 --> 00:52:51,599
so in this slide as you can see this is

00:52:50,800 --> 00:52:54,240
the summary

00:52:51,599 --> 00:52:55,520
of based on the straight methodology of

00:52:54,240 --> 00:52:58,880
that modeling

00:52:55,520 --> 00:53:01,119
how spoofing or tempering repetition

00:52:58,880 --> 00:53:02,559
for this kind of threats what all

00:53:01,119 --> 00:53:06,559
packages we have added

00:53:02,559 --> 00:53:08,880
in cip so i i will not go in much detail

00:53:06,559 --> 00:53:10,880
as we are running short of time so these

00:53:08,880 --> 00:53:11,520
packages have already been added and

00:53:10,880 --> 00:53:13,440
tested

00:53:11,520 --> 00:53:16,319
as we have already seen the test results

00:53:13,440 --> 00:53:16,319
in previous slides

00:53:17,760 --> 00:53:21,920
so this slide explains like general

00:53:20,800 --> 00:53:25,440
advantages

00:53:21,920 --> 00:53:26,880
of using cip distribution as compared to

00:53:25,440 --> 00:53:29,359
other distributions

00:53:26,880 --> 00:53:31,520
there might be few things also available

00:53:29,359 --> 00:53:32,319
in other distributions but you can see

00:53:31,520 --> 00:53:35,359
here

00:53:32,319 --> 00:53:37,599
a dedicated kernel maintainers for slts

00:53:35,359 --> 00:53:39,280
up to 10 years is available in cip

00:53:37,599 --> 00:53:41,440
which is generally not available in

00:53:39,280 --> 00:53:44,640
other distributions

00:53:41,440 --> 00:53:48,400
and one of the unique support

00:53:44,640 --> 00:53:51,599
in cip which we see iec assist platform

00:53:48,400 --> 00:53:54,880
by accredited certification body and

00:53:51,599 --> 00:53:57,119
as as it was already explained we have

00:53:54,880 --> 00:53:59,200
recently completed assessment gap

00:53:57,119 --> 00:54:01,359
assessment for four days one

00:53:59,200 --> 00:54:03,920
and shortly we will complete the gap

00:54:01,359 --> 00:54:07,119
assessment for four days to as well

00:54:03,920 --> 00:54:11,040
and then we will start working on

00:54:07,119 --> 00:54:15,119
a final assessment for both ford s1

00:54:11,040 --> 00:54:16,559
and 4s2 we are also closely monitoring

00:54:15,119 --> 00:54:18,880
cvs at

00:54:16,559 --> 00:54:19,599
both user level as well as kernel level

00:54:18,880 --> 00:54:22,480
and

00:54:19,599 --> 00:54:24,559
regularly integrating all the changes

00:54:22,480 --> 00:54:26,160
extended support from debbie and elts

00:54:24,559 --> 00:54:29,280
for specific packages

00:54:26,160 --> 00:54:31,040
are based on a specific cip member

00:54:29,280 --> 00:54:34,079
companies

00:54:31,040 --> 00:54:35,280
and then a regular automated testing on

00:54:34,079 --> 00:54:38,160
multiple resources

00:54:35,280 --> 00:54:38,960
with published test deals on kernel ci

00:54:38,160 --> 00:54:41,760
so here

00:54:38,960 --> 00:54:42,799
anyone can see our test results which

00:54:41,760 --> 00:54:46,079
are regularly

00:54:42,799 --> 00:54:46,880
being published and strong support from

00:54:46,079 --> 00:54:48,640
big players

00:54:46,880 --> 00:54:52,480
as it was already highlighted in

00:54:48,640 --> 00:54:54,960
previous slides previous session also

00:54:52,480 --> 00:54:57,839
okay so from cip security what group

00:54:54,960 --> 00:55:00,240
perspective what would be the next

00:54:57,839 --> 00:55:02,319
uh gap assistant for compliance with

00:55:00,240 --> 00:55:05,599
food s

00:55:02,319 --> 00:55:08,319
one so four days one and four days two

00:55:05,599 --> 00:55:10,000
so we are about to complete the gap

00:55:08,319 --> 00:55:12,319
assessment for both

00:55:10,000 --> 00:55:13,760
and then we will go for actual

00:55:12,319 --> 00:55:17,280
assessment

00:55:13,760 --> 00:55:20,720
and all this uh final cip

00:55:17,280 --> 00:55:23,280
assessment documents and test cases

00:55:20,720 --> 00:55:23,920
or scripts everything will be available

00:55:23,280 --> 00:55:28,000
to

00:55:23,920 --> 00:55:30,720
end users and i believe for this will be

00:55:28,000 --> 00:55:31,839
a great help and it will greatly reduce

00:55:30,720 --> 00:55:36,160
the effort

00:55:31,839 --> 00:55:40,079
for us get getting end product certified

00:55:36,160 --> 00:55:43,119
so along with our

00:55:40,079 --> 00:55:44,319
test cases so test scripts we are also

00:55:43,119 --> 00:55:46,640
developing

00:55:44,319 --> 00:55:48,079
some guidelines which will help end

00:55:46,640 --> 00:55:50,799
product owners

00:55:48,079 --> 00:55:52,079
to follow those guidelines and easily

00:55:50,799 --> 00:55:55,760
get their product

00:55:52,079 --> 00:55:57,520
certified so all these documents will be

00:55:55,760 --> 00:56:00,720
available in cip

00:55:57,520 --> 00:56:00,720
documents repository

00:56:00,960 --> 00:56:06,559
so usually there are open questions like

00:56:04,480 --> 00:56:07,760
once the product is certified then how

00:56:06,559 --> 00:56:10,000
it can be maintained

00:56:07,760 --> 00:56:11,119
in long term so currently we are

00:56:10,000 --> 00:56:13,920
discussing with the

00:56:11,119 --> 00:56:14,559
certification body and we will make sure

00:56:13,920 --> 00:56:17,359
that

00:56:14,559 --> 00:56:18,240
our product remains compliant for long

00:56:17,359 --> 00:56:20,400
time

00:56:18,240 --> 00:56:21,920
so for that we are collecting inputs and

00:56:20,400 --> 00:56:24,000
we will be publishing

00:56:21,920 --> 00:56:26,720
all those inputs which will further help

00:56:24,000 --> 00:56:29,599
for end customers

00:56:26,720 --> 00:56:31,680
so that's all about uh security

00:56:29,599 --> 00:56:35,280
workgroup status update

00:56:31,680 --> 00:56:37,839
i think i will pass the control to

00:56:35,280 --> 00:56:37,839
kuduson

00:56:41,359 --> 00:56:45,839
a kudosa

00:57:07,760 --> 00:57:13,839
so son we can't hear your voice

00:57:21,839 --> 00:57:25,599
thanks very much for joining this

00:57:23,520 --> 00:57:28,880
session this talk is about

00:57:25,599 --> 00:57:29,359
cip kernel team activities i'd like to

00:57:28,880 --> 00:57:31,520
talk

00:57:29,359 --> 00:57:32,559
how we are interacting with upstream

00:57:31,520 --> 00:57:36,079
projects

00:57:32,559 --> 00:57:36,079
in order to achieve our goals

00:57:36,720 --> 00:57:43,040
first of all let me introduce myself i'm

00:57:39,760 --> 00:57:45,520
masashi kudo from cybertrust japan

00:57:43,040 --> 00:57:46,480
i have worked in software industry for

00:57:45,520 --> 00:57:49,599
both ide

00:57:46,480 --> 00:57:52,160
and network for more than 30 years

00:57:49,599 --> 00:57:55,760
and i'm currently acting as cip kernel

00:57:52,160 --> 00:57:58,319
team chair

00:57:55,760 --> 00:57:59,440
up saying first is cip's development

00:57:58,319 --> 00:58:02,160
principle

00:57:59,440 --> 00:58:03,599
i'd like to start my talk with upstream

00:58:02,160 --> 00:58:06,400
first

00:58:03,599 --> 00:58:08,400
cip kernel team follows this principle

00:58:06,400 --> 00:58:10,880
to work on tasks

00:58:08,400 --> 00:58:12,000
in the next section i'd like to share

00:58:10,880 --> 00:58:16,160
what we are doing

00:58:12,000 --> 00:58:16,160
and what we have accomplished so far

00:58:16,720 --> 00:58:22,640
then let's get started with upstream

00:58:20,839 --> 00:58:25,760
first

00:58:22,640 --> 00:58:28,160
two development models are pictured

00:58:25,760 --> 00:58:29,760
the model on the left hand side is own

00:58:28,160 --> 00:58:32,160
community model

00:58:29,760 --> 00:58:33,920
the project with this model branches its

00:58:32,160 --> 00:58:37,040
base from upstream

00:58:33,920 --> 00:58:39,920
and evolves by its own this model

00:58:37,040 --> 00:58:42,400
enables the project to ramp up quickly

00:58:39,920 --> 00:58:44,400
but in the long run it will be difficult

00:58:42,400 --> 00:58:47,520
to incorporate upstream patches

00:58:44,400 --> 00:58:49,680
into it due to conflicts

00:58:47,520 --> 00:58:50,640
the model on the right hand side is

00:58:49,680 --> 00:58:54,079
upstream first

00:58:50,640 --> 00:58:55,760
model the project allows part commits

00:58:54,079 --> 00:58:58,880
only if those patches are

00:58:55,760 --> 00:59:01,119
already in the upstream it may take time

00:58:58,880 --> 00:59:03,040
to introduce a desired patch

00:59:01,119 --> 00:59:06,240
because the target patch should be

00:59:03,040 --> 00:59:09,200
accepted by the upstream at first

00:59:06,240 --> 00:59:10,559
but this model eliminates the risk of

00:59:09,200 --> 00:59:13,440
conflicts

00:59:10,559 --> 00:59:14,400
at the same time the project can share

00:59:13,440 --> 00:59:18,079
its outputs

00:59:14,400 --> 00:59:19,359
with the upstream please take a look at

00:59:18,079 --> 00:59:21,680
this graph

00:59:19,359 --> 00:59:22,480
it displays the gross trend of commit

00:59:21,680 --> 00:59:25,520
counts for

00:59:22,480 --> 00:59:27,920
each stable release as you can see

00:59:25,520 --> 00:59:30,720
a few hundred patches are committed to

00:59:27,920 --> 00:59:33,040
each server release per month

00:59:30,720 --> 00:59:34,079
this trend makes cherry picking quite

00:59:33,040 --> 00:59:36,640
difficult

00:59:34,079 --> 00:59:37,680
because cip is aiming a long-term

00:59:36,640 --> 00:59:40,160
maintenance

00:59:37,680 --> 00:59:42,319
upstream first model is a desired

00:59:40,160 --> 00:59:45,119
approach

00:59:42,319 --> 00:59:46,079
as explained so far the absolute first

00:59:45,119 --> 00:59:47,920
principle is

00:59:46,079 --> 00:59:49,839
essential to achieve industrial

00:59:47,920 --> 00:59:52,880
requirements especially

00:59:49,839 --> 00:59:55,520
in terms of long-term maintenance we

00:59:52,880 --> 00:59:58,400
collaborate with upstream projects

00:59:55,520 --> 00:59:59,280
before using the outputs we upstream

00:59:58,400 --> 01:00:02,240
what we have

00:59:59,280 --> 01:00:05,200
and don't keep them locally by rotating

01:00:02,240 --> 01:00:09,040
up streaming and using continuously

01:00:05,200 --> 01:00:09,040
we are moving toward a goal

01:00:09,760 --> 01:00:15,920
here explains how cib artifacts can be

01:00:13,119 --> 01:00:18,880
used by cip users

01:00:15,920 --> 01:00:20,160
cib refers to source of binary packages

01:00:18,880 --> 01:00:21,920
in debian

01:00:20,160 --> 01:00:25,040
if you'd like to use debian source

01:00:21,920 --> 01:00:26,559
packages you can use yoktpoke as a build

01:00:25,040 --> 01:00:29,520
system

01:00:26,559 --> 01:00:30,319
cip core packages contain tons of

01:00:29,520 --> 01:00:32,160
packages

01:00:30,319 --> 01:00:33,599
which may not be sufficient for the

01:00:32,160 --> 01:00:36,559
development of end

01:00:33,599 --> 01:00:37,440
products so users can add necessary

01:00:36,559 --> 01:00:40,799
packages

01:00:37,440 --> 01:00:44,400
from debian by writing recipes

01:00:40,799 --> 01:00:48,319
debian provides ltes lts maintenance and

01:00:44,400 --> 01:00:50,799
even extended lts can be provided

01:00:48,319 --> 01:00:52,319
so super long time support including

01:00:50,799 --> 01:00:54,839
user land packages

01:00:52,319 --> 01:00:57,839
can take advantage of these maintenance

01:00:54,839 --> 01:00:57,839
frameworks

01:00:58,160 --> 01:01:02,400
then let's move on to the cip cognitive

01:01:00,640 --> 01:01:05,040
activities

01:01:02,400 --> 01:01:05,839
primary goal of the cip kernel team is

01:01:05,040 --> 01:01:08,960
to provide

01:01:05,839 --> 01:01:11,920
cip slts kernels for 10 plus

01:01:08,960 --> 01:01:13,040
years by fixing versions to fulfill the

01:01:11,920 --> 01:01:15,440
required level

01:01:13,040 --> 01:01:17,280
of reliability sustainability and

01:01:15,440 --> 01:01:19,200
security

01:01:17,280 --> 01:01:21,359
there are two kernel maintenance one

01:01:19,200 --> 01:01:24,319
kernel mentor and one kernel

01:01:21,359 --> 01:01:26,799
developer in the team while we are

01:01:24,319 --> 01:01:28,880
highly motivated to work on the project

01:01:26,799 --> 01:01:30,720
we don't think we can achieve the goal

01:01:28,880 --> 01:01:33,520
by ourselves only

01:01:30,720 --> 01:01:34,720
we definitely rely on upstream project

01:01:33,520 --> 01:01:37,440
activities

01:01:34,720 --> 01:01:38,400
the question is how to use the upstream

01:01:37,440 --> 01:01:41,839
outputs and

01:01:38,400 --> 01:01:44,400
how to work with upstream projects

01:01:41,839 --> 01:01:46,480
so what does upstream first mean for the

01:01:44,400 --> 01:01:49,359
cip kernel team

01:01:46,480 --> 01:01:50,799
upstream is linus main line unstable

01:01:49,359 --> 01:01:53,760
releases

01:01:50,799 --> 01:01:54,720
by upstream first principle only patches

01:01:53,760 --> 01:01:57,200
which are already

01:01:54,720 --> 01:01:58,000
in the mainline or stable kernels are

01:01:57,200 --> 01:02:03,039
allowed to be

01:01:58,000 --> 01:02:06,720
incorporated into cip kernel releases

01:02:03,039 --> 01:02:09,599
so cip members proceed up stream the

01:02:06,720 --> 01:02:11,440
preferred code and once the code is

01:02:09,599 --> 01:02:12,799
incorporated into the main line of

01:02:11,440 --> 01:02:15,119
stable kernels

01:02:12,799 --> 01:02:17,520
the code is allowed to be backboarded

01:02:15,119 --> 01:02:20,160
into cip kernels

01:02:17,520 --> 01:02:20,640
on the other hand the cip kernel team

01:02:20,160 --> 01:02:23,920
takes

01:02:20,640 --> 01:02:26,880
actions from a different perspective

01:02:23,920 --> 01:02:29,039
one of the cip kernel team's objectives

01:02:26,880 --> 01:02:32,480
is to maintain cip kernels

01:02:29,039 --> 01:02:35,440
safe and sound for this objective

01:02:32,480 --> 01:02:36,400
the team monitors stable releases

01:02:35,440 --> 01:02:39,119
carefully

01:02:36,400 --> 01:02:39,680
and contributes to the stable releases

01:02:39,119 --> 01:02:42,720
where

01:02:39,680 --> 01:02:45,440
needed in general

01:02:42,720 --> 01:02:46,559
patches are committed to the main diet

01:02:45,440 --> 01:02:49,359
first

01:02:46,559 --> 01:02:49,920
then they are backboarded to each stable

01:02:49,359 --> 01:02:53,440
kernel

01:02:49,920 --> 01:02:54,559
however by some reason such backboarding

01:02:53,440 --> 01:02:59,599
might not be done

01:02:54,559 --> 01:02:59,599
on some specific specific stable kernels

01:03:00,079 --> 01:03:04,079
it may be because such patches are

01:03:02,240 --> 01:03:06,079
irrelevant to them or because

01:03:04,079 --> 01:03:07,520
backboarding is not trivial for such

01:03:06,079 --> 01:03:11,680
stable kernels

01:03:07,520 --> 01:03:14,319
due to the changes of implementations

01:03:11,680 --> 01:03:15,359
the cip kernel team reviews those patch

01:03:14,319 --> 01:03:17,760
status

01:03:15,359 --> 01:03:20,640
if the team identifies some patches to

01:03:17,760 --> 01:03:23,920
be backboarded to some stable kernels

01:03:20,640 --> 01:03:26,880
the team contributes to them we are

01:03:23,920 --> 01:03:28,880
concerned about security parties as well

01:03:26,880 --> 01:03:30,160
we check the status of the security

01:03:28,880 --> 01:03:33,200
patches by using

01:03:30,160 --> 01:03:34,240
open source tools and if some patches

01:03:33,200 --> 01:03:36,960
are missing

01:03:34,240 --> 01:03:40,400
in stable releases the team contributes

01:03:36,960 --> 01:03:43,039
to such stable releases as well

01:03:40,400 --> 01:03:44,160
by incorporating necessary patches the

01:03:43,039 --> 01:03:48,799
team releases

01:03:44,160 --> 01:03:50,799
cip credits based on upstream artifacts

01:03:48,799 --> 01:03:52,400
this is the big picture of the kernel

01:03:50,799 --> 01:03:55,760
team activities

01:03:52,400 --> 01:03:58,880
and patch review cv check

01:03:55,760 --> 01:04:01,599
contributions and kernel releases

01:03:58,880 --> 01:04:02,480
are four major tasks of the cib kernel

01:04:01,599 --> 01:04:04,960
team

01:04:02,480 --> 01:04:05,599
now i'm going to elaborate those four

01:04:04,960 --> 01:04:09,760
tasks

01:04:05,599 --> 01:04:09,760
each by each in the following slides

01:04:10,559 --> 01:04:15,920
the first task is patch review the cip

01:04:13,920 --> 01:04:18,160
kernel maintenance review patches

01:04:15,920 --> 01:04:19,200
which are included in stable release

01:04:18,160 --> 01:04:22,480
candidates

01:04:19,200 --> 01:04:24,880
for 4.4 and 4.19

01:04:22,480 --> 01:04:26,160
because cip currents are based on those

01:04:24,880 --> 01:04:28,640
releases

01:04:26,160 --> 01:04:29,200
as a result of the review if the team

01:04:28,640 --> 01:04:31,760
finds

01:04:29,200 --> 01:04:33,599
any issues particularly comments are

01:04:31,760 --> 01:04:37,440
sent to the kernel mailing list

01:04:33,599 --> 01:04:39,920
directly a black window on the right

01:04:37,440 --> 01:04:41,359
hand side is an example of such review

01:04:39,920 --> 01:04:43,280
comments

01:04:41,359 --> 01:04:45,680
review results are saved in the git

01:04:43,280 --> 01:04:46,400
glove and if the team identifies some

01:04:45,680 --> 01:04:49,280
patches

01:04:46,400 --> 01:04:52,480
should be backboarded the team initiates

01:04:49,280 --> 01:04:56,160
the contribution process

01:04:52,480 --> 01:04:56,880
the second task is cb check for security

01:04:56,160 --> 01:04:59,200
fixes

01:04:56,880 --> 01:05:01,359
the team follows a separate process by

01:04:59,200 --> 01:05:04,400
using cib kernel sec

01:05:01,359 --> 01:05:07,200
which was developed for this task

01:05:04,400 --> 01:05:09,440
the cip kernel sec gathers cv

01:05:07,200 --> 01:05:10,960
information from multiple sources such

01:05:09,440 --> 01:05:14,160
as stable kernels

01:05:10,960 --> 01:05:16,640
debian kernel and ubuntu kernel the

01:05:14,160 --> 01:05:18,319
kernel team focuses on maintaining the

01:05:16,640 --> 01:05:22,400
cv

01:05:18,319 --> 01:05:24,640
cv affected in kernel 4.4 and 4.19

01:05:22,400 --> 01:05:27,039
and may backboard the specific cv

01:05:24,640 --> 01:05:31,440
commits to the stable kernel

01:05:27,039 --> 01:05:34,240
where appropriate the cip kernel sec

01:05:31,440 --> 01:05:35,119
provides simple graphic layouts as well

01:05:34,240 --> 01:05:38,559
as cri

01:05:35,119 --> 01:05:40,400
interfaces the users can get

01:05:38,559 --> 01:05:43,039
detailed information via those

01:05:40,400 --> 01:05:45,280
interfaces

01:05:43,039 --> 01:05:48,400
it provides multiple information

01:05:45,280 --> 01:05:51,119
regarding kernel cves

01:05:48,400 --> 01:05:53,359
as i mentioned in the previous slide the

01:05:51,119 --> 01:05:55,599
purpose of the cip kernel sec

01:05:53,359 --> 01:05:56,400
is to track the status of security

01:05:55,599 --> 01:05:59,520
issues

01:05:56,400 --> 01:06:02,240
identified by cvid

01:05:59,520 --> 01:06:03,119
this tool is public and can be found in

01:06:02,240 --> 01:06:06,319
the git lab

01:06:03,119 --> 01:06:06,640
under the cip project you can also reach

01:06:06,319 --> 01:06:10,720
it

01:06:06,640 --> 01:06:10,720
on the website via the qr code

01:06:11,599 --> 01:06:16,000
the third task is contributions there

01:06:14,640 --> 01:06:18,559
are two

01:06:16,000 --> 01:06:19,359
for the contributions the first

01:06:18,559 --> 01:06:22,480
objective

01:06:19,359 --> 01:06:24,400
is to fill the gaps as a result of patch

01:06:22,480 --> 01:06:27,920
reviews and cv check

01:06:24,400 --> 01:06:30,720
we identify missing patches such parties

01:06:27,920 --> 01:06:33,599
are needed for cip kernels to fulfill

01:06:30,720 --> 01:06:36,079
industrial grade requirements so the

01:06:33,599 --> 01:06:38,720
team contributes them to upstream

01:06:36,079 --> 01:06:39,359
so that cip kernels can be based on the

01:06:38,720 --> 01:06:42,720
stable

01:06:39,359 --> 01:06:46,000
kernels which include those patches

01:06:42,720 --> 01:06:48,559
the second objective is to give back

01:06:46,000 --> 01:06:49,599
because we take advantage of upstream

01:06:48,559 --> 01:06:53,119
outputs

01:06:49,599 --> 01:06:55,520
we are grateful for upstream activities

01:06:53,119 --> 01:06:56,480
therefore cib kernel team works on

01:06:55,520 --> 01:06:59,520
contributions

01:06:56,480 --> 01:07:00,000
of bug fixes and security patches to all

01:06:59,520 --> 01:07:05,599
stable

01:07:00,000 --> 01:07:08,000
kernels not limiting to 4.4 or 4.19

01:07:05,599 --> 01:07:09,200
these statistics show the counts of the

01:07:08,000 --> 01:07:12,880
contributions by

01:07:09,200 --> 01:07:15,760
the cip kernel team to stable releases

01:07:12,880 --> 01:07:17,440
i reported the statistics at erc north

01:07:15,760 --> 01:07:20,319
america 2020

01:07:17,440 --> 01:07:21,359
in june since then the team keeps

01:07:20,319 --> 01:07:24,880
contributing to

01:07:21,359 --> 01:07:27,440
all stable releases as you can see here

01:07:24,880 --> 01:07:32,240
compared with june time frame the team

01:07:27,440 --> 01:07:32,240
added nearly 100 contributions in total

01:07:34,559 --> 01:07:38,559
the last but not the least task is cip

01:07:37,280 --> 01:07:41,119
kernel release

01:07:38,559 --> 01:07:42,000
again one of the cib current team's

01:07:41,119 --> 01:07:44,880
objectives

01:07:42,000 --> 01:07:46,079
is to maintain cip kernels safe and

01:07:44,880 --> 01:07:48,559
sound

01:07:46,079 --> 01:07:50,319
through stable patch review the team

01:07:48,559 --> 01:07:53,359
identifies missing patches and

01:07:50,319 --> 01:07:56,240
contributes them to stable climates

01:07:53,359 --> 01:07:58,720
also cip members want to backboard their

01:07:56,240 --> 01:08:01,599
preferred patches

01:07:58,720 --> 01:08:04,480
they send patches to cipdev mailing list

01:08:01,599 --> 01:08:07,680
for cip kernel maintenance review

01:08:04,480 --> 01:08:11,200
by incorporating acknowledged patches

01:08:07,680 --> 01:08:13,760
the testing team starts testing after

01:08:11,200 --> 01:08:14,640
everything goes well the maintainer in

01:08:13,760 --> 01:08:18,080
charge

01:08:14,640 --> 01:08:20,080
tags it as a release candidate

01:08:18,080 --> 01:08:21,600
another maintainer checks and

01:08:20,080 --> 01:08:25,120
acknowledges it

01:08:21,600 --> 01:08:27,120
then the cip kernel is released

01:08:25,120 --> 01:08:29,839
the announcement of the release is sent

01:08:27,120 --> 01:08:33,040
out to cipdev mailing list

01:08:29,839 --> 01:08:37,199
so by subscribing the cip dev you are

01:08:33,040 --> 01:08:37,199
notified of the cip releases

01:08:37,600 --> 01:08:43,920
as i mentioned already cip slts kernels

01:08:41,040 --> 01:08:45,279
are based on 4.4 and 4.19 stable

01:08:43,920 --> 01:08:48,400
releases

01:08:45,279 --> 01:08:52,000
the first releases of 4.4 and 4.4

01:08:48,400 --> 01:08:53,480
rt were done in 2017. we plan to

01:08:52,000 --> 01:08:56,480
maintain them to

01:08:53,480 --> 01:09:00,000
2027 for 10 years

01:08:56,480 --> 01:09:03,199
the first releases of 4.19 and 4.19

01:09:00,000 --> 01:09:05,359
rt were done in 2019

01:09:03,199 --> 01:09:08,080
and likewise we support them for 10

01:09:05,359 --> 01:09:11,279
years until 2029

01:09:08,080 --> 01:09:14,560
currently 4.4 is released once a month

01:09:11,279 --> 01:09:17,199
4.4 rt is once every 2 month

01:09:14,560 --> 01:09:19,199
because commit counts for 4.4 are

01:09:17,199 --> 01:09:23,040
decreasing

01:09:19,199 --> 01:09:27,520
4.19 is twice a month and 4.19 rt

01:09:23,040 --> 01:09:30,640
is once every two months respectively

01:09:27,520 --> 01:09:33,279
so far we have steadily released kernels

01:09:30,640 --> 01:09:34,319
thanks to our maintainers by firing

01:09:33,279 --> 01:09:37,440
release

01:09:34,319 --> 01:09:39,920
frequencies i just explained

01:09:37,440 --> 01:09:42,880
i also reported the release statistics

01:09:39,920 --> 01:09:45,839
at years in north america 2020

01:09:42,880 --> 01:09:46,239
compared with those in june the team

01:09:45,839 --> 01:09:49,199
made

01:09:46,239 --> 01:09:52,239
20 additional releases and year total

01:09:49,199 --> 01:09:55,040
suffice for this six

01:09:52,239 --> 01:09:58,480
to the end of this year several releases

01:09:55,040 --> 01:09:58,480
will be added for sure

01:09:58,719 --> 01:10:04,800
4.4 and 4.19 stable releases are active

01:10:02,400 --> 01:10:06,880
and we are taking advantage of their

01:10:04,800 --> 01:10:10,239
outputs now

01:10:06,880 --> 01:10:11,600
we intend to maintain cip slt squadrons

01:10:10,239 --> 01:10:15,360
for 10 years

01:10:11,600 --> 01:10:17,120
while the life spans of 4.4 and 4.19

01:10:15,360 --> 01:10:20,320
stable corners are both

01:10:17,120 --> 01:10:23,360
six years so after they finish

01:10:20,320 --> 01:10:26,800
those main maintenance the rest of years

01:10:23,360 --> 01:10:29,360
should be maintained by cip because

01:10:26,800 --> 01:10:30,080
maintenance of 4.4 stable release will

01:10:29,360 --> 01:10:33,600
be finished

01:10:30,080 --> 01:10:35,520
in january 2022 cib will start to

01:10:33,600 --> 01:10:39,040
maintain cip 4.4

01:10:35,520 --> 01:10:42,000
by ourselves the cip corner team is

01:10:39,040 --> 01:10:42,960
discussing how to work on this we have

01:10:42,000 --> 01:10:45,360
been relying on

01:10:42,960 --> 01:10:47,520
upstream developers and other stable

01:10:45,360 --> 01:10:50,960
contributors for their outputs

01:10:47,520 --> 01:10:53,120
now cip cannot rely on this

01:10:50,960 --> 01:10:54,320
after the end of stable release

01:10:53,120 --> 01:10:56,960
maintenance

01:10:54,320 --> 01:10:59,120
so cib kernel maintenance would review

01:10:56,960 --> 01:11:01,520
each other's work

01:10:59,120 --> 01:11:02,400
the details are still being discussed

01:11:01,520 --> 01:11:04,960
and i hope

01:11:02,400 --> 01:11:07,920
we can share with you the plan at some

01:11:04,960 --> 01:11:07,920
event next year

01:11:08,480 --> 01:11:15,440
before closing my talk i'd like to show

01:11:11,520 --> 01:11:18,159
information sources relating to cip

01:11:15,440 --> 01:11:18,800
this page talks about our weekly irc

01:11:18,159 --> 01:11:22,000
meetings

01:11:18,800 --> 01:11:25,679
it is open to everyone come talk to us

01:11:22,000 --> 01:11:28,000
on cip channel at the meetings

01:11:25,679 --> 01:11:29,280
this page talks about repositories on

01:11:28,000 --> 01:11:32,239
gitlab

01:11:29,280 --> 01:11:33,199
links to open source tools including cip

01:11:32,239 --> 01:11:36,480
kernel sake

01:11:33,199 --> 01:11:38,320
are here the testing themes links are

01:11:36,480 --> 01:11:43,120
here

01:11:38,320 --> 01:11:46,000
and other information is listed here

01:11:43,120 --> 01:11:47,040
that's all thanks for your time to join

01:11:46,000 --> 01:11:55,679
this talk

01:11:47,040 --> 01:11:58,080
are there any questions

01:11:55,679 --> 01:11:59,280
okay thank you very much for watching my

01:11:58,080 --> 01:12:02,239
video

01:11:59,280 --> 01:12:04,719
so if you have questions later on uh

01:12:02,239 --> 01:12:08,239
please send us email

01:12:04,719 --> 01:12:11,440
so let's move on the next speaker is

01:12:08,239 --> 01:12:23,840
min transom from renesas design vietnam

01:12:11,440 --> 01:12:23,840
so means the flow is viewers

01:12:32,560 --> 01:12:38,719
hello everyone um i'm

01:12:35,760 --> 01:12:40,560
from renaissance and uh now i would like

01:12:38,719 --> 01:12:43,679
to share my experiences

01:12:40,560 --> 01:12:45,840
integrating the cv slts kernel into a

01:12:43,679 --> 01:12:49,440
fully fledgling thing

01:12:45,840 --> 01:12:52,560
and he's the agenda i will have

01:12:49,440 --> 01:12:53,360
uh seven sections the first is some

01:12:52,560 --> 01:12:56,080
introductions

01:12:53,360 --> 01:12:58,080
about me in my company and the next

01:12:56,080 --> 01:13:01,840
background information about our

01:12:58,080 --> 01:13:05,280
application view our accessory platform

01:13:01,840 --> 01:13:07,920
why a cap is suitable for us

01:13:05,280 --> 01:13:08,880
and the correlations and next thing the

01:13:07,920 --> 01:13:12,640
main part

01:13:08,880 --> 01:13:13,920
i will go through seven items of my

01:13:12,640 --> 01:13:15,840
experiences

01:13:13,920 --> 01:13:17,440
and then some quick information for next

01:13:15,840 --> 01:13:20,480
step q a

01:13:17,440 --> 01:13:24,480
thank you message and reference link

01:13:20,480 --> 01:13:24,480
the first one is the introductions

01:13:24,719 --> 01:13:29,679
my name is mun and i'm a senior staff

01:13:27,679 --> 01:13:32,320
engineer from research design

01:13:29,679 --> 01:13:34,080
name currently am the leader in the

01:13:32,320 --> 01:13:36,560
asset lineup team

01:13:34,080 --> 01:13:37,199
and we provide a very highly known

01:13:36,560 --> 01:13:40,719
package

01:13:37,199 --> 01:13:44,000
integrating the cv slts general

01:13:40,719 --> 01:13:46,640
into the display and i have 10 years

01:13:44,000 --> 01:13:47,280
experiences in embedded software

01:13:46,640 --> 01:13:49,760
development

01:13:47,280 --> 01:13:52,159
mainly linux and last one in my contact

01:13:49,760 --> 01:13:52,159
email

01:13:53,679 --> 01:13:59,520
and about the main company renaissance

01:13:57,360 --> 01:14:00,960
is renaissance semiconductor for

01:13:59,520 --> 01:14:04,080
advanced solutions

01:14:00,960 --> 01:14:06,960
our headquarters in tokyo japan and we

01:14:04,080 --> 01:14:08,640
provide a platform for automotive hmi

01:14:06,960 --> 01:14:10,640
industrial and iot

01:14:08,640 --> 01:14:12,640
currently we have more than eighteen

01:14:10,640 --> 01:14:15,360
thousand pet cows

01:14:12,640 --> 01:14:16,159
and for the major operations we have the

01:14:15,360 --> 01:14:18,480
research

01:14:16,159 --> 01:14:21,920
development design manufacturing sales

01:14:18,480 --> 01:14:24,960
and servicing of semiconductor products

01:14:21,920 --> 01:14:27,840
renaissance are designed name

01:14:24,960 --> 01:14:28,640
obviously a french company and we

01:14:27,840 --> 01:14:31,440
located

01:14:28,640 --> 01:14:33,760
in ho chi minh city in vietnam we major

01:14:31,440 --> 01:14:34,560
in automotive and hmi good morning

01:14:33,760 --> 01:14:37,199
everyone

01:14:34,560 --> 01:14:41,040
employees and we design for the

01:14:37,199 --> 01:14:44,080
semiconductor of software and hardware

01:14:41,040 --> 01:14:45,679
for some background product um today i

01:14:44,080 --> 01:14:48,320
just want to mention about the

01:14:45,679 --> 01:14:50,239
application field human machine

01:14:48,320 --> 01:14:53,760
interface with 3d graphics

01:14:50,239 --> 01:14:54,400
and video capabilities for some example

01:14:53,760 --> 01:14:56,880
like the

01:14:54,400 --> 01:14:58,239
intercoms the digital chinese and the

01:14:56,880 --> 01:15:01,760
kio terminals and

01:14:58,239 --> 01:15:04,960
many more and and this

01:15:01,760 --> 01:15:08,719
platform is our target product for above

01:15:04,960 --> 01:15:10,239
applications the first item i want to

01:15:08,719 --> 01:15:13,440
mention here is the

01:15:10,239 --> 01:15:16,960
quantum media processor at the platform

01:15:13,440 --> 01:15:18,640
it's a family of 64-bit and 32-bit and

01:15:16,960 --> 01:15:22,320
based npu

01:15:18,640 --> 01:15:25,040
and with the especially in imagination

01:15:22,320 --> 01:15:26,960
3d graphics and provide the video

01:15:25,040 --> 01:15:30,159
processing up to 4k

01:15:26,960 --> 01:15:31,360
with many other concerns necessary for

01:15:30,159 --> 01:15:33,840
hmi

01:15:31,360 --> 01:15:34,640
we also have the event git and the

01:15:33,840 --> 01:15:37,120
verifying

01:15:34,640 --> 01:15:38,480
package that i will share more details

01:15:37,120 --> 01:15:41,280
next line

01:15:38,480 --> 01:15:42,640
we also have the development tools and

01:15:41,280 --> 01:15:45,440
the software add-on

01:15:42,640 --> 01:15:46,239
would add more optionals for the

01:15:45,440 --> 01:15:48,480
customer

01:15:46,239 --> 01:15:50,400
and make them easy to develop the

01:15:48,480 --> 01:15:53,520
product

01:15:50,400 --> 01:15:56,719
for the hmi solutions

01:15:53,520 --> 01:16:00,080
we provide a linear package with

01:15:56,719 --> 01:16:03,679
many components

01:16:00,080 --> 01:16:05,679
that apply the cmi level 3 we also have

01:16:03,679 --> 01:16:08,440
the industry of green linux

01:16:05,679 --> 01:16:09,760
we have the gui framework multimedia

01:16:08,440 --> 01:16:13,679
securitywear

01:16:09,760 --> 01:16:17,280
and many samples and we provide them

01:16:13,679 --> 01:16:21,600
verify and super long-term support

01:16:17,280 --> 01:16:25,280
to satisfy this cab is our answer

01:16:21,600 --> 01:16:28,400
it has 10 or more years apart

01:16:25,280 --> 01:16:30,880
and so is to take off our target

01:16:28,400 --> 01:16:34,000
development

01:16:30,880 --> 01:16:37,040
we already joined a cfe

01:16:34,000 --> 01:16:40,800
at a member and we provide a

01:16:37,040 --> 01:16:44,080
we propose the reference platform

01:16:40,800 --> 01:16:48,159
this is the ssd1 for the m7

01:16:44,080 --> 01:16:50,560
and ssd2m for the mp3

01:16:48,159 --> 01:16:52,400
and there are also on the reference

01:16:50,560 --> 01:16:55,840
platform from other members

01:16:52,400 --> 01:16:57,280
and totally seven we call x86 and with

01:16:55,840 --> 01:17:01,040
seven and mbh

01:16:57,280 --> 01:17:01,600
architectures next i will go to the main

01:17:01,040 --> 01:17:04,800
part

01:17:01,600 --> 01:17:07,920
my experiences the number one

01:17:04,800 --> 01:17:10,640
we have to start first the ideal

01:17:07,920 --> 01:17:11,600
development flow is from physical team

01:17:10,640 --> 01:17:14,880
upstream

01:17:11,600 --> 01:17:17,360
to the mainline mts

01:17:14,880 --> 01:17:18,159
and i mean the silicone team here is the

01:17:17,360 --> 01:17:20,880
kernel team

01:17:18,159 --> 01:17:22,320
and also cv member and then cv member

01:17:20,880 --> 01:17:25,520
who contribute to the

01:17:22,320 --> 01:17:27,760
stream and in this upstream work it

01:17:25,520 --> 01:17:30,880
includes renaissance purchase

01:17:27,760 --> 01:17:33,040
and then this mainline or fds scanner

01:17:30,880 --> 01:17:36,480
will be used in the cv slts

01:17:33,040 --> 01:17:37,760
kernel and finally into iterate to the

01:17:36,480 --> 01:17:39,840
display

01:17:37,760 --> 01:17:41,280
however this is only the ideal

01:17:39,840 --> 01:17:44,080
development flow

01:17:41,280 --> 01:17:45,360
in reality to satisfy the on-time

01:17:44,080 --> 01:17:48,560
delivery

01:17:45,360 --> 01:17:49,199
we have to start first we integrate the

01:17:48,560 --> 01:17:52,320
cvs

01:17:49,199 --> 01:17:56,080
lts tunnel into our assessment

01:17:52,320 --> 01:17:59,840
by ourselves and we have to patch

01:17:56,080 --> 01:18:01,920
a lot for this work however we

01:17:59,840 --> 01:18:04,320
gradually get benefits this is the

01:18:01,920 --> 01:18:06,320
number two experiment

01:18:04,320 --> 01:18:07,440
for the next update and super long-term

01:18:06,320 --> 01:18:10,880
maintenance

01:18:07,440 --> 01:18:11,360
we packed less less and less because it

01:18:10,880 --> 01:18:14,719
now

01:18:11,360 --> 01:18:15,440
the idea of development law development

01:18:14,719 --> 01:18:18,560
flow go

01:18:15,440 --> 01:18:22,159
into the reality and

01:18:18,560 --> 01:18:23,440
we have the work reduced for the first

01:18:22,159 --> 01:18:26,239
release

01:18:23,440 --> 01:18:26,960
for 15 main months for the second just

01:18:26,239 --> 01:18:29,360
01:18:26,960 --> 01:18:30,640
and gradually in the stable phase around

01:18:29,360 --> 01:18:33,440
seven many months

01:18:30,640 --> 01:18:34,159
even though the other row number not

01:18:33,440 --> 01:18:36,080
real but

01:18:34,159 --> 01:18:37,760
actually we have the radio development

01:18:36,080 --> 01:18:39,600
cost

01:18:37,760 --> 01:18:43,120
and experiment number three we

01:18:39,600 --> 01:18:46,239
continuously get the benefit

01:18:43,120 --> 01:18:48,800
in the past we have whenever we touch

01:18:46,239 --> 01:18:49,440
the kernel if we want to fix the book we

01:18:48,800 --> 01:18:52,239
have to

01:18:49,440 --> 01:18:54,000
investigate the reason for the solution

01:18:52,239 --> 01:18:56,320
now we can directly refer to

01:18:54,000 --> 01:18:59,040
the main line and the edges touch to

01:18:56,320 --> 01:19:02,080
solve our similar issues

01:18:59,040 --> 01:19:02,560
and not only us for our customer they

01:19:02,080 --> 01:19:05,679
can

01:19:02,560 --> 01:19:07,679
have the same benefit and also to

01:19:05,679 --> 01:19:10,719
support the latest control

01:19:07,679 --> 01:19:12,239
if they want instead of still pro they

01:19:10,719 --> 01:19:15,920
can refer to remain line

01:19:12,239 --> 01:19:18,480
and test kernel and do this quickly so

01:19:15,920 --> 01:19:19,760
we verified and our customers spend less

01:19:18,480 --> 01:19:22,960
effort to fix box

01:19:19,760 --> 01:19:25,199
or to support the latest kernel

01:19:22,960 --> 01:19:27,040
number four experience we got a long

01:19:25,199 --> 01:19:31,520
term benefit

01:19:27,040 --> 01:19:34,400
for the first one we francesca's team

01:19:31,520 --> 01:19:36,320
have the patch for our kernel and i call

01:19:34,400 --> 01:19:39,440
the newbie patch

01:19:36,320 --> 01:19:41,600
also cv kernel team had a patch for the

01:19:39,440 --> 01:19:44,480
same version of the cd kernel

01:19:41,600 --> 01:19:45,280
and i called expert patch we compare

01:19:44,480 --> 01:19:48,719
this to

01:19:45,280 --> 01:19:52,080
kernel and we can learn the difference

01:19:48,719 --> 01:19:53,840
and improve ourselves we also try the

01:19:52,080 --> 01:19:57,120
mailing list to

01:19:53,840 --> 01:20:00,159
join or to monitor or to join

01:19:57,120 --> 01:20:02,960
the expert discussion about the kernel

01:20:00,159 --> 01:20:04,960
and essentially if any discussion

01:20:02,960 --> 01:20:08,080
related directly to renaissance

01:20:04,960 --> 01:20:09,600
mpu we can get informed more and get

01:20:08,080 --> 01:20:12,800
more benefit

01:20:09,600 --> 01:20:15,520
we also have a chance to join many

01:20:12,800 --> 01:20:16,880
um civilian ministers and other open

01:20:15,520 --> 01:20:20,400
source concurrent

01:20:16,880 --> 01:20:23,040
to learn about the expert discussion

01:20:20,400 --> 01:20:25,199
and also i have a chance to speak here

01:20:23,040 --> 01:20:28,000
to share my experience and to receive

01:20:25,199 --> 01:20:31,440
valuable feedback from you guys

01:20:28,000 --> 01:20:33,920
so we have a lot of chance

01:20:31,440 --> 01:20:35,360
for the human development and we can

01:20:33,920 --> 01:20:38,480
learn and we can work

01:20:35,360 --> 01:20:40,639
with many experts and

01:20:38,480 --> 01:20:42,719
external number five we develop

01:20:40,639 --> 01:20:45,920
step-by-step

01:20:42,719 --> 01:20:47,920
cv slds gonna have two versions the

01:20:45,920 --> 01:20:51,360
normal and the real time

01:20:47,920 --> 01:20:54,480
and we even start one to support what

01:20:51,360 --> 01:20:56,239
we don't have we cannot support one at

01:20:54,480 --> 01:20:57,840
the same time the same level so we

01:20:56,239 --> 01:21:00,159
choose step by step

01:20:57,840 --> 01:21:01,199
the first a very normal version and the

01:21:00,159 --> 01:21:03,360
next is

01:21:01,199 --> 01:21:04,400
just the patch panel more and verify for

01:21:03,360 --> 01:21:07,120
real time

01:21:04,400 --> 01:21:09,199
and next one verify for no more and

01:21:07,120 --> 01:21:10,400
touch for real time and continuously

01:21:09,199 --> 01:21:13,360
like this

01:21:10,400 --> 01:21:14,000
so we can stay with the step by step

01:21:13,360 --> 01:21:17,040
from easy

01:21:14,000 --> 01:21:19,440
to difficult into stable phase

01:21:17,040 --> 01:21:20,639
number sixty with a part one version at

01:21:19,440 --> 01:21:24,480
one time

01:21:20,639 --> 01:21:25,920
for example in 2019 the latest tv

01:21:24,480 --> 01:21:29,360
science version 4

01:21:25,920 --> 01:21:32,400
has four different versions however

01:21:29,360 --> 01:21:33,360
to choose which version foreign we

01:21:32,400 --> 01:21:38,719
design

01:21:33,360 --> 01:21:41,280
cb 10 for 4.14 and cbs 366.4.4

01:21:38,719 --> 01:21:42,800
to do to resign like this we have the

01:21:41,280 --> 01:21:44,800
unified support

01:21:42,800 --> 01:21:45,920
the only difference between the normal

01:21:44,800 --> 01:21:49,760
and the real time

01:21:45,920 --> 01:21:52,239
must be just the real-time first set

01:21:49,760 --> 01:21:55,040
and the last one is we release once

01:21:52,239 --> 01:21:58,159
every three months

01:21:55,040 --> 01:22:01,040
for the cbs lts kernel

01:21:58,159 --> 01:22:02,960
released 4.19 twice a month and

01:22:01,040 --> 01:22:06,960
hopefully for once a month

01:22:02,960 --> 01:22:10,320
total time 4.19 price month and 4.4

01:22:06,960 --> 01:22:12,639
once every two months when we release

01:22:10,320 --> 01:22:15,600
one every three months we always get the

01:22:12,639 --> 01:22:17,840
update from the latest cv control

01:22:15,600 --> 01:22:19,360
and also we have enough time for one

01:22:17,840 --> 01:22:22,719
development cycle

01:22:19,360 --> 01:22:24,719
we have six around six weeks for pork

01:22:22,719 --> 01:22:26,480
six weeks for verify and two for

01:22:24,719 --> 01:22:28,960
documentation

01:22:26,480 --> 01:22:31,440
even though numbers are very low because

01:22:28,960 --> 01:22:35,120
we don't spend much focus including

01:22:31,440 --> 01:22:38,159
home development variety but is it

01:22:35,120 --> 01:22:41,679
enough time for one cycle

01:22:38,159 --> 01:22:44,400
and that's under excellent i have to

01:22:41,679 --> 01:22:45,040
i have time to share now for the next

01:22:44,400 --> 01:22:47,440
step

01:22:45,040 --> 01:22:49,600
in the near future we would like to

01:22:47,440 --> 01:22:52,000
integrate the car package

01:22:49,600 --> 01:22:53,120
and we also want to expand the move to

01:22:52,000 --> 01:22:56,159
and cover that

01:22:53,120 --> 01:22:58,159
the cv car package and in the far

01:22:56,159 --> 01:23:02,560
future we may consider the

01:22:58,159 --> 01:23:06,960
transformation the security or even more

01:23:02,560 --> 01:23:10,880
and that's all for my presentation

01:23:06,960 --> 01:23:14,320
if you have any qa please give me

01:23:10,880 --> 01:23:17,360
and thank you for your time to

01:23:14,320 --> 01:23:19,120
attend my presentation and also finally

01:23:17,360 --> 01:23:23,840
i have some breakfast links

01:23:19,120 --> 01:23:23,840
for you to refer for more details thank

01:23:32,840 --> 01:23:37,440
you

01:23:35,040 --> 01:23:39,600
so um thank you very much for your

01:23:37,440 --> 01:23:40,000
presentations and thank you very much

01:23:39,600 --> 01:23:45,760
for

01:23:40,000 --> 01:23:45,760
all speakers for this rcrp mini summit

01:23:47,280 --> 01:23:54,400
so if you have any further questions

01:23:50,719 --> 01:23:58,719
and comments uh we have a mailing list

01:23:54,400 --> 01:24:02,560
website and also structural and irc

01:23:58,719 --> 01:24:05,840
so please feel free to come

01:24:02,560 --> 01:24:09,199
our information channels and ask

01:24:05,840 --> 01:24:11,360
any questions the cip so now it's time

01:24:09,199 --> 01:24:14,800
to cross cip mini summit

01:24:11,360 --> 01:24:18,000
and i would like to say everyone

01:24:14,800 --> 01:24:21,040
thank you very much and

01:24:18,000 --> 01:24:24,159
yeah hope to see next time so

01:24:21,040 --> 01:24:31,840
thank you very much and bye bye

01:24:24,159 --> 01:24:31,840

YouTube URL: https://www.youtube.com/watch?v=j16cAsYeuaI


