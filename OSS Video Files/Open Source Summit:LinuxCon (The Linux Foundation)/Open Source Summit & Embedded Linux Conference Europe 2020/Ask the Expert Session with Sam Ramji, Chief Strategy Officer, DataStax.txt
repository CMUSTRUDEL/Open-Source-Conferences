Title: Ask the Expert Session with Sam Ramji, Chief Strategy Officer, DataStax
Publication date: 2020-11-17
Playlist: Open Source Summit & Embedded Linux Conference Europe 2020
Description: 
	Ask the Expert Session with Sam Ramji, Chief Strategy Officer, DataStax
Captions: 
	00:00:00,399 --> 00:00:03,679
so julian said uh thanks for a great

00:00:02,080 --> 00:00:05,120
keynote can you tell us how you got

00:00:03,679 --> 00:00:07,520
started open source i started as an

00:00:05,120 --> 00:00:10,080
engineering manager in 2000

00:00:07,520 --> 00:00:10,639
uh at ophoto and it was linux and apache

00:00:10,080 --> 00:00:12,719
that

00:00:10,639 --> 00:00:14,400
and open source java that really let us

00:00:12,719 --> 00:00:16,960
build

00:00:14,400 --> 00:00:18,000
one of the first photography businesses

00:00:16,960 --> 00:00:21,279
on the internet

00:00:18,000 --> 00:00:22,960
and without the fluidity of the code

00:00:21,279 --> 00:00:24,960
without our ability to not worry about

00:00:22,960 --> 00:00:26,400
licensing um the only thing we had to

00:00:24,960 --> 00:00:28,400
pay for directly was

00:00:26,400 --> 00:00:30,160
our database in order to scale the

00:00:28,400 --> 00:00:31,760
distributed systems we built

00:00:30,160 --> 00:00:33,280
that was all open source we kind of took

00:00:31,760 --> 00:00:34,640
it for granted it was just the tools

00:00:33,280 --> 00:00:35,600
that were obviously the right ones for

00:00:34,640 --> 00:00:37,520
the job

00:00:35,600 --> 00:00:40,000
and then in 2005 i was working for

00:00:37,520 --> 00:00:41,520
microsoft

00:00:40,000 --> 00:00:43,360
which was a very strange turn of events

00:00:41,520 --> 00:00:44,480
because i was very anti-microsoft

00:00:43,360 --> 00:00:47,440
microsoft

00:00:44,480 --> 00:00:49,200
competitor for my career before that i

00:00:47,440 --> 00:00:50,800
joined the venture capital group

00:00:49,200 --> 00:00:52,320
and went to some conferences on their

00:00:50,800 --> 00:00:53,920
behalf and

00:00:52,320 --> 00:00:55,920
software as a service was just starting

00:00:53,920 --> 00:00:57,520
up one of the things that i noticed at

00:00:55,920 --> 00:00:59,280
these conferences was that nobody was

00:00:57,520 --> 00:01:03,359
talking about microsoft anything

00:00:59,280 --> 00:01:05,280
it was all linux apache mysql php java

00:01:03,359 --> 00:01:06,400
so i came back to the company and i

00:01:05,280 --> 00:01:09,040
wrote a strategy paper

00:01:06,400 --> 00:01:11,280
about a 10-page paper along with a few

00:01:09,040 --> 00:01:13,439
really thoughtful folks in the industry

00:01:11,280 --> 00:01:15,439
including andrew aiken that strategy

00:01:13,439 --> 00:01:17,280
paper basically said microsoft needed to

00:01:15,439 --> 00:01:19,600
embrace open source it needed to make

00:01:17,280 --> 00:01:22,000
its technology very cheap

00:01:19,600 --> 00:01:23,600
uh free to startups and needed to figure

00:01:22,000 --> 00:01:24,799
out how to work really well alongside

00:01:23,600 --> 00:01:27,040
linux

00:01:24,799 --> 00:01:28,640
obviously that was some crazy thinking

00:01:27,040 --> 00:01:31,280
uh but instead of getting fired

00:01:28,640 --> 00:01:32,720
i got uh my paper was included in bill

00:01:31,280 --> 00:01:34,880
gates's strategy

00:01:32,720 --> 00:01:35,759
week and then that made its way to bill

00:01:34,880 --> 00:01:37,439
hilf who was

00:01:35,759 --> 00:01:39,439
running linux open source for the

00:01:37,439 --> 00:01:41,840
company and he invited me to come

00:01:39,439 --> 00:01:43,680
uh work in seattle uh leading open

00:01:41,840 --> 00:01:45,759
source linux technology strategy for

00:01:43,680 --> 00:01:47,520
microsoft and so i started that job in

00:01:45,759 --> 00:01:50,320
2006.

00:01:47,520 --> 00:01:52,840
um let's see take a look take a few uh

00:01:50,320 --> 00:01:54,240
take a look at some of the other

00:01:52,840 --> 00:01:55,759
questions

00:01:54,240 --> 00:01:57,840
in regards to microservices are there

00:01:55,759 --> 00:01:59,680
any lessons uh learned of what not to do

00:01:57,840 --> 00:02:00,719
that i can share yes the the key thing

00:01:59,680 --> 00:02:02,719
and i didn't

00:02:00,719 --> 00:02:04,159
put too much color commentary in the

00:02:02,719 --> 00:02:06,240
keynote the key thing that most of us

00:02:04,159 --> 00:02:09,520
who've been doing microservices for

00:02:06,240 --> 00:02:11,039
a few years up to a decade is that

00:02:09,520 --> 00:02:13,440
they're a really really good idea to

00:02:11,039 --> 00:02:15,680
start with the team's very excited

00:02:13,440 --> 00:02:17,280
it's very small it's very tight you get

00:02:15,680 --> 00:02:18,720
a good service out in six months

00:02:17,280 --> 00:02:21,680
you iterate it several times over the

00:02:18,720 --> 00:02:23,200
next year about two years into

00:02:21,680 --> 00:02:25,120
the life cycle of a microservice people

00:02:23,200 --> 00:02:26,319
are starting to leave the team

00:02:25,120 --> 00:02:28,720
and so you end up with a little bit of

00:02:26,319 --> 00:02:30,239
brain drain microservice itself starts

00:02:28,720 --> 00:02:30,640
to settle down and become a little bit

00:02:30,239 --> 00:02:32,560
more

00:02:30,640 --> 00:02:34,879
stable it sort of starts to go into

00:02:32,560 --> 00:02:37,920
maintenance mode and people forget

00:02:34,879 --> 00:02:40,080
exactly how everything works and with

00:02:37,920 --> 00:02:41,280
that rate of change and the brain drain

00:02:40,080 --> 00:02:44,000
people forget how to change the

00:02:41,280 --> 00:02:46,319
microservice that's all well and good

00:02:44,000 --> 00:02:47,920
technology should stabilize

00:02:46,319 --> 00:02:50,239
but the details of how to change the

00:02:47,920 --> 00:02:52,319
stack get lost

00:02:50,239 --> 00:02:53,760
because in microservices 1.0 there was

00:02:52,319 --> 00:02:56,000
so much focus on giving the team

00:02:53,760 --> 00:02:57,920
all of the control pick any technology

00:02:56,000 --> 00:02:59,360
you want don't limit the team go as fast

00:02:57,920 --> 00:03:00,959
as possible

00:02:59,360 --> 00:03:02,800
and again for the first year or two

00:03:00,959 --> 00:03:03,519
that's a fantastic idea but as soon as

00:03:02,800 --> 00:03:05,840
you get

00:03:03,519 --> 00:03:07,200
to the next step which is two years in

00:03:05,840 --> 00:03:08,319
three years then you need to update it

00:03:07,200 --> 00:03:11,040
or modify it

00:03:08,319 --> 00:03:12,000
you need to fundamentally standardize uh

00:03:11,040 --> 00:03:13,519
your stack

00:03:12,000 --> 00:03:15,360
because you're going to have people

00:03:13,519 --> 00:03:17,200
moving between teams

00:03:15,360 --> 00:03:18,480
in a 100 person organization a 200

00:03:17,200 --> 00:03:19,760
person organization

00:03:18,480 --> 00:03:22,720
you're going to have new people need to

00:03:19,760 --> 00:03:24,480
come in pick up new technology

00:03:22,720 --> 00:03:26,080
and make it work for you so

00:03:24,480 --> 00:03:27,840
standardization ends up being

00:03:26,080 --> 00:03:29,280
absolutely mandatory i think i have a

00:03:27,840 --> 00:03:33,840
little background noise here i'm going

00:03:29,280 --> 00:03:33,840
to close my window

00:03:34,640 --> 00:03:38,159
so the big the big lesson for me is that

00:03:37,040 --> 00:03:39,920
uh you should have

00:03:38,159 --> 00:03:40,959
freedom within an opinionated framework

00:03:39,920 --> 00:03:42,480
so if you're going to get into

00:03:40,959 --> 00:03:44,159
microservices for real

00:03:42,480 --> 00:03:46,480
you need to figure out what is your what

00:03:44,159 --> 00:03:48,000
is your application platform

00:03:46,480 --> 00:03:50,159
what's the set of technologies you're

00:03:48,000 --> 00:03:53,200
going to enable so probably a

00:03:50,159 --> 00:03:54,400
fairly small number how is your platform

00:03:53,200 --> 00:03:55,760
engineering team going to work to

00:03:54,400 --> 00:03:56,720
support all of your application

00:03:55,760 --> 00:03:58,400
developers

00:03:56,720 --> 00:04:00,400
how many databases you're going to use

00:03:58,400 --> 00:04:03,120
right what style of storage

00:04:00,400 --> 00:04:04,799
are you going to enable so that you have

00:04:03,120 --> 00:04:06,799
a coherent environment

00:04:04,799 --> 00:04:08,319
that more teams can actually come

00:04:06,799 --> 00:04:09,680
through over time

00:04:08,319 --> 00:04:12,000
and that you're not creating just

00:04:09,680 --> 00:04:13,200
instant legacy when you create that

00:04:12,000 --> 00:04:14,959
platform organization

00:04:13,200 --> 00:04:17,519
and i've seen a lot of these at google

00:04:14,959 --> 00:04:20,239
at cloud foundry

00:04:17,519 --> 00:04:21,840
and modern organizations using

00:04:20,239 --> 00:04:24,800
kubernetes my last job

00:04:21,840 --> 00:04:26,400
before data stacks i was cloud cloud cto

00:04:24,800 --> 00:04:27,360
and cio for autodesk got about a

00:04:26,400 --> 00:04:31,120
thousand engineers

00:04:27,360 --> 00:04:33,440
in 40 different locations

00:04:31,120 --> 00:04:34,960
we had a lot of activity going on our

00:04:33,440 --> 00:04:35,759
ability to govern that activity was

00:04:34,960 --> 00:04:38,639
really limited

00:04:35,759 --> 00:04:39,600
so getting getting into microservices

00:04:38,639 --> 00:04:41,919
quickly is great

00:04:39,600 --> 00:04:43,840
but coming into it with a platform

00:04:41,919 --> 00:04:45,759
strategy is much much better because

00:04:43,840 --> 00:04:49,520
that will make all the work that you did

00:04:45,759 --> 00:04:49,520
up front uh useful later on

00:04:50,080 --> 00:04:53,520
we've got a excellent question here on

00:04:52,080 --> 00:04:55,040
what are your tips for becoming a more

00:04:53,520 --> 00:04:56,800
data driven organization how can

00:04:55,040 --> 00:04:57,680
multiple internal groups work together i

00:04:56,800 --> 00:05:01,280
think i'll take these

00:04:57,680 --> 00:05:01,280
these questions a little bit separately

00:05:01,440 --> 00:05:05,199
so becoming a data-driven organization

00:05:03,919 --> 00:05:07,919
there's a

00:05:05,199 --> 00:05:09,280
there's a cultural orientation here that

00:05:07,919 --> 00:05:11,840
has everything to do with

00:05:09,280 --> 00:05:13,600
decision making while a lot of

00:05:11,840 --> 00:05:15,280
organizations talk about becoming data

00:05:13,600 --> 00:05:18,320
driven or how much

00:05:15,280 --> 00:05:20,639
data matters to them if the

00:05:18,320 --> 00:05:22,880
decision style that the executives in

00:05:20,639 --> 00:05:25,520
the organization still make is like

00:05:22,880 --> 00:05:26,960
i lead from the gut i listen until i

00:05:25,520 --> 00:05:28,160
know the answer and then i just tell

00:05:26,960 --> 00:05:30,560
everybody what to do

00:05:28,160 --> 00:05:31,600
that's never going to be data driven so

00:05:30,560 --> 00:05:35,120
a wholesale

00:05:31,600 --> 00:05:36,400
shift towards science so that nobody's

00:05:35,120 --> 00:05:38,400
ideas are

00:05:36,400 --> 00:05:39,520
inherently more valid than other

00:05:38,400 --> 00:05:41,520
people's just because of their

00:05:39,520 --> 00:05:43,199
hierarchical position

00:05:41,520 --> 00:05:44,639
that's that's the fundamental shift to

00:05:43,199 --> 00:05:46,560
becoming data driven because if the

00:05:44,639 --> 00:05:50,160
decisions will get made

00:05:46,560 --> 00:05:51,600
and can be reassessed and compared to

00:05:50,160 --> 00:05:53,280
others based on the strength of the

00:05:51,600 --> 00:05:54,960
hypothesis

00:05:53,280 --> 00:05:56,479
the data that we'd need to gather in

00:05:54,960 --> 00:05:57,840
order to prove or disprove the

00:05:56,479 --> 00:06:00,000
hypothesis

00:05:57,840 --> 00:06:00,880
and your ability to iterate it that's

00:06:00,000 --> 00:06:04,160
kind of the core

00:06:00,880 --> 00:06:05,199
once you see management teams allocating

00:06:04,160 --> 00:06:07,280
money

00:06:05,199 --> 00:06:08,880
changing organizations setting

00:06:07,280 --> 00:06:11,039
objectives based on

00:06:08,880 --> 00:06:13,120
science and in a way that everybody in

00:06:11,039 --> 00:06:16,880
the organization can participate in

00:06:13,120 --> 00:06:18,960
equally because everybody can bring data

00:06:16,880 --> 00:06:20,560
then you have a real hope of creating a

00:06:18,960 --> 00:06:24,160
data-driven organization

00:06:20,560 --> 00:06:26,080
without that it's a lot harder

00:06:24,160 --> 00:06:27,280
now once you've got that then

00:06:26,080 --> 00:06:28,160
understanding how to think is really

00:06:27,280 --> 00:06:29,680
important there's an

00:06:28,160 --> 00:06:32,160
outstanding book that i recommend

00:06:29,680 --> 00:06:35,120
without hesitation to everyone

00:06:32,160 --> 00:06:36,560
interested in this which is how to

00:06:35,120 --> 00:06:38,960
measure anything

00:06:36,560 --> 00:06:39,680
and this is a book on how do you use

00:06:38,960 --> 00:06:41,600
data

00:06:39,680 --> 00:06:43,600
to understand quantification of

00:06:41,600 --> 00:06:44,880
uncertainty so you can you can make

00:06:43,600 --> 00:06:47,680
better decisions

00:06:44,880 --> 00:06:48,400
um the final piece of becoming a

00:06:47,680 --> 00:06:50,880
data-driven

00:06:48,400 --> 00:06:52,560
organization is actually have access to

00:06:50,880 --> 00:06:55,520
all of your data infrastructure

00:06:52,560 --> 00:06:56,960
and so that is about being able to have

00:06:55,520 --> 00:06:58,560
somebody else who didn't write the

00:06:56,960 --> 00:07:00,319
microservice

00:06:58,560 --> 00:07:02,080
access that data in a way that's

00:07:00,319 --> 00:07:04,560
consistent and coherent

00:07:02,080 --> 00:07:06,240
so data platform teams you see that at

00:07:04,560 --> 00:07:08,560
home depot you see that target

00:07:06,240 --> 00:07:09,840
you see fairly advanced data platform

00:07:08,560 --> 00:07:12,000
teams at fedex and

00:07:09,840 --> 00:07:13,520
other advanced organizations there's a

00:07:12,000 --> 00:07:15,280
whole

00:07:13,520 --> 00:07:16,720
mode of curating the data making sure

00:07:15,280 --> 00:07:18,000
that you have good access you've got

00:07:16,720 --> 00:07:19,199
good policy

00:07:18,000 --> 00:07:21,680
but i would say that is that the

00:07:19,199 --> 00:07:22,160
technology piece is the is the last step

00:07:21,680 --> 00:07:24,720
almost

00:07:22,160 --> 00:07:25,520
after you've got the cultural piece uh

00:07:24,720 --> 00:07:28,840
nailed

00:07:25,520 --> 00:07:30,000
being able to have good access to data

00:07:28,840 --> 00:07:32,160
under

00:07:30,000 --> 00:07:33,520
clear policies so that by the time you

00:07:32,160 --> 00:07:34,720
get it to your data scientists or

00:07:33,520 --> 00:07:36,240
business analysts

00:07:34,720 --> 00:07:38,319
not only do they know that the data

00:07:36,240 --> 00:07:40,080
quality is good but that they actually

00:07:38,319 --> 00:07:42,319
have permission to use data

00:07:40,080 --> 00:07:44,160
so that that sort of advanced topic that

00:07:42,319 --> 00:07:46,560
all data-driven enterprises

00:07:44,160 --> 00:07:47,919
are talking about now and working on is

00:07:46,560 --> 00:07:50,879
data ethics

00:07:47,919 --> 00:07:51,680
not only do we have ethical access to

00:07:50,879 --> 00:07:53,520
the data

00:07:51,680 --> 00:07:55,280
but the ways that we're going to apply

00:07:53,520 --> 00:07:56,879
ml to this the questions we're going to

00:07:55,280 --> 00:07:59,599
ask about the data the inferences that

00:07:56,879 --> 00:08:02,720
we'll get are those ethical or should we

00:07:59,599 --> 00:08:05,199
not be asking those questions

00:08:02,720 --> 00:08:05,919
um so that's that's a a data-driven

00:08:05,199 --> 00:08:07,599
organization

00:08:05,919 --> 00:08:08,960
answer the with the question about how

00:08:07,599 --> 00:08:09,599
can multiple internal groups work

00:08:08,960 --> 00:08:12,319
together

00:08:09,599 --> 00:08:14,479
i think it comes back to having a common

00:08:12,319 --> 00:08:15,840
way that you make decisions i find that

00:08:14,479 --> 00:08:18,000
i've been a number of companies in the

00:08:15,840 --> 00:08:19,680
last 26 years i find that the

00:08:18,000 --> 00:08:21,360
decision making ends up being the most

00:08:19,680 --> 00:08:25,280
broken part

00:08:21,360 --> 00:08:28,560
of internal collaboration

00:08:25,280 --> 00:08:30,240
because you create a lot of politics and

00:08:28,560 --> 00:08:32,000
who gets to say what about what

00:08:30,240 --> 00:08:33,800
if you don't establish a really good

00:08:32,000 --> 00:08:35,680
ground rule for

00:08:33,800 --> 00:08:37,360
hypothesis-driven test-driven

00:08:35,680 --> 00:08:38,560
data-driven decision-making

00:08:37,360 --> 00:08:40,159
then you'll have a hard time getting

00:08:38,560 --> 00:08:41,279
along and it all becomes very

00:08:40,159 --> 00:08:43,519
relationship based

00:08:41,279 --> 00:08:46,720
which is hard for outsiders to penetrate

00:08:43,519 --> 00:08:47,920
and i tend to think it's anti-inclusive

00:08:46,720 --> 00:08:50,240
there's another really good question

00:08:47,920 --> 00:08:52,560
here on service meshes powering

00:08:50,240 --> 00:08:54,800
connectivity between microservices

00:08:52,560 --> 00:08:56,800
do we see that the data mesh is using

00:08:54,800 --> 00:08:58,720
similar technologies like istiolink

00:08:56,800 --> 00:09:00,399
or kuma to keep the communication

00:08:58,720 --> 00:09:01,360
between components standard across the

00:09:00,399 --> 00:09:02,800
mesh layers

00:09:01,360 --> 00:09:05,360
or does the data mesh have separate

00:09:02,800 --> 00:09:06,959
requirements this has been an area of a

00:09:05,360 --> 00:09:11,440
lot of focus for me in the last

00:09:06,959 --> 00:09:13,680
in the last year or two data meshes

00:09:11,440 --> 00:09:15,839
seem to be evolving in a way that is

00:09:13,680 --> 00:09:16,959
similar to service meshes so you need a

00:09:15,839 --> 00:09:18,880
data proxy

00:09:16,959 --> 00:09:20,240
the affordances around that proxy seem a

00:09:18,880 --> 00:09:21,760
little different from what you see with

00:09:20,240 --> 00:09:24,480
envoy for example

00:09:21,760 --> 00:09:25,440
at the http services layer you've got an

00:09:24,480 --> 00:09:27,040
expectation

00:09:25,440 --> 00:09:29,839
that everything can be accessed through

00:09:27,040 --> 00:09:32,399
http with data you're not always

00:09:29,839 --> 00:09:33,120
accessing information through http we

00:09:32,399 --> 00:09:35,279
have all

00:09:33,120 --> 00:09:37,120
high throughput protocols we have very

00:09:35,279 --> 00:09:39,519
particular

00:09:37,120 --> 00:09:42,160
older patterns that we use and so a data

00:09:39,519 --> 00:09:45,279
proxy has got to have more capabilities

00:09:42,160 --> 00:09:45,680
than what we see in envoy currently but

00:09:45,279 --> 00:09:47,920
the

00:09:45,680 --> 00:09:48,800
overall architecture that we see for a

00:09:47,920 --> 00:09:51,920
data mesh

00:09:48,800 --> 00:09:54,160
much like a service mesh is above that

00:09:51,920 --> 00:09:55,920
proxy layer being able to connect it

00:09:54,160 --> 00:09:57,360
with policies with filters with

00:09:55,920 --> 00:09:59,360
programmability

00:09:57,360 --> 00:10:00,399
that's the that's sort of the next

00:09:59,360 --> 00:10:02,720
horizon

00:10:00,399 --> 00:10:04,000
you can see in service meshes it's

00:10:02,720 --> 00:10:06,800
typical that you're going to have

00:10:04,000 --> 00:10:08,000
uh ability to write modules or filters

00:10:06,800 --> 00:10:10,240
using

00:10:08,000 --> 00:10:11,360
something that will can reduce to web

00:10:10,240 --> 00:10:13,200
assembly

00:10:11,360 --> 00:10:15,040
maybe something like lua something that

00:10:13,200 --> 00:10:16,720
is user programmable

00:10:15,040 --> 00:10:18,160
we need to be able to have that so that

00:10:16,720 --> 00:10:20,399
you can have

00:10:18,160 --> 00:10:21,680
control over your data plane the same

00:10:20,399 --> 00:10:22,640
way that you have control over your

00:10:21,680 --> 00:10:25,760
service plane

00:10:22,640 --> 00:10:27,680
so we see similar architectural patterns

00:10:25,760 --> 00:10:29,839
but uh different requirements mostly

00:10:27,680 --> 00:10:31,680
because of the speed that you need to

00:10:29,839 --> 00:10:33,600
operate at and the particularities of

00:10:31,680 --> 00:10:36,160
how data can find itself

00:10:33,600 --> 00:10:36,800
or how you can access the right endpoint

00:10:36,160 --> 00:10:39,200
for data

00:10:36,800 --> 00:10:41,120
in a distributed system often you have

00:10:39,200 --> 00:10:43,440
to worry about partitioning rules

00:10:41,120 --> 00:10:44,720
you have locality of reference you've

00:10:43,440 --> 00:10:46,079
got network locations

00:10:44,720 --> 00:10:47,519
things that you typically don't worry

00:10:46,079 --> 00:10:48,800
about as much in a stateless

00:10:47,519 --> 00:10:50,079
architecture

00:10:48,800 --> 00:10:51,760
where you're doing over-the-top

00:10:50,079 --> 00:10:53,440
connections through through a service

00:10:51,760 --> 00:10:55,440
mesh

00:10:53,440 --> 00:10:57,519
so these are all awesome questions i

00:10:55,440 --> 00:10:58,240
think i'm probably just about out of

00:10:57,519 --> 00:11:00,560
time

00:10:58,240 --> 00:11:02,160
i've got a few direct messages here a

00:11:00,560 --> 00:11:07,360
couple of questions left in the q

00:11:02,160 --> 00:11:10,320
a um i think i've answered

00:11:07,360 --> 00:11:12,000
what i've got there so far so happy to

00:11:10,320 --> 00:11:13,360
take other questions offline hopefully

00:11:12,000 --> 00:11:14,079
this was a good use of your time i hope

00:11:13,360 --> 00:11:16,079
you

00:11:14,079 --> 00:11:17,920
enjoyed the keynote i think there's an

00:11:16,079 --> 00:11:19,519
amazing opportunity for many of us who

00:11:17,920 --> 00:11:22,079
are working on

00:11:19,519 --> 00:11:23,440
the next generation of microservices to

00:11:22,079 --> 00:11:25,440
come together around

00:11:23,440 --> 00:11:27,040
building an open environment and an open

00:11:25,440 --> 00:11:28,480
architecture for data meshes

00:11:27,040 --> 00:11:29,920
one of the things that i believe

00:11:28,480 --> 00:11:31,680
fundamentally and i've been practicing

00:11:29,920 --> 00:11:33,760
for many years is that

00:11:31,680 --> 00:11:35,360
you need to have freedom for your own

00:11:33,760 --> 00:11:36,160
data you can't have it locked in a

00:11:35,360 --> 00:11:38,000
single cloud

00:11:36,160 --> 00:11:39,760
right most of the people that i talk

00:11:38,000 --> 00:11:42,240
with are trying to figure out

00:11:39,760 --> 00:11:42,959
how to future proof their architecture

00:11:42,240 --> 00:11:45,279
right they're

00:11:42,959 --> 00:11:46,959
doing hybrid development they're doing

00:11:45,279 --> 00:11:48,640
multi-cloud architectures

00:11:46,959 --> 00:11:50,560
and they know that the limiting function

00:11:48,640 --> 00:11:53,040
for their ability to control their

00:11:50,560 --> 00:11:53,760
technology future is where they can move

00:11:53,040 --> 00:11:56,320
their data

00:11:53,760 --> 00:11:56,800
dave mccrory has given a great example

00:11:56,320 --> 00:11:58,959
of

00:11:56,800 --> 00:12:00,320
data gravity as a cognitive metaphor

00:11:58,959 --> 00:12:03,200
that's so powerful

00:12:00,320 --> 00:12:05,040
so if you overweight your gravity into

00:12:03,200 --> 00:12:07,680
one cloud or to one premise it's going

00:12:05,040 --> 00:12:10,560
to limit your ability to move

00:12:07,680 --> 00:12:11,600
and escape that vendor or renegotiate

00:12:10,560 --> 00:12:13,760
your contract

00:12:11,600 --> 00:12:16,480
so how can we collectively make sure

00:12:13,760 --> 00:12:19,600
that your application data plane

00:12:16,480 --> 00:12:21,680
is uniformly accessible from whatever

00:12:19,600 --> 00:12:23,279
cloud that you choose to use

00:12:21,680 --> 00:12:24,720
the answer for sure is going to be open

00:12:23,279 --> 00:12:26,800
source it's going to be a range of open

00:12:24,720 --> 00:12:28,320
source technologies

00:12:26,800 --> 00:12:29,920
i care a lot about cassandra as a

00:12:28,320 --> 00:12:31,920
database but i'm also super interested

00:12:29,920 --> 00:12:34,959
in spark and flink

00:12:31,920 --> 00:12:36,639
in pulsar and kafka in rocksdb

00:12:34,959 --> 00:12:38,000
right there's a range of technologies

00:12:36,639 --> 00:12:41,600
that are all kind of being

00:12:38,000 --> 00:12:42,720
worked together into the realization of

00:12:41,600 --> 00:12:44,160
a mesh

00:12:42,720 --> 00:12:47,440
but it's this control layer and our

00:12:44,160 --> 00:12:49,200
ability to have a policy

00:12:47,440 --> 00:12:50,480
layer to talk about what's happening in

00:12:49,200 --> 00:12:52,320
data how do these

00:12:50,480 --> 00:12:54,320
bits actually get stored what class of

00:12:52,320 --> 00:12:55,120
security do you use what kinds of audit

00:12:54,320 --> 00:12:57,360
rights

00:12:55,120 --> 00:12:59,040
uh and post-hoc analysis do you need to

00:12:57,360 --> 00:13:00,480
understand who's used the data and is it

00:12:59,040 --> 00:13:01,680
all fine

00:13:00,480 --> 00:13:03,680
that's stuff that's going to take us

00:13:01,680 --> 00:13:04,800
probably a few years working together as

00:13:03,680 --> 00:13:06,240
an open community

00:13:04,800 --> 00:13:07,760
probably following on the heels of

00:13:06,240 --> 00:13:10,560
what's happened so effectively in

00:13:07,760 --> 00:13:10,560
service meshes

00:13:10,959 --> 00:13:14,560
and then i've got one final question

00:13:12,800 --> 00:13:16,639
here on some successes

00:13:14,560 --> 00:13:18,959
to share lessons learned that can be

00:13:16,639 --> 00:13:21,040
applied to someone's own project

00:13:18,959 --> 00:13:22,959
i had the privilege of being uh

00:13:21,040 --> 00:13:24,399
recruited to google in 2016 to run the

00:13:22,959 --> 00:13:27,360
kubernetes business

00:13:24,399 --> 00:13:28,240
um as vp of product management there and

00:13:27,360 --> 00:13:30,720
the

00:13:28,240 --> 00:13:32,560
rate of adoption of kubernetes has been

00:13:30,720 --> 00:13:34,240
absolutely spectacular

00:13:32,560 --> 00:13:35,760
i would i would think i would point out

00:13:34,240 --> 00:13:38,399
uh point out two successes

00:13:35,760 --> 00:13:39,440
uh uh in in kubernetes that are

00:13:38,399 --> 00:13:42,800
interesting to me

00:13:39,440 --> 00:13:45,360
first was um the courage

00:13:42,800 --> 00:13:46,639
of how the kubernetes organization was

00:13:45,360 --> 00:13:49,120
being led

00:13:46,639 --> 00:13:50,000
um i was the ceo of cloud foundry at the

00:13:49,120 --> 00:13:53,199
time and

00:13:50,000 --> 00:13:55,199
i met with craig mcluckie who was the

00:13:53,199 --> 00:13:58,639
leader for kubernetes

00:13:55,199 --> 00:13:59,440
and craig took the brave stance to say

00:13:58,639 --> 00:14:01,279
that he

00:13:59,440 --> 00:14:02,880
really liked some of the things that

00:14:01,279 --> 00:14:05,120
were happening in cloud foundry he liked

00:14:02,880 --> 00:14:08,240
how the technology worked

00:14:05,120 --> 00:14:09,120
and there were a lot of social pressures

00:14:08,240 --> 00:14:11,920
on him

00:14:09,120 --> 00:14:13,839
to create more of a hard wall and to

00:14:11,920 --> 00:14:15,760
create kind of a zero-sum game between

00:14:13,839 --> 00:14:17,120
kubernetes and cloud foundry at the time

00:14:15,760 --> 00:14:18,480
so he took that step and said hey

00:14:17,120 --> 00:14:19,519
there's some stuff about cloud foundry i

00:14:18,480 --> 00:14:21,600
really like

00:14:19,519 --> 00:14:23,519
that made it pretty clear for me that

00:14:21,600 --> 00:14:25,040
here's a really open

00:14:23,519 --> 00:14:26,800
thinker here's probably the beginning of

00:14:25,040 --> 00:14:28,480
an open community what can we give away

00:14:26,800 --> 00:14:32,160
from cloud foundry

00:14:28,480 --> 00:14:34,480
and so um i had abby kearns

00:14:32,160 --> 00:14:35,839
uh take over a project called the open

00:14:34,480 --> 00:14:38,079
service broker api

00:14:35,839 --> 00:14:39,040
to take cloud foundry's service broker

00:14:38,079 --> 00:14:41,760
capabilities

00:14:39,040 --> 00:14:43,839
and convey that to kubernetes so i think

00:14:41,760 --> 00:14:45,279
that was a that was a big success to be

00:14:43,839 --> 00:14:47,040
open-minded enough that we could create

00:14:45,279 --> 00:14:49,920
a positive sum game across

00:14:47,040 --> 00:14:52,639
these two very different projects later

00:14:49,920 --> 00:14:53,920
on once i was actually at google

00:14:52,639 --> 00:14:56,240
i had an opportunity to look at the

00:14:53,920 --> 00:14:58,160
leadership structure for open source

00:14:56,240 --> 00:15:00,800
projects over time and looking at the

00:14:58,160 --> 00:15:02,800
leadership structure inside google

00:15:00,800 --> 00:15:04,320
it was a bit confused who was in charge

00:15:02,800 --> 00:15:05,600
of kubernetes how was it getting done

00:15:04,320 --> 00:15:06,880
what was that what was the what was the

00:15:05,600 --> 00:15:08,160
peering in the teaming

00:15:06,880 --> 00:15:09,600
and it's important to look at open

00:15:08,160 --> 00:15:11,199
source not just in terms of it's a bunch

00:15:09,600 --> 00:15:13,519
of open source code

00:15:11,199 --> 00:15:14,720
but really look in a disciplined way at

00:15:13,519 --> 00:15:16,399
the organization

00:15:14,720 --> 00:15:18,320
that is going to structure that code

00:15:16,399 --> 00:15:19,839
it's conway's law right the

00:15:18,320 --> 00:15:21,920
communication patterns of the

00:15:19,839 --> 00:15:23,839
organization determine the architectural

00:15:21,920 --> 00:15:26,480
structure of what you get out of it

00:15:23,839 --> 00:15:28,320
so what i did as vp of pm at google was

00:15:26,480 --> 00:15:30,000
to make sure that we had a very clean

00:15:28,320 --> 00:15:32,320
consistent clear organizational

00:15:30,000 --> 00:15:34,399
structure i put aparna cena

00:15:32,320 --> 00:15:35,680
in charge of kubernetes so it was really

00:15:34,399 --> 00:15:36,639
clear there was one leader for product

00:15:35,680 --> 00:15:39,680
management

00:15:36,639 --> 00:15:41,440
she had an amazing partnership with

00:15:39,680 --> 00:15:43,040
hen goldberg who is the director of

00:15:41,440 --> 00:15:43,839
engineering for kubernetes and the two

00:15:43,040 --> 00:15:46,000
of them

00:15:43,839 --> 00:15:48,079
were able to have a high bandwidth

00:15:46,000 --> 00:15:50,399
relationship get along super well

00:15:48,079 --> 00:15:51,199
they're both excellent leaders and they

00:15:50,399 --> 00:15:53,279
brought

00:15:51,199 --> 00:15:54,639
a good organizational orientation and a

00:15:53,279 --> 00:15:57,600
high trust between them

00:15:54,639 --> 00:15:58,959
so i think that ended up creating

00:15:57,600 --> 00:16:01,279
ongoing

00:15:58,959 --> 00:16:02,639
velocity for that project i had less and

00:16:01,279 --> 00:16:04,240
less and less to do with it as it went

00:16:02,639 --> 00:16:06,000
faster and faster and faster

00:16:04,240 --> 00:16:07,279
so i think if you want to succeed in an

00:16:06,000 --> 00:16:10,320
open source project

00:16:07,279 --> 00:16:11,120
look very very hard at the the strength

00:16:10,320 --> 00:16:13,120
of the leaders

00:16:11,120 --> 00:16:15,279
the clarity of the communication they

00:16:13,120 --> 00:16:16,320
have with them and your courage in being

00:16:15,279 --> 00:16:18,399
able to

00:16:16,320 --> 00:16:20,880
extend out to other projects and have

00:16:18,399 --> 00:16:23,600
the have the have the trust

00:16:20,880 --> 00:16:24,079
available to create positive sum games

00:16:23,600 --> 00:16:26,000
across

00:16:24,079 --> 00:16:27,279
not just what little piece of the world

00:16:26,000 --> 00:16:29,680
you think you're working on

00:16:27,279 --> 00:16:31,440
but to see the connectedness with uh

00:16:29,680 --> 00:16:31,759
with related projects even ones that may

00:16:31,440 --> 00:16:34,560
look

00:16:31,759 --> 00:16:34,560
competitive to you

00:16:35,360 --> 00:16:39,600
so with that i believe i'm out of time i

00:16:37,279 --> 00:16:40,079
hope that uh i hope those comments have

00:16:39,600 --> 00:16:42,160
been

00:16:40,079 --> 00:16:43,759
useful to anybody who's trying to solve

00:16:42,160 --> 00:16:46,079
these classic problems

00:16:43,759 --> 00:16:46,800
and um look forward to chatting with

00:16:46,079 --> 00:16:49,120
folks

00:16:46,800 --> 00:16:51,040
in this community a lot about data

00:16:49,120 --> 00:16:53,920
meshes in the near future

00:16:51,040 --> 00:16:55,160
you can always find me at sam ramsay.org

00:16:53,920 --> 00:16:58,639
or sam.ramg

00:16:55,160 --> 00:17:05,839
datastax.com or sramg on twitter

00:16:58,639 --> 00:17:05,839
so thanks for your time

00:17:13,280 --> 00:17:15,360

YouTube URL: https://www.youtube.com/watch?v=ttIQ1Gq4h-c


