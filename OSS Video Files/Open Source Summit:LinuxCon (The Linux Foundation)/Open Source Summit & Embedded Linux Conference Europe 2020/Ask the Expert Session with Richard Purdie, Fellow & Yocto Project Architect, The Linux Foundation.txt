Title: Ask the Expert Session with Richard Purdie, Fellow & Yocto Project Architect, The Linux Foundation
Publication date: 2020-11-17
Playlist: Open Source Summit & Embedded Linux Conference Europe 2020
Description: 
	Ask the Expert Session with Richard Purdie, Fellow & Yocto Project Architect, The Linux Foundation
Captions: 
	00:00:14,080 --> 00:00:17,359
okay hi everyone

00:00:15,200 --> 00:00:20,000
uh hopefully this is working i'm richard

00:00:17,359 --> 00:00:22,160
purdy um i'm the octoproject architect

00:00:20,000 --> 00:00:25,600
and the fellow at the legs foundation

00:00:22,160 --> 00:00:25,600
and i'm here to answer some questions

00:00:26,960 --> 00:00:31,840
i don't quite see any yet

00:00:39,920 --> 00:00:42,559
okay well i've got a message at least at

00:00:41,200 --> 00:00:43,440
least things seem to be live and seem to

00:00:42,559 --> 00:00:46,320
be working so that's

00:00:43,440 --> 00:00:48,399
so far so good so yeah if anybody has

00:00:46,320 --> 00:00:59,840
any questions please

00:00:48,399 --> 00:00:59,840
please ask away

00:01:09,680 --> 00:01:14,240
so i'm being asked how did i first get

00:01:11,280 --> 00:01:17,920
involved in open source um

00:01:14,240 --> 00:01:22,240
my history was uh i actually bought a

00:01:17,920 --> 00:01:22,240
small device at sharps iris and um

00:01:22,640 --> 00:01:25,920
it came with linux on it but it was a

00:01:24,320 --> 00:01:27,280
2.4 kernel and it had certain

00:01:25,920 --> 00:01:29,520
limitations

00:01:27,280 --> 00:01:31,040
so i started messing around with that

00:01:29,520 --> 00:01:33,840
that led me to build systems

00:01:31,040 --> 00:01:35,119
um to what was build route at the time

00:01:33,840 --> 00:01:35,920
and then this project called open

00:01:35,119 --> 00:01:38,720
embedded

00:01:35,920 --> 00:01:39,200
and uh everything grew from there so

00:01:38,720 --> 00:01:42,159
that's

00:01:39,200 --> 00:01:42,159
that's how i got started

00:01:45,040 --> 00:01:48,320
so i'm being asked what the plan is for

00:01:46,720 --> 00:01:52,320
for the yucca project

00:01:48,320 --> 00:01:53,759
lts releases um

00:01:52,320 --> 00:01:55,280
it's being asked how long the release is

00:01:53,759 --> 00:01:56,399
gonna how often are the releases gonna

00:01:55,280 --> 00:01:58,159
be marked as an lts

00:01:56,399 --> 00:02:00,799
our current plan is probably every two

00:01:58,159 --> 00:02:03,520
years so 3.1 was released uh

00:02:00,799 --> 00:02:04,320
six months ago so that will be our lts

00:02:03,520 --> 00:02:06,560
uh release

00:02:04,320 --> 00:02:08,239
uh for the next couple of years that's

00:02:06,560 --> 00:02:10,720
the plan right now

00:02:08,239 --> 00:02:12,080
um and it's great to see some of the

00:02:10,720 --> 00:02:14,080
traction that we're getting around

00:02:12,080 --> 00:02:23,840
the the ultimate release it seems very

00:02:14,080 --> 00:02:23,840
popular with people so that's good

00:02:27,599 --> 00:02:31,360
so a question there about reproducible

00:02:29,520 --> 00:02:32,720
builds

00:02:31,360 --> 00:02:34,720
what's the current status of those in

00:02:32,720 --> 00:02:37,200
the octa project

00:02:34,720 --> 00:02:39,200
um we've made a lot of good progress so

00:02:37,200 --> 00:02:41,040
we now have automated reproducible

00:02:39,200 --> 00:02:42,480
uh reproducibility testing on the auto

00:02:41,040 --> 00:02:44,400
builder

00:02:42,480 --> 00:02:45,920
um i think that's currently working

00:02:44,400 --> 00:02:49,120
around core image sato

00:02:45,920 --> 00:02:49,760
so everything up to core image sato is

00:02:49,120 --> 00:02:53,120
now

00:02:49,760 --> 00:02:54,480
basically 100 reproducible uh

00:02:53,120 --> 00:02:56,319
there's a lot of different definitions

00:02:54,480 --> 00:02:58,000
about what reproducible means for us

00:02:56,319 --> 00:02:59,760
that means that it doesn't matter which

00:02:58,000 --> 00:03:03,599
distro you build it on

00:02:59,760 --> 00:03:06,080
or the path that you build it in

00:03:03,599 --> 00:03:07,200
it will always give exactly the same um

00:03:06,080 --> 00:03:09,200
the same

00:03:07,200 --> 00:03:10,959
end result and we're testing that across

00:03:09,200 --> 00:03:11,680
multiple different distros at this point

00:03:10,959 --> 00:03:14,080
so

00:03:11,680 --> 00:03:15,120
it's quite a sort of an extensive test

00:03:14,080 --> 00:03:17,440
and

00:03:15,120 --> 00:03:19,760
so everything up to core image sato is

00:03:17,440 --> 00:03:19,760
the answer

00:03:25,519 --> 00:03:30,239
so being asked about the the 10th

00:03:27,200 --> 00:03:31,440
anniversary of yokta project

00:03:30,239 --> 00:03:33,680
there's actually a presentation about

00:03:31,440 --> 00:03:35,120
that uh jeff rowe and uh and nico

00:03:33,680 --> 00:03:37,599
of uh past and present community

00:03:35,120 --> 00:03:38,080
managers are giving a presentation and i

00:03:37,599 --> 00:03:41,200
think i

00:03:38,080 --> 00:03:44,480
even feature in the uh

00:03:41,200 --> 00:03:44,959
in that video um so i'd say go and watch

00:03:44,480 --> 00:03:46,640
the vid

00:03:44,959 --> 00:03:48,799
go and watch that presentation i think

00:03:46,640 --> 00:03:50,239
um i mean for me it's amazing that the

00:03:48,799 --> 00:03:52,239
project's been going 10 years

00:03:50,239 --> 00:03:53,599
it's great to see some of the the places

00:03:52,239 --> 00:03:57,519
that it's gone and so on but

00:03:53,599 --> 00:03:58,879
uh i'm yeah i i didn't think 10 years

00:03:57,519 --> 00:04:00,640
ago we'd you know be sitting here

00:03:58,879 --> 00:04:01,360
talking about the 10th year anniversary

00:04:00,640 --> 00:04:04,159
so that's

00:04:01,360 --> 00:04:04,159
it's cool

00:04:08,799 --> 00:04:12,159
uh biggest features coming to the octo

00:04:10,560 --> 00:04:13,280
soon i don't know

00:04:12,159 --> 00:04:15,120
why don't why don't you tell us what

00:04:13,280 --> 00:04:15,680
what feat what features do people want

00:04:15,120 --> 00:04:19,040
to see

00:04:15,680 --> 00:04:21,040
um i mean we've seen some sort of some

00:04:19,040 --> 00:04:22,479
really significant changes more recently

00:04:21,040 --> 00:04:24,639
the latest ones with the hash

00:04:22,479 --> 00:04:26,880
equivalents and the reproducibility

00:04:24,639 --> 00:04:28,320
um you know in the past we've had the

00:04:26,880 --> 00:04:31,199
recipes with excess roots

00:04:28,320 --> 00:04:31,680
and even the layer model was a was a new

00:04:31,199 --> 00:04:34,880
and big

00:04:31,680 --> 00:04:35,840
sort of divisive change at one point so

00:04:34,880 --> 00:04:37,199
there's been a lot of those over the

00:04:35,840 --> 00:04:38,880
last 10 years it's hard to predict the

00:04:37,199 --> 00:04:42,320
future it depends what people work on

00:04:38,880 --> 00:04:43,440
but i i don't think we're done yet i

00:04:42,320 --> 00:04:45,680
think there's a lot of good ideas out

00:04:43,440 --> 00:04:45,680
there

00:04:54,320 --> 00:04:57,840
i'm just reading the question

00:04:59,280 --> 00:05:02,400
um so it's a question about whether

00:05:00,960 --> 00:05:04,800
there's any plans to

00:05:02,400 --> 00:05:06,000
uh to work out the application order of

00:05:04,800 --> 00:05:09,520
variables

00:05:06,000 --> 00:05:11,680
um there's lots of ideas to do

00:05:09,520 --> 00:05:13,120
with that um i know that i did put a

00:05:11,680 --> 00:05:14,400
proposal out recently about default

00:05:13,120 --> 00:05:18,479
values

00:05:14,400 --> 00:05:20,240
um those number of flaws pointed out in

00:05:18,479 --> 00:05:21,600
that proposal link

00:05:20,240 --> 00:05:22,479
the trouble is as soon as we start

00:05:21,600 --> 00:05:23,440
changing anything it breaks

00:05:22,479 --> 00:05:25,280
compatibility

00:05:23,440 --> 00:05:27,440
and that does that does cause a lot of

00:05:25,280 --> 00:05:28,080
problems and one of the big advantages

00:05:27,440 --> 00:05:29,840
of

00:05:28,080 --> 00:05:31,120
what we have today is the flexibility

00:05:29,840 --> 00:05:34,400
and the power that it

00:05:31,120 --> 00:05:35,680
that those variables give you so

00:05:34,400 --> 00:05:38,000
it's a really good question i'm

00:05:35,680 --> 00:05:40,720
certainly open to creative ideas on

00:05:38,000 --> 00:05:42,320
how we could improve things uh but there

00:05:40,720 --> 00:05:43,680
is now quite a bit of legacy there's ten

00:05:42,320 --> 00:05:47,120
to ten years of legacy

00:05:43,680 --> 00:05:50,320
for just the october project alone um

00:05:47,120 --> 00:05:51,919
so i've got mixed feelings on that

00:05:50,320 --> 00:05:53,280
even yesterday i was just messing around

00:05:51,919 --> 00:05:55,120
seeing if i could actually try and make

00:05:53,280 --> 00:05:57,280
the passing a little bit faster

00:05:55,120 --> 00:05:58,880
um because i had some ideas about where

00:05:57,280 --> 00:05:59,680
we might be losing some speed with that

00:05:58,880 --> 00:06:02,000
but

00:05:59,680 --> 00:06:02,880
it turns out it's only worth about 10 to

00:06:02,000 --> 00:06:06,080
15 percent

00:06:02,880 --> 00:06:07,600
not not the huge gains i was hoping for

00:06:06,080 --> 00:06:09,680
so it's certainly something we've got an

00:06:07,600 --> 00:06:11,919
open mind to but it's also very hard to

00:06:09,680 --> 00:06:15,280
do given the legacy situation

00:06:11,919 --> 00:06:18,840
so um

00:06:15,280 --> 00:06:20,880
yeah if you've got ideas please talk to

00:06:18,840 --> 00:06:23,600
us

00:06:20,880 --> 00:06:24,240
um my opinions about gooeys such as

00:06:23,600 --> 00:06:27,280
toaster

00:06:24,240 --> 00:06:28,800
is it really useful i'm actually a

00:06:27,280 --> 00:06:30,720
little disappointed that we haven't had

00:06:28,800 --> 00:06:32,000
more gooeys over over the last 10 years

00:06:30,720 --> 00:06:34,400
that's something that i would like to

00:06:32,000 --> 00:06:36,639
see i mean toaster um

00:06:34,400 --> 00:06:37,759
as a you know from a development

00:06:36,639 --> 00:06:40,000
standpoint has stalled

00:06:37,759 --> 00:06:40,960
a bit more recently and it doesn't have

00:06:40,000 --> 00:06:42,639
the sort of the

00:06:40,960 --> 00:06:44,560
the critical mass of developers behind

00:06:42,639 --> 00:06:44,960
it i think it needs to move forward and

00:06:44,560 --> 00:06:46,960
to

00:06:44,960 --> 00:06:48,560
to gain new features it's still working

00:06:46,960 --> 00:06:49,520
it's still there it's still being looked

00:06:48,560 --> 00:06:52,560
after but it's not

00:06:49,520 --> 00:06:54,960
really developing um

00:06:52,560 --> 00:06:55,759
so i i would love to see uh more sort of

00:06:54,960 --> 00:06:58,319
gui's

00:06:55,759 --> 00:07:00,160
built around um but built around the

00:06:58,319 --> 00:07:04,000
interfaces the bitbake provides

00:07:00,160 --> 00:07:04,000
or even on new interfaces um

00:07:04,080 --> 00:07:07,599
so yeah it's one of the things i i think

00:07:05,919 --> 00:07:08,960
there's a lot of potential there for

00:07:07,599 --> 00:07:11,360
development it's very difficult because

00:07:08,960 --> 00:07:13,440
the project is so

00:07:11,360 --> 00:07:14,560
so wide encompassing to build a user

00:07:13,440 --> 00:07:16,000
interface around some of that

00:07:14,560 --> 00:07:19,599
functionality but when you get it right

00:07:16,000 --> 00:07:22,000
i think it's very rewarding so yeah if

00:07:19,599 --> 00:07:22,880
i like toaster i'd like to see it grow

00:07:22,000 --> 00:07:24,479
more um

00:07:22,880 --> 00:07:26,160
i think we do need to improve some of

00:07:24,479 --> 00:07:28,240
the apis we've got to bit bake itself

00:07:26,160 --> 00:07:29,680
but we have tried to create those

00:07:28,240 --> 00:07:31,919
we've tried to create things like the

00:07:29,680 --> 00:07:32,800
the tin foil apis so you can access

00:07:31,919 --> 00:07:35,280
these things

00:07:32,800 --> 00:07:37,039
so i'd like to see more guise such as

00:07:35,280 --> 00:07:38,960
toaster but i also like to see more

00:07:37,039 --> 00:07:41,039
um even command line interact type

00:07:38,960 --> 00:07:43,680
utilities directly integrate

00:07:41,039 --> 00:07:44,400
integrate directly um communicating with

00:07:43,680 --> 00:07:47,280
bitbake over

00:07:44,400 --> 00:07:47,280
like the tin file

00:07:52,319 --> 00:07:56,840
just trying to it's difficult to keep up

00:07:54,879 --> 00:07:59,840
with the questions as they come in

00:07:56,840 --> 00:07:59,840
um

00:08:05,199 --> 00:08:08,960
so about arguments to convince

00:08:07,360 --> 00:08:10,800
colleagues to migrate from

00:08:08,960 --> 00:08:12,400
uh my great teacher project away from a

00:08:10,800 --> 00:08:14,240
debian based os

00:08:12,400 --> 00:08:15,440
concerns about reliability and test

00:08:14,240 --> 00:08:18,240
overhead um

00:08:15,440 --> 00:08:20,160
[Music]

00:08:18,240 --> 00:08:22,000
it's a good question i mean debian is

00:08:20,160 --> 00:08:22,319
good for some things the octa project is

00:08:22,000 --> 00:08:24,400
also

00:08:22,319 --> 00:08:26,000
is good for other things it depends

00:08:24,400 --> 00:08:29,120
often what it is you're trying to do

00:08:26,000 --> 00:08:30,800
um if you've got sort of to do

00:08:29,120 --> 00:08:32,959
if you need to do any kind of license

00:08:30,800 --> 00:08:34,719
sort of auditing or disclosure then your

00:08:32,959 --> 00:08:36,640
project is one of the best systems out

00:08:34,719 --> 00:08:39,839
there for that you can't really do that

00:08:36,640 --> 00:08:42,000
from a debian standpoint

00:08:39,839 --> 00:08:43,440
i think our lts story is a lot it's a

00:08:42,000 --> 00:08:45,519
lot stronger now with some of the

00:08:43,440 --> 00:08:49,040
developments we had with the project

00:08:45,519 --> 00:08:50,640
um from a reliability standpoint

00:08:49,040 --> 00:08:52,480
i think once you have your project

00:08:50,640 --> 00:08:53,920
working the way with the system

00:08:52,480 --> 00:08:55,600
the technology we've built into the

00:08:53,920 --> 00:08:57,440
system means once it's working

00:08:55,600 --> 00:09:00,000
it should stay working it's designed to

00:08:57,440 --> 00:09:02,160
be reproducible it's designed to sort of

00:09:00,000 --> 00:09:03,760
um you know give you exactly the same

00:09:02,160 --> 00:09:05,440
build result if you try and rebuild

00:09:03,760 --> 00:09:06,800
something in five years ten years time

00:09:05,440 --> 00:09:09,760
or something like that

00:09:06,800 --> 00:09:11,440
so i think from a reliability standpoint

00:09:09,760 --> 00:09:13,360
it's it's robust it does need a little

00:09:11,440 --> 00:09:17,040
bit of upfront overhead for setup

00:09:13,360 --> 00:09:19,519
but um once you've got there then

00:09:17,040 --> 00:09:20,880
it's uh it's phenomenal for being able

00:09:19,519 --> 00:09:22,800
to

00:09:20,880 --> 00:09:24,720
handle things like security fixes if a

00:09:22,800 --> 00:09:26,240
security problem emerges and you need to

00:09:24,720 --> 00:09:27,600
patch the source code

00:09:26,240 --> 00:09:29,360
and then we release it for some old

00:09:27,600 --> 00:09:31,680
binaries or whatever that your

00:09:29,360 --> 00:09:33,279
company's shipped in the product um i

00:09:31,680 --> 00:09:34,640
think it's

00:09:33,279 --> 00:09:36,080
you're kind of taking control of your

00:09:34,640 --> 00:09:37,839
own destiny with something like your

00:09:36,080 --> 00:09:41,040
project whereas with debian

00:09:37,839 --> 00:09:41,040
you're reliant on other people

00:09:46,800 --> 00:09:50,240
how small can a root of us can pocky

00:09:48,880 --> 00:09:52,560
tiny make

00:09:50,240 --> 00:09:53,360
um that's a good question there was a

00:09:52,560 --> 00:09:55,120
patch on the

00:09:53,360 --> 00:09:57,519
uh mailing list i know just came in over

00:09:55,120 --> 00:10:00,720
the weekend that

00:09:57,519 --> 00:10:01,760
improves the uh the size of tiny but i

00:10:00,720 --> 00:10:04,560
think it was saying 13

00:10:01,760 --> 00:10:05,839
you know 13 reduction um it's it's

00:10:04,560 --> 00:10:07,519
always a feature trade-off if you want

00:10:05,839 --> 00:10:07,920
to get rid of everything from your root

00:10:07,519 --> 00:10:09,519
fs

00:10:07,920 --> 00:10:11,519
you can have a really really small root

00:10:09,519 --> 00:10:12,079
of us so you really got to define what

00:10:11,519 --> 00:10:14,079
feature

00:10:12,079 --> 00:10:16,000
set of functionality that you want but

00:10:14,079 --> 00:10:17,839
if you can configure it

00:10:16,000 --> 00:10:19,760
if you can configure linux down to that

00:10:17,839 --> 00:10:21,839
size the octa project can build it

00:10:19,760 --> 00:10:23,279
because we're a build tool so it really

00:10:21,839 --> 00:10:24,240
comes down to which components you're

00:10:23,279 --> 00:10:26,640
using and

00:10:24,240 --> 00:10:33,040
the you know what functionality you want

00:10:26,640 --> 00:10:36,320
within that

00:10:33,040 --> 00:10:37,600
um so i mean if if you can you can

00:10:36,320 --> 00:10:39,120
configure it down to something that's

00:10:37,600 --> 00:10:47,839
nor flash size or or

00:10:39,120 --> 00:10:47,839
b e n and c

00:10:54,880 --> 00:10:58,240
so there's a question about the lts

00:10:56,480 --> 00:10:59,839
release model is that focusing on

00:10:58,240 --> 00:11:00,800
securing pocket or does it focus on the

00:10:59,839 --> 00:11:03,760
build system

00:11:00,800 --> 00:11:04,320
it's very much about making sure that um

00:11:03,760 --> 00:11:07,120
the os

00:11:04,320 --> 00:11:08,720
itself is is secure as well so base at

00:11:07,120 --> 00:11:10,800
the moment lts is focusing on the

00:11:08,720 --> 00:11:11,360
components in open embedded core but if

00:11:10,800 --> 00:11:14,560
there was a

00:11:11,360 --> 00:11:16,000
significant security issue in other

00:11:14,560 --> 00:11:16,959
layers that would be something that we'd

00:11:16,000 --> 00:11:19,040
probably

00:11:16,959 --> 00:11:20,720
look at as well and it's not just about

00:11:19,040 --> 00:11:22,240
the build system it's about making sure

00:11:20,720 --> 00:11:22,959
that the components that we're building

00:11:22,240 --> 00:11:26,079
in the core

00:11:22,959 --> 00:11:27,200
are staying you know staying secure

00:11:26,079 --> 00:11:28,800
we're staying up to date we're so

00:11:27,200 --> 00:11:30,000
monitoring cves

00:11:28,800 --> 00:11:32,560
where monitoring issues that get

00:11:30,000 --> 00:11:34,240
reported to us but the lts is

00:11:32,560 --> 00:11:35,600
once we've got a maintainer there who's

00:11:34,240 --> 00:11:37,760
putting to test cycles making the

00:11:35,600 --> 00:11:39,360
releases and pulling everything together

00:11:37,760 --> 00:11:42,000
we do require some you know help from

00:11:39,360 --> 00:11:43,440
the community in in submissions to that

00:11:42,000 --> 00:11:45,279
and i think going forward we're going to

00:11:43,440 --> 00:11:46,640
be um

00:11:45,279 --> 00:11:48,880
i think we're in a good position for

00:11:46,640 --> 00:11:50,800
open embedded core beyond that

00:11:48,880 --> 00:11:51,920
um i think there are things we can do

00:11:50,800 --> 00:11:53,920
there and i

00:11:51,920 --> 00:11:55,600
yeah but it will need you know community

00:11:53,920 --> 00:11:57,200
help in making sure we get the patches

00:11:55,600 --> 00:11:57,839
we get the issues reported to us and so

00:11:57,200 --> 00:11:59,760
on

00:11:57,839 --> 00:12:01,600
so it really is going to be partly about

00:11:59,760 --> 00:12:03,279
the community collaborating together

00:12:01,600 --> 00:12:04,639
but we put all of the pieces in place to

00:12:03,279 --> 00:12:06,480
allow us to do that it's

00:12:04,639 --> 00:12:08,079
it's much like linux kernel you know the

00:12:06,480 --> 00:12:10,800
stable releases are going to be what

00:12:08,079 --> 00:12:13,440
people make of them

00:12:10,800 --> 00:12:14,720
so help us with that but it is

00:12:13,440 --> 00:12:16,399
definitely not just focused on the build

00:12:14,720 --> 00:12:24,160
system it's focused beyond that

00:12:16,399 --> 00:12:26,480
in the components as well

00:12:24,160 --> 00:12:28,000
um so when we added recipes for the

00:12:26,480 --> 00:12:30,320
excess roots there was talk about task

00:12:28,000 --> 00:12:34,399
specific cis roots

00:12:30,320 --> 00:12:36,959
um task specific cis roots

00:12:34,399 --> 00:12:38,480
was a realization when we added recipes

00:12:36,959 --> 00:12:41,839
of the excess roots that

00:12:38,480 --> 00:12:45,040
um things do change based on the tasks

00:12:41,839 --> 00:12:46,959
the trouble is that some cis roots can't

00:12:45,040 --> 00:12:48,880
need to be they need to be preserved

00:12:46,959 --> 00:12:50,399
between tasks so you can't change the

00:12:48,880 --> 00:12:52,000
cis roots from under the system between

00:12:50,399 --> 00:12:54,079
configure and compile for example that

00:12:52,000 --> 00:12:56,079
just will not work

00:12:54,079 --> 00:12:57,920
um whether you whether there's a

00:12:56,079 --> 00:12:59,360
packaging cis route and a sort of a

00:12:57,920 --> 00:13:00,720
compilation service route

00:12:59,360 --> 00:13:02,399
that might be something we could look at

00:13:00,720 --> 00:13:03,920
in the future there's there's nothing

00:13:02,399 --> 00:13:05,120
particularly hard coded in the system

00:13:03,920 --> 00:13:06,000
that says they have to be recipe

00:13:05,120 --> 00:13:08,560
specific

00:13:06,000 --> 00:13:11,040
but that's certainly what uh what made

00:13:08,560 --> 00:13:12,880
most sense at that time to implement

00:13:11,040 --> 00:13:14,639
in the future we might do something like

00:13:12,880 --> 00:13:16,800
making um host tools be

00:13:14,639 --> 00:13:17,760
recipe specific so currently the toast

00:13:16,800 --> 00:13:20,959
tools

00:13:17,760 --> 00:13:23,200
are assist our build-wide

00:13:20,959 --> 00:13:25,440
and we might make those potentially

00:13:23,200 --> 00:13:28,079
recipe-specific or something like that

00:13:25,440 --> 00:13:29,920
um we haven't found too many problems

00:13:28,079 --> 00:13:30,240
with task-specific problems right now

00:13:29,920 --> 00:13:32,480
but

00:13:30,240 --> 00:13:34,720
it's something we certainly could think

00:13:32,480 --> 00:13:48,399
about in future there's nothing

00:13:34,720 --> 00:13:50,880
hard coded in there related to that

00:13:48,399 --> 00:13:51,839
uh so external tool chains good or bad

00:13:50,880 --> 00:13:54,320
practice

00:13:51,839 --> 00:13:55,680
um they probably have their uses in

00:13:54,320 --> 00:13:57,760
their places

00:13:55,680 --> 00:13:59,760
um i don't particularly like them i

00:13:57,760 --> 00:14:00,880
don't see that we really need them in

00:13:59,760 --> 00:14:03,279
most cases

00:14:00,880 --> 00:14:04,639
i do understand why they exist so i tend

00:14:03,279 --> 00:14:06,240
to ignore them but

00:14:04,639 --> 00:14:07,920
some people have done good job of

00:14:06,240 --> 00:14:12,079
integrating them

00:14:07,920 --> 00:14:14,399
um a bit of marmite issue i think

00:14:12,079 --> 00:14:15,279
some people like them some people don't

00:14:14,399 --> 00:14:16,800
but we and

00:14:15,279 --> 00:14:18,800
in general we've found people tend to

00:14:16,800 --> 00:14:22,240
move away from them um

00:14:18,800 --> 00:14:23,839
because you can in some ways i'd like to

00:14:22,240 --> 00:14:24,639
see the external tool chains built as

00:14:23,839 --> 00:14:26,720
sort of locked

00:14:24,639 --> 00:14:28,399
as a set of locked estate for example

00:14:26,720 --> 00:14:30,480
rather than some of the current x tool

00:14:28,399 --> 00:14:33,279
external tool chain models but nobody's

00:14:30,480 --> 00:14:36,079
actually tried that yet

00:14:33,279 --> 00:14:36,399
but yeah that they're kind of a fact of

00:14:36,079 --> 00:14:45,839
life

00:14:36,399 --> 00:14:45,839
same as binaries on systems really

00:14:48,800 --> 00:14:52,399
uh can i explain the recent improvements

00:14:51,040 --> 00:14:56,320
made to sudo

00:14:52,399 --> 00:14:59,839
um i can't i'm just trying to think

00:14:56,320 --> 00:14:59,839
how quickly i can do it

00:15:10,000 --> 00:15:12,959
yeah i think that was probably we'll

00:15:11,440 --> 00:15:13,600
come back to the whole process if we've

00:15:12,959 --> 00:15:15,839
got time

00:15:13,600 --> 00:15:15,839
um

00:15:22,880 --> 00:15:27,680
so there's a question about why there's

00:15:23,920 --> 00:15:29,680
no way to strap up bsbsp in layers using

00:15:27,680 --> 00:15:32,079
for example recall submodules

00:15:29,680 --> 00:15:33,920
i think that was a contentious and

00:15:32,079 --> 00:15:35,600
slightly

00:15:33,920 --> 00:15:36,800
difficult decision we made early on in

00:15:35,600 --> 00:15:38,800
the project that we weren't going to

00:15:36,800 --> 00:15:40,079
mandate a way of doing that

00:15:38,800 --> 00:15:42,000
and it has turned into a little bit of

00:15:40,079 --> 00:15:43,680
the wild west with so many different

00:15:42,000 --> 00:15:45,199
ways of doing things

00:15:43,680 --> 00:15:46,639
in some ways that's the strength of the

00:15:45,199 --> 00:15:47,839
project it means that people aren't

00:15:46,639 --> 00:15:49,440
locked into a particular way of doing

00:15:47,839 --> 00:15:51,040
things but i think we've always

00:15:49,440 --> 00:15:52,720
wondered about creating some sort of

00:15:51,040 --> 00:15:55,839
setup tool that

00:15:52,720 --> 00:15:57,759
would help with that in some way um

00:15:55,839 --> 00:15:59,680
it's there's a list of future directions

00:15:57,759 --> 00:16:01,040
that was published uh recently that the

00:15:59,680 --> 00:16:02,320
tsc had worked on

00:16:01,040 --> 00:16:04,560
the technical steering committee for the

00:16:02,320 --> 00:16:09,519
project and that is one of

00:16:04,560 --> 00:16:11,199
the services of one of those um

00:16:09,519 --> 00:16:12,399
uh one of those topics in there so if

00:16:11,199 --> 00:16:13,839
you want to find out more information

00:16:12,399 --> 00:16:15,920
about that go and go and have a look at

00:16:13,839 --> 00:16:16,880
that document and ask us on the mailing

00:16:15,920 --> 00:16:19,120
list

00:16:16,880 --> 00:16:20,399
but it's it's something i think we

00:16:19,120 --> 00:16:21,199
probably do need to address at some

00:16:20,399 --> 00:16:22,480
point

00:16:21,199 --> 00:16:24,560
that's probably one of those things in

00:16:22,480 --> 00:16:27,360
this next ten year cycle but

00:16:24,560 --> 00:16:29,199
um it's it's difficult because everybody

00:16:27,360 --> 00:16:30,880
has a very specific idea about what they

00:16:29,199 --> 00:16:34,079
want to do and how they want to do it

00:16:30,880 --> 00:16:37,839
so it's by no means a simple

00:16:34,079 --> 00:16:37,839
uh a simple problem to address

00:16:43,600 --> 00:16:47,920
so we're left with the with the pseudo

00:16:46,079 --> 00:16:51,199
question so i'll try and quickly

00:16:47,920 --> 00:16:52,560
um i'll try and give a quick overview of

00:16:51,199 --> 00:16:56,079
that

00:16:52,560 --> 00:16:57,920
um the problem was that sudo

00:16:56,079 --> 00:16:59,680
assumes one of the design assumptions in

00:16:57,920 --> 00:17:00,720
sudo is that it assumes all the recipes

00:16:59,680 --> 00:17:02,880
can see

00:17:00,720 --> 00:17:04,079
but that particular that sudo is

00:17:02,880 --> 00:17:05,520
responsible for the permissions of

00:17:04,079 --> 00:17:07,600
everything in the system

00:17:05,520 --> 00:17:09,600
so if you go and modify some files

00:17:07,600 --> 00:17:11,760
behind the scenes

00:17:09,600 --> 00:17:13,280
um sudo can lose track of things and get

00:17:11,760 --> 00:17:15,199
quite upset that those files have

00:17:13,280 --> 00:17:17,039
changed without its knowledge

00:17:15,199 --> 00:17:19,839
you can't really tell or couldn't really

00:17:17,039 --> 00:17:22,720
tell sudo just to focus on a specific

00:17:19,839 --> 00:17:23,360
directory so the the changes that we we

00:17:22,720 --> 00:17:25,919
added were

00:17:23,360 --> 00:17:27,199
to allow sudo to focus on one specific

00:17:25,919 --> 00:17:30,160
location

00:17:27,199 --> 00:17:30,799
uh and and to ignore certain other paths

00:17:30,160 --> 00:17:34,000
and

00:17:30,799 --> 00:17:35,760
that leads to the database being um

00:17:34,000 --> 00:17:37,440
a lot cleaner because it's not trying to

00:17:35,760 --> 00:17:39,200
track files that we don't actually care

00:17:37,440 --> 00:17:41,600
about

00:17:39,200 --> 00:17:43,520
um but that means that certain recipes

00:17:41,600 --> 00:17:45,120
needed to be changed and so on so it was

00:17:43,520 --> 00:17:47,200
a fairly late breaking problem

00:17:45,120 --> 00:17:48,640
that the issue that we had was that sudo

00:17:47,200 --> 00:17:49,600
was tracking files which were then

00:17:48,640 --> 00:17:52,160
changing

00:17:49,600 --> 00:17:52,720
and so inode numbers for example could

00:17:52,160 --> 00:17:54,000
be

00:17:52,720 --> 00:17:55,919
a file could be created with a given

00:17:54,000 --> 00:17:57,600
inode it could be deleted behind the

00:17:55,919 --> 00:17:58,880
scenes then a new file created that

00:17:57,600 --> 00:18:00,480
reused that inode

00:17:58,880 --> 00:18:02,400
and then soon i was confusing

00:18:00,480 --> 00:18:05,600
permissions across those files

00:18:02,400 --> 00:18:15,840
so the changes we've made to try and

00:18:05,600 --> 00:18:15,840
address that

00:18:19,679 --> 00:18:23,840
okay so uh i think i've only got a few

00:18:22,320 --> 00:18:24,400
minutes left but i'll try my best to get

00:18:23,840 --> 00:18:26,720
through the

00:18:24,400 --> 00:18:28,000
the rest of the questions that are here

00:18:26,720 --> 00:18:31,039
um can i explain what i meant

00:18:28,000 --> 00:18:33,200
by locked state um

00:18:31,039 --> 00:18:35,360
this is where uh instead of bitbay

00:18:33,200 --> 00:18:36,880
calculating a particular hash for estate

00:18:35,360 --> 00:18:38,720
and then checking whether that hash

00:18:36,880 --> 00:18:39,760
exists in the estate instead you just

00:18:38,720 --> 00:18:42,000
tell bitbake

00:18:39,760 --> 00:18:43,840
that this particular task has this s

00:18:42,000 --> 00:18:45,679
state a hash value

00:18:43,840 --> 00:18:46,880
and that's one of the ways in which the

00:18:45,679 --> 00:18:50,080
esdk can work

00:18:46,880 --> 00:18:51,760
and so there's a locked signatures file

00:18:50,080 --> 00:18:53,200
it's a standard bit bitcom file you just

00:18:51,760 --> 00:18:54,960
write some entries in there

00:18:53,200 --> 00:18:56,400
and then it locks down the estate to

00:18:54,960 --> 00:18:58,320
that particular thing so even if the

00:18:56,400 --> 00:19:00,160
underlying system changes from under it

00:18:58,320 --> 00:19:02,559
it will use that particular artifact

00:19:00,160 --> 00:19:05,679
with that particular hash from the cache

00:19:02,559 --> 00:19:07,440
um so it's used extends

00:19:05,679 --> 00:19:10,480
no pun intended it's used extensively in

00:19:07,440 --> 00:19:13,120
the extensible sdk

00:19:10,480 --> 00:19:14,480
but it has it has uses outside of that

00:19:13,120 --> 00:19:24,320
as well that we haven't really

00:19:14,480 --> 00:19:26,720
capitalized on yet

00:19:24,320 --> 00:19:28,320
okay is there a way to overlay a

00:19:26,720 --> 00:19:31,840
layer.com file with a bb

00:19:28,320 --> 00:19:35,440
pen like a recipe not really no

00:19:31,840 --> 00:19:36,000
um we tried not to complicate things by

00:19:35,440 --> 00:19:38,160
adding

00:19:36,000 --> 00:19:40,400
uh comfort pen files or something crazy

00:19:38,160 --> 00:19:42,720
like that so i'm afraid not that's

00:19:40,400 --> 00:19:43,440
no real easy way of doing that you can

00:19:42,720 --> 00:19:45,200
pretty much do

00:19:43,440 --> 00:19:46,480
anything in anonymous python for example

00:19:45,200 --> 00:19:52,000
but there's no

00:19:46,480 --> 00:19:53,600
mechanism like a bp append

00:19:52,000 --> 00:19:55,520
and can i give some pros and cons of

00:19:53,600 --> 00:19:57,440
create using pocky directly versus

00:19:55,520 --> 00:20:00,000
creating a custom distro

00:19:57,440 --> 00:20:01,840
um to be honest most people want to

00:20:00,000 --> 00:20:03,679
create their own distro uh it sounds a

00:20:01,840 --> 00:20:05,919
little bit crazy but in our in

00:20:03,679 --> 00:20:08,000
the context of the octo project creating

00:20:05,919 --> 00:20:09,520
your own distro comp file is fine

00:20:08,000 --> 00:20:11,200
pocky is a good default you could

00:20:09,520 --> 00:20:12,960
inherit from it and then just

00:20:11,200 --> 00:20:14,480
build on top of it that's what pocky

00:20:12,960 --> 00:20:17,679
tiny does

00:20:14,480 --> 00:20:20,000
and pocky alt config so there's examples

00:20:17,679 --> 00:20:22,000
of those there

00:20:20,000 --> 00:20:23,280
but you can just do that you know create

00:20:22,000 --> 00:20:24,799
your own distro and then just have

00:20:23,280 --> 00:20:25,840
nothing in it you can just inherit from

00:20:24,799 --> 00:20:27,280
pocky and then if you ever need to

00:20:25,840 --> 00:20:28,799
change anything you have the place and

00:20:27,280 --> 00:20:32,000
the mechanism to do that

00:20:28,799 --> 00:20:33,919
so my advice is that yeah pocky is great

00:20:32,000 --> 00:20:35,919
as a reference distro but inherit from

00:20:33,919 --> 00:20:37,360
it or create your own that's

00:20:35,919 --> 00:20:39,679
what the system's designed to be able to

00:20:37,360 --> 00:20:39,679
handle

00:20:43,760 --> 00:20:46,640
and is there a reason that the bit bait

00:20:45,200 --> 00:20:48,400
user manual is not part of the mega

00:20:46,640 --> 00:20:49,440
manual um

00:20:48,400 --> 00:20:51,600
we're busy changing all the

00:20:49,440 --> 00:20:52,480
documentation right now over from doc

00:20:51,600 --> 00:20:54,480
book to sphinx

00:20:52,480 --> 00:20:55,919
so i think that the bit bank manual will

00:20:54,480 --> 00:20:57,679
be included in

00:20:55,919 --> 00:21:02,320
the new equivalent of the mega manual in

00:20:57,679 --> 00:21:03,919
the new setup

00:21:02,320 --> 00:21:05,360
uh if it's not remind us and we'll see

00:21:03,919 --> 00:21:06,480
what we can do about that but yeah the

00:21:05,360 --> 00:21:08,400
move to syncs means that the

00:21:06,480 --> 00:21:10,400
documentation is a lot more accessible

00:21:08,400 --> 00:21:11,679
um for people to make changes to and

00:21:10,400 --> 00:21:13,200
develop so

00:21:11,679 --> 00:21:17,840
hopefully that should be one of the

00:21:13,200 --> 00:21:17,840
advantages of it

00:21:34,480 --> 00:21:38,799
so i think i'm probably running out of

00:21:35,919 --> 00:21:44,799
time not entirely sure how i

00:21:38,799 --> 00:21:46,159
see that in here but um i guess to to

00:21:44,799 --> 00:21:47,520
wrap up what i will say is that if

00:21:46,159 --> 00:21:48,720
anybody does have any more questions i'm

00:21:47,520 --> 00:21:49,600
not quite going to some of the ones at

00:21:48,720 --> 00:21:51,200
the end there

00:21:49,600 --> 00:21:53,200
uh please do find me in the the

00:21:51,200 --> 00:21:55,360
conference system and i'm

00:21:53,200 --> 00:21:56,480
uh quite happy to try and answer those

00:21:55,360 --> 00:22:00,320
and uh

00:21:56,480 --> 00:22:02,720
you know so please come find me um

00:22:00,320 --> 00:22:04,559
there is a um dr project slack channel

00:22:02,720 --> 00:22:07,039
that's accessible through the booth

00:22:04,559 --> 00:22:08,400
uh come find us there you'll find people

00:22:07,039 --> 00:22:10,840
who can answer a lot of questions about

00:22:08,400 --> 00:22:13,840
the project from there but yeah thanks

00:22:10,840 --> 00:22:13,840

YouTube URL: https://www.youtube.com/watch?v=Znr1MTnniic


