Title: BoF: KernelCI: Lessons Learned - Guillaume Tucker, Collabora
Publication date: 2020-10-27
Playlist: Open Source Summit & Embedded Linux Conference Europe 2020
Description: 
	BoF: KernelCI: Lessons Learned - Guillaume Tucker, Collabora
Captions: 
	00:00:00,080 --> 00:00:03,360
um i don't know how many people have

00:00:02,080 --> 00:00:05,680
joined already

00:00:03,360 --> 00:00:08,800
uh hey it's time to start so let's get

00:00:05,680 --> 00:00:12,080
started anyway so first

00:00:08,800 --> 00:00:12,080
i'll start with uh

00:00:12,160 --> 00:00:16,560
um explaining how this is going to work

00:00:15,040 --> 00:00:18,720
so i have a few slides

00:00:16,560 --> 00:00:20,320
to explain what you know present some

00:00:18,720 --> 00:00:22,560
content to get started

00:00:20,320 --> 00:00:23,920
about what kernel ci has been doing in

00:00:22,560 --> 00:00:25,920
the past year

00:00:23,920 --> 00:00:27,439
um and then there'll be plenty of time

00:00:25,920 --> 00:00:30,480
to discuss things

00:00:27,439 --> 00:00:31,439
i'm not sure uh what's going to be the

00:00:30,480 --> 00:00:33,040
best way

00:00:31,439 --> 00:00:34,880
to interact with people we'll see what

00:00:33,040 --> 00:00:37,120
the platform can do from my

00:00:34,880 --> 00:00:38,160
point of view it's just a zoom call i

00:00:37,120 --> 00:00:40,320
don't know if

00:00:38,160 --> 00:00:43,360
it's going to be completely interactive

00:00:40,320 --> 00:00:45,920
from your point of view or not

00:00:43,360 --> 00:00:47,840
but hopefully the chat will work as well

00:00:45,920 --> 00:00:50,079
can everybody

00:00:47,840 --> 00:00:52,480
see the chat messages yeah i see keys

00:00:50,079 --> 00:00:54,640
here okay so that seems to be working

00:00:52,480 --> 00:00:56,960
so if you have a question then for some

00:00:54,640 --> 00:01:00,239
reason you don't appear on the video

00:00:56,960 --> 00:01:01,880
then please at 17

00:01:00,239 --> 00:01:04,400
yes

00:01:01,880 --> 00:01:07,040
[Laughter]

00:01:04,400 --> 00:01:08,799
and there's a bit of inflation going on

00:01:07,040 --> 00:01:09,200
here so if someone has a question and

00:01:08,799 --> 00:01:11,920
can't

00:01:09,200 --> 00:01:13,439
um show up on the video then feel free

00:01:11,920 --> 00:01:16,159
to ask a question on the chat and i'll

00:01:13,439 --> 00:01:16,159
take it from there

00:01:16,320 --> 00:01:27,840
okay so now i'll start sharing my screen

00:01:19,200 --> 00:01:27,840
i have a few slides here

00:01:31,040 --> 00:01:36,320
okay can you see this yeah i think it's

00:01:34,000 --> 00:01:36,320
working

00:01:36,560 --> 00:01:43,040
okay hello everyone so if you remember

00:01:39,600 --> 00:01:46,640
about one year ago at um elc

00:01:43,040 --> 00:01:48,960
europe 2019 in leo

00:01:46,640 --> 00:01:51,520
the kernel ci project was announced as a

00:01:48,960 --> 00:01:53,119
linux foundation project

00:01:51,520 --> 00:01:55,520
now a lot of things have happened since

00:01:53,119 --> 00:01:57,920
then so first i'll go through a quick

00:01:55,520 --> 00:01:58,880
um review of all these things that has

00:01:57,920 --> 00:02:02,000
happened

00:01:58,880 --> 00:02:03,360
things that have happened so a lot of

00:02:02,000 --> 00:02:04,399
things have happened in colossae in

00:02:03,360 --> 00:02:06,159
general

00:02:04,399 --> 00:02:09,119
uh this slide is more about the things

00:02:06,159 --> 00:02:11,520
that i really related to

00:02:09,119 --> 00:02:13,120
the lf project or what we've done thanks

00:02:11,520 --> 00:02:16,560
to the members that have joined

00:02:13,120 --> 00:02:18,160
via the edf project so to start with we

00:02:16,560 --> 00:02:21,920
had to set a few things up

00:02:18,160 --> 00:02:24,319
so we've um we've defined that

00:02:21,920 --> 00:02:25,520
the role of the project we came up with

00:02:24,319 --> 00:02:28,239
a mission statement

00:02:25,520 --> 00:02:28,720
we elected some members for the board

00:02:28,239 --> 00:02:31,519
and the

00:02:28,720 --> 00:02:32,959
technical steering committee um so

00:02:31,519 --> 00:02:33,840
that's why during the first three months

00:02:32,959 --> 00:02:37,120
there was no like

00:02:33,840 --> 00:02:38,480
completely visible results but that's

00:02:37,120 --> 00:02:40,319
you know we had to go through all that

00:02:38,480 --> 00:02:43,440
stuff and

00:02:40,319 --> 00:02:48,400
set up any like any project

00:02:43,440 --> 00:02:50,800
then at first then we had a good um

00:02:48,400 --> 00:02:52,400
quite a good understanding or idea what

00:02:50,800 --> 00:02:54,080
we were doing so we could talk about a

00:02:52,400 --> 00:02:54,800
mission statement what we were trying to

00:02:54,080 --> 00:02:57,120
do

00:02:54,800 --> 00:02:58,800
um especially common reporting that's a

00:02:57,120 --> 00:03:01,599
new thing we've started

00:02:58,800 --> 00:03:02,959
doing with red hat so kcidb is the name

00:03:01,599 --> 00:03:05,040
of the project that does

00:03:02,959 --> 00:03:07,120
common reporting for gathering results

00:03:05,040 --> 00:03:10,400
from various test systems

00:03:07,120 --> 00:03:12,800
um and red hat is a member of the

00:03:10,400 --> 00:03:14,319
uh project so that's why you know it's

00:03:12,800 --> 00:03:16,159
one of the things that

00:03:14,319 --> 00:03:18,000
may not have happened if we would if we

00:03:16,159 --> 00:03:21,920
were not in a in this

00:03:18,000 --> 00:03:23,840
in this lf project uh then we started

00:03:21,920 --> 00:03:26,000
improving our infrastructure so

00:03:23,840 --> 00:03:29,120
microsoft who is also a

00:03:26,000 --> 00:03:30,000
member um has given us access to some of

00:03:29,120 --> 00:03:32,480
their servers

00:03:30,000 --> 00:03:33,360
and that has made a lot of things easier

00:03:32,480 --> 00:03:35,519
for us

00:03:33,360 --> 00:03:36,959
uh for hosting websites and and these

00:03:35,519 --> 00:03:40,640
kinds of things

00:03:36,959 --> 00:03:43,599
um then we also started um

00:03:40,640 --> 00:03:45,360
moving towards uh functional testing and

00:03:43,599 --> 00:03:48,480
that the the front end was re

00:03:45,360 --> 00:03:51,680
redone i think that was

00:03:48,480 --> 00:03:54,720
not really a linux foundation thing

00:03:51,680 --> 00:03:56,080
but very much i think it it happened

00:03:54,720 --> 00:03:59,439
thanks to the momentum that

00:03:56,080 --> 00:04:03,280
was given to the project to really open

00:03:59,439 --> 00:04:06,400
open up for doing a lot more tests

00:04:03,280 --> 00:04:08,720
then we did a community survey

00:04:06,400 --> 00:04:10,959
in coordination with several several

00:04:08,720 --> 00:04:13,040
people in

00:04:10,959 --> 00:04:14,400
in the board of the project the

00:04:13,040 --> 00:04:16,320
governing board

00:04:14,400 --> 00:04:17,919
and we got some good feedback some

00:04:16,320 --> 00:04:19,440
interesting feedback from the kernel

00:04:17,919 --> 00:04:23,040
community

00:04:19,440 --> 00:04:26,080
um i'll go through this in another slide

00:04:23,040 --> 00:04:29,280
then we also started using kubernetes so

00:04:26,080 --> 00:04:32,160
we have clusters running in in

00:04:29,280 --> 00:04:32,880
microsoft azure and also in google

00:04:32,160 --> 00:04:35,759
compute

00:04:32,880 --> 00:04:37,360
clusters now we we are using this now to

00:04:35,759 --> 00:04:41,280
uh to build kernels

00:04:37,360 --> 00:04:43,680
um so we have a much bigger capacity now

00:04:41,280 --> 00:04:45,040
and we'll probably be using that to run

00:04:43,680 --> 00:04:46,639
all the tests as well

00:04:45,040 --> 00:04:50,000
things that don't need to run on a

00:04:46,639 --> 00:04:54,560
particular hardware platform

00:04:50,000 --> 00:04:56,880
then at linux plumbers there was

00:04:54,560 --> 00:04:58,479
a lot of uh a lot of discussions around

00:04:56,880 --> 00:05:00,639
kernel ci and i think

00:04:58,479 --> 00:05:02,000
you could really see the the impact that

00:05:00,639 --> 00:05:02,720
the fact that the project was really

00:05:02,000 --> 00:05:04,240
taking off

00:05:02,720 --> 00:05:06,560
we still have a lot of things to do but

00:05:04,240 --> 00:05:07,440
if we look at all the things we've

00:05:06,560 --> 00:05:09,280
achieved i think

00:05:07,440 --> 00:05:10,479
we're doing quite well from that point

00:05:09,280 --> 00:05:13,680
of view

00:05:10,479 --> 00:05:17,680
um and one of the things

00:05:13,680 --> 00:05:19,600
that was um uh the accent was put a bit

00:05:17,680 --> 00:05:21,520
on the common reporting and trying to

00:05:19,600 --> 00:05:25,360
get more people to send results

00:05:21,520 --> 00:05:28,160
so we got uh google sisbot with dimitri

00:05:25,360 --> 00:05:29,280
he worked with us to get the first his

00:05:28,160 --> 00:05:32,000
bot results

00:05:29,280 --> 00:05:34,479
sent to the common reporting so that's

00:05:32,000 --> 00:05:36,160
another great step into

00:05:34,479 --> 00:05:38,639
having one email report that will

00:05:36,160 --> 00:05:39,120
contain results from the current kernel

00:05:38,639 --> 00:05:42,479
ci

00:05:39,120 --> 00:05:45,199
things we're running uh red hat cki and

00:05:42,479 --> 00:05:46,320
and and google's his bot and maybe we

00:05:45,199 --> 00:05:49,759
have a few more

00:05:46,320 --> 00:05:52,400
down the path as well um so on this

00:05:49,759 --> 00:05:53,520
slide i've put a very quick summary of

00:05:52,400 --> 00:05:56,720
what the community

00:05:53,520 --> 00:05:58,720
survey um told us

00:05:56,720 --> 00:06:00,080
so that's already a kind of a first set

00:05:58,720 --> 00:06:03,759
of lessons learned

00:06:00,080 --> 00:06:04,720
um so we need to do multi-test patches

00:06:03,759 --> 00:06:06,319
but we need to actually

00:06:04,720 --> 00:06:07,840
start testing patches that are sent to

00:06:06,319 --> 00:06:10,720
mailing lists

00:06:07,840 --> 00:06:11,440
because the native the kernel ci tests

00:06:10,720 --> 00:06:14,639
right now

00:06:11,440 --> 00:06:16,160
only apply to git branches also we

00:06:14,639 --> 00:06:18,960
should be doing

00:06:16,160 --> 00:06:19,680
deeper tests with like longer running

00:06:18,960 --> 00:06:21,919
tests that

00:06:19,680 --> 00:06:23,830
look for more things to have a bigger

00:06:21,919 --> 00:06:25,120
coverage

00:06:23,830 --> 00:06:26,720
[Music]

00:06:25,120 --> 00:06:29,440
so testing patches is good for quick

00:06:26,720 --> 00:06:32,479
feedback but we also need

00:06:29,440 --> 00:06:35,680
especially like for stable releases

00:06:32,479 --> 00:06:36,639
we can run much longer tests um and that

00:06:35,680 --> 00:06:38,880
that's really uh

00:06:36,639 --> 00:06:40,800
some extra value we don't have right now

00:06:38,880 --> 00:06:41,600
um also we need to improve the web

00:06:40,800 --> 00:06:44,639
dashboard

00:06:41,600 --> 00:06:46,240
not everybody uses web dashboard well

00:06:44,639 --> 00:06:48,880
not everybody relies on web dashboard

00:06:46,240 --> 00:06:50,800
but almost everybody

00:06:48,880 --> 00:06:52,800
will be using it a little bit at one

00:06:50,800 --> 00:06:55,440
point or another and if we have a good

00:06:52,800 --> 00:06:58,000
ui then it can also simplify people's

00:06:55,440 --> 00:06:58,000
work a lot

00:06:59,520 --> 00:07:03,120
here i have a quick summary of what

00:07:01,599 --> 00:07:05,680
happened at linux plumbers

00:07:03,120 --> 00:07:06,240
and what we learned from the linux

00:07:05,680 --> 00:07:08,240
plumbers

00:07:06,240 --> 00:07:10,319
experience so first they have just uh

00:07:08,240 --> 00:07:12,319
some links to their recorded talks which

00:07:10,319 --> 00:07:13,599
you can watch again on youtube the two

00:07:12,319 --> 00:07:16,639
talks that were really

00:07:13,599 --> 00:07:17,919
just about kernel ci um you'll see

00:07:16,639 --> 00:07:20,960
actually all the talks

00:07:17,919 --> 00:07:24,160
that touch on kernel ci like in their

00:07:20,960 --> 00:07:27,520
real time uh micro conference and

00:07:24,160 --> 00:07:30,160
in um in the clang

00:07:27,520 --> 00:07:30,960
as well so many and maybe a few more as

00:07:30,160 --> 00:07:33,360
well so

00:07:30,960 --> 00:07:34,880
actually can also was brought up in many

00:07:33,360 --> 00:07:35,440
different areas of the conference so

00:07:34,880 --> 00:07:38,000
that was

00:07:35,440 --> 00:07:39,280
really positive but what we realized is

00:07:38,000 --> 00:07:43,120
that um

00:07:39,280 --> 00:07:44,000
because of this um interest in kernel ci

00:07:43,120 --> 00:07:47,120
directly coming

00:07:44,000 --> 00:07:47,919
from maintainers who want specific tests

00:07:47,120 --> 00:07:50,160
to be running

00:07:47,919 --> 00:07:51,680
and they don't have a ci system at hand

00:07:50,160 --> 00:07:54,319
they want kernel ci to do that

00:07:51,680 --> 00:07:55,360
that's what we call now the kernel ci

00:07:54,319 --> 00:07:58,960
native tests

00:07:55,360 --> 00:08:02,160
what kernel ci does directly

00:07:58,960 --> 00:08:03,680
by contrast with the common reporting so

00:08:02,160 --> 00:08:05,840
you know when we gather reports from

00:08:03,680 --> 00:08:09,360
other ci systems like sysbot

00:08:05,840 --> 00:08:12,879
and arm have some test systems as well

00:08:09,360 --> 00:08:15,039
we talked with sony who have fuego

00:08:12,879 --> 00:08:16,000
and also gen 2 and some people from

00:08:15,039 --> 00:08:17,599
intel worked on

00:08:16,000 --> 00:08:19,440
work on the octo they have they do a lot

00:08:17,599 --> 00:08:21,759
of tests there as well

00:08:19,440 --> 00:08:22,879
so we can gather all these then if a

00:08:21,759 --> 00:08:24,879
maintainer says

00:08:22,879 --> 00:08:26,800
i have a special branch i want to test i

00:08:24,879 --> 00:08:28,720
want to run these tests

00:08:26,800 --> 00:08:30,080
the other projects might or might not be

00:08:28,720 --> 00:08:32,479
interested or it might

00:08:30,080 --> 00:08:34,159
not be easy for them to to integrate

00:08:32,479 --> 00:08:35,760
that into their system

00:08:34,159 --> 00:08:37,519
uh because they're focused on testing

00:08:35,760 --> 00:08:41,200
their products or testing

00:08:37,519 --> 00:08:43,279
one thing and they don't want to diverge

00:08:41,200 --> 00:08:45,279
so that's the kind of that's the kind of

00:08:43,279 --> 00:08:46,720
thing that native kernel ci test now

00:08:45,279 --> 00:08:49,440
about

00:08:46,720 --> 00:08:50,240
so if it's completely a you know for the

00:08:49,440 --> 00:08:53,519
upstream

00:08:50,240 --> 00:08:54,000
kernel uh a need from coming down coming

00:08:53,519 --> 00:08:55,440
directly from

00:08:54,000 --> 00:08:57,680
the community it makes sense to have it

00:08:55,440 --> 00:09:00,000
there so they all complement each other

00:08:57,680 --> 00:09:00,000
really

00:09:00,959 --> 00:09:05,279
um now i've got a i've gathered a few

00:09:03,519 --> 00:09:08,320
ideas on this slide as

00:09:05,279 --> 00:09:09,279
maybe things that i think we can discuss

00:09:08,320 --> 00:09:11,040
here but

00:09:09,279 --> 00:09:13,040
of course people might have already some

00:09:11,040 --> 00:09:15,600
ideas um

00:09:13,040 --> 00:09:16,640
so one of the first item is what i've

00:09:15,600 --> 00:09:18,640
just talked about

00:09:16,640 --> 00:09:20,720
uh so how we can have native tests

00:09:18,640 --> 00:09:22,959
alongside

00:09:20,720 --> 00:09:24,240
common reporting well the native test

00:09:22,959 --> 00:09:26,800
will

00:09:24,240 --> 00:09:27,839
join you know the results will be in the

00:09:26,800 --> 00:09:32,000
common database

00:09:27,839 --> 00:09:34,320
as well as other results um

00:09:32,000 --> 00:09:36,080
and then i think we can simply say that

00:09:34,320 --> 00:09:36,720
the the purpose of having linux

00:09:36,080 --> 00:09:39,200
foundation

00:09:36,720 --> 00:09:41,200
project as opposed to not having one

00:09:39,200 --> 00:09:44,160
like we you know were

00:09:41,200 --> 00:09:45,839
like kernel ci started in 2014 so or

00:09:44,160 --> 00:09:46,959
maybe even a bit before that so for

00:09:45,839 --> 00:09:50,160
quite a few years

00:09:46,959 --> 00:09:51,920
um it was a bit ad hoc

00:09:50,160 --> 00:09:54,640
project and now we have the linux

00:09:51,920 --> 00:09:57,040
foundation framework around us

00:09:54,640 --> 00:09:58,240
so for the project itself it means we

00:09:57,040 --> 00:10:00,800
have much more

00:09:58,240 --> 00:10:01,440
resources we have budget we have access

00:10:00,800 --> 00:10:03,920
to

00:10:01,440 --> 00:10:04,480
clusters and we have a lot of expertise

00:10:03,920 --> 00:10:08,079
from

00:10:04,480 --> 00:10:10,880
uh from uh from the members

00:10:08,079 --> 00:10:13,200
if and for the members themselves uh

00:10:10,880 --> 00:10:13,600
it's a great way for them to improving

00:10:13,200 --> 00:10:15,920
into

00:10:13,600 --> 00:10:17,680
the upstream kernel quality because all

00:10:15,920 --> 00:10:20,560
the um

00:10:17,680 --> 00:10:21,680
the ci systems that run for products or

00:10:20,560 --> 00:10:24,399
distros

00:10:21,680 --> 00:10:26,560
they can feedback fixes uh but don't

00:10:24,399 --> 00:10:28,880
they don't work directly on the

00:10:26,560 --> 00:10:30,880
on the upstream um so the common

00:10:28,880 --> 00:10:33,200
reporting is a way of bridging that link

00:10:30,880 --> 00:10:34,480
and also native test is to work directly

00:10:33,200 --> 00:10:36,240
firsthand on it so

00:10:34,480 --> 00:10:37,839
if you want to invest into improving

00:10:36,240 --> 00:10:40,399
upstream kernel

00:10:37,839 --> 00:10:43,120
quality i think kernel ci basically is

00:10:40,399 --> 00:10:43,120
is for that

00:10:43,200 --> 00:10:47,680
and of course we have some issues around

00:10:46,399 --> 00:10:49,440
scalability as we keep

00:10:47,680 --> 00:10:50,880
growing some bits are growing faster

00:10:49,440 --> 00:10:53,600
than others like we can build

00:10:50,880 --> 00:10:55,839
a lot of things now we can start running

00:10:53,600 --> 00:10:57,519
more tests but we don't necessarily have

00:10:55,839 --> 00:10:59,920
the capacity or the

00:10:57,519 --> 00:11:02,000
expertise or the people valuable to deal

00:10:59,920 --> 00:11:06,480
with all that as we keep growing

00:11:02,000 --> 00:11:09,279
um so this is maybe where we

00:11:06,480 --> 00:11:09,279
we need more help

00:11:10,880 --> 00:11:15,760
now let's see after that so i've just

00:11:13,519 --> 00:11:17,120
put a summary here how to get in touch

00:11:15,760 --> 00:11:18,959
with the mailing list

00:11:17,120 --> 00:11:20,399
we have all the code on github there's

00:11:18,959 --> 00:11:22,640
an isc channel

00:11:20,399 --> 00:11:24,000
you can see all the members so we have

00:11:22,640 --> 00:11:25,760
uh bailey brand

00:11:24,000 --> 00:11:27,760
civil infrastructure platform which is

00:11:25,760 --> 00:11:31,200
another linux foundation project

00:11:27,760 --> 00:11:34,560
with collabora where i work

00:11:31,200 --> 00:11:37,920
we have friend rest of io and google and

00:11:34,560 --> 00:11:37,920
microsoft and red hat

00:11:39,120 --> 00:11:42,240
if you download the pdfs you can see

00:11:40,720 --> 00:11:43,760
i've put a few more things after that

00:11:42,240 --> 00:11:44,640
but i won't go into them right now

00:11:43,760 --> 00:11:47,839
unless someone has

00:11:44,640 --> 00:11:50,880
any specific questions

00:11:47,839 --> 00:11:53,440
um okay

00:11:50,880 --> 00:11:57,839
so does anybody have any question right

00:11:53,440 --> 00:11:57,839
now to raise

00:12:02,800 --> 00:12:11,839
let's see if i stop sharing

00:12:21,760 --> 00:12:25,040
so like i said in the beginning of the

00:12:23,680 --> 00:12:27,120
talk i don't know if you

00:12:25,040 --> 00:12:28,560
were all here but i'm not sure if you

00:12:27,120 --> 00:12:31,920
can just show up

00:12:28,560 --> 00:12:35,040
by the video from from your end

00:12:31,920 --> 00:12:36,240
so in doubt you can type a question in

00:12:35,040 --> 00:12:40,560
the chat if

00:12:36,240 --> 00:12:40,560
if you can't reach in video form

00:12:46,830 --> 00:12:53,120
[Music]

00:12:49,600 --> 00:12:55,920
i can hear someone seems to be working

00:12:53,120 --> 00:12:55,920
oh yeah hello

00:12:56,800 --> 00:12:59,600
i have nothing to contribute i just

00:12:58,320 --> 00:13:01,360
wanted to make sure this worked if

00:12:59,600 --> 00:13:02,959
somebody else wants to chime in

00:13:01,360 --> 00:13:04,320
and thank you very much for all the work

00:13:02,959 --> 00:13:06,320
you've been doing for the project it's

00:13:04,320 --> 00:13:08,959
been it's been wonderful to watch

00:13:06,320 --> 00:13:10,639
um there's infinitely more work to be

00:13:08,959 --> 00:13:11,120
done but i think that the summary was

00:13:10,639 --> 00:13:14,160
really

00:13:11,120 --> 00:13:14,639
uh encouraging already it looked like

00:13:14,160 --> 00:13:16,399
more

00:13:14,639 --> 00:13:18,800
when you presented this way than the

00:13:16,399 --> 00:13:20,720
things that we struggle with on the

00:13:18,800 --> 00:13:21,120
weekly basis amongst ourselves so thank

00:13:20,720 --> 00:13:22,880
you for

00:13:21,120 --> 00:13:24,560
for the overview it was much appreciated

00:13:22,880 --> 00:13:26,320
by me we already knew it but

00:13:24,560 --> 00:13:28,480
needed to see it summarized again so

00:13:26,320 --> 00:13:30,079
that was good

00:13:28,480 --> 00:13:32,160
there must be questions i see the list

00:13:30,079 --> 00:13:34,079
of 28 participants

00:13:32,160 --> 00:13:35,760
there are some people i've not met

00:13:34,079 --> 00:13:38,000
before here so

00:13:35,760 --> 00:13:39,199
love love to get some feedback questions

00:13:38,000 --> 00:13:41,360
comments concerns

00:13:39,199 --> 00:13:44,160
input that can be contributed a lot of

00:13:41,360 --> 00:13:45,440
the members of the project are here but

00:13:44,160 --> 00:13:47,360
it would be great to hear from the

00:13:45,440 --> 00:13:49,839
others and people that have contributed

00:13:47,360 --> 00:13:49,839
as well

00:13:52,079 --> 00:13:56,399
if not i have a question like what would

00:13:53,839 --> 00:13:59,519
you like kernel ci to be doing for you

00:13:56,399 --> 00:14:01,600
if there was one thing to pick

00:13:59,519 --> 00:14:02,800
that's the question i did for for

00:14:01,600 --> 00:14:05,680
plumbers it was

00:14:02,800 --> 00:14:07,279
people said i want everything but if

00:14:05,680 --> 00:14:08,320
there's like the most important thing in

00:14:07,279 --> 00:14:11,199
your mind

00:14:08,320 --> 00:14:13,279
from whatever role you have if you're a

00:14:11,199 --> 00:14:14,639
developer or maintainer or working on a

00:14:13,279 --> 00:14:16,079
product or something

00:14:14,639 --> 00:14:20,480
what would you expect as the main

00:14:16,079 --> 00:14:20,480
important thing to be coming from kernel

00:14:28,839 --> 00:14:31,839
city

00:14:40,000 --> 00:14:43,920
now here's a question so i'll read it

00:14:42,000 --> 00:14:44,720
read it down now just in case that's not

00:14:43,920 --> 00:14:48,079
recorded

00:14:44,720 --> 00:14:51,120
i wonder from roman yeah i wonder if you

00:14:48,079 --> 00:14:54,240
plan to add any subsystem specific ci

00:14:51,120 --> 00:14:57,760
um are there any plans or ideas

00:14:54,240 --> 00:15:00,800
for example like for scurzy drivers um

00:14:57,760 --> 00:15:01,839
we already have some uh subsystem

00:15:00,800 --> 00:15:06,399
specific things

00:15:01,839 --> 00:15:06,399
especially well um

00:15:06,800 --> 00:15:10,560
not especially because we insist on it

00:15:08,560 --> 00:15:14,800
but more because we've started by

00:15:10,560 --> 00:15:18,320
um by doing things for video for linux

00:15:14,800 --> 00:15:22,079
and also for drm kms

00:15:18,320 --> 00:15:23,600
um we also have a few more

00:15:22,079 --> 00:15:26,079
while we're testing things in usb a

00:15:23,600 --> 00:15:26,480
little bit but for video for linux we

00:15:26,079 --> 00:15:30,240
run

00:15:26,480 --> 00:15:31,519
uh v4l to compliance on on a few on a

00:15:30,240 --> 00:15:34,880
handful of drivers

00:15:31,519 --> 00:15:38,880
like well uvc on on many devices

00:15:34,880 --> 00:15:41,440
um and we're testing the

00:15:38,880 --> 00:15:42,560
the main branch from the media tree but

00:15:41,440 --> 00:15:46,240
we also test this

00:15:42,560 --> 00:15:48,880
we run the same tests on um

00:15:46,240 --> 00:15:49,920
on linux next and mainline and stable

00:15:48,880 --> 00:15:52,079
and the results

00:15:49,920 --> 00:15:53,120
from that are sent to the main mailing

00:15:52,079 --> 00:15:56,240
lists and also

00:15:53,120 --> 00:15:59,360
to the subsystem mailing list

00:15:56,240 --> 00:16:00,160
and i actually worked with hands

00:15:59,360 --> 00:16:03,199
initially to

00:16:00,160 --> 00:16:05,360
to get that to work now still a few

00:16:03,199 --> 00:16:08,160
things to improve

00:16:05,360 --> 00:16:10,560
so we didn't really have to change

00:16:08,160 --> 00:16:13,600
anything in the infrastructure to

00:16:10,560 --> 00:16:14,399
work with the video for linux system and

00:16:13,600 --> 00:16:17,680
i think

00:16:14,399 --> 00:16:19,680
that was normally that that shouldn't be

00:16:17,680 --> 00:16:22,959
needed so basically all we need to do is

00:16:19,680 --> 00:16:26,000
add specific tests so recently we

00:16:22,959 --> 00:16:28,399
started adding tests for real-time linux

00:16:26,000 --> 00:16:30,160
so we just add some test definitions or

00:16:28,399 --> 00:16:31,199
reuse some test definitions from other

00:16:30,160 --> 00:16:33,360
projects

00:16:31,199 --> 00:16:36,240
like the linear old kft they have some

00:16:33,360 --> 00:16:40,160
definitions already which we can reuse

00:16:36,240 --> 00:16:42,480
um and we run that so we can configure

00:16:40,160 --> 00:16:43,519
which kernel branches to test on which

00:16:42,480 --> 00:16:45,839
platforms

00:16:43,519 --> 00:16:47,920
and what to do with the results so for

00:16:45,839 --> 00:16:50,160
scuzzy well if we have some tests to

00:16:47,920 --> 00:16:52,000
test the uh um

00:16:50,160 --> 00:16:53,680
maybe i don't know if you want to test

00:16:52,000 --> 00:16:55,839
block devices or more level like

00:16:53,680 --> 00:16:58,079
directly talk to the scuzzy drives

00:16:55,839 --> 00:16:59,440
if you have some tests for that we can

00:16:58,079 --> 00:17:02,959
make a

00:16:59,440 --> 00:17:04,959
user file system or whatever works best

00:17:02,959 --> 00:17:06,720
and have some devices with cursive

00:17:04,959 --> 00:17:09,600
drives and run things on them

00:17:06,720 --> 00:17:11,439
you can um i mean one icw kernel ciso

00:17:09,600 --> 00:17:12,240
project doesn't directly manage the

00:17:11,439 --> 00:17:14,720
hardware

00:17:12,240 --> 00:17:16,160
uh some members have a test lab like

00:17:14,720 --> 00:17:18,880
collaborate has a test lab

00:17:16,160 --> 00:17:19,760
daily browser test lab and cip and many

00:17:18,880 --> 00:17:22,160
others

00:17:19,760 --> 00:17:23,839
also some that are not members so

00:17:22,160 --> 00:17:26,319
wherever you're coming from you can have

00:17:23,839 --> 00:17:27,360
your own test lab and run tests and

00:17:26,319 --> 00:17:30,480
submit results

00:17:27,360 --> 00:17:32,160
well you can use the kernel ci bills

00:17:30,480 --> 00:17:34,640
run it on your platform and send the

00:17:32,160 --> 00:17:36,160
results to kernel ci

00:17:34,640 --> 00:17:38,320
and if someone else wants to also run

00:17:36,160 --> 00:17:41,679
scuzzy tests they can do that

00:17:38,320 --> 00:17:41,679
in their own test lab

00:17:43,039 --> 00:17:48,720
okay now i have another question

00:17:46,160 --> 00:17:50,720
from chris maybe one question some time

00:17:48,720 --> 00:17:53,200
ago there was a way to search for test

00:17:50,720 --> 00:17:55,280
results in a specific lab

00:17:53,200 --> 00:17:58,840
on the dashboard the other web ui it

00:17:55,280 --> 00:18:00,400
seems this feature is gone now

00:17:58,840 --> 00:18:04,480
um

00:18:00,400 --> 00:18:08,240
um there was a change in the

00:18:04,480 --> 00:18:09,360
in the web front end to move the focus

00:18:08,240 --> 00:18:11,200
from boot testing

00:18:09,360 --> 00:18:13,200
to functional testing so we could have a

00:18:11,200 --> 00:18:16,240
lot more results

00:18:13,200 --> 00:18:17,360
however the way the web front end was

00:18:16,240 --> 00:18:21,280
designed

00:18:17,360 --> 00:18:23,280
was very um uh idiosyncratic i should

00:18:21,280 --> 00:18:24,799
say like everything was very special

00:18:23,280 --> 00:18:26,480
special so when we made that move we

00:18:24,799 --> 00:18:29,280
simplified things as well

00:18:26,480 --> 00:18:30,400
so the plan now is to have a better web

00:18:29,280 --> 00:18:32,000
dashboard

00:18:30,400 --> 00:18:35,120
which would be more flexible so we don't

00:18:32,000 --> 00:18:37,840
have to handcraft every single possible

00:18:35,120 --> 00:18:41,039
search view and stuff like that

00:18:37,840 --> 00:18:42,000
so the short term plan if something like

00:18:41,039 --> 00:18:44,640
that is really needed

00:18:42,000 --> 00:18:45,360
we can probably uh add a feature for it

00:18:44,640 --> 00:18:47,120
but

00:18:45,360 --> 00:18:49,039
it's basically infinite the number of

00:18:47,120 --> 00:18:50,000
ways you can search the data so we don't

00:18:49,039 --> 00:18:52,000
want to

00:18:50,000 --> 00:18:53,440
uh spend endless time trying to

00:18:52,000 --> 00:18:56,080
implement everything

00:18:53,440 --> 00:18:58,400
so right now it's a bit more um

00:18:56,080 --> 00:19:00,480
simplified

00:18:58,400 --> 00:19:01,840
but maybe maybe you can send an email to

00:19:00,480 --> 00:19:06,799
the mailing list like

00:19:01,840 --> 00:19:06,799
kernel ci at groups.io

00:19:06,880 --> 00:19:10,720
and if you have if you can explain why

00:19:09,840 --> 00:19:13,200
that's important

00:19:10,720 --> 00:19:14,160
to you also we're trying to gather some

00:19:13,200 --> 00:19:16,640
user stories

00:19:14,160 --> 00:19:17,840
for making a new web dashboard so if you

00:19:16,640 --> 00:19:19,440
explain

00:19:17,840 --> 00:19:20,799
how that works in your workflow like you

00:19:19,440 --> 00:19:22,480
want to see just the results from the

00:19:20,799 --> 00:19:23,520
platforms in your lab maybe maybe that's

00:19:22,480 --> 00:19:25,360
what you want to do

00:19:23,520 --> 00:19:28,960
it would be great if you can explain

00:19:25,360 --> 00:19:32,640
that and just put it in a small email

00:19:28,960 --> 00:19:34,400
i hope that helped tim what is the

00:19:32,640 --> 00:19:37,120
relationship between kernel ci

00:19:34,400 --> 00:19:38,000
project and lava project and does common

00:19:37,120 --> 00:19:40,080
ci have

00:19:38,000 --> 00:19:42,559
non-upstream changes to lava do lava

00:19:40,080 --> 00:19:47,120
people participate in kernel ci

00:19:42,559 --> 00:19:51,280
so kernel ci is independent from lava

00:19:47,120 --> 00:19:52,270
lava is a project run by linaro

00:19:51,280 --> 00:19:56,080
to

00:19:52,270 --> 00:19:59,360
[Music]

00:19:56,080 --> 00:20:02,080
basically provision some platforms

00:19:59,360 --> 00:20:02,640
and run some tests on these platforms it

00:20:02,080 --> 00:20:06,000
has

00:20:02,640 --> 00:20:07,760
an api so you can remotely send a

00:20:06,000 --> 00:20:10,640
definition of what you want to run

00:20:07,760 --> 00:20:13,120
like here's the you know here's the url

00:20:10,640 --> 00:20:15,280
to kernel url to file system

00:20:13,120 --> 00:20:17,200
and some more definition of the test you

00:20:15,280 --> 00:20:18,480
want to run and it will run it and send

00:20:17,200 --> 00:20:21,679
you the results

00:20:18,480 --> 00:20:23,360
so you can use it like that as a service

00:20:21,679 --> 00:20:25,039
and that's exactly what kernel ci is

00:20:23,360 --> 00:20:28,640
doing um

00:20:25,039 --> 00:20:32,240
there are other labs that are not lava

00:20:28,640 --> 00:20:35,679
uh so every every

00:20:32,240 --> 00:20:38,000
um you know labs are managed

00:20:35,679 --> 00:20:40,720
by people outside of the kernel ci team

00:20:38,000 --> 00:20:43,200
the colonoscopy team only deals with the

00:20:40,720 --> 00:20:44,799
uh the core pipeline so the thing that

00:20:43,200 --> 00:20:47,840
will trigger bills

00:20:44,799 --> 00:20:49,200
and trigger tests to run in labs and put

00:20:47,840 --> 00:20:52,080
the results on the web

00:20:49,200 --> 00:20:53,840
front-end and in a database and send

00:20:52,080 --> 00:20:56,880
email notifications

00:20:53,840 --> 00:20:57,600
but when uh when a lab goes down or a

00:20:56,880 --> 00:20:59,440
device

00:20:57,600 --> 00:21:00,960
goes offline that's not kernel cisco

00:20:59,440 --> 00:21:02,799
it's a responsibility that's the

00:21:00,960 --> 00:21:03,679
responsibility of the people running the

00:21:02,799 --> 00:21:06,559
labs

00:21:03,679 --> 00:21:08,080
if you go on the kennel ci.org web front

00:21:06,559 --> 00:21:11,120
end you can see that there's

00:21:08,080 --> 00:21:13,919
like eight or nine maybe 10 labs

00:21:11,120 --> 00:21:15,280
um on unstable there's more people

00:21:13,919 --> 00:21:18,720
testing stable so you have

00:21:15,280 --> 00:21:20,320
like 10 different labs most of them are

00:21:18,720 --> 00:21:21,679
lava but some are not number you can

00:21:20,320 --> 00:21:23,280
create your own

00:21:21,679 --> 00:21:25,039
you can submit your own results if you

00:21:23,280 --> 00:21:28,159
want to

00:21:25,039 --> 00:21:28,559
uh of course some people contribute to

00:21:28,159 --> 00:21:30,880
both

00:21:28,559 --> 00:21:32,240
like i'm a co-maintainer of lava as well

00:21:30,880 --> 00:21:34,640
although i don't contribute too much

00:21:32,240 --> 00:21:37,600
right now

00:21:34,640 --> 00:21:39,360
and but um now people who do only lava

00:21:37,600 --> 00:21:40,320
people who do only honeycomb ci you

00:21:39,360 --> 00:21:43,200
don't have to do both

00:21:40,320 --> 00:21:44,640
that's separate things really lava could

00:21:43,200 --> 00:21:46,240
disappear one day and we could still

00:21:44,640 --> 00:21:49,760
have kernel ci

00:21:46,240 --> 00:21:54,240
we should be doing things differently

00:21:49,760 --> 00:21:55,200
um now gee other projects beyond linux

00:21:54,240 --> 00:21:56,640
also

00:21:55,200 --> 00:21:58,240
graduating and doing more ci and

00:21:56,640 --> 00:22:00,799
automated testing themselves

00:21:58,240 --> 00:22:01,679
which really helps exercise this tech

00:22:00,799 --> 00:22:05,360
more completely

00:22:01,679 --> 00:22:05,360
missing ci comes to mind yeah okay

00:22:06,400 --> 00:22:09,600
is there any documentation on how to

00:22:08,400 --> 00:22:13,120
write those

00:22:09,600 --> 00:22:14,720
custom tests and how to okay so yeah

00:22:13,120 --> 00:22:16,799
actually we've just um

00:22:14,720 --> 00:22:18,640
almost finished writing a guide for that

00:22:16,799 --> 00:22:21,840
it's already

00:22:18,640 --> 00:22:27,840
some part of it has been merged

00:22:21,840 --> 00:22:27,840
let me put the link here

00:22:29,520 --> 00:22:35,919
so it's kind of

00:22:33,280 --> 00:22:37,200
maybe easiest to do this in lava but

00:22:35,919 --> 00:22:39,360
again if you already have

00:22:37,200 --> 00:22:41,919
your own test system you can use your

00:22:39,360 --> 00:22:45,039
own test system instead

00:22:41,919 --> 00:22:49,120
and we'll work out the the plumbing

00:22:45,039 --> 00:22:55,840
to make it work so i'll just put a link

00:22:49,120 --> 00:22:55,840
to the documentation

00:23:04,000 --> 00:23:08,880
yeah so there's an example there that's

00:23:06,400 --> 00:23:09,679
based on lava and and debora s which is

00:23:08,880 --> 00:23:12,559
a tool to

00:23:09,679 --> 00:23:13,840
create um a debian based file system so

00:23:12,559 --> 00:23:16,240
that's to run on

00:23:13,840 --> 00:23:17,840
on like small um hardware well not

00:23:16,240 --> 00:23:19,360
really small not necessarily small but

00:23:17,840 --> 00:23:22,000
on development boards

00:23:19,360 --> 00:23:22,720
where you create um create a file system

00:23:22,000 --> 00:23:25,440
image

00:23:22,720 --> 00:23:26,000
and it will be running there if you run

00:23:25,440 --> 00:23:28,240
on a more

00:23:26,000 --> 00:23:29,760
virtual platform you could use you know

00:23:28,240 --> 00:23:33,600
vm image or

00:23:29,760 --> 00:23:33,600
docker it depends what test you want to

00:23:34,840 --> 00:23:42,080
run

00:23:37,840 --> 00:23:43,760
okay now open hardware projects

00:23:42,080 --> 00:23:46,080
for sd card multiplexes yeah that's a

00:23:43,760 --> 00:23:48,720
good idea sounds like uh

00:23:46,080 --> 00:23:49,679
we have a new kind of tests being

00:23:48,720 --> 00:23:51,760
designed here

00:23:49,679 --> 00:23:54,240
with because it drives but there's

00:23:51,760 --> 00:23:57,279
there's there have been some talks about

00:23:54,240 --> 00:24:00,640
um uh mfd

00:23:57,279 --> 00:24:03,039
memory devices uh like

00:24:00,640 --> 00:24:04,320
flash memory basically maybe some tests

00:24:03,039 --> 00:24:06,559
will be relevant to both

00:24:04,320 --> 00:24:10,640
i'm not sure slightly higher level ones

00:24:06,559 --> 00:24:10,640
will probably be like block layer tests

00:24:11,679 --> 00:24:16,480
uh considering that now kcidb is

00:24:14,720 --> 00:24:18,000
throwing a lot of data is there a plan

00:24:16,480 --> 00:24:19,360
to explore that

00:24:18,000 --> 00:24:22,400
that's the first question so quick

00:24:19,360 --> 00:24:23,840
answer is yes what are kernel ci plans

00:24:22,400 --> 00:24:26,720
for this volume of data

00:24:23,840 --> 00:24:28,159
machine learning data analysis do you

00:24:26,720 --> 00:24:29,760
already have some ideas

00:24:28,159 --> 00:24:31,520
about which kind of information could be

00:24:29,760 --> 00:24:33,520
useful to extract

00:24:31,520 --> 00:24:35,279
so in the short term we want to use that

00:24:33,520 --> 00:24:38,640
to generate

00:24:35,279 --> 00:24:41,600
a common email to report

00:24:38,640 --> 00:24:44,000
all the testing that is being done on on

00:24:41,600 --> 00:24:46,640
the upstream kernel

00:24:44,000 --> 00:24:48,320
you'll see on kernel mailing lists uh

00:24:46,640 --> 00:24:50,559
for one kernel revision you might get

00:24:48,320 --> 00:24:52,080
four or five different emails they'll be

00:24:50,559 --> 00:24:53,120
testing things in a slightly different

00:24:52,080 --> 00:24:55,919
way

00:24:53,120 --> 00:24:57,600
um and that's you know if it keeps

00:24:55,919 --> 00:24:59,679
growing like that it's going to be

00:24:57,600 --> 00:25:02,159
counterproductive and causing more more

00:24:59,679 --> 00:25:05,360
headaches than then

00:25:02,159 --> 00:25:07,039
then can be a kind of a bit of a

00:25:05,360 --> 00:25:08,320
disservice if you have to compare all

00:25:07,039 --> 00:25:11,200
these things

00:25:08,320 --> 00:25:12,480
and try to um assemble them to get the

00:25:11,200 --> 00:25:14,559
the bigger picture

00:25:12,480 --> 00:25:15,600
so having a single database and a single

00:25:14,559 --> 00:25:18,240
email

00:25:15,600 --> 00:25:19,840
makes everybody's lives a lot easier so

00:25:18,240 --> 00:25:20,240
that's that's more like the short term

00:25:19,840 --> 00:25:23,279
thing

00:25:20,240 --> 00:25:24,799
and longer term we can do things exactly

00:25:23,279 --> 00:25:26,880
like you've described so

00:25:24,799 --> 00:25:28,480
we can do it's really like big data

00:25:26,880 --> 00:25:31,039
analysis

00:25:28,480 --> 00:25:32,880
we can do machine learning to maybe

00:25:31,039 --> 00:25:34,559
detect when um

00:25:32,880 --> 00:25:36,480
when a patch is more likely to cause a

00:25:34,559 --> 00:25:38,080
problem uh or

00:25:36,480 --> 00:25:40,480
there's a lot of things that can be done

00:25:38,080 --> 00:25:42,880
we're not quite there yet

00:25:40,480 --> 00:25:43,520
we can also of course do things in the

00:25:42,880 --> 00:25:45,679
middle

00:25:43,520 --> 00:25:47,200
uh things that are not too complicated

00:25:45,679 --> 00:25:50,640
but slightly

00:25:47,200 --> 00:25:54,080
more uh computer computation

00:25:50,640 --> 00:25:57,600
intensive such as uh looking for trends

00:25:54,080 --> 00:25:59,440
so if we want to make a if we capture

00:25:57,600 --> 00:26:00,320
collect data for a long time like for

00:25:59,440 --> 00:26:02,080
two or three

00:26:00,320 --> 00:26:04,720
kernel releases we can see how things

00:26:02,080 --> 00:26:07,039
evolve see if there's

00:26:04,720 --> 00:26:08,320
more bugs in rc1 than rc2 that's kind of

00:26:07,039 --> 00:26:11,679
thing you would expect

00:26:08,320 --> 00:26:14,000
um and then uh let's see really

00:26:11,679 --> 00:26:16,080
how that evolves and see if canal ci has

00:26:14,000 --> 00:26:18,400
an impact on it

00:26:16,080 --> 00:26:19,679
uh so that's the kind of thing we want

00:26:18,400 --> 00:26:23,440
to to find out

00:26:19,679 --> 00:26:24,000
but um understanding what we can do with

00:26:23,440 --> 00:26:26,480
the data

00:26:24,000 --> 00:26:28,320
is part of part of dealing with the data

00:26:26,480 --> 00:26:30,159
so we don't have all the answers yet

00:26:28,320 --> 00:26:32,799
if you have some ideas it would be great

00:26:30,159 --> 00:26:32,799
to share them

00:26:36,840 --> 00:26:40,000
um

00:26:38,559 --> 00:26:42,320
okay vince's there's yeah there's

00:26:40,000 --> 00:26:43,600
another another talk exactly yeah thanks

00:26:42,320 --> 00:26:46,720
kevin for mentioning that

00:26:43,600 --> 00:26:49,039
it's a talk on wednesday

00:26:46,720 --> 00:26:51,679
uh about how to how to test things with

00:26:49,039 --> 00:26:51,679
kernel ci

00:26:51,760 --> 00:26:57,120
is there an alternative to to lava

00:26:55,039 --> 00:26:59,520
to bring your hardware yes so you can

00:26:57,120 --> 00:27:02,799
use in principle you can use any

00:26:59,520 --> 00:27:06,080
test system uh you want so

00:27:02,799 --> 00:27:08,480
um normally the first thing to do

00:27:06,080 --> 00:27:09,440
would be to detect when a new kernel say

00:27:08,480 --> 00:27:12,320
build uh

00:27:09,440 --> 00:27:13,120
well a new canal say bl binary is

00:27:12,320 --> 00:27:16,720
available

00:27:13,120 --> 00:27:18,480
so if you have an x86 board or an m64

00:27:16,720 --> 00:27:20,320
ball or something

00:27:18,480 --> 00:27:21,840
with a specific specific dev config

00:27:20,320 --> 00:27:25,120
you're looking for you need to

00:27:21,840 --> 00:27:25,919
um monitor for when canon ci produces

00:27:25,120 --> 00:27:30,080
one

00:27:25,919 --> 00:27:32,960
we're working on a way to notify uh labs

00:27:30,080 --> 00:27:34,480
so they don't have to keep looking but

00:27:32,960 --> 00:27:37,279
right now it's possible to

00:27:34,480 --> 00:27:38,640
uh what what labs are doing now labs

00:27:37,279 --> 00:27:40,320
that are not lava they are

00:27:38,640 --> 00:27:42,399
checking every now and again if there's

00:27:40,320 --> 00:27:44,320
a new build if there's a building

00:27:42,399 --> 00:27:46,880
download it and run some tests and do

00:27:44,320 --> 00:27:49,120
whatever they want with it

00:27:46,880 --> 00:27:50,880
and then produce some results and then

00:27:49,120 --> 00:27:53,440
there's uh there's an api

00:27:50,880 --> 00:27:54,640
and a tool uh called kci data which you

00:27:53,440 --> 00:27:59,840
can use now

00:27:54,640 --> 00:27:59,840
to submit your results in a simple email

00:28:00,840 --> 00:28:03,840
format

00:28:05,200 --> 00:28:09,200
and okay

00:28:09,360 --> 00:28:12,960
there is a currency rest api can be used

00:28:11,840 --> 00:28:17,840
to submit results

00:28:12,960 --> 00:28:17,840
yes exactly

00:28:18,880 --> 00:28:25,360
also uh we have a shared google doc

00:28:22,799 --> 00:28:28,799
where we can put some notes

00:28:25,360 --> 00:28:28,799
uh i've put the link

00:28:29,520 --> 00:28:36,559
in the um in the in the schedule

00:28:33,120 --> 00:28:38,799
uh sites description for this talk

00:28:36,559 --> 00:28:42,240
but i'll copy it here again i haven't

00:28:38,799 --> 00:28:44,960
put anything there yet but i'm

00:28:42,240 --> 00:28:46,960
planning to copy some some some of the

00:28:44,960 --> 00:28:50,559
things we've discussed here

00:28:46,960 --> 00:28:50,559
and feel free to add things there as

00:28:56,840 --> 00:28:59,840
well

00:29:08,240 --> 00:29:13,840
yeah we have the link

00:29:25,760 --> 00:29:27,840
you

00:29:45,520 --> 00:29:51,120
any more questions i wonder

00:29:49,200 --> 00:29:52,720
how many people here are already

00:29:51,120 --> 00:29:54,799
familiar with kernel ci

00:29:52,720 --> 00:29:57,679
whether you've whether you read email

00:29:54,799 --> 00:30:00,240
reports free regularly

00:29:57,679 --> 00:30:02,880
oh i have a question is it also possible

00:30:00,240 --> 00:30:05,760
to use lab grid for hardware testing yes

00:30:02,880 --> 00:30:05,760
it's possible

00:30:06,720 --> 00:30:10,399
i don't think any anybody is using lab

00:30:09,760 --> 00:30:12,159
grid

00:30:10,399 --> 00:30:13,760
for kernel ci right now but it's a

00:30:12,159 --> 00:30:18,080
discussion i've had uh

00:30:13,760 --> 00:30:20,640
with a few people before and uh

00:30:18,080 --> 00:30:23,840
yes so you know what i explained a few

00:30:20,640 --> 00:30:23,840
minutes ago about

00:30:24,000 --> 00:30:27,120
detecting when there's a new kernel ci

00:30:26,080 --> 00:30:28,640
bill available

00:30:27,120 --> 00:30:30,159
and downloading it and running your

00:30:28,640 --> 00:30:31,919
tests you could be doing that

00:30:30,159 --> 00:30:34,080
with upgrade so as long as you know when

00:30:31,919 --> 00:30:35,760
the build is available

00:30:34,080 --> 00:30:38,640
then you feed that into your lab grid

00:30:35,760 --> 00:30:42,640
system and then it produces some results

00:30:38,640 --> 00:30:45,520
and you need to have some way of um

00:30:42,640 --> 00:30:46,399
forwarding these results with the kci

00:30:45,520 --> 00:30:50,159
data tool

00:30:46,399 --> 00:30:51,060
to them to kernel ci

00:30:50,159 --> 00:30:54,000
you can also

00:30:51,060 --> 00:30:57,360
[Music]

00:30:54,000 --> 00:30:57,840
you can also set up your complete own ci

00:30:57,360 --> 00:31:00,399
system

00:30:57,840 --> 00:31:02,000
like make your own builds from the the

00:31:00,399 --> 00:31:04,080
kernel versions you care about and

00:31:02,000 --> 00:31:06,080
submit the results to the common

00:31:04,080 --> 00:31:07,200
database if you want to be more

00:31:06,080 --> 00:31:08,640
autonomous

00:31:07,200 --> 00:31:12,399
that's another way of doing it so it

00:31:08,640 --> 00:31:12,399
depends how integrated you want to be

00:31:15,200 --> 00:31:21,360
so yeah the glue is basically

00:31:18,720 --> 00:31:23,120
so like i said there's two ways the the

00:31:21,360 --> 00:31:25,039
more integrated way like if you want to

00:31:23,120 --> 00:31:26,720
be like a lava lab you need to detect

00:31:25,039 --> 00:31:28,000
when the build is available when there's

00:31:26,720 --> 00:31:30,720
a new binary

00:31:28,000 --> 00:31:32,480
and you feed that into your system and

00:31:30,720 --> 00:31:33,679
then you need to have a way to send the

00:31:32,480 --> 00:31:35,600
results

00:31:33,679 --> 00:31:36,880
there's already the tool in the api to

00:31:35,600 --> 00:31:39,200
send a result so

00:31:36,880 --> 00:31:40,080
as long as you have a handler whenever

00:31:39,200 --> 00:31:42,399
your test

00:31:40,080 --> 00:31:43,440
finishes then you can afford it if you

00:31:42,399 --> 00:31:45,519
want to be less

00:31:43,440 --> 00:31:47,760
integrated and not if you don't want to

00:31:45,519 --> 00:31:49,360
wait for kernel ci bills if you want to

00:31:47,760 --> 00:31:51,519
make your own bills

00:31:49,360 --> 00:31:52,960
at your own pace then you can do that

00:31:51,519 --> 00:31:57,200
and submit the results

00:31:52,960 --> 00:31:57,200
to the common reporting database to

00:31:58,840 --> 00:32:02,559
qcidb

00:32:00,080 --> 00:32:03,840
the kernel bills are not specific to uh

00:32:02,559 --> 00:32:07,519
to lab

00:32:03,840 --> 00:32:09,600
um of course on with arm you have a lot

00:32:07,519 --> 00:32:10,720
of dev configs that are tailored to one

00:32:09,600 --> 00:32:13,679
family like you have

00:32:10,720 --> 00:32:15,440
exynos dev config for exynos platforms

00:32:13,679 --> 00:32:17,279
but the the kernels are

00:32:15,440 --> 00:32:18,880
you know apart from these special cases

00:32:17,279 --> 00:32:21,760
the uh the kernels are really

00:32:18,880 --> 00:32:22,399
generic ones so if you build on 64 dev

00:32:21,760 --> 00:32:26,159
config

00:32:22,399 --> 00:32:26,720
that should work on any uh on 64

00:32:26,159 --> 00:32:29,679
platform

00:32:26,720 --> 00:32:32,399
supported in mainline linux and same

00:32:29,679 --> 00:32:35,279
thing for x86

00:32:32,399 --> 00:32:35,600
and with arm you have mel tv7 so these

00:32:35,279 --> 00:32:38,320
are

00:32:35,600 --> 00:32:39,840
the main ones we built if you look on

00:32:38,320 --> 00:32:43,440
the

00:32:39,840 --> 00:32:46,960
on the kernel ci website you can see

00:32:43,440 --> 00:32:46,960
easily that some

00:32:47,600 --> 00:32:51,440
with a single build sometimes you can

00:32:49,440 --> 00:32:54,159
have

00:32:51,440 --> 00:32:54,880
say like a non-64 build you can have

00:32:54,159 --> 00:32:57,840
really like

00:32:54,880 --> 00:32:57,840
hundreds of tests

00:33:00,320 --> 00:33:05,519
so i'm picking one here that's from

00:33:02,799 --> 00:33:05,519
amlogic

00:33:07,279 --> 00:33:11,679
so i just picked an m64 build here so

00:33:09,760 --> 00:33:13,600
you can see the details of the build

00:33:11,679 --> 00:33:16,559
and also there's a table at the bottom

00:33:13,600 --> 00:33:18,799
with all the tests that were run

00:33:16,559 --> 00:33:20,480
um so you can see it was ran on a well

00:33:18,799 --> 00:33:21,600
there's a bunch of cameo but it was run

00:33:20,480 --> 00:33:23,980
on raspberry pi

00:33:21,600 --> 00:33:25,200
and a couple of chromebooks and

00:33:23,980 --> 00:33:28,559
[Music]

00:33:25,200 --> 00:33:31,919
a pine h64 platform as well

00:33:28,559 --> 00:33:33,120
um and uh rockchip platform so these are

00:33:31,919 --> 00:33:35,039
all completely different

00:33:33,120 --> 00:33:36,399
kinds of hardware but they're all on 64

00:33:35,039 --> 00:33:37,279
and they're all supported in mainline

00:33:36,399 --> 00:33:39,679
and they'll work

00:33:37,279 --> 00:33:40,480
with the same dev config they have a

00:33:39,679 --> 00:33:42,399
different

00:33:40,480 --> 00:33:52,640
device tree but that's coming from the

00:33:42,399 --> 00:33:56,240
same build

00:33:52,640 --> 00:33:56,240
oh i see sorry i was typing

00:34:04,840 --> 00:34:07,840
okay

00:34:08,000 --> 00:34:14,800
and like actually i think that is uh one

00:34:12,159 --> 00:34:16,639
um particularity of kernel ci because

00:34:14,800 --> 00:34:20,159
it's really just building

00:34:16,639 --> 00:34:22,800
upstream kernel it it's trying to be

00:34:20,159 --> 00:34:23,440
as generic as possible whereas when you

00:34:22,800 --> 00:34:26,639
have

00:34:23,440 --> 00:34:30,560
uh ci systems that test products

00:34:26,639 --> 00:34:32,639
then it will be uh building a very spec

00:34:30,560 --> 00:34:34,399
very specific dev config that's tailored

00:34:32,639 --> 00:34:36,079
for the product to have just the things

00:34:34,399 --> 00:34:38,159
that are needed to optimize it for

00:34:36,079 --> 00:34:40,720
for the product to optimize it in size

00:34:38,159 --> 00:34:40,720
and everything

00:34:40,800 --> 00:34:44,320
and it's useful to gather these results

00:34:42,560 --> 00:34:46,320
as well because

00:34:44,320 --> 00:34:47,839
if you combine all that all the products

00:34:46,320 --> 00:34:48,399
being tested all the distro has been

00:34:47,839 --> 00:34:51,440
tested

00:34:48,399 --> 00:34:53,200
or you know every use case every

00:34:51,440 --> 00:34:55,280
slightly more vertical integration or

00:34:53,200 --> 00:34:56,800
even complete vertical integration

00:34:55,280 --> 00:34:58,480
if you combine all these together you

00:34:56,800 --> 00:35:02,960
have a huge covering

00:34:58,480 --> 00:35:06,160
a huge test coverage

00:35:02,960 --> 00:35:09,680
because the uh the arm 64 def config

00:35:06,160 --> 00:35:13,680
is not all uh not config it's not

00:35:09,680 --> 00:35:16,079
only s config it's just the default one

00:35:13,680 --> 00:35:17,680
which you know on some platforms it

00:35:16,079 --> 00:35:18,560
boots and you have a login prompt but

00:35:17,680 --> 00:35:20,720
maybe

00:35:18,560 --> 00:35:22,720
maybe a gpu driver will not be turned on

00:35:20,720 --> 00:35:23,359
or maybe uh some other feature will not

00:35:22,720 --> 00:35:25,280
be

00:35:23,359 --> 00:35:26,640
enabled and then you don't execute all

00:35:25,280 --> 00:35:28,160
the code paths

00:35:26,640 --> 00:35:29,839
and trying to be able for all these

00:35:28,160 --> 00:35:33,040
things is is difficult and

00:35:29,839 --> 00:35:34,880
there's uh some other projects uh

00:35:33,040 --> 00:35:36,160
trying to do that we're working with as

00:35:34,880 --> 00:35:38,320
well but it's

00:35:36,160 --> 00:35:39,760
you know the project that the links

00:35:38,320 --> 00:35:41,440
kernel is a big project

00:35:39,760 --> 00:35:44,560
and testing it is also a big project we

00:35:41,440 --> 00:35:46,320
need to come up with a way of doing it

00:35:44,560 --> 00:35:48,240
that matches the complexity of the

00:35:46,320 --> 00:35:51,440
kernel and that can only be done

00:35:48,240 --> 00:35:53,760
by having uh the same number of people

00:35:51,440 --> 00:35:55,599
who work on the kernel as the number of

00:35:53,760 --> 00:35:58,000
people who test the kernel

00:35:55,599 --> 00:35:58,720
so for like there's a main mainline

00:35:58,000 --> 00:36:01,119
kernel we

00:35:58,720 --> 00:36:02,400
we have the native test for testing it

00:36:01,119 --> 00:36:05,280
in kernel ci

00:36:02,400 --> 00:36:07,119
and if you're a product of product um an

00:36:05,280 --> 00:36:09,040
oem you make your own products you have

00:36:07,119 --> 00:36:10,640
your test system for your product

00:36:09,040 --> 00:36:12,720
and you can contribute the result to

00:36:10,640 --> 00:36:15,760
kernel ci and that that's the way it

00:36:12,720 --> 00:36:15,760
scales basically

00:36:23,520 --> 00:36:27,760
okay thank you i don't know how much

00:36:26,720 --> 00:36:32,400
time i have left

00:36:27,760 --> 00:36:32,400
like 10 minutes left i think yeah

00:36:34,880 --> 00:36:38,160
how long are the kennel cli test image

00:36:37,200 --> 00:36:41,440
artifacts

00:36:38,160 --> 00:36:42,800
kept for and yeah

00:36:41,440 --> 00:36:46,160
sorry i've missed another question

00:36:42,800 --> 00:36:46,160
before yeah so

00:36:46,400 --> 00:36:52,160
yeah um the

00:36:49,839 --> 00:36:53,200
the bills are the bill results are

00:36:52,160 --> 00:36:58,560
currently

00:36:53,200 --> 00:37:01,680
kept for i think four weeks

00:36:58,560 --> 00:37:03,119
um we could leave it for longer if we

00:37:01,680 --> 00:37:03,760
had more storage that's one thing we

00:37:03,119 --> 00:37:05,920
could do

00:37:03,760 --> 00:37:08,160
but in practice it hasn't really been

00:37:05,920 --> 00:37:09,520
very useful to keep them for more than

00:37:08,160 --> 00:37:12,079
that because

00:37:09,520 --> 00:37:13,119
normally if there's a problem a bug that

00:37:12,079 --> 00:37:16,320
people want to

00:37:13,119 --> 00:37:18,000
fix um having versions older than four

00:37:16,320 --> 00:37:19,760
weeks would mean it's a bug that's been

00:37:18,000 --> 00:37:21,520
there for more than four weeks and then

00:37:19,760 --> 00:37:23,119
you can just rebuild all the kernels if

00:37:21,520 --> 00:37:26,400
you need something

00:37:23,119 --> 00:37:27,359
more ancient uh however there but the

00:37:26,400 --> 00:37:28,960
test results

00:37:27,359 --> 00:37:31,200
the metadata everything that's in the

00:37:28,960 --> 00:37:32,320
database we're not erasing it at all

00:37:31,200 --> 00:37:34,560
right now

00:37:32,320 --> 00:37:36,000
we might have to archive some of it or

00:37:34,560 --> 00:37:37,760
do something else for performance

00:37:36,000 --> 00:37:40,160
reasons but we're not planning to delete

00:37:37,760 --> 00:37:44,000
that so all the test results

00:37:40,160 --> 00:37:47,040
to know you know know when builds fails

00:37:44,000 --> 00:37:49,440
all the warnings and the build logs uh

00:37:47,040 --> 00:37:50,079
build logs might get discarded but at

00:37:49,440 --> 00:37:52,160
least you know

00:37:50,079 --> 00:37:54,000
the warnings that were there and all the

00:37:52,160 --> 00:37:55,839
test results which test passed and

00:37:54,000 --> 00:37:59,359
failed and regressions

00:37:55,839 --> 00:38:00,400
everything like that um is kept in there

00:37:59,359 --> 00:38:02,960
in the database

00:38:00,400 --> 00:38:03,760
forever as long as we can but normally

00:38:02,960 --> 00:38:06,880
you know

00:38:03,760 --> 00:38:06,880
we can keep that forever

00:38:07,359 --> 00:38:11,040
what are the benefits for project

00:38:08,800 --> 00:38:14,240
members yeah i've put this on one

00:38:11,040 --> 00:38:17,280
slide um i think the main

00:38:14,240 --> 00:38:21,200
uh the main benefit

00:38:17,280 --> 00:38:24,560
from a linux foundation project member

00:38:21,200 --> 00:38:27,680
is that it's um it's a way

00:38:24,560 --> 00:38:28,640
for it's a way to concentrate the

00:38:27,680 --> 00:38:32,960
efforts

00:38:28,640 --> 00:38:35,119
uh and get the best chances of having um

00:38:32,960 --> 00:38:37,839
a central system to improve the quality

00:38:35,119 --> 00:38:43,200
of daily of the upstream linux kernel

00:38:37,839 --> 00:38:43,200
so um it's it's

00:38:43,359 --> 00:38:47,119
you know like if every member have their

00:38:45,359 --> 00:38:47,839
own test system and they try to work

00:38:47,119 --> 00:38:49,839
together

00:38:47,839 --> 00:38:51,040
kernel ci provides a framework around

00:38:49,839 --> 00:38:54,400
that

00:38:51,040 --> 00:38:57,599
and we provide infrastructure and we

00:38:54,400 --> 00:38:58,880
provide a coordination for it so i think

00:38:57,599 --> 00:39:01,599
that's the best incentive

00:38:58,880 --> 00:39:03,200
if you're not a member you can also

00:39:01,599 --> 00:39:03,920
contribute you can send your own test

00:39:03,200 --> 00:39:05,440
results

00:39:03,920 --> 00:39:07,119
you can discuss you take part in

00:39:05,440 --> 00:39:09,599
discussions you can contribute to the

00:39:07,119 --> 00:39:12,880
code you can do a lot of things

00:39:09,599 --> 00:39:15,520
but of course we need resources like

00:39:12,880 --> 00:39:16,720
servers who need um we need some budget

00:39:15,520 --> 00:39:19,920
as well

00:39:16,720 --> 00:39:22,560
um to uh

00:39:19,920 --> 00:39:24,000
not many things we that well so far we

00:39:22,560 --> 00:39:25,839
haven't spent too much money

00:39:24,000 --> 00:39:27,680
to be fair but it's because we've just

00:39:25,839 --> 00:39:29,760
started

00:39:27,680 --> 00:39:31,359
but this is you know some things come

00:39:29,760 --> 00:39:34,160
with a cost um

00:39:31,359 --> 00:39:35,760
so if we don't have services if we don't

00:39:34,160 --> 00:39:37,440
have like you know for example servers

00:39:35,760 --> 00:39:39,119
if they were not provided to us directly

00:39:37,440 --> 00:39:42,079
by members we would need to pay for them

00:39:39,119 --> 00:39:42,640
so having a budget for it is also a

00:39:42,079 --> 00:39:46,160
solution

00:39:42,640 --> 00:39:49,680
that's just a very basic example

00:39:46,160 --> 00:39:51,440
um so having members benefits the

00:39:49,680 --> 00:39:52,320
project and by benefiting the project

00:39:51,440 --> 00:39:56,400
you get

00:39:52,320 --> 00:39:58,640
normally you get improved quality of the

00:39:56,400 --> 00:40:00,400
upstream kernel if you rely on the

00:39:58,640 --> 00:40:02,400
upstream kernel for your own

00:40:00,400 --> 00:40:03,599
products then it means you have less

00:40:02,400 --> 00:40:10,640
things to worry about

00:40:03,599 --> 00:40:12,400
downstream and that's that's the big one

00:40:10,640 --> 00:40:13,680
so all the tests you're doing on your

00:40:12,400 --> 00:40:17,200
downstream kernel

00:40:13,680 --> 00:40:20,319
if you have them running in kernel ci

00:40:17,200 --> 00:40:22,640
or if you test stable or

00:40:20,319 --> 00:40:24,640
mainline and you submit your results

00:40:22,640 --> 00:40:27,440
then it will be reported

00:40:24,640 --> 00:40:28,240
to the community and get fixed so you

00:40:27,440 --> 00:40:32,640
don't have

00:40:28,240 --> 00:40:32,640
to to deal with so many issues

00:40:36,839 --> 00:40:53,119
downstream

00:40:38,319 --> 00:40:54,960
i hope that was clear enough

00:40:53,119 --> 00:40:56,160
okay i'll copy a few more things to the

00:40:54,960 --> 00:40:59,440
document

00:40:56,160 --> 00:41:01,760
and uh if you think of uh question

00:40:59,440 --> 00:41:02,880
after this session you can always edit

00:41:01,760 --> 00:41:04,560
there actually

00:41:02,880 --> 00:41:07,520
it's uh it's more of a like

00:41:04,560 --> 00:41:10,800
brainstorming document

00:41:07,520 --> 00:41:11,680
and uh maybe we'll make a blog post on

00:41:10,800 --> 00:41:14,800
the kernel ci

00:41:11,680 --> 00:41:17,040
website with it at the end or at least a

00:41:14,800 --> 00:41:17,040
few

00:41:18,839 --> 00:41:21,839
highlights

00:41:52,160 --> 00:41:56,480
yeah thanks i'll read read out geeze and

00:41:55,359 --> 00:42:01,040
search just in case

00:41:56,480 --> 00:42:02,800
um in case it's not recorded

00:42:01,040 --> 00:42:04,960
the project's ability to deal with all

00:42:02,800 --> 00:42:06,560
the data being collected and making sure

00:42:04,960 --> 00:42:08,319
it's enabling and supporting

00:42:06,560 --> 00:42:10,640
subsystem maintainers really depends on

00:42:08,319 --> 00:42:13,839
more member companies joining

00:42:10,640 --> 00:42:16,400
uh this is a slide in my slide deck with

00:42:13,839 --> 00:42:18,319
the members we have now um we don't have

00:42:16,400 --> 00:42:21,599
that many this we're still

00:42:18,319 --> 00:42:23,839
we still only have the founding members

00:42:21,599 --> 00:42:25,760
uh which is great but yeah of course we

00:42:23,839 --> 00:42:28,079
there's a lot more people around in

00:42:25,760 --> 00:42:30,640
a lot more companies and organizations

00:42:28,079 --> 00:42:32,240
in the economical system

00:42:30,640 --> 00:42:34,720
the project would love to be able to

00:42:32,240 --> 00:42:36,800
invest into its big data

00:42:34,720 --> 00:42:38,880
and he also says improving the web ui is

00:42:36,800 --> 00:42:43,119
a project that is being explored

00:42:38,880 --> 00:42:43,119
someone mentioned some ways to search

00:42:43,359 --> 00:42:47,200
having gone away yeah so that's how to

00:42:45,760 --> 00:42:51,280
improve search on a web

00:42:47,200 --> 00:42:54,880
front-end and also of course

00:42:51,280 --> 00:42:56,880
improve mailing lists uh everything

00:42:54,880 --> 00:42:58,319
well improve email reports you improve

00:42:56,880 --> 00:43:00,160
the way people uh

00:42:58,319 --> 00:43:01,680
improve improve users experience

00:43:00,160 --> 00:43:04,400
basically

00:43:01,680 --> 00:43:06,560
uh uh are there any risks five hardware

00:43:04,400 --> 00:43:09,680
in canals yes yes we have

00:43:06,560 --> 00:43:10,839
uh let's see we have bailey have uh one

00:43:09,680 --> 00:43:14,720
board

00:43:10,839 --> 00:43:17,760
uh now we've been building

00:43:14,720 --> 00:43:27,839
for risk 5 for a while so

00:43:17,760 --> 00:43:27,839
let me get results from next

00:43:28,800 --> 00:43:34,960
the the basic test in kernel ci is

00:43:32,319 --> 00:43:36,880
called baseline

00:43:34,960 --> 00:43:38,720
so it's a bit like a boot test but it

00:43:36,880 --> 00:43:40,960
does some checks to see whether the

00:43:38,720 --> 00:43:42,880
kernel had any error and stuff like that

00:43:40,960 --> 00:43:46,000
so we have i've put a link to some

00:43:42,880 --> 00:43:46,000
baseline results

00:43:46,880 --> 00:43:57,200
and oh there is five bond is not there

00:43:54,240 --> 00:43:59,200
maybe the bill was broken in that next

00:43:57,200 --> 00:44:03,040
revision but yes basically

00:43:59,200 --> 00:44:06,560
um it's possible to search it

00:44:03,040 --> 00:44:10,960
uh via the soc

00:44:06,560 --> 00:44:10,960
tab so yeah we have sci-5

00:44:13,280 --> 00:44:17,359
okay and it was tested

00:44:17,680 --> 00:44:26,319
in mainline

00:44:22,319 --> 00:44:26,319
yeah we have high five unleashed here

00:44:27,599 --> 00:44:32,800
and i think it's not booting and there's

00:44:30,079 --> 00:44:32,800
some hardware

00:44:33,040 --> 00:44:38,160
so if you know how to fix risk 5 maybe

00:44:35,760 --> 00:44:40,160
you can take a look

00:44:38,160 --> 00:44:41,680
so that last link i've put there's you

00:44:40,160 --> 00:44:44,960
can have a full

00:44:41,680 --> 00:44:44,960
log in html

00:44:45,200 --> 00:44:48,319
oh it's not booting at all but it used

00:44:46,960 --> 00:44:50,240
to boot i'm pretty sure that

00:44:48,319 --> 00:44:51,359
i'm not following every day what's going

00:44:50,240 --> 00:44:54,720
on in that but

00:44:51,359 --> 00:44:56,880
yes the quick answer is yes days risk

00:44:54,720 --> 00:44:58,400
five hardware

00:44:56,880 --> 00:45:00,079
and if you have some risk five hardware

00:44:58,400 --> 00:45:01,599
you can uh

00:45:00,079 --> 00:45:02,880
you know if you have a test lab or if

00:45:01,599 --> 00:45:04,000
you don't have a test lab you can create

00:45:02,880 --> 00:45:06,720
a test lab and connect

00:45:04,000 --> 00:45:08,000
it to kernel ci and then all these

00:45:06,720 --> 00:45:11,119
kernel bills could be

00:45:08,000 --> 00:45:12,880
run on your on your board

00:45:11,119 --> 00:45:15,520
and we could run all the tests on it

00:45:12,880 --> 00:45:19,839
like suspend and resume

00:45:15,520 --> 00:45:19,839
maybe if we want to do

00:45:21,839 --> 00:45:27,359
ltp and cancel tests are being added

00:45:24,960 --> 00:45:27,359
right now

00:45:28,720 --> 00:45:33,839
that kevin says it's offline right now

00:45:30,480 --> 00:45:33,839
so okay

00:45:34,560 --> 00:45:38,640
and he should be back shortly

00:45:35,920 --> 00:45:38,640
thanksgiving

00:45:44,160 --> 00:45:48,400
looks like he has found something here

00:45:51,040 --> 00:45:54,640
yeah he has found a passing job

00:45:57,599 --> 00:46:02,480
of course table is more likely to work i

00:45:59,920 --> 00:46:04,620
wasn't sure whether

00:46:02,480 --> 00:46:05,920
support for risk 5 was all

00:46:04,620 --> 00:46:15,839
[Music]

00:46:05,920 --> 00:46:15,839
merged in stable

00:46:40,839 --> 00:46:45,520
okay

00:46:42,720 --> 00:46:46,000
oh i thought there was a link on um on a

00:46:45,520 --> 00:46:48,560
web

00:46:46,000 --> 00:46:49,839
website okay we need to improve that uh

00:46:48,560 --> 00:46:53,280
let me show you

00:46:49,839 --> 00:46:54,400
the slides so the quick inside yeah you

00:46:53,280 --> 00:46:59,040
have

00:46:54,400 --> 00:46:59,040
kernel ci at groups dot io

00:47:02,960 --> 00:47:06,480
okay and then we have put a slide

00:47:05,200 --> 00:47:11,839
together with uh

00:47:06,480 --> 00:47:11,839
some information like that

00:47:20,079 --> 00:47:28,319
whoa why is it slow now okay

00:47:25,119 --> 00:47:31,599
uh yeah there's a rc channel

00:47:28,319 --> 00:47:34,480
kernel ci in one word

00:47:31,599 --> 00:47:34,480
on free node

00:47:36,720 --> 00:47:43,599
there's uh another more

00:47:39,839 --> 00:47:47,200
uh general uh mailing list

00:47:43,599 --> 00:47:50,839
as well um i don't remember the email

00:47:47,200 --> 00:47:54,079
tim bird might know there's another um

00:47:50,839 --> 00:47:56,559
yeah there's another email um that's

00:47:54,079 --> 00:47:57,680
used for all the testing systems around

00:47:56,559 --> 00:48:00,480
the linux kernel

00:47:57,680 --> 00:48:01,119
so this one kernel ci group.io is really

00:48:00,480 --> 00:48:04,000
just about

00:48:01,119 --> 00:48:05,440
this project and if you're interested in

00:48:04,000 --> 00:48:08,559
interested in

00:48:05,440 --> 00:48:11,040
or in testing upstream kernel in

00:48:08,559 --> 00:48:14,800
a wider way and then there's another one

00:48:11,040 --> 00:48:14,800
which i don't remember right now

00:48:15,119 --> 00:48:25,040
i can try to find it

00:48:21,280 --> 00:48:25,040
here's the automated testing

00:48:32,000 --> 00:48:36,960
yeah it's a yocto project mailing list

00:48:34,160 --> 00:48:40,240
but it's really not specific to your

00:48:36,960 --> 00:48:49,839
that's more like um all encompassing

00:48:40,240 --> 00:48:49,839
upstream kernel test mailing lists

00:49:05,440 --> 00:49:09,680
so thanks keith i'll read this out as

00:49:07,359 --> 00:49:11,920
well uh if you work for a company that

00:49:09,680 --> 00:49:13,839
should be a kernel ci member

00:49:11,920 --> 00:49:16,000
uh please reach out internally the

00:49:13,839 --> 00:49:17,680
project could really benefit in 2021

00:49:16,000 --> 00:49:20,079
for more member companies to achieve its

00:49:17,680 --> 00:49:23,839
mission and objectives

00:49:20,079 --> 00:49:31,839
and that's something you can see on the

00:49:23,839 --> 00:49:31,839
on the main website

00:49:48,160 --> 00:49:51,920
okay i think we're done now so i don't

00:49:50,880 --> 00:49:54,880
know when this is

00:49:51,920 --> 00:49:55,599
going to disconnect um but again if you

00:49:54,880 --> 00:49:56,880
have any questions

00:49:55,599 --> 00:49:58,800
you can reach out with all the things

00:49:56,880 --> 00:50:01,680
we've mentioned yeah

00:49:58,800 --> 00:50:02,720
okay so thank you very much everybody

00:50:01,680 --> 00:50:09,359
for being here

00:50:02,720 --> 00:50:09,359

YouTube URL: https://www.youtube.com/watch?v=pTijHw729z8


