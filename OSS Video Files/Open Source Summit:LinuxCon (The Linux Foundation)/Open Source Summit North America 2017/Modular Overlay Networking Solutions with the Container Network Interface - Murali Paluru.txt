Title: Modular Overlay Networking Solutions with the Container Network Interface - Murali Paluru
Publication date: 2017-09-14
Playlist: Open Source Summit North America 2017
Description: 
	Modular Overlay Networking Solutions with the Container Network Interface - Murali Paluru, Rancher Labs, Inc.

The Container Network Interface (CNI) is becoming the de facto standard for implementing plugins for container runtimes, and is used by Mesos, Kubernetes, and Cloud Foundry. The same CNI standard makes it possible to implement networking as a modular component of your environment, enabling teams to swap in the best networking solution based on the infrastructure used. This talk will walk through the process of building and implementing modular networking solutions, designed to swapped out based on use case. Weâ€™ll conclude with a demo of the solutions built, and include important takeaways for determining which overlay networking solutions are best suited for certain use cases.

About Murali Paluru
Murali Paluru is a Principal Software Engineer at Rancher Labs. His most recent works include implementing network policy to secure communications between containers, implementation of VXLAN CNI plugin for different container orchestration engines like Rancher, Kubernetes, refactoring various networking microservices at Rancher. A couple of months back he gave two talks at the Scale 15x Conference held in Los Angeles, CA, USA.

Github: https://github.com/leodotcloud
Twitter: https://twitter.com/leodotcloud
Captions: 
	00:00:00,120 --> 00:00:17,359
sparked some bugs here this must be very

00:00:05,899 --> 00:00:25,830
networking folks out in the room okay

00:00:17,359 --> 00:00:33,600
sorry okay that's good one yes that's

00:00:25,830 --> 00:00:36,170
one there are few more yeah can you

00:00:33,600 --> 00:00:49,649
repeat that for me

00:00:36,170 --> 00:01:00,719
yes that's the wrong correct so what was

00:00:49,649 --> 00:01:02,520
your point here right it's it's it's a

00:01:00,719 --> 00:01:05,400
broadcast ever so you cannot use a

00:01:02,520 --> 00:01:09,390
broadcast address for a host and here

00:01:05,400 --> 00:01:12,360
you have a two five seven okay so here

00:01:09,390 --> 00:01:15,030
are the answers see subnet you got some

00:01:12,360 --> 00:01:16,590
duplicates and the other one which is

00:01:15,030 --> 00:01:20,759
pointed out correctly is there is an

00:01:16,590 --> 00:01:22,920
incorrect subnet up here and you not use

00:01:20,759 --> 00:01:25,880
the network address and use the

00:01:22,920 --> 00:01:31,320
broadcast address so those are some of

00:01:25,880 --> 00:01:34,409
well available on the OS SNA website

00:01:31,320 --> 00:01:36,990
also if you want the slides in the

00:01:34,409 --> 00:01:39,810
original format this is the link so here

00:01:36,990 --> 00:01:42,390
is my here is that in DES I will start

00:01:39,810 --> 00:01:45,090
with some introduction how the container

00:01:42,390 --> 00:01:47,399
network networking evolved over the time

00:01:45,090 --> 00:01:51,390
you know what is the history of CNI and

00:01:47,399 --> 00:01:54,110
you know go over the CNI how how it

00:01:51,390 --> 00:01:54,110
works and what is

00:01:55,510 --> 00:02:02,390
and then let's walk through the CNI spec

00:01:59,770 --> 00:02:05,330
you know what are the options available

00:02:02,390 --> 00:02:07,160
from the CNI repositories you know we

00:02:05,330 --> 00:02:09,470
have an SDK and what are the CM

00:02:07,160 --> 00:02:11,270
reference for CNI plugins available and

00:02:09,470 --> 00:02:13,840
then you know let's try to build a

00:02:11,270 --> 00:02:16,160
simple CNI runtime and a CNI plugin and

00:02:13,840 --> 00:02:18,050
if you have any questions you don't have

00:02:16,160 --> 00:02:20,480
to wait till the end please feel free to

00:02:18,050 --> 00:02:23,209
interrupt so with that let me introduce

00:02:20,480 --> 00:02:26,090
myself so I am early pal ro I have been

00:02:23,209 --> 00:02:27,709
working with Rancher for the past one

00:02:26,090 --> 00:02:29,650
and a half year as a principal software

00:02:27,709 --> 00:02:32,720
engineer I call myself

00:02:29,650 --> 00:02:34,670
Plummer because I take care of building

00:02:32,720 --> 00:02:37,880
the pipes for the containers in our

00:02:34,670 --> 00:02:40,400
product so just the way Mario you know

00:02:37,880 --> 00:02:42,140
goes inside one end of the pipe and then

00:02:40,400 --> 00:02:44,180
he shows up magically on the other end

00:02:42,140 --> 00:02:47,060
of the pipe I make sure the data is sent

00:02:44,180 --> 00:02:50,180
by one container goes through the pipe

00:02:47,060 --> 00:02:52,070
safely and reaches the exact destination

00:02:50,180 --> 00:02:55,760
where it is supposed to reach so that's

00:02:52,070 --> 00:03:00,200
what I do a rancher I haven't done in

00:02:55,760 --> 00:03:02,769
the past a few months is I filled CNI

00:03:00,200 --> 00:03:05,390
plugin set Rancher I've build IPSec

00:03:02,769 --> 00:03:07,160
overlay plug-in build we explain fog

00:03:05,390 --> 00:03:09,410
lane I have implemented Network policies

00:03:07,160 --> 00:03:13,010
and before joining Rancher I was at

00:03:09,410 --> 00:03:14,830
Hickam Cisco and I worked at a failed

00:03:13,010 --> 00:03:17,510
stop

00:03:14,830 --> 00:03:25,070
if you want to reach out to me these are

00:03:17,510 --> 00:03:26,989
some contact informations ok

00:03:25,070 --> 00:03:33,019
so how did the container networking

00:03:26,989 --> 00:03:35,959
evolve so a computer was invented and

00:03:33,019 --> 00:03:37,459
the computers were able to that we had

00:03:35,959 --> 00:03:40,760
virtual machines and they were able to

00:03:37,459 --> 00:03:46,010
talk to each other and later the awesome

00:03:40,760 --> 00:03:47,810
containers were created and we have now

00:03:46,010 --> 00:03:52,670
containers running on a host

00:03:47,810 --> 00:03:55,850
so when docker first came up with a

00:03:52,670 --> 00:03:58,549
bunch of easy-to-use tools which made

00:03:55,850 --> 00:04:00,230
running containers very easy and you

00:03:58,549 --> 00:04:02,360
know it came up with lot of other good

00:04:00,230 --> 00:04:06,470
things like registry images blah blah

00:04:02,360 --> 00:04:09,290
blah you all know so here I wanted to

00:04:06,470 --> 00:04:11,810
talk about car networking works

00:04:09,290 --> 00:04:15,170
a single host so when docker starts it

00:04:11,810 --> 00:04:17,209
starts up adopter 0 bridge it assigns a

00:04:15,170 --> 00:04:18,109
cedar for all the containers on this

00:04:17,209 --> 00:04:22,160
horse

00:04:18,109 --> 00:04:27,169
you know the default is 172 7 in 0 0 16

00:04:22,160 --> 00:04:28,880
when you start you have weeds plugged

00:04:27,169 --> 00:04:30,800
into the bridge and the other end of the

00:04:28,880 --> 00:04:32,720
weed is plugged into the container and a

00:04:30,800 --> 00:04:36,289
nice IP address is assigned to the

00:04:32,720 --> 00:04:38,690
container so this way the containers can

00:04:36,289 --> 00:04:41,180
talk to each other on a single host so

00:04:38,690 --> 00:04:42,650
you know here one important question I

00:04:41,180 --> 00:04:44,539
want to highlight so that we can get

00:04:42,650 --> 00:04:46,070
back to this question is who is

00:04:44,539 --> 00:04:48,560
responsible for setting up networking

00:04:46,070 --> 00:04:52,160
here so when a container is started

00:04:48,560 --> 00:04:53,720
darker daemon is responsible here to set

00:04:52,160 --> 00:04:55,759
up the networking for the containers so

00:04:53,720 --> 00:04:57,349
it's responsible for figuring figuring

00:04:55,759 --> 00:05:00,050
out what is IP address for this

00:04:57,349 --> 00:05:01,729
container and you know programming it

00:05:00,050 --> 00:05:05,630
correctly and taking care of all the

00:05:01,729 --> 00:05:07,580
other stuff so if I have to explain this

00:05:05,630 --> 00:05:08,930
docker networking in a little easier way

00:05:07,580 --> 00:05:11,810
you know what we can do is we can give

00:05:08,930 --> 00:05:13,639
acronyms to the IP addresses you know

00:05:11,810 --> 00:05:17,240
that's what humans are good at trying to

00:05:13,639 --> 00:05:21,409
you know not work with numbers so let's

00:05:17,240 --> 00:05:24,229
say we call Amy Bob or Deb Ellie for the

00:05:21,409 --> 00:05:26,270
different container IDs so here you know

00:05:24,229 --> 00:05:28,460
Bob can talk to Deb he can just say hey

00:05:26,270 --> 00:05:29,960
Deb I have some data for you I have some

00:05:28,460 --> 00:05:33,260
message for you here you go you can just

00:05:29,960 --> 00:05:35,389
pass it on now what happens if we add

00:05:33,260 --> 00:05:39,039
more servers or you know you can throw

00:05:35,389 --> 00:05:42,139
in more nodes into the picture so the

00:05:39,039 --> 00:05:45,560
darker settings when you start up is it

00:05:42,139 --> 00:05:49,340
starts with the same cedar and all the

00:05:45,560 --> 00:05:50,570
containers here they get the same they

00:05:49,340 --> 00:05:53,120
get the IP addresses from the same

00:05:50,570 --> 00:05:56,060
subnet so what's happening so you have

00:05:53,120 --> 00:05:58,070
Bob you have Deb on both the source so

00:05:56,060 --> 00:06:00,889
if you have more host you know there are

00:05:58,070 --> 00:06:04,159
lot more Bob's so if Bob wants to talk

00:06:00,889 --> 00:06:06,130
to Deb what happens you know it's a

00:06:04,159 --> 00:06:11,240
complete chaos its total confusion which

00:06:06,130 --> 00:06:12,680
you know Deb I'm talking to so there's a

00:06:11,240 --> 00:06:16,370
problem you know when you have lot of

00:06:12,680 --> 00:06:18,289
containers and a lot of servers in the

00:06:16,370 --> 00:06:19,159
picture you have a big cluster soaking

00:06:18,289 --> 00:06:21,739
containers

00:06:19,159 --> 00:06:23,330
so we have a problem a lot of people you

00:06:21,739 --> 00:06:26,539
know jumped in and try to solve this

00:06:23,330 --> 00:06:28,699
problem so one of the solutions a lot of

00:06:26,539 --> 00:06:30,919
people used was they use something

00:06:28,699 --> 00:06:34,399
called as publish ports so with that

00:06:30,919 --> 00:06:37,429
what happened you use the IP address of

00:06:34,399 --> 00:06:39,860
the server of the node and you assign

00:06:37,429 --> 00:06:41,779
one port of it and you map it to the

00:06:39,860 --> 00:06:45,409
service running into your container so

00:06:41,779 --> 00:06:48,739
this way the containers on a different

00:06:45,409 --> 00:06:51,289
host can talk to the other container

00:06:48,739 --> 00:06:58,219
using the hosts IP address now to make

00:06:51,289 --> 00:07:00,019
it a little easier you know the first

00:06:58,219 --> 00:07:02,059
host let's call it you know building

00:07:00,019 --> 00:07:05,629
alpha the second host call it building

00:07:02,059 --> 00:07:08,569
Brower so now if Bob wants to talk to

00:07:05,629 --> 00:07:11,869
somebody else he will use a new paradigm

00:07:08,569 --> 00:07:14,749
now he'll say hey I'm calling from the

00:07:11,869 --> 00:07:17,839
first floor of building one and I want

00:07:14,749 --> 00:07:19,519
to talk to the person off in the second

00:07:17,839 --> 00:07:19,939
floor of the building do something like

00:07:19,519 --> 00:07:22,429
that

00:07:19,939 --> 00:07:24,889
so now containers able to talk so this

00:07:22,429 --> 00:07:27,019
is one of the solutions this is another

00:07:24,889 --> 00:07:29,419
solution which Rancher has used so what

00:07:27,019 --> 00:07:31,729
we did was you know we gave a secondary

00:07:29,419 --> 00:07:35,389
IP address for the containers so we

00:07:31,729 --> 00:07:38,269
picked a unique subnet for the entire

00:07:35,389 --> 00:07:40,519
cluster so let Dhaka do whatever it's

00:07:38,269 --> 00:07:43,129
doing currently but what we will do is

00:07:40,519 --> 00:07:44,629
we pick one subnet and we use it to

00:07:43,129 --> 00:07:46,939
assign IP addresses for all the

00:07:44,629 --> 00:07:50,419
containers across the different house so

00:07:46,939 --> 00:07:51,919
that way you have unique names so now

00:07:50,419 --> 00:07:53,990
when containers want to talk to other

00:07:51,919 --> 00:07:56,569
containers on a different host instead

00:07:53,990 --> 00:07:58,939
of using the darker names they use the

00:07:56,569 --> 00:08:00,889
new names that they have so it's like no

00:07:58,939 --> 00:08:03,559
you have wrong I want to talk to Mira

00:08:00,889 --> 00:08:06,949
you can use the new names so that is how

00:08:03,559 --> 00:08:09,709
we solve the problems and kubernetes

00:08:06,949 --> 00:08:13,579
took a different route so what they did

00:08:09,709 --> 00:08:16,369
is hey I don't want to start with the

00:08:13,579 --> 00:08:17,389
default darker settings let me have my

00:08:16,369 --> 00:08:19,789
own custom settings

00:08:17,389 --> 00:08:23,089
so what kubernetes does is it starts

00:08:19,789 --> 00:08:24,559
darker or in fact here it's not exactly

00:08:23,089 --> 00:08:26,689
doctors already uses a different bridge

00:08:24,559 --> 00:08:29,839
so it uses a different bridge and it

00:08:26,689 --> 00:08:33,169
assigns a unique subnet for every house

00:08:29,839 --> 00:08:36,019
so it's per host subnet so that way

00:08:33,169 --> 00:08:40,219
containers start by default they have a

00:08:36,019 --> 00:08:42,289
unique IP address so no you can come up

00:08:40,219 --> 00:08:43,729
with your own acronyms and the

00:08:42,289 --> 00:08:45,470
containers have unique names and they

00:08:43,729 --> 00:08:49,279
can talk to each other so like this a

00:08:45,470 --> 00:08:51,019
lot of companies lot of people people

00:08:49,279 --> 00:08:53,600
jumped in and tried to solve problems

00:08:51,019 --> 00:08:56,449
and they all wanted to provide this

00:08:53,600 --> 00:08:59,269
solution to everybody else

00:08:56,449 --> 00:09:01,699
so you know there there are there's a

00:08:59,269 --> 00:09:03,110
company called weave there is all came

00:09:01,699 --> 00:09:06,110
up with their own networking clients and

00:09:03,110 --> 00:09:08,120
there are other Sdn solutions also so

00:09:06,110 --> 00:09:09,079
they all wanted to plug into network so

00:09:08,120 --> 00:09:11,149
how do I do that

00:09:09,079 --> 00:09:13,220
so you know just the way you have

00:09:11,149 --> 00:09:15,139
different standards for your you know

00:09:13,220 --> 00:09:17,329
electrical outlets they were like a

00:09:15,139 --> 00:09:20,269
bunch of standards available in the

00:09:17,329 --> 00:09:22,970
industry so one of the standard was

00:09:20,269 --> 00:09:29,570
introduced by darker it's called Sienna

00:09:22,970 --> 00:09:31,310
so the way it you know was released was

00:09:29,570 --> 00:09:33,230
you know darker was trying to solve this

00:09:31,310 --> 00:09:36,079
problem they had they came across this

00:09:33,230 --> 00:09:38,360
company I believe a soccer plane and

00:09:36,079 --> 00:09:40,310
they had a networking solution and

00:09:38,360 --> 00:09:42,290
docker like them and they acquired them

00:09:40,310 --> 00:09:46,100
and integrated into that product so

00:09:42,290 --> 00:09:48,640
that's how they the darker guys came up

00:09:46,100 --> 00:09:51,470
with the CNM specification but then

00:09:48,640 --> 00:09:53,540
there was another company called Coronas

00:09:51,470 --> 00:09:56,180
they were building a different container

00:09:53,540 --> 00:09:59,649
runtime called rocket and those guys

00:09:56,180 --> 00:10:02,240
they saw there's a need to specify

00:09:59,649 --> 00:10:06,140
specification so that other runtimes can

00:10:02,240 --> 00:10:11,110
also work so they introduced CNI as part

00:10:06,140 --> 00:10:13,910
of their app see efforts so these are a

00:10:11,110 --> 00:10:16,670
high-level comparison between the two

00:10:13,910 --> 00:10:19,790
specifications so you have all the

00:10:16,670 --> 00:10:22,490
similar stuff working in both of these

00:10:19,790 --> 00:10:25,790
plugins so you all the companies they

00:10:22,490 --> 00:10:27,470
have implemented or they have you know

00:10:25,790 --> 00:10:29,750
made sure their plugins work with both

00:10:27,470 --> 00:10:33,290
these interfaces like da the calico

00:10:29,750 --> 00:10:35,120
plug-in works with CNM as well as CNI V

00:10:33,290 --> 00:10:37,100
works with their Cisco's products work

00:10:35,120 --> 00:10:39,019
and all the other companies products

00:10:37,100 --> 00:10:45,730
they work with both the specifications

00:10:39,019 --> 00:10:45,730
the other are the one of the important

00:10:45,769 --> 00:10:50,700
disadvantages or one of the subtle

00:10:47,880 --> 00:10:53,940
disadvantages of using CNI is you know a

00:10:50,700 --> 00:10:56,670
lot of people use darker inspect and the

00:10:53,940 --> 00:10:59,100
network settings section in the JSON

00:10:56,670 --> 00:11:01,079
output you won't be able to find out

00:10:59,100 --> 00:11:06,500
what is the container IP address so

00:11:01,079 --> 00:11:06,500
that's one of the problems of using CNI

00:11:07,279 --> 00:11:17,399
so sometime when kubernetes wanted to

00:11:14,399 --> 00:11:19,350
adopt one of the standards they were

00:11:17,399 --> 00:11:23,250
they looked at CNM and then they looked

00:11:19,350 --> 00:11:26,790
at CNI so after doing a lot of research

00:11:23,250 --> 00:11:29,550
what they have realized is CNM doesn't

00:11:26,790 --> 00:11:31,560
work for their model and they have

00:11:29,550 --> 00:11:34,649
blogged about their reasons for choosing

00:11:31,560 --> 00:11:37,410
CNI and it's a very popular blog so a

00:11:34,649 --> 00:11:41,040
couple of reasons that I can point out

00:11:37,410 --> 00:11:45,420
why kubernetes went with CNI but not C

00:11:41,040 --> 00:11:49,199
enemies CNM needs a Lib aqui we store a

00:11:45,420 --> 00:11:50,730
key value store and the docker had a

00:11:49,199 --> 00:11:53,730
certain way of doing things and

00:11:50,730 --> 00:11:56,850
kubernetes aldi was using at CD or

00:11:53,730 --> 00:12:00,019
console as their key value store

00:11:56,850 --> 00:12:03,300
back-end and if they wanted to run

00:12:00,019 --> 00:12:06,390
CNM plugins they had to either you know

00:12:03,300 --> 00:12:09,300
write a wrapper on top of the existing H

00:12:06,390 --> 00:12:11,579
CD store or you have to run a different

00:12:09,300 --> 00:12:14,220
instance of X CD which kubernetes didn't

00:12:11,579 --> 00:12:18,000
like so they went ahead with CNI because

00:12:14,220 --> 00:12:20,940
they felt CNI was much more simple and

00:12:18,000 --> 00:12:25,110
it fit their use case much better so

00:12:20,940 --> 00:12:28,860
that's that's how CN i got more popular

00:12:25,110 --> 00:12:32,579
and then lot of other networking project

00:12:28,860 --> 00:12:35,760
started adopting CNI and finally in May

00:12:32,579 --> 00:12:37,740
of this year CN CF cloud native of

00:12:35,760 --> 00:12:44,459
computing foundation adopted the CNI

00:12:37,740 --> 00:12:49,140
project let's go through the high-level

00:12:44,459 --> 00:12:51,660
overview of CNI so what does an endo

00:12:49,140 --> 00:12:53,819
what are its responsibilities now the

00:12:51,660 --> 00:12:55,380
first thing is it has to take care of

00:12:53,819 --> 00:12:57,230
the plumbing it has to take care of

00:12:55,380 --> 00:12:59,480
setting up the network for the

00:12:57,230 --> 00:13:02,660
that's the first thing and to do that

00:12:59,480 --> 00:13:04,490
the plugin needs certain information and

00:13:02,660 --> 00:13:07,970
most of the time you know this

00:13:04,490 --> 00:13:10,220
information is not available in the

00:13:07,970 --> 00:13:12,260
plug-in itself it needs help from

00:13:10,220 --> 00:13:14,540
somebody else so it talks to IPAM

00:13:12,260 --> 00:13:16,430
plug-in to figure out what IP needs to

00:13:14,540 --> 00:13:18,290
be given to the container what are the

00:13:16,430 --> 00:13:20,930
routes what is the dns configuration

00:13:18,290 --> 00:13:23,030
that I need to do all the extra

00:13:20,930 --> 00:13:26,620
information that's needed is provided by

00:13:23,030 --> 00:13:30,370
I Pam so these are the main

00:13:26,620 --> 00:13:32,960
responsibilities of a CNI network plugin

00:13:30,370 --> 00:13:34,850
so let's get started so to run a

00:13:32,960 --> 00:13:36,680
container usually you pick a runtime you

00:13:34,850 --> 00:13:40,970
know it could be darker it could be

00:13:36,680 --> 00:13:44,390
rocket or something else so the first

00:13:40,970 --> 00:13:47,210
step in using CNI is you need to set up

00:13:44,390 --> 00:13:49,340
the network configuration you know you

00:13:47,210 --> 00:13:51,110
have to define what network what kind of

00:13:49,340 --> 00:13:53,750
plugins you want to use so it's a simple

00:13:51,110 --> 00:13:55,790
JSON file so you set up the cni config

00:13:53,750 --> 00:13:57,920
file that's the first step you do the

00:13:55,790 --> 00:14:00,250
next step is you know you start a

00:13:57,920 --> 00:14:00,250
container

00:14:00,740 --> 00:14:06,080
one important point I wanted to bring up

00:14:03,530 --> 00:14:10,250
here is if you are using darker as a

00:14:06,080 --> 00:14:13,580
runtime if you know a container is or if

00:14:10,250 --> 00:14:15,800
the plug-in is a CNI plug in the

00:14:13,580 --> 00:14:20,270
container you started with - - nat equal

00:14:15,800 --> 00:14:21,950
to none and that's the reason why the

00:14:20,270 --> 00:14:24,350
information in the darker inspect

00:14:21,950 --> 00:14:26,600
doesn't show the network information the

00:14:24,350 --> 00:14:29,240
reason for that is earlier in one of the

00:14:26,600 --> 00:14:32,090
slides we saw that when a container

00:14:29,240 --> 00:14:34,790
starts in darker docker is responsible

00:14:32,090 --> 00:14:37,400
for setting up the networking but you

00:14:34,790 --> 00:14:39,950
want a CNI plug-in here to take care of

00:14:37,400 --> 00:14:41,870
networking so you have to tell darker

00:14:39,950 --> 00:14:44,620
not to interfere with you or not to

00:14:41,870 --> 00:14:48,170
interfere with your CNI plugin for that

00:14:44,620 --> 00:14:50,240
to happen we use this flag to make sure

00:14:48,170 --> 00:14:52,160
docker is responsible for just starting

00:14:50,240 --> 00:14:54,950
the container and it doesn't set up any

00:14:52,160 --> 00:14:59,870
networking and then the CNI plugin can

00:14:54,950 --> 00:15:01,550
take over and it can do its magic so the

00:14:59,870 --> 00:15:05,230
next thing the runtime does after

00:15:01,550 --> 00:15:07,820
starting the container is it reads the

00:15:05,230 --> 00:15:09,640
cni network configuration from the disk

00:15:07,820 --> 00:15:12,100
and figures out what

00:15:09,640 --> 00:15:14,620
my plugins it needs to in work and it

00:15:12,100 --> 00:15:16,900
passes the CNI network configuration

00:15:14,620 --> 00:15:19,150
along with some other information and it

00:15:16,900 --> 00:15:21,250
invokes the network plugin so one

00:15:19,150 --> 00:15:24,760
important point that I want to bring up

00:15:21,250 --> 00:15:27,580
here is in the darker world in the CN

00:15:24,760 --> 00:15:31,450
amber a plug-in usually runs as a daemon

00:15:27,580 --> 00:15:33,820
and here in CNI world here the CNI

00:15:31,450 --> 00:15:38,890
plugin runs as a binary so that means

00:15:33,820 --> 00:15:41,380
every time a container starts and the

00:15:38,890 --> 00:15:44,560
plug-in is involved so it's not a

00:15:41,380 --> 00:15:47,380
long-running daemon it does you cannot

00:15:44,560 --> 00:15:50,290
store any state in your runtime so you

00:15:47,380 --> 00:15:53,470
have to depend on some external store or

00:15:50,290 --> 00:15:58,390
external database to store your runtime

00:15:53,470 --> 00:16:02,410
information for your CNI plugin so after

00:15:58,390 --> 00:16:05,320
the CNI plug-in is invoked what it does

00:16:02,410 --> 00:16:07,870
is this is an optional step if it is

00:16:05,320 --> 00:16:09,520
some of the network plugins can do their

00:16:07,870 --> 00:16:11,260
job on their own on their own but

00:16:09,520 --> 00:16:13,360
sometimes they cannot they need help

00:16:11,260 --> 00:16:17,310
from a - plumbing so what they do is

00:16:13,360 --> 00:16:19,240
they pick out the IPAM config

00:16:17,310 --> 00:16:22,180
information from the network

00:16:19,240 --> 00:16:24,460
configuration and pass it on to the cni

00:16:22,180 --> 00:16:25,480
- so they do not pass on the whole

00:16:24,460 --> 00:16:27,700
network config

00:16:25,480 --> 00:16:31,210
is the relevant information that's

00:16:27,700 --> 00:16:35,050
needed for the iPad and then this is

00:16:31,210 --> 00:16:39,070
also a binary invocation there is no

00:16:35,050 --> 00:16:41,380
daemon running here and then CNI I Pam

00:16:39,070 --> 00:16:43,390
plug in figures out the information it

00:16:41,380 --> 00:16:46,240
can talk to some external server or can

00:16:43,390 --> 00:16:49,330
talk to a local file or it can talk to a

00:16:46,240 --> 00:16:51,670
DB and figure out the IP and all the

00:16:49,330 --> 00:16:54,670
other information that's needed to start

00:16:51,670 --> 00:16:56,620
the networks start the networking for

00:16:54,670 --> 00:16:58,450
the container and it returns the

00:16:56,620 --> 00:17:02,970
information back to the network plugin

00:16:58,450 --> 00:17:07,329
and after that the network plug-in uses

00:17:02,970 --> 00:17:09,699
the network conflict as well as the ipam

00:17:07,329 --> 00:17:11,410
information and it sets up the

00:17:09,699 --> 00:17:14,170
networking for the container so this

00:17:11,410 --> 00:17:16,300
means it you know if for example if it

00:17:14,170 --> 00:17:19,540
is a bridge plugin or if it is a we plug

00:17:16,300 --> 00:17:21,940
in what the plug-in does is it creates a

00:17:19,540 --> 00:17:23,290
weep it takes one end of the weed and

00:17:21,940 --> 00:17:25,750
puts it into the

00:17:23,290 --> 00:17:28,209
container and then it brings up that

00:17:25,750 --> 00:17:32,080
interface configure psyche address

00:17:28,209 --> 00:17:34,950
configures any routes and you know all

00:17:32,080 --> 00:17:39,820
the other extra things that are needed

00:17:34,950 --> 00:17:42,940
and after setting up the networking the

00:17:39,820 --> 00:17:44,470
CNI network plug-in gives back the

00:17:42,940 --> 00:17:46,240
information to the runtime you know

00:17:44,470 --> 00:17:47,980
whatever has happened what is the IP

00:17:46,240 --> 00:17:49,720
address assigned for the container and

00:17:47,980 --> 00:17:52,090
it passes on the information to the

00:17:49,720 --> 00:17:53,710
runtime that and then runtime can make a

00:17:52,090 --> 00:17:54,610
decision you know if there's a failure

00:17:53,710 --> 00:17:56,740
what should I do

00:17:54,610 --> 00:18:01,270
and things like that so that's a

00:17:56,740 --> 00:18:05,140
high-level overview of the CNI so now

00:18:01,270 --> 00:18:06,670
let's walk through the specification in

00:18:05,140 --> 00:18:09,010
the previous slides we saw the first

00:18:06,670 --> 00:18:11,590
step that we do is we set up the CNI

00:18:09,010 --> 00:18:17,700
network configuration or the network

00:18:11,590 --> 00:18:21,760
config file so pull off a simple network

00:18:17,700 --> 00:18:25,630
configuration it's in JSON and these are

00:18:21,760 --> 00:18:28,870
some of the fields so what are like the

00:18:25,630 --> 00:18:30,760
CNI version what kind of version is the

00:18:28,870 --> 00:18:32,950
runtime supporting and what kind of the

00:18:30,760 --> 00:18:34,960
version the plug-in is supporting so you

00:18:32,950 --> 00:18:39,690
can figure out what are the capabilities

00:18:34,960 --> 00:18:47,230
and other stuff by the version and other

00:18:39,690 --> 00:18:51,790
in other API calls and here this line up

00:18:47,230 --> 00:18:52,390
here it specifies what kind of plug-in

00:18:51,790 --> 00:18:54,760
are we using

00:18:52,390 --> 00:18:57,280
so the important point to note here is

00:18:54,760 --> 00:19:00,640
then the type of the plug-in the bridge

00:18:57,280 --> 00:19:02,890
is the actual binary name of your

00:19:00,640 --> 00:19:06,130
plug-in so let's say if you are some XYZ

00:19:02,890 --> 00:19:08,770
company and then you build a you know a

00:19:06,130 --> 00:19:12,940
magical tool which you want to release

00:19:08,770 --> 00:19:17,110
to the you know to the community as X Y

00:19:12,940 --> 00:19:21,550
Z - magic so you specify type X Y Z

00:19:17,110 --> 00:19:23,170
magic and this is the item section that

00:19:21,550 --> 00:19:26,500
I was talking about which is specific to

00:19:23,170 --> 00:19:28,660
the ipam plugin so here also there's a

00:19:26,500 --> 00:19:31,990
type and the type specifies the actual

00:19:28,660 --> 00:19:35,320
binary name that is invoked by the

00:19:31,990 --> 00:19:37,300
runtime or by the network plugin

00:19:35,320 --> 00:19:42,510
and have all the other information

00:19:37,300 --> 00:19:47,890
needed for the specific plugin I can't

00:19:42,510 --> 00:19:51,970
and during the step of the runtime

00:19:47,890 --> 00:19:55,870
invoking the CNI plugin this is what

00:19:51,970 --> 00:20:00,880
happens the run time passes the config

00:19:55,870 --> 00:20:03,250
in the STD in and it also sets up a few

00:20:00,880 --> 00:20:05,500
of the environment variables so this is

00:20:03,250 --> 00:20:08,490
how the runtime communicates with the

00:20:05,500 --> 00:20:11,710
network plugin and if you look at this

00:20:08,490 --> 00:20:14,050
this is the same config file that we

00:20:11,710 --> 00:20:18,280
have set up in the previous tab and the

00:20:14,050 --> 00:20:21,490
and environment variables setup while

00:20:18,280 --> 00:20:26,850
invoking the cni binder c and i network

00:20:21,490 --> 00:20:30,580
plug-in binary so the important

00:20:26,850 --> 00:20:32,140
variables here are the container ID now

00:20:30,580 --> 00:20:34,480
this has to be unique across your

00:20:32,140 --> 00:20:36,640
installation usually you know it could

00:20:34,480 --> 00:20:40,960
be a UUID or it could be the darker ID

00:20:36,640 --> 00:20:43,150
and net NS which is the network

00:20:40,960 --> 00:20:44,530
namespace of the container when a where

00:20:43,150 --> 00:20:46,240
should be set up the networking for the

00:20:44,530 --> 00:20:48,430
container that's what is specified by

00:20:46,240 --> 00:20:50,590
this variable name and what is the

00:20:48,430 --> 00:20:54,490
interface name that needs to be created

00:20:50,590 --> 00:20:58,330
inside the container and thus you might

00:20:54,490 --> 00:21:00,400
command specifies whether we are adding

00:20:58,330 --> 00:21:04,300
a container or deleting a container so

00:21:00,400 --> 00:21:06,610
the process is same whether you are

00:21:04,300 --> 00:21:10,000
adding or deleting a container the only

00:21:06,610 --> 00:21:12,340
difference is the command if it's an ADD

00:21:10,000 --> 00:21:16,120
you specify a diff it is a delete is

00:21:12,340 --> 00:21:20,470
just specify delete cni path specifies

00:21:16,120 --> 00:21:23,650
you know where in my my by where I can

00:21:20,470 --> 00:21:25,270
execute them and if you have your custom

00:21:23,650 --> 00:21:27,550
arguments which are not part of the

00:21:25,270 --> 00:21:32,650
specification you can pass them using

00:21:27,550 --> 00:21:34,810
the cni arguments and this is the step

00:21:32,650 --> 00:21:39,040
where the network plugin invokes the I

00:21:34,810 --> 00:21:41,890
Pam you can see only the hi Pam section

00:21:39,040 --> 00:21:45,880
is passed from the cni plug-in network

00:21:41,890 --> 00:21:47,570
plug-in the cni can plug-in this is the

00:21:45,880 --> 00:21:50,660
the smaller the subsection

00:21:47,570 --> 00:21:54,520
the network configuration file and you

00:21:50,660 --> 00:21:54,520
pass on the same environment variables

00:21:56,170 --> 00:22:01,490
once Eni I can plug in figures out the

00:21:59,120 --> 00:22:04,460
information this is how it communicates

00:22:01,490 --> 00:22:06,980
back to the network plugin you can see

00:22:04,460 --> 00:22:09,830
the different options available here you

00:22:06,980 --> 00:22:12,650
can specify an array of IP addresses if

00:22:09,830 --> 00:22:15,530
you have a you know if you have an ipv4

00:22:12,650 --> 00:22:17,000
address or an ipv6 address what are the

00:22:15,530 --> 00:22:17,690
different routes that needs to be

00:22:17,000 --> 00:22:20,180
programmed

00:22:17,690 --> 00:22:24,310
what is the gateway IP address and what

00:22:20,180 --> 00:22:27,590
are the DNA DNS server information and

00:22:24,310 --> 00:22:29,960
you know the different search strings

00:22:27,590 --> 00:22:35,390
which go into the resolved cars and

00:22:29,960 --> 00:22:41,050
things like that in case there is an

00:22:35,390 --> 00:22:44,840
error this is the output in okay so on

00:22:41,050 --> 00:22:46,850
important thing this Jason information

00:22:44,840 --> 00:22:49,820
when it is being written from the I Pam

00:22:46,850 --> 00:22:52,580
to the network plug-in this is printed

00:22:49,820 --> 00:22:54,410
out on the STD out so the Jason Jason

00:22:52,580 --> 00:22:57,350
information is printed on the STD R and

00:22:54,410 --> 00:23:00,260
the written code if it is a zero it

00:22:57,350 --> 00:23:03,770
signifies it's a successful call if it

00:23:00,260 --> 00:23:04,700
is a non zero then something failed so

00:23:03,770 --> 00:23:09,350
in case of a failure

00:23:04,700 --> 00:23:11,600
the code is nonzero and the result you

00:23:09,350 --> 00:23:13,310
know the Jason result is printed out on

00:23:11,600 --> 00:23:15,110
the STD or it looks something like this

00:23:13,310 --> 00:23:18,610
you have the error code you have the

00:23:15,110 --> 00:23:18,610
message and the details

00:23:19,860 --> 00:23:28,530
and once CNI network plugin has set up

00:23:26,850 --> 00:23:32,250
the networking stuff inside the

00:23:28,530 --> 00:23:34,740
container this is how it passes on the

00:23:32,250 --> 00:23:38,550
information back to the runtime you can

00:23:34,740 --> 00:23:41,700
see the different sections of the JSON

00:23:38,550 --> 00:23:44,070
file most of the information is from the

00:23:41,700 --> 00:23:45,990
ipam plugin and then you can add a

00:23:44,070 --> 00:23:49,020
little more information here and pass it

00:23:45,990 --> 00:23:51,090
on to the runtime so this is an error

00:23:49,020 --> 00:23:54,059
code of zero if it is a success and a

00:23:51,090 --> 00:24:01,280
error code of non zero a code of non

00:23:54,059 --> 00:24:07,830
zero to specify an error so the cni

00:24:01,280 --> 00:24:10,740
repository one of them has a library and

00:24:07,830 --> 00:24:14,700
you know it's it's it's an SDK probably

00:24:10,740 --> 00:24:18,000
I would say an SDK to build CNI network

00:24:14,700 --> 00:24:20,730
plugins or CNI IPAM plugins using go

00:24:18,000 --> 00:24:24,260
because go is more popular in the micro

00:24:20,730 --> 00:24:27,630
services world so we have ready to use

00:24:24,260 --> 00:24:30,300
SDK or a library in the upstream CNI

00:24:27,630 --> 00:24:33,780
repository and also it has an example

00:24:30,300 --> 00:24:38,610
tool to test your CNI plugin that you

00:24:33,780 --> 00:24:41,640
are building earlier the CNI authors

00:24:38,610 --> 00:24:43,980
have released a couple of reference

00:24:41,640 --> 00:24:46,380
plugins so that people can use them as

00:24:43,980 --> 00:24:48,420
use in their products or they can

00:24:46,380 --> 00:24:51,600
customize them on top of the existing

00:24:48,420 --> 00:24:53,850
plugins so these were part of the CNI

00:24:51,600 --> 00:24:56,850
repository but in the recent release

00:24:53,850 --> 00:24:58,800
they have been refactored out and put it

00:24:56,850 --> 00:25:00,120
in a separate plugin so different

00:24:58,800 --> 00:25:05,700
repositories so you can find these

00:25:00,120 --> 00:25:06,900
plugins in github.com slash plugins so

00:25:05,700 --> 00:25:09,840
the different plugins which are

00:25:06,900 --> 00:25:13,070
available here are the bridge loopback

00:25:09,840 --> 00:25:16,679
IP VLAN mac wheel and so these are the

00:25:13,070 --> 00:25:20,570
networking plugins and you also have

00:25:16,679 --> 00:25:24,059
host local and DHCP IPAN plugin so what

00:25:20,570 --> 00:25:26,130
these are very useful if you are trying

00:25:24,059 --> 00:25:28,770
to build your plugin you know you can

00:25:26,130 --> 00:25:31,919
use them as is so the host local what it

00:25:28,770 --> 00:25:34,500
does is you give the configuration in

00:25:31,919 --> 00:25:35,910
the network configuration a subnet you

00:25:34,500 --> 00:25:38,429
know that you want to allocate for your

00:25:35,910 --> 00:25:40,800
containers and this plug-in takes care

00:25:38,429 --> 00:25:43,710
of allocating IP addresses keeping track

00:25:40,800 --> 00:25:45,630
of which container got a certain IP and

00:25:43,710 --> 00:25:47,940
then once you delete a container it

00:25:45,630 --> 00:25:50,190
releases the IP address so the host

00:25:47,940 --> 00:25:53,490
local is useful in that and the DHCP

00:25:50,190 --> 00:25:55,559
plugin is similar to the DHCP client

00:25:53,490 --> 00:25:58,200
running on a virtual machine so if you

00:25:55,559 --> 00:26:00,990
want to get IP address from your DHCP

00:25:58,200 --> 00:26:03,960
server for a container you could use the

00:26:00,990 --> 00:26:05,820
DHCP I can plug in and the bridge

00:26:03,960 --> 00:26:09,179
plug-in is one of the most popular

00:26:05,820 --> 00:26:10,950
plugins used by a lot of other folks so

00:26:09,179 --> 00:26:14,370
what this guy does is it creates a

00:26:10,950 --> 00:26:17,070
bridge on the host and when the

00:26:14,370 --> 00:26:20,760
container start it start when container

00:26:17,070 --> 00:26:22,830
start they create V pairs you put one

00:26:20,760 --> 00:26:24,809
end of the V pair in the container and

00:26:22,830 --> 00:26:26,340
the other one on the bridge so that's

00:26:24,809 --> 00:26:30,600
how these containers can talk to each

00:26:26,340 --> 00:26:31,169
other there are other metals he and I

00:26:30,600 --> 00:26:33,720
plugins

00:26:31,169 --> 00:26:38,429
what these do is like for example the

00:26:33,720 --> 00:26:40,740
tuning plug-in is used to enable sis CTL

00:26:38,429 --> 00:26:42,900
settings on the network interface of the

00:26:40,740 --> 00:26:45,900
containers so these do not fall either

00:26:42,900 --> 00:26:46,830
in the network or the IPAM category so

00:26:45,900 --> 00:26:50,880
that's why they are called the meta

00:26:46,830 --> 00:26:53,460
Plains so these plugins you know you can

00:26:50,880 --> 00:26:58,559
use you can for these plugins and you

00:26:53,460 --> 00:27:03,450
can build on top of it I wanted to show

00:26:58,559 --> 00:27:05,250
you the simple cni interface so there

00:27:03,450 --> 00:27:08,280
are like a couple of important calls ad

00:27:05,250 --> 00:27:10,530
network and delete network so the

00:27:08,280 --> 00:27:13,110
container runtime calls into your

00:27:10,530 --> 00:27:16,830
plug-in using these two api's so when a

00:27:13,110 --> 00:27:18,870
container starts you you get invoked on

00:27:16,830 --> 00:27:20,720
the ad network you get the network

00:27:18,870 --> 00:27:24,059
configuration and if you have any

00:27:20,720 --> 00:27:27,150
runtime information you get that in this

00:27:24,059 --> 00:27:30,800
call and with the new release of the cni

00:27:27,150 --> 00:27:33,419
what they are added here is you can add

00:27:30,800 --> 00:27:35,669
it's called add an effortless so what

00:27:33,419 --> 00:27:39,230
this does is if you want

00:27:35,669 --> 00:27:41,880
earlier you could invoke one plug-in of

00:27:39,230 --> 00:27:42,400
cni but now let's say if you want to

00:27:41,880 --> 00:27:44,620
change

00:27:42,400 --> 00:27:46,270
plugins I want to run the bridge plug-in

00:27:44,620 --> 00:27:48,190
trust and then I want to call the tuning

00:27:46,270 --> 00:27:50,340
and then I want to call a port mapping

00:27:48,190 --> 00:27:53,020
plug-in so if you want to change them

00:27:50,340 --> 00:27:55,120
you have an option now so you can

00:27:53,020 --> 00:27:56,800
specify that in your network

00:27:55,120 --> 00:27:59,710
configuration file so when a container

00:27:56,800 --> 00:28:03,130
starts it goes to this different stages

00:27:59,710 --> 00:28:04,480
and when you delete the container the

00:28:03,130 --> 00:28:06,190
plugins are involved in the reverse

00:28:04,480 --> 00:28:12,970
order so these options are available

00:28:06,190 --> 00:28:15,910
with the new release of the cni so now I

00:28:12,970 --> 00:28:18,370
just want to show you how in I run time

00:28:15,910 --> 00:28:26,580
and a CNI plugin so before I do that

00:28:18,370 --> 00:28:26,580
guys happen and okay I'm sorry

00:28:27,879 --> 00:28:41,019
I sorry I couldn't hear you so I think

00:28:38,139 --> 00:28:42,669
it depends on the runtime so some of the

00:28:41,019 --> 00:28:44,889
runtimes currently they do not support

00:28:42,669 --> 00:28:46,299
multiple plugins but it is possible

00:28:44,889 --> 00:28:49,119
theoretically it is possible so you just

00:28:46,299 --> 00:28:52,779
drop in to network configuration files

00:28:49,119 --> 00:28:54,969
in the config directory and then if your

00:28:52,779 --> 00:28:58,599
runtime understands them then you can

00:28:54,969 --> 00:29:07,690
set up multiple networks using multiple

00:28:58,599 --> 00:29:16,690
Network plugins so it should yeah so it

00:29:07,690 --> 00:29:19,289
depends on your runtime let me pull up

00:29:16,690 --> 00:29:19,289
my screen

00:29:47,070 --> 00:29:50,480
okay that's too tiny

00:29:56,789 --> 00:30:05,830
is this visible okay so this is one of

00:30:02,320 --> 00:30:08,409
my demo servers that I'm using so before

00:30:05,830 --> 00:30:12,220
I jump on to this I want to show you

00:30:08,409 --> 00:30:12,730
some of the files that I have created to

00:30:12,220 --> 00:30:15,869
run the demo

00:30:12,730 --> 00:30:15,869
[Music]

00:30:21,170 --> 00:30:27,410
so I will upload these on github by end

00:30:24,920 --> 00:30:31,430
of day today I will put in more nodes

00:30:27,410 --> 00:30:35,030
and and commit them to the repository so

00:30:31,430 --> 00:30:37,850
here I have a vagrant file to run the

00:30:35,030 --> 00:30:39,830
different virtual machines on your hosts

00:30:37,850 --> 00:30:44,060
so that we get the similar configuration

00:30:39,830 --> 00:30:48,710
and for one of the simple demos I have

00:30:44,060 --> 00:30:51,410
the network configuration file step as

00:30:48,710 --> 00:30:53,150
we saw earlier is you create a config

00:30:51,410 --> 00:30:58,570
file and you drop it in the config

00:30:53,150 --> 00:30:58,570
directory so here and see I am using

00:30:59,860 --> 00:31:04,970
simple C and I plugin so that's the type

00:31:02,450 --> 00:31:07,610
so the actual binary name for this

00:31:04,970 --> 00:31:10,340
plug-in is going to be the same and here

00:31:07,610 --> 00:31:12,410
I'm also using a simple IPAM plugin so

00:31:10,340 --> 00:31:14,120
that's the one which I am using for the

00:31:12,410 --> 00:31:19,190
demo right now so if you look at these

00:31:14,120 --> 00:31:21,770
binaries how do they look like so this

00:31:19,190 --> 00:31:23,030
is the simple cni plug-in okay this of

00:31:21,770 --> 00:31:27,790
course there's a little bit of code here

00:31:23,030 --> 00:31:27,790
but I will go through this quickly

00:31:30,520 --> 00:31:38,120
well before I yeah I can go through this

00:31:34,490 --> 00:31:41,210
so here what I am doing is I get my

00:31:38,120 --> 00:31:43,100
network config from STD so I'm trying to

00:31:41,210 --> 00:31:45,830
read the network on thing into my

00:31:43,100 --> 00:31:48,740
variable and I'm figuring out what is my

00:31:45,830 --> 00:31:51,170
name of the network and what is the ipam

00:31:48,740 --> 00:31:53,150
plugin that I'm using so that you know I

00:31:51,170 --> 00:31:55,040
know that the cni the simple C and I

00:31:53,150 --> 00:31:57,230
plug-in needs help from the iPad so I

00:31:55,040 --> 00:31:59,360
need to figure out what is the plug IPAM

00:31:57,230 --> 00:32:02,180
plug-in so I'm figuring out type on

00:31:59,360 --> 00:32:05,330
plugging name here and I'm invoking type

00:32:02,180 --> 00:32:10,700
am plugin so let's just jump to the ipam

00:32:05,330 --> 00:32:13,580
plug-in and see what is it doing cool a

00:32:10,700 --> 00:32:16,910
complete hack very simple so you just

00:32:13,580 --> 00:32:20,660
take the JSON output that is expected by

00:32:16,910 --> 00:32:23,750
the cni plugin so we have the cni

00:32:20,660 --> 00:32:26,270
version we have the IP address

00:32:23,750 --> 00:32:28,430
information and whatever is the IP wash

00:32:26,270 --> 00:32:31,190
IP address version whether it's 4 or 6

00:32:28,430 --> 00:32:34,909
so I'm just echoing it on to the STD out

00:32:31,190 --> 00:32:37,669
and the return code is 0 so it's a 2

00:32:34,909 --> 00:32:40,580
simple hack so here if you are building

00:32:37,669 --> 00:32:43,549
your own I can plug in what you would do

00:32:40,580 --> 00:32:45,950
is you would use the container ID and

00:32:43,549 --> 00:32:48,169
then you can query your database and

00:32:45,950 --> 00:32:50,570
figure out what IP address you need to

00:32:48,169 --> 00:32:52,460
assign it assigned to the container and

00:32:50,570 --> 00:32:59,529
all the interesting stuff happens here

00:32:52,460 --> 00:33:03,549
and once the IPAM plugin result is

00:32:59,529 --> 00:33:06,259
available what we do is we figure out

00:33:03,549 --> 00:33:09,499
what is the container IP address from

00:33:06,259 --> 00:33:12,499
the hi Pam plugin result and we figure

00:33:09,499 --> 00:33:15,529
out what is the bridge that that is used

00:33:12,499 --> 00:33:17,599
to connect this container to so we

00:33:15,529 --> 00:33:20,179
figure this out information from the

00:33:17,599 --> 00:33:23,960
network config so here if you see we had

00:33:20,179 --> 00:33:27,970
this information in the config file so

00:33:23,960 --> 00:33:35,299
we specify I want to use a demo bread 0

00:33:27,970 --> 00:33:41,419
to connect my country and here what we

00:33:35,299 --> 00:33:45,259
do is we use the information available

00:33:41,419 --> 00:33:50,570
from our environment which is the cni

00:33:45,259 --> 00:33:52,909
container and we are here I'm just

00:33:50,570 --> 00:33:55,609
trying to use a small trick so I think I

00:33:52,909 --> 00:33:58,309
truncate the container ID build a short

00:33:55,609 --> 00:33:59,590
ID from that and I am creating a weak

00:33:58,309 --> 00:34:02,599
link

00:33:59,590 --> 00:34:04,009
no.11 and of it I'm naming it as we head

00:34:02,599 --> 00:34:08,059
so that this is the end that goes onto

00:34:04,009 --> 00:34:14,359
the host and the pier name is container

00:34:08,059 --> 00:34:18,409
- whatever and I'm setting the host side

00:34:14,359 --> 00:34:20,569
of the weed into the I'm plugging the

00:34:18,409 --> 00:34:23,240
wheat and into the cni bridge here

00:34:20,569 --> 00:34:24,919
that's what I am doing the next step I'm

00:34:23,240 --> 00:34:29,319
bringing up the inter bring up the

00:34:24,919 --> 00:34:31,609
interface after that I am moving the the

00:34:29,319 --> 00:34:35,720
other end of the width inside the

00:34:31,609 --> 00:34:39,319
container and after that bring up the

00:34:35,720 --> 00:34:42,200
interface inside the container and then

00:34:39,319 --> 00:34:43,780
program the IP address so I do an IP

00:34:42,200 --> 00:34:47,110
address are and

00:34:43,780 --> 00:34:49,419
the container IP that we got from the

00:34:47,110 --> 00:34:51,879
earlier earlier step so this is an

00:34:49,419 --> 00:34:57,850
example of a very simple C and I plug in

00:34:51,879 --> 00:35:00,100
okay so it depends on the C and I plug

00:34:57,850 --> 00:35:02,950
in that's being used so here for this

00:35:00,100 --> 00:35:05,710
demo purpose I created it manually so

00:35:02,950 --> 00:35:07,660
you do it as part of the setup but in

00:35:05,710 --> 00:35:10,090
your C and I plug in what you could do

00:35:07,660 --> 00:35:11,830
is when you are running when you are in

00:35:10,090 --> 00:35:15,340
work for the first time here you could

00:35:11,830 --> 00:35:17,830
add code saying that does this bridge

00:35:15,340 --> 00:35:20,350
exists if it doesn't let me clear that

00:35:17,830 --> 00:35:22,060
and you need to give an IP address to

00:35:20,350 --> 00:35:26,230
that what you could do is you can use

00:35:22,060 --> 00:35:28,090
the Gateway IP address that you got from

00:35:26,230 --> 00:35:29,980
the iPad and use that to program the

00:35:28,090 --> 00:35:32,830
bridge so that's that's what is being

00:35:29,980 --> 00:35:35,560
done in the reference plugin the

00:35:32,830 --> 00:35:39,790
reference bridge plug this is this is

00:35:35,560 --> 00:35:41,560
exactly like how it is done in go in the

00:35:39,790 --> 00:35:44,440
reference plugin this is exactly the

00:35:41,560 --> 00:35:50,050
same obviously you'll see the taps in

00:35:44,440 --> 00:35:52,870
that go using the go libraries so let's

00:35:50,050 --> 00:35:55,870
set it up and then see oh let me show

00:35:52,870 --> 00:36:02,050
you the simulated container run time so

00:35:55,870 --> 00:36:05,740
here what I am doing is I am executing

00:36:02,050 --> 00:36:08,140
the plugins so when I'm executing the

00:36:05,740 --> 00:36:10,450
plugins I need to pass this information

00:36:08,140 --> 00:36:13,630
right so I'm exporting the container ID

00:36:10,450 --> 00:36:15,640
the network namespace the interface name

00:36:13,630 --> 00:36:17,530
so here our course I have hard-coded it

00:36:15,640 --> 00:36:20,320
to e0 you could use whatever you want

00:36:17,530 --> 00:36:23,410
and I am reading the network country

00:36:20,320 --> 00:36:24,970
from the config path and of course

00:36:23,410 --> 00:36:26,560
there's also an another hack I'm just

00:36:24,970 --> 00:36:30,820
assuming there's going to be only one

00:36:26,560 --> 00:36:32,920
file here and figure out the plug-in

00:36:30,820 --> 00:36:35,740
name so here I'm figuring it out from

00:36:32,920 --> 00:36:37,960
the type so so that I can invoke it and

00:36:35,740 --> 00:36:39,940
here is the line where I'm invoking the

00:36:37,960 --> 00:36:41,530
plug-in and I'm getting the plug-in

00:36:39,940 --> 00:36:45,190
result and I'm checking for the error

00:36:41,530 --> 00:36:49,050
code if it is successful or not so this

00:36:45,190 --> 00:36:52,750
is a very simple container run time so

00:36:49,050 --> 00:36:55,040
if you are a run time author you could

00:36:52,750 --> 00:36:58,400
use a pattern something like this

00:36:55,040 --> 00:36:59,960
and this this particular script takes

00:36:58,400 --> 00:37:02,210
two arguments whether you are adding a

00:36:59,960 --> 00:37:05,000
container or deleting a container so if

00:37:02,210 --> 00:37:09,530
you are adding a container that the hag

00:37:05,000 --> 00:37:11,980
that I'm using is I start a talker I'm

00:37:09,530 --> 00:37:15,020
starting it with net equal to Mun I

00:37:11,980 --> 00:37:16,790
figure out the process ID and from the

00:37:15,020 --> 00:37:18,830
process ID I figure out the network

00:37:16,790 --> 00:37:21,950
namespace and then I'm linking the

00:37:18,830 --> 00:37:24,140
network namespace so use the network

00:37:21,950 --> 00:37:26,480
namespace name in the IP commands

00:37:24,140 --> 00:37:28,430
earlier docker used to do that but they

00:37:26,480 --> 00:37:32,390
stopped doing this so that's why I have

00:37:28,430 --> 00:37:35,990
to do this manually and I expect the

00:37:32,390 --> 00:37:38,420
plug-in with the container ID and the

00:37:35,990 --> 00:37:40,100
network name so that's the simple

00:37:38,420 --> 00:37:45,200
container run right let's see it in

00:37:40,100 --> 00:37:48,500
action so we have the demo host and

00:37:45,200 --> 00:37:53,110
inside this I have created few VMs and

00:37:48,500 --> 00:37:53,110
one of the VM is one of the VM so

00:38:01,760 --> 00:38:04,760
oops

00:38:22,829 --> 00:38:26,910
okay so we have the simple demo files so

00:38:25,739 --> 00:38:29,339
the first thing that I need to do is

00:38:26,910 --> 00:38:30,779
drop my config Network config file in

00:38:29,339 --> 00:38:36,499
the config directory so the default

00:38:30,779 --> 00:38:36,499
config directory is slash EDC

00:38:43,830 --> 00:38:54,240
/e TC c ni net dot d so that's the

00:38:47,970 --> 00:39:03,780
default location and then the next one

00:38:54,240 --> 00:39:06,570
is you connect the IPAM plugin to opt c

00:39:03,780 --> 00:39:14,090
and i bin that's a location for the

00:39:06,570 --> 00:39:14,090
plugins and the other one is the cni

00:39:14,300 --> 00:39:21,600
okay so now we have installed the config

00:39:18,150 --> 00:39:25,020
file and the plug-in files and now i go

00:39:21,600 --> 00:39:27,750
to scripts and then simulate container

00:39:25,020 --> 00:39:30,110
runtime and i'm doing an ad container

00:39:27,750 --> 00:39:37,680
has started and let's just quickly check

00:39:30,110 --> 00:39:41,870
darker excerpt - IT - IP address so

00:39:37,680 --> 00:39:43,980
that's the IP address we got from the

00:39:41,870 --> 00:39:47,190
IPAM plugin that we just wrote so of

00:39:43,980 --> 00:39:50,430
course we just hard coded it so if that

00:39:47,190 --> 00:39:52,290
ends my presentation so if you have

00:39:50,430 --> 00:39:55,890
questions we can probably take it

00:39:52,290 --> 00:39:58,730
outside because we are out of time one

00:39:55,890 --> 00:39:58,730
question i can quickly take

00:40:03,140 --> 00:40:08,809
yes I'm simulating a runtime how do you

00:40:06,259 --> 00:40:11,989
author a runtime if you want to write

00:40:08,809 --> 00:40:14,269
your own runtime so CNI plugin means you

00:40:11,989 --> 00:40:15,859
need a runtime that accepts the see an

00:40:14,269 --> 00:40:18,170
ice pack and you need a plug-in who can

00:40:15,859 --> 00:40:22,630
do that so I am trying to specify give

00:40:18,170 --> 00:40:26,949
examples for both authors thank you

00:40:22,630 --> 00:40:26,949

YouTube URL: https://www.youtube.com/watch?v=pFj6BdW3le4


