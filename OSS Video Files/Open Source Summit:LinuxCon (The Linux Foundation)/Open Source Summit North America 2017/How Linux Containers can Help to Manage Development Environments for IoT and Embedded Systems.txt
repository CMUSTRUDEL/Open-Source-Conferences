Title: How Linux Containers can Help to Manage Development Environments for IoT and Embedded Systems
Publication date: 2017-09-12
Playlist: Open Source Summit North America 2017
Description: 
	How Linux Containers can Help to Manage Development Environments for IoT and Embedded Systems - Yan Vugenfirer & Dmitry Fleytman, Daynix Computing LTD

In this presentation, Yan Vugenfirer will show appropriate techniques for seamless use of containers in development process for embedded and IoT. The implementation of those techniques will be demonstrated by using new and open source management framework, Rebuild (https://github.com/daynix/rebuild).

About Dmitry Fleytman
Dmitry is CTO at Daynix Computing LTD. Dmitry maintains and frequently contributes to several virtualization-related open source projects.

About Yan Vugenfirer
Yan Vugenfirer is virtualization expert at Daynix Computing LTD. Since 2006, he has been specialized in the development of technologies related to virtualization as a contributor to QEMU and maintainer of virtio-win project.
Captions: 
	00:00:00,030 --> 00:00:05,490
my name is Yong I'm here with me tree

00:00:01,979 --> 00:00:06,899
and we're going to talk about how Linux

00:00:05,490 --> 00:00:09,240
containers can help you to manage

00:00:06,899 --> 00:00:12,000
development environments variety and

00:00:09,240 --> 00:00:17,570
embedded systems and we are going to do

00:00:12,000 --> 00:00:20,310
it by showing open source framework for

00:00:17,570 --> 00:00:23,850
managing building environments and

00:00:20,310 --> 00:00:27,269
containers called rebuild and before we

00:00:23,850 --> 00:00:30,750
are going into the how we need to ask

00:00:27,269 --> 00:00:33,899
ourselves why and why if you are dealing

00:00:30,750 --> 00:00:35,610
with embedded or AIT systems and we

00:00:33,899 --> 00:00:39,180
develop for one of the devices you know

00:00:35,610 --> 00:00:42,530
that in order to compile a code you need

00:00:39,180 --> 00:00:47,460
to is usually to deploy some tool chain

00:00:42,530 --> 00:00:50,640
SDKs and those have different

00:00:47,460 --> 00:00:52,020
dependencies different compilers you

00:00:50,640 --> 00:00:55,170
might need different to chase for

00:00:52,020 --> 00:00:58,230
different devices you might need to

00:00:55,170 --> 00:01:01,379
update some packages and if you have a

00:00:58,230 --> 00:01:03,989
code base that works on deep on the line

00:01:01,379 --> 00:01:06,659
of the devices on several devices or you

00:01:03,989 --> 00:01:08,909
have SDK that is changing and you want

00:01:06,659 --> 00:01:11,700
to update some packaging always this

00:01:08,909 --> 00:01:13,380
management of packages of compilers of

00:01:11,700 --> 00:01:15,600
your actual development environments and

00:01:13,380 --> 00:01:18,119
involves some kind of a pain and there

00:01:15,600 --> 00:01:23,400
are many tools that are trying to help

00:01:18,119 --> 00:01:24,930
you in this so the question and of

00:01:23,400 --> 00:01:27,299
course always there is this thing that

00:01:24,930 --> 00:01:29,009
it works on my machine so sometimes it

00:01:27,299 --> 00:01:30,689
you can compile it in your environment

00:01:29,009 --> 00:01:32,670
but it doesn't compile on the build

00:01:30,689 --> 00:01:34,979
server we have some issues in the CI and

00:01:32,670 --> 00:01:40,290
then you need to to answer yourself ok

00:01:34,979 --> 00:01:42,540
so what exactly happened here so what we

00:01:40,290 --> 00:01:45,420
would like to have and there's several

00:01:42,540 --> 00:01:48,180
on different levels so if we are talking

00:01:45,420 --> 00:01:49,920
about individual contributor to project

00:01:48,180 --> 00:01:52,409
or individual developer in the

00:01:49,920 --> 00:01:54,899
organization we'd like to be able to run

00:01:52,409 --> 00:01:58,079
with environments for multiple platforms

00:01:54,899 --> 00:01:59,790
on our same development machines and we

00:01:58,079 --> 00:02:02,729
want to have a mutable build environment

00:01:59,790 --> 00:02:04,920
so when we do when we run our builds or

00:02:02,729 --> 00:02:07,020
we do some actions with our build

00:02:04,920 --> 00:02:10,080
environments it doesn't change if we

00:02:07,020 --> 00:02:12,150
don't want it to change and we want to

00:02:10,080 --> 00:02:15,810
have the same environment

00:02:12,150 --> 00:02:20,370
as we use on our development machine

00:02:15,810 --> 00:02:22,980
also in different other places in our

00:02:20,370 --> 00:02:26,700
organizations build server or CI server

00:02:22,980 --> 00:02:28,019
and if we are talking about the team we

00:02:26,700 --> 00:02:29,459
would like to share our build

00:02:28,019 --> 00:02:30,959
environments between the team members

00:02:29,459 --> 00:02:33,870
and we want to have the unified

00:02:30,959 --> 00:02:35,640
experience between the team members that

00:02:33,870 --> 00:02:37,109
doesn't matter what kind of districts

00:02:35,640 --> 00:02:39,030
they are using or even what kind of

00:02:37,109 --> 00:02:40,859
operating systems they are using for

00:02:39,030 --> 00:02:43,829
their development and we would like to

00:02:40,859 --> 00:02:48,420
track the versioning of the environments

00:02:43,829 --> 00:02:50,190
or how they were created and if we are

00:02:48,420 --> 00:02:53,819
talking about the organization itself

00:02:50,190 --> 00:02:55,470
then they are different then we need to

00:02:53,819 --> 00:02:56,909
look to the future so what will happen

00:02:55,470 --> 00:02:58,739
in several years when the people that

00:02:56,909 --> 00:03:01,769
are working now on the product or

00:02:58,739 --> 00:03:03,989
created the environment today they are

00:03:01,769 --> 00:03:06,000
no longer with us or no longer with our

00:03:03,989 --> 00:03:08,489
project so what we want to do in this

00:03:06,000 --> 00:03:10,739
case and we also have the certification

00:03:08,489 --> 00:03:14,069
issues so if we are talking about

00:03:10,739 --> 00:03:16,530
medical devices automotive devices we

00:03:14,069 --> 00:03:19,500
need to be able to audit our software

00:03:16,530 --> 00:03:21,540
that we build and we need to go and show

00:03:19,500 --> 00:03:24,150
that we used exactly specific packages

00:03:21,540 --> 00:03:27,000
that were specific libraries that were

00:03:24,150 --> 00:03:28,940
certified and they they're used during

00:03:27,000 --> 00:03:33,859
our build

00:03:28,940 --> 00:03:37,049
so how one how we would like to solve it

00:03:33,859 --> 00:03:39,690
we created the open-source framework to

00:03:37,049 --> 00:03:41,729
manage build environments that we called

00:03:39,690 --> 00:03:45,060
rebuild and it leveraged Linux

00:03:41,729 --> 00:03:47,489
containers and enables seamless

00:03:45,060 --> 00:03:50,549
integration of the containers with your

00:03:47,489 --> 00:03:52,409
existing build build environments and

00:03:50,549 --> 00:03:54,810
integrating your existing building

00:03:52,409 --> 00:03:57,120
violence in two containers itself it

00:03:54,810 --> 00:04:00,180
will stop this but it works on my

00:03:57,120 --> 00:04:03,989
machine situation and that will enable

00:04:00,180 --> 00:04:07,560
the share build environments between the

00:04:03,989 --> 00:04:11,269
different team members so I won't here

00:04:07,560 --> 00:04:11,269
admit Ritu help me with the demo

00:04:12,930 --> 00:04:19,209
so what we are going to show now is we

00:04:16,959 --> 00:04:22,240
have some sample source code in our

00:04:19,209 --> 00:04:25,960
local directory and what we are going to

00:04:22,240 --> 00:04:27,670
do is we are going to show you how we

00:04:25,960 --> 00:04:31,030
can use your build so first so let's see

00:04:27,670 --> 00:04:33,340
that your build is installed the next

00:04:31,030 --> 00:04:36,040
step will be to find a specific

00:04:33,340 --> 00:04:38,650
environment that we will want to use to

00:04:36,040 --> 00:04:40,720
compile our code so we already have some

00:04:38,650 --> 00:04:42,940
we have something that is called the

00:04:40,720 --> 00:04:46,480
environment registry that is also

00:04:42,940 --> 00:04:50,080
deployed on my PC in this case but and

00:04:46,480 --> 00:04:52,390
we will and now we will issue rebuild

00:04:50,080 --> 00:04:53,860
search command to check what kind of the

00:04:52,390 --> 00:04:58,660
environments we already have in our

00:04:53,860 --> 00:05:03,190
shared and shared repository so we have

00:04:58,660 --> 00:05:04,660
we have here the build environment for

00:05:03,190 --> 00:05:08,290
Raspberry Pi and we are going to deploy

00:05:04,660 --> 00:05:10,600
it so Dimitri will run our build the

00:05:08,290 --> 00:05:14,950
deploy command that will deploy this

00:05:10,600 --> 00:05:16,180
environment and this is something that

00:05:14,950 --> 00:05:19,330
we need to do only once

00:05:16,180 --> 00:05:22,330
so once the environment is deployed to

00:05:19,330 --> 00:05:24,010
local machine we can use it many times

00:05:22,330 --> 00:05:25,360
until we change this environment and

00:05:24,010 --> 00:05:27,640
then we will have another version of the

00:05:25,360 --> 00:05:28,990
environment but until we change it we

00:05:27,640 --> 00:05:30,730
need to deploy it only once

00:05:28,990 --> 00:05:34,360
and once it is deployed you can

00:05:30,730 --> 00:05:37,870
instantly use it so now we can run our

00:05:34,360 --> 00:05:40,810
build a run with the environment name oh

00:05:37,870 --> 00:05:43,500
sorry and before that you can see that I

00:05:40,810 --> 00:05:46,870
have different environments locally and

00:05:43,500 --> 00:05:53,890
this is the one that we just deploy from

00:05:46,870 --> 00:05:56,200
the repository and now we can issue the

00:05:53,890 --> 00:05:59,710
build run command with the environment

00:05:56,200 --> 00:06:06,100
name and just run make to compile our

00:05:59,710 --> 00:06:12,490
source code as you can see that we are

00:06:06,100 --> 00:06:14,620
using specific tool chain to compile our

00:06:12,490 --> 00:06:21,120
code and if you look at our local files

00:06:14,620 --> 00:06:21,120
we can see the the build artifact here

00:06:21,310 --> 00:06:26,210
we can use our environment also enter in

00:06:24,230 --> 00:06:29,000
interactive mode so in this case we

00:06:26,210 --> 00:06:32,570
don't tell rebuilt what camera and we

00:06:29,000 --> 00:06:37,010
want to use we just run rebuild run with

00:06:32,570 --> 00:06:38,360
the environment name and now we can run

00:06:37,010 --> 00:06:39,770
different commands inside of the

00:06:38,360 --> 00:06:42,110
environment so we can see that this

00:06:39,770 --> 00:06:47,180
environment is for example is based on a

00:06:42,110 --> 00:06:49,100
bundle and we can run here also command

00:06:47,180 --> 00:06:51,380
so let's run make clean and make again

00:06:49,100 --> 00:06:55,910
and you will see that we run exactly the

00:06:51,380 --> 00:07:02,080
same same command with the same tool

00:06:55,910 --> 00:07:02,080
chain again ok so thank you

00:07:10,409 --> 00:07:16,210
so now let's see how how it works how

00:07:14,710 --> 00:07:19,539
actually rebuild work so we are

00:07:16,210 --> 00:07:21,039
leveraging Linux containers and one of

00:07:19,539 --> 00:07:25,389
the magics that we are doing is that we

00:07:21,039 --> 00:07:27,490
are mapping the local local file system

00:07:25,389 --> 00:07:30,569
into the container in order to preserve

00:07:27,490 --> 00:07:34,059
all the all the permissions and

00:07:30,569 --> 00:07:35,520
ownership when we work with our source

00:07:34,059 --> 00:07:38,080
code so the source code is located

00:07:35,520 --> 00:07:40,389
locally on our file system while we work

00:07:38,080 --> 00:07:42,339
with different environments and the good

00:07:40,389 --> 00:07:44,499
thing is that it can work on almost any

00:07:42,339 --> 00:07:47,409
modern OS so it's not only for Linux but

00:07:44,499 --> 00:07:48,909
we can run it on Mac OS and on Windows

00:07:47,409 --> 00:07:54,249
as well because they are all supported

00:07:48,909 --> 00:08:01,830
on Linux containers you can check the

00:07:54,249 --> 00:08:01,830
project here and github

00:08:12,420 --> 00:08:21,340
so like let's look at the architecture

00:08:16,000 --> 00:08:23,950
so so first thing as you already saw we

00:08:21,340 --> 00:08:26,740
use the rebuild CLI to interact with the

00:08:23,950 --> 00:08:28,750
rebuild and this is the gateway for all

00:08:26,740 --> 00:08:32,710
for the developers offering your scripts

00:08:28,750 --> 00:08:34,229
on CI or build server to use rebuild we

00:08:32,710 --> 00:08:37,630
have also something that we called

00:08:34,229 --> 00:08:39,550
environment registry and we can work

00:08:37,630 --> 00:08:44,200
with several registries now we can work

00:08:39,550 --> 00:08:45,610
with docker hub if you want your if you

00:08:44,200 --> 00:08:47,860
want your environment images to be

00:08:45,610 --> 00:08:50,200
public we can work with docker private

00:08:47,860 --> 00:08:53,110
registry and we have our own rebuild

00:08:50,200 --> 00:08:55,450
native registry and we're leveraging

00:08:53,110 --> 00:09:00,070
docker engine to running and manage the

00:08:55,450 --> 00:09:03,460
container images and the usage model is

00:09:00,070 --> 00:09:05,740
that we have this environment registry

00:09:03,460 --> 00:09:08,410
that is centralized to either our

00:09:05,740 --> 00:09:10,360
project or our organization and we have

00:09:08,410 --> 00:09:13,240
developers that can work with that build

00:09:10,360 --> 00:09:17,770
server CI servers or support and fuel

00:09:13,240 --> 00:09:20,040
engineers and of course we have and like

00:09:17,770 --> 00:09:22,960
later we'll show it as well we have a

00:09:20,040 --> 00:09:27,220
local workflow as well so you don't have

00:09:22,960 --> 00:09:29,260
to push your environments to registry

00:09:27,220 --> 00:09:31,240
but in most cases of course you would

00:09:29,260 --> 00:09:34,110
like to share them and to have the same

00:09:31,240 --> 00:09:40,030
environments between different members

00:09:34,110 --> 00:09:46,030
of your project so let's talk about

00:09:40,030 --> 00:09:48,010
rebuild CLI and we have when we build

00:09:46,030 --> 00:09:49,360
CLI we had several concepts the first of

00:09:48,010 --> 00:09:51,460
all which should be seamless for the

00:09:49,360 --> 00:09:54,570
developer execution as you saw it's easy

00:09:51,460 --> 00:09:57,400
to use it all you need you use your

00:09:54,570 --> 00:09:59,620
existing scripts that you use before

00:09:57,400 --> 00:10:04,180
that to build your software and just

00:09:59,620 --> 00:10:06,280
prefix it with rebuild run and there's

00:10:04,180 --> 00:10:08,740
no need to know anything about

00:10:06,280 --> 00:10:10,380
doctor-doctor files or other container

00:10:08,740 --> 00:10:13,660
technologies because we don't want

00:10:10,380 --> 00:10:15,760
additional knowledge to be sometimes

00:10:13,660 --> 00:10:17,920
your build system is already complicated

00:10:15,760 --> 00:10:20,080
enough we don't want to put another

00:10:17,920 --> 00:10:24,140
complication on that and start dealing

00:10:20,080 --> 00:10:28,320
with how to manage docker files

00:10:24,140 --> 00:10:30,690
another thing is that we use convention

00:10:28,320 --> 00:10:35,940
for naming so there's a name and tag and

00:10:30,690 --> 00:10:38,100
the tag should be used for showing a

00:10:35,940 --> 00:10:42,150
different version of your environment so

00:10:38,100 --> 00:10:43,950
this is specifically used for if you

00:10:42,150 --> 00:10:45,750
want to update your environment update

00:10:43,950 --> 00:10:47,490
packages in your environment so during

00:10:45,750 --> 00:10:49,020
the life cycle of the of the build

00:10:47,490 --> 00:10:51,210
environment and so of the development

00:10:49,020 --> 00:10:53,160
environment you might update it and this

00:10:51,210 --> 00:10:58,440
way you can keep track of the history of

00:10:53,160 --> 00:11:00,420
the updates and environment registry as

00:10:58,440 --> 00:11:04,530
we as I showed in our high tech chure

00:11:00,420 --> 00:11:06,720
slide stores environment registries and

00:11:04,530 --> 00:11:09,810
in what enables you the sharing of the

00:11:06,720 --> 00:11:11,490
environments between the team members so

00:11:09,810 --> 00:11:13,380
what kind of the environments we can

00:11:11,490 --> 00:11:17,280
support we can work now with the doctor

00:11:13,380 --> 00:11:20,160
hub so this is the public in this case

00:11:17,280 --> 00:11:21,960
you images will be public and this is

00:11:20,160 --> 00:11:24,270
great if you work on some project and

00:11:21,960 --> 00:11:26,720
you want you want a development

00:11:24,270 --> 00:11:30,240
environment for your project to be

00:11:26,720 --> 00:11:32,280
public publicly shared so this is a good

00:11:30,240 --> 00:11:34,440
option for you the other option is dr.

00:11:32,280 --> 00:11:36,570
primary registry this is the case if you

00:11:34,440 --> 00:11:40,340
want to deploy it locally in your

00:11:36,570 --> 00:11:43,200
organization and rebuild native registry

00:11:40,340 --> 00:11:45,840
so this is if you don't want to deal too

00:11:43,200 --> 00:11:50,840
much with the configuration of the

00:11:45,840 --> 00:11:55,470
registries as I said with support Linux

00:11:50,840 --> 00:11:58,950
Mac OS and Windows let's talk about

00:11:55,470 --> 00:12:03,450
installation of rebuild so rebuild is

00:11:58,950 --> 00:12:10,920
actually a ruby gem and the dependencies

00:12:03,450 --> 00:12:12,750
is a docker and ruby 2.0 or higher and

00:12:10,920 --> 00:12:15,210
the way you install it you just try

00:12:12,750 --> 00:12:17,940
after install Ruby you just run gem

00:12:15,210 --> 00:12:20,910
install rebuild and it deploys

00:12:17,940 --> 00:12:23,720
everything that is needed to use rebuild

00:12:20,910 --> 00:12:23,720
in your environment

00:12:28,320 --> 00:12:33,640
and after install rebuilds or the quick

00:12:31,270 --> 00:12:34,900
starters you can already run rebuild

00:12:33,640 --> 00:12:35,500
help to understand what you should do

00:12:34,900 --> 00:12:37,600
with rebuild

00:12:35,500 --> 00:12:40,330
we already configured rebuild in this

00:12:37,600 --> 00:12:43,300
case to work with the docker hub and we

00:12:40,330 --> 00:12:46,720
put some environments to docker hub

00:12:43,300 --> 00:12:49,600
already for the popular platforms and we

00:12:46,720 --> 00:12:51,940
are adding more so the moment you

00:12:49,600 --> 00:12:53,710
deployed rebuild you already can deploy

00:12:51,940 --> 00:13:02,650
environments and you already can compile

00:12:53,710 --> 00:13:06,100
your code there is a configuration file

00:13:02,650 --> 00:13:09,550
for for rebuild it's located in your

00:13:06,100 --> 00:13:13,000
home directory under dot rebuild or

00:13:09,550 --> 00:13:16,560
build conf and in this file you can

00:13:13,000 --> 00:13:19,660
configure a different options of what

00:13:16,560 --> 00:13:21,850
type of registry you want to use for

00:13:19,660 --> 00:13:23,950
your you can for your for your

00:13:21,850 --> 00:13:27,300
environments so this is the way you

00:13:23,950 --> 00:13:29,680
configure the docker hub can configure

00:13:27,300 --> 00:13:34,330
rebuild environment or you can configure

00:13:29,680 --> 00:13:39,340
a doctor private registry now let's talk

00:13:34,330 --> 00:13:41,860
about workflows how you work with with

00:13:39,340 --> 00:13:44,980
your build environments so the basic

00:13:41,860 --> 00:13:47,530
usage as we saw in the demo is you do

00:13:44,980 --> 00:13:49,870
the search you find the environment if

00:13:47,530 --> 00:13:53,740
you want to use you deploy it and then

00:13:49,870 --> 00:13:55,600
you run and of course this park is need

00:13:53,740 --> 00:13:57,370
to be done only once for each version of

00:13:55,600 --> 00:14:06,730
your for an environment that you want to

00:13:57,370 --> 00:14:08,530
use and we already saw this in the demo

00:14:06,730 --> 00:14:10,260
so actually okay we are searching and we

00:14:08,530 --> 00:14:15,100
can deploy the environment and then

00:14:10,260 --> 00:14:16,570
immediately we can use it and again we

00:14:15,100 --> 00:14:20,370
already showed you the demo the

00:14:16,570 --> 00:14:24,310
interactive usage of build environment

00:14:20,370 --> 00:14:28,240
so you don't need to execute one come up

00:14:24,310 --> 00:14:30,760
one command after each other okay you

00:14:28,240 --> 00:14:32,950
can enter your build environment and you

00:14:30,760 --> 00:14:37,660
can execute the commands inside of the

00:14:32,950 --> 00:14:38,620
environment itself and of course there

00:14:37,660 --> 00:14:39,220
are several things that you need to

00:14:38,620 --> 00:14:40,629
remember that

00:14:39,220 --> 00:14:43,839
varmint itself is not changing during

00:14:40,629 --> 00:14:46,089
the during the our build year on pros

00:14:43,839 --> 00:14:47,589
command so when you execute this command

00:14:46,089 --> 00:14:54,939
you cannot change the environment itself

00:14:47,589 --> 00:14:59,110
and the files that are created due to

00:14:54,939 --> 00:15:02,649
your build execution preserve is correct

00:14:59,110 --> 00:15:04,870
permission and ownership now in case if

00:15:02,649 --> 00:15:06,790
you want to modify your environment you

00:15:04,870 --> 00:15:10,930
have a little bit different process when

00:15:06,790 --> 00:15:13,089
you run rebuild modify with your

00:15:10,930 --> 00:15:14,949
environment name in this case you can

00:15:13,089 --> 00:15:17,069
add packages or update packages into

00:15:14,949 --> 00:15:19,360
your environment you can change

00:15:17,069 --> 00:15:22,389
environment variables if you need and

00:15:19,360 --> 00:15:24,699
then you can commit your environment

00:15:22,389 --> 00:15:29,620
locally and then you can publish it into

00:15:24,699 --> 00:15:32,230
the repository if you want to work only

00:15:29,620 --> 00:15:36,910
locally so then you just run our build e

00:15:32,230 --> 00:15:42,490
modify and commit so this is an example

00:15:36,910 --> 00:15:44,680
of how you can do it so you run our

00:15:42,490 --> 00:15:46,180
build you modify modify when the

00:15:44,680 --> 00:15:47,949
environment name and then you can run

00:15:46,180 --> 00:15:53,439
different commands to update an

00:15:47,949 --> 00:15:56,319
environment and of course do the same in

00:15:53,439 --> 00:15:58,300
the interactive mode get status of the

00:15:56,319 --> 00:16:00,160
environment so you can see that it was

00:15:58,300 --> 00:16:02,800
more actually modified and you can

00:16:00,160 --> 00:16:04,540
commit the changes if you want to revert

00:16:02,800 --> 00:16:06,579
the changes that you do to environment

00:16:04,540 --> 00:16:08,529
you can always use our build the check

00:16:06,579 --> 00:16:15,309
out and revert the changes that you did

00:16:08,529 --> 00:16:17,170
to your environment and another thing is

00:16:15,309 --> 00:16:18,519
the environment creation so we showed

00:16:17,170 --> 00:16:20,110
you how you can use ready-made

00:16:18,519 --> 00:16:22,809
environment how you can update

00:16:20,110 --> 00:16:25,149
environment but now let's say you want

00:16:22,809 --> 00:16:27,699
to create environments from scratch so

00:16:25,149 --> 00:16:29,709
the workflow is that you run run build

00:16:27,699 --> 00:16:31,600
you create to create the initial version

00:16:29,709 --> 00:16:34,240
of the environment then you run I will

00:16:31,600 --> 00:16:36,459
be the modify commit and publish that's

00:16:34,240 --> 00:16:38,709
actually already a modified workflow

00:16:36,459 --> 00:16:40,300
that you saw before and there are two

00:16:38,709 --> 00:16:43,089
ways that you can create your

00:16:40,300 --> 00:16:47,279
environment one is you can use the base

00:16:43,089 --> 00:16:47,279
image that is located in your

00:16:47,670 --> 00:16:52,810
environment repository or either on the

00:16:51,069 --> 00:16:56,170
docker hub so we can use the

00:16:52,810 --> 00:16:58,470
public container image that is published

00:16:56,170 --> 00:17:01,180
sorry official container image that is

00:16:58,470 --> 00:17:04,330
published therefore one of the districts

00:17:01,180 --> 00:17:06,880
and another way is to use the file file

00:17:04,330 --> 00:17:10,150
system and to create the environment

00:17:06,880 --> 00:17:12,430
from scratch and then after you

00:17:10,150 --> 00:17:16,450
committed you can publish it into the

00:17:12,430 --> 00:17:19,840
repository so let's put everything

00:17:16,450 --> 00:17:21,790
together and see how we can create this

00:17:19,840 --> 00:17:25,540
environment that he used in the first

00:17:21,790 --> 00:17:29,500
demo to compile a raspberry to compile

00:17:25,540 --> 00:17:32,140
our demo for raspberry pi how we can

00:17:29,500 --> 00:17:35,010
create it from scratch so Dimitri will

00:17:32,140 --> 00:17:35,010
help me here as well

00:17:35,670 --> 00:17:39,970
we didn't know what will be the state of

00:17:38,290 --> 00:17:42,820
the internet connection here so we cheat

00:17:39,970 --> 00:17:44,980
a little bit actually I have already the

00:17:42,820 --> 00:17:46,840
raspberry pi to chain I already got it

00:17:44,980 --> 00:17:50,050
from github but actually it's one

00:17:46,840 --> 00:17:52,690
command okay we just need to clone you

00:17:50,050 --> 00:18:03,240
need to clone the RPI tools so they are

00:17:52,690 --> 00:18:03,240
already here and now let's see what

00:18:11,250 --> 00:18:15,120
and we have already initial reports

00:18:13,860 --> 00:18:18,120
there once again I didn't want to create

00:18:15,120 --> 00:18:20,309
it from boo to image from scratch to

00:18:18,120 --> 00:18:21,870
take something like three minutes but I

00:18:20,309 --> 00:18:23,490
didn't know didn't know what will be the

00:18:21,870 --> 00:18:26,340
state of the internet connection here so

00:18:23,490 --> 00:18:28,590
just in case anyway we just create we

00:18:26,340 --> 00:18:33,710
just run our ability create minutes

00:18:28,590 --> 00:18:40,140
based ubuntu 16.04 and created this RPI

00:18:33,710 --> 00:18:45,240
raspberry and initial through an initial

00:18:40,140 --> 00:18:47,490
reposed initial environment and we are

00:18:45,240 --> 00:18:49,350
going to modify it in order to use it

00:18:47,490 --> 00:18:50,850
with raspberry pi so actually we need to

00:18:49,350 --> 00:18:52,710
what we need to do here is we need to

00:18:50,850 --> 00:18:56,340
copy our to change to the into the

00:18:52,710 --> 00:19:02,100
environment and we need to set we need

00:18:56,340 --> 00:19:05,220
to set environment variables for for the

00:19:02,100 --> 00:19:08,870
make to call correct compiler so that's

00:19:05,220 --> 00:19:08,870
what the material is going to do now

00:19:45,340 --> 00:19:51,280
okay so now we can exit the environment

00:19:47,870 --> 00:19:56,060
and we can see that it was modified and

00:19:51,280 --> 00:19:57,650
committed and after we saved it

00:19:56,060 --> 00:20:01,420
after we commit the environment we can

00:19:57,650 --> 00:20:01,420
immediately use it again

00:20:24,600 --> 00:20:30,200
as you can see it here in the list of

00:20:27,150 --> 00:20:30,200
our local environments

00:21:02,299 --> 00:21:07,950
okay so here it is here's the

00:21:05,510 --> 00:21:11,280
compilation result with the environments

00:21:07,950 --> 00:21:14,520
we just created during this demo so the

00:21:11,280 --> 00:21:18,690
thing is that it took us I don't know

00:21:14,520 --> 00:21:20,880
four minutes now but we know that in

00:21:18,690 --> 00:21:22,740
some organization to add the additional

00:21:20,880 --> 00:21:24,630
tool chain to their build system might

00:21:22,740 --> 00:21:31,740
take between several hours to several

00:21:24,630 --> 00:21:34,230
days so in addition we can of course

00:21:31,740 --> 00:21:36,510
work with our local environment so we

00:21:34,230 --> 00:21:38,580
can as we saw we can list them we can

00:21:36,510 --> 00:21:40,710
delete our environments and we can save

00:21:38,580 --> 00:21:44,220
and load we can save environments into

00:21:40,710 --> 00:21:47,400
the docker image that can be uploaded to

00:21:44,220 --> 00:21:52,049
the reporters that we don't support

00:21:47,400 --> 00:21:55,410
currently or and can below that from

00:21:52,049 --> 00:22:03,690
from docker file as well as we're not

00:21:55,410 --> 00:22:07,700
the docker image just a demonstration of

00:22:03,690 --> 00:22:10,049
how to use those commands as well and

00:22:07,700 --> 00:22:14,850
another thing that we can do is that we

00:22:10,049 --> 00:22:17,250
can modify environment variables for

00:22:14,850 --> 00:22:19,169
each development environment so for

00:22:17,250 --> 00:22:21,570
example we can set different compilers

00:22:19,169 --> 00:22:23,040
inside of the environment and then save

00:22:21,570 --> 00:22:24,660
the different versions of which

00:22:23,040 --> 00:22:27,750
environments we can create for example

00:22:24,660 --> 00:22:30,030
basic environment that will use guang

00:22:27,750 --> 00:22:31,980
and then we can use another version of

00:22:30,030 --> 00:22:39,390
the same environment that just that will

00:22:31,980 --> 00:22:41,910
use GCC for example and in case if we

00:22:39,390 --> 00:22:43,740
build fails for some reason we have

00:22:41,910 --> 00:22:45,690
debugging mechanisms that you can use

00:22:43,740 --> 00:22:48,600
you can enable tracing and save some

00:22:45,690 --> 00:22:54,179
logs that will help to understand what

00:22:48,600 --> 00:22:56,720
went wrong so once again it's here on

00:22:54,179 --> 00:22:56,720
github

00:22:58,200 --> 00:23:07,159
and just to summarize what we wanted to

00:23:04,889 --> 00:23:09,749
achieve is the seamless usage of the

00:23:07,159 --> 00:23:11,999
develop of the development environments

00:23:09,749 --> 00:23:14,669
to have the isolated environments for

00:23:11,999 --> 00:23:16,799
our usage and we wanted to eat to be

00:23:14,669 --> 00:23:18,269
able to easily share those environment

00:23:16,799 --> 00:23:21,119
between environments between team

00:23:18,269 --> 00:23:22,950
members what we want to do in the future

00:23:21,119 --> 00:23:26,669
is we want to add the role management

00:23:22,950 --> 00:23:29,190
for rebuild native registry so you will

00:23:26,669 --> 00:23:31,019
have so you will enable different team

00:23:29,190 --> 00:23:33,149
members the ability to create the

00:23:31,019 --> 00:23:35,609
environments and only others can use

00:23:33,149 --> 00:23:39,119
them we want to support multiple

00:23:35,609 --> 00:23:43,850
registries at the same time we want to

00:23:39,119 --> 00:23:47,639
add ID plugins so you would use rebuild

00:23:43,850 --> 00:23:50,820
straight from your favorite IDs we want

00:23:47,639 --> 00:23:54,739
to use to add user direction for a non

00:23:50,820 --> 00:23:58,309
Linux host so you can also deploy your

00:23:54,739 --> 00:24:02,249
build artifacts on the devices from

00:23:58,309 --> 00:24:05,279
rebuild when you use it not only NOx but

00:24:02,249 --> 00:24:14,299
on other OSS as well and additional

00:24:05,279 --> 00:24:14,299
tracking of environment usage questions

00:24:17,250 --> 00:24:20,240
yeah

00:24:24,200 --> 00:24:31,170
we just started so we definitely are

00:24:27,930 --> 00:24:32,880
going there so we actually just now one

00:24:31,170 --> 00:24:36,750
of our guys is creating integration

00:24:32,880 --> 00:24:38,540
reactor is working on that and we are

00:24:36,750 --> 00:24:41,000
readying additional additional

00:24:38,540 --> 00:24:43,800
environments and additional platforms

00:24:41,000 --> 00:24:45,000
that there will be already ready-made

00:24:43,800 --> 00:24:47,940
environments so when you install

00:24:45,000 --> 00:24:49,730
rebuilding and you and you go to to our

00:24:47,940 --> 00:24:52,650
docker hub you can create you just

00:24:49,730 --> 00:24:54,060
instantly can deploy the environment for

00:24:52,650 --> 00:24:56,040
the specific platform of course you can

00:24:54,060 --> 00:24:59,340
do it by yourself what we want to do to

00:24:56,040 --> 00:25:01,820
give the ability even even not to do

00:24:59,340 --> 00:25:05,510
that as well so just you know you use

00:25:01,820 --> 00:25:05,510
ready-made environments

00:25:18,639 --> 00:25:21,639
sorry

00:25:28,410 --> 00:25:32,559
yeah so you just you just package the to

00:25:31,600 --> 00:25:45,490
chain inside of the rebuilding

00:25:32,559 --> 00:25:47,830
environment yeah so actually we do have

00:25:45,490 --> 00:25:55,659
some two chains inside so when we saw it

00:25:47,830 --> 00:26:00,820
when we did our there are some more here

00:25:55,659 --> 00:26:02,650
so we have for an RF n RF 52 two chain

00:26:00,820 --> 00:26:05,140
and we have raspberry pi 2 CH and we

00:26:02,650 --> 00:26:08,409
have BeagleBoard two chain and we re

00:26:05,140 --> 00:26:12,100
adding more two chains inside but you

00:26:08,409 --> 00:26:14,490
can add any two chains so it's just it's

00:26:12,100 --> 00:26:14,490
up to you

00:26:43,210 --> 00:26:49,730
no it's it's sometimes you need

00:26:47,239 --> 00:26:52,999
different distros as we know that our

00:26:49,730 --> 00:26:54,980
proprietary to change that ask you for

00:26:52,999 --> 00:26:58,009
specific Ubuntu Fedora versions for

00:26:54,980 --> 00:27:01,009
example and quite old actually so you

00:26:58,009 --> 00:27:03,499
can pack every you can pack specific

00:27:01,009 --> 00:27:05,960
version of the operating system there so

00:27:03,499 --> 00:27:09,080
you can see here by the way I work for

00:27:05,960 --> 00:27:11,359
some other project I did I used the

00:27:09,080 --> 00:27:13,669
rebuild environments for old fedora he

00:27:11,359 --> 00:27:16,820
is here so they are based on Fedora 20

00:27:13,669 --> 00:27:20,799
or 22 or 23 with different different

00:27:16,820 --> 00:27:24,889
tools installed there so I could test

00:27:20,799 --> 00:27:27,639
some things on the quite old fedora

00:27:24,889 --> 00:27:27,639
distributions

00:27:44,549 --> 00:27:50,789
okay so thank you very much and calls to

00:27:48,779 --> 00:27:53,399
actions you can install reveal just

00:27:50,789 --> 00:27:56,759
around gem install rebuild send us

00:27:53,399 --> 00:28:00,599
emails if you have some questions go to

00:27:56,759 --> 00:28:03,659
github see the wiki see the and chrome

00:28:00,599 --> 00:28:06,059
clone the code we have here some rebuilt

00:28:03,659 --> 00:28:10,109
cheat sheet for the commands that you

00:28:06,059 --> 00:28:11,879
can use you can go or there's a link

00:28:10,109 --> 00:28:17,690
from our bill the io as well but you can

00:28:11,879 --> 00:28:21,489
go directly thank you very much

00:28:17,690 --> 00:28:21,489

YouTube URL: https://www.youtube.com/watch?v=F61MM_uuI5A


