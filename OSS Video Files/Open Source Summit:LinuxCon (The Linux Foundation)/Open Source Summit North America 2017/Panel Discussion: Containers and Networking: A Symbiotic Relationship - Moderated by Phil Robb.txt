Title: Panel Discussion: Containers and Networking: A Symbiotic Relationship - Moderated by Phil Robb
Publication date: 2017-09-14
Playlist: Open Source Summit North America 2017
Description: 
	Panel Discussion: Containers and Networking: A Symbiotic Relationship - Moderated by Phil Robb, Open Daylight Project

As cloud adoption grows, containers are increasingly being used to simplify deployment of distributed applications. Ironically, the mix of container deployment models ranging from VM to bare metal, as well as the need to manage overlay container networks independently but synchronously with the underlay, create a new thicket of networking complexity to navigate. 

This panel will discuss topics including:
An overview of containers and container networking
Special requirements vs networking business as usual
Best practices for deploying containers using SDN and NFV
Various approaches to container networking and how ONAP and other approaches to cloud orchestration can integrate with Container Orchestration Engines including Kubernetes and Docker Swarm

About Philip Robb
Phil Robb is interim executive director of OpenDaylight, an open source platform for SDN and NFV. Phil is a widely respected expert in the area of open source strategy, business impact, and governance. He is frequently asked to speak at international technology and business events and he has been consulted by policy makers including the European Commission, and the United States Department of Justice as well as numerous high technology trade organizations. Prior to joining the OpenDaylight, Phil was the director of HP’s Open Source Program Office where he had responsibility for HP’s corporate open source strategy, engagement with the open source community, oversight of the Open Source Review Board, and a variety of software development projects. Phil was focused on open source at HP from 2001 through 2012.

About Patrick Chanezon
Patrick Chanezon is member of technical staff at Docker Inc. He helps to build Docker, an open platform for distributed applications for developers and sysadmins. Software developer and storyteller, he spent 10 years building platforms at Netscape & Sun, then 10 years evangelizing platforms at Google, VMware & Microsoft. His main professional interest is in building and kickstarting the network effect for these wondrous two-sided markets called Platforms.

About Swarna Podila
Swarna Podila leads the product marketing function at Avi Networks. Prior to Avi Networks, Podila has led product marketing functions at smaller organizations such as Mocana and large enterprises such as Citrix and Symantec. Podila feels strongly about diversity and strives to bring diversity of thought, culture, and gender into workplace. In her free time, Podila loves reading books; thrillers, murder mysteries, science fiction, and personal development are her favorite genres.

About Josh Wood
Josh Wood’s passion for the rkt container runtime led him to CoreOS, where he is responsible for documentation. He enjoys photographing polydactyl cats and writing short autobiographies.

About Chris Wright
Chris Wright is the Vice President and Chief Technologist at Red Hat. During his nearly 20 years as a software engineer he has worked in the telecom industry on high availability and distributed systems and in the Linux industry on security and virtualization. He has been a Linux developer for over a decade, most of that time spent deep in the Linux kernel working on security and virtualization.  He is intrigued by the challenges that cloud computing brings to virtualization and networking, and is now focused on the cloud, KVM, network virtualization, and virtualizing network functions.  He lives in sunny Portland, OR where he is happily hacking on OpenDaylight, Open vSwitch, and OpenStack.
Captions: 
	00:00:00,030 --> 00:00:05,100
welcome everybody I believe this is the

00:00:01,979 --> 00:00:09,030
last session before lunch so hopefully

00:00:05,100 --> 00:00:11,309
you're still chipper from the morning my

00:00:09,030 --> 00:00:13,440
name is Phil Robb I work for the Linux

00:00:11,309 --> 00:00:16,350
Foundation I actually carry two titles

00:00:13,440 --> 00:00:17,730
I'm the VP of operations for networking

00:00:16,350 --> 00:00:18,990
and orchestration across all the

00:00:17,730 --> 00:00:20,730
networking projects at the Linux

00:00:18,990 --> 00:00:22,410
Foundation and I'm also currently the

00:00:20,730 --> 00:00:26,189
executive director of the open daylight

00:00:22,410 --> 00:00:29,130
project this panel is on containers and

00:00:26,189 --> 00:00:31,710
networking a symbiotic relationship I've

00:00:29,130 --> 00:00:33,059
got some canned questions of course but

00:00:31,710 --> 00:00:34,530
you know hopefully we actually get a

00:00:33,059 --> 00:00:36,540
dialogue going and we get a good

00:00:34,530 --> 00:00:38,190
discussion amongst the group we seem to

00:00:36,540 --> 00:00:39,989
have a pretty good crowd so I hope we

00:00:38,190 --> 00:00:42,090
can have a good and lively discussion

00:00:39,989 --> 00:00:44,010
I'm gonna go ahead and start off by

00:00:42,090 --> 00:00:46,590
having each of our panelists introduce

00:00:44,010 --> 00:00:48,989
themselves tell you where they're from

00:00:46,590 --> 00:00:51,120
what their background is relative to

00:00:48,989 --> 00:00:52,980
containers and networking as well as

00:00:51,120 --> 00:00:55,500
give them the opportunity to right off

00:00:52,980 --> 00:00:58,109
the bat you know Express what they most

00:00:55,500 --> 00:01:00,660
importantly want to convey in this panel

00:00:58,109 --> 00:01:03,030
to you as part of their introduction so

00:01:00,660 --> 00:01:04,920
I'll go ahead and start right here with

00:01:03,030 --> 00:01:10,670
Chris to my right Chris go ahead and

00:01:04,920 --> 00:01:10,670
start might have

00:01:14,130 --> 00:01:19,170
[Music]

00:01:16,159 --> 00:01:28,740
okay my name is Chris Wright I work for

00:01:19,170 --> 00:01:32,540
Red Hat I I'm from Portland and my I run

00:01:28,740 --> 00:01:34,890
the technology office in in Red Hat and

00:01:32,540 --> 00:01:36,420
I'm actually on the board of the open

00:01:34,890 --> 00:01:39,750
daylight project as well

00:01:36,420 --> 00:01:41,640
my focus and my group is looking for and

00:01:39,750 --> 00:01:42,930
understanding what the networking needs

00:01:41,640 --> 00:01:46,350
are so we spent a lot of time looking at

00:01:42,930 --> 00:01:47,160
networking there's one thing I think I'd

00:01:46,350 --> 00:01:49,789
like you to take away

00:01:47,160 --> 00:01:53,100
it's that networking is absolutely

00:01:49,789 --> 00:01:54,330
fundamental to both the infrastructure

00:01:53,100 --> 00:01:59,160
that we're building in the modern

00:01:54,330 --> 00:02:02,250
applications that were building hi I'm

00:01:59,160 --> 00:02:05,490
Josh wood from core OS where I am

00:02:02,250 --> 00:02:07,619
responsible for documentation Chris

00:02:05,490 --> 00:02:09,780
tells me I look like I'm from Portland

00:02:07,619 --> 00:02:11,370
but I am in fact work out of San

00:02:09,780 --> 00:02:14,190
Francisco and from Kansas City Missouri

00:02:11,370 --> 00:02:16,670
originally but I think is a compliment

00:02:14,190 --> 00:02:19,350
right looks like I'm from Portland

00:02:16,670 --> 00:02:21,150
clearly a core OS a lot of our concerns

00:02:19,350 --> 00:02:25,290
and container networking revolve around

00:02:21,150 --> 00:02:27,680
the modularity in the abstraction of the

00:02:25,290 --> 00:02:30,420
interface to different network regimes

00:02:27,680 --> 00:02:33,000
we want containers to be portable

00:02:30,420 --> 00:02:34,260
between your own data center and cloud

00:02:33,000 --> 00:02:36,570
provider environments and more

00:02:34,260 --> 00:02:38,459
importantly between those cloud provider

00:02:36,570 --> 00:02:40,019
environments and that's sort of at the

00:02:38,459 --> 00:02:42,180
heart of this heart and soul of the work

00:02:40,019 --> 00:02:44,760
we've done around CNI first in our

00:02:42,180 --> 00:02:47,310
rocket container engine and now in

00:02:44,760 --> 00:02:49,890
kubernetes itself what we like to think

00:02:47,310 --> 00:02:51,930
of as sort of a BFS four different

00:02:49,890 --> 00:02:53,430
networking regimes something that that

00:02:51,930 --> 00:02:56,060
allows a lot of different kinds of

00:02:53,430 --> 00:02:58,940
networks and network policy No

00:02:56,060 --> 00:03:00,890
IP address management schemes to be

00:02:58,940 --> 00:03:02,930
plugged into what we think of as this

00:03:00,890 --> 00:03:05,209
important orchestration system without

00:03:02,930 --> 00:03:07,489
requiring that system to internalize a

00:03:05,209 --> 00:03:10,099
lot of knowledge about those individual

00:03:07,489 --> 00:03:12,890
kinds of network styles of networking so

00:03:10,099 --> 00:03:14,900
in in my view and I think in defining

00:03:12,890 --> 00:03:17,720
some of core OSS products and projects

00:03:14,900 --> 00:03:20,840
that view towards modularity and the the

00:03:17,720 --> 00:03:22,910
the key point of good software

00:03:20,840 --> 00:03:25,700
architecture revolving around interfaces

00:03:22,910 --> 00:03:32,299
is probably the thing I hope I can draw

00:03:25,700 --> 00:03:33,769
out the most today better hey hi

00:03:32,299 --> 00:03:34,430
everybody I'm Patrick Sheehan is all

00:03:33,769 --> 00:03:37,280
from docker

00:03:34,430 --> 00:03:42,680
I'm from Paris originally not from

00:03:37,280 --> 00:03:44,269
Portland but I live in San Francisco so

00:03:42,680 --> 00:03:45,769
I work at docker I'm a member of

00:03:44,269 --> 00:03:49,970
technical staff there

00:03:45,769 --> 00:03:52,160
I represent doctor at the CN CF and my

00:03:49,970 --> 00:03:54,019
first project when I joined docker two

00:03:52,160 --> 00:03:58,060
years ago was to help establish a

00:03:54,019 --> 00:04:01,609
plug-in model for networking and storage

00:03:58,060 --> 00:04:04,760
in terms of networking what I'd like you

00:04:01,609 --> 00:04:08,750
to remember a docker we really try to

00:04:04,760 --> 00:04:11,209
make complicated things simple so trying

00:04:08,750 --> 00:04:14,150
to make the simple things easy to use

00:04:11,209 --> 00:04:16,160
and then the difficult things possible

00:04:14,150 --> 00:04:19,100
and that's what we're trying to do with

00:04:16,160 --> 00:04:24,200
our container networking model and the

00:04:19,100 --> 00:04:26,750
plug-in system that's behind it I am

00:04:24,200 --> 00:04:28,460
sorta padilha from a company called RV

00:04:26,750 --> 00:04:32,250
networks I'm not from

00:04:28,460 --> 00:04:35,370
Francisca I'm from Southie live in San

00:04:32,250 --> 00:04:38,580
Jose and work in Santa Clara the one

00:04:35,370 --> 00:04:40,500
thing that it is I hear over and over

00:04:38,580 --> 00:04:42,870
again from the networking industry is

00:04:40,500 --> 00:04:45,000
that there are two distinct elements of

00:04:42,870 --> 00:04:46,500
networking one is the connectivity part

00:04:45,000 --> 00:04:49,289
where we have seen a lot of discussions

00:04:46,500 --> 00:04:51,479
and movements where we've pretty much

00:04:49,289 --> 00:04:53,580
resolved everything I mean there's

00:04:51,479 --> 00:04:54,810
probably an overlay that just works out

00:04:53,580 --> 00:04:56,879
of the box

00:04:54,810 --> 00:04:59,879
the other interesting partner the most

00:04:56,879 --> 00:05:02,250
exciting part is where the where it

00:04:59,879 --> 00:05:03,569
comes to the non connectivity part that

00:05:02,250 --> 00:05:05,909
the network infrastructure provides

00:05:03,569 --> 00:05:09,659
could be the service discovery like IP

00:05:05,909 --> 00:05:12,180
address management or DNS scalability

00:05:09,659 --> 00:05:15,289
security all these kind of elements that

00:05:12,180 --> 00:05:17,879
we have to constantly keep in mind and

00:05:15,289 --> 00:05:20,580
one of the things that I mean all these

00:05:17,879 --> 00:05:22,740
services the non connectivity services

00:05:20,580 --> 00:05:25,080
can inform something called service mesh

00:05:22,740 --> 00:05:26,400
and we had other networks we provide the

00:05:25,080 --> 00:05:27,750
service mesh for the modern

00:05:26,400 --> 00:05:30,719
architectures and also for the

00:05:27,750 --> 00:05:32,400
traditional architectures going back to

00:05:30,719 --> 00:05:35,879
the Lord problems and kind of things and

00:05:32,400 --> 00:05:38,129
like Patrick I also represent Abby at CN

00:05:35,879 --> 00:05:43,169
CF kubernetes and the OpenStack

00:05:38,129 --> 00:05:45,960
communities very good I guess one out so

00:05:43,169 --> 00:05:48,900
Chris what are the options today with

00:05:45,960 --> 00:05:51,810
regard to container networking CNI is cm

00:05:48,900 --> 00:05:54,089
of an etc and how did it how did they

00:05:51,810 --> 00:05:56,129
come about and what are they trying to

00:05:54,089 --> 00:05:59,389
solve where are their similarities and

00:05:56,129 --> 00:05:59,389
where are their differences

00:06:00,229 --> 00:06:07,419
we're not gonna make much

00:06:03,639 --> 00:06:08,979
so maybe a little bit of background of

00:06:07,419 --> 00:06:13,629
it and I won't be able to speak as well

00:06:08,979 --> 00:06:17,199
to CNN better to CNN but in both cases

00:06:13,629 --> 00:06:20,830
the goals of CNI and CNM are to create

00:06:17,199 --> 00:06:23,860
some kind of call it standardization and

00:06:20,830 --> 00:06:29,379
plugg ability into networking or the

00:06:23,860 --> 00:06:32,710
container registration system and obn

00:06:29,379 --> 00:06:34,210
mean for oven and your mounts it being

00:06:32,710 --> 00:06:36,400
slightly different which is more of an

00:06:34,210 --> 00:06:40,509
implementation which we could then plug

00:06:36,400 --> 00:06:43,750
in to these plugin interfaces see and I

00:06:40,509 --> 00:06:46,020
came about as heard from Josh from

00:06:43,750 --> 00:06:49,080
quarrel as the work they are doing

00:06:46,020 --> 00:06:51,190
trying to create it with some standard

00:06:49,080 --> 00:06:53,560
specifications around the container run

00:06:51,190 --> 00:06:55,750
time which was ab c-- and then was later

00:06:53,560 --> 00:06:58,349
been folded into work we've done in OCI

00:06:55,750 --> 00:07:00,909
and standardized in part of the OCI

00:06:58,349 --> 00:07:03,340
runtime specification and then

00:07:00,909 --> 00:07:04,810
associated with that a container is not

00:07:03,340 --> 00:07:08,199
very useful if it's not connected to the

00:07:04,810 --> 00:07:11,050
network c and i came about and then

00:07:08,199 --> 00:07:13,389
similar timeframe doctor was working on

00:07:11,050 --> 00:07:15,490
the network and i again i can't really

00:07:13,389 --> 00:07:18,729
represent well that the heritage there

00:07:15,490 --> 00:07:21,400
mom so it looked to get Patrick to to

00:07:18,729 --> 00:07:23,529
give us the details in a different

00:07:21,400 --> 00:07:26,889
parallel universe is the implementation

00:07:23,529 --> 00:07:29,469
side and that's open V switch as one

00:07:26,889 --> 00:07:30,669
example of a virtual switch that sits on

00:07:29,469 --> 00:07:33,520
the host that's connecting all the

00:07:30,669 --> 00:07:36,610
different containers together and ovn

00:07:33,520 --> 00:07:38,680
being a control plane managing OBS

00:07:36,610 --> 00:07:40,180
instances buildings or logical

00:07:38,680 --> 00:07:44,500
topologies and cut

00:07:40,180 --> 00:07:46,389
some containers from from point of view

00:07:44,500 --> 00:07:48,250
we've gotten involved in many of these

00:07:46,389 --> 00:07:53,289
different projects and currently we've

00:07:48,250 --> 00:07:56,850
spent its time building ovn into

00:07:53,289 --> 00:07:59,229
kubernetes through the C&I interface and

00:07:56,850 --> 00:08:01,830
you know for us it's about building

00:07:59,229 --> 00:08:04,240
connectivity between the different

00:08:01,830 --> 00:08:07,419
services the application developers are

00:08:04,240 --> 00:08:10,000
building and I think what's most

00:08:07,419 --> 00:08:11,500
important out of all that you know at

00:08:10,000 --> 00:08:14,380
the beginning I said I I care a lot

00:08:11,500 --> 00:08:17,580
about networking is fundamental to

00:08:14,380 --> 00:08:21,970
modern infrastructure and applications

00:08:17,580 --> 00:08:25,090
may be equally important because it's so

00:08:21,970 --> 00:08:28,030
fundamental networking is not the domain

00:08:25,090 --> 00:08:30,849
expertise of application developers and

00:08:28,030 --> 00:08:34,089
even of infrastructure operations teams

00:08:30,849 --> 00:08:35,680
on the server side so finding the right

00:08:34,089 --> 00:08:38,770
balance of separation of duty and

00:08:35,680 --> 00:08:40,599
keeping it really simple for people who

00:08:38,770 --> 00:08:44,350
need it but don't care about the details

00:08:40,599 --> 00:08:46,360
is is really critical and in both of the

00:08:44,350 --> 00:08:47,920
cases of CNI and CNM you're seeing an

00:08:46,360 --> 00:08:49,600
abstraction that's really friendly to

00:08:47,920 --> 00:08:51,790
the application developer who's trying

00:08:49,600 --> 00:08:53,770
to connect services together without

00:08:51,790 --> 00:08:57,490
having to really care a lot about the

00:08:53,770 --> 00:08:59,200
underlying underlying details hopefully

00:08:57,490 --> 00:09:01,589
I got some of answer some of your

00:08:59,200 --> 00:09:01,589
question

00:09:04,029 --> 00:09:10,930
so I'd say CNI and CNM don't play at the

00:09:07,900 --> 00:09:13,810
same level CNM is really a container

00:09:10,930 --> 00:09:16,779
model or it's a container networking

00:09:13,810 --> 00:09:20,320
model that we created for docker that

00:09:16,779 --> 00:09:22,209
involves all that creates a specific set

00:09:20,320 --> 00:09:25,240
of objects that need to be implemented

00:09:22,209 --> 00:09:28,510
in the actual system in that model

00:09:25,240 --> 00:09:31,079
there's a driver model that corresponds

00:09:28,510 --> 00:09:34,120
to the plug-in so I'd say the driver

00:09:31,079 --> 00:09:36,700
object in the CNM model corresponds to

00:09:34,120 --> 00:09:39,100
the CNI plugins and actually these

00:09:36,700 --> 00:09:42,339
drivers that are implemented in darker

00:09:39,100 --> 00:09:44,620
with Network our team is working to make

00:09:42,339 --> 00:09:47,500
sure that they could work well as a CNI

00:09:44,620 --> 00:09:52,580
plugins so that they participate into

00:09:47,500 --> 00:09:54,710
the CNI working group in in kubernetes

00:09:52,580 --> 00:09:57,580
another angle that I wanted to add this

00:09:54,710 --> 00:10:00,460
this driver model allows operators to

00:09:57,580 --> 00:10:04,400
really optimize the networking layer

00:10:00,460 --> 00:10:06,860
these that network operators have using

00:10:04,400 --> 00:10:11,750
traditional technologies like Mac VLAN

00:10:06,860 --> 00:10:14,420
or IP VLAN and but for developers it

00:10:11,750 --> 00:10:15,980
with simple interface where they just

00:10:14,420 --> 00:10:18,140
need to define the network that their

00:10:15,980 --> 00:10:19,850
containers should be on in order to do

00:10:18,140 --> 00:10:21,620
the partitioning without knowing

00:10:19,850 --> 00:10:24,770
internally how it's going to be

00:10:21,620 --> 00:10:27,860
implemented by the operators so creating

00:10:24,770 --> 00:10:29,990
that that separation an abstraction

00:10:27,860 --> 00:10:32,300
between what the operators need to

00:10:29,990 --> 00:10:35,150
configure in order for the system to be

00:10:32,300 --> 00:10:36,860
very efficient and what developers need

00:10:35,150 --> 00:10:38,990
to define at the high level for the

00:10:36,860 --> 00:10:40,880
applications to be well separated is

00:10:38,990 --> 00:10:43,010
really what all these efforts are about

00:10:40,880 --> 00:10:46,010
the last thing I wanted to add is

00:10:43,010 --> 00:10:48,770
there's an important aspect of

00:10:46,010 --> 00:10:50,900
networking that our team have been

00:10:48,770 --> 00:10:55,370
working a lot on recently which is

00:10:50,900 --> 00:10:57,020
Windows is the whole other beast and

00:10:55,370 --> 00:11:02,360
we've been working pretty actively with

00:10:57,020 --> 00:11:05,720
Microsoft I think in 1706 of our of

00:11:02,360 --> 00:11:09,200
docker platform that ship recently now

00:11:05,720 --> 00:11:17,900
you can finally have swarm clusters that

00:11:09,200 --> 00:11:19,430
are multi OS between Windows or not do

00:11:17,900 --> 00:11:21,050
you want to comment there you know I

00:11:19,430 --> 00:11:22,970
actually just had maybe a sort of

00:11:21,050 --> 00:11:24,620
continuing question for you on that

00:11:22,970 --> 00:11:28,130
Patrick I'm like you were talking about

00:11:24,620 --> 00:11:30,860
sort of doing ports from from from the

00:11:28,130 --> 00:11:34,070
drivers to the like CNI plug-in model

00:11:30,860 --> 00:11:36,320
like what what does that port look like

00:11:34,070 --> 00:11:38,270
in short and like like what are some of

00:11:36,320 --> 00:11:40,190
the differences between these these two

00:11:38,270 --> 00:11:44,300
ways of abstracting the the network

00:11:40,190 --> 00:11:48,500
interface yeah so these sports means

00:11:44,300 --> 00:11:50,180
implementing this in terms of

00:11:48,500 --> 00:11:54,740
implementation that are in the lib

00:11:50,180 --> 00:11:57,560
Network that's all I know I'm not coding

00:11:54,740 --> 00:11:59,450
these drivers myself though but my doing

00:11:57,560 --> 00:12:01,280
our team would be a good person to ping

00:11:59,450 --> 00:12:04,760
about right on well so I mean it the the

00:12:01,280 --> 00:12:05,750
the the fact that such ports would be

00:12:04,760 --> 00:12:08,930
possible even

00:12:05,750 --> 00:12:10,370
conceptually I think is minoo tells some

00:12:08,930 --> 00:12:12,020
of the value of trying to construct

00:12:10,370 --> 00:12:13,760
these sort of interfaces so that we can

00:12:12,020 --> 00:12:15,650
kind of trade these parts around a

00:12:13,760 --> 00:12:17,720
little bit yeah and I would add that

00:12:15,650 --> 00:12:20,780
that's one of the value that the cloud

00:12:17,720 --> 00:12:23,810
native foundation provides helping all

00:12:20,780 --> 00:12:28,570
these projects interoperate between them

00:12:23,810 --> 00:12:35,930
well Saad agreed I'd like to just add to

00:12:28,570 --> 00:12:37,220
that I think we see non networking as

00:12:35,930 --> 00:12:39,230
Chris mentioned non networking

00:12:37,220 --> 00:12:40,760
application developers deploying all

00:12:39,230 --> 00:12:44,510
these network services so how do we make

00:12:40,760 --> 00:12:46,460
it more simple for them to deploy like a

00:12:44,510 --> 00:12:47,870
service discovery service or an artist

00:12:46,460 --> 00:12:51,500
killing service Lord balancing service

00:12:47,870 --> 00:12:53,060
or DNS resolution kind of service so how

00:12:51,500 --> 00:12:54,560
do we make this easier and serve as

00:12:53,060 --> 00:12:57,170
meshes I think that's where the exciting

00:12:54,560 --> 00:13:00,590
space is and thanks to envoy being just

00:12:57,170 --> 00:13:03,230
announced this morning it's it's an

00:13:00,590 --> 00:13:05,390
exciting space and it it solves an

00:13:03,230 --> 00:13:08,150
interesting challenge because it's not

00:13:05,390 --> 00:13:11,180
being addressed in all these at least in

00:13:08,150 --> 00:13:13,670
all these years as something that the

00:13:11,180 --> 00:13:15,830
non networking developers or the non

00:13:13,670 --> 00:13:18,320
networking teams could also handle it

00:13:15,830 --> 00:13:20,120
themselves it's more like it enables

00:13:18,320 --> 00:13:22,070
that self-service so that now the app

00:13:20,120 --> 00:13:24,770
developers can focus on their real

00:13:22,070 --> 00:13:26,450
things where they get to deploy or role

00:13:24,770 --> 00:13:29,000
or the blue/green updates if they need

00:13:26,450 --> 00:13:32,390
to do that kind of lets them to focus on

00:13:29,000 --> 00:13:35,960
day 2 operations rather than kind of

00:13:32,390 --> 00:13:38,420
pulling them into the mire of that day

00:13:35,960 --> 00:13:41,800
zero on how to set up my infrastructure

00:13:38,420 --> 00:13:41,800
how to set up my network infrastructure

00:13:43,660 --> 00:13:49,790
Swarna so what is the relationship

00:13:46,520 --> 00:13:51,020
between VMs and containers now and what

00:13:49,790 --> 00:13:53,480
you see coming in the future

00:13:51,020 --> 00:13:57,130
how does Greenfield vs. brownfield

00:13:53,480 --> 00:13:57,130
environments affect that relationship

00:13:58,839 --> 00:14:03,769
containers and Williams I love the

00:14:00,800 --> 00:14:05,870
argument I love the relationship at

00:14:03,769 --> 00:14:09,740
least from what we see containers are

00:14:05,870 --> 00:14:11,480
more single application kind of

00:14:09,740 --> 00:14:13,970
deployment and single purpose to kind of

00:14:11,480 --> 00:14:16,550
deployment and it's less about the

00:14:13,970 --> 00:14:18,800
containers versus VMS and it's more

00:14:16,550 --> 00:14:20,810
about the containers and VMS that we see

00:14:18,800 --> 00:14:23,089
at least that's being more and more

00:14:20,810 --> 00:14:26,000
adopter increasingly adopted in the

00:14:23,089 --> 00:14:28,790
enterprises you can even deploy

00:14:26,000 --> 00:14:30,500
container in a VM so I think thankfully

00:14:28,790 --> 00:14:32,540
at least the audience that we talk to

00:14:30,500 --> 00:14:35,089
don't look at it as containers versus

00:14:32,540 --> 00:14:38,810
VMs there's a different use case in each

00:14:35,089 --> 00:14:40,610
of those and app teams can deploy their

00:14:38,810 --> 00:14:42,410
application or their instance in a

00:14:40,610 --> 00:14:45,220
container quickly up and get it up and

00:14:42,410 --> 00:14:48,380
running and test it in a quick

00:14:45,220 --> 00:14:51,110
environment and just migrate that to a

00:14:48,380 --> 00:14:53,600
production kind of an instance where we

00:14:51,110 --> 00:14:56,570
see in the brown field versus green

00:14:53,600 --> 00:14:59,240
field kind of deployments is we see a

00:14:56,570 --> 00:15:01,730
lot more green field being deployed on

00:14:59,240 --> 00:15:04,070
bare metal but they have a choice to

00:15:01,730 --> 00:15:07,640
deploy either on bare metal or even

00:15:04,070 --> 00:15:09,440
public cloud these days so it probably

00:15:07,640 --> 00:15:11,329
will become more like a container in a

00:15:09,440 --> 00:15:12,980
VM in a public cloud because that's the

00:15:11,329 --> 00:15:17,230
only way you can deploy a container in a

00:15:12,980 --> 00:15:20,149
public cloud anyway in brownfield I see

00:15:17,230 --> 00:15:24,790
at least from our deployments that we

00:15:20,149 --> 00:15:24,790
see it's more around virtual deployments

00:15:28,090 --> 00:15:31,540
I just added a perspective you're too

00:15:31,000 --> 00:15:37,440
nice

00:15:31,540 --> 00:15:40,030
it's a mess you've got legacy bare-metal

00:15:37,440 --> 00:15:41,590
applications that we all understand and

00:15:40,030 --> 00:15:45,970
they're sitting on some VLAN that's been

00:15:41,590 --> 00:15:48,550
programmed for you know a decade you've

00:15:45,970 --> 00:15:50,470
got VMs that are part of this brownfield

00:15:48,550 --> 00:15:52,480
environment that may or may not be

00:15:50,470 --> 00:15:54,790
hosting containers that need to talk to

00:15:52,480 --> 00:15:56,590
the legacy side of the network and then

00:15:54,790 --> 00:15:58,360
potentially to containers which may be

00:15:56,590 --> 00:16:00,220
running on bare metal or in VMs and you

00:15:58,360 --> 00:16:02,050
have to make that all work and it really

00:16:00,220 --> 00:16:04,300
is complicated especially when you have

00:16:02,050 --> 00:16:06,610
different network orchestration

00:16:04,300 --> 00:16:08,110
components managing the container Pete's

00:16:06,610 --> 00:16:12,280
as well as the underlying virtual

00:16:08,110 --> 00:16:14,040
machine piece so it's non-trivial and so

00:16:12,280 --> 00:16:17,050
the greenfield environment is really

00:16:14,040 --> 00:16:18,850
nice because you can simplify the

00:16:17,050 --> 00:16:20,770
problem domain but it's not realistic

00:16:18,850 --> 00:16:23,170
for most enterprises they have this

00:16:20,770 --> 00:16:24,490
really rich history of stuff that just

00:16:23,170 --> 00:16:26,860
isn't gonna go away anytime soon

00:16:24,490 --> 00:16:28,540
so I think it's really it's really

00:16:26,860 --> 00:16:30,280
complex and some of the things that I

00:16:28,540 --> 00:16:31,750
know we're working on is integration

00:16:30,280 --> 00:16:35,770
between those layers so that you can

00:16:31,750 --> 00:16:38,580
have maintain the isolation that's

00:16:35,770 --> 00:16:40,870
critical but don't do something that's

00:16:38,580 --> 00:16:42,310
fundamentally lacking a performance like

00:16:40,870 --> 00:16:43,930
double encapsulation just because you

00:16:42,310 --> 00:16:46,120
have two different systems that don't

00:16:43,930 --> 00:16:47,890
know how to talk to each other so well

00:16:46,120 --> 00:16:49,420
there's a lot it's interesting to use

00:16:47,890 --> 00:16:50,740
that word double encapsulation because

00:16:49,420 --> 00:16:52,810
something that's come up in kind of a

00:16:50,740 --> 00:16:54,940
discussion around the edge of this is

00:16:52,810 --> 00:16:58,540
one of the reasons we might want to put

00:16:54,940 --> 00:17:00,070
VMs into containers is so that we can

00:16:58,540 --> 00:17:02,020
then communicate with the container

00:17:00,070 --> 00:17:03,400
networks that we do have a good

00:17:02,020 --> 00:17:04,720
understanding of and an orchestration

00:17:03,400 --> 00:17:06,880
system that we're working you know

00:17:04,720 --> 00:17:09,520
within and and that like sort of dragged

00:17:06,880 --> 00:17:11,829
them into our world but if that is if

00:17:09,520 --> 00:17:14,680
anything is double encapsulation it's

00:17:11,829 --> 00:17:16,300
got to be that right so although we

00:17:14,680 --> 00:17:17,770
would point out that the you know the

00:17:16,300 --> 00:17:20,110
Borg and Omega systems at Google

00:17:17,770 --> 00:17:22,589
fundamentally schedule all of the VM

00:17:20,110 --> 00:17:25,270
workloads inside of containers that are

00:17:22,589 --> 00:17:26,980
that those systems know and understand

00:17:25,270 --> 00:17:29,470
how to deploy how to monitor how to

00:17:26,980 --> 00:17:31,000
manage the lifecycle up so I think

00:17:29,470 --> 00:17:32,290
that's a little you know sort it amused

00:17:31,000 --> 00:17:33,450
me when I came up in conversation

00:17:32,290 --> 00:17:36,820
[Music]

00:17:33,450 --> 00:17:39,010
yeah actually to rebound up on that and

00:17:36,820 --> 00:17:41,600
answer the original question but what we

00:17:39,010 --> 00:17:46,220
see in terms of customers adoption

00:17:41,600 --> 00:17:47,900
I I think while VM have been very

00:17:46,220 --> 00:17:49,520
successful in the past ten years they

00:17:47,900 --> 00:17:52,340
haven't completely replaced bare-metal

00:17:49,520 --> 00:17:53,930
you still see both and I think with

00:17:52,340 --> 00:17:55,460
containers it will be the same there

00:17:53,930 --> 00:17:57,710
will be more workloads moving to

00:17:55,460 --> 00:18:00,650
containers but still they will coexist

00:17:57,710 --> 00:18:02,150
with VMs and with bare metal like

00:18:00,650 --> 00:18:03,770
creating the mess that you were talking

00:18:02,150 --> 00:18:06,170
about Chris

00:18:03,770 --> 00:18:07,430
that said what one of the trends that

00:18:06,170 --> 00:18:09,620
we're seeing with a lot of our

00:18:07,430 --> 00:18:12,560
enterprise customers is that they have a

00:18:09,620 --> 00:18:14,660
lot of these legacy applications sitting

00:18:12,560 --> 00:18:17,300
in VMs today they don't they are

00:18:14,660 --> 00:18:19,370
touching because they are welcome

00:18:17,300 --> 00:18:21,920
figured and one of the things that we

00:18:19,370 --> 00:18:24,200
see them doing is modernizing these

00:18:21,920 --> 00:18:26,780
traditional applications by container

00:18:24,200 --> 00:18:35,150
izing them and then deploying them on an

00:18:26,780 --> 00:18:38,120
enterprise container platform so this is

00:18:35,150 --> 00:18:39,020
only a 40-minute session so I want to

00:18:38,120 --> 00:18:40,220
make sure that there's plenty of

00:18:39,020 --> 00:18:42,020
opportunities for you guys to ask

00:18:40,220 --> 00:18:43,490
questions and it's it's always nice to

00:18:42,020 --> 00:18:46,160
get a set of experts up here with a

00:18:43,490 --> 00:18:51,290
variety of viewpoints any questions from

00:18:46,160 --> 00:18:54,550
the audience at this point okay

00:18:51,290 --> 00:18:54,550
sure there's one in the back

00:19:06,440 --> 00:19:09,519
[Music]

00:19:10,140 --> 00:19:20,370
it'll be grand perfectly that's how well

00:19:16,000 --> 00:19:23,650
next question that sounds like the Brian

00:19:20,370 --> 00:19:26,740
so there's some real challenges this

00:19:23,650 --> 00:19:28,870
visit so how do you even start there's

00:19:26,740 --> 00:19:31,270
been a lot of work done to date to

00:19:28,870 --> 00:19:32,950
enable the kind of workloads that that

00:19:31,270 --> 00:19:35,470
Brian is describing in virtual machines

00:19:32,950 --> 00:19:38,590
and some of those work some of that work

00:19:35,470 --> 00:19:41,050
is actually largely unrelated to

00:19:38,590 --> 00:19:43,930
networking and it's more about the

00:19:41,050 --> 00:19:46,570
platform being able to support high

00:19:43,930 --> 00:19:49,390
performance network applications running

00:19:46,570 --> 00:19:52,600
inside a virtual machine or in this case

00:19:49,390 --> 00:19:55,900
inside a container and then connecting

00:19:52,600 --> 00:20:00,130
that to a more physical portion of the

00:19:55,900 --> 00:20:02,380
network and that work took you know a

00:20:00,130 --> 00:20:04,060
number of years we're just starting to

00:20:02,380 --> 00:20:07,960
see that in the container space and

00:20:04,060 --> 00:20:09,790
we'll have a whole set of just kind of

00:20:07,960 --> 00:20:12,550
architectural discussions and arguments

00:20:09,790 --> 00:20:16,750
over what's sane and what's not in terms

00:20:12,550 --> 00:20:18,790
of how you first where do you start to

00:20:16,750 --> 00:20:20,380
break what feels like cloud abstractions

00:20:18,790 --> 00:20:23,860
when you do something like pin an

00:20:20,380 --> 00:20:27,220
application to a Numa node and give an

00:20:23,860 --> 00:20:29,380
application access to multiple devices

00:20:27,220 --> 00:20:31,960
in the same pot or in the same container

00:20:29,380 --> 00:20:33,790
essentially and trying to connect it to

00:20:31,960 --> 00:20:37,300
the physical network all of those things

00:20:33,790 --> 00:20:38,920
are either the beginnings of active

00:20:37,300 --> 00:20:42,370
discussions or discussions that will be

00:20:38,920 --> 00:20:44,670
pending but today it's we're not really

00:20:42,370 --> 00:20:49,120
there the container space is really

00:20:44,670 --> 00:20:52,480
servicing more enterprise and web style

00:20:49,120 --> 00:20:54,850
workloads so there's there's real work I

00:20:52,480 --> 00:20:56,080
believe there's a lot of potential and

00:20:54,850 --> 00:20:59,350
we just have to find the right path

00:20:56,080 --> 00:21:01,780
forward because I do think the the value

00:20:59,350 --> 00:21:03,490
of containers is well understood from a

00:21:01,780 --> 00:21:05,770
development process point of view and

00:21:03,490 --> 00:21:07,720
then from a network application and

00:21:05,770 --> 00:21:10,210
packet processing performance

00:21:07,720 --> 00:21:10,840
perspective you eliminate a lot of

00:21:10,210 --> 00:21:13,050
overhead

00:21:10,840 --> 00:21:15,370
by working in a container directly

00:21:13,050 --> 00:21:19,390
coupled to the OS which could be coupled

00:21:15,370 --> 00:21:22,530
to two IO devices without having the

00:21:19,390 --> 00:21:22,530
virtualization overhead in the way

00:21:29,920 --> 00:21:35,090
so I I know I said no I'm not

00:21:33,440 --> 00:21:38,480
knowledgeable enough to sit on that

00:21:35,090 --> 00:21:40,310
table so I really like what Chris said

00:21:38,480 --> 00:21:41,390
it's a mess out there right and then we

00:21:40,310 --> 00:21:42,830
knew we know that there are a lot of

00:21:41,390 --> 00:21:45,710
developers in the VM world a lot of

00:21:42,830 --> 00:21:47,180
developers in the container world and in

00:21:45,710 --> 00:21:49,610
reality especially in the IT environment

00:21:47,180 --> 00:21:50,630
customers have both in bare metal and

00:21:49,610 --> 00:21:53,140
legacy stuff too

00:21:50,630 --> 00:21:54,860
so from your perspective where are the

00:21:53,140 --> 00:21:56,510
projects that you think that two

00:21:54,860 --> 00:21:58,400
communities can collaborate and then

00:21:56,510 --> 00:22:09,410
really make a good stack for our

00:21:58,400 --> 00:22:11,510
customers well I mean I think and

00:22:09,410 --> 00:22:13,160
Patrick certainly already mentioned it

00:22:11,510 --> 00:22:15,590
by name and I think we've all kind of

00:22:13,160 --> 00:22:17,030
hinted at it and and you know

00:22:15,590 --> 00:22:18,740
come closer around the edges of it and

00:22:17,030 --> 00:22:20,810
it's one of the key things I think we

00:22:18,740 --> 00:22:23,600
believe that the value of the CNC F is

00:22:20,810 --> 00:22:27,590
is in helping to define these things and

00:22:23,600 --> 00:22:30,200
I think it's why as we sort of prototype

00:22:27,590 --> 00:22:33,020
tanned thought about CNI and kind of

00:22:30,200 --> 00:22:36,020
built it out for rocket we always had in

00:22:33,020 --> 00:22:37,340
mind moving it farther up streams so

00:22:36,020 --> 00:22:39,170
that something like that could at least

00:22:37,340 --> 00:22:40,580
engender a discussion for the other

00:22:39,170 --> 00:22:41,840
folks that we were trying you know we're

00:22:40,580 --> 00:22:44,450
all trying to solve really really

00:22:41,840 --> 00:22:46,880
similar problems so I think the CNC F

00:22:44,450 --> 00:22:49,220
can kind of be the hub of discussions

00:22:46,880 --> 00:22:52,400
and and and currently obviously is the

00:22:49,220 --> 00:22:54,980
owner of that CNI standard and to go

00:22:52,400 --> 00:22:57,500
back to the the song I used in my

00:22:54,980 --> 00:22:59,330
introduction I think when you can

00:22:57,500 --> 00:23:01,580
describe a development environment as a

00:22:59,330 --> 00:23:04,400
mess when it's new enough when there's

00:23:01,580 --> 00:23:06,380
so much interest and so many different

00:23:04,400 --> 00:23:07,970
corporate and development and technical

00:23:06,380 --> 00:23:08,840
and architectural points of view

00:23:07,970 --> 00:23:11,990
represented

00:23:08,840 --> 00:23:15,140
that's when interfaces and standards for

00:23:11,990 --> 00:23:17,780
those interfaces become absolutely key

00:23:15,140 --> 00:23:20,240
because if we have something modular

00:23:17,780 --> 00:23:23,330
that lets our applications or a cluster

00:23:20,240 --> 00:23:26,180
Orchestrator connect with with whatever

00:23:23,330 --> 00:23:28,010
brilliant new networking scheme that I'm

00:23:26,180 --> 00:23:31,310
never going to be the person who thinks

00:23:28,010 --> 00:23:33,020
of that modularity is what gives that

00:23:31,310 --> 00:23:36,050
new scheme a chance to actually be

00:23:33,020 --> 00:23:37,490
adopted to get any uptake to to really

00:23:36,050 --> 00:23:38,880
be something you can work with and use

00:23:37,490 --> 00:23:41,610
you know if

00:23:38,880 --> 00:23:44,100
if they're all a driver interface that

00:23:41,610 --> 00:23:45,750
you have to master at some low C

00:23:44,100 --> 00:23:47,910
programming level to be able to employ

00:23:45,750 --> 00:23:50,250
them at all then as you know we've all

00:23:47,910 --> 00:23:52,500
sort of in different ways had the had in

00:23:50,250 --> 00:23:55,410
different words said you know a lot of

00:23:52,500 --> 00:23:57,210
these are not the core competency of the

00:23:55,410 --> 00:23:59,910
application developers actually want to

00:23:57,210 --> 00:24:01,770
use these networks so I think the the

00:23:59,910 --> 00:24:03,810
modularity of interfaces is key to

00:24:01,770 --> 00:24:06,060
empowering the kind of people who have

00:24:03,810 --> 00:24:07,680
really interesting ideas for what

00:24:06,060 --> 00:24:09,120
applications ought to do rather than

00:24:07,680 --> 00:24:11,220
really interesting ideas about how to

00:24:09,120 --> 00:24:15,050
implement networks it might be the best

00:24:11,220 --> 00:24:17,490
way to put it and I wanted to add that

00:24:15,050 --> 00:24:20,190
along with the cloud native computing

00:24:17,490 --> 00:24:21,570
foundation the CNC F Atlas I personally

00:24:20,190 --> 00:24:23,160
would make a request to the Linux

00:24:21,570 --> 00:24:25,350
Foundation to also think along the same

00:24:23,160 --> 00:24:28,530
lines with because Linux foundation from

00:24:25,350 --> 00:24:30,900
the Open Networking the own app or I

00:24:28,530 --> 00:24:33,270
forget the acronyms but from that

00:24:30,900 --> 00:24:35,580
initiative or from those projects they

00:24:33,270 --> 00:24:37,230
address the those projects at least set

00:24:35,580 --> 00:24:39,660
standards and address the traditional

00:24:37,230 --> 00:24:41,940
networking and cloud native foundation

00:24:39,660 --> 00:24:45,120
the CNC F addresses this from the

00:24:41,940 --> 00:24:46,920
container cloud native kind of angle so

00:24:45,120 --> 00:24:48,120
I think bringing some kind of standards

00:24:46,920 --> 00:24:50,640
and bringing that kind of modular

00:24:48,120 --> 00:24:51,680
interfaces is much more critical now

00:24:50,640 --> 00:24:54,270
more than ever

00:24:51,680 --> 00:24:58,110
so if anyone can help with the Linux

00:24:54,270 --> 00:24:59,910
Foundation just something for all of us

00:24:58,110 --> 00:25:02,790
really need to look at sorry

00:24:59,910 --> 00:25:05,160
duly noted yes and I can actually say

00:25:02,790 --> 00:25:10,320
that in particularly between onap and CN

00:25:05,160 --> 00:25:12,780
CF discussions have begun to occur there

00:25:10,320 --> 00:25:15,630
is a place so you asked for a project

00:25:12,780 --> 00:25:20,940
it's a little hard because that it's

00:25:15,630 --> 00:25:22,890
kind of you quickly get into Emacs

00:25:20,940 --> 00:25:25,860
versus VI kind of discussions where it's

00:25:22,890 --> 00:25:27,840
hard to have a rational discussion there

00:25:25,860 --> 00:25:30,030
are technologies today that exist that

00:25:27,840 --> 00:25:33,180
allow you to bridge and they just all

00:25:30,030 --> 00:25:36,240
use different schemes whether it's

00:25:33,180 --> 00:25:38,730
gateways or whether it's integrate

00:25:36,240 --> 00:25:41,550
directly with existing dynamic routing

00:25:38,730 --> 00:25:43,380
infrastructure but again you get this

00:25:41,550 --> 00:25:44,580
kind of these these arguments I think

00:25:43,380 --> 00:25:47,250
josh has a great point that if you

00:25:44,580 --> 00:25:49,170
create well understood interfaces you

00:25:47,250 --> 00:25:50,530
can at least choose your own

00:25:49,170 --> 00:25:52,180
implementation

00:25:50,530 --> 00:25:53,680
and maybe that's punting the problem

00:25:52,180 --> 00:25:56,260
down the road a little bit but

00:25:53,680 --> 00:25:59,440
eventually we'll see some best-of-breed

00:25:56,260 --> 00:26:01,720
like best practices emerge in the CNC F

00:25:59,440 --> 00:26:03,300
not not that we're here to pump pimp the

00:26:01,720 --> 00:26:06,190
CNC F but just so happens there's a

00:26:03,300 --> 00:26:09,100
working group focused on networking so

00:26:06,190 --> 00:26:10,540
there's within projects there's project

00:26:09,100 --> 00:26:12,010
activity doing development there's a

00:26:10,540 --> 00:26:15,700
working group focus on networking trying

00:26:12,010 --> 00:26:17,320
to understand kind of this isn't really

00:26:15,700 --> 00:26:18,760
how they would describe themselves I'll

00:26:17,320 --> 00:26:20,830
describe it this way how do we evolve

00:26:18,760 --> 00:26:22,900
something like CNI just put it really

00:26:20,830 --> 00:26:24,400
simple but really understand what are

00:26:22,900 --> 00:26:25,930
the use cases what are the what are the

00:26:24,400 --> 00:26:29,620
challenges that need to be addressed

00:26:25,930 --> 00:26:32,290
from a cloud native perspective and as

00:26:29,620 --> 00:26:34,780
Phil alluded to there is work underway

00:26:32,290 --> 00:26:36,640
to bring about closer collaboration

00:26:34,780 --> 00:26:38,050
across all these different projects that

00:26:36,640 --> 00:26:40,300
are addressing all sorts of different

00:26:38,050 --> 00:26:42,780
parts of networking not just container

00:26:40,300 --> 00:26:42,780
networking

00:27:20,860 --> 00:27:28,540
I see I'd say I'm not the best qualified

00:27:26,650 --> 00:27:31,510
to answer that question that would be my

00:27:28,540 --> 00:27:36,040
doing our team so I can connect you to

00:27:31,510 --> 00:27:38,830
him to to see what his plans are in this

00:27:36,040 --> 00:27:41,790
area I know what they're working on

00:27:38,830 --> 00:27:44,080
right now is to make sure that the the

00:27:41,790 --> 00:27:46,240
plug-in that we shipped by default in

00:27:44,080 --> 00:27:49,660
darker like Magdalene IP VLAN and

00:27:46,240 --> 00:27:51,549
overlay could work as well as CNI

00:27:49,660 --> 00:27:53,770
plugins but here I think you're talking

00:27:51,549 --> 00:27:57,730
about the reverse like using CNI plugins

00:27:53,770 --> 00:28:03,850
in darker networks as plugins so I don't

00:27:57,730 --> 00:28:06,090
know what the plan is for that very good

00:28:03,850 --> 00:28:06,090
Oh

00:28:07,600 --> 00:28:13,150
duly noted Thanks and I'll ask you for

00:28:10,809 --> 00:28:16,360
your email address after that so that we

00:28:13,150 --> 00:28:19,030
can continue on email you bring up an

00:28:16,360 --> 00:28:21,520
awesome point I was talking about it's

00:28:19,030 --> 00:28:23,020
got to be simple so you're essentially

00:28:21,520 --> 00:28:24,940
you're obscuring a lot of the internal

00:28:23,020 --> 00:28:26,890
implementations it also has to be

00:28:24,940 --> 00:28:28,510
debuggable so you need to have

00:28:26,890 --> 00:28:30,580
visibility and maybe that's more on the

00:28:28,510 --> 00:28:32,919
op side maybe there's some part where

00:28:30,580 --> 00:28:36,250
the at the app dev side you need to see

00:28:32,919 --> 00:28:38,559
but the more complex these stacks get

00:28:36,250 --> 00:28:41,520
the more difficult it is to do any kind

00:28:38,559 --> 00:28:44,169
of debugging and on a on a Linux server

00:28:41,520 --> 00:28:47,020
server administrator understands how to

00:28:44,169 --> 00:28:48,309
do you know pings and trace routes and

00:28:47,020 --> 00:28:51,160
TCP domes to kind of figure out what's

00:28:48,309 --> 00:28:53,500
going on when you've got Mac VLANs and

00:28:51,160 --> 00:28:55,390
IP VLANs and VX lands and all this stuff

00:28:53,500 --> 00:28:57,460
you quickly don't even know what's going

00:28:55,390 --> 00:28:59,350
on and so having tools that help you

00:28:57,460 --> 00:29:01,540
understand the state of the network give

00:28:59,350 --> 00:29:03,250
you visibility you know draw

00:29:01,540 --> 00:29:05,650
instrumentation and let you know where

00:29:03,250 --> 00:29:08,049
when a physical link goes down what

00:29:05,650 --> 00:29:10,330
containers are affected that's really

00:29:08,049 --> 00:29:12,190
critical if we don't get that right we

00:29:10,330 --> 00:29:15,450
were kind of building something that's

00:29:12,190 --> 00:29:15,450
just not maintainable

00:29:49,950 --> 00:29:55,480
well just to be clear I didn't want to

00:29:53,620 --> 00:29:57,040
say that they are similar to VMs it's

00:29:55,480 --> 00:30:00,130
really just practical reality there's

00:29:57,040 --> 00:30:01,780
connectivity requirements so we should

00:30:00,130 --> 00:30:04,300
absolutely work towards the simplest

00:30:01,780 --> 00:30:07,230
model especially in a can

00:30:04,300 --> 00:30:10,510
pardon the pun but in a contained space

00:30:07,230 --> 00:30:13,420
and so you know one example is give

00:30:10,510 --> 00:30:15,430
every container an IP address and ipv6

00:30:13,420 --> 00:30:17,800
address and just consider it a simple

00:30:15,430 --> 00:30:20,050
routing problem that's great except

00:30:17,800 --> 00:30:22,030
you're not going to be connected by

00:30:20,050 --> 00:30:24,550
default to the rest of your applications

00:30:22,030 --> 00:30:25,690
that are inside the enterprise or in

00:30:24,550 --> 00:30:28,810
some cases even to the rest of the

00:30:25,690 --> 00:30:30,310
internet so you know yes we need to be

00:30:28,810 --> 00:30:32,230
doing things that are simple and make

00:30:30,310 --> 00:30:33,910
sense but we also have to factor in

00:30:32,230 --> 00:30:37,090
reality and whether that's gateways or

00:30:33,910 --> 00:30:38,920
or working through existing integration

00:30:37,090 --> 00:30:40,720
with existing routing protocols we you

00:30:38,920 --> 00:30:41,170
know we have to do something that makes

00:30:40,720 --> 00:30:43,560
sense

00:30:41,170 --> 00:30:45,580
I know for as a concrete example

00:30:43,560 --> 00:30:47,620
something something that we spend a lot

00:30:45,580 --> 00:30:49,060
of time on is building infrastructure

00:30:47,620 --> 00:30:49,630
with our customers that's virtual

00:30:49,060 --> 00:30:51,880
machine-based

00:30:49,630 --> 00:30:54,460
like using OpenStack and then deploying

00:30:51,880 --> 00:30:55,900
kubernetes on top of that and doing that

00:30:54,460 --> 00:30:58,900
in a way where they're separate creates

00:30:55,900 --> 00:31:01,360
a headache for both all the teams

00:30:58,900 --> 00:31:02,710
involved so there's a project in

00:31:01,360 --> 00:31:04,720
OpenStack that builds a bridge between

00:31:02,710 --> 00:31:06,910
the two so you have plug ability at the

00:31:04,720 --> 00:31:09,430
infrastructure networking layer and it's

00:31:06,910 --> 00:31:11,860
exposing that plug a built that network

00:31:09,430 --> 00:31:13,770
capability into kubernetes so that you

00:31:11,860 --> 00:31:16,660
can do something that looks more like

00:31:13,770 --> 00:31:18,430
VLAN tag networks in a container out to

00:31:16,660 --> 00:31:19,840
the VMS which are ultimately VX land

00:31:18,430 --> 00:31:23,050
tagged on the physical network so it's

00:31:19,840 --> 00:31:25,770
not quite this complicated mess that you

00:31:23,050 --> 00:31:25,770
might build otherwise

00:31:27,500 --> 00:31:31,600
any other comments from the panelists on

00:31:29,450 --> 00:31:31,600
that

00:31:31,660 --> 00:31:37,250
okay other questions

00:31:34,530 --> 00:31:37,250
yes sir

00:31:58,360 --> 00:32:02,170
so first of all maybe even just for the

00:32:00,580 --> 00:32:04,210
question of for the benefit of the room

00:32:02,170 --> 00:32:08,710
but at least for my own benefit what

00:32:04,210 --> 00:32:11,590
okay so the question is what can sort of

00:32:08,710 --> 00:32:14,730
a a group of vendors do to get involved

00:32:11,590 --> 00:32:14,730
in the discussion about

00:32:40,899 --> 00:32:48,049
right okay okay so again that likely the

00:32:45,379 --> 00:32:49,279
question is we have a we've got some

00:32:48,049 --> 00:32:51,049
really trick hardware for high

00:32:49,279 --> 00:32:53,990
performance and networking how can I

00:32:51,049 --> 00:32:55,730
actually get these new systems to allow

00:32:53,990 --> 00:32:57,799
my applications to take advantage of

00:32:55,730 --> 00:32:59,809
that hardware like how do we connect

00:32:57,799 --> 00:33:01,669
kind of the the last couple of inches

00:32:59,809 --> 00:33:03,799
between some nifty container

00:33:01,669 --> 00:33:05,450
orchestration system and I have this

00:33:03,799 --> 00:33:07,340
awesome hardware I bought from Dell last

00:33:05,450 --> 00:33:12,379
week with these wicked network cards in

00:33:07,340 --> 00:33:14,539
it right I'd say to me that answer

00:33:12,379 --> 00:33:16,129
probably lie you know like the the

00:33:14,539 --> 00:33:18,230
proper place to answer that question

00:33:16,129 --> 00:33:20,120
probably lies in the like what I think

00:33:18,230 --> 00:33:22,309
of as the layer of orchestration like

00:33:20,120 --> 00:33:25,509
the some something is making scheduling

00:33:22,309 --> 00:33:29,629
decisions about where containers run

00:33:25,509 --> 00:33:31,549
part of the the knowledge that that

00:33:29,629 --> 00:33:33,740
orchestration system can look at to make

00:33:31,549 --> 00:33:35,840
those decisions is the nature and

00:33:33,740 --> 00:33:37,720
equipment of individual compute nodes

00:33:35,840 --> 00:33:41,840
that are available in the cluster now

00:33:37,720 --> 00:33:44,179
like for your standard around the mills

00:33:41,840 --> 00:33:46,009
stateless application of them of the the

00:33:44,179 --> 00:33:47,210
new model type that we want to run on

00:33:46,009 --> 00:33:50,509
this kind of infrastructure it's a

00:33:47,210 --> 00:33:53,029
little bit anti-pattern to ask I want to

00:33:50,509 --> 00:33:55,549
run only on a place with an SSD disk in

00:33:53,029 --> 00:33:58,460
a super high-performance GB network card

00:33:55,549 --> 00:34:01,100
in it right but that sort of tagging is

00:33:58,460 --> 00:34:02,659
possible even just in the in the the

00:34:01,100 --> 00:34:05,750
basic state of the art of an

00:34:02,659 --> 00:34:07,759
Orchestrator like kubernetes today to to

00:34:05,750 --> 00:34:11,980
say that this group of applications

00:34:07,759 --> 00:34:14,569
based on its manifest this this set of

00:34:11,980 --> 00:34:17,300
containers should only be scheduled the

00:34:14,569 --> 00:34:19,579
machines that that match some some

00:34:17,300 --> 00:34:22,069
hardware requirement that could be there

00:34:19,579 --> 00:34:23,990
could be those kind of cards or a kernel

00:34:22,069 --> 00:34:28,369
with with support for the bypass feature

00:34:23,990 --> 00:34:30,020
in it so that would be like maybe my

00:34:28,369 --> 00:34:31,940
general answer on a boots in the ground

00:34:30,020 --> 00:34:35,000
way of like how would I do that tomorrow

00:34:31,940 --> 00:34:38,020
if I were trying to do it how to advise

00:34:35,000 --> 00:34:41,149
you to get involved in the discussion of

00:34:38,020 --> 00:34:42,310
like what can we do to automate those

00:34:41,149 --> 00:34:44,580
decisions

00:34:42,310 --> 00:34:44,580
like

00:35:08,869 --> 00:35:11,499
yeah

00:35:12,490 --> 00:35:17,140
well I'm and so it seems like I've been

00:35:14,609 --> 00:35:19,390
not quite answering your question for

00:35:17,140 --> 00:35:22,270
about 25 minutes now and I apologize for

00:35:19,390 --> 00:35:23,920
that but I know certainly things that

00:35:22,270 --> 00:35:26,230
would that we hear from our customers

00:35:23,920 --> 00:35:28,300
and one of the major things we try to

00:35:26,230 --> 00:35:30,070
support with with the tecktonik product

00:35:28,300 --> 00:35:32,349
and a lot of things we do at core OS is

00:35:30,070 --> 00:35:34,810
we have customers who have a continuing

00:35:32,349 --> 00:35:37,349
bare-metal on-premises story for reasons

00:35:34,810 --> 00:35:40,690
of compliance or regulatory demands or

00:35:37,349 --> 00:35:43,240
performance that they're going to

00:35:40,690 --> 00:35:47,380
continue to have and those customers ask

00:35:43,240 --> 00:35:50,260
us questions about really similar if not

00:35:47,380 --> 00:35:51,849
exactly identical things so I haven't

00:35:50,260 --> 00:35:53,410
necessarily heard a question about doing

00:35:51,849 --> 00:35:55,630
kernel bypass for high-performance

00:35:53,410 --> 00:35:57,190
networking one thing I get asked about

00:35:55,630 --> 00:35:59,710
really frequently is we've made a

00:35:57,190 --> 00:36:02,410
certain amount of investment in machines

00:35:59,710 --> 00:36:06,609
with these particular GPUs so that we

00:36:02,410 --> 00:36:08,950
can offload that kind of processing to

00:36:06,609 --> 00:36:11,380
the GPUs how do we support that with our

00:36:08,950 --> 00:36:13,780
container workloads how can we sort of

00:36:11,380 --> 00:36:15,280
mark out those machines among their the

00:36:13,780 --> 00:36:18,130
other nodes that they're within a

00:36:15,280 --> 00:36:19,450
cluster to me that's a really really

00:36:18,130 --> 00:36:21,430
similar kind of question that's gonna

00:36:19,450 --> 00:36:23,770
have an answer that's probably provided

00:36:21,430 --> 00:36:25,510
out of similar primitives so it like

00:36:23,770 --> 00:36:27,070
it's it's something you know we're

00:36:25,510 --> 00:36:28,660
interested in like that you know that's

00:36:27,070 --> 00:36:32,680
an interesting thought to me to try to

00:36:28,660 --> 00:36:35,830
figure out how to solve those so you're

00:36:32,680 --> 00:36:38,290
spot-on I alluded to it earlier I don't

00:36:35,830 --> 00:36:40,690
know if I saw the lightning you know

00:36:38,290 --> 00:36:43,839
thing I did it's optimized workloads

00:36:40,690 --> 00:36:47,220
and GPUs is a perfect example and it's

00:36:43,839 --> 00:36:50,290
maybe a more accessible example to the

00:36:47,220 --> 00:36:53,380
cloud Native community because you you

00:36:50,290 --> 00:36:55,330
really draw out this instinctive

00:36:53,380 --> 00:36:58,869
reaction which is that is a bad idea

00:36:55,330 --> 00:37:00,609
don't do that but the reality is these

00:36:58,869 --> 00:37:03,430
are these are application workloads that

00:37:00,609 --> 00:37:05,109
that are the could benefit from running

00:37:03,430 --> 00:37:07,150
in this orchestration platform so the

00:37:05,109 --> 00:37:08,349
discussions will be orchestration

00:37:07,150 --> 00:37:10,930
project-specific

00:37:08,349 --> 00:37:13,089
I expect and I know specifically in

00:37:10,930 --> 00:37:14,980
kubernetes it's happening in the

00:37:13,089 --> 00:37:19,300
resource management sig where they're

00:37:14,980 --> 00:37:20,920
focused on scheduling to hardware the

00:37:19,300 --> 00:37:23,230
scheduling constraints that take into

00:37:20,920 --> 00:37:25,510
account hardware capabilities and in

00:37:23,230 --> 00:37:28,390
addition to that there is

00:37:25,510 --> 00:37:30,130
something that internally we call

00:37:28,390 --> 00:37:31,480
performance sensitive applications but

00:37:30,130 --> 00:37:33,310
the work is happening in the resource

00:37:31,480 --> 00:37:35,770
management sig which is looking at Numa

00:37:33,310 --> 00:37:37,840
pinning for could even be HPC workloads

00:37:35,770 --> 00:37:39,280
doesn't necessarily have to be what

00:37:37,840 --> 00:37:41,290
Brian was alluding to earlier which was

00:37:39,280 --> 00:37:45,970
the network function virtualization kind

00:37:41,290 --> 00:37:47,530
of workloads and related to that would

00:37:45,970 --> 00:37:50,220
be the what I mentioned earlier is the

00:37:47,530 --> 00:37:53,530
CNC F working group focus on networking

00:37:50,220 --> 00:37:54,940
that's a place where the industry tries

00:37:53,530 --> 00:37:57,610
to collaborate to figure out what are

00:37:54,940 --> 00:38:00,730
the networking specific requirements and

00:37:57,610 --> 00:38:02,710
in there oh you know in the resource

00:38:00,730 --> 00:38:06,130
management sig and related networking

00:38:02,710 --> 00:38:07,810
groups bypass for offloads is the kind

00:38:06,130 --> 00:38:09,910
of topic that comes up and again you hit

00:38:07,810 --> 00:38:12,730
this instinctive reaction that like

00:38:09,910 --> 00:38:15,820
that's not cloud that's not cloudy but

00:38:12,730 --> 00:38:19,240
you look at public clouds and they

00:38:15,820 --> 00:38:21,700
already offer compute is no longer

00:38:19,240 --> 00:38:24,010
homogeneous they already I mean first it

00:38:21,700 --> 00:38:25,990
was you get more memory or more CPUs and

00:38:24,010 --> 00:38:29,560
it's not very interesting but it's IO

00:38:25,990 --> 00:38:32,650
devices it's it storage side as well as

00:38:29,560 --> 00:38:35,380
network side GPUs so you see

00:38:32,650 --> 00:38:37,480
specialization in the large-scale clouds

00:38:35,380 --> 00:38:39,610
already so it's clear that we need to

00:38:37,480 --> 00:38:42,630
support that in the container

00:38:39,610 --> 00:38:42,630
orchestration platforms

00:38:45,609 --> 00:38:48,609
okay

00:38:59,710 --> 00:39:02,809
[Music]

00:39:28,650 --> 00:39:33,970
final question Patrick so what would you

00:39:32,470 --> 00:39:35,620
consider the most popular and

00:39:33,970 --> 00:39:37,630
interesting use case for containers that

00:39:35,620 --> 00:39:39,940
you've seen to date and how do you think

00:39:37,630 --> 00:39:43,000
that might evolve over the next year or

00:39:39,940 --> 00:39:44,770
two what what networking tools do you

00:39:43,000 --> 00:39:48,490
see is the most critical for further

00:39:44,770 --> 00:40:07,420
adoption of containers configuration

00:39:48,490 --> 00:40:10,540
lifecycle management about where they

00:40:07,420 --> 00:40:12,880
take existing apps in VMs there are some

00:40:10,540 --> 00:40:15,460
tools that lets you generate layers or a

00:40:12,880 --> 00:40:17,530
container and then generate the doctor

00:40:15,460 --> 00:40:20,050
file and you can just talk arise that

00:40:17,530 --> 00:40:22,630
pretty quickly and then they deploy that

00:40:20,050 --> 00:40:24,910
onto modern infrastructure and then

00:40:22,630 --> 00:40:26,770
eventually very often that's their road

00:40:24,910 --> 00:40:31,090
to the cloud as well they start

00:40:26,770 --> 00:40:33,250
deploying them internally use case I've

00:40:31,090 --> 00:40:41,260
seen recently that they keep for example

00:40:33,250 --> 00:40:44,470
the Oracle database on Prem providers

00:40:41,260 --> 00:40:47,470
so we've seen that pretty often and now

00:40:44,470 --> 00:40:49,720
the most interesting use case which is a

00:40:47,470 --> 00:40:55,750
different question and talking about the

00:40:49,720 --> 00:40:58,270
future in one large company that I won't

00:40:55,750 --> 00:41:00,910
mention I won't mention their name but

00:40:58,270 --> 00:41:03,730
I've seen a large company doing lots of

00:41:00,910 --> 00:41:06,760
different IT and industrial internet

00:41:03,730 --> 00:41:10,720
scenarios where they starting to deploy

00:41:06,760 --> 00:41:13,240
docker in factory floors close to

00:41:10,720 --> 00:41:16,060
sensors to aggregate all the data send

00:41:13,240 --> 00:41:19,330
that to a gateway that then sends that

00:41:16,060 --> 00:41:21,280
to the cloud to do analytics and these

00:41:19,330 --> 00:41:24,850
people there they are putting docker in

00:41:21,280 --> 00:41:29,680
drones in very small devices that are

00:41:24,850 --> 00:41:32,800
sent to the field in jet engines so I

00:41:29,680 --> 00:41:35,650
can see containers being used in lots of

00:41:32,800 --> 00:41:39,090
different use cases and scenarios for

00:41:35,650 --> 00:41:40,770
IOT where the

00:41:39,090 --> 00:41:43,860
tools that we have built for cloud

00:41:40,770 --> 00:41:45,240
native workloads don't work for example

00:41:43,860 --> 00:41:47,700
how do you do orchestrations of

00:41:45,240 --> 00:41:49,710
containers in a system where half of the

00:41:47,700 --> 00:41:53,090
nodes are not connected to the network

00:41:49,710 --> 00:41:55,620
most of the time so the all the raft

00:41:53,090 --> 00:41:57,750
protocol that we are using both in

00:41:55,620 --> 00:41:59,760
kubernetes and in swarm just don't work

00:41:57,750 --> 00:42:01,800
there so I think there's lots of

00:41:59,760 --> 00:42:04,050
development to be done in this area and

00:42:01,800 --> 00:42:07,680
then in terms of networking to go back

00:42:04,050 --> 00:42:09,890
to the MTA use case one of the things

00:42:07,680 --> 00:42:12,600
that I've seen people asking a lot is

00:42:09,890 --> 00:42:15,180
integration of the the existing tools

00:42:12,600 --> 00:42:16,770
like Magdalene and IP VLAN into

00:42:15,180 --> 00:42:24,180
container stacks and that's what we're

00:42:16,770 --> 00:42:25,830
doing as I mentioned at the beginning of

00:42:24,180 --> 00:42:29,850
40 minutes was gonna go really fast

00:42:25,830 --> 00:42:32,640
we've now hit 42 so I want you to help

00:42:29,850 --> 00:42:35,790
me in thanking the panelists please

00:42:32,640 --> 00:42:35,790
[Music]

00:42:37,539 --> 00:42:40,929
and enjoy your lunch and the rest of the

00:42:40,419 --> 00:42:43,289
conference

00:42:40,929 --> 00:42:43,289

YouTube URL: https://www.youtube.com/watch?v=TNmF4qDOyNA


