Title: OpenSDS: Storage Challenges in a Cloud Native Era - Allen Samuels, Western Digital
Publication date: 2017-09-13
Playlist: Open Source Summit North America 2017
Description: 
	OpenSDS: Storage Challenges in a Cloud Native Era - Allen Samuels, Western Digital

Cloud-native adoption is disrupting the traditional enterprise data center landscape forcing traditional hardware vendors to rethink their strategies in a software-defined era to better address the storage challenges faced by their customers. In this session, we will share how leading vendors are coming together in the OpenSDS community to solve these challenges, and building open solutions that support Kubernetes, Mesos, Docker, CloudFoundry, OpenStack and other open source cloud ecosystems.

About Allen Samuels
Allen joined SanDisk in 2013 as an Engineering Fellow, he is responsible for directing software development for SanDiskâ€™s system level products. He has previously served as Chief Architect at Weitek Corp. and Citrix, and founded several companies including AMKAR Consulting, Orbital Data Corporation, and Cirtas Systems. Allen has a Bachelor of Science in Electrical Engineering from Rice University.
Captions: 
	00:00:00,030 --> 00:00:05,819
so this is a session on open SDS

00:00:03,449 --> 00:00:07,770
software-defined storage some work

00:00:05,819 --> 00:00:09,450
that's going on in that area if you

00:00:07,770 --> 00:00:11,910
really don't care too much about storage

00:00:09,450 --> 00:00:14,580
then feel free to zone out or you know

00:00:11,910 --> 00:00:17,160
find some other place a better time to

00:00:14,580 --> 00:00:19,050
be spent my name is Alan Samuels I'm

00:00:17,160 --> 00:00:20,939
engineering fellow Western Digital I'll

00:00:19,050 --> 00:00:23,670
have to caution you if you were a close

00:00:20,939 --> 00:00:25,880
follower of the schedule you didn't see

00:00:23,670 --> 00:00:28,080
my name up there until about a week ago

00:00:25,880 --> 00:00:31,170
originally this session was going to be

00:00:28,080 --> 00:00:33,360
given by a gentleman that's also part of

00:00:31,170 --> 00:00:35,579
this community that works for Huawei and

00:00:33,360 --> 00:00:37,200
he had a conflict at the last minute and

00:00:35,579 --> 00:00:38,550
he shouted out at an emergency can

00:00:37,200 --> 00:00:42,149
somebody do this for me

00:00:38,550 --> 00:00:44,190
and I said okay I can do it and but I

00:00:42,149 --> 00:00:46,680
didn't have a lot of time so he gave me

00:00:44,190 --> 00:00:48,660
the slides so I'm gonna walk through the

00:00:46,680 --> 00:00:50,910
slides and yes I've looked at them but I

00:00:48,660 --> 00:00:53,309
can't claim to be intimately familiar

00:00:50,910 --> 00:00:54,899
with them so there may be a question or

00:00:53,309 --> 00:00:57,180
two that pops up that I may be as

00:00:54,899 --> 00:01:00,690
bumfuzzled as the rest of us are and if

00:00:57,180 --> 00:01:03,780
that's the case then I can connect you

00:01:00,690 --> 00:01:06,119
with Steve and we can both figure it out

00:01:03,780 --> 00:01:07,830
a little later on so if you bear with me

00:01:06,119 --> 00:01:10,530
I think most of your questions will get

00:01:07,830 --> 00:01:14,360
answered and we'll just dive right into

00:01:10,530 --> 00:01:17,520
that so this is about storage

00:01:14,360 --> 00:01:20,430
particularly in the cloud world and if

00:01:17,520 --> 00:01:22,740
you you know if you sit back and you

00:01:20,430 --> 00:01:31,170
look at what's going on for storage in

00:01:22,740 --> 00:01:33,360
the cloud world it happened okay there's

00:01:31,170 --> 00:01:35,520
a simplified picture on the right of

00:01:33,360 --> 00:01:38,700
what's going on on storage in the cloud

00:01:35,520 --> 00:01:40,770
world and I can tell you that that is a

00:01:38,700 --> 00:01:44,610
very simplified picture of what's going

00:01:40,770 --> 00:01:50,040
on and to make it you know to boil it

00:01:44,610 --> 00:01:52,909
all down it's a mess a it's been a mess

00:01:50,040 --> 00:01:52,909
for a long time

00:01:53,170 --> 00:01:58,210
and a while ago a couple of us got

00:01:56,080 --> 00:02:02,590
together and said well maybe it doesn't

00:01:58,210 --> 00:02:04,390
have to be quite as messy so you know we

00:02:02,590 --> 00:02:06,790
looked at the kind of problems that

00:02:04,390 --> 00:02:09,759
people are running into there's a short

00:02:06,790 --> 00:02:12,730
list of things on the Left don't need to

00:02:09,759 --> 00:02:14,800
and for those of you snapping pictures

00:02:12,730 --> 00:02:16,840
these will all get uploaded and you can

00:02:14,800 --> 00:02:18,489
get nice high-res copies instead of

00:02:16,840 --> 00:02:21,130
blurry things that you look at later on

00:02:18,489 --> 00:02:27,489
scratch your head is that my finger or

00:02:21,130 --> 00:02:31,780
is that the picture okay but hey and yes

00:02:27,489 --> 00:02:35,340
I have a staff meeting now but thank you

00:02:31,780 --> 00:02:40,239
for rescuing me from my staff meeting

00:02:35,340 --> 00:02:43,120
and anyways you know the kinds of

00:02:40,239 --> 00:02:46,150
problems that are there are just legion

00:02:43,120 --> 00:02:48,690
you know you've got issues of all these

00:02:46,150 --> 00:02:51,100
different frameworks and they're all

00:02:48,690 --> 00:02:52,840
well not all that you know that you've

00:02:51,100 --> 00:02:54,400
got the container orchestration

00:02:52,840 --> 00:02:57,329
frameworks and they're pretty similar

00:02:54,400 --> 00:03:00,130
but they're not exactly the same and

00:02:57,329 --> 00:03:02,320
then you've got some of the other

00:03:00,130 --> 00:03:03,820
orchestration frameworks you know this

00:03:02,320 --> 00:03:05,560
is an open source conference so we'll

00:03:03,820 --> 00:03:08,109
stick to the open ones like OpenStack

00:03:05,560 --> 00:03:10,720
and it has a very different view of the

00:03:08,109 --> 00:03:13,510
way that things work but we all know at

00:03:10,720 --> 00:03:16,170
the end of the day what people want to

00:03:13,510 --> 00:03:18,700
do and particularly in a large-scale

00:03:16,170 --> 00:03:23,890
environment is they want to treat their

00:03:18,700 --> 00:03:26,290
storage in a way that is you know

00:03:23,890 --> 00:03:28,209
orthogonal to the applications the story

00:03:26,290 --> 00:03:32,109
you know storage is the family jewels

00:03:28,209 --> 00:03:34,269
and storage is different it's not like

00:03:32,109 --> 00:03:37,739
network and it's not like compute it's

00:03:34,269 --> 00:03:40,540
got state and that makes things hard and

00:03:37,739 --> 00:03:43,060
what makes it hard is that there isn't

00:03:40,540 --> 00:03:45,540
really anything that's universal we get

00:03:43,060 --> 00:03:48,190
into it in detail you you if you've

00:03:45,540 --> 00:03:49,600
haven't spent much time in storage you

00:03:48,190 --> 00:03:51,459
know realize this sort of subtle

00:03:49,600 --> 00:03:54,160
complexity that you that you get into

00:03:51,459 --> 00:03:57,530
the different types of storage and

00:03:54,160 --> 00:03:59,690
anyways so enough of that

00:03:57,530 --> 00:04:01,520
oh the you know the kinds of

00:03:59,690 --> 00:04:03,440
difficulties that people run into is

00:04:01,520 --> 00:04:05,840
exactly what you'd expect in that mess

00:04:03,440 --> 00:04:08,570
which is the developer walks in and says

00:04:05,840 --> 00:04:10,280
this is one more complicated thing I

00:04:08,570 --> 00:04:12,140
don't want to learn about can't you just

00:04:10,280 --> 00:04:14,210
give me some simple quick answer and

00:04:12,140 --> 00:04:15,890
can't I go to stack overflow and find

00:04:14,210 --> 00:04:22,940
ten lines of code I can paste in to

00:04:15,890 --> 00:04:25,310
solve my problem yeah a little reason

00:04:22,940 --> 00:04:28,670
why it needs to be complicated for the

00:04:25,310 --> 00:04:31,160
developers connecting the applications

00:04:28,670 --> 00:04:35,150
through to the final storage is where

00:04:31,160 --> 00:04:37,910
the complexity is and that problem is

00:04:35,150 --> 00:04:41,120
solved today basically manually in a lot

00:04:37,910 --> 00:04:43,160
of environments you know the old story

00:04:41,120 --> 00:04:44,870
of the enterprise environment gee I need

00:04:43,160 --> 00:04:47,510
some storage we'll fill out this piece

00:04:44,870 --> 00:04:48,830
of paper and submit it to IT and you

00:04:47,510 --> 00:04:51,790
know in a couple of weeks we'll get back

00:04:48,830 --> 00:04:56,600
to you and you can have your storage

00:04:51,790 --> 00:05:01,460
works but era and that just doesn't work

00:04:56,600 --> 00:05:04,070
in the cloud era there's a little story

00:05:01,460 --> 00:05:07,430
I'd like to tell it's a little off point

00:05:04,070 --> 00:05:09,110
here so bear with me a second about two

00:05:07,430 --> 00:05:11,810
decades ago I spent some time in the

00:05:09,110 --> 00:05:13,910
networking industry and if you looked at

00:05:11,810 --> 00:05:17,150
networking prior to the sort of the Big

00:05:13,910 --> 00:05:18,860
Bang of the internet in in in 95 and 96

00:05:17,150 --> 00:05:22,400
some of you may be old enough to

00:05:18,860 --> 00:05:24,680
remember that days others just bear with

00:05:22,400 --> 00:05:27,050
me if you looked out at the state of

00:05:24,680 --> 00:05:29,870
networking there were a dozen different

00:05:27,050 --> 00:05:31,700
networking technologies and if you

00:05:29,870 --> 00:05:34,340
wanted to figure out who was going to be

00:05:31,700 --> 00:05:35,960
the winner because you know signing onto

00:05:34,340 --> 00:05:39,050
the wrong networking technology is a

00:05:35,960 --> 00:05:40,430
really pain okay because networking

00:05:39,050 --> 00:05:43,490
connects to everything if you get it

00:05:40,430 --> 00:05:45,590
wrong everything has to be changed so if

00:05:43,490 --> 00:05:48,110
you are sort of tasked with the problem

00:05:45,590 --> 00:05:50,570
of saying what's the kind of networking

00:05:48,110 --> 00:05:52,100
that's going to win out you do the sort

00:05:50,570 --> 00:05:54,500
of standard product management and Al

00:05:52,100 --> 00:05:56,750
you'd make your chart what are the

00:05:54,500 --> 00:05:57,770
categories that matter let's get the

00:05:56,750 --> 00:05:59,810
technologies

00:05:57,770 --> 00:06:01,640
score them who you know who's the winner

00:05:59,810 --> 00:06:05,030
and who's the loser you know you've got

00:06:01,640 --> 00:06:06,680
token ringing in x.25 and FDDI and just

00:06:05,030 --> 00:06:08,440
a whole list of networking technologies

00:06:06,680 --> 00:06:10,550
and you

00:06:08,440 --> 00:06:13,759
you really couldn't actually figure out

00:06:10,550 --> 00:06:15,560
who was gonna win everybody had their

00:06:13,759 --> 00:06:17,530
good points and everybody had their but

00:06:15,560 --> 00:06:21,169
but actually when you looked at it you

00:06:17,530 --> 00:06:24,800
could see there was a clear loser the

00:06:21,169 --> 00:06:27,259
worst the poorest the crappiest of all

00:06:24,800 --> 00:06:32,960
the networking technologies is tcp/ip

00:06:27,259 --> 00:06:35,690
over Ethernet okay it turns out on that

00:06:32,960 --> 00:06:37,460
chart it only wins in one place

00:06:35,690 --> 00:06:40,250
everything else that loses on

00:06:37,460 --> 00:06:42,620
manageability reliability shows all the

00:06:40,250 --> 00:06:46,039
abilities etcetera but it does win in

00:06:42,620 --> 00:06:48,440
one category and that is scalability it

00:06:46,039 --> 00:06:50,360
turns out it scales much better than all

00:06:48,440 --> 00:06:52,849
the emigrating networking technologies

00:06:50,360 --> 00:06:54,680
and a funny thing about scale is it

00:06:52,849 --> 00:06:56,110
turns out if you care about scale then

00:06:54,680 --> 00:06:58,789
scale is the only thing you care about

00:06:56,110 --> 00:07:01,340
okay and that's ultimately why we ended

00:06:58,789 --> 00:07:03,770
up with that as the foundation of pretty

00:07:01,340 --> 00:07:05,870
much everything and then actually

00:07:03,770 --> 00:07:08,810
touches back here because what cloud is

00:07:05,870 --> 00:07:11,060
about is scale and the challenges of the

00:07:08,810 --> 00:07:13,099
cloud era are the challenges of dealing

00:07:11,060 --> 00:07:15,020
with scale and it's a different mindset

00:07:13,099 --> 00:07:17,560
than the old guys like me you're used to

00:07:15,020 --> 00:07:19,940
you young people are used to that

00:07:17,560 --> 00:07:22,009
changing your thinking from performance

00:07:19,940 --> 00:07:23,440
to price performance which is

00:07:22,009 --> 00:07:28,180
fundamentally what cloud is about

00:07:23,440 --> 00:07:30,349
because if I care if I have a scalable

00:07:28,180 --> 00:07:32,539
application a true cloud based

00:07:30,349 --> 00:07:34,400
application that really scales then I

00:07:32,539 --> 00:07:36,409
can get to kind of any performance level

00:07:34,400 --> 00:07:39,849
I want just a question how efficiently I

00:07:36,409 --> 00:07:43,340
do that so that that conversion from

00:07:39,849 --> 00:07:46,300
performance to price performance isn't a

00:07:43,340 --> 00:07:49,960
small thing it's a complete rethink of

00:07:46,300 --> 00:07:49,960
the way you do things

00:07:50,440 --> 00:07:57,050
one of the things that that leads to is

00:07:53,450 --> 00:08:00,290
that to in order to scale you got to get

00:07:57,050 --> 00:08:01,940
the human out of it okay because humans

00:08:00,290 --> 00:08:03,860
don't scale and the humans that get

00:08:01,940 --> 00:08:07,460
involved in the middle of something will

00:08:03,860 --> 00:08:09,230
prevent anything from scaling except

00:08:07,460 --> 00:08:11,000
that you don't want to get the human out

00:08:09,230 --> 00:08:12,500
of there because the scale

00:08:11,000 --> 00:08:15,380
programmatically have this nasty

00:08:12,500 --> 00:08:19,419
tendency to occasionally consume all

00:08:15,380 --> 00:08:22,700
available resources okay now if you're

00:08:19,419 --> 00:08:24,530
sucking up all the CPU time it's not so

00:08:22,700 --> 00:08:25,790
bad you can just go around and shoot a

00:08:24,530 --> 00:08:27,680
few things and poof

00:08:25,790 --> 00:08:30,380
you've got your see people kind of the

00:08:27,680 --> 00:08:32,270
same in networking that ain't true and

00:08:30,380 --> 00:08:34,849
storage if you run yourself out of

00:08:32,270 --> 00:08:40,490
storage it's usually painful and the

00:08:34,849 --> 00:08:42,650
pain lasts a really long time by an even

00:08:40,490 --> 00:08:46,280
actually worse problem which is if you

00:08:42,650 --> 00:08:48,320
use the wrong kind of storage then you

00:08:46,280 --> 00:08:51,100
have a bunch of data that's stored in

00:08:48,320 --> 00:08:53,960
the wrong way in the wrong place and

00:08:51,100 --> 00:08:58,820
when things go wrong it goes really

00:08:53,960 --> 00:09:01,940
wrong okay so out error what's really

00:08:58,820 --> 00:09:05,750
going to matter we connect this sort of

00:09:01,940 --> 00:09:08,390
legacy of all these rige types to a

00:09:05,750 --> 00:09:10,790
programmatic environment so that we have

00:09:08,390 --> 00:09:13,640
the human out of the loop but we moved

00:09:10,790 --> 00:09:16,339
to sort of a policy based scheme so that

00:09:13,640 --> 00:09:19,400
the human is sort of preventing things

00:09:16,339 --> 00:09:21,620
from going too far off the rails but not

00:09:19,400 --> 00:09:23,660
getting into the way of the actual

00:09:21,620 --> 00:09:28,490
responsiveness and the thing in the

00:09:23,660 --> 00:09:30,260
cloud that we want in mind a bunch of

00:09:28,490 --> 00:09:34,130
people got together and created this

00:09:30,260 --> 00:09:36,890
thing called open SDS and it's a bunch

00:09:34,130 --> 00:09:38,630
of industry players and well somebody

00:09:36,890 --> 00:09:40,600
just keeps advancing this for me that's

00:09:38,630 --> 00:09:44,390
really cool

00:09:40,600 --> 00:09:46,730
anyways a bunch of people got together a

00:09:44,390 --> 00:09:49,940
bunch of industry players to try to

00:09:46,730 --> 00:09:51,830
address the issue because customers that

00:09:49,940 --> 00:09:53,360
are trying to create a policy based

00:09:51,830 --> 00:09:56,720
storage environment for their

00:09:53,360 --> 00:09:58,190
applications there really isn't a lot of

00:09:56,720 --> 00:09:59,030
good solutions there's nobody really

00:09:58,190 --> 00:10:00,770
working on that

00:09:59,030 --> 00:10:06,080
the problem so that's what we're trying

00:10:00,770 --> 00:10:07,550
to do so you know I probably you could

00:10:06,080 --> 00:10:09,620
probably guess what the mission and the

00:10:07,550 --> 00:10:12,110
goals are you know the goals is to try

00:10:09,620 --> 00:10:14,870
to clean up the mess you know make it

00:10:12,110 --> 00:10:19,480
easy for applications to consume storage

00:10:14,870 --> 00:10:23,810
make it easy for the administrative

00:10:19,480 --> 00:10:26,750
environments to regulate the consumption

00:10:23,810 --> 00:10:29,420
of storage through some policies so that

00:10:26,750 --> 00:10:31,130
the application you know ends up

00:10:29,420 --> 00:10:37,520
connecting to the right kind of storage

00:10:31,130 --> 00:10:39,110
in a way that's understood and in order

00:10:37,520 --> 00:10:41,600
to do that in a way that's going to get

00:10:39,110 --> 00:10:43,790
accepted because this is not the first

00:10:41,600 --> 00:10:46,430
this is not the second it's not the

00:10:43,790 --> 00:10:48,920
third time people have come in to try to

00:10:46,430 --> 00:10:51,500
create and clean up this mess

00:10:48,920 --> 00:10:53,540
I think what we're trying to do a little

00:10:51,500 --> 00:10:55,910
differently this time around is to be

00:10:53,540 --> 00:10:57,680
more community oriented rather than more

00:10:55,910 --> 00:11:00,190
vendor oriented which is what's happened

00:10:57,680 --> 00:11:03,530
in the past okay

00:11:00,190 --> 00:11:07,160
so a short timeline this all got kicked

00:11:03,530 --> 00:11:08,870
off back in March of 2016 I'm not gonna

00:11:07,160 --> 00:11:10,460
walk you through all the details of this

00:11:08,870 --> 00:11:14,750
but it's sort of slowly gaining momentum

00:11:10,460 --> 00:11:16,460
there's there's a number of specs that

00:11:14,750 --> 00:11:19,580
and I'll get all the URLs and all that

00:11:16,460 --> 00:11:20,780
stuff toward the end and a bunch of

00:11:19,580 --> 00:11:22,130
people have been working on it and

00:11:20,780 --> 00:11:25,310
contributing code to it

00:11:22,130 --> 00:11:29,330
we've had some demos of early

00:11:25,310 --> 00:11:31,370
functionality back in April and we're

00:11:29,330 --> 00:11:33,620
starting to gain some more membership so

00:11:31,370 --> 00:11:36,640
the community is growing it's very early

00:11:33,620 --> 00:11:39,790
days not a lot of people in it yet but

00:11:36,640 --> 00:11:43,490
growth is good and we're seeing you know

00:11:39,790 --> 00:11:45,170
more importantly particularly with some

00:11:43,490 --> 00:11:50,030
of the later entrants we're starting to

00:11:45,170 --> 00:11:53,750
see users coming in not just vendors ok

00:11:50,030 --> 00:11:55,310
so having that mix of diversity in the

00:11:53,750 --> 00:12:03,230
members of the community I think is a

00:11:55,310 --> 00:12:05,750
good thing and so you know why do you

00:12:03,230 --> 00:12:09,350
want that you know I you know probably

00:12:05,750 --> 00:12:11,310
talked about that already but one of the

00:12:09,350 --> 00:12:12,690
key issues is

00:12:11,310 --> 00:12:14,370
you know we're all going through this

00:12:12,690 --> 00:12:15,750
cloud transformation some people are

00:12:14,370 --> 00:12:18,120
kind of already there

00:12:15,750 --> 00:12:20,700
many people have existing environments

00:12:18,120 --> 00:12:23,460
that are partly cloudy fide and are

00:12:20,700 --> 00:12:26,730
moving toward that but one of the things

00:12:23,460 --> 00:12:30,150
that is really driving the cloud era is

00:12:26,730 --> 00:12:34,290
this continued abstraction of the

00:12:30,150 --> 00:12:37,140
hardware layer and more of an anonymous

00:12:34,290 --> 00:12:40,200
ation of that and that's represented

00:12:37,140 --> 00:12:41,880
here by the no vendor lock-in so we want

00:12:40,200 --> 00:12:43,800
people to be able to optimize their

00:12:41,880 --> 00:12:46,650
consumption but without getting tied

00:12:43,800 --> 00:12:48,570
into specific vendors okay which sounds

00:12:46,650 --> 00:12:50,580
strange coming from a vendor but you

00:12:48,570 --> 00:12:52,800
know give the customers what they want

00:12:50,580 --> 00:12:56,150
that's actually what people want usually

00:12:52,800 --> 00:12:56,150
you do better or that in the long run

00:12:56,330 --> 00:13:03,360
the some of the key advantages for the

00:12:59,580 --> 00:13:07,020
developers is that they'll be a standard

00:13:03,360 --> 00:13:10,020
API for managing storage and it should

00:13:07,020 --> 00:13:13,410
be common enough to handle the vast

00:13:10,020 --> 00:13:15,740
majority of the common use cases and you

00:13:13,410 --> 00:13:18,710
know sophisticated enough to allow

00:13:15,740 --> 00:13:21,750
orchestration environments provisioning

00:13:18,710 --> 00:13:24,300
lifecycle management for the storage all

00:13:21,750 --> 00:13:27,990
those things to be automated in a user's

00:13:24,300 --> 00:13:30,350
workflow and to operate on the storage

00:13:27,990 --> 00:13:34,520
complex in a vendor independent fashion

00:13:30,350 --> 00:13:36,900
so you know and this sort of old java

00:13:34,520 --> 00:13:40,110
story of developed ones from run

00:13:36,900 --> 00:13:44,850
everywhere that would be the goal you

00:13:40,110 --> 00:13:47,190
the I think the classic conundrum of a

00:13:44,850 --> 00:13:50,640
don't mistake a clear view for a short

00:13:47,190 --> 00:13:57,590
distance applies but then again if you

00:13:50,640 --> 00:13:59,210
don't start you'll never get there so

00:13:57,590 --> 00:14:01,070
you know I was talking you know as a

00:13:59,210 --> 00:14:03,770
vendor you have to ask the question why

00:14:01,070 --> 00:14:05,540
I'm here you see a number of different

00:14:03,770 --> 00:14:07,970
vendors Western Digital we sell storage

00:14:05,540 --> 00:14:10,280
to everybody so you know in the razors

00:14:07,970 --> 00:14:13,220
and razor blades or if people like the

00:14:10,280 --> 00:14:17,300
the more war based we supply ammunition

00:14:13,220 --> 00:14:19,730
to everyone so we don't really care who

00:14:17,300 --> 00:14:21,920
shoots whom that that's not entirely

00:14:19,730 --> 00:14:26,150
true but actually what we do care about

00:14:21,920 --> 00:14:27,500
is frictionless deployment okay that

00:14:26,150 --> 00:14:30,400
that actually does impact our business

00:14:27,500 --> 00:14:32,600
directly if people are inhibited from

00:14:30,400 --> 00:14:33,920
getting their environments to run

00:14:32,600 --> 00:14:35,960
they're inhibited from hitting

00:14:33,920 --> 00:14:38,120
production deployments and that shows up

00:14:35,960 --> 00:14:41,690
in my bottom line so that's actually

00:14:38,120 --> 00:14:45,530
what we care about and you know we see

00:14:41,690 --> 00:14:47,270
this as one way to get to that sort of

00:14:45,530 --> 00:14:53,660
frictionless deployment environment for

00:14:47,270 --> 00:14:56,030
people so this a chart is all of the

00:14:53,660 --> 00:14:59,900
thoughts around where this product will

00:14:56,030 --> 00:15:03,080
go but basically if you look at and I

00:14:59,900 --> 00:15:04,820
have to apologize I'm colorblind so if I

00:15:03,080 --> 00:15:06,860
say the wrong colors please give me a

00:15:04,820 --> 00:15:08,780
little bit of slack but you know there's

00:15:06,860 --> 00:15:10,400
kind of the bluish things on the left

00:15:08,780 --> 00:15:13,250
and I don't know if those are orange or

00:15:10,400 --> 00:15:14,840
yellow over right and then there's the I

00:15:13,250 --> 00:15:18,950
don't even want to guess what the bottom

00:15:14,840 --> 00:15:23,060
colors are but the product consists of

00:15:18,950 --> 00:15:24,980
of a set of connectors on the top that

00:15:23,060 --> 00:15:28,090
connect the specific storage

00:15:24,980 --> 00:15:30,590
environments into the common controller

00:15:28,090 --> 00:15:31,910
and we'll come back to what the

00:15:30,590 --> 00:15:34,690
controller provides here in a few

00:15:31,910 --> 00:15:37,760
minutes but you know there's a list of

00:15:34,690 --> 00:15:40,640
the different environments there's today

00:15:37,760 --> 00:15:44,300
we actually already have an openstack

00:15:40,640 --> 00:15:48,040
connector and this CSI connector which

00:15:44,300 --> 00:15:48,040
covers most of the container

00:15:48,640 --> 00:15:53,240
environments that are being built the

00:15:50,600 --> 00:15:56,750
container as an aside the container guys

00:15:53,240 --> 00:15:59,240
you know kubernetes docker amazes under

00:15:56,750 --> 00:16:01,430
the aegis of the cloud native have come

00:15:59,240 --> 00:16:03,620
together to create their own container

00:16:01,430 --> 00:16:05,720
based storage spec so at least in the

00:16:03,620 --> 00:16:08,200
container world you'll have something

00:16:05,720 --> 00:16:11,220
that looks regular and similar across

00:16:08,200 --> 00:16:14,130
that's called this CSI which is

00:16:11,220 --> 00:16:15,660
the container storage interface I think

00:16:14,130 --> 00:16:19,529
is the right name for that anyways

00:16:15,660 --> 00:16:21,389
that's a similar kind of transcoder and

00:16:19,529 --> 00:16:22,860
connector and we actually have a

00:16:21,389 --> 00:16:25,829
back-end implementation for that

00:16:22,860 --> 00:16:29,630
underway right now so that'll be usable

00:16:25,829 --> 00:16:34,259
OpenStack through both Manila and cinder

00:16:29,630 --> 00:16:37,110
is being done and you know we'd like to

00:16:34,259 --> 00:16:42,930
see you know these ER and sifts show up

00:16:37,110 --> 00:16:45,269
eventually the the controller itself the

00:16:42,930 --> 00:16:48,000
expectation is to support block and file

00:16:45,269 --> 00:16:49,500
and object services the block services

00:16:48,000 --> 00:16:51,000
are what people are focusing on now

00:16:49,500 --> 00:16:54,589
we're just starting to turn towards the

00:16:51,000 --> 00:16:57,360
file the object is in the distance but

00:16:54,589 --> 00:17:02,699
underneath of that there is a standard

00:16:57,360 --> 00:17:05,069
substrate for vendor specific drivers so

00:17:02,699 --> 00:17:07,650
you've got on the far left there I got

00:17:05,069 --> 00:17:11,100
native drivers for basically luggage

00:17:07,650 --> 00:17:13,589
legacy storage equipment and then you've

00:17:11,100 --> 00:17:16,620
got some other connectors that are sort

00:17:13,589 --> 00:17:21,240
of well known today cinder and Manila in

00:17:16,620 --> 00:17:23,760
the OpenStack world swordfish and little

00:17:21,240 --> 00:17:26,909
storage or are also environments that

00:17:23,760 --> 00:17:28,980
are popular in some spaces and there's

00:17:26,909 --> 00:17:31,440
work going on to connect those into the

00:17:28,980 --> 00:17:33,900
open SDS environment so once all that

00:17:31,440 --> 00:17:36,270
work sort of becomes available you

00:17:33,900 --> 00:17:38,610
should be able to essentially plug in

00:17:36,270 --> 00:17:41,669
any of the storage that supports any of

00:17:38,610 --> 00:17:45,659
those southbound drivers and connect

00:17:41,669 --> 00:17:51,179
them into environments that are in the

00:17:45,659 --> 00:17:52,950
top half of this diagram ultimately the

00:17:51,179 --> 00:17:55,620
all the things that are on the right

00:17:52,950 --> 00:17:57,570
hand side are things that we think will

00:17:55,620 --> 00:17:59,130
fit into this environment there isn't

00:17:57,570 --> 00:18:01,260
actually any work going on that right

00:17:59,130 --> 00:18:03,690
now beyond I think some pixels on this

00:18:01,260 --> 00:18:06,120
slide but because we're all busy making

00:18:03,690 --> 00:18:07,799
the data path work but you know if we're

00:18:06,120 --> 00:18:13,230
successful with that and we'll be able

00:18:07,799 --> 00:18:14,850
to turn our guns on that stuff so I'll

00:18:13,230 --> 00:18:17,370
spend a couple of minutes on digging

00:18:14,850 --> 00:18:21,720
into the the technology of that and then

00:18:17,370 --> 00:18:24,059
I think we'll be done so the basically

00:18:21,720 --> 00:18:24,909
the open STS breaks down into into two

00:18:24,059 --> 00:18:27,759
pieces there

00:18:24,909 --> 00:18:31,919
the what's called the controller which

00:18:27,759 --> 00:18:36,599
is actually the sort of middle piece and

00:18:31,919 --> 00:18:39,909
you know it's the piece at the

00:18:36,599 --> 00:18:42,970
deployments plug into it provides the

00:18:39,909 --> 00:18:45,999
policy enforcement and the orchestration

00:18:42,970 --> 00:18:47,739
and as you'll see in a couple of minutes

00:18:45,999 --> 00:18:52,210
when I get into some details there's a

00:18:47,739 --> 00:18:54,479
there's actually quite a bit of work

00:18:52,210 --> 00:18:56,889
that goes into the orchestration piece

00:18:54,479 --> 00:19:00,669
particularly because not only is this

00:18:56,889 --> 00:19:02,349
vendor agnostic cross vendor so you can

00:19:00,669 --> 00:19:05,349
actually mix storage from different

00:19:02,349 --> 00:19:07,599
vendors into common pools that are then

00:19:05,349 --> 00:19:09,489
made available into the applications and

00:19:07,599 --> 00:19:11,489
and I'll show you some examples of what

00:19:09,489 --> 00:19:14,049
I mean by that in a minute

00:19:11,489 --> 00:19:17,590
you know I the different kinds of

00:19:14,049 --> 00:19:18,849
drivers that are available in it you

00:19:17,590 --> 00:19:22,450
know you've got of course vendor

00:19:18,849 --> 00:19:25,330
specific but cinder and Manila so any

00:19:22,450 --> 00:19:29,139
existing cinder or Manila driver will

00:19:25,330 --> 00:19:32,320
work just fine here and that actually

00:19:29,139 --> 00:19:34,359
picks up a fairly broad number of pieces

00:19:32,320 --> 00:19:35,970
of equipment a number of vendors most of

00:19:34,359 --> 00:19:38,679
the vendors I think that are out there

00:19:35,970 --> 00:19:40,690
support cinder and you know in Manila

00:19:38,679 --> 00:19:46,289
has it's uh makes sense for their

00:19:40,690 --> 00:19:51,729
storage okay

00:19:46,289 --> 00:19:54,909
the the flipside of the the top half of

00:19:51,729 --> 00:19:57,549
that is the plug-in in the compute

00:19:54,909 --> 00:20:01,720
framework and it provides a standard

00:19:57,549 --> 00:20:04,809
interface for the high-end demands which

00:20:01,720 --> 00:20:06,999
you could either talk to natively from

00:20:04,809 --> 00:20:10,239
your client or through one of the

00:20:06,999 --> 00:20:12,570
orchestration environments so the in the

00:20:10,239 --> 00:20:15,190
case of the I mentioned before the

00:20:12,570 --> 00:20:18,190
container people in the cloud native

00:20:15,190 --> 00:20:19,629
they using the CSI you if you were

00:20:18,190 --> 00:20:21,669
running in one of those environments you

00:20:19,629 --> 00:20:24,009
could choose direct talk directly to the

00:20:21,669 --> 00:20:26,080
open STS controller or you could go

00:20:24,009 --> 00:20:30,489
through the CSI interface to talk to

00:20:26,080 --> 00:20:32,950
that OpenStack again cinder and Manila

00:20:30,489 --> 00:20:36,350
it can plug in as a cinder or Manila

00:20:32,950 --> 00:20:41,090
driver itself into your cluster okay

00:20:36,350 --> 00:20:42,649
and and we're working on support in some

00:20:41,090 --> 00:20:52,940
of the more enterprise oriented

00:20:42,649 --> 00:20:56,990
environment so the the the the overall

00:20:52,940 --> 00:21:01,269
desire is to try to create a not not

00:20:56,990 --> 00:21:04,820
only a universal API but the ability to

00:21:01,269 --> 00:21:08,269
merge together disparate types of

00:21:04,820 --> 00:21:10,850
storage into a common API substrate and

00:21:08,269 --> 00:21:13,220
what I mean by that is the the reality

00:21:10,850 --> 00:21:14,690
is everybody's data centers got legacy

00:21:13,220 --> 00:21:16,820
equipment in it these things change

00:21:14,690 --> 00:21:20,590
slowly nothing changes more slowly than

00:21:16,820 --> 00:21:25,750
storage storage lasts forever okay and

00:21:20,590 --> 00:21:25,750
at least forever in computer years and

00:21:26,440 --> 00:21:31,700
the you know as you roll new equipment

00:21:29,659 --> 00:21:33,889
in and as your old equipment gets rolled

00:21:31,700 --> 00:21:36,769
out you have the basic problem of

00:21:33,889 --> 00:21:39,440
orchestrating and placing of the various

00:21:36,769 --> 00:21:44,059
you know chunks of data that you're

00:21:39,440 --> 00:21:45,710
going to use in the in the middleware

00:21:44,059 --> 00:21:49,820
that the controller that I talked about

00:21:45,710 --> 00:21:53,269
it has the ability to provide storage

00:21:49,820 --> 00:21:56,149
across multi vendor environments and to

00:21:53,269 --> 00:21:59,059
do placement within that so as you come

00:21:56,149 --> 00:22:02,539
into provision storage it will examine

00:21:59,059 --> 00:22:05,330
what's available in the general pool of

00:22:02,539 --> 00:22:08,539
storage and select storage from that

00:22:05,330 --> 00:22:10,909
based on the policy and then connect you

00:22:08,539 --> 00:22:14,929
into that and what that means is that if

00:22:10,909 --> 00:22:17,330
you've got some older storage from one

00:22:14,929 --> 00:22:19,399
vendor and newer storage from another

00:22:17,330 --> 00:22:23,090
vendor you can actually create a common

00:22:19,399 --> 00:22:27,559
pool and export that common pool as just

00:22:23,090 --> 00:22:30,529
in this case blocks a a common commonly

00:22:27,559 --> 00:22:32,149
available pool of blocks and when you

00:22:30,529 --> 00:22:35,679
provision some block storage it will

00:22:32,149 --> 00:22:38,570
pick from one or the other based on the

00:22:35,679 --> 00:22:41,950
availability and the dynamic performance

00:22:38,570 --> 00:22:41,950
measurements that it's doing

00:22:43,649 --> 00:22:50,980
but part of that is the the place

00:22:47,669 --> 00:22:53,080
Aussies those are all centralized okay

00:22:50,980 --> 00:22:55,419
now they're truly centralized there's

00:22:53,080 --> 00:22:58,360
not a single controller the technology

00:22:55,419 --> 00:22:59,889
is being built to run in a clustered

00:22:58,360 --> 00:23:03,840
environment no single point of failure

00:22:59,889 --> 00:23:07,480
we're storing the rules today in

00:23:03,840 --> 00:23:11,950
zookeeper and or and there's also a

00:23:07,480 --> 00:23:14,559
connector going on to at CD the storage

00:23:11,950 --> 00:23:16,019
interface is sort of abstracted it'll

00:23:14,559 --> 00:23:18,850
work in a number of different

00:23:16,019 --> 00:23:24,370
environments but but the key issue is at

00:23:18,850 --> 00:23:27,429
the another network service they have

00:23:24,370 --> 00:23:29,470
the same of reliable and availability

00:23:27,429 --> 00:23:41,440
that you would expect out of any durable

00:23:29,470 --> 00:23:44,110
network sir so I think I pretty much so

00:23:41,440 --> 00:23:46,299
these I'm requirements that operating

00:23:44,110 --> 00:23:48,779
under I talked about the cluster view of

00:23:46,299 --> 00:23:51,669
storage we want to be able to provide a

00:23:48,779 --> 00:23:53,860
single view of your storage in your

00:23:51,669 --> 00:23:54,669
cluster independent of where it's coming

00:23:53,860 --> 00:23:59,049
from

00:23:54,669 --> 00:24:00,940
crossing vendor boundaries etc you want

00:23:59,049 --> 00:24:03,340
to be able to do all of the lifecycle

00:24:00,940 --> 00:24:06,700
management for storage programmatically

00:24:03,340 --> 00:24:11,340
so the you'll get the admin out of that

00:24:06,700 --> 00:24:16,419
loop entirely a key issue is that the

00:24:11,340 --> 00:24:20,860
clients the connectors from like

00:24:16,419 --> 00:24:22,720
connector from docker or even if you you

00:24:20,860 --> 00:24:26,260
know want to go native the key is that

00:24:22,720 --> 00:24:28,330
at that API it's common there's no

00:24:26,260 --> 00:24:31,029
vendor specific code in that all of the

00:24:28,330 --> 00:24:38,409
vendor specific code is compressed into

00:24:31,029 --> 00:24:39,639
the open SDS process itself okay and you

00:24:38,409 --> 00:24:40,870
know you shouldn't have to configure

00:24:39,639 --> 00:24:43,029
your clients they should be able to

00:24:40,870 --> 00:24:46,840
discover and just have a full set of

00:24:43,029 --> 00:24:51,720
discovery protocols and a common API for

00:24:46,840 --> 00:24:51,720
them so let's see

00:24:58,250 --> 00:25:07,310
I think it pretty much talked about

00:25:00,590 --> 00:25:09,350
everything that's here and okay it um

00:25:07,310 --> 00:25:13,040
well dig it into a little bit more this

00:25:09,350 --> 00:25:16,280
is a list of the kinds of storage

00:25:13,040 --> 00:25:18,470
characteristics that are actually most

00:25:16,280 --> 00:25:20,630
of this is associated with block but a

00:25:18,470 --> 00:25:24,560
lot of it applies to Phi on to a lesser

00:25:20,630 --> 00:25:26,990
extent object but it gives you a small

00:25:24,560 --> 00:25:30,830
taste of the kind of issues that you run

00:25:26,990 --> 00:25:33,730
into in dealing with storage in in a

00:25:30,830 --> 00:25:36,020
system environment and in order to

00:25:33,730 --> 00:25:37,880
really automate this environment you

00:25:36,020 --> 00:25:40,670
have to make all of these options

00:25:37,880 --> 00:25:44,630
potentially available again under

00:25:40,670 --> 00:25:46,400
control by a policy to the client

00:25:44,630 --> 00:25:49,610
applications that are running because

00:25:46,400 --> 00:25:51,680
while the storage media underneath of it

00:25:49,610 --> 00:25:54,080
the drives they're all pretty much the

00:25:51,680 --> 00:25:56,690
same the reality is that what we're

00:25:54,080 --> 00:25:58,970
actually controlling here is access to

00:25:56,690 --> 00:26:01,730
storage management software and that

00:25:58,970 --> 00:26:05,320
software software-defined storage takes

00:26:01,730 --> 00:26:08,810
the raw media under a law you know the

00:26:05,320 --> 00:26:10,760
the raw media and synthesizes that into

00:26:08,810 --> 00:26:12,860
something the durability and

00:26:10,760 --> 00:26:16,160
availability characteristics that we

00:26:12,860 --> 00:26:18,680
want so being able to connect the

00:26:16,160 --> 00:26:20,540
application to the right instance of the

00:26:18,680 --> 00:26:29,210
storage management software that's

00:26:20,540 --> 00:26:31,400
actually what's going on here so you

00:26:29,210 --> 00:26:34,970
know in a very high level what we have

00:26:31,400 --> 00:26:37,400
is essentially a catalog of storage

00:26:34,970 --> 00:26:39,800
profiles just a system-wide list of

00:26:37,400 --> 00:26:43,610
what's available and a profile is a

00:26:39,800 --> 00:26:45,260
policy essentially it's you know it's

00:26:43,610 --> 00:26:48,230
pretty much what you would expect you

00:26:45,260 --> 00:26:51,470
know it could be I want you know slow

00:26:48,230 --> 00:26:55,790
triple replicated rotating store that

00:26:51,470 --> 00:26:57,470
could be a policy or some maybe you know

00:26:55,790 --> 00:27:00,830
erasure coded flash that could be a

00:26:57,470 --> 00:27:02,480
different policy from an operational

00:27:00,830 --> 00:27:05,150
perspective a lot of people just want to

00:27:02,480 --> 00:27:07,690
think about this is you know bronze

00:27:05,150 --> 00:27:11,350
platinum and silver and

00:27:07,690 --> 00:27:13,269
you know or if you like like a long-term

00:27:11,350 --> 00:27:17,080
storage or short-term storage pretty

00:27:13,269 --> 00:27:19,330
much any of those kind of paradigms that

00:27:17,080 --> 00:27:22,029
you might choose to apply to your

00:27:19,330 --> 00:27:24,279
storage environment the this sort of

00:27:22,029 --> 00:27:26,799
profile and catalog scheme will map on

00:27:24,279 --> 00:27:30,190
to that fairly well so your applications

00:27:26,799 --> 00:27:31,990
will operate under the umbrella of a

00:27:30,190 --> 00:27:35,889
storage profile that they'll select one

00:27:31,990 --> 00:27:37,720
naturally there's a security protocol to

00:27:35,889 --> 00:27:39,730
make sure you have access to the to the

00:27:37,720 --> 00:27:41,649
right profile but once you've got that

00:27:39,730 --> 00:27:46,360
then the profile essentially dictates

00:27:41,649 --> 00:27:49,809
what you can do okay so if you set up a

00:27:46,360 --> 00:27:52,269
profile for triple replicated rotating

00:27:49,809 --> 00:27:53,590
store and you ask for that profile then

00:27:52,269 --> 00:27:55,929
you know that's what you're going to get

00:27:53,590 --> 00:27:58,990
if you say gee I really want you know

00:27:55,929 --> 00:28:00,970
six-way replicated store or erasure

00:27:58,990 --> 00:28:02,769
coated then you're gonna get an error

00:28:00,970 --> 00:28:07,029
message that says that's not in the

00:28:02,769 --> 00:28:09,789
profile for this guy you generally find

00:28:07,029 --> 00:28:11,019
is that the applications they actually

00:28:09,789 --> 00:28:14,620
don't really want to concern themselves

00:28:11,019 --> 00:28:18,519
so much with that they tend to divide

00:28:14,620 --> 00:28:20,860
the storage conceptually by the way they

00:28:18,519 --> 00:28:24,789
consume it it's the mapping of that

00:28:20,860 --> 00:28:32,049
framework into the physicality that the

00:28:24,789 --> 00:28:35,110
catalog and the profiles provide so I

00:28:32,049 --> 00:28:40,210
mentioned before the ability to cross

00:28:35,110 --> 00:28:41,950
vendors the the the clustered

00:28:40,210 --> 00:28:45,250
environment would design that a

00:28:41,950 --> 00:28:47,500
controller to have both regions and

00:28:45,250 --> 00:28:49,419
zones pretty much the de-facto standard

00:28:47,500 --> 00:28:51,940
for those things in the clustered world

00:28:49,419 --> 00:28:53,620
but when you get to pooling of storage

00:28:51,940 --> 00:28:55,779
we recognize that there's sort of a

00:28:53,620 --> 00:28:58,269
physical pooling of storage which

00:28:55,779 --> 00:29:00,909
represents the pooling of things with

00:28:58,269 --> 00:29:02,950
common characteristics so you you you

00:29:00,909 --> 00:29:05,379
you you're going to want to pool you're

00:29:02,950 --> 00:29:08,500
rotating store into a different pool

00:29:05,379 --> 00:29:10,600
than your flash store your dual

00:29:08,500 --> 00:29:13,509
replicated store different from your non

00:29:10,600 --> 00:29:16,899
replicated etc those are the sort of the

00:29:13,509 --> 00:29:18,970
physical pools and the virtual pools are

00:29:16,899 --> 00:29:21,970
the things that

00:29:18,970 --> 00:29:24,130
you actually export to the users where

00:29:21,970 --> 00:29:26,200
you can take multiple physical pools and

00:29:24,130 --> 00:29:28,929
typically a physical pool is going to

00:29:26,200 --> 00:29:31,690
get mapped to an individual vendor okay

00:29:28,929 --> 00:29:36,730
and or a slice of the vendors equipment

00:29:31,690 --> 00:29:39,700
and the open SDS framework itself when

00:29:36,730 --> 00:29:42,880
you make a provisioning request out of a

00:29:39,700 --> 00:29:45,120
virtual pool will select out of the

00:29:42,880 --> 00:29:47,950
virtual pool one of the physical pools

00:29:45,120 --> 00:29:51,789
based on the current load factors etc

00:29:47,950 --> 00:29:53,530
and do the placement and the

00:29:51,789 --> 00:30:04,870
provisioning within that particular

00:29:53,530 --> 00:30:07,179
physical pool individual requests on a

00:30:04,870 --> 00:30:10,480
profile has a long list of things in it

00:30:07,179 --> 00:30:13,679
that you can set or you can set that or

00:30:10,480 --> 00:30:16,570
from the policy or enable or disable it

00:30:13,679 --> 00:30:19,860
I don't think anybody really wants me to

00:30:16,570 --> 00:30:19,860
go through all those in detail

00:30:25,400 --> 00:30:31,280
so the I think this is just sort of

00:30:28,160 --> 00:30:33,230
another way of looking at the product in

00:30:31,280 --> 00:30:35,809
a very simplified version you've

00:30:33,230 --> 00:30:38,390
essentially got your orchestration

00:30:35,809 --> 00:30:43,550
environment on the top with plug-in

00:30:38,390 --> 00:30:45,800
talking to the open SDS API and that has

00:30:43,550 --> 00:30:49,220
the underneath of it the controller and

00:30:45,800 --> 00:30:53,960
the controller has the policy engine and

00:30:49,220 --> 00:30:55,640
placement control engine and its own set

00:30:53,960 --> 00:30:59,440
of metrics to keep track of that and

00:30:55,640 --> 00:31:02,540
then underneath of that you've got the

00:30:59,440 --> 00:31:05,600
what the you know the the storage

00:31:02,540 --> 00:31:10,010
specific drivers okay they get the job

00:31:05,600 --> 00:31:12,860
done so when you map this into a cloud

00:31:10,010 --> 00:31:14,720
native environment the the integration

00:31:12,860 --> 00:31:16,550
with the Coubertin you know the the

00:31:14,720 --> 00:31:19,130
contract the container based cloud

00:31:16,550 --> 00:31:23,090
native people the kubernetes docker and

00:31:19,130 --> 00:31:26,390
mazes those people are using the cloud

00:31:23,090 --> 00:31:32,380
storage interface CSI that's a native

00:31:26,390 --> 00:31:35,120
interface into open SDS and you see the

00:31:32,380 --> 00:31:38,150
that represented directly in their

00:31:35,120 --> 00:31:39,620
documentation but what open SDS brings

00:31:38,150 --> 00:31:42,559
into that is what's missing in that

00:31:39,620 --> 00:31:45,110
environment which is policies the the

00:31:42,559 --> 00:31:48,110
CSI is very much a particular

00:31:45,110 --> 00:31:52,070
application it talks about there being

00:31:48,110 --> 00:31:53,809
pools of storage but there's really no

00:31:52,070 --> 00:31:57,050
more description beyond that you can

00:31:53,809 --> 00:32:01,130
select from a pool and provision a piece

00:31:57,050 --> 00:32:02,900
of storage in the CSI but the ability to

00:32:01,130 --> 00:32:05,330
manipulate the pools and see what's

00:32:02,900 --> 00:32:09,040
going on in them and interrogate them

00:32:05,330 --> 00:32:11,210
that's actually not you know that that's

00:32:09,040 --> 00:32:13,370
not something that that's gone into

00:32:11,210 --> 00:32:16,580
that's one of the things that open SES

00:32:13,370 --> 00:32:19,730
brings to that environment okay and I'm

00:32:16,580 --> 00:32:21,740
getting the nod here similarly in an

00:32:19,730 --> 00:32:24,890
open stack environment it's essentially

00:32:21,740 --> 00:32:29,690
the the the the same situation where

00:32:24,890 --> 00:32:31,940
you've got a lot of capability that's

00:32:29,690 --> 00:32:34,770
been

00:32:31,940 --> 00:32:36,690
exported into those environments but

00:32:34,770 --> 00:32:38,220
it's not visible what's going on

00:32:36,690 --> 00:32:43,320
open SDS allows you to get that

00:32:38,220 --> 00:32:44,070
visibility the usual sign-off and good

00:32:43,320 --> 00:32:46,200
information

00:32:44,070 --> 00:32:49,460
everything here is open-source uploaded

00:32:46,200 --> 00:32:54,840
to github and Wow it just jumped again

00:32:49,460 --> 00:32:59,370
sorry I wonder if my laptop has a bug or

00:32:54,840 --> 00:33:01,380
a virus we are looking for new people to

00:32:59,370 --> 00:33:06,060
get involved if you have an interest in

00:33:01,380 --> 00:33:08,450
this give us a ring I'm done there any

00:33:06,060 --> 00:33:08,450
questions

00:33:14,460 --> 00:33:20,440
[Music]

00:33:15,980 --> 00:33:20,440
it's strictly a control plane yes

00:33:23,889 --> 00:33:26,929
correct

00:33:25,279 --> 00:33:29,450
right that's the same I mean all of

00:33:26,929 --> 00:33:33,019
these are control playing environments

00:33:29,450 --> 00:33:35,600
once the applications connection to the

00:33:33,019 --> 00:33:37,909
specific storage is created then they

00:33:35,600 --> 00:33:40,700
use the same old protocols and everybody

00:33:37,909 --> 00:33:43,309
else is out of the way okay so that your

00:33:40,700 --> 00:33:45,049
your basic application performance isn't

00:33:43,309 --> 00:33:46,789
affected your reads and rewrite speeds

00:33:45,049 --> 00:33:49,190
or you know totally unaffected by that

00:33:46,789 --> 00:33:52,899
it's going to be a function of whatever

00:33:49,190 --> 00:33:52,899
actual storage gets selected

00:34:03,609 --> 00:34:10,579
well when we take over the world yeah

00:34:06,079 --> 00:34:14,599
but until then no no I think the I mean

00:34:10,579 --> 00:34:16,849
the the issue of exposing the storage

00:34:14,599 --> 00:34:19,909
across data centers is a really nasty

00:34:16,849 --> 00:34:21,799
problem and you I think we're the world

00:34:19,909 --> 00:34:23,419
is sort of landing on that it says

00:34:21,799 --> 00:34:26,839
that's not something you want your

00:34:23,419 --> 00:34:28,970
infrastructure doing okay so you know I

00:34:26,839 --> 00:34:35,809
think that's probably something that

00:34:28,970 --> 00:34:37,600
isn't gonna get tackled here well thank

00:34:35,809 --> 00:34:42,949
you very much

00:34:37,600 --> 00:34:42,949

YouTube URL: https://www.youtube.com/watch?v=54TnJMmcw9M


