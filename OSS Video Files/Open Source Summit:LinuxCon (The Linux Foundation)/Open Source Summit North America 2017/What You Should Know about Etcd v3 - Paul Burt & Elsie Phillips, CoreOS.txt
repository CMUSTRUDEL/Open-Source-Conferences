Title: What You Should Know about Etcd v3 - Paul Burt & Elsie Phillips, CoreOS
Publication date: 2017-09-13
Playlist: Open Source Summit North America 2017
Description: 
	What You Should Know about Etcd v3 - Paul Burt & Elsie Phillips, CoreOS

Description
With Kubernetes 1.6, etcd v3 becomes the preferred storage backbone of every Kubernetes cluster. Do you know what’s changed? How to recover from failures? This talk is a look at what’s new to etcd v3. It will act as a refresher on what failure scenarios admins need to be mindful of, in order to keep their cluster safe. 

Abstract
The most notable change to etcd v3 is the introduction of gRPC. We’ll talk about why the change was made and how it affects the old REST API. Did you know that HTTP and gRPC are namespaced differently? You will after this talk, and you’ll also discover what implications it has for running your cluster. 

After covering changes, we’ll take a look at common failure scenarios for etcd. We’ll discuss common misconceptions about leader election. We’ll explore the risks associated with 3 node cluster vs a 9 node, and a regional cluster vs a global. Finally, we’ll end with a live demo of how to backup your cluster, and restore from said backup.

This talk is applicable to any developer that relies on an etcd backed platform. That includes Kubernetes, and many other cloud native projects. Only a glancing familiarity with etcd and distributed consensus are required.

About Paul Burt
Paul Burt is a Community Manager at CoreOS. He’s upvoting your /r/kubernetes threads and answering your #coreos questions on freeNode. Paul has a knack for and demystifying infrastructure, and making gnarly, complex topics approachable. He enjoys home brewing beer, reading independent comics, and yelling at his computer when it doesn’t do what he wants.

About Elsie Phillips
Elsie herds the CoreOS Community and Co-Leads the Kubernetes Contributor Experience SIG. She's a northwest native who got her start in open source working at the Oregon State University Open Source Lab. In her free time she throws wild one woman dance parties and makes a mean vegan chocolate chip cookie.
Captions: 
	00:00:00,480 --> 00:00:06,210
so good morning everyone welcome to day

00:00:03,210 --> 00:00:08,069
two of open source summit you are

00:00:06,210 --> 00:00:10,550
currently in what you should know about

00:00:08,069 --> 00:00:16,470
at CD v3

00:00:10,550 --> 00:00:17,550
my name is LC Phillips and this is my

00:00:16,470 --> 00:00:23,490
partner in crime

00:00:17,550 --> 00:00:31,140
Paul Burt so let's first address what is

00:00:23,490 --> 00:00:35,100
that CD v3 so s CD is a fast reactive

00:00:31,140 --> 00:00:37,890
modern JavaScript framework I'm totally

00:00:35,100 --> 00:00:39,629
just kidding as you probably know s CD

00:00:37,890 --> 00:00:42,120
is central to a lot of what we work on

00:00:39,629 --> 00:00:44,190
at core OS which is distributed systems

00:00:42,120 --> 00:00:45,989
it arose out of the need to reliably

00:00:44,190 --> 00:00:51,360
coordinate configurations in state in

00:00:45,989 --> 00:00:52,949
that environment so sed is a fully

00:00:51,360 --> 00:00:55,649
replicated highly available and

00:00:52,949 --> 00:00:56,640
consistent key value store now for those

00:00:55,649 --> 00:00:57,780
of you who aren't familiar with those

00:00:56,640 --> 00:01:00,390
terms we're just going to quickly break

00:00:57,780 --> 00:01:02,219
that down fully replicated means that

00:01:00,390 --> 00:01:05,100
the entire store is available at every

00:01:02,219 --> 00:01:06,990
location in the network highly available

00:01:05,100 --> 00:01:08,729
means that it's designed to avoid single

00:01:06,990 --> 00:01:11,280
points of failure and ensure that when

00:01:08,729 --> 00:01:13,260
hardware and networks fail that it does

00:01:11,280 --> 00:01:17,400
not cause interruption or degradation in

00:01:13,260 --> 00:01:19,170
service for the end-user now if you're

00:01:17,400 --> 00:01:21,360
familiar with the literature you might

00:01:19,170 --> 00:01:23,430
contest us calling at CD highly

00:01:21,360 --> 00:01:25,530
available because of the cap theorem but

00:01:23,430 --> 00:01:27,869
what we mean by highly available is that

00:01:25,530 --> 00:01:29,850
people can read from it and availability

00:01:27,869 --> 00:01:32,390
of reads is important for load balancer

00:01:29,850 --> 00:01:34,950
configurations or service discovery

00:01:32,390 --> 00:01:41,040
finally consistent means that every read

00:01:34,950 --> 00:01:43,470
from it returns the most recent right so

00:01:41,040 --> 00:01:45,030
how does that CD work it's based on the

00:01:43,470 --> 00:01:48,750
raft algorithm and is centered around

00:01:45,030 --> 00:01:52,770
three key concepts leaders elections and

00:01:48,750 --> 00:01:54,689
terms so each cluster is a healthy

00:01:52,770 --> 00:01:56,820
little micro democracy it elects a

00:01:54,689 --> 00:01:59,399
leader for a given term that leader

00:01:56,820 --> 00:02:00,840
pushes updates to the followers if the

00:01:59,399 --> 00:02:02,820
leader is killed which would be very

00:02:00,840 --> 00:02:04,380
tragic the cluster will elect a new

00:02:02,820 --> 00:02:09,209
leader and things will carry on as

00:02:04,380 --> 00:02:10,950
normal since its introduction it has

00:02:09,209 --> 00:02:12,040
become an integral part of cloud native

00:02:10,950 --> 00:02:13,360
systems

00:02:12,040 --> 00:02:15,549
systems for running google-like

00:02:13,360 --> 00:02:17,110
infrastructure it's part of projects

00:02:15,549 --> 00:02:19,420
like kubernetes where it's the primary

00:02:17,110 --> 00:02:21,730
data store cod foundries llego

00:02:19,420 --> 00:02:26,790
networking solutions like canal and many

00:02:21,730 --> 00:02:29,079
others so you know it's pretty popular

00:02:26,790 --> 00:02:30,760
it has a decent number of stars on

00:02:29,079 --> 00:02:33,190
github which as we all know is like the

00:02:30,760 --> 00:02:36,099
most important metric for like measuring

00:02:33,190 --> 00:02:38,019
open source projects it's used in

00:02:36,099 --> 00:02:42,750
production by many global 2000 companies

00:02:38,019 --> 00:02:45,220
and many companies also contribute to it

00:02:42,750 --> 00:02:48,159
so just to give you a quick recap of the

00:02:45,220 --> 00:02:50,200
project it's about two years old we

00:02:48,159 --> 00:02:53,700
released the first stable version at CD

00:02:50,200 --> 00:02:59,409
2.0 in early 2015 and last year we

00:02:53,700 --> 00:03:03,040
rolled out at CD v3 so why are we

00:02:59,409 --> 00:03:05,409
talking about it now so you may remember

00:03:03,040 --> 00:03:07,569
last year our CTO Brendan Phillips did a

00:03:05,409 --> 00:03:11,680
number of talks about at CD we can see

00:03:07,569 --> 00:03:13,450
here at large volumes at CD to

00:03:11,680 --> 00:03:16,299
experience issues handling large

00:03:13,450 --> 00:03:18,340
snapshots to keep scaling and Charette

00:03:16,299 --> 00:03:20,669
CD remained the community darling for

00:03:18,340 --> 00:03:23,400
reliable distributed key-value storage

00:03:20,669 --> 00:03:28,930
we put in some work many a brand is

00:03:23,400 --> 00:03:30,760
showcased our progress late in 2016 we

00:03:28,930 --> 00:03:34,120
completed work on our initial release of

00:03:30,760 --> 00:03:35,530
SC d3 that increment is a major version

00:03:34,120 --> 00:03:38,049
number if you're a fan of semantic

00:03:35,530 --> 00:03:40,120
versioning the above is a screenshot of

00:03:38,049 --> 00:03:41,980
Brandon highlighting some of these

00:03:40,120 --> 00:03:43,810
improvements more efficient

00:03:41,980 --> 00:03:45,609
communication a revamped API and

00:03:43,810 --> 00:03:50,889
significantly improved storage

00:03:45,609 --> 00:03:52,810
performance so our work paid off the

00:03:50,889 --> 00:03:54,400
time we put into SC d3 helped kubernetes

00:03:52,810 --> 00:03:56,379
scale from a thousand node clusters

00:03:54,400 --> 00:03:58,930
passing tests to five thousand nodes

00:03:56,379 --> 00:04:00,879
clusters kubernetes even adopted at the

00:03:58,930 --> 00:04:03,340
e3 as its default storage option this

00:04:00,879 --> 00:04:06,760
year the community responded positively

00:04:03,340 --> 00:04:08,799
they loved the work we were doing well

00:04:06,760 --> 00:04:10,810
some of the community loved the work

00:04:08,799 --> 00:04:12,489
other parts were less than enthusiastic

00:04:10,810 --> 00:04:15,340
about adopting new api's and

00:04:12,489 --> 00:04:16,930
communication protocols as Michael

00:04:15,340 --> 00:04:19,479
Heusen Blas the creator of kubernetes

00:04:16,930 --> 00:04:21,639
backup utility reshift ur puts it things

00:04:19,479 --> 00:04:23,349
are generally well documented but there

00:04:21,639 --> 00:04:25,450
are some rough edges so the goal of this

00:04:23,349 --> 00:04:28,300
talk is

00:04:25,450 --> 00:04:30,790
you help folks where they might have

00:04:28,300 --> 00:04:35,800
stubbed their toe so to speak help them

00:04:30,790 --> 00:04:38,800
find those rough edges and avoid them so

00:04:35,800 --> 00:04:45,820
I'm gonna now pass this over to Paul all

00:04:38,800 --> 00:04:48,400
righty let's break some stuff so before

00:04:45,820 --> 00:04:50,410
we dive into the common mistakes most

00:04:48,400 --> 00:04:51,670
people seem to make upgrading the at CD

00:04:50,410 --> 00:04:54,700
version 3

00:04:51,670 --> 00:04:58,480
I'll just preface this by a well first

00:04:54,700 --> 00:05:00,700
and increase the size on this and most

00:04:58,480 --> 00:05:04,030
of these are gonna be run inside of a

00:05:00,700 --> 00:05:08,830
docker container like this so go inside

00:05:04,030 --> 00:05:10,600
and then we'll start the sed process now

00:05:08,830 --> 00:05:12,550
little pretzel at the end is basically

00:05:10,600 --> 00:05:14,710
just telling bash that I want this

00:05:12,550 --> 00:05:16,210
background we'll see a lot of this

00:05:14,710 --> 00:05:19,180
gobbledygook as we go through this

00:05:16,210 --> 00:05:22,960
pretty regularly and now we're free to

00:05:19,180 --> 00:05:26,490
issue commands to at CD so this is kind

00:05:22,960 --> 00:05:26,490
of the context we'll be operating in

00:05:27,930 --> 00:05:31,900
cool so first question everybody has

00:05:30,760 --> 00:05:34,150
when they leave their apartment is

00:05:31,900 --> 00:05:35,590
where'd I leave my keys and that is the

00:05:34,150 --> 00:05:38,650
first question most people seem to have

00:05:35,590 --> 00:05:52,170
when they upgrade to at CD 3 as well so

00:05:38,650 --> 00:05:52,170
let's take a look at that ok

00:05:52,830 --> 00:05:59,340
so it's a little bit difficult for me to

00:05:56,389 --> 00:06:01,020
type with the projector behind me here

00:05:59,340 --> 00:06:04,620
so I'm gonna do this by video just for

00:06:01,020 --> 00:06:08,240
convenience so as you can see we're

00:06:04,620 --> 00:06:08,240
start painters we just dump

00:06:16,400 --> 00:06:24,850
cuddle cuddle sort of these

00:06:37,770 --> 00:06:40,280
and three

00:06:54,370 --> 00:07:07,849
we're getting an error now that's that's

00:06:57,050 --> 00:07:10,090
kind of seems I'm in and out is the my

00:07:07,849 --> 00:07:10,090
car

00:07:18,750 --> 00:07:25,090
awesome alright I'll do my best sorry

00:07:22,090 --> 00:07:28,210
about the sound anyways as you can see

00:07:25,090 --> 00:07:30,850
what's happened here is we have instead

00:07:28,210 --> 00:07:33,520
of the set method use the put method to

00:07:30,850 --> 00:07:34,930
store a key and at CD version 3 and this

00:07:33,520 --> 00:07:38,800
is actually something of a convenience

00:07:34,930 --> 00:07:40,840
it's a clue to your developers if you've

00:07:38,800 --> 00:07:44,140
moved over to at City version 3 of the

00:07:40,840 --> 00:07:46,990
API that they want to put their data in

00:07:44,140 --> 00:07:48,460
using this new command they will get an

00:07:46,990 --> 00:07:51,220
error if they try and use the old

00:07:48,460 --> 00:07:52,780
command which is hopefully exactly what

00:07:51,220 --> 00:08:00,280
you want if you've got this environment

00:07:52,780 --> 00:08:02,710
variable set correctly the go back to

00:08:00,280 --> 00:08:05,680
our slides here the key takeaway is that

00:08:02,710 --> 00:08:08,050
at CD has 2 main namespaces and at CD

00:08:05,680 --> 00:08:10,750
version 2 used to be able to curl the

00:08:08,050 --> 00:08:12,940
endpoints access things in a restful

00:08:10,750 --> 00:08:16,810
manner at CD version 3 still has that

00:08:12,940 --> 00:08:19,420
but at CD version 3 in the the sake of

00:08:16,810 --> 00:08:22,660
speed and performance has adopted G RPC

00:08:19,420 --> 00:08:26,020
which is Google's new RPC protocol uses

00:08:22,660 --> 00:08:28,570
protobufs plus HTTP 2 a lot more

00:08:26,020 --> 00:08:30,940
efficient allows us to multiplex and

00:08:28,570 --> 00:08:33,729
that has a different name space than the

00:08:30,940 --> 00:08:35,770
old at CD 2 namespace so if you stash

00:08:33,729 --> 00:08:38,229
your keys in using a curl and you try

00:08:35,770 --> 00:08:40,510
and pull them out using G RPC you're

00:08:38,229 --> 00:08:47,020
gonna have headaches so try and avoid

00:08:40,510 --> 00:08:49,750
that G RPC is the new goodness cool and

00:08:47,020 --> 00:08:51,190
you may have noticed that the API looks

00:08:49,750 --> 00:08:52,380
like it changed a little bit so let's

00:08:51,190 --> 00:09:02,430
explore that

00:08:52,380 --> 00:09:02,430
did it change doing this dance again

00:09:05,860 --> 00:09:12,670
oh this is relatively quick check we're

00:09:10,990 --> 00:09:15,850
gonna take a look at the etsy D API

00:09:12,670 --> 00:09:16,720
using the help command and the old value

00:09:15,850 --> 00:09:19,390
and you can see there is a couple

00:09:16,720 --> 00:09:21,790
commands here the set is in there as we

00:09:19,390 --> 00:09:23,890
experienced earlier and if we execute

00:09:21,790 --> 00:09:26,290
that same command with the environment

00:09:23,890 --> 00:09:28,029
variable set to three if we scroll up

00:09:26,290 --> 00:09:30,490
you can see there's a lot of new

00:09:28,029 --> 00:09:32,740
commands available in this new at CD

00:09:30,490 --> 00:09:34,600
client and this is part of the work that

00:09:32,740 --> 00:09:37,000
went in the Etsy III this is why this is

00:09:34,600 --> 00:09:41,680
a major version increment we've moved

00:09:37,000 --> 00:09:43,690
into a new MVC C style of working with

00:09:41,680 --> 00:09:46,149
objects in the database which allows us

00:09:43,690 --> 00:09:49,570
to do cool things like transactions and

00:09:46,149 --> 00:09:52,420
a lot of other stuff and the next talk

00:09:49,570 --> 00:09:53,980
are going to kind of dive into what

00:09:52,420 --> 00:10:03,040
other things you'll stub your toe on

00:09:53,980 --> 00:10:05,140
using this new API and a quick note

00:10:03,040 --> 00:10:07,350
before we jump to that section if you

00:10:05,140 --> 00:10:09,370
actually want to proactively prevent

00:10:07,350 --> 00:10:11,440
developers from storing things in the

00:10:09,370 --> 00:10:13,329
old Etsy D namespace if you're starting

00:10:11,440 --> 00:10:14,890
up your Etsy D process and you just want

00:10:13,329 --> 00:10:16,620
to completely disable that because you

00:10:14,890 --> 00:10:20,529
have no need for it anymore

00:10:16,620 --> 00:10:22,930
absolutely set the - - enable v2 flag to

00:10:20,529 --> 00:10:24,940
false that will prevent people from

00:10:22,930 --> 00:10:27,610
actually even storing anything in there

00:10:24,940 --> 00:10:30,130
even if they're invoking the correct

00:10:27,610 --> 00:10:32,350
commands this is I don't know the

00:10:30,130 --> 00:10:33,940
equivalent of if you enjoy static type

00:10:32,350 --> 00:10:36,279
checking in your programming languages

00:10:33,940 --> 00:10:38,079
keep people honest this kind of keeps

00:10:36,279 --> 00:10:42,790
people honest when they're using your @

00:10:38,079 --> 00:10:46,269
çd cluster cool next thing we'll dive

00:10:42,790 --> 00:10:48,310
into is that the world is now flat at CD

00:10:46,269 --> 00:10:51,430
version 2 used to be hierarchical that

00:10:48,310 --> 00:10:54,550
meant you could have kind of a tree

00:10:51,430 --> 00:10:56,260
structure with Leafs and nodes and it

00:10:54,550 --> 00:10:58,300
branched out and there was a handy

00:10:56,260 --> 00:11:00,070
command that you could use to kind of

00:10:58,300 --> 00:11:02,829
collect everything that rested

00:11:00,070 --> 00:11:05,230
underneath of a node let's take a look

00:11:02,829 --> 00:11:08,670
at that and see how the new commands

00:11:05,230 --> 00:11:08,670
work for accessing data

00:11:22,060 --> 00:11:30,760
cool so we are firing up our command

00:11:29,620 --> 00:11:33,430
line here and we're gonna set some

00:11:30,760 --> 00:11:36,700
values in the old structure this branch

00:11:33,430 --> 00:11:38,410
node so cartoons slash RM stands for

00:11:36,700 --> 00:11:40,660
Rick and Morty we'll add another cartoon

00:11:38,410 --> 00:11:42,910
into the directory just to give it some

00:11:40,660 --> 00:11:46,480
companionship so we'll set the venture

00:11:42,910 --> 00:11:48,970
brothers here and we'll go ahead and

00:11:46,480 --> 00:11:54,790
retrieve those keys in the old @ CD two

00:11:48,970 --> 00:11:56,530
style so the LS command will actually

00:11:54,790 --> 00:11:59,410
reveal everything that's on your current

00:11:56,530 --> 00:12:01,810
level and if we go one deeper and we

00:11:59,410 --> 00:12:04,570
look we LS the cartoons directory the

00:12:01,810 --> 00:12:06,040
same way it works in your bash command

00:12:04,570 --> 00:12:07,500
prompt you'll see all of the values that

00:12:06,040 --> 00:12:09,880
are in there

00:12:07,500 --> 00:12:12,700
but when we switch our API to version

00:12:09,880 --> 00:12:14,680
three as you can see we run into

00:12:12,700 --> 00:12:23,890
problems because of that new flattened

00:12:14,680 --> 00:12:25,120
key space so we have a solution one

00:12:23,890 --> 00:12:27,190
thing to note before we move on in that

00:12:25,120 --> 00:12:29,620
solution is that this directory type

00:12:27,190 --> 00:12:32,620
structure is gone but you can emulate it

00:12:29,620 --> 00:12:36,280
in the new flat key space if you so

00:12:32,620 --> 00:12:38,080
desire and after thinking about these

00:12:36,280 --> 00:12:39,490
usage patterns it became apparent to the

00:12:38,080 --> 00:12:42,940
team that the hierarchical structure

00:12:39,490 --> 00:12:46,060
with all the stuff that comes along with

00:12:42,940 --> 00:12:48,670
it was less efficient than this flat key

00:12:46,060 --> 00:12:50,560
space in the flat key space reduced

00:12:48,670 --> 00:12:53,740
overhead increased efficiency of our

00:12:50,560 --> 00:12:58,140
queries and it just makes search a lot

00:12:53,740 --> 00:13:00,910
easier so let's take a look at that and

00:12:58,140 --> 00:13:05,400
to do that we're gonna take a look using

00:13:00,910 --> 00:13:05,400
querying based on prefixes and ranges

00:13:14,430 --> 00:13:21,370
already so we are gonna set some keys

00:13:17,950 --> 00:13:23,410
again as we fire up this demo we want

00:13:21,370 --> 00:13:24,850
some keys that are somewhat related to

00:13:23,410 --> 00:13:28,720
each other so we're gonna choose the

00:13:24,850 --> 00:13:30,220
Star Wars trench rum scene and grab some

00:13:28,720 --> 00:13:33,930
quotes from that so we've got red one

00:13:30,220 --> 00:13:36,280
reporting in red two standing by and

00:13:33,930 --> 00:13:37,030
finally let's add something for red

00:13:36,280 --> 00:13:39,370
leader

00:13:37,030 --> 00:13:44,860
let's lock our s-foils into Attack

00:13:39,370 --> 00:13:48,130
Position cool so we've got our keys and

00:13:44,860 --> 00:13:49,000
now it's time to query them let's do a

00:13:48,130 --> 00:13:52,960
range first

00:13:49,000 --> 00:13:56,890
so we'll do a search for red one to red

00:13:52,960 --> 00:14:00,550
three and that has returned values for

00:13:56,890 --> 00:14:02,470
us so this is inclusive at the front

00:14:00,550 --> 00:14:04,720
that means the first value red is

00:14:02,470 --> 00:14:07,600
included in the query but exclusive at

00:14:04,720 --> 00:14:10,030
the end that means red three is excluded

00:14:07,600 --> 00:14:12,400
so if we had set this as red two and our

00:14:10,030 --> 00:14:14,350
query we would be excluding data that we

00:14:12,400 --> 00:14:16,660
want this is pretty normal but sometimes

00:14:14,350 --> 00:14:18,210
it can catch you off guard so what a lot

00:14:16,660 --> 00:14:21,670
of people call like a half open interval

00:14:18,210 --> 00:14:23,140
and you know you may notice that we're

00:14:21,670 --> 00:14:24,700
actually missing red leader here and

00:14:23,140 --> 00:14:28,180
he's pretty important part of the squad

00:14:24,700 --> 00:14:31,090
Oh their key name space here in another

00:14:28,180 --> 00:14:33,070
way by searching for a certain prefix so

00:14:31,090 --> 00:14:35,230
now we're getting the entire red

00:14:33,070 --> 00:14:39,540
squadron by searching for the prefix red

00:14:35,230 --> 00:14:39,540
and that's exactly what we want

00:14:49,350 --> 00:14:54,270
so ranges and prefixes are super cool I

00:14:51,780 --> 00:14:59,850
highly recommend using them this is the

00:14:54,270 --> 00:15:02,490
replacement for LS and another cool

00:14:59,850 --> 00:15:04,680
feature kind of enabled by this new move

00:15:02,490 --> 00:15:07,110
to the transactional key space is we can

00:15:04,680 --> 00:15:08,700
actually track history for keys that get

00:15:07,110 --> 00:15:11,400
entered into at CD so this is really

00:15:08,700 --> 00:15:13,500
handy for debugging things or even just

00:15:11,400 --> 00:15:15,810
looking into your programs and seeing

00:15:13,500 --> 00:15:20,360
how a key evolves over time tracking

00:15:15,810 --> 00:15:20,360
behavior so let's take a look at that

00:15:30,360 --> 00:15:39,850
so once again we'll need to set up our

00:15:33,730 --> 00:15:42,850
cluster what we're gonna do here it make

00:15:39,850 --> 00:15:44,950
it so that though that one key gets

00:15:42,850 --> 00:15:48,339
changed a number of times so we're gonna

00:15:44,950 --> 00:15:51,029
meet up and use silly pet names so doe

00:15:48,339 --> 00:15:53,350
just first snake a second verb is third

00:15:51,029 --> 00:15:56,529
we've got our keys that are all under

00:15:53,350 --> 00:15:58,839
the changed key and we can see that burb

00:15:56,529 --> 00:16:00,339
is our last changed and now when we add

00:15:58,839 --> 00:16:01,450
this rev flag

00:16:00,339 --> 00:16:03,100
we're actually searching over the

00:16:01,450 --> 00:16:06,130
revisions so we're getting some

00:16:03,100 --> 00:16:08,020
initialization here nothing is actually

00:16:06,130 --> 00:16:09,820
happening and as we go through those

00:16:08,020 --> 00:16:10,750
revisions will start to see values so

00:16:09,820 --> 00:16:13,870
we'll see

00:16:10,750 --> 00:16:18,370
it was Doge first it was snake second

00:16:13,870 --> 00:16:20,380
and it was burb last so if we were to

00:16:18,370 --> 00:16:25,060
actually continue to query I like this

00:16:20,380 --> 00:16:26,589
outside of the namespace we would start

00:16:25,060 --> 00:16:28,089
to get an error from that CD saying

00:16:26,589 --> 00:16:30,520
you've actually reached the end of this

00:16:28,089 --> 00:16:33,850
list you don't need to go any further so

00:16:30,520 --> 00:16:35,620
I personally am a big fan of that when

00:16:33,850 --> 00:16:42,370
it comes to just seeing what's happening

00:16:35,620 --> 00:16:45,339
that can be hard to track cool so use

00:16:42,370 --> 00:16:47,110
the red flag really handy I highly

00:16:45,339 --> 00:16:49,480
recommend it definitely one of the

00:16:47,110 --> 00:16:55,690
coolest things I like about Etsy D in

00:16:49,480 --> 00:16:57,850
the new process so there are actually a

00:16:55,690 --> 00:17:01,600
number of other handy methods that we

00:16:57,850 --> 00:17:04,660
don't have time to go into here if you

00:17:01,600 --> 00:17:06,790
are interested we have a very nice

00:17:04,660 --> 00:17:08,439
documentation on this and you can see

00:17:06,790 --> 00:17:10,990
some of the stuff that we've shared with

00:17:08,439 --> 00:17:14,709
you here is documented on core os's

00:17:10,990 --> 00:17:16,480
website so definitely check it out

00:17:14,709 --> 00:17:18,819
follow one of the interaction guides

00:17:16,480 --> 00:17:21,310
like this one and it'll get you kind of

00:17:18,819 --> 00:17:23,730
in the right mindset for working with

00:17:21,310 --> 00:17:23,730
that CD

00:17:34,130 --> 00:17:38,510
okay so the next stumbling block that we

00:17:36,500 --> 00:17:41,929
see people encounter is selecting the

00:17:38,510 --> 00:17:44,240
optimal cluster size an SME cluster it

00:17:41,929 --> 00:17:46,250
needs a majority of nodes or a quorum to

00:17:44,240 --> 00:17:48,950
agree on updates to the cluster state a

00:17:46,250 --> 00:17:51,620
clusters operational as long as this

00:17:48,950 --> 00:17:53,390
quorum is intact in the event of a loss

00:17:51,620 --> 00:17:56,240
of quorum like if there was a network

00:17:53,390 --> 00:17:57,799
partition or different types of hardware

00:17:56,240 --> 00:17:59,630
or network failure sed will

00:17:57,799 --> 00:18:01,730
automatically and safely resume after

00:17:59,630 --> 00:18:03,830
the network recovers and quorum is

00:18:01,730 --> 00:18:05,440
restored because sed is an

00:18:03,830 --> 00:18:08,600
implementation of the raft algorithm

00:18:05,440 --> 00:18:10,309
consistency is maintained we recommend

00:18:08,600 --> 00:18:12,289
an odd number of members in a cluster

00:18:10,309 --> 00:18:14,360
because this increases the clusters

00:18:12,289 --> 00:18:15,799
fault tolerance which means that the

00:18:14,360 --> 00:18:18,080
cluster can survive the same number of

00:18:15,799 --> 00:18:20,419
failures as an even sized cluster but

00:18:18,080 --> 00:18:22,760
with fewer nodes the difference can be

00:18:20,419 --> 00:18:27,169
seen by comparing even and odd sized

00:18:22,760 --> 00:18:29,870
clusters as you can see on this handy

00:18:27,169 --> 00:18:32,000
dandy little chart that we made for any

00:18:29,870 --> 00:18:33,500
odd sized cluster adding one node will

00:18:32,000 --> 00:18:34,970
always increase the number of nodes

00:18:33,500 --> 00:18:37,159
necessary for a quorum

00:18:34,970 --> 00:18:39,110
although adding a node to an odd sized

00:18:37,159 --> 00:18:41,270
cluster appears better since there are

00:18:39,110 --> 00:18:44,210
more machines the fault tolerance is

00:18:41,270 --> 00:18:46,400
actually worse since the exact same

00:18:44,210 --> 00:18:48,710
number of nodes may fail without losing

00:18:46,400 --> 00:18:50,900
quorum but there are more nodes that can

00:18:48,710 --> 00:18:52,490
fail if the cluster is in a state where

00:18:50,900 --> 00:18:54,830
it can't tolerate any more failures

00:18:52,490 --> 00:18:56,539
adding a node before removing nodes is

00:18:54,830 --> 00:18:58,880
actually dangerous because if the new

00:18:56,539 --> 00:19:02,570
node fails to register with the cluster

00:18:58,880 --> 00:19:04,370
quorum will be permanently lost so you

00:19:02,570 --> 00:19:06,320
might be looking at this saying hey so I

00:19:04,370 --> 00:19:09,049
should make a nine node at TD cluster

00:19:06,320 --> 00:19:10,570
for maximum reliability and I would tell

00:19:09,049 --> 00:19:12,559
you to hold up a second

00:19:10,570 --> 00:19:14,299
because you should keep in mind that

00:19:12,559 --> 00:19:15,890
there are more the more nodes there are

00:19:14,299 --> 00:19:18,799
in a cluster the longer it will take for

00:19:15,890 --> 00:19:26,179
that data to sync more nodes has a speed

00:19:18,799 --> 00:19:28,370
trade-off cool so that begs the question

00:19:26,179 --> 00:19:31,010
what the heck happens if I lose my

00:19:28,370 --> 00:19:34,970
quorum and my cluster and the answer is

00:19:31,010 --> 00:19:36,470
you dead cluster can't do anything so we

00:19:34,970 --> 00:19:38,090
need to recover from this somehow so

00:19:36,470 --> 00:19:40,640
let's this isn't anything new

00:19:38,090 --> 00:19:43,669
necessarily to Etsy d3 but this is still

00:19:40,640 --> 00:19:46,130
a good topic to cover just because it's

00:19:43,669 --> 00:19:49,030
so central to kind of distributed

00:19:46,130 --> 00:19:49,030
systems in general

00:19:52,210 --> 00:19:58,130
cool so we're gonna set up our cluster

00:19:55,580 --> 00:20:01,549
again enter a key I think that is just

00:19:58,130 --> 00:20:04,039
hello world and then we're gonna make

00:20:01,549 --> 00:20:05,840
use of a new command and at CD version 3

00:20:04,039 --> 00:20:08,450
called the snapshot command now you may

00:20:05,840 --> 00:20:10,010
remember from at CD version to some of

00:20:08,450 --> 00:20:11,600
our documentation recommended actually

00:20:10,010 --> 00:20:15,049
just wholesale copying the data

00:20:11,600 --> 00:20:17,149
directory that your data was in you can

00:20:15,049 --> 00:20:19,190
still do that in at CD version 3 but

00:20:17,149 --> 00:20:20,269
hopefully through this presentation try

00:20:19,190 --> 00:20:23,360
and convince you that the snapshot

00:20:20,269 --> 00:20:25,100
command is slightly more convenient so

00:20:23,360 --> 00:20:27,169
you can see here we've entered some

00:20:25,100 --> 00:20:30,110
values we are now saving our database to

00:20:27,169 --> 00:20:37,399
route slash snap we are now going to

00:20:30,110 --> 00:20:38,720
viciously kill our at CD process and now

00:20:37,399 --> 00:20:41,360
we're off to the races

00:20:38,720 --> 00:20:43,250
we we need to take a look at where the

00:20:41,360 --> 00:20:46,789
old at CD data is which is in this

00:20:43,250 --> 00:20:48,440
default at CD up in the upper left sorry

00:20:46,789 --> 00:20:52,039
that blue on blacks a little hard to

00:20:48,440 --> 00:20:54,200
read and we can see where our snap data

00:20:52,039 --> 00:20:56,809
is it's under our route as we had saved

00:20:54,200 --> 00:20:58,450
it before so what we want to do first at

00:20:56,809 --> 00:21:01,250
CD is not running at all at this point

00:20:58,450 --> 00:21:04,220
we just want to restore the snapshot to

00:21:01,250 --> 00:21:06,380
a location so we're gonna specify that

00:21:04,220 --> 00:21:09,230
location with the data dirt and we'll

00:21:06,380 --> 00:21:11,809
just name that new dirt and it looks

00:21:09,230 --> 00:21:13,970
like that's exceeded our snapshot has

00:21:11,809 --> 00:21:16,700
successfully been created and we have

00:21:13,970 --> 00:21:19,460
this new directory in our route where

00:21:16,700 --> 00:21:21,230
our snapshot has been restored to and

00:21:19,460 --> 00:21:22,370
now when when we launch our cluster

00:21:21,230 --> 00:21:25,880
we're going to use that same command

00:21:22,370 --> 00:21:31,340
data der equals new der pretzel it to

00:21:25,880 --> 00:21:34,340
get it to run and hopefully we can query

00:21:31,340 --> 00:21:36,320
it here and confirm that our data from

00:21:34,340 --> 00:21:40,309
our previous cluster is now on this new

00:21:36,320 --> 00:21:44,000
cluster which is exactly what happened

00:21:40,309 --> 00:21:45,740
so this is very simple one thing that's

00:21:44,000 --> 00:21:49,429
really nice about the snapshot is when

00:21:45,740 --> 00:21:52,070
you take a snapshot from s CD it using

00:21:49,429 --> 00:21:54,260
the version 3 API it's actually saving a

00:21:52,070 --> 00:21:57,080
cryptographic hash so if your data's

00:21:54,260 --> 00:21:59,360
been corrupted in transit or something

00:21:57,080 --> 00:22:00,010
has happened to it otherwise at CD we'll

00:21:59,360 --> 00:22:01,540
check that

00:22:00,010 --> 00:22:03,940
and warned you about it before it

00:22:01,540 --> 00:22:15,430
actually does the restore so that's

00:22:03,940 --> 00:22:17,620
pretty handy great and we'll talk about

00:22:15,430 --> 00:22:20,110
that again in a second snapshots and

00:22:17,620 --> 00:22:23,620
restoring things but just a quick detour

00:22:20,110 --> 00:22:25,600
into knowing your limits which is always

00:22:23,620 --> 00:22:28,510
good in software it's I think good

00:22:25,600 --> 00:22:32,560
personally - but some Silicon Valley

00:22:28,510 --> 00:22:35,740
stuff tells me it's not so there's a

00:22:32,560 --> 00:22:37,270
limit of one megabyte per request and by

00:22:35,740 --> 00:22:39,580
default there's a two gigabyte storage

00:22:37,270 --> 00:22:42,940
limit on that CD at City can scale up to

00:22:39,580 --> 00:22:45,850
8 gigabytes storage but that's

00:22:42,940 --> 00:22:49,000
configurable by a flag so you might be

00:22:45,850 --> 00:22:50,410
thinking this is a little weird what's

00:22:49,000 --> 00:22:53,020
going on here

00:22:50,410 --> 00:22:55,990
and on core OS comm we have a page that

00:22:53,020 --> 00:22:58,360
sort of explains this you know the

00:22:55,990 --> 00:23:01,720
things that you would want to compare at

00:22:58,360 --> 00:23:05,320
CD 2 are in this handy comparison chart

00:23:01,720 --> 00:23:08,230
so there's at CD zookeeper console and

00:23:05,320 --> 00:23:11,110
new sequel databases like cockroach DB

00:23:08,230 --> 00:23:14,020
or spanner if you're looking to store

00:23:11,110 --> 00:23:16,810
things that are in the terabyte sort of

00:23:14,020 --> 00:23:18,340
size or the multi-gigabyte size you may

00:23:16,810 --> 00:23:22,090
be searching for something more like

00:23:18,340 --> 00:23:24,400
spanner or cockroach DB if you are

00:23:22,090 --> 00:23:28,150
actually looking to store configuration

00:23:24,400 --> 00:23:31,690
data state data past messages around at

00:23:28,150 --> 00:23:33,430
CD is wonderful if you are looking for

00:23:31,690 --> 00:23:37,030
service discovery or something along

00:23:33,430 --> 00:23:39,790
those lines a console works very well it

00:23:37,030 --> 00:23:42,730
has a lot more developer experience sort

00:23:39,790 --> 00:23:44,830
of niceties but it tends to fall down

00:23:42,730 --> 00:23:48,670
when you get beyond you know several

00:23:44,830 --> 00:23:51,280
hundred megabytes in its storage so at

00:23:48,670 --> 00:23:54,040
CD scales a lot further and we see

00:23:51,280 --> 00:23:55,540
zookeeper as our real kind of the target

00:23:54,040 --> 00:23:58,390
that we want to hit and to that point

00:23:55,540 --> 00:24:00,670
we've even released an adapter a wrapper

00:23:58,390 --> 00:24:03,270
that sits on top of that CD and take

00:24:00,670 --> 00:24:06,880
commands from the zookeeper eight API

00:24:03,270 --> 00:24:08,920
and SCD can act in place of zookeeper in

00:24:06,880 --> 00:24:11,710
your cluster so we have some folks

00:24:08,920 --> 00:24:13,540
running at CD in place of zookeeper on

00:24:11,710 --> 00:24:14,919
an Apache Kafka setup

00:24:13,540 --> 00:24:16,270
we've seen a lot of good performance

00:24:14,919 --> 00:24:17,470
benefits from that you can check it out

00:24:16,270 --> 00:24:19,540
on our blog if you're interested in

00:24:17,470 --> 00:24:28,450
reading about all the fun statistics

00:24:19,540 --> 00:24:30,520
around them oh yeah sorry it's the the

00:24:28,450 --> 00:24:34,710
wrapper is called zet CD if you're

00:24:30,520 --> 00:24:34,710
interested at CD with a Z at the front

00:24:35,790 --> 00:24:44,260
cool so oh I think I skipped the slide

00:24:40,150 --> 00:24:46,000
yeah so does Etsy D do Byzantine

00:24:44,260 --> 00:24:49,720
fault-tolerance and the quick answer is

00:24:46,000 --> 00:24:51,669
no so some of you may be scratching your

00:24:49,720 --> 00:24:54,730
head saying what is Byzantine fault

00:24:51,669 --> 00:24:56,500
tolerance itself so what that is is when

00:24:54,730 --> 00:24:59,650
something crashes it doesn't completely

00:24:56,500 --> 00:25:01,660
crash it crashes in a partial way so

00:24:59,650 --> 00:25:04,059
your health check might report that the

00:25:01,660 --> 00:25:06,010
node is working perfectly well but the

00:25:04,059 --> 00:25:08,620
node is actually spewing garbage into

00:25:06,010 --> 00:25:11,799
your cluster this is sometimes called

00:25:08,620 --> 00:25:13,480
like the Byzantine generals problem and

00:25:11,799 --> 00:25:17,320
it's well known in the distributed

00:25:13,480 --> 00:25:19,870
system space so quoting from Wikipedia

00:25:17,320 --> 00:25:21,340
Byzantine failures imply no restrictions

00:25:19,870 --> 00:25:23,980
which means that the failed node can

00:25:21,340 --> 00:25:26,020
generate arbitrary data pretending to be

00:25:23,980 --> 00:25:28,000
a correct one and it makes fault

00:25:26,020 --> 00:25:32,500
tolerance difficult so what does that

00:25:28,000 --> 00:25:33,760
mean for @cd well it it's the same thing

00:25:32,500 --> 00:25:35,980
that it means for any other raft

00:25:33,760 --> 00:25:37,960
protocol algorithm this is something

00:25:35,980 --> 00:25:41,530
that just raft doesn't cover in general

00:25:37,960 --> 00:25:43,510
and @cd kind of being one of them more

00:25:41,530 --> 00:25:46,360
well known raft implementations out

00:25:43,510 --> 00:25:48,280
there is no different we don't do

00:25:46,360 --> 00:25:50,320
anything fancy to dance around that that

00:25:48,280 --> 00:25:53,980
that is all to say if you introduce

00:25:50,320 --> 00:25:57,190
garbage into your cluster @cd may not

00:25:53,980 --> 00:26:01,809
know what to do if it is not information

00:25:57,190 --> 00:26:03,460
that's supposed to be there cool what

00:26:01,809 --> 00:26:07,500
else is important well one thing is

00:26:03,460 --> 00:26:10,540
upgrading from version 2 to version 3

00:26:07,500 --> 00:26:12,220
Before we jump into that you should know

00:26:10,540 --> 00:26:14,290
that there are other cool tricks you can

00:26:12,220 --> 00:26:16,900
do like there's a multi key conditional

00:26:14,290 --> 00:26:19,150
transaction this means like your data

00:26:16,900 --> 00:26:21,970
will all get written at the same time

00:26:19,150 --> 00:26:23,710
guaranteed you should definitely do this

00:26:21,970 --> 00:26:26,169
instead of just comparing and swapping

00:26:23,710 --> 00:26:27,400
values you know comparing and swapping

00:26:26,169 --> 00:26:30,460
values is

00:26:27,400 --> 00:26:32,740
easy but if something goes wrong midway

00:26:30,460 --> 00:26:36,250
through that you might be up a creek

00:26:32,740 --> 00:26:39,370
without a paddle and it's also important

00:26:36,250 --> 00:26:40,780
to note that we had TTLs time to live on

00:26:39,370 --> 00:26:44,500
certain keys in that city you could

00:26:40,780 --> 00:26:47,050
specify that as a flag in version 2 in

00:26:44,500 --> 00:26:50,790
version 3 there is a new lease object

00:26:47,050 --> 00:26:58,270
which the TTL attaches to so it's just a

00:26:50,790 --> 00:27:00,309
quick switch in the semantics there cool

00:26:58,270 --> 00:27:02,950
so what does it look like when you

00:27:00,309 --> 00:27:05,440
upgrade from 2 to 3 this happened

00:27:02,950 --> 00:27:08,620
recently when kubernetes 1.6 adopted at

00:27:05,440 --> 00:27:10,510
CD 3 as it's kind of main data store and

00:27:08,620 --> 00:27:14,130
it's actually a relatively simple

00:27:10,510 --> 00:27:17,320
process so at CD version 2 and version 3

00:27:14,130 --> 00:27:19,780
we've thought ested the upgrade from 2.3

00:27:17,320 --> 00:27:22,809
to 3.0 so that's the upgrade path you'll

00:27:19,780 --> 00:27:24,760
likely take what you'll do is you'll say

00:27:22,809 --> 00:27:27,580
you have a three node cluster you'll

00:27:24,760 --> 00:27:30,820
stop one of the 2.3 processes and then

00:27:27,580 --> 00:27:33,309
just drop in the 3.0 process in its

00:27:30,820 --> 00:27:35,170
place and these two versions can

00:27:33,309 --> 00:27:37,390
actually intermingle so the 3 the new

00:27:35,170 --> 00:27:39,370
3.0 process will sync gathered the data

00:27:37,390 --> 00:27:42,010
you'll stop one of the other two point

00:27:39,370 --> 00:27:44,170
three processes drop in a 3.0 process

00:27:42,010 --> 00:27:47,190
rinse and repeat until your entire

00:27:44,170 --> 00:27:49,660
cluster is now running at CD version 3.0

00:27:47,190 --> 00:27:52,240
you'll find the convenience command on

00:27:49,660 --> 00:27:55,540
at CD 3.0 to migrate your old version

00:27:52,240 --> 00:27:57,730
two keys to the new 3.0 namespace if you

00:27:55,540 --> 00:27:58,630
desire that if you want to take

00:27:57,730 --> 00:28:02,260
advantage of all the cool new

00:27:58,630 --> 00:28:06,429
performance stuff but if not um you can

00:28:02,260 --> 00:28:08,320
keep running the old v2 namespace on the

00:28:06,429 --> 00:28:14,710
new well-tested

00:28:08,320 --> 00:28:16,480
at CD 3.0 platform another thing that's

00:28:14,710 --> 00:28:20,530
worth checking out since you're all here

00:28:16,480 --> 00:28:23,860
and interested in watching at CD kind of

00:28:20,530 --> 00:28:25,179
get kicked around I like it I think this

00:28:23,860 --> 00:28:32,290
is the funnest part of distributed

00:28:25,179 --> 00:28:33,880
systems talked it up in 2016 and his

00:28:32,290 --> 00:28:37,450
talk focused on running containers at

00:28:33,880 --> 00:28:39,040
scale so he suggested fire drills a

00:28:37,450 --> 00:28:40,960
really good way to test your knowledge

00:28:39,040 --> 00:28:41,320
of running the cluster basically the

00:28:40,960 --> 00:28:42,340
most

00:28:41,320 --> 00:28:44,169
Fortin things you need to know about

00:28:42,340 --> 00:28:46,120
distributed systems are the failure

00:28:44,169 --> 00:28:48,279
states all of the theory that's around

00:28:46,120 --> 00:28:51,190
distributed systems is essentially how

00:28:48,279 --> 00:28:53,139
can it go wrong so you should have some

00:28:51,190 --> 00:28:57,519
good working knowledge of how things

00:28:53,139 --> 00:29:00,340
fail and at CD as well so I think this

00:28:57,519 --> 00:29:02,529
is a great guide unfortunately our CTOs

00:29:00,340 --> 00:29:06,250
talk was more focused on kubernetes than

00:29:02,529 --> 00:29:08,679
at CD so that begs the question what

00:29:06,250 --> 00:29:12,039
should we use them to do our fire drill

00:29:08,679 --> 00:29:15,129
and thankfully core OS ascribes to the

00:29:12,039 --> 00:29:18,450
the googly sre kind of philosophy of

00:29:15,129 --> 00:29:21,309
codifying all of your procedures in

00:29:18,450 --> 00:29:23,250
actual code so you can actually check

00:29:21,309 --> 00:29:27,610
out that city operator which is our

00:29:23,250 --> 00:29:30,580
version of that and let me zoom this in

00:29:27,610 --> 00:29:33,549
a little bit scroll down on the readme

00:29:30,580 --> 00:29:37,029
so you can see there's an overview and

00:29:33,549 --> 00:29:39,279
then a quick demo basically just shows

00:29:37,029 --> 00:29:41,830
you how to get the cluster created on

00:29:39,279 --> 00:29:43,809
kubernetes that's what the Etsy operator

00:29:41,830 --> 00:29:47,850
is it leverages part of kubernetes

00:29:43,809 --> 00:29:50,559
reconciliation loop to make things easy

00:29:47,850 --> 00:29:53,919
there is all these drills laid out for

00:29:50,559 --> 00:29:56,919
how to resize a cluster or recover from

00:29:53,919 --> 00:30:00,009
fail failure modes um that sort of thing

00:29:56,919 --> 00:30:03,240
so this is your fire drill template if

00:30:00,009 --> 00:30:03,240
you want to follow along with that

00:30:15,379 --> 00:30:21,679
great so I was going to do demo of the

00:30:18,469 --> 00:30:23,479
HDD operator in action unfortunately I

00:30:21,679 --> 00:30:26,209
had problems with hotel Wi-Fi so let's

00:30:23,479 --> 00:30:29,929
see if that resolved itself during the

00:30:26,209 --> 00:30:31,519
talk I had this all kind of oh boy which

00:30:29,929 --> 00:30:33,079
one of these is my actual terminal

00:30:31,519 --> 00:30:36,309
that's the question

00:30:33,079 --> 00:30:39,579
well should be able to quit a quick time

00:30:36,309 --> 00:30:39,579
there we go

00:30:42,140 --> 00:30:45,209
[Music]

00:30:46,449 --> 00:30:53,349
nope and our cluster is actually still

00:30:49,129 --> 00:30:56,419
booting got stunted by the hotel Wi-Fi

00:30:53,349 --> 00:30:58,190
cool so in any event what I was gonna

00:30:56,419 --> 00:31:00,229
suggest is if you are not on a hotel

00:30:58,190 --> 00:31:02,809
Wi-Fi if you're at home on your own

00:31:00,229 --> 00:31:04,099
connection we have the SCD sandbox which

00:31:02,809 --> 00:31:07,639
lets you download a kubernetes cluster

00:31:04,099 --> 00:31:12,139
ended up using vagrant and we eat our

00:31:07,639 --> 00:31:13,729
own dog food here so you know the city

00:31:12,139 --> 00:31:15,499
operator is actually at the heart of

00:31:13,729 --> 00:31:18,679
this kubernetes cluster so what you can

00:31:15,499 --> 00:31:20,869
do is open up the tectonic console visit

00:31:18,679 --> 00:31:23,569
the deployment for the at city operator

00:31:20,869 --> 00:31:26,059
kick over a node just delete it and

00:31:23,569 --> 00:31:27,469
watch the operator automatically recover

00:31:26,059 --> 00:31:29,569
from that failure without you doing

00:31:27,469 --> 00:31:32,809
anything it'll automatically reconcile

00:31:29,569 --> 00:31:36,549
that it needs three nodes and fix that

00:31:32,809 --> 00:31:36,549
for you without you intervening at all

00:31:39,909 --> 00:31:45,889
okay so as Paul said we invite you to

00:31:43,819 --> 00:31:48,289
try out the sed operator and the

00:31:45,889 --> 00:31:50,479
tectonic sandbox if you're interested in

00:31:48,289 --> 00:31:52,429
the tectonic sandbox that is where you

00:31:50,479 --> 00:31:56,169
can find it and that's where you can

00:31:52,429 --> 00:31:58,399
find us that might be Paul LC Philly

00:31:56,169 --> 00:32:00,129
and if you would like a copy of these

00:31:58,399 --> 00:32:02,359
slides that's where you can find them

00:32:00,129 --> 00:32:05,829
and now we'll open it up for any

00:32:02,359 --> 00:32:05,829
questions people might have thank you

00:32:18,050 --> 00:32:23,060
that is an excellent question I am

00:32:20,300 --> 00:32:25,730
unsure it seems that an initialization

00:32:23,060 --> 00:32:28,900
kind of blank spot gets saved at the

00:32:25,730 --> 00:32:30,830
front for every revision so it's

00:32:28,900 --> 00:32:33,290
definitely the sort of thing that you'd

00:32:30,830 --> 00:32:36,170
want to tumble through programmatically

00:32:33,290 --> 00:32:39,340
as opposed to doing it introspectively

00:32:36,170 --> 00:32:39,340
kind of through the command line

00:32:48,880 --> 00:32:53,170
not as far as I'm aware that's a great

00:32:51,040 --> 00:32:54,910
question though I'll ask that CD team

00:32:53,170 --> 00:32:58,350
someone on there might know and if I

00:32:54,910 --> 00:32:58,350
find something I'll tweet about it

00:33:11,840 --> 00:33:16,700
yeah I think you would have to write a

00:33:13,760 --> 00:33:19,610
loop unfortunately as ugly as bash

00:33:16,700 --> 00:33:21,110
scripting is again I'll check with the

00:33:19,610 --> 00:33:22,990
team that sounds like a great feature

00:33:21,110 --> 00:33:52,580
request if we don't already have it so

00:33:22,990 --> 00:33:54,590
cool yeah that's absolutely correct so

00:33:52,580 --> 00:33:56,210
in the old versioning scheme like

00:33:54,590 --> 00:33:59,900
kubernetes for instance would create a

00:33:56,210 --> 00:34:02,990
resources slash member slash whatever

00:33:59,900 --> 00:34:05,300
thing it was controlling those slashes

00:34:02,990 --> 00:34:07,940
would just kind of disappear and you'd

00:34:05,300 --> 00:34:11,240
have those that kind of prefix name

00:34:07,940 --> 00:34:12,770
upfront so it it works the same way in

00:34:11,240 --> 00:34:15,230
practice when you're storing a key

00:34:12,770 --> 00:34:19,190
inside of Etsy D you're just not using

00:34:15,230 --> 00:34:21,110
slashes to delimit different folders and

00:34:19,190 --> 00:34:22,640
then when you query it you kind of get

00:34:21,110 --> 00:34:29,240
exactly what you're looking for in that

00:34:22,640 --> 00:34:31,040
space that concept is completely gone so

00:34:29,240 --> 00:34:34,130
it's a flat key space for performance

00:34:31,040 --> 00:34:35,899
reasons we just saw a huge benefit to

00:34:34,130 --> 00:34:38,210
switching to that model and that that's

00:34:35,899 --> 00:34:39,740
also part of the MVC C transition it

00:34:38,210 --> 00:34:43,070
enabled a lot of these other

00:34:39,740 --> 00:34:45,320
architectural changes and I think a lot

00:34:43,070 --> 00:34:47,330
of that was at the request of a lot of

00:34:45,320 --> 00:34:49,040
the projects that City supports we

00:34:47,330 --> 00:34:51,950
support a lot of global 2000 companies

00:34:49,040 --> 00:34:53,899
that are very very large scale and

00:34:51,950 --> 00:35:00,470
kubernetes in particular drove a lot of

00:34:53,899 --> 00:35:02,270
the API changes yes you can still

00:35:00,470 --> 00:35:05,470
include slash if you would like to

00:35:02,270 --> 00:35:05,470
include that in your keys

00:35:11,620 --> 00:35:17,620
so the entire request can be one

00:35:13,900 --> 00:35:19,750
megabyte so if your key takes up like

00:35:17,620 --> 00:35:22,000
you know all of that you're kind of SLO

00:35:19,750 --> 00:35:29,050
Sol in terms of storing your value but

00:35:22,000 --> 00:35:29,880
yeah but that's kind of the terms it's

00:35:29,050 --> 00:35:33,140
cool

00:35:29,880 --> 00:35:36,890
all right well thank you everyone Cheers

00:35:33,140 --> 00:35:36,890

YouTube URL: https://www.youtube.com/watch?v=ehNE_apQ8w0


