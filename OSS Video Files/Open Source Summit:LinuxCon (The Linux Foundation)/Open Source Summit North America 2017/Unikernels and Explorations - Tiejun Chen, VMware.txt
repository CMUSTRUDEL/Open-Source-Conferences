Title: Unikernels and Explorations - Tiejun Chen, VMware
Publication date: 2017-09-13
Playlist: Open Source Summit North America 2017
Description: 
	Unikernels and Explorations - Tiejun Chen, VMware

Unikernel is really beginning to attract people’s attention. Comparing to the traditional VM or the recent containers, Unikernels are smaller, more secure and efficient, making them ideal for cloud environments. There are already lots of open source projects but why these existing unikernels have yet to gain large popularity broadly? We think Unikernels are facing same major challenges. In this presentation, we will review our exploration of if-how we can construct the best platform of running unikernels cases like converting Linux as Unikernel. It's necessary to optimize that to gain some good performance and convenience to run any customized images based on different Linux profiles like Real-Time/Secure/.

About Tiejun Chen
I’m a staff engineer from ATC, Advanced Technology Center, VMware China. Currently we’re trying to work out our own Unikernel & IoT & Serverless project. Before join VMware, I worked at Wind River where I was responsible of developing Wind River Linux BSP, Kernel features and our own paraviratualized Guest OS, and submitted our fixes into mainstream like Linux/PowerPC/RT Linux. And then I joined OTC, Intel to enable new hardware features on open source community like KVM/XEN/Qemu.
Captions: 
	00:00:00,000 --> 00:00:06,390
I'm a staff engineer from we ever in

00:00:02,429 --> 00:00:09,090
China India it is a team I work at a

00:00:06,390 --> 00:00:12,599
several project like LT Internet of sin

00:00:09,090 --> 00:00:14,490
and our photon links wise and some about

00:00:12,599 --> 00:00:16,379
so less and I computed

00:00:14,490 --> 00:00:19,320
yes you cannot also wonder my

00:00:16,379 --> 00:00:21,689
exploration before enjoying the VMware I

00:00:19,320 --> 00:00:24,810
worked several companies you may hear

00:00:21,689 --> 00:00:26,340
some name like when the river was right

00:00:24,810 --> 00:00:28,680
today I would respond before when the

00:00:26,340 --> 00:00:31,019
readings colonel and the PSP development

00:00:28,680 --> 00:00:34,050
and the Vanaras or hypervisor and the

00:00:31,019 --> 00:00:36,390
paralyzer cast OS and I also worked as a

00:00:34,050 --> 00:00:38,010
Intel OTC open-sided talkin this

00:00:36,390 --> 00:00:40,590
Technology Center

00:00:38,010 --> 00:00:44,129
I was enabling something to some open

00:00:40,590 --> 00:00:46,680
second IG q me oak um and then I say so

00:00:44,129 --> 00:00:51,870
today I'd like to share with you one

00:00:46,680 --> 00:00:53,879
exploration of unique kernels so but the

00:00:51,870 --> 00:00:56,250
first I have to make this very clear you

00:00:53,879 --> 00:00:58,170
know this is my exploration so so far is

00:00:56,250 --> 00:01:02,100
not true demise or commitment from

00:00:58,170 --> 00:01:03,600
VMware but I myself hope one day I come

00:01:02,100 --> 00:01:05,760
in this happened because I believe

00:01:03,600 --> 00:01:10,080
unique kernel will play very important

00:01:05,760 --> 00:01:11,880
role in the future so let's go straight

00:01:10,080 --> 00:01:13,619
to the Jindal curriculum so there's

00:01:11,880 --> 00:01:17,000
three parts the first part about some

00:01:13,619 --> 00:01:19,920
background next part about exploration

00:01:17,000 --> 00:01:25,799
according to some question that's

00:01:19,920 --> 00:01:27,990
probably the summary so first let's look

00:01:25,799 --> 00:01:30,450
at this the background just take a look

00:01:27,990 --> 00:01:32,189
at it's a picture on the bottom side her

00:01:30,450 --> 00:01:34,229
since this kind of help understanding

00:01:32,189 --> 00:01:34,860
what's happening from VM to Munich

00:01:34,229 --> 00:01:38,130
kernels

00:01:34,860 --> 00:01:40,200
VM virtual machine on the

00:01:38,130 --> 00:01:41,939
provide isolation with that hardware

00:01:40,200 --> 00:01:43,890
virtualization technology but it's a

00:01:41,939 --> 00:01:47,340
high rate so a couple years ago

00:01:43,890 --> 00:01:49,409
container was brought out it's actually

00:01:47,340 --> 00:01:52,470
it's a business some existing internal

00:01:49,409 --> 00:01:55,290
feature namespace C group and capability

00:01:52,470 --> 00:01:58,350
but it's it's live it's but it's not

00:01:55,290 --> 00:02:00,479
very secure one reason I think all

00:01:58,350 --> 00:02:02,549
containers share one common host device

00:02:00,479 --> 00:02:05,040
so if something's wrong with that host

00:02:02,549 --> 00:02:05,579
wise they could have big impact on other

00:02:05,040 --> 00:02:07,920
container

00:02:05,579 --> 00:02:10,140
you should remember last year there was

00:02:07,920 --> 00:02:12,480
a very famous Park link Sumerian

00:02:10,140 --> 00:02:14,100
substation park don't you copy all right

00:02:12,480 --> 00:02:17,100
so I really make

00:02:14,100 --> 00:02:19,290
to escape so instead some people are

00:02:17,100 --> 00:02:22,440
trying to trim it down at host OS and

00:02:19,290 --> 00:02:25,220
just deploy one or few container inside

00:02:22,440 --> 00:02:28,710
is a VM we call it a continue at the VM

00:02:25,220 --> 00:02:30,600
like a hyper like a very will also

00:02:28,710 --> 00:02:34,470
highlight a big risk feel integrated

00:02:30,600 --> 00:02:36,360
container under but you should notice

00:02:34,470 --> 00:02:38,550
that's the OD region between kernel

00:02:36,360 --> 00:02:39,290
space and us spaces so it still costs

00:02:38,550 --> 00:02:42,630
too much

00:02:39,290 --> 00:02:45,360
so what's next you mean kernel you incur

00:02:42,630 --> 00:02:47,760
away build application into that one key

00:02:45,360 --> 00:02:49,590
operating system but it just keeps all

00:02:47,760 --> 00:02:52,710
the natural part to make your

00:02:49,590 --> 00:02:59,250
application wrong so it's like a library

00:02:52,710 --> 00:03:00,600
so labor is now it's a whole imagine so

00:02:59,250 --> 00:03:02,880
let's look at how to define unique

00:03:00,600 --> 00:03:05,460
kernel according to weaker you in kernel

00:03:02,880 --> 00:03:07,590
special ID a single stress machine-made

00:03:05,460 --> 00:03:10,950
constructed by using library operating

00:03:07,590 --> 00:03:14,250
system special ID and the single recipes

00:03:10,950 --> 00:03:16,890
and labor OS another I want to mention

00:03:14,250 --> 00:03:19,200
here is it doesn't require what relation

00:03:16,890 --> 00:03:22,400
token are you so that means you cannot

00:03:19,200 --> 00:03:25,500
shoot it wrong on by matter as well I

00:03:22,400 --> 00:03:27,960
like the categorize the unique color

00:03:25,500 --> 00:03:30,360
toward different groups the first ones

00:03:27,960 --> 00:03:34,130
general form a union colonel it's like a

00:03:30,360 --> 00:03:37,350
library but derived from general wise

00:03:34,130 --> 00:03:38,910
like a Pollock comprised program you

00:03:37,350 --> 00:03:41,850
know these kids that we have that roam

00:03:38,910 --> 00:03:44,130
wrong and osv another egg is about such

00:03:41,850 --> 00:03:46,470
language is specifically in kernel

00:03:44,130 --> 00:03:50,310
do library but it's specifically to one

00:03:46,470 --> 00:03:52,410
programming language like otherwise it's

00:03:50,310 --> 00:03:58,500
written with an O camel a very special

00:03:52,410 --> 00:04:00,180
language so the two groups now let's

00:03:58,500 --> 00:04:03,060
take a close look at what's that

00:04:00,180 --> 00:04:06,390
important and biggest hydrastine kernel

00:04:03,060 --> 00:04:09,090
so single dress space that means you can

00:04:06,390 --> 00:04:13,470
to 0 copy is easy to configure that huge

00:04:09,090 --> 00:04:15,570
page and single mode so without it don't

00:04:13,470 --> 00:04:18,030
need that highway system call we can use

00:04:15,570 --> 00:04:21,120
function code directly and it's just one

00:04:18,030 --> 00:04:24,180
process so know that Arabic annex which

00:04:21,120 --> 00:04:26,160
for example for x86 we don't need to

00:04:24,180 --> 00:04:30,120
reload the cs3

00:04:26,160 --> 00:04:33,240
so compared to that traditional eyes and

00:04:30,120 --> 00:04:36,180
some even competitive internal internal

00:04:33,240 --> 00:04:39,750
controls and benefits like improving

00:04:36,180 --> 00:04:42,690
security because you're the VM so they

00:04:39,750 --> 00:04:47,760
are protected by hypervisor by hardware

00:04:42,690 --> 00:04:50,250
which is technology and same time it's

00:04:47,760 --> 00:04:52,890
specialized so it had less components

00:04:50,250 --> 00:04:54,930
each component has a less code so the

00:04:52,890 --> 00:04:59,370
text surface are you colonel are reduced

00:04:54,930 --> 00:05:01,650
yes Mona and you also consisted similar

00:04:59,370 --> 00:05:03,720
smaller that's a memory size and the

00:05:01,650 --> 00:05:06,060
footprint and you can't put it out very

00:05:03,720 --> 00:05:13,890
quickly and you can open them from

00:05:06,060 --> 00:05:15,600
different layer here so actually they

00:05:13,890 --> 00:05:20,040
allowed to even kind of approach this so

00:05:15,600 --> 00:05:22,100
far like osv include OS and ROM kernel

00:05:20,040 --> 00:05:24,770
and drop reach top really from a

00:05:22,100 --> 00:05:27,540
Microsoft for Windows

00:05:24,770 --> 00:05:30,120
uniquor Univ actually not only kind of

00:05:27,540 --> 00:05:32,790
itself it's a tool open-source a tool

00:05:30,120 --> 00:05:35,520
but it can help you compare application

00:05:32,790 --> 00:05:37,020
into some existing unit kernel or s very

00:05:35,520 --> 00:05:39,300
ROM colonel

00:05:37,020 --> 00:05:40,680
there should be a sort of supported

00:05:39,300 --> 00:05:43,200
unification sir

00:05:40,680 --> 00:05:46,590
but anyway this can help you the prowl

00:05:43,200 --> 00:05:49,710
unikom image across the different cloud

00:05:46,590 --> 00:05:52,380
even on some IOT devices so it's very

00:05:49,710 --> 00:05:54,600
interesting i also also you can find

00:05:52,380 --> 00:05:57,720
some more interesting solution something

00:05:54,600 --> 00:05:59,130
from talker I think I've only I talked

00:05:57,720 --> 00:06:01,890
to uni kernel wish to the sink for

00:05:59,130 --> 00:06:04,560
talking in last year otoko quite a

00:06:01,890 --> 00:06:06,540
Unicode system after that people really

00:06:04,560 --> 00:06:08,520
paid attention to unique her nose and

00:06:06,540 --> 00:06:11,040
the talk also released someone project

00:06:08,520 --> 00:06:12,390
fabricate and whip you nakida basically

00:06:11,040 --> 00:06:14,840
they can make a stroke container can

00:06:12,390 --> 00:06:18,720
wrong with Mac OS or the Windows OS I

00:06:14,840 --> 00:06:21,270
use this year it's a dog conference that

00:06:18,720 --> 00:06:25,500
earnings Kate if you're have some all

00:06:21,270 --> 00:06:28,740
these incoming projects and Michelangelo

00:06:25,500 --> 00:06:30,840
Michelangelo is trying to provide that

00:06:28,740 --> 00:06:34,190
very cool the cloud infrastructure to

00:06:30,840 --> 00:06:38,870
embrace HPC high-performance computing

00:06:34,190 --> 00:06:40,910
one of components cast wise the u OS v

00:06:38,870 --> 00:06:42,710
I've really only color is very smaller

00:06:40,910 --> 00:06:44,870
and you have a very good networker

00:06:42,710 --> 00:06:47,000
performance so some people and some

00:06:44,870 --> 00:06:49,580
research they are you that the OS video

00:06:47,000 --> 00:06:52,040
that's it right away sir or at the clerk

00:06:49,580 --> 00:06:54,590
OS to construct some flexible I have the

00:06:52,040 --> 00:06:58,880
solution like you can provide a sample

00:06:54,590 --> 00:07:00,979
every solution change the services so

00:06:58,880 --> 00:07:05,180
you can see some people really unique

00:07:00,979 --> 00:07:07,130
kernel to something so I only some

00:07:05,180 --> 00:07:09,260
public clamor you can father unique are

00:07:07,130 --> 00:07:12,520
not really smaller faster and have a

00:07:09,260 --> 00:07:15,919
good performance in some cases it just

00:07:12,520 --> 00:07:18,200
need quick buys some hard lookin

00:07:15,919 --> 00:07:20,630
goodbyes in some cases you can put our

00:07:18,200 --> 00:07:25,120
lessons such my own seconds and have

00:07:20,630 --> 00:07:25,120
another extraordinary network throughput

00:07:25,479 --> 00:07:30,740
he also released some links I think you

00:07:28,910 --> 00:07:34,400
can get more information about a unique

00:07:30,740 --> 00:07:37,760
kernel evaluation so what I'm trying to

00:07:34,400 --> 00:07:39,889
see that redundancy I see these are

00:07:37,760 --> 00:07:41,990
benefits are theoretically because of

00:07:39,889 --> 00:07:46,310
you we really you can really come to the

00:07:41,990 --> 00:07:48,650
coolest thing so based on our

00:07:46,310 --> 00:07:51,260
investigation our study and our

00:07:48,650 --> 00:07:53,060
discussion so we think unique are not

00:07:51,260 --> 00:07:55,880
really yelled an incomparable have

00:07:53,060 --> 00:07:59,210
performance but why is all existing you

00:07:55,880 --> 00:08:00,520
in kernel have yet another popularity we

00:07:59,210 --> 00:08:03,830
think they are facing some challenges

00:08:00,520 --> 00:08:06,160
like companion in our user kissing we

00:08:03,830 --> 00:08:08,510
have some somebody is not enough

00:08:06,160 --> 00:08:10,729
compatibility no UN kernel is

00:08:08,510 --> 00:08:13,610
essentially is a new ways one mood

00:08:10,729 --> 00:08:17,210
single dress sport so how to support the

00:08:13,610 --> 00:08:20,090
legs is unique application and same time

00:08:17,210 --> 00:08:23,450
relax that protective support I mean

00:08:20,090 --> 00:08:25,490
those original tool like Mon eternity

00:08:23,450 --> 00:08:29,930
burger Logan still cannot to work with

00:08:25,490 --> 00:08:32,719
the unit current directly and also fine

00:08:29,930 --> 00:08:34,039
those agonizing colonel just focus on

00:08:32,719 --> 00:08:35,860
unit itself

00:08:34,039 --> 00:08:38,839
maybe we should to Colorado if we can

00:08:35,860 --> 00:08:41,630
improve internal from hypervisor wheel

00:08:38,839 --> 00:08:45,020
and we also want to take if we can

00:08:41,630 --> 00:08:46,190
deform some standard to unique kernel so

00:08:45,020 --> 00:08:48,110
basically a single

00:08:46,190 --> 00:08:50,390
meanings you know could it be a good

00:08:48,110 --> 00:08:52,610
candidate for you in kernel bee colonies

00:08:50,390 --> 00:08:55,060
that you know the use of why delay

00:08:52,610 --> 00:08:58,130
bring out so valuable use the keys and

00:08:55,060 --> 00:09:00,560
also can find our acceleration and

00:08:58,130 --> 00:09:03,950
optimization tunings this trio can

00:09:00,560 --> 00:09:05,690
benefit our unique kernel and the Knicks

00:09:03,950 --> 00:09:09,170
have that very cool the community I

00:09:05,690 --> 00:09:10,850
think this a very good you see the most

00:09:09,170 --> 00:09:17,180
important effect to make a unique

00:09:10,850 --> 00:09:19,339
elastic state so next part is about our

00:09:17,180 --> 00:09:21,740
exploration let's begin with some

00:09:19,339 --> 00:09:23,620
potential but valuable the keys the

00:09:21,740 --> 00:09:26,240
first ball is at our intensive education

00:09:23,620 --> 00:09:28,700
know the only cannot aim in the to

00:09:26,240 --> 00:09:30,470
undress at our performance because we

00:09:28,700 --> 00:09:34,130
had a simple and efficient I'll follow

00:09:30,470 --> 00:09:36,380
free local but just some or one subset

00:09:34,130 --> 00:09:38,630
are we in turn our intensive application

00:09:36,380 --> 00:09:41,990
that's a latency send to your

00:09:38,630 --> 00:09:44,329
application other subsets like a binary

00:09:41,990 --> 00:09:46,430
this intensive application I think we

00:09:44,329 --> 00:09:48,980
need a more consideration exploration

00:09:46,430 --> 00:09:51,980
but I knew a unique Anoka terrible can

00:09:48,980 --> 00:09:54,980
contribute our larger and the exposure I

00:09:51,980 --> 00:09:56,720
mentioned we already had every so unique

00:09:54,980 --> 00:09:58,519
on links the visitor I need target

00:09:56,720 --> 00:10:03,680
acceleration still companion feature

00:09:58,519 --> 00:10:06,199
life is solution now you will clear so

00:10:03,680 --> 00:10:11,060
Lisa I'm not sure you'll have a further

00:10:06,199 --> 00:10:13,640
solace the most being so Lisa is out to

00:10:11,060 --> 00:10:15,860
cloud computing code execution mode so

00:10:13,640 --> 00:10:18,140
that meal you don't you just need a

00:10:15,860 --> 00:10:20,480
right to your code and uploaded to a

00:10:18,140 --> 00:10:22,459
cloud but without a manager and

00:10:20,480 --> 00:10:25,640
provisioning your resources your server

00:10:22,459 --> 00:10:28,040
so nice so instead the public are

00:10:25,640 --> 00:10:29,959
provided well how are you help you run

00:10:28,040 --> 00:10:33,920
your application only when needed and

00:10:29,959 --> 00:10:35,570
scale them automatically so it's very

00:10:33,920 --> 00:10:37,550
promised Molly so most of the public

00:10:35,570 --> 00:10:40,029
cloud support is model visitors just

00:10:37,550 --> 00:10:43,040
made a container but compelling

00:10:40,029 --> 00:10:45,290
continually all mentioned universe still

00:10:43,040 --> 00:10:48,860
very small and faster and higher

00:10:45,290 --> 00:10:51,110
security improve security and as VM it

00:10:48,860 --> 00:10:54,170
had at the mutual management and it's

00:10:51,110 --> 00:10:57,140
easy to support multiple language but

00:10:54,170 --> 00:10:59,690
the unique is VM so it's high rated to

00:10:57,140 --> 00:11:01,699
carry out one function and that's a

00:10:59,690 --> 00:11:03,860
summer issue we are facing in the

00:11:01,699 --> 00:11:05,130
product on your invention still wasn't

00:11:03,860 --> 00:11:07,860
as always

00:11:05,130 --> 00:11:10,710
and at the time of creating VM it cost

00:11:07,860 --> 00:11:14,040
too much to boost a function that's a

00:11:10,710 --> 00:11:16,260
latency but the immense thing I think

00:11:14,040 --> 00:11:18,630
actually is that it difference between

00:11:16,260 --> 00:11:20,490
soleus and the function so the function

00:11:18,630 --> 00:11:21,060
survey should it be subset two hours so

00:11:20,490 --> 00:11:23,250
listen

00:11:21,060 --> 00:11:25,140
that means schedule you need to eat a

00:11:23,250 --> 00:11:27,960
function but if we talk about surveys

00:11:25,140 --> 00:11:30,480
which for the wrong group mysteries or

00:11:27,960 --> 00:11:34,830
someone we can group was so easy to

00:11:30,480 --> 00:11:36,860
provide a service so my single is you

00:11:34,830 --> 00:11:39,450
know the intima solely so we can and

00:11:36,860 --> 00:11:41,790
needed a different as a requirement

00:11:39,450 --> 00:11:44,130
ecology of a service so some time maybe

00:11:41,790 --> 00:11:46,620
some function should be group because

00:11:44,130 --> 00:11:48,680
you share some resource so if they can

00:11:46,620 --> 00:11:52,620
work there together that services can be

00:11:48,680 --> 00:11:55,470
efficient and maybe some time you want

00:11:52,620 --> 00:12:02,400
to make sure your workload very secure

00:11:55,470 --> 00:12:04,140
so just use unique Renault as a case a

00:12:02,400 --> 00:12:05,970
lot of cases that I would hear like no

00:12:04,140 --> 00:12:09,480
doubt I would use very very big market

00:12:05,970 --> 00:12:11,070
everyone talking about and when we talk

00:12:09,480 --> 00:12:13,470
about how to divide season the are

00:12:11,070 --> 00:12:16,290
resource constrained but you Nakano is

00:12:13,470 --> 00:12:19,950
smaller so it's very suitable I would

00:12:16,290 --> 00:12:22,320
divide sale and you know that security

00:12:19,950 --> 00:12:25,740
issue is that very biggest concern in

00:12:22,320 --> 00:12:29,550
the case so you in kernel can be

00:12:25,740 --> 00:12:31,350
addressed this kind of IOT devices but

00:12:29,550 --> 00:12:34,980
most time or you Nakano mean Avenida

00:12:31,350 --> 00:12:37,470
what can technology support and so they

00:12:34,980 --> 00:12:40,200
exist a unique kernel fans network you

00:12:37,470 --> 00:12:43,140
learn to ask the truth about signature

00:12:40,200 --> 00:12:45,150
LT I mean they don't consider policy

00:12:43,140 --> 00:12:49,710
don't consider real-time requirement

00:12:45,150 --> 00:12:54,420
they don't support multiple texture but

00:12:49,710 --> 00:12:56,220
the unica Nixon can listen you know also

00:12:54,420 --> 00:12:59,090
you know I'm working on algebra track so

00:12:56,220 --> 00:13:01,080
we did some investigation and some

00:12:59,090 --> 00:13:03,540
evaluation we think that will built

00:13:01,080 --> 00:13:09,540
render that's what relation was relied

00:13:03,540 --> 00:13:11,610
each side so so your earnings so another

00:13:09,540 --> 00:13:15,150
we know when we talk about all our

00:13:11,610 --> 00:13:17,080
cheetah vs rare links already and only

00:13:15,150 --> 00:13:19,120
the pretty very important room

00:13:17,080 --> 00:13:21,910
so it's according to one's the report

00:13:19,120 --> 00:13:26,470
true so I would get away our Father is

00:13:21,910 --> 00:13:28,690
that link so it really was to explore

00:13:26,470 --> 00:13:32,769
how to put a unique on links into arrow

00:13:28,690 --> 00:13:36,430
T and even without her whatever

00:13:32,769 --> 00:13:42,490
technology support is easy to run unique

00:13:36,430 --> 00:13:44,410
earnings on the kind of devices so there

00:13:42,490 --> 00:13:46,839
are some cases this should be that

00:13:44,410 --> 00:13:49,029
emerging cases like blocking and the

00:13:46,839 --> 00:13:51,790
machine learning mostly they needed at

00:13:49,029 --> 00:13:54,490
your arm CPU GPU support and let's

00:13:51,790 --> 00:13:56,769
performance a security issue so unique

00:13:54,490 --> 00:14:00,640
even kind of companion eight all these

00:13:56,769 --> 00:14:03,220
two cases from different perspective but

00:14:00,640 --> 00:14:05,350
I had a medium I need to take more time

00:14:03,220 --> 00:14:07,600
to figure out how to put unique on links

00:14:05,350 --> 00:14:09,370
into these kids just potentially I think

00:14:07,600 --> 00:14:15,850
the unique honey's can benefit it easy

00:14:09,370 --> 00:14:19,060
to case so how what could we do so

00:14:15,850 --> 00:14:21,250
target our goal is to explore what's the

00:14:19,060 --> 00:14:23,470
best platform for running on Union

00:14:21,250 --> 00:14:26,220
Colonel case so basically we need to

00:14:23,470 --> 00:14:29,260
continue researching Union kernels and

00:14:26,220 --> 00:14:31,779
build our new unit kernel I mean current

00:14:29,260 --> 00:14:35,820
earnings to unique kernel and explore

00:14:31,779 --> 00:14:37,839
the optimation I talked about it later

00:14:35,820 --> 00:14:42,430
yeah so it definitely feels some

00:14:37,839 --> 00:14:44,110
Challenger how to come in the links to a

00:14:42,430 --> 00:14:47,050
unique kernel there's a big gap between

00:14:44,110 --> 00:14:51,339
links truly a unique kernel links

00:14:47,050 --> 00:14:54,820
general OS it's supposed the multiple

00:14:51,339 --> 00:14:58,000
process and two modes and it's sort of a

00:14:54,820 --> 00:15:01,089
couple tightly coupled components and

00:14:58,000 --> 00:15:04,079
how to further improve performance is

00:15:01,089 --> 00:15:06,520
still problem for the concern

00:15:04,079 --> 00:15:09,310
another China is about to reduce the

00:15:06,520 --> 00:15:12,850
time creaking VM so far we trying to use

00:15:09,310 --> 00:15:14,519
a snapshot especially for Vienna we have

00:15:12,850 --> 00:15:18,670
that instant kanoon we also call that

00:15:14,519 --> 00:15:21,970
man that means red liquid VM from

00:15:18,670 --> 00:15:25,600
or scratch and this feature can create a

00:15:21,970 --> 00:15:28,390
401 existing VM to create a well or more

00:15:25,600 --> 00:15:30,430
shall be among these we Emma just shared

00:15:28,390 --> 00:15:32,410
civil memory and Sims

00:15:30,430 --> 00:15:35,320
our age but if something is changed

00:15:32,410 --> 00:15:37,540
these children not made into that

00:15:35,320 --> 00:15:40,000
symma memory storage instead of will you

00:15:37,540 --> 00:15:40,570
require that change into that one belt

00:15:40,000 --> 00:15:44,920
Wow

00:15:40,570 --> 00:15:47,680
like copy-on-write a parrot relation or

00:15:44,920 --> 00:15:49,959
we have at the VMS CI we are machine

00:15:47,680 --> 00:15:51,940
communication our interface so we run

00:15:49,959 --> 00:15:54,550
expending data to construct a more

00:15:51,940 --> 00:15:58,450
paravirtualized API you schedule or

00:15:54,550 --> 00:16:01,480
because of now some in some cases that

00:15:58,450 --> 00:16:04,779
you Nakano is running as a short label

00:16:01,480 --> 00:16:07,720
talk about them soul is sometimes just

00:16:04,779 --> 00:16:10,990
private services its next time which

00:16:07,720 --> 00:16:13,260
needed to shut it down immediately and

00:16:10,990 --> 00:16:17,350
how to manage it is all unique another

00:16:13,260 --> 00:16:19,839
question so how could we possible

00:16:17,350 --> 00:16:22,839
cheerilee's solutions I'd like to talk

00:16:19,839 --> 00:16:26,279
about from different perspective first

00:16:22,839 --> 00:16:28,810
warning from the hypervisor suppose

00:16:26,279 --> 00:16:31,240
first of all in support major existing

00:16:28,810 --> 00:16:34,330
unit colonel on one hand away on

00:16:31,240 --> 00:16:37,180
integrator whatever into our EXI I'll

00:16:34,330 --> 00:16:40,420
have a better to support the unique

00:16:37,180 --> 00:16:43,570
kernel unhand the way or want to impose

00:16:40,420 --> 00:16:45,610
our paranoid shall travel like three and

00:16:43,570 --> 00:16:48,790
the pivots can see and we have intruded

00:16:45,610 --> 00:16:52,240
into the latest unicorn on so far

00:16:48,790 --> 00:16:55,720
however - or you Nakano has supported

00:16:52,240 --> 00:16:59,770
yaksa OS v another one is that include

00:16:55,720 --> 00:17:02,020
OS the final appearance so based on this

00:16:59,770 --> 00:17:04,600
is still based on the hop call I hope

00:17:02,020 --> 00:17:07,780
you can help me on to something like

00:17:04,600 --> 00:17:09,850
config and control guest OS and set up

00:17:07,780 --> 00:17:12,520
interview and communication and other

00:17:09,850 --> 00:17:14,800
could destroy memory in some cases I

00:17:12,520 --> 00:17:17,589
hope that can provide a very good

00:17:14,800 --> 00:17:20,380
performance so we need is new scheduler

00:17:17,589 --> 00:17:22,000
so follow the shortly with a vm and some

00:17:20,380 --> 00:17:29,290
of time before the group the unique are

00:17:22,000 --> 00:17:31,330
no instance so from minx perspective so

00:17:29,290 --> 00:17:33,850
how to commentar links to all unique

00:17:31,330 --> 00:17:36,280
kernel normally is running me the two

00:17:33,850 --> 00:17:38,800
mode kernel mode and the other mode now

00:17:36,280 --> 00:17:42,580
unique analysis running with one motor

00:17:38,800 --> 00:17:44,260
here it just focus on x86 security for

00:17:42,580 --> 00:17:46,960
so

00:17:44,260 --> 00:17:50,350
we need to modify some macros like us

00:17:46,960 --> 00:17:52,720
and UCS at yes and that's a gtp entry

00:17:50,350 --> 00:17:54,789
table to make a show on both killing

00:17:52,720 --> 00:17:57,760
staff and your staff working the Aronian

00:17:54,789 --> 00:18:00,820
we look at one mode you want zero and I

00:17:57,760 --> 00:18:04,389
also needed to all so next thing about

00:18:00,820 --> 00:18:06,820
so as I ste interruptus like a table why

00:18:04,389 --> 00:18:13,240
mention season so think about this case

00:18:06,820 --> 00:18:14,740
so in terminal unicron link so your

00:18:13,240 --> 00:18:17,019
application in the wrong ability that

00:18:14,740 --> 00:18:18,820
you a stack but sometimes we need to

00:18:17,019 --> 00:18:20,679
expand the user stack or for some reason

00:18:18,820 --> 00:18:24,580
your stack is not valid

00:18:20,679 --> 00:18:26,830
no how do I cannot reach that stack

00:18:24,580 --> 00:18:29,889
between colonel spec and through us dead

00:18:26,830 --> 00:18:32,440
so you do you let us take it will

00:18:29,889 --> 00:18:35,230
trigger that to Peter for them but as

00:18:32,440 --> 00:18:38,760
the certain moment CPU cannot see what

00:18:35,230 --> 00:18:41,649
as register information like SS is P and

00:18:38,760 --> 00:18:45,549
you flag on so if we are triggers at

00:18:41,649 --> 00:18:48,279
another thought that type of fault but

00:18:45,549 --> 00:18:51,179
again let us take is still not valid

00:18:48,279 --> 00:18:54,240
them so how do I have to shut down CPU

00:18:51,179 --> 00:18:56,409
so how can we address this problem

00:18:54,240 --> 00:19:00,669
unfortunate unfortunately we have that

00:18:56,409 --> 00:19:03,210
rst interrupt stack or table feature so

00:19:00,669 --> 00:19:06,820
this can switch to new stack

00:19:03,210 --> 00:19:10,269
automatically and that can be up of

00:19:06,820 --> 00:19:13,720
seven entries impossible and that I

00:19:10,269 --> 00:19:16,600
steal code is a index or into that the

00:19:13,720 --> 00:19:19,240
TS as a tack state Tasker stages

00:19:16,600 --> 00:19:24,059
documentation so the as entry in that

00:19:19,240 --> 00:19:24,059
chair says will point to the new stack

00:19:25,649 --> 00:19:32,710
so we need to make this or making it

00:19:28,630 --> 00:19:34,840
work for interrupt an exception and I'm

00:19:32,710 --> 00:19:36,519
about the video so now we are running

00:19:34,840 --> 00:19:39,700
with one mode so we're tuned into some

00:19:36,519 --> 00:19:41,950
sister call so we need to modify V DSO

00:19:39,700 --> 00:19:46,480
to make it run just jump to that a

00:19:41,950 --> 00:19:49,590
function call and sometimes we have to

00:19:46,480 --> 00:19:52,480
switch stack so because some application

00:19:49,590 --> 00:19:55,539
they are probably compounds they deeply

00:19:52,480 --> 00:19:56,740
we will call the city code directly so

00:19:55,539 --> 00:19:58,900
we have it

00:19:56,740 --> 00:20:04,260
switches that come but since it was a

00:19:58,900 --> 00:20:07,480
few keys I think it's not our folks

00:20:04,260 --> 00:20:13,750
single dress space mmm I think the idea

00:20:07,480 --> 00:20:17,790
to instead just no fork no accuracy lab

00:20:13,750 --> 00:20:20,470
so we need to continue to optimal links

00:20:17,790 --> 00:20:22,540
typically RV you can you that the key

00:20:20,470 --> 00:20:25,390
config to disable the unnecessary

00:20:22,540 --> 00:20:28,630
component gets that smaller side a

00:20:25,390 --> 00:20:31,360
smaller footprint and the to zero copy

00:20:28,630 --> 00:20:33,640
no we are running with the one mode or

00:20:31,360 --> 00:20:36,100
one space so we don't need a check

00:20:33,640 --> 00:20:37,660
between kernel space and your space we

00:20:36,100 --> 00:20:41,260
don't need to copy between kernel space

00:20:37,660 --> 00:20:44,309
on your space this kind of stuff like a

00:20:41,260 --> 00:20:49,960
copy from to EULA should be gone a

00:20:44,309 --> 00:20:54,040
scheduled nominees are different the

00:20:49,960 --> 00:20:58,260
schedule besides that IDO and stop we

00:20:54,040 --> 00:21:01,270
have it at CFS an Archie and deadline

00:20:58,260 --> 00:21:04,650
but in most cases unicorn is running

00:21:01,270 --> 00:21:10,900
well be the one process so we don't need

00:21:04,650 --> 00:21:13,390
a scheduler coexistent exists so i think

00:21:10,900 --> 00:21:17,140
i we need to cover is scheduler to make

00:21:13,390 --> 00:21:19,090
sure we can deform customize a schedule

00:21:17,140 --> 00:21:22,030
according to different application

00:21:19,090 --> 00:21:26,679
requirement in the during the compile

00:21:22,030 --> 00:21:29,500
time here another question to me maybe

00:21:26,679 --> 00:21:31,870
we should consider if we need to set up

00:21:29,500 --> 00:21:32,580
a new scheduler just for that a1 Process

00:21:31,870 --> 00:21:35,710
Model

00:21:32,580 --> 00:21:38,440
it's my question to me I'm so far I

00:21:35,710 --> 00:21:40,300
haven't know that's a clear answer so

00:21:38,440 --> 00:21:43,000
should I be happy stagger I mean you

00:21:40,300 --> 00:21:45,630
know Lincoln had a very good Network

00:21:43,000 --> 00:21:48,640
tcp/ip stack them but it's a complicated

00:21:45,630 --> 00:21:52,030
he has a different scenario

00:21:48,640 --> 00:21:55,030
no you in kernel is specialized and

00:21:52,030 --> 00:21:57,480
customized so we lucked into some Larry

00:21:55,030 --> 00:22:01,000
the table spec just for some user Kissel

00:21:57,480 --> 00:22:03,100
so no we can't define is a customer is a

00:22:01,000 --> 00:22:07,510
tcp/ip stack for the different other

00:22:03,100 --> 00:22:10,090
cases like we can integrate LDAP I pee

00:22:07,510 --> 00:22:18,270
and fast so Clayton say star

00:22:10,090 --> 00:22:21,340
Oh Oh No so next thing is about that I'm

00:22:18,270 --> 00:22:24,190
writing so be accepted

00:22:21,340 --> 00:22:27,310
banana inks we also have different links

00:22:24,190 --> 00:22:30,610
of variants like Archie links that's

00:22:27,310 --> 00:22:32,860
based on Purim party links and we have

00:22:30,610 --> 00:22:36,360
that some secure links very lucky I

00:22:32,860 --> 00:22:37,690
ceilings and chair ceilings and I am

00:22:36,360 --> 00:22:40,600
hammer

00:22:37,690 --> 00:22:43,690
so that means unique earnings and still

00:22:40,600 --> 00:22:45,460
can provide a different unique item

00:22:43,690 --> 00:22:46,150
profile to trace a deeper in the other

00:22:45,460 --> 00:22:49,210
cases

00:22:46,150 --> 00:22:53,010
so he's attractive alright I'd only

00:22:49,210 --> 00:22:55,320
single this unique Colonel can compete

00:22:53,010 --> 00:22:58,180
when we talk about unique kind of links

00:22:55,320 --> 00:23:00,640
actually it's a one reason why important

00:22:58,180 --> 00:23:05,490
really I'd like to consider covered how

00:23:00,640 --> 00:23:05,490
to command link search were Unitarianism

00:23:07,560 --> 00:23:12,480
so compatibility we need to consider how

00:23:11,050 --> 00:23:14,830
to support all a girl in your

00:23:12,480 --> 00:23:17,770
application you skipping around

00:23:14,830 --> 00:23:18,940
different color scenario so if you have

00:23:17,770 --> 00:23:20,650
a source code

00:23:18,940 --> 00:23:23,170
I think he's either which was

00:23:20,650 --> 00:23:24,970
pre-compile summer standard library like

00:23:23,170 --> 00:23:26,710
chilly per se right there we replace

00:23:24,970 --> 00:23:28,480
that system call with a function call

00:23:26,710 --> 00:23:31,450
you just need to recompile your

00:23:28,480 --> 00:23:36,040
application which neut really busy but

00:23:31,450 --> 00:23:37,720
if you have just finally if you and your

00:23:36,040 --> 00:23:40,150
binary the compared with a flag on

00:23:37,720 --> 00:23:44,010
compiler flag of share or peak need to

00:23:40,150 --> 00:23:46,990
reset the preload of I rethought I

00:23:44,010 --> 00:23:49,630
thought i'll do dodo pre-loaded to make

00:23:46,990 --> 00:23:53,290
sure we can use our that's a pretty come

00:23:49,630 --> 00:23:55,890
out of jealousy Plus video so to replace

00:23:53,290 --> 00:23:59,080
a system call with our function call

00:23:55,890 --> 00:24:02,040
other kids are we propagate the final

00:23:59,080 --> 00:24:06,850
translation but according to some on

00:24:02,040 --> 00:24:08,920
report I'm funny so it's not easy to

00:24:06,850 --> 00:24:10,840
find that to define either again

00:24:08,920 --> 00:24:14,500
I guess idea what system or either in

00:24:10,840 --> 00:24:16,810
the binary so here we don't want to

00:24:14,500 --> 00:24:20,050
cover this case and this case should be

00:24:16,810 --> 00:24:25,960
of that's not a majority can

00:24:20,050 --> 00:24:29,530
so multiprocessor so my recommendation

00:24:25,960 --> 00:24:31,990
so if your application is running really

00:24:29,530 --> 00:24:34,450
multiple process model the first thing

00:24:31,990 --> 00:24:36,670
is paid to trying to redesign your

00:24:34,450 --> 00:24:39,070
application with a multiple rather to

00:24:36,670 --> 00:24:43,240
get a larger benefit from a unique

00:24:39,070 --> 00:24:46,450
kernel but if we cannot there are two

00:24:43,240 --> 00:24:49,120
ways for the way is straight forward and

00:24:46,450 --> 00:24:51,760
the one fork can trigger that one unique

00:24:49,120 --> 00:24:54,300
earnings instance but that means a PC

00:24:51,760 --> 00:24:58,750
will become an interview communication

00:24:54,300 --> 00:25:01,780
another way is that the PID PID x86 or

00:24:58,750 --> 00:25:04,540
fiction and process context identify all

00:25:01,780 --> 00:25:07,360
you can treat it as that process

00:25:04,540 --> 00:25:09,730
identifier and it can reduce all the

00:25:07,360 --> 00:25:13,650
cost when you do that the contacts reach

00:25:09,730 --> 00:25:16,210
because it is chair we can keep that

00:25:13,650 --> 00:25:19,929
cribbage somewhat here B entry during

00:25:16,210 --> 00:25:22,240
translation but in high limited piece I

00:25:19,929 --> 00:25:25,120
think you see never to cow a lot of case

00:25:22,240 --> 00:25:27,400
especially it can support some links old

00:25:25,120 --> 00:25:31,000
debugger tool or morning tool to make

00:25:27,400 --> 00:25:37,720
this do come in the case our unique our

00:25:31,000 --> 00:25:39,880
landing zone next I did about two

00:25:37,720 --> 00:25:42,160
debugger in the mountain logon so debug

00:25:39,880 --> 00:25:45,850
log in from I just redirected to that

00:25:42,160 --> 00:25:48,880
says favorite part supposin inks or

00:25:45,850 --> 00:25:51,700
utility we still can use these utility

00:25:48,880 --> 00:25:54,940
piece on a piece Eddie and Plus that the

00:25:51,700 --> 00:25:56,770
button travel will drop for this dump

00:25:54,940 --> 00:25:59,410
you know Kitab is very good tool to

00:25:56,770 --> 00:26:02,040
debug a kind of panic but that means you

00:25:59,410 --> 00:26:06,100
have to resolve memory to load of that

00:26:02,040 --> 00:26:07,900
sort of a dump kept kernel it's not cool

00:26:06,100 --> 00:26:10,809
in the production environment because

00:26:07,900 --> 00:26:12,850
the cost real memory so instead we just

00:26:10,809 --> 00:26:15,550
reserved that the virtualized dreamed

00:26:12,850 --> 00:26:17,860
but we don't know that the camera kernel

00:26:15,550 --> 00:26:20,200
we don't allocate the memory the one day

00:26:17,860 --> 00:26:22,390
if we want to debug some zombies at

00:26:20,200 --> 00:26:24,700
academy which as he was bullying Trevor

00:26:22,390 --> 00:26:26,920
allocated some physical memory and the

00:26:24,700 --> 00:26:28,990
map element to that preserve the water

00:26:26,920 --> 00:26:31,059
stress range and loaded at a time we

00:26:28,990 --> 00:26:32,250
have the kernel in a void it's not

00:26:31,059 --> 00:26:37,200
difficult

00:26:32,250 --> 00:26:39,659
and more in her here integrated a meanie

00:26:37,200 --> 00:26:42,210
actually be strident like OS we didn't

00:26:39,659 --> 00:26:45,510
just connect Lisa stop with an ink

00:26:42,210 --> 00:26:49,559
Sega's 18 utility like a top and to help

00:26:45,510 --> 00:26:52,169
us connect us a most information log e

00:26:49,559 --> 00:26:54,659
only kernel you in Cana is a log or a

00:26:52,169 --> 00:26:57,210
union colonel links already supported

00:26:54,659 --> 00:26:59,460
the remote system and we sphere we have

00:26:57,210 --> 00:27:01,980
a real dialogue inside just connected

00:26:59,460 --> 00:27:10,289
them to make sure we can provide that we

00:27:01,980 --> 00:27:14,490
relied log or information like the part

00:27:10,289 --> 00:27:17,039
about the some enhancements like we can

00:27:14,490 --> 00:27:20,820
integrate some smaller put load into a

00:27:17,039 --> 00:27:22,590
legend inks to escape to their pals you

00:27:20,820 --> 00:27:26,100
can find some progenitor are working on

00:27:22,590 --> 00:27:29,159
this kind of scene and replace ICP I

00:27:26,100 --> 00:27:32,250
partially with the TTB given stream bomb

00:27:29,159 --> 00:27:34,530
and also we can you that one positive as

00:27:32,250 --> 00:27:37,590
initialization because a unique honey is

00:27:34,530 --> 00:27:39,480
like customized special ID so we took an

00:27:37,590 --> 00:27:42,270
interest can all pass underscore

00:27:39,480 --> 00:27:46,500
audiences to tell you Laconia so what's

00:27:42,270 --> 00:27:48,870
that some awesome neck story about

00:27:46,500 --> 00:27:52,799
something about some hardware

00:27:48,870 --> 00:27:54,620
virtualization technologies funk so I

00:27:52,799 --> 00:27:57,090
mentioned I really needed I just

00:27:54,620 --> 00:28:00,870
integrated communication so this can

00:27:57,090 --> 00:28:02,490
help set up is faster and that skill the

00:28:00,870 --> 00:28:05,400
communication between VM

00:28:02,490 --> 00:28:11,340
bass sounds have pre compiler APD table

00:28:05,400 --> 00:28:13,470
this can reduce at VM aggravate now some

00:28:11,340 --> 00:28:19,710
official I creepy ID and a criminal

00:28:13,470 --> 00:28:22,200
I mean tammim it's just improved

00:28:19,710 --> 00:28:24,360
performance you need kernel from

00:28:22,200 --> 00:28:30,570
different perspective by means that

00:28:24,360 --> 00:28:33,210
reduce that via magazine besides the

00:28:30,570 --> 00:28:35,610
unicorn is itself we need a tool a

00:28:33,210 --> 00:28:37,409
fitting the tool to help you compare

00:28:35,610 --> 00:28:39,900
application into a unique internal links

00:28:37,409 --> 00:28:40,809
so at this point we just align the talk

00:28:39,900 --> 00:28:44,529
of Val

00:28:40,809 --> 00:28:46,360
and for distribution I'd like to divide

00:28:44,529 --> 00:28:49,360
as a unique intermediate to a different

00:28:46,360 --> 00:28:52,240
person like a configuration and you kind

00:28:49,360 --> 00:28:57,039
of meet and that's your application and

00:28:52,240 --> 00:29:00,340
a dependency orchestration I think you

00:28:57,039 --> 00:29:03,549
Nakano unique had already done very well

00:29:00,340 --> 00:29:08,200
so I just need to integrate our unicorn

00:29:03,549 --> 00:29:10,960
links into a unique row the last is

00:29:08,200 --> 00:29:14,499
about as a integrated source code I like

00:29:10,960 --> 00:29:16,090
to because no matter we are talking

00:29:14,499 --> 00:29:18,129
about the cloud no matter we talk come

00:29:16,090 --> 00:29:20,999
how the LDT Rises security really

00:29:18,129 --> 00:29:24,789
important so I'm trying to like to

00:29:20,999 --> 00:29:31,179
enhance security from different from the

00:29:24,789 --> 00:29:35,049
CUDA level so next part is our

00:29:31,179 --> 00:29:38,379
management gentleman you app income

00:29:35,049 --> 00:29:39,940
application and on this bigger picture

00:29:38,379 --> 00:29:42,639
you can find out we have a unique color

00:29:39,940 --> 00:29:44,769
manager you can imagine either that

00:29:42,639 --> 00:29:48,460
controller of our solution here

00:29:44,769 --> 00:29:52,299
it can manage that lifecycle over you

00:29:48,460 --> 00:29:56,080
apps it also exposed expose function to

00:29:52,299 --> 00:29:58,690
that unit cannot 9th and by that rest

00:29:56,080 --> 00:30:02,049
api and then you cannot client can

00:29:58,690 --> 00:30:04,210
interact without you application on the

00:30:02,049 --> 00:30:06,909
right side that you can also provide at

00:30:04,210 --> 00:30:11,080
your app image on a register system it's

00:30:06,909 --> 00:30:14,759
a very similar document so it's easy to

00:30:11,080 --> 00:30:14,759
understand what we are trying to do

00:30:18,389 --> 00:30:25,330
another part about our really f as we

00:30:22,059 --> 00:30:28,360
DFS elaboration and work on distributed

00:30:25,330 --> 00:30:32,470
file system is high converted file

00:30:28,360 --> 00:30:34,720
system it can have some benefits they

00:30:32,470 --> 00:30:37,509
will configure and Sharaf instance the

00:30:34,720 --> 00:30:39,909
system cache and no needed magnet is

00:30:37,509 --> 00:30:43,809
chameleon not mean it is class actually

00:30:39,909 --> 00:30:47,799
is based on IP what L or an amplifier

00:30:43,809 --> 00:30:50,049
system so this can help us boost our

00:30:47,799 --> 00:30:53,419
unique internal links from to spark you

00:30:50,049 --> 00:31:00,349
small smaller footprint a small size and

00:30:53,419 --> 00:31:04,579
but the time okay so mmm

00:31:00,349 --> 00:31:07,219
last i think i mentioned you in colonel

00:31:04,579 --> 00:31:09,559
is a very small and fast turn have a

00:31:07,219 --> 00:31:12,739
good performance we also have some

00:31:09,559 --> 00:31:14,299
solutions and some this unit colonel

00:31:12,739 --> 00:31:19,219
but they are things i'm a challenging

00:31:14,299 --> 00:31:22,639
and unique earnings on can eliminate is

00:31:19,219 --> 00:31:28,729
challenging and embrace more potential

00:31:22,639 --> 00:31:30,829
and a valuable you turkeys so I think so

00:31:28,729 --> 00:31:33,619
all these are my personal recommendation

00:31:30,829 --> 00:31:36,649
but I think it's worth to a continuing

00:31:33,619 --> 00:31:42,469
my exploration so let's do it just by

00:31:36,649 --> 00:31:44,629
there's no point so here's some eruption

00:31:42,469 --> 00:31:48,979
is for this partition you also bring us

00:31:44,629 --> 00:31:51,769
to the annals of presentation I think we

00:31:48,979 --> 00:31:54,219
don't is a protection if you have any

00:31:51,769 --> 00:31:54,219
question

00:32:04,300 --> 00:32:09,290
so well actually we are as the earliest

00:32:07,010 --> 00:32:13,240
data so I just can put our unique on

00:32:09,290 --> 00:32:18,020
links video hello world on cue em on EXI

00:32:13,240 --> 00:32:21,170
so it's not easy to couple at some some

00:32:18,020 --> 00:32:23,360
links of stuff so it's challengers so

00:32:21,170 --> 00:32:37,820
I'd like to connect us on feedback so

00:32:23,360 --> 00:32:43,070
how to make this all happen you know I'm

00:32:37,820 --> 00:32:44,480
a molester dings right I don't like the

00:32:43,070 --> 00:32:47,540
true are you that some concept of the

00:32:44,480 --> 00:32:58,460
tools suppose a multiple processor space

00:32:47,540 --> 00:33:02,380
I know that I'm I'm ruining sedans Paul

00:32:58,460 --> 00:33:02,380
x86 actually right

00:33:09,540 --> 00:33:18,390
any question or no question I think we

00:33:13,020 --> 00:33:20,220
confused okay yes thank you thank you

00:33:18,390 --> 00:33:23,190
all your time on 8c

00:33:20,220 --> 00:33:23,190

YouTube URL: https://www.youtube.com/watch?v=ch_59SjZIkY


