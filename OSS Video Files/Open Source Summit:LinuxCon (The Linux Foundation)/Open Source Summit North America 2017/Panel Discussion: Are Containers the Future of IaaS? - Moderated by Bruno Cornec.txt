Title: Panel Discussion: Are Containers the Future of IaaS? - Moderated by Bruno Cornec
Publication date: 2017-09-12
Playlist: Open Source Summit North America 2017
Description: 
	Panel Discussion: Are Containers the Future of IaaS? - Moderated by Bruno Cornec, Hewlett Packard Enterprise with Simona Arsene, Jerome Petazzoni, David Flanders

The OpenStack project, one of the major Open Source IaaS solution is now 7 years old and see some major old-timers contributors changing strategies, as well as a new focus around containers, which are themselves pushed by newer companies such as Docker 4 years old. Come to this session to listen to our panelists debating around the future of Infrastructure as a Service (IaaS):
- What is the role of bare-metal, virtualization, containers ?
- What are IaaS customers looking after in the coming years ?
- What is the best approach for Cloud Native Applications? Legacy ones ?

With representatives from the OpenStack project, the Docker project, distribution vendors and hardware vendors, this roundtable should give you the answers to these questions and more.

About Bruno Cornec  
Bruno Cornec has been managing various Unix systems since 1987 and Linux since 1993 (0.99pl14). Bruno first worked 8 years around Software Engineering and Configuration Management Systems in Unix environments. Since 1995, he is Open Source and Linux (OSL) Strategist and Evangelist, initially for an HPE reseller and now for Hewlett Packard Enterprise directly in the Customer Innovation Center. Bruno is also HPE WW Linux Community Lead. Bruno is a contributor in various OSL projects: MondoRescue, Mageia, LinuxCOE, Tellico, FOSSology, collectl, Pause. He is also project leader for MondoRescue (GPL disaster recovery solution), project-builder.org (GPL build service), UUWL (GPL porting library). As part of his work he has made numerous presentations for LinuxCon (EMEA and NA), Linux.Conf.au, OSCON, Fosdem, Paris OSS Bruno also likes early music, singing and playing recorder

About Jerome Petazzoni
Jerome works at Docker, where he helps others to containerize all the things. In another life he built clouds when EC2 was just the name of a plane, developed a GIS to deploy dark fiber through the French subway, managed commando deployments of large-scale video streaming systems in bandwidth-constrained environments such as conference centers, operated and scaled the dotCloud PAAS, and other feats of technical wizardry. When annoyed he threatens to replace things with a very small shell script.
Captions: 
	00:00:00,030 --> 00:00:06,029
hello everybody thank you for coming to

00:00:02,399 --> 00:00:08,820
the session which will be a roundtable

00:00:06,029 --> 00:00:11,130
we have different panelists that will

00:00:08,820 --> 00:00:15,660
introduce themselves so the question we

00:00:11,130 --> 00:00:18,240
want to ask to the panelists and we hope

00:00:15,660 --> 00:00:21,060
that you will love their answers is

00:00:18,240 --> 00:00:23,490
around containers and all they are

00:00:21,060 --> 00:00:25,470
representing future of infrastructure as

00:00:23,490 --> 00:00:26,789
a service and how does it position

00:00:25,470 --> 00:00:29,789
themselves with regard to other

00:00:26,789 --> 00:00:37,710
technologies and so for this roundtable

00:00:29,789 --> 00:00:42,290
we have yeah maybe maybe maybe it will

00:00:37,710 --> 00:00:42,290
come we have four three panelists

00:00:44,450 --> 00:00:49,230
similar on the left hand side share home

00:00:47,430 --> 00:00:51,840
in the middle and babied on the right

00:00:49,230 --> 00:00:53,969
hand side for me so it's a rivers for

00:00:51,840 --> 00:00:55,680
you of course and they will introduce

00:00:53,969 --> 00:00:57,600
themselves coming from different angles

00:00:55,680 --> 00:00:59,039
working on different technologies so

00:00:57,600 --> 00:01:01,440
they will introduce themselves and then

00:00:59,039 --> 00:01:03,600
we will ask questions and if you want to

00:01:01,440 --> 00:01:05,040
make the discussion interactive feel

00:01:03,600 --> 00:01:06,930
free also to raise your hand and ask

00:01:05,040 --> 00:01:08,580
questions and I will repeat them so that

00:01:06,930 --> 00:01:10,340
you can be recorded and the panelists

00:01:08,580 --> 00:01:15,900
will give you answers to those questions

00:01:10,340 --> 00:01:16,259
see what I can you stop yeah sure so hi

00:01:15,900 --> 00:01:18,180
everyone

00:01:16,259 --> 00:01:20,070
I am actually really excited to be here

00:01:18,180 --> 00:01:21,210
and I want to take Bruno as well for the

00:01:20,070 --> 00:01:23,729
invitation

00:01:21,210 --> 00:01:25,740
I work as a product manager for Suzy and

00:01:23,729 --> 00:01:27,390
I will just take one me to introduce us

00:01:25,740 --> 00:01:29,810
I would love that everyone knows or let

00:01:27,390 --> 00:01:34,290
me first ask do you know what sue says

00:01:29,810 --> 00:01:36,270
okay so I work at Sue's as a product

00:01:34,290 --> 00:01:38,579
manager I have been doing product

00:01:36,270 --> 00:01:40,170
management in different areas from the

00:01:38,579 --> 00:01:43,350
maintenance side of the classical

00:01:40,170 --> 00:01:45,210
operating system moving into developing

00:01:43,350 --> 00:01:47,310
a service packs of a version of the

00:01:45,210 --> 00:01:49,500
operating system and now building a

00:01:47,310 --> 00:01:51,600
platform for containers and that's the

00:01:49,500 --> 00:01:53,810
primary reason why why I'm here to talk

00:01:51,600 --> 00:01:58,979
about containers and our vision for

00:01:53,810 --> 00:02:00,210
containers hi so I'm Jeremy Tony and I

00:01:58,979 --> 00:02:02,909
work for docker

00:02:00,210 --> 00:02:05,130
I do mostly evangelism this day so you

00:02:02,909 --> 00:02:07,140
might have seen me in how to get your

00:02:05,130 --> 00:02:09,569
micro services working on containers

00:02:07,140 --> 00:02:11,349
without blowing up everything things

00:02:09,569 --> 00:02:14,560
that I'm not doing anymore

00:02:11,349 --> 00:02:15,849
Brett and Laura that well here in the

00:02:14,560 --> 00:02:18,280
room while doing a workshop about that

00:02:15,849 --> 00:02:19,889
so I recommend you to check it out if

00:02:18,280 --> 00:02:24,219
that's the kind of thing you want to do

00:02:19,889 --> 00:02:26,799
but before doing that I was doing ops at

00:02:24,219 --> 00:02:28,689
dot cloud the company that became darker

00:02:26,799 --> 00:02:31,409
and before that I was doing mostly

00:02:28,689 --> 00:02:33,939
development and I feel like this kind of

00:02:31,409 --> 00:02:37,419
discussion for me so kind of back to the

00:02:33,939 --> 00:02:39,790
future because almost 12 years ago I was

00:02:37,419 --> 00:02:42,459
trying to build infrastructure as a

00:02:39,790 --> 00:02:44,560
service back in France in the small

00:02:42,459 --> 00:02:49,239
company that I had and we're also

00:02:44,560 --> 00:02:52,870
looking at that thing everything like

00:02:49,239 --> 00:02:55,120
UML and not the the thing to build your

00:02:52,870 --> 00:02:58,840
diagram but use all my Linux which was a

00:02:55,120 --> 00:03:00,939
kind of ancestor of containers so I I

00:02:58,840 --> 00:03:06,849
feel like we might have received full

00:03:00,939 --> 00:03:09,939
circle here hello I am David Flanders of

00:03:06,849 --> 00:03:12,609
the OpenStack foundation so I primarily

00:03:09,939 --> 00:03:15,099
work on the container and platform as a

00:03:12,609 --> 00:03:18,099
services that get connected to the

00:03:15,099 --> 00:03:19,900
OpenStack API so I work a lot with SDKs

00:03:18,099 --> 00:03:21,220
and different developer communities from

00:03:19,900 --> 00:03:23,139
lots of different programming languages

00:03:21,220 --> 00:03:27,159
trying to understand how they want to

00:03:23,139 --> 00:03:28,659
connect this plethora of a container

00:03:27,159 --> 00:03:30,639
choice that we have with all the

00:03:28,659 --> 00:03:32,949
different stateless features and tools

00:03:30,639 --> 00:03:35,099
out there last I saw there's about 70

00:03:32,949 --> 00:03:37,090
Gartner is tracking about 70 different

00:03:35,099 --> 00:03:38,709
container and platform different

00:03:37,090 --> 00:03:41,229
services and modules and things like

00:03:38,709 --> 00:03:42,970
that so it's a very confusing space and

00:03:41,229 --> 00:03:46,750
yet I think that we're obviously going

00:03:42,970 --> 00:03:47,949
to see a lot of filters going on where

00:03:46,750 --> 00:03:50,019
we're going to need to make some choices

00:03:47,949 --> 00:03:52,060
I'm a big believer in the fact that I

00:03:50,019 --> 00:03:54,969
think we're we need to move towards a

00:03:52,060 --> 00:03:57,159
kind of lamp stack for the cloud and so

00:03:54,969 --> 00:03:59,769
I'm genuinely excited to be chatting

00:03:57,159 --> 00:04:01,659
with Simona and Jerome on how we do

00:03:59,769 --> 00:04:03,430
integrate all of these technologies and

00:04:01,659 --> 00:04:06,099
how we start to build this new lamp

00:04:03,430 --> 00:04:07,840
stack for the cloud so we have the true

00:04:06,099 --> 00:04:10,120
open source that we want to be able to

00:04:07,840 --> 00:04:13,900
build the things that that we love

00:04:10,120 --> 00:04:17,079
building with the computer in the web ok

00:04:13,900 --> 00:04:19,539
my first question for you would be

00:04:17,079 --> 00:04:22,750
around the solar level tools that you

00:04:19,539 --> 00:04:25,030
need to build that stack so we have bare

00:04:22,750 --> 00:04:27,880
metal systems we have virtual machine

00:04:25,030 --> 00:04:30,100
and we have campaigners now how do you

00:04:27,880 --> 00:04:33,100
position them how the use is a useful

00:04:30,100 --> 00:04:35,470
mess with regards to each other where

00:04:33,100 --> 00:04:37,740
are the key points for you around those

00:04:35,470 --> 00:04:41,380
technologies and maybe David you can

00:04:37,740 --> 00:04:43,870
sure so I think the most important thing

00:04:41,380 --> 00:04:46,210
to remember here is that we do work in a

00:04:43,870 --> 00:04:49,480
space that does change Lots so compute

00:04:46,210 --> 00:04:51,790
modalities will we have very old

00:04:49,480 --> 00:04:55,630
computed Elly's you heard leanness talk

00:04:51,790 --> 00:04:57,669
about and and Alan ahead of soos talk

00:04:55,630 --> 00:04:59,080
about mainframes you know so I worked in

00:04:57,669 --> 00:05:00,700
universities for a long time and you

00:04:59,080 --> 00:05:03,160
know there are mainframes still kicking

00:05:00,700 --> 00:05:04,480
around likewise we still have virtual

00:05:03,160 --> 00:05:07,480
machines and a lot of you know

00:05:04,480 --> 00:05:10,570
enterprise legacy applications running

00:05:07,480 --> 00:05:13,630
on those bare metal especially as it

00:05:10,570 --> 00:05:15,280
relates to things like GPUs and being

00:05:13,630 --> 00:05:16,570
able to use new compute modalities or

00:05:15,280 --> 00:05:18,460
coming into play more and more to

00:05:16,570 --> 00:05:21,520
experiment with and of course containers

00:05:18,460 --> 00:05:23,020
and a lot of people you know think

00:05:21,520 --> 00:05:24,460
OpenStack doesn't love containers we

00:05:23,020 --> 00:05:27,370
love containers and containers love

00:05:24,460 --> 00:05:30,310
OpenStack we we are building OpenStack

00:05:27,370 --> 00:05:33,220
better with containers from just a point

00:05:30,310 --> 00:05:36,430
of view of being able to update it to

00:05:33,220 --> 00:05:38,229
keep it modular and being able to allow

00:05:36,430 --> 00:05:40,750
more people to use it and likewise we're

00:05:38,229 --> 00:05:41,830
putting caner containers on top and I'll

00:05:40,750 --> 00:05:44,320
talk a little bit more about that later

00:05:41,830 --> 00:05:46,300
but I also and I just came from a

00:05:44,320 --> 00:05:48,070
conference on edge computing where we

00:05:46,300 --> 00:05:49,960
are starting to talk about all the new

00:05:48,070 --> 00:05:54,520
compute modalities coming down the line

00:05:49,960 --> 00:05:56,919
you know things like why node array

00:05:54,520 --> 00:05:58,750
computing and being able to do that

00:05:56,919 --> 00:06:00,729
smaller compute modalities things like

00:05:58,750 --> 00:06:02,830
server lists and functional computing

00:06:00,729 --> 00:06:04,690
and then also that looking kind of in

00:06:02,830 --> 00:06:06,880
the far future I think we we've got

00:06:04,690 --> 00:06:08,740
quantum computing IBM's just launched

00:06:06,880 --> 00:06:11,530
you know a cloud that you can actually

00:06:08,740 --> 00:06:13,360
go and start using qubits right now and

00:06:11,530 --> 00:06:15,370
start playing with quantum so Quantum's

00:06:13,360 --> 00:06:18,100
here so I think we're gonna continue to

00:06:15,370 --> 00:06:19,930
see these new compute modalities for all

00:06:18,100 --> 00:06:21,460
the use cases that we see and we're just

00:06:19,930 --> 00:06:23,530
getting more and more use cases you know

00:06:21,460 --> 00:06:25,840
it is getting bigger and bigger so for

00:06:23,530 --> 00:06:27,729
me I'm I'm actually genuinely excited

00:06:25,840 --> 00:06:29,950
these past five years have been a lot of

00:06:27,729 --> 00:06:31,510
just making virtualization work and

00:06:29,950 --> 00:06:33,430
making containers work and making bare

00:06:31,510 --> 00:06:35,740
metals work and we're starting to see a

00:06:33,430 --> 00:06:37,990
whole new set of compute modalities open

00:06:35,740 --> 00:06:43,240
up so I'm genuinely excited about that

00:06:37,990 --> 00:06:46,330
I don't think that generally everyone is

00:06:43,240 --> 00:06:47,800
really excited about this now what we

00:06:46,330 --> 00:06:49,210
are seeing with not on our customer base

00:06:47,800 --> 00:06:51,010
is that everything is going to be a

00:06:49,210 --> 00:06:52,990
journey so we should not expect that

00:06:51,010 --> 00:06:55,810
even if the technology it's extremely

00:06:52,990 --> 00:06:57,900
cool and is proven to be working and

00:06:55,810 --> 00:07:00,820
bringing all the benefits like improving

00:06:57,900 --> 00:07:02,560
productivity bringing the innovation

00:07:00,820 --> 00:07:04,270
back to the organization and so on or

00:07:02,560 --> 00:07:06,630
some organization will it will take a

00:07:04,270 --> 00:07:09,100
while to get and build their container

00:07:06,630 --> 00:07:11,260
ecosystem and container architecture and

00:07:09,100 --> 00:07:13,000
you know we started we are talking about

00:07:11,260 --> 00:07:14,740
infrastructure as a service and I would

00:07:13,000 --> 00:07:16,450
like to maybe do a little bit of detour

00:07:14,740 --> 00:07:18,910
to talk about how we ended up with

00:07:16,450 --> 00:07:20,560
containers and everything so I think

00:07:18,910 --> 00:07:23,110
that all of you in the room already know

00:07:20,560 --> 00:07:24,880
that you know in managing an

00:07:23,110 --> 00:07:27,010
infrastructure it's usually a very risky

00:07:24,880 --> 00:07:29,740
task and it brings a lot of

00:07:27,010 --> 00:07:31,510
responsibility to as you said mean new

00:07:29,740 --> 00:07:33,190
concept like continuous integration they

00:07:31,510 --> 00:07:35,320
sounded really cool but those can be

00:07:33,190 --> 00:07:37,840
really dangerous when you use them on

00:07:35,320 --> 00:07:39,550
mission critical infrastructure and the

00:07:37,840 --> 00:07:41,020
reason for that is because your

00:07:39,550 --> 00:07:42,340
infrastructure which is critical for

00:07:41,020 --> 00:07:44,590
your business might not be available

00:07:42,340 --> 00:07:46,480
once you do a patch and you cannot have

00:07:44,590 --> 00:07:48,910
the mechanism ready to roll to rollback

00:07:46,480 --> 00:07:50,500
easier that's why and we are seeing that

00:07:48,910 --> 00:07:52,210
on the operating system we know we are

00:07:50,500 --> 00:07:53,650
always exciting about new versions of

00:07:52,210 --> 00:07:55,680
the operating system but large

00:07:53,650 --> 00:07:58,090
organization and enterprising running

00:07:55,680 --> 00:08:00,340
thousands of servers are not going to

00:07:58,090 --> 00:08:01,810
roll out our newest version that in the

00:08:00,340 --> 00:08:04,240
immediate next day after the release

00:08:01,810 --> 00:08:05,920
they will usually do it gradually with a

00:08:04,240 --> 00:08:08,440
lot of testing making sure that the

00:08:05,920 --> 00:08:11,140
critical infrastructure is still up and

00:08:08,440 --> 00:08:12,940
running now historically application

00:08:11,140 --> 00:08:14,650
have been linked with the infrastructure

00:08:12,940 --> 00:08:17,020
and historically at the application

00:08:14,650 --> 00:08:20,530
level we have inherited all those rules

00:08:17,020 --> 00:08:22,090
on the infrastructure and I bet to say

00:08:20,530 --> 00:08:24,640
that in the last 20 years we tried to

00:08:22,090 --> 00:08:26,500
decouple the application and they allow

00:08:24,640 --> 00:08:29,380
the application to be more rapid and

00:08:26,500 --> 00:08:30,940
develop itself impress the agility the

00:08:29,380 --> 00:08:32,530
continuous integration and everything

00:08:30,940 --> 00:08:34,540
while the infrastructure and

00:08:32,530 --> 00:08:37,150
infrastructure level we continue to keep

00:08:34,540 --> 00:08:39,040
it stable and reliable that's why we

00:08:37,150 --> 00:08:40,990
still have this usually at soon when I

00:08:39,040 --> 00:08:43,120
talk about DevOps we try to explain to

00:08:40,990 --> 00:08:45,490
everyone why this is usually a fight

00:08:43,120 --> 00:08:47,860
between operation and developers and why

00:08:45,490 --> 00:08:51,850
we want to embrace them as a as a core

00:08:47,860 --> 00:08:53,319
concept now when we look at

00:08:51,850 --> 00:08:55,060
what's happening now in the market and

00:08:53,319 --> 00:08:57,190
this is were to it OpenStack and so on

00:08:55,060 --> 00:08:58,930
what happened is the innovation needed

00:08:57,190 --> 00:09:01,480
to hit the infrastructure and we needed

00:08:58,930 --> 00:09:03,399
to find a way to automate and to bring

00:09:01,480 --> 00:09:05,529
all this application innovation that we

00:09:03,399 --> 00:09:08,050
had build around with agility and so on

00:09:05,529 --> 00:09:10,060
on the infrastructure level allowed the

00:09:08,050 --> 00:09:12,610
sysadmin to have tools and automation

00:09:10,060 --> 00:09:15,100
and stable solution they can rely on so

00:09:12,610 --> 00:09:17,160
that they can get the same agility as

00:09:15,100 --> 00:09:20,889
the developers have from the other hand

00:09:17,160 --> 00:09:22,990
and you know when we talk about cloud

00:09:20,889 --> 00:09:25,149
and application in the cloud everything

00:09:22,990 --> 00:09:27,040
that could be an easy fruit everything

00:09:25,149 --> 00:09:29,319
that could be easily put into the cloud

00:09:27,040 --> 00:09:31,660
as an either as a container as a virtual

00:09:29,319 --> 00:09:33,279
machine I bet to say it's already there

00:09:31,660 --> 00:09:34,930
if you have a small website your

00:09:33,279 --> 00:09:36,430
marketing campaign stuff like this are

00:09:34,930 --> 00:09:38,949
already in the cloud but what we are

00:09:36,430 --> 00:09:41,019
seeing now is that organizations they

00:09:38,949 --> 00:09:43,509
they want to continue this this journey

00:09:41,019 --> 00:09:45,190
and they are looking at what we call

00:09:43,509 --> 00:09:47,470
more enterprises or their mission

00:09:45,190 --> 00:09:49,779
critical application and today is not

00:09:47,470 --> 00:09:51,850
easy to put legacy pinning system in a

00:09:49,779 --> 00:09:54,490
in a cloud and not even talk about

00:09:51,850 --> 00:09:57,639
containers some find the easy solution

00:09:54,490 --> 00:10:00,279
of just checking a box saying here is my

00:09:57,639 --> 00:10:03,250
container strategy I take my legacy

00:10:00,279 --> 00:10:05,139
Oracle system I put it into a container

00:10:03,250 --> 00:10:07,449
I put this the container in the VMware I

00:10:05,139 --> 00:10:12,880
run it on top of OpenStack and I have

00:10:07,449 --> 00:10:15,100
two tasks done yes it's true it is a way

00:10:12,880 --> 00:10:17,230
of doing it but you don't yet gain the

00:10:15,100 --> 00:10:19,420
full agility that micro services

00:10:17,230 --> 00:10:21,610
approach or a modular approach will

00:10:19,420 --> 00:10:23,769
bring you so that's what we are seeing

00:10:21,610 --> 00:10:25,360
today that customers are struggling on

00:10:23,769 --> 00:10:27,579
defining their architecture of how to

00:10:25,360 --> 00:10:30,850
embrace containers on top of

00:10:27,579 --> 00:10:32,709
infrastructure as a service so for us at

00:10:30,850 --> 00:10:34,209
Souza infrastructure as a service is

00:10:32,709 --> 00:10:37,120
core to the future of the

00:10:34,209 --> 00:10:38,980
software-defined data center Allen has

00:10:37,120 --> 00:10:42,100
shown the the slide we usually have it

00:10:38,980 --> 00:10:44,769
on all our presentation we have at the

00:10:42,100 --> 00:10:46,720
as the first pillo the operating system

00:10:44,769 --> 00:10:48,910
everything we still need an operating

00:10:46,720 --> 00:10:50,740
system to run everything but the second

00:10:48,910 --> 00:10:52,930
pillow it's an infrastructure as a

00:10:50,740 --> 00:10:55,360
service and then we go up the stack with

00:10:52,930 --> 00:10:57,970
containers with kubernetes with cloud

00:10:55,360 --> 00:10:59,740
foundry and then you get a solution or

00:10:57,970 --> 00:11:02,589
you get different solution depending on

00:10:59,740 --> 00:11:04,450
your needs so that will be in a couple

00:11:02,589 --> 00:11:07,430
of words our vision

00:11:04,450 --> 00:11:10,100
so as you can see we kind of all agree

00:11:07,430 --> 00:11:14,380
that the future of containers and IAS

00:11:10,100 --> 00:11:17,360
are GP intertwine so the I feel like the

00:11:14,380 --> 00:11:20,000
good question would be more about how

00:11:17,360 --> 00:11:23,600
like how do we get there and what are

00:11:20,000 --> 00:11:28,220
the things we can do to to get some

00:11:23,600 --> 00:11:30,200
interesting results and I think when one

00:11:28,220 --> 00:11:32,120
observes interesting observation is to

00:11:30,200 --> 00:11:35,240
think about the fact that the biggest

00:11:32,120 --> 00:11:37,340
and most successful public is

00:11:35,240 --> 00:11:40,760
infrastructures are built on top of

00:11:37,340 --> 00:11:42,950
containers if you take google cloud it's

00:11:40,760 --> 00:11:46,490
when when you start a VM on Google cloud

00:11:42,950 --> 00:11:48,110
it's starting on on top of something

00:11:46,490 --> 00:11:50,150
that looks like a container that is

00:11:48,110 --> 00:11:52,480
using C groups and other mechanisms that

00:11:50,150 --> 00:11:55,400
are the same mechanisms used by

00:11:52,480 --> 00:11:57,290
containers to make sure that this

00:11:55,400 --> 00:11:59,150
container only has access to a specific

00:11:57,290 --> 00:12:01,960
amount of resources there is an

00:11:59,150 --> 00:12:06,350
Orchestrator which is bog which is the

00:12:01,960 --> 00:12:09,170
kind of ancestor of kubernetes so Google

00:12:06,350 --> 00:12:12,230
cloud is bleed on top it is running on

00:12:09,170 --> 00:12:15,080
top of containers which is kind of the

00:12:12,230 --> 00:12:16,640
reverse of what we could think at first

00:12:15,080 --> 00:12:19,790
it's like oh I'm going to run my

00:12:16,640 --> 00:12:21,770
containers in VMs obviously but these

00:12:19,790 --> 00:12:24,140
people are running VMs in containers

00:12:21,770 --> 00:12:26,960
that's interesting and if we look at

00:12:24,140 --> 00:12:30,860
another huge successful public cloud

00:12:26,960 --> 00:12:32,990
Amazon it's it's not running on top of

00:12:30,860 --> 00:12:36,770
containers per se but when you start a

00:12:32,990 --> 00:12:38,750
VM you indicate a machine image which is

00:12:36,770 --> 00:12:40,430
really close to a container image and

00:12:38,750 --> 00:12:43,520
whenever you want to start a VM you

00:12:40,430 --> 00:12:47,360
always have to specify that image and

00:12:43,520 --> 00:12:49,670
those images can be made from running VM

00:12:47,360 --> 00:12:51,950
so you create them the same way that you

00:12:49,670 --> 00:12:55,190
create container images kind of so the

00:12:51,950 --> 00:12:56,900
the lifecycle of those VMs is really

00:12:55,190 --> 00:12:59,840
close the lifecycle of containers

00:12:56,900 --> 00:13:02,990
especially if you want to do it right

00:12:59,840 --> 00:13:04,940
and by do it right I mean in the DevOps

00:13:02,990 --> 00:13:08,750
way is immutable infrastructure etcetera

00:13:04,940 --> 00:13:11,510
etcetera so IES and containers that I

00:13:08,750 --> 00:13:14,210
think at some point will become almost

00:13:11,510 --> 00:13:17,330
impossible to distinguish in some way

00:13:14,210 --> 00:13:19,460
because that the perfect scenario if I

00:13:17,330 --> 00:13:21,770
if I wanted to deploy something tomorrow

00:13:19,460 --> 00:13:25,040
I wouldn't I don't want to choose

00:13:21,770 --> 00:13:27,410
between containers and IAS I want both

00:13:25,040 --> 00:13:31,490
because I have some legacy wawk wawk

00:13:27,410 --> 00:13:33,260
loads that run in VM and sure I could

00:13:31,490 --> 00:13:35,720
put them in containers but that would

00:13:33,260 --> 00:13:37,910
just be lipstick on a pig that thing is

00:13:35,720 --> 00:13:39,820
still a VM and I also have new workflows

00:13:37,910 --> 00:13:43,990
that are containers and I would like to

00:13:39,820 --> 00:13:46,670
address both workflows from the single

00:13:43,990 --> 00:13:50,300
controller plane and and see them in a

00:13:46,670 --> 00:13:53,510
kind of modulus way and the last thing

00:13:50,300 --> 00:13:56,480
that we'll probably see some reaction

00:13:53,510 --> 00:13:58,970
from my neighbor will be about OpenStack

00:13:56,480 --> 00:14:01,130
for instance as this reputation of being

00:13:58,970 --> 00:14:04,100
complicated to operate kubernetes is

00:14:01,130 --> 00:14:06,860
getting there as well and so it would be

00:14:04,100 --> 00:14:10,190
interesting to see if we can take some

00:14:06,860 --> 00:14:12,680
really simple container primitives for

00:14:10,190 --> 00:14:15,200
instance swamp as the reputation of

00:14:12,680 --> 00:14:18,080
being really simple to deploy and now

00:14:15,200 --> 00:14:21,020
see okay can we layer something like

00:14:18,080 --> 00:14:21,380
OpenStack of some kind of IES on top of

00:14:21,020 --> 00:14:25,310
that

00:14:21,380 --> 00:14:27,290
can we get either simple way to deploy

00:14:25,310 --> 00:14:29,630
and operate OpenStack thanks to those

00:14:27,290 --> 00:14:32,510
low-level container orchestration

00:14:29,630 --> 00:14:36,200
mechanisms or can we get an even simpler

00:14:32,510 --> 00:14:38,630
IAS thing that will let me start VMs as

00:14:36,200 --> 00:14:41,390
easily as I start container by doing

00:14:38,630 --> 00:14:43,790
like Tucker run blah blah and then ten

00:14:41,390 --> 00:14:48,680
seconds later I have a VM up and running

00:14:43,790 --> 00:14:50,480
on my infrastructure so it actually

00:14:48,680 --> 00:14:51,770
truly agree with this where we're

00:14:50,480 --> 00:14:53,480
playing with all of this right now at

00:14:51,770 --> 00:14:55,190
OpenStack and what's really getting

00:14:53,480 --> 00:14:57,890
excited what's happened with kubernetes

00:14:55,190 --> 00:14:59,360
and with docker and with those 70 other

00:14:57,890 --> 00:15:01,430
companies out there who are now doing

00:14:59,360 --> 00:15:02,900
container solutions is that we're

00:15:01,430 --> 00:15:04,580
getting a lot of experimentation it's

00:15:02,900 --> 00:15:07,100
kind of like the the Cretaceous period

00:15:04,580 --> 00:15:09,260
of speciation inside of the way you

00:15:07,100 --> 00:15:11,360
build your applications so things I've

00:15:09,260 --> 00:15:14,660
just seen already and Jerome's actually

00:15:11,360 --> 00:15:16,970
had a great example borg still using VMS

00:15:14,660 --> 00:15:18,830
with containers am astons still using vm

00:15:16,970 --> 00:15:19,970
containers we're mixing and matching and

00:15:18,830 --> 00:15:21,440
there is that kind of blending going

00:15:19,970 --> 00:15:22,940
where you almost can't tell the

00:15:21,440 --> 00:15:24,410
difference right because there are

00:15:22,940 --> 00:15:26,480
things in VMs which are really brilliant

00:15:24,410 --> 00:15:27,560
some of the old security layer stuff

00:15:26,480 --> 00:15:29,210
that goes inside of there

00:15:27,560 --> 00:15:30,650
the rest of that and there are brilliant

00:15:29,210 --> 00:15:32,120
things for the statelessness and what

00:15:30,650 --> 00:15:33,980
you want to achieve with containers so I

00:15:32,120 --> 00:15:35,570
think actually Simona you hit you hit

00:15:33,980 --> 00:15:36,950
the nail on the head as well as it's

00:15:35,570 --> 00:15:40,160
about walking people through that

00:15:36,950 --> 00:15:41,570
journey as we get there now if you want

00:15:40,160 --> 00:15:43,040
to check out some cool stuff that is

00:15:41,570 --> 00:15:45,710
starting to happen with this blending

00:15:43,040 --> 00:15:48,350
I've seen for example OpenStack cinder

00:15:45,710 --> 00:15:50,720
which is our project for being able to

00:15:48,350 --> 00:15:54,020
do database backends or sorry not

00:15:50,720 --> 00:15:55,670
database but storage backends cinder has

00:15:54,020 --> 00:15:56,960
been working for seven years now and

00:15:55,670 --> 00:15:59,360
they've been working on actually

00:15:56,960 --> 00:16:01,610
creating over 80 different driver

00:15:59,360 --> 00:16:03,500
profiles so that when vendors come up

00:16:01,610 --> 00:16:06,830
with new compute want to sell it you can

00:16:03,500 --> 00:16:09,290
just grab cinder put swarm on top off

00:16:06,830 --> 00:16:10,430
you go and that's incredible for me to

00:16:09,290 --> 00:16:12,260
be just be able to do that kind of

00:16:10,430 --> 00:16:14,390
lightweight experimentation all of a

00:16:12,260 --> 00:16:15,860
sudden you're seeing web companies again

00:16:14,390 --> 00:16:18,410
who were able to build their own little

00:16:15,860 --> 00:16:20,089
clouds just by using a couple of modules

00:16:18,410 --> 00:16:22,640
and things like that they don't want to

00:16:20,089 --> 00:16:24,260
just use utility computing they actually

00:16:22,640 --> 00:16:25,610
want to still have their own things so

00:16:24,260 --> 00:16:28,520
that they can touch and work with it so

00:16:25,610 --> 00:16:30,130
we are getting to an era now and again I

00:16:28,520 --> 00:16:34,130
go back to this kind of lamp stack

00:16:30,130 --> 00:16:35,780
example where you know Linux doing all

00:16:34,130 --> 00:16:36,230
the work Linus what is he doing day on

00:16:35,780 --> 00:16:38,810
and day out

00:16:36,230 --> 00:16:39,980
he's making sure that drivers plug in so

00:16:38,810 --> 00:16:41,690
that we can have more computers

00:16:39,980 --> 00:16:43,460
utilizing this stuff broadening the

00:16:41,690 --> 00:16:45,020
scope enabling more people that's

00:16:43,460 --> 00:16:48,770
exactly what OpenStack is doing you look

00:16:45,020 --> 00:16:50,330
at cinder Swift Nova glance all of those

00:16:48,770 --> 00:16:52,160
are trying to work with hardware vendors

00:16:50,330 --> 00:16:53,660
to make sure we can plug the hardware

00:16:52,160 --> 00:16:56,150
stuff in so that you can use these

00:16:53,660 --> 00:16:57,770
things and then as we get into you know

00:16:56,150 --> 00:16:59,630
the Apache you know back in the day it

00:16:57,770 --> 00:17:02,120
was the Apache web server docker and

00:16:59,630 --> 00:17:03,860
kubernetes and core OS and tectonic and

00:17:02,120 --> 00:17:05,689
all of these companies they're starting

00:17:03,860 --> 00:17:07,310
to provide that interoperable Apache web

00:17:05,689 --> 00:17:10,010
service thing we still got a ways to go

00:17:07,310 --> 00:17:12,199
you know like what does scripting on the

00:17:10,010 --> 00:17:13,819
web look like you know I've been trying

00:17:12,199 --> 00:17:15,620
to keep my own service and functional

00:17:13,819 --> 00:17:18,079
maybe that'll kind of fulfill the P in

00:17:15,620 --> 00:17:20,510
the lamp stack you know when will we get

00:17:18,079 --> 00:17:22,040
to a place where databases will be you

00:17:20,510 --> 00:17:24,500
know truly server let's see there's some

00:17:22,040 --> 00:17:26,360
brilliant cockroach DB I think is doing

00:17:24,500 --> 00:17:27,709
some really cool stuff now around this

00:17:26,360 --> 00:17:31,220
I'm sure docker has got some things as

00:17:27,709 --> 00:17:33,740
well so my advice to anyone on about

00:17:31,220 --> 00:17:36,800
this kind of thinking about is versus

00:17:33,740 --> 00:17:38,810
containers is it's not an or it's an and

00:17:36,800 --> 00:17:40,710
just like the lamp stack you had a bunch

00:17:38,810 --> 00:17:42,240
of different foundations you had a pad

00:17:40,710 --> 00:17:44,670
in there you had Linux in there yet

00:17:42,240 --> 00:17:46,710
MySQL you had all the different you know

00:17:44,670 --> 00:17:48,750
programming languages all of those are

00:17:46,710 --> 00:17:50,940
separate groups separate foundations

00:17:48,750 --> 00:17:52,500
they're not going to be consumed by one

00:17:50,940 --> 00:17:54,180
company we don't want them to be

00:17:52,500 --> 00:17:56,640
consumed by one company or just one

00:17:54,180 --> 00:17:58,110
foundation we want them all working

00:17:56,640 --> 00:17:59,820
together and correspondence so just

00:17:58,110 --> 00:18:01,020
remember that when you're kind of going

00:17:59,820 --> 00:18:04,470
out there and people are saying are

00:18:01,020 --> 00:18:07,770
using kubernetes or are you using docker

00:18:04,470 --> 00:18:10,500
or are you using OpenStack no it's an

00:18:07,770 --> 00:18:11,610
and it's an and we're using bits and

00:18:10,500 --> 00:18:13,800
pieces from all of this and most

00:18:11,610 --> 00:18:15,420
importantly like good engineers we're

00:18:13,800 --> 00:18:17,910
letting the best technologies actually

00:18:15,420 --> 00:18:20,130
prove themselves so what will make the

00:18:17,910 --> 00:18:22,620
customer choose one technology versus

00:18:20,130 --> 00:18:24,180
another as it typically is the type of

00:18:22,620 --> 00:18:27,290
applications they are developing so

00:18:24,180 --> 00:18:29,250
general mentions a lipstick effect on on

00:18:27,290 --> 00:18:31,740
traditional application used in a

00:18:29,250 --> 00:18:33,990
container mode so do you think that you

00:18:31,740 --> 00:18:35,880
really need to try containers to cloud

00:18:33,990 --> 00:18:38,220
native type of applications and that

00:18:35,880 --> 00:18:40,710
legacy application will never benefit

00:18:38,220 --> 00:18:43,230
from containers or I mean you have a

00:18:40,710 --> 00:18:45,630
docker you have the MTA programs that

00:18:43,230 --> 00:18:47,670
you introduce oh so some people at least

00:18:45,630 --> 00:18:50,070
a doctor thing to them seem to think

00:18:47,670 --> 00:18:52,530
that it's possible to to build I guess

00:18:50,070 --> 00:18:54,510
the application with containers so so

00:18:52,530 --> 00:18:57,450
the dream chip room is super interesting

00:18:54,510 --> 00:18:59,280
at first when I was speech to program I

00:18:57,450 --> 00:19:01,640
was like what what is this this that

00:18:59,280 --> 00:19:04,170
doesn't make sense to me and and then I

00:19:01,640 --> 00:19:06,930
remembered a very important moment when

00:19:04,170 --> 00:19:10,740
I was generalizing stuff for customers

00:19:06,930 --> 00:19:13,620
maybe ten years ago and one day I was

00:19:10,740 --> 00:19:15,270
tasked with utilizing some I think NT

00:19:13,620 --> 00:19:17,370
server or something like that the

00:19:15,270 --> 00:19:19,140
hardware was ten years old and it was

00:19:17,370 --> 00:19:21,810
about to explode and I'm like okay this

00:19:19,140 --> 00:19:24,210
machine dies we lose I don't know if it

00:19:21,810 --> 00:19:26,220
was accounting or the time off or

00:19:24,210 --> 00:19:28,560
something important for the company

00:19:26,220 --> 00:19:31,110
okay we need to utilize that just to

00:19:28,560 --> 00:19:33,240
save that machine because it's it's

00:19:31,110 --> 00:19:36,690
impossible to to get that running on new

00:19:33,240 --> 00:19:39,900
hardware and I'm not really a Windows

00:19:36,690 --> 00:19:41,940
kind of person so okay I mean for the

00:19:39,900 --> 00:19:44,130
whole weekend and then one of my friends

00:19:41,940 --> 00:19:46,080
told me oh you just should try this

00:19:44,130 --> 00:19:47,940
software I can't remember the name it

00:19:46,080 --> 00:19:50,639
was a p2v thing

00:19:47,940 --> 00:19:52,950
Oh what is that oh that's a physical to

00:19:50,639 --> 00:19:55,409
virtual you just run that on your server

00:19:52,950 --> 00:19:58,769
and it's going to work for a few hours

00:19:55,409 --> 00:20:01,799
maybe days if it's really slow and then

00:19:58,769 --> 00:20:04,769
it will just like spit out a nice VMDK

00:20:01,799 --> 00:20:07,649
or whatever a VM image that you can run

00:20:04,769 --> 00:20:11,250
on your thing like that seems like

00:20:07,649 --> 00:20:13,529
science fiction to me I don't think that

00:20:11,250 --> 00:20:15,750
will work but for now this is my best

00:20:13,529 --> 00:20:19,590
bet to get that anti stuff running on

00:20:15,750 --> 00:20:22,470
Zen I had I think and it worked and I

00:20:19,590 --> 00:20:24,720
was like well I'm glad I didn't say

00:20:22,470 --> 00:20:27,830
anything stupid like I will eat my own

00:20:24,720 --> 00:20:30,480
shoes it thing words and and so I think

00:20:27,830 --> 00:20:32,519
what we are trying to do with the mga

00:20:30,480 --> 00:20:34,529
program is something similar so at first

00:20:32,519 --> 00:20:36,529
it's like wait a minute when I'm come to

00:20:34,529 --> 00:20:40,789
writing an application I should

00:20:36,529 --> 00:20:43,320
carefully write a docker file and like

00:20:40,789 --> 00:20:44,789
optimize the way I lay other

00:20:43,320 --> 00:20:47,039
instructions etcetera etcetera

00:20:44,789 --> 00:20:49,529
yes that's when you do it the cloud

00:20:47,039 --> 00:20:53,070
native way but you can also take an

00:20:49,529 --> 00:20:55,740
existing VM and you can like get that VM

00:20:53,070 --> 00:20:57,570
in a container image and of course you

00:20:55,740 --> 00:20:59,879
won't get like this super nice docker

00:20:57,570 --> 00:21:02,100
file that rebuilds everything in an

00:20:59,879 --> 00:21:05,009
optimized way etc but it's getting there

00:21:02,100 --> 00:21:08,159
the first step is just get that

00:21:05,009 --> 00:21:10,379
container and put it in the VM sorry to

00:21:08,159 --> 00:21:12,299
Google Wave round pick the VM and cram

00:21:10,379 --> 00:21:15,179
it in the container and then little by

00:21:12,299 --> 00:21:17,669
little we improve the tooling so that in

00:21:15,179 --> 00:21:20,909
in the process we can get either a

00:21:17,669 --> 00:21:24,779
docker fire of the coconut recipe should

00:21:20,909 --> 00:21:27,419
be closer and closer to what a good

00:21:24,779 --> 00:21:30,090
personal artisan who would do if they

00:21:27,419 --> 00:21:36,259
were Tucker rising in the first place so

00:21:30,090 --> 00:21:39,720
I I'm glad that I had this experience

00:21:36,259 --> 00:21:42,899
almost a decade ago about virtualizing

00:21:39,720 --> 00:21:45,600
physical machines because it gives me

00:21:42,899 --> 00:21:47,700
trust in the fact that trust and faith

00:21:45,600 --> 00:21:50,340
in the fact that yes we are going to

00:21:47,700 --> 00:21:52,830
take those VMs and we are going to put

00:21:50,340 --> 00:21:54,269
them in containers and some of them it

00:21:52,830 --> 00:21:56,519
will be just like it's kind of

00:21:54,269 --> 00:21:57,989
fire-and-forget thing now the VM

00:21:56,519 --> 00:21:59,580
in a container and we will never touch

00:21:57,989 --> 00:22:01,679
it again because it's been running for

00:21:59,580 --> 00:22:04,129
years and years and that we have no

00:22:01,679 --> 00:22:09,029
reason to rebuild that thing ever and

00:22:04,129 --> 00:22:13,019
sometimes like okay we need to like make

00:22:09,029 --> 00:22:14,869
this application like to maintain and

00:22:13,019 --> 00:22:17,759
improve it over time and so we will

00:22:14,869 --> 00:22:21,809
progressively transform that VM into a

00:22:17,759 --> 00:22:24,419
proper container but so yeah I thought I

00:22:21,809 --> 00:22:26,099
think that's the one one possible path

00:22:24,419 --> 00:22:27,899
in this journey and I think what's

00:22:26,099 --> 00:22:29,639
important is to define what is a legacy

00:22:27,899 --> 00:22:31,859
application and this is what you

00:22:29,639 --> 00:22:34,200
mentioned so sometimes for me for some

00:22:31,859 --> 00:22:37,019
organization it is much cheaper to just

00:22:34,200 --> 00:22:39,479
continue to support legacy by a vendor

00:22:37,019 --> 00:22:41,879
than to look at this legacy and touch it

00:22:39,479 --> 00:22:43,529
touching it means I need to rebuild the

00:22:41,879 --> 00:22:45,419
knowledge I need to check the

00:22:43,529 --> 00:22:47,759
documentation I need to realize oops

00:22:45,419 --> 00:22:49,349
it wasn't documented for the last 14

00:22:47,759 --> 00:22:51,029
years so it's much easy to say okay this

00:22:49,349 --> 00:22:53,129
is the amount I'm paying for this

00:22:51,029 --> 00:22:54,450
application to this vendor and is going

00:22:53,129 --> 00:22:57,299
to be supported that they like and

00:22:54,450 --> 00:22:58,950
decommissioned and in my experience that

00:22:57,299 --> 00:23:00,359
so said this is the happy case if you

00:22:58,950 --> 00:23:02,070
are in the setup where you can say I

00:23:00,359 --> 00:23:03,869
will support this application for the

00:23:02,070 --> 00:23:05,820
next seven years and then it's naturally

00:23:03,869 --> 00:23:07,919
decommissioned because we only have a

00:23:05,820 --> 00:23:10,919
couple of customers or something like

00:23:07,919 --> 00:23:12,749
this what do you see more and more and

00:23:10,919 --> 00:23:14,459
more often is you do have a legacy

00:23:12,749 --> 00:23:16,559
application that it's actually one of

00:23:14,459 --> 00:23:18,450
your mission critical application like a

00:23:16,559 --> 00:23:20,969
billing system like something that is

00:23:18,450 --> 00:23:23,009
core to the business and there even if

00:23:20,969 --> 00:23:25,529
we call it like I see it still requires

00:23:23,009 --> 00:23:26,969
enhancements it still requires work on

00:23:25,529 --> 00:23:28,829
and one of the things that you are

00:23:26,969 --> 00:23:30,899
looking at at the moment is how do i

00:23:28,829 --> 00:23:32,789
balance those two how so how do I

00:23:30,899 --> 00:23:34,589
maintain this application up and running

00:23:32,789 --> 00:23:36,179
because they cannot just you know shut

00:23:34,589 --> 00:23:39,119
it down the business is going to go down

00:23:36,179 --> 00:23:41,849
the next day and how do I move this into

00:23:39,119 --> 00:23:44,369
a more you know cloud native friendly

00:23:41,849 --> 00:23:46,589
set up and this is the I will say the

00:23:44,369 --> 00:23:49,019
new type of legacy where containers can

00:23:46,589 --> 00:23:51,059
help and where I agree with determine

00:23:49,019 --> 00:23:54,929
that it's a nice way to use containers

00:23:51,059 --> 00:23:56,599
as a first step and look I think I I

00:23:54,929 --> 00:23:58,679
couldn't agree more with this you know

00:23:56,599 --> 00:24:00,959
developers we naturally get in this

00:23:58,679 --> 00:24:03,059
debate about what's better the VM or the

00:24:00,959 --> 00:24:05,279
container or you know functional or

00:24:03,059 --> 00:24:06,929
service and we get we get obsessed with

00:24:05,279 --> 00:24:09,210
these things because it does affect us

00:24:06,929 --> 00:24:10,550
and it emotionally hurts us win you know

00:24:09,210 --> 00:24:13,340
the thing breaks and all the rest of it

00:24:10,550 --> 00:24:15,830
but really smart smart organizations

00:24:13,340 --> 00:24:16,280
have smart smart product managers like

00:24:15,830 --> 00:24:18,260
Simona

00:24:16,280 --> 00:24:20,090
who actually understand that journey and

00:24:18,260 --> 00:24:22,100
the cost and that's that's one of the

00:24:20,090 --> 00:24:24,080
real things that I think we we can't

00:24:22,100 --> 00:24:26,270
forget about the most is that what is

00:24:24,080 --> 00:24:27,860
containers really pushing out there as a

00:24:26,270 --> 00:24:31,220
value proposition and for me it's

00:24:27,860 --> 00:24:33,380
portability of application and so having

00:24:31,220 --> 00:24:34,790
someone who understands okay we do you

00:24:33,380 --> 00:24:36,560
know this this is just an enterprise

00:24:34,790 --> 00:24:38,870
thing and it's used internally inside

00:24:36,560 --> 00:24:40,160
the organization and people access it

00:24:38,870 --> 00:24:41,810
via the one way and we're not too

00:24:40,160 --> 00:24:43,310
concerned about it it's when we actually

00:24:41,810 --> 00:24:46,160
start to think about containers from the

00:24:43,310 --> 00:24:49,430
point of view of in the future I want

00:24:46,160 --> 00:24:50,990
our organization to be cost ready to be

00:24:49,430 --> 00:24:52,940
able to jump around to the different

00:24:50,990 --> 00:24:54,950
clouds that we'll need and and how we'll

00:24:52,940 --> 00:24:56,390
want them and that that's what we should

00:24:54,950 --> 00:24:57,710
all really care about if you're here at

00:24:56,390 --> 00:24:59,720
the open source conference and you kind

00:24:57,710 --> 00:25:02,150
of feel in the the economics of open

00:24:59,720 --> 00:25:03,430
source the economic says that we should

00:25:02,150 --> 00:25:05,900
actually be able to take our

00:25:03,430 --> 00:25:08,630
applications and move them around and

00:25:05,900 --> 00:25:10,190
not just be stuck in one platform so

00:25:08,630 --> 00:25:12,620
more than anything else I feel like we

00:25:10,190 --> 00:25:15,140
should be when you come to the decision

00:25:12,620 --> 00:25:17,870
points of should I be just throw it in

00:25:15,140 --> 00:25:19,460
the VM and use some use some magic to be

00:25:17,870 --> 00:25:21,980
able to just get it in the VM and use it

00:25:19,460 --> 00:25:24,410
versus put in the additional cost and

00:25:21,980 --> 00:25:27,190
time and developer time to make sure

00:25:24,410 --> 00:25:29,870
that you're you're moving towards a

00:25:27,190 --> 00:25:31,190
stateless application which containers

00:25:29,870 --> 00:25:32,660
can provide if you get all the

00:25:31,190 --> 00:25:34,610
components in though it's very difficult

00:25:32,660 --> 00:25:36,440
it's time it takes a lot of time it

00:25:34,610 --> 00:25:38,270
takes very smart to developers to do it

00:25:36,440 --> 00:25:40,640
but if you can get it into that

00:25:38,270 --> 00:25:41,810
container portability then all of a

00:25:40,640 --> 00:25:43,640
sudden you're starting to make your

00:25:41,810 --> 00:25:46,940
organization cost proof you're able to

00:25:43,640 --> 00:25:48,860
say oh well today we're using Amazon and

00:25:46,940 --> 00:25:51,170
now we're gonna add as or as another

00:25:48,860 --> 00:25:53,930
infrastructure provider and yeah we we

00:25:51,170 --> 00:25:55,430
actually do want to have OpenStack also

00:25:53,930 --> 00:25:56,840
as a private cloud there because it

00:25:55,430 --> 00:25:58,970
holds a bunch of sensitive secret

00:25:56,840 --> 00:26:01,790
financial data and we we really cannot

00:25:58,970 --> 00:26:03,500
allow that to be to be put out in any

00:26:01,790 --> 00:26:05,270
other organization maybe because of data

00:26:03,500 --> 00:26:08,780
sovereignty inside of the country or

00:26:05,270 --> 00:26:11,360
because of security reasons so let's not

00:26:08,780 --> 00:26:12,710
forget about the the actual economics of

00:26:11,360 --> 00:26:14,990
containers in the fact that it's about

00:26:12,710 --> 00:26:18,380
portability enabling us all to have a

00:26:14,990 --> 00:26:20,300
better economic open-source future so I

00:26:18,380 --> 00:26:22,820
had one question back for you Simon eyes

00:26:20,300 --> 00:26:23,149
so at Susi you had all the offering you

00:26:22,820 --> 00:26:25,309
had

00:26:23,149 --> 00:26:27,379
you have a knob in stock based solution

00:26:25,309 --> 00:26:29,299
you have your cast solution you have

00:26:27,379 --> 00:26:31,249
your pass solution how do you advise

00:26:29,299 --> 00:26:33,799
customers with regards to all those

00:26:31,249 --> 00:26:35,749
different options what do you wear you

00:26:33,799 --> 00:26:37,969
tell them you should choose that type of

00:26:35,749 --> 00:26:39,589
product rather than that type of product

00:26:37,969 --> 00:26:42,259
based on the technology benzene on the

00:26:39,589 --> 00:26:43,789
application on the life cycle of the

00:26:42,259 --> 00:26:45,559
application well I usually talk about

00:26:43,789 --> 00:26:48,469
their project and their life and their

00:26:45,559 --> 00:26:50,570
ultimate goals and it's all a matter of

00:26:48,469 --> 00:26:52,549
choice so there are customers who really

00:26:50,570 --> 00:26:54,649
want to start it journey and they are

00:26:52,549 --> 00:26:56,029
even satisfied today with all only the

00:26:54,649 --> 00:26:58,399
container engine and we have that

00:26:56,029 --> 00:27:00,229
offering as well so they only say I want

00:26:58,399 --> 00:27:02,330
to give it a try I'm just going to put a

00:27:00,229 --> 00:27:03,889
couple of containers here and that is

00:27:02,330 --> 00:27:05,869
the operating system plus the container

00:27:03,889 --> 00:27:07,549
engine then you have customers who are

00:27:05,869 --> 00:27:08,659
looking into the transformation that's

00:27:07,549 --> 00:27:10,369
why I was talking about this

00:27:08,659 --> 00:27:13,519
infrastructure transformation and then

00:27:10,369 --> 00:27:14,899
they are evaluating OpenStack and we are

00:27:13,519 --> 00:27:16,969
really proud to be one of the first

00:27:14,899 --> 00:27:19,729
OpenStack distribution and contributing

00:27:16,969 --> 00:27:21,200
to the OpenStack solution but nowadays

00:27:19,729 --> 00:27:23,690
we have customers who are coming back

00:27:21,200 --> 00:27:25,879
and saying you know everything is really

00:27:23,690 --> 00:27:27,950
complex and I used to get on an

00:27:25,879 --> 00:27:29,539
operating a stable reliable enterprise

00:27:27,950 --> 00:27:31,700
operating system from you guys and now I

00:27:29,539 --> 00:27:33,710
actually have to deal with all ok what

00:27:31,700 --> 00:27:34,999
exactly do I want and so on those are

00:27:33,710 --> 00:27:37,820
usually the customers who are looking

00:27:34,999 --> 00:27:41,089
for a full platform as a service we're

00:27:37,820 --> 00:27:43,219
already the local management it set up

00:27:41,089 --> 00:27:45,979
the monitoring tool it's it's embedded

00:27:43,219 --> 00:27:48,259
and you know the tasks that it's on the

00:27:45,979 --> 00:27:50,089
sysadmin or the task list for the

00:27:48,259 --> 00:27:53,719
sysadmin is really reduced because this

00:27:50,089 --> 00:27:55,399
all comes as embedded full solution

00:27:53,719 --> 00:27:57,499
provided by Zeus and that's the value of

00:27:55,399 --> 00:27:58,879
a platform as a service or how we call

00:27:57,499 --> 00:28:01,489
it nowadays it's a cloud native

00:27:58,879 --> 00:28:04,159
application platform this will embrace

00:28:01,489 --> 00:28:06,200
this will embrace the latest technology

00:28:04,159 --> 00:28:08,389
this will help customers run on

00:28:06,200 --> 00:28:10,249
different solutions so they can run it

00:28:08,389 --> 00:28:12,979
on the public cloud or they can decided

00:28:10,249 --> 00:28:14,899
to build it together with us on their

00:28:12,979 --> 00:28:17,119
own private cloud and it all depends on

00:28:14,899 --> 00:28:19,999
the color multi made customer needs and

00:28:17,119 --> 00:28:22,549
how they want to get there we are aware

00:28:19,999 --> 00:28:25,279
that more than 50% of containers today

00:28:22,549 --> 00:28:26,690
are running in public clouds so it's

00:28:25,279 --> 00:28:30,019
still a journey of you know

00:28:26,690 --> 00:28:32,779
transitioning from a standard for legacy

00:28:30,019 --> 00:28:35,749
usually application and setup to the new

00:28:32,779 --> 00:28:36,920
cloud native solution and one thing that

00:28:35,749 --> 00:28:39,110
we realized in

00:28:36,920 --> 00:28:40,970
it's why we have probably have a unique

00:28:39,110 --> 00:28:43,010
setup where we have a cast in the past

00:28:40,970 --> 00:28:44,600
and we don't want to play around with

00:28:43,010 --> 00:28:47,390
the terms and saying that the cast is

00:28:44,600 --> 00:28:49,240
the past and so on we have identified

00:28:47,390 --> 00:28:51,680
the need in the market to have

00:28:49,240 --> 00:28:53,120
automation for containers and this is

00:28:51,680 --> 00:28:55,310
where we build it a container as a

00:28:53,120 --> 00:28:56,240
service platform and on top of this we

00:28:55,310 --> 00:28:58,700
are going to have the platform

00:28:56,240 --> 00:29:00,230
as-a-service the main difference is a

00:28:58,700 --> 00:29:02,540
container as a service is really

00:29:00,230 --> 00:29:04,160
focusing only on containers and it comes

00:29:02,540 --> 00:29:06,230
in very minimal that you need in order

00:29:04,160 --> 00:29:07,730
to run your containers where a platform

00:29:06,230 --> 00:29:10,340
as a service is focusing on your

00:29:07,730 --> 00:29:11,960
developers and comes with all the tools

00:29:10,340 --> 00:29:14,210
that your developers need in order to

00:29:11,960 --> 00:29:16,220
run their application and you no longer

00:29:14,210 --> 00:29:17,930
have to worry about what is happening

00:29:16,220 --> 00:29:23,690
underneath that's something that the

00:29:17,930 --> 00:29:27,260
vendor like Susie will do for you shown

00:29:23,690 --> 00:29:29,120
any feedback on that any solutions out

00:29:27,260 --> 00:29:31,580
there is one thing like when you said

00:29:29,120 --> 00:29:34,670
it's pretty important you know what

00:29:31,580 --> 00:29:36,830
applications we want to put in

00:29:34,670 --> 00:29:40,040
containers and that's that's one thing

00:29:36,830 --> 00:29:42,080
that we're also trying to do within this

00:29:40,040 --> 00:29:44,630
empty a program like modernize

00:29:42,080 --> 00:29:46,250
traditional applications and this is

00:29:44,630 --> 00:29:49,670
more for people who have lots of

00:29:46,250 --> 00:29:54,170
applications so for for many of us we

00:29:49,670 --> 00:29:56,300
have maybe just like one big website or

00:29:54,170 --> 00:29:58,490
maybe a dozen of applications so that's

00:29:56,300 --> 00:30:00,530
that's not us but for the organizations

00:29:58,490 --> 00:30:03,770
that have hundreds of thousands of

00:30:00,530 --> 00:30:06,140
applications finding out which ones are

00:30:03,770 --> 00:30:09,290
good candidates to be put in containers

00:30:06,140 --> 00:30:13,010
can be just by itself a daunting task so

00:30:09,290 --> 00:30:15,130
we worked on tools for that you can do

00:30:13,010 --> 00:30:17,900
some kind of audit on on this

00:30:15,130 --> 00:30:21,350
application landscape so to speak and

00:30:17,900 --> 00:30:24,050
say ok with a bunch of pretty

00:30:21,350 --> 00:30:25,670
straightforward sticks we can kind of

00:30:24,050 --> 00:30:28,430
scroll these applications and then you

00:30:25,670 --> 00:30:31,490
can start working on the ones that are

00:30:28,430 --> 00:30:33,500
on top it won't tell you exactly yes

00:30:31,490 --> 00:30:35,540
know you can containerize that or not

00:30:33,500 --> 00:30:39,140
that's not exactly the point it's much

00:30:35,540 --> 00:30:41,090
you know immediately ok I'm going to get

00:30:39,140 --> 00:30:43,880
a good ever Ryan leverage benefits and

00:30:41,090 --> 00:30:46,220
etc etc on this on the on this pool of

00:30:43,880 --> 00:30:48,300
application so I can start working there

00:30:46,220 --> 00:30:51,690
and then walk my way

00:30:48,300 --> 00:30:53,520
slowy to the applications that will be

00:30:51,690 --> 00:30:54,780
less good candidates but eventually

00:30:53,520 --> 00:30:58,559
we'll get there as well

00:30:54,780 --> 00:31:01,590
so in europeans there is no restriction

00:30:58,559 --> 00:31:03,690
to put any workload inside a container

00:31:01,590 --> 00:31:05,220
environment you don't you don't feel

00:31:03,690 --> 00:31:08,250
that there is room anymore for video

00:31:05,220 --> 00:31:10,260
machines or I think there is no

00:31:08,250 --> 00:31:12,090
restriction but it doesn't mean there is

00:31:10,260 --> 00:31:14,880
no room for virtual machine the

00:31:12,090 --> 00:31:17,670
container has to run somewhere anyway so

00:31:14,880 --> 00:31:21,450
sometimes it will be in a VM sometimes

00:31:17,670 --> 00:31:23,340
it will be under metal sometimes at some

00:31:21,450 --> 00:31:28,530
point it might be in some abstraction

00:31:23,340 --> 00:31:32,040
that is even different so I mean it for

00:31:28,530 --> 00:31:35,640
now it's it's still kind of in the

00:31:32,040 --> 00:31:38,490
sidelines but for training purposes we

00:31:35,640 --> 00:31:39,059
have a lot of things that run docker in

00:31:38,490 --> 00:31:41,370
docker

00:31:39,059 --> 00:31:43,500
so we have containers that run on top of

00:31:41,370 --> 00:31:47,460
containers and I think those containers

00:31:43,500 --> 00:31:49,470
then run on top of VMs that if you run

00:31:47,460 --> 00:31:52,770
them on Google then they will run in

00:31:49,470 --> 00:31:54,510
containers so that doesn't mean that we

00:31:52,770 --> 00:31:56,790
shouldn't capsule a thing like all the

00:31:54,510 --> 00:31:59,280
way down but I think at the end of the

00:31:56,790 --> 00:32:01,770
day everything can be in containers

00:31:59,280 --> 00:32:03,960
there is no doubt about it now should it

00:32:01,770 --> 00:32:06,240
be that the answer kind of depends of

00:32:03,960 --> 00:32:08,460
how you want to look at things like if

00:32:06,240 --> 00:32:10,559
you have a hammer it's better if

00:32:08,460 --> 00:32:13,490
everything is a nail so if you want to

00:32:10,559 --> 00:32:15,900
to manage a large number of containers

00:32:13,490 --> 00:32:19,170
it's great if you pick something that is

00:32:15,900 --> 00:32:20,790
very well student for that and the last

00:32:19,170 --> 00:32:22,800
few things that don't look like white

00:32:20,790 --> 00:32:26,190
containers then we will make them look

00:32:22,800 --> 00:32:28,080
like containers so that but it doesn't

00:32:26,190 --> 00:32:32,520
mean that you have to put everything in

00:32:28,080 --> 00:32:33,870
containers one just one quick comment we

00:32:32,520 --> 00:32:36,809
have noticed that some customers prefer

00:32:33,870 --> 00:32:38,340
to put containers in PM's for isolation

00:32:36,809 --> 00:32:40,530
and for security reasons they have

00:32:38,340 --> 00:32:42,059
already existing security policies in

00:32:40,530 --> 00:32:43,800
place that it will take a while to

00:32:42,059 --> 00:32:45,570
change them because usually comes with

00:32:43,800 --> 00:32:47,700
regulation changes and they all know how

00:32:45,570 --> 00:32:48,929
long this discussion can take and for

00:32:47,700 --> 00:32:50,910
the time being because they want to

00:32:48,929 --> 00:32:52,370
embrace containers for their development

00:32:50,910 --> 00:32:55,320
of their application they prefer to

00:32:52,370 --> 00:32:57,570
isolate them within VMs and fulfill

00:32:55,320 --> 00:33:01,680
order regulations just as a comment that

00:32:57,570 --> 00:33:03,480
that sometimes is mandatory so what

00:33:01,680 --> 00:33:05,040
and someone I actually want to kind of

00:33:03,480 --> 00:33:07,200
ask you a question a little bit here as

00:33:05,040 --> 00:33:09,210
well because it's interesting to talk

00:33:07,200 --> 00:33:10,500
about the difference between gas and

00:33:09,210 --> 00:33:12,110
pass and I think you kind of talked

00:33:10,500 --> 00:33:15,300
about it and correct me please but

00:33:12,110 --> 00:33:17,700
passer more for I guess the DevOps and

00:33:15,300 --> 00:33:20,820
and being able to manage that and gas or

00:33:17,700 --> 00:33:22,020
more for your your people who just are

00:33:20,820 --> 00:33:24,120
specifically working on container

00:33:22,020 --> 00:33:25,500
applications or let's let's have a

00:33:24,120 --> 00:33:27,990
little bit of a talk about that because

00:33:25,500 --> 00:33:30,150
I think this is what really interests me

00:33:27,990 --> 00:33:32,190
is the groups of people who are gonna

00:33:30,150 --> 00:33:33,840
use these different layers right so as

00:33:32,190 --> 00:33:36,030
we start to build layers on top of the

00:33:33,840 --> 00:33:38,130
is it is about trying to bring together

00:33:36,030 --> 00:33:40,230
your DevOps in your app dev and your

00:33:38,130 --> 00:33:41,850
usability experts and your users and

00:33:40,230 --> 00:33:43,620
your product managers and your

00:33:41,850 --> 00:33:45,240
communications people and all the rest

00:33:43,620 --> 00:33:46,830
of it so I'm interested to see if you're

00:33:45,240 --> 00:33:48,330
seeing anything from your customers and

00:33:46,830 --> 00:33:50,310
regards to those kind of different

00:33:48,330 --> 00:33:52,260
modalities right so the way we implement

00:33:50,310 --> 00:33:54,270
it and that's probably specific to sue

00:33:52,260 --> 00:33:56,340
say it's our cast solution it's

00:33:54,270 --> 00:33:58,290
relatively quite simple so we have an

00:33:56,340 --> 00:34:00,660
operating system the container engine or

00:33:58,290 --> 00:34:02,190
orchestration for that everything on top

00:34:00,660 --> 00:34:03,540
of this is something where we work with

00:34:02,190 --> 00:34:05,070
partners and the cast in the end

00:34:03,540 --> 00:34:06,990
customer can choose between the variety

00:34:05,070 --> 00:34:09,030
of partners that are already out there

00:34:06,990 --> 00:34:11,880
while the past solution comes already

00:34:09,030 --> 00:34:13,500
with with CI CD included with log

00:34:11,880 --> 00:34:15,780
management with monitoring already

00:34:13,500 --> 00:34:18,390
included where as a customer can not

00:34:15,780 --> 00:34:20,429
necessarily choose any other solution

00:34:18,390 --> 00:34:22,890
excellent we've got some we've got some

00:34:20,429 --> 00:34:29,220
audience questions yes finally engaged

00:34:22,890 --> 00:34:31,800
you everyone woke up I just want to ask

00:34:29,220 --> 00:34:35,190
the panel about how do you think about

00:34:31,800 --> 00:34:37,740
complexity in in the with the

00:34:35,190 --> 00:34:39,780
introduction of containers and virtual

00:34:37,740 --> 00:34:43,500
machines and so on because obviously

00:34:39,780 --> 00:34:45,899
complexity increases with with having

00:34:43,500 --> 00:34:49,010
several layers but also it kind of

00:34:45,899 --> 00:34:51,929
seemed it decreases in some sense

00:34:49,010 --> 00:34:55,950
portability is obviously a key word here

00:34:51,929 --> 00:34:58,170
but in my ideal world it would be better

00:34:55,950 --> 00:35:00,330
if we didn't have to to do all that

00:34:58,170 --> 00:35:02,190
portability stuff if we could make the

00:35:00,330 --> 00:35:06,210
applications portable and have just one

00:35:02,190 --> 00:35:09,030
OS and everything would run you ever

00:35:06,210 --> 00:35:11,610
seen xkcd cartoon where it's like oh you

00:35:09,030 --> 00:35:13,260
know all we need is another standard so

00:35:11,610 --> 00:35:14,580
there's 12 standards and now there's 13

00:35:13,260 --> 00:35:15,120
standards so we're already into that

00:35:14,580 --> 00:35:16,980
with content

00:35:15,120 --> 00:35:19,410
we had that with vm's and we have all of

00:35:16,980 --> 00:35:21,810
our different you know distros but I

00:35:19,410 --> 00:35:25,200
think one of the to dress the complexity

00:35:21,810 --> 00:35:27,870
questions so this is my two pence the

00:35:25,200 --> 00:35:29,760
the thing that we really right now I

00:35:27,870 --> 00:35:31,830
feel like we are in a phase where we

00:35:29,760 --> 00:35:34,410
look at vm's and we say can this VM go

00:35:31,830 --> 00:35:36,180
into this container and that's a very

00:35:34,410 --> 00:35:37,860
one to one pattern ratio and that's not

00:35:36,180 --> 00:35:40,110
the way you want to actually build

00:35:37,860 --> 00:35:42,060
serverless applications or 12 factor

00:35:40,110 --> 00:35:44,430
applications and we're in a phase now

00:35:42,060 --> 00:35:46,650
where everybody's starting to have this

00:35:44,430 --> 00:35:48,270
debate and just conversation around what

00:35:46,650 --> 00:35:50,010
are the additional features you need

00:35:48,270 --> 00:35:52,620
built around the container you know

00:35:50,010 --> 00:35:54,630
whether it's that whether it's you know

00:35:52,620 --> 00:35:56,610
a heavyweight orchestration system like

00:35:54,630 --> 00:36:00,150
kubernetes or something a lot more like

00:35:56,610 --> 00:36:01,560
wait like Nomad or swarm whether or not

00:36:00,150 --> 00:36:03,720
you want to be able to do this stuff

00:36:01,560 --> 00:36:06,000
like Netflix is doing with CI CD you

00:36:03,720 --> 00:36:08,130
know so you have 20 applications out to

00:36:06,000 --> 00:36:10,230
all your different sets of users so you

00:36:08,130 --> 00:36:12,390
can be collecting data I think that's

00:36:10,230 --> 00:36:14,760
the place where over the next five years

00:36:12,390 --> 00:36:16,740
we've got to figure out what do

00:36:14,760 --> 00:36:18,450
serverless applications look like and

00:36:16,740 --> 00:36:20,640
all the rest of that and that's a much

00:36:18,450 --> 00:36:22,680
more that is where it gets complex but

00:36:20,640 --> 00:36:24,330
just in terms of you know customers

00:36:22,680 --> 00:36:26,160
moving over into containers I don't

00:36:24,330 --> 00:36:28,050
think that's too big of a deal then

00:36:26,160 --> 00:36:30,150
there's a whole other level above the

00:36:28,050 --> 00:36:31,500
pass and cast and this is kind of why

00:36:30,150 --> 00:36:33,210
I'm asking this question right now it's

00:36:31,500 --> 00:36:35,100
because I don't know what are the things

00:36:33,210 --> 00:36:36,270
we're gonna build on top and I'm not I'm

00:36:35,100 --> 00:36:39,660
not sure if you guys have seen anything

00:36:36,270 --> 00:36:41,070
or in the use cases yet er before I move

00:36:39,660 --> 00:36:43,260
to another question I do have an answer

00:36:41,070 --> 00:36:44,730
what we have seen so far is that the

00:36:43,260 --> 00:36:46,890
complexity is already there and we

00:36:44,730 --> 00:36:48,300
started from developers trying to push

00:36:46,890 --> 00:36:50,880
into getting root access to the

00:36:48,300 --> 00:36:52,320
infrastructure and they could usually

00:36:50,880 --> 00:36:54,300
they don't get that and then they found

00:36:52,320 --> 00:36:56,580
lots of workarounds for that so what we

00:36:54,300 --> 00:36:58,920
are trying to talk about here to it you

00:36:56,580 --> 00:37:00,840
it's actually standards that that will

00:36:58,920 --> 00:37:03,120
help the system in an organization the

00:37:00,840 --> 00:37:05,340
infrastructure layer to put some rules

00:37:03,120 --> 00:37:07,440
in place and still let the developers

00:37:05,340 --> 00:37:09,720
have the freedom of innovation that they

00:37:07,440 --> 00:37:12,350
are looking for complexity it's already

00:37:09,720 --> 00:37:12,350
there in my view

00:37:14,640 --> 00:37:19,420
I'm not sure we will have enough time to

00:37:17,320 --> 00:37:23,050
take all the questions but the panelists

00:37:19,420 --> 00:37:26,020
will stay after sure so for me the

00:37:23,050 --> 00:37:28,000
specific question about cats versus pass

00:37:26,020 --> 00:37:29,470
pass when I think of all the passes that

00:37:28,000 --> 00:37:31,240
came out I mean first of all cloud is an

00:37:29,470 --> 00:37:32,560
is standard and NIST defined what

00:37:31,240 --> 00:37:34,660
infrastructure services and what

00:37:32,560 --> 00:37:35,950
platform is the services and when all

00:37:34,660 --> 00:37:37,330
the different people who created

00:37:35,950 --> 00:37:39,119
different solutions around those created

00:37:37,330 --> 00:37:41,380
them they were following those standards

00:37:39,119 --> 00:37:42,700
containers as a service kind of came

00:37:41,380 --> 00:37:44,410
about and said well we're gonna ignore

00:37:42,700 --> 00:37:45,850
all that stuff but it doesn't have

00:37:44,410 --> 00:37:47,170
feature parity as a result to

00:37:45,850 --> 00:37:49,090
infrastructure as a service and platform

00:37:47,170 --> 00:37:50,470
as a service for things like self

00:37:49,090 --> 00:37:54,130
service for example they're metered

00:37:50,470 --> 00:37:56,950
service so that's kind of what I wanted

00:37:54,130 --> 00:37:59,290
to address from the panel is like how do

00:37:56,950 --> 00:38:00,880
you how do you go from infrastructure as

00:37:59,290 --> 00:38:03,609
a service to something like container as

00:38:00,880 --> 00:38:06,040
a service when most containers a service

00:38:03,609 --> 00:38:08,530
does don't have all of like the basic

00:38:06,040 --> 00:38:12,400
features of infrastructure as a service

00:38:08,530 --> 00:38:14,800
because it doesn't follow us standard in

00:38:12,400 --> 00:38:16,720
our case you pile them up so we have our

00:38:14,800 --> 00:38:18,730
container as a service solution running

00:38:16,720 --> 00:38:20,710
on top of an infrastructure as a service

00:38:18,730 --> 00:38:22,240
and then you get all the benefits and

00:38:20,710 --> 00:38:24,040
all the goodies from you know storage

00:38:22,240 --> 00:38:26,350
network management on that layer and

00:38:24,040 --> 00:38:29,109
then in our case we use magnum and put

00:38:26,350 --> 00:38:30,700
kubernetes on top and one of the things

00:38:29,109 --> 00:38:33,609
I think is really important to draw out

00:38:30,700 --> 00:38:36,910
here is again that who uses it right so

00:38:33,609 --> 00:38:39,550
in naught that is layer you got sis

00:38:36,910 --> 00:38:40,869
admins network engineers DevOps you know

00:38:39,550 --> 00:38:42,359
and all the rest of it up in the cast

00:38:40,869 --> 00:38:45,760
and pass layer you're seeing those

00:38:42,359 --> 00:38:48,190
usability app dev community manager

00:38:45,760 --> 00:38:49,540
people and stuff like that so one of the

00:38:48,190 --> 00:38:50,740
things I think we're really trying to do

00:38:49,540 --> 00:38:53,170
is actually break down all the barriers

00:38:50,740 --> 00:38:54,910
you know so actually trying to get your

00:38:53,170 --> 00:38:56,470
application developers to talk to your

00:38:54,910 --> 00:38:58,720
DevOps so that they kind of understand

00:38:56,470 --> 00:39:00,760
each other on each side of their their

00:38:58,720 --> 00:39:01,540
layer defense because right now that I

00:39:00,760 --> 00:39:04,060
think that's where a lot of

00:39:01,540 --> 00:39:06,430
organizational breakdown is occurring is

00:39:04,060 --> 00:39:07,810
that they don't actually know how to how

00:39:06,430 --> 00:39:16,180
to participate with one another on that

00:39:07,810 --> 00:39:22,960
that space more concrete question so

00:39:16,180 --> 00:39:25,120
kubernetes or swarm both both and nomad

00:39:22,960 --> 00:39:28,730
and

00:39:25,120 --> 00:39:31,220
do you think our dancers do attend every

00:39:28,730 --> 00:39:33,350
class I'm sure ministers are doing their

00:39:31,220 --> 00:39:35,410
comparable products or their like things

00:39:33,350 --> 00:39:37,820
of their own and we cannot really say

00:39:35,410 --> 00:39:39,710
formulate a question like this one

00:39:37,820 --> 00:39:41,960
versus another I think that there are

00:39:39,710 --> 00:39:44,090
comparable just like EDM and Zen are

00:39:41,960 --> 00:39:46,450
comparable they have differences they

00:39:44,090 --> 00:39:49,940
have strengths they have weaknesses I

00:39:46,450 --> 00:39:52,340
believe both swam and kubernetes

00:39:49,940 --> 00:39:54,950
communities are kind of looking at each

00:39:52,340 --> 00:39:58,730
other and converging to this central

00:39:54,950 --> 00:40:02,450
position where they they have upsides of

00:39:58,730 --> 00:40:04,700
both so my answer would be both like

00:40:02,450 --> 00:40:07,280
them depending on what you need to do or

00:40:04,700 --> 00:40:08,780
I think also what you want to do is look

00:40:07,280 --> 00:40:10,970
at who their customers are gonna be so

00:40:08,780 --> 00:40:13,280
mesos because it is got that Apache

00:40:10,970 --> 00:40:14,510
Hadoop background they've got a bunch of

00:40:13,280 --> 00:40:16,250
customers are doing a lot of big data

00:40:14,510 --> 00:40:18,440
stuff right so that's what's gonna

00:40:16,250 --> 00:40:20,120
happen is that people are gonna come

00:40:18,440 --> 00:40:21,950
around these things and their use cases

00:40:20,120 --> 00:40:24,410
are actually gonna form the product and

00:40:21,950 --> 00:40:26,390
we need that because we we need more

00:40:24,410 --> 00:40:28,160
diversity in this space we're not we're

00:40:26,390 --> 00:40:29,840
not having less and less things we're

00:40:28,160 --> 00:40:32,000
having more and more use cases that's

00:40:29,840 --> 00:40:35,570
the biggest problem yeah so we need

00:40:32,000 --> 00:40:38,360
these different Casas slash passes to be

00:40:35,570 --> 00:40:39,950
able to have vertical markets inside of

00:40:38,360 --> 00:40:41,480
this space and understand what those

00:40:39,950 --> 00:40:43,700
customers need inside those vertical

00:40:41,480 --> 00:40:44,990
markets so getting I think in all of

00:40:43,700 --> 00:40:46,550
these what's really cool is every single

00:40:44,990 --> 00:40:48,080
one of them has a community you know we

00:40:46,550 --> 00:40:50,390
are finally in the era of community

00:40:48,080 --> 00:40:52,400
where go and hang out with that

00:40:50,390 --> 00:40:53,330
community and see who's there and if you

00:40:52,400 --> 00:40:55,370
know birds of a feather

00:40:53,330 --> 00:41:04,970
you know flock together so that's the

00:40:55,370 --> 00:41:08,590
place to go David you said you know it's

00:41:04,970 --> 00:41:11,900
not about either or it's not AES or VM

00:41:08,590 --> 00:41:14,120
is or containers but it's it's actually

00:41:11,900 --> 00:41:16,100
an I know I think that's reasonable but

00:41:14,120 --> 00:41:17,740
you know if that were to happen you

00:41:16,100 --> 00:41:19,880
really need to have a single

00:41:17,740 --> 00:41:22,490
orchestration layer which can actually

00:41:19,880 --> 00:41:24,470
orchestrate you know that kind of mixed

00:41:22,490 --> 00:41:25,730
payload environment right now you know

00:41:24,470 --> 00:41:27,260
the challenge is we're dealing in our

00:41:25,730 --> 00:41:29,240
company is you know we have Cuban

00:41:27,260 --> 00:41:31,040
interest we have OpenStack if you have

00:41:29,240 --> 00:41:32,210
some payloads running on OpenStack so

00:41:31,040 --> 00:41:33,820
I'm running on Cuban it is you end up

00:41:32,210 --> 00:41:35,450
building another high-level

00:41:33,820 --> 00:41:37,650
orchestration layer which would talk to

00:41:35,450 --> 00:41:40,580
Cuban artists and OpenStack and maybe

00:41:37,650 --> 00:41:42,510
another one later on how do you think

00:41:40,580 --> 00:41:45,020
they're that evolution would happen

00:41:42,510 --> 00:41:47,340
would OpenStack end up you know

00:41:45,020 --> 00:41:50,160
orchestrating containers as well or what

00:41:47,340 --> 00:41:52,980
Cuban it does also support VMs in future

00:41:50,160 --> 00:41:55,500
I look I think all of those are a

00:41:52,980 --> 00:42:00,840
possibility right now I don't know which

00:41:55,500 --> 00:42:02,640
way it'll did to go yeah no

00:42:00,840 --> 00:42:04,050
orchestration absolutely essential and

00:42:02,640 --> 00:42:05,190
you know you look at Nova and what

00:42:04,050 --> 00:42:06,600
they're doing they have such rich

00:42:05,190 --> 00:42:08,910
history in the way that they have

00:42:06,600 --> 00:42:09,870
managed you know vm's embarr metal and

00:42:08,910 --> 00:42:11,730
all the rest of it the way their

00:42:09,870 --> 00:42:13,500
ingredient containers but at the same

00:42:11,730 --> 00:42:16,920
time there are very definitive use cases

00:42:13,500 --> 00:42:18,420
for you know a more heavyweight solution

00:42:16,920 --> 00:42:20,910
like kubernetes to be able to do the

00:42:18,420 --> 00:42:23,220
full-blown pipeline stuff versus just

00:42:20,910 --> 00:42:26,580
more simple orchestration tools like

00:42:23,220 --> 00:42:28,320
heat like salt like ansible so I don't

00:42:26,580 --> 00:42:30,780
think we're gonna converge in on a

00:42:28,320 --> 00:42:32,520
single you know it's not actually gonna

00:42:30,780 --> 00:42:33,990
be the board board is an interesting

00:42:32,520 --> 00:42:35,250
word that kubernetes came from board

00:42:33,990 --> 00:42:37,140
because we're not gonna have a single

00:42:35,250 --> 00:42:39,180
orchestration language people have their

00:42:37,140 --> 00:42:40,890
favorite orchestration and configuration

00:42:39,180 --> 00:42:42,000
languages and you're not going to give

00:42:40,890 --> 00:42:43,020
those up just like you're not going to

00:42:42,000 --> 00:42:44,580
give up your favorite programming

00:42:43,020 --> 00:42:46,230
language right you know it's it's

00:42:44,580 --> 00:42:48,840
something you have in your your arsenal

00:42:46,230 --> 00:42:50,260
of tools the grant of time okay thank

00:42:48,840 --> 00:42:55,139
you very much for vanities

00:42:50,260 --> 00:42:55,139

YouTube URL: https://www.youtube.com/watch?v=Xb32P_VWh7w


