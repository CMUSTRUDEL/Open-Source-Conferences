Title: Keynote: The Tao of HashiCorp - Mitchell Hashimoto, Founder, HashiCorp
Publication date: 2017-10-27
Playlist: Open Source Summit Europe & Embedded Linux Conference Europe 2017
Description: 
	Keynote: The Tao of HashiCorp - Mitchell Hashimoto, Founder, HashiCorp ‎ 

The Tao of HashiCorp are the guiding principles for the vision, roadmap, and design of HashiCorp tooling. It represents the product design ideals that are most important to and represented in HashiCorp products. In this talk, Mitchell will explain the reasoning and implementation of the Tao.

About Mitchell Hashimoto
Mitchell Hashimoto is a passionate engineer, professional speaker, and entrepreneur. Mitchell has been creating and contributing to open source software for almost a decade. He has spoken at dozens of conferences about his work, such as VelocityConf, OSCON, FOSDEM, and more. Mitchell is the founder of HashiCorp, a company whose goal is to make the best DevOps tools in the world, including Vagrant. Prior to HashiCorp, Mitchell spent five years as a web developer and another four as an operations engineer.
Captions: 
	00:00:00,000 --> 00:00:04,529
all right thank you very much it's a

00:00:02,700 --> 00:00:07,470
huge honor to be here it's really cool

00:00:04,529 --> 00:00:08,340
to see talks like those given by the

00:00:07,470 --> 00:00:11,730
banks

00:00:08,340 --> 00:00:14,880
because as many of you here know my life

00:00:11,730 --> 00:00:17,340
currently is heavily involved with open

00:00:14,880 --> 00:00:19,770
source but maybe sort of lesser-known is

00:00:17,340 --> 00:00:22,050
that I was really only able to start

00:00:19,770 --> 00:00:25,529
getting involved and learning to code

00:00:22,050 --> 00:00:28,609
because of open source so as a quick

00:00:25,529 --> 00:00:30,840
sort of story leading into this talk I

00:00:28,609 --> 00:00:34,260
started to learn to code around 11 or 12

00:00:30,840 --> 00:00:35,910
years old and we had one dial-up line

00:00:34,260 --> 00:00:37,649
and I was not allowed to connect to the

00:00:35,910 --> 00:00:40,230
internet during the day because my dad

00:00:37,649 --> 00:00:43,170
needed that line so I really only had

00:00:40,230 --> 00:00:44,879
two ways to learn to code and one way is

00:00:43,170 --> 00:00:47,850
super not open-source at all my dad

00:00:44,879 --> 00:00:49,640
would drop me off at Borders bookstore

00:00:47,850 --> 00:00:51,840
which I think is now out of business but

00:00:49,640 --> 00:00:53,430
what dropped me off at the bookstore I

00:00:51,840 --> 00:00:55,410
would run to the corner where the

00:00:53,430 --> 00:00:56,940
computer books were I would like crack

00:00:55,410 --> 00:00:58,170
open the book to not crease it because I

00:00:56,940 --> 00:01:00,059
couldn't afford to buy the book so I

00:00:58,170 --> 00:01:01,590
would crack it open read and read and

00:01:00,059 --> 00:01:03,510
read and I would read the same like five

00:01:01,590 --> 00:01:04,799
pages over and over because I had to

00:01:03,510 --> 00:01:07,200
memorize them because I couldn't take

00:01:04,799 --> 00:01:09,720
this book home and then I would run home

00:01:07,200 --> 00:01:11,250
and then try to sort of apply what I

00:01:09,720 --> 00:01:14,040
learned and I would repeat that sort of

00:01:11,250 --> 00:01:16,619
weekly and then the other thing was when

00:01:14,040 --> 00:01:19,530
I discovered that open source existed

00:01:16,619 --> 00:01:22,650
and you know github doesn't even exist

00:01:19,530 --> 00:01:23,820
Google was relatively new so I tried all

00:01:22,650 --> 00:01:24,960
these different search engines but he

00:01:23,820 --> 00:01:28,409
eventually found out you know people

00:01:24,960 --> 00:01:30,930
uploaded tar balls and stuff of code and

00:01:28,409 --> 00:01:32,850
so I would download a bunch of tar balls

00:01:30,930 --> 00:01:36,450
at night and then during the day when I

00:01:32,850 --> 00:01:38,210
couldn't dial up I would just read the

00:01:36,450 --> 00:01:41,100
source code and learn sort of how to

00:01:38,210 --> 00:01:42,869
apply these abstract concepts books are

00:01:41,100 --> 00:01:44,700
really great at abstract concepts open

00:01:42,869 --> 00:01:46,470
source is really great at applying those

00:01:44,700 --> 00:01:48,720
concepts and showing me sort of how it

00:01:46,470 --> 00:01:51,720
could work so that's how I really got

00:01:48,720 --> 00:01:54,000
started and and so it's very fitting and

00:01:51,720 --> 00:01:56,219
I'm very happy that I'm able to sort of

00:01:54,000 --> 00:01:59,549
build my career around open source

00:01:56,219 --> 00:02:02,850
software and around eight years ago I

00:01:59,549 --> 00:02:04,649
started a project called vagrant and as

00:02:02,850 --> 00:02:06,420
the bank said I'm talk it wasn't my

00:02:04,649 --> 00:02:08,910
first open-source project there was many

00:02:06,420 --> 00:02:10,950
before that that no one knows or cares

00:02:08,910 --> 00:02:12,470
about but vagrant ended up being

00:02:10,950 --> 00:02:14,099
something a little bit more special

00:02:12,470 --> 00:02:16,439
becoming a lot more pop

00:02:14,099 --> 00:02:19,439
than I could have imagined but also

00:02:16,439 --> 00:02:22,889
taught me a lot about you know community

00:02:19,439 --> 00:02:24,749
the non-coding side of open-source I had

00:02:22,889 --> 00:02:26,489
to learn about the challenges of

00:02:24,749 --> 00:02:28,680
building a community the challenges of

00:02:26,489 --> 00:02:31,590
bringing on contributors governance

00:02:28,680 --> 00:02:34,139
those sorts of things and the success of

00:02:31,590 --> 00:02:37,409
vagrant and and getting into DevOps is

00:02:34,139 --> 00:02:40,040
also what led me to found Hoshi Corp

00:02:37,409 --> 00:02:41,939
which is a company aimed at building

00:02:40,040 --> 00:02:45,709
striving to build you know the best

00:02:41,939 --> 00:02:48,090
infrastructure automation tools and I

00:02:45,709 --> 00:02:52,010
started this company with my best friend

00:02:48,090 --> 00:02:54,599
Arman and together we've built seven

00:02:52,010 --> 00:02:58,109
free and open-source license products

00:02:54,599 --> 00:03:00,510
that we've built our company on which do

00:02:58,109 --> 00:03:03,569
development environments infrastructure

00:03:00,510 --> 00:03:06,060
automation cluster scheduling sea

00:03:03,569 --> 00:03:09,689
security software there's a pretty wide

00:03:06,060 --> 00:03:12,870
array of things and when we started

00:03:09,689 --> 00:03:14,790
Hoshi Corp we knew for sure we were

00:03:12,870 --> 00:03:17,459
building around four or five of these

00:03:14,790 --> 00:03:19,470
things and we started that process and

00:03:17,459 --> 00:03:21,989
when we started it was just the two of

00:03:19,470 --> 00:03:25,109
us and when there's two of you and

00:03:21,989 --> 00:03:27,449
especially when you're as as close as we

00:03:25,109 --> 00:03:28,879
were it's it's easy like you have a

00:03:27,449 --> 00:03:31,049
mutual vision and a mutual understanding

00:03:28,879 --> 00:03:33,269
you know how you want these things to

00:03:31,049 --> 00:03:36,269
work how you want them to feel and you

00:03:33,269 --> 00:03:39,540
could be really really productive but we

00:03:36,269 --> 00:03:41,340
knew that to really you know reach the

00:03:39,540 --> 00:03:43,470
goals and ambitions that we had for a

00:03:41,340 --> 00:03:46,739
company like Hofstra Corp which is to

00:03:43,470 --> 00:03:48,840
make a much broader industry impact that

00:03:46,739 --> 00:03:51,120
it was gonna be more than the two of us

00:03:48,840 --> 00:03:54,419
and very likely much much more than the

00:03:51,120 --> 00:03:59,340
two of us so our biggest fear was how

00:03:54,419 --> 00:04:03,209
are we going to scale or not not company

00:03:59,340 --> 00:04:05,159
vision but product development and

00:04:03,209 --> 00:04:08,069
design vision like how we're gonna build

00:04:05,159 --> 00:04:10,799
an engineering organization that really

00:04:08,069 --> 00:04:12,780
understands why we do some of the things

00:04:10,799 --> 00:04:15,180
the way we do some of the things we do

00:04:12,780 --> 00:04:16,889
not necessarily just what the problems

00:04:15,180 --> 00:04:20,609
are solving but how we solve those

00:04:16,889 --> 00:04:23,400
problems and so very early on in the

00:04:20,609 --> 00:04:25,949
company and two most very surprisingly

00:04:23,400 --> 00:04:27,420
early we wrote a document called the Tao

00:04:25,949 --> 00:04:29,040
of Hoshi Corp

00:04:27,420 --> 00:04:31,560
I think we wrote it when we were still

00:04:29,040 --> 00:04:33,480
around five employees so it was really

00:04:31,560 --> 00:04:36,630
early we published it about a year later

00:04:33,480 --> 00:04:39,270
I think we published it in 2014 but I'm

00:04:36,630 --> 00:04:41,490
not 100% sure if that's right

00:04:39,270 --> 00:04:44,550
but what the Tao is is really sort of

00:04:41,490 --> 00:04:47,910
the principles that guide sort of our

00:04:44,550 --> 00:04:51,240
vision or roadmap and product design of

00:04:47,910 --> 00:04:53,010
our products and when you know I've

00:04:51,240 --> 00:04:54,750
worked in companies where when I hear

00:04:53,010 --> 00:04:57,990
the word principles I think it's some HR

00:04:54,750 --> 00:04:59,520
checklist that the company just has and

00:04:57,990 --> 00:05:00,870
with something like the Tao I think it's

00:04:59,520 --> 00:05:02,370
it's important to know that we wrote it

00:05:00,870 --> 00:05:05,730
when we're five people it's important to

00:05:02,370 --> 00:05:08,880
know that we've applied it really

00:05:05,730 --> 00:05:11,160
rigorously sort of to our tools and so

00:05:08,880 --> 00:05:13,800
what I want to do in this talk is go

00:05:11,160 --> 00:05:15,720
over the principles of the Tao explain

00:05:13,800 --> 00:05:17,280
what they are why they matter to us and

00:05:15,720 --> 00:05:19,980
how we've applied them to our tools and

00:05:17,280 --> 00:05:21,960
my hoping with my hope with that is that

00:05:19,980 --> 00:05:24,660
you could take this and more broadly

00:05:21,960 --> 00:05:27,600
applicable to not just building tools

00:05:24,660 --> 00:05:29,520
but also a design decision and and when

00:05:27,600 --> 00:05:32,130
you're adopting tools like is adopting

00:05:29,520 --> 00:05:34,110
this tool is our certain element so

00:05:32,130 --> 00:05:36,420
that's how important to you and so an

00:05:34,110 --> 00:05:40,670
architecture you know issue with this

00:05:36,420 --> 00:05:42,870
tool is not going to work for you and

00:05:40,670 --> 00:05:44,610
yes so let's get started going through

00:05:42,870 --> 00:05:45,930
the town there's eight of them a few of

00:05:44,610 --> 00:05:48,210
them are really similar so they'll be

00:05:45,930 --> 00:05:51,870
very fast and some I'll spend more time

00:05:48,210 --> 00:05:54,870
on so the first thing in the tao is

00:05:51,870 --> 00:05:56,010
workflows not technologies and it's not

00:05:54,870 --> 00:05:57,840
a mistake that we put this one first

00:05:56,010 --> 00:05:59,490
it's really really important to us and

00:05:57,840 --> 00:06:02,330
so the idea behind this is that

00:05:59,490 --> 00:06:04,620
technology is both software and hardware

00:06:02,330 --> 00:06:06,270
continue to shift like continuously will

00:06:04,620 --> 00:06:08,670
shift if you expect that anything is

00:06:06,270 --> 00:06:12,450
going to remain constant you're in for a

00:06:08,670 --> 00:06:15,330
rude surprise and so with this idea the

00:06:12,450 --> 00:06:18,900
the core thing is that product design

00:06:15,330 --> 00:06:22,920
should start with an envisioned workflow

00:06:18,900 --> 00:06:24,630
to solve a problem and so I use a few

00:06:22,920 --> 00:06:26,490
words here I say product design and I'm

00:06:24,630 --> 00:06:28,140
probably gonna say that a lot when we

00:06:26,490 --> 00:06:30,630
start a new tool whether it's a new

00:06:28,140 --> 00:06:32,820
open-source tool or a new internal sort

00:06:30,630 --> 00:06:35,550
of back-end service we don't start with

00:06:32,820 --> 00:06:37,290
directly with algorithms or architecture

00:06:35,550 --> 00:06:38,640
or things like that we ask ourselves

00:06:37,290 --> 00:06:41,340
what's the problem we're trying to solve

00:06:38,640 --> 00:06:44,190
and then we start designing

00:06:41,340 --> 00:06:46,830
and and I use the word design not in the

00:06:44,190 --> 00:06:49,980
word in the meaning of visual design but

00:06:46,830 --> 00:06:51,630
actually holistic design of how is it

00:06:49,980 --> 00:06:55,770
gonna feel but also how is it gonna work

00:06:51,630 --> 00:06:59,070
and so the examples I have here from our

00:06:55,770 --> 00:07:01,350
industry are sort of looking at you know

00:06:59,070 --> 00:07:03,840
mainframe to server server to VM VM to

00:07:01,350 --> 00:07:06,900
container or if you look at physical

00:07:03,840 --> 00:07:08,910
data centers to cloud all these are huge

00:07:06,900 --> 00:07:11,640
paradigm shifts that have happened sort

00:07:08,910 --> 00:07:14,430
of over 10 to 15-year periods and in all

00:07:11,640 --> 00:07:17,880
of them lots and lots of software was

00:07:14,430 --> 00:07:19,350
replaced and if you look though the core

00:07:17,880 --> 00:07:21,870
problems that people are trying to solve

00:07:19,350 --> 00:07:24,480
just didn't really change and so the

00:07:21,870 --> 00:07:26,220
idea behind this is that most problems

00:07:24,480 --> 00:07:28,230
don't disappear some do but most

00:07:26,220 --> 00:07:30,270
problems don't disappear some problems

00:07:28,230 --> 00:07:32,220
are created of course but there's a big

00:07:30,270 --> 00:07:36,180
group of problems which stay the same

00:07:32,220 --> 00:07:36,990
and so if you work if you aim at work

00:07:36,180 --> 00:07:39,060
clothes first

00:07:36,990 --> 00:07:42,600
you could often create software that

00:07:39,060 --> 00:07:44,100
could span multiple paradigm shifts and

00:07:42,600 --> 00:07:45,720
that's really important to ease the

00:07:44,100 --> 00:07:48,930
adoption and transition into these

00:07:45,720 --> 00:07:51,170
different different stages and so the

00:07:48,930 --> 00:07:54,180
best examples for our software here are

00:07:51,170 --> 00:07:57,240
terraform and vagrant terraform is a

00:07:54,180 --> 00:07:59,220
tool for creating infrastructure with

00:07:57,240 --> 00:08:01,440
terraform you could create VM so you

00:07:59,220 --> 00:08:03,090
could create physical servers you could

00:08:01,440 --> 00:08:06,060
create containers you can manage SAS

00:08:03,090 --> 00:08:08,430
applications and we have people from

00:08:06,060 --> 00:08:10,860
hobbyists all the way up to you know the

00:08:08,430 --> 00:08:13,950
world's largest on any given day company

00:08:10,860 --> 00:08:16,590
I'm using terraform to manage vastly

00:08:13,950 --> 00:08:19,590
different things but using the exact

00:08:16,590 --> 00:08:21,450
same workflow and so the last thing I'll

00:08:19,590 --> 00:08:22,590
say about this against really importance

00:08:21,450 --> 00:08:25,770
of spending a lot of time on this slide

00:08:22,590 --> 00:08:28,200
but is is this is how we also start our

00:08:25,770 --> 00:08:30,720
software terraform and vagrant actually

00:08:28,200 --> 00:08:32,340
both started as bash scripts and when I

00:08:30,720 --> 00:08:34,440
say that people usually think I built

00:08:32,340 --> 00:08:35,970
like a Minimum Viable Product and bash I

00:08:34,440 --> 00:08:37,470
didn't I just put a bunch of echo

00:08:35,970 --> 00:08:39,660
statements and pretended something was

00:08:37,470 --> 00:08:42,420
happening when nothing it did absolutely

00:08:39,660 --> 00:08:44,880
nothing but the reason I do that is I is

00:08:42,420 --> 00:08:47,670
I write it in bash and then I use it for

00:08:44,880 --> 00:08:49,440
a day I use it given it does nothing but

00:08:47,670 --> 00:08:51,360
I use it and try to see if it feels

00:08:49,440 --> 00:08:52,710
right like is this how I actually want

00:08:51,360 --> 00:08:54,420
to work on a day-to-day basis because

00:08:52,710 --> 00:08:55,200
I'm gonna commit this sort of like

00:08:54,420 --> 00:08:57,570
building some

00:08:55,200 --> 00:08:59,480
that I'm gonna you know work on and use

00:08:57,570 --> 00:09:02,870
for years is this how I want it to work

00:08:59,480 --> 00:09:05,460
and that's really the focus on workflows

00:09:02,870 --> 00:09:07,530
the next thing much simpler much more

00:09:05,460 --> 00:09:10,650
obvious I think is is the concept of

00:09:07,530 --> 00:09:12,240
simple modular composable this could

00:09:10,650 --> 00:09:13,820
kind of be described as the UNIX

00:09:12,240 --> 00:09:15,960
philosophy in a way but I think that's

00:09:13,820 --> 00:09:17,820
that the UNIX philosophy is always

00:09:15,960 --> 00:09:20,760
interpreted to the speaker's like you

00:09:17,820 --> 00:09:22,980
know the most beneficial definition so

00:09:20,760 --> 00:09:25,230
instead of saying that the goal of this

00:09:22,980 --> 00:09:29,100
is really just to prefer smaller

00:09:25,230 --> 00:09:30,990
components with well-defined scope that

00:09:29,100 --> 00:09:32,760
are functional on their own but can be

00:09:30,990 --> 00:09:35,700
integrated and composed with other tools

00:09:32,760 --> 00:09:37,590
to do new and interesting things and I

00:09:35,700 --> 00:09:39,090
think this is really obvious in our and

00:09:37,590 --> 00:09:41,640
in our in the ethos of our company we

00:09:39,090 --> 00:09:44,490
are sort of one of the few startup

00:09:41,640 --> 00:09:46,440
companies that built so many pieces of

00:09:44,490 --> 00:09:48,750
software that dude vastly different

00:09:46,440 --> 00:09:51,300
things instead of bolting features on

00:09:48,750 --> 00:09:52,470
two different products vault is a good

00:09:51,300 --> 00:09:54,360
example

00:09:52,470 --> 00:09:56,460
we built vault because people were

00:09:54,360 --> 00:09:59,220
putting secret information in console

00:09:56,460 --> 00:10:02,160
which is a key value store and we didn't

00:09:59,220 --> 00:10:03,540
feel console console security story it's

00:10:02,160 --> 00:10:06,030
it's just not built for that and so we

00:10:03,540 --> 00:10:07,290
felt sort of guilty in a way that people

00:10:06,030 --> 00:10:08,700
were putting secret information in there

00:10:07,290 --> 00:10:10,770
and we didn't have a better option to

00:10:08,700 --> 00:10:12,930
give them we could have bolted on

00:10:10,770 --> 00:10:14,610
encryption to console and certainly from

00:10:12,930 --> 00:10:17,220
a pragmatic standpoint that is the way

00:10:14,610 --> 00:10:18,840
we started the design but as we started

00:10:17,220 --> 00:10:21,030
thinking through the the Turtle tower of

00:10:18,840 --> 00:10:22,500
security problems you know beginning

00:10:21,030 --> 00:10:24,900
with where does the key stored how do

00:10:22,500 --> 00:10:26,880
you rotate the key who has access to the

00:10:24,900 --> 00:10:27,930
key how has security bootstrapped you

00:10:26,880 --> 00:10:30,510
know as we went through these turtle

00:10:27,930 --> 00:10:33,540
problems we realized that it would be a

00:10:30,510 --> 00:10:35,850
humongous problem a solution to just

00:10:33,540 --> 00:10:37,530
bolt on to console and would be way out

00:10:35,850 --> 00:10:39,570
of scope where that project was trying

00:10:37,530 --> 00:10:43,050
to do and so that's an example a

00:10:39,570 --> 00:10:45,750
building vault the next thing is

00:10:43,050 --> 00:10:47,640
communicating sequential processes so if

00:10:45,750 --> 00:10:49,650
you're building these modular components

00:10:47,640 --> 00:10:50,970
just built on modular they have to be

00:10:49,650 --> 00:10:53,310
able to communicate with each other and

00:10:50,970 --> 00:10:55,260
for that we just follow this model where

00:10:53,310 --> 00:10:57,240
all our software should be a standalone

00:10:55,260 --> 00:10:59,280
process that runs well on its own with a

00:10:57,240 --> 00:11:03,090
well-defined sort of communication

00:10:59,280 --> 00:11:05,460
interface an API that they use that they

00:11:03,090 --> 00:11:08,690
used to compose each other I think

00:11:05,460 --> 00:11:08,690
that's fairly straightforward

00:11:08,850 --> 00:11:13,110
the next thing is immutability and so

00:11:11,220 --> 00:11:15,120
immutability is of course the idea that

00:11:13,110 --> 00:11:19,050
things should not be able to be changed

00:11:15,120 --> 00:11:21,030
and the most popular and and very

00:11:19,050 --> 00:11:24,030
appropriate for this conference

00:11:21,030 --> 00:11:27,570
example is version control right with

00:11:24,030 --> 00:11:29,070
things like get we we get the benefits

00:11:27,570 --> 00:11:32,880
of immutability which is sort of the

00:11:29,070 --> 00:11:35,040
idea of atomic you know it's changeable

00:11:32,880 --> 00:11:38,490
with some surgery but these atomic units

00:11:35,040 --> 00:11:41,040
that represent a version and in a

00:11:38,490 --> 00:11:43,800
history behind that and who did you know

00:11:41,040 --> 00:11:46,710
a sort of blame trail and these are only

00:11:43,800 --> 00:11:49,440
possible if you can't just change things

00:11:46,710 --> 00:11:50,820
whenever you want in the middle and so

00:11:49,440 --> 00:11:53,010
immutability is really important to us

00:11:50,820 --> 00:11:54,930
because these concepts are really

00:11:53,010 --> 00:11:56,790
beneficial to other things and a good

00:11:54,930 --> 00:11:59,310
example is infrastructure if you

00:11:56,790 --> 00:12:01,680
consider sort of each stage of your

00:11:59,310 --> 00:12:04,380
infrastructure as an atomic unit that's

00:12:01,680 --> 00:12:06,390
driven by a specific change then you

00:12:04,380 --> 00:12:08,750
could see the history of your

00:12:06,390 --> 00:12:11,520
infrastructure you could see who

00:12:08,750 --> 00:12:14,220
impacted that history when the change

00:12:11,520 --> 00:12:16,920
was created but you could also reason

00:12:14,220 --> 00:12:18,810
about desired states current state and

00:12:16,920 --> 00:12:20,850
sort of how to get between them if you

00:12:18,810 --> 00:12:23,040
know that what you should look like is

00:12:20,850 --> 00:12:24,630
exactly this and not this with these

00:12:23,040 --> 00:12:26,850
little changes it's exactly this and

00:12:24,630 --> 00:12:28,500
you're in this other world view you

00:12:26,850 --> 00:12:33,089
could transition to that and that's

00:12:28,500 --> 00:12:35,160
really important for infrastructure next

00:12:33,089 --> 00:12:38,580
thing the next two are really the idea

00:12:35,160 --> 00:12:42,750
of codification so codification is the

00:12:38,580 --> 00:12:45,180
idea of encoding knowledge as code and

00:12:42,750 --> 00:12:47,670
so with infrastructure historically

00:12:45,180 --> 00:12:50,670
knowledge is passed on via oral

00:12:47,670 --> 00:12:53,339
tradition you join a company in there

00:12:50,670 --> 00:12:55,260
you know assisted min or IT or office or

00:12:53,339 --> 00:12:57,630
whatever group you look at the

00:12:55,260 --> 00:13:00,360
infrastructure and you ask you know why

00:12:57,630 --> 00:13:02,070
are things network this way how does you

00:13:00,360 --> 00:13:04,080
know from from a web user to this

00:13:02,070 --> 00:13:06,300
service how does how do what what

00:13:04,080 --> 00:13:08,460
applications that go through how do

00:13:06,300 --> 00:13:10,830
things work and the most common response

00:13:08,460 --> 00:13:12,210
has historically been oh for that you

00:13:10,830 --> 00:13:13,350
should talk to this person and for this

00:13:12,210 --> 00:13:15,300
you should talk to that person because

00:13:13,350 --> 00:13:18,000
they're the subject matter experts on

00:13:15,300 --> 00:13:21,060
that and the problem with oral tradition

00:13:18,000 --> 00:13:23,550
is is it's slow it's also just thick

00:13:21,060 --> 00:13:26,100
because human memory is fickle and so

00:13:23,550 --> 00:13:30,570
you don't quite get you know the truth

00:13:26,100 --> 00:13:32,610
usually and so we ascribe very heavily

00:13:30,570 --> 00:13:35,700
to the idea that knowledge should be

00:13:32,610 --> 00:13:38,180
represented in code and use that as a

00:13:35,700 --> 00:13:40,830
source of truth so with tools such as

00:13:38,180 --> 00:13:42,720
favorite for example how do you create

00:13:40,830 --> 00:13:45,420
your development environment the answer

00:13:42,720 --> 00:13:48,330
before used to be read this humongously

00:13:45,420 --> 00:13:51,540
large read me and follow this series of

00:13:48,330 --> 00:13:54,150
steps and the answer today can be we

00:13:51,540 --> 00:13:56,040
have this code that is also executable

00:13:54,150 --> 00:13:57,420
like the document and description of

00:13:56,040 --> 00:13:59,670
what does your dev environment is also

00:13:57,420 --> 00:14:02,520
the configuration for the creation of

00:13:59,670 --> 00:14:04,470
that environment and so that is the

00:14:02,520 --> 00:14:07,230
second thing which is automation through

00:14:04,470 --> 00:14:09,840
codification the idea that manual

00:14:07,230 --> 00:14:13,110
processes should be encoded as code and

00:14:09,840 --> 00:14:14,640
automated and this in our industry is

00:14:13,110 --> 00:14:16,380
just necessary and I heard talk

00:14:14,640 --> 00:14:19,800
yesterday talking about just growing

00:14:16,380 --> 00:14:22,020
scale and when you're this this sort of

00:14:19,800 --> 00:14:24,150
scale of infrastructure growth and the

00:14:22,020 --> 00:14:27,390
scale of application change in the data

00:14:24,150 --> 00:14:30,960
center has already exceeded the point of

00:14:27,390 --> 00:14:34,920
human capability and so we need atom a

00:14:30,960 --> 00:14:37,230
Shahnaz a tool to leverage ourselves to

00:14:34,920 --> 00:14:38,850
be able to manage that and if it from

00:14:37,230 --> 00:14:40,560
the talks I saw yesterday you know if

00:14:38,850 --> 00:14:42,510
you imagine a world if you believe in a

00:14:40,560 --> 00:14:44,070
world where there's only gonna be you

00:14:42,510 --> 00:14:46,070
know an order or more orders of

00:14:44,070 --> 00:14:48,090
magnitude more devices whether they're

00:14:46,070 --> 00:14:49,590
whether they're my refrigerator or I

00:14:48,090 --> 00:14:50,730
really don't want my refrigerator to

00:14:49,590 --> 00:14:53,010
ever be connected to the internet but

00:14:50,730 --> 00:14:56,970
whether it's my refrigerator or you know

00:14:53,010 --> 00:14:57,900
a car or a watch or whatever it is this

00:14:56,970 --> 00:14:59,730
is just going to put more and more

00:14:57,900 --> 00:15:01,320
burden and so we're gonna need

00:14:59,730 --> 00:15:04,670
automation to be able to scale these

00:15:01,320 --> 00:15:07,350
processes properly so automation is

00:15:04,670 --> 00:15:08,810
absolutely critical and the vehicle for

00:15:07,350 --> 00:15:11,240
automation that we choose is

00:15:08,810 --> 00:15:13,170
codification which is different than

00:15:11,240 --> 00:15:15,990
simple scripting which is the type of

00:15:13,170 --> 00:15:18,600
code but it's this idea that sort of the

00:15:15,990 --> 00:15:23,370
knowledge and processes is the same

00:15:18,600 --> 00:15:25,080
document that is automated and the next

00:15:23,370 --> 00:15:27,690
thing is the idea of a resilient system

00:15:25,080 --> 00:15:31,560
so we're deploying more and more things

00:15:27,690 --> 00:15:34,620
we're moving more and more to cheaper

00:15:31,560 --> 00:15:36,810
less reliable whether it's hardware or

00:15:34,620 --> 00:15:39,900
heart uh you know infrastructure

00:15:36,810 --> 00:15:42,510
providers and distributed systems

00:15:39,900 --> 00:15:44,280
smaller devices things like that and so

00:15:42,510 --> 00:15:47,010
in building this systems have to be

00:15:44,280 --> 00:15:48,210
resilient we're it's not a matter of you

00:15:47,010 --> 00:15:49,800
know if there's going to be a failure

00:15:48,210 --> 00:15:51,720
it's a matter of when that's always been

00:15:49,800 --> 00:15:54,750
the case but the when happens to just

00:15:51,720 --> 00:15:56,940
happen all the time nowadays and large

00:15:54,750 --> 00:15:59,010
enough infrastructures and so you have

00:15:56,940 --> 00:16:01,560
to consider resiliency and there's

00:15:59,010 --> 00:16:03,420
various approaches to resiliency but the

00:16:01,560 --> 00:16:06,180
approach that we like to take is this

00:16:03,420 --> 00:16:08,370
desired state model it's the idea that

00:16:06,180 --> 00:16:10,380
to build a resilient system the system

00:16:08,370 --> 00:16:13,580
needs to be capable of understanding a

00:16:10,380 --> 00:16:16,080
desired state it needs to be capable of

00:16:13,580 --> 00:16:17,970
determining its current state and it

00:16:16,080 --> 00:16:19,770
needs to be capable of creating a plan

00:16:17,970 --> 00:16:22,230
or a path to get from its current state

00:16:19,770 --> 00:16:24,510
to the desired state and if you consider

00:16:22,230 --> 00:16:26,900
that abstractly that describes leader

00:16:24,510 --> 00:16:29,820
election systems that describes

00:16:26,900 --> 00:16:31,680
infrastructure configuration and desired

00:16:29,820 --> 00:16:34,020
state that describes configuration

00:16:31,680 --> 00:16:35,700
management this is sort of how we build

00:16:34,020 --> 00:16:38,910
resilient systems and if you could build

00:16:35,700 --> 00:16:42,030
this property into your software the

00:16:38,910 --> 00:16:44,070
idea is that they all should strive and

00:16:42,030 --> 00:16:45,960
automate to being in the correct state

00:16:44,070 --> 00:16:48,360
all the time

00:16:45,960 --> 00:16:50,700
and so you can see examples of this with

00:16:48,360 --> 00:16:52,590
Tara form which is Tara when you run

00:16:50,700 --> 00:16:54,300
terraform there's a plan sub command and

00:16:52,590 --> 00:16:56,460
when you run plan what it actually does

00:16:54,300 --> 00:16:59,040
is inspects the current state inspects

00:16:56,460 --> 00:17:01,560
your desired state and shows you what it

00:16:59,040 --> 00:17:03,690
would do to reach that because changing

00:17:01,560 --> 00:17:06,060
infrastructure is scary so it shows you

00:17:03,690 --> 00:17:07,590
that before you could apply it with

00:17:06,060 --> 00:17:10,110
things like consul leader election like

00:17:07,590 --> 00:17:14,270
I said could move to is the desired

00:17:10,110 --> 00:17:17,370
state of having a server a leader and

00:17:14,270 --> 00:17:19,770
then the last element of the Tao which

00:17:17,370 --> 00:17:21,600
is really my favorite but also the one

00:17:19,770 --> 00:17:23,610
that has actually been the most

00:17:21,600 --> 00:17:26,010
challenging for for some people that

00:17:23,610 --> 00:17:27,030
have worked at our company we've

00:17:26,010 --> 00:17:28,620
actually had some people leave the

00:17:27,030 --> 00:17:31,560
company which which have left because

00:17:28,620 --> 00:17:34,950
we're just we're just too pragmatic but

00:17:31,560 --> 00:17:37,500
it is pragmatism and pragmatism is the

00:17:34,950 --> 00:17:40,020
understanding that everything I said

00:17:37,500 --> 00:17:41,850
before is a set of ideals and their

00:17:40,020 --> 00:17:43,800
ideals that we should aspire to and the

00:17:41,850 --> 00:17:46,530
deals that we should fight for and build

00:17:43,800 --> 00:17:48,810
into our tools but if it's just simply

00:17:46,530 --> 00:17:52,010
not the right pragmatics

00:17:48,810 --> 00:17:55,320
then we need to be able to be

00:17:52,010 --> 00:17:57,840
understanding enough to reevaluate those

00:17:55,320 --> 00:18:01,170
ideals for the given problem set at hand

00:17:57,840 --> 00:18:03,840
and so a good example of things like

00:18:01,170 --> 00:18:06,210
this is that not everything we do is

00:18:03,840 --> 00:18:08,190
immutable immutability introduces a

00:18:06,210 --> 00:18:10,940
number of challenges and immutability is

00:18:08,190 --> 00:18:13,380
not always practical and so the biggest

00:18:10,940 --> 00:18:16,400
offender of this is consul is our kv

00:18:13,380 --> 00:18:18,690
store consul doesn't actually have

00:18:16,400 --> 00:18:21,180
versioning sort of built in doesn't have

00:18:18,690 --> 00:18:22,740
this concept of immutable change sets it

00:18:21,180 --> 00:18:24,930
has the idea of transactions and things

00:18:22,740 --> 00:18:27,180
like that but but to some people that's

00:18:24,930 --> 00:18:28,710
not enough and so they'll reference our

00:18:27,180 --> 00:18:30,260
Tao and say you know you're you're

00:18:28,710 --> 00:18:33,210
violating this principle that you had

00:18:30,260 --> 00:18:34,830
which is fair but at the same time it's

00:18:33,210 --> 00:18:37,760
it's a practical it was a pragmatic

00:18:34,830 --> 00:18:40,350
decision at the time and we certainly

00:18:37,760 --> 00:18:42,600
you know got built features around that

00:18:40,350 --> 00:18:45,720
more and more as time has gone on now so

00:18:42,600 --> 00:18:48,300
pragmatism is absolutely important when

00:18:45,720 --> 00:18:51,570
building these building against ideals

00:18:48,300 --> 00:18:54,360
and so that is really the Tao of pascha

00:18:51,570 --> 00:18:56,970
corp and and I hope that if you've used

00:18:54,360 --> 00:18:59,670
our software you could see it every day

00:18:56,970 --> 00:19:01,050
and where you're using all the tech

00:18:59,670 --> 00:19:03,840
leads or projects all the engineers of

00:19:01,050 --> 00:19:07,410
our projects continually sort of apply

00:19:03,840 --> 00:19:09,780
this on ayane RFC by RFC basis when new

00:19:07,410 --> 00:19:11,820
features are being developed but this is

00:19:09,780 --> 00:19:13,500
also the principles that we use when

00:19:11,820 --> 00:19:15,360
evaluating software that we don't write

00:19:13,500 --> 00:19:17,550
when there's five different choices out

00:19:15,360 --> 00:19:21,060
there we tend to choose the choices that

00:19:17,550 --> 00:19:22,650
align closest to our ideals and by

00:19:21,060 --> 00:19:23,640
having them written down and having them

00:19:22,650 --> 00:19:26,100
clear

00:19:23,640 --> 00:19:29,490
you know our opinion isn't isn't

00:19:26,100 --> 00:19:31,710
changing and isn't isn't just what's

00:19:29,490 --> 00:19:34,260
best for the moment it's actually really

00:19:31,710 --> 00:19:36,090
clear of what we care about and what

00:19:34,260 --> 00:19:37,230
we're looking for so I hope this helps

00:19:36,090 --> 00:19:42,920
thank you

00:19:37,230 --> 00:19:42,920

YouTube URL: https://www.youtube.com/watch?v=YZXngLn5UJk


