Title: SD eMMC: New Speed Modes and Their Support in Linux - Gregory Clement, Free Electrons
Publication date: 2017-10-24
Playlist: Open Source Summit Europe & Embedded Linux Conference Europe 2017
Description: 
	SD/eMMC: New Speed Modes and Their Support in Linux - Gregory Clement, Free Electrons

Since the introduction of the original "default"(DS) and "high speed"(HS) modes, the SD card standard has evolved by introducing new speed modes, such as SDR12, SDR25, SDR50, SDR104, etc. The same happened to the eMMC standard, with the introduction of new high speed modes named DDR52, HS200, HS400, etc. The Linux kernel has obviously evolved to support these new speed modes, both in the MMC core and through the addition of new drivers.

This talk will start by introducing the SD and eMMC standards and how they work at the hardware level, with a specific focus on the new speed modes. With this hardware background in place, we will then detail how these standards are supported by Linux, see what is still missing, and what we can expect to see in the future.

About Gregory Clement
Gregory Clement is an embedded Linux engineer and trainer at Free Electrons since 2010. He has 17 years of on the field experience in porting and operating embedded Linux on many hardware architectures. He is currently involved in the integration of Marvell Armada SoCs (both ARM 32 and 64 bit versions) in the mainline Linux kernel, acting as co-maintainer for this mvebu ARM sub-architecture. As part of this port he recently worked on pushing in mainline an SD/eMMC controller supporting these ""new"" high speed modes.
Captions: 
	00:00:00,030 --> 00:00:05,250
okay so normally we should start in five

00:00:02,639 --> 00:00:08,720
minute but I think everyone is here so

00:00:05,250 --> 00:00:08,720
we can start now

00:00:08,929 --> 00:00:17,100
so hello I'm Rick Hammond and I will

00:00:12,630 --> 00:00:20,130
talk about SD in a MMC card and

00:00:17,100 --> 00:00:25,410
especially about they are on a new spin

00:00:20,130 --> 00:00:28,439
mode so we have some rock at

00:00:25,410 --> 00:00:32,700
free-electron made several development

00:00:28,439 --> 00:00:35,730
on armada base broad and recently our

00:00:32,700 --> 00:00:38,100
work on adding support from a new

00:00:35,730 --> 00:00:42,620
controller which support all these new

00:00:38,100 --> 00:00:46,410
mode and that's why I work on this talk

00:00:42,620 --> 00:00:49,649
first quick presentation of what our SD

00:00:46,410 --> 00:00:54,989
card and enn see there are common point

00:00:49,649 --> 00:01:00,870
they both came from MMC multimedia card

00:00:54,989 --> 00:01:06,299
and they interface their bond rise as

00:01:00,870 --> 00:01:10,170
new razÃ³n out and are come and now they

00:01:06,299 --> 00:01:11,909
can reach more than 400 megabytes but I

00:01:10,170 --> 00:01:14,760
still learned injury of course it

00:01:11,909 --> 00:01:15,960
depends of the of the hardware but for

00:01:14,760 --> 00:01:21,479
the point of view of the protocol you

00:01:15,960 --> 00:01:26,729
can reach this disappear and the both of

00:01:21,479 --> 00:01:33,540
these of the chip are super did in Linux

00:01:26,729 --> 00:01:36,689
in the MMC subsystem so what we are

00:01:33,540 --> 00:01:40,170
going to see is first is presentation of

00:01:36,689 --> 00:01:42,180
the SD card and he NFC and where I come

00:01:40,170 --> 00:01:45,950
from and there are common points are

00:01:42,180 --> 00:01:49,470
difference then we are going to see the

00:01:45,950 --> 00:01:54,210
initial support in Linux so how it come

00:01:49,470 --> 00:01:58,229
in Linux and after this we are going to

00:01:54,210 --> 00:02:03,030
see the spin a new spin mode in

00:01:58,229 --> 00:02:06,509
in both version of the of scan MMC card

00:02:03,030 --> 00:02:08,369
and SD card MMC and SD card and then

00:02:06,509 --> 00:02:11,870
finally we are going to see the state of

00:02:08,369 --> 00:02:19,819
the support for this new spin mode in

00:02:11,870 --> 00:02:19,819
internal loop scanner so the SD card

00:02:20,690 --> 00:02:27,690
stands for secure digital but secure in

00:02:25,290 --> 00:02:30,390
the sense of the computer copyright code

00:02:27,690 --> 00:02:33,030
and it's not secure as a secure boot for

00:02:30,390 --> 00:02:37,799
example it's more than the idea I think

00:02:33,030 --> 00:02:41,310
was true blowing to provide SD card with

00:02:37,799 --> 00:02:43,730
movies on a tour

00:02:41,310 --> 00:02:48,470
music something like that and but

00:02:43,730 --> 00:02:51,660
projected by erm like you find in DVD

00:02:48,470 --> 00:02:55,230
from my point of view had never seen

00:02:51,660 --> 00:03:00,060
this kind of SD card that was the first

00:02:55,230 --> 00:03:07,549
idea to create this this news system it

00:03:00,060 --> 00:03:13,850
was introduced in 1899 and it's based on

00:03:07,549 --> 00:03:18,269
MMC protocol cannot extension of it and

00:03:13,850 --> 00:03:21,989
it's standardized by the SD Association

00:03:18,269 --> 00:03:24,000
which was creating actually after as a

00:03:21,989 --> 00:03:29,220
first version of the of the protocol in

00:03:24,000 --> 00:03:33,440
2000 at the very beginning the event of

00:03:29,220 --> 00:03:39,560
the protocol are completely closed them

00:03:33,440 --> 00:03:43,139
if you are not a member of the SGA but

00:03:39,560 --> 00:03:47,609
pretty quickly even the member of the

00:03:43,139 --> 00:03:52,280
SGA provide the part of the of the

00:03:47,609 --> 00:03:55,470
protocol and now you can officially have

00:03:52,280 --> 00:03:59,310
justification the assembly specification

00:03:55,470 --> 00:04:02,220
but which is enough to support most of

00:03:59,310 --> 00:04:05,700
the mode there is the only the six-year

00:04:02,220 --> 00:04:07,730
part which is you can't access and also

00:04:05,700 --> 00:04:11,090
some

00:04:07,730 --> 00:04:14,720
application not the talk but for if you

00:04:11,090 --> 00:04:20,180
want to create a driver you have enough

00:04:14,720 --> 00:04:24,560
documentation so what is the SD card

00:04:20,180 --> 00:04:28,810
itself but it's a flash chip with a

00:04:24,560 --> 00:04:32,090
small controller embed in inner charter

00:04:28,810 --> 00:04:34,970
at the very beginning in this flash chip

00:04:32,090 --> 00:04:37,100
it was not non flash it was more nor

00:04:34,970 --> 00:04:41,780
flash and now I'm pretty sure that is

00:04:37,100 --> 00:04:45,889
only non flash embedded on it and it you

00:04:41,780 --> 00:04:50,000
find nine pins so the cloak the common

00:04:45,889 --> 00:04:55,639
line the four that align and then line

00:04:50,000 --> 00:05:00,340
for power and ground you have a spi

00:04:55,639 --> 00:05:04,190
compatibility mode so in this mode the

00:05:00,340 --> 00:05:08,740
usage of the pin are modified so so did

00:05:04,190 --> 00:05:11,750
date three become the chip select the

00:05:08,740 --> 00:05:16,760
camera line becomes the data in and that

00:05:11,750 --> 00:05:20,660
zero become data out and in initialize

00:05:16,760 --> 00:05:24,729
are released it was a the clock was

00:05:20,660 --> 00:05:31,789
limited to 25 megahertz exactly like the

00:05:24,729 --> 00:05:35,090
first release of the MNC spec the SD bus

00:05:31,789 --> 00:05:38,030
protocol itself is a command in that a

00:05:35,090 --> 00:05:43,600
bit stream so you have a stop beat and

00:05:38,030 --> 00:05:46,610
an n-bit you have the command and

00:05:43,600 --> 00:05:50,000
response of the command on the command

00:05:46,610 --> 00:05:55,580
line and the data associate to this

00:05:50,000 --> 00:05:58,490
command on the data lines so even if you

00:05:55,580 --> 00:06:04,340
can have multiple data lines the Kerman

00:05:58,490 --> 00:06:07,250
are always on a single line you the

00:06:04,340 --> 00:06:11,539
principle is a basic transaction with

00:06:07,250 --> 00:06:14,690
command and response and you can have

00:06:11,539 --> 00:06:18,830
some operation which have data token but

00:06:14,690 --> 00:06:21,439
not not all of them and all the

00:06:18,830 --> 00:06:23,479
communication are initiated by a host

00:06:21,439 --> 00:06:30,909
which is ready the hosts who take care

00:06:23,479 --> 00:06:36,080
of which always at any any exchange and

00:06:30,909 --> 00:06:40,149
also the data transfer are in block with

00:06:36,080 --> 00:06:44,749
some CRC the last thing that you can

00:06:40,149 --> 00:06:50,769
have multiple data blocks in this case

00:06:44,749 --> 00:06:56,029
it's also the host which explicitly stop

00:06:50,769 --> 00:07:00,259
the the number of data blocks so you

00:06:56,029 --> 00:07:02,929
have a you initiate that data transfer

00:07:00,259 --> 00:07:05,419
and then at the point you have on the

00:07:02,929 --> 00:07:08,659
command line a specific command to set

00:07:05,419 --> 00:07:15,559
to the car to stop to send data or

00:07:08,659 --> 00:07:19,729
receive data so there is few difference

00:07:15,559 --> 00:07:22,309
between SDK daeun MMC even at the

00:07:19,729 --> 00:07:25,459
beginning so in the initial version of

00:07:22,309 --> 00:07:29,360
the MMC you can use only one line

00:07:25,459 --> 00:07:31,699
whereas since the beginning on SD card

00:07:29,360 --> 00:07:36,949
you can use a four line that was it for

00:07:31,699 --> 00:07:40,479
the data but now nowadays the MMC there

00:07:36,949 --> 00:07:41,959
is some care like NC e blues MMC

00:07:40,479 --> 00:07:46,309
something like that

00:07:41,959 --> 00:07:50,409
can go to eight data lines there is no

00:07:46,309 --> 00:07:53,559
grm so no secure part in the MMC and

00:07:50,409 --> 00:07:56,409
also now the command set a diva

00:07:53,559 --> 00:07:59,979
maybe something at Dillard mentions is a

00:07:56,409 --> 00:08:04,269
on top of the more common and so

00:07:59,979 --> 00:08:07,519
something like that there is an all the

00:08:04,269 --> 00:08:11,239
command set stand by the host I

00:08:07,519 --> 00:08:13,729
specified in the documentation and all

00:08:11,239 --> 00:08:16,039
this command have a special meaning we

00:08:13,729 --> 00:08:18,169
are going to see for example the command

00:08:16,039 --> 00:08:19,759
6 which we will use when you want to

00:08:18,169 --> 00:08:23,119
switch from mode to another mode you

00:08:19,759 --> 00:08:27,979
have summed some comma to change the

00:08:23,119 --> 00:08:30,199
voltage command to ask from IgE to the

00:08:27,979 --> 00:08:31,759
car and so on so at the beginning of

00:08:30,199 --> 00:08:33,889
course they have the same set of command

00:08:31,759 --> 00:08:35,509
but then when sdcard

00:08:33,889 --> 00:08:37,699
hence they add their own set of the

00:08:35,509 --> 00:08:39,949
command for example at the very

00:08:37,699 --> 00:08:44,179
beginning the specific command for the

00:08:39,949 --> 00:08:48,109
secure part and emmc when it evolved

00:08:44,179 --> 00:08:51,019
will also another set of commands so you

00:08:48,109 --> 00:08:53,540
can have a different command number

00:08:51,019 --> 00:08:55,730
which at the end oomori the same thing

00:08:53,540 --> 00:08:58,519
but the diverged from from this point

00:08:55,730 --> 00:09:02,179
and especially we are going to see it

00:08:58,519 --> 00:09:04,699
with I think it was for the for the

00:09:02,179 --> 00:09:06,859
tuning they do the more the same thing

00:09:04,699 --> 00:09:11,299
but with a command it's Frank command

00:09:06,859 --> 00:09:14,509
number and also a comment part with MMC

00:09:11,299 --> 00:09:19,369
and SD cards as they both have the SP

00:09:14,509 --> 00:09:23,829
equitability mode because actually this

00:09:19,369 --> 00:09:23,829
compatibility mode came also from MMC

00:09:24,879 --> 00:09:31,699
just another thing about a SP spi

00:09:28,279 --> 00:09:34,609
compatibility mode is that it DIF it's

00:09:31,699 --> 00:09:37,790
not only the wire which are different is

00:09:34,609 --> 00:09:42,739
as I said the algebra C is a bit stream

00:09:37,790 --> 00:09:45,410
mode whereas SPI is a byte oriented so

00:09:42,739 --> 00:09:49,489
it's been something on the way you pass

00:09:45,410 --> 00:09:52,850
the data of course at the upper level so

00:09:49,489 --> 00:09:54,709
the common are the same the meaning of

00:09:52,850 --> 00:09:56,660
the common are the same but the way your

00:09:54,709 --> 00:10:05,389
you pass as you command it is different

00:09:56,660 --> 00:10:10,220
now we are going to the emmc so emmc

00:10:05,389 --> 00:10:13,879
is a mm 16 shell standard that told lies

00:10:10,220 --> 00:10:17,869
by the MMC association but also by the

00:10:13,879 --> 00:10:22,970
GTECH BG jake is more about solid-state

00:10:17,869 --> 00:10:24,889
storage and as emmc is a immediate mm

00:10:22,970 --> 00:10:28,579
see so it's solid layer on the board

00:10:24,889 --> 00:10:31,629
then because I joined their effort to

00:10:28,579 --> 00:10:31,629
standardize this

00:10:32,000 --> 00:10:42,189
this protocol and now all the new

00:10:36,529 --> 00:10:42,189
specification are published by the GDK

00:10:42,259 --> 00:10:48,490
so as I say mm system for embedded with

00:10:44,689 --> 00:10:53,540
Mira card and the first mention of the

00:10:48,490 --> 00:10:58,250
MMC in the MMC spec was in the spec 4.1

00:10:53,540 --> 00:11:00,290
in 2007 but what not to adjust we have a

00:10:58,250 --> 00:11:03,769
few lot about it but not really a

00:11:00,290 --> 00:11:08,029
specific feature with it it's later that

00:11:03,769 --> 00:11:11,930
we are going to see this so how it is is

00:11:08,029 --> 00:11:15,319
also a flat shape who is also a small

00:11:11,930 --> 00:11:19,430
controller on it but this time it in the

00:11:15,319 --> 00:11:23,600
BGA chip and the pin out of the BGA is

00:11:19,430 --> 00:11:29,509
also standardized and among them you

00:11:23,600 --> 00:11:32,839
have 14 important pins so the clock the

00:11:29,509 --> 00:11:38,800
command line then you have eight data

00:11:32,839 --> 00:11:38,800
lines and you have also to kind of

00:11:39,009 --> 00:11:48,949
voltage line for one for the tip and the

00:11:46,759 --> 00:11:50,990
flash itself and another which will be

00:11:48,949 --> 00:11:55,220
used by the signal we are going to say

00:11:50,990 --> 00:11:59,449
that to achieve height aright we were

00:11:55,220 --> 00:12:02,509
going to use a smaller voltage and so it

00:11:59,449 --> 00:12:07,579
is provided by this one then with the

00:12:02,509 --> 00:12:11,180
version 4.4 one more point 9 pin we was

00:12:07,579 --> 00:12:14,120
a idea it was the reset one as well and

00:12:11,180 --> 00:12:19,339
where is it at directly on the MMC and

00:12:14,120 --> 00:12:22,639
then with version 5.0 that strobe line

00:12:19,339 --> 00:12:25,279
and this one will be used for high speed

00:12:22,639 --> 00:12:30,529
and we are going to see it later

00:12:25,279 --> 00:12:36,230
some seem to to say that for enm see

00:12:30,529 --> 00:12:41,680
signs 4.3 the SP spi a capital in mod

00:12:36,230 --> 00:12:44,290
was removed so normal the norm

00:12:41,680 --> 00:12:48,339
the NMC are normally expected to answer

00:12:44,290 --> 00:12:51,910
to the SPI command

00:12:48,339 --> 00:12:55,420
whereas further for the SD card we still

00:12:51,910 --> 00:12:59,980
have the SPI mod compatibility ever now

00:12:55,420 --> 00:13:02,199
but with a restriction is that the SPI

00:12:59,980 --> 00:13:04,899
mode you can only under the command

00:13:02,199 --> 00:13:07,269
until the version 2 of the SD card or

00:13:04,899 --> 00:13:09,550
the newer command are not supported so

00:13:07,269 --> 00:13:14,529
you can send this command but jazz going

00:13:09,550 --> 00:13:18,069
just to be ignore but not not used and

00:13:14,529 --> 00:13:23,249
in the initial realize the the clock of

00:13:18,069 --> 00:13:27,670
the bus was 52 McGarrett

00:13:23,249 --> 00:13:33,149
so the protocol actually is as both came

00:13:27,670 --> 00:13:38,470
from NFC the protocol was is the same -

00:13:33,149 --> 00:13:41,379
with also common in response on a single

00:13:38,470 --> 00:13:46,120
lines and we have dedicated data lines

00:13:41,379 --> 00:13:49,569
so but here you can good up to 8 that

00:13:46,120 --> 00:13:49,929
data lines but everything else is the

00:13:49,569 --> 00:13:53,139
same

00:13:49,929 --> 00:13:56,170
and of course as I said the difference

00:13:53,139 --> 00:13:59,199
will be in upper layer in the command

00:13:56,170 --> 00:14:08,980
support sheet and which are different

00:13:59,199 --> 00:14:12,970
between SD card and MMC so the as MMC is

00:14:08,980 --> 00:14:15,189
morally MMC's Marez just MMC solid in

00:14:12,970 --> 00:14:18,129
the world they're pretty the same but

00:14:15,189 --> 00:14:20,529
there are few difference the first one

00:14:18,129 --> 00:14:23,790
is the fact that it's a dolt remember

00:14:20,529 --> 00:14:28,649
ball but then there are some additional

00:14:23,790 --> 00:14:31,209
in the en MC satellite or partitioning

00:14:28,649 --> 00:14:34,149
device information you can have directly

00:14:31,209 --> 00:14:36,910
from the MMC like you can have

00:14:34,149 --> 00:14:39,220
information about the geometry of the

00:14:36,910 --> 00:14:41,020
flash inside the MMC so something more

00:14:39,220 --> 00:14:45,730
advanced that

00:14:41,020 --> 00:14:48,670
for the NMC another thing is that now

00:14:45,730 --> 00:14:53,680
it's really are or maybe not possible to

00:14:48,670 --> 00:14:57,700
find MMC can i think the normal normal

00:14:53,680 --> 00:15:01,960
used so it's really ready the emmc that

00:14:57,700 --> 00:15:06,820
now the MMC protocol already derived by

00:15:01,960 --> 00:15:09,730
the MMC itself even if if you read the

00:15:06,820 --> 00:15:14,070
last spec specification still mentions

00:15:09,730 --> 00:15:21,670
MMC card and MC Bruce but I didn't see

00:15:14,070 --> 00:15:28,510
any controller supports them so we we

00:15:21,670 --> 00:15:30,400
had seen them the MMC and SD card and

00:15:28,510 --> 00:15:34,590
where they come from and now we are

00:15:30,400 --> 00:15:41,890
going to see how the worst part in Linux

00:15:34,590 --> 00:15:46,810
so the framework was hided in 2004

00:15:41,890 --> 00:15:51,130
so before get in 2.69 by a virus working

00:15:46,810 --> 00:15:54,190
we in the initial community said is a t

00:15:51,130 --> 00:15:57,010
it take some inspiration by the under

00:15:54,190 --> 00:16:00,130
the under the dot org project which

00:15:57,010 --> 00:16:04,170
wanted to put Linux on PDA but just

00:16:00,130 --> 00:16:08,650
inspired it but we righted from scratch

00:16:04,170 --> 00:16:14,080
then later the SD CAPTCHA prod was I did

00:16:08,650 --> 00:16:18,970
in 2005 in 2.6 14 by prayer Osman oh I

00:16:14,080 --> 00:16:22,120
made it a point to s first man who

00:16:18,970 --> 00:16:23,740
became maintainer in 2006 which is

00:16:22,120 --> 00:16:28,090
interesting which is first commit that

00:16:23,740 --> 00:16:30,970
he said that SDI is the SD specification

00:16:28,090 --> 00:16:35,350
is supposed to be closed but even

00:16:30,970 --> 00:16:42,400
SanDisk provides a specification so I

00:16:35,350 --> 00:16:45,850
think the idea about it is a novia novia

00:16:42,400 --> 00:16:47,800
you know value and so it's taught to

00:16:45,850 --> 00:16:50,290
implement on base based on the on the

00:16:47,800 --> 00:16:53,680
specification and then later

00:16:50,290 --> 00:16:58,630
it really became really officially

00:16:53,680 --> 00:17:06,100
accessible from the ACI for the SDS

00:16:58,630 --> 00:17:08,410
tradition in 2006 with 2.6 that 17

00:17:06,100 --> 00:17:11,110
channel there was the support for the

00:17:08,410 --> 00:17:15,460
secure digital OS control and controller

00:17:11,110 --> 00:17:19,570
interface so it's standardization of

00:17:15,460 --> 00:17:22,930
controller and its if you want to

00:17:19,570 --> 00:17:26,800
support SD card you don't have to use

00:17:22,930 --> 00:17:29,440
them but most of the controller are

00:17:26,800 --> 00:17:33,490
based on this on this one the center of

00:17:29,440 --> 00:17:37,030
us and if you have a look on the code

00:17:33,490 --> 00:17:38,370
alfe of the drawer are based on on this

00:17:37,030 --> 00:17:43,360
one

00:17:38,370 --> 00:17:49,060
the I spin mode support for a means MMC

00:17:43,360 --> 00:17:51,130
was I did in 2.6 20 and in the same

00:17:49,060 --> 00:17:55,800
release the I spin mode support for the

00:17:51,130 --> 00:18:02,770
SD card was 82 and the SDIO extinction

00:17:55,800 --> 00:18:09,390
was I did in 2007 so lazy i/o I did not

00:18:02,770 --> 00:18:12,430
mention it it was a to use now so the

00:18:09,390 --> 00:18:16,060
your you find the most is using as a

00:18:12,430 --> 00:18:20,320
Wi-Fi Wi-Fi card but it was you have

00:18:16,060 --> 00:18:28,480
also a serial card and GPS was most

00:18:20,320 --> 00:18:31,420
common and you use in SDIO so the code

00:18:28,480 --> 00:18:35,110
is a located in railroads MMC and the

00:18:31,420 --> 00:18:36,910
header in include linux MMC it's

00:18:35,110 --> 00:18:41,260
currently maintained now by the by a

00:18:36,910 --> 00:18:44,800
health concern and the code in separate

00:18:41,260 --> 00:18:47,380
into part so we have the core part where

00:18:44,800 --> 00:18:51,480
you have the quote protocol and a common

00:18:47,380 --> 00:18:54,820
function between a MMC and SD card and

00:18:51,480 --> 00:18:56,230
you have the host directory where you

00:18:54,820 --> 00:18:57,770
have this report for all the controller

00:18:56,230 --> 00:19:01,210
and

00:18:57,770 --> 00:19:03,140
and among them you have the SHC

00:19:01,210 --> 00:19:08,750
controller which are maintained by

00:19:03,140 --> 00:19:13,429
adriana hunter yes there is also the SP

00:19:08,750 --> 00:19:16,850
SP i mod which is a supported in MMC spi

00:19:13,429 --> 00:19:18,890
dot c but currently there is no no

00:19:16,850 --> 00:19:28,760
maintainer fry it but I wonder if there

00:19:18,890 --> 00:19:31,550
is still you could come in here so now

00:19:28,760 --> 00:19:33,640
we are going to focus on the spin mode

00:19:31,550 --> 00:19:37,580
improvement so the first one was a

00:19:33,640 --> 00:19:43,280
pretty whole now it was the high spin

00:19:37,580 --> 00:19:49,070
mode it's mainly passing from 26 minutes

00:19:43,280 --> 00:19:57,440
to 52 for MMC and past for 25 minutes to

00:19:49,070 --> 00:20:02,000
54 SDK but which is bring is the usage

00:19:57,440 --> 00:20:04,160
of the command 6 so to switch the word

00:20:02,000 --> 00:20:08,510
this command was there from the

00:20:04,160 --> 00:20:10,640
beginning of the of the specification

00:20:08,510 --> 00:20:13,850
but now it is really used to do

00:20:10,640 --> 00:20:16,610
something and so what she introduced is

00:20:13,850 --> 00:20:17,090
the way to switch for a motor in user

00:20:16,610 --> 00:20:20,120
mode

00:20:17,090 --> 00:20:22,970
so typically and what we always find is

00:20:20,120 --> 00:20:25,990
of course you start by default on the

00:20:22,970 --> 00:20:28,970
lower mode and then you read the

00:20:25,990 --> 00:20:31,070
capability of the car you compare this

00:20:28,970 --> 00:20:34,940
capability to the capability of the host

00:20:31,070 --> 00:20:37,250
and then depending of the both the best

00:20:34,940 --> 00:20:41,750
capability you can have you use the

00:20:37,250 --> 00:20:44,990
current six to request the car troop to

00:20:41,750 --> 00:20:50,300
2 or it from for this one to catch that

00:20:44,990 --> 00:20:52,880
you are going to switch to a new mode so

00:20:50,300 --> 00:20:56,210
it was introduced in the virtue of the

00:20:52,880 --> 00:21:04,030
SG a specification and the v4 on the MMC

00:20:56,210 --> 00:21:06,530
specification then in 2010 with the SD

00:21:04,030 --> 00:21:09,770
3.0 one

00:21:06,530 --> 00:21:11,720
he'll trust speed yes it was ultra

00:21:09,770 --> 00:21:14,510
high-speed mode which were which were

00:21:11,720 --> 00:21:21,140
introduced with a several new new mode

00:21:14,510 --> 00:21:25,789
so sg-12 SDR 25 as the 15 and so on so

00:21:21,140 --> 00:21:28,520
all the name of this mode are based on

00:21:25,789 --> 00:21:35,840
the maximum bunch drive you can achieve

00:21:28,520 --> 00:21:43,070
with this mode so it's another thing is

00:21:35,840 --> 00:21:46,669
that this if you compare the SDH 12 and

00:21:43,070 --> 00:21:48,710
SDR 25 is actually exactly the same

00:21:46,669 --> 00:21:53,169
boundaries that you can achieve in

00:21:48,710 --> 00:21:58,039
default speed so at 25 megahertz with 4

00:21:53,169 --> 00:22:00,919
4 byte you have 12 megabytes per second

00:21:58,039 --> 00:22:05,450
and so the main difference for this 2

00:22:00,919 --> 00:22:10,159
mod is the fact that your your signal

00:22:05,450 --> 00:22:13,130
are under 1.8 volts instead of 3 volts

00:22:10,159 --> 00:22:17,750
so the main difference is just here but

00:22:13,130 --> 00:22:21,169
it's allow you to either both consume

00:22:17,750 --> 00:22:24,679
less but also your signal are more

00:22:21,169 --> 00:22:28,340
stable because if you have a big range

00:22:24,679 --> 00:22:32,200
of voltage then you have some time to go

00:22:28,340 --> 00:22:35,240
to a table at a lower voltage so we can

00:22:32,200 --> 00:22:38,090
have more stable things but at the

00:22:35,240 --> 00:22:43,100
opposite it's also you need also to have

00:22:38,090 --> 00:22:44,900
a controller who can must be more

00:22:43,100 --> 00:22:47,870
sensible because you have to make the

00:22:44,900 --> 00:22:51,350
big difference between 0 and 1.8

00:22:47,870 --> 00:22:54,039
instead of 0 in 3 3

00:22:51,350 --> 00:22:54,039
buzzer

00:22:54,360 --> 00:23:04,250
so for this new mod for the USS as this

00:22:59,420 --> 00:23:07,860
1.8 volt is mandatory and so this

00:23:04,250 --> 00:23:13,010
introduced a new step in the comments

00:23:07,860 --> 00:23:15,960
which swagger sequence so now you still

00:23:13,010 --> 00:23:19,110
look for the capability of the car of

00:23:15,960 --> 00:23:21,270
the host and then you try to switch to

00:23:19,110 --> 00:23:25,410
the first switch command you send is to

00:23:21,270 --> 00:23:28,230
change the voltage and if it works then

00:23:25,410 --> 00:23:31,440
you can try a new speed if you can't

00:23:28,230 --> 00:23:34,110
switch to a new do voltage then you

00:23:31,440 --> 00:23:41,930
won't be able to use a UHS mode so it's

00:23:34,110 --> 00:23:48,320
mandatory to to use a 1.8 fault yes more

00:23:41,930 --> 00:23:52,110
data budget so as is but not for clear

00:23:48,320 --> 00:23:55,410
so as your 12 is at 25 megawatts and

00:23:52,110 --> 00:23:58,980
it's because you have 4 lines with the

00:23:55,410 --> 00:24:06,950
same problem the most interest is one

00:23:58,980 --> 00:24:06,950
are the last two one so in SDA 104 then

00:24:07,310 --> 00:24:14,340
actually though I was wrong since I

00:24:10,230 --> 00:24:18,690
think that that is 108 for mega art or

00:24:14,340 --> 00:24:24,450
so and for this one as you greater than

00:24:18,690 --> 00:24:30,590
100 megahertz you also need to do speed

00:24:24,450 --> 00:24:35,070
tuning it is done with command

00:24:30,590 --> 00:24:37,920
18 so what it is is this as the main

00:24:35,070 --> 00:24:42,180
program is the clock always came from

00:24:37,920 --> 00:24:44,550
the host but when you read that app you

00:24:42,180 --> 00:24:48,990
send your clock but there is

00:24:44,550 --> 00:24:52,160
a way back to to the card and then it

00:24:48,990 --> 00:24:55,940
returned to you and so you can have a

00:24:52,160 --> 00:24:59,760
little difference between the clock

00:24:55,940 --> 00:25:02,220
scene by the card and the clock generate

00:24:59,760 --> 00:25:06,120
by your host and to be sure that you're

00:25:02,220 --> 00:25:08,970
exactly on the same clock then you have

00:25:06,120 --> 00:25:12,300
in this command you just send a known

00:25:08,970 --> 00:25:14,820
pattern so you ask to actually you ask

00:25:12,300 --> 00:25:17,190
to the card to send you a known pattern

00:25:14,820 --> 00:25:21,900
and then knowing this pattern you can

00:25:17,190 --> 00:25:26,430
tune is a finely tuned your host to

00:25:21,900 --> 00:25:29,700
exactly know when you have to sample the

00:25:26,430 --> 00:25:36,990
data so this tuning mode is also

00:25:29,700 --> 00:25:39,330
available for SGA are 50 and DDR 50 but

00:25:36,990 --> 00:25:43,590
for this one is total data rate whereas

00:25:39,330 --> 00:25:50,520
for a year 104 is new data rich web this

00:25:43,590 --> 00:25:54,810
is tuning state India 50 your 0 clock

00:25:50,520 --> 00:25:58,950
run at 50 minute but the in this mode

00:25:54,810 --> 00:26:01,680
the data sample some the data are

00:25:58,950 --> 00:26:13,020
sampled on each front of the clock so in

00:26:01,680 --> 00:26:17,630
the rising front and lower front then is

00:26:13,020 --> 00:26:25,140
not needed just before in MMC with MMC

00:26:17,630 --> 00:26:30,900
4.4 veg version in 2009 there was a DDR

00:26:25,140 --> 00:26:34,560
support for the MMC and MMC so we are

00:26:30,900 --> 00:26:39,320
still at 52 McGirt like the high speed

00:26:34,560 --> 00:26:43,809
mode but the main difference is we have

00:26:39,320 --> 00:26:48,139
double right

00:26:43,809 --> 00:26:54,950
double data rate it spotted here so we

00:26:48,139 --> 00:26:58,340
sample at front and the opposite the

00:26:54,950 --> 00:27:00,379
difference between the SD card is we

00:26:58,340 --> 00:27:04,419
still use the switch command but with

00:27:00,379 --> 00:27:08,330
not with the same the same arguments for

00:27:04,419 --> 00:27:12,769
SD card is really a different speed mode

00:27:08,330 --> 00:27:17,239
so you have the the GTR 50 mode whereas

00:27:12,769 --> 00:27:21,200
from MMC is not a different mode is the

00:27:17,239 --> 00:27:25,549
white of the of the boot which is

00:27:21,200 --> 00:27:28,369
different so we said that we are in for

00:27:25,549 --> 00:27:30,859
bite or a bite but on double rate so at

00:27:28,369 --> 00:27:33,159
the end it's the same information but

00:27:30,859 --> 00:27:39,559
stand in a different way

00:27:33,159 --> 00:27:43,570
another change is that unlike the LD can

00:27:39,559 --> 00:27:47,480
you can still use the double rate

00:27:43,570 --> 00:27:54,200
artistry world you it's not monetary to

00:27:47,480 --> 00:28:07,489
switch to a 1.8 volt to use this mode in

00:27:54,200 --> 00:28:13,789
with MMC 4.5 in true in 211 with assets

00:28:07,489 --> 00:28:17,320
hji speed 200 was introduced so it's

00:28:13,789 --> 00:28:21,499
just a matter or going faster so 2

00:28:17,320 --> 00:28:24,649
instead of 50 to Omega s then we can go

00:28:21,499 --> 00:28:29,570
up to true Android make ads which still

00:28:24,649 --> 00:28:34,369
a single adder right but here we have

00:28:29,570 --> 00:28:37,659
also the tuning common the same is the

00:28:34,369 --> 00:28:44,590
same kind of commands that are used for

00:28:37,659 --> 00:28:50,090
SDR 104 but this this time for MMC is a

00:28:44,590 --> 00:28:53,679
command 21 alright what command 19 but

00:28:50,090 --> 00:28:56,309
exactly to say the same ID I so you

00:28:53,679 --> 00:29:00,369
requested

00:28:56,309 --> 00:29:04,539
the emmc to send you a known pattern and

00:29:00,369 --> 00:29:10,479
then you adjust your Yost with this

00:29:04,539 --> 00:29:16,299
pattern this one now must be used at 1.8

00:29:10,479 --> 00:29:30,749
volt or one dot two volt to be able to

00:29:16,299 --> 00:29:35,409
use and with MC 5.0 was in 2013 the HS

00:29:30,749 --> 00:29:40,839
4400 was introduced so it's just keep

00:29:35,409 --> 00:29:46,059
the same clock speed that ichs 200 but

00:29:40,839 --> 00:29:53,379
now we use the double data right so the

00:29:46,059 --> 00:29:56,259
two front of the clock for this we a new

00:29:53,379 --> 00:30:00,969
signal was introduced the data strobe

00:29:56,259 --> 00:30:04,719
with so the the data store is here to

00:30:00,969 --> 00:30:07,629
help to the host to be sure that you the

00:30:04,719 --> 00:30:11,559
data your sample is valid so Morris is

00:30:07,629 --> 00:30:16,649
just the same the same rate of the clock

00:30:11,559 --> 00:30:20,109
but with 19 degrees phase so with just

00:30:16,649 --> 00:30:22,659
between each one and it's helped to be

00:30:20,109 --> 00:30:29,700
sure that when you sum per the right

00:30:22,659 --> 00:30:34,259
it's a valid so as for it achieved the

00:30:29,700 --> 00:30:37,899
200 you have also D tuning command and

00:30:34,259 --> 00:30:41,849
also it must be used at low voltage and

00:30:37,899 --> 00:30:47,379
with a means and also the data shrub is

00:30:41,849 --> 00:30:50,289
used during the data and so on all the

00:30:47,379 --> 00:30:53,619
data lines and also when you have the

00:30:50,289 --> 00:31:02,070
CRC response so more part of the

00:30:53,619 --> 00:31:06,960
exchange and in MMC 5.1 so in 2014

00:31:02,070 --> 00:31:10,200
the NN strobe was ID'd so it's a hello

00:31:06,960 --> 00:31:12,420
to use this that a strobe line also

00:31:10,200 --> 00:31:17,100
during the command respect

00:31:12,420 --> 00:31:20,730
so it's or also thanks to this you have

00:31:17,100 --> 00:31:30,920
more readable data also there during his

00:31:20,730 --> 00:31:37,590
sequence the last spin mode we find is

00:31:30,920 --> 00:31:42,950
the UHS 2 which was introduced in SD 4.1

00:31:37,590 --> 00:31:46,110
in 2013 so it's a completely new mode

00:31:42,950 --> 00:31:52,800
you have also with this one a new set of

00:31:46,110 --> 00:31:55,590
signal so you have difference difference

00:31:52,800 --> 00:31:58,860
your signal 2 to 2 power of this from

00:31:55,590 --> 00:32:02,820
different signal do the 0 and the 1 you

00:31:58,860 --> 00:32:07,680
also have let me not clear but you also

00:32:02,820 --> 00:32:10,530
have to voltage as we have for the MMC

00:32:07,680 --> 00:32:12,330
you have a voltage for the the flash

00:32:10,530 --> 00:32:17,450
itself and the controller in C itself

00:32:12,330 --> 00:32:19,860
and then voltage for the signal the

00:32:17,450 --> 00:32:23,810
event the clock is also differential but

00:32:19,860 --> 00:32:28,170
the clock is remain pretty low so only

00:32:23,810 --> 00:32:32,250
26 or 50 to Omega earth and the idea

00:32:28,170 --> 00:32:38,790
here is used same kind of protocol you

00:32:32,250 --> 00:32:44,120
have on USB 3 PCI Express SATA so very

00:32:38,790 --> 00:32:48,270
fast line with so this differential

00:32:44,120 --> 00:32:53,460
signal and then so you have this

00:32:48,270 --> 00:32:59,640
reference clock and then both the card

00:32:53,460 --> 00:33:07,200
and the host then use PLL to internally

00:32:59,640 --> 00:33:10,800
have signal running 15 or searchy time

00:33:07,200 --> 00:33:13,190
the speed of the clock so thank to this

00:33:10,800 --> 00:33:17,489
you can achieve

00:33:13,190 --> 00:33:21,840
312 megabyte per second depending of the

00:33:17,489 --> 00:33:25,259
much protein so it's that's a very low

00:33:21,840 --> 00:33:26,609
low belly it's a frost change also but

00:33:25,259 --> 00:33:28,799
something to know it's a completely

00:33:26,609 --> 00:33:32,749
different protocol so if we have a look

00:33:28,799 --> 00:33:36,899
on the on the first slide we have yes

00:33:32,749 --> 00:33:37,470
this as you can hear this one support us

00:33:36,899 --> 00:33:40,830
too

00:33:37,470 --> 00:33:41,570
and what's happening when you switch

00:33:40,830 --> 00:33:44,729
from

00:33:41,570 --> 00:33:46,529
uhs-1 or any other mod from you a cheese

00:33:44,729 --> 00:33:48,960
to then you don't use anymore

00:33:46,529 --> 00:33:51,119
this set of pin and you just use the new

00:33:48,960 --> 00:33:55,499
set of penis so it's really a completely

00:33:51,119 --> 00:33:59,039
new protocol a completely new set of

00:33:55,499 --> 00:34:02,159
signal and so the compatibility is just

00:33:59,039 --> 00:34:04,440
because we we you keep the older line

00:34:02,159 --> 00:34:06,509
but when you switch from a mod to

00:34:04,440 --> 00:34:20,159
another mod internally it's different

00:34:06,509 --> 00:34:22,529
and because so here you don't have any

00:34:20,159 --> 00:34:25,289
morals different line with a command

00:34:22,529 --> 00:34:29,039
line and from different data line so on

00:34:25,289 --> 00:34:32,339
yeah we are Jeff very speed a data line

00:34:29,039 --> 00:34:39,990
dedicated and when we use G 0 and E 1

00:34:32,339 --> 00:34:42,029
its you can also use G 0 on a way and do

00:34:39,990 --> 00:34:45,029
one onion others all the way so we do

00:34:42,029 --> 00:34:47,579
full duplex or you can also aggregate

00:34:45,029 --> 00:34:48,990
the two lines who have half duplex and

00:34:47,579 --> 00:34:53,480
Hydra speed right

00:34:48,990 --> 00:34:58,250
but what you action here is

00:34:53,480 --> 00:35:07,880
message package and boost way yeah we

00:34:58,250 --> 00:35:08,630
also saw that with with SD SD bus or MMC

00:35:07,880 --> 00:35:13,700
bus

00:35:08,630 --> 00:35:17,450
it's always the there are some kind of

00:35:13,700 --> 00:35:20,150
package which always come from the host

00:35:17,450 --> 00:35:22,910
and author package from come from the

00:35:20,150 --> 00:35:25,960
from this SD card here you can exchange

00:35:22,910 --> 00:35:28,310
the same kind of package but it's just

00:35:25,960 --> 00:35:30,710
inside of it you have different either

00:35:28,310 --> 00:35:34,040
and different payload data but it's

00:35:30,710 --> 00:35:36,650
completely it's from my point of view is

00:35:34,040 --> 00:35:40,550
it's closer that we can find on tcp/ip

00:35:36,650 --> 00:35:43,010
or this kind of protocol and then it's

00:35:40,550 --> 00:35:48,920
still possible but I'll very upper layer

00:35:43,010 --> 00:35:52,790
to have compatibility with SD card but

00:35:48,920 --> 00:35:56,870
it's just a way to send the SD common

00:35:52,790 --> 00:36:03,730
which are incapable encapsulated with in

00:35:56,870 --> 00:36:05,560
this package so it's allow you to still

00:36:03,730 --> 00:36:09,650
[Music]

00:36:05,560 --> 00:36:12,800
exchange data with SD card and you don't

00:36:09,650 --> 00:36:15,770
have to modify your upper part of your

00:36:12,800 --> 00:36:17,660
application but you still need to have a

00:36:15,770 --> 00:36:20,510
completely new driver because you still

00:36:17,660 --> 00:36:23,270
need to for the lower level when you

00:36:20,510 --> 00:36:27,980
want to negotiate from some speeds when

00:36:23,270 --> 00:36:32,210
you want to manage the error then for

00:36:27,980 --> 00:36:38,480
this one you you have to know the packet

00:36:32,210 --> 00:36:41,870
message and how it works and recently

00:36:38,480 --> 00:36:46,190
this years with the really have a you

00:36:41,870 --> 00:36:50,180
hs3 but from what I saw it's just a way

00:36:46,190 --> 00:36:53,630
to be able to go faster but this is the

00:36:50,180 --> 00:36:56,140
same protocol is just the difference is

00:36:53,630 --> 00:36:58,869
really at the low level to to gain

00:36:56,140 --> 00:37:08,050
faster

00:36:58,869 --> 00:37:12,900
faster clock yes now we're going to see

00:37:08,050 --> 00:37:18,069
the support of all this mod in in Lenexa

00:37:12,900 --> 00:37:25,200
so as we saw the gr 58 well it was the

00:37:18,069 --> 00:37:33,700
dgr mod for emmc it was a I did in 2010

00:37:25,200 --> 00:37:39,940
with 2006 37 the H is one support so

00:37:33,700 --> 00:37:45,700
with all the sub mod was I did in 3.0

00:37:39,940 --> 00:37:48,550
E&L in 27 2011 then the H is true

00:37:45,700 --> 00:37:56,230
Android was I did in thriller 10 and a

00:37:48,550 --> 00:38:00,040
cheese 400 was I did in 3 that 16 and 2

00:37:56,230 --> 00:38:00,700
years ago the Richmond rich meaning was

00:38:00,040 --> 00:38:03,640
also a leader

00:38:00,700 --> 00:38:06,790
so the rich tuning is I didn't speak

00:38:03,640 --> 00:38:11,520
about it it's just aware when if you

00:38:06,790 --> 00:38:14,109
have some suspend or or some about she'd

00:38:11,520 --> 00:38:17,589
come on or something like that you can

00:38:14,109 --> 00:38:19,119
reach rest to do a rich even during the

00:38:17,589 --> 00:38:22,030
life of the protocol to be sure that

00:38:19,119 --> 00:38:28,480
you're already aligned with with the

00:38:22,030 --> 00:38:34,200
good frequency and last Cera's the N

00:38:28,480 --> 00:38:40,170
strobe we saw was I did in with 4.8 so

00:38:34,200 --> 00:38:40,170
for Linux it's not too much actually

00:38:40,319 --> 00:38:47,170
because the the senior wattage switch

00:38:43,900 --> 00:38:51,369
which is needed for all the the the

00:38:47,170 --> 00:38:55,510
really new mode is supported in the

00:38:51,369 --> 00:38:58,329
framework encoded see really and occur

00:38:55,510 --> 00:39:01,599
of the framework and its make use of the

00:38:58,329 --> 00:39:04,480
regulatory framework so most of the time

00:39:01,599 --> 00:39:07,119
which you have do even if you add a new

00:39:04,480 --> 00:39:10,310
driver you don't have to do too much it

00:39:07,119 --> 00:39:12,380
under the core the core framework and

00:39:10,310 --> 00:39:17,360
in your device tree you just have to

00:39:12,380 --> 00:39:21,110
enter a new a new regulator which always

00:39:17,360 --> 00:39:26,030
call a vq MMC and then that's all once

00:39:21,110 --> 00:39:30,380
we have this as the way to switch signal

00:39:26,030 --> 00:39:32,900
is come on then the framework will take

00:39:30,380 --> 00:39:38,120
care of it so you don't have to do too

00:39:32,900 --> 00:39:44,210
much for controller for this particular

00:39:38,120 --> 00:39:49,640
part then the tuning which is used by

00:39:44,210 --> 00:39:52,700
MMC and SD card so there is a global

00:39:49,640 --> 00:39:58,040
function present in the curve but here

00:39:52,700 --> 00:40:00,520
in each controller have some other

00:39:58,040 --> 00:40:04,880
facilities at acceleration acceleration

00:40:00,520 --> 00:40:07,880
so the orientation is done ready at

00:40:04,880 --> 00:40:11,480
driver novell so you can use some common

00:40:07,880 --> 00:40:14,570
function but you also can put your own

00:40:11,480 --> 00:40:18,380
function are many step of this sequence

00:40:14,570 --> 00:40:19,010
to do what you want and or or add the

00:40:18,380 --> 00:40:21,440
opposite

00:40:19,010 --> 00:40:23,390
stell to the framework to don't do

00:40:21,440 --> 00:40:26,120
anything and then you are where we take

00:40:23,390 --> 00:40:31,490
care of all the also exchange of the

00:40:26,120 --> 00:40:35,240
retune one the global switch with

00:40:31,490 --> 00:40:38,450
switching sequence is under advisor curl

00:40:35,240 --> 00:40:40,760
but here again if your other way

00:40:38,450 --> 00:40:45,110
provides some acceleration or some

00:40:40,760 --> 00:40:48,320
helper you can provide your own your own

00:40:45,110 --> 00:40:52,040
function or you can just skip some part

00:40:48,320 --> 00:40:56,350
done by a bicycle so for the channel

00:40:52,040 --> 00:41:01,030
that plus not too much to her of course

00:40:56,350 --> 00:41:04,700
the the devil is in the detail because

00:41:01,030 --> 00:41:06,500
when you have some hardware which can do

00:41:04,700 --> 00:41:08,810
something automatically maybe it's not

00:41:06,500 --> 00:41:13,820
very fit in the inter channel so you

00:41:08,810 --> 00:41:19,880
have to really see how you you can enter

00:41:13,820 --> 00:41:22,670
in it and and even recently we make some

00:41:19,880 --> 00:41:27,850
evolution directly in the car too

00:41:22,670 --> 00:41:38,510
to be able to use specific address

00:41:27,850 --> 00:41:40,190
facilities so for the future

00:41:38,510 --> 00:41:45,080
what's our the missing part in the

00:41:40,190 --> 00:41:49,130
challenge throw the MMC speedboat point

00:41:45,080 --> 00:41:52,940
of view I seem there is most of the

00:41:49,130 --> 00:41:55,880
development are done of course ready for

00:41:52,940 --> 00:41:59,270
the point of view of the support of the

00:41:55,880 --> 00:42:02,510
protocol from what I saw I think

00:41:59,270 --> 00:42:05,480
everything is here but of good still has

00:42:02,510 --> 00:42:08,630
some quirks to support a new driver but

00:42:05,480 --> 00:42:12,170
it's more to drive a level that that the

00:42:08,630 --> 00:42:16,220
frame rock level for SD card there is no

00:42:12,170 --> 00:42:17,660
support at all for us HQ and us s3 but

00:42:16,220 --> 00:42:21,470
as you see it is a completely new

00:42:17,660 --> 00:42:25,010
protocol a lot of thing to do I think

00:42:21,470 --> 00:42:27,830
another reason is I made some quick

00:42:25,010 --> 00:42:33,040
research and most of the hardware

00:42:27,830 --> 00:42:36,980
controller I saw have support for emmc

00:42:33,040 --> 00:42:41,710
specification 5.1 so no program but most

00:42:36,980 --> 00:42:44,810
of that many of them stopped their

00:42:41,710 --> 00:42:48,290
support for SD at the version 3 and the

00:42:44,810 --> 00:42:52,580
Western three of the SG as discussion is

00:42:48,290 --> 00:42:54,380
the USS one protocol so I think none of

00:42:52,580 --> 00:42:56,960
the reason to not having Ash's do it

00:42:54,380 --> 00:42:59,300
maybe because there is a few are where

00:42:56,960 --> 00:43:03,260
at least for embedded system which

00:42:59,300 --> 00:43:07,330
support it but there is I also find

00:43:03,260 --> 00:43:13,410
there is many IP which support this one

00:43:07,330 --> 00:43:17,640
form as I saw some from cadence a return

00:43:13,410 --> 00:43:22,080
and there was at one but two all the IP

00:43:17,640 --> 00:43:29,760
are present but I didn't see them yet in

00:43:22,080 --> 00:43:33,590
the ad so clever so if you have any

00:43:29,760 --> 00:43:33,590
question feel free to ask

00:43:43,000 --> 00:43:50,380
so you want to know if the SD card MMC

00:43:46,309 --> 00:43:50,380
can require some permit management

00:43:52,539 --> 00:44:00,829
zebb provides some pro management

00:43:56,599 --> 00:44:04,309
feature but I don't know if there are

00:44:00,829 --> 00:44:15,200
Ric Flair power management but phrasing

00:44:04,309 --> 00:44:17,119
you can mmm I don't know I lied and not

00:44:15,200 --> 00:44:22,359
some spotter I thought well I don't know

00:44:17,119 --> 00:44:22,359
is there are some general not sure know

00:44:24,700 --> 00:44:50,089
the question so a few years ago we had

00:44:46,250 --> 00:44:52,819
to bring up SDHC a controller in one arm

00:44:50,089 --> 00:44:56,329
chip and people who designed this ship

00:44:52,819 --> 00:44:58,549
was already fired so we had bad

00:44:56,329 --> 00:45:02,079
documentation and we had to enable it

00:44:58,549 --> 00:45:07,069
and what we try to do is to connect

00:45:02,079 --> 00:45:08,690
logic analyzer to SD lines and try it to

00:45:07,069 --> 00:45:12,500
the back and we found few hardware

00:45:08,690 --> 00:45:14,900
issues and we spent a few months trying

00:45:12,500 --> 00:45:20,200
to bring got it and maybe there is some

00:45:14,900 --> 00:45:20,200
easy way to find such issues

00:45:26,099 --> 00:45:35,440
what I can say is it's a there isn't a

00:45:31,420 --> 00:45:38,280
lot of matches come and Linux for

00:45:35,440 --> 00:45:43,260
managing quirks on many adware

00:45:38,280 --> 00:45:45,700
controller and card so I'm not at all

00:45:43,260 --> 00:45:48,099
surprised that you have a show and

00:45:45,700 --> 00:45:50,589
because there is a protocol which is

00:45:48,099 --> 00:45:52,900
pretty ok and then the repetition and

00:45:50,589 --> 00:45:55,000
pretty different from the protocol so we

00:45:52,900 --> 00:45:59,589
have a lot of care to say okay don't

00:45:55,000 --> 00:46:02,589
don't trust what the auth controller

00:45:59,589 --> 00:46:04,119
said I know that it can work only on

00:46:02,589 --> 00:46:08,589
this way on this way so there is a lot

00:46:04,119 --> 00:46:11,320
of cracks around it and that's also a

00:46:08,589 --> 00:46:13,270
problem of the framework is a at the

00:46:11,320 --> 00:46:16,720
beginning we have added a lot of Chris

00:46:13,270 --> 00:46:20,170
zr 0 and 0 but from now there are some

00:46:16,720 --> 00:46:25,599
approaches to try to read more global

00:46:20,170 --> 00:46:28,180
way so we just keep the common part come

00:46:25,599 --> 00:46:30,730
on and each quake is you would try to

00:46:28,180 --> 00:46:36,790
put them on a niche driver it's possible

00:46:30,730 --> 00:46:41,770
but yes so that's right when I wrote

00:46:36,790 --> 00:46:44,859
this work finale I found it pretty no no

00:46:41,770 --> 00:46:48,790
much things to say because actually from

00:46:44,859 --> 00:46:54,040
what I saw is the most up part is not

00:46:48,790 --> 00:46:55,930
really applies the protocol or follows

00:46:54,040 --> 00:46:58,150
the specification is more to deal with

00:46:55,930 --> 00:47:00,970
the real hardware when they don't follow

00:46:58,150 --> 00:47:03,670
the protocol and find y and and then we

00:47:00,970 --> 00:47:08,250
and as the area is as here just have to

00:47:03,670 --> 00:47:08,250
do with it and to modify the code for it

00:47:10,509 --> 00:47:18,259
to you with AK with a crappy hardware

00:47:13,549 --> 00:47:21,499
and I sold it very quickly and with the

00:47:18,259 --> 00:47:24,189
trick and I simply wrote down the speed

00:47:21,499 --> 00:47:27,410
of the communication with the SD card I

00:47:24,189 --> 00:47:35,959
know it's not the best option but the

00:47:27,410 --> 00:47:37,339
crappy hardware deserves it so for

00:47:35,959 --> 00:47:39,949
debugging some of these higher speed

00:47:37,339 --> 00:47:41,630
modes what kind of hardware tools do you

00:47:39,949 --> 00:47:43,670
use I mean do you have any

00:47:41,630 --> 00:47:47,799
recommendations for any analyzers or any

00:47:43,670 --> 00:47:51,140
other thoughts on sorry I am no

00:47:47,799 --> 00:47:53,930
Commission because I am from my step I

00:47:51,140 --> 00:47:57,069
didn't work on this part I'm work rot on

00:47:53,930 --> 00:48:00,079
the partner to adjourn for the

00:47:57,069 --> 00:48:02,749
controller I work on the code was

00:48:00,079 --> 00:48:06,739
already there all the hardware that was

00:48:02,749 --> 00:48:11,359
already bug and then it was most of my

00:48:06,739 --> 00:48:15,859
work to see how to modify the code to

00:48:11,359 --> 00:48:18,140
fit the kernel stone at but it was not

00:48:15,859 --> 00:48:21,949
really on the on this part so I don't

00:48:18,140 --> 00:48:30,390
know what the the other team and used

00:48:21,949 --> 00:48:32,220
for debugging idea it's okay

00:48:30,390 --> 00:48:38,680
thank you

00:48:32,220 --> 00:48:38,680

YouTube URL: https://www.youtube.com/watch?v=mxdKXlANup4


