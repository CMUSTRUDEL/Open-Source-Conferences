Title: Building a Remote Control Robot with Automotive Grade Linux - Leon Anavi, Konsulko Group
Publication date: 2017-10-24
Playlist: Open Source Summit Europe & Embedded Linux Conference Europe 2017
Description: 
	Building a Remote Control Robot with Automotive Grade Linux - Leon Anavi, Konsulko Group

Automotive Grade Linux (AGL) is a leading embedded Linux distribution for the automotive industry and soon it will debut on the 2018 Toyota Camry. Out of the box AGL offers reliable open source solutions for graphics, connectivity, security and software over the air updates. Could other industries benefit from these features?

In a quest to discover if AGL is suitable for Internet of Things (IoT) outside the automotive industry, this presentation will reveal a practical experiment of using AGL in robotics. Attendees will learn the exact steps for building a do it yourself (DIY) robot based on Raspberry Pi 3 with off-the-shelf components. The talk will provide guidelines for integration of additional software, sensors and other peripheral hardware device in a headless AGL profile.

About Leon Anavi
Leon Anavi is an open source enthusiast and a senior software engineer at Konsulko Group. He is an active contributor to Automotive Grade Linux (AGL), GENIVI Development Platform, Tizen as well as to a lot of other open source projects. His professional experience includes web and mobile application development for various platforms as well as porting embedded Linux distributions to Raspberry Pi and devices with i.MX6, Rockchip and Allwinner (aka sunxi) SoC. Leon holds a masters in Information Technology from the Technical University Sofia. He is the author of the Tizen Cookbook printed by Packt Publishing. His previous speaking experience includes talks about open source software during events in San Francisco, Portland (OR), Hong Kong, Shanghai, Shenzhen, Brussels, Berlin, Bratislava, Sofia and his hometown Plovdiv.
Captions: 
	00:00:00,030 --> 00:00:06,299
in the next 40 minutes I'm going to show

00:00:04,170 --> 00:00:09,179
you how to build a simple remote-control

00:00:06,299 --> 00:00:11,700
robot without a motor grade Linux my

00:00:09,179 --> 00:00:16,279
name is Luna Navi I'm a senior software

00:00:11,700 --> 00:00:20,130
engineer at Canseco group Canseco is

00:00:16,279 --> 00:00:23,279
open-source embedded software services

00:00:20,130 --> 00:00:25,910
company we specialize in system

00:00:23,279 --> 00:00:29,160
architecture development building

00:00:25,910 --> 00:00:31,610
maintaining upstream open source

00:00:29,160 --> 00:00:36,630
projects such as automotive grade Linux

00:00:31,610 --> 00:00:39,020
so today we already had two talks about

00:00:36,630 --> 00:00:42,300
automotive grade Linux in this very room

00:00:39,020 --> 00:00:46,170
at the beginning of the day world minor

00:00:42,300 --> 00:00:48,780
gave us an overview of our motor grade

00:00:46,170 --> 00:00:50,969
Linux the new stuff that we get there it

00:00:48,780 --> 00:00:54,300
was a great talk what is over there and

00:00:50,969 --> 00:00:57,690
after that my colleagues from cansado

00:00:54,300 --> 00:01:00,289
group Scott Murray and Matt Porter gave

00:00:57,690 --> 00:01:04,350
another talk which was most specialized

00:01:00,289 --> 00:01:07,320
so today us now today I'm going to

00:01:04,350 --> 00:01:11,420
present you AGL in a little bit

00:01:07,320 --> 00:01:14,580
different angle the agenda for this talk

00:01:11,420 --> 00:01:18,119
contains a brief overview of our more

00:01:14,580 --> 00:01:21,180
great Linux after that I'll speak about

00:01:18,119 --> 00:01:24,750
the supported hardware in AGL and how we

00:01:21,180 --> 00:01:27,689
can use this hardware with some

00:01:24,750 --> 00:01:32,790
peripheral devices to build a different

00:01:27,689 --> 00:01:35,250
product it's a let's say a toy later on

00:01:32,790 --> 00:01:38,340
I'll explain how to do integration and

00:01:35,250 --> 00:01:41,460
contribution of software to

00:01:38,340 --> 00:01:43,530
automatically great Linux finally we'll

00:01:41,460 --> 00:01:45,869
have some time for making conclusions

00:01:43,530 --> 00:01:51,329
and of course questions and answers at

00:01:45,869 --> 00:01:54,990
the end of the talk although the title

00:01:51,329 --> 00:01:56,549
of the talk says that we are going to

00:01:54,990 --> 00:01:58,649
build a robot this is not the main

00:01:56,549 --> 00:02:01,140
purpose of this talk the men the main

00:01:58,649 --> 00:02:04,170
purpose of this talk is to do an

00:02:01,140 --> 00:02:07,469
experiment an experiment to find out if

00:02:04,170 --> 00:02:10,770
other industries can benefit from the

00:02:07,469 --> 00:02:12,930
features existing of existing in

00:02:10,770 --> 00:02:16,620
automotive grade Linux

00:02:12,930 --> 00:02:19,360
if you're building Internet of Things

00:02:16,620 --> 00:02:22,450
connect the devices there are certain

00:02:19,360 --> 00:02:24,520
requirements if you want to run Linux on

00:02:22,450 --> 00:02:27,850
them you require from the Linux

00:02:24,520 --> 00:02:30,760
distribution to help a build system and

00:02:27,850 --> 00:02:34,600
a whole development tool chain you

00:02:30,760 --> 00:02:37,270
require a certain security level it's

00:02:34,600 --> 00:02:40,330
nice to have over-the-air updates and of

00:02:37,270 --> 00:02:43,180
course for certain devices you need a

00:02:40,330 --> 00:02:45,610
graphical stack and applications if

00:02:43,180 --> 00:02:49,660
there is a user interface that is on a

00:02:45,610 --> 00:02:51,880
display for the users doing all this

00:02:49,660 --> 00:02:54,370
from scratch can take a lot of time and

00:02:51,880 --> 00:02:58,990
on the market there are a lot of open

00:02:54,370 --> 00:03:02,320
source Linux distributions which cover

00:02:58,990 --> 00:03:03,970
these requirements one of these Linux

00:03:02,320 --> 00:03:05,920
distributions is actually automotive

00:03:03,970 --> 00:03:09,460
grade Linux so in the next few slides

00:03:05,920 --> 00:03:12,280
we'll see how our motor grade Linux fits

00:03:09,460 --> 00:03:14,380
into this how many of you are familiar

00:03:12,280 --> 00:03:16,720
without mortar grade Linux can you raise

00:03:14,380 --> 00:03:20,200
your hands if you have been involved

00:03:16,720 --> 00:03:23,050
somehow are you developing applications

00:03:20,200 --> 00:03:28,840
or platform developers without a motor

00:03:23,050 --> 00:03:30,970
grade Linux okay so I hope that I will

00:03:28,840 --> 00:03:33,150
inspire you to contribute more code and

00:03:30,970 --> 00:03:35,320
to use more automotive grade Linux

00:03:33,150 --> 00:03:40,390
automotive grade Linux is a project of

00:03:35,320 --> 00:03:42,400
the Linux Foundation it's it was created

00:03:40,390 --> 00:03:44,200
to brow to provide in the hoenn

00:03:42,400 --> 00:03:47,170
infotainment the new Linux distribution

00:03:44,200 --> 00:03:49,830
for the automotive industry it's already

00:03:47,170 --> 00:03:52,120
based on top of popular open source

00:03:49,830 --> 00:03:56,760
projects such as the Yocto project and

00:03:52,120 --> 00:04:01,450
open embedded our motive grade Linux was

00:03:56,760 --> 00:04:03,780
found in founded in 2014 and in the past

00:04:01,450 --> 00:04:07,090
three years there is a tremendous

00:04:03,780 --> 00:04:08,890
progress a lot of companies are

00:04:07,090 --> 00:04:10,930
contributing to automotive grade Linux

00:04:08,890 --> 00:04:12,640
if I'm honest these are not all of the

00:04:10,930 --> 00:04:15,250
companies I didn't have enough time

00:04:12,640 --> 00:04:17,919
enough space on the slide to fill in on

00:04:15,250 --> 00:04:22,180
the all the company companies a lot of

00:04:17,919 --> 00:04:26,229
people are contributing to AGL Ajo is

00:04:22,180 --> 00:04:30,430
having a six months release cycle

00:04:26,229 --> 00:04:32,530
if you notice the dates you can see that

00:04:30,430 --> 00:04:34,960
every six months we have a new release

00:04:32,530 --> 00:04:42,550
currently the stable release is darling

00:04:34,960 --> 00:04:44,400
DUP now darling up over here and now

00:04:42,550 --> 00:04:47,229
we're working on the next release

00:04:44,400 --> 00:04:51,219
electric eel which is scheduled for

00:04:47,229 --> 00:04:54,659
December 2017 and actually the first

00:04:51,219 --> 00:04:57,159
release candidates are already available

00:04:54,659 --> 00:04:59,020
this six months through this cycle is

00:04:57,159 --> 00:05:01,210
pretty much following what is happening

00:04:59,020 --> 00:05:07,750
in the Yocto project so we try to be

00:05:01,210 --> 00:05:10,180
up-to-date with the Yocto project let's

00:05:07,750 --> 00:05:13,060
have a look at the architecture of

00:05:10,180 --> 00:05:16,590
automotive-grade linux the core

00:05:13,060 --> 00:05:19,689
technologies that we have there

00:05:16,590 --> 00:05:20,860
it's obviously a Linux distribution so

00:05:19,689 --> 00:05:24,639
we need a Linux kernel

00:05:20,860 --> 00:05:27,819
it's it's a Linux distribution that is

00:05:24,639 --> 00:05:32,620
built with security in mind since day

00:05:27,819 --> 00:05:35,560
one so we have security based on smack

00:05:32,620 --> 00:05:37,719
and Cynara this is something that you

00:05:35,560 --> 00:05:39,759
might be familiar with from other

00:05:37,719 --> 00:05:44,979
projects such as Tizen there is

00:05:39,759 --> 00:05:51,190
application framework and on top of this

00:05:44,979 --> 00:05:53,229
we have system D D bus and we have a

00:05:51,190 --> 00:05:57,250
mechanism for doing software

00:05:53,229 --> 00:05:59,469
over-the-air updates there is a solar

00:05:57,250 --> 00:06:02,680
client called actual Iser which is

00:05:59,469 --> 00:06:06,490
integrated with a popular open source -

00:06:02,680 --> 00:06:09,490
for doing binary dips and shipping these

00:06:06,490 --> 00:06:11,620
tips to the embedded devices on which a

00:06:09,490 --> 00:06:14,050
Gio is running

00:06:11,620 --> 00:06:16,509
it's called OS 3 you might be familiar

00:06:14,050 --> 00:06:21,099
with it from the project called adnan

00:06:16,509 --> 00:06:23,650
continues on top of this we have a

00:06:21,099 --> 00:06:27,460
graphical user stack which is relying on

00:06:23,650 --> 00:06:29,770
the Weiland protocol and the Western

00:06:27,460 --> 00:06:34,060
compositor which is a reference system

00:06:29,770 --> 00:06:36,310
of the way wadn't protocol the user

00:06:34,060 --> 00:06:38,840
interface as of the moment if you build

00:06:36,310 --> 00:06:40,840
the default target of a Geo

00:06:38,840 --> 00:06:44,889
contains a bunch of really nice-looking

00:06:40,840 --> 00:06:48,460
cute and qml HMI applications

00:06:44,889 --> 00:06:50,300
furthermore a geo supports html5

00:06:48,460 --> 00:06:54,340
gstreamer and a lot of other

00:06:50,300 --> 00:06:56,870
technologies as I already said

00:06:54,340 --> 00:06:58,820
automotive grade Linux relies on the

00:06:56,870 --> 00:07:01,550
Yocto project and openembedded for

00:06:58,820 --> 00:07:03,949
building the whole distribution this

00:07:01,550 --> 00:07:06,979
means that our more great linux

00:07:03,949 --> 00:07:11,210
incorporates a lot of different layers

00:07:06,979 --> 00:07:12,800
meta layers from the Yocto project such

00:07:11,210 --> 00:07:15,500
as pokey the reference system of the

00:07:12,800 --> 00:07:17,870
Yocto project and a lot of specific

00:07:15,500 --> 00:07:22,669
project that brings features that are

00:07:17,870 --> 00:07:24,830
specific for AGM I listed a few of those

00:07:22,669 --> 00:07:26,630
layers not all of them keep in mind that

00:07:24,830 --> 00:07:29,030
we have a bunch of board Support Package

00:07:26,630 --> 00:07:35,180
layers for all the hardware that we

00:07:29,030 --> 00:07:40,039
support supporting in ngl just a brief

00:07:35,180 --> 00:07:42,770
look at what is supported in AGM we have

00:07:40,039 --> 00:07:45,770
support for renaissance generation 3 and

00:07:42,770 --> 00:07:48,080
generation 2 boards keep in mind that

00:07:45,770 --> 00:07:50,840
we're speaking about an automotive Linux

00:07:48,080 --> 00:07:54,380
distribution so the supported hardware

00:07:50,840 --> 00:07:55,539
devices devices that are heavily used in

00:07:54,380 --> 00:08:00,200
the automotive industry

00:07:55,539 --> 00:08:03,889
we are also runs on Intel devices on

00:08:00,200 --> 00:08:06,889
Texas Instruments platforms such as the

00:08:03,889 --> 00:08:10,520
vibe board on dragon board on Raspberry

00:08:06,889 --> 00:08:15,500
Pi 2 & 3 raspberry pi is community

00:08:10,520 --> 00:08:19,010
supported board and since a few days it

00:08:15,500 --> 00:08:21,050
also works on iMac 6 sabra and humming

00:08:19,010 --> 00:08:23,450
board coming board is the latest

00:08:21,050 --> 00:08:26,320
addition to the supported hardware

00:08:23,450 --> 00:08:30,680
platforms bar by automotive grade Linux

00:08:26,320 --> 00:08:34,640
this is a screen shot so over here is a

00:08:30,680 --> 00:08:38,209
screen shot of the home screen of our

00:08:34,640 --> 00:08:41,180
more great Linux let's have a look at

00:08:38,209 --> 00:08:44,589
the to chain that we have for

00:08:41,180 --> 00:08:48,490
development all projects within

00:08:44,589 --> 00:08:52,610
automotive grade Linux are hosted in get

00:08:48,490 --> 00:08:55,250
the Garrett is used for managing

00:08:52,610 --> 00:08:57,140
and reviewing code we have Jenkins for

00:08:55,250 --> 00:08:59,120
continuous integration and furthermore

00:08:57,140 --> 00:09:02,000
testing some of the changes

00:08:59,120 --> 00:09:05,149
automatically there is a juror where you

00:09:02,000 --> 00:09:07,370
can file issues by reporting bugs or

00:09:05,149 --> 00:09:09,649
requesting new features there is a wiki

00:09:07,370 --> 00:09:12,079
article and there is a new documentation

00:09:09,649 --> 00:09:16,430
site where you can find Doc's how to get

00:09:12,079 --> 00:09:19,610
started with the exact steps so with

00:09:16,430 --> 00:09:23,000
this the short overview of hgo is over

00:09:19,610 --> 00:09:27,529
and now I'll move to something more

00:09:23,000 --> 00:09:30,200
practical and it's the experiment how to

00:09:27,529 --> 00:09:32,060
build a remote control robot so in order

00:09:30,200 --> 00:09:34,670
to do this and we're speaking about a

00:09:32,060 --> 00:09:37,070
hobby project that any one of you can do

00:09:34,670 --> 00:09:37,899
during the weekends that's what I did

00:09:37,070 --> 00:09:40,779
actually

00:09:37,899 --> 00:09:45,230
so we're speaking about low cost

00:09:40,779 --> 00:09:47,209
hardware that you can buy from you can

00:09:45,230 --> 00:09:49,220
buy easily you need a single board

00:09:47,209 --> 00:09:50,990
computer obviously this has to be a

00:09:49,220 --> 00:09:52,670
single board computer from the list of

00:09:50,990 --> 00:09:55,070
hardware devices that we mentioned

00:09:52,670 --> 00:09:59,360
because we already know that HDI work

00:09:55,070 --> 00:10:01,190
summed up you need a chassis and a DC

00:09:59,360 --> 00:10:03,740
motor if you're good with 3d printing

00:10:01,190 --> 00:10:05,720
you can construct your own chassis if

00:10:03,740 --> 00:10:07,880
you want you can buy some of the

00:10:05,720 --> 00:10:11,649
existing robot chassés that you can find

00:10:07,880 --> 00:10:14,899
around the internet or and/or an eBay

00:10:11,649 --> 00:10:17,449
you need a motor driver to drive the DC

00:10:14,899 --> 00:10:19,160
motors a few sensors to make things more

00:10:17,449 --> 00:10:25,130
interesting and of course you need

00:10:19,160 --> 00:10:27,290
batteries to run all this so those of

00:10:25,130 --> 00:10:30,260
you who know me before the talk know my

00:10:27,290 --> 00:10:32,329
choice I'm a Raspberry Pi fan especially

00:10:30,260 --> 00:10:35,149
when we're speaking about hobby projects

00:10:32,329 --> 00:10:40,250
so for this experiment I decided to rely

00:10:35,149 --> 00:10:42,769
on Raspberry Pi 3 I believe all of you

00:10:40,250 --> 00:10:46,310
know Raspberry Pi pretty well it's very

00:10:42,769 --> 00:10:48,649
affordable a lot of people have it it

00:10:46,310 --> 00:10:52,339
has a good software support in general

00:10:48,649 --> 00:10:55,459
as well as automotive grade Linux there

00:10:52,339 --> 00:10:57,230
there are variety of our own words that

00:10:55,459 --> 00:11:00,440
you can easily plug on the Raspberry Pi

00:10:57,230 --> 00:11:02,600
in order to build a robot or another

00:11:00,440 --> 00:11:06,410
hobby project and there is a huge

00:11:02,600 --> 00:11:09,379
community one important remark

00:11:06,410 --> 00:11:12,589
this is not an automotive great board so

00:11:09,379 --> 00:11:14,420
it doesn't cover certain requirements

00:11:12,589 --> 00:11:16,970
and it's good for hobby projects and

00:11:14,420 --> 00:11:19,670
keep in mind that this experiment is in

00:11:16,970 --> 00:11:21,470
this category the good thing about

00:11:19,670 --> 00:11:25,220
Raspberry Pi actually how many of you

00:11:21,470 --> 00:11:28,509
have Raspberry Pi okay all of you that's

00:11:25,220 --> 00:11:32,449
perfect I hope you understand my choice

00:11:28,509 --> 00:11:34,639
so there are a lot of people are

00:11:32,449 --> 00:11:35,480
building remote-controlled robots with

00:11:34,639 --> 00:11:38,449
Raspberry Pi

00:11:35,480 --> 00:11:40,040
it's a nice toy even a child can build

00:11:38,449 --> 00:11:42,560
it and there are a lot of motor

00:11:40,040 --> 00:11:44,930
controller are on boards that you can

00:11:42,560 --> 00:11:48,620
just buy plug on top of the 40 pins of

00:11:44,930 --> 00:11:53,120
the Raspberry Pi and get fixed working I

00:11:48,620 --> 00:11:56,060
have listed some of the popular our own

00:11:53,120 --> 00:11:58,459
boards that you can buy here you see the

00:11:56,060 --> 00:12:01,279
exact micro the the exact controller

00:11:58,459 --> 00:12:06,860
that they're using as you can see I have

00:12:01,279 --> 00:12:09,949
now down just just a few of them I

00:12:06,860 --> 00:12:13,670
decided to do not to use the one that I

00:12:09,949 --> 00:12:16,880
can buy but actually to make my own Do

00:12:13,670 --> 00:12:18,350
It Yourself motor driver board this took

00:12:16,880 --> 00:12:21,740
me a bit of time I'm not very good at

00:12:18,350 --> 00:12:24,800
soldering as you can see I had a look at

00:12:21,740 --> 00:12:27,620
the few popular half H motor drivers

00:12:24,800 --> 00:12:30,920
that I already saw that are being used

00:12:27,620 --> 00:12:32,589
by other other boards such as the ones

00:12:30,920 --> 00:12:35,569
that I need short on the previous slide

00:12:32,589 --> 00:12:38,000
I decided to select one from Texas

00:12:35,569 --> 00:12:40,939
Instruments that is the easiest one for

00:12:38,000 --> 00:12:42,860
soldering this one over here this is how

00:12:40,939 --> 00:12:44,480
it looks as I said I'm a software

00:12:42,860 --> 00:12:49,490
engineer not very good with soul drink

00:12:44,480 --> 00:12:52,610
as you can see but it works you need it

00:12:49,490 --> 00:12:55,220
controls 2 DC motors you need a external

00:12:52,610 --> 00:13:00,050
battery pack to power this thinking to

00:12:55,220 --> 00:13:05,449
make it run so now controlling the

00:13:00,050 --> 00:13:08,569
motors so the problem with Raspberry Pi

00:13:05,449 --> 00:13:11,360
is that we don't have enough hardware

00:13:08,569 --> 00:13:13,339
PVM there is just a single one of them

00:13:11,360 --> 00:13:15,800
and this is kind of a problematic

00:13:13,339 --> 00:13:18,860
because if you if you want to have a

00:13:15,800 --> 00:13:19,920
good control of the motors you need to

00:13:18,860 --> 00:13:24,389
rely on harder

00:13:19,920 --> 00:13:26,790
CVM alternatively we can emulate so with

00:13:24,389 --> 00:13:28,980
software the pvm but the results is not

00:13:26,790 --> 00:13:33,029
that good they're good enough for making

00:13:28,980 --> 00:13:35,880
a simple demo but if we want to go one

00:13:33,029 --> 00:13:38,100
step further to make it more interesting

00:13:35,880 --> 00:13:40,980
it's better to pick up a microcontroller

00:13:38,100 --> 00:13:44,070
with PVM and to have a hardware control

00:13:40,980 --> 00:13:47,100
over the PVM there is a popular open

00:13:44,070 --> 00:13:49,350
source library called wiring pipe and

00:13:47,100 --> 00:13:54,029
which is very convenient for integration

00:13:49,350 --> 00:13:57,600
where C and C++ projects and it can

00:13:54,029 --> 00:14:01,320
emulate PVM from the software side so

00:13:57,600 --> 00:14:05,850
these are super cheap they're cheap

00:14:01,320 --> 00:14:09,690
motor motors with wheels you can buy

00:14:05,850 --> 00:14:12,089
them from eBay for one or two us doors

00:14:09,690 --> 00:14:14,639
it's absolutely enough and of course you

00:14:12,089 --> 00:14:16,649
need to wait for quite some time for

00:14:14,639 --> 00:14:18,660
their arrival but if you find them in

00:14:16,649 --> 00:14:22,290
the local store just get up don't get

00:14:18,660 --> 00:14:25,769
them they're really useful for for

00:14:22,290 --> 00:14:28,709
making this hobby projects so my idea

00:14:25,769 --> 00:14:31,490
for the robot is to have just two three

00:14:28,709 --> 00:14:35,699
wheels two of them to control and one

00:14:31,490 --> 00:14:38,220
additional well and this is a very

00:14:35,699 --> 00:14:40,949
simple code box just to show how simply

00:14:38,220 --> 00:14:43,800
with wiring PI I can enable the software

00:14:40,949 --> 00:14:48,300
emulation of the PVM and to make this

00:14:43,800 --> 00:14:50,459
motors move forward or backward so let's

00:14:48,300 --> 00:14:53,160
have a look at the sensors when you're

00:14:50,459 --> 00:14:54,660
building come hobby robot there are a

00:14:53,160 --> 00:14:57,180
bunch of sensors that he can use

00:14:54,660 --> 00:14:59,850
probably the most popular that I have

00:14:57,180 --> 00:15:02,640
seen in a lot of projects almost all

00:14:59,850 --> 00:15:06,390
projects is the ultra sonic sensor for

00:15:02,640 --> 00:15:09,449
measuring distance towards objects this

00:15:06,390 --> 00:15:12,500
is a cheap and effective sensor that

00:15:09,449 --> 00:15:16,050
allows you to measure the distance with

00:15:12,500 --> 00:15:19,199
two walls for example or other obstacles

00:15:16,050 --> 00:15:24,449
and to make a simple algorithm to move

00:15:19,199 --> 00:15:26,910
around them a lot of fun fun thing is

00:15:24,449 --> 00:15:29,850
that actually identity I haven't done

00:15:26,910 --> 00:15:32,069
this yet on my robot but it's a infrared

00:15:29,850 --> 00:15:35,149
lying tracking so basically the idea

00:15:32,069 --> 00:15:35,149
there is with this

00:15:36,569 --> 00:15:44,129
you can distinguish for example a black

00:15:42,089 --> 00:15:48,769
line and your robot can follow the line

00:15:44,129 --> 00:15:51,930
so it's a path following robot other ku

00:15:48,769 --> 00:15:55,319
sensors are like the compass that you

00:15:51,930 --> 00:15:57,029
can find as an I squared C sensors there

00:15:55,319 --> 00:15:59,610
are other I squared C sensors for

00:15:57,029 --> 00:16:02,490
measuring temperature humidity colors

00:15:59,610 --> 00:16:06,689
lights so you can even distinguish the

00:16:02,490 --> 00:16:09,720
ambient light furthermore Raspberry Pi

00:16:06,689 --> 00:16:11,819
has official Raspberry Pi camera coming

00:16:09,720 --> 00:16:14,790
from the Raspberry Pi foundation which

00:16:11,819 --> 00:16:16,829
you can also integrate within within the

00:16:14,790 --> 00:16:20,309
robot the integration is pretty simple

00:16:16,829 --> 00:16:24,540
because there is a board Support Package

00:16:20,309 --> 00:16:28,889
layer called metal Raspberry Pi it's for

00:16:24,540 --> 00:16:30,689
the Yocto project in general as well as

00:16:28,889 --> 00:16:32,279
two other Linux distributions such as

00:16:30,689 --> 00:16:34,730
automotive grade Linux which are based

00:16:32,279 --> 00:16:38,639
on the Yocto project and openembedded

00:16:34,730 --> 00:16:41,910
since we're building a robot that has to

00:16:38,639 --> 00:16:44,250
be remotely controlled we have to think

00:16:41,910 --> 00:16:47,189
about the communication and in terms of

00:16:44,250 --> 00:16:50,730
communication raspberry pi has built-in

00:16:47,189 --> 00:16:52,259
Wi-Fi Ethernet and Bluetooth it's very

00:16:50,730 --> 00:16:54,839
easy to extend the capabilities of

00:16:52,259 --> 00:16:58,139
Raspberry Pi by adding radio

00:16:54,839 --> 00:17:01,410
transmission models modules or infrared

00:16:58,139 --> 00:17:05,760
receiver and or transmitter in our case

00:17:01,410 --> 00:17:09,390
it's enough to add a receiver and of

00:17:05,760 --> 00:17:12,240
course we can buy some GSM modules and

00:17:09,390 --> 00:17:15,179
even control the robot this way because

00:17:12,240 --> 00:17:20,730
all FOMO is built-in in automotive grade

00:17:15,179 --> 00:17:22,500
Linux this is an example how you can add

00:17:20,730 --> 00:17:25,289
to your do-it-yourself board actually

00:17:22,500 --> 00:17:26,270
this is what I did to add an infrared

00:17:25,289 --> 00:17:29,100
receiver

00:17:26,270 --> 00:17:32,700
these are schematics that I took from

00:17:29,100 --> 00:17:36,179
another project that I'm having it's a

00:17:32,700 --> 00:17:39,390
very popular infrared receiver which can

00:17:36,179 --> 00:17:41,700
be easily integrated as unknown board

00:17:39,390 --> 00:17:45,600
for all on our own boards for Raspberry

00:17:41,700 --> 00:17:47,760
Pi and receive commands using the Linux

00:17:45,600 --> 00:17:50,030
infrared remote control project

00:17:47,760 --> 00:17:52,679
known as lyric it's a 20 years old

00:17:50,030 --> 00:17:55,770
project that it's that works perfectly

00:17:52,679 --> 00:17:57,030
fine on Linux so putting all this

00:17:55,770 --> 00:18:01,049
together

00:17:57,030 --> 00:18:03,600
on a Raspberry Pi on top of Raspberry Pi

00:18:01,049 --> 00:18:05,970
requires making up do-it-yourself board

00:18:03,600 --> 00:18:08,160
I'm currently working on it I already

00:18:05,970 --> 00:18:09,929
have the prototype soldered on a

00:18:08,160 --> 00:18:12,530
breadboard prototyping the next step

00:18:09,929 --> 00:18:19,440
would be to design this board on a kicad

00:18:12,530 --> 00:18:21,840
this is my setup I'm using I'm using

00:18:19,440 --> 00:18:24,510
these pins a general purpose input

00:18:21,840 --> 00:18:27,390
output pins for attaching the DC motors

00:18:24,510 --> 00:18:29,070
I need four pins for this with wiring

00:18:27,390 --> 00:18:34,080
packs explained in the previous slide

00:18:29,070 --> 00:18:37,169
I'm emulating so software they the PBM

00:18:34,080 --> 00:18:40,799
the infrared is attached over here this

00:18:37,169 --> 00:18:42,780
is actually the the only Hardware pvm

00:18:40,799 --> 00:18:47,160
pin that I have on the Raspberry Pi I

00:18:42,780 --> 00:18:49,530
also keep the UART for easier the

00:18:47,160 --> 00:18:51,990
beginning of the board and of course I

00:18:49,530 --> 00:18:53,700
squid I squared C sensors for attaching

00:18:51,990 --> 00:18:58,620
the sense that I have explained on the

00:18:53,700 --> 00:19:01,169
previous slides so getting back to the

00:18:58,620 --> 00:19:03,690
software side of things here is how we

00:19:01,169 --> 00:19:07,049
build our mode of great Linux it's a

00:19:03,690 --> 00:19:09,480
very straightforward process it's very

00:19:07,049 --> 00:19:11,429
easy to do it you just have to follow

00:19:09,480 --> 00:19:13,440
the exact steps which are explained

00:19:11,429 --> 00:19:16,410
actually on two places one of the places

00:19:13,440 --> 00:19:18,660
is the a wiki the second one is the

00:19:16,410 --> 00:19:22,530
official documentation so the process

00:19:18,660 --> 00:19:25,380
has three major steps first you have to

00:19:22,530 --> 00:19:30,000
get the source code as you can see from

00:19:25,380 --> 00:19:33,900
the commands over here a GL is using the

00:19:30,000 --> 00:19:40,549
Google repo to to to keep together all

00:19:33,900 --> 00:19:42,960
the layers for building the distribution

00:19:40,549 --> 00:19:46,230
when if you want to use a specific

00:19:42,960 --> 00:19:48,030
version of automotive-grade Linux this

00:19:46,230 --> 00:19:50,340
is where you have to specify this

00:19:48,030 --> 00:19:52,950
version in general the way I have

00:19:50,340 --> 00:19:56,309
written it here I'm going to use the AGM

00:19:52,950 --> 00:19:57,809
master this is the currently the current

00:19:56,309 --> 00:20:01,240
branch of a Geo that is being in

00:19:57,809 --> 00:20:03,640
developed so this is the cutting edge

00:20:01,240 --> 00:20:05,620
if you want to rely on something more

00:20:03,640 --> 00:20:07,809
stable because you know when when we are

00:20:05,620 --> 00:20:09,580
using the master branch there there is a

00:20:07,809 --> 00:20:11,950
development going on so something might

00:20:09,580 --> 00:20:14,260
not work as expected but if you want to

00:20:11,950 --> 00:20:15,580
use something stable make sure that you

00:20:14,260 --> 00:20:17,710
are using the latest stable version

00:20:15,580 --> 00:20:21,160
version of each year for example darling

00:20:17,710 --> 00:20:23,140
adapt as of the moment after that we

00:20:21,160 --> 00:20:26,260
have to set up the build environment and

00:20:23,140 --> 00:20:30,690
here comes the interesting part because

00:20:26,260 --> 00:20:34,210
with this magical verse here we can

00:20:30,690 --> 00:20:37,630
activate or deactivate certain features

00:20:34,210 --> 00:20:40,929
available in automotive grade Linux for

00:20:37,630 --> 00:20:43,299
my remote commode control robot I don't

00:20:40,929 --> 00:20:45,940
plan to add a display and since there is

00:20:43,299 --> 00:20:48,669
no no display on it I really don't need

00:20:45,940 --> 00:20:50,890
the whole graphical stack so what I'm

00:20:48,669 --> 00:20:54,299
building here is the very very simple

00:20:50,890 --> 00:20:59,740
the very basic automotive grade image

00:20:54,299 --> 00:21:03,570
which is convenient for headless devices

00:20:59,740 --> 00:21:03,570
as the one that I'm building right now

00:21:03,600 --> 00:21:07,809
one more thing to say you need a you

00:21:06,400 --> 00:21:10,929
need a Linux machine to run these

00:21:07,809 --> 00:21:12,580
procedures or it's possible to do it in

00:21:10,929 --> 00:21:15,970
a virtual machine as well but it will

00:21:12,580 --> 00:21:18,220
take quite a lot of time the build of

00:21:15,970 --> 00:21:20,289
the this Linux distribution will take

00:21:18,220 --> 00:21:22,539
some time so please be passionate and

00:21:20,289 --> 00:21:27,490
grab a cup of a cup of coffee while

00:21:22,539 --> 00:21:30,370
you're waiting let's have a look at the

00:21:27,490 --> 00:21:32,890
three most commonly used automotive

00:21:30,370 --> 00:21:34,780
grade Linux images the first one is the

00:21:32,890 --> 00:21:37,030
one that I am actually using for this

00:21:34,780 --> 00:21:39,490
project age your image minimum the bare

00:21:37,030 --> 00:21:43,780
minimum a minimum of automotive grade

00:21:39,490 --> 00:21:45,850
Linux the the other one is IV I IV I

00:21:43,780 --> 00:21:49,470
stands for in-vehicle infotainment and

00:21:45,850 --> 00:21:53,049
finally we have the a GL demo platform

00:21:49,470 --> 00:21:56,710
the a demo platform is the image that

00:21:53,049 --> 00:21:59,320
provides the whole demo UI shipping with

00:21:56,710 --> 00:22:03,789
automotive grade Linux as of today you

00:21:59,320 --> 00:22:06,610
have a bunch of demo applications a home

00:22:03,789 --> 00:22:09,460
screen with a bunch of demo applications

00:22:06,610 --> 00:22:12,640
all these demo applications of as of

00:22:09,460 --> 00:22:13,720
today are written in cute they're

00:22:12,640 --> 00:22:16,120
running on top

00:22:13,720 --> 00:22:21,280
of Weiland and Western and Western is

00:22:16,120 --> 00:22:28,210
relying on Ivy I show to the render so

00:22:21,280 --> 00:22:30,030
how to customize the the image the way

00:22:28,210 --> 00:22:31,900
to customize it is actually

00:22:30,030 --> 00:22:33,400
straightforward if you familiar with the

00:22:31,900 --> 00:22:37,390
Yocto project and openembedded you

00:22:33,400 --> 00:22:40,390
already know how to do it there are two

00:22:37,390 --> 00:22:42,670
key files that you would like to edit

00:22:40,390 --> 00:22:44,770
while you're working still working on

00:22:42,670 --> 00:22:47,110
them on the product the first one is

00:22:44,770 --> 00:22:49,330
called BB layers it contains the list of

00:22:47,110 --> 00:22:51,940
the Yocto layers within the distribution

00:22:49,330 --> 00:22:55,570
and the second one is called conf slash

00:22:51,940 --> 00:22:58,360
local comp where you can customize what

00:22:55,570 --> 00:23:01,780
exactly to get into the image and in

00:22:58,360 --> 00:23:04,770
this example over here I'm adding Col

00:23:01,780 --> 00:23:07,480
York this is the software that I need to

00:23:04,770 --> 00:23:10,150
do scan and control the robot through

00:23:07,480 --> 00:23:12,730
infrared keep in mind that lyric is

00:23:10,150 --> 00:23:15,540
provided by meta openembedded layer and

00:23:12,730 --> 00:23:17,740
this layer is already available in

00:23:15,540 --> 00:23:21,070
automotive grade Linux therefore I have

00:23:17,740 --> 00:23:23,500
not described it in VB layers because it

00:23:21,070 --> 00:23:25,390
already exists for example if you're

00:23:23,500 --> 00:23:30,010
working on a ladder project that

00:23:25,390 --> 00:23:33,070
requires another another software which

00:23:30,010 --> 00:23:36,070
is provided by a layer that doesn't

00:23:33,070 --> 00:23:38,380
exist in automotive grade Linux so today

00:23:36,070 --> 00:23:42,640
you have all also to describe you need

00:23:38,380 --> 00:23:44,890
to describe the layer in BB layers this

00:23:42,640 --> 00:23:47,110
is a quick and dirty way to add new

00:23:44,890 --> 00:23:50,920
packages really quickly but if you want

00:23:47,110 --> 00:23:53,890
to build a new distribution based on

00:23:50,920 --> 00:23:55,360
automotive grade Linux a new product the

00:23:53,890 --> 00:23:58,480
better way is to do the full integration

00:23:55,360 --> 00:24:03,310
to do your own York to recipes and

00:23:58,480 --> 00:24:05,560
finally to have your image based on on

00:24:03,310 --> 00:24:06,880
top of hgo this is how you customizing

00:24:05,560 --> 00:24:13,150
the image just quickly during

00:24:06,880 --> 00:24:16,600
development so I would like to spend

00:24:13,150 --> 00:24:21,910
just a few slides for speaking about how

00:24:16,600 --> 00:24:23,620
to contribute to a AGL upstream so the

00:24:21,910 --> 00:24:25,900
first step if you want to add a new

00:24:23,620 --> 00:24:27,610
project or a new feature within

00:24:25,900 --> 00:24:30,929
automotive-grade Linux

00:24:27,610 --> 00:24:34,059
is to report an issue in JIRA you need a

00:24:30,929 --> 00:24:36,190
an account for Linux Foundation to login

00:24:34,059 --> 00:24:39,490
into the JIRA it's super easy to create

00:24:36,190 --> 00:24:41,020
one you can request a new feature report

00:24:39,490 --> 00:24:44,500
a book that you have experienced and

00:24:41,020 --> 00:24:47,470
once you have this listed the next step

00:24:44,500 --> 00:24:51,809
is you or someone else to modify the

00:24:47,470 --> 00:24:55,030
source code of a GM and to contribute it

00:24:51,809 --> 00:24:57,850
to Garrett it's um it's not mandatory

00:24:55,030 --> 00:25:00,640
but it's nice to include the juror ID

00:24:57,850 --> 00:25:04,419
within the get commit message that will

00:25:00,640 --> 00:25:06,790
appear in Garrett this is easier this is

00:25:04,419 --> 00:25:10,299
a good option to continue tracking the

00:25:06,790 --> 00:25:13,990
progress of this bug within Garrett and

00:25:10,299 --> 00:25:16,320
the git commits have you used Garrett

00:25:13,990 --> 00:25:19,780
how many of you are familiar with it

00:25:16,320 --> 00:25:22,000
okay I would rather say half of the

00:25:19,780 --> 00:25:24,220
people around here so Garrett is some

00:25:22,000 --> 00:25:28,660
open source web-based team code

00:25:24,220 --> 00:25:33,340
cooperation - and its first of all it's

00:25:28,660 --> 00:25:35,320
for number of git repositories it's

00:25:33,340 --> 00:25:37,510
written in Java it's available under

00:25:35,320 --> 00:25:41,169
open source license apache license

00:25:37,510 --> 00:25:42,730
actually so here is how you can create

00:25:41,169 --> 00:25:46,059
this account and get started with

00:25:42,730 --> 00:25:49,929
Garrett and you're actually in a GL here

00:25:46,059 --> 00:25:53,049
is the workflow I've Garrett so we have

00:25:49,929 --> 00:25:57,520
one major repository for for example

00:25:53,049 --> 00:26:00,669
here we have a GL repo this is the the

00:25:57,520 --> 00:26:05,679
repository that holds the manifests for

00:26:00,669 --> 00:26:08,049
the Google repo - that keeps all the

00:26:05,679 --> 00:26:12,220
layers needed to build automotive grade

00:26:08,049 --> 00:26:14,410
Linux so if we want to make a change for

00:26:12,220 --> 00:26:16,809
example to bump the version of a certain

00:26:14,410 --> 00:26:20,320
layer to add a new layer or to remove a

00:26:16,809 --> 00:26:22,690
layer we have to pull this into a

00:26:20,320 --> 00:26:25,150
developer repo on our local machine

00:26:22,690 --> 00:26:29,290
after that we have to make some changes

00:26:25,150 --> 00:26:31,530
and to push them back to Garrett this is

00:26:29,290 --> 00:26:35,590
the Garrett is going to create a

00:26:31,530 --> 00:26:38,559
repository where the pending changes are

00:26:35,590 --> 00:26:40,169
that where the changes are pending for

00:26:38,559 --> 00:26:43,080
review

00:26:40,169 --> 00:26:45,330
there is there are three type of roses

00:26:43,080 --> 00:26:50,009
we didn't Garrett one are the developers

00:26:45,330 --> 00:26:54,269
the people doing the push and pull from

00:26:50,009 --> 00:26:56,039
Garrett from from Garrett do from the

00:26:54,269 --> 00:26:57,570
sorry from the official Garrett

00:26:56,039 --> 00:27:00,239
repository to the one that spending

00:26:57,570 --> 00:27:02,850
reviews the second row are the reviewers

00:27:00,239 --> 00:27:06,090
they can be again developers they have

00:27:02,850 --> 00:27:08,820
to fetch test your changes and give

00:27:06,090 --> 00:27:12,450
their opinion they can vote with plus or

00:27:08,820 --> 00:27:14,639
minus if you have enough positive votes

00:27:12,450 --> 00:27:20,039
the maintainer the third row should

00:27:14,639 --> 00:27:24,409
merge your change within the official

00:27:20,039 --> 00:27:27,809
repository by doing to submit all right

00:27:24,409 --> 00:27:30,419
so you're welcome to automotive-grade

00:27:27,809 --> 00:27:33,570
Linux at any time we have a mailing list

00:27:30,419 --> 00:27:35,580
I highly encourage you to subscribe we

00:27:33,570 --> 00:27:38,940
have a weekly developer call that what

00:27:35,580 --> 00:27:42,929
is doing every Tuesday and we have an

00:27:38,940 --> 00:27:47,190
IRC channel where at the end of the

00:27:42,929 --> 00:27:50,369
presentation so I would like to do a few

00:27:47,190 --> 00:27:52,679
conclusions so according to my

00:27:50,369 --> 00:27:55,200
experience open-source is compressing

00:27:52,679 --> 00:27:57,210
the development cycle for a faster route

00:27:55,200 --> 00:27:59,909
to the market and I think this is a

00:27:57,210 --> 00:28:02,100
great benefit for the whole ecosystem

00:27:59,909 --> 00:28:04,830
because this way you can make your

00:28:02,100 --> 00:28:06,809
products faster and provide them with

00:28:04,830 --> 00:28:08,609
better quality because open source means

00:28:06,809 --> 00:28:11,369
that more and more people are looking

00:28:08,609 --> 00:28:15,539
into a source code and are putting

00:28:11,369 --> 00:28:18,119
efforts to get it better h0 is based on

00:28:15,539 --> 00:28:20,039
on top of already proven open source

00:28:18,119 --> 00:28:22,739
software technologies we mentioned them

00:28:20,039 --> 00:28:27,570
during the presentation like the Yocto

00:28:22,739 --> 00:28:30,659
project openembedded Wayland Weston and

00:28:27,570 --> 00:28:33,480
cute and so on I won't list them all now

00:28:30,659 --> 00:28:35,429
again so Ajo is entirely open source

00:28:33,480 --> 00:28:38,129
project so don't hesitate to contribute

00:28:35,429 --> 00:28:40,049
to it it offers an open-source software

00:28:38,129 --> 00:28:42,179
stack which can be useful not only for

00:28:40,049 --> 00:28:44,909
the automotive industry but for certain

00:28:42,179 --> 00:28:48,359
cases if you doing Internet of Things I

00:28:44,909 --> 00:28:50,849
hope that my experiment with this simple

00:28:48,359 --> 00:28:53,309
remote-control robot proves that's

00:28:50,849 --> 00:28:53,880
possible to do it you have already seen

00:28:53,309 --> 00:28:55,710
how to do

00:28:53,880 --> 00:28:59,660
integration within AGL if you're

00:28:55,710 --> 00:29:03,030
developing another project on top of it

00:28:59,660 --> 00:29:06,840
so what's next in terms of my own hobby

00:29:03,030 --> 00:29:09,900
project for the robot I need to to do a

00:29:06,840 --> 00:29:11,910
better board that is designed in kicad a

00:29:09,900 --> 00:29:14,280
two layer board on which I'll put all

00:29:11,910 --> 00:29:15,780
the components as I explain them in the

00:29:14,280 --> 00:29:19,890
previous slide to get it more

00:29:15,780 --> 00:29:22,440
professionally working in terms of HDL

00:29:19,890 --> 00:29:24,750
the next steps are releasing a stable

00:29:22,440 --> 00:29:27,150
final version of electric eel this is

00:29:24,750 --> 00:29:29,700
going to be the next release of Ajo and

00:29:27,150 --> 00:29:31,200
this is this has to be but this has to

00:29:29,700 --> 00:29:35,610
happen by the end of this year and

00:29:31,200 --> 00:29:38,210
hopefully to have nice presentations for

00:29:35,610 --> 00:29:43,830
the Consumer Electronics Show next year

00:29:38,210 --> 00:29:45,809
starting as of January 2018 we should

00:29:43,830 --> 00:29:48,659
start developing the next release of a

00:29:45,809 --> 00:29:50,730
Geo which is called funky founders

00:29:48,659 --> 00:29:53,490
that's this is the name of fish the code

00:29:50,730 --> 00:29:56,549
names of a phage year are actually names

00:29:53,490 --> 00:29:59,030
of fishes we have to say big thanks to

00:29:56,549 --> 00:30:03,059
what who found in alphabetical order

00:29:59,030 --> 00:30:07,470
names of all those fishes so the sixth

00:30:03,059 --> 00:30:09,419
release of a Geo is funky founders thank

00:30:07,470 --> 00:30:12,059
you very much for joining this

00:30:09,419 --> 00:30:15,840
presentation we have like five or six

00:30:12,059 --> 00:30:18,659
minutes for doing some Q&A session and I

00:30:15,840 --> 00:30:26,820
have listed here a few interesting links

00:30:18,659 --> 00:30:30,030
so thanks and any questions yep robot

00:30:26,820 --> 00:30:31,650
well the problem is that I still don't

00:30:30,030 --> 00:30:34,470
have the whole robot built and I don't

00:30:31,650 --> 00:30:37,200
bring it over here but as soon as I

00:30:34,470 --> 00:30:40,710
design the the board link within kicad

00:30:37,200 --> 00:30:42,450
I'll show it it with it the whole as a

00:30:40,710 --> 00:30:44,610
whole robot and hopefully it will be

00:30:42,450 --> 00:30:47,490
working better than the at the moment

00:30:44,610 --> 00:30:48,539
because it was not in that good shape

00:30:47,490 --> 00:30:51,200
and I left it at home

00:30:48,539 --> 00:30:51,200
yes

00:31:07,090 --> 00:31:13,250
okay so if I hear well the question is

00:31:10,159 --> 00:31:15,259
is there any specific advantages of

00:31:13,250 --> 00:31:17,029
using automotive-grade Linux for hobby

00:31:15,259 --> 00:31:21,740
projects such as this one instead of

00:31:17,029 --> 00:31:24,830
using raspbian yeah okay so yes for

00:31:21,740 --> 00:31:28,309
Hobby projects you can also use raspbian

00:31:24,830 --> 00:31:31,490
the process is similar the advantage of

00:31:28,309 --> 00:31:35,620
using automotive-grade Linux is more for

00:31:31,490 --> 00:31:39,289
projects that are also targeting some

00:31:35,620 --> 00:31:43,519
long-term relationship and even going to

00:31:39,289 --> 00:31:45,889
the market because raspbian is a Debian

00:31:43,519 --> 00:31:48,110
based distribution with desktop when you

00:31:45,889 --> 00:31:50,090
do a headless device like this robot you

00:31:48,110 --> 00:31:52,669
don't actually need the whole graphical

00:31:50,090 --> 00:31:53,059
user interface like x11 that is shipped

00:31:52,669 --> 00:31:57,500
within

00:31:53,059 --> 00:31:59,360
Debian while automotive-grade Linux with

00:31:57,500 --> 00:32:03,529
a headless profile it can be more

00:31:59,360 --> 00:32:05,269
flexible for for the needs of a project

00:32:03,529 --> 00:32:10,940
that doesn't require a display for

00:32:05,269 --> 00:32:14,600
example if you want to do so if you if

00:32:10,940 --> 00:32:17,779
you want to do another device with

00:32:14,600 --> 00:32:19,519
graphical user interface similar to what

00:32:17,779 --> 00:32:24,139
we have in the cars automotive-grade

00:32:19,519 --> 00:32:31,279
Linux can also be useful for that yes

00:32:24,139 --> 00:32:34,450
over there sorry could you please repeat

00:32:31,279 --> 00:32:34,450
it a little bit Walter

00:32:38,230 --> 00:32:43,100
okay so the question is how large is is

00:32:40,850 --> 00:32:45,350
the system image of automotive-grade

00:32:43,100 --> 00:32:50,110
linux I'm not exactly sure

00:32:45,350 --> 00:32:54,820
in terms of megabytes how large is this

00:32:50,110 --> 00:32:58,430
well do you know exactly how big is it

00:32:54,820 --> 00:33:01,730
yes I also don't remember but I believe

00:32:58,430 --> 00:33:04,940
it's below the final image should be

00:33:01,730 --> 00:33:06,980
around 200 megabytes but take my words

00:33:04,940 --> 00:33:11,150
with a pinch of salt I'm not exactly

00:33:06,980 --> 00:33:13,250
sure about the size you can optimize it

00:33:11,150 --> 00:33:16,820
if you if you're searching for a smaller

00:33:13,250 --> 00:33:18,980
size just for a reference that you can

00:33:16,820 --> 00:33:24,610
build a pokey image that's like 30

00:33:18,980 --> 00:33:24,610
megabytes or something like that yes

00:33:27,370 --> 00:33:34,820
okay so the question is what is the boot

00:33:29,720 --> 00:33:36,560
time of a GL on Raspberry Pi 3 I also

00:33:34,820 --> 00:33:38,870
don't have the exact number in seconds

00:33:36,560 --> 00:33:43,040
it depends on the profile the aging

00:33:38,870 --> 00:33:44,930
minimum image boots pretty fast with the

00:33:43,040 --> 00:33:48,950
graphical user interface it could take

00:33:44,930 --> 00:33:49,490
for example like 10 seconds or something

00:33:48,950 --> 00:33:52,040
like that

00:33:49,490 --> 00:33:54,320
it depends on the how how fast and which

00:33:52,040 --> 00:33:59,990
acute applications will be loaded as

00:33:54,320 --> 00:34:02,470
part of the demo image okay one question

00:33:59,990 --> 00:34:02,470
over there

00:34:14,050 --> 00:34:17,770
okay so the question is I'll just repeat

00:34:15,850 --> 00:34:19,990
it the question is regarding the

00:34:17,770 --> 00:34:23,409
licensing of cute within automotive

00:34:19,990 --> 00:34:25,380
grade Linux and more specifically are

00:34:23,409 --> 00:34:28,300
the applications written with the

00:34:25,380 --> 00:34:30,600
open-source license or if proprietary

00:34:28,300 --> 00:34:34,090
license is required did I get it correct

00:34:30,600 --> 00:34:36,490
okay so the applications that we have as

00:34:34,090 --> 00:34:38,770
of today within the demo version of

00:34:36,490 --> 00:34:42,540
automotive-grade linux are under the

00:34:38,770 --> 00:34:46,840
open-source license of cute if you

00:34:42,540 --> 00:34:49,659
require to use a proprietary QT

00:34:46,840 --> 00:34:52,870
applications and to ship them in a GL

00:34:49,659 --> 00:34:56,230
you have to do it as part of your own

00:34:52,870 --> 00:34:58,750
layer because a Gao is open source

00:34:56,230 --> 00:35:00,160
distribution and if you want to

00:34:58,750 --> 00:35:02,460
contribute something to the upstream it

00:35:00,160 --> 00:35:09,070
has to be under an open-source license

00:35:02,460 --> 00:35:10,090
okay any other questions okay thank you

00:35:09,070 --> 00:35:14,090
very much for joining

00:35:10,090 --> 00:35:14,090

YouTube URL: https://www.youtube.com/watch?v=p8QlNYO77J4


