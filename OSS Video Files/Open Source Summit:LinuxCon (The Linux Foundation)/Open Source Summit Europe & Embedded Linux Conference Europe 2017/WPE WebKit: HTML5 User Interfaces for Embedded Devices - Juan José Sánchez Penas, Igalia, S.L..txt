Title: WPE WebKit: HTML5 User Interfaces for Embedded Devices - Juan José Sánchez Penas, Igalia, S.L.
Publication date: 2017-10-25
Playlist: Open Source Summit Europe & Embedded Linux Conference Europe 2017
Description: 
	WPE WebKit: HTML5 User Interfaces for Embedded Devices - Juan José Sánchez Penas, Igalia, S.L.

WPE WebKit, a new WebKit Port optimized for Embedded platforms, has been released recently. WPE is designed for simplicity and performance: a hardware accelerated fullscreen browser with multimedia support, as small (both
in memory usage and disk space) and light as possible, and implementing the most relevant HTML APIs.

WPE is an open source project with a growing community, and it is developed within the ecosystem of the WebKit project, which powers many open source and proprietary web browsers.

In this talk we will explain what is WPE, how the project was born and has evolved, and why it is becoming very popular in embedded devices of many different kinds, where the manufacturers are looking for a simple and fast way of running their HTML5 user interfaces. 

About Juan José Sánchez Penas
Born in 1976 (Galiza, Spain). PhD in Computer Science at UDC (2006). In 2001 I co-founded Igalia, an European open source consultancy specialized in the development of innovative technologies and solutions, with its focus on key upstream projects and communities such as WebKit, Chromium, Linux, Freedesktop.org, GStreamer, V8/JSC, GNOME and Qt. At Igalia, I work on tasks related to R&D and business management. I have given talks in many open source conferences during the past 15 years.
Captions: 
	00:00:00,030 --> 00:00:05,279
hello everybody thanks for being here

00:00:02,120 --> 00:00:10,230
I'm Han scientists I'm going to talk a

00:00:05,279 --> 00:00:14,790
bit about WP WebKit and how we have

00:00:10,230 --> 00:00:19,800
created it to enable the use of html5 in

00:00:14,790 --> 00:00:22,380
low end and embedded devices but before

00:00:19,800 --> 00:00:24,600
starting with the actual content of the

00:00:22,380 --> 00:00:29,429
talk I'd like to tell you a bit about

00:00:24,600 --> 00:00:30,840
myself and the company I work in so I'm

00:00:29,429 --> 00:00:33,570
one of the cofounders of the company

00:00:30,840 --> 00:00:35,579
called agalya we are an open source

00:00:33,570 --> 00:00:40,070
consultancy we created the company in

00:00:35,579 --> 00:00:42,540
2001 and work globally for like

00:00:40,070 --> 00:00:45,000
customers all over the world and how was

00:00:42,540 --> 00:00:48,660
a distributed team of 60 engineers

00:00:45,000 --> 00:00:50,899
currently we are an open-source

00:00:48,660 --> 00:00:53,489
consultancy which means that we have

00:00:50,899 --> 00:00:56,640
teams that work in different open source

00:00:53,489 --> 00:00:59,300
projects in areas such as browsers

00:00:56,640 --> 00:01:01,859
multimedia graphics compilers or

00:00:59,300 --> 00:01:05,790
software-defined networking among other

00:01:01,859 --> 00:01:08,310
things and particularly in the case of

00:01:05,790 --> 00:01:11,360
browsers Galia has been during the last

00:01:08,310 --> 00:01:14,810
10 years one of the top contributors to

00:01:11,360 --> 00:01:18,630
the main open source browser projects

00:01:14,810 --> 00:01:20,909
for example WebKit chromium or Firefox

00:01:18,630 --> 00:01:23,369
and all the components that are related

00:01:20,909 --> 00:01:26,400
to them and what we do is basically

00:01:23,369 --> 00:01:28,799
helping companies in industry which want

00:01:26,400 --> 00:01:31,200
to use this pieces of software in

00:01:28,799 --> 00:01:34,290
different kind kinds of devices in many

00:01:31,200 --> 00:01:38,490
cases things like tablets phones smart

00:01:34,290 --> 00:01:41,490
TVs automotive or lately in the last two

00:01:38,490 --> 00:01:45,030
three years more and more kinds of a

00:01:41,490 --> 00:01:47,579
variety of embedded devices which is

00:01:45,030 --> 00:01:51,810
what I'm going to mainly talk today

00:01:47,579 --> 00:01:54,869
about so the talk I'm going to try to

00:01:51,810 --> 00:01:57,390
split it in three parts that it's clear

00:01:54,869 --> 00:01:59,729
the first one is going to be an

00:01:57,390 --> 00:02:02,009
explanation of the problem that we want

00:01:59,729 --> 00:02:05,009
to solve and why we came up with with

00:02:02,009 --> 00:02:06,750
this new solution that is called WP in

00:02:05,009 --> 00:02:08,319
the second one I will get a bit more

00:02:06,750 --> 00:02:10,899
into detail in the

00:02:08,319 --> 00:02:13,120
about the architecture of WP and the

00:02:10,899 --> 00:02:15,189
functionality and how exactly were it

00:02:13,120 --> 00:02:17,650
works internally and in the third one

00:02:15,189 --> 00:02:20,230
I'll talk a bit more about the how the

00:02:17,650 --> 00:02:22,480
project is nowadays and where we are

00:02:20,230 --> 00:02:25,720
going how how we are thinking about the

00:02:22,480 --> 00:02:29,560
future so let's start with the first

00:02:25,720 --> 00:02:33,579
part the the problem that we want to

00:02:29,560 --> 00:02:35,829
solve I guess this is not a secret for

00:02:33,579 --> 00:02:38,340
anybody here but just in case as you

00:02:35,829 --> 00:02:41,139
know many a many devices are getting

00:02:38,340 --> 00:02:43,629
sophisticated it's very common today

00:02:41,139 --> 00:02:46,060
that that they have some kind of you

00:02:43,629 --> 00:02:49,810
know Linux version with a touchscreen

00:02:46,060 --> 00:02:54,250
and people building them won't want to

00:02:49,810 --> 00:02:55,840
run apps on them this is quite common

00:02:54,250 --> 00:02:58,060
today as I said that it will be even

00:02:55,840 --> 00:03:00,040
more common we know that many companies

00:02:58,060 --> 00:03:02,169
are working in new versions of their

00:03:00,040 --> 00:03:05,260
embedded devices that will be more

00:03:02,169 --> 00:03:06,879
similar to this and at the same time the

00:03:05,260 --> 00:03:08,799
web is a powerful platform is very

00:03:06,879 --> 00:03:10,540
flexible and probably more important

00:03:08,799 --> 00:03:12,639
than that is that many people know it

00:03:10,540 --> 00:03:15,340
and it's kind of in the comfort zone of

00:03:12,639 --> 00:03:18,870
a big amount of developers so it's very

00:03:15,340 --> 00:03:21,370
common to see that these embedded

00:03:18,870 --> 00:03:23,260
manufacturers want to put html5

00:03:21,370 --> 00:03:25,229
applications in their in their touch

00:03:23,260 --> 00:03:28,870
screens

00:03:25,229 --> 00:03:31,090
also in many cases they use in many of

00:03:28,870 --> 00:03:33,069
these cases they exact a case that they

00:03:31,090 --> 00:03:34,780
want to solve is a kind of kiosk mouth

00:03:33,069 --> 00:03:38,109
full screen browser where they are

00:03:34,780 --> 00:03:39,729
running their applications so this is

00:03:38,109 --> 00:03:41,500
kind of the configuration of the use

00:03:39,729 --> 00:03:44,109
case that we want to target with this

00:03:41,500 --> 00:03:45,940
technology and of course it's still low

00:03:44,109 --> 00:03:47,199
and hardware in many cases however it

00:03:45,940 --> 00:03:49,750
doesn't have a lot of memory that

00:03:47,199 --> 00:03:52,479
doesn't have a very powerful deep CPU

00:03:49,750 --> 00:03:54,629
that typically has a GPU that can be

00:03:52,479 --> 00:03:56,769
used but of course there are a lot of

00:03:54,629 --> 00:04:02,680
optimizations that are needed compared

00:03:56,769 --> 00:04:04,540
to more powerful hardware so now that we

00:04:02,680 --> 00:04:07,060
understand the problem the question here

00:04:04,540 --> 00:04:11,079
is ok which solutions can we can we use

00:04:07,060 --> 00:04:13,389
for this of course the solutions need to

00:04:11,079 --> 00:04:16,180
be focused on being lightweight as I

00:04:13,389 --> 00:04:19,209
already explained and we don't need to

00:04:16,180 --> 00:04:21,430
solve all the possible use cases of a

00:04:19,209 --> 00:04:22,120
web browser in this in this particular

00:04:21,430 --> 00:04:24,040
scenario

00:04:22,120 --> 00:04:28,030
we are saying that we want to solve a

00:04:24,040 --> 00:04:29,500
very specific case which is limited so

00:04:28,030 --> 00:04:32,050
we need to look into the different

00:04:29,500 --> 00:04:34,479
alternatives that are available in open

00:04:32,050 --> 00:04:36,729
source and see how good or bad they are

00:04:34,479 --> 00:04:38,430
and the main three ones the obvious

00:04:36,729 --> 00:04:41,220
choice for test for everybody are

00:04:38,430 --> 00:04:44,919
Firefox and their related technologies

00:04:41,220 --> 00:04:48,220
chromium with blink in its core and v8

00:04:44,919 --> 00:04:52,750
as the JavaScript engine or WebKit so

00:04:48,220 --> 00:04:54,370
look a bit into how good they would be

00:04:52,750 --> 00:04:58,270
for this particular problem that I just

00:04:54,370 --> 00:05:01,120
defined the case of Firefox as you know

00:04:58,270 --> 00:05:03,400
I mean it's a very stable technology

00:05:01,120 --> 00:05:07,449
that has been used as a browser for many

00:05:03,400 --> 00:05:10,750
years but already almost 10 years ago

00:05:07,449 --> 00:05:13,900
Mozilla decided that matters or creators

00:05:10,750 --> 00:05:18,669
of new web browsers we're not their

00:05:13,900 --> 00:05:22,900
priority so they are not providing an

00:05:18,669 --> 00:05:26,590
API stable API and actually since really

00:05:22,900 --> 00:05:28,740
2006 2008 many open source browsers

00:05:26,590 --> 00:05:30,910
moved away from from Mozilla

00:05:28,740 --> 00:05:33,460
technologies because of this so it's

00:05:30,910 --> 00:05:36,030
very focused on Firefox as a product and

00:05:33,460 --> 00:05:38,410
it has a quite monolithic architecture

00:05:36,030 --> 00:05:40,360
this could be more interesting now with

00:05:38,410 --> 00:05:42,910
servo this new project by Mozilla that

00:05:40,360 --> 00:05:47,169
tries to rewrite parts of or potentially

00:05:42,910 --> 00:05:48,639
the whole Firefox technology stack but

00:05:47,169 --> 00:05:51,070
it's still too early service just

00:05:48,639 --> 00:05:52,780
partially used inside the Firefox for

00:05:51,070 --> 00:05:56,289
now so it's not really a solution for

00:05:52,780 --> 00:05:59,320
for our case for now the second option

00:05:56,289 --> 00:06:01,780
that I was listing is chromium chromium

00:05:59,320 --> 00:06:04,840
is as you know is the kind of the core

00:06:01,780 --> 00:06:08,380
of google chrome very powerful it has a

00:06:04,840 --> 00:06:10,510
lot of features it implements many women

00:06:08,380 --> 00:06:12,460
standards compared to to alternatives

00:06:10,510 --> 00:06:15,490
but it also has a quite flexible

00:06:12,460 --> 00:06:17,800
architecture itself it needs to be used

00:06:15,490 --> 00:06:21,190
as a whole and it doesn't provide a

00:06:17,800 --> 00:06:24,430
stable API to build your own flavor on

00:06:21,190 --> 00:06:26,349
top of of it so you end up having to

00:06:24,430 --> 00:06:29,380
fork chromium and this is a serious

00:06:26,349 --> 00:06:30,940
issue because I mean you need to make

00:06:29,380 --> 00:06:33,690
sure to be sure that you want to do it

00:06:30,940 --> 00:06:36,009
because it's a very fast-moving project

00:06:33,690 --> 00:06:37,960
I'm working it

00:06:36,009 --> 00:06:40,419
requires a lot of resources to maintain

00:06:37,960 --> 00:06:42,069
the fork and to stay close to to

00:06:40,419 --> 00:06:44,430
upstream there are some interesting

00:06:42,069 --> 00:06:47,289
solutions that are trying to build

00:06:44,430 --> 00:06:50,669
something friendlier for him by there is

00:06:47,289 --> 00:06:53,979
on top of of chromium one of them is CF

00:06:50,669 --> 00:06:56,819
chromium embedded framework and the

00:06:53,979 --> 00:07:00,240
other one is q2 eventing which is how

00:06:56,819 --> 00:07:04,240
cute the graphical toolkit provides

00:07:00,240 --> 00:07:07,330
another webview for putting web content

00:07:04,240 --> 00:07:10,449
there both are interesting but they have

00:07:07,330 --> 00:07:13,029
some issues in general they are not very

00:07:10,449 --> 00:07:15,490
like chromium is not particularly

00:07:13,029 --> 00:07:17,139
optimized for very low-end devices it's

00:07:15,490 --> 00:07:19,199
not like the main target for Google and

00:07:17,139 --> 00:07:21,370
for the community also things like

00:07:19,199 --> 00:07:23,319
Weiland which can be very interesting

00:07:21,370 --> 00:07:25,990
for him for embedded devices

00:07:23,319 --> 00:07:28,379
manufacturers are not really yet very

00:07:25,990 --> 00:07:30,909
well supported for Linux particularly

00:07:28,379 --> 00:07:32,800
and also there are some licensing issues

00:07:30,909 --> 00:07:34,300
is even for some for some users for

00:07:32,800 --> 00:07:37,270
example in the case of killed web engine

00:07:34,300 --> 00:07:40,599
GPL version 3 or commercial license

00:07:37,270 --> 00:07:43,599
which is for some people a very strong

00:07:40,599 --> 00:07:45,909
limitation so it's interesting but not

00:07:43,599 --> 00:07:48,819
really either the perfect solution

00:07:45,909 --> 00:07:50,439
apparently so we can we come to the

00:07:48,819 --> 00:07:53,589
third option that I have in the list

00:07:50,439 --> 00:07:56,259
which is WebKit WebKit is comparable to

00:07:53,589 --> 00:08:00,279
to chromium in many ways as the engine

00:07:56,259 --> 00:08:03,490
there is inside Safari in the different

00:08:00,279 --> 00:08:05,080
platforms that Apple supports it's not

00:08:03,490 --> 00:08:07,599
maybe as complete in terms of

00:08:05,080 --> 00:08:10,990
functionality as chromium but very close

00:08:07,599 --> 00:08:12,759
and it has it does have a very flexible

00:08:10,990 --> 00:08:15,490
architecture it was designed from the

00:08:12,759 --> 00:08:17,769
beginning to support different platforms

00:08:15,490 --> 00:08:20,199
to enable changing components and

00:08:17,769 --> 00:08:22,659
there's a very interesting concept that

00:08:20,199 --> 00:08:24,939
is the port so in WebKit you can create

00:08:22,659 --> 00:08:27,909
your own port of WebKit I will talk more

00:08:24,939 --> 00:08:29,740
about this later but the ports provide a

00:08:27,909 --> 00:08:33,250
stable API that can be maintained

00:08:29,740 --> 00:08:36,039
upstream as part of WebKit in general

00:08:33,250 --> 00:08:38,709
which is very useful for the thing we

00:08:36,039 --> 00:08:41,380
want to do so the cost of maintenance is

00:08:38,709 --> 00:08:44,199
is less because you are doing it as part

00:08:41,380 --> 00:08:46,750
of the community there are really few

00:08:44,199 --> 00:08:48,570
ports that are very well known in WebKit

00:08:46,750 --> 00:08:49,710
some are upstream

00:08:48,570 --> 00:08:51,870
of course the ones that up well

00:08:49,710 --> 00:08:54,390
maintains but also when PTT K for

00:08:51,870 --> 00:08:56,550
example which is very book very and well

00:08:54,390 --> 00:08:59,160
known in the Linda's desktop are many

00:08:56,550 --> 00:09:00,930
downstream ones maintained in different

00:08:59,160 --> 00:09:02,760
places some of them proprietary some of

00:09:00,930 --> 00:09:04,950
the open source but outside of the

00:09:02,760 --> 00:09:08,580
absent three

00:09:04,950 --> 00:09:11,910
one example is EF l QD WebKit is another

00:09:08,580 --> 00:09:14,790
one Sony uses the wrong in their

00:09:11,910 --> 00:09:18,000
architectures etc there are many really

00:09:14,790 --> 00:09:19,410
here but none of them is really exactly

00:09:18,000 --> 00:09:21,570
what we were looking for either they are

00:09:19,410 --> 00:09:23,250
not targeting embedded low-end devices

00:09:21,570 --> 00:09:24,720
so we decided that well it was a very

00:09:23,250 --> 00:09:29,220
good choice but we wanted to create a

00:09:24,720 --> 00:09:33,120
new part specific for this use case that

00:09:29,220 --> 00:09:35,370
I defined before so this hopefully

00:09:33,120 --> 00:09:39,090
explains why it was needed to create

00:09:35,370 --> 00:09:42,780
something a little bit new now I will

00:09:39,090 --> 00:09:46,890
discuss further how exactly we created

00:09:42,780 --> 00:09:48,750
it so what is WP well first I need to

00:09:46,890 --> 00:09:50,490
splaying because I guess in the audience

00:09:48,750 --> 00:09:51,960
not everybody is familiar with the

00:09:50,490 --> 00:09:56,550
architecture of WebKit a little bit

00:09:51,960 --> 00:09:59,940
about how WebKit is structured so this

00:09:56,550 --> 00:10:01,830
picture shows very simplified the

00:09:59,940 --> 00:10:03,240
different components that you have when

00:10:01,830 --> 00:10:05,870
you are trying to create a browser which

00:10:03,240 --> 00:10:08,340
is the application there using WebKit

00:10:05,870 --> 00:10:11,220
that's a big part that is called web

00:10:08,340 --> 00:10:12,930
core that is reusable for potentially

00:10:11,220 --> 00:10:15,270
all the parts of WebKit and then there

00:10:12,930 --> 00:10:19,560
are plants which are blue and orange

00:10:15,270 --> 00:10:21,750
there that are specific for its part so

00:10:19,560 --> 00:10:23,640
the blue one is the layer that the

00:10:21,750 --> 00:10:26,010
application developers will use the

00:10:23,640 --> 00:10:29,370
browser developers in this case will use

00:10:26,010 --> 00:10:31,920
to access to the other functionality of

00:10:29,370 --> 00:10:34,680
the port and the orange ones are all the

00:10:31,920 --> 00:10:36,090
connections to the specific libraries in

00:10:34,680 --> 00:10:38,970
the platform that you are going to use

00:10:36,090 --> 00:10:42,150
to actually do what you want to do with

00:10:38,970 --> 00:10:43,590
the browser and there's of course a

00:10:42,150 --> 00:10:45,510
JavaScript engine which in WebKit

00:10:43,590 --> 00:10:48,950
typically is javascriptcore although

00:10:45,510 --> 00:10:51,450
potentially you could use another one so

00:10:48,950 --> 00:10:53,040
this means that different parts of

00:10:51,450 --> 00:10:54,900
WebKit share a lot of code but at the

00:10:53,040 --> 00:10:56,610
same time can become very specific to

00:10:54,900 --> 00:11:00,360
the target platforms that they are

00:10:56,610 --> 00:11:01,860
trying to work on for example in this

00:11:00,360 --> 00:11:02,490
picture you can see how this becomes

00:11:01,860 --> 00:11:06,209
more

00:11:02,490 --> 00:11:09,240
specific for two ports the web PTT k

00:11:06,209 --> 00:11:11,700
port and the cute port so in the case of

00:11:09,240 --> 00:11:15,000
the GDK port that will be a real live d

00:11:11,700 --> 00:11:17,370
object g TK friendly api that you could

00:11:15,000 --> 00:11:22,050
use to create applications potentially a

00:11:17,370 --> 00:11:24,360
browser and then in the orange square

00:11:22,050 --> 00:11:26,790
there you can see that you use a list of

00:11:24,360 --> 00:11:29,550
libraries for example gstreamer for

00:11:26,790 --> 00:11:32,339
media content or a TK for accessibility

00:11:29,550 --> 00:11:35,610
and a list of other things that you need

00:11:32,339 --> 00:11:39,270
to bind the generic implementation of

00:11:35,610 --> 00:11:41,490
web get to your specific platform so

00:11:39,270 --> 00:11:43,230
this was just to explain to explain the

00:11:41,490 --> 00:11:46,770
what is a part because we are here

00:11:43,230 --> 00:11:48,570
explaining a new part of WebKit what are

00:11:46,770 --> 00:11:50,670
the key requirements of this port I

00:11:48,570 --> 00:11:55,980
already mentioned some but they want to

00:11:50,670 --> 00:11:58,290
get a bit more complete now again we

00:11:55,980 --> 00:12:00,270
initially we are going to be targeting

00:11:58,290 --> 00:12:02,160
full screen content it's not true

00:12:00,270 --> 00:12:03,510
anymore because W be involved and it

00:12:02,160 --> 00:12:05,130
doesn't supports other things but like

00:12:03,510 --> 00:12:06,660
the main use case is full screen you

00:12:05,130 --> 00:12:10,320
have something full screen you ran a set

00:12:06,660 --> 00:12:11,940
up applications there which are html5 we

00:12:10,320 --> 00:12:15,329
want it to be fast and lightweight like

00:12:11,940 --> 00:12:18,839
waiting in terms of memory but also the

00:12:15,329 --> 00:12:20,850
space you need in disk or of course the

00:12:18,839 --> 00:12:24,180
amount of CPU that you are going to be

00:12:20,850 --> 00:12:25,980
using and also very important we want a

00:12:24,180 --> 00:12:27,589
minimal set of dependencies we weren't

00:12:25,980 --> 00:12:31,370
really to keep it as small as possible

00:12:27,589 --> 00:12:34,380
in all these different minions of small

00:12:31,370 --> 00:12:36,570
but at the same time because of I mean

00:12:34,380 --> 00:12:39,120
because as I said before the embedded

00:12:36,570 --> 00:12:42,630
devices are getting sophisticated we

00:12:39,120 --> 00:12:45,839
need to support almost all the typical

00:12:42,630 --> 00:12:48,450
HTML features particularly we need to

00:12:45,839 --> 00:12:51,450
support WebGL we want to have

00:12:48,450 --> 00:12:54,839
accelerated canvas and of course because

00:12:51,450 --> 00:12:57,120
this is a demand by every user of the of

00:12:54,839 --> 00:13:00,300
the port nowadays accelerated hardware

00:12:57,120 --> 00:13:01,950
transition CSS transitions and also

00:13:00,300 --> 00:13:07,410
video playback which needs to be

00:13:01,950 --> 00:13:09,270
accelerated as well so it's pretty quite

00:13:07,410 --> 00:13:12,390
a long list of interesting things here

00:13:09,270 --> 00:13:14,640
so how we decided to do this the

00:13:12,390 --> 00:13:16,470
creation of this new port well we took

00:13:14,640 --> 00:13:19,320
one PT decay as

00:13:16,470 --> 00:13:21,870
and there's a starting point and then we

00:13:19,320 --> 00:13:25,710
decided that this is a very mature part

00:13:21,870 --> 00:13:28,770
it has been maintained for 15 years now

00:13:25,710 --> 00:13:30,600
and we want to use part of it that is

00:13:28,770 --> 00:13:33,390
very stable at the same time we want to

00:13:30,600 --> 00:13:35,340
rethink the whole structure so we want

00:13:33,390 --> 00:13:38,640
to remove the toolkit completely took it

00:13:35,340 --> 00:13:40,500
layer DTK disappears and we want to make

00:13:38,640 --> 00:13:43,680
it platform agnostic platform meaning

00:13:40,500 --> 00:13:45,600
the graphical stack that we are going to

00:13:43,680 --> 00:13:48,540
use I will talk more about this in the

00:13:45,600 --> 00:13:53,010
next slide for media we are going to use

00:13:48,540 --> 00:13:55,620
this dreamer which is almost the obvious

00:13:53,010 --> 00:13:58,230
choice for Linux and we use JavaScript

00:13:55,620 --> 00:14:02,030
call as as the JavaScript engine we

00:13:58,230 --> 00:14:04,380
reduced the list of dependencies to few

00:14:02,030 --> 00:14:06,050
important libraries some of them are

00:14:04,380 --> 00:14:10,800
there most of them are there actually

00:14:06,050 --> 00:14:12,960
and we use the GL es 4 for hardware

00:14:10,800 --> 00:14:16,850
accelerated rendering so everything is

00:14:12,960 --> 00:14:19,980
going to be very connected to to OpenGL

00:14:16,850 --> 00:14:23,370
the architecture is quite complex in the

00:14:19,980 --> 00:14:25,890
box that I mentioned earlier I was I

00:14:23,370 --> 00:14:28,050
didn't get into detail about for example

00:14:25,890 --> 00:14:30,240
the blue box here but the blue box hides

00:14:28,050 --> 00:14:33,300
quite quite a lot of complexity in terms

00:14:30,240 --> 00:14:37,220
of multi-threading so in our port we

00:14:33,300 --> 00:14:39,780
also implement quite a lot of different

00:14:37,220 --> 00:14:41,520
processes and threads there so for

00:14:39,780 --> 00:14:43,320
example there is a process for the UI a

00:14:41,520 --> 00:14:45,810
process for the web which is kind of the

00:14:43,320 --> 00:14:47,580
rendering one for the network one for

00:14:45,810 --> 00:14:50,160
the storage and potentially there could

00:14:47,580 --> 00:14:52,620
be more and at the same time there is a

00:14:50,160 --> 00:14:54,930
heavy use of threading as well for

00:14:52,620 --> 00:14:59,970
performance reasons in composition image

00:14:54,930 --> 00:15:01,500
decoding or or even in media playback so

00:14:59,970 --> 00:15:03,180
this is kind of the key ideas of the

00:15:01,500 --> 00:15:05,070
architecture at the same time there's a

00:15:03,180 --> 00:15:05,940
an even more important one that is the

00:15:05,070 --> 00:15:09,200
concept of

00:15:05,940 --> 00:15:09,200
backends yes

00:15:18,089 --> 00:15:22,800
both there so long I'm sorry about this

00:15:20,850 --> 00:15:25,079
but the short summer the short answer is

00:15:22,800 --> 00:15:28,350
that the kid WebKit is not upstream so

00:15:25,079 --> 00:15:30,930
it's kind of downstream think you'd like

00:15:28,350 --> 00:15:32,579
mein cute move to chromium so what could

00:15:30,930 --> 00:15:36,000
you take a is really developed as part

00:15:32,579 --> 00:15:41,579
of upstream WebKit and it's it's more

00:15:36,000 --> 00:15:43,670
interesting choice today okay so the

00:15:41,579 --> 00:15:45,959
other thing I was going to say is that

00:15:43,670 --> 00:15:47,880
on top of these key ideas for the

00:15:45,959 --> 00:15:48,899
architecture we are also we came up also

00:15:47,880 --> 00:15:52,230
with the idea of having different

00:15:48,899 --> 00:15:54,449
graphical backends typically in WebKit

00:15:52,230 --> 00:15:57,209
the configuration will be that you have

00:15:54,449 --> 00:16:00,000
the generic part and the poor part we

00:15:57,209 --> 00:16:01,170
have here in this particular WP port we

00:16:00,000 --> 00:16:03,420
have a third part which is the

00:16:01,170 --> 00:16:06,410
geographical backends the main goal here

00:16:03,420 --> 00:16:11,120
is to have a very efficient way of using

00:16:06,410 --> 00:16:14,160
the buffers where we are going to render

00:16:11,120 --> 00:16:16,649
independently from the specific stack

00:16:14,160 --> 00:16:18,449
that we use so that the generic part of

00:16:16,649 --> 00:16:20,310
WebKit doesn't really care about if we

00:16:18,449 --> 00:16:23,670
are using Wayland or we are using live

00:16:20,310 --> 00:16:25,920
TV Tim BM sorry or native

00:16:23,670 --> 00:16:27,870
implementations such as the ones in the

00:16:25,920 --> 00:16:32,010
raspberry pi with a Broadcom stacked

00:16:27,870 --> 00:16:33,510
welcome provided drivers so basically

00:16:32,010 --> 00:16:37,800
the backends are libraries that are

00:16:33,510 --> 00:16:39,690
separate from WebKit WP and you can link

00:16:37,800 --> 00:16:39,959
them depending on the one you want to

00:16:39,690 --> 00:16:42,870
use

00:16:39,959 --> 00:16:46,440
they will provide the rendering targets

00:16:42,870 --> 00:16:50,100
and also display a way to display the

00:16:46,440 --> 00:16:52,260
contents in the screen for now we are

00:16:50,100 --> 00:16:54,360
focusing on OpenGL but we have also

00:16:52,260 --> 00:16:56,430
already people from our graphics team

00:16:54,360 --> 00:16:58,560
looking into how to support will come

00:16:56,430 --> 00:17:00,540
down the line so in the coming months we

00:16:58,560 --> 00:17:03,569
will be working on bulking support as

00:17:00,540 --> 00:17:05,970
well if you take a look to the available

00:17:03,569 --> 00:17:09,270
backends you will see a really a few of

00:17:05,970 --> 00:17:12,179
them which are quite mature so let this

00:17:09,270 --> 00:17:14,699
one called live DVM which we use when

00:17:12,179 --> 00:17:16,410
the hardware is Intel AMD with the open

00:17:14,699 --> 00:17:19,740
source Nvidia drivers this is one called

00:17:16,410 --> 00:17:22,919
Wayland ETL which is Wayland internally

00:17:19,740 --> 00:17:25,799
and who use for example when we have our

00:17:22,919 --> 00:17:28,020
moly drivers there's a like the main one

00:17:25,799 --> 00:17:29,750
that we are using for now is the third

00:17:28,020 --> 00:17:33,240
one there live wave

00:17:29,750 --> 00:17:35,640
leave WP back-end RDK is called in the

00:17:33,240 --> 00:17:38,430
in the repository and it supports the

00:17:35,640 --> 00:17:40,250
raspberry pi and a few other target

00:17:38,430 --> 00:17:42,360
harbors that are very important for us

00:17:40,250 --> 00:17:44,310
we are also working on experimental

00:17:42,360 --> 00:17:49,890
back-end for android it's all really

00:17:44,310 --> 00:17:51,930
works but it's still not fully public ok

00:17:49,890 --> 00:17:54,150
so the architecture is a combination of

00:17:51,930 --> 00:17:56,910
traditional WebKit port ideas with this

00:17:54,150 --> 00:17:59,040
concept of backends which make this port

00:17:56,910 --> 00:18:01,590
a little bit more flexible in terms of

00:17:59,040 --> 00:18:03,330
what we can support I was mentioning

00:18:01,590 --> 00:18:05,190
before that one of the key goals is

00:18:03,330 --> 00:18:08,700
being lightweight so I wanted to comment

00:18:05,190 --> 00:18:10,440
a bit about how true it is we are using

00:18:08,700 --> 00:18:12,360
the different raspberry PI's as kind of

00:18:10,440 --> 00:18:14,850
the referent hardware we support many

00:18:12,360 --> 00:18:17,250
other things but the raspberry PI's 0 to

00:18:14,850 --> 00:18:20,970
3 are kind of once we are using for

00:18:17,250 --> 00:18:22,440
checking regulations developing in a way

00:18:20,970 --> 00:18:24,420
that that we make sure that the

00:18:22,440 --> 00:18:28,200
performance is good we also use desktop

00:18:24,420 --> 00:18:29,970
of course for main development currently

00:18:28,200 --> 00:18:35,190
for some configurations you can have

00:18:29,970 --> 00:18:38,220
fully working WP in only 40 megabytes in

00:18:35,190 --> 00:18:41,160
disk and in the memory footprint when

00:18:38,220 --> 00:18:44,460
it's working and rendering relatively

00:18:41,160 --> 00:18:47,070
simple web applications is lower than

00:18:44,460 --> 00:18:48,930
100 mega so we have customers that are

00:18:47,070 --> 00:18:51,960
using these in devices where they have

00:18:48,930 --> 00:18:54,210
200 magazine total you 100 for the away

00:18:51,960 --> 00:18:57,600
as 100 for the web applications and it

00:18:54,210 --> 00:19:00,030
works and we can play things like

00:18:57,600 --> 00:19:02,580
YouTube TV fully supported with all the

00:19:00,030 --> 00:19:05,190
functionality required there in the rest

00:19:02,580 --> 00:19:08,720
of the pi-1 even in the 0 with with some

00:19:05,190 --> 00:19:10,650
limitations so it's quite lightweight

00:19:08,720 --> 00:19:13,080
another thing that I want to highlight

00:19:10,650 --> 00:19:16,440
is that we are putting a lot of effort

00:19:13,080 --> 00:19:18,540
in media support this is because the

00:19:16,440 --> 00:19:21,450
main use case of WP at the beginning was

00:19:18,540 --> 00:19:25,800
was media playing I will discuss this a

00:19:21,450 --> 00:19:28,230
bit more in a few slides so we are being

00:19:25,800 --> 00:19:31,440
very careful with having Hardware

00:19:28,230 --> 00:19:32,790
accelerative decoding we use this

00:19:31,440 --> 00:19:34,590
treatment for that so it's quite

00:19:32,790 --> 00:19:37,890
powerful it brings a lot of

00:19:34,590 --> 00:19:40,290
functionality already and also hardware

00:19:37,890 --> 00:19:41,760
accelerated reader rendering again

00:19:40,290 --> 00:19:42,720
because we want to support

00:19:41,760 --> 00:19:44,210
transformation

00:19:42,720 --> 00:19:49,860
top of the way we want to support

00:19:44,210 --> 00:19:51,990
modifying the video with CSS we in very

00:19:49,860 --> 00:19:54,539
specific cases can can use external

00:19:51,990 --> 00:19:56,580
rendering which is not ideal but can be

00:19:54,539 --> 00:20:00,140
used when you really want something very

00:19:56,580 --> 00:20:03,270
powerful in a very very low-end device

00:20:00,140 --> 00:20:07,380
we are working hard in supporting these

00:20:03,270 --> 00:20:10,110
three standards MSE is fully supported

00:20:07,380 --> 00:20:13,200
already MSE is this media source

00:20:10,110 --> 00:20:14,970
extensions that enable to complement the

00:20:13,200 --> 00:20:18,049
behavior of the video tags with

00:20:14,970 --> 00:20:20,280
JavaScript and is used by many

00:20:18,049 --> 00:20:22,919
well-known content providers including

00:20:20,280 --> 00:20:25,620
YouTube as well so we passed the

00:20:22,919 --> 00:20:28,380
conformance test 2016 we are working on

00:20:25,620 --> 00:20:30,870
the new one we support fully and before

00:20:28,380 --> 00:20:35,490
and we are working on WebM so that we

00:20:30,870 --> 00:20:38,850
can enable also vp8 and vp9 at the same

00:20:35,490 --> 00:20:43,140
time we have a team working on media on

00:20:38,850 --> 00:20:45,120
encrypted media extensions eme the

00:20:43,140 --> 00:20:47,210
version 1 so-called is a really

00:20:45,120 --> 00:20:50,850
supportive as well so you can basically

00:20:47,210 --> 00:20:53,100
buy content in YouTube and play it and

00:20:50,850 --> 00:20:56,159
we are working on what is called the

00:20:53,100 --> 00:20:57,929
version 3 the latest one which is has a

00:20:56,159 --> 00:21:01,980
better architecture is object-oriented

00:20:57,929 --> 00:21:05,610
uses promises and there we want to

00:21:01,980 --> 00:21:07,650
support the difference CDM is including

00:21:05,610 --> 00:21:10,169
play ready and well vine the in the

00:21:07,650 --> 00:21:11,700
version 1 we only support play ready who

00:21:10,169 --> 00:21:14,070
are working on the open so as part of

00:21:11,700 --> 00:21:16,549
these of course hear me defines how the

00:21:14,070 --> 00:21:20,250
open source part needs to talk to the

00:21:16,549 --> 00:21:22,380
proprietary software here and the third

00:21:20,250 --> 00:21:23,280
one that we are also a working hard on

00:21:22,380 --> 00:21:26,039
his web RTC

00:21:23,280 --> 00:21:28,200
which is a priority for our users we

00:21:26,039 --> 00:21:31,980
initially created a prototype using open

00:21:28,200 --> 00:21:34,140
web RTC which was just immer based but

00:21:31,980 --> 00:21:37,200
it had some limitations because open

00:21:34,140 --> 00:21:39,240
word this is not really well maintained

00:21:37,200 --> 00:21:40,799
nowadays so we decided now to start

00:21:39,240 --> 00:21:43,169
using live over TC which is the same

00:21:40,799 --> 00:21:45,240
library that Chrome moon and Firefox are

00:21:43,169 --> 00:21:47,700
using originally created for chromium

00:21:45,240 --> 00:21:49,440
and we have a review a prototype of this

00:21:47,700 --> 00:21:51,450
working and are having we are having

00:21:49,440 --> 00:21:52,919
features on top of it we are in

00:21:51,450 --> 00:21:55,679
collaboration with Apple which is also

00:21:52,919 --> 00:21:57,110
planning to use this for their port in

00:21:55,679 --> 00:21:59,370
web

00:21:57,110 --> 00:22:04,890
so they said this is strong focus on

00:21:59,370 --> 00:22:06,990
media again and this finishes the second

00:22:04,890 --> 00:22:09,740
part which was highlight of the

00:22:06,990 --> 00:22:12,720
application of the architecture of WP

00:22:09,740 --> 00:22:14,280
the main ideas we handed the back ends

00:22:12,720 --> 00:22:16,830
and the end the strong focus on media

00:22:14,280 --> 00:22:18,180
trying to keep everything light wave so

00:22:16,830 --> 00:22:21,810
now the question is how is the port

00:22:18,180 --> 00:22:23,790
doing what's the status today so I want

00:22:21,810 --> 00:22:25,260
to go a bit back and understand the a

00:22:23,790 --> 00:22:27,980
little bit more about the history of

00:22:25,260 --> 00:22:31,200
this port we started the project in 2014

00:22:27,980 --> 00:22:32,640
it was an internal experiment trying to

00:22:31,200 --> 00:22:35,990
use all the knowledge of being working

00:22:32,640 --> 00:22:39,330
name browsers for the last 10 years

00:22:35,990 --> 00:22:42,420
after that we understood that it had a

00:22:39,330 --> 00:22:44,820
lot of potential and we put a team and

00:22:42,420 --> 00:22:47,760
permanent team working on it for for the

00:22:44,820 --> 00:22:50,190
last two and a half years and they made

00:22:47,760 --> 00:22:53,250
this year so a few months ago it became

00:22:50,190 --> 00:22:56,790
fully integrated in upstream WebKit so

00:22:53,250 --> 00:22:59,820
now it's fully accepted open source part

00:22:56,790 --> 00:23:00,630
of the project we have a stable team

00:22:59,820 --> 00:23:02,370
working on it

00:23:00,630 --> 00:23:04,020
pretty big team and we have a community

00:23:02,370 --> 00:23:05,790
that is growing so we have now started

00:23:04,020 --> 00:23:07,310
contributors other companies that are

00:23:05,790 --> 00:23:10,560
using it or companies that are

00:23:07,310 --> 00:23:12,240
contributing things there are also other

00:23:10,560 --> 00:23:14,550
companies that are even taking it and

00:23:12,240 --> 00:23:16,710
creating the wrong proprietary solution

00:23:14,550 --> 00:23:19,050
and eventually contributing some things

00:23:16,710 --> 00:23:20,700
back and functionally it's quite

00:23:19,050 --> 00:23:22,500
complete it can be used for many things

00:23:20,700 --> 00:23:25,230
there's still things that need to be

00:23:22,500 --> 00:23:28,830
improved but it's really quite stable

00:23:25,230 --> 00:23:30,960
and quite mature actually I can talk a

00:23:28,830 --> 00:23:33,390
bit about adoption I mean this is a port

00:23:30,960 --> 00:23:34,890
that even when it's young as an upstream

00:23:33,390 --> 00:23:38,910
port it has been developed for a while

00:23:34,890 --> 00:23:41,220
and it's really used by some companies a

00:23:38,910 --> 00:23:43,140
big part of the work was initially and

00:23:41,220 --> 00:23:45,510
still now sponsored by metrological

00:23:43,140 --> 00:23:48,000
which is a media company that is a

00:23:45,510 --> 00:23:50,550
provider inside the Artic a consortium

00:23:48,000 --> 00:23:54,990
for a companies big companies such as

00:23:50,550 --> 00:23:57,330
Comcast or Liberty global and they

00:23:54,990 --> 00:23:59,670
basically use WP as one of the key

00:23:57,330 --> 00:24:02,160
pieces in the architecture in the

00:23:59,670 --> 00:24:05,760
platform that they have for set up boxes

00:24:02,160 --> 00:24:07,620
and the WP is already deployed in more

00:24:05,760 --> 00:24:10,020
than 10 million city boxes by these

00:24:07,620 --> 00:24:12,150
companies mainly by Comcast but

00:24:10,020 --> 00:24:16,650
liberty is also starting to deploy it

00:24:12,150 --> 00:24:18,540
and the number is growing very fast at

00:24:16,650 --> 00:24:21,960
the same time although this was the

00:24:18,540 --> 00:24:25,580
initial use case the port has proven to

00:24:21,960 --> 00:24:29,130
be quite useful for other examples other

00:24:25,580 --> 00:24:31,470
matters and we have been seeing in the

00:24:29,130 --> 00:24:33,660
last year a lot of companies coming to

00:24:31,470 --> 00:24:39,080
WP and deciding to use it for things

00:24:33,660 --> 00:24:43,140
like elevators speakers vending machines

00:24:39,080 --> 00:24:45,000
cameras printers a lot of different use

00:24:43,140 --> 00:24:46,500
cases where you share this idea of

00:24:45,000 --> 00:24:50,150
having a touch screen where you want to

00:24:46,500 --> 00:24:53,540
put some html5 applications and you have

00:24:50,150 --> 00:24:55,890
hardware that is not extremely powerful

00:24:53,540 --> 00:24:57,870
this means that we have been having

00:24:55,890 --> 00:25:00,150
support for new hardware in the last

00:24:57,870 --> 00:25:02,460
month you have seen already a few

00:25:00,150 --> 00:25:04,110
backends and they are being more and

00:25:02,460 --> 00:25:07,470
more complete in terms of supporting new

00:25:04,110 --> 00:25:08,820
hardware but still there's a case that

00:25:07,470 --> 00:25:10,920
we don't support and we are still

00:25:08,820 --> 00:25:12,690
working on increasing this list as much

00:25:10,920 --> 00:25:15,870
as possible with new Akane's or with

00:25:12,690 --> 00:25:21,900
making the available backends most more

00:25:15,870 --> 00:25:23,580
complete and they I wanted to talk a bit

00:25:21,900 --> 00:25:25,830
also about where we are putting the

00:25:23,580 --> 00:25:27,990
effort nowadays where which areas are

00:25:25,830 --> 00:25:30,030
the ones where we are our team is

00:25:27,990 --> 00:25:32,520
working harder so that we complement

00:25:30,030 --> 00:25:34,710
what we have with new stuff one of the

00:25:32,520 --> 00:25:36,720
things is releases until now the port

00:25:34,710 --> 00:25:38,820
has been like developing like crazy

00:25:36,720 --> 00:25:40,710
preparing for upstream so we didn't put

00:25:38,820 --> 00:25:43,800
a lot of effort in making stable

00:25:40,710 --> 00:25:45,390
releases now we are doing it we have a

00:25:43,800 --> 00:25:48,060
team preparing the first release now

00:25:45,390 --> 00:25:50,100
it's coming out in a couple of weeks and

00:25:48,060 --> 00:25:51,840
we will be doing this every six months

00:25:50,100 --> 00:25:54,360
stable releases every six months with

00:25:51,840 --> 00:25:56,010
intermediate releases in the middle in a

00:25:54,360 --> 00:25:59,730
very similar way to how they work we do

00:25:56,010 --> 00:26:01,350
take a port does this for now they will

00:25:59,730 --> 00:26:03,780
be kind of preview releases we are not

00:26:01,350 --> 00:26:06,180
going to commit to fully stable API is

00:26:03,780 --> 00:26:08,910
but after a while they will became fully

00:26:06,180 --> 00:26:12,060
stable and we will guarantee backwards

00:26:08,910 --> 00:26:14,040
compatibility for future releases so

00:26:12,060 --> 00:26:15,810
this is one thing that for us is is very

00:26:14,040 --> 00:26:18,420
important the other one the second one

00:26:15,810 --> 00:26:21,390
is improving the QA infrastructure this

00:26:18,420 --> 00:26:23,520
is there's a very strong QA processing

00:26:21,390 --> 00:26:23,910
in WebKit upstream there's a huge amount

00:26:23,520 --> 00:26:26,460
of

00:26:23,910 --> 00:26:27,990
tests there are billboards or continuous

00:26:26,460 --> 00:26:30,450
there's continuous integration of course

00:26:27,990 --> 00:26:33,060
but we want to extend this more to to

00:26:30,450 --> 00:26:35,370
all the supported hardware we want to

00:26:33,060 --> 00:26:38,010
really make sure that when we do new

00:26:35,370 --> 00:26:40,410
release there things are still working

00:26:38,010 --> 00:26:42,030
and what is even more difficult to prove

00:26:40,410 --> 00:26:43,890
sometimes there are no performance

00:26:42,030 --> 00:26:46,920
regressions in all the different

00:26:43,890 --> 00:26:49,380
platforms so we are building in we are

00:26:46,920 --> 00:26:51,150
building a farm basically of metal

00:26:49,380 --> 00:27:15,240
devices where we are going to be testing

00:26:51,150 --> 00:27:18,510
all these continuously hello okay it's a

00:27:15,240 --> 00:27:21,060
QA another thing is the documentation

00:27:18,510 --> 00:27:22,680
documentation again it was not very

00:27:21,060 --> 00:27:25,410
complete we are working in architectural

00:27:22,680 --> 00:27:27,810
documentation API documentation there

00:27:25,410 --> 00:27:29,990
will be and in the coming weeks crated

00:27:27,810 --> 00:27:33,990
website coming out with all the details

00:27:29,990 --> 00:27:36,750
and then in terms of technical work we

00:27:33,990 --> 00:27:39,090
are also heavily working in in those six

00:27:36,750 --> 00:27:41,520
areas that you can see there the first

00:27:39,090 --> 00:27:43,140
one is we are adjusting some things in

00:27:41,520 --> 00:27:45,060
the graphical architecture because we

00:27:43,140 --> 00:27:47,900
want to make sure that we are

00:27:45,060 --> 00:27:50,190
competitive all the time with all the

00:27:47,900 --> 00:27:51,990
improvements at for example chromium is

00:27:50,190 --> 00:27:54,930
doing so we are trying to simplify some

00:27:51,990 --> 00:27:57,000
of the layers potentially replace some

00:27:54,930 --> 00:27:58,620
of the libraries we will see there's a

00:27:57,000 --> 00:28:01,020
lot of ideas that were starting to work

00:27:58,620 --> 00:28:04,110
on them of course we need to keep

00:28:01,020 --> 00:28:06,540
working on eme MSE and no RTC as you saw

00:28:04,110 --> 00:28:07,710
before they are very important for us we

00:28:06,540 --> 00:28:09,900
have some support that we want to

00:28:07,710 --> 00:28:11,810
support the new versions and it's a lot

00:28:09,900 --> 00:28:15,660
of work really to make all that work

00:28:11,810 --> 00:28:17,960
properly we are defining a plan for the

00:28:15,660 --> 00:28:21,300
fascinating to improve the networking

00:28:17,960 --> 00:28:22,560
stack particularly live soup is some

00:28:21,300 --> 00:28:23,940
issues we are going to take over the

00:28:22,560 --> 00:28:26,340
maintainer ship we are going to improve

00:28:23,940 --> 00:28:28,290
it and we are going to improve some

00:28:26,340 --> 00:28:32,010
things in the security and on the

00:28:28,290 --> 00:28:34,419
browser side including better better Sun

00:28:32,010 --> 00:28:36,399
boxing for example

00:28:34,419 --> 00:28:38,190
we have a started already working in

00:28:36,399 --> 00:28:40,659
some other standards for example

00:28:38,190 --> 00:28:43,059
webdriver is already fully supported

00:28:40,659 --> 00:28:45,610
very recently was added we're working

00:28:43,059 --> 00:28:47,380
now we're GL to full support and we are

00:28:45,610 --> 00:28:50,980
even experimenting with what with what

00:28:47,380 --> 00:28:52,450
we are implementing the API and doing

00:28:50,980 --> 00:28:55,929
some optimizations so that you can

00:28:52,450 --> 00:28:59,740
prototype VR things using this port as

00:28:55,929 --> 00:29:01,510
well of course I mean modest things

00:28:59,740 --> 00:29:03,460
compared to maybe things that will be

00:29:01,510 --> 00:29:07,559
running in a very powerful hardware but

00:29:03,460 --> 00:29:09,549
still useful for some of our users

00:29:07,559 --> 00:29:11,980
another very important thing is that

00:29:09,549 --> 00:29:14,649
JavaScript core is really focused on 64

00:29:11,980 --> 00:29:16,000
bits but for us 32 are very are key

00:29:14,649 --> 00:29:19,000
because some of the hardware we are

00:29:16,000 --> 00:29:21,610
running thin song or arm v6 rb7

00:29:19,000 --> 00:29:24,039
even mips in inside the boxes mips is

00:29:21,610 --> 00:29:25,809
very popular so we are putting a team of

00:29:24,039 --> 00:29:27,970
people working together with apple so

00:29:25,809 --> 00:29:31,840
that the support for 32 bits is as good

00:29:27,970 --> 00:29:35,350
as the one for thefor 64 which is kind

00:29:31,840 --> 00:29:36,850
of still not there nowadays and finally

00:29:35,350 --> 00:29:39,340
we are working more on the android

00:29:36,850 --> 00:29:41,799
prototype which opens new new doors for

00:29:39,340 --> 00:29:42,809
the port it's not kind of top priority

00:29:41,799 --> 00:29:45,880
but for us it's an interesting

00:29:42,809 --> 00:29:50,440
experiment that we want to continue

00:29:45,880 --> 00:29:54,070
doing and with this I come to the to the

00:29:50,440 --> 00:29:55,870
end of the talk everything I mentioned

00:29:54,070 --> 00:29:59,350
here is open source fully open source

00:29:55,870 --> 00:30:01,299
and also fully developed in the open we

00:29:59,350 --> 00:30:03,700
have basically two product two two

00:30:01,299 --> 00:30:05,919
repositories one of them is the upstream

00:30:03,700 --> 00:30:09,610
WebKit repository obviously so if you

00:30:05,919 --> 00:30:13,029
get WebKit there you can build

00:30:09,610 --> 00:30:15,010
everything but then also we sometimes

00:30:13,029 --> 00:30:16,809
people ask about why but we have another

00:30:15,010 --> 00:30:18,370
repository that is kind of a downstream

00:30:16,809 --> 00:30:21,100
where we have a few things that don't

00:30:18,370 --> 00:30:24,100
really belong to two upstream one of

00:30:21,100 --> 00:30:26,559
them is the very specific hacks for

00:30:24,100 --> 00:30:28,630
set-top boxes and some hardware that we

00:30:26,559 --> 00:30:31,269
are using there which is still open

00:30:28,630 --> 00:30:34,210
source but kind of a dock so we don't

00:30:31,269 --> 00:30:36,820
want to mix it with pure upstream

00:30:34,210 --> 00:30:38,710
implementation and also few other things

00:30:36,820 --> 00:30:40,779
that we are kind of experimenting with

00:30:38,710 --> 00:30:42,970
and we want to be really freely

00:30:40,779 --> 00:30:45,260
experiment in there so we have some

00:30:42,970 --> 00:30:47,810
branches there that are

00:30:45,260 --> 00:30:49,850
yeah playground for us and then

00:30:47,810 --> 00:30:51,710
eventually many of them become upstream

00:30:49,850 --> 00:30:55,010
after a few weeks or after a couple of

00:30:51,710 --> 00:30:56,690
months it depends so if you want to

00:30:55,010 --> 00:30:58,370
check this out you need to take a look

00:30:56,690 --> 00:31:00,740
to the two repositories we will probably

00:30:58,370 --> 00:31:02,120
mainly used up string one but you can

00:31:00,740 --> 00:31:03,770
also take a look to the other one maybe

00:31:02,120 --> 00:31:05,780
you your use case we will take advantage

00:31:03,770 --> 00:31:07,970
of the setup box

00:31:05,780 --> 00:31:09,530
specific things and of course

00:31:07,970 --> 00:31:12,260
collaboration is welcomed we really see

00:31:09,530 --> 00:31:14,750
this as a very open project we welcome

00:31:12,260 --> 00:31:17,750
companies individuals and people testing

00:31:14,750 --> 00:31:21,950
new new hardware if you want to check

00:31:17,750 --> 00:31:25,580
this also this like leave we have a demo

00:31:21,950 --> 00:31:29,090
in the in the booth area you're going

00:31:25,580 --> 00:31:32,630
out to the left you're right at the

00:31:29,090 --> 00:31:34,610
corner and corner and we have a couple

00:31:32,630 --> 00:31:37,310
of demos they're running on Raspberry Pi

00:31:34,610 --> 00:31:41,360
2 you can see you took to be fully

00:31:37,310 --> 00:31:44,450
supportive you can see how WP -

00:31:41,360 --> 00:31:46,880
transformations in a full HD video in a

00:31:44,450 --> 00:31:49,310
quite soft way I think it's interesting

00:31:46,880 --> 00:31:51,950
so that these complements where I

00:31:49,310 --> 00:31:55,220
mentioned today in the talk and this is

00:31:51,950 --> 00:32:00,440
it thank you very much and if you have

00:31:55,220 --> 00:32:02,390
questions I'm happy to answer yeah I

00:32:00,440 --> 00:32:10,430
think it need to pass the mic so I will

00:32:02,390 --> 00:32:11,960
be moving around I have a couple

00:32:10,430 --> 00:32:15,970
questions first

00:32:11,960 --> 00:32:19,660
how many people did the initial port ii

00:32:15,970 --> 00:32:27,200
have you got metal wire for Yocto and

00:32:19,660 --> 00:32:32,210
what's the state okay so three questions

00:32:27,200 --> 00:32:34,370
the size of the team arrived a lot in

00:32:32,210 --> 00:32:37,280
total we are sixth in the company and

00:32:34,370 --> 00:32:40,310
about half the company is directly or

00:32:37,280 --> 00:32:42,590
indirectly working on WP in different

00:32:40,310 --> 00:32:44,690
layers probably 20 of them are working

00:32:42,590 --> 00:32:47,060
on like the port itself the other Tang

00:32:44,690 --> 00:32:49,310
are working in in the core things are

00:32:47,060 --> 00:32:51,770
the new standards working on some media

00:32:49,310 --> 00:32:53,150
related things we have also people

00:32:51,770 --> 00:32:55,340
working on this dreamer which could

00:32:53,150 --> 00:32:58,760
recount it so something like 30 people

00:32:55,340 --> 00:33:02,990
but fully working in the port maybe

00:32:58,760 --> 00:33:06,710
20 or 15 20 the second question is about

00:33:02,990 --> 00:33:10,040
Yocto yes we have recipes upstream for

00:33:06,710 --> 00:33:11,540
Yocto we try to be to make things easy

00:33:10,040 --> 00:33:14,390
for people using talk to another

00:33:11,540 --> 00:33:16,460
different projects that are similar to

00:33:14,390 --> 00:33:18,170
jug - so most of them are supportive

00:33:16,460 --> 00:33:20,930
you have different recipes for different

00:33:18,170 --> 00:33:23,780
hardware so it should be easy to test

00:33:20,930 --> 00:33:26,980
this and the third one about 3 scale

00:33:23,780 --> 00:33:31,310
actually it's one of the hardware

00:33:26,980 --> 00:33:34,880
specifically imx6 solo and I think it's

00:33:31,310 --> 00:33:36,950
called dual lead those two we have been

00:33:34,880 --> 00:33:38,720
using them for a couple of customers and

00:33:36,950 --> 00:33:40,970
they are supported and they work pretty

00:33:38,720 --> 00:33:43,820
well we have been testing the

00:33:40,970 --> 00:33:46,240
performance there our customers are

00:33:43,820 --> 00:33:49,430
using this for quite sophisticated

00:33:46,240 --> 00:33:52,630
animations with CSS and things work

00:33:49,430 --> 00:33:56,420
pretty well just so you can check it out

00:33:52,630 --> 00:34:11,300
there were other people I think okay I

00:33:56,420 --> 00:34:14,300
think they were first come here okay so

00:34:11,300 --> 00:34:16,940
licensing we are using the same licenses

00:34:14,300 --> 00:34:19,460
that WebKit uses with this if I'm not

00:34:16,940 --> 00:34:22,850
wrong a GPL version - and some parts are

00:34:19,460 --> 00:34:25,940
BSD so like the specific parts are port

00:34:22,850 --> 00:34:28,700
specific because we inherited this

00:34:25,940 --> 00:34:32,750
licensing from work is a decay our GPL

00:34:28,700 --> 00:34:34,970
version - the core parts are based in so

00:34:32,750 --> 00:34:41,480
it's basically quite permissive

00:34:34,970 --> 00:34:44,320
licensing and you were next to it how

00:34:41,480 --> 00:34:52,040
complex would it be to add value SP or

00:34:44,320 --> 00:34:53,360
device drivers for peripherals okay this

00:34:52,040 --> 00:34:56,540
is something if I understand correctly

00:34:53,360 --> 00:34:58,490
the question is about device API some

00:34:56,540 --> 00:35:00,140
something like that we have being

00:34:58,490 --> 00:35:02,870
experimented with that for automotive

00:35:00,140 --> 00:35:05,720
for example so you need to basically

00:35:02,870 --> 00:35:09,350
connect the lower layers to JavaScript

00:35:05,720 --> 00:35:11,070
and offer an extended API this is not

00:35:09,350 --> 00:35:13,920
very difficult to do

00:35:11,070 --> 00:35:16,140
it's probably not something that will be

00:35:13,920 --> 00:35:18,300
long to upstream because it's a specific

00:35:16,140 --> 00:35:21,660
use case but technically is not very

00:35:18,300 --> 00:35:23,220
difficult you have to connect the the

00:35:21,660 --> 00:35:25,590
call box back together if you want to to

00:35:23,220 --> 00:35:28,200
to call in C to the JavaScript layer

00:35:25,590 --> 00:35:30,510
using some artifacts that are there

00:35:28,200 --> 00:35:31,770
already in JavaScript core so our

00:35:30,510 --> 00:35:37,950
experience is that it's something that

00:35:31,770 --> 00:35:54,720
can be done quite quickly I think

00:35:37,950 --> 00:35:55,860
because they are so this was what we

00:35:54,720 --> 00:35:58,380
were trying to doing the case of

00:35:55,860 --> 00:36:01,830
automotive was accessing some sensors

00:35:58,380 --> 00:36:03,570
and some data from the car basically so

00:36:01,830 --> 00:36:05,730
this is not you cannot use a w3c

00:36:03,570 --> 00:36:08,670
standard API for this but there are

00:36:05,730 --> 00:36:10,680
automotive a specific KPIs that you need

00:36:08,670 --> 00:36:13,800
to implement so you need to expose to

00:36:10,680 --> 00:36:16,500
the JavaScript application this API and

00:36:13,800 --> 00:36:18,600
it's for example knowing the speed the

00:36:16,500 --> 00:36:20,970
car is moving at or even interacting

00:36:18,600 --> 00:36:22,730
down to the car and say okay please

00:36:20,970 --> 00:36:25,890
accelerate it's kind of this kind of

00:36:22,730 --> 00:36:33,090
specific API is accelerating for

00:36:25,890 --> 00:36:35,850
JavaScript right interesting for the

00:36:33,090 --> 00:36:37,380
backends is that build time selection or

00:36:35,850 --> 00:36:38,520
can it be selected at runtime for

00:36:37,380 --> 00:36:41,790
example you have to Waylon and the

00:36:38,520 --> 00:36:45,020
basically the metal version so could you

00:36:41,790 --> 00:36:47,580
select that runtime which one you use

00:36:45,020 --> 00:36:49,800
I'm not sure about this I think most of

00:36:47,580 --> 00:36:52,530
the work we have done so far is is at

00:36:49,800 --> 00:36:55,770
building time I'm not really sure about

00:36:52,530 --> 00:36:57,660
the limitations for doing it the way you

00:36:55,770 --> 00:37:00,600
were explaining you can take it maybe

00:36:57,660 --> 00:37:02,780
after they after they talk and discuss

00:37:00,600 --> 00:37:02,780
it

00:37:09,160 --> 00:37:13,029

YouTube URL: https://www.youtube.com/watch?v=klfE6m1oCkg


