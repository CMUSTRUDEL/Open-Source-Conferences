Title: State of AGL: Plumbing and Services - Matt Porter & Scott Murray, Konsulko
Publication date: 2017-10-24
Playlist: Open Source Summit Europe & Embedded Linux Conference Europe 2017
Description: 
	State of AGL: Plumbing and Services - Matt Porter & Scott Murray, Konsulko

This session looks at the current State of Automotive Grade Linux system level software support. During the talk, we will explore the state of the current Dab release as well as the upcoming Eel release. Topics covered will include the build system, audio, graphics, application framework, and APIs for applications. Capabilities of the demostration UI applications will also be explored in order to understand the use cases driving development of the APIs and services..

About Scott Murray
Scott Murray has been a Linux user for over 20 years, and has developed Linux based embedded products for 15 years at a variety of companies large and small. Currently, he works for Konsulko Group as a senior staff software engineer, providing embedded Linux engineering services for Konsulko's customers. An attendee of ELC and ELCE since the early days, and OLS before them, this will be his first time presenting.

About Matt Porter
Matt Porter is the CTO of Konsulko. At Konsulko, he works on design and development of software for the Linux kernel and userspace system-level plumbing. Outside of work Matt hacks on a number of hardware platforms running Linux and automotive systems.

Matt has spoken on a variety of topics at previous Embedded Linux Conference events since 2007.
Captions: 
	00:00:00,000 --> 00:00:07,680
all right take your seats I know you're

00:00:03,780 --> 00:00:14,269
excited the time for the state of AGL

00:00:07,680 --> 00:00:16,650
plumbing and services has arrived good

00:00:14,269 --> 00:00:19,800
just to start off I'll introduce

00:00:16,650 --> 00:00:22,710
ourselves Scott Murray I've been using

00:00:19,800 --> 00:00:25,500
Linux since 1996 and start off as

00:00:22,710 --> 00:00:27,449
hobbyist and then was lucky to turn it

00:00:25,500 --> 00:00:31,439
into a career and I've been doing a bet

00:00:27,449 --> 00:00:34,860
at Linux since 2000 a couple brief

00:00:31,439 --> 00:00:36,510
breaks do our toss stuff and today I'm a

00:00:34,860 --> 00:00:41,850
principal software engineer at console

00:00:36,510 --> 00:00:44,940
Co and Purdue Matt I'm Matt Porter I've

00:00:41,850 --> 00:00:47,670
been a Linux user developers since way

00:00:44,940 --> 00:00:50,820
back in 92 believe it or not so as a

00:00:47,670 --> 00:00:53,430
university student and doing embedded

00:00:50,820 --> 00:00:56,879
Linux became my full-time job back in 99

00:00:53,430 --> 00:01:02,940
and I'm currently working as the CTO of

00:00:56,879 --> 00:01:05,729
console' group little syllabus for our

00:01:02,940 --> 00:01:08,340
class today we're gonna go through just

00:01:05,729 --> 00:01:11,850
an overview of a GL a little bit about

00:01:08,340 --> 00:01:13,020
the release history keep in mind through

00:01:11,850 --> 00:01:14,909
the magic of the Linux Foundation

00:01:13,020 --> 00:01:17,790
scheduling this is essentially a

00:01:14,909 --> 00:01:19,770
follow-on to Walt miners talk about AGL

00:01:17,790 --> 00:01:23,909
this morning and we're gonna go more in

00:01:19,770 --> 00:01:27,240
depth into the api's and and some some

00:01:23,909 --> 00:01:30,780
guts of that we'll talk a little bit

00:01:27,240 --> 00:01:33,509
about current and planned features at

00:01:30,780 --> 00:01:35,310
that level build system give you a

00:01:33,509 --> 00:01:37,680
little overview of what that looks like

00:01:35,310 --> 00:01:40,079
how things are organized some of the

00:01:37,680 --> 00:01:42,329
plumbing components right we borrow that

00:01:40,079 --> 00:01:45,030
term from Linux plumbers conference

00:01:42,329 --> 00:01:47,000
write that ecosystem middleware if you

00:01:45,030 --> 00:01:49,229
will that we have in the Linux community

00:01:47,000 --> 00:01:51,180
then we'll look at the application

00:01:49,229 --> 00:01:52,619
framework and a little depth and then

00:01:51,180 --> 00:01:55,710
kind of get in the meat which is the

00:01:52,619 --> 00:01:57,240
api's or bindings and then we'll look a

00:01:55,710 --> 00:02:00,320
little bit at roadmap and talk about

00:01:57,240 --> 00:02:05,040
maybe how you can get involved

00:02:00,320 --> 00:02:06,990
all right so overview so

00:02:05,040 --> 00:02:09,509
automotive-grade Linux if you hadn't

00:02:06,990 --> 00:02:11,280
heard from wall miners talk it's an

00:02:09,509 --> 00:02:13,780
embedded Linux distribution targeting

00:02:11,280 --> 00:02:16,720
ivi and now a DES product

00:02:13,780 --> 00:02:19,330
alright historically it was ibi and the

00:02:16,720 --> 00:02:21,820
the scope is expanding alright to cover

00:02:19,330 --> 00:02:24,220
what's what's needed in real products

00:02:21,820 --> 00:02:26,500
it's based on the openembedded build

00:02:24,220 --> 00:02:30,790
system and Yocto project pokey reference

00:02:26,500 --> 00:02:32,140
distro and so one of the key things is

00:02:30,790 --> 00:02:34,510
there's a there's an application

00:02:32,140 --> 00:02:38,410
framework well-defined application

00:02:34,510 --> 00:02:41,140
framework for developing applications to

00:02:38,410 --> 00:02:43,540
make that a lot simpler than the very

00:02:41,140 --> 00:02:46,360
random libraries we might work with on

00:02:43,540 --> 00:02:48,940
traditional linux on a daily basis and

00:02:46,360 --> 00:02:50,800
and then of course an SDK that has to go

00:02:48,940 --> 00:02:54,459
along with that so the goal is to

00:02:50,800 --> 00:02:57,459
provide a secure application runtime

00:02:54,459 --> 00:03:00,130
environment something sandboxed and a

00:02:57,459 --> 00:03:04,209
uniform set of api's meeting developer

00:03:00,130 --> 00:03:06,790
needs and so the the purpose of this is

00:03:04,209 --> 00:03:10,260
to provide a base a common base for real

00:03:06,790 --> 00:03:13,870
products in the automotive market

00:03:10,260 --> 00:03:16,000
alright a little bit of history of where

00:03:13,870 --> 00:03:18,489
AGL's come from and and the features

00:03:16,000 --> 00:03:21,220
associated with some of the releases so

00:03:18,489 --> 00:03:23,380
this started the first release and to

00:03:21,220 --> 00:03:28,209
see there's these lovely cute names

00:03:23,380 --> 00:03:30,850
right with with fish so we have agile

00:03:28,209 --> 00:03:33,549
albacore bow all the way back in 2016

00:03:30,850 --> 00:03:36,730
and we had some basic things like a most

00:03:33,549 --> 00:03:38,830
driver for audio and a few demo apps

00:03:36,730 --> 00:03:42,459
alright and then brilliant Blowfish you

00:03:38,830 --> 00:03:45,310
see this trend every six months July

00:03:42,459 --> 00:03:47,079
2016 that's when the first version and

00:03:45,310 --> 00:03:49,150
the application framework came in and

00:03:47,079 --> 00:03:52,090
then also some audio routing

00:03:49,150 --> 00:03:55,230
functionality that came behalf of

00:03:52,090 --> 00:03:58,780
Geneva's Geneva's audio manager

00:03:55,230 --> 00:04:00,540
framework and then charming chinook

00:03:58,780 --> 00:04:02,920
that brought in some of the first

00:04:00,540 --> 00:04:06,190
application framework bindings so these

00:04:02,920 --> 00:04:08,860
are actual API is or exposed application

00:04:06,190 --> 00:04:11,410
developers in a well-defined way so for

00:04:08,860 --> 00:04:13,360
Bluetooth Wi-Fi radio you see those are

00:04:11,410 --> 00:04:18,519
sort of commodity things that you need

00:04:13,360 --> 00:04:21,640
in a vehicle also the cross SDK first

00:04:18,519 --> 00:04:24,160
became available there and a lot of

00:04:21,640 --> 00:04:26,169
additional BSP supports about the time

00:04:24,160 --> 00:04:27,530
that interest is picking up and a lot

00:04:26,169 --> 00:04:31,430
more people wanted their board

00:04:27,530 --> 00:04:35,660
supported we head forward to daring dab

00:04:31,430 --> 00:04:37,280
July this year that brought an enhanced

00:04:35,660 --> 00:04:39,380
version of the application framework

00:04:37,280 --> 00:04:42,050
it's what we're working against these

00:04:39,380 --> 00:04:44,389
days as developers and then some

00:04:42,050 --> 00:04:46,760
additional bindings things that you

00:04:44,389 --> 00:04:49,160
would strike you as being necessary in a

00:04:46,760 --> 00:04:51,770
vehicle as well also smart device link

00:04:49,160 --> 00:04:55,070
which is another app framework for it

00:04:51,770 --> 00:04:57,830
open sourced their framework for

00:04:55,070 --> 00:04:59,570
applications and the next one is going

00:04:57,830 --> 00:05:01,910
to be electric eel and that's what we're

00:04:59,570 --> 00:05:04,610
working on in in mainline and master of

00:05:01,910 --> 00:05:10,640
AGL for any of our new development now

00:05:04,610 --> 00:05:11,720
and that's targeted for January 2018 so

00:05:10,640 --> 00:05:14,720
right now we've got an application

00:05:11,720 --> 00:05:17,810
framework we have some core api's we

00:05:14,720 --> 00:05:20,540
have audio audio routing and then we

00:05:17,810 --> 00:05:23,380
have some demo applications which entry

00:05:20,540 --> 00:05:25,820
today is some cute qml based

00:05:23,380 --> 00:05:29,660
applications but as you may have heard

00:05:25,820 --> 00:05:31,940
in waltz discussion or talk that the

00:05:29,660 --> 00:05:33,979
intention here is to be UI independent

00:05:31,940 --> 00:05:36,620
that's that's a really hard requirement

00:05:33,979 --> 00:05:38,810
in this market so everything needs to be

00:05:36,620 --> 00:05:41,630
UI independent we'll talk a little bit

00:05:38,810 --> 00:05:45,080
about that when we get into why and how

00:05:41,630 --> 00:05:48,320
we're doing these api's so in the future

00:05:45,080 --> 00:05:51,130
we're gonna have an audio api media

00:05:48,320 --> 00:05:53,750
player api window manager home screen

00:05:51,130 --> 00:05:56,479
storage API all these things you'll see

00:05:53,750 --> 00:06:00,229
trends with these that kind of map map

00:05:56,479 --> 00:06:02,990
out to the types of API is that you see

00:06:00,229 --> 00:06:05,750
in popular mobile operating system

00:06:02,990 --> 00:06:08,419
ecosystems okay we'll talk about that

00:06:05,750 --> 00:06:11,360
when when to get into the meat of it so

00:06:08,419 --> 00:06:14,870
let Scott talk about build system yes so

00:06:11,360 --> 00:06:16,400
the build system and distribution

00:06:14,870 --> 00:06:17,960
organization aren't dramatically

00:06:16,400 --> 00:06:18,860
surprising to anyone who's familiar with

00:06:17,960 --> 00:06:21,460
openembedded

00:06:18,860 --> 00:06:25,850
and Yocto project reference distribution

00:06:21,460 --> 00:06:29,450
so a GL is actually based on the Yocto

00:06:25,850 --> 00:06:31,280
project pocky distribution and uses a

00:06:29,450 --> 00:06:33,979
you know basically a set of layers on

00:06:31,280 --> 00:06:36,050
top of that so we've got a weak core

00:06:33,979 --> 00:06:39,050
which is the actual open bedded core

00:06:36,050 --> 00:06:41,120
that's the basis of Pocky a bunch of

00:06:39,050 --> 00:06:41,360
them open meta openembedded layers or

00:06:41,120 --> 00:06:43,759
you

00:06:41,360 --> 00:06:45,110
to provide various utilities and demons

00:06:43,759 --> 00:06:46,969
so that includes things like meta

00:06:45,110 --> 00:06:49,189
networking and Madame parole meta Python

00:06:46,969 --> 00:06:52,250
things like that that are a lot of those

00:06:49,189 --> 00:06:55,819
per equus hits for other things so the

00:06:52,250 --> 00:06:57,680
security aspect of AGL is provided by a

00:06:55,819 --> 00:07:00,819
couple of layers that are currently

00:06:57,680 --> 00:07:04,490
carried in the meta Intel IOT security

00:07:00,819 --> 00:07:06,710
repository so we get our layers that

00:07:04,490 --> 00:07:10,129
give a smack support and sanera from

00:07:06,710 --> 00:07:14,029
there so those are the backbone of the

00:07:10,129 --> 00:07:16,430
security mechanism used by AGL then the

00:07:14,029 --> 00:07:19,759
actual meta a Geo layers are sort of

00:07:16,430 --> 00:07:20,900
contained in a repository together so

00:07:19,759 --> 00:07:23,419
there's a one for the app framework

00:07:20,900 --> 00:07:24,949
which we've been talking about and I

00:07:23,419 --> 00:07:28,490
won't discuss further as we go along

00:07:24,949 --> 00:07:30,469
there's a BSP fix up layer where we have

00:07:28,490 --> 00:07:35,409
some tweaks to the various vendor DSPs

00:07:30,469 --> 00:07:37,520
or open source divas peas to kind of a

00:07:35,409 --> 00:07:40,000
you know smooth the rough patches over

00:07:37,520 --> 00:07:42,469
as we go along and our upgrade cycle

00:07:40,000 --> 00:07:44,539
there's actual the distro layer for met

00:07:42,469 --> 00:07:47,150
a Geo has the district configuration and

00:07:44,539 --> 00:07:50,000
there's a ivi common which contains a

00:07:47,150 --> 00:07:51,650
set of packaged groups that group sets a

00:07:50,000 --> 00:07:54,229
functionality gather that you can select

00:07:51,650 --> 00:07:57,020
to provide different vehicle

00:07:54,229 --> 00:08:00,650
infotainment features in your final

00:07:57,020 --> 00:08:03,289
configuration so matt had mentioned that

00:08:00,650 --> 00:08:06,740
the demos are actually based on QT in

00:08:03,289 --> 00:08:08,270
qml so there's medic ut5 then of course

00:08:06,740 --> 00:08:10,159
the meta HDL demo layer actually

00:08:08,270 --> 00:08:12,529
contains the demo applications that you

00:08:10,159 --> 00:08:15,860
can use when you actually build a demo

00:08:12,529 --> 00:08:18,229
image of a GL and of course the

00:08:15,860 --> 00:08:20,770
all-important BSP layers themselves get

00:08:18,229 --> 00:08:23,300
your board support so there's you know

00:08:20,770 --> 00:08:25,639
dozen boards are more actually supported

00:08:23,300 --> 00:08:27,979
over the box and use layers such as meta

00:08:25,639 --> 00:08:32,779
free scale at a Renaissance our car

00:08:27,979 --> 00:08:35,269
gentry for the current sort of focus of

00:08:32,779 --> 00:08:39,199
a GL for board support is the

00:08:35,269 --> 00:08:41,750
Renaissance m3 alto lock oh excuse me

00:08:39,199 --> 00:08:44,240
ultra low-cost board or h3 board and

00:08:41,750 --> 00:08:46,730
then met a TI for things like TI value

00:08:44,240 --> 00:08:50,029
and of course there's also Raspberry Pi

00:08:46,730 --> 00:08:51,290
and a handful of imx6 boards so there's

00:08:50,029 --> 00:08:53,750
definitely a lot of flexibility there

00:08:51,290 --> 00:08:54,769
and so with this nice layer stack you

00:08:53,750 --> 00:08:57,709
can kind of control

00:08:54,769 --> 00:09:02,509
feature set and you know easily switch

00:08:57,709 --> 00:09:04,429
in another board so hand over to Matt to

00:09:02,509 --> 00:09:06,579
talk about some of the plumbing and the

00:09:04,429 --> 00:09:12,529
services that are based on top of it

00:09:06,579 --> 00:09:17,629
yeah so so Scott covered the layout of

00:09:12,529 --> 00:09:19,970
how these layers are separated and just

00:09:17,629 --> 00:09:23,329
to talk kind of highlight some of the

00:09:19,970 --> 00:09:27,529
key components plumbing pieces in the

00:09:23,329 --> 00:09:29,660
distribution system D based when you run

00:09:27,529 --> 00:09:33,499
an application each application is a

00:09:29,660 --> 00:09:36,399
service so we're making use of system

00:09:33,499 --> 00:09:39,529
diese ability to help us sandbox things

00:09:36,399 --> 00:09:41,989
and then one of the things coming in the

00:09:39,529 --> 00:09:44,089
future and again won't already trumped

00:09:41,989 --> 00:09:46,459
us by mentioning it is that a GL is

00:09:44,089 --> 00:09:48,799
considering moving to dynamic users and

00:09:46,459 --> 00:09:53,179
using that feature that new feature in

00:09:48,799 --> 00:09:55,790
the future on the audio side are using

00:09:53,179 --> 00:09:58,549
also and pulse Audio no big surprises

00:09:55,790 --> 00:10:00,139
there that will continue to be a theme

00:09:58,549 --> 00:10:01,910
throughout the stockist there's no

00:10:00,139 --> 00:10:04,339
surprises here right you're gonna see a

00:10:01,910 --> 00:10:06,559
lot of familiar faces the one you may

00:10:04,339 --> 00:10:09,230
not be familiar with is the Geneva Audio

00:10:06,559 --> 00:10:12,410
Manager that's a product project from

00:10:09,230 --> 00:10:13,819
the Geneva organization we've been using

00:10:12,410 --> 00:10:17,749
that for policy-driven

00:10:13,819 --> 00:10:20,379
audio routing it has the notion works in

00:10:17,749 --> 00:10:24,410
control conjunction with pulseaudio

00:10:20,379 --> 00:10:26,689
there is a pulse audio plug-in and then

00:10:24,410 --> 00:10:29,629
if you've ever worked with the corking

00:10:26,689 --> 00:10:32,119
plug-ins they have very fixed policies

00:10:29,629 --> 00:10:35,679
right there based on parameters and this

00:10:32,119 --> 00:10:38,660
allows one to to write a a very complex

00:10:35,679 --> 00:10:41,529
XML based policy there's a big rules

00:10:38,660 --> 00:10:44,720
engine that operates with that router

00:10:41,529 --> 00:10:49,939
module that plugs into pulseaudio allows

00:10:44,720 --> 00:10:55,369
you to do dynamic policies for corking

00:10:49,939 --> 00:10:59,389
and so forth and the graphics side it's

00:10:55,369 --> 00:11:02,419
purely a Waylon weston architecture the

00:10:59,389 --> 00:11:04,100
key differentiator from those of you who

00:11:02,419 --> 00:11:06,139
are running and on your desktops and

00:11:04,100 --> 00:11:07,400
Fedora now is that it's using Ivy I

00:11:06,139 --> 00:11:10,010
shall

00:11:07,400 --> 00:11:12,590
one of the one of the unique things if

00:11:10,010 --> 00:11:15,950
you're not aware of what ivi shell is in

00:11:12,590 --> 00:11:18,740
vehicle infotainment of course is that

00:11:15,950 --> 00:11:21,680
that works in conjunction with the layer

00:11:18,740 --> 00:11:24,830
manager and so one of the unique

00:11:21,680 --> 00:11:28,250
requirements automotive industry is to

00:11:24,830 --> 00:11:32,089
be able to separate aspects of the

00:11:28,250 --> 00:11:34,520
application in layers so a great example

00:11:32,089 --> 00:11:37,339
that people always use is a nav app the

00:11:34,520 --> 00:11:39,620
actual the backend engine and the

00:11:37,339 --> 00:11:42,050
graphics rendering may be a completely

00:11:39,620 --> 00:11:45,050
different engine from from the the UI

00:11:42,050 --> 00:11:47,570
decorations right so they might have one

00:11:45,050 --> 00:11:49,850
layer which would map to a surface in

00:11:47,570 --> 00:11:51,950
Wayland right expose that with the

00:11:49,850 --> 00:11:53,690
graphics of that map being rendered in

00:11:51,950 --> 00:11:56,089
the turn-by-turn but have different

00:11:53,690 --> 00:11:58,339
decorations and controls on another

00:11:56,089 --> 00:12:00,529
layer right so they might have a

00:11:58,339 --> 00:12:04,070
proprietary piece that does that and the

00:12:00,529 --> 00:12:08,810
rest is the UI so that's what I VI shell

00:12:04,070 --> 00:12:12,710
is Bluetooth bluesy 5 location services

00:12:08,810 --> 00:12:15,260
we're using GPS dgo clue we'll talk more

00:12:12,710 --> 00:12:19,130
about those later in how they're used in

00:12:15,260 --> 00:12:22,520
depth telephony Oh foe know networking

00:12:19,130 --> 00:12:25,040
con man WP a supplicant looks a lot like

00:12:22,520 --> 00:12:28,880
a desktop distro right yeah so all these

00:12:25,040 --> 00:12:30,260
familiar friends all right I'm gonna let

00:12:28,880 --> 00:12:32,660
talk Scott

00:12:30,260 --> 00:12:35,420
sorry Scott introduced the application

00:12:32,660 --> 00:12:37,040
framework so Matt's just describe the

00:12:35,420 --> 00:12:39,560
actual plumbing the application

00:12:37,040 --> 00:12:41,960
framework is what basically a GL uses to

00:12:39,560 --> 00:12:44,240
sort of contain that and exposed it in a

00:12:41,960 --> 00:12:45,830
sort of controlled way with you know you

00:12:44,240 --> 00:12:48,020
know declare the interface is that

00:12:45,830 --> 00:12:49,700
people can write against and not have to

00:12:48,020 --> 00:12:51,380
worry about heating a low-level

00:12:49,700 --> 00:12:54,440
interfaces of these different

00:12:51,380 --> 00:12:56,540
applications or demons so what is the

00:12:54,440 --> 00:12:58,850
application framework it provides a

00:12:56,540 --> 00:13:01,270
sandbox application runtime environment

00:12:58,850 --> 00:13:03,380
which I think Matt's already said but

00:13:01,270 --> 00:13:06,200
implements a complete application

00:13:03,380 --> 00:13:08,180
lifecycle kind of covering install and

00:13:06,200 --> 00:13:12,770
basically start up and potentially

00:13:08,180 --> 00:13:17,030
upgrade and using system TC groups smack

00:13:12,770 --> 00:13:19,490
and sanera provides a secure runtime

00:13:17,030 --> 00:13:20,750
environment and is also a sanera enable

00:13:19,490 --> 00:13:22,640
d-bus daemon that's used to come

00:13:20,750 --> 00:13:26,510
roll some of the aspects of the sanera

00:13:22,640 --> 00:13:27,770
security policies this is all sort of

00:13:26,510 --> 00:13:30,080
controlled through a web socket

00:13:27,770 --> 00:13:32,150
interface to the bindings that the API

00:13:30,080 --> 00:13:34,880
is defined and so that's how

00:13:32,150 --> 00:13:38,900
applications actually talk to each other

00:13:34,880 --> 00:13:43,250
and to the underlying implementations of

00:13:38,900 --> 00:13:45,200
the application api's and there's a w3c

00:13:43,250 --> 00:13:47,480
widget specification that's actually

00:13:45,200 --> 00:13:50,330
being used by AGL for the packaging of

00:13:47,480 --> 00:13:52,910
the applications and that's how actually

00:13:50,330 --> 00:13:56,420
in the configuration of that they sort

00:13:52,910 --> 00:13:59,450
of exposed what they're required binding

00:13:56,420 --> 00:14:00,680
api's are and what they provide so

00:13:59,450 --> 00:14:03,710
that's how things are actually able to

00:14:00,680 --> 00:14:06,560
be connected together and you know work

00:14:03,710 --> 00:14:08,750
as a system so there's a couple links in

00:14:06,560 --> 00:14:11,570
that slide to a lot more information

00:14:08,750 --> 00:14:13,580
about the widgets and the also a

00:14:11,570 --> 00:14:15,350
high-level description of the actual

00:14:13,580 --> 00:14:17,630
application framework there's quite a

00:14:15,350 --> 00:14:19,970
bit of documentation on the docs on what

00:14:17,630 --> 00:14:21,320
of Linux org site and if you have any

00:14:19,970 --> 00:14:22,550
more interest in this there's quite a

00:14:21,320 --> 00:14:26,570
bit of material there for you to dig

00:14:22,550 --> 00:14:31,700
down and do some deep diving so bonynge

00:14:26,570 --> 00:14:33,710
overview so the actual bindings are too

00:14:31,700 --> 00:14:36,260
abstract the UI from the backend

00:14:33,710 --> 00:14:38,120
implementation so as Matt sort of

00:14:36,260 --> 00:14:40,940
already sort of alluded to this allows

00:14:38,120 --> 00:14:44,240
you to basically replace your UI with

00:14:40,940 --> 00:14:46,490
your own sort of custom one or switch to

00:14:44,240 --> 00:14:49,640
a different UI toolkit these things

00:14:46,490 --> 00:14:52,490
existing demo apps use qml you know cute

00:14:49,640 --> 00:14:54,620
based apps but you could do an html5 UI

00:14:52,490 --> 00:14:56,930
you could do a completely you know

00:14:54,620 --> 00:15:00,200
native tool kit of your own choice and

00:14:56,930 --> 00:15:02,630
the mechanism allows you to do that and

00:15:00,200 --> 00:15:05,780
as I said this allows you to reuse all

00:15:02,630 --> 00:15:09,080
actually your back-end application as

00:15:05,780 --> 00:15:11,330
well the mechanism allows you to have

00:15:09,080 --> 00:15:13,160
fine-grained security control over what

00:15:11,330 --> 00:15:16,070
applications are actually able to talk

00:15:13,160 --> 00:15:18,920
to and you know provide some levels of

00:15:16,070 --> 00:15:21,440
access control so that you don't have

00:15:18,920 --> 00:15:23,660
applications potentially talking to

00:15:21,440 --> 00:15:27,140
parts of the API that you don't expect

00:15:23,660 --> 00:15:30,380
them to and so this is done with smack

00:15:27,140 --> 00:15:32,240
and the scenario mechanisms in the end

00:15:30,380 --> 00:15:34,490
goal is to provide a complete and

00:15:32,240 --> 00:15:36,680
consistent API we want people to be

00:15:34,490 --> 00:15:38,330
develop apps regio that know that

00:15:36,680 --> 00:15:39,850
they'll work going forward or at least

00:15:38,330 --> 00:15:41,959
we'll have you know versioning of the

00:15:39,850 --> 00:15:44,450
binding API is that they'll be able to

00:15:41,959 --> 00:15:45,830
easily upgrade and have their apps work

00:15:44,450 --> 00:15:47,959
on different AGL

00:15:45,830 --> 00:15:51,020
compatible platforms that people build

00:15:47,959 --> 00:15:52,520
with the AGL distribution and there's

00:15:51,020 --> 00:15:54,140
once again if you're looking for

00:15:52,520 --> 00:15:56,890
information there is quite a bit of

00:15:54,140 --> 00:16:00,110
documentation on how the bonney's work

00:15:56,890 --> 00:16:02,120
so just a quick blurb on how bindings

00:16:00,110 --> 00:16:04,040
are actually put together the actual

00:16:02,120 --> 00:16:07,520
implementation of a binding is done in a

00:16:04,040 --> 00:16:09,860
shared library there's a basically an

00:16:07,520 --> 00:16:11,270
API for the Bonnies themselves and so

00:16:09,860 --> 00:16:13,459
you provide this information when you're

00:16:11,270 --> 00:16:16,700
actually register a binding your

00:16:13,459 --> 00:16:18,649
implementation provides a name a list of

00:16:16,700 --> 00:16:21,560
binding verbs or which are the actions

00:16:18,649 --> 00:16:24,500
of the binding supports being done

00:16:21,560 --> 00:16:26,450
through it contains actually the

00:16:24,500 --> 00:16:28,700
implementation of the verbs and the

00:16:26,450 --> 00:16:31,160
events the actual backend logic to

00:16:28,700 --> 00:16:32,899
implement the verbs and as well there's

00:16:31,160 --> 00:16:36,500
a pre in it and an it to give you a

00:16:32,899 --> 00:16:37,430
couple levels of initialization in it is

00:16:36,500 --> 00:16:39,260
actually what happens when the

00:16:37,430 --> 00:16:40,820
application does connect pre init is

00:16:39,260 --> 00:16:42,800
basically when you're starting up and

00:16:40,820 --> 00:16:44,770
the binding gets loaded so it gives you

00:16:42,800 --> 00:16:47,450
a couple levels of initialization

00:16:44,770 --> 00:16:49,610
there's a specification now in the newer

00:16:47,450 --> 00:16:52,310
version two of the binding framework

00:16:49,610 --> 00:16:54,829
that allows you to describe the API with

00:16:52,310 --> 00:16:56,839
the open API which potentially allows a

00:16:54,829 --> 00:16:58,130
some degree into spec ssin your

00:16:56,839 --> 00:17:00,079
application could actually take that

00:16:58,130 --> 00:17:03,800
string and actually parse the XML and

00:17:00,079 --> 00:17:06,500
work out what the Bonnie exposes there's

00:17:03,800 --> 00:17:08,179
actually a textual description and

00:17:06,500 --> 00:17:10,459
there's as well there's some event

00:17:08,179 --> 00:17:13,579
handling stuff related to tracing and

00:17:10,459 --> 00:17:15,290
profiling of the binding API there's

00:17:13,579 --> 00:17:17,420
this extra callback in there for that

00:17:15,290 --> 00:17:20,569
and as well there's actually now in

00:17:17,420 --> 00:17:22,939
version two a no concurrency flag the

00:17:20,569 --> 00:17:25,309
binding api's are pretty much fully a

00:17:22,939 --> 00:17:28,040
synchronous except in this case if you

00:17:25,309 --> 00:17:31,070
set no concurrency verb calls into the

00:17:28,040 --> 00:17:32,840
API will actually be concurrent for that

00:17:31,070 --> 00:17:34,610
application so that simplifies

00:17:32,840 --> 00:17:36,530
application development for some

00:17:34,610 --> 00:17:38,270
situations where if you're writing a

00:17:36,530 --> 00:17:39,230
very simple app you might not want to

00:17:38,270 --> 00:17:41,540
have to worry about a lot of a

00:17:39,230 --> 00:17:43,700
synchronous programming but in general

00:17:41,540 --> 00:17:44,780
this isn't recommended should be

00:17:43,700 --> 00:17:46,160
prepared to have your app actually

00:17:44,780 --> 00:17:48,350
receive a whole bunch of synchronous

00:17:46,160 --> 00:17:50,389
events because that's the world

00:17:48,350 --> 00:17:51,919
today pretty much anything particularly

00:17:50,389 --> 00:17:54,649
complicated all has to handle a

00:17:51,919 --> 00:17:56,840
synchronous behavior and so by default

00:17:54,649 --> 00:18:00,620
that's kind of the behavior that the

00:17:56,840 --> 00:18:02,360
binding API is exposed so just to

00:18:00,620 --> 00:18:06,980
continue when you're actually start up

00:18:02,360 --> 00:18:09,169
an app the application in and binding

00:18:06,980 --> 00:18:13,450
packaging of what the widget format

00:18:09,169 --> 00:18:16,039
includes this XML file which specifies

00:18:13,450 --> 00:18:18,500
you know description of the application

00:18:16,039 --> 00:18:20,659
the name and the author and the license

00:18:18,500 --> 00:18:22,879
ID and such stuff lists the permissions

00:18:20,659 --> 00:18:24,320
that that package requires in the

00:18:22,879 --> 00:18:26,720
bindings that it requires in the

00:18:24,320 --> 00:18:28,909
bindings that it provides

00:18:26,720 --> 00:18:31,639
so when application is started by the

00:18:28,909 --> 00:18:34,639
application framework it spawns an AFP

00:18:31,639 --> 00:18:36,049
demon instance which loads and

00:18:34,639 --> 00:18:39,259
initializes the bindings of that

00:18:36,049 --> 00:18:42,309
application says it requires and it

00:18:39,259 --> 00:18:44,509
provides execute the application and

00:18:42,309 --> 00:18:46,340
passport numbers and authentication

00:18:44,509 --> 00:18:48,769
token arguments to the spawned

00:18:46,340 --> 00:18:51,710
application for it to communicate with

00:18:48,769 --> 00:18:53,419
the binding daemon and it's remembered

00:18:51,710 --> 00:18:57,200
it's important to remember that in this

00:18:53,419 --> 00:18:59,750
case with the architecture of the the

00:18:57,200 --> 00:19:01,879
binding framework every instance of the

00:18:59,750 --> 00:19:04,879
binding is separate so if an application

00:19:01,879 --> 00:19:06,590
loads a binding and another application

00:19:04,879 --> 00:19:08,750
loads the same binding there are

00:19:06,590 --> 00:19:11,480
separate instances basically separate

00:19:08,750 --> 00:19:14,600
loads of the shade shared library so if

00:19:11,480 --> 00:19:17,059
you have a basically shared resource

00:19:14,600 --> 00:19:18,590
that the Bonnies providing access to you

00:19:17,059 --> 00:19:20,480
do have to worry about concurrency

00:19:18,590 --> 00:19:22,070
control you'll have to implement a

00:19:20,480 --> 00:19:24,470
mechanism for that in the binding

00:19:22,070 --> 00:19:28,399
potentially with things like d-bus or

00:19:24,470 --> 00:19:29,720
other IPC to actually control that so

00:19:28,399 --> 00:19:31,639
this is very quick run-through of

00:19:29,720 --> 00:19:33,080
application bindings there's a lot more

00:19:31,639 --> 00:19:35,480
detail about this and how you actually

00:19:33,080 --> 00:19:38,149
implement a binding to expose

00:19:35,480 --> 00:19:39,259
functionality for application use and it

00:19:38,149 --> 00:19:43,070
once again there's quite a bit

00:19:39,259 --> 00:19:45,830
documentation on the doc site and so

00:19:43,070 --> 00:19:50,179
just a quick sort of run-through of how

00:19:45,830 --> 00:19:53,059
the bindings are used in an app so the

00:19:50,179 --> 00:19:55,669
interface is basically through HTTP

00:19:53,059 --> 00:19:58,879
requests or WebSocket and it's all done

00:19:55,669 --> 00:20:00,470
with the JSON format which is pretty

00:19:58,879 --> 00:20:01,630
commonly used now in web application

00:20:00,470 --> 00:20:04,570
development

00:20:01,630 --> 00:20:06,880
so this is an example here of what a

00:20:04,570 --> 00:20:08,230
sample request would look like and so in

00:20:06,880 --> 00:20:09,820
this case this is actually looking to

00:20:08,230 --> 00:20:14,410
set the temperature on there like

00:20:09,820 --> 00:20:18,340
driver's side is 216 degrees and so HVAC

00:20:14,410 --> 00:20:22,930
set is actually a particular binding

00:20:18,340 --> 00:20:24,790
verb and so the request response are

00:20:22,930 --> 00:20:27,580
actually in JSON so you get you know

00:20:24,790 --> 00:20:30,160
elaborate requests back or response back

00:20:27,580 --> 00:20:31,780
and you could decode that and you

00:20:30,160 --> 00:20:34,180
actually see might get a more detailed

00:20:31,780 --> 00:20:36,430
error message in the JSON format it can

00:20:34,180 --> 00:20:39,250
be structured as well you can subscribe

00:20:36,430 --> 00:20:42,190
and unsubscribe to events and the events

00:20:39,250 --> 00:20:45,610
officer arrives through the WebSocket as

00:20:42,190 --> 00:20:46,960
JSON but it's synchronously and so once

00:20:45,610 --> 00:20:51,850
again there's a lot more details

00:20:46,960 --> 00:20:53,800
available and so based on this mechanism

00:20:51,850 --> 00:20:56,560
there are now quite a few API is

00:20:53,800 --> 00:20:59,980
available in a GL so Matt's gonna run

00:20:56,560 --> 00:21:02,710
through quickly giving we're running at

00:20:59,980 --> 00:21:05,170
a time quickly what what bindings are

00:21:02,710 --> 00:21:09,190
available today and a quick blurb on

00:21:05,170 --> 00:21:11,650
each one so you can see this big list of

00:21:09,190 --> 00:21:13,840
what's upstream already if you can

00:21:11,650 --> 00:21:16,150
imagine there's lots more to go and

00:21:13,840 --> 00:21:17,890
we've talked a little bit about where

00:21:16,150 --> 00:21:19,420
things need to go and you can imagine

00:21:17,890 --> 00:21:22,390
some but we're gonna go through these

00:21:19,420 --> 00:21:24,910
pretty quick first I want to just point

00:21:22,390 --> 00:21:27,820
out that if you're really carefully

00:21:24,910 --> 00:21:30,070
paying attention what you realize is all

00:21:27,820 --> 00:21:32,260
we're doing is a glorified wrapper at

00:21:30,070 --> 00:21:35,140
the end of the day around common

00:21:32,260 --> 00:21:37,630
libraries right so it's always the

00:21:35,140 --> 00:21:39,130
details that matter though right so

00:21:37,630 --> 00:21:42,900
we've got we're building a shared

00:21:39,130 --> 00:21:47,230
library that does JSON waste WebSocket

00:21:42,900 --> 00:21:49,030
transactions right and talks to some

00:21:47,230 --> 00:21:54,160
sort of middleware right that we've

00:21:49,030 --> 00:21:56,170
exposed or have in the base image so we

00:21:54,160 --> 00:21:59,770
have all those ones I just showed the R

00:21:56,170 --> 00:22:01,600
upstream right now some of them are

00:21:59,770 --> 00:22:04,060
still work-in-progress like everything

00:22:01,600 --> 00:22:05,920
in the world and then if we look at the

00:22:04,060 --> 00:22:07,810
work in progress bindings we have audio

00:22:05,920 --> 00:22:10,470
bindings still being worked on they'll

00:22:07,810 --> 00:22:12,539
plan to come in and some new home screen

00:22:10,470 --> 00:22:16,260
window manager new revision of those and

00:22:12,539 --> 00:22:18,840
can bindings alright so let's talk about

00:22:16,260 --> 00:22:21,090
the master binding this is kind of the

00:22:18,840 --> 00:22:25,020
the root of all the goodness if you will

00:22:21,090 --> 00:22:28,409
so this this binding manages application

00:22:25,020 --> 00:22:30,840
lifecycle so in any cohesive application

00:22:28,409 --> 00:22:32,820
framework you have some basic operations

00:22:30,840 --> 00:22:34,980
you need to do alright you have a third

00:22:32,820 --> 00:22:37,440
party set of applications you need to be

00:22:34,980 --> 00:22:39,780
able to install uninstall write start

00:22:37,440 --> 00:22:43,860
terminate pods resume all these kind of

00:22:39,780 --> 00:22:47,100
things very straightforward so if we

00:22:43,860 --> 00:22:48,900
look at the binding api's and what

00:22:47,100 --> 00:22:51,570
you're gonna see is this concept of

00:22:48,900 --> 00:22:53,370
these verbs so the verbs are our calls

00:22:51,570 --> 00:22:56,190
that we can make and you're gonna see

00:22:53,370 --> 00:22:59,039
this throughout all these examples and

00:22:56,190 --> 00:23:02,159
you'll see some definite patterns on

00:22:59,039 --> 00:23:04,950
this so this is a wrapper in this case

00:23:02,159 --> 00:23:07,919
around the AGL specific application

00:23:04,950 --> 00:23:10,260
framework so to accomplish all those

00:23:07,919 --> 00:23:13,470
things right you can make these calls

00:23:10,260 --> 00:23:15,870
through JSON and WebSocket to the

00:23:13,470 --> 00:23:18,659
application framework and you can get

00:23:15,870 --> 00:23:21,120
the state on something you can install

00:23:18,659 --> 00:23:24,179
around install packages and so forth

00:23:21,120 --> 00:23:26,929
there are no events Scott mentioned

00:23:24,179 --> 00:23:29,580
right things work asynchronously the

00:23:26,929 --> 00:23:31,530
responses are asynchronous there aren't

00:23:29,580 --> 00:23:37,320
any events defined with these these are

00:23:31,530 --> 00:23:39,090
all call response type actions so let's

00:23:37,320 --> 00:23:42,240
jump into something that's more of a

00:23:39,090 --> 00:23:44,429
connectivity type thing fundamental so

00:23:42,240 --> 00:23:46,200
what we have today and this is still

00:23:44,429 --> 00:23:48,900
going through some iterations as we

00:23:46,200 --> 00:23:50,970
mature and have more dependencies on the

00:23:48,900 --> 00:23:52,940
Bluetooth binding but the Bluetooth does

00:23:50,970 --> 00:23:55,289
exactly what you would expect right

00:23:52,940 --> 00:23:58,890
device discovery pairing right

00:23:55,289 --> 00:24:01,350
connection settings alright we also have

00:23:58,890 --> 00:24:04,200
the need for things that are more at a

00:24:01,350 --> 00:24:07,500
use case level of you get in the vehicle

00:24:04,200 --> 00:24:09,330
and you have multiple phones paired and

00:24:07,500 --> 00:24:11,400
there's two of them present in the

00:24:09,330 --> 00:24:13,110
vehicle it needs to know which one to

00:24:11,400 --> 00:24:17,309
connect to right so you need a device

00:24:13,110 --> 00:24:20,140
priority list exposed so there's there's

00:24:17,309 --> 00:24:21,670
verbs there to manipulate that in

00:24:20,140 --> 00:24:26,550
from that and I'll explain how that's

00:24:21,670 --> 00:24:28,480
used later by another binding AVR CP

00:24:26,550 --> 00:24:30,760
controls are managed through the

00:24:28,480 --> 00:24:32,920
Bluetooth binding that's their home now

00:24:30,760 --> 00:24:34,660
things can get reorganized it's like any

00:24:32,920 --> 00:24:37,120
open-source project we're going to

00:24:34,660 --> 00:24:40,290
continue to evolve right we may split

00:24:37,120 --> 00:24:44,080
some things out into a separate binding

00:24:40,290 --> 00:24:47,440
media metadata position tracking is also

00:24:44,080 --> 00:24:49,090
housed here future work I try to cover a

00:24:47,440 --> 00:24:52,270
future work we need to do some cleanup

00:24:49,090 --> 00:24:55,530
in this binding and this is what it

00:24:52,270 --> 00:24:58,510
looks like so no real surprises here

00:24:55,530 --> 00:25:01,060
everything I said they're just you can

00:24:58,510 --> 00:25:03,820
you can you know deal with the RF kill

00:25:01,060 --> 00:25:05,920
interface through through power verb

00:25:03,820 --> 00:25:08,950
right start and stop discovery

00:25:05,920 --> 00:25:11,020
you see connection stuff when I

00:25:08,950 --> 00:25:13,570
mentioned clean up there's a number of

00:25:11,020 --> 00:25:17,260
things where we have some old bindings

00:25:13,570 --> 00:25:20,080
don't have a a model where there's a

00:25:17,260 --> 00:25:22,270
single verb that's a getter setter type

00:25:20,080 --> 00:25:24,340
API right so you'll see some of those

00:25:22,270 --> 00:25:26,590
anomalies on Bluetooth and Wi-Fi

00:25:24,340 --> 00:25:28,870
bindings that's why we mentioned some

00:25:26,590 --> 00:25:32,020
cleanups necessary but when you clean up

00:25:28,870 --> 00:25:36,160
you also have to fix the apps this is

00:25:32,020 --> 00:25:37,840
one where most of these closer to

00:25:36,160 --> 00:25:41,020
production type bindings that are

00:25:37,840 --> 00:25:43,750
dealing with real IO have events right

00:25:41,020 --> 00:25:45,520
so we need to be able to process events

00:25:43,750 --> 00:25:47,620
while we're running an app that a device

00:25:45,520 --> 00:25:49,330
just showed up because what if your

00:25:47,620 --> 00:25:51,790
Bluetooth was off on your phone you got

00:25:49,330 --> 00:25:54,070
it in the car it needs an event right

00:25:51,790 --> 00:25:57,280
when that thing reappears so we can go

00:25:54,070 --> 00:25:59,800
and connect and so forth so all the good

00:25:57,280 --> 00:26:04,840
bindings are event-driven like this for

00:25:59,800 --> 00:26:08,530
connectivity type things so the Wi-Fi

00:26:04,840 --> 00:26:10,630
binding again no surprises and I should

00:26:08,530 --> 00:26:13,750
mention Bluetooth binding obviously it's

00:26:10,630 --> 00:26:15,990
big dependencies bluesy right is what

00:26:13,750 --> 00:26:19,510
it's wrapping around and that D bus API

00:26:15,990 --> 00:26:21,640
the Wi-Fi binding discovers Wi-Fi API is

00:26:19,510 --> 00:26:24,820
right connected to disconnect it can

00:26:21,640 --> 00:26:29,830
handle wpa2 passkey input right that's

00:26:24,820 --> 00:26:32,620
all done through through D bus gather

00:26:29,830 --> 00:26:33,550
status and then it also manages a

00:26:32,620 --> 00:26:36,220
network connection

00:26:33,550 --> 00:26:38,790
so it's kind of like a Wi-Fi and network

00:26:36,220 --> 00:26:41,410
manager binding and once right now so

00:26:38,790 --> 00:26:43,480
future work it needs a little bit of

00:26:41,410 --> 00:26:46,800
cleanup it probably needs to be split

00:26:43,480 --> 00:26:49,810
into a network bearer management type

00:26:46,800 --> 00:26:53,500
binding plus some provider right where

00:26:49,810 --> 00:26:55,030
Wi-Fi is one maybe W an is another for

00:26:53,500 --> 00:26:59,800
example it's kind of a logical

00:26:55,030 --> 00:27:01,750
separation going forward that API looks

00:26:59,800 --> 00:27:04,500
a bit like this again this is one where

00:27:01,750 --> 00:27:07,510
you know scan could be a getter setter

00:27:04,500 --> 00:27:11,740
single verb right after we clean this up

00:27:07,510 --> 00:27:13,930
a little bit but one thing I didn't

00:27:11,740 --> 00:27:15,790
mention is that what you'll see on every

00:27:13,930 --> 00:27:18,280
binding and it has event is there see us

00:27:15,790 --> 00:27:21,550
subscribe and unsubscribe so that allows

00:27:18,280 --> 00:27:25,000
the client which can be either an

00:27:21,550 --> 00:27:26,710
application write or another binding so

00:27:25,000 --> 00:27:28,480
you have the ability to stack bindings

00:27:26,710 --> 00:27:30,640
right so you have these shared libraries

00:27:28,480 --> 00:27:32,890
and you have one binding stack on

00:27:30,640 --> 00:27:35,170
another so if we had a network bearer

00:27:32,890 --> 00:27:38,140
management type binding it could depend

00:27:35,170 --> 00:27:44,200
on the Wi-Fi binding and the WN my

00:27:38,140 --> 00:27:46,600
binding for example right and so you may

00:27:44,200 --> 00:27:49,390
a network Bearer management binding

00:27:46,600 --> 00:27:53,350
might subscribe to those events right

00:27:49,390 --> 00:27:58,660
for the network list and so forth to

00:27:53,350 --> 00:28:01,930
manage Wi-Fi access points the radio

00:27:58,660 --> 00:28:03,820
binding this is radio tuner binding

00:28:01,930 --> 00:28:06,400
conventional old-school over-the-air

00:28:03,820 --> 00:28:09,670
believe it or not we got to have that

00:28:06,400 --> 00:28:17,680
right and right now it's based on the

00:28:09,670 --> 00:28:21,490
RTL SDR code and there's there's a

00:28:17,680 --> 00:28:23,710
number of features specific to the the

00:28:21,490 --> 00:28:26,290
current demo apps that we talked about

00:28:23,710 --> 00:28:27,520
here not not super relevant but the the

00:28:26,290 --> 00:28:29,650
important thing is that sports on

00:28:27,520 --> 00:28:32,830
rtl-sdr dongle mostly because there's

00:28:29,650 --> 00:28:36,160
not a lot of good commodity a and AM FM

00:28:32,830 --> 00:28:39,820
tuners the interface well that you you

00:28:36,160 --> 00:28:42,550
can get at so we use that to drive

00:28:39,820 --> 00:28:44,200
development on this in the future it'd

00:28:42,550 --> 00:28:45,820
be nice to do some additional tuner

00:28:44,200 --> 00:28:46,530
hardware support on some of the real

00:28:45,820 --> 00:28:51,510
auto mode

00:28:46,530 --> 00:28:54,060
platforms and metadata right RDS support

00:28:51,510 --> 00:28:58,710
HD tuner support are some obvious paths

00:28:54,060 --> 00:29:03,480
to go so we just do am/fm right now it

00:28:58,710 --> 00:29:06,540
looks like this so again you'll see the

00:29:03,480 --> 00:29:08,280
the subscribe and unsubscribe later in

00:29:06,540 --> 00:29:12,090
the verb list we use that same model

00:29:08,280 --> 00:29:14,880
throughout all the api's right so let's

00:29:12,090 --> 00:29:15,930
say we start we start a scan right with

00:29:14,880 --> 00:29:18,060
scan start

00:29:15,930 --> 00:29:19,830
that's an asynchronous event right

00:29:18,060 --> 00:29:22,170
depending on where you're at that could

00:29:19,830 --> 00:29:25,640
take five seconds to scan through and

00:29:22,170 --> 00:29:27,780
maybe not even find anything so that's

00:29:25,640 --> 00:29:31,350
event-driven you're you're gonna get the

00:29:27,780 --> 00:29:33,900
event back station found right when it

00:29:31,350 --> 00:29:38,700
finds a station and then you can update

00:29:33,900 --> 00:29:41,400
your UI and so forth everything else

00:29:38,700 --> 00:29:43,910
pretty much straight forward so keep

00:29:41,400 --> 00:29:46,290
going through this telephony binding

00:29:43,910 --> 00:29:50,670
this was one of the earlier bindings

00:29:46,290 --> 00:29:52,950
that is what we'll call a stackable or

00:29:50,670 --> 00:29:56,910
it's a it's a client of another binding

00:29:52,950 --> 00:29:58,950
so this does blue to 8h FP support does

00:29:56,910 --> 00:30:01,890
what you expect originate answer calls

00:29:58,950 --> 00:30:04,740
right get some status on the call right

00:30:01,890 --> 00:30:07,800
maybe the remote party hung up right and

00:30:04,740 --> 00:30:13,050
we can get information like the CL IP &

00:30:07,800 --> 00:30:14,460
Co LLP number identification right and

00:30:13,050 --> 00:30:17,100
this depends on Oh phone Oh

00:30:14,460 --> 00:30:21,600
Luzi and pulseaudio right Oh phone Oh is

00:30:17,100 --> 00:30:24,390
the actual voice call agent and for

00:30:21,600 --> 00:30:28,410
pulseaudio or Lutze

00:30:24,390 --> 00:30:31,710
and we have some more features we're

00:30:28,410 --> 00:30:33,990
working on for this which is being able

00:30:31,710 --> 00:30:38,190
to in call sent dial tones call waiting

00:30:33,990 --> 00:30:40,590
for hold forwarding and then voice modem

00:30:38,190 --> 00:30:45,090
support for those WN modems that support

00:30:40,590 --> 00:30:47,670
voice calls so this is the current API

00:30:45,090 --> 00:30:50,700
we dial hang up answer and then

00:30:47,670 --> 00:30:53,430
everything's event-driven right we have

00:30:50,700 --> 00:30:57,330
to be able to know right get the event

00:30:53,430 --> 00:30:59,430
that an incoming call is there right so

00:30:57,330 --> 00:31:02,130
that we can pop up

00:30:59,430 --> 00:31:04,770
either I answer or I decline button

00:31:02,130 --> 00:31:07,470
right so when you're you're doing a

00:31:04,770 --> 00:31:08,970
phone app like we've had to modify those

00:31:07,470 --> 00:31:10,950
are the types of things you handle in

00:31:08,970 --> 00:31:14,640
the app the way that Scott was showing

00:31:10,950 --> 00:31:19,320
with with processing these events in in

00:31:14,640 --> 00:31:22,290
an API there's a media scanner buying

00:31:19,320 --> 00:31:25,350
binding and so that back ends on light

00:31:22,290 --> 00:31:27,540
media scanner again more common

00:31:25,350 --> 00:31:32,340
middleware stuff from the Linux world

00:31:27,540 --> 00:31:35,190
and so that that binding simply scans

00:31:32,340 --> 00:31:38,120
removable data now keeps a database and

00:31:35,190 --> 00:31:43,230
we can access that and we get events

00:31:38,120 --> 00:31:45,600
based on new data being available so

00:31:43,230 --> 00:31:48,780
it's a very simple one just subscribe

00:31:45,600 --> 00:31:51,960
the events it'll let you know if there's

00:31:48,780 --> 00:31:53,910
new media added removes so you can sort

00:31:51,960 --> 00:31:56,430
that in your playlists and you're in and

00:31:53,910 --> 00:32:00,680
do what you need to do in your you know

00:31:56,430 --> 00:32:03,450
specific media player application

00:32:00,680 --> 00:32:05,610
there's a new media player binding this

00:32:03,450 --> 00:32:09,090
is in very early development but because

00:32:05,610 --> 00:32:11,040
you know everything's done very

00:32:09,090 --> 00:32:12,390
incremental e in the open we have an

00:32:11,040 --> 00:32:16,320
early version of this media player

00:32:12,390 --> 00:32:17,970
binding upstream and it's simply

00:32:16,320 --> 00:32:21,690
playback and control depends on

00:32:17,970 --> 00:32:23,760
GStreamer up up until well now it's

00:32:21,690 --> 00:32:27,180
being worked on being integrated into

00:32:23,760 --> 00:32:29,490
the demo media player app all of our all

00:32:27,180 --> 00:32:32,850
of our media playback in the the actual

00:32:29,490 --> 00:32:36,390
demo layers of the meta a GL demo layer

00:32:32,850 --> 00:32:38,550
apps was done with the the cute qml

00:32:36,390 --> 00:32:41,700
media player right so it's a cute media

00:32:38,550 --> 00:32:43,620
player object doing all that playback so

00:32:41,700 --> 00:32:46,320
we're decoupling those things part of

00:32:43,620 --> 00:32:49,910
this theme of getting the UI abstracted

00:32:46,320 --> 00:32:52,920
from from the actual backend of things

00:32:49,910 --> 00:32:57,110
the future will add video playback into

00:32:52,920 --> 00:33:00,930
this binding it's very simple you can

00:32:57,110 --> 00:33:02,850
setup a playlist for it you can get the

00:33:00,930 --> 00:33:06,180
current state of the playlist and modify

00:33:02,850 --> 00:33:09,090
that you can get metadata and then you

00:33:06,180 --> 00:33:10,950
subscribe on subscribe to events so as

00:33:09,090 --> 00:33:15,450
the playlist changes you get

00:33:10,950 --> 00:33:16,950
event and you get events based metadata

00:33:15,450 --> 00:33:19,980
events that tell you the position

00:33:16,950 --> 00:33:21,600
duration of a track as that continues

00:33:19,980 --> 00:33:26,179
because you need that to update the UI

00:33:21,600 --> 00:33:28,679
write the position and in a visual sense

00:33:26,179 --> 00:33:32,119
okay and then the next set we have a

00:33:28,679 --> 00:33:36,840
whole bunch of location-based services

00:33:32,119 --> 00:33:39,629
simple wrappers again GPS binding right

00:33:36,840 --> 00:33:42,749
just wraps around GPS D so it's exact

00:33:39,629 --> 00:33:45,929
same set of GNSS data that you will get

00:33:42,749 --> 00:33:48,629
from GPS D protocol so latitude

00:33:45,929 --> 00:33:52,799
longitude altitude speed and time right

00:33:48,629 --> 00:33:56,730
and then vary these ones become very

00:33:52,799 --> 00:33:58,739
simple so you have a simple getter you

00:33:56,730 --> 00:34:01,109
can subscribe to event and then you get

00:33:58,739 --> 00:34:03,119
that same data on the event location

00:34:01,109 --> 00:34:05,879
thing so you have the ability to just go

00:34:03,119 --> 00:34:09,179
pull that in a polled way but most most

00:34:05,879 --> 00:34:11,520
usage models mean dictate that you'll be

00:34:09,179 --> 00:34:13,950
subscribing and just allowing it to give

00:34:11,520 --> 00:34:17,909
you the regular update on the location

00:34:13,950 --> 00:34:20,700
data a follow-on to this one was the geo

00:34:17,909 --> 00:34:22,799
clue binding so you might detect a

00:34:20,700 --> 00:34:27,419
little overlap here if you know what geo

00:34:22,799 --> 00:34:30,210
clue does so geo clue has location data

00:34:27,419 --> 00:34:32,460
as well almost the same set it also adds

00:34:30,210 --> 00:34:35,040
heading data but what's important about

00:34:32,460 --> 00:34:37,980
geo clue is it expands the realm of

00:34:35,040 --> 00:34:40,710
providers of location data to what

00:34:37,980 --> 00:34:43,409
modern systems require so we don't

00:34:40,710 --> 00:34:46,230
always have a fix on enough satellites

00:34:43,409 --> 00:34:49,500
we're in a building you can use geo clue

00:34:46,230 --> 00:34:53,520
can gather location data from Wi-Fi AP

00:34:49,500 --> 00:34:56,460
databases right the 3gpp if I get that

00:34:53,520 --> 00:35:00,390
right tower information the GIP

00:34:56,460 --> 00:35:01,619
databases right and GPS as well so

00:35:00,390 --> 00:35:06,720
there's a little overlap with the

00:35:01,619 --> 00:35:09,809
standalone GPS binding there it's got

00:35:06,720 --> 00:35:11,339
the almost exact same API well this is

00:35:09,809 --> 00:35:13,799
the exact same except the actual

00:35:11,339 --> 00:35:16,020
parameters you also get a heading out of

00:35:13,799 --> 00:35:20,270
that based on how well geo clue can do

00:35:16,020 --> 00:35:24,089
that this was added in to better support

00:35:20,270 --> 00:35:26,700
location services the way that most

00:35:24,089 --> 00:35:30,809
modern mobile operating systems do so

00:35:26,700 --> 00:35:33,420
and so on top of that there's another

00:35:30,809 --> 00:35:36,750
stack binding a geofence binding it's

00:35:33,420 --> 00:35:39,720
kind of a critical part of modern mobile

00:35:36,750 --> 00:35:42,470
api's and location services is the

00:35:39,720 --> 00:35:46,349
ability to add a bounding box and track

00:35:42,470 --> 00:35:49,980
egress ingress events in with that box

00:35:46,349 --> 00:35:54,540
right there's also the concept of

00:35:49,980 --> 00:35:57,839
dwelling time or array dwell status I

00:35:54,540 --> 00:36:01,430
should say and so dwelling is the

00:35:57,839 --> 00:36:06,720
concept of based on a time out right of

00:36:01,430 --> 00:36:08,849
of entering right a bounding box then

00:36:06,720 --> 00:36:11,280
you create a special event that means

00:36:08,849 --> 00:36:14,040
okay this for example the use case that

00:36:11,280 --> 00:36:15,990
drives this and you may see that in your

00:36:14,040 --> 00:36:18,809
favorite mobile operating system is

00:36:15,990 --> 00:36:21,990
something notices that you've arrived at

00:36:18,809 --> 00:36:24,720
home and triggers some behavior right

00:36:21,990 --> 00:36:27,210
and that's typically based on some

00:36:24,720 --> 00:36:30,180
timeout right so a dwell indicator might

00:36:27,210 --> 00:36:33,240
set it at ten minutes right and then you

00:36:30,180 --> 00:36:37,890
get an event so that you can policy

00:36:33,240 --> 00:36:40,680
drive that with this API through these

00:36:37,890 --> 00:36:44,280
interfaces so the way it works is you

00:36:40,680 --> 00:36:47,099
take a min/max latitude longitude you

00:36:44,280 --> 00:36:49,410
can add a fence with those parameters so

00:36:47,099 --> 00:36:52,109
you've got a binding box you can remove

00:36:49,410 --> 00:36:55,049
it you can list where they're at you can

00:36:52,109 --> 00:36:57,150
set the dwell transition time before

00:36:55,049 --> 00:36:59,520
that event happens and of course

00:36:57,150 --> 00:37:01,410
subscribe and unsubscribe these events

00:36:59,520 --> 00:37:05,190
so a geofence

00:37:01,410 --> 00:37:08,069
fence event will tell you hey I've

00:37:05,190 --> 00:37:11,640
entered I've exited one of these fence

00:37:08,069 --> 00:37:13,349
fences or hey we just hit dwell right

00:37:11,640 --> 00:37:15,299
and it'll tell you which fence and so

00:37:13,349 --> 00:37:17,609
forth and one of the things probably

00:37:15,299 --> 00:37:20,240
future right now the dwell transition

00:37:17,609 --> 00:37:24,510
time is fixed across all the fences and

00:37:20,240 --> 00:37:26,339
we will probably add per fence dwell

00:37:24,510 --> 00:37:30,900
transition timing is one of the big

00:37:26,339 --> 00:37:35,430
things okay what Scott talked about next

00:37:30,900 --> 00:37:37,080
steps quickly so in addition to some of

00:37:35,430 --> 00:37:40,080
the cleanups and

00:37:37,080 --> 00:37:41,990
feature changes that Matt's described

00:37:40,080 --> 00:37:45,210
with the bindings the roadmap includes

00:37:41,990 --> 00:37:48,180
additions such as Bluetooth Bluetooth

00:37:45,210 --> 00:37:50,550
PPAP support which basically be addition

00:37:48,180 --> 00:37:52,650
of contacts database from your phone

00:37:50,550 --> 00:37:54,390
through the Bluetooth binding so the

00:37:52,650 --> 00:37:57,960
tough in the app can actually bring up

00:37:54,390 --> 00:38:00,390
your name of a caller and do sort of you

00:37:57,960 --> 00:38:02,280
know the typical caller ID that you get

00:38:00,390 --> 00:38:05,130
on a mobile device today actually have

00:38:02,280 --> 00:38:06,840
that as part of the AGL API complete the

00:38:05,130 --> 00:38:08,880
media player binding actually you know

00:38:06,840 --> 00:38:12,930
start integrating the demo apps and add

00:38:08,880 --> 00:38:14,480
video support basically get that working

00:38:12,930 --> 00:38:17,310
hopefully for you know early next year

00:38:14,480 --> 00:38:19,860
it's a very big ask that comes up very

00:38:17,310 --> 00:38:23,060
commonly about AG LSB mail I actually

00:38:19,860 --> 00:38:25,220
have video playback as part of the API

00:38:23,060 --> 00:38:27,690
adding a speech recognition and

00:38:25,220 --> 00:38:29,700
text-to-speech bindings there's actually

00:38:27,690 --> 00:38:31,290
been recently at the AMM last week

00:38:29,700 --> 00:38:34,020
there's some new member companies that

00:38:31,290 --> 00:38:35,820
provide basically libraries for this as

00:38:34,020 --> 00:38:38,520
well as there's a couple of big open

00:38:35,820 --> 00:38:40,860
source projects actually building a API

00:38:38,520 --> 00:38:42,900
interface for that having a bonding that

00:38:40,860 --> 00:38:44,880
you could actually use in a demo app or

00:38:42,900 --> 00:38:46,470
as part of the year product to actually

00:38:44,880 --> 00:38:49,380
do the very common things that you see

00:38:46,470 --> 00:38:52,920
in a car today incoming text being

00:38:49,380 --> 00:38:54,390
translated into speech vice versa

00:38:52,920 --> 00:38:57,090
so that's a feature that's really

00:38:54,390 --> 00:38:59,010
required in AGL going forward that's

00:38:57,090 --> 00:39:02,190
mentioned the man support so actually

00:38:59,010 --> 00:39:03,330
doing a WN binding and actually doing

00:39:02,190 --> 00:39:05,160
the work to actually integrate voice

00:39:03,330 --> 00:39:07,050
calls it's a if the modem actually has

00:39:05,160 --> 00:39:08,490
voice support and as well we've

00:39:07,050 --> 00:39:10,440
mentioned the audio bondings this would

00:39:08,490 --> 00:39:13,410
be a work to actually bill the

00:39:10,440 --> 00:39:15,540
first-class interface for audio in a GL

00:39:13,410 --> 00:39:17,310
that's basically application developers

00:39:15,540 --> 00:39:19,020
can work against and actually pull out

00:39:17,310 --> 00:39:22,290
the audio manager as it stands today

00:39:19,020 --> 00:39:23,880
very likely or refactor it into

00:39:22,290 --> 00:39:26,160
something that works a bit better with

00:39:23,880 --> 00:39:28,020
the a GL application framework and so

00:39:26,160 --> 00:39:29,550
that's hopefully coming quite soon and

00:39:28,020 --> 00:39:32,670
applications and start to convert over

00:39:29,550 --> 00:39:34,740
and use that API and there's a new

00:39:32,670 --> 00:39:36,720
windscreen and window manager binding

00:39:34,740 --> 00:39:38,880
that's actually going to allow much more

00:39:36,720 --> 00:39:41,400
sophisticated home screen behavior than

00:39:38,880 --> 00:39:43,260
some of the existing demo apps there's

00:39:41,400 --> 00:39:45,360
been some external demos that have a

00:39:43,260 --> 00:39:48,000
quite fancy multi-screen that's going to

00:39:45,360 --> 00:39:50,130
become a first-class citizen and the AGL

00:39:48,000 --> 00:39:51,569
api hopefully very soon and

00:39:50,130 --> 00:39:56,849
see much more sophisticated demos

00:39:51,569 --> 00:39:57,960
hopefully that are upstream and so if

00:39:56,849 --> 00:40:02,309
you want to get involved you want to

00:39:57,960 --> 00:40:04,380
take over so the community it has a lot

00:40:02,309 --> 00:40:07,289
of support channels we have IRC channel

00:40:04,380 --> 00:40:08,700
on freenode the mailing list there's a

00:40:07,289 --> 00:40:10,170
weekly developer call that you anybody

00:40:08,700 --> 00:40:13,619
can call in if they want to take part

00:40:10,170 --> 00:40:16,259
and pose a question or ask about an

00:40:13,619 --> 00:40:18,809
issue they have there's an open JIRA and

00:40:16,259 --> 00:40:21,750
Garrett if you have a Linux Foundation

00:40:18,809 --> 00:40:23,579
ID which anyone can create you can file

00:40:21,750 --> 00:40:26,160
a juror issue against AGL if you have a

00:40:23,579 --> 00:40:27,869
feature request for a bug and if you

00:40:26,160 --> 00:40:31,470
actually want to upload a change you can

00:40:27,869 --> 00:40:33,269
do that through Garrett and there's off

00:40:31,470 --> 00:40:35,160
course we've mentioned the dock site is

00:40:33,269 --> 00:40:37,680
also a nice wiki site that has you know

00:40:35,160 --> 00:40:39,990
some startup guides information about

00:40:37,680 --> 00:40:41,789
the releases and feel free to check

00:40:39,990 --> 00:40:44,220
those out and you know find out a lot

00:40:41,789 --> 00:40:45,450
more about a GL and this couple nice

00:40:44,220 --> 00:40:48,960
links they're just some of the getting

00:40:45,450 --> 00:40:51,029
started stuff and come come join us

00:40:48,960 --> 00:40:53,339
right like every open source project it

00:40:51,029 --> 00:40:55,730
desperately needs more developers we're

00:40:53,339 --> 00:41:01,500
lonely right come join us at IRC and

00:40:55,730 --> 00:41:01,920
stuff so we're over time of course real

00:41:01,500 --> 00:41:04,109
quick

00:41:01,920 --> 00:41:06,930
Kotoko group is hiring we're looking for

00:41:04,109 --> 00:41:09,779
engineers come talk us talk to us it's a

00:41:06,930 --> 00:41:11,819
gratuitous ad here and but more

00:41:09,779 --> 00:41:13,650
importantly come to the technology

00:41:11,819 --> 00:41:15,660
showcase tomorrow evening we're demoing

00:41:13,650 --> 00:41:17,130
to AGL platforms with some of these

00:41:15,660 --> 00:41:19,170
bindings and apps so you can actually

00:41:17,130 --> 00:41:25,259
see the thing for real instead of us

00:41:19,170 --> 00:41:27,210
talking about it thanks thank you we can

00:41:25,259 --> 00:41:30,559
take questions yeah a few questions

00:41:27,210 --> 00:41:30,559

YouTube URL: https://www.youtube.com/watch?v=RgI-g5h1t8I


