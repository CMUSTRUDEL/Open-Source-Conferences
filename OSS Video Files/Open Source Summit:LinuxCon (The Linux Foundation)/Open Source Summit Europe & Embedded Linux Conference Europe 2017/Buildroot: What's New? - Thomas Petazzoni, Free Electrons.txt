Title: Buildroot: What's New? - Thomas Petazzoni, Free Electrons
Publication date: 2017-10-25
Playlist: Open Source Summit Europe & Embedded Linux Conference Europe 2017
Description: 
	Buildroot: What's New? - Thomas Petazzoni, Free Electrons

Buildroot is a popular and easy to use embedded Linux build system. Within minutes, it is capable of generating lightweight and customized Linux systems, including the cross-compilation toolchain, kernel and bootloader images, as well as a wide variety of userspace libraries and programs.

Since our last "What's new" talk at ELC 2014, three and half years have passed, and Buildroot has continued to evolve significantly.

After a short introduction about Buildroot, this talk will go through the numerous new features and improvements that have appeared over the last years, and show how they can be useful for developers, users and contributors.

About Thomas Petazzoni
Thomas Petazzoni is CTO and embedded Linux developer at Free Electrons. He is a co-maintainer of the Buildroot project and also a contributor to the Linux kernel, helping adding support for Marvell ARM processors.
Captions: 
	00:00:00,060 --> 00:00:06,060
good afternoon and welcome to this talk

00:00:02,970 --> 00:00:08,760
whoo this is real loud so welcome to

00:00:06,060 --> 00:00:12,000
this be true talk my name is Thomas and

00:00:08,760 --> 00:00:13,889
let me introduce myself I'm the CTO and

00:00:12,000 --> 00:00:16,080
one of the embedded Linux engineers at

00:00:13,889 --> 00:00:17,760
free electrons we do umbrella mix

00:00:16,080 --> 00:00:19,920
consulting Linux you know development

00:00:17,760 --> 00:00:23,250
earlier development and build system

00:00:19,920 --> 00:00:25,470
work I do work on the Linux kernel

00:00:23,250 --> 00:00:27,810
mainly around Marvell platforms

00:00:25,470 --> 00:00:29,880
I do also contribute quite a bit to

00:00:27,810 --> 00:00:32,969
build route which is gonna be the topic

00:00:29,880 --> 00:00:34,829
of today's talk I live in the southwest

00:00:32,969 --> 00:00:37,920
of France but you've already noticed my

00:00:34,829 --> 00:00:40,500
terrible accent and when I'm not doing

00:00:37,920 --> 00:00:44,360
good stuff I do wind surfing and

00:00:40,500 --> 00:00:47,010
snowboarding so before we get started

00:00:44,360 --> 00:00:51,180
let's have a quick poll who already

00:00:47,010 --> 00:00:53,789
knows about build route ok almost the

00:00:51,180 --> 00:00:58,230
entire room who is already using Bell

00:00:53,789 --> 00:01:03,480
route ok few people who is using

00:00:58,230 --> 00:01:11,820
openembedded half of the room open wrt

00:01:03,480 --> 00:01:15,960
or ok another build system ok you we're

00:01:11,820 --> 00:01:17,430
people ok thanks so most of you know

00:01:15,960 --> 00:01:19,560
build routes I'm gonna go pretty quickly

00:01:17,430 --> 00:01:21,810
over that it's an embedded Linux build

00:01:19,560 --> 00:01:24,180
system so the idea is that we have a

00:01:21,810 --> 00:01:25,970
source code for a number of software

00:01:24,180 --> 00:01:28,159
components a Linux kernel the bootloader

00:01:25,970 --> 00:01:31,049
perhaps busybox

00:01:28,159 --> 00:01:32,759
graphical libraries network libraries a

00:01:31,049 --> 00:01:35,400
bunch of applications and we want to

00:01:32,759 --> 00:01:37,290
cross compile everything and generate a

00:01:35,400 --> 00:01:40,079
root filesystem image that you can put

00:01:37,290 --> 00:01:43,590
on your embedded device so that's what a

00:01:40,079 --> 00:01:47,030
build system is all about and root tries

00:01:43,590 --> 00:01:50,909
to be fast and simple that's clearly the

00:01:47,030 --> 00:01:53,100
domain two goals and it try to be easy

00:01:50,909 --> 00:01:54,899
to use and understand so we use K config

00:01:53,100 --> 00:01:57,299
to describe the configuration of the

00:01:54,899 --> 00:01:58,590
system so you run make mini config and

00:01:57,299 --> 00:02:01,200
you can set what is your target

00:01:58,590 --> 00:02:02,610
architecture what components you want in

00:02:01,200 --> 00:02:04,140
your system which can all versions you

00:02:02,610 --> 00:02:06,659
want the keynote configuration it's all

00:02:04,140 --> 00:02:09,209
saved in a nice dot config file so it's

00:02:06,659 --> 00:02:11,190
very familiar to people doing a little

00:02:09,209 --> 00:02:13,200
bit of Linux kernel development or at

00:02:11,190 --> 00:02:13,890
least using the Linux kernel and then

00:02:13,200 --> 00:02:15,540
you run may

00:02:13,890 --> 00:02:17,070
canids goes and downloads everything

00:02:15,540 --> 00:02:18,870
that stated it builds a tool chain

00:02:17,070 --> 00:02:20,580
builds your candle builds all the user

00:02:18,870 --> 00:02:22,860
space components put all that together

00:02:20,580 --> 00:02:25,350
and creates a root filesystem image out

00:02:22,860 --> 00:02:27,720
of it we generate by default a pretty

00:02:25,350 --> 00:02:29,550
small file system two Meg's so if you do

00:02:27,720 --> 00:02:31,440
the default build you get two megabyte

00:02:29,550 --> 00:02:34,170
file system with just buzzy box and you

00:02:31,440 --> 00:02:36,120
sell obscene so it's you can start small

00:02:34,170 --> 00:02:38,100
and then based on that at whatever

00:02:36,120 --> 00:02:41,190
package you want so we've got more than

00:02:38,100 --> 00:02:43,620
two thousand packages nowadays ranging

00:02:41,190 --> 00:02:46,170
from small things like Posey box all the

00:02:43,620 --> 00:02:49,290
way up to a full x.org stack gstreamer

00:02:46,170 --> 00:02:51,450
QT and many other things we generate

00:02:49,290 --> 00:02:53,459
filesystem images so contrary to oh

00:02:51,450 --> 00:02:55,560
you're Yocto generate complete

00:02:53,459 --> 00:02:57,989
distributions with binary packages we

00:02:55,560 --> 00:03:00,720
really only generate like a ext2 image

00:02:57,989 --> 00:03:03,090
or ub ifs image or whatever file system

00:03:00,720 --> 00:03:05,610
you like without any package management

00:03:03,090 --> 00:03:07,739
system so if you wanted to upgrade you

00:03:05,610 --> 00:03:09,660
do a full system upgrade

00:03:07,739 --> 00:03:11,100
it's a vendor-neutral tool it's a

00:03:09,660 --> 00:03:13,950
maintained by an open source community

00:03:11,100 --> 00:03:17,100
with lots of contributors originating

00:03:13,950 --> 00:03:18,720
from different companies the community

00:03:17,100 --> 00:03:22,110
is very active and I have some graphs

00:03:18,720 --> 00:03:24,180
about that in a few slides we do stable

00:03:22,110 --> 00:03:26,580
villages every three months and we've

00:03:24,180 --> 00:03:29,250
been doing that for since 2009 so it's

00:03:26,580 --> 00:03:32,580
been quite a while and the project is it

00:03:29,250 --> 00:03:34,620
started in 2001 which makes it I believe

00:03:32,580 --> 00:03:37,830
the oldest still maintained build system

00:03:34,620 --> 00:03:41,280
so we've been around for a while so I

00:03:37,830 --> 00:03:44,549
made this talk about three and a half

00:03:41,280 --> 00:03:46,680
years ago and ELC in the u.s. in 2014

00:03:44,549 --> 00:03:49,110
and so I thought oh it's been a while

00:03:46,680 --> 00:03:50,549
that we haven't presented with well the

00:03:49,110 --> 00:03:52,830
new features and improvements in bin

00:03:50,549 --> 00:03:54,870
route and when you make the summary

00:03:52,830 --> 00:03:56,670
there's a fair number of them so I

00:03:54,870 --> 00:03:59,310
submitted that talk and it's luckily got

00:03:56,670 --> 00:04:01,830
accepted so I wanted to share a few

00:03:59,310 --> 00:04:06,150
details about like the project activity

00:04:01,830 --> 00:04:07,830
the release schedule the improvements in

00:04:06,150 --> 00:04:09,750
terms of architecture support tools and

00:04:07,830 --> 00:04:12,120
supports in the core between

00:04:09,750 --> 00:04:15,660
infrastructure testing improvements as

00:04:12,120 --> 00:04:17,820
well and a few other details so moving

00:04:15,660 --> 00:04:19,260
on with the first topic project activity

00:04:17,820 --> 00:04:23,669
this shows the number of commits per

00:04:19,260 --> 00:04:25,200
month so report release here so for

00:04:23,669 --> 00:04:27,520
every release we've got approximately

00:04:25,200 --> 00:04:31,370
between 1,000 and

00:04:27,520 --> 00:04:33,439
1,500 comets and as I said that we

00:04:31,370 --> 00:04:36,650
producer release every three months so

00:04:33,439 --> 00:04:40,610
it's a fairly active project we get lots

00:04:36,650 --> 00:04:43,219
of activity and and contributors so the

00:04:40,610 --> 00:04:46,039
contributor numbers is about 100 people

00:04:43,219 --> 00:04:48,949
contributing to its release no there's a

00:04:46,039 --> 00:04:52,430
little bit more more than that but 110

00:04:48,949 --> 00:04:53,900
120 sometimes contributing every every

00:04:52,430 --> 00:04:55,580
three months to go to the release so

00:04:53,900 --> 00:04:58,009
it's only a different scale than the the

00:04:55,580 --> 00:05:01,699
Linux kernel but it makes it a fairly

00:04:58,009 --> 00:05:05,539
active medium-sized open source project

00:05:01,699 --> 00:05:10,639
we've got pretty serious mailing list

00:05:05,539 --> 00:05:12,259
activity over 2,000 email per month on

00:05:10,639 --> 00:05:14,030
the mailing list so it's if you

00:05:12,259 --> 00:05:16,610
subscribe to the mailing list you get a

00:05:14,030 --> 00:05:19,370
good turn nice fluid of emails in your

00:05:16,610 --> 00:05:21,800
inbox every day and looking at the

00:05:19,370 --> 00:05:23,659
number of packages since the last five

00:05:21,800 --> 00:05:26,120
years so we started with less than a

00:05:23,659 --> 00:05:28,400
thousand packages five years ago and we

00:05:26,120 --> 00:05:31,069
know of more than 2000 of them and we

00:05:28,400 --> 00:05:34,580
encouraged a lot people to contribute

00:05:31,069 --> 00:05:37,310
their packages upstream we don't really

00:05:34,580 --> 00:05:39,710
encourage the model of separate layers

00:05:37,310 --> 00:05:41,360
like openembedded is encouraging we

00:05:39,710 --> 00:05:43,069
prefer to have all the packages upstream

00:05:41,360 --> 00:05:44,800
to increase the review and improve the

00:05:43,069 --> 00:05:47,210
quality of them which is why this

00:05:44,800 --> 00:05:50,479
package member is growing and continues

00:05:47,210 --> 00:05:53,690
to grow over time speaking of the

00:05:50,479 --> 00:05:55,879
release schedule so since 2009 we've

00:05:53,690 --> 00:05:57,860
done we've been doing releases every

00:05:55,879 --> 00:06:00,139
three months so it's pretty pretty easy

00:05:57,860 --> 00:06:02,810
one in February one in May one in August

00:06:00,139 --> 00:06:04,699
and one in November and we never skipped

00:06:02,810 --> 00:06:07,370
a release or missed a release date

00:06:04,699 --> 00:06:09,469
except by a few days at most so it's

00:06:07,370 --> 00:06:14,029
pretty impressive for a purely open

00:06:09,469 --> 00:06:16,940
source driven project so until now we

00:06:14,029 --> 00:06:19,159
were sometimes doing point releases for

00:06:16,940 --> 00:06:22,009
the latest stable release as a way of

00:06:19,159 --> 00:06:25,240
fixing a few bugs a few issues but with

00:06:22,009 --> 00:06:28,419
there were no long term maintained

00:06:25,240 --> 00:06:30,650
versions so if you wanted to get

00:06:28,419 --> 00:06:33,169
security fixes

00:06:30,650 --> 00:06:34,909
bug fixes build fixes basically your

00:06:33,169 --> 00:06:37,339
only option was either to do the back

00:06:34,909 --> 00:06:39,560
part yourself or upgrade to a completely

00:06:37,339 --> 00:06:40,580
new release which means upgrading

00:06:39,560 --> 00:06:44,509
everything in your system

00:06:40,580 --> 00:06:47,599
which is not always possible so since 20

00:06:44,509 --> 00:06:50,689
years 1702 we decided to have an LTS

00:06:47,599 --> 00:06:53,000
release so every O'Toole release is

00:06:50,689 --> 00:06:54,740
going to be for no maintain for one year

00:06:53,000 --> 00:06:57,740
will see if other people volunteers to

00:06:54,740 --> 00:07:00,259
extend that but that's a start which is

00:06:57,740 --> 00:07:03,080
going to be maintained for security bill

00:07:00,259 --> 00:07:06,800
than bug fixes so there are already been

00:07:03,080 --> 00:07:09,650
six point releases since twenty 1702 so

00:07:06,800 --> 00:07:11,960
dot one dot two three four five six in

00:07:09,650 --> 00:07:14,629
April May June July two times in

00:07:11,960 --> 00:07:16,490
September so almost one per month we've

00:07:14,629 --> 00:07:19,699
done about five hundred commits there

00:07:16,490 --> 00:07:23,270
amongst which about let's say third

00:07:19,699 --> 00:07:25,400
where security update security fixes and

00:07:23,270 --> 00:07:27,229
this is mainly done by the original

00:07:25,400 --> 00:07:30,440
project maintainer Peter Coast Guard

00:07:27,229 --> 00:07:31,969
with sits right here and we're seeing

00:07:30,440 --> 00:07:35,000
more and more people interested in that

00:07:31,969 --> 00:07:36,349
and so if you use Bill Road into devices

00:07:35,000 --> 00:07:39,590
that you don't want to

00:07:36,349 --> 00:07:41,870
well fully upgrades every free few

00:07:39,590 --> 00:07:44,300
months perhaps looking at this LTS

00:07:41,870 --> 00:07:47,960
release is interesting and obviously the

00:07:44,300 --> 00:07:49,520
next one will be a twenty 1802 in terms

00:07:47,960 --> 00:07:53,000
of maintenance there has been a few

00:07:49,520 --> 00:07:56,750
changes over the last years we used to

00:07:53,000 --> 00:07:58,699
have a single commuter as acting as a

00:07:56,750 --> 00:08:01,150
project maintainer so that's Peter guy

00:07:58,699 --> 00:08:04,729
sitting still here he hasn't moved and

00:08:01,150 --> 00:08:06,770
because of this increase of contributors

00:08:04,729 --> 00:08:10,370
and contributions we added two other

00:08:06,770 --> 00:08:14,330
commuters so with me first and then our

00:08:10,370 --> 00:08:16,520
note join is sitting here and we also

00:08:14,330 --> 00:08:19,190
have no physical meetings that we held

00:08:16,520 --> 00:08:22,430
pretty much three times a year so we had

00:08:19,190 --> 00:08:24,409
a meeting just last weekend before that

00:08:22,430 --> 00:08:27,349
conference and you can see a few people

00:08:24,409 --> 00:08:29,870
here working on build roads and we have

00:08:27,349 --> 00:08:31,669
one after for them and we now have one

00:08:29,870 --> 00:08:34,510
more private eye Canton between the core

00:08:31,669 --> 00:08:38,529
developers in December so that helps

00:08:34,510 --> 00:08:41,930
make build would move forward

00:08:38,529 --> 00:08:43,370
architecture supports I think what Evan

00:08:41,930 --> 00:08:44,959
checked really but I think we're

00:08:43,370 --> 00:08:48,290
probably the build system supporting the

00:08:44,959 --> 00:08:51,940
largest number of architectures ranging

00:08:48,290 --> 00:08:53,740
form the well-known ones arm of course

00:08:51,940 --> 00:08:55,840
x86 and

00:08:53,740 --> 00:08:58,300
poor PC and MIPS but also more like

00:08:55,840 --> 00:09:01,330
specialized architecture or less known

00:08:58,300 --> 00:09:04,810
architectures thinking like now is to

00:09:01,330 --> 00:09:07,210
microblaze open risk arc super edge and

00:09:04,810 --> 00:09:08,650
a bunch of others so it's pretty

00:09:07,210 --> 00:09:10,780
impressive and we've got a number of

00:09:08,650 --> 00:09:13,900
contributors interested in those more

00:09:10,780 --> 00:09:16,540
specialized architectures so it's a nice

00:09:13,900 --> 00:09:18,790
thing so in in recent years would have

00:09:16,540 --> 00:09:21,220
been improved on the architecture side

00:09:18,790 --> 00:09:23,350
is the addition for no MMU arm support

00:09:21,220 --> 00:09:25,230
so we know can build systems for the

00:09:23,350 --> 00:09:27,340
cortex m3 and cortex m4

00:09:25,230 --> 00:09:29,770
microcontrollers that can run a Linux

00:09:27,340 --> 00:09:31,960
system we've done a bunch of

00:09:29,770 --> 00:09:34,840
improvements on the arm arm 64 supports

00:09:31,960 --> 00:09:36,610
so that you can know select the arm 64

00:09:34,840 --> 00:09:38,770
core that you're using and decide if you

00:09:36,610 --> 00:09:41,280
want to run a 64-bit system or a 32-bit

00:09:38,770 --> 00:09:44,230
system on it

00:09:41,280 --> 00:09:46,540
iBM has contributed support for poor PC

00:09:44,230 --> 00:09:48,640
64 points Layton and Ben Kenyon so it's

00:09:46,540 --> 00:09:50,200
nice to see that's the company doing the

00:09:48,640 --> 00:09:52,900
the architecture is directly

00:09:50,200 --> 00:09:54,550
contributing to the to the project there

00:09:52,900 --> 00:09:55,900
has been also a lot of MIPS really the

00:09:54,550 --> 00:09:57,730
improvement with imagination

00:09:55,900 --> 00:09:59,560
technologies making some efforts to push

00:09:57,730 --> 00:10:01,720
forward this architecture we've received

00:09:59,560 --> 00:10:04,990
lots of contributions from them so

00:10:01,720 --> 00:10:07,450
adding mips32 r6 and mips64 r6 support

00:10:04,990 --> 00:10:09,760
and adding more fine-grain mips core

00:10:07,450 --> 00:10:13,030
selection and things like that we've

00:10:09,760 --> 00:10:14,830
added support for completely well not

00:10:13,030 --> 00:10:16,360
new architectures but our architecture

00:10:14,830 --> 00:10:21,360
that were new to build roads open race

00:10:16,360 --> 00:10:21,360
sea sky and sparc64 completely new

00:10:22,800 --> 00:10:30,910
support for m6 JK was well kind of rien

00:10:26,530 --> 00:10:35,110
a belittling for ages and it was a fixed

00:10:30,910 --> 00:10:36,970
and more enabled we've enabled support

00:10:35,110 --> 00:10:38,860
for black fin and micro blaze with the

00:10:36,970 --> 00:10:40,840
UC lips Eng support and I'm going to get

00:10:38,860 --> 00:10:43,660
back to that in the next lines and we

00:10:40,840 --> 00:10:45,550
also tend to drop features for that are

00:10:43,660 --> 00:10:47,890
no longer being used of architectures

00:10:45,550 --> 00:10:51,100
like AVR 32 which was also dropped from

00:10:47,890 --> 00:10:53,500
the kennel recently and SH 64 which

00:10:51,100 --> 00:10:56,620
never really well materialized in the

00:10:53,500 --> 00:10:58,420
real world were dropped so quite a few

00:10:56,620 --> 00:11:01,510
changes they are extending our

00:10:58,420 --> 00:11:02,530
architecture support on the tool chain

00:11:01,510 --> 00:11:04,570
side

00:11:02,530 --> 00:11:07,180
build which supports two kind of

00:11:04,570 --> 00:11:08,650
mechanisms to either

00:11:07,180 --> 00:11:10,300
reduce or use the tool chain so we can

00:11:08,650 --> 00:11:13,030
either build our own tool chain in which

00:11:10,300 --> 00:11:16,060
case build will go and build bigger

00:11:13,030 --> 00:11:19,420
tools and then build first stage GCC and

00:11:16,060 --> 00:11:21,730
build C library builders final GCC and

00:11:19,420 --> 00:11:22,990
all the related libraries so that's one

00:11:21,730 --> 00:11:25,120
way of doing things which we call the

00:11:22,990 --> 00:11:27,130
internal tool chain back end and on the

00:11:25,120 --> 00:11:28,930
other side we can use existing tool

00:11:27,130 --> 00:11:31,600
chains so if you have a narrow tool

00:11:28,930 --> 00:11:32,980
chain around or tool chain provided by

00:11:31,600 --> 00:11:34,870
your vendor you can just add the root

00:11:32,980 --> 00:11:36,400
here is my tool chain and it can use it

00:11:34,870 --> 00:11:39,220
that's what we call the external tool

00:11:36,400 --> 00:11:42,820
chain back in on the internal tool chain

00:11:39,220 --> 00:11:44,950
side we added support for Messel the c

00:11:42,820 --> 00:11:45,610
library that is i think growing in

00:11:44,950 --> 00:11:48,940
popularity

00:11:45,610 --> 00:11:51,190
we moved away from UC lipsi which was

00:11:48,940 --> 00:11:53,080
pretty much a dead project to use Lipsey

00:11:51,190 --> 00:11:56,290
energy which is a fork of usally b that

00:11:53,080 --> 00:11:58,210
is actively maintained and a number of

00:11:56,290 --> 00:11:59,710
the improvements on the architecture

00:11:58,210 --> 00:12:02,020
support that i mentioned on the previous

00:11:59,710 --> 00:12:03,970
slides were contributed to Bill root by

00:12:02,020 --> 00:12:07,630
the use of Lipsy engine and maintainer

00:12:03,970 --> 00:12:09,430
so that's also a nice thing all the

00:12:07,630 --> 00:12:11,470
different components for the tool chain

00:12:09,430 --> 00:12:14,710
are really regularly updated so we know

00:12:11,470 --> 00:12:17,290
of GCC seven support Bennett Hills 229

00:12:14,710 --> 00:12:18,850
gdb eight gilepsy 226 which are

00:12:17,290 --> 00:12:21,250
basically the latest versions that you

00:12:18,850 --> 00:12:24,250
can find but we are a little bit

00:12:21,250 --> 00:12:26,890
conservative and we use by default

00:12:24,250 --> 00:12:28,990
always the version that's the one before

00:12:26,890 --> 00:12:32,470
the latest so our default this is

00:12:28,990 --> 00:12:36,400
version is six six inches to 28 and did

00:12:32,470 --> 00:12:38,470
be 712 we've added lgo so then the link

00:12:36,400 --> 00:12:39,970
time optimization support and fortran

00:12:38,470 --> 00:12:45,190
support yes there are still some people

00:12:39,970 --> 00:12:47,320
interested in that we add a tool chain

00:12:45,190 --> 00:12:50,860
wrapper so it's a university program

00:12:47,320 --> 00:12:53,470
that replaces GCC and and calls GCC

00:12:50,860 --> 00:12:55,300
itself but does additional checks we

00:12:53,470 --> 00:12:57,010
already add that for the external tool

00:12:55,300 --> 00:12:58,510
chain and we extended that for the

00:12:57,010 --> 00:13:00,190
internal tool chain and one of the

00:12:58,510 --> 00:13:02,800
things that it does is it checks if you

00:13:00,190 --> 00:13:04,870
don't have a header pass or library pass

00:13:02,800 --> 00:13:07,570
that point to host libraries and it

00:13:04,870 --> 00:13:09,340
helps detects cross compilation issues

00:13:07,570 --> 00:13:11,170
before they happen if your cross

00:13:09,340 --> 00:13:12,880
compiling something but try to link with

00:13:11,170 --> 00:13:15,220
source libraries or use toss headers

00:13:12,880 --> 00:13:17,170
there's something wrong going on so the

00:13:15,220 --> 00:13:19,840
wrapper says ooh something bad is

00:13:17,170 --> 00:13:20,990
happening here we remove support for eg

00:13:19,840 --> 00:13:23,180
Lib C because nowadays

00:13:20,990 --> 00:13:27,170
ts picked up everything that she was

00:13:23,180 --> 00:13:28,670
doing on the external tool chain side I

00:13:27,170 --> 00:13:31,610
think there were so much less

00:13:28,670 --> 00:13:34,430
improvements in this area one big change

00:13:31,610 --> 00:13:35,959
is more internal it's how it's organized

00:13:34,430 --> 00:13:37,670
in build routes the external tools in

00:13:35,959 --> 00:13:39,470
support used to be like one big package

00:13:37,670 --> 00:13:41,240
supporting all the possible tool chains

00:13:39,470 --> 00:13:42,950
but it started to be a little bit of a

00:13:41,240 --> 00:13:45,100
mess so we split that into multiple

00:13:42,950 --> 00:13:47,600
packages one per external tool chain

00:13:45,100 --> 00:13:50,810
family so we have one for Lin arrow arm

00:13:47,600 --> 00:13:53,209
one for the narrow our m60 for one for I

00:13:50,810 --> 00:13:55,190
know code sorcery tool chains and so on

00:13:53,209 --> 00:13:57,350
and so forth so it's more easily

00:13:55,190 --> 00:14:01,490
maintainable but it doesn't change much

00:13:57,350 --> 00:14:03,350
to functionality visible to the user we

00:14:01,490 --> 00:14:05,660
improved the wrapper that I said already

00:14:03,350 --> 00:14:07,490
existed for other reasons to do the

00:14:05,660 --> 00:14:09,290
sanity checking of header and library

00:14:07,490 --> 00:14:11,779
pass exactly like for the internal back

00:14:09,290 --> 00:14:13,580
end and we updated the tool change to

00:14:11,779 --> 00:14:15,860
use more recent versions of Leonardo's

00:14:13,580 --> 00:14:18,230
sorcery tool chains we've got a tool

00:14:15,860 --> 00:14:20,180
change from imagination technologies and

00:14:18,230 --> 00:14:22,130
from synapse is for the architecture

00:14:20,180 --> 00:14:23,570
removed a bunch of old tool chains that

00:14:22,130 --> 00:14:28,089
were no longer maintained so the usual

00:14:23,570 --> 00:14:30,709
maintenance think a side project

00:14:28,089 --> 00:14:32,810
that is somebody independent from root

00:14:30,709 --> 00:14:34,250
but uses it is related to this tool

00:14:32,810 --> 00:14:35,899
chain work so it's a tool chains that

00:14:34,250 --> 00:14:38,270
free electrons calm it's a website where

00:14:35,899 --> 00:14:39,529
you can select your architecture select

00:14:38,270 --> 00:14:40,880
the gilepsy atom

00:14:39,529 --> 00:14:42,200
sorry the C library that you want so it

00:14:40,880 --> 00:14:45,740
can be really busy you slurps your

00:14:42,200 --> 00:14:47,600
muscle and it has a lot of pre-compiled

00:14:45,740 --> 00:14:50,600
tool chain that are freely available so

00:14:47,600 --> 00:14:53,079
we have 34 different architecture and

00:14:50,600 --> 00:14:55,399
variants supported at the moment

00:14:53,079 --> 00:14:57,860
multiplied by more or less three C

00:14:55,399 --> 00:14:59,149
libraries multiplied by two versions so

00:14:57,860 --> 00:15:00,709
we have a stable version and

00:14:59,149 --> 00:15:02,810
bleeding-edge version for each tool

00:15:00,709 --> 00:15:04,459
chain so it makes something to roll why

00:15:02,810 --> 00:15:06,290
not red and 30 or something like that

00:15:04,459 --> 00:15:08,390
tool chains that are available you click

00:15:06,290 --> 00:15:10,940
and you have a pitbull tool available

00:15:08,390 --> 00:15:14,420
for that for that platform those tool

00:15:10,940 --> 00:15:16,370
chains are almost all of them tested by

00:15:14,420 --> 00:15:17,959
building a Linux kernel and booting it

00:15:16,370 --> 00:15:20,089
in Q mu and all of that is done

00:15:17,959 --> 00:15:22,399
automatically in the CI environment so

00:15:20,089 --> 00:15:25,310
it's done in on it lab CI so it's a new

00:15:22,399 --> 00:15:26,600
source for free available pre-built or

00:15:25,310 --> 00:15:31,160
change that you can leverage for your

00:15:26,600 --> 00:15:33,260
projects to save build time on the

00:15:31,160 --> 00:15:34,370
infrastructure side I think perhaps the

00:15:33,260 --> 00:15:36,080
most one

00:15:34,370 --> 00:15:39,440
the most interesting change that happen

00:15:36,080 --> 00:15:41,450
is the relocatable SDK so in build woods

00:15:39,440 --> 00:15:43,610
when you build there's one of the output

00:15:41,450 --> 00:15:45,440
folder is output host which contains two

00:15:43,610 --> 00:15:47,240
things it contains the native jewels so

00:15:45,440 --> 00:15:49,279
the binary programs that run on your

00:15:47,240 --> 00:15:51,440
build machine which includes the cross

00:15:49,279 --> 00:15:53,360
compilers and a bunch of other programs

00:15:51,440 --> 00:15:54,650
and it also contains the tool changes

00:15:53,360 --> 00:15:56,270
routes which are all the headers and

00:15:54,650 --> 00:15:57,650
libraries that have been crossed

00:15:56,270 --> 00:15:59,240
combined for the target so that the

00:15:57,650 --> 00:16:01,279
cross compiler can find them to build

00:15:59,240 --> 00:16:04,430
other libraries or other applications

00:16:01,279 --> 00:16:06,440
for the target so basically this outputs

00:16:04,430 --> 00:16:06,740
us if you take it and give it to someone

00:16:06,440 --> 00:16:08,390
else

00:16:06,740 --> 00:16:11,450
yes the cross compiler and all the

00:16:08,390 --> 00:16:13,730
libraries and files that allow this

00:16:11,450 --> 00:16:15,589
developer to compile applications that

00:16:13,730 --> 00:16:16,940
can run on the root filesystem produced

00:16:15,589 --> 00:16:18,950
by building fruit so essentially it is

00:16:16,940 --> 00:16:21,350
an SDK to software development kit

00:16:18,950 --> 00:16:23,630
the problem we had so far is that this

00:16:21,350 --> 00:16:25,490
output Aust thing was not relocatable

00:16:23,630 --> 00:16:28,100
so you could use it if you left it at

00:16:25,490 --> 00:16:30,260
the same absolute path but if you moved

00:16:28,100 --> 00:16:31,910
it around in your system or in another

00:16:30,260 --> 00:16:34,760
machine it wouldn't work

00:16:31,910 --> 00:16:37,190
so I've got a bunch of contributions

00:16:34,760 --> 00:16:39,260
there to improve that situation and we

00:16:37,190 --> 00:16:41,900
know why the target call make SDK that

00:16:39,260 --> 00:16:45,350
kind of post processes output us and

00:16:41,900 --> 00:16:48,050
makes it something that is ready to be

00:16:45,350 --> 00:16:50,900
relocatable so it adjust the our path

00:16:48,050 --> 00:16:52,760
encoded into the native binaries to be a

00:16:50,900 --> 00:16:55,430
relative our paths so that allows them

00:16:52,760 --> 00:16:58,279
to be moved around and it also installs

00:16:55,430 --> 00:17:01,310
a shell script that SDK users have to

00:16:58,279 --> 00:17:02,839
run once they have installed the SDK on

00:17:01,310 --> 00:17:04,370
their system to fix up the remaining

00:17:02,839 --> 00:17:06,199
absolute paths because they are still a

00:17:04,370 --> 00:17:10,220
bunch of them but at least we have a fix

00:17:06,199 --> 00:17:13,610
up logic happening here so that's pretty

00:17:10,220 --> 00:17:16,760
nice related to that we used to have all

00:17:13,610 --> 00:17:19,640
the native tools and sit down in host

00:17:16,760 --> 00:17:21,500
user and then in the air without

00:17:19,640 --> 00:17:23,449
anything directly on their hosts beside

00:17:21,500 --> 00:17:25,910
these user folders we moved everything

00:17:23,449 --> 00:17:27,650
up so that's the SDK no more looks more

00:17:25,910 --> 00:17:30,770
like any other tool chain that we can

00:17:27,650 --> 00:17:33,200
find elsewhere and since we were

00:17:30,770 --> 00:17:35,630
cleaning up the native binaries our path

00:17:33,200 --> 00:17:37,400
we also took this opportunity to do a

00:17:35,630 --> 00:17:39,650
bunch of cleaning on the target binary

00:17:37,400 --> 00:17:41,809
our path so that's not related to being

00:17:39,650 --> 00:17:43,760
relocatable but just avoiding having our

00:17:41,809 --> 00:17:45,650
pass referring to build machine

00:17:43,760 --> 00:17:47,570
locations which don't make sense on the

00:17:45,650 --> 00:17:49,580
target

00:17:47,570 --> 00:17:53,479
another useful improvement is the

00:17:49,580 --> 00:17:55,869
introduction of hashes to basically

00:17:53,479 --> 00:17:58,519
validate the integrity of files that are

00:17:55,869 --> 00:18:01,369
downloaded so each package can contain a

00:17:58,519 --> 00:18:03,499
package - file next to a configuration

00:18:01,369 --> 00:18:04,850
file that describes the config options

00:18:03,499 --> 00:18:06,470
for the package and they make fine that

00:18:04,850 --> 00:18:09,200
describes how to build a package we have

00:18:06,470 --> 00:18:12,379
a hash file and it you can put the

00:18:09,200 --> 00:18:14,269
hashes in there for the Tarble for the

00:18:12,379 --> 00:18:16,100
patches that are downloaded by the

00:18:14,269 --> 00:18:17,899
package if there's any and you can also

00:18:16,100 --> 00:18:19,999
put two hashes for the license files

00:18:17,899 --> 00:18:22,729
that are inside the turbo itself so that

00:18:19,999 --> 00:18:26,690
we can detect if there's a change in the

00:18:22,729 --> 00:18:28,460
license text so dual ashes are checked

00:18:26,690 --> 00:18:31,039
when the package is extracted so every

00:18:28,460 --> 00:18:33,729
time you do a build it will before

00:18:31,039 --> 00:18:36,169
extracting check the hash so even if the

00:18:33,729 --> 00:18:37,909
tarball was downloaded correctly but it

00:18:36,169 --> 00:18:39,470
was later modified for some reason on

00:18:37,909 --> 00:18:42,830
your filesystem it's gonna detect it at

00:18:39,470 --> 00:18:44,570
Build time the license file ashes are

00:18:42,830 --> 00:18:46,460
checked when you generate the licensing

00:18:44,570 --> 00:18:48,289
information so build root as a you know

00:18:46,460 --> 00:18:50,389
for licensed reporting infrastructure

00:18:48,289 --> 00:18:52,549
here and make legal info and it collects

00:18:50,389 --> 00:18:53,899
all the license information for all the

00:18:52,549 --> 00:18:57,200
packages that you have enabled and

00:18:53,899 --> 00:18:59,269
produces a lot of things that is the

00:18:57,200 --> 00:19:01,399
license compliance all the source code

00:18:59,269 --> 00:19:04,999
in one place the license taking another

00:19:01,399 --> 00:19:06,470
and you can give that to your to your

00:19:04,999 --> 00:19:09,349
customers to comply with the different

00:19:06,470 --> 00:19:12,259
licenses so as I said it allows to check

00:19:09,349 --> 00:19:13,479
the integrity of downloads that locally

00:19:12,259 --> 00:19:16,720
stored tarballs have not been modified

00:19:13,479 --> 00:19:19,460
detective license terms have changed and

00:19:16,720 --> 00:19:23,299
also it allows us to detect if upstream

00:19:19,460 --> 00:19:25,249
sometimes we upload a tarball that is

00:19:23,299 --> 00:19:27,259
different but with the same name and

00:19:25,249 --> 00:19:29,119
some open-source projects do these

00:19:27,259 --> 00:19:30,799
terrible thing so we can detect that and

00:19:29,119 --> 00:19:32,840
tell upstream oh you're doing something

00:19:30,799 --> 00:19:35,960
wrong here you reapplied it and oh no

00:19:32,840 --> 00:19:38,779
fubar 1:09 you should make a new release

00:19:35,960 --> 00:19:40,820
instead of replacing a another one and

00:19:38,779 --> 00:19:41,869
we know I've almost all of the packages

00:19:40,820 --> 00:19:43,879
with hash files

00:19:41,869 --> 00:19:46,580
the numbers here are here in there just

00:19:43,879 --> 00:19:49,609
a few dozens of packages missing but the

00:19:46,580 --> 00:19:51,499
vast majority of hash files by now so we

00:19:49,609 --> 00:19:54,649
do licensing report as I said this was

00:19:51,499 --> 00:19:56,299
it's already existed three years ago but

00:19:54,649 --> 00:19:58,820
there have been a few improvements in

00:19:56,299 --> 00:20:00,860
there we know use SPD X license code to

00:19:58,820 --> 00:20:03,320
make those information more easily

00:20:00,860 --> 00:20:05,150
parsable and and and and well it is

00:20:03,320 --> 00:20:07,880
basically a kanafeh standard here to

00:20:05,150 --> 00:20:10,040
describe licences as I said we added

00:20:07,880 --> 00:20:12,230
ashes for licensed files we added a

00:20:10,040 --> 00:20:15,020
feature to support storing the source

00:20:12,230 --> 00:20:17,450
code of binary artifacts and typically

00:20:15,020 --> 00:20:19,100
that's the case for pre-built tool chain

00:20:17,450 --> 00:20:20,960
a pre-built tool chain is a bunch of

00:20:19,100 --> 00:20:23,600
binaries that you download so the

00:20:20,960 --> 00:20:25,850
packaged source points to a something

00:20:23,600 --> 00:20:28,340
that is in fact binary but to comply

00:20:25,850 --> 00:20:29,630
with the license you want to also

00:20:28,340 --> 00:20:32,180
provide the source code for that so

00:20:29,630 --> 00:20:34,820
there's a new package variable called

00:20:32,180 --> 00:20:36,200
actual source which you can point to the

00:20:34,820 --> 00:20:38,870
actual source code so if there's a

00:20:36,200 --> 00:20:40,310
tarball containing the toolchain binary

00:20:38,870 --> 00:20:42,170
and the turbo containing the tool chain

00:20:40,310 --> 00:20:44,380
source you can tell Bitteroot about path

00:20:42,170 --> 00:20:48,170
and it will use the second one for

00:20:44,380 --> 00:20:50,990
license compliance we've added a lot of

00:20:48,170 --> 00:20:53,060
license annotations into our packages up

00:20:50,990 --> 00:20:54,770
to the point where almost all of them

00:20:53,060 --> 00:20:57,770
have license annotations by no there's

00:20:54,770 --> 00:20:59,540
about 100 less than a hundred that still

00:20:57,770 --> 00:21:03,560
like licensed annotation and people are

00:20:59,540 --> 00:21:06,230
working on that continuously continuing

00:21:03,560 --> 00:21:10,340
on the infrastructure sign we are to

00:21:06,230 --> 00:21:14,090
external is a feature that allows users

00:21:10,340 --> 00:21:16,130
to implement packaged recipes store def

00:21:14,090 --> 00:21:18,170
config so build root configurations and

00:21:16,130 --> 00:21:19,670
other build related files and

00:21:18,170 --> 00:21:21,260
configuration files outside of the

00:21:19,670 --> 00:21:23,570
Builder tree so you can have the builder

00:21:21,260 --> 00:21:25,760
tree pretty much and change and keep all

00:21:23,570 --> 00:21:27,410
your modifications separate which can be

00:21:25,760 --> 00:21:29,180
convenient in a number of situations so

00:21:27,410 --> 00:21:31,520
you can separate your project companies

00:21:29,180 --> 00:21:32,900
specific stuff separate from the build

00:21:31,520 --> 00:21:34,940
route tree you can update your route

00:21:32,900 --> 00:21:37,220
more easily this way and you can perhaps

00:21:34,940 --> 00:21:39,230
separate things more cleanly it's kind

00:21:37,220 --> 00:21:42,530
of a simplified form of the layer

00:21:39,230 --> 00:21:46,160
concept that's the OE and Yocto projects

00:21:42,530 --> 00:21:47,990
and I think also open wrt as it is it

00:21:46,160 --> 00:21:49,880
isn't as powerful as what York to and oh

00:21:47,990 --> 00:21:51,890
yeah always to do but it provides some

00:21:49,880 --> 00:21:54,830
of the features so it's been available

00:21:51,890 --> 00:21:57,260
since a bit more than three years but it

00:21:54,830 --> 00:21:59,240
has been improved and the many

00:21:57,260 --> 00:22:01,940
improvements have been the ability to

00:21:59,240 --> 00:22:03,440
have multiple we are to extend all

00:22:01,940 --> 00:22:05,480
directories used to be that you can only

00:22:03,440 --> 00:22:07,970
have one and no you can have several so

00:22:05,480 --> 00:22:09,830
if you want to separate things into well

00:22:07,970 --> 00:22:11,930
more fine-grain than just build route

00:22:09,830 --> 00:22:14,180
and the rest no you can have multiple

00:22:11,930 --> 00:22:16,280
things separately

00:22:14,180 --> 00:22:17,780
and we've also improved it improve the

00:22:16,280 --> 00:22:19,760
mechanism so you can not only have

00:22:17,780 --> 00:22:23,120
regular packages but also boot order

00:22:19,760 --> 00:22:25,460
packages and file system image formats

00:22:23,120 --> 00:22:27,650
supported in your BR to extend also just

00:22:25,460 --> 00:22:31,130
make that feature a little bit more

00:22:27,650 --> 00:22:33,950
usable on the package infrastructure

00:22:31,130 --> 00:22:35,720
signs lots of things I've improved there

00:22:33,950 --> 00:22:37,820
so what we call plug-ins for our

00:22:35,720 --> 00:22:40,160
structures are is the the make file

00:22:37,820 --> 00:22:41,870
logic that controls our packages or

00:22:40,160 --> 00:22:43,880
build so there's a base infrastructure

00:22:41,870 --> 00:22:46,610
that basically endows our packages are

00:22:43,880 --> 00:22:47,840
downloaded extracted and patched and

00:22:46,610 --> 00:22:49,310
then you can use this base

00:22:47,840 --> 00:22:52,070
infrastructure if your package has a

00:22:49,310 --> 00:22:54,650
kind of a weird non very standardized

00:22:52,070 --> 00:22:56,180
build system like n written make file or

00:22:54,650 --> 00:22:58,130
a shell scripts you have to describe

00:22:56,180 --> 00:23:00,170
manually how to configure build and

00:22:58,130 --> 00:23:02,710
install this package but fortunately

00:23:00,170 --> 00:23:05,150
most of the open source software use

00:23:02,710 --> 00:23:07,190
well-defined build systems do two tools

00:23:05,150 --> 00:23:09,080
make and/or other things so we have

00:23:07,190 --> 00:23:11,480
specialized bike infrastructures that

00:23:09,080 --> 00:23:13,340
define how to configure build and

00:23:11,480 --> 00:23:15,350
install packages so you have don't have

00:23:13,340 --> 00:23:17,720
to repeat this description for each and

00:23:15,350 --> 00:23:20,540
every package so we already had a number

00:23:17,720 --> 00:23:23,510
of T's say Auto Tools him a pint and

00:23:20,540 --> 00:23:26,090
that already existed but a number of

00:23:23,510 --> 00:23:27,530
them were improved or added so we

00:23:26,090 --> 00:23:29,390
improved the Python back-end

00:23:27,530 --> 00:23:31,910
infrastructure to support Python 3 pond

00:23:29,390 --> 00:23:33,710
X and when then we added a number of

00:23:31,910 --> 00:23:36,890
other packet infrastructures I'm gonna

00:23:33,710 --> 00:23:38,840
mention pearl valve rebar for well

00:23:36,890 --> 00:23:41,270
respectively portal graph and Erlang

00:23:38,840 --> 00:23:44,630
packages virtual package is kind of

00:23:41,270 --> 00:23:46,940
special it's a package to infrastructure

00:23:44,630 --> 00:23:49,190
to describe virtual packages and it's

00:23:46,940 --> 00:23:51,200
typically used for OpenGL because we

00:23:49,190 --> 00:23:53,150
have multiple OpenGL implementations

00:23:51,200 --> 00:23:55,520
typically provided by hardware vendors

00:23:53,150 --> 00:23:57,410
so we wanted to create an interaction

00:23:55,520 --> 00:24:00,260
between the consumers of the OpenGL API

00:23:57,410 --> 00:24:03,140
and the providers of the OpenGL API so

00:24:00,260 --> 00:24:04,850
that each consumer of OpenGL API doesn't

00:24:03,140 --> 00:24:07,340
have to know about each every possible

00:24:04,850 --> 00:24:09,020
provider so they say I need OpenGL and

00:24:07,340 --> 00:24:11,420
then they are the provider says I

00:24:09,020 --> 00:24:12,890
provide OpenGL and the virtual package

00:24:11,420 --> 00:24:14,480
infrastructure in the middle is here to

00:24:12,890 --> 00:24:17,060
make sure that everybody finds each

00:24:14,480 --> 00:24:19,280
other so it works well and we've had

00:24:17,060 --> 00:24:21,350
more and more OpenGL implementations

00:24:19,280 --> 00:24:22,760
packaging bill roots for a number of

00:24:21,350 --> 00:24:24,740
platforms

00:24:22,760 --> 00:24:27,320
perhaps mentioned Kay config package the

00:24:24,740 --> 00:24:27,950
small infrastructure that complements

00:24:27,320 --> 00:24:30,590
generic pack

00:24:27,950 --> 00:24:33,100
to support running make mini config and

00:24:30,590 --> 00:24:35,210
make safe def config for all those

00:24:33,100 --> 00:24:36,320
well-known software components such as

00:24:35,210 --> 00:24:38,179
linux busybox

00:24:36,320 --> 00:24:41,240
you silly busy bear box your boots that

00:24:38,179 --> 00:24:43,220
use k config another one was it it for

00:24:41,240 --> 00:24:44,779
helping with building kernel modules so

00:24:43,220 --> 00:24:46,519
there are a bunch of packages that not

00:24:44,779 --> 00:24:48,440
only build user space code but also keen

00:24:46,519 --> 00:24:51,549
on module so that can be standardized a

00:24:48,440 --> 00:24:53,570
little bit so all of those things were

00:24:51,549 --> 00:25:06,169
happened over the last turn the last

00:24:53,570 --> 00:25:08,029
years sure please just true so so the

00:25:06,169 --> 00:25:09,260
plans is pretty much like in every open

00:25:08,029 --> 00:25:11,360
source projects they are defined by the

00:25:09,260 --> 00:25:14,059
patches we receive and there have been

00:25:11,360 --> 00:25:16,010
patches already sent for us and they

00:25:14,059 --> 00:25:18,049
have been going through a number of

00:25:16,010 --> 00:25:20,299
iterations and I hope at some point it

00:25:18,049 --> 00:25:21,260
will settle and end up into something

00:25:20,299 --> 00:25:24,620
that can be merged

00:25:21,260 --> 00:25:26,870
so yes it's somewhere on the rider but

00:25:24,620 --> 00:25:28,700
it's not to actively pushed at the

00:25:26,870 --> 00:25:30,860
moment so if there is some interest I

00:25:28,700 --> 00:25:38,389
believe more help would be definitely

00:25:30,860 --> 00:25:41,419
welcome yep thanks so moving on graphing

00:25:38,389 --> 00:25:43,429
we already have a bunch of graphing

00:25:41,419 --> 00:25:46,460
capabilities to analyze the system that

00:25:43,429 --> 00:25:48,679
you produce with build route mainly

00:25:46,460 --> 00:25:51,169
dependency graphs and build time graphs

00:25:48,679 --> 00:25:53,389
we added fine system size graphs looking

00:25:51,169 --> 00:25:55,700
like this you can know per package what

00:25:53,389 --> 00:25:57,590
is well what is the contribution of each

00:25:55,700 --> 00:25:58,730
package to the wall fine system size so

00:25:57,590 --> 00:26:01,700
if you want to reduce the size of your

00:25:58,730 --> 00:26:07,750
file system you know Oh QT is the one at

00:26:01,700 --> 00:26:11,960
fault obviously and you can also do

00:26:07,750 --> 00:26:14,929
reverse dependency graph so like who is

00:26:11,960 --> 00:26:17,570
depending on Lib GLM - so these are the

00:26:14,929 --> 00:26:19,250
the the packages that require Lib G lip

00:26:17,570 --> 00:26:20,809
- so if I want to get rid of Liberty

00:26:19,250 --> 00:26:22,250
ability - because it's taking up too

00:26:20,809 --> 00:26:24,620
much space for example then I have to

00:26:22,250 --> 00:26:26,570
figure out why if I really need all

00:26:24,620 --> 00:26:29,000
those packages so it's pretty much the

00:26:26,570 --> 00:26:30,830
same the reverse of dependency graph so

00:26:29,000 --> 00:26:32,840
that can be really real tool to analyze

00:26:30,830 --> 00:26:36,950
what's in your system especially when it

00:26:32,840 --> 00:26:38,840
becomes a slightly complicated system we

00:26:36,950 --> 00:26:41,779
did a little bit of restructuring around

00:26:38,840 --> 00:26:43,609
the skeleton and the skeleton

00:26:41,779 --> 00:26:47,330
the base of the root filesystem it's the

00:26:43,609 --> 00:26:50,149
basically the base unique hierarchy plus

00:26:47,330 --> 00:26:52,279
a bunch of init scripts and then it

00:26:50,149 --> 00:26:55,099
finds an et Cie that gets copied to the

00:26:52,279 --> 00:26:58,580
target before any other package and

00:26:55,099 --> 00:27:02,419
binary is an libraries in there and we

00:26:58,580 --> 00:27:04,849
split that into multiple packages mainly

00:27:02,419 --> 00:27:08,809
to support more correctly it varies in

00:27:04,849 --> 00:27:11,809
its systems Bitteroot supports the fuzzy

00:27:08,809 --> 00:27:15,889
box in it which is used by default CSV

00:27:11,809 --> 00:27:18,049
in its system D as an in system and so

00:27:15,889 --> 00:27:19,729
we split the skeleton into a common part

00:27:18,049 --> 00:27:22,849
that's common to all in its systems and

00:27:19,729 --> 00:27:24,589
then split it into separate packages the

00:27:22,849 --> 00:27:29,479
part that more sustainably specific or

00:27:24,589 --> 00:27:31,940
more fuzzy boxes be in it specific so

00:27:29,479 --> 00:27:34,969
this allowed to avoid having CSV related

00:27:31,940 --> 00:27:37,039
craft in a system the enabled system or

00:27:34,969 --> 00:27:40,009
the opposites it allowed to implement

00:27:37,039 --> 00:27:42,559
properly read only support for read only

00:27:40,009 --> 00:27:44,269
root FS support with system D which was

00:27:42,559 --> 00:27:47,269
something that was not working properly

00:27:44,269 --> 00:27:50,119
back then and we also added support for

00:27:47,269 --> 00:27:52,549
merge user so where and where user being

00:27:50,119 --> 00:27:53,929
is the same as been user as being is the

00:27:52,549 --> 00:27:56,719
same as being which is kind of a

00:27:53,929 --> 00:27:58,879
requirement for system D there was added

00:27:56,719 --> 00:28:02,059
as well as part of this like overall

00:27:58,879 --> 00:28:05,919
effort it's pretty good and I think the

00:28:02,059 --> 00:28:05,919
last piece is just landed in that summer

00:28:10,899 --> 00:28:17,809
right thank you for the position file

00:28:16,879 --> 00:28:20,989
system support

00:28:17,809 --> 00:28:23,679
I think there's been less things going

00:28:20,989 --> 00:28:26,059
on in this area so this is the part that

00:28:23,679 --> 00:28:28,700
takes place at the very end of the build

00:28:26,059 --> 00:28:30,499
you have built all your packages there

00:28:28,700 --> 00:28:32,269
in the target directory and you want to

00:28:30,499 --> 00:28:34,609
create a final file system image that

00:28:32,269 --> 00:28:38,029
you can deploy on your embedded system

00:28:34,609 --> 00:28:39,739
so we know use mkfs txt two three four

00:28:38,029 --> 00:28:42,139
to generate two corresponding file

00:28:39,739 --> 00:28:43,940
system instead of Jenny X to two FS it

00:28:42,139 --> 00:28:47,659
allows to support some what I would say

00:28:43,940 --> 00:28:49,729
simplify better ext3 ext4 images

00:28:47,659 --> 00:28:52,700
someone contributed support for a XFS

00:28:49,729 --> 00:28:54,919
it's apparently using that we improve

00:28:52,700 --> 00:28:55,670
the iso 9660 support for people who

00:28:54,919 --> 00:29:00,380
generate

00:28:55,670 --> 00:29:02,920
bootable USB keys or serums and but I

00:29:00,380 --> 00:29:05,120
think the main thing that changed is the

00:29:02,920 --> 00:29:06,799
generalization of choosing Jen image so

00:29:05,120 --> 00:29:09,830
it's a tool developed by pink atronics

00:29:06,799 --> 00:29:12,830
that allows to generate easily a

00:29:09,830 --> 00:29:14,929
complete SD card or MMC image for a

00:29:12,830 --> 00:29:16,400
system so you can describe the different

00:29:14,929 --> 00:29:18,710
partitions with this should contain it

00:29:16,400 --> 00:29:20,450
just creates that and this way you can

00:29:18,710 --> 00:29:22,040
just DD that image to your SD card

00:29:20,450 --> 00:29:24,020
without having to manually create the

00:29:22,040 --> 00:29:27,340
partitions and they're put there content

00:29:24,020 --> 00:29:30,020
so it's pretty nice and we also added a

00:29:27,340 --> 00:29:32,059
way of having a custom script that runs

00:29:30,020 --> 00:29:34,400
within the fake root environment so

00:29:32,059 --> 00:29:36,679
that's an environment in the inn in

00:29:34,400 --> 00:29:38,780
which we create the file system image so

00:29:36,679 --> 00:29:41,570
it pretends we run as root which allows

00:29:38,780 --> 00:29:45,740
us to adjust permissions and various

00:29:41,570 --> 00:29:48,049
things on the files and we then have an

00:29:45,740 --> 00:29:50,000
effect on the file system image that's

00:29:48,049 --> 00:29:53,330
being produced and you'll know it was

00:29:50,000 --> 00:29:55,160
like very fixed and thanks to that it's

00:29:53,330 --> 00:29:57,320
possible for people to have some custom

00:29:55,160 --> 00:29:59,059
logic edits inside the fake root

00:29:57,320 --> 00:30:02,059
environment to eject further addressed

00:29:59,059 --> 00:30:04,640
permissions ownership I don't know

00:30:02,059 --> 00:30:05,929
extended attributes and stuff inside the

00:30:04,640 --> 00:30:07,549
fake root environment so it's more

00:30:05,929 --> 00:30:09,290
flexibility at it we already add a

00:30:07,549 --> 00:30:11,720
script that runs before the file system

00:30:09,290 --> 00:30:13,490
image is created and after the file

00:30:11,720 --> 00:30:16,580
system image is created and we know of

00:30:13,490 --> 00:30:20,500
when running when the image file system

00:30:16,580 --> 00:30:20,500
image is credited for adding flexibility

00:30:20,919 --> 00:30:26,840
reproducible build support was added so

00:30:24,320 --> 00:30:28,190
the idea is to you make two builds of

00:30:26,840 --> 00:30:32,120
the same configuration and you get

00:30:28,190 --> 00:30:35,299
binary identical result so it's only the

00:30:32,120 --> 00:30:37,280
beginning that was done I'm making sure

00:30:35,299 --> 00:30:39,169
that timestamps don't creep into the

00:30:37,280 --> 00:30:40,790
binaries and making sure that the order

00:30:39,169 --> 00:30:42,830
of the files is always the same and

00:30:40,790 --> 00:30:46,040
stuff like that so we are far from

00:30:42,830 --> 00:30:47,510
having something that is complete and

00:30:46,040 --> 00:30:49,460
that will in all cases generate a

00:30:47,510 --> 00:30:51,830
reproducible build but it's the first

00:30:49,460 --> 00:30:53,630
step and we very much welcome additional

00:30:51,830 --> 00:30:55,190
contribution in this area and the

00:30:53,630 --> 00:30:58,250
developers who started this effort are

00:30:55,190 --> 00:31:00,980
no longer active so there's a room for

00:30:58,250 --> 00:31:03,020
improvement their packages signed

00:31:00,980 --> 00:31:05,000
packages have been updated a lot we've

00:31:03,020 --> 00:31:06,830
added thousand packages in the last

00:31:05,000 --> 00:31:09,530
three years and have been improvements

00:31:06,830 --> 00:31:12,680
in many areas things like SEO Linux

00:31:09,530 --> 00:31:16,070
support was added could he go mano was

00:31:12,680 --> 00:31:18,110
added gazillion packages for patent

00:31:16,070 --> 00:31:21,050
modules per modules and and many other

00:31:18,110 --> 00:31:24,350
things support for hardware was was

00:31:21,050 --> 00:31:28,150
improved with mainly OpenGL enabling and

00:31:24,350 --> 00:31:31,010
lots of other things as well

00:31:28,150 --> 00:31:34,460
another big area where we improve things

00:31:31,010 --> 00:31:35,990
is testing and CI and quality team so

00:31:34,460 --> 00:31:38,120
we've added a runtime testing

00:31:35,990 --> 00:31:40,670
infrastructure that's pretty new just

00:31:38,120 --> 00:31:43,610
merge I think this spring and then

00:31:40,670 --> 00:31:45,560
improve December so the idea of runtime

00:31:43,610 --> 00:31:47,840
testing is that we were doing build time

00:31:45,560 --> 00:31:50,420
testing so far so take a build

00:31:47,840 --> 00:31:52,760
configuration it builds cool but perhaps

00:31:50,420 --> 00:31:56,870
it doesn't run at all so what we've done

00:31:52,760 --> 00:31:59,030
is a write a small Python testing for a

00:31:56,870 --> 00:32:01,460
structure which allows us to describe a

00:31:59,030 --> 00:32:04,010
bit with configuration so this one just

00:32:01,460 --> 00:32:06,680
builds drop pair ssh client and server

00:32:04,010 --> 00:32:08,300
and then describe what we want to do

00:32:06,680 --> 00:32:10,130
with it so we'll put in an irk um new

00:32:08,300 --> 00:32:11,810
when we make sure that apparently you're

00:32:10,130 --> 00:32:14,690
necessary ever is running so this test

00:32:11,810 --> 00:32:16,970
is very very simple and some other tests

00:32:14,690 --> 00:32:19,190
we have a more complicated and so we're

00:32:16,970 --> 00:32:20,750
trying to make this testing

00:32:19,190 --> 00:32:23,540
infrastructure grow a little bit to test

00:32:20,750 --> 00:32:25,090
more features of route and make sure

00:32:23,540 --> 00:32:27,620
that they don't break

00:32:25,090 --> 00:32:30,590
so we already adds Auto build at

00:32:27,620 --> 00:32:32,540
bureau.org which had been running for a

00:32:30,590 --> 00:32:34,910
while but interestingly suffered the

00:32:32,540 --> 00:32:37,700
hardest crash on Friday before I left

00:32:34,910 --> 00:32:41,360
for for prying so we used to have

00:32:37,700 --> 00:32:43,220
something like 200,000 build bristles on

00:32:41,360 --> 00:32:45,440
their accumulated over the years and now

00:32:43,220 --> 00:32:50,360
it's down to a few hundreds because it's

00:32:45,440 --> 00:32:51,760
sort it's again like on Friday so the

00:32:50,360 --> 00:32:54,050
idea here is that we choose a random

00:32:51,760 --> 00:32:55,760
architectural Trojan configuration a

00:32:54,050 --> 00:32:58,760
random selection of packages we build

00:32:55,760 --> 00:33:00,080
that and we see if it works or not and

00:32:58,760 --> 00:33:02,410
that allows to detect a lot of

00:33:00,080 --> 00:33:04,550
dependency problems a lot of

00:33:02,410 --> 00:33:06,440
architecture specific issues and stuff

00:33:04,550 --> 00:33:08,120
like that so it really helped us improve

00:33:06,440 --> 00:33:11,120
the quality of build routes that's still

00:33:08,120 --> 00:33:13,610
running but we've done a bunch of

00:33:11,120 --> 00:33:15,260
improvements mainly running the build of

00:33:13,610 --> 00:33:17,450
all our def config so we have def

00:33:15,260 --> 00:33:19,220
conflict for a lot of development boards

00:33:17,450 --> 00:33:21,200
evaluation boards from various vendors

00:33:19,220 --> 00:33:22,980
so people we can just build a well known

00:33:21,200 --> 00:33:25,200
working system and

00:33:22,980 --> 00:33:28,019
for an arrest berry pie or BeagleBone or

00:33:25,200 --> 00:33:31,529
qmu or a bunch of other platforms so we

00:33:28,019 --> 00:33:33,269
build all of them weekly on gitlab CI we

00:33:31,529 --> 00:33:34,860
also run the runtime test and get lab

00:33:33,269 --> 00:33:38,279
CIS same thing we're trying to improve

00:33:34,860 --> 00:33:40,950
the CI m we are preparing Auto build

00:33:38,279 --> 00:33:43,320
support for testing multiple branches

00:33:40,950 --> 00:33:45,269
and mainly do that on the LTS branch

00:33:43,320 --> 00:33:48,000
that's not ongoing at the moment and

00:33:45,269 --> 00:33:49,440
that's something want to fix so that

00:33:48,000 --> 00:33:52,380
there's already some preparation work

00:33:49,440 --> 00:33:55,080
and more is going to happen and we've

00:33:52,380 --> 00:33:57,750
also improved Auto Bild effort by

00:33:55,080 --> 00:33:59,490
sending notifications to the specific

00:33:57,750 --> 00:34:01,799
developers responsible for given

00:33:59,490 --> 00:34:04,289
packages or architectures so it's

00:34:01,799 --> 00:34:06,659
related to this work here developers

00:34:04,289 --> 00:34:08,550
file it's for those of you who work on

00:34:06,659 --> 00:34:10,619
the kernel we have a maintainer as files

00:34:08,550 --> 00:34:13,139
in the kennel and developers file in

00:34:10,619 --> 00:34:16,050
build wood is pretty much the same so it

00:34:13,139 --> 00:34:18,389
says who is interested or in charge of

00:34:16,050 --> 00:34:20,490
this architecture or this package and

00:34:18,389 --> 00:34:22,290
thanks to that auto bill knows okay if

00:34:20,490 --> 00:34:24,629
this package breaks then I can email

00:34:22,290 --> 00:34:26,040
that person and say Oh your package

00:34:24,629 --> 00:34:28,740
broken that architecture in that

00:34:26,040 --> 00:34:30,750
condition can you please fix it and we

00:34:28,740 --> 00:34:33,810
introduced a number of other tools to

00:34:30,750 --> 00:34:35,369
detect coding style mistakes who easily

00:34:33,810 --> 00:34:36,810
test the package on a large number of

00:34:35,369 --> 00:34:39,750
tool chain and architectural

00:34:36,810 --> 00:34:41,819
combinations to generate piden packages

00:34:39,750 --> 00:34:47,629
so a lot of tooling going on around a

00:34:41,819 --> 00:34:49,800
bit with itself other improvements that

00:34:47,629 --> 00:34:51,720
came up to my mind and couldn't really

00:34:49,800 --> 00:34:53,520
fit in any of the other categories we've

00:34:51,720 --> 00:34:56,579
improved support for what we call Linux

00:34:53,520 --> 00:34:59,250
extensions so its features that are not

00:34:56,579 --> 00:35:02,460
in linux upstream but require patching

00:34:59,250 --> 00:35:05,130
linux so like cinema or RTI or a bunch

00:35:02,460 --> 00:35:06,720
of specific drivers so we improved a

00:35:05,130 --> 00:35:08,819
little bit out this is and old and it

00:35:06,720 --> 00:35:11,609
should be a little bit better now we've

00:35:08,819 --> 00:35:13,470
added support for user space tools that

00:35:11,609 --> 00:35:15,690
are part of the kennel tree itself so

00:35:13,470 --> 00:35:18,990
things like perf or team one or

00:35:15,690 --> 00:35:20,510
self-test and a few other things and so

00:35:18,990 --> 00:35:23,310
it's no easier to build them as well

00:35:20,510 --> 00:35:25,349
we've reorganized completely I'll get

00:35:23,310 --> 00:35:27,829
texting send all and it was a bit messy

00:35:25,349 --> 00:35:30,690
and no it's much clearer we have a

00:35:27,829 --> 00:35:33,150
system-wide boolean that says I want to

00:35:30,690 --> 00:35:34,950
support translations or I don't which is

00:35:33,150 --> 00:35:36,720
off by default but if you really need

00:35:34,950 --> 00:35:38,820
translation in your system you can

00:35:36,720 --> 00:35:40,680
all that and that implication of lots of

00:35:38,820 --> 00:35:43,320
packaging and I'll to solve a number of

00:35:40,680 --> 00:35:44,880
build issues we had we've also added

00:35:43,320 --> 00:35:46,320
checks on the architecture of cross

00:35:44,880 --> 00:35:48,300
compiled binary so if you build a system

00:35:46,320 --> 00:35:50,820
for arm we make sure that each and every

00:35:48,300 --> 00:35:53,160
binary on the root file system is really

00:35:50,820 --> 00:35:55,800
bit for arm and that also help detect a

00:35:53,160 --> 00:35:58,550
few a small number of packages that were

00:35:55,800 --> 00:36:02,220
a little bit broken and that respect

00:35:58,550 --> 00:36:04,290
what's on the radar on the radar we have

00:36:02,220 --> 00:36:06,720
of course lots of other things which

00:36:04,290 --> 00:36:09,690
kind of the main features that aim I

00:36:06,720 --> 00:36:12,570
found this form the get download cache

00:36:09,690 --> 00:36:14,369
so today if you in a build would package

00:36:12,570 --> 00:36:18,690
say I want to download from a git

00:36:14,369 --> 00:36:20,940
repository it will do a clone but only

00:36:18,690 --> 00:36:23,430
keep the version that you selected into

00:36:20,940 --> 00:36:24,869
a turbo and if you change the version it

00:36:23,430 --> 00:36:27,180
will basically clone again the git

00:36:24,869 --> 00:36:29,369
repository entirely so you do an upgrade

00:36:27,180 --> 00:36:31,050
of just one commit and Yuri download the

00:36:29,369 --> 00:36:33,030
entire kernel tree which is super

00:36:31,050 --> 00:36:34,710
annoying so what we want to do is we

00:36:33,030 --> 00:36:36,359
want to keep a cache of the git

00:36:34,710 --> 00:36:39,660
repository locally so that when you

00:36:36,359 --> 00:36:41,550
update the tank or auto hash of the

00:36:39,660 --> 00:36:43,970
comment it can use the all the objects

00:36:41,550 --> 00:36:45,960
that it has locally and so they are

00:36:43,970 --> 00:36:47,880
patches have already been posted for

00:36:45,960 --> 00:36:50,520
that they are not completely ready for

00:36:47,880 --> 00:36:52,200
merging but it's a very good start we

00:36:50,520 --> 00:36:54,210
want you per package out of three bills

00:36:52,200 --> 00:36:55,470
so you can do a complete out of tree

00:36:54,210 --> 00:36:57,119
building bill route where you have the

00:36:55,470 --> 00:36:59,490
source code word on one side and then

00:36:57,119 --> 00:37:01,650
multiple projects signed by sign but we

00:36:59,490 --> 00:37:04,830
want to do that in cyber boots on a per

00:37:01,650 --> 00:37:08,310
package basis and the main motivation

00:37:04,830 --> 00:37:10,230
for that is to avoid arcing the source

00:37:08,310 --> 00:37:12,180
tree when you're using a feature like

00:37:10,230 --> 00:37:13,890
override source there which is we were

00:37:12,180 --> 00:37:16,020
discussing this feature right before the

00:37:13,890 --> 00:37:17,640
talk which is a nice picture when you're

00:37:16,020 --> 00:37:19,109
doing active development in a package

00:37:17,640 --> 00:37:20,849
you don't want bill root to download the

00:37:19,109 --> 00:37:22,050
package you want to be able to use the

00:37:20,849 --> 00:37:24,359
source code that is locally available

00:37:22,050 --> 00:37:25,920
that you have on your machine and right

00:37:24,359 --> 00:37:27,599
now bill root is our thinking that's the

00:37:25,920 --> 00:37:30,150
entire source tree which is a little bit

00:37:27,599 --> 00:37:33,300
annoying so want to do out of tree bill

00:37:30,150 --> 00:37:36,150
for such situations another big feature

00:37:33,300 --> 00:37:38,369
that we discussed at the meeting of this

00:37:36,150 --> 00:37:40,710
weekend is a top-level parallel build so

00:37:38,369 --> 00:37:42,720
right now bill root builds the different

00:37:40,710 --> 00:37:45,150
packages sequentially so it uses make

00:37:42,720 --> 00:37:46,530
minus J something inside the build of

00:37:45,150 --> 00:37:48,900
each package to take advantage of

00:37:46,530 --> 00:37:50,580
multiple CPU cores but it doesn't build

00:37:48,900 --> 00:37:52,650
different packages in parallel

00:37:50,580 --> 00:37:54,360
so that's something want to do but we

00:37:52,650 --> 00:37:56,070
want to read right and doing it right is

00:37:54,360 --> 00:37:58,470
not as easy as it sounds

00:37:56,070 --> 00:38:01,080
we need per package staging and host

00:37:58,470 --> 00:38:03,780
directories and probably per package

00:38:01,080 --> 00:38:07,050
targets have some locking in some places

00:38:03,780 --> 00:38:08,400
which it's it's not that easy but

00:38:07,050 --> 00:38:11,160
hopefully we will get there at some

00:38:08,400 --> 00:38:13,230
point and another thing that's on the

00:38:11,160 --> 00:38:15,060
radar are more package infrastructures

00:38:13,230 --> 00:38:16,650
and the two that came to mind that were

00:38:15,060 --> 00:38:19,020
already posted were packing

00:38:16,650 --> 00:38:22,110
infrastructure for go and Mason so rest

00:38:19,020 --> 00:38:23,790
was not on my list but it playing

00:38:22,110 --> 00:38:28,170
support for the long wedges has also

00:38:23,790 --> 00:38:29,790
been posted a while ago so basically

00:38:28,170 --> 00:38:34,170
what I think that the key takeaways are

00:38:29,790 --> 00:38:35,910
it's an active project I'm emailing list

00:38:34,170 --> 00:38:36,120
patches applied every pretty much every

00:38:35,910 --> 00:38:38,700
day

00:38:36,120 --> 00:38:40,320
we now have LTI LTS releases I think

00:38:38,700 --> 00:38:43,410
that's a very very big improvement for

00:38:40,320 --> 00:38:47,270
for the usefulness of build routine in

00:38:43,410 --> 00:38:50,610
embedded devices relocatable sdk for

00:38:47,270 --> 00:38:52,770
application developers updates to our

00:38:50,610 --> 00:38:54,210
package sets but in boston the number of

00:38:52,770 --> 00:38:57,050
packages and also in the fact that they

00:38:54,210 --> 00:39:00,060
are being constantly updated a better

00:38:57,050 --> 00:39:02,070
testing effort it could of course be

00:39:00,060 --> 00:39:03,830
better like all testing efforts i guess

00:39:02,070 --> 00:39:06,630
but it's the improvements have been

00:39:03,830 --> 00:39:08,220
pretty interesting in this area and so

00:39:06,630 --> 00:39:11,010
interesting new features in the roadmap

00:39:08,220 --> 00:39:14,040
top probably will get cash things like

00:39:11,010 --> 00:39:15,630
that I think are really nice Oh Prudie

00:39:14,040 --> 00:39:20,430
that leaves a little bit of time for

00:39:15,630 --> 00:39:28,880
questions if you have any I have a

00:39:20,430 --> 00:39:28,880
microphone here questions anyone

00:39:31,499 --> 00:39:39,849
we already support build of modified

00:39:36,699 --> 00:39:42,489
existing modified package in out of tree

00:39:39,849 --> 00:39:48,279
are you going to be supporting this is

00:39:42,489 --> 00:39:52,420
was one of your so what we support today

00:39:48,279 --> 00:39:54,430
with this go back to this line overwrite

00:39:52,420 --> 00:39:56,890
source there we support that for every

00:39:54,430 --> 00:39:57,819
package you can write a file called

00:39:56,890 --> 00:39:59,619
local that m'kay

00:39:57,819 --> 00:40:01,869
with as many overrides for their

00:39:59,619 --> 00:40:04,150
statements so if you've right price but

00:40:01,869 --> 00:40:07,180
Linux overwrite source your equal and

00:40:04,150 --> 00:40:08,739
then slash home above all on Linux what

00:40:07,180 --> 00:40:10,420
beyond what is going to do is that when

00:40:08,739 --> 00:40:12,369
it's going to build the Linux package

00:40:10,420 --> 00:40:14,799
instead of doing the normal download

00:40:12,369 --> 00:40:16,809
extract patch steps it's going to skip

00:40:14,799 --> 00:40:18,279
do three steps and replace them by

00:40:16,809 --> 00:40:21,339
arcing from the folder that you

00:40:18,279 --> 00:40:22,839
specified to output build Linux and then

00:40:21,339 --> 00:40:24,729
it's going to move on with the regular

00:40:22,839 --> 00:40:26,829
configure build and install steps and

00:40:24,729 --> 00:40:29,229
then if you run something like make

00:40:26,829 --> 00:40:31,269
Lennox - rebuild it's gonna do the are

00:40:29,229 --> 00:40:33,640
think again since it has already been

00:40:31,269 --> 00:40:35,679
our sink once it's gonna just copy the

00:40:33,640 --> 00:40:38,319
file the few files that you modified and

00:40:35,679 --> 00:40:40,630
run the build step in the install step

00:40:38,319 --> 00:40:42,519
again so basically if you're doing like

00:40:40,630 --> 00:40:44,380
a developments a workflow where you make

00:40:42,519 --> 00:40:46,569
a change in your soul in your Linux tree

00:40:44,380 --> 00:40:49,089
and you to make Linux bill just rebuilds

00:40:46,569 --> 00:40:51,729
to one file that you've changed read

00:40:49,089 --> 00:40:53,319
applies the toric the kernel image and

00:40:51,729 --> 00:40:55,630
you can regenerate your root filesystem

00:40:53,319 --> 00:40:57,039
image if you want to so that's that's

00:40:55,630 --> 00:40:59,679
the development workflow that you can

00:40:57,039 --> 00:41:01,269
have and your Linux tree is is unchanged

00:40:59,679 --> 00:41:03,099
build root will not touch it so it can

00:41:01,269 --> 00:41:04,599
be like version control enter get you

00:41:03,099 --> 00:41:06,099
can move from one branch to the other do

00:41:04,599 --> 00:41:08,279
comment get gives whatever you want

00:41:06,099 --> 00:41:08,279
there

00:41:10,960 --> 00:41:16,839
another question here thank you

00:41:21,280 --> 00:41:26,180
first off thank you very much for Bill

00:41:24,050 --> 00:41:28,160
Brut been using it for years love it and

00:41:26,180 --> 00:41:30,440
it keeps getting better thanks first off

00:41:28,160 --> 00:41:35,660
a big thank you one thing I struggle

00:41:30,440 --> 00:41:37,849
with quite a lot is these sort of

00:41:35,660 --> 00:41:40,670
conversions between a package built for

00:41:37,849 --> 00:41:42,410
the target and the package built because

00:41:40,670 --> 00:41:45,290
you want to use it as part of your boot

00:41:42,410 --> 00:41:48,530
infrastructure so for example a bootable

00:41:45,290 --> 00:41:49,339
USB you want to use ISO Linux or

00:41:48,530 --> 00:41:51,500
something like that

00:41:49,339 --> 00:41:55,040
but I actually want to build ISO Linux

00:41:51,500 --> 00:41:56,780
also as a target and the package

00:41:55,040 --> 00:41:58,339
configuration system at the moment I eat

00:41:56,780 --> 00:42:00,140
sounds like you've made some good

00:41:58,339 --> 00:42:03,200
improvements here particularly the pr2

00:42:00,140 --> 00:42:05,560
external moving of boot into there but I

00:42:03,200 --> 00:42:09,410
know people have put forwards package

00:42:05,560 --> 00:42:11,750
sorry put forward patches for grub to to

00:42:09,410 --> 00:42:15,200
build for target as well as building for

00:42:11,750 --> 00:42:16,369
boot have you got a pot you've never

00:42:15,200 --> 00:42:17,839
seemed to want to accept those patches

00:42:16,369 --> 00:42:20,410
but you've been happy to send them out

00:42:17,839 --> 00:42:22,579
to people who asked for them you gonna

00:42:20,410 --> 00:42:24,740
approach that if you have you got a plan

00:42:22,579 --> 00:42:27,530
to do that consistently or is is that

00:42:24,740 --> 00:42:28,880
still a no-go from you guys so for the

00:42:27,530 --> 00:42:30,770
grub 2k is indeed there have been

00:42:28,880 --> 00:42:33,260
benches and one of the guys who

00:42:30,770 --> 00:42:35,089
participated to the meeting last weekend

00:42:33,260 --> 00:42:36,950
was working precisely in that topic

00:42:35,089 --> 00:42:38,660
separating more cleanly the tools that

00:42:36,950 --> 00:42:40,640
we built for the host and the tools that

00:42:38,660 --> 00:42:42,079
we build for the targets and the build

00:42:40,640 --> 00:42:44,119
system of boot routers is always a

00:42:42,079 --> 00:42:45,920
little bit messy in that respect so

00:42:44,119 --> 00:42:48,650
perhaps the syslinux

00:42:45,920 --> 00:42:50,720
state of affairs is not completely great

00:42:48,650 --> 00:42:52,490
today and it is definitely possible to

00:42:50,720 --> 00:42:54,050
improve it by having hostage Linux that

00:42:52,490 --> 00:42:56,030
put builders to Hoss tools and then the

00:42:54,050 --> 00:42:57,650
target is Linux that would build only

00:42:56,030 --> 00:42:59,750
the targets the kind of tools I think

00:42:57,650 --> 00:43:02,359
that's that's definitely doable

00:42:59,750 --> 00:43:03,890
just someone needs to do it or to send

00:43:02,359 --> 00:43:06,710
the patches to do it but in principle

00:43:03,890 --> 00:43:08,030
it's doable I just as a follow-up that's

00:43:06,710 --> 00:43:09,740
exactly what I'm doing at the moment is

00:43:08,030 --> 00:43:11,990
life I've basically cloned the package

00:43:09,740 --> 00:43:14,119
out of boot put it into my own br-2

00:43:11,990 --> 00:43:15,470
external so I'd meant having to track

00:43:14,119 --> 00:43:18,410
the upstream changes that you're making

00:43:15,470 --> 00:43:20,780
in boot just to tweet that the target

00:43:18,410 --> 00:43:23,220
dir Flags it'd be nice if that was

00:43:20,780 --> 00:43:25,950
integrated a bit better but I'm not a

00:43:23,220 --> 00:43:27,750
fleet expert in build route so I don't

00:43:25,950 --> 00:43:29,400
quite know how to start submitting some

00:43:27,750 --> 00:43:31,500
patches but I'll take it offline and

00:43:29,400 --> 00:43:32,849
yeah please separate patches we're

00:43:31,500 --> 00:43:35,430
differently interested don't keep that

00:43:32,849 --> 00:43:37,260
that kind of things on your side it's

00:43:35,430 --> 00:43:47,700
much better if it can be up streamed and

00:43:37,260 --> 00:43:49,890
maintained any other question there was

00:43:47,700 --> 00:43:53,880
a question in the back

00:43:49,890 --> 00:43:57,960
thank you sins no more question let's

00:43:53,880 --> 00:44:02,070
back up for question one actually what

00:43:57,960 --> 00:44:05,010
my day job usually is to build cure know

00:44:02,070 --> 00:44:08,730
myself and then use build row to build

00:44:05,010 --> 00:44:11,700
image based on kernel out of tree so

00:44:08,730 --> 00:44:14,369
could it be like extended this overwrite

00:44:11,700 --> 00:44:16,500
source but not using at all packages or

00:44:14,369 --> 00:44:20,160
whatever of what dude wrote using but

00:44:16,500 --> 00:44:23,849
using actually image already basil visit

00:44:20,160 --> 00:44:26,220
image of colonel well the busy image

00:44:23,849 --> 00:44:27,750
thing is it's trivial it's the trivial

00:44:26,220 --> 00:44:29,490
part you can write the post build script

00:44:27,750 --> 00:44:31,470
that takes the busy image from wherever

00:44:29,490 --> 00:44:34,580
you want in your file system that

00:44:31,470 --> 00:44:37,470
already exist and then put that into

00:44:34,580 --> 00:44:39,660
into the target do that bid Reuters

00:44:37,470 --> 00:44:42,660
credits and spit out the file system

00:44:39,660 --> 00:44:45,180
image that that's really a one-line post

00:44:42,660 --> 00:44:47,250
build script where it gets more

00:44:45,180 --> 00:44:48,810
complicated is with schema modules

00:44:47,250 --> 00:44:50,490
because you have to install them into

00:44:48,810 --> 00:44:52,140
the target but that's possibly also

00:44:50,490 --> 00:44:53,970
doable with the post build script as

00:44:52,140 --> 00:44:57,240
well so with a little bit of integration

00:44:53,970 --> 00:45:00,410
and short post beam script I don't see

00:44:57,240 --> 00:45:00,410
why it wouldn't be possible

00:45:01,339 --> 00:45:09,359
well I'm using yeah I've got a lot of

00:45:06,720 --> 00:45:10,859
flights here so I don't see you but I

00:45:09,359 --> 00:45:18,330
can't hear you I'm using build route

00:45:10,859 --> 00:45:22,020
quite for a long time but like can we

00:45:18,330 --> 00:45:23,910
directly use the Linux next because most

00:45:22,020 --> 00:45:26,220
of the patches in the Linux nest may not

00:45:23,910 --> 00:45:28,140
be in the stable version that you you're

00:45:26,220 --> 00:45:31,290
supported for the specific data files

00:45:28,140 --> 00:45:33,210
ahead that's right so Bureau does not

00:45:31,290 --> 00:45:35,400
enforce any kaenel version you have a

00:45:33,210 --> 00:45:36,900
field where you say which can't get

00:45:35,400 --> 00:45:39,619
repository you want to use

00:45:36,900 --> 00:45:42,480
which commit or tag you want to use so

00:45:39,619 --> 00:45:45,269
you can use Linux next preempt RT your

00:45:42,480 --> 00:45:48,900
vendor-specific guitry whatever you want

00:45:45,269 --> 00:45:50,400
there is nothing in in in in in build

00:45:48,900 --> 00:45:53,039
route that really enforces you to use

00:45:50,400 --> 00:45:56,450
that specifically non version the only

00:45:53,039 --> 00:45:59,160
place where I think we may have that is

00:45:56,450 --> 00:46:01,920
the kind of headers where by default we

00:45:59,160 --> 00:46:03,869
just have a list of the stable channels

00:46:01,920 --> 00:46:05,249
but you have an option know where you

00:46:03,869 --> 00:46:07,140
can say I want to use the same key no

00:46:05,249 --> 00:46:09,359
headers as the key no I'm building in

00:46:07,140 --> 00:46:11,009
which case it will be your Linux next

00:46:09,359 --> 00:46:14,609
three if that's the one you've chosen to

00:46:11,009 --> 00:46:16,289
Bill okay thanks welcome okay

00:46:14,609 --> 00:46:18,720
get design that's that's that's over I

00:46:16,289 --> 00:46:21,150
will be around for the conference and I

00:46:18,720 --> 00:46:22,680
will leave the microphone to yawn or

00:46:21,150 --> 00:46:24,180
we'll also be talking about build routes

00:46:22,680 --> 00:46:26,130
so if you're interested by B route you

00:46:24,180 --> 00:46:28,380
can stay in the room and again I'll be

00:46:26,130 --> 00:46:34,489
around thank you Ray your attention

00:46:28,380 --> 00:46:34,489

YouTube URL: https://www.youtube.com/watch?v=839WOdYPYuE


