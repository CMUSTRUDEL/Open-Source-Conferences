Title: Buildroot: Making Embedded Linux Easy? A Real-Life Example - Yann Morin, Orange
Publication date: 2017-10-25
Playlist: Open Source Summit Europe & Embedded Linux Conference Europe 2017
Description: 
	Buildroot: Making Embedded Linux Easy? A Real-Life Example - Yann Morin, Orange

Buildroot's motto is "Making Embedded Linux Easy" and advertises itself as being (in their own words) "a simple, efficient and easy-to-use tool to generate embedded Linux systems through cross-compilation."

In this presentation, Yann will explain why and how Buildroot indeed made his and his colleagues lives easier while developing a new big project. Starting with an overview of the constraints that led to choosing Buildroot, Yann will investigate the Buildroot infrastructure and how he leveraged as much of those to provide his colleagues with an easy to use build environment.

Yann will also address the pain-points he encountered and how they were addressed, to end up with his colleagues' wish-list for Buildroot.

About Yann E. MORIN
Yann E. MORIN has had strong personal interest in Linux and embedded Linux systems, and FLOSS in general since 1995. He's been professionally working the last 19 years on embedded and real-time projects, and exclusively on embedded Linux projects since he has been working for Orange for the past 12 years.

When he is not working, Yann contributes to Free and Open Source Software on his spare time, still with an interest toward embedded Linux.
Captions: 
	00:00:00,030 --> 00:00:03,929
okay good afternoon everyone so thank

00:00:02,070 --> 00:00:08,880
you to me for not overshooting your time

00:00:03,929 --> 00:00:13,980
your time slot I'll be talking about

00:00:08,880 --> 00:00:15,299
Bill route oh we've been using it for a

00:00:13,980 --> 00:00:17,789
project I've been working on for the

00:00:15,299 --> 00:00:20,400
past four years so my name is Jan Mohan

00:00:17,789 --> 00:00:24,660
what I am working for Orange which is

00:00:20,400 --> 00:00:27,380
the historical french telco in this

00:00:24,660 --> 00:00:30,599
context we've been using balut and I

00:00:27,380 --> 00:00:34,020
will introduce that and just a few words

00:00:30,599 --> 00:00:35,940
about myself so on the left is the young

00:00:34,020 --> 00:00:38,399
ma you have two dated in front of you

00:00:35,940 --> 00:00:40,559
which is doing lineage embedded security

00:00:38,399 --> 00:00:43,680
network and free liberal open-source

00:00:40,559 --> 00:00:45,989
software at work and on the right the

00:00:43,680 --> 00:00:48,300
other young man which is contributing to

00:00:45,989 --> 00:00:56,789
Bitteroot on his spare time which has

00:00:48,300 --> 00:00:59,010
basically the same interesting life so

00:00:56,789 --> 00:01:01,920
the context of the project we is a team

00:00:59,010 --> 00:01:07,170
I'm working on is essentially targeting

00:01:01,920 --> 00:01:10,560
set-top boxes the IPTV decoders was

00:01:07,170 --> 00:01:13,200
production devices R&D devices we have

00:01:10,560 --> 00:01:16,020
the various generations of decoders with

00:01:13,200 --> 00:01:19,380
various performance points and one of

00:01:16,020 --> 00:01:23,369
the most critical issue we have is we

00:01:19,380 --> 00:01:24,930
inherit constraints from legacy one of

00:01:23,369 --> 00:01:28,170
those constraints is that we are only

00:01:24,930 --> 00:01:29,820
part of the firmware so the main part of

00:01:28,170 --> 00:01:33,439
the firmware is provided by the third

00:01:29,820 --> 00:01:37,560
party which third party aggregates

00:01:33,439 --> 00:01:41,040
others and in the end provides us with a

00:01:37,560 --> 00:01:42,630
complete firmware and the part of the

00:01:41,040 --> 00:01:44,640
family I'm talking about is a complete

00:01:42,630 --> 00:01:46,610
rewrite from scratch from an existing

00:01:44,640 --> 00:01:49,140
application

00:01:46,610 --> 00:01:51,509
three teams have been doing that rewrite

00:01:49,140 --> 00:01:51,799
about 30 developers for the past four

00:01:51,509 --> 00:01:56,549
years

00:01:51,799 --> 00:01:58,380
one team in Toulouse south of France two

00:01:56,549 --> 00:02:01,439
other teams in rain west of France where

00:01:58,380 --> 00:02:03,570
I am located and they are mostly

00:02:01,439 --> 00:02:06,540
application developers definitely not

00:02:03,570 --> 00:02:08,099
clinics aspects if the if you talk to

00:02:06,540 --> 00:02:11,400
them about these goals they would just

00:02:08,099 --> 00:02:13,200
look at you in a weird way and they are

00:02:11,400 --> 00:02:15,870
definitely not open

00:02:13,200 --> 00:02:17,700
not embedded expertise so I have to

00:02:15,870 --> 00:02:23,400
provide them with some tools they can

00:02:17,700 --> 00:02:25,920
use so following that we had to choose a

00:02:23,400 --> 00:02:28,440
build system for our projects and we had

00:02:25,920 --> 00:02:30,060
a requirement a few requirements first

00:02:28,440 --> 00:02:33,870
we want to use generic solutions we

00:02:30,060 --> 00:02:37,470
don't want to reinvent the wheel we want

00:02:33,870 --> 00:02:39,569
to use something that is not dependent

00:02:37,470 --> 00:02:41,970
on the target that is not dependent on

00:02:39,569 --> 00:02:44,209
the sock that is not dependent on the

00:02:41,970 --> 00:02:49,099
runtime the type of middleware we have

00:02:44,209 --> 00:02:54,060
we want it to be easy to use we want no

00:02:49,099 --> 00:02:56,790
build time overhead we want to use an

00:02:54,060 --> 00:02:59,130
existing solution we tried to do we with

00:02:56,790 --> 00:03:01,040
our own build system and I can't say it

00:02:59,130 --> 00:03:04,019
was a complete success

00:03:01,040 --> 00:03:07,230
most importantly the choice was not mine

00:03:04,019 --> 00:03:12,090
it was a colleague of me which has done

00:03:07,230 --> 00:03:15,780
to the faint now so the first thing we

00:03:12,090 --> 00:03:20,250
tried to investigate the SDK provided by

00:03:15,780 --> 00:03:22,410
the soft curve and it is what it is it

00:03:20,250 --> 00:03:25,410
is dedicated to the production devices

00:03:22,410 --> 00:03:28,019
and it's not even this exactly the same

00:03:25,410 --> 00:03:32,220
SDK for all the projection devices the

00:03:28,019 --> 00:03:34,859
slightly different so very specific to

00:03:32,220 --> 00:03:37,530
the prediction device with very specific

00:03:34,859 --> 00:03:39,299
to the soft curve we can do research and

00:03:37,530 --> 00:03:43,350
development with reference design with

00:03:39,299 --> 00:03:46,980
that so it was dismissed the other

00:03:43,350 --> 00:03:51,049
solution that was investigated and I

00:03:46,980 --> 00:03:54,780
will stress that from our point of view

00:03:51,049 --> 00:03:56,160
it that may probably or the story but

00:03:54,780 --> 00:03:59,790
what we've seen is that

00:03:56,160 --> 00:04:02,519
openembedded or is it octo is mostly a

00:03:59,790 --> 00:04:05,190
distribution generator it generates

00:04:02,519 --> 00:04:08,340
firmer images but as a side effect of

00:04:05,190 --> 00:04:11,040
being a distribution generator it other

00:04:08,340 --> 00:04:13,349
is very versatile only customizable but

00:04:11,040 --> 00:04:16,370
this learning curve is pretty steep and

00:04:13,349 --> 00:04:20,519
because the developers are not very

00:04:16,370 --> 00:04:24,240
experts in linux war not very nice for

00:04:20,519 --> 00:04:26,350
them and we didn't have mostly no

00:04:24,240 --> 00:04:31,060
announced knowledge about

00:04:26,350 --> 00:04:31,930
a minute so we put Sutton's as on the

00:04:31,060 --> 00:04:35,620
side for now

00:04:31,930 --> 00:04:38,050
the other solution was Bill route which

00:04:35,620 --> 00:04:39,970
advertises itself as a firmer generator

00:04:38,050 --> 00:04:42,900
and that's what we are looking for it's

00:04:39,970 --> 00:04:47,170
definitely not a distribution generator

00:04:42,900 --> 00:04:49,630
however it's pretty flexible and partly

00:04:47,170 --> 00:04:51,820
extendable and we'll see how we've been

00:04:49,630 --> 00:04:56,650
using br-2 externals that was introduced

00:04:51,820 --> 00:04:59,710
by tomorrow previously the learning

00:04:56,650 --> 00:05:06,490
curve is pretty moderate on some of my

00:04:59,710 --> 00:05:09,730
colleagues even like where Katie say so

00:05:06,490 --> 00:05:12,640
sorry so my colleagues even say that it

00:05:09,730 --> 00:05:14,500
was pretty easy we had some pretty good

00:05:12,640 --> 00:05:19,060
in-house knowledge of the route yeah

00:05:14,500 --> 00:05:21,040
myself and we quickly dismiss the fuser

00:05:19,060 --> 00:05:23,230
solutions because it did not fit over

00:05:21,040 --> 00:05:25,960
requirements most people worry because

00:05:23,230 --> 00:05:31,180
that much smaller community except maybe

00:05:25,960 --> 00:05:33,970
open wrt so quick overview of Bill root

00:05:31,180 --> 00:05:37,900
of n so the mass done a lot of thing

00:05:33,970 --> 00:05:40,090
because before so simple efficient and

00:05:37,900 --> 00:05:41,920
easy to use tool to generate embedded

00:05:40,090 --> 00:05:45,460
Linux systems through cross populations

00:05:41,920 --> 00:05:48,250
quite a long sentence to say about yes

00:05:45,460 --> 00:05:51,820
that's what we wanted we want it to be

00:05:48,250 --> 00:05:54,850
able to do cross computation with an

00:05:51,820 --> 00:05:57,550
easy-to-use job on basically using Bill

00:05:54,850 --> 00:05:59,740
root is just a kind of running mate def

00:05:57,550 --> 00:06:04,780
configure and make and that's all on all

00:05:59,740 --> 00:06:07,150
you get is your result it's entirely

00:06:04,780 --> 00:06:09,850
community driven which is good solution

00:06:07,150 --> 00:06:15,490
which is a good option for us because it

00:06:09,850 --> 00:06:18,040
is not a custom solution it uses K

00:06:15,490 --> 00:06:21,670
config make files for the website and

00:06:18,040 --> 00:06:25,330
big manual and I find it pretty fun to

00:06:21,670 --> 00:06:27,130
work with and to show that bill wrote

00:06:25,330 --> 00:06:30,250
doing a package in bill root is pretty

00:06:27,130 --> 00:06:33,730
easy we've got two packages first one L

00:06:30,250 --> 00:06:37,700
peg it is a it is a lower odds package

00:06:33,730 --> 00:06:41,300
so you only need to state the version

00:06:37,700 --> 00:06:44,600
below tour will automatically know that

00:06:41,300 --> 00:06:47,180
how to download extra eye patch and bill

00:06:44,600 --> 00:06:49,970
it because it is a librivox package the

00:06:47,180 --> 00:06:52,970
licensing information is absolutely not

00:06:49,970 --> 00:06:56,270
technically relevant but you need it for

00:06:52,970 --> 00:06:58,220
the legal information manifest that is

00:06:56,270 --> 00:07:03,230
generated at the end and that's very

00:06:58,220 --> 00:07:06,640
important and Lou L peg is the simplest

00:07:03,230 --> 00:07:10,160
package in balloon the smallest one and

00:07:06,640 --> 00:07:13,460
F ping is the smallest Auto to this base

00:07:10,160 --> 00:07:15,680
package in balut you just provide the

00:07:13,460 --> 00:07:17,450
version the website and the root will

00:07:15,680 --> 00:07:19,310
know how to download extract configure

00:07:17,450 --> 00:07:21,920
patched and install it because it is

00:07:19,310 --> 00:07:23,750
another source package so on your bike

00:07:21,920 --> 00:07:26,960
analyst package he is doing something

00:07:23,750 --> 00:07:31,580
very weird writing a package in balut is

00:07:26,960 --> 00:07:35,090
pretty easy and once you have your

00:07:31,580 --> 00:07:36,910
packages Duluth will configure build the

00:07:35,090 --> 00:07:39,140
time in sequence one after the other

00:07:36,910 --> 00:07:41,960
respecting the dependency dependency

00:07:39,140 --> 00:07:45,560
chain between your packages and at the

00:07:41,960 --> 00:07:47,810
very end it will do a kind of cleanup

00:07:45,560 --> 00:07:50,840
pass on the target directory removing

00:07:47,810 --> 00:07:53,870
others static files because you don't

00:07:50,840 --> 00:07:56,000
need them on the target stripping

00:07:53,870 --> 00:07:58,580
executive boards and stuff like that and

00:07:56,000 --> 00:08:01,280
once this is done it generates a file

00:07:58,580 --> 00:08:04,510
system image for example at a ball which

00:08:01,280 --> 00:08:08,210
is file system image in balut parents

00:08:04,510 --> 00:08:11,090
and an interesting point is is you can

00:08:08,210 --> 00:08:15,500
look infrastructure oops

00:08:11,090 --> 00:08:18,920
at the beginning of the target finalized

00:08:15,500 --> 00:08:21,710
step and you can also provide post build

00:08:18,920 --> 00:08:23,210
strips that are run right at the end of

00:08:21,710 --> 00:08:26,210
the target finalized routes and right

00:08:23,210 --> 00:08:28,220
before generating images and then you

00:08:26,210 --> 00:08:32,210
can provide post image strips that are

00:08:28,220 --> 00:08:33,590
run after your images are generated I'm

00:08:32,210 --> 00:08:36,710
not going into the details because

00:08:33,590 --> 00:08:39,970
that's not the purpose of the talk but

00:08:36,710 --> 00:08:43,880
I'd see how we've been using them and

00:08:39,970 --> 00:08:48,200
for each packages start out with

00:08:43,880 --> 00:08:50,540
procedure which is a again interesting

00:08:48,200 --> 00:08:51,940
is that for each step by the player can

00:08:50,540 --> 00:08:54,560
pass through

00:08:51,940 --> 00:08:57,020
when you're doing actual development on

00:08:54,560 --> 00:08:59,330
your machine you can use what we call

00:08:57,020 --> 00:09:02,690
the override Isis idea that does our

00:08:59,330 --> 00:09:04,310
think instead of downloaded the loading

00:09:02,690 --> 00:09:07,100
is a package so you have your source

00:09:04,310 --> 00:09:10,160
tree locally on your laptop or a

00:09:07,100 --> 00:09:12,200
computer and we load we'll use that to

00:09:10,160 --> 00:09:17,540
bid your package so you can do active

00:09:12,200 --> 00:09:22,810
development with that and Baloch is also

00:09:17,540 --> 00:09:22,810
providing what we call a br to external

00:09:23,800 --> 00:09:30,880
okay it's back good thank you we are to

00:09:28,880 --> 00:09:33,410
external which allows you to provide

00:09:30,880 --> 00:09:35,090
extensions to be route new DEF CON feeds

00:09:33,410 --> 00:09:35,510
new packages file system and stuff like

00:09:35,090 --> 00:09:37,610
that

00:09:35,510 --> 00:09:42,080
and we've been used like using that

00:09:37,610 --> 00:09:47,900
quite heavily in our project so the

00:09:42,080 --> 00:09:50,330
first thing is the basic of our setup is

00:09:47,900 --> 00:09:55,520
we're using a beer to external tree as

00:09:50,330 --> 00:09:59,480
the as a gig tree where each commit is

00:09:55,520 --> 00:10:03,650
buildable this is the reference of our

00:09:59,480 --> 00:10:05,720
project so first thing is you create we

00:10:03,650 --> 00:10:09,440
are to external a very minimalist one

00:10:05,720 --> 00:10:11,510
which just needs to mt5 and thus that is

00:10:09,440 --> 00:10:16,850
that's it you've got a beer to external

00:10:11,510 --> 00:10:19,610
tree and then we've been adding a get

00:10:16,850 --> 00:10:22,010
sub module to contain Bill root so I

00:10:19,610 --> 00:10:27,020
reckon it of our beer to external tree

00:10:22,010 --> 00:10:30,590
will use the progression of B route that

00:10:27,020 --> 00:10:32,450
does not gain as much for now except we

00:10:30,590 --> 00:10:37,450
can add new configuration for all of our

00:10:32,450 --> 00:10:39,710
boards we have a few words here

00:10:37,450 --> 00:10:41,780
development of recursion end to end and

00:10:39,710 --> 00:10:44,660
configuration prediction configurations

00:10:41,780 --> 00:10:46,240
a little bit simplified of course but

00:10:44,660 --> 00:10:50,270
you get the idea

00:10:46,240 --> 00:10:53,240
and some people are using snippets to

00:10:50,270 --> 00:10:55,490
have busy def configuration files for

00:10:53,240 --> 00:10:58,700
describing a board and snippets to

00:10:55,490 --> 00:11:01,010
describe their software stack and we've

00:10:58,700 --> 00:11:03,140
tried to do that and in the end it's

00:11:01,010 --> 00:11:04,830
most interesting to have various

00:11:03,140 --> 00:11:07,740
different files that you update

00:11:04,830 --> 00:11:10,950
when needed because they are not a bit

00:11:07,740 --> 00:11:12,930
it's at often so manually managing the

00:11:10,950 --> 00:11:16,770
def config file is pretty easy because

00:11:12,930 --> 00:11:18,990
it's a two-way mechanism here the def

00:11:16,770 --> 00:11:22,709
config file and use modify it and you

00:11:18,990 --> 00:11:25,200
save it using snippets you can't split a

00:11:22,709 --> 00:11:27,120
configuration into snippets you can

00:11:25,200 --> 00:11:29,880
assemble snippets in 20 configuration

00:11:27,120 --> 00:11:31,680
but k config does not doe does not know

00:11:29,880 --> 00:11:36,720
how to do the opposite and that's a

00:11:31,680 --> 00:11:39,720
problem so we are also adding new

00:11:36,720 --> 00:11:41,459
packages for example a package to store

00:11:39,720 --> 00:11:45,540
were alive application which is

00:11:41,459 --> 00:11:48,089
rendering live streams to the user a

00:11:45,540 --> 00:11:51,149
reporter a PVR personal video recorder

00:11:48,089 --> 00:11:52,170
or stuff like that totally turned out to

00:11:51,149 --> 00:11:55,410
be lost packages

00:11:52,170 --> 00:11:58,550
you just have to register them in coffee

00:11:55,410 --> 00:12:02,339
dot in and in external dot MK by

00:11:58,550 --> 00:12:04,380
including them and sourcing the

00:12:02,339 --> 00:12:08,940
configuration files totally stand up

00:12:04,380 --> 00:12:11,010
bill root mechanism oops sorry something

00:12:08,940 --> 00:12:12,930
that is interesting also is if your

00:12:11,010 --> 00:12:15,510
device is using a specific kind of

00:12:12,930 --> 00:12:18,540
firmware image with a specific format

00:12:15,510 --> 00:12:22,230
you can just create a new type of file

00:12:18,540 --> 00:12:25,890
system and this is exactly our file

00:12:22,230 --> 00:12:28,589
system is generated in balut even below

00:12:25,890 --> 00:12:31,230
to uses the same syntax to create file

00:12:28,589 --> 00:12:36,600
systems so it's nothing specific it's

00:12:31,230 --> 00:12:41,580
again totally build would start so here

00:12:36,600 --> 00:12:46,709
we are using our GP tools which is tools

00:12:41,580 --> 00:12:49,920
many PI manipulate over GP image yes and

00:12:46,709 --> 00:12:52,860
we define the command to generate a file

00:12:49,920 --> 00:12:56,720
system it takes a wrote FS data input

00:12:52,860 --> 00:13:01,100
and generates the output and this

00:12:56,720 --> 00:13:01,100
registers the file system with belowed

00:13:01,790 --> 00:13:08,319
nothing very fancy so far

00:13:05,879 --> 00:13:10,389
one thing you can store in your beer to

00:13:08,319 --> 00:13:13,300
external tree and what we are doing as

00:13:10,389 --> 00:13:16,389
well is to store what we call board

00:13:13,300 --> 00:13:20,980
files what files are basically whatever

00:13:16,389 --> 00:13:23,980
does not fit in a package so for example

00:13:20,980 --> 00:13:26,189
the basic skeleton content it's not the

00:13:23,980 --> 00:13:31,240
skeleton package it's only its content

00:13:26,189 --> 00:13:34,529
yeah some post build script one which is

00:13:31,240 --> 00:13:39,519
for production one which is for test and

00:13:34,529 --> 00:13:41,860
a kind of some kind of overlays that the

00:13:39,519 --> 00:13:45,519
root will copy as is to your target

00:13:41,860 --> 00:13:48,999
directory at the very end if you have

00:13:45,519 --> 00:13:52,449
overlays try to avoid them move packages

00:13:48,999 --> 00:13:55,300
if sorry move files out of overlays into

00:13:52,449 --> 00:13:57,970
packages if you have found create a

00:13:55,300 --> 00:14:01,329
package that installs your phones if you

00:13:57,970 --> 00:14:05,019
have a data set create a package that

00:14:01,329 --> 00:14:08,220
installs the data set files that come

00:14:05,019 --> 00:14:11,350
from an overlay are not accounted for in

00:14:08,220 --> 00:14:14,589
various bill root infrastructure so for

00:14:11,350 --> 00:14:17,379
example you don't know why your target

00:14:14,589 --> 00:14:20,139
is B maybe all your packages are

00:14:17,379 --> 00:14:23,649
installing small files but your data set

00:14:20,139 --> 00:14:25,449
is big and the graph the graphing

00:14:23,649 --> 00:14:31,899
infrastructure and B load will not help

00:14:25,449 --> 00:14:37,899
you where are the reasons I will explain

00:14:31,899 --> 00:14:41,559
later and one big thing is because this

00:14:37,899 --> 00:14:44,319
external wrote MK file is included by

00:14:41,559 --> 00:14:47,949
the Baloch infrastructure it has access

00:14:44,319 --> 00:14:51,339
to all the variables on infrastructure

00:14:47,949 --> 00:14:53,589
in Balad so you can add extra logic

00:14:51,339 --> 00:15:00,339
extra make file logic you can add

00:14:53,589 --> 00:15:05,860
additional infrastructure so the first

00:15:00,339 --> 00:15:09,040
thing to do is adding new infrastructure

00:15:05,860 --> 00:15:11,529
for example make holes you just write a

00:15:09,040 --> 00:15:18,429
new make rule in your external return

00:15:11,529 --> 00:15:19,370
key it's not full and all those

00:15:18,429 --> 00:15:23,720
variables asked

00:15:19,370 --> 00:15:26,060
that variable below variables and this

00:15:23,720 --> 00:15:27,680
one is just an example that checks that

00:15:26,060 --> 00:15:30,500
all the packages in the current

00:15:27,680 --> 00:15:33,470
configuration build without depending on

00:15:30,500 --> 00:15:35,120
the build order it means that all the

00:15:33,470 --> 00:15:37,820
dependencies of those packages are

00:15:35,120 --> 00:15:40,100
correct except made may be inherited

00:15:37,820 --> 00:15:45,020
dependencies but that's not a problem

00:15:40,100 --> 00:15:46,970
for us so sorry

00:15:45,020 --> 00:15:49,430
you can provide whatever you want to

00:15:46,970 --> 00:15:54,950
here as long as it does not clash with

00:15:49,430 --> 00:15:57,290
existing infrastructure but there are

00:15:54,950 --> 00:15:59,930
also places where it is interesting to

00:15:57,290 --> 00:16:01,120
provide new things for example in the

00:15:59,930 --> 00:16:05,270
target finalized oops

00:16:01,120 --> 00:16:07,490
which is run at the end one all your

00:16:05,270 --> 00:16:09,860
packages have been installed you know

00:16:07,490 --> 00:16:11,140
your target directory is complete so you

00:16:09,860 --> 00:16:14,360
can run oops

00:16:11,140 --> 00:16:18,140
to do things with the directory for

00:16:14,360 --> 00:16:21,680
example we have a tool that will clean

00:16:18,140 --> 00:16:23,600
elf libraries at runtime you don't need

00:16:21,680 --> 00:16:26,720
the similans twelve libraries you only

00:16:23,600 --> 00:16:30,709
need this libraries whose file is named

00:16:26,720 --> 00:16:32,870
that's also named so this tool is just

00:16:30,709 --> 00:16:37,270
getting you enough rid of siblings and

00:16:32,870 --> 00:16:37,270
renaming the libraries to just a name

00:16:37,990 --> 00:16:47,360
you can and you should upload this kind

00:16:42,050 --> 00:16:49,580
of functionality to our script writer

00:16:47,360 --> 00:16:51,500
knows for sure whatever you want because

00:16:49,580 --> 00:16:55,070
writing it in make file is not very

00:16:51,500 --> 00:16:57,410
maintainable and your editors will not

00:16:55,070 --> 00:17:01,870
help you with syntax i lightnings i

00:16:57,410 --> 00:17:01,870
writing so move them to a helper script

00:17:04,929 --> 00:17:13,360
now we we have a few requirements for

00:17:10,459 --> 00:17:16,130
our packages we want them to do stuff

00:17:13,360 --> 00:17:18,140
but we don't want developers to write

00:17:16,130 --> 00:17:21,439
the same code again and again and again

00:17:18,140 --> 00:17:24,020
in their dot MK files so we decided to

00:17:21,439 --> 00:17:26,209
introduce a kind of package

00:17:24,020 --> 00:17:28,940
infrastructure which allows developers

00:17:26,209 --> 00:17:32,270
to write and and build packages without

00:17:28,940 --> 00:17:32,929
worrying about all the extra features we

00:17:32,270 --> 00:17:35,179
need we

00:17:32,929 --> 00:17:39,499
be implemented so they just have to

00:17:35,179 --> 00:17:43,369
write a stand-up balute package here

00:17:39,499 --> 00:17:45,799
which is a Simek package with a version

00:17:43,369 --> 00:17:49,700
a website were to get it which is

00:17:45,799 --> 00:17:52,399
defined yeah define the lights and

00:17:49,700 --> 00:17:54,249
things whether it is done in staging the

00:17:52,399 --> 00:17:59,840
dependencies and stuff like that and

00:17:54,249 --> 00:18:01,399
call the orange package macro and so far

00:17:59,840 --> 00:18:06,110
it does not provide anything in fair

00:18:01,399 --> 00:18:07,940
interesting except packages will build

00:18:06,110 --> 00:18:11,440
the documentation automatically from now

00:18:07,940 --> 00:18:13,820
on but the mere fact of calling this and

00:18:11,440 --> 00:18:16,700
taking a variables that the package has

00:18:13,820 --> 00:18:19,940
documentation all this code will be

00:18:16,700 --> 00:18:23,470
added as if it was written in the dot MK

00:18:19,940 --> 00:18:26,299
finer developers don't have to write a

00:18:23,470 --> 00:18:31,580
hook to build a documentation it will be

00:18:26,299 --> 00:18:33,710
done done automatically so we use we

00:18:31,580 --> 00:18:37,850
defined a new macro for each package

00:18:33,710 --> 00:18:42,200
which that course make changes directly

00:18:37,850 --> 00:18:45,289
to the package source tree / dark so it

00:18:42,200 --> 00:18:48,259
supposedly builds the documentation and

00:18:45,289 --> 00:18:53,240
registers the new macro as a post bill

00:18:48,259 --> 00:18:56,059
look and the same for the macro to

00:18:53,240 --> 00:18:59,619
install the recommendation in a specific

00:18:56,059 --> 00:19:03,499
directory this is not very interesting

00:18:59,619 --> 00:19:06,499
because you define the macro twice or

00:19:03,499 --> 00:19:07,999
sorry many times once for all each

00:19:06,499 --> 00:19:11,179
package that needs to build

00:19:07,999 --> 00:19:14,899
documentation which means you have to

00:19:11,179 --> 00:19:18,639
escape the dollar yeah because it is

00:19:14,899 --> 00:19:21,529
entitled macros that is evaluated twice

00:19:18,639 --> 00:19:23,690
so you want the variables to only be

00:19:21,529 --> 00:19:27,169
evaluated the second time not the first

00:19:23,690 --> 00:19:29,480
time so you need to give a to quote so

00:19:27,169 --> 00:19:34,669
we have a first word problems that we

00:19:29,480 --> 00:19:39,110
have too many dollars and it's also it's

00:19:34,669 --> 00:19:43,999
also bad for performance because as you

00:19:39,110 --> 00:19:46,410
add new macros you will create

00:19:43,999 --> 00:19:48,990
clashes in the ash tables in general

00:19:46,410 --> 00:19:51,720
make which it uses to find a variable

00:19:48,990 --> 00:19:58,710
definition so the more microns or more

00:19:51,720 --> 00:20:00,300
variables the slower it is so instead

00:19:58,710 --> 00:20:05,400
you should do as we've been doing for

00:20:00,300 --> 00:20:10,170
the translations define a macro that is

00:20:05,400 --> 00:20:12,390
absolutely generic and call it towards

00:20:10,170 --> 00:20:15,740
the same macro for all packages that

00:20:12,390 --> 00:20:18,510
defined translations so package that

00:20:15,740 --> 00:20:19,260
specifies that it has translations again

00:20:18,510 --> 00:20:23,130
it does

00:20:19,260 --> 00:20:25,320
unload only declarative statement no

00:20:23,130 --> 00:20:27,300
code is written by the developer will

00:20:25,320 --> 00:20:30,180
automatically get that code to be

00:20:27,300 --> 00:20:32,760
expanded and if secured site will

00:20:30,180 --> 00:20:35,640
increase tool is enabled and the

00:20:32,760 --> 00:20:40,110
packages translations it generates verse

00:20:35,640 --> 00:20:42,870
2 macro and 1 for 2 as a possibility

00:20:40,110 --> 00:20:45,540
look to build the translation and one as

00:20:42,870 --> 00:20:48,600
an post install target to actually

00:20:45,540 --> 00:20:50,250
install the translation files and the

00:20:48,600 --> 00:20:52,380
package automatically gains the

00:20:50,250 --> 00:20:57,330
dependency on cute 5 tools without

00:20:52,380 --> 00:20:59,300
having to write it itself that is if we

00:20:57,330 --> 00:21:03,480
change the way we owned all translations

00:20:59,300 --> 00:21:05,910
the package will just have nothing to do

00:21:03,480 --> 00:21:10,320
because we will change that code once

00:21:05,910 --> 00:21:13,650
here and then because the macros are

00:21:10,320 --> 00:21:15,810
defined only once you know we don't have

00:21:13,650 --> 00:21:27,060
the too many dollar problem it is more

00:21:15,810 --> 00:21:29,310
readable so our applications need to be

00:21:27,060 --> 00:21:32,310
run by something else which we call the

00:21:29,310 --> 00:21:34,650
application manager and application just

00:21:32,310 --> 00:21:37,110
register with our application manager by

00:21:34,650 --> 00:21:39,150
installing to configuration files one

00:21:37,110 --> 00:21:42,870
for the application manager itself and

00:21:39,150 --> 00:21:45,030
one for window manager where I tells

00:21:42,870 --> 00:21:48,050
whether it is a full screen or in the

00:21:45,030 --> 00:21:52,200
valley application or pop-up or whatever

00:21:48,050 --> 00:21:55,620
and was - files are just static files

00:21:52,200 --> 00:21:58,170
installed from the package directory to

00:21:55,620 --> 00:22:01,680
the target directory as

00:21:58,170 --> 00:22:04,470
at first install target hook which is

00:22:01,680 --> 00:22:07,500
again a single macro expanded for all

00:22:04,470 --> 00:22:09,960
packages and this macro just copies the

00:22:07,500 --> 00:22:12,930
file from the current package directory

00:22:09,960 --> 00:22:17,330
I would choose it to the target

00:22:12,930 --> 00:22:21,060
directory and a specific folder and

00:22:17,330 --> 00:22:23,730
actually one reviewing with reviewing

00:22:21,060 --> 00:22:25,770
with slides on writing them I noticed

00:22:23,730 --> 00:22:30,000
that we had a bug here that I had to fix

00:22:25,770 --> 00:22:33,690
in our code so do talks to conferences

00:22:30,000 --> 00:22:35,690
you can fix your bugs and actually I

00:22:33,690 --> 00:22:41,820
think Steven Holl said at the same

00:22:35,690 --> 00:22:43,650
comment this morning or yesterday we

00:22:41,820 --> 00:22:48,180
also have various types of applications

00:22:43,650 --> 00:22:51,500
who's that I run in it was data as

00:22:48,180 --> 00:22:53,940
services or systems and the same

00:22:51,500 --> 00:22:55,740
developers just defines the type of

00:22:53,940 --> 00:22:57,120
applications they are installing for

00:22:55,740 --> 00:22:59,520
example here's the orange lava

00:22:57,120 --> 00:23:02,820
application defined that it is

00:22:59,520 --> 00:23:07,140
installing live so live ear respond to

00:23:02,820 --> 00:23:08,970
the live here and here and this means

00:23:07,140 --> 00:23:12,590
that the application is to be studied

00:23:08,970 --> 00:23:17,730
automatically at boot but we're also

00:23:12,590 --> 00:23:19,980
system applications and services the

00:23:17,730 --> 00:23:22,980
difference between being when they are

00:23:19,980 --> 00:23:24,840
started system is started earliest

00:23:22,980 --> 00:23:27,630
services are started early

00:23:24,840 --> 00:23:30,660
but after system and init application of

00:23:27,630 --> 00:23:35,430
studied last while other applications

00:23:30,660 --> 00:23:38,610
are just started on-demand later what we

00:23:35,430 --> 00:23:41,790
have here is quite complex code that

00:23:38,610 --> 00:23:44,370
generates a JSON file which contains the

00:23:41,790 --> 00:23:48,570
list of app in it application services

00:23:44,370 --> 00:23:52,530
and system demons don't write that it's

00:23:48,570 --> 00:23:55,910
totally not late none visible Euclid

00:23:52,530 --> 00:23:58,650
you could probably write a template and

00:23:55,910 --> 00:24:04,200
said you were using to that template it

00:23:58,650 --> 00:24:06,930
would be more easy to read and this code

00:24:04,200 --> 00:24:10,380
is registers registered as a post

00:24:06,930 --> 00:24:11,590
billhook from our application manager

00:24:10,380 --> 00:24:14,590
app all

00:24:11,590 --> 00:24:19,419
and installed into the target directory

00:24:14,590 --> 00:24:22,000
as the posting start target look what

00:24:19,419 --> 00:24:25,600
this means here is that again developers

00:24:22,000 --> 00:24:28,929
do not have to write code or we don't

00:24:25,600 --> 00:24:31,330
have to have static files that these

00:24:28,929 --> 00:24:35,919
tribal war applications developers just

00:24:31,330 --> 00:24:38,350
after you in the dot MK file right

00:24:35,919 --> 00:24:40,809
whether the application they are

00:24:38,350 --> 00:24:46,450
packaged install applications or not and

00:24:40,809 --> 00:24:48,730
this is again very easy for them writing

00:24:46,450 --> 00:24:52,230
this kind of code is definitely not easy

00:24:48,730 --> 00:24:56,110
and for me as a maintainer of this

00:24:52,230 --> 00:24:58,870
packaging writing static files is not

00:24:56,110 --> 00:25:02,409
very nice because I would have a static

00:24:58,870 --> 00:25:05,169
file for when the live and the PVR on a

00:25:02,409 --> 00:25:07,059
board or a static file where only the

00:25:05,169 --> 00:25:15,279
light is enabled that's not doable in

00:25:07,059 --> 00:25:18,429
the long term this package up all starts

00:25:15,279 --> 00:25:21,630
with an A it means that it is scanned by

00:25:18,429 --> 00:25:26,890
make very early in the scanning process

00:25:21,630 --> 00:25:28,870
however voice variables only set when a

00:25:26,890 --> 00:25:31,899
package is passed

00:25:28,870 --> 00:25:34,380
so maybe packages that are scanned later

00:25:31,899 --> 00:25:37,419
will register applicable applications

00:25:34,380 --> 00:25:40,240
but that's not a problem because those

00:25:37,419 --> 00:25:43,360
variables are part of a part of a post

00:25:40,240 --> 00:25:46,779
bill book so it means they will be

00:25:43,360 --> 00:25:50,320
evaluated very late so you can still use

00:25:46,779 --> 00:25:55,950
variables even though the values is a

00:25:50,320 --> 00:25:55,950
not yet known but make syntax

00:25:59,240 --> 00:26:03,950
balut has the mechanism to define users

00:26:01,400 --> 00:26:07,970
and all our applications run as a

00:26:03,950 --> 00:26:10,070
specific user and that's good for

00:26:07,970 --> 00:26:12,350
security because when an application

00:26:10,070 --> 00:26:14,300
create a file on the file system

00:26:12,350 --> 00:26:17,150
it belongs to itself and other

00:26:14,300 --> 00:26:21,230
applications don't read it so you have

00:26:17,150 --> 00:26:23,630
to have various users however Bitteroot

00:26:21,230 --> 00:26:25,940
allows you to define a user without

00:26:23,630 --> 00:26:29,960
specifying your new ID and balot will

00:26:25,940 --> 00:26:32,630
assign it for you which means that the

00:26:29,960 --> 00:26:34,670
live application here will get probably

00:26:32,630 --> 00:26:38,270
the ten thousand and forty two UID

00:26:34,670 --> 00:26:40,160
if it is automatic you run that on the

00:26:38,270 --> 00:26:42,920
target the live application creates a

00:26:40,160 --> 00:26:46,970
file that belongs to the live user which

00:26:42,920 --> 00:26:50,030
is UID 10032 and then you add a new

00:26:46,970 --> 00:26:53,000
package let's call it joystick that

00:26:50,030 --> 00:26:57,170
declares a joystick user and because J

00:26:53,000 --> 00:27:01,430
sorts before L the joystick user gets

00:26:57,170 --> 00:27:03,710
ten thousand 42 UID and when you update

00:27:01,430 --> 00:27:05,810
your device the live user is no longer

00:27:03,710 --> 00:27:07,880
ten thousand and forty two it would be

00:27:05,810 --> 00:27:11,750
ten thousand forty three and it will

00:27:07,880 --> 00:27:13,880
have no longer access to its files and

00:27:11,750 --> 00:27:16,670
the joystick X user would access the

00:27:13,880 --> 00:27:19,040
live users file so we have some code

00:27:16,670 --> 00:27:25,790
that ensures that all you IDs are

00:27:19,040 --> 00:27:28,010
explicit those are just variables so

00:27:25,790 --> 00:27:33,860
they are known at the time of passing so

00:27:28,010 --> 00:27:39,410
you can just do some check on them and

00:27:33,860 --> 00:27:41,720
again this is only declarative code so

00:27:39,410 --> 00:27:44,000
is the user just after sorry the

00:27:41,720 --> 00:27:48,050
developer of the package just asked to

00:27:44,000 --> 00:27:54,620
declare a user using normal Bill root

00:27:48,050 --> 00:27:57,260
mechanism our application call each

00:27:54,620 --> 00:28:01,130
other through the bus and because they

00:27:57,260 --> 00:28:04,070
are using non-root users we have to

00:28:01,130 --> 00:28:07,130
generate an authorization file for each

00:28:04,070 --> 00:28:09,320
user which means for example this user

00:28:07,130 --> 00:28:11,420
is allowed to talk to the dippers and

00:28:09,320 --> 00:28:15,679
kilometers from data interface

00:28:11,420 --> 00:28:17,660
and if the user is not the root call to

00:28:15,679 --> 00:28:21,770
a specific interface the call will

00:28:17,660 --> 00:28:24,170
Failla however maintaining this kind of

00:28:21,770 --> 00:28:27,679
files is very tedious because users may

00:28:24,170 --> 00:28:30,140
add new calls or new interfaces and they

00:28:27,679 --> 00:28:34,280
may remove old ones so you would have

00:28:30,140 --> 00:28:36,140
bit rot in boost authorization files so

00:28:34,280 --> 00:28:41,179
we decided that because we are using

00:28:36,140 --> 00:28:43,010
dubious api's through QT bus we could

00:28:41,179 --> 00:28:46,820
scan the code for various known patterns

00:28:43,010 --> 00:28:49,490
and generate associated authorization

00:28:46,820 --> 00:28:53,530
files okay the code is a little bit

00:28:49,490 --> 00:28:55,640
complex but what it does basically is as

00:28:53,530 --> 00:29:01,600
a post big build

00:28:55,640 --> 00:29:05,890
hook it will call this macro which is

00:29:01,600 --> 00:29:09,169
just calling the tools that scans the

00:29:05,890 --> 00:29:13,340
package source tree for a specific UID

00:29:09,169 --> 00:29:18,730
and generate a system diversity of file

00:29:13,340 --> 00:29:22,400
and this as I'll cover a bit later

00:29:18,730 --> 00:29:24,140
so as the post bill wiscons of source

00:29:22,400 --> 00:29:27,530
code and generate configuration files

00:29:24,140 --> 00:29:31,340
for this specific user and at itself

00:29:27,530 --> 00:29:34,250
I'll at install time we install them in

00:29:31,340 --> 00:29:37,280
target for the station bus and in

00:29:34,250 --> 00:29:39,080
staging for the system bus remember that

00:29:37,280 --> 00:29:41,660
we are not the main part of the system

00:29:39,080 --> 00:29:44,330
so the system bus does not belong to us

00:29:41,660 --> 00:29:48,049
it belongs to the main part so we are

00:29:44,330 --> 00:29:48,890
not running it we are not even aware of

00:29:48,049 --> 00:29:50,750
how it is running

00:29:48,890 --> 00:29:52,820
we just know vary the system bus to

00:29:50,750 --> 00:29:56,330
which we must provide authorization

00:29:52,820 --> 00:29:58,460
files that's why we provide them in

00:29:56,330 --> 00:30:00,799
staging so that we can extract them

00:29:58,460 --> 00:30:01,250
easier more easily at the end of the

00:30:00,799 --> 00:30:04,160
build

00:30:01,250 --> 00:30:06,500
but the worst session bus we manage so

00:30:04,160 --> 00:30:10,340
we installed the authorization files in

00:30:06,500 --> 00:30:12,080
the target directory only part of the

00:30:10,340 --> 00:30:14,870
code is shown here that deals with the

00:30:12,080 --> 00:30:17,540
system bus but decision one is about the

00:30:14,870 --> 00:30:20,360
same it would not fit on the slide and

00:30:17,540 --> 00:30:22,610
again because package is all of our

00:30:20,360 --> 00:30:24,519
packages call this macro launch package

00:30:22,610 --> 00:30:27,989
we extend that macro

00:30:24,519 --> 00:30:31,179
with a new coal here which extends all

00:30:27,989 --> 00:30:34,479
whiskered and more for a specific

00:30:31,179 --> 00:30:37,719
package and then what a package has to

00:30:34,479 --> 00:30:42,309
say it just asked to define that yes it

00:30:37,719 --> 00:30:48,459
is using the system Debus api nothing

00:30:42,309 --> 00:30:50,549
more with a slight exception when to

00:30:48,459 --> 00:30:53,019
application want to talk to each other

00:30:50,549 --> 00:30:55,359
sorry when they want to talk to each

00:30:53,019 --> 00:30:58,299
other they need the XML file one of the

00:30:55,359 --> 00:31:00,369
other and the first outcomes loses

00:30:58,299 --> 00:31:03,489
because the XML of the other is not

00:31:00,369 --> 00:31:06,279
really present so we have to break the

00:31:03,489 --> 00:31:09,209
loop and an application just right that

00:31:06,279 --> 00:31:12,309
it uses extra debits interfaces that are

00:31:09,209 --> 00:31:17,709
not known by scanning the code because

00:31:12,309 --> 00:31:27,809
it is not using QT bus and this is what

00:31:17,709 --> 00:31:27,809
we have here extra the bus interface so

00:31:28,289 --> 00:31:36,369
scanning the code for the packages on

00:31:31,839 --> 00:31:38,950
the bus API use and turning the code for

00:31:36,369 --> 00:31:42,279
and sorry added interfaces for the

00:31:38,950 --> 00:31:45,459
unknown and unscannable interface usage

00:31:42,279 --> 00:31:48,099
and there is another exception when an

00:31:45,459 --> 00:31:52,299
application uses the library and that

00:31:48,099 --> 00:31:54,009
the library uses call to D bus right no

00:31:52,299 --> 00:31:56,469
way to scan the code because it's a code

00:31:54,009 --> 00:31:59,229
of a library so we have some way for

00:31:56,469 --> 00:32:03,369
libraries to export the interfaces they

00:31:59,229 --> 00:32:05,950
use and because the orange laga depend

00:32:03,369 --> 00:32:08,739
depends on the live data model it

00:32:05,950 --> 00:32:12,070
automatically will gain a co an

00:32:08,739 --> 00:32:17,519
authorization on this interface and this

00:32:12,070 --> 00:32:22,570
is done by this good ear that scans the

00:32:17,519 --> 00:32:26,159
narrated dependencies of the inherited

00:32:22,570 --> 00:32:26,159
interfaces of all dependencies

00:32:29,950 --> 00:32:36,860
so we generate authorization dippers

00:32:34,250 --> 00:32:40,430
config files automatically without the

00:32:36,860 --> 00:32:45,430
user even knowing what's going on just

00:32:40,430 --> 00:32:45,430
by the mere fact of writing this line

00:32:46,690 --> 00:32:53,270
something that is very similar to

00:32:49,670 --> 00:32:55,610
dippers is Apollo Apollo is a way to

00:32:53,270 --> 00:32:58,070
constrain an application to a specific

00:32:55,610 --> 00:33:01,400
set of files it is the load use with

00:32:58,070 --> 00:33:02,060
various rights on a file like read or

00:33:01,400 --> 00:33:04,960
write

00:33:02,060 --> 00:33:08,060
look exact map and stuff like that and

00:33:04,960 --> 00:33:09,290
this is tedious to write because it is a

00:33:08,060 --> 00:33:11,960
huge list

00:33:09,290 --> 00:33:14,240
that depends on what libraries you are

00:33:11,960 --> 00:33:18,590
linked with for example your application

00:33:14,240 --> 00:33:20,500
main use / hot / months and why is

00:33:18,590 --> 00:33:22,340
absolutely no reason that it does

00:33:20,500 --> 00:33:24,380
because when you look at your

00:33:22,340 --> 00:33:27,170
application code this pass is never

00:33:24,380 --> 00:33:30,350
mentioned in the code and why does it

00:33:27,170 --> 00:33:35,890
need that it needs it because if you are

00:33:30,350 --> 00:33:40,040
using some kind of shared memory things

00:33:35,890 --> 00:33:43,400
the G Lipsy will try to find a tmpfs

00:33:40,040 --> 00:33:45,470
mount and for that it needs to scan

00:33:43,400 --> 00:33:47,540
slash hot slash months but the

00:33:45,470 --> 00:33:51,950
application developer does not know

00:33:47,540 --> 00:33:54,350
about that and even himself is not using

00:33:51,950 --> 00:33:57,590
shell memory it's being used for example

00:33:54,350 --> 00:34:03,200
for Welland and is just writing an

00:33:57,590 --> 00:34:06,230
application so yeah it's great to just

00:34:03,200 --> 00:34:09,110
to work to write but most importantly

00:34:06,230 --> 00:34:14,140
it's very prone to bit rot in case a

00:34:09,110 --> 00:34:16,970
library changes or developer uses new

00:34:14,140 --> 00:34:22,100
files or removes access to a file from

00:34:16,970 --> 00:34:25,700
his application so it's pretty difficult

00:34:22,100 --> 00:34:29,150
to maintain a security feature which is

00:34:25,700 --> 00:34:32,600
which has contrary to situate itself so

00:34:29,150 --> 00:34:35,450
we've added a way for an application to

00:34:32,600 --> 00:34:38,380
define that it installs an executable to

00:34:35,450 --> 00:34:40,159
be protected by apparmor and that

00:34:38,380 --> 00:34:42,500
specific

00:34:40,159 --> 00:34:45,289
Tippett for that application is provided

00:34:42,500 --> 00:34:48,289
here and this application just requires

00:34:45,289 --> 00:34:50,240
an access to a file in windowed and an

00:34:48,289 --> 00:34:53,659
access to another file in read write and

00:34:50,240 --> 00:34:59,119
lock mode and that's all in a developer

00:34:53,659 --> 00:35:02,240
as to write however when an application

00:34:59,119 --> 00:35:04,630
as a dependency on a library which

00:35:02,240 --> 00:35:09,069
itself needs some access to files

00:35:04,630 --> 00:35:12,109
libraries just define what libraries

00:35:09,069 --> 00:35:14,089
provide uppermost nipples and this

00:35:12,109 --> 00:35:16,280
library data model needed to it it's

00:35:14,089 --> 00:35:18,680
proficient file and access to its

00:35:16,280 --> 00:35:20,630
circuit and bike because the live

00:35:18,680 --> 00:35:24,260
application is linked to the live data

00:35:20,630 --> 00:35:27,589
model library it will pull in visnu path

00:35:24,260 --> 00:35:29,799
automatically and the same goes for data

00:35:27,589 --> 00:35:33,170
files for example the fonts here

00:35:29,799 --> 00:35:35,089
specifies that it installs data files to

00:35:33,170 --> 00:35:39,559
be used by other app arm of protecting

00:35:35,089 --> 00:35:41,900
executables and in this case all TTF

00:35:39,559 --> 00:35:44,690
files in that directory are load in read

00:35:41,900 --> 00:35:47,660
mode so we've added a new kind of

00:35:44,690 --> 00:35:50,119
dependency which is a data dependency on

00:35:47,660 --> 00:35:52,700
the wrong font package and this is the

00:35:50,119 --> 00:35:54,950
reason why you should not write your

00:35:52,700 --> 00:35:57,619
datasets whether there are fonts images

00:35:54,950 --> 00:35:59,990
or something else in an overlay because

00:35:57,619 --> 00:36:02,599
there is no package associated to

00:35:59,990 --> 00:36:05,029
Navarre and you would not be able to

00:36:02,599 --> 00:36:07,809
write anything here have either data set

00:36:05,029 --> 00:36:16,579
in a file in the package sorry will

00:36:07,809 --> 00:36:18,890
enable you to do such things so good

00:36:16,579 --> 00:36:23,210
very small snippet of the codes that

00:36:18,890 --> 00:36:25,789
indoors our farm of thing a few macros

00:36:23,210 --> 00:36:29,020
that install things from the current

00:36:25,789 --> 00:36:34,549
package directory to the staging on

00:36:29,020 --> 00:36:37,730
target plus a few routes that are

00:36:34,549 --> 00:36:40,700
registered automatically and we've got

00:36:37,730 --> 00:36:43,549
something that on dolls pretty much

00:36:40,700 --> 00:36:46,010
everything from for else files and at

00:36:43,549 --> 00:36:48,849
the very end of the build in the target

00:36:46,010 --> 00:36:53,140
finalized oak which can or F executables

00:36:48,849 --> 00:36:56,150
with a tool I we wrote that I even wrote

00:36:53,140 --> 00:37:00,220
that uses the root directory staging

00:36:56,150 --> 00:37:04,310
output specifically for specific current

00:37:00,220 --> 00:37:06,190
the current binary and Sun Sun and we

00:37:04,310 --> 00:37:11,540
can only do that at the very end because

00:37:06,190 --> 00:37:14,030
data dependencies are not actual build

00:37:11,540 --> 00:37:16,370
dependencies that is when the executable

00:37:14,030 --> 00:37:20,210
is installed not all the snippets it

00:37:16,370 --> 00:37:22,520
depends on are installed yet so we have

00:37:20,210 --> 00:37:25,910
to postpone the scanning of an

00:37:22,520 --> 00:37:29,630
executable to the end of the build and

00:37:25,910 --> 00:37:31,910
that's where we register it but we don't

00:37:29,630 --> 00:37:34,280
resist register eating the target

00:37:31,910 --> 00:37:36,950
finalized look we register it in a

00:37:34,280 --> 00:37:39,380
specific book that is called as a very

00:37:36,950 --> 00:37:42,950
specific moment during the build because

00:37:39,380 --> 00:37:47,060
it must come after the elf files are

00:37:42,950 --> 00:37:52,340
sanitized but before also to be

00:37:47,060 --> 00:37:55,040
occurring and I'm almost finished

00:37:52,340 --> 00:37:59,840
only one slide and then I can go to the

00:37:55,040 --> 00:38:02,360
conclusion and so far we've been seeing

00:37:59,840 --> 00:38:05,270
how to hook into the various steps of a

00:38:02,360 --> 00:38:07,250
bill of a package or to look at the

00:38:05,270 --> 00:38:09,110
target finalized route into the

00:38:07,250 --> 00:38:11,420
infrastructure but for some

00:38:09,110 --> 00:38:14,120
configurations for some boards you will

00:38:11,420 --> 00:38:18,230
want to call some local customizations

00:38:14,120 --> 00:38:20,480
and for example we have a post build

00:38:18,230 --> 00:38:23,000
script that will generate for Interpol

00:38:20,480 --> 00:38:26,990
of NFA sheets compliant version files

00:38:23,000 --> 00:38:30,110
remove some files that we do not want on

00:38:26,990 --> 00:38:33,020
the target for example all the dippers

00:38:30,110 --> 00:38:35,540
XML descriptions are absurdly useless on

00:38:33,020 --> 00:38:37,970
the target so we move them we also

00:38:35,540 --> 00:38:40,340
remove the dot empty placeholders

00:38:37,970 --> 00:38:43,280
because a deep tree does not track

00:38:40,340 --> 00:38:46,370
directories so we have that empty file

00:38:43,280 --> 00:38:48,380
in there a lot more other things but you

00:38:46,370 --> 00:38:52,270
can use a post bit script to do

00:38:48,380 --> 00:38:57,380
last-minute fixes or cleanups in your

00:38:52,270 --> 00:38:59,390
target directory you can also provide

00:38:57,380 --> 00:39:02,930
many post bit scripts you can have a

00:38:59,390 --> 00:39:05,360
protection one that is always run and

00:39:02,930 --> 00:39:06,370
you can have one that is only run in

00:39:05,360 --> 00:39:08,830
your

00:39:06,370 --> 00:39:11,980
configurations and for example we have

00:39:08,830 --> 00:39:17,950
one that opens the deepest to unto TCP

00:39:11,980 --> 00:39:20,620
so we can provoke sorry we can call

00:39:17,950 --> 00:39:25,060
testing things via Debus from a remote

00:39:20,620 --> 00:39:27,490
Jenkins job for example and this is

00:39:25,060 --> 00:39:36,610
conditional if it is not already done we

00:39:27,490 --> 00:39:38,620
do it so as a conclusion with things

00:39:36,610 --> 00:39:41,890
that we've been adding a lot of

00:39:38,620 --> 00:39:44,020
infrastructure we've added more than

00:39:41,890 --> 00:39:47,890
that I've shown that time already is

00:39:44,020 --> 00:39:50,680
short on time so I think an

00:39:47,890 --> 00:39:53,040
infrastructure allows things to be done

00:39:50,680 --> 00:39:58,030
automatically without the developer

00:39:53,040 --> 00:40:01,270
doing tuning specific tools it's just in

00:39:58,030 --> 00:40:04,030
the make process the developer tools

00:40:01,270 --> 00:40:07,270
make and it has firmware where all the

00:40:04,030 --> 00:40:09,850
stuff has have been executed and most

00:40:07,270 --> 00:40:14,290
importantly it's systematic because it's

00:40:09,850 --> 00:40:16,810
done the same way for all packages and

00:40:14,290 --> 00:40:20,830
of course because it is automatically

00:40:16,810 --> 00:40:24,720
done it is reproducible which is very

00:40:20,830 --> 00:40:26,800
important from body's systems and

00:40:24,720 --> 00:40:28,870
maintainable because it is written in

00:40:26,800 --> 00:40:31,150
CEO location so if we need to fix it we

00:40:28,870 --> 00:40:33,460
don't have to end all users of a

00:40:31,150 --> 00:40:37,630
specific tool to fix it we just fix it

00:40:33,460 --> 00:40:40,540
in a signal location finally it is

00:40:37,630 --> 00:40:43,570
extendable because calling the orange

00:40:40,540 --> 00:40:46,210
package macro we have introduced will

00:40:43,570 --> 00:40:50,410
automatically pull in new features we

00:40:46,210 --> 00:40:52,780
add to this macro and as the last point

00:40:50,410 --> 00:40:54,910
as I asked my colleagues to come up with

00:40:52,780 --> 00:40:58,180
a wish list for Bill root for extended

00:40:54,910 --> 00:41:00,400
balute and I had no reply so I think it

00:40:58,180 --> 00:41:02,140
Baloch is ok and there is nothing more

00:41:00,400 --> 00:41:09,870
to do with Bill root we can stop working

00:41:02,140 --> 00:41:09,870
I think I have to be very fast

00:41:11,050 --> 00:41:29,170
if you have questions please speak now

00:41:14,300 --> 00:41:29,170
or never to speak again any question

00:41:29,860 --> 00:41:32,860
yeah

00:41:37,690 --> 00:41:42,320
can you make the slides available

00:41:39,590 --> 00:41:45,500
somewhere yes I will i'ma make idiots

00:41:42,320 --> 00:41:47,950
and I have tried to write your built-in

00:41:45,500 --> 00:41:50,960
macros and they never never work for me

00:41:47,950 --> 00:41:52,820
so some sort of template that I can

00:41:50,960 --> 00:41:54,590
learn from would be really cool yeah so

00:41:52,820 --> 00:41:58,340
I will be making the slides available

00:41:54,590 --> 00:42:00,710
instead come after the talk maybe not

00:41:58,340 --> 00:42:05,900
right now but before the end of the week

00:42:00,710 --> 00:42:08,840
yes and also just an ass line side note

00:42:05,900 --> 00:42:13,310
all the code I've been working showing a

00:42:08,840 --> 00:42:15,380
is not complete brah other stuff but it

00:42:13,310 --> 00:42:20,480
gets another view of what is possible

00:42:15,380 --> 00:42:22,520
here yeah if you make a small change to

00:42:20,480 --> 00:42:24,380
your application for example at debug

00:42:22,520 --> 00:42:25,720
output how long does the rebuild of

00:42:24,380 --> 00:42:29,780
damage take

00:42:25,720 --> 00:42:32,510
so you mean if I just add debug output

00:42:29,780 --> 00:42:33,770
to your application you want to package

00:42:32,510 --> 00:42:36,680
into the image

00:42:33,770 --> 00:42:38,840
how long does rebuild also what it

00:42:36,680 --> 00:42:42,560
really depends on to what you mean

00:42:38,840 --> 00:42:45,080
because if you just add a few few lines

00:42:42,560 --> 00:42:47,720
of code of your application maybe only

00:42:45,080 --> 00:42:51,860
the files that are modified our we built

00:42:47,720 --> 00:42:56,360
because we are using the override SSID

00:42:51,860 --> 00:42:59,840
or feature provided by build route yeah

00:42:56,360 --> 00:43:01,940
so a developer when developer change is

00:42:59,840 --> 00:43:04,220
the code yes the code on specific

00:43:01,940 --> 00:43:07,550
directory which is copied by Bill root

00:43:04,220 --> 00:43:11,810
and if you just change that code you can

00:43:07,550 --> 00:43:17,270
ask below to make package rebuild and it

00:43:11,810 --> 00:43:19,640
will just copy asking the code to the

00:43:17,270 --> 00:43:21,920
build directory and only the files that

00:43:19,640 --> 00:43:22,670
have been modified will be copied and so

00:43:21,920 --> 00:43:24,080
if your bill

00:43:22,670 --> 00:43:27,110
system of the application historically

00:43:24,080 --> 00:43:30,350
region likes image or things like that

00:43:27,110 --> 00:43:33,070
only the new files will be rebuilt so

00:43:30,350 --> 00:43:33,070
it's pretty fast

00:43:35,350 --> 00:43:42,290
as a question okay so let's go Likud

00:43:39,890 --> 00:43:45,720
Kali today thank you very much and enjoy

00:43:42,290 --> 00:43:48,890
your the boost poor thank you

00:43:45,720 --> 00:43:48,890

YouTube URL: https://www.youtube.com/watch?v=SN2hYO2rYtk


