Title: Keynote: Cloud Native Update - Chris Aniszczyk, COO, Cloud Native Computing Foundation
Publication date: 2017-10-25
Playlist: Open Source Summit Europe & Embedded Linux Conference Europe 2017
Description: 
	Keynote: Cloud Native Update - Chris Aniszczyk, COO, Cloud Native Computing Foundation & Riyaz Faizullabhoy, Security Engineer, DockerÂ 

About Chris Aniszczyk
Chris Aniszczyk brings more than 15 years experience as The Linux Foundationâ€™s Vice President of Developer Relations and Programs. His work is focused on working with the developer community to advance open source projects at scale. Previously Aniszczyk served as Twitter's Head of Open Source, where he led a team of developer advocates and was responsible for Twitter's open source engineering, strategy and culture. He has also contributed to Gentoo/Fedora Linux and served on the Eclipse Foundation's Board of Directors and the Java Community Process Executive Committee. An engineer by trade, Aniszczyk brings a passion for both open source and community development to the organization.

About Riyaz Faizullabhoy
Riyaz works on the security team at Docker and is a maintainer of LinuxKit and Notary. Prior to Docker, Riyaz researched malware and systems security at UC Berkeley. Riyaz has also spoken at DockerCon, LinuxCon NA, ContainerCon EU, and past Docker meetups.
Captions: 
	00:00:00,000 --> 00:00:07,560
all right everyone could hear me

00:00:02,000 --> 00:00:09,750
everyone's awake cuz I'm not so as Jim

00:00:07,560 --> 00:00:11,400
mentioned I'm gonna go over some updates

00:00:09,750 --> 00:00:13,710
from the cloud native computing

00:00:11,400 --> 00:00:15,299
foundation you know obviously in this

00:00:13,710 --> 00:00:18,060
room it seemed like more people knew

00:00:15,299 --> 00:00:19,470
about you know one of our first projects

00:00:18,060 --> 00:00:21,420
kubernetes more than the foundation

00:00:19,470 --> 00:00:22,859
itself but that's sometimes how it is so

00:00:21,420 --> 00:00:30,900
I want to tell you a little bit about

00:00:22,859 --> 00:00:38,270
our origin stories so working clicker

00:00:30,900 --> 00:00:41,010
vo we got a little snafu but there we go

00:00:38,270 --> 00:00:43,500
it's a hard click all right so a little

00:00:41,010 --> 00:00:47,640
bit of an origin story around CN CF so I

00:00:43,500 --> 00:00:50,760
think we're good ah thanks you told me

00:00:47,640 --> 00:00:52,500
this would happen so cool so a little

00:00:50,760 --> 00:00:54,120
origin story I was fortunate enough to

00:00:52,500 --> 00:00:56,539
join a Linux Foundation all around 2

00:00:54,120 --> 00:00:59,070
years ago to be involved with the

00:00:56,539 --> 00:01:01,430
formation of the cloud native computing

00:00:59,070 --> 00:01:04,799
foundation so for those who aren't aware

00:01:01,430 --> 00:01:07,110
cloud native is really a form of

00:01:04,799 --> 00:01:09,270
computing that was pioneered by the

00:01:07,110 --> 00:01:12,299
internet scale giants out there like

00:01:09,270 --> 00:01:14,729
Google Facebook Twitter Netflix and and

00:01:12,299 --> 00:01:17,640
so on and when I when I when I say clown

00:01:14,729 --> 00:01:19,530
native all I mean is you have services

00:01:17,640 --> 00:01:22,320
that live in containers that are

00:01:19,530 --> 00:01:24,840
orchestrated by some central system like

00:01:22,320 --> 00:01:26,520
like like kubernetes and so we started

00:01:24,840 --> 00:01:28,619
with this kind of simple goal of

00:01:26,520 --> 00:01:30,090
bringing clown native computing to the

00:01:28,619 --> 00:01:33,210
masses and when we started the

00:01:30,090 --> 00:01:35,640
foundation we humbly started with 22

00:01:33,210 --> 00:01:38,820
members and kubernetes is kind of our

00:01:35,640 --> 00:01:40,619
seed project and so that was about about

00:01:38,820 --> 00:01:41,549
two years ago like technically under two

00:01:40,619 --> 00:01:42,960
years ago because we didn't hold our

00:01:41,549 --> 00:01:46,020
first board meeting until December of

00:01:42,960 --> 00:01:48,390
2015 but it's been amazing to kind of

00:01:46,020 --> 00:01:50,700
see the growth over time as Jim alluded

00:01:48,390 --> 00:01:52,170
to I argue really think we are the

00:01:50,700 --> 00:01:53,460
fastest growing open-source foundation

00:01:52,170 --> 00:01:56,189
with the Linux Foundation but some

00:01:53,460 --> 00:01:59,070
people will debate me on that one but as

00:01:56,189 --> 00:02:01,829
of today we've basically experienced

00:01:59,070 --> 00:02:05,189
over 6x growth in under two years we're

00:02:01,829 --> 00:02:07,740
at 141 members it's it's really amazing

00:02:05,189 --> 00:02:10,709
to kind of see a wide variety of

00:02:07,740 --> 00:02:12,780
companies really trying to adopt cloud

00:02:10,709 --> 00:02:13,770
native computing and for me if you kind

00:02:12,780 --> 00:02:16,350
of were studious and

00:02:13,770 --> 00:02:17,820
that this list of members I think for

00:02:16,350 --> 00:02:20,850
the first time in the history of

00:02:17,820 --> 00:02:22,860
open-source we have the top six cloud

00:02:20,850 --> 00:02:25,500
providers under one open-source

00:02:22,860 --> 00:02:27,630
foundation umbrella working together to

00:02:25,500 --> 00:02:29,910
advance the notion of cloud native

00:02:27,630 --> 00:02:31,350
computing - to me which is amazing for

00:02:29,910 --> 00:02:35,880
being someone who's been involved in

00:02:31,350 --> 00:02:37,970
open source for for a long time also as

00:02:35,880 --> 00:02:41,000
kind of like a geeky nerdy thing I

00:02:37,970 --> 00:02:43,260
completely find it fascinating that

00:02:41,000 --> 00:02:45,150
community is our first project is

00:02:43,260 --> 00:02:46,770
actually technically self hosted on

00:02:45,150 --> 00:02:49,020
itself for the first time I'm sure some

00:02:46,770 --> 00:02:51,480
of you have heard but github ESRI

00:02:49,020 --> 00:02:53,070
platform on kubernetes so community

00:02:51,480 --> 00:02:55,200
source code is on github github runs

00:02:53,070 --> 00:02:58,560
kubernetes so it's self hosted so I find

00:02:55,200 --> 00:03:02,180
this as a as a fun kind of a fun key

00:02:58,560 --> 00:03:05,580
thing to think about but in reality here

00:03:02,180 --> 00:03:07,260
CN CF the the lifeblood of CN CF is its

00:03:05,580 --> 00:03:10,440
projects you know I love all of our I

00:03:07,260 --> 00:03:12,840
love all my projects equally and we have

00:03:10,440 --> 00:03:15,020
12 of them we've grown to 12 projects

00:03:12,840 --> 00:03:18,270
over the last two years they cover

00:03:15,020 --> 00:03:21,780
spaces from you know from orchestration

00:03:18,270 --> 00:03:23,660
to monitoring to tracing and and you

00:03:21,780 --> 00:03:27,150
know I'm sure some of you have seen this

00:03:23,660 --> 00:03:30,209
wonderful cloud native landscape if you

00:03:27,150 --> 00:03:31,890
haven't you know it's a bit of a crazy

00:03:30,209 --> 00:03:33,990
diagram it kind of shows the complexity

00:03:31,890 --> 00:03:36,840
of this space but I think the important

00:03:33,990 --> 00:03:39,840
thing here is that when it comes to

00:03:36,840 --> 00:03:41,490
clown native there are multiple paths to

00:03:39,840 --> 00:03:43,020
get to cloud native right there's

00:03:41,490 --> 00:03:45,720
different technologies out there that

00:03:43,020 --> 00:03:47,550
could use obviously we love for you to

00:03:45,720 --> 00:03:49,350
consider CN CF projects we think they're

00:03:47,550 --> 00:03:50,340
of high quality and and you know

00:03:49,350 --> 00:03:52,380
something you should consider

00:03:50,340 --> 00:03:53,400
but we're realists right we understand

00:03:52,380 --> 00:03:54,690
there's other technology and the

00:03:53,400 --> 00:03:56,459
projects out there that you may want to

00:03:54,690 --> 00:03:58,820
use for specific things but the

00:03:56,459 --> 00:04:00,930
important thing in this diagram is there

00:03:58,820 --> 00:04:03,690
there's some missing holes here there's

00:04:00,930 --> 00:04:05,160
some missing pieces so you know today

00:04:03,690 --> 00:04:07,350
I'm happy announced that we're going to

00:04:05,160 --> 00:04:12,120
fill some missing gaps in this diagram

00:04:07,350 --> 00:04:13,709
and I'd like to introduce Ria's fazil a

00:04:12,120 --> 00:04:15,420
boy from docker to talk about some of

00:04:13,709 --> 00:04:18,329
these new gaps that were filling today

00:04:15,420 --> 00:04:21,569
so please welcome Ria's to the stage

00:04:18,329 --> 00:04:21,569
[Applause]

00:04:24,110 --> 00:04:30,509
[Music]

00:04:25,699 --> 00:04:32,729
thanks Chris so as Chris mentioned today

00:04:30,509 --> 00:04:35,069
we are feeling a couple gaps on that

00:04:32,729 --> 00:04:37,020
past diagram and so with great

00:04:35,069 --> 00:04:40,800
excitement I'm happy to announce two new

00:04:37,020 --> 00:04:47,389
projects to the CNC F the update

00:04:40,800 --> 00:04:47,389
framework and notary so thank you so

00:04:47,840 --> 00:04:53,940
give me some context both projects are

00:04:51,150 --> 00:04:57,240
focused on security and both projects

00:04:53,940 --> 00:04:59,520
focused on a trusted delivery of content

00:04:57,240 --> 00:05:01,740
what that means is getting some data

00:04:59,520 --> 00:05:03,930
from point A to point B the data could

00:05:01,740 --> 00:05:06,500
be anything across platform in a trusted

00:05:03,930 --> 00:05:08,490
way so many of you are probably thinking

00:05:06,500 --> 00:05:10,560
okay we have a way of doing this we

00:05:08,490 --> 00:05:13,710
maybe can use signatures so here's a

00:05:10,560 --> 00:05:15,210
signature and you may recognize the

00:05:13,710 --> 00:05:17,340
signature you may not in which case you

00:05:15,210 --> 00:05:19,349
have some authenticity of the signature

00:05:17,340 --> 00:05:20,340
but we're really missing from just

00:05:19,349 --> 00:05:22,710
signatures we're missing a lot of

00:05:20,340 --> 00:05:25,349
context we're missing when was the

00:05:22,710 --> 00:05:28,080
signature made is it still valid is one

00:05:25,349 --> 00:05:29,879
signature enough for our data or

00:05:28,080 --> 00:05:33,319
software or the document that this was

00:05:29,879 --> 00:05:37,740
on and so what tough diptych framework

00:05:33,319 --> 00:05:40,979
really strives to achieve is providing

00:05:37,740 --> 00:05:43,830
context for more robust software updates

00:05:40,979 --> 00:05:46,589
in a trusted way so for some background

00:05:43,830 --> 00:05:48,120
on TUF TUF was developed by a group of

00:05:46,589 --> 00:05:50,909
researchers at the new york university

00:05:48,120 --> 00:05:54,930
the engineering school and they drew

00:05:50,909 --> 00:05:58,319
some ideas from tor which many of you

00:05:54,930 --> 00:06:00,960
may know as an anonymity the software

00:05:58,319 --> 00:06:02,639
the communication and tor had a very

00:06:00,960 --> 00:06:05,580
exciting update framework called Fandi

00:06:02,639 --> 00:06:08,639
where they SAP sought out to make a very

00:06:05,580 --> 00:06:09,690
secure update system for tor even in the

00:06:08,639 --> 00:06:13,020
face of some of the strongest

00:06:09,690 --> 00:06:15,029
adversaries and so in developing sandy

00:06:13,020 --> 00:06:17,000
and developing tough the tough

00:06:15,029 --> 00:06:19,589
researchers decided to really tackle

00:06:17,000 --> 00:06:21,509
giving more context around signatures

00:06:19,589 --> 00:06:23,819
that you can make very robust decisions

00:06:21,509 --> 00:06:25,710
so for example from signatures you may

00:06:23,819 --> 00:06:27,870
already get authenticity understanding

00:06:25,710 --> 00:06:30,240
who signed integrity understanding if

00:06:27,870 --> 00:06:32,669
was signed is the same thing that you

00:06:30,240 --> 00:06:33,810
want but tuff goes beyond that by giving

00:06:32,669 --> 00:06:36,000
you freshness guarantee

00:06:33,810 --> 00:06:37,680
is this the most up-to-date signature

00:06:36,000 --> 00:06:40,040
the most up-to-date package it allows

00:06:37,680 --> 00:06:42,690
you to do multi signature threshold

00:06:40,040 --> 00:06:45,930
entry's what I need do I have you know

00:06:42,690 --> 00:06:48,660
three signatures five sensors and very

00:06:45,930 --> 00:06:50,520
importantly in tough if a key is

00:06:48,660 --> 00:06:53,490
compromised it's not an end-of-the-world

00:06:50,520 --> 00:06:55,380
event you can rotate the key and your

00:06:53,490 --> 00:06:57,750
consumers of your package or whatever

00:06:55,380 --> 00:06:59,880
software or data you're providing can

00:06:57,750 --> 00:07:02,850
still verify your signature and continue

00:06:59,880 --> 00:07:05,040
with with fifthly process and so tough

00:07:02,850 --> 00:07:07,380
as I mentioned is cross-platform and

00:07:05,040 --> 00:07:09,270
many platforms and programming languages

00:07:07,380 --> 00:07:12,090
have already adopted or in the process

00:07:09,270 --> 00:07:16,560
of adopting adopting tough today which

00:07:12,090 --> 00:07:18,870
brings me to notary which is a open

00:07:16,560 --> 00:07:22,710
source project from docker that

00:07:18,870 --> 00:07:24,780
implements the tough specification it's

00:07:22,710 --> 00:07:27,000
open source on github here there today

00:07:24,780 --> 00:07:29,190
it's written and go you get a

00:07:27,000 --> 00:07:31,200
command-line interface a couple of micro

00:07:29,190 --> 00:07:34,380
services for the server-side operations

00:07:31,200 --> 00:07:38,040
of signing and holding data and you have

00:07:34,380 --> 00:07:39,120
a robust library to integrate with many

00:07:38,040 --> 00:07:41,460
of you might many of you might already

00:07:39,120 --> 00:07:43,740
know about notary as notary it's been at

00:07:41,460 --> 00:07:45,450
the forefront of container image

00:07:43,740 --> 00:07:48,780
provenance so understanding where an

00:07:45,450 --> 00:07:49,560
image comes from is it trusted but for

00:07:48,780 --> 00:07:51,150
those of you who aren't too familiar

00:07:49,560 --> 00:07:56,280
with image provenance I'd like to draw

00:07:51,150 --> 00:07:58,560
an analogy to normal PDF JPEG images

00:07:56,280 --> 00:08:02,580
especially in the Photoshop world we

00:07:58,560 --> 00:08:04,560
live in so for example this is not a

00:08:02,580 --> 00:08:07,800
real image right like you could in some

00:08:04,560 --> 00:08:09,150
parts of the world penguins do go and go

00:08:07,800 --> 00:08:12,990
to the beach but you're not gonna see

00:08:09,150 --> 00:08:15,560
one drinking a tropical drink sunbathing

00:08:12,990 --> 00:08:18,300
and wearing some flowers and a hammock

00:08:15,560 --> 00:08:19,890
you're more likely to see something like

00:08:18,300 --> 00:08:22,110
this and you'd expect me like this

00:08:19,890 --> 00:08:24,270
to be a real image so in the same way

00:08:22,110 --> 00:08:28,740
that you'd want to expect real images

00:08:24,270 --> 00:08:30,720
for photos you want to expect that your

00:08:28,740 --> 00:08:32,430
containers are untampered with and

00:08:30,720 --> 00:08:34,700
trusted you want image provenance you

00:08:32,430 --> 00:08:37,560
want to know that the same developer or

00:08:34,700 --> 00:08:39,060
person who wrote the code for this image

00:08:37,560 --> 00:08:41,550
and packaged the image and pushed it is

00:08:39,060 --> 00:08:43,349
the that same image is the one that

00:08:41,550 --> 00:08:45,450
you're downloading and deploying your

00:08:43,349 --> 00:08:47,670
infrastructure and so notary by

00:08:45,450 --> 00:08:48,190
implementing the tough spec gives you

00:08:47,670 --> 00:08:49,690
all of the

00:08:48,190 --> 00:08:52,240
great guarantees of freshness

00:08:49,690 --> 00:08:54,610
authenticity integrity he compromised

00:08:52,240 --> 00:08:56,260
that survivable and allows you to apply

00:08:54,610 --> 00:08:58,690
it to your doctor containers and other

00:08:56,260 --> 00:09:00,490
containers and with notary I shouldn't

00:08:58,690 --> 00:09:02,340
go one step further and have a

00:09:00,490 --> 00:09:05,220
cryptographic chain-of-custody

00:09:02,340 --> 00:09:08,470
what I mean by this is that you can

00:09:05,220 --> 00:09:11,530
mandate cryptographically by requiring

00:09:08,470 --> 00:09:15,790
signatures at each stage of your CI CD

00:09:11,530 --> 00:09:18,400
pipeline did my image pass see I did my

00:09:15,790 --> 00:09:20,590
image get security scan did my image

00:09:18,400 --> 00:09:22,810
successfully deployed to development and

00:09:20,590 --> 00:09:25,480
pass test there and before deploying to

00:09:22,810 --> 00:09:27,400
production you can check and verify each

00:09:25,480 --> 00:09:29,560
of these signatures and mandate that

00:09:27,400 --> 00:09:31,410
they exist before your containers

00:09:29,560 --> 00:09:34,260
deployed in your production environment

00:09:31,410 --> 00:09:37,540
so notary and tough are very powerful

00:09:34,260 --> 00:09:40,650
notary has been adopted by as well on

00:09:37,540 --> 00:09:45,370
many platforms including docker core OS

00:09:40,650 --> 00:09:47,920
VMware Linux kits and many others so I'd

00:09:45,370 --> 00:09:50,860
ask you to please join us both projects

00:09:47,920 --> 00:09:53,290
are open source on the tough side the

00:09:50,860 --> 00:09:54,670
spec is a living spec so there are

00:09:53,290 --> 00:09:56,980
operation proposals where you can

00:09:54,670 --> 00:09:59,920
propose new additions to the spec and

00:09:56,980 --> 00:10:02,230
edits called taps and the notary we're

00:09:59,920 --> 00:10:05,890
approaching 1.0 and thinking about

00:10:02,230 --> 00:10:07,240
signing service specs pod specs and many

00:10:05,890 --> 00:10:09,460
other features so we invite you to come

00:10:07,240 --> 00:10:12,450
join us and with that I like to invite

00:10:09,460 --> 00:10:12,450
Chris back up on stage

00:10:17,180 --> 00:10:26,040
Thank You Ria's projects and we've added

00:10:22,620 --> 00:10:29,580
both notary and tough to the landscape

00:10:26,040 --> 00:10:31,680
so Thank You Ria's for your time and you

00:10:29,580 --> 00:10:33,810
know just a final kind of notice and

00:10:31,680 --> 00:10:35,970
shout out for the audience is we're

00:10:33,810 --> 00:10:37,830
hosting cube con cloud native con in

00:10:35,970 --> 00:10:39,649
Austin in a little less than a couple

00:10:37,830 --> 00:10:42,060
months now so if you're interested in

00:10:39,649 --> 00:10:43,649
meeting the cloud Native community and

00:10:42,060 --> 00:10:46,370
and you know working with our projects

00:10:43,649 --> 00:10:48,450
please make your way to Austin and

00:10:46,370 --> 00:10:51,120
attend the conference and we'll be back

00:10:48,450 --> 00:10:52,980
in Europe in May in Copenhagen but thank

00:10:51,120 --> 00:10:55,460
you for your time and I'm gonna hand it

00:10:52,980 --> 00:10:59,979
back to the gym to steer us forward

00:10:55,460 --> 00:10:59,979

YouTube URL: https://www.youtube.com/watch?v=ZS-mSwv5CoU


