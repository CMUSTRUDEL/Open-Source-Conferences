Title: How to Combine Debian and Yocto Bitbake? - Manuel Traut, Linutronix GmbH
Publication date: 2017-10-25
Playlist: Open Source Summit Europe & Embedded Linux Conference Europe 2017
Description: 
	How to Combine Debian and Yocto/Bitbake? - Manuel Traut, Linutronix GmbH

Debian is popular for its stability and security. ELBE utilizes Debian to create system images from Debian binary packages and supports building modified Debian source packages. This allows automated monitoring for security updates, which becomes more and more important.

ELBE has its shortcomings vs. yocto/bitbake. Building root file systems for an architecture unsupported by Debian or variant management beyond the selection of packages, e.g. applying patches depending on the target, is not supported.

Yocto/bitbake main focus is on that flexibility for the price of maintenance, security and bugfix tracking of all upstream packages. So utilizing Debian sources as base for bitbake might combine the best of both worlds.

This talk looks at various efforts, like meta-isar and meta-debian, which combine yocto/bitbake, Debian and ELBE. New ideas and possible solutions are shown.

About Manuel Traut
Manuel works as Software Specialist at Linutronix GmbH since 2007. Over the years he gained experience in building Linux BSPs with different methods and toolkits. With this knowledge in mind he currently maintains the embedded linux build environment (ELBE http://elbe-rfs.org). ELBE reuses as much as possible from the Debian project. He regularly acts as Trainer for various embedded Linux topics (Yocto, Debian, Kernel Development, ..) and has given Linux related talks at RTLWS, LinuxTag and Chemnitzer Linuxtage and Embedded Linux Conference Europe.
Captions: 
	00:00:00,000 --> 00:00:08,639
hello my name is Manuel clout I'm from

00:00:03,389 --> 00:00:11,550
lino Tronics and I did a lot of stuff in

00:00:08,639 --> 00:00:15,059
the area of Debian based build systems

00:00:11,550 --> 00:00:19,560
and Yocto BSP over the last couple of

00:00:15,059 --> 00:00:23,760
years and I learned both sides of the

00:00:19,560 --> 00:00:26,609
world have their pros and their cons and

00:00:23,760 --> 00:00:30,090
so I fought isn't there any possibility

00:00:26,609 --> 00:00:31,590
to combine those two worlds and this is

00:00:30,090 --> 00:00:35,460
something I wanted to talk with you

00:00:31,590 --> 00:00:38,820
today so what's next

00:00:35,460 --> 00:00:41,160
first I want you to show the reasons why

00:00:38,820 --> 00:00:44,010
people out they are using Yocto and why

00:00:41,160 --> 00:00:47,370
they like it then I want to talk about

00:00:44,010 --> 00:00:50,969
Debian and especially about Debian for

00:00:47,370 --> 00:00:53,789
embedded systems and then I will light

00:00:50,969 --> 00:00:58,590
out the benefits of a combination of

00:00:53,789 --> 00:01:00,690
these two worlds and because it's maybe

00:00:58,590 --> 00:01:03,570
a good combination

00:01:00,690 --> 00:01:05,220
there are already existing solutions out

00:01:03,570 --> 00:01:09,510
there in the field that combine those

00:01:05,220 --> 00:01:11,729
two techniques or frameworks or

00:01:09,510 --> 00:01:17,280
distributions or however you will call

00:01:11,729 --> 00:01:19,950
it and then I will give you idea about

00:01:17,280 --> 00:01:24,810
what's in my head about the perfect

00:01:19,950 --> 00:01:26,820
combination of those two words so let's

00:01:24,810 --> 00:01:30,810
talk about why we are using yoke two

00:01:26,820 --> 00:01:33,119
first let's see what's Yocto then have a

00:01:30,810 --> 00:01:40,820
look at the typical user Trafford and

00:01:33,119 --> 00:01:43,560
learn about the limitations so Yocto is

00:01:40,820 --> 00:01:47,640
basically tooling for building your own

00:01:43,560 --> 00:01:49,610
Linux distribution and your development

00:01:47,640 --> 00:01:55,229
environment for building applications

00:01:49,610 --> 00:01:58,890
for this new distribution you created so

00:01:55,229 --> 00:02:03,469
it defines a format for you that eases

00:01:58,890 --> 00:02:08,160
sharing your receives that extra

00:02:03,469 --> 00:02:10,830
packages and your content of your what

00:02:08,160 --> 00:02:12,210
support packages and your route file

00:02:10,830 --> 00:02:14,850
systems

00:02:12,210 --> 00:02:18,210
and this is quite a powerful format

00:02:14,850 --> 00:02:20,940
because you can just say okay I crapped

00:02:18,210 --> 00:02:24,810
some layer from my hardware vendor I

00:02:20,940 --> 00:02:27,390
used this one from my chip vendor and

00:02:24,810 --> 00:02:31,740
and I add my own layer and all those

00:02:27,390 --> 00:02:34,410
layer contain different receipts and you

00:02:31,740 --> 00:02:37,050
even have the possibility to overload

00:02:34,410 --> 00:02:39,540
receives that describe power certain

00:02:37,050 --> 00:02:43,320
software package is built in your own

00:02:39,540 --> 00:02:45,060
layer even if the package is described

00:02:43,320 --> 00:02:47,910
and for example the layer of your

00:02:45,060 --> 00:02:52,590
hardware vendor so it's also a big

00:02:47,910 --> 00:02:55,260
management tool and beside that you

00:02:52,590 --> 00:02:58,140
trust can do that for one BSP you can

00:02:55,260 --> 00:03:00,450
even do that for all your BSP in your

00:02:58,140 --> 00:03:03,210
company so if you have ten zimmel or

00:03:00,450 --> 00:03:05,700
beers piece for example for different

00:03:03,210 --> 00:03:07,950
types of hardware with one for example

00:03:05,700 --> 00:03:11,220
with large display and not a one with a

00:03:07,950 --> 00:03:13,590
smaller one and maybe one with the

00:03:11,220 --> 00:03:16,020
high-end application and one with some

00:03:13,590 --> 00:03:19,050
stripped-down application then you can

00:03:16,020 --> 00:03:21,480
build all those combination images and

00:03:19,050 --> 00:03:25,410
of course they they share a lot of

00:03:21,480 --> 00:03:27,780
receipts or packages with each other so

00:03:25,410 --> 00:03:32,460
you need to maintain this combined set

00:03:27,780 --> 00:03:34,800
of packages just once so all of that is

00:03:32,460 --> 00:03:38,970
based on a project called openembedded

00:03:34,800 --> 00:03:42,570
and the open embedded and the Yocto

00:03:38,970 --> 00:03:44,580
project is working closely together so

00:03:42,570 --> 00:03:46,980
if you have a look for example at the

00:03:44,580 --> 00:03:50,220
open and bad at Ritter repository and at

00:03:46,980 --> 00:03:52,140
the Pocky treat repository there is the

00:03:50,220 --> 00:03:54,540
example distribution of the Yocto

00:03:52,140 --> 00:03:56,280
project you will see that there are

00:03:54,540 --> 00:03:59,190
nearly the same commits in both

00:03:56,280 --> 00:04:01,640
repositories and there's just a merge of

00:03:59,190 --> 00:04:07,410
the pocky example distribution inside

00:04:01,640 --> 00:04:11,070
this treat repository so how do people

00:04:07,410 --> 00:04:14,130
typically use it they use the pokey

00:04:11,070 --> 00:04:16,650
example distribution then they add some

00:04:14,130 --> 00:04:19,470
meta layers from the chip or a hardware

00:04:16,650 --> 00:04:23,310
vendor maybe they add cert party layers

00:04:19,470 --> 00:04:25,230
for example for adding QT 5 and then

00:04:23,310 --> 00:04:25,950
they add on top their own layer

00:04:25,230 --> 00:04:28,350
the

00:04:25,950 --> 00:04:32,430
image customization the forceps for

00:04:28,350 --> 00:04:36,510
their own applications so basically it's

00:04:32,430 --> 00:04:39,900
a really nice thing but all nice things

00:04:36,510 --> 00:04:42,210
have limitations you know so what's the

00:04:39,900 --> 00:04:44,490
problem the problem is you basically

00:04:42,210 --> 00:04:47,000
build your own distribution so you need

00:04:44,490 --> 00:04:51,330
to maintain your own distribution and

00:04:47,000 --> 00:04:53,750
maintaining as a hard work you get those

00:04:51,330 --> 00:04:57,360
receipts from those different layers but

00:04:53,750 --> 00:04:59,310
you need to check are the patches

00:04:57,360 --> 00:05:01,830
applied I'd like to have under several

00:04:59,310 --> 00:05:05,190
software components are those layer

00:05:01,830 --> 00:05:10,050
compatible with each other because the

00:05:05,190 --> 00:05:12,090
bitbake build engine might be depend on

00:05:10,050 --> 00:05:14,310
the version of the receipts you use and

00:05:12,090 --> 00:05:16,710
so on so and then you have for example

00:05:14,310 --> 00:05:19,020
three layers one is available for the

00:05:16,710 --> 00:05:20,670
multi release not a 40 crore got release

00:05:19,020 --> 00:05:23,160
and then you need to combine them and

00:05:20,670 --> 00:05:25,130
then you need to really to do some work

00:05:23,160 --> 00:05:29,100
to get your distribution compiling

00:05:25,130 --> 00:05:31,290
working and if this all works then you

00:05:29,100 --> 00:05:33,330
go to the maintenance part of your

00:05:31,290 --> 00:05:38,040
distribution so you need to track it are

00:05:33,330 --> 00:05:40,860
there security updates and so on also

00:05:38,040 --> 00:05:43,230
the quality of the receipts is quite

00:05:40,860 --> 00:05:45,540
hard to verify so you of course there

00:05:43,230 --> 00:05:48,480
are a lot of layers outside internet but

00:05:45,540 --> 00:05:51,300
if I integrate them into my project I

00:05:48,480 --> 00:05:53,250
need to review do those receipts I need

00:05:51,300 --> 00:05:57,360
to check what Patras do they apply is

00:05:53,250 --> 00:06:01,530
this okay for me so there's some work to

00:05:57,360 --> 00:06:04,680
do other there is no long-term support

00:06:01,530 --> 00:06:07,290
district example distribution available

00:06:04,680 --> 00:06:11,820
so if you use for example the

00:06:07,290 --> 00:06:16,260
receipts that they maintain the current

00:06:11,820 --> 00:06:18,450
and the last branch but if you need

00:06:16,260 --> 00:06:24,180
longer support you need to upgrade all

00:06:18,450 --> 00:06:26,700
receipts also the usability is not

00:06:24,180 --> 00:06:30,320
completely given because you always have

00:06:26,700 --> 00:06:33,660
some small tools but you have them there

00:06:30,320 --> 00:06:36,780
that depend on your host machine so it

00:06:33,660 --> 00:06:40,200
might give different build results if

00:06:36,780 --> 00:06:43,710
you'd build on a different host machine

00:06:40,200 --> 00:06:47,340
so there are quite some limitations you

00:06:43,710 --> 00:06:49,860
need to self so some people think about

00:06:47,340 --> 00:06:52,020
oh there are other distributions out

00:06:49,860 --> 00:06:55,139
there they can do the work for me for

00:06:52,020 --> 00:06:58,770
creating a distribution and one example

00:06:55,139 --> 00:07:01,860
of those distributions is Debian so

00:06:58,770 --> 00:07:05,820
Debian is called the universal OS as

00:07:01,860 --> 00:07:08,460
well slogan and so you might ask is it

00:07:05,820 --> 00:07:12,120
that only Universal that I even can use

00:07:08,460 --> 00:07:14,640
it for embedded let's see then we will

00:07:12,120 --> 00:07:17,370
have a look at the usage of Debian for

00:07:14,640 --> 00:07:21,150
embedded projects we will have a look at

00:07:17,370 --> 00:07:24,419
of course even Debian has limitations so

00:07:21,150 --> 00:07:26,760
let's see what they are and some of

00:07:24,419 --> 00:07:29,880
those limitations we at Lineartronic

00:07:26,760 --> 00:07:32,729
strive to solve their for tool called lb

00:07:29,880 --> 00:07:35,520
and I want to explain you some words

00:07:32,729 --> 00:07:43,590
about what lb is doing and how it can

00:07:35,520 --> 00:07:46,410
help you so the universal OS is in the

00:07:43,590 --> 00:07:50,220
end more than a pure operating system

00:07:46,410 --> 00:07:52,590
because it comes with over 51,000 open

00:07:50,220 --> 00:07:55,460
source packages pre-packed in a binary

00:07:52,590 --> 00:07:58,440
format for different architectures and

00:07:55,460 --> 00:08:01,289
also the whole infrastructure of this

00:07:58,440 --> 00:08:04,200
operating system the documentation and

00:08:01,289 --> 00:08:07,320
to build tools are available as open

00:08:04,200 --> 00:08:09,750
source so if you want you can set up an

00:08:07,320 --> 00:08:12,990
environment in your own company in your

00:08:09,750 --> 00:08:16,650
lab to rebuild everything from scratch

00:08:12,990 --> 00:08:18,500
its documented and it's available as

00:08:16,650 --> 00:08:21,240
open source

00:08:18,500 --> 00:08:23,760
another thing is Debian take security

00:08:21,240 --> 00:08:26,940
very seriously so you have Update

00:08:23,760 --> 00:08:30,390
channels for the current stable and the

00:08:26,940 --> 00:08:34,770
old stable release of Debian that covers

00:08:30,390 --> 00:08:40,159
about until 6 years of security updates

00:08:34,770 --> 00:08:42,330
and many of those security updates are

00:08:40,159 --> 00:08:45,360
coordinated with other free software

00:08:42,330 --> 00:08:46,440
vendors liked redhead Ubuntu and so on

00:08:45,360 --> 00:08:49,200
and zooty

00:08:46,440 --> 00:08:52,800
and they are published at the same day

00:08:49,200 --> 00:08:54,850
ever linear ability is made public so

00:08:52,800 --> 00:08:56,920
basically if you maintain your own

00:08:54,850 --> 00:08:59,740
distribution than the day the villain

00:08:56,920 --> 00:09:01,720
their ability is made public as the day

00:08:59,740 --> 00:09:04,089
you can start working on a security

00:09:01,720 --> 00:09:07,690
issue and this is time if you use of one

00:09:04,089 --> 00:09:10,180
of those big distros you have the the

00:09:07,690 --> 00:09:14,319
package by package binary package

00:09:10,180 --> 00:09:18,310
available so is it possible to use

00:09:14,319 --> 00:09:21,160
Debian in embedded systems so basically

00:09:18,310 --> 00:09:24,730
it is you have packages available for a

00:09:21,160 --> 00:09:26,860
lot of different architectures there are

00:09:24,730 --> 00:09:30,880
cross two trains availables and stretch

00:09:26,860 --> 00:09:35,380
for different architectures so yeah you

00:09:30,880 --> 00:09:37,569
might use it so for example in the last

00:09:35,380 --> 00:09:40,089
talk about the civil infrastructure

00:09:37,569 --> 00:09:43,360
project these are the commitment that

00:09:40,089 --> 00:09:47,889
they want to use Debian as a source for

00:09:43,360 --> 00:09:49,690
their distribution so there are even

00:09:47,889 --> 00:09:54,370
other people's that think about using

00:09:49,690 --> 00:09:57,670
Debian in the embedded word and the

00:09:54,370 --> 00:10:00,279
usage is typically if you want to use

00:09:57,670 --> 00:10:05,620
the binary Debian distribution you use

00:10:00,279 --> 00:10:09,490
bootstrap to get embedded root

00:10:05,620 --> 00:10:12,189
filesystem for example for arm bootstrap

00:10:09,490 --> 00:10:17,889
into a single district directory of your

00:10:12,189 --> 00:10:20,620
computer then you can might use tools

00:10:17,889 --> 00:10:25,300
like the package build a pea builder or

00:10:20,620 --> 00:10:27,880
s build and cross compiler or qmue

00:10:25,300 --> 00:10:31,360
emulate compiler to build your own

00:10:27,880 --> 00:10:34,839
application inside this root filesystem

00:10:31,360 --> 00:10:37,839
directory after that you typically

00:10:34,839 --> 00:10:41,139
remove all those unneeded files like man

00:10:37,839 --> 00:10:43,120
pagers internationalization and so on to

00:10:41,139 --> 00:10:46,540
get your embedded system even smaller

00:10:43,120 --> 00:10:49,930
and then you build some file system

00:10:46,540 --> 00:10:51,910
images for extended fear force for UV

00:10:49,930 --> 00:10:54,880
and so on whatever you need on your

00:10:51,910 --> 00:10:57,339
target and then you have to drop to

00:10:54,880 --> 00:11:00,310
extract all those license informations

00:10:57,339 --> 00:11:03,189
and we drive to source code of all your

00:11:00,310 --> 00:11:05,059
packages you used in your embedded

00:11:03,189 --> 00:11:15,089
architecture

00:11:05,059 --> 00:11:16,860
to publish it to your consumers so what

00:11:15,089 --> 00:11:20,489
are the limitations if you want to use

00:11:16,860 --> 00:11:22,949
Debian in um better product you have

00:11:20,489 --> 00:11:25,110
only a limited number of hardware

00:11:22,949 --> 00:11:28,499
architectures supported as I described

00:11:25,110 --> 00:11:30,629
to lights before so if you have another

00:11:28,499 --> 00:11:34,829
architecture that is not listed there

00:11:30,629 --> 00:11:37,920
you would need to bootstrap debian from

00:11:34,829 --> 00:11:43,319
sources and this is something we talk

00:11:37,920 --> 00:11:46,939
later about also there are no Hardware

00:11:43,319 --> 00:11:50,279
specific binary packages available for

00:11:46,939 --> 00:11:53,189
for debian so for example if you have

00:11:50,279 --> 00:11:55,439
our tree streamer blogging for imx6 you

00:11:53,189 --> 00:11:58,199
don't get a binary package you need to

00:11:55,439 --> 00:12:01,170
build it by yourself you need to do

00:11:58,199 --> 00:12:04,860
those file system and ubi and so on

00:12:01,170 --> 00:12:07,319
image generation by yourself even you

00:12:04,860 --> 00:12:09,899
need to generate the SDK yourself you

00:12:07,319 --> 00:12:12,089
get to two chains you have multi our

00:12:09,899 --> 00:12:15,059
support and stretch that you can cross

00:12:12,089 --> 00:12:17,160
compile on your PC for arm but if you

00:12:15,059 --> 00:12:19,649
want to ensure that you have exact the

00:12:17,160 --> 00:12:21,720
same versions of libraries in your tool

00:12:19,649 --> 00:12:25,799
chain if you have an additional effort

00:12:21,720 --> 00:12:28,110
to do another thing else reducing the

00:12:25,799 --> 00:12:31,740
image footprint you need to purge maybe

00:12:28,110 --> 00:12:34,740
central packages out and so on and then

00:12:31,740 --> 00:12:37,889
the integration of your own application

00:12:34,740 --> 00:12:41,519
needs to be done somehow so you need

00:12:37,889 --> 00:12:45,420
some tooling maybe around Debian that

00:12:41,519 --> 00:12:47,669
solves those issues and this is the

00:12:45,420 --> 00:12:52,619
place where before about developing

00:12:47,669 --> 00:12:56,579
something called Fe so this goes back

00:12:52,619 --> 00:12:58,980
until 2007 as we had to first ID using

00:12:56,579 --> 00:13:01,649
Debian and embedded and have some

00:12:58,980 --> 00:13:05,189
tooling around it and what we have at

00:13:01,649 --> 00:13:07,649
the moment else we describe our board

00:13:05,189 --> 00:13:11,249
Support Package enzyme kind of XML five

00:13:07,649 --> 00:13:14,639
everything what is the result so do you

00:13:11,249 --> 00:13:18,750
want ubi MHS or extended for disk

00:13:14,639 --> 00:13:20,760
imagers SD card images and so on

00:13:18,750 --> 00:13:22,890
we described what packages do you want

00:13:20,760 --> 00:13:24,780
to have what are the fine tuning rules

00:13:22,890 --> 00:13:27,870
that should be applied after the root

00:13:24,780 --> 00:13:30,600
file system is generated and so on and

00:13:27,870 --> 00:13:32,790
then we put this in something this is

00:13:30,600 --> 00:13:36,840
also automatically generated by l.b

00:13:32,790 --> 00:13:38,900
called lb you need we am a virtual

00:13:36,840 --> 00:13:43,110
machine that ensures that everything

00:13:38,900 --> 00:13:46,050
happens reproducible so we push the elbe

00:13:43,110 --> 00:13:49,920
xml into this virtual machine Darren's

00:13:46,050 --> 00:13:52,620
an lb daemon that builds our images that

00:13:49,920 --> 00:13:55,200
extracts the license information that

00:13:52,620 --> 00:13:57,510
creates our source code CD that we need

00:13:55,200 --> 00:14:00,480
to give to our customers containing all

00:13:57,510 --> 00:14:04,470
those source code I would used inside

00:14:00,480 --> 00:14:07,260
our BSP and it generates for example

00:14:04,470 --> 00:14:11,730
Asus root that you can add to any tool

00:14:07,260 --> 00:14:14,730
chain to build your application against

00:14:11,730 --> 00:14:17,160
this image and it generates a rebuild CD

00:14:14,730 --> 00:14:19,560
containing all Debian binary packages

00:14:17,160 --> 00:14:23,160
that were used to generate the virtual

00:14:19,560 --> 00:14:24,300
machine and your BSP so you can just say

00:14:23,160 --> 00:14:26,790
lb

00:14:24,300 --> 00:14:29,250
create and gift is either image and it

00:14:26,790 --> 00:14:31,440
builds all the environment up again so

00:14:29,250 --> 00:14:34,710
you can catch up in a couple of years

00:14:31,440 --> 00:14:37,350
with the development although the

00:14:34,710 --> 00:14:41,160
virtual machine has included a P builder

00:14:37,350 --> 00:14:44,760
and the P builder is generated out of

00:14:41,160 --> 00:14:46,800
the LB XML file so it is ensured that

00:14:44,760 --> 00:14:49,380
you have a package builder inside there

00:14:46,800 --> 00:14:53,670
that is able to generate Debian packages

00:14:49,380 --> 00:14:56,250
exactly for your target image and you

00:14:53,670 --> 00:14:59,150
can give any Debian eyes two sources

00:14:56,250 --> 00:15:05,610
into this package builder and comes out

00:14:59,150 --> 00:15:08,220
debian binary package so once again what

00:15:05,610 --> 00:15:11,610
are the limitations using Debian if you

00:15:08,220 --> 00:15:15,030
use lb and Debian combined so we have

00:15:11,610 --> 00:15:18,330
all those topics below that we can do

00:15:15,030 --> 00:15:20,190
with lb but still we have only limited

00:15:18,330 --> 00:15:25,920
number of hardware architectures

00:15:20,190 --> 00:15:28,680
supported we are now able to build

00:15:25,920 --> 00:15:30,630
packages like tree streamer block ends

00:15:28,680 --> 00:15:32,670
from source but still there are no

00:15:30,630 --> 00:15:34,500
binaries available for that

00:15:32,670 --> 00:15:38,000
because we also don't to a distribution

00:15:34,500 --> 00:15:48,440
we just give a built environment to you

00:15:38,000 --> 00:15:51,240
so I'll be limited limits the way I so

00:15:48,440 --> 00:15:52,920
what would be the benefit of a

00:15:51,240 --> 00:16:00,180
combination of using

00:15:52,920 --> 00:16:04,200
Yocto and Debian so my my thing else

00:16:00,180 --> 00:16:06,720
they are quite a something some stuff

00:16:04,200 --> 00:16:10,050
that's good in your toe for example the

00:16:06,720 --> 00:16:13,500
task scheduling so even if you use Elbe

00:16:10,050 --> 00:16:16,380
to build your source packages with the P

00:16:13,500 --> 00:16:18,720
builder you need to note the order which

00:16:16,380 --> 00:16:21,480
package build first which next if you

00:16:18,720 --> 00:16:23,880
just change one package okay what are

00:16:21,480 --> 00:16:26,400
all the dependencies that I need to

00:16:23,880 --> 00:16:28,710
rebuild and so on and therefore Yocto is

00:16:26,400 --> 00:16:32,130
really create or bitbake because you can

00:16:28,710 --> 00:16:34,620
model those dependencies so task

00:16:32,130 --> 00:16:38,160
scheduling it's really good in your -

00:16:34,620 --> 00:16:39,570
I'd like that to have in Debian for

00:16:38,160 --> 00:16:42,900
building an embedded root filesystem

00:16:39,570 --> 00:16:47,970
image also the configuration management

00:16:42,900 --> 00:16:50,700
if I have a few similar boards I need to

00:16:47,970 --> 00:16:53,520
have several shell scripts or stuff like

00:16:50,700 --> 00:16:56,220
that that generates the images for the

00:16:53,520 --> 00:16:59,400
different targets even if you use LV you

00:16:56,220 --> 00:17:01,020
need one XML file for each target and if

00:16:59,400 --> 00:17:03,930
they share a lot you need to maintain

00:17:01,020 --> 00:17:08,930
all those things in five different XML

00:17:03,930 --> 00:17:12,120
files so that's also not a limitation

00:17:08,930 --> 00:17:15,630
then I'd like to cross compile from

00:17:12,120 --> 00:17:17,550
source why cross compile might be

00:17:15,630 --> 00:17:20,460
interesting for really big frameworks

00:17:17,550 --> 00:17:23,340
for example if he built QT we have

00:17:20,460 --> 00:17:27,090
really big machines with 100 plus cross

00:17:23,340 --> 00:17:29,130
but if we built QT and a qmo emulator it

00:17:27,090 --> 00:17:31,800
takes a couple of hours until it's

00:17:29,130 --> 00:17:34,680
finished if use across compile it's done

00:17:31,800 --> 00:17:37,500
in less than hour so often during

00:17:34,680 --> 00:17:41,790
development it is really interesting to

00:17:37,500 --> 00:17:44,730
have cross compile available although

00:17:41,790 --> 00:17:46,020
the SDK generation that I get across to

00:17:44,730 --> 00:17:48,780
a train for my applique

00:17:46,020 --> 00:17:52,740
developers is really helpful even the

00:17:48,780 --> 00:17:54,840
SDK generation into Eclipse where I say

00:17:52,740 --> 00:17:56,880
okay you have to set up file include

00:17:54,840 --> 00:17:59,250
this in ink lips and everything is set

00:17:56,880 --> 00:18:01,740
up correctly that you can start cross

00:17:59,250 --> 00:18:05,820
compiling in eclipse is a really cool

00:18:01,740 --> 00:18:08,340
thing in Yocto on the other hand I want

00:18:05,820 --> 00:18:10,380
to use some stuff from Debian so I want

00:18:08,340 --> 00:18:14,280
to use the well-maintained packages I

00:18:10,380 --> 00:18:16,170
want to use the security tracking I want

00:18:14,280 --> 00:18:19,050
to use the binary package whenever

00:18:16,170 --> 00:18:21,120
useful because they are they're the ones

00:18:19,050 --> 00:18:23,430
that get the most testing in the world

00:18:21,120 --> 00:18:26,790
because everybody uses the same binaries

00:18:23,430 --> 00:18:29,820
and I want to have the possibility to

00:18:26,790 --> 00:18:32,100
use the Debian sources if necessary so

00:18:29,820 --> 00:18:33,990
if I need to rebuild something with

00:18:32,100 --> 00:18:37,010
another configure option or I apply a

00:18:33,990 --> 00:18:42,750
patch I want to use the Debian sources

00:18:37,010 --> 00:18:45,720
if positive necessary so they are

00:18:42,750 --> 00:18:50,690
already existing solutions giving you

00:18:45,720 --> 00:18:54,480
this flexibility so we have layer a

00:18:50,690 --> 00:18:58,320
project called meta debian we have one

00:18:54,480 --> 00:19:01,920
called either and I trusted some kind of

00:18:58,320 --> 00:19:06,210
proof of concept act called Nita lb

00:19:01,920 --> 00:19:08,490
which is a layer that also can be

00:19:06,210 --> 00:19:13,410
included in New Yorker and uses Elvia

00:19:08,490 --> 00:19:16,020
spirit back and and these are the three

00:19:13,410 --> 00:19:19,980
things I want to introduce to you in the

00:19:16,020 --> 00:19:22,890
next couple of minutes and I have made a

00:19:19,980 --> 00:19:24,990
comparison table of these three tools

00:19:22,890 --> 00:19:30,750
what is possible with each tool and

00:19:24,990 --> 00:19:34,890
where are the limitations so I think the

00:19:30,750 --> 00:19:39,650
biggest project is called meta debian it

00:19:34,890 --> 00:19:42,480
has about 600 bitbake receives that uses

00:19:39,650 --> 00:19:47,160
debian source code from the chassis

00:19:42,480 --> 00:19:49,980
distribution and that uses optimized

00:19:47,160 --> 00:19:52,050
build rules for using those Debian

00:19:49,980 --> 00:19:54,930
packages in embedded systems so

00:19:52,050 --> 00:19:58,020
basically they use the options Fon depth

00:19:54,930 --> 00:19:59,399
from Debian rules or for configuring the

00:19:58,020 --> 00:20:01,499
packages what

00:19:59,399 --> 00:20:03,059
if it doesn't make sense for an embedded

00:20:01,499 --> 00:20:05,909
pro to prote

00:20:03,059 --> 00:20:09,479
to have this feature enabled they just

00:20:05,909 --> 00:20:12,469
disabled them to lower the dependencies

00:20:09,479 --> 00:20:17,879
between the packages to get smaller

00:20:12,469 --> 00:20:20,519
board support packages they also use a

00:20:17,879 --> 00:20:23,519
long term Linux kernel from the civil

00:20:20,519 --> 00:20:27,259
infrastructure platform project because

00:20:23,519 --> 00:20:30,779
one of the most goals of the CIP project

00:20:27,259 --> 00:20:32,999
which is using this method a beam layer

00:20:30,779 --> 00:20:38,849
is to have a really really long time

00:20:32,999 --> 00:20:40,889
support call and counted in decades not

00:20:38,849 --> 00:20:45,089
only in years

00:20:40,889 --> 00:20:48,210
it also supports generating an SDK and

00:20:45,089 --> 00:20:51,659
cross toolchain based on Debian sources

00:20:48,210 --> 00:20:55,879
and it's a very very active project it

00:20:51,659 --> 00:20:55,879
has about 2,000 commits on github

00:20:56,009 --> 00:21:02,009
but if you specify your own compile

00:20:59,999 --> 00:21:04,919
options and so on of course it's not

00:21:02,009 --> 00:21:09,119
compatible with those existing Debian

00:21:04,919 --> 00:21:14,729
binary packages so if you modify those

00:21:09,119 --> 00:21:16,710
pack use those modified packages with

00:21:14,729 --> 00:21:18,839
different rural settings and so then in

00:21:16,710 --> 00:21:21,629
Debian and other compiler settings than

00:21:18,839 --> 00:21:24,149
in Debian and then you're not comparable

00:21:21,629 --> 00:21:29,369
so you can't install some packages from

00:21:24,149 --> 00:21:33,210
meter Davian others from Debian another

00:21:29,369 --> 00:21:36,029
project out there is called ISA either

00:21:33,210 --> 00:21:42,169
uses Debian binary packages from

00:21:36,029 --> 00:21:45,690
different Debian releases and it uses

00:21:42,169 --> 00:21:49,619
bitbake as a build engine and as a

00:21:45,690 --> 00:21:51,839
configuration tool and you have the

00:21:49,619 --> 00:21:56,009
option to even build Debian packages

00:21:51,839 --> 00:21:58,950
from source inside a change route and if

00:21:56,009 --> 00:22:01,289
you do it for foreign architecture so

00:21:58,950 --> 00:22:03,659
for example if you use Israel on a PC

00:22:01,289 --> 00:22:07,799
and you build for an armed target they

00:22:03,659 --> 00:22:11,190
use cue email user to emulate a target

00:22:07,799 --> 00:22:13,710
and to build your package natively

00:22:11,190 --> 00:22:17,730
but there are also some limitations

00:22:13,710 --> 00:22:20,010
there's a it needs sudo for several

00:22:17,730 --> 00:22:23,190
tasks that are executed so they

00:22:20,010 --> 00:22:25,380
recommend to use sudo bitbake image name

00:22:23,190 --> 00:22:28,800
and there's really happening a lot there

00:22:25,380 --> 00:22:32,400
so this is something people don't like

00:22:28,800 --> 00:22:36,180
on this thing then you have a default

00:22:32,400 --> 00:22:39,300
image size that s part 300 megabyte

00:22:36,180 --> 00:22:43,470
because it's just a debian essential so

00:22:39,300 --> 00:22:46,350
plus your extra packages and it's not

00:22:43,470 --> 00:22:53,340
that active so it just has about 100

00:22:46,350 --> 00:22:57,510
commits on github and so it it's nice it

00:22:53,340 --> 00:23:01,770
is a nice thing but I think we can more

00:22:57,510 --> 00:23:04,380
or less do the same with LV and so I

00:23:01,770 --> 00:23:06,900
thought about doing the same then these

00:23:04,380 --> 00:23:10,140
are tasks with LB by implementing

00:23:06,900 --> 00:23:12,510
something called Nita lb I called it and

00:23:10,140 --> 00:23:14,610
am because if you put those two

00:23:12,510 --> 00:23:17,820
characters very close together they look

00:23:14,610 --> 00:23:21,000
like ma'am and we are not really a meta

00:23:17,820 --> 00:23:24,420
layer like the other things because in

00:23:21,000 --> 00:23:26,220
our meat our non-nato lb layer we don't

00:23:24,420 --> 00:23:29,370
really have bitbake receipts for

00:23:26,220 --> 00:23:31,470
compiling packages from source we just

00:23:29,370 --> 00:23:34,020
have some kind of wrapping around

00:23:31,470 --> 00:23:38,490
bitbake to use it at scheduler as a

00:23:34,020 --> 00:23:42,090
scheduler to schedule drops in LB so

00:23:38,490 --> 00:23:45,590
this is just proof of concept AK with

00:23:42,090 --> 00:23:48,720
about nine commits on github from me and

00:23:45,590 --> 00:23:51,870
but it uses the LB project and every

00:23:48,720 --> 00:23:55,370
project also has like meta Debian about

00:23:51,870 --> 00:23:59,610
2,000 commits on github and is quite big

00:23:55,370 --> 00:24:03,870
I just tested it with stretc binary

00:23:59,610 --> 00:24:06,950
packages and um ha f hf but I think it

00:24:03,870 --> 00:24:12,870
should also work with other combinations

00:24:06,950 --> 00:24:15,480
I added the option to also build binary

00:24:12,870 --> 00:24:20,850
packages from Debian sauce packet res

00:24:15,480 --> 00:24:23,940
using the LBP builder and the output is

00:24:20,850 --> 00:24:24,780
signed debian repository containing all

00:24:23,940 --> 00:24:29,760
the self

00:24:24,780 --> 00:24:32,550
two packages and how we do that all is

00:24:29,760 --> 00:24:35,760
that bitbake generates an L vyx mail

00:24:32,550 --> 00:24:39,210
file describing your root filesystem and

00:24:35,760 --> 00:24:42,510
schedules lb image build traps and LBP

00:24:39,210 --> 00:24:48,060
builder chops inside this lb in it for

00:24:42,510 --> 00:24:52,440
EM so native e also generates license

00:24:48,060 --> 00:24:55,590
information and SDK generation is

00:24:52,440 --> 00:24:57,960
currently not implemented but it's quite

00:24:55,590 --> 00:25:00,030
easy to do because we can generate those

00:24:57,960 --> 00:25:05,190
sis routes for different tool chains

00:25:00,030 --> 00:25:09,330
with lb and then you can add them to any

00:25:05,190 --> 00:25:13,080
existing rhf or something like that to a

00:25:09,330 --> 00:25:15,870
chain so let's talk a bit about the

00:25:13,080 --> 00:25:18,570
architecture of this thing so i

00:25:15,870 --> 00:25:21,420
reimplemented a base BB class because

00:25:18,570 --> 00:25:27,420
it's something completely different and

00:25:21,420 --> 00:25:31,130
Yocto so I don't I need a known ordering

00:25:27,420 --> 00:25:34,950
of the tasks and so on then I have a

00:25:31,130 --> 00:25:39,030
task called every project BB class which

00:25:34,950 --> 00:25:42,450
just ensures that my project described

00:25:39,030 --> 00:25:46,500
by files like the machine config and my

00:25:42,450 --> 00:25:49,260
image definition is settled up inside in

00:25:46,500 --> 00:25:52,560
it for M and therefore I have a mecca

00:25:49,260 --> 00:25:55,530
template for the XML file that is filled

00:25:52,560 --> 00:25:59,190
in with those information all from the

00:25:55,530 --> 00:26:03,090
big configuration file and from the

00:25:59,190 --> 00:26:08,420
image file I also implemented a new

00:26:03,090 --> 00:26:11,790
image PP class receive and so my simple

00:26:08,420 --> 00:26:14,970
example image just as a inherit of this

00:26:11,790 --> 00:26:18,750
image BB classes and this trust builds

00:26:14,970 --> 00:26:21,960
also an XML file from the source Excel

00:26:18,750 --> 00:26:25,050
and puts it into the unit vom and

00:26:21,960 --> 00:26:28,620
triggers the image build then I have

00:26:25,050 --> 00:26:32,340
written a pbilic class which can be used

00:26:28,620 --> 00:26:35,160
to write your own receives like I showed

00:26:32,340 --> 00:26:37,410
in the extension layer for example you

00:26:35,160 --> 00:26:38,190
can have a simple bitbake receive like

00:26:37,410 --> 00:26:40,980
that

00:26:38,190 --> 00:26:44,519
containing the worry of your software

00:26:40,980 --> 00:26:47,100
and that trust inherits from P builder

00:26:44,519 --> 00:26:49,889
so you don't have to define any build

00:26:47,100 --> 00:26:52,679
rules for that and all that happens is

00:26:49,889 --> 00:26:55,799
that this project is put into the LVP

00:26:52,679 --> 00:26:58,500
builder and we use the Debian ization

00:26:55,799 --> 00:27:09,090
inside this project to build it from

00:26:58,500 --> 00:27:11,490
source so this is also quite nice then

00:27:09,090 --> 00:27:14,190
we have a machine configuration where

00:27:11,490 --> 00:27:17,940
you can specify the architecture and so

00:27:14,190 --> 00:27:20,879
on you want to use from Debian but of

00:27:17,940 --> 00:27:23,820
course also this has some limitations so

00:27:20,879 --> 00:27:26,220
we are still not able to build for an

00:27:23,820 --> 00:27:32,730
architecture that is not supported by

00:27:26,220 --> 00:27:35,789
Debian but on the other hand you have to

00:27:32,730 --> 00:27:39,240
say I think the same flexibility than in

00:27:35,789 --> 00:27:46,169
either so let's have a look at the table

00:27:39,240 --> 00:27:48,330
so we have three candidates here and of

00:27:46,169 --> 00:27:50,580
course they have two different goals

00:27:48,330 --> 00:27:52,830
they want to use Debian and embedded and

00:27:50,580 --> 00:27:56,490
though they have although a lot of

00:27:52,830 --> 00:27:58,730
similarities so all of these restore the

00:27:56,490 --> 00:28:02,909
octo style conflict management and app

00:27:58,730 --> 00:28:05,789
integration you have Hardware specific

00:28:02,909 --> 00:28:11,909
software like kernel and bootloader

00:28:05,789 --> 00:28:18,049
buildable in some way in this different

00:28:11,909 --> 00:28:20,129
approaches so meta Debian and either

00:28:18,049 --> 00:28:24,289
sorry either and naita

00:28:20,129 --> 00:28:27,360
lb to building it inside native qmo

00:28:24,289 --> 00:28:31,139
instance and meta a little bit does a

00:28:27,360 --> 00:28:34,409
cross compile of them so they support it

00:28:31,139 --> 00:28:37,200
but in different ways in all project you

00:28:34,409 --> 00:28:40,440
can use the Debian sources to build to

00:28:37,200 --> 00:28:44,909
rebuild it in meta Debian they are also

00:28:40,440 --> 00:28:47,970
cross build again the order to uses QM

00:28:44,909 --> 00:28:51,480
version so building here takes a bit

00:28:47,970 --> 00:28:52,110
longer but for example in Netta lb it's

00:28:51,480 --> 00:28:55,290
super

00:28:52,110 --> 00:28:58,799
producible because we always generate a

00:28:55,290 --> 00:29:01,410
a new change fruit install the build

00:28:58,799 --> 00:29:04,350
dependencies build a package there and

00:29:01,410 --> 00:29:06,840
extract the information in either we

00:29:04,350 --> 00:29:09,110
have a change route where all packages

00:29:06,840 --> 00:29:11,820
are built so maybe you get some

00:29:09,110 --> 00:29:15,270
influences of all package builds because

00:29:11,820 --> 00:29:17,670
they keep their their files there and

00:29:15,270 --> 00:29:20,309
then the new packages uploaded into the

00:29:17,670 --> 00:29:22,260
same root file system and built there so

00:29:20,309 --> 00:29:25,410
maybe you can forget some built-in

00:29:22,260 --> 00:29:27,860
tendencies to specify us and we'll work

00:29:25,410 --> 00:29:32,340
your knees are apart not in neat Iowa

00:29:27,860 --> 00:29:38,010
and in meta debian they trust support

00:29:32,340 --> 00:29:43,380
cross build thing so another thing is

00:29:38,010 --> 00:29:46,559
the default footprint it's the same for

00:29:43,380 --> 00:29:48,690
either and net I'll be basically because

00:29:46,559 --> 00:29:52,799
they use the same technique to generate

00:29:48,690 --> 00:29:56,250
a root filesystem naita lb doesn't

00:29:52,799 --> 00:30:00,480
support shrinking the root filesystem at

00:29:56,250 --> 00:30:04,080
the moment so we have lb fine-tuning to

00:30:00,480 --> 00:30:05,970
shrink it or lb copy modes but they are

00:30:04,080 --> 00:30:11,480
not implemented in Netta held at the

00:30:05,970 --> 00:30:14,820
moment either supports with the Yocto

00:30:11,480 --> 00:30:17,700
method so you can do something like to

00:30:14,820 --> 00:30:20,160
route image app and and remove some

00:30:17,700 --> 00:30:22,620
files this is not possible in Nanterre

00:30:20,160 --> 00:30:26,520
because all the image generation is done

00:30:22,620 --> 00:30:28,980
inside lb and the default footprint of

00:30:26,520 --> 00:30:31,970
meta debian is already pretty small if

00:30:28,980 --> 00:30:31,970
it trust is built

00:30:32,400 --> 00:30:38,760
although the non debian are also meta

00:30:35,910 --> 00:30:41,429
debian is the only approach that allows

00:30:38,760 --> 00:30:45,240
us building non Debian architectures so

00:30:41,429 --> 00:30:50,340
you can basically bootstrap a new debian

00:30:45,240 --> 00:30:52,500
from sources with modified settings what

00:30:50,340 --> 00:31:01,980
is not possible with either and not

00:30:52,500 --> 00:31:05,670
possible with an entire be also of

00:31:01,980 --> 00:31:07,680
course using architecture not support

00:31:05,670 --> 00:31:10,970
Debian is the same thing yeah so it's

00:31:07,680 --> 00:31:14,760
also the same result

00:31:10,970 --> 00:31:17,160
damn you the next topic is about

00:31:14,760 --> 00:31:20,160
exporting the used source code so in

00:31:17,160 --> 00:31:22,980
meta Debian you have all the sources

00:31:20,160 --> 00:31:25,530
that are used during the build in the

00:31:22,980 --> 00:31:30,060
download directory like in Yocto and you

00:31:25,530 --> 00:31:32,220
can redistribute them and Netta ever it

00:31:30,060 --> 00:31:35,460
would be easy to develop because the

00:31:32,220 --> 00:31:38,160
source cd-rom is a can be generated by

00:31:35,460 --> 00:31:41,010
l.b I just didn't activate this feature

00:31:38,160 --> 00:31:43,110
at the moment to increased built to

00:31:41,010 --> 00:31:45,570
decrease the build time but it could be

00:31:43,110 --> 00:31:48,930
make optional that for release builds

00:31:45,570 --> 00:31:53,310
for example the CD is generated in

00:31:48,930 --> 00:31:56,190
either we need as far as I have seen to

00:31:53,310 --> 00:31:59,220
add some code that looks which binary

00:31:56,190 --> 00:32:02,910
packages were used and download the

00:31:59,220 --> 00:32:08,400
source code but this is also possible to

00:32:02,910 --> 00:32:13,320
implement them we have those Yocto style

00:32:08,400 --> 00:32:15,210
SDKs using course to change as explained

00:32:13,320 --> 00:32:17,100
that can be added to eclipse or

00:32:15,210 --> 00:32:20,250
something like that for cross compiling

00:32:17,100 --> 00:32:23,250
your application this is generated with

00:32:20,250 --> 00:32:25,380
meta debian not generate bull with

00:32:23,250 --> 00:32:27,690
either because they say everything

00:32:25,380 --> 00:32:31,380
should be built inside our change hood

00:32:27,690 --> 00:32:33,780
with native qmo and it would be easy to

00:32:31,380 --> 00:32:37,890
develop with meta lb because basically

00:32:33,780 --> 00:32:40,200
lb has this support also generating

00:32:37,890 --> 00:32:43,770
license informations is available in

00:32:40,200 --> 00:32:46,140
meta a lb in meta debian they generate a

00:32:43,770 --> 00:32:49,200
CSV file containing all license

00:32:46,140 --> 00:32:52,560
informations either doesn't have this

00:32:49,200 --> 00:32:54,780
point and in Netta lb and nick sumela

00:32:52,560 --> 00:32:57,330
file and a plain text files generated

00:32:54,780 --> 00:33:02,430
containing the license informations from

00:32:57,330 --> 00:33:05,700
debian so the next thing that is

00:33:02,430 --> 00:33:08,280
interesting is reproducibility so how

00:33:05,700 --> 00:33:13,340
can i build the same image again after a

00:33:08,280 --> 00:33:17,010
couple of years the meta debian people

00:33:13,340 --> 00:33:19,410
did a quite clever concept is that every

00:33:17,010 --> 00:33:22,830
debian sauce package need to be in a kit

00:33:19,410 --> 00:33:25,470
repository therefore they have a docker

00:33:22,830 --> 00:33:28,260
container I think that can be used to

00:33:25,470 --> 00:33:30,120
clone all the reference get Debian

00:33:28,260 --> 00:33:33,330
packages into git repositories

00:33:30,120 --> 00:33:36,450
automatically and on each build they

00:33:33,330 --> 00:33:39,330
tack the version they have built inside

00:33:36,450 --> 00:33:41,220
each package git repository and then if

00:33:39,330 --> 00:33:44,970
I want to rebuild a certain version I

00:33:41,220 --> 00:33:49,220
can just specify this tack again all the

00:33:44,970 --> 00:33:52,200
versions are used as in the last build

00:33:49,220 --> 00:33:55,110
it's trust yellow because you still have

00:33:52,200 --> 00:33:57,780
this Yocto problems or if you're not

00:33:55,110 --> 00:34:03,570
running in a VM then you have to host

00:33:57,780 --> 00:34:07,770
dependencies and so on and either it's

00:34:03,570 --> 00:34:10,169
qua quite the same you it's not running

00:34:07,770 --> 00:34:12,929
in VMs or still you still have all those

00:34:10,169 --> 00:34:15,360
host dependencies containing key

00:34:12,929 --> 00:34:18,000
bootstrap for example because they call

00:34:15,360 --> 00:34:20,580
the bootstrap to to retrieve your

00:34:18,000 --> 00:34:22,860
packages and so on so you should put it

00:34:20,580 --> 00:34:25,470
into in 4m and use a snapshot for

00:34:22,860 --> 00:34:28,290
example for each build then it would be

00:34:25,470 --> 00:34:29,160
quite safe but then they have another

00:34:28,290 --> 00:34:31,380
problem

00:34:29,160 --> 00:34:33,320
it's the share change route they use for

00:34:31,380 --> 00:34:35,669
each package build so there's a

00:34:33,320 --> 00:34:40,200
dependency on the order you trigger the

00:34:35,669 --> 00:34:42,360
builds of your source packages with

00:34:40,200 --> 00:34:45,330
Netta LV you should be quite safe

00:34:42,360 --> 00:34:49,980
because everything is scheduled in a VM

00:34:45,330 --> 00:34:52,380
that it is reproducible and we use the

00:34:49,980 --> 00:34:55,800
Debian P builder that always starts with

00:34:52,380 --> 00:34:57,660
a new change route and Trust installs to

00:34:55,800 --> 00:35:03,560
build dependencies and builds your

00:34:57,660 --> 00:35:07,560
package another thing else you might

00:35:03,560 --> 00:35:09,870
think about is there are solutions where

00:35:07,560 --> 00:35:12,780
you need a bit big file per Debian

00:35:09,870 --> 00:35:15,480
source package this is given a meta

00:35:12,780 --> 00:35:17,940
Debian because there you need to specify

00:35:15,480 --> 00:35:20,820
all options needed for cross compiling

00:35:17,940 --> 00:35:24,120
the package and so on and this is not

00:35:20,820 --> 00:35:26,280
needed for is our Netta album because we

00:35:24,120 --> 00:35:30,350
used the informations from the Debian

00:35:26,280 --> 00:35:30,350
ization to rebuild the package

00:35:31,410 --> 00:35:39,600
another thing is using the Debian binary

00:35:33,690 --> 00:35:43,650
packages that is only safely possible

00:35:39,600 --> 00:35:47,430
with either and Netta lb and not

00:35:43,650 --> 00:35:49,800
possible with meta debian not a

00:35:47,430 --> 00:35:52,590
difference is number of available Debian

00:35:49,800 --> 00:35:54,810
packages because in meta Debian you need

00:35:52,590 --> 00:35:58,020
to write those bit big files for each

00:35:54,810 --> 00:36:00,650
debian sauce package has the number of

00:35:58,020 --> 00:36:04,410
packages available is limited to about

00:36:00,650 --> 00:36:07,890
600 sauce packages but remember out of a

00:36:04,410 --> 00:36:10,200
sauce packet they are generated multiple

00:36:07,890 --> 00:36:13,320
binary packages sometimes so it's not a

00:36:10,200 --> 00:36:15,900
number of binary packages here and I

00:36:13,320 --> 00:36:19,530
talked to them it should cover the most

00:36:15,900 --> 00:36:21,540
important proach packages for embedded

00:36:19,530 --> 00:36:23,460
Linux so they if they had a look at

00:36:21,540 --> 00:36:29,160
what's needed in embedded Linux and

00:36:23,460 --> 00:36:31,320
package those stuff primarily for

00:36:29,160 --> 00:36:35,600
Ethernet elbow of course you can use all

00:36:31,320 --> 00:36:39,330
the available Debian binary packages and

00:36:35,600 --> 00:36:42,150
in thing resulting out of that as the

00:36:39,330 --> 00:36:45,570
Ethernet needed to adapt to build system

00:36:42,150 --> 00:36:49,380
to new Debian release so if you want to

00:36:45,570 --> 00:36:51,930
use treci and code if you use treci and

00:36:49,380 --> 00:36:54,510
want to go to stretch for meta debian

00:36:51,930 --> 00:36:57,990
you need to adapt all those 600 bitbake

00:36:54,510 --> 00:37:00,960
receives or possibly most of them to

00:36:57,990 --> 00:37:03,630
work with the new release in either and

00:37:00,960 --> 00:37:05,820
nita lb it's basically for free because

00:37:03,630 --> 00:37:08,490
we trust' used to binary packages you

00:37:05,820 --> 00:37:15,690
don't you trust need to change the

00:37:08,490 --> 00:37:18,090
string and typically it works them so

00:37:15,690 --> 00:37:26,160
you see they are basically three

00:37:18,090 --> 00:37:30,390
solutions out there and but we have only

00:37:26,160 --> 00:37:33,180
two use cases so meta debian is good for

00:37:30,390 --> 00:37:37,170
architectures that are not available in

00:37:33,180 --> 00:37:38,880
Debian and Ethernet il we can only be

00:37:37,170 --> 00:37:41,670
used with architectures that are

00:37:38,880 --> 00:37:44,490
available in Debian so if you and need a

00:37:41,670 --> 00:37:46,830
special architecture special con file

00:37:44,490 --> 00:37:51,180
hila Fleck Mehta Debian is really

00:37:46,830 --> 00:37:53,760
interesting and Netta lb is in a

00:37:51,180 --> 00:37:56,330
proof-of-concept state but I think it's

00:37:53,760 --> 00:38:03,060
already very powerful because it used

00:37:56,330 --> 00:38:09,690
the established LB as a back-end and so

00:38:03,060 --> 00:38:11,869
I come to my personal wish list and then

00:38:09,690 --> 00:38:15,270
I will finish the conclusion and

00:38:11,869 --> 00:38:18,420
hopefully we have time to discuss some

00:38:15,270 --> 00:38:22,170
ideas maybe out outside done because we

00:38:18,420 --> 00:38:25,040
running quite out of time so there's a

00:38:22,170 --> 00:38:26,940
script in Debian Corddry bootstrap for

00:38:25,040 --> 00:38:29,400
bootstrapping complete Debian

00:38:26,940 --> 00:38:31,670
architectures I think we definitely

00:38:29,400 --> 00:38:35,190
should collaborate with this project

00:38:31,670 --> 00:38:37,320
because they already done a lot of work

00:38:35,190 --> 00:38:41,280
automating the bootstrapping work of

00:38:37,320 --> 00:38:43,650
Debian then we should support the multi

00:38:41,280 --> 00:38:47,820
art support for cross compiling any

00:38:43,650 --> 00:38:49,470
modified source package in Debian then

00:38:47,820 --> 00:38:53,520
we could also do this for self

00:38:49,470 --> 00:38:56,040
bootstrapped architectures and where

00:38:53,520 --> 00:38:58,440
possible we should allow a mixed usage

00:38:56,040 --> 00:39:00,869
of crossbell Debian packages via pit

00:38:58,440 --> 00:39:05,420
bake with the official Debian binary

00:39:00,869 --> 00:39:07,710
packages and I think we should have

00:39:05,420 --> 00:39:10,470
reproducible builds all over Debian

00:39:07,710 --> 00:39:13,580
there this is another project available

00:39:10,470 --> 00:39:15,990
in Debian that care about having

00:39:13,580 --> 00:39:18,240
reproducibility inside the package

00:39:15,990 --> 00:39:21,119
builds this is something that cares

00:39:18,240 --> 00:39:26,720
about time stamps amps and binaries and

00:39:21,119 --> 00:39:29,930
so on so I think we should continually

00:39:26,720 --> 00:39:33,450
try to reduce the number of existing

00:39:29,930 --> 00:39:37,170
tools in this field and we should

00:39:33,450 --> 00:39:40,260
collaborate here where possible my dream

00:39:37,170 --> 00:39:42,720
is having one layer that is able to

00:39:40,260 --> 00:39:45,150
cross build Debian to bootstrap to

00:39:42,720 --> 00:39:47,580
course build Debian packages to

00:39:45,150 --> 00:39:50,970
bootstrap debris and from source to

00:39:47,580 --> 00:39:53,340
allow using binary packages and to use

00:39:50,970 --> 00:39:56,840
something like P builder stuff to build

00:39:53,340 --> 00:39:56,840
it natively in QA mo

00:39:57,580 --> 00:40:02,800
also the the bootstrapping stuff might

00:40:00,280 --> 00:40:04,900
be interesting to port to bitbake

00:40:02,800 --> 00:40:09,220
because bit big is really good and this

00:40:04,900 --> 00:40:11,950
up I'm just started this discussion with

00:40:09,220 --> 00:40:15,280
the reboot strap guy who wrote the

00:40:11,950 --> 00:40:17,950
script if he could imagine porting this

00:40:15,280 --> 00:40:24,970
to something like bitbake what we are

00:40:17,950 --> 00:40:27,760
still in progress here and then it would

00:40:24,970 --> 00:40:32,800
be a really cool combination of Debian

00:40:27,760 --> 00:40:36,730
and Yocto so now I think we ran out of

00:40:32,800 --> 00:40:42,100
time so if you have any questions or

00:40:36,730 --> 00:40:46,210
ideas please let's meet just outside of

00:40:42,100 --> 00:40:50,080
the room so the slides are available on

00:40:46,210 --> 00:40:51,910
the download site of the Congress there

00:40:50,080 --> 00:40:54,840
are also all those references here

00:40:51,910 --> 00:40:57,250
available to the different projects and

00:40:54,840 --> 00:40:59,030
now I'd like to thank you for your

00:40:57,250 --> 00:41:05,339
attention

00:40:59,030 --> 00:41:05,339

YouTube URL: https://www.youtube.com/watch?v=AShznMqvBQo


