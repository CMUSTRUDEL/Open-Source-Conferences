Title: GStreamer for Tiny Devices -Olivier Crête, Collabora
Publication date: 2017-10-25
Playlist: Open Source Summit Europe & Embedded Linux Conference Europe 2017
Description: 
	GStreamer for Tiny Devices -Olivier Crête, Collabora

GStreamer is a complete Open Source multimedia framework, and it includes hundreds of plugins, including modern formats like DASH, HLS or the first ever RTSP 2.0 implementation. The whole framework is almost 150MB on my computer, but what if you only have 5 megs of flash available? Is it a viable choice? Yes it is, and I will show you how.

Starting with simple tricks like only including the necessary plugins, all the way to statically compiling only the functions that are actually used to produce the smaller possible footprint.

About Olivier Crête
Olivier Crête has been involved in free software since 2000. He has been involved in GNOME since 2003 and in Gentoo from 2003 to 2012. He currently works for Collabora, where he leads the multimedia team. He's been an active GStreamer developer since 2007, first working on VoIP and video calls, but lately he's been working on all kinds of embedded multimedia projects.
Captions: 
	00:00:00,030 --> 00:00:05,069
so my name is a diva kite and I'm going

00:00:02,790 --> 00:00:11,370
to talk to you about GStreamer for tiny

00:00:05,069 --> 00:00:13,920
devices gstreamer so who am i first I'm

00:00:11,370 --> 00:00:18,420
I've been working on the streamer since

00:00:13,920 --> 00:00:21,359
2007 at kelabra I spent the first five

00:00:18,420 --> 00:00:27,060
of those years doing VoIP

00:00:21,359 --> 00:00:29,220
so a voice and video over IP using if I

00:00:27,060 --> 00:00:31,109
build a framework off our stream that

00:00:29,220 --> 00:00:33,120
was built on GStreamer back in the day

00:00:31,109 --> 00:00:36,110
that kind of stuff we use telepathy

00:00:33,120 --> 00:00:39,000
which was it's a messaging framework and

00:00:36,110 --> 00:00:40,530
this is all in the past in the last

00:00:39,000 --> 00:00:42,120
couple years I've been focusing

00:00:40,530 --> 00:00:44,969
exclusively on this rumor and we've been

00:00:42,120 --> 00:00:47,520
helping our clients at kelabra do a lot

00:00:44,969 --> 00:00:49,860
of embedded projects using gstreamer and

00:00:47,520 --> 00:00:54,750
we gained probably the expertise to make

00:00:49,860 --> 00:00:55,520
it fit in the devices but first what's a

00:00:54,750 --> 00:00:59,760
tiny device

00:00:55,520 --> 00:01:03,329
it's a device which has a little flash

00:00:59,760 --> 00:01:09,270
storage maybe a slow CPU maybe little

00:01:03,329 --> 00:01:11,490
ram it's not a PC that's smaller so that

00:01:09,270 --> 00:01:13,070
was but small devices we all know what

00:01:11,490 --> 00:01:15,270
they are it's an embedded conference

00:01:13,070 --> 00:01:17,909
GStreamer I know how many of you here

00:01:15,270 --> 00:01:19,890
know gstreamer show of hands all right

00:01:17,909 --> 00:01:21,479
everyone knows gstreamer but I'm gonna

00:01:19,890 --> 00:01:25,350
do a short introduction first

00:01:21,479 --> 00:01:28,829
and so gstreamer is a complete

00:01:25,350 --> 00:01:30,750
multimedia framework that provides you

00:01:28,829 --> 00:01:34,350
with what you need to build applications

00:01:30,750 --> 00:01:37,020
that do media processing it has a core

00:01:34,350 --> 00:01:40,020
which is media agnostic which contains

00:01:37,020 --> 00:01:42,030
base classes which contains media type

00:01:40,020 --> 00:01:45,180
abstraction plug-in system data

00:01:42,030 --> 00:01:46,829
transport synchronization but the core

00:01:45,180 --> 00:01:49,140
doesn't know anything about audio or

00:01:46,829 --> 00:01:52,740
video so there are some people who use

00:01:49,140 --> 00:01:56,640
it for other kinds of streaming data for

00:01:52,740 --> 00:01:58,740
example Simon I like to plug the people

00:01:56,640 --> 00:02:01,829
who want the Nobel Prize in Physics this

00:01:58,740 --> 00:02:05,969
year they use gstreamer to process data

00:02:01,829 --> 00:02:08,520
from their experiments so this gstreamer

00:02:05,969 --> 00:02:11,039
core can load plugins that do actual

00:02:08,520 --> 00:02:13,310
useful things and these plugins come in

00:02:11,039 --> 00:02:16,610
all kinds of variants

00:02:13,310 --> 00:02:19,520
either protocol plugins that read from

00:02:16,610 --> 00:02:22,250
files read from network servers right to

00:02:19,520 --> 00:02:25,760
network servers to files etc all kinds

00:02:22,250 --> 00:02:30,739
of media specific sources audio video

00:02:25,760 --> 00:02:32,750
capture Network TCP UDP etc we have

00:02:30,739 --> 00:02:35,480
plugins that end all specific formats to

00:02:32,750 --> 00:02:38,989
create files or to parse them avi and

00:02:35,480 --> 00:02:42,050
before OGG WebM whichever is the format

00:02:38,989 --> 00:02:44,510
of the earth we obviously support codecs

00:02:42,050 --> 00:02:47,540
that plugins support basically every

00:02:44,510 --> 00:02:50,120
codec on the planet we have a bunch of

00:02:47,540 --> 00:02:51,739
filters that are that transform

00:02:50,120 --> 00:02:55,760
something into something similar but

00:02:51,739 --> 00:02:59,840
different resampler scaling images using

00:02:55,760 --> 00:03:02,599
either hardware or plain software and we

00:02:59,840 --> 00:03:05,870
have a bunch of sinks which display or

00:03:02,599 --> 00:03:09,470
output the media either to a network or

00:03:05,870 --> 00:03:12,799
to a file or to the screen or to the

00:03:09,470 --> 00:03:14,569
speakers so if you look at my slide this

00:03:12,799 --> 00:03:16,250
is a really old slide picture that I

00:03:14,569 --> 00:03:18,109
keep on using because the streamer has

00:03:16,250 --> 00:03:21,170
been along for a long long time and

00:03:18,109 --> 00:03:23,239
we've perfected it and we have a whole

00:03:21,170 --> 00:03:25,850
wealth of plugins to handle almost every

00:03:23,239 --> 00:03:28,090
use case and on top of that you can

00:03:25,850 --> 00:03:31,250
build applications these applications

00:03:28,090 --> 00:03:34,970
use this framework to use the plugins to

00:03:31,250 --> 00:03:37,370
actually do useful things so how do they

00:03:34,970 --> 00:03:39,739
do that they do that by having what we

00:03:37,370 --> 00:03:43,400
call a pipeline so a pipeline is a

00:03:39,739 --> 00:03:46,340
series of elements connected in a linear

00:03:43,400 --> 00:03:48,650
fashion to process the media so this is

00:03:46,340 --> 00:03:51,410
like a super super basic pipeline like a

00:03:48,650 --> 00:03:54,260
file source and mp3 decoder and also

00:03:51,410 --> 00:03:56,329
sing to output to their speakers like

00:03:54,260 --> 00:03:59,090
this is basically kind of the most basic

00:03:56,329 --> 00:04:00,500
pipeline and surprisingly a lot of em

00:03:59,090 --> 00:04:07,489
build pipelines are not more complicated

00:04:00,500 --> 00:04:09,620
than this applications talk to this

00:04:07,489 --> 00:04:12,200
pipeline so the pipeline often lives as

00:04:09,620 --> 00:04:13,459
its own thread that do all the media

00:04:12,200 --> 00:04:15,440
processing that's independent from the

00:04:13,459 --> 00:04:18,169
application and the application talks

00:04:15,440 --> 00:04:20,750
this Python using some api's some some

00:04:18,169 --> 00:04:22,940
metal calls some are sending evans

00:04:20,750 --> 00:04:25,580
making queries and they can also receive

00:04:22,940 --> 00:04:27,150
a synchronous messages and the pipeline

00:04:25,580 --> 00:04:29,250
will automatically end all different

00:04:27,150 --> 00:04:34,229
for you so the media synchronization

00:04:29,250 --> 00:04:35,520
that walking and it has states there's a

00:04:34,229 --> 00:04:37,259
pretty good documentation these days

00:04:35,520 --> 00:04:40,410
online so I'm not gonna spend too much

00:04:37,259 --> 00:04:42,320
time saying how to write the gstreamer

00:04:40,410 --> 00:04:48,020
application we have good tutorials

00:04:42,320 --> 00:04:50,030
that's a well covered topic so yes

00:04:48,020 --> 00:04:53,610
pipelines

00:04:50,030 --> 00:04:55,440
gstreamer it's really good for embedded

00:04:53,610 --> 00:04:57,030
we have a bunch of features that were

00:04:55,440 --> 00:05:02,190
really really designed for embedded in

00:04:57,030 --> 00:05:03,449
the last five six years the previous

00:05:02,190 --> 00:05:06,210
versions were very much designed for a

00:05:03,449 --> 00:05:08,580
PC and when we try to use an embedded we

00:05:06,210 --> 00:05:11,400
found problems we found issues and these

00:05:08,580 --> 00:05:13,740
were largely fixed in the dish room 1.0

00:05:11,400 --> 00:05:16,350
api where we changed a bunch of little

00:05:13,740 --> 00:05:18,990
things that made it a lot more easy on

00:05:16,350 --> 00:05:21,510
arm devices and the devices that have

00:05:18,990 --> 00:05:25,800
hardware support for different

00:05:21,510 --> 00:05:27,840
operations in particular destroyers

00:05:25,800 --> 00:05:30,330
everything you need to create a zero

00:05:27,840 --> 00:05:33,090
copy pipeline we have full negotiation

00:05:30,330 --> 00:05:36,240
not only of the media format but also of

00:05:33,090 --> 00:05:38,580
the allocation properties the stride the

00:05:36,240 --> 00:05:40,979
alignment if you need to use some kind

00:05:38,580 --> 00:05:43,650
of special memory or special memory

00:05:40,979 --> 00:05:45,630
layout that you can have different

00:05:43,650 --> 00:05:47,810
elements talk to each other and figure

00:05:45,630 --> 00:05:50,130
out a way that they are compatible

00:05:47,810 --> 00:05:53,039
restreamers memory is all reference

00:05:50,130 --> 00:05:55,830
counted so we don't do copies we'll just

00:05:53,039 --> 00:05:58,110
pass around a reference that buffer with

00:05:55,830 --> 00:06:00,090
reference counter so that we can reuse

00:05:58,110 --> 00:06:03,060
it once it's over we have a buffer

00:06:00,090 --> 00:06:05,580
pooling after we allocate memory we have

00:06:03,060 --> 00:06:07,020
a whole framework for synchronization to

00:06:05,580 --> 00:06:09,090
synchronize between the writer and the

00:06:07,020 --> 00:06:11,310
reader but also synchronize against

00:06:09,090 --> 00:06:13,199
clocks so we have all these kind of

00:06:11,310 --> 00:06:14,880
things really built in the framework

00:06:13,199 --> 00:06:17,970
that makes it really really easy to

00:06:14,880 --> 00:06:19,860
build embed applications and i said we

00:06:17,970 --> 00:06:21,810
have loads and loads and loads of

00:06:19,860 --> 00:06:23,310
hardware enable plug-ins these days most

00:06:21,810 --> 00:06:25,620
associate vendors will provide you a

00:06:23,310 --> 00:06:27,930
gstreamer plugin which are getting

00:06:25,620 --> 00:06:29,250
really better by the year a couple years

00:06:27,930 --> 00:06:30,570
ago I would have told you don't even

00:06:29,250 --> 00:06:32,550
look at what your hardware vendor is

00:06:30,570 --> 00:06:34,740
providing you it's useless but now it's

00:06:32,550 --> 00:06:37,349
it's a lot better so now we have stuff

00:06:34,740 --> 00:06:40,340
that actually not only works once but

00:06:37,349 --> 00:06:43,040
works for an application for our product

00:06:40,340 --> 00:06:44,690
and this humour we have tools like Jesse

00:06:43,040 --> 00:06:47,450
launched to do very very fast

00:06:44,690 --> 00:06:49,850
prototyping to see if you can do it if

00:06:47,450 --> 00:06:52,280
your hardware can do it on the command

00:06:49,850 --> 00:06:55,640
line for all of these like simple

00:06:52,280 --> 00:07:00,020
applications so I'm going to give you

00:06:55,640 --> 00:07:04,130
one example of a device that's a tiny

00:07:00,020 --> 00:07:06,770
device it's a security camera it has 16

00:07:04,130 --> 00:07:10,000
Meg's of Flash space and most of it is

00:07:06,770 --> 00:07:14,030
already used by the kernel by the

00:07:10,000 --> 00:07:15,860
application from the vendor but that's a

00:07:14,030 --> 00:07:19,700
lot of RAM because they have a ring

00:07:15,860 --> 00:07:20,870
buffer of captured memory so there's a

00:07:19,700 --> 00:07:23,180
lot of Rambo thought of it's already

00:07:20,870 --> 00:07:24,590
used there's an RTSP server because

00:07:23,180 --> 00:07:26,900
that's what security cameras are these

00:07:24,590 --> 00:07:30,550
days mainly an RDSP server and it's a

00:07:26,900 --> 00:07:33,500
small arm 7 chip so nothing very special

00:07:30,550 --> 00:07:36,890
on this camera we want to add a

00:07:33,500 --> 00:07:39,560
functionality we wanted to take the RTSP

00:07:36,890 --> 00:07:42,230
server and upload it as mp4 files to the

00:07:39,560 --> 00:07:44,780
cloud so what we do is that we create a

00:07:42,230 --> 00:07:47,390
very simple gstreamer pipeline just an

00:07:44,780 --> 00:07:50,120
RDSP source we remove the RTP payload

00:07:47,390 --> 00:07:51,800
name because RTSP transformed the

00:07:50,120 --> 00:07:55,280
transfer the data and our three packets

00:07:51,800 --> 00:07:56,510
then we parse the h.264 streams this is

00:07:55,280 --> 00:07:58,640
to be able to find the key frames

00:07:56,510 --> 00:08:01,220
because the next one is called split

00:07:58,640 --> 00:08:03,290
mark sync and that was split your of

00:08:01,220 --> 00:08:05,780
your video stream into a series of

00:08:03,290 --> 00:08:07,010
equally sized files then we had a

00:08:05,780 --> 00:08:10,610
separate application just take these

00:08:07,010 --> 00:08:14,720
files and upload them to a cloud so in

00:08:10,610 --> 00:08:17,180
this simple pipeline we have like almost

00:08:14,720 --> 00:08:19,430
know how to write it so how do we first

00:08:17,180 --> 00:08:21,860
start this project first we wrote a very

00:08:19,430 --> 00:08:25,070
very simple prototype which is one

00:08:21,860 --> 00:08:27,020
command line line and you can play

00:08:25,070 --> 00:08:28,250
around with it see what works see what

00:08:27,020 --> 00:08:32,300
parameters you need

00:08:28,250 --> 00:08:34,580
it'll make something work and then this

00:08:32,300 --> 00:08:35,900
is basically step one it's for someone

00:08:34,580 --> 00:08:37,220
with a bit of additional experience it's

00:08:35,900 --> 00:08:39,560
very short

00:08:37,220 --> 00:08:41,630
even with not so much experience you can

00:08:39,560 --> 00:08:42,980
play with it and in a couple hours you

00:08:41,630 --> 00:08:45,100
can get something that works really well

00:08:42,980 --> 00:08:49,340
I mean this took me five minutes but

00:08:45,100 --> 00:08:50,870
I've been doing this for a long time so

00:08:49,340 --> 00:08:53,960
how do you run this on an embedded

00:08:50,870 --> 00:08:55,730
device first idea is that I'll just

00:08:53,960 --> 00:08:58,310
build the streamer and put in the device

00:08:55,730 --> 00:09:00,020
so just to do this talk I built a clean

00:08:58,310 --> 00:09:02,120
gstreamer with almost none of the

00:09:00,020 --> 00:09:04,339
dependencies right only the required

00:09:02,120 --> 00:09:09,380
dependency no optional dependencies my

00:09:04,339 --> 00:09:11,779
build was 287 Max and 82 Meg's of these

00:09:09,380 --> 00:09:16,459
were dynamic libraries all right

00:09:11,779 --> 00:09:17,810
that's a good bill and then I stripped

00:09:16,459 --> 00:09:19,790
it because that was with debug symbols

00:09:17,810 --> 00:09:21,830
so we're down to 17 megabytes it's not

00:09:19,790 --> 00:09:24,050
so bad not so bad but it's not

00:09:21,830 --> 00:09:27,230
incredible right it will not fit on my

00:09:24,050 --> 00:09:29,360
device so the next step was I'll take

00:09:27,230 --> 00:09:31,700
this command line and I'll make into a C

00:09:29,360 --> 00:09:32,990
program and this C Forum is exactly

00:09:31,700 --> 00:09:35,570
equivalent to the command line we had

00:09:32,990 --> 00:09:36,950
before so I take the parks launch line

00:09:35,570 --> 00:09:39,649
which is exactly what the command line

00:09:36,950 --> 00:09:41,839
would do this oh yeah there's a

00:09:39,649 --> 00:09:43,279
difference I put the max size 10 to so

00:09:41,839 --> 00:09:46,899
that and every keyframe it will create a

00:09:43,279 --> 00:09:50,149
file but that's basically the only thing

00:09:46,899 --> 00:09:52,700
check this if it's not the pipeline we

00:09:50,149 --> 00:09:54,920
ever set the state to playing wait for a

00:09:52,700 --> 00:09:58,190
signal right most simple just your

00:09:54,920 --> 00:10:01,580
application you can make and then with a

00:09:58,190 --> 00:10:03,680
simple make file so it's cross compile

00:10:01,580 --> 00:10:06,529
so I said this is route I said the CC

00:10:03,680 --> 00:10:08,810
the back package conflict path and I

00:10:06,529 --> 00:10:14,330
compile and Link it so it's very very

00:10:08,810 --> 00:10:15,110
basic stuff here and then I compile the

00:10:14,330 --> 00:10:18,290
application

00:10:15,110 --> 00:10:21,950
it's 13k stripped 5.5 kit that's pretty

00:10:18,290 --> 00:10:22,760
small plus seventeen Meg's of libraries

00:10:21,950 --> 00:10:26,779
dammit

00:10:22,760 --> 00:10:29,720
so we're slot 17 Meg's okay that was not

00:10:26,779 --> 00:10:32,180
so useful so maybe we can make it a

00:10:29,720 --> 00:10:34,459
static build so I think if I statically

00:10:32,180 --> 00:10:38,450
build gstreamer units maybe I can have

00:10:34,459 --> 00:10:40,970
something that fits so I compounds with

00:10:38,450 --> 00:10:43,279
Lib tool with static little lips so I

00:10:40,970 --> 00:10:45,320
can compile gstreamer library statically

00:10:43,279 --> 00:10:49,070
but not the lip see that's already on

00:10:45,320 --> 00:10:53,209
the device and PKG config that - static

00:10:49,070 --> 00:10:55,670
to get the right dependencies then I get

00:10:53,209 --> 00:10:57,620
a binary that's shipped at one point

00:10:55,670 --> 00:11:00,200
five megabytes alright that's it

00:10:57,620 --> 00:11:03,560
that sounds like we're done when I tread

00:11:00,200 --> 00:11:04,420
on my device I put it in the flash I run

00:11:03,560 --> 00:11:07,300
it

00:11:04,420 --> 00:11:09,400
oh there's no element there's an error

00:11:07,300 --> 00:11:11,890
why because I never copied any of the

00:11:09,400 --> 00:11:13,870
plugins it's missing the flagman so

00:11:11,890 --> 00:11:17,200
annoying so what did I do

00:11:13,870 --> 00:11:21,160
I copy the plugins all of them yeah 16

00:11:17,200 --> 00:11:23,590
17 megabytes that's a lot oh so then I

00:11:21,160 --> 00:11:25,990
use a little trick there's this debug

00:11:23,590 --> 00:11:28,330
thing when I reckon a PC tells me

00:11:25,990 --> 00:11:31,150
exactly which plugins it has loaded so I

00:11:28,330 --> 00:11:34,030
copy all of these plugins to my embedded

00:11:31,150 --> 00:11:36,520
device it's not so bad 1.7 Meg's of

00:11:34,030 --> 00:11:39,730
plugins so we're still at the three

00:11:36,520 --> 00:11:40,030
megabytes kind of acceptable size didn't

00:11:39,730 --> 00:11:45,220
I

00:11:40,030 --> 00:11:48,070
I'll run it again and oops I get an

00:11:45,220 --> 00:11:50,620
error oh all these plugins they need

00:11:48,070 --> 00:11:51,880
libraries and then to actually make it

00:11:50,620 --> 00:11:56,020
work I need to copy back all the

00:11:51,880 --> 00:12:02,670
libraries and back to 17 Meg's so not

00:11:56,020 --> 00:12:04,870
really not really great at all so I

00:12:02,670 --> 00:12:06,250
decide that I should actually statically

00:12:04,870 --> 00:12:10,060
link the plug-in so that it will bring

00:12:06,250 --> 00:12:12,850
in all the libraries and I will so you

00:12:10,060 --> 00:12:14,440
use plugins GStreamer they don't come

00:12:12,850 --> 00:12:16,120
with a header file so you have to put a

00:12:14,440 --> 00:12:18,280
declarations that static declaration

00:12:16,120 --> 00:12:20,920
like this so this little macro static

00:12:18,280 --> 00:12:23,860
declared static register digest the I in

00:12:20,920 --> 00:12:27,010
it when the C file and then we have

00:12:23,860 --> 00:12:28,510
something that we can build we use the

00:12:27,010 --> 00:12:30,850
write linker commands which we need to

00:12:28,510 --> 00:12:32,560
link with all the plugins or the - else

00:12:30,850 --> 00:12:34,900
there they're easy the name of the

00:12:32,560 --> 00:12:41,680
library names of all the plugins that we

00:12:34,900 --> 00:12:45,220
have found previously with the same plug

00:12:41,680 --> 00:12:50,290
that we had linked here so it works you

00:12:45,220 --> 00:12:52,540
these plugins so we link them in and we

00:12:50,290 --> 00:12:55,180
have a real silicon real f28 bags strip

00:12:52,540 --> 00:12:57,370
24.7 and that actually works on the

00:12:55,180 --> 00:12:58,540
device so we're forgetting somewhere

00:12:57,370 --> 00:12:59,860
there right we have something that's

00:12:58,540 --> 00:13:02,680
personalized it's just a little bit big

00:12:59,860 --> 00:13:05,560
5 megabytes now I'm thinking how can I

00:13:02,680 --> 00:13:08,290
make this smaller because you know 16

00:13:05,560 --> 00:13:11,590
megabytes if I take 5 megabytes just for

00:13:08,290 --> 00:13:14,650
this functionality it's a lot so I have

00:13:11,590 --> 00:13:18,870
the compiler for help at the compiler it

00:13:14,650 --> 00:13:21,580
has a trick compiled with OS

00:13:18,870 --> 00:13:23,500
very disappointing it's exactly the same

00:13:21,580 --> 00:13:27,370
size I thought right it's not that

00:13:23,500 --> 00:13:30,460
useful but maybe I can strip some

00:13:27,370 --> 00:13:32,410
functions that are not used because the

00:13:30,460 --> 00:13:34,450
compiler it will take each C file and

00:13:32,410 --> 00:13:36,250
transmit them into a whole file and this

00:13:34,450 --> 00:13:38,020
object file will contain all the

00:13:36,250 --> 00:13:40,390
functions the C file and it will all be

00:13:38,020 --> 00:13:43,840
linked in even if the functions are not

00:13:40,390 --> 00:13:49,540
used but there's a trick if we use these

00:13:43,840 --> 00:13:52,270
parameters then the compiler will create

00:13:49,540 --> 00:13:54,940
an object file for each function for

00:13:52,270 --> 00:13:57,460
each data object and then when we link

00:13:54,940 --> 00:14:00,490
it then the linker will remove all the

00:13:57,460 --> 00:14:04,150
ones that no one's use it so that that

00:14:00,490 --> 00:14:07,570
makes it a bit smaller for megabytes so

00:14:04,150 --> 00:14:11,440
we saved a little so that's pretty good

00:14:07,570 --> 00:14:14,320
and then we want to dig into it a bit

00:14:11,440 --> 00:14:17,820
more found four megabyte that's a lot

00:14:14,320 --> 00:14:21,490
when my program was not that complicated

00:14:17,820 --> 00:14:23,920
so there's a tool called bulky make

00:14:21,490 --> 00:14:26,680
volte-face from google guy didn't work

00:14:23,920 --> 00:14:27,370
for me so I thought this is exactly what

00:14:26,680 --> 00:14:29,440
I need

00:14:27,370 --> 00:14:32,620
compile it across from pilot rebuild it

00:14:29,440 --> 00:14:34,840
with debug symbols crashes that start

00:14:32,620 --> 00:14:37,090
all right not very useful so in the end

00:14:34,840 --> 00:14:39,880
I use object dump it was a Python script

00:14:37,090 --> 00:14:41,770
I looked into the binary to see which

00:14:39,880 --> 00:14:45,510
functions are there did the bit of

00:14:41,770 --> 00:14:47,800
scripting to find where are all these

00:14:45,510 --> 00:14:49,540
functions coming from that are taking

00:14:47,800 --> 00:14:52,620
all this space what's doing space in my

00:14:49,540 --> 00:14:55,630
primary and then I discover it's G lip

00:14:52,620 --> 00:14:58,750
gstreamer it's built on a library called

00:14:55,630 --> 00:15:01,480
G Lib which is a library of utilities to

00:14:58,750 --> 00:15:03,690
make C applications it has a bunch of

00:15:01,480 --> 00:15:06,490
things that are really useful link list

00:15:03,690 --> 00:15:09,460
and object the abstraction etc that we

00:15:06,490 --> 00:15:11,010
use everywhere in this rumor and then it

00:15:09,460 --> 00:15:14,740
has a bunch of thing that we don't use

00:15:11,010 --> 00:15:17,110
in particular it has its own plug-in

00:15:14,740 --> 00:15:19,360
system and when you load library it

00:15:17,110 --> 00:15:20,950
loads all the plugins and it calls them

00:15:19,360 --> 00:15:24,430
to functions in them and that means that

00:15:20,950 --> 00:15:26,200
all of these plugins get statically

00:15:24,430 --> 00:15:27,850
compiled in even though we never call

00:15:26,200 --> 00:15:29,320
them but they just get called by the

00:15:27,850 --> 00:15:34,060
initialization code

00:15:29,320 --> 00:15:37,000
so I'm a bit aggressive I'll just remove

00:15:34,060 --> 00:15:39,009
them all edited glab there's a really

00:15:37,000 --> 00:15:41,980
nasty patch there so I removed G

00:15:39,009 --> 00:15:44,500
settings the configuration I removed GD

00:15:41,980 --> 00:15:45,880
bus because we don't use D bus I remove

00:15:44,500 --> 00:15:48,339
the app info because it's not an

00:15:45,880 --> 00:15:50,440
application G application I remove the

00:15:48,339 --> 00:15:52,800
notifications we're another desktop all

00:15:50,440 --> 00:15:57,370
this stuff was taking a bunch of space

00:15:52,800 --> 00:16:03,310
so I can make it a bit smaller 3.8

00:15:57,370 --> 00:16:05,680
megabytes so next step I got really

00:16:03,310 --> 00:16:06,699
angry I was like I need something that

00:16:05,680 --> 00:16:12,600
works I need it now

00:16:06,699 --> 00:16:15,160
so I cheated I use something called upx

00:16:12,600 --> 00:16:17,110
which is just compresses the binary and

00:16:15,160 --> 00:16:19,240
decompress that star type just like

00:16:17,110 --> 00:16:22,089
people do for the colonel so it's

00:16:19,240 --> 00:16:24,730
cheating but it's good cheating and then

00:16:22,089 --> 00:16:29,560
bang 2 megabytes and this is where I

00:16:24,730 --> 00:16:31,329
stopped because it fit but so these are

00:16:29,560 --> 00:16:34,269
basically the core of how you transform

00:16:31,329 --> 00:16:36,490
these giant GStreamer thing that no one

00:16:34,269 --> 00:16:38,920
can use and then smaller the device to

00:16:36,490 --> 00:16:42,699
something that it's small enough that

00:16:38,920 --> 00:16:46,720
you can use it there's a bunch of other

00:16:42,699 --> 00:16:50,380
things you can do if you look into the

00:16:46,720 --> 00:16:51,850
debt that the information from object

00:16:50,380 --> 00:16:53,980
dump and everything that I got earlier

00:16:51,850 --> 00:16:56,829
in G lab that I should also join into

00:16:53,980 --> 00:16:59,410
tf8 tables because all of the G object G

00:16:56,829 --> 00:17:03,519
Lebanon ecosystem is localisation

00:16:59,410 --> 00:17:06,130
friendly and utf-8 you have these huge

00:17:03,519 --> 00:17:09,419
tables both half-american there that we

00:17:06,130 --> 00:17:11,679
could remove with a bit more effort but

00:17:09,419 --> 00:17:14,380
I didn't do that effort because I was

00:17:11,679 --> 00:17:16,540
happy so basically at this point it's

00:17:14,380 --> 00:17:19,689
it's diminishing returns are a lot more

00:17:16,540 --> 00:17:22,750
work but I was happy so that was the end

00:17:19,689 --> 00:17:24,669
of my my efforts thank you

00:17:22,750 --> 00:17:28,589
so that's was basically how to make the

00:17:24,669 --> 00:17:28,589
streamer from big small

00:17:29,330 --> 00:17:40,480
[Applause]

00:17:36,010 --> 00:17:40,480
questions yes

00:17:51,820 --> 00:17:54,480
yes

00:17:56,850 --> 00:18:00,450
this is before compression if you have a

00:17:59,130 --> 00:18:05,070
compressed file system then the last

00:18:00,450 --> 00:18:06,660
step is not so useful sorry

00:18:05,070 --> 00:18:08,160
you were seeing that on many embedded

00:18:06,660 --> 00:18:10,830
systems people will use a compressed

00:18:08,160 --> 00:18:13,080
file system which is probably a good

00:18:10,830 --> 00:18:15,600
idea if you have so little space and

00:18:13,080 --> 00:18:17,070
obviously you upx in this case we didn't

00:18:15,600 --> 00:18:21,200
have a compressed file system because it

00:18:17,070 --> 00:18:24,060
came from somewhere in China and they

00:18:21,200 --> 00:18:25,800
was a bit terrible so and we couldn't

00:18:24,060 --> 00:18:28,020
really modify the device itself so we

00:18:25,800 --> 00:18:28,770
have to just add it but if we're in a

00:18:28,020 --> 00:18:32,060
real device

00:18:28,770 --> 00:18:35,580
maybe the UPS step you could you would

00:18:32,060 --> 00:18:37,560
miss I rely on a quality device the Qt

00:18:35,580 --> 00:18:40,530
x-step you would skip and you would use

00:18:37,560 --> 00:18:47,390
squash FS or something similar to be ifs

00:18:40,530 --> 00:18:47,390
one of these yes yes you in the back

00:18:56,260 --> 00:19:03,070
so how long does it take to loan the

00:18:58,510 --> 00:19:09,700
compressed library as a question yes how

00:19:03,070 --> 00:19:12,880
long does it take to boot it so in

00:19:09,700 --> 00:19:15,519
practice on this system I did not see a

00:19:12,880 --> 00:19:19,960
difference for the CPU was not that slow

00:19:15,519 --> 00:19:22,299
but on many systems we've seen that it

00:19:19,960 --> 00:19:24,760
actually goes faster because the flash

00:19:22,299 --> 00:19:26,679
is slower than the CPU but it very much

00:19:24,760 --> 00:19:33,779
depends on your device in this kind of

00:19:26,679 --> 00:19:33,779
thing there's no magic yes

00:19:45,440 --> 00:19:50,510
so though the question is if you have

00:19:48,680 --> 00:19:53,570
multiple shell scripts calling pipelines

00:19:50,510 --> 00:19:54,830
the first thing you should never use GST

00:19:53,570 --> 00:19:57,080
launched with shell scripts and that

00:19:54,830 --> 00:19:59,420
real product because you don't get any

00:19:57,080 --> 00:20:01,340
of the errors so the error and Ling is

00:19:59,420 --> 00:20:03,500
just launched is is not meant for a

00:20:01,340 --> 00:20:05,510
product so you shouldn't do that what

00:20:03,500 --> 00:20:07,790
you should really really do in this case

00:20:05,510 --> 00:20:09,800
is just write a small C application that

00:20:07,790 --> 00:20:13,600
calls your pipelines and link it all

00:20:09,800 --> 00:20:13,600
statically if size matters

00:20:28,140 --> 00:20:32,190
so you you're asking if they found if

00:20:30,870 --> 00:20:34,890
the pipeline changes whether the

00:20:32,190 --> 00:20:36,690
funneling changes so in this case well

00:20:34,890 --> 00:20:39,330
my prime was like very minimal but

00:20:36,690 --> 00:20:40,920
obviously you can put all these objects

00:20:39,330 --> 00:20:43,650
as properties that you can modify and

00:20:40,920 --> 00:20:45,960
see so if you wanna really were really

00:20:43,650 --> 00:20:47,400
really done a big pipeline or you can

00:20:45,960 --> 00:20:49,950
actually change the behavior of the

00:20:47,400 --> 00:20:51,840
program then if you're in a small

00:20:49,950 --> 00:20:53,760
embedded system you need to figure out

00:20:51,840 --> 00:20:55,590
all the use cases and figure out all the

00:20:53,760 --> 00:20:57,390
plugins that you're gonna need and write

00:20:55,590 --> 00:20:59,280
a little bit of code to make that happen

00:20:57,390 --> 00:21:00,809
the Streif is very dynamic it's probably

00:20:59,280 --> 00:21:06,030
of an easy easier encode than in

00:21:00,809 --> 00:21:08,730
scripting if you're obviously otherwise

00:21:06,030 --> 00:21:10,620
you're stuck at this that's like the

00:21:08,730 --> 00:21:12,570
second step I had before I wrote a C

00:21:10,620 --> 00:21:15,150
program where I just had the list of the

00:21:12,570 --> 00:21:18,169
right plug-ins copy to the device but

00:21:15,150 --> 00:21:18,169
that doesn't give you that

00:21:27,809 --> 00:21:38,820
yes anyone else yes there sorry I did

00:21:35,940 --> 00:21:40,409
not try compelling with clang in this

00:21:38,820 --> 00:21:42,179
case this all these experiments are

00:21:40,409 --> 00:21:45,059
should I mention I used the latest in a

00:21:42,179 --> 00:21:47,549
narrow tool chain so this is kind of the

00:21:45,059 --> 00:21:49,409
first trick of especially embedded

00:21:47,549 --> 00:21:52,139
systems from China where they have a

00:21:49,409 --> 00:21:53,429
compiler that's from 2009 it's just

00:21:52,139 --> 00:21:56,969
sometimes you just replace it with a

00:21:53,429 --> 00:21:58,679
newer compiler and it's just better but

00:21:56,969 --> 00:22:00,779
I'm not sure if crying wouldn't make

00:21:58,679 --> 00:22:04,229
such a difference for this kind of thing

00:22:00,779 --> 00:22:05,549
I don't know because we have for some of

00:22:04,229 --> 00:22:09,359
the platforms you use crying and it's

00:22:05,549 --> 00:22:14,279
not like maybe you save 5% or gain 5%

00:22:09,359 --> 00:22:15,839
it's yes that's yes so it's maybe the

00:22:14,279 --> 00:22:18,929
arm compiler would be better maybe worse

00:22:15,839 --> 00:22:25,039
I don't know it depends on how much

00:22:18,929 --> 00:22:25,039
effort you ready to put into it yes

00:22:38,360 --> 00:22:44,630
in this case I don't I think it should

00:22:41,420 --> 00:22:46,400
when I said in this case really it was

00:22:44,630 --> 00:22:51,530
so fast I didn't see a difference what I

00:22:46,400 --> 00:22:54,340
hope it started but since we skip the

00:22:51,530 --> 00:22:58,790
linking stage that the dynamic linker

00:22:54,340 --> 00:23:02,210
and we reduce the amount of wind maybe

00:22:58,790 --> 00:23:03,680
we read from the flash in linearly it

00:23:02,210 --> 00:23:06,050
might actually be faster should be

00:23:03,680 --> 00:23:08,690
faster and we still linked dynamically

00:23:06,050 --> 00:23:10,640
because of the little static Clips trick

00:23:08,690 --> 00:23:13,040
usually linked dynamically against

00:23:10,640 --> 00:23:14,480
what's already in the platform so the

00:23:13,040 --> 00:23:15,950
only thing that statically linked are

00:23:14,480 --> 00:23:17,870
the things that we bring in for this

00:23:15,950 --> 00:23:23,270
specific application which is the G

00:23:17,870 --> 00:23:25,790
streamer framework we really try to link

00:23:23,270 --> 00:23:28,280
in only what's new and not add another

00:23:25,790 --> 00:23:30,080
placate what's on the platform so force

00:23:28,280 --> 00:23:32,360
another one we ported something to open

00:23:30,080 --> 00:23:33,950
SSL because that was not platform it's a

00:23:32,360 --> 00:23:44,200
definite Els that teaching Burnett

00:23:33,950 --> 00:23:44,200
natively used yes any more questions

00:23:44,850 --> 00:23:50,590
well thank you then

00:23:47,100 --> 00:23:50,590

YouTube URL: https://www.youtube.com/watch?v=RE3ylldz-Fs


