Title: Maintaining a Linux Kernel for 13 Years? You Must be Kidding Me. We Need at Least 30?
Publication date: 2017-10-25
Playlist: Open Source Summit Europe & Embedded Linux Conference Europe 2017
Description: 
	Maintaining a Linux Kernel for 13 Years? You Must be Kidding Me. We Need at Least 30? - Agustin Benito Bethencourt & Ben Hutchings, Codethink Ltd

Industrial grade solutions has a life expectancy of 30+ years. Maintaining a Linux kernel for such a long time in the open has not been done. Many claim that is not sustainable but corporations that build power plants, railway systems, etc. are willing to tackle this challenge. This talk will describe the work done so far on the kernel maintenance and testing front at the CIP initiative.

During the talk it will be explained how we decide which parts of the kernel to cover - reducing the amount of work to be done and the risk of being unable to maintain the claimed support. The process of reviewing and backporting fixes that might be needed on an older branch will be briefly described. CIP is taking a different approach from many other projects when it comes to testing the kernel. The talk will go over it as well as the coming steps. and the future steps.

About Agustin Benito Bethencourt
Bachelor degree in Applied Physics and Master in Training. Agustin Benito Bethencourt has experience as entrepreneur, executive, IT director, product owner and consultant, in the FLOSS space. Currently he is Principal Consultant at Codethink Ltd currently focused in collaborative environments like CIP, AGL or GENIVI. Agustin has extensive experience working in the open in Open Source communities like KDE or openSUSE. Full background available at http://www.toscalix.com

About Ben Hutchings
Ben Hutchings is a developer at Codethink Ltd. He is a reputed kernel hacker and Debian developer. He currently maintains Linux Kernel 3.16 and 3.2 (Debian kernels) and the CIP kernel, based on 4.4 LTS.
Captions: 
	00:00:00,030 --> 00:00:05,069
first of all thank you for coming

00:00:01,550 --> 00:00:07,980
there's a huge offering a TLC normally

00:00:05,069 --> 00:00:09,780
so you have plenty of offer of

00:00:07,980 --> 00:00:13,019
possibilities thank you for coming to

00:00:09,780 --> 00:00:15,389
this one my colleague Ben Hutchinson and

00:00:13,019 --> 00:00:19,650
myself will be talking a little bit

00:00:15,389 --> 00:00:23,430
about some of the ideas that a company

00:00:19,650 --> 00:00:27,420
called cope think is bringing into the

00:00:23,430 --> 00:00:30,000
kernel maintenance within CIP my

00:00:27,420 --> 00:00:32,099
colleague Ben it's a well-known kernel

00:00:30,000 --> 00:00:33,890
maintainer Debian kernel maintainer also

00:00:32,099 --> 00:00:37,530
he works upstream as a maintainer and

00:00:33,890 --> 00:00:40,649
currently he's maintaining the the CIP

00:00:37,530 --> 00:00:43,370
kernel based on 4.4 and I work as a

00:00:40,649 --> 00:00:46,649
consultant in the same company and

00:00:43,370 --> 00:00:50,250
basically I I represent the company at

00:00:46,649 --> 00:00:51,690
sea ap coping is an open source embedded

00:00:50,250 --> 00:00:55,050
company ten years old based in

00:00:51,690 --> 00:00:57,449
Manchester and we have a what I believe

00:00:55,050 --> 00:00:59,969
is a strong background in working in the

00:00:57,449 --> 00:01:05,939
open and also working in customers we

00:00:59,969 --> 00:01:08,640
are quite strong in automotive and those

00:01:05,939 --> 00:01:10,650
of you who were this morning at the CIP

00:01:08,640 --> 00:01:13,260
talk I'm not gonna repeat most of what

00:01:10,650 --> 00:01:17,909
was said there I would simply say that

00:01:13,260 --> 00:01:20,460
are basically sitcom six companies the

00:01:17,909 --> 00:01:21,750
Platinum member sammo low among the four

00:01:20,460 --> 00:01:24,060
they have more than a million employees

00:01:21,750 --> 00:01:26,549
which is more than many countries out

00:01:24,060 --> 00:01:29,310
there and then we have Colton and Platt

00:01:26,549 --> 00:01:31,259
home doing kind of a specific work

00:01:29,310 --> 00:01:33,869
platform in the IOT space and cope team

00:01:31,259 --> 00:01:37,650
providing these we are working on the

00:01:33,869 --> 00:01:39,509
kernel side of things for in CIP and we

00:01:37,650 --> 00:01:41,280
have basically four four topics to

00:01:39,509 --> 00:01:46,409
comment first of all we're going to give

00:01:41,280 --> 00:01:49,350
a very brief picture of what maintenance

00:01:46,409 --> 00:01:52,020
is today in different industries and

00:01:49,350 --> 00:01:53,880
then I will go for very briefly also

00:01:52,020 --> 00:01:57,509
four different strategies that we could

00:01:53,880 --> 00:02:01,409
have chosen to work on the kernel within

00:01:57,509 --> 00:02:04,200
CIP and then some considerations from

00:02:01,409 --> 00:02:06,210
Ben related with limits of the

00:02:04,200 --> 00:02:09,869
maintenance lifetime of a kernel and

00:02:06,210 --> 00:02:13,890
finally he will provide us some ideas of

00:02:09,869 --> 00:02:19,740
how can we achieve longer lifetime

00:02:13,890 --> 00:02:21,690
of the colonel so yeah this is just a

00:02:19,740 --> 00:02:24,450
picture that is approximating and you

00:02:21,690 --> 00:02:26,640
can make tons of considerations here but

00:02:24,450 --> 00:02:31,260
basically what I'm trying to show here

00:02:26,640 --> 00:02:35,450
is that on the enterprise world the site

00:02:31,260 --> 00:02:39,090
the maintenance well the life time cycle

00:02:35,450 --> 00:02:40,560
of the the life cycle of the products

00:02:39,090 --> 00:02:43,080
that are out there in their enterprise

00:02:40,560 --> 00:02:47,610
world depending on how you consider in

00:02:43,080 --> 00:02:50,010
our around 15 years 15 17 13 depending

00:02:47,610 --> 00:02:54,590
on which company how do you do you

00:02:50,010 --> 00:02:58,590
consider that the life cycle of a kernel

00:02:54,590 --> 00:03:00,720
but it's run about that time then non

00:02:58,590 --> 00:03:04,950
commercial district Davian they are

00:03:00,720 --> 00:03:09,750
around eight if you count all the life

00:03:04,950 --> 00:03:12,810
cycle of a product or project if we go

00:03:09,750 --> 00:03:15,420
to the mobile space we see around five

00:03:12,810 --> 00:03:20,640
six years since they started and until

00:03:15,420 --> 00:03:22,769
the the lifetime of a product finish and

00:03:20,640 --> 00:03:25,680
focusing a little bit more on the kernel

00:03:22,769 --> 00:03:27,600
well depending on how you count or you

00:03:25,680 --> 00:03:30,600
want to think about how the kernel is

00:03:27,600 --> 00:03:33,239
developed if some might say that you

00:03:30,600 --> 00:03:35,610
have feature stabilization in next and

00:03:33,239 --> 00:03:37,049
then in the main line you do the whole

00:03:35,610 --> 00:03:39,870
product stabilization that could be

00:03:37,049 --> 00:03:42,780
around four month somebody will claim

00:03:39,870 --> 00:03:45,090
that it takes years to change a core

00:03:42,780 --> 00:03:47,519
feature so depending on how you look at

00:03:45,090 --> 00:03:49,680
that we are talking about up to six

00:03:47,519 --> 00:03:54,180
years with this new enhancement for for

00:03:49,680 --> 00:03:57,480
the LTS branch to two and a half it's if

00:03:54,180 --> 00:04:00,060
we consider other branches and then on

00:03:57,480 --> 00:04:02,400
top of the LTS you can have a lease K or

00:04:00,060 --> 00:04:06,890
LTS I they just try to extend in

00:04:02,400 --> 00:04:10,730
different ways that period so again the

00:04:06,890 --> 00:04:12,900
specific dates are not very relevant

00:04:10,730 --> 00:04:16,290
when you think about it from the

00:04:12,900 --> 00:04:18,630
industrial perspective this this slide

00:04:16,290 --> 00:04:21,180
was pretty much shown this morning so

00:04:18,630 --> 00:04:23,910
I'm not gonna stop on it too much I'll

00:04:21,180 --> 00:04:26,160
just gonna say that think about a

00:04:23,910 --> 00:04:27,480
real-world control system and for

00:04:26,160 --> 00:04:30,180
example each

00:04:27,480 --> 00:04:33,570
entry has its own rules and way of doing

00:04:30,180 --> 00:04:35,760
things so just their specifications for

00:04:33,570 --> 00:04:38,130
us for our customers extensions might

00:04:35,760 --> 00:04:40,650
take up to four years these are data

00:04:38,130 --> 00:04:44,880
provided by by some of the members right

00:04:40,650 --> 00:04:47,400
so or just the initial certification of

00:04:44,880 --> 00:04:50,420
that system might take one year and we

00:04:47,400 --> 00:04:52,920
are thinking about think about those

00:04:50,420 --> 00:04:55,710
systems maintain it for a very long time

00:04:52,920 --> 00:05:00,420
if we go to power plants for instance

00:04:55,710 --> 00:05:02,730
then they this is completely crazy you

00:05:00,420 --> 00:05:04,440
take out about five years up to five

00:05:02,730 --> 00:05:06,600
years to develop and then just simply a

00:05:04,440 --> 00:05:08,280
specific customers text in stations

00:05:06,600 --> 00:05:10,800
might take up to four years and if you

00:05:08,280 --> 00:05:14,430
think about the deployment time or the

00:05:10,800 --> 00:05:16,080
supply time then it's a whole bunch of

00:05:14,430 --> 00:05:18,480
years are putting a power plan up to

00:05:16,080 --> 00:05:22,380
working after work it's it's insanely

00:05:18,480 --> 00:05:24,690
costly so and then you associate

00:05:22,380 --> 00:05:28,550
hardware with software in this cases and

00:05:24,690 --> 00:05:32,400
those two you have to provide hardware

00:05:28,550 --> 00:05:36,150
maintenance and support and software so

00:05:32,400 --> 00:05:37,880
if we can be talking about I mean all

00:05:36,150 --> 00:05:41,430
strands Siemens was talking about

00:05:37,880 --> 00:05:44,700
systems being developed provided in this

00:05:41,430 --> 00:05:47,580
in the late 60s and 70s Orion and still

00:05:44,700 --> 00:05:50,910
working right so it's a huge challenge

00:05:47,580 --> 00:05:53,760
so when you think about those timescales

00:05:50,910 --> 00:05:55,770
in terms of the mind of the kernel of

00:05:53,760 --> 00:05:58,260
the Linux kernel if we are aiming to put

00:05:55,770 --> 00:06:01,200
Linux and that's the whole point of

00:05:58,260 --> 00:06:03,450
where this industry is heading little by

00:06:01,200 --> 00:06:06,510
little and you compare that with what we

00:06:03,450 --> 00:06:09,090
know today it doesn't matter how you

00:06:06,510 --> 00:06:11,100
count it we are thinking about in the

00:06:09,090 --> 00:06:17,040
best scenarios about extending the

00:06:11,100 --> 00:06:19,620
current maintenance cycles in in in four

00:06:17,040 --> 00:06:21,030
three four if you compare with

00:06:19,620 --> 00:06:26,940
enterprise but if you compare with

00:06:21,030 --> 00:06:29,970
embedded I don't know buy a lot so for a

00:06:26,940 --> 00:06:31,860
company a small company like like Co

00:06:29,970 --> 00:06:35,340
thing there the following question is

00:06:31,860 --> 00:06:41,400
and why what are we doing here working

00:06:35,340 --> 00:06:44,190
in in in CIP so for us

00:06:41,400 --> 00:06:45,509
was very interesting from a company that

00:06:44,190 --> 00:06:49,530
comes from embedded and he's getting

00:06:45,509 --> 00:06:52,050
into a strong and automotive think about

00:06:49,530 --> 00:06:54,120
the strategies that we have been

00:06:52,050 --> 00:06:56,160
following lately are very close to what

00:06:54,120 --> 00:07:00,810
upstream is telling everybody right

00:06:56,160 --> 00:07:03,030
which is basically reduce the Delta

00:07:00,810 --> 00:07:04,919
between up stirring and and your product

00:07:03,030 --> 00:07:08,520
and that will help you and keep your

00:07:04,919 --> 00:07:10,740
product alive and then we have these use

00:07:08,520 --> 00:07:14,510
cases and for us it was a challenge that

00:07:10,740 --> 00:07:16,830
we want to learn because maybe maybe

00:07:14,510 --> 00:07:19,860
things might change in the future and

00:07:16,830 --> 00:07:22,350
the current strategies are not working

00:07:19,860 --> 00:07:24,750
that are currently challenged by this

00:07:22,350 --> 00:07:26,400
kind of use cases will bring us to

00:07:24,750 --> 00:07:28,080
something new and different or no or

00:07:26,400 --> 00:07:30,750
maybe just the use cases will need to

00:07:28,080 --> 00:07:37,080
change if they want to adopt open source

00:07:30,750 --> 00:07:38,729
or something new comes right so as I

00:07:37,080 --> 00:07:42,120
said the first strategy that we can

00:07:38,729 --> 00:07:45,510
follow it's like you know as a company

00:07:42,120 --> 00:07:48,120
that is let's say expert in in in

00:07:45,510 --> 00:07:50,250
embedded world I mean lately not amore

00:07:48,120 --> 00:07:53,010
fan and approaches these big customers

00:07:50,250 --> 00:07:54,780
is look the current model yet that

00:07:53,010 --> 00:07:56,849
you're following is completely wrong you

00:07:54,780 --> 00:07:59,400
need to update so you and when I mean to

00:07:56,849 --> 00:08:04,199
update I mean having updates as a core

00:07:59,400 --> 00:08:06,240
strategy to words when you think about

00:08:04,199 --> 00:08:10,110
your maintenance cycles or your business

00:08:06,240 --> 00:08:12,180
model also around it that is one

00:08:10,110 --> 00:08:15,720
strategy which is in the embedded world

00:08:12,180 --> 00:08:17,699
is what we not as fast as we would want

00:08:15,720 --> 00:08:20,190
to but is where we are seen and we are

00:08:17,699 --> 00:08:24,930
seeing also that pushing the automotive

00:08:20,190 --> 00:08:26,400
industry the second my strategy would be

00:08:24,930 --> 00:08:28,169
like well you know we are doing things

00:08:26,400 --> 00:08:31,349
on the maintenance side of things on the

00:08:28,169 --> 00:08:33,959
kernel in in some specific ways so what

00:08:31,349 --> 00:08:36,330
we are going to do is just extend try to

00:08:33,959 --> 00:08:38,700
extend and push as hard and as much as

00:08:36,330 --> 00:08:42,450
we can our current approach and see

00:08:38,700 --> 00:08:45,180
where we get right and and and let's

00:08:42,450 --> 00:08:48,110
find out the limits of that technically

00:08:45,180 --> 00:08:48,110
speaking but also

00:08:48,180 --> 00:08:53,310
[Music]

00:08:49,320 --> 00:08:55,480
business-wise economic wise also and

00:08:53,310 --> 00:08:58,470
process-wise let's find out the limits

00:08:55,480 --> 00:08:58,470
where it takes us

00:08:58,540 --> 00:09:04,420
assuming that overtime tooling get

00:09:00,910 --> 00:09:07,480
better and we are improving right five

00:09:04,420 --> 00:09:09,220
or six years ago having the announcement

00:09:07,480 --> 00:09:10,810
that we got a few weeks ago that the LT

00:09:09,220 --> 00:09:13,660
s branch was going to be extended for

00:09:10,810 --> 00:09:18,460
six to six years would probably have

00:09:13,660 --> 00:09:19,780
been a completely crazy thing and then

00:09:18,460 --> 00:09:22,840
the following one the following

00:09:19,780 --> 00:09:25,240
strategies just sit down assume that the

00:09:22,840 --> 00:09:27,010
current model doesn't work so we would

00:09:25,240 --> 00:09:30,520
sit down until somebody finds a solution

00:09:27,010 --> 00:09:33,700
that we can use or we can apply with

00:09:30,520 --> 00:09:37,270
some guarantee and so those companies

00:09:33,700 --> 00:09:39,370
that are members of CIP would keep would

00:09:37,270 --> 00:09:41,260
would keep doing what they are currently

00:09:39,370 --> 00:09:44,920
doing which is doing everything in-house

00:09:41,260 --> 00:09:46,510
the wrong way and and trying to make a

00:09:44,920 --> 00:09:52,420
good business out of the aisle without

00:09:46,510 --> 00:09:54,490
killing anybody so obviously we went for

00:09:52,420 --> 00:09:57,610
the second option which is we are trying

00:09:54,490 --> 00:10:00,520
to push the current the current strategy

00:09:57,610 --> 00:10:03,010
let's see what where it take us assuming

00:10:00,520 --> 00:10:06,730
that we are getting better and better at

00:10:03,010 --> 00:10:09,820
this and yeah so now Ben is going to

00:10:06,730 --> 00:10:11,470
explain some of those some of the

00:10:09,820 --> 00:10:14,590
actions and considerations that we are

00:10:11,470 --> 00:10:17,490
taking with this second strategy in mind

00:10:14,590 --> 00:10:17,490
within CIB

00:10:20,880 --> 00:10:29,470
so firstly going to describe some of the

00:10:26,430 --> 00:10:34,180
probable practical limits to maintenance

00:10:29,470 --> 00:10:36,310
lifetime of a kernel branch so

00:10:34,180 --> 00:10:38,380
unfortunately there is a what seems to

00:10:36,310 --> 00:10:41,290
be a hard limit on supporting the the

00:10:38,380 --> 00:10:44,770
current CIP kernel branch based on Linux

00:10:41,290 --> 00:10:47,080
4.4 and that's the year 2038 it's kind

00:10:44,770 --> 00:10:50,380
of like the year 2000 problem which

00:10:47,080 --> 00:10:51,670
required a whole lot of changes in a

00:10:50,380 --> 00:10:55,180
whole lot of different pieces of

00:10:51,670 --> 00:10:57,820
software Linux systems like UNIX

00:10:55,180 --> 00:11:02,230
represent absolute time or wall clock

00:10:57,820 --> 00:11:06,370
time as a number of seconds since 1970

00:11:02,230 --> 00:11:09,010
and if they where this is represented in

00:11:06,370 --> 00:11:10,750
a 32-bit signed value the maximum

00:11:09,010 --> 00:11:13,650
possible time you can represent is

00:11:10,750 --> 00:11:16,150
sometime only in 2038

00:11:13,650 --> 00:11:19,420
when lynx is running on a 32-bit

00:11:16,150 --> 00:11:21,550
architecture the system call API is that

00:11:19,420 --> 00:11:23,950
users base users to talk to the colonel

00:11:21,550 --> 00:11:27,160
and many of the internal interfaces in

00:11:23,950 --> 00:11:29,800
the kernel use 32-bit signed values so

00:11:27,160 --> 00:11:35,100
that will stop working and malfunction

00:11:29,800 --> 00:11:37,300
in unpredictable ways after 2038 and

00:11:35,100 --> 00:11:39,040
unfortunately even on 64-bit

00:11:37,300 --> 00:11:44,070
architectures there are some places in

00:11:39,040 --> 00:11:47,350
the kernel where 32-bit values are used

00:11:44,070 --> 00:11:49,240
so to fix this there needs to be changes

00:11:47,350 --> 00:11:52,870
in the kernel they need to be changes in

00:11:49,240 --> 00:11:56,980
new Lipsy or any other C library that's

00:11:52,870 --> 00:12:00,370
being used other libraries that use that

00:11:56,980 --> 00:12:02,640
have api's that involve time types may

00:12:00,370 --> 00:12:07,240
need to be updated and applications that

00:12:02,640 --> 00:12:09,550
store time in binary files or use them

00:12:07,240 --> 00:12:13,330
in network protocols may also need to be

00:12:09,550 --> 00:12:15,910
updated the Eve's work underway to fix

00:12:13,330 --> 00:12:18,790
this in the kernel things have got

00:12:15,910 --> 00:12:23,290
better since 4.4 but they're not

00:12:18,790 --> 00:12:25,930
complete I am hoping that I and possibly

00:12:23,290 --> 00:12:29,470
other CIP member developers will be able

00:12:25,930 --> 00:12:32,690
to work on finishing that having that in

00:12:29,470 --> 00:12:37,519
place when we start the next

00:12:32,690 --> 00:12:40,370
CIP colonel branch that work is probably

00:12:37,519 --> 00:12:45,110
not going to be possible to back port on

00:12:40,370 --> 00:12:47,540
to four point four so that's likely to

00:12:45,110 --> 00:12:52,819
be an absolute limit on the the lifetime

00:12:47,540 --> 00:12:57,290
of this branch a second issue is going

00:12:52,819 --> 00:13:01,910
to be hardware the commercial support

00:12:57,290 --> 00:13:07,850
lifetime of most CPUs SOC s and some of

00:13:01,910 --> 00:13:10,370
the other important Asics used in these

00:13:07,850 --> 00:13:14,269
embedded systems it's going to be less

00:13:10,370 --> 00:13:16,880
than thirty years and over time some of

00:13:14,269 --> 00:13:19,670
those some of that hardware is going to

00:13:16,880 --> 00:13:24,829
break and it's going to be harder and

00:13:19,670 --> 00:13:27,319
harder to get hold of space the only the

00:13:24,829 --> 00:13:30,500
most recent CIP colonel branch is going

00:13:27,319 --> 00:13:34,160
to be receiving back ported support for

00:13:30,500 --> 00:13:35,500
new hardware and after say ten or

00:13:34,160 --> 00:13:38,509
fifteen years it's going to be

00:13:35,500 --> 00:13:43,880
practically impossible to add support

00:13:38,509 --> 00:13:46,279
for a new SOC so I would expect that

00:13:43,880 --> 00:13:50,509
some of the long-lived systems that are

00:13:46,279 --> 00:13:52,930
using the CIP kernel are going to need

00:13:50,509 --> 00:13:55,579
to have at least as an option a

00:13:52,930 --> 00:13:57,740
replacement for the Linux based

00:13:55,579 --> 00:14:01,540
components that would update both the

00:13:57,740 --> 00:14:01,540
hardware and the kernel

00:14:05,990 --> 00:14:15,680
and the third limiting factor is in the

00:14:09,520 --> 00:14:18,290
kernel software itself as you all know

00:14:15,680 --> 00:14:23,450
the kernel is is being developed and and

00:14:18,290 --> 00:14:25,820
changing very rapidly so internal api's

00:14:23,450 --> 00:14:28,270
and their implementation details that

00:14:25,820 --> 00:14:35,600
may need to be fixed change over time

00:14:28,270 --> 00:14:40,610
times in quite dramatic ways and any bug

00:14:35,600 --> 00:14:43,220
fix that that is made upstream and ought

00:14:40,610 --> 00:14:44,990
to be back porters might actually depend

00:14:43,220 --> 00:14:46,430
on some of the interface or

00:14:44,990 --> 00:14:49,839
implementation changes that have

00:14:46,430 --> 00:14:55,570
happened since the stable or CIP branch

00:14:49,839 --> 00:14:59,089
was created so Bank porting the bug fix

00:14:55,570 --> 00:15:03,320
can become very difficult and the longer

00:14:59,089 --> 00:15:06,410
the stable or CIP branch lasts the

00:15:03,320 --> 00:15:14,600
harder by porting any given bug fixes

00:15:06,410 --> 00:15:18,520
likely to become so how how can CIP

00:15:14,600 --> 00:15:23,330
achieve a longer lifetime then current

00:15:18,520 --> 00:15:26,830
long-term support branches promise how

00:15:23,330 --> 00:15:35,060
how old we how can we possibly maintain

00:15:26,830 --> 00:15:37,220
a branch for decades one factor that

00:15:35,060 --> 00:15:39,440
should make this helped to make this

00:15:37,220 --> 00:15:41,959
tractable is that the scope of of

00:15:39,440 --> 00:15:50,740
maintenance is based on the needs of

00:15:41,959 --> 00:15:54,140
members the the CIP only makes releases

00:15:50,740 --> 00:15:57,140
the kernel sauce rather than binary

00:15:54,140 --> 00:16:00,320
packages so members can use whatever

00:15:57,140 --> 00:16:02,570
configuration they want but we're

00:16:00,320 --> 00:16:05,510
collecting together the configurations

00:16:02,570 --> 00:16:08,450
they actually use and using that to

00:16:05,510 --> 00:16:13,540
determine which features of the kernel

00:16:08,450 --> 00:16:16,459
are are actually important to members

00:16:13,540 --> 00:16:18,440
for example on the current branch that's

00:16:16,459 --> 00:16:22,400
based on 4.4

00:16:18,440 --> 00:16:26,560
are only using the arm I'm 64 and x86

00:16:22,400 --> 00:16:29,000
architectures so any bugs you know the

00:16:26,560 --> 00:16:30,560
that affect other architectures are

00:16:29,000 --> 00:16:32,330
simply irrelevant they don't need to be

00:16:30,560 --> 00:16:39,170
reviewed they won't need to be Bank

00:16:32,330 --> 00:16:41,600
porters and most drivers most file

00:16:39,170 --> 00:16:43,970
systems and all the different network

00:16:41,600 --> 00:16:47,450
protocols in the kernel only a small

00:16:43,970 --> 00:16:51,110
subset of those would need to meet

00:16:47,450 --> 00:16:53,060
maintains in the CIP bronze so this

00:16:51,110 --> 00:16:56,270
should greatly reduce the overall effort

00:16:53,060 --> 00:17:00,400
required in bank porting and in

00:16:56,270 --> 00:17:04,510
reviewing fixes compared to a regular

00:17:00,400 --> 00:17:04,510
stable or long-term stable branch

00:17:06,220 --> 00:17:13,760
secondly any any long-term stable branch

00:17:10,459 --> 00:17:15,920
if you look at the get history and

00:17:13,760 --> 00:17:18,560
compare how many changes are going into

00:17:15,920 --> 00:17:21,970
each update you can you can easily see

00:17:18,560 --> 00:17:25,010
that the rate of fixes that's needed

00:17:21,970 --> 00:17:27,860
reduces over time of course there's a

00:17:25,010 --> 00:17:34,190
finite number of bugs any given release

00:17:27,860 --> 00:17:35,510
and there's so more of them get fixed

00:17:34,190 --> 00:17:39,980
therefore you of them are left to fix

00:17:35,510 --> 00:17:41,930
pretty simple arithmetic so a lot of

00:17:39,980 --> 00:17:44,120
folks get fixed within just once release

00:17:41,930 --> 00:17:46,400
cycle most of the remainder within a

00:17:44,120 --> 00:17:50,060
year well the major bugs get fixed

00:17:46,400 --> 00:17:52,940
within a year after five or six years at

00:17:50,060 --> 00:17:56,060
the end of a long term support branch

00:17:52,940 --> 00:18:00,470
there will be a much much smaller number

00:17:56,060 --> 00:18:02,720
of bugs a number of major bugs to fix up

00:18:00,470 --> 00:18:06,320
steam kernel developers can and mostly

00:18:02,720 --> 00:18:09,770
do help stable maintainer z' to filter

00:18:06,320 --> 00:18:11,950
out inapplicable fixes by including

00:18:09,770 --> 00:18:14,420
information in their commit message

00:18:11,950 --> 00:18:17,230
which commits or kernel version

00:18:14,420 --> 00:18:21,650
introduced the bug that they're fixing

00:18:17,230 --> 00:18:24,290
so although bug fixes will get harder to

00:18:21,650 --> 00:18:27,190
backports over the years there will be a

00:18:24,290 --> 00:18:30,050
lot of fewer of them to deal with and

00:18:27,190 --> 00:18:31,100
the bugs that get found later will tend

00:18:30,050 --> 00:18:34,610
to be more

00:18:31,100 --> 00:18:37,250
obscure things some of those obscure

00:18:34,610 --> 00:18:39,820
things are unfortunately security issues

00:18:37,250 --> 00:18:42,230
that quite probably do need to be fixed

00:18:39,820 --> 00:18:44,240
but obscure issues that don't have

00:18:42,230 --> 00:18:48,260
security significance and don't have a

00:18:44,240 --> 00:18:53,260
safety significance might not be worth

00:18:48,260 --> 00:18:53,260
backporting to to an older branch

00:18:54,250 --> 00:19:04,789
and third major point is this is this is

00:19:01,520 --> 00:19:08,270
a collaboration although I'm currently

00:19:04,789 --> 00:19:10,760
maintaining the CIP kernel I'm going to

00:19:08,270 --> 00:19:14,030
be handing it over to developers from

00:19:10,760 --> 00:19:19,220
the various members over the next year

00:19:14,030 --> 00:19:21,679
or so so the members of CRP are not

00:19:19,220 --> 00:19:23,840
going to be customers who have to

00:19:21,679 --> 00:19:27,770
negotiate or plead with their vendor to

00:19:23,840 --> 00:19:30,409
keep supporting an operating system when

00:19:27,770 --> 00:19:33,650
the vendor and its developers really

00:19:30,409 --> 00:19:36,230
like to move on to something else it's

00:19:33,650 --> 00:19:38,840
an open source project and developers

00:19:36,230 --> 00:19:41,419
from all members can take responsibility

00:19:38,840 --> 00:19:46,510
for fixing the the things that they're

00:19:41,419 --> 00:19:49,640
the members need to get fixed while also

00:19:46,510 --> 00:19:54,860
pooling and sharing the the work they do

00:19:49,640 --> 00:19:57,289
on common areas of the kernel so

00:19:54,860 --> 00:20:00,230
ultimately the lifetime of our CIP

00:19:57,289 --> 00:20:02,659
kernel branch will be determined by the

00:20:00,230 --> 00:20:06,860
the interests and the capability and the

00:20:02,659 --> 00:20:09,220
will of its members to keep to keep it

00:20:06,860 --> 00:20:09,220
going

00:20:13,830 --> 00:20:19,360
Celeste yeah that's basically about it

00:20:17,320 --> 00:20:20,500
what we have to say we don't need to

00:20:19,360 --> 00:20:25,060
spend the time if you don't want to

00:20:20,500 --> 00:20:28,090
right now we we dare leave early since

00:20:25,060 --> 00:20:30,460
we know this is a interesting topic for

00:20:28,090 --> 00:20:33,250
many we have about 15 minutes for 4

00:20:30,460 --> 00:20:35,350
questions I think that was a most

00:20:33,250 --> 00:20:40,480
relevant and interesting part for 4 so

00:20:35,350 --> 00:20:46,770
any question should I hand over there

00:20:40,480 --> 00:20:46,770
well I repeat the question anybody ok

00:20:51,240 --> 00:20:56,190
the question is if we do we have a

00:20:54,130 --> 00:21:02,110
strategy for testing

00:20:56,190 --> 00:21:05,110
ok beside taking care of a kernel

00:21:02,110 --> 00:21:07,620
maintenance we we also take care of the

00:21:05,110 --> 00:21:13,300
testing the kernel testing for now

00:21:07,620 --> 00:21:17,490
within CIP yes we do have a strategy we

00:21:13,300 --> 00:21:22,330
have some actions we just release an

00:21:17,490 --> 00:21:26,050
implementation of kernel CI there or to

00:21:22,330 --> 00:21:28,090
try to test the kernel locally as a

00:21:26,050 --> 00:21:31,030
first step towards having a shared

00:21:28,090 --> 00:21:35,650
common a common share service that

00:21:31,030 --> 00:21:38,020
everybody in CIP can use so in terms of

00:21:35,650 --> 00:21:39,670
service architecture for testing yes we

00:21:38,020 --> 00:21:44,200
do have a strategy in terms of tooling

00:21:39,670 --> 00:21:46,060
also now the hard part comes most of

00:21:44,200 --> 00:21:48,130
what it's out there is very focused on

00:21:46,060 --> 00:21:51,060
on in terms of testing the kernel in

00:21:48,130 --> 00:21:54,250
development not so much on maintenance

00:21:51,060 --> 00:21:56,460
so that's an open question that we all

00:21:54,250 --> 00:21:59,230
need to figure out by ourselves

00:21:56,460 --> 00:22:00,850
but well not by yourself with with

00:21:59,230 --> 00:22:03,010
others also because this is becoming a

00:22:00,850 --> 00:22:05,920
topic also for AGL and other groups out

00:22:03,010 --> 00:22:07,930
there but it's we are just taking the

00:22:05,920 --> 00:22:12,930
first few steps so we don't have any

00:22:07,930 --> 00:22:12,930
real conclusion and that part yet

00:22:29,780 --> 00:22:36,320
the question is if it would be a better

00:22:31,910 --> 00:22:40,090
strategy to sorry to noose a New York

00:22:36,320 --> 00:22:42,710
colonel and then forward for the drivers

00:22:40,090 --> 00:22:50,030
if it if they are missing I leave that

00:22:42,710 --> 00:22:54,050
to you that may well be easier from a

00:22:50,030 --> 00:22:59,780
development point of view but CRP

00:22:54,050 --> 00:23:02,570
members have to consider that's a much

00:22:59,780 --> 00:23:08,600
larger code change and that likely means

00:23:02,570 --> 00:23:13,040
that regulations will mandate that a

00:23:08,600 --> 00:23:16,940
larger a much longer period of testing

00:23:13,040 --> 00:23:23,390
and and recertification so that's

00:23:16,940 --> 00:23:26,150
something that's that is is not not

00:23:23,390 --> 00:23:30,230
necessarily so easy in the areas where

00:23:26,150 --> 00:23:32,450
we're CIA members are working I would

00:23:30,230 --> 00:23:36,560
add to that that we are currently

00:23:32,450 --> 00:23:42,560
focused on one Colonel 4.4 but obviously

00:23:36,560 --> 00:23:44,480
over time we will have more in I mean

00:23:42,560 --> 00:23:47,330
the the members are developing products

00:23:44,480 --> 00:23:49,700
in a continuous basis so at some point

00:23:47,330 --> 00:23:51,820
they will we will have to start at a

00:23:49,700 --> 00:23:54,410
point in which it makes no sense to

00:23:51,820 --> 00:23:57,170
start by porting because the hardware

00:23:54,410 --> 00:23:59,870
support will not allow it so we will

00:23:57,170 --> 00:24:01,940
have to have another colonel in two

00:23:59,870 --> 00:24:04,700
three years that's still undetermined

00:24:01,940 --> 00:24:12,820
so CIP will maintain more than one

00:24:04,700 --> 00:24:12,820
colonel over time any other question

00:24:32,270 --> 00:24:39,200
the question is if we expect to solve

00:24:35,210 --> 00:24:41,590
the the year 2038 issues also in

00:24:39,200 --> 00:24:41,590
userspace

00:24:44,650 --> 00:24:54,380
it's a big issue for members we are we

00:24:51,230 --> 00:24:59,870
we have identified year 2038 as a big

00:24:54,380 --> 00:25:01,820
topic within CIP and we have clearly

00:24:59,870 --> 00:25:04,190
identified that as an action point from

00:25:01,820 --> 00:25:05,960
our side also we cannot just wait for

00:25:04,190 --> 00:25:09,590
the community to do it at their own

00:25:05,960 --> 00:25:12,350
schedule and best effort basis and there

00:25:09,590 --> 00:25:16,720
are some already ongoing activities from

00:25:12,350 --> 00:25:19,850
members in that in that particular area

00:25:16,720 --> 00:25:24,770
within CIP is something that we have

00:25:19,850 --> 00:25:28,880
discussed for some time in this event

00:25:24,770 --> 00:25:31,340
and I we are expecting some actions

00:25:28,880 --> 00:25:32,140
taken in that direction sooner than

00:25:31,340 --> 00:25:37,550
later

00:25:32,140 --> 00:25:40,040
currently yeah it just identified that

00:25:37,550 --> 00:25:43,429
as a priority with these big companies

00:25:40,040 --> 00:25:45,800
is is a huge step and I think that

00:25:43,429 --> 00:25:48,590
acting on the on it it's sometimes

00:25:45,800 --> 00:25:50,630
easier than understanding and realizing

00:25:48,590 --> 00:25:53,540
within the group that that's that is a

00:25:50,630 --> 00:25:57,370
problem and that we prioritize that as a

00:25:53,540 --> 00:26:01,280
need so I'm very very positive about CIP

00:25:57,370 --> 00:26:02,900
helping the more wider community in this

00:26:01,280 --> 00:26:07,570
regard because obviously it's an issue

00:26:02,900 --> 00:26:07,570
for for some of the companies yes

00:26:22,210 --> 00:26:31,630
it has to happen in in mainline right

00:26:26,200 --> 00:26:33,720
and we have to backported its well if

00:26:31,630 --> 00:26:38,920
you were this morning the talk it was

00:26:33,720 --> 00:26:40,600
upstream first policy and n also we have

00:26:38,920 --> 00:26:42,610
a policies in the kernel that clearly

00:26:40,600 --> 00:26:44,320
state that if it's not a mainline

00:26:42,610 --> 00:26:47,440
we shall not back ported obviously for

00:26:44,320 --> 00:26:49,360
hardware support we have some I would

00:26:47,440 --> 00:26:54,100
call it exceptions that are not really

00:26:49,360 --> 00:26:56,200
exceptions but but yeah yeah it's a we

00:26:54,100 --> 00:26:59,380
are not gonna do this for ourself and

00:26:56,200 --> 00:27:00,540
then offer it to the community we are

00:26:59,380 --> 00:27:02,740
gonna do it

00:27:00,540 --> 00:27:05,680
within the kernel community and then

00:27:02,740 --> 00:27:07,450
figure out how we're gonna consume it so

00:27:05,680 --> 00:27:09,880
it can be the case for instance in which

00:27:07,450 --> 00:27:12,700
we fix issues for twenty thirty eight

00:27:09,880 --> 00:27:15,310
and cannot be back ported he he

00:27:12,700 --> 00:27:17,340
mentioned that risk so hey it's it's how

00:27:15,310 --> 00:27:21,030
it works in any case we will be

00:27:17,340 --> 00:27:21,030
benefiting the members

00:27:29,630 --> 00:27:35,809
yes you can use it and the reason why

00:27:34,070 --> 00:27:38,270
you can use it is not just because we

00:27:35,809 --> 00:27:42,020
have a credible maintainer behind it but

00:27:38,270 --> 00:27:46,490
the current members have plans to ship

00:27:42,020 --> 00:27:48,820
it on products well more than plants I

00:27:46,490 --> 00:27:48,820
will say

00:27:57,910 --> 00:28:01,830
sorry I'm not hearing you sorry

00:28:08,350 --> 00:28:12,610
the question if if there is an

00:28:09,880 --> 00:28:14,070
estimation of companies that might need

00:28:12,610 --> 00:28:16,510
this in order to estimate the

00:28:14,070 --> 00:28:19,810
development effort that will be put into

00:28:16,510 --> 00:28:21,520
this and no I don't but if you think

00:28:19,810 --> 00:28:25,320
about the three companies that are

00:28:21,520 --> 00:28:29,020
labeled there tashera hit aegean Siemens

00:28:25,320 --> 00:28:32,140
if they as they are doing clearly state

00:28:29,020 --> 00:28:34,260
in public that they are shipping the the

00:28:32,140 --> 00:28:36,940
kernel and they keep working in the open

00:28:34,260 --> 00:28:40,180
for the core parts I think that it's a

00:28:36,940 --> 00:28:43,870
quite strong big development effort

00:28:40,180 --> 00:28:45,190
behind that it's a matter of wait and

00:28:43,870 --> 00:28:47,620
see obviously like everything in the

00:28:45,190 --> 00:28:50,310
open but so far I'm I'm quite positive

00:28:47,620 --> 00:28:50,310
about that

00:29:16,090 --> 00:29:22,810
right so he started with four point four

00:29:19,070 --> 00:29:27,470
because that was at the time the the

00:29:22,810 --> 00:29:30,710
latest stable kernel that had long-term

00:29:27,470 --> 00:29:33,190
support which at that time we expected

00:29:30,710 --> 00:29:33,190
been two years

00:29:34,420 --> 00:29:41,060
for now the CIP branch is is tracking

00:29:38,870 --> 00:29:46,250
the four point four long-term stable

00:29:41,060 --> 00:29:49,120
branch we and adds some back ported

00:29:46,250 --> 00:29:53,360
hardware supports and a few Bank porters

00:29:49,120 --> 00:29:58,480
in husbands from the kernel self

00:29:53,360 --> 00:30:00,920
protection project so all the fixes from

00:29:58,480 --> 00:30:03,370
4.4 stable are going to four point four

00:30:00,920 --> 00:30:03,370
CIP

00:30:09,130 --> 00:30:17,350
yes it is sorry the question he was

00:30:14,080 --> 00:30:21,220
asked asking is if everything from the

00:30:17,350 --> 00:30:25,200
LTS has been taken into the CIP kernel

00:30:21,220 --> 00:30:25,200
and the answer was yes it has

00:30:47,840 --> 00:30:54,229
we have taken up the same approach on

00:30:49,969 --> 00:30:55,820
LTS at this point we are also he has

00:30:54,229 --> 00:31:00,799
been reviewing the configurations of

00:30:55,820 --> 00:31:03,320
members in order to understand what kind

00:31:00,799 --> 00:31:06,080
of features we will have to support over

00:31:03,320 --> 00:31:08,749
time I mean the idea of portal for be in

00:31:06,080 --> 00:31:10,299
six years it's just pretty recent so we

00:31:08,749 --> 00:31:12,619
were expecting this year to take

00:31:10,299 --> 00:31:15,679
ownership basically of the cone of the

00:31:12,619 --> 00:31:16,190
kernel right so it's it give us some

00:31:15,679 --> 00:31:20,029
more time

00:31:16,190 --> 00:31:23,029
to to adapt ourselves and learn in this

00:31:20,029 --> 00:31:25,129
strategy of pushing the current LTS

00:31:23,029 --> 00:31:27,589
model farther and farther and let's see

00:31:25,129 --> 00:31:29,599
how how it goes and until when and how

00:31:27,589 --> 00:31:32,149
much we learn out of it say you're

00:31:29,599 --> 00:31:35,509
asking you're saying that sometimes

00:31:32,149 --> 00:31:40,159
customers want the last kernel plus some

00:31:35,509 --> 00:31:44,269
small and some selected fixes as I said

00:31:40,159 --> 00:31:48,320
CRP is not a vendor to customers so in

00:31:44,269 --> 00:31:50,059
effect the the the members are going to

00:31:48,320 --> 00:31:53,200
be their own customers and if their

00:31:50,059 --> 00:31:56,320
developers if they want can can

00:31:53,200 --> 00:32:01,129
cherry-pick fixes in a short term for

00:31:56,320 --> 00:32:04,219
any internal kernel tree but the

00:32:01,129 --> 00:32:05,659
expectation is that in the longer term

00:32:04,219 --> 00:32:09,519
they're going to be up they're going to

00:32:05,659 --> 00:32:11,570
be taking everything from the CIP branch

00:32:09,519 --> 00:32:16,519
which for the moment means everything

00:32:11,570 --> 00:32:23,019
from the long-term stable branch any

00:32:16,519 --> 00:32:27,669
other question we have five minutes no

00:32:23,019 --> 00:32:27,669
three oh yes we have one

00:32:35,269 --> 00:32:39,019
the question is what are the main

00:32:36,740 --> 00:32:42,799
difference between the Debian kernel

00:32:39,019 --> 00:32:47,210
maintenance policies and the CIP kernel

00:32:42,799 --> 00:32:50,299
maintenance policies the main the main

00:32:47,210 --> 00:32:52,100
difference then would be the Debian is

00:32:50,299 --> 00:32:55,789
training type of firstly diminished

00:32:52,100 --> 00:32:59,869
building is shipping by new packages so

00:32:55,789 --> 00:33:01,850
it's selecting a configuration which in

00:32:59,869 --> 00:33:03,350
general turns on pretty much all the

00:33:01,850 --> 00:33:09,230
features as long as they're not going to

00:33:03,350 --> 00:33:16,159
have huge performance impacts for little

00:33:09,230 --> 00:33:19,009
for an obscure feature and Debian also

00:33:16,159 --> 00:33:24,289
tries to avoid API breaks which that is

00:33:19,009 --> 00:33:25,879
not a not a concern for CIP at all but

00:33:24,289 --> 00:33:30,889
there is a quite a lot of commonality in

00:33:25,879 --> 00:33:35,600
the Debian says upstream first Damion

00:33:30,889 --> 00:33:45,879
does does allow for backwards hardware

00:33:35,600 --> 00:33:45,879
support does that answer your question

00:33:46,509 --> 00:33:55,039
do we have time for one last question

00:33:48,590 --> 00:33:57,889
probably any final comment from your

00:33:55,039 --> 00:33:59,070
side then now thank you very much for

00:33:57,889 --> 00:34:02,950
coming we're done thank you

00:33:59,070 --> 00:34:02,950

YouTube URL: https://www.youtube.com/watch?v=9YhbZtQx1WA


