Title: Focused on Security Measures in Kubernetes Environment - Hiroki Akiba, OGIS-RI Co.,Ltd.
Publication date: 2020-12-04
Playlist: Open Source Summit Japan & Automotive Linux Summit 2020
Description: 
	Focused on Security Measures in Kubernetes Environment - Hiroki Akiba, OGIS-RI Co.,Ltd.
Captions: 
	00:00:06,560 --> 00:00:10,400
hello everyone

00:00:08,240 --> 00:00:11,840
i'll talk about security measures to

00:00:10,400 --> 00:00:15,200
consider pain using

00:00:11,840 --> 00:00:17,760
kubernetes you know that

00:00:15,200 --> 00:00:20,800
is the default standard for container

00:00:17,760 --> 00:00:23,840
management platform orchestration tool

00:00:20,800 --> 00:00:24,880
i will talk about 30 minutes from now i

00:00:23,840 --> 00:00:31,840
would be grateful

00:00:24,880 --> 00:00:31,840
if you could listen to it till the end

00:00:32,079 --> 00:00:36,480
my name is hiroki akiba i work for a

00:00:35,440 --> 00:00:39,600
company called

00:00:36,480 --> 00:00:41,920
audis icon roi in japan we have

00:00:39,600 --> 00:00:44,160
providing total solutions matched to

00:00:41,920 --> 00:00:46,160
each and every client

00:00:44,160 --> 00:00:48,160
we have providing id strategy

00:00:46,160 --> 00:00:51,440
development and consulting

00:00:48,160 --> 00:00:54,079
system design operation and management

00:00:51,440 --> 00:00:55,360
seamless and integrated solutions for

00:00:54,079 --> 00:00:57,760
client

00:00:55,360 --> 00:00:58,480
we are silver members of kubernetes

00:00:57,760 --> 00:01:01,520
certified

00:00:58,480 --> 00:01:01,520
service provider

00:01:02,879 --> 00:01:07,040
today's agenda first let's talk about

00:01:06,400 --> 00:01:08,799
the

00:01:07,040 --> 00:01:10,400
options for running the typical

00:01:08,799 --> 00:01:13,760
equivalent content management

00:01:10,400 --> 00:01:16,640
tools in a production environment next

00:01:13,760 --> 00:01:17,360
i talk about what cloud native security

00:01:16,640 --> 00:01:20,799
tools

00:01:17,360 --> 00:01:24,000
along with public cloud service like aws

00:01:20,799 --> 00:01:26,000
and cabinet security features and the

00:01:24,000 --> 00:01:27,119
global native computing foundation

00:01:26,000 --> 00:01:31,360
ecosystem and

00:01:27,119 --> 00:01:33,280
more next i talk about how to make about

00:01:31,360 --> 00:01:34,240
security measures for the kubernetes

00:01:33,280 --> 00:01:36,320
environment

00:01:34,240 --> 00:01:37,280
while using cloud native security

00:01:36,320 --> 00:01:41,840
measures

00:01:37,280 --> 00:01:41,840
and cloud vendor solutions and more

00:01:43,680 --> 00:01:46,960
let's combine the options for running

00:01:46,320 --> 00:01:49,200
the

00:01:46,960 --> 00:01:52,560
kubernetes container management tools in

00:01:49,200 --> 00:01:52,560
a production environment

00:01:53,680 --> 00:01:57,680
this is taken from the coordinative

00:01:55,680 --> 00:01:58,240
computing foundation family report

00:01:57,680 --> 00:02:02,320
published

00:01:58,240 --> 00:02:04,640
this year looking at this sub-level

00:02:02,320 --> 00:02:06,960
we can see that many companies use

00:02:04,640 --> 00:02:10,160
public cloud manager service such as

00:02:06,960 --> 00:02:13,760
enable cks gcp gke

00:02:10,160 --> 00:02:15,520
agile aks and so on

00:02:13,760 --> 00:02:17,840
many companies use the content

00:02:15,520 --> 00:02:19,120
management types provided by each public

00:02:17,840 --> 00:02:21,680
cloud vendor

00:02:19,120 --> 00:02:23,840
instead of building and operating a

00:02:21,680 --> 00:02:27,040
container management platform from

00:02:23,840 --> 00:02:27,040
scratch yourself

00:02:28,319 --> 00:02:33,120
even with the control management tools

00:02:30,640 --> 00:02:34,959
of each public cloud vendor

00:02:33,120 --> 00:02:38,319
there is a responsibility between the

00:02:34,959 --> 00:02:40,560
public cloud vendor and the user

00:02:38,319 --> 00:02:43,120
this is a shared responsibility model

00:02:40,560 --> 00:02:46,959
published by each cloud vendor such as

00:02:43,120 --> 00:02:49,040
aws ggp and azure

00:02:46,959 --> 00:02:50,319
photo public cloud vendors have in

00:02:49,040 --> 00:02:52,959
common is that

00:02:50,319 --> 00:02:53,840
facility layers such as physical server

00:02:52,959 --> 00:02:56,400
storage and

00:02:53,840 --> 00:02:59,440
networks are the responsibility of the

00:02:56,400 --> 00:02:59,440
public cloud vendor

00:03:01,200 --> 00:03:07,120
for example let's talk about aws

00:03:05,040 --> 00:03:08,159
when building and operating a container

00:03:07,120 --> 00:03:10,720
environment that

00:03:08,159 --> 00:03:12,400
takes ability and world tourism into

00:03:10,720 --> 00:03:15,280
consideration

00:03:12,400 --> 00:03:16,000
there are two main options one is the

00:03:15,280 --> 00:03:18,400
pattern of

00:03:16,000 --> 00:03:20,800
using container management solution

00:03:18,400 --> 00:03:23,360
provided by aws

00:03:20,800 --> 00:03:25,920
the other pattern that doesn't use

00:03:23,360 --> 00:03:28,720
address management solutions

00:03:25,920 --> 00:03:29,519
it's building an operating kubernetes or

00:03:28,720 --> 00:03:33,120
openshift

00:03:29,519 --> 00:03:35,120
environment on the eg2 server

00:03:33,120 --> 00:03:36,480
when using the container management

00:03:35,120 --> 00:03:40,159
solution provided by

00:03:36,480 --> 00:03:43,519
aws there are two additional options to

00:03:40,159 --> 00:03:46,400
use egs or eks

00:03:43,519 --> 00:03:46,879
the advantage of using these two options

00:03:46,400 --> 00:03:48,959
is

00:03:46,879 --> 00:03:51,120
that you can leave the controller

00:03:48,959 --> 00:03:52,560
controller orchestration to a managed

00:03:51,120 --> 00:03:55,599
service

00:03:52,560 --> 00:03:58,480
in addition there you should type on

00:03:55,599 --> 00:04:00,560
target type in the work node layer where

00:03:58,480 --> 00:04:04,319
workloads such as web applications

00:04:00,560 --> 00:04:07,360
run in the case of easy to type

00:04:04,319 --> 00:04:07,840
the user operates the worker node in the

00:04:07,360 --> 00:04:12,720
case of

00:04:07,840 --> 00:04:12,720
target type analyst replaces the worker

00:04:12,840 --> 00:04:16,639
node

00:04:14,239 --> 00:04:19,280
i have a map research responsibility

00:04:16,639 --> 00:04:20,560
model with and without address gs and

00:04:19,280 --> 00:04:23,520
requests

00:04:20,560 --> 00:04:25,040
adwords is responsible for the operation

00:04:23,520 --> 00:04:28,160
and management of

00:04:25,040 --> 00:04:31,199
the orange part are

00:04:28,160 --> 00:04:34,800
managed by the user in the

00:04:31,199 --> 00:04:37,360
type of vgs and the case adapters have

00:04:34,800 --> 00:04:38,320
the responsibility for which is several

00:04:37,360 --> 00:04:41,520
workers that

00:04:38,320 --> 00:04:44,160
runs a container including docker engine

00:04:41,520 --> 00:04:45,600
and let's manage the operation visit

00:04:44,160 --> 00:04:47,919
subaru

00:04:45,600 --> 00:04:49,199
so there is a possibility that patch

00:04:47,919 --> 00:04:51,840
application will shoot

00:04:49,199 --> 00:04:54,080
server and usage free of vision server

00:04:51,840 --> 00:04:56,479
can be made more efficient

00:04:54,080 --> 00:04:57,199
but the product type takes a long time

00:04:56,479 --> 00:04:59,680
to start

00:04:57,199 --> 00:05:01,680
because it starts from the os when

00:04:59,680 --> 00:05:04,880
deploying the container

00:05:01,680 --> 00:05:08,160
in the case of word type this kind of

00:05:04,880 --> 00:05:08,160
consideration is necessary

00:05:09,759 --> 00:05:13,120
from here let's talk about security

00:05:12,400 --> 00:05:15,199
solutions

00:05:13,120 --> 00:05:16,400
in the coordinative computing foundation

00:05:15,199 --> 00:05:18,160
landscape and

00:05:16,400 --> 00:05:21,680
security consideration for the

00:05:18,160 --> 00:05:21,680
kubernetes container platform

00:05:23,440 --> 00:05:28,320
it's a copy of the security and compress

00:05:26,080 --> 00:05:29,440
of the cloud native competing foundation

00:05:28,320 --> 00:05:32,720
landscape

00:05:29,440 --> 00:05:35,280
as of november 2nd 2020

00:05:32,720 --> 00:05:36,160
the solutions presented in green provide

00:05:35,280 --> 00:05:38,960
a variety of

00:05:36,160 --> 00:05:39,360
tools that can be used with voices and

00:05:38,960 --> 00:05:43,039
paid

00:05:39,360 --> 00:05:46,639
tools cells and consulting solutions

00:05:43,039 --> 00:05:49,919
for example parkly's oss auditing

00:05:46,639 --> 00:05:53,600
tools recently incubated

00:05:49,919 --> 00:05:56,720
bench is a crs kubernetes benchmark tool

00:05:53,600 --> 00:05:59,280
copy hunter is a penetration test tool

00:05:56,720 --> 00:06:00,080
3b is a container image binary check

00:05:59,280 --> 00:06:02,000
tool

00:06:00,080 --> 00:06:04,800
they are being developed by aqua

00:06:02,000 --> 00:06:07,440
security as oss

00:06:04,800 --> 00:06:09,520
clear is implemented as a country major

00:06:07,440 --> 00:06:12,479
biology checks

00:06:09,520 --> 00:06:13,039
egr sydney and the parliament are

00:06:12,479 --> 00:06:15,520
developed

00:06:13,039 --> 00:06:16,160
and requiring pet integrated security

00:06:15,520 --> 00:06:19,759
management

00:06:16,160 --> 00:06:21,520
tool kubernetes has certainly matured

00:06:19,759 --> 00:06:22,960
into a very arctic container

00:06:21,520 --> 00:06:25,919
orchestration platform

00:06:22,960 --> 00:06:27,280
also it renaming complex to manage and

00:06:25,919 --> 00:06:29,360
secure

00:06:27,280 --> 00:06:32,840
we must implement a comprehensive

00:06:29,360 --> 00:06:35,840
approach to securing our current

00:06:32,840 --> 00:06:35,840
workload

00:06:36,240 --> 00:06:39,759
first of all when considering security

00:06:38,800 --> 00:06:41,759
measures

00:06:39,759 --> 00:06:44,560
it's important to understand what kind

00:06:41,759 --> 00:06:47,520
of security threat existing kubernetes

00:06:44,560 --> 00:06:49,680
this fear is except from already

00:06:47,520 --> 00:06:50,560
featured on the kubernetes iphone

00:06:49,680 --> 00:06:54,160
security dot

00:06:50,560 --> 00:06:56,319
in-home website it showed that many of

00:06:54,160 --> 00:06:57,919
the components that make up kubernetes

00:06:56,319 --> 00:07:01,039
cluster are vulnerable to

00:06:57,919 --> 00:07:02,400
malicious attacks from the outside for

00:07:01,039 --> 00:07:04,560
example

00:07:02,400 --> 00:07:05,919
attacks on security forcing control

00:07:04,560 --> 00:07:09,840
plane work node

00:07:05,919 --> 00:07:10,479
and continents and so on there is a risk

00:07:09,840 --> 00:07:14,840
of

00:07:10,479 --> 00:07:17,840
being exposed to attacks due to security

00:07:14,840 --> 00:07:17,840
misconfiguration

00:07:18,720 --> 00:07:22,479
on the left there are boundaries where

00:07:21,360 --> 00:07:24,720
security should be

00:07:22,479 --> 00:07:26,319
considered for each component of

00:07:24,720 --> 00:07:28,639
kubernetes crystal

00:07:26,319 --> 00:07:30,080
on the right i'd like to organize

00:07:28,639 --> 00:07:33,280
security measures into

00:07:30,080 --> 00:07:35,840
10 security categories for example

00:07:33,280 --> 00:07:36,960
on the public cloud next cluster

00:07:35,840 --> 00:07:39,840
consists of

00:07:36,960 --> 00:07:41,360
master node and worker node inside the

00:07:39,840 --> 00:07:44,160
kubernetes cluster

00:07:41,360 --> 00:07:44,720
it's logically divided by name namespace

00:07:44,160 --> 00:07:47,280
but

00:07:44,720 --> 00:07:49,280
the containers are running it it's

00:07:47,280 --> 00:07:49,840
important to consider which security

00:07:49,280 --> 00:07:52,240
measures

00:07:49,840 --> 00:07:53,840
while being around these kubernetes

00:07:52,240 --> 00:07:55,759
boundaries

00:07:53,840 --> 00:07:57,599
it's not safe to protect only one

00:07:55,759 --> 00:07:59,759
specific place

00:07:57,599 --> 00:08:01,199
but it's important to take measure to

00:07:59,759 --> 00:08:03,919
minimize the brush radius

00:08:01,199 --> 00:08:04,879
by depending in depth even if malicious

00:08:03,919 --> 00:08:07,440
attacks is

00:08:04,879 --> 00:08:07,440
performed

00:08:10,240 --> 00:08:13,360
on the left there are 10 security

00:08:12,639 --> 00:08:16,240
categories

00:08:13,360 --> 00:08:18,639
i have classified i arranged the

00:08:16,240 --> 00:08:20,479
corresponding each source and solution

00:08:18,639 --> 00:08:23,280
side by side

00:08:20,479 --> 00:08:24,000
from the left public cloud layer for

00:08:23,280 --> 00:08:27,280
example

00:08:24,000 --> 00:08:31,280
address security services next

00:08:27,280 --> 00:08:34,640
features of kubernetes next ecosystem of

00:08:31,280 --> 00:08:37,919
cloud native computing foundation about

00:08:34,640 --> 00:08:41,120
advanced public cloud use a

00:08:37,919 --> 00:08:43,599
whole authentication and authorization

00:08:41,120 --> 00:08:45,279
use inspector as a minority

00:08:43,599 --> 00:08:48,480
countermeasure

00:08:45,279 --> 00:08:48,880
use graduative machine and security hub

00:08:48,480 --> 00:08:52,080
for

00:08:48,880 --> 00:08:55,600
governance and compliance applications

00:08:52,080 --> 00:08:59,040
about kubernetes use service account or

00:08:55,600 --> 00:09:02,240
local authentication and authorization

00:08:59,040 --> 00:09:04,399
use network purchase as a firewall

00:09:02,240 --> 00:09:08,160
use resource quota or limit length to

00:09:04,399 --> 00:09:10,160
limit cpu or memory resource usage

00:09:08,160 --> 00:09:12,000
about ecosystem of cloud native

00:09:10,160 --> 00:09:15,200
computing foundation

00:09:12,000 --> 00:09:18,720
consider when you want other extent

00:09:15,200 --> 00:09:20,000
features on cleverness if you want to

00:09:18,720 --> 00:09:22,800
centrally manage

00:09:20,000 --> 00:09:24,320
authentication authorization governance

00:09:22,800 --> 00:09:27,519
and components

00:09:24,320 --> 00:09:30,160
you can use open pursuit agent

00:09:27,519 --> 00:09:31,519
if you want to control communication and

00:09:30,160 --> 00:09:34,560
encrypt between ports

00:09:31,519 --> 00:09:38,240
at layer 7 or higher you can

00:09:34,560 --> 00:09:40,160
use steel and emboss if you want

00:09:38,240 --> 00:09:42,080
comprehensive security measurable

00:09:40,160 --> 00:09:44,720
container for life cycle

00:09:42,080 --> 00:09:45,120
i think you should buy pet products such

00:09:44,720 --> 00:09:51,760
as

00:09:45,120 --> 00:09:54,560
aqua or parato or shiswig

00:09:51,760 --> 00:09:54,959
from here i will talk about the titles

00:09:54,560 --> 00:09:57,680
of

00:09:54,959 --> 00:10:00,320
the measures of 10 security categories

00:09:57,680 --> 00:10:00,320
in order

00:10:02,480 --> 00:10:07,920
in kubernetes there are three major step

00:10:05,040 --> 00:10:10,959
of authentication and authorization

00:10:07,920 --> 00:10:13,120
first is authentication subsecond

00:10:10,959 --> 00:10:14,720
authenticates a pre-request from port

00:10:13,120 --> 00:10:17,360
container program

00:10:14,720 --> 00:10:20,480
user and group authenticates api request

00:10:17,360 --> 00:10:23,360
from external clients and users

00:10:20,480 --> 00:10:25,519
next is authorization the role

00:10:23,360 --> 00:10:26,640
controlled what operations are performed

00:10:25,519 --> 00:10:30,320
on what governance

00:10:26,640 --> 00:10:32,720
resources there are two types of roles

00:10:30,320 --> 00:10:34,959
name space binding or control across the

00:10:32,720 --> 00:10:38,240
kubernetes crystal

00:10:34,959 --> 00:10:40,240
next its admission control governance

00:10:38,240 --> 00:10:41,519
whole api operations on kubernetes

00:10:40,240 --> 00:10:43,839
clusters

00:10:41,519 --> 00:10:45,360
it's gathered for keeping the kubernetes

00:10:43,839 --> 00:10:48,240
cluster safe

00:10:45,360 --> 00:10:48,720
for example even if you make an api

00:10:48,240 --> 00:10:51,440
request

00:10:48,720 --> 00:10:51,760
to deploy a new port and authentication

00:10:51,440 --> 00:10:55,360
and

00:10:51,760 --> 00:10:57,200
authorization are permitted if gpu and

00:10:55,360 --> 00:10:59,519
memory resource code limit settings

00:10:57,200 --> 00:11:02,079
admission control is about

00:10:59,519 --> 00:11:03,680
the deployment of the new pup will be

00:11:02,079 --> 00:11:05,920
diffused

00:11:03,680 --> 00:11:07,040
admission controls are designed to help

00:11:05,920 --> 00:11:09,040
kubernetes admins

00:11:07,040 --> 00:11:10,560
implement security by default

00:11:09,040 --> 00:11:12,800
deployments

00:11:10,560 --> 00:11:15,120
this can save many purposes from

00:11:12,800 --> 00:11:17,279
resource control to provisioning

00:11:15,120 --> 00:11:19,600
as well as security aspects such as

00:11:17,279 --> 00:11:20,160
intercepting requests to the kubernetes

00:11:19,600 --> 00:11:25,360
api

00:11:20,160 --> 00:11:25,360
server before making kubernetes object

00:11:26,800 --> 00:11:29,920
next consider the patterns at which

00:11:29,200 --> 00:11:32,399
boundaries

00:11:29,920 --> 00:11:34,160
the workload should be separate and run

00:11:32,399 --> 00:11:36,399
on kubernetes cursor

00:11:34,160 --> 00:11:37,440
first of all the biggest isolation

00:11:36,399 --> 00:11:39,680
option is to

00:11:37,440 --> 00:11:41,200
run multiple vectors within the same

00:11:39,680 --> 00:11:43,200
kubernetes cluster

00:11:41,200 --> 00:11:45,760
what two isolated buckles across

00:11:43,200 --> 00:11:48,000
multiple fibonacci clusters

00:11:45,760 --> 00:11:50,399
when the vocals is divided among

00:11:48,000 --> 00:11:53,040
multiple kubernetes clusters

00:11:50,399 --> 00:11:54,240
the usage absence of shipping and memory

00:11:53,040 --> 00:11:57,519
resources may be

00:11:54,240 --> 00:11:58,639
low but there is advantage that superior

00:11:57,519 --> 00:12:01,360
and memory resources

00:11:58,639 --> 00:12:02,959
and communication control can be managed

00:12:01,360 --> 00:12:05,680
cheaply

00:12:02,959 --> 00:12:06,160
running multiple workloads within the

00:12:05,680 --> 00:12:08,320
same

00:12:06,160 --> 00:12:10,320
fibonacci cluster there are

00:12:08,320 --> 00:12:11,440
constellation such as whether to

00:12:10,320 --> 00:12:14,880
logically separate

00:12:11,440 --> 00:12:16,720
them by namespaces when logically

00:12:14,880 --> 00:12:19,440
dividing multiple workers by

00:12:16,720 --> 00:12:21,360
namespace communication control and

00:12:19,440 --> 00:12:24,880
resource code can be limited

00:12:21,360 --> 00:12:27,839
by namespace this is useful for

00:12:24,880 --> 00:12:28,959
managing security and governance in

00:12:27,839 --> 00:12:31,200
addition

00:12:28,959 --> 00:12:32,079
you may need to control which port runs

00:12:31,200 --> 00:12:35,440
on which

00:12:32,079 --> 00:12:38,800
work node for example you want to run

00:12:35,440 --> 00:12:40,880
button workout mode with gpu

00:12:38,800 --> 00:12:43,440
you may need to learn multiple work

00:12:40,880 --> 00:12:46,720
nodes controlling the redundancy of

00:12:43,440 --> 00:12:47,680
your web application you may need to run

00:12:46,720 --> 00:12:51,200
the sample

00:12:47,680 --> 00:12:54,000
application same work node in order to

00:12:51,200 --> 00:12:54,240
increase the usage destiny of shipping

00:12:54,000 --> 00:12:57,760
and

00:12:54,240 --> 00:13:00,079
memory resources in some cases

00:12:57,760 --> 00:13:04,000
you may not want to share the same

00:13:00,079 --> 00:13:04,000
storage space between multiple work

00:13:04,839 --> 00:13:10,160
rules

00:13:07,680 --> 00:13:10,880
next let's talk about wire and network

00:13:10,160 --> 00:13:14,079
communication

00:13:10,880 --> 00:13:14,880
encryption they are much to use network

00:13:14,079 --> 00:13:17,839
communication

00:13:14,880 --> 00:13:20,240
in kubernetes cluster there are two

00:13:17,839 --> 00:13:22,480
types of communication

00:13:20,240 --> 00:13:24,480
the guidelines network communication for

00:13:22,480 --> 00:13:26,480
application services

00:13:24,480 --> 00:13:28,560
the red line network communication

00:13:26,480 --> 00:13:31,600
cooperation and maintenance

00:13:28,560 --> 00:13:34,800
of the kubernetes cluster

00:13:31,600 --> 00:13:36,720
in this compilation diagram the worker

00:13:34,800 --> 00:13:38,959
node that runs the workload

00:13:36,720 --> 00:13:40,639
is located in the private network

00:13:38,959 --> 00:13:43,120
segment

00:13:40,639 --> 00:13:43,920
consider whether the must not should

00:13:43,120 --> 00:13:47,360
expose the

00:13:43,920 --> 00:13:49,839
api standpoint to the internet or limit

00:13:47,360 --> 00:13:52,240
api requests only from private network

00:13:49,839 --> 00:13:55,440
segment

00:13:52,240 --> 00:13:57,680
or other communications api

00:13:55,440 --> 00:13:59,600
case from the maintenance server to the

00:13:57,680 --> 00:14:00,720
master node

00:13:59,600 --> 00:14:03,120
network communication to deploy

00:14:00,720 --> 00:14:04,560
departments from master nodes to welcome

00:14:03,120 --> 00:14:06,560
node

00:14:04,560 --> 00:14:07,760
network communication that proves the

00:14:06,560 --> 00:14:11,279
container image from

00:14:07,760 --> 00:14:13,360
the container registry the application

00:14:11,279 --> 00:14:14,000
control running on the welcome node

00:14:13,360 --> 00:14:16,399
connects

00:14:14,000 --> 00:14:18,079
to the database outside kubernetes

00:14:16,399 --> 00:14:21,040
cluster

00:14:18,079 --> 00:14:21,519
per home's https network communication

00:14:21,040 --> 00:14:24,800
from

00:14:21,519 --> 00:14:28,800
the internet via the load balancer

00:14:24,800 --> 00:14:30,560
at its boundary of network communication

00:14:28,800 --> 00:14:32,720
it's necessary to consider network

00:14:30,560 --> 00:14:35,680
communication controlled by file

00:14:32,720 --> 00:14:35,680
and encryption

00:14:38,160 --> 00:14:42,720
next let's talk about encrypting

00:14:40,639 --> 00:14:45,519
strength data

00:14:42,720 --> 00:14:46,399
in kubernetes crystal make two state

00:14:45,519 --> 00:14:50,000
storage with

00:14:46,399 --> 00:14:53,360
constant volume and percent volume claim

00:14:50,000 --> 00:14:54,560
in the case of leaderboards you can use

00:14:53,360 --> 00:14:57,360
percent volume with

00:14:54,560 --> 00:15:00,480
block storage like ebs and network file

00:14:57,360 --> 00:15:03,600
system like elastic file services

00:15:00,480 --> 00:15:05,120
furthermore it's often operated in

00:15:03,600 --> 00:15:08,639
combination with gradually

00:15:05,120 --> 00:15:11,440
storage services for example

00:15:08,639 --> 00:15:12,959
you can use object storage like three

00:15:11,440 --> 00:15:16,800
additional databases like

00:15:12,959 --> 00:15:20,639
rds continuously like share

00:15:16,800 --> 00:15:24,399
github record commit abs

00:15:20,639 --> 00:15:25,040
effect s3 and all this has transparently

00:15:24,399 --> 00:15:27,760
prompt

00:15:25,040 --> 00:15:29,759
server side encryption by enabling

00:15:27,760 --> 00:15:32,480
encrypt options in combination

00:15:29,759 --> 00:15:34,000
with services such as key management

00:15:32,480 --> 00:15:37,519
tool

00:15:34,000 --> 00:15:38,240
consider client side encryption when the

00:15:37,519 --> 00:15:41,759
application

00:15:38,240 --> 00:15:44,240
encrypts and the data and stores between

00:15:41,759 --> 00:15:44,240
storage

00:15:47,279 --> 00:15:52,240
in kubernetes there is a secret object

00:15:49,920 --> 00:15:53,519
resource that handles secret values such

00:15:52,240 --> 00:15:57,519
as running id

00:15:53,519 --> 00:15:59,920
and password to the database however

00:15:57,519 --> 00:16:00,800
this secret objective is also only best

00:15:59,920 --> 00:16:04,000
00:16:00,800 --> 00:16:06,880
x secret value

00:16:04,000 --> 00:16:09,040
it is sufficient for security to save or

00:16:06,880 --> 00:16:10,639
operate it in the guitar personally as

00:16:09,040 --> 00:16:12,639
it is

00:16:10,639 --> 00:16:15,279
it's good to combine cells that can

00:16:12,639 --> 00:16:19,279
manage the secret bodies security

00:16:15,279 --> 00:16:20,720
for example kubernetes external

00:16:19,279 --> 00:16:23,759
cigarettes

00:16:20,720 --> 00:16:26,560
shield cigarette hashtag bird

00:16:23,759 --> 00:16:26,560
and so on

00:16:28,320 --> 00:16:34,399
a brief introduction to shield secret if

00:16:31,519 --> 00:16:36,399
you want to know more details please see

00:16:34,399 --> 00:16:38,880
github directly

00:16:36,399 --> 00:16:41,040
encrypt your secret bodies as sheet

00:16:38,880 --> 00:16:44,000
secret which is safe to store

00:16:41,040 --> 00:16:46,560
even to public repository this user

00:16:44,000 --> 00:16:47,519
secrets can be decrypted only by the

00:16:46,560 --> 00:16:51,600
controller running

00:16:47,519 --> 00:16:53,839
in the target and nobody else is able to

00:16:51,600 --> 00:16:56,079
obtain the original secret bodies from

00:16:53,839 --> 00:16:58,240
the shield cigarette

00:16:56,079 --> 00:17:01,120
you can install using a method such as

00:16:58,240 --> 00:17:03,360
helm chart or customize

00:17:01,120 --> 00:17:04,240
this usually control transparently

00:17:03,360 --> 00:17:07,600
encrypted under

00:17:04,240 --> 00:17:09,760
the secret values industry the secrets

00:17:07,600 --> 00:17:10,319
control allow you to rotate and update

00:17:09,760 --> 00:17:12,720
encrypt

00:17:10,319 --> 00:17:12,720
keys

00:17:14,720 --> 00:17:18,720
this is consideration for managing

00:17:16,799 --> 00:17:20,720
secret values

00:17:18,720 --> 00:17:22,319
don't have code view application and

00:17:20,720 --> 00:17:24,079
manage file

00:17:22,319 --> 00:17:25,600
change the shield part of each

00:17:24,079 --> 00:17:29,200
production and staging

00:17:25,600 --> 00:17:32,880
and development set the expression date

00:17:29,200 --> 00:17:34,799
and rotation of the encrypt key file

00:17:32,880 --> 00:17:37,280
there are several ways to pass should

00:17:34,799 --> 00:17:40,160
parry to the application container

00:17:37,280 --> 00:17:40,880
but it should be passed via the volume

00:17:40,160 --> 00:17:43,280
because

00:17:40,880 --> 00:17:44,960
their case where environment variables

00:17:43,280 --> 00:17:48,720
are written to the log

00:17:44,960 --> 00:17:51,039
when the process crashed in addition

00:17:48,720 --> 00:17:53,200
there case where it can be built with

00:17:51,039 --> 00:17:56,799
the clip control describe port command

00:17:53,200 --> 00:17:56,799
or docker inspect command

00:17:58,799 --> 00:18:03,760
you can use better this is always true

00:18:01,840 --> 00:18:05,760
of blue metals project

00:18:03,760 --> 00:18:07,600
you can use barrier to backup the

00:18:05,760 --> 00:18:09,919
equivalence resource such as percent

00:18:07,600 --> 00:18:12,960
volume development bot and coffee map

00:18:09,919 --> 00:18:15,600
running in kubernetes cluster other safe

00:18:12,960 --> 00:18:17,840
distinction holds backup data

00:18:15,600 --> 00:18:20,080
you can specify the volume of the bell

00:18:17,840 --> 00:18:21,520
server or public cloud banner storage

00:18:20,080 --> 00:18:24,640
with access previews such as

00:18:21,520 --> 00:18:26,640
aws s3 or google street service or

00:18:24,640 --> 00:18:28,799
algebra storage

00:18:26,640 --> 00:18:30,000
if we want to backup object storage and

00:18:28,799 --> 00:18:32,960
regional database of

00:18:30,000 --> 00:18:35,039
public cloud types such as rds and s3

00:18:32,960 --> 00:18:37,440
outside kubernetes cluster

00:18:35,039 --> 00:18:40,480
use the backup function provided by each

00:18:37,440 --> 00:18:40,480
public cloud vendor

00:18:41,679 --> 00:18:45,120
if you are the cleverness workload are

00:18:43,440 --> 00:18:46,960
status you may not

00:18:45,120 --> 00:18:48,799
need to backup the you are running

00:18:46,960 --> 00:18:51,760
kubernetes resource

00:18:48,799 --> 00:18:52,160
for example if you have made a github

00:18:51,760 --> 00:18:55,440
scene

00:18:52,160 --> 00:18:56,000
using pipeline all your application code

00:18:55,440 --> 00:18:57,679
and manage

00:18:56,000 --> 00:18:59,039
configuration file are in the git

00:18:57,679 --> 00:19:01,679
repository

00:18:59,039 --> 00:19:03,039
if you want to update or roll back your

00:19:01,679 --> 00:19:05,600
kubernetes workload

00:19:03,039 --> 00:19:06,640
you may run the chd pipeline to update

00:19:05,600 --> 00:19:09,919
over rollback

00:19:06,640 --> 00:19:11,679
use kubernetes workload typical github

00:19:09,919 --> 00:19:16,480
streams are flux

00:19:11,679 --> 00:19:16,480
argon and jenkins x and so on

00:19:17,840 --> 00:19:21,520
next let's talk about multi-count

00:19:20,400 --> 00:19:23,600
measures

00:19:21,520 --> 00:19:25,440
considerable t count measure from the

00:19:23,600 --> 00:19:28,799
control life cycle

00:19:25,440 --> 00:19:33,039
from left to right there are three phase

00:19:28,799 --> 00:19:34,799
build ship and run the build phase

00:19:33,039 --> 00:19:36,720
you may use the base control mesh such

00:19:34,799 --> 00:19:38,559
as docker hub and build the container

00:19:36,720 --> 00:19:41,360
with the docker file

00:19:38,559 --> 00:19:42,480
other times the home variety check on

00:19:41,360 --> 00:19:45,760
base control image

00:19:42,480 --> 00:19:48,559
and unit test and configuration test

00:19:45,760 --> 00:19:50,160
in the ship phase you may start the

00:19:48,559 --> 00:19:52,160
build control measure and manage

00:19:50,160 --> 00:19:53,440
vary in the container history and git

00:19:52,160 --> 00:19:56,320
repository

00:19:53,440 --> 00:19:59,360
other times check for the build control

00:19:56,320 --> 00:20:02,159
image regularly for vulnerabilities

00:19:59,360 --> 00:20:03,919
the noun phase you may deploy control

00:20:02,159 --> 00:20:04,640
and master file from the kubernetes

00:20:03,919 --> 00:20:07,440
cluster

00:20:04,640 --> 00:20:09,039
and the equivalence workload is running

00:20:07,440 --> 00:20:11,120
other types

00:20:09,039 --> 00:20:13,679
check chess benchmark and penetration

00:20:11,120 --> 00:20:16,000
test to carbonis cluster

00:20:13,679 --> 00:20:17,200
per home secretary check on testing each

00:20:16,000 --> 00:20:19,679
face

00:20:17,200 --> 00:20:20,480
other more left side more than right

00:20:19,679 --> 00:20:22,640
side

00:20:20,480 --> 00:20:25,280
namely upstream measures are more

00:20:22,640 --> 00:20:25,280
effective

00:20:27,440 --> 00:20:30,960
kubernetes has a minor update every

00:20:29,520 --> 00:20:32,960
three months

00:20:30,960 --> 00:20:34,559
therefore you should update the

00:20:32,960 --> 00:20:36,559
kubernetes version really

00:20:34,559 --> 00:20:39,039
and you should update the first

00:20:36,559 --> 00:20:41,600
responsible master node and work node of

00:20:39,039 --> 00:20:44,320
your command is crystal regularly

00:20:41,600 --> 00:20:45,840
in addition if you have used kubernetes

00:20:44,320 --> 00:20:49,280
package manager such as help

00:20:45,840 --> 00:20:49,679
chart customize and operator also update

00:20:49,280 --> 00:20:53,280
this

00:20:49,679 --> 00:20:55,200
version regularly next manage node

00:20:53,280 --> 00:20:57,679
security

00:20:55,200 --> 00:20:59,200
use host was optimized for the container

00:20:57,679 --> 00:21:02,400
platform

00:20:59,200 --> 00:21:03,520
restrict use for private users for

00:21:02,400 --> 00:21:07,039
example

00:21:03,520 --> 00:21:07,760
user address model restrict access to

00:21:07,039 --> 00:21:11,280
node and

00:21:07,760 --> 00:21:17,440
promotion to predict the users limit

00:21:11,280 --> 00:21:20,240
mounting of the nodes file system

00:21:17,440 --> 00:21:22,159
the build phase create a control image

00:21:20,240 --> 00:21:22,720
with the minimum required package and

00:21:22,159 --> 00:21:25,360
driver

00:21:22,720 --> 00:21:27,600
tool don't include the comparator and

00:21:25,360 --> 00:21:29,919
cached it at big time

00:21:27,600 --> 00:21:31,360
use the container based image on real

00:21:29,919 --> 00:21:34,799
control registry

00:21:31,360 --> 00:21:37,520
for example red hat container catalog

00:21:34,799 --> 00:21:38,880
google cloud platform marketplace and so

00:21:37,520 --> 00:21:41,440
on

00:21:38,880 --> 00:21:43,280
use the rest version and binary check or

00:21:41,440 --> 00:21:46,400
container image

00:21:43,280 --> 00:21:47,200
the ship face check the control mesh

00:21:46,400 --> 00:21:50,400
regularly

00:21:47,200 --> 00:21:53,440
not just once other version control

00:21:50,400 --> 00:21:55,440
control image tags direct our content

00:21:53,440 --> 00:21:58,320
image regularly

00:21:55,440 --> 00:21:59,280
use the control measure signature using

00:21:58,320 --> 00:22:01,760
docker content

00:21:59,280 --> 00:22:01,760
thruster

00:22:03,520 --> 00:22:07,440
at the build phase and ship phase use

00:22:06,400 --> 00:22:10,240
appropriate checking

00:22:07,440 --> 00:22:11,440
and testing through for each layer for

00:22:10,240 --> 00:22:13,520
example

00:22:11,440 --> 00:22:15,840
transport check cloud rear security disk

00:22:13,520 --> 00:22:16,159
of user such as a code such as telehome

00:22:15,840 --> 00:22:19,600
and

00:22:16,159 --> 00:22:22,080
edibles cloud formation check secret

00:22:19,600 --> 00:22:23,200
risk and best practice for kubernetes

00:22:22,080 --> 00:22:25,280
file

00:22:23,200 --> 00:22:27,120
open polishing agent conf test check

00:22:25,280 --> 00:22:28,960
custom security risk of kubernetes

00:22:27,120 --> 00:22:31,200
managed file

00:22:28,960 --> 00:22:32,480
and link check based platform docker

00:22:31,200 --> 00:22:34,559
file

00:22:32,480 --> 00:22:37,360
triple check static parameter or

00:22:34,559 --> 00:22:37,360
container image

00:22:39,200 --> 00:22:43,520
at the wrong phase prohibit control

00:22:42,000 --> 00:22:46,559
startup and promotion

00:22:43,520 --> 00:22:48,640
are the privileged users prohibit access

00:22:46,559 --> 00:22:50,720
to the load file system

00:22:48,640 --> 00:22:52,840
disable and use the recent port to

00:22:50,720 --> 00:22:54,080
eliminate a necessary accessory

00:22:52,840 --> 00:22:56,400
interface

00:22:54,080 --> 00:22:59,600
since appropriate cpr memory in the

00:22:56,400 --> 00:23:03,120
container to eliminate neighbor energy

00:22:59,600 --> 00:23:05,200
let's challenge devsecops some of these

00:23:03,120 --> 00:23:08,080
settings can be controlled by the port

00:23:05,200 --> 00:23:10,000
security portion of kubernetes

00:23:08,080 --> 00:23:13,440
i'll talk about support secret push

00:23:10,000 --> 00:23:13,440
setting example letter

00:23:18,320 --> 00:23:24,880
in addition limit input on add tax from

00:23:22,080 --> 00:23:25,679
container to storage limit network

00:23:24,880 --> 00:23:28,559
communication

00:23:25,679 --> 00:23:31,520
on containers you need some number of

00:23:28,559 --> 00:23:34,840
process startups on containers

00:23:31,520 --> 00:23:36,480
make active use of app armor or seg

00:23:34,840 --> 00:23:38,880
comps also

00:23:36,480 --> 00:23:40,960
consider pet security products that can

00:23:38,880 --> 00:23:43,440
detect and block suspicious container

00:23:40,960 --> 00:23:43,440
behavior

00:23:44,880 --> 00:23:48,159
for security pushes can control the

00:23:46,799 --> 00:23:50,960
behavior on bot

00:23:48,159 --> 00:23:52,159
and container from the kubernetes layer

00:23:50,960 --> 00:23:55,120
for example

00:23:52,159 --> 00:23:57,760
prohibit containers in privilege mode

00:23:55,120 --> 00:24:01,120
prohibit promotion to root the user

00:23:57,760 --> 00:24:02,960
prohibit writing to the role file system

00:24:01,120 --> 00:24:04,240
unnecessary capabilities should be

00:24:02,960 --> 00:24:07,679
disavowable

00:24:04,240 --> 00:24:08,240
for example caps net role capability

00:24:07,679 --> 00:24:11,360
scans

00:24:08,240 --> 00:24:13,279
and unreceivability isn't packaged

00:24:11,360 --> 00:24:15,919
this should be disabled to prevent

00:24:13,279 --> 00:24:18,240
misuse of apps proofing

00:24:15,919 --> 00:24:20,000
their discussion is oasis community that

00:24:18,240 --> 00:24:23,120
possibly pursues

00:24:20,000 --> 00:24:27,600
the open policy agent in the future

00:24:23,120 --> 00:24:27,600
so be careful about future tense

00:24:28,880 --> 00:24:34,960
other phase use appropriate checking

00:24:32,000 --> 00:24:36,159
and testing tools for each layer for

00:24:34,960 --> 00:24:38,400
example

00:24:36,159 --> 00:24:39,520
cloud sprite check cloud layer security

00:24:38,400 --> 00:24:41,919
risk

00:24:39,520 --> 00:24:43,200
to be hunted check penetration test for

00:24:41,919 --> 00:24:46,640
the kubernetes cluster

00:24:43,200 --> 00:24:48,559
unknown level security binary to event

00:24:46,640 --> 00:24:51,840
check cis benchmark for the

00:24:48,559 --> 00:24:53,840
clibbonis cluster open portion

00:24:51,840 --> 00:24:55,600
gatekeeper check custom security risk

00:24:53,840 --> 00:24:57,200
and governance setting for kubernetes

00:24:55,600 --> 00:24:59,279
resource

00:24:57,200 --> 00:25:01,840
price check best practice in kubernetes

00:24:59,279 --> 00:25:03,919
workload configuration

00:25:01,840 --> 00:25:06,000
goldilocks recommend shipping memory

00:25:03,919 --> 00:25:09,120
resource limit and request based on

00:25:06,000 --> 00:25:11,360
actual resource usage of the container

00:25:09,120 --> 00:25:15,840
to repeat the static check manager

00:25:11,360 --> 00:25:15,840
container image

00:25:16,480 --> 00:25:19,919
next is monitoring from security point

00:25:18,880 --> 00:25:22,640
of view

00:25:19,919 --> 00:25:23,360
coding and aggregating the kubernetes

00:25:22,640 --> 00:25:25,440
rules

00:25:23,360 --> 00:25:26,840
so that it can be detected when now

00:25:25,440 --> 00:25:29,679
errors workers

00:25:26,840 --> 00:25:32,000
furthermore it's important to be ready

00:25:29,679 --> 00:25:34,559
for forensic investigation

00:25:32,000 --> 00:25:35,520
observability is talking about in three

00:25:34,559 --> 00:25:39,360
players

00:25:35,520 --> 00:25:41,279
its metrics and rules and trace

00:25:39,360 --> 00:25:43,279
this viewer is taken from blue site

00:25:41,279 --> 00:25:46,720
published by elastico.co

00:25:43,279 --> 00:25:49,039
and graphene.com site it's important to

00:25:46,720 --> 00:25:52,240
be able to capture and detect and trust

00:25:49,039 --> 00:25:56,240
the applications and metrics

00:25:52,240 --> 00:25:58,799
for example if you have used awks

00:25:56,240 --> 00:26:03,200
enable the eks logos option and transfer

00:25:58,799 --> 00:26:03,200
the api request logs to cloud drugs

00:26:04,240 --> 00:26:09,200
this via end user technology leader of

00:26:06,880 --> 00:26:11,679
cloud native computing foundation

00:26:09,200 --> 00:26:12,480
it's classified into three categories

00:26:11,679 --> 00:26:15,679
adapt

00:26:12,480 --> 00:26:17,840
trial and assets according to the

00:26:15,679 --> 00:26:20,320
results of this survey

00:26:17,840 --> 00:26:20,880
many companies have adopted oss tools

00:26:20,320 --> 00:26:24,080
such as

00:26:20,880 --> 00:26:25,120
properties and growth and elastic and so

00:26:24,080 --> 00:26:27,120
on

00:26:25,120 --> 00:26:29,120
you can see that many companies use

00:26:27,120 --> 00:26:31,760
multiple monitoring tools

00:26:29,120 --> 00:26:38,000
if you have also interested take a look

00:26:31,760 --> 00:26:40,159
at reader.csu.io site

00:26:38,000 --> 00:26:41,760
important to perform appropriate logging

00:26:40,159 --> 00:26:44,400
for each component

00:26:41,760 --> 00:26:45,679
at the cloud layer it's a cloud

00:26:44,400 --> 00:26:47,760
operation rules and

00:26:45,679 --> 00:26:48,880
host os access rules and network

00:26:47,760 --> 00:26:52,080
communication blocks

00:26:48,880 --> 00:26:55,679
and so on enable auditing and network

00:26:52,080 --> 00:26:58,080
logging options at the kubernetes layer

00:26:55,679 --> 00:27:00,080
the equivalence api server request logs

00:26:58,080 --> 00:27:02,720
and network communication loads between

00:27:00,080 --> 00:27:06,320
master node and volcanoes

00:27:02,720 --> 00:27:06,880
enable the cable solid portion container

00:27:06,320 --> 00:27:09,200
and

00:27:06,880 --> 00:27:11,440
application layer correcting and

00:27:09,200 --> 00:27:13,360
aggregating application blocks

00:27:11,440 --> 00:27:15,360
next set from several control logging

00:27:13,360 --> 00:27:20,880
architecture patterns to see to your

00:27:15,360 --> 00:27:23,200
container platform

00:27:20,880 --> 00:27:24,480
next let's talk about cameras and

00:27:23,200 --> 00:27:27,120
compliance

00:27:24,480 --> 00:27:27,760
open push agent gatekeeper provides more

00:27:27,120 --> 00:27:29,919
flexible

00:27:27,760 --> 00:27:31,919
and extended governance control by

00:27:29,919 --> 00:27:34,159
uploading the kubernetes admission

00:27:31,919 --> 00:27:36,559
control with the web

00:27:34,159 --> 00:27:37,760
open push agent defines policies and

00:27:36,559 --> 00:27:40,799
rules in the

00:27:37,760 --> 00:27:42,880
language level open policy agent can

00:27:40,799 --> 00:27:45,600
define access rules for kubernetes

00:27:42,880 --> 00:27:47,039
resource for specific users api and

00:27:45,600 --> 00:27:49,360
operation

00:27:47,039 --> 00:27:52,320
so it will separate permission control

00:27:49,360 --> 00:27:54,960
from the application code

00:27:52,320 --> 00:27:56,320
work with user whole container auditing

00:27:54,960 --> 00:27:59,440
for example

00:27:56,320 --> 00:28:01,840
next startup for portfolio demo set

00:27:59,440 --> 00:28:05,360
in the first part monitor system calls

00:28:01,840 --> 00:28:08,159
for container running on worker node

00:28:05,360 --> 00:28:08,480
when behavioral container deviates from

00:28:08,159 --> 00:28:11,039
the

00:28:08,480 --> 00:28:12,320
vertical rules workplace outputs are not

00:28:11,039 --> 00:28:15,279
loads

00:28:12,320 --> 00:28:16,399
workers rules defined by default in

00:28:15,279 --> 00:28:20,880
addition

00:28:16,399 --> 00:28:20,880
you can customize work audit rules

00:28:23,120 --> 00:28:27,840
introducing more about work varco can

00:28:26,000 --> 00:28:28,960
monitor the behavior of the following

00:28:27,840 --> 00:28:31,440
containers

00:28:28,960 --> 00:28:32,880
for example the container study team

00:28:31,440 --> 00:28:35,279
preparation mode

00:28:32,880 --> 00:28:36,640
multiple sensitive directory paths read

00:28:35,279 --> 00:28:39,520
on the right sensitive

00:28:36,640 --> 00:28:40,880
files check workloads are published on

00:28:39,520 --> 00:28:44,240
the security hub dot

00:28:40,880 --> 00:28:46,640
dev site their nodes what we can't

00:28:44,240 --> 00:28:48,720
detect right to host passband amount

00:28:46,640 --> 00:28:50,559
thereby processing the container or

00:28:48,720 --> 00:28:53,760
right be assembled link

00:28:50,559 --> 00:28:55,840
therefore if we want to detect it

00:28:53,760 --> 00:28:57,600
multiply access with rotating functions

00:28:55,840 --> 00:29:00,320
provided by each linux

00:28:57,600 --> 00:29:00,320
distribution

00:29:01,279 --> 00:29:04,320
finally a summary

00:29:05,039 --> 00:29:10,000
we must take measures in all direction

00:29:07,600 --> 00:29:11,120
but there are various security images to

00:29:10,000 --> 00:29:13,520
consider

00:29:11,120 --> 00:29:15,360
it's important to defense in depth not

00:29:13,520 --> 00:29:17,679
just in one place

00:29:15,360 --> 00:29:19,039
insecurities and coordinative computing

00:29:17,679 --> 00:29:21,919
foundation ecosystem

00:29:19,039 --> 00:29:23,039
are frequently updated and complex

00:29:21,919 --> 00:29:25,520
therefore

00:29:23,039 --> 00:29:26,240
if you have used public clouds such as

00:29:25,520 --> 00:29:29,919
aws

00:29:26,240 --> 00:29:31,840
or azure or gp consider using the

00:29:29,919 --> 00:29:35,120
security features provided by

00:29:31,840 --> 00:29:37,200
each public cloud vendor also consider

00:29:35,120 --> 00:29:39,200
using the cloud native security source

00:29:37,200 --> 00:29:41,840
of cloud native continue foundation

00:29:39,200 --> 00:29:41,840
ecosystem

00:29:42,720 --> 00:29:46,880
this is the end of my presentation thank

00:29:45,520 --> 00:29:51,279
you for watching

00:29:46,880 --> 00:29:51,279
i hope this content will be useful to

00:29:52,840 --> 00:29:55,840
you

00:29:59,039 --> 00:30:01,120

YouTube URL: https://www.youtube.com/watch?v=VROFKotfZzw


