Title: Digital Twinning with Ansible and cloud-init to Support Destructive Infrastructure Testing
Publication date: 2020-12-10
Playlist: Open Source Summit Japan & Automotive Linux Summit 2020
Description: 
	Digital Twinning with Ansible and cloud-init to Support Destructive Infrastructure Testing - James Freeman, A24.io
Captions: 
	00:00:04,799 --> 00:00:08,000
hello everyone

00:00:06,080 --> 00:00:09,679
thank you for attending my talk today

00:00:08,000 --> 00:00:11,120
and welcome indeed to this year's

00:00:09,679 --> 00:00:13,759
virtual conference

00:00:11,120 --> 00:00:15,920
my name is james freeman and today i'm

00:00:13,759 --> 00:00:16,480
going to be taking you through digital

00:00:15,920 --> 00:00:18,560
twinning

00:00:16,480 --> 00:00:20,480
for infrastructure testing now

00:00:18,560 --> 00:00:22,320
destructive infrastructure testing in

00:00:20,480 --> 00:00:24,240
fact you'll notice that the title on the

00:00:22,320 --> 00:00:26,960
agenda is somewhat longer

00:00:24,240 --> 00:00:28,720
than the title on my title slide and

00:00:26,960 --> 00:00:31,119
indeed there is a reason for that

00:00:28,720 --> 00:00:33,040
it's very much a case of i couldn't fit

00:00:31,119 --> 00:00:34,640
my title on the title slide not without

00:00:33,040 --> 00:00:36,880
making the font tiny

00:00:34,640 --> 00:00:38,079
but we'll get to all of that in just a

00:00:36,880 --> 00:00:40,079
moment

00:00:38,079 --> 00:00:41,520
before we do let me tell you a little

00:00:40,079 --> 00:00:43,280
bit about who i am

00:00:41,520 --> 00:00:44,559
for those of you who are watching this

00:00:43,280 --> 00:00:46,399
live at the conference

00:00:44,559 --> 00:00:48,399
i will be on the virtual chat facility

00:00:46,399 --> 00:00:49,760
so do feel free to engage me any

00:00:48,399 --> 00:00:51,199
questions you want to ask

00:00:49,760 --> 00:00:53,280
please do ask as we go through the

00:00:51,199 --> 00:00:56,239
presentation and

00:00:53,280 --> 00:00:57,680
otherwise my social media links are down

00:00:56,239 --> 00:00:59,600
the bottom here you'll see them again at

00:00:57,680 --> 00:01:01,199
the end of the slide deck so if anybody

00:00:59,600 --> 00:01:03,280
is watching this on a replay

00:01:01,199 --> 00:01:04,879
or thinks of a question five minutes

00:01:03,280 --> 00:01:05,840
after the presentation which is what i

00:01:04,879 --> 00:01:07,840
normally do

00:01:05,840 --> 00:01:10,000
please do reach out to me be so happy to

00:01:07,840 --> 00:01:13,040
hear from you and engage

00:01:10,000 --> 00:01:14,080
now who am i that great existential

00:01:13,040 --> 00:01:17,600
question

00:01:14,080 --> 00:01:20,240
i am a consultant at a

00:01:17,600 --> 00:01:21,600
little bespoke technology provider

00:01:20,240 --> 00:01:24,000
called a24

00:01:21,600 --> 00:01:24,880
originally headquartered in tokyo where

00:01:24,000 --> 00:01:26,240
this

00:01:24,880 --> 00:01:28,400
conference should have been held this

00:01:26,240 --> 00:01:32,159
year were it not for a pandemic

00:01:28,400 --> 00:01:33,920
and based mostly in the uk where i help

00:01:32,159 --> 00:01:35,680
a lot of businesses all sizes big and

00:01:33,920 --> 00:01:39,200
small implement

00:01:35,680 --> 00:01:41,439
their open source technology needs

00:01:39,200 --> 00:01:43,200
now on top of that i run my own little

00:01:41,439 --> 00:01:45,759
empowerment coaching practice

00:01:43,200 --> 00:01:47,520
i am a reiki master teacher i am a

00:01:45,759 --> 00:01:49,040
father to two wonderful boys on the

00:01:47,520 --> 00:01:51,920
autistic spectrum

00:01:49,040 --> 00:01:53,520
and my roots take me back to and being

00:01:51,920 --> 00:01:55,439
electronic engineer i've always been

00:01:53,520 --> 00:01:57,280
around technology probably the last 20

00:01:55,439 --> 00:01:59,360
years or so but it didn't start off in

00:01:57,280 --> 00:02:00,719
open source and software it started off

00:01:59,360 --> 00:02:03,119
very much behind

00:02:00,719 --> 00:02:04,719
a soldering iron and a cad program and

00:02:03,119 --> 00:02:06,399
designing circuit boards and that kind

00:02:04,719 --> 00:02:08,640
of thing so i'm never happier

00:02:06,399 --> 00:02:10,479
than when i am putting things together

00:02:08,640 --> 00:02:12,000
inventing things repairing things that

00:02:10,479 --> 00:02:15,760
kind of thing

00:02:12,000 --> 00:02:17,520
i am also a big fan of gtd of david

00:02:15,760 --> 00:02:19,200
allen's getting things organized and you

00:02:17,520 --> 00:02:21,200
will see a flavor of that as we go

00:02:19,200 --> 00:02:23,040
through today indeed there is a reason i

00:02:21,200 --> 00:02:25,280
sort of methodology behind

00:02:23,040 --> 00:02:27,040
today's story how it evolved and what

00:02:25,280 --> 00:02:29,360
i'm going to share with you

00:02:27,040 --> 00:02:31,840
and last but not least you will notice

00:02:29,360 --> 00:02:33,280
uh a little bit of a bias i must admit

00:02:31,840 --> 00:02:35,280
towards ansible throughout the

00:02:33,280 --> 00:02:37,040
presentation i have got three books

00:02:35,280 --> 00:02:38,480
published with ansible so i'm afraid

00:02:37,040 --> 00:02:40,160
full disclosure

00:02:38,480 --> 00:02:41,519
my bias is definitely going to be

00:02:40,160 --> 00:02:43,440
towards ansible

00:02:41,519 --> 00:02:45,360
whenever i have something to automate

00:02:43,440 --> 00:02:48,000
particularly in the open source space

00:02:45,360 --> 00:02:50,239
so please forgive me that as i say i

00:02:48,000 --> 00:02:51,680
hope you enjoy the presentation and let

00:02:50,239 --> 00:02:55,440
me take you on

00:02:51,680 --> 00:02:57,440
a bit of a story so with homage to the

00:02:55,440 --> 00:02:59,599
classic joke about the horse and the

00:02:57,440 --> 00:03:01,519
bartender says why the long face

00:02:59,599 --> 00:03:04,080
why the long title so big that it

00:03:01,519 --> 00:03:06,720
wouldn't even fit on the title slide

00:03:04,080 --> 00:03:07,440
and ultimately i suppose when you're

00:03:06,720 --> 00:03:09,440
pitching for

00:03:07,440 --> 00:03:11,440
an agenda a spot at a conference i

00:03:09,440 --> 00:03:13,440
wanted to be descriptive i wanted to put

00:03:11,440 --> 00:03:14,959
out there exactly what it is that i was

00:03:13,440 --> 00:03:17,920
going to convey

00:03:14,959 --> 00:03:19,760
and ansible is a big thing again we'll

00:03:17,920 --> 00:03:21,680
touch on that a little bit later

00:03:19,760 --> 00:03:23,280
and i wanted to really sort of put out

00:03:21,680 --> 00:03:27,040
there what it was i was going to

00:03:23,280 --> 00:03:29,760
talk about but also the why and

00:03:27,040 --> 00:03:32,080
the real reason behind all of this is

00:03:29,760 --> 00:03:35,200
not just for infrastructure testing but

00:03:32,080 --> 00:03:36,720
the ability to do things that normally

00:03:35,200 --> 00:03:40,080
you would think about

00:03:36,720 --> 00:03:42,080
doing twice if you um you know if you'd

00:03:40,080 --> 00:03:44,080
spend hours building a physical

00:03:42,080 --> 00:03:45,519
a really nice shiny well-built

00:03:44,080 --> 00:03:47,200
production infrastructure and then you

00:03:45,519 --> 00:03:48,560
went and sort of blew it up

00:03:47,200 --> 00:03:50,319
you would normally think twice about

00:03:48,560 --> 00:03:52,080
that however

00:03:50,319 --> 00:03:54,319
there is a concept i want to talk about

00:03:52,080 --> 00:03:56,480
today which i think lends itself very

00:03:54,319 --> 00:03:57,840
much to testing those use cases to test

00:03:56,480 --> 00:03:59,439
in those scenarios that we don't

00:03:57,840 --> 00:04:00,159
normally think about the kind of things

00:03:59,439 --> 00:04:03,280
what

00:04:00,159 --> 00:04:05,680
the people say oh that shouldn't happen

00:04:03,280 --> 00:04:08,159
so let me tell you a story and let me

00:04:05,680 --> 00:04:10,239
tell you how i solved it and all about

00:04:08,159 --> 00:04:11,840
how we can get to destructive

00:04:10,239 --> 00:04:15,840
infrastructure testing through

00:04:11,840 --> 00:04:15,840
this thing called digital twinning

00:04:15,920 --> 00:04:20,720
so like all good technology stories this

00:04:18,959 --> 00:04:23,280
started with a simple request

00:04:20,720 --> 00:04:24,960
and you can decide as we go through this

00:04:23,280 --> 00:04:27,040
whether i over complicated the answer

00:04:24,960 --> 00:04:30,080
that's a completely different point

00:04:27,040 --> 00:04:32,800
the ceo says to me build me openstack

00:04:30,080 --> 00:04:33,520
and a really nice tightly bounded

00:04:32,800 --> 00:04:37,120
request

00:04:33,520 --> 00:04:38,000
however openstack is one of those things

00:04:37,120 --> 00:04:39,680
that

00:04:38,000 --> 00:04:42,080
it's really easy to build a sort of

00:04:39,680 --> 00:04:44,320
all-in-one single node deployment which

00:04:42,080 --> 00:04:45,360
is great for kicking the tires learning

00:04:44,320 --> 00:04:46,960
about how it's

00:04:45,360 --> 00:04:49,520
installed at least on a single node

00:04:46,960 --> 00:04:52,320
basis what services are running

00:04:49,520 --> 00:04:54,560
i've done it a number of times working

00:04:52,320 --> 00:04:56,639
examples for potential clients for one

00:04:54,560 --> 00:04:58,400
of the books that i mentioned

00:04:56,639 --> 00:05:00,000
even for a professional certification

00:04:58,400 --> 00:05:02,560
exam

00:05:00,000 --> 00:05:03,039
the whole model of the all-in-one node

00:05:02,560 --> 00:05:05,360
for me

00:05:03,039 --> 00:05:07,680
falls down when it comes to doing this

00:05:05,360 --> 00:05:09,360
for a production kind of environment and

00:05:07,680 --> 00:05:11,199
indeed we were looking at this in a

00:05:09,360 --> 00:05:12,800
production context

00:05:11,199 --> 00:05:14,960
and when you want to actually learn a

00:05:12,800 --> 00:05:17,280
technology for a production

00:05:14,960 --> 00:05:18,800
environment it's so important to know

00:05:17,280 --> 00:05:20,320
what the weak points are

00:05:18,800 --> 00:05:21,919
how to deal with scenarios when they

00:05:20,320 --> 00:05:23,520
come up so what happens if one of our

00:05:21,919 --> 00:05:25,440
switches falls off the network what

00:05:23,520 --> 00:05:27,199
happens if this particular node dies how

00:05:25,440 --> 00:05:28,080
do we recover from that scenario that

00:05:27,199 --> 00:05:30,400
kind of thing

00:05:28,080 --> 00:05:33,039
indeed what happens if someone fires off

00:05:30,400 --> 00:05:36,639
a denial service attack against us

00:05:33,039 --> 00:05:38,560
and so this for me i'm no openstack

00:05:36,639 --> 00:05:39,199
expert again full transparency on that

00:05:38,560 --> 00:05:40,880
one

00:05:39,199 --> 00:05:42,800
what i really wanted to do from this

00:05:40,880 --> 00:05:44,320
exercise however was to really learn

00:05:42,800 --> 00:05:46,960
openstack and not just

00:05:44,320 --> 00:05:47,759
on a level of i built an all-in-one node

00:05:46,960 --> 00:05:50,840
but

00:05:47,759 --> 00:05:52,720
how to deploy it in a production kind of

00:05:50,840 --> 00:05:54,479
architecture so that we

00:05:52,720 --> 00:05:56,800
as a business could learn from it and

00:05:54,479 --> 00:05:59,280
grow and move forward

00:05:56,800 --> 00:06:00,960
and having thought all this through

00:05:59,280 --> 00:06:02,800
quite carefully decided what i wanted to

00:06:00,960 --> 00:06:03,360
do i was presented with my constraints

00:06:02,800 --> 00:06:05,759
which was

00:06:03,360 --> 00:06:07,440
here's a single blade to build it on and

00:06:05,759 --> 00:06:09,440
it has mechanical storage

00:06:07,440 --> 00:06:10,880
and little sort of spoiler towards the

00:06:09,440 --> 00:06:12,240
end of the presentation don't use

00:06:10,880 --> 00:06:14,000
mechanical storage

00:06:12,240 --> 00:06:15,280
but that's that's a bit of a separate

00:06:14,000 --> 00:06:19,680
point

00:06:15,280 --> 00:06:21,600
so digital twinning first of all

00:06:19,680 --> 00:06:23,840
if you've not come across this concept

00:06:21,600 --> 00:06:25,520
before it was

00:06:23,840 --> 00:06:27,840
according to the law of the internet at

00:06:25,520 --> 00:06:29,440
least something that evolved at nasa

00:06:27,840 --> 00:06:31,039
and it started out with the very first

00:06:29,440 --> 00:06:33,120
space capsule so

00:06:31,039 --> 00:06:34,639
if you're building and designing a space

00:06:33,120 --> 00:06:36,319
capsule and you want to know

00:06:34,639 --> 00:06:37,360
if it's going to work if the astronauts

00:06:36,319 --> 00:06:38,720
are going to be able to sit in it

00:06:37,360 --> 00:06:40,560
whether they're going to be able to

00:06:38,720 --> 00:06:42,720
interface with the control panel

00:06:40,560 --> 00:06:44,240
reach the buttons all those sort of

00:06:42,720 --> 00:06:46,639
fundamental basics

00:06:44,240 --> 00:06:48,479
of designing i suppose what would be a a

00:06:46,639 --> 00:06:51,840
user interface of sorts

00:06:48,479 --> 00:06:54,400
you need a mock-up and so nasa built

00:06:51,840 --> 00:06:55,199
actual life-size models of the space

00:06:54,400 --> 00:06:56,800
capsules

00:06:55,199 --> 00:06:58,639
before they built the real thing to make

00:06:56,800 --> 00:07:00,880
sure that they got the design right

00:06:58,639 --> 00:07:02,080
now this obviously was very early on

00:07:00,880 --> 00:07:03,680
before all the

00:07:02,080 --> 00:07:05,199
technology and computers that we take

00:07:03,680 --> 00:07:06,560
for granted today and it's something

00:07:05,199 --> 00:07:08,800
that evolved

00:07:06,560 --> 00:07:10,000
into computer modeling computer

00:07:08,800 --> 00:07:13,360
simulation

00:07:10,000 --> 00:07:15,520
and so this concept of building models

00:07:13,360 --> 00:07:17,759
of twinning the sort of physical twin

00:07:15,520 --> 00:07:18,639
morphed into the concept of the digital

00:07:17,759 --> 00:07:21,440
twin

00:07:18,639 --> 00:07:22,960
that being a digital representation of a

00:07:21,440 --> 00:07:24,960
real thing

00:07:22,960 --> 00:07:26,479
now obviously that's mentioned it with

00:07:24,960 --> 00:07:30,160
respect to to space

00:07:26,479 --> 00:07:32,240
travel and that field but really

00:07:30,160 --> 00:07:34,720
it's a concept that can be used anywhere

00:07:32,240 --> 00:07:38,000
it's a high level concept that says

00:07:34,720 --> 00:07:39,039
we're going to make a model an accurate

00:07:38,000 --> 00:07:42,479
representation

00:07:39,039 --> 00:07:46,720
of this system this design

00:07:42,479 --> 00:07:48,400
this whatever it is really and so

00:07:46,720 --> 00:07:50,319
having discovered that this very thing

00:07:48,400 --> 00:07:52,720
existed and that i wanted to

00:07:50,319 --> 00:07:54,560
to learn openstack properly from an

00:07:52,720 --> 00:07:57,759
architectural point of view not just

00:07:54,560 --> 00:07:58,479
from a a single all-in-one node point of

00:07:57,759 --> 00:08:00,639
view

00:07:58,479 --> 00:08:01,759
i decided to set about building my own

00:08:00,639 --> 00:08:04,800
digital twin

00:08:01,759 --> 00:08:06,639
so bear in mind i only had one blade but

00:08:04,800 --> 00:08:08,800
i wanted to build something that was an

00:08:06,639 --> 00:08:11,039
accurate representation of

00:08:08,800 --> 00:08:12,720
a production openstack deployment even

00:08:11,039 --> 00:08:13,759
if it was a small one at least i wanted

00:08:12,720 --> 00:08:15,759
to be able to say

00:08:13,759 --> 00:08:19,840
it's got high availability i can take

00:08:15,759 --> 00:08:19,840
nodes out of service and it keeps going

00:08:20,000 --> 00:08:24,000
now the next piece of the title with

00:08:22,240 --> 00:08:27,199
ansible and cloud in it

00:08:24,000 --> 00:08:27,840
so i've built openstack a few times as i

00:08:27,199 --> 00:08:30,720
mentioned

00:08:27,840 --> 00:08:31,520
in the single all-in-one node context

00:08:30,720 --> 00:08:34,000
and

00:08:31,520 --> 00:08:36,159
i've learned the hard way that i'm not

00:08:34,000 --> 00:08:38,240
an expert and i'm probably not going to

00:08:36,159 --> 00:08:40,800
get it right first time

00:08:38,240 --> 00:08:42,719
and when you don't know a technology and

00:08:40,800 --> 00:08:44,880
you're getting going for the first time

00:08:42,719 --> 00:08:46,320
and particularly when time is of the

00:08:44,880 --> 00:08:47,440
essence as well there are times when

00:08:46,320 --> 00:08:51,440
it's actually

00:08:47,440 --> 00:08:53,040
easier to rebuild to go i got that wrong

00:08:51,440 --> 00:08:54,160
i messed that up for whatever reason

00:08:53,040 --> 00:08:55,839
maybe i didn't understand the

00:08:54,160 --> 00:08:57,760
configuration maybe i

00:08:55,839 --> 00:08:58,880
was just testing something and i wanted

00:08:57,760 --> 00:09:00,560
to

00:08:58,880 --> 00:09:02,320
to take a look at it from that angle and

00:09:00,560 --> 00:09:04,480
then try something out

00:09:02,320 --> 00:09:06,720
ultimately it can be easier to just

00:09:04,480 --> 00:09:09,279
rebuild parts of the infrastructure or

00:09:06,720 --> 00:09:13,200
indeed the whole thing than it can be

00:09:09,279 --> 00:09:13,760
to have to pick through configurations

00:09:13,200 --> 00:09:17,440
to fix

00:09:13,760 --> 00:09:19,040
things to reconfigure bits and pieces so

00:09:17,440 --> 00:09:21,279
i'm thinking really here and i put on

00:09:19,040 --> 00:09:24,959
the slide docker-like behavior so

00:09:21,279 --> 00:09:28,160
i'm thinking of this concept where we

00:09:24,959 --> 00:09:30,399
we don't treat images virtual

00:09:28,160 --> 00:09:32,000
architectures like like pets we treat

00:09:30,399 --> 00:09:32,959
them like kettle to use the classic

00:09:32,000 --> 00:09:36,080
analogy

00:09:32,959 --> 00:09:38,320
we when something doesn't serve us

00:09:36,080 --> 00:09:40,640
we simply build a new one because it's

00:09:38,320 --> 00:09:43,440
quick and because it's easy

00:09:40,640 --> 00:09:44,560
but although i think this was a fair

00:09:43,440 --> 00:09:47,680
hypothesis

00:09:44,560 --> 00:09:48,480
i knew that i didn't want to spend my

00:09:47,680 --> 00:09:52,160
time

00:09:48,480 --> 00:09:54,959
doing menial tasks like for example

00:09:52,160 --> 00:09:56,800
building linux servers from an iso so

00:09:54,959 --> 00:09:58,399
booting from the iso

00:09:56,800 --> 00:10:00,160
clicking through the installer setting

00:09:58,399 --> 00:10:02,640
the initial ip address

00:10:00,160 --> 00:10:04,240
setting a username and password bonding

00:10:02,640 --> 00:10:06,240
so on and so forth

00:10:04,240 --> 00:10:07,680
and particularly if you think i was

00:10:06,240 --> 00:10:09,040
going to build a sort of virtual

00:10:07,680 --> 00:10:12,720
architecture with perhaps

00:10:09,040 --> 00:10:14,480
10 nodes in it and this was something i

00:10:12,720 --> 00:10:16,240
was anticipating doing more than once so

00:10:14,480 --> 00:10:19,279
i did not want to end up doing

00:10:16,240 --> 00:10:20,640
all those even the basic steps over and

00:10:19,279 --> 00:10:21,839
over again because it would be a massive

00:10:20,640 --> 00:10:23,200
waste of time

00:10:21,839 --> 00:10:24,640
that could be spent learning the

00:10:23,200 --> 00:10:26,079
technology and doing something more

00:10:24,640 --> 00:10:29,040
constructive

00:10:26,079 --> 00:10:30,000
so it was sort of immediately apparent

00:10:29,040 --> 00:10:32,000
to me that okay

00:10:30,000 --> 00:10:34,399
i'm going to need some sort of

00:10:32,000 --> 00:10:37,120
automation stack some sort of software

00:10:34,399 --> 00:10:38,480
that's going to automate the deployment

00:10:37,120 --> 00:10:42,560
process

00:10:38,480 --> 00:10:45,360
so first of all why ansible so

00:10:42,560 --> 00:10:46,000
i've been fairly upfront about this yes

00:10:45,360 --> 00:10:50,640
a huge

00:10:46,000 --> 00:10:53,120
amount of familiarity with it and

00:10:50,640 --> 00:10:54,000
i was looking around the internet bit of

00:10:53,120 --> 00:10:55,680
research for

00:10:54,000 --> 00:10:57,839
this and other presentations i've done

00:10:55,680 --> 00:10:59,519
recently there's a link at the bottom of

00:10:57,839 --> 00:11:00,000
the slide that you can go check out if

00:10:59,519 --> 00:11:03,360
you wish

00:11:00,000 --> 00:11:05,839
but ansible has really boomed in

00:11:03,360 --> 00:11:07,279
popularity over the last few years it's

00:11:05,839 --> 00:11:09,760
really sort of come

00:11:07,279 --> 00:11:11,839
almost out of nowhere it feels like and

00:11:09,760 --> 00:11:14,160
it's sort of accelerated beyond

00:11:11,839 --> 00:11:15,120
so many other chef and puppet

00:11:14,160 --> 00:11:17,200
installations

00:11:15,120 --> 00:11:19,920
just as two examples that were really

00:11:17,200 --> 00:11:22,720
quite well established in the market

00:11:19,920 --> 00:11:24,240
now i work quite a lot with ansible in

00:11:22,720 --> 00:11:26,079
the field so not just as a

00:11:24,240 --> 00:11:27,920
as an abstract concept in a book but

00:11:26,079 --> 00:11:28,320
actually in real world scenarios and i

00:11:27,920 --> 00:11:31,600
think

00:11:28,320 --> 00:11:31,920
two of the reasons that it it's gained

00:11:31,600 --> 00:11:33,839
such

00:11:31,920 --> 00:11:35,760
traction is first of all that it's

00:11:33,839 --> 00:11:36,320
agentless that's one of the really big

00:11:35,760 --> 00:11:39,200
factors

00:11:36,320 --> 00:11:40,640
in that decision it's something where

00:11:39,200 --> 00:11:42,880
from a corporate point of view

00:11:40,640 --> 00:11:44,399
you don't have to roll out a new agent

00:11:42,880 --> 00:11:46,160
amongst the hundred other agents that

00:11:44,399 --> 00:11:46,880
you're probably managing for endpoint

00:11:46,160 --> 00:11:50,079
protection

00:11:46,880 --> 00:11:52,560
and and and and it uses the native

00:11:50,079 --> 00:11:54,800
transports so it uses ssh which is so

00:11:52,560 --> 00:11:56,959
important in scenarios like linux

00:11:54,800 --> 00:11:58,880
because you've got ssh already embedded

00:11:56,959 --> 00:12:01,440
and in switch configuration because if

00:11:58,880 --> 00:12:04,399
you're configuring network devices

00:12:01,440 --> 00:12:06,320
those devices have in certainly in 2020

00:12:04,399 --> 00:12:08,959
they've almost certainly got

00:12:06,320 --> 00:12:10,800
an ssh interface to them which is it's

00:12:08,959 --> 00:12:13,360
just brilliant it just lends itself to

00:12:10,800 --> 00:12:16,959
ansible so very well

00:12:13,360 --> 00:12:19,120
beyond that ansible is idempotent that

00:12:16,959 --> 00:12:20,480
wonderful words that you hear around

00:12:19,120 --> 00:12:23,040
automation circles

00:12:20,480 --> 00:12:23,839
that basically means if i write a

00:12:23,040 --> 00:12:26,800
playbook

00:12:23,839 --> 00:12:28,560
and admittedly write it well because you

00:12:26,800 --> 00:12:30,480
can write a bad playbook just as you can

00:12:28,560 --> 00:12:33,760
with any other form of code

00:12:30,480 --> 00:12:36,000
then you should be able to run it once

00:12:33,760 --> 00:12:36,959
twice a hundred times against the same

00:12:36,000 --> 00:12:39,360
infrastructure

00:12:36,959 --> 00:12:40,720
and always end up with the same state at

00:12:39,360 --> 00:12:42,639
the end of it so

00:12:40,720 --> 00:12:44,480
it really doesn't matter if you run it

00:12:42,639 --> 00:12:46,800
over the top of a previous run

00:12:44,480 --> 00:12:48,639
in fact you should be able to break one

00:12:46,800 --> 00:12:50,480
thing and then rerun the playbook and it

00:12:48,639 --> 00:12:52,480
puts it back how it was that is the

00:12:50,480 --> 00:12:53,920
whole concept of being ident potent is

00:12:52,480 --> 00:12:57,040
basically saying

00:12:53,920 --> 00:12:59,360
my servers have a nice steady state

00:12:57,040 --> 00:13:00,880
and ansible is going to put them in that

00:12:59,360 --> 00:13:02,399
state and if they ever leave that state

00:13:00,880 --> 00:13:04,399
you can put them back into that state

00:13:02,399 --> 00:13:05,839
with ansible

00:13:04,399 --> 00:13:08,240
one of the other things i really love

00:13:05,839 --> 00:13:08,959
about ansible is the code is often

00:13:08,240 --> 00:13:12,000
described

00:13:08,959 --> 00:13:13,600
by self dot uh by or even as self

00:13:12,000 --> 00:13:16,079
documenting and

00:13:13,600 --> 00:13:18,480
that's a term that i've picked up with

00:13:16,079 --> 00:13:20,880
that i believe to be very much true

00:13:18,480 --> 00:13:22,720
i think that ansible code is is quite

00:13:20,880 --> 00:13:24,560
easy to read there's a few bits of it

00:13:22,720 --> 00:13:28,399
but i think that to go from zero

00:13:24,560 --> 00:13:30,240
with ansible to meaningful automation is

00:13:28,399 --> 00:13:32,079
a relatively rapid journey and if

00:13:30,240 --> 00:13:33,519
someone else gives you a playbook or a

00:13:32,079 --> 00:13:36,079
role or something like that

00:13:33,519 --> 00:13:37,519
it's normally quite easy to pick it up

00:13:36,079 --> 00:13:38,639
and even if you don't really know the

00:13:37,519 --> 00:13:40,720
language to go

00:13:38,639 --> 00:13:41,680
okay i kind of understand what that's

00:13:40,720 --> 00:13:43,760
doing at least

00:13:41,680 --> 00:13:45,040
i've got an idea and i can go away and

00:13:43,760 --> 00:13:46,560
do a bit of research do a bit of

00:13:45,040 --> 00:13:48,240
searching on the internet and figure it

00:13:46,560 --> 00:13:51,040
all out

00:13:48,240 --> 00:13:52,800
now of course when you're automating any

00:13:51,040 --> 00:13:54,959
set of tasks sooner or later you're

00:13:52,800 --> 00:13:56,480
going to come across secrets

00:13:54,959 --> 00:13:58,639
passwords that kind of thing and

00:13:56,480 --> 00:13:59,360
deploying openstack is no exception to

00:13:58,639 --> 00:14:01,920
that

00:13:59,360 --> 00:14:04,000
openstack has secrets passwords that

00:14:01,920 --> 00:14:07,519
kind of thing that are necessary

00:14:04,000 --> 00:14:09,199
for configuring it for initial login for

00:14:07,519 --> 00:14:10,720
services to communicate with each other

00:14:09,199 --> 00:14:14,399
and that kind of thing

00:14:10,720 --> 00:14:16,079
and again ansible has built-in support

00:14:14,399 --> 00:14:17,839
for that in the form of

00:14:16,079 --> 00:14:19,199
ansible vault so ansible vault

00:14:17,839 --> 00:14:22,560
essentially

00:14:19,199 --> 00:14:24,480
encrypts sensitive data like passwords

00:14:22,560 --> 00:14:27,120
at rest but you can use them in

00:14:24,480 --> 00:14:29,360
playbooks as if they were unencrypted so

00:14:27,120 --> 00:14:30,639
brilliant addition to any automation

00:14:29,360 --> 00:14:33,199
technology

00:14:30,639 --> 00:14:34,480
to me ansible was just a really natural

00:14:33,199 --> 00:14:37,279
fit for this

00:14:34,480 --> 00:14:39,360
and beyond that there is the wonderful

00:14:37,279 --> 00:14:40,480
openstack ansible project so not only

00:14:39,360 --> 00:14:43,120
was i going to do my

00:14:40,480 --> 00:14:44,079
sort of basic bring up and configuration

00:14:43,120 --> 00:14:47,760
as far as possible

00:14:44,079 --> 00:14:48,959
with ansible there is as i mentioned a

00:14:47,760 --> 00:14:50,560
really wonderful project called

00:14:48,959 --> 00:14:52,160
openstack high financiable it's

00:14:50,560 --> 00:14:54,399
available on github

00:14:52,160 --> 00:14:56,560
e well staffed i spent quite a bit of

00:14:54,399 --> 00:14:57,279
time on their irc channel with and they

00:14:56,560 --> 00:14:58,880
helped me out

00:14:57,279 --> 00:15:01,760
loads whilst i was working on this

00:14:58,880 --> 00:15:04,560
project and so

00:15:01,760 --> 00:15:05,279
just logically in my head it was like

00:15:04,560 --> 00:15:08,639
very much

00:15:05,279 --> 00:15:09,120
well if we're in a state where openstack

00:15:08,639 --> 00:15:11,680
itself

00:15:09,120 --> 00:15:13,199
is deployed with ansible then there's no

00:15:11,680 --> 00:15:14,880
point me bringing up the rest of the

00:15:13,199 --> 00:15:15,839
environment with some other automation

00:15:14,880 --> 00:15:18,079
technology

00:15:15,839 --> 00:15:19,440
i want to reduce this to a nice simple

00:15:18,079 --> 00:15:20,720
level where i'm using as few

00:15:19,440 --> 00:15:22,959
technologies as possible

00:15:20,720 --> 00:15:25,199
but really picking the right ones so

00:15:22,959 --> 00:15:27,760
ansible for me was a very very natural

00:15:25,199 --> 00:15:31,040
fit here

00:15:27,760 --> 00:15:31,680
now why cloud in it how has cloud in it

00:15:31,040 --> 00:15:34,880
snuck

00:15:31,680 --> 00:15:37,519
into this arena well

00:15:34,880 --> 00:15:39,839
ansible is really really great when

00:15:37,519 --> 00:15:42,079
you've brought up your infrastructure so

00:15:39,839 --> 00:15:42,720
your vms have booted up they've got that

00:15:42,079 --> 00:15:45,120
initial

00:15:42,720 --> 00:15:46,800
username and password or it could be ssh

00:15:45,120 --> 00:15:48,959
key for login but they've got that

00:15:46,800 --> 00:15:53,519
initial authentication mechanism

00:15:48,959 --> 00:15:55,680
they've got that initial ip address and

00:15:53,519 --> 00:15:58,000
a little little some teaser there as

00:15:55,680 --> 00:15:59,920
well you also need python installed so i

00:15:58,000 --> 00:16:00,720
mentioned that ansible is agentless it

00:15:59,920 --> 00:16:03,279
is indeed

00:16:00,720 --> 00:16:04,079
it does however expect python to be

00:16:03,279 --> 00:16:06,639
installed

00:16:04,079 --> 00:16:09,120
on the virtual machines or indeed

00:16:06,639 --> 00:16:13,120
physical machines that it's automating

00:16:09,120 --> 00:16:15,120
now most modern linux distributions do

00:16:13,120 --> 00:16:17,199
feature python which is why

00:16:15,120 --> 00:16:18,480
this is a fairly reasonable assumption

00:16:17,199 --> 00:16:20,320
for ansible to make

00:16:18,480 --> 00:16:22,160
but some of the really minimal cloud

00:16:20,320 --> 00:16:23,920
images that you might come across for

00:16:22,160 --> 00:16:26,160
linux from some of the vendors

00:16:23,920 --> 00:16:28,079
they don't have python built in it's not

00:16:26,160 --> 00:16:29,759
included simply to keep the image really

00:16:28,079 --> 00:16:31,279
light and really compact

00:16:29,759 --> 00:16:32,880
and that's obviously great from a

00:16:31,279 --> 00:16:35,600
space-saving point of view

00:16:32,880 --> 00:16:37,279
it's a real pain if you want to automate

00:16:35,600 --> 00:16:40,160
with ansible because your first step

00:16:37,279 --> 00:16:41,600
is potentially worst case scenario to

00:16:40,160 --> 00:16:43,600
manually have to deploy

00:16:41,600 --> 00:16:45,199
python across all your nodes and that's

00:16:43,600 --> 00:16:46,880
really something that you don't want to

00:16:45,199 --> 00:16:49,279
have to do

00:16:46,880 --> 00:16:50,320
now as i mentioned a couple of slides

00:16:49,279 --> 00:16:53,040
ago

00:16:50,320 --> 00:16:55,120
to bring up blank linux images and

00:16:53,040 --> 00:16:56,240
configure them with usernames passwords

00:16:55,120 --> 00:16:58,639
ip's

00:16:56,240 --> 00:17:00,399
even put python on none of it is rocket

00:16:58,639 --> 00:17:02,560
science none of it is difficult

00:17:00,399 --> 00:17:04,799
but what it is if you have to do it at

00:17:02,560 --> 00:17:06,079
scale and if you have to do it over and

00:17:04,799 --> 00:17:08,079
over again and remember

00:17:06,079 --> 00:17:10,160
my hypothesis i'm probably not going to

00:17:08,079 --> 00:17:11,760
get this right not even on the 10th try

00:17:10,160 --> 00:17:13,520
never mind the first one

00:17:11,760 --> 00:17:16,880
the last thing you want is to be doing

00:17:13,520 --> 00:17:18,959
this repetitively at scale

00:17:16,880 --> 00:17:21,199
cloud in it is something that is baked

00:17:18,959 --> 00:17:22,880
in to most of the linux cloud images you

00:17:21,199 --> 00:17:24,160
will find out there in fact if you have

00:17:22,880 --> 00:17:26,000
experienced

00:17:24,160 --> 00:17:27,600
linux on any of the major cloud

00:17:26,000 --> 00:17:29,280
providers and

00:17:27,600 --> 00:17:31,280
not picking on any particular names but

00:17:29,280 --> 00:17:34,400
you know the big ones off the top of my

00:17:31,280 --> 00:17:37,039
head like azure and aws for example

00:17:34,400 --> 00:17:37,600
the initial bring up of those is almost

00:17:37,039 --> 00:17:39,600
always

00:17:37,600 --> 00:17:40,640
conf the machines are configured with

00:17:39,600 --> 00:17:42,559
cloud in it

00:17:40,640 --> 00:17:44,320
cloud in it is used within openstack

00:17:42,559 --> 00:17:47,039
itself to configure the vms

00:17:44,320 --> 00:17:48,799
again to configure the initial login and

00:17:47,039 --> 00:17:50,880
their initial ip address so they mean

00:17:48,799 --> 00:17:52,320
that you can have really clean vm images

00:17:50,880 --> 00:17:54,320
with no metadata

00:17:52,320 --> 00:17:56,320
and they download everything they need

00:17:54,320 --> 00:17:57,120
from this cloud init service from a

00:17:56,320 --> 00:18:01,200
known

00:17:57,120 --> 00:18:03,919
url or provider source now

00:18:01,200 --> 00:18:05,760
even when you install ubuntu server from

00:18:03,919 --> 00:18:07,200
the iso so you might install it on a

00:18:05,760 --> 00:18:08,799
physical piece of tin

00:18:07,200 --> 00:18:10,400
but when you install it if you have a

00:18:08,799 --> 00:18:12,240
poke about in the system and look at

00:18:10,400 --> 00:18:13,840
how it's configured how it set the ip

00:18:12,240 --> 00:18:15,760
address and all that kind of thing

00:18:13,840 --> 00:18:17,360
it's actually configured with cloud in

00:18:15,760 --> 00:18:19,200
it so what canonical have done with

00:18:17,360 --> 00:18:21,760
their ubuntu distribution

00:18:19,200 --> 00:18:23,600
is they've said cloudin is kind of here

00:18:21,760 --> 00:18:25,280
let's put it in across the board even

00:18:23,600 --> 00:18:27,039
when you're not using the cloud because

00:18:25,280 --> 00:18:29,440
that way our builds are consistent

00:18:27,039 --> 00:18:31,760
and i think that's a really great idea

00:18:29,440 --> 00:18:34,799
and cloudiness as well as working with

00:18:31,760 --> 00:18:36,559
as the name implies cloud platforms it

00:18:34,799 --> 00:18:38,080
also works really well with local

00:18:36,559 --> 00:18:38,799
platforms and one of the ways you can

00:18:38,080 --> 00:18:41,200
get data

00:18:38,799 --> 00:18:42,720
into cloud in it is from an iso images

00:18:41,200 --> 00:18:45,039
now

00:18:42,720 --> 00:18:46,880
iso's physical optical disks are

00:18:45,039 --> 00:18:48,400
obviously going the way the dodo in fact

00:18:46,880 --> 00:18:50,080
i think they've kind of already done

00:18:48,400 --> 00:18:53,200
that in 2020

00:18:50,080 --> 00:18:54,640
but attaching an iso image to a virtual

00:18:53,200 --> 00:18:57,120
machine is something that's

00:18:54,640 --> 00:18:58,400
still commonplace easy to do well

00:18:57,120 --> 00:19:01,280
supported

00:18:58,400 --> 00:19:02,720
and so this is a really great way when

00:19:01,280 --> 00:19:04,720
you're working with virtual machines to

00:19:02,720 --> 00:19:06,799
get cloud init data in even if you're

00:19:04,720 --> 00:19:08,080
not using a public or private cloud

00:19:06,799 --> 00:19:11,520
platform

00:19:08,080 --> 00:19:12,880
and in cloudinit i've seen it do a lot

00:19:11,520 --> 00:19:15,280
of the basics

00:19:12,880 --> 00:19:17,039
the here's a static ip address here's

00:19:15,280 --> 00:19:18,640
your dns servers here is the initial

00:19:17,039 --> 00:19:20,000
username and password of someone who's

00:19:18,640 --> 00:19:22,240
going to log in

00:19:20,000 --> 00:19:24,240
what i learned as part of this that i i

00:19:22,240 --> 00:19:25,760
just hadn't appreciated about cloud in

00:19:24,240 --> 00:19:29,200
it as a technology

00:19:25,760 --> 00:19:31,440
is that it can actually do the full

00:19:29,200 --> 00:19:34,160
bring up it can configure the bonding

00:19:31,440 --> 00:19:35,360
it can configure ssh keys it can run

00:19:34,160 --> 00:19:37,120
arbitrary commands so

00:19:35,360 --> 00:19:39,440
if you've got a cloud image without

00:19:37,120 --> 00:19:41,120
python installed it can do

00:19:39,440 --> 00:19:42,640
if you're using ubuntu which i ended up

00:19:41,120 --> 00:19:44,799
using you can do

00:19:42,640 --> 00:19:45,679
apt-get install python as part of the

00:19:44,799 --> 00:19:46,960
initial bring up

00:19:45,679 --> 00:19:48,720
as well as all the network and

00:19:46,960 --> 00:19:50,960
everything else so

00:19:48,720 --> 00:19:52,640
cloud in it for me works really well

00:19:50,960 --> 00:19:54,480
hand in hand with ansible

00:19:52,640 --> 00:19:56,640
and i think there's obviously there's

00:19:54,480 --> 00:19:58,559
some overlap between the tools because

00:19:56,640 --> 00:20:00,240
you could do initial scripts in cloudine

00:19:58,559 --> 00:20:01,360
that do all the bring up that you want

00:20:00,240 --> 00:20:04,080
to do

00:20:01,360 --> 00:20:04,640
but what i did was i drew a line in the

00:20:04,080 --> 00:20:08,000
sand

00:20:04,640 --> 00:20:09,520
as one does and i said i want cloud in

00:20:08,000 --> 00:20:11,280
it to be responsible of

00:20:09,520 --> 00:20:13,600
for just enough configuration that the

00:20:11,280 --> 00:20:15,440
vm stands up by itself

00:20:13,600 --> 00:20:17,600
and then i'm going to let ansible take

00:20:15,440 --> 00:20:19,120
over and do all the heavy lifting

00:20:17,600 --> 00:20:20,799
there's no right or wrong in doing more

00:20:19,120 --> 00:20:22,559
with cloud in it it's just a case of

00:20:20,799 --> 00:20:24,559
drawing your own line in the sand

00:20:22,559 --> 00:20:26,640
and working out where that's going to be

00:20:24,559 --> 00:20:30,640
for you where you think that's going to

00:20:26,640 --> 00:20:34,720
work best now

00:20:30,640 --> 00:20:36,320
hardware i had one blade for this task

00:20:34,720 --> 00:20:38,240
and it was fairly apparent to me that in

00:20:36,320 --> 00:20:40,320
spite of my burning desire

00:20:38,240 --> 00:20:42,640
to build something that looked like a

00:20:40,320 --> 00:20:45,039
highly available production

00:20:42,640 --> 00:20:46,080
openstack architecture that i wasn't

00:20:45,039 --> 00:20:48,480
going to get

00:20:46,080 --> 00:20:49,840
a hand you know a handful of switches a

00:20:48,480 --> 00:20:51,840
handful of blades or

00:20:49,840 --> 00:20:54,320
pizza boxes or whatever it was to build

00:20:51,840 --> 00:20:56,400
it on and so

00:20:54,320 --> 00:20:58,000
i it was like okay fine i think it's

00:20:56,400 --> 00:21:00,480
pretty plain to see that i'm going to

00:20:58,000 --> 00:21:03,760
need a hypervisor to achieve this

00:21:00,480 --> 00:21:04,880
and i work in the open source space so

00:21:03,760 --> 00:21:07,919
it needs to be

00:21:04,880 --> 00:21:08,240
free and free as in open source free as

00:21:07,919 --> 00:21:11,440
in

00:21:08,240 --> 00:21:13,280
gpl or something appropriately licensed

00:21:11,440 --> 00:21:14,880
fast is obviously important because of

00:21:13,280 --> 00:21:16,640
the amount if you imagine

00:21:14,880 --> 00:21:19,200
i was going to try and put 10 nodes on

00:21:16,640 --> 00:21:20,799
one box doing a fair amount of work

00:21:19,200 --> 00:21:22,880
it's got to be fast i don't want it to

00:21:20,799 --> 00:21:23,600
be a heavyweight cumbersome emulation

00:21:22,880 --> 00:21:26,480
layer

00:21:23,600 --> 00:21:28,640
it needs to be flexible and bearing in

00:21:26,480 --> 00:21:30,159
mind that openstack obviously is its own

00:21:28,640 --> 00:21:32,480
virtualization solution

00:21:30,159 --> 00:21:34,320
outright it needs to support nested

00:21:32,480 --> 00:21:35,440
virtualization i need to be able to pass

00:21:34,320 --> 00:21:38,400
those cpi

00:21:35,440 --> 00:21:40,559
cpu flags through to the vms so they can

00:21:38,400 --> 00:21:43,200
do nested virtualization

00:21:40,559 --> 00:21:45,039
ideally you know we all know that nested

00:21:43,200 --> 00:21:46,640
virtualization is not going to be fast

00:21:45,039 --> 00:21:48,480
but at least it would allow me to get

00:21:46,640 --> 00:21:51,200
the functionality up and running

00:21:48,480 --> 00:21:52,880
and spoiler the cpu support from their

00:21:51,200 --> 00:21:55,600
tested virtualization was there so that

00:21:52,880 --> 00:21:58,720
was one battle i didn't have to fight

00:21:55,600 --> 00:22:01,200
now linux kernel virtualization just

00:21:58,720 --> 00:22:02,400
seemed like the absolute perfect fit for

00:22:01,200 --> 00:22:04,559
me it's just

00:22:02,400 --> 00:22:05,679
there on just about any modern linux

00:22:04,559 --> 00:22:08,559
that you install

00:22:05,679 --> 00:22:10,400
it's free it's lightweight it works i

00:22:08,559 --> 00:22:12,000
know it supports nested virtualization

00:22:10,400 --> 00:22:14,480
because i've done it so

00:22:12,000 --> 00:22:16,320
a bit like ansible for me fell into

00:22:14,480 --> 00:22:17,200
place as declared in it as natural

00:22:16,320 --> 00:22:20,080
choices

00:22:17,200 --> 00:22:21,440
the um the libvert and the linux kernel

00:22:20,080 --> 00:22:23,360
virtualization

00:22:21,440 --> 00:22:25,120
just fell into place as the natural

00:22:23,360 --> 00:22:29,280
choice for this to work with

00:22:25,120 --> 00:22:30,480
so what about the switching we've talked

00:22:29,280 --> 00:22:32,720
at length about bringing up

00:22:30,480 --> 00:22:37,120
infrastructure about multiple nodes

00:22:32,720 --> 00:22:40,240
about really bringing up the whole thing

00:22:37,120 --> 00:22:42,000
what about the switching now for me

00:22:40,240 --> 00:22:44,080
i needed something that i could

00:22:42,000 --> 00:22:46,799
virtualize so something that i could run

00:22:44,080 --> 00:22:48,000
on kvm something that was modern

00:22:46,799 --> 00:22:50,559
something that was

00:22:48,000 --> 00:22:51,520
fast but also importantly something that

00:22:50,559 --> 00:22:53,919
was free

00:22:51,520 --> 00:22:55,760
because i'm sure most people know you

00:22:53,919 --> 00:22:59,280
can run things like cisco switches

00:22:55,760 --> 00:23:01,520
emulated on tools out there

00:22:59,280 --> 00:23:03,200
however there is a legal question mark

00:23:01,520 --> 00:23:05,679
over downloading those

00:23:03,200 --> 00:23:07,280
rom images and running it so i didn't

00:23:05,679 --> 00:23:08,000
want to fall into that gray area i

00:23:07,280 --> 00:23:10,960
wanted to choose

00:23:08,000 --> 00:23:13,600
something that was genuinely free and

00:23:10,960 --> 00:23:15,280
legitimate to use in this context

00:23:13,600 --> 00:23:17,200
and the answer came to me in the form of

00:23:15,280 --> 00:23:19,039
cumulus networks who

00:23:17,200 --> 00:23:20,640
since i started all this work have been

00:23:19,039 --> 00:23:23,840
acquired by nvidia

00:23:20,640 --> 00:23:25,840
but they produce a linux distribution

00:23:23,840 --> 00:23:27,840
called cumulus linux that runs on white

00:23:25,840 --> 00:23:31,120
box switching hardware so we're talking

00:23:27,840 --> 00:23:33,440
sort of 130 plus platforms at this time

00:23:31,120 --> 00:23:34,559
and when you log into it it looks a lot

00:23:33,440 --> 00:23:36,240
like debian

00:23:34,559 --> 00:23:37,840
you can use all your linux schools to

00:23:36,240 --> 00:23:40,000
manage it but yet it's a fully

00:23:37,840 --> 00:23:41,840
featured switch management platform

00:23:40,000 --> 00:23:45,039
which is absolutely fantastic

00:23:41,840 --> 00:23:46,559
and they very kindly release a tool set

00:23:45,039 --> 00:23:48,559
called cumulus vx

00:23:46,559 --> 00:23:50,000
which you can run in just about any

00:23:48,559 --> 00:23:52,240
hypervisor so that

00:23:50,000 --> 00:23:54,320
was like fantastic i can download

00:23:52,240 --> 00:23:56,240
cumulus vx and i can configure

00:23:54,320 --> 00:23:57,840
a modern sort of switching high

00:23:56,240 --> 00:23:59,200
availability switching architecture

00:23:57,840 --> 00:24:01,600
within

00:23:59,200 --> 00:24:03,919
my chosen hypervisor and i can have not

00:24:01,600 --> 00:24:06,080
just redundancy at the openstack layer

00:24:03,919 --> 00:24:08,320
but redundancy at the switching layer as

00:24:06,080 --> 00:24:08,320
well

00:24:08,400 --> 00:24:12,240
now this is all great lots of decisions

00:24:11,600 --> 00:24:14,720
made

00:24:12,240 --> 00:24:15,279
lots of planning put in place the thing

00:24:14,720 --> 00:24:17,760
is

00:24:15,279 --> 00:24:19,440
i am very visual in the nature in the

00:24:17,760 --> 00:24:20,240
way that i learn and the way i process

00:24:19,440 --> 00:24:21,840
things

00:24:20,240 --> 00:24:23,440
i knew that if i tried to build

00:24:21,840 --> 00:24:24,880
something of the order of ten linux

00:24:23,440 --> 00:24:26,400
nodes with five switches

00:24:24,880 --> 00:24:28,240
so this is sort of leaf and spine

00:24:26,400 --> 00:24:31,200
switching with

00:24:28,240 --> 00:24:32,720
um an outer band management switch my

00:24:31,200 --> 00:24:33,840
brain was going to melt if i tried to

00:24:32,720 --> 00:24:36,960
wire that up

00:24:33,840 --> 00:24:40,400
using you know tap adapters

00:24:36,960 --> 00:24:41,200
bridging linking ports within xml files

00:24:40,400 --> 00:24:44,000
for libva

00:24:41,200 --> 00:24:45,440
that kind of thing and bearing in mind

00:24:44,000 --> 00:24:46,000
that again i was going to follow i

00:24:45,440 --> 00:24:47,279
decided

00:24:46,000 --> 00:24:48,880
at this point i was going to follow a

00:24:47,279 --> 00:24:50,400
reference design from the openstack

00:24:48,880 --> 00:24:51,679
ansible project this is where the 10

00:24:50,400 --> 00:24:54,240
nodes come from

00:24:51,679 --> 00:24:55,279
and so i was going to be using vxlan i

00:24:54,240 --> 00:24:57,360
was going to have

00:24:55,279 --> 00:24:59,120
two physical networks because obviously

00:24:57,360 --> 00:25:00,000
you don't want to be using bandwidth for

00:24:59,120 --> 00:25:01,760
storage

00:25:00,000 --> 00:25:03,279
and then have people competing for that

00:25:01,760 --> 00:25:04,480
bandwidth for their actual functional

00:25:03,279 --> 00:25:06,320
applications

00:25:04,480 --> 00:25:07,760
there will be vlans on top of those

00:25:06,320 --> 00:25:09,840
physical networks

00:25:07,760 --> 00:25:11,520
it was just my brain was absolutely

00:25:09,840 --> 00:25:13,600
going to melt if i tried to implement

00:25:11,520 --> 00:25:16,159
this all in flat text files

00:25:13,600 --> 00:25:18,159
so i wanted to commit sort of the

00:25:16,159 --> 00:25:21,679
ultimate heresy of the open source space

00:25:18,159 --> 00:25:23,520
and have a gui for this i.e

00:25:21,679 --> 00:25:25,120
cumulus networks if anyone's interested

00:25:23,520 --> 00:25:27,120
on their github site they have some

00:25:25,120 --> 00:25:29,840
great tools for developing

00:25:27,120 --> 00:25:30,960
um architectures for wiring up large

00:25:29,840 --> 00:25:33,120
networks

00:25:30,960 --> 00:25:35,440
i think it's based on vagrant if memory

00:25:33,120 --> 00:25:36,960
serves do go and investigate that if you

00:25:35,440 --> 00:25:39,039
if you are so inclined and you do want

00:25:36,960 --> 00:25:41,600
to do this in text mode but for me

00:25:39,039 --> 00:25:44,640
i wanted a gui and i'm not ashamed to

00:25:41,600 --> 00:25:47,679
admit that here today

00:25:44,640 --> 00:25:49,120
now my mention of heresy came about in

00:25:47,679 --> 00:25:51,360
the form of gns3

00:25:49,120 --> 00:25:52,480
and i had heard about this a number of

00:25:51,360 --> 00:25:55,200
times in my career

00:25:52,480 --> 00:25:56,000
dabbled with it a number of times this

00:25:55,200 --> 00:25:57,679
sort of come across

00:25:56,000 --> 00:25:59,520
in the context of i wonder if it's worth

00:25:57,679 --> 00:26:00,000
me getting a ccna learning some more

00:25:59,520 --> 00:26:03,200
about

00:26:00,000 --> 00:26:04,159
switching and so on but it turns out

00:26:03,200 --> 00:26:06,480
when i

00:26:04,159 --> 00:26:08,559
pulled out gns3 because i liked the gui

00:26:06,480 --> 00:26:10,799
on it and as i started to poke about

00:26:08,559 --> 00:26:12,960
what i realized was that under the hood

00:26:10,799 --> 00:26:13,840
gns3 is quite interesting in the way it

00:26:12,960 --> 00:26:16,720
works

00:26:13,840 --> 00:26:18,159
it uses linux kernel virtualization it's

00:26:16,720 --> 00:26:20,320
designed to

00:26:18,159 --> 00:26:22,400
support cloud images so you can download

00:26:20,320 --> 00:26:24,159
your ubuntu cloud image or your previous

00:26:22,400 --> 00:26:25,039
vx cloud image and run it almost

00:26:24,159 --> 00:26:28,640
straight off

00:26:25,039 --> 00:26:29,440
in gns3 you can mount iso images easily

00:26:28,640 --> 00:26:31,360
which means

00:26:29,440 --> 00:26:32,960
we can get our cloud init data from that

00:26:31,360 --> 00:26:34,880
iso and

00:26:32,960 --> 00:26:36,559
there's all you know you can do all the

00:26:34,880 --> 00:26:38,480
stuff that you'd expect to be able to do

00:26:36,559 --> 00:26:39,440
on the command line with libvert so you

00:26:38,480 --> 00:26:41,520
can manipulate

00:26:39,440 --> 00:26:43,440
the backing images they're standard qca2

00:26:41,520 --> 00:26:47,039
based images so you can use

00:26:43,440 --> 00:26:49,760
libguest fs you can use qemu

00:26:47,039 --> 00:26:51,520
hyphen image to manipulate them inject

00:26:49,760 --> 00:26:54,000
files that kind of thing

00:26:51,520 --> 00:26:55,039
you can add any command line switches to

00:26:54,000 --> 00:26:56,720
the qemu

00:26:55,039 --> 00:26:58,320
binary for running it so that's how you

00:26:56,720 --> 00:26:59,440
can get your nested virtualization

00:26:58,320 --> 00:27:02,640
turned on

00:26:59,440 --> 00:27:04,840
essentially it wasn't designed this way

00:27:02,640 --> 00:27:08,240
but it's a really great interface to

00:27:04,840 --> 00:27:10,880
linux linux's built-in kernel hypervisor

00:27:08,240 --> 00:27:13,039
and it's free it's open source and it

00:27:10,880 --> 00:27:15,360
has a gui

00:27:13,039 --> 00:27:16,640
now this here was the end results for

00:27:15,360 --> 00:27:18,320
anybody who wants to know what it all

00:27:16,640 --> 00:27:20,159
looked like albeit it's powered off in

00:27:18,320 --> 00:27:24,320
this screenshot wired up

00:27:20,159 --> 00:27:26,000
now unfortunately getting this in and

00:27:24,320 --> 00:27:27,600
doing a live demo isn't possible in the

00:27:26,000 --> 00:27:28,240
time that we've got but this is what it

00:27:27,600 --> 00:27:30,240
looks like

00:27:28,240 --> 00:27:32,240
now i think you'll agree it would

00:27:30,240 --> 00:27:33,760
probably benefit a little bit from

00:27:32,240 --> 00:27:35,440
some orthogonal lines something like

00:27:33,760 --> 00:27:37,440
that but

00:27:35,440 --> 00:27:39,120
the great thing about this for me was

00:27:37,440 --> 00:27:40,480
that each of those network links you can

00:27:39,120 --> 00:27:41,919
drag any of the nodes around to make

00:27:40,480 --> 00:27:43,279
that easier to see i've kind of squished

00:27:41,919 --> 00:27:44,960
it up a little bit so it would all fit

00:27:43,279 --> 00:27:46,640
on the one screenshot there

00:27:44,960 --> 00:27:48,399
but you can right click on any of those

00:27:46,640 --> 00:27:50,000
links you can take them away

00:27:48,399 --> 00:27:52,559
you can sniff the traffic on them to see

00:27:50,000 --> 00:27:53,279
what's going on so you get this really

00:27:52,559 --> 00:27:55,200
great

00:27:53,279 --> 00:27:56,480
tool to play with the network and see

00:27:55,200 --> 00:27:59,679
what's going on

00:27:56,480 --> 00:28:01,520
and to manipulate it if the need arises

00:27:59,679 --> 00:28:02,799
and each node you can right click on you

00:28:01,520 --> 00:28:05,120
can power it on power

00:28:02,799 --> 00:28:06,320
off get into the terminal of it it's a

00:28:05,120 --> 00:28:09,200
really great

00:28:06,320 --> 00:28:10,159
way to to remove the headache the brain

00:28:09,200 --> 00:28:11,520
ache of trying to manage

00:28:10,159 --> 00:28:15,440
an architecture like this when you

00:28:11,520 --> 00:28:15,440
virtualized it all on one piece of tin

00:28:15,520 --> 00:28:20,960
now the end result was bypassing a lot

00:28:19,520 --> 00:28:21,840
of story and a lot of swearing and

00:28:20,960 --> 00:28:25,520
everything else

00:28:21,840 --> 00:28:26,480
that it all worked and it really did

00:28:25,520 --> 00:28:28,799
actually produce

00:28:26,480 --> 00:28:30,000
a real working representation of

00:28:28,799 --> 00:28:33,039
something that you might put

00:28:30,000 --> 00:28:35,200
together in the real world for openstack

00:28:33,039 --> 00:28:36,320
and i think that was great and the great

00:28:35,200 --> 00:28:38,559
thing for me

00:28:36,320 --> 00:28:40,000
was it was all deployed with ansible and

00:28:38,559 --> 00:28:42,880
cloud in it so

00:28:40,000 --> 00:28:43,520
the whole point of that was this is

00:28:42,880 --> 00:28:47,919
something

00:28:43,520 --> 00:28:50,000
that you could do again and again

00:28:47,919 --> 00:28:51,679
now drilling down into that you know

00:28:50,000 --> 00:28:53,200
obviously that's that's a fairly

00:28:51,679 --> 00:28:54,880
quick statement what does that actually

00:28:53,200 --> 00:28:56,799
mean well

00:28:54,880 --> 00:28:59,039
the gns3 environment is completely

00:28:56,799 --> 00:29:00,880
isolated from the rest of your network

00:28:59,039 --> 00:29:02,640
the playbooks and the cloud init scripts

00:29:00,880 --> 00:29:04,399
that were written could be used to bring

00:29:02,640 --> 00:29:06,880
up a real world

00:29:04,399 --> 00:29:08,880
um you know installation architecture of

00:29:06,880 --> 00:29:10,880
openstack on physical tin

00:29:08,880 --> 00:29:12,000
you could even replicate mac addresses

00:29:10,880 --> 00:29:13,760
if you wanted to

00:29:12,000 --> 00:29:15,760
and ip addresses that you would use in

00:29:13,760 --> 00:29:17,039
production in gns3 because the networks

00:29:15,760 --> 00:29:18,320
are isolated they're not going to

00:29:17,039 --> 00:29:21,039
overlap so you could test

00:29:18,320 --> 00:29:22,559
every aspect of this it is a complete

00:29:21,039 --> 00:29:26,240
digital twin

00:29:22,559 --> 00:29:28,000
and the beauty of it is as i say

00:29:26,240 --> 00:29:29,919
because you can twin absolutely

00:29:28,000 --> 00:29:31,679
everything you can literally develop and

00:29:29,919 --> 00:29:33,360
test your ansible and your cloud init

00:29:31,679 --> 00:29:35,840
scripts and playbooks and

00:29:33,360 --> 00:29:38,000
what have you in gns3 and then use

00:29:35,840 --> 00:29:40,159
exactly the same ones on a

00:29:38,000 --> 00:29:42,000
you know a rack full of hardware and

00:29:40,159 --> 00:29:43,679
hopefully get the same results

00:29:42,000 --> 00:29:44,880
so it's not just useful for actually

00:29:43,679 --> 00:29:46,559
testing and learning about the

00:29:44,880 --> 00:29:48,240
architecture it's useful for testing and

00:29:46,559 --> 00:29:49,440
learning about the automation process

00:29:48,240 --> 00:29:51,279
too

00:29:49,440 --> 00:29:52,880
now this process can be applied to just

00:29:51,279 --> 00:29:54,399
about any technology so this was quite

00:29:52,880 --> 00:29:55,360
an ambitious starting point with

00:29:54,399 --> 00:29:57,120
openstack

00:29:55,360 --> 00:29:58,799
but i've since used this to build any

00:29:57,120 --> 00:30:01,279
number of demo environments for

00:29:58,799 --> 00:30:02,640
clients proof of concepts training

00:30:01,279 --> 00:30:04,720
environments that kind of thing i've

00:30:02,640 --> 00:30:06,399
found it's been really valuable and i've

00:30:04,720 --> 00:30:08,320
tweaked and enhanced the scripts the

00:30:06,399 --> 00:30:09,919
cloud init build environment things that

00:30:08,320 --> 00:30:12,559
i used on this initially

00:30:09,919 --> 00:30:14,480
it makes a really great training tool

00:30:12,559 --> 00:30:16,640
and because it's got that visual appeal

00:30:14,480 --> 00:30:19,360
it's particularly good when i'm working

00:30:16,640 --> 00:30:20,799
to do pre-sales work as a consultant i

00:30:19,360 --> 00:30:22,720
can use it to

00:30:20,799 --> 00:30:23,919
show people visually the kind of network

00:30:22,720 --> 00:30:24,720
that we're looking at to build a

00:30:23,919 --> 00:30:26,320
solution

00:30:24,720 --> 00:30:28,559
and then i can drill down into it

00:30:26,320 --> 00:30:30,559
actually run it get onto the console of

00:30:28,559 --> 00:30:32,240
boxes or get onto web interfaces and

00:30:30,559 --> 00:30:34,320
show them how it all works

00:30:32,240 --> 00:30:35,360
so it's got this massive application for

00:30:34,320 --> 00:30:37,200
simulating

00:30:35,360 --> 00:30:40,000
real world architectures because very

00:30:37,200 --> 00:30:42,000
little in 2020 lives on one server

00:30:40,000 --> 00:30:43,279
or one box almost everything that we're

00:30:42,000 --> 00:30:44,799
going to deploy particularly in a

00:30:43,279 --> 00:30:47,279
production context

00:30:44,799 --> 00:30:48,480
needs to be high availability it needs

00:30:47,279 --> 00:30:51,520
more than one node

00:30:48,480 --> 00:30:56,399
it needs some form of replication or aha

00:30:51,520 --> 00:30:58,480
or something but what else can we do

00:30:56,399 --> 00:30:59,760
you know this by itself for me has been

00:30:58,480 --> 00:31:01,760
massively valuable

00:30:59,760 --> 00:31:03,440
but what about if we actually get down

00:31:01,760 --> 00:31:05,120
into the process of breaking something

00:31:03,440 --> 00:31:06,799
let's do something fun let's do

00:31:05,120 --> 00:31:09,679
something destructive

00:31:06,799 --> 00:31:11,760
now here's some ideas that i came up

00:31:09,679 --> 00:31:13,440
with i've had time to try a few of these

00:31:11,760 --> 00:31:14,880
the list isn't exhaustive

00:31:13,440 --> 00:31:16,480
but this is to give you an idea of the

00:31:14,880 --> 00:31:18,799
kind of thing that you could do

00:31:16,480 --> 00:31:20,559
and bear in mind if you'd actually built

00:31:18,799 --> 00:31:23,200
this on physical hardware

00:31:20,559 --> 00:31:24,720
configured every node by hand you know

00:31:23,200 --> 00:31:26,159
got in there configured the bonding

00:31:24,720 --> 00:31:28,799
configured the switches

00:31:26,159 --> 00:31:29,279
spent time installing everything you

00:31:28,799 --> 00:31:31,120
would be

00:31:29,279 --> 00:31:33,600
really really upset if someone came

00:31:31,120 --> 00:31:35,200
along and said i want to try this attack

00:31:33,600 --> 00:31:36,000
on your network it's probably going to

00:31:35,200 --> 00:31:37,840
break it

00:31:36,000 --> 00:31:39,519
but can we try it because it would be

00:31:37,840 --> 00:31:40,880
like no it's going to take me hours to

00:31:39,519 --> 00:31:43,679
rebuild it

00:31:40,880 --> 00:31:45,039
but the thing with the gns3 based

00:31:43,679 --> 00:31:47,760
digital twin

00:31:45,039 --> 00:31:48,880
is you can pull individual network links

00:31:47,760 --> 00:31:51,039
just

00:31:48,880 --> 00:31:52,720
take them down and see what happens you

00:31:51,039 --> 00:31:54,640
can pull entire switches you can just

00:31:52,720 --> 00:31:56,399
literally pull the plug on a switch

00:31:54,640 --> 00:31:58,159
and see if tracking fix still roots so

00:31:56,399 --> 00:32:00,480
i'd put in place a little sort of

00:31:58,159 --> 00:32:02,000
spine and leaf network architecture

00:32:00,480 --> 00:32:03,919
there that i took

00:32:02,000 --> 00:32:05,440
from a reference design i found from

00:32:03,919 --> 00:32:09,039
cumulus linux's

00:32:05,440 --> 00:32:09,919
application sheets and that's great you

00:32:09,039 --> 00:32:12,159
can take

00:32:09,919 --> 00:32:13,760
one switch out from each tier and the

00:32:12,159 --> 00:32:15,919
traffic still roots

00:32:13,760 --> 00:32:17,360
you know you you'd almost you wouldn't

00:32:15,919 --> 00:32:18,559
go to the data center you wouldn't drive

00:32:17,360 --> 00:32:20,320
to the data center

00:32:18,559 --> 00:32:22,320
get the pass get in get through all the

00:32:20,320 --> 00:32:23,679
security and start pulling plugs on

00:32:22,320 --> 00:32:25,600
things to see what would happen but you

00:32:23,679 --> 00:32:27,679
can do that in this environment

00:32:25,600 --> 00:32:29,120
you can turn nodes off you can launch

00:32:27,679 --> 00:32:30,799
denial of service attacks

00:32:29,120 --> 00:32:32,720
brute force attacks imagine getting in

00:32:30,799 --> 00:32:34,720
there with a kali linux vm

00:32:32,720 --> 00:32:37,039
and doing all sorts of nefarious stuff

00:32:34,720 --> 00:32:38,320
to it the other great thing is business

00:32:37,039 --> 00:32:40,240
continuity

00:32:38,320 --> 00:32:42,000
you could literally back this

00:32:40,240 --> 00:32:44,399
environment up so test whatever your

00:32:42,000 --> 00:32:45,840
process is to back up the let's say in

00:32:44,399 --> 00:32:48,159
the openstack world

00:32:45,840 --> 00:32:49,360
the the mariadb database that holds all

00:32:48,159 --> 00:32:52,399
the config data

00:32:49,360 --> 00:32:54,159
to back up all the user data that glance

00:32:52,399 --> 00:32:55,279
and cinder and those kind of services

00:32:54,159 --> 00:32:57,519
are referencing

00:32:55,279 --> 00:32:58,320
you could back them up destroy the

00:32:57,519 --> 00:33:00,640
environment

00:32:58,320 --> 00:33:01,600
and then test your resource or processes

00:33:00,640 --> 00:33:03,279
all easily

00:33:01,600 --> 00:33:05,519
in a completely isolated environment

00:33:03,279 --> 00:33:07,279
without affecting anyone else

00:33:05,519 --> 00:33:09,440
and without sort of the risk to any

00:33:07,279 --> 00:33:11,279
customer data anything like that

00:33:09,440 --> 00:33:12,480
so it's really really valuable for

00:33:11,279 --> 00:33:14,720
testing out

00:33:12,480 --> 00:33:15,679
how you're going to deal with situations

00:33:14,720 --> 00:33:18,720
that just

00:33:15,679 --> 00:33:19,279
we we spend a lot of time putting things

00:33:18,720 --> 00:33:20,640
together

00:33:19,279 --> 00:33:23,039
in the hope that something doesn't

00:33:20,640 --> 00:33:24,559
happen like you know a raid controller

00:33:23,039 --> 00:33:26,960
blows up that completely

00:33:24,559 --> 00:33:28,799
through some weird modus operandi

00:33:26,960 --> 00:33:30,240
destroys the whole array that just

00:33:28,799 --> 00:33:32,640
shouldn't happen right but

00:33:30,240 --> 00:33:34,080
you know on the very edge cases it does

00:33:32,640 --> 00:33:35,840
and how do you deal with that do you

00:33:34,080 --> 00:33:38,320
even know if your backups work

00:33:35,840 --> 00:33:38,960
have you tested a restore as people have

00:33:38,320 --> 00:33:40,320
said to me

00:33:38,960 --> 00:33:43,760
your backups are no good unless you've

00:33:40,320 --> 00:33:43,760
had a successful restore of them

00:33:44,159 --> 00:33:48,080
but the great thing is you can do all of

00:33:46,399 --> 00:33:48,880
this you can do all this destructive

00:33:48,080 --> 00:33:52,000
work

00:33:48,880 --> 00:33:52,960
but you can back the whole thing up at

00:33:52,000 --> 00:33:55,519
the end of the day

00:33:52,960 --> 00:33:57,360
it's a json file that describes the gns3

00:33:55,519 --> 00:33:59,919
environment and a bunch of um

00:33:57,360 --> 00:34:01,840
literally qcal 2 image files so you

00:33:59,919 --> 00:34:03,840
could create a tarball of it

00:34:01,840 --> 00:34:05,360
and if you don't even want to go to that

00:34:03,840 --> 00:34:06,960
links gns3

00:34:05,360 --> 00:34:08,879
actually supports snapshots it has a

00:34:06,960 --> 00:34:10,480
snapshot functionality very much like

00:34:08,879 --> 00:34:11,679
you'd find in any other desktop

00:34:10,480 --> 00:34:14,320
hypervisor

00:34:11,679 --> 00:34:15,760
so you can create a snapshot and you get

00:34:14,320 --> 00:34:17,440
to blow it up more than once

00:34:15,760 --> 00:34:18,800
so not like the building where it's like

00:34:17,440 --> 00:34:19,760
it's come down and that's it now i've

00:34:18,800 --> 00:34:21,679
got to spend

00:34:19,760 --> 00:34:23,440
weeks months whatever it is

00:34:21,679 --> 00:34:24,000
metaphorically or otherwise rebuilding

00:34:23,440 --> 00:34:27,200
it

00:34:24,000 --> 00:34:29,359
you can literally do something evil

00:34:27,200 --> 00:34:30,800
blow it up and then within a matter of

00:34:29,359 --> 00:34:32,560
minutes put it back

00:34:30,800 --> 00:34:34,000
exactly how it was at the beginning and

00:34:32,560 --> 00:34:36,320
do it all over again

00:34:34,000 --> 00:34:37,760
and maybe i'm getting too much into this

00:34:36,320 --> 00:34:40,639
maybe it's too much fun for me

00:34:37,760 --> 00:34:42,720
but anyway that i think just has huge

00:34:40,639 --> 00:34:44,480
possibilities for training purposes for

00:34:42,720 --> 00:34:46,839
business continuity planning

00:34:44,480 --> 00:34:48,960
and for destructive testing for security

00:34:46,839 --> 00:34:51,679
testing

00:34:48,960 --> 00:34:53,679
now a quick worked example as we we come

00:34:51,679 --> 00:34:56,000
towards the end of the presentation

00:34:53,679 --> 00:34:57,520
we've got three osd nodes in a ceph

00:34:56,000 --> 00:35:00,320
cluster as part of this

00:34:57,520 --> 00:35:02,400
openstack ansible setup and all of them

00:35:00,320 --> 00:35:03,280
have one dedicated database so very very

00:35:02,400 --> 00:35:04,640
simple here

00:35:03,280 --> 00:35:06,560
you'd obviously have something a bit

00:35:04,640 --> 00:35:09,520
more in production but this is what i

00:35:06,560 --> 00:35:10,960
created we could pull a plug on a node

00:35:09,520 --> 00:35:12,800
as a starting point

00:35:10,960 --> 00:35:14,480
now because we've got three nodes my

00:35:12,800 --> 00:35:15,200
hope would be if i've configured it

00:35:14,480 --> 00:35:17,440
right

00:35:15,200 --> 00:35:19,200
everything keeps running the the the

00:35:17,440 --> 00:35:21,359
ceph cluster can deal with the loss of

00:35:19,200 --> 00:35:23,280
one node the data is still

00:35:21,359 --> 00:35:24,880
accessible albeit it's maybe being

00:35:23,280 --> 00:35:26,000
rebuilt on the fly or something like

00:35:24,880 --> 00:35:28,079
that is happening

00:35:26,000 --> 00:35:29,280
but it lets us actually test this you

00:35:28,079 --> 00:35:31,760
know you would never do this while your

00:35:29,280 --> 00:35:34,000
customers were using an environment

00:35:31,760 --> 00:35:36,079
now assuming that you get that far and

00:35:34,000 --> 00:35:38,079
that all works as you wanted it to

00:35:36,079 --> 00:35:40,240
you could then actually go in and you

00:35:38,079 --> 00:35:41,920
could do something really bad to the

00:35:40,240 --> 00:35:44,079
data disk so for example

00:35:41,920 --> 00:35:46,480
we know it's a flat file it's a cucto

00:35:44,079 --> 00:35:48,560
image you could use dd to copy from dev

00:35:46,480 --> 00:35:50,400
random to that qco2 image

00:35:48,560 --> 00:35:52,240
again you'd never do something like that

00:35:50,400 --> 00:35:53,839
in a production environment and probably

00:35:52,240 --> 00:35:55,440
not even in a testing environment just

00:35:53,839 --> 00:35:56,560
because of how long it would take to put

00:35:55,440 --> 00:35:59,119
it back together

00:35:56,560 --> 00:36:00,720
if something didn't work in terms of

00:35:59,119 --> 00:36:02,800
your recovery process

00:36:00,720 --> 00:36:03,839
but you could completely destroy that

00:36:02,800 --> 00:36:06,000
disc

00:36:03,839 --> 00:36:07,839
bring the node back into service see

00:36:06,000 --> 00:36:09,760
what happens see how the cluster behaves

00:36:07,839 --> 00:36:11,280
does it start serving garbage does it

00:36:09,760 --> 00:36:13,520
keep sane

00:36:11,280 --> 00:36:15,839
and then assuming it does what you hoped

00:36:13,520 --> 00:36:17,520
it do document the procedures

00:36:15,839 --> 00:36:18,880
even then test your recovery your

00:36:17,520 --> 00:36:20,800
rebuild processes

00:36:18,880 --> 00:36:22,480
and get the node back into services so

00:36:20,800 --> 00:36:24,800
it provides a complete

00:36:22,480 --> 00:36:26,560
disaster recovery training sort of

00:36:24,800 --> 00:36:28,320
sandbox environment which i just think

00:36:26,560 --> 00:36:31,359
is absolutely fantastic

00:36:28,320 --> 00:36:33,280
as i say it's something i've worked

00:36:31,359 --> 00:36:34,960
big and small companies for sort of i

00:36:33,280 --> 00:36:36,960
say almost 20 years now

00:36:34,960 --> 00:36:38,560
in this field and most of them never

00:36:36,960 --> 00:36:40,640
have a test environment that's quite the

00:36:38,560 --> 00:36:43,440
same scale as production to do this sort

00:36:40,640 --> 00:36:45,200
of destructive working

00:36:43,440 --> 00:36:46,720
now obviously there are some limitations

00:36:45,200 --> 00:36:48,240
to this i'm sure people will spotted

00:36:46,720 --> 00:36:51,119
some of these already

00:36:48,240 --> 00:36:52,720
it's it is being virtualized it's not

00:36:51,119 --> 00:36:54,160
going to be as fast as real hardware

00:36:52,720 --> 00:36:55,520
particularly when you come to nested

00:36:54,160 --> 00:36:57,599
virtualization

00:36:55,520 --> 00:36:59,839
and there is some hardware specific

00:36:57,599 --> 00:37:01,440
stuff that you can't do so being able to

00:36:59,839 --> 00:37:03,599
virtualize the switch layer has been

00:37:01,440 --> 00:37:05,599
fantastic but if you're using anything

00:37:03,599 --> 00:37:08,400
other than ethernet so if you're using

00:37:05,599 --> 00:37:09,440
fibre channel something low latency if

00:37:08,400 --> 00:37:11,520
you've got specific

00:37:09,440 --> 00:37:12,960
raid configurations for drives that you

00:37:11,520 --> 00:37:14,400
want to test out

00:37:12,960 --> 00:37:16,000
that kind of thing you're not going to

00:37:14,400 --> 00:37:19,040
be able to do effectively

00:37:16,000 --> 00:37:21,520
in the in the virtualized digital twin

00:37:19,040 --> 00:37:22,960
and you're not going to do this on a

00:37:21,520 --> 00:37:24,480
standard laptop as well you

00:37:22,960 --> 00:37:26,560
you just the poor thing you'd bring it

00:37:24,480 --> 00:37:27,599
to its knees so you do need to throw tin

00:37:26,560 --> 00:37:29,280
at this for sure

00:37:27,599 --> 00:37:31,760
to get it off the ground and working

00:37:29,280 --> 00:37:34,560
well for you

00:37:31,760 --> 00:37:36,079
now a few things as we come to the end

00:37:34,560 --> 00:37:36,800
of this presentation that i learned from

00:37:36,079 --> 00:37:39,280
the experience

00:37:36,800 --> 00:37:40,720
now it goes without saying it's why

00:37:39,280 --> 00:37:42,480
we're having this conference here but

00:37:40,720 --> 00:37:44,720
the linux community is absolutely

00:37:42,480 --> 00:37:46,560
amazing i had so much great support on

00:37:44,720 --> 00:37:48,240
irc channels particularly from the

00:37:46,560 --> 00:37:50,400
everyone at only openstack ansible

00:37:48,240 --> 00:37:52,000
project they were so helpful in getting

00:37:50,400 --> 00:37:55,280
this up and running

00:37:52,000 --> 00:37:57,200
do throw hardware at this i in the end i

00:37:55,280 --> 00:37:57,599
purchased a used workstation for this

00:37:57,200 --> 00:37:59,920
with

00:37:57,599 --> 00:38:00,640
two xeon chips in it and i put a big ssd

00:37:59,920 --> 00:38:01,920
in it and

00:38:00,640 --> 00:38:04,000
you know don't attempt this on

00:38:01,920 --> 00:38:06,240
mechanical storage do throw around

00:38:04,000 --> 00:38:07,680
at it do throw cpu cores at it it will

00:38:06,240 --> 00:38:09,839
help enormously

00:38:07,680 --> 00:38:12,079
and do use vertio for the disks than

00:38:09,839 --> 00:38:13,440
networking i started off using emulated

00:38:12,079 --> 00:38:15,680
e1000 mix

00:38:13,440 --> 00:38:17,599
and emulated ide for the disks and it

00:38:15,680 --> 00:38:18,320
works it's functional it's absolutely

00:38:17,599 --> 00:38:20,240
fine

00:38:18,320 --> 00:38:22,960
until you start to push it and then you

00:38:20,240 --> 00:38:25,599
realize how slow that emulated layer is

00:38:22,960 --> 00:38:27,359
and as it's all an environment like the

00:38:25,599 --> 00:38:29,359
one i built is all linux based

00:38:27,359 --> 00:38:31,599
there's no reason not to use vertio it's

00:38:29,359 --> 00:38:33,119
all supported natively

00:38:31,599 --> 00:38:35,359
and the the other thing that i learned

00:38:33,119 --> 00:38:37,200
the hard way i started this on a

00:38:35,359 --> 00:38:38,960
high-powered windows workstation because

00:38:37,200 --> 00:38:40,400
it was all i had to hand initially

00:38:38,960 --> 00:38:41,760
before i bought the one that i actually

00:38:40,400 --> 00:38:43,599
built it on

00:38:41,760 --> 00:38:46,000
don't do this on anything other than

00:38:43,599 --> 00:38:49,359
linux if you do it on say

00:38:46,000 --> 00:38:52,160
windows or a mac gns3 runs

00:38:49,359 --> 00:38:54,240
its whole virtualization layer in a vm

00:38:52,160 --> 00:38:56,560
on that os so you already nesting

00:38:54,240 --> 00:38:58,000
virtualization before you get anywhere

00:38:56,560 --> 00:38:59,520
so if you want to do nested

00:38:58,000 --> 00:39:01,200
virtualization you're doing nested

00:38:59,520 --> 00:39:03,440
inside nested it's just like

00:39:01,200 --> 00:39:06,960
no don't do it it's going to be a world

00:39:03,440 --> 00:39:09,839
of pain please don't go there

00:39:06,960 --> 00:39:12,160
now moving forwards i've built a whole

00:39:09,839 --> 00:39:15,760
suite of lab environments in this manner

00:39:12,160 --> 00:39:19,599
um red hat virtualization

00:39:15,760 --> 00:39:21,200
catello ansible tower you name it i've

00:39:19,599 --> 00:39:23,520
built sort of infrastructures nice

00:39:21,200 --> 00:39:26,000
little tightly defined infrastructures

00:39:23,520 --> 00:39:27,440
that i can test that i can figure out

00:39:26,000 --> 00:39:29,440
configurations on

00:39:27,440 --> 00:39:31,920
it and it the great thing is the link to

00:39:29,440 --> 00:39:34,160
gtd at the beginning of the presentation

00:39:31,920 --> 00:39:35,760
it documents all the build steps and all

00:39:34,160 --> 00:39:37,440
the configuration because it's all there

00:39:35,760 --> 00:39:39,680
in the cloud in it and the ansible files

00:39:37,440 --> 00:39:41,359
so i don't have to remember how to

00:39:39,680 --> 00:39:43,839
do all this stuff i can look up my

00:39:41,359 --> 00:39:45,680
playbooks and refer back to how i got it

00:39:43,839 --> 00:39:47,119
all working originally

00:39:45,680 --> 00:39:49,520
this has been used as i mentioned

00:39:47,119 --> 00:39:51,839
earlier extensively for demos to

00:39:49,520 --> 00:39:53,599
customers clients that kind of thing and

00:39:51,839 --> 00:39:55,599
i use it for my own needs i use it to

00:39:53,599 --> 00:39:57,440
help myself learn new technologies and

00:39:55,599 --> 00:39:59,280
get to grips with that kind of thing

00:39:57,440 --> 00:40:01,200
and my hope is that by sharing this with

00:39:59,280 --> 00:40:02,160
everyone today perhaps we can all learn

00:40:01,200 --> 00:40:04,480
a bit more

00:40:02,160 --> 00:40:06,480
about technologies particularly

00:40:04,480 --> 00:40:08,160
distributed highly available ones those

00:40:06,480 --> 00:40:10,960
are so common these days using these

00:40:08,160 --> 00:40:13,680
kind of techniques

00:40:10,960 --> 00:40:15,920
now as i mentioned at the beginning very

00:40:13,680 --> 00:40:18,800
happy to take questions either

00:40:15,920 --> 00:40:20,079
now at any point in this conference or

00:40:18,800 --> 00:40:21,760
if this is over

00:40:20,079 --> 00:40:23,440
please do reach out to me on social

00:40:21,760 --> 00:40:24,400
media we'd love to discuss this further

00:40:23,440 --> 00:40:26,880
with you

00:40:24,400 --> 00:40:28,880
and with that just want to say again

00:40:26,880 --> 00:40:30,640
here are my contact details if you want

00:40:28,880 --> 00:40:31,680
the code that was used to bring up the

00:40:30,640 --> 00:40:32,720
environment that you saw on the

00:40:31,680 --> 00:40:34,720
screenshot earlier

00:40:32,720 --> 00:40:37,040
it is publicly available on my github

00:40:34,720 --> 00:40:38,800
account please do go and have a look

00:40:37,040 --> 00:40:40,160
it's it's been refined a little bit

00:40:38,800 --> 00:40:41,359
since the version that's out there but

00:40:40,160 --> 00:40:43,359
please do

00:40:41,359 --> 00:40:44,880
have a look at it and again if you hit

00:40:43,359 --> 00:40:46,720
any issues with it if you want to talk

00:40:44,880 --> 00:40:47,760
more about it or the concepts please do

00:40:46,720 --> 00:40:49,520
get in touch

00:40:47,760 --> 00:40:51,440
thank you very much for your time today

00:40:49,520 --> 00:40:53,280
i hope this has been valuable

00:40:51,440 --> 00:41:02,720
and i hope that you enjoy the rest of

00:40:53,280 --> 00:41:02,720

YouTube URL: https://www.youtube.com/watch?v=_wW7KSX7PZU


