Title: Boot Time Tracing with Extra Boot Configuration - Masami Hiramatsu, Linaro Ltd.
Publication date: 2020-12-03
Playlist: Open Source Summit Japan & Automotive Linux Summit 2020
Description: 
	Boot Time Tracing with Extra Boot Configuration - Masami Hiramatsu, Linaro Ltd.
Captions: 
	00:00:10,400 --> 00:00:15,360
oh

00:00:11,840 --> 00:00:17,920
is that okay okay

00:00:15,360 --> 00:00:18,720
hello everyone uh thank you for joining

00:00:17,920 --> 00:00:21,359
this session

00:00:18,720 --> 00:00:23,039
uh this session shows that the canal

00:00:21,359 --> 00:00:30,080
boot time tracing

00:00:23,039 --> 00:00:33,760
feature in the uh recent linux canal

00:00:30,080 --> 00:00:37,200
so let me start

00:00:33,760 --> 00:00:39,040
um i'm massam shiramats i'm working for

00:00:37,200 --> 00:00:42,160
inaro

00:00:39,040 --> 00:00:43,760
and arena members as tech lead or social

00:00:42,160 --> 00:00:46,399
networking team

00:00:43,760 --> 00:00:49,920
also a moment now of the k probes and

00:00:46,399 --> 00:00:49,920
related tracing features

00:00:50,480 --> 00:00:59,840
and the tools for example powerprobe

00:00:53,920 --> 00:00:59,840
and actress and dynamic events

00:01:04,320 --> 00:01:08,640
so okay uh here is today's agenda

00:01:09,119 --> 00:01:16,720
the agenda yeah according to the agenda

00:01:13,200 --> 00:01:20,400
i've brought start from background

00:01:16,720 --> 00:01:23,360
and extra boot configuration and

00:01:20,400 --> 00:01:23,360
good time tracing

00:01:23,600 --> 00:01:30,400
so why want to uh why we want to deserve

00:01:27,280 --> 00:01:31,119
conor button tracing the reason is to

00:01:30,400 --> 00:01:34,479
debug

00:01:31,119 --> 00:01:38,000
and analyze the boot time errors

00:01:34,479 --> 00:01:41,200
and the performance issues for example

00:01:38,000 --> 00:01:44,720
measuring a performance statistics to

00:01:41,200 --> 00:01:47,920
shorten their boot time or analyze

00:01:44,720 --> 00:01:50,479
driving insurance session favorites or

00:01:47,920 --> 00:01:52,320
debugging boot time process or

00:01:50,479 --> 00:01:57,520
continuous tracing

00:01:52,320 --> 00:01:57,520
from boot time to use uh to user space

00:02:00,640 --> 00:02:07,920
so uh what we can do now

00:02:04,320 --> 00:02:09,599
currently we already have uh some kernel

00:02:07,920 --> 00:02:14,480
command line options for

00:02:09,599 --> 00:02:17,760
tracing for example setting up options

00:02:14,480 --> 00:02:21,280
output to print k and

00:02:17,760 --> 00:02:24,640
enable events and tracers period linux

00:02:21,280 --> 00:02:27,520
and k pro segments etc so you can

00:02:24,640 --> 00:02:28,560
see these options in our color

00:02:27,520 --> 00:02:31,680
parameters

00:02:28,560 --> 00:02:31,680
dot text file

00:02:32,080 --> 00:02:37,840
so here is the example of the canal

00:02:34,879 --> 00:02:41,360
command line parameters

00:02:37,840 --> 00:02:41,920
like in the group config file so you can

00:02:41,360 --> 00:02:45,040
pass the

00:02:41,920 --> 00:02:47,599
many parameters like this in

00:02:45,040 --> 00:02:47,599
one line

00:02:49,360 --> 00:02:56,239
so um but uh what there there are

00:02:52,879 --> 00:02:59,519
uh some orientations uh one

00:02:56,239 --> 00:03:00,800
either uh size limitation their karnaugh

00:02:59,519 --> 00:03:04,400
command line in size

00:03:00,800 --> 00:03:07,840
is small the minimum size is uh

00:03:04,400 --> 00:03:11,200
uh 256 bytes uh but

00:03:07,840 --> 00:03:15,280
usually uh we expand this uh

00:03:11,200 --> 00:03:18,959
user uh four cube okay byte

00:03:15,280 --> 00:03:22,560
and but uh who want to read

00:03:18,959 --> 00:03:27,680
or light their four gigabyte uh live

00:03:22,560 --> 00:03:30,799
link sign uh links single line options

00:03:27,680 --> 00:03:32,720
and also um it supports only our

00:03:30,799 --> 00:03:35,599
postural features

00:03:32,720 --> 00:03:36,560
fps has many features like per event

00:03:35,599 --> 00:03:39,599
filters

00:03:36,560 --> 00:03:43,040
and actions instances

00:03:39,599 --> 00:03:43,360
histograms but those are too complicated

00:03:43,040 --> 00:03:47,200
to

00:03:43,360 --> 00:03:51,599
write into the single line so we need a

00:03:47,200 --> 00:03:54,640
more rectable options

00:03:51,599 --> 00:03:57,760
so what is the solution the easiest one

00:03:54,640 --> 00:04:00,400
is expanding the tyco command line

00:03:57,760 --> 00:04:01,439
but it's not easy to write down the

00:04:00,400 --> 00:04:05,840
complex

00:04:01,439 --> 00:04:05,840
tracing options on single line

00:04:06,080 --> 00:04:14,080
then how about expanding the device tree

00:04:10,080 --> 00:04:17,359
it's well documented and structured data

00:04:14,080 --> 00:04:20,320
i actually tried this that this was

00:04:17,359 --> 00:04:23,600
knocked because it's only for the

00:04:20,320 --> 00:04:23,600
hardware description

00:04:23,840 --> 00:04:30,320
so finally i introduce our new

00:04:27,280 --> 00:04:33,840
boot time structure data this is

00:04:30,320 --> 00:04:33,840
extra boot configuration

00:04:37,520 --> 00:04:39,759
and

00:04:41,280 --> 00:04:47,360
okay so why is there extra bluetooth

00:04:44,720 --> 00:04:47,360
configuration

00:04:47,600 --> 00:04:50,960
the extra bluetooth configuration is a

00:04:49,280 --> 00:04:56,240
new canal command line

00:04:50,960 --> 00:04:57,440
extension we call it a good time call it

00:04:56,240 --> 00:05:02,080
boot config

00:04:57,440 --> 00:05:03,039
for short boot config is a plain ascii

00:05:02,080 --> 00:05:06,160
text

00:05:03,039 --> 00:05:08,720
of three structure to keep very wrist

00:05:06,160 --> 00:05:08,720
like this

00:05:09,280 --> 00:05:17,199
and sorry this supports

00:05:12,720 --> 00:05:17,199
up to 32 kilobytes or

00:05:17,320 --> 00:05:25,840
512 nodes three

00:05:26,720 --> 00:05:32,600
sorry so this supports up to 32

00:05:30,560 --> 00:05:35,759
kilobytes or

00:05:32,600 --> 00:05:37,039
512 nodes the nodes mean that the number

00:05:35,759 --> 00:05:39,840
of their keywords

00:05:37,039 --> 00:05:39,840
and values

00:05:41,759 --> 00:05:46,720
so here is some uh the extra boot

00:05:44,479 --> 00:05:49,759
configuration syntax

00:05:46,720 --> 00:05:51,360
it's a simple key value set the key

00:05:49,759 --> 00:05:54,639
consists of the

00:05:51,360 --> 00:05:58,400
single or multiple watts and the key may

00:05:54,639 --> 00:06:01,520
harbor values or alley of values

00:05:58,400 --> 00:06:02,400
the values are treated as a string so

00:06:01,520 --> 00:06:06,560
you can use

00:06:02,400 --> 00:06:10,080
double or single quotes

00:06:06,560 --> 00:06:13,600
we also have some assignments

00:06:10,080 --> 00:06:16,720
equal define the value of the key

00:06:13,600 --> 00:06:20,160
and con equal over like the

00:06:16,720 --> 00:06:23,600
previous definition and also

00:06:20,160 --> 00:06:26,400
a process equal appends a value as an

00:06:23,600 --> 00:06:26,400
i element

00:06:31,120 --> 00:06:36,479
and here uh if they are important

00:06:34,000 --> 00:06:39,520
features of a feature of the

00:06:36,479 --> 00:06:42,240
extra boot configuration

00:06:39,520 --> 00:06:43,680
we can use a structured key this means

00:06:42,240 --> 00:06:46,880
that the same keywords

00:06:43,680 --> 00:06:50,160
can be merged with rays

00:06:46,880 --> 00:06:53,039
so uh for example uh key word

00:06:50,160 --> 00:06:54,000
key that word one equal value one and

00:06:53,039 --> 00:06:57,360
key dot

00:06:54,000 --> 00:06:58,240
word two equal value two can be written

00:06:57,360 --> 00:07:01,919
as a

00:06:58,240 --> 00:07:02,560
key brace and uh word one equal value

00:07:01,919 --> 00:07:05,039
one

00:07:02,560 --> 00:07:05,680
what the two equal value two and cross

00:07:05,039 --> 00:07:09,520
brace

00:07:05,680 --> 00:07:12,560
so that's our um and also this

00:07:09,520 --> 00:07:15,520
three structure can be nested so uh

00:07:12,560 --> 00:07:16,800
this allows us to write a complex nested

00:07:15,520 --> 00:07:19,919
key values

00:07:16,800 --> 00:07:19,919
in a simple form

00:07:22,639 --> 00:07:26,240
so uh how is there extra boot

00:07:25,280 --> 00:07:30,240
configuration

00:07:26,240 --> 00:07:34,080
uh proceeds to the positive user

00:07:30,240 --> 00:07:35,199
kernel at boot time the extra boot

00:07:34,080 --> 00:07:40,160
configuration file

00:07:35,199 --> 00:07:43,599
will be loaded with the intel the image

00:07:40,160 --> 00:07:46,160
the bluetooth command command

00:07:43,599 --> 00:07:48,080
yeah there is a boot combi command and

00:07:46,160 --> 00:07:51,120
this command appends our

00:07:48,080 --> 00:07:54,479
computer uh configuration file to the

00:07:51,120 --> 00:07:57,680
network image of this

00:07:54,479 --> 00:07:58,160
so uh you just need to boot the kernel

00:07:57,680 --> 00:08:01,280
with

00:07:58,160 --> 00:08:04,400
this initial the image and password

00:08:01,280 --> 00:08:05,120
boot config content command line then go

00:08:04,400 --> 00:08:09,039
to config

00:08:05,120 --> 00:08:09,039
is enabled on the car now

00:08:11,199 --> 00:08:18,000
so uh here is uh yeah uh how to use the

00:08:14,879 --> 00:08:20,960
boot config command the uh

00:08:18,000 --> 00:08:21,919
these commands operate that uh bluetooth

00:08:20,960 --> 00:08:25,840
config

00:08:21,919 --> 00:08:29,440
or enter the um or interim fs

00:08:25,840 --> 00:08:33,839
image the bluetooth config uh hiding a

00:08:29,440 --> 00:08:36,640
option uh uh applies the um

00:08:33,839 --> 00:08:37,680
given our config file to initial the

00:08:36,640 --> 00:08:39,839
image

00:08:37,680 --> 00:08:40,719
and the bluetooth config minus the

00:08:39,839 --> 00:08:44,560
option

00:08:40,719 --> 00:08:48,160
will remove the config from internally

00:08:44,560 --> 00:08:51,519
and the uh l option will show that

00:08:48,160 --> 00:08:54,640
what config is currently upright and

00:08:51,519 --> 00:08:56,160
in addition if you just pass a

00:08:54,640 --> 00:08:59,920
configuration file

00:08:56,160 --> 00:09:05,440
to the boot config command it parses the

00:08:59,920 --> 00:09:05,440
the file and format it in the key value

00:09:06,839 --> 00:09:11,600
list

00:09:08,560 --> 00:09:14,640
um also uh but convict

00:09:11,600 --> 00:09:17,279
uh supports that the pro qfs interface

00:09:14,640 --> 00:09:18,640
so when you boot up the kernel with

00:09:17,279 --> 00:09:21,680
boot.config

00:09:18,640 --> 00:09:25,200
and it's enabled you can see

00:09:21,680 --> 00:09:28,480
what put a bootcamp is a pride

00:09:25,200 --> 00:09:29,279
via proc boot copy like a pro uh command

00:09:28,480 --> 00:09:32,959
line

00:09:29,279 --> 00:09:34,080
uh like this and this is a keyboard

00:09:32,959 --> 00:09:37,360
wrist

00:09:34,080 --> 00:09:40,080
because it's easier to be handled by a

00:09:37,360 --> 00:09:40,080
shell script

00:09:41,440 --> 00:09:48,160
and okay um

00:09:44,880 --> 00:09:50,560
so our and also our

00:09:48,160 --> 00:09:53,760
other extrovert configuration allows you

00:09:50,560 --> 00:09:56,399
to expand the color command line

00:09:53,760 --> 00:09:57,360
the configuration uh which start with

00:09:56,399 --> 00:10:00,720
the kernel

00:09:57,360 --> 00:10:02,839
or or user uh

00:10:00,720 --> 00:10:06,800
passed as a part of the kernel command

00:10:02,839 --> 00:10:06,800
line so for example

00:10:07,360 --> 00:10:13,440
if you apply this go to config

00:10:10,720 --> 00:10:15,519
these options will be shown uh in the

00:10:13,440 --> 00:10:20,160
kernel command line

00:10:15,519 --> 00:10:20,160
like the list

00:10:24,880 --> 00:10:27,600
okay um

00:10:29,040 --> 00:10:34,320
the extra bluetooth configuration also

00:10:31,920 --> 00:10:36,959
provides current apis

00:10:34,320 --> 00:10:38,959
so these are functions start with the

00:10:36,959 --> 00:10:43,120
xbc

00:10:38,959 --> 00:10:45,519
for the kernel init functions

00:10:43,120 --> 00:10:47,040
this means because that are after boot

00:10:45,519 --> 00:10:50,079
up that kernel

00:10:47,040 --> 00:10:52,480
these apis are gone to reduce the memory

00:10:50,079 --> 00:10:55,920
hood print

00:10:52,480 --> 00:10:59,200
um there is a main data structure

00:10:55,920 --> 00:11:03,120
uh which names are xbc node

00:10:59,200 --> 00:11:07,120
which is a tree node uh that represents

00:11:03,120 --> 00:11:11,120
a keyword and value

00:11:07,120 --> 00:11:14,320
so there are many uh apis but are

00:11:11,120 --> 00:11:18,160
you know here is the main apis

00:11:14,320 --> 00:11:21,200
i picked uh just for like a xvc find

00:11:18,160 --> 00:11:22,399
value uh will find the value from uh

00:11:21,200 --> 00:11:26,160
keyword

00:11:22,399 --> 00:11:29,200
or uh it's the find node

00:11:26,160 --> 00:11:32,560
well finder a node which

00:11:29,200 --> 00:11:35,600
will be a keyword node or value node

00:11:32,560 --> 00:11:40,399
uh from key keywords and also

00:11:35,600 --> 00:11:40,399
we have some iterator macros

00:11:41,600 --> 00:11:45,839
so here is an um example there a

00:11:44,079 --> 00:11:49,680
bluetooth config kernel api

00:11:45,839 --> 00:11:53,839
usage uh like uh you can find the

00:11:49,680 --> 00:11:57,120
barrier node uh by using that xcbc

00:11:53,839 --> 00:12:00,240
find value and also you can

00:11:57,120 --> 00:12:03,440
check that uh the result

00:12:00,240 --> 00:12:04,000
and keyword has there is a keyword but

00:12:03,440 --> 00:12:08,079
the

00:12:04,000 --> 00:12:11,600
known value key or if you have a

00:12:08,079 --> 00:12:14,959
getter v node returned

00:12:11,600 --> 00:12:18,079
uh this keyword has values uh but uh

00:12:14,959 --> 00:12:21,120
um yeah you can you need to

00:12:18,079 --> 00:12:24,480
check that these are array so that uh

00:12:21,120 --> 00:12:27,040
you can use the array iterator

00:12:24,480 --> 00:12:27,040
for that

00:12:28,320 --> 00:12:35,519
okay um so next is our boot time tracing

00:12:32,480 --> 00:12:38,160
so by introduce the boot config

00:12:35,519 --> 00:12:39,519
so we can integrate uh implement their

00:12:38,160 --> 00:12:42,079
boot time tracing

00:12:39,519 --> 00:12:42,079
on it

00:12:45,200 --> 00:12:51,440
here is the good time tracing options in

00:12:48,880 --> 00:12:54,560
a boot config

00:12:51,440 --> 00:12:58,000
button dressing options uh start from

00:12:54,560 --> 00:13:01,760
f trace or kernel under

00:12:58,000 --> 00:13:05,279
f the kernel keyword uh

00:13:01,760 --> 00:13:08,240
is for global f3s settings

00:13:05,279 --> 00:13:08,560
and also this support that are per event

00:13:08,240 --> 00:13:12,000
and

00:13:08,560 --> 00:13:12,800
per instance settings like this we also

00:13:12,000 --> 00:13:16,320
are supported

00:13:12,800 --> 00:13:19,279
cables and synthetic events

00:13:16,320 --> 00:13:20,320
you can see that other details in this

00:13:19,279 --> 00:13:23,600
uh

00:13:20,320 --> 00:13:26,880
oh good time configuration

00:13:23,600 --> 00:13:30,240
a good time trace rsd

00:13:26,880 --> 00:13:30,240
text file

00:13:31,200 --> 00:13:36,240
so uh here is summer uh button tracing

00:13:34,160 --> 00:13:39,680
parameters we will

00:13:36,240 --> 00:13:39,680
check um

00:13:40,240 --> 00:13:43,839
like a robot parameter for example just

00:13:42,560 --> 00:13:47,040
the global parameters

00:13:43,839 --> 00:13:51,199
canal dot tp print scale will

00:13:47,040 --> 00:13:55,440
uh it's a frog or which output that's a

00:13:51,199 --> 00:13:55,440
trace event data to the console

00:13:56,160 --> 00:14:00,160
the par instance parameters

00:14:00,839 --> 00:14:06,720
um

00:14:03,360 --> 00:14:08,079
three uh for our power instance

00:14:06,720 --> 00:14:11,760
parameters

00:14:08,079 --> 00:14:14,959
uh we can use that uh f trace a dot

00:14:11,760 --> 00:14:17,680
instance and our instance name

00:14:14,959 --> 00:14:18,320
and buffer size for example for size

00:14:17,680 --> 00:14:21,279
will

00:14:18,320 --> 00:14:22,480
set up the third buffer size for this

00:14:21,279 --> 00:14:25,120
instance

00:14:22,480 --> 00:14:26,639
you can skip letter this instance that

00:14:25,120 --> 00:14:30,639
instance name

00:14:26,639 --> 00:14:34,240
then we this will uh change their

00:14:30,639 --> 00:14:38,160
setup that the parameters in a global

00:14:34,240 --> 00:14:40,639
uh fps uh instance the default default

00:14:38,160 --> 00:14:40,639
instance

00:14:40,880 --> 00:14:45,040
and also we support that the power event

00:14:43,600 --> 00:14:48,639
parameters

00:14:45,040 --> 00:14:52,079
uh so that's our address uh instance

00:14:48,639 --> 00:14:55,199
and uh uh event uh group name

00:14:52,079 --> 00:14:56,240
that uh event name and enable for

00:14:55,199 --> 00:14:59,360
example enable

00:14:56,240 --> 00:15:03,839
uh parameter will enable

00:14:59,360 --> 00:15:06,560
other event in this instance

00:15:03,839 --> 00:15:06,560
for example

00:15:06,880 --> 00:15:14,000
and uh uh also we have our instance

00:15:10,160 --> 00:15:17,199
uh sorry uh event group name event

00:15:14,000 --> 00:15:20,560
that actions which can allow us to

00:15:17,199 --> 00:15:23,600
set up those are trigger actions

00:15:20,560 --> 00:15:26,639
we are and if you set uh pastor

00:15:23,600 --> 00:15:30,079
k probes as a group name you can

00:15:26,639 --> 00:15:30,639
control that or define the new k probes

00:15:30,079 --> 00:15:34,240
events

00:15:30,639 --> 00:15:37,360
with a probes uh parameter and uh

00:15:34,240 --> 00:15:41,759
also uh we can uh if we

00:15:37,360 --> 00:15:45,759
set the uh synthetic as a group name

00:15:41,759 --> 00:15:49,279
this will define our

00:15:45,759 --> 00:15:54,160
synthetic events with uh

00:15:49,279 --> 00:15:57,519
specified field

00:15:54,160 --> 00:16:00,399
so uh here is one more uh example of the

00:15:57,519 --> 00:16:04,079
bluetooth tracing

00:16:00,399 --> 00:16:07,120
uh this one will set up the the global

00:16:04,079 --> 00:16:10,160
f3s instance

00:16:07,120 --> 00:16:13,440
are these uh parameters uh options uh

00:16:10,160 --> 00:16:14,560
setup that options um are brought for

00:16:13,440 --> 00:16:18,320
sites

00:16:14,560 --> 00:16:21,680
and uh uh also other uh cables events

00:16:18,320 --> 00:16:25,199
uh cables uh for example with this

00:16:21,680 --> 00:16:28,720
sheet um events inner uh

00:16:25,199 --> 00:16:31,199
probes uh with a this probe definition

00:16:28,720 --> 00:16:32,399
like a karnaugh lead function uh

00:16:31,199 --> 00:16:36,160
argument one and

00:16:32,399 --> 00:16:39,120
argument two and

00:16:36,160 --> 00:16:41,120
we also set up that the filters which

00:16:39,120 --> 00:16:44,720
mean that are the common pid

00:16:41,120 --> 00:16:49,199
if they're the below uh 200 it will

00:16:44,720 --> 00:16:52,639
uh enable uh what's either the event

00:16:49,199 --> 00:16:57,279
as a trace data event and also

00:16:52,639 --> 00:16:59,839
we have our channel um global parameters

00:16:57,279 --> 00:16:59,839
we can set

00:17:01,680 --> 00:17:09,839
here's another example for

00:17:04,959 --> 00:17:12,400
synthetic events the ftress events

00:17:09,839 --> 00:17:13,039
dot event and the synthetic event this

00:17:12,400 --> 00:17:17,199
one

00:17:13,039 --> 00:17:20,160
will define a new synthetic event

00:17:17,199 --> 00:17:20,160
for each call

00:17:20,799 --> 00:17:27,839
and are set up the summer uh histogram

00:17:24,240 --> 00:17:30,880
actions on need so

00:17:27,839 --> 00:17:31,360
this actually uh will make our histogram

00:17:30,880 --> 00:17:34,640
of the

00:17:31,360 --> 00:17:39,120
initial core box execution time

00:17:34,640 --> 00:17:42,640
so each uh how how long it would take

00:17:39,120 --> 00:17:42,640
for each callbacks

00:17:44,400 --> 00:17:48,480
okay uh another interesting example is

00:17:47,600 --> 00:17:52,000
here

00:17:48,480 --> 00:17:54,799
uh this shows that how to make a partial

00:17:52,000 --> 00:17:57,200
uh function call graph in a specific

00:17:54,799 --> 00:17:57,200
function

00:17:57,280 --> 00:18:04,320
under uh function uh so that's will

00:18:00,720 --> 00:18:07,360
make a a user a function graph tracer

00:18:04,320 --> 00:18:10,880
that are addressing uh by default

00:18:07,360 --> 00:18:14,320
tracing is off so disabled

00:18:10,880 --> 00:18:17,600
but uh under uh receive function

00:18:14,320 --> 00:18:20,799
entering entrance we put the

00:18:17,600 --> 00:18:24,000
uh k probes event and uh

00:18:20,799 --> 00:18:29,039
at that point we uh enable the

00:18:24,000 --> 00:18:32,480
trace and also the function exit

00:18:29,039 --> 00:18:35,760
we put the return probe on it and

00:18:32,480 --> 00:18:39,280
uh trace uh disable trace again

00:18:35,760 --> 00:18:42,559
so that's our uh in this uh

00:18:39,280 --> 00:18:45,679
between or these are events

00:18:42,559 --> 00:18:48,640
the function graph will be enabled so

00:18:45,679 --> 00:18:50,880
we can get the partial function called

00:18:48,640 --> 00:18:50,880
graph

00:18:52,880 --> 00:18:58,720
by the way uh with uh congregations are

00:18:56,480 --> 00:19:02,000
still a bit complicated

00:18:58,720 --> 00:19:05,679
yeah because that's our address is very

00:19:02,000 --> 00:19:09,679
uh big uh so you may uh need some

00:19:05,679 --> 00:19:13,039
help to write it down uh or test it

00:19:09,679 --> 00:19:16,720
so uh here we have our two uh to

00:19:13,039 --> 00:19:19,200
help us shell script over time tracing

00:19:16,720 --> 00:19:21,200
these are under the tools boot config

00:19:19,200 --> 00:19:24,240
scripts

00:19:21,200 --> 00:19:27,919
the one leads are ftraced to vconf

00:19:24,240 --> 00:19:31,120
dot sh this converts

00:19:27,919 --> 00:19:32,880
f3s current settings to a bluetooth

00:19:31,120 --> 00:19:36,080
config file

00:19:32,880 --> 00:19:37,280
and this is good for making a prototype

00:19:36,080 --> 00:19:41,520
boot config

00:19:37,280 --> 00:19:45,679
by setting f3s interactivity

00:19:41,520 --> 00:19:49,360
another user uh one another one is a

00:19:45,679 --> 00:19:52,400
bit conf to f3s this converts

00:19:49,360 --> 00:19:55,679
a given bluetooth file to

00:19:52,400 --> 00:19:58,880
share command to setup the address

00:19:55,679 --> 00:20:02,799
of course if you use the apply

00:19:58,880 --> 00:20:04,240
option which will try to apply the

00:20:02,799 --> 00:20:08,000
generated command too

00:20:04,240 --> 00:20:10,799
so that you can check that it can

00:20:08,000 --> 00:20:12,080
pass the uh the error check or something

00:20:10,799 --> 00:20:15,120
like that

00:20:12,080 --> 00:20:21,200
and this is good for checking your good

00:20:15,120 --> 00:20:24,159
config before reboot

00:20:21,200 --> 00:20:26,080
so uh how we can uh start using the good

00:20:24,159 --> 00:20:29,440
time tracing

00:20:26,080 --> 00:20:33,200
the at first you have to enable that

00:20:29,440 --> 00:20:36,720
uh the config bootcamp config

00:20:33,200 --> 00:20:40,080
uh sorry of config boot config and boot

00:20:36,720 --> 00:20:43,679
boot time tracing both uh enabled

00:20:40,080 --> 00:20:45,919
and build the car nail and install it

00:20:43,679 --> 00:20:47,679
and i also reviewed the tattoos good

00:20:45,919 --> 00:20:51,039
pumping good copy

00:20:47,679 --> 00:20:54,240
and a setup that sees color tracing

00:20:51,039 --> 00:20:55,200
so letter that actor is setting up as

00:20:54,240 --> 00:20:58,240
you like

00:20:55,200 --> 00:21:00,720
and i learner that this tool enters to

00:20:58,240 --> 00:21:03,760
be conf dot sh to generate

00:21:00,720 --> 00:21:06,799
the virtual view file and yeah

00:21:03,760 --> 00:21:09,280
maybe you will edit it

00:21:06,799 --> 00:21:09,919
and apply the the config file to the

00:21:09,280 --> 00:21:13,200
initial

00:21:09,919 --> 00:21:16,400
image at first and

00:21:13,200 --> 00:21:18,640
uh bootcamp bluetooth config on the

00:21:16,400 --> 00:21:21,679
connect command line

00:21:18,640 --> 00:21:26,559
then you will get the uh you

00:21:21,679 --> 00:21:26,559
use that the good time tracing

00:21:28,640 --> 00:21:32,080
so finally i'd like to explain that

00:21:31,679 --> 00:21:35,520
though

00:21:32,080 --> 00:21:38,799
uh when to start the boot time tracing

00:21:35,520 --> 00:21:41,919
until uh linux 5.9

00:21:38,799 --> 00:21:44,960
the boot time tracing uh starts

00:21:41,919 --> 00:21:48,320
from the end of fs it call

00:21:44,960 --> 00:21:51,200
so only device it call or later

00:21:48,320 --> 00:21:51,200
can be traced

00:21:52,400 --> 00:21:59,600
yeah uh but uh this one uh is a bit

00:21:55,760 --> 00:22:03,280
not too narrow so yeah uh

00:21:59,600 --> 00:22:06,640
to expand uh increase the traceable code

00:22:03,280 --> 00:22:09,280
uh i decided to uh move uh jacano

00:22:06,640 --> 00:22:10,480
uh k probes and uh also the the good

00:22:09,280 --> 00:22:13,520
time threshing

00:22:10,480 --> 00:22:17,840
uh uh routines

00:22:13,520 --> 00:22:17,840
in a more earlier stage

00:22:18,400 --> 00:22:21,039
so um

00:22:21,600 --> 00:22:29,039
the finally um in our from the

00:22:25,280 --> 00:22:29,760
5.10 channel we can start the boot time

00:22:29,039 --> 00:22:32,720
tracing

00:22:29,760 --> 00:22:33,600
from the end of the core init call so

00:22:32,720 --> 00:22:37,360
that are

00:22:33,600 --> 00:22:40,400
almost all drivers and our device

00:22:37,360 --> 00:22:43,600
frameworks and five systems

00:22:40,400 --> 00:22:43,600
can be traced now

00:22:46,559 --> 00:22:52,799
okay uh so uh we have her

00:22:49,600 --> 00:23:09,840
sometimes so let me um

00:22:52,799 --> 00:23:09,840
show that the demonstration

00:23:11,520 --> 00:23:16,880
okay can you see there uh my screen

00:23:19,919 --> 00:23:23,840
okay we have some uh

00:23:25,600 --> 00:23:36,000
the bluetooth config file so those are

00:23:28,960 --> 00:23:38,240
the examples

00:23:36,000 --> 00:23:38,240
um

00:23:48,559 --> 00:23:56,720
so um applying a boot config

00:23:53,600 --> 00:23:59,919
boot config

00:23:56,720 --> 00:24:01,600
file um to the this is a good time

00:23:59,919 --> 00:24:05,600
tracing

00:24:01,600 --> 00:24:08,799
uh to initialize

00:24:05,600 --> 00:24:08,799
and sorry

00:24:09,279 --> 00:24:19,679
yeah um this will use at the qmu

00:24:14,240 --> 00:24:22,559
to boot up the door um

00:24:19,679 --> 00:24:22,559
we do it up

00:24:24,720 --> 00:24:32,080
okay then you can see that the vfs read

00:24:28,400 --> 00:24:36,000
uh events now or uh output to the print

00:24:32,080 --> 00:24:38,799
k buffer yeah and uh also

00:24:36,000 --> 00:24:38,799
um okay

00:24:44,840 --> 00:24:47,840
tracing

00:24:50,880 --> 00:24:53,360
cat

00:24:54,640 --> 00:25:00,640
buffer size gigabyte

00:24:58,000 --> 00:25:01,200
okay we can see that the buffer size is

00:25:00,640 --> 00:25:04,240
set to

00:25:01,200 --> 00:25:04,240
one megabyte

00:25:07,440 --> 00:25:14,240
then uh also we can um

00:25:10,960 --> 00:25:18,000
use that button

00:25:14,240 --> 00:25:20,720
uh to be conf this one is the number two

00:25:18,000 --> 00:25:22,559
one so that are the making a histogram

00:25:20,720 --> 00:25:26,799
or let me

00:25:22,559 --> 00:25:26,799
try boot config

00:25:27,279 --> 00:25:33,840
a good time to

00:25:30,720 --> 00:25:36,880
be conf to initial the

00:25:33,840 --> 00:25:43,840
interim fs and

00:25:36,880 --> 00:25:43,840
run it again

00:25:45,279 --> 00:25:50,320
okay um so what was check that order it

00:25:49,200 --> 00:25:55,120
was or

00:25:50,320 --> 00:25:58,400
passed correctly good config

00:25:55,120 --> 00:26:01,440
yeah uh this one is uh cited um

00:25:58,400 --> 00:26:05,840
i'll say a past directory so

00:26:01,440 --> 00:26:09,600
uh this is

00:26:05,840 --> 00:26:13,200
crazy and uh

00:26:09,600 --> 00:26:16,240
the histogram is in should be inner

00:26:13,200 --> 00:26:19,760
um sensitive events

00:26:16,240 --> 00:26:23,520
so that are sensitive things

00:26:19,760 --> 00:26:26,720
events it's called histogram

00:26:23,520 --> 00:26:30,559
yeah so you can see that there uh

00:26:26,720 --> 00:26:35,440
there the latencies uh

00:26:30,559 --> 00:26:35,440
yeah uh it's shown in this uh histogram

00:26:36,840 --> 00:26:41,520
yeah so you can

00:26:39,440 --> 00:26:42,559
uh as you can see that there uh you can

00:26:41,520 --> 00:26:47,039
check

00:26:42,559 --> 00:26:50,880
change the uh the options just with the

00:26:47,039 --> 00:26:53,360
with using the boot config command

00:26:50,880 --> 00:26:54,720
and allah need for example this one is a

00:26:53,360 --> 00:27:00,320
third one so that

00:26:54,720 --> 00:27:00,320
making a partial uh function call graph

00:27:04,840 --> 00:27:11,760
yeah this is corner debug

00:27:08,080 --> 00:27:15,760
tracing and uh

00:27:11,760 --> 00:27:15,760
we'll see the address buffer

00:27:16,240 --> 00:27:21,679
okay it just started uh the

00:27:19,440 --> 00:27:26,159
function graph call graph is made better

00:27:21,679 --> 00:27:30,799
uh it just started from a pci proc in it

00:27:26,159 --> 00:27:30,799
and this one is so city one

00:27:31,120 --> 00:27:37,840
and okay uh the

00:27:34,640 --> 00:27:41,200
in the at last yeah uh

00:27:37,840 --> 00:27:43,679
actually this one stopped by your k-lit

00:27:41,200 --> 00:27:46,399
probe so that uh you may see that the

00:27:43,679 --> 00:27:49,520
trump ring handler or the cadet probes

00:27:46,399 --> 00:27:53,200
uh but

00:27:49,520 --> 00:27:56,320
this one actually finished after the

00:27:53,200 --> 00:27:56,320
pc broke in it

00:27:57,360 --> 00:28:03,840
the end of the preset broken okay

00:28:05,360 --> 00:28:09,520
that's uh the demonstration

00:28:09,679 --> 00:28:13,919
okay go back to their uh

00:28:14,840 --> 00:28:17,840
slide

00:28:21,679 --> 00:28:25,600
so uh here's today's summary

00:28:27,120 --> 00:28:32,000
so uh so today i explained that there

00:28:30,159 --> 00:28:35,600
the extra boot compilation

00:28:32,000 --> 00:28:38,799
uh is interes uh was a uh

00:28:35,600 --> 00:28:39,360
introduced in the uh recent car now and

00:28:38,799 --> 00:28:43,039
uh

00:28:39,360 --> 00:28:45,120
this one yeah i showed that the uh

00:28:43,039 --> 00:28:46,480
complex and many boot options are

00:28:45,120 --> 00:28:50,080
supported and

00:28:46,480 --> 00:28:52,960
also it does not need any uh

00:28:50,080 --> 00:28:55,679
upgrade update the boot rollers uh

00:28:52,960 --> 00:28:59,440
because it's loaded with uh initiality

00:28:55,679 --> 00:29:02,640
and also uh say

00:28:59,440 --> 00:29:06,000
provide color apis yeah

00:29:02,640 --> 00:29:08,720
and some commands and also i

00:29:06,000 --> 00:29:10,240
uh explained that the good time dressing

00:29:08,720 --> 00:29:12,240
uh supported under

00:29:10,240 --> 00:29:14,559
uh button configuration uh due to

00:29:12,240 --> 00:29:18,080
configuration

00:29:14,559 --> 00:29:21,679
so it and uh uh explain that uh uh

00:29:18,080 --> 00:29:23,039
there are um uh pi empty uh options by

00:29:21,679 --> 00:29:26,159
instance options

00:29:23,039 --> 00:29:29,520
uh and the histograms etc

00:29:26,159 --> 00:29:32,399
and also it showed that the helper

00:29:29,520 --> 00:29:36,240
shell script upstream channel supports

00:29:32,399 --> 00:29:36,240
the aria i need code tracing

00:29:37,679 --> 00:29:44,240
okay uh here is the current status

00:29:41,039 --> 00:29:47,919
yeah we almost done our uh this work

00:29:44,240 --> 00:29:50,960
so uh uh you can use that uh after us to

00:29:47,919 --> 00:29:54,240
uh yeah uh uh

00:29:50,960 --> 00:29:54,960
sorry boot config and also a good time

00:29:54,240 --> 00:29:58,240
tracing

00:29:54,960 --> 00:29:59,840
under the written recent upstream

00:29:58,240 --> 00:30:03,840
channel

00:29:59,840 --> 00:30:07,279
maybe your stat button earlier

00:30:03,840 --> 00:30:08,960
tracing every time

00:30:07,279 --> 00:30:10,720
uh good time tracing will be our

00:30:08,960 --> 00:30:14,559
supported winner uh

00:30:10,720 --> 00:30:14,559
5.10 next release

00:30:15,120 --> 00:30:21,679
so uh here's the future work uh we

00:30:18,559 --> 00:30:22,399
yeah i will um yeah enhanced our

00:30:21,679 --> 00:30:25,520
histogram

00:30:22,399 --> 00:30:28,880
syntax and also

00:30:25,520 --> 00:30:36,320
some good time good support on the

00:30:28,880 --> 00:30:40,159
bootrollers if possible

00:30:36,320 --> 00:30:42,320
so uh that's all for today's session um

00:30:40,159 --> 00:30:44,159
if you have any questions please feel

00:30:42,320 --> 00:30:47,760
free to ask me under

00:30:44,159 --> 00:30:51,760
chat or qma

00:30:47,760 --> 00:30:55,200
okay i yeah i got there uh

00:30:51,760 --> 00:30:55,919
several uh yeah two questions yeah one

00:30:55,200 --> 00:30:59,200
is there

00:30:55,919 --> 00:31:02,159
in example number three does it capture

00:30:59,200 --> 00:31:03,279
all the nested function recording the pc

00:31:02,159 --> 00:31:06,399
need function

00:31:03,279 --> 00:31:09,840
yes so that's our as i uh showed in

00:31:06,399 --> 00:31:13,120
our uh the demonstration uh this one

00:31:09,840 --> 00:31:15,519
uh actually that's a uh yeah all

00:31:13,120 --> 00:31:17,360
captured all the nested function from

00:31:15,519 --> 00:31:20,480
the pc init function

00:31:17,360 --> 00:31:23,600
so that's our you can make our

00:31:20,480 --> 00:31:26,159
the function call graph on

00:31:23,600 --> 00:31:26,159
this part

00:31:30,720 --> 00:31:34,720
and uh oh um

00:31:35,200 --> 00:31:42,399
yeah and also uh is that

00:31:39,200 --> 00:31:43,279
uh bluetooth config api usage for other

00:31:42,399 --> 00:31:46,559
kind of

00:31:43,279 --> 00:31:49,760
code like drivers

00:31:46,559 --> 00:31:53,120
yes um yeah as far as the

00:31:49,760 --> 00:31:56,320
uh the drivers using the init functions

00:31:53,120 --> 00:31:57,039
yeah it could be uh possible but uh note

00:31:56,320 --> 00:32:00,480
that the

00:31:57,039 --> 00:32:03,519
the boot config apis will be your

00:32:00,480 --> 00:32:06,640
freed after boot so that the uh

00:32:03,519 --> 00:32:10,399
those are drivers has to use uh

00:32:06,640 --> 00:32:13,679
let's say has to embed it in the kernel

00:32:10,399 --> 00:32:14,799
at this moment maybe we can remove that

00:32:13,679 --> 00:32:17,360
other uh

00:32:14,799 --> 00:32:18,399
these limitations if there are some

00:32:17,360 --> 00:32:22,159
drivers

00:32:18,399 --> 00:32:23,919
uh want to use that uh uh the bluetooth

00:32:22,159 --> 00:32:27,120
apis directory

00:32:23,919 --> 00:32:30,320
at this moment actually that's my

00:32:27,120 --> 00:32:30,880
use case the boot time tracing is only

00:32:30,320 --> 00:32:34,159
for

00:32:30,880 --> 00:32:37,200
good time so that i decided to

00:32:34,159 --> 00:32:43,840
uh make it just for uh

00:32:37,200 --> 00:32:43,840
init or say init functions

00:32:45,360 --> 00:32:48,799
uh thank you doryu and is it possible to

00:32:48,399 --> 00:32:52,399
demo

00:32:48,799 --> 00:32:54,960
yeah i uh just demon straight it

00:32:52,399 --> 00:32:54,960
uh there

00:32:55,519 --> 00:32:58,320
yeah um

00:32:59,679 --> 00:33:02,559
oh this one

00:33:02,960 --> 00:33:06,480
and okay

00:33:06,640 --> 00:33:11,840
let me show that oh all right

00:33:14,240 --> 00:33:18,480
let me show it again in our uh good time

00:33:17,279 --> 00:33:21,200
configuration

00:33:18,480 --> 00:33:22,320
uh there are sorry boot time tracing

00:33:21,200 --> 00:33:24,240
number three

00:33:22,320 --> 00:33:27,519
so that's our the this one needs a root

00:33:24,240 --> 00:33:27,519
time tracing uh

00:33:29,279 --> 00:33:36,720
number three is here so that's our

00:33:32,399 --> 00:33:40,240
it will make a partial uh

00:33:36,720 --> 00:33:41,679
choreographed tracing and just upright

00:33:40,240 --> 00:33:45,279
and boot up

00:33:41,679 --> 00:33:45,279
and you can see that there are

00:33:45,600 --> 00:33:49,919
um it will take a bit longer time

00:33:49,200 --> 00:33:53,039
because

00:33:49,919 --> 00:33:54,159
uh the function choreographed dressing

00:33:53,039 --> 00:33:57,760
is still

00:33:54,159 --> 00:34:00,960
running uh in background so

00:33:57,760 --> 00:34:06,720
since anyway uh this is colonel

00:34:00,960 --> 00:34:10,720
um racing oh sorry

00:34:06,720 --> 00:34:13,839
this is not tracing yeah

00:34:10,720 --> 00:34:17,760
trace we showed after

00:34:13,839 --> 00:34:21,839
only the partial um the functions

00:34:17,760 --> 00:34:21,839
of graph

00:34:26,240 --> 00:34:29,599
actually that are the mixed wizard the

00:34:28,879 --> 00:34:32,800
other

00:34:29,599 --> 00:34:36,639
cpus so that in that case

00:34:32,800 --> 00:34:40,960
we started the cpu zero so

00:34:36,639 --> 00:34:45,200
uh you can uh try um

00:34:40,960 --> 00:34:48,480
cpu cpu zero trace

00:34:45,200 --> 00:34:51,760
uh then uh you can um yeah

00:34:48,480 --> 00:34:55,440
get the the trace data uh on

00:34:51,760 --> 00:34:55,440
only under a cpu zero

00:34:55,679 --> 00:35:03,839
yeah it shows that the originated

00:34:59,440 --> 00:35:03,839
uh function call graph

00:35:06,160 --> 00:35:08,720
in the end

00:35:18,320 --> 00:35:21,599
yeah okay

00:35:21,920 --> 00:35:24,240
okay

00:35:28,480 --> 00:35:32,880
yeah um so uh

00:35:34,880 --> 00:35:42,839
okay come back again

00:35:38,560 --> 00:35:44,560
okay so uh that's all from my side uh so

00:35:42,839 --> 00:35:46,720
we're

00:35:44,560 --> 00:35:48,480
thank you for uh thank you very much uh

00:35:46,720 --> 00:35:52,400
for your time to join our

00:35:48,480 --> 00:35:55,520
uh this session um if you have any

00:35:52,400 --> 00:35:59,040
further questions please uh email me or

00:35:55,520 --> 00:36:02,160
uh ask me on the slack

00:35:59,040 --> 00:36:04,560
and uh yeah enjoy the

00:36:02,160 --> 00:36:06,800
rest of your conference thank you very

00:36:04,560 --> 00:36:06,800
much

00:36:10,839 --> 00:36:13,839

YouTube URL: https://www.youtube.com/watch?v=YH2x5lbJzyU


