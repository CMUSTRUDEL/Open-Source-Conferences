Title: Achieve a Healthy Ecosystem Around Automotive Device Virtualization - VirtIO Support in AGL
Publication date: 2020-12-04
Playlist: Open Source Summit Japan & Automotive Linux Summit 2020
Description: 
	Achieve a Healthy Ecosystem Around Automotive Device Virtualization - VirtIO Support in AGL - Jerry Zhao, Panasonic Corporation with Special Guests: Alex BennÃ©e, Linaro; Mikhail Golubev, OpenSynergy & Tsubone Takashi, Panasonic
Captions: 
	00:00:06,399 --> 00:00:09,599
hello everyone

00:00:07,600 --> 00:00:12,000
my name is jerry zhao and i'm from

00:00:09,599 --> 00:00:15,040
panasonic corporation automotive r

00:00:12,000 --> 00:00:16,960
d center today on behalf of agile

00:00:15,040 --> 00:00:19,119
virtualization expert group

00:00:16,960 --> 00:00:21,119
i would like to introduce why and how we

00:00:19,119 --> 00:00:22,000
support a standard virtual device

00:00:21,119 --> 00:00:25,600
framework

00:00:22,000 --> 00:00:25,600
vert io in agl

00:00:26,240 --> 00:00:31,519
first let me give a brief introduction

00:00:29,039 --> 00:00:35,200
about virtualization expert group

00:00:31,519 --> 00:00:38,399
under the automotive grid linux dcg

00:00:35,200 --> 00:00:40,559
started activities from 2017

00:00:38,399 --> 00:00:42,879
and many in charge of design and

00:00:40,559 --> 00:00:44,239
implement virtualization solutions for

00:00:42,879 --> 00:00:46,960
agl

00:00:44,239 --> 00:00:49,280
we have a bi-weekly call and our average

00:00:46,960 --> 00:00:50,559
10 to 20 members from different fields

00:00:49,280 --> 00:00:53,520
are joining

00:00:50,559 --> 00:00:55,280
our expert group has a wide range of

00:00:53,520 --> 00:00:56,719
interest points on automotive

00:00:55,280 --> 00:01:00,719
virtualization

00:00:56,719 --> 00:01:01,280
but in 2020 our focus is to make world

00:01:00,719 --> 00:01:04,719
io

00:01:01,280 --> 00:01:04,719
available for agl

00:01:07,280 --> 00:01:11,600
before going to the main topic let me

00:01:09,760 --> 00:01:13,119
introduce some general backgrounds of

00:01:11,600 --> 00:01:15,920
automotive

00:01:13,119 --> 00:01:16,640
as shown in this picture it is an area

00:01:15,920 --> 00:01:19,439
of change

00:01:16,640 --> 00:01:22,960
in the automotive industry that cockpit

00:01:19,439 --> 00:01:25,040
is transforming toward fully digitalized

00:01:22,960 --> 00:01:27,920
cockpit instruments are going to be

00:01:25,040 --> 00:01:30,720
filled with various digital instruments

00:01:27,920 --> 00:01:31,680
while being controlled by fewer ecu's

00:01:30,720 --> 00:01:35,520
possibly

00:01:31,680 --> 00:01:35,520
by only one single ecu

00:01:35,600 --> 00:01:40,159
in such environment the virtualization

00:01:38,240 --> 00:01:42,720
with hypervisor technology

00:01:40,159 --> 00:01:44,880
is one of the mainstream approaches to

00:01:42,720 --> 00:01:46,000
realize the partitioning between various

00:01:44,880 --> 00:01:48,000
applications

00:01:46,000 --> 00:01:50,640
in terms of functional safety and

00:01:48,000 --> 00:01:52,960
security

00:01:50,640 --> 00:01:55,040
now let's take a look at the overall

00:01:52,960 --> 00:01:56,960
history of virtualization

00:01:55,040 --> 00:01:58,799
in the historical trend of general

00:01:56,960 --> 00:02:00,880
computing architecture

00:01:58,799 --> 00:02:03,840
it has been going back and forth between

00:02:00,880 --> 00:02:06,399
centralized and distributed architecture

00:02:03,840 --> 00:02:08,399
driven by the fluctuation of the cost

00:02:06,399 --> 00:02:11,680
and the performance of processing

00:02:08,399 --> 00:02:15,760
memory and communication this means

00:02:11,680 --> 00:02:18,239
there is no constant optimal answer

00:02:15,760 --> 00:02:19,599
this slide shows a similar concept with

00:02:18,239 --> 00:02:21,599
the previous one

00:02:19,599 --> 00:02:23,840
but focusing more on the process

00:02:21,599 --> 00:02:26,480
hardware and software

00:02:23,840 --> 00:02:27,360
as you may find physical architecture

00:02:26,480 --> 00:02:29,680
also keeps

00:02:27,360 --> 00:02:31,840
changing and the physical system scale

00:02:29,680 --> 00:02:33,519
stays diversified even in the same

00:02:31,840 --> 00:02:35,760
architecture

00:02:33,519 --> 00:02:38,160
in such variable situations

00:02:35,760 --> 00:02:39,519
virtualization has been constantly the

00:02:38,160 --> 00:02:42,720
key technology

00:02:39,519 --> 00:02:46,000
to preserve our most expensive asset

00:02:42,720 --> 00:02:48,319
that is of course software

00:02:46,000 --> 00:02:51,040
the virtualization technology include

00:02:48,319 --> 00:02:53,920
both cpu and device virtualization

00:02:51,040 --> 00:02:55,440
as shown in the bottom picture i would

00:02:53,920 --> 00:02:58,080
like to stress that

00:02:55,440 --> 00:03:01,200
for preserving software assets device

00:02:58,080 --> 00:03:05,120
virtualization is critically important

00:03:01,200 --> 00:03:07,760
possibly more than cpu virtualization

00:03:05,120 --> 00:03:10,080
in automotive computing architecture

00:03:07,760 --> 00:03:13,280
device virtualization is similarly

00:03:10,080 --> 00:03:13,680
important for the identical reason from

00:03:13,280 --> 00:03:16,319
next

00:03:13,680 --> 00:03:18,239
slide i would like to discuss on device

00:03:16,319 --> 00:03:22,080
virtualization technology

00:03:18,239 --> 00:03:24,640
specifically in automotive

00:03:22,080 --> 00:03:26,959
in the automotive computing architecture

00:03:24,640 --> 00:03:29,200
there are some specific necessities or

00:03:26,959 --> 00:03:31,280
needs for device virtualization

00:03:29,200 --> 00:03:33,519
in addition to the general ones which i

00:03:31,280 --> 00:03:36,480
mentioned in the previous slide

00:03:33,519 --> 00:03:38,560
the first necessity is simple depending

00:03:36,480 --> 00:03:41,760
on car grade or car model

00:03:38,560 --> 00:03:44,239
equipped device may vary for example

00:03:41,760 --> 00:03:46,159
even for the same car oem there are a

00:03:44,239 --> 00:03:48,879
variety of displays

00:03:46,159 --> 00:03:49,680
for different categories or car models

00:03:48,879 --> 00:03:52,560
number

00:03:49,680 --> 00:03:53,760
size or aspect ratio of displays can be

00:03:52,560 --> 00:03:56,560
different

00:03:53,760 --> 00:03:59,200
thus we need common abstraction for such

00:03:56,560 --> 00:04:01,200
diverged devices to preserve software

00:03:59,200 --> 00:04:04,400
asset

00:04:01,200 --> 00:04:06,799
the second necessity is rather complex

00:04:04,400 --> 00:04:09,519
automotive computing architecture is

00:04:06,799 --> 00:04:12,720
currently a pretty much distributed one

00:04:09,519 --> 00:04:15,200
consists of a lot of ecu's in this

00:04:12,720 --> 00:04:15,920
environment allocation policy of a

00:04:15,200 --> 00:04:19,280
particular

00:04:15,920 --> 00:04:21,519
application software to a specific ecu

00:04:19,280 --> 00:04:23,600
an allocation policy of a particular

00:04:21,519 --> 00:04:26,320
device to a specific ecu

00:04:23,600 --> 00:04:28,000
are different optimal location of

00:04:26,320 --> 00:04:30,639
application could be decided

00:04:28,000 --> 00:04:31,840
by cohesion of functionalities or

00:04:30,639 --> 00:04:35,199
information

00:04:31,840 --> 00:04:37,919
or by load characteristic of application

00:04:35,199 --> 00:04:38,479
such as vector heavy or neural network

00:04:37,919 --> 00:04:42,000
heavy

00:04:38,479 --> 00:04:44,320
and so on on the other hand

00:04:42,000 --> 00:04:47,280
optimal location of devices could be

00:04:44,320 --> 00:04:50,080
decided by physical distance to ecu

00:04:47,280 --> 00:04:52,400
or by specific peripheral interface

00:04:50,080 --> 00:04:55,199
channel of ecu and so on

00:04:52,400 --> 00:04:57,680
so application software and relevant

00:04:55,199 --> 00:04:59,360
devices do not necessarily locate it on

00:04:57,680 --> 00:05:02,400
the same ecu

00:04:59,360 --> 00:05:05,440
furthermore it varies among car model

00:05:02,400 --> 00:05:07,759
or vehicle generations even in such

00:05:05,440 --> 00:05:09,520
environment we need to preserve our

00:05:07,759 --> 00:05:12,320
software asset

00:05:09,520 --> 00:05:14,240
so from application point of view

00:05:12,320 --> 00:05:15,759
location transparency is another

00:05:14,240 --> 00:05:18,240
critical issue

00:05:15,759 --> 00:05:19,360
thus we need device virtualization

00:05:18,240 --> 00:05:24,160
technology

00:05:19,360 --> 00:05:27,039
that satisfies these two necessities

00:05:24,160 --> 00:05:28,560
but someone might think the necessity

00:05:27,039 --> 00:05:30,639
could be materated

00:05:28,560 --> 00:05:31,840
when the centralized architecture is

00:05:30,639 --> 00:05:34,240
deployed

00:05:31,840 --> 00:05:34,960
however the same necessity is still

00:05:34,240 --> 00:05:37,440
there

00:05:34,960 --> 00:05:39,360
because a single centralized system

00:05:37,440 --> 00:05:40,320
still consists of multiple virtual

00:05:39,360 --> 00:05:43,520
machines

00:05:40,320 --> 00:05:44,320
and as shown in this figure logical

00:05:43,520 --> 00:05:47,280
architecture

00:05:44,320 --> 00:05:47,280
stays similar

00:05:49,120 --> 00:05:54,000
this example depicts the general notion

00:05:52,080 --> 00:05:56,000
of device virtualization from

00:05:54,000 --> 00:05:58,000
application point of view which i have

00:05:56,000 --> 00:06:00,639
explained so far

00:05:58,000 --> 00:06:02,960
in this example virtual display and

00:06:00,639 --> 00:06:05,440
virtual storage are defined

00:06:02,960 --> 00:06:08,400
the application software can treat them

00:06:05,440 --> 00:06:10,479
as if its own dedicated devices

00:06:08,400 --> 00:06:12,160
those virtual devices are physical

00:06:10,479 --> 00:06:15,360
location agnostic

00:06:12,160 --> 00:06:18,160
and highly abstracted for instance

00:06:15,360 --> 00:06:18,880
a part of this virtual display is mapped

00:06:18,160 --> 00:06:22,479
to

00:06:18,880 --> 00:06:25,600
a specific part of a specific display

00:06:22,479 --> 00:06:28,720
connected to a specific ecu

00:06:25,600 --> 00:06:29,680
in the distributed case or a specific

00:06:28,720 --> 00:06:32,479
virtual machine

00:06:29,680 --> 00:06:35,520
in a centralized case the mapping can be

00:06:32,479 --> 00:06:37,759
changed by some management program

00:06:35,520 --> 00:06:39,360
application software is not involved to

00:06:37,759 --> 00:06:42,400
the specific details of

00:06:39,360 --> 00:06:44,639
physical world application just needs to

00:06:42,400 --> 00:06:47,039
treat virtual display model

00:06:44,639 --> 00:06:48,560
and then the virtual display is mapped

00:06:47,039 --> 00:06:50,639
to the physical world

00:06:48,560 --> 00:06:52,319
by the device virtualization software

00:06:50,639 --> 00:06:54,960
behind the scene

00:06:52,319 --> 00:06:55,840
thus application software asset is

00:06:54,960 --> 00:06:58,960
preserved

00:06:55,840 --> 00:07:00,840
among various of physical configurations

00:06:58,960 --> 00:07:03,680
this is the concept of a device

00:07:00,840 --> 00:07:08,560
virtualization proposed by panasonic

00:07:03,680 --> 00:07:08,560
in this year all member meeting of agl

00:07:12,160 --> 00:07:16,800
in the previous session i have explained

00:07:14,319 --> 00:07:18,560
the necessity of device virtualization

00:07:16,800 --> 00:07:21,000
for automotive

00:07:18,560 --> 00:07:23,120
next i would like to explain why the

00:07:21,000 --> 00:07:24,080
standardization of virtual device

00:07:23,120 --> 00:07:26,639
interface

00:07:24,080 --> 00:07:28,080
is critically important for a healthy

00:07:26,639 --> 00:07:30,880
ecosystem

00:07:28,080 --> 00:07:33,120
and also talk about virtio which is a

00:07:30,880 --> 00:07:36,000
device virtualization framework

00:07:33,120 --> 00:07:38,720
recently chosen by the agl as a common

00:07:36,000 --> 00:07:40,720
virtual device framework

00:07:38,720 --> 00:07:43,360
let's look at the current situation

00:07:40,720 --> 00:07:46,000
first there are serious pinpoints around

00:07:43,360 --> 00:07:47,919
virtualization in automotive para

00:07:46,000 --> 00:07:50,160
virtual device driver layer and even

00:07:47,919 --> 00:07:50,479
part of application platform layer such

00:07:50,160 --> 00:07:54,080
as

00:07:50,479 --> 00:07:55,840
agl depend on both hypervisor and stock

00:07:54,080 --> 00:07:57,599
this is because most of current

00:07:55,840 --> 00:07:59,919
hypervisor solutions

00:07:57,599 --> 00:08:01,280
have proprietary pyro virtual device

00:07:59,919 --> 00:08:03,520
implementation

00:08:01,280 --> 00:08:05,039
and thus have incompatible para virtual

00:08:03,520 --> 00:08:07,680
device interfaces

00:08:05,039 --> 00:08:09,759
for upper layer software it is

00:08:07,680 --> 00:08:12,639
undesirable fragmentation

00:08:09,759 --> 00:08:14,319
so that oem and tier 1 will not have

00:08:12,639 --> 00:08:17,039
enough freedom of choice

00:08:14,319 --> 00:08:18,080
for virtualization solutions it's

00:08:17,039 --> 00:08:21,840
unhealthy

00:08:18,080 --> 00:08:21,840
from ecosystem point of view

00:08:23,120 --> 00:08:27,360
this slide illustrates a proposal to

00:08:25,440 --> 00:08:28,400
solve the pain points by utilizing

00:08:27,360 --> 00:08:30,479
fertile

00:08:28,400 --> 00:08:32,080
as the standard framework for device

00:08:30,479 --> 00:08:35,519
virtualization

00:08:32,080 --> 00:08:38,320
virtio is an open source implementation

00:08:35,519 --> 00:08:39,279
of para virtual device framework and has

00:08:38,320 --> 00:08:41,360
been utilized

00:08:39,279 --> 00:08:42,479
extensively in cloud servers in our

00:08:41,360 --> 00:08:45,279
region

00:08:42,479 --> 00:08:46,480
by introducing virtio there will be a

00:08:45,279 --> 00:08:48,080
common interface

00:08:46,480 --> 00:08:50,320
and implementation for para

00:08:48,080 --> 00:08:53,440
virtualization devices

00:08:50,320 --> 00:08:55,839
thus enhanced freedom is guaranteed to

00:08:53,440 --> 00:08:58,640
choose optimal hypervisor and stock

00:08:55,839 --> 00:09:00,240
for automotive needs without modifying

00:08:58,640 --> 00:09:02,800
upper layer software

00:09:00,240 --> 00:09:04,640
significantly when we talk about

00:09:02,800 --> 00:09:08,000
virtualization in agl

00:09:04,640 --> 00:09:10,720
this is critically important panasonic

00:09:08,000 --> 00:09:11,360
has been proposing this idea and this

00:09:10,720 --> 00:09:14,240
year

00:09:11,360 --> 00:09:14,720
agl officially decided to support world

00:09:14,240 --> 00:09:18,399
io

00:09:14,720 --> 00:09:21,279
as the common virtualization framework

00:09:18,399 --> 00:09:23,120
on the other hand when we apply vertio

00:09:21,279 --> 00:09:26,480
to automotive systems

00:09:23,120 --> 00:09:28,800
we need some more efforts as i mentioned

00:09:26,480 --> 00:09:30,000
word tile is widely used in cloud

00:09:28,800 --> 00:09:32,880
servers

00:09:30,000 --> 00:09:33,680
in comparison with servers automotive

00:09:32,880 --> 00:09:36,480
systems

00:09:33,680 --> 00:09:37,200
need various additional shared devices

00:09:36,480 --> 00:09:40,560
as shown

00:09:37,200 --> 00:09:43,760
on the right hand side including gpu

00:09:40,560 --> 00:09:48,000
video audio sensors can

00:09:43,760 --> 00:09:50,160
and so on so together with us

00:09:48,000 --> 00:09:52,240
many companies which also join agr

00:09:50,160 --> 00:09:53,760
virtualization eeg later

00:09:52,240 --> 00:09:55,680
have been jointly working on

00:09:53,760 --> 00:09:57,920
contributing to support more para

00:09:55,680 --> 00:10:00,880
virtual devices for world io

00:09:57,920 --> 00:10:03,440
in open source community steady progress

00:10:00,880 --> 00:10:06,079
has been made consistently

00:10:03,440 --> 00:10:08,079
as you might know agl has already had

00:10:06,079 --> 00:10:09,040
the reference hardware for development

00:10:08,079 --> 00:10:11,600
purpose

00:10:09,040 --> 00:10:13,040
the agr reference hardware has quite

00:10:11,600 --> 00:10:15,600
modular structure

00:10:13,040 --> 00:10:17,920
as shown in bottom picture where the

00:10:15,600 --> 00:10:20,480
sock modules and the various peripheral

00:10:17,920 --> 00:10:22,959
modules can be easily replaced

00:10:20,480 --> 00:10:25,600
using this agr reference hardware

00:10:22,959 --> 00:10:26,560
together with vertical ready agl unified

00:10:25,600 --> 00:10:28,640
code base

00:10:26,560 --> 00:10:29,920
we can establish a healthy environment

00:10:28,640 --> 00:10:31,440
for the industry

00:10:29,920 --> 00:10:33,279
where we can choose arbitrary

00:10:31,440 --> 00:10:36,480
hypervisors socks

00:10:33,279 --> 00:10:38,560
and peripherals in other words we can

00:10:36,480 --> 00:10:42,640
obtain the freedom to choose the most

00:10:38,560 --> 00:10:46,240
competitive virtualization solutions

00:10:42,640 --> 00:10:48,320
to realize the big picture of 4 in agl

00:10:46,240 --> 00:10:50,880
we have started to serve as the leader

00:10:48,320 --> 00:10:52,399
of agr virtualization expert group from

00:10:50,880 --> 00:10:54,640
this april

00:10:52,399 --> 00:10:56,800
thanks to the active contribution from

00:10:54,640 --> 00:10:59,600
many agm member companies

00:10:56,800 --> 00:11:00,000
and individuals across the industries

00:10:59,600 --> 00:11:03,040
great

00:11:00,000 --> 00:11:04,160
progress has been achieved i'm glad to

00:11:03,040 --> 00:11:07,200
announce that

00:11:04,160 --> 00:11:10,720
in the next agl version koki koi

00:11:07,200 --> 00:11:13,040
to be released in next february vertile

00:11:10,720 --> 00:11:15,920
will be officially supported for all the

00:11:13,040 --> 00:11:19,440
devices already standardized

00:11:15,920 --> 00:11:20,880
next a year for our eeg we will continue

00:11:19,440 --> 00:11:24,240
to enlarge the scope of

00:11:20,880 --> 00:11:26,880
devices supported in agl and discuss

00:11:24,240 --> 00:11:28,240
more about real automotive use cases of

00:11:26,880 --> 00:11:30,800
fertile

00:11:28,240 --> 00:11:33,920
and even think about standardization of

00:11:30,800 --> 00:11:33,920
fertile backend

00:11:34,079 --> 00:11:37,360
if we assume the vertical protein as the

00:11:36,480 --> 00:11:39,120
region

00:11:37,360 --> 00:11:41,279
there will be two dimensions for the

00:11:39,120 --> 00:11:44,079
future eg activities

00:11:41,279 --> 00:11:44,720
one is application number dial and the

00:11:44,079 --> 00:11:47,680
other is

00:11:44,720 --> 00:11:48,800
extension of word i o in terms of

00:11:47,680 --> 00:11:51,519
application

00:11:48,800 --> 00:11:54,079
the ecu consolidation for example

00:11:51,519 --> 00:11:56,720
consolidation of ic and ivi

00:11:54,079 --> 00:11:57,680
can be easier to be achieved on the

00:11:56,720 --> 00:12:00,399
other hand

00:11:57,680 --> 00:12:02,959
with the power of virtio an easier

00:12:00,399 --> 00:12:06,160
abstraction can be even achieved

00:12:02,959 --> 00:12:09,680
for example a unified virtual display

00:12:06,160 --> 00:12:10,639
across multiple ecu's regarding the ecu

00:12:09,680 --> 00:12:13,920
consolidation

00:12:10,639 --> 00:12:17,279
and abstraction our eg member companies

00:12:13,920 --> 00:12:19,600
will show some demonstrations later

00:12:17,279 --> 00:12:20,880
the second dimension is extension of

00:12:19,600 --> 00:12:23,200
fertile

00:12:20,880 --> 00:12:25,519
as i have mentioned we are going to

00:12:23,200 --> 00:12:29,040
support more volatile devices in

00:12:25,519 --> 00:12:32,240
agl now let's go to the demo

00:12:29,040 --> 00:12:32,240
of our eeg works

00:12:36,160 --> 00:12:41,839
first we will show demos for ic ivi

00:12:39,440 --> 00:12:42,399
consolidation with the latest agl

00:12:41,839 --> 00:12:46,480
version

00:12:42,399 --> 00:12:49,200
jumping jetty fish our eg member company

00:12:46,480 --> 00:12:51,200
open synergy and linaro will give two

00:12:49,200 --> 00:12:53,519
demos respectively

00:12:51,200 --> 00:12:55,680
their demos highlight two significant

00:12:53,519 --> 00:12:58,399
features of virtio

00:12:55,680 --> 00:13:01,279
in open synergy's demo they upgraded the

00:12:58,399 --> 00:13:02,240
agr ivi from two generation older happy

00:13:01,279 --> 00:13:04,880
hallibut

00:13:02,240 --> 00:13:07,519
to the latest version jumping jellyfish

00:13:04,880 --> 00:13:09,760
in short time with only few changes

00:13:07,519 --> 00:13:11,279
which highlights the easy update ability

00:13:09,760 --> 00:13:13,839
whisper dial

00:13:11,279 --> 00:13:15,760
in linearus demo it switch between

00:13:13,839 --> 00:13:16,560
different hypervisor and hardware

00:13:15,760 --> 00:13:19,839
environment

00:13:16,560 --> 00:13:22,079
with the same agl ucb which highlights

00:13:19,839 --> 00:13:25,360
the switchability of hypervisor

00:13:22,079 --> 00:13:28,079
and shock with virtio thanks to the word

00:13:25,360 --> 00:13:30,959
ios economic interface and framework

00:13:28,079 --> 00:13:35,839
independent from hypervisor and sock the

00:13:30,959 --> 00:13:35,839
portability of software is enhanced

00:13:41,360 --> 00:13:46,160
now let's watch the demo video from open

00:13:46,839 --> 00:13:49,839
synergy

00:13:55,199 --> 00:13:58,959
hello today i'm here to tell you about

00:13:57,279 --> 00:14:01,920
open synergy setup

00:13:58,959 --> 00:14:04,399
with two automotive grade is running on

00:14:01,920 --> 00:14:06,959
top of the cocos hypervisor

00:14:04,399 --> 00:14:08,800
running on top of the automotive grade

00:14:06,959 --> 00:14:11,920
linux reference platform

00:14:08,800 --> 00:14:15,360
for the renesas r car h3

00:14:11,920 --> 00:14:17,440
soc looking at the architecture of the

00:14:15,360 --> 00:14:19,440
setup you can see the agl meter or

00:14:17,440 --> 00:14:21,760
instrument cluster guest on the left

00:14:19,440 --> 00:14:22,720
on the right you can see the agl ivi

00:14:21,760 --> 00:14:25,839
guest

00:14:22,720 --> 00:14:26,560
the agl meter guest on the left serves

00:14:25,839 --> 00:14:29,600
up

00:14:26,560 --> 00:14:32,480
physical devices to the agl ivi guest

00:14:29,600 --> 00:14:33,120
using virtio virtio offers a very big

00:14:32,480 --> 00:14:36,399
advantage

00:14:33,120 --> 00:14:39,120
in that we can easily upgrade the agl

00:14:36,399 --> 00:14:40,800
ivi guest because it is independent of

00:14:39,120 --> 00:14:43,440
actual physical devices

00:14:40,800 --> 00:14:44,639
in this setup the agl meter guest is

00:14:43,440 --> 00:14:48,079
running agl

00:14:44,639 --> 00:14:50,560
hh or happy halibut whereas the

00:14:48,079 --> 00:14:51,440
ivi guest is running agl jumping

00:14:50,560 --> 00:14:53,440
jellyfish

00:14:51,440 --> 00:14:55,040
because of virtio it only took open

00:14:53,440 --> 00:14:57,920
synergy about two weeks

00:14:55,040 --> 00:14:59,360
to port the jumping jellyfish version to

00:14:57,920 --> 00:15:01,360
the setup

00:14:59,360 --> 00:15:02,480
not only are we using the hypervisor so

00:15:01,360 --> 00:15:05,600
that both of these

00:15:02,480 --> 00:15:08,639
agls can run on top of a single soc

00:15:05,600 --> 00:15:13,120
we also are using virtio technology

00:15:08,639 --> 00:15:14,959
so that both of these agls can

00:15:13,120 --> 00:15:17,279
share many of the devices provided by

00:15:14,959 --> 00:15:19,040
the platform for example verdio block

00:15:17,279 --> 00:15:21,040
the share the block device

00:15:19,040 --> 00:15:22,240
verteo rng for the random number

00:15:21,040 --> 00:15:26,320
generator

00:15:22,240 --> 00:15:28,880
input for touch 2d gpu

00:15:26,320 --> 00:15:29,680
to share the display controller as well

00:15:28,880 --> 00:15:32,880
as net

00:15:29,680 --> 00:15:36,079
so that the two guests can communicate

00:15:32,880 --> 00:15:38,399
by a ip

00:15:36,079 --> 00:15:40,480
let's have a look at the hvac settings

00:15:38,399 --> 00:15:43,759
so you can see that input

00:15:40,480 --> 00:15:45,839
and display are working you could say we

00:15:43,759 --> 00:15:48,880
can touch

00:15:45,839 --> 00:15:51,120
and you see the display works fairly

00:15:48,880 --> 00:15:51,120
well

00:15:51,440 --> 00:15:57,600
for the 3d acceleration we are using

00:15:54,959 --> 00:16:00,079
the hardware assisted virtualization

00:15:57,600 --> 00:16:03,839
provided by renesis in a future version

00:16:00,079 --> 00:16:05,759
we plan to move also to virtio 3d gpu

00:16:03,839 --> 00:16:07,279
which would allow us to be totally

00:16:05,759 --> 00:16:12,160
independent on

00:16:07,279 --> 00:16:15,600
the ivi side of the vendor bsp

00:16:12,160 --> 00:16:15,600
let's have a look at the navigation

00:16:16,399 --> 00:16:22,720
the navigation is using virtio

00:16:19,519 --> 00:16:25,920
network to access the internet

00:16:22,720 --> 00:16:27,360
so the actual ethernet device provided

00:16:25,920 --> 00:16:30,480
by the platform

00:16:27,360 --> 00:16:33,519
is owned by the instrument cluster

00:16:30,480 --> 00:16:36,240
automotive grade linux

00:16:33,519 --> 00:16:38,160
the ivi automotive grade linux is

00:16:36,240 --> 00:16:40,160
getting to the internet via virto

00:16:38,160 --> 00:16:41,600
network so by accessing first the

00:16:40,160 --> 00:16:43,839
instrument cluster linux

00:16:41,600 --> 00:16:46,320
which then routes the request to the

00:16:43,839 --> 00:16:49,199
ethernet interface and out into

00:16:46,320 --> 00:16:49,199
the internet

00:16:49,600 --> 00:16:54,959
let's have a look at the version that's

00:16:51,759 --> 00:16:54,959
running here on the ivi

00:16:55,120 --> 00:16:58,720
agl and you can see in fact it is the

00:16:57,519 --> 00:17:02,000
newest version

00:16:58,720 --> 00:17:04,480
10 jumping jellyfish

00:17:02,000 --> 00:17:06,480
thank you for joining me today for the

00:17:04,480 --> 00:17:07,919
description of our agl cockpit

00:17:06,480 --> 00:17:11,600
controller demonstrator

00:17:07,919 --> 00:17:11,600
on the agl reference platform

00:17:13,700 --> 00:17:21,679
[Music]

00:17:16,799 --> 00:17:21,679
next let's have a look at linearus demo

00:17:24,559 --> 00:17:29,440
so my name's alex bennet i'm a senior

00:17:26,959 --> 00:17:31,440
virtualization engineer at lenaro

00:17:29,440 --> 00:17:32,960
and i'm also the tech lead for project

00:17:31,440 --> 00:17:34,480
stratos

00:17:32,960 --> 00:17:36,480
you can find me fairly easily on the

00:17:34,480 --> 00:17:38,640
internet but on the irc channels i

00:17:36,480 --> 00:17:42,480
either go by the handle st squad

00:17:38,640 --> 00:17:44,400
or aj b lenara depending on the channel

00:17:42,480 --> 00:17:46,640
so just a little bit about lenaro for

00:17:44,400 --> 00:17:48,640
those of you that aren't familiar

00:17:46,640 --> 00:17:50,240
we're a membership driven organization

00:17:48,640 --> 00:17:51,760
we draw our members from all over the

00:17:50,240 --> 00:17:53,360
arm ecosystem

00:17:51,760 --> 00:17:55,280
and our mission statement is basically

00:17:53,360 --> 00:17:55,840
to drive open source development for the

00:17:55,280 --> 00:17:59,440
arm

00:17:55,840 --> 00:18:00,320
platform we've got our fingers in a lot

00:17:59,440 --> 00:18:02,400
of pies so we

00:18:00,320 --> 00:18:04,640
work with things all the way from the

00:18:02,400 --> 00:18:06,559
smallest iot embedded devices

00:18:04,640 --> 00:18:08,640
through your bog standard enterprise

00:18:06,559 --> 00:18:10,240
server type setups all the way up to

00:18:08,640 --> 00:18:13,440
high performance computing

00:18:10,240 --> 00:18:15,200
and supercomputing environments

00:18:13,440 --> 00:18:16,559
we're also an upstream first engineering

00:18:15,200 --> 00:18:18,320
organization

00:18:16,559 --> 00:18:19,840
so generally we tend to work directly on

00:18:18,320 --> 00:18:21,520
the upstream projects

00:18:19,840 --> 00:18:25,039
and you'll find that the kobe right ends

00:18:21,520 --> 00:18:28,240
up there let's talk about the demo

00:18:25,039 --> 00:18:29,600
the aim of this demo is to show a single

00:18:28,240 --> 00:18:32,640
software stack

00:18:29,600 --> 00:18:36,320
running on multiple hypervisors

00:18:32,640 --> 00:18:39,440
and also on multiple pieces of hardware

00:18:36,320 --> 00:18:39,919
so let's talk about the kvm deployment

00:18:39,440 --> 00:18:43,760
first

00:18:39,919 --> 00:18:45,520
so here's uh what kbm looks like um

00:18:43,760 --> 00:18:46,960
running with virtualization so your

00:18:45,520 --> 00:18:49,440
firmware boots in

00:18:46,960 --> 00:18:50,240
uh to the host linux kernel uh because

00:18:49,440 --> 00:18:53,679
of the

00:18:50,240 --> 00:18:55,679
way uh kvm is designed it's sort of all

00:18:53,679 --> 00:18:57,919
one blob but what's actually happening

00:18:55,679 --> 00:18:59,919
on arm is we've got a the host kernel

00:18:57,919 --> 00:19:02,000
mostly sits in the l1 but then we have a

00:18:59,919 --> 00:19:04,320
little trampoline that runs in the el2

00:19:02,000 --> 00:19:06,480
which is the hypervisor layer

00:19:04,320 --> 00:19:07,440
um and then for use space we've got

00:19:06,480 --> 00:19:09,280
cremeu

00:19:07,440 --> 00:19:11,520
and then on the guest side that's the hl

00:19:09,280 --> 00:19:13,760
user space

00:19:11,520 --> 00:19:17,360
so the demo platform uh that i'm doing

00:19:13,760 --> 00:19:20,640
the kvm demo on is a marvel machiato bin

00:19:17,360 --> 00:19:21,200
uh so it's a basically a arm development

00:19:20,640 --> 00:19:24,799
board

00:19:21,200 --> 00:19:28,520
it's got four a 72 cores

00:19:24,799 --> 00:19:31,919
62 gigabytes of ram and a nvidia

00:19:28,520 --> 00:19:35,760
gk208 running the

00:19:31,919 --> 00:19:38,960
nuvo driver stack and this is on top of

00:19:35,760 --> 00:19:41,360
a debian buster os

00:19:38,960 --> 00:19:42,160
so let me just switch across to my

00:19:41,360 --> 00:19:45,120
camera

00:19:42,160 --> 00:19:45,919
there you go it's an arm 64 machine and

00:19:45,120 --> 00:19:49,120
if i

00:19:45,919 --> 00:19:52,400
maybe lspci and then

00:19:49,120 --> 00:19:55,200
you can see hardware so i think we'll

00:19:52,400 --> 00:19:56,400
get kremew up and running on this this

00:19:55,200 --> 00:19:59,200
is the

00:19:56,400 --> 00:19:59,600
pseudo air conditioning system and we

00:19:59,200 --> 00:20:02,480
can

00:19:59,600 --> 00:20:03,280
turn things on and off uh enabled seat

00:20:02,480 --> 00:20:05,039
warmers

00:20:03,280 --> 00:20:06,400
there's obviously no real hardware that

00:20:05,039 --> 00:20:08,559
we're attached to

00:20:06,400 --> 00:20:10,320
so now let's talk about uh zen

00:20:08,559 --> 00:20:13,760
deployment

00:20:10,320 --> 00:20:15,919
um so the zen system is uh

00:20:13,760 --> 00:20:17,440
looks broadly the same at the top end so

00:20:15,919 --> 00:20:19,919
it's the same agl

00:20:17,440 --> 00:20:21,200
kernel the same agl user space but this

00:20:19,919 --> 00:20:23,919
time we've got the zen

00:20:21,200 --> 00:20:25,280
hypervisor the design of zen is the

00:20:23,919 --> 00:20:29,039
hypervisor is much thinner

00:20:25,280 --> 00:20:32,240
usually it leaves the hardware emulation

00:20:29,039 --> 00:20:34,720
to something else so in this case

00:20:32,240 --> 00:20:36,640
in a dom zero deployment the the um

00:20:34,720 --> 00:20:39,919
guest has direct access to the hardware

00:20:36,640 --> 00:20:42,240
and the hardware is a fully emulated

00:20:39,919 --> 00:20:43,039
m verb board uh and i'm doing this with

00:20:42,240 --> 00:20:46,080
cremeuse

00:20:43,039 --> 00:20:48,080
um arm 64 emulation so

00:20:46,080 --> 00:20:49,919
as far as the zen hypervisor is

00:20:48,080 --> 00:20:50,720
concerned all this hardware really

00:20:49,919 --> 00:20:54,080
exists

00:20:50,720 --> 00:20:54,799
and that's perfectly fine for for vert i

00:20:54,080 --> 00:20:56,480
o in fact

00:20:54,799 --> 00:20:59,039
you know having real hardware for vert

00:20:56,480 --> 00:21:01,360
io is one of the things you can do

00:20:59,039 --> 00:21:02,960
right let me just there we go talk about

00:21:01,360 --> 00:21:06,880
the host platform so it's a

00:21:02,960 --> 00:21:08,960
core i7 uh x8664 machine

00:21:06,880 --> 00:21:10,720
i'm emulating the rm64 so it'll run a

00:21:08,960 --> 00:21:13,760
little bit slower

00:21:10,720 --> 00:21:14,400
i've got 32gb of ram in this machine and

00:21:13,760 --> 00:21:17,840
i've got

00:21:14,400 --> 00:21:21,919
intel graphics instead of nvidia

00:21:17,840 --> 00:21:24,559
so let's just switch across to the demo

00:21:21,919 --> 00:21:24,559
there we go

00:21:25,440 --> 00:21:29,840
so just bring it up so there you go you

00:21:27,280 --> 00:21:31,520
can see that's the zen hypervisor as it

00:21:29,840 --> 00:21:34,000
detects the hardware

00:21:31,520 --> 00:21:35,200
and loads the guest kernel into position

00:21:34,000 --> 00:21:37,200
and there you go

00:21:35,200 --> 00:21:38,720
and there you can see it all pops out

00:21:37,200 --> 00:21:40,720
and then we'll just click the same

00:21:38,720 --> 00:21:43,120
buttons as before

00:21:40,720 --> 00:21:44,000
uh takes a little bit longer for the

00:21:43,120 --> 00:21:46,400
actual software to run

00:21:44,000 --> 00:21:47,760
but as you can see the graphics respond

00:21:46,400 --> 00:21:50,880
pretty quickly

00:21:47,760 --> 00:21:53,520
there you go and then again i'll

00:21:50,880 --> 00:21:54,720
turn up the fan speed what are our next

00:21:53,520 --> 00:21:58,080
steps so

00:21:54,720 --> 00:21:59,200
the next steps for this particular

00:21:58,080 --> 00:22:01,200
example that we want to get up and

00:21:59,200 --> 00:22:03,600
running is running as a

00:22:01,200 --> 00:22:04,880
dom u guest so zen's traditional

00:22:03,600 --> 00:22:07,280
deployment model

00:22:04,880 --> 00:22:09,280
is to have a don zero kernel that is the

00:22:07,280 --> 00:22:11,360
kernel of most privilege and accesses

00:22:09,280 --> 00:22:13,120
the actual hardware of the system

00:22:11,360 --> 00:22:14,799
which is what we were doing in the last

00:22:13,120 --> 00:22:17,919
case and then for the guests

00:22:14,799 --> 00:22:22,400
themselves run in a less privileged

00:22:17,919 --> 00:22:22,400
mode called dom u and then

00:22:22,559 --> 00:22:26,559
the hardware access is that they make

00:22:24,159 --> 00:22:29,679
get past the dom zero to be

00:22:26,559 --> 00:22:34,000
handled uh so i

00:22:29,679 --> 00:22:35,679
that's what we hope to demonstrate later

00:22:34,000 --> 00:22:37,280
all right uh just a quick reminder

00:22:35,679 --> 00:22:40,320
project stratos

00:22:37,280 --> 00:22:43,200
we do all our development in the open

00:22:40,320 --> 00:22:43,679
uh so there's a link to our home page

00:22:43,200 --> 00:22:46,320
there

00:22:43,679 --> 00:22:46,880
um search for stratos and our you should

00:22:46,320 --> 00:22:49,919
find it

00:22:46,880 --> 00:22:52,960
we also have a mailing list

00:22:49,919 --> 00:22:55,120
and you can also find me on the irc

00:22:52,960 --> 00:22:57,600
channels on linare virtualization on

00:22:55,120 --> 00:22:57,600
freenode

00:23:00,320 --> 00:23:05,039
see as these two demonstrations from our

00:23:03,440 --> 00:23:08,159
expert group member

00:23:05,039 --> 00:23:11,200
open synergy and linear have proved with

00:23:08,159 --> 00:23:14,240
virtio as a common framework in agl

00:23:11,200 --> 00:23:16,320
we have achieved a virtual agl which is

00:23:14,240 --> 00:23:17,440
easily upgradable across different

00:23:16,320 --> 00:23:19,120
generations

00:23:17,440 --> 00:23:21,200
and switchable across different

00:23:19,120 --> 00:23:24,159
hypervisors and stocks

00:23:21,200 --> 00:23:25,440
thus a healthy ecosystem around device

00:23:24,159 --> 00:23:28,720
virtualization

00:23:25,440 --> 00:23:28,720
has been established

00:23:32,960 --> 00:23:37,919
in the previous demo session we have

00:23:35,520 --> 00:23:40,960
showed the consolidated architecture

00:23:37,919 --> 00:23:42,880
actualized by vertiol let's look at

00:23:40,960 --> 00:23:44,640
another magic of vertile

00:23:42,880 --> 00:23:45,919
that is even for distributed

00:23:44,640 --> 00:23:48,480
architecture

00:23:45,919 --> 00:23:51,360
virtio can also be used as device

00:23:48,480 --> 00:23:54,960
virtualization framework

00:23:51,360 --> 00:23:57,279
by extending vert io abstraction of ecu

00:23:54,960 --> 00:23:58,159
can be achieved and the device can be

00:23:57,279 --> 00:24:01,679
shared across

00:23:58,159 --> 00:24:05,520
different ecu's in panasonic's demo

00:24:01,679 --> 00:24:07,760
a unified hmi technology based on virtio

00:24:05,520 --> 00:24:11,919
was utilized to achieve a virtual

00:24:07,760 --> 00:24:11,919
display across multiple ecu's

00:24:17,760 --> 00:24:22,000
let's watch the demo video from

00:24:19,200 --> 00:24:22,000
panasonic

00:24:25,120 --> 00:24:28,559
hello everyone i am takashi pune from

00:24:27,600 --> 00:24:31,440
panasonic

00:24:28,559 --> 00:24:32,000
today i'm going to talk about an actual

00:24:31,440 --> 00:24:35,440
use case

00:24:32,000 --> 00:24:37,279
of bad io technology that a unified hmi

00:24:35,440 --> 00:24:39,919
can be achieved across different

00:24:37,279 --> 00:24:39,919
displays

00:24:40,720 --> 00:24:44,240
in the previous session we have talked a

00:24:43,360 --> 00:24:47,440
lot about

00:24:44,240 --> 00:24:50,880
importance of device virtualization and

00:24:47,440 --> 00:24:53,360
how to achieve it with pataio

00:24:50,880 --> 00:24:56,320
now let's look at another important

00:24:53,360 --> 00:24:59,679
aspect of device virtualization

00:24:56,320 --> 00:25:03,360
that is location transparency

00:24:59,679 --> 00:25:04,320
that means first application can render

00:25:03,360 --> 00:25:08,000
information on

00:25:04,320 --> 00:25:10,640
arbitrary displays second

00:25:08,000 --> 00:25:11,760
mixed contents can be rendered to a

00:25:10,640 --> 00:25:15,679
single display from

00:25:11,760 --> 00:25:18,799
application running on different ecu's

00:25:15,679 --> 00:25:22,240
last applications are independent from

00:25:18,799 --> 00:25:26,000
number size location and or

00:25:22,240 --> 00:25:26,000
aspect ratio of displays

00:25:26,640 --> 00:25:31,679
this slide shows the design overview of

00:25:29,039 --> 00:25:34,400
our unified spatula display to realize

00:25:31,679 --> 00:25:37,120
the concept of previous slide

00:25:34,400 --> 00:25:38,640
though each issue runs different type of

00:25:37,120 --> 00:25:40,799
operating system

00:25:38,640 --> 00:25:43,200
each has a common design for virtual

00:25:40,799 --> 00:25:44,960
display and share the unified virtual

00:25:43,200 --> 00:25:47,840
frame memory

00:25:44,960 --> 00:25:49,200
application on each issue can access to

00:25:47,840 --> 00:25:51,919
it

00:25:49,200 --> 00:25:53,919
thus distributed mixed rendering is

00:25:51,919 --> 00:25:56,159
realized

00:25:53,919 --> 00:25:57,679
it does not only work in purely

00:25:56,159 --> 00:26:01,039
distributed system

00:25:57,679 --> 00:26:02,559
with separate ecu's but also in same

00:26:01,039 --> 00:26:06,320
distributed system

00:26:02,559 --> 00:26:11,600
or centralized system with virtual

00:26:06,320 --> 00:26:13,520
machines in a single ecus

00:26:11,600 --> 00:26:15,120
however without realizing

00:26:13,520 --> 00:26:18,240
interoperability between

00:26:15,120 --> 00:26:21,039
ecu's it doesn't work

00:26:18,240 --> 00:26:21,360
each ecu from different suppliers need

00:26:21,039 --> 00:26:24,000
to

00:26:21,360 --> 00:26:24,799
exchange rendering information to each

00:26:24,000 --> 00:26:28,000
other

00:26:24,799 --> 00:26:29,520
by common protocol it can be

00:26:28,000 --> 00:26:32,000
theoretically realized

00:26:29,520 --> 00:26:34,320
either by some standardization process

00:26:32,000 --> 00:26:37,600
of a unified protocol

00:26:34,320 --> 00:26:40,880
or by the open source development

00:26:37,600 --> 00:26:44,159
from our perspective the latter one is

00:26:40,880 --> 00:26:47,760
much better than the other in terms of

00:26:44,159 --> 00:26:47,760
both quality and speed

00:26:48,240 --> 00:26:52,159
in this chart i would like to explain

00:26:51,039 --> 00:26:54,320
what is needed

00:26:52,159 --> 00:26:56,799
as an implementation to realize the

00:26:54,320 --> 00:26:59,440
unified hdmi technology

00:26:56,799 --> 00:27:00,559
the key components are highlighted in

00:26:59,440 --> 00:27:03,919
lead

00:27:00,559 --> 00:27:07,679
we use battery l gpu to acquire

00:27:03,919 --> 00:27:11,120
opengl es commands in application site

00:27:07,679 --> 00:27:13,039
and send them to remote node a remote

00:27:11,120 --> 00:27:16,080
node receives those commands

00:27:13,039 --> 00:27:19,600
and renders with its gpu

00:27:16,080 --> 00:27:22,880
also we need to implement dwm

00:27:19,600 --> 00:27:26,080
distributed window management by

00:27:22,880 --> 00:27:26,960
implementing these components we can

00:27:26,080 --> 00:27:29,600
realize

00:27:26,960 --> 00:27:30,640
very flexible and interoperable

00:27:29,600 --> 00:27:34,559
integrated

00:27:30,640 --> 00:27:35,520
cockpit hmi while preserving software

00:27:34,559 --> 00:27:39,760
asset

00:27:35,520 --> 00:27:39,760
don't you think it's quite exciting

00:27:40,640 --> 00:27:45,440
before sharing the real demonstration of

00:27:43,120 --> 00:27:47,200
unified hdmi technology

00:27:45,440 --> 00:27:48,720
i would like to illustrate the

00:27:47,200 --> 00:27:52,159
demonstration system

00:27:48,720 --> 00:27:55,200
first there are five ecu's

00:27:52,159 --> 00:27:58,080
for metals heart ibi

00:27:55,200 --> 00:28:00,000
passenger system and projects

00:27:58,080 --> 00:28:03,440
respectively

00:28:00,000 --> 00:28:06,000
each ecu expects vtx has its own

00:28:03,440 --> 00:28:06,000
display

00:28:07,120 --> 00:28:10,960
now here we go in the first

00:28:09,840 --> 00:28:13,279
demonstration

00:28:10,960 --> 00:28:14,000
parking information is received by

00:28:13,279 --> 00:28:17,600
bluetx

00:28:14,000 --> 00:28:20,240
ecu without any display attached

00:28:17,600 --> 00:28:21,520
with zx issue can render the parking

00:28:20,240 --> 00:28:24,000
information to

00:28:21,520 --> 00:28:25,600
any displays using unified hdmi

00:28:24,000 --> 00:28:28,000
technology

00:28:25,600 --> 00:28:32,399
you can see parking information can be

00:28:28,000 --> 00:28:32,399
rendered even across two displays

00:28:41,600 --> 00:28:46,640
the second demonstration is just for a

00:28:44,240 --> 00:28:48,799
demo purpose

00:28:46,640 --> 00:28:50,159
the application can create these

00:28:48,799 --> 00:28:52,960
multiple displays

00:28:50,159 --> 00:28:55,200
as a single virtual display as you can

00:28:52,960 --> 00:28:55,200
see

00:28:56,080 --> 00:28:59,679
thank you for watching a demo video from

00:28:58,320 --> 00:29:04,960
panasonic about

00:28:59,679 --> 00:29:04,960
infinite hmi technology based on bad io

00:29:08,240 --> 00:29:11,520
that's all for our expert groups

00:29:10,399 --> 00:29:14,000
presentation

00:29:11,520 --> 00:29:15,840
we hope everyone interested can join the

00:29:14,000 --> 00:29:18,240
agile virtualization eg

00:29:15,840 --> 00:29:19,200
to discuss and contribute virtualization

00:29:18,240 --> 00:29:23,039
architecture

00:29:19,200 --> 00:29:23,039
for automotive together with us

00:29:23,200 --> 00:29:28,480
together with our eg members we will be

00:29:25,840 --> 00:29:31,039
online today to answer your questions

00:29:28,480 --> 00:29:32,320
if you have any please feel free to tap

00:29:31,039 --> 00:29:40,880
in the chat box

00:29:32,320 --> 00:29:42,960
thank you

00:29:40,880 --> 00:29:42,960

YouTube URL: https://www.youtube.com/watch?v=oEwmH1XVIz0


