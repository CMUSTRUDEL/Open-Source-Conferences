Title: AGL CIAT and Infrastructure Update - Jan-Simon Moeller, The Linux Foundation
Publication date: 2020-12-03
Playlist: Open Source Summit Japan & Automotive Linux Summit 2020
Description: 
	AGL CIAT and Infrastructure Update - Jan-Simon Moeller, The Linux Foundation
Captions: 
	00:00:06,879 --> 00:00:10,719
hello everyone

00:00:08,160 --> 00:00:11,519
i hope you have a nice conference

00:00:10,719 --> 00:00:14,719
welcome

00:00:11,519 --> 00:00:16,880
to my talk about agl's

00:00:14,719 --> 00:00:18,640
continuous integration and automated

00:00:16,880 --> 00:00:21,840
testing infrastructure

00:00:18,640 --> 00:00:23,439
and about some infra updates my name is

00:00:21,840 --> 00:00:26,880
jan simon miller

00:00:23,439 --> 00:00:28,640
i'm the release manager for agl and i'm

00:00:26,880 --> 00:00:32,800
also taking care of

00:00:28,640 --> 00:00:32,800
the backend infrastructure

00:00:34,399 --> 00:00:39,920
so agl's

00:00:40,480 --> 00:00:43,680
continuous integration and automated

00:00:42,640 --> 00:00:48,239
testing

00:00:43,680 --> 00:00:51,840
is there to fulfill a couple of goals

00:00:48,239 --> 00:00:55,039
a we want to ensure the stability of the

00:00:51,840 --> 00:00:58,320
agl unified code base this

00:00:55,039 --> 00:01:01,440
is a linux distribution

00:00:58,320 --> 00:01:03,680
for use in the automotive industry

00:01:01,440 --> 00:01:06,159
and it's based on top of the octa

00:01:03,680 --> 00:01:08,880
project

00:01:06,159 --> 00:01:12,560
we also want to provide fast a fast

00:01:08,880 --> 00:01:16,960
feedback loop to the developer so

00:01:12,560 --> 00:01:20,479
this should happen for each code change

00:01:16,960 --> 00:01:24,000
on the available platforms but also

00:01:20,479 --> 00:01:28,720
for the applications that

00:01:24,000 --> 00:01:31,119
we develop and the tests need to run on

00:01:28,720 --> 00:01:35,360
each supported hardware and on

00:01:31,119 --> 00:01:35,360
each image variant out there

00:01:38,320 --> 00:01:41,920
so how do we do this um

00:01:40,630 --> 00:01:46,240
[Music]

00:01:41,920 --> 00:01:48,960
we host our code in garrett

00:01:46,240 --> 00:01:51,759
we have a ci builder which in our case

00:01:48,960 --> 00:01:51,759
is jenkins

00:01:52,000 --> 00:01:59,119
and well we need something to run tests

00:01:55,520 --> 00:02:02,880
either in virtual machines or

00:01:59,119 --> 00:02:06,159
even better on real hardware

00:02:02,880 --> 00:02:08,479
the catch is that the hardware might be

00:02:06,159 --> 00:02:08,959
in different locations the hardware

00:02:08,479 --> 00:02:12,800
might

00:02:08,959 --> 00:02:14,160
not be publicly available so it's hard

00:02:12,800 --> 00:02:17,680
to come by

00:02:14,160 --> 00:02:21,120
uh some of these boards which is why

00:02:17,680 --> 00:02:22,800
such an automated setup makes it easy

00:02:21,120 --> 00:02:25,520
for developers to get

00:02:22,800 --> 00:02:26,480
feedback on their changes even if they

00:02:25,520 --> 00:02:30,560
do not have

00:02:26,480 --> 00:02:36,560
a zoo of different hardwares

00:02:30,560 --> 00:02:41,440
on their table

00:02:36,560 --> 00:02:45,760
so for the board

00:02:41,440 --> 00:02:45,760
farm management we use lava

00:02:46,560 --> 00:02:54,160
the feedback is then

00:02:50,000 --> 00:02:59,519
kept currently in

00:02:54,160 --> 00:02:59,519
garrett with messages back to garrett

00:03:00,400 --> 00:03:06,879
the initial plan was to use

00:03:03,440 --> 00:03:10,800
the kernel ci web ui and

00:03:06,879 --> 00:03:15,519
extend that with a test tab

00:03:10,800 --> 00:03:15,519
that's work in progress the kernel ci

00:03:15,760 --> 00:03:22,239
web ui is redone so we are waiting for

00:03:18,720 --> 00:03:22,239
the upstream project here

00:03:22,319 --> 00:03:27,120
to be redone so currently we close the

00:03:25,760 --> 00:03:31,280
loop by messaging

00:03:27,120 --> 00:03:34,080
straight to garrett to the developer

00:03:31,280 --> 00:03:35,920
this is how it looks like um we have our

00:03:34,080 --> 00:03:38,480
git repos

00:03:35,920 --> 00:03:39,920
uh the changes get built we host then

00:03:38,480 --> 00:03:42,959
the build artifacts

00:03:39,920 --> 00:03:46,799
and then we trigger a job uh

00:03:42,959 --> 00:03:50,159
through jenkins in the lava lab

00:03:46,799 --> 00:03:54,480
this will then push the job down

00:03:50,159 --> 00:03:56,640
into a worker a slave basically that can

00:03:54,480 --> 00:04:01,680
be multiple

00:03:56,640 --> 00:04:05,280
they are remote they can be distributed

00:04:01,680 --> 00:04:08,159
and then we collect

00:04:05,280 --> 00:04:08,159
the results

00:04:08,640 --> 00:04:15,439
and this gives us the possibility to do

00:04:12,000 --> 00:04:20,000
a fast feedback loop

00:04:15,439 --> 00:04:20,000
for the developers let's take a look

00:04:21,680 --> 00:04:28,720
for garrett we host our

00:04:24,960 --> 00:04:31,280
git repositories there it also provides

00:04:28,720 --> 00:04:34,720
us with a patch review workflow

00:04:31,280 --> 00:04:39,040
and a patch management it has a web ui

00:04:34,720 --> 00:04:41,600
and you can integrate it also with your

00:04:39,040 --> 00:04:41,600
ldap

00:04:41,680 --> 00:04:50,160
we can trigger jobs in jenkins

00:04:45,680 --> 00:04:53,280
so there's the jenkins plug-in to paul

00:04:50,160 --> 00:04:57,840
garrett our server is at the url below

00:04:53,280 --> 00:04:57,840
here gary.automotivelinux.org

00:04:58,560 --> 00:05:05,600
our jenkins is the

00:05:01,919 --> 00:05:08,800
build scheduler ci builder

00:05:05,600 --> 00:05:10,880
it will retrieve the updates from

00:05:08,800 --> 00:05:14,240
garrett will trigger jobs

00:05:10,880 --> 00:05:16,400
we have two main categories one is a

00:05:14,240 --> 00:05:19,759
platform built which builds

00:05:16,400 --> 00:05:23,120
full images and one is an application

00:05:19,759 --> 00:05:26,639
type build which only builds a single

00:05:23,120 --> 00:05:30,080
application which is of course faster

00:05:26,639 --> 00:05:34,560
to give you an idea a full image built

00:05:30,080 --> 00:05:38,160
would take four hours from scratch

00:05:34,560 --> 00:05:42,880
if it's using the cash

00:05:38,160 --> 00:05:45,199
we are down to 45 minutes

00:05:42,880 --> 00:05:46,000
an hour depending on the speed of the

00:05:45,199 --> 00:05:49,199
builder

00:05:46,000 --> 00:05:52,560
it can go further down um

00:05:49,199 --> 00:05:54,960
the best time was like 30 minutes

00:05:52,560 --> 00:05:56,960
but if of course it depends on the size

00:05:54,960 --> 00:05:58,720
of the image

00:05:56,960 --> 00:06:01,120
if you if you have an image with

00:05:58,720 --> 00:06:04,319
chromium in then

00:06:01,120 --> 00:06:06,880
that will take long for example

00:06:04,319 --> 00:06:07,600
now the application jobs they are very

00:06:06,880 --> 00:06:11,280
smaller

00:06:07,600 --> 00:06:14,080
they use the sdk they use a previous you

00:06:11,280 --> 00:06:16,319
previously built image and they only

00:06:14,080 --> 00:06:17,120
built the application in question so the

00:06:16,319 --> 00:06:20,240
build phase

00:06:17,120 --> 00:06:22,479
is a matter of minutes let's say

00:06:20,240 --> 00:06:24,240
5 to 10 minutes and then we have the

00:06:22,479 --> 00:06:29,280
application built and can run

00:06:24,240 --> 00:06:29,280
testing on a previously created

00:06:29,440 --> 00:06:34,160
disk image all that happens on

00:06:32,840 --> 00:06:39,600
build.automotivelinux.org

00:06:34,160 --> 00:06:39,600
and is triggered through garrett

00:06:41,440 --> 00:06:48,479
a platform built as i said is

00:06:44,720 --> 00:06:49,280
a built of whole images it's a whole

00:06:48,479 --> 00:06:54,240
stack of

00:06:49,280 --> 00:06:57,280
yocto layers that we built and

00:06:54,240 --> 00:06:58,720
it takes quite long the shortest path is

00:06:57,280 --> 00:07:02,960
about 30 minutes

00:06:58,720 --> 00:07:05,440
but we have a few images that take

00:07:02,960 --> 00:07:05,440
longer

00:07:10,080 --> 00:07:13,280
we use

00:07:12,080 --> 00:07:16,240
[Music]

00:07:13,280 --> 00:07:17,039
a templating tool called jenkins job

00:07:16,240 --> 00:07:21,440
builder

00:07:17,039 --> 00:07:22,800
which is developed by the openstack

00:07:21,440 --> 00:07:26,720
community

00:07:22,800 --> 00:07:31,280
and with this we do

00:07:26,720 --> 00:07:34,880
statically pre-create our jenkins jobs

00:07:31,280 --> 00:07:39,120
you can also use for example jenkins dsl

00:07:34,880 --> 00:07:39,680
or similar you comparable is also gitlab

00:07:39,120 --> 00:07:44,400
ci

00:07:39,680 --> 00:07:46,879
or whatever other new new ones are there

00:07:44,400 --> 00:07:47,840
downside of jenkins job builder is that

00:07:46,879 --> 00:07:51,360
you

00:07:47,840 --> 00:07:54,639
tend to create a lot of jobs because the

00:07:51,360 --> 00:08:00,160
you basically expand the matrix

00:07:54,639 --> 00:08:04,000
um for for each machine for each branch

00:08:00,160 --> 00:08:04,000
so you create a lot of jobs

00:08:05,199 --> 00:08:10,080
lava is our board farm tool it's

00:08:07,919 --> 00:08:13,280
basically a scheduler

00:08:10,080 --> 00:08:14,080
which allows us to execute tasks either

00:08:13,280 --> 00:08:17,520
on

00:08:14,080 --> 00:08:20,560
real physical board hardware that's uh

00:08:17,520 --> 00:08:24,240
for what is what was made for or

00:08:20,560 --> 00:08:24,240
on a virtual hardware

00:08:24,639 --> 00:08:27,680
it's a board farm board lab management

00:08:27,199 --> 00:08:30,160
tool

00:08:27,680 --> 00:08:32,640
essentially and it splits the workflow

00:08:30,160 --> 00:08:33,680
between the test developer on the one

00:08:32,640 --> 00:08:36,479
side

00:08:33,680 --> 00:08:38,320
the developers on the one side and the

00:08:36,479 --> 00:08:40,959
admins that

00:08:38,320 --> 00:08:43,039
manage data boards the actual physical

00:08:40,959 --> 00:08:47,040
hardware in the lab

00:08:43,039 --> 00:08:51,440
so you basically deal with the boards

00:08:47,040 --> 00:08:54,080
la as if they were servers in iraq

00:08:51,440 --> 00:08:54,880
it has a distributed approach which is

00:08:54,080 --> 00:08:58,000
very

00:08:54,880 --> 00:08:58,959
powerful because you can have remote

00:08:58,000 --> 00:09:01,600
labs

00:08:58,959 --> 00:09:03,519
wherever the boards are and still access

00:09:01,600 --> 00:09:05,360
them

00:09:03,519 --> 00:09:07,839
as i said it takes away the board

00:09:05,360 --> 00:09:09,600
maintenance from the developer tester

00:09:07,839 --> 00:09:12,560
and

00:09:09,600 --> 00:09:15,440
it allows also for easy access of

00:09:12,560 --> 00:09:18,640
multiple developers to

00:09:15,440 --> 00:09:18,640
a development board

00:09:18,880 --> 00:09:25,040
and the

00:09:22,000 --> 00:09:28,320
uh one important feature

00:09:25,040 --> 00:09:28,720
is that it saves you from a lot of the

00:09:28,320 --> 00:09:32,560
sk

00:09:28,720 --> 00:09:35,600
sd card juggling so that will be

00:09:32,560 --> 00:09:36,320
a a good benefit because you can

00:09:35,600 --> 00:09:40,160
actually

00:09:36,320 --> 00:09:42,560
run tests faster

00:09:40,160 --> 00:09:46,640
if you do not need to juggle and write

00:09:42,560 --> 00:09:46,640
out sd cards which takes a long time

00:09:48,839 --> 00:09:55,040
um this is the

00:09:51,760 --> 00:09:57,120
structure basically we host the lava

00:09:55,040 --> 00:10:00,640
master which has the web ui

00:09:57,120 --> 00:10:03,519
which distributes the jobs we have

00:10:00,640 --> 00:10:04,720
workers with the devices under test

00:10:03,519 --> 00:10:08,720
attached

00:10:04,720 --> 00:10:12,240
uh there can be multiple of them and

00:10:08,720 --> 00:10:15,120
yeah that's how they how the

00:10:12,240 --> 00:10:15,120
setup looks like

00:10:15,440 --> 00:10:22,880
now in reality uh things uh

00:10:18,959 --> 00:10:25,279
can then look like this on the left side

00:10:22,880 --> 00:10:27,040
you have here a set of devices under

00:10:25,279 --> 00:10:30,079
test with power control

00:10:27,040 --> 00:10:33,760
serial and network

00:10:30,079 --> 00:10:36,880
and the worker node is up here

00:10:33,760 --> 00:10:36,880
provided by this

00:10:37,360 --> 00:10:42,399
minnow board in this case or

00:10:42,560 --> 00:10:50,160
the larger you get up here in a rack

00:10:47,440 --> 00:10:52,480
with multiple devices under test in a

00:10:50,160 --> 00:10:52,480
stack

00:10:54,160 --> 00:10:57,440
now if you if you are curious how to set

00:10:56,640 --> 00:11:01,279
this up

00:10:57,440 --> 00:11:04,640
uh we use

00:11:01,279 --> 00:11:09,120
lava docker which is developed by the

00:11:04,640 --> 00:11:09,839
kernel ci project this is a dockerized

00:11:09,120 --> 00:11:13,120
version of

00:11:09,839 --> 00:11:16,640
lava so there are two components

00:11:13,120 --> 00:11:19,920
in there one is the master

00:11:16,640 --> 00:11:22,240
and one is the worker and

00:11:19,920 --> 00:11:23,760
on the worker you connect the devices

00:11:22,240 --> 00:11:29,760
under test

00:11:23,760 --> 00:11:32,800
and that is where

00:11:29,760 --> 00:11:36,880
you connect your boards you

00:11:32,800 --> 00:11:40,640
need power control you need

00:11:36,880 --> 00:11:45,200
serial and you need a network

00:11:40,640 --> 00:11:48,800
for network boot you can set up

00:11:45,200 --> 00:11:52,560
things like um sd card

00:11:48,800 --> 00:11:56,639
mixers and so on that is possible

00:11:52,560 --> 00:12:00,399
a little more complicated to wire up

00:11:56,639 --> 00:12:00,399
in the test shop but that's possible

00:12:01,040 --> 00:12:08,000
so if you want to try that at home

00:12:04,800 --> 00:12:11,279
the simplest setup is

00:12:08,000 --> 00:12:15,110
in the readme there with just a master

00:12:11,279 --> 00:12:17,600
a worker and qmo

00:12:15,110 --> 00:12:20,800
[Music]

00:12:17,600 --> 00:12:24,160
in the drake kids jobs we have

00:12:20,800 --> 00:12:25,440
two helpers one is called lava cli which

00:12:24,160 --> 00:12:28,720
is the

00:12:25,440 --> 00:12:32,079
cli tool to connect to the lava

00:12:28,720 --> 00:12:36,560
server and we

00:12:32,079 --> 00:12:36,560
have a little template generator

00:12:36,639 --> 00:12:44,480
in relying scripts so this

00:12:40,000 --> 00:12:47,279
creates jobs um basically using the agl

00:12:44,480 --> 00:12:48,560
urls and using the test description that

00:12:47,279 --> 00:12:52,800
we host

00:12:48,560 --> 00:12:55,519
so in lava we execute

00:12:52,800 --> 00:12:56,240
a set of actions and we host these in

00:12:55,519 --> 00:12:59,360
our

00:12:56,240 --> 00:13:02,079
qa test definitions

00:12:59,360 --> 00:13:03,680
and relink scripts is just a wrapper a

00:13:02,079 --> 00:13:07,040
template generator

00:13:03,680 --> 00:13:08,560
that allows us to generate our ci jobs

00:13:07,040 --> 00:13:11,200
and send them off

00:13:08,560 --> 00:13:11,200
to lava

00:13:11,920 --> 00:13:18,160
so that's a quick intro

00:13:15,120 --> 00:13:22,399
what happens then in lava once

00:13:18,160 --> 00:13:26,000
you send a job is basically lava will

00:13:22,399 --> 00:13:29,200
boot the board to a shell which means

00:13:26,000 --> 00:13:31,680
it needs to power up it needs to

00:13:29,200 --> 00:13:33,839
instruct the bootloader which is usually

00:13:31,680 --> 00:13:37,040
qmo but also can be

00:13:33,839 --> 00:13:40,320
uefi pixi

00:13:37,040 --> 00:13:43,839
fastboot there are a lot of

00:13:40,320 --> 00:13:47,199
options there and

00:13:43,839 --> 00:13:50,480
in the end we need to be able to drive

00:13:47,199 --> 00:13:51,440
the board over the serial connection or

00:13:50,480 --> 00:13:55,040
over ssh

00:13:51,440 --> 00:13:55,440
is also possible basically we can then

00:13:55,040 --> 00:13:58,959
do

00:13:55,440 --> 00:14:01,040
anything that we can drive over a shell

00:13:58,959 --> 00:14:04,399
or terminal

00:14:01,040 --> 00:14:07,519
we can test software components either

00:14:04,399 --> 00:14:10,720
in qmovms we can test

00:14:07,519 --> 00:14:12,959
our software running on a real target

00:14:10,720 --> 00:14:15,600
we can also test peripheral hardware

00:14:12,959 --> 00:14:15,600
components

00:14:15,680 --> 00:14:19,920
with some effort you can also create a

00:14:19,199 --> 00:14:23,279
device

00:14:19,920 --> 00:14:26,320
group and wire up

00:14:23,279 --> 00:14:28,720
a test which means that multiple boards

00:14:26,320 --> 00:14:29,360
do actually boot up and interact with

00:14:28,720 --> 00:14:32,399
each other

00:14:29,360 --> 00:14:32,399
that is possible

00:14:33,279 --> 00:14:41,440
lava is not good for

00:14:38,079 --> 00:14:44,399
uid site tests if you need

00:14:41,440 --> 00:14:46,240
that then go and look at open qa from

00:14:44,399 --> 00:14:50,800
the suse project

00:14:46,240 --> 00:14:55,920
which is there for dealing with

00:14:50,800 --> 00:15:00,639
ui work where you say i need

00:14:55,920 --> 00:15:05,760
this rectangle b look like this

00:15:00,639 --> 00:15:05,760
type of tests

00:15:07,360 --> 00:15:15,680
also we need you we need to contribute

00:15:12,320 --> 00:15:17,120
more lava test definitions to enhance

00:15:15,680 --> 00:15:20,320
the code base

00:15:17,120 --> 00:15:24,160
to make the ucb more

00:15:20,320 --> 00:15:28,399
more stable and we also welcome

00:15:24,160 --> 00:15:32,160
new lava worker labs uh for more boards

00:15:28,399 --> 00:15:35,279
uh for community boards imx8

00:15:32,160 --> 00:15:38,839
for um

00:15:35,279 --> 00:15:41,839
yeah to enhance the the board coverage

00:15:38,839 --> 00:15:41,839
here

00:15:45,839 --> 00:15:53,040
this now brings me to the

00:15:48,959 --> 00:15:56,800
updates on our siat infrastructure

00:15:53,040 --> 00:16:01,920
that happened lately and that will

00:15:56,800 --> 00:16:06,079
show you the progress that we made there

00:16:01,920 --> 00:16:06,079
in the last couple of months

00:16:06,720 --> 00:16:12,880
so we added

00:16:09,839 --> 00:16:16,399
pi hdl pi hl is a pi

00:16:12,880 --> 00:16:17,680
test based test framework it's a new

00:16:16,399 --> 00:16:21,279
test framework

00:16:17,680 --> 00:16:25,279
for the agl services

00:16:21,279 --> 00:16:27,920
it's written in python it's using pi

00:16:25,279 --> 00:16:30,320
tests so it's very simple to develop on

00:16:27,920 --> 00:16:33,440
and very simple to use

00:16:30,320 --> 00:16:37,600
uh for example you can just invoke

00:16:33,440 --> 00:16:40,880
pi agl there are markers

00:16:37,600 --> 00:16:44,079
for example for jobs that that require

00:16:40,880 --> 00:16:47,440
hardware like radio for example

00:16:44,079 --> 00:16:49,839
and those can be excluded if you said

00:16:47,440 --> 00:16:50,800
not hardware required there are tests

00:16:49,839 --> 00:16:52,959
that require

00:16:50,800 --> 00:16:56,079
internet access if that's not the case

00:16:52,959 --> 00:16:59,680
in your test environment you can say

00:16:56,079 --> 00:17:02,720
not internet or you can

00:16:59,680 --> 00:17:05,280
combine both not internet and not

00:17:02,720 --> 00:17:07,120
hardware required so that's pretty

00:17:05,280 --> 00:17:11,919
straightforward to deploy

00:17:07,120 --> 00:17:14,799
and we have this active in ci already

00:17:11,919 --> 00:17:16,160
the tests have been developed by eddie

00:17:14,799 --> 00:17:19,760
and

00:17:16,160 --> 00:17:22,880
the integration has been done by scott

00:17:19,760 --> 00:17:22,880
so kudos to them

00:17:24,160 --> 00:17:31,440
here's an example run i just started up

00:17:28,079 --> 00:17:34,799
a qmo virtual machine i

00:17:31,440 --> 00:17:36,559
limited the ethernet the i limited the

00:17:34,799 --> 00:17:40,080
network interfaces

00:17:36,559 --> 00:17:42,320
to ethernet and then said it's no

00:17:40,080 --> 00:17:44,880
special hardware attached and we

00:17:42,320 --> 00:17:45,760
don't have access to the internet uh

00:17:44,880 --> 00:17:49,679
which rules

00:17:45,760 --> 00:17:52,880
out geo clue and weather

00:17:49,679 --> 00:18:01,520
to some extent as they require

00:17:52,880 --> 00:18:04,960
working network

00:18:01,520 --> 00:18:08,799
the next change that was done was that

00:18:04,960 --> 00:18:11,919
for all the service widgets

00:18:08,799 --> 00:18:15,600
we do now build the

00:18:11,919 --> 00:18:19,520
coverage widget which means we do

00:18:15,600 --> 00:18:20,799
a gcof based instrumentation of the

00:18:19,520 --> 00:18:25,039
service

00:18:20,799 --> 00:18:30,720
and at run time we have a wrapper

00:18:25,039 --> 00:18:33,440
which will produce the coverage data

00:18:30,720 --> 00:18:37,200
installing the widget in question it

00:18:33,440 --> 00:18:41,360
will run the tests and then

00:18:37,200 --> 00:18:44,400
report the coverage of our

00:18:41,360 --> 00:18:47,919
services this is deployed

00:18:44,400 --> 00:18:51,120
in ci and it will report back the lines

00:18:47,919 --> 00:18:51,120
and branch coverage

00:18:51,760 --> 00:18:58,400
of the services

00:18:55,039 --> 00:19:01,760
the heavy lifting was done by scott and

00:18:58,400 --> 00:19:05,360
um yeah we have uh

00:19:01,760 --> 00:19:08,480
also a few more things in

00:19:05,360 --> 00:19:14,000
the pipeline so quarantine

00:19:08,480 --> 00:19:17,120
will add the up square board back

00:19:14,000 --> 00:19:21,200
that means we will boot with

00:19:17,120 --> 00:19:25,360
the qmo artifacts we build x86

00:19:21,200 --> 00:19:28,080
in the through the machine qmo x86

00:19:25,360 --> 00:19:31,440
and the amp square board will have to

00:19:28,080 --> 00:19:31,440
use these artifacts

00:19:32,559 --> 00:19:38,799
also we want to see that the graph

00:19:35,679 --> 00:19:43,120
that the compositor

00:19:38,799 --> 00:19:46,240
runs and we see a home screen

00:19:43,120 --> 00:19:49,760
so always we see a screen

00:19:46,240 --> 00:19:52,960
coming up uh marius is working

00:19:49,760 --> 00:19:57,840
to add a snapshot

00:19:52,960 --> 00:20:00,000
tool and write a comparison test

00:19:57,840 --> 00:20:01,679
so we can actually test that the

00:20:00,000 --> 00:20:06,960
compositor comes up on

00:20:01,679 --> 00:20:10,080
all boards we will not um

00:20:06,960 --> 00:20:12,400
basically test all the ui parts but

00:20:10,080 --> 00:20:14,080
we'll make sure that the compositor is

00:20:12,400 --> 00:20:16,880
up

00:20:14,080 --> 00:20:17,760
and we have more work coming up on

00:20:16,880 --> 00:20:21,360
gitlab

00:20:17,760 --> 00:20:25,600
to extend the mirror to

00:20:21,360 --> 00:20:25,600
allow more features to be used there

00:20:30,240 --> 00:20:36,640
now what's next we also

00:20:33,600 --> 00:20:39,760
will build more images

00:20:36,640 --> 00:20:42,960
so currently the main image is the

00:20:39,760 --> 00:20:45,039
agl demo platform but there is an

00:20:42,960 --> 00:20:48,240
instrument cluster expert group

00:20:45,039 --> 00:20:51,360
and they will define come up with new

00:20:48,240 --> 00:20:55,120
images that use

00:20:51,360 --> 00:20:58,960
containers so there are more

00:20:55,120 --> 00:21:01,360
images that will need to be built

00:20:58,960 --> 00:21:02,480
also in the instrument cluster e3 there

00:21:01,360 --> 00:21:07,039
are requirements

00:21:02,480 --> 00:21:10,640
to do static code analysis to do

00:21:07,039 --> 00:21:16,320
linting on the recipes so there is

00:21:10,640 --> 00:21:19,600
more coming on that front um

00:21:16,320 --> 00:21:22,799
will have new hardware being added

00:21:19,600 --> 00:21:26,159
so the agl reference

00:21:22,799 --> 00:21:29,280
hardware has been

00:21:26,159 --> 00:21:32,480
shipped and the

00:21:29,280 --> 00:21:36,400
board that you see here is now

00:21:32,480 --> 00:21:38,720
available we'll put it into ci

00:21:36,400 --> 00:21:38,720
and

00:21:39,440 --> 00:21:46,559
we'll also research ways how to

00:21:42,799 --> 00:21:48,720
easily allow remote access to the boards

00:21:46,559 --> 00:21:52,080
in the farm

00:21:48,720 --> 00:21:55,679
there are also experiments

00:21:52,080 --> 00:21:59,360
being done how to enable a video capture

00:21:55,679 --> 00:22:02,240
so we can actually

00:21:59,360 --> 00:22:04,080
take a closer look at what the boards

00:22:02,240 --> 00:22:13,840
actually

00:22:04,080 --> 00:22:13,840
display and make that easily available

00:22:14,880 --> 00:22:19,570
now what infra updates are there

00:22:18,640 --> 00:22:21,919
so

00:22:19,570 --> 00:22:25,440
[Music]

00:22:21,919 --> 00:22:30,240
we have now a gitlab mirror

00:22:25,440 --> 00:22:33,280
available and the that is on gitlab.com

00:22:30,240 --> 00:22:37,280
automotive great linux currently we

00:22:33,280 --> 00:22:40,240
mirror all our sources there and

00:22:37,280 --> 00:22:41,840
the first step is to provide a way to

00:22:40,240 --> 00:22:45,520
easily switch

00:22:41,840 --> 00:22:47,600
the source uris between garrett and the

00:22:45,520 --> 00:22:52,000
mirror

00:22:47,600 --> 00:22:52,000
to provide additional redundancy

00:22:53,039 --> 00:22:58,320
and allow further development here

00:22:59,679 --> 00:23:08,480
also um we

00:23:02,720 --> 00:23:12,320
have done a larger

00:23:08,480 --> 00:23:15,440
rework of our dock site

00:23:12,320 --> 00:23:19,200
shankar born gosh

00:23:15,440 --> 00:23:22,640
was our google season of dogs

00:23:19,200 --> 00:23:26,320
intern and he reworked the

00:23:22,640 --> 00:23:29,840
the documentation site um

00:23:26,320 --> 00:23:32,960
now it's all in one git repo and

00:23:29,840 --> 00:23:36,559
the rendering is done by read the docs

00:23:32,960 --> 00:23:39,039
so that's easy um to

00:23:36,559 --> 00:23:39,039
update

00:23:39,840 --> 00:23:47,200
check out the new dock site and there's

00:23:42,640 --> 00:23:47,200
a guide how to add new documentation

00:23:48,840 --> 00:23:51,840
there

00:23:53,039 --> 00:23:56,880
thanks for joining i will be available

00:23:55,760 --> 00:24:00,320
for

00:23:56,880 --> 00:24:04,159
questions in the chat

00:24:00,320 --> 00:24:07,679
and online

00:24:04,159 --> 00:24:09,760
the conference and we welcome your

00:24:07,679 --> 00:24:19,840
contributions to agl

00:24:09,760 --> 00:24:19,840
thank you

00:24:26,159 --> 00:24:28,240

YouTube URL: https://www.youtube.com/watch?v=O6UsEPsfp8k


