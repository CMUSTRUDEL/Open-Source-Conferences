Title: Knative: A Kubernetes Framework to Manage Serverless Workloads - Nikhil Barthwal, Google
Publication date: 2020-12-04
Playlist: Open Source Summit Japan & Automotive Linux Summit 2020
Description: 
	Knative: A Kubernetes Framework to Manage Serverless Workloads - Nikhil Barthwal, Google
Captions: 
	00:00:04,880 --> 00:00:07,520
hi everyone uh my name is nikhil

00:00:06,720 --> 00:00:09,200
berthwal

00:00:07,520 --> 00:00:11,200
and i'm going to be talking about k

00:00:09,200 --> 00:00:13,679
native which is a kubernetes framework

00:00:11,200 --> 00:00:15,679
to manage serverless workloads now

00:00:13,679 --> 00:00:18,320
the way i have structured this talk is i

00:00:15,679 --> 00:00:22,000
have some slides and i have some demo

00:00:18,320 --> 00:00:23,760
i have about 15 minutes slot so

00:00:22,000 --> 00:00:25,599
half a little more than half i'll cover

00:00:23,760 --> 00:00:27,599
the slides and

00:00:25,599 --> 00:00:29,359
then i'll have the demo the demo itself

00:00:27,599 --> 00:00:31,519
is quite big

00:00:29,359 --> 00:00:33,360
so i won't be able to cover all of it

00:00:31,519 --> 00:00:33,680
i'll just be able to cover part of it

00:00:33,360 --> 00:00:36,640
but

00:00:33,680 --> 00:00:37,200
you have to link here so you're welcome

00:00:36,640 --> 00:00:39,120
to

00:00:37,200 --> 00:00:41,280
clone the repository and play on your

00:00:39,120 --> 00:00:43,920
own spare time

00:00:41,280 --> 00:00:46,320
okay so without much delay let's get

00:00:43,920 --> 00:00:49,360
started

00:00:46,320 --> 00:00:50,800
um okay so so let me start with

00:00:49,360 --> 00:00:52,239
introduction to knitting what is k

00:00:50,800 --> 00:00:55,440
native

00:00:52,239 --> 00:00:57,120
as mentioned k native is a kubernetes

00:00:55,440 --> 00:00:59,520
based open source building blocks for

00:00:57,120 --> 00:01:01,359
serverless now what do we mean by that

00:00:59,520 --> 00:01:03,600
kubernetes is essentially and i won't go

00:01:01,359 --> 00:01:05,519
into details of kubernetes is a platform

00:01:03,600 --> 00:01:07,600
to build platforms right

00:01:05,519 --> 00:01:08,960
so it's a great starting point but it's

00:01:07,600 --> 00:01:12,720
never the end goal and k

00:01:08,960 --> 00:01:14,000
native is a serverless platform built on

00:01:12,720 --> 00:01:16,240
top of kubernetes

00:01:14,000 --> 00:01:17,600
and and this is a simplified view i'm

00:01:16,240 --> 00:01:19,200
actually going to give you a stack of

00:01:17,600 --> 00:01:21,520
how the technology stack is laid off

00:01:19,200 --> 00:01:24,640
this stuff in between the stuff on top

00:01:21,520 --> 00:01:27,360
and so on and it provides you

00:01:24,640 --> 00:01:29,200
the basic building blocks for serverless

00:01:27,360 --> 00:01:30,640
so there's this repetitive stuff that

00:01:29,200 --> 00:01:31,840
you don't have to do again and again

00:01:30,640 --> 00:01:34,079
it's all

00:01:31,840 --> 00:01:35,520
available to you in a packaged form and

00:01:34,079 --> 00:01:37,759
again we'll see what those building

00:01:35,520 --> 00:01:40,799
blocks are in a short while

00:01:37,759 --> 00:01:43,200
so let me start with kubernetes uh

00:01:40,799 --> 00:01:44,000
again kubernetes is a big topic but

00:01:43,200 --> 00:01:46,799
basically

00:01:44,000 --> 00:01:48,799
in a very uh small nutshell what

00:01:46,799 --> 00:01:50,479
kubernetes is it's the descriptive way

00:01:48,799 --> 00:01:51,600
to describe your system state right so

00:01:50,479 --> 00:01:53,200
you describe

00:01:51,600 --> 00:01:55,360
your system's desired state and

00:01:53,200 --> 00:01:57,360
kubernetes is basically a platform that

00:01:55,360 --> 00:01:58,719
would basically manage to make sure that

00:01:57,360 --> 00:01:59,920
state is achieved and whenever it's

00:01:58,719 --> 00:02:04,159
deviated it

00:01:59,920 --> 00:02:07,200
restores that state it's pretty popular

00:02:04,159 --> 00:02:09,039
and you know i could just give you

00:02:07,200 --> 00:02:11,200
talk for hours and hours on kubernetes

00:02:09,039 --> 00:02:13,360
but i'll spare that for now

00:02:11,200 --> 00:02:14,879
but essentially what supernitis does is

00:02:13,360 --> 00:02:16,560
there's a bunch of stuff that does it

00:02:14,879 --> 00:02:19,520
does scheduling life skill

00:02:16,560 --> 00:02:20,560
or scaling load balancing such and such

00:02:19,520 --> 00:02:22,319
so it's

00:02:20,560 --> 00:02:23,599
it's handling all of those things

00:02:22,319 --> 00:02:26,720
underneath

00:02:23,599 --> 00:02:28,720
think of it as an operating system for

00:02:26,720 --> 00:02:30,160
your database or operating sorry not

00:02:28,720 --> 00:02:31,760
database a data center

00:02:30,160 --> 00:02:33,040
or operating system for your cluster

00:02:31,760 --> 00:02:34,560
right you have bunch of machines you

00:02:33,040 --> 00:02:37,440
have parts you have containers running

00:02:34,560 --> 00:02:39,680
on those pods so it handles all of that

00:02:37,440 --> 00:02:42,400
underlying stuff in it

00:02:39,680 --> 00:02:44,319
and it's available for wide variety of

00:02:42,400 --> 00:02:46,239
platforms so when i say de facto it's

00:02:44,319 --> 00:02:49,200
probably by far the most

00:02:46,239 --> 00:02:50,640
popular container orchestration system

00:02:49,200 --> 00:02:53,040
you know it has a huge

00:02:50,640 --> 00:02:54,239
uh ecosystem you have the it's fully

00:02:53,040 --> 00:02:55,840
open source you have the basic

00:02:54,239 --> 00:02:57,680
kubernetes and then

00:02:55,840 --> 00:02:58,959
you have these flavored kubernetes so if

00:02:57,680 --> 00:03:01,440
you go to azure you have azure

00:02:58,959 --> 00:03:04,400
kubernetes service google has gk google

00:03:01,440 --> 00:03:04,400
kubernetes engine

00:03:04,720 --> 00:03:08,720
amazon i believe has eks elastic

00:03:06,959 --> 00:03:10,480
kubernetes service so they basically

00:03:08,720 --> 00:03:12,480
have their own little bit of

00:03:10,480 --> 00:03:14,319
vendor-specific managed framework or you

00:03:12,480 --> 00:03:17,040
can use the plain manila kubernetes like

00:03:14,319 --> 00:03:19,280
i said it's open source

00:03:17,040 --> 00:03:22,159
but it's essentially a wide variety of

00:03:19,280 --> 00:03:24,000
platform a wide it's widely available on

00:03:22,159 --> 00:03:26,159
all major cloud platforms and you can

00:03:24,000 --> 00:03:27,760
have like a on your own private data

00:03:26,159 --> 00:03:30,239
center everything so it's it's kind of

00:03:27,760 --> 00:03:33,840
like a very popular de facto system

00:03:30,239 --> 00:03:36,080
to run your workloads so now that we

00:03:33,840 --> 00:03:39,280
have talked about kubernetes

00:03:36,080 --> 00:03:41,599
uh let's let's switch gears and let's

00:03:39,280 --> 00:03:44,319
talk a little bit about

00:03:41,599 --> 00:03:45,440
serverless model now what do we mean by

00:03:44,319 --> 00:03:47,519
serverless

00:03:45,440 --> 00:03:49,200
okay so let's actually define serverless

00:03:47,519 --> 00:03:52,879
now

00:03:49,200 --> 00:03:55,120
in kubernetes there are two

00:03:52,879 --> 00:03:55,920
distinct categories of users right there

00:03:55,120 --> 00:03:59,200
the operators

00:03:55,920 --> 00:04:00,480
are basically devops sre or whatever you

00:03:59,200 --> 00:04:02,640
like to call them

00:04:00,480 --> 00:04:04,000
who are handling the infrastructure and

00:04:02,640 --> 00:04:05,439
then there are developers who are

00:04:04,000 --> 00:04:07,439
running the application or developing

00:04:05,439 --> 00:04:10,239
the application and running on top of it

00:04:07,439 --> 00:04:11,760
right so let me differentiate these two

00:04:10,239 --> 00:04:13,439
categories and we'll talk about these

00:04:11,760 --> 00:04:15,200
two characters separately so we have the

00:04:13,439 --> 00:04:17,040
operational model of serverless and what

00:04:15,200 --> 00:04:20,320
is operational model of serverless

00:04:17,040 --> 00:04:22,960
for operators what k native gives you

00:04:20,320 --> 00:04:24,639
it it gives you no infra management

00:04:22,960 --> 00:04:25,280
right so it's automatically handled like

00:04:24,639 --> 00:04:27,680
i said

00:04:25,280 --> 00:04:29,360
it's serverless it auto scales all the

00:04:27,680 --> 00:04:31,360
nice properties of serverless will talk

00:04:29,360 --> 00:04:33,199
about what those properties are

00:04:31,360 --> 00:04:35,120
so it gives you a way to handle your

00:04:33,199 --> 00:04:38,000
infrastructure

00:04:35,120 --> 00:04:39,600
right manage security security is

00:04:38,000 --> 00:04:41,520
automatically managed for you so you

00:04:39,600 --> 00:04:43,840
don't have to worry about it and

00:04:41,520 --> 00:04:45,600
by far the most common use by far the

00:04:43,840 --> 00:04:47,759
best thing about serverless

00:04:45,600 --> 00:04:49,600
you pay for the usage you don't pay for

00:04:47,759 --> 00:04:52,160
the capacity right in a typical

00:04:49,600 --> 00:04:54,960
my container based service you basically

00:04:52,160 --> 00:04:56,160
host a container even if nobody's using

00:04:54,960 --> 00:04:58,400
you're still paying for it so you're

00:04:56,160 --> 00:05:00,160
paying actually for the capacity that

00:04:58,400 --> 00:05:02,240
you've allocated on the cloud and not

00:05:00,160 --> 00:05:04,080
actual usage where it's here you

00:05:02,240 --> 00:05:06,479
actually pay for the usage and what that

00:05:04,080 --> 00:05:08,320
means is auto scaling up and down

00:05:06,479 --> 00:05:10,000
for you we'll have some examples and

00:05:08,320 --> 00:05:11,840
depending on the time i might

00:05:10,000 --> 00:05:14,880
have a something on the demo also to

00:05:11,840 --> 00:05:16,960
show what that means

00:05:14,880 --> 00:05:18,639
so that's the programming model for it

00:05:16,960 --> 00:05:20,960
right serverless is basically an

00:05:18,639 --> 00:05:23,039
event-driven platform you have events

00:05:20,960 --> 00:05:24,960
every time a state of the system changes

00:05:23,039 --> 00:05:27,600
it generates an event

00:05:24,960 --> 00:05:30,320
and you know you have these services

00:05:27,600 --> 00:05:32,720
these services respond to these events

00:05:30,320 --> 00:05:34,320
and lastly it's kind of portable now

00:05:32,720 --> 00:05:35,520
here i want to mention a little bit

00:05:34,320 --> 00:05:37,039
about what

00:05:35,520 --> 00:05:39,520
expand a little bit about what do i mean

00:05:37,039 --> 00:05:41,039
by portable now

00:05:39,520 --> 00:05:42,880
most of the serverless and this is a

00:05:41,039 --> 00:05:45,440
common criticism of

00:05:42,880 --> 00:05:47,440
serverless computing is that you have a

00:05:45,440 --> 00:05:50,000
little bit of window locking

00:05:47,440 --> 00:05:51,759
so you know if you're using aws lambda

00:05:50,000 --> 00:05:53,520
you want to port that system to say

00:05:51,759 --> 00:05:54,479
azure functions or google cloud

00:05:53,520 --> 00:05:56,560
functions

00:05:54,479 --> 00:05:58,479
it's not like one-on-one simple right

00:05:56,560 --> 00:06:01,120
you might have to implement parts of

00:05:58,479 --> 00:06:02,800
it the thing about serverless is that

00:06:01,120 --> 00:06:04,560
it's handling all the infrastructure

00:06:02,800 --> 00:06:07,520
automatically for you

00:06:04,560 --> 00:06:08,400
which is great but then understand the

00:06:07,520 --> 00:06:10,800
fact

00:06:08,400 --> 00:06:12,479
that because all that infrastructure is

00:06:10,800 --> 00:06:13,600
automatically handled for you whatever

00:06:12,479 --> 00:06:15,600
programming you're doing on that

00:06:13,600 --> 00:06:16,880
serverless platform is tied very closely

00:06:15,600 --> 00:06:18,319
to that infrastructure or that

00:06:16,880 --> 00:06:20,160
underlying infrastructure

00:06:18,319 --> 00:06:22,479
so when you move from that cloud when

00:06:20,160 --> 00:06:24,240
you move from aws to google cloud or

00:06:22,479 --> 00:06:26,000
vice versa

00:06:24,240 --> 00:06:27,759
because your underlying infrastructure

00:06:26,000 --> 00:06:29,440
has changed

00:06:27,759 --> 00:06:30,880
right your program model actually kind

00:06:29,440 --> 00:06:32,479
of changes a little bit because

00:06:30,880 --> 00:06:34,160
you're tied for it right google has his

00:06:32,479 --> 00:06:36,000
own way of doing things that

00:06:34,160 --> 00:06:37,280
amazon has and they're different

00:06:36,000 --> 00:06:39,360
platforms

00:06:37,280 --> 00:06:40,880
so one of the common criticisms of

00:06:39,360 --> 00:06:44,000
serverless is

00:06:40,880 --> 00:06:46,319
that it locks you into vendor but

00:06:44,000 --> 00:06:48,000
advantage of knight away it doesn't now

00:06:46,319 --> 00:06:51,120
it does lock you to kubernetes

00:06:48,000 --> 00:06:52,800
yes so it's it has to lock to something

00:06:51,120 --> 00:06:54,960
so it does lock you to kubernetes but it

00:06:52,800 --> 00:06:56,720
does not lock you to a particular vendor

00:06:54,960 --> 00:06:58,080
the good thing about kubernetes like i

00:06:56,720 --> 00:07:01,039
mentioned

00:06:58,080 --> 00:07:02,000
is that it's wide it's widely available

00:07:01,039 --> 00:07:05,599
on all major cloud

00:07:02,000 --> 00:07:07,120
platforms so you don't really have to

00:07:05,599 --> 00:07:08,880
worry about oh my god i'm going to move

00:07:07,120 --> 00:07:09,639
to this cloud do they have kubernetes

00:07:08,880 --> 00:07:12,240
well

00:07:09,639 --> 00:07:13,840
99.999 person they would at least all

00:07:12,240 --> 00:07:16,000
major ones do have

00:07:13,840 --> 00:07:17,840
so once you're locked to kubernetes

00:07:16,000 --> 00:07:19,360
actually and that's a de facto platform

00:07:17,840 --> 00:07:21,120
pretty much available everywhere you

00:07:19,360 --> 00:07:22,960
kind of have a system that is portable

00:07:21,120 --> 00:07:24,639
and this is very unique about k native

00:07:22,960 --> 00:07:26,639
that is not true for

00:07:24,639 --> 00:07:28,240
this lambda that is not true for azure

00:07:26,639 --> 00:07:30,000
functions

00:07:28,240 --> 00:07:31,599
so that's why i wanted to expand a

00:07:30,000 --> 00:07:34,720
little bit about portability

00:07:31,599 --> 00:07:37,039
okay so moving on so we have talked

00:07:34,720 --> 00:07:39,680
about service based systems what is

00:07:37,039 --> 00:07:40,880
what is services where are they hosted

00:07:39,680 --> 00:07:42,319
it turns out they're hosted in

00:07:40,880 --> 00:07:44,879
containers

00:07:42,319 --> 00:07:46,800
uh i again i don't want to talk too much

00:07:44,879 --> 00:07:47,520
about containers it's a widely available

00:07:46,800 --> 00:07:49,360
technology

00:07:47,520 --> 00:07:51,520
i believe most of you would be familiar

00:07:49,360 --> 00:07:54,080
with it anyway

00:07:51,520 --> 00:07:55,520
but containers are basically uh in a

00:07:54,080 --> 00:07:58,720
nutshell

00:07:55,520 --> 00:08:00,400
a way of packaging your code uh

00:07:58,720 --> 00:08:02,319
it's kind of think of it as a mini

00:08:00,400 --> 00:08:02,879
virtual machine you have base images

00:08:02,319 --> 00:08:04,960
like you have

00:08:02,879 --> 00:08:06,879
images for asp.net your ranges for

00:08:04,960 --> 00:08:08,639
python you have a whole variety of base

00:08:06,879 --> 00:08:10,319
images available

00:08:08,639 --> 00:08:12,720
and then you can just pretty much for

00:08:10,319 --> 00:08:14,400
any library you you have a docker file

00:08:12,720 --> 00:08:16,639
you would just build that container

00:08:14,400 --> 00:08:19,759
package it and you can deploy it

00:08:16,639 --> 00:08:23,039
and the advantage of container is

00:08:19,759 --> 00:08:25,120
that it's self-contained system okay

00:08:23,039 --> 00:08:26,960
and that's important because especially

00:08:25,120 --> 00:08:27,840
for portability reasons now what happens

00:08:26,960 --> 00:08:29,520
is

00:08:27,840 --> 00:08:31,360
let's say i develop an application i

00:08:29,520 --> 00:08:32,800
test it on my local machine everything

00:08:31,360 --> 00:08:34,159
works i deploy it to the cloud it

00:08:32,800 --> 00:08:36,000
doesn't work why

00:08:34,159 --> 00:08:37,519
because your application is running on

00:08:36,000 --> 00:08:40,159
the environment right

00:08:37,519 --> 00:08:42,000
and the environment changed so there

00:08:40,159 --> 00:08:43,360
might be parts of it that are dependent

00:08:42,000 --> 00:08:44,560
on the environment and when the

00:08:43,360 --> 00:08:46,399
environment changed

00:08:44,560 --> 00:08:48,240
application behaved in a different way

00:08:46,399 --> 00:08:51,680
of an unexpected way this is

00:08:48,240 --> 00:08:53,600
a problem generally a common problem

00:08:51,680 --> 00:08:55,360
but the good thing about container is

00:08:53,600 --> 00:08:58,240
that it's a self-contained unit

00:08:55,360 --> 00:08:59,680
right so if i develop locally i develop

00:08:58,240 --> 00:09:01,279
a container i test it

00:08:59,680 --> 00:09:03,279
and then i put it in the cloud the

00:09:01,279 --> 00:09:05,440
entire environment needed for that

00:09:03,279 --> 00:09:07,680
application goes with it

00:09:05,440 --> 00:09:08,959
so it gives me a lot more confidence

00:09:07,680 --> 00:09:10,800
that whatever

00:09:08,959 --> 00:09:12,480
whatever happens locally on my local

00:09:10,800 --> 00:09:14,640
testing it's probably going to behave

00:09:12,480 --> 00:09:18,000
the same way in the cloud

00:09:14,640 --> 00:09:19,600
and the second thing is that containers

00:09:18,000 --> 00:09:21,519
and we'll talk about this in the next

00:09:19,600 --> 00:09:23,680
slide are an industry standard right

00:09:21,519 --> 00:09:25,680
and there's a trend here that how the

00:09:23,680 --> 00:09:27,360
container usage is growing

00:09:25,680 --> 00:09:29,600
container is an industry standard so

00:09:27,360 --> 00:09:31,519
like kubernetes practically every cloud

00:09:29,600 --> 00:09:32,640
would give you some way of running that

00:09:31,519 --> 00:09:34,399
container

00:09:32,640 --> 00:09:36,000
so again i'm not logged into a

00:09:34,399 --> 00:09:38,480
particular vendor right i i

00:09:36,000 --> 00:09:40,880
developed this application i packaged in

00:09:38,480 --> 00:09:43,279
a container i tested on my local machine

00:09:40,880 --> 00:09:44,959
it works great this application plus the

00:09:43,279 --> 00:09:48,720
environment the entire thing goes

00:09:44,959 --> 00:09:50,720
to say google cloud run in google cloud

00:09:48,720 --> 00:09:52,399
for some reason i decided i'm going to

00:09:50,720 --> 00:09:53,440
move to amazon okay i take this

00:09:52,399 --> 00:09:56,240
container i

00:09:53,440 --> 00:09:57,120
move it to amazon cloud aws i take it to

00:09:56,240 --> 00:09:58,800
azure

00:09:57,120 --> 00:10:00,240
this whole self-contained unit you can

00:09:58,800 --> 00:10:02,399
just treat it as one unit and you can

00:10:00,240 --> 00:10:05,839
take it anywhere in an entire runtime

00:10:02,399 --> 00:10:07,680
of your application is packaged with it

00:10:05,839 --> 00:10:10,000
goes together so you have no unexpected

00:10:07,680 --> 00:10:14,160
surprises so that's a big thing

00:10:10,000 --> 00:10:16,079
about containers and it ties back to

00:10:14,160 --> 00:10:17,200
to basically the portability aspect of

00:10:16,079 --> 00:10:20,880
serverless

00:10:17,200 --> 00:10:22,959
now here um

00:10:20,880 --> 00:10:24,240
with context of keynative and context of

00:10:22,959 --> 00:10:27,200
this stock

00:10:24,240 --> 00:10:28,800
basically when i say services i'm

00:10:27,200 --> 00:10:30,560
basically talking about these services

00:10:28,800 --> 00:10:32,160
packaged in containers now the common

00:10:30,560 --> 00:10:35,120
terminology in serverless

00:10:32,160 --> 00:10:36,000
functions but just fyi i'm actually

00:10:35,120 --> 00:10:38,160
going to be using

00:10:36,000 --> 00:10:40,240
functions and services interchangeably

00:10:38,160 --> 00:10:42,160
so whenever you hear me saying function

00:10:40,240 --> 00:10:44,160
services think of them as functions

00:10:42,160 --> 00:10:46,399
right because server is traditionally

00:10:44,160 --> 00:10:47,360
started as set off functions responding

00:10:46,399 --> 00:10:49,839
to events but

00:10:47,360 --> 00:10:51,200
basically it's the same thing set of

00:10:49,839 --> 00:10:54,480
services set of functions

00:10:51,200 --> 00:10:56,480
so what you basically have here is

00:10:54,480 --> 00:10:58,800
that you have these serverless

00:10:56,480 --> 00:11:01,279
containers right so instead of say if

00:10:58,800 --> 00:11:02,800
you're using aws lambda you have these

00:11:01,279 --> 00:11:03,839
functions replace those functions with

00:11:02,800 --> 00:11:05,920
containers

00:11:03,839 --> 00:11:07,680
you have these containers that are

00:11:05,920 --> 00:11:09,680
behaving in a serverless way so they get

00:11:07,680 --> 00:11:11,680
auto scale they switch up switch down

00:11:09,680 --> 00:11:13,279
scale up scale down whichever you want

00:11:11,680 --> 00:11:14,160
if you're not using it they scale down

00:11:13,279 --> 00:11:16,480
to zero

00:11:14,160 --> 00:11:19,120
or some warm minimum instances that

00:11:16,480 --> 00:11:22,480
you're running we'll talk about that

00:11:19,120 --> 00:11:23,680
anyway so now let's let's get back to k

00:11:22,480 --> 00:11:25,200
native we have talked about the

00:11:23,680 --> 00:11:27,600
underlying technologies which is

00:11:25,200 --> 00:11:30,640
essentially kubernetes and containers

00:11:27,600 --> 00:11:34,320
the key things that we need for k native

00:11:30,640 --> 00:11:37,360
so k native basically is set off uh

00:11:34,320 --> 00:11:39,519
now to previously three components

00:11:37,360 --> 00:11:41,279
serving eventing and build and if you

00:11:39,519 --> 00:11:41,760
notice i'm actually gonna cross the

00:11:41,279 --> 00:11:43,279
build

00:11:41,760 --> 00:11:45,120
and the reason why i've crossed the

00:11:43,279 --> 00:11:46,959
build is because

00:11:45,120 --> 00:11:48,720
build was present in the earlier

00:11:46,959 --> 00:11:50,560
versions of k native it has now been

00:11:48,720 --> 00:11:52,320
deprecated and has been replaced by

00:11:50,560 --> 00:11:54,399
tecton which is a different project

00:11:52,320 --> 00:11:57,279
altogether

00:11:54,399 --> 00:11:59,920
in a nutshell serving is essentially a

00:11:57,279 --> 00:12:01,760
component that routes your traffic it's

00:11:59,920 --> 00:12:03,120
it it routes your traffic and handles

00:12:01,760 --> 00:12:05,839
all the routing

00:12:03,120 --> 00:12:07,760
um the scaling of your containers up and

00:12:05,839 --> 00:12:09,120
down scaled down to zeros all handled by

00:12:07,760 --> 00:12:12,240
serving component

00:12:09,120 --> 00:12:14,079
eventing is basically a framework for

00:12:12,240 --> 00:12:15,760
managing events because remember it's an

00:12:14,079 --> 00:12:17,760
event-driven service you have events

00:12:15,760 --> 00:12:21,360
that systems respond to

00:12:17,760 --> 00:12:23,519
and build was essentially a way

00:12:21,360 --> 00:12:25,200
to deploy your code to these containers

00:12:23,519 --> 00:12:27,600
now build has been duplicated

00:12:25,200 --> 00:12:29,440
with techton uh which is a whole

00:12:27,600 --> 00:12:30,639
different project that i would not want

00:12:29,440 --> 00:12:32,480
to talk about because i don't want to

00:12:30,639 --> 00:12:34,079
digress through tecton but again tecton

00:12:32,480 --> 00:12:36,160
is another interesting open source

00:12:34,079 --> 00:12:37,839
project you could go to

00:12:36,160 --> 00:12:39,760
it's completely open source you can

00:12:37,839 --> 00:12:41,200
search around on the web you'll find a

00:12:39,760 --> 00:12:44,560
lot of links to teclon

00:12:41,200 --> 00:12:46,560
and the code essentially it is a way it

00:12:44,560 --> 00:12:48,480
is basically a serverless build system

00:12:46,560 --> 00:12:50,880
think of it that you know you have these

00:12:48,480 --> 00:12:52,399
builds done in the containers and pay as

00:12:50,880 --> 00:12:54,240
you go same model

00:12:52,399 --> 00:12:57,040
that when i'm not using i scale down my

00:12:54,240 --> 00:12:59,200
agents i mean traditionally what happens

00:12:57,040 --> 00:13:01,200
with common ci systems like jenkins is

00:12:59,200 --> 00:13:03,120
that you have like these jenkins master

00:13:01,200 --> 00:13:03,760
and then you have these agents or slaves

00:13:03,120 --> 00:13:05,600
right

00:13:03,760 --> 00:13:07,040
and the slaves are running all the time

00:13:05,600 --> 00:13:09,120
whether you use them or not

00:13:07,040 --> 00:13:12,079
and that's a wastage of resources so now

00:13:09,120 --> 00:13:12,399
what jenkins and techton and all these

00:13:12,079 --> 00:13:14,000
do

00:13:12,399 --> 00:13:15,519
is they say okay fine we'll switch on

00:13:14,000 --> 00:13:16,720
the slaves when you need it and switch

00:13:15,519 --> 00:13:18,000
them down

00:13:16,720 --> 00:13:19,839
when you don't need it so kind of

00:13:18,000 --> 00:13:21,760
serverless kind of computing

00:13:19,839 --> 00:13:23,839
applied to ci cd build that's what

00:13:21,760 --> 00:13:26,399
techtron project is

00:13:23,839 --> 00:13:27,920
so coming back to k native k native has

00:13:26,399 --> 00:13:30,959
all the ingredients for

00:13:27,920 --> 00:13:33,440
serverless computing and you know solves

00:13:30,959 --> 00:13:35,120
modern development patterns now what the

00:13:33,440 --> 00:13:36,639
way k native started was it was

00:13:35,120 --> 00:13:38,240
basically an insult

00:13:36,639 --> 00:13:40,560
industry consortium between google

00:13:38,240 --> 00:13:42,079
pivotal red hat sap ibm

00:13:40,560 --> 00:13:44,639
to start with and now you have a lot of

00:13:42,079 --> 00:13:46,240
other partners right so all these

00:13:44,639 --> 00:13:48,720
all these big companies they came

00:13:46,240 --> 00:13:50,160
together they kind of

00:13:48,720 --> 00:13:51,680
they kind of had interesting learnings

00:13:50,160 --> 00:13:53,600
from their practical and all of that

00:13:51,680 --> 00:13:54,800
goes into k native so it's actually well

00:13:53,600 --> 00:13:57,360
tested

00:13:54,800 --> 00:13:58,959
it it it is pretty awesome we will see

00:13:57,360 --> 00:14:02,639
in the demo how it works

00:13:58,959 --> 00:14:05,600
uh there's a website knative.dev so um

00:14:02,639 --> 00:14:08,399
let's see very briefly i'll just go to

00:14:05,600 --> 00:14:11,600
the website my chrome browser is open

00:14:08,399 --> 00:14:13,600
k native.dev so that's the website

00:14:11,600 --> 00:14:15,440
and like i mentioned it's an open source

00:14:13,600 --> 00:14:17,519
project so you can go to the

00:14:15,440 --> 00:14:20,000
github and you have eventing you have

00:14:17,519 --> 00:14:22,560
docs you have the major components

00:14:20,000 --> 00:14:23,680
uh okay so let's actually move back to

00:14:22,560 --> 00:14:26,800
the slides so that's

00:14:23,680 --> 00:14:29,360
gay native so what was the motivation

00:14:26,800 --> 00:14:32,959
for canada

00:14:29,360 --> 00:14:34,959
essentially when you look at uh

00:14:32,959 --> 00:14:36,639
you know there's always a little bit of

00:14:34,959 --> 00:14:37,440
tension between the operators and

00:14:36,639 --> 00:14:40,720
developers

00:14:37,440 --> 00:14:42,240
or between sres and developers

00:14:40,720 --> 00:14:45,360
and this exists everywhere it's not

00:14:42,240 --> 00:14:47,279
specific to k native and the reason is

00:14:45,360 --> 00:14:48,880
for developers the motivation is they

00:14:47,279 --> 00:14:49,199
want to build new features they want to

00:14:48,880 --> 00:14:51,120
ship

00:14:49,199 --> 00:14:52,800
code they want to have new capabilities

00:14:51,120 --> 00:14:57,040
great

00:14:52,800 --> 00:14:58,000
but sres are operators basically want

00:14:57,040 --> 00:15:00,160
stability so they

00:14:58,000 --> 00:15:01,920
don't want to churn too much of change

00:15:00,160 --> 00:15:03,440
because when you when you introduce too

00:15:01,920 --> 00:15:05,360
many changes right

00:15:03,440 --> 00:15:07,040
you are introducing destabilizing the

00:15:05,360 --> 00:15:08,639
system a little bit you are introducing

00:15:07,040 --> 00:15:11,600
the possibility

00:15:08,639 --> 00:15:12,480
of something breaking so to keep the

00:15:11,600 --> 00:15:14,959
system

00:15:12,480 --> 00:15:16,639
stable the operator would always want

00:15:14,959 --> 00:15:18,720
you to release code

00:15:16,639 --> 00:15:20,800
slowly and slowly in parts you know

00:15:18,720 --> 00:15:22,720
partial rollout etc whereas developer

00:15:20,800 --> 00:15:24,480
always wants to release the code as fast

00:15:22,720 --> 00:15:25,120
as possible and bring the new features

00:15:24,480 --> 00:15:27,600
right

00:15:25,120 --> 00:15:28,720
so there is always a natural conflict

00:15:27,600 --> 00:15:30,560
and

00:15:28,720 --> 00:15:32,399
sidestepping a little bit if you look at

00:15:30,560 --> 00:15:34,079
literature and you read all the sre

00:15:32,399 --> 00:15:35,680
books they'll talk about like error

00:15:34,079 --> 00:15:37,040
budget and all those error budgets

00:15:35,680 --> 00:15:40,399
basically

00:15:37,040 --> 00:15:42,399
were created to kind of resolve this

00:15:40,399 --> 00:15:44,240
this natural tension between sre and

00:15:42,399 --> 00:15:45,680
developers right that you're allowed a

00:15:44,240 --> 00:15:47,759
downtime

00:15:45,680 --> 00:15:51,040
so from an sre point of view that's the

00:15:47,759 --> 00:15:52,560
maximum done time they'll tolerate

00:15:51,040 --> 00:15:54,160
and from the developers that's all you

00:15:52,560 --> 00:15:55,759
have to release the code because every

00:15:54,160 --> 00:15:57,120
time you release this you ultimately

00:15:55,759 --> 00:15:58,720
introduce some downtime because you're

00:15:57,120 --> 00:16:00,639
switching off one service and putting

00:15:58,720 --> 00:16:02,240
another service

00:16:00,639 --> 00:16:04,240
it's a replacement so that's kind of a

00:16:02,240 --> 00:16:04,959
battery that's kind of like a border

00:16:04,240 --> 00:16:06,480
between

00:16:04,959 --> 00:16:08,959
what is tolerable and what is not

00:16:06,480 --> 00:16:11,519
trollable now coming back to k native

00:16:08,959 --> 00:16:13,040
you kind of have the same tension here

00:16:11,519 --> 00:16:14,720
developers want to code

00:16:13,040 --> 00:16:16,160
right they have their favorite language

00:16:14,720 --> 00:16:17,839
developers tend to be

00:16:16,160 --> 00:16:20,959
very very picky about their language

00:16:17,839 --> 00:16:22,320
tools frameworks and ids also

00:16:20,959 --> 00:16:24,480
so they want to use their favorite

00:16:22,320 --> 00:16:25,519
languages and dependencies to code

00:16:24,480 --> 00:16:28,240
they don't want to handle the

00:16:25,519 --> 00:16:28,880
infrastructure that's what developers

00:16:28,240 --> 00:16:31,920
want

00:16:28,880 --> 00:16:32,800
operators on the other hand you know

00:16:31,920 --> 00:16:35,600
they don't want

00:16:32,800 --> 00:16:36,480
they they kind of don't want to deal

00:16:35,600 --> 00:16:37,759
with hardware so

00:16:36,480 --> 00:16:39,759
one of the reasons why they love

00:16:37,759 --> 00:16:40,800
kubernetes it's a great orchestrating

00:16:39,759 --> 00:16:43,040
platform

00:16:40,800 --> 00:16:44,800
so they want you know they want

00:16:43,040 --> 00:16:46,639
everything to be done automatically by

00:16:44,800 --> 00:16:48,720
communities

00:16:46,639 --> 00:16:50,000
and kubernetes is not the right

00:16:48,720 --> 00:16:50,800
abstraction for developers right

00:16:50,000 --> 00:16:52,240
developers

00:16:50,800 --> 00:16:54,480
don't want to deal with things like

00:16:52,240 --> 00:16:56,959
operations so

00:16:54,480 --> 00:16:58,720
essentially k native sits in between so

00:16:56,959 --> 00:17:00,160
it's on top of kubernetes so it keeps

00:16:58,720 --> 00:17:02,480
the operator happy that you have the

00:17:00,160 --> 00:17:05,039
basic kubernetes under linked it handles

00:17:02,480 --> 00:17:06,480
all the infrastructure so it's a top but

00:17:05,039 --> 00:17:08,079
it kind of abstracts out that

00:17:06,480 --> 00:17:10,799
capabilities for developers

00:17:08,079 --> 00:17:12,079
that you all you have to worry about is

00:17:10,799 --> 00:17:14,480
use those containers

00:17:12,079 --> 00:17:16,000
deployed like i said containers are

00:17:14,480 --> 00:17:18,160
available for your language for your

00:17:16,000 --> 00:17:19,839
dependencies for all your

00:17:18,160 --> 00:17:21,760
whatever frameworks you use it's

00:17:19,839 --> 00:17:22,959
commonly available so you use them to

00:17:21,760 --> 00:17:27,600
deploy the service

00:17:22,959 --> 00:17:28,960
fantastic so for k native for developers

00:17:27,600 --> 00:17:30,240
you write code you don't have to worry

00:17:28,960 --> 00:17:31,760
about building the docker image

00:17:30,240 --> 00:17:32,320
uploading to the stream deploying

00:17:31,760 --> 00:17:34,240
service

00:17:32,320 --> 00:17:36,000
all these setup logging monitoring all

00:17:34,240 --> 00:17:38,000
the boring but repetitive tasks you

00:17:36,000 --> 00:17:42,480
don't have to worry about if that's

00:17:38,000 --> 00:17:45,039
k native for developers for an operator

00:17:42,480 --> 00:17:46,160
what k native brings is all the

00:17:45,039 --> 00:17:48,880
operational comes

00:17:46,160 --> 00:17:50,400
complexity is abstracted out and that

00:17:48,880 --> 00:17:52,640
obviously is handled by kubernetes

00:17:50,400 --> 00:17:55,039
because it's what kubernetes does

00:17:52,640 --> 00:17:56,960
and as i have mentioned repeatedly it's

00:17:55,039 --> 00:17:57,919
universally supported by all cloud

00:17:56,960 --> 00:18:00,960
providers so it

00:17:57,919 --> 00:18:03,440
gives you kind of a portability and

00:18:00,960 --> 00:18:05,600
kubernetes is a very extendable platform

00:18:03,440 --> 00:18:07,840
uh i use that code kubernetes is a

00:18:05,600 --> 00:18:08,720
platform to build platform it's a great

00:18:07,840 --> 00:18:10,640
way

00:18:08,720 --> 00:18:12,640
it's a great starting point but never

00:18:10,640 --> 00:18:15,760
the end goal in itself

00:18:12,640 --> 00:18:17,200
so it has an api etc with clear

00:18:15,760 --> 00:18:18,640
separation of concerns so you can build

00:18:17,200 --> 00:18:20,320
more platforms so that's one of the

00:18:18,640 --> 00:18:23,760
reasons why developers love

00:18:20,320 --> 00:18:25,760
sorry operators love kubernetes

00:18:23,760 --> 00:18:28,000
so we have talked about portability

00:18:25,760 --> 00:18:30,640
aspect also so kubernetes is virtually

00:18:28,000 --> 00:18:32,400
offered by all cloud service providers

00:18:30,640 --> 00:18:33,360
and k native essentially code device

00:18:32,400 --> 00:18:36,559
serverless on

00:18:33,360 --> 00:18:38,480
kubernetes and it is a brand uh com

00:18:36,559 --> 00:18:39,919
user community it's a very popular open

00:18:38,480 --> 00:18:41,440
source paradigm

00:18:39,919 --> 00:18:42,799
with lot of contributors you can

00:18:41,440 --> 00:18:44,799
actually look at the github side and

00:18:42,799 --> 00:18:46,320
you'll see so now let's actually look at

00:18:44,799 --> 00:18:48,400
the stack now

00:18:46,320 --> 00:18:50,799
i've been so far talking about you know

00:18:48,400 --> 00:18:52,640
platforms and so on and components but

00:18:50,799 --> 00:18:57,840
here goes the detail

00:18:52,640 --> 00:18:57,840
what you have is you have this um

00:18:58,080 --> 00:19:02,000
yeah so you have these kubernetes which

00:19:00,160 --> 00:19:05,360
is the underlying platform

00:19:02,000 --> 00:19:08,320
okay on top of it you have these

00:19:05,360 --> 00:19:10,320
service meshes that basically handles

00:19:08,320 --> 00:19:12,400
and routes the traffic

00:19:10,320 --> 00:19:13,760
so you have istio which is the default

00:19:12,400 --> 00:19:14,240
one which is the one we're going to use

00:19:13,760 --> 00:19:17,039
for

00:19:14,240 --> 00:19:18,320
demo glue ambassador and then you have

00:19:17,039 --> 00:19:20,960
these primitives

00:19:18,320 --> 00:19:22,480
serving and eventing and build i've

00:19:20,960 --> 00:19:25,120
actually crossed out like i mentioned

00:19:22,480 --> 00:19:26,880
it's deprecated so that's where k native

00:19:25,120 --> 00:19:28,480
stack and on top of k native you can

00:19:26,880 --> 00:19:30,559
have several other platforms you can

00:19:28,480 --> 00:19:33,840
have google cloud run which is basically

00:19:30,559 --> 00:19:36,880
think of it as a managed managed

00:19:33,840 --> 00:19:38,480
k native offering and they're both kind

00:19:36,880 --> 00:19:40,400
of very similar except one runs on

00:19:38,480 --> 00:19:42,400
kubernetes cluster one runs on both

00:19:40,400 --> 00:19:44,960
which is google's internal

00:19:42,400 --> 00:19:46,240
uh cluster so it kind of you don't even

00:19:44,960 --> 00:19:47,919
have to worry about everything is

00:19:46,240 --> 00:19:49,520
automated everything is abstracted out

00:19:47,919 --> 00:19:53,200
red hat has its own product

00:19:49,520 --> 00:19:56,320
ibm has its own product so

00:19:53,200 --> 00:19:57,440
so talking specifically about google

00:19:56,320 --> 00:20:00,480
cloud

00:19:57,440 --> 00:20:02,559
you have basically three different uh

00:20:00,480 --> 00:20:04,480
offerings around k native and they're

00:20:02,559 --> 00:20:05,600
all compatible with each other so you

00:20:04,480 --> 00:20:08,400
have k native

00:20:05,600 --> 00:20:09,280
which is open source then you have cloud

00:20:08,400 --> 00:20:11,039
run

00:20:09,280 --> 00:20:13,120
and cloud run on gk this has been

00:20:11,039 --> 00:20:16,000
renamed as cloud run for anthos

00:20:13,120 --> 00:20:16,720
so cloud run for anthony's algebra and

00:20:16,000 --> 00:20:18,640
cloud run

00:20:16,720 --> 00:20:21,120
is essentially a fully managed

00:20:18,640 --> 00:20:23,919
serverless container offering

00:20:21,120 --> 00:20:25,520
sorry that runs on google internal

00:20:23,919 --> 00:20:27,200
cluster internal

00:20:25,520 --> 00:20:29,600
they call it bore which is basically

00:20:27,200 --> 00:20:31,280
their internal

00:20:29,600 --> 00:20:33,679
bore came from kubernetes right

00:20:31,280 --> 00:20:34,000
kubernetes is in some sense open source

00:20:33,679 --> 00:20:36,559
version

00:20:34,000 --> 00:20:38,400
for both cloud run on gke a lot of

00:20:36,559 --> 00:20:40,000
customers they already have their

00:20:38,400 --> 00:20:41,600
kubernetes clusters running so they

00:20:40,000 --> 00:20:43,039
don't want to use a completely different

00:20:41,600 --> 00:20:44,400
product so they want something that's

00:20:43,039 --> 00:20:46,640
built on top so you have

00:20:44,400 --> 00:20:49,200
cloud run on gke or cloud one for

00:20:46,640 --> 00:20:51,840
anthers and then you have k native

00:20:49,200 --> 00:20:52,880
and they all sort of use the same

00:20:51,840 --> 00:20:55,919
offering

00:20:52,880 --> 00:20:57,679
and what that means is i can take

00:20:55,919 --> 00:21:00,000
a code that is running on k native and

00:20:57,679 --> 00:21:02,320
take it and run it on cloud run or move

00:21:00,000 --> 00:21:04,400
it for cloud on anther seamlessly

00:21:02,320 --> 00:21:06,320
and what that gives you is a possibility

00:21:04,400 --> 00:21:09,280
to do hybrid cloud the hybrid cloud is

00:21:06,320 --> 00:21:11,360
very popular in the industry right

00:21:09,280 --> 00:21:12,320
so with with these all these different

00:21:11,360 --> 00:21:14,400
offerings

00:21:12,320 --> 00:21:16,240
you truly get the possibility of a

00:21:14,400 --> 00:21:18,080
hybrid cloud where i can run part of my

00:21:16,240 --> 00:21:19,760
workload in my data center part of my

00:21:18,080 --> 00:21:22,000
runway in cloud and i can move the

00:21:19,760 --> 00:21:23,919
workload seamlessly across

00:21:22,000 --> 00:21:25,039
so let's actually talk about k native

00:21:23,919 --> 00:21:26,559
serving now

00:21:25,039 --> 00:21:28,080
some other things might not make too

00:21:26,559 --> 00:21:29,600
much of sense right now but when i get

00:21:28,080 --> 00:21:32,000
into demo

00:21:29,600 --> 00:21:34,799
and i'll show things how it works then a

00:21:32,000 --> 00:21:37,840
lot of things would become clear

00:21:34,799 --> 00:21:38,559
so anyhow so let's say let's talk about

00:21:37,840 --> 00:21:42,799
serving

00:21:38,559 --> 00:21:46,159
what is serving serving is basically

00:21:42,799 --> 00:21:48,799
a way to handle your traffic so

00:21:46,159 --> 00:21:49,440
what it does is it it has all this auto

00:21:48,799 --> 00:21:52,640
scaling

00:21:49,440 --> 00:21:54,320
um default auto scaling is 0 to n or 0

00:21:52,640 --> 00:21:55,360
to infinity if you were to put it that

00:21:54,320 --> 00:21:56,960
way

00:21:55,360 --> 00:21:58,400
this is the default you can actually

00:21:56,960 --> 00:22:00,000
change it i can have something like

00:21:58,400 --> 00:22:01,440
minimum instances that

00:22:00,000 --> 00:22:03,120
you know i want to have at least three

00:22:01,440 --> 00:22:05,120
instances because one of the common

00:22:03,120 --> 00:22:06,080
problems with serverless is a cold start

00:22:05,120 --> 00:22:08,000
problem

00:22:06,080 --> 00:22:09,280
so you sometimes to avoid cold start you

00:22:08,000 --> 00:22:11,679
certainly want to have

00:22:09,280 --> 00:22:13,200
certain instances almost always running

00:22:11,679 --> 00:22:14,080
right of course it comes with a drawback

00:22:13,200 --> 00:22:15,840
that you're paying for

00:22:14,080 --> 00:22:17,520
them but that's a choice you have to

00:22:15,840 --> 00:22:19,600
make so

00:22:17,520 --> 00:22:21,200
it it handles basically the serving it's

00:22:19,600 --> 00:22:22,320
a rapid deployment of serverless

00:22:21,200 --> 00:22:24,240
containers

00:22:22,320 --> 00:22:26,000
it handles configuration and revision

00:22:24,240 --> 00:22:27,679
management so every time

00:22:26,000 --> 00:22:29,440
you basically deploy a new version you

00:22:27,679 --> 00:22:31,120
create a new revisions it's like an

00:22:29,440 --> 00:22:32,799
immutable infrastructure

00:22:31,120 --> 00:22:34,480
right and it has its own configuration

00:22:32,799 --> 00:22:37,120
and you can even split traffic

00:22:34,480 --> 00:22:39,360
uh what that gives you is a possibility

00:22:37,120 --> 00:22:40,000
to do something like a gradual rollout

00:22:39,360 --> 00:22:41,600
right

00:22:40,000 --> 00:22:43,039
so you want to release a new product to

00:22:41,600 --> 00:22:43,520
10 percent of your customers if

00:22:43,039 --> 00:22:45,200
everything

00:22:43,520 --> 00:22:48,480
works fine then we'll just increase it

00:22:45,200 --> 00:22:51,120
to 2030 and so on

00:22:48,480 --> 00:22:53,360
the way k18 is designed is it's

00:22:51,120 --> 00:22:54,000
deliberately designed as a set of loose

00:22:53,360 --> 00:22:57,200
components

00:22:54,000 --> 00:22:58,799
right loosely coupled components it's

00:22:57,200 --> 00:22:59,440
not designed as one system and the

00:22:58,799 --> 00:23:00,960
reason is

00:22:59,440 --> 00:23:02,799
everybody's requirement is very

00:23:00,960 --> 00:23:04,480
different so being very open system you

00:23:02,799 --> 00:23:06,480
have all of these components and you can

00:23:04,480 --> 00:23:08,799
mix and match any way you want

00:23:06,480 --> 00:23:10,640
you can plug in and plug out certain

00:23:08,799 --> 00:23:12,240
parts for example i mentioned auto

00:23:10,640 --> 00:23:13,440
scaler can be tuned or swapped for

00:23:12,240 --> 00:23:15,919
custom code

00:23:13,440 --> 00:23:18,000
uh demo has some parts depending on time

00:23:15,919 --> 00:23:19,600
i may or may not show it

00:23:18,000 --> 00:23:21,039
you can connect to your own logging and

00:23:19,600 --> 00:23:23,360
monitoring so everything is very

00:23:21,039 --> 00:23:24,400
pluggable what you have is set bunch of

00:23:23,360 --> 00:23:26,400
components

00:23:24,400 --> 00:23:28,480
and you pick the components you want to

00:23:26,400 --> 00:23:29,120
use and components that you don't want

00:23:28,480 --> 00:23:32,480
to use

00:23:29,120 --> 00:23:34,320
anyway so it's

00:23:32,480 --> 00:23:35,840
basically a high level abstraction for

00:23:34,320 --> 00:23:37,039
your application right so you have

00:23:35,840 --> 00:23:38,720
configuration

00:23:37,039 --> 00:23:40,480
and then you have each deployment is

00:23:38,720 --> 00:23:42,159
essentially a revision so record in

00:23:40,480 --> 00:23:43,679
history you have multiple revisions and

00:23:42,159 --> 00:23:45,120
you have your service deployed in these

00:23:43,679 --> 00:23:47,039
containers and then

00:23:45,120 --> 00:23:48,880
you can route traffic default whenever

00:23:47,039 --> 00:23:52,000
you apply a new

00:23:48,880 --> 00:23:54,400
deploy a new revision 100 goes to the

00:23:52,000 --> 00:23:55,440
latest vision but again this can be

00:23:54,400 --> 00:23:58,480
changed

00:23:55,440 --> 00:24:00,960
and uh again i'll try to

00:23:58,480 --> 00:24:02,640
show all this in the demo and it makes

00:24:00,960 --> 00:24:05,760
makes a little more sense

00:24:02,640 --> 00:24:08,640
but essentially you can actually split

00:24:05,760 --> 00:24:09,120
your traffic between so now let's talk

00:24:08,640 --> 00:24:12,559
about

00:24:09,120 --> 00:24:16,320
eventing so let's go with eventing

00:24:12,559 --> 00:24:19,679
what is eventing kind of

00:24:16,320 --> 00:24:21,520
the same um eventing is basically a

00:24:19,679 --> 00:24:24,640
framework to handle events

00:24:21,520 --> 00:24:27,360
now we talked about events um

00:24:24,640 --> 00:24:27,919
loosely coupled events right because the

00:24:27,360 --> 00:24:29,600
whole

00:24:27,919 --> 00:24:31,200
serverless computing is essentially

00:24:29,600 --> 00:24:33,120
responding to events right it's an

00:24:31,200 --> 00:24:34,799
event-driven architecture

00:24:33,120 --> 00:24:36,559
and what eventing does is it

00:24:34,799 --> 00:24:38,640
declaratively binds

00:24:36,559 --> 00:24:40,240
between event producers and canadian

00:24:38,640 --> 00:24:42,480
services so you have a producer you have

00:24:40,240 --> 00:24:44,640
a channel you have services

00:24:42,480 --> 00:24:46,480
uh all the skate auto scaling and it has

00:24:44,640 --> 00:24:47,600
a lot of these event sources so it has

00:24:46,480 --> 00:24:50,000
event sources for

00:24:47,600 --> 00:24:51,200
gcp pub source it has event so which is

00:24:50,000 --> 00:24:54,159
basically a

00:24:51,200 --> 00:24:55,279
messaging for gcp like kind of kafka for

00:24:54,159 --> 00:24:58,640
gcp

00:24:55,279 --> 00:25:01,360
you also have kafka kubernetes event

00:24:58,640 --> 00:25:03,440
source in fact if i go to the website

00:25:01,360 --> 00:25:06,720
you would have a complete

00:25:03,440 --> 00:25:08,159
list of all of these event sources so

00:25:06,720 --> 00:25:09,600
this whole lot of

00:25:08,159 --> 00:25:11,039
common event source and of course you

00:25:09,600 --> 00:25:13,120
can write your own event source so

00:25:11,039 --> 00:25:15,760
nothing stops you from doing that

00:25:13,120 --> 00:25:17,520
but let's see if we can get that list so

00:25:15,760 --> 00:25:19,919
connectivity native

00:25:17,520 --> 00:25:21,679
canadian eventing component so eventing

00:25:19,919 --> 00:25:23,919
functionality yeah

00:25:21,679 --> 00:25:25,679
so essentially you have event sources

00:25:23,919 --> 00:25:27,600
documentation wonderful that's what i

00:25:25,679 --> 00:25:29,440
was looking for

00:25:27,600 --> 00:25:31,520
so there is an incomplete and always

00:25:29,440 --> 00:25:34,640
changing list of

00:25:31,520 --> 00:25:35,120
different um event sources you have aws

00:25:34,640 --> 00:25:37,600
sql

00:25:35,120 --> 00:25:38,720
apache camel whole bunch of stuff most

00:25:37,600 --> 00:25:41,120
likely

00:25:38,720 --> 00:25:42,240
this should suffice if not you're always

00:25:41,120 --> 00:25:44,480
welcome

00:25:42,240 --> 00:25:46,480
to write your own and it's always great

00:25:44,480 --> 00:25:49,279
to open source it to help other people

00:25:46,480 --> 00:25:51,279
it's like always anyway so k-native

00:25:49,279 --> 00:25:54,240
eventing

00:25:51,279 --> 00:25:55,039
um eventing framework as i mentioned

00:25:54,240 --> 00:25:56,559
source

00:25:55,039 --> 00:25:58,320
we have source they publish there's a

00:25:56,559 --> 00:26:00,159
broker there's a trigger and the source

00:25:58,320 --> 00:26:03,440
is subscribed to it

00:26:00,159 --> 00:26:05,520
again we'll see depending on time uh

00:26:03,440 --> 00:26:07,120
i would be able to show some parts of

00:26:05,520 --> 00:26:08,720
eventing framework so it fits

00:26:07,120 --> 00:26:10,960
a little more clear but that's basically

00:26:08,720 --> 00:26:13,360
how eventing works

00:26:10,960 --> 00:26:14,799
we have already seen the list of sources

00:26:13,360 --> 00:26:18,320
so here again

00:26:14,799 --> 00:26:22,320
this is an always evolving a list

00:26:18,320 --> 00:26:22,320
of sources

00:26:22,559 --> 00:26:26,000
eventing use cases why would you use

00:26:24,400 --> 00:26:26,640
inventing you can have a lot of stuff

00:26:26,000 --> 00:26:28,640
like

00:26:26,640 --> 00:26:30,000
you can have a cron job importer to run

00:26:28,640 --> 00:26:31,919
weekly

00:26:30,000 --> 00:26:33,200
reports you can have iot is becoming

00:26:31,919 --> 00:26:35,039
very popular

00:26:33,200 --> 00:26:37,039
pops up is the messaging framework you

00:26:35,039 --> 00:26:38,799
can connect to almost any

00:26:37,039 --> 00:26:41,360
google cloud or for that matter if

00:26:38,799 --> 00:26:45,039
you're using aws you can have azure c

00:26:41,360 --> 00:26:48,960
aws has sqs which is somewhat the same

00:26:45,039 --> 00:26:50,640
can connect to different aws services

00:26:48,960 --> 00:26:52,080
so there are a lot of use cases now

00:26:50,640 --> 00:26:55,840
let's actually move to

00:26:52,080 --> 00:26:58,880
build i would not go into details of

00:26:55,840 --> 00:27:02,559
this for the reason that this is

00:26:58,880 --> 00:27:06,559
deprecated so i'll be very very brief

00:27:02,559 --> 00:27:08,080
before point eight we had k native build

00:27:06,559 --> 00:27:10,000
post point eight we have replaced it

00:27:08,080 --> 00:27:13,360
with tecton

00:27:10,000 --> 00:27:15,440
so it was basically a way from to go

00:27:13,360 --> 00:27:18,000
from the source code to container images

00:27:15,440 --> 00:27:19,039
but like i said it's deprecated it had

00:27:18,000 --> 00:27:20,880
its templates

00:27:19,039 --> 00:27:23,520
service accounts so on to handle all

00:27:20,880 --> 00:27:26,320
that building and deployment

00:27:23,520 --> 00:27:28,240
it has been replaced by tecton tecton by

00:27:26,320 --> 00:27:30,480
itself is a big project

00:27:28,240 --> 00:27:32,799
so i would not want to go into details

00:27:30,480 --> 00:27:35,600
of tecton

00:27:32,799 --> 00:27:37,440
so but essentially it has tasks task

00:27:35,600 --> 00:27:40,159
runs it has its own way of

00:27:37,440 --> 00:27:40,480
it's basically a communities-based ci cd

00:27:40,159 --> 00:27:43,360
uh

00:27:40,480 --> 00:27:45,200
platform anyway so that's tecton a

00:27:43,360 --> 00:27:48,000
k-native community

00:27:45,200 --> 00:27:49,600
it's a big community um it releases

00:27:48,000 --> 00:27:51,279
every now and then

00:27:49,600 --> 00:27:53,039
you could see all these details at k

00:27:51,279 --> 00:27:56,000
native.dev

00:27:53,039 --> 00:27:58,240
a lot of value for k native one step

00:27:56,000 --> 00:28:02,159
deploy auto scale

00:27:58,240 --> 00:28:05,200
manage workloads um now let's actually

00:28:02,159 --> 00:28:08,240
at this point i would want to switch to

00:28:05,200 --> 00:28:11,919
demo okay so let's go for

00:28:08,240 --> 00:28:15,039
demo and what i have here is

00:28:11,919 --> 00:28:17,919
so i have this demo at uh

00:28:15,039 --> 00:28:18,480
nikhil berthwald github link right so

00:28:17,919 --> 00:28:21,840
the link

00:28:18,480 --> 00:28:24,080
is mentioned right on top so if you go

00:28:21,840 --> 00:28:25,679
through my slides this is the link

00:28:24,080 --> 00:28:27,760
i'll be happy to share the slide but

00:28:25,679 --> 00:28:30,480
this is the link for the demo

00:28:27,760 --> 00:28:32,640
the demo is like a big full day workshop

00:28:30,480 --> 00:28:33,120
kind of demo so i would not obviously go

00:28:32,640 --> 00:28:35,200
into

00:28:33,120 --> 00:28:37,279
all of it i would only cover parts of it

00:28:35,200 --> 00:28:39,520
in fact mostly i'll cover the serving

00:28:37,279 --> 00:28:40,559
because that kind of demonstrates uh the

00:28:39,520 --> 00:28:43,679
slides are also

00:28:40,559 --> 00:28:47,200
present and there are setup instructions

00:28:43,679 --> 00:28:47,200
of how you basically set up

00:28:47,279 --> 00:28:51,679
if we can just very briefly talk about

00:28:49,360 --> 00:28:53,360
setups there are some scripts and so on

00:28:51,679 --> 00:28:55,120
you can actually go into scripts create

00:28:53,360 --> 00:28:57,919
the gke cluster

00:28:55,120 --> 00:28:59,760
so it creates all these clusters for you

00:28:57,919 --> 00:29:02,640
in the interest of time

00:28:59,760 --> 00:29:04,399
i would not do the setup part because if

00:29:02,640 --> 00:29:05,919
i do the setup part it takes couple of

00:29:04,399 --> 00:29:06,799
minutes and i don't have that much of

00:29:05,919 --> 00:29:09,440
time i want to

00:29:06,799 --> 00:29:10,080
move into other parts so in the interest

00:29:09,440 --> 00:29:13,440
of time

00:29:10,080 --> 00:29:16,960
i would actually skip the setup part

00:29:13,440 --> 00:29:20,240
and here i already have

00:29:16,960 --> 00:29:23,520
uh basically i already have things

00:29:20,240 --> 00:29:25,600
set up so now we go to k native

00:29:23,520 --> 00:29:27,279
if you have k native and let's actually

00:29:25,600 --> 00:29:29,279
go to a demo

00:29:27,279 --> 00:29:30,960
first demo so we would go to this

00:29:29,279 --> 00:29:34,720
website and we would see

00:29:30,960 --> 00:29:37,120
um where is it let's go back

00:29:34,720 --> 00:29:39,120
and let's start with hello world serving

00:29:37,120 --> 00:29:39,760
okay how much time do i have i have

00:29:39,120 --> 00:29:41,919
about

00:29:39,760 --> 00:29:43,520
15 more minutes so i can cover a few

00:29:41,919 --> 00:29:46,159
things here

00:29:43,520 --> 00:29:46,880
so let's actually look at a hello world

00:29:46,159 --> 00:29:48,720
project so

00:29:46,880 --> 00:29:50,640
i would have a hello world code and i

00:29:48,720 --> 00:29:53,520
have c sharp and python

00:29:50,640 --> 00:29:55,200
but i think python is probably a better

00:29:53,520 --> 00:29:57,120
place to demo because everybody

00:29:55,200 --> 00:29:59,360
understands python

00:29:57,120 --> 00:30:00,480
so let me actually look at my python

00:29:59,360 --> 00:30:05,279
code hello world

00:30:00,480 --> 00:30:05,279
python very simple i have

00:30:05,679 --> 00:30:09,919
i'm using flask which is basically a

00:30:08,080 --> 00:30:11,600
micro framework for

00:30:09,919 --> 00:30:13,760
it's a very simple thing you have hello

00:30:11,600 --> 00:30:15,760
world i define a variable

00:30:13,760 --> 00:30:18,000
target and it just says hello world

00:30:15,760 --> 00:30:19,279
target very simple kind of typical hello

00:30:18,000 --> 00:30:22,640
world

00:30:19,279 --> 00:30:26,720
my docker file you know

00:30:22,640 --> 00:30:28,240
basic stuff i take this image python 3.7

00:30:26,720 --> 00:30:30,000
as i mentioned container you create

00:30:28,240 --> 00:30:31,039
these base images you install the

00:30:30,000 --> 00:30:32,559
framework

00:30:31,039 --> 00:30:34,799
and then you have this app and then you

00:30:32,559 --> 00:30:35,760
just start this app so what i'm now

00:30:34,799 --> 00:30:40,159
going to do

00:30:35,760 --> 00:30:43,520
is i am actually going to build this

00:30:40,159 --> 00:30:45,520
okay so to build i have created my

00:30:43,520 --> 00:30:48,240
project on google cloud and you can see

00:30:45,520 --> 00:30:52,000
nikhil berthworld dash knight f2 let me

00:30:48,240 --> 00:30:53,279
actually zoom a little bit so it becomes

00:30:52,000 --> 00:30:56,399
more clear okay good

00:30:53,279 --> 00:30:58,480
i think this zoom level is good so now

00:30:56,399 --> 00:30:59,440
i have this project nikhil worthwhile sk

00:30:58,480 --> 00:31:01,039
native i have a

00:30:59,440 --> 00:31:02,399
i'm actually running on virtual machine

00:31:01,039 --> 00:31:04,960
but you don't have to you can even run

00:31:02,399 --> 00:31:07,600
your local machine or

00:31:04,960 --> 00:31:08,640
yeah you can even run your local machine

00:31:07,600 --> 00:31:12,320
and what i have

00:31:08,640 --> 00:31:13,360
is i would now build this project so how

00:31:12,320 --> 00:31:16,880
do i build it

00:31:13,360 --> 00:31:19,279
well i use simple docker build

00:31:16,880 --> 00:31:21,919
gcr is my google container registry so

00:31:19,279 --> 00:31:25,440
let's go to gcr

00:31:21,919 --> 00:31:27,600
uh okay where is gcr container cloud

00:31:25,440 --> 00:31:29,519
build container history okay

00:31:27,600 --> 00:31:31,519
so i go to container st obviously i've

00:31:29,519 --> 00:31:34,799
done a lot of builds before

00:31:31,519 --> 00:31:36,399
so this is an old one i did like almost

00:31:34,799 --> 00:31:38,240
a month ago let me just delete this

00:31:36,399 --> 00:31:42,000
image and i'll start fresh

00:31:38,240 --> 00:31:45,120
okay so right now i have no images

00:31:42,000 --> 00:31:48,559
so i'm going to build it

00:31:45,120 --> 00:31:52,000
uh that's the command for build okay

00:31:48,559 --> 00:31:54,880
i built it here i say

00:31:52,000 --> 00:31:56,640
and my project id is so the project id

00:31:54,880 --> 00:31:58,559
would be different right so if you have

00:31:56,640 --> 00:32:00,000
your own and this has nothing to do with

00:31:58,559 --> 00:32:02,320
google cloud fi you can use

00:32:00,000 --> 00:32:04,720
an azure container hd or any other

00:32:02,320 --> 00:32:08,240
container sd you have

00:32:04,720 --> 00:32:10,159
that's okay um i'm not most of it is

00:32:08,240 --> 00:32:12,640
just open source so it is not it's i'm

00:32:10,159 --> 00:32:16,559
just using google cloud as an example

00:32:12,640 --> 00:32:16,559
but it's it's vendor agnostic

00:32:17,039 --> 00:32:26,159
so it creates this just

00:32:20,720 --> 00:32:26,159
docker images list oh where is it

00:32:26,840 --> 00:32:30,080
successfully

00:32:28,080 --> 00:32:31,679
why is it not showing anyway we'll

00:32:30,080 --> 00:32:34,080
figure it out

00:32:31,679 --> 00:32:35,600
let's actually now this image to the

00:32:34,080 --> 00:32:43,840
container history

00:32:35,600 --> 00:32:43,840
so it's built stacked

00:32:46,559 --> 00:32:49,840
you don't have permission you may have

00:32:47,919 --> 00:32:51,760
installed authenticate okay

00:32:49,840 --> 00:32:54,240
i think i have some problem with that i

00:32:51,760 --> 00:32:56,720
just created a fresh machine

00:32:54,240 --> 00:32:58,559
so my apologies that i have to deal with

00:32:56,720 --> 00:33:01,919
this problem

00:32:58,559 --> 00:33:06,159
authentication method on uh

00:33:01,919 --> 00:33:11,840
on the next okay

00:33:06,159 --> 00:33:11,840
sorry hopefully this solves the problem

00:33:25,760 --> 00:33:30,080
okay i think this is fine let's see if

00:33:27,600 --> 00:33:30,080
this works

00:33:31,919 --> 00:33:34,880
you don't have this you may have

00:33:33,039 --> 00:33:36,320
installed to authenticate your request

00:33:34,880 --> 00:33:39,519
follow the steps in this one

00:33:36,320 --> 00:33:42,960
okay i don't know why it's

00:33:39,519 --> 00:33:45,200
uh to login to i think this is what you

00:33:42,960 --> 00:33:45,200
need

00:33:46,960 --> 00:33:49,600
account

00:33:51,360 --> 00:33:54,640
okay so login is this one okay i think

00:33:54,000 --> 00:33:56,000
it's

00:33:54,640 --> 00:33:58,960
i don't know why it's not working so

00:33:56,000 --> 00:34:01,039
i'll probably walk over the demo

00:33:58,960 --> 00:34:03,279
i think i have some setup problem here

00:34:01,039 --> 00:34:05,200
and how much time do i have i have about

00:34:03,279 --> 00:34:07,840
10-ish minutes so i won't even be able

00:34:05,200 --> 00:34:10,320
to

00:34:07,840 --> 00:34:10,320
really

00:34:16,879 --> 00:34:24,240
last attempt

00:34:21,119 --> 00:34:27,679
okay works lucky me

00:34:24,240 --> 00:34:28,079
all right let's refresh and you should

00:34:27,679 --> 00:34:32,560
see

00:34:28,079 --> 00:34:34,399
an image here so it's loading up

00:34:32,560 --> 00:34:36,560
there you go i just built an image it

00:34:34,399 --> 00:34:40,560
was created 36 minutes ago

00:34:36,560 --> 00:34:43,200
and i just uploaded it right now

00:34:40,560 --> 00:34:45,760
wonderful so i have an image now and

00:34:43,200 --> 00:34:49,200
what i'm actually going to do

00:34:45,760 --> 00:34:52,480
is i have this file service

00:34:49,200 --> 00:34:52,480
let's go down

00:34:53,440 --> 00:34:57,680
okay uh i think my screen is still yeah

00:34:56,399 --> 00:34:58,880
okay

00:34:57,680 --> 00:35:01,280
you're sharing your screen so that's

00:34:58,880 --> 00:35:03,839
good sorry yeah accidentally okay

00:35:01,280 --> 00:35:05,920
so let's actually look at service b1

00:35:03,839 --> 00:35:07,920
what what is this yaml file

00:35:05,920 --> 00:35:09,200
and what service v1 says is this is a

00:35:07,920 --> 00:35:17,839
hello world

00:35:09,200 --> 00:35:17,839
it's actually going into uh

00:35:18,000 --> 00:35:21,440
okay so this is the service we want it's

00:35:19,680 --> 00:35:22,800
actually going to my container industry

00:35:21,440 --> 00:35:27,200
it deploys and it

00:35:22,800 --> 00:35:27,200
it defines a it defines this

00:35:28,400 --> 00:35:33,440
it defines this variable called target

00:35:31,520 --> 00:35:37,359
okay now i'm actually going to apply

00:35:33,440 --> 00:35:37,359
this so let's actually apply this

00:35:41,119 --> 00:35:44,400
i shouldn't hide this height floating

00:35:43,680 --> 00:35:47,599
point

00:35:44,400 --> 00:35:49,040
okay that's good

00:35:47,599 --> 00:35:50,640
it was coming in between okay the

00:35:49,040 --> 00:35:55,520
service has been deployed

00:35:50,640 --> 00:35:55,520
okay so now it's actually let's look at

00:35:57,599 --> 00:36:02,320
there you go hello world last created

00:36:00,400 --> 00:36:04,240
deploying it's still deploying

00:36:02,320 --> 00:36:05,839
it's fine it's container creating

00:36:04,240 --> 00:36:07,520
creating containers seven seconds ago it

00:36:05,839 --> 00:36:09,680
takes a little while

00:36:07,520 --> 00:36:10,880
to deploy i'm not going to worry about

00:36:09,680 --> 00:36:14,720
this one

00:36:10,880 --> 00:36:17,920
um let's actually

00:36:14,720 --> 00:36:20,720
look at the steel part of it okay the

00:36:17,920 --> 00:36:20,720
gateway is there

00:36:20,800 --> 00:36:24,640
and what i'm actually going to do is i'm

00:36:22,480 --> 00:36:26,560
just going to export the external id so

00:36:24,640 --> 00:36:29,119
let's actually look at the ingress

00:36:26,560 --> 00:36:29,119
gateway

00:36:29,760 --> 00:36:36,400
okay and now i have

00:36:33,040 --> 00:36:38,079
essentially let me curl so we had we had

00:36:36,400 --> 00:36:41,119
this

00:36:38,079 --> 00:36:41,760
hello v1 and let's again look at what we

00:36:41,119 --> 00:36:44,880
did

00:36:41,760 --> 00:36:49,359
okay we had

00:36:44,880 --> 00:36:49,359
this oh sorry

00:36:52,240 --> 00:36:55,280
so we had this target variable defined

00:36:54,240 --> 00:36:58,079
v1 and

00:36:55,280 --> 00:36:58,640
if you remember in our code it was like

00:36:58,079 --> 00:37:02,800
hello

00:36:58,640 --> 00:37:06,839
target so now i have a service running

00:37:02,800 --> 00:37:10,800
and i can just i got the ip address

00:37:06,839 --> 00:37:14,240
right and now i just ping it it says

00:37:10,800 --> 00:37:17,520
hello v1 so far so good

00:37:14,240 --> 00:37:20,240
so we have this basic service setup

00:37:17,520 --> 00:37:21,520
and now what we are going to do is we

00:37:20,240 --> 00:37:23,200
would change a little bit of

00:37:21,520 --> 00:37:27,520
configuration here

00:37:23,200 --> 00:37:27,520
so what we would do is we will

00:37:28,160 --> 00:37:32,160
another service so here the interesting

00:37:30,960 --> 00:37:34,880
thing that i should show

00:37:32,160 --> 00:37:35,599
is let's actually look at the pause

00:37:34,880 --> 00:37:38,880
running

00:37:35,599 --> 00:37:40,320
okay so this is the istio's stuff

00:37:38,880 --> 00:37:44,160
running

00:37:40,320 --> 00:37:44,160
um yeah

00:37:44,320 --> 00:37:51,440
this is basically running now

00:37:48,480 --> 00:37:53,119
if i wait for a little bit you see the

00:37:51,440 --> 00:37:54,960
status here that i'm highlighting that

00:37:53,119 --> 00:37:56,400
it's running it actually would stop

00:37:54,960 --> 00:37:58,400
and the reason why it would stop is

00:37:56,400 --> 00:38:01,680
because hey it's serverless

00:37:58,400 --> 00:38:03,359
so we just pinged so it created we just

00:38:01,680 --> 00:38:03,920
deployed it created this container we

00:38:03,359 --> 00:38:06,320
think

00:38:03,920 --> 00:38:07,520
it was running it waits a little while

00:38:06,320 --> 00:38:09,440
when it doesn't get

00:38:07,520 --> 00:38:10,800
any request it actually scales down to

00:38:09,440 --> 00:38:13,760
zero

00:38:10,800 --> 00:38:15,920
um again let's see if it scales down to

00:38:13,760 --> 00:38:17,040
so it takes a little bit like it will

00:38:15,920 --> 00:38:20,720
wait a little bit

00:38:17,040 --> 00:38:20,720
hold on let's look at it again

00:38:21,040 --> 00:38:28,000
there you go now you see it was running

00:38:25,200 --> 00:38:28,400
when i sent a request i waited a little

00:38:28,000 --> 00:38:30,000
bit

00:38:28,400 --> 00:38:32,480
it didn't get any more requests now it

00:38:30,000 --> 00:38:34,400
says status terminating

00:38:32,480 --> 00:38:36,160
it's now auto scaling so this is where

00:38:34,400 --> 00:38:36,640
the serverless computing is taking place

00:38:36,160 --> 00:38:38,240
right

00:38:36,640 --> 00:38:40,720
it was running it didn't get any result

00:38:38,240 --> 00:38:43,920
it auto scaled down to zero

00:38:40,720 --> 00:38:44,720
and now it's terminating meanwhile what

00:38:43,920 --> 00:38:46,960
we are going to do

00:38:44,720 --> 00:38:48,079
is we are going to deploy a new revision

00:38:46,960 --> 00:38:51,280
so let's actually

00:38:48,079 --> 00:38:55,440
look at v2

00:38:51,280 --> 00:38:55,440
so in the first revision we had

00:38:56,480 --> 00:39:01,200
we had service v1 where the variable

00:38:59,440 --> 00:39:04,480
target variable was defined

00:39:01,200 --> 00:39:05,119
as v1 now we're going to deploy another

00:39:04,480 --> 00:39:09,040
revision

00:39:05,119 --> 00:39:12,560
of the same service but now we change

00:39:09,040 --> 00:39:12,880
the target value so let's actually see

00:39:12,560 --> 00:39:16,800
so

00:39:12,880 --> 00:39:19,040
now first we ping it

00:39:16,800 --> 00:39:19,040
just

00:39:20,560 --> 00:39:23,920
it's a hello world v1

00:39:24,000 --> 00:39:27,440
now you see a little bit of a delay

00:39:25,680 --> 00:39:30,560
that's the cold start problem right

00:39:27,440 --> 00:39:31,280
the container was terminated then it

00:39:30,560 --> 00:39:36,720
switched on

00:39:31,280 --> 00:39:36,720
now it's running now i'm gonna deploy

00:39:39,599 --> 00:39:44,160
okay configured wonderful now let's

00:39:42,560 --> 00:39:46,400
actually have a look at what's happening

00:39:44,160 --> 00:39:46,400
here

00:39:54,640 --> 00:39:58,240
why can't i hide it or at least at the

00:39:56,880 --> 00:40:00,640
very minimum i'll just

00:39:58,240 --> 00:40:00,640
try to

00:40:03,599 --> 00:40:07,599
the very minimum i'll try to take it out

00:40:05,599 --> 00:40:10,480
of my way okay

00:40:07,599 --> 00:40:14,319
so now status is running it has two

00:40:10,480 --> 00:40:14,319
parts right two versions of hello world

00:40:16,720 --> 00:40:21,520
hello world v2 so it was hello world v1

00:40:19,520 --> 00:40:23,200
now i deployed the new revision

00:40:21,520 --> 00:40:24,800
right remember the revision you had new

00:40:23,200 --> 00:40:27,200
revision v2

00:40:24,800 --> 00:40:28,720
it deployed a new version now it's

00:40:27,200 --> 00:40:30,800
talking to the new version

00:40:28,720 --> 00:40:33,200
by default every time you deploy a new

00:40:30,800 --> 00:40:36,480
revision you have hundred percent

00:40:33,200 --> 00:40:39,680
of traffic deployed to the new revision

00:40:36,480 --> 00:40:43,680
okay now what we are going to do is

00:40:39,680 --> 00:40:46,560
we would basically change a little bit

00:40:43,680 --> 00:40:46,560
of a

00:40:47,680 --> 00:40:54,240
little bit off or actually let me

00:40:52,000 --> 00:40:55,200
let me actually show traffic splitting i

00:40:54,240 --> 00:40:58,640
think traffic

00:40:55,200 --> 00:41:00,640
plating is kind of interesting okay

00:40:58,640 --> 00:41:02,720
so now what i would have is i would

00:41:00,640 --> 00:41:05,599
split the traffic

00:41:02,720 --> 00:41:07,599
and i'm gonna okay so let's actually

00:41:05,599 --> 00:41:10,560
look at this

00:41:07,599 --> 00:41:10,560
traffic splitting

00:41:13,920 --> 00:41:17,119
service v1 print

00:41:18,240 --> 00:41:21,280
so let's see what it is so you have the

00:41:20,880 --> 00:41:23,040
same

00:41:21,280 --> 00:41:24,800
hello world example you have value

00:41:23,040 --> 00:41:28,000
target and you have

00:41:24,800 --> 00:41:31,359
traffic current hello world v1

00:41:28,000 --> 00:41:33,200
and the latest division

00:41:31,359 --> 00:41:34,880
zero so now i have hundred percent zero

00:41:33,200 --> 00:41:39,040
percent i have to redo

00:41:34,880 --> 00:41:39,040
i messed up with my project change

00:41:39,760 --> 00:41:45,680
okay so let's bring it

00:41:43,119 --> 00:41:47,280
now it should say v2 because this was

00:41:45,680 --> 00:42:03,839
the v2 version running

00:41:47,280 --> 00:42:03,839
okay now i go about

00:42:14,839 --> 00:42:17,839
good

00:42:17,920 --> 00:42:23,839
so i deployed a new one but the latest

00:42:21,760 --> 00:42:24,880
traffic is zero the current is hundred

00:42:23,839 --> 00:42:28,839
percent so it's still

00:42:24,880 --> 00:42:30,000
showing v1 sorry v2 because that's the

00:42:28,839 --> 00:42:32,800
one

00:42:30,000 --> 00:42:33,760
we kind of deployed okay now it should

00:42:32,800 --> 00:42:37,040
now it has changed

00:42:33,760 --> 00:42:38,400
good so c current is v1

00:42:37,040 --> 00:42:40,720
and that's hundred percent of the

00:42:38,400 --> 00:42:42,240
traffic so it was v2 then we changed it

00:42:40,720 --> 00:42:43,280
back to v1 now what we are going to do

00:42:42,240 --> 00:42:46,240
now is we are

00:42:43,280 --> 00:42:47,280
actually going to again let me look at

00:42:46,240 --> 00:42:50,000
the time

00:42:47,280 --> 00:42:52,000
uh okay so i don't have a lot of time so

00:42:50,000 --> 00:42:52,720
i'll just take a little bit of shortcuts

00:42:52,000 --> 00:42:54,240
here

00:42:52,720 --> 00:42:56,880
what i'm going to do is i'm going to do

00:42:54,240 --> 00:42:59,839
a 50 50 traffic split so let me actually

00:42:56,880 --> 00:42:59,839
look at

00:43:01,520 --> 00:43:05,359
v1 and v4 um

00:43:05,599 --> 00:43:14,000
okay service v4

00:43:10,240 --> 00:43:18,160
dot yaml so this is service v4.yaml

00:43:14,000 --> 00:43:18,160
um again i need to change it

00:43:24,839 --> 00:43:40,160
okay

00:43:27,119 --> 00:43:43,200
so uv1 okay so far good

00:43:40,160 --> 00:43:44,640
alrighty give it few minutes give it

00:43:43,200 --> 00:43:45,040
like 30 seconds i think 30 seconds

00:43:44,640 --> 00:43:55,839
should be

00:43:45,040 --> 00:43:55,839
sufficient v1

00:43:59,680 --> 00:44:03,440
uh again traffic is 100 so so far so

00:44:02,640 --> 00:44:06,880
good now

00:44:03,440 --> 00:44:09,599
let's do the split so

00:44:06,880 --> 00:44:10,640
v1 v4 okay we have deployed v4 but we

00:44:09,599 --> 00:44:12,960
are still directing

00:44:10,640 --> 00:44:15,119
traffic to v1 that's why you're seeing

00:44:12,960 --> 00:44:17,680
v1 now what we are going to do is we

00:44:15,119 --> 00:44:20,240
actually would do a split so see current

00:44:17,680 --> 00:44:23,119
revision name v1 is 50

00:44:20,240 --> 00:44:24,240
candidate v4 that's the revision name we

00:44:23,119 --> 00:44:26,800
tag it and say

00:44:24,240 --> 00:44:28,079
50 50. so now what we are going to do is

00:44:26,800 --> 00:44:32,160
we will split the traffic

00:44:28,079 --> 00:44:37,839
5050 okay and we would

00:44:32,160 --> 00:44:37,839
apply this file

00:44:48,480 --> 00:44:51,839
what did i do

00:44:52,800 --> 00:44:59,359
okay the reason i made a mistake was

00:44:55,280 --> 00:44:59,359
because i had misspelled my container my

00:45:02,839 --> 00:45:05,839
apologies

00:45:09,920 --> 00:45:13,920
okay so we have down a split okay i'll

00:45:12,480 --> 00:45:16,240
give it a little bit of

00:45:13,920 --> 00:45:16,240
time

00:45:17,359 --> 00:45:22,960
cold start problem v4

00:45:20,560 --> 00:45:22,960
v4

00:45:23,920 --> 00:45:29,599
okay we'll give it a little bit of time

00:45:26,240 --> 00:45:29,599
or maybe i can redeploy it

00:45:30,839 --> 00:45:33,839
configured

00:45:34,720 --> 00:45:38,560
let's see what are the pods that are

00:45:36,240 --> 00:45:38,560
running

00:45:39,440 --> 00:45:44,800
we should have plenty of them okay so v1

00:45:42,079 --> 00:45:48,480
is being terminated v4 is now running

00:45:44,800 --> 00:45:50,079
configuration v4 okay so we have v1 and

00:45:48,480 --> 00:45:53,680
we have v4s

00:45:50,079 --> 00:45:55,839
different revisions let's see what

00:45:53,680 --> 00:46:01,839
happens now

00:45:55,839 --> 00:46:01,839
what the hell

00:46:04,400 --> 00:46:08,880
okay why didn't it work earlier oh

00:46:07,200 --> 00:46:11,440
because it probably was in the process

00:46:08,880 --> 00:46:15,839
of deployment

00:46:11,440 --> 00:46:15,839
same command runs

00:46:18,560 --> 00:46:22,000
okay it was the container was

00:46:20,400 --> 00:46:23,119
terminating but now have a look at what

00:46:22,000 --> 00:46:25,280
i'm saying

00:46:23,119 --> 00:46:27,280
i run the same command and i see

00:46:25,280 --> 00:46:28,319
sometimes it says v4 and sometimes it

00:46:27,280 --> 00:46:29,920
says v1

00:46:28,319 --> 00:46:32,400
and the reason is because of traffic

00:46:29,920 --> 00:46:34,160
split what i did was i split the traffic

00:46:32,400 --> 00:46:35,760
50 50

00:46:34,160 --> 00:46:37,680
and 50 percent of the traffic would go

00:46:35,760 --> 00:46:38,319
to v150 percent of traffic would go to

00:46:37,680 --> 00:46:40,240
v4

00:46:38,319 --> 00:46:43,920
so statistically if i was to run this

00:46:40,240 --> 00:46:47,359
command 100 times i would see 50 times

00:46:43,920 --> 00:46:49,119
v1 and 50 times

00:46:47,359 --> 00:46:51,040
v4 statistically of course the actual

00:46:49,119 --> 00:46:53,599
numbers would

00:46:51,040 --> 00:46:55,680
vary a little bit but sure so that's an

00:46:53,599 --> 00:46:58,720
example of let me actually run

00:46:55,680 --> 00:47:11,839
this command and what i would do

00:46:58,720 --> 00:47:11,839
is actually run it 100 times

00:47:12,160 --> 00:47:14,640
there you go

00:47:15,920 --> 00:47:19,680
so here you see the traffic splitting

00:47:18,000 --> 00:47:22,480
now

00:47:19,680 --> 00:47:24,800
um i have very little time remaining so

00:47:22,480 --> 00:47:28,079
i would not go into details of

00:47:24,800 --> 00:47:30,319
this one let me just close this let's

00:47:28,079 --> 00:47:32,240
get back to demo

00:47:30,319 --> 00:47:34,079
the demo is big obviously i don't have

00:47:32,240 --> 00:47:35,839
time to show all of it so i'll just walk

00:47:34,079 --> 00:47:37,760
over some parts so here i'm showing

00:47:35,839 --> 00:47:39,440
traffic splitting auto scaling you can

00:47:37,760 --> 00:47:41,440
scale like essence you can run the auto

00:47:39,440 --> 00:47:43,200
scaler you can have minimum instances so

00:47:41,440 --> 00:47:45,119
you don't want to

00:47:43,200 --> 00:47:47,280
avoid cold problems i say okay let me

00:47:45,119 --> 00:47:48,880
have one instance you run gir pc

00:47:47,280 --> 00:47:50,960
eventing world there's an eventing

00:47:48,880 --> 00:47:52,640
framework how you create events you have

00:47:50,960 --> 00:47:54,240
different let's actually look at a bit

00:47:52,640 --> 00:47:56,000
more complex example

00:47:54,240 --> 00:47:57,280
so here's a complex example where you

00:47:56,000 --> 00:47:59,040
have source

00:47:57,280 --> 00:48:02,000
channels and different subscriptions to

00:47:59,040 --> 00:48:02,000
different services

00:48:02,480 --> 00:48:06,000
so you apply these channels you have an

00:48:04,319 --> 00:48:08,559
in-memory channel that i'm using i have

00:48:06,000 --> 00:48:10,400
a chrome service source that just pings

00:48:08,559 --> 00:48:11,760
so if you look at the eventing framework

00:48:10,400 --> 00:48:15,200
i actually use a

00:48:11,760 --> 00:48:18,720
cron source uh event generator

00:48:15,200 --> 00:48:19,440
uh where is it yeah so k native eventing

00:48:18,720 --> 00:48:22,640
actually

00:48:19,440 --> 00:48:25,680
look at yeah

00:48:22,640 --> 00:48:28,720
look at the key native dogs

00:48:25,680 --> 00:48:33,119
eventing there you go simple

00:48:28,720 --> 00:48:35,680
simple simple simple framework service

00:48:33,119 --> 00:48:37,119
this is the service and this is the

00:48:35,680 --> 00:48:40,000
source

00:48:37,119 --> 00:48:41,760
so you have a chrome ping cron basically

00:48:40,000 --> 00:48:43,359
crown generator and you have a schedule

00:48:41,760 --> 00:48:45,839
running

00:48:43,359 --> 00:48:47,119
so yeah so like i said please feel free

00:48:45,839 --> 00:48:51,440
to

00:48:47,119 --> 00:48:55,200
play with the demo i have my

00:48:51,440 --> 00:48:57,200
i'll just wind up by giving you the link

00:48:55,200 --> 00:48:59,359
there's a slack channel this is my

00:48:57,200 --> 00:49:01,520
twitter handle

00:48:59,359 --> 00:49:02,800
and you have my contact information my

00:49:01,520 --> 00:49:06,319
email my webpage

00:49:02,800 --> 00:49:08,640
if you have any questions now

00:49:06,319 --> 00:49:10,640
please ask if later on you have my

00:49:08,640 --> 00:49:13,359
contact information

00:49:10,640 --> 00:49:14,640
please feel free to connect with me

00:49:13,359 --> 00:49:17,760
anytime

00:49:14,640 --> 00:49:18,559
thank you very much and i hope this was

00:49:17,760 --> 00:49:28,400
useful

00:49:18,559 --> 00:49:28,400

YouTube URL: https://www.youtube.com/watch?v=7-OEGsEArHo


