Title: Lessons Learned in Creating a Mechanical Ventilator with Open Hardware and Open Source Software
Publication date: 2020-12-04
Playlist: Open Source Summit Japan & Automotive Linux Summit 2020
Description: 
	Lessons Learned in Creating a Mechanical Ventilator with Open Hardware and Open Source Software - Luis Herrera Izquierdo, ThoughtWorks
Captions: 
	00:00:05,600 --> 00:00:08,240
hello everyone

00:00:06,879 --> 00:00:10,800
thank you for attending this

00:00:08,240 --> 00:00:11,360
presentation today i will be talking

00:00:10,800 --> 00:00:14,080
about

00:00:11,360 --> 00:00:15,440
lessons learned in creating a mechanical

00:00:14,080 --> 00:00:17,680
ventilator

00:00:15,440 --> 00:00:18,640
with open hardware and open source

00:00:17,680 --> 00:00:20,720
software

00:00:18,640 --> 00:00:22,160
my name is luis herrera i am senior

00:00:20,720 --> 00:00:24,800
consultant developer at the

00:00:22,160 --> 00:00:26,160
words i have been working in the

00:00:24,800 --> 00:00:28,720
technology industry

00:00:26,160 --> 00:00:31,119
for more than seven years in which i

00:00:28,720 --> 00:00:32,079
have been doing system migrations to the

00:00:31,119 --> 00:00:34,480
cloud

00:00:32,079 --> 00:00:36,880
implementing continuous integrations and

00:00:34,480 --> 00:00:38,960
continuous deploy delivery process

00:00:36,880 --> 00:00:39,920
implementing scalable architectures

00:00:38,960 --> 00:00:42,960
architectures

00:00:39,920 --> 00:00:44,640
and building projects so

00:00:42,960 --> 00:00:46,079
specifically at the beginning of the

00:00:44,640 --> 00:00:48,239
pandemic situation

00:00:46,079 --> 00:00:49,360
together with a group of expert

00:00:48,239 --> 00:00:52,399
engineers

00:00:49,360 --> 00:00:54,399
in the area of automotive and electronic

00:00:52,399 --> 00:00:55,840
i was working on the building and

00:00:54,399 --> 00:00:58,079
extension of

00:00:55,840 --> 00:00:59,280
emergency mechanical mechanical

00:00:58,079 --> 00:01:02,000
ventilator

00:00:59,280 --> 00:01:03,280
and across this process that ended with

00:01:02,000 --> 00:01:06,400
a medical approval

00:01:03,280 --> 00:01:08,720
we faced and solved multiple challenges

00:01:06,400 --> 00:01:10,479
that i'm going to share with you on this

00:01:08,720 --> 00:01:12,880
presentation

00:01:10,479 --> 00:01:14,240
so i'm going to cover these uh four

00:01:12,880 --> 00:01:16,320
topics

00:01:14,240 --> 00:01:17,280
so first i'm going to talk about the

00:01:16,320 --> 00:01:20,000
project with the

00:01:17,280 --> 00:01:21,119
development and outcomes with

00:01:20,000 --> 00:01:24,320
accomplished

00:01:21,119 --> 00:01:25,200
also going on to topic number two i'm

00:01:24,320 --> 00:01:27,119
going to

00:01:25,200 --> 00:01:28,240
talk about evolutionary software

00:01:27,119 --> 00:01:30,560
architecture

00:01:28,240 --> 00:01:31,759
but related to microcontrollers so i'm

00:01:30,560 --> 00:01:34,400
going to share

00:01:31,759 --> 00:01:36,479
with you how we got medical requirements

00:01:34,400 --> 00:01:39,600
and how we translated it

00:01:36,479 --> 00:01:41,680
to architectural characteristics on the

00:01:39,600 --> 00:01:43,680
topic number three i'm going to talk

00:01:41,680 --> 00:01:46,159
about this test strategy

00:01:43,680 --> 00:01:46,960
oriented to combine that hardware and

00:01:46,159 --> 00:01:49,439
software

00:01:46,960 --> 00:01:51,119
so here we found some challenges about

00:01:49,439 --> 00:01:53,280
testing and i'm going to

00:01:51,119 --> 00:01:54,159
share it with you these challenges

00:01:53,280 --> 00:01:57,360
because it's

00:01:54,159 --> 00:01:58,399
something common on the iot project on

00:01:57,360 --> 00:02:00,479
topic number

00:01:58,399 --> 00:02:02,560
four i'm going to talk about continuous

00:02:00,479 --> 00:02:04,799
integration and deployment

00:02:02,560 --> 00:02:06,880
for microcontrollers so we know that

00:02:04,799 --> 00:02:07,600
this is a common practice for software

00:02:06,880 --> 00:02:11,440
development

00:02:07,600 --> 00:02:14,160
but when we add hardware and where

00:02:11,440 --> 00:02:15,680
then we need to find new character new

00:02:14,160 --> 00:02:18,800
mechanics to do it

00:02:15,680 --> 00:02:18,800
in a scalable way

00:02:18,959 --> 00:02:25,200
so let's start the project development

00:02:22,239 --> 00:02:26,000
on the month of may and april together

00:02:25,200 --> 00:02:29,680
with a group

00:02:26,000 --> 00:02:33,040
of of expert engineers and with

00:02:29,680 --> 00:02:33,280
oxygen project community support we made

00:02:33,040 --> 00:02:36,000
an

00:02:33,280 --> 00:02:36,800
emergency mechanical ventilator that

00:02:36,000 --> 00:02:40,000
today

00:02:36,800 --> 00:02:41,680
is published on the oxygen community

00:02:40,000 --> 00:02:44,800
page

00:02:41,680 --> 00:02:47,760
so we did this

00:02:44,800 --> 00:02:48,879
in order to solve this problem so if a

00:02:47,760 --> 00:02:51,519
person presents

00:02:48,879 --> 00:02:52,560
serious symptoms caused by the virus

00:02:51,519 --> 00:02:55,680
italy

00:02:52,560 --> 00:02:56,879
they will they will have access to an

00:02:55,680 --> 00:02:59,920
intensive

00:02:56,879 --> 00:03:02,480
care unibed which have

00:02:59,920 --> 00:03:04,159
mechanical ventilators and other

00:03:02,480 --> 00:03:06,879
emergency mechanics

00:03:04,159 --> 00:03:07,519
the plan the problem in our country

00:03:06,879 --> 00:03:11,760
ecuador

00:03:07,519 --> 00:03:15,760
specifically is that at that time in may

00:03:11,760 --> 00:03:18,480
there were only two 256

00:03:15,760 --> 00:03:20,800
intensive care unit beds we talked

00:03:18,480 --> 00:03:21,760
taking into account that in several

00:03:20,800 --> 00:03:24,799
cities

00:03:21,760 --> 00:03:25,920
there was not even even one intensive

00:03:24,799 --> 00:03:29,040
care unit bed

00:03:25,920 --> 00:03:30,319
so if someone presented respiratory

00:03:29,040 --> 00:03:33,519
problems

00:03:30,319 --> 00:03:37,519
there will not have an intensive unibed

00:03:33,519 --> 00:03:40,799
and therefore a mechanical ventilator

00:03:37,519 --> 00:03:43,440
at their disposal if i said with this

00:03:40,799 --> 00:03:44,959
situation we were encouraged to build a

00:03:43,440 --> 00:03:48,239
mechanical ventilator

00:03:44,959 --> 00:03:51,760
from a base of a device tested on

00:03:48,239 --> 00:03:54,560
by unvalidated in spain call it oxyhem

00:03:51,760 --> 00:03:57,599
project ip

00:03:54,560 --> 00:04:00,799
which is open hardware

00:03:57,599 --> 00:04:01,360
so on the process of feeding the device

00:04:00,799 --> 00:04:05,040
we use

00:04:01,360 --> 00:04:07,360
the next tech stack as i mentioned

00:04:05,040 --> 00:04:08,400
we builded each basset on the oxygen

00:04:07,360 --> 00:04:12,560
project

00:04:08,400 --> 00:04:15,680
and since that we we started

00:04:12,560 --> 00:04:18,560
with the first versions we builded

00:04:15,680 --> 00:04:20,959
the wooden version and after some tests

00:04:18,560 --> 00:04:24,960
we move it to the ip version which is

00:04:20,959 --> 00:04:27,600
designed to be built in factories

00:04:24,960 --> 00:04:29,040
okay so on the hardware we also used

00:04:27,600 --> 00:04:31,840
arduino

00:04:29,040 --> 00:04:32,639
to provide configurability and another

00:04:31,840 --> 00:04:35,199
feature

00:04:32,639 --> 00:04:36,400
to the device and this was the value

00:04:35,199 --> 00:04:38,800
that we added

00:04:36,400 --> 00:04:40,400
we we extended it and made it

00:04:38,800 --> 00:04:42,240
configurable

00:04:40,400 --> 00:04:44,639
on the other hand we also use a

00:04:42,240 --> 00:04:46,320
raspberry pi in order to provide a

00:04:44,639 --> 00:04:48,639
graphical user interface

00:04:46,320 --> 00:04:49,440
and see the values related to the volume

00:04:48,639 --> 00:04:51,840
pressure

00:04:49,440 --> 00:04:53,440
and airflow in real time and also to

00:04:51,840 --> 00:04:57,520
send data to the cloud

00:04:53,440 --> 00:04:59,680
in in order to provide traceability

00:04:57,520 --> 00:05:02,479
on the software side we use a platform

00:04:59,680 --> 00:05:05,360
yet which provides multiple benefits

00:05:02,479 --> 00:05:05,919
like a library for testing and agent to

00:05:05,360 --> 00:05:09,039
connect

00:05:05,919 --> 00:05:09,919
with remote device also we use we use a

00:05:09,039 --> 00:05:13,520
c

00:05:09,919 --> 00:05:16,160
in order to develop new libraries and

00:05:13,520 --> 00:05:17,600
to extend what we have found that was

00:05:16,160 --> 00:05:19,680
open source

00:05:17,600 --> 00:05:22,560
also we use a docker to containerize

00:05:19,680 --> 00:05:24,479
application development on node.js

00:05:22,560 --> 00:05:25,919
and github actions to implement

00:05:24,479 --> 00:05:29,520
continuous integrations

00:05:25,919 --> 00:05:29,520
and continuous deployment violence

00:05:29,840 --> 00:05:34,240
okay so let's start now on with

00:05:32,320 --> 00:05:37,360
evolutionary architecture

00:05:34,240 --> 00:05:41,039
and before that let's talk a little bit

00:05:37,360 --> 00:05:44,080
about what means architecture industry

00:05:41,039 --> 00:05:45,280
industry has made a great effort to to

00:05:44,080 --> 00:05:47,919
previously define

00:05:45,280 --> 00:05:50,320
software architecture some architects

00:05:47,919 --> 00:05:52,240
refers to software architecture as the

00:05:50,320 --> 00:05:54,800
blue airplane for the system

00:05:52,240 --> 00:05:56,960
while others define it as a role mark

00:05:54,800 --> 00:06:00,720
for the system development

00:05:56,960 --> 00:06:03,600
so barcelona on the definition made by

00:06:00,720 --> 00:06:04,639
mark richard and neet four in their book

00:06:03,600 --> 00:06:07,280
fundamentals

00:06:04,639 --> 00:06:08,400
of software architecture we see that in

00:06:07,280 --> 00:06:11,600
this definition

00:06:08,400 --> 00:06:13,840
software architecture consists of

00:06:11,600 --> 00:06:15,600
consists of the structure of the system

00:06:13,840 --> 00:06:18,639
combined by the

00:06:15,600 --> 00:06:21,680
architectural characteristics the system

00:06:18,639 --> 00:06:23,840
must support architecture decisions

00:06:21,680 --> 00:06:26,720
and finally design principles so

00:06:23,840 --> 00:06:28,960
following these four principles mrnet

00:06:26,720 --> 00:06:29,919
italy we can define a good software

00:06:28,960 --> 00:06:32,400
architecture

00:06:29,919 --> 00:06:32,960
but as we know over the time the

00:06:32,400 --> 00:06:36,240
business

00:06:32,960 --> 00:06:37,199
requirements changed and so the

00:06:36,240 --> 00:06:40,400
technologies

00:06:37,199 --> 00:06:42,479
that and even good practice

00:06:40,400 --> 00:06:43,440
to develop software can become bad

00:06:42,479 --> 00:06:46,960
practice

00:06:43,440 --> 00:06:50,080
so then once i have

00:06:46,960 --> 00:06:54,880
built an architecture how i can prevent

00:06:50,080 --> 00:06:54,880
it from gradually degrading over time

00:06:54,960 --> 00:07:01,199
so here is when the need of

00:06:58,319 --> 00:07:02,000
find a mechanic to prevent important

00:07:01,199 --> 00:07:05,599
characteristics

00:07:02,000 --> 00:07:08,240
of architecture is born the turning

00:07:05,599 --> 00:07:09,360
of evolutionary architecture by nepal

00:07:08,240 --> 00:07:11,919
rebecca person

00:07:09,360 --> 00:07:13,680
and patrick that says an evolutionary

00:07:11,919 --> 00:07:16,160
architectural support

00:07:13,680 --> 00:07:18,000
guided incremental change across

00:07:16,160 --> 00:07:20,080
multiple dimensions

00:07:18,000 --> 00:07:21,039
so in our project we were deciding on

00:07:20,080 --> 00:07:23,520
each step

00:07:21,039 --> 00:07:25,520
that the architectural characteristi

00:07:23,520 --> 00:07:28,400
will be or guided

00:07:25,520 --> 00:07:30,000
of what we we need to implement and what

00:07:28,400 --> 00:07:33,199
pattern we could use to do

00:07:30,000 --> 00:07:36,400
it and of course to eat to eat

00:07:33,199 --> 00:07:37,440
incrementally and of course to do it

00:07:36,400 --> 00:07:40,800
incrementally

00:07:37,440 --> 00:07:42,720
saying that we will be by voting because

00:07:40,800 --> 00:07:45,840
at the moment

00:07:42,720 --> 00:07:48,800
at that moment there was not a

00:07:45,840 --> 00:07:52,720
a medical guideline to us as an

00:07:48,800 --> 00:07:52,720
emergency mechanical ventilator

00:07:53,039 --> 00:07:57,840
it is in this building process our

00:07:55,280 --> 00:07:58,240
clients were doctors and paramedics of

00:07:57,840 --> 00:08:00,720
the

00:07:58,240 --> 00:08:01,280
intensive care unit who in the initial

00:08:00,720 --> 00:08:04,240
stage

00:08:01,280 --> 00:08:05,120
told us that the device should have a

00:08:04,240 --> 00:08:07,840
mechanic

00:08:05,120 --> 00:08:09,440
to at least measure pressure and

00:08:07,840 --> 00:08:11,919
frequency

00:08:09,440 --> 00:08:12,960
which i wish the first four

00:08:11,919 --> 00:08:16,960
characteristics

00:08:12,960 --> 00:08:19,160
of of the device appeared

00:08:16,960 --> 00:08:20,400
and that were configurability

00:08:19,160 --> 00:08:23,680
extensibility

00:08:20,400 --> 00:08:26,160
and accuracy

00:08:23,680 --> 00:08:27,120
and configurability we have already

00:08:26,160 --> 00:08:28,879
covered

00:08:27,120 --> 00:08:30,400
signs that we were using arduino

00:08:28,879 --> 00:08:33,680
microcontroller

00:08:30,400 --> 00:08:37,599
so we could param para parameter

00:08:33,680 --> 00:08:37,599
the device functionality with that

00:08:38,159 --> 00:08:43,120
so let's start with the first one

00:08:41,519 --> 00:08:44,720
sorry with the second one this is

00:08:43,120 --> 00:08:47,519
extensibility what

00:08:44,720 --> 00:08:50,000
this was one of the features that also

00:08:47,519 --> 00:08:53,360
later allowed to us

00:08:50,000 --> 00:08:55,040
iterated quickly because of the

00:08:53,360 --> 00:08:56,399
easy of adding controls and

00:08:55,040 --> 00:08:59,440
functionality

00:08:56,399 --> 00:09:01,760
at the software level and we cover it by

00:08:59,440 --> 00:09:03,200
creating libraries for the different

00:09:01,760 --> 00:09:06,560
sensors and controls

00:09:03,200 --> 00:09:06,560
that we had in the device

00:09:07,360 --> 00:09:13,120
then how we cover accuracy

00:09:10,640 --> 00:09:14,640
to meet this characteristic uh we added

00:09:13,120 --> 00:09:18,720
to the device

00:09:14,640 --> 00:09:19,360
uh a led display of 16 columns at two

00:09:18,720 --> 00:09:22,240
roads

00:09:19,360 --> 00:09:23,440
which allow it to allow it the user in

00:09:22,240 --> 00:09:26,880
this case the doctor

00:09:23,440 --> 00:09:31,040
who who was managing the device to know

00:09:26,880 --> 00:09:32,000
what to know that he was configuring in

00:09:31,040 --> 00:09:34,880
real time

00:09:32,000 --> 00:09:37,680
in this case a time by using the

00:09:34,880 --> 00:09:39,040
potentiometer

00:09:37,680 --> 00:09:42,640
in this case yeah using the

00:09:39,040 --> 00:09:47,200
potentiometer on this part in the future

00:09:42,640 --> 00:09:49,600
we got a good learning one was because

00:09:47,200 --> 00:09:50,800
on this screen we were printing a

00:09:49,600 --> 00:09:53,600
technical message

00:09:50,800 --> 00:09:54,320
on the run on the road one and we were

00:09:53,600 --> 00:09:57,440
showing

00:09:54,320 --> 00:09:58,800
time two seconds as you can see on the

00:09:57,440 --> 00:10:00,880
on the slide

00:09:58,800 --> 00:10:01,839
and that message never was interpreted

00:10:00,880 --> 00:10:05,440
by the doctor

00:10:01,839 --> 00:10:07,440
and paramedics as frequency saying that

00:10:05,440 --> 00:10:08,720
they react and message in a different

00:10:07,440 --> 00:10:12,240
way

00:10:08,720 --> 00:10:15,040
so another language another learning

00:10:12,240 --> 00:10:15,680
was at the building of process as you

00:10:15,040 --> 00:10:18,320
can see

00:10:15,680 --> 00:10:19,120
the image the device is composed by

00:10:18,320 --> 00:10:22,240
multiple

00:10:19,120 --> 00:10:23,200
spreads and bolts and each one have a

00:10:22,240 --> 00:10:26,079
functionality

00:10:23,200 --> 00:10:27,120
if you put one of another size the

00:10:26,079 --> 00:10:30,560
device

00:10:27,120 --> 00:10:33,920
after a couple of hours of active work

00:10:30,560 --> 00:10:36,079
it starts started failing and that was

00:10:33,920 --> 00:10:38,240
a good action for us because we were

00:10:36,079 --> 00:10:41,200
using another size

00:10:38,240 --> 00:10:43,839
uh at the beginning and you can imagine

00:10:41,200 --> 00:10:43,839
the results

00:10:44,160 --> 00:10:51,279
so we started this journey on march

00:10:47,279 --> 00:10:54,640
24th and as you can see on the image

00:10:51,279 --> 00:10:56,720
we builded the wooden version that was

00:10:54,640 --> 00:10:58,560
one of the first version released by the

00:10:56,720 --> 00:11:01,839
oxygen project

00:10:58,560 --> 00:11:03,519
and we worked remotely so we found that

00:11:01,839 --> 00:11:05,680
so we found somehow it's a way to

00:11:03,519 --> 00:11:06,320
collaborate in a distributed way since

00:11:05,680 --> 00:11:08,000
that

00:11:06,320 --> 00:11:09,680
at that moment we were living in a

00:11:08,000 --> 00:11:12,000
different ways but

00:11:09,680 --> 00:11:12,880
in a different store in different cities

00:11:12,000 --> 00:11:16,000
but

00:11:12,880 --> 00:11:18,640
we were building uh an

00:11:16,000 --> 00:11:19,040
embedded system so we're combining in

00:11:18,640 --> 00:11:24,399
this

00:11:19,040 --> 00:11:24,399
it is this way software and hard work

00:11:24,880 --> 00:11:31,040
so on april on april 5th we delivered

00:11:28,640 --> 00:11:33,440
our first version of the device and we

00:11:31,040 --> 00:11:36,560
got the doctor's approval

00:11:33,440 --> 00:11:38,240
but this was a uh as you did approval

00:11:36,560 --> 00:11:40,640
and in order to get the national

00:11:38,240 --> 00:11:44,000
approval we should go to the

00:11:40,640 --> 00:11:47,519
to the capital city and roon test on the

00:11:44,000 --> 00:11:50,399
sophisticated laboratory

00:11:47,519 --> 00:11:51,120
so on this process kia motors decided to

00:11:50,399 --> 00:11:53,279
join into

00:11:51,120 --> 00:11:54,560
the project and sponsor us in order to

00:11:53,279 --> 00:11:58,240
collaborate with

00:11:54,560 --> 00:12:01,279
with improved or changes and then

00:11:58,240 --> 00:12:04,399
build it onto a kia motor factory

00:12:01,279 --> 00:12:08,240
to donate to the hospital

00:12:04,399 --> 00:12:11,040
and on april 11 we ran the first test

00:12:08,240 --> 00:12:11,680
on the capital city but at that moment

00:12:11,040 --> 00:12:14,480
since that

00:12:11,680 --> 00:12:15,200
ecuadorian legislation there was not a

00:12:14,480 --> 00:12:18,639
document

00:12:15,200 --> 00:12:19,440
or law that could tell us what are the

00:12:18,639 --> 00:12:23,600
guidelines

00:12:19,440 --> 00:12:26,800
that we should follow we we got that

00:12:23,600 --> 00:12:29,519
approval so our device was not approved

00:12:26,800 --> 00:12:29,519
at that moment

00:12:30,000 --> 00:12:36,399
and it was evaluated based on the

00:12:32,399 --> 00:12:36,399
doctors and paramedic experiences

00:12:36,480 --> 00:12:39,760
and they decided that in order to

00:12:38,480 --> 00:12:42,560
approve

00:12:39,760 --> 00:12:45,360
in order to provide their approval the

00:12:42,560 --> 00:12:47,440
device should have another functionality

00:12:45,360 --> 00:12:50,320
which they found are essential for

00:12:47,440 --> 00:12:53,519
doctors and paramedics like

00:12:50,320 --> 00:12:57,279
see in a real time a colors in a

00:12:53,519 --> 00:13:00,720
color screen pressured volume frequency

00:12:57,279 --> 00:13:04,240
the a floor and visual or altitude

00:13:00,720 --> 00:13:06,959
alarms and as you can see here

00:13:04,240 --> 00:13:08,399
the requested frequency uh that was

00:13:06,959 --> 00:13:11,440
something that we already

00:13:08,399 --> 00:13:13,920
already have done but science

00:13:11,440 --> 00:13:14,959
that where that we were using a tech

00:13:13,920 --> 00:13:17,519
language

00:13:14,959 --> 00:13:18,880
they're not accepted that because they

00:13:17,519 --> 00:13:21,600
told at the moment that

00:13:18,880 --> 00:13:24,079
it could generate confusion with the end

00:13:21,600 --> 00:13:24,079
user

00:13:24,560 --> 00:13:29,920
so we so we translated

00:13:28,160 --> 00:13:31,200
the client business language to the

00:13:29,920 --> 00:13:34,399
technical one

00:13:31,200 --> 00:13:37,279
and we found these three characteristics

00:13:34,399 --> 00:13:38,399
that are which are traceability filer

00:13:37,279 --> 00:13:42,160
transparency

00:13:38,399 --> 00:13:42,959
and simplicity so how we accomplish the

00:13:42,160 --> 00:13:46,160
first one

00:13:42,959 --> 00:13:49,600
so this so this

00:13:46,160 --> 00:13:50,880
characteristic which was also essential

00:13:49,600 --> 00:13:53,839
to know

00:13:50,880 --> 00:13:54,959
what was happening science uh since the

00:13:53,839 --> 00:13:58,399
first time that we

00:13:54,959 --> 00:14:02,000
that the machine is turning on and also

00:13:58,399 --> 00:14:04,320
for brad to grab onto on the screen

00:14:02,000 --> 00:14:05,839
we could accomplish it by transmitting

00:14:04,320 --> 00:14:10,240
transmitting or sending

00:14:05,839 --> 00:14:12,800
data by a chariot by the serial port

00:14:10,240 --> 00:14:14,399
from the microcontroller to the computer

00:14:12,800 --> 00:14:17,680
in this case

00:14:14,399 --> 00:14:20,320
if the computer was the raspberry pi

00:14:17,680 --> 00:14:22,399
so on the microcontroller we defined it

00:14:20,320 --> 00:14:25,519
and a structure to transmit the data

00:14:22,399 --> 00:14:27,519
and we used it across all the system

00:14:25,519 --> 00:14:30,160
so this was the way how we could

00:14:27,519 --> 00:14:33,680
accomplish it is

00:14:30,160 --> 00:14:36,399
this characteristic then

00:14:33,680 --> 00:14:37,680
failure transparency to mist to meet

00:14:36,399 --> 00:14:41,040
this characteristic

00:14:37,680 --> 00:14:42,160
at the software level and combine it

00:14:41,040 --> 00:14:45,040
with the hardware

00:14:42,160 --> 00:14:45,920
we use it as some global variables that

00:14:45,040 --> 00:14:49,199
we

00:14:45,920 --> 00:14:52,160
that were accumulated and answers once

00:14:49,199 --> 00:14:53,600
they passed the limit values uh that we

00:14:52,160 --> 00:14:56,079
said

00:14:53,600 --> 00:14:57,279
at the start of the device it emitted

00:14:56,079 --> 00:15:01,440
the alarm signal

00:14:57,279 --> 00:15:03,600
to turn on the red led

00:15:01,440 --> 00:15:05,040
and the booster the booster is a kind of

00:15:03,600 --> 00:15:08,320
device that emits

00:15:05,040 --> 00:15:11,440
a zone so we could accomplish

00:15:08,320 --> 00:15:12,639
this visual and audio alarms

00:15:11,440 --> 00:15:16,480
requirements

00:15:12,639 --> 00:15:19,600
in this way then we have simplicity

00:15:16,480 --> 00:15:20,480
so to accomplish to to accomplish this

00:15:19,600 --> 00:15:23,760
characteristic

00:15:20,480 --> 00:15:27,040
we added buttons to the device

00:15:23,760 --> 00:15:29,440
which which will

00:15:27,040 --> 00:15:30,399
allow to the user to set the control

00:15:29,440 --> 00:15:34,399
mode

00:15:30,399 --> 00:15:38,320
either by volume or frequency so

00:15:34,399 --> 00:15:41,920
this way we have two options

00:15:38,320 --> 00:15:44,880
um to run the device and also

00:15:41,920 --> 00:15:46,160
another thing that we added or another

00:15:44,880 --> 00:15:48,000
option we added

00:15:46,160 --> 00:15:49,600
that we added to the device was to

00:15:48,000 --> 00:15:52,959
select the installed car

00:15:49,600 --> 00:15:55,360
cam so basically

00:15:52,959 --> 00:15:57,279
we added that functionality because the

00:15:55,360 --> 00:16:00,320
device is composed

00:15:57,279 --> 00:16:04,000
by uh ambled back and

00:16:00,320 --> 00:16:04,720
by a can this can put a pressure to the

00:16:04,000 --> 00:16:08,079
back and

00:16:04,720 --> 00:16:12,480
and with that this emit uh

00:16:08,079 --> 00:16:15,920
this emit uh the boolean of the airflow

00:16:12,480 --> 00:16:18,079
and the april um

00:16:15,920 --> 00:16:19,519
another functionality that we added also

00:16:18,079 --> 00:16:22,800
with these three buttons

00:16:19,519 --> 00:16:26,590
is a possibility to reboot

00:16:22,800 --> 00:16:28,000
or to reset the device

00:16:26,590 --> 00:16:31,920
[Music]

00:16:28,000 --> 00:16:34,880
then another functionality

00:16:31,920 --> 00:16:36,320
that we also added was or another

00:16:34,880 --> 00:16:39,839
functionality that is

00:16:36,320 --> 00:16:43,279
of course related with the architecture

00:16:39,839 --> 00:16:46,560
was the testability

00:16:43,279 --> 00:16:49,440
and now we are going to talk about about

00:16:46,560 --> 00:16:50,880
it more indeed because this is this is a

00:16:49,440 --> 00:16:54,240
really big topic

00:16:50,880 --> 00:16:57,519
um science that we combine this

00:16:54,240 --> 00:16:57,519
software and hardware

00:16:59,040 --> 00:17:02,160
so testing image controller in

00:17:01,040 --> 00:17:04,319
microcontrollers

00:17:02,160 --> 00:17:05,919
is a testing process to check the

00:17:04,319 --> 00:17:06,880
functionality the functional and

00:17:05,919 --> 00:17:10,559
non-functional

00:17:06,880 --> 00:17:14,000
attributes of both software

00:17:10,559 --> 00:17:17,360
and hardware in that if we combine

00:17:14,000 --> 00:17:20,000
these this becomes an embedded system

00:17:17,360 --> 00:17:22,160
in order to in order to ensure that the

00:17:20,000 --> 00:17:26,480
final product is free

00:17:22,160 --> 00:17:28,720
of defect the main purpose of

00:17:26,480 --> 00:17:29,520
embedded testing is to verify and

00:17:28,720 --> 00:17:31,679
validate

00:17:29,520 --> 00:17:33,919
whether or not the final hardware and

00:17:31,679 --> 00:17:35,760
software product meets the customers

00:17:33,919 --> 00:17:38,480
requirement

00:17:35,760 --> 00:17:38,960
so software testing in embedded system

00:17:38,480 --> 00:17:41,679
is an

00:17:38,960 --> 00:17:43,440
excellent approach to ensure safety and

00:17:41,679 --> 00:17:46,640
critical applications

00:17:43,440 --> 00:17:50,880
such as medical equipment aviation

00:17:46,640 --> 00:17:50,880
automotive industry and so on

00:17:51,120 --> 00:17:57,919
and maybe this image is familiar

00:17:54,160 --> 00:18:01,360
for you because we commonly we commonly

00:17:57,919 --> 00:18:04,400
see it into software testing

00:18:01,360 --> 00:18:07,919
but we can use the same reference for

00:18:04,400 --> 00:18:11,520
for system that involves hardware

00:18:07,919 --> 00:18:14,559
although the cause is higher

00:18:11,520 --> 00:18:17,039
for signs that is higher

00:18:14,559 --> 00:18:18,480
for this kind of project that involves

00:18:17,039 --> 00:18:21,280
hardware

00:18:18,480 --> 00:18:22,320
signs that usually not all developers

00:18:21,280 --> 00:18:26,080
can have

00:18:22,320 --> 00:18:26,080
the device for testing purpose

00:18:27,520 --> 00:18:35,039
all right so how are this unit testing

00:18:32,000 --> 00:18:35,039
an embedded system

00:18:35,120 --> 00:18:38,480
for embedded system on this test type

00:18:37,600 --> 00:18:41,200
developers

00:18:38,480 --> 00:18:43,120
test at a model level by writing

00:18:41,200 --> 00:18:46,880
substitute object

00:18:43,120 --> 00:18:48,880
that we know as mock to replace

00:18:46,880 --> 00:18:50,480
in order to replace the rest of the

00:18:48,880 --> 00:18:54,080
system hardware

00:18:50,480 --> 00:18:59,280
and software so in this case

00:18:54,080 --> 00:18:59,280
the developer mocks votes and

00:19:00,240 --> 00:19:03,840
and at this point it's a development

00:19:03,200 --> 00:19:06,880
cycle

00:19:03,840 --> 00:19:08,160
to just focus on the logical performance

00:19:06,880 --> 00:19:13,120
of the code

00:19:08,160 --> 00:19:13,120
and are usually executed quickly

00:19:13,919 --> 00:19:25,840
here we can see an example of

00:19:17,039 --> 00:19:25,840
how we can run tests for embedded system

00:19:31,440 --> 00:19:37,280
all right so then let's talk about

00:19:35,360 --> 00:19:38,720
integration testing for a better for

00:19:37,280 --> 00:19:41,360
embedded system

00:19:38,720 --> 00:19:43,440
and these have a unique feature which is

00:19:41,360 --> 00:19:47,039
focused on the actual device

00:19:43,440 --> 00:19:49,120
on which the software is running and

00:19:47,039 --> 00:19:51,039
this makes a little more complex to

00:19:49,120 --> 00:19:52,720
write test because it is really complex

00:19:51,039 --> 00:19:55,520
to simulate conditions

00:19:52,720 --> 00:19:56,880
and comparing to the unit test this

00:19:55,520 --> 00:20:00,000
takes a little longer

00:19:56,880 --> 00:20:02,720
to be executed and you need

00:20:00,000 --> 00:20:04,880
another thing is that you need to have

00:20:02,720 --> 00:20:08,240
access to the device to run it

00:20:04,880 --> 00:20:11,919
so if you have

00:20:08,240 --> 00:20:14,480
a a big thing uh

00:20:11,919 --> 00:20:15,760
definitely you will you you need to find

00:20:14,480 --> 00:20:18,320
a way to

00:20:15,760 --> 00:20:19,360
to have access or to provide access to

00:20:18,320 --> 00:20:24,960
the device

00:20:19,360 --> 00:20:29,120
and in order to run integration tests

00:20:24,960 --> 00:20:31,360
so here we have another example of how

00:20:29,120 --> 00:20:32,480
we run testing our project this is

00:20:31,360 --> 00:20:35,840
specifically

00:20:32,480 --> 00:20:35,840
integration test

00:20:50,080 --> 00:20:52,400
okay

00:20:53,280 --> 00:20:59,919
so then we have in this process

00:20:56,720 --> 00:21:01,679
when we were doing this type of this

00:20:59,919 --> 00:21:06,480
different type of stuff

00:21:01,679 --> 00:21:08,799
this um we didn't talk

00:21:06,480 --> 00:21:10,720
more deeply about end-to-end tests

00:21:08,799 --> 00:21:14,000
because on that process

00:21:10,720 --> 00:21:17,280
uh that kind of test was manually

00:21:14,000 --> 00:21:22,159
and that was uh done by two doctors

00:21:17,280 --> 00:21:24,799
paramedic that was and that were the

00:21:22,159 --> 00:21:25,919
stakeholders uh compromised with the

00:21:24,799 --> 00:21:28,960
project

00:21:25,919 --> 00:21:31,840
so they were doing that uh

00:21:28,960 --> 00:21:33,440
test and as i mentioned before they were

00:21:31,840 --> 00:21:36,880
doing manually

00:21:33,440 --> 00:21:40,640
so basically that kind of test

00:21:36,880 --> 00:21:45,679
uh usually um uh

00:21:40,640 --> 00:21:48,799
usually that that was longer test so

00:21:45,679 --> 00:21:51,039
that take almost one or two days uh to

00:21:48,799 --> 00:21:54,080
accomplish that end-to-end test

00:21:51,039 --> 00:21:55,679
but on the unit and integration test we

00:21:54,080 --> 00:22:00,640
found some challenges

00:21:55,679 --> 00:22:02,480
um that i'm going to tell a little bit

00:22:00,640 --> 00:22:03,679
so the first one was hardware

00:22:02,480 --> 00:22:06,320
dependencies

00:22:03,679 --> 00:22:06,960
is one of the main difficulties that we

00:22:06,320 --> 00:22:09,760
faced

00:22:06,960 --> 00:22:10,799
during integration testing science that

00:22:09,760 --> 00:22:12,960
in some cases

00:22:10,799 --> 00:22:14,320
there is limited access to the hardware

00:22:12,960 --> 00:22:17,360
um

00:22:14,320 --> 00:22:18,320
in some cases emulate emulators and

00:22:17,360 --> 00:22:20,240
simulators

00:22:18,320 --> 00:22:22,960
can be used but they might not

00:22:20,240 --> 00:22:26,000
accurately represent the behavior of the

00:22:22,960 --> 00:22:29,039
actual device device um

00:22:26,000 --> 00:22:30,960
could give our own idea of the system

00:22:29,039 --> 00:22:33,600
performance and the usability of the

00:22:30,960 --> 00:22:33,600
application

00:22:34,640 --> 00:22:40,400
so then we have open source

00:22:37,679 --> 00:22:42,080
software library and most models of the

00:22:40,400 --> 00:22:45,440
iot area

00:22:42,080 --> 00:22:48,799
have open source library and regularly

00:22:45,440 --> 00:22:52,720
this comes without automatic testing

00:22:48,799 --> 00:22:55,679
so there is a way a wide range

00:22:52,720 --> 00:22:56,880
of test combinations um and resulting in

00:22:55,679 --> 00:22:59,440
scenarios

00:22:56,880 --> 00:23:00,080
that you can do when you implement it in

00:22:59,440 --> 00:23:03,120
a

00:23:00,080 --> 00:23:05,440
in a new hardware that you are building

00:23:03,120 --> 00:23:07,760
and that was something that happened to

00:23:05,440 --> 00:23:09,360
us so saying that we were using some

00:23:07,760 --> 00:23:13,679
open source library

00:23:09,360 --> 00:23:16,880
after we implemented it we

00:23:13,679 --> 00:23:20,320
we we was we were told

00:23:16,880 --> 00:23:22,640
how we could test this because was

00:23:20,320 --> 00:23:25,760
a different different uh combinations

00:23:22,640 --> 00:23:25,760
that we did at that moment

00:23:25,840 --> 00:23:28,880
and the scenarios that we wanted to

00:23:27,520 --> 00:23:33,120
cover

00:23:28,880 --> 00:23:36,000
was uh a little a literal difference

00:23:33,120 --> 00:23:36,880
of how the library was built at the or

00:23:36,000 --> 00:23:40,400
was

00:23:36,880 --> 00:23:40,400
yeah was building at the beginning

00:23:41,919 --> 00:23:46,559
another aspect that this is related with

00:23:44,640 --> 00:23:49,840
the fact that the software

00:23:46,559 --> 00:23:53,200
versus hardware

00:23:49,840 --> 00:23:54,159
aspect is that we when when you are

00:23:53,200 --> 00:23:56,960
developing

00:23:54,159 --> 00:23:58,720
software for newly created hardware

00:23:56,960 --> 00:23:59,120
there are possibilities that you could

00:23:58,720 --> 00:24:02,480
face

00:23:59,120 --> 00:24:03,360
with hardware failures at the building

00:24:02,480 --> 00:24:05,919
phase

00:24:03,360 --> 00:24:06,480
sort of the fact that you could phone

00:24:05,919 --> 00:24:10,159
are not

00:24:06,480 --> 00:24:10,720
limited to the software uh since that it

00:24:10,159 --> 00:24:13,760
can

00:24:10,720 --> 00:24:15,200
also be related to the hardware we face

00:24:13,760 --> 00:24:17,919
it that

00:24:15,200 --> 00:24:18,640
every time that we change it in in our

00:24:17,919 --> 00:24:20,400
project

00:24:18,640 --> 00:24:21,919
every time that we changed the version

00:24:20,400 --> 00:24:25,200
of our device

00:24:21,919 --> 00:24:29,440
um that was two times that we did this

00:24:25,200 --> 00:24:32,960
change um and simple things like

00:24:29,440 --> 00:24:34,320
installability uh good faith in this

00:24:32,960 --> 00:24:37,520
part

00:24:34,320 --> 00:24:39,200
so so yeah

00:24:37,520 --> 00:24:40,640
and sometimes you could think that this

00:24:39,200 --> 00:24:42,799
software but

00:24:40,640 --> 00:24:46,240
the truth is that is something related

00:24:42,799 --> 00:24:49,919
with the hardware

00:24:46,240 --> 00:24:52,400
then we have reproducible the fat

00:24:49,919 --> 00:24:55,039
the fats are more difficult to reproduce

00:24:52,400 --> 00:24:58,840
or recreate an embedded system

00:24:55,039 --> 00:25:02,279
this makes the build says process

00:24:58,840 --> 00:25:04,799
procedure appreciate each defect

00:25:02,279 --> 00:25:05,679
substantially more than the standard

00:25:04,799 --> 00:25:08,480
case

00:25:05,679 --> 00:25:10,400
apart from from entering as much data

00:25:08,480 --> 00:25:13,760
sensibility needed to

00:25:10,400 --> 00:25:16,159
alter the system to find the basis of

00:25:13,760 --> 00:25:16,799
the fed so this is happening also to us

00:25:16,159 --> 00:25:19,840
when we

00:25:16,799 --> 00:25:22,480
when we change it to another version as

00:25:19,840 --> 00:25:24,799
i mentioned also in the previous uh

00:25:22,480 --> 00:25:27,919
challenges that we resolved

00:25:24,799 --> 00:25:30,960
and this was more specifically when we

00:25:27,919 --> 00:25:34,000
installed a sensor that was working with

00:25:30,960 --> 00:25:36,320
uh inverted logic so when you detect

00:25:34,000 --> 00:25:38,080
it when this was detecting something it

00:25:36,320 --> 00:25:40,400
was emitting zero

00:25:38,080 --> 00:25:41,440
and with and when not it was emitting

00:25:40,400 --> 00:25:44,559
one

00:25:41,440 --> 00:25:47,200
so we thought that we had

00:25:44,559 --> 00:25:48,080
at the moment a software defect but

00:25:47,200 --> 00:25:50,400
science that we had

00:25:48,080 --> 00:25:52,240
some tests on automatic tests we could

00:25:50,400 --> 00:25:56,000
see it in a fast way that the problem

00:25:52,240 --> 00:25:58,640
wasn't the sensor

00:25:56,000 --> 00:25:59,039
all right let's go back to the journey

00:25:58,640 --> 00:26:01,600
that

00:25:59,039 --> 00:26:03,760
related with the test of the device so

00:26:01,600 --> 00:26:05,760
after the doctor's recommendation

00:26:03,760 --> 00:26:08,559
we started working on the improvements

00:26:05,760 --> 00:26:10,799
together with kia motors

00:26:08,559 --> 00:26:11,840
with the support of kia motor and we

00:26:10,799 --> 00:26:15,679
will run

00:26:11,840 --> 00:26:19,679
the next test on april 20 27th

00:26:15,679 --> 00:26:19,679
with um

00:26:20,480 --> 00:26:25,760
yeah we run this um but at this moment

00:26:22,799 --> 00:26:28,480
the device was not appropriate

00:26:25,760 --> 00:26:28,480
at this moment

00:26:28,960 --> 00:26:32,080
they recommended to us to do another

00:26:31,200 --> 00:26:35,760
change

00:26:32,080 --> 00:26:39,120
change but finally on

00:26:35,760 --> 00:26:42,400
at mate 12 on ecuador was

00:26:39,120 --> 00:26:46,080
published for first time a normative

00:26:42,400 --> 00:26:49,120
or a love that have the guidelines

00:26:46,080 --> 00:26:50,799
on which any initiative related with

00:26:49,120 --> 00:26:53,919
mechanical ventilator

00:26:50,799 --> 00:26:57,120
could be assessed so

00:26:53,919 --> 00:26:59,679
it was really helpful for us because for

00:26:57,120 --> 00:27:01,760
first time we have something to follow

00:26:59,679 --> 00:27:04,840
and to build our device

00:27:01,760 --> 00:27:06,799
and this was also helpful for another

00:27:04,840 --> 00:27:09,840
initiative

00:27:06,799 --> 00:27:13,120
because we at that moment

00:27:09,840 --> 00:27:15,360
the on the country were

00:27:13,120 --> 00:27:20,080
a multiple scenario related with

00:27:15,360 --> 00:27:23,360
mechanical ventilators

00:27:20,080 --> 00:27:26,720
so bastard onto new legislation or law

00:27:23,360 --> 00:27:27,760
we did some improve in our device and we

00:27:26,720 --> 00:27:29,919
started

00:27:27,760 --> 00:27:34,399
to have progress on the on the opera on

00:27:29,919 --> 00:27:37,440
the probation process

00:27:34,399 --> 00:27:38,799
we did all final final test on another

00:27:37,440 --> 00:27:42,080
laboratory

00:27:38,799 --> 00:27:44,960
and it was successful so then

00:27:42,080 --> 00:27:48,559
we were ready to to deliver our

00:27:44,960 --> 00:27:51,840
emergency mechanical ventilator

00:27:48,559 --> 00:27:52,799
and that moves us to the next part that

00:27:51,840 --> 00:27:56,159
is

00:27:52,799 --> 00:28:01,200
as you can see here this amazing

00:27:56,159 --> 00:28:01,200
is amazing people did possible

00:28:01,520 --> 00:28:05,679
what we've accomplished it and also as

00:28:04,159 --> 00:28:07,520
you can see

00:28:05,679 --> 00:28:09,520
all this integration that we have in

00:28:07,520 --> 00:28:11,120
this short time at this short period of

00:28:09,520 --> 00:28:14,320
time

00:28:11,120 --> 00:28:15,279
but in this image also you can see that

00:28:14,320 --> 00:28:18,720
we had

00:28:15,279 --> 00:28:21,840
or that we did three different versions

00:28:18,720 --> 00:28:23,760
starting from the wooden version and

00:28:21,840 --> 00:28:27,039
then to the most

00:28:23,760 --> 00:28:27,039
sophisticated version

00:28:28,240 --> 00:28:32,640
so we delivery or device onto esmeralda

00:28:31,919 --> 00:28:34,720
city

00:28:32,640 --> 00:28:36,559
where this project started in an

00:28:34,720 --> 00:28:39,760
official ceremony where

00:28:36,559 --> 00:28:41,679
what springs and local authorities

00:28:39,760 --> 00:28:43,600
and this is how it looks to the bias

00:28:41,679 --> 00:28:47,520
that worked with

00:28:43,600 --> 00:28:47,960
the humble back and account

00:28:47,520 --> 00:28:51,079
so

00:28:47,960 --> 00:28:51,079
[Music]

00:28:51,279 --> 00:28:59,840
let's plate the video

00:29:16,000 --> 00:29:20,000
all right so then let's move to the next

00:29:18,880 --> 00:29:22,000
part that is

00:29:20,000 --> 00:29:23,039
continuous integration and continue

00:29:22,000 --> 00:29:25,600
deployment

00:29:23,039 --> 00:29:26,960
we think that we what made possible

00:29:25,600 --> 00:29:30,720
iterated in a

00:29:26,960 --> 00:29:33,039
in a in a fast way the finale

00:29:30,720 --> 00:29:34,880
was the implementation of continuous

00:29:33,039 --> 00:29:36,720
integrations and continued delivery

00:29:34,880 --> 00:29:40,640
process from the beginning

00:29:36,720 --> 00:29:43,679
so after after the develop

00:29:40,640 --> 00:29:46,480
that we made uh and you create

00:29:43,679 --> 00:29:47,200
i mean create a new feature or extended

00:29:46,480 --> 00:29:50,640
it

00:29:47,200 --> 00:29:54,240
as what's really easy

00:29:50,640 --> 00:29:57,120
um so

00:29:54,240 --> 00:29:58,080
in this this part we created a a kind of

00:29:57,120 --> 00:30:00,960
workflow

00:29:58,080 --> 00:30:01,679
and as i mentioned it at the beginning

00:30:00,960 --> 00:30:05,200
we used

00:30:01,679 --> 00:30:09,840
github actions in order to integrate

00:30:05,200 --> 00:30:14,000
um and and deliver

00:30:09,840 --> 00:30:17,279
the software to the hardware

00:30:14,000 --> 00:30:21,039
so how how looks this process

00:30:17,279 --> 00:30:22,159
so basically let's say that a developer

00:30:21,039 --> 00:30:25,200
complete a feature

00:30:22,159 --> 00:30:28,799
or extend extended one

00:30:25,200 --> 00:30:32,559
this developer does a push

00:30:28,799 --> 00:30:35,120
to the repository so then we have

00:30:32,559 --> 00:30:37,679
on this part we have the github actions

00:30:35,120 --> 00:30:40,799
that is listening for any change on the

00:30:37,679 --> 00:30:43,279
on the main branch so basically when a

00:30:40,799 --> 00:30:47,520
new change

00:30:43,279 --> 00:30:50,880
is done of this branch this um

00:30:47,520 --> 00:30:53,520
this pylon is triggered

00:30:50,880 --> 00:30:54,720
and they this file and start getting all

00:30:53,520 --> 00:30:58,000
the code

00:30:54,720 --> 00:30:59,840
that half the the main branch

00:30:58,000 --> 00:31:02,320
the entities proceed to install

00:30:59,840 --> 00:31:05,279
dependencies

00:31:02,320 --> 00:31:06,320
and as the first step is start to run

00:31:05,279 --> 00:31:10,880
unit test

00:31:06,320 --> 00:31:10,880
and for that unit test basically

00:31:11,120 --> 00:31:18,559
what we need at that moment is the core

00:31:14,640 --> 00:31:22,159
c plus plus language and some libraries

00:31:18,559 --> 00:31:25,840
so this is how we can how we

00:31:22,159 --> 00:31:28,880
accomplish it to run this unit test

00:31:25,840 --> 00:31:29,440
then after this pass is done in a good

00:31:28,880 --> 00:31:32,799
way

00:31:29,440 --> 00:31:36,159
i mean all the tests as

00:31:32,799 --> 00:31:38,880
it is in this in this step then

00:31:36,159 --> 00:31:40,399
as necessary the pylon front integration

00:31:38,880 --> 00:31:42,320
test

00:31:40,399 --> 00:31:44,480
after that at the beginning we thought

00:31:42,320 --> 00:31:48,159
that we could use arduino

00:31:44,480 --> 00:31:50,399
um i mean and some libraries but

00:31:48,159 --> 00:31:52,000
through us at the moment that as i

00:31:50,399 --> 00:31:53,360
mentioned also something that

00:31:52,000 --> 00:31:56,159
of the challenges that i mentioned

00:31:53,360 --> 00:31:58,000
before in order to run integration tests

00:31:56,159 --> 00:32:00,559
we need to device or we need to

00:31:58,000 --> 00:32:02,240
communication with the device so in

00:32:00,559 --> 00:32:05,360
order to accomplish

00:32:02,240 --> 00:32:10,240
this part we used a

00:32:05,360 --> 00:32:13,279
platformer platform agents so basically

00:32:10,240 --> 00:32:16,399
we we run a platform as in

00:32:13,279 --> 00:32:18,880
in a raspberry pi and this

00:32:16,399 --> 00:32:20,720
was connected to the internet but also

00:32:18,880 --> 00:32:25,279
this rapper byte have

00:32:20,720 --> 00:32:29,600
connected an arduino by a usb

00:32:25,279 --> 00:32:30,559
so every time that a new developer was

00:32:29,600 --> 00:32:33,440
doing a change

00:32:30,559 --> 00:32:34,480
the pilot was using an agent and this

00:32:33,440 --> 00:32:37,120
searching was

00:32:34,480 --> 00:32:38,080
talking to the raspberry pi and signs

00:32:37,120 --> 00:32:41,600
and raspberry pi

00:32:38,080 --> 00:32:43,200
have access to the real device all these

00:32:41,600 --> 00:32:45,760
integration tests

00:32:43,200 --> 00:32:48,960
were all these integration tests were

00:32:45,760 --> 00:32:48,960
working in a good way

00:32:49,039 --> 00:32:56,080
so that was how we accomplished a room

00:32:52,240 --> 00:32:59,200
or have a communication with a

00:32:56,080 --> 00:32:59,200
with a real device

00:32:59,519 --> 00:33:03,679
and then also this this is that worked

00:33:02,080 --> 00:33:06,640
for the deploying firmware

00:33:03,679 --> 00:33:08,320
signs that we have connected to the to

00:33:06,640 --> 00:33:11,840
the real device and the

00:33:08,320 --> 00:33:12,480
unit integration test was working in a

00:33:11,840 --> 00:33:14,960
good way

00:33:12,480 --> 00:33:17,279
then the last state that we had is to

00:33:14,960 --> 00:33:21,039
deploy the firmware

00:33:17,279 --> 00:33:24,080
so how looks this pylon

00:33:21,039 --> 00:33:25,039
so the good part of cut action is that

00:33:24,080 --> 00:33:28,480
you can define

00:33:25,039 --> 00:33:31,279
it with code so

00:33:28,480 --> 00:33:32,480
we define that is by using this pylons

00:33:31,279 --> 00:33:35,679
code and

00:33:32,480 --> 00:33:37,760
we we added another part

00:33:35,679 --> 00:33:40,640
i mean we added the part to communicate

00:33:37,760 --> 00:33:43,440
with uh with the device as you can see

00:33:40,640 --> 00:33:44,240
until line 29 the way that we can

00:33:43,440 --> 00:33:47,200
communicate

00:33:44,240 --> 00:33:48,399
with with uh with the agent is by using

00:33:47,200 --> 00:33:51,440
a token

00:33:48,399 --> 00:33:52,320
that you generate the first time that

00:33:51,440 --> 00:33:54,159
you

00:33:52,320 --> 00:33:55,840
i mean when after this is a login you

00:33:54,159 --> 00:33:58,240
generate that token and then

00:33:55,840 --> 00:34:00,159
this is the way how to the pilot can

00:33:58,240 --> 00:34:01,679
talk to the device

00:34:00,159 --> 00:34:04,880
and most importantly here is that you

00:34:01,679 --> 00:34:08,399
can inject it by using secret

00:34:04,880 --> 00:34:10,320
so there is not already

00:34:08,399 --> 00:34:12,960
you know to be to dispose this

00:34:10,320 --> 00:34:12,960
information

00:34:13,919 --> 00:34:19,040
all right so this is an example of how

00:34:18,399 --> 00:34:21,839
to the

00:34:19,040 --> 00:34:21,839
and runs

00:34:41,119 --> 00:34:44,800
so this is the first step where is

00:34:42,879 --> 00:34:45,119
building and running tests the first one

00:34:44,800 --> 00:34:50,079
is

00:34:45,119 --> 00:34:50,079
unit test and this is

00:34:50,399 --> 00:34:53,919
when this is fast but then we have

00:34:52,560 --> 00:34:56,560
iteration test

00:34:53,919 --> 00:34:57,119
where uh the pilot communicate with the

00:34:56,560 --> 00:35:00,960
agent

00:34:57,119 --> 00:35:05,839
and this takes a little more time

00:35:00,960 --> 00:35:05,839
among if we translate this more second

00:35:14,839 --> 00:35:20,160
basically

00:35:16,720 --> 00:35:31,839
and then as last step we have the

00:35:20,160 --> 00:35:31,839
fieldwork deployment

00:35:33,520 --> 00:35:40,160
yeah so it is

00:35:37,040 --> 00:35:42,640
it is communicating with the uh

00:35:40,160 --> 00:35:45,520
raspberry and then it's uploading the

00:35:42,640 --> 00:35:48,560
the new firmware version

00:35:45,520 --> 00:35:48,560
this in this step

00:35:54,240 --> 00:36:02,960
right yeah this takes

00:35:59,520 --> 00:36:06,720
um it's done so this is an example of

00:36:02,960 --> 00:36:10,720
how we we were iteration integrating

00:36:06,720 --> 00:36:13,040
uh code and until deployment

00:36:10,720 --> 00:36:15,599
of the fif the fifth word to the to the

00:36:13,040 --> 00:36:15,599
half word

00:36:20,400 --> 00:36:26,320
all right so if we analyze all these

00:36:24,320 --> 00:36:28,160
or what we'd accomplished on this

00:36:26,320 --> 00:36:31,440
project we have

00:36:28,160 --> 00:36:35,040
this outcome so we did basically

00:36:31,440 --> 00:36:38,079
fight showcase in three months um

00:36:35,040 --> 00:36:41,760
we push it uh you know to have

00:36:38,079 --> 00:36:44,960
one law for validation

00:36:41,760 --> 00:36:49,200
and use of emergency mechanical

00:36:44,960 --> 00:36:51,599
ventilators in ecuador also we did

00:36:49,200 --> 00:36:53,599
basically three versions of mechanical

00:36:51,599 --> 00:36:57,280
ventilator

00:36:53,599 --> 00:37:00,000
and finally we delivered

00:36:57,280 --> 00:37:00,560
we and we had a validation of the

00:37:00,000 --> 00:37:03,839
correct

00:37:00,560 --> 00:37:08,320
operation of this device

00:37:03,839 --> 00:37:10,640
and the emperor in esmeraldas also the

00:37:08,320 --> 00:37:12,640
key factors that we that we found

00:37:10,640 --> 00:37:14,240
on this on this project was the

00:37:12,640 --> 00:37:17,599
commitment of a stakeholder

00:37:14,240 --> 00:37:20,079
for the evolution of the pro the product

00:37:17,599 --> 00:37:22,400
and these stakeholders was where the

00:37:20,079 --> 00:37:26,880
doctors technical staff

00:37:22,400 --> 00:37:28,720
and sponsors also another key factor was

00:37:26,880 --> 00:37:30,000
the design of an evolutionary software

00:37:28,720 --> 00:37:34,240
architecture so these

00:37:30,000 --> 00:37:37,040
allowed to us to iterating a fast way

00:37:34,240 --> 00:37:38,960
and build an extended deploy at the

00:37:37,040 --> 00:37:42,400
extent to buy some features

00:37:38,960 --> 00:37:44,400
with with uh confidence

00:37:42,400 --> 00:37:45,760
another another key factor was

00:37:44,400 --> 00:37:49,119
implementation of this

00:37:45,760 --> 00:37:52,720
strategy so this was a decision that

00:37:49,119 --> 00:37:54,960
we take at the beginning and was

00:37:52,720 --> 00:37:56,880
something that helped something helpful

00:37:54,960 --> 00:37:59,280
for us across the project

00:37:56,880 --> 00:38:01,520
and then finally the implementation of

00:37:59,280 --> 00:38:04,560
the strategy for firmware and continuous

00:38:01,520 --> 00:38:09,280
integration and deployment was also

00:38:04,560 --> 00:38:12,320
another key factor in this project

00:38:09,280 --> 00:38:16,839
so finally to recap we have

00:38:12,320 --> 00:38:19,599
three points in this

00:38:16,839 --> 00:38:22,880
this that we want to share with you

00:38:19,599 --> 00:38:23,520
and first one is it is very important to

00:38:22,880 --> 00:38:25,520
define

00:38:23,520 --> 00:38:27,280
the language of the business at the

00:38:25,520 --> 00:38:29,280
beginning of the project in order to

00:38:27,280 --> 00:38:31,760
show

00:38:29,280 --> 00:38:33,280
the the value that we that you added

00:38:31,760 --> 00:38:35,760
onto each stage

00:38:33,280 --> 00:38:36,720
so this is more this is related with

00:38:35,760 --> 00:38:38,960
with the first

00:38:36,720 --> 00:38:40,720
phase i mean with the first test that we

00:38:38,960 --> 00:38:44,240
did in our project so

00:38:40,720 --> 00:38:47,359
at that moment we were using a technical

00:38:44,240 --> 00:38:48,560
language so to show this frequency in

00:38:47,359 --> 00:38:51,599
the device

00:38:48,560 --> 00:38:53,520
but at the end our client that were the

00:38:51,599 --> 00:38:56,560
doctors and paramedics

00:38:53,520 --> 00:38:59,280
um they never unders understood

00:38:56,560 --> 00:39:01,760
what we were trying to say at that

00:38:59,280 --> 00:39:04,880
moment so they say you don't have

00:39:01,760 --> 00:39:05,920
frequency because you are not using the

00:39:04,880 --> 00:39:09,839
correct language

00:39:05,920 --> 00:39:12,960
i mean the business language

00:39:09,839 --> 00:39:15,119
then another another point the second

00:39:12,960 --> 00:39:17,040
point here is for the evolution of the

00:39:15,119 --> 00:39:20,240
iot product the community of

00:39:17,040 --> 00:39:22,960
stakeholders is very important um

00:39:20,240 --> 00:39:24,720
and yeah that that was for us very

00:39:22,960 --> 00:39:28,320
important because

00:39:24,720 --> 00:39:30,160
also the doctors as a i show it to you

00:39:28,320 --> 00:39:32,800
until the test part

00:39:30,160 --> 00:39:34,560
was they were the persons that were

00:39:32,800 --> 00:39:36,800
running the

00:39:34,560 --> 00:39:38,560
end-to-end test so they were validating

00:39:36,800 --> 00:39:41,359
the code uh

00:39:38,560 --> 00:39:42,000
the current unfortunate yeah the coded

00:39:41,359 --> 00:39:45,200
behavior

00:39:42,000 --> 00:39:48,960
of the device and also they were

00:39:45,200 --> 00:39:53,119
at that moment based on their experience

00:39:48,960 --> 00:39:55,520
uh validating that

00:39:53,119 --> 00:39:56,240
syntheticity was a new device validating

00:39:55,520 --> 00:39:58,480
that this

00:39:56,240 --> 00:40:00,640
could be something helpful for any

00:39:58,480 --> 00:40:03,520
doctor on the contrary

00:40:00,640 --> 00:40:03,839
then we have the point number three and

00:40:03,520 --> 00:40:06,160
this

00:40:03,839 --> 00:40:07,760
is the implementation of automatic

00:40:06,160 --> 00:40:10,560
testing integration

00:40:07,760 --> 00:40:12,640
and continuous deployment drives to the

00:40:10,560 --> 00:40:14,800
diversity rapid delivery of the value

00:40:12,640 --> 00:40:17,119
and give the technical team the

00:40:14,800 --> 00:40:20,079
confidence to add a new functionality

00:40:17,119 --> 00:40:20,079
or send the problem

00:40:20,640 --> 00:40:23,680
so i would like to share it with you

00:40:22,800 --> 00:40:27,760
this is

00:40:23,680 --> 00:40:30,880
an example iot project ad

00:40:27,760 --> 00:40:32,240
basically on this repository you can

00:40:30,880 --> 00:40:37,200
find

00:40:32,240 --> 00:40:37,200
the setup or an example of set at

00:40:37,599 --> 00:40:43,440
where you will be where you will have

00:40:40,800 --> 00:40:45,520
a features like unit test integration

00:40:43,440 --> 00:40:48,720
test and pylon

00:40:45,520 --> 00:40:50,400
for for any iot project that you would

00:40:48,720 --> 00:40:53,920
like to build in the future

00:40:50,400 --> 00:40:59,040
and here we put how we also

00:40:53,920 --> 00:40:59,040
how we did the set up in our project

00:40:59,680 --> 00:41:05,040
and then we have q and a

00:41:02,720 --> 00:41:08,240
so feel free to ask anything related

00:41:05,040 --> 00:41:11,599
with the project i will be

00:41:08,240 --> 00:41:14,720
asking questions also on the social

00:41:11,599 --> 00:41:21,760
networks that's it

00:41:14,720 --> 00:41:23,839
thank you

00:41:21,760 --> 00:41:23,839

YouTube URL: https://www.youtube.com/watch?v=HhtKDYA1kZY


