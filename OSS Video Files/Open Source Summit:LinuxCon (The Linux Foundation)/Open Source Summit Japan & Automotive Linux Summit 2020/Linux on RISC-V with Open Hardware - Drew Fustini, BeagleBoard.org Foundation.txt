Title: Linux on RISC-V with Open Hardware - Drew Fustini, BeagleBoard.org Foundation
Publication date: 2020-12-04
Playlist: Open Source Summit Japan & Automotive Linux Summit 2020
Description: 
	Linux on RISC-V with Open Hardware - Drew Fustini, BeagleBoard.org Foundation
Captions: 
	00:00:06,560 --> 00:00:08,960
hi

00:00:07,120 --> 00:00:10,960
i'm drew fastini and i wanted to talk

00:00:08,960 --> 00:00:15,040
today about two my favorite things

00:00:10,960 --> 00:00:15,040
which are linux and open source hardware

00:00:15,759 --> 00:00:20,720
i'm an open source hardware designer at

00:00:18,000 --> 00:00:22,160
a pcb manufacturing service in the us

00:00:20,720 --> 00:00:23,680
called osh park

00:00:22,160 --> 00:00:25,760
i'm also on the board of directors of

00:00:23,680 --> 00:00:27,119
the beaglebooter.org foundation

00:00:25,760 --> 00:00:29,039
you may have heard of the beaglebone

00:00:27,119 --> 00:00:30,000
it's a small open source hardware linux

00:00:29,039 --> 00:00:31,599
computer

00:00:30,000 --> 00:00:34,239
i'm also on the board of directors of

00:00:31,599 --> 00:00:35,760
the open source hardware association

00:00:34,239 --> 00:00:37,520
and we have an open source hardware

00:00:35,760 --> 00:00:39,840
certification program that you can find

00:00:37,520 --> 00:00:43,520
out more about on our website

00:00:39,840 --> 00:00:46,239
and i'm also a risk five ambassador

00:00:43,520 --> 00:00:46,960
so there's many risc-v virtual meetups

00:00:46,239 --> 00:00:49,200
around the world

00:00:46,960 --> 00:00:50,000
including munich and bay area you can

00:00:49,200 --> 00:00:54,000
find out

00:00:50,000 --> 00:00:56,000
more of them at risk5.org local

00:00:54,000 --> 00:00:58,399
and coming up in a few days we have the

00:00:56,000 --> 00:01:00,960
risk five summit which is the big annual

00:00:58,399 --> 00:01:02,960
risk five event there'll be lots of

00:01:00,960 --> 00:01:06,400
interesting talks about risk five so i

00:01:02,960 --> 00:01:08,159
recommend checking it out so i mentioned

00:01:06,400 --> 00:01:10,320
open source hardware so that's hardware

00:01:08,159 --> 00:01:11,760
whose design is made publicly available

00:01:10,320 --> 00:01:15,040
so that anyone can study

00:01:11,760 --> 00:01:16,799
modify distribute make and sell

00:01:15,040 --> 00:01:18,080
the design or hardware based on that

00:01:16,799 --> 00:01:20,000
design

00:01:18,080 --> 00:01:22,240
so in the context of electronics we're

00:01:20,000 --> 00:01:24,960
talking about the documentation

00:01:22,240 --> 00:01:26,400
would be required is the schematics and

00:01:24,960 --> 00:01:28,080
the board layout

00:01:26,400 --> 00:01:30,320
in the editable source files from the

00:01:28,080 --> 00:01:34,000
cat software so not just a pdf

00:01:30,320 --> 00:01:37,600
or an or a image file

00:01:34,000 --> 00:01:39,840
and ideally those not required is to use

00:01:37,600 --> 00:01:40,799
open source software so for example

00:01:39,840 --> 00:01:42,479
keycad

00:01:40,799 --> 00:01:44,000
and this lowers the barriers of entry

00:01:42,479 --> 00:01:45,600
for people that want to participate in

00:01:44,000 --> 00:01:47,520
the project

00:01:45,600 --> 00:01:48,960
you can use proprietary cad software

00:01:47,520 --> 00:01:50,880
though in the

00:01:48,960 --> 00:01:52,799
no it can still be considered open

00:01:50,880 --> 00:01:54,640
source hardware so it's not required but

00:01:52,799 --> 00:01:56,960
it is best practice to use open source

00:01:54,640 --> 00:01:58,719
software if you can

00:01:56,960 --> 00:02:00,159
then also the build materials or the

00:01:58,719 --> 00:02:01,840
parts list

00:02:00,159 --> 00:02:03,520
also not a strict requirement but it's

00:02:01,840 --> 00:02:05,200
best practice for all the components to

00:02:03,520 --> 00:02:06,320
be available from distributors and low

00:02:05,200 --> 00:02:08,560
quantity

00:02:06,320 --> 00:02:10,000
and the point of all this is to lower

00:02:08,560 --> 00:02:11,599
the barriers of entry

00:02:10,000 --> 00:02:13,840
to enable collaborative development

00:02:11,599 --> 00:02:16,080
which is kind of the theme behind open

00:02:13,840 --> 00:02:18,160
source hardware

00:02:16,080 --> 00:02:20,319
i talked more about open source hardware

00:02:18,160 --> 00:02:22,720
including different licensing options

00:02:20,319 --> 00:02:25,520
and a talk i gave last year and you can

00:02:22,720 --> 00:02:27,840
watch that video online

00:02:25,520 --> 00:02:28,640
so risk 5 is an instruction set or an

00:02:27,840 --> 00:02:30,239
isa

00:02:28,640 --> 00:02:32,239
this is the interface between the

00:02:30,239 --> 00:02:34,160
hardware and the software

00:02:32,239 --> 00:02:36,000
for example let's say we have a c plus

00:02:34,160 --> 00:02:38,319
program well that gets compiled into

00:02:36,000 --> 00:02:39,519
instructions for a microprocessor to

00:02:38,319 --> 00:02:40,959
execute

00:02:39,519 --> 00:02:42,800
but how does the compiler know what

00:02:40,959 --> 00:02:44,800
instructions the cpu understands

00:02:42,800 --> 00:02:46,000
this is defined by the instruction set

00:02:44,800 --> 00:02:48,560
architecture

00:02:46,000 --> 00:02:50,239
so the isa is a standard a set of rules

00:02:48,560 --> 00:02:51,680
that define the task the processor can

00:02:50,239 --> 00:02:54,800
perform

00:02:51,680 --> 00:02:56,720
proprietary isas like x86 from intel and

00:02:54,800 --> 00:02:59,519
arm which you'd find in your laptop and

00:02:56,720 --> 00:03:01,440
desktop and most servers

00:02:59,519 --> 00:03:02,800
in arm which you'd find in with

00:03:01,440 --> 00:03:04,800
smartphones

00:03:02,800 --> 00:03:06,239
these these are proprietary instruction

00:03:04,800 --> 00:03:08,319
sets and they require commercial

00:03:06,239 --> 00:03:10,560
licensing

00:03:08,319 --> 00:03:12,480
however risk 5 is a free and open

00:03:10,560 --> 00:03:13,680
instruction set so this started about 10

00:03:12,480 --> 00:03:15,599
years ago

00:03:13,680 --> 00:03:17,120
by computer architecture researchers at

00:03:15,599 --> 00:03:18,879
uc berkeley

00:03:17,120 --> 00:03:20,720
the professor that started the project

00:03:18,879 --> 00:03:22,239
has a great talk called instruction sets

00:03:20,720 --> 00:03:23,599
want to be free that i recommend

00:03:22,239 --> 00:03:25,040
checking out

00:03:23,599 --> 00:03:26,959
some people sometimes people ask me

00:03:25,040 --> 00:03:28,959
what's the v um so this is actually the

00:03:26,959 --> 00:03:29,440
roman numeral five because it's the

00:03:28,959 --> 00:03:30,879
fifth

00:03:29,440 --> 00:03:33,360
risk construction set to come out of

00:03:30,879 --> 00:03:35,599
berkeley and why do i see it's free and

00:03:33,360 --> 00:03:37,519
open this is because the specifications

00:03:35,599 --> 00:03:40,400
for risk five are licensed

00:03:37,519 --> 00:03:42,000
under as creative commons attribution

00:03:40,400 --> 00:03:44,000
which is considered an open source

00:03:42,000 --> 00:03:45,440
license

00:03:44,000 --> 00:03:46,959
so what's different about risk five

00:03:45,440 --> 00:03:47,760
because there's many instruction sets

00:03:46,959 --> 00:03:49,599
out there

00:03:47,760 --> 00:03:52,239
well it's a simple and clean slate

00:03:49,599 --> 00:03:56,000
design kind of built upon

00:03:52,239 --> 00:03:58,400
the many decades of knowledge and skills

00:03:56,000 --> 00:04:00,239
that the team at berkeley had developed

00:03:58,400 --> 00:04:01,760
it's far smaller than commercial

00:04:00,239 --> 00:04:03,360
instruction sets

00:04:01,760 --> 00:04:05,120
and has a clear separation between

00:04:03,360 --> 00:04:05,680
unprivileged and privileged instruction

00:04:05,120 --> 00:04:08,720
set

00:04:05,680 --> 00:04:09,519
it also avoids baking in micro

00:04:08,720 --> 00:04:11,920
architecture

00:04:09,519 --> 00:04:13,519
technology dependent features into the

00:04:11,920 --> 00:04:16,239
instruction set so there's a

00:04:13,519 --> 00:04:17,120
there's a separation there between the

00:04:16,239 --> 00:04:19,600
standard or

00:04:17,120 --> 00:04:21,440
the specification and how it's

00:04:19,600 --> 00:04:24,400
implemented

00:04:21,440 --> 00:04:24,800
it's also risk 5 is also modular so it

00:04:24,400 --> 00:04:26,720
has

00:04:24,800 --> 00:04:28,000
it's both extensible and you can

00:04:26,720 --> 00:04:30,560
specialize it for different

00:04:28,000 --> 00:04:31,680
use cases this because there's a small

00:04:30,560 --> 00:04:34,720
standard base

00:04:31,680 --> 00:04:36,720
with multiple standard extensions

00:04:34,720 --> 00:04:38,639
that makes it suitable for everything

00:04:36,720 --> 00:04:40,479
from a tiny microcontroller to a big

00:04:38,639 --> 00:04:42,240
supercomputer

00:04:40,479 --> 00:04:44,240
and it's stable which means that the

00:04:42,240 --> 00:04:44,720
base and standard extensions are frozen

00:04:44,240 --> 00:04:46,800
now

00:04:44,720 --> 00:04:48,479
so they're always be supported by a

00:04:46,800 --> 00:04:50,639
wrist fly processor

00:04:48,479 --> 00:04:52,639
and then additions are made via optional

00:04:50,639 --> 00:04:53,919
extensions for example there is a vector

00:04:52,639 --> 00:04:55,600
processing extension that's being

00:04:53,919 --> 00:04:56,080
developed right now in a hypervisor

00:04:55,600 --> 00:04:58,160
extension

00:04:56,080 --> 00:05:00,400
that's being developed but these don't

00:04:58,160 --> 00:05:00,880
require new versions of the base isa

00:05:00,400 --> 00:05:04,639
they're just

00:05:00,880 --> 00:05:06,720
optional extensions on top of that

00:05:04,639 --> 00:05:08,720
so there's four base integer isas

00:05:06,720 --> 00:05:10,880
there's rv32i

00:05:08,720 --> 00:05:11,919
which is 32-bit and it's less than 50

00:05:10,880 --> 00:05:15,840
instructions so

00:05:11,919 --> 00:05:15,840
um relatively uh

00:05:15,919 --> 00:05:22,400
easy for people to implement in a design

00:05:19,680 --> 00:05:24,000
and then there's rv 32-e which is just a

00:05:22,400 --> 00:05:26,400
reduced register count to make

00:05:24,000 --> 00:05:28,000
it um better for implementing small

00:05:26,400 --> 00:05:30,800
microcontrollers

00:05:28,000 --> 00:05:32,160
and there's rv64i and this is 64-bit and

00:05:30,800 --> 00:05:33,919
this is this will be the one that we're

00:05:32,160 --> 00:05:36,240
most interested in terms of

00:05:33,919 --> 00:05:37,680
risk five processors that can run linux

00:05:36,240 --> 00:05:40,240
there's even

00:05:37,680 --> 00:05:41,919
bits so this is kind of feature proof to

00:05:40,240 --> 00:05:42,560
make sure there's enough address space

00:05:41,919 --> 00:05:44,880
when

00:05:42,560 --> 00:05:46,000
non-volatile ram capacities increase

00:05:44,880 --> 00:05:47,840
potentially

00:05:46,000 --> 00:05:52,080
it also is beneficial for security as

00:05:47,840 --> 00:05:54,080
well to have a larger address space

00:05:52,080 --> 00:05:56,080
there's risk five standard extensions

00:05:54,080 --> 00:05:58,720
that i mentioned and those include

00:05:56,080 --> 00:05:59,919
multiply or that those include m for

00:05:58,720 --> 00:06:02,960
multiply and divide

00:05:59,919 --> 00:06:05,039
a for atomic f d and q for different

00:06:02,960 --> 00:06:06,880
precisions of floating point

00:06:05,039 --> 00:06:09,120
and then there's g which is general

00:06:06,880 --> 00:06:10,960
purpose so this is equivalent to

00:06:09,120 --> 00:06:12,479
several of those existing ones the

00:06:10,960 --> 00:06:15,600
integer multiply

00:06:12,479 --> 00:06:16,080
atomic flow and double float and then

00:06:15,600 --> 00:06:18,240
there's

00:06:16,080 --> 00:06:20,000
c which is compressed instructions to

00:06:18,240 --> 00:06:22,319
conserve memory and cache so this is

00:06:20,000 --> 00:06:23,759
similar to arm thumb

00:06:22,319 --> 00:06:25,919
and as i said before these standard

00:06:23,759 --> 00:06:28,160
extensions have been ratified so

00:06:25,919 --> 00:06:30,000
they will be supported forever as long

00:06:28,160 --> 00:06:33,039
as the processor conforms to

00:06:30,000 --> 00:06:34,080
the risk 5 instruction set and then

00:06:33,039 --> 00:06:37,919
linux distros like

00:06:34,080 --> 00:06:39,440
debian and fedora are targeting rv64 gc

00:06:37,919 --> 00:06:41,840
so if you're looking at processor

00:06:39,440 --> 00:06:43,039
designs um and you're interested in ones

00:06:41,840 --> 00:06:44,960
that will be supported by

00:06:43,039 --> 00:06:46,479
linux distros potentially then you want

00:06:44,960 --> 00:06:49,840
to be looking for rv

00:06:46,479 --> 00:06:49,840
64 gc

00:06:50,400 --> 00:06:54,000
and here's the base instruction sets

00:06:52,160 --> 00:06:55,120
along with the standard extensions on a

00:06:54,000 --> 00:06:57,919
reference card which

00:06:55,120 --> 00:06:59,120
kind of nice to see it all there and if

00:06:57,919 --> 00:07:00,880
you were to compare this to something

00:06:59,120 --> 00:07:03,039
like intel you can see that

00:07:00,880 --> 00:07:05,440
is much easier to wrap your mind around

00:07:03,039 --> 00:07:07,120
risk five

00:07:05,440 --> 00:07:09,120
if you wanna learn more about risk five

00:07:07,120 --> 00:07:11,520
including the different

00:07:09,120 --> 00:07:13,360
base instruction sets and the standard

00:07:11,520 --> 00:07:14,319
extensions and also some new ones that

00:07:13,360 --> 00:07:17,039
are being worked on

00:07:14,319 --> 00:07:19,840
like vector hypervisor check out the

00:07:17,039 --> 00:07:23,039
wrist5 reader it's only about 100 pages

00:07:19,840 --> 00:07:23,680
i really recommend giving a quick read

00:07:23,039 --> 00:07:24,960
through

00:07:23,680 --> 00:07:27,919
it's available in several different

00:07:24,960 --> 00:07:27,919
languages as well

00:07:28,400 --> 00:07:32,240
so ris5 international now controls the

00:07:30,479 --> 00:07:34,160
specifications that were

00:07:32,240 --> 00:07:36,880
originally developed at berkeley and you

00:07:34,160 --> 00:07:38,800
can find this at risk5.org

00:07:36,880 --> 00:07:41,039
so it's a non-profit organization with

00:07:38,800 --> 00:07:43,120
uh it's always growing um it's probably

00:07:41,039 --> 00:07:45,039
over 700 members now

00:07:43,120 --> 00:07:47,680
from 50 different countries including

00:07:45,039 --> 00:07:49,759
companies and universities and more

00:07:47,680 --> 00:07:51,039
you as an individual can become a member

00:07:49,759 --> 00:07:53,680
of free of cost

00:07:51,039 --> 00:07:55,680
it's also free of cost for non-profits

00:07:53,680 --> 00:07:57,520
to join as well

00:07:55,680 --> 00:07:59,120
and there's also a youtube channel for

00:07:57,520 --> 00:08:00,800
miss five international that has

00:07:59,120 --> 00:08:01,520
hundreds of talks from over the years

00:08:00,800 --> 00:08:02,720
and that's

00:08:01,520 --> 00:08:04,479
one of the ways that i've learned a lot

00:08:02,720 --> 00:08:05,919
about risk five so i highly recommend

00:08:04,479 --> 00:08:08,400
checking that out

00:08:05,919 --> 00:08:10,560
um and companies plan to ship billions

00:08:08,400 --> 00:08:12,479
of devices with risk five cores

00:08:10,560 --> 00:08:14,240
nvidia is actually already shipping risk

00:08:12,479 --> 00:08:16,560
5 cores

00:08:14,240 --> 00:08:17,440
for system management in his gpu

00:08:16,560 --> 00:08:19,919
products

00:08:17,440 --> 00:08:20,479
and western digital um has announced

00:08:19,919 --> 00:08:22,720
that they're

00:08:20,479 --> 00:08:24,560
planning to swap out the controllers and

00:08:22,720 --> 00:08:26,720
all their different storage devices with

00:08:24,560 --> 00:08:28,800
risk 5 based designs which will be

00:08:26,720 --> 00:08:32,479
a large number of devices out there in

00:08:28,800 --> 00:08:32,479
the world with risk 5 cores in them

00:08:32,880 --> 00:08:36,240
so one of the reasons to choose risk 5

00:08:34,560 --> 00:08:37,919
is to avoid

00:08:36,240 --> 00:08:39,360
instruction set licensing costs and

00:08:37,919 --> 00:08:41,599
royalty fees

00:08:39,360 --> 00:08:42,800
this includes the legal costs and also

00:08:41,599 --> 00:08:45,600
i've heard mentioned

00:08:42,800 --> 00:08:47,120
the long delays so to license something

00:08:45,600 --> 00:08:48,640
like an instruction set

00:08:47,120 --> 00:08:50,480
it can be kind of complex and it can

00:08:48,640 --> 00:08:51,760
take a long time and the researchers at

00:08:50,480 --> 00:08:53,440
berkeley mentioned that was one of the

00:08:51,760 --> 00:08:55,040
reasons why they decided to just

00:08:53,440 --> 00:08:56,560
go ahead and design their own

00:08:55,040 --> 00:08:58,480
instruction set

00:08:56,560 --> 00:09:00,320
but more importantly than just saving on

00:08:58,480 --> 00:09:02,000
licensing and relative fees it gives you

00:09:00,320 --> 00:09:04,000
the freedom to choose your own micro

00:09:02,000 --> 00:09:04,720
architecture implementation so the way

00:09:04,000 --> 00:09:06,640
in which you

00:09:04,720 --> 00:09:07,920
implement the instruction set is up to

00:09:06,640 --> 00:09:10,000
you

00:09:07,920 --> 00:09:12,160
whereas with arm only a few companies

00:09:10,000 --> 00:09:14,160
like apple and samsung and qualcomm have

00:09:12,160 --> 00:09:16,320
architecture licenses that allow them to

00:09:14,160 --> 00:09:18,080
do their own custom implementations

00:09:16,320 --> 00:09:21,760
so everyone else is pretty much just

00:09:18,080 --> 00:09:23,040
licensing existing course from arm

00:09:21,760 --> 00:09:24,959
in with risk five you also have the

00:09:23,040 --> 00:09:26,240
freedom to leverage existing open source

00:09:24,959 --> 00:09:29,040
implementations so

00:09:26,240 --> 00:09:30,720
for for the context of linux there's

00:09:29,040 --> 00:09:32,080
rocket and boom from berkeley and

00:09:30,720 --> 00:09:34,080
there's also ariane

00:09:32,080 --> 00:09:36,080
from the eth zurich pulp team that are

00:09:34,080 --> 00:09:36,959
capable of running linux

00:09:36,080 --> 00:09:38,000
one of the other things that's really

00:09:36,959 --> 00:09:40,000
important when it comes to an

00:09:38,000 --> 00:09:41,920
instruction set is software support and

00:09:40,000 --> 00:09:43,839
risk five is already have already has a

00:09:41,920 --> 00:09:45,200
well-supported software ecosystem

00:09:43,839 --> 00:09:47,279
if you click on that link there it'll

00:09:45,200 --> 00:09:49,360
take you to a github um where

00:09:47,279 --> 00:09:50,880
risk five international keeps a list of

00:09:49,360 --> 00:09:53,519
support for all the different operating

00:09:50,880 --> 00:09:56,959
systems and languages and tool chains

00:09:53,519 --> 00:09:58,240
and is evolving very well um camaraj

00:09:56,959 --> 00:10:00,000
gave a talk back at the

00:09:58,240 --> 00:10:01,440
better links conference north america

00:10:00,000 --> 00:10:03,040
about the state of software development

00:10:01,440 --> 00:10:04,560
tools for risk five so

00:10:03,040 --> 00:10:06,399
if you're wondering about like

00:10:04,560 --> 00:10:07,680
particular language you're interested in

00:10:06,399 --> 00:10:08,880
or library um

00:10:07,680 --> 00:10:10,720
definitely check that out and you can

00:10:08,880 --> 00:10:12,800
find the latest information

00:10:10,720 --> 00:10:14,079
but overall it's pretty well supported

00:10:12,800 --> 00:10:18,079
so most of the things that you

00:10:14,079 --> 00:10:19,519
would expect to be there are there now

00:10:18,079 --> 00:10:21,200
british fighter international is based

00:10:19,519 --> 00:10:22,240
in switzerland so back at the beginning

00:10:21,200 --> 00:10:23,120
of this year there

00:10:22,240 --> 00:10:24,240
previously there had been an

00:10:23,120 --> 00:10:26,320
organization called risk fight

00:10:24,240 --> 00:10:28,399
foundation that was u.s based

00:10:26,320 --> 00:10:29,920
and back the beginning of this year um

00:10:28,399 --> 00:10:32,000
that ris 5 international was

00:10:29,920 --> 00:10:34,000
incorporated in switzerland to alleviate

00:10:32,000 --> 00:10:36,079
any concerns from the membership over

00:10:34,000 --> 00:10:38,240
u.s politics

00:10:36,079 --> 00:10:39,600
also the european union india and

00:10:38,240 --> 00:10:41,600
pakistan have

00:10:39,600 --> 00:10:42,720
national risk five processor design

00:10:41,600 --> 00:10:44,800
initiatives

00:10:42,720 --> 00:10:46,000
and i think we're seeing here a desire

00:10:44,800 --> 00:10:48,480
for sovereign control

00:10:46,000 --> 00:10:50,480
over technology and to avoid backdoors

00:10:48,480 --> 00:10:52,959
from other nations that might be in

00:10:50,480 --> 00:10:54,800
certain pieces of technology there's

00:10:52,959 --> 00:10:55,839
also strong interest from chip makers in

00:10:54,800 --> 00:10:57,839
china so

00:10:55,839 --> 00:10:59,200
if you remember back in 2019 u.s

00:10:57,839 --> 00:11:00,720
companies were banned from doing

00:10:59,200 --> 00:11:02,160
business with huawei

00:11:00,720 --> 00:11:04,079
and i think there's concern there of

00:11:02,160 --> 00:11:06,640
like what company might be next

00:11:04,079 --> 00:11:07,360
um you know arm ultimately was deemed to

00:11:06,640 --> 00:11:09,839
be a uk

00:11:07,360 --> 00:11:11,440
origin technology so they could continue

00:11:09,839 --> 00:11:13,600
to do business with huawei but

00:11:11,440 --> 00:11:14,880
how long will that last and how will the

00:11:13,600 --> 00:11:17,600
nvidia acquisition

00:11:14,880 --> 00:11:17,600
impact that

00:11:18,240 --> 00:11:21,600
so sometimes i hear the question you

00:11:19,680 --> 00:11:23,279
know is is risk five an open source

00:11:21,600 --> 00:11:25,200
processor

00:11:23,279 --> 00:11:26,800
so that's not quite right risk lab is a

00:11:25,200 --> 00:11:29,200
set of specifications

00:11:26,800 --> 00:11:30,560
under an open license under an open

00:11:29,200 --> 00:11:32,640
source license

00:11:30,560 --> 00:11:34,320
and risk 5 implementations can both be

00:11:32,640 --> 00:11:36,000
open source and proprietary so just

00:11:34,320 --> 00:11:37,040
because this risk 5 doesn't mean that

00:11:36,000 --> 00:11:39,200
it's an open source

00:11:37,040 --> 00:11:40,560
implementation of a processor it just

00:11:39,200 --> 00:11:44,079
means it's implementing

00:11:40,560 --> 00:11:45,279
the open wrist file specification

00:11:44,079 --> 00:11:47,360
and that's important because open

00:11:45,279 --> 00:11:49,040
specifications make open source

00:11:47,360 --> 00:11:52,320
implementations possible

00:11:49,040 --> 00:11:54,720
it open isa like risk 5 enables there to

00:11:52,320 --> 00:11:57,040
be open source processor implementations

00:11:54,720 --> 00:11:57,839
so with risk five we can have fully open

00:11:57,040 --> 00:11:59,279
source chips

00:11:57,839 --> 00:12:02,880
if the people that are doing the

00:11:59,279 --> 00:12:02,880
implementations choose to do that

00:12:04,000 --> 00:12:07,040
so risk five has a what's called a

00:12:06,480 --> 00:12:08,800
privilege

00:12:07,040 --> 00:12:10,959
architecture and this is used for

00:12:08,800 --> 00:12:11,839
running a full operating system like

00:12:10,959 --> 00:12:13,279
linux

00:12:11,839 --> 00:12:15,360
so there's three different privileged

00:12:13,279 --> 00:12:17,200
modes there's machine load

00:12:15,360 --> 00:12:19,680
or m mode where you find the boot loader

00:12:17,200 --> 00:12:21,360
and firmware there's supervisor mode or

00:12:19,680 --> 00:12:23,120
s mode where you find the operating

00:12:21,360 --> 00:12:24,800
system kernel like linux

00:12:23,120 --> 00:12:26,880
and then finally there's user mode or

00:12:24,800 --> 00:12:27,760
umode where you have the applications

00:12:26,880 --> 00:12:30,000
running

00:12:27,760 --> 00:12:31,279
there's also a hypervisor spec that's in

00:12:30,000 --> 00:12:33,920
draft that

00:12:31,279 --> 00:12:36,160
also gives a hs which is a modified s

00:12:33,920 --> 00:12:36,160
mode

00:12:36,560 --> 00:12:40,000
so there is five boot flows similar to

00:12:38,399 --> 00:12:40,720
my which you might have seen on arm

00:12:40,000 --> 00:12:42,480
systems

00:12:40,720 --> 00:12:43,839
but there is a piece in the middle there

00:12:42,480 --> 00:12:46,160
um which is called

00:12:43,839 --> 00:12:47,040
open sbi which you may not be familiar

00:12:46,160 --> 00:12:49,200
with

00:12:47,040 --> 00:12:50,720
um also before i proceed just one thing

00:12:49,200 --> 00:12:52,320
i wanted to point out which confused me

00:12:50,720 --> 00:12:54,560
for a little while when i was learning

00:12:52,320 --> 00:12:56,480
risk five terminology is you'll see the

00:12:54,560 --> 00:12:58,320
term heart and this stands for hardware

00:12:56,480 --> 00:12:59,680
thread of execution so you can think of

00:12:58,320 --> 00:13:04,160
it as a core

00:12:59,680 --> 00:13:04,160
or a schedulable unit

00:13:04,560 --> 00:13:08,959
so i mentioned sbi so this is stands for

00:13:06,880 --> 00:13:10,480
the supervisor binary interface and this

00:13:08,959 --> 00:13:12,240
is something that's specific to risk

00:13:10,480 --> 00:13:14,560
five so it's the call and convention

00:13:12,240 --> 00:13:17,279
between the supervisor mode or s mode

00:13:14,560 --> 00:13:18,240
os and the supervisor execution

00:13:17,279 --> 00:13:21,279
environment

00:13:18,240 --> 00:13:22,720
or se that's running in machine mode

00:13:21,279 --> 00:13:24,240
and this allows the supervisor remote

00:13:22,720 --> 00:13:24,880
software to be written so that's

00:13:24,240 --> 00:13:25,839
portable

00:13:24,880 --> 00:13:27,760
to all different risk five

00:13:25,839 --> 00:13:29,040
implementations so this is important so

00:13:27,760 --> 00:13:30,639
the um

00:13:29,040 --> 00:13:32,720
the architectural support in the linux

00:13:30,639 --> 00:13:34,560
kernel for s5 is not written for a

00:13:32,720 --> 00:13:37,680
specific risk 5 chip

00:13:34,560 --> 00:13:41,040
it's written to the risk 5 architecture

00:13:37,680 --> 00:13:43,199
and sbi acts as the abstraction there

00:13:41,040 --> 00:13:44,639
that makes that possible

00:13:43,199 --> 00:13:46,480
and this came out of the unix class

00:13:44,639 --> 00:13:48,079
platform spec working group

00:13:46,480 --> 00:13:50,079
it's chaired by arrow lstone and

00:13:48,079 --> 00:13:50,480
recently it changed the name to the risk

00:13:50,079 --> 00:13:53,040
00:13:50,480 --> 00:13:54,480
platform spec working group the idea

00:13:53,040 --> 00:13:57,839
there was to be

00:13:54,480 --> 00:13:57,839
broader than just linux

00:13:58,399 --> 00:14:02,000
open sbi is an open source

00:14:00,000 --> 00:14:04,240
implementation of that sbi

00:14:02,000 --> 00:14:06,320
standard and the idea here is that it

00:14:04,240 --> 00:14:07,279
has layers of implementation so at the

00:14:06,320 --> 00:14:10,399
core there's the

00:14:07,279 --> 00:14:12,639
svi library that implements um

00:14:10,399 --> 00:14:14,399
that implements sbi and then there's

00:14:12,639 --> 00:14:14,959
platform specific libraries for

00:14:14,399 --> 00:14:17,360
different

00:14:14,959 --> 00:14:19,279
risk five socs and then there's even

00:14:17,360 --> 00:14:22,560
complete platform-specific reference

00:14:19,279 --> 00:14:25,199
firmware for different socs and boards

00:14:22,560 --> 00:14:26,959
so this provides runtime uh provides a

00:14:25,199 --> 00:14:28,800
runtime and end mode so

00:14:26,959 --> 00:14:30,000
typically it's used in the boot stage

00:14:28,800 --> 00:14:32,160
following the rom

00:14:30,000 --> 00:14:34,160
loader and it provides support for

00:14:32,160 --> 00:14:36,320
several reference platforms

00:14:34,160 --> 00:14:38,399
and generic drivers that are included

00:14:36,320 --> 00:14:39,440
for mmo to be able to operate and that's

00:14:38,399 --> 00:14:43,040
the machine mode

00:14:39,440 --> 00:14:43,040
the bare metal kind of mode

00:14:43,199 --> 00:14:46,240
something that's been standard for a

00:14:44,720 --> 00:14:49,920
long time in intel world

00:14:46,240 --> 00:14:52,959
is uefi and with the advent of arm v8

00:14:49,920 --> 00:14:54,959
um in 64-bit arm also saw that starting

00:14:52,959 --> 00:14:57,279
to be adopted for armed servers

00:14:54,959 --> 00:14:58,000
and uefi support is there for risk five

00:14:57,279 --> 00:15:00,399
so

00:14:58,000 --> 00:15:01,199
support in the linux kernel is coming in

00:15:00,399 --> 00:15:03,120
00:15:01,199 --> 00:15:04,399
um there's already some there's already

00:15:03,120 --> 00:15:06,720
implementations

00:15:04,399 --> 00:15:08,639
for ufi and risk five with ubud and

00:15:06,720 --> 00:15:11,600
tiana core edk2

00:15:08,639 --> 00:15:12,079
and grub2 can be used as a you as a uefi

00:15:11,600 --> 00:15:14,800
payload

00:15:12,079 --> 00:15:14,800
on risk five

00:15:15,279 --> 00:15:19,360
wrist height is also well supported in

00:15:17,040 --> 00:15:21,040
qemu so if you don't have any hardware

00:15:19,360 --> 00:15:24,399
um you can actually run

00:15:21,040 --> 00:15:26,639
either full 64 bit or 32 bit

00:15:24,399 --> 00:15:28,000
risk 5 linux and qa mu and if you click

00:15:26,639 --> 00:15:30,240
on that link there there's a

00:15:28,000 --> 00:15:31,199
a nice tutorial that'll get you going

00:15:30,240 --> 00:15:36,160
with running

00:15:31,199 --> 00:15:36,160
risk five linux on your pc your laptop

00:15:37,040 --> 00:15:40,800
so wrist fly has been supported in linux

00:15:38,639 --> 00:15:43,680
kernel since the initial port by palmer

00:15:40,800 --> 00:15:45,360
back in linux 415

00:15:43,680 --> 00:15:47,519
if you're interested in following along

00:15:45,360 --> 00:15:49,519
subscribe to the mailing list there

00:15:47,519 --> 00:15:51,040
and there's also the archives available

00:15:49,519 --> 00:15:52,959
on lore

00:15:51,040 --> 00:15:55,120
and a great talk that was given earlier

00:15:52,959 --> 00:15:56,959
this year was from bjorn topple at the

00:15:55,120 --> 00:15:58,399
munich 5 meetup one of the

00:15:56,959 --> 00:16:00,079
virtual meetups that i had mentioned

00:15:58,399 --> 00:16:01,759
earlier it's called

00:16:00,079 --> 00:16:03,440
what's missing in risk 5 linux and how

00:16:01,759 --> 00:16:05,199
you can help and one of the things that

00:16:03,440 --> 00:16:07,440
he mentioned in the talk was it

00:16:05,199 --> 00:16:09,040
risk 5 the risk 5 support in linux is a

00:16:07,440 --> 00:16:10,720
great way to learn the nitty gritty

00:16:09,040 --> 00:16:12,720
details of the kernel

00:16:10,720 --> 00:16:14,240
and it's also a fun friendly and still

00:16:12,720 --> 00:16:16,959
pretty small community

00:16:14,240 --> 00:16:17,920
um there is 5 architecture support in

00:16:16,959 --> 00:16:20,839
comparison to

00:16:17,920 --> 00:16:22,880
linux as a whole which is thousands of

00:16:20,839 --> 00:16:24,240
developers

00:16:22,880 --> 00:16:26,320
and one of the things from his talk that

00:16:24,240 --> 00:16:28,160
he mentioned was there's this script in

00:16:26,320 --> 00:16:30,399
the linux source that you can run and it

00:16:28,160 --> 00:16:32,240
shows you all the architecture features

00:16:30,399 --> 00:16:34,800
that i still need to work on so

00:16:32,240 --> 00:16:36,160
if you're interested in digging in these

00:16:34,800 --> 00:16:39,920
are the things that are still

00:16:36,160 --> 00:16:41,759
necessary to do for the architecture

00:16:39,920 --> 00:16:43,360
and some of the recent work for debug

00:16:41,759 --> 00:16:45,440
and trace and security

00:16:43,360 --> 00:16:47,440
risk 5 support in linux kernel includes

00:16:45,440 --> 00:16:50,320
the eppf jet

00:16:47,440 --> 00:16:50,880
so this is important because eppf is is

00:16:50,320 --> 00:16:52,639
uh

00:16:50,880 --> 00:16:54,480
bringing lots of exciting capabilities

00:16:52,639 --> 00:16:56,399
to linux and it's important for that to

00:16:54,480 --> 00:16:58,800
be supported on risk five

00:16:56,399 --> 00:17:01,279
also k probes and k rep probes will

00:16:58,800 --> 00:17:02,240
enable bpf trace and make perf much more

00:17:01,279 --> 00:17:06,000
usable and those are

00:17:02,240 --> 00:17:09,360
very powerful tools there's also kgdb

00:17:06,000 --> 00:17:12,160
and kdb support being worked on which is

00:17:09,360 --> 00:17:13,600
useful for debugging also k exact and

00:17:12,160 --> 00:17:15,839
k-dump

00:17:13,600 --> 00:17:18,000
and relocatable kernel works is being

00:17:15,839 --> 00:17:19,679
done which will help

00:17:18,000 --> 00:17:21,360
address space layout randomization

00:17:19,679 --> 00:17:24,400
implementation and also

00:17:21,360 --> 00:17:26,319
the cisco fuzzing bot

00:17:24,400 --> 00:17:28,079
or the syscaller which does fuzzing to

00:17:26,319 --> 00:17:28,960
discover security vulnerabilities now

00:17:28,079 --> 00:17:32,000
supports

00:17:28,960 --> 00:17:34,240
risk five as well

00:17:32,000 --> 00:17:35,440
recent work on hardware support includes

00:17:34,240 --> 00:17:38,080
kvm so

00:17:35,440 --> 00:17:39,520
kvm is basically complete now it's just

00:17:38,080 --> 00:17:41,600
waiting on the ratification of that

00:17:39,520 --> 00:17:43,440
hypervisor specification

00:17:41,600 --> 00:17:45,520
there's also support being worked on for

00:17:43,440 --> 00:17:47,679
the vector i say which is also

00:17:45,520 --> 00:17:50,240
a draft extension that has going to be

00:17:47,679 --> 00:17:53,760
pretty exciting capabilities in terms of

00:17:50,240 --> 00:17:56,880
doing heavier processing in risk five

00:17:53,760 --> 00:18:00,080
there's also sv48 support which is four

00:17:56,880 --> 00:18:02,320
page four level page table for up to 64

00:18:00,080 --> 00:18:04,640
terabytes of physical ram which should

00:18:02,320 --> 00:18:06,799
hopefully be enough for a while

00:18:04,640 --> 00:18:08,400
there's also work to unify enuma

00:18:06,799 --> 00:18:10,960
implementations for

00:18:08,400 --> 00:18:13,200
bigger systems there's also work being

00:18:10,960 --> 00:18:16,240
done to support some of the more recent

00:18:13,200 --> 00:18:16,240
risk 5 dev boards

00:18:16,720 --> 00:18:22,480
so linux distros fedora has a port

00:18:20,320 --> 00:18:24,240
which aims to provide the full fedora

00:18:22,480 --> 00:18:26,080
experience on risk 5

00:18:24,240 --> 00:18:29,360
and they're at the point now where you

00:18:26,080 --> 00:18:32,160
can either run fedoras5 under qemu

00:18:29,360 --> 00:18:33,600
like on your desktop or on a server and

00:18:32,160 --> 00:18:36,559
it's also supported on

00:18:33,600 --> 00:18:37,679
one of the uh one of the risk five

00:18:36,559 --> 00:18:38,640
development boards that's currently

00:18:37,679 --> 00:18:40,160
available

00:18:38,640 --> 00:18:41,440
we'll talk a little more about the

00:18:40,160 --> 00:18:42,559
different dev boards that are out there

00:18:41,440 --> 00:18:43,760
in a minute

00:18:42,559 --> 00:18:45,440
and if you want to you can go through

00:18:43,760 --> 00:18:46,240
the installation instructions and and

00:18:45,440 --> 00:18:51,200
start running

00:18:46,240 --> 00:18:51,200
risc-v fedora on your pc using qemu

00:18:51,280 --> 00:18:55,280
there's also a port of debian tubers

00:18:53,200 --> 00:18:57,760
five and devin's

00:18:55,280 --> 00:18:59,760
known for having the massive source

00:18:57,760 --> 00:19:01,840
packages of like 20 000

00:18:59,760 --> 00:19:03,440
and the good news is over 95 percent of

00:19:01,840 --> 00:19:05,120
those packages are building right now

00:19:03,440 --> 00:19:05,919
for risk five and you can see they're on

00:19:05,120 --> 00:19:11,120
that crap

00:19:05,919 --> 00:19:14,000
graph the top gray line is risk five

00:19:11,120 --> 00:19:16,320
if you don't need a full general linux

00:19:14,000 --> 00:19:19,120
distro there's also support for risk 5

00:19:16,320 --> 00:19:22,640
and open embedded in yakdo project

00:19:19,120 --> 00:19:22,640
through the meta risk 5 layer

00:19:23,120 --> 00:19:26,559
there's also support in build root as

00:19:24,640 --> 00:19:28,640
well um and if you want to

00:19:26,559 --> 00:19:30,400
go through there's a great tutorial from

00:19:28,640 --> 00:19:31,679
michael at blue land of how to build an

00:19:30,400 --> 00:19:33,760
embedded linux

00:19:31,679 --> 00:19:38,080
an embedded linux system from scratch in

00:19:33,760 --> 00:19:39,919
40 minutes using build root

00:19:38,080 --> 00:19:41,120
so what about actual chips so we talked

00:19:39,919 --> 00:19:43,039
about how there was great

00:19:41,120 --> 00:19:44,559
cui new support but we want to actually

00:19:43,039 --> 00:19:46,799
run on real hardware

00:19:44,559 --> 00:19:48,400
um so sci-fi is a startup founded by

00:19:46,799 --> 00:19:49,200
some of the people from that berkeley

00:19:48,400 --> 00:19:51,640
team

00:19:49,200 --> 00:19:53,840
uh and back in 2018 they debuted the

00:19:51,640 --> 00:19:55,600
fu540 which was the first

00:19:53,840 --> 00:19:57,440
risk five system on chip that can run

00:19:55,600 --> 00:20:00,080
linux it had four

00:19:57,440 --> 00:20:01,440
64-bit cores um that were intended for

00:20:00,080 --> 00:20:03,520
running linux and also

00:20:01,440 --> 00:20:04,880
a lower power core for doing system

00:20:03,520 --> 00:20:08,159
management tasks

00:20:04,880 --> 00:20:09,600
um has 64-bit ddr4 interface gigabit

00:20:08,159 --> 00:20:10,960
ethernet

00:20:09,600 --> 00:20:13,200
kind of the standard peripherals you

00:20:10,960 --> 00:20:16,000
have unfortunately not usb

00:20:13,200 --> 00:20:16,559
and along with that they um announced

00:20:16,000 --> 00:20:18,880
back in

00:20:16,559 --> 00:20:21,039
2018 and came out with the the first

00:20:18,880 --> 00:20:22,799
linux capable risk 5 dev board called

00:20:21,039 --> 00:20:24,320
the sci-fi freedom unleashed

00:20:22,799 --> 00:20:26,960
and this is what you saw back on the

00:20:24,320 --> 00:20:28,640
fedora slide um

00:20:26,960 --> 00:20:30,159
known all the things that's neat is the

00:20:28,640 --> 00:20:33,679
actual board design for it

00:20:30,159 --> 00:20:36,159
is open source hardware so it was quite

00:20:33,679 --> 00:20:38,240
high performance compared to fpgas which

00:20:36,159 --> 00:20:42,240
is one of the other alternatives

00:20:38,240 --> 00:20:44,159
um the fu 540 soc is clock you know it's

00:20:42,240 --> 00:20:46,000
going to be 10 times or more faster than

00:20:44,159 --> 00:20:47,360
the soft cores

00:20:46,000 --> 00:20:49,039
you know the other thing i wanted to

00:20:47,360 --> 00:20:51,280
note here was sometimes you'll

00:20:49,039 --> 00:20:52,240
hear the term asic and that usually is

00:20:51,280 --> 00:20:54,320
referring to

00:20:52,240 --> 00:20:55,280
a system on chip that has a hard

00:20:54,320 --> 00:20:57,440
processor core

00:20:55,280 --> 00:20:59,280
constructed by silicon fabrication

00:20:57,440 --> 00:21:01,039
instead of a soft core that's loaded

00:20:59,280 --> 00:21:02,880
into an fpga

00:21:01,039 --> 00:21:05,360
and with an asic we can run the clock

00:21:02,880 --> 00:21:07,679
much much faster than on fpga

00:21:05,360 --> 00:21:08,880
however this board was too expensive for

00:21:07,679 --> 00:21:10,559
widespread adoption

00:21:08,880 --> 00:21:12,480
it sold for about a thousand dollars on

00:21:10,559 --> 00:21:13,600
crowd supply and it's not available

00:21:12,480 --> 00:21:15,520
anymore

00:21:13,600 --> 00:21:17,200
um you know and the chip itself was

00:21:15,520 --> 00:21:18,799
never sold separately and the reason for

00:21:17,200 --> 00:21:20,880
this is sci-fi's core business is

00:21:18,799 --> 00:21:24,240
designing cores it's not to build

00:21:20,880 --> 00:21:26,559
socs or dev boards but one of uh

00:21:24,240 --> 00:21:28,240
actually so one of the nice things about

00:21:26,559 --> 00:21:28,799
this is if you get the expansion

00:21:28,240 --> 00:21:30,159
hardware

00:21:28,799 --> 00:21:32,640
including a graphics card you can

00:21:30,159 --> 00:21:33,919
actually run a full fedora gnome image

00:21:32,640 --> 00:21:37,520
on risk 5 which is

00:21:33,919 --> 00:21:39,200
neat to see and one of scifi's customers

00:21:37,520 --> 00:21:42,159
was microchip and they came out

00:21:39,200 --> 00:21:43,600
recently with the polar fire soc so this

00:21:42,159 --> 00:21:46,720
is similar to that sci-5

00:21:43,600 --> 00:21:49,600
u540 but it adds an fpga

00:21:46,720 --> 00:21:52,559
so it had like the sci-fi of soc it has

00:21:49,600 --> 00:21:55,840
four 64-bit cores that come on linux

00:21:52,559 --> 00:21:57,520
has ddr interface this one also has pci

00:21:55,840 --> 00:22:00,159
express and usb

00:21:57,520 --> 00:22:01,520
and gigabit ethernet and the great thing

00:22:00,159 --> 00:22:03,600
about this too is that it's a full

00:22:01,520 --> 00:22:04,640
commercial product family so it's availa

00:22:03,600 --> 00:22:06,000
it's going to be available from

00:22:04,640 --> 00:22:08,320
distributors

00:22:06,000 --> 00:22:10,080
and if you're wondering i didn't realize

00:22:08,320 --> 00:22:10,880
microchip made fpgas well this is

00:22:10,080 --> 00:22:12,720
because it's

00:22:10,880 --> 00:22:15,440
the formerly micro semi which is now

00:22:12,720 --> 00:22:17,520
part of microchip

00:22:15,440 --> 00:22:19,600
and to debut this soc they came out with

00:22:17,520 --> 00:22:22,080
the polar file ssc dev board

00:22:19,600 --> 00:22:22,960
this was announced back in july um for

00:22:22,080 --> 00:22:25,280
00:22:22,960 --> 00:22:26,240
so half the cost of that sci-5 unleash

00:22:25,280 --> 00:22:28,159
board

00:22:26,240 --> 00:22:30,640
the pre-doors are now shipping and it

00:22:28,159 --> 00:22:32,880
will be available soon from distributors

00:22:30,640 --> 00:22:35,200
um and this this one has the wrist 5

00:22:32,880 --> 00:22:36,320
cores clocked at 600 megahertz megahertz

00:22:35,200 --> 00:22:39,440
and it has the

00:22:36,320 --> 00:22:42,480
large fpga fabric with

00:22:39,440 --> 00:22:45,200
250 000 logic elements it has 2

00:22:42,480 --> 00:22:45,600
gigabytes of ddr memory and 8 gigabytes

00:22:45,200 --> 00:22:48,000
of

00:22:45,600 --> 00:22:51,200
mmc flash so it actually comes with

00:22:48,000 --> 00:22:52,240
linux installed on it which is nice

00:22:51,200 --> 00:22:54,400
one of the other boards i want to

00:22:52,240 --> 00:22:56,080
mention that's using that polar fire soc

00:22:54,400 --> 00:22:57,840
is the savvy board and one of the neat

00:22:56,080 --> 00:22:59,440
things here is actually is designed to

00:22:57,840 --> 00:23:01,280
be able to be stacking so if you want to

00:22:59,440 --> 00:23:04,320
build a cluster of these boards

00:23:01,280 --> 00:23:07,360
um in addition it has a dual

00:23:04,320 --> 00:23:08,799
10 gigabit um fiber ethernet so the idea

00:23:07,360 --> 00:23:12,080
here i think probably for

00:23:08,799 --> 00:23:13,039
um hpc sort of workloads it also brings

00:23:12,080 --> 00:23:17,200
out

00:23:13,039 --> 00:23:19,039
pci express over type c connectors

00:23:17,200 --> 00:23:20,559
but those boards are pretty expensive

00:23:19,039 --> 00:23:22,640
and might not be in your budget but you

00:23:20,559 --> 00:23:24,240
still want to play around press 5. so

00:23:22,640 --> 00:23:25,840
i recommend checking out the kendrick

00:23:24,240 --> 00:23:29,280
k210 it's a

00:23:25,840 --> 00:23:33,600
400 megahertz dual core um 64-bit

00:23:29,280 --> 00:23:35,280
core um it has 8 megabytes of sram

00:23:33,600 --> 00:23:36,880
which is a lot of srm but it doesn't

00:23:35,280 --> 00:23:38,480
have dram so

00:23:36,880 --> 00:23:40,080
it makes it a little bit difficult for

00:23:38,480 --> 00:23:41,679
us to run linux

00:23:40,080 --> 00:23:43,760
and you can find this in affordable dev

00:23:41,679 --> 00:23:45,360
boards from scipeed such as the scipine

00:23:43,760 --> 00:23:47,279
max bit which i'm holding here which is

00:23:45,360 --> 00:23:48,720
only 13.

00:23:47,279 --> 00:23:50,559
and at first it didn't seem like it was

00:23:48,720 --> 00:23:52,799
going to be possible but last year

00:23:50,559 --> 00:23:54,720
um some hackers like damien lamal and

00:23:52,799 --> 00:23:56,880
christopher helvig

00:23:54,720 --> 00:23:58,080
got it to work and added the support to

00:23:56,880 --> 00:24:00,080
linux 5.8

00:23:58,080 --> 00:24:03,520
there's also now support in ubu for two

00:24:00,080 --> 00:24:06,480
of the boards from sean anderson

00:24:03,520 --> 00:24:09,600
and part of the trick there was is the

00:24:06,480 --> 00:24:11,520
chip does have a mmu but it's not

00:24:09,600 --> 00:24:12,960
supported it's an earlier draft spec and

00:24:11,520 --> 00:24:14,880
it's not supported in linux

00:24:12,960 --> 00:24:18,080
so they have to treat it as not having

00:24:14,880 --> 00:24:21,279
an mmu and just running linux and m mode

00:24:18,080 --> 00:24:22,960
or machine mode so the problem there is

00:24:21,279 --> 00:24:24,080
that the eight megabytes runs out very

00:24:22,960 --> 00:24:26,320
quickly since we

00:24:24,080 --> 00:24:28,320
don't have virtual memory we don't have

00:24:26,320 --> 00:24:29,760
we can't do shared libraries so we

00:24:28,320 --> 00:24:32,080
we end up running out of memory very

00:24:29,760 --> 00:24:34,480
quickly there's a few people working on

00:24:32,080 --> 00:24:35,919
potentially ways to improve that so

00:24:34,480 --> 00:24:37,279
there's a talk there link that you can

00:24:35,919 --> 00:24:38,320
check out if you want to find out more

00:24:37,279 --> 00:24:40,880
about that

00:24:38,320 --> 00:24:42,640
um but it can run busy box so the the

00:24:40,880 --> 00:24:44,400
kind of the default instructions are you

00:24:42,640 --> 00:24:47,600
can use builder to build a

00:24:44,400 --> 00:24:49,279
root fest with busy box and that's being

00:24:47,600 --> 00:24:51,039
in the process of being upstreamed

00:24:49,279 --> 00:24:52,320
there's a great great tutorial on cnx

00:24:51,039 --> 00:24:53,760
software that takes you through all the

00:24:52,320 --> 00:24:55,279
different steps you need to go through

00:24:53,760 --> 00:24:58,720
to build the kernel and build the root

00:24:55,279 --> 00:25:00,640
fest and load it up onto the board

00:24:58,720 --> 00:25:02,000
here's me running at what what was at

00:25:00,640 --> 00:25:05,360
the time the mainline

00:25:02,000 --> 00:25:06,640
linux on it um and you know for 13

00:25:05,360 --> 00:25:08,080
i had to recommend getting one of these

00:25:06,640 --> 00:25:09,760
boards and checking it out and building

00:25:08,080 --> 00:25:11,039
the kernel and building root fest and

00:25:09,760 --> 00:25:12,400
putting on the board and

00:25:11,039 --> 00:25:15,600
and just kind of getting familiar with

00:25:12,400 --> 00:25:16,640
some of the different tools

00:25:15,600 --> 00:25:19,200
now something that's going to be more

00:25:16,640 --> 00:25:21,039
practical because it has dram

00:25:19,200 --> 00:25:22,960
is the pico rio so this is an open

00:25:21,039 --> 00:25:24,159
source project from rio's lab

00:25:22,960 --> 00:25:27,679
and the goal here is to create a

00:25:24,159 --> 00:25:29,760
low-cost linux capable risk 5

00:25:27,679 --> 00:25:31,760
we were very excited back in september

00:25:29,760 --> 00:25:33,440
during the ris5 global summit that this

00:25:31,760 --> 00:25:34,960
was announced

00:25:33,440 --> 00:25:37,760
they have three different phases that

00:25:34,960 --> 00:25:39,520
they want to do of the system on chip

00:25:37,760 --> 00:25:41,200
the first one of which is expected to

00:25:39,520 --> 00:25:42,080
start having samples by the end of this

00:25:41,200 --> 00:25:45,200
year so that's pretty

00:25:42,080 --> 00:25:48,000
exciting sci-fi

00:25:45,200 --> 00:25:49,039
also has followed up back in october

00:25:48,000 --> 00:25:52,400
with a new version

00:25:49,039 --> 00:25:53,919
of the dev board so the new one's called

00:25:52,400 --> 00:25:55,919
unmatched

00:25:53,919 --> 00:25:58,640
and this one is going uh is on crowd

00:25:55,919 --> 00:26:00,400
supply right now for 665 dollars and

00:25:58,640 --> 00:26:01,440
it's expected to ship at the beginning

00:26:00,400 --> 00:26:04,320
of next year

00:26:01,440 --> 00:26:05,200
this has a new soc from sci-fi called

00:26:04,320 --> 00:26:07,520
the fu

00:26:05,200 --> 00:26:08,720
740 which is a much higher performance

00:26:07,520 --> 00:26:11,679
one uh with

00:26:08,720 --> 00:26:13,520
with four 64-bit um cores for running

00:26:11,679 --> 00:26:15,679
linux and also one of those companion

00:26:13,520 --> 00:26:16,880
cores as well

00:26:15,679 --> 00:26:19,279
one of the things you might notice is

00:26:16,880 --> 00:26:20,320
actually a mini itx form factor so it's

00:26:19,279 --> 00:26:22,559
possible to

00:26:20,320 --> 00:26:24,240
build that a kind of a proper pc out of

00:26:22,559 --> 00:26:26,240
this and that's what was demoted to

00:26:24,240 --> 00:26:28,960
conference recently

00:26:26,240 --> 00:26:30,240
the board has eight gigabytes of dd ddr4

00:26:28,960 --> 00:26:33,600
memory it has four

00:26:30,240 --> 00:26:34,880
usb 3 ports has gigabit ethernet it also

00:26:33,600 --> 00:26:37,120
has a full

00:26:34,880 --> 00:26:38,000
pci express expansion slot and also has

00:26:37,120 --> 00:26:40,960
connectors

00:26:38,000 --> 00:26:44,559
m2 connectors for things like nvme ssds

00:26:40,960 --> 00:26:44,559
and wi-fi and bluetooth modules

00:26:44,640 --> 00:26:48,320
and the highest performance chip that's

00:26:47,039 --> 00:26:51,039
been announced so far

00:26:48,320 --> 00:26:52,960
is from t-head which is a subsidiary of

00:26:51,039 --> 00:26:56,159
alibaba

00:26:52,960 --> 00:26:56,880
and this is called the jaunty 910 it's a

00:26:56,159 --> 00:26:59,120
00:26:56,880 --> 00:27:02,320
core or you might also re see it

00:26:59,120 --> 00:27:03,760
referred to as c910 it's a 16 core 2.5

00:27:02,320 --> 00:27:05,520
gigahertz processor

00:27:03,760 --> 00:27:07,200
and this implements a draft version of

00:27:05,520 --> 00:27:08,000
the vector extension which is quite

00:27:07,200 --> 00:27:12,080
interesting

00:27:08,000 --> 00:27:14,159
and this is expected to debut next year

00:27:12,080 --> 00:27:15,840
there's also saiped announced just like

00:27:14,159 --> 00:27:17,200
two weeks ago

00:27:15,840 --> 00:27:19,120
that they're going to be doing a board

00:27:17,200 --> 00:27:21,360
with a new all winner soc

00:27:19,120 --> 00:27:22,320
so this actually is going to be using

00:27:21,360 --> 00:27:24,559
another core

00:27:22,320 --> 00:27:26,240
a smaller core designed by alibaba

00:27:24,559 --> 00:27:28,240
t-head that's going to be an

00:27:26,240 --> 00:27:29,520
all-winter system on chip so it's just

00:27:28,240 --> 00:27:31,120
going to be a single core up to 1

00:27:29,520 --> 00:27:32,559
gigahertz but the board is going to be

00:27:31,120 --> 00:27:33,840
less than 13

00:27:32,559 --> 00:27:36,799
and they're saying it's going to have at

00:27:33,840 --> 00:27:38,480
least 256 megabytes of dram so

00:27:36,799 --> 00:27:42,080
it'll be much more useful for running

00:27:38,480 --> 00:27:42,080
linux than that kendrick board

00:27:42,640 --> 00:27:45,919
however there aren't really that many

00:27:44,320 --> 00:27:49,120
options when it comes to hardware

00:27:45,919 --> 00:27:50,720
um on linux with rs5 so

00:27:49,120 --> 00:27:54,000
one of the other alternatives is to

00:27:50,720 --> 00:27:54,000
leverage fpgas

00:27:56,399 --> 00:27:59,600
so an fpga is a field programmable

00:27:58,480 --> 00:28:01,360
gateway so

00:27:59,600 --> 00:28:03,840
this is a chip that you can think of as

00:28:01,360 --> 00:28:05,760
being a c or an ocean of different logic

00:28:03,840 --> 00:28:07,200
elements and these can be configured to

00:28:05,760 --> 00:28:10,080
be any sort of digital

00:28:07,200 --> 00:28:12,000
logic that we want them to be and if we

00:28:10,080 --> 00:28:12,799
have enough we can even configure it to

00:28:12,000 --> 00:28:15,120
be

00:28:12,799 --> 00:28:17,840
a processor core which we call a soft

00:28:15,120 --> 00:28:17,840
core

00:28:18,559 --> 00:28:21,919
now when i learned fpgas maybe about 15

00:28:21,200 --> 00:28:24,640
years ago

00:28:21,919 --> 00:28:26,960
we had to use proprietary tools from the

00:28:24,640 --> 00:28:28,880
fpga vendor

00:28:26,960 --> 00:28:31,039
and one of the awesome things happened

00:28:28,880 --> 00:28:33,440
more recently is there's a strong open

00:28:31,039 --> 00:28:35,440
fpga community that's been working on

00:28:33,440 --> 00:28:37,200
open source tool chains for certain

00:28:35,440 --> 00:28:39,520
fpgas so this started off with the

00:28:37,200 --> 00:28:41,600
atlantis ice 40

00:28:39,520 --> 00:28:43,120
with a project called project ice storm

00:28:41,600 --> 00:28:45,919
by claire wolf

00:28:43,120 --> 00:28:46,880
this is a smaller fpga but it paved the

00:28:45,919 --> 00:28:50,320
way towards

00:28:46,880 --> 00:28:52,640
more capable fpgas being supported

00:28:50,320 --> 00:28:55,440
such as the lattice ecp 5 which is

00:28:52,640 --> 00:28:59,039
supported by project trellis

00:28:55,440 --> 00:28:59,840
and much more capable fpgas are from

00:28:59,039 --> 00:29:02,720
xilinx

00:28:59,840 --> 00:29:03,440
and project x-ray and simple flow are

00:29:02,720 --> 00:29:06,080
working on

00:29:03,440 --> 00:29:08,159
also supporting the xilinx series seven

00:29:06,080 --> 00:29:10,559
and that should be coming soon

00:29:08,159 --> 00:29:12,000
um one of these you can think of these

00:29:10,559 --> 00:29:14,559
open fpga tool chains

00:29:12,000 --> 00:29:16,720
as being kind of similar to gcc for

00:29:14,559 --> 00:29:19,760
fpgas the idea here

00:29:16,720 --> 00:29:22,640
is we can use free software to take

00:29:19,760 --> 00:29:24,240
our processor design and turn it into

00:29:22,640 --> 00:29:26,640
what's called the bitstream

00:29:24,240 --> 00:29:28,159
to load into the fpga using only open

00:29:26,640 --> 00:29:29,919
source software which is

00:29:28,159 --> 00:29:33,039
a pretty awesome thing that's happened

00:29:29,919 --> 00:29:35,360
in the last few years

00:29:33,039 --> 00:29:36,240
so i mentioned the esp5 is supported by

00:29:35,360 --> 00:29:38,960
the open source

00:29:36,240 --> 00:29:40,080
fpga tools and i want to talk about a

00:29:38,960 --> 00:29:43,360
project i was involved

00:29:40,080 --> 00:29:46,159
with last year so

00:29:43,360 --> 00:29:47,360
as is the fashion now for many hardware

00:29:46,159 --> 00:29:49,919
hacking conferences

00:29:47,360 --> 00:29:51,600
um is to have an electronic uh

00:29:49,919 --> 00:29:52,559
conference bash that you can put

00:29:51,600 --> 00:29:54,960
graphics on

00:29:52,559 --> 00:29:56,240
and play games and have different sorts

00:29:54,960 --> 00:29:57,840
of interactions

00:29:56,240 --> 00:29:59,919
and we were at the hackaday super con

00:29:57,840 --> 00:30:02,080
last year and it was in this kind of

00:29:59,919 --> 00:30:05,760
large game boy form factor

00:30:02,080 --> 00:30:08,399
and it had a ecp-5 fpga on it

00:30:05,760 --> 00:30:09,919
and it was designed to kind of run this

00:30:08,399 --> 00:30:11,919
graphics engine where people could

00:30:09,919 --> 00:30:14,080
develop games and put little

00:30:11,919 --> 00:30:15,840
animations on the color lcd of their

00:30:14,080 --> 00:30:17,440
name and things like that

00:30:15,840 --> 00:30:19,440
but serverless at the conference thought

00:30:17,440 --> 00:30:20,960
okay that's nice but what about running

00:30:19,440 --> 00:30:22,399
linux

00:30:20,960 --> 00:30:24,399
so we got together and we called

00:30:22,399 --> 00:30:28,080
ourselves team linux on badge

00:30:24,399 --> 00:30:29,360
um and we first tried the 16 megabytes

00:30:28,080 --> 00:30:31,360
of spy connected

00:30:29,360 --> 00:30:33,120
sram that was on the board but that

00:30:31,360 --> 00:30:34,480
didn't work out but because it was a

00:30:33,120 --> 00:30:36,080
hardware hacking conference

00:30:34,480 --> 00:30:37,760
um one of the one of the people jacob

00:30:36,080 --> 00:30:39,120
creed and he had already designed an

00:30:37,760 --> 00:30:42,399
add-in cartridge

00:30:39,120 --> 00:30:43,840
that had 32 megabytes of sdram which did

00:30:42,399 --> 00:30:46,720
prove to be

00:30:43,840 --> 00:30:48,240
sufficient for running linux and the

00:30:46,720 --> 00:30:49,679
design of the badge was a game boy thing

00:30:48,240 --> 00:30:50,000
so on the back there was a header to

00:30:49,679 --> 00:30:52,399
plug

00:30:50,000 --> 00:30:54,559
in these other circuit boards which were

00:30:52,399 --> 00:30:56,480
called cartridges so here's the 32

00:30:54,559 --> 00:30:58,960
megabytes of sdram plugged into the

00:30:56,480 --> 00:31:01,360
batch on the back

00:30:58,960 --> 00:31:02,480
and i mentioned soft cores earlier and i

00:31:01,360 --> 00:31:06,320
thought this was a neat

00:31:02,480 --> 00:31:09,360
uh way of kind of conceptualizing it

00:31:06,320 --> 00:31:10,720
or visualizing it at a macro level so

00:31:09,360 --> 00:31:13,360
this is an fpga

00:31:10,720 --> 00:31:15,519
where the gates have been configured to

00:31:13,360 --> 00:31:17,039
serve as a soft processor core that can

00:31:15,519 --> 00:31:18,880
run linux

00:31:17,039 --> 00:31:20,960
and you can see that there's actually

00:31:18,880 --> 00:31:22,320
still space left there for defining all

00:31:20,960 --> 00:31:25,679
our source of logic

00:31:22,320 --> 00:31:28,320
also great follow um ico tc on twitter

00:31:25,679 --> 00:31:30,960
if you're interested in open fpga

00:31:28,320 --> 00:31:30,960
discussions

00:31:31,440 --> 00:31:35,440
but specifically how did we create that

00:31:33,840 --> 00:31:38,640
the soc that got loaded

00:31:35,440 --> 00:31:39,360
into that ecb5 fpga on the hackaday

00:31:38,640 --> 00:31:41,760
patch

00:31:39,360 --> 00:31:42,720
to run linux well we used python um

00:31:41,760 --> 00:31:44,640
which

00:31:42,720 --> 00:31:46,640
may be a bit surprising but python has

00:31:44,640 --> 00:31:48,640
advantages over traditional hardware

00:31:46,640 --> 00:31:49,600
description languages like vhdl or

00:31:48,640 --> 00:31:51,120
verilog

00:31:49,600 --> 00:31:54,159
many people are already familiar with

00:31:51,120 --> 00:31:56,000
python versus hdls

00:31:54,159 --> 00:31:58,799
like at the conference most of us came

00:31:56,000 --> 00:32:00,080
from a software engineering background

00:31:58,799 --> 00:32:01,279
and there they're currently more i would

00:32:00,080 --> 00:32:03,200
say there's currently more software

00:32:01,279 --> 00:32:05,120
developers and hardware designers so

00:32:03,200 --> 00:32:07,120
a nice way to get more people into

00:32:05,120 --> 00:32:08,000
design doing chip level hardware design

00:32:07,120 --> 00:32:09,840
is to

00:32:08,000 --> 00:32:11,039
leverage a language like python

00:32:09,840 --> 00:32:13,039
specifically we use

00:32:11,039 --> 00:32:14,640
media which is a python framework that

00:32:13,039 --> 00:32:16,960
can automate chip design

00:32:14,640 --> 00:32:18,399
it leverages the object oriented modular

00:32:16,960 --> 00:32:21,120
nature of python

00:32:18,399 --> 00:32:22,720
and it produces verilog code just like

00:32:21,120 --> 00:32:24,880
all the other tools so it can be used

00:32:22,720 --> 00:32:25,600
with existing chip design workflows even

00:32:24,880 --> 00:32:28,320
though

00:32:25,600 --> 00:32:28,960
we're coding in python it produces

00:32:28,320 --> 00:32:31,679
verilog

00:32:28,960 --> 00:32:33,760
ultimately there's a great talk about

00:32:31,679 --> 00:32:34,960
using python for creating hardware to

00:32:33,760 --> 00:32:36,960
record

00:32:34,960 --> 00:32:38,159
open source conferences so i highly

00:32:36,960 --> 00:32:39,039
recommend checking that out if you're

00:32:38,159 --> 00:32:40,720
interested to

00:32:39,039 --> 00:32:42,559
learn some of the more background behind

00:32:40,720 --> 00:32:43,840
it and that's from tim ansel and he was

00:32:42,559 --> 00:32:45,760
one of the people that was

00:32:43,840 --> 00:32:48,480
part of team badge on linux at the

00:32:45,760 --> 00:32:50,320
hackaday conference

00:32:48,480 --> 00:32:51,519
so to give you an example of what media

00:32:50,320 --> 00:32:53,840
looks like so

00:32:51,519 --> 00:32:55,039
on the left there in vhdl which is a

00:32:53,840 --> 00:32:57,440
traditional each

00:32:55,039 --> 00:32:59,360
harvard description language this is i

00:32:57,440 --> 00:33:01,120
believe a d flip flop which is a

00:32:59,360 --> 00:33:03,679
simple digital circuit on the right

00:33:01,120 --> 00:33:05,519
there we have the same circuit um

00:33:03,679 --> 00:33:06,799
same digital logic defined there in

00:33:05,519 --> 00:33:08,880
python

00:33:06,799 --> 00:33:10,000
and to me i think the right hand side

00:33:08,880 --> 00:33:13,519
actually is

00:33:10,000 --> 00:33:14,960
easier to understand so you can see how

00:33:13,519 --> 00:33:16,720
it's leveraging kind of the object

00:33:14,960 --> 00:33:18,159
current and nature of python

00:33:16,720 --> 00:33:20,880
to i think make it a little more

00:33:18,159 --> 00:33:20,880
understandable

00:33:21,360 --> 00:33:24,880
and then based on mygen there's a

00:33:23,679 --> 00:33:27,279
framework called

00:33:24,880 --> 00:33:28,960
lidex which allows us to build a full

00:33:27,279 --> 00:33:30,480
system of chip that can be loaded into

00:33:28,960 --> 00:33:33,279
the fpga

00:33:30,480 --> 00:33:35,360
and lidex has a collection of open cores

00:33:33,279 --> 00:33:37,840
for things like dram and ethernet and

00:33:35,360 --> 00:33:38,880
pci express and sata and more so rather

00:33:37,840 --> 00:33:41,279
than having to

00:33:38,880 --> 00:33:43,279
write our own dram controller our own

00:33:41,279 --> 00:33:47,120
serial controller we can just grab

00:33:43,279 --> 00:33:48,720
those open cores from the lidax project

00:33:47,120 --> 00:33:51,200
and one of the things that brought all

00:33:48,720 --> 00:33:53,840
this together is a repository called

00:33:51,200 --> 00:33:58,559
linux on lidex of x risk

00:33:53,840 --> 00:34:01,440
v so vex risk v is a 32-bit

00:33:58,559 --> 00:34:02,480
linux capable risc-5 implementation

00:34:01,440 --> 00:34:06,080
designed to be

00:34:02,480 --> 00:34:08,720
fpga friendly so it makes efficient use

00:34:06,080 --> 00:34:11,119
of the resources that are on fpga

00:34:08,720 --> 00:34:13,119
and it's written in a hard description

00:34:11,119 --> 00:34:16,000
language called spinal which is based on

00:34:13,119 --> 00:34:19,119
scholar so also an object-oriented

00:34:16,000 --> 00:34:22,399
language that can kind of leverage

00:34:19,119 --> 00:34:23,760
uh software engineering skills uh and it

00:34:22,399 --> 00:34:26,240
builds a system on chip

00:34:23,760 --> 00:34:28,159
using vex risk as the core and the

00:34:26,240 --> 00:34:28,639
different lidex modules so we can pull

00:34:28,159 --> 00:34:30,800
in

00:34:28,639 --> 00:34:34,560
the ones we need like like dram or light

00:34:30,800 --> 00:34:35,919
ethernet or sd card or pci express um

00:34:34,560 --> 00:34:39,040
and while you probably don't have the

00:34:35,919 --> 00:34:41,200
hackaday badge linux online xbox risk v

00:34:39,040 --> 00:34:43,040
actually supports a large number of fpga

00:34:41,200 --> 00:34:44,480
dev boards and there's also a simulator

00:34:43,040 --> 00:34:45,919
if you don't have a dev board

00:34:44,480 --> 00:34:48,639
so you can actually just go and clone

00:34:45,919 --> 00:34:49,679
that repository and run the build script

00:34:48,639 --> 00:34:53,440
and you'll be

00:34:49,679 --> 00:34:56,399
running linux on a simulated risk 5 core

00:34:53,440 --> 00:34:56,399
on your pc

00:34:57,119 --> 00:35:00,800
in here is me with the batch connected

00:34:59,839 --> 00:35:02,880
to the

00:35:00,800 --> 00:35:04,720
serial port or the terminal emulator on

00:35:02,880 --> 00:35:07,680
my laptop so we can see

00:35:04,720 --> 00:35:09,599
uh the console on the badge and you can

00:35:07,680 --> 00:35:11,920
see there that uh the

00:35:09,599 --> 00:35:13,520
what's happened here is we've used the

00:35:11,920 --> 00:35:16,800
open source tools

00:35:13,520 --> 00:35:19,599
to synthesize the the

00:35:16,800 --> 00:35:22,640
light x design into a bit stream that

00:35:19,599 --> 00:35:24,560
gets loaded onto the ecp 5 fpga

00:35:22,640 --> 00:35:26,720
and then once the soft core is running

00:35:24,560 --> 00:35:29,280
inside the fpga we then load the linux

00:35:26,720 --> 00:35:32,640
kernel up onto it in a root fest

00:35:29,280 --> 00:35:34,400
and it boots into the latest kernel and

00:35:32,640 --> 00:35:37,440
loads up busy box there which you can

00:35:34,400 --> 00:35:37,440
see in the in the window

00:35:37,760 --> 00:35:41,119
so when the conference ended thought it

00:35:39,359 --> 00:35:42,240
was a good idea to upstream the work

00:35:41,119 --> 00:35:44,480
that we had done to

00:35:42,240 --> 00:35:45,760
get it running on the badge and while

00:35:44,480 --> 00:35:47,200
most people probably don't have the

00:35:45,760 --> 00:35:48,800
badge unless you're one of the couple

00:35:47,200 --> 00:35:51,040
hundred people at the conference this is

00:35:48,800 --> 00:35:51,680
a good example of how to add a new board

00:35:51,040 --> 00:35:55,440
to

00:35:51,680 --> 00:35:55,440
linux online expects risk

00:35:55,599 --> 00:35:58,800
and to give you an idea of what the

00:35:57,440 --> 00:36:00,800
python

00:35:58,800 --> 00:36:02,400
median syntax looks like this is what's

00:36:00,800 --> 00:36:04,400
called the pin constraints

00:36:02,400 --> 00:36:05,440
for the project and this is how it maps

00:36:04,400 --> 00:36:07,280
the

00:36:05,440 --> 00:36:10,720
pins on the fpga to the different

00:36:07,280 --> 00:36:10,720
signals inside the design

00:36:11,359 --> 00:36:15,359
another good example of the

00:36:12,960 --> 00:36:18,640
extensibility of lidex and me gen

00:36:15,359 --> 00:36:20,400
is we had a dram chip on that cartridge

00:36:18,640 --> 00:36:21,440
that was not already supported in light

00:36:20,400 --> 00:36:24,400
dram

00:36:21,440 --> 00:36:25,119
so we had to add that in however it just

00:36:24,400 --> 00:36:29,200
involved

00:36:25,119 --> 00:36:31,520
inheriting or extending the sdram module

00:36:29,200 --> 00:36:34,000
to have a new class specific to our dram

00:36:31,520 --> 00:36:36,480
chip so we just had to go and grab the

00:36:34,000 --> 00:36:37,839
different timings from the datasheet and

00:36:36,480 --> 00:36:39,599
plug them in there

00:36:37,839 --> 00:36:40,960
so much simpler than having to write our

00:36:39,599 --> 00:36:43,359
own dram controller

00:36:40,960 --> 00:36:44,400
we just leveraged the opportunity nature

00:36:43,359 --> 00:36:47,200
of python to

00:36:44,400 --> 00:36:50,400
to extend it with just the specifics to

00:36:47,200 --> 00:36:50,400
our hardware that was new

00:36:50,640 --> 00:36:54,240
another uh interesting thing that

00:36:53,280 --> 00:36:55,839
happened in this project

00:36:54,240 --> 00:36:57,760
was so we got it working but it was

00:36:55,839 --> 00:36:58,880
booting really slow it was taking almost

00:36:57,760 --> 00:37:01,599
five minutes

00:36:58,880 --> 00:37:02,800
so i posted a github issue and lidex is

00:37:01,599 --> 00:37:05,920
uh maintained by

00:37:02,800 --> 00:37:08,320
a user named enjoy digital who

00:37:05,920 --> 00:37:09,760
his actual name is florent um really

00:37:08,320 --> 00:37:12,079
nice guy and really responsive

00:37:09,760 --> 00:37:14,240
maintainer so within a few hours

00:37:12,079 --> 00:37:16,160
he had actually posted a patch that

00:37:14,240 --> 00:37:17,760
improved the performance by 10 times so

00:37:16,160 --> 00:37:21,119
it was booting up in less than 30

00:37:17,760 --> 00:37:22,800
seconds which was pretty awesome to see

00:37:21,119 --> 00:37:25,920
and also just to give you more of that

00:37:22,800 --> 00:37:28,400
python flavor of what mijan looks like

00:37:25,920 --> 00:37:30,000
um you can see here this is the diff um

00:37:28,400 --> 00:37:30,800
of part of the changes that he made to

00:37:30,000 --> 00:37:33,359
optimize

00:37:30,800 --> 00:37:35,040
uh linux running on our badge you know

00:37:33,359 --> 00:37:38,320
because we had slow

00:37:35,040 --> 00:37:40,160
um i think just 8-bit sdram memory

00:37:38,320 --> 00:37:41,920
accesses were pretty expensive so in

00:37:40,160 --> 00:37:45,119
this case the l2 cache

00:37:41,920 --> 00:37:46,720
data width was made larger in this

00:37:45,119 --> 00:37:48,800
this allowed us to have better

00:37:46,720 --> 00:37:50,000
performance and you can see here in this

00:37:48,800 --> 00:37:51,119
diff to me it's a little bit more

00:37:50,000 --> 00:37:53,280
understandable because

00:37:51,119 --> 00:37:56,160
in python versus something like verilog

00:37:53,280 --> 00:37:56,160
or vhdl

00:37:56,240 --> 00:37:59,839
and you might have noticed there was an

00:37:57,359 --> 00:38:01,200
lcd well greg davil

00:37:59,839 --> 00:38:03,920
is an awesome hardware hacker in

00:38:01,200 --> 00:38:05,280
australia and a few a few weeks after

00:38:03,920 --> 00:38:07,359
the conference he was actually

00:38:05,280 --> 00:38:09,599
able to get the lcd working with the

00:38:07,359 --> 00:38:11,280
light video video module so now we don't

00:38:09,599 --> 00:38:13,119
have to have it connected to a pc

00:38:11,280 --> 00:38:16,240
to see linux boot up on it and get to

00:38:13,119 --> 00:38:16,240
the busy box shell

00:38:16,320 --> 00:38:20,640
so while you probably don't have the

00:38:18,960 --> 00:38:23,040
hackaday badge and it's not

00:38:20,640 --> 00:38:23,920
available for sale but there are other

00:38:23,040 --> 00:38:26,960
open source

00:38:23,920 --> 00:38:28,880
boards that have the ecp 5 fpga

00:38:26,960 --> 00:38:31,440
one of which is from a hackerspace in

00:38:28,880 --> 00:38:35,200
croatia called radiona it's the ulx

00:38:31,440 --> 00:38:38,000
3s it also has the 32 megabytes of sd

00:38:35,200 --> 00:38:42,160
ram so they can run linux on it

00:38:38,000 --> 00:38:44,160
and it's sold on crowd supply and mauser

00:38:42,160 --> 00:38:46,640
and then another board i like a lot from

00:38:44,160 --> 00:38:50,160
greg is the orange crab

00:38:46,640 --> 00:38:52,320
it has 120 x megabytes of ddr memory so

00:38:50,160 --> 00:38:53,680
it's much more capable of running linux

00:38:52,320 --> 00:38:56,240
it has more space and a

00:38:53,680 --> 00:38:58,320
faster memory interface and it's in this

00:38:56,240 --> 00:39:00,000
neat little form factor called

00:38:58,320 --> 00:39:01,920
feather which you might have seen uh

00:39:00,000 --> 00:39:05,599
different adafruit boards having

00:39:01,920 --> 00:39:05,599
uh and you can get that in group gets

00:39:05,680 --> 00:39:09,440
and you know if you're new to fpga

00:39:07,599 --> 00:39:11,920
starting with a larger fpga like the

00:39:09,440 --> 00:39:13,839
ecb5 with the softcore running linux is

00:39:11,920 --> 00:39:16,320
probably not the best place to start so

00:39:13,839 --> 00:39:18,320
i highly recommend checking out the fomu

00:39:16,320 --> 00:39:20,160
it's an open source board and there's a

00:39:18,320 --> 00:39:20,800
great online workshop that goes along

00:39:20,160 --> 00:39:22,720
with it

00:39:20,800 --> 00:39:24,560
it's a tiny little board it fits inside

00:39:22,720 --> 00:39:26,400
the usb port so you can take it around

00:39:24,560 --> 00:39:28,079
in your laptop everywhere

00:39:26,400 --> 00:39:30,079
and it has a great tutorial that takes

00:39:28,079 --> 00:39:31,760
you through the process of blinking led

00:39:30,079 --> 00:39:34,000
first in micro python

00:39:31,760 --> 00:39:37,280
and then in verilog and then finally in

00:39:34,000 --> 00:39:39,599
media and in lidex

00:39:37,280 --> 00:39:41,599
if you don't have any hardware at all i

00:39:39,599 --> 00:39:43,440
highly recommend renode

00:39:41,599 --> 00:39:45,040
it's an open source project started by

00:39:43,440 --> 00:39:46,720
ant micro and it can

00:39:45,040 --> 00:39:49,280
it can simulate physical hardware

00:39:46,720 --> 00:39:50,320
systems including cpus and peripherals

00:39:49,280 --> 00:39:53,119
and sensors

00:39:50,320 --> 00:39:53,839
and even wired or wireless uh node speed

00:39:53,119 --> 00:39:55,440
network

00:39:53,839 --> 00:39:58,480
that will hire a wired or wireless

00:39:55,440 --> 00:40:00,160
network with different nodes

00:39:58,480 --> 00:40:01,839
and one of the great things about reno

00:40:00,160 --> 00:40:03,359
is it has profile for different dev

00:40:01,839 --> 00:40:04,240
boards so remember i mentioned that

00:40:03,359 --> 00:40:07,119
sci-fi

00:40:04,240 --> 00:40:08,960
high five on leash board that the fedora

00:40:07,119 --> 00:40:09,599
project and alert people were using well

00:40:08,960 --> 00:40:12,480
it's it's

00:40:09,599 --> 00:40:14,000
expensive and hard to find so that's you

00:40:12,480 --> 00:40:15,520
know if you don't have the board you can

00:40:14,000 --> 00:40:17,440
still

00:40:15,520 --> 00:40:19,280
run the software that's supposed to run

00:40:17,440 --> 00:40:22,319
on it by using the

00:40:19,280 --> 00:40:24,560
profile in reno so here's an example of

00:40:22,319 --> 00:40:26,560
my laptop pretending to be the sci-fi

00:40:24,560 --> 00:40:28,160
fun leash board

00:40:26,560 --> 00:40:31,119
booting up the same software that runs

00:40:28,160 --> 00:40:33,359
on the board and because it's a full

00:40:31,119 --> 00:40:35,520
modern laptop it actually runs pretty

00:40:33,359 --> 00:40:38,720
fast so it doesn't feel like it's some

00:40:35,520 --> 00:40:40,240
super slow simulator

00:40:38,720 --> 00:40:41,839
finally to leave you with i thought this

00:40:40,240 --> 00:40:43,920
was a really interesting concept that i

00:40:41,839 --> 00:40:45,599
came across the idea of a trustworthy

00:40:43,920 --> 00:40:48,640
self-hosted computer

00:40:45,599 --> 00:40:50,079
so gabriel samlo at carnegie mellon came

00:40:48,640 --> 00:40:53,200
up with this concept

00:40:50,079 --> 00:40:56,640
of okay now we have open source tools

00:40:53,200 --> 00:40:58,079
uh that we can use to load designs into

00:40:56,640 --> 00:41:01,599
an fpga

00:40:58,079 --> 00:41:03,200
and we have uh soft cores that can run

00:41:01,599 --> 00:41:04,720
inside of the fpga that are capable of

00:41:03,200 --> 00:41:07,839
running linux

00:41:04,720 --> 00:41:09,280
and we can run those fpga tools inside

00:41:07,839 --> 00:41:12,240
of linux so we can actually create a

00:41:09,280 --> 00:41:13,680
self-hosted system that can build itself

00:41:12,240 --> 00:41:15,920
which is i think quite an interesting

00:41:13,680 --> 00:41:16,240
concept i highly recommend checking out

00:41:15,920 --> 00:41:18,960
the

00:41:16,240 --> 00:41:20,079
talk that he has that i linked to and

00:41:18,960 --> 00:41:22,800
here's just one of the slides

00:41:20,079 --> 00:41:23,440
from it showing how he's using lidax

00:41:22,800 --> 00:41:26,800
along with

00:41:23,440 --> 00:41:28,960
rocket which is a core from berkeley

00:41:26,800 --> 00:41:30,000
and how those all come together to be a

00:41:28,960 --> 00:41:33,359
self-hosted

00:41:30,000 --> 00:41:35,680
fpga linux computer

00:41:33,359 --> 00:41:36,960
so thank you for watching and i'm happy

00:41:35,680 --> 00:41:39,440
to take any questions

00:41:36,960 --> 00:41:40,880
online and hopefully we'll be chatting

00:41:39,440 --> 00:41:42,640
throughout the rest of the conference

00:41:40,880 --> 00:41:43,359
and i think the slack that we'll have

00:41:42,640 --> 00:41:45,839
for the

00:41:43,359 --> 00:41:49,839
for the different uh talks and topics

00:41:45,839 --> 00:41:49,839

YouTube URL: https://www.youtube.com/watch?v=Rsyn3_PjRXw


