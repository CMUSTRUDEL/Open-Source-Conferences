Title: Connected Vehicle Platform: Kubernetes and Vehicle Service Mesh - Seiichi Koizumi & Aman Gupta
Publication date: 2020-12-03
Playlist: Open Source Summit Japan & Automotive Linux Summit 2020
Description: 
	Connected Vehicle Platform: Kubernetes and Vehicle Service Mesh - Seiichi Koizumi & Aman Gupta, Denso Corporation
Captions: 
	00:00:05,759 --> 00:00:10,559
hello everyone

00:00:07,359 --> 00:00:12,960
uh thank you for coming to our session

00:00:10,559 --> 00:00:14,559
so this session is entitled connected

00:00:12,960 --> 00:00:17,680
beaker platform

00:00:14,559 --> 00:00:21,039
kubernetes and the bigger subsmash

00:00:17,680 --> 00:00:21,039
so let's get started

00:00:26,880 --> 00:00:33,360
so at the end of this session at first

00:00:30,560 --> 00:00:34,800
we will introduce our company and our

00:00:33,360 --> 00:00:37,680
team

00:00:34,800 --> 00:00:38,800
secondly we will explain what we are

00:00:37,680 --> 00:00:42,320
developing

00:00:38,800 --> 00:00:44,320
and why we are using kubernetes

00:00:42,320 --> 00:00:46,879
then we will explain our technical

00:00:44,320 --> 00:00:46,879
details

00:00:51,039 --> 00:00:55,360
so let me introduce myself so i'm such

00:00:53,840 --> 00:00:58,640
kosumi

00:00:55,360 --> 00:01:01,960
project manager of this misaki project

00:00:58,640 --> 00:01:06,240
so i joined denzel corporation in

00:01:01,960 --> 00:01:09,520
2017 so i'm dropping edge and cloud

00:01:06,240 --> 00:01:11,760
integrated platform to bring cloud

00:01:09,520 --> 00:01:14,400
native ecosystem to the vehicle

00:01:11,760 --> 00:01:14,400
application

00:01:17,439 --> 00:01:21,040
okay so amazon could you introduce

00:01:19,119 --> 00:01:24,400
yourself okay

00:01:21,040 --> 00:01:26,240
so hi everyone my name is aman gupta and

00:01:24,400 --> 00:01:27,520
i'm a software engineer at denso

00:01:26,240 --> 00:01:30,720
corporation

00:01:27,520 --> 00:01:33,040
i joined denso in october 2019 and this

00:01:30,720 --> 00:01:36,560
is my first full-time job

00:01:33,040 --> 00:01:39,520
and i am also developing misaki project

00:01:36,560 --> 00:01:40,720
in kuzumi sans team kusumi-san please

00:01:39,520 --> 00:01:42,960
continue

00:01:40,720 --> 00:01:42,960
okay

00:01:44,320 --> 00:01:48,799
so i just explained the background of

00:01:47,119 --> 00:01:52,240
our project

00:01:48,799 --> 00:01:54,240
so at first the dancer is an automotive

00:01:52,240 --> 00:01:56,960
parts manufacturer

00:01:54,240 --> 00:01:58,079
so we are providing the multiple type of

00:01:56,960 --> 00:02:00,880
the

00:01:58,079 --> 00:02:02,560
products and system for global vehicle

00:02:00,880 --> 00:02:05,119
manufacturer

00:02:02,560 --> 00:02:05,920
so we are taking a second global market

00:02:05,119 --> 00:02:09,840
share

00:02:05,920 --> 00:02:09,840
in automotive parts industry

00:02:14,080 --> 00:02:17,920
so dancer is trying to be a service

00:02:16,879 --> 00:02:20,800
enabler

00:02:17,920 --> 00:02:22,720
by utilizing cloud technology and

00:02:20,800 --> 00:02:25,599
creating additional values

00:02:22,720 --> 00:02:26,959
for example their remote maintenance

00:02:25,599 --> 00:02:31,680
fleet management

00:02:26,959 --> 00:02:31,680
and automatic driving under traffic

00:02:34,840 --> 00:02:37,840
contradiction

00:02:38,239 --> 00:02:42,080
to be a service enabler we are doing the

00:02:41,599 --> 00:02:45,680
three

00:02:42,080 --> 00:02:46,000
sort of activities so the first one is

00:02:45,680 --> 00:02:49,440
uh

00:02:46,000 --> 00:02:53,040
to hit on the new mobility subs idea

00:02:49,440 --> 00:02:53,040
we do our design thinking

00:02:53,680 --> 00:02:58,879
second reader to develop the prototype

00:02:55,920 --> 00:03:05,440
quickly and round it easily

00:02:58,879 --> 00:03:07,760
we are using the public cloud and oss

00:03:05,440 --> 00:03:09,599
on the third option to create user

00:03:07,760 --> 00:03:13,760
values with customers

00:03:09,599 --> 00:03:16,640
we do other develops the box

00:03:13,760 --> 00:03:19,840
so this three approach is the same as

00:03:16,640 --> 00:03:19,840
the silicon valley approach

00:03:24,560 --> 00:03:31,840
especially our team focus on the

00:03:28,319 --> 00:03:35,200
vehicle connected platform so denso

00:03:31,840 --> 00:03:36,319
is providing the hardware parts like ecu

00:03:35,200 --> 00:03:40,159
the sensors

00:03:36,319 --> 00:03:40,159
their air conditioner

00:03:40,239 --> 00:03:44,480
but not only that by utilizing the edge

00:03:43,599 --> 00:03:46,720
computing

00:03:44,480 --> 00:03:49,280
and also cloud computing we are

00:03:46,720 --> 00:03:52,080
providing additional functions

00:03:49,280 --> 00:03:53,360
such as microservices and also cross

00:03:52,080 --> 00:03:56,959
sides of the

00:03:53,360 --> 00:03:56,959
the microservice module

00:03:57,200 --> 00:04:00,480
so based on that mobility service

00:03:59,599 --> 00:04:02,959
providers

00:04:00,480 --> 00:04:05,439
can create a new service easily and

00:04:02,959 --> 00:04:05,439
quickly

00:04:11,280 --> 00:04:16,560
so this is our team member so we used to

00:04:14,879 --> 00:04:19,680
work in the

00:04:16,560 --> 00:04:23,110
development room but recently we are

00:04:19,680 --> 00:04:26,220
work from home in this topic 19

00:04:23,110 --> 00:04:26,220
[Music]

00:04:26,840 --> 00:04:29,840
situation

00:04:31,040 --> 00:04:38,080
so actually there are some barriers to

00:04:34,080 --> 00:04:40,479
develop the vehicle these applications

00:04:38,080 --> 00:04:41,360
so it's not same as a cloud application

00:04:40,479 --> 00:04:45,360
development

00:04:41,360 --> 00:04:45,360
so let me explain that what's the values

00:04:51,199 --> 00:04:58,560
first barrier is emitter software

00:04:55,360 --> 00:04:59,040
so this sort of the md software is

00:04:58,560 --> 00:05:01,520
running

00:04:59,040 --> 00:05:04,320
on their vehicle ecu's the electric

00:05:01,520 --> 00:05:04,320
control unit

00:05:05,680 --> 00:05:13,440
so around 25 to the up to the

00:05:09,919 --> 00:05:16,560
70 ecu's are running

00:05:13,440 --> 00:05:19,520
on inside the vehicle

00:05:16,560 --> 00:05:21,280
so small ecu's only having a no

00:05:19,520 --> 00:05:24,720
operation system

00:05:21,280 --> 00:05:27,919
under middle side of the a real-time

00:05:24,720 --> 00:05:31,280
operation system so redux is

00:05:27,919 --> 00:05:31,280
not our standard yet

00:05:34,160 --> 00:05:39,199
under computing resources of these

00:05:36,479 --> 00:05:42,240
server ecu's are quite limited

00:05:39,199 --> 00:05:44,720
but there is no redundancy of their

00:05:42,240 --> 00:05:46,560
computer resources for their additional

00:05:44,720 --> 00:05:53,840
applications

00:05:46,560 --> 00:05:53,840
so far

00:05:54,800 --> 00:06:01,440
and emulating the in the ecu environment

00:05:58,800 --> 00:06:03,600
on the development pc is a little bit

00:06:01,440 --> 00:06:06,400
difficult

00:06:03,600 --> 00:06:07,039
it requires some special hardware under

00:06:06,400 --> 00:06:10,319
same

00:06:07,039 --> 00:06:12,639
type of emulator and

00:06:10,319 --> 00:06:13,680
keep updating the new software to the

00:06:12,639 --> 00:06:18,000
vehicle

00:06:13,680 --> 00:06:22,880
is not easy so these sort of

00:06:18,000 --> 00:06:27,440
problems are the first and first barrier

00:06:22,880 --> 00:06:27,440
of the software development for vehicle

00:06:31,360 --> 00:06:36,639
and second barrier is a unstable

00:06:34,080 --> 00:06:36,639
connection

00:06:37,199 --> 00:06:40,960
vehicles are sort of their distributed

00:06:39,919 --> 00:06:44,560
system

00:06:40,960 --> 00:06:47,039
and they keep moving so sometimes

00:06:44,560 --> 00:06:48,960
there is no signal and the network is

00:06:47,039 --> 00:06:53,039
disconnected

00:06:48,960 --> 00:06:55,360
and sometimes the network wheels

00:06:53,039 --> 00:06:59,199
is not good enough so uploading or

00:06:55,360 --> 00:06:59,199
downloading speeds is quite slow

00:06:59,759 --> 00:07:05,919
so developers have to think about

00:07:03,039 --> 00:07:07,440
just solve their network issues for

00:07:05,919 --> 00:07:10,479
example they're

00:07:07,440 --> 00:07:11,280
storing a data locally and send it a

00:07:10,479 --> 00:07:13,680
data again

00:07:11,280 --> 00:07:15,039
and if it fails it's load it back and

00:07:13,680 --> 00:07:17,039
send it again

00:07:15,039 --> 00:07:19,520
serve the column the processing by

00:07:17,039 --> 00:07:23,199
troublesome

00:07:19,520 --> 00:07:23,199
so this is the second barrier

00:07:28,880 --> 00:07:36,000
so these two barriers uh

00:07:32,400 --> 00:07:39,199
is obstacle to develop the the big

00:07:36,000 --> 00:07:41,919
applications but the motivation

00:07:39,199 --> 00:07:42,560
is developing the bigger applications

00:07:41,919 --> 00:07:46,400
are getting

00:07:42,560 --> 00:07:48,639
the bigger and bigger for example the

00:07:46,400 --> 00:07:49,680
the market size of the connected vehicle

00:07:48,639 --> 00:07:53,039
and application

00:07:49,680 --> 00:07:53,039
is getting bigger

00:07:53,520 --> 00:07:59,840
under the use number of the user is

00:07:56,000 --> 00:07:59,840
rapidly increasing

00:08:01,680 --> 00:08:08,400
and also the beaker itself now shifting

00:08:05,120 --> 00:08:10,879
from the feature phone style the

00:08:08,400 --> 00:08:12,160
to the smartphone style much more

00:08:10,879 --> 00:08:16,080
flexibility and

00:08:12,160 --> 00:08:16,080
more new computing resources

00:08:16,240 --> 00:08:21,520
so new vehicle will have their uh more

00:08:19,520 --> 00:08:26,240
flexible os regular linux

00:08:21,520 --> 00:08:28,720
and the platform

00:08:26,240 --> 00:08:29,599
so some new use cases are already

00:08:28,720 --> 00:08:31,840
appeared

00:08:29,599 --> 00:08:32,880
for example there are either a normal

00:08:31,840 --> 00:08:41,839
detection

00:08:32,880 --> 00:08:41,839
or real-time driving support

00:08:46,560 --> 00:08:49,600
so to develop the prototype the

00:08:48,720 --> 00:08:52,720
smartphone

00:08:49,600 --> 00:08:53,680
like vehicle so we developed a

00:08:52,720 --> 00:08:57,839
kubernetes

00:08:53,680 --> 00:08:57,839
connected vehicle platform misaki

00:08:57,920 --> 00:09:03,200
so in this platform there are no

00:09:00,480 --> 00:09:05,760
ambulance skills required

00:09:03,200 --> 00:09:06,839
and quite easy to deploy and uploading

00:09:05,760 --> 00:09:10,720
the vco

00:09:06,839 --> 00:09:13,680
application and developers

00:09:10,720 --> 00:09:14,880
have no need to worry about the network

00:09:13,680 --> 00:09:18,080
disconnection

00:09:14,880 --> 00:09:18,080
or network failures

00:09:19,519 --> 00:09:26,320
it enhance the productivity for their

00:09:22,880 --> 00:09:26,320
bigger application developers

00:09:33,120 --> 00:09:38,080
from architecture perspective ideal

00:09:36,480 --> 00:09:41,920
architecture is like this

00:09:38,080 --> 00:09:43,120
a left sun so centralized computing

00:09:41,920 --> 00:09:45,680
resources

00:09:43,120 --> 00:09:46,800
under centralized management it's quite

00:09:45,680 --> 00:09:50,160
easy to manage

00:09:46,800 --> 00:09:52,080
and control but the

00:09:50,160 --> 00:09:53,680
actually there is there's under network

00:09:52,080 --> 00:09:57,200
delay and disconnection

00:09:53,680 --> 00:10:00,240
it not works so our approach

00:09:57,200 --> 00:10:02,880
is the right side so our approaches are

00:10:00,240 --> 00:10:04,000
distributed computer resources like a

00:10:02,880 --> 00:10:06,560
small crowd is

00:10:04,000 --> 00:10:08,720
located inside a vehicle where the

00:10:06,560 --> 00:10:11,680
marginalized function is centralized

00:10:08,720 --> 00:10:19,839
to the cloud so it's simplified our

00:10:11,680 --> 00:10:19,839
management function

00:10:22,399 --> 00:10:28,560
so this is the architecture overview

00:10:25,920 --> 00:10:30,000
amansa will explain the details but

00:10:28,560 --> 00:10:32,880
briefly says

00:10:30,000 --> 00:10:34,560
we are using the some open source on

00:10:32,880 --> 00:10:37,519
edibles

00:10:34,560 --> 00:10:38,000
like this sort of the digital literature

00:10:37,519 --> 00:10:41,040
with the

00:10:38,000 --> 00:10:41,040
goal implementation

00:10:42,320 --> 00:10:46,000
and also there are we are using

00:10:45,040 --> 00:10:48,720
kubernetes but

00:10:46,000 --> 00:10:49,760
the entire kubernetes is a little bit

00:10:48,720 --> 00:10:52,160
heavy

00:10:49,760 --> 00:10:52,880
to running inside the vehicle so we

00:10:52,160 --> 00:10:56,079
split

00:10:52,880 --> 00:10:59,120
into the a master node and worker node

00:10:56,079 --> 00:11:01,519
so most nodes work in the cloud side and

00:10:59,120 --> 00:11:02,959
also the worker nodes they work in that

00:11:01,519 --> 00:11:05,440
liquid side

00:11:02,959 --> 00:11:08,240
and we are interconnects both sides are

00:11:05,440 --> 00:11:11,360
using vpn

00:11:08,240 --> 00:11:13,600
so earlier if they disconnected

00:11:11,360 --> 00:11:16,800
this vehicle that these backer workout

00:11:13,600 --> 00:11:16,800
container keep running

00:11:27,120 --> 00:11:33,040
so why kubernetes so the reason why

00:11:30,640 --> 00:11:35,920
we are selected kubernetes is a

00:11:33,040 --> 00:11:35,920
flexibility

00:11:36,320 --> 00:11:40,959
so current ecu's are not good for the

00:11:39,680 --> 00:11:43,360
kubernetes

00:11:40,959 --> 00:11:46,320
because it have not enough computing

00:11:43,360 --> 00:11:46,320
power for that

00:11:49,440 --> 00:11:54,320
but the integrated issue much of a

00:11:52,959 --> 00:11:57,200
bigger ecu

00:11:54,320 --> 00:11:59,360
is getting popular and another

00:11:57,200 --> 00:12:02,399
additional computer resources like a big

00:11:59,360 --> 00:12:06,160
computer will be implemented in the

00:12:02,399 --> 00:12:06,639
vehicle so so inside the vehicle there

00:12:06,160 --> 00:12:09,839
is a

00:12:06,639 --> 00:12:12,959
several small computer resources

00:12:09,839 --> 00:12:15,040
is located so kubernetes

00:12:12,959 --> 00:12:16,800
is a really good approach to gathering

00:12:15,040 --> 00:12:19,600
other server computer resources

00:12:16,800 --> 00:12:25,839
and making run single port and running

00:12:19,600 --> 00:12:25,839
the containers

00:12:30,800 --> 00:12:35,200
so the documents flexibility i can give

00:12:34,000 --> 00:12:39,200
the

00:12:35,200 --> 00:12:40,880
workload uploading so big rates

00:12:39,200 --> 00:12:42,959
only have a limited to the computer

00:12:40,880 --> 00:12:46,560
resources so

00:12:42,959 --> 00:12:48,079
sometimes the application is consuming a

00:12:46,560 --> 00:12:51,120
lot of the computer resources

00:12:48,079 --> 00:12:53,519
inside a vehicle so in that case the

00:12:51,120 --> 00:12:54,800
high priority applications keep running

00:12:53,519 --> 00:12:56,639
inside the vehicle

00:12:54,800 --> 00:12:58,720
and the upgrade and low priority

00:12:56,639 --> 00:13:02,639
applications off-roading

00:12:58,720 --> 00:13:02,639
are migrated to the cloud

00:13:03,680 --> 00:13:07,760
so the the application itself is a keep

00:13:07,120 --> 00:13:11,680
running

00:13:07,760 --> 00:13:20,880
but the workload inside the vehicle

00:13:11,680 --> 00:13:23,920
is stable

00:13:20,880 --> 00:13:26,880
and the other reason of using kubernetes

00:13:23,920 --> 00:13:26,880
is subsmesh

00:13:27,120 --> 00:13:31,519
so misaki provides the common network

00:13:30,480 --> 00:13:34,800
functions

00:13:31,519 --> 00:13:38,000
such as data queuing so

00:13:34,800 --> 00:13:39,040
if there is no dissolved network layer

00:13:38,000 --> 00:13:41,519
subsmesh

00:13:39,040 --> 00:13:43,920
so application developers should think

00:13:41,519 --> 00:13:47,360
about you know network disconnection

00:13:43,920 --> 00:13:48,639
or network slowing down the sending data

00:13:47,360 --> 00:13:51,680
again but

00:13:48,639 --> 00:13:54,800
by preparing this server common function

00:13:51,680 --> 00:13:56,079
the application developers just try to

00:13:54,800 --> 00:13:58,720
send the data

00:13:56,079 --> 00:13:58,720
under this

00:14:00,839 --> 00:14:03,839
in

00:14:03,920 --> 00:14:07,680
connected store data to the this data

00:14:06,720 --> 00:14:11,279
queue

00:14:07,680 --> 00:14:15,519
and after they regain the the connection

00:14:11,279 --> 00:14:17,760
the sending data again so that time is a

00:14:15,519 --> 00:14:19,760
this application never realized the

00:14:17,760 --> 00:14:24,880
network disconnection

00:14:19,760 --> 00:14:24,880
so it's simplified the development

00:14:28,839 --> 00:14:31,839
process

00:14:32,079 --> 00:14:36,079
so we are so surprised by the

00:14:34,240 --> 00:14:39,440
presentation at the cubicle

00:14:36,079 --> 00:14:39,920
north america last year so yes no air

00:14:39,440 --> 00:14:42,160
force

00:14:39,920 --> 00:14:43,360
is already trying to use kubernetes in

00:14:42,160 --> 00:14:46,959
the

00:14:43,360 --> 00:14:48,399
f-16 phytogenetic so you know using

00:14:46,959 --> 00:14:52,240
kubernetes in bigger is

00:14:48,399 --> 00:14:52,240
more easier than that

00:14:53,680 --> 00:14:59,839
so these sort of things are using are we

00:14:55,920 --> 00:14:59,839
are using kubernetes

00:15:00,639 --> 00:15:04,800
okay so let's move on to the technical

00:15:02,480 --> 00:15:08,000
details and the demonstrations

00:15:04,800 --> 00:15:10,959
analysis quiet okay

00:15:08,000 --> 00:15:11,600
so thank you quiz nissan for presenting

00:15:10,959 --> 00:15:14,720
your part

00:15:11,600 --> 00:15:18,000
and hi everyone i'm back again and

00:15:14,720 --> 00:15:21,760
now i will tell you about the technical

00:15:18,000 --> 00:15:21,760
details of our misaki project

00:15:22,959 --> 00:15:30,320
so let's start with the most basic thing

00:15:27,360 --> 00:15:30,639
what our misaki budget consists of so we

00:15:30,320 --> 00:15:33,839
call

00:15:30,639 --> 00:15:37,199
it a weaker cluster so think of

00:15:33,839 --> 00:15:40,320
it as a cluster of an edge device

00:15:37,199 --> 00:15:43,360
and a cloud instance and they

00:15:40,320 --> 00:15:45,920
are connected by kubernetes so

00:15:43,360 --> 00:15:47,839
the master node lives in the cloud side

00:15:45,920 --> 00:15:48,480
and the worker node lives in the edge

00:15:47,839 --> 00:15:51,839
side

00:15:48,480 --> 00:15:54,880
and they both are connected via vpn so

00:15:51,839 --> 00:15:55,680
in the real world scenario we can have a

00:15:54,880 --> 00:15:58,800
one cloud

00:15:55,680 --> 00:16:00,720
instance for a car or a cloud instance

00:15:58,800 --> 00:16:03,440
can be shared among a few cars

00:16:00,720 --> 00:16:03,920
so that's the scenario we are thinking

00:16:03,440 --> 00:16:09,040
of

00:16:03,920 --> 00:16:11,600
and we are developing for that

00:16:09,040 --> 00:16:13,440
has two different components one is

00:16:11,600 --> 00:16:16,480
misaki orchestrator and

00:16:13,440 --> 00:16:17,920
one is misaki service mesh so i will go

00:16:16,480 --> 00:16:20,720
through both of them

00:16:17,920 --> 00:16:21,360
and show you the demo scenario for each

00:16:20,720 --> 00:16:24,480
of

00:16:21,360 --> 00:16:27,519
each of a practical real

00:16:24,480 --> 00:16:31,120
real life scenario so let's start with

00:16:27,519 --> 00:16:31,120
the misaki orchestrator first

00:16:31,600 --> 00:16:35,279
this is the architecture for misaki

00:16:34,000 --> 00:16:38,160
orchestrator

00:16:35,279 --> 00:16:40,000
and it mainly consists of four different

00:16:38,160 --> 00:16:42,880
components

00:16:40,000 --> 00:16:44,079
you can see from the left hand side most

00:16:42,880 --> 00:16:47,279
right hand side

00:16:44,079 --> 00:16:48,880
we have a ui and on the most

00:16:47,279 --> 00:16:51,600
left hand side we have the vehicle

00:16:48,880 --> 00:16:54,800
cluster so it's like an end-to-end

00:16:51,600 --> 00:16:57,279
connected vehicle platform

00:16:54,800 --> 00:16:59,120
so i'll explain all of these four

00:16:57,279 --> 00:17:02,399
components now

00:16:59,120 --> 00:17:05,280
so let's start with the ui first so

00:17:02,399 --> 00:17:07,120
we call it misaki ui misaki ui is

00:17:05,280 --> 00:17:10,640
implemented in next.js

00:17:07,120 --> 00:17:14,480
it's a vue.js framework and think of it

00:17:10,640 --> 00:17:16,959
as a dashboard for administrator where

00:17:14,480 --> 00:17:18,000
he or she can see the list of vehicles

00:17:16,959 --> 00:17:20,480
and

00:17:18,000 --> 00:17:22,799
also can see the list of applications to

00:17:20,480 --> 00:17:25,280
deploy to this vehicles

00:17:22,799 --> 00:17:25,919
and the applications we are talking

00:17:25,280 --> 00:17:28,880
about here

00:17:25,919 --> 00:17:29,520
are basically hem charts this him chart

00:17:28,880 --> 00:17:31,840
lives

00:17:29,520 --> 00:17:34,880
in a chart repository which can be

00:17:31,840 --> 00:17:37,360
hosted anywhere on github gitlab

00:17:34,880 --> 00:17:38,160
and we are using something called chart

00:17:37,360 --> 00:17:40,720
museum

00:17:38,160 --> 00:17:42,799
which is hosted on our eks cluster

00:17:40,720 --> 00:17:45,360
currently

00:17:42,799 --> 00:17:46,080
so an administrator choose the sun chart

00:17:45,360 --> 00:17:48,720
and deploy

00:17:46,080 --> 00:17:49,600
this to a vehicle and this request goes

00:17:48,720 --> 00:17:52,320
from this ui

00:17:49,600 --> 00:17:54,480
to the next component which is called

00:17:52,320 --> 00:17:57,600
misaki api

00:17:54,480 --> 00:18:01,360
so now let's move to misaki api

00:17:57,600 --> 00:18:04,080
misaki api is a rest api

00:18:01,360 --> 00:18:06,320
implemented in golang and the main

00:18:04,080 --> 00:18:09,200
function of misaki api

00:18:06,320 --> 00:18:11,440
is to render a hem chart into a useful

00:18:09,200 --> 00:18:14,480
kubernetes manifest list

00:18:11,440 --> 00:18:17,600
so a typical hem chart looks like this

00:18:14,480 --> 00:18:20,559
on the left hand side and

00:18:17,600 --> 00:18:24,320
the most important part of a helm chart

00:18:20,559 --> 00:18:27,360
is this values.ml file

00:18:24,320 --> 00:18:28,080
so on the right hand side you can see we

00:18:27,360 --> 00:18:30,799
have a

00:18:28,080 --> 00:18:31,760
manifest list which have a lot of

00:18:30,799 --> 00:18:35,520
resources like

00:18:31,760 --> 00:18:35,520
secrets deployment services

00:18:36,080 --> 00:18:41,440
now after we render this

00:18:39,120 --> 00:18:42,640
hem chart and convert it into a manifest

00:18:41,440 --> 00:18:45,840
then

00:18:42,640 --> 00:18:48,000
we send it to a database and for

00:18:45,840 --> 00:18:49,440
for the database we are using something

00:18:48,000 --> 00:18:52,640
called digital twin

00:18:49,440 --> 00:18:54,960
also known as ditto and this is a

00:18:52,640 --> 00:18:56,000
open source database solution for iot

00:18:54,960 --> 00:19:00,000
devices developed

00:18:56,000 --> 00:19:03,679
by eclipse foundation the

00:19:00,000 --> 00:19:06,799
main mvp for this database

00:19:03,679 --> 00:19:09,520
is that the database clients can connect

00:19:06,799 --> 00:19:11,919
to it via a websocket connection

00:19:09,520 --> 00:19:13,520
so for our case we have two different

00:19:11,919 --> 00:19:16,400
components connected to

00:19:13,520 --> 00:19:18,640
digital twin one is the misaki api which

00:19:16,400 --> 00:19:21,520
is sending the request and the other is

00:19:18,640 --> 00:19:23,440
visa kubernetes agent which is present

00:19:21,520 --> 00:19:26,559
on the vehicle cluster

00:19:23,440 --> 00:19:29,600
so misaki api sends this

00:19:26,559 --> 00:19:33,039
rendered kubernetes manifest

00:19:29,600 --> 00:19:34,240
and store it to a vehicle id in digital

00:19:33,039 --> 00:19:37,760
twin

00:19:34,240 --> 00:19:38,240
and once it is changed our humanities

00:19:37,760 --> 00:19:41,360
agent

00:19:38,240 --> 00:19:44,720
fetches it from the digital twin

00:19:41,360 --> 00:19:48,480
via a websocket

00:19:44,720 --> 00:19:51,120
so that's the use of digital twin here

00:19:48,480 --> 00:19:53,520
and now we go to the misaki kubernetes

00:19:51,120 --> 00:19:56,400
agent

00:19:53,520 --> 00:19:58,240
so as you have seen our kubernetes agent

00:19:56,400 --> 00:20:02,000
fetched the

00:19:58,240 --> 00:20:04,240
kubernetes manifest from ditto and

00:20:02,000 --> 00:20:05,600
the main job of communities agent is to

00:20:04,240 --> 00:20:07,520
apply this manifest

00:20:05,600 --> 00:20:08,799
to our vehicle cluster so our vehicle

00:20:07,520 --> 00:20:11,120
cluster has

00:20:08,799 --> 00:20:12,960
two different components right uh one is

00:20:11,120 --> 00:20:16,559
the cloud instance and one is the

00:20:12,960 --> 00:20:20,000
edge device so our application

00:20:16,559 --> 00:20:21,840
can be deployed either in edge device or

00:20:20,000 --> 00:20:25,919
cloud device or can

00:20:21,840 --> 00:20:30,480
be separated from

00:20:25,919 --> 00:20:30,480
from cloud and edge device

00:20:30,559 --> 00:20:34,880
so that's misaki orchestrator basically

00:20:33,360 --> 00:20:38,799
and

00:20:34,880 --> 00:20:38,799
here is the over overall overview

00:20:39,120 --> 00:20:43,360
and you can see there is a dashboard to

00:20:41,840 --> 00:20:45,360
choose the applications

00:20:43,360 --> 00:20:47,200
and we choose the application it goes to

00:20:45,360 --> 00:20:51,440
the misaki which is basically

00:20:47,200 --> 00:20:52,080
api and it it gets the actual hand chart

00:20:51,440 --> 00:20:54,400
from

00:20:52,080 --> 00:20:55,919
the application repository this

00:20:54,400 --> 00:20:59,200
application

00:20:55,919 --> 00:21:02,480
tells uh tells about the containers

00:20:59,200 --> 00:21:06,000
present present in this

00:21:02,480 --> 00:21:08,080
scenario and it can be deployed deployed

00:21:06,000 --> 00:21:10,960
on both edge and

00:21:08,080 --> 00:21:10,960
cloud instance

00:21:11,679 --> 00:21:17,679
so today i will show you a

00:21:14,960 --> 00:21:20,400
practical scenario a real life

00:21:17,679 --> 00:21:24,000
application which we have developed

00:21:20,400 --> 00:21:24,880
in-house so the flow will be something

00:21:24,000 --> 00:21:27,280
like this

00:21:24,880 --> 00:21:28,720
we will first delete an application so

00:21:27,280 --> 00:21:31,440
the application will delete

00:21:28,720 --> 00:21:33,600
is called can uploader for prius it has

00:21:31,440 --> 00:21:36,720
four different components

00:21:33,600 --> 00:21:38,080
and after deleting this i will show you

00:21:36,720 --> 00:21:41,280
the terminal

00:21:38,080 --> 00:21:43,440
injection actually jetson jvr and

00:21:41,280 --> 00:21:44,400
show you that parts are no longer

00:21:43,440 --> 00:21:47,760
available

00:21:44,400 --> 00:21:49,440
then i will install another application

00:21:47,760 --> 00:21:52,320
called via containers pro

00:21:49,440 --> 00:21:53,200
ps so this application has eight

00:21:52,320 --> 00:21:56,320
different ports

00:21:53,200 --> 00:21:59,039
and i will show the login screen

00:21:56,320 --> 00:22:00,320
of jackson jvr again and you will see it

00:21:59,039 --> 00:22:06,159
in different pods

00:22:00,320 --> 00:22:06,159
later so let's move to the video now

00:22:07,440 --> 00:22:11,039
so here is the jetson jvf screen and you

00:22:10,159 --> 00:22:14,080
can see

00:22:11,039 --> 00:22:16,960
on the top four parts are via containers

00:22:14,080 --> 00:22:19,520
our can containers and we are going to

00:22:16,960 --> 00:22:19,520
delete them

00:22:23,840 --> 00:22:27,840
so right now it's in the settings

00:22:25,520 --> 00:22:28,960
shutting down face and you can see it's

00:22:27,840 --> 00:22:31,679
in the terminating

00:22:28,960 --> 00:22:33,919
state right now in jackson and now it's

00:22:31,679 --> 00:22:35,919
no longer available

00:22:33,919 --> 00:22:37,120
these changes will also reflect on the

00:22:35,919 --> 00:22:38,840
dashboard

00:22:37,120 --> 00:22:41,120
you can see there are no containers

00:22:38,840 --> 00:22:43,200
available

00:22:41,120 --> 00:22:45,280
now we will install another services and

00:22:43,200 --> 00:22:48,000
this is basically login to a chart

00:22:45,280 --> 00:22:48,000
repository

00:22:48,240 --> 00:22:52,240
these are the following charts available

00:22:50,320 --> 00:22:53,760
and we will install vr containers for

00:22:52,240 --> 00:22:56,000
prior

00:22:53,760 --> 00:22:56,880
we can also input some additional

00:22:56,000 --> 00:22:59,840
components

00:22:56,880 --> 00:23:00,880
to this hem chart for our case we will

00:22:59,840 --> 00:23:03,760
give the version

00:23:00,880 --> 00:23:05,360
and also the login details for the

00:23:03,760 --> 00:23:09,520
container

00:23:05,360 --> 00:23:11,600
repository because our

00:23:09,520 --> 00:23:14,400
kubernetes needs to pull this docker

00:23:11,600 --> 00:23:16,240
images right

00:23:14,400 --> 00:23:19,120
so we have done that and now it's in the

00:23:16,240 --> 00:23:19,120
provisioning state

00:23:20,080 --> 00:23:24,799
let's wait for a moment and now it's in

00:23:21,919 --> 00:23:27,840
a working state let's check the

00:23:24,799 --> 00:23:29,280
jetson jv here so

00:23:27,840 --> 00:23:32,080
you can see there are eight different

00:23:29,280 --> 00:23:35,360
parts now on the top

00:23:32,080 --> 00:23:37,280
and this change will also reflect on our

00:23:35,360 --> 00:23:38,960
dashboard you can see

00:23:37,280 --> 00:23:40,640
on the edge side we have a different

00:23:38,960 --> 00:23:43,120
port running

00:23:40,640 --> 00:23:51,440
so this screen dot means it's in the

00:23:43,120 --> 00:23:55,520
running state

00:23:51,440 --> 00:23:58,080
so our vr containers are actually

00:23:55,520 --> 00:23:59,279
responsible for sending files to s3

00:23:58,080 --> 00:24:02,320
bucket every 30

00:23:59,279 --> 00:24:06,400
seconds and i will show you that it just

00:24:02,320 --> 00:24:10,799
it will just send another file now

00:24:06,400 --> 00:24:10,799
so let me refresh

00:24:13,760 --> 00:24:17,679
and you can see there are two different

00:24:15,039 --> 00:24:18,080
files now so our containers are working

00:24:17,679 --> 00:24:20,960
fine

00:24:18,080 --> 00:24:22,559
so this is like end-to-end process from

00:24:20,960 --> 00:24:25,440
deploying to the deployment

00:24:22,559 --> 00:24:27,120
and actually getting the data to the s3

00:24:25,440 --> 00:24:28,799
bucket

00:24:27,120 --> 00:24:31,360
okay so let's move to the second

00:24:28,799 --> 00:24:33,200
component now

00:24:31,360 --> 00:24:34,559
so our second component is misaki

00:24:33,200 --> 00:24:36,640
service mesh

00:24:34,559 --> 00:24:37,600
uh let me give give you a brief overview

00:24:36,640 --> 00:24:39,520
again

00:24:37,600 --> 00:24:42,000
so why we are using service mesh so

00:24:39,520 --> 00:24:43,120
service mesh decouplers network concerns

00:24:42,000 --> 00:24:45,520
from the applications

00:24:43,120 --> 00:24:46,559
and application developers will no

00:24:45,520 --> 00:24:49,279
longer needs to

00:24:46,559 --> 00:24:50,400
implement distributed system practices

00:24:49,279 --> 00:24:53,679
like timeouts

00:24:50,400 --> 00:24:55,760
system discovery etc and

00:24:53,679 --> 00:24:57,200
application developers can focus on

00:24:55,760 --> 00:24:59,039
business logics

00:24:57,200 --> 00:25:01,679
and values rather than worrying about

00:24:59,039 --> 00:25:04,799
these networks

00:25:01,679 --> 00:25:08,000
and how are we uh doing this

00:25:04,799 --> 00:25:08,559
we are using ny as a sidecar proxy and

00:25:08,000 --> 00:25:10,799
we are

00:25:08,559 --> 00:25:11,600
also using something called misaki

00:25:10,799 --> 00:25:14,080
control pane

00:25:11,600 --> 00:25:16,240
which manages the policies for this

00:25:14,080 --> 00:25:18,159
invoice

00:25:16,240 --> 00:25:20,559
so the architecture looks something like

00:25:18,159 --> 00:25:23,440
this we have a weekly cluster here

00:25:20,559 --> 00:25:24,320
and on the top side we have a cloud node

00:25:23,440 --> 00:25:27,360
which is running

00:25:24,320 --> 00:25:28,960
an application fc and

00:25:27,360 --> 00:25:31,279
on the bottom side we have our azure

00:25:28,960 --> 00:25:33,919
node it is running two applications

00:25:31,279 --> 00:25:34,720
a and app b and all these applications

00:25:33,919 --> 00:25:37,919
are running

00:25:34,720 --> 00:25:38,960
ny as a sidecar proxy so all the

00:25:37,919 --> 00:25:41,840
requests

00:25:38,960 --> 00:25:43,360
coming outgoing or incoming are passing

00:25:41,840 --> 00:25:46,480
through ny and

00:25:43,360 --> 00:25:50,400
ny manages this request where to

00:25:46,480 --> 00:25:52,000
go so to manage policies for this ny

00:25:50,400 --> 00:25:54,799
this control plane

00:25:52,000 --> 00:25:56,880
uh is a centralized unit present in this

00:25:54,799 --> 00:25:58,640
vehicle cluster

00:25:56,880 --> 00:26:00,000
we also have an additional component

00:25:58,640 --> 00:26:05,120
called q

00:26:00,000 --> 00:26:07,919
so q basically stores the

00:26:05,120 --> 00:26:09,039
the data when there is no network

00:26:07,919 --> 00:26:11,679
available

00:26:09,039 --> 00:26:13,520
so it acts as a proxy server it stores

00:26:11,679 --> 00:26:15,360
http request streaming data from

00:26:13,520 --> 00:26:18,240
application when there's

00:26:15,360 --> 00:26:20,400
a network disconnection it resends the

00:26:18,240 --> 00:26:20,880
http request and this streaming data to

00:26:20,400 --> 00:26:25,840
server

00:26:20,880 --> 00:26:25,840
whenever the network is connected

00:26:27,600 --> 00:26:32,000
this is the scenario where we have the

00:26:29,760 --> 00:26:35,200
network connection available

00:26:32,000 --> 00:26:38,799
and we will send a mp4 file

00:26:35,200 --> 00:26:41,360
to s3 bucket and it will be sent to the

00:26:38,799 --> 00:26:45,440
sd market directly

00:26:41,360 --> 00:26:47,120
now considering a case of disconnection

00:26:45,440 --> 00:26:49,039
so our application is trying to send

00:26:47,120 --> 00:26:52,400
this file to s3 bucket

00:26:49,039 --> 00:26:55,120
but it will be redirected to the queue

00:26:52,400 --> 00:26:57,840
and once we regain the network it will

00:26:55,120 --> 00:27:00,240
be automatically sent to the s3 bucket

00:26:57,840 --> 00:27:02,880
so that's the functioning of queue and

00:27:00,240 --> 00:27:02,880
service mesh

00:27:03,039 --> 00:27:09,520
now i will show you a real life scenario

00:27:06,960 --> 00:27:10,400
of an application running in jet stream

00:27:09,520 --> 00:27:13,120
jvr

00:27:10,400 --> 00:27:14,000
and all also this jet sensor is present

00:27:13,120 --> 00:27:17,039
in a vehicle

00:27:14,000 --> 00:27:20,480
actual vehicle toyota prius so

00:27:17,039 --> 00:27:22,399
let's start this is a s3 packet

00:27:20,480 --> 00:27:23,679
and it's currently empty and we will try

00:27:22,399 --> 00:27:27,440
to send a

00:27:23,679 --> 00:27:28,799
dot some file soon so this is the jetson

00:27:27,440 --> 00:27:31,840
jk screen and

00:27:28,799 --> 00:27:32,159
on the left hand side terminal you can

00:27:31,840 --> 00:27:35,039
see

00:27:32,159 --> 00:27:36,159
the logs of service mesh and on the

00:27:35,039 --> 00:27:38,960
right hand side

00:27:36,159 --> 00:27:41,120
right top side you will see my colleague

00:27:38,960 --> 00:27:44,159
will make a request

00:27:41,120 --> 00:27:45,039
to send the file to s3bucket and on the

00:27:44,159 --> 00:27:48,320
bottom

00:27:45,039 --> 00:27:48,640
left uh bottom right you see the locks

00:27:48,320 --> 00:27:50,480
of

00:27:48,640 --> 00:27:52,799
a replay component which will send the

00:27:50,480 --> 00:27:54,799
data once

00:27:52,799 --> 00:27:56,399
a network connection is available so

00:27:54,799 --> 00:27:58,880
right now connection is already

00:27:56,399 --> 00:27:59,760
available and we just see a normal

00:27:58,880 --> 00:28:03,440
response

00:27:59,760 --> 00:28:07,279
and our file should actually be sent

00:28:03,440 --> 00:28:09,760
properly to s3 bucket but soon my

00:28:07,279 --> 00:28:11,360
colleague will disconnect the lte dongle

00:28:09,760 --> 00:28:14,480
from jetson jv

00:28:11,360 --> 00:28:17,520
so how we disconnect is we put

00:28:14,480 --> 00:28:31,840
lt dongle in a ferrari back temporarily

00:28:17,520 --> 00:28:31,840
this will block the signal

00:28:35,360 --> 00:28:38,720
and now my colleague has made a request

00:28:37,840 --> 00:28:40,480
to send this

00:28:38,720 --> 00:28:42,000
dot some file again to the bucket and

00:28:40,480 --> 00:28:44,559
now you will see the response will be

00:28:42,000 --> 00:28:47,440
something different

00:28:44,559 --> 00:28:47,440
please wait a moment

00:28:48,640 --> 00:28:52,240
you can see there is a temporary

00:28:50,159 --> 00:28:54,399
redirect message

00:28:52,240 --> 00:28:59,840
so that means our request has been

00:28:54,399 --> 00:28:59,840
stored in the queue

00:29:00,240 --> 00:29:04,880
and now my colleague will take the

00:29:02,720 --> 00:29:07,919
dongle out and our network will be

00:29:04,880 --> 00:29:08,960
reconnected so once our network is

00:29:07,919 --> 00:29:12,000
available

00:29:08,960 --> 00:29:15,440
our queue should do its job and you you

00:29:12,000 --> 00:29:18,480
should see the changes on the

00:29:15,440 --> 00:29:27,840
bottom right terminal our replay will

00:29:18,480 --> 00:29:27,840
send the file to the sd bucket

00:29:33,520 --> 00:29:38,159
so here you can see the file is being

00:29:36,159 --> 00:29:40,320
sent and we got a response

00:29:38,159 --> 00:29:42,240
so it should be there in the s3 bucket

00:29:40,320 --> 00:29:46,559
yeah and

00:29:42,240 --> 00:29:50,559
we have the file so that's it for the

00:29:46,559 --> 00:29:53,520
service mesh demo scenario and

00:29:50,559 --> 00:29:54,960
now i'll quickly summarize more about

00:29:53,520 --> 00:29:57,120
our project

00:29:54,960 --> 00:29:58,880
so we developed a prototype of

00:29:57,120 --> 00:30:00,159
kubernetes based connected vehicle

00:29:58,880 --> 00:30:02,240
platform

00:30:00,159 --> 00:30:04,240
and kubernetes helped us a lot to

00:30:02,240 --> 00:30:05,200
develop and deploy applications on

00:30:04,240 --> 00:30:07,679
vehicle

00:30:05,200 --> 00:30:08,799
but there are still a lot of challenges

00:30:07,679 --> 00:30:13,039
that needs to be

00:30:08,799 --> 00:30:13,679
faced the challenges we are currently

00:30:13,039 --> 00:30:16,320
facing

00:30:13,679 --> 00:30:16,720
are how to update kubernetes worker

00:30:16,320 --> 00:30:19,840
nodes

00:30:16,720 --> 00:30:22,960
in its vehicles and how to manage

00:30:19,840 --> 00:30:23,840
many kubernetes masternodes for how

00:30:22,960 --> 00:30:26,480
should we think

00:30:23,840 --> 00:30:28,720
about one kubernetes master and many

00:30:26,480 --> 00:30:31,200
edge vehicle architecture

00:30:28,720 --> 00:30:31,919
we also have to try some lightweight

00:30:31,200 --> 00:30:34,960
lightweight

00:30:31,919 --> 00:30:36,720
kubernetes like k3s and qh

00:30:34,960 --> 00:30:38,399
to minimize the required cpu

00:30:36,720 --> 00:30:41,919
requirements or memory

00:30:38,399 --> 00:30:43,360
sources on the edge device our journey

00:30:41,919 --> 00:30:47,360
is still just a beginning

00:30:43,360 --> 00:30:50,559
and there are a lot more things to come

00:30:47,360 --> 00:30:53,840
and you can visit us at our

00:30:50,559 --> 00:30:57,200
github page named misaki dash

00:30:53,840 --> 00:30:59,519
io we are planning to

00:30:57,200 --> 00:31:01,200
release some technical documentation

00:30:59,519 --> 00:31:04,240
later in future

00:31:01,200 --> 00:31:06,720
so please stay tuned and thank you

00:31:04,240 --> 00:31:16,960
everyone for attending our session

00:31:06,720 --> 00:31:16,960

YouTube URL: https://www.youtube.com/watch?v=hSBylPZwH1M


