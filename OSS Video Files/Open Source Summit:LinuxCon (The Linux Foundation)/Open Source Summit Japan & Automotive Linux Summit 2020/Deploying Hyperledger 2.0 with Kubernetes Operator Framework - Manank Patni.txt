Title: Deploying Hyperledger 2.0 with Kubernetes Operator Framework - Manank Patni
Publication date: 2020-12-04
Playlist: Open Source Summit Japan & Automotive Linux Summit 2020
Description: 
	Deploying Hyperledger 2.0 with Kubernetes Operator Framework - Manank Patni
Captions: 
	00:00:00,719 --> 00:00:04,000
hello everyone thank you all for coming

00:00:02,560 --> 00:00:05,759
for today's session on deploying

00:00:04,000 --> 00:00:07,040
hyperledger fabric with kubernetes

00:00:05,759 --> 00:00:08,559
operator framework

00:00:07,040 --> 00:00:10,160
so let's get started with a quick

00:00:08,559 --> 00:00:12,559
introduction of myself

00:00:10,160 --> 00:00:14,480
my name is managi and i'm a blockchain

00:00:12,559 --> 00:00:15,759
and a full stack developer from india

00:00:14,480 --> 00:00:17,359
i've been working on different

00:00:15,759 --> 00:00:18,320
blockchain applications for the past

00:00:17,359 --> 00:00:19,680
three years now

00:00:18,320 --> 00:00:21,680
and i have experience on working on

00:00:19,680 --> 00:00:24,880
multiple blockchain platforms like

00:00:21,680 --> 00:00:26,960
ethereum avalanche fabric algorithm etc

00:00:24,880 --> 00:00:28,240
i was also one of their pleasure interns

00:00:26,960 --> 00:00:30,320
for the previous years

00:00:28,240 --> 00:00:32,000
i pledged internship program and i

00:00:30,320 --> 00:00:32,559
contributed to the i pleasure cello

00:00:32,000 --> 00:00:34,960
project

00:00:32,559 --> 00:00:36,719
during that internship i'm pretty active

00:00:34,960 --> 00:00:38,559
on twitter and telegram so if you have

00:00:36,719 --> 00:00:41,200
any feedback or questions

00:00:38,559 --> 00:00:43,840
for this session or anything else feel

00:00:41,200 --> 00:00:45,760
free to reach out to

00:00:43,840 --> 00:00:47,280
so for those of you who are not familiar

00:00:45,760 --> 00:00:49,039
with the blockchain technology let me

00:00:47,280 --> 00:00:49,520
give you a quick introduction of what it

00:00:49,039 --> 00:00:52,239
is

00:00:49,520 --> 00:00:53,920
so a blockchain is essentially a digital

00:00:52,239 --> 00:00:55,280
list of changes that has happened to an

00:00:53,920 --> 00:00:57,440
application state

00:00:55,280 --> 00:00:59,440
now this list of transaction is called a

00:00:57,440 --> 00:01:01,600
ledger and in order to create a new

00:00:59,440 --> 00:01:03,840
change one has to create a transaction

00:01:01,600 --> 00:01:05,680
and that will be appended to the ledger

00:01:03,840 --> 00:01:07,119
now for example a user wants to come in

00:01:05,680 --> 00:01:08,720
and change his profile

00:01:07,119 --> 00:01:10,720
so that would count as one of the

00:01:08,720 --> 00:01:11,360
transactions and will be appended to the

00:01:10,720 --> 00:01:14,159
ledger

00:01:11,360 --> 00:01:15,600
now anyone can go back in time and see

00:01:14,159 --> 00:01:18,560
what change was made

00:01:15,600 --> 00:01:20,000
and by whom and this ledger is an

00:01:18,560 --> 00:01:21,119
important piece of a blockchain

00:01:20,000 --> 00:01:23,759
application

00:01:21,119 --> 00:01:24,799
and it is also distributed across a

00:01:23,759 --> 00:01:27,439
group of

00:01:24,799 --> 00:01:28,080
a group of uh computer systems on a

00:01:27,439 --> 00:01:30,400
network

00:01:28,080 --> 00:01:31,520
and they all contain a copy of it uh so

00:01:30,400 --> 00:01:34,960
that

00:01:31,520 --> 00:01:36,400
the the application state or the list of

00:01:34,960 --> 00:01:37,920
changes that have been made to the

00:01:36,400 --> 00:01:41,920
application are

00:01:37,920 --> 00:01:44,479
always verifiable and auditable

00:01:41,920 --> 00:01:45,439
so this this ledger is also completely

00:01:44,479 --> 00:01:47,680
immutable

00:01:45,439 --> 00:01:49,119
so if you want to change the state of

00:01:47,680 --> 00:01:50,000
your application you can create a new

00:01:49,119 --> 00:01:51,840
transaction

00:01:50,000 --> 00:01:53,600
but once you have done that transaction

00:01:51,840 --> 00:01:56,399
it cannot be reverted back

00:01:53,600 --> 00:01:58,640
so so these nodes also decide the next

00:01:56,399 --> 00:02:01,840
transaction that will be added to the

00:01:58,640 --> 00:02:02,560
ledger and one one single node cannot do

00:02:01,840 --> 00:02:04,880
that

00:02:02,560 --> 00:02:05,840
therefore uh all of the nodes should

00:02:04,880 --> 00:02:08,080
come upon

00:02:05,840 --> 00:02:09,599
this agreement of of the cut of the new

00:02:08,080 --> 00:02:13,440
state of the ledger

00:02:09,599 --> 00:02:16,879
so a node proposes a change to the

00:02:13,440 --> 00:02:18,959
to the to the ledger which is then

00:02:16,879 --> 00:02:21,680
distributed to all of the other nodes

00:02:18,959 --> 00:02:24,400
and a consensus algorithm is then used

00:02:21,680 --> 00:02:24,959
to make sure that the transaction is

00:02:24,400 --> 00:02:28,800
correct

00:02:24,959 --> 00:02:31,440
so these consensus algorithms are are

00:02:28,800 --> 00:02:32,959
of different types for example proof of

00:02:31,440 --> 00:02:35,040
work proof of stake

00:02:32,959 --> 00:02:36,720
delegated proof of stake and they use

00:02:35,040 --> 00:02:39,280
some different logic

00:02:36,720 --> 00:02:41,040
to to find out the next transaction the

00:02:39,280 --> 00:02:43,760
next valid transaction

00:02:41,040 --> 00:02:45,840
a blockchain is actually a subpart of

00:02:43,760 --> 00:02:50,080
distributed ledger technology

00:02:45,840 --> 00:02:52,800
so a blockchain uses blocks to form

00:02:50,080 --> 00:02:55,280
to form this digital ledger and the

00:02:52,800 --> 00:02:56,160
blocks act as a security mechanism for

00:02:55,280 --> 00:02:58,159
maintaining

00:02:56,160 --> 00:02:59,200
the shared information or the state of

00:02:58,159 --> 00:03:02,480
the blockchain

00:02:59,200 --> 00:03:04,400
so every block contains a list of a list

00:03:02,480 --> 00:03:05,120
of transactions as well as a link to the

00:03:04,400 --> 00:03:08,560
previous

00:03:05,120 --> 00:03:10,000
block uh so that's why there's a chain

00:03:08,560 --> 00:03:13,200
formation

00:03:10,000 --> 00:03:13,519
and and that also increases the security

00:03:13,200 --> 00:03:16,159
of

00:03:13,519 --> 00:03:18,080
of the blockchain blockchains can also

00:03:16,159 --> 00:03:20,319
be classified on the basis of their

00:03:18,080 --> 00:03:21,760
accessibility and transparency so a

00:03:20,319 --> 00:03:23,840
public blockchain is

00:03:21,760 --> 00:03:26,159
completely transparent anyone can see

00:03:23,840 --> 00:03:27,760
the data whereas a permission blockchain

00:03:26,159 --> 00:03:29,760
is partially transparent

00:03:27,760 --> 00:03:31,440
so some members can be allowed to see

00:03:29,760 --> 00:03:32,400
the data whereas some some can be

00:03:31,440 --> 00:03:35,040
restricted

00:03:32,400 --> 00:03:37,040
uh private blockchains are usually used

00:03:35,040 --> 00:03:39,040
for development purposes only

00:03:37,040 --> 00:03:40,720
ethereum and bitcoin are great examples

00:03:39,040 --> 00:03:41,440
of public blockchain where all of the

00:03:40,720 --> 00:03:43,680
data

00:03:41,440 --> 00:03:44,720
is completely available to the public so

00:03:43,680 --> 00:03:47,360
you can go to

00:03:44,720 --> 00:03:49,120
the internet and go like go through a

00:03:47,360 --> 00:03:51,040
list of all the transactions that were

00:03:49,120 --> 00:03:53,519
ever made on these blockchains

00:03:51,040 --> 00:03:54,959
now users are also treated equally which

00:03:53,519 --> 00:03:56,480
means all of them have the same

00:03:54,959 --> 00:03:58,959
privileges

00:03:56,480 --> 00:04:00,799
no matter who they are identity is also

00:03:58,959 --> 00:04:01,519
anonymous so if you create two different

00:04:00,799 --> 00:04:03,280
accounts

00:04:01,519 --> 00:04:05,120
and none of them can be traced back to

00:04:03,280 --> 00:04:06,879
you or to each other

00:04:05,120 --> 00:04:08,400
so the underlying technology of such

00:04:06,879 --> 00:04:10,239
blockchains was great

00:04:08,400 --> 00:04:11,920
but they certainly could not be used for

00:04:10,239 --> 00:04:15,200
applications like supply chain

00:04:11,920 --> 00:04:17,680
asset registry banking finance etc so

00:04:15,200 --> 00:04:19,280
enterprises were really fascinated and

00:04:17,680 --> 00:04:21,359
they loved the idea of

00:04:19,280 --> 00:04:23,600
having immutability trustlessness

00:04:21,359 --> 00:04:27,360
auditability in their applications

00:04:23,600 --> 00:04:30,479
but uh they also needed a techno a

00:04:27,360 --> 00:04:31,360
blockchain where membership can be

00:04:30,479 --> 00:04:33,199
controlled

00:04:31,360 --> 00:04:34,400
and they can they can know who the

00:04:33,199 --> 00:04:36,400
members were

00:04:34,400 --> 00:04:37,680
and the transactions can also be made

00:04:36,400 --> 00:04:39,680
secret now

00:04:37,680 --> 00:04:42,160
high villager fabric came out of this

00:04:39,680 --> 00:04:43,919
need of of the enterprises

00:04:42,160 --> 00:04:45,440
so i believe the fabric is a framework

00:04:43,919 --> 00:04:46,800
which is used to create permission

00:04:45,440 --> 00:04:48,320
blockchain networks

00:04:46,800 --> 00:04:50,320
it is it is a framework under the

00:04:48,320 --> 00:04:52,080
hyperledger project

00:04:50,320 --> 00:04:53,520
and it is maintained by the linux

00:04:52,080 --> 00:04:56,320
foundation now

00:04:53,520 --> 00:04:57,919
contributors of fabulous fabric are

00:04:56,320 --> 00:04:58,800
throughout the globe it is an open

00:04:57,919 --> 00:05:00,800
source project

00:04:58,800 --> 00:05:03,080
and you can you can find the

00:05:00,800 --> 00:05:04,720
documentation on

00:05:03,080 --> 00:05:06,479
hyperledgerfabric.treatthedocs.io

00:05:04,720 --> 00:05:08,080
hybrid fabric has a great list of

00:05:06,479 --> 00:05:09,360
features which makes it really popular

00:05:08,080 --> 00:05:12,080
among the developers

00:05:09,360 --> 00:05:13,360
so you can write the chain code in go

00:05:12,080 --> 00:05:15,360
java and node

00:05:13,360 --> 00:05:16,560
uh the ledger also has sql-like

00:05:15,360 --> 00:05:19,120
capabilities

00:05:16,560 --> 00:05:20,560
privacy is also a great feature of our

00:05:19,120 --> 00:05:21,600
application fabric because you can

00:05:20,560 --> 00:05:22,960
create channels

00:05:21,600 --> 00:05:26,080
where only certain members of the

00:05:22,960 --> 00:05:28,800
consortium can transact among themselves

00:05:26,080 --> 00:05:30,160
there are also membership services where

00:05:28,800 --> 00:05:31,840
you can create

00:05:30,160 --> 00:05:33,600
identities or you can also revoke

00:05:31,840 --> 00:05:35,600
identities from users

00:05:33,600 --> 00:05:37,600
the consensus algorithms are also very

00:05:35,600 --> 00:05:40,560
flexible and scalable

00:05:37,600 --> 00:05:42,320
and there's great throughput the whole

00:05:40,560 --> 00:05:44,000
architecture of fabric is completely

00:05:42,320 --> 00:05:46,160
modular so you can swap

00:05:44,000 --> 00:05:48,800
from different membership services you

00:05:46,160 --> 00:05:51,199
can swap the consensus algorithms too

00:05:48,800 --> 00:05:52,639
so these these features makes it a

00:05:51,199 --> 00:05:54,800
really popular choice

00:05:52,639 --> 00:05:55,680
and great for enterprises because

00:05:54,800 --> 00:05:57,840
because it has

00:05:55,680 --> 00:05:58,800
it also has great support from from the

00:05:57,840 --> 00:06:01,199
community

00:05:58,800 --> 00:06:03,120
so these are the components of fabric so

00:06:01,199 --> 00:06:04,720
there is ledger which contains a list of

00:06:03,120 --> 00:06:06,880
all the transactions

00:06:04,720 --> 00:06:08,880
there is chain code which is a software

00:06:06,880 --> 00:06:11,039
that is running on peer and it is

00:06:08,880 --> 00:06:14,160
responsible for changing the state

00:06:11,039 --> 00:06:16,960
of um of the application

00:06:14,160 --> 00:06:19,199
or the blockchain now peers commit the

00:06:16,960 --> 00:06:20,800
transactions and they also keep a copy

00:06:19,199 --> 00:06:22,319
of the ledger

00:06:20,800 --> 00:06:23,840
they are also the end points to which

00:06:22,319 --> 00:06:25,199
the applications interact with the

00:06:23,840 --> 00:06:27,759
blockchain network

00:06:25,199 --> 00:06:29,440
and there are orders which which decides

00:06:27,759 --> 00:06:32,720
the order of the transactions

00:06:29,440 --> 00:06:34,479
so peers send transactions to orders

00:06:32,720 --> 00:06:36,400
they bundle them and they decide the

00:06:34,479 --> 00:06:37,120
order and then they send it back to the

00:06:36,400 --> 00:06:39,919
peer to

00:06:37,120 --> 00:06:40,720
to commit the channels are separate

00:06:39,919 --> 00:06:43,440
spaces for

00:06:40,720 --> 00:06:44,240
members and every child has its separate

00:06:43,440 --> 00:06:47,120
ledger

00:06:44,240 --> 00:06:48,240
so if a consortium member is not a

00:06:47,120 --> 00:06:50,880
member of a channel

00:06:48,240 --> 00:06:53,039
they cannot see its ledger now there are

00:06:50,880 --> 00:06:55,840
also msp services which authenticates

00:06:53,039 --> 00:06:57,919
and manages identities on the network

00:06:55,840 --> 00:07:00,479
there are wallets which are used for

00:06:57,919 --> 00:07:02,639
securely managing a user's credential

00:07:00,479 --> 00:07:04,560
there is a certificate authority which

00:07:02,639 --> 00:07:06,080
is used for registration and revocation

00:07:04,560 --> 00:07:09,039
of identities

00:07:06,080 --> 00:07:10,080
now there is also a state which holds

00:07:09,039 --> 00:07:12,080
all of the data

00:07:10,080 --> 00:07:14,000
of the blockchain of the blockchain and

00:07:12,080 --> 00:07:16,080
its applications

00:07:14,000 --> 00:07:18,479
and there is consensus algorithms which

00:07:16,080 --> 00:07:20,639
are used for deciding the valid blocks

00:07:18,479 --> 00:07:22,479
so these are the nodes that are required

00:07:20,639 --> 00:07:23,840
for creating a fabric network this

00:07:22,479 --> 00:07:25,919
certificate authority

00:07:23,840 --> 00:07:28,560
which is used for registering identities

00:07:25,919 --> 00:07:31,440
and renewing or revoking certifications

00:07:28,560 --> 00:07:31,840
and this order which is used to manage

00:07:31,440 --> 00:07:34,960
the

00:07:31,840 --> 00:07:36,880
order of offer of the transactions

00:07:34,960 --> 00:07:38,080
there's peer which works as an end point

00:07:36,880 --> 00:07:40,240
for the applications

00:07:38,080 --> 00:07:42,160
as well as it stores the ledger and

00:07:40,240 --> 00:07:44,479
commits blocks to the ledger

00:07:42,160 --> 00:07:45,520
certificate or certificate authority is

00:07:44,479 --> 00:07:47,440
completely

00:07:45,520 --> 00:07:49,039
modular you can either use the fabric's

00:07:47,440 --> 00:07:51,039
own certificate authority

00:07:49,039 --> 00:07:53,360
or your own certificate authority as

00:07:51,039 --> 00:07:53,919
well so the new version of hyperledger

00:07:53,360 --> 00:07:56,240
fabric

00:07:53,919 --> 00:07:57,280
that is the version 2.0 introduced some

00:07:56,240 --> 00:07:59,039
great new features

00:07:57,280 --> 00:08:01,360
like new decentralized governance for

00:07:59,039 --> 00:08:02,960
chain codes private data enhancements as

00:08:01,360 --> 00:08:05,199
well as the ability to use

00:08:02,960 --> 00:08:06,319
external chain code launchers so earlier

00:08:05,199 --> 00:08:08,319
the change code which is a very

00:08:06,319 --> 00:08:10,720
essential part of the blockchain network

00:08:08,319 --> 00:08:12,400
had to be deployed inside docker

00:08:10,720 --> 00:08:13,599
containers even if you are using

00:08:12,400 --> 00:08:16,800
kubernetes

00:08:13,599 --> 00:08:18,960
but now uh you can use external services

00:08:16,800 --> 00:08:19,840
and host them anywhere and use them as

00:08:18,960 --> 00:08:21,919
chain code for

00:08:19,840 --> 00:08:23,759
for your blockchain network so we'll

00:08:21,919 --> 00:08:25,599
we're going to do this practically later

00:08:23,759 --> 00:08:29,199
on in this session

00:08:25,599 --> 00:08:31,520
so what is kubernetes communities at its

00:08:29,199 --> 00:08:33,279
basic level is a system for running and

00:08:31,520 --> 00:08:34,959
coordinating containerized

00:08:33,279 --> 00:08:37,440
applications across a cluster of

00:08:34,959 --> 00:08:39,279
machines so it is a platform that is

00:08:37,440 --> 00:08:41,200
designed to completely manage the life

00:08:39,279 --> 00:08:44,000
cycle of docker containers

00:08:41,200 --> 00:08:45,360
or any containers as such and it takes

00:08:44,000 --> 00:08:47,600
care of the scaling

00:08:45,360 --> 00:08:49,760
the failover of your applications and

00:08:47,600 --> 00:08:54,399
provides deployment patterns like

00:08:49,760 --> 00:08:57,360
stateful sets or replica sites etc

00:08:54,399 --> 00:08:57,760
so you can selfie you can scale you can

00:08:57,360 --> 00:08:59,600
group

00:08:57,760 --> 00:09:01,920
deploy your applications or your

00:08:59,600 --> 00:09:03,839
containers so communities is really good

00:09:01,920 --> 00:09:05,279
for managing containerized applications

00:09:03,839 --> 00:09:07,040
for the most part

00:09:05,279 --> 00:09:09,040
but if you're looking for managing

00:09:07,040 --> 00:09:10,560
complex stateful applications on top of

00:09:09,040 --> 00:09:12,240
kubernetes itself

00:09:10,560 --> 00:09:14,320
uh you can look into the communities

00:09:12,240 --> 00:09:16,720
operators which are great for that

00:09:14,320 --> 00:09:18,320
they make it easy to comp manage these

00:09:16,720 --> 00:09:20,160
complex stateful applications by

00:09:18,320 --> 00:09:22,959
providing custom backends

00:09:20,160 --> 00:09:24,720
for custom resources and they they are

00:09:22,959 --> 00:09:27,519
the clients of communities api

00:09:24,720 --> 00:09:29,040
and and they they they allow any level

00:09:27,519 --> 00:09:30,399
of customization to be done to the

00:09:29,040 --> 00:09:32,399
deployment process

00:09:30,399 --> 00:09:34,399
so the operator pattern aims to capture

00:09:32,399 --> 00:09:36,720
the key work of a human operator

00:09:34,399 --> 00:09:38,160
so a human operator has a deep knowledge

00:09:36,720 --> 00:09:39,200
of how the system should behave at

00:09:38,160 --> 00:09:41,200
certain events

00:09:39,200 --> 00:09:43,360
now these kubernetes operators can be

00:09:41,200 --> 00:09:45,440
coded or designed in a similar way

00:09:43,360 --> 00:09:47,760
to get the desired result out of the out

00:09:45,440 --> 00:09:49,519
of the deployment or the applications

00:09:47,760 --> 00:09:51,920
so a custom resource would contain all

00:09:49,519 --> 00:09:53,519
of the application configuration

00:09:51,920 --> 00:09:55,360
and the controller will contain all of

00:09:53,519 --> 00:09:57,360
the business logic so as soon as a

00:09:55,360 --> 00:09:58,959
custom resource is deployed

00:09:57,360 --> 00:10:00,720
the controller will take charge and

00:09:58,959 --> 00:10:02,560
deploy all of the other required

00:10:00,720 --> 00:10:05,360
communities objects like

00:10:02,560 --> 00:10:06,959
stateful sets configmap services etc for

00:10:05,360 --> 00:10:08,959
that custom resource

00:10:06,959 --> 00:10:10,800
so create these operators i used a

00:10:08,959 --> 00:10:13,519
framework called the operator sdk

00:10:10,800 --> 00:10:15,120
that makes helping operators easier

00:10:13,519 --> 00:10:17,360
there are a lot of tools for

00:10:15,120 --> 00:10:18,160
code generation and scaffolding which

00:10:17,360 --> 00:10:20,560
which

00:10:18,160 --> 00:10:21,760
really helps bootstrapping a project

00:10:20,560 --> 00:10:23,680
really quickly

00:10:21,760 --> 00:10:25,839
and you don't have to waste a lot of

00:10:23,680 --> 00:10:28,160
time writing generic controller code

00:10:25,839 --> 00:10:29,279
so you can test that operator locally

00:10:28,160 --> 00:10:31,680
and see if it works

00:10:29,279 --> 00:10:32,640
correctly and then if you have to deploy

00:10:31,680 --> 00:10:34,560
it for

00:10:32,640 --> 00:10:37,120
for a production level system you have

00:10:34,560 --> 00:10:38,640
to deploy it as a separate deployment in

00:10:37,120 --> 00:10:41,360
the same cluster

00:10:38,640 --> 00:10:42,640
so it will keep keep watching for the

00:10:41,360 --> 00:10:45,519
for the custom resources

00:10:42,640 --> 00:10:47,040
and do the task as as you intended so

00:10:45,519 --> 00:10:48,399
let's get started with the code i'll

00:10:47,040 --> 00:10:49,839
start sharing my screen

00:10:48,399 --> 00:10:51,760
so that we can we can go through the

00:10:49,839 --> 00:10:52,480
process of creating these operators as

00:10:51,760 --> 00:10:55,120
well as

00:10:52,480 --> 00:10:56,800
configure them configuring them to to

00:10:55,120 --> 00:10:57,680
create deployments for hyperledger

00:10:56,800 --> 00:11:01,279
fabric

00:10:57,680 --> 00:11:03,360
and yeah let's get started

00:11:01,279 --> 00:11:04,480
so first of all these are the few things

00:11:03,360 --> 00:11:06,959
that we need to

00:11:04,480 --> 00:11:08,959
to run this operator uh make sure you

00:11:06,959 --> 00:11:10,000
have both of these repositories cloned

00:11:08,959 --> 00:11:11,839
on your systems

00:11:10,000 --> 00:11:13,440
the first one is the operator itself

00:11:11,839 --> 00:11:15,760
whereas the second one

00:11:13,440 --> 00:11:17,360
is the fabric are the fabric specific

00:11:15,760 --> 00:11:19,839
files and scripts

00:11:17,360 --> 00:11:21,040
um the other one that we need is a five

00:11:19,839 --> 00:11:23,600
bit binaries

00:11:21,040 --> 00:11:25,519
so we will need this to do some fabric

00:11:23,600 --> 00:11:28,560
specific operations

00:11:25,519 --> 00:11:30,480
and uh we also need operator sdk

00:11:28,560 --> 00:11:32,160
to deploy the operator on our on our

00:11:30,480 --> 00:11:35,040
kubernetes cluster

00:11:32,160 --> 00:11:36,640
you can or cannot use your docker image

00:11:35,040 --> 00:11:38,480
to deploy the operator

00:11:36,640 --> 00:11:42,480
for for today's demonstration purposes

00:11:38,480 --> 00:11:46,480
i'll be doing that locally

00:11:42,480 --> 00:11:48,959
so i already have the

00:11:46,480 --> 00:11:50,399
you know i already have the depositories

00:11:48,959 --> 00:11:52,320
cloned on my system

00:11:50,399 --> 00:11:54,079
so let me give you a quick look through

00:11:52,320 --> 00:11:57,200
the code of the

00:11:54,079 --> 00:11:59,040
um of the con of the operator

00:11:57,200 --> 00:12:01,440
so there are two important folders in

00:11:59,040 --> 00:12:04,000
this uh in this code

00:12:01,440 --> 00:12:05,440
that is an api folder as well as a

00:12:04,000 --> 00:12:07,839
controller folder

00:12:05,440 --> 00:12:09,279
so the controller folder contains all

00:12:07,839 --> 00:12:11,040
the controllers

00:12:09,279 --> 00:12:12,560
for example there's a ca controller

00:12:11,040 --> 00:12:14,959
there's a peer controller

00:12:12,560 --> 00:12:17,040
so a controller will be created for all

00:12:14,959 --> 00:12:18,160
the all the custom resources that we

00:12:17,040 --> 00:12:22,560
create

00:12:18,160 --> 00:12:23,920
and uh api api file will also be created

00:12:22,560 --> 00:12:26,959
for them

00:12:23,920 --> 00:12:28,160
so the controller contains all of the

00:12:26,959 --> 00:12:30,560
business logic

00:12:28,160 --> 00:12:32,800
whereas the api defines what our custom

00:12:30,560 --> 00:12:36,839
resources

00:12:32,800 --> 00:12:39,680
so i'll show you a custom resource

00:12:36,839 --> 00:12:42,639
api yeah

00:12:39,680 --> 00:12:43,040
so here you can see there are two fields

00:12:42,639 --> 00:12:45,600
uh

00:12:43,040 --> 00:12:46,720
in our in our ps struct one of them is a

00:12:45,600 --> 00:12:49,839
spec one

00:12:46,720 --> 00:12:52,560
and the another one is a status

00:12:49,839 --> 00:12:53,600
so the the spec contains all of the

00:12:52,560 --> 00:12:57,120
specifications

00:12:53,600 --> 00:13:00,000
of of our of our

00:12:57,120 --> 00:13:01,920
of appear so all of this code is

00:13:00,000 --> 00:13:03,120
automatically generated by the operator

00:13:01,920 --> 00:13:07,519
sdk

00:13:03,120 --> 00:13:09,920
and you don't need to do think a lot of

00:13:07,519 --> 00:13:12,160
about how this code has been written the

00:13:09,920 --> 00:13:14,560
most important part is that you need to

00:13:12,160 --> 00:13:15,839
mean you need to specify the space

00:13:14,560 --> 00:13:18,880
specifications

00:13:15,839 --> 00:13:22,240
as well as the status so the status

00:13:18,880 --> 00:13:25,760
contains contains the status

00:13:22,240 --> 00:13:29,360
of our of our deployed uh deployed

00:13:25,760 --> 00:13:32,160
resource so let's say you deploy

00:13:29,360 --> 00:13:32,959
a stateful state set for your custom

00:13:32,160 --> 00:13:36,240
resource

00:13:32,959 --> 00:13:38,399
so then if you attach a service to it

00:13:36,240 --> 00:13:40,160
you might need to know that what its

00:13:38,399 --> 00:13:41,839
access point is so you can

00:13:40,160 --> 00:13:44,240
store that kind of information in the

00:13:41,839 --> 00:13:47,279
status whereas the spec

00:13:44,240 --> 00:13:49,360
would contain uh things like

00:13:47,279 --> 00:13:50,399
image name or the configuration

00:13:49,360 --> 00:13:53,600
parameters

00:13:50,399 --> 00:13:56,399
the ports the resources etc

00:13:53,600 --> 00:13:57,199
so here you can see the common spec has

00:13:56,399 --> 00:14:00,800
three

00:13:57,199 --> 00:14:04,160
fields there's msp tls and node spec

00:14:00,800 --> 00:14:06,560
so as i told you this pack has all the

00:14:04,160 --> 00:14:07,199
all the node specific information

00:14:06,560 --> 00:14:10,399
whereas

00:14:07,199 --> 00:14:11,519
msp and tls contain on the certification

00:14:10,399 --> 00:14:14,560
files

00:14:11,519 --> 00:14:17,519
so these need to be converted to the

00:14:14,560 --> 00:14:20,720
base64 format before you put them here

00:14:17,519 --> 00:14:21,519
and these will be required by p all the

00:14:20,720 --> 00:14:26,079
three nodes

00:14:21,519 --> 00:14:28,320
not just pl for for the purpose of

00:14:26,079 --> 00:14:31,839
authentication and connecting with each

00:14:28,320 --> 00:14:31,839
other in the network

00:14:32,000 --> 00:14:36,959
after that um let me show you how the

00:14:35,199 --> 00:14:40,480
peer controller

00:14:36,959 --> 00:14:43,680
is working so as you can see

00:14:40,480 --> 00:14:46,000
this is a reconcile method so the first

00:14:43,680 --> 00:14:47,040
function to run is the setup with

00:14:46,000 --> 00:14:49,600
manager

00:14:47,040 --> 00:14:51,040
so the setup with manager sets up a new

00:14:49,600 --> 00:14:54,959
controller

00:14:51,040 --> 00:14:58,399
and um as you can see the four

00:14:54,959 --> 00:15:00,800
so the four parameter here

00:14:58,399 --> 00:15:02,560
is for the primary resource that this

00:15:00,800 --> 00:15:07,519
controller will watch

00:15:02,560 --> 00:15:11,199
so as you can see our controller

00:15:07,519 --> 00:15:14,560
will then um run this reconcile

00:15:11,199 --> 00:15:15,680
function that will execute as soon as

00:15:14,560 --> 00:15:20,079
there is some

00:15:15,680 --> 00:15:21,680
some change or or a custom resource gets

00:15:20,079 --> 00:15:23,839
created

00:15:21,680 --> 00:15:23,839
so

00:15:25,279 --> 00:15:31,759
yeah so as you can see

00:15:28,320 --> 00:15:33,680
so as soon as our

00:15:31,759 --> 00:15:35,040
custom resource is created the

00:15:33,680 --> 00:15:38,839
controller will

00:15:35,040 --> 00:15:41,519
will detect it and um it will create a

00:15:38,839 --> 00:15:44,320
secret a service

00:15:41,519 --> 00:15:45,600
for it um as soon as the service is

00:15:44,320 --> 00:15:48,560
allocated

00:15:45,600 --> 00:15:51,120
i'm checking here um whether whether it

00:15:48,560 --> 00:15:53,120
has any ports or not and if it does

00:15:51,120 --> 00:15:54,399
i'll change the status of our custom

00:15:53,120 --> 00:15:57,839
resource uh

00:15:54,399 --> 00:15:59,360
to the the access point uh

00:15:57,839 --> 00:16:01,519
to the access access point of the

00:15:59,360 --> 00:16:04,800
service then i

00:16:01,519 --> 00:16:08,000
am also creating a stateful set uh which

00:16:04,800 --> 00:16:11,680
which will contain the main appear

00:16:08,000 --> 00:16:14,560
container so

00:16:11,680 --> 00:16:17,120
this the secret would contain all of the

00:16:14,560 --> 00:16:20,160
certifications that the peer would need

00:16:17,120 --> 00:16:23,440
so as you can see i have the tls conf

00:16:20,160 --> 00:16:26,240
tls certificates as well as the msp

00:16:23,440 --> 00:16:30,480
certificates here

00:16:26,240 --> 00:16:33,680
um the service is pretty basic

00:16:30,480 --> 00:16:36,880
uh i'm attaching the secrets as a volume

00:16:33,680 --> 00:16:38,639
to the stateful set later on so as you

00:16:36,880 --> 00:16:42,480
can see i'm also giving

00:16:38,639 --> 00:16:45,519
a a a volume to the

00:16:42,480 --> 00:16:48,839
stateful set and the containers

00:16:45,519 --> 00:16:50,800
has this command which will start the

00:16:48,839 --> 00:16:52,639
pier

00:16:50,800 --> 00:16:54,560
all the environment variables will also

00:16:52,639 --> 00:16:56,000
be set and on

00:16:54,560 --> 00:16:57,680
the volumes that are needed by the

00:16:56,000 --> 00:17:01,040
container are also

00:16:57,680 --> 00:17:05,120
given here so this is pretty basic

00:17:01,040 --> 00:17:08,480
and as soon as this happens

00:17:05,120 --> 00:17:10,400
you can see that um

00:17:08,480 --> 00:17:11,679
you'll be able to see that appear is

00:17:10,400 --> 00:17:13,919
deployed and

00:17:11,679 --> 00:17:16,160
uh you'll be able to interact with it so

00:17:13,919 --> 00:17:19,360
this this shows that

00:17:16,160 --> 00:17:22,160
you can write any kind of code and

00:17:19,360 --> 00:17:23,360
and that this can be a highly customized

00:17:22,160 --> 00:17:26,160
customized

00:17:23,360 --> 00:17:27,919
code that you can you can add here to

00:17:26,160 --> 00:17:31,200
the reconcile method as well as

00:17:27,919 --> 00:17:32,320
uh you can you can configure it in other

00:17:31,200 --> 00:17:34,080
ways too

00:17:32,320 --> 00:17:36,640
so you can do pretty much anything that

00:17:34,080 --> 00:17:39,039
you want uh with this container

00:17:36,640 --> 00:17:40,080
you can you can you can log log the

00:17:39,039 --> 00:17:42,960
details to some

00:17:40,080 --> 00:17:44,720
uh some server you can you can fetch

00:17:42,960 --> 00:17:46,160
things from other servers and

00:17:44,720 --> 00:17:48,000
you can do all kind of stuff because

00:17:46,160 --> 00:17:52,000
this is just a generic

00:17:48,000 --> 00:17:52,000
golan code now

00:17:53,679 --> 00:17:58,320
now uh once you once you make a change

00:17:55,760 --> 00:18:02,240
to to these apis you need to

00:17:58,320 --> 00:18:05,360
make two commands that is

00:18:02,240 --> 00:18:05,360
make manifest

00:18:06,080 --> 00:18:12,240
and make generate so

00:18:09,120 --> 00:18:15,039
these will create the

00:18:12,240 --> 00:18:16,400
the custom resource files and the apis

00:18:15,039 --> 00:18:19,840
are required

00:18:16,400 --> 00:18:23,200
for for our controller to work

00:18:19,840 --> 00:18:25,280
so you'll be able to find the custom

00:18:23,200 --> 00:18:29,840
resource definition here

00:18:25,280 --> 00:18:29,840
in the config crd basis folder

00:18:32,240 --> 00:18:40,480
so this is a ca custom resource

00:18:37,280 --> 00:18:42,320
and you need to you need to ins you need

00:18:40,480 --> 00:18:43,600
to install it on your kubernetes cluster

00:18:42,320 --> 00:18:47,679
before you can

00:18:43,600 --> 00:18:57,840
um before you can deploy a

00:18:47,679 --> 00:18:57,840
resource with this type

00:18:58,640 --> 00:19:04,160
so now um let me quickly

00:19:01,919 --> 00:19:04,160
run

00:19:05,440 --> 00:19:08,160
the operator

00:19:09,679 --> 00:19:13,360
this is the command you need to run the

00:19:11,760 --> 00:19:17,200
operator locally

00:19:13,360 --> 00:19:19,440
you can also um you can also run it

00:19:17,200 --> 00:19:19,440
by

00:19:21,120 --> 00:19:27,520
by using the command may deploy

00:19:24,400 --> 00:19:29,600
with the image name

00:19:27,520 --> 00:19:31,360
so in in my case this would be make

00:19:29,600 --> 00:19:32,960
deploy

00:19:31,360 --> 00:19:34,559
management fabric video capabilities

00:19:32,960 --> 00:19:35,200
operator and it will automatically

00:19:34,559 --> 00:19:38,720
deploy

00:19:35,200 --> 00:19:42,320
the whole um the whole operator for you

00:19:38,720 --> 00:19:42,320
as a community is deployment

00:19:44,559 --> 00:19:47,760
now our operator is working and it is

00:19:46,640 --> 00:19:50,880
listening

00:19:47,760 --> 00:19:53,919
for for all for

00:19:50,880 --> 00:20:00,160
the peer the order as well as ca

00:19:53,919 --> 00:20:00,160
custom resources on our on our namespace

00:20:00,640 --> 00:20:07,840
the namespace is default now

00:20:09,360 --> 00:20:17,760
i have some sample files

00:20:12,640 --> 00:20:17,760
that are that

00:20:19,360 --> 00:20:27,520
that can be deployed to to stand up our

00:20:23,280 --> 00:20:30,559
fabric components so

00:20:27,520 --> 00:20:33,360
here they are let me show you how the

00:20:30,559 --> 00:20:36,720
pier looks like

00:20:33,360 --> 00:20:39,919
so this is a peer um

00:20:36,720 --> 00:20:44,159
custom resource and you can see uh

00:20:39,919 --> 00:20:46,799
this is uh this is the

00:20:44,159 --> 00:20:48,559
certifications that the spear will have

00:20:46,799 --> 00:20:50,159
so we'll generate these using the

00:20:48,559 --> 00:20:53,360
cryptogen command

00:20:50,159 --> 00:20:56,880
for now or you can also

00:20:53,360 --> 00:20:58,480
take these from from the fabric ca

00:20:56,880 --> 00:21:01,200
and all you need to do is convert them

00:20:58,480 --> 00:21:03,679
into base64 and put them here

00:21:01,200 --> 00:21:04,640
we also need the core peers location as

00:21:03,679 --> 00:21:08,320
well as

00:21:04,640 --> 00:21:11,280
the binary

00:21:08,320 --> 00:21:12,159
files for the for chain code builder

00:21:11,280 --> 00:21:15,120
this will

00:21:12,159 --> 00:21:15,120
talk about later

00:21:15,360 --> 00:21:20,000
now you can put in all the configuration

00:21:17,280 --> 00:21:23,200
parameters in the config param

00:21:20,000 --> 00:21:25,760
section and the image is hybrid fabric

00:21:23,200 --> 00:21:31,840
2.0.1

00:21:25,760 --> 00:21:31,840
so now if i

00:21:40,080 --> 00:21:44,559
you can i've deployed this custom

00:21:42,640 --> 00:21:46,240
resource and you can see

00:21:44,559 --> 00:21:49,120
uh the operator says that it has

00:21:46,240 --> 00:21:53,600
successfully reconciled

00:21:49,120 --> 00:21:56,880
uh a resource with um kind peer

00:21:53,600 --> 00:22:00,880
and with name peer zero dash

00:21:56,880 --> 00:22:05,679
one so let's see the status

00:22:00,880 --> 00:22:05,679
by deployment and you can see

00:22:10,840 --> 00:22:13,840
um

00:22:16,960 --> 00:22:27,840
here is a stateful set pr0.org one

00:22:33,440 --> 00:22:41,840
oh i yeah so since i'm using mini cube i

00:22:37,600 --> 00:22:41,840
need to

00:22:49,200 --> 00:22:55,919
i need to mount

00:22:52,720 --> 00:22:58,799
this directory as uh

00:22:55,919 --> 00:23:00,080
as one of the directories of minicube so

00:22:58,799 --> 00:23:03,360
that

00:23:00,080 --> 00:23:03,760
my peer can access these files so i'll

00:23:03,360 --> 00:23:07,840
just

00:23:03,760 --> 00:23:12,159
mount this to the home

00:23:07,840 --> 00:23:12,159
fabric location

00:23:15,360 --> 00:23:19,600
now if we can see what what is the

00:23:18,320 --> 00:23:23,840
status

00:23:19,600 --> 00:23:23,840
and the container has started

00:23:27,520 --> 00:23:35,200
and you can see our peer has

00:23:30,720 --> 00:23:35,200
successfully running

00:23:35,360 --> 00:23:42,240
now let's just deploy other

00:23:39,520 --> 00:23:42,240
nodes too

00:23:43,279 --> 00:23:53,520
so i'll

00:23:50,400 --> 00:23:56,080
i deploy the second pair as well and the

00:23:53,520 --> 00:23:56,080
order

00:23:57,919 --> 00:24:05,679
now before this we need to generate some

00:24:01,679 --> 00:24:07,840
some fabric specific files

00:24:05,679 --> 00:24:10,559
like uh like the clip the the

00:24:07,840 --> 00:24:12,720
certifications and the genesis block

00:24:10,559 --> 00:24:14,080
um i've already done that that's why i

00:24:12,720 --> 00:24:19,840
haven't showed it

00:24:14,080 --> 00:24:19,840
here but uh

00:24:20,320 --> 00:24:27,600
you can use the communities fabric

00:24:23,440 --> 00:24:30,960
network depository to do that as well so

00:24:27,600 --> 00:24:34,000
if you do create uh create

00:24:30,960 --> 00:24:36,559
a search it will

00:24:34,000 --> 00:24:38,799
create certifications for are going in

00:24:36,559 --> 00:24:42,480
r2 as well as the order

00:24:38,799 --> 00:24:45,440
the the script create genesis

00:24:42,480 --> 00:24:46,320
will create a genesis block and put it

00:24:45,440 --> 00:24:49,600
in the order

00:24:46,320 --> 00:24:52,720
files folder this

00:24:49,600 --> 00:24:55,760
this file uh this folder

00:24:52,720 --> 00:24:59,360
is um is being accessed by

00:24:55,760 --> 00:25:02,480
by our pod to get the genesis block file

00:24:59,360 --> 00:25:05,360
so i've mounted this this directory as a

00:25:02,480 --> 00:25:05,360
volume to the pod

00:25:06,240 --> 00:25:15,360
so as you can see the order is 0

00:25:10,159 --> 00:25:19,600
the pl 0 and pier r20 all have

00:25:15,360 --> 00:25:23,360
started our order is giving a error

00:25:19,600 --> 00:25:25,360
of not finding a genesis block

00:25:23,360 --> 00:25:29,840
so let's just restart it because we

00:25:25,360 --> 00:25:29,840
generated it right now

00:25:35,760 --> 00:25:39,200
let's delete it and then

00:25:39,919 --> 00:25:48,880
you can create on the order

00:25:44,159 --> 00:25:48,880
so let's wait for the order to start

00:25:54,880 --> 00:26:01,600
as you can see the container

00:25:58,000 --> 00:26:01,600
is in the waiting stage

00:26:04,080 --> 00:26:12,640
now the last one we need to deploy is

00:26:07,279 --> 00:26:17,919
the ca so let's quickly deploy that too

00:26:12,640 --> 00:26:21,600
and it has been successfully reconciled

00:26:17,919 --> 00:26:23,520
so here it is so our order is also

00:26:21,600 --> 00:26:28,080
started

00:26:23,520 --> 00:26:30,400
and yep as you can see the order is

00:26:28,080 --> 00:26:30,400
running

00:26:32,240 --> 00:26:39,840
and the system channel has also been

00:26:33,919 --> 00:26:39,840
created from the genesis block

00:26:43,919 --> 00:26:46,240
now

00:26:47,279 --> 00:26:53,520
now what we can do is create a channel

00:26:51,279 --> 00:26:56,000
so first of all create channel artifacts

00:26:53,520 --> 00:26:57,919
for a channel in my channel

00:26:56,000 --> 00:26:59,520
so it will create a channel

00:26:57,919 --> 00:27:02,640
configuration

00:26:59,520 --> 00:27:04,840
file uh it will create two anchor period

00:27:02,640 --> 00:27:06,560
transactions as well

00:27:04,840 --> 00:27:09,859
now

00:27:06,560 --> 00:27:09,859
[Music]

00:27:21,360 --> 00:27:24,960
now since all of our

00:27:25,440 --> 00:27:28,559
all of our channel artifacts have been

00:27:27,360 --> 00:27:31,679
created

00:27:28,559 --> 00:27:33,679
let's uh create a peer cli connect to

00:27:31,679 --> 00:27:37,440
that and create a channel

00:27:33,679 --> 00:27:40,640
so i'm going

00:27:37,440 --> 00:27:41,840
if you see there is a prcli.tml file

00:27:40,640 --> 00:27:45,360
right here

00:27:41,840 --> 00:27:49,919
so you can just create a

00:27:45,360 --> 00:27:54,159
cli part from that

00:27:49,919 --> 00:27:58,399
so yeah here you can see a connect cli

00:27:54,159 --> 00:28:02,799
pod has been created so let's

00:27:58,399 --> 00:28:03,919
go into that and all of the files are

00:28:02,799 --> 00:28:08,320
here

00:28:03,919 --> 00:28:08,320
so let's see the create channel file

00:28:12,159 --> 00:28:17,840
yeah so

00:28:18,080 --> 00:28:23,120
let's put in the channel name as

00:28:25,039 --> 00:28:33,360
my channel

00:28:30,000 --> 00:28:37,279
export these two parts

00:28:33,360 --> 00:28:41,120
and the peers details

00:28:37,279 --> 00:28:42,480
like its configuration files and the

00:28:41,120 --> 00:28:48,000
address will be pair

00:28:42,480 --> 00:28:51,440
0 dash org one and seven zero five one

00:28:48,000 --> 00:28:55,600
so once all of this is done

00:28:51,440 --> 00:28:59,440
uh let's send in the command

00:28:55,600 --> 00:29:04,000
for creating a channel so our order is

00:28:59,440 --> 00:29:04,000
at this host

00:29:04,880 --> 00:29:08,000
and yeah

00:29:08,559 --> 00:29:14,399
list all is ready

00:29:12,080 --> 00:29:14,399
okay

00:29:15,840 --> 00:29:20,640
there's some error coming and this is

00:29:19,520 --> 00:29:23,679
unsupported config

00:29:20,640 --> 00:29:27,840
okay let's export the channel

00:29:23,679 --> 00:29:27,840
once more

00:29:28,000 --> 00:29:32,640
and now you can see that the channel has

00:29:31,679 --> 00:29:35,679
been created

00:29:32,640 --> 00:29:36,159
and you have received the blog 0 now

00:29:35,679 --> 00:29:41,200
let's

00:29:36,159 --> 00:29:44,000
um let's do other

00:29:41,200 --> 00:29:45,440
let's let's join the channel from the

00:29:44,000 --> 00:29:46,720
peers as well

00:29:45,440 --> 00:29:49,279
so you can either copy paste the

00:29:46,720 --> 00:29:52,880
commands or you can just uh

00:29:49,279 --> 00:29:55,520
let's run the script let's run the

00:29:52,880 --> 00:29:58,159
script

00:29:55,520 --> 00:30:00,880
and you can see that the channel has

00:29:58,159 --> 00:30:00,880
been created

00:30:02,799 --> 00:30:06,240
sorry the channel has been joined

00:30:07,360 --> 00:30:14,240
now if you if you do peer

00:30:11,520 --> 00:30:14,799
channel list you can see the peer is

00:30:14,240 --> 00:30:18,080
part of

00:30:14,799 --> 00:30:21,120
my channel so now

00:30:18,080 --> 00:30:21,520
um we can successfully say that up that

00:30:21,120 --> 00:30:24,559
our

00:30:21,520 --> 00:30:27,679
um fabrics

00:30:24,559 --> 00:30:28,480
fabric network has stand up and we can

00:30:27,679 --> 00:30:30,880
do all

00:30:28,480 --> 00:30:31,840
all the commands that that we can do

00:30:30,880 --> 00:30:35,039
from a

00:30:31,840 --> 00:30:39,200
from a normal fabric network

00:30:35,039 --> 00:30:42,159
um we haven't deployed the couchdb

00:30:39,200 --> 00:30:44,240
uh for for the ps yet but they are also

00:30:42,159 --> 00:30:46,640
pretty straightforward and i'll be doing

00:30:44,240 --> 00:30:47,360
uh the operators for them as well in the

00:30:46,640 --> 00:30:48,880
future

00:30:47,360 --> 00:30:50,559
so i'll push those changes to the

00:30:48,880 --> 00:30:53,760
repository as well

00:30:50,559 --> 00:30:57,120
now another thing that i wanted to

00:30:53,760 --> 00:30:58,799
show is that is the

00:30:57,120 --> 00:31:00,240
chain code is an external service

00:30:58,799 --> 00:31:03,120
feature that has been recently

00:31:00,240 --> 00:31:06,240
introduced in the fabric version 2.0

00:31:03,120 --> 00:31:09,600
and in in this feature

00:31:06,240 --> 00:31:10,960
uh you can you can execute the chain

00:31:09,600 --> 00:31:13,360
code from

00:31:10,960 --> 00:31:14,159
from an external service so the chain

00:31:13,360 --> 00:31:17,200
code

00:31:14,159 --> 00:31:18,880
previously had to be deployed using

00:31:17,200 --> 00:31:20,320
using docker containers even if you're

00:31:18,880 --> 00:31:23,440
using kubernetes

00:31:20,320 --> 00:31:25,440
and now they can be uh deployed as an

00:31:23,440 --> 00:31:29,039
external service to any host

00:31:25,440 --> 00:31:32,559
and uh the the peer can execute them

00:31:29,039 --> 00:31:34,320
uh right right from there so

00:31:32,559 --> 00:31:36,559
in order to do that you have to change a

00:31:34,320 --> 00:31:40,000
few different files here and there

00:31:36,559 --> 00:31:42,640
i'll show you what what all these are

00:31:40,000 --> 00:31:44,640
so first of all now you need to change

00:31:42,640 --> 00:31:46,720
the code.tml file

00:31:44,640 --> 00:31:48,720
and in that you need to go to the

00:31:46,720 --> 00:31:51,120
external builders key

00:31:48,720 --> 00:31:51,919
and add the location of the external

00:31:51,120 --> 00:31:54,880
builder

00:31:51,919 --> 00:31:56,000
so this path slash builder slash

00:31:54,880 --> 00:31:59,200
external

00:31:56,000 --> 00:32:00,720
will contain uh this binary files these

00:31:59,200 --> 00:32:02,960
three files

00:32:00,720 --> 00:32:04,960
that i've taken from the fabrics sample

00:32:02,960 --> 00:32:08,399
repository for external

00:32:04,960 --> 00:32:09,360
sample um code from the external chain

00:32:08,399 --> 00:32:13,279
code

00:32:09,360 --> 00:32:16,080
uh same chain code um folder

00:32:13,279 --> 00:32:17,279
so these are pretty basic i haven't

00:32:16,080 --> 00:32:20,000
changed

00:32:17,279 --> 00:32:21,919
anything about these so all you need to

00:32:20,000 --> 00:32:25,200
do is

00:32:21,919 --> 00:32:29,200
mount them them to this path and

00:32:25,200 --> 00:32:32,480
set a name of the external builder now

00:32:29,200 --> 00:32:33,840
um now the chain code has to be modified

00:32:32,480 --> 00:32:35,919
a little bit

00:32:33,840 --> 00:32:37,519
to make sure that it is compatible with

00:32:35,919 --> 00:32:39,120
this new feature

00:32:37,519 --> 00:32:42,480
so the first thing that you have to

00:32:39,120 --> 00:32:46,640
change is the metadata.json

00:32:42,480 --> 00:32:48,320
and it has to be uh set as type external

00:32:46,640 --> 00:32:51,039
so this is the first in the another

00:32:48,320 --> 00:32:54,840
thing is the connection.json file

00:32:51,039 --> 00:32:58,080
has to be present so if if you have tls

00:32:54,840 --> 00:32:58,720
um if you have tls enabled then you can

00:32:58,080 --> 00:33:01,760
have

00:32:58,720 --> 00:33:04,480
the tls certificates here as well the

00:33:01,760 --> 00:33:07,600
important thing here is the address

00:33:04,480 --> 00:33:10,559
so um so our peer will look for this

00:33:07,600 --> 00:33:11,279
address to to connect with the chain

00:33:10,559 --> 00:33:14,320
code

00:33:11,279 --> 00:33:18,080
so if you if it changes uh if you

00:33:14,320 --> 00:33:21,200
have to connect uh your your

00:33:18,080 --> 00:33:25,279
peer to this chain code you have to

00:33:21,200 --> 00:33:28,399
set as a host name here so

00:33:25,279 --> 00:33:31,360
let's do that um let's deploy

00:33:28,399 --> 00:33:32,399
one chain code for the organization

00:33:31,360 --> 00:33:38,159
first

00:33:32,399 --> 00:33:41,279
on port a triple nine um

00:33:38,159 --> 00:33:41,760
that is that and now what we need to do

00:33:41,279 --> 00:33:44,000
is

00:33:41,760 --> 00:33:44,000
um

00:33:46,480 --> 00:33:49,519
go to the chain code external folder in

00:33:48,640 --> 00:33:52,320
in the

00:33:49,519 --> 00:33:52,960
communities fabric network repository

00:33:52,320 --> 00:33:58,159
and

00:33:52,960 --> 00:33:58,159
we need to package this chain code as

00:33:58,240 --> 00:34:03,360
as a chain code package which will then

00:34:00,240 --> 00:34:03,360
be installed on the pier

00:34:04,840 --> 00:34:10,320
now cf said

00:34:07,200 --> 00:34:12,720
as a transfer uh the the

00:34:10,320 --> 00:34:14,000
the code itself does not need to be

00:34:12,720 --> 00:34:16,480
present because it is

00:34:14,000 --> 00:34:19,119
running as an external service uh all we

00:34:16,480 --> 00:34:22,879
need is the metadata.json file as

00:34:19,119 --> 00:34:22,879
as well as the connection.json file

00:34:27,520 --> 00:34:37,919
one such encode has been

00:34:34,879 --> 00:34:40,159
close that terminal

00:34:37,919 --> 00:34:42,639
so once our chain code has been uh

00:34:40,159 --> 00:34:46,159
packaged we can install it to appear

00:34:42,639 --> 00:34:50,320
so let's go to the pr cli and

00:34:46,159 --> 00:34:56,079
then to the page chain code folder let's

00:34:50,320 --> 00:34:59,280
first get peer ones configuration

00:34:56,079 --> 00:35:01,200
parameters now let's go to the chain

00:34:59,280 --> 00:35:04,240
code external folder

00:35:01,200 --> 00:35:04,240
and install

00:35:08,640 --> 00:35:17,839
install this

00:35:19,599 --> 00:35:21,839
um

00:35:22,800 --> 00:35:29,280
okay yeah

00:35:25,839 --> 00:35:31,200
chain code install so you can see the

00:35:29,280 --> 00:35:34,079
chain code has been installed

00:35:31,200 --> 00:35:35,359
and you we get a basic uh identifier for

00:35:34,079 --> 00:35:37,280
this chain code

00:35:35,359 --> 00:35:39,359
now let's do the same thing for the

00:35:37,280 --> 00:35:44,480
organization too

00:35:39,359 --> 00:35:44,960
uh let's again package it i'll have to

00:35:44,480 --> 00:35:48,560
go

00:35:44,960 --> 00:35:50,800
to the folder again

00:35:48,560 --> 00:35:50,800
now

00:35:52,880 --> 00:35:57,359
this time we are setting up to a

00:35:55,599 --> 00:35:59,839
different hostname so we need to package

00:35:57,359 --> 00:35:59,839
it again

00:36:04,160 --> 00:36:10,880
yeah so this has been packaged now let's

00:36:07,680 --> 00:36:10,880
switch to the peer to

00:36:11,440 --> 00:36:18,720
clear the second organization

00:36:14,560 --> 00:36:18,720
and install the

00:36:21,359 --> 00:36:24,240
change code again

00:36:25,280 --> 00:36:27,839
okay okay

00:36:28,480 --> 00:36:36,400
we need to export the variables from the

00:36:32,960 --> 00:36:39,839
outside folder and then install it

00:36:36,400 --> 00:36:41,119
yeah so you can see this has also been

00:36:39,839 --> 00:36:42,880
installed

00:36:41,119 --> 00:36:44,960
now the chain code has been installed to

00:36:42,880 --> 00:36:48,400
appear now all we need to do is

00:36:44,960 --> 00:36:48,880
uh is deploy it as an external service

00:36:48,400 --> 00:36:52,240
and

00:36:48,880 --> 00:36:55,359
then we can invoke it so

00:36:52,240 --> 00:36:56,880
if you go to the samples folder again on

00:36:55,359 --> 00:36:59,119
our

00:36:56,880 --> 00:37:01,680
on the fabric v2 operator you'll see

00:36:59,119 --> 00:37:05,599
there are two files asset transfer basic

00:37:01,680 --> 00:37:09,440
org one and r2 uh all you need to do is

00:37:05,599 --> 00:37:12,720
change the core chain code um

00:37:09,440 --> 00:37:15,200
chain code id here to the one

00:37:12,720 --> 00:37:17,520
that you got after you installed your

00:37:15,200 --> 00:37:23,119
chain code so

00:37:17,520 --> 00:37:23,119
this is for the pr1 i guess i'm correct

00:37:24,640 --> 00:37:28,640
let's change it to the pier one let me

00:37:27,119 --> 00:37:32,320
quickly show you the

00:37:28,640 --> 00:37:35,359
chain code too uh so

00:37:32,320 --> 00:37:38,240
the chain code is

00:37:35,359 --> 00:37:38,240
where is it

00:37:38,560 --> 00:37:45,200
yeah the chain code is pretty basic

00:37:42,000 --> 00:37:46,800
it's almost the same except this this

00:37:45,200 --> 00:37:48,320
last main function

00:37:46,800 --> 00:37:50,560
where it gets us the server

00:37:48,320 --> 00:37:54,079
configuration which is

00:37:50,560 --> 00:37:57,920
the server address and the chain code id

00:37:54,079 --> 00:38:00,720
it has to listen to so

00:37:57,920 --> 00:38:01,839
so the chain code server address is

00:38:00,720 --> 00:38:05,040
itself

00:38:01,839 --> 00:38:06,079
whereas the chain code id is the one we

00:38:05,040 --> 00:38:08,640
provided

00:38:06,079 --> 00:38:08,640
from here

00:38:10,720 --> 00:38:16,320
i have um let me quickly check if i have

00:38:14,640 --> 00:38:21,599
installed it correctly

00:38:16,320 --> 00:38:24,880
395 395 okay now now change it for

00:38:21,599 --> 00:38:24,880
let's change it for the

00:38:26,240 --> 00:38:30,079
for the second organization to

00:38:30,160 --> 00:38:36,800
yep so this is it so this this um

00:38:33,680 --> 00:38:37,359
chain code id will be uh supplied to

00:38:36,800 --> 00:38:40,160
this

00:38:37,359 --> 00:38:41,680
uh to the chain code itself from the

00:38:40,160 --> 00:38:45,119
environment files

00:38:41,680 --> 00:38:47,119
and it will then be able to listen uh

00:38:45,119 --> 00:38:49,760
listen to any requests that come from

00:38:47,119 --> 00:38:53,280
the peer and execute them

00:38:49,760 --> 00:38:54,160
now these are installed and let's let's

00:38:53,280 --> 00:38:57,359
um

00:38:54,160 --> 00:38:57,359
start up our chain code

00:38:57,839 --> 00:39:01,599
let's go to the fabric sample crds

00:39:00,000 --> 00:39:05,200
folder

00:39:01,599 --> 00:39:09,040
um yeah

00:39:05,200 --> 00:39:11,920
organization one and organization

00:39:09,040 --> 00:39:13,359
two so one thing to note here is that

00:39:11,920 --> 00:39:16,320
the image

00:39:13,359 --> 00:39:18,880
is of the chain code itself so this

00:39:16,320 --> 00:39:21,119
chain code has a docker file

00:39:18,880 --> 00:39:23,200
uh from which um you need to create an

00:39:21,119 --> 00:39:26,320
image and then you need to like

00:39:23,200 --> 00:39:27,040
either push it or build it so that's

00:39:26,320 --> 00:39:30,320
that's

00:39:27,040 --> 00:39:34,320
from where i got these images

00:39:30,320 --> 00:39:38,720
and let's see if these are

00:39:34,320 --> 00:39:38,720
deployed yep these are deployed here

00:39:40,560 --> 00:39:47,520
so we describe them

00:39:43,760 --> 00:39:51,200
you see these are perfectly running

00:39:47,520 --> 00:39:53,040
and um rest all looks good

00:39:51,200 --> 00:39:54,640
chain code id and the input server has

00:39:53,040 --> 00:39:58,240
also been provided

00:39:54,640 --> 00:40:01,040
so that's that now let's approve the

00:39:58,240 --> 00:40:06,400
change code from both the organizations

00:40:01,040 --> 00:40:06,400
and let's see and what happens

00:40:08,319 --> 00:40:13,119
let's do it from the pl one first

00:40:15,280 --> 00:40:19,200
now one thing you need to do is change

00:40:18,880 --> 00:40:22,400
the

00:40:19,200 --> 00:40:22,400
package id here

00:40:22,560 --> 00:40:27,280
um let's take it from the asset transfer

00:40:25,599 --> 00:40:30,079
basic org one

00:40:27,280 --> 00:40:30,079
ml file

00:40:35,839 --> 00:40:42,079
let's copy

00:40:38,960 --> 00:40:43,359
core config file okay you need to go to

00:40:42,079 --> 00:40:48,480
the previous folder

00:40:43,359 --> 00:40:48,480
yeah um

00:40:50,839 --> 00:40:53,839
okay

00:40:54,240 --> 00:40:58,960
yeah so now i think it should approve it

00:40:58,319 --> 00:41:01,040
yeah

00:40:58,960 --> 00:41:02,560
transaction has been committed and the

00:41:01,040 --> 00:41:04,880
status valid

00:41:02,560 --> 00:41:06,079
this has been done now do it for the

00:41:04,880 --> 00:41:08,240
second organization

00:41:06,079 --> 00:41:08,240
too

00:41:10,720 --> 00:41:21,839
let's change the package id as well

00:41:46,480 --> 00:41:52,880
yeah so this is the chain code that has

00:41:50,480 --> 00:41:57,200
been installed here

00:41:52,880 --> 00:42:00,480
export pkg id to

00:41:57,200 --> 00:42:03,839
this one and um

00:42:00,480 --> 00:42:03,839
let's approve it

00:42:07,200 --> 00:42:12,960
and the transaction has been committed

00:42:09,760 --> 00:42:14,960
now let's finally commit the transaction

00:42:12,960 --> 00:42:17,119
and install the chain code on this

00:42:14,960 --> 00:42:20,640
channel

00:42:17,119 --> 00:42:23,920
and this is also done so it is

00:42:20,640 --> 00:42:27,599
done from both 0

00:42:23,920 --> 00:42:29,839
and arc 1 as you can see now

00:42:27,599 --> 00:42:31,839
we can invoke this chain code and see

00:42:29,839 --> 00:42:35,680
what happens

00:42:31,839 --> 00:42:39,760
now again let's switch to the

00:42:35,680 --> 00:42:42,240
organization one and

00:42:39,760 --> 00:42:44,000
let's initialize the ledger so you can

00:42:42,240 --> 00:42:46,720
see the chain code called invoke has

00:42:44,000 --> 00:42:47,040
been successful and the result is 200

00:42:46,720 --> 00:42:51,760
now

00:42:47,040 --> 00:42:55,520
do this for the second organization

00:42:51,760 --> 00:42:59,040
and um yep

00:42:55,520 --> 00:43:02,240
we have got all the results back

00:42:59,040 --> 00:43:04,480
now if we go back again and see it

00:43:02,240 --> 00:43:04,480
from

00:43:06,000 --> 00:43:12,240
from the first okay

00:43:09,760 --> 00:43:14,000
yeah wrong command sees from the first

00:43:12,240 --> 00:43:18,000
organization we can see

00:43:14,000 --> 00:43:21,200
that uh yeah the change code has been

00:43:18,000 --> 00:43:23,119
um is working perfectly fine

00:43:21,200 --> 00:43:25,839
uh the both of the peers are able to get

00:43:23,119 --> 00:43:27,920
the same records and the chain code is

00:43:25,839 --> 00:43:30,960
working as an external service out of

00:43:27,920 --> 00:43:34,160
the out of the kubernetes cluster

00:43:30,960 --> 00:43:37,119
not not the cluster but the out of the f

00:43:34,160 --> 00:43:39,119
um out of the docker container that it

00:43:37,119 --> 00:43:42,400
usually used to be

00:43:39,119 --> 00:43:44,160
so yeah that's um

00:43:42,400 --> 00:43:45,839
that's pretty much it if you if you need

00:43:44,160 --> 00:43:49,119
to change any of these configuration

00:43:45,839 --> 00:43:51,040
files all you need to do is um go to the

00:43:49,119 --> 00:43:54,319
fabric v2 operator

00:43:51,040 --> 00:43:57,440
and change the apis and if you need to

00:43:54,319 --> 00:43:58,079
change the all the logic the controller

00:43:57,440 --> 00:43:59,599
logic

00:43:58,079 --> 00:44:02,560
then you can change the controller as

00:43:59,599 --> 00:44:03,520
well uh the repositories are open source

00:44:02,560 --> 00:44:06,800
so you can

00:44:03,520 --> 00:44:10,480
change the code um as per your will

00:44:06,800 --> 00:44:11,440
and you can the sample crds files are

00:44:10,480 --> 00:44:13,040
also here

00:44:11,440 --> 00:44:14,560
so you can change these as well and use

00:44:13,040 --> 00:44:17,359
them in your deployments

00:44:14,560 --> 00:44:17,920
uh the couchdb deployment is still not

00:44:17,359 --> 00:44:20,319
done

00:44:17,920 --> 00:44:22,240
and i'll be doing it um in in the coming

00:44:20,319 --> 00:44:27,040
days and i'll push that

00:44:22,240 --> 00:44:30,480
to the repository as well um so

00:44:27,040 --> 00:44:30,880
yeah that's that's that uh thank you all

00:44:30,480 --> 00:44:33,839
for

00:44:30,880 --> 00:44:35,040
staying here and um staying through

00:44:33,839 --> 00:44:36,880
throughout the session

00:44:35,040 --> 00:44:38,640
i hope you learned something today and

00:44:36,880 --> 00:44:39,520
if you have any questions or any

00:44:38,640 --> 00:44:41,200
feedback

00:44:39,520 --> 00:44:43,280
please fill this form or you can also

00:44:41,200 --> 00:44:46,480
reach out to me on the twitter

00:44:43,280 --> 00:44:51,839
and telegram so

00:44:46,480 --> 00:44:51,839

YouTube URL: https://www.youtube.com/watch?v=5bl__mm2Nb0


