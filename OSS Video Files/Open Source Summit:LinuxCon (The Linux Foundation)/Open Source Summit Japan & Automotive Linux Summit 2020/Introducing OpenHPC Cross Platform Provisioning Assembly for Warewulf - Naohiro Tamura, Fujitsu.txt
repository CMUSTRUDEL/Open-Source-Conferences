Title: Introducing OpenHPC Cross Platform Provisioning Assembly for Warewulf - Naohiro Tamura, Fujitsu
Publication date: 2020-12-04
Playlist: Open Source Summit Japan & Automotive Linux Summit 2020
Description: 
	Introducing OpenHPC Cross Platform Provisioning Assembly for Warewulf - Naohiro Tamura, Fujitsu Limited
Captions: 
	00:00:07,279 --> 00:00:10,960
hello

00:00:07,919 --> 00:00:11,840
this is now hero from physics i'm going

00:00:10,960 --> 00:00:15,040
to talk about

00:00:11,840 --> 00:00:18,000
deploying auto hpc cross platform class

00:00:15,040 --> 00:00:20,720
by using the tool we developed so let's

00:00:18,000 --> 00:00:20,720
get started

00:00:23,279 --> 00:00:28,880
my presentation consists of three parts

00:00:26,640 --> 00:00:30,160
first part is introduction and

00:00:28,880 --> 00:00:33,280
background about

00:00:30,160 --> 00:00:36,480
open hpc r64 server and

00:00:33,280 --> 00:00:39,120
the tool we developed second part

00:00:36,480 --> 00:00:40,079
explains the problem of single platform

00:00:39,120 --> 00:00:43,360
cluster

00:00:40,079 --> 00:00:44,000
when we try to introduce r64 server to

00:00:43,360 --> 00:00:47,840
existing

00:00:44,000 --> 00:00:50,879
x86 class and solution we propose

00:00:47,840 --> 00:00:53,920
cross proton cluster with nemo

00:00:50,879 --> 00:00:56,719
we may call single practice classroom

00:00:53,920 --> 00:00:58,559
homogeneous classroom and also called

00:00:56,719 --> 00:01:01,760
cross proton cluster

00:00:58,559 --> 00:01:03,280
heterogeneous cluster but we only deal

00:01:01,760 --> 00:01:06,400
with two cpus

00:01:03,280 --> 00:01:10,720
x86 and r64

00:01:06,400 --> 00:01:15,439
so i use the word single and cross

00:01:10,720 --> 00:01:15,439
the third part is closing and recharge

00:01:16,320 --> 00:01:22,560
target audience is those who are

00:01:19,360 --> 00:01:23,119
interested in deploying r64 computer

00:01:22,560 --> 00:01:26,240
node

00:01:23,119 --> 00:01:30,560
in operate species level is

00:01:26,240 --> 00:01:30,560
anchoring and

00:01:30,640 --> 00:01:34,720
i'm going to try to use abbreviation as

00:01:33,360 --> 00:01:40,320
little as possible

00:01:34,720 --> 00:01:43,360
if i use it i try to make comment on it

00:01:40,320 --> 00:01:47,520
the goal is that i think you can deploy

00:01:43,360 --> 00:01:51,280
openhpc close platform cluster using qnu

00:01:47,520 --> 00:01:52,399
that is sms system management server x86

00:01:51,280 --> 00:01:57,680
manages both

00:01:52,399 --> 00:01:57,680
computer nodes x86 and r64

00:01:58,880 --> 00:02:02,560
i received all of the commands in text

00:02:01,360 --> 00:02:05,520
file

00:02:02,560 --> 00:02:07,040
and are projected into my github the

00:02:05,520 --> 00:02:10,239
following url shows you

00:02:07,040 --> 00:02:11,039
all of the exact commands without any

00:02:10,239 --> 00:02:14,640
omission

00:02:11,039 --> 00:02:17,920
for your recognition so you can

00:02:14,640 --> 00:02:17,920
recap it anytime

00:02:20,080 --> 00:02:26,480
i summarize the open hpc in one slide

00:02:23,840 --> 00:02:27,440
in my understanding open xpc is

00:02:26,480 --> 00:02:30,640
collection of

00:02:27,440 --> 00:02:33,599
hpc open source software package

00:02:30,640 --> 00:02:34,640
so as nothing conflicts each other there

00:02:33,599 --> 00:02:37,680
are many many

00:02:34,640 --> 00:02:38,480
hpc libraries and tools some of the

00:02:37,680 --> 00:02:41,440
components

00:02:38,480 --> 00:02:43,120
can be compiled in different ways by

00:02:41,440 --> 00:02:47,040
combining

00:02:43,120 --> 00:02:50,800
of compiler and mpi lifetime

00:02:47,040 --> 00:02:54,080
npr runtime can be either open mpi 4

00:02:50,800 --> 00:02:58,720
interior mpi and vx2

00:02:54,080 --> 00:03:03,920
or mpi ch compiler can be either

00:02:58,720 --> 00:03:05,440
unionized you can configure or amperage

00:03:03,920 --> 00:03:09,519
for example

00:03:05,440 --> 00:03:09,519
blue c plus plus c library here

00:03:10,319 --> 00:03:16,720
the first block and the second block are

00:03:13,360 --> 00:03:20,400
x86 packages and the salt block

00:03:16,720 --> 00:03:23,440
and fourth block are r64 package

00:03:20,400 --> 00:03:27,280
and first block is compiled by

00:03:23,440 --> 00:03:30,879
the nu9 with those four

00:03:27,280 --> 00:03:31,440
npi rankings the second block compiled

00:03:30,879 --> 00:03:34,720
by

00:03:31,440 --> 00:03:37,519
intel compiler with zones for npr

00:03:34,720 --> 00:03:37,519
runtime package

00:03:37,920 --> 00:03:41,440
the third block compiled when united

00:03:40,080 --> 00:03:44,959
with those two

00:03:41,440 --> 00:03:48,879
mpi packages the fourth book

00:03:44,959 --> 00:03:51,760
is confirmed by arm confirmer with two

00:03:48,879 --> 00:03:51,760
npr lifetime

00:03:52,640 --> 00:04:00,959
and resource management can be

00:03:57,200 --> 00:04:04,480
chosen randomly or open pbs

00:04:00,959 --> 00:04:06,959
or pmix from zoning management can be

00:04:04,480 --> 00:04:11,040
chosen

00:04:06,959 --> 00:04:14,720
either well or extract

00:04:11,040 --> 00:04:20,000
and os is supporting the either

00:04:14,720 --> 00:04:23,040
saint osago 2 or open cinema leap 1502

00:04:20,000 --> 00:04:25,759
in this book i took a combination of

00:04:23,040 --> 00:04:26,800
centralized edges ii and wow earth and

00:04:25,759 --> 00:04:30,479
islam

00:04:26,800 --> 00:04:33,759
and i use the nu9 and the opponent's i4

00:04:30,479 --> 00:04:33,759
for for demo

00:04:36,720 --> 00:04:40,320
the current status in terms of r64

00:04:39,360 --> 00:04:43,919
server

00:04:40,320 --> 00:04:46,080
that means is that r64 server is very

00:04:43,919 --> 00:04:49,520
expensive and not yet popular

00:04:46,080 --> 00:04:50,160
as opposed to smartphone and good news

00:04:49,520 --> 00:04:53,520
is that

00:04:50,160 --> 00:04:55,440
r64 hpc won to 500

00:04:53,520 --> 00:04:56,800
the other three titles for two

00:04:55,440 --> 00:05:00,400
consecutive times

00:04:56,800 --> 00:05:03,600
june and november this year

00:05:00,400 --> 00:05:06,160
this fact proves that r64

00:05:03,600 --> 00:05:06,960
is capable for hpc in terms of

00:05:06,160 --> 00:05:10,160
performance

00:05:06,960 --> 00:05:12,320
and power consumption interestingly raid

00:05:10,160 --> 00:05:14,479
8.1 r64

00:05:12,320 --> 00:05:18,240
is running on this system product

00:05:14,479 --> 00:05:22,880
powered by a64 fx src

00:05:18,240 --> 00:05:28,560
so r64 server is standardized by r

00:05:22,880 --> 00:05:28,560
server-based system svsa specification

00:05:30,800 --> 00:05:36,240
auto hpc wiki resource page introduces

00:05:34,400 --> 00:05:37,759
cross-platform programming assembly for

00:05:36,240 --> 00:05:41,600
our

00:05:37,759 --> 00:05:42,960
that allows creation and assembly of r64

00:05:41,600 --> 00:05:48,240
images on

00:05:42,960 --> 00:05:48,240
existing x86 cost using containers

00:05:49,360 --> 00:05:54,320
the hyperlink point to the repository

00:05:52,000 --> 00:05:56,960
close sms r64 cell

00:05:54,320 --> 00:05:56,960
we maintain

00:05:57,600 --> 00:06:03,840
basically what is this tool for

00:06:01,759 --> 00:06:05,520
and this is a tool exactly implemented

00:06:03,840 --> 00:06:08,639
as docker container

00:06:05,520 --> 00:06:11,840
to deploy of hpc cross-platform cluster

00:06:08,639 --> 00:06:15,039
by enabling to execute r64 battery

00:06:11,840 --> 00:06:19,039
or x86 machine

00:06:15,039 --> 00:06:22,319
so in this session i call it the sms r64

00:06:19,039 --> 00:06:22,319
shell for short

00:06:24,880 --> 00:06:31,840
open hpc install guide written for

00:06:28,160 --> 00:06:32,560
each cpu architecture so if we follow

00:06:31,840 --> 00:06:36,080
the

00:06:32,560 --> 00:06:39,039
guide exactly typical openhpc

00:06:36,080 --> 00:06:41,360
single platform cluster is deployed such

00:06:39,039 --> 00:06:43,759
as this page

00:06:41,360 --> 00:06:44,960
in this case admin must manage two

00:06:43,759 --> 00:06:47,199
clusters

00:06:44,960 --> 00:06:49,919
that means two database two user

00:06:47,199 --> 00:06:53,039
accounts two sets of saving files

00:06:49,919 --> 00:06:57,199
and etc etc sms

00:06:53,039 --> 00:06:57,199
r64 kind of remained

00:06:59,280 --> 00:07:07,120
first if we purchase sms r64

00:07:03,039 --> 00:07:10,400
into sms x86 visit server

00:07:07,120 --> 00:07:12,400
certainly one physical server decreased

00:07:10,400 --> 00:07:13,440
but administrator must manage two

00:07:12,400 --> 00:07:16,400
clusters

00:07:13,440 --> 00:07:19,280
no unification so this is not the

00:07:16,400 --> 00:07:19,280
cluster we want

00:07:20,880 --> 00:07:31,039
if sms x86 manages both

00:07:25,039 --> 00:07:34,080
computer node x86 and computer node h64

00:07:31,039 --> 00:07:39,120
everything is integrated into

00:07:34,080 --> 00:07:41,759
sms x86 so no duplicated administration

00:07:39,120 --> 00:07:44,400
so unified tv unified user account

00:07:41,759 --> 00:07:47,520
unified certain syncing files

00:07:44,400 --> 00:07:50,560
so this is ideal case this is the cross

00:07:47,520 --> 00:07:53,599
cross proton class we want so

00:07:50,560 --> 00:07:53,599
how do we do that

00:07:56,400 --> 00:08:02,400
the answer is relatively simple just

00:07:59,840 --> 00:08:02,400
two steps

00:08:03,039 --> 00:08:11,360
first step is set up sms x86

00:08:07,440 --> 00:08:14,400
then second step setup sms h64

00:08:11,360 --> 00:08:18,639
environment or x86

00:08:14,400 --> 00:08:21,680
machine in shift 2

00:08:18,639 --> 00:08:24,720
we make use of r64

00:08:21,680 --> 00:08:26,000
blockchain that is cross platform

00:08:24,720 --> 00:08:29,680
programming assembly for

00:08:26,000 --> 00:08:32,080
wobble auto hpc

00:08:29,680 --> 00:08:33,200
webpage provide install guide for

00:08:32,080 --> 00:08:36,719
combination of

00:08:33,200 --> 00:08:39,120
each cpu architecture and os

00:08:36,719 --> 00:08:41,039
and programming software and resource

00:08:39,120 --> 00:08:45,839
management software

00:08:41,039 --> 00:08:49,040
here is a copy of the open hpc webpage

00:08:45,839 --> 00:08:52,399
the install guide listed by

00:08:49,040 --> 00:08:56,080
combination of the provisioning software

00:08:52,399 --> 00:08:59,600
and resource management software so we

00:08:56,080 --> 00:09:04,959
use some function of centralized

00:08:59,600 --> 00:09:04,959
2 and vowels in the slang

00:09:06,839 --> 00:09:09,839
combination

00:09:12,240 --> 00:09:18,959
in step one think of sms

00:09:15,360 --> 00:09:23,839
x86 fast by following the install guide

00:09:18,959 --> 00:09:23,839
x86 center s802

00:09:24,320 --> 00:09:30,320
and the slab no adjustment is necessary

00:09:28,399 --> 00:09:31,519
to the script described in the instant

00:09:30,320 --> 00:09:34,080
guide

00:09:31,519 --> 00:09:37,519
this picture shows just after set one

00:09:34,080 --> 00:09:42,160
has been done

00:09:37,519 --> 00:09:46,000
in the step two we use sms r64.chair

00:09:42,160 --> 00:09:50,480
container and second sms r64

00:09:46,000 --> 00:09:53,200
environment of sms x86

00:09:50,480 --> 00:09:54,320
so we need some adjustment to the steps

00:09:53,200 --> 00:09:57,839
described in

00:09:54,320 --> 00:10:00,880
r64 version of the install guide

00:09:57,839 --> 00:10:02,399
this picture shows just after step 2 has

00:10:00,880 --> 00:10:06,560
been done

00:10:02,399 --> 00:10:11,440
yellow box shows sms r64.container

00:10:06,560 --> 00:10:11,440
is created in sms x86

00:10:12,480 --> 00:10:19,440
step 1 has 7 tasks i go through

00:10:16,160 --> 00:10:21,920
all of them one by one the first

00:10:19,440 --> 00:10:22,880
task is user's account distribution

00:10:21,920 --> 00:10:25,760
setup

00:10:22,880 --> 00:10:25,760
by vowel

00:10:27,120 --> 00:10:30,880
this picture shows just after install

00:10:29,600 --> 00:10:34,880
open hpc

00:10:30,880 --> 00:10:38,880
basic components of sms x86

00:10:34,880 --> 00:10:42,959
mysqrb phpd tftv

00:10:38,880 --> 00:10:46,959
http slam control v mung id

00:10:42,959 --> 00:10:50,399
and nfsb are running and the tv share

00:10:46,959 --> 00:10:53,360
if resets are ready to use

00:10:50,399 --> 00:10:54,240
cluster user account is managed as os

00:10:53,360 --> 00:10:57,839
user

00:10:54,240 --> 00:10:59,200
and distributed via world wwf expert

00:10:57,839 --> 00:11:02,640
command

00:10:59,200 --> 00:11:05,360
which distributes edc password group

00:11:02,640 --> 00:11:05,360
and struggle

00:11:07,839 --> 00:11:13,600
the second step of step one is

00:11:10,959 --> 00:11:16,480
user's home graphical distribution setup

00:11:13,600 --> 00:11:16,480
by nfs

00:11:18,880 --> 00:11:26,399
create cluster user home on local disk

00:11:22,560 --> 00:11:30,560
on sms x86 in this case

00:11:26,399 --> 00:11:33,440
and export it to computer node x86

00:11:30,560 --> 00:11:33,440
by nfs

00:11:36,079 --> 00:11:42,560
the third task of step 1 is vos

00:11:39,920 --> 00:11:45,040
based operating system creation by

00:11:42,560 --> 00:11:45,040
huawei

00:11:46,399 --> 00:11:51,279
based operating system is minimum system

00:11:49,200 --> 00:11:53,880
saint osaga 2

00:11:51,279 --> 00:11:55,600
and the source of google slab and

00:11:53,880 --> 00:11:59,279
brilliantness

00:11:55,600 --> 00:11:59,279
virtual node file system

00:11:59,760 --> 00:12:07,920
base operating system x86 is created by

00:12:04,920 --> 00:12:11,760
wwmk changes command with

00:12:07,920 --> 00:12:14,959
vos x86 loot pass

00:12:11,760 --> 00:12:19,920
and the open hpc packages are added by

00:12:14,959 --> 00:12:23,279
vm command with vos x86 loot pass

00:12:19,920 --> 00:12:27,360
all packages are pulled from repository

00:12:23,279 --> 00:12:27,360
x86 in the internet

00:12:28,800 --> 00:12:36,839
the fourth part of step one is bootstrap

00:12:32,240 --> 00:12:39,839
image assemble and distribute setup

00:12:36,839 --> 00:12:39,839
vowel

00:12:40,720 --> 00:12:48,399
fruit stuff x86 contains

00:12:44,560 --> 00:12:52,880
pxe column and initial mfs

00:12:48,399 --> 00:12:58,160
and it is created by www

00:12:52,880 --> 00:12:58,160
with vos x86 loot pass

00:13:00,800 --> 00:13:07,680
the fifth fifth task of step one

00:13:04,240 --> 00:13:12,560
is dnfs by channel file system image

00:13:07,680 --> 00:13:12,560
assembled and distribution by vowel

00:13:13,760 --> 00:13:20,399
vnfs x86 contains

00:13:17,040 --> 00:13:24,560
final os number image and

00:13:20,399 --> 00:13:29,680
it is created by wwbfns command

00:13:24,560 --> 00:13:29,680
with vos x86 loot path

00:13:31,839 --> 00:13:37,360
the sixth task of step one is

00:13:35,000 --> 00:13:38,880
developmental installation and

00:13:37,360 --> 00:13:41,839
distribution setup

00:13:38,880 --> 00:13:41,839
by nfs

00:13:43,680 --> 00:13:50,240
development tool x86 is

00:13:46,959 --> 00:13:53,279
collections of library and fields

00:13:50,240 --> 00:13:56,480
and they are installed by ram command

00:13:53,279 --> 00:14:00,240
into sms x86

00:13:56,480 --> 00:14:03,600
slash opt slash ohpc slashpad

00:14:00,240 --> 00:14:08,240
and export it to cn

00:14:03,600 --> 00:14:12,240
x86 as slash opt slash ohpc

00:14:08,240 --> 00:14:12,240
flashpad via nfs

00:14:13,279 --> 00:14:17,760
the last task of step is computer node

00:14:16,639 --> 00:14:20,079
x86

00:14:17,760 --> 00:14:20,079
boot

00:14:21,519 --> 00:14:29,199
sms x86 issues ipmi

00:14:24,720 --> 00:14:32,800
boot command to computer node x86

00:14:29,199 --> 00:14:36,160
then computer node x86 initiates

00:14:32,800 --> 00:14:36,160
ipx eboot

00:14:38,959 --> 00:14:46,959
step 2 is almost identical with step 1.

00:14:43,519 --> 00:14:47,440
the first and second tasks are common

00:14:46,959 --> 00:14:51,279
with

00:14:47,440 --> 00:14:54,399
step one we don't need these two tasks

00:14:51,279 --> 00:14:57,440
if users are same between x86

00:14:54,399 --> 00:15:00,240
and r64 so

00:14:57,440 --> 00:15:02,399
let's go through the rest of five tasks

00:15:00,240 --> 00:15:06,399
one by one

00:15:02,399 --> 00:15:09,600
the third task of step two is vos

00:15:06,399 --> 00:15:13,519
doing operating system creation by

00:15:09,600 --> 00:15:16,160
vowel using sms r60 single check

00:15:13,519 --> 00:15:16,160
container

00:15:16,800 --> 00:15:23,839
notice that we installed docker into

00:15:20,320 --> 00:15:28,320
sms x86

00:15:23,839 --> 00:15:33,519
this operating system arch 64

00:15:28,320 --> 00:15:36,920
needs to be created in sms r64 container

00:15:33,519 --> 00:15:40,480
that is yellow box by

00:15:36,920 --> 00:15:45,360
wwmk changing into command with

00:15:40,480 --> 00:15:45,759
vos r64 reclass and the openhpc packages

00:15:45,360 --> 00:15:50,160
are

00:15:45,759 --> 00:15:53,360
active by nan command with vos r64

00:15:50,160 --> 00:15:54,839
loot pass all packages are pulled from

00:15:53,360 --> 00:15:59,120
repository

00:15:54,839 --> 00:15:59,120
r164 in the internet

00:16:00,399 --> 00:16:05,040
the fourth task of step two is workspace

00:16:03,920 --> 00:16:09,600
image assemble

00:16:05,040 --> 00:16:09,600
and the discrimination set up by vowel

00:16:12,480 --> 00:16:22,240
bootstrap x64 contains pxe current

00:16:16,480 --> 00:16:26,320
and economic mess and it is created by

00:16:22,240 --> 00:16:29,759
www bootstrap command with vos r64

00:16:26,320 --> 00:16:34,839
loot pass on sms x86

00:16:29,759 --> 00:16:37,839
black left r60 sms h164.6

00:16:34,839 --> 00:16:37,839
container

00:16:38,000 --> 00:16:44,959
the fifth pass task of

00:16:41,360 --> 00:16:46,720
step two is vfns virtual node

00:16:44,959 --> 00:16:48,839
file system image assemble and

00:16:46,720 --> 00:16:51,839
distribution by

00:16:48,839 --> 00:16:51,839
vowel

00:16:52,560 --> 00:16:59,120
vfns r64 contains

00:16:55,759 --> 00:17:02,839
final os ram booth image

00:16:59,120 --> 00:17:05,199
and it is created by

00:17:02,839 --> 00:17:08,400
www combined with

00:17:05,199 --> 00:17:11,760
vos r64 would pass on

00:17:08,400 --> 00:17:18,079
sms x86 but not in

00:17:11,760 --> 00:17:21,280
sms r64.6 container

00:17:18,079 --> 00:17:24,079
the sixth task of step two

00:17:21,280 --> 00:17:25,360
is development tool installation and

00:17:24,079 --> 00:17:33,360
discrimination setup

00:17:25,360 --> 00:17:37,440
by nfs using sms r64 container

00:17:33,360 --> 00:17:38,240
notice that we need to use sms r64.c

00:17:37,440 --> 00:17:40,480
again

00:17:38,240 --> 00:17:43,280
in batch shell mode but like interaction

00:17:40,480 --> 00:17:45,919
share mode this time

00:17:43,280 --> 00:17:48,080
development tool r64 are collection of

00:17:45,919 --> 00:17:50,880
libraries and tools

00:17:48,080 --> 00:17:51,360
and they are installed by yam command

00:17:50,880 --> 00:17:54,799
into

00:17:51,360 --> 00:17:58,559
sms x86

00:17:54,799 --> 00:18:02,799
slash opt or hpc hyphen r64

00:17:58,559 --> 00:18:07,600
slash opt or hpc path by preventing the

00:18:02,799 --> 00:18:10,360
slash of pc or hpc hyphen r6p4

00:18:07,600 --> 00:18:12,640
so as much to override development to

00:18:10,360 --> 00:18:16,720
x86

00:18:12,640 --> 00:18:20,080
the pass is exposed to computer node x64

00:18:16,720 --> 00:18:24,080
as slash opt or hpc

00:18:20,080 --> 00:18:24,080
flashpad by nfs

00:18:25,520 --> 00:18:32,240
the last task of step two is computer

00:18:28,640 --> 00:18:32,240
node r64 group

00:18:32,960 --> 00:18:40,880
sms x86 issue ipmi

00:18:36,799 --> 00:18:44,160
boost command to computer node r64

00:18:40,880 --> 00:18:47,039
then computer node r64 initiates

00:18:44,160 --> 00:18:47,039
ipx mode

00:18:48,559 --> 00:18:55,120
now let's move into technical details of

00:18:51,760 --> 00:18:58,160
step 2 second sms r64

00:18:55,120 --> 00:18:58,160
environment task

00:18:58,480 --> 00:19:04,720
in terms of sms r64 environment

00:19:02,080 --> 00:19:05,760
i will show you how to execute r64

00:19:04,720 --> 00:19:09,679
binary

00:19:05,760 --> 00:19:13,120
or x86 manually

00:19:09,679 --> 00:19:16,480
automatically and without changing

00:19:13,120 --> 00:19:18,720
then how to share container host file

00:19:16,480 --> 00:19:22,480
system with case

00:19:18,720 --> 00:19:26,000
in terms of computer node r64 book

00:19:22,480 --> 00:19:29,200
i will show you how to make vos

00:19:26,000 --> 00:19:30,080
face operating system and bootstrap and

00:19:29,200 --> 00:19:33,440
blueprints

00:19:30,080 --> 00:19:33,440
functional file system

00:19:34,880 --> 00:19:42,799
learn how to build computer node

00:19:38,400 --> 00:19:45,200
x86 and r64 using qami

00:19:42,799 --> 00:19:53,840
finally i will show you how to manage

00:19:45,200 --> 00:19:53,840
job for x86 and r64

00:19:58,160 --> 00:20:08,159
how to execute r64 binary or x86

00:20:02,080 --> 00:20:08,159
manually the answer is qmu user static

00:20:09,200 --> 00:20:14,400
our command shows we are

00:20:14,480 --> 00:20:21,120
we are on x86 platform right now

00:20:18,000 --> 00:20:23,840
and pws command shows we are in

00:20:21,120 --> 00:20:24,159
base operating system router directory

00:20:23,840 --> 00:20:27,200
and

00:20:24,159 --> 00:20:28,480
file command shows being ls is

00:20:27,200 --> 00:20:32,080
dynamically linked

00:20:28,480 --> 00:20:32,400
r64 violence in order to dynamically

00:20:32,080 --> 00:20:35,520
link

00:20:32,400 --> 00:20:40,320
r60 rs map we need to invoke

00:20:35,520 --> 00:20:44,880
changes with qm user static

00:20:40,320 --> 00:20:46,400
like this qm user certificate is user

00:20:44,880 --> 00:20:50,320
space interpreter

00:20:46,400 --> 00:20:53,679
for r64 probably the stock

00:20:50,320 --> 00:20:56,799
binary is convenient

00:20:53,679 --> 00:20:59,039
because it is portable we can copy it

00:20:56,799 --> 00:21:03,840
anywhere without worrying about

00:20:59,039 --> 00:21:03,840
dll and neural path

00:21:04,799 --> 00:21:09,360
next how can we execute r64 vitamin

00:21:08,000 --> 00:21:12,640
automatically

00:21:09,360 --> 00:21:14,880
the answer is the informal misc

00:21:12,640 --> 00:21:15,760
the informant is risky the kind of

00:21:14,880 --> 00:21:19,440
function

00:21:15,760 --> 00:21:22,880
and the kind of shivan extension

00:21:19,440 --> 00:21:27,679
defining the magic number of r64 binary

00:21:22,880 --> 00:21:30,880
in information is copy file in restart

00:21:27,679 --> 00:21:34,400
system v being format then

00:21:30,880 --> 00:21:37,679
qmu ad64 circuit finally

00:21:34,400 --> 00:21:40,960
automatically invocation

00:21:37,679 --> 00:21:45,039
is enabled and

00:21:40,960 --> 00:21:49,520
we can now add 64 binary on x86

00:21:45,039 --> 00:21:49,520
as if it were x86 panel

00:21:50,559 --> 00:21:57,039
next how can we execute r64 battery

00:21:54,159 --> 00:21:58,640
without changing the answer is doppler

00:21:57,039 --> 00:22:02,960
container

00:21:58,640 --> 00:22:05,919
the r64 a qm r64 circuit

00:22:02,960 --> 00:22:07,200
is added into container by defining

00:22:05,919 --> 00:22:10,400
dockerfile

00:22:07,200 --> 00:22:12,880
like this container hose and the guest

00:22:10,400 --> 00:22:13,760
are sharing same color so the

00:22:12,880 --> 00:22:16,400
information

00:22:13,760 --> 00:22:17,520
setting is effective in content against

00:22:16,400 --> 00:22:21,360
two

00:22:17,520 --> 00:22:26,480
and sms r64 docker container can be used

00:22:21,360 --> 00:22:30,720
as either interactive shell or version

00:22:26,480 --> 00:22:32,880
typing adjustment sms r64

00:22:30,720 --> 00:22:34,000
drop shell returns intelligent share

00:22:32,880 --> 00:22:37,440
property

00:22:34,000 --> 00:22:40,960
so notice quantitative change typing

00:22:37,440 --> 00:22:45,280
sms r64 with the r64 vinyl

00:22:40,960 --> 00:22:45,280
runs as fast servo

00:22:49,600 --> 00:22:53,600
next how can we share container host

00:22:51,679 --> 00:22:56,799
file system with this

00:22:53,600 --> 00:23:01,760
the answer is local minus b

00:22:56,799 --> 00:23:04,799
volume option sms r64

00:23:01,760 --> 00:23:08,240
invokes docker with minus v option

00:23:04,799 --> 00:23:10,799
like this then i64

00:23:08,240 --> 00:23:11,679
this operating system image can be

00:23:10,799 --> 00:23:14,559
accessed from

00:23:11,679 --> 00:23:16,960
both host and guest through shared

00:23:14,559 --> 00:23:16,960
volume

00:23:19,120 --> 00:23:25,919
next how can we create r64

00:23:22,320 --> 00:23:28,960
vos base operating system

00:23:25,919 --> 00:23:32,559
here swing.6.1 is

00:23:28,960 --> 00:23:34,640
the social number of r64 auto hpc

00:23:32,559 --> 00:23:37,919
install guide

00:23:34,640 --> 00:23:39,039
the answer is to type wwmk changing

00:23:37,919 --> 00:23:43,039
command

00:23:39,039 --> 00:23:46,320
in sms r64.container

00:23:43,039 --> 00:23:49,840
here first type sms people

00:23:46,320 --> 00:23:52,880
option then notice that prompt

00:23:49,840 --> 00:23:56,559
is changed and then

00:23:52,880 --> 00:24:00,000
set vos loot pass to the shared volume

00:23:56,559 --> 00:24:03,360
and copy qmh64 static

00:24:00,000 --> 00:24:03,360
to vos

00:24:03,600 --> 00:24:13,039
and then execute wwmk changer

00:24:07,520 --> 00:24:13,039
which create r64 vos in the shared voice

00:24:16,320 --> 00:24:23,279
next how can we assemble r64

00:24:19,360 --> 00:24:27,120
bootstrap image the answer is to type

00:24:23,279 --> 00:24:30,640
wwe bootstrap command to sms

00:24:27,120 --> 00:24:31,200
x86 shell prompt notice that we are not

00:24:30,640 --> 00:24:34,799
in

00:24:31,200 --> 00:24:38,080
sms r64.chat but in sms

00:24:34,799 --> 00:24:41,120
container host www

00:24:38,080 --> 00:24:44,559
bootstrap with bos path assemblies

00:24:41,120 --> 00:24:48,240
r64 bootstrap image

00:24:44,559 --> 00:24:51,640
but the attribute of the image becomes

00:24:48,240 --> 00:24:55,279
x86 so currently

00:24:51,640 --> 00:24:59,039
www.scrap command doesn't take minus a

00:24:55,279 --> 00:25:03,559
actual parameter so we need to update

00:24:59,039 --> 00:25:06,559
to r64 by

00:25:03,559 --> 00:25:06,559
www.69

00:25:09,520 --> 00:25:18,559
next how can we assemble doing nfs image

00:25:14,480 --> 00:25:22,320
virtually node file system r64

00:25:18,559 --> 00:25:25,600
the answer is type wwwfnss command

00:25:22,320 --> 00:25:29,360
to sms x86 container host

00:25:25,600 --> 00:25:33,120
notice that we are not in sms r3.

00:25:29,360 --> 00:25:37,039
but sms container host www

00:25:33,120 --> 00:25:40,720
we have an s with vos path assemblies

00:25:37,039 --> 00:25:44,400
r64 with an s image

00:25:40,720 --> 00:25:50,720
but the attempt of the image becomes x86

00:25:44,400 --> 00:25:54,240
currently www parameter

00:25:50,720 --> 00:25:57,440
so we need to upgrade to r64

00:25:54,240 --> 00:25:59,919
by dominating s scheme we have an s set

00:25:57,440 --> 00:25:59,919
command

00:26:01,760 --> 00:26:09,520
next how can we build computer node

00:26:05,120 --> 00:26:10,320
using qm qn parameter is very

00:26:09,520 --> 00:26:13,520
complicated

00:26:10,320 --> 00:26:16,000
and difficult so this is just for your

00:26:13,520 --> 00:26:16,000
reference

00:26:16,559 --> 00:26:23,039
in physical machine environment

00:26:19,600 --> 00:26:27,120
we issue ipmi group command from sms

00:26:23,039 --> 00:26:27,120
to boot computer node

00:26:28,559 --> 00:26:34,880
the p flash is all wfm uefi

00:26:31,840 --> 00:26:38,720
firmware so see the

00:26:34,880 --> 00:26:41,039
slide later point us to online resource

00:26:38,720 --> 00:26:41,039
page

00:26:42,880 --> 00:26:47,520
the last how can we manage job for each

00:26:46,159 --> 00:26:50,240
platform

00:26:47,520 --> 00:26:51,279
the answer is to define partition for

00:26:50,240 --> 00:26:56,480
x86

00:26:51,279 --> 00:26:56,480
and r64 in slide.profile

00:26:57,279 --> 00:27:04,880
if if command shows all partition

00:27:00,960 --> 00:27:07,679
square denotes default partition

00:27:04,880 --> 00:27:09,200
we can specify partition to excellent

00:27:07,679 --> 00:27:12,320
command with minus p

00:27:09,200 --> 00:27:15,200
parameter like this

00:27:12,320 --> 00:27:16,000
if log minus p parameter default

00:27:15,200 --> 00:27:21,360
parameter is

00:27:16,000 --> 00:27:24,480
chosen implicitly

00:27:21,360 --> 00:27:25,600
now i'm going to show you sms r6 default

00:27:24,480 --> 00:27:29,200
share demo

00:27:25,600 --> 00:27:32,080
as i explained sms r6p product shell has

00:27:29,200 --> 00:27:32,720
two use cases the first case is to

00:27:32,080 --> 00:27:36,080
create

00:27:32,720 --> 00:27:39,440
vos based operating system r64 in

00:27:36,080 --> 00:27:42,880
interactive general second case is to

00:27:39,440 --> 00:27:45,360
install development tool rgt4 in batch

00:27:42,880 --> 00:27:49,840
cell mode

00:27:45,360 --> 00:27:49,840
bos r64 creation

00:27:50,159 --> 00:27:55,039
container host sms is x86

00:27:55,279 --> 00:28:02,480
ccl volume is empty

00:27:58,559 --> 00:28:03,360
or sms and create a file in shared

00:28:02,480 --> 00:28:07,919
volume

00:28:03,360 --> 00:28:07,919
and check a file is created

00:28:08,880 --> 00:28:15,279
start sms r64 in interactive cell mode

00:28:12,480 --> 00:28:16,080
notice that prompt has been changed and

00:28:15,279 --> 00:28:19,679
the cpu

00:28:16,080 --> 00:28:24,399
architecture becomes r64

00:28:19,679 --> 00:28:31,360
and see if the file is

00:28:24,399 --> 00:28:36,320
there in search volume just recreated

00:28:31,360 --> 00:28:36,320
select ch loop to vos loot pass

00:28:37,520 --> 00:28:45,760
create user v in bos

00:28:42,840 --> 00:28:49,520
copy qm user static to

00:28:45,760 --> 00:28:53,200
vos user key to execute r64

00:28:49,520 --> 00:28:58,000
binary stack mk

00:28:53,200 --> 00:29:01,520
changes with exit voice loot pass

00:28:58,000 --> 00:29:01,520
then start installation

00:29:08,679 --> 00:29:16,480
191 package has been

00:29:12,880 --> 00:29:19,760
installed with

00:29:16,480 --> 00:29:22,799
no error check

00:29:19,760 --> 00:29:22,799
miui class

00:29:23,279 --> 00:29:31,760
image has been installed

00:29:27,039 --> 00:29:35,120
check bing address is r64 widely

00:29:31,760 --> 00:29:38,480
exit container set

00:29:35,120 --> 00:29:41,840
r64 ch2 to the

00:29:38,480 --> 00:29:41,840
vos loot pass

00:29:43,440 --> 00:29:50,960
and pos image can be seen from

00:29:47,360 --> 00:29:56,240
sms and check

00:29:50,960 --> 00:29:56,240
ms command is r64 value

00:29:59,840 --> 00:30:03,520
development tool installation we are

00:30:02,159 --> 00:30:09,360
going to install

00:30:03,520 --> 00:30:14,000
r64 the newline compiler

00:30:09,360 --> 00:30:18,399
sms host is r60 x86

00:30:14,000 --> 00:30:23,679
and r64 the u9 compiler is not

00:30:18,399 --> 00:30:26,880
installed on sms

00:30:23,679 --> 00:30:32,000
start sms r64

00:30:26,880 --> 00:30:36,240
in text mode specifying the yarn command

00:30:32,000 --> 00:30:39,679
as an argument

00:30:36,240 --> 00:30:39,679
insulation started

00:30:42,399 --> 00:30:49,120
and now c compiler is installed on

00:30:45,840 --> 00:30:53,559
sms x86 and

00:30:49,120 --> 00:30:56,559
see the gcc battery is

00:30:53,559 --> 00:30:56,559
h64

00:31:02,480 --> 00:31:07,039
now i'm going to demonstrate cross

00:31:05,279 --> 00:31:11,279
quantum classes

00:31:07,039 --> 00:31:14,480
here is a gamer environment sms x86 has

00:31:11,279 --> 00:31:18,000
4 cpu 32 gigabyte memory and

00:31:14,480 --> 00:31:22,320
two ethernets one to internet the other

00:31:18,000 --> 00:31:26,000
is to classical network n1 and m2

00:31:22,320 --> 00:31:29,200
computer node x86 both are running as

00:31:26,000 --> 00:31:34,240
qmu virtual server which charge for cpu

00:31:29,200 --> 00:31:37,760
and 8 gigabyte so computer node x86 has

00:31:34,240 --> 00:31:41,120
total eight cpus and c1

00:31:37,760 --> 00:31:43,600
and c2 are computer node r64

00:31:41,120 --> 00:31:45,919
both are running as qm virtual server

00:31:43,600 --> 00:31:46,720
which are support gpus and 80 gigabyte

00:31:45,919 --> 00:31:50,000
memory

00:31:46,720 --> 00:31:52,559
so computer node r64 also has total x

00:31:50,000 --> 00:31:52,559
gpu

00:31:55,760 --> 00:32:04,640
sms and cn computer node

00:32:01,600 --> 00:32:09,360
sms is x86

00:32:04,640 --> 00:32:13,279
and www

00:32:09,360 --> 00:32:17,360
all of computer node c1 c2

00:32:13,279 --> 00:32:20,399
in one and two and se4 command shows

00:32:17,360 --> 00:32:23,919
all of partition there are two functions

00:32:20,399 --> 00:32:27,440
x86 64 has computer node

00:32:23,919 --> 00:32:31,919
n1 m2 r64

00:32:27,440 --> 00:32:31,919
partition has c1 c2

00:32:32,640 --> 00:32:39,519
and i switch the terminal to

00:32:35,919 --> 00:32:39,519
n1 and n2

00:32:40,399 --> 00:32:46,880
and the language

00:32:43,679 --> 00:32:50,320
os image almost can take three

00:32:46,880 --> 00:32:50,320
to nine gigabytes

00:32:50,399 --> 00:32:57,919
and both nodes marking

00:32:54,080 --> 00:33:01,840
the development field path and home

00:32:57,919 --> 00:33:05,440
formulation and

00:33:01,840 --> 00:33:09,120
cpu is x86 and the

00:33:05,440 --> 00:33:12,880
number of cpu is 4

00:33:09,120 --> 00:33:15,600
and i switched the camera to c1 and c2

00:33:12,880 --> 00:33:16,559
and your language always occupies four

00:33:15,600 --> 00:33:20,640
gigabytes

00:33:16,559 --> 00:33:24,399
and and the middle of magnitude

00:33:20,640 --> 00:33:28,000
is mounting monkey and home automatic

00:33:24,399 --> 00:33:32,000
and the cpu axis is x64

00:33:28,000 --> 00:33:32,000
and the number of cpu is four

00:33:34,240 --> 00:33:41,360
and let's start mpi job on x86

00:33:37,519 --> 00:33:41,360
creates x86 directly

00:33:41,679 --> 00:33:47,919
so as multimix r64 vinyl the

00:33:44,960 --> 00:33:49,760
module list shows logistic components

00:33:47,919 --> 00:33:53,360
currently

00:33:49,760 --> 00:33:56,799
the new line and open my pi4 is loaded

00:33:53,360 --> 00:34:00,159
and mpicc is located in

00:33:56,799 --> 00:34:07,200
the regulatory

00:34:00,159 --> 00:34:11,440
exactly nfs exported

00:34:07,200 --> 00:34:14,879
and since the hardware program

00:34:11,440 --> 00:34:18,000
they initialize mpi and

00:34:14,879 --> 00:34:21,839
communication channel and and the node

00:34:18,000 --> 00:34:24,560
and second synchronization point

00:34:21,839 --> 00:34:25,919
and load developing hello world and your

00:34:24,560 --> 00:34:30,720
let's go over

00:34:25,919 --> 00:34:30,720
then uh print processor information

00:34:32,879 --> 00:34:38,000
and compile the policy and check that

00:34:36,320 --> 00:34:41,440
finally angularjs is

00:34:38,000 --> 00:34:45,280
x86 and

00:34:41,440 --> 00:34:47,919
start parallel job in maximal

00:34:45,280 --> 00:34:48,800
interactive mode specify number on

00:34:47,919 --> 00:34:52,639
processor

00:34:48,800 --> 00:34:56,960
number of the node and

00:34:52,639 --> 00:35:02,320
partition x86 now prompt to change to

00:34:56,960 --> 00:35:05,280
n1 and start the final job

00:35:02,320 --> 00:35:06,560
all eight processors are returned to the

00:35:05,280 --> 00:35:11,200
answer

00:35:06,560 --> 00:35:15,200
exit node one and

00:35:11,200 --> 00:35:18,240
see the mpi job definition five

00:35:15,200 --> 00:35:21,839
the number of loans is 2

00:35:18,240 --> 00:35:26,320
the number of processes 8 then 5

00:35:21,839 --> 00:35:29,599
command so

00:35:26,320 --> 00:35:33,359
put the max job to the x88

00:35:29,599 --> 00:35:33,359
a partition

00:35:34,800 --> 00:35:41,680
and job number exactly seven and

00:35:38,000 --> 00:35:45,599
jump37 status is running

00:35:41,680 --> 00:35:48,800
and now for complete

00:35:45,599 --> 00:35:51,200
the result is squaring the file

00:35:48,800 --> 00:35:53,520
and all eight processes becomes the

00:35:51,200 --> 00:35:53,520
answer

00:35:55,839 --> 00:36:05,200
now npr job h64

00:36:01,200 --> 00:36:05,200
create a 64 directly

00:36:05,680 --> 00:36:14,640
and run she wants to compile

00:36:09,920 --> 00:36:14,640
the hardware and the r64 button

00:36:14,800 --> 00:36:18,960
check logic module the new line and open

00:36:18,000 --> 00:36:22,960
pi4

00:36:18,960 --> 00:36:24,079
are logic and mpi cc is located in the

00:36:22,960 --> 00:36:27,839
mfs

00:36:24,079 --> 00:36:27,839
actually folder

00:36:29,040 --> 00:36:32,400
and compile hello c

00:36:32,800 --> 00:36:41,040
and the x out is created

00:36:35,839 --> 00:36:44,720
and checked the binary is at 64.

00:36:41,040 --> 00:36:45,280
and execute parallel job as interaction

00:36:44,720 --> 00:36:48,320
cell

00:36:45,280 --> 00:36:50,400
specify the number of processor a

00:36:48,320 --> 00:36:55,839
the number of nodes of 2 and the

00:36:50,400 --> 00:36:55,839
partition is at 64.

00:37:07,839 --> 00:37:12,400
execution one and

00:37:10,210 --> 00:37:15,359
[Music]

00:37:12,400 --> 00:37:17,920
stock box job specifying the partition

00:37:15,359 --> 00:37:20,960
r64

00:37:17,920 --> 00:37:24,320
job number exactly nine this

00:37:20,960 --> 00:37:24,320
skycasting is running

00:37:25,280 --> 00:37:31,680
and and still running

00:37:28,640 --> 00:37:34,800
and now completely the result

00:37:31,680 --> 00:37:38,720
is stored in the file then the

00:37:34,800 --> 00:37:38,720
all eight processor remains answered

00:37:40,720 --> 00:37:47,359
now put the angle

00:37:44,079 --> 00:37:50,800
out into the default partition

00:37:47,359 --> 00:37:53,920
the job is 40.

00:37:50,800 --> 00:37:59,280
still lucky and complicated and the job

00:37:53,920 --> 00:37:59,280
is fair as expected because

00:38:03,280 --> 00:38:10,320
x86 machine computer node can not

00:38:06,720 --> 00:38:18,800
add 64 value so exactly

00:38:10,320 --> 00:38:20,960
the error is exact format error

00:38:18,800 --> 00:38:24,400
this page shows pointless online

00:38:20,960 --> 00:38:24,400
resources for your device

00:38:25,839 --> 00:38:29,680
recap my presentation so please remember

00:38:28,720 --> 00:38:33,280
two things

00:38:29,680 --> 00:38:35,760
first sms production container

00:38:33,280 --> 00:38:36,800
impress deploy openhpc close platform

00:38:35,760 --> 00:38:39,280
cluster

00:38:36,800 --> 00:38:40,240
second all of the command line section

00:38:39,280 --> 00:38:43,920
projects using

00:38:40,240 --> 00:38:47,280
qmu is available on github

00:38:43,920 --> 00:38:50,480
the url is here

00:38:47,280 --> 00:38:52,640
and i hope you try it by yourself

00:38:50,480 --> 00:38:54,240
and if you have a problem please

00:38:52,640 --> 00:38:58,839
reposition to github

00:38:54,240 --> 00:39:01,839
or send me an email thank you for your

00:38:58,839 --> 00:39:01,839
attention

00:39:05,280 --> 00:39:07,359

YouTube URL: https://www.youtube.com/watch?v=XGxaSSJsEwU


