Title: How to Stand on the Shoulders of Giants: Our Journey of Open Sourcing Open Service Mesh...
Publication date: 2020-12-04
Playlist: Open Source Summit Japan & Automotive Linux Summit 2020
Description: 
	How to Stand on the Shoulders of Giants: Our Journey of Open Sourcing Open Service Mesh: Reading Code, Writing Code, and Asking the World for Help - Delyan Raychev, Microsoft Azure
Captions: 
	00:00:09,120 --> 00:00:13,040
well hi friends

00:00:10,480 --> 00:00:14,719
you've joined a talk named how to stand

00:00:13,040 --> 00:00:16,640
on the shoulders of giants

00:00:14,719 --> 00:00:17,760
our journey of open sourcing open

00:00:16,640 --> 00:00:19,439
service mesh

00:00:17,760 --> 00:00:20,880
reading code writing code and asking the

00:00:19,439 --> 00:00:23,760
world for help

00:00:20,880 --> 00:00:25,279
my name is delian reichev i'm a

00:00:23,760 --> 00:00:26,720
principal software engineer with

00:00:25,279 --> 00:00:28,720
microsoft azure

00:00:26,720 --> 00:00:30,080
and i spent the last year working on

00:00:28,720 --> 00:00:33,120
open service mesh

00:00:30,080 --> 00:00:35,040
with an incredible team of engineers

00:00:33,120 --> 00:00:37,120
now in this talk we're going to talk

00:00:35,040 --> 00:00:39,600
about what a service mesh is

00:00:37,120 --> 00:00:41,360
in general we're going to dig into the

00:00:39,600 --> 00:00:43,920
details of what service mesh

00:00:41,360 --> 00:00:46,000
interface is and then we're going to

00:00:43,920 --> 00:00:48,239
talk about what exactly open

00:00:46,000 --> 00:00:49,600
service mesh is i'll show you a demo of

00:00:48,239 --> 00:00:51,520
open service mesh

00:00:49,600 --> 00:00:53,520
we're going to take a look at the code

00:00:51,520 --> 00:00:55,520
and then we'll look into the lessons

00:00:53,520 --> 00:00:58,559
that we learned in the process of

00:00:55,520 --> 00:01:00,960
open sourcing open service mesh

00:00:58,559 --> 00:01:03,520
now let's step back and talk about what

00:01:00,960 --> 00:01:06,240
is a service mesh in general

00:01:03,520 --> 00:01:07,360
and for that i would like to illustrate

00:01:06,240 --> 00:01:09,680
the features

00:01:07,360 --> 00:01:11,439
or the value that service mesh can add

00:01:09,680 --> 00:01:14,560
to your business

00:01:11,439 --> 00:01:16,640
by first pretending that we're a cto of

00:01:14,560 --> 00:01:19,119
an online bookstore

00:01:16,640 --> 00:01:21,280
as a cto of an online bookstore we have

00:01:19,119 --> 00:01:23,360
quite a few engineering teams

00:01:21,280 --> 00:01:25,360
they're working on very many

00:01:23,360 --> 00:01:27,680
microservices that we already have

00:01:25,360 --> 00:01:31,040
running in our kubernetes infrastructure

00:01:27,680 --> 00:01:34,000
but for the next quarter as a cto

00:01:31,040 --> 00:01:35,759
we have the three tasks of first

00:01:34,000 --> 00:01:37,280
improving security

00:01:35,759 --> 00:01:40,079
building observability for our

00:01:37,280 --> 00:01:42,960
microservices and then figuring out how

00:01:40,079 --> 00:01:44,960
to dynamically manage traffic now

00:01:42,960 --> 00:01:46,960
improving security we want to do

00:01:44,960 --> 00:01:48,399
by being able to apply fine-grained

00:01:46,960 --> 00:01:50,640
authorization and

00:01:48,399 --> 00:01:53,119
encryption we want to implement mutual

00:01:50,640 --> 00:01:55,520
tls between all the microservices

00:01:53,119 --> 00:01:56,719
because we're running in a zero trust

00:01:55,520 --> 00:01:59,360
environment

00:01:56,719 --> 00:02:00,880
second we need observability we want to

00:01:59,360 --> 00:02:02,560
be able to collect metrics collect

00:02:00,880 --> 00:02:04,960
distributed traces logs

00:02:02,560 --> 00:02:06,320
we want to be able to audit our system

00:02:04,960 --> 00:02:08,000
and most importantly we want to be able

00:02:06,320 --> 00:02:09,200
to understand the topology of our

00:02:08,000 --> 00:02:11,200
microservices

00:02:09,200 --> 00:02:12,720
in order to unravel the complexity and

00:02:11,200 --> 00:02:15,520
make improvements

00:02:12,720 --> 00:02:17,280
and finally we want to implement dynamic

00:02:15,520 --> 00:02:19,360
traffic management

00:02:17,280 --> 00:02:21,120
we want to implement service failover

00:02:19,360 --> 00:02:23,040
path-based routing traffic splitting and

00:02:21,120 --> 00:02:25,040
shifting and various deployment

00:02:23,040 --> 00:02:26,400
strategies like canary deploys for

00:02:25,040 --> 00:02:28,480
instance because

00:02:26,400 --> 00:02:31,440
we want to deploy new versions of our

00:02:28,480 --> 00:02:33,920
software with zero downtime

00:02:31,440 --> 00:02:36,000
well how can we achieve that i think in

00:02:33,920 --> 00:02:38,080
a classic scenario we could just go to

00:02:36,000 --> 00:02:40,400
the software engineering teams

00:02:38,080 --> 00:02:42,560
and ask them to just start working on

00:02:40,400 --> 00:02:44,959
that improve security by implementing

00:02:42,560 --> 00:02:46,879
mtls in every single endpoint of all of

00:02:44,959 --> 00:02:48,800
your microservices

00:02:46,879 --> 00:02:50,000
please implement observability by

00:02:48,800 --> 00:02:53,519
instrumenting logging

00:02:50,000 --> 00:02:56,160
metrics traces send them to a service

00:02:53,519 --> 00:02:58,159
and then we can manage traffic by

00:02:56,160 --> 00:02:59,200
implementing client side retry logic

00:02:58,159 --> 00:03:01,360
circuit breaking

00:02:59,200 --> 00:03:04,000
but that's a lot of work to ask from

00:03:01,360 --> 00:03:06,879
engineering teams that are already busy

00:03:04,000 --> 00:03:08,000
implementing bookstore specific business

00:03:06,879 --> 00:03:10,879
logic

00:03:08,000 --> 00:03:11,519
now they could leverage libraries that

00:03:10,879 --> 00:03:13,920
exist

00:03:11,519 --> 00:03:15,280
to implement most of those features a

00:03:13,920 --> 00:03:17,519
few of them come to mind

00:03:15,280 --> 00:03:20,159
we can use twitter's finagle or netflix

00:03:17,519 --> 00:03:23,440
historics or google stubby

00:03:20,159 --> 00:03:25,920
but those tend to be language specific

00:03:23,440 --> 00:03:28,159
and oftentimes we also need to

00:03:25,920 --> 00:03:32,080
understand how those libraries work

00:03:28,159 --> 00:03:35,120
and it's not necessarily a easy or

00:03:32,080 --> 00:03:37,760
quick effort so we

00:03:35,120 --> 00:03:39,840
don't necessarily want every engineer to

00:03:37,760 --> 00:03:42,480
become a security and encryption or

00:03:39,840 --> 00:03:43,920
mtls expert we definitely don't want to

00:03:42,480 --> 00:03:45,519
re-implement retry

00:03:43,920 --> 00:03:48,000
circuit breaking or really any other

00:03:45,519 --> 00:03:49,680
feature in every product in every

00:03:48,000 --> 00:03:51,920
language we know this is going to lead

00:03:49,680 --> 00:03:54,560
to varying degrees of quality

00:03:51,920 --> 00:03:55,760
of the implementations and we definitely

00:03:54,560 --> 00:03:58,640
don't want to have

00:03:55,760 --> 00:03:59,280
various configurations depending on the

00:03:58,640 --> 00:04:02,080
team

00:03:59,280 --> 00:04:03,920
and we don't want to have each team be

00:04:02,080 --> 00:04:06,879
responsible to manage their own

00:04:03,920 --> 00:04:08,400
certificate rotation or certificate

00:04:06,879 --> 00:04:09,040
distribution that's going to end up in

00:04:08,400 --> 00:04:10,799
very

00:04:09,040 --> 00:04:12,879
many different techniques and

00:04:10,799 --> 00:04:13,760
inconsistency and security because of

00:04:12,879 --> 00:04:15,439
that

00:04:13,760 --> 00:04:16,959
what we want instead is engineers to

00:04:15,439 --> 00:04:18,000
focus on the core features of the

00:04:16,959 --> 00:04:20,079
product which is

00:04:18,000 --> 00:04:21,680
a bookstore and we also want to have a

00:04:20,079 --> 00:04:22,720
homogenous security observability

00:04:21,680 --> 00:04:24,800
traffic management for

00:04:22,720 --> 00:04:26,080
every product and any language that

00:04:24,800 --> 00:04:29,360
we're using in our

00:04:26,080 --> 00:04:30,160
company and finally we want to have a

00:04:29,360 --> 00:04:31,840
system

00:04:30,160 --> 00:04:33,680
that can centrally manage all

00:04:31,840 --> 00:04:34,639
configurations so configuration can be

00:04:33,680 --> 00:04:38,400
reviewed

00:04:34,639 --> 00:04:41,120
audited etc how do we achieve that

00:04:38,400 --> 00:04:42,080
well i believe that all those features

00:04:41,120 --> 00:04:44,960
can be given to

00:04:42,080 --> 00:04:45,840
us by a service mesh the service mesh

00:04:44,960 --> 00:04:47,919
can be

00:04:45,840 --> 00:04:50,160
that infrastructure that will give us

00:04:47,919 --> 00:04:53,120
all those features without having to ask

00:04:50,160 --> 00:04:55,360
all the engineers to commit extra time

00:04:53,120 --> 00:04:57,120
to build those features out

00:04:55,360 --> 00:04:58,639
let's talk about a service mesh let's

00:04:57,120 --> 00:05:01,840
define it

00:04:58,639 --> 00:05:04,560
i'm going to use a few references here

00:05:01,840 --> 00:05:05,440
i love lee calcutt's book on istio up

00:05:04,560 --> 00:05:07,280
and running

00:05:05,440 --> 00:05:09,199
william morgan from buoyant wrote an

00:05:07,280 --> 00:05:10,000
excellent article on what a service mesh

00:05:09,199 --> 00:05:12,240
is and why you need

00:05:10,000 --> 00:05:14,400
one and of course red hat's blog on

00:05:12,240 --> 00:05:16,720
what's a service mesh is excellent

00:05:14,400 --> 00:05:17,840
so to summarize those a service mesh is

00:05:16,720 --> 00:05:20,000
an l4

00:05:17,840 --> 00:05:21,120
or l7 communications infrastructure for

00:05:20,000 --> 00:05:24,720
microservices

00:05:21,120 --> 00:05:26,400
as well as monoliths now a service mesh

00:05:24,720 --> 00:05:28,240
like we talked and this is what we want

00:05:26,400 --> 00:05:30,000
it's going to shift the responsibility

00:05:28,240 --> 00:05:31,120
for much of the reliability visibility

00:05:30,000 --> 00:05:33,520
and security

00:05:31,120 --> 00:05:35,120
out of the application code and into the

00:05:33,520 --> 00:05:36,479
networking infrastructure

00:05:35,120 --> 00:05:38,160
and this is what we want we don't want

00:05:36,479 --> 00:05:38,720
to write all those features in the app

00:05:38,160 --> 00:05:40,320
code

00:05:38,720 --> 00:05:43,120
we want to shift it into the networking

00:05:40,320 --> 00:05:44,960
infrastructure which then means that

00:05:43,120 --> 00:05:46,880
the service mesh will decouple and

00:05:44,960 --> 00:05:48,720
centralize the functional

00:05:46,880 --> 00:05:50,080
responsibilities of instrumenting and

00:05:48,720 --> 00:05:51,840
operating services

00:05:50,080 --> 00:05:54,080
out of the developers and into some sort

00:05:51,840 --> 00:05:56,319
of operators so we can free up the

00:05:54,080 --> 00:05:58,400
developers to focus on the features

00:05:56,319 --> 00:06:00,319
and an operator can then take care of

00:05:58,400 --> 00:06:03,280
those extra features

00:06:00,319 --> 00:06:03,759
so to summarize and to formalize service

00:06:03,280 --> 00:06:06,080
mesh

00:06:03,759 --> 00:06:07,680
is the observable debuggable reliable

00:06:06,080 --> 00:06:09,199
and secure data plane

00:06:07,680 --> 00:06:12,160
for any programming language or

00:06:09,199 --> 00:06:14,880
framework how does that sound

00:06:12,160 --> 00:06:15,520
okay so if you wanted to cook a service

00:06:14,880 --> 00:06:17,120
mesh

00:06:15,520 --> 00:06:18,560
what would those ingredients be how do

00:06:17,120 --> 00:06:21,440
you actually make it

00:06:18,560 --> 00:06:22,880
well first of all you need a data plane

00:06:21,440 --> 00:06:24,560
for data plane we're going to be using

00:06:22,880 --> 00:06:26,000
some sort of a reverse proxy and there's

00:06:24,560 --> 00:06:26,800
quite a few of those and they're all

00:06:26,000 --> 00:06:29,360
excellent

00:06:26,800 --> 00:06:30,800
for instance envoy linker d nginx or aj

00:06:29,360 --> 00:06:33,199
proxy come to mind

00:06:30,800 --> 00:06:34,400
we're going to need a control plane for

00:06:33,199 --> 00:06:36,319
the proxy

00:06:34,400 --> 00:06:38,400
and we need some sort of an api to be

00:06:36,319 --> 00:06:40,639
able to instrument

00:06:38,400 --> 00:06:42,960
and declare the topology of the service

00:06:40,639 --> 00:06:46,400
mesh we could use crds json

00:06:42,960 --> 00:06:47,600
or smi spec for that and so the recipe

00:06:46,400 --> 00:06:48,000
we're going to use those ingredients

00:06:47,600 --> 00:06:49,520
well

00:06:48,000 --> 00:06:51,520
we're going to add the data plain

00:06:49,520 --> 00:06:54,319
component each proxy

00:06:51,520 --> 00:06:55,919
we're going to add it to each one of our

00:06:54,319 --> 00:06:57,039
payloads or binaries that are running on

00:06:55,919 --> 00:06:59,360
our kubernetes cluster

00:06:57,039 --> 00:07:01,039
so each pod on our kubernetes cluster

00:06:59,360 --> 00:07:04,240
that needs network access

00:07:01,039 --> 00:07:07,759
we'll get a sidecar with

00:07:04,240 --> 00:07:10,000
a proxy for osm that's envoy

00:07:07,759 --> 00:07:11,759
we're going to connect those proxies to

00:07:10,000 --> 00:07:13,919
a control plane

00:07:11,759 --> 00:07:14,800
which is going to tell the proxies

00:07:13,919 --> 00:07:17,120
exactly

00:07:14,800 --> 00:07:18,560
what to do by configuring them and

00:07:17,120 --> 00:07:21,199
finally we're going to apply

00:07:18,560 --> 00:07:22,160
various policies via this api this

00:07:21,199 --> 00:07:25,520
service mesh

00:07:22,160 --> 00:07:27,360
api so now i'm going to delve into this

00:07:25,520 --> 00:07:28,840
api i'm going to talk about the service

00:07:27,360 --> 00:07:32,960
mesh interface

00:07:28,840 --> 00:07:34,800
specifically so what is smi

00:07:32,960 --> 00:07:37,680
smi was something that microsoft

00:07:34,800 --> 00:07:40,880
announced in may 2019

00:07:37,680 --> 00:07:41,520
and it is a specification for service

00:07:40,880 --> 00:07:44,400
meshes

00:07:41,520 --> 00:07:45,919
that run on kubernetes this is a common

00:07:44,400 --> 00:07:48,160
standard that can be implemented by a

00:07:45,919 --> 00:07:50,879
variety of providers

00:07:48,160 --> 00:07:52,080
now what are those standards well so we

00:07:50,879 --> 00:07:54,560
have three pillars

00:07:52,080 --> 00:07:56,000
the first one is traffic policy second

00:07:54,560 --> 00:07:58,240
one is traffic telemetry

00:07:56,000 --> 00:08:00,080
and finally traffic management when we

00:07:58,240 --> 00:08:00,879
say a variety of providers what do we

00:08:00,080 --> 00:08:02,240
mean

00:08:00,879 --> 00:08:04,720
well that means that you can actually

00:08:02,240 --> 00:08:06,080
define those routing telemetry and

00:08:04,720 --> 00:08:07,919
traffic policies

00:08:06,080 --> 00:08:10,160
in an abstract way using service mesh

00:08:07,919 --> 00:08:12,400
interface and then apply it to

00:08:10,160 --> 00:08:13,680
different vendors so you use the same

00:08:12,400 --> 00:08:15,280
declaration

00:08:13,680 --> 00:08:17,039
for your service mesh features

00:08:15,280 --> 00:08:18,240
regardless of what the service mesh

00:08:17,039 --> 00:08:20,400
vendor is

00:08:18,240 --> 00:08:21,520
you can use istio you can use console or

00:08:20,400 --> 00:08:24,319
linkersy

00:08:21,520 --> 00:08:25,280
and the smi policies will remain the

00:08:24,319 --> 00:08:28,319
same

00:08:25,280 --> 00:08:30,800
allows you to declare

00:08:28,319 --> 00:08:32,959
service mesh features in a vendor

00:08:30,800 --> 00:08:36,320
neutral way

00:08:32,959 --> 00:08:38,640
and so open service mesh is one of those

00:08:36,320 --> 00:08:39,680
service meshes that supports service

00:08:38,640 --> 00:08:42,959
mesh interface

00:08:39,680 --> 00:08:44,720
in fact open service mesh

00:08:42,959 --> 00:08:46,320
implements service mesh interface

00:08:44,720 --> 00:08:49,600
natively it is

00:08:46,320 --> 00:08:51,680
not the canonical or the

00:08:49,600 --> 00:08:52,640
reference implementation of service mesh

00:08:51,680 --> 00:08:55,600
interface

00:08:52,640 --> 00:08:56,160
it is just one of the implementations

00:08:55,600 --> 00:08:58,320
and

00:08:56,160 --> 00:09:00,399
open service mesh was open sourced or

00:08:58,320 --> 00:09:03,120
announced in august of 2020

00:09:00,399 --> 00:09:05,120
and it became a cncf sandbox project in

00:09:03,120 --> 00:09:06,800
september of this year

00:09:05,120 --> 00:09:08,320
we welcome you to come and check out our

00:09:06,800 --> 00:09:12,800
github repository at

00:09:08,320 --> 00:09:16,000
github.com open service osm

00:09:12,800 --> 00:09:17,519
now let's take a look at osm now so open

00:09:16,000 --> 00:09:19,760
service mesh is a lightweight and

00:09:17,519 --> 00:09:21,440
extensible cloud native service mesh

00:09:19,760 --> 00:09:23,120
there are four principles that we

00:09:21,440 --> 00:09:25,519
embrace from the get go

00:09:23,120 --> 00:09:27,040
that have been guiding us throughout the

00:09:25,519 --> 00:09:30,399
last year of developing

00:09:27,040 --> 00:09:33,920
open service mesh first of all we want

00:09:30,399 --> 00:09:35,360
to build a service mesh in a repository

00:09:33,920 --> 00:09:37,839
which is very simple

00:09:35,360 --> 00:09:38,959
and easy to understand and contribute to

00:09:37,839 --> 00:09:41,519
this is focusing

00:09:38,959 --> 00:09:43,360
on folks that arrive at the github

00:09:41,519 --> 00:09:45,120
repository we want them to have really

00:09:43,360 --> 00:09:46,640
easy time onboarding

00:09:45,120 --> 00:09:48,720
and kind of learning from the source

00:09:46,640 --> 00:09:50,320
code second we want

00:09:48,720 --> 00:09:52,240
to make open service mesh to be

00:09:50,320 --> 00:09:53,040
effortless to install maintain and

00:09:52,240 --> 00:09:54,800
operate

00:09:53,040 --> 00:09:57,200
the focus here obviously being the

00:09:54,800 --> 00:10:00,480
operators of the service mesh

00:09:57,200 --> 00:10:02,160
and when trouble arises how do we

00:10:00,480 --> 00:10:04,160
make the troubleshooting process

00:10:02,160 --> 00:10:06,880
painless this is

00:10:04,160 --> 00:10:09,279
our aspirational goal to build tools

00:10:06,880 --> 00:10:09,600
that make it very easy to identify and

00:10:09,279 --> 00:10:11,920
fix

00:10:09,600 --> 00:10:13,760
issues within the service mesh which

00:10:11,920 --> 00:10:15,519
tends to be very complex

00:10:13,760 --> 00:10:17,440
and finally of course we want to keep it

00:10:15,519 --> 00:10:20,160
really easy to configure by leveraging

00:10:17,440 --> 00:10:23,200
service mesh interface

00:10:20,160 --> 00:10:26,040
so what are the features that we have

00:10:23,200 --> 00:10:27,360
in open service mesh well as of version

00:10:26,040 --> 00:10:28,959
0.5

00:10:27,360 --> 00:10:30,640
which points to the fact that it's not

00:10:28,959 --> 00:10:32,640
production ready just yet

00:10:30,640 --> 00:10:34,800
you can apply policies which will govern

00:10:32,640 --> 00:10:37,279
the tcp and http traffic

00:10:34,800 --> 00:10:39,279
access between the various microservices

00:10:37,279 --> 00:10:42,399
in your kubernetes cluster

00:10:39,279 --> 00:10:43,440
you can encrypt the traffic in fact open

00:10:42,399 --> 00:10:47,440
service mesh

00:10:43,440 --> 00:10:49,360
supports out of the box

00:10:47,440 --> 00:10:51,839
and only encrypted traffic will be

00:10:49,360 --> 00:10:53,279
flowing once mtls is installed

00:10:51,839 --> 00:10:56,320
and we're leveraging short-lived

00:10:53,279 --> 00:10:58,320
certificates with a self-signed ca

00:10:56,320 --> 00:11:00,160
open service mesh will start collecting

00:10:58,320 --> 00:11:01,279
traces and metrics as soon as it's

00:11:00,160 --> 00:11:03,920
installed

00:11:01,279 --> 00:11:06,079
to give you the observability that you

00:11:03,920 --> 00:11:08,800
need or we need as a cto

00:11:06,079 --> 00:11:09,760
and finally with open service mesh we

00:11:08,800 --> 00:11:11,600
can implement

00:11:09,760 --> 00:11:13,440
traffic split and traffic shifting and

00:11:11,600 --> 00:11:15,200
we're going to show you this in the demo

00:11:13,440 --> 00:11:16,880
shortly where we're going to split

00:11:15,200 --> 00:11:19,440
traffic between two different versions

00:11:16,880 --> 00:11:21,760
of bookstore

00:11:19,440 --> 00:11:22,640
all right let's take a look under the

00:11:21,760 --> 00:11:25,360
hood

00:11:22,640 --> 00:11:28,000
so here's a kubernetes cluster and we

00:11:25,360 --> 00:11:30,000
have already installed osm

00:11:28,000 --> 00:11:31,360
on the right side we see the osm

00:11:30,000 --> 00:11:33,760
controller pod

00:11:31,360 --> 00:11:36,000
and there are five top level modules

00:11:33,760 --> 00:11:38,720
inside the controller pod

00:11:36,000 --> 00:11:40,560
on the left side we see smi spec being

00:11:38,720 --> 00:11:43,600
applied to the kubernetes cluster

00:11:40,560 --> 00:11:46,800
and in the gray box we have a kubernetes

00:11:43,600 --> 00:11:49,760
service account a kubernetes pod

00:11:46,800 --> 00:11:51,360
and three containers in it now let's

00:11:49,760 --> 00:11:53,279
take a look at the smi spec

00:11:51,360 --> 00:11:55,040
so the smi spec is being applied to the

00:11:53,279 --> 00:11:57,600
kubernetes cluster using the cube cuddle

00:11:55,040 --> 00:11:58,800
command smi spec is in the form of some

00:11:57,600 --> 00:12:02,000
sort of yaml

00:11:58,800 --> 00:12:02,399
and it defines policies which explicitly

00:12:02,000 --> 00:12:05,040
allow

00:12:02,399 --> 00:12:05,760
various services to talk to each other

00:12:05,040 --> 00:12:08,639
smi

00:12:05,760 --> 00:12:10,320
is constructed in such a way where

00:12:08,639 --> 00:12:11,839
microservices that are explicitly

00:12:10,320 --> 00:12:12,800
allowed to talk to each other will be

00:12:11,839 --> 00:12:16,959
permitted

00:12:12,800 --> 00:12:18,560
if they're not if policy does not exist

00:12:16,959 --> 00:12:20,160
then they're not permitted to talk to

00:12:18,560 --> 00:12:24,079
each other now

00:12:20,160 --> 00:12:26,079
the smi spec will be consumed by the osm

00:12:24,079 --> 00:12:28,399
controller which has informers

00:12:26,079 --> 00:12:30,320
and this is represented by the orange

00:12:28,399 --> 00:12:31,600
mesh specification box which is

00:12:30,320 --> 00:12:35,680
observing the smi

00:12:31,600 --> 00:12:37,440
spec events and next

00:12:35,680 --> 00:12:39,200
we are going to take a look at the

00:12:37,440 --> 00:12:40,560
yellow box which is the web hook and

00:12:39,200 --> 00:12:43,680
injector

00:12:40,560 --> 00:12:46,240
the point of that box is to

00:12:43,680 --> 00:12:47,600
essentially intercept all the pod

00:12:46,240 --> 00:12:49,920
creation events

00:12:47,600 --> 00:12:50,800
flowing through the kubernetes cluster

00:12:49,920 --> 00:12:53,120
and augment

00:12:50,800 --> 00:12:54,800
each one of the kubernetes pods that

00:12:53,120 --> 00:12:57,200
belongs to a namespace

00:12:54,800 --> 00:12:59,519
which is in the service mesh once the

00:12:57,200 --> 00:13:02,800
kubernetes creation pod

00:12:59,519 --> 00:13:05,839
event is intercepted

00:13:02,800 --> 00:13:06,240
we are going to augment that pod spec

00:13:05,839 --> 00:13:08,959
with

00:13:06,240 --> 00:13:10,480
two new containers so the app container

00:13:08,959 --> 00:13:12,560
is the original container that's in the

00:13:10,480 --> 00:13:15,200
pod we're going to add two new ones

00:13:12,560 --> 00:13:16,560
the first one is the init container

00:13:15,200 --> 00:13:20,639
which is ephemeral

00:13:16,560 --> 00:13:24,480
the init container will instantiate

00:13:20,639 --> 00:13:26,880
or essentially apply a few iptable rules

00:13:24,480 --> 00:13:28,800
which will then route all the traffic

00:13:26,880 --> 00:13:31,440
flowing in and out of the app container

00:13:28,800 --> 00:13:32,720
through the envoy proxy the envoy proxy

00:13:31,440 --> 00:13:34,079
is the second container

00:13:32,720 --> 00:13:36,720
it's not ephemeral it's going to stay

00:13:34,079 --> 00:13:37,519
there forever the envoy proxy is a side

00:13:36,720 --> 00:13:39,600
car

00:13:37,519 --> 00:13:40,800
which is actually what adds all the

00:13:39,600 --> 00:13:43,519
features that we

00:13:40,800 --> 00:13:44,959
as the cto of the bookstore want from

00:13:43,519 --> 00:13:47,519
the service mesh

00:13:44,959 --> 00:13:48,240
the envoy proxy will augment the app

00:13:47,519 --> 00:13:50,800
container

00:13:48,240 --> 00:13:54,160
and it will add all the retry logic it

00:13:50,800 --> 00:13:57,440
will add the mtls encryption etc

00:13:54,160 --> 00:13:59,519
now the webhook plus injector module in

00:13:57,440 --> 00:14:02,720
the osm controller pod

00:13:59,519 --> 00:14:05,199
will create the envoy side car with a

00:14:02,720 --> 00:14:07,360
particular bootstrap config

00:14:05,199 --> 00:14:09,360
from the get go and that bootstrap

00:14:07,360 --> 00:14:12,480
config will contain two things

00:14:09,360 --> 00:14:13,920
the first one is the fqdn of the osm

00:14:12,480 --> 00:14:17,440
controller pod

00:14:13,920 --> 00:14:19,360
and the second one will be a mtls

00:14:17,440 --> 00:14:21,120
certificate which is very specific to

00:14:19,360 --> 00:14:23,120
the envoy proxy

00:14:21,120 --> 00:14:24,399
the fqdn is pointing to the proxy

00:14:23,120 --> 00:14:27,360
control plane

00:14:24,399 --> 00:14:29,839
and once the envoy establishes an mtls

00:14:27,360 --> 00:14:30,639
grpc connection to the proxy control

00:14:29,839 --> 00:14:33,360
plane

00:14:30,639 --> 00:14:35,440
it will present its unique certificate

00:14:33,360 --> 00:14:36,720
and then the osm controller pod will

00:14:35,440 --> 00:14:39,040
know exactly

00:14:36,720 --> 00:14:39,920
which envoy that is which part it's

00:14:39,040 --> 00:14:42,399
coming from

00:14:39,920 --> 00:14:43,519
and which app container this envoy is

00:14:42,399 --> 00:14:45,600
fronting

00:14:43,519 --> 00:14:46,639
that will allow the osm controller pod

00:14:45,600 --> 00:14:48,720
to send

00:14:46,639 --> 00:14:51,839
the exact configuration or the unique

00:14:48,720 --> 00:14:53,760
configuration needed by the envoy proxy

00:14:51,839 --> 00:14:56,240
now speaking of configuration for the

00:14:53,760 --> 00:14:58,079
envoy proxy let's take a look at the

00:14:56,240 --> 00:15:00,320
endpoint providers box which is the blue

00:14:58,079 --> 00:15:02,320
box on your screen on the right side

00:15:00,320 --> 00:15:03,519
the endpoint providers will observe the

00:15:02,320 --> 00:15:05,199
kubernetes cluster

00:15:03,519 --> 00:15:06,959
and it will provide us with a list of ip

00:15:05,199 --> 00:15:10,399
addresses and port numbers

00:15:06,959 --> 00:15:13,600
for peer envoys that are fronting

00:15:10,399 --> 00:15:16,480
other app containers so that

00:15:13,600 --> 00:15:18,480
our envoy here will know exactly what

00:15:16,480 --> 00:15:20,079
other ip addresses and port numbers to

00:15:18,480 --> 00:15:21,519
route traffic to

00:15:20,079 --> 00:15:23,360
in the middle we have a certificate

00:15:21,519 --> 00:15:25,760
manager and this is

00:15:23,360 --> 00:15:27,279
kind of an abstraction around either

00:15:25,760 --> 00:15:30,399
hashicorp vault

00:15:27,279 --> 00:15:32,399
or cert manager io or our own internal

00:15:30,399 --> 00:15:36,880
server manager or cert issuer which is

00:15:32,399 --> 00:15:40,079
based on golang's crypto x509 libraries

00:15:36,880 --> 00:15:42,399
and finally osm will also

00:15:40,079 --> 00:15:44,320
install prometheus and grafana to allow

00:15:42,399 --> 00:15:47,199
you to visualize various metrics

00:15:44,320 --> 00:15:48,880
in the cluster and also it will program

00:15:47,199 --> 00:15:51,199
envoy to send

00:15:48,880 --> 00:15:53,120
traces to a jaeger instance should you

00:15:51,199 --> 00:15:55,600
choose to do that

00:15:53,120 --> 00:15:58,959
let's take a look at summary of the five

00:15:55,600 --> 00:16:01,600
components inside the osm controller pod

00:15:58,959 --> 00:16:03,519
we talked about the proxy control plane

00:16:01,600 --> 00:16:05,360
which is where all the envoys connect to

00:16:03,519 --> 00:16:07,120
we talked about the certificate manager

00:16:05,360 --> 00:16:08,480
which is an abstraction over either

00:16:07,120 --> 00:16:10,639
hashicorp vault

00:16:08,480 --> 00:16:11,759
strip manager io or an internal sort

00:16:10,639 --> 00:16:13,199
issuer

00:16:11,759 --> 00:16:15,759
and then we talked about the endpoint

00:16:13,199 --> 00:16:17,440
providers which gives you a list of ip

00:16:15,759 --> 00:16:19,440
addresses and port numbers and finally

00:16:17,440 --> 00:16:22,079
the mesh specification which is the

00:16:19,440 --> 00:16:23,839
smi policies we have the mesh catalog

00:16:22,079 --> 00:16:25,040
which will combine the outputs of all

00:16:23,839 --> 00:16:27,040
those

00:16:25,040 --> 00:16:28,560
facilities and it will use the proxy

00:16:27,040 --> 00:16:32,560
control plane to send

00:16:28,560 --> 00:16:34,720
configuration to the various proxies

00:16:32,560 --> 00:16:36,240
and so if we were to look back at the

00:16:34,720 --> 00:16:38,320
recipe of cooking and

00:16:36,240 --> 00:16:40,320
a service mesh what would the particular

00:16:38,320 --> 00:16:41,920
recipe be for open service mesh

00:16:40,320 --> 00:16:43,440
where the data plane for open service

00:16:41,920 --> 00:16:46,560
mesh is envoy

00:16:43,440 --> 00:16:49,680
proxy the control plane is lifts go

00:16:46,560 --> 00:16:53,519
control plane which implements xds

00:16:49,680 --> 00:16:56,079
and of course we're using the smi sdk

00:16:53,519 --> 00:16:57,680
the api that we use of course is service

00:16:56,079 --> 00:16:59,279
mesh interface

00:16:57,680 --> 00:17:01,759
which open service mesh implements that

00:16:59,279 --> 00:17:01,759
natively

00:17:03,680 --> 00:17:09,039
all right now let's take a look at the

00:17:05,919 --> 00:17:12,880
demonstration of open service mesh

00:17:09,039 --> 00:17:15,360
first let me tell you about the various

00:17:12,880 --> 00:17:16,720
components in my demonstration here in

00:17:15,360 --> 00:17:19,039
the middle we have a bookstore

00:17:16,720 --> 00:17:20,640
this is one microservice which

00:17:19,039 --> 00:17:23,679
essentially is a server

00:17:20,640 --> 00:17:25,280
which you can buy books from using just

00:17:23,679 --> 00:17:27,039
http get

00:17:25,280 --> 00:17:28,880
top left of our screen we have a book

00:17:27,039 --> 00:17:32,320
buyer this is an infinite loop

00:17:28,880 --> 00:17:35,200
of a service which will be http get

00:17:32,320 --> 00:17:36,880
in books from the bookstore and in the

00:17:35,200 --> 00:17:38,320
top right we have a book warehouse

00:17:36,880 --> 00:17:40,720
so when the bookstore runs out of books

00:17:38,320 --> 00:17:42,720
it will be http get

00:17:40,720 --> 00:17:44,000
getting books from the book warehouse

00:17:42,720 --> 00:17:45,520
and we're going to be surprised to find

00:17:44,000 --> 00:17:46,320
out on the bottom left corner there's a

00:17:45,520 --> 00:17:49,440
book thief

00:17:46,320 --> 00:17:52,400
that service is also in an infinite loop

00:17:49,440 --> 00:17:54,080
performing http get on the bookstore and

00:17:52,400 --> 00:17:56,000
also buying books

00:17:54,080 --> 00:17:58,000
what we want to do first of all is we

00:17:56,000 --> 00:17:58,720
want to apply a policy that blocks the

00:17:58,000 --> 00:18:01,039
book thief

00:17:58,720 --> 00:18:02,799
from purchasing books from the bookstore

00:18:01,039 --> 00:18:05,120
and second we're going to want to

00:18:02,799 --> 00:18:06,240
deploy a new version of bookstore we

00:18:05,120 --> 00:18:09,679
want to deploy book

00:18:06,240 --> 00:18:12,720
store v2 without experiencing any

00:18:09,679 --> 00:18:14,559
downtime without the book buyer noticing

00:18:12,720 --> 00:18:16,799
and let's take a look at how we can do

00:18:14,559 --> 00:18:16,799
that

00:18:18,080 --> 00:18:24,880
all right and now let's take a look at a

00:18:21,600 --> 00:18:27,360
demo of open service mesh

00:18:24,880 --> 00:18:29,679
so first i'm going to explain what we

00:18:27,360 --> 00:18:32,880
are seeing on the screen here

00:18:29,679 --> 00:18:34,880
first of all on the right side

00:18:32,880 --> 00:18:35,919
you will see that i have my terminal

00:18:34,880 --> 00:18:38,480
window

00:18:35,919 --> 00:18:39,679
and it's essentially issuing the cube

00:18:38,480 --> 00:18:43,280
curl get pods

00:18:39,679 --> 00:18:45,120
command in an infinite loop

00:18:43,280 --> 00:18:46,880
we have the various namespaces book

00:18:45,120 --> 00:18:48,480
buyer bookstore book thief book

00:18:46,880 --> 00:18:51,919
warehouse those are all the

00:18:48,480 --> 00:18:55,120
actors in my service mesh and

00:18:51,919 --> 00:18:58,000
you will also see that

00:18:55,120 --> 00:19:00,160
we have in the column ready the number

00:18:58,000 --> 00:19:03,280
of containers of each pod

00:19:00,160 --> 00:19:05,919
they all have only one container because

00:19:03,280 --> 00:19:07,440
none of those have really been joined to

00:19:05,919 --> 00:19:08,400
the service mesh which i've already

00:19:07,440 --> 00:19:11,360
installed

00:19:08,400 --> 00:19:12,080
so i do have osm controller running and

00:19:11,360 --> 00:19:13,760
um

00:19:12,080 --> 00:19:15,679
it's ready to go but like i said none of

00:19:13,760 --> 00:19:18,880
those namespaces have been

00:19:15,679 --> 00:19:22,960
joined to the service mesh uh just

00:19:18,880 --> 00:19:25,840
yet all right um yeah and so

00:19:22,960 --> 00:19:28,080
we're going to issue various commands in

00:19:25,840 --> 00:19:29,760
my other terminal on the bottom window

00:19:28,080 --> 00:19:32,880
uh that's where we're going to be

00:19:29,760 --> 00:19:36,160
editing the various yaml files uh

00:19:32,880 --> 00:19:38,960
smi spec we're going to execute

00:19:36,160 --> 00:19:39,520
shell commands i do have port forwarding

00:19:38,960 --> 00:19:42,799
running

00:19:39,520 --> 00:19:45,280
which is going to allow us to

00:19:42,799 --> 00:19:46,320
see all the various windows on the left

00:19:45,280 --> 00:19:48,240
side

00:19:46,320 --> 00:19:49,520
so on the left side we have uh port

00:19:48,240 --> 00:19:50,720
forwarding like i said from the book

00:19:49,520 --> 00:19:53,919
buyer pod

00:19:50,720 --> 00:19:55,360
the book thief and the bookstore the the

00:19:53,919 --> 00:19:58,880
book thief is

00:19:55,360 --> 00:20:00,720
much like the book buyer also obtaining

00:19:58,880 --> 00:20:01,120
books from the bookstore in an infinite

00:20:00,720 --> 00:20:06,880
loop

00:20:01,120 --> 00:20:09,280
here's bookstore v1 and bookstore v2

00:20:06,880 --> 00:20:10,720
and like i said we're going to be

00:20:09,280 --> 00:20:14,159
watching the

00:20:10,720 --> 00:20:17,600
counts of books increase and

00:20:14,159 --> 00:20:20,080
over time we're going to

00:20:17,600 --> 00:20:21,200
make sure that book thief eventually

00:20:20,080 --> 00:20:23,520
stops

00:20:21,200 --> 00:20:24,880
purchasing books all right so first i

00:20:23,520 --> 00:20:28,640
want to show you

00:20:24,880 --> 00:20:31,840
using a pcapp file that

00:20:28,640 --> 00:20:33,440
the book store commands or bookstore

00:20:31,840 --> 00:20:36,159
http get calls

00:20:33,440 --> 00:20:37,919
are not encrypted so i want to show you

00:20:36,159 --> 00:20:40,559
by using tcp dump

00:20:37,919 --> 00:20:41,280
that the traffic uh flying or flowing

00:20:40,559 --> 00:20:43,679
from

00:20:41,280 --> 00:20:45,120
book buyer to bookstore is not yet

00:20:43,679 --> 00:20:46,720
encrypted

00:20:45,120 --> 00:20:48,799
because like i said we haven't joined

00:20:46,720 --> 00:20:50,080
those namespaces to the service mesh

00:20:48,799 --> 00:20:51,600
so i'm going to capture a little bit of

00:20:50,080 --> 00:20:52,799
traffic i'm going to open it in

00:20:51,600 --> 00:20:56,080
wireshark

00:20:52,799 --> 00:20:58,320
and browse through the traffic here

00:20:56,080 --> 00:20:59,280
to show you here's one of the get

00:20:58,320 --> 00:21:02,320
requests

00:20:59,280 --> 00:21:05,440
so as you can see uh we have uh

00:21:02,320 --> 00:21:08,799
the get uh request from

00:21:05,440 --> 00:21:09,120
book buyer to bookstore and the traffic

00:21:08,799 --> 00:21:12,400
is

00:21:09,120 --> 00:21:13,919
not encrypted now uh

00:21:12,400 --> 00:21:15,120
i would like to encrypt the traffic

00:21:13,919 --> 00:21:16,000
that's the first thing that we want to

00:21:15,120 --> 00:21:18,640
do

00:21:16,000 --> 00:21:20,640
we want to make sure that since we're

00:21:18,640 --> 00:21:23,120
running in a zero trust networking

00:21:20,640 --> 00:21:24,400
environment we want to encrypt all that

00:21:23,120 --> 00:21:28,480
traffic

00:21:24,400 --> 00:21:32,000
so for that purpose we're going to join

00:21:28,480 --> 00:21:33,520
the namespaces into the service mesh

00:21:32,000 --> 00:21:35,120
here's the script that i've prepared

00:21:33,520 --> 00:21:38,400
we're going to use osm

00:21:35,120 --> 00:21:39,360
namespace add cli command we're going to

00:21:38,400 --> 00:21:43,600
issue that command

00:21:39,360 --> 00:21:46,240
for all of the namespaces that we have

00:21:43,600 --> 00:21:47,679
it's also important to mention that

00:21:46,240 --> 00:21:50,240
we're going to apply this config

00:21:47,679 --> 00:21:53,120
map to open service mesh which is going

00:21:50,240 --> 00:21:56,640
to switch osm controller into permissive

00:21:53,120 --> 00:21:59,600
traffic policy mode that means that

00:21:56,640 --> 00:22:01,120
we're not going to be mutating any of

00:21:59,600 --> 00:22:03,600
the traffic patterns

00:22:01,120 --> 00:22:04,320
we'll simply observe we're not going to

00:22:03,600 --> 00:22:07,840
be

00:22:04,320 --> 00:22:10,799
blocking traffic with smi policies

00:22:07,840 --> 00:22:12,080
that will come later and now one thing

00:22:10,799 --> 00:22:13,760
that i need to tell you about is the

00:22:12,080 --> 00:22:17,200
rolling restart script

00:22:13,760 --> 00:22:18,640
uh because uh we have a few existing

00:22:17,200 --> 00:22:20,880
uh pods already running we're gonna have

00:22:18,640 --> 00:22:22,559
to issue cube cuddle roll out restart

00:22:20,880 --> 00:22:26,320
for all the deployments

00:22:22,559 --> 00:22:28,320
which will restart the existing pods

00:22:26,320 --> 00:22:30,240
those existing pods will be terminated

00:22:28,320 --> 00:22:33,840
new pods will be created

00:22:30,240 --> 00:22:35,760
and there there those new pods are going

00:22:33,840 --> 00:22:38,880
to be augmented with

00:22:35,760 --> 00:22:42,159
um a non-voice eye proxy

00:22:38,880 --> 00:22:45,760
let me run the script quickly and let's

00:22:42,159 --> 00:22:48,880
take a look at what happens to the

00:22:45,760 --> 00:22:51,760
pods as we're restarting

00:22:48,880 --> 00:22:53,200
those deployments you'll see that pods

00:22:51,760 --> 00:22:56,559
with one container

00:22:53,200 --> 00:22:59,600
are being terminated and instead

00:22:56,559 --> 00:23:01,919
we're creating new pods with

00:22:59,600 --> 00:23:03,840
two containers two containers because we

00:23:01,919 --> 00:23:06,320
have not only the original

00:23:03,840 --> 00:23:07,039
binary the original payload but we also

00:23:06,320 --> 00:23:10,159
now have

00:23:07,039 --> 00:23:13,679
the envoy sidecar

00:23:10,159 --> 00:23:15,440
which is where all the new features are

00:23:13,679 --> 00:23:18,000
going to be coming from

00:23:15,440 --> 00:23:19,039
i do need to now restart my port

00:23:18,000 --> 00:23:21,919
forwarding scripts

00:23:19,039 --> 00:23:23,440
to port forward to the newly created

00:23:21,919 --> 00:23:27,440
pods

00:23:23,440 --> 00:23:31,840
and now we should see again the accounts

00:23:27,440 --> 00:23:34,320
of books purchased or books stolen

00:23:31,840 --> 00:23:37,120
start to increase it starts from zero

00:23:34,320 --> 00:23:40,159
because those are brand new pods

00:23:37,120 --> 00:23:42,400
like we said already all right

00:23:40,159 --> 00:23:44,320
so here it is now we have all those

00:23:42,400 --> 00:23:46,400
spots joined to the service mesh

00:23:44,320 --> 00:23:47,440
and that's proven by the fact that we

00:23:46,400 --> 00:23:50,240
have two

00:23:47,440 --> 00:23:51,520
pods two containers in there now i want

00:23:50,240 --> 00:23:52,320
to show you that the traffic is

00:23:51,520 --> 00:23:54,240
encrypted

00:23:52,320 --> 00:23:55,840
i'm going to go ahead and do another

00:23:54,240 --> 00:23:57,760
packet capture

00:23:55,840 --> 00:23:59,760
just a little bit of traffic i'm going

00:23:57,760 --> 00:24:01,440
to open that traffic

00:23:59,760 --> 00:24:03,760
which i'm going to gather with tcp dump

00:24:01,440 --> 00:24:05,919
obviously i'm going to open that

00:24:03,760 --> 00:24:08,400
pcap file in wireshark and we're going

00:24:05,919 --> 00:24:09,600
to again try to find those http get

00:24:08,400 --> 00:24:12,880
requests

00:24:09,600 --> 00:24:16,080
but of course because now those pods are

00:24:12,880 --> 00:24:19,520
part of the service mesh part of osm and

00:24:16,080 --> 00:24:21,360
we have enabled mtls already

00:24:19,520 --> 00:24:24,320
we're going to have real hard time

00:24:21,360 --> 00:24:26,000
finding those http get requests

00:24:24,320 --> 00:24:28,080
because everything is encrypted so we

00:24:26,000 --> 00:24:31,600
can see the source and destination

00:24:28,080 --> 00:24:34,400
from book buyer to bookstore v1

00:24:31,600 --> 00:24:35,919
but like i said it's not going to be

00:24:34,400 --> 00:24:38,480
possible to view the payload

00:24:35,919 --> 00:24:39,760
here's here are the packets all we can

00:24:38,480 --> 00:24:41,679
see is the fact that they have been

00:24:39,760 --> 00:24:45,120
encrypted with

00:24:41,679 --> 00:24:48,320
tlsv 1.2 and we can no longer

00:24:45,120 --> 00:24:51,039
see the body of the request

00:24:48,320 --> 00:24:52,000
i'm going to switch gears now and show

00:24:51,039 --> 00:24:55,200
you

00:24:52,000 --> 00:24:58,880
what we have done with jaeger

00:24:55,200 --> 00:25:02,240
so we are collecting traces

00:24:58,880 --> 00:25:04,480
and you can see that jaeger here is

00:25:02,240 --> 00:25:06,000
visualizing the topology of our service

00:25:04,480 --> 00:25:08,320
mesh

00:25:06,000 --> 00:25:09,919
i have zoomed in so it's visible on the

00:25:08,320 --> 00:25:13,120
screen and we have

00:25:09,919 --> 00:25:14,000
book buyer and book thief both fetching

00:25:13,120 --> 00:25:17,039
books from bookstore

00:25:14,000 --> 00:25:20,080
v1 and bookstore v1 is replenishing

00:25:17,039 --> 00:25:23,760
books from book warehouse

00:25:20,080 --> 00:25:26,000
this comes in with open

00:25:23,760 --> 00:25:27,120
service mesh pre-installed and so now

00:25:26,000 --> 00:25:29,120
we're going to pretend that we're

00:25:27,120 --> 00:25:30,480
surprised that we're seeing book thief

00:25:29,120 --> 00:25:32,320
we're not happy with the fact that book

00:25:30,480 --> 00:25:35,760
thief is also purchasing books

00:25:32,320 --> 00:25:38,880
from bookstore v1 and the next

00:25:35,760 --> 00:25:42,159
goal of our exercise is going to be to

00:25:38,880 --> 00:25:45,760
block that particular traffic going from

00:25:42,159 --> 00:25:48,559
book thief to bookstore v1

00:25:45,760 --> 00:25:49,039
all right so we discovered that there's

00:25:48,559 --> 00:25:50,880
this

00:25:49,039 --> 00:25:52,159
bad actor called book thief and it's

00:25:50,880 --> 00:25:55,520
already stolen

00:25:52,159 --> 00:25:56,080
111 books and we want to prevent it from

00:25:55,520 --> 00:25:58,000
continuing

00:25:56,080 --> 00:26:00,240
to do that we want to stop it from

00:25:58,000 --> 00:26:01,679
buying books from v1 and v2

00:26:00,240 --> 00:26:03,279
and so for that purpose we're going to

00:26:01,679 --> 00:26:06,080
apply um a bunch of

00:26:03,279 --> 00:26:06,799
smi policies i'm going to run the script

00:26:06,080 --> 00:26:09,279
which is going to

00:26:06,799 --> 00:26:10,000
apply the policies and we're going we're

00:26:09,279 --> 00:26:12,000
going to

00:26:10,000 --> 00:26:15,279
kind of instantly see that book thief's

00:26:12,000 --> 00:26:18,240
uh number of books stolen will

00:26:15,279 --> 00:26:18,559
freeze at a given number and i'm going

00:26:18,240 --> 00:26:22,240
to

00:26:18,559 --> 00:26:24,880
walk you through now what i just did

00:26:22,240 --> 00:26:25,760
let's take a look at specifically the

00:26:24,880 --> 00:26:29,039
deploy

00:26:25,760 --> 00:26:32,159
traffic target policy

00:26:29,039 --> 00:26:35,360
so like i said uh this is an smi policy

00:26:32,159 --> 00:26:35,840
called traffic target and we're going to

00:26:35,360 --> 00:26:39,120
take a

00:26:35,840 --> 00:26:40,799
look at this piece of yaml and

00:26:39,120 --> 00:26:42,559
in particular we're going to take a look

00:26:40,799 --> 00:26:45,039
at the

00:26:42,559 --> 00:26:45,679
source and destination source being book

00:26:45,039 --> 00:26:47,200
buyer

00:26:45,679 --> 00:26:48,960
or the service account of book buyer

00:26:47,200 --> 00:26:52,080
destination is bookstore

00:26:48,960 --> 00:26:55,440
v1 specifically and now

00:26:52,080 --> 00:26:58,159
uh the reason um we

00:26:55,440 --> 00:26:59,760
are not no longer seeing uh books stolen

00:26:58,159 --> 00:27:01,840
increases because book thief is

00:26:59,760 --> 00:27:05,600
commented out in this policy

00:27:01,840 --> 00:27:06,640
essentially book thief is not explicitly

00:27:05,600 --> 00:27:08,400
allowed

00:27:06,640 --> 00:27:11,440
like book buyer to communicate with

00:27:08,400 --> 00:27:14,480
bookstore which means it is blocked

00:27:11,440 --> 00:27:15,200
this is how traffic target works and

00:27:14,480 --> 00:27:18,840
there it is

00:27:15,200 --> 00:27:21,840
uh book thief is no longer able to steal

00:27:18,840 --> 00:27:21,840
books

00:27:21,919 --> 00:27:25,760
and finally i want to show you traffic

00:27:24,000 --> 00:27:26,960
split let's take a look at this policy

00:27:25,760 --> 00:27:30,240
here is deploy

00:27:26,960 --> 00:27:33,200
traffic split so um here's the yaml

00:27:30,240 --> 00:27:34,000
for the traffic split smi policy what

00:27:33,200 --> 00:27:36,480
you see is

00:27:34,000 --> 00:27:37,039
that uh essentially traffic that is uh

00:27:36,480 --> 00:27:39,039
going to

00:27:37,039 --> 00:27:41,360
the bookstore service will be split

00:27:39,039 --> 00:27:43,360
between bookstore v100

00:27:41,360 --> 00:27:44,880
and bookstore v2 right now zero percent

00:27:43,360 --> 00:27:47,120
goes to that one

00:27:44,880 --> 00:27:48,240
so i'm going to tweak that i'm going to

00:27:47,120 --> 00:27:51,520
change

00:27:48,240 --> 00:27:54,880
traffic to 5050 split between v1 and v2

00:27:51,520 --> 00:27:58,000
to save this and apply it

00:27:54,880 --> 00:28:01,440
and so what you will notice is that

00:27:58,000 --> 00:28:02,559
traffic flowing between book buyer and

00:28:01,440 --> 00:28:05,600
book thief

00:28:02,559 --> 00:28:09,200
will eventually start to uh

00:28:05,600 --> 00:28:12,799
be split equally between v1 and v2

00:28:09,200 --> 00:28:17,120
and here is grafana to help us

00:28:12,799 --> 00:28:21,120
look at the various metrics that

00:28:17,120 --> 00:28:24,159
we can observe allow me to

00:28:21,120 --> 00:28:25,440
tweak the ui here to start looking at

00:28:24,159 --> 00:28:27,120
metrics

00:28:25,440 --> 00:28:29,600
and there we go already we're seeing the

00:28:27,120 --> 00:28:30,080
book buyer is starting to purchase books

00:28:29,600 --> 00:28:33,440
from

00:28:30,080 --> 00:28:35,840
bookstore v2 as well as v1 and if we

00:28:33,440 --> 00:28:39,440
refresh grafana we're starting to see

00:28:35,840 --> 00:28:40,720
success counts now for traffic from book

00:28:39,440 --> 00:28:45,279
buyer to

00:28:40,720 --> 00:28:48,000
bookstore v2 as well

00:28:45,279 --> 00:28:49,120
and if we decide that uh bookstore v2 is

00:28:48,000 --> 00:28:50,399
doing really well

00:28:49,120 --> 00:28:52,399
everything is looking great i'm going to

00:28:50,399 --> 00:28:55,440
change it to 100 of the traffic going to

00:28:52,399 --> 00:28:58,320
bookstore v2 i'm going to deploy this

00:28:55,440 --> 00:28:59,039
and in a second we're going to see that

00:28:58,320 --> 00:29:01,120
uh books

00:28:59,039 --> 00:29:03,880
purchased from bookstore v1 are going to

00:29:01,120 --> 00:29:06,640
freeze at

00:29:03,880 --> 00:29:08,000
150 something and

00:29:06,640 --> 00:29:10,320
all of the traffic is going to be

00:29:08,000 --> 00:29:12,320
flowing to bookstore v2

00:29:10,320 --> 00:29:14,159
we're already seeing the number of

00:29:12,320 --> 00:29:17,600
success counts

00:29:14,159 --> 00:29:20,960
increase all right next

00:29:17,600 --> 00:29:23,360
i would like to very quickly show you

00:29:20,960 --> 00:29:24,559
how to get to the source code of open

00:29:23,360 --> 00:29:27,679
service mesh

00:29:24,559 --> 00:29:29,760
and read write contribute

00:29:27,679 --> 00:29:30,880
if you can first of all we're going to

00:29:29,760 --> 00:29:32,960
start with the

00:29:30,880 --> 00:29:34,399
open service mesh design and all the

00:29:32,960 --> 00:29:37,679
interfaces that we've created

00:29:34,399 --> 00:29:41,440
to make this extensible the design

00:29:37,679 --> 00:29:44,320
md file contains all of the information

00:29:41,440 --> 00:29:47,440
you would need to get you started

00:29:44,320 --> 00:29:47,840
you i highly recommend you go through

00:29:47,440 --> 00:29:50,880
that

00:29:47,840 --> 00:29:53,840
to understand how open service mesh

00:29:50,880 --> 00:29:54,640
works and how service meshes in general

00:29:53,840 --> 00:29:56,880
work

00:29:54,640 --> 00:29:58,080
i think that you're going to find it

00:29:56,880 --> 00:30:00,960
useful

00:29:58,080 --> 00:30:01,520
second you can actually take a look at

00:30:00,960 --> 00:30:04,640
ads

00:30:01,520 --> 00:30:08,240
stream that go so this is the grpc

00:30:04,640 --> 00:30:12,240
entry point for all on voice this is how

00:30:08,240 --> 00:30:16,320
how all envoy proxies will connect

00:30:12,240 --> 00:30:18,320
to the control plane and um essentially

00:30:16,320 --> 00:30:20,559
this is the the go routine that would

00:30:18,320 --> 00:30:23,520
start when a new proxy connects to it

00:30:20,559 --> 00:30:25,919
this is a good entry point to get you

00:30:23,520 --> 00:30:27,520
going to help you understand

00:30:25,919 --> 00:30:29,760
what happens when an envoy proxy

00:30:27,520 --> 00:30:33,440
connects how we

00:30:29,760 --> 00:30:36,880
issue all the discovery responses

00:30:33,440 --> 00:30:38,480
how we construct the protobuffers they

00:30:36,880 --> 00:30:41,760
configure the on voice

00:30:38,480 --> 00:30:45,360
and what that configuration is based on

00:30:41,760 --> 00:30:48,399
i highly advise you start with the ads

00:30:45,360 --> 00:30:51,520
stream.go file

00:30:48,399 --> 00:30:52,320
another interesting kind of piece of

00:30:51,520 --> 00:30:54,559
information

00:30:52,320 --> 00:30:56,080
that you can get you going is looking at

00:30:54,559 --> 00:31:00,000
the injector

00:30:56,080 --> 00:31:02,559
or the patch.go file this is essentially

00:31:00,000 --> 00:31:03,360
how the web hook in open service mesh

00:31:02,559 --> 00:31:06,399
works

00:31:03,360 --> 00:31:10,640
it will show you how we augment

00:31:06,399 --> 00:31:12,960
the pod spec to add the bootstrap config

00:31:10,640 --> 00:31:13,919
for the envoy proxy how to add the envoy

00:31:12,960 --> 00:31:16,960
sidecar

00:31:13,919 --> 00:31:20,559
itself how we issue the

00:31:16,960 --> 00:31:21,120
certificate for the proxy how we create

00:31:20,559 --> 00:31:24,480
the

00:31:21,120 --> 00:31:28,480
init container etc

00:31:24,480 --> 00:31:33,200
from this function you can

00:31:28,480 --> 00:31:35,120
kind of start to drill deeper into the

00:31:33,200 --> 00:31:36,799
open service mesh repository for

00:31:35,120 --> 00:31:38,880
instance if you wanted to understand how

00:31:36,799 --> 00:31:41,519
the certificate management system works

00:31:38,880 --> 00:31:44,640
you could look into the issue

00:31:41,519 --> 00:31:44,640
certificate function

00:31:44,720 --> 00:31:49,679
and um finally you can take a look at

00:31:47,760 --> 00:31:52,799
how xds itself works

00:31:49,679 --> 00:31:53,679
by looking at the ads server that go

00:31:52,799 --> 00:31:57,039
function

00:31:53,679 --> 00:31:59,360
we've implemented essentially

00:31:57,039 --> 00:32:01,919
handlers for the endpoint discovery

00:31:59,360 --> 00:32:04,080
service cluster discovery service

00:32:01,919 --> 00:32:05,519
routes discovery listener discovery and

00:32:04,080 --> 00:32:08,080
secrets discovery

00:32:05,519 --> 00:32:08,559
and those are kind of the five pillars

00:32:08,080 --> 00:32:13,760
of the

00:32:08,559 --> 00:32:16,559
configuration for envoy proxy

00:32:13,760 --> 00:32:17,360
you can have those links available

00:32:16,559 --> 00:32:20,000
through the

00:32:17,360 --> 00:32:20,799
slides and now let's talk about the

00:32:20,000 --> 00:32:23,519
lessons

00:32:20,799 --> 00:32:25,440
learned in the process of open sourcing

00:32:23,519 --> 00:32:28,320
open service mesh

00:32:25,440 --> 00:32:30,240
i said a process because oftentimes we

00:32:28,320 --> 00:32:31,519
think of open sourcing a project as a

00:32:30,240 --> 00:32:34,320
binary event

00:32:31,519 --> 00:32:35,039
well it's not a binary event even though

00:32:34,320 --> 00:32:37,760
you might think

00:32:35,039 --> 00:32:38,720
that all it takes is just checking that

00:32:37,760 --> 00:32:40,880
box on github

00:32:38,720 --> 00:32:42,159
saying make the repo public change the

00:32:40,880 --> 00:32:45,120
visibility

00:32:42,159 --> 00:32:46,880
in fact in actuality open sourcing a

00:32:45,120 --> 00:32:49,120
project is a process

00:32:46,880 --> 00:32:50,000
in a project of in itself it's a

00:32:49,120 --> 00:32:53,200
marathon

00:32:50,000 --> 00:32:54,960
that takes a long time to run

00:32:53,200 --> 00:32:57,360
and let me take you through the steps or

00:32:54,960 --> 00:32:59,840
the process of open sourcing a project

00:32:57,360 --> 00:33:01,039
first of all preparing to open source

00:32:59,840 --> 00:33:03,679
start the preparation

00:33:01,039 --> 00:33:05,440
as early as possible first of all think

00:33:03,679 --> 00:33:07,679
about the privacy of the contributors

00:33:05,440 --> 00:33:10,399
think about your own privacy

00:33:07,679 --> 00:33:11,840
choose and set your commit email address

00:33:10,399 --> 00:33:14,320
carefully

00:33:11,840 --> 00:33:15,919
and decide whether to anonymize your

00:33:14,320 --> 00:33:18,080
email address will be available to the

00:33:15,919 --> 00:33:19,919
world after all

00:33:18,080 --> 00:33:21,120
and as far as sensitivity and

00:33:19,919 --> 00:33:24,320
mindfulness

00:33:21,120 --> 00:33:26,399
please do code comment and commit

00:33:24,320 --> 00:33:28,000
knowing that one day the entire world

00:33:26,399 --> 00:33:30,240
could be looking at this

00:33:28,000 --> 00:33:31,440
so what that means is while you're

00:33:30,240 --> 00:33:34,000
coding committing

00:33:31,440 --> 00:33:34,480
and commenting writing comments think

00:33:34,000 --> 00:33:37,760
about

00:33:34,480 --> 00:33:38,720
are you leaking secrets anything that's

00:33:37,760 --> 00:33:41,039
sensitive to your

00:33:38,720 --> 00:33:41,919
organization internally or to you

00:33:41,039 --> 00:33:44,240
privately

00:33:41,919 --> 00:33:45,440
also are you using language that may be

00:33:44,240 --> 00:33:47,919
perceived offensive

00:33:45,440 --> 00:33:48,880
to the future community and contributors

00:33:47,919 --> 00:33:51,840
that you're building

00:33:48,880 --> 00:33:52,320
think about that external folks looking

00:33:51,840 --> 00:33:54,799
into

00:33:52,320 --> 00:33:56,320
what you're creating as well and finally

00:33:54,799 --> 00:33:58,159
transparency

00:33:56,320 --> 00:33:59,760
from the early days from the get-go you

00:33:58,159 --> 00:34:02,240
should design document and make

00:33:59,760 --> 00:34:04,559
decisions with transparency in mind

00:34:02,240 --> 00:34:06,159
so that one day when a contributor

00:34:04,559 --> 00:34:08,480
arrives at your repo

00:34:06,159 --> 00:34:10,879
they can quickly answer the question of

00:34:08,480 --> 00:34:13,679
why and how certain decision was made

00:34:10,879 --> 00:34:14,800
so do document kind of how you're making

00:34:13,679 --> 00:34:17,119
decisions and

00:34:14,800 --> 00:34:18,240
put them in your public repository even

00:34:17,119 --> 00:34:21,440
before you go

00:34:18,240 --> 00:34:23,440
open source and then when the time comes

00:34:21,440 --> 00:34:25,359
for you to flip the visibility bit and

00:34:23,440 --> 00:34:27,359
to open source your project

00:34:25,359 --> 00:34:28,560
you need to kind of have answers for

00:34:27,359 --> 00:34:31,839
those two questions

00:34:28,560 --> 00:34:33,200
why and when first of all know why

00:34:31,839 --> 00:34:35,679
you're doing it

00:34:33,200 --> 00:34:37,919
for instance we open sourced open

00:34:35,679 --> 00:34:40,320
service mesh with three things in mind

00:34:37,919 --> 00:34:42,320
first of all we wanted to get advice and

00:34:40,320 --> 00:34:42,879
feedback from the other companies out

00:34:42,320 --> 00:34:45,040
there

00:34:42,879 --> 00:34:47,520
and the potential users of open service

00:34:45,040 --> 00:34:50,079
mesh very important to us

00:34:47,520 --> 00:34:51,440
second of all we wanted to provide to

00:34:50,079 --> 00:34:54,480
the world

00:34:51,440 --> 00:34:57,280
one more implementation of service mesh

00:34:54,480 --> 00:34:57,839
this is not the implementation it's just

00:34:57,280 --> 00:34:59,359
one

00:34:57,839 --> 00:35:01,119
other implementation that we want to

00:34:59,359 --> 00:35:02,960
offer and finally

00:35:01,119 --> 00:35:06,240
we wanted to collaborate with the

00:35:02,960 --> 00:35:09,599
community in a vendor neutral space

00:35:06,240 --> 00:35:12,000
uh second of course decide when it makes

00:35:09,599 --> 00:35:13,119
most sense for you to open source your

00:35:12,000 --> 00:35:16,079
project

00:35:13,119 --> 00:35:18,400
and my advice for you is to open source

00:35:16,079 --> 00:35:20,720
as soon as possible as soon as you can

00:35:18,400 --> 00:35:22,240
that will allow you to get feedback to

00:35:20,720 --> 00:35:24,320
iterate

00:35:22,240 --> 00:35:26,720
and don't wait for perfect code or

00:35:24,320 --> 00:35:30,000
perfect documentation

00:35:26,720 --> 00:35:32,480
that's hard to attain

00:35:30,000 --> 00:35:33,119
get that feedback as soon as possible

00:35:32,480 --> 00:35:35,839
but

00:35:33,119 --> 00:35:36,880
don't open source sooner than before the

00:35:35,839 --> 00:35:39,040
guard rails

00:35:36,880 --> 00:35:40,480
are ready for your newcomers what i mean

00:35:39,040 --> 00:35:42,480
by guardrail is

00:35:40,480 --> 00:35:43,839
do not open source before you have had a

00:35:42,480 --> 00:35:46,400
chance to build

00:35:43,839 --> 00:35:47,440
unit tests to add static analysis to

00:35:46,400 --> 00:35:49,599
your ci

00:35:47,440 --> 00:35:51,520
to write at least minimal documentation

00:35:49,599 --> 00:35:54,480
to help those early contributors

00:35:51,520 --> 00:35:54,960
on board to help the early contributors

00:35:54,480 --> 00:35:58,079
feel

00:35:54,960 --> 00:35:59,280
safe and feel validated when they're

00:35:58,079 --> 00:36:00,880
adding a feature

00:35:59,280 --> 00:36:03,040
that feature is not going to break the

00:36:00,880 --> 00:36:05,359
system i think that

00:36:03,040 --> 00:36:07,839
a few of those guard rails are necessary

00:36:05,359 --> 00:36:10,800
before you open source

00:36:07,839 --> 00:36:12,560
to create for a productive environment

00:36:10,800 --> 00:36:15,680
for your contributors

00:36:12,560 --> 00:36:18,560
and then long term after the project

00:36:15,680 --> 00:36:19,599
is open source and it is public a few

00:36:18,560 --> 00:36:20,480
things happen and they're very

00:36:19,599 --> 00:36:22,240
interesting to me

00:36:20,480 --> 00:36:23,760
first of all the team dynamic will

00:36:22,240 --> 00:36:25,520
change after all

00:36:23,760 --> 00:36:27,599
open sourcing a project invites the

00:36:25,520 --> 00:36:30,400
whole world to join your team

00:36:27,599 --> 00:36:31,520
and communication will change the

00:36:30,400 --> 00:36:34,880
communication channel

00:36:31,520 --> 00:36:37,280
change uh the um the time

00:36:34,880 --> 00:36:38,079
when people communicate changes and how

00:36:37,280 --> 00:36:42,720
they communicate

00:36:38,079 --> 00:36:45,520
change of course second feature velocity

00:36:42,720 --> 00:36:47,119
changes as well open sourcing and

00:36:45,520 --> 00:36:50,880
creating a new governance

00:36:47,119 --> 00:36:53,599
model will require changes to

00:36:50,880 --> 00:36:54,079
how you actually publish designs how you

00:36:53,599 --> 00:36:56,960
discuss

00:36:54,079 --> 00:36:58,480
those designs how proposals are made how

00:36:56,960 --> 00:37:01,040
you're approving prs and how you're

00:36:58,480 --> 00:37:03,760
triaging github issues

00:37:01,040 --> 00:37:05,520
reviews may slow down but that will be

00:37:03,760 --> 00:37:06,000
much more fruitful because the community

00:37:05,520 --> 00:37:08,880
will be

00:37:06,000 --> 00:37:09,520
commenting and collaborating with you

00:37:08,880 --> 00:37:12,000
and of course

00:37:09,520 --> 00:37:13,200
the queue of github issues and requests

00:37:12,000 --> 00:37:17,040
for features

00:37:13,200 --> 00:37:18,160
may grow and that's actually a feedback

00:37:17,040 --> 00:37:21,280
that

00:37:18,160 --> 00:37:21,680
i very much appreciate when folks come

00:37:21,280 --> 00:37:23,520
and

00:37:21,680 --> 00:37:26,000
tell us what they would like to see in

00:37:23,520 --> 00:37:30,400
open service mesh or when they find bugs

00:37:26,000 --> 00:37:32,560
it's a wonderful thing and finally

00:37:30,400 --> 00:37:34,960
if you see that extra feedback and those

00:37:32,560 --> 00:37:38,400
extra github issues arriving

00:37:34,960 --> 00:37:39,040
you have to monitor those and react to

00:37:38,400 --> 00:37:41,040
those

00:37:39,040 --> 00:37:42,480
also monitor all other channels not just

00:37:41,040 --> 00:37:46,400
github issues but slack

00:37:42,480 --> 00:37:48,400
emails all other channels that may exist

00:37:46,400 --> 00:37:50,720
and like i said feedback is a wonderful

00:37:48,400 --> 00:37:53,920
thing but it comes at a cost

00:37:50,720 --> 00:37:56,400
many new requests and triaging will

00:37:53,920 --> 00:37:56,960
increase the attention demand on your

00:37:56,400 --> 00:37:58,800
team

00:37:56,960 --> 00:38:00,160
and if the team is small of course that

00:37:58,800 --> 00:38:04,160
may take away from

00:38:00,160 --> 00:38:06,560
the core work all right and

00:38:04,160 --> 00:38:07,599
um now something special uh parting

00:38:06,560 --> 00:38:10,560
thoughts

00:38:07,599 --> 00:38:13,359
and the topic of uh this talk was uh how

00:38:10,560 --> 00:38:15,520
to stand on the shoulders of giants

00:38:13,359 --> 00:38:16,560
and uh this actually points me to

00:38:15,520 --> 00:38:18,800
something that's

00:38:16,560 --> 00:38:20,560
very dear to my heart and that's reading

00:38:18,800 --> 00:38:23,599
code reading code as in

00:38:20,560 --> 00:38:25,599
reading prose and i think

00:38:23,599 --> 00:38:27,520
before we even start thinking about

00:38:25,599 --> 00:38:28,960
building something or before we

00:38:27,520 --> 00:38:31,280
open source the project that we've been

00:38:28,960 --> 00:38:31,680
working on it would be a wonderful thing

00:38:31,280 --> 00:38:33,599
to

00:38:31,680 --> 00:38:35,440
go out there and research to see what

00:38:33,599 --> 00:38:36,640
prior art exists in the open source

00:38:35,440 --> 00:38:39,440
community

00:38:36,640 --> 00:38:40,079
there are amazing search tools out there

00:38:39,440 --> 00:38:42,240
to

00:38:40,079 --> 00:38:43,200
find wonderful code so i invite you to

00:38:42,240 --> 00:38:45,920
do that search

00:38:43,200 --> 00:38:47,760
for code similar to what you're building

00:38:45,920 --> 00:38:50,240
read that code to learn

00:38:47,760 --> 00:38:52,320
to build to be able to stand on the

00:38:50,240 --> 00:38:52,720
shoulders of giants who have come before

00:38:52,320 --> 00:38:55,040
you

00:38:52,720 --> 00:38:57,119
and have created something incredible

00:38:55,040 --> 00:38:59,680
and then improve that code

00:38:57,119 --> 00:39:02,320
use it and attribute back give

00:38:59,680 --> 00:39:05,200
attribution to the authors

00:39:02,320 --> 00:39:05,920
follow the rules and the licensing

00:39:05,200 --> 00:39:07,359
agreement

00:39:05,920 --> 00:39:09,200
and of course contribute back that's

00:39:07,359 --> 00:39:12,480
what open source is about

00:39:09,200 --> 00:39:14,400
push back upstream your changes

00:39:12,480 --> 00:39:15,520
and i want to point you to this uh

00:39:14,400 --> 00:39:18,240
outstanding book

00:39:15,520 --> 00:39:19,680
that diomedes spineless wrote back in

00:39:18,240 --> 00:39:22,160
00:39:19,680 --> 00:39:23,040
what a timeless piece this is called the

00:39:22,160 --> 00:39:25,520
code reading

00:39:23,040 --> 00:39:27,200
the open source perspective uh dominus

00:39:25,520 --> 00:39:30,400
pinellas will

00:39:27,200 --> 00:39:33,599
with this book will teach you how to

00:39:30,400 --> 00:39:35,839
read code find code

00:39:33,599 --> 00:39:37,280
and this book is been truly

00:39:35,839 --> 00:39:39,440
transformational for me

00:39:37,280 --> 00:39:41,119
and finally i want to encourage you to

00:39:39,440 --> 00:39:43,280
open source your projects

00:39:41,119 --> 00:39:44,960
so that that code you're going to open

00:39:43,280 --> 00:39:48,000
source so that you yourself

00:39:44,960 --> 00:39:49,359
can be someone else's giant so people

00:39:48,000 --> 00:39:51,520
can look at your code and learn

00:39:49,359 --> 00:39:52,960
from it thank you very much for

00:39:51,520 --> 00:39:54,480
attending the session

00:39:52,960 --> 00:39:56,480
please reach out you can find me on

00:39:54,480 --> 00:39:58,560
twitter you can find me on linkedin

00:39:56,480 --> 00:40:00,160
and please send me an email with any

00:39:58,560 --> 00:40:07,040
feedback you might have

00:40:00,160 --> 00:40:07,040

YouTube URL: https://www.youtube.com/watch?v=fPbrskCg0JQ


