Title: Introduction to NAND Flash Aware Hibernation-based Boot - Kyungsik Lee, LG Electronics
Publication date: 2019-09-16
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	Introduction to NAND Flash Aware Hibernation-based Boot - Kyungsik Lee, LG Electronics

Boot time is important for many consumer electronics. One of ways to reduce boot time is to use hibernation-based techniques, however adopting such an approach could cause reliability issues due to the limited lifetime of NAND flash.In this talk Kyungsik will share issues of applying hibernation-based boot techniques to consumer electronics and the challenges he faced while improving NAND flash lifetime without performance regressions and introduce new hibernation techniques for extending the lifetime of NAND flash.The presentation is based on the work he has done to develop new features on top of the mainline kernel.
Captions: 
	00:00:00,560 --> 00:00:08,340
so in this talk I'm restart with a blue

00:00:05,250 --> 00:00:11,490
tie production and cover hibernation and

00:00:08,340 --> 00:00:14,880
then I restore our nature's a proposal

00:00:11,490 --> 00:00:17,900
for our new hibernation and in this

00:00:14,880 --> 00:00:20,760
proposal I'll talk about how to improve

00:00:17,900 --> 00:00:32,520
hibernation speed and how to exchange

00:00:20,760 --> 00:00:37,430
the lifetime of fresh memory so I used

00:00:32,520 --> 00:00:43,829
to use older on navigation system my car

00:00:37,430 --> 00:00:47,090
and we're in starter car it takes if I

00:00:43,829 --> 00:00:51,059
have to wait for a minute and 30 second

00:00:47,090 --> 00:00:53,449
to use it and I think it's not a good

00:00:51,059 --> 00:00:53,449
user experience

00:00:54,170 --> 00:01:01,859
additionally there are critical step the

00:00:59,879 --> 00:01:06,900
reason for the ultimate automotive

00:01:01,859 --> 00:01:09,750
industry for example when you are put

00:01:06,900 --> 00:01:13,670
your car in two rivers emitter

00:01:09,750 --> 00:01:16,920
immediately after start and your

00:01:13,670 --> 00:01:21,479
rear-view camera system must to show you

00:01:16,920 --> 00:01:24,390
what's behind you right away and also it

00:01:21,479 --> 00:01:26,990
can be used for marketing are have you

00:01:24,390 --> 00:01:31,049
seen or one second enter boot

00:01:26,990 --> 00:01:34,710
have you seen no actually I have seen

00:01:31,049 --> 00:01:36,079
are once I can under boot on YouTube you

00:01:34,710 --> 00:01:40,530
might Google right now

00:01:36,079 --> 00:01:43,460
well it's quite impressive and as a huge

00:01:40,530 --> 00:01:43,460
motivation for me

00:01:46,390 --> 00:01:53,260
so like to mention the traditional

00:01:49,930 --> 00:01:57,550
techniques in tools we have been using

00:01:53,260 --> 00:02:00,790
to reduce boot time because some of them

00:01:57,550 --> 00:02:06,340
we cannot use for hibernation in terms

00:02:00,790 --> 00:02:11,080
of measuring the chart is a handy tool

00:02:06,340 --> 00:02:15,630
for profiling a Linux boot sequence but

00:02:11,080 --> 00:02:20,200
we cannot use this tool for hibernation

00:02:15,630 --> 00:02:22,330
and in hibernation we don't need to put

00:02:20,200 --> 00:02:28,650
a lot of effort to optimize the user

00:02:22,330 --> 00:02:28,650
space it was our maintenance burden

00:02:34,540 --> 00:02:42,170
so before we further discuss how to

00:02:38,690 --> 00:02:44,900
improve hydration bills little

00:02:42,170 --> 00:02:48,410
background for those who are not

00:02:44,900 --> 00:02:55,490
familiar with hibernations or what other

00:02:48,410 --> 00:02:57,860
hibernations first step is to suspend

00:02:55,490 --> 00:03:03,440
all the devices so that they cannot

00:02:57,860 --> 00:03:06,230
change the system state and then the

00:03:03,440 --> 00:03:09,380
system the memory Mizzy is copied and

00:03:06,230 --> 00:03:13,790
the device has a resume so that they can

00:03:09,380 --> 00:03:16,970
be written to swap space and offerin

00:03:13,790 --> 00:03:20,540
resumption or the image the video did

00:03:16,970 --> 00:03:23,840
and the system is exactly as it was

00:03:20,540 --> 00:03:29,390
before entering hibernation so basically

00:03:23,840 --> 00:03:32,840
our machines work like this way and I

00:03:29,390 --> 00:03:36,020
use this kit because world reason I use

00:03:32,840 --> 00:03:39,580
this kit is because both the suspend the

00:03:36,020 --> 00:03:42,410
resume works fine if it doesn't work

00:03:39,580 --> 00:03:45,760
then you need to put you might need to

00:03:42,410 --> 00:03:50,200
put a lot of effort in time to fix it

00:03:45,760 --> 00:04:00,170
and my work is based on their tappable

00:03:50,200 --> 00:04:02,450
the obstinance cora hibernation so it is

00:04:00,170 --> 00:04:06,410
generally known that our hibernation is

00:04:02,450 --> 00:04:09,980
the faster than cold world and code B

00:04:06,410 --> 00:04:15,770
means start or a system that is turning

00:04:09,980 --> 00:04:19,310
off so my question is how fast the fast

00:04:15,770 --> 00:04:21,320
food is compared to their colder bill so

00:04:19,310 --> 00:04:25,190
here is the result the result of shoes

00:04:21,320 --> 00:04:27,530
that are it's about or two second faster

00:04:25,190 --> 00:04:29,840
than holdable but this hydration is

00:04:27,530 --> 00:04:32,680
their upstream version and it's not

00:04:29,840 --> 00:04:32,680
optimized zero

00:04:37,710 --> 00:04:43,370
so are you as you can see there -

00:04:41,340 --> 00:04:47,039
showing is the faster than cold abode

00:04:43,370 --> 00:04:51,030
but actually it's not exactly as fast as

00:04:47,039 --> 00:04:53,490
we expected like the one second Android

00:04:51,030 --> 00:04:58,949
but but you probably not have seen those

00:04:53,490 --> 00:05:01,350
good but I have seen it and there must

00:04:58,949 --> 00:05:03,660
be someplace to improve or in their

00:05:01,350 --> 00:05:06,389
existing hibernation I mean the option

00:05:03,660 --> 00:05:10,349
hibernation so here are things that are

00:05:06,389 --> 00:05:12,630
found through an artisan test yeah the

00:05:10,349 --> 00:05:15,660
first one is their upstream hibernation

00:05:12,630 --> 00:05:22,500
is not very scalable on multi-core

00:05:15,660 --> 00:05:25,889
system is limited and the load images

00:05:22,500 --> 00:05:29,550
system loading images system takes a

00:05:25,889 --> 00:05:35,160
most of time during a boot and reducing

00:05:29,550 --> 00:05:37,560
the system the snapshot image is candied

00:05:35,160 --> 00:05:40,380
through the raster image loading so I

00:05:37,560 --> 00:05:44,699
really toward try to focus on reducing

00:05:40,380 --> 00:05:47,849
the image size and the snapshot a

00:05:44,699 --> 00:05:51,500
missile the snapshot means does not

00:05:47,849 --> 00:05:55,520
include the phases that are swap out

00:05:51,500 --> 00:05:58,280
before entering hibernation so I try to

00:05:55,520 --> 00:06:03,510
swap out as many pieces as possible

00:05:58,280 --> 00:06:07,949
before entering hibernation and also

00:06:03,510 --> 00:06:10,320
clear our page cast as well because it's

00:06:07,949 --> 00:06:14,520
really helpful to reduce the emitter

00:06:10,320 --> 00:06:18,090
size and lastly I dedicate to the pages

00:06:14,520 --> 00:06:24,720
in memory and it also helped to reduce

00:06:18,090 --> 00:06:27,599
the snapshot resize so so but it's about

00:06:24,720 --> 00:06:32,909
the duplicate the duplicating pages in

00:06:27,599 --> 00:06:35,550
memory so their first line represents

00:06:32,909 --> 00:06:40,080
represent their physical prime numbers

00:06:35,550 --> 00:06:43,080
and from 2nd to 4th then it shows their

00:06:40,080 --> 00:06:47,690
house it's issued the process of the

00:06:43,080 --> 00:06:47,690
deduplication in memory in memory and

00:06:47,720 --> 00:06:55,340
at the bottom of slide you will see a

00:06:51,440 --> 00:06:58,520
table that has entry which point to

00:06:55,340 --> 00:07:04,130
their physical prime number and there's

00:06:58,520 --> 00:07:07,820
it should copy from and to restore the

00:07:04,130 --> 00:07:14,690
page data during the during the region

00:07:07,820 --> 00:07:18,680
process and here is the resort

00:07:14,690 --> 00:07:22,880
so the Left chart shows a boot time and

00:07:18,680 --> 00:07:28,070
from their cold - cold hibernation and

00:07:22,880 --> 00:07:31,910
to optimize one it is just we have

00:07:28,070 --> 00:07:36,530
optimized by reducing the boot this

00:07:31,910 --> 00:07:38,780
essentially means size and how fast it

00:07:36,530 --> 00:07:41,870
is I mean the optimized version is a two

00:07:38,780 --> 00:07:45,260
second faster than the upstream button

00:07:41,870 --> 00:07:48,440
and think six second faster than cold

00:07:45,260 --> 00:07:50,810
boot and the right chart to choose the

00:07:48,440 --> 00:07:53,570
image size and as you can see their

00:07:50,810 --> 00:07:59,240
image size is reduced from around a nine

00:07:53,570 --> 00:08:01,280
hundred megabyte may bite to 200 so we

00:07:59,240 --> 00:08:04,450
can tell the existing population can be

00:08:01,280 --> 00:08:04,450
optimized large case

00:08:08,270 --> 00:08:16,340
so this about this is about our standing

00:08:12,710 --> 00:08:19,130
lifetime repressed memory after proofs

00:08:16,340 --> 00:08:22,490
memory becomes very powerful in embedded

00:08:19,130 --> 00:08:24,800
systems and but it has a limited

00:08:22,490 --> 00:08:28,400
lifetime and also it has a limited

00:08:24,800 --> 00:08:31,639
number of light cycle so we just can

00:08:28,400 --> 00:08:34,039
switch in able to hibernation and let it

00:08:31,639 --> 00:08:39,800
create or around the nine hundred

00:08:34,039 --> 00:08:43,300
megabyte booting time so in order to

00:08:39,800 --> 00:08:47,180
extend the right from fresh memory I

00:08:43,300 --> 00:08:50,390
here are our focus on two things the

00:08:47,180 --> 00:08:52,970
first one is try to use the raw

00:08:50,390 --> 00:08:55,850
searchable on management to reduce the

00:08:52,970 --> 00:08:58,850
write amplification and the second one

00:08:55,850 --> 00:09:03,050
is users stories based data

00:08:58,850 --> 00:09:08,720
deduplication and also to reduce the

00:09:03,050 --> 00:09:10,910
amount of energy to be written so I'm

00:09:08,720 --> 00:09:18,410
going I'm going to give details in the

00:09:10,910 --> 00:09:20,420
next slide so this is about how we

00:09:18,410 --> 00:09:24,440
reduce the right application with the

00:09:20,420 --> 00:09:28,730
blog management this are basically

00:09:24,440 --> 00:09:31,910
discipline is ensured or sequential

00:09:28,730 --> 00:09:34,850
light the children traditionally but

00:09:31,910 --> 00:09:36,980
divided into two by develop into a

00:09:34,850 --> 00:09:40,160
closer in each clause is aligned with

00:09:36,980 --> 00:09:43,880
alleged blocks tiles closer is a

00:09:40,160 --> 00:09:47,270
composable block and a blog a blog is

00:09:43,880 --> 00:09:49,610
for keyword in size and blood which

00:09:47,270 --> 00:09:51,370
closer are written sequentially in a

00:09:49,610 --> 00:09:54,130
localized structure

00:09:51,370 --> 00:09:58,300
crows are now publishing and to

00:09:54,130 --> 00:09:58,300
discarded acceptor header

00:10:01,400 --> 00:10:09,000
so not like the upstream hibernations do

00:10:04,800 --> 00:10:12,060
Bergeon has more our closer type so you

00:10:09,000 --> 00:10:16,620
might be familiar with my map and

00:10:12,060 --> 00:10:21,230
metadata closer because it has been used

00:10:16,620 --> 00:10:24,470
in observe upstream hibernation the

00:10:21,230 --> 00:10:28,380
teeter and use accountable ocean

00:10:24,470 --> 00:10:34,860
clusters are added to the new new design

00:10:28,380 --> 00:10:38,640
and example the dee doop cluster is used

00:10:34,860 --> 00:10:43,110
for D duplications and the uses counter

00:10:38,640 --> 00:10:46,320
is used for keep tracking of each block

00:10:43,110 --> 00:10:53,970
uses count and their garbage collection

00:10:46,320 --> 00:10:57,750
is used to each cluster is reclaimed and

00:10:53,970 --> 00:11:06,140
discarded and this close is useful those

00:10:57,750 --> 00:11:09,720
ways and we are still talking about

00:11:06,140 --> 00:11:14,370
hibernation that like five system but

00:11:09,720 --> 00:11:20,940
this newer person proposer has this

00:11:14,370 --> 00:11:27,330
clear this is how the partition looks

00:11:20,940 --> 00:11:31,260
like when it is used for data log

00:11:27,330 --> 00:11:36,320
management the as you can see the header

00:11:31,260 --> 00:11:42,180
is the only block overeaten every time

00:11:36,320 --> 00:11:45,750
and take a look at the Aldea closer and

00:11:42,180 --> 00:11:49,589
the cluster is composable chunk table

00:11:45,750 --> 00:11:52,350
and chunks chunks can be either

00:11:49,589 --> 00:11:56,900
compressed or uncompressed and it is

00:11:52,350 --> 00:11:56,900
they are packed into the data cluster

00:12:03,210 --> 00:12:12,720
you know this is about how we how to

00:12:06,460 --> 00:12:16,000
reduce the amount of image to be written

00:12:12,720 --> 00:12:18,670
so basically this process is a similar

00:12:16,000 --> 00:12:22,020
to the way the way we do reduce the

00:12:18,670 --> 00:12:24,880
snapshot image size but it deeply

00:12:22,020 --> 00:12:34,810
duplicates pigeon stories in that in

00:12:24,880 --> 00:12:38,260
memory so up to applied both or two

00:12:34,810 --> 00:12:40,950
things that I mentioned earlier this is

00:12:38,260 --> 00:12:44,710
a result you might be interested in the

00:12:40,950 --> 00:12:48,190
blue lines in red line because the blind

00:12:44,710 --> 00:12:51,580
represent represented or did locating in

00:12:48,190 --> 00:12:55,720
memory and the red line means are

00:12:51,580 --> 00:13:00,370
represented or duplication in stories at

00:12:55,720 --> 00:13:04,030
the very first time there the red wine

00:13:00,370 --> 00:13:09,070
red wine just are not the same but the

00:13:04,030 --> 00:13:12,430
second time or the the right size is

00:13:09,070 --> 00:13:13,930
directory matically reduce decreases as

00:13:12,430 --> 00:13:18,780
you can see at your second time and

00:13:13,930 --> 00:13:22,330
third time and the green line represents

00:13:18,780 --> 00:13:25,290
the the compressed one so it's a door

00:13:22,330 --> 00:13:25,290
then the red one

00:13:30,430 --> 00:13:38,120
well as we already expected our disaster

00:13:34,760 --> 00:13:41,930
means getting our pragma to the by their

00:13:38,120 --> 00:13:44,660
dedication process so the imaging

00:13:41,930 --> 00:13:49,150
routing speed is getting slower slower

00:13:44,660 --> 00:13:49,150
because of a more random error pattern

00:13:51,190 --> 00:13:57,560
so as you can see describe this graph

00:13:55,100 --> 00:14:06,410
shows that the image of the loading

00:13:57,560 --> 00:14:09,290
speed is getting slower each time so how

00:14:06,410 --> 00:14:11,930
to fix this problem this snap shape is

00:14:09,290 --> 00:14:14,330
getting program nted but also we need to

00:14:11,930 --> 00:14:18,290
reduce their snap change signs at the

00:14:14,330 --> 00:14:22,430
same time first of all I need to examine

00:14:18,290 --> 00:14:26,090
how this our image is pregnant at each

00:14:22,430 --> 00:14:31,040
time so I use the usage counter on each

00:14:26,090 --> 00:14:33,980
blur and use him map to visualize their

00:14:31,040 --> 00:14:37,880
whole partitions I will show you in the

00:14:33,980 --> 00:14:40,040
next slide how it looks like and what I

00:14:37,880 --> 00:14:43,280
found is that there are some data

00:14:40,040 --> 00:14:47,510
clusters which have only few blog to be

00:14:43,280 --> 00:14:49,190
used for the snapshot imagery every

00:14:47,510 --> 00:14:51,710
which in time the number will those

00:14:49,190 --> 00:14:53,390
clothes are increasing in each time the

00:14:51,710 --> 00:14:58,460
snapshot image is getting more

00:14:53,390 --> 00:15:01,490
fragmented so there's a simple way to

00:14:58,460 --> 00:15:04,310
fix this fix this through though it

00:15:01,490 --> 00:15:05,360
could do a cause your increase in snap

00:15:04,310 --> 00:15:08,570
join your size

00:15:05,360 --> 00:15:12,320
just exclude the fragment closer from

00:15:08,570 --> 00:15:15,320
the data a cluster full but it turns out

00:15:12,320 --> 00:15:18,020
there are too many fragmented closest so

00:15:15,320 --> 00:15:22,550
I cannot get a little older fragment

00:15:18,020 --> 00:15:27,500
cluster so I came up with waiting

00:15:22,550 --> 00:15:32,140
clusters with the uses a count on each

00:15:27,500 --> 00:15:35,600
block so it's time I called closer a

00:15:32,140 --> 00:15:38,560
selected and it's currently the from the

00:15:35,600 --> 00:15:38,560
duplication process

00:15:40,040 --> 00:15:51,770
or this is he map actually based on the

00:15:45,290 --> 00:15:55,640
usage count on each block and each tiny

00:15:51,770 --> 00:15:58,850
blocks represent to their user count on

00:15:55,640 --> 00:16:03,290
each bowler and each line represents the

00:15:58,850 --> 00:16:06,860
one cluster and because the red block a

00:16:03,290 --> 00:16:11,360
means it's the Hudler and cold is the

00:16:06,860 --> 00:16:15,320
blue one is called blur amines are is do

00:16:11,360 --> 00:16:18,320
or rather represented they are using

00:16:15,320 --> 00:16:21,200
more free country and the blue one means

00:16:18,320 --> 00:16:29,300
the rest less a pre country for

00:16:21,200 --> 00:16:33,410
duplication so the image loading speeds

00:16:29,300 --> 00:16:37,490
is not just decreasing so after apply

00:16:33,410 --> 00:16:40,370
have to use this or a method then you

00:16:37,490 --> 00:16:44,140
can see that it goes up and out but it's

00:16:40,370 --> 00:16:44,140
not just decreasing

00:16:47,120 --> 00:16:56,460
so this is about the amount of data

00:16:50,850 --> 00:16:59,610
regions demountable a write increase of

00:16:56,460 --> 00:17:02,700
whenever hot clothes have become cold

00:16:59,610 --> 00:17:06,030
because the deduplication rate is a

00:17:02,700 --> 00:17:09,290
lower and I think it is trade-off

00:17:06,030 --> 00:17:13,200
between the amount of right and

00:17:09,290 --> 00:17:15,930
immediate loading speed but as you can

00:17:13,200 --> 00:17:18,830
see this approach improve the road

00:17:15,930 --> 00:17:18,830
explains a lot

00:17:21,980 --> 00:17:30,680
so this is part of a blog management I

00:17:26,010 --> 00:17:34,580
mentioned earlier in this skill scheme

00:17:30,680 --> 00:17:37,940
use closer reclaimed the first before

00:17:34,580 --> 00:17:41,430
discarded by the garbage collector

00:17:37,940 --> 00:17:44,070
non-data closer early claim during the

00:17:41,430 --> 00:17:47,880
regime process because they are no

00:17:44,070 --> 00:17:53,010
longer used but the data closer Ally

00:17:47,880 --> 00:17:57,090
claimed at long time when the the number

00:17:53,010 --> 00:18:02,310
of idle cluster is below a threshold or

00:17:57,090 --> 00:18:05,460
hot clusters are become cold and also

00:18:02,310 --> 00:18:08,880
there is the order of the data closer to

00:18:05,460 --> 00:18:18,420
be reclaimed cold cross the force and

00:18:08,880 --> 00:18:21,780
the less hot cross the next and this is

00:18:18,420 --> 00:18:25,320
about garbage collector how the garbage

00:18:21,780 --> 00:18:27,030
collection is worth the garbage

00:18:25,320 --> 00:18:31,200
collector is a background throughout of

00:18:27,030 --> 00:18:34,410
this system and it keeps checking the

00:18:31,200 --> 00:18:38,010
number will acclaimed a cluster and if

00:18:34,410 --> 00:18:41,070
the number is above our threshold then

00:18:38,010 --> 00:18:44,910
it start discarding the reclaim the

00:18:41,070 --> 00:18:49,470
cluster by giving our discard commander

00:18:44,910 --> 00:18:51,660
to underline crash storage device so

00:18:49,470 --> 00:18:54,840
this cost command gives a hint to the

00:18:51,660 --> 00:18:57,810
underlying storage device there are

00:18:54,840 --> 00:18:59,220
special file address range has nobody

00:18:57,810 --> 00:19:01,860
data

00:18:59,220 --> 00:19:13,320
this comment is sometimes called to tree

00:19:01,860 --> 00:19:16,730
more on map so just just the end of that

00:19:13,320 --> 00:19:19,730
so so if you have any question please

00:19:16,730 --> 00:19:19,730
yes

00:19:24,580 --> 00:19:30,390
oh yes yes

00:19:36,590 --> 00:19:51,049
oh yes yes yes right I see the point yes

00:19:49,220 --> 00:19:56,679
that that's very good question so we're

00:19:51,049 --> 00:20:00,200
still working on yet but we are from

00:19:56,679 --> 00:20:03,440
actually with our focus under actually

00:20:00,200 --> 00:20:07,879
first the screen I mean the first step

00:20:03,440 --> 00:20:10,700
in because of course if we are swab out

00:20:07,879 --> 00:20:14,240
all the pages to the device then it

00:20:10,700 --> 00:20:17,440
takes time especially when we are

00:20:14,240 --> 00:20:21,769
launching application in Android it

00:20:17,440 --> 00:20:24,860
emits lowered and without a swapping so

00:20:21,769 --> 00:20:28,389
that true so but we still are working on

00:20:24,860 --> 00:20:28,389
that problem thank you

00:20:43,120 --> 00:20:51,060
yes oh yes yes

00:20:57,390 --> 00:21:00,390
yes

00:21:12,410 --> 00:21:21,670
oh yes yes our that's right actually my

00:21:18,080 --> 00:21:25,580
work is based on their upstream color

00:21:21,670 --> 00:21:28,960
hibernation it's exactly the same person

00:21:25,580 --> 00:21:33,460
but I hacked and added a more feature

00:21:28,960 --> 00:21:38,900
like this one so and also we are try to

00:21:33,460 --> 00:21:44,240
use this scheme or intruder

00:21:38,900 --> 00:21:47,750
maybe bootloader yes like you about

00:21:44,240 --> 00:21:52,550
maybe you build or yes actually this

00:21:47,750 --> 00:21:56,710
picture can be like a library so we can

00:21:52,550 --> 00:21:56,710
use the API basically

00:22:05,150 --> 00:22:09,400
yes yes yes

00:22:11,070 --> 00:22:16,890
currently did this implementation we

00:22:13,890 --> 00:22:20,850
implemented this picture into the rings

00:22:16,890 --> 00:22:24,030
color and then the next the next version

00:22:20,850 --> 00:22:26,760
we try to implemented it into the reboot

00:22:24,030 --> 00:22:37,680
or a like good order yeah old opened

00:22:26,760 --> 00:22:44,270
order maybe yes that yes yes right yeah

00:22:37,680 --> 00:22:44,270
that's our final goal yes sorry yes

00:22:46,790 --> 00:23:00,490
our first 100 so probably only use the

00:22:54,830 --> 00:23:00,490
MMC but we can also use EFS to

00:23:17,300 --> 00:23:19,930
if

00:23:24,909 --> 00:23:31,879
yes but as you can see the test results

00:23:29,479 --> 00:23:33,739
came from their implementation we

00:23:31,879 --> 00:23:37,580
already have done into the Conner

00:23:33,739 --> 00:23:41,080
so yes well they are so busy working on

00:23:37,580 --> 00:23:44,839
door try to implement this person into

00:23:41,080 --> 00:23:49,119
Venuti but still working on it but we

00:23:44,839 --> 00:23:49,119
don't get the final result

00:23:58,230 --> 00:24:02,910
yes yes all right correct

00:24:18,780 --> 00:24:28,120
yeah that's where I guess test more than

00:24:24,280 --> 00:24:33,700
two no more so we actually worry about

00:24:28,120 --> 00:24:36,790
the time but it's really hard to reach

00:24:33,700 --> 00:24:39,430
the you just attack the time so we just

00:24:36,790 --> 00:24:41,730
you're working on it but it's not that

00:24:39,430 --> 00:24:48,040
but it depends on the hardware

00:24:41,730 --> 00:24:52,900
specification the boat we use is not

00:24:48,040 --> 00:24:55,810
very low level specification but there's

00:24:52,900 --> 00:25:00,430
I think we can almost ignore the time

00:24:55,810 --> 00:25:04,600
delay so maybe we will be using more

00:25:00,430 --> 00:25:06,850
higher specification of Hazard and I

00:25:04,600 --> 00:25:10,410
think we probably could know the

00:25:06,850 --> 00:25:10,410
difference thank you

00:25:20,469 --> 00:25:24,399
I'm sorry because it

00:25:32,200 --> 00:25:35,200
yes

00:25:43,790 --> 00:25:51,860
the last part yes

00:25:51,929 --> 00:25:54,590
yes

00:25:57,520 --> 00:26:09,450
oh so mmm

00:26:02,309 --> 00:26:09,450
bass under the board we use it takes our

00:26:11,139 --> 00:26:16,639
okay we can reduce you or more time so

00:26:13,909 --> 00:26:21,259
the final buzzer was I think it takes

00:26:16,639 --> 00:26:24,379
her five sick around five second yeah

00:26:21,259 --> 00:26:35,889
from the power off to their launch

00:26:24,379 --> 00:26:35,889
screen is just five second text yes

00:26:38,869 --> 00:26:45,529
it's suspect the reason time is not

00:26:41,879 --> 00:26:48,470
really are compared to their loading

00:26:45,529 --> 00:26:54,090
snap Chinese

00:26:48,470 --> 00:26:58,919
it takes moving actually most of the

00:26:54,090 --> 00:27:03,210
time it takes so suspend resume time it

00:26:58,919 --> 00:27:06,869
just takes your maybe less than our one

00:27:03,210 --> 00:27:09,029
second yes second but I think we can

00:27:06,869 --> 00:27:14,389
reduce the time it will be focus enter

00:27:09,029 --> 00:27:14,389
the suspend origin yes

00:27:15,470 --> 00:27:18,619
[Music]

00:27:28,740 --> 00:27:33,380
oh yes

00:27:40,880 --> 00:27:53,900
oh just let's go fishing and I'd like to

00:27:46,880 --> 00:27:58,030
ask this question to my boss so actually

00:27:53,900 --> 00:28:04,160
I mentioned this we discussed this but

00:27:58,030 --> 00:28:06,620
they come the company they say that it's

00:28:04,160 --> 00:28:11,000
now available right now not in public

00:28:06,620 --> 00:28:14,770
but probably after we launch our product

00:28:11,000 --> 00:28:14,770
then it would be available

00:28:28,810 --> 00:28:33,190
yes that's a problem

00:28:40,700 --> 00:28:50,090
oh yes yes yes for example if we use or

00:28:45,340 --> 00:28:54,889
you know we use the compression but if

00:28:50,090 --> 00:29:08,570
we have there the compress ng then we

00:28:54,889 --> 00:29:13,489
can accelerate to the speed oh yes not

00:29:08,570 --> 00:29:16,820
sure but yeah and it was and also there

00:29:13,489 --> 00:29:19,700
is a kisses if we use more cord McCoy

00:29:16,820 --> 00:29:32,169
then it accelerate the speed oh good

00:29:19,700 --> 00:29:32,169
time I think the average the 30%

00:29:33,190 --> 00:29:39,649
basically when it boots there are too

00:29:35,929 --> 00:29:43,480
many zero pace so the completion rate is

00:29:39,649 --> 00:29:50,409
very high but it depends thank you

00:29:43,480 --> 00:29:53,620
alright so there's no question that I

00:29:50,409 --> 00:29:59,490
can't thank you so much for this thing

00:29:53,620 --> 00:29:59,490

YouTube URL: https://www.youtube.com/watch?v=NeM02Q-MOHo


