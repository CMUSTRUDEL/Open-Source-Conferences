Title: Automated run-time Regression Testing with Fuego - Hirotaka Motai, Mitsubishi Electric Corp.
Publication date: 2019-09-16
Playlist: Open Source Summit & Embedded Linux Conference NA 2019
Description: 
	Automated run-time Regression Testing with Fuego - Hirotaka Motai, Mitsubishi Electric Corp.

Real-time applications need to satisfy timing constraints, and we have to avoid kernel changes which might cause long delays. But we need tons of time for testing to detect those issues. So, it is the reason why we use automated testing frameworks.We presented our test with "Fuego" in ELCE2018, which not only measures performance but also traces for detecting what cases delay. Now, we have developed Functional-test run-time logger which measure the amount of time required to finish the functional test, to get clues to detect internal problem even if all of the testâ€™s results is success. In this presentation we will share the detail of the run-time logger in Fuego with showing our actual use case.
Captions: 
	00:00:00,030 --> 00:00:06,990
and starting Tommy's coming can I start

00:00:02,850 --> 00:00:07,580
my session right thank you for coming

00:00:06,990 --> 00:00:11,790
today

00:00:07,580 --> 00:00:15,299
my name is hirotaka multi it's last

00:00:11,790 --> 00:00:18,330
station before a ranch so this session

00:00:15,299 --> 00:00:23,130
will be finished for roughly and 20

00:00:18,330 --> 00:00:26,430
minutes were so so this century's you

00:00:23,130 --> 00:00:29,820
can see automated runtime regression

00:00:26,430 --> 00:00:37,829
testing with Hugo do you know where go

00:00:29,820 --> 00:00:43,230
how many people will use it so okay

00:00:37,829 --> 00:00:48,379
interstitial I'd like to copper 2.0 main

00:00:43,230 --> 00:00:52,789
point mainly I'm hoping to give you

00:00:48,379 --> 00:00:59,430
overview of Hagel and one related

00:00:52,789 --> 00:01:03,690
project second I and I hoping to share

00:00:59,430 --> 00:01:07,619
my ideas for some kind of our issue in a

00:01:03,690 --> 00:01:11,760
performance point of view so here is a

00:01:07,619 --> 00:01:16,439
basic outline of what I want to talk

00:01:11,760 --> 00:01:17,540
about today first I going to introduce

00:01:16,439 --> 00:01:21,180
myself

00:01:17,540 --> 00:01:25,580
secondly I'm talking about an overview

00:01:21,180 --> 00:01:30,350
of this issue after that I'm going to

00:01:25,580 --> 00:01:35,100
more move on to the first main topic of

00:01:30,350 --> 00:01:39,960
decision introduce my unrelated artery

00:01:35,100 --> 00:01:43,259
interest related suits and then I will

00:01:39,960 --> 00:01:48,860
show you the the other main topics that

00:01:43,259 --> 00:01:51,869
is our issue and approach finally I will

00:01:48,860 --> 00:01:56,939
conclude this session and we will have

00:01:51,869 --> 00:02:00,890
time for questions so I'm just to

00:01:56,939 --> 00:02:04,009
introduce myself I'm Hirotaka Mota

00:02:00,890 --> 00:02:08,129
wakfu Mitsubishi Electric Corporation

00:02:04,009 --> 00:02:12,650
and I'm a software researcher for

00:02:08,129 --> 00:02:13,980
embedded system our group provides Linux

00:02:12,650 --> 00:02:17,540
hypervisor

00:02:13,980 --> 00:02:21,659
unli latest technologies for consumer

00:02:17,540 --> 00:02:26,640
electric devices and it's been our

00:02:21,659 --> 00:02:29,280
product my research focuses on the art

00:02:26,640 --> 00:02:33,510
time systems performance tuning and

00:02:29,280 --> 00:02:36,709
automated testing we've started to join

00:02:33,510 --> 00:02:43,280
the Linux Foundation project like a TSI

00:02:36,709 --> 00:02:43,280
AGL vehicle and since 2015

00:02:43,549 --> 00:02:51,269
here is the overview of the system

00:02:47,150 --> 00:02:55,620
recently Linux can be adapted to various

00:02:51,269 --> 00:03:00,030
embedded devices such as after vision an

00:02:55,620 --> 00:03:03,060
application system mobile home some kind

00:03:00,030 --> 00:03:08,010
of industrial control rods and so on

00:03:03,060 --> 00:03:13,769
even though especially industry control

00:03:08,010 --> 00:03:17,640
and need leader time responds in at the

00:03:13,769 --> 00:03:24,180
vault in another world predictable rate

00:03:17,640 --> 00:03:29,569
NC we need tons of time to enter in JIRA

00:03:24,180 --> 00:03:33,139
educated year time performance because

00:03:29,569 --> 00:03:38,099
real time applications need to satisfy

00:03:33,139 --> 00:03:42,329
timing constraint and they should avoid

00:03:38,099 --> 00:03:49,829
color changes which might cause long

00:03:42,329 --> 00:03:54,959
delays last year I made a presentation

00:03:49,829 --> 00:03:58,590
in embedded Linux Conference Europe and

00:03:54,959 --> 00:04:02,489
that is related with detecting some

00:03:58,590 --> 00:04:06,720
performance issues which using automated

00:04:02,489 --> 00:04:10,739
testing framework whoever in favor of

00:04:06,720 --> 00:04:15,510
test framework it's easier to measure a

00:04:10,739 --> 00:04:18,810
process switch latency and my approach

00:04:15,510 --> 00:04:23,190
is to add getting trace

00:04:18,810 --> 00:04:26,909
tracing at the same test time to get

00:04:23,190 --> 00:04:27,540
crews to the screen distinguish the

00:04:26,909 --> 00:04:33,590
program

00:04:27,540 --> 00:04:36,870
if our changes caused some kind of delay

00:04:33,590 --> 00:04:40,770
if we want to know the detail please

00:04:36,870 --> 00:04:45,660
check my tried on ET next week or ask me

00:04:40,770 --> 00:04:52,590
after decision so today I thought I'd

00:04:45,660 --> 00:04:55,770
like to give my presentation is long

00:04:52,590 --> 00:04:59,790
time it's about an rantin robot run tax

00:04:55,770 --> 00:05:03,810
or runtime robots so it I've developed

00:04:59,790 --> 00:05:08,190
runtime robots for some system called

00:05:03,810 --> 00:05:11,610
test in TP the least and why I've

00:05:08,190 --> 00:05:15,450
created is to get close to detect

00:05:11,610 --> 00:05:18,450
internal performance programs if every

00:05:15,450 --> 00:05:23,400
digit of OTP Linux test projects say

00:05:18,450 --> 00:05:27,510
pass embarrassed by embedded Linux might

00:05:23,400 --> 00:05:30,330
have some programs in a performance

00:05:27,510 --> 00:05:36,840
point of view and that is reason why

00:05:30,330 --> 00:05:39,840
I've developed long time logo so I'm

00:05:36,840 --> 00:05:45,420
going to introduce two related project

00:05:39,840 --> 00:05:49,410
we go on LTP avevo is an automated

00:05:45,420 --> 00:05:54,630
testing system specifically designed it

00:05:49,410 --> 00:05:58,020
for embedded Linux testing the other is

00:05:54,630 --> 00:06:00,750
RTP the next test project maintains

00:05:58,020 --> 00:06:06,060
regression and conformance tests

00:06:00,750 --> 00:06:13,350
designed to conform the be fiber of the

00:06:06,060 --> 00:06:16,560
Linux kernel on delivery as I mentioned

00:06:13,350 --> 00:06:22,590
before lean Faygo is an automated

00:06:16,560 --> 00:06:25,890
testing system for embedded Linux there

00:06:22,590 --> 00:06:29,730
are a lot of open source suite test

00:06:25,890 --> 00:06:35,520
suites and test frameworks vago is one

00:06:29,730 --> 00:06:38,430
of them we have three reasons why we use

00:06:35,520 --> 00:06:40,920
the free go first

00:06:38,430 --> 00:06:43,920
it's that we go is being

00:06:40,920 --> 00:06:47,850
created by a DSi projects based on

00:06:43,920 --> 00:06:53,160
Jenkins if you have experience of

00:06:47,850 --> 00:06:57,020
Jenkins you could be easy to use the

00:06:53,160 --> 00:07:02,520
vehicle and you also could customize it

00:06:57,020 --> 00:07:08,090
to make your pipeline such a gating

00:07:02,520 --> 00:07:11,610
source code compiling deploying and etc

00:07:08,090 --> 00:07:15,980
second reason is vehicle is the open

00:07:11,610 --> 00:07:20,100
source software so anyone can use it and

00:07:15,980 --> 00:07:23,100
anyone can contribute it so uh

00:07:20,100 --> 00:07:28,950
traditionally automotive-grade Ronettes

00:07:23,100 --> 00:07:36,510
project shows through a standard test

00:07:28,950 --> 00:07:40,890
environment called AG r JT a vago is a

00:07:36,510 --> 00:07:45,360
kind of post-test distribution brought a

00:07:40,890 --> 00:07:48,900
bunch of host script and test packaged

00:07:45,360 --> 00:07:52,140
along with the jenkins interface through

00:07:48,900 --> 00:07:57,600
jenkins interface or inside a docker

00:07:52,140 --> 00:08:00,360
container who has a beauty system due to

00:07:57,600 --> 00:08:02,510
an octave to neutral and inherently

00:08:00,360 --> 00:08:06,090
cross brought home

00:08:02,510 --> 00:08:12,180
each test program built from source code

00:08:06,090 --> 00:08:16,470
and google also has script for test or

00:08:12,180 --> 00:08:22,440
castration result passing and analysis

00:08:16,470 --> 00:08:25,980
for the test records we can carry out

00:08:22,440 --> 00:08:32,130
specific tests automatically that is

00:08:25,980 --> 00:08:37,650
kicked by software update there is a

00:08:32,130 --> 00:08:41,729
screenshot of Jenkins you can see a part

00:08:37,650 --> 00:08:48,710
of test in Google actually whoever has

00:08:41,729 --> 00:08:53,700
you can see to write of test items but

00:08:48,710 --> 00:08:55,410
actually whoever has about 150 different

00:08:53,700 --> 00:08:58,290
tests

00:08:55,410 --> 00:09:02,720
and some of them not

00:08:58,290 --> 00:09:07,470
Vegas specific tests but most of the

00:09:02,720 --> 00:09:12,870
rapid existing tests like dry stone bony

00:09:07,470 --> 00:09:16,590
Hawk bench and so on we go has a rubbers

00:09:12,870 --> 00:09:21,140
for building developing running and

00:09:16,590 --> 00:09:25,560
correcting the lizards for each test and

00:09:21,140 --> 00:09:29,610
it also has a person so whatever the

00:09:25,560 --> 00:09:34,350
test has void output format that can

00:09:29,610 --> 00:09:40,230
correct information and put it on put it

00:09:34,350 --> 00:09:43,350
in a standardized output format a web

00:09:40,230 --> 00:09:47,130
control interface for stunts starting

00:09:43,350 --> 00:09:52,970
tests monitoring and checking their

00:09:47,130 --> 00:09:57,570
result it's doing virtualization on it

00:09:52,970 --> 00:10:04,260
and you can also check the retest result

00:09:57,570 --> 00:10:08,070
on web interface like that we've had two

00:10:04,260 --> 00:10:11,790
categories test functional test and

00:10:08,070 --> 00:10:15,330
benchmark test functional test means

00:10:11,790 --> 00:10:20,850
that we the test results can be judged

00:10:15,330 --> 00:10:24,360
by a little body of the test program the

00:10:20,850 --> 00:10:28,980
test program finished successfully it's

00:10:24,360 --> 00:10:32,580
passed the other words fail the Freegal

00:10:28,980 --> 00:10:41,690
HUDs 102 test Suites as functional tests

00:10:32,580 --> 00:10:41,690
like that here oh sorry right

00:10:41,860 --> 00:10:54,440
exert and the other category is

00:10:46,520 --> 00:10:58,250
benchmark test it means the test result

00:10:54,440 --> 00:11:02,480
can be judged by compressing little body

00:10:58,250 --> 00:11:06,190
with threshold the test program measures

00:11:02,480 --> 00:11:09,470
some performance in your target system

00:11:06,190 --> 00:11:13,310
if the VAR you if the performance value

00:11:09,470 --> 00:11:18,590
is lesser or higher than threshold we

00:11:13,310 --> 00:11:23,300
expected the result is pass so whoever

00:11:18,590 --> 00:11:28,190
has 40 roughly 40 test Suites at

00:11:23,300 --> 00:11:32,260
benchmark test racks at dry stone I'll

00:11:28,190 --> 00:11:32,260
paint as on and so on

00:11:32,500 --> 00:11:40,250
so next related through its LTP the

00:11:36,920 --> 00:11:44,300
Linux test project is a huge collection

00:11:40,250 --> 00:11:47,690
of tests for Linux especially regression

00:11:44,300 --> 00:11:50,750
test and conformance tests designed to

00:11:47,690 --> 00:11:56,840
confirm the behavior of the Linux kernel

00:11:50,750 --> 00:12:02,480
on gypsy we can look at the overall

00:11:56,840 --> 00:12:07,400
number of the test case RTP containing

00:12:02,480 --> 00:12:12,920
about 1000 system core test case about

00:12:07,400 --> 00:12:18,070
and one about 1600 POSIX conformance

00:12:12,920 --> 00:12:22,070
tests and real-time test suites various

00:12:18,070 --> 00:12:27,250
iota stress tests and network relate is

00:12:22,070 --> 00:12:30,800
this case so LTP Hazara top test case

00:12:27,250 --> 00:12:35,810
it's a bit hard to understand test

00:12:30,800 --> 00:12:40,310
result because Linux kernel or your

00:12:35,810 --> 00:12:45,500
system is customizable and make some

00:12:40,310 --> 00:12:49,130
future enable or disable so tester had

00:12:45,500 --> 00:12:54,470
have seen no the configuration of the

00:12:49,130 --> 00:13:01,630
target system and the detail of test

00:12:54,470 --> 00:13:08,510
case and just have to judge the result

00:13:01,630 --> 00:13:13,280
very correct in this condition so it

00:13:08,510 --> 00:13:16,940
it's it's a bit hard so anyway in a

00:13:13,280 --> 00:13:20,800
point of view of regression revision

00:13:16,940 --> 00:13:27,980
checking tester needs to check the gaps

00:13:20,800 --> 00:13:31,040
between previous and current result so

00:13:27,980 --> 00:13:35,050
we go hearts figure also has two

00:13:31,040 --> 00:13:40,280
categories related to OTP why it's

00:13:35,050 --> 00:13:44,900
functional LTP it's an execution of LTP

00:13:40,280 --> 00:13:50,810
scenarios the other is functional OTP

00:13:44,900 --> 00:13:54,860
one test it's only one RTP test that you

00:13:50,810 --> 00:13:58,840
can define with using ATP test Suites

00:13:54,860 --> 00:14:03,500
for example only the system called

00:13:58,840 --> 00:14:10,610
Murray or some kind of system quarry or

00:14:03,500 --> 00:14:16,820
and so on so let's move on to next main

00:14:10,610 --> 00:14:20,770
topics my issue and approach in my

00:14:16,820 --> 00:14:24,290
opinion it's important to focus on

00:14:20,770 --> 00:14:28,250
checking lizard ticking regression of

00:14:24,290 --> 00:14:34,330
system core interface in terms of you

00:14:28,250 --> 00:14:40,760
about not only right or correct or wrong

00:14:34,330 --> 00:14:44,800
but also performance because if the

00:14:40,760 --> 00:14:49,550
execution time of system whole increase

00:14:44,800 --> 00:14:54,500
it will influence overall performance of

00:14:49,550 --> 00:14:58,940
the earth time process directory as I

00:14:54,500 --> 00:15:03,320
mentioned before LTP can test systemic

00:14:58,940 --> 00:15:09,460
risk or interface and we go is easy to

00:15:03,320 --> 00:15:09,460
do l GP on your target system

00:15:09,709 --> 00:15:23,339
so this is the sample and the LTP test

00:15:16,259 --> 00:15:26,790
result on Fuego you can see it right you

00:15:23,339 --> 00:15:31,550
can see a couple of results the number

00:15:26,790 --> 00:15:41,339
of paths of two results easy Matt's

00:15:31,550 --> 00:15:47,819
first one here and here the number of

00:15:41,339 --> 00:15:51,930
fail is also saying number H in H is

00:15:47,819 --> 00:15:58,249
same do you think the system did not

00:15:51,930 --> 00:16:01,439
degraded I'm not sure about ah I think

00:15:58,249 --> 00:16:02,360
it's important to make the difference

00:16:01,439 --> 00:16:08,939
career

00:16:02,360 --> 00:16:14,850
so what name of z-score is passed is the

00:16:08,939 --> 00:16:19,439
result is in both of this same thought

00:16:14,850 --> 00:16:24,809
about in performance point of view to be

00:16:19,439 --> 00:16:34,170
honest I can not check the detail of the

00:16:24,809 --> 00:16:40,139
difference from those result so I have

00:16:34,170 --> 00:16:45,899
used abused FTP one test case in Rio for

00:16:40,139 --> 00:16:50,490
making each result career Rd adding our

00:16:45,899 --> 00:16:57,959
important system call into specific JSON

00:16:50,490 --> 00:17:03,509
file like that we can test those Cisco

00:16:57,959 --> 00:17:08,329
with we go this example show how to add

00:17:03,509 --> 00:17:14,130
some Cisco related with shared memory

00:17:08,329 --> 00:17:19,549
one of test specifications this example

00:17:14,130 --> 00:17:23,490
shows how to add a sorry this agree this

00:17:19,549 --> 00:17:30,200
example sure how to that specific test

00:17:23,490 --> 00:17:36,929
Jose but is the audit here and sorry and

00:17:30,200 --> 00:17:41,610
RP I 381 it's just just a board name in

00:17:36,929 --> 00:17:48,290
my in my environment and Cisco's shared

00:17:41,610 --> 00:17:54,510
man attached there one is important here

00:17:48,290 --> 00:18:02,820
and this example shows how to run the

00:17:54,510 --> 00:18:08,900
Jose on my target this is one of the

00:18:02,820 --> 00:18:15,840
result of ATP one test with I with

00:18:08,900 --> 00:18:19,710
example which I just introduced share

00:18:15,840 --> 00:18:25,169
the memo touch his skull test in RTP had

00:18:19,710 --> 00:18:34,860
four four test cases and all tests but

00:18:25,169 --> 00:18:37,820
past you can see it however each

00:18:34,860 --> 00:18:41,820
execution time had not been cleared yet

00:18:37,820 --> 00:18:46,130
we can check build time built on trend

00:18:41,820 --> 00:18:51,049
on Jenkins interface if you click here

00:18:46,130 --> 00:18:57,480
but what I what we want to find out is

00:18:51,049 --> 00:19:04,650
intolerant time of each syscall not not

00:18:57,480 --> 00:19:09,900
build time so this is I introduce my

00:19:04,650 --> 00:19:14,809
approach at the beginning I thought it's

00:19:09,900 --> 00:19:19,280
better to do in simple way Vega can

00:19:14,809 --> 00:19:25,559
execute a script on the target system

00:19:19,280 --> 00:19:30,240
this drawing is executed here executed

00:19:25,559 --> 00:19:32,120
on the target system one one test one

00:19:30,240 --> 00:19:38,160
test

00:19:32,120 --> 00:19:42,120
me this command of LTP related to fat I

00:19:38,160 --> 00:19:45,780
defined it share the memory attached

00:19:42,120 --> 00:19:48,920
system cover access in focus

00:19:45,780 --> 00:19:53,190
sorry I defined it in vehicle-specific

00:19:48,920 --> 00:19:56,550
JSON file record she had the memory

00:19:53,190 --> 00:20:00,230
attached system core so I will modify

00:19:56,550 --> 00:20:08,390
the Hegel test scripts and insert it

00:20:00,230 --> 00:20:08,390
brewing especially runtime Roga scrip

00:20:09,200 --> 00:20:16,800
deonda the runtime raga scripts i'm to

00:20:12,750 --> 00:20:21,870
record the execution time of Cisco's in

00:20:16,800 --> 00:20:28,610
each test each LTP test in my idea to

00:20:21,870 --> 00:20:32,550
use the asterisk command because

00:20:28,610 --> 00:20:36,740
history's had future to record time for

00:20:32,550 --> 00:20:42,930
from the beginning to the end o of each

00:20:36,740 --> 00:20:46,110
Cisco with option - Raji after that

00:20:42,930 --> 00:20:50,370
Esther a stroke can match it merged into

00:20:46,110 --> 00:20:58,230
the test record which grep command a

00:20:50,370 --> 00:21:04,890
with break moment this screenshot is a

00:20:58,230 --> 00:21:09,690
test record with using runtime raga you

00:21:04,890 --> 00:21:16,700
can see that the execution time of each

00:21:09,690 --> 00:21:17,850
she score what saves with one

00:21:16,700 --> 00:21:29,190
microsecond

00:21:17,850 --> 00:21:31,800
accuracy here getting off the point but

00:21:29,190 --> 00:21:34,020
shared memory utter she score was called

00:21:31,800 --> 00:21:38,540
five times total

00:21:34,020 --> 00:21:43,740
in spite of all four test patterns

00:21:38,540 --> 00:21:45,240
because this LTP test program has used a

00:21:43,740 --> 00:21:49,500
shared memory

00:21:45,240 --> 00:21:53,279
for sharing records rope between parent

00:21:49,500 --> 00:22:00,830
process and child process so shame

00:21:53,279 --> 00:22:07,440
attached called was code five time story

00:22:00,830 --> 00:22:12,029
so a variation I confirmed to check what

00:22:07,440 --> 00:22:14,460
about my long time Ruger can show crew

00:22:12,029 --> 00:22:19,559
in test Road

00:22:14,460 --> 00:22:22,559
I injected one second

00:22:19,559 --> 00:22:25,679
waiting code into the beginning of

00:22:22,559 --> 00:22:30,270
shared memory attached interface in the

00:22:25,679 --> 00:22:36,750
kernel and I checked the figure result

00:22:30,270 --> 00:22:41,549
if I if one second da included or not so

00:22:36,750 --> 00:22:46,350
here is a result each result but pass

00:22:41,549 --> 00:22:51,080
here same as in default default corner

00:22:46,350 --> 00:22:55,649
and the time difference compared with

00:22:51,080 --> 00:23:03,230
dessert in default kernel lovely one

00:22:55,649 --> 00:23:09,409
second each system course so I thought

00:23:03,230 --> 00:23:14,059
we my longtime robot could remain in the

00:23:09,409 --> 00:23:17,510
system called each of system called time

00:23:14,059 --> 00:23:20,690
so I'd like to summarize my session

00:23:17,510 --> 00:23:24,990
their time application need to satisfy

00:23:20,690 --> 00:23:27,750
timing constraints in panel in terms of

00:23:24,990 --> 00:23:33,590
regression she's called time in noon

00:23:27,750 --> 00:23:37,860
Linux will be shorter or Artemis old one

00:23:33,590 --> 00:23:41,159
we go is useful to us for not only

00:23:37,860 --> 00:23:47,600
functional regression checking but also

00:23:41,159 --> 00:23:51,750
measuring to see scores future works I

00:23:47,600 --> 00:23:56,330
want to see historical results drying

00:23:51,750 --> 00:23:58,850
graph because of human friendly

00:23:56,330 --> 00:24:03,710
I've already

00:23:58,850 --> 00:24:09,430
cast with Vega community but they think

00:24:03,710 --> 00:24:14,230
about my idea at Jamboree last month

00:24:09,430 --> 00:24:18,560
Jamboree is like a mini workshop and

00:24:14,230 --> 00:24:23,990
currently I've developed it the

00:24:18,560 --> 00:24:29,530
benchmark test it and I I will comment

00:24:23,990 --> 00:24:29,530
it the vehicle community in your futures

00:24:30,580 --> 00:24:39,830
so thank you for listening and if you if

00:24:36,500 --> 00:24:42,460
anyone has questions I will do my best

00:24:39,830 --> 00:24:45,760
to answer it

00:24:42,460 --> 00:24:45,760
it's please

00:24:58,550 --> 00:25:02,740
I'm sorry IQ included yeah

00:25:10,700 --> 00:25:25,770
okay our product has a lot of our

00:25:20,700 --> 00:25:29,970
products use various kind of Linux of

00:25:25,770 --> 00:25:35,520
course no normal the next corner or our

00:25:29,970 --> 00:25:42,470
tea with our Tea Party and so this idea

00:25:35,520 --> 00:25:54,780
can be adapted both of them I think so

00:25:42,470 --> 00:25:58,820
can answer your question right this this

00:25:54,780 --> 00:26:07,070
this this research is a leg lock on it

00:25:58,820 --> 00:26:07,070
without our Tea Party yes please

00:26:17,770 --> 00:26:48,930
I see I see

00:26:50,100 --> 00:27:01,510
yes yes exactly I'm interested in these

00:26:55,110 --> 00:27:10,020
same topics and so let's discuss it

00:27:01,510 --> 00:27:10,020
after this issue yeah yes please

00:27:29,320 --> 00:27:38,920
so it's so difficult to combination with

00:27:32,780 --> 00:27:44,750
after a Sunday stories I see so but so I

00:27:38,920 --> 00:27:53,570
couldn't okay

00:27:44,750 --> 00:28:01,160
I couldn't find the idea to do that so

00:27:53,570 --> 00:28:07,720
if you have any idea reason oh I see so

00:28:01,160 --> 00:28:07,720
yeah I I will find you yes please

00:28:11,310 --> 00:28:14,310
yeah

00:28:27,030 --> 00:28:36,770
we're each connected with a beer SSH and

00:28:31,320 --> 00:28:36,770
so and just a moment

00:28:43,340 --> 00:28:57,750
so figure connect the target we SSH and

00:28:49,800 --> 00:29:03,690
and if you go build test program with

00:28:57,750 --> 00:29:09,170
cross cross compiler and send this point

00:29:03,690 --> 00:29:14,640
re to target and execution with SSH

00:29:09,170 --> 00:29:21,020
comma dry and wizards and get literate

00:29:14,640 --> 00:29:21,020
record to send to host PC

00:30:54,050 --> 00:31:00,850
onon christians okay that's all say Oh

00:32:58,640 --> 00:33:08,370
thank you for us easy to me okay and

00:33:04,490 --> 00:33:11,500
thank you for coming today I think this

00:33:08,370 --> 00:33:18,000
issue will finish thank you

00:33:11,500 --> 00:33:18,000

YouTube URL: https://www.youtube.com/watch?v=RPBNBwPc7mo


